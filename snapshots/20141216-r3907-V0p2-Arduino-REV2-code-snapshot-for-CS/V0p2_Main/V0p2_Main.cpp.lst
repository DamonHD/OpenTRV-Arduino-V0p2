
/var/folders/km/s_tzntf16nzg5bdh5n6g6lz40000gn/T/build1241980938643536440.tmp/V0p2_Main.cpp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fc  00800100  00003512  000035a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003512  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001d3  008001fc  008001fc  000036a2  2**0
                  ALLOC
  3 .debug_aranges 00001078  00000000  00000000  000036a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00002c91  00000000  00000000  0000471a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00017768  00000000  00000000  000073ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00004cc6  00000000  00000000  0001eb13  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00010eae  00000000  00000000  000237d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001d50  00000000  00000000  00034688  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000068ef  00000000  00000000  000363d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00009c1e  00000000  00000000  0003ccc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 000ab883  00000000  00000000  000468e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001368  00000000  00000000  000f2168  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
    virtual bool isValid(const uint8_t value) const { return(value <= 100); }

    // Returns true if (re)calibrating/(re)initialising/(re)syncing.
    // The target valve position is not lost while this is true.
    // By default there is no recalibration step.
    virtual bool isRecalibrating() const { return(false); }
       0:	0c 94 82 01 	jmp	0x304	; 0x304 <__ctors_end>

#ifndef localFHT8VTRVEnabled
// Returns TRV if valve/radiator is to be controlled by this unit.
// Usually the case, but may not be for (a) a hub or (b) a not-yet-configured unit.
// Returns false if house code parts are set to invalid or uninitialised values (>99).
bool localFHT8VTRVEnabled() { return(((FHT8VGetHC1() <= 99) && (FHT8VGetHC2() <= 99))); }
       4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
  if(!lastItem) { *p = stats[nStats-1]; }
  // We got rid of one!
  // TODO: possibly explicitly destroy/overwrite the removed one at the end.
  --nStats;
  return(true);
  }
       8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
  }

// Get approximate internal temperature in nominal C/16.
// Only accurate to +/- 10C uncalibrated.
// May set sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
int readInternalTemperatureC16()
       c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
#else
  while((uint8_t)0xff != (val = *bptr++)) { _RFM22_wr(val); }
#endif
  _RFM22_DESELECT();
  if(neededEnable) { powerDownSPI(); }
  }
      10:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
}

/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
      14:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
    { eeprom_smart_erase_byte((uint8_t*)(EE_START_SIMPLE_SCHEDULE0_ON + which)); }
  }

// Returns true if any simple schedule is set, false otherwise.
// This implementation just checks for any valid schedule 'on' time.
bool isAnySimpleScheduleSet()
      18:	0c 94 71 07 	jmp	0xee2	; 0xee2 <__vector_6>


// Get the current stats transmission level (for data outbound from this node).
// May not exactly match enumerated levels; use inequalities.
// Not thread-/ISR- safe.
stats_TX_level getStatsTXLevel() { return((stats_TX_level)eeprom_read_byte((uint8_t *)EE_START_STATS_TX_ENABLE)); }
      1c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
  // Send the character.
  Serial.print(c);
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
  if(neededWaking) { powerDownSerial(); }
  }
      20:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
// Thread-safe.
void resetCLIActiveTimer() { CLITimeoutM = CLI_DEFAULT_TIMEOUT_M; }

// Returns true if the CLI is active, at least intermittently.
// Thread-safe.
bool isCLIActive() { return(0 != CLITimeoutM); }
      24:	0c 94 41 07 	jmp	0xe82	; 0xe82 <__vector_9>
// This may be achieved in part by dynamically slowing the CPU clock if possible.
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed((((MIN_CPU_HZ * (ms)) + 2000) / 4000) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
      28:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
  public:
    // Return last value fetched by read(); undefined before first read().
    // Usually fast.
    // Often likely to be thread-safe or usable within ISRs (Interrupt Service Routines),
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual uint8_t get() const { return(value); }
      2c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
  // set address of targeted slave
  txAddress = address;
  // reset tx buffer iterator vars
  txBufferIndex = 0;
  txBufferLength = 0;
}
      30:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
 */
void twi_setAddress(uint8_t address)
{
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
}
      34:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
      38:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
      3c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
      40:	0c 94 a0 19 	jmp	0x3340	; 0x3340 <__vector_16>
	timer0_millis = m;
	timer0_overflow_count++;
}

unsigned long millis()
{
      44:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      48:	0c 94 cd 15 	jmp	0x2b9a	; 0x2b9a <__vector_18>
      4c:	0c 94 1b 16 	jmp	0x2c36	; 0x2c36 <__vector_19>
      50:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      54:	0c 94 2a 08 	jmp	0x1054	; 0x1054 <__vector_21>
      58:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      5c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      60:	0c 94 8a 13 	jmp	0x2714	; 0x2714 <__vector_24>
      64:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>

00000068 <loopAlt()::__c>:
      68:	74 69 63 6b 2e 2e 2e 00                             tick....

00000070 <POSTalt()::__c>:
      70:	74 65 6d 70 3a 20 00                                temp: .

00000077 <FHT8V_RFM22_Reg_Values>:
      77:	06 00 08 00 30 00 33 06 34 08 35 10 36 aa 37 cc     ....0.3.4.5.6.7.
      87:	38 cc 39 cc 6d 0b 6e 28 6f f5 70 20 71 21 72 20     8.9.m.n(o.p q!r 
      97:	73 00 74 00 75 73 76 64 77 00 79 23 7a 01 ff ff     s.t.usvdw.y#z...

000000a7 <FHT8VPollSyncAndTX_Next(bool)::__c>:
      a7:	46 48 54 38 56 20 54 58 00                          FHT8V TX.

000000b0 <doSync(bool)::__c>:
      b0:	46 48 54 38 56 20 53 59 4e 43 20 46 49 4e 41 4c     FHT8V SYNC FINAL
	...

000000c1 <doSync(bool)::__c>:
      c1:	46 48 54 38 56 20 53 59 4e 43 2e 2e 2e 00           FHT8V SYNC....

000000cf <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)::__c>:
      cf:	22 2b 22 3a 00                                      "+":.

000000d4 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)::__c>:
      d4:	22 40 22 3a 22 00                                   "@":".

000000da <SimpleStatsRotationBase::put(char const*, int)::__c>:
      da:	54 6f 6f 20 6d 61 6e 79 20 6b 65 79 73 3a 20 00     Too many keys: .

000000ea <ensureIDCreated(bool)::__c>:
      ea:	20 2e 2e 2e 20 00                                    ... .

000000f0 <ensureIDCreated(bool)::__c>:
      f0:	49 6e 76 61 6c 69 64 20 49 44 20 62 79 74 65 20     Invalid ID byte 
	...

00000101 <ensureIDCreated(bool)::__c>:
     101:	20 2e 2e 2e 20 00                                    ... .

00000107 <ensureIDCreated(bool)::__c>:
     107:	53 65 74 74 69 6e 67 20 49 44 20 62 79 74 65 20     Setting ID byte 
	...

00000118 <RFM22CheckConnected()::__c>:
     118:	52 46 4d 32 32 20 62 61 64 00                       RFM22 bad.

00000122 <setup::__c>:
     122:	42 61 64 20 49 44 20 61 6e 64 20 63 61 6e 6e 6f     Bad ID and canno
     132:	74 20 72 65 73 65 74 2e 00                          t reset..

0000013b <setup::__c>:
     13b:	41 4c 54 45 52 4e 41 54 45 20 4d 41 49 4e 20 4c     ALTERNATE MAIN L
     14b:	4f 4f 50 20 57 49 4c 4c 20 42 45 20 52 55 4e 2e     OOP WILL BE RUN.
     15b:	2e 2e 00                                            ...

0000015e <setup::__c>:
     15e:	46 72 65 65 20 52 41 4d 3a 20 00                    Free RAM: .

00000169 <setup::__c>:
     169:	52 65 73 65 74 73 3a 20 00                          Resets: .

00000172 <setup::__c>:
     172:	44 45 42 55 47 20 6d 6f 64 65 20 77 69 74 68 20     DEBUG mode with 
     182:	73 65 72 69 61 6c 20 6c 6f 67 67 69 6e 67 00        serial logging.

00000191 <setup::__c>:
     191:	0d 0a 4f 70 65 6e 54 52 56 20 62 6f 6f 74 69 6e     ..OpenTRV bootin
     1a1:	67 3a 20 00                                         g: .

000001a5 <optionalPOST()::__c>:
     1a5:	52 61 64 69 6f 2c 20 78 74 61 6c 2c 20 62 75 74     Radio, xtal, but
     1b5:	74 6f 6e 73 2f 73 65 6e 73 6f 72 73 20 4f 4b 00     tons/sensors OK.

000001c5 <optionalPOST()::__c>:
     1c5:	58 74 61 6c 20 64 65 61 64 00                       Xtal dead.

000001cf <optionalPOST()::__c>:
     1cf:	41 73 79 6e 63 20 33 32 37 36 38 48 7a 20 63 6c     Async 32768Hz cl
     1df:	6f 63 6b 20 6d 61 79 20 6e 6f 74 20 62 65 20 72     ock may not be r
     1ef:	75 6e 6e 69 6e 67 21 00                             unning!.

000001f7 <optionalPOST()::__c>:
     1f7:	53 6c 65 65 70 69 6e 67 20 74 6f 20 6c 65 74 20     Sleeping to let 
     207:	33 32 37 36 38 48 7a 20 63 6c 6f 63 6b 20 73 74     32768Hz clock st
     217:	61 72 74 2e 2e 2e 00                                art....

0000021e <optionalPOST()::__c>:
     21e:	4c 32 20 73 74 75 63 6b 00                          L2 stuck.

00000227 <optionalPOST()::__c>:
     227:	4c 20 73 74 75 63 6b 00                             L stuck.

0000022f <optionalPOST()::__c>:
     22f:	4d 20 73 74 75 63 6b 00                             M stuck.

00000237 <posPOST(unsigned char, __FlashStringHelper const*)::__c>:
     237:	3a 20 00                                            : .

0000023a <posPOST(unsigned char, __FlashStringHelper const*)::__c>:
     23a:	70 6f 73 50 4f 53 54 3a 20 00                       posPOST: .

00000244 <serialPrintlnBuildVersion()::__c>:
     244:	20 32 30 3a 35 30 3a 30 38 00                        20:50:08.

0000024e <serialPrintlnBuildVersion()::__c>:
     24e:	3b 20 63 6f 64 65 20 24 49 64 3a 20 56 30 70 32     ; code $Id: V0p2
     25e:	5f 4d 61 69 6e 2e 69 6e 6f 20 33 38 36 34 20 32     _Main.ino 3864 2
     26e:	30 31 34 2d 31 32 2d 31 30 20 32 31 3a 30 31 3a     014-12-10 21:01:
     27e:	35 34 5a 20 64 61 6d 6f 6e 68 64 20 24 20 00        54Z damonhd $ .

0000028d <serialPrintlnBuildVersion()::__c>:
     28d:	62 6f 61 72 64 20 56 30 2e 32 20 52 45 56 00        board V0.2 REV.

0000029c <port_to_mode_PGM>:
     29c:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000002a6 <port_to_output_PGM>:
     2a6:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000002b0 <port_to_input_PGM>:
     2b0:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000002ba <digital_pin_to_port_PGM>:
     2ba:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     2ca:	03 03 03 03                                         ....

000002ce <digital_pin_to_bit_mask_PGM>:
     2ce:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     2de:	04 08 10 20                                         ... 

000002e2 <digital_pin_to_timer_PGM>:
     2e2:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     2f2:	00 00 00 00                                         ....

000002f6 <__ctors_start>:
     2f6:	f5 02       	muls	r31, r21
     2f8:	fe 09       	sbc	r31, r14
     2fa:	59 0b       	sbc	r21, r25
     2fc:	ff 0d       	add	r31, r15
     2fe:	4d 0f       	add	r20, r29
     300:	26 12       	cpse	r2, r22
     302:	e4 17       	cp	r30, r20

00000304 <__ctors_end>:
     304:	11 24       	eor	r1, r1
     306:	1f be       	out	0x3f, r1	; 63
     308:	cf ef       	ldi	r28, 0xFF	; 255
     30a:	d8 e0       	ldi	r29, 0x08	; 8
     30c:	de bf       	out	0x3e, r29	; 62
     30e:	cd bf       	out	0x3d, r28	; 61

00000310 <__do_copy_data>:
     310:	11 e0       	ldi	r17, 0x01	; 1
     312:	a0 e0       	ldi	r26, 0x00	; 0
     314:	b1 e0       	ldi	r27, 0x01	; 1
     316:	e2 e1       	ldi	r30, 0x12	; 18
     318:	f5 e3       	ldi	r31, 0x35	; 53
     31a:	02 c0       	rjmp	.+4      	; 0x320 <.do_copy_data_start>

0000031c <.do_copy_data_loop>:
     31c:	05 90       	lpm	r0, Z+
     31e:	0d 92       	st	X+, r0

00000320 <.do_copy_data_start>:
     320:	ac 3f       	cpi	r26, 0xFC	; 252
     322:	b1 07       	cpc	r27, r17
     324:	d9 f7       	brne	.-10     	; 0x31c <.do_copy_data_loop>

00000326 <__do_clear_bss>:
     326:	13 e0       	ldi	r17, 0x03	; 3
     328:	ac ef       	ldi	r26, 0xFC	; 252
     32a:	b1 e0       	ldi	r27, 0x01	; 1
     32c:	01 c0       	rjmp	.+2      	; 0x330 <.do_clear_bss_start>

0000032e <.do_clear_bss_loop>:
     32e:	1d 92       	st	X+, r1

00000330 <.do_clear_bss_start>:
     330:	af 3c       	cpi	r26, 0xCF	; 207
     332:	b1 07       	cpc	r27, r17
     334:	e1 f7       	brne	.-8      	; 0x32e <.do_clear_bss_loop>

00000336 <__do_global_ctors>:
     336:	12 e0       	ldi	r17, 0x02	; 2
     338:	c4 e0       	ldi	r28, 0x04	; 4
     33a:	d3 e0       	ldi	r29, 0x03	; 3
     33c:	04 c0       	rjmp	.+8      	; 0x346 <.do_global_ctors_start>

0000033e <.do_global_ctors_loop>:
     33e:	22 97       	sbiw	r28, 0x02	; 2
     340:	fe 01       	movw	r30, r28
     342:	0e 94 83 1a 	call	0x3506	; 0x3506 <__tablejump__>

00000346 <.do_global_ctors_start>:
     346:	c6 3f       	cpi	r28, 0xF6	; 246
     348:	d1 07       	cpc	r29, r17
     34a:	c9 f7       	brne	.-14     	; 0x33e <.do_global_ctors_loop>
     34c:	0e 94 3a 18 	call	0x3074	; 0x3074 <main>
     350:	0c 94 87 1a 	jmp	0x350e	; 0x350e <_exit>

00000354 <__bad_interrupt>:
     354:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000358 <abort>:
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	f8 94       	cli
     35e:	0c 94 87 1a 	jmp	0x350e	; 0x350e <_exit>

00000362 <__eerd_word>:
     362:	df 92       	push	r13
     364:	ef 92       	push	r14
     366:	ff 92       	push	r15
     368:	0f 93       	push	r16
     36a:	1f 93       	push	r17
     36c:	7b 01       	movw	r14, r22
     36e:	8c 01       	movw	r16, r24
     370:	fb 01       	movw	r30, r22
     372:	09 95       	icall
     374:	d8 2e       	mov	r13, r24
     376:	c8 01       	movw	r24, r16
     378:	01 96       	adiw	r24, 0x01	; 1
     37a:	f7 01       	movw	r30, r14
     37c:	09 95       	icall
     37e:	98 2f       	mov	r25, r24
     380:	8d 2d       	mov	r24, r13
     382:	1f 91       	pop	r17
     384:	0f 91       	pop	r16
     386:	ff 90       	pop	r15
     388:	ef 90       	pop	r14
     38a:	df 90       	pop	r13
     38c:	08 95       	ret

0000038e <loopAlt()>:




// Called from loop().
void loopAlt()
     38e:	1f 93       	push	r17
  // NOTE: sleep at the top of the loop to minimise timing jitter/delay from Arduino background activity after loop() returns.
  // DHD20130425: waking up from sleep and getting to start processing below this block may take >10ms.
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("*E"); // End-of-cycle sleep.
#endif
  powerDownSerial(); // Ensure that serial I/O is off.
     390:	0e 94 a2 0a 	call	0x1544	; 0x1544 <powerDownSerial()>
  // Power down most stuff (except radio for hub RX).
  minimisePowerWithoutSleep();
     394:	0e 94 4e 0a 	call	0x149c	; 0x149c <minimisePowerWithoutSleep()>
     398:	02 c0       	rjmp	.+4      	; 0x39e <loopAlt()+0x10>
//  RFM22ModeStandbyAndClearState();
  static uint_fast8_t TIME_LSD; // Controller's notion of seconds within major cycle.
  uint_fast8_t newTLSD;
  while(TIME_LSD == (newTLSD = getSecondsLT()))
    {
    sleepUntilInt(); // Normal long minimal-power sleep until wake-up interrupt.
     39a:	0e 94 af 07 	call	0xf5e	; 0xf5e <sleepPwrSaveWithBODDisabled()>
  // Power down most stuff (except radio for hub RX).
  minimisePowerWithoutSleep();
//  RFM22ModeStandbyAndClearState();
  static uint_fast8_t TIME_LSD; // Controller's notion of seconds within major cycle.
  uint_fast8_t newTLSD;
  while(TIME_LSD == (newTLSD = getSecondsLT()))
     39e:	90 91 24 02 	lds	r25, 0x0224
     3a2:	80 91 fc 01 	lds	r24, 0x01FC
     3a6:	89 17       	cp	r24, r25
     3a8:	c1 f3       	breq	.-16     	; 0x39a <loopAlt()+0xc>
    {
    sleepUntilInt(); // Normal long minimal-power sleep until wake-up interrupt.
//    DEBUG_SERIAL_PRINTLN_FLASHSTRING("w"); // Wakeup.
    }
  TIME_LSD = newTLSD;
     3aa:	90 93 fc 01 	sts	0x01FC, r25


  // START LOOP BODY
  // ===============
 
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("tick...");
     3ae:	88 e6       	ldi	r24, 0x68	; 104
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <serialPrintlnAndFlush(__FlashStringHelper const*)>
  
  const bool neededWaking = powerUpSerialIfDisabled();
     3b6:	0e 94 ed 0a 	call	0x15da	; 0x15da <powerUpSerialIfDisabled()>
     3ba:	18 2f       	mov	r17, r24

  
  ValveDirect.read();
     3bc:	8c e4       	ldi	r24, 0x4C	; 76
     3be:	92 e0       	ldi	r25, 0x02	; 2
     3c0:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <ValveMotorDirectV1::read()>



  // Force any pending output before return / possible UART power-down.
  flushSerialSCTSensitive();
     3c4:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <flushSerialSCTSensitive()>

  if(neededWaking) { powerDownSerial(); }
     3c8:	11 23       	and	r17, r17
     3ca:	11 f0       	breq	.+4      	; 0x3d0 <loopAlt()+0x42>
     3cc:	0e 94 a2 0a 	call	0x1544	; 0x1544 <powerDownSerial()>
  }
     3d0:	1f 91       	pop	r17
     3d2:	08 95       	ret

000003d4 <POSTalt()>:
// Link in support for alternate Power On Self-Test and main loop if required.
#if defined(ALT_MAIN_LOOP)

// Called from startup() after some initial setup has been done.
// Can abort with panic() if need be.
void POSTalt()
     3d4:	0f 93       	push	r16
     3d6:	1f 93       	push	r17
#ifdef USE_MODULE_RFM22RADIOSIMPLE
#if !defined(RFM22_IS_ACTUALLY_RFM23) && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("(Using RFM22.)");
#endif
  // Initialise the radio, if configured, ASAP, because it can suck a lot of power until properly initialised.
  RFM22PowerOnInit();
     3d8:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <RFM22PowerOnInit()>
  // Check that the radio is correctly connected; panic if not...
  if(!RFM22CheckConnected()) { panic(); }
     3dc:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <RFM22CheckConnected()>
     3e0:	88 23       	and	r24, r24
     3e2:	11 f4       	brne	.+4      	; 0x3e8 <POSTalt()+0x14>
     3e4:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <panic()>
  // Configure the radio.
  RFM22RegisterBlockSetup(FHT8V_RFM22_Reg_Values);
     3e8:	87 e7       	ldi	r24, 0x77	; 119
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <RFM22RegisterBlockSetup(unsigned char const (*) [2])>
  // Put the radio in low-power standby mode.
  RFM22ModeStandbyAndClearState();
     3f0:	0e 94 9e 0b 	call	0x173c	; 0x173c <RFM22ModeStandbyAndClearState()>
#endif
  // Force initialisation into low-power state.
  const int heat = TemperatureC16.read();
     3f4:	82 e3       	ldi	r24, 0x32	; 50
     3f6:	92 e0       	ldi	r25, 0x02	; 2
     3f8:	0e 94 20 10 	call	0x2040	; 0x2040 <RoomTemperatureC16::read()>
     3fc:	8c 01       	movw	r16, r24
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("temp: ");
     3fe:	80 e7       	ldi	r24, 0x70	; 112
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(heat);
     406:	c8 01       	movw	r24, r16
     408:	6a e0       	ldi	r22, 0x0A	; 10
     40a:	70 e0       	ldi	r23, 0x00	; 0
     40c:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
     410:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <serialPrintlnAndFlush()>
#endif
  const int light = AmbLight.read();
     414:	8c e2       	ldi	r24, 0x2C	; 44
     416:	92 e0       	ldi	r25, 0x02	; 2
     418:	0e 94 8b 11 	call	0x2316	; 0x2316 <AmbientLight::read()>
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("light: ");
  DEBUG_SERIAL_PRINT(light);
  DEBUG_SERIAL_PRINTLN();
#endif
  }
     41c:	1f 91       	pop	r17
     41e:	0f 91       	pop	r16
     420:	08 95       	ret

00000422 <SimpleTSUint8Sensor::get() const>:
  public:
    // Return last value fetched by read(); undefined before first read().
    // Usually fast.
    // Often likely to be thread-safe or usable within ISRs (Interrupt Service Routines),
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual uint8_t get() const { return(value); }
     422:	fc 01       	movw	r30, r24
     424:	82 81       	ldd	r24, Z+2	; 0x02
     426:	08 95       	ret

00000428 <SimpleTSUint8Actuator::get() const>:
     428:	fc 01       	movw	r30, r24
     42a:	82 81       	ldd	r24, Z+2	; 0x02
     42c:	08 95       	ret

0000042e <AbstractRadValve::isValid(unsigned char) const>:
// Implementations may require poll() called at a fixed rate.
class AbstractRadValve : public SimpleTSUint8Actuator
  {
  public:
    // Returns true if this sensor reading value passed is valid, eg in range [0,100].
    virtual bool isValid(const uint8_t value) const { return(value <= 100); }
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	65 36       	cpi	r22, 0x65	; 101
     432:	08 f4       	brcc	.+2      	; 0x436 <AbstractRadValve::isValid(unsigned char) const+0x8>
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	08 95       	ret

00000438 <AbstractRadValve::recalibrate()>:
    // By default there is no recalibration step.
    virtual bool isRecalibrating() const { return(false); }

    // If possible exercise the valve to avoid pin sticking and recalibrate valve travel.
    // Default does nothing.
    virtual void recalibrate() { }
     438:	08 95       	ret

0000043a <AbstractRadValve::isControlledValveReallyOpen() const>:
    // If multiple valves are controlled then is this true only if all are at least partially open.
    // Used to help avoid running boiler pump against closed valves.
    // Must not be true while recalibrating.
    // The default is to use the check the current computed position
    // against the minimum open percentage.
    virtual bool isControlledValveReallyOpen() const { return((!isRecalibrating()) && (value >= getMinPercentOpen())); }
     43a:	1f 93       	push	r17
     43c:	cf 93       	push	r28
     43e:	df 93       	push	r29
     440:	ec 01       	movw	r28, r24
     442:	e8 81       	ld	r30, Y
     444:	f9 81       	ldd	r31, Y+1	; 0x01
     446:	02 88       	ldd	r0, Z+18	; 0x12
     448:	f3 89       	ldd	r31, Z+19	; 0x13
     44a:	e0 2d       	mov	r30, r0
     44c:	09 95       	icall
     44e:	88 23       	and	r24, r24
     450:	11 f0       	breq	.+4      	; 0x456 <AbstractRadValve::isControlledValveReallyOpen() const+0x1c>
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	0c c0       	rjmp	.+24     	; 0x46e <AbstractRadValve::isControlledValveReallyOpen() const+0x34>
     456:	1a 81       	ldd	r17, Y+2	; 0x02
     458:	e8 81       	ld	r30, Y
     45a:	f9 81       	ldd	r31, Y+1	; 0x01
     45c:	00 8c       	ldd	r0, Z+24	; 0x18
     45e:	f1 8d       	ldd	r31, Z+25	; 0x19
     460:	e0 2d       	mov	r30, r0
     462:	ce 01       	movw	r24, r28
     464:	09 95       	icall
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	18 17       	cp	r17, r24
     46a:	08 f0       	brcs	.+2      	; 0x46e <AbstractRadValve::isControlledValveReallyOpen() const+0x34>
     46c:	91 e0       	ldi	r25, 0x01	; 1
     46e:	89 2f       	mov	r24, r25
     470:	df 91       	pop	r29
     472:	cf 91       	pop	r28
     474:	1f 91       	pop	r17
     476:	08 95       	ret

00000478 <AbstractRadValve::getMinPercentOpen() const>:

    // Get estimated minimum percentage open for significant flow for this device; strictly positive in range [1,99].
    // Defaults to 1 which is minimum possible legitimate value.
    virtual uint8_t getMinPercentOpen() const { return(1); }
     478:	81 e0       	ldi	r24, 0x01	; 1
     47a:	08 95       	ret

0000047c <ModelledRadValve::preferredPollInterval_s() const>:
    // Potentially expensive/slow.
    virtual uint8_t read();

    // Returns preferred poll interval (in seconds); non-zero.
    // Must be polled at near constant rate, about once per minute.
    virtual uint8_t preferredPollInterval_s() const { return(60); }
     47c:	8c e3       	ldi	r24, 0x3C	; 60
     47e:	08 95       	ret

00000480 <ModelledRadValve::tag() const>:

    // Returns a suggested (JSON) tag/field/key name including units of get(); NULL means no recommended tag.
    // The lifetime of the pointed-to text must be at least that of the Sensor instance.
    virtual const char *tag() const { return("v|%"); }
     480:	80 e0       	ldi	r24, 0x00	; 0
     482:	91 e0       	ldi	r25, 0x01	; 1
     484:	08 95       	ret

00000486 <ModelledRadValve::getMinPercentOpen() const>:
// At the boiler hub this is also the threshold percentage-open on eavesdropped requests that will call for heat.
// If no override is set then DEFAULT_MIN_VALVE_PC_REALLY_OPEN is used.
// NOTE: raising this value temporarily (and shutting down the boiler immediately if possible) is one way to implement dynamic demand.
uint8_t ModelledRadValve::getMinValvePcReallyOpen()
  {
  if(0 != mVPRO_cache) { return(mVPRO_cache); } // Return cached value if possible.
     486:	90 91 0d 02 	lds	r25, 0x020D
     48a:	99 23       	and	r25, r25
     48c:	79 f4       	brne	.+30     	; 0x4ac <ModelledRadValve::getMinPercentOpen() const+0x26>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     48e:	f9 99       	sbic	0x1f, 1	; 31
     490:	fe cf       	rjmp	.-4      	; 0x48e <ModelledRadValve::getMinPercentOpen() const+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     492:	83 e1       	ldi	r24, 0x13	; 19
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	92 bd       	out	0x22, r25	; 34
     498:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     49a:	f8 9a       	sbi	0x1f, 0	; 31
     49c:	90 b5       	in	r25, 0x20	; 32
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_MIN_VALVE_PC_REALLY_OPEN);
  const uint8_t result = ((stored > 0) && (stored <= 100)) ? stored : DEFAULT_MIN_VALVE_PC_REALLY_OPEN;
     49e:	89 2f       	mov	r24, r25
     4a0:	81 50       	subi	r24, 0x01	; 1
     4a2:	84 36       	cpi	r24, 0x64	; 100
     4a4:	08 f0       	brcs	.+2      	; 0x4a8 <ModelledRadValve::getMinPercentOpen() const+0x22>
     4a6:	9a e0       	ldi	r25, 0x0A	; 10
  mVPRO_cache = result; // Cache it.
     4a8:	90 93 0d 02 	sts	0x020D, r25
    // then this should return true if any of the valves are (significantly) open.
    virtual bool isControlledValveReallyOpen() const;

    // Get estimated minimum percentage open for significant flow [1,99] for this device.
    // Return global node value.
    virtual uint8_t getMinPercentOpen() const { return(getMinValvePcReallyOpen()); }
     4ac:	89 2f       	mov	r24, r25
     4ae:	08 95       	ret

000004b0 <OccupancyTracker::isValid(unsigned char) const>:
    // Poll at a fixed rate.
    virtual uint8_t read();

    // Returns true if this sensor reading value passed is potentially valid, eg in-range.
    // True if in range [0,100].
    virtual bool isValid(uint8_t value) const { return(value <= 100); }
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	65 36       	cpi	r22, 0x65	; 101
     4b4:	08 f4       	brcc	.+2      	; 0x4b8 <OccupancyTracker::isValid(unsigned char) const+0x8>
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	08 95       	ret

000004ba <OccupancyTracker::preferredPollInterval_s() const>:

    // This routine should be called once per minute.
    virtual uint8_t preferredPollInterval_s() const { return(60); }
     4ba:	8c e3       	ldi	r24, 0x3C	; 60
     4bc:	08 95       	ret

000004be <OccupancyTracker::tag() const>:

    // Recommended JSON tag for full value; not NULL.
    virtual const char *tag() const { return("occ|%"); }
     4be:	84 e0       	ldi	r24, 0x04	; 4
     4c0:	91 e0       	ldi	r25, 0x01	; 1
     4c2:	08 95       	ret

000004c4 <setWarmModeDebounced(bool)>:
  DEBUG_SERIAL_PRINT_FLASHSTRING("Call to setWarmModeDebounced(");
  DEBUG_SERIAL_PRINT(warm);
  DEBUG_SERIAL_PRINT_FLASHSTRING(")");
  DEBUG_SERIAL_PRINTLN();
#endif
  isWarmMode = warm;
     4c4:	80 93 11 02 	sts	0x0211, r24
#ifdef SUPPORT_BAKE
  if(!warm) { cancelBakeDebounced(); }
     4c8:	88 23       	and	r24, r24
     4ca:	11 f4       	brne	.+4      	; 0x4d0 <setWarmModeDebounced(bool)+0xc>
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// Should be only be called once 'debounced' if coming from a button press for example.
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBakeDebounced() { bakeCountdownM = 0; }
     4cc:	10 92 0e 02 	sts	0x020E, r1
     4d0:	08 95       	ret

000004d2 <startBakeDebounced()>:
// Start/restart 'BAKE' mode and timeout.
// Should be only be called once 'debounced' if coming from a button press for example.
void startBakeDebounced() { isWarmMode = true; bakeCountdownM = BAKE_MAX_M; }
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	80 93 11 02 	sts	0x0211, r24
     4d8:	8e e1       	ldi	r24, 0x1E	; 30
     4da:	80 93 0e 02 	sts	0x020E, r24
     4de:	08 95       	ret

000004e0 <getWARMTargetC()>:
     4e0:	20 91 49 02 	lds	r18, 0x0249
  // Cached input and result values; initially zero.
  static uint8_t potLast;
  static uint8_t resultLast;
  // Force recomputation if pot value changed
  // or apparently no calc done yet (unlikely/impossible zero cached result).
  if((potLast != pot) || (0 == resultLast))
     4e4:	80 91 10 02 	lds	r24, 0x0210
     4e8:	82 17       	cp	r24, r18
     4ea:	21 f4       	brne	.+8      	; 0x4f4 <getWARMTargetC()+0x14>
     4ec:	80 91 0f 02 	lds	r24, 0x020F
     4f0:	88 23       	and	r24, r24
     4f2:	99 f4       	brne	.+38     	; 0x51a <getWARMTargetC()+0x3a>
  const uint8_t range = TEMP_SCALE_HIGH - TEMP_SCALE_LOW + 1;
  const uint8_t band = 256 / range; // Width of band for each degree C...

  // If there are is relatively small number of distinct temperature values
  // then compute result iteratively...
  if(pot >= 256 - band) { return(TEMP_SCALE_HIGH); } // At top... (optimisation / robustness)
     4f4:	2c 3d       	cpi	r18, 0xDC	; 220
     4f6:	10 f0       	brcs	.+4      	; 0x4fc <getWARMTargetC()+0x1c>
     4f8:	86 e1       	ldi	r24, 0x16	; 22
     4fa:	0b c0       	rjmp	.+22     	; 0x512 <getWARMTargetC()+0x32>
  if(pot < band) { return(TEMP_SCALE_LOW); } // At bottom... (optimisation / robustness)
     4fc:	24 32       	cpi	r18, 0x24	; 36
     4fe:	10 f4       	brcc	.+4      	; 0x504 <getWARMTargetC()+0x24>
     500:	80 e1       	ldi	r24, 0x10	; 16
     502:	07 c0       	rjmp	.+14     	; 0x512 <getWARMTargetC()+0x32>
     504:	98 e4       	ldi	r25, 0x48	; 72
     506:	81 e1       	ldi	r24, 0x11	; 17
     508:	02 c0       	rjmp	.+4      	; 0x50e <getWARMTargetC()+0x2e>
  if(range < 10)
    {
    uint8_t result = TEMP_SCALE_LOW+1;
    for(uint8_t ppot = band<<1; ppot < pot; ++result) { ppot += band; }
     50a:	9c 5d       	subi	r25, 0xDC	; 220
     50c:	8f 5f       	subi	r24, 0xFF	; 255
     50e:	92 17       	cp	r25, r18
     510:	e0 f3       	brcs	.-8      	; 0x50a <getWARMTargetC()+0x2a>
  // or apparently no calc done yet (unlikely/impossible zero cached result).
  if((potLast != pot) || (0 == resultLast))
    {
    const uint8_t result = computeWARMTargetC(pot);
    // Cache input/result.
    resultLast = result;
     512:	80 93 0f 02 	sts	0x020F, r24
    potLast = pot;
     516:	20 93 10 02 	sts	0x0210, r18
    return(result);
    }

  // Return cached result.
  return(resultLast);
  }
     51a:	08 95       	ret

0000051c <OccupancyTracker::read()>:
#elif OCCUPATION_TIMEOUT_M <= 100
#define OCCCP_SHIFT 0
#endif

// Update notion of occupancy confidence.
uint8_t OccupancyTracker::read()
     51c:	df 93       	push	r29
     51e:	cf 93       	push	r28
     520:	00 d0       	rcall	.+0      	; 0x522 <OccupancyTracker::read()+0x6>
     522:	cd b7       	in	r28, 0x3d	; 61
     524:	de b7       	in	r29, 0x3e	; 62
     526:	fc 01       	movw	r30, r24
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
     528:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     52a:	f8 94       	cli
    {
    // Compute as percentage.
    const uint8_t newValue = (0 == occupationCountdownM) ? 0 :
        fnmin((uint8_t)((uint8_t)100 - (uint8_t)((((uint8_t)OCCUPATION_TIMEOUT_M) - occupationCountdownM) << OCCCP_SHIFT)), (uint8_t)100);
     52c:	83 81       	ldd	r24, Z+3	; 0x03
     52e:	88 23       	and	r24, r24
     530:	11 f4       	brne	.+4      	; 0x536 <OccupancyTracker::read()+0x1a>
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	0d c0       	rjmp	.+26     	; 0x550 <OccupancyTracker::read()+0x34>
     536:	83 81       	ldd	r24, Z+3	; 0x03
     538:	92 e3       	ldi	r25, 0x32	; 50
     53a:	98 1b       	sub	r25, r24
     53c:	99 0f       	add	r25, r25
     53e:	84 e6       	ldi	r24, 0x64	; 100
     540:	38 2f       	mov	r19, r24
     542:	39 1b       	sub	r19, r25
     544:	93 2f       	mov	r25, r19
     546:	39 83       	std	Y+1, r19	; 0x01
     548:	8a 83       	std	Y+2, r24	; 0x02




// Templated function versions of min/max that do not evaluate the arguments twice.
template <class T> const T& fnmin(const T& a, const T& b) { return((a>b)?b:a); }
     54a:	35 36       	cpi	r19, 0x65	; 101
     54c:	08 f0       	brcs	.+2      	; 0x550 <OccupancyTracker::read()+0x34>
     54e:	94 e6       	ldi	r25, 0x64	; 100
    value = newValue;
     550:	92 83       	std	Z+2, r25	; 0x02
    // Run down occupation timer (or run up vacancy time) if need be.
    if(occupationCountdownM > 0) { --occupationCountdownM; vacancyM = 0; vacancyH = 0; }
     552:	83 81       	ldd	r24, Z+3	; 0x03
     554:	88 23       	and	r24, r24
     556:	31 f0       	breq	.+12     	; 0x564 <OccupancyTracker::read()+0x48>
     558:	83 81       	ldd	r24, Z+3	; 0x03
     55a:	81 50       	subi	r24, 0x01	; 1
     55c:	83 83       	std	Z+3, r24	; 0x03
     55e:	16 82       	std	Z+6, r1	; 0x06
     560:	15 82       	std	Z+5, r1	; 0x05
     562:	0b c0       	rjmp	.+22     	; 0x57a <OccupancyTracker::read()+0x5e>
    else if(vacancyH < 0xffU) { if(++vacancyM >= 60) { vacancyM = 0; ++vacancyH; } }
     564:	95 81       	ldd	r25, Z+5	; 0x05
     566:	9f 3f       	cpi	r25, 0xFF	; 255
     568:	41 f0       	breq	.+16     	; 0x57a <OccupancyTracker::read()+0x5e>
     56a:	86 81       	ldd	r24, Z+6	; 0x06
     56c:	8f 5f       	subi	r24, 0xFF	; 255
     56e:	86 83       	std	Z+6, r24	; 0x06
     570:	8c 33       	cpi	r24, 0x3C	; 60
     572:	18 f0       	brcs	.+6      	; 0x57a <OccupancyTracker::read()+0x5e>
     574:	16 82       	std	Z+6, r1	; 0x06
     576:	9f 5f       	subi	r25, 0xFF	; 255
     578:	95 83       	std	Z+5, r25	; 0x05
    // Run down 'recent activity' timer.
    if(activityCountdownM > 0) { --activityCountdownM; }
     57a:	84 81       	ldd	r24, Z+4	; 0x04
     57c:	88 23       	and	r24, r24
     57e:	19 f0       	breq	.+6      	; 0x586 <OccupancyTracker::read()+0x6a>
     580:	84 81       	ldd	r24, Z+4	; 0x04
     582:	81 50       	subi	r24, 0x01	; 1
     584:	84 83       	std	Z+4, r24	; 0x04
    return(value);
     586:	82 81       	ldd	r24, Z+2	; 0x02
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     588:	2f bf       	out	0x3f, r18	; 63
    }
  }
     58a:	0f 90       	pop	r0
     58c:	0f 90       	pop	r0
     58e:	cf 91       	pop	r28
     590:	df 91       	pop	r29
     592:	08 95       	ret

00000594 <OccupancyTracker::markAsPossiblyOccupied()>:

// Call when some/weak evidence of room occupation, such as a light being turned on.
// Do not call based on internal/synthetic events.
// Doesn't force the room to appear recently occupied.
// Thread-safe.
void OccupancyTracker::markAsPossiblyOccupied()
     594:	df 93       	push	r29
     596:	cf 93       	push	r28
     598:	00 d0       	rcall	.+0      	; 0x59a <OccupancyTracker::markAsPossiblyOccupied()+0x6>
     59a:	cd b7       	in	r28, 0x3d	; 61
     59c:	de b7       	in	r29, 0x3e	; 62
     59e:	fc 01       	movw	r30, r24
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
     5a0:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     5a2:	f8 94       	cli
    {
    occupationCountdownM = fnmax((uint8_t)occupationCountdownM, (uint8_t)(OCCUPATION_TIMEOUT_1_M));
     5a4:	93 81       	ldd	r25, Z+3	; 0x03
template <class T> const T& fnmax(const T& a, const T& b) { return((a<b)?b:a); }
     5a6:	91 32       	cpi	r25, 0x21	; 33
     5a8:	10 f4       	brcc	.+4      	; 0x5ae <OccupancyTracker::markAsPossiblyOccupied()+0x1a>
     5aa:	81 e2       	ldi	r24, 0x21	; 33
     5ac:	01 c0       	rjmp	.+2      	; 0x5b0 <OccupancyTracker::markAsPossiblyOccupied()+0x1c>
     5ae:	89 2f       	mov	r24, r25
     5b0:	83 83       	std	Z+3, r24	; 0x03
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     5b2:	2f bf       	out	0x3f, r18	; 63
     5b4:	81 e2       	ldi	r24, 0x21	; 33
     5b6:	8a 83       	std	Y+2, r24	; 0x02
     5b8:	99 83       	std	Y+1, r25	; 0x01
    }
  activityCountdownM = 2;
     5ba:	82 e0       	ldi	r24, 0x02	; 2
     5bc:	84 83       	std	Z+4, r24	; 0x04
  }
     5be:	0f 90       	pop	r0
     5c0:	0f 90       	pop	r0
     5c2:	cf 91       	pop	r28
     5c4:	df 91       	pop	r29
     5c6:	08 95       	ret

000005c8 <pollIO(bool)>:
        { return(true); }
      }
    }
#endif
  return(false);
  }
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	08 95       	ret

000005cc <Sensor<unsigned char>::tag() const>:
    // only as required to fetch new values from the underlying sensor.
    virtual uint8_t preferredPollInterval_s() const { return(0); }

    // Returns a suggested (JSON) tag/field/key name including units of get(); NULL means no recommended tag.
    // The lifetime of the pointed-to text must be at least that of the Sensor instance.
    virtual const char *tag() const { return(NULL); }
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	08 95       	ret

000005d2 <Sensor<unsigned char>::handleInterruptSimple()>:
    // Must be fast and ISR (Interrupt Service Routine) safe.
    // Returns true if interrupt was successfully handled and cleared
    // else another interrupt handler in the chain may be called
    // to attempt to clear the interrupt.
    // By default does nothing (and returns false).
    virtual bool handleInterruptSimple() { return(false); }
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	08 95       	ret

000005d6 <Sensor<unsigned char>::begin()>:

    // Begin access to this sensor if applicable and not already begun.
    // Returns true if it needed to be begun.
    // Allows logic to end() if required at the end of a block, etc.
    // Defaults to do nothing (and return false).
    virtual bool begin() { return(false); }
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	08 95       	ret

000005da <Sensor<unsigned char>::isAvailable() const>:

    // Returns true if this sensor is currently available.
    // True by default unless implementation overrides.
    // For those sensors that need starting this will be false before begin().
    virtual bool isAvailable() const { return(true); }
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	08 95       	ret

000005de <Sensor<unsigned char>::end()>:

    // End access to this sensor if applicable and not already ended.
    // Returns true if it needed to be ended.
    // Defaults to do nothing (and return false).
    virtual bool end() { return(false); }
     5de:	80 e0       	ldi	r24, 0x00	; 0
     5e0:	08 95       	ret

000005e2 <Sensor<unsigned char>::preferredPollInterval_s() const>:
 
    // Returns non-zero if this implementation requires a regular call to read() to operate correctly.
    // Preferred poll interval (in seconds) or 0 if no regular poll() call required.
    // Default returns 0 indicating regular call to read() not required,
    // only as required to fetch new values from the underlying sensor.
    virtual uint8_t preferredPollInterval_s() const { return(0); }
     5e2:	80 e0       	ldi	r24, 0x00	; 0
     5e4:	08 95       	ret

000005e6 <Sensor<unsigned char>::isValid(unsigned char) const>:
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual T get() const = 0;

    // Returns true if this sensor reading value passed is potentially valid, eg in-range.
    // Default is to always return true, ie all values potentially valid.
    virtual bool isValid(T value) const { return(true); }
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	08 95       	ret

000005ea <global constructors keyed to _Z10inWarmModev>:
  {
  protected:
      volatile uint8_t value;

      // By default initialise the value to zero.
      SimpleTSUint8Sensor() : value(0) { }
     5ea:	10 92 ff 01 	sts	0x01FF, r1
    // Hours and minutes since room became vacant (doesn't roll back to zero from max hours); zero when room occupied.
    uint8_t vacancyH;
    uint8_t vacancyM;

  public:
    OccupancyTracker() : occupationCountdownM(0), activityCountdownM(0), vacancyH(0), vacancyM(0) { }
     5ee:	83 e5       	ldi	r24, 0x53	; 83
     5f0:	91 e0       	ldi	r25, 0x01	; 1
     5f2:	90 93 fe 01 	sts	0x01FE, r25
     5f6:	80 93 fd 01 	sts	0x01FD, r24
     5fa:	10 92 00 02 	sts	0x0200, r1
     5fe:	10 92 01 02 	sts	0x0201, r1
     602:	10 92 02 02 	sts	0x0202, r1
     606:	10 92 03 02 	sts	0x0203, r1
  protected:
    // Requested acuator value/position.
    volatile uint8_t value;

    // By default initialise the value to zero.
    SimpleTSUint8Actuator() : value(0) { }
     60a:	10 92 06 02 	sts	0x0206, r1
#if defined(TRV_SLEW_GLACIAL)
        glacial(true),
#else
        glacial(false),
#endif
        valveTurndownCountdownM(0), valveTurnupCountdownM(0)
     60e:	85 e3       	ldi	r24, 0x35	; 53
     610:	91 e0       	ldi	r25, 0x01	; 1
     612:	90 93 05 02 	sts	0x0205, r25
     616:	80 93 04 02 	sts	0x0204, r24
     61a:	87 e0       	ldi	r24, 0x07	; 7
     61c:	80 93 07 02 	sts	0x0207, r24
     620:	10 92 08 02 	sts	0x0208, r1
     624:	10 92 09 02 	sts	0x0209, r1
     628:	10 92 0a 02 	sts	0x020A, r1
     62c:	10 92 0b 02 	sts	0x020B, r1
     630:	10 92 0c 02 	sts	0x020C, r1
  else if(getSubCycleTime() >= nearOverrunThreshold)
    {
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("?O"); // Near overrun.  Note 2ms/char to send...
    }
#endif
  }
     634:	08 95       	ret

00000636 <ModelledRadValve::recalibrate()>:
// If possible exercise the valve to avoid pin sticking and recalibrate valve travel.
// Default does nothing.
void ModelledRadValve::recalibrate()
  {
#ifdef USE_MODULE_FHT8VSIMPLE
  FHT8VSyncAndTXReset(); // Should this be decalcinate instead/also/first?
     636:	0e 94 b7 06 	call	0xd6e	; 0xd6e <FHT8VSyncAndTXReset()>
#endif
  }
     63a:	08 95       	ret

0000063c <inOutlierQuartile(unsigned char, unsigned char, unsigned char)>:
// Returns false if a full set of stats not available, eg including the specified hour.
// Always returns false if all samples are the same.
//   * inTop  test for membership of the top quartile if true, bottom quartile if false
//   * statsSet  stats set number to use.
//   * hour  hour of day to use or ~0 for current hour.
bool inOutlierQuartile(const uint8_t inTop, const uint8_t statsSet, const uint8_t hour)
     63c:	0f 93       	push	r16
     63e:	1f 93       	push	r17
     640:	08 2f       	mov	r16, r24
     642:	16 2f       	mov	r17, r22
  {
  if(statsSet >= EE_STATS_SETS) { return(false); } // Bad stats set number, ie unsafe.
     644:	6a 30       	cpi	r22, 0x0A	; 10
     646:	08 f0       	brcs	.+2      	; 0x64a <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0xe>
     648:	40 c0       	rjmp	.+128    	; 0x6ca <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x8e>
  const uint8_t hh = (hour > 23) ? getHoursLT() : hour;
     64a:	48 31       	cpi	r20, 0x18	; 24
     64c:	18 f0       	brcs	.+6      	; 0x654 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x18>
     64e:	0e 94 28 0c 	call	0x1850	; 0x1850 <getHoursLT()>
     652:	48 2f       	mov	r20, r24
  const uint8_t *ss = (uint8_t *)(EE_STATS_START_ADDR(statsSet));
     654:	88 e1       	ldi	r24, 0x18	; 24
     656:	18 9f       	mul	r17, r24
     658:	b0 01       	movw	r22, r0
     65a:	11 24       	eor	r1, r1
     65c:	9b 01       	movw	r18, r22
     65e:	20 50       	subi	r18, 0x00	; 0
     660:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     662:	f9 99       	sbic	0x1f, 1	; 31
     664:	fe cf       	rjmp	.-4      	; 0x662 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x26>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     666:	c9 01       	movw	r24, r18
     668:	84 0f       	add	r24, r20
     66a:	91 1d       	adc	r25, r1
     66c:	92 bd       	out	0x22, r25	; 34
     66e:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     670:	f8 9a       	sbi	0x1f, 0	; 31
     672:	40 b5       	in	r20, 0x20	; 32
  const uint8_t sample = eeprom_read_byte(ss + hh);
  if(STATS_UNSET_INT == sample) { return(false); }
  if(inTop) { return(inTopQuartile(ss, sample)); }
     674:	00 23       	and	r16, r16
     676:	21 f4       	brne	.+8      	; 0x680 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x44>
     678:	90 e0       	ldi	r25, 0x00	; 0
//   * s is start of (24) sample set in EEPROM
//   * sample to be tested for being in lower quartile
bool inBottomQuartile(const uint8_t *sE, const uint8_t sample)
  {
  uint8_t valuesHigher = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
     67a:	68 5e       	subi	r22, 0xE8	; 232
     67c:	7e 4f       	sbci	r23, 0xFE	; 254
     67e:	22 c0       	rjmp	.+68     	; 0x6c4 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x88>
  if(statsSet >= EE_STATS_SETS) { return(false); } // Bad stats set number, ie unsafe.
  const uint8_t hh = (hour > 23) ? getHoursLT() : hour;
  const uint8_t *ss = (uint8_t *)(EE_STATS_START_ADDR(statsSet));
  const uint8_t sample = eeprom_read_byte(ss + hh);
  if(STATS_UNSET_INT == sample) { return(false); }
  if(inTop) { return(inTopQuartile(ss, sample)); }
     680:	90 e0       	ldi	r25, 0x00	; 0
//   * s is start of (24) sample set in EEPROM
//   * sample to be tested for being in lower quartile
bool inTopQuartile(const uint8_t *sE, const uint8_t sample)
  {
  uint8_t valuesLower = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
     682:	68 5e       	subi	r22, 0xE8	; 232
     684:	7e 4f       	sbci	r23, 0xFE	; 254
     686:	0d c0       	rjmp	.+26     	; 0x6a2 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x66>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     688:	f9 99       	sbic	0x1f, 1	; 31
     68a:	fe cf       	rjmp	.-4      	; 0x688 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x4c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     68c:	32 bd       	out	0x22, r19	; 34
     68e:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     690:	f8 9a       	sbi	0x1f, 0	; 31
     692:	80 b5       	in	r24, 0x20	; 32
    {
    const uint8_t v = eeprom_read_byte(sE); 
    if(STATS_UNSET_INT == v) { return(false); } // Abort if not a full set of stats (eg at least one full day's worth). 
    if(v < sample) { if(++valuesLower >= 18) { return(true); } } // Stop as soon as known to be in upper quartile.
     694:	84 17       	cp	r24, r20
     696:	18 f4       	brcc	.+6      	; 0x69e <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x62>
     698:	9f 5f       	subi	r25, 0xFF	; 255
     69a:	92 31       	cpi	r25, 0x12	; 18
     69c:	c0 f4       	brcc	.+48     	; 0x6ce <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x92>
//   * s is start of (24) sample set in EEPROM
//   * sample to be tested for being in lower quartile
bool inTopQuartile(const uint8_t *sE, const uint8_t sample)
  {
  uint8_t valuesLower = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
     69e:	2f 5f       	subi	r18, 0xFF	; 255
     6a0:	3f 4f       	sbci	r19, 0xFF	; 255
     6a2:	26 17       	cp	r18, r22
     6a4:	37 07       	cpc	r19, r23
     6a6:	81 f7       	brne	.-32     	; 0x688 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x4c>
     6a8:	10 c0       	rjmp	.+32     	; 0x6ca <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x8e>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     6aa:	f9 99       	sbic	0x1f, 1	; 31
     6ac:	fe cf       	rjmp	.-4      	; 0x6aa <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x6e>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     6ae:	32 bd       	out	0x22, r19	; 34
     6b0:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     6b2:	f8 9a       	sbi	0x1f, 0	; 31
     6b4:	80 b5       	in	r24, 0x20	; 32
  uint8_t valuesHigher = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
    {
    const uint8_t v = eeprom_read_byte(sE); 
    if(STATS_UNSET_INT == v) { return(false); } // Abort if not a full set of stats (eg at least one full day's worth). 
    if(v > sample) { if(++valuesHigher >= 18) { return(true); } } // Stop as soon as known to be in lower quartile.
     6b6:	48 17       	cp	r20, r24
     6b8:	18 f4       	brcc	.+6      	; 0x6c0 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x84>
     6ba:	9f 5f       	subi	r25, 0xFF	; 255
     6bc:	92 31       	cpi	r25, 0x12	; 18
     6be:	38 f4       	brcc	.+14     	; 0x6ce <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x92>
//   * s is start of (24) sample set in EEPROM
//   * sample to be tested for being in lower quartile
bool inBottomQuartile(const uint8_t *sE, const uint8_t sample)
  {
  uint8_t valuesHigher = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
     6c0:	2f 5f       	subi	r18, 0xFF	; 255
     6c2:	3f 4f       	sbci	r19, 0xFF	; 255
     6c4:	26 17       	cp	r18, r22
     6c6:	37 07       	cpc	r19, r23
     6c8:	81 f7       	brne	.-32     	; 0x6aa <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x6e>
     6ca:	80 e0       	ldi	r24, 0x00	; 0
     6cc:	01 c0       	rjmp	.+2      	; 0x6d0 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x94>
     6ce:	81 e0       	ldi	r24, 0x01	; 1
  const uint8_t *ss = (uint8_t *)(EE_STATS_START_ADDR(statsSet));
  const uint8_t sample = eeprom_read_byte(ss + hh);
  if(STATS_UNSET_INT == sample) { return(false); }
  if(inTop) { return(inTopQuartile(ss, sample)); }
  return(inBottomQuartile(ss, sample));
  }
     6d0:	1f 91       	pop	r17
     6d2:	0f 91       	pop	r16
     6d4:	08 95       	ret

000006d6 <glacialOn(ModelledRadValve const&)>:
// Returns true if the radiator should turn on glacially slowly.
// True if the entire system mode is glacial
// or if room temperature may have overshot the target significantly.
// or if there is a huge range of temperatures in recent history.
// Note that pseudo overshoots may be seen as the target temperature steps down.
static bool glacialOn(ModelledRadValve const &mrv)
     6d6:	0f 93       	push	r16
     6d8:	1f 93       	push	r17
     6da:	cf 93       	push	r28
     6dc:	df 93       	push	r29
     6de:	8c 01       	movw	r16, r24
  {
  if(mrv.inGlacialMode()) { return(true); }
     6e0:	fc 01       	movw	r30, r24
     6e2:	86 81       	ldd	r24, Z+6	; 0x06
     6e4:	88 23       	and	r24, r24
     6e6:	d1 f4       	brne	.+52     	; 0x71c <glacialOn(ModelledRadValve const&)+0x46>
  const int maxRecent = TemperatureC16.getRecentMaxRaw();
     6e8:	82 e3       	ldi	r24, 0x32	; 50
     6ea:	92 e0       	ldi	r25, 0x02	; 2
     6ec:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <RoomTemperatureC16::getRecentMaxRaw() const>
     6f0:	ec 01       	movw	r28, r24
  if(maxRecent > (mrv.getTargetTempC()<<4) + maxRawOvershootC16) { return(true); }
     6f2:	f8 01       	movw	r30, r16
     6f4:	83 81       	ldd	r24, Z+3	; 0x03
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	a4 e0       	ldi	r26, 0x04	; 4
     6fa:	88 0f       	add	r24, r24
     6fc:	99 1f       	adc	r25, r25
     6fe:	aa 95       	dec	r26
     700:	e1 f7       	brne	.-8      	; 0x6fa <glacialOn(ModelledRadValve const&)+0x24>
     702:	48 96       	adiw	r24, 0x18	; 24
     704:	8c 17       	cp	r24, r28
     706:	9d 07       	cpc	r25, r29
     708:	4c f0       	brlt	.+18     	; 0x71c <glacialOn(ModelledRadValve const&)+0x46>
  const int minRecent = TemperatureC16.getRecentMinRaw();
     70a:	82 e3       	ldi	r24, 0x32	; 50
     70c:	92 e0       	ldi	r25, 0x02	; 2
     70e:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <RoomTemperatureC16::getRecentMinRaw() const>
     712:	20 e0       	ldi	r18, 0x00	; 0
     714:	c8 1b       	sub	r28, r24
     716:	d9 0b       	sbc	r29, r25
     718:	e1 97       	sbiw	r28, 0x31	; 49
     71a:	0c f0       	brlt	.+2      	; 0x71e <glacialOn(ModelledRadValve const&)+0x48>
     71c:	21 e0       	ldi	r18, 0x01	; 1
  if(maxRecent - minRecent > (SETBACK_FULL << 4)) { return(true); }
  return(false);
  }
     71e:	82 2f       	mov	r24, r18
     720:	df 91       	pop	r29
     722:	cf 91       	pop	r28
     724:	1f 91       	pop	r17
     726:	0f 91       	pop	r16
     728:	08 95       	ret

0000072a <ModelledRadValve::computeRequiredTRVPercentOpen()>:

// Set heat demand with some hysteresis and a hint of proportional control.
// Always be willing to turn off quickly, but on slowly (AKA "slow start" algorithm),
// and try to eliminate unnecessary 'hunting' which makes noise and uses actuator energy.
// Must be called ar a regular rate, about once per minute.
bool ModelledRadValve::computeRequiredTRVPercentOpen()
     72a:	ef 92       	push	r14
     72c:	ff 92       	push	r15
     72e:	0f 93       	push	r16
     730:	1f 93       	push	r17
     732:	df 93       	push	r29
     734:	cf 93       	push	r28
     736:	cd b7       	in	r28, 0x3d	; 61
     738:	de b7       	in	r29, 0x3e	; 62
     73a:	2b 97       	sbiw	r28, 0x0b	; 11
     73c:	0f b6       	in	r0, 0x3f	; 63
     73e:	f8 94       	cli
     740:	de bf       	out	0x3e, r29	; 62
     742:	0f be       	out	0x3f, r0	; 63
     744:	cd bf       	out	0x3d, r28	; 61
     746:	8c 01       	movw	r16, r24
// and which may save a little energy if users target specified temperatures.
// Suggestion c/o GG ~2014/10 code and geberally less confusing anyway!
static void getReferenceTemperature(int8_t &refTempC, int &refTempC16)
  {
  const int currentTempC16 = TemperatureC16.get();
  const int referenceTempC16 = currentTempC16 + refTempOffsetC16; // TODO-386: push targeted temperature down by 0.5C to middle of degree.
     748:	20 91 34 02 	lds	r18, 0x0234
     74c:	30 91 35 02 	lds	r19, 0x0235
     750:	28 5f       	subi	r18, 0xF8	; 248
     752:	3f 4f       	sbci	r19, 0xFF	; 255

  int8_t refTempC;
  int refTempC16;
  getReferenceTemperature(refTempC, refTempC16);

  if(refTempC < targetTempC) // (Well) under temp target: open valve.
     754:	c9 01       	movw	r24, r18
     756:	b4 e0       	ldi	r27, 0x04	; 4
     758:	95 95       	asr	r25
     75a:	87 95       	ror	r24
     75c:	ba 95       	dec	r27
     75e:	e1 f7       	brne	.-8      	; 0x758 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x2e>
     760:	48 2f       	mov	r20, r24
     762:	55 27       	eor	r21, r21
     764:	47 fd       	sbrc	r20, 7
     766:	50 95       	com	r21
     768:	f8 01       	movw	r30, r16
     76a:	83 81       	ldd	r24, Z+3	; 0x03
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	48 17       	cp	r20, r24
     770:	59 07       	cpc	r21, r25
     772:	0c f0       	brlt	.+2      	; 0x776 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x4c>
     774:	49 c0       	rjmp	.+146    	; 0x808 <ModelledRadValve::computeRequiredTRVPercentOpen()+0xde>
    {
    // Limit valve open slew to help minimise overshoot and actuator noise.
    // This should also reduce nugatory setting changes when occupancy (etc) is fluctuating.
    // Thus it may take several minutes to turn the radiator fully on,
    // though probably opening the first 30% will allow near-maximum heat output in practice.
    if(value != 100)
     776:	82 81       	ldd	r24, Z+2	; 0x02
     778:	84 36       	cpi	r24, 0x64	; 100
     77a:	09 f4       	brne	.+2      	; 0x77e <ModelledRadValve::computeRequiredTRVPercentOpen()+0x54>
     77c:	1d c1       	rjmp	.+570    	; 0x9b8 <__stack+0xb9>

#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
     77e:	80 91 11 02 	lds	r24, 0x0211
     782:	88 23       	and	r24, r24
     784:	09 f4       	brne	.+2      	; 0x788 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x5e>
     786:	26 c1       	rjmp	.+588    	; 0x9d4 <__stack+0xd5>
     788:	80 91 0e 02 	lds	r24, 0x020E
     78c:	88 23       	and	r24, r24
     78e:	09 f4       	brne	.+2      	; 0x792 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x68>
     790:	21 c1       	rjmp	.+578    	; 0x9d4 <__stack+0xd5>
    if(value != 100)
      {
#if defined(SUPPORT_BAKE)
      // If room is well below target and in BAKE mode then immediately open to maximum, unless always glacial.
      // Need debounced bake mode value to avoid spurious slamming open of the valve  user cycles through modes.
      if(inBakeMode()) { value = 100; valveTurnup(); return(true); }
     792:	84 e6       	ldi	r24, 0x64	; 100
     794:	f2 c0       	rjmp	.+484    	; 0x97a <__stack+0x7b>
      // Reduce valve hunting: defer re-opening if recently closed.
      if(valveTurndownCountdownM != 0) { return(false); }

      // Open glacially if explicitly requested or if temperature overshoot has happened or is a danger.
      // Note that pseudo overshoots may be seen as the target temperature steps down.
      const bool beGlacial = glacialOn(*this);
     796:	c8 01       	movw	r24, r16
     798:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <glacialOn(ModelledRadValve const&)>
      if(beGlacial) { ++value; }
     79c:	88 23       	and	r24, r24
     79e:	21 f0       	breq	.+8      	; 0x7a8 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x7e>
     7a0:	f8 01       	movw	r30, r16
     7a2:	82 81       	ldd	r24, Z+2	; 0x02
     7a4:	8f 5f       	subi	r24, 0xFF	; 255
     7a6:	2e c0       	rjmp	.+92     	; 0x804 <ModelledRadValve::computeRequiredTRVPercentOpen()+0xda>
  public:
    // Return last value fetched by read(); undefined before first read().
    // Usually fast.
    // Often likely to be thread-safe or usable within ISRs (Interrupt Service Routines),
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual uint8_t get() const { return(value); }
     7a8:	80 91 49 02 	lds	r24, 0x0249
      else
        {
        // Ensure open quickly from cold for acceptable response.
        const uint8_t slewRate = ((!hasEcoBias()) ? TRV_SLEW_PC_PER_MIN_VFAST : TRV_SLEW_PC_PER_MIN_FAST);
     7ac:	81 38       	cpi	r24, 0x81	; 129
     7ae:	10 f4       	brcc	.+4      	; 0x7b4 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x8a>
     7b0:	2a e0       	ldi	r18, 0x0A	; 10
     7b2:	01 c0       	rjmp	.+2      	; 0x7b6 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x8c>
     7b4:	24 e1       	ldi	r18, 0x14	; 20
// At the boiler hub this is also the threshold percentage-open on eavesdropped requests that will call for heat.
// If no override is set then DEFAULT_MIN_VALVE_PC_REALLY_OPEN is used.
// NOTE: raising this value temporarily (and shutting down the boiler immediately if possible) is one way to implement dynamic demand.
uint8_t ModelledRadValve::getMinValvePcReallyOpen()
  {
  if(0 != mVPRO_cache) { return(mVPRO_cache); } // Return cached value if possible.
     7b6:	90 91 0d 02 	lds	r25, 0x020D
     7ba:	99 23       	and	r25, r25
     7bc:	79 f4       	brne	.+30     	; 0x7dc <ModelledRadValve::computeRequiredTRVPercentOpen()+0xb2>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     7be:	f9 99       	sbic	0x1f, 1	; 31
     7c0:	fe cf       	rjmp	.-4      	; 0x7be <ModelledRadValve::computeRequiredTRVPercentOpen()+0x94>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     7c2:	83 e1       	ldi	r24, 0x13	; 19
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	92 bd       	out	0x22, r25	; 34
     7c8:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     7ca:	f8 9a       	sbi	0x1f, 0	; 31
     7cc:	90 b5       	in	r25, 0x20	; 32
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_MIN_VALVE_PC_REALLY_OPEN);
  const uint8_t result = ((stored > 0) && (stored <= 100)) ? stored : DEFAULT_MIN_VALVE_PC_REALLY_OPEN;
     7ce:	89 2f       	mov	r24, r25
     7d0:	81 50       	subi	r24, 0x01	; 1
     7d2:	84 36       	cpi	r24, 0x64	; 100
     7d4:	08 f0       	brcs	.+2      	; 0x7d8 <ModelledRadValve::computeRequiredTRVPercentOpen()+0xae>
     7d6:	9a e0       	ldi	r25, 0x0A	; 10
  mVPRO_cache = result; // Cache it.
     7d8:	90 93 0d 02 	sts	0x020D, r25
      if(beGlacial) { ++value; }
      else
        {
        // Ensure open quickly from cold for acceptable response.
        const uint8_t slewRate = ((!hasEcoBias()) ? TRV_SLEW_PC_PER_MIN_VFAST : TRV_SLEW_PC_PER_MIN_FAST);
        const uint8_t minOpenFromCold = fnmax(slewRate, NominalRadValve.getMinPercentOpen());
     7dc:	99 83       	std	Y+1, r25	; 0x01
     7de:	92 17       	cp	r25, r18
     7e0:	08 f4       	brcc	.+2      	; 0x7e4 <ModelledRadValve::computeRequiredTRVPercentOpen()+0xba>
     7e2:	92 2f       	mov	r25, r18
        if(value < minOpenFromCold) { value = minOpenFromCold; }
     7e4:	f8 01       	movw	r30, r16
     7e6:	82 81       	ldd	r24, Z+2	; 0x02
     7e8:	89 17       	cp	r24, r25
     7ea:	08 f4       	brcc	.+2      	; 0x7ee <ModelledRadValve::computeRequiredTRVPercentOpen()+0xc4>
     7ec:	dd c0       	rjmp	.+442    	; 0x9a8 <__stack+0xa9>
        // Slew open relatively gently...
        else { value = fnmin(value + slewRate, 100); } // Capped at maximum.
     7ee:	f8 01       	movw	r30, r16
     7f0:	82 81       	ldd	r24, Z+2	; 0x02
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	82 0f       	add	r24, r18
     7f6:	91 1d       	adc	r25, r1
     7f8:	85 36       	cpi	r24, 0x65	; 101
     7fa:	91 05       	cpc	r25, r1
     7fc:	14 f0       	brlt	.+4      	; 0x802 <ModelledRadValve::computeRequiredTRVPercentOpen()+0xd8>
     7fe:	84 e6       	ldi	r24, 0x64	; 100
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	f8 01       	movw	r30, r16
     804:	82 83       	std	Z+2, r24	; 0x02
     806:	d4 c0       	rjmp	.+424    	; 0x9b0 <__stack+0xb1>
      changed = true;
      // Defer reclosing valve to avoid excessive hunting.
      valveTurnup();
      }
    }
  else if(refTempC > targetTempC) // (Well) over temp target: close valve if not yet closed.
     808:	84 17       	cp	r24, r20
     80a:	95 07       	cpc	r25, r21
     80c:	0c f0       	brlt	.+2      	; 0x810 <ModelledRadValve::computeRequiredTRVPercentOpen()+0xe6>
     80e:	57 c0       	rjmp	.+174    	; 0x8be <ModelledRadValve::computeRequiredTRVPercentOpen()+0x194>
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// Should be only be called once 'debounced' if coming from a button press for example.
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBakeDebounced() { bakeCountdownM = 0; }
     810:	10 92 0e 02 	sts	0x020E, r1
      }
    }
  else if(refTempC > targetTempC) // (Well) over temp target: close valve if not yet closed.
    {
    cancelBakeDebounced(); // Ensure BAKE mode cancelled immediately if over target (eg when target is BAKE).
    if(value != 0)
     814:	f8 01       	movw	r30, r16
     816:	82 81       	ldd	r24, Z+2	; 0x02
     818:	88 23       	and	r24, r24
     81a:	09 f4       	brne	.+2      	; 0x81e <ModelledRadValve::computeRequiredTRVPercentOpen()+0xf4>
     81c:	cd c0       	rjmp	.+410    	; 0x9b8 <__stack+0xb9>
      {
      // Reduce valve hunting: defer re-closing if recently opened.
      if(valveTurnupCountdownM != 0) { return(false); }
     81e:	80 85       	ldd	r24, Z+8	; 0x08
     820:	88 23       	and	r24, r24
     822:	09 f0       	breq	.+2      	; 0x826 <ModelledRadValve::computeRequiredTRVPercentOpen()+0xfc>
     824:	c9 c0       	rjmp	.+402    	; 0x9b8 <__stack+0xb9>
// At the boiler hub this is also the threshold percentage-open on eavesdropped requests that will call for heat.
// If no override is set then DEFAULT_MIN_VALVE_PC_REALLY_OPEN is used.
// NOTE: raising this value temporarily (and shutting down the boiler immediately if possible) is one way to implement dynamic demand.
uint8_t ModelledRadValve::getMinValvePcReallyOpen()
  {
  if(0 != mVPRO_cache) { return(mVPRO_cache); } // Return cached value if possible.
     826:	90 91 0d 02 	lds	r25, 0x020D
     82a:	99 23       	and	r25, r25
     82c:	99 f4       	brne	.+38     	; 0x854 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x12a>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     82e:	f9 99       	sbic	0x1f, 1	; 31
     830:	fe cf       	rjmp	.-4      	; 0x82e <ModelledRadValve::computeRequiredTRVPercentOpen()+0x104>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     832:	83 e1       	ldi	r24, 0x13	; 19
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	92 bd       	out	0x22, r25	; 34
     838:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     83a:	f8 9a       	sbi	0x1f, 0	; 31
     83c:	90 b5       	in	r25, 0x20	; 32
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_MIN_VALVE_PC_REALLY_OPEN);
  const uint8_t result = ((stored > 0) && (stored <= 100)) ? stored : DEFAULT_MIN_VALVE_PC_REALLY_OPEN;
     83e:	89 2f       	mov	r24, r25
     840:	81 50       	subi	r24, 0x01	; 1
     842:	84 36       	cpi	r24, 0x64	; 100
     844:	08 f0       	brcs	.+2      	; 0x848 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x11e>
     846:	9a e0       	ldi	r25, 0x0A	; 10
  mVPRO_cache = result; // Cache it.
     848:	90 93 0d 02 	sts	0x020D, r25
      // Continue shutting valve as not yet closed.
#if defined(VALVE_TURN_OFF_LINGER) // && (DEFAULT_MIN_VALVE_PC_REALLY_OPEN > 0)
      // TODO-117: allow very slow final turn off to help systems with poor bypass, ~1% per minute.
      // Special slow-turn-off rules for final part of travel at/below DEFAULT_MIN_VALVE_PC_REALLY_OPEN floor.
      const uint8_t minReallyOpen = NominalRadValve.getMinPercentOpen();
      const uint8_t lingerThreshold = (minReallyOpen > 0) ? (minReallyOpen-1) : 0;
     84c:	99 23       	and	r25, r25
     84e:	11 f4       	brne	.+4      	; 0x854 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x12a>
     850:	40 e0       	ldi	r20, 0x00	; 0
     852:	02 c0       	rjmp	.+4      	; 0x858 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x12e>
     854:	49 2f       	mov	r20, r25
     856:	41 50       	subi	r20, 0x01	; 1
//      const uint8_t lingerThreshold = DEFAULT_MIN_VALVE_PC_REALLY_OPEN - 1; // Should be below 'call for heat' threshold.
      if(value < minReallyOpen)
     858:	f8 01       	movw	r30, r16
     85a:	82 81       	ldd	r24, Z+2	; 0x02
     85c:	89 17       	cp	r24, r25
     85e:	70 f4       	brcc	.+28     	; 0x87c <ModelledRadValve::computeRequiredTRVPercentOpen()+0x152>
        {
        // If lingered long enough then do final chunk in one burst to help avoid valve hiss and temperature overshoot.
        if((DEFAULT_MAX_RUN_ON_TIME_M < minReallyOpen) && (value < minReallyOpen - DEFAULT_MAX_RUN_ON_TIME_M))
     860:	96 30       	cpi	r25, 0x06	; 6
     862:	08 f4       	brcc	.+2      	; 0x866 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x13c>
     864:	bc c0       	rjmp	.+376    	; 0x9de <__stack+0xdf>
     866:	22 81       	ldd	r18, Z+2	; 0x02
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	89 2f       	mov	r24, r25
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	05 97       	sbiw	r24, 0x05	; 5
     870:	28 17       	cp	r18, r24
     872:	39 07       	cpc	r19, r25
     874:	0c f0       	brlt	.+2      	; 0x878 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x14e>
     876:	b3 c0       	rjmp	.+358    	; 0x9de <__stack+0xdf>
          { value = 0; } // Shut right off.
     878:	12 82       	std	Z+2, r1	; 0x02
     87a:	1e c0       	rjmp	.+60     	; 0x8b8 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x18e>
     87c:	80 91 49 02 	lds	r24, 0x0249
      // No special linger threshold.
      const uint8_t lingerThreshold = 0; // Fully off.
#endif
      // TODO-109: with comfort bias (or at hub because of self-heating temp errors) or if temperarure filtering is in place
      // then slew to off relatively slowly to reduce wasted effort from minor overshoots.
      if(((!hasEcoBias()) || inHubMode() || TemperatureC16.isFilteringOn()) &&
     880:	81 38       	cpi	r24, 0x81	; 129
     882:	28 f4       	brcc	.+10     	; 0x88e <ModelledRadValve::computeRequiredTRVPercentOpen()+0x164>
     884:	80 91 46 02 	lds	r24, 0x0246
     888:	88 23       	and	r24, r24
     88a:	09 f4       	brne	.+2      	; 0x88e <ModelledRadValve::computeRequiredTRVPercentOpen()+0x164>
     88c:	ac c0       	rjmp	.+344    	; 0x9e6 <__stack+0xe7>
     88e:	f8 01       	movw	r30, r16
     890:	82 81       	ldd	r24, Z+2	; 0x02
     892:	24 2f       	mov	r18, r20
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	21 35       	cpi	r18, 0x51	; 81
     898:	31 05       	cpc	r19, r1
     89a:	1c f0       	brlt	.+6      	; 0x8a2 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x178>
     89c:	24 e6       	ldi	r18, 0x64	; 100
     89e:	30 e0       	ldi	r19, 0x00	; 0
     8a0:	02 c0       	rjmp	.+4      	; 0x8a6 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x17c>
     8a2:	2c 5e       	subi	r18, 0xEC	; 236
     8a4:	3f 4f       	sbci	r19, 0xFF	; 255
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	28 17       	cp	r18, r24
     8aa:	39 07       	cpc	r19, r25
     8ac:	0c f0       	brlt	.+2      	; 0x8b0 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x186>
     8ae:	9b c0       	rjmp	.+310    	; 0x9e6 <__stack+0xe7>
         (value > constrain(((int)lingerThreshold) + TRV_SLEW_PC_PER_MIN_VFAST, TRV_SLEW_PC_PER_MIN_VFAST, 100))) { value -= TRV_SLEW_PC_PER_MIN_VFAST; }
     8b0:	f8 01       	movw	r30, r16
     8b2:	82 81       	ldd	r24, Z+2	; 0x02
     8b4:	84 51       	subi	r24, 0x14	; 20
     8b6:	82 83       	std	Z+2, r24	; 0x02
    // causing measured temperatures to veer up and down.
    // This attempts to reduce excessive valve noise and energy use
    // and help to avoid boiler short-cycling.
    uint8_t valveTurndownCountdownM;
    // Mark flow as having been reduced.
    void valveTurndown() { valveTurndownCountdownM = ANTISEEK_VALVE_REOPEN_DELAY_M; }
     8b8:	88 e0       	ldi	r24, 0x08	; 8
     8ba:	f8 01       	movw	r30, r16
     8bc:	47 c0       	rjmp	.+142    	; 0x94c <__stack+0x4d>
    }
  else // Close to (or at) temp target: set valve partly open to try to tightly regulate.
    {
    // Use currentTempC16 lsbits to set valve percentage for proportional feedback
    // to provide more efficient and quieter TRV drive and probably more stable room temperature.
    uint8_t tmp = (uint8_t) (refTempC16 & 0xf); // Only interested in lsbits.
     8be:	82 2f       	mov	r24, r18
     8c0:	8f 70       	andi	r24, 0x0F	; 15
    tmp = 16 - tmp; // Now in range 1 (at warmest end of 'correct' temperature) to 16 (coolest).
    const uint8_t ulpStep = 6;
    // Get to nominal range 6 to 96, eg valve nearly shut just below top of 'correct' temperature window.
    const uint8_t targetPORaw = tmp * ulpStep;
     8c2:	90 e1       	ldi	r25, 0x10	; 16
     8c4:	98 1b       	sub	r25, r24
     8c6:	86 e0       	ldi	r24, 0x06	; 6
     8c8:	98 9f       	mul	r25, r24
     8ca:	50 2d       	mov	r21, r0
     8cc:	11 24       	eor	r1, r1
// At the boiler hub this is also the threshold percentage-open on eavesdropped requests that will call for heat.
// If no override is set then DEFAULT_MIN_VALVE_PC_REALLY_OPEN is used.
// NOTE: raising this value temporarily (and shutting down the boiler immediately if possible) is one way to implement dynamic demand.
uint8_t ModelledRadValve::getMinValvePcReallyOpen()
  {
  if(0 != mVPRO_cache) { return(mVPRO_cache); } // Return cached value if possible.
     8ce:	40 91 0d 02 	lds	r20, 0x020D
     8d2:	44 23       	and	r20, r20
     8d4:	79 f4       	brne	.+30     	; 0x8f4 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x1ca>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     8d6:	f9 99       	sbic	0x1f, 1	; 31
     8d8:	fe cf       	rjmp	.-4      	; 0x8d6 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x1ac>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     8da:	83 e1       	ldi	r24, 0x13	; 19
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	92 bd       	out	0x22, r25	; 34
     8e0:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     8e2:	f8 9a       	sbi	0x1f, 0	; 31
     8e4:	40 b5       	in	r20, 0x20	; 32
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_MIN_VALVE_PC_REALLY_OPEN);
  const uint8_t result = ((stored > 0) && (stored <= 100)) ? stored : DEFAULT_MIN_VALVE_PC_REALLY_OPEN;
     8e6:	84 2f       	mov	r24, r20
     8e8:	81 50       	subi	r24, 0x01	; 1
     8ea:	84 36       	cpi	r24, 0x64	; 100
     8ec:	08 f0       	brcs	.+2      	; 0x8f0 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x1c6>
     8ee:	4a e0       	ldi	r20, 0x0A	; 10
  mVPRO_cache = result; // Cache it.
     8f0:	40 93 0d 02 	sts	0x020D, r20
     8f4:	f4 2e       	mov	r15, r20
     8f6:	45 17       	cp	r20, r21
     8f8:	08 f4       	brcc	.+2      	; 0x8fc <ModelledRadValve::computeRequiredTRVPercentOpen()+0x1d2>
     8fa:	f5 2e       	mov	r15, r21
#else
    // Use as-is.
    const uint8_t targetPO = targetPORaw;
#endif
    // Reduce spurious valve/boiler adjustment by avoiding movement at all unless current error is significant.
    if(targetPO != value)
     8fc:	f8 01       	movw	r30, r16
     8fe:	82 81       	ldd	r24, Z+2	; 0x02
     900:	f8 16       	cp	r15, r24
     902:	09 f4       	brne	.+2      	; 0x906 <__stack+0x7>
     904:	59 c0       	rjmp	.+178    	; 0x9b8 <__stack+0xb9>
    bool isRoomLit() const { return(isRoomLitFlag); }

    // Returns true if room is light enough for someone to be active.
    // False if unknown.
    // Thread-safe and usable within ISRs (Interrupt Service Routines).
    bool isRoomDark() const { return(!isRoomLitFlag); }
     906:	80 91 31 02 	lds	r24, 0x0231
      // Increase this significantly in a dark/quiet/vacant room
      // to attempt to reduce the total number and size of adjustments and thus reduce noise (and battery drain).
      // Also increase if temperature filtering is in place which will slow response and make some overshoot more likely.
      // Also increase if temperature resolution is lower than 1/16th, eg 8ths => 1+2*ulpStep minimum.
      // The wider deadband (less good temperature regulation) might be noticeable/annoying to sensitive occupants.
      const bool widenDeadband = AmbLight.isRoomDark() || Occupancy.longVacant() || TemperatureC16.isFilteringOn() || TemperatureC16.isLowPrecision();
     90a:	88 23       	and	r24, r24
     90c:	69 f0       	breq	.+26     	; 0x928 <__stack+0x29>
    // At other times more relaxed checking (eg lower power) can be used.
    bool increaseCheckForOccupancy() { return(!isLikelyRecentlyOccupied() && isLikelyOccupied() && !reportedRecently()); }

    // Get number of hours room vacant, zero when room occupied; does not wrap.
    // If forced to zero as soon as occupancy is detected.
    uint16_t getVacancyH() { return((value != 0) ? 0 : vacancyH); }
     90e:	80 91 ff 01 	lds	r24, 0x01FF
     912:	88 23       	and	r24, r24
     914:	21 f4       	brne	.+8      	; 0x91e <__stack+0x1f>
     916:	80 91 02 02 	lds	r24, 0x0202
     91a:	89 31       	cpi	r24, 0x19	; 25
     91c:	28 f4       	brcc	.+10     	; 0x928 <__stack+0x29>
     91e:	80 91 46 02 	lds	r24, 0x0246
     922:	88 23       	and	r24, r24
     924:	09 f4       	brne	.+2      	; 0x928 <__stack+0x29>
     926:	68 c0       	rjmp	.+208    	; 0x9f8 <__stack+0xf9>
     928:	25 e1       	ldi	r18, 0x15	; 21
     92a:	30 e0       	ldi	r19, 0x00	; 0
      const uint8_t minAbsSlew = fnmax((1+ulpStep), widenDeadband ? min(25,max(TRV_MAX_SLEW_PC_PER_MIN,3*TRV_MIN_SLEW_PC)) : TRV_MIN_SLEW_PC);
     92c:	e2 2e       	mov	r14, r18
      if(targetPO < value) // Currently open more than required, ie above target temperature.
     92e:	f8 01       	movw	r30, r16
     930:	82 81       	ldd	r24, Z+2	; 0x02
     932:	f8 16       	cp	r15, r24
     934:	70 f4       	brcc	.+28     	; 0x952 <__stack+0x53>
        {
        // Reduce valve hunting: defer re-closing if recently opened.
        if(valveTurnupCountdownM != 0) { return(false); }
     936:	80 85       	ldd	r24, Z+8	; 0x08
     938:	88 23       	and	r24, r24
     93a:	f1 f5       	brne	.+124    	; 0x9b8 <__stack+0xb9>

        const uint8_t slew = value - targetPO;
     93c:	82 81       	ldd	r24, Z+2	; 0x02
        if(slew >= minAbsSlew) // Ensure no hunting for 1ulp temperature wobble.
     93e:	8f 19       	sub	r24, r15
     940:	82 17       	cp	r24, r18
     942:	d0 f1       	brcs	.+116    	; 0x9b8 <__stack+0xb9>
          {
          if(slew > TRV_MAX_SLEW_PC_PER_MIN)
              { value -= TRV_MAX_SLEW_PC_PER_MIN; } // Cap slew rate.
     944:	82 81       	ldd	r24, Z+2	; 0x02
     946:	85 50       	subi	r24, 0x05	; 5
     948:	82 83       	std	Z+2, r24	; 0x02
    // causing measured temperatures to veer up and down.
    // This attempts to reduce excessive valve noise and energy use
    // and help to avoid boiler short-cycling.
    uint8_t valveTurndownCountdownM;
    // Mark flow as having been reduced.
    void valveTurndown() { valveTurndownCountdownM = ANTISEEK_VALVE_REOPEN_DELAY_M; }
     94a:	88 e0       	ldi	r24, 0x08	; 8
     94c:	87 83       	std	Z+7, r24	; 0x07
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	34 c0       	rjmp	.+104    	; 0x9ba <__stack+0xbb>
          }
        }
      else // if(targetPO > TRVPercentOpen) // Currently open less than required, ie below target temperature.
        {
        // Reduce valve hunting: defer re-opening if recently closed.
        if(valveTurndownCountdownM != 0) { return(false); }
     952:	f8 01       	movw	r30, r16
     954:	87 81       	ldd	r24, Z+7	; 0x07
     956:	88 23       	and	r24, r24
     958:	79 f5       	brne	.+94     	; 0x9b8 <__stack+0xb9>
      // to attempt to reduce the total number and size of adjustments and thus reduce noise (and battery drain).
      // Also increase if temperature filtering is in place which will slow response and make some overshoot more likely.
      // Also increase if temperature resolution is lower than 1/16th, eg 8ths => 1+2*ulpStep minimum.
      // The wider deadband (less good temperature regulation) might be noticeable/annoying to sensitive occupants.
      const bool widenDeadband = AmbLight.isRoomDark() || Occupancy.longVacant() || TemperatureC16.isFilteringOn() || TemperatureC16.isLowPrecision();
      const uint8_t minAbsSlew = fnmax((1+ulpStep), widenDeadband ? min(25,max(TRV_MAX_SLEW_PC_PER_MIN,3*TRV_MIN_SLEW_PC)) : TRV_MIN_SLEW_PC);
     95a:	3b 87       	std	Y+11, r19	; 0x0b
     95c:	2a 87       	std	Y+10, r18	; 0x0a
     95e:	87 e0       	ldi	r24, 0x07	; 7
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	99 87       	std	Y+9, r25	; 0x09
     964:	88 87       	std	Y+8, r24	; 0x08
    const uint8_t ulpStep = 6;
    // Get to nominal range 6 to 96, eg valve nearly shut just below top of 'correct' temperature window.
    const uint8_t targetPORaw = tmp * ulpStep;
#if defined(VALVE_TURN_OFF_LINGER)
    // Constrain from below to likely minimum-open value, in part to deal with TODO-117 'linger open' in lieu of boiler bypass.
    const uint8_t minReallyOpen = NominalRadValve.getMinPercentOpen();
     966:	4b 83       	std	Y+3, r20	; 0x03
    // to provide more efficient and quieter TRV drive and probably more stable room temperature.
    uint8_t tmp = (uint8_t) (refTempC16 & 0xf); // Only interested in lsbits.
    tmp = 16 - tmp; // Now in range 1 (at warmest end of 'correct' temperature) to 16 (coolest).
    const uint8_t ulpStep = 6;
    // Get to nominal range 6 to 96, eg valve nearly shut just below top of 'correct' temperature window.
    const uint8_t targetPORaw = tmp * ulpStep;
     968:	5a 83       	std	Y+2, r21	; 0x02
        // Reduce valve hunting: defer re-opening if recently closed.
        if(valveTurndownCountdownM != 0) { return(false); }

        // Open glacially if explicitly requested or if temperature overshoot has happened or is a danger.
        // Note that pseudo overshoots may be seen as the target temperature steps down.
        const bool beGlacial = glacialOn(*this);
     96a:	c8 01       	movw	r24, r16
     96c:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <glacialOn(ModelledRadValve const&)>
        if(beGlacial) { ++value; valveTurnup(); return(true); }
     970:	88 23       	and	r24, r24
     972:	31 f0       	breq	.+12     	; 0x980 <__stack+0x81>
     974:	f8 01       	movw	r30, r16
     976:	82 81       	ldd	r24, Z+2	; 0x02
     978:	8f 5f       	subi	r24, 0xFF	; 255
     97a:	82 83       	std	Z+2, r24	; 0x02
    // causing measured temperatures to veer up and down.
    // This attempts to reduce excessive valve noise and energy use
    // and help to avoid boiler short-cycling.
    uint8_t valveTurnupCountdownM;
    // Mark flow as having been increased.
    void valveTurnup() { valveTurnupCountdownM = ANTISEEK_VALVE_RECLOSE_DELAY_M; }
     97c:	84 e0       	ldi	r24, 0x04	; 4
     97e:	1a c0       	rjmp	.+52     	; 0x9b4 <__stack+0xb5>

        const uint8_t slew = targetPO - value;
     980:	f8 01       	movw	r30, r16
     982:	82 81       	ldd	r24, Z+2	; 0x02
     984:	9f 2d       	mov	r25, r15
     986:	98 1b       	sub	r25, r24
        if(slew >= minAbsSlew) // In general ensure no hunting for 1ulp temperature wobble.
     988:	9e 15       	cp	r25, r14
     98a:	b0 f0       	brcs	.+44     	; 0x9b8 <__stack+0xb9>

#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
     98c:	80 91 11 02 	lds	r24, 0x0211
     990:	88 23       	and	r24, r24
     992:	61 f1       	breq	.+88     	; 0x9ec <__stack+0xed>
     994:	80 91 0e 02 	lds	r24, 0x020E
     998:	88 23       	and	r24, r24
     99a:	41 f1       	breq	.+80     	; 0x9ec <__stack+0xed>
          // Slew open faster in BAKE mode or with comfort bias,
          // or when below probable minimum 'really open' percentage to avoid delaying heat unnecessarily
          // (unless always glacial when opening).
          const uint8_t maxSlew = ((inBakeMode() || !hasEcoBias()) ?
              TRV_SLEW_PC_PER_MIN_FAST : TRV_MAX_SLEW_PC_PER_MIN);
          if(slew > maxSlew)
     99c:	9b 30       	cpi	r25, 0x0B	; 11
     99e:	30 f0       	brcs	.+12     	; 0x9ac <__stack+0xad>
     9a0:	9a e0       	ldi	r25, 0x0A	; 10
              { value += maxSlew; } // Cap slew rate open.
     9a2:	f8 01       	movw	r30, r16
     9a4:	82 81       	ldd	r24, Z+2	; 0x02
     9a6:	98 0f       	add	r25, r24
     9a8:	92 83       	std	Z+2, r25	; 0x02
     9aa:	02 c0       	rjmp	.+4      	; 0x9b0 <__stack+0xb1>
          else
              { value = targetPO; } // Adjust directly to target.
     9ac:	f8 01       	movw	r30, r16
     9ae:	f2 82       	std	Z+2, r15	; 0x02
     9b0:	84 e0       	ldi	r24, 0x04	; 4
     9b2:	f8 01       	movw	r30, r16
     9b4:	80 87       	std	Z+8, r24	; 0x08
     9b6:	cb cf       	rjmp	.-106    	; 0x94e <__stack+0x4f>
     9b8:	80 e0       	ldi	r24, 0x00	; 0
        }
      }
    }

  return(changed);
  }
     9ba:	2b 96       	adiw	r28, 0x0b	; 11
     9bc:	0f b6       	in	r0, 0x3f	; 63
     9be:	f8 94       	cli
     9c0:	de bf       	out	0x3e, r29	; 62
     9c2:	0f be       	out	0x3f, r0	; 63
     9c4:	cd bf       	out	0x3d, r28	; 61
     9c6:	cf 91       	pop	r28
     9c8:	df 91       	pop	r29
     9ca:	1f 91       	pop	r17
     9cc:	0f 91       	pop	r16
     9ce:	ff 90       	pop	r15
     9d0:	ef 90       	pop	r14
     9d2:	08 95       	ret
      // If room is well below target and in BAKE mode then immediately open to maximum, unless always glacial.
      // Need debounced bake mode value to avoid spurious slamming open of the valve  user cycles through modes.
      if(inBakeMode()) { value = 100; valveTurnup(); return(true); }
#endif
      // Reduce valve hunting: defer re-opening if recently closed.
      if(valveTurndownCountdownM != 0) { return(false); }
     9d4:	f8 01       	movw	r30, r16
     9d6:	87 81       	ldd	r24, Z+7	; 0x07
     9d8:	88 23       	and	r24, r24
     9da:	71 f7       	brne	.-36     	; 0x9b8 <__stack+0xb9>
     9dc:	dc ce       	rjmp	.-584    	; 0x796 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x6c>
        {
        // If lingered long enough then do final chunk in one burst to help avoid valve hiss and temperature overshoot.
        if((DEFAULT_MAX_RUN_ON_TIME_M < minReallyOpen) && (value < minReallyOpen - DEFAULT_MAX_RUN_ON_TIME_M))
          { value = 0; } // Shut right off.
        else
          { --value; } // Turn down as slowly as reasonably possible to help boiler cool.
     9de:	f8 01       	movw	r30, r16
     9e0:	82 81       	ldd	r24, Z+2	; 0x02
     9e2:	81 50       	subi	r24, 0x01	; 1
     9e4:	68 cf       	rjmp	.-304    	; 0x8b6 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x18c>
      // then slew to off relatively slowly to reduce wasted effort from minor overshoots.
      if(((!hasEcoBias()) || inHubMode() || TemperatureC16.isFilteringOn()) &&
         (value > constrain(((int)lingerThreshold) + TRV_SLEW_PC_PER_MIN_VFAST, TRV_SLEW_PC_PER_MIN_VFAST, 100))) { value -= TRV_SLEW_PC_PER_MIN_VFAST; }
      // Else (by default) force to (nearly) off immediately when requested, ie eagerly stop heating to conserve energy.
      // In any case percentage open should now be low enough to stop calling for heat immediately.
      else { value = lingerThreshold; }
     9e6:	f8 01       	movw	r30, r16
     9e8:	42 83       	std	Z+2, r20	; 0x02
     9ea:	66 cf       	rjmp	.-308    	; 0x8b8 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x18e>
     9ec:	80 91 49 02 	lds	r24, 0x0249
          {
          // Slew open faster in BAKE mode or with comfort bias,
          // or when below probable minimum 'really open' percentage to avoid delaying heat unnecessarily
          // (unless always glacial when opening).
          const uint8_t maxSlew = ((inBakeMode() || !hasEcoBias()) ?
              TRV_SLEW_PC_PER_MIN_FAST : TRV_MAX_SLEW_PC_PER_MIN);
     9f0:	81 38       	cpi	r24, 0x81	; 129
     9f2:	a0 f6       	brcc	.-88     	; 0x99c <__stack+0x9d>
     9f4:	95 e0       	ldi	r25, 0x05	; 5
     9f6:	d5 cf       	rjmp	.-86     	; 0x9a2 <__stack+0xa3>
     9f8:	27 e0       	ldi	r18, 0x07	; 7
     9fa:	30 e0       	ldi	r19, 0x00	; 0
     9fc:	97 cf       	rjmp	.-210    	; 0x92c <__stack+0x2d>

000009fe <ModelledRadValve::computeTargetTemperature()>:
// Will be called by computeCallForHeat().
// One aim is to allow reasonable energy savings (10--30%)
// even if the device is left in WARM mode all the time,
// using occupancy/light/etc to determine when temperature can be set back
// without annoying users.
void ModelledRadValve::computeTargetTemperature()
     9fe:	df 92       	push	r13
     a00:	ef 92       	push	r14
     a02:	ff 92       	push	r15
     a04:	0f 93       	push	r16
     a06:	1f 93       	push	r17
     a08:	df 93       	push	r29
     a0a:	cf 93       	push	r28
     a0c:	00 d0       	rcall	.+0      	; 0xa0e <ModelledRadValve::computeTargetTemperature()+0x10>
     a0e:	cd b7       	in	r28, 0x3d	; 61
     a10:	de b7       	in	r29, 0x3e	; 62
     a12:	7c 01       	movw	r14, r24
  {
#if defined(TEMP_POT_AVAILABLE)
  // Force up-to-date reading of temperature pot.
  TempPot.read();
     a14:	87 e4       	ldi	r24, 0x47	; 71
     a16:	92 e0       	ldi	r25, 0x02	; 2
     a18:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <TemperaturePot::read()>
#endif

  // In FROST mode.
  if(!inWarmMode())
     a1c:	80 91 11 02 	lds	r24, 0x0211
     a20:	88 23       	and	r24, r24
     a22:	09 f0       	breq	.+2      	; 0xa26 <ModelledRadValve::computeTargetTemperature()+0x28>
     a24:	42 c0       	rjmp	.+132    	; 0xaaa <ModelledRadValve::computeTargetTemperature()+0xac>
     a26:	80 91 49 02 	lds	r24, 0x0249
#if defined(TEMP_POT_AVAILABLE)
// Derived from temperature pot position.
uint8_t getFROSTTargetC()
  {
  // Prevent falling to lowest frost temperature if relative humidity is high (eg to avoid mould).
  const uint8_t result = (!hasEcoBias() || (RelHumidity.isAvailable() && RelHumidity.isRHHighWithHyst())) ? BIASCOM_FROST : BIASECO_FROST;
     a2a:	81 38       	cpi	r24, 0x81	; 129
     a2c:	10 f4       	brcc	.+4      	; 0xa32 <ModelledRadValve::computeTargetTemperature()+0x34>
     a2e:	27 e0       	ldi	r18, 0x07	; 7
     a30:	01 c0       	rjmp	.+2      	; 0xa34 <ModelledRadValve::computeTargetTemperature()+0x36>
     a32:	2c e0       	ldi	r18, 0x0C	; 12
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     a34:	f9 99       	sbic	0x1f, 1	; 31
     a36:	fe cf       	rjmp	.-4      	; 0xa34 <ModelledRadValve::computeTargetTemperature()+0x36>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     a38:	8e e0       	ldi	r24, 0x0E	; 14
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	92 bd       	out	0x22, r25	; 34
     a3e:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     a40:	f8 9a       	sbi	0x1f, 0	; 31
     a42:	90 b5       	in	r25, 0x20	; 32
#if defined(SETTABLE_TARGET_TEMPERATURES)
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_FROST_C);
  // If stored value is set and in bounds and higher than computed value then use stored value instead.
  if((stored >= MIN_TARGET_C) && (stored <= MAX_TARGET_C) && (stored > result)) { return(stored); }
     a44:	89 2f       	mov	r24, r25
     a46:	85 50       	subi	r24, 0x05	; 5
     a48:	8b 35       	cpi	r24, 0x5B	; 91
     a4a:	18 f4       	brcc	.+6      	; 0xa52 <ModelledRadValve::computeTargetTemperature()+0x54>
     a4c:	29 17       	cp	r18, r25
     a4e:	08 f4       	brcc	.+2      	; 0xa52 <ModelledRadValve::computeTargetTemperature()+0x54>
     a50:	29 2f       	mov	r18, r25
#endif

  // In FROST mode.
  if(!inWarmMode())
    {
    const uint8_t frostC = getFROSTTargetC();
     a52:	29 83       	std	Y+1, r18	; 0x01
    // Apply FROST safety target temperature by default in FROST mode.
    targetTempC = frostC;
     a54:	f7 01       	movw	r30, r14
     a56:	23 83       	std	Z+3, r18	; 0x03
    // If scheduled WARM is due soon then ensure that room is at least at setback temperature
    // to give room a chance to hit the target, and for furniture and surfaces to be warm, etc.
    // HINT OF SMARTNESS/ANTICIPATION HERE...
    // Only do this if the target WARM temperature is not an 'eco' temperature (ie near the bottom of the scale)
    // unless the current hour seems to be in the top quartile of occupancy.
    if(isAnyScheduleOnWARMSoon())
     a58:	0e 94 cc 0c 	call	0x1998	; 0x1998 <isAnyScheduleOnWARMSoon()>
     a5c:	88 23       	and	r24, r24
     a5e:	09 f4       	brne	.+2      	; 0xa62 <ModelledRadValve::computeTargetTemperature()+0x64>
     a60:	99 c0       	rjmp	.+306    	; 0xb94 <ModelledRadValve::computeTargetTemperature()+0x196>
      {
      const uint8_t warmTarget = getWARMTargetC();
     a62:	0e 94 70 02 	call	0x4e0	; 0x4e0 <getWARMTargetC()>
     a66:	28 2f       	mov	r18, r24
     a68:	80 91 49 02 	lds	r24, 0x0249
      // Compute putative pre-warm temperature...
      const uint8_t preWarmTempC = fnmax((uint8_t)(warmTarget - (hasEcoBias() ? SETBACK_ECO : SETBACK_DEFAULT)), frostC);
     a6c:	81 38       	cpi	r24, 0x81	; 129
     a6e:	10 f0       	brcs	.+4      	; 0xa74 <ModelledRadValve::computeTargetTemperature()+0x76>
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	01 c0       	rjmp	.+2      	; 0xa76 <ModelledRadValve::computeTargetTemperature()+0x78>
     a74:	82 e0       	ldi	r24, 0x02	; 2
     a76:	92 2f       	mov	r25, r18
     a78:	98 1b       	sub	r25, r24
     a7a:	89 81       	ldd	r24, Y+1	; 0x01
     a7c:	19 2f       	mov	r17, r25
     a7e:	98 17       	cp	r25, r24
     a80:	08 f4       	brcc	.+2      	; 0xa84 <ModelledRadValve::computeTargetTemperature()+0x86>
     a82:	18 2f       	mov	r17, r24
      if((targetTempC < preWarmTempC) &&
     a84:	f7 01       	movw	r30, r14
     a86:	83 81       	ldd	r24, Z+3	; 0x03
     a88:	81 17       	cp	r24, r17
     a8a:	08 f0       	brcs	.+2      	; 0xa8e <ModelledRadValve::computeTargetTemperature()+0x90>
     a8c:	83 c0       	rjmp	.+262    	; 0xb94 <ModelledRadValve::computeTargetTemperature()+0x196>
     a8e:	22 31       	cpi	r18, 0x12	; 18
     a90:	48 f4       	brcc	.+18     	; 0xaa4 <ModelledRadValve::computeTargetTemperature()+0xa6>
    // unless the current hour seems to be in the top quartile of occupancy.
    if(isAnyScheduleOnWARMSoon())
      {
      const uint8_t warmTarget = getWARMTargetC();
      // Compute putative pre-warm temperature...
      const uint8_t preWarmTempC = fnmax((uint8_t)(warmTarget - (hasEcoBias() ? SETBACK_ECO : SETBACK_DEFAULT)), frostC);
     a92:	9a 83       	std	Y+2, r25	; 0x02
      if((targetTempC < preWarmTempC) &&
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	65 e0       	ldi	r22, 0x05	; 5
     a98:	4f ef       	ldi	r20, 0xFF	; 255
     a9a:	0e 94 1e 03 	call	0x63c	; 0x63c <inOutlierQuartile(unsigned char, unsigned char, unsigned char)>
     a9e:	88 23       	and	r24, r24
     aa0:	09 f4       	brne	.+2      	; 0xaa4 <ModelledRadValve::computeTargetTemperature()+0xa6>
     aa2:	78 c0       	rjmp	.+240    	; 0xb94 <ModelledRadValve::computeTargetTemperature()+0x196>
         (!isEcoTemperature(warmTarget) || inOutlierQuartile(true, EE_STATS_SET_OCCPC_BY_HOUR_SMOOTHED)))
        { targetTempC = preWarmTempC; }
     aa4:	f7 01       	movw	r30, r14
     aa6:	13 83       	std	Z+3, r17	; 0x03
     aa8:	75 c0       	rjmp	.+234    	; 0xb94 <ModelledRadValve::computeTargetTemperature()+0x196>

#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
     aaa:	80 91 0e 02 	lds	r24, 0x020E
     aae:	88 23       	and	r24, r24
     ab0:	09 f4       	brne	.+2      	; 0xab4 <ModelledRadValve::computeTargetTemperature()+0xb6>
     ab2:	91 c0       	rjmp	.+290    	; 0xbd6 <ModelledRadValve::computeTargetTemperature()+0x1d8>
    }

#ifdef SUPPORT_BAKE
  else if(inBakeMode()) // If in BAKE mode then use elevated target.
    {
    targetTempC = fnmin((uint8_t)(getWARMTargetC() + BAKE_UPLIFT), (uint8_t)MAX_TARGET_C); // No setbacks apply in BAKE mode.
     ab4:	0e 94 70 02 	call	0x4e0	; 0x4e0 <getWARMTargetC()>
     ab8:	8b 5f       	subi	r24, 0xFB	; 251
     aba:	80 36       	cpi	r24, 0x60	; 96
     abc:	08 f0       	brcs	.+2      	; 0xac0 <ModelledRadValve::computeTargetTemperature()+0xc2>
     abe:	8f e5       	ldi	r24, 0x5F	; 95
     ac0:	f7 01       	movw	r30, r14
     ac2:	83 83       	std	Z+3, r24	; 0x03
     ac4:	67 c0       	rjmp	.+206    	; 0xb94 <ModelledRadValve::computeTargetTemperature()+0x196>
    // At other times more relaxed checking (eg lower power) can be used.
    bool increaseCheckForOccupancy() { return(!isLikelyRecentlyOccupied() && isLikelyOccupied() && !reportedRecently()); }

    // Get number of hours room vacant, zero when room occupied; does not wrap.
    // If forced to zero as soon as occupancy is detected.
    uint16_t getVacancyH() { return((value != 0) ? 0 : vacancyH); }
     ac6:	80 91 02 02 	lds	r24, 0x0202
     aca:	90 e0       	ldi	r25, 0x00	; 0
    // For a home or an office no sign of acticity for this long suggests a weekend or a holiday for example.
    bool longVacant() { return(getVacancyH() > 24); }

    // Returns true if room appears to have been vacant for over a two days.
    // For a home or an office no sign of acticity for this long suggests a long weekend or a holiday for example.
    bool longLongVacant() { return(getVacancyH() > 48); }
     acc:	00 e0       	ldi	r16, 0x00	; 0
     ace:	c1 97       	sbiw	r24, 0x31	; 49
     ad0:	10 f0       	brcs	.+4      	; 0xad6 <ModelledRadValve::computeTargetTemperature()+0xd8>
     ad2:	01 e0       	ldi	r16, 0x01	; 1
     ad4:	22 c0       	rjmp	.+68     	; 0xb1a <ModelledRadValve::computeTargetTemperature()+0x11c>
    // At other times more relaxed checking (eg lower power) can be used.
    bool increaseCheckForOccupancy() { return(!isLikelyRecentlyOccupied() && isLikelyOccupied() && !reportedRecently()); }

    // Get number of hours room vacant, zero when room occupied; does not wrap.
    // If forced to zero as soon as occupancy is detected.
    uint16_t getVacancyH() { return((value != 0) ? 0 : vacancyH); }
     ad6:	80 91 ff 01 	lds	r24, 0x01FF
     ada:	88 23       	and	r24, r24
     adc:	09 f0       	breq	.+2      	; 0xae0 <ModelledRadValve::computeTargetTemperature()+0xe2>
     ade:	86 c0       	rjmp	.+268    	; 0xbec <ModelledRadValve::computeTargetTemperature()+0x1ee>
    // or it is too dark for anyone to be active or not likely occupied at this time AND no WARM schedule is active now (TODO-111).
    // Note that this mainly has to work in domestic settings in winter (with ~8h of daylight)
    // but should also work in artificially-lit offices (maybe ~12h continuous lighting).
    // No 'lights-on' signal for a whole day may be a fairly strong indication that the heat can be turned down! 
    const bool longLongVacant = Occupancy.longLongVacant();
    const bool longVacant = longLongVacant || Occupancy.longVacant();
     ae0:	80 91 02 02 	lds	r24, 0x0202
     ae4:	89 31       	cpi	r24, 0x19	; 25
     ae6:	c8 f4       	brcc	.+50     	; 0xb1a <ModelledRadValve::computeTargetTemperature()+0x11c>
     ae8:	81 c0       	rjmp	.+258    	; 0xbec <ModelledRadValve::computeTargetTemperature()+0x1ee>
    const bool notLikelyOccupiedSoon = longVacant || (Occupancy.isLikelyUnoccupied() && inOutlierQuartile(false, EE_STATS_SET_OCCPC_BY_HOUR_SMOOTHED));
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	65 e0       	ldi	r22, 0x05	; 5
     aee:	4f ef       	ldi	r20, 0xFF	; 255
     af0:	0e 94 1e 03 	call	0x63c	; 0x63c <inOutlierQuartile(unsigned char, unsigned char, unsigned char)>
     af4:	88 23       	and	r24, r24
     af6:	11 f0       	breq	.+4      	; 0xafc <ModelledRadValve::computeTargetTemperature()+0xfe>
     af8:	11 e0       	ldi	r17, 0x01	; 1
     afa:	01 c0       	rjmp	.+2      	; 0xafe <ModelledRadValve::computeTargetTemperature()+0x100>
     afc:	10 e0       	ldi	r17, 0x00	; 0
     afe:	80 91 31 02 	lds	r24, 0x0231
    if(longVacant ||
     b02:	88 23       	and	r24, r24
     b04:	19 f0       	breq	.+6      	; 0xb0c <ModelledRadValve::computeTargetTemperature()+0x10e>
     b06:	11 23       	and	r17, r17
     b08:	09 f4       	brne	.+2      	; 0xb0c <ModelledRadValve::computeTargetTemperature()+0x10e>
     b0a:	76 c0       	rjmp	.+236    	; 0xbf8 <ModelledRadValve::computeTargetTemperature()+0x1fa>
     b0c:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <isAnyScheduleOnWARMNow()>
     b10:	88 23       	and	r24, r24
     b12:	09 f0       	breq	.+2      	; 0xb16 <ModelledRadValve::computeTargetTemperature()+0x118>
     b14:	71 c0       	rjmp	.+226    	; 0xbf8 <ModelledRadValve::computeTargetTemperature()+0x1fa>
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	02 c0       	rjmp	.+4      	; 0xb1e <ModelledRadValve::computeTargetTemperature()+0x120>
     b1a:	11 e0       	ldi	r17, 0x01	; 1
     b1c:	91 e0       	ldi	r25, 0x01	; 1
     b1e:	80 91 49 02 	lds	r24, 0x0249
                               Occupancy.isLikelyOccupied() ||
                               (!longLongVacant && AmbLight.isRoomLit()) ||
                               (!longVacant && isAnyScheduleOnWARMSoon())) ?
              SETBACK_DEFAULT :
          ((longLongVacant || notLikelyOccupiedSoon) ?
              SETBACK_FULL : SETBACK_ECO);
     b22:	81 38       	cpi	r24, 0x81	; 129
     b24:	b0 f4       	brcc	.+44     	; 0xb52 <ModelledRadValve::computeTargetTemperature()+0x154>

    // Returns true if the room appears to be likely occupied (with active users) now.
    // Operates on a timeout; calling markAsOccupied() restarts the timer.
    // Defaults to false (and API still exists) when OCCUPANCY_SUPPORT not defined.
    // Thread-safe.
    bool isLikelyOccupied() { return(0 != occupationCountdownM); }
     b26:	80 91 00 02 	lds	r24, 0x0200
     b2a:	88 23       	and	r24, r24
     b2c:	91 f4       	brne	.+36     	; 0xb52 <ModelledRadValve::computeTargetTemperature()+0x154>
     b2e:	00 23       	and	r16, r16
     b30:	21 f4       	brne	.+8      	; 0xb3a <ModelledRadValve::computeTargetTemperature()+0x13c>
    uint16_t getRaw() { return(rawValue); }

    // Returns true if room is lit enough for someone to be active.
    // False if unknown.
    // Thread-safe and usable within ISRs (Interrupt Service Routines).
    bool isRoomLit() const { return(isRoomLitFlag); }
     b32:	80 91 31 02 	lds	r24, 0x0231
     b36:	88 23       	and	r24, r24
     b38:	61 f4       	brne	.+24     	; 0xb52 <ModelledRadValve::computeTargetTemperature()+0x154>
     b3a:	99 23       	and	r25, r25
     b3c:	21 f4       	brne	.+8      	; 0xb46 <ModelledRadValve::computeTargetTemperature()+0x148>
     b3e:	0e 94 cc 0c 	call	0x1998	; 0x1998 <isAnyScheduleOnWARMSoon()>
     b42:	88 23       	and	r24, r24
     b44:	31 f4       	brne	.+12     	; 0xb52 <ModelledRadValve::computeTargetTemperature()+0x154>
     b46:	00 23       	and	r16, r16
     b48:	31 f4       	brne	.+12     	; 0xb56 <ModelledRadValve::computeTargetTemperature()+0x158>
     b4a:	11 23       	and	r17, r17
     b4c:	21 f4       	brne	.+8      	; 0xb56 <ModelledRadValve::computeTargetTemperature()+0x158>
     b4e:	32 e0       	ldi	r19, 0x02	; 2
     b50:	03 c0       	rjmp	.+6      	; 0xb58 <ModelledRadValve::computeTargetTemperature()+0x15a>
     b52:	31 e0       	ldi	r19, 0x01	; 1
     b54:	01 c0       	rjmp	.+2      	; 0xb58 <ModelledRadValve::computeTargetTemperature()+0x15a>
     b56:	33 e0       	ldi	r19, 0x03	; 3
     b58:	80 91 49 02 	lds	r24, 0x0249
#if defined(TEMP_POT_AVAILABLE)
// Derived from temperature pot position.
uint8_t getFROSTTargetC()
  {
  // Prevent falling to lowest frost temperature if relative humidity is high (eg to avoid mould).
  const uint8_t result = (!hasEcoBias() || (RelHumidity.isAvailable() && RelHumidity.isRHHighWithHyst())) ? BIASCOM_FROST : BIASECO_FROST;
     b5c:	81 38       	cpi	r24, 0x81	; 129
     b5e:	10 f4       	brcc	.+4      	; 0xb64 <ModelledRadValve::computeTargetTemperature()+0x166>
     b60:	27 e0       	ldi	r18, 0x07	; 7
     b62:	01 c0       	rjmp	.+2      	; 0xb66 <ModelledRadValve::computeTargetTemperature()+0x168>
     b64:	2c e0       	ldi	r18, 0x0C	; 12
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     b66:	f9 99       	sbic	0x1f, 1	; 31
     b68:	fe cf       	rjmp	.-4      	; 0xb66 <ModelledRadValve::computeTargetTemperature()+0x168>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     b6a:	8e e0       	ldi	r24, 0x0E	; 14
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	92 bd       	out	0x22, r25	; 34
     b70:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     b72:	f8 9a       	sbi	0x1f, 0	; 31
     b74:	90 b5       	in	r25, 0x20	; 32
#if defined(SETTABLE_TARGET_TEMPERATURES)
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_FROST_C);
  // If stored value is set and in bounds and higher than computed value then use stored value instead.
  if((stored >= MIN_TARGET_C) && (stored <= MAX_TARGET_C) && (stored > result)) { return(stored); }
     b76:	89 2f       	mov	r24, r25
     b78:	85 50       	subi	r24, 0x05	; 5
     b7a:	8b 35       	cpi	r24, 0x5B	; 91
     b7c:	18 f4       	brcc	.+6      	; 0xb84 <ModelledRadValve::computeTargetTemperature()+0x186>
     b7e:	29 17       	cp	r18, r25
     b80:	08 f4       	brcc	.+2      	; 0xb84 <ModelledRadValve::computeTargetTemperature()+0x186>
     b82:	29 2f       	mov	r18, r25
      // Set a 'smarter' setback target temperature based on predicted occupancy, etc, even if not explicitly in 'smart' mode.
      const uint_least8_t hh = getHoursLT();
      const uint8_t sba = shouldBeWarmedAtHour(hh) ? setback : SETBACK_FULL; 
      targetTempC = fnmax((uint8_t)(wt - sba), getFROSTTargetC());
#else // Lighter-weight code, eg for PICAXE.
      targetTempC = fnmax((uint8_t)(wt - setback), getFROSTTargetC()); // Target must never be set low enough to create a frost/freeze hazard.
     b84:	8d 2d       	mov	r24, r13
     b86:	83 1b       	sub	r24, r19
     b88:	92 2f       	mov	r25, r18
     b8a:	28 17       	cp	r18, r24
     b8c:	08 f4       	brcc	.+2      	; 0xb90 <ModelledRadValve::computeTargetTemperature()+0x192>
     b8e:	98 2f       	mov	r25, r24
     b90:	f7 01       	movw	r30, r14
     b92:	93 83       	std	Z+3, r25	; 0x03

  // Use a calculation that mirrors how computeRequiredTRVPercentOpen() will set the valve...
  int8_t refTempC;
  int refTempC16;
  getReferenceTemperature(refTempC, refTempC16);
  callingForHeat = (targetTempC >= refTempC);
     b94:	40 e0       	ldi	r20, 0x00	; 0
     b96:	f7 01       	movw	r30, r14
     b98:	23 81       	ldd	r18, Z+3	; 0x03
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	80 91 34 02 	lds	r24, 0x0234
     ba0:	90 91 35 02 	lds	r25, 0x0235
     ba4:	08 96       	adiw	r24, 0x08	; 8
     ba6:	14 e0       	ldi	r17, 0x04	; 4
     ba8:	95 95       	asr	r25
     baa:	87 95       	ror	r24
     bac:	1a 95       	dec	r17
     bae:	e1 f7       	brne	.-8      	; 0xba8 <ModelledRadValve::computeTargetTemperature()+0x1aa>
     bb0:	99 27       	eor	r25, r25
     bb2:	87 fd       	sbrc	r24, 7
     bb4:	90 95       	com	r25
     bb6:	28 17       	cp	r18, r24
     bb8:	39 07       	cpc	r19, r25
     bba:	0c f0       	brlt	.+2      	; 0xbbe <ModelledRadValve::computeTargetTemperature()+0x1c0>
     bbc:	41 e0       	ldi	r20, 0x01	; 1
     bbe:	f7 01       	movw	r30, r14
     bc0:	44 83       	std	Z+4, r20	; 0x04
  }
     bc2:	0f 90       	pop	r0
     bc4:	0f 90       	pop	r0
     bc6:	cf 91       	pop	r28
     bc8:	df 91       	pop	r29
     bca:	1f 91       	pop	r17
     bcc:	0f 91       	pop	r16
     bce:	ff 90       	pop	r15
     bd0:	ef 90       	pop	r14
     bd2:	df 90       	pop	r13
     bd4:	08 95       	ret
    }
#endif

  else // In 'WARM' mode with possible setback.
    {
    const uint8_t wt = getWARMTargetC();
     bd6:	0e 94 70 02 	call	0x4e0	; 0x4e0 <getWARMTargetC()>
     bda:	d8 2e       	mov	r13, r24
    // At other times more relaxed checking (eg lower power) can be used.
    bool increaseCheckForOccupancy() { return(!isLikelyRecentlyOccupied() && isLikelyOccupied() && !reportedRecently()); }

    // Get number of hours room vacant, zero when room occupied; does not wrap.
    // If forced to zero as soon as occupancy is detected.
    uint16_t getVacancyH() { return((value != 0) ? 0 : vacancyH); }
     bdc:	80 91 ff 01 	lds	r24, 0x01FF
     be0:	88 23       	and	r24, r24
     be2:	09 f4       	brne	.+2      	; 0xbe6 <ModelledRadValve::computeTargetTemperature()+0x1e8>
     be4:	70 cf       	rjmp	.-288    	; 0xac6 <ModelledRadValve::computeTargetTemperature()+0xc8>
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	70 cf       	rjmp	.-288    	; 0xacc <ModelledRadValve::computeTargetTemperature()+0xce>

    // Returns true if the room appears to be likely occupied (with active users) now.
    // Operates on a timeout; calling markAsOccupied() restarts the timer.
    // Defaults to false (and API still exists) when OCCUPANCY_SUPPORT not defined.
    // Thread-safe.
    bool isLikelyOccupied() { return(0 != occupationCountdownM); }
     bec:	80 91 00 02 	lds	r24, 0x0200
    // Note that this mainly has to work in domestic settings in winter (with ~8h of daylight)
    // but should also work in artificially-lit offices (maybe ~12h continuous lighting).
    // No 'lights-on' signal for a whole day may be a fairly strong indication that the heat can be turned down! 
    const bool longLongVacant = Occupancy.longLongVacant();
    const bool longVacant = longLongVacant || Occupancy.longVacant();
    const bool notLikelyOccupiedSoon = longVacant || (Occupancy.isLikelyUnoccupied() && inOutlierQuartile(false, EE_STATS_SET_OCCPC_BY_HOUR_SMOOTHED));
     bf0:	88 23       	and	r24, r24
     bf2:	09 f0       	breq	.+2      	; 0xbf6 <ModelledRadValve::computeTargetTemperature()+0x1f8>
     bf4:	83 cf       	rjmp	.-250    	; 0xafc <ModelledRadValve::computeTargetTemperature()+0xfe>
     bf6:	79 cf       	rjmp	.-270    	; 0xaea <ModelledRadValve::computeTargetTemperature()+0xec>
      targetTempC = fnmax((uint8_t)(wt - setback), getFROSTTargetC()); // Target must never be set low enough to create a frost/freeze hazard.
#endif
      }
    // Else use WARM target as-is.
    else
      { targetTempC = wt; }
     bf8:	f7 01       	movw	r30, r14
     bfa:	d3 82       	std	Z+3, r13	; 0x03
     bfc:	cb cf       	rjmp	.-106    	; 0xb94 <ModelledRadValve::computeTargetTemperature()+0x196>

00000bfe <ModelledRadValve::computeCallForHeat()>:
// The inputs must be valid (and recent).
// Values set are targetTempC, value (TRVPercentOpen).
// This may also prepare data such as TX command sequences for the TRV, boiler, etc.
// This routine may take significant CPU time; no I/O is done, only internal state is updated.
// Returns true if valve target changed and thus messages may need to be recomputed/sent/etc.
bool ModelledRadValve::computeCallForHeat()
     bfe:	cf 93       	push	r28
     c00:	df 93       	push	r29
     c02:	ec 01       	movw	r28, r24
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
     c04:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     c06:	f8 94       	cli
    {
#ifdef SUPPORT_BAKE
    // Run down BAKE mode timer if need be, one tick per minute.
    // FIXME: move elsewhere...
    if(bakeCountdownM > 0) { --bakeCountdownM; }
     c08:	80 91 0e 02 	lds	r24, 0x020E
     c0c:	88 23       	and	r24, r24
     c0e:	19 f0       	breq	.+6      	; 0xc16 <ModelledRadValve::computeCallForHeat()+0x18>
     c10:	81 50       	subi	r24, 0x01	; 1
     c12:	80 93 0e 02 	sts	0x020E, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     c16:	9f bf       	out	0x3f, r25	; 63
#endif
    }

  computeTargetTemperature();
     c18:	ce 01       	movw	r24, r28
     c1a:	0e 94 ff 04 	call	0x9fe	; 0x9fe <ModelledRadValve::computeTargetTemperature()>
  return(computeRequiredTRVPercentOpen());
     c1e:	ce 01       	movw	r24, r28
     c20:	0e 94 95 03 	call	0x72a	; 0x72a <ModelledRadValve::computeRequiredTRVPercentOpen()>
  }
     c24:	df 91       	pop	r29
     c26:	cf 91       	pop	r28
     c28:	08 95       	ret

00000c2a <ModelledRadValve::read()>:

// Force a read/poll/recomputation of the target position and call for heat.
// Sets/clears changed flag if computed valve position changed.
// Call at a fixed rate (1/60s).
// Potentially expensive/slow.
uint8_t ModelledRadValve::read()
     c2a:	cf 93       	push	r28
     c2c:	df 93       	push	r29
     c2e:	ec 01       	movw	r28, r24
  {
  valveMoved = computeCallForHeat();
     c30:	0e 94 ff 05 	call	0xbfe	; 0xbfe <ModelledRadValve::computeCallForHeat()>
     c34:	8d 83       	std	Y+5, r24	; 0x05
  if(valveTurndownCountdownM > 0) { --valveTurndownCountdownM; }
     c36:	8f 81       	ldd	r24, Y+7	; 0x07
     c38:	88 23       	and	r24, r24
     c3a:	11 f0       	breq	.+4      	; 0xc40 <ModelledRadValve::read()+0x16>
     c3c:	81 50       	subi	r24, 0x01	; 1
     c3e:	8f 83       	std	Y+7, r24	; 0x07
  if(valveTurnupCountdownM > 0) { --valveTurnupCountdownM; }
     c40:	88 85       	ldd	r24, Y+8	; 0x08
     c42:	88 23       	and	r24, r24
     c44:	11 f0       	breq	.+4      	; 0xc4a <ModelledRadValve::read()+0x20>
     c46:	81 50       	subi	r24, 0x01	; 1
     c48:	88 87       	std	Y+8, r24	; 0x08
  return(value);
     c4a:	8a 81       	ldd	r24, Y+2	; 0x02
  }
     c4c:	df 91       	pop	r29
     c4e:	cf 91       	pop	r28
     c50:	08 95       	ret

00000c52 <ModelledRadValve::isRecalibrating() const>:
// The target valve position is not lost while this is true.
// By default there is no recalibration step.
bool ModelledRadValve::isRecalibrating() const
  {
#ifdef USE_MODULE_FHT8VSIMPLE
  if(!isSyncedWithFHT8V()) { return(true); }
     c52:	0e 94 ab 06 	call	0xd56	; 0xd56 <isSyncedWithFHT8V()>
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	88 23       	and	r24, r24
     c5a:	09 f4       	brne	.+2      	; 0xc5e <ModelledRadValve::isRecalibrating() const+0xc>
     c5c:	91 e0       	ldi	r25, 0x01	; 1
#endif
  return(false);
  }
     c5e:	89 2f       	mov	r24, r25
     c60:	08 95       	ret

00000c62 <ModelledRadValve::isControlledValveReallyOpen() const>:
// True if the controlled physical valve is thought to be at least partially open right now.
// If multiple valves are controlled then is this true only if all are at least partially open.
// Used to help avoid running boiler pump against closed valves.
// The default is to use the check the current computed position
// against the minimum open percentage.
bool ModelledRadValve::isControlledValveReallyOpen() const
     c62:	1f 93       	push	r17
     c64:	cf 93       	push	r28
     c66:	df 93       	push	r29
     c68:	ec 01       	movw	r28, r24
  {
  if(isRecalibrating()) { return(false); }
     c6a:	e8 81       	ld	r30, Y
     c6c:	f9 81       	ldd	r31, Y+1	; 0x01
     c6e:	02 88       	ldd	r0, Z+18	; 0x12
     c70:	f3 89       	ldd	r31, Z+19	; 0x13
     c72:	e0 2d       	mov	r30, r0
     c74:	09 95       	icall
     c76:	88 23       	and	r24, r24
     c78:	89 f4       	brne	.+34     	; 0xc9c <ModelledRadValve::isControlledValveReallyOpen() const+0x3a>
#ifdef USE_MODULE_FHT8VSIMPLE
  if(!FHT8VisControlledValveOpen()) { return(false); }
     c7a:	0e 94 ae 06 	call	0xd5c	; 0xd5c <FHT8VisControlledValveOpen()>
     c7e:	88 23       	and	r24, r24
     c80:	69 f0       	breq	.+26     	; 0xc9c <ModelledRadValve::isControlledValveReallyOpen() const+0x3a>
#endif
  return(value >= getMinPercentOpen());
     c82:	1a 81       	ldd	r17, Y+2	; 0x02
     c84:	e8 81       	ld	r30, Y
     c86:	f9 81       	ldd	r31, Y+1	; 0x01
     c88:	00 8c       	ldd	r0, Z+24	; 0x18
     c8a:	f1 8d       	ldd	r31, Z+25	; 0x19
     c8c:	e0 2d       	mov	r30, r0
     c8e:	ce 01       	movw	r24, r28
     c90:	09 95       	icall
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	18 17       	cp	r17, r24
     c96:	18 f0       	brcs	.+6      	; 0xc9e <ModelledRadValve::isControlledValveReallyOpen() const+0x3c>
     c98:	91 e0       	ldi	r25, 0x01	; 1
     c9a:	01 c0       	rjmp	.+2      	; 0xc9e <ModelledRadValve::isControlledValveReallyOpen() const+0x3c>
     c9c:	90 e0       	ldi	r25, 0x00	; 0
  }
     c9e:	89 2f       	mov	r24, r25
     ca0:	df 91       	pop	r29
     ca2:	cf 91       	pop	r28
     ca4:	1f 91       	pop	r17
     ca6:	08 95       	ret

00000ca8 <eeprom_smart_erase_byte(unsigned char*)>:
// If the target byte is already 0xff then this does nothing at all beyond an initial read.
// This saves a bit of time and power and possibly a little EEPROM cell wear also.
// Without split erase/write this degenerates to a specialised eeprom_update_byte().
// As with the AVR eeprom_XXX_byte() macros, not safe to use outside and within ISRs as-is.
// Returns true iff an erase was performed.
bool eeprom_smart_erase_byte(uint8_t *p)
     ca8:	9c 01       	movw	r18, r24
  eeprom_write_byte(p, 0xff); // Set to 0xff.
  return(true); // Performed an erase (and probably a write, too).
#else

  // Wait until EEPROM is idle/ready.
  eeprom_busy_wait();
     caa:	f9 99       	sbic	0x1f, 1	; 31
     cac:	fe cf       	rjmp	.-4      	; 0xcaa <eeprom_smart_erase_byte(unsigned char*)+0x2>
  //     if((uint8_t) 0xff == eeprom_read_byte(p)) { return; }
  // but leaves EEAR[L] set up appropriately for any erase or write.
#if E2END <= 0xFF
  EEARL = (uint8_t)p;
#else
  EEAR = (uint16_t)p;
     cae:	32 bd       	out	0x22, r19	; 34
     cb0:	21 bd       	out	0x21, r18	; 33
#endif
  // Ignore problems that some AVRs have with EECR and STS instructions (ATmega64 errata).
  EECR = _BV(EERE); // Start EEPROM read operation.
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	8f bb       	out	0x1f, r24	; 31
  const uint8_t oldValue = EEDR; // Get old EEPROM value.
     cb6:	80 b5       	in	r24, 0x20	; 32
  if((uint8_t) 0xff != oldValue) // Needs erase...
     cb8:	8f 3f       	cpi	r24, 0xFF	; 255
     cba:	11 f4       	brne	.+4      	; 0xcc0 <eeprom_smart_erase_byte(unsigned char*)+0x18>
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	08 95       	ret
    {
    ATOMIC_BLOCK (ATOMIC_RESTORESTATE) // Avoid timing problems from interrupts.
     cc0:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     cc2:	f8 94       	cli
      {
      // Erase to 0xff; no write needed.
      EECR = _BV(EEMPE) | _BV(EEPM0); // Set master write-enable bit and erase-only mode.
     cc4:	84 e1       	ldi	r24, 0x14	; 20
     cc6:	8f bb       	out	0x1f, r24	; 31
      EECR |= _BV(EEPE);  // Start erase-only operation.
     cc8:	f9 9a       	sbi	0x1f, 1	; 31
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     cca:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     ccc:	81 e0       	ldi	r24, 0x01	; 1
      }
    return(true); // Performed the erase.
    }
  return(false);
#endif
  }
     cce:	08 95       	ret

00000cd0 <eeprom_smart_clear_bits(unsigned char*, unsigned char)>:
// If ANDing in the mask has no effect then this does nothing at all beyond an initial read.
// This saves a bit of time and power and possibly a little EEPROM cell wear also.
// Without split erase/write this degenerates to a specialised eeprom_smart_update_byte().
// As with the AVR eeprom_XXX_byte() macros, not safe to use outside and within ISRs as-is.
// Returns true iff a write was performed.
bool eeprom_smart_clear_bits(uint8_t *p, uint8_t mask)
     cd0:	9c 01       	movw	r18, r24
  eeprom_write_byte(p, newValue); // Set to masked value.
  return(true); // Performed a write (and probably an erase, too).
#else

  // Wait until EEPROM is idle/ready.
  eeprom_busy_wait();
     cd2:	f9 99       	sbic	0x1f, 1	; 31
     cd4:	fe cf       	rjmp	.-4      	; 0xcd2 <eeprom_smart_clear_bits(unsigned char*, unsigned char)+0x2>
  //     oldValue = eeprom_read_byte(p);
  // and leaves EEAR[L] set up appropriately for any erase or write.
#if E2END <= 0xFF
  EEARL = (uint8_t)p;
#else
  EEAR = (uint16_t)p;
     cd6:	32 bd       	out	0x22, r19	; 34
     cd8:	21 bd       	out	0x21, r18	; 33
#endif
  // Ignore problems that some AVRs have with EECR and STS instructions (ATmega64 errata).
  EECR = _BV(EERE); // Start EEPROM read operation.
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	8f bb       	out	0x1f, r24	; 31
  const uint8_t oldValue = EEDR; // Get old EEPROM value.
     cde:	80 b5       	in	r24, 0x20	; 32
  const uint8_t newValue = oldValue & mask;
     ce0:	68 23       	and	r22, r24
  if(oldValue != newValue) // Write is needed...
     ce2:	86 17       	cp	r24, r22
     ce4:	11 f4       	brne	.+4      	; 0xcea <eeprom_smart_clear_bits(unsigned char*, unsigned char)+0x1a>
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	08 95       	ret
    {
    // Do the write: no erase is needed.
    EEDR = newValue; // Set EEPROM data register to required new value.
     cea:	60 bd       	out	0x20, r22	; 32
    ATOMIC_BLOCK (ATOMIC_RESTORESTATE) // Avoid timing problems from interrupts.
     cec:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     cee:	f8 94       	cli
      {
      EECR = _BV(EEMPE) | _BV(EEPM1); // Set master write-enable bit and write-only mode.
     cf0:	84 e2       	ldi	r24, 0x24	; 36
     cf2:	8f bb       	out	0x1f, r24	; 31
      EECR |= _BV(EEPE);  // Start write-only operation.
     cf4:	f9 9a       	sbi	0x1f, 1	; 31
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     cf6:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     cf8:	81 e0       	ldi	r24, 0x01	; 1
      }
    return(true); // Performed the write.
    }
  return(false);
#endif
  }
     cfa:	08 95       	ret

00000cfc <eeprom_smart_update_byte(unsigned char*, unsigned char)>:
// Updates an EEEPROM byte iff not currently at the specified target value.
// May be able to selectively erase or write (ie reduce wear) to reach the desired value.
// As with the AVR eeprom_XXX_byte() macros, not safe to use outside and within ISRs as-is.
// Returns true iff an erase and/or write was performed.
// TODO: make smarter, eg don't wait/read twice...
bool eeprom_smart_update_byte(uint8_t *p, uint8_t value)
     cfc:	78 2f       	mov	r23, r24
     cfe:	e9 2f       	mov	r30, r25
  {
  // If target byte is 0xff then attempt smart erase rather than more generic write or erase+write.
  if((uint8_t) 0xff == value) { return(eeprom_smart_erase_byte(p)); }
     d00:	6f 3f       	cpi	r22, 0xFF	; 255
     d02:	19 f4       	brne	.+6      	; 0xd0a <eeprom_smart_update_byte(unsigned char*, unsigned char)+0xe>
     d04:	0e 94 54 06 	call	0xca8	; 0xca8 <eeprom_smart_erase_byte(unsigned char*)>
     d08:	08 95       	ret
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     d0a:	f9 99       	sbic	0x1f, 1	; 31
     d0c:	fe cf       	rjmp	.-4      	; 0xd0a <eeprom_smart_update_byte(unsigned char*, unsigned char)+0xe>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     d0e:	47 2f       	mov	r20, r23
     d10:	5e 2f       	mov	r21, r30
     d12:	52 bd       	out	0x22, r21	; 34
     d14:	41 bd       	out	0x21, r20	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     d16:	f8 9a       	sbi	0x1f, 0	; 31
     d18:	80 b5       	in	r24, 0x20	; 32
  // More than an erase might be required...
  const uint8_t oldValue = eeprom_read_byte(p);
  if(value == oldValue) { return(false); } // No change needed.
     d1a:	68 17       	cp	r22, r24
     d1c:	11 f4       	brne	.+4      	; 0xd22 <eeprom_smart_update_byte(unsigned char*, unsigned char)+0x26>
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	08 95       	ret
#ifdef EEPROM_SPLIT_ERASE_WRITE // Can do selective write.
  if(value == (value & oldValue)) { return(eeprom_smart_clear_bits(p, value)); } // Can use pure write to clear bits to zero.
     d22:	26 2f       	mov	r18, r22
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	82 23       	and	r24, r18
     d2a:	93 23       	and	r25, r19
     d2c:	28 17       	cp	r18, r24
     d2e:	39 07       	cpc	r19, r25
     d30:	29 f4       	brne	.+10     	; 0xd3c <eeprom_smart_update_byte(unsigned char*, unsigned char)+0x40>
     d32:	87 2f       	mov	r24, r23
     d34:	9e 2f       	mov	r25, r30
     d36:	0e 94 68 06 	call	0xcd0	; 0xcd0 <eeprom_smart_clear_bits(unsigned char*, unsigned char)>
     d3a:	08 95       	ret
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     d3c:	f9 99       	sbic	0x1f, 1	; 31
     d3e:	fe cf       	rjmp	.-4      	; 0xd3c <eeprom_smart_update_byte(unsigned char*, unsigned char)+0x40>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
     d40:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     d42:	52 bd       	out	0x22, r21	; 34
     d44:	41 bd       	out	0x21, r20	; 33
#endif
    EEDR = __value;
     d46:	60 bd       	out	0x20, r22	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
     d48:	0f b6       	in	r0, 0x3f	; 63
     d4a:	f8 94       	cli
     d4c:	fa 9a       	sbi	0x1f, 2	; 31
     d4e:	f9 9a       	sbi	0x1f, 1	; 31
     d50:	0f be       	out	0x3f, r0	; 63
     d52:	81 e0       	ldi	r24, 0x01	; 1
#endif
  eeprom_write_byte(p, value); // Needs to set some (but not all) bits to 1, so needs erase and write.
  return(true); // Performed an update.
  }
     d54:	08 95       	ret

00000d56 <isSyncedWithFHT8V()>:
  }

// True once/while this node is synced with and controlling the target FHT8V valve; initially false.
static bool syncedWithFHT8V;
#ifndef IGNORE_FHT_SYNC
bool isSyncedWithFHT8V() { return(syncedWithFHT8V); }
     d56:	80 91 12 02 	lds	r24, 0x0212
     d5a:	08 95       	ret

00000d5c <FHT8VisControlledValveOpen()>:
#endif


// True if FHT8V valve is believed to be open under instruction from this system; false if not in sync.
static bool FHT8V_isValveOpen;
bool getFHT8V_isValveOpen() { return(syncedWithFHT8V && FHT8V_isValveOpen); }
     d5c:	80 91 12 02 	lds	r24, 0x0212
     d60:	88 23       	and	r24, r24
     d62:	21 f0       	breq	.+8      	; 0xd6c <FHT8VisControlledValveOpen()+0x10>
     d64:	80 91 15 02 	lds	r24, 0x0215
     d68:	81 11       	cpse	r24, r1
     d6a:	81 e0       	ldi	r24, 0x01	; 1


// GLOBAL NOTION OF CONTROLLED FHT8V VALVE STATE PROVIDED HERE
// True iff the FHT8V valve(s) (if any) controlled by this unit are really open.
// This waits until at least the command to open the FHT8Vhas been sent.
bool FHT8VisControlledValveOpen() { return(getFHT8V_isValveOpen()); }
     d6c:	08 95       	ret

00000d6e <FHT8VSyncAndTXReset()>:
//   FHT8V_isValveOpen (bit, true if this node has last sent command to open valve)
//   syncStateFHT8V (byte, internal)
//   halfSecondsToNextFHT8VTX (byte).
void FHT8VSyncAndTXReset()
  {
  syncedWithFHT8V = false;
     d6e:	10 92 12 02 	sts	0x0212, r1
  syncStateFHT8V = 0;
     d72:	10 92 14 02 	sts	0x0214, r1
  halfSecondsToNextFHT8VTX = 0;
     d76:	10 92 13 02 	sts	0x0213, r1
  FHT8V_isValveOpen = false;
     d7a:	10 92 15 02 	sts	0x0215, r1
  }
     d7e:	08 95       	ret

00000d80 <ensureIDCreated(bool)>:
// Coerce any ID bytes to valid values if unset (0xff) or if forced,
// by filling with valid values (0x80--0xfe) from decent entropy gathered on the fly.
// Will moan about invalid values and return false but not attempt to reset,
// eg in case underlying EEPROM cell is worn/failing.
// Returns true iff all values good.
bool ensureIDCreated(const bool force)
     d80:	af 92       	push	r10
     d82:	bf 92       	push	r11
     d84:	cf 92       	push	r12
     d86:	df 92       	push	r13
     d88:	ef 92       	push	r14
     d8a:	ff 92       	push	r15
     d8c:	0f 93       	push	r16
     d8e:	1f 93       	push	r17
     d90:	cf 93       	push	r28
     d92:	df 93       	push	r29
     d94:	a8 2e       	mov	r10, r24
     d96:	bb 24       	eor	r11, r11
     d98:	b3 94       	inc	r11
     d9a:	ee 24       	eor	r14, r14
     d9c:	ff 24       	eor	r15, r15
     d9e:	c4 e1       	ldi	r28, 0x14	; 20
     da0:	d0 e0       	ldi	r29, 0x00	; 0
     da2:	dc 2e       	mov	r13, r28
     da4:	cd 2e       	mov	r12, r29
  {
  bool allGood = true;
  for(uint8_t i = 0; i < EE_LEN_ID; ++i)
    {
    uint8_t * const loc = i + (uint8_t *)EE_START_ID;
    if(force || (0xff == eeprom_read_byte(loc))) // Byte is unset or change is being forced.
     da6:	aa 20       	and	r10, r10
     da8:	41 f4       	brne	.+16     	; 0xdba <ensureIDCreated(bool)+0x3a>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     daa:	f9 99       	sbic	0x1f, 1	; 31
     dac:	fe cf       	rjmp	.-4      	; 0xdaa <ensureIDCreated(bool)+0x2a>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     dae:	d2 bd       	out	0x22, r29	; 34
     db0:	c1 bd       	out	0x21, r28	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     db2:	f8 9a       	sbi	0x1f, 0	; 31
     db4:	80 b5       	in	r24, 0x20	; 32
     db6:	8f 3f       	cpi	r24, 0xFF	; 255
     db8:	41 f5       	brne	.+80     	; 0xe0a <ensureIDCreated(bool)+0x8a>
        {
        serialPrintAndFlush(F("Setting ID byte "));
     dba:	87 e0       	ldi	r24, 0x07	; 7
     dbc:	91 e0       	ldi	r25, 0x01	; 1
     dbe:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush(i);
     dc2:	c7 01       	movw	r24, r14
     dc4:	6a e0       	ldi	r22, 0x0A	; 10
     dc6:	70 e0       	ldi	r23, 0x00	; 0
     dc8:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <serialPrintAndFlush(int, int)>
        serialPrintAndFlush(F(" ... "));
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	91 e0       	ldi	r25, 0x01	; 1
     dd0:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <serialPrintAndFlush(__FlashStringHelper const*)>
        const uint8_t envNoise = ((i & 1) ? TemperatureC16.get() : AmbLight.get());
     dd4:	e0 fe       	sbrs	r14, 0
     dd6:	03 c0       	rjmp	.+6      	; 0xdde <ensureIDCreated(bool)+0x5e>
     dd8:	00 91 34 02 	lds	r16, 0x0234
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <ensureIDCreated(bool)+0x62>
     dde:	00 91 2e 02 	lds	r16, 0x022E
        for( ; ; )
          {
          // Try to make decently-randomised 'unique-ish' ID with mixture of sources.
          // Is not confidential, and will be transmitted in the clear.
          // System will typically not have been running long when this is invoked.
          const uint8_t newValue = 0x80 | (getSecureRandomByte() ^ envNoise);
     de2:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <getSecureRandomByte()>
     de6:	18 2f       	mov	r17, r24
     de8:	10 27       	eor	r17, r16
     dea:	10 68       	ori	r17, 0x80	; 128
          if(0xff == newValue) { continue; } // Reject unusable value.
     dec:	1f 3f       	cpi	r17, 0xFF	; 255
     dee:	c9 f3       	breq	.-14     	; 0xde2 <ensureIDCreated(bool)+0x62>
          eeprom_smart_update_byte(loc, newValue);
     df0:	8d 2d       	mov	r24, r13
     df2:	9c 2d       	mov	r25, r12
     df4:	61 2f       	mov	r22, r17
     df6:	0e 94 7e 06 	call	0xcfc	; 0xcfc <eeprom_smart_update_byte(unsigned char*, unsigned char)>
          serialPrintAndFlush(newValue, HEX);
     dfa:	81 2f       	mov	r24, r17
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	60 e1       	ldi	r22, 0x10	; 16
     e00:	70 e0       	ldi	r23, 0x00	; 0
     e02:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <serialPrintAndFlush(int, int)>
          break;
          }
        serialPrintlnAndFlush();
     e06:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <serialPrintlnAndFlush()>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     e0a:	f9 99       	sbic	0x1f, 1	; 31
     e0c:	fe cf       	rjmp	.-4      	; 0xe0a <ensureIDCreated(bool)+0x8a>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     e0e:	d2 bd       	out	0x22, r29	; 34
     e10:	c1 bd       	out	0x21, r28	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     e12:	f8 9a       	sbi	0x1f, 0	; 31
     e14:	10 b5       	in	r17, 0x20	; 32
        }
    // Validate.
    const uint8_t v2 = eeprom_read_byte(loc);
    if(!validIDByte(v2))
     e16:	81 2f       	mov	r24, r17
     e18:	80 58       	subi	r24, 0x80	; 128
     e1a:	8f 37       	cpi	r24, 0x7F	; 127
     e1c:	b0 f0       	brcs	.+44     	; 0xe4a <ensureIDCreated(bool)+0xca>
        {
        allGood = false;
        serialPrintAndFlush(F("Invalid ID byte "));
     e1e:	80 ef       	ldi	r24, 0xF0	; 240
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush(i);
     e26:	c7 01       	movw	r24, r14
     e28:	6a e0       	ldi	r22, 0x0A	; 10
     e2a:	70 e0       	ldi	r23, 0x00	; 0
     e2c:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <serialPrintAndFlush(int, int)>
        serialPrintAndFlush(F(" ... "));
     e30:	8a ee       	ldi	r24, 0xEA	; 234
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush(v2, HEX);
     e38:	81 2f       	mov	r24, r17
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	60 e1       	ldi	r22, 0x10	; 16
     e3e:	70 e0       	ldi	r23, 0x00	; 0
     e40:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <serialPrintAndFlush(int, int)>
        serialPrintlnAndFlush();
     e44:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <serialPrintlnAndFlush()>
     e48:	bb 24       	eor	r11, r11
     e4a:	08 94       	sec
     e4c:	e1 1c       	adc	r14, r1
     e4e:	f1 1c       	adc	r15, r1
     e50:	21 96       	adiw	r28, 0x01	; 1
// eg in case underlying EEPROM cell is worn/failing.
// Returns true iff all values good.
bool ensureIDCreated(const bool force)
  {
  bool allGood = true;
  for(uint8_t i = 0; i < EE_LEN_ID; ++i)
     e52:	88 e0       	ldi	r24, 0x08	; 8
     e54:	e8 16       	cp	r14, r24
     e56:	f1 04       	cpc	r15, r1
     e58:	09 f0       	breq	.+2      	; 0xe5c <ensureIDCreated(bool)+0xdc>
     e5a:	a3 cf       	rjmp	.-186    	; 0xda2 <ensureIDCreated(bool)+0x22>
        serialPrintAndFlush(v2, HEX);
        serialPrintlnAndFlush();
        }
     }
  return(allGood);
  }
     e5c:	8b 2d       	mov	r24, r11
     e5e:	df 91       	pop	r29
     e60:	cf 91       	pop	r28
     e62:	1f 91       	pop	r17
     e64:	0f 91       	pop	r16
     e66:	ff 90       	pop	r15
     e68:	ef 90       	pop	r14
     e6a:	df 90       	pop	r13
     e6c:	cf 90       	pop	r12
     e6e:	bf 90       	pop	r11
     e70:	af 90       	pop	r10
     e72:	08 95       	ret

00000e74 <SupplyVoltageMilliVolts::get() const>:
    virtual uint16_t read();

    // Return last value fetched by read(); undefined before first read()).
    // Fast.
    // NOT thread-safe nor usable within ISRs (Interrupt Service Routines).
    virtual uint16_t get() const { return(mV); }
     e74:	fc 01       	movw	r30, r24
     e76:	84 81       	ldd	r24, Z+4	; 0x04
     e78:	95 81       	ldd	r25, Z+5	; 0x05
     e7a:	08 95       	ret

00000e7c <SupplyVoltageMilliVolts::tag() const>:

    // Returns a suggested (JSON) tag/field/key name including units of get(); NULL means no recommended tag.
    // The lifetime of the pointed-to text must be at least that of the Sensor instance.
    virtual const char *tag() const { return("B|mV"); }
     e7c:	87 e1       	ldi	r24, 0x17	; 23
     e7e:	91 e0       	ldi	r25, 0x01	; 1
     e80:	08 95       	ret

00000e82 <__vector_9>:
  timer2XtalIntSetup();
#endif
  }

#ifdef WAKEUP_32768HZ_XTAL
ISR(TIMER2_OVF_vect)
     e82:	1f 92       	push	r1
     e84:	0f 92       	push	r0
     e86:	0f b6       	in	r0, 0x3f	; 63
     e88:	0f 92       	push	r0
     e8a:	11 24       	eor	r1, r1
     e8c:	2f 93       	push	r18
     e8e:	8f 93       	push	r24
     e90:	9f 93       	push	r25
// must not enable interrupts, and must leave interrupt state as was on entry.
// If not being called from an ISR then locking round this call that works with the getXXX() functions should be considered.
static inline void tickSecondISR()
#endif
  {
  register uint_fast8_t sTemp = _secondsLT; // Avoid some redundant memory accesses.
     e92:	80 91 24 02 	lds	r24, 0x0224
  sTemp += MAIN_TICK_S;
     e96:	8e 5f       	subi	r24, 0xFE	; 254
  if(sTemp > 59)
     e98:	8c 33       	cpi	r24, 0x3C	; 60
     e9a:	c8 f0       	brcs	.+50     	; 0xece <__vector_9+0x4c>
    {
    sTemp = 0; // Seconds roll.
    register uint_least16_t mTemp = _minutesSinceMidnightLT + 1; // Avoid some redundant memory accesses.
     e9c:	80 91 25 02 	lds	r24, 0x0225
     ea0:	90 91 26 02 	lds	r25, 0x0226
     ea4:	01 96       	adiw	r24, 0x01	; 1
    if(mTemp > 1439)
     ea6:	25 e0       	ldi	r18, 0x05	; 5
     ea8:	80 3a       	cpi	r24, 0xA0	; 160
     eaa:	92 07       	cpc	r25, r18
     eac:	58 f0       	brcs	.+22     	; 0xec4 <__vector_9+0x42>
      {
      mTemp = 0; // Minutes/hours roll.
      // Increment the day.
      ++_daysSince1999LT; // Don't currently prevent roll.
     eae:	80 91 27 02 	lds	r24, 0x0227
     eb2:	90 91 28 02 	lds	r25, 0x0228
     eb6:	01 96       	adiw	r24, 0x01	; 1
     eb8:	90 93 28 02 	sts	0x0228, r25
     ebc:	80 93 27 02 	sts	0x0227, r24
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	90 e0       	ldi	r25, 0x00	; 0
      }
    _minutesSinceMidnightLT = mTemp;
     ec4:	90 93 26 02 	sts	0x0226, r25
     ec8:	80 93 25 02 	sts	0x0225, r24
     ecc:	80 e0       	ldi	r24, 0x00	; 0
    }
  _secondsLT = sTemp;
     ece:	80 93 24 02 	sts	0x0224, r24
#if defined(TWO_S_TICK_RTC_SUPPORT)
  tickDoubleSecondISR();
#else
  tickSecondISR();
#endif
  }
     ed2:	9f 91       	pop	r25
     ed4:	8f 91       	pop	r24
     ed6:	2f 91       	pop	r18
     ed8:	0f 90       	pop	r0
     eda:	0f be       	out	0x3f, r0	; 63
     edc:	0f 90       	pop	r0
     ede:	1f 90       	pop	r1
     ee0:	18 95       	reti

00000ee2 <__vector_6>:
// May contain a little entropy concentrated in the least-significant bits, in part from WDT-vs-CPU-clock jitter, especially if not sleeping.
static volatile uint8_t _watchdogFired;

// Catch watchdog timer interrupt to automatically clear WDIE and WDIF.
// This allows use of watchdog for low-power timed sleep.
ISR(WDT_vect)
     ee2:	1f 92       	push	r1
     ee4:	0f 92       	push	r0
     ee6:	0f b6       	in	r0, 0x3f	; 63
     ee8:	0f 92       	push	r0
     eea:	11 24       	eor	r1, r1
     eec:	8f 93       	push	r24
     eee:	9f 93       	push	r25
     ef0:	df 93       	push	r29
     ef2:	cf 93       	push	r28
     ef4:	0f 92       	push	r0
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62
  {
  // WDIE and WDIF are cleared in hardware upon entering this ISR.
  wdt_disable();
     efa:	88 e1       	ldi	r24, 0x18	; 24
     efc:	0f b6       	in	r0, 0x3f	; 63
     efe:	f8 94       	cli
     f00:	80 93 60 00 	sts	0x0060, r24
     f04:	10 92 60 00 	sts	0x0060, r1
     f08:	0f be       	out	0x3f, r0	; 63
  // Note: be careful of what is accessed from this ISR.
  // Capture some marginal entropy from the stack position.
  // 
  uint8_t x;
  _watchdogFired = ((uint8_t) 0x80) | ((uint8_t) (int) &x); // Ensure non-zero, retaining any entropy in ls bits.
     f0a:	ce 01       	movw	r24, r28
     f0c:	01 96       	adiw	r24, 0x01	; 1
     f0e:	80 68       	ori	r24, 0x80	; 128
     f10:	80 93 1d 02 	sts	0x021D, r24
  }
     f14:	0f 90       	pop	r0
     f16:	cf 91       	pop	r28
     f18:	df 91       	pop	r29
     f1a:	9f 91       	pop	r25
     f1c:	8f 91       	pop	r24
     f1e:	0f 90       	pop	r0
     f20:	0f be       	out	0x3f, r0	; 63
     f22:	0f 90       	pop	r0
     f24:	1f 90       	pop	r1
     f26:	18 95       	reti

00000f28 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>:
// Note: inlining is prevented so as to avoid migrating anything into the section where the CPU is running slowly.
//
// Note: may be dubious to run CPU clock less than 4x 32768Hz crystal speed,
// eg at 31250Hz for 8MHz RC clock and max prescale.
// Don't access timer 2 regs at low CPU speed, eg in ISRs.
__attribute__ ((noinline)) void sleepLowPowerLoopsMinCPUSpeed(uint16_t loops)
     f28:	fc 01       	movw	r30, r24
  {
  const clock_div_t prescale = clock_prescale_get(); // Capture current prescale value.
     f2a:	80 91 61 00 	lds	r24, 0x0061
  clock_prescale_set(MAX_CPU_PRESCALE); // Reduce clock speed (increase prescale) as far as possible.
     f2e:	28 e0       	ldi	r18, 0x08	; 8
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	40 e8       	ldi	r20, 0x80	; 128
     f34:	0f b6       	in	r0, 0x3f	; 63
     f36:	f8 94       	cli
     f38:	40 93 61 00 	sts	0x0061, r20
     f3c:	20 93 61 00 	sts	0x0061, r18
     f40:	0f be       	out	0x3f, r0	; 63
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     f42:	31 97       	sbiw	r30, 0x01	; 1
     f44:	f1 f7       	brne	.-4      	; 0xf42 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)+0x1a>
  _delay_loop_2(loops); // Burn cycles...
  clock_prescale_set(prescale); // Restore clock prescale.
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	8f 70       	andi	r24, 0x0F	; 15
     f4a:	90 70       	andi	r25, 0x00	; 0
     f4c:	20 e8       	ldi	r18, 0x80	; 128
     f4e:	0f b6       	in	r0, 0x3f	; 63
     f50:	f8 94       	cli
     f52:	20 93 61 00 	sts	0x0061, r18
     f56:	80 93 61 00 	sts	0x0061, r24
     f5a:	0f be       	out	0x3f, r0	; 63
  }
     f5c:	08 95       	ret

00000f5e <sleepPwrSaveWithBODDisabled()>:
#endif

// Sleep with BOD disabled in power-save mode; will wake on any interrupt.
void sleepPwrSaveWithBODDisabled()
  {
  set_sleep_mode(SLEEP_MODE_PWR_SAVE); // Stop all but timer 2 and watchdog when sleeping.
     f5e:	83 b7       	in	r24, 0x33	; 51
     f60:	81 7f       	andi	r24, 0xF1	; 241
     f62:	86 60       	ori	r24, 0x06	; 6
     f64:	83 bf       	out	0x33, r24	; 51
  cli();
     f66:	f8 94       	cli
  sleep_enable();
     f68:	83 b7       	in	r24, 0x33	; 51
     f6a:	81 60       	ori	r24, 0x01	; 1
     f6c:	83 bf       	out	0x33, r24	; 51
  sleep_bod_disable();
     f6e:	85 b7       	in	r24, 0x35	; 53
     f70:	80 66       	ori	r24, 0x60	; 96
     f72:	85 bf       	out	0x35, r24	; 53
     f74:	8f 7d       	andi	r24, 0xDF	; 223
     f76:	85 bf       	out	0x35, r24	; 53
  sei();
     f78:	78 94       	sei
  sleep_cpu();
     f7a:	88 95       	sleep
  sleep_disable();
     f7c:	83 b7       	in	r24, 0x33	; 51
     f7e:	8e 7f       	andi	r24, 0xFE	; 254
     f80:	83 bf       	out	0x33, r24	; 51
  sei();
     f82:	78 94       	sei
  }
     f84:	08 95       	ret

00000f86 <nap(signed char)>:
//   * watchdogSleep is one of the WDTO_XX values from <avr/wdt.h>
// May be useful to call minimsePowerWithoutSleep() first, when not needing any modules left on.
void nap(int_fast8_t watchdogSleep)
  {
  // Watchdog should (already) be disabled on entry.
  _watchdogFired = 0;
     f86:	10 92 1d 02 	sts	0x021D, r1

  wdt_enable(watchdogSleep);
     f8a:	83 fd       	sbrc	r24, 3
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <nap(signed char)+0xc>
     f8e:	28 e0       	ldi	r18, 0x08	; 8
     f90:	01 c0       	rjmp	.+2      	; 0xf94 <nap(signed char)+0xe>
     f92:	28 e2       	ldi	r18, 0x28	; 40
     f94:	87 70       	andi	r24, 0x07	; 7
     f96:	28 2b       	or	r18, r24
     f98:	88 e1       	ldi	r24, 0x18	; 24
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	0f b6       	in	r0, 0x3f	; 63
     f9e:	f8 94       	cli
     fa0:	a8 95       	wdr
     fa2:	80 93 60 00 	sts	0x0060, r24
     fa6:	0f be       	out	0x3f, r0	; 63
     fa8:	20 93 60 00 	sts	0x0060, r18
  WDTCSR |= (1 << WDIE);
     fac:	80 91 60 00 	lds	r24, 0x0060
     fb0:	80 64       	ori	r24, 0x40	; 64
     fb2:	80 93 60 00 	sts	0x0060, r24
#endif

// Sleep with BOD disabled in power-save mode; will wake on any interrupt.
void sleepPwrSaveWithBODDisabled()
  {
  set_sleep_mode(SLEEP_MODE_PWR_SAVE); // Stop all but timer 2 and watchdog when sleeping.
     fb6:	83 b7       	in	r24, 0x33	; 51
     fb8:	81 7f       	andi	r24, 0xF1	; 241
     fba:	86 60       	ori	r24, 0x06	; 6
     fbc:	83 bf       	out	0x33, r24	; 51
  cli();
     fbe:	f8 94       	cli
  sleep_enable();
     fc0:	83 b7       	in	r24, 0x33	; 51
     fc2:	81 60       	ori	r24, 0x01	; 1
     fc4:	83 bf       	out	0x33, r24	; 51
  sleep_bod_disable();
     fc6:	85 b7       	in	r24, 0x35	; 53
     fc8:	80 66       	ori	r24, 0x60	; 96
     fca:	85 bf       	out	0x35, r24	; 53
     fcc:	8f 7d       	andi	r24, 0xDF	; 223
     fce:	85 bf       	out	0x35, r24	; 53
  sei();
     fd0:	78 94       	sei
  sleep_cpu();
     fd2:	88 95       	sleep
  sleep_disable();
     fd4:	83 b7       	in	r24, 0x33	; 51
     fd6:	8e 7f       	andi	r24, 0xFE	; 254
     fd8:	83 bf       	out	0x33, r24	; 51
  sei();
     fda:	78 94       	sei

  // Keep sleeping until watchdog actually fires.
  for( ; ; )
    {
    sleepPwrSaveWithBODDisabled();
    if(0 != _watchdogFired)
     fdc:	80 91 1d 02 	lds	r24, 0x021D
     fe0:	88 23       	and	r24, r24
     fe2:	49 f3       	breq	.-46     	; 0xfb6 <nap(signed char)+0x30>
      {
      wdt_disable(); // Avoid spurious wakeup later.
     fe4:	88 e1       	ldi	r24, 0x18	; 24
     fe6:	0f b6       	in	r0, 0x3f	; 63
     fe8:	f8 94       	cli
     fea:	80 93 60 00 	sts	0x0060, r24
     fee:	10 92 60 00 	sts	0x0060, r1
     ff2:	0f be       	out	0x3f, r0	; 63
      return; // All done!
      }
    }
 }
     ff4:	08 95       	ret

00000ff6 <idleCPU(signed char)>:
// Should reduce power consumption vs spinning the CPU >> 3x, though not nearly as much as nap().
// True iff watchdog timer expired; false if something else woke the CPU.
bool idleCPU(const int_fast8_t watchdogSleep)
  {
  // Watchdog should (already) be disabled on entry.
  _watchdogFired = 0;
     ff6:	10 92 1d 02 	sts	0x021D, r1
  wdt_enable(watchdogSleep);
     ffa:	83 fd       	sbrc	r24, 3
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <idleCPU(signed char)+0xc>
     ffe:	28 e0       	ldi	r18, 0x08	; 8
    1000:	01 c0       	rjmp	.+2      	; 0x1004 <idleCPU(signed char)+0xe>
    1002:	28 e2       	ldi	r18, 0x28	; 40
    1004:	87 70       	andi	r24, 0x07	; 7
    1006:	28 2b       	or	r18, r24
    1008:	88 e1       	ldi	r24, 0x18	; 24
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	0f b6       	in	r0, 0x3f	; 63
    100e:	f8 94       	cli
    1010:	a8 95       	wdr
    1012:	80 93 60 00 	sts	0x0060, r24
    1016:	0f be       	out	0x3f, r0	; 63
    1018:	20 93 60 00 	sts	0x0060, r18
  WDTCSR |= (1 << WDIE);
    101c:	80 91 60 00 	lds	r24, 0x0060
    1020:	80 64       	ori	r24, 0x40	; 64
    1022:	80 93 60 00 	sts	0x0060, r24
  set_sleep_mode(SLEEP_MODE_IDLE); // Leave everything running but the CPU...
    1026:	83 b7       	in	r24, 0x33	; 51
    1028:	81 7f       	andi	r24, 0xF1	; 241
    102a:	83 bf       	out	0x33, r24	; 51
  sleep_mode();
    102c:	83 b7       	in	r24, 0x33	; 51
    102e:	81 60       	ori	r24, 0x01	; 1
    1030:	83 bf       	out	0x33, r24	; 51
    1032:	88 95       	sleep
    1034:	83 b7       	in	r24, 0x33	; 51
    1036:	8e 7f       	andi	r24, 0xFE	; 254
    1038:	83 bf       	out	0x33, r24	; 51
  //sleep_disable();
  wdt_disable();
    103a:	88 e1       	ldi	r24, 0x18	; 24
    103c:	0f b6       	in	r0, 0x3f	; 63
    103e:	f8 94       	cli
    1040:	80 93 60 00 	sts	0x0060, r24
    1044:	10 92 60 00 	sts	0x0060, r1
    1048:	0f be       	out	0x3f, r0	; 63
  return(0 != _watchdogFired);
    104a:	80 91 1d 02 	lds	r24, 0x021D
    104e:	81 11       	cpse	r24, r1
    1050:	81 e0       	ldi	r24, 0x01	; 1
  }
    1052:	08 95       	ret

00001054 <__vector_21>:
  }


// Allow wake from (lower-power) sleep while ADC is running.
static volatile bool ADC_complete;
ISR(ADC_vect) { ADC_complete = true; }
    1054:	1f 92       	push	r1
    1056:	0f 92       	push	r0
    1058:	0f b6       	in	r0, 0x3f	; 63
    105a:	0f 92       	push	r0
    105c:	11 24       	eor	r1, r1
    105e:	8f 93       	push	r24
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	80 93 1f 02 	sts	0x021F, r24
    1066:	8f 91       	pop	r24
    1068:	0f 90       	pop	r0
    106a:	0f be       	out	0x3f, r0	; 63
    106c:	0f 90       	pop	r0
    106e:	1f 90       	pop	r1
    1070:	18 95       	reti

00001072 <_analogueNoiseReducedReadM(unsigned char, signed char)>:

// Read ADC/analogue input with reduced noise if possible, in range [0,1023].
//   * admux  is the value to set ADMUX to
//   * samples  maximum number of samples to take (if one, nap() before); strictly positive
// Sets sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
static uint16_t _analogueNoiseReducedReadM(uint8_t admux, int8_t samples = 3)
    1072:	0f 93       	push	r16
    1074:	1f 93       	push	r17
    1076:	98 2f       	mov	r25, r24
    1078:	16 2f       	mov	r17, r22
// If ADC was disabled, power it up, do Serial.begin(), and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownSerial() may be advisable.
bool powerUpADCIfDisabled()
  {
  if(!(PRR & _BV(PRADC))) { return(false); }
    107a:	80 91 64 00 	lds	r24, 0x0064
    107e:	80 fd       	sbrc	r24, 0
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x14>
    1082:	00 e0       	ldi	r16, 0x00	; 0
    1084:	0b c0       	rjmp	.+22     	; 0x109c <_analogueNoiseReducedReadM(unsigned char, signed char)+0x2a>
  PRR &= ~_BV(PRADC); // Enable the ADC.
    1086:	80 91 64 00 	lds	r24, 0x0064
    108a:	8e 7f       	andi	r24, 0xFE	; 254
    108c:	80 93 64 00 	sts	0x0064, r24
  ADCSRA |= _BV(ADEN);
    1090:	80 91 7a 00 	lds	r24, 0x007A
    1094:	80 68       	ori	r24, 0x80	; 128
    1096:	80 93 7a 00 	sts	0x007A, r24
    109a:	01 e0       	ldi	r16, 0x01	; 1
//   * samples  maximum number of samples to take (if one, nap() before); strictly positive
// Sets sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
static uint16_t _analogueNoiseReducedReadM(uint8_t admux, int8_t samples = 3)
  {
  const bool neededEnable = powerUpADCIfDisabled();
  ADMUX = admux;
    109c:	90 93 7c 00 	sts	0x007C, r25
  if(samples < 2) { nap(WDTO_15MS); } // Allow plenty of time for things to settle if not taking multiple samples.
    10a0:	12 30       	cpi	r17, 0x02	; 2
    10a2:	1c f4       	brge	.+6      	; 0x10aa <_analogueNoiseReducedReadM(unsigned char, signed char)+0x38>
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	0e 94 c3 07 	call	0xf86	; 0xf86 <nap(signed char)>
  set_sleep_mode(SLEEP_MODE_ADC);
    10aa:	83 b7       	in	r24, 0x33	; 51
    10ac:	81 7f       	andi	r24, 0xF1	; 241
    10ae:	82 60       	ori	r24, 0x02	; 2
    10b0:	83 bf       	out	0x33, r24	; 51
  ADCSRB = 0; // Enable free-running mode.
    10b2:	10 92 7b 00 	sts	0x007B, r1
  bitWrite(ADCSRA, ADATE, (samples>1)); // Enable ADC auto-trigger iff wanting multiple samples.
    10b6:	12 30       	cpi	r17, 0x02	; 2
    10b8:	24 f0       	brlt	.+8      	; 0x10c2 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x50>
    10ba:	80 91 7a 00 	lds	r24, 0x007A
    10be:	80 62       	ori	r24, 0x20	; 32
    10c0:	03 c0       	rjmp	.+6      	; 0x10c8 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x56>
    10c2:	80 91 7a 00 	lds	r24, 0x007A
    10c6:	8f 7d       	andi	r24, 0xDF	; 223
    10c8:	80 93 7a 00 	sts	0x007A, r24
  bitSet(ADCSRA, ADIE); // Turn on ADC interrupt.
    10cc:	80 91 7a 00 	lds	r24, 0x007A
    10d0:	88 60       	ori	r24, 0x08	; 8
    10d2:	80 93 7a 00 	sts	0x007A, r24
  bitSet(ADCSRA, ADSC); // Start conversion(s).
    10d6:	80 91 7a 00 	lds	r24, 0x007A
    10da:	80 64       	ori	r24, 0x40	; 64
    10dc:	80 93 7a 00 	sts	0x007A, r24
    10e0:	4f ef       	ldi	r20, 0xFF	; 255
    10e2:	9f ef       	ldi	r25, 0xFF	; 255
    10e4:	21 c0       	rjmp	.+66     	; 0x1128 <_analogueNoiseReducedReadM(unsigned char, signed char)+0xb6>
  uint8_t oldADCL = 0xff;
  uint8_t oldADCH = 0xff; // Ensure that a second sample will get taken if multiple samples have been requested.
  // Usually take several readings to improve accuracy.  Discard all but the last...
  while(--samples >= 0)
      {
      ADC_complete = false;
    10e6:	10 92 1f 02 	sts	0x021F, r1
    10ea:	07 c0       	rjmp	.+14     	; 0x10fa <_analogueNoiseReducedReadM(unsigned char, signed char)+0x88>
      while(!ADC_complete) { sleep_mode(); }
    10ec:	83 b7       	in	r24, 0x33	; 51
    10ee:	81 60       	ori	r24, 0x01	; 1
    10f0:	83 bf       	out	0x33, r24	; 51
    10f2:	88 95       	sleep
    10f4:	83 b7       	in	r24, 0x33	; 51
    10f6:	8e 7f       	andi	r24, 0xFE	; 254
    10f8:	83 bf       	out	0x33, r24	; 51
    10fa:	80 91 1f 02 	lds	r24, 0x021F
    10fe:	88 23       	and	r24, r24
    1100:	a9 f3       	breq	.-22     	; 0x10ec <_analogueNoiseReducedReadM(unsigned char, signed char)+0x7a>
      const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
    1102:	30 91 78 00 	lds	r19, 0x0078
      const uint8_t h = ADCH; // Capture the high byte.
    1106:	20 91 79 00 	lds	r18, 0x0079
      if((h == oldADCH) && (l == oldADCL)) { break; } // Stop now if result seems to have settled.
    110a:	29 17       	cp	r18, r25
    110c:	11 f4       	brne	.+4      	; 0x1112 <_analogueNoiseReducedReadM(unsigned char, signed char)+0xa0>
    110e:	34 17       	cp	r19, r20
    1110:	71 f0       	breq	.+28     	; 0x112e <_analogueNoiseReducedReadM(unsigned char, signed char)+0xbc>
      oldADCL = l;
      oldADCH = h;
      _adcNoise = (_adcNoise >> 1) + (l ^ h) + (__TIME__[7] & 0xf); // Capture a little entropy.
    1112:	90 91 1e 02 	lds	r25, 0x021E
    1116:	82 2f       	mov	r24, r18
    1118:	83 27       	eor	r24, r19
    111a:	88 5f       	subi	r24, 0xF8	; 248
    111c:	96 95       	lsr	r25
    111e:	98 0f       	add	r25, r24
    1120:	90 93 1e 02 	sts	0x021E, r25
    1124:	92 2f       	mov	r25, r18
    1126:	43 2f       	mov	r20, r19
  bitSet(ADCSRA, ADIE); // Turn on ADC interrupt.
  bitSet(ADCSRA, ADSC); // Start conversion(s).
  uint8_t oldADCL = 0xff;
  uint8_t oldADCH = 0xff; // Ensure that a second sample will get taken if multiple samples have been requested.
  // Usually take several readings to improve accuracy.  Discard all but the last...
  while(--samples >= 0)
    1128:	11 50       	subi	r17, 0x01	; 1
    112a:	17 ff       	sbrs	r17, 7
    112c:	dc cf       	rjmp	.-72     	; 0x10e6 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x74>
      if((h == oldADCH) && (l == oldADCL)) { break; } // Stop now if result seems to have settled.
      oldADCL = l;
      oldADCH = h;
      _adcNoise = (_adcNoise >> 1) + (l ^ h) + (__TIME__[7] & 0xf); // Capture a little entropy.
      }
  bitClear(ADCSRA, ADIE); // Turn off ADC interrupt.
    112e:	80 91 7a 00 	lds	r24, 0x007A
    1132:	87 7f       	andi	r24, 0xF7	; 247
    1134:	80 93 7a 00 	sts	0x007A, r24
  bitClear(ADCSRA, ADATE); // Turn off ADC auto-trigger.
    1138:	80 91 7a 00 	lds	r24, 0x007A
    113c:	8f 7d       	andi	r24, 0xDF	; 223
    113e:	80 93 7a 00 	sts	0x007A, r24
  //sleep_disable();
  const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
    1142:	20 91 78 00 	lds	r18, 0x0078
  const uint8_t h = ADCH; // Capture the high byte.
    1146:	40 91 79 00 	lds	r20, 0x0079
  if(neededEnable) { powerDownADC(); }
    114a:	00 23       	and	r16, r16
    114c:	51 f0       	breq	.+20     	; 0x1162 <_analogueNoiseReducedReadM(unsigned char, signed char)+0xf0>
  }
    
// Power ADC down.
void powerDownADC()
  {
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
    114e:	80 91 7a 00 	lds	r24, 0x007A
    1152:	8f 77       	andi	r24, 0x7F	; 127
    1154:	80 93 7a 00 	sts	0x007A, r24
  PRR |= _BV(PRADC); // Disable the ADC.
    1158:	80 91 64 00 	lds	r24, 0x0064
    115c:	81 60       	ori	r24, 0x01	; 1
    115e:	80 93 64 00 	sts	0x0064, r24
    1162:	94 2f       	mov	r25, r20
    1164:	80 e0       	ldi	r24, 0x00	; 0
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	28 2b       	or	r18, r24
    116a:	39 2b       	or	r19, r25
  //sleep_disable();
  const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
  const uint8_t h = ADCH; // Capture the high byte.
  if(neededEnable) { powerDownADC(); }
  return((h << 8) | l);
  }
    116c:	c9 01       	movw	r24, r18
    116e:	1f 91       	pop	r17
    1170:	0f 91       	pop	r16
    1172:	08 95       	ret

00001174 <analogueNoiseReducedRead(int, unsigned char)>:
// Read ADC/analogue input with reduced noise if possible, in range [0,1023].
//   * mode  is the analogue reference, eg DEFAULT (Vcc).
// May set sleep mode to SLEEP_MODE_ADC, and disable sleep on exit.
// Nominally equivalent to analogReference(mode); return(analogRead(pinNumber));
uint16_t analogueNoiseReducedRead(int pinNumber, uint8_t mode)
  { return(_analogueNoiseReducedReadM((mode << 6) | (pinNumber & 7))); }
    1174:	62 95       	swap	r22
    1176:	66 0f       	add	r22, r22
    1178:	66 0f       	add	r22, r22
    117a:	60 7c       	andi	r22, 0xC0	; 192
    117c:	87 70       	andi	r24, 0x07	; 7
    117e:	86 2b       	or	r24, r22
    1180:	63 e0       	ldi	r22, 0x03	; 3
    1182:	0e 94 39 08 	call	0x1072	; 0x1072 <_analogueNoiseReducedReadM(unsigned char, signed char)>
    1186:	08 95       	ret

00001188 <SupplyVoltageMilliVolts::read()>:


// Force a read/poll of the supply voltage and return the value sensed.
// Expensive/slow.
// NOT thread-safe nor usable within ISRs (Interrupt Service Routines).
uint16_t SupplyVoltageMilliVolts::read()
    1188:	cf 93       	push	r28
    118a:	df 93       	push	r29
    118c:	ec 01       	movw	r28, r24




// Measure internal bandgap (1.1V nominal, 1.0--1.2V) as fraction of Vcc [0,1023].
static uint16_t read1V1wrtBattery() { return(_analogueNoiseReducedReadM(_BV(REFS0) | 14)); }
    118e:	8e e4       	ldi	r24, 0x4E	; 78
    1190:	63 e0       	ldi	r22, 0x03	; 3
    1192:	0e 94 39 08 	call	0x1072	; 0x1072 <_analogueNoiseReducedReadM(unsigned char, signed char)>
    1196:	9c 01       	movw	r18, r24
  {
  // Measure internal bandgap (1.1V nominal, 1.0--1.2V) as fraction of Vcc.
  const uint16_t raw = read1V1wrtBattery();
  // If Vcc was 1.1V ADC would give 1023.
  // If Vcc was 2.2V ADC would give 511.
  const uint16_t result = ((1023U<<6) / raw) * (1100U>>6);
    1198:	80 ec       	ldi	r24, 0xC0	; 192
    119a:	9f ef       	ldi	r25, 0xFF	; 255
    119c:	b9 01       	movw	r22, r18
    119e:	0e 94 4b 1a 	call	0x3496	; 0x3496 <__udivmodhi4>
    11a2:	ab 01       	movw	r20, r22
    11a4:	84 e0       	ldi	r24, 0x04	; 4
    11a6:	44 0f       	add	r20, r20
    11a8:	55 1f       	adc	r21, r21
    11aa:	8a 95       	dec	r24
    11ac:	e1 f7       	brne	.-8      	; 0x11a6 <SupplyVoltageMilliVolts::read()+0x1e>
    11ae:	46 0f       	add	r20, r22
    11b0:	57 1f       	adc	r21, r23
  rawInv = raw;
    11b2:	3b 83       	std	Y+3, r19	; 0x03
    11b4:	2a 83       	std	Y+2, r18	; 0x02
  mV = result;
    11b6:	5d 83       	std	Y+5, r21	; 0x05
    11b8:	4c 83       	std	Y+4, r20	; 0x04
  isLow = (result < BATTERY_LOW_MV);
    11ba:	1e 82       	std	Y+6, r1	; 0x06
    11bc:	87 e0       	ldi	r24, 0x07	; 7
    11be:	40 3d       	cpi	r20, 0xD0	; 208
    11c0:	58 07       	cpc	r21, r24
    11c2:	10 f4       	brcc	.+4      	; 0x11c8 <SupplyVoltageMilliVolts::read()+0x40>
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	8e 83       	std	Y+6, r24	; 0x06
  DEBUG_SERIAL_PRINT(raw);
  if(batteryLow) { DEBUG_SERIAL_PRINT_FLASHSTRING(" LOW"); }
  DEBUG_SERIAL_PRINTLN();
#endif
  return(result);
  }
    11c8:	ca 01       	movw	r24, r20
    11ca:	df 91       	pop	r29
    11cc:	cf 91       	pop	r28
    11ce:	08 95       	ret

000011d0 <noisyADCRead()>:
// If ADC was disabled, power it up, do Serial.begin(), and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownSerial() may be advisable.
bool powerUpADCIfDisabled()
  {
  if(!(PRR & _BV(PRADC))) { return(false); }
    11d0:	80 91 64 00 	lds	r24, 0x0064
    11d4:	80 fd       	sbrc	r24, 0
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <noisyADCRead()+0xc>
    11d8:	40 e0       	ldi	r20, 0x00	; 0
    11da:	0b c0       	rjmp	.+22     	; 0x11f2 <noisyADCRead()+0x22>
  PRR &= ~_BV(PRADC); // Enable the ADC.
    11dc:	80 91 64 00 	lds	r24, 0x0064
    11e0:	8e 7f       	andi	r24, 0xFE	; 254
    11e2:	80 93 64 00 	sts	0x0064, r24
  ADCSRA |= _BV(ADEN);
    11e6:	80 91 7a 00 	lds	r24, 0x007A
    11ea:	80 68       	ori	r24, 0x80	; 128
    11ec:	80 93 7a 00 	sts	0x007A, r24
    11f0:	41 e0       	ldi	r20, 0x01	; 1
// If defined, update _adcNoise value to make noisyADCRead() output at least a poor PRNG if called in a loop, though might disguise underlying problems.
//#define CATCH_OTHER_NOISE_DURING_NAR // May hide underlying weakness if defined.
uint8_t noisyADCRead()
  {
  const bool neededEnable = powerUpADCIfDisabled();
  ADMUX = _BV(REFS0) | 14; // Bandgap vs Vcc.
    11f2:	8e e4       	ldi	r24, 0x4E	; 78
    11f4:	80 93 7c 00 	sts	0x007C, r24
  ADCSRB = 0; // Enable free-running mode.
    11f8:	10 92 7b 00 	sts	0x007B, r1
  bitWrite(ADCSRA, ADATE, 1); // Multiple samples required.
    11fc:	80 91 7a 00 	lds	r24, 0x007A
    1200:	80 62       	ori	r24, 0x20	; 32
    1202:	80 93 7a 00 	sts	0x007A, r24
  ADC_complete = false;
    1206:	10 92 1f 02 	sts	0x021F, r1
  bitSet(ADCSRA, ADIE); // Turn on ADC interrupt.
    120a:	80 91 7a 00 	lds	r24, 0x007A
    120e:	88 60       	ori	r24, 0x08	; 8
    1210:	80 93 7a 00 	sts	0x007A, r24
  bitSet(ADCSRA, ADSC); // Start conversion.
    1214:	80 91 7a 00 	lds	r24, 0x007A
    1218:	80 64       	ori	r24, 0x40	; 64
    121a:	80 93 7a 00 	sts	0x007A, r24
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	01 c0       	rjmp	.+2      	; 0x1224 <noisyADCRead()+0x54>
  uint8_t count = 0;
  while(!ADC_complete) { ++count; } // Busy wait while 'timing' the ADC conversion.
    1222:	9f 5f       	subi	r25, 0xFF	; 255
    1224:	80 91 1f 02 	lds	r24, 0x021F
    1228:	88 23       	and	r24, r24
    122a:	d9 f3       	breq	.-10     	; 0x1222 <noisyADCRead()+0x52>
  const uint8_t l1 = ADCL; // Capture the low byte and latch the high byte.
    122c:	50 91 78 00 	lds	r21, 0x0078
  const uint8_t h1 = ADCH; // Capture the high byte.
    1230:	20 91 79 00 	lds	r18, 0x0079
#if defined(CATCH_OTHER_NOISE_DURING_NAR)
  uint8_t result = _crc_ibutton_update(_adcNoise++, h1 ^ count);
#else
  uint8_t result = (h1 << 5) + count;
    1234:	22 95       	swap	r18
    1236:	22 0f       	add	r18, r18
    1238:	20 7e       	andi	r18, 0xE0	; 224
    123a:	29 0f       	add	r18, r25
#endif
  set_sleep_mode(SLEEP_MODE_ADC); // Take further samples in more energy-efficient mode.
    123c:	83 b7       	in	r24, 0x33	; 51
    123e:	81 7f       	andi	r24, 0xF1	; 241
    1240:	82 60       	ori	r24, 0x02	; 2
    1242:	83 bf       	out	0x33, r24	; 51
    1244:	30 e0       	ldi	r19, 0x00	; 0
  // Sample all possible ADC inputs relative to Vcc, whatever the inputs may be connected to.
  // Assumed never to do any harm, eg physical damage or to disturb I/O setup.
  for(uint8_t i = 0; i < 8; ++i)
    {
    ADMUX = (i & 7) | (DEFAULT << 6); // Switching MUX after sample has started, which may add further noise.
    1246:	83 2f       	mov	r24, r19
    1248:	87 70       	andi	r24, 0x07	; 7
    124a:	80 64       	ori	r24, 0x40	; 64
    124c:	80 93 7c 00 	sts	0x007C, r24
    ADC_complete = false;
    1250:	10 92 1f 02 	sts	0x021F, r1
    1254:	07 c0       	rjmp	.+14     	; 0x1264 <noisyADCRead()+0x94>
    while(!ADC_complete)
      {
#if defined(CATCH_OTHER_NOISE_DURING_NAR)       
      result -= 37; /* prime; may capture unrelated interrupt wakeups... */
#endif
      sleep_mode();
    1256:	83 b7       	in	r24, 0x33	; 51
    1258:	81 60       	ori	r24, 0x01	; 1
    125a:	83 bf       	out	0x33, r24	; 51
    125c:	88 95       	sleep
    125e:	83 b7       	in	r24, 0x33	; 51
    1260:	8e 7f       	andi	r24, 0xFE	; 254
    1262:	83 bf       	out	0x33, r24	; 51
  // Assumed never to do any harm, eg physical damage or to disturb I/O setup.
  for(uint8_t i = 0; i < 8; ++i)
    {
    ADMUX = (i & 7) | (DEFAULT << 6); // Switching MUX after sample has started, which may add further noise.
    ADC_complete = false;
    while(!ADC_complete)
    1264:	80 91 1f 02 	lds	r24, 0x021F
    1268:	88 23       	and	r24, r24
    126a:	a9 f3       	breq	.-22     	; 0x1256 <noisyADCRead()+0x86>
#if defined(CATCH_OTHER_NOISE_DURING_NAR)       
      result -= 37; /* prime; may capture unrelated interrupt wakeups... */
#endif
      sleep_mode();
      }
    const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
    126c:	90 91 78 00 	lds	r25, 0x0078
    const uint8_t h = ADCH; // Capture the high byte.
    1270:	80 91 79 00 	lds	r24, 0x0079
		"	brtc	2f" "\n\t"
		"	eor	%0, %2" "\n\t"
		"2:	dec	%1" "\n\t"
		"	brne	1b" "\n\t"
		: "=r" (__crc), "=d" (__i), "=d" (__pattern)
		: "0" (__crc), "r" (__data));
    1274:	89 27       	eor	r24, r25
    1276:	28 27       	eor	r18, r24
    1278:	88 e0       	ldi	r24, 0x08	; 8
    127a:	9c e8       	ldi	r25, 0x8C	; 140
    127c:	20 fb       	bst	r18, 0
    127e:	26 95       	lsr	r18
    1280:	0e f4       	brtc	.+2      	; 0x1284 <noisyADCRead()+0xb4>
    1282:	29 27       	eor	r18, r25
    1284:	8a 95       	dec	r24
    1286:	d1 f7       	brne	.-12     	; 0x127c <noisyADCRead()+0xac>
  uint8_t result = (h1 << 5) + count;
#endif
  set_sleep_mode(SLEEP_MODE_ADC); // Take further samples in more energy-efficient mode.
  // Sample all possible ADC inputs relative to Vcc, whatever the inputs may be connected to.
  // Assumed never to do any harm, eg physical damage or to disturb I/O setup.
  for(uint8_t i = 0; i < 8; ++i)
    1288:	3f 5f       	subi	r19, 0xFF	; 255
    128a:	38 30       	cpi	r19, 0x08	; 8
    128c:	e1 f6       	brne	.-72     	; 0x1246 <noisyADCRead()+0x76>
      }
    const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
    const uint8_t h = ADCH; // Capture the high byte.
    result = _crc_ibutton_update(result, l ^ h); // A thorough hash.
    }
  bitClear(ADCSRA, ADIE); // Turn off ADC interrupt.
    128e:	80 91 7a 00 	lds	r24, 0x007A
    1292:	87 7f       	andi	r24, 0xF7	; 247
    1294:	80 93 7a 00 	sts	0x007A, r24
  bitClear(ADCSRA, ADATE); // Turn off ADC auto-trigger.
    1298:	80 91 7a 00 	lds	r24, 0x007A
    129c:	8f 7d       	andi	r24, 0xDF	; 223
    129e:	80 93 7a 00 	sts	0x007A, r24
  if(neededEnable) { powerDownADC(); }
    12a2:	44 23       	and	r20, r20
    12a4:	51 f0       	breq	.+20     	; 0x12ba <noisyADCRead()+0xea>
  }
    
// Power ADC down.
void powerDownADC()
  {
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
    12a6:	80 91 7a 00 	lds	r24, 0x007A
    12aa:	8f 77       	andi	r24, 0x7F	; 127
    12ac:	80 93 7a 00 	sts	0x007A, r24
  PRR |= _BV(PRADC); // Disable the ADC.
    12b0:	80 91 64 00 	lds	r24, 0x0064
    12b4:	81 60       	ori	r24, 0x01	; 1
    12b6:	80 93 64 00 	sts	0x0064, r24
  bitClear(ADCSRA, ADIE); // Turn off ADC interrupt.
  bitClear(ADCSRA, ADATE); // Turn off ADC auto-trigger.
  if(neededEnable) { powerDownADC(); }
  result ^= l1; // Ensure that the actual Vcc raw lsbs do get folded in to the final result.
  return(result); // Use all the bits collected.
  }
    12ba:	82 2f       	mov	r24, r18
    12bc:	85 27       	eor	r24, r21
    12be:	08 95       	ret

000012c0 <powerDownTWI()>:
  }

// Power down TWI (I2C).
void powerDownTWI()
  {
  TWCR &= ~_BV(TWEN); // Disable TWI.
    12c0:	ec eb       	ldi	r30, 0xBC	; 188
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	8b 7f       	andi	r24, 0xFB	; 251
    12c8:	80 83       	st	Z, r24
  PRR |= _BV(PRTWI); // Disable TWI power.
    12ca:	e4 e6       	ldi	r30, 0x64	; 100
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	80 68       	ori	r24, 0x80	; 128
    12d2:	80 83       	st	Z, r24
  //digitalWrite(SCL, 0);

  // Convert to hi-Z inputs.
  //pinMode(SDA, INPUT);
  //pinMode(SCL, INPUT);
  }
    12d4:	08 95       	ret

000012d6 <clockJitterEntropyByte()>:
// Expensive in terms of CPU time and thus energy, though possibly more efficient than basic clockJitterXXX() routines.
// Internally this uses a CRC as a relatively fast and hopefully effective hash over intermediate values.
// Note the that rejection of repeat values will be less effective with two interleaved gathering mechanisms
// as the interaction while not necessarily adding genuine entropy, will make counts differ between runs.
// DHD20130519: measured as taking ~63ms to run, ie ~8ms per bit gathered.
uint_fast8_t clockJitterEntropyByte()
    12d6:	1f 93       	push	r17

  uint_fast8_t result = 0;
  uint_fast8_t countR = 0, lastCountR = 0;
  uint_fast8_t countW = 0, lastCountW = 0;

  const uint8_t t0 = TCNT2; // Wait for sub-cycle timer to roll.
    12d8:	90 91 b2 00 	lds	r25, 0x00B2
    12dc:	40 e0       	ldi	r20, 0x00	; 0
    12de:	50 e0       	ldi	r21, 0x00	; 0
    12e0:	02 c0       	rjmp	.+4      	; 0x12e6 <clockJitterEntropyByte()+0x10>
  while(t0 == TCNT2) { ++hash; } // Possibly capture some entropy from recent program activity/timing.
    12e2:	4f 5f       	subi	r20, 0xFF	; 255
    12e4:	5f 4f       	sbci	r21, 0xFF	; 255
    12e6:	80 91 b2 00 	lds	r24, 0x00B2
    12ea:	98 17       	cp	r25, r24
    12ec:	d1 f3       	breq	.-12     	; 0x12e2 <clockJitterEntropyByte()+0xc>
  uint8_t t1 = TCNT2;
    12ee:	f0 91 b2 00 	lds	r31, 0x00B2

  _watchdogFired = 0;
    12f2:	10 92 1d 02 	sts	0x021D, r1
  wdt_enable(WDTO_15MS); // Start watchdog, with minimum timeout.
    12f6:	88 e0       	ldi	r24, 0x08	; 8
    12f8:	28 e1       	ldi	r18, 0x18	; 24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	0f b6       	in	r0, 0x3f	; 63
    12fe:	f8 94       	cli
    1300:	a8 95       	wdr
    1302:	20 93 60 00 	sts	0x0060, r18
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	80 93 60 00 	sts	0x0060, r24
  WDTCSR |= (1 << WDIE);
    130c:	80 91 60 00 	lds	r24, 0x0060
    1310:	80 64       	ori	r24, 0x40	; 64
    1312:	80 93 60 00 	sts	0x0060, r24
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	60 e0       	ldi	r22, 0x00	; 0
    131a:	e0 e0       	ldi	r30, 0x00	; 0
    131c:	20 e0       	ldi	r18, 0x00	; 0
    131e:	70 e0       	ldi	r23, 0x00	; 0
    1320:	38 e0       	ldi	r19, 0x08	; 8
        if(--bitsLeft <= 0) { break; } // Got enough bits; stop now.
        lastCountW = countW;
        }
      countW = 0;
      _watchdogFired = 0;
      wdt_enable(WDTO_15MS); // Restart watchdog, with minimum timeout.
    1322:	a8 e1       	ldi	r26, 0x18	; 24
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	18 e0       	ldi	r17, 0x08	; 8
  WDTCSR |= (1 << WDIE);
  int_fast8_t bitsLeft = 8; // Decrement when a bit is harvested...
  for( ; ; )
    {
    // Extract watchdog jitter vs CPU.
    if(!_watchdogFired) { ++countW; }
    1328:	80 91 1d 02 	lds	r24, 0x021D
    132c:	88 23       	and	r24, r24
    132e:	11 f4       	brne	.+4      	; 0x1334 <clockJitterEntropyByte()+0x5e>
    1330:	2f 5f       	subi	r18, 0xFF	; 255
    1332:	2a c0       	rjmp	.+84     	; 0x1388 <clockJitterEntropyByte()+0xb2>
    else // Watchdog fired.
      {
      if(countW != lastCountW) // Got a different value from last; assume one bit of entropy.
    1334:	27 17       	cp	r18, r23
    1336:	c1 f0       	breq	.+48     	; 0x1368 <clockJitterEntropyByte()+0x92>
        "eor    %A0,__tmp_reg__"

        : "=d" (__ret)
        : "r" (__data), "0" (__crc)
        : "r0"
    );
    1338:	42 27       	eor	r20, r18
    133a:	04 2e       	mov	r0, r20
    133c:	42 95       	swap	r20
    133e:	40 7f       	andi	r20, 0xF0	; 240
    1340:	40 25       	eor	r20, r0
    1342:	05 2e       	mov	r0, r21
    1344:	54 2f       	mov	r21, r20
    1346:	42 95       	swap	r20
    1348:	4f 70       	andi	r20, 0x0F	; 15
    134a:	04 26       	eor	r0, r20
    134c:	46 95       	lsr	r20
    134e:	54 27       	eor	r21, r20
    1350:	45 27       	eor	r20, r21
    1352:	44 0f       	add	r20, r20
    1354:	44 0f       	add	r20, r20
    1356:	44 0f       	add	r20, r20
    1358:	40 25       	eor	r20, r0
        {
        hash = _crc_ccitt_update(hash, countW);
        result = (result << 1) ^ ((uint_fast8_t)hash); // Nominally capturing (at least) lsb of hash.
    135a:	99 0f       	add	r25, r25
    135c:	94 27       	eor	r25, r20
        if(--bitsLeft <= 0) { break; } // Got enough bits; stop now.
    135e:	31 50       	subi	r19, 0x01	; 1
    1360:	13 16       	cp	r1, r19
    1362:	0c f0       	brlt	.+2      	; 0x1366 <clockJitterEntropyByte()+0x90>
    1364:	34 c0       	rjmp	.+104    	; 0x13ce <clockJitterEntropyByte()+0xf8>
    1366:	72 2f       	mov	r23, r18
        lastCountW = countW;
        }
      countW = 0;
      _watchdogFired = 0;
    1368:	10 92 1d 02 	sts	0x021D, r1
      wdt_enable(WDTO_15MS); // Restart watchdog, with minimum timeout.
    136c:	0f b6       	in	r0, 0x3f	; 63
    136e:	f8 94       	cli
    1370:	a8 95       	wdr
    1372:	a0 93 60 00 	sts	0x0060, r26
    1376:	0f be       	out	0x3f, r0	; 63
    1378:	10 93 60 00 	sts	0x0060, r17
      WDTCSR |= (1 << WDIE);
    137c:	80 91 60 00 	lds	r24, 0x0060
    1380:	80 64       	ori	r24, 0x40	; 64
    1382:	80 93 60 00 	sts	0x0060, r24
    1386:	20 e0       	ldi	r18, 0x00	; 0
      }

    // Extract RTC jitter vs CPU.
    if(t1 == TCNT2) { --countR; }
    1388:	80 91 b2 00 	lds	r24, 0x00B2
    138c:	f8 17       	cp	r31, r24
    138e:	11 f4       	brne	.+4      	; 0x1394 <clockJitterEntropyByte()+0xbe>
    1390:	61 50       	subi	r22, 0x01	; 1
    1392:	ca cf       	rjmp	.-108    	; 0x1328 <clockJitterEntropyByte()+0x52>
    else // Sub-cycle timer rolled.
      {
      if(countR != lastCountR) // Got a different value from last; assume one bit of entropy.
    1394:	6e 17       	cp	r22, r30
    1396:	b9 f0       	breq	.+46     	; 0x13c6 <clockJitterEntropyByte()+0xf0>
    1398:	46 27       	eor	r20, r22
    139a:	04 2e       	mov	r0, r20
    139c:	42 95       	swap	r20
    139e:	40 7f       	andi	r20, 0xF0	; 240
    13a0:	40 25       	eor	r20, r0
    13a2:	05 2e       	mov	r0, r21
    13a4:	54 2f       	mov	r21, r20
    13a6:	42 95       	swap	r20
    13a8:	4f 70       	andi	r20, 0x0F	; 15
    13aa:	04 26       	eor	r0, r20
    13ac:	46 95       	lsr	r20
    13ae:	54 27       	eor	r21, r20
    13b0:	45 27       	eor	r20, r21
    13b2:	44 0f       	add	r20, r20
    13b4:	44 0f       	add	r20, r20
    13b6:	44 0f       	add	r20, r20
    13b8:	40 25       	eor	r20, r0
        {
        hash = _crc_ccitt_update(hash, countR);
        result = (result << 1) ^ ((uint_fast8_t)hash); // Nominally capturing (at least) lsb of hash.
    13ba:	99 0f       	add	r25, r25
    13bc:	94 27       	eor	r25, r20
        if(--bitsLeft <= 0) { break; } // Got enough bits; stop now.
    13be:	31 50       	subi	r19, 0x01	; 1
    13c0:	13 16       	cp	r1, r19
    13c2:	2c f4       	brge	.+10     	; 0x13ce <clockJitterEntropyByte()+0xf8>
    13c4:	e6 2f       	mov	r30, r22
        lastCountR = countR;
        }
      countR = 0;
      t1 = TCNT2; // Set to look for next roll.
    13c6:	f0 91 b2 00 	lds	r31, 0x00B2
    13ca:	60 e0       	ldi	r22, 0x00	; 0
    13cc:	ad cf       	rjmp	.-166    	; 0x1328 <clockJitterEntropyByte()+0x52>
      }
    }

  wdt_disable(); // Ensure no spurious WDT wakeup pending.
    13ce:	88 e1       	ldi	r24, 0x18	; 24
    13d0:	0f b6       	in	r0, 0x3f	; 63
    13d2:	f8 94       	cli
    13d4:	80 93 60 00 	sts	0x0060, r24
    13d8:	10 92 60 00 	sts	0x0060, r1
    13dc:	0f be       	out	0x3f, r0	; 63
  return(result);
  }
    13de:	89 2f       	mov	r24, r25
    13e0:	1f 91       	pop	r17
    13e2:	08 95       	ret

000013e4 <Sensor<unsigned int>::isValid(unsigned int) const>:
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual T get() const = 0;

    // Returns true if this sensor reading value passed is potentially valid, eg in-range.
    // Default is to always return true, ie all values potentially valid.
    virtual bool isValid(T value) const { return(true); }
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	08 95       	ret

000013e8 <Sensor<unsigned int>::preferredPollInterval_s() const>:
 
    // Returns non-zero if this implementation requires a regular call to read() to operate correctly.
    // Preferred poll interval (in seconds) or 0 if no regular poll() call required.
    // Default returns 0 indicating regular call to read() not required,
    // only as required to fetch new values from the underlying sensor.
    virtual uint8_t preferredPollInterval_s() const { return(0); }
    13e8:	80 e0       	ldi	r24, 0x00	; 0
    13ea:	08 95       	ret

000013ec <Sensor<unsigned int>::handleInterruptSimple()>:
    // Must be fast and ISR (Interrupt Service Routine) safe.
    // Returns true if interrupt was successfully handled and cleared
    // else another interrupt handler in the chain may be called
    // to attempt to clear the interrupt.
    // By default does nothing (and returns false).
    virtual bool handleInterruptSimple() { return(false); }
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	08 95       	ret

000013f0 <Sensor<unsigned int>::begin()>:

    // Begin access to this sensor if applicable and not already begun.
    // Returns true if it needed to be begun.
    // Allows logic to end() if required at the end of a block, etc.
    // Defaults to do nothing (and return false).
    virtual bool begin() { return(false); }
    13f0:	80 e0       	ldi	r24, 0x00	; 0
    13f2:	08 95       	ret

000013f4 <Sensor<unsigned int>::isAvailable() const>:

    // Returns true if this sensor is currently available.
    // True by default unless implementation overrides.
    // For those sensors that need starting this will be false before begin().
    virtual bool isAvailable() const { return(true); }
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	08 95       	ret

000013f8 <Sensor<unsigned int>::end()>:

    // End access to this sensor if applicable and not already ended.
    // Returns true if it needed to be ended.
    // Defaults to do nothing (and return false).
    virtual bool end() { return(false); }
    13f8:	80 e0       	ldi	r24, 0x00	; 0
    13fa:	08 95       	ret

000013fc <global constructors keyed to _Z25minimisePowerWithoutSleepv>:
    // True if last-measured voltage was low.
    bool isLow;
 
  public:
    // Initialise to cautious values.
    SupplyVoltageMilliVolts() : mV(0), isLow(true) { }
    13fc:	89 e6       	ldi	r24, 0x69	; 105
    13fe:	91 e0       	ldi	r25, 0x01	; 1
    1400:	90 93 17 02 	sts	0x0217, r25
    1404:	80 93 16 02 	sts	0x0216, r24
    1408:	10 92 1b 02 	sts	0x021B, r1
    140c:	10 92 1a 02 	sts	0x021A, r1
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	80 93 1c 02 	sts	0x021C, r24
    1416:	08 95       	ret

00001418 <captureEntropy1()>:
// Capture a little system entropy.
// This call should typically take << 1ms at 1MHz CPU.
// Does not change CPU clock speeds, mess with interrupts (other than possible brief blocking), or do I/O, or sleep.
// Should inject some noise into secure (TBD) and non-secure (RNG8) PRNGs.
void captureEntropy1()
  { seedRNG8(getSubCycleTime() ^ _adcNoise, cycleCountCPU() ^ Supply_mV.get(), _watchdogFired); }
    1418:	20 91 b2 00 	lds	r18, 0x00B2
    141c:	80 91 1e 02 	lds	r24, 0x021E
    1420:	66 b5       	in	r22, 0x26	; 38
    1422:	40 91 1d 02 	lds	r20, 0x021D
    1426:	90 91 1a 02 	lds	r25, 0x021A
    142a:	69 27       	eor	r22, r25
    142c:	82 27       	eor	r24, r18
    142e:	0e 94 26 0b 	call	0x164c	; 0x164c <seedRNG8(unsigned char, unsigned char, unsigned char)>
    1432:	08 95       	ret

00001434 <powerDownSPI()>:
  }

// Power down SPI.
void powerDownSPI()
  {
  SPCR &= ~_BV(SPE); // Disable SPI.
    1434:	8c b5       	in	r24, 0x2c	; 44
    1436:	8f 7b       	andi	r24, 0xBF	; 191
    1438:	8c bd       	out	0x2c, r24	; 44
  PRR |= _BV(PRSPI); // Power down...
    143a:	e4 e6       	ldi	r30, 0x64	; 100
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	84 60       	ori	r24, 0x04	; 4
    1442:	80 83       	st	Z, r24

  pinMode(PIN_SPI_nSS, OUTPUT); // Ensure that nSS is an output to avoid forcing SPI to slave mode by accident.
    1444:	8a e0       	ldi	r24, 0x0A	; 10
    1446:	61 e0       	ldi	r22, 0x01	; 1
    1448:	0e 94 39 15 	call	0x2a72	; 0x2a72 <pinMode>
  fastDigitalWrite(PIN_SPI_nSS, HIGH); // Ensure that nSS is HIGH and thus any slave deselected when powering up SPI.
    144c:	2a 9a       	sbi	0x05, 2	; 5

  // Avoid pins from floating when SPI is disabled.
  // Try to preserve general I/O direction and restore previous output values for outputs.
  pinMode(PIN_SPI_SCK, OUTPUT);
    144e:	8d e0       	ldi	r24, 0x0D	; 13
    1450:	61 e0       	ldi	r22, 0x01	; 1
    1452:	0e 94 39 15 	call	0x2a72	; 0x2a72 <pinMode>
  pinMode(PIN_SPI_MOSI, OUTPUT);
    1456:	8b e0       	ldi	r24, 0x0B	; 11
    1458:	61 e0       	ldi	r22, 0x01	; 1
    145a:	0e 94 39 15 	call	0x2a72	; 0x2a72 <pinMode>
  pinMode(PIN_SPI_MISO, INPUT_PULLUP);
    145e:	8c e0       	ldi	r24, 0x0C	; 12
    1460:	62 e0       	ldi	r22, 0x02	; 2
    1462:	0e 94 39 15 	call	0x2a72	; 0x2a72 <pinMode>

  // If sharing SPI SCK with LED indicator then return this pin to being an output (retaining previous value).
  //if(LED_HEATCALL == PIN_SPI_SCK) { pinMode(LED_HEATCALL, OUTPUT); }
  }
    1466:	08 95       	ret

00001468 <powerUpSPIIfDisabled()>:
// If SPI was disabled, power it up, enable it as master and with a sensible clock speed, etc, and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownSPI() may be advisable.
bool powerUpSPIIfDisabled()
  {
  if(!(PRR & _BV(PRSPI))) { return(false); }
    1468:	80 91 64 00 	lds	r24, 0x0064
    146c:	82 fd       	sbrc	r24, 2
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <powerUpSPIIfDisabled()+0xc>
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	08 95       	ret

  pinMode(PIN_SPI_nSS, OUTPUT); // Ensure that nSS is an output to avoid forcing SPI to slave mode by accident.
    1474:	8a e0       	ldi	r24, 0x0A	; 10
    1476:	61 e0       	ldi	r22, 0x01	; 1
    1478:	0e 94 39 15 	call	0x2a72	; 0x2a72 <pinMode>
  fastDigitalWrite(PIN_SPI_nSS, HIGH); // Ensure that nSS is HIGH and thus any slave deselected when powering up SPI.
    147c:	2a 9a       	sbi	0x05, 2	; 5

  PRR &= ~_BV(PRSPI); // Enable SPI power.
    147e:	80 91 64 00 	lds	r24, 0x0064
    1482:	8b 7f       	andi	r24, 0xFB	; 251
    1484:	80 93 64 00 	sts	0x0064, r24
  // Configure raw SPI to match better how it was used in PICAXE V0.09 code.
  // CPOL = 0, CPHA = 0
  // Enable SPI, set master mode, set speed.
  const uint8_t ENABLE_MASTER =  _BV(SPE) | _BV(MSTR);
#if F_CPU <= 2000000 // Needs minimum prescale (x2) with slow (<=2MHz) CPU clock.
  SPCR = ENABLE_MASTER; // 2x clock prescale for <=1MHz SPI clock from <=2MHz CPU clock (500kHz SPI @ 1MHz CPU).
    1488:	80 e5       	ldi	r24, 0x50	; 80
    148a:	8c bd       	out	0x2c, r24	; 44
  SPSR = _BV(SPI2X);
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	8d bd       	out	0x2d, r24	; 45
#else // Needs setting for fast (~16MHz) CPU clock.
  SPCR = _BV(SPR0) | ENABLE_MASTER; // 8x clock prescale for ~2MHz SPI clock from nominal ~16MHz CPU clock.
  SPSR = _BV(SPI2X);
#endif
  return(true);
  }
    1490:	08 95       	ret

00001492 <power_intermittent_peripherals_disable()>:
// Disable/remove power to intermittent peripherals.
// Switches the digital line to input with no pull-up (ie high-Z).
// There should be some sort of load to stop this floating.
void power_intermittent_peripherals_disable()
  {
  pinMode(IO_POWER_UP, INPUT);
    1492:	87 e0       	ldi	r24, 0x07	; 7
    1494:	60 e0       	ldi	r22, 0x00	; 0
    1496:	0e 94 39 15 	call	0x2a72	; 0x2a72 <pinMode>
  }
    149a:	08 95       	ret

0000149c <minimisePowerWithoutSleep()>:
// to ensure that nothing power-hungry is accidentally left on.
// Any module that may need to run all the time should not be turned off here.
// May be called from panic(), so do not be too clever.
// Does NOT attempt to power down the radio, eg in case that needs to be left in RX mode.
// Does NOT attempt to power down the UART/serial.
void minimisePowerWithoutSleep()
    149c:	0f 93       	push	r16
    149e:	1f 93       	push	r17
  {
  // Disable the watchdog timer.
  wdt_disable();
    14a0:	88 e1       	ldi	r24, 0x18	; 24
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	f8 94       	cli
    14a6:	80 93 60 00 	sts	0x0060, r24
    14aa:	10 92 60 00 	sts	0x0060, r1
    14ae:	0f be       	out	0x3f, r0	; 63
  
  // Ensure that external peripherals are powered down.
  power_intermittent_peripherals_disable();
    14b0:	0e 94 49 0a 	call	0x1492	; 0x1492 <power_intermittent_peripherals_disable()>

  // Turn off analogue stuff that eats power.
  ADCSRA = 0; // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
    14b4:	10 92 7a 00 	sts	0x007A, r1
  ACSR = (1<<ACD); // Disable the analog comparator.
    14b8:	80 e8       	ldi	r24, 0x80	; 128
    14ba:	80 bf       	out	0x30, r24	; 48
  DIDR0 = 0x3F; // Disable digital input buffers on all ADC0-ADC5 pins.
    14bc:	8f e3       	ldi	r24, 0x3F	; 63
    14be:	80 93 7e 00 	sts	0x007E, r24
  DIDR1 = (1<<AIN1D)|(1<<AIN0D); // Disable digital input buffer on AIN1/0.
    14c2:	83 e0       	ldi	r24, 0x03	; 3
    14c4:	80 93 7f 00 	sts	0x007F, r24
  power_adc_disable();
    14c8:	04 e6       	ldi	r16, 0x64	; 100
    14ca:	10 e0       	ldi	r17, 0x00	; 0
    14cc:	f8 01       	movw	r30, r16
    14ce:	80 81       	ld	r24, Z
    14d0:	81 60       	ori	r24, 0x01	; 1
    14d2:	80 83       	st	Z, r24

  // Ensure that SPI is powered down.
  powerDownSPI();
    14d4:	0e 94 1a 0a 	call	0x1434	; 0x1434 <powerDownSPI()>
  }

// Power down TWI (I2C).
void powerDownTWI()
  {
  TWCR &= ~_BV(TWEN); // Disable TWI.
    14d8:	ec eb       	ldi	r30, 0xBC	; 188
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	8b 7f       	andi	r24, 0xFB	; 251
    14e0:	80 83       	st	Z, r24
  PRR |= _BV(PRTWI); // Disable TWI power.
    14e2:	f8 01       	movw	r30, r16
    14e4:	80 81       	ld	r24, Z
    14e6:	80 68       	ori	r24, 0x80	; 128
    14e8:	80 83       	st	Z, r24

#if defined(DONT_USE_TIMER0)
  power_timer0_disable();
#endif

  power_timer1_disable();
    14ea:	80 81       	ld	r24, Z
    14ec:	88 60       	ori	r24, 0x08	; 8
    14ee:	80 83       	st	Z, r24

#ifndef WAKEUP_32768HZ_XTAL
  power_timer2_disable();
#endif
  }
    14f0:	1f 91       	pop	r17
    14f2:	0f 91       	pop	r16
    14f4:	08 95       	ret

000014f6 <power_intermittent_peripherals_enable(bool)>:
// items powered direct from IO_POWER_UP may need no such wait.
//
// Switches the digital line to high then output (to avoid ever *discharging* the output cap).
// Note that with 100nF cap, and 330R (or lower) resistor from the output pin,
// then 1ms delay should be plenty for the voltage on the cap to settle.
void power_intermittent_peripherals_enable(bool waitUntilStable)
    14f6:	1f 93       	push	r17
    14f8:	18 2f       	mov	r17, r24
  {
  fastDigitalWrite(IO_POWER_UP, HIGH);
    14fa:	5f 9a       	sbi	0x0b, 7	; 11
  pinMode(IO_POWER_UP, OUTPUT);
    14fc:	87 e0       	ldi	r24, 0x07	; 7
    14fe:	61 e0       	ldi	r22, 0x01	; 1
    1500:	0e 94 39 15 	call	0x2a72	; 0x2a72 <pinMode>
  // If requested, wait long enough that I/O peripheral power should be stable.
  // Wait in a relatively low-power way...
  if(waitUntilStable) { sleepLowPowerMs(1); }
    1504:	11 23       	and	r17, r17
    1506:	21 f0       	breq	.+8      	; 0x1510 <power_intermittent_peripherals_enable(bool)+0x1a>
// This may be achieved in part by dynamically slowing the CPU clock if possible.
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed((((MIN_CPU_HZ * (ms)) + 2000) / 4000) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    1508:	86 e0       	ldi	r24, 0x06	; 6
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	0e 94 94 07 	call	0xf28	; 0xf28 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
  }
    1510:	1f 91       	pop	r17
    1512:	08 95       	ret

00001514 <powerUpTWIIfDisabled()>:
// If TWI (I2C) was disabled, power it up, do Wire.begin(), and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownRWI() may be advisable.
bool powerUpTWIIfDisabled()
  {
  if(!(PRR & _BV(PRTWI))) { return(false); }
    1514:	80 91 64 00 	lds	r24, 0x0064
    1518:	87 fd       	sbrc	r24, 7
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <powerUpTWIIfDisabled()+0xc>
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	08 95       	ret

  PRR &= ~_BV(PRTWI); // Enable TWI power.
    1520:	80 91 64 00 	lds	r24, 0x0064
    1524:	8f 77       	andi	r24, 0x7F	; 127
    1526:	80 93 64 00 	sts	0x0064, r24
  TWCR |= _BV(TWEN); // Enable TWI.
    152a:	80 91 bc 00 	lds	r24, 0x00BC
    152e:	84 60       	ori	r24, 0x04	; 4
    1530:	80 93 bc 00 	sts	0x00BC, r24
  Wire.begin(); // Set it going.
    1534:	8e e9       	ldi	r24, 0x9E	; 158
    1536:	92 e0       	ldi	r25, 0x02	; 2
    1538:	0e 94 c6 12 	call	0x258c	; 0x258c <TwoWire::begin()>
  // TODO: reset TWBR and prescaler for our low CPU frequency     (TWBR = ((F_CPU / TWI_FREQ) - 16) / 2 gives -3!)
#if F_CPU <= 1000000
  TWBR = 0; // Implies SCL freq of F_CPU / (16 + 2 * TBWR * PRESC) = 62.5kHz @ F_CPU==1MHz and PRESC==1 (from Wire/TWI code).
    153c:	10 92 b8 00 	sts	0x00B8, r1
    1540:	81 e0       	ldi	r24, 0x01	; 1
#endif
  return(true);
  }
    1542:	08 95       	ret

00001544 <powerDownSerial()>:
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
  PRR |= _BV(PRADC); // Disable the ADC.
  }

// Check if serial is (already) powered up.
static bool _serialIsPoweredUp() { return(!(PRR & _BV(PRUSART0))); }
    1544:	80 91 64 00 	lds	r24, 0x0064


// Flush any pending serial output and power it down if up.
void powerDownSerial()
  {
  if(_serialIsPoweredUp())
    1548:	81 fd       	sbrc	r24, 1
    154a:	08 c0       	rjmp	.+16     	; 0x155c <powerDownSerial()+0x18>
    {
    // Flush serial output and shut down if apparently active.
    Serial.flush();
    154c:	80 ea       	ldi	r24, 0xA0	; 160
    154e:	93 e0       	ldi	r25, 0x03	; 3
    1550:	0e 94 94 17 	call	0x2f28	; 0x2f28 <HardwareSerial::flush()>
    //flushSerialHW();
    Serial.end();
    1554:	80 ea       	ldi	r24, 0xA0	; 160
    1556:	93 e0       	ldi	r25, 0x03	; 3
    1558:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <HardwareSerial::end()>
    }
  pinMode(PIN_SERIAL_RX, INPUT_PULLUP);
    155c:	80 e0       	ldi	r24, 0x00	; 0
    155e:	62 e0       	ldi	r22, 0x02	; 2
    1560:	0e 94 39 15 	call	0x2a72	; 0x2a72 <pinMode>
  pinMode(PIN_SERIAL_TX, INPUT_PULLUP);
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	62 e0       	ldi	r22, 0x02	; 2
    1568:	0e 94 39 15 	call	0x2a72	; 0x2a72 <pinMode>
  PRR |= _BV(PRUSART0); // Disable the UART module.
    156c:	80 91 64 00 	lds	r24, 0x0064
    1570:	82 60       	ori	r24, 0x02	; 2
    1572:	80 93 64 00 	sts	0x0064, r24
  }
    1576:	08 95       	ret

00001578 <burnHundredsOfCyclesProductivelyAndPoll()>:
// This call should typically take << 1ms at 1MHz CPU.
// Does not change CPU clock speeds, mess with interrupts (other than possible brief blocking), or sleep.
// May capture some entropy in secure and non-secure PRNGs.
void burnHundredsOfCyclesProductivelyAndPoll()
  {
  if(pollIO()) { seedRNG8(cycleCountCPU(), _watchdogFired, getSubCycleTime()); }
    1578:	80 e0       	ldi	r24, 0x00	; 0
    157a:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <pollIO(bool)>
    157e:	88 23       	and	r24, r24
    1580:	41 f0       	breq	.+16     	; 0x1592 <burnHundredsOfCyclesProductivelyAndPoll()+0x1a>
    1582:	86 b5       	in	r24, 0x26	; 38
    1584:	60 91 1d 02 	lds	r22, 0x021D
    1588:	40 91 b2 00 	lds	r20, 0x00B2
    158c:	0e 94 26 0b 	call	0x164c	; 0x164c <seedRNG8(unsigned char, unsigned char, unsigned char)>
    1590:	08 95       	ret
  else { captureEntropy1(); }
    1592:	0e 94 0c 0a 	call	0x1418	; 0x1418 <captureEntropy1()>
    1596:	08 95       	ret

00001598 <flushSerialProductive()>:

#ifndef flushSerialProductive
// Does a Serial.flush() attempting to do some useful work (eg I/O polling) while waiting for output to drain.
// Assumes hundreds of CPU cycles available for each character queued for TX.
// Does not change CPU clock speed or disable or mess with USART0, though may poll it.
void flushSerialProductive()
    1598:	02 c0       	rjmp	.+4      	; 0x159e <flushSerialProductive()+0x6>
#if 0 && defined(DEBUG)
  if(!_serialIsPoweredUp()) { panic(); } // Trying to operate serial without it powered up.
#endif
  // Can productively spin here churning PRNGs or the like before the flush(), checking for the UART TX buffer to empty...
  // An occasional premature exit to flush() due to Serial interrupt handler interaction is benign, and indeed more grist to the mill.
  while(serialTXInProgress()) { burnHundredsOfCyclesProductivelyAndPoll(); }
    159a:	0e 94 bc 0a 	call	0x1578	; 0x1578 <burnHundredsOfCyclesProductivelyAndPoll()>
    159e:	80 91 c0 00 	lds	r24, 0x00C0
    15a2:	85 ff       	sbrs	r24, 5
    15a4:	fa cf       	rjmp	.-12     	; 0x159a <flushSerialProductive()+0x2>
  Serial.flush(); // Wait for all output to have been sent.
    15a6:	80 ea       	ldi	r24, 0xA0	; 160
    15a8:	93 e0       	ldi	r25, 0x03	; 3
    15aa:	0e 94 94 17 	call	0x2f28	; 0x2f28 <HardwareSerial::flush()>
  }
    15ae:	08 95       	ret

000015b0 <flushSerialSCTSensitive()>:
// Does not change CPU clock speed or disable or mess with USART0, though may poll it.
// Sleeps in IDLE mode for ~15ms at a time (backtopped by watchdog) waking on any interrupt
// so that the caller must be sure RX overrun (etc) will not be an issue.
// Switches to flushSerialProductive() behaviour
// if in danger of overrunning a minor cycle while idling.
void flushSerialSCTSensitive()
    15b0:	1f 93       	push	r17
#ifdef ENABLE_AVR_IDLE_MODE
// Idle productively polling I/O, etc, across the system while spending time in low-power mode if possible.
// Typically sleeps for nominally up to 30ms; tries to allow ealier wakeup if interrupt is received, etc.
// (Will often be prematurely woken by timer0 with ~16ms interval.)
// True iff watchdog timer expired; false if something else woke the CPU.
static bool inline idle15AndPoll() { const bool wd = idleCPU(WDTO_15MS); pollIO(!wd); return(wd); }
    15b2:	11 e0       	ldi	r17, 0x01	; 1
  {
#if 0 && defined(DEBUG)
  if(!_serialIsPoweredUp()) { panic(); } // Trying to operate serial without it powered up.
#endif
#ifdef ENABLE_AVR_IDLE_MODE
  while(serialTXInProgress() && (getSubCycleTime() < GSCT_MAX - 2 - (20/SUBCYCLE_TICK_MS_RD)))
    15b4:	80 91 c0 00 	lds	r24, 0x00C0
    15b8:	85 fd       	sbrc	r24, 5
    15ba:	0b c0       	rjmp	.+22     	; 0x15d2 <flushSerialSCTSensitive()+0x22>
    15bc:	80 91 b2 00 	lds	r24, 0x00B2
    15c0:	8b 3f       	cpi	r24, 0xFB	; 251
    15c2:	38 f4       	brcc	.+14     	; 0x15d2 <flushSerialSCTSensitive()+0x22>
    15c4:	80 e0       	ldi	r24, 0x00	; 0
    15c6:	0e 94 fb 07 	call	0xff6	; 0xff6 <idleCPU(signed char)>
    15ca:	81 27       	eor	r24, r17
    15cc:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <pollIO(bool)>
    15d0:	f1 cf       	rjmp	.-30     	; 0x15b4 <flushSerialSCTSensitive()+0x4>
    { idle15AndPoll(); } // Save much power by idling CPU, though everything else runs.
#endif
  flushSerialProductive();
    15d2:	0e 94 cc 0a 	call	0x1598	; 0x1598 <flushSerialProductive()>
  }
    15d6:	1f 91       	pop	r17
    15d8:	08 95       	ret

000015da <powerUpSerialIfDisabled()>:
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
  PRR |= _BV(PRADC); // Disable the ADC.
  }

// Check if serial is (already) powered up.
static bool _serialIsPoweredUp() { return(!(PRR & _BV(PRUSART0))); }
    15da:	80 91 64 00 	lds	r24, 0x0064
// If serial was disabled, power it up, do Serial.begin(), and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownSerial() may be advisable.
bool powerUpSerialIfDisabled()
  {
  if(_serialIsPoweredUp()) { return(false); }
    15de:	81 fd       	sbrc	r24, 1
    15e0:	02 c0       	rjmp	.+4      	; 0x15e6 <powerUpSerialIfDisabled()+0xc>
    15e2:	80 e0       	ldi	r24, 0x00	; 0
    15e4:	08 95       	ret
  PRR &= ~_BV(PRUSART0); // Enable the UART.
    15e6:	80 91 64 00 	lds	r24, 0x0064
    15ea:	8d 7f       	andi	r24, 0xFD	; 253
    15ec:	80 93 64 00 	sts	0x0064, r24
  Serial.begin(BAUD); // Set it going.
    15f0:	80 ea       	ldi	r24, 0xA0	; 160
    15f2:	93 e0       	ldi	r25, 0x03	; 3
    15f4:	40 ec       	ldi	r20, 0xC0	; 192
    15f6:	52 e1       	ldi	r21, 0x12	; 18
    15f8:	60 e0       	ldi	r22, 0x00	; 0
    15fa:	70 e0       	ldi	r23, 0x00	; 0
    15fc:	0e 94 56 16 	call	0x2cac	; 0x2cac <HardwareSerial::begin(unsigned long)>
    1600:	81 e0       	ldi	r24, 0x01	; 1
  return(true);
  }
    1602:	08 95       	ret

00001604 <powerSetup()>:
// Call from setup() to turn off unused modules, set up timers and interrupts, etc.
// I/O pin setting is not done here.
void powerSetup()
  {
#ifdef DEBUG
  assert(DEFAULT_CPU_PRESCALE == clock_prescale_get()); // Verify that CPU prescaling is as expected.
    1604:	80 91 61 00 	lds	r24, 0x0061
    1608:	8f 70       	andi	r24, 0x0F	; 15
    160a:	83 30       	cpi	r24, 0x03	; 3
    160c:	11 f0       	breq	.+4      	; 0x1612 <powerSetup()+0xe>
    160e:	0e 94 ac 01 	call	0x358	; 0x358 <abort>
#endif

  // Do normal gentle switch off, including analogue module/control in correct order.
  minimisePowerWithoutSleep();
    1612:	0e 94 4e 0a 	call	0x149c	; 0x149c <minimisePowerWithoutSleep()>

  // Brutally force off all modules, then re-enable explicitly below any still needed.
  power_all_disable(); 
    1616:	80 91 64 00 	lds	r24, 0x0064
    161a:	8f 6e       	ori	r24, 0xEF	; 239
    161c:	80 93 64 00 	sts	0x0064, r24

#if !defined(DONT_USE_TIMER0)
  power_timer0_enable(); // Turning timer 0 off messes up some standard Arduino support such as delay() and millis().
    1620:	80 91 64 00 	lds	r24, 0x0064
    1624:	8f 7d       	andi	r24, 0xDF	; 223
    1626:	80 93 64 00 	sts	0x0064, r24
#endif
  
#if defined(WAKEUP_32768HZ_XTAL)
  power_timer2_enable();
    162a:	80 91 64 00 	lds	r24, 0x0064
    162e:	8f 7b       	andi	r24, 0xBF	; 191
    1630:	80 93 64 00 	sts	0x0064, r24
#ifdef WAKEUP_32768HZ_XTAL
static void timer2XtalIntSetup()
 {
  // Set up TIMER2 to wake CPU out of sleep regularly using external 32768Hz crystal.
  // See http://www.atmel.com/Images/doc2505.pdf
  TCCR2A = 0x00;
    1634:	10 92 b0 00 	sts	0x00B0, r1

#if defined(HALF_SECOND_RTC_SUPPORT)
  TCCR2B = (1<<CS22); // Set CLK/64 for overflow interrupt every 0.5s.
#elif defined(TWO_S_TICK_RTC_SUPPORT)
  TCCR2B = (1<<CS22)|(1<<CS21); // Set CLK/128 for overflow interrupt every 2s.
    1638:	86 e0       	ldi	r24, 0x06	; 6
    163a:	80 93 b1 00 	sts	0x00B1, r24
#else
  TCCR2B = (1<<CS22)|(1<<CS20); // Set CLK/128 for overflow interrupt every 1s.
#endif
  //TCCR2B = (1<<CS22)|(1<<CS21)|(1<<CS20); // Set CLK/1024 for overflow interrupt every 8s (slowest possible).

  ASSR = (1<<AS2); // Enable asynchronous operation.
    163e:	80 e2       	ldi	r24, 0x20	; 32
    1640:	80 93 b6 00 	sts	0x00B6, r24
  TIMSK2 = (1<<TOIE2); // Enable the timer 2 interrupt.
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	80 93 70 00 	sts	0x0070, r24
  
#if defined(WAKEUP_32768HZ_XTAL)
  power_timer2_enable();
  timer2XtalIntSetup();
#endif
  }
    164a:	08 95       	ret

0000164c <seedRNG8(unsigned char, unsigned char, unsigned char)>:
//2 ADDs, one bit shift right , and one increment. Difficult or slow operations like multiply, etc 
//were avoided for maximum speed on ultra low power devices.
void seedRNG8(uint8_t s1, uint8_t s2, uint8_t s3) // Originally init_rng(s1,s2,s3) //Can also be used to seed the rng with more entropy during use.
  {
  //XOR new entropy into key state
  a ^=s1;
    164c:	20 91 22 02 	lds	r18, 0x0222
  b ^=s2;
    1650:	90 91 23 02 	lds	r25, 0x0223
    1654:	69 27       	eor	r22, r25
  c ^=s3;
    1656:	90 91 20 02 	lds	r25, 0x0220
    165a:	49 27       	eor	r20, r25
  x++;
    165c:	90 91 21 02 	lds	r25, 0x0221
    1660:	9f 5f       	subi	r25, 0xFF	; 255
    1662:	90 93 21 02 	sts	0x0221, r25
  a = (a^c^x);
    1666:	28 27       	eor	r18, r24
    1668:	24 27       	eor	r18, r20
    166a:	29 27       	eor	r18, r25
    166c:	20 93 22 02 	sts	0x0222, r18
  b = (b+a);
    1670:	62 0f       	add	r22, r18
    1672:	60 93 23 02 	sts	0x0223, r22
  c = ((c+(b>>1))^a);
    1676:	66 95       	lsr	r22
    1678:	64 0f       	add	r22, r20
    167a:	62 27       	eor	r22, r18
    167c:	60 93 20 02 	sts	0x0220, r22
  }
    1680:	08 95       	ret

00001682 <randRNG8()>:
//
uint8_t randRNG8() // Originally unsigned char randomize().
  {
  x++;               //x is incremented every round and is not affected by any other variable
    1682:	80 91 21 02 	lds	r24, 0x0221
    1686:	8f 5f       	subi	r24, 0xFF	; 255
    1688:	80 93 21 02 	sts	0x0221, r24
  a = (a^c^x);       //note the mix of addition and XOR
    168c:	20 91 20 02 	lds	r18, 0x0220
    1690:	90 91 22 02 	lds	r25, 0x0222
    1694:	92 27       	eor	r25, r18
    1696:	98 27       	eor	r25, r24
    1698:	90 93 22 02 	sts	0x0222, r25
  b = (b+a);         //And the use of very few instructions
    169c:	80 91 23 02 	lds	r24, 0x0223
    16a0:	89 0f       	add	r24, r25
    16a2:	80 93 23 02 	sts	0x0223, r24
  c = ((c+(b>>1))^a);  //the right shift is to ensure that high-order bits from b can affect  
    16a6:	86 95       	lsr	r24
    16a8:	82 0f       	add	r24, r18
    16aa:	89 27       	eor	r24, r25
    16ac:	80 93 20 02 	sts	0x0220, r24
  return(c);         //low order bits of other variables
  }
    16b0:	08 95       	ret

000016b2 <global constructors keyed to _Z8seedRNG8hhh>:
uint8_t randRNG8(); // Originally called 'randomize()'.
// RNG8 working state.
static uint8_t a, b, c;
// DHD20130603: avoid the hidden counter always starting at zero c/o some per-build state.
// Derived from linker-driven pointer base plus hash of compilation timestamp, with little run-time cost.
static uint8_t x = (uint8_t)(intptr_t) ((&c) + (uint8_t)((__TIME__[7] * 17) ^ (__TIME__[6]) ^ (__TIME__[4] << 11)));
    16b2:	88 ea       	ldi	r24, 0xA8	; 168
    16b4:	92 e0       	ldi	r25, 0x02	; 2
    16b6:	80 93 21 02 	sts	0x0221, r24
  x++;               //x is incremented every round and is not affected by any other variable
  a = (a^c^x);       //note the mix of addition and XOR
  b = (b+a);         //And the use of very few instructions
  c = ((c+(b>>1))^a);  //the right shift is to ensure that high-order bits from b can affect  
  return(c);         //low order bits of other variables
  }
    16ba:	08 95       	ret

000016bc <RFM22RegisterBlockSetup(unsigned char const (*) [2])>:


// Configure the radio from a list of register/value pairs in readonly PROGMEM/Flash, terminating with an 0xff register value.
// NOTE: argument is not a pointer into SRAM, it is into PROGMEM!
// Could optimise case where multiple values are for successive RFM22 registers by using burst write.
void RFM22RegisterBlockSetup(const uint8_t registerValues[][2])
    16bc:	cf 93       	push	r28
    16be:	df 93       	push	r29
    16c0:	ec 01       	movw	r28, r24
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    16c2:	0e 94 34 0a 	call	0x1468	; 0x1468 <powerUpSPIIfDisabled()>
  for( ; ; )
    {
    const uint8_t reg = pgm_read_byte(&(registerValues[0][0]));
    16c6:	fe 01       	movw	r30, r28
    16c8:	94 91       	lpm	r25, Z+
    const uint8_t val = pgm_read_byte(&(registerValues[0][1]));
    16ca:	21 96       	adiw	r28, 0x01	; 1
    16cc:	fe 01       	movw	r30, r28
    16ce:	24 91       	lpm	r18, Z+
    16d0:	21 97       	sbiw	r28, 0x01	; 1
    if(0xff == reg) { break; }
    16d2:	9f 3f       	cpi	r25, 0xFF	; 255
    16d4:	69 f0       	breq	.+26     	; 0x16f0 <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x34>

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    16d6:	2a 98       	cbi	0x05, 2	; 5
  _RFM22_wr(addr | 0x80); // Force to write.
    16d8:	90 68       	ori	r25, 0x80	; 128

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    16da:	9e bd       	out	0x2e, r25	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    16dc:	0d b4       	in	r0, 0x2d	; 45
    16de:	07 fe       	sbrs	r0, 7
    16e0:	fd cf       	rjmp	.-6      	; 0x16dc <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x20>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    16e2:	2e bd       	out	0x2e, r18	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    16e4:	0d b4       	in	r0, 0x2d	; 45
    16e6:	07 fe       	sbrs	r0, 7
    16e8:	fd cf       	rjmp	.-6      	; 0x16e4 <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x28>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    16ea:	2a 9a       	sbi	0x05, 2	; 5
    DEBUG_SERIAL_PRINT_FLASHSTRING(" = 0x");
    DEBUG_SERIAL_PRINTFMT(val, HEX);
    DEBUG_SERIAL_PRINTLN();
#endif
    _RFM22WriteReg8Bit(reg, val);
    ++registerValues;
    16ec:	22 96       	adiw	r28, 0x02	; 2
    16ee:	eb cf       	rjmp	.-42     	; 0x16c6 <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0xa>
    }
  if(neededEnable) { powerDownSPI(); }
    16f0:	88 23       	and	r24, r24
    16f2:	11 f0       	breq	.+4      	; 0x16f8 <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x3c>
    16f4:	0e 94 1a 0a 	call	0x1434	; 0x1434 <powerDownSPI()>
  }
    16f8:	df 91       	pop	r29
    16fa:	cf 91       	pop	r28
    16fc:	08 95       	ret

000016fe <RFM22PowerOnInit()>:
void RFM22PowerOnInit()
  {
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22 reset...");
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
    16fe:	0e 94 34 0a 	call	0x1468	; 0x1468 <powerUpSPIIfDisabled()>
    1702:	98 2f       	mov	r25, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    1704:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    1706:	87 e8       	ldi	r24, 0x87	; 135
    1708:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    170a:	0d b4       	in	r0, 0x2d	; 45
    170c:	07 fe       	sbrs	r0, 7
    170e:	fd cf       	rjmp	.-6      	; 0x170a <RFM22PowerOnInit()+0xc>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    1710:	80 e8       	ldi	r24, 0x80	; 128
    1712:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    1714:	0d b4       	in	r0, 0x2d	; 45
    1716:	07 fe       	sbrs	r0, 7
    1718:	fd cf       	rjmp	.-6      	; 0x1714 <RFM22PowerOnInit()+0x16>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    171a:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    171c:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    171e:	87 e8       	ldi	r24, 0x87	; 135
    1720:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    1722:	0d b4       	in	r0, 0x2d	; 45
    1724:	07 fe       	sbrs	r0, 7
    1726:	fd cf       	rjmp	.-6      	; 0x1722 <RFM22PowerOnInit()+0x24>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    1728:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    172a:	0d b4       	in	r0, 0x2d	; 45
    172c:	07 fe       	sbrs	r0, 7
    172e:	fd cf       	rjmp	.-6      	; 0x172a <RFM22PowerOnInit()+0x2c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    1730:	2a 9a       	sbi	0x05, 2	; 5
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22 reset...");
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
  _RFM22WriteReg8Bit(RFM22REG_OP_CTRL1, RFM22REG_OP_CTRL1_SWRES);
  _RFM22ModeStandby();
  if(neededEnable) { powerDownSPI(); }
    1732:	99 23       	and	r25, r25
    1734:	11 f0       	breq	.+4      	; 0x173a <RFM22PowerOnInit()+0x3c>
    1736:	0e 94 1a 0a 	call	0x1434	; 0x1434 <powerDownSPI()>
    173a:	08 95       	ret

0000173c <RFM22ModeStandbyAndClearState()>:
// Enter standby mode (consume least possible power but retain register contents).
// FIFO state and pending interrupts are cleared.
// Typical consumption in standby 450nA (cf 15nA when shut down, 8.5mA TUNE, 18--80mA RX/TX).
void RFM22ModeStandbyAndClearState()
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    173c:	0e 94 34 0a 	call	0x1468	; 0x1468 <powerUpSPIIfDisabled()>
    1740:	98 2f       	mov	r25, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    1742:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    1744:	87 e8       	ldi	r24, 0x87	; 135
    1746:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    1748:	0d b4       	in	r0, 0x2d	; 45
    174a:	07 fe       	sbrs	r0, 7
    174c:	fd cf       	rjmp	.-6      	; 0x1748 <RFM22ModeStandbyAndClearState()+0xc>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    174e:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    1750:	0d b4       	in	r0, 0x2d	; 45
    1752:	07 fe       	sbrs	r0, 7
    1754:	fd cf       	rjmp	.-6      	; 0x1750 <RFM22ModeStandbyAndClearState()+0x14>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    1756:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    1758:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    175a:	88 e8       	ldi	r24, 0x88	; 136
    175c:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    175e:	0d b4       	in	r0, 0x2d	; 45
    1760:	07 fe       	sbrs	r0, 7
    1762:	fd cf       	rjmp	.-6      	; 0x175e <RFM22ModeStandbyAndClearState()+0x22>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    1764:	83 e0       	ldi	r24, 0x03	; 3
    1766:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    1768:	0d b4       	in	r0, 0x2d	; 45
    176a:	07 fe       	sbrs	r0, 7
    176c:	fd cf       	rjmp	.-6      	; 0x1768 <RFM22ModeStandbyAndClearState()+0x2c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    176e:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    1770:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    1772:	88 e8       	ldi	r24, 0x88	; 136
    1774:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    1776:	0d b4       	in	r0, 0x2d	; 45
    1778:	07 fe       	sbrs	r0, 7
    177a:	fd cf       	rjmp	.-6      	; 0x1776 <RFM22ModeStandbyAndClearState()+0x3a>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    177c:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    177e:	0d b4       	in	r0, 0x2d	; 45
    1780:	07 fe       	sbrs	r0, 7
    1782:	fd cf       	rjmp	.-6      	; 0x177e <RFM22ModeStandbyAndClearState()+0x42>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    1784:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    1786:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    1788:	85 e8       	ldi	r24, 0x85	; 133
    178a:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    178c:	0d b4       	in	r0, 0x2d	; 45
    178e:	07 fe       	sbrs	r0, 7
    1790:	fd cf       	rjmp	.-6      	; 0x178c <RFM22ModeStandbyAndClearState()+0x50>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    1792:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    1794:	0d b4       	in	r0, 0x2d	; 45
    1796:	07 fe       	sbrs	r0, 7
    1798:	fd cf       	rjmp	.-6      	; 0x1794 <RFM22ModeStandbyAndClearState()+0x58>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    179a:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    179c:	0d b4       	in	r0, 0x2d	; 45
    179e:	07 fe       	sbrs	r0, 7
    17a0:	fd cf       	rjmp	.-6      	; 0x179c <RFM22ModeStandbyAndClearState()+0x60>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    17a2:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    17a4:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    17a6:	83 e8       	ldi	r24, 0x83	; 131
    17a8:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    17aa:	0d b4       	in	r0, 0x2d	; 45
    17ac:	07 fe       	sbrs	r0, 7
    17ae:	fd cf       	rjmp	.-6      	; 0x17aa <RFM22ModeStandbyAndClearState()+0x6e>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    17b0:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    17b2:	0d b4       	in	r0, 0x2d	; 45
    17b4:	07 fe       	sbrs	r0, 7
    17b6:	fd cf       	rjmp	.-6      	; 0x17b2 <RFM22ModeStandbyAndClearState()+0x76>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    17b8:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    17ba:	0d b4       	in	r0, 0x2d	; 45
    17bc:	07 fe       	sbrs	r0, 7
    17be:	fd cf       	rjmp	.-6      	; 0x17ba <RFM22ModeStandbyAndClearState()+0x7e>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    17c0:	2a 9a       	sbi	0x05, 2	; 5
//  _RFM22WriteReg8Bit(RFM22REG_INT_ENABLE2, 0); // TODO: combine in burst write with previous...
  _RFM22WriteReg16Bit0(RFM22REG_INT_ENABLE1);
  // Clear any interrupts already/still pending...
  _RFM22ClearInterrupts();  
  //_RFM22WriteReg8Bit(0xd, 0x1f); // Drive GPIO2 to ground as output... (Move to general register settings.)
  if(neededEnable) { powerDownSPI(); }
    17c2:	99 23       	and	r25, r25
    17c4:	11 f0       	breq	.+4      	; 0x17ca <RFM22ModeStandbyAndClearState()+0x8e>
    17c6:	0e 94 1a 0a 	call	0x1434	; 0x1434 <powerDownSPI()>
    17ca:	08 95       	ret

000017cc <RFM22CheckConnected()>:
  _RFM22ModeStandby();
  if(neededEnable) { powerDownSPI(); }
  }

// Returns true iff RFM22 (or RFM23) appears to be correctly connected.
bool RFM22CheckConnected()
    17cc:	0f 93       	push	r16
    17ce:	1f 93       	push	r17
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    17d0:	0e 94 34 0a 	call	0x1468	; 0x1468 <powerUpSPIIfDisabled()>
    17d4:	08 2f       	mov	r16, r24

// Read from 8-bit register on RFM22.
// SPI must already be configured and running.
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
    17d6:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    17d8:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    17da:	0d b4       	in	r0, 0x2d	; 45
    17dc:	07 fe       	sbrs	r0, 7
    17de:	fd cf       	rjmp	.-6      	; 0x17da <RFM22CheckConnected()+0xe>
  return(SPDR);
    17e0:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    17e2:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    17e4:	0d b4       	in	r0, 0x2d	; 45
    17e6:	07 fe       	sbrs	r0, 7
    17e8:	fd cf       	rjmp	.-6      	; 0x17e4 <RFM22CheckConnected()+0x18>
  return(SPDR);
    17ea:	8e b5       	in	r24, 0x2e	; 46
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  const uint8_t result = _RFM22_io(0); // Dummy value...
  _RFM22_DESELECT();
    17ec:	2a 9a       	sbi	0x05, 2	; 5
bool RFM22CheckConnected()
  {
  const bool neededEnable = powerUpSPIIfDisabled();
  bool isOK = false;
  const uint8_t rType = _RFM22ReadReg8Bit(0); // May read as 0 if not connected at all.
  if(RFM22_SUPPORTED_DEVICE_TYPE == rType)
    17ee:	88 30       	cpi	r24, 0x08	; 8
    17f0:	89 f4       	brne	.+34     	; 0x1814 <RFM22CheckConnected()+0x48>

// Read from 8-bit register on RFM22.
// SPI must already be configured and running.
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
    17f2:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    17f8:	0d b4       	in	r0, 0x2d	; 45
    17fa:	07 fe       	sbrs	r0, 7
    17fc:	fd cf       	rjmp	.-6      	; 0x17f8 <RFM22CheckConnected()+0x2c>
  return(SPDR);
    17fe:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    1800:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    1802:	0d b4       	in	r0, 0x2d	; 45
    1804:	07 fe       	sbrs	r0, 7
    1806:	fd cf       	rjmp	.-6      	; 0x1802 <RFM22CheckConnected()+0x36>
  return(SPDR);
    1808:	8e b5       	in	r24, 0x2e	; 46
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  const uint8_t result = _RFM22_io(0); // Dummy value...
  _RFM22_DESELECT();
    180a:	2a 9a       	sbi	0x05, 2	; 5
  bool isOK = false;
  const uint8_t rType = _RFM22ReadReg8Bit(0); // May read as 0 if not connected at all.
  if(RFM22_SUPPORTED_DEVICE_TYPE == rType)
    {
    const uint8_t rVersion = _RFM22ReadReg8Bit(1);
    if(RFM22_SUPPORTED_DEVICE_VERSION == rVersion)
    180c:	86 30       	cpi	r24, 0x06	; 6
    180e:	11 f4       	brne	.+4      	; 0x1814 <RFM22CheckConnected()+0x48>
    1810:	11 e0       	ldi	r17, 0x01	; 1
    1812:	05 c0       	rjmp	.+10     	; 0x181e <RFM22CheckConnected()+0x52>
    DEBUG_SERIAL_PRINTFMT(rType, HEX);
    DEBUG_SERIAL_PRINTLN();
    }
#endif
#if 1 && defined(DEBUG)
  if(!isOK) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22 bad"); }
    1814:	88 e1       	ldi	r24, 0x18	; 24
    1816:	91 e0       	ldi	r25, 0x01	; 1
    1818:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <serialPrintlnAndFlush(__FlashStringHelper const*)>
    181c:	10 e0       	ldi	r17, 0x00	; 0
#endif
  if(neededEnable) { powerDownSPI(); }
    181e:	00 23       	and	r16, r16
    1820:	11 f0       	breq	.+4      	; 0x1826 <RFM22CheckConnected()+0x5a>
    1822:	0e 94 1a 0a 	call	0x1434	; 0x1434 <powerDownSPI()>
  return(isOK);
  }
    1826:	81 2f       	mov	r24, r17
    1828:	1f 91       	pop	r17
    182a:	0f 91       	pop	r16
    182c:	08 95       	ret

0000182e <eeprom_read_byte>:


/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
    182e:	9c 01       	movw	r18, r24
{
    do {} while (!eeprom_is_ready ());
    1830:	f9 99       	sbic	0x1f, 1	; 31
    1832:	fe cf       	rjmp	.-4      	; 0x1830 <eeprom_read_byte+0x2>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1834:	32 bd       	out	0x22, r19	; 34
    1836:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1838:	f8 9a       	sbi	0x1f, 0	; 31
    183a:	80 b5       	in	r24, 0x20	; 32
    return __result;
}
    183c:	08 95       	ret

0000183e <getMinutesSinceMidnightLT()>:
// Thread-safe and ISR-safe.
#ifndef getMinutesSinceMidnightLT
uint_least16_t getMinutesSinceMidnightLT()
  {
  uint_least16_t result;
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    183e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1840:	f8 94       	cli
    { result = _minutesSinceMidnightLT; }
    1842:	20 91 25 02 	lds	r18, 0x0225
    1846:	30 91 26 02 	lds	r19, 0x0226
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    184a:	8f bf       	out	0x3f, r24	; 63
  return(result);
  }
    184c:	c9 01       	movw	r24, r18
    184e:	08 95       	ret

00001850 <getHoursLT()>:
// Thread-safe and ISR-safe.
#ifndef getMinutesSinceMidnightLT
uint_least16_t getMinutesSinceMidnightLT()
  {
  uint_least16_t result;
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1850:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1852:	f8 94       	cli
    { result = _minutesSinceMidnightLT; }
    1854:	80 91 25 02 	lds	r24, 0x0225
    1858:	90 91 26 02 	lds	r25, 0x0226
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    185c:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    185e:	6c e3       	ldi	r22, 0x3C	; 60
    1860:	70 e0       	ldi	r23, 0x00	; 0
    1862:	0e 94 4b 1a 	call	0x3496	; 0x3496 <__udivmodhi4>
    1866:	86 2f       	mov	r24, r22
// Thread-safe and ISR-safe.
uint_least8_t getMinutesLT() { return(getMinutesSinceMidnightLT() % 60); }

// Get local time hours from RTC [0,23].
// Thread-safe and ISR-safe.
uint_least8_t getHoursLT() { return(getMinutesSinceMidnightLT() / 60); }
    1868:	08 95       	ret

0000186a <restoreRTC()>:

// Restore software RTC information from non-volatile (EEPROM) store, if possible.
// Returns true if the persisted data seemed valid and was restored, in full or part.
// To void on average using 15/2 minutes at each reset/restart,
// this starts the internal time a little over half way into the restored 15-minute slot.
bool restoreRTC()
    186a:	1f 93       	push	r17
  {
  uint8_t persistedValue;
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    186c:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    186e:	f8 94       	cli
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    1870:	88 e0       	ldi	r24, 0x08	; 8
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	67 e1       	ldi	r22, 0x17	; 23
    1876:	7c e0       	ldi	r23, 0x0C	; 12
    1878:	0e 94 b1 01 	call	0x362	; 0x362 <__eerd_word>
    {
    // Restore the persisted days, though ignore if apparently unset (all 1s).
    const uint16_t days = eeprom_read_word((uint16_t*)EE_START_RTC_DAY_PERSIST);
    if(days != (uint16_t)~0U) { _daysSince1999LT = days; }
    187c:	2f ef       	ldi	r18, 0xFF	; 255
    187e:	8f 3f       	cpi	r24, 0xFF	; 255
    1880:	92 07       	cpc	r25, r18
    1882:	21 f0       	breq	.+8      	; 0x188c <restoreRTC()+0x22>
    1884:	90 93 28 02 	sts	0x0228, r25
    1888:	80 93 27 02 	sts	0x0227, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    188c:	f9 99       	sbic	0x1f, 1	; 31
    188e:	fe cf       	rjmp	.-4      	; 0x188c <restoreRTC()+0x22>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1890:	8a e0       	ldi	r24, 0x0A	; 10
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	92 bd       	out	0x22, r25	; 34
    1896:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1898:	f8 9a       	sbi	0x1f, 0	; 31
    189a:	60 b5       	in	r22, 0x20	; 32
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    189c:	1f bf       	out	0x3f, r17	; 63
    // Now recover persisted HH:MM value.
    persistedValue = eeprom_read_byte((uint8_t*)EE_START_RTC_HHMM_PERSIST);
    }

  // Abort if value clearly invalid, eg likely an unprogrammed (0xff) byte.
  if(persistedValue >= (24 << 3)) { return(false); }
    189e:	60 3c       	cpi	r22, 0xC0	; 192
    18a0:	90 f5       	brcc	.+100    	; 0x1906 <restoreRTC()+0x9c>

  uint_least16_t minutesSinceMidnight = (persistedValue >> 3) * 60;
    18a2:	86 2f       	mov	r24, r22
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	23 e0       	ldi	r18, 0x03	; 3
    18a8:	95 95       	asr	r25
    18aa:	87 95       	ror	r24
    18ac:	2a 95       	dec	r18
    18ae:	e1 f7       	brne	.-8      	; 0x18a8 <restoreRTC()+0x3e>
    18b0:	2c e3       	ldi	r18, 0x3C	; 60
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	82 9f       	mul	r24, r18
    18b6:	a0 01       	movw	r20, r0
    18b8:	83 9f       	mul	r24, r19
    18ba:	50 0d       	add	r21, r0
    18bc:	92 9f       	mul	r25, r18
    18be:	50 0d       	add	r21, r0
    18c0:	11 24       	eor	r1, r1
  minutesSinceMidnight += 8; // Start just over half-way into one quantum to minimise average time lost on restart.
    18c2:	9a 01       	movw	r18, r20
    18c4:	28 5f       	subi	r18, 0xF8	; 248
    18c6:	3f 4f       	sbci	r19, 0xFF	; 255
  const uint8_t lowBits = persistedValue & 7; // Extract quarter-hour bits.
  switch(lowBits)
    18c8:	86 2f       	mov	r24, r22
    18ca:	87 70       	andi	r24, 0x07	; 7
    18cc:	81 30       	cpi	r24, 0x01	; 1
    18ce:	59 f0       	breq	.+22     	; 0x18e6 <restoreRTC()+0x7c>
    18d0:	81 30       	cpi	r24, 0x01	; 1
    18d2:	28 f0       	brcs	.+10     	; 0x18de <restoreRTC()+0x74>
    18d4:	83 30       	cpi	r24, 0x03	; 3
    18d6:	59 f0       	breq	.+22     	; 0x18ee <restoreRTC()+0x84>
    18d8:	87 30       	cpi	r24, 0x07	; 7
    18da:	a9 f4       	brne	.+42     	; 0x1906 <restoreRTC()+0x9c>
    18dc:	0b c0       	rjmp	.+22     	; 0x18f4 <restoreRTC()+0x8a>
    {
    case 0: minutesSinceMidnight += 45; break;
    18de:	9a 01       	movw	r18, r20
    18e0:	2b 5c       	subi	r18, 0xCB	; 203
    18e2:	3f 4f       	sbci	r19, 0xFF	; 255
    18e4:	07 c0       	rjmp	.+14     	; 0x18f4 <restoreRTC()+0x8a>
    case 1: minutesSinceMidnight += 30; break;
    18e6:	9a 01       	movw	r18, r20
    18e8:	2a 5d       	subi	r18, 0xDA	; 218
    18ea:	3f 4f       	sbci	r19, 0xFF	; 255
    18ec:	03 c0       	rjmp	.+6      	; 0x18f4 <restoreRTC()+0x8a>
    case 3: minutesSinceMidnight += 15; break;
    18ee:	9a 01       	movw	r18, r20
    18f0:	29 5e       	subi	r18, 0xE9	; 233
    18f2:	3f 4f       	sbci	r19, 0xFF	; 255
    default: return(false); // Invalid bit pattern: abort.
    }

  // Set the hours and minutes (atomically).
  // Deliberately leave the seconds unset to avoid units becoming too synchronised with one another, increasing TX collisions, etc.
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    18f4:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    18f6:	f8 94       	cli
    { _minutesSinceMidnightLT = minutesSinceMidnight; }
    18f8:	30 93 26 02 	sts	0x0226, r19
    18fc:	20 93 25 02 	sts	0x0225, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1900:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	01 c0       	rjmp	.+2      	; 0x1908 <restoreRTC()+0x9e>

  return(true);
    1906:	80 e0       	ldi	r24, 0x00	; 0
  }
    1908:	1f 91       	pop	r17
    190a:	08 95       	ret

0000190c <getSimpleScheduleOn(unsigned char)>:
// Will usually include a pre-warm time before the actual time set.
// Note that unprogrammed EEPROM value will result in invalid time, ie schedule not set.
//   * which  schedule number, counting from 0
uint_least16_t getSimpleScheduleOn(const uint8_t which)
  {
  if(which >= MAX_SIMPLE_SCHEDULES) { return(~0); } // Invalid schedule number.
    190c:	82 30       	cpi	r24, 0x02	; 2
    190e:	d0 f4       	brcc	.+52     	; 0x1944 <getSimpleScheduleOn(unsigned char)+0x38>
  uint8_t startMM;
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    1910:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1912:	f8 94       	cli
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1914:	f9 99       	sbic	0x1f, 1	; 31
    1916:	fe cf       	rjmp	.-4      	; 0x1914 <getSimpleScheduleOn(unsigned char)+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	0c 96       	adiw	r24, 0x0c	; 12
    191c:	92 bd       	out	0x22, r25	; 34
    191e:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1920:	f8 9a       	sbi	0x1f, 0	; 31
    1922:	90 b5       	in	r25, 0x20	; 32
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1924:	2f bf       	out	0x3f, r18	; 63
    { startMM = eeprom_read_byte((uint8_t*)(EE_START_SIMPLE_SCHEDULE0_ON + which)); }
  if(startMM > MAX_COMPRESSED_MINS_AFTER_MIDNIGHT) { return(~0); } // No schedule set.
    1926:	90 3f       	cpi	r25, 0xF0	; 240
    1928:	68 f4       	brcc	.+26     	; 0x1944 <getSimpleScheduleOn(unsigned char)+0x38>
  // Compute start time from stored shedule value.
  uint_least16_t startTime = SIMPLE_SCHEDULE_GRANULARITY_MINS * startMM;
    192a:	86 e0       	ldi	r24, 0x06	; 6
    192c:	98 9f       	mul	r25, r24
    192e:	c0 01       	movw	r24, r0
    1930:	11 24       	eor	r1, r1
  const uint8_t windBackM = PREWARM_MINS; // Wind back start time by about 25% of full interval.
  if(windBackM > startTime) { startTime += MINS_PER_DAY; } // Allow for wrap-around at midnight.
    1932:	8f 30       	cpi	r24, 0x0F	; 15
    1934:	91 05       	cpc	r25, r1
    1936:	10 f4       	brcc	.+4      	; 0x193c <getSimpleScheduleOn(unsigned char)+0x30>
    1938:	80 56       	subi	r24, 0x60	; 96
    193a:	9a 4f       	sbci	r25, 0xFA	; 250
  startTime -= windBackM;
    193c:	9c 01       	movw	r18, r24
    193e:	2f 50       	subi	r18, 0x0F	; 15
    1940:	30 40       	sbci	r19, 0x00	; 0
    1942:	02 c0       	rjmp	.+4      	; 0x1948 <getSimpleScheduleOn(unsigned char)+0x3c>
  return(startTime);
    1944:	2f ef       	ldi	r18, 0xFF	; 255
    1946:	3f ef       	ldi	r19, 0xFF	; 255
  }
    1948:	c9 01       	movw	r24, r18
    194a:	08 95       	ret

0000194c <getSimpleScheduleOff(unsigned char)>:

// Get the simple/primary schedule off time, as minutes after midnight [0,1439]; invalid (eg ~0) if none set.
// This is based on specifed start time and some element of the current eco/comfort bias.
//   * which  schedule number, counting from 0
uint_least16_t getSimpleScheduleOff(const uint8_t which)
    194c:	cf 93       	push	r28
    194e:	df 93       	push	r29
  {
  const uint_least16_t startMins = getSimpleScheduleOn(which);
    1950:	0e 94 86 0c 	call	0x190c	; 0x190c <getSimpleScheduleOn(unsigned char)>
    1954:	ec 01       	movw	r28, r24
  if(startMins == (uint_least16_t)~0) { return(~0); }
    1956:	8f ef       	ldi	r24, 0xFF	; 255
    1958:	cf 3f       	cpi	r28, 0xFF	; 255
    195a:	d8 07       	cpc	r29, r24
    195c:	19 f4       	brne	.+6      	; 0x1964 <getSimpleScheduleOff(unsigned char)+0x18>
    195e:	2f ef       	ldi	r18, 0xFF	; 255
    1960:	3f ef       	ldi	r19, 0xFF	; 255
    1962:	16 c0       	rjmp	.+44     	; 0x1990 <getSimpleScheduleOff(unsigned char)+0x44>
  {
//  // Simple and fast binary choice.
//  return(hasEcoBias() ? LEARNED_ON_PERIOD_M : LEARNED_ON_PERIOD_COMFORT_M);

  // Three-way split based on current WARM target temperature.
  const uint8_t wt = getWARMTargetC();
    1964:	0e 94 70 02 	call	0x4e0	; 0x4e0 <getWARMTargetC()>
  if(isEcoTemperature(wt)) { return(LEARNED_ON_PERIOD_M); }
    1968:	82 31       	cpi	r24, 0x12	; 18
    196a:	10 f4       	brcc	.+4      	; 0x1970 <getSimpleScheduleOff(unsigned char)+0x24>
    196c:	8c e3       	ldi	r24, 0x3C	; 60
    196e:	05 c0       	rjmp	.+10     	; 0x197a <getSimpleScheduleOff(unsigned char)+0x2e>
  else if(isComfortTemperature(wt)) { return(LEARNED_ON_PERIOD_COMFORT_M); }
    1970:	85 31       	cpi	r24, 0x15	; 21
    1972:	10 f4       	brcc	.+4      	; 0x1978 <getSimpleScheduleOff(unsigned char)+0x2c>
    1974:	8a e5       	ldi	r24, 0x5A	; 90
    1976:	01 c0       	rjmp	.+2      	; 0x197a <getSimpleScheduleOff(unsigned char)+0x2e>
    1978:	88 e7       	ldi	r24, 0x78	; 120
uint_least16_t getSimpleScheduleOff(const uint8_t which)
  {
  const uint_least16_t startMins = getSimpleScheduleOn(which);
  if(startMins == (uint_least16_t)~0) { return(~0); }
  // Compute end from start, allowing for wrap-around at midnight.
  uint_least16_t endTime = startMins + PREWARM_MINS + onTime();
    197a:	9e 01       	movw	r18, r28
    197c:	21 5f       	subi	r18, 0xF1	; 241
    197e:	3f 4f       	sbci	r19, 0xFF	; 255
    1980:	28 0f       	add	r18, r24
    1982:	31 1d       	adc	r19, r1
  if(endTime >= MINS_PER_DAY) { endTime -= MINS_PER_DAY; } // Allow for wrap-around at midnight.
    1984:	85 e0       	ldi	r24, 0x05	; 5
    1986:	20 3a       	cpi	r18, 0xA0	; 160
    1988:	38 07       	cpc	r19, r24
    198a:	10 f0       	brcs	.+4      	; 0x1990 <getSimpleScheduleOff(unsigned char)+0x44>
    198c:	20 5a       	subi	r18, 0xA0	; 160
    198e:	35 40       	sbci	r19, 0x05	; 5
  return(endTime);
  }
    1990:	c9 01       	movw	r24, r18
    1992:	df 91       	pop	r29
    1994:	cf 91       	pop	r28
    1996:	08 95       	ret

00001998 <isAnyScheduleOnWARMSoon()>:

// True iff any schedule is due 'on'/'WARM' soon even when schedules overlap.
// May be relatively slow/expensive.
// Can be used to allow room to be brought up to at least a set-back temperature
// if very cold when a WARM period is due soon (to help ensure that WARM target is met on time).
bool isAnyScheduleOnWARMSoon()
    1998:	0f 93       	push	r16
    199a:	1f 93       	push	r17
    199c:	cf 93       	push	r28
    199e:	df 93       	push	r29
  {
  const uint_least16_t mm0 = getMinutesSinceMidnightLT() + PREPREWARM_MINS; // Look forward...
    19a0:	0e 94 1f 0c 	call	0x183e	; 0x183e <getMinutesSinceMidnightLT()>
    19a4:	9c 01       	movw	r18, r24
    19a6:	23 5d       	subi	r18, 0xD3	; 211
    19a8:	3f 4f       	sbci	r19, 0xFF	; 255
  const uint_least16_t mm = (mm0 >= MINS_PER_DAY) ? (mm0 - MINS_PER_DAY) : mm0;
    19aa:	45 e0       	ldi	r20, 0x05	; 5
    19ac:	20 3a       	cpi	r18, 0xA0	; 160
    19ae:	34 07       	cpc	r19, r20
    19b0:	10 f4       	brcc	.+4      	; 0x19b6 <isAnyScheduleOnWARMSoon()+0x1e>
    19b2:	89 01       	movw	r16, r18
    19b4:	03 c0       	rjmp	.+6      	; 0x19bc <isAnyScheduleOnWARMSoon()+0x24>
    19b6:	8c 01       	movw	r16, r24
    19b8:	03 57       	subi	r16, 0x73	; 115
    19ba:	15 40       	sbci	r17, 0x05	; 5

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    19bc:	80 e0       	ldi	r24, 0x00	; 0
    19be:	0e 94 86 0c 	call	0x190c	; 0x190c <getSimpleScheduleOn(unsigned char)>
    19c2:	ec 01       	movw	r28, r24
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    19c4:	08 17       	cp	r16, r24
    19c6:	19 07       	cpc	r17, r25
    19c8:	68 f0       	brcs	.+26     	; 0x19e4 <isAnyScheduleOnWARMSoon()+0x4c>
    uint_least16_t e = getSimpleScheduleOff(which);
    19ca:	80 e0       	ldi	r24, 0x00	; 0
    19cc:	0e 94 a6 0c 	call	0x194c	; 0x194c <getSimpleScheduleOff(unsigned char)>
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    19d0:	8c 17       	cp	r24, r28
    19d2:	9d 07       	cpc	r25, r29
    19d4:	20 f0       	brcs	.+8      	; 0x19de <isAnyScheduleOnWARMSoon()+0x46>
    if(mm < e) { return(true); }
    19d6:	08 17       	cp	r16, r24
    19d8:	19 07       	cpc	r17, r25
    19da:	20 f4       	brcc	.+8      	; 0x19e4 <isAnyScheduleOnWARMSoon()+0x4c>
    19dc:	17 c0       	rjmp	.+46     	; 0x1a0c <isAnyScheduleOnWARMSoon()+0x74>
  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    uint_least16_t e = getSimpleScheduleOff(which);
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    19de:	80 56       	subi	r24, 0x60	; 96
    19e0:	9a 4f       	sbci	r25, 0xFA	; 250
    19e2:	f9 cf       	rjmp	.-14     	; 0x19d6 <isAnyScheduleOnWARMSoon()+0x3e>
  const uint_least16_t mm0 = getMinutesSinceMidnightLT() + PREPREWARM_MINS; // Look forward...
  const uint_least16_t mm = (mm0 >= MINS_PER_DAY) ? (mm0 - MINS_PER_DAY) : mm0;

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	0e 94 86 0c 	call	0x190c	; 0x190c <getSimpleScheduleOn(unsigned char)>
    19ea:	ec 01       	movw	r28, r24
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    19ec:	08 17       	cp	r16, r24
    19ee:	19 07       	cpc	r17, r25
    19f0:	58 f0       	brcs	.+22     	; 0x1a08 <isAnyScheduleOnWARMSoon()+0x70>
    uint_least16_t e = getSimpleScheduleOff(which);
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	0e 94 a6 0c 	call	0x194c	; 0x194c <getSimpleScheduleOff(unsigned char)>
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    19f8:	8c 17       	cp	r24, r28
    19fa:	9d 07       	cpc	r25, r29
    19fc:	10 f4       	brcc	.+4      	; 0x1a02 <isAnyScheduleOnWARMSoon()+0x6a>
    19fe:	80 56       	subi	r24, 0x60	; 96
    1a00:	9a 4f       	sbci	r25, 0xFA	; 250
    if(mm < e) { return(true); }
    1a02:	08 17       	cp	r16, r24
    1a04:	19 07       	cpc	r17, r25
    1a06:	10 f0       	brcs	.+4      	; 0x1a0c <isAnyScheduleOnWARMSoon()+0x74>
    1a08:	80 e0       	ldi	r24, 0x00	; 0
    1a0a:	01 c0       	rjmp	.+2      	; 0x1a0e <isAnyScheduleOnWARMSoon()+0x76>
bool isAnyScheduleOnWARMSoon()
  {
  const uint_least16_t mm0 = getMinutesSinceMidnightLT() + PREPREWARM_MINS; // Look forward...
  const uint_least16_t mm = (mm0 >= MINS_PER_DAY) ? (mm0 - MINS_PER_DAY) : mm0;

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    if(mm < e) { return(true); }
    }

  return(false);
  }
    1a0e:	df 91       	pop	r29
    1a10:	cf 91       	pop	r28
    1a12:	1f 91       	pop	r17
    1a14:	0f 91       	pop	r16
    1a16:	08 95       	ret

00001a18 <isAnyScheduleOnWARMNow()>:

// True iff any schedule is currently 'on'/'WARM' even when schedules overlap.
// May be relatively slow/expensive.
// Can be used to suppress all 'off' activity except for the final one.
// Can be used to suppress set-backs during on times.
bool isAnyScheduleOnWARMNow()
    1a18:	0f 93       	push	r16
    1a1a:	1f 93       	push	r17
    1a1c:	cf 93       	push	r28
    1a1e:	df 93       	push	r29
  {
  const uint_least16_t mm = getMinutesSinceMidnightLT();
    1a20:	0e 94 1f 0c 	call	0x183e	; 0x183e <getMinutesSinceMidnightLT()>
    1a24:	8c 01       	movw	r16, r24

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    1a26:	80 e0       	ldi	r24, 0x00	; 0
    1a28:	0e 94 86 0c 	call	0x190c	; 0x190c <getSimpleScheduleOn(unsigned char)>
    1a2c:	ec 01       	movw	r28, r24
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    1a2e:	08 17       	cp	r16, r24
    1a30:	19 07       	cpc	r17, r25
    1a32:	68 f0       	brcs	.+26     	; 0x1a4e <isAnyScheduleOnWARMNow()+0x36>
    uint_least16_t e = getSimpleScheduleOff(which);
    1a34:	80 e0       	ldi	r24, 0x00	; 0
    1a36:	0e 94 a6 0c 	call	0x194c	; 0x194c <getSimpleScheduleOff(unsigned char)>
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    1a3a:	8c 17       	cp	r24, r28
    1a3c:	9d 07       	cpc	r25, r29
    1a3e:	20 f0       	brcs	.+8      	; 0x1a48 <isAnyScheduleOnWARMNow()+0x30>
    if(mm < e) { return(true); }
    1a40:	08 17       	cp	r16, r24
    1a42:	19 07       	cpc	r17, r25
    1a44:	20 f4       	brcc	.+8      	; 0x1a4e <isAnyScheduleOnWARMNow()+0x36>
    1a46:	17 c0       	rjmp	.+46     	; 0x1a76 <isAnyScheduleOnWARMNow()+0x5e>
  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    uint_least16_t e = getSimpleScheduleOff(which);
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    1a48:	80 56       	subi	r24, 0x60	; 96
    1a4a:	9a 4f       	sbci	r25, 0xFA	; 250
    1a4c:	f9 cf       	rjmp	.-14     	; 0x1a40 <isAnyScheduleOnWARMNow()+0x28>
  {
  const uint_least16_t mm = getMinutesSinceMidnightLT();

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	0e 94 86 0c 	call	0x190c	; 0x190c <getSimpleScheduleOn(unsigned char)>
    1a54:	ec 01       	movw	r28, r24
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    1a56:	08 17       	cp	r16, r24
    1a58:	19 07       	cpc	r17, r25
    1a5a:	58 f0       	brcs	.+22     	; 0x1a72 <isAnyScheduleOnWARMNow()+0x5a>
    uint_least16_t e = getSimpleScheduleOff(which);
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	0e 94 a6 0c 	call	0x194c	; 0x194c <getSimpleScheduleOff(unsigned char)>
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    1a62:	8c 17       	cp	r24, r28
    1a64:	9d 07       	cpc	r25, r29
    1a66:	10 f4       	brcc	.+4      	; 0x1a6c <isAnyScheduleOnWARMNow()+0x54>
    1a68:	80 56       	subi	r24, 0x60	; 96
    1a6a:	9a 4f       	sbci	r25, 0xFA	; 250
    if(mm < e) { return(true); }
    1a6c:	08 17       	cp	r16, r24
    1a6e:	19 07       	cpc	r17, r25
    1a70:	10 f0       	brcs	.+4      	; 0x1a76 <isAnyScheduleOnWARMNow()+0x5e>
    1a72:	80 e0       	ldi	r24, 0x00	; 0
    1a74:	01 c0       	rjmp	.+2      	; 0x1a78 <isAnyScheduleOnWARMNow()+0x60>
// Can be used to suppress set-backs during on times.
bool isAnyScheduleOnWARMNow()
  {
  const uint_least16_t mm = getMinutesSinceMidnightLT();

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    if(mm < e) { return(true); }
    }

  return(false);
  }
    1a78:	df 91       	pop	r29
    1a7a:	cf 91       	pop	r28
    1a7c:	1f 91       	pop	r17
    1a7e:	0f 91       	pop	r16
    1a80:	08 95       	ret

00001a82 <addEntropyToPool(unsigned char, unsigned char)>:
//   * estBits estimated number of truely securely random bits in range [0,8].
// Not thread-/ISR- safe.
void addEntropyToPool(uint8_t data, uint8_t estBits)
  {
  // TODO: no real entropy pool yet.
  seedRNG8(data, cycleCountCPU(), getSubCycleTime());
    1a82:	66 b5       	in	r22, 0x26	; 38
    1a84:	40 91 b2 00 	lds	r20, 0x00B2
    1a88:	0e 94 26 0b 	call	0x164c	; 0x164c <seedRNG8(unsigned char, unsigned char, unsigned char)>
  }
    1a8c:	08 95       	ret

00001a8e <getSecureRandomByte()>:
// Generate 'secure' new random byte.
// This should be essentially all entropy and unguessable.
// Likely to be slow and may force some peripheral I/O.
// Runtime details are likely to be intimately dependent on hardware implementation.
// Not thread-/ISR- safe.
uint8_t getSecureRandomByte()
    1a8e:	0f 93       	push	r16
    1a90:	1f 93       	push	r17
    1a92:	df 93       	push	r29
    1a94:	cf 93       	push	r28
    1a96:	0f 92       	push	r0
    1a98:	cd b7       	in	r28, 0x3d	; 61
    1a9a:	de b7       	in	r29, 0x3e	; 62
  {
  // Use various real noise sources and whiten with PRNG and other counters.
  // Mix the bits also to help ensure good distribution.
  uint8_t w1 = clockJitterEntropyByte(); // Real noise.
    1a9c:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <clockJitterEntropyByte()>
  w1 ^= (w1 << 4); // Mix.
    1aa0:	08 2f       	mov	r16, r24
    1aa2:	02 95       	swap	r16
    1aa4:	00 7f       	andi	r16, 0xF0	; 240
    1aa6:	08 27       	eor	r16, r24
  w1 ^= noisyADCRead(); // Real noise.
    1aa8:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <noisyADCRead()>
    1aac:	08 27       	eor	r16, r24
  w1 ^= (w1 >> 4); // Mix.
    1aae:	10 2f       	mov	r17, r16
    1ab0:	12 95       	swap	r17
    1ab2:	1f 70       	andi	r17, 0x0F	; 15
    1ab4:	10 27       	eor	r17, r16
  const uint8_t v = w1;
    1ab6:	19 83       	std	Y+1, r17	; 0x01
  w1 ^= randRNG8(); // Whiten.
    1ab8:	0e 94 41 0b 	call	0x1682	; 0x1682 <randRNG8()>
    1abc:	18 27       	eor	r17, r24
  w1 ^= (w1 << 3); // Mix.
    1abe:	81 2f       	mov	r24, r17
    1ac0:	88 0f       	add	r24, r24
    1ac2:	88 0f       	add	r24, r24
    1ac4:	88 0f       	add	r24, r24
    1ac6:	81 27       	eor	r24, r17
  w1 ^=  _crc_ibutton_update(cycleCountCPU() ^ (uint8_t)(intptr_t)&v, ++count8 - v); // Whiten.
    1ac8:	96 b5       	in	r25, 0x26	; 38
    1aca:	40 91 29 02 	lds	r20, 0x0229
    1ace:	4f 5f       	subi	r20, 0xFF	; 255
    1ad0:	40 93 29 02 	sts	0x0229, r20
		"	brtc	2f" "\n\t"
		"	eor	%0, %2" "\n\t"
		"2:	dec	%1" "\n\t"
		"	brne	1b" "\n\t"
		: "=r" (__crc), "=d" (__i), "=d" (__pattern)
		: "0" (__crc), "r" (__data));
    1ad4:	9e 01       	movw	r18, r28
    1ad6:	2f 5f       	subi	r18, 0xFF	; 255
    1ad8:	3f 4f       	sbci	r19, 0xFF	; 255
    1ada:	92 27       	eor	r25, r18
    1adc:	29 81       	ldd	r18, Y+1	; 0x01
    1ade:	42 1b       	sub	r20, r18
    1ae0:	94 27       	eor	r25, r20
    1ae2:	28 e0       	ldi	r18, 0x08	; 8
    1ae4:	3c e8       	ldi	r19, 0x8C	; 140
    1ae6:	90 fb       	bst	r25, 0
    1ae8:	96 95       	lsr	r25
    1aea:	0e f4       	brtc	.+2      	; 0x1aee <getSecureRandomByte()+0x60>
    1aec:	93 27       	eor	r25, r19
    1aee:	2a 95       	dec	r18
    1af0:	d1 f7       	brne	.-12     	; 0x1ae6 <getSecureRandomByte()+0x58>
  return(w1);
  }
    1af2:	89 27       	eor	r24, r25
    1af4:	0f 90       	pop	r0
    1af6:	cf 91       	pop	r28
    1af8:	df 91       	pop	r29
    1afa:	1f 91       	pop	r17
    1afc:	0f 91       	pop	r16
    1afe:	08 95       	ret

00001b00 <serialPrintlnAndFlush()>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write line-end to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintlnAndFlush()
    1b00:	1f 93       	push	r17
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    1b02:	0e 94 ed 0a 	call	0x15da	; 0x15da <powerUpSerialIfDisabled()>
    1b06:	18 2f       	mov	r17, r24
  // Send the text.
  Serial.println();
    1b08:	80 ea       	ldi	r24, 0xA0	; 160
    1b0a:	93 e0       	ldi	r25, 0x03	; 3
    1b0c:	0e 94 96 18 	call	0x312c	; 0x312c <Print::println()>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    1b10:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    1b14:	11 23       	and	r17, r17
    1b16:	11 f0       	breq	.+4      	; 0x1b1c <serialPrintlnAndFlush()+0x1c>
    1b18:	0e 94 a2 0a 	call	0x1544	; 0x1544 <powerDownSerial()>
  }
    1b1c:	1f 91       	pop	r17
    1b1e:	08 95       	ret

00001b20 <serialPrintAndFlush(int, int)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) number to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(const int i, const int fmt)
    1b20:	df 92       	push	r13
    1b22:	ef 92       	push	r14
    1b24:	ff 92       	push	r15
    1b26:	0f 93       	push	r16
    1b28:	1f 93       	push	r17
    1b2a:	8c 01       	movw	r16, r24
    1b2c:	7b 01       	movw	r14, r22
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    1b2e:	0e 94 ed 0a 	call	0x15da	; 0x15da <powerUpSerialIfDisabled()>
    1b32:	d8 2e       	mov	r13, r24
  // Send the character.
  Serial.print(i, fmt);
    1b34:	80 ea       	ldi	r24, 0xA0	; 160
    1b36:	93 e0       	ldi	r25, 0x03	; 3
    1b38:	b8 01       	movw	r22, r16
    1b3a:	a7 01       	movw	r20, r14
    1b3c:	0e 94 8a 19 	call	0x3314	; 0x3314 <Print::print(int, int)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    1b40:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    1b44:	dd 20       	and	r13, r13
    1b46:	11 f0       	breq	.+4      	; 0x1b4c <serialPrintAndFlush(int, int)+0x2c>
    1b48:	0e 94 a2 0a 	call	0x1544	; 0x1544 <powerDownSerial()>
  }
    1b4c:	1f 91       	pop	r17
    1b4e:	0f 91       	pop	r16
    1b50:	ff 90       	pop	r15
    1b52:	ef 90       	pop	r14
    1b54:	df 90       	pop	r13
    1b56:	08 95       	ret

00001b58 <serialPrintAndFlush(char const*)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (read-only) string to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(const char * const text)
    1b58:	ff 92       	push	r15
    1b5a:	0f 93       	push	r16
    1b5c:	1f 93       	push	r17
    1b5e:	8c 01       	movw	r16, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    1b60:	0e 94 ed 0a 	call	0x15da	; 0x15da <powerUpSerialIfDisabled()>
    1b64:	f8 2e       	mov	r15, r24
  // Send the text.
  Serial.print(text);
    1b66:	80 ea       	ldi	r24, 0xA0	; 160
    1b68:	93 e0       	ldi	r25, 0x03	; 3
    1b6a:	b8 01       	movw	r22, r16
    1b6c:	0e 94 9d 19 	call	0x333a	; 0x333a <Print::print(char const*)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    1b70:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    1b74:	ff 20       	and	r15, r15
    1b76:	11 f0       	breq	.+4      	; 0x1b7c <serialPrintAndFlush(char const*)+0x24>
    1b78:	0e 94 a2 0a 	call	0x1544	; 0x1544 <powerDownSerial()>
  }
    1b7c:	1f 91       	pop	r17
    1b7e:	0f 91       	pop	r16
    1b80:	ff 90       	pop	r15
    1b82:	08 95       	ret

00001b84 <serialPrintAndFlush(__FlashStringHelper const*)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) string to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(__FlashStringHelper const * const text)
    1b84:	ff 92       	push	r15
    1b86:	0f 93       	push	r16
    1b88:	1f 93       	push	r17
    1b8a:	8c 01       	movw	r16, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    1b8c:	0e 94 ed 0a 	call	0x15da	; 0x15da <powerUpSerialIfDisabled()>
    1b90:	f8 2e       	mov	r15, r24
  // Send the text.
  Serial.print(text);
    1b92:	80 ea       	ldi	r24, 0xA0	; 160
    1b94:	93 e0       	ldi	r25, 0x03	; 3
    1b96:	b8 01       	movw	r22, r16
    1b98:	0e 94 73 18 	call	0x30e6	; 0x30e6 <Print::print(__FlashStringHelper const*)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    1b9c:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    1ba0:	ff 20       	and	r15, r15
    1ba2:	11 f0       	breq	.+4      	; 0x1ba8 <serialPrintAndFlush(__FlashStringHelper const*)+0x24>
    1ba4:	0e 94 a2 0a 	call	0x1544	; 0x1544 <powerDownSerial()>
  }
    1ba8:	1f 91       	pop	r17
    1baa:	0f 91       	pop	r16
    1bac:	ff 90       	pop	r15
    1bae:	08 95       	ret

00001bb0 <serialPrintlnAndFlush(__FlashStringHelper const*)>:
// Flush to use for all serialPrintXXX() and DEBUG_PRINTXXX routines.
#define _flush() flushSerialSCTSensitive()

// Write a single (Flash-resident) string to serial followed by line-end and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintlnAndFlush(__FlashStringHelper const * const line)
    1bb0:	ff 92       	push	r15
    1bb2:	0f 93       	push	r16
    1bb4:	1f 93       	push	r17
    1bb6:	8c 01       	movw	r16, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    1bb8:	0e 94 ed 0a 	call	0x15da	; 0x15da <powerUpSerialIfDisabled()>
    1bbc:	f8 2e       	mov	r15, r24
  // Send the line of text followed by line end.
  Serial.println(line);
    1bbe:	80 ea       	ldi	r24, 0xA0	; 160
    1bc0:	93 e0       	ldi	r25, 0x03	; 3
    1bc2:	b8 01       	movw	r22, r16
    1bc4:	0e 94 b6 18 	call	0x316c	; 0x316c <Print::println(__FlashStringHelper const*)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    1bc8:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    1bcc:	ff 20       	and	r15, r15
    1bce:	11 f0       	breq	.+4      	; 0x1bd4 <serialPrintlnAndFlush(__FlashStringHelper const*)+0x24>
    1bd0:	0e 94 a2 0a 	call	0x1544	; 0x1544 <powerDownSerial()>
  }
    1bd4:	1f 91       	pop	r17
    1bd6:	0f 91       	pop	r16
    1bd8:	ff 90       	pop	r15
    1bda:	08 95       	ret

00001bdc <markUIControlUsed()>:
// Record local manual operation of a local physical UI control, eg not remote or via CLI.
// To be thread-safe, everything that this touches or calls must be.
// Thread-safe.
void markUIControlUsed()
  {
  statusChange = true; // Note user interaction with the system.
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	80 93 2b 02 	sts	0x022B, r24
  uiTimeoutM = UI_DEFAULT_TIMEOUT_M; // Ensure that UI controls are kept 'warm' for a little while.
    1be2:	92 e0       	ldi	r25, 0x02	; 2
    1be4:	90 93 2a 02 	sts	0x022A, r25
#define CLI_DEFAULT_TIMEOUT_M 2
static volatile uint8_t CLITimeoutM = CLI_DEFAULT_TIMEOUT_M;

// Reset CLI active timer to the full whack before it goes inactive again (ie makes CLI active for a while).
// Thread-safe.
void resetCLIActiveTimer() { CLITimeoutM = CLI_DEFAULT_TIMEOUT_M; }
    1be8:	90 93 24 01 	sts	0x0124, r25
    // Do not call based on internal/synthetic events.
    // Such evidence may include operation of buttons (etc) on the unit or PIR.
    // Do not call from (for example) 'on' schedule change.
    // Makes occupation immediately visible.
    // Thread-safe and ISR-safe.
    void markAsOccupied() { value = 100; occupationCountdownM = OCCUPATION_TIMEOUT_M; activityCountdownM = 2; }
    1bec:	84 e6       	ldi	r24, 0x64	; 100
    1bee:	80 93 ff 01 	sts	0x01FF, r24
    1bf2:	82 e3       	ldi	r24, 0x32	; 50
    1bf4:	80 93 00 02 	sts	0x0200, r24
    1bf8:	90 93 01 02 	sts	0x0201, r25
  uiTimeoutM = UI_DEFAULT_TIMEOUT_M; // Ensure that UI controls are kept 'warm' for a little while.
  // Make CLI active for a while (at some slight possibly-significant energy cost).
  resetCLIActiveTimer(); // Thread-safe.
  // User operation of controls locally is strong indication of presence.
  Occupancy.markAsOccupied(); // Thread-safe.
  }
    1bfc:	08 95       	ret

00001bfe <global constructors keyed to _Z5panicv>:
  '/',
  __DATE__[0], __DATE__[1], __DATE__[2],
  '/',
  __DATE__[4], __DATE__[5],
  '\0'
  };
    1bfe:	82 e3       	ldi	r24, 0x32	; 50
    1c00:	80 93 25 01 	sts	0x0125, r24
    1c04:	80 e3       	ldi	r24, 0x30	; 48
    1c06:	80 93 26 01 	sts	0x0126, r24
    1c0a:	91 e3       	ldi	r25, 0x31	; 49
    1c0c:	90 93 27 01 	sts	0x0127, r25
    1c10:	84 e3       	ldi	r24, 0x34	; 52
    1c12:	80 93 28 01 	sts	0x0128, r24
    1c16:	84 e4       	ldi	r24, 0x44	; 68
    1c18:	80 93 2a 01 	sts	0x012A, r24
    1c1c:	85 e6       	ldi	r24, 0x65	; 101
    1c1e:	80 93 2b 01 	sts	0x012B, r24
    1c22:	83 e6       	ldi	r24, 0x63	; 99
    1c24:	80 93 2c 01 	sts	0x012C, r24
    1c28:	90 93 2e 01 	sts	0x012E, r25
    1c2c:	85 e3       	ldi	r24, 0x35	; 53
    1c2e:	80 93 2f 01 	sts	0x012F, r24
//us apparent: 1408
//us apparent: 3776
//us apparent: 2816
#endif
#endif
  }
    1c32:	08 95       	ret

00001c34 <loop>:
#if defined(EST_CPU_DUTYCYCLE)
  const unsigned long usStart = micros();
#endif

#if defined(ALT_MAIN_LOOP) // Run alternative main loop.
  loopAlt();
    1c34:	0e 94 c7 01 	call	0x38e	; 0x38e <loopAlt()>
//us apparent: 1408
//us apparent: 3776
//us apparent: 2816
#endif
#endif
  }
    1c38:	08 95       	ret

00001c3a <serialPrintlnBuildVersion()>:
  };
// Version (code/board) information printed as one line to serial (with line-end, and flushed); machine- and human- parseable.
// Format: "board VXXXX REVY; code YYYY/Mmm/DD HH:MM:SS".
void serialPrintlnBuildVersion()
  {
  serialPrintAndFlush(F("board V0.2 REV"));
    1c3a:	8d e8       	ldi	r24, 0x8D	; 141
    1c3c:	92 e0       	ldi	r25, 0x02	; 2
    1c3e:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <serialPrintAndFlush(__FlashStringHelper const*)>
  serialPrintAndFlush(V0p2_REV);
    1c42:	87 e0       	ldi	r24, 0x07	; 7
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	6a e0       	ldi	r22, 0x0A	; 10
    1c48:	70 e0       	ldi	r23, 0x00	; 0
    1c4a:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <serialPrintAndFlush(int, int)>
  serialPrintAndFlush(F("; code $Id: V0p2_Main.ino 3864 2014-12-10 21:01:54Z damonhd $ ")); // Expect SVN to substitute the Id keyword here with svn:keywords property set.
    1c4e:	8e e4       	ldi	r24, 0x4E	; 78
    1c50:	92 e0       	ldi	r25, 0x02	; 2
    1c52:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <serialPrintAndFlush(__FlashStringHelper const*)>
  serialPrintAndFlush(_YYYYMmmDD);
    1c56:	85 e2       	ldi	r24, 0x25	; 37
    1c58:	91 e0       	ldi	r25, 0x01	; 1
    1c5a:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <serialPrintAndFlush(char const*)>
  serialPrintAndFlush(F(" " __TIME__));
    1c5e:	84 e4       	ldi	r24, 0x44	; 68
    1c60:	92 e0       	ldi	r25, 0x02	; 2
    1c62:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <serialPrintAndFlush(__FlashStringHelper const*)>
  serialPrintlnAndFlush();
    1c66:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <serialPrintlnAndFlush()>
  }
    1c6a:	08 95       	ret

00001c6c <panic()>:
// Tries not to use lots of energy so as to keep distress beacon running for a while.
void panic()
  {
#ifdef USE_MODULE_RFM22RADIOSIMPLE
  // Reset radio and go into low-power mode.
  RFM22PowerOnInit();
    1c6c:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <RFM22PowerOnInit()>
#endif
  // Power down almost everything else...
  minimisePowerWithoutSleep();
    1c70:	0e 94 4e 0a 	call	0x149c	; 0x149c <minimisePowerWithoutSleep()>
#ifdef LED_HEATCALL
  pinMode(LED_HEATCALL, OUTPUT);
#else
  pinMode(LED_HEATCALL_L, OUTPUT);
    1c74:	84 e0       	ldi	r24, 0x04	; 4
    1c76:	61 e0       	ldi	r22, 0x01	; 1
    1c78:	0e 94 39 15 	call	0x2a72	; 0x2a72 <pinMode>
#endif
  for( ; ; )
    {
    LED_HEATCALL_ON();
    1c7c:	5c 98       	cbi	0x0b, 4	; 11
// Very tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define VERYTINY_PAUSE_MS 5
static void inline veryTinyPause() { sleepLowPowerMs(VERYTINY_PAUSE_MS); }
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define TINY_PAUSE_MS 15
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    1c7e:	80 e0       	ldi	r24, 0x00	; 0
    1c80:	0e 94 c3 07 	call	0xf86	; 0xf86 <nap(signed char)>
    tinyPause();
    LED_HEATCALL_OFF();
    1c84:	5c 9a       	sbi	0x0b, 4	; 11
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define MEDIUM_PAUSE_MS 60
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
// Big low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define BIG_PAUSE_MS 120
static void inline bigPause() { nap(WDTO_120MS); } // 120ms vs 288ms nominal for PICAXE V0.09 impl.
    1c86:	83 e0       	ldi	r24, 0x03	; 3
    1c88:	0e 94 c3 07 	call	0xf86	; 0xf86 <nap(signed char)>
    1c8c:	f7 cf       	rjmp	.-18     	; 0x1c7c <panic()+0x10>

00001c8e <panic(__FlashStringHelper const*)>:
  }

// Panic with fixed message.
void panic(const __FlashStringHelper *s)
  {
  serialPrintlnAndFlush(s); // May fail.
    1c8e:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <serialPrintlnAndFlush(__FlashStringHelper const*)>
  panic();  
    1c92:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <panic()>
  }
    1c96:	08 95       	ret

00001c98 <setup>:
  }


// Setup routine: runs once after reset.
// Does some limited board self-test and will panic() if anything is obviously broken.
void setup()
    1c98:	0f 93       	push	r16
    1c9a:	1f 93       	push	r17
    1c9c:	df 93       	push	r29
    1c9e:	cf 93       	push	r28
    1ca0:	00 d0       	rcall	.+0      	; 0x1ca2 <setup+0xa>
    1ca2:	cd b7       	in	r28, 0x3d	; 61
    1ca4:	de b7       	in	r29, 0x3e	; 62
  {
  // Set appropriate low-power states, interrupts, etc, ASAP.
  powerSetup();
    1ca6:	0e 94 02 0b 	call	0x1604	; 0x1604 <powerSetup()>
    1caa:	0e e0       	ldi	r16, 0x0E	; 14
    1cac:	10 e0       	ldi	r17, 0x00	; 0
    1cae:	33 c0       	rjmp	.+102    	; 0x1d16 <setup+0x7e>
  {
  // Initialise all digital I/O to safe state ASAP and avoid floating lines where possible.
  // In absence of a specific alternative, drive low as an output to minimise consumption (eg from floating input).
  for(int i = 14; --i >= 0; ) // For all digital pins from 0 to 13 inclusive...
    {
    switch(i)
    1cb0:	05 30       	cpi	r16, 0x05	; 5
    1cb2:	11 05       	cpc	r17, r1
    1cb4:	61 f1       	breq	.+88     	; 0x1d0e <setup+0x76>
    1cb6:	06 30       	cpi	r16, 0x06	; 6
    1cb8:	11 05       	cpc	r17, r1
    1cba:	34 f4       	brge	.+12     	; 0x1cc8 <setup+0x30>
    1cbc:	17 fd       	sbrc	r17, 7
    1cbe:	14 c0       	rjmp	.+40     	; 0x1ce8 <setup+0x50>
    1cc0:	04 30       	cpi	r16, 0x04	; 4
    1cc2:	11 05       	cpc	r17, r1
    1cc4:	24 f1       	brlt	.+72     	; 0x1d0e <setup+0x76>
    1cc6:	17 c0       	rjmp	.+46     	; 0x1cf6 <setup+0x5e>
    1cc8:	09 30       	cpi	r16, 0x09	; 9
    1cca:	11 05       	cpc	r17, r1
    1ccc:	e9 f0       	breq	.+58     	; 0x1d08 <setup+0x70>
    1cce:	0a 30       	cpi	r16, 0x0A	; 10
    1cd0:	11 05       	cpc	r17, r1
    1cd2:	24 f4       	brge	.+8      	; 0x1cdc <setup+0x44>
    1cd4:	08 30       	cpi	r16, 0x08	; 8
    1cd6:	11 05       	cpc	r17, r1
    1cd8:	39 f4       	brne	.+14     	; 0x1ce8 <setup+0x50>
    1cda:	19 c0       	rjmp	.+50     	; 0x1d0e <setup+0x76>
    1cdc:	0a 30       	cpi	r16, 0x0A	; 10
    1cde:	11 05       	cpc	r17, r1
    1ce0:	b1 f0       	breq	.+44     	; 0x1d0e <setup+0x76>
    1ce2:	0c 30       	cpi	r16, 0x0C	; 12
    1ce4:	11 05       	cpc	r17, r1
    1ce6:	99 f0       	breq	.+38     	; 0x1d0e <setup+0x76>
      {
      // Low output is good safe low-power default.
      default: { digitalWrite(i, LOW); pinMode(i, OUTPUT); break; }
    1ce8:	80 2f       	mov	r24, r16
    1cea:	60 e0       	ldi	r22, 0x00	; 0
    1cec:	0e 94 78 15 	call	0x2af0	; 0x2af0 <digitalWrite>
    1cf0:	80 2f       	mov	r24, r16
    1cf2:	61 e0       	ldi	r22, 0x01	; 1
    1cf4:	0e c0       	rjmp	.+28     	; 0x1d12 <setup+0x7a>
      // Switch main UI LED on for the rest of initialisation...
#ifdef LED_HEATCALL
      case LED_HEATCALL: { pinMode(LED_HEATCALL, OUTPUT); digitalWrite(LED_HEATCALL, HIGH); break; }
#endif
#ifdef LED_HEATCALL_L
      case LED_HEATCALL_L: { pinMode(LED_HEATCALL_L, OUTPUT); digitalWrite(LED_HEATCALL_L, LOW); break; }
    1cf6:	84 e0       	ldi	r24, 0x04	; 4
    1cf8:	61 e0       	ldi	r22, 0x01	; 1
    1cfa:	0e 94 39 15 	call	0x2a72	; 0x2a72 <pinMode>
    1cfe:	84 e0       	ldi	r24, 0x04	; 4
    1d00:	60 e0       	ldi	r22, 0x00	; 0
    1d02:	0e 94 78 15 	call	0x2af0	; 0x2af0 <digitalWrite>
    1d06:	07 c0       	rjmp	.+14     	; 0x1d16 <setup+0x7e>
#endif

#ifdef PIN_RFM_NIRQ 
      // Set as input to avoid contention current.
      case PIN_RFM_NIRQ: { pinMode(PIN_RFM_NIRQ, INPUT); break; }
    1d08:	89 e0       	ldi	r24, 0x09	; 9
    1d0a:	60 e0       	ldi	r22, 0x00	; 0
    1d0c:	02 c0       	rjmp	.+4      	; 0x1d12 <setup+0x7a>
#ifdef PIN_SERIAL_RX
      // Weak TX and RX pull-up empirically found to produce lowest leakage current
      // when 2xAA NiMH battery powered and connected to TTL-232R-3V3 USB lead.
      case PIN_SERIAL_RX: case PIN_SERIAL_TX:
#endif
        { pinMode(i, INPUT_PULLUP); break; }
    1d0e:	80 2f       	mov	r24, r16
    1d10:	62 e0       	ldi	r22, 0x02	; 2
    1d12:	0e 94 39 15 	call	0x2a72	; 0x2a72 <pinMode>
// Call this ASAP in setup() to configure I/O safely for the board, avoid pins floating, etc.
static inline void IOSetup()
  {
  // Initialise all digital I/O to safe state ASAP and avoid floating lines where possible.
  // In absence of a specific alternative, drive low as an output to minimise consumption (eg from floating input).
  for(int i = 14; --i >= 0; ) // For all digital pins from 0 to 13 inclusive...
    1d16:	01 50       	subi	r16, 0x01	; 1
    1d18:	10 40       	sbci	r17, 0x00	; 0
    1d1a:	17 ff       	sbrs	r17, 7
    1d1c:	c9 cf       	rjmp	.-110    	; 0x1cb0 <setup+0x18>
    }

#ifdef MOTOR_DRIVE_ML
  // Weakly pull up both motor REV7 H-bridge driver lines by default.
  // Safe for all boards and may reduce parasitic floating power consumption on non-REV7 boards.
  pinMode(MOTOR_DRIVE_ML, INPUT_PULLUP);
    1d1e:	80 e1       	ldi	r24, 0x10	; 16
    1d20:	62 e0       	ldi	r22, 0x02	; 2
    1d22:	0e 94 39 15 	call	0x2a72	; 0x2a72 <pinMode>
  pinMode(MOTOR_DRIVE_MR, INPUT_PULLUP);
    1d26:	81 e1       	ldi	r24, 0x11	; 17
    1d28:	62 e0       	ldi	r22, 0x02	; 2
    1d2a:	0e 94 39 15 	call	0x2a72	; 0x2a72 <pinMode>

  // IO setup for safety, eg to avoid pins floating.
  IOSetup();

  // Restore previous RTC state if available.
  restoreRTC();
    1d2e:	0e 94 35 0c 	call	0x186a	; 0x186a <restoreRTC()>
  // TODO: consider code to calibrate the internal RC oscillator against the xtal, eg to keep serial comms happy, eg http://www.avrfreaks.net/index.php?name=PNphpBB2&file=printview&t=36237&start=0

  serialPrintAndFlush(F("\r\nOpenTRV booting: ")); // Leading CRLF to clear leading junk, eg from bootloader.
    1d32:	81 e9       	ldi	r24, 0x91	; 145
    1d34:	91 e0       	ldi	r25, 0x01	; 1
    1d36:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <serialPrintAndFlush(__FlashStringHelper const*)>
    serialPrintlnBuildVersion();
    1d3a:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <serialPrintlnBuildVersion()>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1d3e:	f9 99       	sbic	0x1f, 1	; 31
    1d40:	fe cf       	rjmp	.-4      	; 0x1d3e <setup+0xa6>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1d42:	86 e0       	ldi	r24, 0x06	; 6
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	92 bd       	out	0x22, r25	; 34
    1d48:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1d4a:	f8 9a       	sbi	0x1f, 0	; 31
    1d4c:	10 b5       	in	r17, 0x20	; 32
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    1d4e:	f9 99       	sbic	0x1f, 1	; 31
    1d50:	fe cf       	rjmp	.-4      	; 0x1d4e <setup+0xb6>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    1d52:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1d54:	86 e0       	ldi	r24, 0x06	; 6
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	92 bd       	out	0x22, r25	; 34
    1d5a:	81 bd       	out	0x21, r24	; 33

  // Count resets to detect unexpected crashes/restarts.
  const uint8_t oldResetCount = eeprom_read_byte((uint8_t *)EE_START_RESET_COUNT);
  eeprom_write_byte((uint8_t *)EE_START_RESET_COUNT, 1 + oldResetCount);
    1d5c:	1f 5f       	subi	r17, 0xFF	; 255
#endif
    EEDR = __value;
    1d5e:	10 bd       	out	0x20, r17	; 32
    1d60:	11 50       	subi	r17, 0x01	; 1
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    1d62:	0f b6       	in	r0, 0x3f	; 63
    1d64:	f8 94       	cli
    1d66:	fa 9a       	sbi	0x1f, 2	; 31
    1d68:	f9 9a       	sbi	0x1f, 1	; 31
    1d6a:	0f be       	out	0x3f, r0	; 63

#ifdef DEBUG
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("DEBUG mode with serial logging");
    1d6c:	82 e7       	ldi	r24, 0x72	; 114
    1d6e:	91 e0       	ldi	r25, 0x01	; 1
    1d70:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif
#ifdef DEBUG
  DEBUG_SERIAL_PRINT_FLASHSTRING("Resets: ");
    1d74:	89 e6       	ldi	r24, 0x69	; 105
    1d76:	91 e0       	ldi	r25, 0x01	; 1
    1d78:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(oldResetCount);
    1d7c:	81 2f       	mov	r24, r17
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	6a e0       	ldi	r22, 0x0A	; 10
    1d82:	70 e0       	ldi	r23, 0x00	; 0
    1d84:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    1d88:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <serialPrintlnAndFlush()>
    DEBUG_SERIAL_PRINT(overruns);
    DEBUG_SERIAL_PRINTLN();
    }
#endif
  // Compute approx free RAM: see http://jeelabs.org/2011/05/22/atmega-memory-use/
  DEBUG_SERIAL_PRINT_FLASHSTRING("Free RAM: ");
    1d8c:	8e e5       	ldi	r24, 0x5E	; 94
    1d8e:	91 e0       	ldi	r25, 0x01	; 1
    1d90:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <serialPrintAndFlush(__FlashStringHelper const*)>
  extern int __heap_start, *__brkval;
  int x;
  DEBUG_SERIAL_PRINT((int) &x - (__brkval == 0 ? (int) &__heap_start : (int) __brkval));
    1d94:	80 91 cb 03 	lds	r24, 0x03CB
    1d98:	90 91 cc 03 	lds	r25, 0x03CC
    1d9c:	00 97       	sbiw	r24, 0x00	; 0
    1d9e:	11 f0       	breq	.+4      	; 0x1da4 <setup+0x10c>
    1da0:	9c 01       	movw	r18, r24
    1da2:	02 c0       	rjmp	.+4      	; 0x1da8 <setup+0x110>
    1da4:	2f ec       	ldi	r18, 0xCF	; 207
    1da6:	33 e0       	ldi	r19, 0x03	; 3
    1da8:	ce 01       	movw	r24, r28
    1daa:	01 96       	adiw	r24, 0x01	; 1
    1dac:	82 1b       	sub	r24, r18
    1dae:	93 0b       	sbc	r25, r19
    1db0:	6a e0       	ldi	r22, 0x0A	; 10
    1db2:	70 e0       	ldi	r23, 0x00	; 0
    1db4:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    1db8:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <serialPrintlnAndFlush()>
#if defined(ALT_MAIN_LOOP)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("ALTERNATE MAIN LOOP WILL BE RUN...");
    1dbc:	8b e3       	ldi	r24, 0x3B	; 59
    1dbe:	91 e0       	ldi	r25, 0x01	; 1
    1dc0:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <serialPrintlnAndFlush(__FlashStringHelper const*)>

// Do not do normal POST if running alternate main loop.
// POST may take too long and do unwanted things,
// especially for non-standard hardware setup.
#if defined(ALT_MAIN_LOOP)
  POSTalt(); // Do alternate POST and setup if required.
    1dc4:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <POSTalt()>


  // Ensure that the unique node ID is set up (mainly on first use).
  // Have one attempt (don't want to stress an already failing EEPROM) to force-reset if not good, then panic.
  // Needs to have had entropy gathered, etc.
  if(!ensureIDCreated())
    1dc8:	80 e0       	ldi	r24, 0x00	; 0
    1dca:	0e 94 c0 06 	call	0xd80	; 0xd80 <ensureIDCreated(bool)>
    1dce:	88 23       	and	r24, r24
    1dd0:	49 f4       	brne	.+18     	; 0x1de4 <setup+0x14c>
    {
    if(!ensureIDCreated(true)) // Force reset.
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	0e 94 c0 06 	call	0xd80	; 0xd80 <ensureIDCreated(bool)>
    1dd8:	88 23       	and	r24, r24
    1dda:	21 f4       	brne	.+8      	; 0x1de4 <setup+0x14c>
      { panic(F("Bad ID and cannot reset.")); }
    1ddc:	82 e2       	ldi	r24, 0x22	; 34
    1dde:	91 e0       	ldi	r25, 0x01	; 1
    1de0:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <panic(__FlashStringHelper const*)>
    }


  // Initialised: turn heatcall UI LED off.
//  pinMode(LED_HEATCALL, OUTPUT);
  LED_HEATCALL_OFF();
    1de4:	5c 9a       	sbi	0x0b, 4	; 11
  // Report initial status.
  serialStatusReport();
  // Do OpenTRV-specific (late) setup.
  setupOpenTRV();
#endif
  }
    1de6:	0f 90       	pop	r0
    1de8:	0f 90       	pop	r0
    1dea:	cf 91       	pop	r28
    1dec:	df 91       	pop	r29
    1dee:	1f 91       	pop	r17
    1df0:	0f 91       	pop	r16
    1df2:	08 95       	ret

00001df4 <AmbientLight::preferredPollInterval_s() const>:
    // Potentially expensive/slow.
    // Not thread-safe nor usable within ISRs (Interrupt Service Routines).
    virtual uint8_t read();

    // Preferred poll interval (in seconds); should bve called at constant rate, usually 1/60s.
    virtual uint8_t preferredPollInterval_s() const { return(60); }
    1df4:	8c e3       	ldi	r24, 0x3C	; 60
    1df6:	08 95       	ret

00001df8 <AmbientLight::tag() const>:

    // Returns a suggested (JSON) tag/field/key name including units of get(); NULL means no recommended tag.
    // The lifetime of the pointed-to text must be at least that of the Sensor instance.
    virtual const char *tag() const { return("L"); }
    1df8:	8c e1       	ldi	r24, 0x1C	; 28
    1dfa:	91 e0       	ldi	r25, 0x01	; 1
    1dfc:	08 95       	ret

00001dfe <RoomTemperatureC16::preferredPollInterval_s() const>:
    // Not thread-safe nor usable within ISRs (Interrupt Service Routines).
    virtual int read();

    // Preferred poll interval (in seconds).
    // If isFilteringOn() this should be called at a regular (slow) rate, usually 1/240s.
    virtual uint8_t preferredPollInterval_s() const { return(240); }
    1dfe:	80 ef       	ldi	r24, 0xF0	; 240
    1e00:	08 95       	ret

00001e02 <RoomTemperatureC16::get() const>:

    // Return last value fetched by read(); undefined before first read().
    // Fast.
    // Not thread-safe nor usable within ISRs (Interrupt Service Routines).
    virtual int get() const { return(value); }
    1e02:	fc 01       	movw	r30, r24
    1e04:	82 81       	ldd	r24, Z+2	; 0x02
    1e06:	93 81       	ldd	r25, Z+3	; 0x03
    1e08:	08 95       	ret

00001e0a <RoomTemperatureC16::tag() const>:

    // Returns a suggested (JSON) tag/field/key name including units of get(); NULL means no recommended tag.
    // The lifetime of the pointed-to text must be at least that of the Sensor instance.
    virtual const char *tag() const { return("T|C16"); }
    1e0a:	8e e1       	ldi	r24, 0x1E	; 30
    1e0c:	91 e0       	ldi	r25, 0x01	; 1
    1e0e:	08 95       	ret

00001e10 <ValveMotorDirectV1::isRecalibrating() const>:

    virtual uint8_t read();

    // Returns true if (re)calibrating/(re)initialising/(re)syncing.
    // The target valve position is not lost while this is true.
    virtual bool isRecalibrating() const { return(0 == clicksFullTravel); } // Not yet calibrated.
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	fc 01       	movw	r30, r24
    1e14:	83 81       	ldd	r24, Z+3	; 0x03
    1e16:	94 81       	ldd	r25, Z+4	; 0x04
    1e18:	89 2b       	or	r24, r25
    1e1a:	09 f4       	brne	.+2      	; 0x1e1e <ValveMotorDirectV1::isRecalibrating() const+0xe>
    1e1c:	21 e0       	ldi	r18, 0x01	; 1
    1e1e:	82 2f       	mov	r24, r18
    1e20:	08 95       	ret

00001e22 <RoomTemperatureC16::getRecentMaxRaw() const>:

  return(value);
  }

// Get recent maximum raw value.
int RoomTemperatureC16::getRecentMaxRaw() const
    1e22:	dc 01       	movw	r26, r24
  {
  int result = prev[0];
    1e24:	14 96       	adiw	r26, 0x04	; 4
    1e26:	2d 91       	ld	r18, X+
    1e28:	3c 91       	ld	r19, X
    1e2a:	15 97       	sbiw	r26, 0x05	; 5
    1e2c:	88 e0       	ldi	r24, 0x08	; 8
    1e2e:	0e c0       	rjmp	.+28     	; 0x1e4c <RoomTemperatureC16::getRecentMaxRaw() const+0x2a>
  const size_t N = sizeof(prev)/sizeof(prev[0]);
  for(uint8_t i = N; --i > 0; )
    1e30:	e8 2f       	mov	r30, r24
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	32 96       	adiw	r30, 0x02	; 2
    1e36:	ee 0f       	add	r30, r30
    1e38:	ff 1f       	adc	r31, r31
    1e3a:	ea 0f       	add	r30, r26
    1e3c:	fb 1f       	adc	r31, r27
    1e3e:	01 90       	ld	r0, Z+
    1e40:	f0 81       	ld	r31, Z
    1e42:	e0 2d       	mov	r30, r0
    1e44:	2e 17       	cp	r18, r30
    1e46:	3f 07       	cpc	r19, r31
    1e48:	0c f4       	brge	.+2      	; 0x1e4c <RoomTemperatureC16::getRecentMaxRaw() const+0x2a>
    1e4a:	9f 01       	movw	r18, r30
    1e4c:	81 50       	subi	r24, 0x01	; 1
    1e4e:	81 f7       	brne	.-32     	; 0x1e30 <RoomTemperatureC16::getRecentMaxRaw() const+0xe>
    { if(prev[i] > result) { result = prev[i]; } }
  return(result);
  }
    1e50:	c9 01       	movw	r24, r18
    1e52:	08 95       	ret

00001e54 <RoomTemperatureC16::getRecentMinRaw() const>:

// Get recent minimum raw value.
int RoomTemperatureC16::getRecentMinRaw() const
    1e54:	dc 01       	movw	r26, r24
  {
  int result = prev[0];
    1e56:	14 96       	adiw	r26, 0x04	; 4
    1e58:	2d 91       	ld	r18, X+
    1e5a:	3c 91       	ld	r19, X
    1e5c:	15 97       	sbiw	r26, 0x05	; 5
    1e5e:	88 e0       	ldi	r24, 0x08	; 8
    1e60:	0e c0       	rjmp	.+28     	; 0x1e7e <RoomTemperatureC16::getRecentMinRaw() const+0x2a>
  const size_t N = sizeof(prev)/sizeof(prev[0]);
  for(uint8_t i = N; --i > 0; )
    1e62:	e8 2f       	mov	r30, r24
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	32 96       	adiw	r30, 0x02	; 2
    1e68:	ee 0f       	add	r30, r30
    1e6a:	ff 1f       	adc	r31, r31
    1e6c:	ea 0f       	add	r30, r26
    1e6e:	fb 1f       	adc	r31, r27
    1e70:	01 90       	ld	r0, Z+
    1e72:	f0 81       	ld	r31, Z
    1e74:	e0 2d       	mov	r30, r0
    1e76:	e2 17       	cp	r30, r18
    1e78:	f3 07       	cpc	r31, r19
    1e7a:	0c f4       	brge	.+2      	; 0x1e7e <RoomTemperatureC16::getRecentMinRaw() const+0x2a>
    1e7c:	9f 01       	movw	r18, r30
    1e7e:	81 50       	subi	r24, 0x01	; 1
    1e80:	81 f7       	brne	.-32     	; 0x1e62 <RoomTemperatureC16::getRecentMinRaw() const+0xe>
    { if(prev[i] < result) { result = prev[i]; } }
  return(result);
  }
    1e82:	c9 01       	movw	r24, r18
    1e84:	08 95       	ret

00001e86 <Sensor<int>::isValid(int) const>:
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual T get() const = 0;

    // Returns true if this sensor reading value passed is potentially valid, eg in-range.
    // Default is to always return true, ie all values potentially valid.
    virtual bool isValid(T value) const { return(true); }
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	08 95       	ret

00001e8a <Sensor<int>::handleInterruptSimple()>:
    // Must be fast and ISR (Interrupt Service Routine) safe.
    // Returns true if interrupt was successfully handled and cleared
    // else another interrupt handler in the chain may be called
    // to attempt to clear the interrupt.
    // By default does nothing (and returns false).
    virtual bool handleInterruptSimple() { return(false); }
    1e8a:	80 e0       	ldi	r24, 0x00	; 0
    1e8c:	08 95       	ret

00001e8e <Sensor<int>::begin()>:

    // Begin access to this sensor if applicable and not already begun.
    // Returns true if it needed to be begun.
    // Allows logic to end() if required at the end of a block, etc.
    // Defaults to do nothing (and return false).
    virtual bool begin() { return(false); }
    1e8e:	80 e0       	ldi	r24, 0x00	; 0
    1e90:	08 95       	ret

00001e92 <Sensor<int>::isAvailable() const>:

    // Returns true if this sensor is currently available.
    // True by default unless implementation overrides.
    // For those sensors that need starting this will be false before begin().
    virtual bool isAvailable() const { return(true); }
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	08 95       	ret

00001e96 <Sensor<int>::end()>:

    // End access to this sensor if applicable and not already ended.
    // Returns true if it needed to be ended.
    // Defaults to do nothing (and return false).
    virtual bool end() { return(false); }
    1e96:	80 e0       	ldi	r24, 0x00	; 0
    1e98:	08 95       	ret

00001e9a <global constructors keyed to _ZN12AmbientLight4readEv>:
  {
  protected:
      volatile uint8_t value;

      // By default initialise the value to zero.
      SimpleTSUint8Sensor() : value(0) { }
    1e9a:	10 92 2e 02 	sts	0x022E, r1
// http://www.vishay.com/docs/84154/appnotesensors.pdf

#ifndef OMIT_MODULE_LDROCCUPANCYDETECTION
// Sensor for ambient light level; 0 is dark, 255 is bright.
class AmbientLight : public SimpleTSUint8Sensor
  {
    1e9e:	89 ec       	ldi	r24, 0xC9	; 201
    1ea0:	91 e0       	ldi	r25, 0x01	; 1
    1ea2:	90 93 2d 02 	sts	0x022D, r25
    1ea6:	80 93 2c 02 	sts	0x022C, r24
  }



// Initialise (minimally).
RoomTemperatureC16::RoomTemperatureC16() : value(0), filteringOn(false)
    1eaa:	83 eb       	ldi	r24, 0xB3	; 179
    1eac:	91 e0       	ldi	r25, 0x01	; 1
    1eae:	90 93 33 02 	sts	0x0233, r25
    1eb2:	80 93 32 02 	sts	0x0232, r24
    1eb6:	10 92 35 02 	sts	0x0235, r1
    1eba:	10 92 34 02 	sts	0x0234, r1
    1ebe:	10 92 46 02 	sts	0x0246, r1
  {
  // Indicate not yet fully initialised.
  prev[0] = INT_MIN;
    1ec2:	80 e0       	ldi	r24, 0x00	; 0
    1ec4:	90 e8       	ldi	r25, 0x80	; 128
    1ec6:	90 93 37 02 	sts	0x0237, r25
    1eca:	80 93 36 02 	sts	0x0236, r24
    1ece:	10 92 49 02 	sts	0x0249, r1
    // Raw pot value [0,1023] if extra precision is required.
    uint16_t raw;

  public:
    // Initialise to cautious values.
    TemperaturePot() : raw(0) { }
    1ed2:	8d e9       	ldi	r24, 0x9D	; 157
    1ed4:	91 e0       	ldi	r25, 0x01	; 1
    1ed6:	90 93 48 02 	sts	0x0248, r25
    1eda:	80 93 47 02 	sts	0x0247, r24
    1ede:	10 92 4b 02 	sts	0x024B, r1
    1ee2:	10 92 4a 02 	sts	0x024A, r1
    1ee6:	10 92 4e 02 	sts	0x024E, r1
    // Sets flags accordingly.
    // Does not provide any monitoring of stall, position encoding, etc.
    void motorDrive(motor_drive dir);

  public:
    ValveMotorDirectV1() : clicksFullTravel(0), clicksFromClosed(0), motorDriveStatus(motorOff) { }
    1eea:	8f e7       	ldi	r24, 0x7F	; 127
    1eec:	91 e0       	ldi	r25, 0x01	; 1
    1eee:	90 93 4d 02 	sts	0x024D, r25
    1ef2:	80 93 4c 02 	sts	0x024C, r24
    1ef6:	10 92 50 02 	sts	0x0250, r1
    1efa:	10 92 4f 02 	sts	0x024F, r1
    1efe:	10 92 52 02 	sts	0x0252, r1
    1f02:	10 92 51 02 	sts	0x0251, r1
    1f06:	10 92 54 02 	sts	0x0254, r1
    1f0a:	10 92 53 02 	sts	0x0253, r1
    motorDriveStatus = dir;
    }
  }

// Singleton implementation/instance.
ValveMotorDirectV1 ValveDirect;
    1f0e:	08 95       	ret

00001f10 <ValveMotorDirectV1::motorDrive(ValveMotorDirectV1::motor_drive)>:

// Turn motor off, or on for a given drive direction.
// This routine is very careful to avoid setting outputs into any illegal/'bad' state.
// Sets flags accordingly.
// Does not provide any monitoring of stall, position encoding, etc.
void ValveMotorDirectV1::motorDrive(const motor_drive dir)
    1f10:	0f 93       	push	r16
    1f12:	1f 93       	push	r17
    1f14:	cf 93       	push	r28
    1f16:	df 93       	push	r29
    1f18:	8c 01       	movw	r16, r24
    1f1a:	eb 01       	movw	r28, r22
  {
  // *** MUST NEVER HAVE L AND R LOW AT THE SAME TIME else board may be destroyed at worst. ***
  // Operates as quickly as reasonably possible, eg to move to stall detection quickly...
  // TODO: consider making atomic to block some interrupt-related accidents...
  // TODO: note that mapping between L/R and open/close not yet defined.
  switch(dir)
    1f1c:	61 30       	cpi	r22, 0x01	; 1
    1f1e:	71 05       	cpc	r23, r1
    1f20:	31 f0       	breq	.+12     	; 0x1f2e <ValveMotorDirectV1::motorDrive(ValveMotorDirectV1::motor_drive)+0x1e>
    1f22:	62 30       	cpi	r22, 0x02	; 2
    1f24:	71 05       	cpc	r23, r1
    1f26:	31 f4       	brne	.+12     	; 0x1f34 <ValveMotorDirectV1::motorDrive(ValveMotorDirectV1::motor_drive)+0x24>
    {
    case motorDriveOpening:
      {
      fastDigitalWrite(MOTOR_DRIVE_ML, HIGH); // Pull one side high *FIRST* for safety.
    1f28:	42 9a       	sbi	0x08, 2	; 8
      fastDigitalWrite(MOTOR_DRIVE_MR, LOW); // Pull other side side low after.
    1f2a:	43 98       	cbi	0x08, 3	; 8
    1f2c:	11 c0       	rjmp	.+34     	; 0x1f50 <ValveMotorDirectV1::motorDrive(ValveMotorDirectV1::motor_drive)+0x40>
      break; // Fall through to common case.
      }

    case motorDriveClosing:
      {
      fastDigitalWrite(MOTOR_DRIVE_MR, HIGH); // Pull one side high *FIRST* for safety.
    1f2e:	43 9a       	sbi	0x08, 3	; 8
      fastDigitalWrite(MOTOR_DRIVE_ML, LOW); // Pull other side side low after.
    1f30:	42 98       	cbi	0x08, 2	; 8
    1f32:	0e c0       	rjmp	.+28     	; 0x1f50 <ValveMotorDirectV1::motorDrive(ValveMotorDirectV1::motor_drive)+0x40>
     }

    case motorOff: default: // Explicit off, and default for safety.
      {
      // Everything off...
      fastDigitalWrite(MOTOR_DRIVE_MR, HIGH); // Belt and braces force pin logical output state high.
    1f34:	43 9a       	sbi	0x08, 3	; 8
      pinMode(MOTOR_DRIVE_MR, INPUT_PULLUP); // Switch to weak pull-up; slow but possibly marginally safer.
    1f36:	81 e1       	ldi	r24, 0x11	; 17
    1f38:	62 e0       	ldi	r22, 0x02	; 2
    1f3a:	0e 94 39 15 	call	0x2a72	; 0x2a72 <pinMode>
      fastDigitalWrite(MOTOR_DRIVE_ML, HIGH); // Belt and braces force pin logical output state high.
    1f3e:	42 9a       	sbi	0x08, 2	; 8
      pinMode(MOTOR_DRIVE_ML, INPUT_PULLUP); // Switch to weak pull-up; slow but possibly marginally safer.
    1f40:	80 e1       	ldi	r24, 0x10	; 16
    1f42:	62 e0       	ldi	r22, 0x02	; 2
    1f44:	0e 94 39 15 	call	0x2a72	; 0x2a72 <pinMode>
      motorDriveStatus = motorOff; // Ensure value state even if 'dir' invalid.
    1f48:	f8 01       	movw	r30, r16
    1f4a:	10 86       	std	Z+8, r1	; 0x08
    1f4c:	17 82       	std	Z+7, r1	; 0x07
    1f4e:	11 c0       	rjmp	.+34     	; 0x1f72 <ValveMotorDirectV1::motorDrive(ValveMotorDirectV1::motor_drive)+0x62>
    }

  // If state has changed to new 'active' state,
  // force both lines to outputs (which may be relatively slow)
  // and update this instance's state.
  if(motorDriveStatus != dir) 
    1f50:	f8 01       	movw	r30, r16
    1f52:	87 81       	ldd	r24, Z+7	; 0x07
    1f54:	90 85       	ldd	r25, Z+8	; 0x08
    1f56:	8c 17       	cp	r24, r28
    1f58:	9d 07       	cpc	r25, r29
    1f5a:	59 f0       	breq	.+22     	; 0x1f72 <ValveMotorDirectV1::motorDrive(ValveMotorDirectV1::motor_drive)+0x62>
    {
    pinMode(MOTOR_DRIVE_ML, OUTPUT);
    1f5c:	80 e1       	ldi	r24, 0x10	; 16
    1f5e:	61 e0       	ldi	r22, 0x01	; 1
    1f60:	0e 94 39 15 	call	0x2a72	; 0x2a72 <pinMode>
    pinMode(MOTOR_DRIVE_MR, OUTPUT);
    1f64:	81 e1       	ldi	r24, 0x11	; 17
    1f66:	61 e0       	ldi	r22, 0x01	; 1
    1f68:	0e 94 39 15 	call	0x2a72	; 0x2a72 <pinMode>
    motorDriveStatus = dir;
    1f6c:	f8 01       	movw	r30, r16
    1f6e:	d0 87       	std	Z+8, r29	; 0x08
    1f70:	c7 83       	std	Z+7, r28	; 0x07
    }
  }
    1f72:	df 91       	pop	r29
    1f74:	cf 91       	pop	r28
    1f76:	1f 91       	pop	r17
    1f78:	0f 91       	pop	r16
    1f7a:	08 95       	ret

00001f7c <ValveMotorDirectV1::read()>:


#ifdef DIRECT_MOTOR_DRIVE_V1
// Actuator/driver for direct local (radiator) valve motor control.

uint8_t ValveMotorDirectV1::read()
    1f7c:	9c 01       	movw	r18, r24
  {
    // Toggle just for fun...
    static bool open;
    open = !open;
    1f7e:	80 91 55 02 	lds	r24, 0x0255
    1f82:	91 e0       	ldi	r25, 0x01	; 1
    1f84:	89 27       	eor	r24, r25
    1f86:	80 93 55 02 	sts	0x0255, r24
    motorDrive(open ? motorDriveOpening : motorDriveClosing);
    1f8a:	88 23       	and	r24, r24
    1f8c:	19 f4       	brne	.+6      	; 0x1f94 <ValveMotorDirectV1::read()+0x18>
    1f8e:	61 e0       	ldi	r22, 0x01	; 1
    1f90:	70 e0       	ldi	r23, 0x00	; 0
    1f92:	02 c0       	rjmp	.+4      	; 0x1f98 <ValveMotorDirectV1::read()+0x1c>
    1f94:	62 e0       	ldi	r22, 0x02	; 2
    1f96:	70 e0       	ldi	r23, 0x00	; 0
    1f98:	c9 01       	movw	r24, r18
    1f9a:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <ValveMotorDirectV1::motorDrive(ValveMotorDirectV1::motor_drive)>
  }
    1f9e:	08 95       	ret

00001fa0 <TemperaturePot::read()>:

// Force a read/poll of the temperature pot and return the value sensed [0,255] (cold to hot).
// Potentially expensive/slow.
// This value has some hysteresis applied to reduce noise.
// Not thread-safe nor usable within ISRs (Interrupt Service Routines).
uint8_t TemperaturePot::read()
    1fa0:	ef 92       	push	r14
    1fa2:	ff 92       	push	r15
    1fa4:	0f 93       	push	r16
    1fa6:	1f 93       	push	r17
    1fa8:	cf 93       	push	r28
    1faa:	df 93       	push	r29
    1fac:	ec 01       	movw	r28, r24
  {
  power_intermittent_peripherals_enable(false); // No need to wait for anything to stablise as direct of IO_POWER_UP.
    1fae:	80 e0       	ldi	r24, 0x00	; 0
    1fb0:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <power_intermittent_peripherals_enable(bool)>
  const uint16_t tpRaw = analogueNoiseReducedRead(TEMP_POT_AIN, DEFAULT); // Vcc reference.
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	61 e0       	ldi	r22, 0x01	; 1
    1fba:	0e 94 ba 08 	call	0x1174	; 0x1174 <analogueNoiseReducedRead(int, unsigned char)>
    1fbe:	8c 01       	movw	r16, r24
  power_intermittent_peripherals_disable();
    1fc0:	0e 94 49 0a 	call	0x1492	; 0x1492 <power_intermittent_peripherals_disable()>

#if defined(TEMP_POT_REVERSE)
  const uint16_t tp = TEMP_POT_RAW_MAX - tpRaw; // Travel is in opposite direction to natural!
    1fc4:	6f ef       	ldi	r22, 0xFF	; 255
    1fc6:	e6 2e       	mov	r14, r22
    1fc8:	63 e0       	ldi	r22, 0x03	; 3
    1fca:	f6 2e       	mov	r15, r22
    1fcc:	e0 1a       	sub	r14, r16
    1fce:	f1 0a       	sbc	r15, r17
#endif

  // TODO: capture entropy from changed LS bits esp if reduced-noise version doesn't change.

  // Store new raw value.
  raw = tp;
    1fd0:	fc 82       	std	Y+4, r15	; 0x04
    1fd2:	eb 82       	std	Y+3, r14	; 0x03

  // Capture reduced-noise value with a little hysteresis.
  const uint8_t oldValue = value;
    1fd4:	3a 81       	ldd	r19, Y+2	; 0x02
  const uint8_t shifted = tp >> 2; // Keep signed to avoid wrap-round confusion.
    1fd6:	c7 01       	movw	r24, r14
    1fd8:	96 95       	lsr	r25
    1fda:	87 95       	ror	r24
    1fdc:	96 95       	lsr	r25
    1fde:	87 95       	ror	r24
    1fe0:	28 2f       	mov	r18, r24
  if(((shifted > oldValue) && (shifted - oldValue >= RN_HYST)) ||
    1fe2:	38 17       	cp	r19, r24
    1fe4:	20 f4       	brcc	.+8      	; 0x1fee <TemperaturePot::read()+0x4e>
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	83 1b       	sub	r24, r19
    1fea:	91 09       	sbc	r25, r1
    1fec:	06 c0       	rjmp	.+12     	; 0x1ffa <TemperaturePot::read()+0x5a>
    1fee:	83 17       	cp	r24, r19
    1ff0:	f8 f4       	brcc	.+62     	; 0x2030 <TemperaturePot::read()+0x90>
    1ff2:	83 2f       	mov	r24, r19
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	82 1b       	sub	r24, r18
    1ff8:	91 09       	sbc	r25, r1
    1ffa:	04 97       	sbiw	r24, 0x04	; 4
    1ffc:	cc f0       	brlt	.+50     	; 0x2030 <TemperaturePot::read()+0x90>
     ((shifted < oldValue) && (oldValue - shifted >= RN_HYST)))
    {
    const uint8_t rn = (uint8_t) shifted;
    // Atomically store reduced-noise normalised value.
    value = rn;
    1ffe:	2a 83       	std	Y+2, r18	; 0x02
    // Possible to get reasonable functionality without using MODE button.
    //
    // NOTE: without ignoredFirst this will also respond to the initial position of the pot
    //   as the first reading is taken, ie may force to WARM or BAKE.
    static bool ignoredFirst;
    if(!ignoredFirst) { ignoredFirst = true; }
    2000:	80 91 56 02 	lds	r24, 0x0256
    2004:	88 23       	and	r24, r24
    2006:	21 f4       	brne	.+8      	; 0x2010 <TemperaturePot::read()+0x70>
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	80 93 56 02 	sts	0x0256, r24
    200e:	10 c0       	rjmp	.+32     	; 0x2030 <TemperaturePot::read()+0x90>
    else
      {
      // Force FROST mode when right at bottom of dial.
      if(rn < RN_FRBO) { setWarmModeDebounced(false); }
    2010:	28 30       	cpi	r18, 0x08	; 8
    2012:	10 f4       	brcc	.+4      	; 0x2018 <TemperaturePot::read()+0x78>
    2014:	80 e0       	ldi	r24, 0x00	; 0
    2016:	08 c0       	rjmp	.+16     	; 0x2028 <TemperaturePot::read()+0x88>
#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
      // Start BAKE mode when dial turned up to top.
      else if(rn > (255-RN_FRBO)) { startBakeDebounced(); }
    2018:	28 3f       	cpi	r18, 0xF8	; 248
    201a:	18 f0       	brcs	.+6      	; 0x2022 <TemperaturePot::read()+0x82>
    201c:	0e 94 69 02 	call	0x4d2	; 0x4d2 <startBakeDebounced()>
    2020:	05 c0       	rjmp	.+10     	; 0x202c <TemperaturePot::read()+0x8c>
#endif
      // Force WARM mode if pot/temperature turned up.
      else if(rn > oldValue) { setWarmModeDebounced(true); }
    2022:	32 17       	cp	r19, r18
    2024:	18 f4       	brcc	.+6      	; 0x202c <TemperaturePot::read()+0x8c>
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	0e 94 62 02 	call	0x4c4	; 0x4c4 <setWarmModeDebounced(bool)>

      // Note user operation of pot.
      markUIControlUsed(); 
    202c:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <markUIControlUsed()>
  DEBUG_SERIAL_PRINT(tempPotReducedNoise);
  DEBUG_SERIAL_PRINTLN();
#endif

  return(tp);
  }
    2030:	8e 2d       	mov	r24, r14
    2032:	df 91       	pop	r29
    2034:	cf 91       	pop	r28
    2036:	1f 91       	pop	r17
    2038:	0f 91       	pop	r16
    203a:	ff 90       	pop	r15
    203c:	ef 90       	pop	r14
    203e:	08 95       	ret

00002040 <RoomTemperatureC16::read()>:

// Singleton implementation/instance.
RoomTemperatureC16 TemperatureC16;

// Temperature read uses/selects one of the implementations/sensors.
int RoomTemperatureC16::read()
    2040:	cf 92       	push	r12
    2042:	df 92       	push	r13
    2044:	ef 92       	push	r14
    2046:	ff 92       	push	r15
    2048:	0f 93       	push	r16
    204a:	1f 93       	push	r17
    204c:	df 93       	push	r29
    204e:	cf 93       	push	r28
    2050:	cd b7       	in	r28, 0x3d	; 61
    2052:	de b7       	in	r29, 0x3e	; 62
    2054:	60 97       	sbiw	r28, 0x10	; 16
    2056:	0f b6       	in	r0, 0x3f	; 63
    2058:	f8 94       	cli
    205a:	de bf       	out	0x3e, r29	; 62
    205c:	0f be       	out	0x3f, r0	; 63
    205e:	cd bf       	out	0x3d, r28	; 61
    2060:	7c 01       	movw	r14, r24
// The first read will initialise the device as necessary and leave it in a low-power mode afterwards.
// This will simulate a zero temperature in case of detected error talking to the sensor as fail-safe for this use.
// Check for errors at certain critical places, not everywhere.
static int TMP112_readTemperatureC16()
  {
  const bool neededPowerUp = powerUpTWIIfDisabled();
    2062:	0e 94 8a 0a 	call	0x1514	; 0x1514 <powerUpTWIIfDisabled()>
    2066:	c8 2e       	mov	r12, r24
  DEBUG_SERIAL_PRINT(neededPowerUp);
  DEBUG_SERIAL_PRINTLN();
#endif

  // Force start of new one-shot temperature measurement/conversion to complete.
  Wire.beginTransmission(TMP102_I2C_ADDR);
    2068:	8e e9       	ldi	r24, 0x9E	; 158
    206a:	92 e0       	ldi	r25, 0x02	; 2
    206c:	68 e4       	ldi	r22, 0x48	; 72
    206e:	70 e0       	ldi	r23, 0x00	; 0
    2070:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <TwoWire::beginTransmission(int)>
  Wire.write((byte) TMP102_REG_CTRL); // Select control register.
    2074:	8e e9       	ldi	r24, 0x9E	; 158
    2076:	92 e0       	ldi	r25, 0x02	; 2
    2078:	61 e0       	ldi	r22, 0x01	; 1
    207a:	0e 94 6e 12 	call	0x24dc	; 0x24dc <TwoWire::write(unsigned char)>
  Wire.write((byte) TMP102_CTRL_B1); // Clear OS bit.
    207e:	8e e9       	ldi	r24, 0x9E	; 158
    2080:	92 e0       	ldi	r25, 0x02	; 2
    2082:	61 e3       	ldi	r22, 0x31	; 49
    2084:	0e 94 6e 12 	call	0x24dc	; 0x24dc <TwoWire::write(unsigned char)>
  //Wire.write((byte) TMP102_CTRL_B2);
  Wire.endTransmission();
    2088:	8e e9       	ldi	r24, 0x9E	; 158
    208a:	92 e0       	ldi	r25, 0x02	; 2
    208c:	0e 94 b1 12 	call	0x2562	; 0x2562 <TwoWire::endTransmission()>
  Wire.beginTransmission(TMP102_I2C_ADDR);
    2090:	8e e9       	ldi	r24, 0x9E	; 158
    2092:	92 e0       	ldi	r25, 0x02	; 2
    2094:	68 e4       	ldi	r22, 0x48	; 72
    2096:	70 e0       	ldi	r23, 0x00	; 0
    2098:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <TwoWire::beginTransmission(int)>
  Wire.write((byte) TMP102_REG_CTRL); // Select control register.
    209c:	8e e9       	ldi	r24, 0x9E	; 158
    209e:	92 e0       	ldi	r25, 0x02	; 2
    20a0:	61 e0       	ldi	r22, 0x01	; 1
    20a2:	0e 94 6e 12 	call	0x24dc	; 0x24dc <TwoWire::write(unsigned char)>
    void onRequest( void (*)(void) );
  
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    20a6:	8e e9       	ldi	r24, 0x9E	; 158
    20a8:	92 e0       	ldi	r25, 0x02	; 2
    20aa:	61 eb       	ldi	r22, 0xB1	; 177
    20ac:	0e 94 6e 12 	call	0x24dc	; 0x24dc <TwoWire::write(unsigned char)>
  Wire.write((byte) TMP102_CTRL_B1 | TMP102_CTRL_B1_OS); // Start one-shot conversion.
  //Wire.write((byte) TMP102_CTRL_B2);
  if(Wire.endTransmission()) { return(0); } // Exit if error.
    20b0:	8e e9       	ldi	r24, 0x9E	; 158
    20b2:	92 e0       	ldi	r25, 0x02	; 2
    20b4:	0e 94 b1 12 	call	0x2562	; 0x2562 <TwoWire::endTransmission()>
    20b8:	88 23       	and	r24, r24
    20ba:	09 f0       	breq	.+2      	; 0x20be <RoomTemperatureC16::read()+0x7e>
    20bc:	78 c0       	rjmp	.+240    	; 0x21ae <RoomTemperatureC16::read()+0x16e>

  // Wait for temperature measurement/conversion to complete, in low-power sleep mode for the bulk of the time.
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("TMP102 waiting for conversion...");
#endif
  Wire.beginTransmission(TMP102_I2C_ADDR);
    20be:	8e e9       	ldi	r24, 0x9E	; 158
    20c0:	92 e0       	ldi	r25, 0x02	; 2
    20c2:	68 e4       	ldi	r22, 0x48	; 72
    20c4:	70 e0       	ldi	r23, 0x00	; 0
    20c6:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <TwoWire::beginTransmission(int)>
  Wire.write((byte) TMP102_REG_CTRL); // Select control register.
    20ca:	8e e9       	ldi	r24, 0x9E	; 158
    20cc:	92 e0       	ldi	r25, 0x02	; 2
    20ce:	61 e0       	ldi	r22, 0x01	; 1
    20d0:	0e 94 6e 12 	call	0x24dc	; 0x24dc <TwoWire::write(unsigned char)>
  if(Wire.endTransmission()) { return(0); } // Exit if error.
    20d4:	8e e9       	ldi	r24, 0x9E	; 158
    20d6:	92 e0       	ldi	r25, 0x02	; 2
    20d8:	0e 94 b1 12 	call	0x2562	; 0x2562 <TwoWire::endTransmission()>
    20dc:	88 23       	and	r24, r24
    20de:	09 f0       	breq	.+2      	; 0x20e2 <RoomTemperatureC16::read()+0xa2>
    20e0:	66 c0       	rjmp	.+204    	; 0x21ae <RoomTemperatureC16::read()+0x16e>
    20e2:	08 e0       	ldi	r16, 0x08	; 8
    20e4:	10 e0       	ldi	r17, 0x00	; 0
    20e6:	18 c0       	rjmp	.+48     	; 0x2118 <RoomTemperatureC16::read()+0xd8>
  for(int i = 8; --i; ) // 2 orbits should generally be plenty.
    {
    if(i <= 0) { return(0); } // Exit if error.
    20e8:	10 16       	cp	r1, r16
    20ea:	11 06       	cpc	r1, r17
    20ec:	0c f0       	brlt	.+2      	; 0x20f0 <RoomTemperatureC16::read()+0xb0>
    20ee:	5f c0       	rjmp	.+190    	; 0x21ae <RoomTemperatureC16::read()+0x16e>
    if(Wire.requestFrom(TMP102_I2C_ADDR, 1) != 1) { return(0); } // Exit if error.
    20f0:	8e e9       	ldi	r24, 0x9E	; 158
    20f2:	92 e0       	ldi	r25, 0x02	; 2
    20f4:	68 e4       	ldi	r22, 0x48	; 72
    20f6:	70 e0       	ldi	r23, 0x00	; 0
    20f8:	41 e0       	ldi	r20, 0x01	; 1
    20fa:	50 e0       	ldi	r21, 0x00	; 0
    20fc:	0e 94 c2 12 	call	0x2584	; 0x2584 <TwoWire::requestFrom(int, int)>
    2100:	81 30       	cpi	r24, 0x01	; 1
    2102:	09 f0       	breq	.+2      	; 0x2106 <RoomTemperatureC16::read()+0xc6>
    2104:	54 c0       	rjmp	.+168    	; 0x21ae <RoomTemperatureC16::read()+0x16e>
    const byte b1 = Wire.read();
    2106:	8e e9       	ldi	r24, 0x9E	; 158
    2108:	92 e0       	ldi	r25, 0x02	; 2
    210a:	0e 94 ff 11 	call	0x23fe	; 0x23fe <TwoWire::read()>
    if(b1 & TMP102_CTRL_B1_OS) { break; } // Conversion completed.
    210e:	87 fd       	sbrc	r24, 7
    2110:	06 c0       	rjmp	.+12     	; 0x211e <RoomTemperatureC16::read()+0xde>
    nap(WDTO_15MS); // One or two of these naps should allow typical ~26ms conversion to complete...
    2112:	80 e0       	ldi	r24, 0x00	; 0
    2114:	0e 94 c3 07 	call	0xf86	; 0xf86 <nap(signed char)>
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("TMP102 waiting for conversion...");
#endif
  Wire.beginTransmission(TMP102_I2C_ADDR);
  Wire.write((byte) TMP102_REG_CTRL); // Select control register.
  if(Wire.endTransmission()) { return(0); } // Exit if error.
  for(int i = 8; --i; ) // 2 orbits should generally be plenty.
    2118:	01 50       	subi	r16, 0x01	; 1
    211a:	10 40       	sbci	r17, 0x00	; 0
    211c:	29 f7       	brne	.-54     	; 0x20e8 <RoomTemperatureC16::read()+0xa8>

  // Fetch temperature.
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("TMP102 fetching temperature...");
#endif
  Wire.beginTransmission(TMP102_I2C_ADDR);
    211e:	8e e9       	ldi	r24, 0x9E	; 158
    2120:	92 e0       	ldi	r25, 0x02	; 2
    2122:	68 e4       	ldi	r22, 0x48	; 72
    2124:	70 e0       	ldi	r23, 0x00	; 0
    2126:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <TwoWire::beginTransmission(int)>
  Wire.write((byte) TMP102_REG_TEMP); // Select temperature register (set ptr to 0).
    212a:	8e e9       	ldi	r24, 0x9E	; 158
    212c:	92 e0       	ldi	r25, 0x02	; 2
    212e:	60 e0       	ldi	r22, 0x00	; 0
    2130:	0e 94 6e 12 	call	0x24dc	; 0x24dc <TwoWire::write(unsigned char)>
  if(Wire.endTransmission()) { return(0); } // Exit if error.
    2134:	8e e9       	ldi	r24, 0x9E	; 158
    2136:	92 e0       	ldi	r25, 0x02	; 2
    2138:	0e 94 b1 12 	call	0x2562	; 0x2562 <TwoWire::endTransmission()>
    213c:	88 23       	and	r24, r24
    213e:	b9 f5       	brne	.+110    	; 0x21ae <RoomTemperatureC16::read()+0x16e>
  if(Wire.requestFrom(TMP102_I2C_ADDR, 2) != 2)  { return(0); }
    2140:	8e e9       	ldi	r24, 0x9E	; 158
    2142:	92 e0       	ldi	r25, 0x02	; 2
    2144:	68 e4       	ldi	r22, 0x48	; 72
    2146:	70 e0       	ldi	r23, 0x00	; 0
    2148:	42 e0       	ldi	r20, 0x02	; 2
    214a:	50 e0       	ldi	r21, 0x00	; 0
    214c:	0e 94 c2 12 	call	0x2584	; 0x2584 <TwoWire::requestFrom(int, int)>
    2150:	82 30       	cpi	r24, 0x02	; 2
    2152:	69 f5       	brne	.+90     	; 0x21ae <RoomTemperatureC16::read()+0x16e>
  if(Wire.endTransmission()) { return(0); } // Exit if error.
    2154:	8e e9       	ldi	r24, 0x9E	; 158
    2156:	92 e0       	ldi	r25, 0x02	; 2
    2158:	0e 94 b1 12 	call	0x2562	; 0x2562 <TwoWire::endTransmission()>
    215c:	88 23       	and	r24, r24
    215e:	39 f5       	brne	.+78     	; 0x21ae <RoomTemperatureC16::read()+0x16e>

  const byte b1 = Wire.read(); // MSByte, should be signed whole degrees C.
    2160:	8e e9       	ldi	r24, 0x9E	; 158
    2162:	92 e0       	ldi	r25, 0x02	; 2
    2164:	0e 94 ff 11 	call	0x23fe	; 0x23fe <TwoWire::read()>
    2168:	d8 2e       	mov	r13, r24
  const uint8_t b2 = Wire.read(); // Avoid sign extension...
    216a:	8e e9       	ldi	r24, 0x9E	; 158
    216c:	92 e0       	ldi	r25, 0x02	; 2
    216e:	0e 94 ff 11 	call	0x23fe	; 0x23fe <TwoWire::read()>

  // Builds 12-bit value (assumes not in extended mode) and sign-extends if necessary for sub-zero temps.
  const int t16 = (b1 << 4) | (b2 >> 4) | ((b1 & 0x80) ? 0xf000 : 0);
    2172:	d7 fc       	sbrc	r13, 7
    2174:	03 c0       	rjmp	.+6      	; 0x217c <RoomTemperatureC16::read()+0x13c>
    2176:	20 e0       	ldi	r18, 0x00	; 0
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	02 c0       	rjmp	.+4      	; 0x2180 <RoomTemperatureC16::read()+0x140>
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	30 ef       	ldi	r19, 0xF0	; 240
    2180:	08 2f       	mov	r16, r24
    2182:	10 e0       	ldi	r17, 0x00	; 0
    2184:	a4 e0       	ldi	r26, 0x04	; 4
    2186:	15 95       	asr	r17
    2188:	07 95       	ror	r16
    218a:	aa 95       	dec	r26
    218c:	e1 f7       	brne	.-8      	; 0x2186 <RoomTemperatureC16::read()+0x146>
    218e:	8d 2d       	mov	r24, r13
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	f4 e0       	ldi	r31, 0x04	; 4
    2194:	88 0f       	add	r24, r24
    2196:	99 1f       	adc	r25, r25
    2198:	fa 95       	dec	r31
    219a:	e1 f7       	brne	.-8      	; 0x2194 <RoomTemperatureC16::read()+0x154>
    219c:	08 2b       	or	r16, r24
    219e:	19 2b       	or	r17, r25
    21a0:	02 2b       	or	r16, r18
    21a2:	13 2b       	or	r17, r19
  DEBUG_SERIAL_PRINT_FLASHSTRING("C / ");
  DEBUG_SERIAL_PRINT(temp16);
  DEBUG_SERIAL_PRINTLN();
#endif

  if(neededPowerUp) { powerDownTWI(); }
    21a4:	cc 20       	and	r12, r12
    21a6:	29 f0       	breq	.+10     	; 0x21b2 <RoomTemperatureC16::read()+0x172>
    21a8:	0e 94 60 09 	call	0x12c0	; 0x12c0 <powerDownTWI()>
    21ac:	02 c0       	rjmp	.+4      	; 0x21b2 <RoomTemperatureC16::read()+0x172>
    21ae:	00 e0       	ldi	r16, 0x00	; 0
    21b0:	10 e0       	ldi	r17, 0x00	; 0

  // On first call initialise all values to current raw value
  // to ensure that the array is always full (for code simplicity)
  // and that all values are real measurements.
  const size_t N = sizeof(prev)/sizeof(prev[0]);
  if(INT_MIN == prev[0])
    21b2:	f7 01       	movw	r30, r14
    21b4:	84 81       	ldd	r24, Z+4	; 0x04
    21b6:	95 81       	ldd	r25, Z+5	; 0x05
    21b8:	80 50       	subi	r24, 0x00	; 0
    21ba:	90 48       	sbci	r25, 0x80	; 128
    21bc:	19 f4       	brne	.+6      	; 0x21c4 <RoomTemperatureC16::read()+0x184>
    21be:	f7 01       	movw	r30, r14
    21c0:	88 e0       	ldi	r24, 0x08	; 8
    21c2:	06 c0       	rjmp	.+12     	; 0x21d0 <RoomTemperatureC16::read()+0x190>
    21c4:	b7 01       	movw	r22, r14
    21c6:	f7 01       	movw	r30, r14
    21c8:	28 e0       	ldi	r18, 0x08	; 8
    21ca:	0b c0       	rjmp	.+22     	; 0x21e2 <RoomTemperatureC16::read()+0x1a2>
    { for(int8_t i = N; --i >= 0; ) { prev[i] = raw; } }
    21cc:	15 8b       	std	Z+21, r17	; 0x15
    21ce:	04 8b       	std	Z+20, r16	; 0x14
    21d0:	81 50       	subi	r24, 0x01	; 1
    21d2:	32 97       	sbiw	r30, 0x02	; 2
    21d4:	8f 3f       	cpi	r24, 0xFF	; 255
    21d6:	d1 f7       	brne	.-12     	; 0x21cc <RoomTemperatureC16::read()+0x18c>
    21d8:	f5 cf       	rjmp	.-22     	; 0x21c4 <RoomTemperatureC16::read()+0x184>

  // Shift all the values along the filter/memory, and push in the new one.
  for(int8_t i = N; --i > 0; ) { prev[i] = prev[i-1]; }
    21da:	82 89       	ldd	r24, Z+18	; 0x12
    21dc:	93 89       	ldd	r25, Z+19	; 0x13
    21de:	95 8b       	std	Z+21, r25	; 0x15
    21e0:	84 8b       	std	Z+20, r24	; 0x14
    21e2:	21 50       	subi	r18, 0x01	; 1
    21e4:	32 97       	sbiw	r30, 0x02	; 2
    21e6:	22 23       	and	r18, r18
    21e8:	c1 f7       	brne	.-16     	; 0x21da <RoomTemperatureC16::read()+0x19a>
  prev[0] = raw;
    21ea:	f7 01       	movw	r30, r14
    21ec:	15 83       	std	Z+5, r17	; 0x05
    21ee:	04 83       	std	Z+4, r16	; 0x04

  // Maximum jump between adjacent readings before forcing filtering.
  const int MAX_TEMP_JUMP_C16 = 4; // 0.25C.

  // Force filtering on immediately if the new raw reading has jumped from the previous reading.
  if(abs(prev[1] - raw) > MAX_TEMP_JUMP_C16) { filteringOn = true; }
    21f0:	86 81       	ldd	r24, Z+6	; 0x06
    21f2:	97 81       	ldd	r25, Z+7	; 0x07
    21f4:	80 1b       	sub	r24, r16
    21f6:	91 0b       	sbc	r25, r17
    21f8:	97 ff       	sbrs	r25, 7
    21fa:	03 c0       	rjmp	.+6      	; 0x2202 <RoomTemperatureC16::read()+0x1c2>
    21fc:	90 95       	com	r25
    21fe:	81 95       	neg	r24
    2200:	9f 4f       	sbci	r25, 0xFF	; 255
    2202:	05 97       	sbiw	r24, 0x05	; 5
    2204:	1c f0       	brlt	.+6      	; 0x220c <RoomTemperatureC16::read()+0x1cc>
    2206:	81 e0       	ldi	r24, 0x01	; 1
    2208:	f7 01       	movw	r30, r14
    220a:	84 8b       	std	Z+20, r24	; 0x14

  // If filtering is not on then return the raw value as-is for fastest temperature response.
  if(!filteringOn) { value = raw; }
    220c:	f7 01       	movw	r30, r14
    220e:	84 89       	ldd	r24, Z+20	; 0x14
    2210:	88 23       	and	r24, r24
    2212:	39 f0       	breq	.+14     	; 0x2222 <RoomTemperatureC16::read()+0x1e2>
    2214:	fe 01       	movw	r30, r28
    2216:	3f 96       	adiw	r30, 0x0f	; 15
    2218:	d7 01       	movw	r26, r14
// FIXME: needs a unit test or three.
template<uint8_t N> int smallIntIQMean(const int data[N])
  {
  // Copy array content.
  int copy[N];
  for(int8_t i = N; --i >= 0; ) { copy[i] = data[i]; }
    221a:	9e 01       	movw	r18, r28
    221c:	21 50       	subi	r18, 0x01	; 1
    221e:	30 40       	sbci	r19, 0x00	; 0
    2220:	0b c0       	rjmp	.+22     	; 0x2238 <RoomTemperatureC16::read()+0x1f8>

  // Force filtering on immediately if the new raw reading has jumped from the previous reading.
  if(abs(prev[1] - raw) > MAX_TEMP_JUMP_C16) { filteringOn = true; }

  // If filtering is not on then return the raw value as-is for fastest temperature response.
  if(!filteringOn) { value = raw; }
    2222:	f7 01       	movw	r30, r14
    2224:	13 83       	std	Z+3, r17	; 0x03
    2226:	02 83       	std	Z+2, r16	; 0x02
    2228:	44 c0       	rjmp	.+136    	; 0x22b2 <RoomTemperatureC16::read()+0x272>
// FIXME: needs a unit test or three.
template<uint8_t N> int smallIntIQMean(const int data[N])
  {
  // Copy array content.
  int copy[N];
  for(int8_t i = N; --i >= 0; ) { copy[i] = data[i]; }
    222a:	54 96       	adiw	r26, 0x14	; 20
    222c:	8d 91       	ld	r24, X+
    222e:	9c 91       	ld	r25, X
    2230:	55 97       	sbiw	r26, 0x15	; 21
    2232:	91 83       	std	Z+1, r25	; 0x01
    2234:	80 83       	st	Z, r24
    2236:	32 97       	sbiw	r30, 0x02	; 2
    2238:	12 97       	sbiw	r26, 0x02	; 2
    223a:	e2 17       	cp	r30, r18
    223c:	f3 07       	cpc	r31, r19
    223e:	a9 f7       	brne	.-22     	; 0x222a <RoomTemperatureC16::read()+0x1ea>
    2240:	a8 e0       	ldi	r26, 0x08	; 8
    2242:	6e 01       	movw	r12, r28
    2244:	08 94       	sec
    2246:	c1 1c       	adc	r12, r1
    2248:	d1 1c       	adc	r13, r1
    224a:	f6 01       	movw	r30, r12
    224c:	40 e0       	ldi	r20, 0x00	; 0
    224e:	50 e0       	ldi	r21, 0x00	; 0
    2250:	0d c0       	rjmp	.+26     	; 0x226c <RoomTemperatureC16::read()+0x22c>
  do
    {
    uint8_t newn = 0;
    for(uint8_t i = 0; ++i < n; )
      {
      const int c0 = copy[i-1];
    2252:	80 81       	ld	r24, Z
    2254:	91 81       	ldd	r25, Z+1	; 0x01
      const int c1 = copy[i];
    2256:	22 81       	ldd	r18, Z+2	; 0x02
    2258:	33 81       	ldd	r19, Z+3	; 0x03
      if(c0 > c1)
    225a:	28 17       	cp	r18, r24
    225c:	39 07       	cpc	r19, r25
    225e:	2c f4       	brge	.+10     	; 0x226a <RoomTemperatureC16::read()+0x22a>
         {
         copy[i] = c0;
    2260:	93 83       	std	Z+3, r25	; 0x03
    2262:	82 83       	std	Z+2, r24	; 0x02
         copy[i-1] = c1;
    2264:	31 83       	std	Z+1, r19	; 0x01
    2266:	20 83       	st	Z, r18
    2268:	54 2f       	mov	r21, r20
    226a:	32 96       	adiw	r30, 0x02	; 2
  // FIXME: break out sort as separate subroutine.
  uint8_t n = N;
  do
    {
    uint8_t newn = 0;
    for(uint8_t i = 0; ++i < n; )
    226c:	4f 5f       	subi	r20, 0xFF	; 255
    226e:	4a 17       	cp	r20, r26
    2270:	80 f3       	brcs	.-32     	; 0x2252 <RoomTemperatureC16::read()+0x212>
  for(int8_t i = N; --i >= 0; ) { copy[i] = data[i]; }
  // Sort in place with a bubble sort (yeuck) assuming the array to be small.
  // FIXME: replace with insertion sort for efficiency.
  // FIXME: break out sort as separate subroutine.
  uint8_t n = N;
  do
    2272:	55 23       	and	r21, r21
    2274:	11 f0       	breq	.+4      	; 0x227a <RoomTemperatureC16::read()+0x23a>
    2276:	a5 2f       	mov	r26, r21
    2278:	e8 cf       	rjmp	.-48     	; 0x224a <RoomTemperatureC16::read()+0x20a>
  // Extract mean of interquartile range.
  const size_t sampleSize = N/2;
  const size_t start = N/4;
  // Assume values will be nowhere near the extremes.
  int sum = 0;
  for(uint8_t i = start; i < start + sampleSize; ++i) { sum += copy[i]; }
    227a:	8d 81       	ldd	r24, Y+5	; 0x05
    227c:	9e 81       	ldd	r25, Y+6	; 0x06
    227e:	2f 81       	ldd	r18, Y+7	; 0x07
    2280:	38 85       	ldd	r19, Y+8	; 0x08
    2282:	82 0f       	add	r24, r18
    2284:	93 1f       	adc	r25, r19
    2286:	29 85       	ldd	r18, Y+9	; 0x09
    2288:	3a 85       	ldd	r19, Y+10	; 0x0a
    228a:	82 0f       	add	r24, r18
    228c:	93 1f       	adc	r25, r19
  // Compute rounded-up mean.
  return((sum + sampleSize/2) / sampleSize);
    228e:	2b 85       	ldd	r18, Y+11	; 0x0b
    2290:	3c 85       	ldd	r19, Y+12	; 0x0c
    2292:	82 0f       	add	r24, r18
    2294:	93 1f       	adc	r25, r19
    2296:	02 96       	adiw	r24, 0x02	; 2
    2298:	96 95       	lsr	r25
    229a:	87 95       	ror	r24
    229c:	96 95       	lsr	r25
    229e:	87 95       	ror	r24
  // If filtering is not on then return the raw value as-is for fastest temperature response.
  if(!filteringOn) { value = raw; }
  // Else apply a median filter and use the mean of the central values...
  else
    {
    value = smallIntIQMean<N>(prev);
    22a0:	f7 01       	movw	r30, r14
    22a2:	93 83       	std	Z+3, r25	; 0x03
    22a4:	82 83       	std	Z+2, r24	; 0x02

    // Allow possible exit from filtering for next time
    // if the raw value is close enough to the current filtered value
    // so that reverting to unfiltered will not of itself cause a big jump.
    if(abs(value - raw) <= MAX_TEMP_JUMP_C16) { filteringOn = false; }
    22a6:	80 1b       	sub	r24, r16
    22a8:	91 0b       	sbc	r25, r17
    22aa:	04 96       	adiw	r24, 0x04	; 4
    22ac:	09 97       	sbiw	r24, 0x09	; 9
    22ae:	08 f4       	brcc	.+2      	; 0x22b2 <RoomTemperatureC16::read()+0x272>
    22b0:	14 8a       	std	Z+20, r1	; 0x14
    }

  // Force filtering (back) on if any adjacent past readings are wildly different.
  if(!filteringOn)
    22b2:	f7 01       	movw	r30, r14
    22b4:	84 89       	ldd	r24, Z+20	; 0x14
    22b6:	88 23       	and	r24, r24
    22b8:	e1 f4       	brne	.+56     	; 0x22f2 <RoomTemperatureC16::read()+0x2b2>
    22ba:	41 e0       	ldi	r20, 0x01	; 1
    22bc:	50 e0       	ldi	r21, 0x00	; 0
    {
    for(int i = 1; i < N; ++i) { if(abs(prev[i] - prev[i-1]) > MAX_TEMP_JUMP_C16) { filteringOn = true; break; } }
    22be:	fb 01       	movw	r30, r22
    22c0:	26 81       	ldd	r18, Z+6	; 0x06
    22c2:	37 81       	ldd	r19, Z+7	; 0x07
    22c4:	84 81       	ldd	r24, Z+4	; 0x04
    22c6:	95 81       	ldd	r25, Z+5	; 0x05
    22c8:	28 1b       	sub	r18, r24
    22ca:	39 0b       	sbc	r19, r25
    22cc:	37 ff       	sbrs	r19, 7
    22ce:	03 c0       	rjmp	.+6      	; 0x22d6 <RoomTemperatureC16::read()+0x296>
    22d0:	30 95       	com	r19
    22d2:	21 95       	neg	r18
    22d4:	3f 4f       	sbci	r19, 0xFF	; 255
    22d6:	6e 5f       	subi	r22, 0xFE	; 254
    22d8:	7f 4f       	sbci	r23, 0xFF	; 255
    22da:	25 30       	cpi	r18, 0x05	; 5
    22dc:	31 05       	cpc	r19, r1
    22de:	24 f0       	brlt	.+8      	; 0x22e8 <RoomTemperatureC16::read()+0x2a8>
    22e0:	81 e0       	ldi	r24, 0x01	; 1
    22e2:	f7 01       	movw	r30, r14
    22e4:	84 8b       	std	Z+20, r24	; 0x14
    22e6:	05 c0       	rjmp	.+10     	; 0x22f2 <RoomTemperatureC16::read()+0x2b2>
    22e8:	4f 5f       	subi	r20, 0xFF	; 255
    22ea:	5f 4f       	sbci	r21, 0xFF	; 255
    22ec:	48 30       	cpi	r20, 0x08	; 8
    22ee:	51 05       	cpc	r21, r1
    22f0:	31 f7       	brne	.-52     	; 0x22be <RoomTemperatureC16::read()+0x27e>
    }

  return(value);
  }
    22f2:	f7 01       	movw	r30, r14
    22f4:	82 81       	ldd	r24, Z+2	; 0x02
    22f6:	93 81       	ldd	r25, Z+3	; 0x03
    22f8:	60 96       	adiw	r28, 0x10	; 16
    22fa:	0f b6       	in	r0, 0x3f	; 63
    22fc:	f8 94       	cli
    22fe:	de bf       	out	0x3e, r29	; 62
    2300:	0f be       	out	0x3f, r0	; 63
    2302:	cd bf       	out	0x3d, r28	; 61
    2304:	cf 91       	pop	r28
    2306:	df 91       	pop	r29
    2308:	1f 91       	pop	r17
    230a:	0f 91       	pop	r16
    230c:	ff 90       	pop	r15
    230e:	ef 90       	pop	r14
    2310:	df 90       	pop	r13
    2312:	cf 90       	pop	r12
    2314:	08 95       	ret

00002316 <AmbientLight::read()>:
// Measure/store/return the current room ambient light levels in range [0,1023].
// This may consume significant power and time.
// Probably no need to do this more than (say) once per minute.
// This implementation expects LDR (1M dark resistance) from IO_POWER_UP to LDR_SENSOR_AIN and 100k to ground.
// (Not intended to be called from ISR.)
uint8_t AmbientLight::read()
    2316:	0f 93       	push	r16
    2318:	1f 93       	push	r17
    231a:	cf 93       	push	r28
    231c:	df 93       	push	r29
    231e:	8c 01       	movw	r16, r24
  {
  power_intermittent_peripherals_enable(false); // No need to wait for anything to stablise as direct of IO_POWER_UP.
    2320:	80 e0       	ldi	r24, 0x00	; 0
    2322:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <power_intermittent_peripherals_enable(bool)>
  const uint16_t al0 = analogueNoiseReducedRead(LDR_SENSOR_AIN, ALREFERENCE);
    2326:	80 e0       	ldi	r24, 0x00	; 0
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	61 e0       	ldi	r22, 0x01	; 1
    232c:	0e 94 ba 08 	call	0x1174	; 0x1174 <analogueNoiseReducedRead(int, unsigned char)>
    2330:	ec 01       	movw	r28, r24
    }
  else { al = al0; }
#else
  const uint16_t al = al0;
#endif
  power_intermittent_peripherals_disable();
    2332:	0e 94 49 0a 	call	0x1492	; 0x1492 <power_intermittent_peripherals_disable()>

  // Capture entropy from changed LS bits.
  if((uint8_t)al != (uint8_t)rawValue) { addEntropyToPool((uint8_t)al ^ (uint8_t)rawValue, 0); } // Claim zero entropy as may be forced by Eve.
    2336:	8c 2f       	mov	r24, r28
    2338:	f8 01       	movw	r30, r16
    233a:	93 81       	ldd	r25, Z+3	; 0x03
    233c:	c9 17       	cp	r28, r25
    233e:	21 f0       	breq	.+8      	; 0x2348 <AmbientLight::read()+0x32>
    2340:	89 27       	eor	r24, r25
    2342:	60 e0       	ldi	r22, 0x00	; 0
    2344:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <addEntropyToPool(unsigned char, unsigned char)>

  // Adjust room-lit flag, with hysteresis.
  if(al <= LDR_THR_LOW)
    2348:	c1 3a       	cpi	r28, 0xA1	; 161
    234a:	d1 05       	cpc	r29, r1
    234c:	18 f4       	brcc	.+6      	; 0x2354 <AmbientLight::read()+0x3e>
    { isRoomLitFlag = false; }
    234e:	f8 01       	movw	r30, r16
    2350:	15 82       	std	Z+5, r1	; 0x05
    2352:	1b c0       	rjmp	.+54     	; 0x238a <AmbientLight::read()+0x74>
  else if(al > LDR_THR_HIGH)
    2354:	c9 3c       	cpi	r28, 0xC9	; 201
    2356:	d1 05       	cpc	r29, r1
    2358:	c0 f0       	brcs	.+48     	; 0x238a <AmbientLight::read()+0x74>
    {
    // Treat a sharp transition from dark to light as a possible/weak indication of occupancy, eg light flicked on.
    // Ignore trigger at start-up.
    static bool ignoreFirst;
    if(!ignoreFirst) { ignoreFirst = true; }
    235a:	80 91 57 02 	lds	r24, 0x0257
    235e:	88 23       	and	r24, r24
    2360:	21 f4       	brne	.+8      	; 0x236a <AmbientLight::read()+0x54>
    2362:	81 e0       	ldi	r24, 0x01	; 1
    2364:	80 93 57 02 	sts	0x0257, r24
    2368:	0d c0       	rjmp	.+26     	; 0x2384 <AmbientLight::read()+0x6e>
    else if((!isRoomLitFlag) && (rawValue < LDR_THR_LOW)) { Occupancy.markAsPossiblyOccupied(); }
    236a:	f8 01       	movw	r30, r16
    236c:	85 81       	ldd	r24, Z+5	; 0x05
    236e:	88 23       	and	r24, r24
    2370:	49 f4       	brne	.+18     	; 0x2384 <AmbientLight::read()+0x6e>
    2372:	83 81       	ldd	r24, Z+3	; 0x03
    2374:	94 81       	ldd	r25, Z+4	; 0x04
    2376:	80 3a       	cpi	r24, 0xA0	; 160
    2378:	91 05       	cpc	r25, r1
    237a:	20 f4       	brcc	.+8      	; 0x2384 <AmbientLight::read()+0x6e>
    237c:	8d ef       	ldi	r24, 0xFD	; 253
    237e:	91 e0       	ldi	r25, 0x01	; 1
    2380:	0e 94 ca 02 	call	0x594	; 0x594 <OccupancyTracker::markAsPossiblyOccupied()>
    isRoomLitFlag = true;
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	f8 01       	movw	r30, r16
    2388:	85 83       	std	Z+5, r24	; 0x05
    }

  // Store new value, raw and normalised.
  // Unconditionbally store raw value.
  rawValue = al;
    238a:	f8 01       	movw	r30, r16
    238c:	d4 83       	std	Z+4, r29	; 0x04
    238e:	c3 83       	std	Z+3, r28	; 0x03
  // Apply a little bit of noise reduction (hysteresis) to the normalised version.
  const uint8_t newValue = (uint8_t)(al >> 2);
    2390:	ce 01       	movw	r24, r28
    2392:	96 95       	lsr	r25
    2394:	87 95       	ror	r24
    2396:	96 95       	lsr	r25
    2398:	87 95       	ror	r24
    239a:	28 2f       	mov	r18, r24
  if(newValue != value)
    239c:	82 81       	ldd	r24, Z+2	; 0x02
    239e:	28 17       	cp	r18, r24
    23a0:	a1 f0       	breq	.+40     	; 0x23ca <AmbientLight::read()+0xb4>
    {
    const uint16_t oldRawImplied = ((uint16_t)value) << 2;
    23a2:	82 81       	ldd	r24, Z+2	; 0x02
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	88 0f       	add	r24, r24
    23a8:	99 1f       	adc	r25, r25
    23aa:	88 0f       	add	r24, r24
    23ac:	99 1f       	adc	r25, r25
    const uint16_t absDiff = (oldRawImplied > al) ? (oldRawImplied - al) : (al - oldRawImplied);
    23ae:	c8 17       	cp	r28, r24
    23b0:	d9 07       	cpc	r29, r25
    23b2:	18 f4       	brcc	.+6      	; 0x23ba <AmbientLight::read()+0xa4>
    23b4:	8c 1b       	sub	r24, r28
    23b6:	9d 0b       	sbc	r25, r29
    23b8:	04 c0       	rjmp	.+8      	; 0x23c2 <AmbientLight::read()+0xac>
    23ba:	ae 01       	movw	r20, r28
    23bc:	48 1b       	sub	r20, r24
    23be:	59 0b       	sbc	r21, r25
    23c0:	ca 01       	movw	r24, r20
    if(absDiff > 2) { value = newValue; }
    23c2:	03 97       	sbiw	r24, 0x03	; 3
    23c4:	10 f0       	brcs	.+4      	; 0x23ca <AmbientLight::read()+0xb4>
    23c6:	f8 01       	movw	r30, r16
    23c8:	22 83       	std	Z+2, r18	; 0x02
  DEBUG_SERIAL_PRINT_FLASHSTRING("isRoomLit: ");
  DEBUG_SERIAL_PRINT(isRoomLitFlag);
  DEBUG_SERIAL_PRINTLN();
#endif

  return(value);
    23ca:	f8 01       	movw	r30, r16
    23cc:	82 81       	ldd	r24, Z+2	; 0x02
  }
    23ce:	df 91       	pop	r29
    23d0:	cf 91       	pop	r28
    23d2:	1f 91       	pop	r17
    23d4:	0f 91       	pop	r16
    23d6:	08 95       	ret

000023d8 <TwoWire::beginTransmission(int)>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    23d8:	81 e0       	ldi	r24, 0x01	; 1
    23da:	80 93 9d 02 	sts	0x029D, r24
  // set address of targeted slave
  txAddress = address;
    23de:	60 93 7a 02 	sts	0x027A, r22
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    23e2:	10 92 9b 02 	sts	0x029B, r1
  txBufferLength = 0;
    23e6:	10 92 9c 02 	sts	0x029C, r1
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
}
    23ea:	08 95       	ret

000023ec <TwoWire::available()>:
}

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
    23ec:	20 91 79 02 	lds	r18, 0x0279
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	80 91 78 02 	lds	r24, 0x0278
    23f6:	28 1b       	sub	r18, r24
    23f8:	31 09       	sbc	r19, r1
{
  return rxBufferLength - rxBufferIndex;
}
    23fa:	c9 01       	movw	r24, r18
    23fc:	08 95       	ret

000023fe <TwoWire::read()>:
int TwoWire::read(void)
{
  int value = -1;
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    23fe:	40 91 78 02 	lds	r20, 0x0278
    2402:	80 91 79 02 	lds	r24, 0x0279
    2406:	48 17       	cp	r20, r24
    2408:	18 f0       	brcs	.+6      	; 0x2410 <TwoWire::read()+0x12>
    240a:	2f ef       	ldi	r18, 0xFF	; 255
    240c:	3f ef       	ldi	r19, 0xFF	; 255
    240e:	0a c0       	rjmp	.+20     	; 0x2424 <TwoWire::read()+0x26>
    value = rxBuffer[rxBufferIndex];
    2410:	e4 2f       	mov	r30, r20
    2412:	f0 e0       	ldi	r31, 0x00	; 0
    2414:	e8 5a       	subi	r30, 0xA8	; 168
    2416:	fd 4f       	sbci	r31, 0xFD	; 253
    2418:	80 81       	ld	r24, Z
    241a:	28 2f       	mov	r18, r24
    241c:	30 e0       	ldi	r19, 0x00	; 0
    ++rxBufferIndex;
    241e:	4f 5f       	subi	r20, 0xFF	; 255
    2420:	40 93 78 02 	sts	0x0278, r20
  }

  return value;
}
    2424:	c9 01       	movw	r24, r18
    2426:	08 95       	ret

00002428 <TwoWire::peek()>:
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
  
  if(rxBufferIndex < rxBufferLength){
    2428:	e0 91 78 02 	lds	r30, 0x0278
    242c:	80 91 79 02 	lds	r24, 0x0279
    2430:	e8 17       	cp	r30, r24
    2432:	18 f0       	brcs	.+6      	; 0x243a <TwoWire::peek()+0x12>
    2434:	ef ef       	ldi	r30, 0xFF	; 255
    2436:	ff ef       	ldi	r31, 0xFF	; 255
    2438:	06 c0       	rjmp	.+12     	; 0x2446 <TwoWire::peek()+0x1e>
    value = rxBuffer[rxBufferIndex];
    243a:	f0 e0       	ldi	r31, 0x00	; 0
    243c:	e8 5a       	subi	r30, 0xA8	; 168
    243e:	fd 4f       	sbci	r31, 0xFD	; 253
    2440:	80 81       	ld	r24, Z
    2442:	e8 2f       	mov	r30, r24
    2444:	f0 e0       	ldi	r31, 0x00	; 0
  }

  return value;
}
    2446:	cf 01       	movw	r24, r30
    2448:	08 95       	ret

0000244a <TwoWire::flush()>:

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
    244a:	08 95       	ret

0000244c <global constructors keyed to _ZN7TwoWire8rxBufferE>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    244c:	10 92 a1 02 	sts	0x02A1, r1
    2450:	10 92 a0 02 	sts	0x02A0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    2454:	88 ee       	ldi	r24, 0xE8	; 232
    2456:	93 e0       	ldi	r25, 0x03	; 3
    2458:	a0 e0       	ldi	r26, 0x00	; 0
    245a:	b0 e0       	ldi	r27, 0x00	; 0
    245c:	80 93 a2 02 	sts	0x02A2, r24
    2460:	90 93 a3 02 	sts	0x02A3, r25
    2464:	a0 93 a4 02 	sts	0x02A4, r26
    2468:	b0 93 a5 02 	sts	0x02A5, r27
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    246c:	8f ed       	ldi	r24, 0xDF	; 223
    246e:	91 e0       	ldi	r25, 0x01	; 1
    2470:	90 93 9f 02 	sts	0x029F, r25
    2474:	80 93 9e 02 	sts	0x029E, r24
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2478:	08 95       	ret

0000247a <TwoWire::write(unsigned char const*, unsigned int)>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
    247a:	cf 92       	push	r12
    247c:	df 92       	push	r13
    247e:	ef 92       	push	r14
    2480:	ff 92       	push	r15
    2482:	0f 93       	push	r16
    2484:	1f 93       	push	r17
    2486:	cf 93       	push	r28
    2488:	df 93       	push	r29
    248a:	7c 01       	movw	r14, r24
    248c:	6b 01       	movw	r12, r22
    248e:	8a 01       	movw	r16, r20
{
  if(transmitting){
    2490:	80 91 9d 02 	lds	r24, 0x029D
    2494:	88 23       	and	r24, r24
    2496:	a1 f0       	breq	.+40     	; 0x24c0 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
    2498:	c0 e0       	ldi	r28, 0x00	; 0
    249a:	d0 e0       	ldi	r29, 0x00	; 0
    249c:	0d c0       	rjmp	.+26     	; 0x24b8 <TwoWire::write(unsigned char const*, unsigned int)+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
      write(data[i]);
    249e:	d7 01       	movw	r26, r14
    24a0:	ed 91       	ld	r30, X+
    24a2:	fc 91       	ld	r31, X
    24a4:	d6 01       	movw	r26, r12
    24a6:	ac 0f       	add	r26, r28
    24a8:	bd 1f       	adc	r27, r29
    24aa:	01 90       	ld	r0, Z+
    24ac:	f0 81       	ld	r31, Z
    24ae:	e0 2d       	mov	r30, r0
    24b0:	c7 01       	movw	r24, r14
    24b2:	6c 91       	ld	r22, X
    24b4:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    24b6:	21 96       	adiw	r28, 0x01	; 1
    24b8:	c0 17       	cp	r28, r16
    24ba:	d1 07       	cpc	r29, r17
    24bc:	80 f3       	brcs	.-32     	; 0x249e <TwoWire::write(unsigned char const*, unsigned int)+0x24>
    24be:	04 c0       	rjmp	.+8      	; 0x24c8 <TwoWire::write(unsigned char const*, unsigned int)+0x4e>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    24c0:	cb 01       	movw	r24, r22
    24c2:	64 2f       	mov	r22, r20
    24c4:	0e 94 6f 13 	call	0x26de	; 0x26de <twi_transmit>
  }
  return quantity;
}
    24c8:	c8 01       	movw	r24, r16
    24ca:	df 91       	pop	r29
    24cc:	cf 91       	pop	r28
    24ce:	1f 91       	pop	r17
    24d0:	0f 91       	pop	r16
    24d2:	ff 90       	pop	r15
    24d4:	ef 90       	pop	r14
    24d6:	df 90       	pop	r13
    24d8:	cf 90       	pop	r12
    24da:	08 95       	ret

000024dc <TwoWire::write(unsigned char)>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
    24dc:	df 93       	push	r29
    24de:	cf 93       	push	r28
    24e0:	0f 92       	push	r0
    24e2:	cd b7       	in	r28, 0x3d	; 61
    24e4:	de b7       	in	r29, 0x3e	; 62
    24e6:	fc 01       	movw	r30, r24
    24e8:	69 83       	std	Y+1, r22	; 0x01
{
  if(transmitting){
    24ea:	80 91 9d 02 	lds	r24, 0x029D
    24ee:	88 23       	and	r24, r24
    24f0:	c9 f0       	breq	.+50     	; 0x2524 <TwoWire::write(unsigned char)+0x48>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    24f2:	80 91 9c 02 	lds	r24, 0x029C
    24f6:	80 32       	cpi	r24, 0x20	; 32
    24f8:	38 f0       	brcs	.+14     	; 0x2508 <TwoWire::write(unsigned char)+0x2c>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    24fa:	81 e0       	ldi	r24, 0x01	; 1
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	93 83       	std	Z+3, r25	; 0x03
    2500:	82 83       	std	Z+2, r24	; 0x02
    2502:	20 e0       	ldi	r18, 0x00	; 0
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	15 c0       	rjmp	.+42     	; 0x2532 <TwoWire::write(unsigned char)+0x56>
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    2508:	80 91 9b 02 	lds	r24, 0x029B
    250c:	e8 2f       	mov	r30, r24
    250e:	f0 e0       	ldi	r31, 0x00	; 0
    2510:	e5 58       	subi	r30, 0x85	; 133
    2512:	fd 4f       	sbci	r31, 0xFD	; 253
    2514:	99 81       	ldd	r25, Y+1	; 0x01
    2516:	90 83       	st	Z, r25
    ++txBufferIndex;
    2518:	8f 5f       	subi	r24, 0xFF	; 255
    251a:	80 93 9b 02 	sts	0x029B, r24
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    251e:	80 93 9c 02 	sts	0x029C, r24
    2522:	05 c0       	rjmp	.+10     	; 0x252e <TwoWire::write(unsigned char)+0x52>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    2524:	ce 01       	movw	r24, r28
    2526:	01 96       	adiw	r24, 0x01	; 1
    2528:	61 e0       	ldi	r22, 0x01	; 1
    252a:	0e 94 6f 13 	call	0x26de	; 0x26de <twi_transmit>
    252e:	21 e0       	ldi	r18, 0x01	; 1
    2530:	30 e0       	ldi	r19, 0x00	; 0
  }
  return 1;
}
    2532:	c9 01       	movw	r24, r18
    2534:	0f 90       	pop	r0
    2536:	cf 91       	pop	r28
    2538:	df 91       	pop	r29
    253a:	08 95       	ret

0000253c <TwoWire::endTransmission(unsigned char)>:
//	the bus tenure has been properly ended with a STOP. It
//	is very possible to leave the bus in a hung state if
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
    253c:	0f 93       	push	r16
    253e:	06 2f       	mov	r16, r22
{
  // transmit buffer (blocking)
  int8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    2540:	80 91 7a 02 	lds	r24, 0x027A
    2544:	6b e7       	ldi	r22, 0x7B	; 123
    2546:	72 e0       	ldi	r23, 0x02	; 2
    2548:	40 91 9c 02 	lds	r20, 0x029C
    254c:	21 e0       	ldi	r18, 0x01	; 1
    254e:	0e 94 1a 13 	call	0x2634	; 0x2634 <twi_writeTo>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    2552:	10 92 9b 02 	sts	0x029B, r1
  txBufferLength = 0;
    2556:	10 92 9c 02 	sts	0x029C, r1
  // indicate that we are done transmitting
  transmitting = 0;
    255a:	10 92 9d 02 	sts	0x029D, r1
  return ret;
}
    255e:	0f 91       	pop	r16
    2560:	08 95       	ret

00002562 <TwoWire::endTransmission()>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
    2562:	61 e0       	ldi	r22, 0x01	; 1
    2564:	0e 94 9e 12 	call	0x253c	; 0x253c <TwoWire::endTransmission(unsigned char)>
}
    2568:	08 95       	ret

0000256a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    quantity = BUFFER_LENGTH;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
    256a:	41 32       	cpi	r20, 0x21	; 33
    256c:	08 f0       	brcs	.+2      	; 0x2570 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x6>
    256e:	40 e2       	ldi	r20, 0x20	; 32
    2570:	86 2f       	mov	r24, r22
    2572:	68 e5       	ldi	r22, 0x58	; 88
    2574:	72 e0       	ldi	r23, 0x02	; 2
    2576:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <twi_readFrom>
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    257a:	10 92 78 02 	sts	0x0278, r1
  rxBufferLength = read;
    257e:	80 93 79 02 	sts	0x0279, r24

  return read;
}
    2582:	08 95       	ret

00002584 <TwoWire::requestFrom(int, int)>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    2584:	21 e0       	ldi	r18, 0x01	; 1
    2586:	0e 94 b5 12 	call	0x256a	; 0x256a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
}
    258a:	08 95       	ret

0000258c <TwoWire::begin()>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    258c:	10 92 78 02 	sts	0x0278, r1
  rxBufferLength = 0;
    2590:	10 92 79 02 	sts	0x0279, r1

  txBufferIndex = 0;
    2594:	10 92 9b 02 	sts	0x029B, r1
  txBufferLength = 0;
    2598:	10 92 9c 02 	sts	0x029C, r1

  twi_init();
    259c:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <twi_init>
}
    25a0:	08 95       	ret

000025a2 <twi_readFrom>:
 *          length: number of bytes to read into array
 *          sendStop: Boolean indicating whether to send a stop at the end
 * Output   number of bytes read
 */
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
    25a2:	38 2f       	mov	r19, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    25a4:	41 32       	cpi	r20, 0x21	; 33
    25a6:	10 f0       	brcs	.+4      	; 0x25ac <twi_readFrom+0xa>
    25a8:	40 e0       	ldi	r20, 0x00	; 0
    25aa:	42 c0       	rjmp	.+132    	; 0x2630 <twi_readFrom+0x8e>
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    25ac:	80 91 aa 02 	lds	r24, 0x02AA
    25b0:	88 23       	and	r24, r24
    25b2:	e1 f7       	brne	.-8      	; 0x25ac <twi_readFrom+0xa>
    continue;
  }
  twi_state = TWI_MRX;
    25b4:	91 e0       	ldi	r25, 0x01	; 1
    25b6:	90 93 aa 02 	sts	0x02AA, r25
  twi_sendStop = sendStop;
    25ba:	20 93 ac 02 	sts	0x02AC, r18
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    25be:	8f ef       	ldi	r24, 0xFF	; 255
    25c0:	80 93 17 03 	sts	0x0317, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    25c4:	10 92 d2 02 	sts	0x02D2, r1
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    25c8:	41 50       	subi	r20, 0x01	; 1
    25ca:	40 93 d3 02 	sts	0x02D3, r20
    25ce:	4f 5f       	subi	r20, 0xFF	; 255
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    25d0:	90 93 ab 02 	sts	0x02AB, r25
  twi_slarw |= address << 1;
    25d4:	80 91 ab 02 	lds	r24, 0x02AB
    25d8:	33 0f       	add	r19, r19
    25da:	83 2b       	or	r24, r19
    25dc:	80 93 ab 02 	sts	0x02AB, r24

  if (true == twi_inRepStart) {
    25e0:	80 91 ad 02 	lds	r24, 0x02AD
    25e4:	81 30       	cpi	r24, 0x01	; 1
    25e6:	41 f4       	brne	.+16     	; 0x25f8 <twi_readFrom+0x56>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    25e8:	10 92 ad 02 	sts	0x02AD, r1
    TWDR = twi_slarw;
    25ec:	80 91 ab 02 	lds	r24, 0x02AB
    25f0:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    25f4:	85 ec       	ldi	r24, 0xC5	; 197
    25f6:	01 c0       	rjmp	.+2      	; 0x25fa <twi_readFrom+0x58>
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    25f8:	85 ee       	ldi	r24, 0xE5	; 229
    25fa:	80 93 bc 00 	sts	0x00BC, r24

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    25fe:	80 91 aa 02 	lds	r24, 0x02AA
    2602:	81 30       	cpi	r24, 0x01	; 1
    2604:	e1 f3       	breq	.-8      	; 0x25fe <twi_readFrom+0x5c>
    continue;
  }

  if (twi_masterBufferIndex < length)
    2606:	80 91 d2 02 	lds	r24, 0x02D2
    260a:	84 17       	cp	r24, r20
    260c:	10 f4       	brcc	.+4      	; 0x2612 <twi_readFrom+0x70>
    length = twi_masterBufferIndex;
    260e:	40 91 d2 02 	lds	r20, 0x02D2
    2612:	20 e0       	ldi	r18, 0x00	; 0
    2614:	30 e0       	ldi	r19, 0x00	; 0
    2616:	0a c0       	rjmp	.+20     	; 0x262c <twi_readFrom+0x8a>

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
    2618:	fb 01       	movw	r30, r22
    261a:	e2 0f       	add	r30, r18
    261c:	f3 1f       	adc	r31, r19
    261e:	d9 01       	movw	r26, r18
    2620:	ae 54       	subi	r26, 0x4E	; 78
    2622:	bd 4f       	sbci	r27, 0xFD	; 253
    2624:	8c 91       	ld	r24, X
    2626:	80 83       	st	Z, r24
    2628:	2f 5f       	subi	r18, 0xFF	; 255
    262a:	3f 4f       	sbci	r19, 0xFF	; 255

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    262c:	24 17       	cp	r18, r20
    262e:	a0 f3       	brcs	.-24     	; 0x2618 <twi_readFrom+0x76>
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
}
    2630:	84 2f       	mov	r24, r20
    2632:	08 95       	ret

00002634 <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
    2634:	0f 93       	push	r16
    2636:	1f 93       	push	r17
    2638:	58 2f       	mov	r21, r24
    263a:	12 2f       	mov	r17, r18
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    263c:	41 32       	cpi	r20, 0x21	; 33
    263e:	10 f0       	brcs	.+4      	; 0x2644 <twi_writeTo+0x10>
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	4a c0       	rjmp	.+148    	; 0x26d8 <twi_writeTo+0xa4>
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    2644:	80 91 aa 02 	lds	r24, 0x02AA
    2648:	88 23       	and	r24, r24
    264a:	e1 f7       	brne	.-8      	; 0x2644 <twi_writeTo+0x10>
    continue;
  }
  twi_state = TWI_MTX;
    264c:	82 e0       	ldi	r24, 0x02	; 2
    264e:	80 93 aa 02 	sts	0x02AA, r24
  twi_sendStop = sendStop;
    2652:	00 93 ac 02 	sts	0x02AC, r16
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    2656:	8f ef       	ldi	r24, 0xFF	; 255
    2658:	80 93 17 03 	sts	0x0317, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    265c:	10 92 d2 02 	sts	0x02D2, r1
  twi_masterBufferLength = length;
    2660:	40 93 d3 02 	sts	0x02D3, r20
    2664:	a2 eb       	ldi	r26, 0xB2	; 178
    2666:	b2 e0       	ldi	r27, 0x02	; 2
    2668:	fb 01       	movw	r30, r22
    266a:	02 c0       	rjmp	.+4      	; 0x2670 <twi_writeTo+0x3c>
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
    266c:	81 91       	ld	r24, Z+
    266e:	8d 93       	st	X+, r24
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    2670:	8e 2f       	mov	r24, r30
    2672:	86 1b       	sub	r24, r22
    2674:	84 17       	cp	r24, r20
    2676:	d0 f3       	brcs	.-12     	; 0x266c <twi_writeTo+0x38>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    2678:	10 92 ab 02 	sts	0x02AB, r1
  twi_slarw |= address << 1;
    267c:	80 91 ab 02 	lds	r24, 0x02AB
    2680:	55 0f       	add	r21, r21
    2682:	85 2b       	or	r24, r21
    2684:	80 93 ab 02 	sts	0x02AB, r24
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    2688:	80 91 ad 02 	lds	r24, 0x02AD
    268c:	81 30       	cpi	r24, 0x01	; 1
    268e:	41 f4       	brne	.+16     	; 0x26a0 <twi_writeTo+0x6c>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    2690:	10 92 ad 02 	sts	0x02AD, r1
    TWDR = twi_slarw;				
    2694:	80 91 ab 02 	lds	r24, 0x02AB
    2698:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    269c:	85 ec       	ldi	r24, 0xC5	; 197
    269e:	01 c0       	rjmp	.+2      	; 0x26a2 <twi_writeTo+0x6e>
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
    26a0:	85 ee       	ldi	r24, 0xE5	; 229
    26a2:	80 93 bc 00 	sts	0x00BC, r24

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    26a6:	11 23       	and	r17, r17
    26a8:	21 f0       	breq	.+8      	; 0x26b2 <twi_writeTo+0x7e>
    26aa:	80 91 aa 02 	lds	r24, 0x02AA
    26ae:	82 30       	cpi	r24, 0x02	; 2
    26b0:	e1 f3       	breq	.-8      	; 0x26aa <twi_writeTo+0x76>
    continue;
  }
  
  if (twi_error == 0xFF)
    26b2:	80 91 17 03 	lds	r24, 0x0317
    26b6:	8f 3f       	cpi	r24, 0xFF	; 255
    26b8:	11 f4       	brne	.+4      	; 0x26be <twi_writeTo+0x8a>
    26ba:	80 e0       	ldi	r24, 0x00	; 0
    26bc:	0d c0       	rjmp	.+26     	; 0x26d8 <twi_writeTo+0xa4>
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    26be:	80 91 17 03 	lds	r24, 0x0317
    26c2:	80 32       	cpi	r24, 0x20	; 32
    26c4:	11 f4       	brne	.+4      	; 0x26ca <twi_writeTo+0x96>
    26c6:	82 e0       	ldi	r24, 0x02	; 2
    26c8:	07 c0       	rjmp	.+14     	; 0x26d8 <twi_writeTo+0xa4>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    26ca:	80 91 17 03 	lds	r24, 0x0317
    26ce:	80 33       	cpi	r24, 0x30	; 48
    26d0:	11 f0       	breq	.+4      	; 0x26d6 <twi_writeTo+0xa2>
    26d2:	84 e0       	ldi	r24, 0x04	; 4
    26d4:	01 c0       	rjmp	.+2      	; 0x26d8 <twi_writeTo+0xa4>
    26d6:	83 e0       	ldi	r24, 0x03	; 3
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
}
    26d8:	1f 91       	pop	r17
    26da:	0f 91       	pop	r16
    26dc:	08 95       	ret

000026de <twi_transmit>:
 * Output   1 length too long for buffer
 *          2 not slave transmitter
 *          0 ok
 */
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
    26de:	48 2f       	mov	r20, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    26e0:	61 32       	cpi	r22, 0x21	; 33
    26e2:	10 f0       	brcs	.+4      	; 0x26e8 <twi_transmit+0xa>
    26e4:	81 e0       	ldi	r24, 0x01	; 1
    26e6:	08 95       	ret
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    26e8:	80 91 aa 02 	lds	r24, 0x02AA
    26ec:	84 30       	cpi	r24, 0x04	; 4
    26ee:	11 f0       	breq	.+4      	; 0x26f4 <twi_transmit+0x16>
    26f0:	82 e0       	ldi	r24, 0x02	; 2
    26f2:	08 95       	ret
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
    26f4:	60 93 f5 02 	sts	0x02F5, r22
    26f8:	a4 ed       	ldi	r26, 0xD4	; 212
    26fa:	b2 e0       	ldi	r27, 0x02	; 2
    26fc:	84 2f       	mov	r24, r20
    26fe:	9c 01       	movw	r18, r24
    2700:	f9 01       	movw	r30, r18
    2702:	02 c0       	rjmp	.+4      	; 0x2708 <twi_transmit+0x2a>
  for(i = 0; i < length; ++i){
    twi_txBuffer[i] = data[i];
    2704:	81 91       	ld	r24, Z+
    2706:	8d 93       	st	X+, r24
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
    2708:	8e 2f       	mov	r24, r30
    270a:	84 1b       	sub	r24, r20
    270c:	86 17       	cp	r24, r22
    270e:	d0 f3       	brcs	.-12     	; 0x2704 <twi_transmit+0x26>
    2710:	80 e0       	ldi	r24, 0x00	; 0
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
}
    2712:	08 95       	ret

00002714 <__vector_24>:
  // update twi state
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
    2714:	1f 92       	push	r1
    2716:	0f 92       	push	r0
    2718:	0f b6       	in	r0, 0x3f	; 63
    271a:	0f 92       	push	r0
    271c:	11 24       	eor	r1, r1
    271e:	2f 93       	push	r18
    2720:	3f 93       	push	r19
    2722:	4f 93       	push	r20
    2724:	5f 93       	push	r21
    2726:	6f 93       	push	r22
    2728:	7f 93       	push	r23
    272a:	8f 93       	push	r24
    272c:	9f 93       	push	r25
    272e:	af 93       	push	r26
    2730:	bf 93       	push	r27
    2732:	ef 93       	push	r30
    2734:	ff 93       	push	r31
  switch(TW_STATUS){
    2736:	80 91 b9 00 	lds	r24, 0x00B9
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	88 7f       	andi	r24, 0xF8	; 248
    273e:	90 70       	andi	r25, 0x00	; 0
    2740:	80 36       	cpi	r24, 0x60	; 96
    2742:	91 05       	cpc	r25, r1
    2744:	09 f4       	brne	.+2      	; 0x2748 <__vector_24+0x34>
    2746:	f2 c0       	rjmp	.+484    	; 0x292c <__vector_24+0x218>
    2748:	81 36       	cpi	r24, 0x61	; 97
    274a:	91 05       	cpc	r25, r1
    274c:	cc f5       	brge	.+114    	; 0x27c0 <__vector_24+0xac>
    274e:	88 32       	cpi	r24, 0x28	; 40
    2750:	91 05       	cpc	r25, r1
    2752:	09 f4       	brne	.+2      	; 0x2756 <__vector_24+0x42>
    2754:	7b c0       	rjmp	.+246    	; 0x284c <__vector_24+0x138>
    2756:	89 32       	cpi	r24, 0x29	; 41
    2758:	91 05       	cpc	r25, r1
    275a:	b4 f4       	brge	.+44     	; 0x2788 <__vector_24+0x74>
    275c:	80 31       	cpi	r24, 0x10	; 16
    275e:	91 05       	cpc	r25, r1
    2760:	09 f4       	brne	.+2      	; 0x2764 <__vector_24+0x50>
    2762:	6f c0       	rjmp	.+222    	; 0x2842 <__vector_24+0x12e>
    2764:	81 31       	cpi	r24, 0x11	; 17
    2766:	91 05       	cpc	r25, r1
    2768:	3c f4       	brge	.+14     	; 0x2778 <__vector_24+0x64>
    276a:	00 97       	sbiw	r24, 0x00	; 0
    276c:	09 f4       	brne	.+2      	; 0x2770 <__vector_24+0x5c>
    276e:	47 c1       	rjmp	.+654    	; 0x29fe <__vector_24+0x2ea>
    2770:	08 97       	sbiw	r24, 0x08	; 8
    2772:	09 f0       	breq	.+2      	; 0x2776 <__vector_24+0x62>
    2774:	4f c1       	rjmp	.+670    	; 0x2a14 <__vector_24+0x300>
    2776:	65 c0       	rjmp	.+202    	; 0x2842 <__vector_24+0x12e>
    2778:	88 31       	cpi	r24, 0x18	; 24
    277a:	91 05       	cpc	r25, r1
    277c:	09 f4       	brne	.+2      	; 0x2780 <__vector_24+0x6c>
    277e:	66 c0       	rjmp	.+204    	; 0x284c <__vector_24+0x138>
    2780:	80 97       	sbiw	r24, 0x20	; 32
    2782:	09 f0       	breq	.+2      	; 0x2786 <__vector_24+0x72>
    2784:	47 c1       	rjmp	.+654    	; 0x2a14 <__vector_24+0x300>
    2786:	82 c0       	rjmp	.+260    	; 0x288c <__vector_24+0x178>
    2788:	80 34       	cpi	r24, 0x40	; 64
    278a:	91 05       	cpc	r25, r1
    278c:	09 f4       	brne	.+2      	; 0x2790 <__vector_24+0x7c>
    278e:	a4 c0       	rjmp	.+328    	; 0x28d8 <__vector_24+0x1c4>
    2790:	81 34       	cpi	r24, 0x41	; 65
    2792:	91 05       	cpc	r25, r1
    2794:	44 f4       	brge	.+16     	; 0x27a6 <__vector_24+0x92>
    2796:	80 33       	cpi	r24, 0x30	; 48
    2798:	91 05       	cpc	r25, r1
    279a:	09 f4       	brne	.+2      	; 0x279e <__vector_24+0x8a>
    279c:	82 c0       	rjmp	.+260    	; 0x28a2 <__vector_24+0x18e>
    279e:	c8 97       	sbiw	r24, 0x38	; 56
    27a0:	09 f0       	breq	.+2      	; 0x27a4 <__vector_24+0x90>
    27a2:	38 c1       	rjmp	.+624    	; 0x2a14 <__vector_24+0x300>
    27a4:	89 c0       	rjmp	.+274    	; 0x28b8 <__vector_24+0x1a4>
    27a6:	80 35       	cpi	r24, 0x50	; 80
    27a8:	91 05       	cpc	r25, r1
    27aa:	09 f4       	brne	.+2      	; 0x27ae <__vector_24+0x9a>
    27ac:	89 c0       	rjmp	.+274    	; 0x28c0 <__vector_24+0x1ac>
    27ae:	88 35       	cpi	r24, 0x58	; 88
    27b0:	91 05       	cpc	r25, r1
    27b2:	09 f4       	brne	.+2      	; 0x27b6 <__vector_24+0xa2>
    27b4:	96 c0       	rjmp	.+300    	; 0x28e2 <__vector_24+0x1ce>
    27b6:	88 34       	cpi	r24, 0x48	; 72
    27b8:	91 05       	cpc	r25, r1
    27ba:	09 f0       	breq	.+2      	; 0x27be <__vector_24+0xaa>
    27bc:	2b c1       	rjmp	.+598    	; 0x2a14 <__vector_24+0x300>
    27be:	ae c0       	rjmp	.+348    	; 0x291c <__vector_24+0x208>
    27c0:	88 39       	cpi	r24, 0x98	; 152
    27c2:	91 05       	cpc	r25, r1
    27c4:	09 f4       	brne	.+2      	; 0x27c8 <__vector_24+0xb4>
    27c6:	13 c1       	rjmp	.+550    	; 0x29ee <__vector_24+0x2da>
    27c8:	89 39       	cpi	r24, 0x99	; 153
    27ca:	91 05       	cpc	r25, r1
    27cc:	ec f4       	brge	.+58     	; 0x2808 <__vector_24+0xf4>
    27ce:	88 37       	cpi	r24, 0x78	; 120
    27d0:	91 05       	cpc	r25, r1
    27d2:	09 f4       	brne	.+2      	; 0x27d6 <__vector_24+0xc2>
    27d4:	ab c0       	rjmp	.+342    	; 0x292c <__vector_24+0x218>
    27d6:	89 37       	cpi	r24, 0x79	; 121
    27d8:	91 05       	cpc	r25, r1
    27da:	4c f4       	brge	.+18     	; 0x27ee <__vector_24+0xda>
    27dc:	88 36       	cpi	r24, 0x68	; 104
    27de:	91 05       	cpc	r25, r1
    27e0:	09 f4       	brne	.+2      	; 0x27e4 <__vector_24+0xd0>
    27e2:	a4 c0       	rjmp	.+328    	; 0x292c <__vector_24+0x218>
    27e4:	80 37       	cpi	r24, 0x70	; 112
    27e6:	91 05       	cpc	r25, r1
    27e8:	09 f0       	breq	.+2      	; 0x27ec <__vector_24+0xd8>
    27ea:	14 c1       	rjmp	.+552    	; 0x2a14 <__vector_24+0x300>
    27ec:	9f c0       	rjmp	.+318    	; 0x292c <__vector_24+0x218>
    27ee:	88 38       	cpi	r24, 0x88	; 136
    27f0:	91 05       	cpc	r25, r1
    27f2:	09 f4       	brne	.+2      	; 0x27f6 <__vector_24+0xe2>
    27f4:	fc c0       	rjmp	.+504    	; 0x29ee <__vector_24+0x2da>
    27f6:	80 39       	cpi	r24, 0x90	; 144
    27f8:	91 05       	cpc	r25, r1
    27fa:	09 f4       	brne	.+2      	; 0x27fe <__vector_24+0xea>
    27fc:	9d c0       	rjmp	.+314    	; 0x2938 <__vector_24+0x224>
    27fe:	80 38       	cpi	r24, 0x80	; 128
    2800:	91 05       	cpc	r25, r1
    2802:	09 f0       	breq	.+2      	; 0x2806 <__vector_24+0xf2>
    2804:	07 c1       	rjmp	.+526    	; 0x2a14 <__vector_24+0x300>
    2806:	98 c0       	rjmp	.+304    	; 0x2938 <__vector_24+0x224>
    2808:	80 3b       	cpi	r24, 0xB0	; 176
    280a:	91 05       	cpc	r25, r1
    280c:	09 f4       	brne	.+2      	; 0x2810 <__vector_24+0xfc>
    280e:	c6 c0       	rjmp	.+396    	; 0x299c <__vector_24+0x288>
    2810:	81 3b       	cpi	r24, 0xB1	; 177
    2812:	91 05       	cpc	r25, r1
    2814:	4c f4       	brge	.+18     	; 0x2828 <__vector_24+0x114>
    2816:	80 3a       	cpi	r24, 0xA0	; 160
    2818:	91 05       	cpc	r25, r1
    281a:	09 f4       	brne	.+2      	; 0x281e <__vector_24+0x10a>
    281c:	9f c0       	rjmp	.+318    	; 0x295c <__vector_24+0x248>
    281e:	88 3a       	cpi	r24, 0xA8	; 168
    2820:	91 05       	cpc	r25, r1
    2822:	09 f0       	breq	.+2      	; 0x2826 <__vector_24+0x112>
    2824:	f7 c0       	rjmp	.+494    	; 0x2a14 <__vector_24+0x300>
    2826:	ba c0       	rjmp	.+372    	; 0x299c <__vector_24+0x288>
    2828:	80 3c       	cpi	r24, 0xC0	; 192
    282a:	91 05       	cpc	r25, r1
    282c:	09 f4       	brne	.+2      	; 0x2830 <__vector_24+0x11c>
    282e:	e3 c0       	rjmp	.+454    	; 0x29f6 <__vector_24+0x2e2>
    2830:	88 3c       	cpi	r24, 0xC8	; 200
    2832:	91 05       	cpc	r25, r1
    2834:	09 f4       	brne	.+2      	; 0x2838 <__vector_24+0x124>
    2836:	df c0       	rjmp	.+446    	; 0x29f6 <__vector_24+0x2e2>
    2838:	88 3b       	cpi	r24, 0xB8	; 184
    283a:	91 05       	cpc	r25, r1
    283c:	09 f0       	breq	.+2      	; 0x2840 <__vector_24+0x12c>
    283e:	ea c0       	rjmp	.+468    	; 0x2a14 <__vector_24+0x300>
    2840:	c2 c0       	rjmp	.+388    	; 0x29c6 <__vector_24+0x2b2>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2842:	80 91 ab 02 	lds	r24, 0x02AB
    2846:	80 93 bb 00 	sts	0x00BB, r24
    284a:	cf c0       	rjmp	.+414    	; 0x29ea <__vector_24+0x2d6>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    284c:	90 91 d2 02 	lds	r25, 0x02D2
    2850:	80 91 d3 02 	lds	r24, 0x02D3
    2854:	98 17       	cp	r25, r24
    2856:	68 f4       	brcc	.+26     	; 0x2872 <__vector_24+0x15e>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2858:	90 91 d2 02 	lds	r25, 0x02D2
    285c:	e9 2f       	mov	r30, r25
    285e:	f0 e0       	ldi	r31, 0x00	; 0
    2860:	ee 54       	subi	r30, 0x4E	; 78
    2862:	fd 4f       	sbci	r31, 0xFD	; 253
    2864:	80 81       	ld	r24, Z
    2866:	80 93 bb 00 	sts	0x00BB, r24
    286a:	9f 5f       	subi	r25, 0xFF	; 255
    286c:	90 93 d2 02 	sts	0x02D2, r25
    2870:	bc c0       	rjmp	.+376    	; 0x29ea <__vector_24+0x2d6>
        twi_reply(1);
      }else{
	if (twi_sendStop)
    2872:	80 91 ac 02 	lds	r24, 0x02AC
    2876:	88 23       	and	r24, r24
    2878:	09 f4       	brne	.+2      	; 0x287c <__vector_24+0x168>
    287a:	4b c0       	rjmp	.+150    	; 0x2912 <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    287c:	85 ed       	ldi	r24, 0xD5	; 213
    287e:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2882:	80 91 bc 00 	lds	r24, 0x00BC
    2886:	84 fd       	sbrc	r24, 4
    2888:	fc cf       	rjmp	.-8      	; 0x2882 <__vector_24+0x16e>
    288a:	c2 c0       	rjmp	.+388    	; 0x2a10 <__vector_24+0x2fc>
	  twi_state = TWI_READY;
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    288c:	80 e2       	ldi	r24, 0x20	; 32
    288e:	80 93 17 03 	sts	0x0317, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2892:	85 ed       	ldi	r24, 0xD5	; 213
    2894:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2898:	80 91 bc 00 	lds	r24, 0x00BC
    289c:	84 fd       	sbrc	r24, 4
    289e:	fc cf       	rjmp	.-8      	; 0x2898 <__vector_24+0x184>
    28a0:	b7 c0       	rjmp	.+366    	; 0x2a10 <__vector_24+0x2fc>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    28a2:	80 e3       	ldi	r24, 0x30	; 48
    28a4:	80 93 17 03 	sts	0x0317, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    28a8:	85 ed       	ldi	r24, 0xD5	; 213
    28aa:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    28ae:	80 91 bc 00 	lds	r24, 0x00BC
    28b2:	84 fd       	sbrc	r24, 4
    28b4:	fc cf       	rjmp	.-8      	; 0x28ae <__vector_24+0x19a>
    28b6:	ac c0       	rjmp	.+344    	; 0x2a10 <__vector_24+0x2fc>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    28b8:	88 e3       	ldi	r24, 0x38	; 56
    28ba:	80 93 17 03 	sts	0x0317, r24
    28be:	9b c0       	rjmp	.+310    	; 0x29f6 <__vector_24+0x2e2>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    28c0:	80 91 d2 02 	lds	r24, 0x02D2
    28c4:	90 91 bb 00 	lds	r25, 0x00BB
    28c8:	e8 2f       	mov	r30, r24
    28ca:	f0 e0       	ldi	r31, 0x00	; 0
    28cc:	ee 54       	subi	r30, 0x4E	; 78
    28ce:	fd 4f       	sbci	r31, 0xFD	; 253
    28d0:	90 83       	st	Z, r25
    28d2:	8f 5f       	subi	r24, 0xFF	; 255
    28d4:	80 93 d2 02 	sts	0x02D2, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    28d8:	90 91 d2 02 	lds	r25, 0x02D2
    28dc:	80 91 d3 02 	lds	r24, 0x02D3
    28e0:	82 c0       	rjmp	.+260    	; 0x29e6 <__vector_24+0x2d2>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    28e2:	80 91 d2 02 	lds	r24, 0x02D2
    28e6:	90 91 bb 00 	lds	r25, 0x00BB
    28ea:	e8 2f       	mov	r30, r24
    28ec:	f0 e0       	ldi	r31, 0x00	; 0
    28ee:	ee 54       	subi	r30, 0x4E	; 78
    28f0:	fd 4f       	sbci	r31, 0xFD	; 253
    28f2:	90 83       	st	Z, r25
    28f4:	8f 5f       	subi	r24, 0xFF	; 255
    28f6:	80 93 d2 02 	sts	0x02D2, r24
	if (twi_sendStop)
    28fa:	80 91 ac 02 	lds	r24, 0x02AC
    28fe:	88 23       	and	r24, r24
    2900:	41 f0       	breq	.+16     	; 0x2912 <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2902:	85 ed       	ldi	r24, 0xD5	; 213
    2904:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2908:	80 91 bc 00 	lds	r24, 0x00BC
    290c:	84 fd       	sbrc	r24, 4
    290e:	fc cf       	rjmp	.-8      	; 0x2908 <__vector_24+0x1f4>
    2910:	7f c0       	rjmp	.+254    	; 0x2a10 <__vector_24+0x2fc>
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2912:	81 e0       	ldi	r24, 0x01	; 1
    2914:	80 93 ad 02 	sts	0x02AD, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2918:	84 ea       	ldi	r24, 0xA4	; 164
    291a:	6e c0       	rjmp	.+220    	; 0x29f8 <__vector_24+0x2e4>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    291c:	85 ed       	ldi	r24, 0xD5	; 213
    291e:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2922:	80 91 bc 00 	lds	r24, 0x00BC
    2926:	84 fd       	sbrc	r24, 4
    2928:	fc cf       	rjmp	.-8      	; 0x2922 <__vector_24+0x20e>
    292a:	72 c0       	rjmp	.+228    	; 0x2a10 <__vector_24+0x2fc>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    292c:	83 e0       	ldi	r24, 0x03	; 3
    292e:	80 93 aa 02 	sts	0x02AA, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2932:	10 92 16 03 	sts	0x0316, r1
    2936:	59 c0       	rjmp	.+178    	; 0x29ea <__vector_24+0x2d6>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2938:	80 91 16 03 	lds	r24, 0x0316
    293c:	80 32       	cpi	r24, 0x20	; 32
    293e:	08 f0       	brcs	.+2      	; 0x2942 <__vector_24+0x22e>
    2940:	56 c0       	rjmp	.+172    	; 0x29ee <__vector_24+0x2da>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2942:	80 91 16 03 	lds	r24, 0x0316
    2946:	90 91 bb 00 	lds	r25, 0x00BB
    294a:	e8 2f       	mov	r30, r24
    294c:	f0 e0       	ldi	r31, 0x00	; 0
    294e:	ea 50       	subi	r30, 0x0A	; 10
    2950:	fd 4f       	sbci	r31, 0xFD	; 253
    2952:	90 83       	st	Z, r25
    2954:	8f 5f       	subi	r24, 0xFF	; 255
    2956:	80 93 16 03 	sts	0x0316, r24
    295a:	47 c0       	rjmp	.+142    	; 0x29ea <__vector_24+0x2d6>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    295c:	80 91 16 03 	lds	r24, 0x0316
    2960:	80 32       	cpi	r24, 0x20	; 32
    2962:	30 f4       	brcc	.+12     	; 0x2970 <__vector_24+0x25c>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2964:	e0 91 16 03 	lds	r30, 0x0316
    2968:	f0 e0       	ldi	r31, 0x00	; 0
    296a:	ea 50       	subi	r30, 0x0A	; 10
    296c:	fd 4f       	sbci	r31, 0xFD	; 253
    296e:	10 82       	st	Z, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2970:	85 ed       	ldi	r24, 0xD5	; 213
    2972:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2976:	80 91 bc 00 	lds	r24, 0x00BC
    297a:	84 fd       	sbrc	r24, 4
    297c:	fc cf       	rjmp	.-8      	; 0x2976 <__vector_24+0x262>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    297e:	10 92 aa 02 	sts	0x02AA, r1
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2982:	60 91 16 03 	lds	r22, 0x0316
    2986:	e0 91 b0 02 	lds	r30, 0x02B0
    298a:	f0 91 b1 02 	lds	r31, 0x02B1
    298e:	86 ef       	ldi	r24, 0xF6	; 246
    2990:	92 e0       	ldi	r25, 0x02	; 2
    2992:	70 e0       	ldi	r23, 0x00	; 0
    2994:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2996:	10 92 16 03 	sts	0x0316, r1
    299a:	2d c0       	rjmp	.+90     	; 0x29f6 <__vector_24+0x2e2>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    299c:	84 e0       	ldi	r24, 0x04	; 4
    299e:	80 93 aa 02 	sts	0x02AA, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    29a2:	10 92 f4 02 	sts	0x02F4, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    29a6:	10 92 f5 02 	sts	0x02F5, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    29aa:	e0 91 ae 02 	lds	r30, 0x02AE
    29ae:	f0 91 af 02 	lds	r31, 0x02AF
    29b2:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    29b4:	80 91 f5 02 	lds	r24, 0x02F5
    29b8:	88 23       	and	r24, r24
    29ba:	29 f4       	brne	.+10     	; 0x29c6 <__vector_24+0x2b2>
        twi_txBufferLength = 1;
    29bc:	81 e0       	ldi	r24, 0x01	; 1
    29be:	80 93 f5 02 	sts	0x02F5, r24
        twi_txBuffer[0] = 0x00;
    29c2:	10 92 d4 02 	sts	0x02D4, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    29c6:	90 91 f4 02 	lds	r25, 0x02F4
    29ca:	e9 2f       	mov	r30, r25
    29cc:	f0 e0       	ldi	r31, 0x00	; 0
    29ce:	ec 52       	subi	r30, 0x2C	; 44
    29d0:	fd 4f       	sbci	r31, 0xFD	; 253
    29d2:	80 81       	ld	r24, Z
    29d4:	80 93 bb 00 	sts	0x00BB, r24
    29d8:	9f 5f       	subi	r25, 0xFF	; 255
    29da:	90 93 f4 02 	sts	0x02F4, r25
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    29de:	90 91 f4 02 	lds	r25, 0x02F4
    29e2:	80 91 f5 02 	lds	r24, 0x02F5
    29e6:	98 17       	cp	r25, r24
    29e8:	10 f4       	brcc	.+4      	; 0x29ee <__vector_24+0x2da>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    29ea:	85 ec       	ldi	r24, 0xC5	; 197
    29ec:	01 c0       	rjmp	.+2      	; 0x29f0 <__vector_24+0x2dc>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    29ee:	85 e8       	ldi	r24, 0x85	; 133
    29f0:	80 93 bc 00 	sts	0x00BC, r24
    29f4:	0f c0       	rjmp	.+30     	; 0x2a14 <__vector_24+0x300>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    29f6:	85 ec       	ldi	r24, 0xC5	; 197
    29f8:	80 93 bc 00 	sts	0x00BC, r24
    29fc:	09 c0       	rjmp	.+18     	; 0x2a10 <__vector_24+0x2fc>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    29fe:	10 92 17 03 	sts	0x0317, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2a02:	85 ed       	ldi	r24, 0xD5	; 213
    2a04:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2a08:	80 91 bc 00 	lds	r24, 0x00BC
    2a0c:	84 fd       	sbrc	r24, 4
    2a0e:	fc cf       	rjmp	.-8      	; 0x2a08 <__vector_24+0x2f4>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2a10:	10 92 aa 02 	sts	0x02AA, r1
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    2a14:	ff 91       	pop	r31
    2a16:	ef 91       	pop	r30
    2a18:	bf 91       	pop	r27
    2a1a:	af 91       	pop	r26
    2a1c:	9f 91       	pop	r25
    2a1e:	8f 91       	pop	r24
    2a20:	7f 91       	pop	r23
    2a22:	6f 91       	pop	r22
    2a24:	5f 91       	pop	r21
    2a26:	4f 91       	pop	r20
    2a28:	3f 91       	pop	r19
    2a2a:	2f 91       	pop	r18
    2a2c:	0f 90       	pop	r0
    2a2e:	0f be       	out	0x3f, r0	; 63
    2a30:	0f 90       	pop	r0
    2a32:	1f 90       	pop	r1
    2a34:	18 95       	reti

00002a36 <twi_init>:
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
    2a36:	10 92 aa 02 	sts	0x02AA, r1
  twi_sendStop = true;		// default value
    2a3a:	81 e0       	ldi	r24, 0x01	; 1
    2a3c:	80 93 ac 02 	sts	0x02AC, r24
  twi_inRepStart = false;
    2a40:	10 92 ad 02 	sts	0x02AD, r1
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
    2a44:	82 e1       	ldi	r24, 0x12	; 18
    2a46:	61 e0       	ldi	r22, 0x01	; 1
    2a48:	0e 94 78 15 	call	0x2af0	; 0x2af0 <digitalWrite>
  digitalWrite(SCL, 1);
    2a4c:	83 e1       	ldi	r24, 0x13	; 19
    2a4e:	61 e0       	ldi	r22, 0x01	; 1
    2a50:	0e 94 78 15 	call	0x2af0	; 0x2af0 <digitalWrite>

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    2a54:	e9 eb       	ldi	r30, 0xB9	; 185
    2a56:	f0 e0       	ldi	r31, 0x00	; 0
    2a58:	80 81       	ld	r24, Z
    2a5a:	8e 7f       	andi	r24, 0xFE	; 254
    2a5c:	80 83       	st	Z, r24
  cbi(TWSR, TWPS1);
    2a5e:	80 81       	ld	r24, Z
    2a60:	8d 7f       	andi	r24, 0xFD	; 253
    2a62:	80 83       	st	Z, r24
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
    2a64:	8d ef       	ldi	r24, 0xFD	; 253
    2a66:	80 93 b8 00 	sts	0x00B8, r24
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    2a6a:	85 e4       	ldi	r24, 0x45	; 69
    2a6c:	80 93 bc 00 	sts	0x00BC, r24
}
    2a70:	08 95       	ret

00002a72 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    2a72:	cf 93       	push	r28
    2a74:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2a76:	48 2f       	mov	r20, r24
    2a78:	50 e0       	ldi	r21, 0x00	; 0
    2a7a:	ca 01       	movw	r24, r20
    2a7c:	82 53       	subi	r24, 0x32	; 50
    2a7e:	9d 4f       	sbci	r25, 0xFD	; 253
    2a80:	fc 01       	movw	r30, r24
    2a82:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
    2a84:	46 54       	subi	r20, 0x46	; 70
    2a86:	5d 4f       	sbci	r21, 0xFD	; 253
    2a88:	fa 01       	movw	r30, r20
    2a8a:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2a8c:	88 23       	and	r24, r24
    2a8e:	69 f1       	breq	.+90     	; 0x2aea <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2a90:	90 e0       	ldi	r25, 0x00	; 0
    2a92:	88 0f       	add	r24, r24
    2a94:	99 1f       	adc	r25, r25
    2a96:	fc 01       	movw	r30, r24
    2a98:	e4 56       	subi	r30, 0x64	; 100
    2a9a:	fd 4f       	sbci	r31, 0xFD	; 253
    2a9c:	a5 91       	lpm	r26, Z+
    2a9e:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
    2aa0:	fc 01       	movw	r30, r24
    2aa2:	ea 55       	subi	r30, 0x5A	; 90
    2aa4:	fd 4f       	sbci	r31, 0xFD	; 253
    2aa6:	c5 91       	lpm	r28, Z+
    2aa8:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
    2aaa:	66 23       	and	r22, r22
    2aac:	51 f4       	brne	.+20     	; 0x2ac2 <pinMode+0x50>
		uint8_t oldSREG = SREG;
    2aae:	2f b7       	in	r18, 0x3f	; 63
                cli();
    2ab0:	f8 94       	cli
		*reg &= ~bit;
    2ab2:	8c 91       	ld	r24, X
    2ab4:	93 2f       	mov	r25, r19
    2ab6:	90 95       	com	r25
    2ab8:	89 23       	and	r24, r25
    2aba:	8c 93       	st	X, r24
		*out &= ~bit;
    2abc:	88 81       	ld	r24, Y
    2abe:	89 23       	and	r24, r25
    2ac0:	0b c0       	rjmp	.+22     	; 0x2ad8 <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    2ac2:	62 30       	cpi	r22, 0x02	; 2
    2ac4:	61 f4       	brne	.+24     	; 0x2ade <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    2ac6:	2f b7       	in	r18, 0x3f	; 63
                cli();
    2ac8:	f8 94       	cli
		*reg &= ~bit;
    2aca:	8c 91       	ld	r24, X
    2acc:	93 2f       	mov	r25, r19
    2ace:	90 95       	com	r25
    2ad0:	89 23       	and	r24, r25
    2ad2:	8c 93       	st	X, r24
		*out |= bit;
    2ad4:	88 81       	ld	r24, Y
    2ad6:	83 2b       	or	r24, r19
    2ad8:	88 83       	st	Y, r24
		SREG = oldSREG;
    2ada:	2f bf       	out	0x3f, r18	; 63
    2adc:	06 c0       	rjmp	.+12     	; 0x2aea <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    2ade:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2ae0:	f8 94       	cli
		*reg |= bit;
    2ae2:	8c 91       	ld	r24, X
    2ae4:	83 2b       	or	r24, r19
    2ae6:	8c 93       	st	X, r24
		SREG = oldSREG;
    2ae8:	9f bf       	out	0x3f, r25	; 63
	}
}
    2aea:	df 91       	pop	r29
    2aec:	cf 91       	pop	r28
    2aee:	08 95       	ret

00002af0 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    2af0:	48 2f       	mov	r20, r24
    2af2:	50 e0       	ldi	r21, 0x00	; 0
    2af4:	ca 01       	movw	r24, r20
    2af6:	8e 51       	subi	r24, 0x1E	; 30
    2af8:	9d 4f       	sbci	r25, 0xFD	; 253
    2afa:	fc 01       	movw	r30, r24
    2afc:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    2afe:	ca 01       	movw	r24, r20
    2b00:	82 53       	subi	r24, 0x32	; 50
    2b02:	9d 4f       	sbci	r25, 0xFD	; 253
    2b04:	fc 01       	movw	r30, r24
    2b06:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    2b08:	46 54       	subi	r20, 0x46	; 70
    2b0a:	5d 4f       	sbci	r21, 0xFD	; 253
    2b0c:	fa 01       	movw	r30, r20
    2b0e:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2b10:	33 23       	and	r19, r19
    2b12:	09 f4       	brne	.+2      	; 0x2b16 <digitalWrite+0x26>
    2b14:	40 c0       	rjmp	.+128    	; 0x2b96 <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2b16:	22 23       	and	r18, r18
    2b18:	51 f1       	breq	.+84     	; 0x2b6e <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2b1a:	23 30       	cpi	r18, 0x03	; 3
    2b1c:	71 f0       	breq	.+28     	; 0x2b3a <digitalWrite+0x4a>
    2b1e:	24 30       	cpi	r18, 0x04	; 4
    2b20:	28 f4       	brcc	.+10     	; 0x2b2c <digitalWrite+0x3c>
    2b22:	21 30       	cpi	r18, 0x01	; 1
    2b24:	a1 f0       	breq	.+40     	; 0x2b4e <digitalWrite+0x5e>
    2b26:	22 30       	cpi	r18, 0x02	; 2
    2b28:	11 f5       	brne	.+68     	; 0x2b6e <digitalWrite+0x7e>
    2b2a:	14 c0       	rjmp	.+40     	; 0x2b54 <digitalWrite+0x64>
    2b2c:	26 30       	cpi	r18, 0x06	; 6
    2b2e:	b1 f0       	breq	.+44     	; 0x2b5c <digitalWrite+0x6c>
    2b30:	27 30       	cpi	r18, 0x07	; 7
    2b32:	c1 f0       	breq	.+48     	; 0x2b64 <digitalWrite+0x74>
    2b34:	24 30       	cpi	r18, 0x04	; 4
    2b36:	d9 f4       	brne	.+54     	; 0x2b6e <digitalWrite+0x7e>
    2b38:	04 c0       	rjmp	.+8      	; 0x2b42 <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2b3a:	80 91 80 00 	lds	r24, 0x0080
    2b3e:	8f 77       	andi	r24, 0x7F	; 127
    2b40:	03 c0       	rjmp	.+6      	; 0x2b48 <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2b42:	80 91 80 00 	lds	r24, 0x0080
    2b46:	8f 7d       	andi	r24, 0xDF	; 223
    2b48:	80 93 80 00 	sts	0x0080, r24
    2b4c:	10 c0       	rjmp	.+32     	; 0x2b6e <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    2b4e:	84 b5       	in	r24, 0x24	; 36
    2b50:	8f 77       	andi	r24, 0x7F	; 127
    2b52:	02 c0       	rjmp	.+4      	; 0x2b58 <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2b54:	84 b5       	in	r24, 0x24	; 36
    2b56:	8f 7d       	andi	r24, 0xDF	; 223
    2b58:	84 bd       	out	0x24, r24	; 36
    2b5a:	09 c0       	rjmp	.+18     	; 0x2b6e <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2b5c:	80 91 b0 00 	lds	r24, 0x00B0
    2b60:	8f 77       	andi	r24, 0x7F	; 127
    2b62:	03 c0       	rjmp	.+6      	; 0x2b6a <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2b64:	80 91 b0 00 	lds	r24, 0x00B0
    2b68:	8f 7d       	andi	r24, 0xDF	; 223
    2b6a:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    2b6e:	e3 2f       	mov	r30, r19
    2b70:	f0 e0       	ldi	r31, 0x00	; 0
    2b72:	ee 0f       	add	r30, r30
    2b74:	ff 1f       	adc	r31, r31
    2b76:	ea 55       	subi	r30, 0x5A	; 90
    2b78:	fd 4f       	sbci	r31, 0xFD	; 253
    2b7a:	a5 91       	lpm	r26, Z+
    2b7c:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    2b7e:	2f b7       	in	r18, 0x3f	; 63
	cli();
    2b80:	f8 94       	cli

	if (val == LOW) {
    2b82:	66 23       	and	r22, r22
    2b84:	21 f4       	brne	.+8      	; 0x2b8e <digitalWrite+0x9e>
		*out &= ~bit;
    2b86:	8c 91       	ld	r24, X
    2b88:	90 95       	com	r25
    2b8a:	89 23       	and	r24, r25
    2b8c:	02 c0       	rjmp	.+4      	; 0x2b92 <digitalWrite+0xa2>
	} else {
		*out |= bit;
    2b8e:	8c 91       	ld	r24, X
    2b90:	89 2b       	or	r24, r25
    2b92:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    2b94:	2f bf       	out	0x3f, r18	; 63
    2b96:	08 95       	ret

00002b98 <serialEvent()>:
#if !defined(USART_RX_vect) && !defined(USART0_RX_vect) && \
    !defined(USART_RXC_vect)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    2b98:	08 95       	ret

00002b9a <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  ISR(USART_RX_vect)
    2b9a:	1f 92       	push	r1
    2b9c:	0f 92       	push	r0
    2b9e:	0f b6       	in	r0, 0x3f	; 63
    2ba0:	0f 92       	push	r0
    2ba2:	11 24       	eor	r1, r1
    2ba4:	2f 93       	push	r18
    2ba6:	3f 93       	push	r19
    2ba8:	4f 93       	push	r20
    2baa:	8f 93       	push	r24
    2bac:	9f 93       	push	r25
    2bae:	ef 93       	push	r30
    2bb0:	ff 93       	push	r31
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#endif
  {
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
    2bb2:	80 91 c0 00 	lds	r24, 0x00C0
    2bb6:	82 fd       	sbrc	r24, 2
    2bb8:	1d c0       	rjmp	.+58     	; 0x2bf4 <__vector_18+0x5a>
      unsigned char c = UDR0;
    2bba:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    2bbe:	20 91 58 03 	lds	r18, 0x0358
    2bc2:	30 91 59 03 	lds	r19, 0x0359

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    2bc6:	2f 5f       	subi	r18, 0xFF	; 255
    2bc8:	3f 4f       	sbci	r19, 0xFF	; 255
    2bca:	2f 73       	andi	r18, 0x3F	; 63
    2bcc:	30 70       	andi	r19, 0x00	; 0
    2bce:	80 91 5a 03 	lds	r24, 0x035A
    2bd2:	90 91 5b 03 	lds	r25, 0x035B
    2bd6:	28 17       	cp	r18, r24
    2bd8:	39 07       	cpc	r19, r25
    2bda:	71 f0       	breq	.+28     	; 0x2bf8 <__vector_18+0x5e>
    buffer->buffer[buffer->head] = c;
    2bdc:	e0 91 58 03 	lds	r30, 0x0358
    2be0:	f0 91 59 03 	lds	r31, 0x0359
    2be4:	e8 5e       	subi	r30, 0xE8	; 232
    2be6:	fc 4f       	sbci	r31, 0xFC	; 252
    2be8:	40 83       	st	Z, r20
    buffer->head = i;
    2bea:	30 93 59 03 	sts	0x0359, r19
    2bee:	20 93 58 03 	sts	0x0358, r18
    2bf2:	02 c0       	rjmp	.+4      	; 0x2bf8 <__vector_18+0x5e>
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
      unsigned char c = UDR0;
      store_char(c, &rx_buffer);
    } else {
      unsigned char c = UDR0;
    2bf4:	80 91 c6 00 	lds	r24, 0x00C6
      unsigned char c = UDR;
    };
  #else
    #error UDR not defined
  #endif
  }
    2bf8:	ff 91       	pop	r31
    2bfa:	ef 91       	pop	r30
    2bfc:	9f 91       	pop	r25
    2bfe:	8f 91       	pop	r24
    2c00:	4f 91       	pop	r20
    2c02:	3f 91       	pop	r19
    2c04:	2f 91       	pop	r18
    2c06:	0f 90       	pop	r0
    2c08:	0f be       	out	0x3f, r0	; 63
    2c0a:	0f 90       	pop	r0
    2c0c:	1f 90       	pop	r1
    2c0e:	18 95       	reti

00002c10 <serialEventRun()>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    2c10:	e0 91 ac 03 	lds	r30, 0x03AC
    2c14:	f0 91 ad 03 	lds	r31, 0x03AD
    2c18:	e0 5c       	subi	r30, 0xC0	; 192
    2c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1c:	81 91       	ld	r24, Z+
    2c1e:	91 91       	ld	r25, Z+
    2c20:	20 81       	ld	r18, Z
    2c22:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    2c24:	82 1b       	sub	r24, r18
    2c26:	93 0b       	sbc	r25, r19
    2c28:	8f 73       	andi	r24, 0x3F	; 63
    2c2a:	90 70       	andi	r25, 0x00	; 0
    2c2c:	89 2b       	or	r24, r25
    2c2e:	11 f0       	breq	.+4      	; 0x2c34 <serialEventRun()+0x24>
    2c30:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <serialEvent()>
    2c34:	08 95       	ret

00002c36 <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
    2c36:	1f 92       	push	r1
    2c38:	0f 92       	push	r0
    2c3a:	0f b6       	in	r0, 0x3f	; 63
    2c3c:	0f 92       	push	r0
    2c3e:	11 24       	eor	r1, r1
    2c40:	2f 93       	push	r18
    2c42:	3f 93       	push	r19
    2c44:	8f 93       	push	r24
    2c46:	9f 93       	push	r25
    2c48:	ef 93       	push	r30
    2c4a:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    2c4c:	20 91 9c 03 	lds	r18, 0x039C
    2c50:	30 91 9d 03 	lds	r19, 0x039D
    2c54:	80 91 9e 03 	lds	r24, 0x039E
    2c58:	90 91 9f 03 	lds	r25, 0x039F
    2c5c:	28 17       	cp	r18, r24
    2c5e:	39 07       	cpc	r19, r25
    2c60:	31 f4       	brne	.+12     	; 0x2c6e <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    2c62:	80 91 c1 00 	lds	r24, 0x00C1
    2c66:	8f 7d       	andi	r24, 0xDF	; 223
    2c68:	80 93 c1 00 	sts	0x00C1, r24
    2c6c:	14 c0       	rjmp	.+40     	; 0x2c96 <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    2c6e:	e0 91 9e 03 	lds	r30, 0x039E
    2c72:	f0 91 9f 03 	lds	r31, 0x039F
    2c76:	e4 5a       	subi	r30, 0xA4	; 164
    2c78:	fc 4f       	sbci	r31, 0xFC	; 252
    2c7a:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    2c7c:	80 91 9e 03 	lds	r24, 0x039E
    2c80:	90 91 9f 03 	lds	r25, 0x039F
    2c84:	01 96       	adiw	r24, 0x01	; 1
    2c86:	8f 73       	andi	r24, 0x3F	; 63
    2c88:	90 70       	andi	r25, 0x00	; 0
    2c8a:	90 93 9f 03 	sts	0x039F, r25
    2c8e:	80 93 9e 03 	sts	0x039E, r24
	
  #if defined(UDR0)
    UDR0 = c;
    2c92:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    2c96:	ff 91       	pop	r31
    2c98:	ef 91       	pop	r30
    2c9a:	9f 91       	pop	r25
    2c9c:	8f 91       	pop	r24
    2c9e:	3f 91       	pop	r19
    2ca0:	2f 91       	pop	r18
    2ca2:	0f 90       	pop	r0
    2ca4:	0f be       	out	0x3f, r0	; 63
    2ca6:	0f 90       	pop	r0
    2ca8:	1f 90       	pop	r1
    2caa:	18 95       	reti

00002cac <HardwareSerial::begin(unsigned long)>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    2cac:	af 92       	push	r10
    2cae:	bf 92       	push	r11
    2cb0:	df 92       	push	r13
    2cb2:	ef 92       	push	r14
    2cb4:	ff 92       	push	r15
    2cb6:	0f 93       	push	r16
    2cb8:	1f 93       	push	r17
    2cba:	cf 93       	push	r28
    2cbc:	df 93       	push	r29
    2cbe:	ec 01       	movw	r28, r24
    2cc0:	7a 01       	movw	r14, r20
    2cc2:	8b 01       	movw	r16, r22
    2cc4:	dd 24       	eor	r13, r13
    2cc6:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    2cc8:	91 e0       	ldi	r25, 0x01	; 1
    2cca:	a9 2e       	mov	r10, r25
    2ccc:	b1 2c       	mov	r11, r1
    2cce:	ec 89       	ldd	r30, Y+20	; 0x14
    2cd0:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
    2cd2:	dd 20       	and	r13, r13
    2cd4:	69 f0       	breq	.+26     	; 0x2cf0 <HardwareSerial::begin(unsigned long)+0x44>
    *_ucsra = 1 << _u2x;
    2cd6:	c5 01       	movw	r24, r10
    2cd8:	08 a0       	ldd	r0, Y+32	; 0x20
    2cda:	02 c0       	rjmp	.+4      	; 0x2ce0 <HardwareSerial::begin(unsigned long)+0x34>
    2cdc:	88 0f       	add	r24, r24
    2cde:	99 1f       	adc	r25, r25
    2ce0:	0a 94       	dec	r0
    2ce2:	e2 f7       	brpl	.-8      	; 0x2cdc <HardwareSerial::begin(unsigned long)+0x30>
    2ce4:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    2ce6:	60 e9       	ldi	r22, 0x90	; 144
    2ce8:	70 ed       	ldi	r23, 0xD0	; 208
    2cea:	83 e0       	ldi	r24, 0x03	; 3
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	05 c0       	rjmp	.+10     	; 0x2cfa <HardwareSerial::begin(unsigned long)+0x4e>
  } else {
    *_ucsra = 0;
    2cf0:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    2cf2:	68 e4       	ldi	r22, 0x48	; 72
    2cf4:	78 ee       	ldi	r23, 0xE8	; 232
    2cf6:	81 e0       	ldi	r24, 0x01	; 1
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	a8 01       	movw	r20, r16
    2cfc:	97 01       	movw	r18, r14
    2cfe:	0e 94 5f 1a 	call	0x34be	; 0x34be <__udivmodsi4>
    2d02:	21 50       	subi	r18, 0x01	; 1
    2d04:	30 40       	sbci	r19, 0x00	; 0
    2d06:	40 40       	sbci	r20, 0x00	; 0
    2d08:	50 40       	sbci	r21, 0x00	; 0
    2d0a:	56 95       	lsr	r21
    2d0c:	47 95       	ror	r20
    2d0e:	37 95       	ror	r19
    2d10:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    2d12:	80 e1       	ldi	r24, 0x10	; 16
    2d14:	20 30       	cpi	r18, 0x00	; 0
    2d16:	38 07       	cpc	r19, r24
    2d18:	20 f0       	brcs	.+8      	; 0x2d22 <HardwareSerial::begin(unsigned long)+0x76>
    2d1a:	dd 20       	and	r13, r13
    2d1c:	11 f0       	breq	.+4      	; 0x2d22 <HardwareSerial::begin(unsigned long)+0x76>
    2d1e:	dd 24       	eor	r13, r13
    2d20:	d6 cf       	rjmp	.-84     	; 0x2cce <HardwareSerial::begin(unsigned long)+0x22>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    2d22:	e8 89       	ldd	r30, Y+16	; 0x10
    2d24:	f9 89       	ldd	r31, Y+17	; 0x11
    2d26:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    2d28:	ea 89       	ldd	r30, Y+18	; 0x12
    2d2a:	fb 89       	ldd	r31, Y+19	; 0x13
    2d2c:	20 83       	st	Z, r18

  transmitting = false;
    2d2e:	19 a2       	std	Y+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
    2d30:	ee 89       	ldd	r30, Y+22	; 0x16
    2d32:	ff 89       	ldd	r31, Y+23	; 0x17
    2d34:	40 81       	ld	r20, Z
    2d36:	21 e0       	ldi	r18, 0x01	; 1
    2d38:	30 e0       	ldi	r19, 0x00	; 0
    2d3a:	c9 01       	movw	r24, r18
    2d3c:	0c 8c       	ldd	r0, Y+28	; 0x1c
    2d3e:	02 c0       	rjmp	.+4      	; 0x2d44 <HardwareSerial::begin(unsigned long)+0x98>
    2d40:	88 0f       	add	r24, r24
    2d42:	99 1f       	adc	r25, r25
    2d44:	0a 94       	dec	r0
    2d46:	e2 f7       	brpl	.-8      	; 0x2d40 <HardwareSerial::begin(unsigned long)+0x94>
    2d48:	48 2b       	or	r20, r24
    2d4a:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    2d4c:	ee 89       	ldd	r30, Y+22	; 0x16
    2d4e:	ff 89       	ldd	r31, Y+23	; 0x17
    2d50:	40 81       	ld	r20, Z
    2d52:	c9 01       	movw	r24, r18
    2d54:	0d 8c       	ldd	r0, Y+29	; 0x1d
    2d56:	02 c0       	rjmp	.+4      	; 0x2d5c <HardwareSerial::begin(unsigned long)+0xb0>
    2d58:	88 0f       	add	r24, r24
    2d5a:	99 1f       	adc	r25, r25
    2d5c:	0a 94       	dec	r0
    2d5e:	e2 f7       	brpl	.-8      	; 0x2d58 <HardwareSerial::begin(unsigned long)+0xac>
    2d60:	48 2b       	or	r20, r24
    2d62:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    2d64:	ee 89       	ldd	r30, Y+22	; 0x16
    2d66:	ff 89       	ldd	r31, Y+23	; 0x17
    2d68:	40 81       	ld	r20, Z
    2d6a:	c9 01       	movw	r24, r18
    2d6c:	0e 8c       	ldd	r0, Y+30	; 0x1e
    2d6e:	02 c0       	rjmp	.+4      	; 0x2d74 <HardwareSerial::begin(unsigned long)+0xc8>
    2d70:	88 0f       	add	r24, r24
    2d72:	99 1f       	adc	r25, r25
    2d74:	0a 94       	dec	r0
    2d76:	e2 f7       	brpl	.-8      	; 0x2d70 <HardwareSerial::begin(unsigned long)+0xc4>
    2d78:	48 2b       	or	r20, r24
    2d7a:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    2d7c:	ee 89       	ldd	r30, Y+22	; 0x16
    2d7e:	ff 89       	ldd	r31, Y+23	; 0x17
    2d80:	80 81       	ld	r24, Z
    2d82:	0f 8c       	ldd	r0, Y+31	; 0x1f
    2d84:	02 c0       	rjmp	.+4      	; 0x2d8a <HardwareSerial::begin(unsigned long)+0xde>
    2d86:	22 0f       	add	r18, r18
    2d88:	33 1f       	adc	r19, r19
    2d8a:	0a 94       	dec	r0
    2d8c:	e2 f7       	brpl	.-8      	; 0x2d86 <HardwareSerial::begin(unsigned long)+0xda>
    2d8e:	20 95       	com	r18
    2d90:	28 23       	and	r18, r24
    2d92:	20 83       	st	Z, r18
}
    2d94:	df 91       	pop	r29
    2d96:	cf 91       	pop	r28
    2d98:	1f 91       	pop	r17
    2d9a:	0f 91       	pop	r16
    2d9c:	ff 90       	pop	r15
    2d9e:	ef 90       	pop	r14
    2da0:	df 90       	pop	r13
    2da2:	bf 90       	pop	r11
    2da4:	af 90       	pop	r10
    2da6:	08 95       	ret

00002da8 <HardwareSerial::end()>:
  sbi(*_ucsrb, _txen);
  sbi(*_ucsrb, _rxcie);
  cbi(*_ucsrb, _udrie);
}

void HardwareSerial::end()
    2da8:	cf 93       	push	r28
    2daa:	df 93       	push	r29
    2dac:	dc 01       	movw	r26, r24
{
  // wait for transmission of outgoing data
  while (_tx_buffer->head != _tx_buffer->tail)
    2dae:	1e 96       	adiw	r26, 0x0e	; 14
    2db0:	8d 91       	ld	r24, X+
    2db2:	9c 91       	ld	r25, X
    2db4:	1f 97       	sbiw	r26, 0x0f	; 15
    2db6:	ec 01       	movw	r28, r24
    2db8:	c0 5c       	subi	r28, 0xC0	; 192
    2dba:	df 4f       	sbci	r29, 0xFF	; 255
    2dbc:	fc 01       	movw	r30, r24
    2dbe:	ee 5b       	subi	r30, 0xBE	; 190
    2dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc2:	28 81       	ld	r18, Y
    2dc4:	39 81       	ldd	r19, Y+1	; 0x01
    2dc6:	80 81       	ld	r24, Z
    2dc8:	91 81       	ldd	r25, Z+1	; 0x01
    2dca:	28 17       	cp	r18, r24
    2dcc:	39 07       	cpc	r19, r25
    2dce:	c9 f7       	brne	.-14     	; 0x2dc2 <HardwareSerial::end()+0x1a>
    ;

  cbi(*_ucsrb, _rxen);
    2dd0:	56 96       	adiw	r26, 0x16	; 22
    2dd2:	ed 91       	ld	r30, X+
    2dd4:	fc 91       	ld	r31, X
    2dd6:	57 97       	sbiw	r26, 0x17	; 23
    2dd8:	40 81       	ld	r20, Z
    2dda:	21 e0       	ldi	r18, 0x01	; 1
    2ddc:	30 e0       	ldi	r19, 0x00	; 0
    2dde:	c9 01       	movw	r24, r18
    2de0:	5c 96       	adiw	r26, 0x1c	; 28
    2de2:	0c 90       	ld	r0, X
    2de4:	5c 97       	sbiw	r26, 0x1c	; 28
    2de6:	02 c0       	rjmp	.+4      	; 0x2dec <HardwareSerial::end()+0x44>
    2de8:	88 0f       	add	r24, r24
    2dea:	99 1f       	adc	r25, r25
    2dec:	0a 94       	dec	r0
    2dee:	e2 f7       	brpl	.-8      	; 0x2de8 <HardwareSerial::end()+0x40>
    2df0:	80 95       	com	r24
    2df2:	84 23       	and	r24, r20
    2df4:	80 83       	st	Z, r24
  cbi(*_ucsrb, _txen);
    2df6:	56 96       	adiw	r26, 0x16	; 22
    2df8:	ed 91       	ld	r30, X+
    2dfa:	fc 91       	ld	r31, X
    2dfc:	57 97       	sbiw	r26, 0x17	; 23
    2dfe:	40 81       	ld	r20, Z
    2e00:	c9 01       	movw	r24, r18
    2e02:	5d 96       	adiw	r26, 0x1d	; 29
    2e04:	0c 90       	ld	r0, X
    2e06:	5d 97       	sbiw	r26, 0x1d	; 29
    2e08:	02 c0       	rjmp	.+4      	; 0x2e0e <HardwareSerial::end()+0x66>
    2e0a:	88 0f       	add	r24, r24
    2e0c:	99 1f       	adc	r25, r25
    2e0e:	0a 94       	dec	r0
    2e10:	e2 f7       	brpl	.-8      	; 0x2e0a <HardwareSerial::end()+0x62>
    2e12:	80 95       	com	r24
    2e14:	84 23       	and	r24, r20
    2e16:	80 83       	st	Z, r24
  cbi(*_ucsrb, _rxcie);  
    2e18:	56 96       	adiw	r26, 0x16	; 22
    2e1a:	ed 91       	ld	r30, X+
    2e1c:	fc 91       	ld	r31, X
    2e1e:	57 97       	sbiw	r26, 0x17	; 23
    2e20:	40 81       	ld	r20, Z
    2e22:	c9 01       	movw	r24, r18
    2e24:	5e 96       	adiw	r26, 0x1e	; 30
    2e26:	0c 90       	ld	r0, X
    2e28:	5e 97       	sbiw	r26, 0x1e	; 30
    2e2a:	02 c0       	rjmp	.+4      	; 0x2e30 <HardwareSerial::end()+0x88>
    2e2c:	88 0f       	add	r24, r24
    2e2e:	99 1f       	adc	r25, r25
    2e30:	0a 94       	dec	r0
    2e32:	e2 f7       	brpl	.-8      	; 0x2e2c <HardwareSerial::end()+0x84>
    2e34:	80 95       	com	r24
    2e36:	84 23       	and	r24, r20
    2e38:	80 83       	st	Z, r24
  cbi(*_ucsrb, _udrie);
    2e3a:	56 96       	adiw	r26, 0x16	; 22
    2e3c:	ed 91       	ld	r30, X+
    2e3e:	fc 91       	ld	r31, X
    2e40:	57 97       	sbiw	r26, 0x17	; 23
    2e42:	80 81       	ld	r24, Z
    2e44:	5f 96       	adiw	r26, 0x1f	; 31
    2e46:	0c 90       	ld	r0, X
    2e48:	5f 97       	sbiw	r26, 0x1f	; 31
    2e4a:	02 c0       	rjmp	.+4      	; 0x2e50 <HardwareSerial::end()+0xa8>
    2e4c:	22 0f       	add	r18, r18
    2e4e:	33 1f       	adc	r19, r19
    2e50:	0a 94       	dec	r0
    2e52:	e2 f7       	brpl	.-8      	; 0x2e4c <HardwareSerial::end()+0xa4>
    2e54:	20 95       	com	r18
    2e56:	28 23       	and	r18, r24
    2e58:	20 83       	st	Z, r18
  
  // clear any received data
  _rx_buffer->head = _rx_buffer->tail;
    2e5a:	1c 96       	adiw	r26, 0x0c	; 12
    2e5c:	ed 91       	ld	r30, X+
    2e5e:	fc 91       	ld	r31, X
    2e60:	1d 97       	sbiw	r26, 0x0d	; 13
    2e62:	ee 5b       	subi	r30, 0xBE	; 190
    2e64:	ff 4f       	sbci	r31, 0xFF	; 255
    2e66:	80 81       	ld	r24, Z
    2e68:	91 81       	ldd	r25, Z+1	; 0x01
    2e6a:	92 93       	st	-Z, r25
    2e6c:	82 93       	st	-Z, r24
}
    2e6e:	df 91       	pop	r29
    2e70:	cf 91       	pop	r28
    2e72:	08 95       	ret

00002e74 <HardwareSerial::available()>:

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    2e74:	dc 01       	movw	r26, r24
    2e76:	1c 96       	adiw	r26, 0x0c	; 12
    2e78:	ed 91       	ld	r30, X+
    2e7a:	fc 91       	ld	r31, X
    2e7c:	1d 97       	sbiw	r26, 0x0d	; 13
    2e7e:	e0 5c       	subi	r30, 0xC0	; 192
    2e80:	ff 4f       	sbci	r31, 0xFF	; 255
    2e82:	21 91       	ld	r18, Z+
    2e84:	31 91       	ld	r19, Z+
    2e86:	80 81       	ld	r24, Z
    2e88:	91 81       	ldd	r25, Z+1	; 0x01
    2e8a:	28 1b       	sub	r18, r24
    2e8c:	39 0b       	sbc	r19, r25
    2e8e:	2f 73       	andi	r18, 0x3F	; 63
    2e90:	30 70       	andi	r19, 0x00	; 0
}
    2e92:	c9 01       	movw	r24, r18
    2e94:	08 95       	ret

00002e96 <HardwareSerial::peek()>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    2e96:	dc 01       	movw	r26, r24
    2e98:	1c 96       	adiw	r26, 0x0c	; 12
    2e9a:	ed 91       	ld	r30, X+
    2e9c:	fc 91       	ld	r31, X
    2e9e:	1d 97       	sbiw	r26, 0x0d	; 13
    2ea0:	e0 5c       	subi	r30, 0xC0	; 192
    2ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea4:	20 81       	ld	r18, Z
    2ea6:	31 81       	ldd	r19, Z+1	; 0x01
    2ea8:	e0 54       	subi	r30, 0x40	; 64
    2eaa:	f0 40       	sbci	r31, 0x00	; 0
    2eac:	df 01       	movw	r26, r30
    2eae:	ae 5b       	subi	r26, 0xBE	; 190
    2eb0:	bf 4f       	sbci	r27, 0xFF	; 255
    2eb2:	8d 91       	ld	r24, X+
    2eb4:	9c 91       	ld	r25, X
    2eb6:	11 97       	sbiw	r26, 0x01	; 1
    2eb8:	28 17       	cp	r18, r24
    2eba:	39 07       	cpc	r19, r25
    2ebc:	19 f4       	brne	.+6      	; 0x2ec4 <HardwareSerial::peek()+0x2e>
    2ebe:	2f ef       	ldi	r18, 0xFF	; 255
    2ec0:	3f ef       	ldi	r19, 0xFF	; 255
    2ec2:	07 c0       	rjmp	.+14     	; 0x2ed2 <HardwareSerial::peek()+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    2ec4:	8d 91       	ld	r24, X+
    2ec6:	9c 91       	ld	r25, X
    2ec8:	e8 0f       	add	r30, r24
    2eca:	f9 1f       	adc	r31, r25
    2ecc:	80 81       	ld	r24, Z
    2ece:	28 2f       	mov	r18, r24
    2ed0:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    2ed2:	c9 01       	movw	r24, r18
    2ed4:	08 95       	ret

00002ed6 <HardwareSerial::read()>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    2ed6:	dc 01       	movw	r26, r24
    2ed8:	1c 96       	adiw	r26, 0x0c	; 12
    2eda:	ed 91       	ld	r30, X+
    2edc:	fc 91       	ld	r31, X
    2ede:	1d 97       	sbiw	r26, 0x0d	; 13
    2ee0:	e0 5c       	subi	r30, 0xC0	; 192
    2ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee4:	20 81       	ld	r18, Z
    2ee6:	31 81       	ldd	r19, Z+1	; 0x01
    2ee8:	e0 54       	subi	r30, 0x40	; 64
    2eea:	f0 40       	sbci	r31, 0x00	; 0
    2eec:	df 01       	movw	r26, r30
    2eee:	ae 5b       	subi	r26, 0xBE	; 190
    2ef0:	bf 4f       	sbci	r27, 0xFF	; 255
    2ef2:	8d 91       	ld	r24, X+
    2ef4:	9c 91       	ld	r25, X
    2ef6:	11 97       	sbiw	r26, 0x01	; 1
    2ef8:	28 17       	cp	r18, r24
    2efa:	39 07       	cpc	r19, r25
    2efc:	19 f4       	brne	.+6      	; 0x2f04 <HardwareSerial::read()+0x2e>
    2efe:	2f ef       	ldi	r18, 0xFF	; 255
    2f00:	3f ef       	ldi	r19, 0xFF	; 255
    2f02:	10 c0       	rjmp	.+32     	; 0x2f24 <HardwareSerial::read()+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    2f04:	8d 91       	ld	r24, X+
    2f06:	9c 91       	ld	r25, X
    2f08:	11 97       	sbiw	r26, 0x01	; 1
    2f0a:	e8 0f       	add	r30, r24
    2f0c:	f9 1f       	adc	r31, r25
    2f0e:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    2f10:	8d 91       	ld	r24, X+
    2f12:	9c 91       	ld	r25, X
    2f14:	11 97       	sbiw	r26, 0x01	; 1
    2f16:	01 96       	adiw	r24, 0x01	; 1
    2f18:	8f 73       	andi	r24, 0x3F	; 63
    2f1a:	90 70       	andi	r25, 0x00	; 0
    2f1c:	11 96       	adiw	r26, 0x01	; 1
    2f1e:	9c 93       	st	X, r25
    2f20:	8e 93       	st	-X, r24
    return c;
    2f22:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    2f24:	c9 01       	movw	r24, r18
    2f26:	08 95       	ret

00002f28 <HardwareSerial::flush()>:

void HardwareSerial::flush()
    2f28:	dc 01       	movw	r26, r24
{
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
    2f2a:	91 96       	adiw	r26, 0x21	; 33
    2f2c:	8c 91       	ld	r24, X
    2f2e:	91 97       	sbiw	r26, 0x21	; 33
    2f30:	88 23       	and	r24, r24
    2f32:	39 f0       	breq	.+14     	; 0x2f42 <HardwareSerial::flush()+0x1a>
    2f34:	54 96       	adiw	r26, 0x14	; 20
    2f36:	ed 91       	ld	r30, X+
    2f38:	fc 91       	ld	r31, X
    2f3a:	55 97       	sbiw	r26, 0x15	; 21
    2f3c:	80 81       	ld	r24, Z
    2f3e:	86 ff       	sbrs	r24, 6
    2f40:	f9 cf       	rjmp	.-14     	; 0x2f34 <HardwareSerial::flush()+0xc>
  transmitting = false;
    2f42:	91 96       	adiw	r26, 0x21	; 33
    2f44:	1c 92       	st	X, r1
}
    2f46:	08 95       	ret

00002f48 <HardwareSerial::write(unsigned char)>:

size_t HardwareSerial::write(uint8_t c)
    2f48:	cf 93       	push	r28
    2f4a:	df 93       	push	r29
    2f4c:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    2f4e:	ee 85       	ldd	r30, Y+14	; 0x0e
    2f50:	ff 85       	ldd	r31, Y+15	; 0x0f
    2f52:	e0 5c       	subi	r30, 0xC0	; 192
    2f54:	ff 4f       	sbci	r31, 0xFF	; 255
    2f56:	20 81       	ld	r18, Z
    2f58:	31 81       	ldd	r19, Z+1	; 0x01
    2f5a:	e0 54       	subi	r30, 0x40	; 64
    2f5c:	f0 40       	sbci	r31, 0x00	; 0
    2f5e:	2f 5f       	subi	r18, 0xFF	; 255
    2f60:	3f 4f       	sbci	r19, 0xFF	; 255
    2f62:	2f 73       	andi	r18, 0x3F	; 63
    2f64:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    2f66:	df 01       	movw	r26, r30
    2f68:	ae 5b       	subi	r26, 0xBE	; 190
    2f6a:	bf 4f       	sbci	r27, 0xFF	; 255
    2f6c:	8d 91       	ld	r24, X+
    2f6e:	9c 91       	ld	r25, X
    2f70:	11 97       	sbiw	r26, 0x01	; 1
    2f72:	28 17       	cp	r18, r24
    2f74:	39 07       	cpc	r19, r25
    2f76:	d1 f3       	breq	.-12     	; 0x2f6c <HardwareSerial::write(unsigned char)+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    2f78:	e0 5c       	subi	r30, 0xC0	; 192
    2f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7c:	80 81       	ld	r24, Z
    2f7e:	91 81       	ldd	r25, Z+1	; 0x01
    2f80:	e0 54       	subi	r30, 0x40	; 64
    2f82:	f0 40       	sbci	r31, 0x00	; 0
    2f84:	e8 0f       	add	r30, r24
    2f86:	f9 1f       	adc	r31, r25
    2f88:	60 83       	st	Z, r22
  _tx_buffer->head = i;
    2f8a:	ee 85       	ldd	r30, Y+14	; 0x0e
    2f8c:	ff 85       	ldd	r31, Y+15	; 0x0f
    2f8e:	e0 5c       	subi	r30, 0xC0	; 192
    2f90:	ff 4f       	sbci	r31, 0xFF	; 255
    2f92:	31 83       	std	Z+1, r19	; 0x01
    2f94:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    2f96:	ee 89       	ldd	r30, Y+22	; 0x16
    2f98:	ff 89       	ldd	r31, Y+23	; 0x17
    2f9a:	20 81       	ld	r18, Z
    2f9c:	81 e0       	ldi	r24, 0x01	; 1
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	0f 8c       	ldd	r0, Y+31	; 0x1f
    2fa2:	02 c0       	rjmp	.+4      	; 0x2fa8 <HardwareSerial::write(unsigned char)+0x60>
    2fa4:	88 0f       	add	r24, r24
    2fa6:	99 1f       	adc	r25, r25
    2fa8:	0a 94       	dec	r0
    2faa:	e2 f7       	brpl	.-8      	; 0x2fa4 <HardwareSerial::write(unsigned char)+0x5c>
    2fac:	28 2b       	or	r18, r24
    2fae:	20 83       	st	Z, r18
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
    2fb0:	81 e0       	ldi	r24, 0x01	; 1
    2fb2:	89 a3       	std	Y+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
    2fb4:	ec 89       	ldd	r30, Y+20	; 0x14
    2fb6:	fd 89       	ldd	r31, Y+21	; 0x15
    2fb8:	80 81       	ld	r24, Z
    2fba:	80 64       	ori	r24, 0x40	; 64
    2fbc:	80 83       	st	Z, r24
  
  return 1;
}
    2fbe:	81 e0       	ldi	r24, 0x01	; 1
    2fc0:	90 e0       	ldi	r25, 0x00	; 0
    2fc2:	df 91       	pop	r29
    2fc4:	cf 91       	pop	r28
    2fc6:	08 95       	ret

00002fc8 <global constructors keyed to rx_buffer>:
  public:
    Print() : write_error(0) {}
    2fc8:	10 92 a3 03 	sts	0x03A3, r1
    2fcc:	10 92 a2 03 	sts	0x03A2, r1
    2fd0:	88 ee       	ldi	r24, 0xE8	; 232
    2fd2:	93 e0       	ldi	r25, 0x03	; 3
    2fd4:	a0 e0       	ldi	r26, 0x00	; 0
    2fd6:	b0 e0       	ldi	r27, 0x00	; 0
    2fd8:	80 93 a4 03 	sts	0x03A4, r24
    2fdc:	90 93 a5 03 	sts	0x03A5, r25
    2fe0:	a0 93 a6 03 	sts	0x03A6, r26
    2fe4:	b0 93 a7 03 	sts	0x03A7, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    2fe8:	8f ee       	ldi	r24, 0xEF	; 239
    2fea:	91 e0       	ldi	r25, 0x01	; 1
    2fec:	90 93 a1 03 	sts	0x03A1, r25
    2ff0:	80 93 a0 03 	sts	0x03A0, r24
{
  _rx_buffer = rx_buffer;
    2ff4:	88 e1       	ldi	r24, 0x18	; 24
    2ff6:	93 e0       	ldi	r25, 0x03	; 3
    2ff8:	90 93 ad 03 	sts	0x03AD, r25
    2ffc:	80 93 ac 03 	sts	0x03AC, r24
  _tx_buffer = tx_buffer;
    3000:	8c e5       	ldi	r24, 0x5C	; 92
    3002:	93 e0       	ldi	r25, 0x03	; 3
    3004:	90 93 af 03 	sts	0x03AF, r25
    3008:	80 93 ae 03 	sts	0x03AE, r24
  _ubrrh = ubrrh;
    300c:	85 ec       	ldi	r24, 0xC5	; 197
    300e:	90 e0       	ldi	r25, 0x00	; 0
    3010:	90 93 b1 03 	sts	0x03B1, r25
    3014:	80 93 b0 03 	sts	0x03B0, r24
  _ubrrl = ubrrl;
    3018:	84 ec       	ldi	r24, 0xC4	; 196
    301a:	90 e0       	ldi	r25, 0x00	; 0
    301c:	90 93 b3 03 	sts	0x03B3, r25
    3020:	80 93 b2 03 	sts	0x03B2, r24
  _ucsra = ucsra;
    3024:	80 ec       	ldi	r24, 0xC0	; 192
    3026:	90 e0       	ldi	r25, 0x00	; 0
    3028:	90 93 b5 03 	sts	0x03B5, r25
    302c:	80 93 b4 03 	sts	0x03B4, r24
  _ucsrb = ucsrb;
    3030:	81 ec       	ldi	r24, 0xC1	; 193
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	90 93 b7 03 	sts	0x03B7, r25
    3038:	80 93 b6 03 	sts	0x03B6, r24
  _ucsrc = ucsrc;
    303c:	82 ec       	ldi	r24, 0xC2	; 194
    303e:	90 e0       	ldi	r25, 0x00	; 0
    3040:	90 93 b9 03 	sts	0x03B9, r25
    3044:	80 93 b8 03 	sts	0x03B8, r24
  _udr = udr;
    3048:	86 ec       	ldi	r24, 0xC6	; 198
    304a:	90 e0       	ldi	r25, 0x00	; 0
    304c:	90 93 bb 03 	sts	0x03BB, r25
    3050:	80 93 ba 03 	sts	0x03BA, r24
  _rxen = rxen;
    3054:	84 e0       	ldi	r24, 0x04	; 4
    3056:	80 93 bc 03 	sts	0x03BC, r24
  _txen = txen;
    305a:	83 e0       	ldi	r24, 0x03	; 3
    305c:	80 93 bd 03 	sts	0x03BD, r24
  _rxcie = rxcie;
    3060:	87 e0       	ldi	r24, 0x07	; 7
    3062:	80 93 be 03 	sts	0x03BE, r24
  _udrie = udrie;
    3066:	85 e0       	ldi	r24, 0x05	; 5
    3068:	80 93 bf 03 	sts	0x03BF, r24
  _u2x = u2x;
    306c:	81 e0       	ldi	r24, 0x01	; 1
    306e:	80 93 c0 03 	sts	0x03C0, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    3072:	08 95       	ret

00003074 <main>:
#include <Arduino.h>

int main(void)
    3074:	cf 93       	push	r28
    3076:	df 93       	push	r29
{
	init();
    3078:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    307c:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    3080:	c8 e0       	ldi	r28, 0x08	; 8
    3082:	d6 e1       	ldi	r29, 0x16	; 22
#endif
	
	setup();
    
	for (;;) {
		loop();
    3084:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <loop>
		if (serialEventRun) serialEventRun();
    3088:	20 97       	sbiw	r28, 0x00	; 0
    308a:	e1 f3       	breq	.-8      	; 0x3084 <main+0x10>
    308c:	0e 94 08 16 	call	0x2c10	; 0x2c10 <serialEventRun()>
    3090:	f9 cf       	rjmp	.-14     	; 0x3084 <main+0x10>

00003092 <Print::write(unsigned char const*, unsigned int)>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    3092:	cf 92       	push	r12
    3094:	df 92       	push	r13
    3096:	ef 92       	push	r14
    3098:	ff 92       	push	r15
    309a:	0f 93       	push	r16
    309c:	1f 93       	push	r17
    309e:	cf 93       	push	r28
    30a0:	df 93       	push	r29
    30a2:	7c 01       	movw	r14, r24
    30a4:	6b 01       	movw	r12, r22
    30a6:	8a 01       	movw	r16, r20
    30a8:	c0 e0       	ldi	r28, 0x00	; 0
    30aa:	d0 e0       	ldi	r29, 0x00	; 0
    30ac:	0f c0       	rjmp	.+30     	; 0x30cc <Print::write(unsigned char const*, unsigned int)+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    30ae:	d6 01       	movw	r26, r12
    30b0:	6d 91       	ld	r22, X+
    30b2:	6d 01       	movw	r12, r26
    30b4:	d7 01       	movw	r26, r14
    30b6:	ed 91       	ld	r30, X+
    30b8:	fc 91       	ld	r31, X
    30ba:	01 90       	ld	r0, Z+
    30bc:	f0 81       	ld	r31, Z
    30be:	e0 2d       	mov	r30, r0
    30c0:	c7 01       	movw	r24, r14
    30c2:	09 95       	icall
    30c4:	c8 0f       	add	r28, r24
    30c6:	d9 1f       	adc	r29, r25
    30c8:	01 50       	subi	r16, 0x01	; 1
    30ca:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    30cc:	01 15       	cp	r16, r1
    30ce:	11 05       	cpc	r17, r1
    30d0:	71 f7       	brne	.-36     	; 0x30ae <Print::write(unsigned char const*, unsigned int)+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    30d2:	ce 01       	movw	r24, r28
    30d4:	df 91       	pop	r29
    30d6:	cf 91       	pop	r28
    30d8:	1f 91       	pop	r17
    30da:	0f 91       	pop	r16
    30dc:	ff 90       	pop	r15
    30de:	ef 90       	pop	r14
    30e0:	df 90       	pop	r13
    30e2:	cf 90       	pop	r12
    30e4:	08 95       	ret

000030e6 <Print::print(__FlashStringHelper const*)>:

size_t Print::print(const __FlashStringHelper *ifsh)
    30e6:	ef 92       	push	r14
    30e8:	ff 92       	push	r15
    30ea:	0f 93       	push	r16
    30ec:	1f 93       	push	r17
    30ee:	cf 93       	push	r28
    30f0:	df 93       	push	r29
    30f2:	7c 01       	movw	r14, r24
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
    30f4:	8b 01       	movw	r16, r22
    30f6:	c0 e0       	ldi	r28, 0x00	; 0
    30f8:	d0 e0       	ldi	r29, 0x00	; 0
    30fa:	f8 01       	movw	r30, r16
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    30fc:	0f 5f       	subi	r16, 0xFF	; 255
    30fe:	1f 4f       	sbci	r17, 0xFF	; 255
    3100:	64 91       	lpm	r22, Z+
    if (c == 0) break;
    3102:	66 23       	and	r22, r22
    3104:	59 f0       	breq	.+22     	; 0x311c <Print::print(__FlashStringHelper const*)+0x36>
    n += write(c);
    3106:	d7 01       	movw	r26, r14
    3108:	ed 91       	ld	r30, X+
    310a:	fc 91       	ld	r31, X
    310c:	01 90       	ld	r0, Z+
    310e:	f0 81       	ld	r31, Z
    3110:	e0 2d       	mov	r30, r0
    3112:	c7 01       	movw	r24, r14
    3114:	09 95       	icall
    3116:	c8 0f       	add	r28, r24
    3118:	d9 1f       	adc	r29, r25
    311a:	ef cf       	rjmp	.-34     	; 0x30fa <Print::print(__FlashStringHelper const*)+0x14>
  }
  return n;
}
    311c:	ce 01       	movw	r24, r28
    311e:	df 91       	pop	r29
    3120:	cf 91       	pop	r28
    3122:	1f 91       	pop	r17
    3124:	0f 91       	pop	r16
    3126:	ff 90       	pop	r15
    3128:	ef 90       	pop	r14
    312a:	08 95       	ret

0000312c <Print::println()>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
    312c:	ef 92       	push	r14
    312e:	ff 92       	push	r15
    3130:	0f 93       	push	r16
    3132:	1f 93       	push	r17
    3134:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    3136:	dc 01       	movw	r26, r24
    3138:	ed 91       	ld	r30, X+
    313a:	fc 91       	ld	r31, X
    313c:	01 90       	ld	r0, Z+
    313e:	f0 81       	ld	r31, Z
    3140:	e0 2d       	mov	r30, r0
    3142:	6d e0       	ldi	r22, 0x0D	; 13
    3144:	09 95       	icall
    3146:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    3148:	d8 01       	movw	r26, r16
    314a:	ed 91       	ld	r30, X+
    314c:	fc 91       	ld	r31, X
    314e:	01 90       	ld	r0, Z+
    3150:	f0 81       	ld	r31, Z
    3152:	e0 2d       	mov	r30, r0
    3154:	c8 01       	movw	r24, r16
    3156:	6a e0       	ldi	r22, 0x0A	; 10
    3158:	09 95       	icall
    315a:	9c 01       	movw	r18, r24
    315c:	2e 0d       	add	r18, r14
    315e:	3f 1d       	adc	r19, r15
    3160:	c9 01       	movw	r24, r18
    3162:	1f 91       	pop	r17
    3164:	0f 91       	pop	r16
    3166:	ff 90       	pop	r15
    3168:	ef 90       	pop	r14
    316a:	08 95       	ret

0000316c <Print::println(__FlashStringHelper const*)>:
size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
    316c:	ef 92       	push	r14
    316e:	ff 92       	push	r15
    3170:	0f 93       	push	r16
    3172:	1f 93       	push	r17
    3174:	7c 01       	movw	r14, r24
{
  size_t n = print(ifsh);
    3176:	0e 94 73 18 	call	0x30e6	; 0x30e6 <Print::print(__FlashStringHelper const*)>
    317a:	8c 01       	movw	r16, r24
  n += println();
    317c:	c7 01       	movw	r24, r14
    317e:	0e 94 96 18 	call	0x312c	; 0x312c <Print::println()>
    3182:	9c 01       	movw	r18, r24
    3184:	20 0f       	add	r18, r16
    3186:	31 1f       	adc	r19, r17
  return n;
}
    3188:	c9 01       	movw	r24, r18
    318a:	1f 91       	pop	r17
    318c:	0f 91       	pop	r16
    318e:	ff 90       	pop	r15
    3190:	ef 90       	pop	r14
    3192:	08 95       	ret

00003194 <Print::write(char const*)>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    3194:	cf 93       	push	r28
    3196:	df 93       	push	r29
    3198:	ec 01       	movw	r28, r24
      if (str == NULL) return 0;
    319a:	61 15       	cp	r22, r1
    319c:	71 05       	cpc	r23, r1
    319e:	19 f4       	brne	.+6      	; 0x31a6 <Print::write(char const*)+0x12>
    31a0:	20 e0       	ldi	r18, 0x00	; 0
    31a2:	30 e0       	ldi	r19, 0x00	; 0
    31a4:	0f c0       	rjmp	.+30     	; 0x31c4 <Print::write(char const*)+0x30>
      return write((const uint8_t *)str, strlen(str));
    31a6:	db 01       	movw	r26, r22
    31a8:	0d 90       	ld	r0, X+
    31aa:	00 20       	and	r0, r0
    31ac:	e9 f7       	brne	.-6      	; 0x31a8 <Print::write(char const*)+0x14>
    31ae:	11 97       	sbiw	r26, 0x01	; 1
    31b0:	a6 1b       	sub	r26, r22
    31b2:	b7 0b       	sbc	r27, r23
    31b4:	e8 81       	ld	r30, Y
    31b6:	f9 81       	ldd	r31, Y+1	; 0x01
    31b8:	02 80       	ldd	r0, Z+2	; 0x02
    31ba:	f3 81       	ldd	r31, Z+3	; 0x03
    31bc:	e0 2d       	mov	r30, r0
    31be:	ad 01       	movw	r20, r26
    31c0:	09 95       	icall
    31c2:	9c 01       	movw	r18, r24
    }
    31c4:	c9 01       	movw	r24, r18
    31c6:	df 91       	pop	r29
    31c8:	cf 91       	pop	r28
    31ca:	08 95       	ret

000031cc <Print::printNumber(unsigned long, unsigned char)>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    31cc:	4f 92       	push	r4
    31ce:	5f 92       	push	r5
    31d0:	7f 92       	push	r7
    31d2:	8f 92       	push	r8
    31d4:	9f 92       	push	r9
    31d6:	af 92       	push	r10
    31d8:	bf 92       	push	r11
    31da:	cf 92       	push	r12
    31dc:	df 92       	push	r13
    31de:	ef 92       	push	r14
    31e0:	ff 92       	push	r15
    31e2:	0f 93       	push	r16
    31e4:	1f 93       	push	r17
    31e6:	df 93       	push	r29
    31e8:	cf 93       	push	r28
    31ea:	cd b7       	in	r28, 0x3d	; 61
    31ec:	de b7       	in	r29, 0x3e	; 62
    31ee:	a1 97       	sbiw	r28, 0x21	; 33
    31f0:	0f b6       	in	r0, 0x3f	; 63
    31f2:	f8 94       	cli
    31f4:	de bf       	out	0x3e, r29	; 62
    31f6:	0f be       	out	0x3f, r0	; 63
    31f8:	cd bf       	out	0x3d, r28	; 61
    31fa:	2c 01       	movw	r4, r24
    31fc:	74 2e       	mov	r7, r20
    31fe:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    3200:	22 30       	cpi	r18, 0x02	; 2
    3202:	08 f4       	brcc	.+2      	; 0x3206 <Print::printNumber(unsigned long, unsigned char)+0x3a>
    3204:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    3206:	19 a2       	std	Y+33, r1	; 0x21
    3208:	31 e2       	ldi	r19, 0x21	; 33
    320a:	c3 2e       	mov	r12, r19
    320c:	d1 2c       	mov	r13, r1
    320e:	cc 0e       	add	r12, r28
    3210:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    3212:	82 2e       	mov	r8, r18
    3214:	99 24       	eor	r9, r9
    3216:	aa 24       	eor	r10, r10
    3218:	bb 24       	eor	r11, r11
    321a:	67 2d       	mov	r22, r7
    321c:	75 2f       	mov	r23, r21
    321e:	a5 01       	movw	r20, r10
    3220:	94 01       	movw	r18, r8
    3222:	0e 94 5f 1a 	call	0x34be	; 0x34be <__udivmodsi4>
    3226:	79 01       	movw	r14, r18
    3228:	8a 01       	movw	r16, r20
    char c = m - base * n;
    322a:	c8 01       	movw	r24, r16
    322c:	b7 01       	movw	r22, r14
    322e:	a5 01       	movw	r20, r10
    3230:	94 01       	movw	r18, r8
    3232:	0e 94 2c 1a 	call	0x3458	; 0x3458 <__mulsi3>
    3236:	47 2d       	mov	r20, r7
    3238:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    323a:	08 94       	sec
    323c:	c1 08       	sbc	r12, r1
    323e:	d1 08       	sbc	r13, r1
    3240:	4a 30       	cpi	r20, 0x0A	; 10
    3242:	14 f4       	brge	.+4      	; 0x3248 <Print::printNumber(unsigned long, unsigned char)+0x7c>
    3244:	40 5d       	subi	r20, 0xD0	; 208
    3246:	01 c0       	rjmp	.+2      	; 0x324a <Print::printNumber(unsigned long, unsigned char)+0x7e>
    3248:	49 5c       	subi	r20, 0xC9	; 201
    324a:	f6 01       	movw	r30, r12
    324c:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    324e:	e1 14       	cp	r14, r1
    3250:	f1 04       	cpc	r15, r1
    3252:	01 05       	cpc	r16, r1
    3254:	11 05       	cpc	r17, r1
    3256:	21 f0       	breq	.+8      	; 0x3260 <Print::printNumber(unsigned long, unsigned char)+0x94>
    3258:	7e 2c       	mov	r7, r14
    325a:	5f 2d       	mov	r21, r15
    325c:	c8 01       	movw	r24, r16
    325e:	dd cf       	rjmp	.-70     	; 0x321a <Print::printNumber(unsigned long, unsigned char)+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    3260:	c2 01       	movw	r24, r4
    3262:	b6 01       	movw	r22, r12
    3264:	0e 94 ca 18 	call	0x3194	; 0x3194 <Print::write(char const*)>
}
    3268:	a1 96       	adiw	r28, 0x21	; 33
    326a:	0f b6       	in	r0, 0x3f	; 63
    326c:	f8 94       	cli
    326e:	de bf       	out	0x3e, r29	; 62
    3270:	0f be       	out	0x3f, r0	; 63
    3272:	cd bf       	out	0x3d, r28	; 61
    3274:	cf 91       	pop	r28
    3276:	df 91       	pop	r29
    3278:	1f 91       	pop	r17
    327a:	0f 91       	pop	r16
    327c:	ff 90       	pop	r15
    327e:	ef 90       	pop	r14
    3280:	df 90       	pop	r13
    3282:	cf 90       	pop	r12
    3284:	bf 90       	pop	r11
    3286:	af 90       	pop	r10
    3288:	9f 90       	pop	r9
    328a:	8f 90       	pop	r8
    328c:	7f 90       	pop	r7
    328e:	5f 90       	pop	r5
    3290:	4f 90       	pop	r4
    3292:	08 95       	ret

00003294 <Print::print(long, int)>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
    3294:	cf 92       	push	r12
    3296:	df 92       	push	r13
    3298:	ef 92       	push	r14
    329a:	ff 92       	push	r15
    329c:	0f 93       	push	r16
    329e:	1f 93       	push	r17
    32a0:	cf 93       	push	r28
    32a2:	df 93       	push	r29
    32a4:	ec 01       	movw	r28, r24
    32a6:	6a 01       	movw	r12, r20
    32a8:	7b 01       	movw	r14, r22
{
  if (base == 0) {
    32aa:	21 15       	cp	r18, r1
    32ac:	31 05       	cpc	r19, r1
    32ae:	41 f4       	brne	.+16     	; 0x32c0 <Print::print(long, int)+0x2c>
    return write(n);
    32b0:	e8 81       	ld	r30, Y
    32b2:	f9 81       	ldd	r31, Y+1	; 0x01
    32b4:	01 90       	ld	r0, Z+
    32b6:	f0 81       	ld	r31, Z
    32b8:	e0 2d       	mov	r30, r0
    32ba:	64 2f       	mov	r22, r20
    32bc:	09 95       	icall
    32be:	1f c0       	rjmp	.+62     	; 0x32fe <Print::print(long, int)+0x6a>
  } else if (base == 10) {
    32c0:	2a 30       	cpi	r18, 0x0A	; 10
    32c2:	31 05       	cpc	r19, r1
    32c4:	d1 f4       	brne	.+52     	; 0x32fa <Print::print(long, int)+0x66>
    if (n < 0) {
    32c6:	77 ff       	sbrs	r23, 7
    32c8:	17 c0       	rjmp	.+46     	; 0x32f8 <Print::print(long, int)+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    32ca:	e8 81       	ld	r30, Y
    32cc:	f9 81       	ldd	r31, Y+1	; 0x01
    32ce:	01 90       	ld	r0, Z+
    32d0:	f0 81       	ld	r31, Z
    32d2:	e0 2d       	mov	r30, r0
    32d4:	6d e2       	ldi	r22, 0x2D	; 45
    32d6:	09 95       	icall
    32d8:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    32da:	44 27       	eor	r20, r20
    32dc:	55 27       	eor	r21, r21
    32de:	ba 01       	movw	r22, r20
    32e0:	4c 19       	sub	r20, r12
    32e2:	5d 09       	sbc	r21, r13
    32e4:	6e 09       	sbc	r22, r14
    32e6:	7f 09       	sbc	r23, r15
    32e8:	ce 01       	movw	r24, r28
    32ea:	2a e0       	ldi	r18, 0x0A	; 10
    32ec:	0e 94 e6 18 	call	0x31cc	; 0x31cc <Print::printNumber(unsigned long, unsigned char)>
    32f0:	98 01       	movw	r18, r16
    32f2:	28 0f       	add	r18, r24
    32f4:	39 1f       	adc	r19, r25
    32f6:	04 c0       	rjmp	.+8      	; 0x3300 <Print::print(long, int)+0x6c>
    }
    return printNumber(n, 10);
    32f8:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    32fa:	0e 94 e6 18 	call	0x31cc	; 0x31cc <Print::printNumber(unsigned long, unsigned char)>
    32fe:	9c 01       	movw	r18, r24
  }
}
    3300:	c9 01       	movw	r24, r18
    3302:	df 91       	pop	r29
    3304:	cf 91       	pop	r28
    3306:	1f 91       	pop	r17
    3308:	0f 91       	pop	r16
    330a:	ff 90       	pop	r15
    330c:	ef 90       	pop	r14
    330e:	df 90       	pop	r13
    3310:	cf 90       	pop	r12
    3312:	08 95       	ret

00003314 <Print::print(int, int)>:
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
    3314:	ef 92       	push	r14
    3316:	ff 92       	push	r15
    3318:	0f 93       	push	r16
    331a:	1f 93       	push	r17
    331c:	7b 01       	movw	r14, r22
    331e:	9a 01       	movw	r18, r20
{
  return print((long) n, base);
    3320:	00 27       	eor	r16, r16
    3322:	f7 fc       	sbrc	r15, 7
    3324:	00 95       	com	r16
    3326:	10 2f       	mov	r17, r16
    3328:	b8 01       	movw	r22, r16
    332a:	a7 01       	movw	r20, r14
    332c:	0e 94 4a 19 	call	0x3294	; 0x3294 <Print::print(long, int)>
}
    3330:	1f 91       	pop	r17
    3332:	0f 91       	pop	r16
    3334:	ff 90       	pop	r15
    3336:	ef 90       	pop	r14
    3338:	08 95       	ret

0000333a <Print::print(char const*)>:
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    333a:	0e 94 ca 18 	call	0x3194	; 0x3194 <Print::write(char const*)>
}
    333e:	08 95       	ret

00003340 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    3340:	1f 92       	push	r1
    3342:	0f 92       	push	r0
    3344:	0f b6       	in	r0, 0x3f	; 63
    3346:	0f 92       	push	r0
    3348:	11 24       	eor	r1, r1
    334a:	2f 93       	push	r18
    334c:	3f 93       	push	r19
    334e:	4f 93       	push	r20
    3350:	5f 93       	push	r21
    3352:	6f 93       	push	r22
    3354:	7f 93       	push	r23
    3356:	8f 93       	push	r24
    3358:	9f 93       	push	r25
    335a:	af 93       	push	r26
    335c:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    335e:	20 91 c6 03 	lds	r18, 0x03C6
    3362:	30 91 c7 03 	lds	r19, 0x03C7
    3366:	40 91 c8 03 	lds	r20, 0x03C8
    336a:	50 91 c9 03 	lds	r21, 0x03C9
	unsigned char f = timer0_fract;
    336e:	70 91 ca 03 	lds	r23, 0x03CA

	m += MILLIS_INC;
    3372:	da 01       	movw	r26, r20
    3374:	c9 01       	movw	r24, r18
    3376:	40 96       	adiw	r24, 0x10	; 16
    3378:	a1 1d       	adc	r26, r1
    337a:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    337c:	67 2f       	mov	r22, r23
    337e:	60 5d       	subi	r22, 0xD0	; 208
	if (f >= FRACT_MAX) {
    3380:	6d 37       	cpi	r22, 0x7D	; 125
    3382:	30 f0       	brcs	.+12     	; 0x3390 <__vector_16+0x50>
		f -= FRACT_MAX;
    3384:	6d 57       	subi	r22, 0x7D	; 125
		m += 1;
    3386:	da 01       	movw	r26, r20
    3388:	c9 01       	movw	r24, r18
    338a:	41 96       	adiw	r24, 0x11	; 17
    338c:	a1 1d       	adc	r26, r1
    338e:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    3390:	60 93 ca 03 	sts	0x03CA, r22
	timer0_millis = m;
    3394:	80 93 c6 03 	sts	0x03C6, r24
    3398:	90 93 c7 03 	sts	0x03C7, r25
    339c:	a0 93 c8 03 	sts	0x03C8, r26
    33a0:	b0 93 c9 03 	sts	0x03C9, r27
	timer0_overflow_count++;
    33a4:	80 91 c2 03 	lds	r24, 0x03C2
    33a8:	90 91 c3 03 	lds	r25, 0x03C3
    33ac:	a0 91 c4 03 	lds	r26, 0x03C4
    33b0:	b0 91 c5 03 	lds	r27, 0x03C5
    33b4:	01 96       	adiw	r24, 0x01	; 1
    33b6:	a1 1d       	adc	r26, r1
    33b8:	b1 1d       	adc	r27, r1
    33ba:	80 93 c2 03 	sts	0x03C2, r24
    33be:	90 93 c3 03 	sts	0x03C3, r25
    33c2:	a0 93 c4 03 	sts	0x03C4, r26
    33c6:	b0 93 c5 03 	sts	0x03C5, r27
}
    33ca:	bf 91       	pop	r27
    33cc:	af 91       	pop	r26
    33ce:	9f 91       	pop	r25
    33d0:	8f 91       	pop	r24
    33d2:	7f 91       	pop	r23
    33d4:	6f 91       	pop	r22
    33d6:	5f 91       	pop	r21
    33d8:	4f 91       	pop	r20
    33da:	3f 91       	pop	r19
    33dc:	2f 91       	pop	r18
    33de:	0f 90       	pop	r0
    33e0:	0f be       	out	0x3f, r0	; 63
    33e2:	0f 90       	pop	r0
    33e4:	1f 90       	pop	r1
    33e6:	18 95       	reti

000033e8 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    33e8:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    33ea:	84 b5       	in	r24, 0x24	; 36
    33ec:	82 60       	ori	r24, 0x02	; 2
    33ee:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    33f0:	84 b5       	in	r24, 0x24	; 36
    33f2:	81 60       	ori	r24, 0x01	; 1
    33f4:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    33f6:	85 b5       	in	r24, 0x25	; 37
    33f8:	82 60       	ori	r24, 0x02	; 2
    33fa:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    33fc:	85 b5       	in	r24, 0x25	; 37
    33fe:	81 60       	ori	r24, 0x01	; 1
    3400:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    3402:	ee e6       	ldi	r30, 0x6E	; 110
    3404:	f0 e0       	ldi	r31, 0x00	; 0
    3406:	80 81       	ld	r24, Z
    3408:	81 60       	ori	r24, 0x01	; 1
    340a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    340c:	e1 e8       	ldi	r30, 0x81	; 129
    340e:	f0 e0       	ldi	r31, 0x00	; 0
    3410:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    3412:	80 81       	ld	r24, Z
    3414:	82 60       	ori	r24, 0x02	; 2
    3416:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    3418:	e0 e8       	ldi	r30, 0x80	; 128
    341a:	f0 e0       	ldi	r31, 0x00	; 0
    341c:	80 81       	ld	r24, Z
    341e:	81 60       	ori	r24, 0x01	; 1
    3420:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    3422:	e1 eb       	ldi	r30, 0xB1	; 177
    3424:	f0 e0       	ldi	r31, 0x00	; 0
    3426:	80 81       	ld	r24, Z
    3428:	84 60       	ori	r24, 0x04	; 4
    342a:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    342c:	e0 eb       	ldi	r30, 0xB0	; 176
    342e:	f0 e0       	ldi	r31, 0x00	; 0
    3430:	80 81       	ld	r24, Z
    3432:	81 60       	ori	r24, 0x01	; 1
    3434:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    3436:	ea e7       	ldi	r30, 0x7A	; 122
    3438:	f0 e0       	ldi	r31, 0x00	; 0
    343a:	80 81       	ld	r24, Z
    343c:	84 60       	ori	r24, 0x04	; 4
    343e:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    3440:	80 81       	ld	r24, Z
    3442:	82 60       	ori	r24, 0x02	; 2
    3444:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    3446:	80 81       	ld	r24, Z
    3448:	81 60       	ori	r24, 0x01	; 1
    344a:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    344c:	80 81       	ld	r24, Z
    344e:	80 68       	ori	r24, 0x80	; 128
    3450:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    3452:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    3456:	08 95       	ret

00003458 <__mulsi3>:
    3458:	62 9f       	mul	r22, r18
    345a:	d0 01       	movw	r26, r0
    345c:	73 9f       	mul	r23, r19
    345e:	f0 01       	movw	r30, r0
    3460:	82 9f       	mul	r24, r18
    3462:	e0 0d       	add	r30, r0
    3464:	f1 1d       	adc	r31, r1
    3466:	64 9f       	mul	r22, r20
    3468:	e0 0d       	add	r30, r0
    346a:	f1 1d       	adc	r31, r1
    346c:	92 9f       	mul	r25, r18
    346e:	f0 0d       	add	r31, r0
    3470:	83 9f       	mul	r24, r19
    3472:	f0 0d       	add	r31, r0
    3474:	74 9f       	mul	r23, r20
    3476:	f0 0d       	add	r31, r0
    3478:	65 9f       	mul	r22, r21
    347a:	f0 0d       	add	r31, r0
    347c:	99 27       	eor	r25, r25
    347e:	72 9f       	mul	r23, r18
    3480:	b0 0d       	add	r27, r0
    3482:	e1 1d       	adc	r30, r1
    3484:	f9 1f       	adc	r31, r25
    3486:	63 9f       	mul	r22, r19
    3488:	b0 0d       	add	r27, r0
    348a:	e1 1d       	adc	r30, r1
    348c:	f9 1f       	adc	r31, r25
    348e:	bd 01       	movw	r22, r26
    3490:	cf 01       	movw	r24, r30
    3492:	11 24       	eor	r1, r1
    3494:	08 95       	ret

00003496 <__udivmodhi4>:
    3496:	aa 1b       	sub	r26, r26
    3498:	bb 1b       	sub	r27, r27
    349a:	51 e1       	ldi	r21, 0x11	; 17
    349c:	07 c0       	rjmp	.+14     	; 0x34ac <__udivmodhi4_ep>

0000349e <__udivmodhi4_loop>:
    349e:	aa 1f       	adc	r26, r26
    34a0:	bb 1f       	adc	r27, r27
    34a2:	a6 17       	cp	r26, r22
    34a4:	b7 07       	cpc	r27, r23
    34a6:	10 f0       	brcs	.+4      	; 0x34ac <__udivmodhi4_ep>
    34a8:	a6 1b       	sub	r26, r22
    34aa:	b7 0b       	sbc	r27, r23

000034ac <__udivmodhi4_ep>:
    34ac:	88 1f       	adc	r24, r24
    34ae:	99 1f       	adc	r25, r25
    34b0:	5a 95       	dec	r21
    34b2:	a9 f7       	brne	.-22     	; 0x349e <__udivmodhi4_loop>
    34b4:	80 95       	com	r24
    34b6:	90 95       	com	r25
    34b8:	bc 01       	movw	r22, r24
    34ba:	cd 01       	movw	r24, r26
    34bc:	08 95       	ret

000034be <__udivmodsi4>:
    34be:	a1 e2       	ldi	r26, 0x21	; 33
    34c0:	1a 2e       	mov	r1, r26
    34c2:	aa 1b       	sub	r26, r26
    34c4:	bb 1b       	sub	r27, r27
    34c6:	fd 01       	movw	r30, r26
    34c8:	0d c0       	rjmp	.+26     	; 0x34e4 <__udivmodsi4_ep>

000034ca <__udivmodsi4_loop>:
    34ca:	aa 1f       	adc	r26, r26
    34cc:	bb 1f       	adc	r27, r27
    34ce:	ee 1f       	adc	r30, r30
    34d0:	ff 1f       	adc	r31, r31
    34d2:	a2 17       	cp	r26, r18
    34d4:	b3 07       	cpc	r27, r19
    34d6:	e4 07       	cpc	r30, r20
    34d8:	f5 07       	cpc	r31, r21
    34da:	20 f0       	brcs	.+8      	; 0x34e4 <__udivmodsi4_ep>
    34dc:	a2 1b       	sub	r26, r18
    34de:	b3 0b       	sbc	r27, r19
    34e0:	e4 0b       	sbc	r30, r20
    34e2:	f5 0b       	sbc	r31, r21

000034e4 <__udivmodsi4_ep>:
    34e4:	66 1f       	adc	r22, r22
    34e6:	77 1f       	adc	r23, r23
    34e8:	88 1f       	adc	r24, r24
    34ea:	99 1f       	adc	r25, r25
    34ec:	1a 94       	dec	r1
    34ee:	69 f7       	brne	.-38     	; 0x34ca <__udivmodsi4_loop>
    34f0:	60 95       	com	r22
    34f2:	70 95       	com	r23
    34f4:	80 95       	com	r24
    34f6:	90 95       	com	r25
    34f8:	9b 01       	movw	r18, r22
    34fa:	ac 01       	movw	r20, r24
    34fc:	bd 01       	movw	r22, r26
    34fe:	cf 01       	movw	r24, r30
    3500:	08 95       	ret

00003502 <__tablejump2__>:
    3502:	ee 0f       	add	r30, r30
    3504:	ff 1f       	adc	r31, r31

00003506 <__tablejump__>:
    3506:	05 90       	lpm	r0, Z+
    3508:	f4 91       	lpm	r31, Z+
    350a:	e0 2d       	mov	r30, r0
    350c:	09 94       	ijmp

0000350e <_exit>:
    350e:	f8 94       	cli

00003510 <__stop_program>:
    3510:	ff cf       	rjmp	.-2      	; 0x3510 <__stop_program>
