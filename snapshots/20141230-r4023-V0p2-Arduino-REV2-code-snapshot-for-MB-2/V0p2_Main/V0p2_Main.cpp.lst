
/var/folders/km/s_tzntf16nzg5bdh5n6g6lz40000gn/T/build1241980938643536440.tmp/V0p2_Main.cpp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000116  00800100  000078ca  0000795e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000078ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000262  00800216  00800216  00007a74  2**0
                  ALLOC
  3 .debug_aranges 000011b8  00000000  00000000  00007a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00002e2e  00000000  00000000  00008c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0001a866  00000000  00000000  0000ba5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000053a7  00000000  00000000  000262c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00012edc  00000000  00000000  0002b667  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001fd0  00000000  00000000  0003e544  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000074f8  00000000  00000000  00040514  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000acae  00000000  00000000  00047a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 000addc3  00000000  00000000  000526ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001500  00000000  00000000  0010047d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
    virtual bool isValid(const uint8_t value) const { return(value <= 100); }

    // Returns true if (re)calibrating/(re)initialising/(re)syncing.
    // The target valve position is not lost while this is true.
    // By default there is no recalibration step.
    virtual bool isRecalibrating() const { return(false); }
       0:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__ctors_end>
#endif


// True if FHT8V valve is believed to be open under instruction from this system; false if not in sync.
static bool FHT8V_isValveOpen;
bool getFHT8V_isValveOpen() { return(syncedWithFHT8V && FHT8V_isValveOpen); }
       4:	0c 94 9b 02 	jmp	0x536	; 0x536 <__bad_interrupt>
// Count of dropped inbound stats message due to insufficient queue space.
// Must only be accessed under a lock (ATOMIC_BLOCK).
static uint16_t inboundStatsQueueOverrun = 0;

// Get count of dropped inbound stats messages due to insufficient queue space.
uint16_t getInboundStatsQueueOverrun()
       8:	0c 94 9b 02 	jmp	0x536	; 0x536 <__bad_interrupt>
                         [not_bodse] "i" (~_BV(BODSE))); \
} while (0)
#endif

// Sleep with BOD disabled in power-save mode; will wake on any interrupt.
void sleepPwrSaveWithBODDisabled()
       c:	0c 94 9b 02 	jmp	0x536	; 0x536 <__bad_interrupt>

// Clears the RFM22 TX FIFO and queues up ready to send via the TXFIFO the 0xff-terminated bytes starting at bptr.
// This routine does not change the command area.
// This uses an efficient burst write.
// For DEBUG can abort after (over-)filling the 64-byte FIFO at no extra cost with a check before spinning waiting for SPI byte to be sent.
void RFM22QueueCmdToFF(uint8_t *bptr)
      10:	0c 94 9b 02 	jmp	0x536	; 0x536 <__bad_interrupt>
#endif

// Get local time minutes from RTC [0,59].
// Relatively slow.
// Thread-safe and ISR-safe.
uint_least8_t getMinutesLT() { return(getMinutesSinceMidnightLT() % 60); }
      14:	0c 94 d6 06 	jmp	0xdac	; 0xdac <__vector_5>
  }

// Clear a simple schedule.
// There will be neither on nor off events from the selected simple schedule once this is called.
//   * which  schedule number, counting from 0
void clearSimpleSchedule(const uint8_t which)
      18:	0c 94 9c 13 	jmp	0x2738	; 0x2738 <__vector_6>
  // Send the character.
  Serial.print(c);
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
  if(neededWaking) { powerDownSerial(); }
  }
      1c:	0c 94 9b 02 	jmp	0x536	; 0x536 <__bad_interrupt>
// Thread-safe.
void resetCLIActiveTimer() { CLITimeoutM = CLI_DEFAULT_TIMEOUT_M; }

// Returns true if the CLI is active, at least intermittently.
// Thread-safe.
bool isCLIActive() { return(0 != CLITimeoutM); }
      20:	0c 94 9b 02 	jmp	0x536	; 0x536 <__bad_interrupt>
  public:
    // Return last value fetched by read(); undefined before first read().
    // Usually fast.
    // Often likely to be thread-safe or usable within ISRs (Interrupt Service Routines),
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual uint8_t get() const { return(value); }
      24:	0c 94 6c 13 	jmp	0x26d8	; 0x26d8 <__vector_9>
  // set address of targeted slave
  txAddress = address;
  // reset tx buffer iterator vars
  txBufferIndex = 0;
  txBufferLength = 0;
}
      28:	0c 94 9b 02 	jmp	0x536	; 0x536 <__bad_interrupt>
 */
void twi_setAddress(uint8_t address)
{
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
}
      2c:	0c 94 9b 02 	jmp	0x536	; 0x536 <__bad_interrupt>

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
      30:	0c 94 9b 02 	jmp	0x536	; 0x536 <__bad_interrupt>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
      34:	0c 94 9b 02 	jmp	0x536	; 0x536 <__bad_interrupt>
  size_t n = print(ifsh);
  n += println();
  return n;
}

size_t Print::print(const Printable& x)
      38:	0c 94 9b 02 	jmp	0x536	; 0x536 <__bad_interrupt>
	timer0_millis = m;
	timer0_overflow_count++;
}

unsigned long millis()
{
      3c:	0c 94 9b 02 	jmp	0x536	; 0x536 <__bad_interrupt>
      40:	0c 94 42 3b 	jmp	0x7684	; 0x7684 <__vector_16>
      44:	0c 94 9b 02 	jmp	0x536	; 0x536 <__bad_interrupt>
      48:	0c 94 46 37 	jmp	0x6e8c	; 0x6e8c <__vector_18>
      4c:	0c 94 94 37 	jmp	0x6f28	; 0x6f28 <__vector_19>
      50:	0c 94 9b 02 	jmp	0x536	; 0x536 <__bad_interrupt>
      54:	0c 94 41 14 	jmp	0x2882	; 0x2882 <__vector_21>
      58:	0c 94 9b 02 	jmp	0x536	; 0x536 <__bad_interrupt>
      5c:	0c 94 9b 02 	jmp	0x536	; 0x536 <__bad_interrupt>
      60:	0c 94 03 35 	jmp	0x6a06	; 0x6a06 <__vector_24>
      64:	0c 94 9b 02 	jmp	0x536	; 0x536 <__bad_interrupt>

00000068 <FHT8V_RFM22_Reg_Values>:
      68:	06 00 08 00 30 00 33 06 34 08 35 10 36 aa 37 cc     ....0.3.4.5.6.7.
      78:	38 cc 39 cc 6d 0b 6e 28 6f f5 70 20 71 21 72 20     8.9.m.n(o.p q!r 
      88:	73 00 74 00 75 73 76 64 77 00 79 23 7a 01 1c c1     s.t.usvdw.y#z...
      98:	1d 40 1e 0a 1f 03 20 96 21 00 22 da 23 74 24 00     .@.... .!.".#t$.
      a8:	25 dc 2a 24 2c 28 2d fa 2e 29 69 60 ff ff           %.*$,(-..)i`..

000000b6 <FHT8VPollSyncAndTX_Next(bool)::__c>:
      b6:	46 48 54 38 56 20 54 58 00                          FHT8V TX.

000000bf <doSync(bool)::__c>:
      bf:	46 48 54 38 56 20 53 59 4e 43 20 46 49 4e 41 4c     FHT8V SYNC FINAL
	...

000000d0 <doSync(bool)::__c>:
      d0:	46 48 54 38 56 20 53 59 4e 43 2e 2e 2e 00           FHT8V SYNC....

000000de <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)::__c>:
      de:	22 2b 22 3a 00                                      "+":.

000000e3 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)::__c>:
      e3:	22 40 22 3a 22 00                                   "@":".

000000e9 <SimpleStatsRotationBase::put(char const*, int)::__c>:
      e9:	54 6f 6f 20 6d 61 6e 79 20 6b 65 79 73 3a 20 00     Too many keys: .

000000f9 <ensureIDCreated(bool)::__c>:
      f9:	20 2e 2e 2e 20 00                                    ... .

000000ff <ensureIDCreated(bool)::__c>:
      ff:	49 6e 76 61 6c 69 64 20 49 44 20 62 79 74 65 20     Invalid ID byte 
	...

00000110 <ensureIDCreated(bool)::__c>:
     110:	20 2e 2e 2e 20 00                                    ... .

00000116 <ensureIDCreated(bool)::__c>:
     116:	53 65 74 74 69 6e 67 20 49 44 20 62 79 74 65 20     Setting ID byte 
	...

00000127 <RFM22CheckConnected()::__c>:
     127:	52 46 4d 32 32 20 62 61 64 00                       RFM22 bad.

00000131 <loopUnitTest()::__c>:
     131:	25 25 25 20 41 6c 6c 20 74 65 73 74 73 20 63 6f     %%% All tests co
     141:	6d 70 6c 65 74 65 64 20 4f 4b 2c 20 72 6f 75 6e     mpleted OK, roun
     151:	64 20 00                                            d .

00000154 <loopUnitTest()::__c>:
     154:	54 65 73 74 73 20 73 74 61 72 74 69 6e 67 2e 2e     Tests starting..
     164:	2e 20 00                                            . .

00000167 <testComputeRequiredTRVPercentOpen()::__c>:
     167:	74 65 73 74 43 6f 6d 70 75 74 65 52 65 71 75 69     testComputeRequi
     177:	72 65 64 54 52 56 50 65 72 63 65 6e 74 4f 70 65     redTRVPercentOpe
     187:	6e 28 29 00                                         n().

0000018b <error(int, int)::__c>:
     18b:	20 61 74 20 6c 69 6e 65 20 00                        at line .

00000195 <error(int, int)::__c>:
     195:	20 3d 30 78 00                                       =0x.

0000019a <error(int, int)::__c>:
     19a:	2a 2a 2a 54 65 73 74 20 46 41 49 4c 45 44 2a 2a     ***Test FAILED**
     1aa:	2a 20 76 61 6c 3d 00                                * val=.

000001b1 <testTargetComputation()::__c>:
     1b1:	74 65 73 74 54 61 72 67 65 74 43 6f 6d 70 75 74     testTargetComput
     1c1:	61 74 69 6f 6e 00                                   ation.

000001c7 <testSensorMocking()::__c>:
     1c7:	74 65 73 74 53 65 6e 73 6f 72 4d 6f 63 6b 69 6e     testSensorMockin
     1d7:	67 00                                               g.

000001d9 <testModeControls()::__c>:
     1d9:	74 65 73 74 4d 6f 64 65 43 6f 6e 74 72 6f 6c 73     testModeControls
	...

000001ea <testJSONStats()::__c>:
     1ea:	7b 22 40 22 3a 22 31 32 33 34 22 2c 22 66 31 22     {"@":"1234","f1"
     1fa:	3a 2d 31 31 31 7d 00                                :-111}.

00000201 <testJSONStats()::__c>:
     201:	7b 22 40 22 3a 22 31 32 33 34 22 2c 22 2b 22 3a     {"@":"1234","+":
     211:	32 7d 00                                            2}.

00000214 <testJSONStats()::__c>:
     214:	7b 22 40 22 3a 22 31 32 33 34 22 7d 00              {"@":"1234"}.

00000221 <testJSONStats()::__c>:
     221:	74 65 73 74 4a 53 4f 4e 53 74 61 74 73 00           testJSONStats.

0000022f <testJSONForTX()::__c>:
     22f:	7b 22 40 22 3a 22 63 64 66 62 22 2c 22 54 7c 43     {"@":"cdfb","T|C
     23f:	31 36 22 3a 32 39 39 2c 22 48 7c 25 22 3a 38 33     16":299,"H|%":83
     24f:	2c 22 4c 22 3a 32 35 35 2c 22 42 7c 63 56 22 3a     ,"L":255,"B|cV":
     25f:	32 35 36 7d 00                                      256}.

00000264 <testJSONForTX()::__c>:
     264:	7b 20 20 7d 00                                      {  }.

00000269 <testJSONForTX()::__c>:
     269:	74 65 73 74 4a 53 4f 4e 46 6f 72 54 58 00           testJSONForTX.

00000277 <testFullStatsMessageCoreEncDec()::__c>:
     277:	74 65 73 74 46 75 6c 6c 53 74 61 74 73 4d 65 73     testFullStatsMes
     287:	73 61 67 65 43 6f 72 65 45 6e 63 44 65 63 00        sageCoreEncDec.

00000296 <testCRC()::__c>:
     296:	74 65 73 74 43 52 43 00                             testCRC.

0000029e <testTempCompand()::__c>:
     29e:	74 65 73 74 54 65 6d 70 43 6f 6d 70 61 6e 64 00     testTempCompand.

000002ae <testRNG8()::__c>:
     2ae:	74 65 73 74 52 4e 47 38 00                          testRNG8.

000002b7 <testRTCPersist()::__c>:
     2b7:	74 65 73 74 52 54 43 50 65 72 73 69 73 74 00        testRTCPersist.

000002c6 <testEEPROM()::__c>:
     2c6:	74 65 73 74 45 45 50 52 4f 4d 00                    testEEPROM.

000002d1 <testQuartiles()::__c>:
     2d1:	74 65 73 74 51 75 61 72 74 69 6c 65 73 00           testQuartiles.

000002df <testSmoothStatsValue()::__c>:
     2df:	74 65 73 74 53 6d 6f 6f 74 68 53 74 61 74 73 56     testSmoothStatsV
     2ef:	61 6c 75 65 00                                      alue.

000002f4 <testFHTEncoding()::__c>:
     2f4:	74 65 73 74 46 48 54 45 6e 63 6f 64 69 6e 67 00     testFHTEncoding.

00000304 <testFHTEncodingHeadAndTail()::__c>:
     304:	74 65 73 74 46 48 54 45 6e 63 6f 64 69 6e 67 48     testFHTEncodingH
     314:	65 61 64 41 6e 64 54 61 69 6c 00                    eadAndTail.

0000031f <testTempSensor()::__c>:
     31f:	74 65 73 74 54 65 6d 70 53 65 6e 73 6f 72 00        testTempSensor.

0000032e <testInternalTempSensor()::__c>:
     32e:	74 65 73 74 49 6e 74 65 72 6e 61 6c 54 65 6d 70     testInternalTemp
     33e:	53 65 6e 73 6f 72 00                                Sensor.

00000345 <testSupplyVoltageMonitor()::__c>:
     345:	74 65 73 74 53 75 70 70 6c 79 56 6f 6c 74 61 67     testSupplyVoltag
     355:	65 4d 6f 6e 69 74 6f 72 00                          eMonitor.

0000035e <testSleepUntilSubCycleTime()::__c>:
     35e:	74 65 73 74 53 6c 65 65 70 55 6e 74 69 6c 53 75     testSleepUntilSu
     36e:	62 43 79 63 6c 65 54 69 6d 65 00                    bCycleTime.

00000379 <testEntropyGathering()::__c>:
     379:	74 65 73 74 45 6e 74 72 6f 70 79 47 61 74 68 65     testEntropyGathe
     389:	72 69 6e 67 00                                      ring.

0000038e <setup::__c>:
     38e:	42 61 64 20 49 44 20 61 6e 64 20 63 61 6e 6e 6f     Bad ID and canno
     39e:	74 20 72 65 73 65 74 2e 00                          t reset..

000003a7 <setup::__c>:
     3a7:	55 4e 49 54 20 54 45 53 54 53 2e 2e 2e 00           UNIT TESTS....

000003b5 <setup::__c>:
     3b5:	46 72 65 65 20 52 41 4d 3a 20 00                    Free RAM: .

000003c0 <setup::__c>:
     3c0:	52 65 73 65 74 73 3a 20 00                          Resets: .

000003c9 <setup::__c>:
     3c9:	44 45 42 55 47 20 62 75 69 6c 64 00                 DEBUG build.

000003d5 <setup::__c>:
     3d5:	0d 0a 4f 70 65 6e 54 52 56 20 62 6f 6f 74 69 6e     ..OpenTRV bootin
     3e5:	67 3a 20 00                                         g: .

000003e9 <optionalPOST()::__c>:
     3e9:	52 61 64 69 6f 2c 20 78 74 61 6c 2c 20 62 75 74     Radio, xtal, but
     3f9:	74 6f 6e 73 20 4f 4b 00                             tons OK.

00000401 <optionalPOST()::__c>:
     401:	58 74 61 6c 20 64 65 61 64 00                       Xtal dead.

0000040b <optionalPOST()::__c>:
     40b:	62 75 74 74 6f 6e 20 73 74 75 63 6b 00              button stuck.

00000418 <posPOST(unsigned char, __FlashStringHelper const*)::__c>:
     418:	3a 20 00                                            : .

0000041b <posPOST(unsigned char, __FlashStringHelper const*)::__c>:
     41b:	70 6f 73 50 4f 53 54 3a 20 00                       posPOST: .

00000425 <serialPrintlnBuildVersion()::__c>:
     425:	20 30 30 3a 32 32 3a 32 30 00                        00:22:20.

0000042f <serialPrintlnBuildVersion()::__c>:
     42f:	3b 20 63 6f 64 65 20 24 49 64 3a 20 56 30 70 32     ; code $Id: V0p2
     43f:	5f 4d 61 69 6e 2e 69 6e 6f 20 33 38 36 34 20 32     _Main.ino 3864 2
     44f:	30 31 34 2d 31 32 2d 31 30 20 32 31 3a 30 31 3a     014-12-10 21:01:
     45f:	35 34 5a 20 64 61 6d 6f 6e 68 64 20 24 20 00        54Z damonhd $ .

0000046e <serialPrintlnBuildVersion()::__c>:
     46e:	62 6f 61 72 64 20 56 30 2e 32 20 52 45 56 00        board V0.2 REV.

0000047d <port_to_mode_PGM>:
     47d:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000487 <port_to_output_PGM>:
     487:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000491 <port_to_input_PGM>:
     491:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000049b <digital_pin_to_port_PGM>:
     49b:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     4ab:	03 03 03 03                                         ....

000004af <digital_pin_to_bit_mask_PGM>:
     4af:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     4bf:	04 08 10 20                                         ... 

000004c3 <digital_pin_to_timer_PGM>:
     4c3:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     4d3:	00 00 00 00 00                                      .....

000004d8 <__ctors_start>:
     4d8:	4e 06       	cpc	r4, r30
     4da:	5b 16       	cp	r5, r27
     4dc:	0b 18       	sub	r0, r11
     4de:	59 2f       	mov	r21, r25
     4e0:	21 31       	cpi	r18, 0x11	; 17
     4e2:	9f 33       	cpi	r25, 0x3F	; 63
     4e4:	5d 39       	cpi	r21, 0x9D	; 157

000004e6 <__ctors_end>:
     4e6:	11 24       	eor	r1, r1
     4e8:	1f be       	out	0x3f, r1	; 63
     4ea:	cf ef       	ldi	r28, 0xFF	; 255
     4ec:	d8 e0       	ldi	r29, 0x08	; 8
     4ee:	de bf       	out	0x3e, r29	; 62
     4f0:	cd bf       	out	0x3d, r28	; 61

000004f2 <__do_copy_data>:
     4f2:	12 e0       	ldi	r17, 0x02	; 2
     4f4:	a0 e0       	ldi	r26, 0x00	; 0
     4f6:	b1 e0       	ldi	r27, 0x01	; 1
     4f8:	ea ec       	ldi	r30, 0xCA	; 202
     4fa:	f8 e7       	ldi	r31, 0x78	; 120
     4fc:	02 c0       	rjmp	.+4      	; 0x502 <.do_copy_data_start>

000004fe <.do_copy_data_loop>:
     4fe:	05 90       	lpm	r0, Z+
     500:	0d 92       	st	X+, r0

00000502 <.do_copy_data_start>:
     502:	a6 31       	cpi	r26, 0x16	; 22
     504:	b1 07       	cpc	r27, r17
     506:	d9 f7       	brne	.-10     	; 0x4fe <.do_copy_data_loop>

00000508 <__do_clear_bss>:
     508:	14 e0       	ldi	r17, 0x04	; 4
     50a:	a6 e1       	ldi	r26, 0x16	; 22
     50c:	b2 e0       	ldi	r27, 0x02	; 2
     50e:	01 c0       	rjmp	.+2      	; 0x512 <.do_clear_bss_start>

00000510 <.do_clear_bss_loop>:
     510:	1d 92       	st	X+, r1

00000512 <.do_clear_bss_start>:
     512:	a8 37       	cpi	r26, 0x78	; 120
     514:	b1 07       	cpc	r27, r17
     516:	e1 f7       	brne	.-8      	; 0x510 <.do_clear_bss_loop>

00000518 <__do_global_ctors>:
     518:	14 e0       	ldi	r17, 0x04	; 4
     51a:	c6 ee       	ldi	r28, 0xE6	; 230
     51c:	d4 e0       	ldi	r29, 0x04	; 4
     51e:	04 c0       	rjmp	.+8      	; 0x528 <.do_global_ctors_start>

00000520 <.do_global_ctors_loop>:
     520:	22 97       	sbiw	r28, 0x02	; 2
     522:	fe 01       	movw	r30, r28
     524:	0e 94 5f 3c 	call	0x78be	; 0x78be <__tablejump__>

00000528 <.do_global_ctors_start>:
     528:	c8 3d       	cpi	r28, 0xD8	; 216
     52a:	d1 07       	cpc	r29, r17
     52c:	c9 f7       	brne	.-14     	; 0x520 <.do_global_ctors_loop>
     52e:	0e 94 b3 39 	call	0x7366	; 0x7366 <main>
     532:	0c 94 63 3c 	jmp	0x78c6	; 0x78c6 <_exit>

00000536 <__bad_interrupt>:
     536:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000053a <abort>:
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	f8 94       	cli
     540:	0c 94 63 3c 	jmp	0x78c6	; 0x78c6 <_exit>

00000544 <strcmp_P>:
     544:	fb 01       	movw	r30, r22
     546:	dc 01       	movw	r26, r24
     548:	8d 91       	ld	r24, X+
     54a:	05 90       	lpm	r0, Z+
     54c:	80 19       	sub	r24, r0
     54e:	01 10       	cpse	r0, r1
     550:	d9 f3       	breq	.-10     	; 0x548 <strcmp_P+0x4>
     552:	99 0b       	sbc	r25, r25
     554:	08 95       	ret

00000556 <strcpy_P>:
     556:	fb 01       	movw	r30, r22
     558:	dc 01       	movw	r26, r24
     55a:	05 90       	lpm	r0, Z+
     55c:	0d 92       	st	X+, r0
     55e:	00 20       	and	r0, r0
     560:	e1 f7       	brne	.-8      	; 0x55a <strcpy_P+0x4>
     562:	08 95       	ret

00000564 <memset>:
     564:	dc 01       	movw	r26, r24
     566:	01 c0       	rjmp	.+2      	; 0x56a <memset+0x6>
     568:	6d 93       	st	X+, r22
     56a:	41 50       	subi	r20, 0x01	; 1
     56c:	50 40       	sbci	r21, 0x00	; 0
     56e:	e0 f7       	brcc	.-8      	; 0x568 <memset+0x4>
     570:	08 95       	ret

00000572 <strcmp>:
     572:	fb 01       	movw	r30, r22
     574:	dc 01       	movw	r26, r24
     576:	8d 91       	ld	r24, X+
     578:	01 90       	ld	r0, Z+
     57a:	80 19       	sub	r24, r0
     57c:	01 10       	cpse	r0, r1
     57e:	d9 f3       	breq	.-10     	; 0x576 <strcmp+0x4>
     580:	99 0b       	sbc	r25, r25
     582:	08 95       	ret

00000584 <strncpy>:
     584:	fb 01       	movw	r30, r22
     586:	dc 01       	movw	r26, r24
     588:	41 50       	subi	r20, 0x01	; 1
     58a:	50 40       	sbci	r21, 0x00	; 0
     58c:	48 f0       	brcs	.+18     	; 0x5a0 <strncpy+0x1c>
     58e:	01 90       	ld	r0, Z+
     590:	0d 92       	st	X+, r0
     592:	00 20       	and	r0, r0
     594:	c9 f7       	brne	.-14     	; 0x588 <strncpy+0x4>
     596:	01 c0       	rjmp	.+2      	; 0x59a <strncpy+0x16>
     598:	1d 92       	st	X+, r1
     59a:	41 50       	subi	r20, 0x01	; 1
     59c:	50 40       	sbci	r21, 0x00	; 0
     59e:	e0 f7       	brcc	.-8      	; 0x598 <strncpy+0x14>
     5a0:	08 95       	ret

000005a2 <__eerd_word>:
     5a2:	df 92       	push	r13
     5a4:	ef 92       	push	r14
     5a6:	ff 92       	push	r15
     5a8:	0f 93       	push	r16
     5aa:	1f 93       	push	r17
     5ac:	7b 01       	movw	r14, r22
     5ae:	8c 01       	movw	r16, r24
     5b0:	fb 01       	movw	r30, r22
     5b2:	09 95       	icall
     5b4:	d8 2e       	mov	r13, r24
     5b6:	c8 01       	movw	r24, r16
     5b8:	01 96       	adiw	r24, 0x01	; 1
     5ba:	f7 01       	movw	r30, r14
     5bc:	09 95       	icall
     5be:	98 2f       	mov	r25, r24
     5c0:	8d 2d       	mov	r24, r13
     5c2:	1f 91       	pop	r17
     5c4:	0f 91       	pop	r16
     5c6:	ff 90       	pop	r15
     5c8:	ef 90       	pop	r14
     5ca:	df 90       	pop	r13
     5cc:	08 95       	ret

000005ce <__eewr_word>:
     5ce:	df 92       	push	r13
     5d0:	ef 92       	push	r14
     5d2:	ff 92       	push	r15
     5d4:	0f 93       	push	r16
     5d6:	1f 93       	push	r17
     5d8:	d7 2e       	mov	r13, r23
     5da:	7a 01       	movw	r14, r20
     5dc:	8c 01       	movw	r16, r24
     5de:	fa 01       	movw	r30, r20
     5e0:	09 95       	icall
     5e2:	c8 01       	movw	r24, r16
     5e4:	01 96       	adiw	r24, 0x01	; 1
     5e6:	6d 2d       	mov	r22, r13
     5e8:	f7 01       	movw	r30, r14
     5ea:	09 95       	icall
     5ec:	1f 91       	pop	r17
     5ee:	0f 91       	pop	r16
     5f0:	ff 90       	pop	r15
     5f2:	ef 90       	pop	r14
     5f4:	df 90       	pop	r13
     5f6:	08 95       	ret

000005f8 <SimpleTSUint8Sensor::get() const>:
     5f8:	fc 01       	movw	r30, r24
     5fa:	82 81       	ldd	r24, Z+2	; 0x02
     5fc:	08 95       	ret

000005fe <SimpleTSUint8Sensor::_TEST_set_(unsigned char)>:
#ifdef UNIT_TESTS
    // Set new value for unit test only.
    // May be just enough to allow get() to see the value for unit tests,
    // but will not deal with other aspects of sensor state.
    // Any call to read() or other mutators may overwrite/clear state that this sets.
    virtual void _TEST_set_(const uint8_t newValue)
     5fe:	fc 01       	movw	r30, r24
      { value = newValue; }
     600:	62 83       	std	Z+2, r22	; 0x02
     602:	08 95       	ret

00000604 <SimpleTSUint8Actuator::get() const>:
  public:
    // Return last value fetched by read(); undefined before first read().
    // Usually fast.
    // Often likely to be thread-safe or usable within ISRs (Interrupt Service Routines),
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual uint8_t get() const { return(value); }
     604:	fc 01       	movw	r30, r24
     606:	82 81       	ldd	r24, Z+2	; 0x02
     608:	08 95       	ret

0000060a <AbstractRadValve::isValid(unsigned char) const>:
// Implementations may require poll() called at a fixed rate.
class AbstractRadValve : public SimpleTSUint8Actuator
  {
  public:
    // Returns true if this sensor reading value passed is valid, eg in range [0,100].
    virtual bool isValid(const uint8_t value) const { return(value <= 100); }
     60a:	80 e0       	ldi	r24, 0x00	; 0
     60c:	65 36       	cpi	r22, 0x65	; 101
     60e:	08 f4       	brcc	.+2      	; 0x612 <AbstractRadValve::isValid(unsigned char) const+0x8>
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	08 95       	ret

00000614 <ModelledRadValve::preferredPollInterval_s() const>:
    // Potentially expensive/slow.
    virtual uint8_t read() { computeCallForHeat(); return(value); }

    // Returns preferred poll interval (in seconds); non-zero.
    // Must be polled at near constant rate, about once per minute.
    virtual uint8_t preferredPollInterval_s() const { return(60); }
     614:	8c e3       	ldi	r24, 0x3C	; 60
     616:	08 95       	ret

00000618 <ModelledRadValve::tag() const>:

    // Returns a suggested (JSON) tag/field/key name including units of get(); NULL means no recommended tag.
    // The lifetime of the pointed-to text must be at least that of the Sensor instance.
    virtual const char *tag() const { return("v|%"); }
     618:	80 e0       	ldi	r24, 0x00	; 0
     61a:	91 e0       	ldi	r25, 0x01	; 1
     61c:	08 95       	ret

0000061e <ModelledRadValve::getMinPercentOpen() const>:
// At the boiler hub this is also the threshold percentage-open on eavesdropped requests that will call for heat.
// If no override is set then DEFAULT_MIN_VALVE_PC_REALLY_OPEN is used.
// NOTE: raising this value temporarily (and shutting down the boiler immediately if possible) is one way to implement dynamic demand.
uint8_t ModelledRadValve::getMinValvePcReallyOpen()
  {
  if(0 != mVPRO_cache) { return(mVPRO_cache); } // Return cached value if possible.
     61e:	90 91 43 02 	lds	r25, 0x0243
     622:	99 23       	and	r25, r25
     624:	79 f4       	brne	.+30     	; 0x644 <ModelledRadValve::getMinPercentOpen() const+0x26>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     626:	f9 99       	sbic	0x1f, 1	; 31
     628:	fe cf       	rjmp	.-4      	; 0x626 <ModelledRadValve::getMinPercentOpen() const+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     62a:	83 e1       	ldi	r24, 0x13	; 19
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	92 bd       	out	0x22, r25	; 34
     630:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     632:	f8 9a       	sbi	0x1f, 0	; 31
     634:	90 b5       	in	r25, 0x20	; 32
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_MIN_VALVE_PC_REALLY_OPEN);
  const uint8_t result = ((stored > 0) && (stored <= 100)) ? stored : DEFAULT_MIN_VALVE_PC_REALLY_OPEN;
     636:	89 2f       	mov	r24, r25
     638:	81 50       	subi	r24, 0x01	; 1
     63a:	84 36       	cpi	r24, 0x64	; 100
     63c:	08 f0       	brcs	.+2      	; 0x640 <ModelledRadValve::getMinPercentOpen() const+0x22>
     63e:	9a e0       	ldi	r25, 0x0A	; 10
  mVPRO_cache = result; // Cache it.
     640:	90 93 43 02 	sts	0x0243, r25
    // then this should return true if any of the valves are (significantly) open.
    virtual bool isControlledValveReallyOpen() const;

    // Get estimated minimum percentage open for significant flow [1,99] for this device.
    // Return global node value.
    virtual uint8_t getMinPercentOpen() const { return(getMinValvePcReallyOpen()); }
     644:	89 2f       	mov	r24, r25
     646:	08 95       	ret

00000648 <OccupancyTracker::isValid(unsigned char) const>:
    // Poll at a fixed rate.
    virtual uint8_t read();

    // Returns true if this sensor reading value passed is potentially valid, eg in-range.
    // True if in range [0,100].
    virtual bool isValid(uint8_t value) const { return(value <= 100); }
     648:	80 e0       	ldi	r24, 0x00	; 0
     64a:	65 36       	cpi	r22, 0x65	; 101
     64c:	08 f4       	brcc	.+2      	; 0x650 <OccupancyTracker::isValid(unsigned char) const+0x8>
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	08 95       	ret

00000652 <OccupancyTracker::preferredPollInterval_s() const>:

    // This routine should be called once per minute.
    virtual uint8_t preferredPollInterval_s() const { return(60); }
     652:	8c e3       	ldi	r24, 0x3C	; 60
     654:	08 95       	ret

00000656 <OccupancyTracker::tag() const>:

    // Recommended JSON tag for full value; not NULL.
    virtual const char *tag() const { return("occ|%"); }
     656:	84 e0       	ldi	r24, 0x04	; 4
     658:	91 e0       	ldi	r25, 0x01	; 1
     65a:	08 95       	ret

0000065c <OccupancyTracker::_TEST_set_(bool)>:
    void setHolidayMode() { activityCountdownM = 0; value = 0; occupationCountdownM = 0; vacancyH = 255U; }

#ifdef UNIT_TESTS
    // If true then mark as occupied else mark as unoccupied.
    // Hides basic _TEST_set_() which would not behave as expected.
    virtual void _TEST_set_(const bool occupied)
     65c:	fc 01       	movw	r30, r24
      { if(occupied) { markAsOccupied(); } else { activityCountdownM = 0; value = 0; occupationCountdownM = 0; } }
     65e:	66 23       	and	r22, r22
     660:	39 f0       	breq	.+14     	; 0x670 <OccupancyTracker::_TEST_set_(bool)+0x14>
    // Do not call based on internal/synthetic events.
    // Such evidence may include operation of buttons (etc) on the unit or PIR.
    // Do not call from (for example) 'on' schedule change.
    // Makes occupation immediately visible.
    // Thread-safe and ISR-safe.
    void markAsOccupied() { value = 100; occupationCountdownM = OCCUPATION_TIMEOUT_M; activityCountdownM = 2; }
     662:	84 e6       	ldi	r24, 0x64	; 100
     664:	82 83       	std	Z+2, r24	; 0x02
     666:	82 e3       	ldi	r24, 0x32	; 50
     668:	83 83       	std	Z+3, r24	; 0x03
     66a:	82 e0       	ldi	r24, 0x02	; 2
     66c:	84 83       	std	Z+4, r24	; 0x04
     66e:	08 95       	ret

#ifdef UNIT_TESTS
    // If true then mark as occupied else mark as unoccupied.
    // Hides basic _TEST_set_() which would not behave as expected.
    virtual void _TEST_set_(const bool occupied)
      { if(occupied) { markAsOccupied(); } else { activityCountdownM = 0; value = 0; occupationCountdownM = 0; } }
     670:	14 82       	std	Z+4, r1	; 0x04
     672:	12 82       	std	Z+2, r1	; 0x02
     674:	13 82       	std	Z+3, r1	; 0x03
     676:	08 95       	ret

00000678 <inWarmMode()>:
// If true then is in WARM (or BAKE) mode; defaults to (starts as) false/FROST.
// Should be only be set when 'debounced'.
// Defaults to (starts as) false/FROST.
static bool isWarmMode;
// If true then the unit is in 'warm' (heating) mode, else 'frost' protection mode.
bool inWarmMode() { return(isWarmMode); }
     678:	80 91 4b 02 	lds	r24, 0x024B
     67c:	08 95       	ret

0000067e <setWarmModeDebounced(bool)>:
  DEBUG_SERIAL_PRINT_FLASHSTRING("Call to setWarmModeDebounced(");
  DEBUG_SERIAL_PRINT(warm);
  DEBUG_SERIAL_PRINT_FLASHSTRING(")");
  DEBUG_SERIAL_PRINTLN();
#endif
  isWarmMode = warm;
     67e:	80 93 4b 02 	sts	0x024B, r24
#ifdef SUPPORT_BAKE
  if(!warm) { cancelBakeDebounced(); }
     682:	88 23       	and	r24, r24
     684:	11 f4       	brne	.+4      	; 0x68a <setWarmModeDebounced(bool)+0xc>
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// Should be only be called once 'debounced' if coming from a button press for example.
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBakeDebounced() { bakeCountdownM = 0; }
     686:	10 92 46 02 	sts	0x0246, r1
     68a:	08 95       	ret

0000068c <inBakeMode()>:

#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
     68c:	80 91 4b 02 	lds	r24, 0x024B
     690:	88 23       	and	r24, r24
     692:	21 f0       	breq	.+8      	; 0x69c <inBakeMode()+0x10>
     694:	80 91 46 02 	lds	r24, 0x0246
     698:	81 11       	cpse	r24, r1
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	08 95       	ret

0000069e <cancelBakeDebounced()>:
// Should be only be called once 'debounced' if coming from a button press for example.
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBakeDebounced() { bakeCountdownM = 0; }
     69e:	10 92 46 02 	sts	0x0246, r1
     6a2:	08 95       	ret

000006a4 <startBakeDebounced()>:
// Start/restart 'BAKE' mode and timeout.
// Should be only be called once 'debounced' if coming from a button press for example.
void startBakeDebounced() { isWarmMode = true; bakeCountdownM = BAKE_MAX_M; }
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	80 93 4b 02 	sts	0x024B, r24
     6aa:	8e e1       	ldi	r24, 0x1E	; 30
     6ac:	80 93 46 02 	sts	0x0246, r24
     6b0:	08 95       	ret

000006b2 <_TEST_set_basetemp_override(_TEST_basetemp_override)>:
//  };
// Current override state; 0 (default) means no override.
static _TEST_basetemp_override _btoUT_override;
// Set the override value (or remove the override).
void _TEST_set_basetemp_override(const _TEST_basetemp_override override)
  { _btoUT_override = override; }
     6b2:	90 93 48 02 	sts	0x0248, r25
     6b6:	80 93 47 02 	sts	0x0247, r24
     6ba:	08 95       	ret

000006bc <getWARMTargetC()>:
// NOT safe in face of interrupts.
uint8_t getWARMTargetC()
  {
#if defined(UNIT_TESTS)
  // Special behaviour for unit tests.
  switch(_btoUT_override)
     6bc:	80 91 47 02 	lds	r24, 0x0247
     6c0:	90 91 48 02 	lds	r25, 0x0248
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	91 05       	cpc	r25, r1
     6c8:	31 f0       	breq	.+12     	; 0x6d6 <getWARMTargetC()+0x1a>
     6ca:	83 30       	cpi	r24, 0x03	; 3
     6cc:	91 05       	cpc	r25, r1
     6ce:	39 f0       	breq	.+14     	; 0x6de <getWARMTargetC()+0x22>
     6d0:	01 97       	sbiw	r24, 0x01	; 1
     6d2:	39 f4       	brne	.+14     	; 0x6e2 <getWARMTargetC()+0x26>
     6d4:	02 c0       	rjmp	.+4      	; 0x6da <getWARMTargetC()+0x1e>
     6d6:	83 e1       	ldi	r24, 0x13	; 19
     6d8:	08 95       	ret
     6da:	80 e1       	ldi	r24, 0x10	; 16
     6dc:	08 95       	ret
     6de:	86 e1       	ldi	r24, 0x16	; 22
     6e0:	08 95       	ret
  public:
    // Return last value fetched by read(); undefined before first read().
    // Usually fast.
    // Often likely to be thread-safe or usable within ISRs (Interrupt Service Routines),
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual uint8_t get() const { return(value); }
     6e2:	20 91 fb 02 	lds	r18, 0x02FB
  // Cached input and result values; initially zero.
  static uint8_t potLast;
  static uint8_t resultLast;
  // Force recomputation if pot value changed
  // or apparently no calc done yet (unlikely/impossible zero cached result).
  if((potLast != pot) || (0 == resultLast))
     6e6:	80 91 4a 02 	lds	r24, 0x024A
     6ea:	82 17       	cp	r24, r18
     6ec:	21 f4       	brne	.+8      	; 0x6f6 <getWARMTargetC()+0x3a>
     6ee:	80 91 49 02 	lds	r24, 0x0249
     6f2:	88 23       	and	r24, r24
     6f4:	99 f4       	brne	.+38     	; 0x71c <getWARMTargetC()+0x60>
  const uint8_t range = TEMP_SCALE_MAX - TEMP_SCALE_MIN + 1;
  const uint8_t band = 256 / range; // Width of band for each degree C...

  // If there are is relatively small number of distinct temperature values
  // then compute result iteratively...
  if(pot >= 256 - band) { return(TEMP_SCALE_MAX); } // At top... (optimisation / robustness)
     6f6:	2c 3d       	cpi	r18, 0xDC	; 220
     6f8:	10 f0       	brcs	.+4      	; 0x6fe <getWARMTargetC()+0x42>
     6fa:	86 e1       	ldi	r24, 0x16	; 22
     6fc:	0b c0       	rjmp	.+22     	; 0x714 <getWARMTargetC()+0x58>
  if(pot < band) { return(TEMP_SCALE_MIN); } // At bottom... (optimisation / robustness)
     6fe:	24 32       	cpi	r18, 0x24	; 36
     700:	10 f4       	brcc	.+4      	; 0x706 <getWARMTargetC()+0x4a>
     702:	80 e1       	ldi	r24, 0x10	; 16
     704:	07 c0       	rjmp	.+14     	; 0x714 <getWARMTargetC()+0x58>
     706:	98 e4       	ldi	r25, 0x48	; 72
     708:	81 e1       	ldi	r24, 0x11	; 17
     70a:	02 c0       	rjmp	.+4      	; 0x710 <getWARMTargetC()+0x54>
  if(range < 10)
    {
    uint8_t result = TEMP_SCALE_MIN+1;
    for(uint8_t ppot = band<<1; ppot < pot; ++result) { ppot += band; }
     70c:	9c 5d       	subi	r25, 0xDC	; 220
     70e:	8f 5f       	subi	r24, 0xFF	; 255
     710:	92 17       	cp	r25, r18
     712:	e0 f3       	brcs	.-8      	; 0x70c <getWARMTargetC()+0x50>
  // or apparently no calc done yet (unlikely/impossible zero cached result).
  if((potLast != pot) || (0 == resultLast))
    {
    const uint8_t result = computeWARMTargetC(pot);
    // Cache input/result.
    resultLast = result;
     714:	80 93 49 02 	sts	0x0249, r24
    potLast = pot;
     718:	20 93 4a 02 	sts	0x024A, r18
    return(result);
    }

  // Return cached result.
  return(resultLast);
  }
     71c:	08 95       	ret

0000071e <hasEcoBias()>:
//// Optimisiation/simplication: true if temp pot less than about half way.
//bool hasEcoBias() { return(TempPot.get() <= 128); }
//#else
// True if WARM temperature at/below halfway mark between eco and comfort levels.
// Midpoint should be just eco to provide a system bias toward eco.
bool hasEcoBias() { return(getWARMTargetC() <= TEMP_SCALE_MID); }
     71e:	0e 94 5e 03 	call	0x6bc	; 0x6bc <getWARMTargetC()>
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	84 31       	cpi	r24, 0x14	; 20
     726:	08 f4       	brcc	.+2      	; 0x72a <hasEcoBias()+0xc>
     728:	91 e0       	ldi	r25, 0x01	; 1
     72a:	89 2f       	mov	r24, r25
     72c:	08 95       	ret

0000072e <getFROSTTargetC()>:
#if defined(TEMP_POT_AVAILABLE)
// Derived from temperature pot position.
uint8_t getFROSTTargetC()
  {
  // Prevent falling to lowest frost temperature if relative humidity is high (eg to avoid mould).
  const uint8_t result = (!hasEcoBias() || (RelHumidity.isAvailable() && RelHumidity.isRHHighWithHyst())) ? BIASCOM_FROST : BIASECO_FROST;
     72e:	0e 94 8f 03 	call	0x71e	; 0x71e <hasEcoBias()>
     732:	88 23       	and	r24, r24
     734:	31 f0       	breq	.+12     	; 0x742 <getFROSTTargetC()+0x14>
    // Thread-safe and usable within ISRs (Interrupt Service Routines).
    bool isRHHigh() { return(get() > (HUMIDTY_HIGH_RHPC+HUMIDITY_EPSILON_RHPC)); }

    // True if RH% high with a hysteresis band of 2 * HUMIDITY_EPSILON_RHPC.
    // Thread-safe and usable within ISRs (Interrupt Service Routines).
    bool isRHHighWithHyst() { return(highWithHyst); }
     736:	80 91 f4 02 	lds	r24, 0x02F4
     73a:	88 23       	and	r24, r24
     73c:	11 f4       	brne	.+4      	; 0x742 <getFROSTTargetC()+0x14>
     73e:	27 e0       	ldi	r18, 0x07	; 7
     740:	01 c0       	rjmp	.+2      	; 0x744 <getFROSTTargetC()+0x16>
     742:	2c e0       	ldi	r18, 0x0C	; 12
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     744:	f9 99       	sbic	0x1f, 1	; 31
     746:	fe cf       	rjmp	.-4      	; 0x744 <getFROSTTargetC()+0x16>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     748:	8e e0       	ldi	r24, 0x0E	; 14
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	92 bd       	out	0x22, r25	; 34
     74e:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     750:	f8 9a       	sbi	0x1f, 0	; 31
     752:	90 b5       	in	r25, 0x20	; 32
#if defined(SETTABLE_TARGET_TEMPERATURES)
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_FROST_C);
  // If stored value is set and in bounds and higher than computed value then use stored value instead.
  if((stored >= MIN_TARGET_C) && (stored <= MAX_TARGET_C) && (stored > result)) { return(stored); }
     754:	89 2f       	mov	r24, r25
     756:	85 50       	subi	r24, 0x05	; 5
     758:	8b 35       	cpi	r24, 0x5B	; 91
     75a:	10 f0       	brcs	.+4      	; 0x760 <getFROSTTargetC()+0x32>
     75c:	82 2f       	mov	r24, r18
     75e:	08 95       	ret
     760:	89 2f       	mov	r24, r25
     762:	92 17       	cp	r25, r18
     764:	08 f4       	brcc	.+2      	; 0x768 <getFROSTTargetC()+0x3a>
     766:	82 2f       	mov	r24, r18
#endif
  return(result);
  }
     768:	08 95       	ret

0000076a <OccupancyTracker::read()>:
#elif OCCUPATION_TIMEOUT_M <= 100
#define OCCCP_SHIFT 0
#endif

// Update notion of occupancy confidence.
uint8_t OccupancyTracker::read()
     76a:	df 93       	push	r29
     76c:	cf 93       	push	r28
     76e:	00 d0       	rcall	.+0      	; 0x770 <OccupancyTracker::read()+0x6>
     770:	cd b7       	in	r28, 0x3d	; 61
     772:	de b7       	in	r29, 0x3e	; 62
     774:	fc 01       	movw	r30, r24
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
     776:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     778:	f8 94       	cli
    {
    // Compute as percentage.
    const uint8_t newValue = (0 == occupationCountdownM) ? 0 :
        fnmin((uint8_t)((uint8_t)100 - (uint8_t)((((uint8_t)OCCUPATION_TIMEOUT_M) - occupationCountdownM) << OCCCP_SHIFT)), (uint8_t)100);
     77a:	83 81       	ldd	r24, Z+3	; 0x03
     77c:	88 23       	and	r24, r24
     77e:	11 f4       	brne	.+4      	; 0x784 <OccupancyTracker::read()+0x1a>
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	0d c0       	rjmp	.+26     	; 0x79e <OccupancyTracker::read()+0x34>
     784:	83 81       	ldd	r24, Z+3	; 0x03
     786:	92 e3       	ldi	r25, 0x32	; 50
     788:	98 1b       	sub	r25, r24
     78a:	99 0f       	add	r25, r25
     78c:	84 e6       	ldi	r24, 0x64	; 100
     78e:	38 2f       	mov	r19, r24
     790:	39 1b       	sub	r19, r25
     792:	93 2f       	mov	r25, r19
     794:	39 83       	std	Y+1, r19	; 0x01
     796:	8a 83       	std	Y+2, r24	; 0x02




// Templated function versions of min/max that do not evaluate the arguments twice.
template <class T> const T& fnmin(const T& a, const T& b) { return((a>b)?b:a); }
     798:	35 36       	cpi	r19, 0x65	; 101
     79a:	08 f0       	brcs	.+2      	; 0x79e <OccupancyTracker::read()+0x34>
     79c:	94 e6       	ldi	r25, 0x64	; 100
    value = newValue;
     79e:	92 83       	std	Z+2, r25	; 0x02
    // Run down occupation timer (or run up vacancy time) if need be.
    if(occupationCountdownM > 0) { --occupationCountdownM; vacancyM = 0; vacancyH = 0; }
     7a0:	83 81       	ldd	r24, Z+3	; 0x03
     7a2:	88 23       	and	r24, r24
     7a4:	31 f0       	breq	.+12     	; 0x7b2 <OccupancyTracker::read()+0x48>
     7a6:	83 81       	ldd	r24, Z+3	; 0x03
     7a8:	81 50       	subi	r24, 0x01	; 1
     7aa:	83 83       	std	Z+3, r24	; 0x03
     7ac:	16 82       	std	Z+6, r1	; 0x06
     7ae:	15 82       	std	Z+5, r1	; 0x05
     7b0:	0b c0       	rjmp	.+22     	; 0x7c8 <OccupancyTracker::read()+0x5e>
    else if(vacancyH < 0xffU) { if(++vacancyM >= 60) { vacancyM = 0; ++vacancyH; } }
     7b2:	95 81       	ldd	r25, Z+5	; 0x05
     7b4:	9f 3f       	cpi	r25, 0xFF	; 255
     7b6:	41 f0       	breq	.+16     	; 0x7c8 <OccupancyTracker::read()+0x5e>
     7b8:	86 81       	ldd	r24, Z+6	; 0x06
     7ba:	8f 5f       	subi	r24, 0xFF	; 255
     7bc:	86 83       	std	Z+6, r24	; 0x06
     7be:	8c 33       	cpi	r24, 0x3C	; 60
     7c0:	18 f0       	brcs	.+6      	; 0x7c8 <OccupancyTracker::read()+0x5e>
     7c2:	16 82       	std	Z+6, r1	; 0x06
     7c4:	9f 5f       	subi	r25, 0xFF	; 255
     7c6:	95 83       	std	Z+5, r25	; 0x05
    // Run down 'recent activity' timer.
    if(activityCountdownM > 0) { --activityCountdownM; }
     7c8:	84 81       	ldd	r24, Z+4	; 0x04
     7ca:	88 23       	and	r24, r24
     7cc:	19 f0       	breq	.+6      	; 0x7d4 <OccupancyTracker::read()+0x6a>
     7ce:	84 81       	ldd	r24, Z+4	; 0x04
     7d0:	81 50       	subi	r24, 0x01	; 1
     7d2:	84 83       	std	Z+4, r24	; 0x04
    return(value);
     7d4:	82 81       	ldd	r24, Z+2	; 0x02
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     7d6:	2f bf       	out	0x3f, r18	; 63
    }
  }
     7d8:	0f 90       	pop	r0
     7da:	0f 90       	pop	r0
     7dc:	cf 91       	pop	r28
     7de:	df 91       	pop	r29
     7e0:	08 95       	ret

000007e2 <OccupancyTracker::markAsPossiblyOccupied()>:

// Call when some/weak evidence of room occupation, such as a light being turned on.
// Do not call based on internal/synthetic events.
// Doesn't force the room to appear recently occupied.
// Thread-safe.
void OccupancyTracker::markAsPossiblyOccupied()
     7e2:	df 93       	push	r29
     7e4:	cf 93       	push	r28
     7e6:	00 d0       	rcall	.+0      	; 0x7e8 <OccupancyTracker::markAsPossiblyOccupied()+0x6>
     7e8:	cd b7       	in	r28, 0x3d	; 61
     7ea:	de b7       	in	r29, 0x3e	; 62
     7ec:	fc 01       	movw	r30, r24
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
     7ee:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     7f0:	f8 94       	cli
    {
    occupationCountdownM = fnmax((uint8_t)occupationCountdownM, (uint8_t)(OCCUPATION_TIMEOUT_1_M));
     7f2:	93 81       	ldd	r25, Z+3	; 0x03
template <class T> const T& fnmax(const T& a, const T& b) { return((a<b)?b:a); }
     7f4:	91 32       	cpi	r25, 0x21	; 33
     7f6:	10 f4       	brcc	.+4      	; 0x7fc <OccupancyTracker::markAsPossiblyOccupied()+0x1a>
     7f8:	81 e2       	ldi	r24, 0x21	; 33
     7fa:	01 c0       	rjmp	.+2      	; 0x7fe <OccupancyTracker::markAsPossiblyOccupied()+0x1c>
     7fc:	89 2f       	mov	r24, r25
     7fe:	83 83       	std	Z+3, r24	; 0x03
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     800:	2f bf       	out	0x3f, r18	; 63
     802:	81 e2       	ldi	r24, 0x21	; 33
     804:	8a 83       	std	Y+2, r24	; 0x02
     806:	99 83       	std	Y+1, r25	; 0x01
    }
  activityCountdownM = 2;
     808:	82 e0       	ldi	r24, 0x02	; 2
     80a:	84 83       	std	Z+4, r24	; 0x04
  }
     80c:	0f 90       	pop	r0
     80e:	0f 90       	pop	r0
     810:	cf 91       	pop	r28
     812:	df 91       	pop	r29
     814:	08 95       	ret

00000816 <ModelledRadValve::getMinValvePcReallyOpen()>:
// At the boiler hub this is also the threshold percentage-open on eavesdropped requests that will call for heat.
// If no override is set then DEFAULT_MIN_VALVE_PC_REALLY_OPEN is used.
// NOTE: raising this value temporarily (and shutting down the boiler immediately if possible) is one way to implement dynamic demand.
uint8_t ModelledRadValve::getMinValvePcReallyOpen()
  {
  if(0 != mVPRO_cache) { return(mVPRO_cache); } // Return cached value if possible.
     816:	80 91 43 02 	lds	r24, 0x0243
     81a:	88 23       	and	r24, r24
     81c:	89 f4       	brne	.+34     	; 0x840 <ModelledRadValve::getMinValvePcReallyOpen()+0x2a>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     81e:	f9 99       	sbic	0x1f, 1	; 31
     820:	fe cf       	rjmp	.-4      	; 0x81e <ModelledRadValve::getMinValvePcReallyOpen()+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     822:	83 e1       	ldi	r24, 0x13	; 19
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	92 bd       	out	0x22, r25	; 34
     828:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     82a:	f8 9a       	sbi	0x1f, 0	; 31
     82c:	90 b5       	in	r25, 0x20	; 32
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_MIN_VALVE_PC_REALLY_OPEN);
  const uint8_t result = ((stored > 0) && (stored <= 100)) ? stored : DEFAULT_MIN_VALVE_PC_REALLY_OPEN;
     82e:	89 2f       	mov	r24, r25
     830:	81 50       	subi	r24, 0x01	; 1
     832:	84 36       	cpi	r24, 0x64	; 100
     834:	10 f0       	brcs	.+4      	; 0x83a <ModelledRadValve::getMinValvePcReallyOpen()+0x24>
     836:	8a e0       	ldi	r24, 0x0A	; 10
     838:	01 c0       	rjmp	.+2      	; 0x83c <ModelledRadValve::getMinValvePcReallyOpen()+0x26>
     83a:	89 2f       	mov	r24, r25
  mVPRO_cache = result; // Cache it.
     83c:	80 93 43 02 	sts	0x0243, r24
  return(result);
  }
     840:	08 95       	ret

00000842 <ModelledRadValveInputState::setReferenceTemperatures(int)>:
// By default, for a given target XC the rad is off at (X+1)C so temperature oscillates around that point.
// This routine shifts the reference point at which the rad is off to (X+0.5C)
// ie to the middle of the specified degree, which is more intuitive,
// and which may save a little energy if users target the specified temperatures.
// Suggestion c/o GG ~2014/10 code, and generally less misleading anyway!
void ModelledRadValveInputState::setReferenceTemperatures(const int currentTempC16)
     842:	fc 01       	movw	r30, r24
  {
  const int referenceTempC16 = currentTempC16 + refTempOffsetC16; // TODO-386: push targeted temperature down by 0.5C to middle of degree.
     844:	68 5f       	subi	r22, 0xF8	; 248
     846:	7f 4f       	sbci	r23, 0xFF	; 255
  refTempC16 = referenceTempC16;
     848:	71 87       	std	Z+9, r23	; 0x09
     84a:	60 87       	std	Z+8, r22	; 0x08
  refTempC = referenceTempC16 >> 4;
     84c:	84 e0       	ldi	r24, 0x04	; 4
     84e:	75 95       	asr	r23
     850:	67 95       	ror	r22
     852:	8a 95       	dec	r24
     854:	e1 f7       	brne	.-8      	; 0x84e <ModelledRadValveInputState::setReferenceTemperatures(int)+0xc>
     856:	67 83       	std	Z+7, r22	; 0x07
  }
     858:	08 95       	ret

0000085a <ModelledRadValveState::getSmoothedRecent()>:
  inputState.setReferenceTemperatures(TemperatureC16.get());
  callingForHeat = (newTarget >= inputState.refTempC);
  }

// Get smoothed raw/unadjusted temperature from the most recent samples.
int ModelledRadValveState::getSmoothedRecent()
     85a:	fc 01       	movw	r30, r24
template<size_t N> int smallIntMean(const int data[N])
  {
  // Extract mean.
  // Assume values and sum will be nowhere near the limits.
  int sum = 0;
  for(int8_t i = N; --i >= 0; ) { sum += data[i]; }
     85c:	81 85       	ldd	r24, Z+9	; 0x09
     85e:	92 85       	ldd	r25, Z+10	; 0x0a
     860:	23 85       	ldd	r18, Z+11	; 0x0b
     862:	34 85       	ldd	r19, Z+12	; 0x0c
     864:	82 0f       	add	r24, r18
     866:	93 1f       	adc	r25, r19
     868:	27 81       	ldd	r18, Z+7	; 0x07
     86a:	30 85       	ldd	r19, Z+8	; 0x08
     86c:	82 0f       	add	r24, r18
     86e:	93 1f       	adc	r25, r19
     870:	25 81       	ldd	r18, Z+5	; 0x05
     872:	36 81       	ldd	r19, Z+6	; 0x06
     874:	82 0f       	add	r24, r18
     876:	93 1f       	adc	r25, r19
     878:	02 96       	adiw	r24, 0x02	; 2
     87a:	64 e0       	ldi	r22, 0x04	; 4
     87c:	70 e0       	ldi	r23, 0x00	; 0
     87e:	0e 94 0d 3c 	call	0x781a	; 0x781a <__divmodhi4>
     882:	cb 01       	movw	r24, r22
  { return(smallIntMean<filterLength/2>(prevRawTempC16)); }
     884:	08 95       	ret

00000886 <ModelledRadValveState::getVelocityC16PerTick()>:

// Compute an estimate of rate/velocity of temperature change in C/16 per minute/tick.
// A positive value indicates that temperature is rising.
// Based on comparing the most recent smoothed value with an older smoothed value.
int ModelledRadValveState::getVelocityC16PerTick()
     886:	cf 93       	push	r28
     888:	df 93       	push	r29
     88a:	ac 01       	movw	r20, r24
     88c:	fc 01       	movw	r30, r24
     88e:	3d 96       	adiw	r30, 0x0d	; 13
     890:	24 e0       	ldi	r18, 0x04	; 4
     892:	c0 e0       	ldi	r28, 0x00	; 0
     894:	d0 e0       	ldi	r29, 0x00	; 0
     896:	04 c0       	rjmp	.+8      	; 0x8a0 <ModelledRadValveState::getVelocityC16PerTick()+0x1a>
     898:	80 85       	ldd	r24, Z+8	; 0x08
     89a:	91 85       	ldd	r25, Z+9	; 0x09
     89c:	c8 0f       	add	r28, r24
     89e:	d9 1f       	adc	r29, r25
     8a0:	21 50       	subi	r18, 0x01	; 1
     8a2:	32 97       	sbiw	r30, 0x02	; 2
     8a4:	2f 3f       	cpi	r18, 0xFF	; 255
     8a6:	c1 f7       	brne	.-16     	; 0x898 <ModelledRadValveState::getVelocityC16PerTick()+0x12>
  {
  const int oldSmoothed = smallIntMean<filterLength/2>(prevRawTempC16 + (filterLength/2));
  const int newSmoothed = getSmoothedRecent();
     8a8:	ca 01       	movw	r24, r20
     8aa:	0e 94 2d 04 	call	0x85a	; 0x85a <ModelledRadValveState::getSmoothedRecent()>
     8ae:	9c 01       	movw	r18, r24
     8b0:	2e 5f       	subi	r18, 0xFE	; 254
     8b2:	3f 4f       	sbci	r19, 0xFF	; 255
     8b4:	ce 01       	movw	r24, r28
     8b6:	02 96       	adiw	r24, 0x02	; 2
     8b8:	64 e0       	ldi	r22, 0x04	; 4
     8ba:	70 e0       	ldi	r23, 0x00	; 0
     8bc:	0e 94 0d 3c 	call	0x781a	; 0x781a <__divmodhi4>
     8c0:	c9 01       	movw	r24, r18
     8c2:	86 1b       	sub	r24, r22
     8c4:	97 0b       	sbc	r25, r23
     8c6:	64 e0       	ldi	r22, 0x04	; 4
     8c8:	70 e0       	ldi	r23, 0x00	; 0
     8ca:	0e 94 0d 3c 	call	0x781a	; 0x781a <__divmodhi4>
     8ce:	cb 01       	movw	r24, r22
//DEBUG_SERIAL_PRINT(newSmoothed);
//DEBUG_SERIAL_PRINT(',');
//DEBUG_SERIAL_PRINT(velocity);
//DEBUG_SERIAL_PRINTLN();
  return(velocity);
  }
     8d0:	df 91       	pop	r29
     8d2:	cf 91       	pop	r28
     8d4:	08 95       	ret

000008d6 <ModelledRadValveState::tick(ModelledRadValveInputState const&)>:

// Perform per-minute tasks such as counter and filter updates.
// Run *before* bulk calculations.
// The input state must be complete including target and reference temperatures
// before calling this the first time whereupon some further lazy initialisation is done.
void ModelledRadValveState::tick(const ModelledRadValveInputState &inputState)
     8d6:	ef 92       	push	r14
     8d8:	ff 92       	push	r15
     8da:	0f 93       	push	r16
     8dc:	1f 93       	push	r17
     8de:	cf 93       	push	r28
     8e0:	df 93       	push	r29
     8e2:	ec 01       	movw	r28, r24
     8e4:	fb 01       	movw	r30, r22
  {
  const int rawTempC16 = inputState.refTempC16 - refTempOffsetC16; // Remove adjustment for target centre.
     8e6:	00 85       	ldd	r16, Z+8	; 0x08
     8e8:	11 85       	ldd	r17, Z+9	; 0x09
     8ea:	08 50       	subi	r16, 0x08	; 8
     8ec:	10 40       	sbci	r17, 0x00	; 0
  if(!initialised)
     8ee:	88 81       	ld	r24, Y
     8f0:	88 23       	and	r24, r24
     8f2:	71 f4       	brne	.+28     	; 0x910 <__stack+0x11>
     8f4:	fe 01       	movw	r30, r28
     8f6:	88 e0       	ldi	r24, 0x08	; 8
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	02 c0       	rjmp	.+4      	; 0x900 <__stack+0x1>
    {
    // Fill the filter memory with the current room temperature.
    for(int i = filterLength; --i >= 0; ) { prevRawTempC16[i] = rawTempC16; }
     8fc:	16 8b       	std	Z+22, r17	; 0x16
     8fe:	05 8b       	std	Z+21, r16	; 0x15
     900:	01 97       	sbiw	r24, 0x01	; 1
     902:	32 97       	sbiw	r30, 0x02	; 2
     904:	2f ef       	ldi	r18, 0xFF	; 255
     906:	8f 3f       	cpi	r24, 0xFF	; 255
     908:	92 07       	cpc	r25, r18
     90a:	c1 f7       	brne	.-16     	; 0x8fc <ModelledRadValveState::tick(ModelledRadValveInputState const&)+0x26>
    // TODO
    initialised = true;
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	88 83       	st	Y, r24
     910:	7e 01       	movw	r14, r28
     912:	fe 01       	movw	r30, r28
     914:	28 e0       	ldi	r18, 0x08	; 8
     916:	30 e0       	ldi	r19, 0x00	; 0
     918:	04 c0       	rjmp	.+8      	; 0x922 <__stack+0x23>
    }

  // Shift in the latest (raw) temperature.
  for(int i = filterLength; --i > 0; ) { prevRawTempC16[i] = prevRawTempC16[i-1]; }
     91a:	83 89       	ldd	r24, Z+19	; 0x13
     91c:	94 89       	ldd	r25, Z+20	; 0x14
     91e:	96 8b       	std	Z+22, r25	; 0x16
     920:	85 8b       	std	Z+21, r24	; 0x15
     922:	21 50       	subi	r18, 0x01	; 1
     924:	30 40       	sbci	r19, 0x00	; 0
     926:	32 97       	sbiw	r30, 0x02	; 2
     928:	21 15       	cp	r18, r1
     92a:	31 05       	cpc	r19, r1
     92c:	b1 f7       	brne	.-20     	; 0x91a <__stack+0x1b>
  prevRawTempC16[0] = rawTempC16;
     92e:	1e 83       	std	Y+6, r17	; 0x06
     930:	0d 83       	std	Y+5, r16	; 0x05

  // Disable/enable filtering.
  // Allow possible exit from filtering for next time
  // if the raw value is close enough to the current filtered value
  // so that reverting to unfiltered will not of itself cause a big jump.
  if(isFiltering)
     932:	89 81       	ldd	r24, Y+1	; 0x01
     934:	88 23       	and	r24, r24
     936:	c9 f0       	breq	.+50     	; 0x96a <__stack+0x6b>
    {
    if(abs(getSmoothedRecent() - rawTempC16) <= MAX_TEMP_JUMP_C16) { isFiltering = false; }  
     938:	ce 01       	movw	r24, r28
     93a:	0e 94 2d 04 	call	0x85a	; 0x85a <ModelledRadValveState::getSmoothedRecent()>
     93e:	80 1b       	sub	r24, r16
     940:	91 0b       	sbc	r25, r17
     942:	18 16       	cp	r1, r24
     944:	19 06       	cpc	r1, r25
     946:	44 f4       	brge	.+16     	; 0x958 <__stack+0x59>
     948:	ce 01       	movw	r24, r28
     94a:	0e 94 2d 04 	call	0x85a	; 0x85a <ModelledRadValveState::getSmoothedRecent()>
     94e:	80 1b       	sub	r24, r16
     950:	91 0b       	sbc	r25, r17
     952:	05 97       	sbiw	r24, 0x05	; 5
     954:	54 f4       	brge	.+20     	; 0x96a <__stack+0x6b>
     956:	08 c0       	rjmp	.+16     	; 0x968 <__stack+0x69>
     958:	ce 01       	movw	r24, r28
     95a:	0e 94 2d 04 	call	0x85a	; 0x85a <ModelledRadValveState::getSmoothedRecent()>
     95e:	08 1b       	sub	r16, r24
     960:	19 0b       	sbc	r17, r25
     962:	05 30       	cpi	r16, 0x05	; 5
     964:	11 05       	cpc	r17, r1
     966:	0c f4       	brge	.+2      	; 0x96a <__stack+0x6b>
     968:	19 82       	std	Y+1, r1	; 0x01
    }
  // Force filtering (back) on if any adjacent past readings are wildly different.
  if(!isFiltering)
     96a:	89 81       	ldd	r24, Y+1	; 0x01
     96c:	88 23       	and	r24, r24
     96e:	e9 f4       	brne	.+58     	; 0x9aa <__stack+0xab>
     970:	41 e0       	ldi	r20, 0x01	; 1
     972:	50 e0       	ldi	r21, 0x00	; 0
    {
    for(int i = 1; i < filterLength; ++i) { if(abs(prevRawTempC16[i] - prevRawTempC16[i-1]) > MAX_TEMP_JUMP_C16) { isFiltering = true; break; } }
     974:	f7 01       	movw	r30, r14
     976:	27 81       	ldd	r18, Z+7	; 0x07
     978:	30 85       	ldd	r19, Z+8	; 0x08
     97a:	85 81       	ldd	r24, Z+5	; 0x05
     97c:	96 81       	ldd	r25, Z+6	; 0x06
     97e:	28 1b       	sub	r18, r24
     980:	39 0b       	sbc	r19, r25
     982:	37 ff       	sbrs	r19, 7
     984:	03 c0       	rjmp	.+6      	; 0x98c <__stack+0x8d>
     986:	30 95       	com	r19
     988:	21 95       	neg	r18
     98a:	3f 4f       	sbci	r19, 0xFF	; 255
     98c:	82 e0       	ldi	r24, 0x02	; 2
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	e8 0e       	add	r14, r24
     992:	f9 1e       	adc	r15, r25
     994:	25 30       	cpi	r18, 0x05	; 5
     996:	31 05       	cpc	r19, r1
     998:	1c f0       	brlt	.+6      	; 0x9a0 <__stack+0xa1>
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	89 83       	std	Y+1, r24	; 0x01
     99e:	05 c0       	rjmp	.+10     	; 0x9aa <__stack+0xab>
     9a0:	4f 5f       	subi	r20, 0xFF	; 255
     9a2:	5f 4f       	sbci	r21, 0xFF	; 255
     9a4:	48 30       	cpi	r20, 0x08	; 8
     9a6:	51 05       	cpc	r21, r1
     9a8:	29 f7       	brne	.-54     	; 0x974 <__stack+0x75>
    }

  // Tick count down timers.
  if(valveTurndownCountdownM > 0) { --valveTurndownCountdownM; }
     9aa:	8a 81       	ldd	r24, Y+2	; 0x02
     9ac:	88 23       	and	r24, r24
     9ae:	11 f0       	breq	.+4      	; 0x9b4 <__stack+0xb5>
     9b0:	81 50       	subi	r24, 0x01	; 1
     9b2:	8a 83       	std	Y+2, r24	; 0x02
  if(valveTurnupCountdownM > 0) { --valveTurnupCountdownM; }
     9b4:	8b 81       	ldd	r24, Y+3	; 0x03
     9b6:	88 23       	and	r24, r24
     9b8:	11 f0       	breq	.+4      	; 0x9be <__stack+0xbf>
     9ba:	81 50       	subi	r24, 0x01	; 1
     9bc:	8b 83       	std	Y+3, r24	; 0x03
  if(tempOvershootCountdownM > 0) { --tempOvershootCountdownM; }
     9be:	8c 81       	ldd	r24, Y+4	; 0x04
     9c0:	88 23       	and	r24, r24
     9c2:	11 f0       	breq	.+4      	; 0x9c8 <__stack+0xc9>
     9c4:	81 50       	subi	r24, 0x01	; 1
     9c6:	8c 83       	std	Y+4, r24	; 0x04
  }
     9c8:	df 91       	pop	r29
     9ca:	cf 91       	pop	r28
     9cc:	1f 91       	pop	r17
     9ce:	0f 91       	pop	r16
     9d0:	ff 90       	pop	r15
     9d2:	ef 90       	pop	r14
     9d4:	08 95       	ret

000009d6 <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)>:
// This supplied state may be updated.
// Uses hysteresis and a proportional control and some other cleverness.
// Is always willing to turn off quickly, but on slowly (AKA "slow start" algorithm),
// and try to eliminate unnecessary 'hunting' which makes noise and uses actuator energy.
// Nominally called at a regular rate, once per minute.
uint8_t ModelledRadValve::computeRequiredTRVPercentOpen(const struct ModelledRadValveInputState &inputState, struct ModelledRadValveState &retainedState)
     9d6:	ef 92       	push	r14
     9d8:	ff 92       	push	r15
     9da:	0f 93       	push	r16
     9dc:	1f 93       	push	r17
     9de:	cf 93       	push	r28
     9e0:	df 93       	push	r29
     9e2:	ec 01       	movw	r28, r24
     9e4:	8b 01       	movw	r16, r22
DEBUG_SERIAL_PRINT(inputState.refTempC);
DEBUG_SERIAL_PRINTLN();
#endif

  // Run per-tick tasks.
  retainedState.tick(inputState);
     9e6:	cb 01       	movw	r24, r22
     9e8:	be 01       	movw	r22, r28
     9ea:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <ModelledRadValveState::tick(ModelledRadValveInputState const&)>

  // Possibly-adjusted and.or smoothed temperature to use for targetting.
  const int adjustedTempC16 = retainedState.isFiltering ? (retainedState.getSmoothedRecent() + refTempOffsetC16) : inputState.refTempC16;
     9ee:	f8 01       	movw	r30, r16
     9f0:	81 81       	ldd	r24, Z+1	; 0x01
     9f2:	88 23       	and	r24, r24
     9f4:	39 f0       	breq	.+14     	; 0xa04 <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x2e>
     9f6:	c8 01       	movw	r24, r16
     9f8:	0e 94 2d 04 	call	0x85a	; 0x85a <ModelledRadValveState::getSmoothedRecent()>
     9fc:	bc 01       	movw	r22, r24
     9fe:	68 5f       	subi	r22, 0xF8	; 248
     a00:	7f 4f       	sbci	r23, 0xFF	; 255
     a02:	02 c0       	rjmp	.+4      	; 0xa08 <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x32>
     a04:	68 85       	ldd	r22, Y+8	; 0x08
     a06:	79 85       	ldd	r23, Y+9	; 0x09
  const int8_t adjustedTempC = retainedState.isFiltering ? (adjustedTempC16 >> 4) : inputState.refTempC;
     a08:	f8 01       	movw	r30, r16
     a0a:	81 81       	ldd	r24, Z+1	; 0x01
     a0c:	88 23       	and	r24, r24
     a0e:	39 f0       	breq	.+14     	; 0xa1e <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x48>
     a10:	cb 01       	movw	r24, r22
     a12:	24 e0       	ldi	r18, 0x04	; 4
     a14:	95 95       	asr	r25
     a16:	87 95       	ror	r24
     a18:	2a 95       	dec	r18
     a1a:	e1 f7       	brne	.-8      	; 0xa14 <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x3e>
     a1c:	01 c0       	rjmp	.+2      	; 0xa20 <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x4a>
     a1e:	8f 81       	ldd	r24, Y+7	; 0x07

  // (Well) under temp target: open valve up.
  if(adjustedTempC < inputState.targetTempC)
     a20:	48 2f       	mov	r20, r24
     a22:	55 27       	eor	r21, r21
     a24:	47 fd       	sbrc	r20, 7
     a26:	50 95       	com	r21
     a28:	88 81       	ld	r24, Y
     a2a:	28 2f       	mov	r18, r24
     a2c:	30 e0       	ldi	r19, 0x00	; 0
     a2e:	42 17       	cp	r20, r18
     a30:	53 07       	cpc	r21, r19
     a32:	54 f5       	brge	.+84     	; 0xa88 <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0xb2>
//DEBUG_SERIAL_PRINTLN_FLASHSTRING("well under temp");
    // Limit valve open slew to help minimise overshoot and actuator noise.
    // This should also reduce nugatory setting changes when occupancy (etc) is fluctuating.
    // Thus it may take several minutes to turn the radiator fully on,
    // though probably opening the first ~33% will allow near-maximum heat output in practice.
    if(inputState.currentPCOpen < inputState.maxPCOpen)
     a34:	4a 85       	ldd	r20, Y+10	; 0x0a
     a36:	9a 81       	ldd	r25, Y+2	; 0x02
     a38:	49 17       	cp	r20, r25
     a3a:	08 f0       	brcs	.+2      	; 0xa3e <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x68>
     a3c:	bf c0       	rjmp	.+382    	; 0xbbc <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x1e6>
      {
#if defined(SUPPORT_BAKE)
      // If room is well below target and in BAKE mode then immediately open to maximum.
      // Need debounced bake mode value to avoid spurious slamming open of the valve as the user cycles through modes.
      if(inputState.inBakeMode) { return(inputState.maxPCOpen); }
     a3e:	8e 81       	ldd	r24, Y+6	; 0x06
     a40:	88 23       	and	r24, r24
     a42:	09 f0       	breq	.+2      	; 0xa46 <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x70>
     a44:	bb c0       	rjmp	.+374    	; 0xbbc <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x1e6>
#endif

      // Reduce valve hunting: defer re-opening if recently closed.
      if(retainedState.dontTurnup()) { return(inputState.currentPCOpen); }
     a46:	f8 01       	movw	r30, r16
     a48:	82 81       	ldd	r24, Z+2	; 0x02
     a4a:	88 23       	and	r24, r24
     a4c:	09 f0       	breq	.+2      	; 0xa50 <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x7a>
     a4e:	b7 c0       	rjmp	.+366    	; 0xbbe <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x1e8>
// or if there is a huge range of temperatures in recent history.
// Note that pseudo overshoots may be seen as the target temperature steps down.
static bool glacialOn(const struct ModelledRadValveInputState &inputState, struct ModelledRadValveState &retainedState)
  {
  // True if in glacial mode.
  if(inputState.glacial) { return(true); }
     a50:	8c 81       	ldd	r24, Y+4	; 0x04
     a52:	88 23       	and	r24, r24
     a54:	09 f0       	breq	.+2      	; 0xa58 <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x82>
     a56:	a9 c0       	rjmp	.+338    	; 0xbaa <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x1d4>
  // True if recently overshot significantly.
  if(retainedState.hasOvershotRecently()) { return(true); }
     a58:	84 81       	ldd	r24, Z+4	; 0x04
     a5a:	88 23       	and	r24, r24
     a5c:	09 f4       	brne	.+2      	; 0xa60 <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x8a>
     a5e:	b7 c0       	rjmp	.+366    	; 0xbce <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x1f8>
     a60:	a4 c0       	rjmp	.+328    	; 0xbaa <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x1d4>
      if(beGlacial) { return(inputState.currentPCOpen + 1); }

      // Ensure open quickly from cold for acceptable response.
      // Less fast in eco mode (to reduce overshoot risk) and even less fast if also already moderately open.
      const uint8_t slewRate = ((!inputState.hasEcoBias) ? TRV_SLEW_PC_PER_MIN_VFAST :
          ((inputState.currentPCOpen >= DEFAULT_VALVE_PC_MODERATELY_OPEN) ? TRV_MAX_SLEW_PC_PER_MIN : TRV_SLEW_PC_PER_MIN_FAST));
     a62:	41 32       	cpi	r20, 0x21	; 33
     a64:	10 f4       	brcc	.+4      	; 0xa6a <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x94>
     a66:	3a e0       	ldi	r19, 0x0A	; 10
     a68:	01 c0       	rjmp	.+2      	; 0xa6c <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x96>
     a6a:	35 e0       	ldi	r19, 0x05	; 5
     a6c:	69 81       	ldd	r22, Y+1	; 0x01
     a6e:	23 2f       	mov	r18, r19
     a70:	36 17       	cp	r19, r22
     a72:	08 f4       	brcc	.+2      	; 0xa76 <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0xa0>
     a74:	26 2f       	mov	r18, r22
      const uint8_t minOpenFromCold = fnmax(slewRate, inputState.minPCOpen);
      // Open to 'minimum' likely open state immediately if less open currently.
      if(inputState.currentPCOpen < minOpenFromCold) { return(minOpenFromCold); }
     a76:	42 17       	cp	r20, r18
     a78:	10 f4       	brcc	.+4      	; 0xa7e <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0xa8>
     a7a:	42 2f       	mov	r20, r18
     a7c:	a0 c0       	rjmp	.+320    	; 0xbbe <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x1e8>
      // Slew open relatively gently...
      return(fnmin((uint8_t)(inputState.currentPCOpen + slewRate), inputState.maxPCOpen)); // Capped at maximum.
     a7e:	43 0f       	add	r20, r19
     a80:	94 17       	cp	r25, r20
     a82:	08 f0       	brcs	.+2      	; 0xa86 <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0xb0>
     a84:	9c c0       	rjmp	.+312    	; 0xbbe <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x1e8>
     a86:	9a c0       	rjmp	.+308    	; 0xbbc <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x1e6>
    // Keep open at maximum allowed.
    return(inputState.maxPCOpen);
    }

  // (Well) over temp target: close valve down.
  if(adjustedTempC > inputState.targetTempC)
     a88:	24 17       	cp	r18, r20
     a8a:	35 07       	cpc	r19, r21
     a8c:	0c f0       	brlt	.+2      	; 0xa90 <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0xba>
     a8e:	40 c0       	rjmp	.+128    	; 0xb10 <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x13a>
    {
//DEBUG_SERIAL_PRINTLN_FLASHSTRING("well over temp");
    // Note if there has been a big overshoot so as to be more careful opening valve next time around...
    if(adjustedTempC > inputState.targetTempC + 1) { retainedState.noteOvershoot(); }
     a90:	2f 5f       	subi	r18, 0xFF	; 255
     a92:	3f 4f       	sbci	r19, 0xFF	; 255
     a94:	24 17       	cp	r18, r20
     a96:	35 07       	cpc	r19, r21
     a98:	1c f4       	brge	.+6      	; 0xaa0 <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0xca>

  // Set non-zero when a significant temperature overshoot happens, and then counts down to zero.
  uint8_t tempOvershootCountdownM;
  // Note a significant temperature overshoot.
  // Takes until a minimum of about half and hour or a couple of minimum cycles to clear. 
  void noteOvershoot() { tempOvershootCountdownM = max(30, 3 + 2 * (ANTISEEK_VALVE_REOPEN_DELAY_M + ANTISEEK_VALVE_RECLOSE_DELAY_M)); }
     a9a:	8e e1       	ldi	r24, 0x1E	; 30
     a9c:	f8 01       	movw	r30, r16
     a9e:	84 83       	std	Z+4, r24	; 0x04

    if(0 != inputState.currentPCOpen)
     aa0:	4a 85       	ldd	r20, Y+10	; 0x0a
     aa2:	44 23       	and	r20, r20
     aa4:	09 f4       	brne	.+2      	; 0xaa8 <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0xd2>
     aa6:	8b c0       	rjmp	.+278    	; 0xbbe <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x1e8>
      {
      // Reduce valve hunting: defer re-closing if recently opened.
      if(retainedState.dontTurndown()) { return(inputState.currentPCOpen); }
     aa8:	f8 01       	movw	r30, r16
     aaa:	83 81       	ldd	r24, Z+3	; 0x03
     aac:	88 23       	and	r24, r24
     aae:	09 f0       	breq	.+2      	; 0xab2 <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0xdc>
     ab0:	86 c0       	rjmp	.+268    	; 0xbbe <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x1e8>

      // Continue shutting valve as not yet closed.
      // TODO-117: allow very slow final turn off to help systems with poor bypass, ~1% per minute.
      // Special slow-turn-off rules for final part of travel at/below DEFAULT_MIN_VALVE_PC_REALLY_OPEN floor.
      const uint8_t minReallyOpen = inputState.minPCOpen;
     ab2:	89 81       	ldd	r24, Y+1	; 0x01
      const uint8_t lingerThreshold = (minReallyOpen > 0) ? (minReallyOpen-1) : 0;
     ab4:	88 23       	and	r24, r24
     ab6:	91 f0       	breq	.+36     	; 0xadc <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x106>
//      const uint8_t lingerThreshold = DEFAULT_MIN_VALVE_PC_REALLY_OPEN - 1; // Should be below 'call for heat' threshold.
      if(inputState.currentPCOpen < minReallyOpen)
     ab8:	48 17       	cp	r20, r24
     aba:	18 f0       	brcs	.+6      	; 0xac2 <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0xec>

      // Continue shutting valve as not yet closed.
      // TODO-117: allow very slow final turn off to help systems with poor bypass, ~1% per minute.
      // Special slow-turn-off rules for final part of travel at/below DEFAULT_MIN_VALVE_PC_REALLY_OPEN floor.
      const uint8_t minReallyOpen = inputState.minPCOpen;
      const uint8_t lingerThreshold = (minReallyOpen > 0) ? (minReallyOpen-1) : 0;
     abc:	58 2f       	mov	r21, r24
     abe:	51 50       	subi	r21, 0x01	; 1
     ac0:	0e c0       	rjmp	.+28     	; 0xade <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x108>
//      const uint8_t lingerThreshold = DEFAULT_MIN_VALVE_PC_REALLY_OPEN - 1; // Should be below 'call for heat' threshold.
      if(inputState.currentPCOpen < minReallyOpen)
        {
        // If lingered long enough then do final chunk in one burst to help avoid valve hiss and temperature overshoot.
        if((DEFAULT_MAX_RUN_ON_TIME_M < minReallyOpen) && (inputState.currentPCOpen < minReallyOpen - DEFAULT_MAX_RUN_ON_TIME_M))
     ac2:	86 30       	cpi	r24, 0x06	; 6
     ac4:	48 f0       	brcs	.+18     	; 0xad8 <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x102>
     ac6:	24 2f       	mov	r18, r20
     ac8:	30 e0       	ldi	r19, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	05 97       	sbiw	r24, 0x05	; 5
     ace:	28 17       	cp	r18, r24
     ad0:	39 07       	cpc	r19, r25
     ad2:	14 f4       	brge	.+4      	; 0xad8 <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x102>
     ad4:	40 e0       	ldi	r20, 0x00	; 0
     ad6:	73 c0       	rjmp	.+230    	; 0xbbe <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x1e8>
          { return(0); } // Shut right off.
        return(inputState.currentPCOpen - 1); // Turn down as slowly as reasonably possible to help boiler cool.
     ad8:	41 50       	subi	r20, 0x01	; 1
     ada:	71 c0       	rjmp	.+226    	; 0xbbe <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x1e8>
     adc:	50 e0       	ldi	r21, 0x00	; 0
        }

      // TODO-109: with comfort bias (FIXME: or at hub because of self-heating temp errors or if temperatures are jittery)
      // then slew to off relatively slowly to reduce wasted effort from minor overshoots.
      if(((!inputState.hasEcoBias) /* || inHubMode() || TemperatureC16.isFilteringOn() */ ) &&
     ade:	8d 81       	ldd	r24, Y+5	; 0x05
     ae0:	88 23       	and	r24, r24
     ae2:	09 f0       	breq	.+2      	; 0xae6 <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x110>
     ae4:	69 c0       	rjmp	.+210    	; 0xbb8 <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x1e2>
     ae6:	25 2f       	mov	r18, r21
     ae8:	30 e0       	ldi	r19, 0x00	; 0
     aea:	8a 81       	ldd	r24, Y+2	; 0x02
     aec:	68 2f       	mov	r22, r24
     aee:	70 e0       	ldi	r23, 0x00	; 0
     af0:	c9 01       	movw	r24, r18
     af2:	43 96       	adiw	r24, 0x13	; 19
     af4:	86 17       	cp	r24, r22
     af6:	97 07       	cpc	r25, r23
     af8:	1c f4       	brge	.+6      	; 0xb00 <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x12a>
     afa:	b9 01       	movw	r22, r18
     afc:	6c 5e       	subi	r22, 0xEC	; 236
     afe:	7f 4f       	sbci	r23, 0xFF	; 255
     b00:	84 2f       	mov	r24, r20
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	68 17       	cp	r22, r24
     b06:	79 07       	cpc	r23, r25
     b08:	0c f0       	brlt	.+2      	; 0xb0c <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x136>
     b0a:	56 c0       	rjmp	.+172    	; 0xbb8 <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x1e2>
         (inputState.currentPCOpen > constrain(((int)lingerThreshold) + TRV_SLEW_PC_PER_MIN_VFAST, TRV_SLEW_PC_PER_MIN_VFAST, inputState.maxPCOpen)))
        { return(inputState.currentPCOpen - TRV_SLEW_PC_PER_MIN_VFAST); }
     b0c:	44 51       	subi	r20, 0x14	; 20
     b0e:	57 c0       	rjmp	.+174    	; 0xbbe <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x1e8>

  // Close to (or at) temp target: set valve partly open to try to tightly regulate.
  //
  // Use currentTempC16 lsbits to set valve percentage for proportional feedback
  // to provide more efficient and quieter TRV drive and probably more stable room temperature.
  const uint8_t lsbits = (uint8_t) (adjustedTempC16 & 0xf); // LSbits of temperature above base of proportional adjustment range.
     b10:	9f e0       	ldi	r25, 0x0F	; 15
     b12:	e9 2e       	mov	r14, r25
     b14:	e6 22       	and	r14, r22
//    uint8_t tmp = (uint8_t) (refTempC16 & 0xf); // Only interested in lsbits.
  const uint8_t tmp = 16 - lsbits; // Now in range 1 (at warmest end of 'correct' temperature) to 16 (coolest).
  const uint8_t ulpStep = 6;
  // Get to nominal range 6 to 96, eg valve nearly shut just below top of 'correct' temperature window.
  const uint8_t targetPORaw = tmp * ulpStep;
     b16:	80 e1       	ldi	r24, 0x10	; 16
     b18:	8e 19       	sub	r24, r14
     b1a:	96 e0       	ldi	r25, 0x06	; 6
     b1c:	89 9f       	mul	r24, r25
     b1e:	f0 2c       	mov	r15, r0
     b20:	11 24       	eor	r1, r1
  // If target would be over DEFAULT_VALVE_PC_MODERATELY_OPEN but velocity (rate of rise of) temperature is high
  // (high enough that it might not be possible to turn it down quickly enough to avoid a significant overshoot)
  // then further constrain it.
  const bool risingToofast = ((targetPORaw > DEFAULT_VALVE_PC_MODERATELY_OPEN) && (retainedState.getVelocityC16PerTick() > max(1,16/TURN_DOWN_RESPONSE_TIME_M)));
     b22:	f1 e2       	ldi	r31, 0x21	; 33
     b24:	ff 15       	cp	r31, r15
     b26:	08 f0       	brcs	.+2      	; 0xb2a <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x154>
     b28:	58 c0       	rjmp	.+176    	; 0xbda <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x204>
     b2a:	c8 01       	movw	r24, r16
     b2c:	0e 94 43 04 	call	0x886	; 0x886 <ModelledRadValveState::getVelocityC16PerTick()>
     b30:	03 97       	sbiw	r24, 0x03	; 3
     b32:	0c f4       	brge	.+2      	; 0xb36 <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x160>
     b34:	52 c0       	rjmp	.+164    	; 0xbda <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x204>
     b36:	81 e2       	ldi	r24, 0x21	; 33
  const uint8_t targetCapped = risingToofast ? DEFAULT_VALVE_PC_MODERATELY_OPEN : targetPORaw;
  // Constrain from below to likely minimum-open value, in part to deal with TODO-117 'linger open' in lieu of boiler bypass.
  // Constrain from above by maximum percentage open allowed, eg for pay-by-volume systems.
  const uint8_t targetPO = constrain(targetCapped, inputState.minPCOpen, inputState.maxPCOpen);
     b38:	99 81       	ldd	r25, Y+1	; 0x01
     b3a:	89 17       	cp	r24, r25
     b3c:	28 f0       	brcs	.+10     	; 0xb48 <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x172>
     b3e:	2a 81       	ldd	r18, Y+2	; 0x02
     b40:	98 2f       	mov	r25, r24
     b42:	28 17       	cp	r18, r24
     b44:	08 f4       	brcc	.+2      	; 0xb48 <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x172>
     b46:	92 2f       	mov	r25, r18

  // Reduce spurious valve/boiler adjustment by avoiding movement at all unless current temperature error is significant.
  if(targetPO != inputState.currentPCOpen)
     b48:	4a 85       	ldd	r20, Y+10	; 0x0a
     b4a:	94 17       	cp	r25, r20
     b4c:	b9 f1       	breq	.+110    	; 0xbbc <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x1e6>
    // Increase this significantly if permitted to reduce the total number and size of adjustments and thus reduce noise (and battery drain).
// FIXME //    if(inputState.widenDeadband && !tooHot && (0 != (XXXgetMinutesSinceMidnightLT() & 3))) { return(inputState.currentPCOpen); } // Suppress some movement in wider deadband.
    // Also increase effective deadband if temperature resolution is lower than 1/16th, eg 8ths => 1+2*ulpStep minimum.
// FIXME //    const uint8_t realMinUlp = 1 + (TemperatureC16.isLowPrecision() ? 2*ulpStep : ulpStep); // Assume precision no coarser than 1/8C.
    const uint8_t realMinUlp = 1 + ulpStep;
    const uint8_t minAbsSlew = fnmax(realMinUlp, (uint8_t)(inputState.widenDeadband ? max(min(DEFAULT_VALVE_PC_MODERATELY_OPEN/2,max(TRV_MAX_SLEW_PC_PER_MIN,2*TRV_MIN_SLEW_PC)), 2+TRV_MIN_SLEW_PC) : TRV_MIN_SLEW_PC));
     b4e:	8b 81       	ldd	r24, Y+3	; 0x03
     b50:	88 23       	and	r24, r24
     b52:	11 f4       	brne	.+4      	; 0xb58 <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x182>
     b54:	27 e0       	ldi	r18, 0x07	; 7
     b56:	01 c0       	rjmp	.+2      	; 0xb5a <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x184>
     b58:	2e e0       	ldi	r18, 0x0E	; 14
    if(tooHot) // Currently open more than required, ie above target temperature.
     b5a:	94 17       	cp	r25, r20
     b5c:	50 f4       	brcc	.+20     	; 0xb72 <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x19c>
      {
//DEBUG_SERIAL_PRINTLN_FLASHSTRING("slightly over temp");
      // Reduce valve hunting: defer re-closing if recently opened.
      if(retainedState.dontTurndown()) { return(inputState.currentPCOpen); }
     b5e:	f8 01       	movw	r30, r16
     b60:	83 81       	ldd	r24, Z+3	; 0x03
     b62:	88 23       	and	r24, r24
     b64:	61 f5       	brne	.+88     	; 0xbbe <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x1e8>

      const uint8_t slew = inputState.currentPCOpen - targetPO;
      // Ensure no hunting for ~1ulp temperature wobble.
      if(slew < minAbsSlew) { return(inputState.currentPCOpen); }
     b66:	84 2f       	mov	r24, r20
     b68:	89 1b       	sub	r24, r25
     b6a:	82 17       	cp	r24, r18
     b6c:	40 f1       	brcs	.+80     	; 0xbbe <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x1e8>
      
      if(slew > TRV_MAX_SLEW_PC_PER_MIN)
          { return(inputState.currentPCOpen - TRV_MAX_SLEW_PC_PER_MIN); } // Cap slew rate.
     b6e:	45 50       	subi	r20, 0x05	; 5
     b70:	26 c0       	rjmp	.+76     	; 0xbbe <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x1e8>
    // if(targetPO > TRVPercentOpen) // Currently open less than required, ie below target temperature.
//DEBUG_SERIAL_PRINTLN_FLASHSTRING("slightly under temp");
#if defined(SUPPORT_BAKE)
    // If room is well below target and in BAKE mode then immediately open to maximum.
    // Need debounced bake mode value to avoid spurious slamming open of the valve as the user cycles through modes.
    if(inputState.inBakeMode) { return(inputState.maxPCOpen); }
     b72:	8e 81       	ldd	r24, Y+6	; 0x06
     b74:	88 23       	and	r24, r24
     b76:	11 f0       	breq	.+4      	; 0xb7c <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x1a6>
     b78:	4a 81       	ldd	r20, Y+2	; 0x02
     b7a:	21 c0       	rjmp	.+66     	; 0xbbe <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x1e8>
#endif

    // Reduce valve hunting: defer re-opening if recently closed.
    if(retainedState.dontTurnup()) { return(inputState.currentPCOpen); }
     b7c:	f8 01       	movw	r30, r16
     b7e:	82 81       	ldd	r24, Z+2	; 0x02
     b80:	88 23       	and	r24, r24
     b82:	e9 f4       	brne	.+58     	; 0xbbe <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x1e8>

    const uint8_t slew = targetPO - inputState.currentPCOpen;
     b84:	39 2f       	mov	r19, r25
     b86:	34 1b       	sub	r19, r20
    // To to avoid hunting around boundaries of a ~1ulp temperature step.
    if(slew < minAbsSlew) { return(inputState.currentPCOpen); }
     b88:	32 17       	cp	r19, r18
     b8a:	c8 f0       	brcs	.+50     	; 0xbbe <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x1e8>

    // Open glacially if explicitly requested or if temperature overshoot has happened or is a danger.
    // Note that pseudo overshoots may be seen after a step down in target temperature.
    // This assumes that most valves more than about 1/3rd open can deliver significant power, esp if not statically balanced.
    const bool beGlacial = (lsbits >= 8) || ((lsbits >= 4) && (inputState.currentPCOpen >= DEFAULT_VALVE_PC_MODERATELY_OPEN)) || glacialOn(inputState, retainedState);
     b8c:	f7 e0       	ldi	r31, 0x07	; 7
     b8e:	fe 15       	cp	r31, r14
     b90:	60 f0       	brcs	.+24     	; 0xbaa <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x1d4>
     b92:	83 e0       	ldi	r24, 0x03	; 3
     b94:	8e 15       	cp	r24, r14
     b96:	10 f4       	brcc	.+4      	; 0xb9c <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x1c6>
     b98:	41 32       	cpi	r20, 0x21	; 33
     b9a:	38 f4       	brcc	.+14     	; 0xbaa <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x1d4>
// or if there is a huge range of temperatures in recent history.
// Note that pseudo overshoots may be seen as the target temperature steps down.
static bool glacialOn(const struct ModelledRadValveInputState &inputState, struct ModelledRadValveState &retainedState)
  {
  // True if in glacial mode.
  if(inputState.glacial) { return(true); }
     b9c:	8c 81       	ldd	r24, Y+4	; 0x04
     b9e:	88 23       	and	r24, r24
     ba0:	21 f4       	brne	.+8      	; 0xbaa <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x1d4>
  // True if recently overshot significantly.
  if(retainedState.hasOvershotRecently()) { return(true); }
     ba2:	f8 01       	movw	r30, r16
     ba4:	84 81       	ldd	r24, Z+4	; 0x04
     ba6:	88 23       	and	r24, r24
     ba8:	d1 f0       	breq	.+52     	; 0xbde <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x208>

    // Open glacially if explicitly requested or if temperature overshoot has happened or is a danger.
    // Note that pseudo overshoots may be seen after a step down in target temperature.
    // This assumes that most valves more than about 1/3rd open can deliver significant power, esp if not statically balanced.
    const bool beGlacial = (lsbits >= 8) || ((lsbits >= 4) && (inputState.currentPCOpen >= DEFAULT_VALVE_PC_MODERATELY_OPEN)) || glacialOn(inputState, retainedState);
    if(beGlacial) { return(inputState.currentPCOpen + 1); }
     baa:	4f 5f       	subi	r20, 0xFF	; 255
     bac:	08 c0       	rjmp	.+16     	; 0xbbe <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x1e8>

    // Slew open faster with comfort bias.
    const uint8_t maxSlew = (!inputState.hasEcoBias) ? TRV_SLEW_PC_PER_MIN_FAST : TRV_MAX_SLEW_PC_PER_MIN;
    if(slew > maxSlew)
     bae:	3b 30       	cpi	r19, 0x0B	; 11
     bb0:	28 f0       	brcs	.+10     	; 0xbbc <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x1e6>
     bb2:	8a e0       	ldi	r24, 0x0A	; 10
        { return(inputState.currentPCOpen + maxSlew); } // Cap slew rate open.
     bb4:	48 0f       	add	r20, r24
     bb6:	03 c0       	rjmp	.+6      	; 0xbbe <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x1e8>
     bb8:	45 2f       	mov	r20, r21
     bba:	01 c0       	rjmp	.+2      	; 0xbbe <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x1e8>
     bbc:	49 2f       	mov	r20, r25
    return(targetPO);
    }

  // Remain as was...
  return(inputState.currentPCOpen);
  }
     bbe:	84 2f       	mov	r24, r20
     bc0:	df 91       	pop	r29
     bc2:	cf 91       	pop	r28
     bc4:	1f 91       	pop	r17
     bc6:	0f 91       	pop	r16
     bc8:	ff 90       	pop	r15
     bca:	ef 90       	pop	r14
     bcc:	08 95       	ret
      if(beGlacial) { return(inputState.currentPCOpen + 1); }

      // Ensure open quickly from cold for acceptable response.
      // Less fast in eco mode (to reduce overshoot risk) and even less fast if also already moderately open.
      const uint8_t slewRate = ((!inputState.hasEcoBias) ? TRV_SLEW_PC_PER_MIN_VFAST :
          ((inputState.currentPCOpen >= DEFAULT_VALVE_PC_MODERATELY_OPEN) ? TRV_MAX_SLEW_PC_PER_MIN : TRV_SLEW_PC_PER_MIN_FAST));
     bce:	8d 81       	ldd	r24, Y+5	; 0x05
     bd0:	88 23       	and	r24, r24
     bd2:	09 f0       	breq	.+2      	; 0xbd6 <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x200>
     bd4:	46 cf       	rjmp	.-372    	; 0xa62 <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x8c>
     bd6:	34 e1       	ldi	r19, 0x14	; 20
     bd8:	49 cf       	rjmp	.-366    	; 0xa6c <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x96>
     bda:	8f 2d       	mov	r24, r15
     bdc:	ad cf       	rjmp	.-166    	; 0xb38 <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x162>
    // This assumes that most valves more than about 1/3rd open can deliver significant power, esp if not statically balanced.
    const bool beGlacial = (lsbits >= 8) || ((lsbits >= 4) && (inputState.currentPCOpen >= DEFAULT_VALVE_PC_MODERATELY_OPEN)) || glacialOn(inputState, retainedState);
    if(beGlacial) { return(inputState.currentPCOpen + 1); }

    // Slew open faster with comfort bias.
    const uint8_t maxSlew = (!inputState.hasEcoBias) ? TRV_SLEW_PC_PER_MIN_FAST : TRV_MAX_SLEW_PC_PER_MIN;
     bde:	8d 81       	ldd	r24, Y+5	; 0x05
     be0:	88 23       	and	r24, r24
     be2:	29 f3       	breq	.-54     	; 0xbae <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x1d8>
     be4:	85 e0       	ldi	r24, 0x05	; 5
     be6:	e6 cf       	rjmp	.-52     	; 0xbb4 <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)+0x1de>

00000be8 <compressTempC16(int)>:
#define COMPRESSION_C16_HIGH_THR_AFTER (COMPRESSION_C16_LOW_THR_AFTER + ((COMPRESSION_C16_HIGH_THRESHOLD-COMPRESSION_C16_LOW_THRESHOLD)>>1)) // High threshold after compression.
#define COMPRESSION_C16_CEIL_VAL (100<<4) // Ceiling input value to compression.
#define COMPRESSION_C16_CEIL_VAL_AFTER (COMPRESSION_C16_HIGH_THR_AFTER + ((COMPRESSION_C16_CEIL_VAL-COMPRESSION_C16_HIGH_THRESHOLD) >> 3)) // Ceiling input value after compression.
uint8_t compressTempC16(int tempC16)
  {
  if(tempC16 <= 0) { return(0); } // Clamp negative values to zero.
     be8:	18 16       	cp	r1, r24
     bea:	19 06       	cpc	r1, r25
     bec:	14 f0       	brlt	.+4      	; 0xbf2 <compressTempC16(int)+0xa>
     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	08 95       	ret
  if(tempC16 < COMPRESSION_C16_LOW_THRESHOLD) { return(tempC16 >> 3); } // Preserve 1 bit after the binary point (0.5C precision).
     bf2:	8f 3f       	cpi	r24, 0xFF	; 255
     bf4:	91 05       	cpc	r25, r1
     bf6:	09 f0       	breq	.+2      	; 0xbfa <compressTempC16(int)+0x12>
     bf8:	34 f4       	brge	.+12     	; 0xc06 <compressTempC16(int)+0x1e>
     bfa:	53 e0       	ldi	r21, 0x03	; 3
     bfc:	95 95       	asr	r25
     bfe:	87 95       	ror	r24
     c00:	5a 95       	dec	r21
     c02:	e1 f7       	brne	.-8      	; 0xbfc <compressTempC16(int)+0x14>
     c04:	08 95       	ret
  if(tempC16 < COMPRESSION_C16_HIGH_THRESHOLD)
     c06:	21 e0       	ldi	r18, 0x01	; 1
     c08:	80 38       	cpi	r24, 0x80	; 128
     c0a:	92 07       	cpc	r25, r18
     c0c:	34 f4       	brge	.+12     	; 0xc1a <compressTempC16(int)+0x32>
    { return(((tempC16 - COMPRESSION_C16_LOW_THRESHOLD) >> 1) + COMPRESSION_C16_LOW_THR_AFTER); }
     c0e:	80 50       	subi	r24, 0x00	; 0
     c10:	91 40       	sbci	r25, 0x01	; 1
     c12:	95 95       	asr	r25
     c14:	87 95       	ror	r24
     c16:	80 5e       	subi	r24, 0xE0	; 224
     c18:	08 95       	ret
  if(tempC16 < COMPRESSION_C16_CEIL_VAL)
     c1a:	26 e0       	ldi	r18, 0x06	; 6
     c1c:	80 34       	cpi	r24, 0x40	; 64
     c1e:	92 07       	cpc	r25, r18
     c20:	14 f0       	brlt	.+4      	; 0xc26 <compressTempC16(int)+0x3e>
     c22:	88 ef       	ldi	r24, 0xF8	; 248
     c24:	08 95       	ret
    { return(((tempC16 - COMPRESSION_C16_HIGH_THRESHOLD) >> 3) + COMPRESSION_C16_HIGH_THR_AFTER); }
     c26:	80 58       	subi	r24, 0x80	; 128
     c28:	91 40       	sbci	r25, 0x01	; 1
     c2a:	33 e0       	ldi	r19, 0x03	; 3
     c2c:	95 95       	asr	r25
     c2e:	87 95       	ror	r24
     c30:	3a 95       	dec	r19
     c32:	e1 f7       	brne	.-8      	; 0xc2c <compressTempC16(int)+0x44>
     c34:	80 5a       	subi	r24, 0xA0	; 160
  return(COMPRESSION_C16_CEIL_VAL_AFTER);
  }
     c36:	08 95       	ret

00000c38 <expandTempC16(unsigned char)>:

// Reverses range compression done by compressTempC16(); results in range [0,100], with varying precision based on original value.
// 0xff (or other invalid) input results in STATS_UNSET_INT. 
int expandTempC16(uint8_t cTemp)
  {
  if(cTemp < COMPRESSION_C16_LOW_THR_AFTER) { return(cTemp << 3); }
     c38:	80 32       	cpi	r24, 0x20	; 32
     c3a:	40 f4       	brcc	.+16     	; 0xc4c <expandTempC16(unsigned char)+0x14>
     c3c:	28 2f       	mov	r18, r24
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	e3 e0       	ldi	r30, 0x03	; 3
     c42:	22 0f       	add	r18, r18
     c44:	33 1f       	adc	r19, r19
     c46:	ea 95       	dec	r30
     c48:	e1 f7       	brne	.-8      	; 0xc42 <expandTempC16(unsigned char)+0xa>
     c4a:	17 c0       	rjmp	.+46     	; 0xc7a <expandTempC16(unsigned char)+0x42>
  if(cTemp < COMPRESSION_C16_HIGH_THR_AFTER)
     c4c:	80 36       	cpi	r24, 0x60	; 96
     c4e:	38 f4       	brcc	.+14     	; 0xc5e <expandTempC16(unsigned char)+0x26>
    { return(((cTemp - COMPRESSION_C16_LOW_THR_AFTER) << 1) + COMPRESSION_C16_LOW_THRESHOLD); }
     c50:	28 2f       	mov	r18, r24
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	22 0f       	add	r18, r18
     c56:	33 1f       	adc	r19, r19
     c58:	20 54       	subi	r18, 0x40	; 64
     c5a:	3f 4f       	sbci	r19, 0xFF	; 255
     c5c:	0e c0       	rjmp	.+28     	; 0xc7a <expandTempC16(unsigned char)+0x42>
  if(cTemp <= COMPRESSION_C16_CEIL_VAL_AFTER)
     c5e:	89 3f       	cpi	r24, 0xF9	; 249
     c60:	18 f0       	brcs	.+6      	; 0xc68 <expandTempC16(unsigned char)+0x30>
     c62:	2f ef       	ldi	r18, 0xFF	; 255
     c64:	3f e7       	ldi	r19, 0x7F	; 127
     c66:	09 c0       	rjmp	.+18     	; 0xc7a <expandTempC16(unsigned char)+0x42>
    { return(((cTemp - COMPRESSION_C16_HIGH_THR_AFTER) << 3) + COMPRESSION_C16_HIGH_THRESHOLD); }
     c68:	28 2f       	mov	r18, r24
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	63 e0       	ldi	r22, 0x03	; 3
     c6e:	22 0f       	add	r18, r18
     c70:	33 1f       	adc	r19, r19
     c72:	6a 95       	dec	r22
     c74:	e1 f7       	brne	.-8      	; 0xc6e <expandTempC16(unsigned char)+0x36>
     c76:	20 58       	subi	r18, 0x80	; 128
     c78:	31 40       	sbci	r19, 0x01	; 1
  return(STATS_UNSET_INT); // Invalid/unset input.
  }
     c7a:	c9 01       	movw	r24, r18
     c7c:	08 95       	ret

00000c7e <Sensor<unsigned char>::isAvailable() const>:
    virtual bool begin() { return(false); }

    // Returns true if this sensor is currently available.
    // True by default unless implementation overrides.
    // For those sensors that need starting this will be false before begin().
    virtual bool isAvailable() const { return(true); }
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	08 95       	ret

00000c82 <Sensor<unsigned char>::tag() const>:
    // only as required to fetch new values from the underlying sensor.
    virtual uint8_t preferredPollInterval_s() const { return(0); }

    // Returns a suggested (JSON) tag/field/key name including units of get(); NULL means no recommended tag.
    // The lifetime of the pointed-to text must be at least that of the Sensor instance.
    virtual const char *tag() const { return(NULL); }
     c82:	80 e0       	ldi	r24, 0x00	; 0
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	08 95       	ret

00000c88 <Sensor<unsigned char>::handleInterruptSimple()>:
    // Must be fast and ISR (Interrupt Service Routine) safe.
    // Returns true if interrupt was successfully handled and cleared
    // else another interrupt handler in the chain may be called
    // to attempt to clear the interrupt.
    // By default does nothing (and returns false).
    virtual bool handleInterruptSimple() { return(false); }
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	08 95       	ret

00000c8c <Sensor<unsigned char>::begin()>:

    // Begin access to this sensor if applicable and not already begun.
    // Returns true if it needed to be begun.
    // Allows logic to end() if required at the end of a block, etc.
    // Defaults to do nothing (and return false).
    virtual bool begin() { return(false); }
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	08 95       	ret

00000c90 <Sensor<unsigned char>::end()>:
    virtual bool isAvailable() const { return(true); }

    // End access to this sensor if applicable and not already ended.
    // Returns true if it needed to be ended.
    // Defaults to do nothing (and return false).
    virtual bool end() { return(false); }
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	08 95       	ret

00000c94 <Sensor<unsigned char>::preferredPollInterval_s() const>:
 
    // Returns non-zero if this implementation requires a regular call to read() to operate correctly.
    // Preferred poll interval (in seconds) or 0 if no regular poll() call required.
    // Default returns 0 indicating regular call to read() not required,
    // only as required to fetch new values from the underlying sensor.
    virtual uint8_t preferredPollInterval_s() const { return(0); }
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	08 95       	ret

00000c98 <Sensor<unsigned char>::isValid(unsigned char) const>:
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual T get() const = 0;

    // Returns true if this sensor reading value passed is potentially valid, eg in-range.
    // Default is to always return true, ie all values potentially valid.
    virtual bool isValid(T value) const { return(true); }
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	08 95       	ret

00000c9c <global constructors keyed to _Z10inWarmModev>:
  {
  protected:
      volatile uint8_t value;

      // By default initialise the value to zero.
      SimpleTSUint8Sensor() : value(0) { }
     c9c:	10 92 18 02 	sts	0x0218, r1
    // Hours and minutes since room became vacant (doesn't roll back to zero from max hours); zero when room occupied.
    uint8_t vacancyH;
    uint8_t vacancyM;

  public:
    OccupancyTracker() : occupationCountdownM(0), activityCountdownM(0), vacancyH(0), vacancyM(0) { }
     ca0:	87 e6       	ldi	r24, 0x67	; 103
     ca2:	91 e0       	ldi	r25, 0x01	; 1
     ca4:	90 93 17 02 	sts	0x0217, r25
     ca8:	80 93 16 02 	sts	0x0216, r24
     cac:	10 92 19 02 	sts	0x0219, r1
     cb0:	10 92 1a 02 	sts	0x021A, r1
     cb4:	10 92 1b 02 	sts	0x021B, r1
     cb8:	10 92 1c 02 	sts	0x021C, r1
  protected:
    // Requested acuator value/position.
    volatile uint8_t value;

    // By default initialise the value to zero.
    SimpleTSUint8Actuator() : value(0) { }
     cbc:	10 92 1f 02 	sts	0x021F, r1
        callingForHeat(false),
        valveMoved(false),
#if defined(TRV_SLEW_GLACIAL)
        glacial(true)
#else
        glacial(false)
     cc0:	89 e4       	ldi	r24, 0x49	; 73
     cc2:	91 e0       	ldi	r25, 0x01	; 1
     cc4:	90 93 1e 02 	sts	0x021E, r25
     cc8:	80 93 1d 02 	sts	0x021D, r24
  {
  ModelledRadValveInputState(const int realTempC16) :
    targetTempC(FROST), 
    minPCOpen(DEFAULT_MIN_VALVE_PC_REALLY_OPEN), maxPCOpen(100),
    widenDeadband(false), glacial(false), hasEcoBias(false), inBakeMode(false),
    currentPCOpen(0)
     ccc:	87 e0       	ldi	r24, 0x07	; 7
     cce:	80 93 20 02 	sts	0x0220, r24
     cd2:	8a e0       	ldi	r24, 0x0A	; 10
     cd4:	80 93 21 02 	sts	0x0221, r24
     cd8:	84 e6       	ldi	r24, 0x64	; 100
     cda:	80 93 22 02 	sts	0x0222, r24
     cde:	10 92 23 02 	sts	0x0223, r1
     ce2:	10 92 24 02 	sts	0x0224, r1
     ce6:	10 92 25 02 	sts	0x0225, r1
     cea:	10 92 26 02 	sts	0x0226, r1
     cee:	10 92 2a 02 	sts	0x022A, r1
// and which may save a little energy if users target the specified temperatures.
// Suggestion c/o GG ~2014/10 code, and generally less misleading anyway!
void ModelledRadValveInputState::setReferenceTemperatures(const int currentTempC16)
  {
  const int referenceTempC16 = currentTempC16 + refTempOffsetC16; // TODO-386: push targeted temperature down by 0.5C to middle of degree.
  refTempC16 = referenceTempC16;
     cf2:	88 e0       	ldi	r24, 0x08	; 8
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	90 93 29 02 	sts	0x0229, r25
     cfa:	80 93 28 02 	sts	0x0228, r24
  refTempC = referenceTempC16 >> 4;
     cfe:	10 92 27 02 	sts	0x0227, r1
  {
  ModelledRadValveState() :
    initialised(false),
    isFiltering(false),
    valveTurndownCountdownM(0), valveTurnupCountdownM(0),
    tempOvershootCountdownM(0)
     d02:	10 92 2b 02 	sts	0x022B, r1
     d06:	10 92 2c 02 	sts	0x022C, r1
     d0a:	10 92 2d 02 	sts	0x022D, r1
     d0e:	10 92 2e 02 	sts	0x022E, r1
     d12:	10 92 2f 02 	sts	0x022F, r1
        callingForHeat(false),
        valveMoved(false),
#if defined(TRV_SLEW_GLACIAL)
        glacial(true)
#else
        glacial(false)
     d16:	10 92 40 02 	sts	0x0240, r1
     d1a:	10 92 41 02 	sts	0x0241, r1
     d1e:	10 92 42 02 	sts	0x0242, r1
  else if(getSubCycleTime() >= nearOverrunThreshold)
    {
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("?O"); // Near overrun.  Note 2ms/char to send...
    }
#endif
  }
     d22:	08 95       	ret

00000d24 <pollIO(bool)>:
// Call this to do an I/O poll if needed; returns true if something useful happened.
// This call should typically take << 1ms at 1MHz CPU.
// Does not change CPU clock speeds, mess with interrupts (other than possible brief blocking), or sleep.
// Limits actual poll rate to something like once every 32ms, unless force is true.
//   * force if true then force full poll on every call (ie do not internally rate-limit)
bool pollIO(const bool force)
     d24:	38 2f       	mov	r19, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     d26:	f9 99       	sbic	0x1f, 1	; 31
     d28:	fe cf       	rjmp	.-4      	; 0xd26 <pollIO(bool)+0x2>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     d2a:	82 e1       	ldi	r24, 0x12	; 18
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	92 bd       	out	0x22, r25	; 34
     d30:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     d32:	f8 9a       	sbi	0x1f, 0	; 31
     d34:	80 b5       	in	r24, 0x20	; 32
  {
#if defined(ENABLE_BOILER_HUB) && defined(USE_MODULE_FHT8VSIMPLE)
  if(inHubMode())
     d36:	8f 3f       	cpi	r24, 0xFF	; 255
     d38:	99 f0       	breq	.+38     	; 0xd60 <pollIO(bool)+0x3c>
    {
    static volatile uint8_t _pO_lastPoll;

    // Poll RX at most about every ~32ms to help approx match spil rate when called in loop with 30ms nap.
    const uint8_t sct = getSubCycleTime();
     d3a:	20 91 b2 00 	lds	r18, 0x00B2
    if(force || ((0 == (sct & 3)) && (sct != _pO_lastPoll)))
     d3e:	33 23       	and	r19, r19
     d40:	51 f4       	brne	.+20     	; 0xd56 <pollIO(bool)+0x32>
     d42:	82 2f       	mov	r24, r18
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	83 70       	andi	r24, 0x03	; 3
     d48:	90 70       	andi	r25, 0x00	; 0
     d4a:	89 2b       	or	r24, r25
     d4c:	49 f4       	brne	.+18     	; 0xd60 <pollIO(bool)+0x3c>
     d4e:	80 91 45 02 	lds	r24, 0x0245
     d52:	28 17       	cp	r18, r24
     d54:	29 f0       	breq	.+10     	; 0xd60 <pollIO(bool)+0x3c>
      {
      _pO_lastPoll = sct;
     d56:	20 93 45 02 	sts	0x0245, r18
      if(FHT8VCallForHeatPoll()) // Check if call-for-heat has been overheard.
     d5a:	0e 94 3c 0b 	call	0x1678	; 0x1678 <FHT8VCallForHeatPoll()>
     d5e:	08 95       	ret
     d60:	80 e0       	ldi	r24, 0x00	; 0
        { return(true); }
      }
    }
#endif
  return(false);
  }
     d62:	08 95       	ret

00000d64 <smoothStatsValue(unsigned char, unsigned char)>:

// Compute new linearly-smoothed value given old smoothed value and new value.
// Guaranteed not to produce a value higher than the max of the old smoothed value and the new value.
// Uses stochastic rounding to nearest to allow nominally sub-lsb values to have an effect over time.
// Usually only made public for unit testing.
uint8_t smoothStatsValue(const uint8_t oldSmoothed, const uint8_t newValue)
     d64:	0f 93       	push	r16
     d66:	1f 93       	push	r17
     d68:	18 2f       	mov	r17, r24
     d6a:	06 2f       	mov	r16, r22
  {
  if(oldSmoothed == newValue) { return(oldSmoothed); } // Optimisation: smoothed value is unchanged if new value is the same as extant.
     d6c:	86 17       	cp	r24, r22
     d6e:	b9 f0       	breq	.+46     	; 0xd9e <smoothStatsValue(unsigned char, unsigned char)+0x3a>
  // Compute and update with new stochastically-rounded exponentially-smoothed ("Brown's simple exponential smoothing") value.
  // Stochastic rounding allows sub-lsb values to have an effect over time.
  const uint8_t stocAdd = randRNG8() & ((1 << STATS_SMOOTH_SHIFT) - 1); // Allows sub-lsb values to have an effect over time.
     d70:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <randRNG8()>
  DEBUG_SERIAL_PRINT_FLASHSTRING("stocAdd=");
  DEBUG_SERIAL_PRINT(stocAdd);
  DEBUG_SERIAL_PRINTLN();
#endif
  // Do arithmetic in 16 bits to avoid over-/under- flows.
  return((uint8_t) (((((uint16_t) oldSmoothed) << STATS_SMOOTH_SHIFT) - ((uint16_t)oldSmoothed) + ((uint16_t)newValue) + stocAdd) >> STATS_SMOOTH_SHIFT));
     d74:	21 2f       	mov	r18, r17
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	a9 01       	movw	r20, r18
     d7a:	a3 e0       	ldi	r26, 0x03	; 3
     d7c:	44 0f       	add	r20, r20
     d7e:	55 1f       	adc	r21, r21
     d80:	aa 95       	dec	r26
     d82:	e1 f7       	brne	.-8      	; 0xd7c <smoothStatsValue(unsigned char, unsigned char)+0x18>
     d84:	42 1b       	sub	r20, r18
     d86:	53 0b       	sbc	r21, r19
     d88:	87 70       	andi	r24, 0x07	; 7
     d8a:	48 0f       	add	r20, r24
     d8c:	51 1d       	adc	r21, r1
     d8e:	40 0f       	add	r20, r16
     d90:	51 1d       	adc	r21, r1
     d92:	f3 e0       	ldi	r31, 0x03	; 3
     d94:	56 95       	lsr	r21
     d96:	47 95       	ror	r20
     d98:	fa 95       	dec	r31
     d9a:	e1 f7       	brne	.-8      	; 0xd94 <smoothStatsValue(unsigned char, unsigned char)+0x30>
     d9c:	14 2f       	mov	r17, r20
  }
     d9e:	81 2f       	mov	r24, r17
     da0:	1f 91       	pop	r17
     da2:	0f 91       	pop	r16
     da4:	08 95       	ret

00000da6 <ModelledRadValve::recalibrate()>:
// If possible exercise the valve to avoid pin sticking and recalibrate valve travel.
// Default does nothing.
void ModelledRadValve::recalibrate()
  {
#ifdef USE_MODULE_FHT8VSIMPLE
  FHT8VSyncAndTXReset(); // Should this be decalcinate instead/also/first?
     da6:	0e 94 00 0a 	call	0x1400	; 0x1400 <FHT8VSyncAndTXReset()>
#endif
  }
     daa:	08 95       	ret

00000dac <__vector_5>:

#if !defined(ALT_MAIN_LOOP) // Do not define handlers here when alt main is in use.
// Previous state of port D pins to help detect changes.
static volatile uint8_t prevStatePD;
// Interrupt service routine for PD I/O port transition changes (including RX).
ISR(PCINT2_vect)
     dac:	1f 92       	push	r1
     dae:	0f 92       	push	r0
     db0:	0f b6       	in	r0, 0x3f	; 63
     db2:	0f 92       	push	r0
     db4:	11 24       	eor	r1, r1
     db6:	2f 93       	push	r18
     db8:	3f 93       	push	r19
     dba:	4f 93       	push	r20
     dbc:	5f 93       	push	r21
     dbe:	6f 93       	push	r22
     dc0:	7f 93       	push	r23
     dc2:	8f 93       	push	r24
     dc4:	9f 93       	push	r25
     dc6:	af 93       	push	r26
     dc8:	bf 93       	push	r27
     dca:	ef 93       	push	r30
     dcc:	ff 93       	push	r31
  {
  const uint8_t pins = PIND;
     dce:	89 b1       	in	r24, 0x09	; 9
  const uint8_t changes = pins ^ prevStatePD;
     dd0:	90 91 44 02 	lds	r25, 0x0244
  prevStatePD = pins;
     dd4:	80 93 44 02 	sts	0x0244, r24
  // If an interrupt arrived from no other masked source then wake the CLI.
  // The will ensure that the CLI is active, eg from RX activity,
  // eg it is possible to wake the CLI subsystem with an extra CR or LF.
  // It is OK to trigger this from other things such as button presses.
  // FIXME: ensure that resetCLIActiveTimer() is inlineable to minimise ISR prologue/epilogue time and space.
  if(!(changes & MASK_PD & ~1)) { resetCLIActiveTimer(); }
     dd8:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <resetCLIActiveTimer()>
  }
     ddc:	ff 91       	pop	r31
     dde:	ef 91       	pop	r30
     de0:	bf 91       	pop	r27
     de2:	af 91       	pop	r26
     de4:	9f 91       	pop	r25
     de6:	8f 91       	pop	r24
     de8:	7f 91       	pop	r23
     dea:	6f 91       	pop	r22
     dec:	5f 91       	pop	r21
     dee:	4f 91       	pop	r20
     df0:	3f 91       	pop	r19
     df2:	2f 91       	pop	r18
     df4:	0f 90       	pop	r0
     df6:	0f be       	out	0x3f, r0	; 63
     df8:	0f 90       	pop	r0
     dfa:	1f 90       	pop	r1
     dfc:	18 95       	reti

00000dfe <inOutlierQuartile(unsigned char, unsigned char, unsigned char)>:
// Returns false if a full set of stats not available, eg including the specified hour.
// Always returns false if all samples are the same.
//   * inTop  test for membership of the top quartile if true, bottom quartile if false
//   * statsSet  stats set number to use.
//   * hour  hour of day to use or ~0 for current hour.
bool inOutlierQuartile(const uint8_t inTop, const uint8_t statsSet, const uint8_t hour)
     dfe:	0f 93       	push	r16
     e00:	1f 93       	push	r17
     e02:	08 2f       	mov	r16, r24
     e04:	16 2f       	mov	r17, r22
  {
  if(statsSet >= EE_STATS_SETS) { return(false); } // Bad stats set number, ie unsafe.
     e06:	6a 30       	cpi	r22, 0x0A	; 10
     e08:	08 f0       	brcs	.+2      	; 0xe0c <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0xe>
     e0a:	40 c0       	rjmp	.+128    	; 0xe8c <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x8e>
  const uint8_t hh = (hour > 23) ? getHoursLT() : hour;
     e0c:	48 31       	cpi	r20, 0x18	; 24
     e0e:	18 f0       	brcs	.+6      	; 0xe16 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x18>
     e10:	0e 94 fe 19 	call	0x33fc	; 0x33fc <getHoursLT()>
     e14:	48 2f       	mov	r20, r24
  const uint8_t *ss = (uint8_t *)(EE_STATS_START_ADDR(statsSet));
     e16:	88 e1       	ldi	r24, 0x18	; 24
     e18:	18 9f       	mul	r17, r24
     e1a:	b0 01       	movw	r22, r0
     e1c:	11 24       	eor	r1, r1
     e1e:	9b 01       	movw	r18, r22
     e20:	20 50       	subi	r18, 0x00	; 0
     e22:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     e24:	f9 99       	sbic	0x1f, 1	; 31
     e26:	fe cf       	rjmp	.-4      	; 0xe24 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x26>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     e28:	c9 01       	movw	r24, r18
     e2a:	84 0f       	add	r24, r20
     e2c:	91 1d       	adc	r25, r1
     e2e:	92 bd       	out	0x22, r25	; 34
     e30:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     e32:	f8 9a       	sbi	0x1f, 0	; 31
     e34:	40 b5       	in	r20, 0x20	; 32
  const uint8_t sample = eeprom_read_byte(ss + hh);
  if(STATS_UNSET_INT == sample) { return(false); }
  if(inTop) { return(inTopQuartile(ss, sample)); }
     e36:	00 23       	and	r16, r16
     e38:	21 f4       	brne	.+8      	; 0xe42 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x44>
     e3a:	90 e0       	ldi	r25, 0x00	; 0
//   * s is start of (24) sample set in EEPROM
//   * sample to be tested for being in lower quartile
bool inBottomQuartile(const uint8_t *sE, const uint8_t sample)
  {
  uint8_t valuesHigher = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
     e3c:	68 5e       	subi	r22, 0xE8	; 232
     e3e:	7e 4f       	sbci	r23, 0xFE	; 254
     e40:	22 c0       	rjmp	.+68     	; 0xe86 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x88>
  if(statsSet >= EE_STATS_SETS) { return(false); } // Bad stats set number, ie unsafe.
  const uint8_t hh = (hour > 23) ? getHoursLT() : hour;
  const uint8_t *ss = (uint8_t *)(EE_STATS_START_ADDR(statsSet));
  const uint8_t sample = eeprom_read_byte(ss + hh);
  if(STATS_UNSET_INT == sample) { return(false); }
  if(inTop) { return(inTopQuartile(ss, sample)); }
     e42:	90 e0       	ldi	r25, 0x00	; 0
//   * s is start of (24) sample set in EEPROM
//   * sample to be tested for being in lower quartile
bool inTopQuartile(const uint8_t *sE, const uint8_t sample)
  {
  uint8_t valuesLower = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
     e44:	68 5e       	subi	r22, 0xE8	; 232
     e46:	7e 4f       	sbci	r23, 0xFE	; 254
     e48:	0d c0       	rjmp	.+26     	; 0xe64 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x66>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     e4a:	f9 99       	sbic	0x1f, 1	; 31
     e4c:	fe cf       	rjmp	.-4      	; 0xe4a <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x4c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     e4e:	32 bd       	out	0x22, r19	; 34
     e50:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     e52:	f8 9a       	sbi	0x1f, 0	; 31
     e54:	80 b5       	in	r24, 0x20	; 32
    {
    const uint8_t v = eeprom_read_byte(sE); 
    if(STATS_UNSET_INT == v) { return(false); } // Abort if not a full set of stats (eg at least one full day's worth). 
    if(v < sample) { if(++valuesLower >= 18) { return(true); } } // Stop as soon as known to be in upper quartile.
     e56:	84 17       	cp	r24, r20
     e58:	18 f4       	brcc	.+6      	; 0xe60 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x62>
     e5a:	9f 5f       	subi	r25, 0xFF	; 255
     e5c:	92 31       	cpi	r25, 0x12	; 18
     e5e:	c0 f4       	brcc	.+48     	; 0xe90 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x92>
//   * s is start of (24) sample set in EEPROM
//   * sample to be tested for being in lower quartile
bool inTopQuartile(const uint8_t *sE, const uint8_t sample)
  {
  uint8_t valuesLower = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
     e60:	2f 5f       	subi	r18, 0xFF	; 255
     e62:	3f 4f       	sbci	r19, 0xFF	; 255
     e64:	26 17       	cp	r18, r22
     e66:	37 07       	cpc	r19, r23
     e68:	81 f7       	brne	.-32     	; 0xe4a <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x4c>
     e6a:	10 c0       	rjmp	.+32     	; 0xe8c <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x8e>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     e6c:	f9 99       	sbic	0x1f, 1	; 31
     e6e:	fe cf       	rjmp	.-4      	; 0xe6c <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x6e>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     e70:	32 bd       	out	0x22, r19	; 34
     e72:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     e74:	f8 9a       	sbi	0x1f, 0	; 31
     e76:	80 b5       	in	r24, 0x20	; 32
  uint8_t valuesHigher = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
    {
    const uint8_t v = eeprom_read_byte(sE); 
    if(STATS_UNSET_INT == v) { return(false); } // Abort if not a full set of stats (eg at least one full day's worth). 
    if(v > sample) { if(++valuesHigher >= 18) { return(true); } } // Stop as soon as known to be in lower quartile.
     e78:	48 17       	cp	r20, r24
     e7a:	18 f4       	brcc	.+6      	; 0xe82 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x84>
     e7c:	9f 5f       	subi	r25, 0xFF	; 255
     e7e:	92 31       	cpi	r25, 0x12	; 18
     e80:	38 f4       	brcc	.+14     	; 0xe90 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x92>
//   * s is start of (24) sample set in EEPROM
//   * sample to be tested for being in lower quartile
bool inBottomQuartile(const uint8_t *sE, const uint8_t sample)
  {
  uint8_t valuesHigher = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
     e82:	2f 5f       	subi	r18, 0xFF	; 255
     e84:	3f 4f       	sbci	r19, 0xFF	; 255
     e86:	26 17       	cp	r18, r22
     e88:	37 07       	cpc	r19, r23
     e8a:	81 f7       	brne	.-32     	; 0xe6c <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x6e>
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	01 c0       	rjmp	.+2      	; 0xe92 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x94>
     e90:	81 e0       	ldi	r24, 0x01	; 1
  const uint8_t *ss = (uint8_t *)(EE_STATS_START_ADDR(statsSet));
  const uint8_t sample = eeprom_read_byte(ss + hh);
  if(STATS_UNSET_INT == sample) { return(false); }
  if(inTop) { return(inTopQuartile(ss, sample)); }
  return(inBottomQuartile(ss, sample));
  }
     e92:	1f 91       	pop	r17
     e94:	0f 91       	pop	r16
     e96:	08 95       	ret

00000e98 <ModelledRadValve::computeTargetTemp()>:
// Will be called by computeCallForHeat().
// One aim is to allow reasonable energy savings (10--30%)
// even if the device is left in WARM mode all the time,
// using occupancy/light/etc to determine when temperature can be set back
// without annoying users.
uint8_t ModelledRadValve::computeTargetTemp()
     e98:	ef 92       	push	r14
     e9a:	ff 92       	push	r15
     e9c:	0f 93       	push	r16
     e9e:	1f 93       	push	r17
  {
  // In FROST mode.
  if(!inWarmMode())
     ea0:	80 91 4b 02 	lds	r24, 0x024B
     ea4:	88 23       	and	r24, r24
     ea6:	81 f5       	brne	.+96     	; 0xf08 <ModelledRadValve::computeTargetTemp()+0x70>
    {
    const uint8_t frostC = getFROSTTargetC();
     ea8:	0e 94 97 03 	call	0x72e	; 0x72e <getFROSTTargetC()>
     eac:	08 2f       	mov	r16, r24
    // At other times more relaxed checking (eg lower power) can be used.
    bool increaseCheckForOccupancy() { return(!isLikelyRecentlyOccupied() && isLikelyOccupied() && !reportedRecently()); }

    // Get number of hours room vacant, zero when room occupied; does not wrap.
    // If forced to zero as soon as occupancy is detected.
    uint16_t getVacancyH() { return((value != 0) ? 0 : vacancyH); }
     eae:	80 91 18 02 	lds	r24, 0x0218
     eb2:	88 23       	and	r24, r24
     eb4:	29 f4       	brne	.+10     	; 0xec0 <ModelledRadValve::computeTargetTemp()+0x28>
    // to give room a chance to hit the target, and for furniture and surfaces to be warm, etc.
    // Don't do this if the room has been vacant for a long time (eg so as to avoid pre-warm being higher than WARM ever).
    // HINT OF SMARTNESS/ANTICIPATION HERE...
    // Only do this if the target WARM temperature is not an 'eco' temperature (ie near the bottom of the scale)
    // unless the current hour seems to be in the top quartile of occupancy.
    if(!Occupancy.longVacant() && isAnyScheduleOnWARMSoon())
     eb6:	80 91 1b 02 	lds	r24, 0x021B
     eba:	89 31       	cpi	r24, 0x19	; 25
     ebc:	08 f0       	brcs	.+2      	; 0xec0 <ModelledRadValve::computeTargetTemp()+0x28>
     ebe:	87 c0       	rjmp	.+270    	; 0xfce <ModelledRadValve::computeTargetTemp()+0x136>
     ec0:	0e 94 2a 1b 	call	0x3654	; 0x3654 <isAnyScheduleOnWARMSoon()>
     ec4:	88 23       	and	r24, r24
     ec6:	09 f4       	brne	.+2      	; 0xeca <ModelledRadValve::computeTargetTemp()+0x32>
     ec8:	82 c0       	rjmp	.+260    	; 0xfce <ModelledRadValve::computeTargetTemp()+0x136>
      {
      const uint8_t warmTarget = getWARMTargetC();
     eca:	0e 94 5e 03 	call	0x6bc	; 0x6bc <getWARMTargetC()>
     ece:	f8 2e       	mov	r15, r24
      // Compute putative pre-warm temperature...
      const uint8_t preWarmTempC = fnmax((uint8_t)(warmTarget - (hasEcoBias() ? SETBACK_ECO : SETBACK_DEFAULT)), frostC);
     ed0:	0e 94 8f 03 	call	0x71e	; 0x71e <hasEcoBias()>
     ed4:	88 23       	and	r24, r24
     ed6:	11 f4       	brne	.+4      	; 0xedc <ModelledRadValve::computeTargetTemp()+0x44>
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	01 c0       	rjmp	.+2      	; 0xede <ModelledRadValve::computeTargetTemp()+0x46>
     edc:	82 e0       	ldi	r24, 0x02	; 2
     ede:	1f 2d       	mov	r17, r15
     ee0:	18 1b       	sub	r17, r24
     ee2:	10 17       	cp	r17, r16
     ee4:	08 f4       	brcc	.+2      	; 0xee8 <ModelledRadValve::computeTargetTemp()+0x50>
     ee6:	73 c0       	rjmp	.+230    	; 0xfce <ModelledRadValve::computeTargetTemp()+0x136>
      if((frostC < preWarmTempC) &&
     ee8:	01 17       	cp	r16, r17
     eea:	08 f0       	brcs	.+2      	; 0xeee <ModelledRadValve::computeTargetTemp()+0x56>
     eec:	70 c0       	rjmp	.+224    	; 0xfce <ModelledRadValve::computeTargetTemp()+0x136>
     eee:	81 e1       	ldi	r24, 0x11	; 17
     ef0:	8f 15       	cp	r24, r15
     ef2:	08 f4       	brcc	.+2      	; 0xef6 <ModelledRadValve::computeTargetTemp()+0x5e>
     ef4:	6f c0       	rjmp	.+222    	; 0xfd4 <ModelledRadValve::computeTargetTemp()+0x13c>
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	65 e0       	ldi	r22, 0x05	; 5
     efa:	4f ef       	ldi	r20, 0xFF	; 255
     efc:	0e 94 ff 06 	call	0xdfe	; 0xdfe <inOutlierQuartile(unsigned char, unsigned char, unsigned char)>
     f00:	88 23       	and	r24, r24
     f02:	09 f0       	breq	.+2      	; 0xf06 <ModelledRadValve::computeTargetTemp()+0x6e>
     f04:	67 c0       	rjmp	.+206    	; 0xfd4 <ModelledRadValve::computeTargetTemp()+0x13c>
     f06:	63 c0       	rjmp	.+198    	; 0xfce <ModelledRadValve::computeTargetTemp()+0x136>

#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
     f08:	80 91 46 02 	lds	r24, 0x0246
     f0c:	88 23       	and	r24, r24
     f0e:	09 f4       	brne	.+2      	; 0xf12 <ModelledRadValve::computeTargetTemp()+0x7a>
     f10:	67 c0       	rjmp	.+206    	; 0xfe0 <ModelledRadValve::computeTargetTemp()+0x148>
    }

#ifdef SUPPORT_BAKE
  else if(inBakeMode()) // If in BAKE mode then use elevated target.
    {
    return(fnmin((uint8_t)(getWARMTargetC() + BAKE_UPLIFT), (uint8_t)MAX_TARGET_C)); // No setbacks apply in BAKE mode.
     f12:	0e 94 5e 03 	call	0x6bc	; 0x6bc <getWARMTargetC()>
     f16:	18 2f       	mov	r17, r24
     f18:	1b 5f       	subi	r17, 0xFB	; 251
     f1a:	10 36       	cpi	r17, 0x60	; 96
     f1c:	08 f4       	brcc	.+2      	; 0xf20 <ModelledRadValve::computeTargetTemp()+0x88>
     f1e:	5a c0       	rjmp	.+180    	; 0xfd4 <ModelledRadValve::computeTargetTemp()+0x13c>
     f20:	1f e5       	ldi	r17, 0x5F	; 95
     f22:	58 c0       	rjmp	.+176    	; 0xfd4 <ModelledRadValve::computeTargetTemp()+0x13c>
     f24:	80 91 1b 02 	lds	r24, 0x021B
     f28:	90 e0       	ldi	r25, 0x00	; 0
    bool longVacant() { return(getVacancyH() > longVacantHThrH); }

    // Returns true if room appears to have been vacant for much longer than longVacant().
    // For a home or an office no sign of activity for this long suggests a long weekend or a holiday for example.
    // Longer than longVacant() but much less than 3 days to try to capture some weekend-absence savings.
    bool longLongVacant() { return(getVacancyH() > longLongVacantHThrH); }
     f2a:	ff 24       	eor	r15, r15
     f2c:	88 97       	sbiw	r24, 0x28	; 40
     f2e:	28 f0       	brcs	.+10     	; 0xf3a <ModelledRadValve::computeTargetTemp()+0xa2>
     f30:	ff 24       	eor	r15, r15
     f32:	f3 94       	inc	r15
    // Note that this mainly has to work in domestic settings in winter (with ~8h of daylight)
    // but should also work in artificially-lit offices (maybe ~12h continuous lighting).
    // No 'lights-on' signal for a whole day may be a fairly strong indication that the heat can be turned down!
    // TODO: consider bottom quartile of amblient light as alternative setback trigger for near-continuously-lit spaces (aiming to spot daylight signature).
    const bool longLongVacant = Occupancy.longLongVacant();
    const bool longVacant = longLongVacant || Occupancy.longVacant();
     f34:	11 e0       	ldi	r17, 0x01	; 1
     f36:	01 e0       	ldi	r16, 0x01	; 1
     f38:	25 c0       	rjmp	.+74     	; 0xf84 <ModelledRadValve::computeTargetTemp()+0xec>
    // At other times more relaxed checking (eg lower power) can be used.
    bool increaseCheckForOccupancy() { return(!isLikelyRecentlyOccupied() && isLikelyOccupied() && !reportedRecently()); }

    // Get number of hours room vacant, zero when room occupied; does not wrap.
    // If forced to zero as soon as occupancy is detected.
    uint16_t getVacancyH() { return((value != 0) ? 0 : vacancyH); }
     f3a:	80 91 18 02 	lds	r24, 0x0218
     f3e:	88 23       	and	r24, r24
     f40:	11 f0       	breq	.+4      	; 0xf46 <ModelledRadValve::computeTargetTemp()+0xae>
     f42:	00 e0       	ldi	r16, 0x00	; 0
     f44:	06 c0       	rjmp	.+12     	; 0xf52 <ModelledRadValve::computeTargetTemp()+0xba>
     f46:	00 e0       	ldi	r16, 0x00	; 0
     f48:	80 91 1b 02 	lds	r24, 0x021B
     f4c:	89 31       	cpi	r24, 0x19	; 25
     f4e:	08 f0       	brcs	.+2      	; 0xf52 <ModelledRadValve::computeTargetTemp()+0xba>
     f50:	01 e0       	ldi	r16, 0x01	; 1

    // Returns true if the room appears to be likely occupied (with active users) now.
    // Operates on a timeout; calling markAsOccupied() restarts the timer.
    // Defaults to false (and API still exists) when OCCUPANCY_SUPPORT not defined.
    // Thread-safe.
    bool isLikelyOccupied() { return(0 != occupationCountdownM); }
     f52:	80 91 19 02 	lds	r24, 0x0219
    const bool notLikelyOccupiedSoon = longLongVacant || (Occupancy.isLikelyUnoccupied() && inOutlierQuartile(false, EE_STATS_SET_OCCPC_BY_HOUR_SMOOTHED));
     f56:	88 23       	and	r24, r24
     f58:	41 f4       	brne	.+16     	; 0xf6a <ModelledRadValve::computeTargetTemp()+0xd2>
     f5a:	65 e0       	ldi	r22, 0x05	; 5
     f5c:	4f ef       	ldi	r20, 0xFF	; 255
     f5e:	0e 94 ff 06 	call	0xdfe	; 0xdfe <inOutlierQuartile(unsigned char, unsigned char, unsigned char)>
     f62:	88 23       	and	r24, r24
     f64:	11 f0       	breq	.+4      	; 0xf6a <ModelledRadValve::computeTargetTemp()+0xd2>
     f66:	11 e0       	ldi	r17, 0x01	; 1
     f68:	01 c0       	rjmp	.+2      	; 0xf6c <ModelledRadValve::computeTargetTemp()+0xd4>
     f6a:	10 e0       	ldi	r17, 0x00	; 0
    if(longVacant ||
     f6c:	00 23       	and	r16, r16
     f6e:	51 f4       	brne	.+20     	; 0xf84 <ModelledRadValve::computeTargetTemp()+0xec>
    bool isRoomLit() const { return(isRoomLitFlag); }

    // Returns true if room is light enough for someone to be active.
    // False if unknown.
    // Thread-safe and usable within ISRs (Interrupt Service Routines).
    bool isRoomDark() const { return(!isRoomLitFlag); }
     f70:	80 91 f0 02 	lds	r24, 0x02F0
     f74:	88 23       	and	r24, r24
     f76:	11 f0       	breq	.+4      	; 0xf7c <ModelledRadValve::computeTargetTemp()+0xe4>
     f78:	11 23       	and	r17, r17
     f7a:	59 f1       	breq	.+86     	; 0xfd2 <ModelledRadValve::computeTargetTemp()+0x13a>
     f7c:	0e 94 76 1b 	call	0x36ec	; 0x36ec <isAnyScheduleOnWARMNow()>
     f80:	88 23       	and	r24, r24
     f82:	39 f5       	brne	.+78     	; 0xfd2 <ModelledRadValve::computeTargetTemp()+0x13a>
                               Occupancy.isLikelyOccupied() ||
                               (!longLongVacant && AmbLight.isRoomLit()) ||
                               (!longVacant && isAnyScheduleOnWARMSoon())) ?
              SETBACK_DEFAULT :
          ((longLongVacant || notLikelyOccupiedSoon) ?
              SETBACK_FULL : SETBACK_ECO);
     f84:	0e 94 8f 03 	call	0x71e	; 0x71e <hasEcoBias()>
     f88:	88 23       	and	r24, r24
     f8a:	b1 f0       	breq	.+44     	; 0xfb8 <ModelledRadValve::computeTargetTemp()+0x120>
     f8c:	80 91 19 02 	lds	r24, 0x0219
     f90:	88 23       	and	r24, r24
     f92:	91 f4       	brne	.+36     	; 0xfb8 <ModelledRadValve::computeTargetTemp()+0x120>
     f94:	ff 20       	and	r15, r15
     f96:	21 f4       	brne	.+8      	; 0xfa0 <ModelledRadValve::computeTargetTemp()+0x108>
    uint16_t getRaw() { return(rawValue); }

    // Returns true if room is lit enough for someone to be active.
    // False if unknown.
    // Thread-safe and usable within ISRs (Interrupt Service Routines).
    bool isRoomLit() const { return(isRoomLitFlag); }
     f98:	80 91 f0 02 	lds	r24, 0x02F0
     f9c:	88 23       	and	r24, r24
     f9e:	61 f4       	brne	.+24     	; 0xfb8 <ModelledRadValve::computeTargetTemp()+0x120>
     fa0:	00 23       	and	r16, r16
     fa2:	21 f4       	brne	.+8      	; 0xfac <ModelledRadValve::computeTargetTemp()+0x114>
     fa4:	0e 94 2a 1b 	call	0x3654	; 0x3654 <isAnyScheduleOnWARMSoon()>
     fa8:	88 23       	and	r24, r24
     faa:	31 f4       	brne	.+12     	; 0xfb8 <ModelledRadValve::computeTargetTemp()+0x120>
     fac:	ff 20       	and	r15, r15
     fae:	31 f4       	brne	.+12     	; 0xfbc <ModelledRadValve::computeTargetTemp()+0x124>
     fb0:	11 23       	and	r17, r17
     fb2:	21 f4       	brne	.+8      	; 0xfbc <ModelledRadValve::computeTargetTemp()+0x124>
     fb4:	12 e0       	ldi	r17, 0x02	; 2
     fb6:	03 c0       	rjmp	.+6      	; 0xfbe <ModelledRadValve::computeTargetTemp()+0x126>
     fb8:	11 e0       	ldi	r17, 0x01	; 1
     fba:	01 c0       	rjmp	.+2      	; 0xfbe <ModelledRadValve::computeTargetTemp()+0x126>
     fbc:	13 e0       	ldi	r17, 0x03	; 3

      return(fnmax((uint8_t)(wt - setback), getFROSTTargetC())); // Target must never be set low enough to create a frost/freeze hazard.
     fbe:	0e 94 97 03 	call	0x72e	; 0x72e <getFROSTTargetC()>
     fc2:	e1 1a       	sub	r14, r17
     fc4:	1e 2d       	mov	r17, r14
     fc6:	e8 16       	cp	r14, r24
     fc8:	28 f4       	brcc	.+10     	; 0xfd4 <ModelledRadValve::computeTargetTemp()+0x13c>
     fca:	18 2f       	mov	r17, r24
     fcc:	03 c0       	rjmp	.+6      	; 0xfd4 <ModelledRadValve::computeTargetTemp()+0x13c>
     fce:	10 2f       	mov	r17, r16
     fd0:	01 c0       	rjmp	.+2      	; 0xfd4 <ModelledRadValve::computeTargetTemp()+0x13c>
     fd2:	1e 2d       	mov	r17, r14
      }
    // Else use WARM target as-is.
    return(wt);
    }
  }
     fd4:	81 2f       	mov	r24, r17
     fd6:	1f 91       	pop	r17
     fd8:	0f 91       	pop	r16
     fda:	ff 90       	pop	r15
     fdc:	ef 90       	pop	r14
     fde:	08 95       	ret
    }
#endif

  else // In 'WARM' mode with possible setback.
    {
    const uint8_t wt = getWARMTargetC();
     fe0:	0e 94 5e 03 	call	0x6bc	; 0x6bc <getWARMTargetC()>
     fe4:	e8 2e       	mov	r14, r24
    // At other times more relaxed checking (eg lower power) can be used.
    bool increaseCheckForOccupancy() { return(!isLikelyRecentlyOccupied() && isLikelyOccupied() && !reportedRecently()); }

    // Get number of hours room vacant, zero when room occupied; does not wrap.
    // If forced to zero as soon as occupancy is detected.
    uint16_t getVacancyH() { return((value != 0) ? 0 : vacancyH); }
     fe6:	80 91 18 02 	lds	r24, 0x0218
     fea:	88 23       	and	r24, r24
     fec:	09 f4       	brne	.+2      	; 0xff0 <ModelledRadValve::computeTargetTemp()+0x158>
     fee:	9a cf       	rjmp	.-204    	; 0xf24 <ModelledRadValve::computeTargetTemp()+0x8c>
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	9a cf       	rjmp	.-204    	; 0xf2a <ModelledRadValve::computeTargetTemp()+0x92>

00000ff6 <ModelledRadValve::computeTargetTemperature()>:
  // Remain as was...
  return(inputState.currentPCOpen);
  }

// Compute/update target temperature and set up state for computeRequiredTRVPercentOpen().
void ModelledRadValve::computeTargetTemperature()
     ff6:	0f 93       	push	r16
     ff8:	1f 93       	push	r17
     ffa:	cf 93       	push	r28
     ffc:	df 93       	push	r29
     ffe:	ec 01       	movw	r28, r24
  {
  // Compute target temperature.
  const uint8_t newTarget = computeTargetTemp();
    1000:	0e 94 4c 07 	call	0xe98	; 0xe98 <ModelledRadValve::computeTargetTemp()>
    1004:	08 2f       	mov	r16, r24

  // Set up state for computeRequiredTRVPercentOpen().
  inputState.targetTempC = newTarget;
    1006:	8b 83       	std	Y+3, r24	; 0x03
  inputState.minPCOpen = getMinPercentOpen();
    1008:	e8 81       	ld	r30, Y
    100a:	f9 81       	ldd	r31, Y+1	; 0x01
    100c:	00 8c       	ldd	r0, Z+24	; 0x18
    100e:	f1 8d       	ldd	r31, Z+25	; 0x19
    1010:	e0 2d       	mov	r30, r0
    1012:	ce 01       	movw	r24, r28
    1014:	09 95       	icall
    1016:	8c 83       	std	Y+4, r24	; 0x04
  inputState.maxPCOpen = getMaxPercentageOpenAllowed();
    1018:	84 e6       	ldi	r24, 0x64	; 100
    101a:	8d 83       	std	Y+5, r24	; 0x05
  inputState.currentPCOpen = value;
    101c:	8a 81       	ldd	r24, Y+2	; 0x02
    101e:	8d 87       	std	Y+13, r24	; 0x0d
  inputState.glacial = glacial;
    1020:	8d a1       	ldd	r24, Y+37	; 0x25
    1022:	8f 83       	std	Y+7, r24	; 0x07

#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
    1024:	10 91 4b 02 	lds	r17, 0x024B
    1028:	11 23       	and	r17, r17
    102a:	11 f4       	brne	.+4      	; 0x1030 <ModelledRadValve::computeTargetTemperature()+0x3a>
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	04 c0       	rjmp	.+8      	; 0x1038 <ModelledRadValve::computeTargetTemperature()+0x42>
    1030:	80 91 46 02 	lds	r24, 0x0246
    1034:	81 11       	cpse	r24, r1
    1036:	81 e0       	ldi	r24, 0x01	; 1
  inputState.targetTempC = newTarget;
  inputState.minPCOpen = getMinPercentOpen();
  inputState.maxPCOpen = getMaxPercentageOpenAllowed();
  inputState.currentPCOpen = value;
  inputState.glacial = glacial;
  inputState.inBakeMode = inBakeMode();
    1038:	89 87       	std	Y+9, r24	; 0x09
  inputState.hasEcoBias = hasEcoBias();
    103a:	0e 94 8f 03 	call	0x71e	; 0x71e <hasEcoBias()>
    103e:	88 87       	std	Y+8, r24	; 0x08

    // Returns true if room is light enough for someone to be active.
    // False if unknown.
    // Thread-safe and usable within ISRs (Interrupt Service Routines).
    bool isRoomDark() const { return(!isRoomLitFlag); }
    1040:	80 91 f0 02 	lds	r24, 0x02F0
  // Widen the allowed deadband significantly in a dark/quiet/vacant room
  // (or in FROST mode, or if temperature is jittery ie filtering has been engaged)
  // to attempt to reduce the total number and size of adjustments and thus reduce noise (and battery drain).
  // The wider deadband (less good temperature regulation) might be noticeable/annoying to sensitive occupants.
  // FIXME: With a wider deadband also simply suppress any movement/noise on some/most minutes while close to target temperature.
  inputState.widenDeadband = AmbLight.isRoomDark() || Occupancy.longVacant() || (!inWarmMode()) || retainedState.isFiltering;
    1044:	88 23       	and	r24, r24
    1046:	61 f0       	breq	.+24     	; 0x1060 <ModelledRadValve::computeTargetTemperature()+0x6a>
    1048:	80 91 18 02 	lds	r24, 0x0218
    104c:	88 23       	and	r24, r24
    104e:	21 f4       	brne	.+8      	; 0x1058 <ModelledRadValve::computeTargetTemperature()+0x62>
    1050:	80 91 1b 02 	lds	r24, 0x021B
    1054:	89 31       	cpi	r24, 0x19	; 25
    1056:	20 f4       	brcc	.+8      	; 0x1060 <ModelledRadValve::computeTargetTemperature()+0x6a>
    1058:	11 23       	and	r17, r17
    105a:	11 f0       	breq	.+4      	; 0x1060 <ModelledRadValve::computeTargetTemperature()+0x6a>
    105c:	8f 85       	ldd	r24, Y+15	; 0x0f
    105e:	01 c0       	rjmp	.+2      	; 0x1062 <ModelledRadValve::computeTargetTemperature()+0x6c>
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	8e 83       	std	Y+6, r24	; 0x06
// ie to the middle of the specified degree, which is more intuitive,
// and which may save a little energy if users target the specified temperatures.
// Suggestion c/o GG ~2014/10 code, and generally less misleading anyway!
void ModelledRadValveInputState::setReferenceTemperatures(const int currentTempC16)
  {
  const int referenceTempC16 = currentTempC16 + refTempOffsetC16; // TODO-386: push targeted temperature down by 0.5C to middle of degree.
    1064:	80 91 f7 02 	lds	r24, 0x02F7
    1068:	90 91 f8 02 	lds	r25, 0x02F8
    106c:	08 96       	adiw	r24, 0x08	; 8
  refTempC16 = referenceTempC16;
    106e:	9c 87       	std	Y+12, r25	; 0x0c
    1070:	8b 87       	std	Y+11, r24	; 0x0b
  refTempC = referenceTempC16 >> 4;
    1072:	14 e0       	ldi	r17, 0x04	; 4
    1074:	95 95       	asr	r25
    1076:	87 95       	ror	r24
    1078:	1a 95       	dec	r17
    107a:	e1 f7       	brne	.-8      	; 0x1074 <ModelledRadValve::computeTargetTemperature()+0x7e>
    107c:	8a 87       	std	Y+10, r24	; 0x0a
  // FIXME: With a wider deadband also simply suppress any movement/noise on some/most minutes while close to target temperature.
  inputState.widenDeadband = AmbLight.isRoomDark() || Occupancy.longVacant() || (!inWarmMode()) || retainedState.isFiltering;
  // Capture adjusted reference/room temperatures
  // and set callingForHeat flag also using same outline logic as computeRequiredTRVPercentOpen() will use.
  inputState.setReferenceTemperatures(TemperatureC16.get());
  callingForHeat = (newTarget >= inputState.refTempC);
    107e:	40 e0       	ldi	r20, 0x00	; 0
    1080:	20 2f       	mov	r18, r16
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	99 27       	eor	r25, r25
    1086:	87 fd       	sbrc	r24, 7
    1088:	90 95       	com	r25
    108a:	28 17       	cp	r18, r24
    108c:	39 07       	cpc	r19, r25
    108e:	0c f0       	brlt	.+2      	; 0x1092 <ModelledRadValve::computeTargetTemperature()+0x9c>
    1090:	41 e0       	ldi	r20, 0x01	; 1
    1092:	4b a3       	std	Y+35, r20	; 0x23
  }
    1094:	df 91       	pop	r29
    1096:	cf 91       	pop	r28
    1098:	1f 91       	pop	r17
    109a:	0f 91       	pop	r16
    109c:	08 95       	ret

0000109e <ModelledRadValve::computeCallForHeat()>:
// The inputs must be valid (and recent).
// Values set are targetTempC, value (TRVPercentOpen).
// This may also prepare data such as TX command sequences for the TRV, boiler, etc.
// This routine may take significant CPU time; no I/O is done, only internal state is updated.
// Returns true if valve target changed and thus messages may need to be recomputed/sent/etc.
void ModelledRadValve::computeCallForHeat()
    109e:	cf 93       	push	r28
    10a0:	df 93       	push	r29
    10a2:	ec 01       	movw	r28, r24
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    10a4:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    10a6:	f8 94       	cli
    {
#ifdef SUPPORT_BAKE
    // Cancel any BAKE mode once temperature target has been hit.
    if(!callingForHeat) { bakeCountdownM = 0; }
    10a8:	8b a1       	ldd	r24, Y+35	; 0x23
    10aa:	88 23       	and	r24, r24
    10ac:	19 f4       	brne	.+6      	; 0x10b4 <ModelledRadValve::computeCallForHeat()+0x16>
    10ae:	10 92 46 02 	sts	0x0246, r1
    10b2:	07 c0       	rjmp	.+14     	; 0x10c2 <ModelledRadValve::computeCallForHeat()+0x24>
    // Run down BAKE mode timer if need be, one tick per minute.
    else if(bakeCountdownM > 0) { --bakeCountdownM; }
    10b4:	80 91 46 02 	lds	r24, 0x0246
    10b8:	88 23       	and	r24, r24
    10ba:	19 f0       	breq	.+6      	; 0x10c2 <ModelledRadValve::computeCallForHeat()+0x24>
    10bc:	81 50       	subi	r24, 0x01	; 1
    10be:	80 93 46 02 	sts	0x0246, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    10c2:	9f bf       	out	0x3f, r25	; 63
#endif
    }

  // Compute target and ensure that required input state is set for computeRequiredTRVPercentOpen().
  computeTargetTemperature();
    10c4:	ce 01       	movw	r24, r28
    10c6:	0e 94 fb 07 	call	0xff6	; 0xff6 <ModelledRadValve::computeTargetTemperature()>
  const uint8_t newValvePC = computeRequiredTRVPercentOpen(inputState, retainedState);
    10ca:	be 01       	movw	r22, r28
    10cc:	62 5f       	subi	r22, 0xF2	; 242
    10ce:	7f 4f       	sbci	r23, 0xFF	; 255
    10d0:	ce 01       	movw	r24, r28
    10d2:	03 96       	adiw	r24, 0x03	; 3
    10d4:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)>
    10d8:	98 2f       	mov	r25, r24
  const bool changed = (newValvePC != value);
    10da:	8a 81       	ldd	r24, Y+2	; 0x02
    10dc:	20 e0       	ldi	r18, 0x00	; 0
    10de:	98 17       	cp	r25, r24
    10e0:	51 f0       	breq	.+20     	; 0x10f6 <ModelledRadValve::computeCallForHeat()+0x58>
    10e2:	21 e0       	ldi	r18, 0x01	; 1
  if(changed)
    {
    if(newValvePC > value)
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	89 17       	cp	r24, r25
    10e8:	18 f4       	brcc	.+6      	; 0x10f0 <ModelledRadValve::computeCallForHeat()+0x52>
  // causing measured temperatures to veer up and down.
  // This attempts to reduce excessive valve noise and energy use
  // and help to avoid boiler short-cycling.
  uint8_t valveTurnupCountdownM;
  // Mark flow as having been increased.
  void valveTurnup() { valveTurnupCountdownM = ANTISEEK_VALVE_RECLOSE_DELAY_M; }
    10ea:	83 e0       	ldi	r24, 0x03	; 3
    10ec:	89 8b       	std	Y+17, r24	; 0x11
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <ModelledRadValve::computeCallForHeat()+0x56>
  // causing measured temperatures to veer up and down.
  // This attempts to reduce excessive valve noise and energy use
  // and help to avoid boiler short-cycling.
  uint8_t valveTurndownCountdownM;
  // Mark flow as having been reduced.
  void valveTurndown() { valveTurndownCountdownM = ANTISEEK_VALVE_REOPEN_DELAY_M; }
    10f0:	89 e0       	ldi	r24, 0x09	; 9
    10f2:	88 8b       	std	Y+16, r24	; 0x10
    else
      {
      // Defer opening valve to avoid excessive hunting.
      retainedState.valveTurndown();
      }
    value = newValvePC;
    10f4:	9a 83       	std	Y+2, r25	; 0x02
    }
  valveMoved = changed;
    10f6:	2c a3       	std	Y+36, r18	; 0x24
  }
    10f8:	df 91       	pop	r29
    10fa:	cf 91       	pop	r28
    10fc:	08 95       	ret

000010fe <ModelledRadValve::read()>:

    // Force a read/poll/recomputation of the target position and call for heat.
    // Sets/clears changed flag if computed valve position changed.
    // Call at a fixed rate (1/60s).
    // Potentially expensive/slow.
    virtual uint8_t read() { computeCallForHeat(); return(value); }
    10fe:	0f 93       	push	r16
    1100:	1f 93       	push	r17
    1102:	8c 01       	movw	r16, r24
    1104:	0e 94 4f 08 	call	0x109e	; 0x109e <ModelledRadValve::computeCallForHeat()>
    1108:	f8 01       	movw	r30, r16
    110a:	82 81       	ldd	r24, Z+2	; 0x02
    110c:	1f 91       	pop	r17
    110e:	0f 91       	pop	r16
    1110:	08 95       	ret

00001112 <ModelledRadValve::isRecalibrating() const>:
// The target valve position is not lost while this is true.
// By default there is no recalibration step.
bool ModelledRadValve::isRecalibrating() const
  {
#ifdef USE_MODULE_FHT8VSIMPLE
  if(!isSyncedWithFHT8V()) { return(true); }
    1112:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <isSyncedWithFHT8V()>
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	88 23       	and	r24, r24
    111a:	09 f4       	brne	.+2      	; 0x111e <ModelledRadValve::isRecalibrating() const+0xc>
    111c:	91 e0       	ldi	r25, 0x01	; 1
#endif
  return(false);
  }
    111e:	89 2f       	mov	r24, r25
    1120:	08 95       	ret

00001122 <ModelledRadValve::isControlledValveReallyOpen() const>:
// True if the controlled physical valve is thought to be at least partially open right now.
// If multiple valves are controlled then is this true only if all are at least partially open.
// Used to help avoid running boiler pump against closed valves.
// The default is to use the check the current computed position
// against the minimum open percentage.
bool ModelledRadValve::isControlledValveReallyOpen() const
    1122:	1f 93       	push	r17
    1124:	cf 93       	push	r28
    1126:	df 93       	push	r29
    1128:	ec 01       	movw	r28, r24
  {
  if(isRecalibrating()) { return(false); }
    112a:	e8 81       	ld	r30, Y
    112c:	f9 81       	ldd	r31, Y+1	; 0x01
    112e:	02 88       	ldd	r0, Z+18	; 0x12
    1130:	f3 89       	ldd	r31, Z+19	; 0x13
    1132:	e0 2d       	mov	r30, r0
    1134:	09 95       	icall
    1136:	88 23       	and	r24, r24
    1138:	89 f4       	brne	.+34     	; 0x115c <ModelledRadValve::isControlledValveReallyOpen() const+0x3a>
#ifdef USE_MODULE_FHT8VSIMPLE
  if(!FHT8VisControlledValveOpen()) { return(false); }
    113a:	0e 94 f7 09 	call	0x13ee	; 0x13ee <FHT8VisControlledValveOpen()>
    113e:	88 23       	and	r24, r24
    1140:	69 f0       	breq	.+26     	; 0x115c <ModelledRadValve::isControlledValveReallyOpen() const+0x3a>
#endif
  return(value >= getMinPercentOpen());
    1142:	1a 81       	ldd	r17, Y+2	; 0x02
    1144:	e8 81       	ld	r30, Y
    1146:	f9 81       	ldd	r31, Y+1	; 0x01
    1148:	00 8c       	ldd	r0, Z+24	; 0x18
    114a:	f1 8d       	ldd	r31, Z+25	; 0x19
    114c:	e0 2d       	mov	r30, r0
    114e:	ce 01       	movw	r24, r28
    1150:	09 95       	icall
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	18 17       	cp	r17, r24
    1156:	18 f0       	brcs	.+6      	; 0x115e <ModelledRadValve::isControlledValveReallyOpen() const+0x3c>
    1158:	91 e0       	ldi	r25, 0x01	; 1
    115a:	01 c0       	rjmp	.+2      	; 0x115e <ModelledRadValve::isControlledValveReallyOpen() const+0x3c>
    115c:	90 e0       	ldi	r25, 0x00	; 0
  }
    115e:	89 2f       	mov	r24, r25
    1160:	df 91       	pop	r29
    1162:	cf 91       	pop	r28
    1164:	1f 91       	pop	r17
    1166:	08 95       	ret

00001168 <eeprom_smart_erase_byte(unsigned char*)>:
// If the target byte is already 0xff then this does nothing at all beyond an initial read.
// This saves a bit of time and power and possibly a little EEPROM cell wear also.
// Without split erase/write this degenerates to a specialised eeprom_update_byte().
// As with the AVR eeprom_XXX_byte() macros, not safe to use outside and within ISRs as-is.
// Returns true iff an erase was performed.
bool eeprom_smart_erase_byte(uint8_t *p)
    1168:	9c 01       	movw	r18, r24
  eeprom_write_byte(p, 0xff); // Set to 0xff.
  return(true); // Performed an erase (and probably a write, too).
#else

  // Wait until EEPROM is idle/ready.
  eeprom_busy_wait();
    116a:	f9 99       	sbic	0x1f, 1	; 31
    116c:	fe cf       	rjmp	.-4      	; 0x116a <eeprom_smart_erase_byte(unsigned char*)+0x2>
  //     if((uint8_t) 0xff == eeprom_read_byte(p)) { return; }
  // but leaves EEAR[L] set up appropriately for any erase or write.
#if E2END <= 0xFF
  EEARL = (uint8_t)p;
#else
  EEAR = (uint16_t)p;
    116e:	32 bd       	out	0x22, r19	; 34
    1170:	21 bd       	out	0x21, r18	; 33
#endif
  // Ignore problems that some AVRs have with EECR and STS instructions (ATmega64 errata).
  EECR = _BV(EERE); // Start EEPROM read operation.
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	8f bb       	out	0x1f, r24	; 31
  const uint8_t oldValue = EEDR; // Get old EEPROM value.
    1176:	80 b5       	in	r24, 0x20	; 32
  if((uint8_t) 0xff != oldValue) // Needs erase...
    1178:	8f 3f       	cpi	r24, 0xFF	; 255
    117a:	11 f4       	brne	.+4      	; 0x1180 <eeprom_smart_erase_byte(unsigned char*)+0x18>
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	08 95       	ret
    {
    ATOMIC_BLOCK (ATOMIC_RESTORESTATE) // Avoid timing problems from interrupts.
    1180:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1182:	f8 94       	cli
      {
      // Erase to 0xff; no write needed.
      EECR = _BV(EEMPE) | _BV(EEPM0); // Set master write-enable bit and erase-only mode.
    1184:	84 e1       	ldi	r24, 0x14	; 20
    1186:	8f bb       	out	0x1f, r24	; 31
      EECR |= _BV(EEPE);  // Start erase-only operation.
    1188:	f9 9a       	sbi	0x1f, 1	; 31
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    118a:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    118c:	81 e0       	ldi	r24, 0x01	; 1
      }
    return(true); // Performed the erase.
    }
  return(false);
#endif
  }
    118e:	08 95       	ret

00001190 <eeprom_smart_clear_bits(unsigned char*, unsigned char)>:
// If ANDing in the mask has no effect then this does nothing at all beyond an initial read.
// This saves a bit of time and power and possibly a little EEPROM cell wear also.
// Without split erase/write this degenerates to a specialised eeprom_smart_update_byte().
// As with the AVR eeprom_XXX_byte() macros, not safe to use outside and within ISRs as-is.
// Returns true iff a write was performed.
bool eeprom_smart_clear_bits(uint8_t *p, uint8_t mask)
    1190:	9c 01       	movw	r18, r24
  eeprom_write_byte(p, newValue); // Set to masked value.
  return(true); // Performed a write (and probably an erase, too).
#else

  // Wait until EEPROM is idle/ready.
  eeprom_busy_wait();
    1192:	f9 99       	sbic	0x1f, 1	; 31
    1194:	fe cf       	rjmp	.-4      	; 0x1192 <eeprom_smart_clear_bits(unsigned char*, unsigned char)+0x2>
  //     oldValue = eeprom_read_byte(p);
  // and leaves EEAR[L] set up appropriately for any erase or write.
#if E2END <= 0xFF
  EEARL = (uint8_t)p;
#else
  EEAR = (uint16_t)p;
    1196:	32 bd       	out	0x22, r19	; 34
    1198:	21 bd       	out	0x21, r18	; 33
#endif
  // Ignore problems that some AVRs have with EECR and STS instructions (ATmega64 errata).
  EECR = _BV(EERE); // Start EEPROM read operation.
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	8f bb       	out	0x1f, r24	; 31
  const uint8_t oldValue = EEDR; // Get old EEPROM value.
    119e:	80 b5       	in	r24, 0x20	; 32
  const uint8_t newValue = oldValue & mask;
    11a0:	68 23       	and	r22, r24
  if(oldValue != newValue) // Write is needed...
    11a2:	86 17       	cp	r24, r22
    11a4:	11 f4       	brne	.+4      	; 0x11aa <eeprom_smart_clear_bits(unsigned char*, unsigned char)+0x1a>
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	08 95       	ret
    {
    // Do the write: no erase is needed.
    EEDR = newValue; // Set EEPROM data register to required new value.
    11aa:	60 bd       	out	0x20, r22	; 32
    ATOMIC_BLOCK (ATOMIC_RESTORESTATE) // Avoid timing problems from interrupts.
    11ac:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    11ae:	f8 94       	cli
      {
      EECR = _BV(EEMPE) | _BV(EEPM1); // Set master write-enable bit and write-only mode.
    11b0:	84 e2       	ldi	r24, 0x24	; 36
    11b2:	8f bb       	out	0x1f, r24	; 31
      EECR |= _BV(EEPE);  // Start write-only operation.
    11b4:	f9 9a       	sbi	0x1f, 1	; 31
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    11b6:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    11b8:	81 e0       	ldi	r24, 0x01	; 1
      }
    return(true); // Performed the write.
    }
  return(false);
#endif
  }
    11ba:	08 95       	ret

000011bc <eeprom_smart_update_byte(unsigned char*, unsigned char)>:
// Updates an EEEPROM byte iff not currently at the specified target value.
// May be able to selectively erase or write (ie reduce wear) to reach the desired value.
// As with the AVR eeprom_XXX_byte() macros, not safe to use outside and within ISRs as-is.
// Returns true iff an erase and/or write was performed.
// TODO: make smarter, eg don't wait/read twice...
bool eeprom_smart_update_byte(uint8_t *p, uint8_t value)
    11bc:	78 2f       	mov	r23, r24
    11be:	e9 2f       	mov	r30, r25
  {
  // If target byte is 0xff then attempt smart erase rather than more generic write or erase+write.
  if((uint8_t) 0xff == value) { return(eeprom_smart_erase_byte(p)); }
    11c0:	6f 3f       	cpi	r22, 0xFF	; 255
    11c2:	19 f4       	brne	.+6      	; 0x11ca <eeprom_smart_update_byte(unsigned char*, unsigned char)+0xe>
    11c4:	0e 94 b4 08 	call	0x1168	; 0x1168 <eeprom_smart_erase_byte(unsigned char*)>
    11c8:	08 95       	ret
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    11ca:	f9 99       	sbic	0x1f, 1	; 31
    11cc:	fe cf       	rjmp	.-4      	; 0x11ca <eeprom_smart_update_byte(unsigned char*, unsigned char)+0xe>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    11ce:	47 2f       	mov	r20, r23
    11d0:	5e 2f       	mov	r21, r30
    11d2:	52 bd       	out	0x22, r21	; 34
    11d4:	41 bd       	out	0x21, r20	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    11d6:	f8 9a       	sbi	0x1f, 0	; 31
    11d8:	80 b5       	in	r24, 0x20	; 32
  // More than an erase might be required...
  const uint8_t oldValue = eeprom_read_byte(p);
  if(value == oldValue) { return(false); } // No change needed.
    11da:	68 17       	cp	r22, r24
    11dc:	11 f4       	brne	.+4      	; 0x11e2 <eeprom_smart_update_byte(unsigned char*, unsigned char)+0x26>
    11de:	80 e0       	ldi	r24, 0x00	; 0
    11e0:	08 95       	ret
#ifdef EEPROM_SPLIT_ERASE_WRITE // Can do selective write.
  if(value == (value & oldValue)) { return(eeprom_smart_clear_bits(p, value)); } // Can use pure write to clear bits to zero.
    11e2:	26 2f       	mov	r18, r22
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	82 23       	and	r24, r18
    11ea:	93 23       	and	r25, r19
    11ec:	28 17       	cp	r18, r24
    11ee:	39 07       	cpc	r19, r25
    11f0:	29 f4       	brne	.+10     	; 0x11fc <eeprom_smart_update_byte(unsigned char*, unsigned char)+0x40>
    11f2:	87 2f       	mov	r24, r23
    11f4:	9e 2f       	mov	r25, r30
    11f6:	0e 94 c8 08 	call	0x1190	; 0x1190 <eeprom_smart_clear_bits(unsigned char*, unsigned char)>
    11fa:	08 95       	ret
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    11fc:	f9 99       	sbic	0x1f, 1	; 31
    11fe:	fe cf       	rjmp	.-4      	; 0x11fc <eeprom_smart_update_byte(unsigned char*, unsigned char)+0x40>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    1200:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1202:	52 bd       	out	0x22, r21	; 34
    1204:	41 bd       	out	0x21, r20	; 33
#endif
    EEDR = __value;
    1206:	60 bd       	out	0x20, r22	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    1208:	0f b6       	in	r0, 0x3f	; 63
    120a:	f8 94       	cli
    120c:	fa 9a       	sbi	0x1f, 2	; 31
    120e:	f9 9a       	sbi	0x1f, 1	; 31
    1210:	0f be       	out	0x3f, r0	; 63
    1212:	81 e0       	ldi	r24, 0x01	; 1
#endif
  eeprom_write_byte(p, value); // Needs to set some (but not all) bits to 1, so needs erase and write.
  return(true); // Performed an update.
  }
    1214:	08 95       	ret

00001216 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>:
// bptr must be pointing at the current byte to update on entry which must start off as 0xff;
// this will write the byte and increment bptr (and write 0xff to the new location) if one is filled up.
// Partial byte can only have even number of bits present, ie be in one of 4 states.
// Two least significant bits used to indicate how many bit pairs are still to be filled,
// so initial 0xff value (which is never a valid complete filled byte) indicates 'empty'.
static uint8_t *_FHT8VCreate200usAppendEncBit(uint8_t *bptr, const bool is1)
    1216:	fc 01       	movw	r30, r24
  {
  const uint8_t bitPairsLeft = (*bptr) & 3; // Find out how many bit pairs are left to fill in the current byte.
    1218:	80 81       	ld	r24, Z
    121a:	98 2f       	mov	r25, r24
    121c:	93 70       	andi	r25, 0x03	; 3
  if(!is1) // Appending 1100.
    121e:	66 23       	and	r22, r22
    1220:	b1 f4       	brne	.+44     	; 0x124e <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x38>
    {
    switch(bitPairsLeft)
    1222:	92 30       	cpi	r25, 0x02	; 2
    1224:	51 f0       	breq	.+20     	; 0x123a <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x24>
    1226:	93 30       	cpi	r25, 0x03	; 3
    1228:	31 f0       	breq	.+12     	; 0x1236 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x20>
    122a:	9f 01       	movw	r18, r30
    122c:	2f 5f       	subi	r18, 0xFF	; 255
    122e:	3f 4f       	sbci	r19, 0xFF	; 255
    1230:	91 30       	cpi	r25, 0x01	; 1
    1232:	59 f4       	brne	.+22     	; 0x124a <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x34>
    1234:	05 c0       	rjmp	.+10     	; 0x1240 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x2a>
      {
      case 3: // Empty target byte (should be 0xff currently).
        *bptr = 0xcd; // %11001101 Write back partial byte (msbits now 1100 and two bit pairs remain free).
    1236:	8d ec       	ldi	r24, 0xCD	; 205
    1238:	25 c0       	rjmp	.+74     	; 0x1284 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      case 2: // Top bit pair already filled.
        *bptr = (*bptr & 0xc0) | 0x30; // Preserve existing ms bit-pair, set middle four bits 1100, one bit pair remains free.
    123a:	80 7c       	andi	r24, 0xC0	; 192
    123c:	80 63       	ori	r24, 0x30	; 48
    123e:	22 c0       	rjmp	.+68     	; 0x1284 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      case 1: // Top two bit pairs already filled.
        *bptr = (*bptr & 0xf0) | 0xc; // Preserve existing ms (2) bit-pairs, set bottom four bits 1100, write back full byte.
    1240:	80 7f       	andi	r24, 0xF0	; 240
    1242:	8c 60       	ori	r24, 0x0C	; 12
    1244:	80 83       	st	Z, r24
        *++bptr = (uint8_t) ~0U; // Initialise next byte for next incremental update.
    1246:	f9 01       	movw	r30, r18
    1248:	11 c0       	rjmp	.+34     	; 0x126c <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x56>
        break;
      default: // Top three bit pairs already filled.
        *bptr |= 3; // Preserve existing ms (3) bit-pairs, OR in leading 11 bits, write back full byte.
    124a:	83 60       	ori	r24, 0x03	; 3
    124c:	13 c0       	rjmp	.+38     	; 0x1274 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x5e>
        break;
      }
    }
  else // Appending 111000.
    {
    switch(bitPairsLeft)
    124e:	92 30       	cpi	r25, 0x02	; 2
    1250:	51 f0       	breq	.+20     	; 0x1266 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x50>
    1252:	93 30       	cpi	r25, 0x03	; 3
    1254:	31 f0       	breq	.+12     	; 0x1262 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x4c>
    1256:	9f 01       	movw	r18, r30
    1258:	2f 5f       	subi	r18, 0xFF	; 255
    125a:	3f 4f       	sbci	r19, 0xFF	; 255
    125c:	91 30       	cpi	r25, 0x01	; 1
    125e:	71 f4       	brne	.+28     	; 0x127c <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x66>
    1260:	07 c0       	rjmp	.+14     	; 0x1270 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x5a>
      {
      case 3: // Empty target byte (should be 0xff currently).
        *bptr = 0xe0; // %11100000 Write back partial byte (msbits now 111000 and one bit pair remains free).
    1262:	80 ee       	ldi	r24, 0xE0	; 224
    1264:	0f c0       	rjmp	.+30     	; 0x1284 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      case 2: // Top bit pair already filled.
        *bptr = (*bptr & 0xc0) | 0x38; // Preserve existing ms bit-pair, set lsbits to 111000, write back full byte.
    1266:	80 7c       	andi	r24, 0xC0	; 192
    1268:	88 63       	ori	r24, 0x38	; 56
    126a:	81 93       	st	Z+, r24
        *++bptr = (uint8_t) ~0U; // Initialise next byte for next incremental update.
    126c:	8f ef       	ldi	r24, 0xFF	; 255
    126e:	0a c0       	rjmp	.+20     	; 0x1284 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      case 1: // Top two bit pairs already filled.
        *bptr = (*bptr & 0xf0) | 0xe; // Preserve existing (2) ms bit-pairs, set bottom four bits to 1110, write back full byte.
    1270:	80 7f       	andi	r24, 0xF0	; 240
    1272:	8e 60       	ori	r24, 0x0E	; 14
    1274:	80 83       	st	Z, r24
        *++bptr = 0x3e; // %00111110 Write trailing 00 bits to next byte and indicate 3 bit-pairs free for next incremental update.
    1276:	f9 01       	movw	r30, r18
    1278:	8e e3       	ldi	r24, 0x3E	; 62
    127a:	04 c0       	rjmp	.+8      	; 0x1284 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      default: // Top three bit pairs already filled.
        *bptr |= 3; // Preserve existing ms (3) bit-pairs, OR in leading 11 bits, write back full byte.
    127c:	83 60       	ori	r24, 0x03	; 3
    127e:	80 83       	st	Z, r24
        *++bptr = 0x8d; // Write trailing 1000 bits to next byte and indicate 2 bit-pairs free for next incremental update.
    1280:	f9 01       	movw	r30, r18
    1282:	8d e8       	ldi	r24, 0x8D	; 141
    1284:	80 83       	st	Z, r24
        break;
      }
    }
  return(bptr);
  }
    1286:	cf 01       	movw	r24, r30
    1288:	08 95       	ret

0000128a <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>:

// Appends encoded byte in b msbit first plus trailing even parity bit (9 bits total)
// to the byte stream being created by FHT8VCreate200usBitStreamBptr.
static uint8_t *_FHT8VCreate200usAppendByteEP(uint8_t *bptr, const uint8_t b)
    128a:	ef 92       	push	r14
    128c:	ff 92       	push	r15
    128e:	0f 93       	push	r16
    1290:	1f 93       	push	r17
    1292:	cf 93       	push	r28
    1294:	df 93       	push	r29
    1296:	9c 01       	movw	r18, r24
    1298:	16 2f       	mov	r17, r22
    129a:	00 e8       	ldi	r16, 0x80	; 128
    129c:	c0 e0       	ldi	r28, 0x00	; 0
    129e:	d0 e0       	ldi	r29, 0x00	; 0
  {
  for(uint8_t mask = 0x80; mask != 0; mask >>= 1)
    { bptr = _FHT8VCreate200usAppendEncBit(bptr, 0 != (b & mask)); }
    12a0:	e6 2e       	mov	r14, r22
    12a2:	ff 24       	eor	r15, r15
    12a4:	60 e0       	ldi	r22, 0x00	; 0
    12a6:	80 2f       	mov	r24, r16
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	8e 21       	and	r24, r14
    12ac:	9f 21       	and	r25, r15
    12ae:	89 2b       	or	r24, r25
    12b0:	09 f0       	breq	.+2      	; 0x12b4 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)+0x2a>
    12b2:	61 e0       	ldi	r22, 0x01	; 1
    12b4:	c9 01       	movw	r24, r18
    12b6:	0e 94 0b 09 	call	0x1216	; 0x1216 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
    12ba:	9c 01       	movw	r18, r24

// Appends encoded byte in b msbit first plus trailing even parity bit (9 bits total)
// to the byte stream being created by FHT8VCreate200usBitStreamBptr.
static uint8_t *_FHT8VCreate200usAppendByteEP(uint8_t *bptr, const uint8_t b)
  {
  for(uint8_t mask = 0x80; mask != 0; mask >>= 1)
    12bc:	06 95       	lsr	r16
    12be:	21 96       	adiw	r28, 0x01	; 1
    12c0:	c8 30       	cpi	r28, 0x08	; 8
    12c2:	d1 05       	cpc	r29, r1
    12c4:	79 f7       	brne	.-34     	; 0x12a4 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)+0x1a>
    { bptr = _FHT8VCreate200usAppendEncBit(bptr, 0 != (b & mask)); }
  return(_FHT8VCreate200usAppendEncBit(bptr, (bool) parity_even_bit(b))); // Append even parity bit.
    12c6:	01 2e       	mov	r0, r17
    12c8:	12 95       	swap	r17
    12ca:	10 25       	eor	r17, r0
    12cc:	01 2e       	mov	r0, r17
    12ce:	16 95       	lsr	r17
    12d0:	16 95       	lsr	r17
    12d2:	10 25       	eor	r17, r0
    12d4:	61 2f       	mov	r22, r17
    12d6:	70 e0       	ldi	r23, 0x00	; 0
    12d8:	6f 5f       	subi	r22, 0xFF	; 255
    12da:	7f 4f       	sbci	r23, 0xFF	; 255
    12dc:	76 95       	lsr	r23
    12de:	67 95       	ror	r22
    12e0:	61 70       	andi	r22, 0x01	; 1
    12e2:	c9 01       	movw	r24, r18
    12e4:	0e 94 0b 09 	call	0x1216	; 0x1216 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
  }
    12e8:	df 91       	pop	r29
    12ea:	cf 91       	pop	r28
    12ec:	1f 91       	pop	r17
    12ee:	0f 91       	pop	r16
    12f0:	ff 90       	pop	r15
    12f2:	ef 90       	pop	r14
    12f4:	08 95       	ret

000012f6 <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>:
// On entry the populated FHT8V command struct is passed by pointer.
// On exit, the memory block starting at buffer contains the low-byte, msbit-first bit, 0xff-terminated TX sequence.
// The maximum and minimum possible encoded message sizes are 35 (all zero bytes) and 45 (all 0xff bytes) bytes long.
// Note that a buffer space of at least 46 bytes is needed to accommodate the longest-possible encoded message and terminator.
// Returns pointer to the terminating 0xff on exit.
uint8_t *FHT8VCreate200usBitStreamBptr(uint8_t *bptr, const fht8v_msg_t *command)
    12f6:	ff 92       	push	r15
    12f8:	0f 93       	push	r16
    12fa:	1f 93       	push	r17
    12fc:	dc 01       	movw	r26, r24
    12fe:	8b 01       	movw	r16, r22
  {
  // Generate FHT8V preamble.
  // First 12 x 0 bits of preamble, pre-encoded as 6 x 0xcc bytes.
  *bptr++ = 0xcc;
    1300:	8c ec       	ldi	r24, 0xCC	; 204
    1302:	fd 01       	movw	r30, r26
    1304:	81 93       	st	Z+, r24
  *bptr++ = 0xcc;
    1306:	11 96       	adiw	r26, 0x01	; 1
    1308:	8c 93       	st	X, r24
    130a:	df 01       	movw	r26, r30
    130c:	11 96       	adiw	r26, 0x01	; 1
  *bptr++ = 0xcc;
    130e:	81 83       	std	Z+1, r24	; 0x01
    1310:	fd 01       	movw	r30, r26
    1312:	31 96       	adiw	r30, 0x01	; 1
  *bptr++ = 0xcc;
    1314:	11 96       	adiw	r26, 0x01	; 1
    1316:	8c 93       	st	X, r24
    1318:	df 01       	movw	r26, r30
    131a:	11 96       	adiw	r26, 0x01	; 1
  *bptr++ = 0xcc;
    131c:	81 83       	std	Z+1, r24	; 0x01
    131e:	fd 01       	movw	r30, r26
    1320:	31 96       	adiw	r30, 0x01	; 1
  *bptr++ = 0xcc;
    1322:	11 96       	adiw	r26, 0x01	; 1
    1324:	8c 93       	st	X, r24
  *bptr = (uint8_t) ~0U; // Initialise for _FHT8VCreate200usAppendEncBit routine.
    1326:	ff 24       	eor	r15, r15
    1328:	fa 94       	dec	r15
    132a:	f1 82       	std	Z+1, r15	; 0x01
  // Push remaining 1 of preamble.
  bptr = _FHT8VCreate200usAppendEncBit(bptr, true); // Encode 1.
    132c:	cf 01       	movw	r24, r30
    132e:	01 96       	adiw	r24, 0x01	; 1
    1330:	61 e0       	ldi	r22, 0x01	; 1
    1332:	0e 94 0b 09 	call	0x1216	; 0x1216 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>

  // Generate body.
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->hc1);
    1336:	f8 01       	movw	r30, r16
    1338:	60 81       	ld	r22, Z
    133a:	0e 94 45 09 	call	0x128a	; 0x128a <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->hc2);
    133e:	f8 01       	movw	r30, r16
    1340:	61 81       	ldd	r22, Z+1	; 0x01
    1342:	0e 94 45 09 	call	0x128a	; 0x128a <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
#ifdef FHT8V_ADR_USED
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->address);
#else
  bptr = _FHT8VCreate200usAppendByteEP(bptr, 0); // Default/broadcast.  TODO: could possibly be further optimised to send 0 value more efficiently.
    1346:	60 e0       	ldi	r22, 0x00	; 0
    1348:	0e 94 45 09 	call	0x128a	; 0x128a <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
#endif
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->command);
    134c:	f8 01       	movw	r30, r16
    134e:	62 81       	ldd	r22, Z+2	; 0x02
    1350:	0e 94 45 09 	call	0x128a	; 0x128a <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->extension);
    1354:	f8 01       	movw	r30, r16
    1356:	63 81       	ldd	r22, Z+3	; 0x03
    1358:	0e 94 45 09 	call	0x128a	; 0x128a <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
#ifdef FHT8V_ADR_USED
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + command->address + command->command + command->extension;
#else
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + command->command + command->extension;
#endif
  bptr = _FHT8VCreate200usAppendByteEP(bptr, checksum);
    135c:	f8 01       	movw	r30, r16
    135e:	60 81       	ld	r22, Z
    1360:	21 81       	ldd	r18, Z+1	; 0x01
    1362:	62 0f       	add	r22, r18
    1364:	64 5f       	subi	r22, 0xF4	; 244
    1366:	22 81       	ldd	r18, Z+2	; 0x02
    1368:	62 0f       	add	r22, r18
    136a:	23 81       	ldd	r18, Z+3	; 0x03
    136c:	62 0f       	add	r22, r18
    136e:	0e 94 45 09 	call	0x128a	; 0x128a <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>

  // Generate trailer.
  // Append 0 bit for trailer.
  bptr = _FHT8VCreate200usAppendEncBit(bptr, false);
    1372:	60 e0       	ldi	r22, 0x00	; 0
    1374:	0e 94 0b 09 	call	0x1216	; 0x1216 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
  // Append extra 0 bits to ensure that final required bits are flushed out.
  bptr = _FHT8VCreate200usAppendEncBit(bptr, false);
    1378:	60 e0       	ldi	r22, 0x00	; 0
    137a:	0e 94 0b 09 	call	0x1216	; 0x1216 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
  bptr = _FHT8VCreate200usAppendEncBit(bptr, false);
    137e:	60 e0       	ldi	r22, 0x00	; 0
    1380:	0e 94 0b 09 	call	0x1216	; 0x1216 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
    1384:	fc 01       	movw	r30, r24
  *bptr = (uint8_t)0xff; // Terminate TX bytes.
    1386:	f0 82       	st	Z, r15
  return(bptr);
  }
    1388:	1f 91       	pop	r17
    138a:	0f 91       	pop	r16
    138c:	ff 90       	pop	r15
    138e:	08 95       	ret

00001390 <FHT8VGetHC1()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1390:	f9 99       	sbic	0x1f, 1	; 31
    1392:	fe cf       	rjmp	.-4      	; 0x1390 <FHT8VGetHC1()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1394:	80 e1       	ldi	r24, 0x10	; 16
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	92 bd       	out	0x22, r25	; 34
    139a:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    139c:	f8 9a       	sbi	0x1f, 0	; 31
    139e:	80 b5       	in	r24, 0x20	; 32
// Set (non-volatile) HC1 and HC2 for single/primary FHT8V wireless valve under control.
void FHT8VSetHC1(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC1, hc); }
void FHT8VSetHC2(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC2, hc); }

// Get (non-volatile) HC1 and HC2 for single/primary FHT8V wireless valve under control (will be 0xff until set).
uint8_t FHT8VGetHC1() { return(eeprom_read_byte((uint8_t*)EE_START_FHT8V_HC1)); }
    13a0:	08 95       	ret

000013a2 <FHT8VGetHC2()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    13a2:	f9 99       	sbic	0x1f, 1	; 31
    13a4:	fe cf       	rjmp	.-4      	; 0x13a2 <FHT8VGetHC2()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    13a6:	81 e1       	ldi	r24, 0x11	; 17
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	92 bd       	out	0x22, r25	; 34
    13ac:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    13ae:	f8 9a       	sbi	0x1f, 0	; 31
    13b0:	80 b5       	in	r24, 0x20	; 32
uint8_t FHT8VGetHC2() { return(eeprom_read_byte((uint8_t*)EE_START_FHT8V_HC2)); }
    13b2:	08 95       	ret

000013b4 <localFHT8VTRVEnabled()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    13b4:	f9 99       	sbic	0x1f, 1	; 31
    13b6:	fe cf       	rjmp	.-4      	; 0x13b4 <localFHT8VTRVEnabled()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    13b8:	80 e1       	ldi	r24, 0x10	; 16
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	92 bd       	out	0x22, r25	; 34
    13be:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    13c0:	f8 9a       	sbi	0x1f, 0	; 31
    13c2:	80 b5       	in	r24, 0x20	; 32

#ifndef localFHT8VTRVEnabled
// Returns TRV if valve/radiator is to be controlled by this unit.
// Usually the case, but may not be for (a) a hub or (b) a not-yet-configured unit.
// Returns false if house code parts are set to invalid or uninitialised values (>99).
bool localFHT8VTRVEnabled() { return(((FHT8VGetHC1() <= 99) && (FHT8VGetHC2() <= 99))); }
    13c4:	84 36       	cpi	r24, 0x64	; 100
    13c6:	10 f0       	brcs	.+4      	; 0x13cc <localFHT8VTRVEnabled()+0x18>
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	0c c0       	rjmp	.+24     	; 0x13e4 <localFHT8VTRVEnabled()+0x30>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    13cc:	f9 99       	sbic	0x1f, 1	; 31
    13ce:	fe cf       	rjmp	.-4      	; 0x13cc <localFHT8VTRVEnabled()+0x18>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    13d0:	81 e1       	ldi	r24, 0x11	; 17
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	92 bd       	out	0x22, r25	; 34
    13d6:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    13d8:	f8 9a       	sbi	0x1f, 0	; 31
    13da:	80 b5       	in	r24, 0x20	; 32
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	84 36       	cpi	r24, 0x64	; 100
    13e0:	08 f4       	brcc	.+2      	; 0x13e4 <localFHT8VTRVEnabled()+0x30>
    13e2:	91 e0       	ldi	r25, 0x01	; 1
    13e4:	89 2f       	mov	r24, r25
    13e6:	08 95       	ret

000013e8 <isSyncedWithFHT8V()>:
  }

// True once/while this node is synced with and controlling the target FHT8V valve; initially false.
static bool syncedWithFHT8V;
#ifndef IGNORE_FHT_SYNC
bool isSyncedWithFHT8V() { return(syncedWithFHT8V); }
    13e8:	80 91 8c 02 	lds	r24, 0x028C
    13ec:	08 95       	ret

000013ee <FHT8VisControlledValveOpen()>:
#endif


// True if FHT8V valve is believed to be open under instruction from this system; false if not in sync.
static bool FHT8V_isValveOpen;
bool getFHT8V_isValveOpen() { return(syncedWithFHT8V && FHT8V_isValveOpen); }
    13ee:	80 91 8c 02 	lds	r24, 0x028C
    13f2:	88 23       	and	r24, r24
    13f4:	21 f0       	breq	.+8      	; 0x13fe <FHT8VisControlledValveOpen()+0x10>
    13f6:	80 91 8f 02 	lds	r24, 0x028F
    13fa:	81 11       	cpse	r24, r1
    13fc:	81 e0       	ldi	r24, 0x01	; 1


// GLOBAL NOTION OF CONTROLLED FHT8V VALVE STATE PROVIDED HERE
// True iff the FHT8V valve(s) (if any) controlled by this unit are really open.
// This waits until at least the command to open the FHT8Vhas been sent.
bool FHT8VisControlledValveOpen() { return(getFHT8V_isValveOpen()); }
    13fe:	08 95       	ret

00001400 <FHT8VSyncAndTXReset()>:
//   FHT8V_isValveOpen (bit, true if this node has last sent command to open valve)
//   syncStateFHT8V (byte, internal)
//   halfSecondsToNextFHT8VTX (byte).
void FHT8VSyncAndTXReset()
  {
  syncedWithFHT8V = false;
    1400:	10 92 8c 02 	sts	0x028C, r1
  syncStateFHT8V = 0;
    1404:	10 92 8e 02 	sts	0x028E, r1
  halfSecondsToNextFHT8VTX = 0;
    1408:	10 92 8d 02 	sts	0x028D, r1
  FHT8V_isValveOpen = false;
    140c:	10 92 8f 02 	sts	0x028F, r1
  }
    1410:	08 95       	ret

00001412 <_SetupRFM22ToEavesdropOnFHT8V()>:
static void setLastRXErr(const uint8_t err) { ATOMIC_BLOCK (ATOMIC_RESTORESTATE) { lastRXerrno = err; } }


static void _SetupRFM22ToEavesdropOnFHT8V()
  {
  RFM22ModeStandbyAndClearState();
    1412:	0e 94 67 19 	call	0x32ce	; 0x32ce <RFM22ModeStandbyAndClearState()>
  RFM22SetUpRX(MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE, true, true); // Set to RX longest-possible valid FS20 encoded frame.
    1416:	8e e2       	ldi	r24, 0x2E	; 46
    1418:	61 e0       	ldi	r22, 0x01	; 1
    141a:	41 e0       	ldi	r20, 0x01	; 1
    141c:	0e 94 78 18 	call	0x30f0	; 0x30f0 <RFM22SetUpRX(unsigned char, bool, bool)>
#error Board revision not defined.
#endif
#if V0p2_REV > 0
// TODO: hook into interrupts?
#endif
  }
    1420:	08 95       	ret

00001422 <readOneBit(decode_state_t*)>:
  } decode_state_t;

// Decode bit pattern 1100 as 0, 111000 as 1.
// Returns 1 or 0 for the bit decoded, else marks the state as failed.
// Reads two bits at a time, MSB to LSB, advancing the byte pointer if necessary.
static uint8_t readOneBit(decode_state_t *const state)
    1422:	cf 93       	push	r28
    1424:	df 93       	push	r29
    1426:	ec 01       	movw	r28, r24
  {
  if(state->bitStream > state->lastByte) { state->failed = true; } // Stop if off the buffer end.
    1428:	28 81       	ld	r18, Y
    142a:	39 81       	ldd	r19, Y+1	; 0x01
    142c:	8a 81       	ldd	r24, Y+2	; 0x02
    142e:	9b 81       	ldd	r25, Y+3	; 0x03
    1430:	82 17       	cp	r24, r18
    1432:	93 07       	cpc	r25, r19
    1434:	10 f4       	brcc	.+4      	; 0x143a <readOneBit(decode_state_t*)+0x18>
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	8d 83       	std	Y+5, r24	; 0x05
  if(state->failed) { return(0); } // Refuse to do anything further once decoding has failed.
    143a:	8d 81       	ldd	r24, Y+5	; 0x05
    143c:	88 23       	and	r24, r24
    143e:	09 f0       	breq	.+2      	; 0x1442 <readOneBit(decode_state_t*)+0x20>
    1440:	7e c0       	rjmp	.+252    	; 0x153e <readOneBit(decode_state_t*)+0x11c>

  if(0 == state->mask) { state->mask = 0xc0; } // Special treatment of 0 as equivalent to 0xc0 on entry.
    1442:	8c 81       	ldd	r24, Y+4	; 0x04
    1444:	88 23       	and	r24, r24
    1446:	11 f4       	brne	.+4      	; 0x144c <readOneBit(decode_state_t*)+0x2a>
    1448:	80 ec       	ldi	r24, 0xC0	; 192
    144a:	8c 83       	std	Y+4, r24	; 0x04
#if defined(DEBUG)
  if((state->mask != 0xc0) && (state->mask != 0x30) && (state->mask != 0xc) && (state->mask != 3)) { panic(); }
    144c:	8c 81       	ldd	r24, Y+4	; 0x04
    144e:	80 3c       	cpi	r24, 0xC0	; 192
    1450:	41 f0       	breq	.+16     	; 0x1462 <readOneBit(decode_state_t*)+0x40>
    1452:	80 33       	cpi	r24, 0x30	; 48
    1454:	31 f0       	breq	.+12     	; 0x1462 <readOneBit(decode_state_t*)+0x40>
    1456:	8c 30       	cpi	r24, 0x0C	; 12
    1458:	21 f0       	breq	.+8      	; 0x1462 <readOneBit(decode_state_t*)+0x40>
    145a:	83 30       	cpi	r24, 0x03	; 3
    145c:	11 f0       	breq	.+4      	; 0x1462 <readOneBit(decode_state_t*)+0x40>
    145e:	0e 94 ec 2f 	call	0x5fd8	; 0x5fd8 <panic()>
#endif

  // First two bits read must be 11.
  if(state->mask != (state->mask & *(state->bitStream)))
    1462:	8c 81       	ldd	r24, Y+4	; 0x04
    1464:	28 2f       	mov	r18, r24
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	e8 81       	ld	r30, Y
    146a:	f9 81       	ldd	r31, Y+1	; 0x01
    146c:	80 81       	ld	r24, Z
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	82 23       	and	r24, r18
    1472:	93 23       	and	r25, r19
    1474:	28 17       	cp	r18, r24
    1476:	39 07       	cpc	r19, r25
    1478:	09 f0       	breq	.+2      	; 0x147c <readOneBit(decode_state_t*)+0x5a>
    147a:	51 c0       	rjmp	.+162    	; 0x151e <readOneBit(decode_state_t*)+0xfc>
#endif
    state->failed = true; return(0);
    }

  // Advance the mask; if the mask becomes 0 (then 0xc0 again) then advance the byte pointer.
  if(0 == ((state->mask) >>= 2))
    147c:	c9 01       	movw	r24, r18
    147e:	95 95       	asr	r25
    1480:	87 95       	ror	r24
    1482:	95 95       	asr	r25
    1484:	87 95       	ror	r24
    1486:	8c 83       	std	Y+4, r24	; 0x04
    1488:	88 23       	and	r24, r24
    148a:	61 f4       	brne	.+24     	; 0x14a4 <readOneBit(decode_state_t*)+0x82>
    {
    state->mask = 0xc0;
    148c:	80 ec       	ldi	r24, 0xC0	; 192
    148e:	8c 83       	std	Y+4, r24	; 0x04
    // If end of stream is encountered this is an error since more bits need to be read.
    if(++(state->bitStream) > state->lastByte) { state->failed = true; return(0); }
    1490:	9f 01       	movw	r18, r30
    1492:	2f 5f       	subi	r18, 0xFF	; 255
    1494:	3f 4f       	sbci	r19, 0xFF	; 255
    1496:	39 83       	std	Y+1, r19	; 0x01
    1498:	28 83       	st	Y, r18
    149a:	8a 81       	ldd	r24, Y+2	; 0x02
    149c:	9b 81       	ldd	r25, Y+3	; 0x03
    149e:	82 17       	cp	r24, r18
    14a0:	93 07       	cpc	r25, r19
    14a2:	e8 f1       	brcs	.+122    	; 0x151e <readOneBit(decode_state_t*)+0xfc>
    }

  // Next two bits can be 00 to decode a zero,
  // or 10 (followed by 00) to decode a one.
  const uint8_t secondPair = (state->mask & *(state->bitStream));
    14a4:	8c 81       	ldd	r24, Y+4	; 0x04
  switch(secondPair)
    14a6:	e8 81       	ld	r30, Y
    14a8:	f9 81       	ldd	r31, Y+1	; 0x01
    14aa:	20 81       	ld	r18, Z
    14ac:	28 23       	and	r18, r24
    14ae:	28 30       	cpi	r18, 0x08	; 8
    14b0:	c1 f0       	breq	.+48     	; 0x14e2 <readOneBit(decode_state_t*)+0xc0>
    14b2:	29 30       	cpi	r18, 0x09	; 9
    14b4:	28 f4       	brcc	.+10     	; 0x14c0 <readOneBit(decode_state_t*)+0x9e>
    14b6:	22 23       	and	r18, r18
    14b8:	41 f0       	breq	.+16     	; 0x14ca <readOneBit(decode_state_t*)+0xa8>
    14ba:	22 30       	cpi	r18, 0x02	; 2
    14bc:	81 f5       	brne	.+96     	; 0x151e <readOneBit(decode_state_t*)+0xfc>
    14be:	11 c0       	rjmp	.+34     	; 0x14e2 <readOneBit(decode_state_t*)+0xc0>
    14c0:	20 32       	cpi	r18, 0x20	; 32
    14c2:	79 f0       	breq	.+30     	; 0x14e2 <readOneBit(decode_state_t*)+0xc0>
    14c4:	20 38       	cpi	r18, 0x80	; 128
    14c6:	59 f5       	brne	.+86     	; 0x151e <readOneBit(decode_state_t*)+0xfc>
    14c8:	0c c0       	rjmp	.+24     	; 0x14e2 <readOneBit(decode_state_t*)+0xc0>
      {
#if 0 && defined(DEBUG)
      DEBUG_SERIAL_PRINTLN_FLASHSTRING("decoded 0");
#endif
      // Advance the mask; if the mask becomes 0 then advance the byte pointer.
      if(0 == ((state->mask) >>= 2)) { ++(state->bitStream); }
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	95 95       	asr	r25
    14ce:	87 95       	ror	r24
    14d0:	95 95       	asr	r25
    14d2:	87 95       	ror	r24
    14d4:	8c 83       	std	Y+4, r24	; 0x04
    14d6:	88 23       	and	r24, r24
    14d8:	91 f5       	brne	.+100    	; 0x153e <readOneBit(decode_state_t*)+0x11c>
    14da:	31 96       	adiw	r30, 0x01	; 1
    14dc:	f9 83       	std	Y+1, r31	; 0x01
    14de:	e8 83       	st	Y, r30
    14e0:	2f c0       	rjmp	.+94     	; 0x1540 <readOneBit(decode_state_t*)+0x11e>
      state->failed = true; return(0);
      }
    }

  // Advance the mask; if the mask becomes 0 (then 0xc0 again) then advance the byte pointer.
  if(0 == ((state->mask) >>= 2))
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	95 95       	asr	r25
    14e6:	87 95       	ror	r24
    14e8:	95 95       	asr	r25
    14ea:	87 95       	ror	r24
    14ec:	8c 83       	std	Y+4, r24	; 0x04
    14ee:	88 23       	and	r24, r24
    14f0:	61 f4       	brne	.+24     	; 0x150a <readOneBit(decode_state_t*)+0xe8>
    {
    state->mask = 0xc0;
    14f2:	80 ec       	ldi	r24, 0xC0	; 192
    14f4:	8c 83       	std	Y+4, r24	; 0x04
    // If end of stream is encountered this is an error since more bits need to be read.
    if(++(state->bitStream) > state->lastByte) { state->failed = true; return(0); }
    14f6:	88 81       	ld	r24, Y
    14f8:	99 81       	ldd	r25, Y+1	; 0x01
    14fa:	01 96       	adiw	r24, 0x01	; 1
    14fc:	99 83       	std	Y+1, r25	; 0x01
    14fe:	88 83       	st	Y, r24
    1500:	2a 81       	ldd	r18, Y+2	; 0x02
    1502:	3b 81       	ldd	r19, Y+3	; 0x03
    1504:	28 17       	cp	r18, r24
    1506:	39 07       	cpc	r19, r25
    1508:	50 f0       	brcs	.+20     	; 0x151e <readOneBit(decode_state_t*)+0xfc>
    }

  // Third pair of bits must be 00.
  if(0 != (state->mask & *(state->bitStream)))
    150a:	2c 81       	ldd	r18, Y+4	; 0x04
    150c:	e8 81       	ld	r30, Y
    150e:	f9 81       	ldd	r31, Y+1	; 0x01
    1510:	80 81       	ld	r24, Z
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	82 23       	and	r24, r18
    1518:	93 23       	and	r25, r19
    151a:	89 2b       	or	r24, r25
    151c:	19 f0       	breq	.+6      	; 0x1524 <readOneBit(decode_state_t*)+0x102>
     {
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("trailing 00 corrupt");
#endif
    state->failed = true; return(0);
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	8d 83       	std	Y+5, r24	; 0x05
    1522:	0d c0       	rjmp	.+26     	; 0x153e <readOneBit(decode_state_t*)+0x11c>
    }    

  // Advance the mask; if the mask becomes 0 then advance the byte pointer.
  if(0 == ((state->mask) >>= 2)) { ++(state->bitStream); }
    1524:	c9 01       	movw	r24, r18
    1526:	95 95       	asr	r25
    1528:	87 95       	ror	r24
    152a:	95 95       	asr	r25
    152c:	87 95       	ror	r24
    152e:	8c 83       	std	Y+4, r24	; 0x04
    1530:	88 23       	and	r24, r24
    1532:	19 f4       	brne	.+6      	; 0x153a <readOneBit(decode_state_t*)+0x118>
    1534:	31 96       	adiw	r30, 0x01	; 1
    1536:	f9 83       	std	Y+1, r31	; 0x01
    1538:	e8 83       	st	Y, r30
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	01 c0       	rjmp	.+2      	; 0x1540 <readOneBit(decode_state_t*)+0x11e>
    153e:	80 e0       	ldi	r24, 0x00	; 0
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("decoded 1");
#endif
  return(1); // Decoded a 1.
  }
    1540:	df 91       	pop	r29
    1542:	cf 91       	pop	r28
    1544:	08 95       	ret

00001546 <readOneByteWithParity(decode_state_t*)>:

// Decodes a series of encoded bits plus parity (and checks the parity, failing if wrong).
// Returns the byte decoded, else marks the state as failed.
static uint8_t readOneByteWithParity(decode_state_t *const state)
    1546:	ef 92       	push	r14
    1548:	ff 92       	push	r15
    154a:	0f 93       	push	r16
    154c:	1f 93       	push	r17
    154e:	cf 93       	push	r28
    1550:	df 93       	push	r29
    1552:	7c 01       	movw	r14, r24
  {
  if(state->failed) { return(0); } // Refuse to do anything further once decoding has failed.
    1554:	fc 01       	movw	r30, r24
    1556:	85 81       	ldd	r24, Z+5	; 0x05
    1558:	88 23       	and	r24, r24
    155a:	11 f0       	breq	.+4      	; 0x1560 <readOneByteWithParity(decode_state_t*)+0x1a>
    155c:	10 e0       	ldi	r17, 0x00	; 0
    155e:	1b c0       	rjmp	.+54     	; 0x1596 <readOneByteWithParity(decode_state_t*)+0x50>

  // Read first bit specially...
  const uint8_t b7 = readOneBit(state); 
    1560:	c7 01       	movw	r24, r14
    1562:	0e 94 11 0a 	call	0x1422	; 0x1422 <readOneBit(decode_state_t*)>
    1566:	18 2f       	mov	r17, r24
    1568:	08 2f       	mov	r16, r24
    156a:	c7 e0       	ldi	r28, 0x07	; 7
    156c:	d0 e0       	ldi	r29, 0x00	; 0
    156e:	06 c0       	rjmp	.+12     	; 0x157c <readOneByteWithParity(decode_state_t*)+0x36>
  uint8_t result = b7;
  uint8_t parity = b7;
  // Then remaining 7 bits...
  for(int i = 7; --i >= 0; )
    {
    const uint8_t bit = readOneBit(state);
    1570:	c7 01       	movw	r24, r14
    1572:	0e 94 11 0a 	call	0x1422	; 0x1422 <readOneBit(decode_state_t*)>
    parity ^= bit;
    1576:	08 27       	eor	r16, r24
    result = (result << 1) | bit;
    1578:	11 0f       	add	r17, r17
    157a:	18 2b       	or	r17, r24
  // Read first bit specially...
  const uint8_t b7 = readOneBit(state); 
  uint8_t result = b7;
  uint8_t parity = b7;
  // Then remaining 7 bits...
  for(int i = 7; --i >= 0; )
    157c:	21 97       	sbiw	r28, 0x01	; 1
    157e:	ff ef       	ldi	r31, 0xFF	; 255
    1580:	cf 3f       	cpi	r28, 0xFF	; 255
    1582:	df 07       	cpc	r29, r31
    1584:	a9 f7       	brne	.-22     	; 0x1570 <readOneByteWithParity(decode_state_t*)+0x2a>
    const uint8_t bit = readOneBit(state);
    parity ^= bit;
    result = (result << 1) | bit;
    }
  // Then get parity bit and check.
  if(parity != readOneBit(state))
    1586:	c7 01       	movw	r24, r14
    1588:	0e 94 11 0a 	call	0x1422	; 0x1422 <readOneBit(decode_state_t*)>
    158c:	08 17       	cp	r16, r24
    158e:	19 f0       	breq	.+6      	; 0x1596 <readOneByteWithParity(decode_state_t*)+0x50>
    {
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("bad parity");
#endif
    state->failed = true;
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	f7 01       	movw	r30, r14
    1594:	85 83       	std	Z+5, r24	; 0x05
    }
  return(result);
  }
    1596:	81 2f       	mov	r24, r17
    1598:	df 91       	pop	r29
    159a:	cf 91       	pop	r28
    159c:	1f 91       	pop	r17
    159e:	0f 91       	pop	r16
    15a0:	ff 90       	pop	r15
    15a2:	ef 90       	pop	r14
    15a4:	08 95       	ret

000015a6 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)>:

// Decode raw bitstream into non-null command structure passed in; returns true if successful.
// Will return true if OK, else false if anything obviously invalid is detected such as failing parity or checksum.
// Finds and discards leading encoded 1 and trailing 0.
// Returns NULL on failure, else pointer to next full byte after last decoded.
uint8_t const *FHT8VDecodeBitStream(uint8_t const *bitStream, uint8_t const *lastByte, fht8v_msg_t *command)
    15a6:	df 92       	push	r13
    15a8:	ef 92       	push	r14
    15aa:	ff 92       	push	r15
    15ac:	0f 93       	push	r16
    15ae:	1f 93       	push	r17
    15b0:	df 93       	push	r29
    15b2:	cf 93       	push	r28
    15b4:	00 d0       	rcall	.+0      	; 0x15b6 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x10>
    15b6:	00 d0       	rcall	.+0      	; 0x15b8 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x12>
    15b8:	00 d0       	rcall	.+0      	; 0x15ba <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x14>
    15ba:	cd b7       	in	r28, 0x3d	; 61
    15bc:	de b7       	in	r29, 0x3e	; 62
    15be:	8a 01       	movw	r16, r20
  {
  decode_state_t state;
  state.bitStream = bitStream;
    15c0:	9a 83       	std	Y+2, r25	; 0x02
    15c2:	89 83       	std	Y+1, r24	; 0x01
  state.lastByte = lastByte;
    15c4:	7c 83       	std	Y+4, r23	; 0x04
    15c6:	6b 83       	std	Y+3, r22	; 0x03
  state.mask = 0;
    15c8:	1d 82       	std	Y+5, r1	; 0x05
  state.failed = false;
    15ca:	1e 82       	std	Y+6, r1	; 0x06
      }
  DEBUG_SERIAL_PRINTLN();
#endif

  // Find and absorb the leading encoded '1', else quit if not found by end of stream.
  while(0 == readOneBit(&state)) { if(state.failed) { return(NULL); } }
    15cc:	7e 01       	movw	r14, r28
    15ce:	08 94       	sec
    15d0:	e1 1c       	adc	r14, r1
    15d2:	f1 1c       	adc	r15, r1
    15d4:	03 c0       	rjmp	.+6      	; 0x15dc <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x36>
    15d6:	8e 81       	ldd	r24, Y+6	; 0x06
    15d8:	88 23       	and	r24, r24
    15da:	e9 f5       	brne	.+122    	; 0x1656 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb0>
    15dc:	c7 01       	movw	r24, r14
    15de:	0e 94 11 0a 	call	0x1422	; 0x1422 <readOneBit(decode_state_t*)>
    15e2:	88 23       	and	r24, r24
    15e4:	c1 f3       	breq	.-16     	; 0x15d6 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x30>
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("Read leading 1");
#endif

  command->hc1 = readOneByteWithParity(&state);
    15e6:	c7 01       	movw	r24, r14
    15e8:	0e 94 a3 0a 	call	0x1546	; 0x1546 <readOneByteWithParity(decode_state_t*)>
    15ec:	f8 01       	movw	r30, r16
    15ee:	80 83       	st	Z, r24
  command->hc2 = readOneByteWithParity(&state);
    15f0:	c7 01       	movw	r24, r14
    15f2:	0e 94 a3 0a 	call	0x1546	; 0x1546 <readOneByteWithParity(decode_state_t*)>
    15f6:	f8 01       	movw	r30, r16
    15f8:	81 83       	std	Z+1, r24	; 0x01
#ifdef FHT8V_ADR_USED
  command->address = readOneByteWithParity(&state);
#else
  const uint8_t address = readOneByteWithParity(&state);
    15fa:	c7 01       	movw	r24, r14
    15fc:	0e 94 a3 0a 	call	0x1546	; 0x1546 <readOneByteWithParity(decode_state_t*)>
    1600:	d8 2e       	mov	r13, r24
#endif
  command->command = readOneByteWithParity(&state);
    1602:	c7 01       	movw	r24, r14
    1604:	0e 94 a3 0a 	call	0x1546	; 0x1546 <readOneByteWithParity(decode_state_t*)>
    1608:	f8 01       	movw	r30, r16
    160a:	82 83       	std	Z+2, r24	; 0x02
  command->extension = readOneByteWithParity(&state);
    160c:	c7 01       	movw	r24, r14
    160e:	0e 94 a3 0a 	call	0x1546	; 0x1546 <readOneByteWithParity(decode_state_t*)>
    1612:	f8 01       	movw	r30, r16
    1614:	83 83       	std	Z+3, r24	; 0x03
  const uint8_t checksumRead = readOneByteWithParity(&state);
    1616:	c7 01       	movw	r24, r14
    1618:	0e 94 a3 0a 	call	0x1546	; 0x1546 <readOneByteWithParity(decode_state_t*)>
    161c:	28 2f       	mov	r18, r24
  if(state.failed)
    161e:	8e 81       	ldd	r24, Y+6	; 0x06
    1620:	88 23       	and	r24, r24
    1622:	c9 f4       	brne	.+50     	; 0x1656 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb0>
#ifdef FHT8V_ADR_USED
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + command->address + command->command + command->extension;
#else
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + address + command->command + command->extension;
#endif
  if(checksum != checksumRead)
    1624:	f8 01       	movw	r30, r16
    1626:	80 81       	ld	r24, Z
    1628:	91 81       	ldd	r25, Z+1	; 0x01
    162a:	89 0f       	add	r24, r25
    162c:	84 5f       	subi	r24, 0xF4	; 244
    162e:	92 81       	ldd	r25, Z+2	; 0x02
    1630:	89 0f       	add	r24, r25
    1632:	93 81       	ldd	r25, Z+3	; 0x03
    1634:	89 0f       	add	r24, r25
    1636:	8d 0d       	add	r24, r13
    1638:	82 17       	cp	r24, r18
    163a:	69 f4       	brne	.+26     	; 0x1656 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb0>
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("Checksum OK");
    }
#endif

  // Check the trailing encoded '0'.
  if(0 != readOneBit(&state))
    163c:	c7 01       	movw	r24, r14
    163e:	0e 94 11 0a 	call	0x1422	; 0x1422 <readOneBit(decode_state_t*)>
    1642:	88 23       	and	r24, r24
    1644:	41 f4       	brne	.+16     	; 0x1656 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb0>
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("Read of trailing 0 failed");
#endif
    state.failed = true; return(NULL);
    }
  if(state.failed) { return(NULL); }
    1646:	8e 81       	ldd	r24, Y+6	; 0x06
    1648:	88 23       	and	r24, r24
    164a:	29 f4       	brne	.+10     	; 0x1656 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb0>
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("Read entire message");
#endif
  // Return pointer to where any trailing data may be
  // in next byte beyond end of FHT8V frame.
  return(state.bitStream + 1);
    164c:	29 81       	ldd	r18, Y+1	; 0x01
    164e:	3a 81       	ldd	r19, Y+2	; 0x02
    1650:	2f 5f       	subi	r18, 0xFF	; 255
    1652:	3f 4f       	sbci	r19, 0xFF	; 255
    1654:	02 c0       	rjmp	.+4      	; 0x165a <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb4>
    1656:	20 e0       	ldi	r18, 0x00	; 0
    1658:	30 e0       	ldi	r19, 0x00	; 0
  }
    165a:	c9 01       	movw	r24, r18
    165c:	26 96       	adiw	r28, 0x06	; 6
    165e:	0f b6       	in	r0, 0x3f	; 63
    1660:	f8 94       	cli
    1662:	de bf       	out	0x3e, r29	; 62
    1664:	0f be       	out	0x3f, r0	; 63
    1666:	cd bf       	out	0x3d, r28	; 61
    1668:	cf 91       	pop	r28
    166a:	df 91       	pop	r29
    166c:	1f 91       	pop	r17
    166e:	0f 91       	pop	r16
    1670:	ff 90       	pop	r15
    1672:	ef 90       	pop	r14
    1674:	df 90       	pop	r13
    1676:	08 95       	ret

00001678 <FHT8VCallForHeatPoll()>:
// If used instead of an interrupt then should probably called at least about once every 100ms.
// Returns true if any useful activity/progress was detected by this call (not necessarily a full valid call-for-heat).
// Upon receipt of a valid call-for-heat this comes out of eavesdropping mode to save energy.
// If a problem is encountered this restarts the eavesdropping process.
// Does not block nor take significant time.
bool FHT8VCallForHeatPoll()
    1678:	ef 92       	push	r14
    167a:	ff 92       	push	r15
    167c:	0f 93       	push	r16
    167e:	1f 93       	push	r17
    1680:	df 93       	push	r29
    1682:	cf 93       	push	r28
    1684:	cd b7       	in	r28, 0x3d	; 61
    1686:	de b7       	in	r29, 0x3e	; 62
    1688:	2b 97       	sbiw	r28, 0x0b	; 11
    168a:	0f b6       	in	r0, 0x3f	; 63
    168c:	f8 94       	cli
    168e:	de bf       	out	0x3e, r29	; 62
    1690:	0f be       	out	0x3f, r0	; 63
    1692:	cd bf       	out	0x3d, r28	; 61
  {
  // Do nothing unless already in eavesdropping mode.
  if(!eavesdropping) { return(false); }
    1694:	80 91 4d 02 	lds	r24, 0x024D
    1698:	88 23       	and	r24, r24
    169a:	09 f4       	brne	.+2      	; 0x169e <FHT8VCallForHeatPoll()+0x26>
    169c:	d7 c0       	rjmp	.+430    	; 0x184c <FHT8VCallForHeatPoll()+0x1d4>
//  if(FHT8VCallForHeatHeard()) { return(false); }
//#endif

#if defined(PIN_RFM_NIRQ)
  // If nIRQ line is available then abort if it is not active (and thus spare the SPI bus).
  if(fastDigitalRead(PIN_RFM_NIRQ) != LOW) { return(false); }
    169e:	19 99       	sbic	0x03, 1	; 3
    16a0:	d5 c0       	rjmp	.+426    	; 0x184c <FHT8VCallForHeatPoll()+0x1d4>
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("RX IRQ");
#endif
#endif

  const uint16_t status = RFM22ReadStatusBoth(); // reg1:reg2, on V0.08 PICAXE tempB2:SPI_DATAB.
    16a2:	0e 94 42 19 	call	0x3284	; 0x3284 <RFM22ReadStatusBoth()>
    16a6:	8c 01       	movw	r16, r24

  if(status & 0x1000) // Received frame.
    16a8:	94 ff       	sbrs	r25, 4
    16aa:	ba c0       	rjmp	.+372    	; 0x1820 <FHT8VCallForHeatPoll()+0x1a8>
    {
// Ensure that data from a previous frame is not trivially re-read by clearing the buffer explicitly.
//    for(uint8_t *p = FHT8VRXHubArea + FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE; --p >= FHT8VRXHubArea; )
//      { *p = 0; }
    memset(FHT8VRXHubArea, 0xff, sizeof(FHT8VRXHubArea));
    16ac:	8e e4       	ldi	r24, 0x4E	; 78
    16ae:	92 e0       	ldi	r25, 0x02	; 2
    16b0:	6f ef       	ldi	r22, 0xFF	; 255
    16b2:	70 e0       	ldi	r23, 0x00	; 0
    16b4:	4e e3       	ldi	r20, 0x3E	; 62
    16b6:	50 e0       	ldi	r21, 0x00	; 0
    16b8:	0e 94 b2 02 	call	0x564	; 0x564 <memset>
    // Attempt to read the entire frame.
    RFM22RXFIFO(FHT8VRXHubArea, sizeof(FHT8VRXHubArea));
    16bc:	8e e4       	ldi	r24, 0x4E	; 78
    16be:	92 e0       	ldi	r25, 0x02	; 2
    16c0:	6e e3       	ldi	r22, 0x3E	; 62
    16c2:	0e 94 10 18 	call	0x3020	; 0x3020 <RFM22RXFIFO(unsigned char*, unsigned char)>
    16c6:	20 e0       	ldi	r18, 0x00	; 0
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	82 2f       	mov	r24, r18
    uint8_t pos; // Current byte position in RX buffer...
    // Validate FHT8V premable (zeros encoded as up to 6x 0xcc bytes), else abort/restart.
    // Insist on at least a couple of bytes of valid preamble being present.
    for(pos = 0; pos < 6; ++pos)
      {
      const uint8_t b = FHT8VRXHubArea[pos];
    16cc:	f9 01       	movw	r30, r18
    16ce:	e2 5b       	subi	r30, 0xB2	; 178
    16d0:	fd 4f       	sbci	r31, 0xFD	; 253
    16d2:	e0 81       	ld	r30, Z
      if(0xcc != b)
    16d4:	ec 3c       	cpi	r30, 0xCC	; 204
    16d6:	09 f4       	brne	.+2      	; 0x16da <FHT8VCallForHeatPoll()+0x62>
    16d8:	44 c0       	rjmp	.+136    	; 0x1762 <FHT8VCallForHeatPoll()+0xea>
        {
        if(MSG_JSON_LEADING_CHAR == b)
    16da:	eb 37       	cpi	r30, 0x7B	; 123
    16dc:	a1 f4       	brne	.+40     	; 0x1706 <FHT8VCallForHeatPoll()+0x8e>
          {
          if(adjustJSONMsgForRXAndCheckCRC((char *)(FHT8VRXHubArea + pos), sizeof(FHT8VRXHubArea)-pos) > 0)
    16de:	02 2f       	mov	r16, r18
    16e0:	10 e0       	ldi	r17, 0x00	; 0
    16e2:	02 5b       	subi	r16, 0xB2	; 178
    16e4:	1d 4f       	sbci	r17, 0xFD	; 253
    16e6:	6e e3       	ldi	r22, 0x3E	; 62
    16e8:	62 1b       	sub	r22, r18
    16ea:	c8 01       	movw	r24, r16
    16ec:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)>
    16f0:	18 16       	cp	r1, r24
    16f2:	2c f4       	brge	.+10     	; 0x16fe <FHT8VCallForHeatPoll()+0x86>
            {
            recordJSONStats(false, (const char *)(FHT8VRXHubArea + pos));
    16f4:	80 e0       	ldi	r24, 0x00	; 0
    16f6:	b8 01       	movw	r22, r16
    16f8:	0e 94 76 11 	call	0x22ec	; 0x22ec <recordJSONStats(bool, char const*)>
    16fc:	8a c0       	rjmp	.+276    	; 0x1812 <FHT8VCallForHeatPoll()+0x19a>
// Useful to assess the noise enviromentment.
static volatile uint8_t lastRXerrno;

// Atomically returns and clears last (FHT8V) RX error code, or 0 if none.
// Set with such codes as FHT8VRXErr_GENERIC; never set to zero.
static void setLastRXErr(const uint8_t err) { ATOMIC_BLOCK (ATOMIC_RESTORESTATE) { lastRXerrno = err; } }
    16fe:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1700:	f8 94       	cli
    1702:	85 e0       	ldi	r24, 0x05	; 5
    1704:	9e c0       	rjmp	.+316    	; 0x1842 <FHT8VCallForHeatPoll()+0x1ca>
#endif
          setLastRXErr(FHT8VRXErr_BAD_RX_STATSFRAME);
          _SetupRFM22ToEavesdropOnFHT8V(); // Reset/restart RX.
          return(false); // Didn't look like valid JSON.
          }
        else if(MESSAGING_FULL_STATS_FLAGS_HEADER_MSBS == (b & MESSAGING_FULL_STATS_FLAGS_HEADER_MASK))
    1706:	e0 7e       	andi	r30, 0xE0	; 224
    1708:	e0 36       	cpi	r30, 0x60	; 96
    170a:	d1 f4       	brne	.+52     	; 0x1740 <FHT8VCallForHeatPoll()+0xc8>
          {
          // May be binary stats frame, so attempt to decode...
          FullStatsMessageCore_t content;
          // (TODO: should reject non-secure messages when expecting secure ones...)
          const uint8_t *msg = decodeFullStatsMessageCore(FHT8VRXHubArea, sizeof(FHT8VRXHubArea)-pos, stTXalwaysAll, false, &content);
    170c:	6e e3       	ldi	r22, 0x3E	; 62
    170e:	62 1b       	sub	r22, r18
    1710:	75 e0       	ldi	r23, 0x05	; 5
    1712:	e7 2e       	mov	r14, r23
    1714:	f1 2c       	mov	r15, r1
    1716:	ec 0e       	add	r14, r28
    1718:	fd 1e       	adc	r15, r29
    171a:	8e e4       	ldi	r24, 0x4E	; 78
    171c:	92 e0       	ldi	r25, 0x02	; 2
    171e:	40 e0       	ldi	r20, 0x00	; 0
    1720:	50 e0       	ldi	r21, 0x00	; 0
    1722:	20 e0       	ldi	r18, 0x00	; 0
    1724:	87 01       	movw	r16, r14
    1726:	0e 94 c4 11 	call	0x2388	; 0x2388 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)>
          if(NULL != msg)
    172a:	89 2b       	or	r24, r25
    172c:	09 f4       	brne	.+2      	; 0x1730 <FHT8VCallForHeatPoll()+0xb8>
    172e:	8c c0       	rjmp	.+280    	; 0x1848 <FHT8VCallForHeatPoll()+0x1d0>
             {
             if(content.containsID)
    1730:	8d 81       	ldd	r24, Y+5	; 0x05
    1732:	80 ff       	sbrs	r24, 0
    1734:	6e c0       	rjmp	.+220    	; 0x1812 <FHT8VCallForHeatPoll()+0x19a>
               DEBUG_SERIAL_PRINTFMT(content.id0, HEX);
               DEBUG_SERIAL_PRINT(' ');
               DEBUG_SERIAL_PRINTFMT(content.id1, HEX);
               DEBUG_SERIAL_PRINTLN();
#endif
               recordCoreStats(false, &content);
    1736:	80 e0       	ldi	r24, 0x00	; 0
    1738:	b7 01       	movw	r22, r14
    173a:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <recordCoreStats(bool, FullStatsMessageCore const*)>
    173e:	69 c0       	rjmp	.+210    	; 0x1812 <FHT8VCallForHeatPoll()+0x19a>

          _SetupRFM22ToEavesdropOnFHT8V(); // Reset/restart RX.
          return(false); // Nothing valid received.
          }

        if(pos < 2)
    1740:	22 30       	cpi	r18, 0x02	; 2
    1742:	b0 f4       	brcc	.+44     	; 0x1770 <FHT8VCallForHeatPoll()+0xf8>
// Useful to assess the noise enviromentment.
static volatile uint8_t lastRXerrno;

// Atomically returns and clears last (FHT8V) RX error code, or 0 if none.
// Set with such codes as FHT8VRXErr_GENERIC; never set to zero.
static void setLastRXErr(const uint8_t err) { ATOMIC_BLOCK (ATOMIC_RESTORESTATE) { lastRXerrno = err; } }
    1744:	9f b7       	in	r25, 0x3f	; 63
    1746:	f8 94       	cli
    1748:	82 e0       	ldi	r24, 0x02	; 2
    174a:	80 93 4c 02 	sts	0x024C, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    174e:	9f bf       	out	0x3f, r25	; 63
            DEBUG_SERIAL_PRINT_FLASHSTRING(" 0x");
            DEBUG_SERIAL_PRINTFMT(FHT8VRXHubArea[p], HEX);
            }
          DEBUG_SERIAL_PRINTLN();
#endif
          seedRNG8(FHT8VRXHubArea[pos], FHT8VRXHubArea[pos+2], FHT8VRXHubArea[pos+5]); // Attempt to gather some entropy from RX noise. (TODO-302).
    1750:	f9 01       	movw	r30, r18
    1752:	e2 5b       	subi	r30, 0xB2	; 178
    1754:	fd 4f       	sbci	r31, 0xFD	; 253
    1756:	80 81       	ld	r24, Z
    1758:	62 81       	ldd	r22, Z+2	; 0x02
    175a:	45 81       	ldd	r20, Z+5	; 0x05
    175c:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <seedRNG8(unsigned char, unsigned char, unsigned char)>
    1760:	73 c0       	rjmp	.+230    	; 0x1848 <FHT8VCallForHeatPoll()+0x1d0>
          _SetupRFM22ToEavesdropOnFHT8V(); // Reset/restart RX.
          return(false);
    1762:	8f 5f       	subi	r24, 0xFF	; 255
    1764:	2f 5f       	subi	r18, 0xFF	; 255
    1766:	3f 4f       	sbci	r19, 0xFF	; 255
    // Attempt to read the entire frame.
    RFM22RXFIFO(FHT8VRXHubArea, sizeof(FHT8VRXHubArea));
    uint8_t pos; // Current byte position in RX buffer...
    // Validate FHT8V premable (zeros encoded as up to 6x 0xcc bytes), else abort/restart.
    // Insist on at least a couple of bytes of valid preamble being present.
    for(pos = 0; pos < 6; ++pos)
    1768:	26 30       	cpi	r18, 0x06	; 6
    176a:	31 05       	cpc	r19, r1
    176c:	09 f0       	breq	.+2      	; 0x1770 <FHT8VCallForHeatPoll()+0xf8>
    176e:	ad cf       	rjmp	.-166    	; 0x16ca <FHT8VCallForHeatPoll()+0x52>
        break; // If enough preamble has been seen, move on to the body.
        }
      }
    fht8v_msg_t command;
    uint8_t const *lastByte = FHT8VRXHubArea + FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE - 1;
    uint8_t const *trailer = FHT8VDecodeBitStream(FHT8VRXHubArea + pos, lastByte, &command);
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	09 e8       	ldi	r16, 0x89	; 137
    1774:	12 e0       	ldi	r17, 0x02	; 2
    1776:	82 5b       	subi	r24, 0xB2	; 178
    1778:	9d 4f       	sbci	r25, 0xFD	; 253
    177a:	b8 01       	movw	r22, r16
    177c:	ae 01       	movw	r20, r28
    177e:	4f 5f       	subi	r20, 0xFF	; 255
    1780:	5f 4f       	sbci	r21, 0xFF	; 255
    1782:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)>
    1786:	fc 01       	movw	r30, r24
    if(NULL != trailer)
    1788:	00 97       	sbiw	r24, 0x00	; 0
    178a:	09 f4       	brne	.+2      	; 0x178e <FHT8VCallForHeatPoll()+0x116>
    178c:	45 c0       	rjmp	.+138    	; 0x1818 <FHT8VCallForHeatPoll()+0x1a0>

#if defined(ALLOW_STATS_RX) // Only look for the trailer if supported.
      // If whole FHT8V frame was OK then check if there is a valid stats trailer.

      // Check for 'core' stats trailer.
      if((trailer + FullStatsMessageCore_MAX_BYTES_ON_WIRE <= lastByte) && // Enough space for minimum-stats trailer.
    178e:	08 96       	adiw	r24, 0x08	; 8
    1790:	08 17       	cp	r16, r24
    1792:	19 07       	cpc	r17, r25
    1794:	48 f1       	brcs	.+82     	; 0x17e8 <FHT8VCallForHeatPoll()+0x170>
    1796:	80 81       	ld	r24, Z
    1798:	80 7e       	andi	r24, 0xE0	; 224
    179a:	80 36       	cpi	r24, 0x60	; 96
    179c:	29 f5       	brne	.+74     	; 0x17e8 <FHT8VCallForHeatPoll()+0x170>
         (MESSAGING_FULL_STATS_FLAGS_HEADER_MSBS == (trailer[0] & MESSAGING_FULL_STATS_FLAGS_HEADER_MASK)))
        {
        FullStatsMessageCore_t content;
        const uint8_t *tail = decodeFullStatsMessageCore(trailer, lastByte - trailer, stTXalwaysAll, false, &content);
    179e:	60 2f       	mov	r22, r16
    17a0:	6e 1b       	sub	r22, r30
    17a2:	cf 01       	movw	r24, r30
    17a4:	40 e0       	ldi	r20, 0x00	; 0
    17a6:	50 e0       	ldi	r21, 0x00	; 0
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	8e 01       	movw	r16, r28
    17ac:	0b 5f       	subi	r16, 0xFB	; 251
    17ae:	1f 4f       	sbci	r17, 0xFF	; 255
    17b0:	0e 94 c4 11 	call	0x2388	; 0x2388 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)>
        if(NULL != tail)
    17b4:	89 2b       	or	r24, r25
    17b6:	c1 f0       	breq	.+48     	; 0x17e8 <FHT8VCallForHeatPoll()+0x170>
          // Received trailing stats frame!
 
          // If ID is present then make sure it matches that implied by the FHT8V frame (else reject this trailer)
          // else file it in from the FHT8C frame.
          bool allGood = true;
          if(content.containsID)
    17b8:	9d 81       	ldd	r25, Y+5	; 0x05
    17ba:	29 81       	ldd	r18, Y+1	; 0x01
    17bc:	90 ff       	sbrs	r25, 0
    17be:	08 c0       	rjmp	.+16     	; 0x17d0 <FHT8VCallForHeatPoll()+0x158>
            {
            if((content.id0 != command.hc1) || (content.id1 != command.hc2))
    17c0:	8e 81       	ldd	r24, Y+6	; 0x06
    17c2:	82 17       	cp	r24, r18
    17c4:	59 f4       	brne	.+22     	; 0x17dc <FHT8VCallForHeatPoll()+0x164>
    17c6:	9f 81       	ldd	r25, Y+7	; 0x07
    17c8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ca:	98 17       	cp	r25, r24
    17cc:	39 f4       	brne	.+14     	; 0x17dc <FHT8VCallForHeatPoll()+0x164>
    17ce:	4c c0       	rjmp	.+152    	; 0x1868 <FHT8VCallForHeatPoll()+0x1f0>
              { allGood = false; }
            }
          else
            {
            content.id0 = command.hc1;
    17d0:	2e 83       	std	Y+6, r18	; 0x06
            content.id1 = command.hc2;
    17d2:	8a 81       	ldd	r24, Y+2	; 0x02
    17d4:	8f 83       	std	Y+7, r24	; 0x07
            content.containsID = true;
    17d6:	91 60       	ori	r25, 0x01	; 1
    17d8:	9d 83       	std	Y+5, r25	; 0x05
    17da:	46 c0       	rjmp	.+140    	; 0x1868 <FHT8VCallForHeatPoll()+0x1f0>
// Useful to assess the noise enviromentment.
static volatile uint8_t lastRXerrno;

// Atomically returns and clears last (FHT8V) RX error code, or 0 if none.
// Set with such codes as FHT8VRXErr_GENERIC; never set to zero.
static void setLastRXErr(const uint8_t err) { ATOMIC_BLOCK (ATOMIC_RESTORESTATE) { lastRXerrno = err; } }
    17dc:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    17de:	f8 94       	cli
    17e0:	84 e0       	ldi	r24, 0x04	; 4
    17e2:	80 93 4c 02 	sts	0x024C, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    17e6:	9f bf       	out	0x3f, r25	; 63
        }
#endif
#endif

      // Potentially accept as call for heat only if command is 0x26 (38) and value open enough as used by OpenTRV to TX.
      if((0x26 == command.command) && (command.extension >= NominalRadValve.getMinValvePcReallyOpen()))
    17e8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ea:	86 32       	cpi	r24, 0x26	; 38
    17ec:	91 f4       	brne	.+36     	; 0x1812 <FHT8VCallForHeatPoll()+0x19a>
    17ee:	1c 81       	ldd	r17, Y+4	; 0x04
    17f0:	0e 94 0b 04 	call	0x816	; 0x816 <ModelledRadValve::getMinValvePcReallyOpen()>
    17f4:	18 17       	cp	r17, r24
    17f6:	68 f0       	brcs	.+26     	; 0x1812 <FHT8VCallForHeatPoll()+0x19a>
        {
        if(FHT8VHubAcceptedHouseCode(command.hc1, command.hc2))
          {
          // Accept if house code not filtered out.
          const uint16_t compoundHC = (command.hc1 << 8) | command.hc2;
    17f8:	99 81       	ldd	r25, Y+1	; 0x01
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	2a 81       	ldd	r18, Y+2	; 0x02
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	82 2b       	or	r24, r18
    1802:	93 2b       	or	r25, r19
          ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    1804:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1806:	f8 94       	cli
            { lastCallForHeatHC = compoundHC; } // Update atomically.
    1808:	90 93 37 01 	sts	0x0137, r25
    180c:	80 93 36 01 	sts	0x0136, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1810:	2f bf       	out	0x3f, r18	; 63
//#if defined(SAVE_RX_ENERGY)
//          StopEavesdropOnFHT8V(); // Need not eavesdrop for a while.
//#endif
          }
        }
      _SetupRFM22ToEavesdropOnFHT8V(); // Reset/restart RX.
    1812:	0e 94 09 0a 	call	0x1412	; 0x1412 <_SetupRFM22ToEavesdropOnFHT8V()>
    1816:	0e c0       	rjmp	.+28     	; 0x1834 <FHT8VCallForHeatPoll()+0x1bc>
// Useful to assess the noise enviromentment.
static volatile uint8_t lastRXerrno;

// Atomically returns and clears last (FHT8V) RX error code, or 0 if none.
// Set with such codes as FHT8VRXErr_GENERIC; never set to zero.
static void setLastRXErr(const uint8_t err) { ATOMIC_BLOCK (ATOMIC_RESTORESTATE) { lastRXerrno = err; } }
    1818:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    181a:	f8 94       	cli
    181c:	83 e0       	ldi	r24, 0x03	; 3
    181e:	11 c0       	rjmp	.+34     	; 0x1842 <FHT8VCallForHeatPoll()+0x1ca>

    // Ensure that RX is re-enabled to avoid missing anything.
    _SetupRFM22ToEavesdropOnFHT8V(); // Reset/restart RX.
    return(false); // Nothing valid received.
    }
  else if(status & 0x80) // Got sync from incoming FHT8V message.
    1820:	87 ff       	sbrs	r24, 7
    1822:	0a c0       	rjmp	.+20     	; 0x1838 <FHT8VCallForHeatPoll()+0x1c0>
    {
    // Capture some entropy from RSSI and timing...
    const uint8_t rssi = RFM22RSSI();
    1824:	0e 94 2a 19 	call	0x3254	; 0x3254 <RFM22RSSI()>
    // TODO adjust output power down a little if RX very loud.
    addEntropyToPool(rssi ^ (uint8_t)(status ^ (status >> 8)), 1); // Maybe ~1 real bit of entropy.
    1828:	91 2f       	mov	r25, r17
    182a:	90 27       	eor	r25, r16
    182c:	89 27       	eor	r24, r25
    182e:	61 e0       	ldi	r22, 0x01	; 1
    1830:	0e 94 c1 1b 	call	0x3782	; 0x3782 <addEntropyToPool(unsigned char, unsigned char)>
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	0b c0       	rjmp	.+22     	; 0x184e <FHT8VCallForHeatPoll()+0x1d6>
      }
#endif 
//    syncSeen = true;
    return(true);
    }
  else if(status & 0x8000) // RX FIFO overflow/underflow: give up and restart...
    1838:	97 ff       	sbrs	r25, 7
    183a:	08 c0       	rjmp	.+16     	; 0x184c <FHT8VCallForHeatPoll()+0x1d4>
// Useful to assess the noise enviromentment.
static volatile uint8_t lastRXerrno;

// Atomically returns and clears last (FHT8V) RX error code, or 0 if none.
// Set with such codes as FHT8VRXErr_GENERIC; never set to zero.
static void setLastRXErr(const uint8_t err) { ATOMIC_BLOCK (ATOMIC_RESTORESTATE) { lastRXerrno = err; } }
    183c:	9f b7       	in	r25, 0x3f	; 63
    183e:	f8 94       	cli
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	80 93 4c 02 	sts	0x024C, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1846:	9f bf       	out	0x3f, r25	; 63
    {
    setLastRXErr(FHT8VRXErr_GENERIC);
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("RX FIFO problem");
#endif
    _SetupRFM22ToEavesdropOnFHT8V(); // Reset/restart RX.
    1848:	0e 94 09 0a 	call	0x1412	; 0x1412 <_SetupRFM22ToEavesdropOnFHT8V()>
    return(false);
    184c:	80 e0       	ldi	r24, 0x00	; 0
    }

  return(false);
  }
    184e:	2b 96       	adiw	r28, 0x0b	; 11
    1850:	0f b6       	in	r0, 0x3f	; 63
    1852:	f8 94       	cli
    1854:	de bf       	out	0x3e, r29	; 62
    1856:	0f be       	out	0x3f, r0	; 63
    1858:	cd bf       	out	0x3d, r28	; 61
    185a:	cf 91       	pop	r28
    185c:	df 91       	pop	r29
    185e:	1f 91       	pop	r17
    1860:	0f 91       	pop	r16
    1862:	ff 90       	pop	r15
    1864:	ef 90       	pop	r14
    1866:	08 95       	ret
            content.id1 = command.hc2;
            content.containsID = true;
            }
 
          // If frame looks good then capture it.
          if(allGood) { recordCoreStats(false, &content); }
    1868:	80 e0       	ldi	r24, 0x00	; 0
    186a:	be 01       	movw	r22, r28
    186c:	6b 5f       	subi	r22, 0xFB	; 251
    186e:	7f 4f       	sbci	r23, 0xFF	; 255
    1870:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <recordCoreStats(bool, FullStatsMessageCore const*)>
    1874:	b9 cf       	rjmp	.-142    	; 0x17e8 <FHT8VCallForHeatPoll()+0x170>

00001876 <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)>:
//   * trailer  if not null then a stats trailer is appended, built from that info plus a CRC
//   * command  on entry hc1, hc2 (and addresss if used) must be set correctly, this sets the command and extension; never NULL
// The generated command frame can be resent indefinitely.
// The output buffer used must be (at least) FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE bytes.
// Returns pointer to the terminating 0xff on exit.
uint8_t *FHT8VCreateValveSetCmdFrameHT_r(uint8_t *const bptrInitial, const bool doHeader, fht8v_msg_t *const command, const uint8_t TRVPercentOpen, const FullStatsMessageCore_t *trailer)
    1876:	cf 92       	push	r12
    1878:	df 92       	push	r13
    187a:	ef 92       	push	r14
    187c:	ff 92       	push	r15
    187e:	0f 93       	push	r16
    1880:	1f 93       	push	r17
    1882:	cf 93       	push	r28
    1884:	df 93       	push	r29
    1886:	7c 01       	movw	r14, r24
    1888:	36 2f       	mov	r19, r22
    188a:	ea 01       	movw	r28, r20
  {
  uint8_t *bptr = bptrInitial;

  command->command = 0x26;
    188c:	86 e2       	ldi	r24, 0x26	; 38
    188e:	8a 83       	std	Y+2, r24	; 0x02
  command->extension = (TRVPercentOpen * 255) / 100;
    1890:	8f ef       	ldi	r24, 0xFF	; 255
    1892:	28 9f       	mul	r18, r24
    1894:	c0 01       	movw	r24, r0
    1896:	11 24       	eor	r1, r1
    1898:	64 e6       	ldi	r22, 0x64	; 100
    189a:	70 e0       	ldi	r23, 0x00	; 0
    189c:	0e 94 0d 3c 	call	0x781a	; 0x781a <__divmodhi4>
    18a0:	6b 83       	std	Y+3, r22	; 0x03

  // Add RFM22/32-friendly pre-preamble if requested, eg when calling for heat from the boiler (TRV actually open).
  // NOTE: this requires more buffer space.
  if(doHeader)
    18a2:	33 23       	and	r19, r19
    18a4:	11 f4       	brne	.+4      	; 0x18aa <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)+0x34>
    18a6:	c7 01       	movw	r24, r14
    18a8:	09 c0       	rjmp	.+18     	; 0x18bc <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)+0x46>
    {
    memset(bptr, RFM22_PREAMBLE_BYTE, RFM22_PREAMBLE_BYTES);
    18aa:	c7 01       	movw	r24, r14
    18ac:	6a ea       	ldi	r22, 0xAA	; 170
    18ae:	70 e0       	ldi	r23, 0x00	; 0
    18b0:	45 e0       	ldi	r20, 0x05	; 5
    18b2:	50 e0       	ldi	r21, 0x00	; 0
    18b4:	0e 94 b2 02 	call	0x564	; 0x564 <memset>
    bptr += RFM22_PREAMBLE_BYTES;
    18b8:	c7 01       	movw	r24, r14
    18ba:	05 96       	adiw	r24, 0x05	; 5
    }

  bptr = FHT8VCreate200usBitStreamBptr(bptr, command);
    18bc:	be 01       	movw	r22, r28
    18be:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>
    18c2:	d8 2e       	mov	r13, r24
    18c4:	c9 2e       	mov	r12, r25

#if defined(ALLOW_STATS_TX)
  if(NULL != trailer)
    18c6:	01 15       	cp	r16, r1
    18c8:	11 05       	cpc	r17, r1
    18ca:	79 f0       	breq	.+30     	; 0x18ea <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)+0x74>
      }
    else
#endif
      {
      // Assume enough space in buffer for largest possible stats message.
      uint8_t * const tail = encodeFullStatsMessageCore(bptr, FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE - (bptr - bptrInitial), getStatsTXLevel(), false, trailer);
    18cc:	0e 94 b7 1b 	call	0x376e	; 0x376e <getStatsTXLevel()>
    18d0:	ac 01       	movw	r20, r24
    18d2:	6e 2d       	mov	r22, r14
    18d4:	64 5c       	subi	r22, 0xC4	; 196
    18d6:	6d 19       	sub	r22, r13
    18d8:	8d 2d       	mov	r24, r13
    18da:	9c 2d       	mov	r25, r12
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	0e 94 9f 12 	call	0x253e	; 0x253e <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)>
      if(NULL != tail) { bptr = tail; } // Encoding should not actually fail, but this copes gracefully if so!
    18e2:	00 97       	sbiw	r24, 0x00	; 0
    18e4:	11 f0       	breq	.+4      	; 0x18ea <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)+0x74>
    18e6:	d8 2e       	mov	r13, r24
    18e8:	c9 2e       	mov	r12, r25
  // Check that the buffer end was not overrun.
  if(bptr - bptrInitial >= FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE) { panic(F("TX gen too large")); }
#endif

  return(bptr);
  }
    18ea:	8d 2d       	mov	r24, r13
    18ec:	9c 2d       	mov	r25, r12
    18ee:	df 91       	pop	r29
    18f0:	cf 91       	pop	r28
    18f2:	1f 91       	pop	r17
    18f4:	0f 91       	pop	r16
    18f6:	ff 90       	pop	r15
    18f8:	ef 90       	pop	r14
    18fa:	df 90       	pop	r13
    18fc:	cf 90       	pop	r12
    18fe:	08 95       	ret

00001900 <crc7_5B_update(unsigned char, unsigned char)>:
 * For 2 or 3 byte payloads this should have a Hamming distance of 4 and be within a factor of 2 of optimal error detection.
 * <p>
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    1900:	38 2f       	mov	r19, r24
    1902:	70 e8       	ldi	r23, 0x80	; 128
    1904:	40 e0       	ldi	r20, 0x00	; 0
    1906:	50 e0       	ldi	r21, 0x00	; 0
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    1908:	e6 2f       	mov	r30, r22
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	a1 e0       	ldi	r26, 0x01	; 1
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
    190e:	67 e3       	ldi	r22, 0x37	; 55
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
    1910:	83 2f       	mov	r24, r19
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	26 e0       	ldi	r18, 0x06	; 6
    1916:	96 95       	lsr	r25
    1918:	87 95       	ror	r24
    191a:	2a 95       	dec	r18
    191c:	e1 f7       	brne	.-8      	; 0x1916 <crc7_5B_update(unsigned char, unsigned char)+0x16>
    191e:	28 2f       	mov	r18, r24
    1920:	21 70       	andi	r18, 0x01	; 1
        if(0 != (datum & i)) { bit = !bit; }
    1922:	87 2f       	mov	r24, r23
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	8e 23       	and	r24, r30
    1928:	9f 23       	and	r25, r31
    192a:	89 2b       	or	r24, r25
    192c:	09 f0       	breq	.+2      	; 0x1930 <crc7_5B_update(unsigned char, unsigned char)+0x30>
    192e:	2a 27       	eor	r18, r26
        crc <<= 1;
    1930:	33 0f       	add	r19, r19
        if(bit) { crc ^= 0x37; }
    1932:	21 11       	cpse	r18, r1
    1934:	36 27       	eor	r19, r22
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
    1936:	76 95       	lsr	r23
    1938:	4f 5f       	subi	r20, 0xFF	; 255
    193a:	5f 4f       	sbci	r21, 0xFF	; 255
    193c:	48 30       	cpi	r20, 0x08	; 8
    193e:	51 05       	cpc	r21, r1
    1940:	39 f7       	brne	.-50     	; 0x1910 <crc7_5B_update(unsigned char, unsigned char)+0x10>
        if(0 != (datum & i)) { bit = !bit; }
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
        }
    return(crc & 0x7f);
    }
    1942:	83 2f       	mov	r24, r19
    1944:	8f 77       	andi	r24, 0x7F	; 127
    1946:	08 95       	ret

00001948 <verifyHeaderAndCRCForTrailingMinimalStatsPayload(unsigned char const*)>:




// Return true if header/structure and CRC looks valid for (3-byte) buffered stats payload.
bool verifyHeaderAndCRCForTrailingMinimalStatsPayload(uint8_t const *const buf)
    1948:	fc 01       	movw	r30, r24
  {
  return((MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MSBS == ((buf[0]) & MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MASK)) && // Plausible header.
         (0 == (buf[1] & 0x80)) && // Top bit is clear on this byte also.
         (buf[2] == crc7_5B_update(buf[0], buf[1]))); // CRC validates, top bit implicitly zero.
    194a:	30 81       	ld	r19, Z
    194c:	83 2f       	mov	r24, r19
    194e:	80 7e       	andi	r24, 0xE0	; 224
    1950:	80 34       	cpi	r24, 0x40	; 64
    1952:	51 f5       	brne	.+84     	; 0x19a8 <verifyHeaderAndCRCForTrailingMinimalStatsPayload(unsigned char const*)+0x60>
    1954:	81 81       	ldd	r24, Z+1	; 0x01
    1956:	87 fd       	sbrc	r24, 7
    1958:	27 c0       	rjmp	.+78     	; 0x19a8 <verifyHeaderAndCRCForTrailingMinimalStatsPayload(unsigned char const*)+0x60>
    195a:	72 81       	ldd	r23, Z+2	; 0x02
    195c:	60 e8       	ldi	r22, 0x80	; 128
    195e:	40 e0       	ldi	r20, 0x00	; 0
    1960:	50 e0       	ldi	r21, 0x00	; 0
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    1962:	e8 2f       	mov	r30, r24
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	b1 e0       	ldi	r27, 0x01	; 1
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
    1968:	a7 e3       	ldi	r26, 0x37	; 55
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
    196a:	83 2f       	mov	r24, r19
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	26 e0       	ldi	r18, 0x06	; 6
    1970:	96 95       	lsr	r25
    1972:	87 95       	ror	r24
    1974:	2a 95       	dec	r18
    1976:	e1 f7       	brne	.-8      	; 0x1970 <verifyHeaderAndCRCForTrailingMinimalStatsPayload(unsigned char const*)+0x28>
    1978:	28 2f       	mov	r18, r24
    197a:	21 70       	andi	r18, 0x01	; 1
        if(0 != (datum & i)) { bit = !bit; }
    197c:	86 2f       	mov	r24, r22
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	8e 23       	and	r24, r30
    1982:	9f 23       	and	r25, r31
    1984:	89 2b       	or	r24, r25
    1986:	09 f0       	breq	.+2      	; 0x198a <verifyHeaderAndCRCForTrailingMinimalStatsPayload(unsigned char const*)+0x42>
    1988:	2b 27       	eor	r18, r27
        crc <<= 1;
    198a:	33 0f       	add	r19, r19
        if(bit) { crc ^= 0x37; }
    198c:	21 11       	cpse	r18, r1
    198e:	3a 27       	eor	r19, r26
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
    1990:	66 95       	lsr	r22
    1992:	4f 5f       	subi	r20, 0xFF	; 255
    1994:	5f 4f       	sbci	r21, 0xFF	; 255
    1996:	48 30       	cpi	r20, 0x08	; 8
    1998:	51 05       	cpc	r21, r1
    199a:	39 f7       	brne	.-50     	; 0x196a <verifyHeaderAndCRCForTrailingMinimalStatsPayload(unsigned char const*)+0x22>
    199c:	80 e0       	ldi	r24, 0x00	; 0
    199e:	3f 77       	andi	r19, 0x7F	; 127
    19a0:	73 17       	cp	r23, r19
    19a2:	19 f4       	brne	.+6      	; 0x19aa <verifyHeaderAndCRCForTrailingMinimalStatsPayload(unsigned char const*)+0x62>
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	08 95       	ret
// Return true if header/structure and CRC looks valid for (3-byte) buffered stats payload.
bool verifyHeaderAndCRCForTrailingMinimalStatsPayload(uint8_t const *const buf)
  {
  return((MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MSBS == ((buf[0]) & MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MASK)) && // Plausible header.
         (0 == (buf[1] & 0x80)) && // Top bit is clear on this byte also.
         (buf[2] == crc7_5B_update(buf[0], buf[1]))); // CRC validates, top bit implicitly zero.
    19a8:	80 e0       	ldi	r24, 0x00	; 0
  }
    19aa:	08 95       	ret

000019ac <quickValidateRawSimpleJSONMessage(char const*)>:
// Returns true unless the buffer clearly does not contain a possible valid raw JSON message.
// This message is expected to be one object wrapped in '{' and '}'
// and containing only ASCII printable/non-control characters in the range [32,126].
// The message must be no longer than MSG_JSON_MAX_LENGTH excluding trailing null.
// This only does a quick validation for egregious errors.
bool quickValidateRawSimpleJSONMessage(const char * const buf)
    19ac:	fc 01       	movw	r30, r24
  {
  if('{' != buf[0]) { return(false); }
    19ae:	80 81       	ld	r24, Z
    19b0:	8b 37       	cpi	r24, 0x7B	; 123
    19b2:	a9 f4       	brne	.+42     	; 0x19de <quickValidateRawSimpleJSONMessage(char const*)+0x32>
  // Scan up to maximum length for terminating '}'.
  const char *p = buf + 1;
  for(int i = 1; i < MSG_JSON_MAX_LENGTH; ++i)
    19b4:	9f 01       	movw	r18, r30
    19b6:	2a 5c       	subi	r18, 0xCA	; 202
    19b8:	3f 4f       	sbci	r19, 0xFF	; 255
    {
    const char c = *p++;
    19ba:	91 81       	ldd	r25, Z+1	; 0x01
    // With a terminating '}' (followed by '\0') the message is superficially valid.
    if(('}' == c) && ('\0' == *p)) { return(true); }
    19bc:	9d 37       	cpi	r25, 0x7D	; 125
    19be:	29 f4       	brne	.+10     	; 0x19ca <quickValidateRawSimpleJSONMessage(char const*)+0x1e>
    19c0:	82 81       	ldd	r24, Z+2	; 0x02
    19c2:	88 23       	and	r24, r24
    19c4:	11 f4       	brne	.+4      	; 0x19ca <quickValidateRawSimpleJSONMessage(char const*)+0x1e>
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	08 95       	ret
    // Non-printable/control character makes the message invalid.
    if((c < 32) || (c > 126)) { return(false); }
    19ca:	89 2f       	mov	r24, r25
    19cc:	80 52       	subi	r24, 0x20	; 32
    19ce:	8f 35       	cpi	r24, 0x5F	; 95
    19d0:	30 f4       	brcc	.+12     	; 0x19de <quickValidateRawSimpleJSONMessage(char const*)+0x32>
    // Premature end of message renders it invalid.
    if('\0' == c) { return(false); }
    19d2:	99 23       	and	r25, r25
    19d4:	21 f0       	breq	.+8      	; 0x19de <quickValidateRawSimpleJSONMessage(char const*)+0x32>
    19d6:	31 96       	adiw	r30, 0x01	; 1
bool quickValidateRawSimpleJSONMessage(const char * const buf)
  {
  if('{' != buf[0]) { return(false); }
  // Scan up to maximum length for terminating '}'.
  const char *p = buf + 1;
  for(int i = 1; i < MSG_JSON_MAX_LENGTH; ++i)
    19d8:	e2 17       	cp	r30, r18
    19da:	f3 07       	cpc	r31, r19
    19dc:	71 f7       	brne	.-36     	; 0x19ba <quickValidateRawSimpleJSONMessage(char const*)+0xe>
    19de:	80 e0       	ldi	r24, 0x00	; 0
    if((c < 32) || (c > 126)) { return(false); }
    // Premature end of message renders it invalid.
    if('\0' == c) { return(false); }
    }
  return(false); // Bad (unterminated) message.
  }
    19e0:	08 95       	ret

000019e2 <adjustJSONMsgForTXAndComputeCRC(char*)>:
// Computes and returns 0x5B 7-bit CRC in range [0,127]
// or 0xff if the JSON message obviously invalid and should not be TXed.
// The CRC is initialised with the initial '{' character.
// NOTE: adjusts content in place.
#define adjustJSONMsgForTXAndComputeCRC_ERR 0xff // Error return value.
uint8_t adjustJSONMsgForTXAndComputeCRC(char * const bptr)
    19e2:	0f 93       	push	r16
    19e4:	1f 93       	push	r17
    19e6:	18 2f       	mov	r17, r24
    19e8:	09 2f       	mov	r16, r25
  {
  // Do initial quick validation before computing CRC, etc,
  if(!quickValidateRawSimpleJSONMessage(bptr)) { return(adjustJSONMsgForTXAndComputeCRC_ERR); }
    19ea:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <quickValidateRawSimpleJSONMessage(char const*)>
    19ee:	88 23       	and	r24, r24
    19f0:	09 f4       	brne	.+2      	; 0x19f4 <adjustJSONMsgForTXAndComputeCRC(char*)+0x12>
    19f2:	51 c0       	rjmp	.+162    	; 0x1a96 <adjustJSONMsgForTXAndComputeCRC(char*)+0xb4>
    19f4:	81 2f       	mov	r24, r17
    19f6:	90 2f       	mov	r25, r16
    19f8:	9c 01       	movw	r18, r24
    19fa:	f9 01       	movw	r30, r18
    19fc:	6b e7       	ldi	r22, 0x7B	; 123
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    19fe:	11 e0       	ldi	r17, 0x01	; 1
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
    1a00:	77 e3       	ldi	r23, 0x37	; 55
    1a02:	44 c0       	rjmp	.+136    	; 0x1a8c <adjustJSONMsgForTXAndComputeCRC(char*)+0xaa>
  uint8_t crc = '{';
  for(char *p = bptr; *++p; ) // Skip first char ('{'); loop until '\0'.
    {
    const char c = *p;
//    if(c & 0x80) { return(adjustJSONMsgForTXAndComputeCRC_ERR); } // No high-bits should be set!
    if(('}' == c) && ('\0' == *(p+1)))
    1a04:	9d 37       	cpi	r25, 0x7D	; 125
    1a06:	19 f5       	brne	.+70     	; 0x1a4e <adjustJSONMsgForTXAndComputeCRC(char*)+0x6c>
    1a08:	81 81       	ldd	r24, Z+1	; 0x01
    1a0a:	88 23       	and	r24, r24
    1a0c:	01 f5       	brne	.+64     	; 0x1a4e <adjustJSONMsgForTXAndComputeCRC(char*)+0x6c>
      {
      seenTrailingClosingBrace = true;
      const char newC = c | 0x80;
      *p = newC; // Set high bit.
    1a0e:	8d ef       	ldi	r24, 0xFD	; 253
    1a10:	80 83       	st	Z, r24
    1a12:	40 e8       	ldi	r20, 0x80	; 128
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	30 e0       	ldi	r19, 0x00	; 0
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    1a18:	71 e0       	ldi	r23, 0x01	; 1
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
    1a1a:	57 e3       	ldi	r21, 0x37	; 55
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
    1a1c:	86 2f       	mov	r24, r22
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	e6 e0       	ldi	r30, 0x06	; 6
    1a22:	96 95       	lsr	r25
    1a24:	87 95       	ror	r24
    1a26:	ea 95       	dec	r30
    1a28:	e1 f7       	brne	.-8      	; 0x1a22 <adjustJSONMsgForTXAndComputeCRC(char*)+0x40>
    1a2a:	98 2f       	mov	r25, r24
    1a2c:	91 70       	andi	r25, 0x01	; 1
        if(0 != (datum & i)) { bit = !bit; }
    1a2e:	84 2f       	mov	r24, r20
    1a30:	8d 7f       	andi	r24, 0xFD	; 253
    1a32:	09 f0       	breq	.+2      	; 0x1a36 <adjustJSONMsgForTXAndComputeCRC(char*)+0x54>
    1a34:	97 27       	eor	r25, r23
        crc <<= 1;
    1a36:	66 0f       	add	r22, r22
        if(bit) { crc ^= 0x37; }
    1a38:	91 11       	cpse	r25, r1
    1a3a:	65 27       	eor	r22, r21
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
    1a3c:	46 95       	lsr	r20
    1a3e:	2f 5f       	subi	r18, 0xFF	; 255
    1a40:	3f 4f       	sbci	r19, 0xFF	; 255
    1a42:	28 30       	cpi	r18, 0x08	; 8
    1a44:	31 05       	cpc	r19, r1
    1a46:	51 f7       	brne	.-44     	; 0x1a1c <adjustJSONMsgForTXAndComputeCRC(char*)+0x3a>
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
        }
    return(crc & 0x7f);
    1a48:	86 2f       	mov	r24, r22
    1a4a:	8f 77       	andi	r24, 0x7F	; 127
    1a4c:	25 c0       	rjmp	.+74     	; 0x1a98 <adjustJSONMsgForTXAndComputeCRC(char*)+0xb6>
      const char newC = c | 0x80;
      *p = newC; // Set high bit.
      crc = crc7_5B_update(crc, (uint8_t)newC); // Update CRC.
      return(crc);
      }
    crc = crc7_5B_update(crc, (uint8_t)c); // Update CRC.
    1a4e:	30 e8       	ldi	r19, 0x80	; 128
    1a50:	40 e0       	ldi	r20, 0x00	; 0
    1a52:	50 e0       	ldi	r21, 0x00	; 0
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    1a54:	a9 2f       	mov	r26, r25
    1a56:	b0 e0       	ldi	r27, 0x00	; 0
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
    1a58:	86 2f       	mov	r24, r22
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	06 e0       	ldi	r16, 0x06	; 6
    1a5e:	96 95       	lsr	r25
    1a60:	87 95       	ror	r24
    1a62:	0a 95       	dec	r16
    1a64:	e1 f7       	brne	.-8      	; 0x1a5e <adjustJSONMsgForTXAndComputeCRC(char*)+0x7c>
    1a66:	28 2f       	mov	r18, r24
    1a68:	21 70       	andi	r18, 0x01	; 1
        if(0 != (datum & i)) { bit = !bit; }
    1a6a:	83 2f       	mov	r24, r19
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	8a 23       	and	r24, r26
    1a70:	9b 23       	and	r25, r27
    1a72:	89 2b       	or	r24, r25
    1a74:	09 f0       	breq	.+2      	; 0x1a78 <adjustJSONMsgForTXAndComputeCRC(char*)+0x96>
    1a76:	21 27       	eor	r18, r17
        crc <<= 1;
    1a78:	66 0f       	add	r22, r22
        if(bit) { crc ^= 0x37; }
    1a7a:	21 11       	cpse	r18, r1
    1a7c:	67 27       	eor	r22, r23
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
    1a7e:	36 95       	lsr	r19
    1a80:	4f 5f       	subi	r20, 0xFF	; 255
    1a82:	5f 4f       	sbci	r21, 0xFF	; 255
    1a84:	48 30       	cpi	r20, 0x08	; 8
    1a86:	51 05       	cpc	r21, r1
    1a88:	39 f7       	brne	.-50     	; 0x1a58 <adjustJSONMsgForTXAndComputeCRC(char*)+0x76>
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
        }
    return(crc & 0x7f);
    1a8a:	6f 77       	andi	r22, 0x7F	; 127
  // Do initial quick validation before computing CRC, etc,
  if(!quickValidateRawSimpleJSONMessage(bptr)) { return(adjustJSONMsgForTXAndComputeCRC_ERR); }
//  if('{' != *bptr) { return(adjustJSONMsgForTXAndComputeCRC_ERR); }
  bool seenTrailingClosingBrace = false;
  uint8_t crc = '{';
  for(char *p = bptr; *++p; ) // Skip first char ('{'); loop until '\0'.
    1a8c:	31 96       	adiw	r30, 0x01	; 1
    1a8e:	90 81       	ld	r25, Z
    1a90:	99 23       	and	r25, r25
    1a92:	09 f0       	breq	.+2      	; 0x1a96 <adjustJSONMsgForTXAndComputeCRC(char*)+0xb4>
    1a94:	b7 cf       	rjmp	.-146    	; 0x1a04 <adjustJSONMsgForTXAndComputeCRC(char*)+0x22>
    1a96:	8f ef       	ldi	r24, 0xFF	; 255
      }
    crc = crc7_5B_update(crc, (uint8_t)c); // Update CRC.
    }
  if(!seenTrailingClosingBrace) { return(adjustJSONMsgForTXAndComputeCRC_ERR); } // Missing ending '}'.
  return(crc);
  }
    1a98:	1f 91       	pop	r17
    1a9a:	0f 91       	pop	r16
    1a9c:	08 95       	ret

00001a9e <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)>:
// to allow easy handling with string functions.
//  * bptr  pointer to first byte/char (which must be '{')
//  * bufLen  remaining bytes in buffer starting at bptr
// NOTE: adjusts content in place iff the message appears to be valid JSON.
#define adjustJSONMsgForRXAndCheckCRC_ERR -1
int8_t adjustJSONMsgForRXAndCheckCRC(char * const bptr, const uint8_t bufLen)
    1a9e:	cf 92       	push	r12
    1aa0:	df 92       	push	r13
    1aa2:	ef 92       	push	r14
    1aa4:	ff 92       	push	r15
    1aa6:	0f 93       	push	r16
    1aa8:	1f 93       	push	r17
    1aaa:	cf 93       	push	r28
    1aac:	df 93       	push	r29
    1aae:	fc 01       	movw	r30, r24
  {
  if('{' != *bptr) { return(adjustJSONMsgForRXAndCheckCRC_ERR); }
    1ab0:	80 81       	ld	r24, Z
    1ab2:	8b 37       	cpi	r24, 0x7B	; 123
    1ab4:	09 f0       	breq	.+2      	; 0x1ab8 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x1a>
    1ab6:	43 c0       	rjmp	.+134    	; 0x1b3e <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0xa0>
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("adjustJSONMsgForRXAndCheckCRC()... {");
#endif
  uint8_t crc = '{';
  // Scan up to maximum length for terminating '}'-with-high-bit.
  const uint8_t ml = min(MSG_JSON_MAX_LENGTH, bufLen);
    1ab8:	68 33       	cpi	r22, 0x38	; 56
    1aba:	08 f0       	brcs	.+2      	; 0x1abe <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x20>
    1abc:	67 e3       	ldi	r22, 0x37	; 55
  char *p = bptr + 1;
    1abe:	ef 01       	movw	r28, r30
    1ac0:	21 96       	adiw	r28, 0x01	; 1
    1ac2:	3b e7       	ldi	r19, 0x7B	; 123
    1ac4:	a1 e0       	ldi	r26, 0x01	; 1
    1ac6:	b0 e0       	ldi	r27, 0x00	; 0
  for(int i = 1; i < ml; ++i)
    1ac8:	e6 2e       	mov	r14, r22
    1aca:	ff 24       	eor	r15, r15
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    1acc:	cc 24       	eor	r12, r12
    1ace:	c3 94       	inc	r12
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
    1ad0:	47 e3       	ldi	r20, 0x37	; 55
    1ad2:	d4 2e       	mov	r13, r20
    1ad4:	31 c0       	rjmp	.+98     	; 0x1b38 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x9a>
  // Scan up to maximum length for terminating '}'-with-high-bit.
  const uint8_t ml = min(MSG_JSON_MAX_LENGTH, bufLen);
  char *p = bptr + 1;
  for(int i = 1; i < ml; ++i)
    {
    const char c = *p++;
    1ad6:	fe 01       	movw	r30, r28
    1ad8:	71 91       	ld	r23, Z+
    crc = crc7_5B_update(crc, (uint8_t)c); // Update CRC.
    1ada:	60 e8       	ldi	r22, 0x80	; 128
    1adc:	40 e0       	ldi	r20, 0x00	; 0
    1ade:	50 e0       	ldi	r21, 0x00	; 0
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    1ae0:	07 2f       	mov	r16, r23
    1ae2:	10 e0       	ldi	r17, 0x00	; 0
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
    1ae4:	83 2f       	mov	r24, r19
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	26 e0       	ldi	r18, 0x06	; 6
    1aea:	96 95       	lsr	r25
    1aec:	87 95       	ror	r24
    1aee:	2a 95       	dec	r18
    1af0:	e1 f7       	brne	.-8      	; 0x1aea <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x4c>
    1af2:	28 2f       	mov	r18, r24
    1af4:	21 70       	andi	r18, 0x01	; 1
        if(0 != (datum & i)) { bit = !bit; }
    1af6:	86 2f       	mov	r24, r22
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	80 23       	and	r24, r16
    1afc:	91 23       	and	r25, r17
    1afe:	89 2b       	or	r24, r25
    1b00:	09 f0       	breq	.+2      	; 0x1b04 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x66>
    1b02:	2c 25       	eor	r18, r12
        crc <<= 1;
    1b04:	33 0f       	add	r19, r19
        if(bit) { crc ^= 0x37; }
    1b06:	21 11       	cpse	r18, r1
    1b08:	3d 25       	eor	r19, r13
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
    1b0a:	66 95       	lsr	r22
    1b0c:	4f 5f       	subi	r20, 0xFF	; 255
    1b0e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b10:	48 30       	cpi	r20, 0x08	; 8
    1b12:	51 05       	cpc	r21, r1
    1b14:	39 f7       	brne	.-50     	; 0x1ae4 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x46>
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
        }
    return(crc & 0x7f);
    1b16:	3f 77       	andi	r19, 0x7F	; 127
#endif
      return(i+1);
      }
#endif
    // With a terminating '}' (followed by '\0') the message is superficially valid.
    if((((char)('}' | 0x80)) == c) && (crc == (uint8_t)*p))
    1b18:	7d 3f       	cpi	r23, 0xFD	; 253
    1b1a:	49 f4       	brne	.+18     	; 0x1b2e <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x90>
    1b1c:	80 81       	ld	r24, Z
    1b1e:	38 17       	cp	r19, r24
    1b20:	31 f4       	brne	.+12     	; 0x1b2e <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x90>
      {
      *(p - 1) = '}';
    1b22:	8d e7       	ldi	r24, 0x7D	; 125
    1b24:	88 83       	st	Y, r24
      *p = '\0'; // Null terminate for use as a text string.
    1b26:	10 82       	st	Z, r1
#if 0 && defined(DEBUG)
      DEBUG_SERIAL_PRINTLN_FLASHSTRING("} OK with CRC");
#endif
      return(i+1);
    1b28:	8a 2f       	mov	r24, r26
    1b2a:	8f 5f       	subi	r24, 0xFF	; 255
    1b2c:	09 c0       	rjmp	.+18     	; 0x1b40 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0xa2>
      }
    // Non-printable/control character makes the message invalid.
    if((c < 32) || (c > 126))
    1b2e:	70 52       	subi	r23, 0x20	; 32
    1b30:	7f 35       	cpi	r23, 0x5F	; 95
    1b32:	28 f4       	brcc	.+10     	; 0x1b3e <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0xa0>
#endif
  uint8_t crc = '{';
  // Scan up to maximum length for terminating '}'-with-high-bit.
  const uint8_t ml = min(MSG_JSON_MAX_LENGTH, bufLen);
  char *p = bptr + 1;
  for(int i = 1; i < ml; ++i)
    1b34:	11 96       	adiw	r26, 0x01	; 1
    1b36:	ef 01       	movw	r28, r30
    1b38:	ae 15       	cp	r26, r14
    1b3a:	bf 05       	cpc	r27, r15
    1b3c:	64 f2       	brlt	.-104    	; 0x1ad6 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x38>
    1b3e:	8f ef       	ldi	r24, 0xFF	; 255
    }
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING(" bad: unterminated");
#endif
  return(adjustJSONMsgForRXAndCheckCRC_ERR); // Bad (unterminated) message.
  }
    1b40:	df 91       	pop	r29
    1b42:	cf 91       	pop	r28
    1b44:	1f 91       	pop	r17
    1b46:	0f 91       	pop	r16
    1b48:	ff 90       	pop	r15
    1b4a:	ef 90       	pop	r14
    1b4c:	df 90       	pop	r13
    1b4e:	cf 90       	pop	r12
    1b50:	08 95       	ret

00001b52 <BufPrint::write(unsigned char)>:


// Print a single char to a bounded buffer; returns 1 if successful, else 0 if full.
size_t BufPrint::write(const uint8_t c)
    1b52:	dc 01       	movw	r26, r24
  {
  if(size < capacity) { b[size++] = c; b[size] = '\0'; return(1); }
    1b54:	17 96       	adiw	r26, 0x07	; 7
    1b56:	9c 91       	ld	r25, X
    1b58:	17 97       	sbiw	r26, 0x07	; 7
    1b5a:	16 96       	adiw	r26, 0x06	; 6
    1b5c:	8c 91       	ld	r24, X
    1b5e:	16 97       	sbiw	r26, 0x06	; 6
    1b60:	98 17       	cp	r25, r24
    1b62:	18 f0       	brcs	.+6      	; 0x1b6a <BufPrint::write(unsigned char)+0x18>
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	15 c0       	rjmp	.+42     	; 0x1b94 <BufPrint::write(unsigned char)+0x42>
    1b6a:	14 96       	adiw	r26, 0x04	; 4
    1b6c:	ed 91       	ld	r30, X+
    1b6e:	fc 91       	ld	r31, X
    1b70:	15 97       	sbiw	r26, 0x05	; 5
    1b72:	e9 0f       	add	r30, r25
    1b74:	f1 1d       	adc	r31, r1
    1b76:	60 83       	st	Z, r22
    1b78:	89 2f       	mov	r24, r25
    1b7a:	8f 5f       	subi	r24, 0xFF	; 255
    1b7c:	17 96       	adiw	r26, 0x07	; 7
    1b7e:	8c 93       	st	X, r24
    1b80:	17 97       	sbiw	r26, 0x07	; 7
    1b82:	14 96       	adiw	r26, 0x04	; 4
    1b84:	ed 91       	ld	r30, X+
    1b86:	fc 91       	ld	r31, X
    1b88:	15 97       	sbiw	r26, 0x05	; 5
    1b8a:	e8 0f       	add	r30, r24
    1b8c:	f1 1d       	adc	r31, r1
    1b8e:	10 82       	st	Z, r1
    1b90:	21 e0       	ldi	r18, 0x01	; 1
    1b92:	30 e0       	ldi	r19, 0x00	; 0
  return(0);
  }
    1b94:	c9 01       	movw	r24, r18
    1b96:	08 95       	ret

00001b98 <isValidKey(char const*)>:
// Returns true iff if a valid key for our subset of JSON.
// Rejects keys containing " or \ or any chars outside the range [32,126]
// to avoid having to escape anything.
bool isValidKey(const SimpleStatsKey key)
  {
  if(NULL == key) { return(false); } 
    1b98:	00 97       	sbiw	r24, 0x00	; 0
    1b9a:	81 f0       	breq	.+32     	; 0x1bbc <isValidKey(char const*)+0x24>
    1b9c:	fc 01       	movw	r30, r24
    1b9e:	09 c0       	rjmp	.+18     	; 0x1bb2 <isValidKey(char const*)+0x1a>
  for(const char *s = key; '\0' != *s; ++s)
    {
    const char c = *s;
    if((c < 32) || (c > 126) || ('"' == c) || ('\\' == c)) { return(false); }
    1ba0:	89 2f       	mov	r24, r25
    1ba2:	80 52       	subi	r24, 0x20	; 32
    1ba4:	8f 35       	cpi	r24, 0x5F	; 95
    1ba6:	50 f4       	brcc	.+20     	; 0x1bbc <isValidKey(char const*)+0x24>
    1ba8:	92 32       	cpi	r25, 0x22	; 34
    1baa:	41 f0       	breq	.+16     	; 0x1bbc <isValidKey(char const*)+0x24>
    1bac:	9c 35       	cpi	r25, 0x5C	; 92
    1bae:	31 f0       	breq	.+12     	; 0x1bbc <isValidKey(char const*)+0x24>
// Rejects keys containing " or \ or any chars outside the range [32,126]
// to avoid having to escape anything.
bool isValidKey(const SimpleStatsKey key)
  {
  if(NULL == key) { return(false); } 
  for(const char *s = key; '\0' != *s; ++s)
    1bb0:	31 96       	adiw	r30, 0x01	; 1
    1bb2:	90 81       	ld	r25, Z
    1bb4:	99 23       	and	r25, r25
    1bb6:	a1 f7       	brne	.-24     	; 0x1ba0 <isValidKey(char const*)+0x8>
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	08 95       	ret
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    {
    const char c = *s;
    if((c < 32) || (c > 126) || ('"' == c) || ('\\' == c)) { return(false); }
    }
  return(true);
  }
    1bbe:	08 95       	ret

00001bc0 <SimpleStatsRotationBase::print(BufPrint&, SimpleStatsRotationBase::DescValueTuple const&, bool&) const>:
  return(false); // FAILED: full.
  }

#if defined(ALLOW_JSON_OUTPUT)
// Print an object field "name":value to the given buffer.
size_t SimpleStatsRotationBase::print(BufPrint &bp, const SimpleStatsRotationBase::DescValueTuple &s, bool &commaPending) const
    1bc0:	4f 92       	push	r4
    1bc2:	5f 92       	push	r5
    1bc4:	6f 92       	push	r6
    1bc6:	7f 92       	push	r7
    1bc8:	8f 92       	push	r8
    1bca:	9f 92       	push	r9
    1bcc:	af 92       	push	r10
    1bce:	bf 92       	push	r11
    1bd0:	cf 92       	push	r12
    1bd2:	df 92       	push	r13
    1bd4:	ef 92       	push	r14
    1bd6:	ff 92       	push	r15
    1bd8:	0f 93       	push	r16
    1bda:	1f 93       	push	r17
    1bdc:	cf 93       	push	r28
    1bde:	df 93       	push	r29
    1be0:	96 2e       	mov	r9, r22
    1be2:	87 2e       	mov	r8, r23
    1be4:	3a 01       	movw	r6, r20
    1be6:	29 01       	movw	r4, r18
  {
  size_t w = 0;
  if(commaPending) { w += bp.print(','); }
    1be8:	f9 01       	movw	r30, r18
    1bea:	80 81       	ld	r24, Z
    1bec:	88 23       	and	r24, r24
    1bee:	19 f4       	brne	.+6      	; 0x1bf6 <SimpleStatsRotationBase::print(BufPrint&, SimpleStatsRotationBase::DescValueTuple const&, bool&) const+0x36>
    1bf0:	c0 e0       	ldi	r28, 0x00	; 0
    1bf2:	d0 e0       	ldi	r29, 0x00	; 0
    1bf4:	06 c0       	rjmp	.+12     	; 0x1c02 <SimpleStatsRotationBase::print(BufPrint&, SimpleStatsRotationBase::DescValueTuple const&, bool&) const+0x42>
    1bf6:	86 2f       	mov	r24, r22
    1bf8:	97 2f       	mov	r25, r23
    1bfa:	6c e2       	ldi	r22, 0x2C	; 44
    1bfc:	0e 94 0f 3a 	call	0x741e	; 0x741e <Print::print(char)>
    1c00:	ec 01       	movw	r28, r24
  w += bp.print('"');
    1c02:	89 2d       	mov	r24, r9
    1c04:	98 2d       	mov	r25, r8
    1c06:	62 e2       	ldi	r22, 0x22	; 34
    1c08:	0e 94 0f 3a 	call	0x741e	; 0x741e <Print::print(char)>
    1c0c:	8c 01       	movw	r16, r24
  w += bp.print(s.descriptor.key); // Assumed not to need escaping in any way.
    1c0e:	f3 01       	movw	r30, r6
    1c10:	60 81       	ld	r22, Z
    1c12:	71 81       	ldd	r23, Z+1	; 0x01
    1c14:	89 2d       	mov	r24, r9
    1c16:	98 2d       	mov	r25, r8
    1c18:	0e 94 3f 3b 	call	0x767e	; 0x767e <Print::print(char const*)>
    1c1c:	5c 01       	movw	r10, r24
  w += bp.print('"');
    1c1e:	89 2d       	mov	r24, r9
    1c20:	98 2d       	mov	r25, r8
    1c22:	62 e2       	ldi	r22, 0x22	; 34
    1c24:	0e 94 0f 3a 	call	0x741e	; 0x741e <Print::print(char)>
    1c28:	6c 01       	movw	r12, r24
  w += bp.print(':');
    1c2a:	89 2d       	mov	r24, r9
    1c2c:	98 2d       	mov	r25, r8
    1c2e:	6a e3       	ldi	r22, 0x3A	; 58
    1c30:	0e 94 0f 3a 	call	0x741e	; 0x741e <Print::print(char)>
    1c34:	7c 01       	movw	r14, r24
  w += bp.print(s.value);
    1c36:	f3 01       	movw	r30, r6
    1c38:	64 81       	ldd	r22, Z+4	; 0x04
    1c3a:	75 81       	ldd	r23, Z+5	; 0x05
    1c3c:	89 2d       	mov	r24, r9
    1c3e:	98 2d       	mov	r25, r8
    1c40:	4a e0       	ldi	r20, 0x0A	; 10
    1c42:	50 e0       	ldi	r21, 0x00	; 0
    1c44:	0e 94 2c 3b 	call	0x7658	; 0x7658 <Print::print(int, int)>
// Print an object field "name":value to the given buffer.
size_t SimpleStatsRotationBase::print(BufPrint &bp, const SimpleStatsRotationBase::DescValueTuple &s, bool &commaPending) const
  {
  size_t w = 0;
  if(commaPending) { w += bp.print(','); }
  w += bp.print('"');
    1c48:	0c 0f       	add	r16, r28
    1c4a:	1d 1f       	adc	r17, r29
  w += bp.print(s.descriptor.key); // Assumed not to need escaping in any way.
    1c4c:	0a 0d       	add	r16, r10
    1c4e:	1b 1d       	adc	r17, r11
  w += bp.print('"');
    1c50:	0c 0d       	add	r16, r12
    1c52:	1d 1d       	adc	r17, r13
  w += bp.print(':');
    1c54:	0e 0d       	add	r16, r14
    1c56:	1f 1d       	adc	r17, r15
  w += bp.print(s.value);
  commaPending = true;
    1c58:	21 e0       	ldi	r18, 0x01	; 1
    1c5a:	f2 01       	movw	r30, r4
    1c5c:	20 83       	st	Z, r18
    1c5e:	08 0f       	add	r16, r24
    1c60:	19 1f       	adc	r17, r25
  return(w);
  }
    1c62:	c8 01       	movw	r24, r16
    1c64:	df 91       	pop	r29
    1c66:	cf 91       	pop	r28
    1c68:	1f 91       	pop	r17
    1c6a:	0f 91       	pop	r16
    1c6c:	ff 90       	pop	r15
    1c6e:	ef 90       	pop	r14
    1c70:	df 90       	pop	r13
    1c72:	cf 90       	pop	r12
    1c74:	bf 90       	pop	r11
    1c76:	af 90       	pop	r10
    1c78:	9f 90       	pop	r9
    1c7a:	8f 90       	pop	r8
    1c7c:	7f 90       	pop	r7
    1c7e:	6f 90       	pop	r6
    1c80:	5f 90       	pop	r5
    1c82:	4f 90       	pop	r4
    1c84:	08 95       	ret

00001c86 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)>:
//   * maximise  if true attempt to maximise the number of stats squeezed into each frame,
//       potentially at the cost of signficant CPU time
//   * suppressClearChanged  if true then 'changed' flag for included fields is not cleared by this
//       allowing them to continue to be treated as higher priority
uint8_t SimpleStatsRotationBase::writeJSON(uint8_t *const buf, const uint8_t bufSize, const uint8_t sensitivity,
                                           const bool maximise, const bool suppressClearChanged)
    1c86:	2f 92       	push	r2
    1c88:	3f 92       	push	r3
    1c8a:	4f 92       	push	r4
    1c8c:	5f 92       	push	r5
    1c8e:	6f 92       	push	r6
    1c90:	7f 92       	push	r7
    1c92:	8f 92       	push	r8
    1c94:	9f 92       	push	r9
    1c96:	af 92       	push	r10
    1c98:	bf 92       	push	r11
    1c9a:	cf 92       	push	r12
    1c9c:	df 92       	push	r13
    1c9e:	ef 92       	push	r14
    1ca0:	ff 92       	push	r15
    1ca2:	0f 93       	push	r16
    1ca4:	1f 93       	push	r17
    1ca6:	df 93       	push	r29
    1ca8:	cf 93       	push	r28
    1caa:	cd b7       	in	r28, 0x3d	; 61
    1cac:	de b7       	in	r29, 0x3e	; 62
    1cae:	2d 97       	sbiw	r28, 0x0d	; 13
    1cb0:	0f b6       	in	r0, 0x3f	; 63
    1cb2:	f8 94       	cli
    1cb4:	de bf       	out	0x3e, r29	; 62
    1cb6:	0f be       	out	0x3f, r0	; 63
    1cb8:	cd bf       	out	0x3d, r28	; 61
    1cba:	6c 01       	movw	r12, r24
    1cbc:	1b 01       	movw	r2, r22
    1cbe:	f4 2e       	mov	r15, r20
    1cc0:	2b 87       	std	Y+11, r18	; 0x0b
    1cc2:	0c 87       	std	Y+12, r16	; 0x0c
    1cc4:	ed 86       	std	Y+13, r14	; 0x0d
  {
#ifdef DEBUG
  if(NULL == buf) { panic(0); } // Should never happen.
    1cc6:	61 15       	cp	r22, r1
    1cc8:	71 05       	cpc	r23, r1
    1cca:	21 f4       	brne	.+8      	; 0x1cd4 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x4e>
    1ccc:	80 e0       	ldi	r24, 0x00	; 0
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	0e 94 fd 2f 	call	0x5ffa	; 0x5ffa <panic(__FlashStringHelper const*)>
#endif
  // Minimum size is for {"@":""} plus null plus extra padding char/byte to check for overrun.
  if(bufSize < 10) { return(0); } // Failed.
    1cd4:	39 e0       	ldi	r19, 0x09	; 9
    1cd6:	3f 15       	cp	r19, r15
    1cd8:	08 f0       	brcs	.+2      	; 0x1cdc <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x56>
    1cda:	80 c1       	rjmp	.+768    	; 0x1fdc <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x356>
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1cdc:	1d 82       	std	Y+5, r1	; 0x05
    1cde:	1c 82       	std	Y+4, r1	; 0x04
    uint8_t mark;
  public:
    // Wrap around a buffer of size bufSize-1 chars and a trailing '\0'.
    // The buffer must be of at least size 1.
    // A buffer of size n can accommodate n-1 characters.
    BufPrint(char *buf, uint8_t bufSize) : b(buf), capacity(bufSize-1), size(0), mark(0) { buf[0] = '\0'; }
    1ce0:	81 e8       	ldi	r24, 0x81	; 129
    1ce2:	91 e0       	ldi	r25, 0x01	; 1
    1ce4:	9b 83       	std	Y+3, r25	; 0x03
    1ce6:	8a 83       	std	Y+2, r24	; 0x02
    1ce8:	3f 82       	std	Y+7, r3	; 0x07
    1cea:	2e 82       	std	Y+6, r2	; 0x06
    1cec:	fa 94       	dec	r15
    1cee:	f8 86       	std	Y+8, r15	; 0x08
    1cf0:	f3 94       	inc	r15
    1cf2:	19 86       	std	Y+9, r1	; 0x09
    1cf4:	1a 86       	std	Y+10, r1	; 0x0a
    1cf6:	d1 01       	movw	r26, r2
    1cf8:	1c 92       	st	X, r1

  // Write/print to buffer passed in.
  BufPrint bp((char *)buf, bufSize);
  // True if field has been written and will need a ',' if another field is written.
  bool commaPending = false;
    1cfa:	19 82       	std	Y+1, r1	; 0x01

  // Start object.
  bp.print('{');
    1cfc:	8e 01       	movw	r16, r28
    1cfe:	0e 5f       	subi	r16, 0xFE	; 254
    1d00:	1f 4f       	sbci	r17, 0xFF	; 255
    1d02:	c8 01       	movw	r24, r16
    1d04:	6b e7       	ldi	r22, 0x7B	; 123
    1d06:	0e 94 0f 3a 	call	0x741e	; 0x741e <Print::print(char)>

  // Write ID first.
  // If an explicit ID is supplied then use it
  // else compute it taking the housecode by preference if it is set.
  bp.print(F("\"@\":\""));
    1d0a:	c8 01       	movw	r24, r16
    1d0c:	63 ee       	ldi	r22, 0xE3	; 227
    1d0e:	70 e0       	ldi	r23, 0x00	; 0
    1d10:	0e 94 ec 39 	call	0x73d8	; 0x73d8 <Print::print(__FlashStringHelper const*)>

#ifdef USE_MODULE_FHT8VSIMPLE
  if(NULL != id) { bp.print(id); } // Value has to be 'safe' (eg no " nor \ in it).
    1d14:	f6 01       	movw	r30, r12
    1d16:	67 81       	ldd	r22, Z+7	; 0x07
    1d18:	70 85       	ldd	r23, Z+8	; 0x08
    1d1a:	61 15       	cp	r22, r1
    1d1c:	71 05       	cpc	r23, r1
    1d1e:	21 f0       	breq	.+8      	; 0x1d28 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0xa2>
    1d20:	c8 01       	movw	r24, r16
    1d22:	0e 94 3f 3b 	call	0x767e	; 0x767e <Print::print(char const*)>
    1d26:	55 c0       	rjmp	.+170    	; 0x1dd2 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x14c>
  else
    {
    if(localFHT8VTRVEnabled())
    1d28:	0e 94 da 09 	call	0x13b4	; 0x13b4 <localFHT8VTRVEnabled()>
    1d2c:	88 23       	and	r24, r24
    1d2e:	39 f0       	breq	.+14     	; 0x1d3e <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0xb8>
      {
      const uint8_t hc1 = FHT8VGetHC1();
    1d30:	0e 94 c8 09 	call	0x1390	; 0x1390 <FHT8VGetHC1()>
    1d34:	18 2f       	mov	r17, r24
      const uint8_t hc2 = FHT8VGetHC2();
    1d36:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <FHT8VGetHC2()>
    1d3a:	08 2f       	mov	r16, r24
    1d3c:	10 c0       	rjmp	.+32     	; 0x1d5e <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0xd8>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1d3e:	f9 99       	sbic	0x1f, 1	; 31
    1d40:	fe cf       	rjmp	.-4      	; 0x1d3e <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0xb8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1d42:	84 e1       	ldi	r24, 0x14	; 20
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	92 bd       	out	0x22, r25	; 34
    1d48:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1d4a:	f8 9a       	sbi	0x1f, 0	; 31
    1d4c:	10 b5       	in	r17, 0x20	; 32
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1d4e:	f9 99       	sbic	0x1f, 1	; 31
    1d50:	fe cf       	rjmp	.-4      	; 0x1d4e <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0xc8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1d52:	85 e1       	ldi	r24, 0x15	; 21
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	92 bd       	out	0x22, r25	; 34
    1d58:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1d5a:	f8 9a       	sbi	0x1f, 0	; 31
    1d5c:	00 b5       	in	r16, 0x20	; 32


// Extract ASCII hex digit in range [0-9][a-f] (ie lowercase) from bottom 4 bits of argument.
// Eg, passing in 0xa (10) returns 'a'.
// The top 4 bits are ignored.
static inline char hexDigit(const uint8_t value) { const uint8_t v = 0xf&value; if(v<10) { return('0'+v); } return('a'+(v-10)); }
    1d5e:	81 2f       	mov	r24, r17
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	74 e0       	ldi	r23, 0x04	; 4
    1d64:	95 95       	asr	r25
    1d66:	87 95       	ror	r24
    1d68:	7a 95       	dec	r23
    1d6a:	e1 f7       	brne	.-8      	; 0x1d64 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0xde>
    1d6c:	68 2f       	mov	r22, r24
    1d6e:	6f 70       	andi	r22, 0x0F	; 15
    1d70:	6a 30       	cpi	r22, 0x0A	; 10
    1d72:	10 f4       	brcc	.+4      	; 0x1d78 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0xf2>
    1d74:	60 5d       	subi	r22, 0xD0	; 208
    1d76:	01 c0       	rjmp	.+2      	; 0x1d7a <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0xf4>
    1d78:	69 5a       	subi	r22, 0xA9	; 169
    else
#endif
      {
      const uint8_t id1 = eeprom_read_byte(0 + (uint8_t *)EE_START_ID);
      const uint8_t id2 = eeprom_read_byte(1 + (uint8_t *)EE_START_ID);
      bp.print(hexDigit(id1 >> 4));
    1d7a:	ce 01       	movw	r24, r28
    1d7c:	02 96       	adiw	r24, 0x02	; 2
    1d7e:	0e 94 0f 3a 	call	0x741e	; 0x741e <Print::print(char)>
    1d82:	61 2f       	mov	r22, r17
    1d84:	6f 70       	andi	r22, 0x0F	; 15
    1d86:	6a 30       	cpi	r22, 0x0A	; 10
    1d88:	10 f4       	brcc	.+4      	; 0x1d8e <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x108>
    1d8a:	60 5d       	subi	r22, 0xD0	; 208
    1d8c:	01 c0       	rjmp	.+2      	; 0x1d90 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x10a>
    1d8e:	69 5a       	subi	r22, 0xA9	; 169
      bp.print(hexDigit(id1));
    1d90:	ce 01       	movw	r24, r28
    1d92:	02 96       	adiw	r24, 0x02	; 2
    1d94:	0e 94 0f 3a 	call	0x741e	; 0x741e <Print::print(char)>
    1d98:	80 2f       	mov	r24, r16
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	64 e0       	ldi	r22, 0x04	; 4
    1d9e:	95 95       	asr	r25
    1da0:	87 95       	ror	r24
    1da2:	6a 95       	dec	r22
    1da4:	e1 f7       	brne	.-8      	; 0x1d9e <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x118>
    1da6:	68 2f       	mov	r22, r24
    1da8:	6f 70       	andi	r22, 0x0F	; 15
    1daa:	6a 30       	cpi	r22, 0x0A	; 10
    1dac:	10 f4       	brcc	.+4      	; 0x1db2 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x12c>
    1dae:	60 5d       	subi	r22, 0xD0	; 208
    1db0:	01 c0       	rjmp	.+2      	; 0x1db4 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x12e>
    1db2:	69 5a       	subi	r22, 0xA9	; 169
      bp.print(hexDigit(id2 >> 4));
    1db4:	ce 01       	movw	r24, r28
    1db6:	02 96       	adiw	r24, 0x02	; 2
    1db8:	0e 94 0f 3a 	call	0x741e	; 0x741e <Print::print(char)>
    1dbc:	60 2f       	mov	r22, r16
    1dbe:	6f 70       	andi	r22, 0x0F	; 15
    1dc0:	6a 30       	cpi	r22, 0x0A	; 10
    1dc2:	10 f4       	brcc	.+4      	; 0x1dc8 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x142>
    1dc4:	60 5d       	subi	r22, 0xD0	; 208
    1dc6:	01 c0       	rjmp	.+2      	; 0x1dca <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x144>
    1dc8:	69 5a       	subi	r22, 0xA9	; 169
      bp.print(hexDigit(id2));
    1dca:	ce 01       	movw	r24, r28
    1dcc:	02 96       	adiw	r24, 0x02	; 2
    1dce:	0e 94 0f 3a 	call	0x741e	; 0x741e <Print::print(char)>
      }
    }

  bp.print('"');
    1dd2:	8e 01       	movw	r16, r28
    1dd4:	0e 5f       	subi	r16, 0xFE	; 254
    1dd6:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd8:	c8 01       	movw	r24, r16
    1dda:	62 e2       	ldi	r22, 0x22	; 34
    1ddc:	0e 94 0f 3a 	call	0x741e	; 0x741e <Print::print(char)>
  commaPending = true;
    1de0:	bb 24       	eor	r11, r11
    1de2:	b3 94       	inc	r11
    1de4:	b9 82       	std	Y+1, r11	; 0x01

  // Write count next iff enabled.
  if(c.enabled)
    1de6:	d6 01       	movw	r26, r12
    1de8:	19 96       	adiw	r26, 0x09	; 9
    1dea:	8c 91       	ld	r24, X
    1dec:	80 ff       	sbrs	r24, 0
    1dee:	14 c0       	rjmp	.+40     	; 0x1e18 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x192>
    {
    if(commaPending) { bp.print(','); commaPending = false; }
    1df0:	c8 01       	movw	r24, r16
    1df2:	6c e2       	ldi	r22, 0x2C	; 44
    1df4:	0e 94 0f 3a 	call	0x741e	; 0x741e <Print::print(char)>
    1df8:	19 82       	std	Y+1, r1	; 0x01
    bp.print(F("\"+\":"));
    1dfa:	c8 01       	movw	r24, r16
    1dfc:	6e ed       	ldi	r22, 0xDE	; 222
    1dfe:	70 e0       	ldi	r23, 0x00	; 0
    1e00:	0e 94 ec 39 	call	0x73d8	; 0x73d8 <Print::print(__FlashStringHelper const*)>
    bp.print(c.count);
    1e04:	f6 01       	movw	r30, r12
    1e06:	61 85       	ldd	r22, Z+9	; 0x09
    1e08:	66 95       	lsr	r22
    1e0a:	67 70       	andi	r22, 0x07	; 7
    1e0c:	c8 01       	movw	r24, r16
    1e0e:	4a e0       	ldi	r20, 0x0A	; 10
    1e10:	50 e0       	ldi	r21, 0x00	; 0
    1e12:	0e 94 da 3a 	call	0x75b4	; 0x75b4 <Print::print(unsigned char, int)>
    commaPending = true;
    1e16:	b9 82       	std	Y+1, r11	; 0x01
    // True if buffer is completely full.
    bool isFull() const { return(size == capacity); }
    // Get size/chars already in the buffer, not including trailing '\0'.
    uint8_t getSize() const { return(size); }
    // Set to record good place to rewind to if necessary.
    void setMark() { mark = size; }
    1e18:	89 85       	ldd	r24, Y+9	; 0x09
    1e1a:	8a 87       	std	Y+10, r24	; 0x0a

  bool gotHiPri = false;
  uint8_t hiPriIndex = 0;
  bool gotLoPri = false;
  uint8_t loPriIndex = 0;
  if(nStats != 0)
    1e1c:	d6 01       	movw	r26, r12
    1e1e:	13 96       	adiw	r26, 0x03	; 3
    1e20:	6c 91       	ld	r22, X
    1e22:	13 97       	sbiw	r26, 0x03	; 3
    1e24:	66 23       	and	r22, r22
    1e26:	09 f4       	brne	.+2      	; 0x1e2a <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x1a4>
    1e28:	ce c0       	rjmp	.+412    	; 0x1fc6 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x340>
    {
    // High-pri/changed stats.
    // Only do this on a portion of runs to let 'normal' stats get a look-in.
    // This happens on even-numbered runs (eg including the first, typically).
    // Write at most one high-priority item.
    if(0 == (c.count & 1))
    1e2a:	19 96       	adiw	r26, 0x09	; 9
    1e2c:	8c 91       	ld	r24, X
    1e2e:	19 97       	sbiw	r26, 0x09	; 9
    1e30:	86 95       	lsr	r24
    1e32:	87 70       	andi	r24, 0x07	; 7
    1e34:	80 fd       	sbrc	r24, 0
    1e36:	5a c0       	rjmp	.+180    	; 0x1eec <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x266>
      {
      uint8_t next = lastTXedHiPri;
    1e38:	16 96       	adiw	r26, 0x06	; 6
    1e3a:	1c 91       	ld	r17, X
    1e3c:	40 e0       	ldi	r20, 0x00	; 0
    1e3e:	50 e0       	ldi	r21, 0x00	; 0
      for(int i = nStats; --i >= 0; )
    1e40:	26 2f       	mov	r18, r22
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	21 50       	subi	r18, 0x01	; 1
    1e46:	30 40       	sbci	r19, 0x00	; 0
        {
        // Wrap around the end of the stats.
        if(++next >= nStats) { next = 0; }
        // Skip stat if too sensitive to include in this output.
        DescValueTuple &s = stats[next];
    1e48:	77 e0       	ldi	r23, 0x07	; 7
    1e4a:	49 c0       	rjmp	.+146    	; 0x1ede <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x258>
      {
      uint8_t next = lastTXedHiPri;
      for(int i = nStats; --i >= 0; )
        {
        // Wrap around the end of the stats.
        if(++next >= nStats) { next = 0; }
    1e4c:	1f 5f       	subi	r17, 0xFF	; 255
    1e4e:	16 17       	cp	r17, r22
    1e50:	08 f0       	brcs	.+2      	; 0x1e54 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x1ce>
    1e52:	10 e0       	ldi	r17, 0x00	; 0
        // Skip stat if too sensitive to include in this output.
        DescValueTuple &s = stats[next];
    1e54:	17 9f       	mul	r17, r23
    1e56:	50 01       	movw	r10, r0
    1e58:	11 24       	eor	r1, r1
    1e5a:	d6 01       	movw	r26, r12
    1e5c:	11 96       	adiw	r26, 0x01	; 1
    1e5e:	ed 91       	ld	r30, X+
    1e60:	fc 91       	ld	r31, X
    1e62:	12 97       	sbiw	r26, 0x02	; 2
    1e64:	ea 0d       	add	r30, r10
    1e66:	fb 1d       	adc	r31, r11
        if(sensitivity > s.descriptor.sensitivity) { continue; }
    1e68:	82 81       	ldd	r24, Z+2	; 0x02
    1e6a:	bb 85       	ldd	r27, Y+11	; 0x0b
    1e6c:	8b 17       	cp	r24, r27
    1e6e:	a8 f1       	brcs	.+106    	; 0x1eda <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x254>
        // Skip stat if neither changed nor high-priority.
        if(!s.descriptor.highPriority && !s.flags.changed) { continue; }
    1e70:	83 81       	ldd	r24, Z+3	; 0x03
    1e72:	88 23       	and	r24, r24
    1e74:	19 f4       	brne	.+6      	; 0x1e7c <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x1f6>
    1e76:	86 81       	ldd	r24, Z+6	; 0x06
    1e78:	80 ff       	sbrs	r24, 0
    1e7a:	2f c0       	rjmp	.+94     	; 0x1eda <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x254>
        // Found suitable stat to include in output.
        hiPriIndex = next;
        gotHiPri = true;
        // Add to JSON output.
        print(bp, s, commaPending);
    1e7c:	c6 01       	movw	r24, r12
    1e7e:	be 01       	movw	r22, r28
    1e80:	6e 5f       	subi	r22, 0xFE	; 254
    1e82:	7f 4f       	sbci	r23, 0xFF	; 255
    1e84:	af 01       	movw	r20, r30
    1e86:	9e 01       	movw	r18, r28
    1e88:	2f 5f       	subi	r18, 0xFF	; 255
    1e8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e8c:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <SimpleStatsRotationBase::print(BufPrint&, SimpleStatsRotationBase::DescValueTuple const&, bool&) const>
    BufPrint(char *buf, uint8_t bufSize) : b(buf), capacity(bufSize-1), size(0), mark(0) { buf[0] = '\0'; }
    virtual size_t write(uint8_t c);
    // True if buffer is completely full.
    bool isFull() const { return(size == capacity); }
    // Get size/chars already in the buffer, not including trailing '\0'.
    uint8_t getSize() const { return(size); }
    1e90:	49 85       	ldd	r20, Y+9	; 0x09
        // If successful, ie still space for the closing "}\0" without running over-length
        // then mark this as a fall-back, else rewind and discard this item.
        if(bp.getSize() > bufSize - 3) { bp.rewind(); break; }
    1e92:	8f 2d       	mov	r24, r15
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	02 97       	sbiw	r24, 0x02	; 2
    1e98:	24 2f       	mov	r18, r20
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	28 17       	cp	r18, r24
    1e9e:	39 07       	cpc	r19, r25
    1ea0:	44 f0       	brlt	.+16     	; 0x1eb2 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x22c>
    // Set to record good place to rewind to if necessary.
    void setMark() { mark = size; }
    // Rewind to previous good position, clearing newer text.
    void rewind() { size = mark; b[size] = '\0'; }
    1ea2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ea4:	89 87       	std	Y+9, r24	; 0x09
    1ea6:	ee 81       	ldd	r30, Y+6	; 0x06
    1ea8:	ff 81       	ldd	r31, Y+7	; 0x07
    1eaa:	e8 0f       	add	r30, r24
    1eac:	f1 1d       	adc	r31, r1
    1eae:	10 82       	st	Z, r1
    1eb0:	11 c0       	rjmp	.+34     	; 0x1ed4 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x24e>
    // True if buffer is completely full.
    bool isFull() const { return(size == capacity); }
    // Get size/chars already in the buffer, not including trailing '\0'.
    uint8_t getSize() const { return(size); }
    // Set to record good place to rewind to if necessary.
    void setMark() { mark = size; }
    1eb2:	4a 87       	std	Y+10, r20	; 0x0a
        else
          {
          bp.setMark();
          lastTXed = lastTXedHiPri = hiPriIndex;
    1eb4:	f6 01       	movw	r30, r12
    1eb6:	16 83       	std	Z+6, r17	; 0x06
    1eb8:	14 83       	std	Z+4, r17	; 0x04
          if(!suppressClearChanged) { stats[hiPriIndex].flags.changed = false; }
    1eba:	fd 85       	ldd	r31, Y+13	; 0x0d
    1ebc:	ff 23       	and	r31, r31
    1ebe:	51 f4       	brne	.+20     	; 0x1ed4 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x24e>
    1ec0:	d6 01       	movw	r26, r12
    1ec2:	11 96       	adiw	r26, 0x01	; 1
    1ec4:	ed 91       	ld	r30, X+
    1ec6:	fc 91       	ld	r31, X
    1ec8:	12 97       	sbiw	r26, 0x02	; 2
    1eca:	ea 0d       	add	r30, r10
    1ecc:	fb 1d       	adc	r31, r11
    1ece:	86 81       	ldd	r24, Z+6	; 0x06
    1ed0:	8e 7f       	andi	r24, 0xFE	; 254
    1ed2:	86 83       	std	Z+6, r24	; 0x06
    1ed4:	51 2e       	mov	r5, r17
    1ed6:	01 e0       	ldi	r16, 0x01	; 1
    1ed8:	0b c0       	rjmp	.+22     	; 0x1ef0 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x26a>
    1eda:	4f 5f       	subi	r20, 0xFF	; 255
    1edc:	5f 4f       	sbci	r21, 0xFF	; 255
    // This happens on even-numbered runs (eg including the first, typically).
    // Write at most one high-priority item.
    if(0 == (c.count & 1))
      {
      uint8_t next = lastTXedHiPri;
      for(int i = nStats; --i >= 0; )
    1ede:	c9 01       	movw	r24, r18
    1ee0:	84 1b       	sub	r24, r20
    1ee2:	95 0b       	sbc	r25, r21
    1ee4:	8f 5f       	subi	r24, 0xFF	; 255
    1ee6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ee8:	09 f0       	breq	.+2      	; 0x1eec <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x266>
    1eea:	b0 cf       	rjmp	.-160    	; 0x1e4c <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x1c6>
    1eec:	00 e0       	ldi	r16, 0x00	; 0
    1eee:	55 24       	eor	r5, r5
    // Rotate through all eligible stats round-robin,
    // adding one to the end of the current message if possible,
    // checking first the item indexed after the previous one sent.
//    if(!gotHiPri)
      {
      uint8_t next = lastTXedLoPri;
    1ef0:	f6 01       	movw	r30, r12
    1ef2:	25 81       	ldd	r18, Z+5	; 0x05
      for(int i = nStats; --i >= 0; )
    1ef4:	83 81       	ldd	r24, Z+3	; 0x03
    1ef6:	88 24       	eor	r8, r8
    1ef8:	99 24       	eor	r9, r9
    1efa:	a8 2e       	mov	r10, r24
    1efc:	bb 24       	eor	r11, r11
    1efe:	08 94       	sec
    1f00:	a1 08       	sbc	r10, r1
    1f02:	b1 08       	sbc	r11, r1
        // Avoid re-transmitting the very last thing TXed unless there in only one item!
        if((lastTXed == next) && (nStats > 1)) { continue; }
        // Avoid transmitting the hi-pri item just sent if any.
        if(gotHiPri && (hiPriIndex == next)) { continue; }
        // Skip stat if too sensitive to include in this output.
        DescValueTuple &s = stats[next];
    1f04:	57 e0       	ldi	r21, 0x07	; 7
    1f06:	45 2e       	mov	r4, r21
        // Add to JSON output.
        print(bp, s, commaPending);
        // If successful then mark this as a fall-back, else rewind and discard this item.
        // If successful, ie still space for the closing "}\0" without running over-length
        // then mark this as a fall-back, else rewind and discard this item.
        if(bp.getSize() > bufSize - 3) { bp.rewind(); break; }
    1f08:	ef 2c       	mov	r14, r15
    1f0a:	ff 24       	eor	r15, r15
    1f0c:	8e ef       	ldi	r24, 0xFE	; 254
    1f0e:	9f ef       	ldi	r25, 0xFF	; 255
    1f10:	e8 0e       	add	r14, r24
    1f12:	f9 1e       	adc	r15, r25
    1f14:	51 c0       	rjmp	.+162    	; 0x1fb8 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x332>
      {
      uint8_t next = lastTXedLoPri;
      for(int i = nStats; --i >= 0; )
        {
        // Wrap around the end of the stats.
        if(++next >= nStats) { next = 0; }
    1f16:	12 2f       	mov	r17, r18
    1f18:	1f 5f       	subi	r17, 0xFF	; 255
    1f1a:	d6 01       	movw	r26, r12
    1f1c:	13 96       	adiw	r26, 0x03	; 3
    1f1e:	8c 91       	ld	r24, X
    1f20:	18 17       	cp	r17, r24
    1f22:	08 f0       	brcs	.+2      	; 0x1f26 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x2a0>
    1f24:	10 e0       	ldi	r17, 0x00	; 0
        // Avoid re-transmitting the very last thing TXed unless there in only one item!
        if((lastTXed == next) && (nStats > 1)) { continue; }
    1f26:	f6 01       	movw	r30, r12
    1f28:	24 81       	ldd	r18, Z+4	; 0x04
    1f2a:	21 17       	cp	r18, r17
    1f2c:	19 f4       	brne	.+6      	; 0x1f34 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x2ae>
    1f2e:	82 30       	cpi	r24, 0x02	; 2
    1f30:	08 f0       	brcs	.+2      	; 0x1f34 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x2ae>
    1f32:	3f c0       	rjmp	.+126    	; 0x1fb2 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x32c>
        // Avoid transmitting the hi-pri item just sent if any.
        if(gotHiPri && (hiPriIndex == next)) { continue; }
    1f34:	00 23       	and	r16, r16
    1f36:	11 f0       	breq	.+4      	; 0x1f3c <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x2b6>
    1f38:	51 16       	cp	r5, r17
    1f3a:	d1 f1       	breq	.+116    	; 0x1fb0 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x32a>
        // Skip stat if too sensitive to include in this output.
        DescValueTuple &s = stats[next];
    1f3c:	14 9d       	mul	r17, r4
    1f3e:	30 01       	movw	r6, r0
    1f40:	11 24       	eor	r1, r1
    1f42:	d6 01       	movw	r26, r12
    1f44:	11 96       	adiw	r26, 0x01	; 1
    1f46:	ed 91       	ld	r30, X+
    1f48:	fc 91       	ld	r31, X
    1f4a:	12 97       	sbiw	r26, 0x02	; 2
    1f4c:	e6 0d       	add	r30, r6
    1f4e:	f7 1d       	adc	r31, r7
        if(sensitivity > s.descriptor.sensitivity) { continue; }
    1f50:	82 81       	ldd	r24, Z+2	; 0x02
    1f52:	bb 85       	ldd	r27, Y+11	; 0x0b
    1f54:	8b 17       	cp	r24, r27
    1f56:	60 f1       	brcs	.+88     	; 0x1fb0 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x32a>
        // Found suitable stat to include in output.
        loPriIndex = next;
        gotLoPri = true;
        // Add to JSON output.
        print(bp, s, commaPending);
    1f58:	c6 01       	movw	r24, r12
    1f5a:	be 01       	movw	r22, r28
    1f5c:	6e 5f       	subi	r22, 0xFE	; 254
    1f5e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f60:	af 01       	movw	r20, r30
    1f62:	9e 01       	movw	r18, r28
    1f64:	2f 5f       	subi	r18, 0xFF	; 255
    1f66:	3f 4f       	sbci	r19, 0xFF	; 255
    1f68:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <SimpleStatsRotationBase::print(BufPrint&, SimpleStatsRotationBase::DescValueTuple const&, bool&) const>
    BufPrint(char *buf, uint8_t bufSize) : b(buf), capacity(bufSize-1), size(0), mark(0) { buf[0] = '\0'; }
    virtual size_t write(uint8_t c);
    // True if buffer is completely full.
    bool isFull() const { return(size == capacity); }
    // Get size/chars already in the buffer, not including trailing '\0'.
    uint8_t getSize() const { return(size); }
    1f6c:	29 85       	ldd	r18, Y+9	; 0x09
        // If successful then mark this as a fall-back, else rewind and discard this item.
        // If successful, ie still space for the closing "}\0" without running over-length
        // then mark this as a fall-back, else rewind and discard this item.
        if(bp.getSize() > bufSize - 3) { bp.rewind(); break; }
    1f6e:	82 2f       	mov	r24, r18
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	8e 15       	cp	r24, r14
    1f74:	9f 05       	cpc	r25, r15
    1f76:	44 f0       	brlt	.+16     	; 0x1f88 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x302>
    // Set to record good place to rewind to if necessary.
    void setMark() { mark = size; }
    // Rewind to previous good position, clearing newer text.
    void rewind() { size = mark; b[size] = '\0'; }
    1f78:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f7a:	89 87       	std	Y+9, r24	; 0x09
    1f7c:	ee 81       	ldd	r30, Y+6	; 0x06
    1f7e:	ff 81       	ldd	r31, Y+7	; 0x07
    1f80:	e8 0f       	add	r30, r24
    1f82:	f1 1d       	adc	r31, r1
    1f84:	10 82       	st	Z, r1
    1f86:	1f c0       	rjmp	.+62     	; 0x1fc6 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x340>
    // True if buffer is completely full.
    bool isFull() const { return(size == capacity); }
    // Get size/chars already in the buffer, not including trailing '\0'.
    uint8_t getSize() const { return(size); }
    // Set to record good place to rewind to if necessary.
    void setMark() { mark = size; }
    1f88:	2a 87       	std	Y+10, r18	; 0x0a
        else
          {
          bp.setMark();
          lastTXed = lastTXedLoPri = loPriIndex;
    1f8a:	f6 01       	movw	r30, r12
    1f8c:	15 83       	std	Z+5, r17	; 0x05
    1f8e:	14 83       	std	Z+4, r17	; 0x04
          if(!suppressClearChanged) { stats[loPriIndex].flags.changed = false; }
    1f90:	fd 85       	ldd	r31, Y+13	; 0x0d
    1f92:	ff 23       	and	r31, r31
    1f94:	51 f4       	brne	.+20     	; 0x1faa <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x324>
    1f96:	d6 01       	movw	r26, r12
    1f98:	11 96       	adiw	r26, 0x01	; 1
    1f9a:	ed 91       	ld	r30, X+
    1f9c:	fc 91       	ld	r31, X
    1f9e:	12 97       	sbiw	r26, 0x02	; 2
    1fa0:	e6 0d       	add	r30, r6
    1fa2:	f7 1d       	adc	r31, r7
    1fa4:	86 81       	ldd	r24, Z+6	; 0x06
    1fa6:	8e 7f       	andi	r24, 0xFE	; 254
    1fa8:	86 83       	std	Z+6, r24	; 0x06
          }
        if(!maximise) { break; }
    1faa:	bc 85       	ldd	r27, Y+12	; 0x0c
    1fac:	bb 23       	and	r27, r27
    1fae:	59 f0       	breq	.+22     	; 0x1fc6 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x340>
    1fb0:	21 2f       	mov	r18, r17
    1fb2:	08 94       	sec
    1fb4:	81 1c       	adc	r8, r1
    1fb6:	91 1c       	adc	r9, r1
    // adding one to the end of the current message if possible,
    // checking first the item indexed after the previous one sent.
//    if(!gotHiPri)
      {
      uint8_t next = lastTXedLoPri;
      for(int i = nStats; --i >= 0; )
    1fb8:	c5 01       	movw	r24, r10
    1fba:	88 19       	sub	r24, r8
    1fbc:	99 09       	sbc	r25, r9
    1fbe:	8f 5f       	subi	r24, 0xFF	; 255
    1fc0:	9f 4f       	sbci	r25, 0xFF	; 255
    1fc2:	09 f0       	breq	.+2      	; 0x1fc6 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x340>
    1fc4:	a8 cf       	rjmp	.-176    	; 0x1f16 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x290>
    }

  // TODO: maximise.

  // Terminate object.
  bp.print('}');
    1fc6:	ce 01       	movw	r24, r28
    1fc8:	02 96       	adiw	r24, 0x02	; 2
    1fca:	6d e7       	ldi	r22, 0x7D	; 125
    1fcc:	0e 94 0f 3a 	call	0x741e	; 0x741e <Print::print(char)>
    // The buffer must be of at least size 1.
    // A buffer of size n can accommodate n-1 characters.
    BufPrint(char *buf, uint8_t bufSize) : b(buf), capacity(bufSize-1), size(0), mark(0) { buf[0] = '\0'; }
    virtual size_t write(uint8_t c);
    // True if buffer is completely full.
    bool isFull() const { return(size == capacity); }
    1fd0:	29 85       	ldd	r18, Y+9	; 0x09
  DEBUG_SERIAL_PRINT_FLASHSTRING("JSON: ");
  DEBUG_SERIAL_PRINT((char *)buf);
  DEBUG_SERIAL_PRINTLN();
#endif
//  if(w >= (size_t)(bufSize-1))
  if(bp.isFull())
    1fd2:	88 85       	ldd	r24, Y+8	; 0x08
    1fd4:	28 17       	cp	r18, r24
    1fd6:	21 f4       	brne	.+8      	; 0x1fe0 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x35a>
    {
    // Overrun, so failed/aborted.
    // Shouldn't really be possible unless buffer far far too small.
    *buf = '\0';
    1fd8:	d1 01       	movw	r26, r2
    1fda:	1c 92       	st	X, r1
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	0a c0       	rjmp	.+20     	; 0x1ff4 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x36e>
    return(0);
    }

  // On successfully creating output, update some internal state including success count.
  ++c.count;
    1fe0:	f6 01       	movw	r30, r12
    1fe2:	91 85       	ldd	r25, Z+9	; 0x09
    1fe4:	89 2f       	mov	r24, r25
    1fe6:	86 95       	lsr	r24
    1fe8:	8f 5f       	subi	r24, 0xFF	; 255
    1fea:	87 70       	andi	r24, 0x07	; 7
    1fec:	88 0f       	add	r24, r24
    1fee:	91 7f       	andi	r25, 0xF1	; 241
    1ff0:	98 2b       	or	r25, r24
    1ff2:	91 87       	std	Z+9, r25	; 0x09

  return(bp.getSize()); // Success!
  }
    1ff4:	82 2f       	mov	r24, r18
    1ff6:	2d 96       	adiw	r28, 0x0d	; 13
    1ff8:	0f b6       	in	r0, 0x3f	; 63
    1ffa:	f8 94       	cli
    1ffc:	de bf       	out	0x3e, r29	; 62
    1ffe:	0f be       	out	0x3f, r0	; 63
    2000:	cd bf       	out	0x3d, r28	; 61
    2002:	cf 91       	pop	r28
    2004:	df 91       	pop	r29
    2006:	1f 91       	pop	r17
    2008:	0f 91       	pop	r16
    200a:	ff 90       	pop	r15
    200c:	ef 90       	pop	r14
    200e:	df 90       	pop	r13
    2010:	cf 90       	pop	r12
    2012:	bf 90       	pop	r11
    2014:	af 90       	pop	r10
    2016:	9f 90       	pop	r9
    2018:	8f 90       	pop	r8
    201a:	7f 90       	pop	r7
    201c:	6f 90       	pop	r6
    201e:	5f 90       	pop	r5
    2020:	4f 90       	pop	r4
    2022:	3f 90       	pop	r3
    2024:	2f 90       	pop	r2
    2026:	08 95       	ret

00002028 <SimpleStatsRotationBase::findByKey(char const*) const>:
  return(true);
  }

// Returns pointer to stats tuple with given (non-NULL) key if present, else NULL.
// Does a simple linear search.
SimpleStatsRotationBase::DescValueTuple * SimpleStatsRotationBase::findByKey(const SimpleStatsKey key) const
    2028:	8f 92       	push	r8
    202a:	9f 92       	push	r9
    202c:	af 92       	push	r10
    202e:	bf 92       	push	r11
    2030:	cf 92       	push	r12
    2032:	df 92       	push	r13
    2034:	ef 92       	push	r14
    2036:	ff 92       	push	r15
    2038:	0f 93       	push	r16
    203a:	1f 93       	push	r17
    203c:	cf 93       	push	r28
    203e:	df 93       	push	r29
    2040:	6c 01       	movw	r12, r24
    2042:	4b 01       	movw	r8, r22
  {
  for(int i = 0; i < nStats; ++i)
    2044:	fc 01       	movw	r30, r24
    2046:	83 81       	ldd	r24, Z+3	; 0x03
    2048:	a8 2e       	mov	r10, r24
    204a:	bb 24       	eor	r11, r11
    204c:	ee 24       	eor	r14, r14
    204e:	ff 24       	eor	r15, r15
    2050:	00 e0       	ldi	r16, 0x00	; 0
    2052:	10 e0       	ldi	r17, 0x00	; 0
    2054:	11 c0       	rjmp	.+34     	; 0x2078 <SimpleStatsRotationBase::findByKey(char const*) const+0x50>
    {
    DescValueTuple * const p = stats + i;
    2056:	f6 01       	movw	r30, r12
    2058:	c1 81       	ldd	r28, Z+1	; 0x01
    205a:	d2 81       	ldd	r29, Z+2	; 0x02
    205c:	c0 0f       	add	r28, r16
    205e:	d1 1f       	adc	r29, r17
    if(0 == strcmp(p->descriptor.key, key)) { return(p); }
    2060:	88 81       	ld	r24, Y
    2062:	99 81       	ldd	r25, Y+1	; 0x01
    2064:	b4 01       	movw	r22, r8
    2066:	0e 94 b9 02 	call	0x572	; 0x572 <strcmp>
    206a:	09 5f       	subi	r16, 0xF9	; 249
    206c:	1f 4f       	sbci	r17, 0xFF	; 255
    206e:	00 97       	sbiw	r24, 0x00	; 0
    2070:	41 f0       	breq	.+16     	; 0x2082 <SimpleStatsRotationBase::findByKey(char const*) const+0x5a>

// Returns pointer to stats tuple with given (non-NULL) key if present, else NULL.
// Does a simple linear search.
SimpleStatsRotationBase::DescValueTuple * SimpleStatsRotationBase::findByKey(const SimpleStatsKey key) const
  {
  for(int i = 0; i < nStats; ++i)
    2072:	08 94       	sec
    2074:	e1 1c       	adc	r14, r1
    2076:	f1 1c       	adc	r15, r1
    2078:	ea 14       	cp	r14, r10
    207a:	fb 04       	cpc	r15, r11
    207c:	64 f3       	brlt	.-40     	; 0x2056 <SimpleStatsRotationBase::findByKey(char const*) const+0x2e>
    207e:	c0 e0       	ldi	r28, 0x00	; 0
    2080:	d0 e0       	ldi	r29, 0x00	; 0
    {
    DescValueTuple * const p = stats + i;
    if(0 == strcmp(p->descriptor.key, key)) { return(p); }
    }
  return(NULL); // Not found.
  }
    2082:	ce 01       	movw	r24, r28
    2084:	df 91       	pop	r29
    2086:	cf 91       	pop	r28
    2088:	1f 91       	pop	r17
    208a:	0f 91       	pop	r16
    208c:	ff 90       	pop	r15
    208e:	ef 90       	pop	r14
    2090:	df 90       	pop	r13
    2092:	cf 90       	pop	r12
    2094:	bf 90       	pop	r11
    2096:	af 90       	pop	r10
    2098:	9f 90       	pop	r9
    209a:	8f 90       	pop	r8
    209c:	08 95       	ret

0000209e <SimpleStatsRotationBase::put(char const*, int)>:
    
// Create/update value for given stat/key.
// If properties not already set and not supplied then stat will get defaults.
// If descriptor is supplied then its key must match (and the descriptor will be copied).
// True if successful, false otherwise (eg capacity already reached).
bool SimpleStatsRotationBase::put(const SimpleStatsKey key, const int newValue)
    209e:	ef 92       	push	r14
    20a0:	ff 92       	push	r15
    20a2:	0f 93       	push	r16
    20a4:	1f 93       	push	r17
    20a6:	cf 93       	push	r28
    20a8:	df 93       	push	r29
    20aa:	ec 01       	movw	r28, r24
    20ac:	8b 01       	movw	r16, r22
    20ae:	7a 01       	movw	r14, r20
// Returns true iff if a valid key for our subset of JSON.
// Rejects keys containing " or \ or any chars outside the range [32,126]
// to avoid having to escape anything.
bool isValidKey(const SimpleStatsKey key)
  {
  if(NULL == key) { return(false); } 
    20b0:	61 15       	cp	r22, r1
    20b2:	71 05       	cpc	r23, r1
    20b4:	e9 f1       	breq	.+122    	; 0x2130 <SimpleStatsRotationBase::put(char const*, int)+0x92>
    20b6:	fb 01       	movw	r30, r22
    20b8:	09 c0       	rjmp	.+18     	; 0x20cc <SimpleStatsRotationBase::put(char const*, int)+0x2e>
  for(const char *s = key; '\0' != *s; ++s)
    {
    const char c = *s;
    if((c < 32) || (c > 126) || ('"' == c) || ('\\' == c)) { return(false); }
    20ba:	89 2f       	mov	r24, r25
    20bc:	80 52       	subi	r24, 0x20	; 32
    20be:	8f 35       	cpi	r24, 0x5F	; 95
    20c0:	b8 f5       	brcc	.+110    	; 0x2130 <SimpleStatsRotationBase::put(char const*, int)+0x92>
    20c2:	92 32       	cpi	r25, 0x22	; 34
    20c4:	a9 f1       	breq	.+106    	; 0x2130 <SimpleStatsRotationBase::put(char const*, int)+0x92>
    20c6:	9c 35       	cpi	r25, 0x5C	; 92
    20c8:	99 f1       	breq	.+102    	; 0x2130 <SimpleStatsRotationBase::put(char const*, int)+0x92>
// Rejects keys containing " or \ or any chars outside the range [32,126]
// to avoid having to escape anything.
bool isValidKey(const SimpleStatsKey key)
  {
  if(NULL == key) { return(false); } 
  for(const char *s = key; '\0' != *s; ++s)
    20ca:	31 96       	adiw	r30, 0x01	; 1
    20cc:	90 81       	ld	r25, Z
    20ce:	99 23       	and	r25, r25
    20d0:	a1 f7       	brne	.-24     	; 0x20ba <SimpleStatsRotationBase::put(char const*, int)+0x1c>
    20d2:	36 c0       	rjmp	.+108    	; 0x2140 <SimpleStatsRotationBase::put(char const*, int)+0xa2>
  DescValueTuple *p = findByKey(key);
  // If item already exists, update it.
  if(NULL != p)
    {
    // Update the value and mark as changed if changed.
    if(p->value != newValue)
    20d4:	84 81       	ldd	r24, Z+4	; 0x04
    20d6:	95 81       	ldd	r25, Z+5	; 0x05
    20d8:	8e 15       	cp	r24, r14
    20da:	9f 05       	cpc	r25, r15
    20dc:	29 f0       	breq	.+10     	; 0x20e8 <SimpleStatsRotationBase::put(char const*, int)+0x4a>
      {
      p->value = newValue;
    20de:	f5 82       	std	Z+5, r15	; 0x05
    20e0:	e4 82       	std	Z+4, r14	; 0x04
      p->flags.changed = true;
    20e2:	86 81       	ldd	r24, Z+6	; 0x06
    20e4:	81 60       	ori	r24, 0x01	; 1
    20e6:	86 83       	std	Z+6, r24	; 0x06
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	23 c0       	rjmp	.+70     	; 0x2132 <SimpleStatsRotationBase::put(char const*, int)+0x94>
    return(true);
    }

  // If not yet at capacity then add this new item at the end.
  // Mark it as changed to prioritise seeing it in the JSON output.
  if(nStats < capacity)
    20ec:	2b 81       	ldd	r18, Y+3	; 0x03
    20ee:	88 81       	ld	r24, Y
    20f0:	28 17       	cp	r18, r24
    20f2:	a8 f4       	brcc	.+42     	; 0x211e <SimpleStatsRotationBase::put(char const*, int)+0x80>
    {
    p = stats + (nStats++);
    20f4:	87 e0       	ldi	r24, 0x07	; 7
    20f6:	28 9f       	mul	r18, r24
    20f8:	c0 01       	movw	r24, r0
    20fa:	11 24       	eor	r1, r1
    20fc:	e9 81       	ldd	r30, Y+1	; 0x01
    20fe:	fa 81       	ldd	r31, Y+2	; 0x02
    2100:	e8 0f       	add	r30, r24
    2102:	f9 1f       	adc	r31, r25
    2104:	2f 5f       	subi	r18, 0xFF	; 255
    2106:	2b 83       	std	Y+3, r18	; 0x03
    *p = DescValueTuple();
    p->value = newValue;
    2108:	f5 82       	std	Z+5, r15	; 0x05
    210a:	e4 82       	std	Z+4, r14	; 0x04
    p->flags.changed = true;
    210c:	86 81       	ldd	r24, Z+6	; 0x06
    210e:	81 60       	ori	r24, 0x01	; 1
    2110:	86 83       	std	Z+6, r24	; 0x06
    // Copy descriptor .
    p->descriptor = GenericStatsDescriptor(key);
    2112:	13 82       	std	Z+3, r1	; 0x03
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	82 83       	std	Z+2, r24	; 0x02
    2118:	11 83       	std	Z+1, r17	; 0x01
    211a:	00 83       	st	Z, r16
    211c:	0a c0       	rjmp	.+20     	; 0x2132 <SimpleStatsRotationBase::put(char const*, int)+0x94>
    // Addition of new field done!
    return(true);
    }

#if 1 && defined(DEBUG)
DEBUG_SERIAL_PRINT_FLASHSTRING("Too many keys: ");
    211e:	89 ee       	ldi	r24, 0xE9	; 233
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	0e 94 42 1c 	call	0x3884	; 0x3884 <serialPrintAndFlush(__FlashStringHelper const*)>
DEBUG_SERIAL_PRINT(key);
    2126:	c8 01       	movw	r24, r16
    2128:	0e 94 2c 1c 	call	0x3858	; 0x3858 <serialPrintAndFlush(char const*)>
DEBUG_SERIAL_PRINTLN();
    212c:	0e 94 00 1c 	call	0x3800	; 0x3800 <serialPrintlnAndFlush()>
#endif
  return(false); // FAILED: full.
    2130:	80 e0       	ldi	r24, 0x00	; 0
  }
    2132:	df 91       	pop	r29
    2134:	cf 91       	pop	r28
    2136:	1f 91       	pop	r17
    2138:	0f 91       	pop	r16
    213a:	ff 90       	pop	r15
    213c:	ef 90       	pop	r14
    213e:	08 95       	ret
DEBUG_SERIAL_PRINTLN();
#endif
    return(false);
    }

  DescValueTuple *p = findByKey(key);
    2140:	ce 01       	movw	r24, r28
    2142:	b8 01       	movw	r22, r16
    2144:	0e 94 14 10 	call	0x2028	; 0x2028 <SimpleStatsRotationBase::findByKey(char const*) const>
    2148:	fc 01       	movw	r30, r24
  // If item already exists, update it.
  if(NULL != p)
    214a:	00 97       	sbiw	r24, 0x00	; 0
    214c:	19 f6       	brne	.-122    	; 0x20d4 <SimpleStatsRotationBase::put(char const*, int)+0x36>
    214e:	ce cf       	rjmp	.-100    	; 0x20ec <SimpleStatsRotationBase::put(char const*, int)+0x4e>

00002150 <SimpleStatsRotationBase::remove(char const*)>:
  return(NULL); // Not found.
  }

// Remove given stat and properties.
// True iff the item existed and was removed.
bool SimpleStatsRotationBase::remove(const SimpleStatsKey key)
    2150:	cf 93       	push	r28
    2152:	df 93       	push	r29
    2154:	ec 01       	movw	r28, r24
  {
  DescValueTuple *p = findByKey(key);
    2156:	0e 94 14 10 	call	0x2028	; 0x2028 <SimpleStatsRotationBase::findByKey(char const*) const>
    215a:	bc 01       	movw	r22, r24
  if(NULL == p) { return(false); }
    215c:	00 97       	sbiw	r24, 0x00	; 0
    215e:	11 f4       	brne	.+4      	; 0x2164 <SimpleStatsRotationBase::remove(char const*)+0x14>
    2160:	80 e0       	ldi	r24, 0x00	; 0
    2162:	2b c0       	rjmp	.+86     	; 0x21ba <SimpleStatsRotationBase::remove(char const*)+0x6a>
  // If it needs to be removed and is not the last item
  // then move the last item down into its slot.
  const bool lastItem = ((p - stats) == (nStats - 1));
    2164:	a9 81       	ldd	r26, Y+1	; 0x01
    2166:	ba 81       	ldd	r27, Y+2	; 0x02
    2168:	4b 81       	ldd	r20, Y+3	; 0x03
  if(!lastItem) { *p = stats[nStats-1]; }
    216a:	9c 01       	movw	r18, r24
    216c:	2a 1b       	sub	r18, r26
    216e:	3b 0b       	sbc	r19, r27
    2170:	87 eb       	ldi	r24, 0xB7	; 183
    2172:	9d e6       	ldi	r25, 0x6D	; 109
    2174:	f9 01       	movw	r30, r18
    2176:	e8 9f       	mul	r30, r24
    2178:	90 01       	movw	r18, r0
    217a:	e9 9f       	mul	r30, r25
    217c:	30 0d       	add	r19, r0
    217e:	f8 9f       	mul	r31, r24
    2180:	30 0d       	add	r19, r0
    2182:	11 24       	eor	r1, r1
    2184:	50 e0       	ldi	r21, 0x00	; 0
    2186:	ca 01       	movw	r24, r20
    2188:	01 97       	sbiw	r24, 0x01	; 1
    218a:	28 17       	cp	r18, r24
    218c:	39 07       	cpc	r19, r25
    218e:	89 f0       	breq	.+34     	; 0x21b2 <SimpleStatsRotationBase::remove(char const*)+0x62>
    2190:	fa 01       	movw	r30, r20
    2192:	83 e0       	ldi	r24, 0x03	; 3
    2194:	ee 0f       	add	r30, r30
    2196:	ff 1f       	adc	r31, r31
    2198:	8a 95       	dec	r24
    219a:	e1 f7       	brne	.-8      	; 0x2194 <SimpleStatsRotationBase::remove(char const*)+0x44>
    219c:	e4 1b       	sub	r30, r20
    219e:	f5 0b       	sbc	r31, r21
    21a0:	ea 0f       	add	r30, r26
    21a2:	fb 1f       	adc	r31, r27
    21a4:	db 01       	movw	r26, r22
    21a6:	37 97       	sbiw	r30, 0x07	; 7
    21a8:	87 e0       	ldi	r24, 0x07	; 7
    21aa:	01 90       	ld	r0, Z+
    21ac:	0d 92       	st	X+, r0
    21ae:	81 50       	subi	r24, 0x01	; 1
    21b0:	e1 f7       	brne	.-8      	; 0x21aa <SimpleStatsRotationBase::remove(char const*)+0x5a>
  // We got rid of one!
  // TODO: possibly explicitly destroy/overwrite the removed one at the end.
  --nStats;
    21b2:	8b 81       	ldd	r24, Y+3	; 0x03
    21b4:	81 50       	subi	r24, 0x01	; 1
    21b6:	8b 83       	std	Y+3, r24	; 0x03
    21b8:	81 e0       	ldi	r24, 0x01	; 1
  return(true);
  }
    21ba:	df 91       	pop	r29
    21bc:	cf 91       	pop	r28
    21be:	08 95       	ret

000021c0 <ensureIDCreated(bool)>:
// Coerce any ID bytes to valid values if unset (0xff) or if forced,
// by filling with valid values (0x80--0xfe) from decent entropy gathered on the fly.
// Will moan about invalid values and return false but not attempt to reset,
// eg in case underlying EEPROM cell is worn/failing.
// Returns true iff all values good.
bool ensureIDCreated(const bool force)
    21c0:	af 92       	push	r10
    21c2:	bf 92       	push	r11
    21c4:	cf 92       	push	r12
    21c6:	df 92       	push	r13
    21c8:	ef 92       	push	r14
    21ca:	ff 92       	push	r15
    21cc:	0f 93       	push	r16
    21ce:	1f 93       	push	r17
    21d0:	cf 93       	push	r28
    21d2:	df 93       	push	r29
    21d4:	a8 2e       	mov	r10, r24
    21d6:	bb 24       	eor	r11, r11
    21d8:	b3 94       	inc	r11
    21da:	ee 24       	eor	r14, r14
    21dc:	ff 24       	eor	r15, r15
    21de:	c4 e1       	ldi	r28, 0x14	; 20
    21e0:	d0 e0       	ldi	r29, 0x00	; 0
    21e2:	dc 2e       	mov	r13, r28
    21e4:	cd 2e       	mov	r12, r29
  {
  bool allGood = true;
  for(uint8_t i = 0; i < EE_LEN_ID; ++i)
    {
    uint8_t * const loc = i + (uint8_t *)EE_START_ID;
    if(force || (0xff == eeprom_read_byte(loc))) // Byte is unset or change is being forced.
    21e6:	aa 20       	and	r10, r10
    21e8:	41 f4       	brne	.+16     	; 0x21fa <ensureIDCreated(bool)+0x3a>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    21ea:	f9 99       	sbic	0x1f, 1	; 31
    21ec:	fe cf       	rjmp	.-4      	; 0x21ea <ensureIDCreated(bool)+0x2a>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    21ee:	d2 bd       	out	0x22, r29	; 34
    21f0:	c1 bd       	out	0x21, r28	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    21f2:	f8 9a       	sbi	0x1f, 0	; 31
    21f4:	80 b5       	in	r24, 0x20	; 32
    21f6:	8f 3f       	cpi	r24, 0xFF	; 255
    21f8:	41 f5       	brne	.+80     	; 0x224a <ensureIDCreated(bool)+0x8a>
        {
        serialPrintAndFlush(F("Setting ID byte "));
    21fa:	86 e1       	ldi	r24, 0x16	; 22
    21fc:	91 e0       	ldi	r25, 0x01	; 1
    21fe:	0e 94 42 1c 	call	0x3884	; 0x3884 <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush(i);
    2202:	c7 01       	movw	r24, r14
    2204:	6a e0       	ldi	r22, 0x0A	; 10
    2206:	70 e0       	ldi	r23, 0x00	; 0
    2208:	0e 94 10 1c 	call	0x3820	; 0x3820 <serialPrintAndFlush(int, int)>
        serialPrintAndFlush(F(" ... "));
    220c:	80 e1       	ldi	r24, 0x10	; 16
    220e:	91 e0       	ldi	r25, 0x01	; 1
    2210:	0e 94 42 1c 	call	0x3884	; 0x3884 <serialPrintAndFlush(__FlashStringHelper const*)>
        const uint8_t envNoise = ((i & 1) ? TemperatureC16.get() : AmbLight.get());
    2214:	e0 fe       	sbrs	r14, 0
    2216:	03 c0       	rjmp	.+6      	; 0x221e <ensureIDCreated(bool)+0x5e>
    2218:	00 91 f7 02 	lds	r16, 0x02F7
    221c:	02 c0       	rjmp	.+4      	; 0x2222 <ensureIDCreated(bool)+0x62>
  public:
    // Return last value fetched by read(); undefined before first read().
    // Usually fast.
    // Often likely to be thread-safe or usable within ISRs (Interrupt Service Routines),
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual uint8_t get() const { return(value); }
    221e:	00 91 ed 02 	lds	r16, 0x02ED
        for( ; ; )
          {
          // Try to make decently-randomised 'unique-ish' ID with mixture of sources.
          // Is not confidential, and will be transmitted in the clear.
          // System will typically not have been running long when this is invoked.
          const uint8_t newValue = 0x80 | (getSecureRandomByte() ^ envNoise);
    2222:	0e 94 c7 1b 	call	0x378e	; 0x378e <getSecureRandomByte()>
    2226:	18 2f       	mov	r17, r24
    2228:	10 27       	eor	r17, r16
    222a:	10 68       	ori	r17, 0x80	; 128
          if(0xff == newValue) { continue; } // Reject unusable value.
    222c:	1f 3f       	cpi	r17, 0xFF	; 255
    222e:	c9 f3       	breq	.-14     	; 0x2222 <ensureIDCreated(bool)+0x62>
          eeprom_smart_update_byte(loc, newValue);
    2230:	8d 2d       	mov	r24, r13
    2232:	9c 2d       	mov	r25, r12
    2234:	61 2f       	mov	r22, r17
    2236:	0e 94 de 08 	call	0x11bc	; 0x11bc <eeprom_smart_update_byte(unsigned char*, unsigned char)>
          serialPrintAndFlush(newValue, HEX);
    223a:	81 2f       	mov	r24, r17
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	60 e1       	ldi	r22, 0x10	; 16
    2240:	70 e0       	ldi	r23, 0x00	; 0
    2242:	0e 94 10 1c 	call	0x3820	; 0x3820 <serialPrintAndFlush(int, int)>
          break;
          }
        serialPrintlnAndFlush();
    2246:	0e 94 00 1c 	call	0x3800	; 0x3800 <serialPrintlnAndFlush()>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    224a:	f9 99       	sbic	0x1f, 1	; 31
    224c:	fe cf       	rjmp	.-4      	; 0x224a <ensureIDCreated(bool)+0x8a>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    224e:	d2 bd       	out	0x22, r29	; 34
    2250:	c1 bd       	out	0x21, r28	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2252:	f8 9a       	sbi	0x1f, 0	; 31
    2254:	10 b5       	in	r17, 0x20	; 32
        }
    // Validate.
    const uint8_t v2 = eeprom_read_byte(loc);
    if(!validIDByte(v2))
    2256:	81 2f       	mov	r24, r17
    2258:	80 58       	subi	r24, 0x80	; 128
    225a:	8f 37       	cpi	r24, 0x7F	; 127
    225c:	b0 f0       	brcs	.+44     	; 0x228a <ensureIDCreated(bool)+0xca>
        {
        allGood = false;
        serialPrintAndFlush(F("Invalid ID byte "));
    225e:	8f ef       	ldi	r24, 0xFF	; 255
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	0e 94 42 1c 	call	0x3884	; 0x3884 <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush(i);
    2266:	c7 01       	movw	r24, r14
    2268:	6a e0       	ldi	r22, 0x0A	; 10
    226a:	70 e0       	ldi	r23, 0x00	; 0
    226c:	0e 94 10 1c 	call	0x3820	; 0x3820 <serialPrintAndFlush(int, int)>
        serialPrintAndFlush(F(" ... "));
    2270:	89 ef       	ldi	r24, 0xF9	; 249
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	0e 94 42 1c 	call	0x3884	; 0x3884 <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush(v2, HEX);
    2278:	81 2f       	mov	r24, r17
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	60 e1       	ldi	r22, 0x10	; 16
    227e:	70 e0       	ldi	r23, 0x00	; 0
    2280:	0e 94 10 1c 	call	0x3820	; 0x3820 <serialPrintAndFlush(int, int)>
        serialPrintlnAndFlush();
    2284:	0e 94 00 1c 	call	0x3800	; 0x3800 <serialPrintlnAndFlush()>
    2288:	bb 24       	eor	r11, r11
    228a:	08 94       	sec
    228c:	e1 1c       	adc	r14, r1
    228e:	f1 1c       	adc	r15, r1
    2290:	21 96       	adiw	r28, 0x01	; 1
// eg in case underlying EEPROM cell is worn/failing.
// Returns true iff all values good.
bool ensureIDCreated(const bool force)
  {
  bool allGood = true;
  for(uint8_t i = 0; i < EE_LEN_ID; ++i)
    2292:	88 e0       	ldi	r24, 0x08	; 8
    2294:	e8 16       	cp	r14, r24
    2296:	f1 04       	cpc	r15, r1
    2298:	09 f0       	breq	.+2      	; 0x229c <ensureIDCreated(bool)+0xdc>
    229a:	a3 cf       	rjmp	.-186    	; 0x21e2 <ensureIDCreated(bool)+0x22>
        serialPrintAndFlush(v2, HEX);
        serialPrintlnAndFlush();
        }
     }
  return(allGood);
  }
    229c:	8b 2d       	mov	r24, r11
    229e:	df 91       	pop	r29
    22a0:	cf 91       	pop	r28
    22a2:	1f 91       	pop	r17
    22a4:	0f 91       	pop	r16
    22a6:	ff 90       	pop	r15
    22a8:	ef 90       	pop	r14
    22aa:	df 90       	pop	r13
    22ac:	cf 90       	pop	r12
    22ae:	bf 90       	pop	r11
    22b0:	af 90       	pop	r10
    22b2:	08 95       	ret

000022b4 <recordCoreStats(bool, FullStatsMessageCore const*)>:
// Record core incoming stats; ID must be set as a minimum.
// Is thread/ISR-safe and fast.
// May be backed by a finite-depth queue, even zero-length (ie discarding); usually holds just one item.
#if defined(ALLOW_STATS_RX)
#ifndef recordCoreStats
void recordCoreStats(const bool secure, const FullStatsMessageCore_t * const stats)
    22b4:	fb 01       	movw	r30, r22
  {
#if 0 && defined(DEBUG)
  if(NULL == payload) { panic(); }
#endif  // TODO
   if(!stats->containsID) { return; } // Ignore if no ID.
    22b6:	80 81       	ld	r24, Z
    22b8:	80 ff       	sbrs	r24, 0
    22ba:	17 c0       	rjmp	.+46     	; 0x22ea <recordCoreStats(bool, FullStatsMessageCore const*)+0x36>
   ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    22bc:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    22be:	f8 94       	cli
    {
    if(coreStats.containsID) { ++inboundStatsQueueOverrun; } // Dropped a frame.
    22c0:	80 91 90 02 	lds	r24, 0x0290
    22c4:	80 ff       	sbrs	r24, 0
    22c6:	09 c0       	rjmp	.+18     	; 0x22da <recordCoreStats(bool, FullStatsMessageCore const*)+0x26>
    22c8:	80 91 97 02 	lds	r24, 0x0297
    22cc:	90 91 98 02 	lds	r25, 0x0298
    22d0:	01 96       	adiw	r24, 0x01	; 1
    22d2:	90 93 98 02 	sts	0x0298, r25
    22d6:	80 93 97 02 	sts	0x0297, r24
    memcpy((void *)&coreStats, stats, sizeof(coreStats));
    22da:	a0 e9       	ldi	r26, 0x90	; 144
    22dc:	b2 e0       	ldi	r27, 0x02	; 2
    22de:	87 e0       	ldi	r24, 0x07	; 7
    22e0:	01 90       	ld	r0, Z+
    22e2:	0d 92       	st	X+, r0
    22e4:	81 50       	subi	r24, 0x01	; 1
    22e6:	e1 f7       	brne	.-8      	; 0x22e0 <recordCoreStats(bool, FullStatsMessageCore const*)+0x2c>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    22e8:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    22ea:	08 95       	ret

000022ec <recordJSONStats(bool, char const*)>:
// The supplied JSON should already have been somewhat validated.
// Is thread/ISR-safe and moderately fast (though will require a data copy).
// May be backed by a finite-depth queue, even zero-length (ie discarding); usually holds just one item.
#if defined(ALLOW_STATS_RX)
#ifndef recordJSONStats
void recordJSONStats(bool secure, const char *json)
    22ec:	1f 93       	push	r17
  {
#if 0 && defined(DEBUG)
  if(NULL == json) { panic(); }
  if('\0' == *json) { panic(); }
#endif
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    22ee:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    22f0:	f8 94       	cli
    {
    if('\0' != *jsonStats) { ++inboundStatsQueueOverrun; } // Dropped a frame.
    22f2:	80 91 99 02 	lds	r24, 0x0299
    22f6:	88 23       	and	r24, r24
    22f8:	49 f0       	breq	.+18     	; 0x230c <recordJSONStats(bool, char const*)+0x20>
    22fa:	80 91 97 02 	lds	r24, 0x0297
    22fe:	90 91 98 02 	lds	r25, 0x0298
    2302:	01 96       	adiw	r24, 0x01	; 1
    2304:	90 93 98 02 	sts	0x0298, r25
    2308:	80 93 97 02 	sts	0x0297, r24
    // Atomically overwrite existing buffer with new non-empty stats message.
    strncpy(jsonStats, json, MSG_JSON_MAX_LENGTH+1);
    230c:	89 e9       	ldi	r24, 0x99	; 153
    230e:	92 e0       	ldi	r25, 0x02	; 2
    2310:	48 e3       	ldi	r20, 0x38	; 56
    2312:	50 e0       	ldi	r21, 0x00	; 0
    2314:	0e 94 c2 02 	call	0x584	; 0x584 <strncpy>
    // Drop over-length message,
    if('\0' != jsonStats[sizeof(jsonStats) - 1]) { *jsonStats = '\0'; }
    2318:	80 91 d0 02 	lds	r24, 0x02D0
    231c:	88 23       	and	r24, r24
    231e:	11 f0       	breq	.+4      	; 0x2324 <recordJSONStats(bool, char const*)+0x38>
    2320:	10 92 99 02 	sts	0x0299, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2324:	1f bf       	out	0x3f, r17	; 63
    }
  }
    2326:	1f 91       	pop	r17
    2328:	08 95       	ret

0000232a <extractTrailingMinimalStatsPayload(unsigned char const*, trailingMinimalStatsPayload*)>:
#endif
  }

// Extract payload from valid (3-byte) header+payload+CRC into payload struct; only 2 bytes are actually read.
// Input bytes (eg header and check value) must already have been validated.
void extractTrailingMinimalStatsPayload(const uint8_t *const buf, trailingMinimalStatsPayload_t *const payload)
    232a:	0f 93       	push	r16
    232c:	1f 93       	push	r17
    232e:	cf 93       	push	r28
    2330:	df 93       	push	r29
    2332:	ec 01       	movw	r28, r24
    2334:	8b 01       	movw	r16, r22
  {
#ifdef DEBUG
  if(NULL == payload) { panic(); }
    2336:	61 15       	cp	r22, r1
    2338:	71 05       	cpc	r23, r1
    233a:	11 f4       	brne	.+4      	; 0x2340 <extractTrailingMinimalStatsPayload(unsigned char const*, trailingMinimalStatsPayload*)+0x16>
    233c:	0e 94 ec 2f 	call	0x5fd8	; 0x5fd8 <panic()>
#endif
  payload->powerLow = (0 != (buf[0] & 0x10));
    2340:	88 81       	ld	r24, Y
    2342:	88 0f       	add	r24, r24
    2344:	88 0f       	add	r24, r24
    2346:	88 0f       	add	r24, r24
    2348:	80 78       	andi	r24, 0x80	; 128
    234a:	f8 01       	movw	r30, r16
    234c:	41 81       	ldd	r20, Z+1	; 0x01
    234e:	4f 77       	andi	r20, 0x7F	; 127
    2350:	48 2b       	or	r20, r24
    2352:	41 83       	std	Z+1, r20	; 0x01
  payload->tempC16 = ((((int16_t) buf[1]) << 4) | (buf[0] & 0xf)) + MESSAGING_TRAILING_MINIMAL_STATS_TEMP_BIAS;
    2354:	29 81       	ldd	r18, Y+1	; 0x01
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	94 e0       	ldi	r25, 0x04	; 4
    235a:	22 0f       	add	r18, r18
    235c:	33 1f       	adc	r19, r19
    235e:	9a 95       	dec	r25
    2360:	e1 f7       	brne	.-8      	; 0x235a <extractTrailingMinimalStatsPayload(unsigned char const*, trailingMinimalStatsPayload*)+0x30>
    2362:	88 81       	ld	r24, Y
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	8f 70       	andi	r24, 0x0F	; 15
    2368:	90 70       	andi	r25, 0x00	; 0
    236a:	28 2b       	or	r18, r24
    236c:	39 2b       	or	r19, r25
    236e:	20 54       	subi	r18, 0x40	; 64
    2370:	31 40       	sbci	r19, 0x01	; 1
    2372:	20 83       	st	Z, r18
    2374:	83 2f       	mov	r24, r19
    2376:	8f 77       	andi	r24, 0x7F	; 127
    2378:	40 78       	andi	r20, 0x80	; 128
    237a:	48 2b       	or	r20, r24
    237c:	41 83       	std	Z+1, r20	; 0x01
  }
    237e:	df 91       	pop	r29
    2380:	cf 91       	pop	r28
    2382:	1f 91       	pop	r17
    2384:	0f 91       	pop	r16
    2386:	08 95       	ret

00002388 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)>:
// If successful returns pointer to next byte of message, ie just after full stats message decoded.
// Returns null if failed (eg because of corrupt message data) and state of 'content' result is undefined.
// This will avoid copying into the result data (possibly tainted) that has arrived at an inappropriate security level.
//   * content will contain data decoded from the message; must be non-null
const uint8_t *decodeFullStatsMessageCore(const uint8_t * const buf, const uint8_t buflen, const stats_TX_level secLevel, const bool secureChannel,
    FullStatsMessageCore_t * const content)
    2388:	ef 92       	push	r14
    238a:	ff 92       	push	r15
    238c:	0f 93       	push	r16
    238e:	1f 93       	push	r17
    2390:	cf 93       	push	r28
    2392:	df 93       	push	r29
    2394:	7c 01       	movw	r14, r24
  {
  if(NULL == buf) { return(NULL); } // Could be an assert/panic instead at a pinch.
    2396:	00 97       	sbiw	r24, 0x00	; 0
    2398:	09 f4       	brne	.+2      	; 0x239c <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x14>
    239a:	8f c0       	rjmp	.+286    	; 0x24ba <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  if(NULL == content) { return(NULL); } // Could be an assert/panic instead at a pinch.
    239c:	01 15       	cp	r16, r1
    239e:	11 05       	cpc	r17, r1
    23a0:	09 f4       	brne	.+2      	; 0x23a4 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x1c>
    23a2:	8b c0       	rjmp	.+278    	; 0x24ba <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  if(buflen < FullStatsMessageCore_MIN_BYTES_ON_WIRE)
    23a4:	63 30       	cpi	r22, 0x03	; 3
    23a6:	08 f4       	brcc	.+2      	; 0x23aa <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x22>
    23a8:	88 c0       	rjmp	.+272    	; 0x24ba <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
#define FullStatsMessageCore_MAX_BYTES_ON_WIRE 8
// Minimum size on wire including trailing CRC of core of FullStatsMessage.  TX message buffer should be one larger for trailing 0xff.
#define FullStatsMessageCore_MIN_BYTES_ON_WIRE 3

// Clear a FullStatsMessageCore_t, also indicating no optional fields present.
static inline void clearFullStatsMessageCore(FullStatsMessageCore_t *const p) { memset(p, 0, sizeof(FullStatsMessageCore_t)); }
    23aa:	87 e0       	ldi	r24, 0x07	; 7
    23ac:	f8 01       	movw	r30, r16
    23ae:	11 92       	st	Z+, r1
    23b0:	8a 95       	dec	r24
    23b2:	e9 f7       	brne	.-6      	; 0x23ae <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x26>
//#define MESSAGING_FULL_STATS_HEADER_MSBS 0x70
//#define MESSAGING_FULL_STATS_HEADER_MASK 0xf0
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_PRESENT 4
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_HIGH 2
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_SECURE 1
  if(MESSAGING_FULL_STATS_HEADER_MSBS != (header & MESSAGING_FULL_STATS_HEADER_MASK)) { return(NULL); } // Bad header.
    23b4:	f7 01       	movw	r30, r14
    23b6:	80 81       	ld	r24, Z
    23b8:	28 2f       	mov	r18, r24
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	c9 01       	movw	r24, r18
    23be:	80 7f       	andi	r24, 0xF0	; 240
    23c0:	90 70       	andi	r25, 0x00	; 0
    23c2:	80 37       	cpi	r24, 0x70	; 112
    23c4:	91 05       	cpc	r25, r1
    23c6:	09 f0       	breq	.+2      	; 0x23ca <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x42>
    23c8:	78 c0       	rjmp	.+240    	; 0x24ba <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  if(0 != (header & MESSAGING_FULL_STATS_HEADER_BITS_ID_SECURE)) { return(NULL); } // TODO: cannot do secure messages yet.
    23ca:	20 fd       	sbrc	r18, 0
    23cc:	76 c0       	rjmp	.+236    	; 0x24ba <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  // READ THE MESSAGE!
  // Pointer to next byte to read in message.
  register const uint8_t *b = buf;

  // Validate the message header and start to fill in structure.
  const uint8_t header = *b++;
    23ce:	e7 01       	movw	r28, r14
    23d0:	21 96       	adiw	r28, 0x01	; 1
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_SECURE 1
  if(MESSAGING_FULL_STATS_HEADER_MSBS != (header & MESSAGING_FULL_STATS_HEADER_MASK)) { return(NULL); } // Bad header.
  if(0 != (header & MESSAGING_FULL_STATS_HEADER_BITS_ID_SECURE)) { return(NULL); } // TODO: cannot do secure messages yet.
  // Extract ID if present.
  const bool containsID = (0 != (header & MESSAGING_FULL_STATS_HEADER_BITS_ID_PRESENT));
  if(containsID)
    23d2:	22 ff       	sbrs	r18, 2
    23d4:	12 c0       	rjmp	.+36     	; 0x23fa <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x72>
    {
    content->containsID = true;
    23d6:	f8 01       	movw	r30, r16
    23d8:	80 81       	ld	r24, Z
    23da:	81 60       	ori	r24, 0x01	; 1
    23dc:	80 83       	st	Z, r24
    const uint8_t idHigh = ((0 != (header & MESSAGING_FULL_STATS_HEADER_BITS_ID_HIGH)) ? 0x80 : 0);
    23de:	21 fd       	sbrc	r18, 1
    23e0:	02 c0       	rjmp	.+4      	; 0x23e6 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x5e>
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	01 c0       	rjmp	.+2      	; 0x23e8 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x60>
    23e6:	90 e8       	ldi	r25, 0x80	; 128
    content->id0 = *b++ | idHigh;
    23e8:	f7 01       	movw	r30, r14
    23ea:	81 81       	ldd	r24, Z+1	; 0x01
    23ec:	89 2b       	or	r24, r25
    23ee:	f8 01       	movw	r30, r16
    23f0:	81 83       	std	Z+1, r24	; 0x01
    content->id1 = *b++ | idHigh;
    23f2:	89 81       	ldd	r24, Y+1	; 0x01
    23f4:	98 2b       	or	r25, r24
    23f6:	92 83       	std	Z+2, r25	; 0x02
    23f8:	22 96       	adiw	r28, 0x02	; 2
    }

  // If next header is temp/power then extract it, else must be the flags header.
  if(MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MSBS == (*b & MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MASK))
    23fa:	88 81       	ld	r24, Y
    23fc:	80 7e       	andi	r24, 0xE0	; 224
    23fe:	80 34       	cpi	r24, 0x40	; 64
    2400:	71 f4       	brne	.+28     	; 0x241e <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x96>
    {
    if(0 != (0x80 & b[1])) { return(NULL); } // Following byte does not have msb correctly cleared.
    2402:	89 81       	ldd	r24, Y+1	; 0x01
    2404:	87 fd       	sbrc	r24, 7
    2406:	59 c0       	rjmp	.+178    	; 0x24ba <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
    extractTrailingMinimalStatsPayload(b, &(content->tempAndPower));
    2408:	b8 01       	movw	r22, r16
    240a:	6d 5f       	subi	r22, 0xFD	; 253
    240c:	7f 4f       	sbci	r23, 0xFF	; 255
    240e:	ce 01       	movw	r24, r28
    2410:	0e 94 95 11 	call	0x232a	; 0x232a <extractTrailingMinimalStatsPayload(unsigned char const*, trailingMinimalStatsPayload*)>
    b += 2;
    2414:	22 96       	adiw	r28, 0x02	; 2
    content->containsTempAndPower = true;
    2416:	f8 01       	movw	r30, r16
    2418:	80 81       	ld	r24, Z
    241a:	82 60       	ori	r24, 0x02	; 2
    241c:	80 83       	st	Z, r24
    }

  // If next header is flags then extract it.
  // FIXME: risk of misinterpretting CRC.
  if(MESSAGING_FULL_STATS_FLAGS_HEADER_MSBS != (*b & MESSAGING_FULL_STATS_FLAGS_HEADER_MASK)) { return(NULL); } // Corrupt message.
    241e:	28 81       	ld	r18, Y
    2420:	42 2f       	mov	r20, r18
    2422:	50 e0       	ldi	r21, 0x00	; 0
    2424:	ca 01       	movw	r24, r20
    2426:	80 7e       	andi	r24, 0xE0	; 224
    2428:	90 70       	andi	r25, 0x00	; 0
    242a:	80 36       	cpi	r24, 0x60	; 96
    242c:	91 05       	cpc	r25, r1
    242e:	09 f0       	breq	.+2      	; 0x2432 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0xaa>
    2430:	44 c0       	rjmp	.+136    	; 0x24ba <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  const uint8_t flagsHeader = *b++;
    2432:	de 01       	movw	r26, r28
    2434:	11 96       	adiw	r26, 0x01	; 1
  content->occ = flagsHeader & 3;
    2436:	23 70       	andi	r18, 0x03	; 3
    2438:	f8 01       	movw	r30, r16
    243a:	86 81       	ldd	r24, Z+6	; 0x06
    243c:	8c 7f       	andi	r24, 0xFC	; 252
    243e:	82 2b       	or	r24, r18
    2440:	86 83       	std	Z+6, r24	; 0x06
  const bool containsAmbL = (0 != (flagsHeader & MESSAGING_FULL_STATS_FLAGS_HEADER_AMBL));
  if(containsAmbL)
    2442:	43 ff       	sbrs	r20, 3
    2444:	0a c0       	rjmp	.+20     	; 0x245a <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0xd2>
    {
    const uint8_t ambL = *b++;
    2446:	99 81       	ldd	r25, Y+1	; 0x01
    if((0 == ambL) || (ambL == (uint8_t)0xff)) { return(NULL); } // Illegal value.
    2448:	89 2f       	mov	r24, r25
    244a:	81 50       	subi	r24, 0x01	; 1
    244c:	8e 3f       	cpi	r24, 0xFE	; 254
    244e:	a8 f5       	brcc	.+106    	; 0x24ba <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  const uint8_t flagsHeader = *b++;
  content->occ = flagsHeader & 3;
  const bool containsAmbL = (0 != (flagsHeader & MESSAGING_FULL_STATS_FLAGS_HEADER_AMBL));
  if(containsAmbL)
    {
    const uint8_t ambL = *b++;
    2450:	11 96       	adiw	r26, 0x01	; 1
    if((0 == ambL) || (ambL == (uint8_t)0xff)) { return(NULL); } // Illegal value.
    content->ambL = ambL;
    2452:	95 83       	std	Z+5, r25	; 0x05
    content->containsAmbL = true;
    2454:	80 81       	ld	r24, Z
    2456:	84 60       	ori	r24, 0x04	; 4
    2458:	80 83       	st	Z, r24
    245a:	f7 01       	movw	r30, r14
    245c:	3f e7       	ldi	r19, 0x7F	; 127
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    245e:	11 e0       	ldi	r17, 0x01	; 1
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
    2460:	77 e3       	ldi	r23, 0x37	; 55
    2462:	21 c0       	rjmp	.+66     	; 0x24a6 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x11e>
    }

  // Finish off by computing and checking the CRC (and return pointer to just after CRC).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    2464:	80 81       	ld	r24, Z
    2466:	60 e8       	ldi	r22, 0x80	; 128
    2468:	40 e0       	ldi	r20, 0x00	; 0
    246a:	50 e0       	ldi	r21, 0x00	; 0
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    246c:	c8 2f       	mov	r28, r24
    246e:	d0 e0       	ldi	r29, 0x00	; 0
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
    2470:	83 2f       	mov	r24, r19
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	26 e0       	ldi	r18, 0x06	; 6
    2476:	96 95       	lsr	r25
    2478:	87 95       	ror	r24
    247a:	2a 95       	dec	r18
    247c:	e1 f7       	brne	.-8      	; 0x2476 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0xee>
    247e:	28 2f       	mov	r18, r24
    2480:	21 70       	andi	r18, 0x01	; 1
        if(0 != (datum & i)) { bit = !bit; }
    2482:	86 2f       	mov	r24, r22
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	8c 23       	and	r24, r28
    2488:	9d 23       	and	r25, r29
    248a:	89 2b       	or	r24, r25
    248c:	09 f0       	breq	.+2      	; 0x2490 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x108>
    248e:	21 27       	eor	r18, r17
        crc <<= 1;
    2490:	33 0f       	add	r19, r19
        if(bit) { crc ^= 0x37; }
    2492:	21 11       	cpse	r18, r1
    2494:	37 27       	eor	r19, r23
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
    2496:	66 95       	lsr	r22
    2498:	4f 5f       	subi	r20, 0xFF	; 255
    249a:	5f 4f       	sbci	r21, 0xFF	; 255
    249c:	48 30       	cpi	r20, 0x08	; 8
    249e:	51 05       	cpc	r21, r1
    24a0:	39 f7       	brne	.-50     	; 0x2470 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0xe8>
    }

  // Finish off by computing and checking the CRC (and return pointer to just after CRC).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    24a2:	31 96       	adiw	r30, 0x01	; 1
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
        }
    return(crc & 0x7f);
    24a4:	3f 77       	andi	r19, 0x7F	; 127
    }

  // Finish off by computing and checking the CRC (and return pointer to just after CRC).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    24a6:	ea 17       	cp	r30, r26
    24a8:	fb 07       	cpc	r31, r27
    24aa:	e0 f2       	brcs	.-72     	; 0x2464 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0xdc>
  if(crc != *b++) { return(NULL); } // Bad CRC.
    24ac:	8c 91       	ld	r24, X
    24ae:	38 17       	cp	r19, r24
    24b0:	21 f4       	brne	.+8      	; 0x24ba <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
    24b2:	9d 01       	movw	r18, r26
    24b4:	2f 5f       	subi	r18, 0xFF	; 255
    24b6:	3f 4f       	sbci	r19, 0xFF	; 255
    24b8:	02 c0       	rjmp	.+4      	; 0x24be <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x136>

  return(b); // Point to just after CRC.
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	30 e0       	ldi	r19, 0x00	; 0
  }
    24be:	c9 01       	movw	r24, r18
    24c0:	df 91       	pop	r29
    24c2:	cf 91       	pop	r28
    24c4:	1f 91       	pop	r17
    24c6:	0f 91       	pop	r16
    24c8:	ff 90       	pop	r15
    24ca:	ef 90       	pop	r14
    24cc:	08 95       	ret

000024ce <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)>:
  }

// Store minimal stats payload into (2-byte) buffer from payload struct (without CRC); values are coerced to fit as necessary..
//   * payload  must be non-null
// Used for minimal and full packet forms,
void writeTrailingMinimalStatsPayloadBody(uint8_t *buf, const trailingMinimalStatsPayload_t *payload)
    24ce:	0f 93       	push	r16
    24d0:	1f 93       	push	r17
    24d2:	cf 93       	push	r28
    24d4:	df 93       	push	r29
    24d6:	8c 01       	movw	r16, r24
    24d8:	eb 01       	movw	r28, r22
  {
#ifdef DEBUG
  if(NULL == payload) { panic(); }
    24da:	61 15       	cp	r22, r1
    24dc:	71 05       	cpc	r23, r1
    24de:	11 f4       	brne	.+4      	; 0x24e4 <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x16>
    24e0:	0e 94 ec 2f 	call	0x5fd8	; 0x5fd8 <panic()>
  DEBUG_SERIAL_PRINTFMT(minTempRepresentable, DEC);
  DEBUG_SERIAL_PRINT_FLASHSTRING(" max=");
  DEBUG_SERIAL_PRINTFMT(maxTempRepresentable, DEC);
  DEBUG_SERIAL_PRINTLN();
#endif
  int16_t temp16Cbiased = payload->tempC16;
    24e4:	88 81       	ld	r24, Y
    24e6:	29 81       	ldd	r18, Y+1	; 0x01
    24e8:	92 2f       	mov	r25, r18
    24ea:	9f 77       	andi	r25, 0x7F	; 127
    24ec:	88 0f       	add	r24, r24
    24ee:	99 1f       	adc	r25, r25
    24f0:	95 95       	asr	r25
    24f2:	87 95       	ror	r24
    24f4:	26 e0       	ldi	r18, 0x06	; 6
    24f6:	80 3c       	cpi	r24, 0xC0	; 192
    24f8:	92 07       	cpc	r25, r18
    24fa:	14 f0       	brlt	.+4      	; 0x2500 <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x32>
    24fc:	8f eb       	ldi	r24, 0xBF	; 191
    24fe:	96 e0       	ldi	r25, 0x06	; 6
    2500:	ee ef       	ldi	r30, 0xFE	; 254
    2502:	80 3c       	cpi	r24, 0xC0	; 192
    2504:	9e 07       	cpc	r25, r30
    2506:	14 f4       	brge	.+4      	; 0x250c <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x3e>
    2508:	80 ec       	ldi	r24, 0xC0	; 192
    250a:	9e ef       	ldi	r25, 0xFE	; 254
  if(temp16Cbiased < minTempRepresentable) { temp16Cbiased = minTempRepresentable; }
  else if(temp16Cbiased > maxTempRepresentable) { temp16Cbiased = maxTempRepresentable; }
  temp16Cbiased -= MESSAGING_TRAILING_MINIMAL_STATS_TEMP_BIAS; // Should now be strictly positive.
    250c:	9c 01       	movw	r18, r24
    250e:	20 5c       	subi	r18, 0xC0	; 192
    2510:	3e 4f       	sbci	r19, 0xFE	; 254
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("temp16Cbiased: ");
  DEBUG_SERIAL_PRINTFMT(temp16Cbiased, DEC);
  DEBUG_SERIAL_PRINTLN();
#endif
  const uint8_t byte0 = MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MSBS | (payload->powerLow ? 0x10 : 0) | (temp16Cbiased & 0xf);
    2512:	89 81       	ldd	r24, Y+1	; 0x01
    2514:	87 fd       	sbrc	r24, 7
    2516:	02 c0       	rjmp	.+4      	; 0x251c <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x4e>
    2518:	90 e4       	ldi	r25, 0x40	; 64
    251a:	01 c0       	rjmp	.+2      	; 0x251e <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x50>
    251c:	90 e5       	ldi	r25, 0x50	; 80
  const uint8_t byte1 = (uint8_t) (temp16Cbiased >> 4);
  buf[0] = byte0;
    251e:	82 2f       	mov	r24, r18
    2520:	8f 70       	andi	r24, 0x0F	; 15
    2522:	98 2b       	or	r25, r24
    2524:	f8 01       	movw	r30, r16
    2526:	90 83       	st	Z, r25
  buf[1] = byte1;
    2528:	44 e0       	ldi	r20, 0x04	; 4
    252a:	35 95       	asr	r19
    252c:	27 95       	ror	r18
    252e:	4a 95       	dec	r20
    2530:	e1 f7       	brne	.-8      	; 0x252a <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x5c>
    2532:	21 83       	std	Z+1, r18	; 0x01
#if 0 && defined(DEBUG)
  for(uint8_t i = 0; i < 2; ++i) { if(0 != (buf[i] & 0x80)) { panic(); } } // MSBits should be clear.
#endif
  }
    2534:	df 91       	pop	r29
    2536:	cf 91       	pop	r28
    2538:	1f 91       	pop	r17
    253a:	0f 91       	pop	r16
    253c:	08 95       	ret

0000253e <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)>:
// Note that up to 7 bytes of payload is optimal for the CRC used.
// If successful, returns pointer to terminating 0xff at end of message.
// Returns null if failed (eg because of bad inputs or insufficient buffer space);
// part of the message may have have been written in this case and in particular the previous terminating 0xff may have been overwritten.
uint8_t *encodeFullStatsMessageCore(uint8_t * const buf, const uint8_t buflen, const stats_TX_level secLevel, const bool secureChannel,
    const FullStatsMessageCore_t * const content)
    253e:	cf 92       	push	r12
    2540:	df 92       	push	r13
    2542:	ef 92       	push	r14
    2544:	ff 92       	push	r15
    2546:	0f 93       	push	r16
    2548:	1f 93       	push	r17
    254a:	cf 93       	push	r28
    254c:	df 93       	push	r29
    254e:	7c 01       	movw	r14, r24
    2550:	6a 01       	movw	r12, r20
  {
  if(NULL == buf) { return(NULL); } // Could be an assert/panic instead at a pinch.
    2552:	00 97       	sbiw	r24, 0x00	; 0
    2554:	09 f4       	brne	.+2      	; 0x2558 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x1a>
    2556:	ad c0       	rjmp	.+346    	; 0x26b2 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x174>
  if(NULL == content) { return(NULL); } // Could be an assert/panic instead at a pinch.
    2558:	01 15       	cp	r16, r1
    255a:	11 05       	cpc	r17, r1
    255c:	09 f4       	brne	.+2      	; 0x2560 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x22>
    255e:	a9 c0       	rjmp	.+338    	; 0x26b2 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x174>
  if(secureChannel) { return(NULL); } // TODO: cannot create secure message yet.
    2560:	22 23       	and	r18, r18
    2562:	09 f0       	breq	.+2      	; 0x2566 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x28>
    2564:	a6 c0       	rjmp	.+332    	; 0x26b2 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x174>
  const uint8_t payloadLength =
      1 + // Initial header.
      (content->containsID ? 2 : 0) +
      (content->containsTempAndPower ? 2 : 0) +
      1 + // Flags header.
      (content->containsAmbL ? 1 : 0);
    2566:	f8 01       	movw	r30, r16
    2568:	80 81       	ld	r24, Z
    256a:	58 2f       	mov	r21, r24
    256c:	51 70       	andi	r21, 0x01	; 1
    256e:	80 fd       	sbrc	r24, 0
    2570:	02 c0       	rjmp	.+4      	; 0x2576 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x38>
    2572:	21 e0       	ldi	r18, 0x01	; 1
    2574:	01 c0       	rjmp	.+2      	; 0x2578 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x3a>
    2576:	23 e0       	ldi	r18, 0x03	; 3
    2578:	f8 01       	movw	r30, r16
    257a:	80 81       	ld	r24, Z
    257c:	81 fd       	sbrc	r24, 1
    257e:	02 c0       	rjmp	.+4      	; 0x2584 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x46>
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	01 c0       	rjmp	.+2      	; 0x2586 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x48>
    2584:	92 e0       	ldi	r25, 0x02	; 2
    2586:	f8 01       	movw	r30, r16
    2588:	40 81       	ld	r20, Z
    258a:	46 95       	lsr	r20
    258c:	46 95       	lsr	r20
    258e:	41 70       	andi	r20, 0x01	; 1
  if(buflen < payloadLength + 2)  { return(NULL); }
    2590:	84 2f       	mov	r24, r20
    2592:	8f 5f       	subi	r24, 0xFF	; 255
    2594:	82 0f       	add	r24, r18
    2596:	89 0f       	add	r24, r25
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	01 96       	adiw	r24, 0x01	; 1
    259c:	26 2f       	mov	r18, r22
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	82 17       	cp	r24, r18
    25a2:	93 07       	cpc	r25, r19
    25a4:	0c f0       	brlt	.+2      	; 0x25a8 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x6a>
    25a6:	85 c0       	rjmp	.+266    	; 0x26b2 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x174>

  // Validate some more detail.
  // ID
  if(content->containsID)
    25a8:	55 23       	and	r21, r21
    25aa:	59 f0       	breq	.+22     	; 0x25c2 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x84>
    {
    if((content->id0 == (uint8_t)0xff) || (content->id1 == (uint8_t)0xff)) { return(NULL); } // ID bytes cannot be 0xff.
    25ac:	91 81       	ldd	r25, Z+1	; 0x01
    25ae:	9f 3f       	cpi	r25, 0xFF	; 255
    25b0:	09 f4       	brne	.+2      	; 0x25b4 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x76>
    25b2:	7f c0       	rjmp	.+254    	; 0x26b2 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x174>
    25b4:	82 81       	ldd	r24, Z+2	; 0x02
    25b6:	8f 3f       	cpi	r24, 0xFF	; 255
    25b8:	09 f4       	brne	.+2      	; 0x25bc <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x7e>
    25ba:	7b c0       	rjmp	.+246    	; 0x26b2 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x174>
    if((content->id0 & 0x80) != (content->id1 & 0x80)) { return(NULL); } // ID top bits don't match.
    25bc:	89 27       	eor	r24, r25
    25be:	87 fd       	sbrc	r24, 7
    25c0:	78 c0       	rjmp	.+240    	; 0x26b2 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x174>
    }
  // Ambient light.
  if(content->containsAmbL)
    25c2:	44 23       	and	r20, r20
    25c4:	31 f0       	breq	.+12     	; 0x25d2 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x94>
    {
    if((content->ambL == 0) || (content->ambL == (uint8_t)0xff)) { return(NULL); } // Forbidden values.
    25c6:	f8 01       	movw	r30, r16
    25c8:	85 81       	ldd	r24, Z+5	; 0x05
    25ca:	81 50       	subi	r24, 0x01	; 1
    25cc:	8e 3f       	cpi	r24, 0xFE	; 254
    25ce:	08 f0       	brcs	.+2      	; 0x25d2 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x94>
    25d0:	70 c0       	rjmp	.+224    	; 0x26b2 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x174>
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_HIGH 2
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_SECURE 1
  const uint8_t header = MESSAGING_FULL_STATS_HEADER_MSBS |
      (content->containsID ? MESSAGING_FULL_STATS_HEADER_BITS_ID_PRESENT : 0) |
      ((content->containsID && (0 != (content->id0 & 0x80))) ? MESSAGING_FULL_STATS_HEADER_BITS_ID_HIGH : 0) |
      0; // TODO: cannot do secure messages yet.
    25d2:	55 23       	and	r21, r21
    25d4:	11 f4       	brne	.+4      	; 0x25da <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x9c>
    25d6:	80 e7       	ldi	r24, 0x70	; 112
    25d8:	08 c0       	rjmp	.+16     	; 0x25ea <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xac>
    25da:	f8 01       	movw	r30, r16
    25dc:	81 81       	ldd	r24, Z+1	; 0x01
    25de:	87 ff       	sbrs	r24, 7
    25e0:	03 c0       	rjmp	.+6      	; 0x25e8 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xaa>
    25e2:	92 e0       	ldi	r25, 0x02	; 2
    25e4:	84 e7       	ldi	r24, 0x74	; 116
    25e6:	02 c0       	rjmp	.+4      	; 0x25ec <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xae>
    25e8:	84 e7       	ldi	r24, 0x74	; 116
    25ea:	90 e0       	ldi	r25, 0x00	; 0
  *b++ = header;
    25ec:	89 2b       	or	r24, r25
    25ee:	e7 01       	movw	r28, r14
    25f0:	89 93       	st	Y+, r24
 
  // Insert ID if requested.
  if(content->containsID)
    25f2:	f8 01       	movw	r30, r16
    25f4:	80 81       	ld	r24, Z
    25f6:	80 ff       	sbrs	r24, 0
    25f8:	09 c0       	rjmp	.+18     	; 0x260c <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xce>
    {
    *b++ = content->id0 & 0x7f;
    25fa:	81 81       	ldd	r24, Z+1	; 0x01
    25fc:	8f 77       	andi	r24, 0x7F	; 127
    25fe:	f7 01       	movw	r30, r14
    2600:	81 83       	std	Z+1, r24	; 0x01
    *b++ = content->id1 & 0x7f;
    2602:	f8 01       	movw	r30, r16
    2604:	82 81       	ldd	r24, Z+2	; 0x02
    2606:	8f 77       	andi	r24, 0x7F	; 127
    2608:	89 83       	std	Y+1, r24	; 0x01
    260a:	22 96       	adiw	r28, 0x02	; 2
    }

  // Insert basic temperature and power status if requested.
  if(content->containsTempAndPower)
    260c:	f8 01       	movw	r30, r16
    260e:	80 81       	ld	r24, Z
    2610:	81 ff       	sbrs	r24, 1
    2612:	07 c0       	rjmp	.+14     	; 0x2622 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xe4>
    {
    writeTrailingMinimalStatsPayloadBody(b, &(content->tempAndPower));
    2614:	b8 01       	movw	r22, r16
    2616:	6d 5f       	subi	r22, 0xFD	; 253
    2618:	7f 4f       	sbci	r23, 0xFF	; 255
    261a:	ce 01       	movw	r24, r28
    261c:	0e 94 67 12 	call	0x24ce	; 0x24ce <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)>
    b += 2;
    2620:	22 96       	adiw	r28, 0x02	; 2
//#define MESSAGING_FULL_STATS_FLAGS_HEADER_AMBL 8
//#define MESSAGING_FULL_STATS_FLAGS_HEADER_RHP 4
  // Omit occupancy data unless encoding for a secure channel or at a very permissive stats TX security level.
  const uint8_t flagsHeader = MESSAGING_FULL_STATS_FLAGS_HEADER_MSBS |
    (content->containsAmbL ? MESSAGING_FULL_STATS_FLAGS_HEADER_AMBL : 0) |
    ((secureChannel || (secLevel <= stTXalwaysAll)) ? (content->occ & 3) : 0);
    2622:	f8 01       	movw	r30, r16
    2624:	80 81       	ld	r24, Z
    2626:	82 fd       	sbrc	r24, 2
    2628:	02 c0       	rjmp	.+4      	; 0x262e <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xf0>
    262a:	90 e6       	ldi	r25, 0x60	; 96
    262c:	01 c0       	rjmp	.+2      	; 0x2630 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xf2>
    262e:	98 e6       	ldi	r25, 0x68	; 104
    2630:	1c 14       	cp	r1, r12
    2632:	1d 04       	cpc	r1, r13
    2634:	14 f4       	brge	.+4      	; 0x263a <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xfc>
    2636:	80 e0       	ldi	r24, 0x00	; 0
    2638:	03 c0       	rjmp	.+6      	; 0x2640 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x102>
    263a:	f8 01       	movw	r30, r16
    263c:	86 81       	ldd	r24, Z+6	; 0x06
    263e:	83 70       	andi	r24, 0x03	; 3
  *b++ = flagsHeader;
    2640:	89 2b       	or	r24, r25
    2642:	de 01       	movw	r26, r28
    2644:	8d 93       	st	X+, r24
  // Now insert extra fields as flagged.
  if(content->containsAmbL)
    2646:	f8 01       	movw	r30, r16
    2648:	80 81       	ld	r24, Z
    264a:	82 ff       	sbrs	r24, 2
    264c:	03 c0       	rjmp	.+6      	; 0x2654 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x116>
    { *b++ = content->ambL; }
    264e:	85 81       	ldd	r24, Z+5	; 0x05
    2650:	89 83       	std	Y+1, r24	; 0x01
    2652:	11 96       	adiw	r26, 0x01	; 1
    2654:	f7 01       	movw	r30, r14
    2656:	3f e7       	ldi	r19, 0x7F	; 127
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    2658:	11 e0       	ldi	r17, 0x01	; 1
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
    265a:	77 e3       	ldi	r23, 0x37	; 55
    265c:	21 c0       	rjmp	.+66     	; 0x26a0 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x162>
  // TODO: RH% etc

  // Finish off message by computing and appending the CRC and then terminating 0xff (and return pointer to 0xff).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    265e:	80 81       	ld	r24, Z
    2660:	60 e8       	ldi	r22, 0x80	; 128
    2662:	40 e0       	ldi	r20, 0x00	; 0
    2664:	50 e0       	ldi	r21, 0x00	; 0
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    2666:	c8 2f       	mov	r28, r24
    2668:	d0 e0       	ldi	r29, 0x00	; 0
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
    266a:	83 2f       	mov	r24, r19
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	06 e0       	ldi	r16, 0x06	; 6
    2670:	96 95       	lsr	r25
    2672:	87 95       	ror	r24
    2674:	0a 95       	dec	r16
    2676:	e1 f7       	brne	.-8      	; 0x2670 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x132>
    2678:	28 2f       	mov	r18, r24
    267a:	21 70       	andi	r18, 0x01	; 1
        if(0 != (datum & i)) { bit = !bit; }
    267c:	86 2f       	mov	r24, r22
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	8c 23       	and	r24, r28
    2682:	9d 23       	and	r25, r29
    2684:	89 2b       	or	r24, r25
    2686:	09 f0       	breq	.+2      	; 0x268a <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x14c>
    2688:	21 27       	eor	r18, r17
        crc <<= 1;
    268a:	33 0f       	add	r19, r19
        if(bit) { crc ^= 0x37; }
    268c:	21 11       	cpse	r18, r1
    268e:	37 27       	eor	r19, r23
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
    2690:	66 95       	lsr	r22
    2692:	4f 5f       	subi	r20, 0xFF	; 255
    2694:	5f 4f       	sbci	r21, 0xFF	; 255
    2696:	48 30       	cpi	r20, 0x08	; 8
    2698:	51 05       	cpc	r21, r1
    269a:	39 f7       	brne	.-50     	; 0x266a <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x12c>
  // TODO: RH% etc

  // Finish off message by computing and appending the CRC and then terminating 0xff (and return pointer to 0xff).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    269c:	31 96       	adiw	r30, 0x01	; 1
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
        }
    return(crc & 0x7f);
    269e:	3f 77       	andi	r19, 0x7F	; 127
  // TODO: RH% etc

  // Finish off message by computing and appending the CRC and then terminating 0xff (and return pointer to 0xff).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    26a0:	ea 17       	cp	r30, r26
    26a2:	fb 07       	cpc	r31, r27
    26a4:	e0 f2       	brcs	.-72     	; 0x265e <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x120>
  *b++ = crc;
    26a6:	fd 01       	movw	r30, r26
    26a8:	31 93       	st	Z+, r19
  *b = 0xff;
    26aa:	8f ef       	ldi	r24, 0xFF	; 255
    26ac:	11 96       	adiw	r26, 0x01	; 1
    26ae:	8c 93       	st	X, r24
    26b0:	02 c0       	rjmp	.+4      	; 0x26b6 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x178>
#if 0 && defined(DEBUG)
  if(b - buf != payloadLength + 1) { panic(F("msg gen err")); }
#endif
  return(b);
    26b2:	e0 e0       	ldi	r30, 0x00	; 0
    26b4:	f0 e0       	ldi	r31, 0x00	; 0
  }
    26b6:	cf 01       	movw	r24, r30
    26b8:	df 91       	pop	r29
    26ba:	cf 91       	pop	r28
    26bc:	1f 91       	pop	r17
    26be:	0f 91       	pop	r16
    26c0:	ff 90       	pop	r15
    26c2:	ef 90       	pop	r14
    26c4:	df 90       	pop	r13
    26c6:	cf 90       	pop	r12
    26c8:	08 95       	ret

000026ca <SupplyVoltageMilliVolts::get() const>:
    virtual uint16_t read();

    // Return last value fetched by read(); undefined before first read()).
    // Fast.
    // NOT thread-safe nor usable within ISRs (Interrupt Service Routines).
    virtual uint16_t get() const { return(mV); }
    26ca:	fc 01       	movw	r30, r24
    26cc:	84 81       	ldd	r24, Z+4	; 0x04
    26ce:	95 81       	ldd	r25, Z+5	; 0x05
    26d0:	08 95       	ret

000026d2 <SupplyVoltageMilliVolts::tag() const>:

    // Returns a suggested (JSON) tag/field/key name including units of get(); NULL means no recommended tag.
    // The lifetime of the pointed-to text must be at least that of the Sensor instance.
    virtual const char *tag() const { return("B|mV"); }
    26d2:	87 e1       	ldi	r24, 0x17	; 23
    26d4:	91 e0       	ldi	r25, 0x01	; 1
    26d6:	08 95       	ret

000026d8 <__vector_9>:
  timer2XtalIntSetup();
#endif
  }

#ifdef WAKEUP_32768HZ_XTAL
ISR(TIMER2_OVF_vect)
    26d8:	1f 92       	push	r1
    26da:	0f 92       	push	r0
    26dc:	0f b6       	in	r0, 0x3f	; 63
    26de:	0f 92       	push	r0
    26e0:	11 24       	eor	r1, r1
    26e2:	2f 93       	push	r18
    26e4:	8f 93       	push	r24
    26e6:	9f 93       	push	r25
// must not enable interrupts, and must leave interrupt state as was on entry.
// If not being called from an ISR then locking round this call that works with the getXXX() functions should be considered.
static inline void tickSecondISR()
#endif
  {
  register uint_fast8_t sTemp = _secondsLT; // Avoid some redundant memory accesses.
    26e8:	80 91 df 02 	lds	r24, 0x02DF
  sTemp += MAIN_TICK_S;
    26ec:	8e 5f       	subi	r24, 0xFE	; 254
  if(sTemp > 59)
    26ee:	8c 33       	cpi	r24, 0x3C	; 60
    26f0:	c8 f0       	brcs	.+50     	; 0x2724 <__vector_9+0x4c>
    {
    sTemp = 0; // Seconds roll.
    register uint_least16_t mTemp = _minutesSinceMidnightLT + 1; // Avoid some redundant memory accesses.
    26f2:	80 91 e0 02 	lds	r24, 0x02E0
    26f6:	90 91 e1 02 	lds	r25, 0x02E1
    26fa:	01 96       	adiw	r24, 0x01	; 1
    if(mTemp > 1439)
    26fc:	25 e0       	ldi	r18, 0x05	; 5
    26fe:	80 3a       	cpi	r24, 0xA0	; 160
    2700:	92 07       	cpc	r25, r18
    2702:	58 f0       	brcs	.+22     	; 0x271a <__vector_9+0x42>
      {
      mTemp = 0; // Minutes/hours roll.
      // Increment the day.
      ++_daysSince1999LT; // Don't currently prevent roll.
    2704:	80 91 e2 02 	lds	r24, 0x02E2
    2708:	90 91 e3 02 	lds	r25, 0x02E3
    270c:	01 96       	adiw	r24, 0x01	; 1
    270e:	90 93 e3 02 	sts	0x02E3, r25
    2712:	80 93 e2 02 	sts	0x02E2, r24
    2716:	80 e0       	ldi	r24, 0x00	; 0
    2718:	90 e0       	ldi	r25, 0x00	; 0
      }
    _minutesSinceMidnightLT = mTemp;
    271a:	90 93 e1 02 	sts	0x02E1, r25
    271e:	80 93 e0 02 	sts	0x02E0, r24
    2722:	80 e0       	ldi	r24, 0x00	; 0
    }
  _secondsLT = sTemp;
    2724:	80 93 df 02 	sts	0x02DF, r24
#if defined(TWO_S_TICK_RTC_SUPPORT)
  tickDoubleSecondISR();
#else
  tickSecondISR();
#endif
  }
    2728:	9f 91       	pop	r25
    272a:	8f 91       	pop	r24
    272c:	2f 91       	pop	r18
    272e:	0f 90       	pop	r0
    2730:	0f be       	out	0x3f, r0	; 63
    2732:	0f 90       	pop	r0
    2734:	1f 90       	pop	r1
    2736:	18 95       	reti

00002738 <__vector_6>:
// May contain a little entropy concentrated in the least-significant bits, in part from WDT-vs-CPU-clock jitter, especially if not sleeping.
static volatile uint8_t _watchdogFired;

// Catch watchdog timer interrupt to automatically clear WDIE and WDIF.
// This allows use of watchdog for low-power timed sleep.
ISR(WDT_vect)
    2738:	1f 92       	push	r1
    273a:	0f 92       	push	r0
    273c:	0f b6       	in	r0, 0x3f	; 63
    273e:	0f 92       	push	r0
    2740:	11 24       	eor	r1, r1
    2742:	8f 93       	push	r24
    2744:	9f 93       	push	r25
    2746:	df 93       	push	r29
    2748:	cf 93       	push	r28
    274a:	0f 92       	push	r0
    274c:	cd b7       	in	r28, 0x3d	; 61
    274e:	de b7       	in	r29, 0x3e	; 62
  {
  // WDIE and WDIF are cleared in hardware upon entering this ISR.
  wdt_disable();
    2750:	88 e1       	ldi	r24, 0x18	; 24
    2752:	0f b6       	in	r0, 0x3f	; 63
    2754:	f8 94       	cli
    2756:	80 93 60 00 	sts	0x0060, r24
    275a:	10 92 60 00 	sts	0x0060, r1
    275e:	0f be       	out	0x3f, r0	; 63
  // Note: be careful of what is accessed from this ISR.
  // Capture some marginal entropy from the stack position.
  // 
  uint8_t x;
  _watchdogFired = ((uint8_t) 0x80) | ((uint8_t) (int) &x); // Ensure non-zero, retaining any entropy in ls bits.
    2760:	ce 01       	movw	r24, r28
    2762:	01 96       	adiw	r24, 0x01	; 1
    2764:	80 68       	ori	r24, 0x80	; 128
    2766:	80 93 d8 02 	sts	0x02D8, r24
  }
    276a:	0f 90       	pop	r0
    276c:	cf 91       	pop	r28
    276e:	df 91       	pop	r29
    2770:	9f 91       	pop	r25
    2772:	8f 91       	pop	r24
    2774:	0f 90       	pop	r0
    2776:	0f be       	out	0x3f, r0	; 63
    2778:	0f 90       	pop	r0
    277a:	1f 90       	pop	r1
    277c:	18 95       	reti

0000277e <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>:
// Note: inlining is prevented so as to avoid migrating anything into the section where the CPU is running slowly.
//
// Note: may be dubious to run CPU clock less than 4x 32768Hz crystal speed,
// eg at 31250Hz for 8MHz RC clock and max prescale.
// Don't access timer 2 regs at low CPU speed, eg in ISRs.
__attribute__ ((noinline)) void sleepLowPowerLoopsMinCPUSpeed(uint16_t loops)
    277e:	fc 01       	movw	r30, r24
  {
  const clock_div_t prescale = clock_prescale_get(); // Capture current prescale value.
    2780:	80 91 61 00 	lds	r24, 0x0061
  clock_prescale_set(MAX_CPU_PRESCALE); // Reduce clock speed (increase prescale) as far as possible.
    2784:	28 e0       	ldi	r18, 0x08	; 8
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	40 e8       	ldi	r20, 0x80	; 128
    278a:	0f b6       	in	r0, 0x3f	; 63
    278c:	f8 94       	cli
    278e:	40 93 61 00 	sts	0x0061, r20
    2792:	20 93 61 00 	sts	0x0061, r18
    2796:	0f be       	out	0x3f, r0	; 63
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    2798:	31 97       	sbiw	r30, 0x01	; 1
    279a:	f1 f7       	brne	.-4      	; 0x2798 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)+0x1a>
  _delay_loop_2(loops); // Burn cycles...
  clock_prescale_set(prescale); // Restore clock prescale.
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	8f 70       	andi	r24, 0x0F	; 15
    27a0:	90 70       	andi	r25, 0x00	; 0
    27a2:	20 e8       	ldi	r18, 0x80	; 128
    27a4:	0f b6       	in	r0, 0x3f	; 63
    27a6:	f8 94       	cli
    27a8:	20 93 61 00 	sts	0x0061, r18
    27ac:	80 93 61 00 	sts	0x0061, r24
    27b0:	0f be       	out	0x3f, r0	; 63
  }
    27b2:	08 95       	ret

000027b4 <nap(signed char)>:
//   * watchdogSleep is one of the WDTO_XX values from <avr/wdt.h>
// May be useful to call minimsePowerWithoutSleep() first, when not needing any modules left on.
void nap(int_fast8_t watchdogSleep)
  {
  // Watchdog should (already) be disabled on entry.
  _watchdogFired = 0;
    27b4:	10 92 d8 02 	sts	0x02D8, r1

  wdt_enable(watchdogSleep);
    27b8:	83 fd       	sbrc	r24, 3
    27ba:	02 c0       	rjmp	.+4      	; 0x27c0 <nap(signed char)+0xc>
    27bc:	28 e0       	ldi	r18, 0x08	; 8
    27be:	01 c0       	rjmp	.+2      	; 0x27c2 <nap(signed char)+0xe>
    27c0:	28 e2       	ldi	r18, 0x28	; 40
    27c2:	87 70       	andi	r24, 0x07	; 7
    27c4:	28 2b       	or	r18, r24
    27c6:	88 e1       	ldi	r24, 0x18	; 24
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	0f b6       	in	r0, 0x3f	; 63
    27cc:	f8 94       	cli
    27ce:	a8 95       	wdr
    27d0:	80 93 60 00 	sts	0x0060, r24
    27d4:	0f be       	out	0x3f, r0	; 63
    27d6:	20 93 60 00 	sts	0x0060, r18
  WDTCSR |= (1 << WDIE);
    27da:	80 91 60 00 	lds	r24, 0x0060
    27de:	80 64       	ori	r24, 0x40	; 64
    27e0:	80 93 60 00 	sts	0x0060, r24
#endif

// Sleep with BOD disabled in power-save mode; will wake on any interrupt.
void sleepPwrSaveWithBODDisabled()
  {
  set_sleep_mode(SLEEP_MODE_PWR_SAVE); // Stop all but timer 2 and watchdog when sleeping.
    27e4:	83 b7       	in	r24, 0x33	; 51
    27e6:	81 7f       	andi	r24, 0xF1	; 241
    27e8:	86 60       	ori	r24, 0x06	; 6
    27ea:	83 bf       	out	0x33, r24	; 51
  cli();
    27ec:	f8 94       	cli
  sleep_enable();
    27ee:	83 b7       	in	r24, 0x33	; 51
    27f0:	81 60       	ori	r24, 0x01	; 1
    27f2:	83 bf       	out	0x33, r24	; 51
  sleep_bod_disable();
    27f4:	85 b7       	in	r24, 0x35	; 53
    27f6:	80 66       	ori	r24, 0x60	; 96
    27f8:	85 bf       	out	0x35, r24	; 53
    27fa:	8f 7d       	andi	r24, 0xDF	; 223
    27fc:	85 bf       	out	0x35, r24	; 53
  sei();
    27fe:	78 94       	sei
  sleep_cpu();
    2800:	88 95       	sleep
  sleep_disable();
    2802:	83 b7       	in	r24, 0x33	; 51
    2804:	8e 7f       	andi	r24, 0xFE	; 254
    2806:	83 bf       	out	0x33, r24	; 51
  sei();
    2808:	78 94       	sei

  // Keep sleeping until watchdog actually fires.
  for( ; ; )
    {
    sleepPwrSaveWithBODDisabled();
    if(0 != _watchdogFired)
    280a:	80 91 d8 02 	lds	r24, 0x02D8
    280e:	88 23       	and	r24, r24
    2810:	49 f3       	breq	.-46     	; 0x27e4 <nap(signed char)+0x30>
      {
      wdt_disable(); // Avoid spurious wakeup later.
    2812:	88 e1       	ldi	r24, 0x18	; 24
    2814:	0f b6       	in	r0, 0x3f	; 63
    2816:	f8 94       	cli
    2818:	80 93 60 00 	sts	0x0060, r24
    281c:	10 92 60 00 	sts	0x0060, r1
    2820:	0f be       	out	0x3f, r0	; 63
      return; // All done!
      }
    }
 }
    2822:	08 95       	ret

00002824 <idleCPU(signed char)>:
// Should reduce power consumption vs spinning the CPU >> 3x, though not nearly as much as nap().
// True iff watchdog timer expired; false if something else woke the CPU.
bool idleCPU(const int_fast8_t watchdogSleep)
  {
  // Watchdog should (already) be disabled on entry.
  _watchdogFired = 0;
    2824:	10 92 d8 02 	sts	0x02D8, r1
  wdt_enable(watchdogSleep);
    2828:	83 fd       	sbrc	r24, 3
    282a:	02 c0       	rjmp	.+4      	; 0x2830 <idleCPU(signed char)+0xc>
    282c:	28 e0       	ldi	r18, 0x08	; 8
    282e:	01 c0       	rjmp	.+2      	; 0x2832 <idleCPU(signed char)+0xe>
    2830:	28 e2       	ldi	r18, 0x28	; 40
    2832:	87 70       	andi	r24, 0x07	; 7
    2834:	28 2b       	or	r18, r24
    2836:	88 e1       	ldi	r24, 0x18	; 24
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	0f b6       	in	r0, 0x3f	; 63
    283c:	f8 94       	cli
    283e:	a8 95       	wdr
    2840:	80 93 60 00 	sts	0x0060, r24
    2844:	0f be       	out	0x3f, r0	; 63
    2846:	20 93 60 00 	sts	0x0060, r18
  WDTCSR |= (1 << WDIE);
    284a:	80 91 60 00 	lds	r24, 0x0060
    284e:	80 64       	ori	r24, 0x40	; 64
    2850:	80 93 60 00 	sts	0x0060, r24
  set_sleep_mode(SLEEP_MODE_IDLE); // Leave everything running but the CPU...
    2854:	83 b7       	in	r24, 0x33	; 51
    2856:	81 7f       	andi	r24, 0xF1	; 241
    2858:	83 bf       	out	0x33, r24	; 51
  sleep_mode();
    285a:	83 b7       	in	r24, 0x33	; 51
    285c:	81 60       	ori	r24, 0x01	; 1
    285e:	83 bf       	out	0x33, r24	; 51
    2860:	88 95       	sleep
    2862:	83 b7       	in	r24, 0x33	; 51
    2864:	8e 7f       	andi	r24, 0xFE	; 254
    2866:	83 bf       	out	0x33, r24	; 51
  //sleep_disable();
  wdt_disable();
    2868:	88 e1       	ldi	r24, 0x18	; 24
    286a:	0f b6       	in	r0, 0x3f	; 63
    286c:	f8 94       	cli
    286e:	80 93 60 00 	sts	0x0060, r24
    2872:	10 92 60 00 	sts	0x0060, r1
    2876:	0f be       	out	0x3f, r0	; 63
  return(0 != _watchdogFired);
    2878:	80 91 d8 02 	lds	r24, 0x02D8
    287c:	81 11       	cpse	r24, r1
    287e:	81 e0       	ldi	r24, 0x01	; 1
  }
    2880:	08 95       	ret

00002882 <__vector_21>:
  }


// Allow wake from (lower-power) sleep while ADC is running.
static volatile bool ADC_complete;
ISR(ADC_vect) { ADC_complete = true; }
    2882:	1f 92       	push	r1
    2884:	0f 92       	push	r0
    2886:	0f b6       	in	r0, 0x3f	; 63
    2888:	0f 92       	push	r0
    288a:	11 24       	eor	r1, r1
    288c:	8f 93       	push	r24
    288e:	81 e0       	ldi	r24, 0x01	; 1
    2890:	80 93 da 02 	sts	0x02DA, r24
    2894:	8f 91       	pop	r24
    2896:	0f 90       	pop	r0
    2898:	0f be       	out	0x3f, r0	; 63
    289a:	0f 90       	pop	r0
    289c:	1f 90       	pop	r1
    289e:	18 95       	reti

000028a0 <_analogueNoiseReducedReadM(unsigned char, signed char)>:

// Read ADC/analogue input with reduced noise if possible, in range [0,1023].
//   * admux  is the value to set ADMUX to
//   * samples  maximum number of samples to take (if one, nap() before); strictly positive
// Sets sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
static uint16_t _analogueNoiseReducedReadM(const uint8_t admux, int8_t samples = 3)
    28a0:	0f 93       	push	r16
    28a2:	1f 93       	push	r17
    28a4:	98 2f       	mov	r25, r24
    28a6:	16 2f       	mov	r17, r22
// If already powered up then do nothing other than return false.
// This does not power up the analogue comparator; this needs to be manually enabled if required.
// If this returns true then a matching powerDownADC() may be advisable.
bool powerUpADCIfDisabled()
  {
  if(!(PRR & _BV(PRADC))) { return(false); }
    28a8:	80 91 64 00 	lds	r24, 0x0064
    28ac:	80 fd       	sbrc	r24, 0
    28ae:	02 c0       	rjmp	.+4      	; 0x28b4 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x14>
    28b0:	00 e0       	ldi	r16, 0x00	; 0
    28b2:	0b c0       	rjmp	.+22     	; 0x28ca <_analogueNoiseReducedReadM(unsigned char, signed char)+0x2a>
  PRR &= ~_BV(PRADC); // Enable the ADC.
    28b4:	80 91 64 00 	lds	r24, 0x0064
    28b8:	8e 7f       	andi	r24, 0xFE	; 254
    28ba:	80 93 64 00 	sts	0x0064, r24
  ADCSRA |= _BV(ADEN);
    28be:	80 91 7a 00 	lds	r24, 0x007A
    28c2:	80 68       	ori	r24, 0x80	; 128
    28c4:	80 93 7a 00 	sts	0x007A, r24
    28c8:	01 e0       	ldi	r16, 0x01	; 1
//   * samples  maximum number of samples to take (if one, nap() before); strictly positive
// Sets sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
static uint16_t _analogueNoiseReducedReadM(const uint8_t admux, int8_t samples = 3)
  {
  const bool neededEnable = powerUpADCIfDisabled();
  ACSR |= _BV(ACD); // Disable the analogue comparator.
    28ca:	80 b7       	in	r24, 0x30	; 48
    28cc:	80 68       	ori	r24, 0x80	; 128
    28ce:	80 bf       	out	0x30, r24	; 48
  ADMUX = admux;
    28d0:	90 93 7c 00 	sts	0x007C, r25
  if(samples < 2) { nap(WDTO_15MS); } // Allow plenty of time for things to settle if not taking multiple samples.
    28d4:	12 30       	cpi	r17, 0x02	; 2
    28d6:	1c f4       	brge	.+6      	; 0x28de <_analogueNoiseReducedReadM(unsigned char, signed char)+0x3e>
    28d8:	80 e0       	ldi	r24, 0x00	; 0
    28da:	0e 94 da 13 	call	0x27b4	; 0x27b4 <nap(signed char)>
  set_sleep_mode(SLEEP_MODE_ADC);
    28de:	83 b7       	in	r24, 0x33	; 51
    28e0:	81 7f       	andi	r24, 0xF1	; 241
    28e2:	82 60       	ori	r24, 0x02	; 2
    28e4:	83 bf       	out	0x33, r24	; 51
  ADCSRB = 0; // Enable free-running mode.
    28e6:	10 92 7b 00 	sts	0x007B, r1
  bitWrite(ADCSRA, ADATE, (samples>1)); // Enable ADC auto-trigger iff wanting multiple samples.
    28ea:	12 30       	cpi	r17, 0x02	; 2
    28ec:	24 f0       	brlt	.+8      	; 0x28f6 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x56>
    28ee:	80 91 7a 00 	lds	r24, 0x007A
    28f2:	80 62       	ori	r24, 0x20	; 32
    28f4:	03 c0       	rjmp	.+6      	; 0x28fc <_analogueNoiseReducedReadM(unsigned char, signed char)+0x5c>
    28f6:	80 91 7a 00 	lds	r24, 0x007A
    28fa:	8f 7d       	andi	r24, 0xDF	; 223
    28fc:	80 93 7a 00 	sts	0x007A, r24
  bitSet(ADCSRA, ADIE); // Turn on ADC interrupt.
    2900:	80 91 7a 00 	lds	r24, 0x007A
    2904:	88 60       	ori	r24, 0x08	; 8
    2906:	80 93 7a 00 	sts	0x007A, r24
  bitSet(ADCSRA, ADSC); // Start conversion(s).
    290a:	80 91 7a 00 	lds	r24, 0x007A
    290e:	80 64       	ori	r24, 0x40	; 64
    2910:	80 93 7a 00 	sts	0x007A, r24
    2914:	4f ef       	ldi	r20, 0xFF	; 255
    2916:	9f ef       	ldi	r25, 0xFF	; 255
    2918:	21 c0       	rjmp	.+66     	; 0x295c <_analogueNoiseReducedReadM(unsigned char, signed char)+0xbc>
  uint8_t oldADCL = 0xff;
  uint8_t oldADCH = 0xff; // Ensure that a second sample will get taken if multiple samples have been requested.
  // Usually take several readings to improve accuracy.  Discard all but the last...
  while(--samples >= 0)
      {
      ADC_complete = false;
    291a:	10 92 da 02 	sts	0x02DA, r1
    291e:	07 c0       	rjmp	.+14     	; 0x292e <_analogueNoiseReducedReadM(unsigned char, signed char)+0x8e>
      while(!ADC_complete) { sleep_mode(); }
    2920:	83 b7       	in	r24, 0x33	; 51
    2922:	81 60       	ori	r24, 0x01	; 1
    2924:	83 bf       	out	0x33, r24	; 51
    2926:	88 95       	sleep
    2928:	83 b7       	in	r24, 0x33	; 51
    292a:	8e 7f       	andi	r24, 0xFE	; 254
    292c:	83 bf       	out	0x33, r24	; 51
    292e:	80 91 da 02 	lds	r24, 0x02DA
    2932:	88 23       	and	r24, r24
    2934:	a9 f3       	breq	.-22     	; 0x2920 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x80>
      const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
    2936:	30 91 78 00 	lds	r19, 0x0078
      const uint8_t h = ADCH; // Capture the high byte.
    293a:	20 91 79 00 	lds	r18, 0x0079
      if((h == oldADCH) && (l == oldADCL)) { break; } // Stop now if result seems to have settled.
    293e:	29 17       	cp	r18, r25
    2940:	11 f4       	brne	.+4      	; 0x2946 <_analogueNoiseReducedReadM(unsigned char, signed char)+0xa6>
    2942:	34 17       	cp	r19, r20
    2944:	71 f0       	breq	.+28     	; 0x2962 <_analogueNoiseReducedReadM(unsigned char, signed char)+0xc2>
      oldADCL = l;
      oldADCH = h;
      _adcNoise = (_adcNoise >> 1) + (l ^ h) + (__TIME__[7] & 0xf); // Capture a little entropy.
    2946:	90 91 d9 02 	lds	r25, 0x02D9
    294a:	82 2f       	mov	r24, r18
    294c:	83 27       	eor	r24, r19
    294e:	87 5f       	subi	r24, 0xF7	; 247
    2950:	96 95       	lsr	r25
    2952:	98 0f       	add	r25, r24
    2954:	90 93 d9 02 	sts	0x02D9, r25
    2958:	92 2f       	mov	r25, r18
    295a:	43 2f       	mov	r20, r19
  bitSet(ADCSRA, ADIE); // Turn on ADC interrupt.
  bitSet(ADCSRA, ADSC); // Start conversion(s).
  uint8_t oldADCL = 0xff;
  uint8_t oldADCH = 0xff; // Ensure that a second sample will get taken if multiple samples have been requested.
  // Usually take several readings to improve accuracy.  Discard all but the last...
  while(--samples >= 0)
    295c:	11 50       	subi	r17, 0x01	; 1
    295e:	17 ff       	sbrs	r17, 7
    2960:	dc cf       	rjmp	.-72     	; 0x291a <_analogueNoiseReducedReadM(unsigned char, signed char)+0x7a>
      if((h == oldADCH) && (l == oldADCL)) { break; } // Stop now if result seems to have settled.
      oldADCL = l;
      oldADCH = h;
      _adcNoise = (_adcNoise >> 1) + (l ^ h) + (__TIME__[7] & 0xf); // Capture a little entropy.
      }
  bitClear(ADCSRA, ADIE); // Turn off ADC interrupt.
    2962:	80 91 7a 00 	lds	r24, 0x007A
    2966:	87 7f       	andi	r24, 0xF7	; 247
    2968:	80 93 7a 00 	sts	0x007A, r24
  bitClear(ADCSRA, ADATE); // Turn off ADC auto-trigger.
    296c:	80 91 7a 00 	lds	r24, 0x007A
    2970:	8f 7d       	andi	r24, 0xDF	; 223
    2972:	80 93 7a 00 	sts	0x007A, r24
  //sleep_disable();
  const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
    2976:	20 91 78 00 	lds	r18, 0x0078
  const uint8_t h = ADCH; // Capture the high byte.
    297a:	40 91 79 00 	lds	r20, 0x0079
  if(neededEnable) { powerDownADC(); }
    297e:	00 23       	and	r16, r16
    2980:	51 f0       	breq	.+20     	; 0x2996 <_analogueNoiseReducedReadM(unsigned char, signed char)+0xf6>
  }
    
// Power ADC down.
void powerDownADC()
  {
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
    2982:	80 91 7a 00 	lds	r24, 0x007A
    2986:	8f 77       	andi	r24, 0x7F	; 127
    2988:	80 93 7a 00 	sts	0x007A, r24
  PRR |= _BV(PRADC); // Disable the ADC.
    298c:	80 91 64 00 	lds	r24, 0x0064
    2990:	81 60       	ori	r24, 0x01	; 1
    2992:	80 93 64 00 	sts	0x0064, r24
    2996:	94 2f       	mov	r25, r20
    2998:	80 e0       	ldi	r24, 0x00	; 0
    299a:	30 e0       	ldi	r19, 0x00	; 0
    299c:	28 2b       	or	r18, r24
    299e:	39 2b       	or	r19, r25
  //sleep_disable();
  const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
  const uint8_t h = ADCH; // Capture the high byte.
  if(neededEnable) { powerDownADC(); }
  return((h << 8) | l);
  }
    29a0:	c9 01       	movw	r24, r18
    29a2:	1f 91       	pop	r17
    29a4:	0f 91       	pop	r16
    29a6:	08 95       	ret

000029a8 <analogueNoiseReducedRead(int, unsigned char)>:
//   * aiNumber is the analogue input number [0,7] for ATMega328P
//   * mode  is the analogue reference, eg DEFAULT (Vcc).
// May set sleep mode to SLEEP_MODE_ADC, and disable sleep on exit.
// Nominally equivalent to analogReference(mode); return(analogRead(pinNumber));
uint16_t analogueNoiseReducedRead(int aiNumber, uint8_t mode)
  { return(_analogueNoiseReducedReadM((mode << 6) | (aiNumber & 7))); }
    29a8:	62 95       	swap	r22
    29aa:	66 0f       	add	r22, r22
    29ac:	66 0f       	add	r22, r22
    29ae:	60 7c       	andi	r22, 0xC0	; 192
    29b0:	87 70       	andi	r24, 0x07	; 7
    29b2:	86 2b       	or	r24, r22
    29b4:	63 e0       	ldi	r22, 0x03	; 3
    29b6:	0e 94 50 14 	call	0x28a0	; 0x28a0 <_analogueNoiseReducedReadM(unsigned char, signed char)>
    29ba:	08 95       	ret

000029bc <SupplyVoltageMilliVolts::read()>:


// Force a read/poll of the supply voltage and return the value sensed.
// Expensive/slow.
// NOT thread-safe nor usable within ISRs (Interrupt Service Routines).
uint16_t SupplyVoltageMilliVolts::read()
    29bc:	cf 93       	push	r28
    29be:	df 93       	push	r29
    29c0:	ec 01       	movw	r28, r24
  return(result);
  }


// Measure internal bandgap (1.1V nominal, 1.0--1.2V) as fraction of Vcc [0,1023].
static uint16_t read1V1wrtBattery() { return(_analogueNoiseReducedReadM(_BV(REFS0) | 14)); }
    29c2:	8e e4       	ldi	r24, 0x4E	; 78
    29c4:	63 e0       	ldi	r22, 0x03	; 3
    29c6:	0e 94 50 14 	call	0x28a0	; 0x28a0 <_analogueNoiseReducedReadM(unsigned char, signed char)>
    29ca:	9c 01       	movw	r18, r24
  {
  // Measure internal bandgap (1.1V nominal, 1.0--1.2V) as fraction of Vcc.
  const uint16_t raw = read1V1wrtBattery();
  // If Vcc was 1.1V ADC would give 1023.
  // If Vcc was 2.2V ADC would give 511.
  const uint16_t result = ((1023U<<6) / raw) * (1100U>>6);
    29cc:	80 ec       	ldi	r24, 0xC0	; 192
    29ce:	9f ef       	ldi	r25, 0xFF	; 255
    29d0:	b9 01       	movw	r22, r18
    29d2:	0e 94 f9 3b 	call	0x77f2	; 0x77f2 <__udivmodhi4>
    29d6:	ab 01       	movw	r20, r22
    29d8:	e4 e0       	ldi	r30, 0x04	; 4
    29da:	44 0f       	add	r20, r20
    29dc:	55 1f       	adc	r21, r21
    29de:	ea 95       	dec	r30
    29e0:	e1 f7       	brne	.-8      	; 0x29da <SupplyVoltageMilliVolts::read()+0x1e>
    29e2:	46 0f       	add	r20, r22
    29e4:	57 1f       	adc	r21, r23
  rawInv = raw;
    29e6:	3b 83       	std	Y+3, r19	; 0x03
    29e8:	2a 83       	std	Y+2, r18	; 0x02
  mV = result;
    29ea:	5d 83       	std	Y+5, r21	; 0x05
    29ec:	4c 83       	std	Y+4, r20	; 0x04
  isLow = (result < BATTERY_LOW_MV);
    29ee:	1e 82       	std	Y+6, r1	; 0x06
    29f0:	88 e0       	ldi	r24, 0x08	; 8
    29f2:	47 39       	cpi	r20, 0x97	; 151
    29f4:	58 07       	cpc	r21, r24
    29f6:	10 f4       	brcc	.+4      	; 0x29fc <SupplyVoltageMilliVolts::read()+0x40>
    29f8:	81 e0       	ldi	r24, 0x01	; 1
    29fa:	8e 83       	std	Y+6, r24	; 0x06
  DEBUG_SERIAL_PRINT(raw);
  if(batteryLow) { DEBUG_SERIAL_PRINT_FLASHSTRING(" LOW"); }
  DEBUG_SERIAL_PRINTLN();
#endif
  return(result);
  }
    29fc:	ca 01       	movw	r24, r20
    29fe:	df 91       	pop	r29
    2a00:	cf 91       	pop	r28
    2a02:	08 95       	ret

00002a04 <noisyADCRead()>:
// If already powered up then do nothing other than return false.
// This does not power up the analogue comparator; this needs to be manually enabled if required.
// If this returns true then a matching powerDownADC() may be advisable.
bool powerUpADCIfDisabled()
  {
  if(!(PRR & _BV(PRADC))) { return(false); }
    2a04:	80 91 64 00 	lds	r24, 0x0064
    2a08:	80 fd       	sbrc	r24, 0
    2a0a:	02 c0       	rjmp	.+4      	; 0x2a10 <noisyADCRead()+0xc>
    2a0c:	40 e0       	ldi	r20, 0x00	; 0
    2a0e:	0b c0       	rjmp	.+22     	; 0x2a26 <noisyADCRead()+0x22>
  PRR &= ~_BV(PRADC); // Enable the ADC.
    2a10:	80 91 64 00 	lds	r24, 0x0064
    2a14:	8e 7f       	andi	r24, 0xFE	; 254
    2a16:	80 93 64 00 	sts	0x0064, r24
  ADCSRA |= _BV(ADEN);
    2a1a:	80 91 7a 00 	lds	r24, 0x007A
    2a1e:	80 68       	ori	r24, 0x80	; 128
    2a20:	80 93 7a 00 	sts	0x007A, r24
    2a24:	41 e0       	ldi	r20, 0x01	; 1
// If defined, update _adcNoise value to make noisyADCRead() output at least a poor PRNG if called in a loop, though might disguise underlying problems.
//#define CATCH_OTHER_NOISE_DURING_NAR // May hide underlying weakness if defined.
uint8_t noisyADCRead()
  {
  const bool neededEnable = powerUpADCIfDisabled();
  ADMUX = _BV(REFS0) | 14; // Bandgap vs Vcc.
    2a26:	8e e4       	ldi	r24, 0x4E	; 78
    2a28:	80 93 7c 00 	sts	0x007C, r24
  ADCSRB = 0; // Enable free-running mode.
    2a2c:	10 92 7b 00 	sts	0x007B, r1
  bitWrite(ADCSRA, ADATE, 1); // Multiple samples required.
    2a30:	80 91 7a 00 	lds	r24, 0x007A
    2a34:	80 62       	ori	r24, 0x20	; 32
    2a36:	80 93 7a 00 	sts	0x007A, r24
  ADC_complete = false;
    2a3a:	10 92 da 02 	sts	0x02DA, r1
  bitSet(ADCSRA, ADIE); // Turn on ADC interrupt.
    2a3e:	80 91 7a 00 	lds	r24, 0x007A
    2a42:	88 60       	ori	r24, 0x08	; 8
    2a44:	80 93 7a 00 	sts	0x007A, r24
  bitSet(ADCSRA, ADSC); // Start conversion.
    2a48:	80 91 7a 00 	lds	r24, 0x007A
    2a4c:	80 64       	ori	r24, 0x40	; 64
    2a4e:	80 93 7a 00 	sts	0x007A, r24
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	01 c0       	rjmp	.+2      	; 0x2a58 <noisyADCRead()+0x54>
  uint8_t count = 0;
  while(!ADC_complete) { ++count; } // Busy wait while 'timing' the ADC conversion.
    2a56:	9f 5f       	subi	r25, 0xFF	; 255
    2a58:	80 91 da 02 	lds	r24, 0x02DA
    2a5c:	88 23       	and	r24, r24
    2a5e:	d9 f3       	breq	.-10     	; 0x2a56 <noisyADCRead()+0x52>
  const uint8_t l1 = ADCL; // Capture the low byte and latch the high byte.
    2a60:	50 91 78 00 	lds	r21, 0x0078
  const uint8_t h1 = ADCH; // Capture the high byte.
    2a64:	20 91 79 00 	lds	r18, 0x0079
#if defined(CATCH_OTHER_NOISE_DURING_NAR)
  uint8_t result = _crc_ibutton_update(_adcNoise++, h1 ^ count);
#else
  uint8_t result = (h1 << 5) + count;
    2a68:	22 95       	swap	r18
    2a6a:	22 0f       	add	r18, r18
    2a6c:	20 7e       	andi	r18, 0xE0	; 224
    2a6e:	29 0f       	add	r18, r25
#endif
  set_sleep_mode(SLEEP_MODE_ADC); // Take further samples in more energy-efficient mode.
    2a70:	83 b7       	in	r24, 0x33	; 51
    2a72:	81 7f       	andi	r24, 0xF1	; 241
    2a74:	82 60       	ori	r24, 0x02	; 2
    2a76:	83 bf       	out	0x33, r24	; 51
    2a78:	30 e0       	ldi	r19, 0x00	; 0
  // Sample all possible ADC inputs relative to Vcc, whatever the inputs may be connected to.
  // Assumed never to do any harm, eg physical damage or to disturb I/O setup.
  for(uint8_t i = 0; i < 8; ++i)
    {
    ADMUX = (i & 7) | (DEFAULT << 6); // Switching MUX after sample has started, which may add further noise.
    2a7a:	83 2f       	mov	r24, r19
    2a7c:	87 70       	andi	r24, 0x07	; 7
    2a7e:	80 64       	ori	r24, 0x40	; 64
    2a80:	80 93 7c 00 	sts	0x007C, r24
    ADC_complete = false;
    2a84:	10 92 da 02 	sts	0x02DA, r1
    2a88:	07 c0       	rjmp	.+14     	; 0x2a98 <noisyADCRead()+0x94>
    while(!ADC_complete)
      {
#if defined(CATCH_OTHER_NOISE_DURING_NAR)       
      result -= 37; /* prime; may capture unrelated interrupt wakeups... */
#endif
      sleep_mode();
    2a8a:	83 b7       	in	r24, 0x33	; 51
    2a8c:	81 60       	ori	r24, 0x01	; 1
    2a8e:	83 bf       	out	0x33, r24	; 51
    2a90:	88 95       	sleep
    2a92:	83 b7       	in	r24, 0x33	; 51
    2a94:	8e 7f       	andi	r24, 0xFE	; 254
    2a96:	83 bf       	out	0x33, r24	; 51
  // Assumed never to do any harm, eg physical damage or to disturb I/O setup.
  for(uint8_t i = 0; i < 8; ++i)
    {
    ADMUX = (i & 7) | (DEFAULT << 6); // Switching MUX after sample has started, which may add further noise.
    ADC_complete = false;
    while(!ADC_complete)
    2a98:	80 91 da 02 	lds	r24, 0x02DA
    2a9c:	88 23       	and	r24, r24
    2a9e:	a9 f3       	breq	.-22     	; 0x2a8a <noisyADCRead()+0x86>
#if defined(CATCH_OTHER_NOISE_DURING_NAR)       
      result -= 37; /* prime; may capture unrelated interrupt wakeups... */
#endif
      sleep_mode();
      }
    const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
    2aa0:	90 91 78 00 	lds	r25, 0x0078
    const uint8_t h = ADCH; // Capture the high byte.
    2aa4:	80 91 79 00 	lds	r24, 0x0079
		"	brtc	2f" "\n\t"
		"	eor	%0, %2" "\n\t"
		"2:	dec	%1" "\n\t"
		"	brne	1b" "\n\t"
		: "=r" (__crc), "=d" (__i), "=d" (__pattern)
		: "0" (__crc), "r" (__data));
    2aa8:	89 27       	eor	r24, r25
    2aaa:	28 27       	eor	r18, r24
    2aac:	88 e0       	ldi	r24, 0x08	; 8
    2aae:	9c e8       	ldi	r25, 0x8C	; 140
    2ab0:	20 fb       	bst	r18, 0
    2ab2:	26 95       	lsr	r18
    2ab4:	0e f4       	brtc	.+2      	; 0x2ab8 <noisyADCRead()+0xb4>
    2ab6:	29 27       	eor	r18, r25
    2ab8:	8a 95       	dec	r24
    2aba:	d1 f7       	brne	.-12     	; 0x2ab0 <noisyADCRead()+0xac>
  uint8_t result = (h1 << 5) + count;
#endif
  set_sleep_mode(SLEEP_MODE_ADC); // Take further samples in more energy-efficient mode.
  // Sample all possible ADC inputs relative to Vcc, whatever the inputs may be connected to.
  // Assumed never to do any harm, eg physical damage or to disturb I/O setup.
  for(uint8_t i = 0; i < 8; ++i)
    2abc:	3f 5f       	subi	r19, 0xFF	; 255
    2abe:	38 30       	cpi	r19, 0x08	; 8
    2ac0:	e1 f6       	brne	.-72     	; 0x2a7a <noisyADCRead()+0x76>
      }
    const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
    const uint8_t h = ADCH; // Capture the high byte.
    result = _crc_ibutton_update(result, l ^ h); // A thorough hash.
    }
  bitClear(ADCSRA, ADIE); // Turn off ADC interrupt.
    2ac2:	80 91 7a 00 	lds	r24, 0x007A
    2ac6:	87 7f       	andi	r24, 0xF7	; 247
    2ac8:	80 93 7a 00 	sts	0x007A, r24
  bitClear(ADCSRA, ADATE); // Turn off ADC auto-trigger.
    2acc:	80 91 7a 00 	lds	r24, 0x007A
    2ad0:	8f 7d       	andi	r24, 0xDF	; 223
    2ad2:	80 93 7a 00 	sts	0x007A, r24
  if(neededEnable) { powerDownADC(); }
    2ad6:	44 23       	and	r20, r20
    2ad8:	51 f0       	breq	.+20     	; 0x2aee <noisyADCRead()+0xea>
  }
    
// Power ADC down.
void powerDownADC()
  {
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
    2ada:	80 91 7a 00 	lds	r24, 0x007A
    2ade:	8f 77       	andi	r24, 0x7F	; 127
    2ae0:	80 93 7a 00 	sts	0x007A, r24
  PRR |= _BV(PRADC); // Disable the ADC.
    2ae4:	80 91 64 00 	lds	r24, 0x0064
    2ae8:	81 60       	ori	r24, 0x01	; 1
    2aea:	80 93 64 00 	sts	0x0064, r24
  bitClear(ADCSRA, ADIE); // Turn off ADC interrupt.
  bitClear(ADCSRA, ADATE); // Turn off ADC auto-trigger.
  if(neededEnable) { powerDownADC(); }
  result ^= l1; // Ensure that the actual Vcc raw lsbs do get folded in to the final result.
  return(result); // Use all the bits collected.
  }
    2aee:	82 2f       	mov	r24, r18
    2af0:	85 27       	eor	r24, r21
    2af2:	08 95       	ret

00002af4 <readInternalTemperatureC16()>:
// May set sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
int readInternalTemperatureC16()
  {
  // Measure internal temperature sensor against internal voltage source.
  // Response is ~1mv/C with 0C at ~289mV according to the data sheet.
  const uint16_t raw = _analogueNoiseReducedReadM(_BV(REFS1) | _BV(REFS0) | _BV(MUX3), 1);
    2af4:	88 ec       	ldi	r24, 0xC8	; 200
    2af6:	61 e0       	ldi	r22, 0x01	; 1
    2af8:	0e 94 50 14 	call	0x28a0	; 0x28a0 <_analogueNoiseReducedReadM(unsigned char, signed char)>
    2afc:	84 54       	subi	r24, 0x44	; 68
    2afe:	91 40       	sbci	r25, 0x01	; 1
    2b00:	22 ed       	ldi	r18, 0xD2	; 210
    2b02:	30 e0       	ldi	r19, 0x00	; 0
    2b04:	a9 01       	movw	r20, r18
    2b06:	84 9f       	mul	r24, r20
    2b08:	90 01       	movw	r18, r0
    2b0a:	85 9f       	mul	r24, r21
    2b0c:	30 0d       	add	r19, r0
    2b0e:	94 9f       	mul	r25, r20
    2b10:	30 0d       	add	r19, r0
    2b12:	11 24       	eor	r1, r1
    2b14:	f4 e0       	ldi	r31, 0x04	; 4
    2b16:	35 95       	asr	r19
    2b18:	27 95       	ror	r18
    2b1a:	fa 95       	dec	r31
    2b1c:	e1 f7       	brne	.-8      	; 0x2b16 <readInternalTemperatureC16()+0x22>
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("");
#endif
  //const int degC = (raw - 328) ; // Crude fast adjustment for one sensor at ~20C (DHD20130429).
  const int degC = ((((int)raw) - 324) * 210) >> 4; // Slightly less crude adjustment, see http://playground.arduino.cc//Main/InternalTemperatureSensor
  return(degC);
  }
    2b1e:	c9 01       	movw	r24, r18
    2b20:	08 95       	ret

00002b22 <powerDownTWI()>:
  }

// Power down TWI (I2C).
void powerDownTWI()
  {
  TWCR &= ~_BV(TWEN); // Disable TWI.
    2b22:	ec eb       	ldi	r30, 0xBC	; 188
    2b24:	f0 e0       	ldi	r31, 0x00	; 0
    2b26:	80 81       	ld	r24, Z
    2b28:	8b 7f       	andi	r24, 0xFB	; 251
    2b2a:	80 83       	st	Z, r24
  PRR |= _BV(PRTWI); // Disable TWI power.
    2b2c:	e4 e6       	ldi	r30, 0x64	; 100
    2b2e:	f0 e0       	ldi	r31, 0x00	; 0
    2b30:	80 81       	ld	r24, Z
    2b32:	80 68       	ori	r24, 0x80	; 128
    2b34:	80 83       	st	Z, r24
  //digitalWrite(SCL, 0);

  // Convert to hi-Z inputs.
  //pinMode(SDA, INPUT);
  //pinMode(SCL, INPUT);
  }
    2b36:	08 95       	ret

00002b38 <clockJitterWDT()>:
// Expensive in terms of CPU time and thus energy.
// TODO: may be able to reduce clock speed to lower energy cost while still detecting useful jitter.
uint_fast8_t clockJitterWDT()
  {
  // Watchdog should be (already) be disabled on entry.
  _watchdogFired = false;
    2b38:	10 92 d8 02 	sts	0x02D8, r1
  wdt_enable(WDTO_15MS); // Set watchdog for minimum time.
    2b3c:	88 e0       	ldi	r24, 0x08	; 8
    2b3e:	28 e1       	ldi	r18, 0x18	; 24
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	0f b6       	in	r0, 0x3f	; 63
    2b44:	f8 94       	cli
    2b46:	a8 95       	wdr
    2b48:	20 93 60 00 	sts	0x0060, r18
    2b4c:	0f be       	out	0x3f, r0	; 63
    2b4e:	80 93 60 00 	sts	0x0060, r24
  WDTCSR |= (1 << WDIE);
    2b52:	80 91 60 00 	lds	r24, 0x0060
    2b56:	80 64       	ori	r24, 0x40	; 64
    2b58:	80 93 60 00 	sts	0x0060, r24
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	01 c0       	rjmp	.+2      	; 0x2b62 <clockJitterWDT()+0x2a>
  uint_fast8_t count = 0;
  while(!_watchdogFired) { ++count; } // Effectively count CPU cycles until WDT fires.
    2b60:	9f 5f       	subi	r25, 0xFF	; 255
    2b62:	80 91 d8 02 	lds	r24, 0x02D8
    2b66:	88 23       	and	r24, r24
    2b68:	d9 f3       	breq	.-10     	; 0x2b60 <clockJitterWDT()+0x28>
  return(count);
  }
    2b6a:	89 2f       	mov	r24, r25
    2b6c:	08 95       	ret

00002b6e <clockJitterRTC()>:
// Expensive in terms of CPU time and thus energy.
// TODO: may be able to reduce clock speed at little to lower energy cost while still detecting useful jitter
//   (but not below 131072kHz since CPU clock must be >= 4x RTC clock to stay on data-sheet and access TCNT2).
uint_fast8_t clockJitterRTC()
  {
  const uint8_t t0 = TCNT2;
    2b6e:	90 91 b2 00 	lds	r25, 0x00B2
  while(t0 == TCNT2) { }
    2b72:	80 91 b2 00 	lds	r24, 0x00B2
    2b76:	98 17       	cp	r25, r24
    2b78:	e1 f3       	breq	.-8      	; 0x2b72 <clockJitterRTC()+0x4>
  uint_fast8_t count = 0;
  const uint8_t t1 = TCNT2;
    2b7a:	20 91 b2 00 	lds	r18, 0x00B2
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	01 c0       	rjmp	.+2      	; 0x2b84 <clockJitterRTC()+0x16>
  while(t1 == TCNT2) { ++count; } // Effectively count CPU cycles in one RTC sub-cycle tick.
    2b82:	9f 5f       	subi	r25, 0xFF	; 255
    2b84:	80 91 b2 00 	lds	r24, 0x00B2
    2b88:	28 17       	cp	r18, r24
    2b8a:	d9 f3       	breq	.-10     	; 0x2b82 <clockJitterRTC()+0x14>
  return(count);
  }
    2b8c:	89 2f       	mov	r24, r25
    2b8e:	08 95       	ret

00002b90 <clockJitterEntropyByte()>:
// Expensive in terms of CPU time and thus energy, though possibly more efficient than basic clockJitterXXX() routines.
// Internally this uses a CRC as a relatively fast and hopefully effective hash over intermediate values.
// Note the that rejection of repeat values will be less effective with two interleaved gathering mechanisms
// as the interaction while not necessarily adding genuine entropy, will make counts differ between runs.
// DHD20130519: measured as taking ~63ms to run, ie ~8ms per bit gathered.
uint_fast8_t clockJitterEntropyByte()
    2b90:	1f 93       	push	r17

  uint_fast8_t result = 0;
  uint_fast8_t countR = 0, lastCountR = 0;
  uint_fast8_t countW = 0, lastCountW = 0;

  const uint8_t t0 = TCNT2; // Wait for sub-cycle timer to roll.
    2b92:	90 91 b2 00 	lds	r25, 0x00B2
    2b96:	40 e0       	ldi	r20, 0x00	; 0
    2b98:	50 e0       	ldi	r21, 0x00	; 0
    2b9a:	02 c0       	rjmp	.+4      	; 0x2ba0 <clockJitterEntropyByte()+0x10>
  while(t0 == TCNT2) { ++hash; } // Possibly capture some entropy from recent program activity/timing.
    2b9c:	4f 5f       	subi	r20, 0xFF	; 255
    2b9e:	5f 4f       	sbci	r21, 0xFF	; 255
    2ba0:	80 91 b2 00 	lds	r24, 0x00B2
    2ba4:	98 17       	cp	r25, r24
    2ba6:	d1 f3       	breq	.-12     	; 0x2b9c <clockJitterEntropyByte()+0xc>
  uint8_t t1 = TCNT2;
    2ba8:	f0 91 b2 00 	lds	r31, 0x00B2

  _watchdogFired = 0;
    2bac:	10 92 d8 02 	sts	0x02D8, r1
  wdt_enable(WDTO_15MS); // Start watchdog, with minimum timeout.
    2bb0:	88 e0       	ldi	r24, 0x08	; 8
    2bb2:	28 e1       	ldi	r18, 0x18	; 24
    2bb4:	30 e0       	ldi	r19, 0x00	; 0
    2bb6:	0f b6       	in	r0, 0x3f	; 63
    2bb8:	f8 94       	cli
    2bba:	a8 95       	wdr
    2bbc:	20 93 60 00 	sts	0x0060, r18
    2bc0:	0f be       	out	0x3f, r0	; 63
    2bc2:	80 93 60 00 	sts	0x0060, r24
  WDTCSR |= (1 << WDIE);
    2bc6:	80 91 60 00 	lds	r24, 0x0060
    2bca:	80 64       	ori	r24, 0x40	; 64
    2bcc:	80 93 60 00 	sts	0x0060, r24
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	60 e0       	ldi	r22, 0x00	; 0
    2bd4:	e0 e0       	ldi	r30, 0x00	; 0
    2bd6:	20 e0       	ldi	r18, 0x00	; 0
    2bd8:	70 e0       	ldi	r23, 0x00	; 0
    2bda:	38 e0       	ldi	r19, 0x08	; 8
        if(--bitsLeft <= 0) { break; } // Got enough bits; stop now.
        lastCountW = countW;
        }
      countW = 0;
      _watchdogFired = 0;
      wdt_enable(WDTO_15MS); // Restart watchdog, with minimum timeout.
    2bdc:	a8 e1       	ldi	r26, 0x18	; 24
    2bde:	b0 e0       	ldi	r27, 0x00	; 0
    2be0:	18 e0       	ldi	r17, 0x08	; 8
  WDTCSR |= (1 << WDIE);
  int_fast8_t bitsLeft = 8; // Decrement when a bit is harvested...
  for( ; ; )
    {
    // Extract watchdog jitter vs CPU.
    if(!_watchdogFired) { ++countW; }
    2be2:	80 91 d8 02 	lds	r24, 0x02D8
    2be6:	88 23       	and	r24, r24
    2be8:	11 f4       	brne	.+4      	; 0x2bee <clockJitterEntropyByte()+0x5e>
    2bea:	2f 5f       	subi	r18, 0xFF	; 255
    2bec:	2a c0       	rjmp	.+84     	; 0x2c42 <clockJitterEntropyByte()+0xb2>
    else // Watchdog fired.
      {
      if(countW != lastCountW) // Got a different value from last; assume one bit of entropy.
    2bee:	27 17       	cp	r18, r23
    2bf0:	c1 f0       	breq	.+48     	; 0x2c22 <clockJitterEntropyByte()+0x92>
        "eor    %A0,__tmp_reg__"

        : "=d" (__ret)
        : "r" (__data), "0" (__crc)
        : "r0"
    );
    2bf2:	42 27       	eor	r20, r18
    2bf4:	04 2e       	mov	r0, r20
    2bf6:	42 95       	swap	r20
    2bf8:	40 7f       	andi	r20, 0xF0	; 240
    2bfa:	40 25       	eor	r20, r0
    2bfc:	05 2e       	mov	r0, r21
    2bfe:	54 2f       	mov	r21, r20
    2c00:	42 95       	swap	r20
    2c02:	4f 70       	andi	r20, 0x0F	; 15
    2c04:	04 26       	eor	r0, r20
    2c06:	46 95       	lsr	r20
    2c08:	54 27       	eor	r21, r20
    2c0a:	45 27       	eor	r20, r21
    2c0c:	44 0f       	add	r20, r20
    2c0e:	44 0f       	add	r20, r20
    2c10:	44 0f       	add	r20, r20
    2c12:	40 25       	eor	r20, r0
        {
        hash = _crc_ccitt_update(hash, countW);
        result = (result << 1) ^ ((uint_fast8_t)hash); // Nominally capturing (at least) lsb of hash.
    2c14:	99 0f       	add	r25, r25
    2c16:	94 27       	eor	r25, r20
        if(--bitsLeft <= 0) { break; } // Got enough bits; stop now.
    2c18:	31 50       	subi	r19, 0x01	; 1
    2c1a:	13 16       	cp	r1, r19
    2c1c:	0c f0       	brlt	.+2      	; 0x2c20 <clockJitterEntropyByte()+0x90>
    2c1e:	34 c0       	rjmp	.+104    	; 0x2c88 <clockJitterEntropyByte()+0xf8>
    2c20:	72 2f       	mov	r23, r18
        lastCountW = countW;
        }
      countW = 0;
      _watchdogFired = 0;
    2c22:	10 92 d8 02 	sts	0x02D8, r1
      wdt_enable(WDTO_15MS); // Restart watchdog, with minimum timeout.
    2c26:	0f b6       	in	r0, 0x3f	; 63
    2c28:	f8 94       	cli
    2c2a:	a8 95       	wdr
    2c2c:	a0 93 60 00 	sts	0x0060, r26
    2c30:	0f be       	out	0x3f, r0	; 63
    2c32:	10 93 60 00 	sts	0x0060, r17
      WDTCSR |= (1 << WDIE);
    2c36:	80 91 60 00 	lds	r24, 0x0060
    2c3a:	80 64       	ori	r24, 0x40	; 64
    2c3c:	80 93 60 00 	sts	0x0060, r24
    2c40:	20 e0       	ldi	r18, 0x00	; 0
      }

    // Extract RTC jitter vs CPU.
    if(t1 == TCNT2) { --countR; }
    2c42:	80 91 b2 00 	lds	r24, 0x00B2
    2c46:	f8 17       	cp	r31, r24
    2c48:	11 f4       	brne	.+4      	; 0x2c4e <clockJitterEntropyByte()+0xbe>
    2c4a:	61 50       	subi	r22, 0x01	; 1
    2c4c:	ca cf       	rjmp	.-108    	; 0x2be2 <clockJitterEntropyByte()+0x52>
    else // Sub-cycle timer rolled.
      {
      if(countR != lastCountR) // Got a different value from last; assume one bit of entropy.
    2c4e:	6e 17       	cp	r22, r30
    2c50:	b9 f0       	breq	.+46     	; 0x2c80 <clockJitterEntropyByte()+0xf0>
    2c52:	46 27       	eor	r20, r22
    2c54:	04 2e       	mov	r0, r20
    2c56:	42 95       	swap	r20
    2c58:	40 7f       	andi	r20, 0xF0	; 240
    2c5a:	40 25       	eor	r20, r0
    2c5c:	05 2e       	mov	r0, r21
    2c5e:	54 2f       	mov	r21, r20
    2c60:	42 95       	swap	r20
    2c62:	4f 70       	andi	r20, 0x0F	; 15
    2c64:	04 26       	eor	r0, r20
    2c66:	46 95       	lsr	r20
    2c68:	54 27       	eor	r21, r20
    2c6a:	45 27       	eor	r20, r21
    2c6c:	44 0f       	add	r20, r20
    2c6e:	44 0f       	add	r20, r20
    2c70:	44 0f       	add	r20, r20
    2c72:	40 25       	eor	r20, r0
        {
        hash = _crc_ccitt_update(hash, countR);
        result = (result << 1) ^ ((uint_fast8_t)hash); // Nominally capturing (at least) lsb of hash.
    2c74:	99 0f       	add	r25, r25
    2c76:	94 27       	eor	r25, r20
        if(--bitsLeft <= 0) { break; } // Got enough bits; stop now.
    2c78:	31 50       	subi	r19, 0x01	; 1
    2c7a:	13 16       	cp	r1, r19
    2c7c:	2c f4       	brge	.+10     	; 0x2c88 <clockJitterEntropyByte()+0xf8>
    2c7e:	e6 2f       	mov	r30, r22
        lastCountR = countR;
        }
      countR = 0;
      t1 = TCNT2; // Set to look for next roll.
    2c80:	f0 91 b2 00 	lds	r31, 0x00B2
    2c84:	60 e0       	ldi	r22, 0x00	; 0
    2c86:	ad cf       	rjmp	.-166    	; 0x2be2 <clockJitterEntropyByte()+0x52>
      }
    }

  wdt_disable(); // Ensure no spurious WDT wakeup pending.
    2c88:	88 e1       	ldi	r24, 0x18	; 24
    2c8a:	0f b6       	in	r0, 0x3f	; 63
    2c8c:	f8 94       	cli
    2c8e:	80 93 60 00 	sts	0x0060, r24
    2c92:	10 92 60 00 	sts	0x0060, r1
    2c96:	0f be       	out	0x3f, r0	; 63
  return(result);
  }
    2c98:	89 2f       	mov	r24, r25
    2c9a:	1f 91       	pop	r17
    2c9c:	08 95       	ret

00002c9e <Sensor<unsigned int>::isValid(unsigned int) const>:
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual T get() const = 0;

    // Returns true if this sensor reading value passed is potentially valid, eg in-range.
    // Default is to always return true, ie all values potentially valid.
    virtual bool isValid(T value) const { return(true); }
    2c9e:	81 e0       	ldi	r24, 0x01	; 1
    2ca0:	08 95       	ret

00002ca2 <Sensor<unsigned int>::preferredPollInterval_s() const>:
 
    // Returns non-zero if this implementation requires a regular call to read() to operate correctly.
    // Preferred poll interval (in seconds) or 0 if no regular poll() call required.
    // Default returns 0 indicating regular call to read() not required,
    // only as required to fetch new values from the underlying sensor.
    virtual uint8_t preferredPollInterval_s() const { return(0); }
    2ca2:	80 e0       	ldi	r24, 0x00	; 0
    2ca4:	08 95       	ret

00002ca6 <Sensor<unsigned int>::handleInterruptSimple()>:
    // Must be fast and ISR (Interrupt Service Routine) safe.
    // Returns true if interrupt was successfully handled and cleared
    // else another interrupt handler in the chain may be called
    // to attempt to clear the interrupt.
    // By default does nothing (and returns false).
    virtual bool handleInterruptSimple() { return(false); }
    2ca6:	80 e0       	ldi	r24, 0x00	; 0
    2ca8:	08 95       	ret

00002caa <Sensor<unsigned int>::begin()>:

    // Begin access to this sensor if applicable and not already begun.
    // Returns true if it needed to be begun.
    // Allows logic to end() if required at the end of a block, etc.
    // Defaults to do nothing (and return false).
    virtual bool begin() { return(false); }
    2caa:	80 e0       	ldi	r24, 0x00	; 0
    2cac:	08 95       	ret

00002cae <Sensor<unsigned int>::isAvailable() const>:

    // Returns true if this sensor is currently available.
    // True by default unless implementation overrides.
    // For those sensors that need starting this will be false before begin().
    virtual bool isAvailable() const { return(true); }
    2cae:	81 e0       	ldi	r24, 0x01	; 1
    2cb0:	08 95       	ret

00002cb2 <Sensor<unsigned int>::end()>:

    // End access to this sensor if applicable and not already ended.
    // Returns true if it needed to be ended.
    // Defaults to do nothing (and return false).
    virtual bool end() { return(false); }
    2cb2:	80 e0       	ldi	r24, 0x00	; 0
    2cb4:	08 95       	ret

00002cb6 <global constructors keyed to _Z25minimisePowerWithoutSleepv>:
    // True if last-measured voltage was low.
    bool isLow;
 
  public:
    // Initialise to cautious values.
    SupplyVoltageMilliVolts() : mV(0), isLow(true) { }
    2cb6:	89 e8       	ldi	r24, 0x89	; 137
    2cb8:	91 e0       	ldi	r25, 0x01	; 1
    2cba:	90 93 d2 02 	sts	0x02D2, r25
    2cbe:	80 93 d1 02 	sts	0x02D1, r24
    2cc2:	10 92 d6 02 	sts	0x02D6, r1
    2cc6:	10 92 d5 02 	sts	0x02D5, r1
    2cca:	81 e0       	ldi	r24, 0x01	; 1
    2ccc:	80 93 d7 02 	sts	0x02D7, r24
    2cd0:	08 95       	ret

00002cd2 <captureEntropy1()>:
// Capture a little system entropy.
// This call should typically take << 1ms at 1MHz CPU.
// Does not change CPU clock speeds, mess with interrupts (other than possible brief blocking), or do I/O, or sleep.
// Should inject some noise into secure (TBD) and non-secure (RNG8) PRNGs.
void captureEntropy1()
  { seedRNG8(getSubCycleTime() ^ _adcNoise, cycleCountCPU() ^ Supply_mV.get(), _watchdogFired); }
    2cd2:	20 91 b2 00 	lds	r18, 0x00B2
    2cd6:	80 91 d9 02 	lds	r24, 0x02D9
    2cda:	66 b5       	in	r22, 0x26	; 38
    2cdc:	40 91 d8 02 	lds	r20, 0x02D8
    2ce0:	90 91 d5 02 	lds	r25, 0x02D5
    2ce4:	69 27       	eor	r22, r25
    2ce6:	82 27       	eor	r24, r18
    2ce8:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <seedRNG8(unsigned char, unsigned char, unsigned char)>
    2cec:	08 95       	ret

00002cee <powerDownSPI()>:
  }

// Power down SPI.
void powerDownSPI()
  {
  SPCR &= ~_BV(SPE); // Disable SPI.
    2cee:	8c b5       	in	r24, 0x2c	; 44
    2cf0:	8f 7b       	andi	r24, 0xBF	; 191
    2cf2:	8c bd       	out	0x2c, r24	; 44
  PRR |= _BV(PRSPI); // Power down...
    2cf4:	e4 e6       	ldi	r30, 0x64	; 100
    2cf6:	f0 e0       	ldi	r31, 0x00	; 0
    2cf8:	80 81       	ld	r24, Z
    2cfa:	84 60       	ori	r24, 0x04	; 4
    2cfc:	80 83       	st	Z, r24

  pinMode(PIN_SPI_nSS, OUTPUT); // Ensure that nSS is an output to avoid forcing SPI to slave mode by accident.
    2cfe:	8a e0       	ldi	r24, 0x0A	; 10
    2d00:	61 e0       	ldi	r22, 0x01	; 1
    2d02:	0e 94 b2 36 	call	0x6d64	; 0x6d64 <pinMode>
  fastDigitalWrite(PIN_SPI_nSS, HIGH); // Ensure that nSS is HIGH and thus any slave deselected when powering up SPI.
    2d06:	2a 9a       	sbi	0x05, 2	; 5

  // Avoid pins from floating when SPI is disabled.
  // Try to preserve general I/O direction and restore previous output values for outputs.
  pinMode(PIN_SPI_SCK, OUTPUT);
    2d08:	8d e0       	ldi	r24, 0x0D	; 13
    2d0a:	61 e0       	ldi	r22, 0x01	; 1
    2d0c:	0e 94 b2 36 	call	0x6d64	; 0x6d64 <pinMode>
  pinMode(PIN_SPI_MOSI, OUTPUT);
    2d10:	8b e0       	ldi	r24, 0x0B	; 11
    2d12:	61 e0       	ldi	r22, 0x01	; 1
    2d14:	0e 94 b2 36 	call	0x6d64	; 0x6d64 <pinMode>
  pinMode(PIN_SPI_MISO, INPUT_PULLUP);
    2d18:	8c e0       	ldi	r24, 0x0C	; 12
    2d1a:	62 e0       	ldi	r22, 0x02	; 2
    2d1c:	0e 94 b2 36 	call	0x6d64	; 0x6d64 <pinMode>

  // If sharing SPI SCK with LED indicator then return this pin to being an output (retaining previous value).
  //if(LED_HEATCALL == PIN_SPI_SCK) { pinMode(LED_HEATCALL, OUTPUT); }
  }
    2d20:	08 95       	ret

00002d22 <powerUpSPIIfDisabled()>:
// If SPI was disabled, power it up, enable it as master and with a sensible clock speed, etc, and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownSPI() may be advisable.
bool powerUpSPIIfDisabled()
  {
  if(!(PRR & _BV(PRSPI))) { return(false); }
    2d22:	80 91 64 00 	lds	r24, 0x0064
    2d26:	82 fd       	sbrc	r24, 2
    2d28:	02 c0       	rjmp	.+4      	; 0x2d2e <powerUpSPIIfDisabled()+0xc>
    2d2a:	80 e0       	ldi	r24, 0x00	; 0
    2d2c:	08 95       	ret

  pinMode(PIN_SPI_nSS, OUTPUT); // Ensure that nSS is an output to avoid forcing SPI to slave mode by accident.
    2d2e:	8a e0       	ldi	r24, 0x0A	; 10
    2d30:	61 e0       	ldi	r22, 0x01	; 1
    2d32:	0e 94 b2 36 	call	0x6d64	; 0x6d64 <pinMode>
  fastDigitalWrite(PIN_SPI_nSS, HIGH); // Ensure that nSS is HIGH and thus any slave deselected when powering up SPI.
    2d36:	2a 9a       	sbi	0x05, 2	; 5

  PRR &= ~_BV(PRSPI); // Enable SPI power.
    2d38:	80 91 64 00 	lds	r24, 0x0064
    2d3c:	8b 7f       	andi	r24, 0xFB	; 251
    2d3e:	80 93 64 00 	sts	0x0064, r24
  // Configure raw SPI to match better how it was used in PICAXE V0.09 code.
  // CPOL = 0, CPHA = 0
  // Enable SPI, set master mode, set speed.
  const uint8_t ENABLE_MASTER =  _BV(SPE) | _BV(MSTR);
#if F_CPU <= 2000000 // Needs minimum prescale (x2) with slow (<=2MHz) CPU clock.
  SPCR = ENABLE_MASTER; // 2x clock prescale for <=1MHz SPI clock from <=2MHz CPU clock (500kHz SPI @ 1MHz CPU).
    2d42:	80 e5       	ldi	r24, 0x50	; 80
    2d44:	8c bd       	out	0x2c, r24	; 44
  SPSR = _BV(SPI2X);
    2d46:	81 e0       	ldi	r24, 0x01	; 1
    2d48:	8d bd       	out	0x2d, r24	; 45
#else // Needs setting for fast (~16MHz) CPU clock.
  SPCR = _BV(SPR0) | ENABLE_MASTER; // 8x clock prescale for ~2MHz SPI clock from nominal ~16MHz CPU clock.
  SPSR = _BV(SPI2X);
#endif
  return(true);
  }
    2d4a:	08 95       	ret

00002d4c <power_intermittent_peripherals_disable()>:
// Disable/remove power to intermittent peripherals.
// Switches the digital line to input with no pull-up (ie high-Z).
// There should be some sort of load to stop this floating.
void power_intermittent_peripherals_disable()
  {
  pinMode(IO_POWER_UP, INPUT);
    2d4c:	87 e0       	ldi	r24, 0x07	; 7
    2d4e:	60 e0       	ldi	r22, 0x00	; 0
    2d50:	0e 94 b2 36 	call	0x6d64	; 0x6d64 <pinMode>
  }
    2d54:	08 95       	ret

00002d56 <minimisePowerWithoutSleep()>:
// to ensure that nothing power-hungry is accidentally left on.
// Any module that may need to run all the time should not be turned off here.
// May be called from panic(), so do not be too clever.
// Does NOT attempt to power down the radio, eg in case that needs to be left in RX mode.
// Does NOT attempt to power down the UART/serial.
void minimisePowerWithoutSleep()
    2d56:	0f 93       	push	r16
    2d58:	1f 93       	push	r17
  {
  // Disable the watchdog timer.
  wdt_disable();
    2d5a:	88 e1       	ldi	r24, 0x18	; 24
    2d5c:	0f b6       	in	r0, 0x3f	; 63
    2d5e:	f8 94       	cli
    2d60:	80 93 60 00 	sts	0x0060, r24
    2d64:	10 92 60 00 	sts	0x0060, r1
    2d68:	0f be       	out	0x3f, r0	; 63
  
  // Ensure that external peripherals are powered down.
  power_intermittent_peripherals_disable();
    2d6a:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <power_intermittent_peripherals_disable()>

  // Turn off analogue stuff that eats power.
  ADCSRA = 0; // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
    2d6e:	10 92 7a 00 	sts	0x007A, r1
  ACSR = (1<<ACD); // Disable the analog comparator.
    2d72:	80 e8       	ldi	r24, 0x80	; 128
    2d74:	80 bf       	out	0x30, r24	; 48
  DIDR0 = 0x3F; // Disable digital input buffers on all ADC0-ADC5 pins.
    2d76:	8f e3       	ldi	r24, 0x3F	; 63
    2d78:	80 93 7e 00 	sts	0x007E, r24
    //#endif
    //#if defined(LDR_SENSOR_AIN)
    //    | (1 << LDR_SENSOR_AIN)
    //#endif
    //    ;
  DIDR1 = (1<<AIN1D)|(1<<AIN0D); // Disable digital input buffer on AIN1/0.
    2d7c:	83 e0       	ldi	r24, 0x03	; 3
    2d7e:	80 93 7f 00 	sts	0x007F, r24
  power_adc_disable();
    2d82:	04 e6       	ldi	r16, 0x64	; 100
    2d84:	10 e0       	ldi	r17, 0x00	; 0
    2d86:	f8 01       	movw	r30, r16
    2d88:	80 81       	ld	r24, Z
    2d8a:	81 60       	ori	r24, 0x01	; 1
    2d8c:	80 83       	st	Z, r24

  // Ensure that SPI is powered down.
  powerDownSPI();
    2d8e:	0e 94 77 16 	call	0x2cee	; 0x2cee <powerDownSPI()>
  }

// Power down TWI (I2C).
void powerDownTWI()
  {
  TWCR &= ~_BV(TWEN); // Disable TWI.
    2d92:	ec eb       	ldi	r30, 0xBC	; 188
    2d94:	f0 e0       	ldi	r31, 0x00	; 0
    2d96:	80 81       	ld	r24, Z
    2d98:	8b 7f       	andi	r24, 0xFB	; 251
    2d9a:	80 83       	st	Z, r24
  PRR |= _BV(PRTWI); // Disable TWI power.
    2d9c:	f8 01       	movw	r30, r16
    2d9e:	80 81       	ld	r24, Z
    2da0:	80 68       	ori	r24, 0x80	; 128
    2da2:	80 83       	st	Z, r24

#if defined(DONT_USE_TIMER0)
  power_timer0_disable();
#endif

  power_timer1_disable();
    2da4:	80 81       	ld	r24, Z
    2da6:	88 60       	ori	r24, 0x08	; 8
    2da8:	80 83       	st	Z, r24

#ifndef WAKEUP_32768HZ_XTAL
  power_timer2_disable();
#endif
  }
    2daa:	1f 91       	pop	r17
    2dac:	0f 91       	pop	r16
    2dae:	08 95       	ret

00002db0 <power_intermittent_peripherals_enable(bool)>:
// items powered direct from IO_POWER_UP may need no such wait.
//
// Switches the digital line to high then output (to avoid ever *discharging* the output cap).
// Note that with 100nF cap, and 330R (or lower) resistor from the output pin,
// then 1ms delay should be plenty for the voltage on the cap to settle.
void power_intermittent_peripherals_enable(bool waitUntilStable)
    2db0:	1f 93       	push	r17
    2db2:	18 2f       	mov	r17, r24
  {
  fastDigitalWrite(IO_POWER_UP, HIGH);
    2db4:	5f 9a       	sbi	0x0b, 7	; 11
  pinMode(IO_POWER_UP, OUTPUT);
    2db6:	87 e0       	ldi	r24, 0x07	; 7
    2db8:	61 e0       	ldi	r22, 0x01	; 1
    2dba:	0e 94 b2 36 	call	0x6d64	; 0x6d64 <pinMode>
  // If requested, wait long enough that I/O peripheral power should be stable.
  // Wait in a relatively low-power way...
  if(waitUntilStable) { sleepLowPowerMs(1); }
    2dbe:	11 23       	and	r17, r17
    2dc0:	21 f0       	breq	.+8      	; 0x2dca <power_intermittent_peripherals_enable(bool)+0x1a>
// This may be achieved in part by dynamically slowing the CPU clock if possible.
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed((((MIN_CPU_HZ * (ms)) + 2000) / 4000) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    2dc2:	86 e0       	ldi	r24, 0x06	; 6
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	0e 94 bf 13 	call	0x277e	; 0x277e <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
  }
    2dca:	1f 91       	pop	r17
    2dcc:	08 95       	ret

00002dce <powerUpTWIIfDisabled()>:
// If TWI (I2C) was disabled, power it up, do Wire.begin(), and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownRWI() may be advisable.
bool powerUpTWIIfDisabled()
  {
  if(!(PRR & _BV(PRTWI))) { return(false); }
    2dce:	80 91 64 00 	lds	r24, 0x0064
    2dd2:	87 fd       	sbrc	r24, 7
    2dd4:	02 c0       	rjmp	.+4      	; 0x2dda <powerUpTWIIfDisabled()+0xc>
    2dd6:	80 e0       	ldi	r24, 0x00	; 0
    2dd8:	08 95       	ret

  PRR &= ~_BV(PRTWI); // Enable TWI power.
    2dda:	80 91 64 00 	lds	r24, 0x0064
    2dde:	8f 77       	andi	r24, 0x7F	; 127
    2de0:	80 93 64 00 	sts	0x0064, r24
  TWCR |= _BV(TWEN); // Enable TWI.
    2de4:	80 91 bc 00 	lds	r24, 0x00BC
    2de8:	84 60       	ori	r24, 0x04	; 4
    2dea:	80 93 bc 00 	sts	0x00BC, r24
  Wire.begin(); // Set it going.
    2dee:	87 e4       	ldi	r24, 0x47	; 71
    2df0:	93 e0       	ldi	r25, 0x03	; 3
    2df2:	0e 94 3f 34 	call	0x687e	; 0x687e <TwoWire::begin()>
  // TODO: reset TWBR and prescaler for our low CPU frequency     (TWBR = ((F_CPU / TWI_FREQ) - 16) / 2 gives -3!)
#if F_CPU <= 1000000
  TWBR = 0; // Implies SCL freq of F_CPU / (16 + 2 * TBWR * PRESC) = 62.5kHz @ F_CPU==1MHz and PRESC==1 (from Wire/TWI code).
    2df6:	10 92 b8 00 	sts	0x00B8, r1
    2dfa:	81 e0       	ldi	r24, 0x01	; 1
#endif
  return(true);
  }
    2dfc:	08 95       	ret

00002dfe <powerDownSerial()>:
  PRR |= _BV(PRADC); // Disable the ADC.
  }


// Check if serial is (already) powered up.
static bool _serialIsPoweredUp() { return(!(PRR & _BV(PRUSART0))); }
    2dfe:	80 91 64 00 	lds	r24, 0x0064


// Flush any pending serial output and power it down if up.
void powerDownSerial()
  {
  if(_serialIsPoweredUp())
    2e02:	81 fd       	sbrc	r24, 1
    2e04:	08 c0       	rjmp	.+16     	; 0x2e16 <powerDownSerial()+0x18>
    {
    // Flush serial output and shut down if apparently active.
    Serial.flush();
    2e06:	89 e4       	ldi	r24, 0x49	; 73
    2e08:	94 e0       	ldi	r25, 0x04	; 4
    2e0a:	0e 94 0d 39 	call	0x721a	; 0x721a <HardwareSerial::flush()>
    //flushSerialHW();
    Serial.end();
    2e0e:	89 e4       	ldi	r24, 0x49	; 73
    2e10:	94 e0       	ldi	r25, 0x04	; 4
    2e12:	0e 94 4d 38 	call	0x709a	; 0x709a <HardwareSerial::end()>
    }
  pinMode(PIN_SERIAL_RX, INPUT_PULLUP);
    2e16:	80 e0       	ldi	r24, 0x00	; 0
    2e18:	62 e0       	ldi	r22, 0x02	; 2
    2e1a:	0e 94 b2 36 	call	0x6d64	; 0x6d64 <pinMode>
  pinMode(PIN_SERIAL_TX, INPUT_PULLUP);
    2e1e:	81 e0       	ldi	r24, 0x01	; 1
    2e20:	62 e0       	ldi	r22, 0x02	; 2
    2e22:	0e 94 b2 36 	call	0x6d64	; 0x6d64 <pinMode>
  PRR |= _BV(PRUSART0); // Disable the UART module.
    2e26:	80 91 64 00 	lds	r24, 0x0064
    2e2a:	82 60       	ori	r24, 0x02	; 2
    2e2c:	80 93 64 00 	sts	0x0064, r24
  }
    2e30:	08 95       	ret

00002e32 <burnHundredsOfCyclesProductivelyAndPoll()>:
// This call should typically take << 1ms at 1MHz CPU.
// Does not change CPU clock speeds, mess with interrupts (other than possible brief blocking), or sleep.
// May capture some entropy in secure and non-secure PRNGs.
void burnHundredsOfCyclesProductivelyAndPoll()
  {
  if(pollIO()) { seedRNG8(cycleCountCPU(), _watchdogFired, getSubCycleTime()); }
    2e32:	80 e0       	ldi	r24, 0x00	; 0
    2e34:	0e 94 92 06 	call	0xd24	; 0xd24 <pollIO(bool)>
    2e38:	88 23       	and	r24, r24
    2e3a:	41 f0       	breq	.+16     	; 0x2e4c <burnHundredsOfCyclesProductivelyAndPoll()+0x1a>
    2e3c:	86 b5       	in	r24, 0x26	; 38
    2e3e:	60 91 d8 02 	lds	r22, 0x02D8
    2e42:	40 91 b2 00 	lds	r20, 0x00B2
    2e46:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <seedRNG8(unsigned char, unsigned char, unsigned char)>
    2e4a:	08 95       	ret
  else { captureEntropy1(); }
    2e4c:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <captureEntropy1()>
    2e50:	08 95       	ret

00002e52 <flushSerialProductive()>:

#ifndef flushSerialProductive
// Does a Serial.flush() attempting to do some useful work (eg I/O polling) while waiting for output to drain.
// Assumes hundreds of CPU cycles available for each character queued for TX.
// Does not change CPU clock speed or disable or mess with USART0, though may poll it.
void flushSerialProductive()
    2e52:	02 c0       	rjmp	.+4      	; 0x2e58 <flushSerialProductive()+0x6>
#if 0 && defined(DEBUG)
  if(!_serialIsPoweredUp()) { panic(); } // Trying to operate serial without it powered up.
#endif
  // Can productively spin here churning PRNGs or the like before the flush(), checking for the UART TX buffer to empty...
  // An occasional premature exit to flush() due to Serial interrupt handler interaction is benign, and indeed more grist to the mill.
  while(serialTXInProgress()) { burnHundredsOfCyclesProductivelyAndPoll(); }
    2e54:	0e 94 19 17 	call	0x2e32	; 0x2e32 <burnHundredsOfCyclesProductivelyAndPoll()>
    2e58:	80 91 c0 00 	lds	r24, 0x00C0
    2e5c:	85 ff       	sbrs	r24, 5
    2e5e:	fa cf       	rjmp	.-12     	; 0x2e54 <flushSerialProductive()+0x2>
  Serial.flush(); // Wait for all output to have been sent.
    2e60:	89 e4       	ldi	r24, 0x49	; 73
    2e62:	94 e0       	ldi	r25, 0x04	; 4
    2e64:	0e 94 0d 39 	call	0x721a	; 0x721a <HardwareSerial::flush()>
  }
    2e68:	08 95       	ret

00002e6a <flushSerialSCTSensitive()>:
// Does not change CPU clock speed or disable or mess with USART0, though may poll it.
// Sleeps in IDLE mode for ~15ms at a time (backtopped by watchdog) waking on any interrupt
// so that the caller must be sure RX overrun (etc) will not be an issue.
// Switches to flushSerialProductive() behaviour
// if in danger of overrunning a minor cycle while idling.
void flushSerialSCTSensitive()
    2e6a:	1f 93       	push	r17
#ifdef ENABLE_AVR_IDLE_MODE
// Idle productively polling I/O, etc, across the system while spending time in low-power mode if possible.
// Typically sleeps for nominally up to 30ms; tries to allow ealier wakeup if interrupt is received, etc.
// (Will often be prematurely woken by timer0 with ~16ms interval.)
// True iff watchdog timer expired; false if something else woke the CPU.
static bool inline idle15AndPoll() { const bool wd = idleCPU(WDTO_15MS); pollIO(!wd); return(wd); }
    2e6c:	11 e0       	ldi	r17, 0x01	; 1
  {
#if 0 && defined(DEBUG)
  if(!_serialIsPoweredUp()) { panic(); } // Trying to operate serial without it powered up.
#endif
#ifdef ENABLE_AVR_IDLE_MODE
  while(serialTXInProgress() && (getSubCycleTime() < GSCT_MAX - 2 - (20/SUBCYCLE_TICK_MS_RD)))
    2e6e:	80 91 c0 00 	lds	r24, 0x00C0
    2e72:	85 fd       	sbrc	r24, 5
    2e74:	0b c0       	rjmp	.+22     	; 0x2e8c <flushSerialSCTSensitive()+0x22>
    2e76:	80 91 b2 00 	lds	r24, 0x00B2
    2e7a:	8b 3f       	cpi	r24, 0xFB	; 251
    2e7c:	38 f4       	brcc	.+14     	; 0x2e8c <flushSerialSCTSensitive()+0x22>
    2e7e:	80 e0       	ldi	r24, 0x00	; 0
    2e80:	0e 94 12 14 	call	0x2824	; 0x2824 <idleCPU(signed char)>
    2e84:	81 27       	eor	r24, r17
    2e86:	0e 94 92 06 	call	0xd24	; 0xd24 <pollIO(bool)>
    2e8a:	f1 cf       	rjmp	.-30     	; 0x2e6e <flushSerialSCTSensitive()+0x4>
    { idle15AndPoll(); } // Save much power by idling CPU, though everything else runs.
#endif
  flushSerialProductive();
    2e8c:	0e 94 29 17 	call	0x2e52	; 0x2e52 <flushSerialProductive()>
  }
    2e90:	1f 91       	pop	r17
    2e92:	08 95       	ret

00002e94 <powerUpSerialIfDisabled()>:
  PRR |= _BV(PRADC); // Disable the ADC.
  }


// Check if serial is (already) powered up.
static bool _serialIsPoweredUp() { return(!(PRR & _BV(PRUSART0))); }
    2e94:	80 91 64 00 	lds	r24, 0x0064
// If serial was disabled, power it up, do Serial.begin(), and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownSerial() may be advisable.
bool powerUpSerialIfDisabled()
  {
  if(_serialIsPoweredUp()) { return(false); }
    2e98:	81 fd       	sbrc	r24, 1
    2e9a:	02 c0       	rjmp	.+4      	; 0x2ea0 <powerUpSerialIfDisabled()+0xc>
    2e9c:	80 e0       	ldi	r24, 0x00	; 0
    2e9e:	08 95       	ret
  PRR &= ~_BV(PRUSART0); // Enable the UART.
    2ea0:	80 91 64 00 	lds	r24, 0x0064
    2ea4:	8d 7f       	andi	r24, 0xFD	; 253
    2ea6:	80 93 64 00 	sts	0x0064, r24
  Serial.begin(BAUD); // Set it going.
    2eaa:	89 e4       	ldi	r24, 0x49	; 73
    2eac:	94 e0       	ldi	r25, 0x04	; 4
    2eae:	40 ec       	ldi	r20, 0xC0	; 192
    2eb0:	52 e1       	ldi	r21, 0x12	; 18
    2eb2:	60 e0       	ldi	r22, 0x00	; 0
    2eb4:	70 e0       	ldi	r23, 0x00	; 0
    2eb6:	0e 94 cf 37 	call	0x6f9e	; 0x6f9e <HardwareSerial::begin(unsigned long)>
    2eba:	81 e0       	ldi	r24, 0x01	; 1
  return(true);
  }
    2ebc:	08 95       	ret

00002ebe <sleepUntilSubCycleTime(unsigned char)>:
// May use a combination of techniques to hit the required time.
// Requesting a sleep until at or near the end of the cycle risks overrun and may be unwise.
// Using this to sleep less then 2 ticks may prove unreliable as the RTC rolls on underneath...
// This is NOT intended to be used to sleep over the end of a minor cycle.
// May poll I/O.
bool sleepUntilSubCycleTime(const uint8_t sleepUntil)
    2ebe:	0f 93       	push	r16
    2ec0:	1f 93       	push	r17
    2ec2:	cf 93       	push	r28
    2ec4:	df 93       	push	r29
    2ec6:	18 2f       	mov	r17, r24
      sleepLowPowerLessThanMs(max(SUBCYCLE_TICK_MS_RD / 2, 1)); // Assumed to be a constant expression.
      continue;
      }

    // Compute remaining time in milliseconds, rounded down...
    const uint16_t msLeft = ((uint16_t)SUBCYCLE_TICK_MS_RD) * ticksLeft;
    2ec8:	07 e0       	ldi	r16, 0x07	; 7
// May poll I/O.
bool sleepUntilSubCycleTime(const uint8_t sleepUntil)
  {
  for( ; ; )
    {
    const uint8_t now = getSubCycleTime();
    2eca:	80 91 b2 00 	lds	r24, 0x00B2
    if(now == sleepUntil) { return(true); } // Done it!
    2ece:	81 17       	cp	r24, r17
    2ed0:	e1 f1       	breq	.+120    	; 0x2f4a <sleepUntilSubCycleTime(unsigned char)+0x8c>
    if(now > sleepUntil) { return(false); } // Too late...
    2ed2:	18 17       	cp	r17, r24
    2ed4:	10 f4       	brcc	.+4      	; 0x2eda <sleepUntilSubCycleTime(unsigned char)+0x1c>
    2ed6:	80 e0       	ldi	r24, 0x00	; 0
    2ed8:	39 c0       	rjmp	.+114    	; 0x2f4c <sleepUntilSubCycleTime(unsigned char)+0x8e>

    // Compute time left to sleep.
    // It is easy to sleep a bit more later if necessary, but oversleeping is bad.
    const uint8_t ticksLeft = sleepUntil - now;
    2eda:	21 2f       	mov	r18, r17
    2edc:	28 1b       	sub	r18, r24
    // Deal with shortest sleep specially to avoid missing target from overheads...
    if(1 == ticksLeft)
    2ede:	21 30       	cpi	r18, 0x01	; 1
    2ee0:	19 f4       	brne	.+6      	; 0x2ee8 <sleepUntilSubCycleTime(unsigned char)+0x2a>
// Should be good for values up to at least 1000, ie 1 second.
// Uses formulation likely to be quicker than sleepLowPowerMs() for non-constant argument values,
// and that results in a somewhat shorter sleep than sleepLowPowerMs(ms).
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerLessThanMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed(((MIN_CPU_HZ/4000) * (ms)) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    2ee2:	83 e1       	ldi	r24, 0x13	; 19
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	2e c0       	rjmp	.+92     	; 0x2f44 <sleepUntilSubCycleTime(unsigned char)+0x86>
      sleepLowPowerLessThanMs(max(SUBCYCLE_TICK_MS_RD / 2, 1)); // Assumed to be a constant expression.
      continue;
      }

    // Compute remaining time in milliseconds, rounded down...
    const uint16_t msLeft = ((uint16_t)SUBCYCLE_TICK_MS_RD) * ticksLeft;
    2ee8:	20 9f       	mul	r18, r16
    2eea:	e0 01       	movw	r28, r0
    2eec:	11 24       	eor	r1, r1

    // If comfortably in the area of nap()s then use one of them for improved energy savings.
    // Allow for nap() to overrun a little as its timing can vary with temperature and supply voltage,
    // and the bulk of energy savings should still be available without pushing the timing to the wire.
    // Note that during nap() timer0 should be stopped and thus not cause premature wakeup (from overflow interrupt).
    if(msLeft >= 20)
    2eee:	c4 31       	cpi	r28, 0x14	; 20
    2ef0:	d1 05       	cpc	r29, r1
    2ef2:	70 f0       	brcs	.+28     	; 0x2f10 <sleepUntilSubCycleTime(unsigned char)+0x52>
      {
      if(msLeft >= 80)
    2ef4:	c0 35       	cpi	r28, 0x50	; 80
    2ef6:	d1 05       	cpc	r29, r1
    2ef8:	38 f0       	brcs	.+14     	; 0x2f08 <sleepUntilSubCycleTime(unsigned char)+0x4a>
        {
        if(msLeft >= 333)
    2efa:	cd 54       	subi	r28, 0x4D	; 77
    2efc:	d1 40       	sbci	r29, 0x01	; 1
    2efe:	10 f0       	brcs	.+4      	; 0x2f04 <sleepUntilSubCycleTime(unsigned char)+0x46>
          {
          nap(WDTO_250MS); // Nominal 250ms sleep.
    2f00:	84 e0       	ldi	r24, 0x04	; 4
    2f02:	03 c0       	rjmp	.+6      	; 0x2f0a <sleepUntilSubCycleTime(unsigned char)+0x4c>
          continue;
          }
        nap(WDTO_60MS); // Nominal 60ms sleep.
    2f04:	82 e0       	ldi	r24, 0x02	; 2
    2f06:	01 c0       	rjmp	.+2      	; 0x2f0a <sleepUntilSubCycleTime(unsigned char)+0x4c>
        continue;
        }
      nap(WDTO_15MS); // Nominal 15ms sleep.
    2f08:	80 e0       	ldi	r24, 0x00	; 0
    2f0a:	0e 94 da 13 	call	0x27b4	; 0x27b4 <nap(signed char)>
    2f0e:	dd cf       	rjmp	.-70     	; 0x2eca <sleepUntilSubCycleTime(unsigned char)+0xc>
    // Use low-power CPU sleep for residual time, but being very careful not to oversleep.
    // Aim to sleep somewhat under residual time, eg to allow for overheads, interrupts, and other slippages.
    // Assumed to be > 1 else would have been special-cased above.
    // Assumed to be << 1s else a nap() would have been used above.
#ifdef DEBUG
    if((msLeft < 2) || (msLeft > 1000)) { panic(); }
    2f10:	ce 01       	movw	r24, r28
    2f12:	02 97       	sbiw	r24, 0x02	; 2
    2f14:	87 5e       	subi	r24, 0xE7	; 231
    2f16:	93 40       	sbci	r25, 0x03	; 3
    2f18:	10 f0       	brcs	.+4      	; 0x2f1e <sleepUntilSubCycleTime(unsigned char)+0x60>
    2f1a:	0e 94 ec 2f 	call	0x5fd8	; 0x5fd8 <panic()>
    2f1e:	9e 01       	movw	r18, r28
    2f20:	21 50       	subi	r18, 0x01	; 1
    2f22:	30 40       	sbci	r19, 0x00	; 0
    2f24:	40 e0       	ldi	r20, 0x00	; 0
    2f26:	50 e0       	ldi	r21, 0x00	; 0
    2f28:	da 01       	movw	r26, r20
    2f2a:	c9 01       	movw	r24, r18
    2f2c:	63 e0       	ldi	r22, 0x03	; 3
    2f2e:	88 0f       	add	r24, r24
    2f30:	99 1f       	adc	r25, r25
    2f32:	aa 1f       	adc	r26, r26
    2f34:	bb 1f       	adc	r27, r27
    2f36:	6a 95       	dec	r22
    2f38:	d1 f7       	brne	.-12     	; 0x2f2e <sleepUntilSubCycleTime(unsigned char)+0x70>
    2f3a:	82 1b       	sub	r24, r18
    2f3c:	93 0b       	sbc	r25, r19
    2f3e:	a4 0b       	sbc	r26, r20
    2f40:	b5 0b       	sbc	r27, r21
    2f42:	02 97       	sbiw	r24, 0x02	; 2
    2f44:	0e 94 bf 13 	call	0x277e	; 0x277e <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
    2f48:	c0 cf       	rjmp	.-128    	; 0x2eca <sleepUntilSubCycleTime(unsigned char)+0xc>
    2f4a:	81 e0       	ldi	r24, 0x01	; 1
#endif
    sleepLowPowerLessThanMs(msLeft - 1);
    }
  }
    2f4c:	df 91       	pop	r29
    2f4e:	cf 91       	pop	r28
    2f50:	1f 91       	pop	r17
    2f52:	0f 91       	pop	r16
    2f54:	08 95       	ret

00002f56 <powerSetup()>:
// Call from setup() to turn off unused modules, set up timers and interrupts, etc.
// I/O pin setting is not done here.
void powerSetup()
  {
#ifdef DEBUG
  assert(DEFAULT_CPU_PRESCALE == clock_prescale_get()); // Verify that CPU prescaling is as expected.
    2f56:	80 91 61 00 	lds	r24, 0x0061
    2f5a:	8f 70       	andi	r24, 0x0F	; 15
    2f5c:	83 30       	cpi	r24, 0x03	; 3
    2f5e:	11 f0       	breq	.+4      	; 0x2f64 <powerSetup()+0xe>
    2f60:	0e 94 9d 02 	call	0x53a	; 0x53a <abort>
#endif

  // Do normal gentle switch off, including analogue module/control in correct order.
  minimisePowerWithoutSleep();
    2f64:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <minimisePowerWithoutSleep()>

  // Brutally force off all modules, then re-enable explicitly below any still needed.
  power_all_disable(); 
    2f68:	80 91 64 00 	lds	r24, 0x0064
    2f6c:	8f 6e       	ori	r24, 0xEF	; 239
    2f6e:	80 93 64 00 	sts	0x0064, r24

#if !defined(DONT_USE_TIMER0)
  power_timer0_enable(); // Turning timer 0 off messes up some standard Arduino support such as delay() and millis().
    2f72:	80 91 64 00 	lds	r24, 0x0064
    2f76:	8f 7d       	andi	r24, 0xDF	; 223
    2f78:	80 93 64 00 	sts	0x0064, r24
#endif
  
#if defined(WAKEUP_32768HZ_XTAL)
  power_timer2_enable();
    2f7c:	80 91 64 00 	lds	r24, 0x0064
    2f80:	8f 7b       	andi	r24, 0xBF	; 191
    2f82:	80 93 64 00 	sts	0x0064, r24
#ifdef WAKEUP_32768HZ_XTAL
static void timer2XtalIntSetup()
 {
  // Set up TIMER2 to wake CPU out of sleep regularly using external 32768Hz crystal.
  // See http://www.atmel.com/Images/doc2505.pdf
  TCCR2A = 0x00;
    2f86:	10 92 b0 00 	sts	0x00B0, r1

#if defined(HALF_SECOND_RTC_SUPPORT)
  TCCR2B = (1<<CS22); // Set CLK/64 for overflow interrupt every 0.5s.
#elif defined(TWO_S_TICK_RTC_SUPPORT)
  TCCR2B = (1<<CS22)|(1<<CS21); // Set CLK/128 for overflow interrupt every 2s.
    2f8a:	86 e0       	ldi	r24, 0x06	; 6
    2f8c:	80 93 b1 00 	sts	0x00B1, r24
#else
  TCCR2B = (1<<CS22)|(1<<CS20); // Set CLK/128 for overflow interrupt every 1s.
#endif
  //TCCR2B = (1<<CS22)|(1<<CS21)|(1<<CS20); // Set CLK/1024 for overflow interrupt every 8s (slowest possible).

  ASSR = (1<<AS2); // Enable asynchronous operation.
    2f90:	80 e2       	ldi	r24, 0x20	; 32
    2f92:	80 93 b6 00 	sts	0x00B6, r24
  TIMSK2 = (1<<TOIE2); // Enable the timer 2 interrupt.
    2f96:	81 e0       	ldi	r24, 0x01	; 1
    2f98:	80 93 70 00 	sts	0x0070, r24
  
#if defined(WAKEUP_32768HZ_XTAL)
  power_timer2_enable();
  timer2XtalIntSetup();
#endif
  }
    2f9c:	08 95       	ret

00002f9e <seedRNG8(unsigned char, unsigned char, unsigned char)>:
//2 ADDs, one bit shift right , and one increment. Difficult or slow operations like multiply, etc 
//were avoided for maximum speed on ultra low power devices.
void seedRNG8(uint8_t s1, uint8_t s2, uint8_t s3) // Originally init_rng(s1,s2,s3) //Can also be used to seed the rng with more entropy during use.
  {
  //XOR new entropy into key state
  a ^=s1;
    2f9e:	20 91 dd 02 	lds	r18, 0x02DD
  b ^=s2;
    2fa2:	90 91 de 02 	lds	r25, 0x02DE
    2fa6:	69 27       	eor	r22, r25
  c ^=s3;
    2fa8:	90 91 db 02 	lds	r25, 0x02DB
    2fac:	49 27       	eor	r20, r25
  x++;
    2fae:	90 91 dc 02 	lds	r25, 0x02DC
    2fb2:	9f 5f       	subi	r25, 0xFF	; 255
    2fb4:	90 93 dc 02 	sts	0x02DC, r25
  a = (a^c^x);
    2fb8:	28 27       	eor	r18, r24
    2fba:	24 27       	eor	r18, r20
    2fbc:	29 27       	eor	r18, r25
    2fbe:	20 93 dd 02 	sts	0x02DD, r18
  b = (b+a);
    2fc2:	62 0f       	add	r22, r18
    2fc4:	60 93 de 02 	sts	0x02DE, r22
  c = ((c+(b>>1))^a);
    2fc8:	66 95       	lsr	r22
    2fca:	64 0f       	add	r22, r20
    2fcc:	62 27       	eor	r22, r18
    2fce:	60 93 db 02 	sts	0x02DB, r22
  }
    2fd2:	08 95       	ret

00002fd4 <randRNG8()>:
//
uint8_t randRNG8() // Originally unsigned char randomize().
  {
  x++;               //x is incremented every round and is not affected by any other variable
    2fd4:	80 91 dc 02 	lds	r24, 0x02DC
    2fd8:	8f 5f       	subi	r24, 0xFF	; 255
    2fda:	80 93 dc 02 	sts	0x02DC, r24
  a = (a^c^x);       //note the mix of addition and XOR
    2fde:	20 91 db 02 	lds	r18, 0x02DB
    2fe2:	90 91 dd 02 	lds	r25, 0x02DD
    2fe6:	92 27       	eor	r25, r18
    2fe8:	98 27       	eor	r25, r24
    2fea:	90 93 dd 02 	sts	0x02DD, r25
  b = (b+a);         //And the use of very few instructions
    2fee:	80 91 de 02 	lds	r24, 0x02DE
    2ff2:	89 0f       	add	r24, r25
    2ff4:	80 93 de 02 	sts	0x02DE, r24
  c = ((c+(b>>1))^a);  //the right shift is to ensure that high-order bits from b can affect  
    2ff8:	86 95       	lsr	r24
    2ffa:	82 0f       	add	r24, r18
    2ffc:	89 27       	eor	r24, r25
    2ffe:	80 93 db 02 	sts	0x02DB, r24
  return(c);         //low order bits of other variables
  }
    3002:	08 95       	ret

00003004 <resetRNG8()>:
//
#ifdef UNIT_TESTS
// Reset to known state; only allow in unit testing as this destroys any residual entropy.
void resetRNG8()
  {
  x = 0;
    3004:	10 92 dc 02 	sts	0x02DC, r1
  a = 0;
    3008:	10 92 dd 02 	sts	0x02DD, r1
  b = 0;
    300c:	10 92 de 02 	sts	0x02DE, r1
  c = 0;
    3010:	10 92 db 02 	sts	0x02DB, r1
  };
    3014:	08 95       	ret

00003016 <global constructors keyed to _Z8seedRNG8hhh>:
uint8_t randRNG8(); // Originally called 'randomize()'.
// RNG8 working state.
static uint8_t a, b, c;
// DHD20130603: avoid the hidden counter always starting at zero c/o some per-build state.
// Derived from linker-driven pointer base plus hash of compilation timestamp, with little run-time cost.
static uint8_t x = (uint8_t)(intptr_t) ((&c) + (uint8_t)((__TIME__[7] * 17) ^ (__TIME__[6]) ^ (__TIME__[4] << 11)));
    3016:	83 ed       	ldi	r24, 0xD3	; 211
    3018:	93 e0       	ldi	r25, 0x03	; 3
    301a:	80 93 dc 02 	sts	0x02DC, r24
  {
  x = 0;
  a = 0;
  b = 0;
  c = 0;
  };
    301e:	08 95       	ret

00003020 <RFM22RXFIFO(unsigned char*, unsigned char)>:


// Put RFM22 into standby, attempt to read specified number of bytes from FIFO to buffer.
// Leaves RFM22 in low-power standby mode.
// Trailing bytes (more than were actually sent) undefined.
void RFM22RXFIFO(uint8_t *buf, const uint8_t bufSize)
    3020:	ff 92       	push	r15
    3022:	0f 93       	push	r16
    3024:	1f 93       	push	r17
    3026:	18 2f       	mov	r17, r24
    3028:	09 2f       	mov	r16, r25
    302a:	f6 2e       	mov	r15, r22
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    302c:	0e 94 91 16 	call	0x2d22	; 0x2d22 <powerUpSPIIfDisabled()>
    3030:	48 2f       	mov	r20, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    3032:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3034:	87 e8       	ldi	r24, 0x87	; 135
    3036:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3038:	0d b4       	in	r0, 0x2d	; 45
    303a:	07 fe       	sbrs	r0, 7
    303c:	fd cf       	rjmp	.-6      	; 0x3038 <RFM22RXFIFO(unsigned char*, unsigned char)+0x18>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    303e:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3040:	0d b4       	in	r0, 0x2d	; 45
    3042:	07 fe       	sbrs	r0, 7
    3044:	fd cf       	rjmp	.-6      	; 0x3040 <RFM22RXFIFO(unsigned char*, unsigned char)+0x20>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    3046:	2a 9a       	sbi	0x05, 2	; 5
  {
  const bool neededEnable = powerUpSPIIfDisabled();

  _RFM22ModeStandby();

  _RFM22_SELECT();
    3048:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    304a:	8f e7       	ldi	r24, 0x7F	; 127
    304c:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    304e:	0d b4       	in	r0, 0x2d	; 45
    3050:	07 fe       	sbrs	r0, 7
    3052:	fd cf       	rjmp	.-6      	; 0x304e <RFM22RXFIFO(unsigned char*, unsigned char)+0x2e>
  return(SPDR);
    3054:	8e b5       	in	r24, 0x2e	; 46
    3056:	81 2f       	mov	r24, r17
    3058:	90 2f       	mov	r25, r16
    305a:	9c 01       	movw	r18, r24
    305c:	f9 01       	movw	r30, r18
    305e:	90 e0       	ldi	r25, 0x00	; 0
    3060:	07 c0       	rjmp	.+14     	; 0x3070 <RFM22RXFIFO(unsigned char*, unsigned char)+0x50>

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    3062:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3064:	0d b4       	in	r0, 0x2d	; 45
    3066:	07 fe       	sbrs	r0, 7
    3068:	fd cf       	rjmp	.-6      	; 0x3064 <RFM22RXFIFO(unsigned char*, unsigned char)+0x44>
  return(SPDR);
    306a:	8e b5       	in	r24, 0x2e	; 46

  _RFM22_SELECT();
  _RFM22_io(RFM22REG_FIFO & 0x7F); // Start burst read from RX FIFO.
//  uint8_t val;
  for(uint8_t i = 0; i < bufSize; ++i)
    { buf[i] = _RFM22_io(0);  }
    306c:	81 93       	st	Z+, r24
  _RFM22ModeStandby();

  _RFM22_SELECT();
  _RFM22_io(RFM22REG_FIFO & 0x7F); // Start burst read from RX FIFO.
//  uint8_t val;
  for(uint8_t i = 0; i < bufSize; ++i)
    306e:	9f 5f       	subi	r25, 0xFF	; 255
    3070:	9f 15       	cp	r25, r15
    3072:	b8 f3       	brcs	.-18     	; 0x3062 <RFM22RXFIFO(unsigned char*, unsigned char)+0x42>
    { buf[i] = _RFM22_io(0);  }
  _RFM22_DESELECT();
    3074:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    3076:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3078:	88 e8       	ldi	r24, 0x88	; 136
    307a:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    307c:	0d b4       	in	r0, 0x2d	; 45
    307e:	07 fe       	sbrs	r0, 7
    3080:	fd cf       	rjmp	.-6      	; 0x307c <RFM22RXFIFO(unsigned char*, unsigned char)+0x5c>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3082:	83 e0       	ldi	r24, 0x03	; 3
    3084:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3086:	0d b4       	in	r0, 0x2d	; 45
    3088:	07 fe       	sbrs	r0, 7
    308a:	fd cf       	rjmp	.-6      	; 0x3086 <RFM22RXFIFO(unsigned char*, unsigned char)+0x66>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    308c:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    308e:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3090:	88 e8       	ldi	r24, 0x88	; 136
    3092:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3094:	0d b4       	in	r0, 0x2d	; 45
    3096:	07 fe       	sbrs	r0, 7
    3098:	fd cf       	rjmp	.-6      	; 0x3094 <RFM22RXFIFO(unsigned char*, unsigned char)+0x74>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    309a:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    309c:	0d b4       	in	r0, 0x2d	; 45
    309e:	07 fe       	sbrs	r0, 7
    30a0:	fd cf       	rjmp	.-6      	; 0x309c <RFM22RXFIFO(unsigned char*, unsigned char)+0x7c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    30a2:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    30a4:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    30a6:	85 e8       	ldi	r24, 0x85	; 133
    30a8:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    30aa:	0d b4       	in	r0, 0x2d	; 45
    30ac:	07 fe       	sbrs	r0, 7
    30ae:	fd cf       	rjmp	.-6      	; 0x30aa <RFM22RXFIFO(unsigned char*, unsigned char)+0x8a>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    30b0:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    30b2:	0d b4       	in	r0, 0x2d	; 45
    30b4:	07 fe       	sbrs	r0, 7
    30b6:	fd cf       	rjmp	.-6      	; 0x30b2 <RFM22RXFIFO(unsigned char*, unsigned char)+0x92>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    30b8:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    30ba:	0d b4       	in	r0, 0x2d	; 45
    30bc:	07 fe       	sbrs	r0, 7
    30be:	fd cf       	rjmp	.-6      	; 0x30ba <RFM22RXFIFO(unsigned char*, unsigned char)+0x9a>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    30c0:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    30c2:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    30c4:	83 e8       	ldi	r24, 0x83	; 131
    30c6:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    30c8:	0d b4       	in	r0, 0x2d	; 45
    30ca:	07 fe       	sbrs	r0, 7
    30cc:	fd cf       	rjmp	.-6      	; 0x30c8 <RFM22RXFIFO(unsigned char*, unsigned char)+0xa8>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    30ce:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    30d0:	0d b4       	in	r0, 0x2d	; 45
    30d2:	07 fe       	sbrs	r0, 7
    30d4:	fd cf       	rjmp	.-6      	; 0x30d0 <RFM22RXFIFO(unsigned char*, unsigned char)+0xb0>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    30d6:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    30d8:	0d b4       	in	r0, 0x2d	; 45
    30da:	07 fe       	sbrs	r0, 7
    30dc:	fd cf       	rjmp	.-6      	; 0x30d8 <RFM22RXFIFO(unsigned char*, unsigned char)+0xb8>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    30de:	2a 9a       	sbi	0x05, 2	; 5
  _RFM22WriteReg16Bit0(RFM22REG_INT_ENABLE1);
  // Clear any interrupts already/still pending...
  _RFM22ClearInterrupts();  
  //_RFM22WriteReg8Bit(0xd, 0x1f); // Drive GPIO2 to ground as output... (Move to general register settings.)

  if(neededEnable) { powerDownSPI(); }
    30e0:	44 23       	and	r20, r20
    30e2:	11 f0       	breq	.+4      	; 0x30e8 <RFM22RXFIFO(unsigned char*, unsigned char)+0xc8>
    30e4:	0e 94 77 16 	call	0x2cee	; 0x2cee <powerDownSPI()>
  }
    30e8:	1f 91       	pop	r17
    30ea:	0f 91       	pop	r16
    30ec:	ff 90       	pop	r15
    30ee:	08 95       	ret

000030f0 <RFM22SetUpRX(unsigned char, bool, bool)>:
  _RFM22_DESELECT();
  if(neededEnable) { powerDownSPI(); }
  }

// Put RFM22 into RX mode with given RX FIFO 'nearly-full' threshold and optional interrupts enabled.
void RFM22SetUpRX(const uint8_t nearlyFullThreshold, const bool syncInt, const bool dataInt)
    30f0:	ff 92       	push	r15
    30f2:	0f 93       	push	r16
    30f4:	1f 93       	push	r17
    30f6:	18 2f       	mov	r17, r24
    30f8:	f6 2e       	mov	r15, r22
    30fa:	04 2f       	mov	r16, r20
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    30fc:	0e 94 91 16 	call	0x2d22	; 0x2d22 <powerUpSPIIfDisabled()>
    3100:	28 2f       	mov	r18, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    3102:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3104:	88 e8       	ldi	r24, 0x88	; 136
    3106:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3108:	0d b4       	in	r0, 0x2d	; 45
    310a:	07 fe       	sbrs	r0, 7
    310c:	fd cf       	rjmp	.-6      	; 0x3108 <RFM22SetUpRX(unsigned char, bool, bool)+0x18>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    310e:	83 e0       	ldi	r24, 0x03	; 3
    3110:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3112:	0d b4       	in	r0, 0x2d	; 45
    3114:	07 fe       	sbrs	r0, 7
    3116:	fd cf       	rjmp	.-6      	; 0x3112 <RFM22SetUpRX(unsigned char, bool, bool)+0x22>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    3118:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    311a:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    311c:	88 e8       	ldi	r24, 0x88	; 136
    311e:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3120:	0d b4       	in	r0, 0x2d	; 45
    3122:	07 fe       	sbrs	r0, 7
    3124:	fd cf       	rjmp	.-6      	; 0x3120 <RFM22SetUpRX(unsigned char, bool, bool)+0x30>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3126:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3128:	0d b4       	in	r0, 0x2d	; 45
    312a:	07 fe       	sbrs	r0, 7
    312c:	fd cf       	rjmp	.-6      	; 0x3128 <RFM22SetUpRX(unsigned char, bool, bool)+0x38>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    312e:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    3130:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3132:	8e ef       	ldi	r24, 0xFE	; 254
    3134:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3136:	0d b4       	in	r0, 0x2d	; 45
    3138:	07 fe       	sbrs	r0, 7
    313a:	fd cf       	rjmp	.-6      	; 0x3136 <RFM22SetUpRX(unsigned char, bool, bool)+0x46>
  // Clear RX and TX FIFOs.
  _RFM22WriteReg8Bit(RFM22REG_OP_CTRL2, 3); // FFCLRTX | FFCLRTX
  _RFM22WriteReg8Bit(RFM22REG_OP_CTRL2, 0);

  // Set FIFO RX almost-full threshold as specified.
  _RFM22WriteReg8Bit(RFM22REG_RX_FIFO_CTRL, min(nearlyFullThreshold, 63));
    313c:	81 2f       	mov	r24, r17
    313e:	10 34       	cpi	r17, 0x40	; 64
    3140:	08 f0       	brcs	.+2      	; 0x3144 <RFM22SetUpRX(unsigned char, bool, bool)+0x54>
    3142:	8f e3       	ldi	r24, 0x3F	; 63

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3144:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3146:	0d b4       	in	r0, 0x2d	; 45
    3148:	07 fe       	sbrs	r0, 7
    314a:	fd cf       	rjmp	.-6      	; 0x3146 <RFM22SetUpRX(unsigned char, bool, bool)+0x56>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    314c:	2a 9a       	sbi	0x05, 2	; 5

  // Set FIFO RX almost-full threshold as specified.
  _RFM22WriteReg8Bit(RFM22REG_RX_FIFO_CTRL, min(nearlyFullThreshold, 63));

  // Enable requested RX-related interrupts.
  _RFM22WriteReg8Bit(RFM22REG_INT_ENABLE1, (dataInt?0x10:0)); // enrxffafull: Enable RX FIFO Almost Full.
    314e:	00 23       	and	r16, r16
    3150:	11 f4       	brne	.+4      	; 0x3156 <RFM22SetUpRX(unsigned char, bool, bool)+0x66>
    3152:	90 e0       	ldi	r25, 0x00	; 0
    3154:	01 c0       	rjmp	.+2      	; 0x3158 <RFM22SetUpRX(unsigned char, bool, bool)+0x68>
    3156:	90 e1       	ldi	r25, 0x10	; 16

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    3158:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    315a:	85 e8       	ldi	r24, 0x85	; 133
    315c:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    315e:	0d b4       	in	r0, 0x2d	; 45
    3160:	07 fe       	sbrs	r0, 7
    3162:	fd cf       	rjmp	.-6      	; 0x315e <RFM22SetUpRX(unsigned char, bool, bool)+0x6e>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3164:	9e bd       	out	0x2e, r25	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3166:	0d b4       	in	r0, 0x2d	; 45
    3168:	07 fe       	sbrs	r0, 7
    316a:	fd cf       	rjmp	.-6      	; 0x3166 <RFM22SetUpRX(unsigned char, bool, bool)+0x76>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    316c:	2a 9a       	sbi	0x05, 2	; 5
  // Set FIFO RX almost-full threshold as specified.
  _RFM22WriteReg8Bit(RFM22REG_RX_FIFO_CTRL, min(nearlyFullThreshold, 63));

  // Enable requested RX-related interrupts.
  _RFM22WriteReg8Bit(RFM22REG_INT_ENABLE1, (dataInt?0x10:0)); // enrxffafull: Enable RX FIFO Almost Full.
  _RFM22WriteReg8Bit(RFM22REG_INT_ENABLE2, (syncInt?0x80:0)); // enswdet: Enable Sync Word Detected.
    316e:	ff 20       	and	r15, r15
    3170:	11 f4       	brne	.+4      	; 0x3176 <RFM22SetUpRX(unsigned char, bool, bool)+0x86>
    3172:	90 e0       	ldi	r25, 0x00	; 0
    3174:	01 c0       	rjmp	.+2      	; 0x3178 <RFM22SetUpRX(unsigned char, bool, bool)+0x88>
    3176:	90 e8       	ldi	r25, 0x80	; 128

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    3178:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    317a:	86 e8       	ldi	r24, 0x86	; 134
    317c:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    317e:	0d b4       	in	r0, 0x2d	; 45
    3180:	07 fe       	sbrs	r0, 7
    3182:	fd cf       	rjmp	.-6      	; 0x317e <RFM22SetUpRX(unsigned char, bool, bool)+0x8e>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3184:	9e bd       	out	0x2e, r25	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3186:	0d b4       	in	r0, 0x2d	; 45
    3188:	07 fe       	sbrs	r0, 7
    318a:	fd cf       	rjmp	.-6      	; 0x3186 <RFM22SetUpRX(unsigned char, bool, bool)+0x96>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    318c:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    318e:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3190:	83 e8       	ldi	r24, 0x83	; 131
    3192:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3194:	0d b4       	in	r0, 0x2d	; 45
    3196:	07 fe       	sbrs	r0, 7
    3198:	fd cf       	rjmp	.-6      	; 0x3194 <RFM22SetUpRX(unsigned char, bool, bool)+0xa4>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    319a:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    319c:	0d b4       	in	r0, 0x2d	; 45
    319e:	07 fe       	sbrs	r0, 7
    31a0:	fd cf       	rjmp	.-6      	; 0x319c <RFM22SetUpRX(unsigned char, bool, bool)+0xac>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    31a2:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    31a4:	0d b4       	in	r0, 0x2d	; 45
    31a6:	07 fe       	sbrs	r0, 7
    31a8:	fd cf       	rjmp	.-6      	; 0x31a4 <RFM22SetUpRX(unsigned char, bool, bool)+0xb4>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    31aa:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    31ac:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    31ae:	87 e8       	ldi	r24, 0x87	; 135
    31b0:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    31b2:	0d b4       	in	r0, 0x2d	; 45
    31b4:	07 fe       	sbrs	r0, 7
    31b6:	fd cf       	rjmp	.-6      	; 0x31b2 <RFM22SetUpRX(unsigned char, bool, bool)+0xc2>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    31b8:	85 e0       	ldi	r24, 0x05	; 5
    31ba:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    31bc:	0d b4       	in	r0, 0x2d	; 45
    31be:	07 fe       	sbrs	r0, 7
    31c0:	fd cf       	rjmp	.-6      	; 0x31bc <RFM22SetUpRX(unsigned char, bool, bool)+0xcc>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    31c2:	2a 9a       	sbi	0x05, 2	; 5
  _RFM22ClearInterrupts();

  // Start listening.
  _RFM22ModeRX();
  
  if(neededEnable) { powerDownSPI(); }
    31c4:	22 23       	and	r18, r18
    31c6:	11 f0       	breq	.+4      	; 0x31cc <RFM22SetUpRX(unsigned char, bool, bool)+0xdc>
    31c8:	0e 94 77 16 	call	0x2cee	; 0x2cee <powerDownSPI()>
  }
    31cc:	1f 91       	pop	r17
    31ce:	0f 91       	pop	r16
    31d0:	ff 90       	pop	r15
    31d2:	08 95       	ret

000031d4 <RFM22RegisterBlockSetup(unsigned char const (*) [2])>:


// Configure the radio from a list of register/value pairs in readonly PROGMEM/Flash, terminating with an 0xff register value.
// NOTE: argument is not a pointer into SRAM, it is into PROGMEM!
// Could optimise case where multiple values are for successive RFM22 registers by using burst write.
void RFM22RegisterBlockSetup(const uint8_t registerValues[][2])
    31d4:	cf 93       	push	r28
    31d6:	df 93       	push	r29
    31d8:	ec 01       	movw	r28, r24
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    31da:	0e 94 91 16 	call	0x2d22	; 0x2d22 <powerUpSPIIfDisabled()>
  for( ; ; )
    {
    const uint8_t reg = pgm_read_byte(&(registerValues[0][0]));
    31de:	fe 01       	movw	r30, r28
    31e0:	94 91       	lpm	r25, Z+
    const uint8_t val = pgm_read_byte(&(registerValues[0][1]));
    31e2:	21 96       	adiw	r28, 0x01	; 1
    31e4:	fe 01       	movw	r30, r28
    31e6:	24 91       	lpm	r18, Z+
    31e8:	21 97       	sbiw	r28, 0x01	; 1
    if(0xff == reg) { break; }
    31ea:	9f 3f       	cpi	r25, 0xFF	; 255
    31ec:	69 f0       	breq	.+26     	; 0x3208 <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x34>

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    31ee:	2a 98       	cbi	0x05, 2	; 5
  _RFM22_wr(addr | 0x80); // Force to write.
    31f0:	90 68       	ori	r25, 0x80	; 128

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    31f2:	9e bd       	out	0x2e, r25	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    31f4:	0d b4       	in	r0, 0x2d	; 45
    31f6:	07 fe       	sbrs	r0, 7
    31f8:	fd cf       	rjmp	.-6      	; 0x31f4 <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x20>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    31fa:	2e bd       	out	0x2e, r18	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    31fc:	0d b4       	in	r0, 0x2d	; 45
    31fe:	07 fe       	sbrs	r0, 7
    3200:	fd cf       	rjmp	.-6      	; 0x31fc <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x28>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    3202:	2a 9a       	sbi	0x05, 2	; 5
    DEBUG_SERIAL_PRINT_FLASHSTRING(" = 0x");
    DEBUG_SERIAL_PRINTFMT(val, HEX);
    DEBUG_SERIAL_PRINTLN();
#endif
    _RFM22WriteReg8Bit(reg, val);
    ++registerValues;
    3204:	22 96       	adiw	r28, 0x02	; 2
    3206:	eb cf       	rjmp	.-42     	; 0x31de <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0xa>
    }
  if(neededEnable) { powerDownSPI(); }
    3208:	88 23       	and	r24, r24
    320a:	11 f0       	breq	.+4      	; 0x3210 <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x3c>
    320c:	0e 94 77 16 	call	0x2cee	; 0x2cee <powerDownSPI()>
  }
    3210:	df 91       	pop	r29
    3212:	cf 91       	pop	r28
    3214:	08 95       	ret

00003216 <RFM22PowerOnInit()>:
void RFM22PowerOnInit()
  {
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22 reset...");
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
    3216:	0e 94 91 16 	call	0x2d22	; 0x2d22 <powerUpSPIIfDisabled()>
    321a:	98 2f       	mov	r25, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    321c:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    321e:	87 e8       	ldi	r24, 0x87	; 135
    3220:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3222:	0d b4       	in	r0, 0x2d	; 45
    3224:	07 fe       	sbrs	r0, 7
    3226:	fd cf       	rjmp	.-6      	; 0x3222 <RFM22PowerOnInit()+0xc>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3228:	80 e8       	ldi	r24, 0x80	; 128
    322a:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    322c:	0d b4       	in	r0, 0x2d	; 45
    322e:	07 fe       	sbrs	r0, 7
    3230:	fd cf       	rjmp	.-6      	; 0x322c <RFM22PowerOnInit()+0x16>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    3232:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    3234:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3236:	87 e8       	ldi	r24, 0x87	; 135
    3238:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    323a:	0d b4       	in	r0, 0x2d	; 45
    323c:	07 fe       	sbrs	r0, 7
    323e:	fd cf       	rjmp	.-6      	; 0x323a <RFM22PowerOnInit()+0x24>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3240:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3242:	0d b4       	in	r0, 0x2d	; 45
    3244:	07 fe       	sbrs	r0, 7
    3246:	fd cf       	rjmp	.-6      	; 0x3242 <RFM22PowerOnInit()+0x2c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    3248:	2a 9a       	sbi	0x05, 2	; 5
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22 reset...");
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
  _RFM22WriteReg8Bit(RFM22REG_OP_CTRL1, RFM22REG_OP_CTRL1_SWRES);
  _RFM22ModeStandby();
  if(neededEnable) { powerDownSPI(); }
    324a:	99 23       	and	r25, r25
    324c:	11 f0       	breq	.+4      	; 0x3252 <RFM22PowerOnInit()+0x3c>
    324e:	0e 94 77 16 	call	0x2cee	; 0x2cee <powerDownSPI()>
    3252:	08 95       	ret

00003254 <RFM22RSSI()>:
  return(result);
  }

// Get current RSSI.
// Only valid when in RX mode.
uint8_t RFM22RSSI() 
    3254:	1f 93       	push	r17
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    3256:	0e 94 91 16 	call	0x2d22	; 0x2d22 <powerUpSPIIfDisabled()>
    325a:	98 2f       	mov	r25, r24

// Read from 8-bit register on RFM22.
// SPI must already be configured and running.
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
    325c:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    325e:	86 e2       	ldi	r24, 0x26	; 38
    3260:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3262:	0d b4       	in	r0, 0x2d	; 45
    3264:	07 fe       	sbrs	r0, 7
    3266:	fd cf       	rjmp	.-6      	; 0x3262 <RFM22RSSI()+0xe>
  return(SPDR);
    3268:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    326a:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    326c:	0d b4       	in	r0, 0x2d	; 45
    326e:	07 fe       	sbrs	r0, 7
    3270:	fd cf       	rjmp	.-6      	; 0x326c <RFM22RSSI()+0x18>
  return(SPDR);
    3272:	1e b5       	in	r17, 0x2e	; 46
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  const uint8_t result = _RFM22_io(0); // Dummy value...
  _RFM22_DESELECT();
    3274:	2a 9a       	sbi	0x05, 2	; 5
// Only valid when in RX mode.
uint8_t RFM22RSSI() 
  {
  const bool neededEnable = powerUpSPIIfDisabled();
  const uint8_t rssi = _RFM22ReadReg8Bit(RFM22REG_RSSI);
  if(neededEnable) { powerDownSPI(); }
    3276:	99 23       	and	r25, r25
    3278:	11 f0       	breq	.+4      	; 0x327e <RFM22RSSI()+0x2a>
    327a:	0e 94 77 16 	call	0x2cee	; 0x2cee <powerDownSPI()>
  return(rssi);
  }
    327e:	81 2f       	mov	r24, r17
    3280:	1f 91       	pop	r17
    3282:	08 95       	ret

00003284 <RFM22ReadStatusBoth()>:
  }

// Read status (both registers) and clear interrupts.
// Status register 1 is returned in the top 8 bits, register 2 in the bottom 8 bits.
// Zero indicates no pending interrupts or other status flags set.
uint16_t RFM22ReadStatusBoth()
    3284:	0f 93       	push	r16
    3286:	1f 93       	push	r17
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    3288:	0e 94 91 16 	call	0x2d22	; 0x2d22 <powerUpSPIIfDisabled()>
    328c:	98 2f       	mov	r25, r24

// Read from 16-bit big-endian register pair.
// The result has the first (lower-numbered) register in the most significant byte.
static uint16_t _RFM22ReadReg16Bit(const uint8_t addr)
{
  _RFM22_SELECT();
    328e:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    3290:	83 e0       	ldi	r24, 0x03	; 3
    3292:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3294:	0d b4       	in	r0, 0x2d	; 45
    3296:	07 fe       	sbrs	r0, 7
    3298:	fd cf       	rjmp	.-6      	; 0x3294 <RFM22ReadStatusBoth()+0x10>
  return(SPDR);
    329a:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    329c:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    329e:	0d b4       	in	r0, 0x2d	; 45
    32a0:	07 fe       	sbrs	r0, 7
    32a2:	fd cf       	rjmp	.-6      	; 0x329e <RFM22ReadStatusBoth()+0x1a>
  return(SPDR);
    32a4:	0e b5       	in	r16, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    32a6:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    32a8:	0d b4       	in	r0, 0x2d	; 45
    32aa:	07 fe       	sbrs	r0, 7
    32ac:	fd cf       	rjmp	.-6      	; 0x32a8 <RFM22ReadStatusBoth()+0x24>
  return(SPDR);
    32ae:	1e b5       	in	r17, 0x2e	; 46
{
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  uint16_t result = ((uint16_t)_RFM22_io(0)) << 8;
  result |= ((uint16_t)_RFM22_io(0));
  _RFM22_DESELECT();
    32b0:	2a 9a       	sbi	0x05, 2	; 5
// Zero indicates no pending interrupts or other status flags set.
uint16_t RFM22ReadStatusBoth()
  {
  const bool neededEnable = powerUpSPIIfDisabled();
  const uint16_t result = _RFM22ReadReg16Bit(RFM22REG_INT_STATUS1);
  if(neededEnable) { powerDownSPI(); }
    32b2:	99 23       	and	r25, r25
    32b4:	11 f0       	breq	.+4      	; 0x32ba <RFM22ReadStatusBoth()+0x36>
    32b6:	0e 94 77 16 	call	0x2cee	; 0x2cee <powerDownSPI()>
    32ba:	90 2f       	mov	r25, r16
    32bc:	80 e0       	ldi	r24, 0x00	; 0
    32be:	21 2f       	mov	r18, r17
    32c0:	30 e0       	ldi	r19, 0x00	; 0
    32c2:	28 2b       	or	r18, r24
    32c4:	39 2b       	or	r19, r25
  return(result);
  }
    32c6:	c9 01       	movw	r24, r18
    32c8:	1f 91       	pop	r17
    32ca:	0f 91       	pop	r16
    32cc:	08 95       	ret

000032ce <RFM22ModeStandbyAndClearState()>:
// Enter standby mode (consume least possible power but retain register contents).
// FIFO state and pending interrupts are cleared.
// Typical consumption in standby 450nA (cf 15nA when shut down, 8.5mA TUNE, 18--80mA RX/TX).
void RFM22ModeStandbyAndClearState()
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    32ce:	0e 94 91 16 	call	0x2d22	; 0x2d22 <powerUpSPIIfDisabled()>
    32d2:	98 2f       	mov	r25, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    32d4:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    32d6:	87 e8       	ldi	r24, 0x87	; 135
    32d8:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    32da:	0d b4       	in	r0, 0x2d	; 45
    32dc:	07 fe       	sbrs	r0, 7
    32de:	fd cf       	rjmp	.-6      	; 0x32da <RFM22ModeStandbyAndClearState()+0xc>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    32e0:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    32e2:	0d b4       	in	r0, 0x2d	; 45
    32e4:	07 fe       	sbrs	r0, 7
    32e6:	fd cf       	rjmp	.-6      	; 0x32e2 <RFM22ModeStandbyAndClearState()+0x14>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    32e8:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    32ea:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    32ec:	88 e8       	ldi	r24, 0x88	; 136
    32ee:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    32f0:	0d b4       	in	r0, 0x2d	; 45
    32f2:	07 fe       	sbrs	r0, 7
    32f4:	fd cf       	rjmp	.-6      	; 0x32f0 <RFM22ModeStandbyAndClearState()+0x22>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    32f6:	83 e0       	ldi	r24, 0x03	; 3
    32f8:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    32fa:	0d b4       	in	r0, 0x2d	; 45
    32fc:	07 fe       	sbrs	r0, 7
    32fe:	fd cf       	rjmp	.-6      	; 0x32fa <RFM22ModeStandbyAndClearState()+0x2c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    3300:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    3302:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3304:	88 e8       	ldi	r24, 0x88	; 136
    3306:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3308:	0d b4       	in	r0, 0x2d	; 45
    330a:	07 fe       	sbrs	r0, 7
    330c:	fd cf       	rjmp	.-6      	; 0x3308 <RFM22ModeStandbyAndClearState()+0x3a>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    330e:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3310:	0d b4       	in	r0, 0x2d	; 45
    3312:	07 fe       	sbrs	r0, 7
    3314:	fd cf       	rjmp	.-6      	; 0x3310 <RFM22ModeStandbyAndClearState()+0x42>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    3316:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    3318:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    331a:	85 e8       	ldi	r24, 0x85	; 133
    331c:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    331e:	0d b4       	in	r0, 0x2d	; 45
    3320:	07 fe       	sbrs	r0, 7
    3322:	fd cf       	rjmp	.-6      	; 0x331e <RFM22ModeStandbyAndClearState()+0x50>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3324:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3326:	0d b4       	in	r0, 0x2d	; 45
    3328:	07 fe       	sbrs	r0, 7
    332a:	fd cf       	rjmp	.-6      	; 0x3326 <RFM22ModeStandbyAndClearState()+0x58>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    332c:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    332e:	0d b4       	in	r0, 0x2d	; 45
    3330:	07 fe       	sbrs	r0, 7
    3332:	fd cf       	rjmp	.-6      	; 0x332e <RFM22ModeStandbyAndClearState()+0x60>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    3334:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    3336:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3338:	83 e8       	ldi	r24, 0x83	; 131
    333a:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    333c:	0d b4       	in	r0, 0x2d	; 45
    333e:	07 fe       	sbrs	r0, 7
    3340:	fd cf       	rjmp	.-6      	; 0x333c <RFM22ModeStandbyAndClearState()+0x6e>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3342:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3344:	0d b4       	in	r0, 0x2d	; 45
    3346:	07 fe       	sbrs	r0, 7
    3348:	fd cf       	rjmp	.-6      	; 0x3344 <RFM22ModeStandbyAndClearState()+0x76>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    334a:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    334c:	0d b4       	in	r0, 0x2d	; 45
    334e:	07 fe       	sbrs	r0, 7
    3350:	fd cf       	rjmp	.-6      	; 0x334c <RFM22ModeStandbyAndClearState()+0x7e>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    3352:	2a 9a       	sbi	0x05, 2	; 5
//  _RFM22WriteReg8Bit(RFM22REG_INT_ENABLE2, 0); // TODO: combine in burst write with previous...
  _RFM22WriteReg16Bit0(RFM22REG_INT_ENABLE1);
  // Clear any interrupts already/still pending...
  _RFM22ClearInterrupts();  
  //_RFM22WriteReg8Bit(0xd, 0x1f); // Drive GPIO2 to ground as output... (Move to general register settings.)
  if(neededEnable) { powerDownSPI(); }
    3354:	99 23       	and	r25, r25
    3356:	11 f0       	breq	.+4      	; 0x335c <RFM22ModeStandbyAndClearState()+0x8e>
    3358:	0e 94 77 16 	call	0x2cee	; 0x2cee <powerDownSPI()>
    335c:	08 95       	ret

0000335e <RFM22CheckConnected()>:
  _RFM22ModeStandby();
  if(neededEnable) { powerDownSPI(); }
  }

// Returns true iff RFM22 (or RFM23) appears to be correctly connected.
bool RFM22CheckConnected()
    335e:	0f 93       	push	r16
    3360:	1f 93       	push	r17
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    3362:	0e 94 91 16 	call	0x2d22	; 0x2d22 <powerUpSPIIfDisabled()>
    3366:	08 2f       	mov	r16, r24

// Read from 8-bit register on RFM22.
// SPI must already be configured and running.
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
    3368:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    336a:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    336c:	0d b4       	in	r0, 0x2d	; 45
    336e:	07 fe       	sbrs	r0, 7
    3370:	fd cf       	rjmp	.-6      	; 0x336c <RFM22CheckConnected()+0xe>
  return(SPDR);
    3372:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    3374:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3376:	0d b4       	in	r0, 0x2d	; 45
    3378:	07 fe       	sbrs	r0, 7
    337a:	fd cf       	rjmp	.-6      	; 0x3376 <RFM22CheckConnected()+0x18>
  return(SPDR);
    337c:	8e b5       	in	r24, 0x2e	; 46
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  const uint8_t result = _RFM22_io(0); // Dummy value...
  _RFM22_DESELECT();
    337e:	2a 9a       	sbi	0x05, 2	; 5
bool RFM22CheckConnected()
  {
  const bool neededEnable = powerUpSPIIfDisabled();
  bool isOK = false;
  const uint8_t rType = _RFM22ReadReg8Bit(0); // May read as 0 if not connected at all.
  if(RFM22_SUPPORTED_DEVICE_TYPE == rType)
    3380:	88 30       	cpi	r24, 0x08	; 8
    3382:	89 f4       	brne	.+34     	; 0x33a6 <RFM22CheckConnected()+0x48>

// Read from 8-bit register on RFM22.
// SPI must already be configured and running.
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
    3384:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    3386:	81 e0       	ldi	r24, 0x01	; 1
    3388:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    338a:	0d b4       	in	r0, 0x2d	; 45
    338c:	07 fe       	sbrs	r0, 7
    338e:	fd cf       	rjmp	.-6      	; 0x338a <RFM22CheckConnected()+0x2c>
  return(SPDR);
    3390:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    3392:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3394:	0d b4       	in	r0, 0x2d	; 45
    3396:	07 fe       	sbrs	r0, 7
    3398:	fd cf       	rjmp	.-6      	; 0x3394 <RFM22CheckConnected()+0x36>
  return(SPDR);
    339a:	8e b5       	in	r24, 0x2e	; 46
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  const uint8_t result = _RFM22_io(0); // Dummy value...
  _RFM22_DESELECT();
    339c:	2a 9a       	sbi	0x05, 2	; 5
  bool isOK = false;
  const uint8_t rType = _RFM22ReadReg8Bit(0); // May read as 0 if not connected at all.
  if(RFM22_SUPPORTED_DEVICE_TYPE == rType)
    {
    const uint8_t rVersion = _RFM22ReadReg8Bit(1);
    if(RFM22_SUPPORTED_DEVICE_VERSION == rVersion)
    339e:	86 30       	cpi	r24, 0x06	; 6
    33a0:	11 f4       	brne	.+4      	; 0x33a6 <RFM22CheckConnected()+0x48>
    33a2:	11 e0       	ldi	r17, 0x01	; 1
    33a4:	05 c0       	rjmp	.+10     	; 0x33b0 <RFM22CheckConnected()+0x52>
    DEBUG_SERIAL_PRINTFMT(rType, HEX);
    DEBUG_SERIAL_PRINTLN();
    }
#endif
#if 1 && defined(DEBUG)
  if(!isOK) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22 bad"); }
    33a6:	87 e2       	ldi	r24, 0x27	; 39
    33a8:	91 e0       	ldi	r25, 0x01	; 1
    33aa:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <serialPrintlnAndFlush(__FlashStringHelper const*)>
    33ae:	10 e0       	ldi	r17, 0x00	; 0
#endif
  if(neededEnable) { powerDownSPI(); }
    33b0:	00 23       	and	r16, r16
    33b2:	11 f0       	breq	.+4      	; 0x33b8 <RFM22CheckConnected()+0x5a>
    33b4:	0e 94 77 16 	call	0x2cee	; 0x2cee <powerDownSPI()>
  return(isOK);
  }
    33b8:	81 2f       	mov	r24, r17
    33ba:	1f 91       	pop	r17
    33bc:	0f 91       	pop	r16
    33be:	08 95       	ret

000033c0 <eeprom_read_byte>:


/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
    33c0:	9c 01       	movw	r18, r24
{
    do {} while (!eeprom_is_ready ());
    33c2:	f9 99       	sbic	0x1f, 1	; 31
    33c4:	fe cf       	rjmp	.-4      	; 0x33c2 <eeprom_read_byte+0x2>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    33c6:	32 bd       	out	0x22, r19	; 34
    33c8:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    33ca:	f8 9a       	sbi	0x1f, 0	; 31
    33cc:	80 b5       	in	r24, 0x20	; 32
    return __result;
}
    33ce:	08 95       	ret

000033d0 <eeprom_write_byte>:
}

/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
    33d0:	9c 01       	movw	r18, r24
{
    do {} while (!eeprom_is_ready ());
    33d2:	f9 99       	sbic	0x1f, 1	; 31
    33d4:	fe cf       	rjmp	.-4      	; 0x33d2 <eeprom_write_byte+0x2>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    33d6:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    33d8:	32 bd       	out	0x22, r19	; 34
    33da:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
    33dc:	60 bd       	out	0x20, r22	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    33de:	0f b6       	in	r0, 0x3f	; 63
    33e0:	f8 94       	cli
    33e2:	fa 9a       	sbi	0x1f, 2	; 31
    33e4:	f9 9a       	sbi	0x1f, 1	; 31
    33e6:	0f be       	out	0x3f, r0	; 63
}
    33e8:	08 95       	ret

000033ea <getMinutesSinceMidnightLT()>:
// Thread-safe and ISR-safe.
#ifndef getMinutesSinceMidnightLT
uint_least16_t getMinutesSinceMidnightLT()
  {
  uint_least16_t result;
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    33ea:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    33ec:	f8 94       	cli
    { result = _minutesSinceMidnightLT; }
    33ee:	20 91 e0 02 	lds	r18, 0x02E0
    33f2:	30 91 e1 02 	lds	r19, 0x02E1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    33f6:	8f bf       	out	0x3f, r24	; 63
  return(result);
  }
    33f8:	c9 01       	movw	r24, r18
    33fa:	08 95       	ret

000033fc <getHoursLT()>:
// Thread-safe and ISR-safe.
#ifndef getMinutesSinceMidnightLT
uint_least16_t getMinutesSinceMidnightLT()
  {
  uint_least16_t result;
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    33fc:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    33fe:	f8 94       	cli
    { result = _minutesSinceMidnightLT; }
    3400:	80 91 e0 02 	lds	r24, 0x02E0
    3404:	90 91 e1 02 	lds	r25, 0x02E1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3408:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    340a:	6c e3       	ldi	r22, 0x3C	; 60
    340c:	70 e0       	ldi	r23, 0x00	; 0
    340e:	0e 94 f9 3b 	call	0x77f2	; 0x77f2 <__udivmodhi4>
    3412:	86 2f       	mov	r24, r22
uint_least8_t getMinutesLT() { return(getMinutesSinceMidnightLT() % 60); }

// Get local time hours from RTC [0,23].
// Relatively slow.
// Thread-safe and ISR-safe.
uint_least8_t getHoursLT() { return(getMinutesSinceMidnightLT() / 60); }
    3414:	08 95       	ret

00003416 <restoreRTC()>:

// Restore software RTC information from non-volatile (EEPROM) store, if possible.
// Returns true if the persisted data seemed valid and was restored, in full or part.
// To void on average using 15/2 minutes at each reset/restart,
// this starts the internal time a little over half way into the restored 15-minute slot.
bool restoreRTC()
    3416:	1f 93       	push	r17
  {
  uint8_t persistedValue;
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    3418:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    341a:	f8 94       	cli
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    341c:	88 e0       	ldi	r24, 0x08	; 8
    341e:	90 e0       	ldi	r25, 0x00	; 0
    3420:	60 ee       	ldi	r22, 0xE0	; 224
    3422:	79 e1       	ldi	r23, 0x19	; 25
    3424:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <__eerd_word>
    {
    // Restore the persisted days, though ignore if apparently unset (all 1s).
    const uint16_t days = eeprom_read_word((uint16_t*)EE_START_RTC_DAY_PERSIST);
    if(days != (uint16_t)~0U) { _daysSince1999LT = days; }
    3428:	2f ef       	ldi	r18, 0xFF	; 255
    342a:	8f 3f       	cpi	r24, 0xFF	; 255
    342c:	92 07       	cpc	r25, r18
    342e:	21 f0       	breq	.+8      	; 0x3438 <restoreRTC()+0x22>
    3430:	90 93 e3 02 	sts	0x02E3, r25
    3434:	80 93 e2 02 	sts	0x02E2, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    3438:	f9 99       	sbic	0x1f, 1	; 31
    343a:	fe cf       	rjmp	.-4      	; 0x3438 <restoreRTC()+0x22>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    343c:	8a e0       	ldi	r24, 0x0A	; 10
    343e:	90 e0       	ldi	r25, 0x00	; 0
    3440:	92 bd       	out	0x22, r25	; 34
    3442:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    3444:	f8 9a       	sbi	0x1f, 0	; 31
    3446:	60 b5       	in	r22, 0x20	; 32
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3448:	1f bf       	out	0x3f, r17	; 63
    // Now recover persisted HH:MM value.
    persistedValue = eeprom_read_byte((uint8_t*)EE_START_RTC_HHMM_PERSIST);
    }

  // Abort if value clearly invalid, eg likely an unprogrammed (0xff) byte.
  if(persistedValue >= (24 << 3)) { return(false); }
    344a:	60 3c       	cpi	r22, 0xC0	; 192
    344c:	90 f5       	brcc	.+100    	; 0x34b2 <restoreRTC()+0x9c>

  uint_least16_t minutesSinceMidnight = (persistedValue >> 3) * 60;
    344e:	86 2f       	mov	r24, r22
    3450:	90 e0       	ldi	r25, 0x00	; 0
    3452:	23 e0       	ldi	r18, 0x03	; 3
    3454:	95 95       	asr	r25
    3456:	87 95       	ror	r24
    3458:	2a 95       	dec	r18
    345a:	e1 f7       	brne	.-8      	; 0x3454 <restoreRTC()+0x3e>
    345c:	2c e3       	ldi	r18, 0x3C	; 60
    345e:	30 e0       	ldi	r19, 0x00	; 0
    3460:	82 9f       	mul	r24, r18
    3462:	a0 01       	movw	r20, r0
    3464:	83 9f       	mul	r24, r19
    3466:	50 0d       	add	r21, r0
    3468:	92 9f       	mul	r25, r18
    346a:	50 0d       	add	r21, r0
    346c:	11 24       	eor	r1, r1
  minutesSinceMidnight += 8; // Start just over half-way into one quantum to minimise average time lost on restart.
    346e:	9a 01       	movw	r18, r20
    3470:	28 5f       	subi	r18, 0xF8	; 248
    3472:	3f 4f       	sbci	r19, 0xFF	; 255
  const uint8_t lowBits = persistedValue & 7; // Extract quarter-hour bits.
  switch(lowBits)
    3474:	86 2f       	mov	r24, r22
    3476:	87 70       	andi	r24, 0x07	; 7
    3478:	81 30       	cpi	r24, 0x01	; 1
    347a:	59 f0       	breq	.+22     	; 0x3492 <restoreRTC()+0x7c>
    347c:	81 30       	cpi	r24, 0x01	; 1
    347e:	28 f0       	brcs	.+10     	; 0x348a <restoreRTC()+0x74>
    3480:	83 30       	cpi	r24, 0x03	; 3
    3482:	59 f0       	breq	.+22     	; 0x349a <restoreRTC()+0x84>
    3484:	87 30       	cpi	r24, 0x07	; 7
    3486:	a9 f4       	brne	.+42     	; 0x34b2 <restoreRTC()+0x9c>
    3488:	0b c0       	rjmp	.+22     	; 0x34a0 <restoreRTC()+0x8a>
    {
    case 0: minutesSinceMidnight += 45; break;
    348a:	9a 01       	movw	r18, r20
    348c:	2b 5c       	subi	r18, 0xCB	; 203
    348e:	3f 4f       	sbci	r19, 0xFF	; 255
    3490:	07 c0       	rjmp	.+14     	; 0x34a0 <restoreRTC()+0x8a>
    case 1: minutesSinceMidnight += 30; break;
    3492:	9a 01       	movw	r18, r20
    3494:	2a 5d       	subi	r18, 0xDA	; 218
    3496:	3f 4f       	sbci	r19, 0xFF	; 255
    3498:	03 c0       	rjmp	.+6      	; 0x34a0 <restoreRTC()+0x8a>
    case 3: minutesSinceMidnight += 15; break;
    349a:	9a 01       	movw	r18, r20
    349c:	29 5e       	subi	r18, 0xE9	; 233
    349e:	3f 4f       	sbci	r19, 0xFF	; 255
    default: return(false); // Invalid bit pattern: abort.
    }

  // Set the hours and minutes (atomically).
  // Deliberately leave the seconds unset to avoid units becoming too synchronised with one another, increasing TX collisions, etc.
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    34a0:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    34a2:	f8 94       	cli
    { _minutesSinceMidnightLT = minutesSinceMidnight; }
    34a4:	30 93 e1 02 	sts	0x02E1, r19
    34a8:	20 93 e0 02 	sts	0x02E0, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    34ac:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
    34ae:	81 e0       	ldi	r24, 0x01	; 1
    34b0:	01 c0       	rjmp	.+2      	; 0x34b4 <restoreRTC()+0x9e>

  return(true);
    34b2:	80 e0       	ldi	r24, 0x00	; 0
  }
    34b4:	1f 91       	pop	r17
    34b6:	08 95       	ret

000034b8 <persistRTC()>:
// but enough to help avoid the clock slipping too much during (say) a battery change.
// There is no point calling this more than (say) once per minute,
// though it will simply return relatively quickly from redundant calls.
// The RTC data is stored so as not to wear out AVR EEPROM for at least several years.
// IMPLEMENTATION OF THIS AND THE eeprom_smart_xxx_byte() ROUTINES IS CRITICAL TO PERFORMANCE AND LONGEVITY.
void persistRTC()
    34b8:	1f 93       	push	r17
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    34ba:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    34bc:	f8 94       	cli
    {
    uint8_t quarterHours = (_minutesSinceMidnightLT / 15);
    34be:	80 91 e0 02 	lds	r24, 0x02E0
    34c2:	90 91 e1 02 	lds	r25, 0x02E1
    34c6:	6f e0       	ldi	r22, 0x0F	; 15
    34c8:	70 e0       	ldi	r23, 0x00	; 0
    34ca:	0e 94 f9 3b 	call	0x77f2	; 0x77f2 <__udivmodhi4>
    uint8_t targetByte = (quarterHours << 1) & ~7U; // Bit pattern now hhhhh000 where hhhhh is whole hours [0,23].
    34ce:	46 2f       	mov	r20, r22
    34d0:	44 0f       	add	r20, r20
    34d2:	48 7f       	andi	r20, 0xF8	; 248
    switch(quarterHours & 3)
    34d4:	70 e0       	ldi	r23, 0x00	; 0
    34d6:	63 70       	andi	r22, 0x03	; 3
    34d8:	70 70       	andi	r23, 0x00	; 0
    34da:	61 30       	cpi	r22, 0x01	; 1
    34dc:	71 05       	cpc	r23, r1
    34de:	39 f0       	breq	.+14     	; 0x34ee <persistRTC()+0x36>
    34e0:	62 30       	cpi	r22, 0x02	; 2
    34e2:	71 05       	cpc	r23, r1
    34e4:	31 f0       	breq	.+12     	; 0x34f2 <persistRTC()+0x3a>
    34e6:	67 2b       	or	r22, r23
    34e8:	29 f4       	brne	.+10     	; 0x34f4 <persistRTC()+0x3c>
      {
      case 0: targetByte |= 7; break;
    34ea:	47 60       	ori	r20, 0x07	; 7
    34ec:	03 c0       	rjmp	.+6      	; 0x34f4 <persistRTC()+0x3c>
      case 1: targetByte |= 3; break;
    34ee:	43 60       	ori	r20, 0x03	; 3
    34f0:	01 c0       	rjmp	.+2      	; 0x34f4 <persistRTC()+0x3c>
      case 2: targetByte |= 1; break;
    34f2:	41 60       	ori	r20, 0x01	; 1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    34f4:	f9 99       	sbic	0x1f, 1	; 31
    34f6:	fe cf       	rjmp	.-4      	; 0x34f4 <persistRTC()+0x3c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    34f8:	8a e0       	ldi	r24, 0x0A	; 10
    34fa:	90 e0       	ldi	r25, 0x00	; 0
    34fc:	92 bd       	out	0x22, r25	; 34
    34fe:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    3500:	f8 9a       	sbi	0x1f, 0	; 31
    3502:	80 b5       	in	r24, 0x20	; 32
      }

    // Update if target HH:MM not already correct.
    const uint8_t persistedValue = eeprom_read_byte((uint8_t*)EE_START_RTC_HHMM_PERSIST);
    if(persistedValue != targetByte)
    3504:	84 17       	cp	r24, r20
    3506:	91 f1       	breq	.+100    	; 0x356c <persistRTC()+0xb4>
      {
      // Where it is not possible to get the target value just by setting bits to 0,
      // eg for a new hour (ie completely different hour to that in EEPROM and on roll to new hour),
      // then do a full erase/write...
      //if((0 == quarterHours) || ((persistedValue & 0xf8) != (targetByte & 0xf8)))
      if(targetByte != (persistedValue & targetByte))
    3508:	24 2f       	mov	r18, r20
    350a:	30 e0       	ldi	r19, 0x00	; 0
    350c:	90 e0       	ldi	r25, 0x00	; 0
    350e:	82 23       	and	r24, r18
    3510:	93 23       	and	r25, r19
    3512:	28 17       	cp	r18, r24
    3514:	39 07       	cpc	r19, r25
    3516:	71 f0       	breq	.+28     	; 0x3534 <persistRTC()+0x7c>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    3518:	f9 99       	sbic	0x1f, 1	; 31
    351a:	fe cf       	rjmp	.-4      	; 0x3518 <persistRTC()+0x60>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    351c:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    351e:	8a e0       	ldi	r24, 0x0A	; 10
    3520:	90 e0       	ldi	r25, 0x00	; 0
    3522:	92 bd       	out	0x22, r25	; 34
    3524:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    3526:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    3528:	0f b6       	in	r0, 0x3f	; 63
    352a:	f8 94       	cli
    352c:	fa 9a       	sbi	0x1f, 2	; 31
    352e:	f9 9a       	sbi	0x1f, 1	; 31
    3530:	0f be       	out	0x3f, r0	; 63
    3532:	05 c0       	rjmp	.+10     	; 0x353e <persistRTC()+0x86>
        { eeprom_write_byte((uint8_t*)EE_START_RTC_HHMM_PERSIST, targetByte); }
      // Else do a write without erase, typically clearing the quarter bits one at a time...
      else
        { eeprom_smart_clear_bits((uint8_t*)EE_START_RTC_HHMM_PERSIST, targetByte); }
    3534:	8a e0       	ldi	r24, 0x0A	; 10
    3536:	90 e0       	ldi	r25, 0x00	; 0
    3538:	64 2f       	mov	r22, r20
    353a:	0e 94 c8 08 	call	0x1190	; 0x1190 <eeprom_smart_clear_bits(unsigned char*, unsigned char)>
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    353e:	88 e0       	ldi	r24, 0x08	; 8
    3540:	90 e0       	ldi	r25, 0x00	; 0
    3542:	60 ee       	ldi	r22, 0xE0	; 224
    3544:	79 e1       	ldi	r23, 0x19	; 25
    3546:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <__eerd_word>

      // Also persist the current days if not up to date.
      const uint16_t days = eeprom_read_word((uint16_t*)EE_START_RTC_DAY_PERSIST);
      if(days != _daysSince1999LT) { eeprom_write_word((uint16_t*)EE_START_RTC_DAY_PERSIST, _daysSince1999LT); }
    354a:	20 91 e2 02 	lds	r18, 0x02E2
    354e:	30 91 e3 02 	lds	r19, 0x02E3
    3552:	82 17       	cp	r24, r18
    3554:	93 07       	cpc	r25, r19
    3556:	51 f0       	breq	.+20     	; 0x356c <persistRTC()+0xb4>
    3558:	60 91 e2 02 	lds	r22, 0x02E2
    355c:	70 91 e3 02 	lds	r23, 0x02E3
    Write a word \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_word (uint16_t *__p, uint16_t __value)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    __eewr_word (__p, __value, eeprom_write_byte);
    3560:	88 e0       	ldi	r24, 0x08	; 8
    3562:	90 e0       	ldi	r25, 0x00	; 0
    3564:	48 ee       	ldi	r20, 0xE8	; 232
    3566:	59 e1       	ldi	r21, 0x19	; 25
    3568:	0e 94 e7 02 	call	0x5ce	; 0x5ce <__eewr_word>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    356c:	1f bf       	out	0x3f, r17	; 63
      }
    }
  }
    356e:	1f 91       	pop	r17
    3570:	08 95       	ret

00003572 <_TEST_set_schedule_override(_TEST_schedule_override)>:
// Support for unit tests to force particular apparent schedule state.
// Current override state; 0 (default) means no override.
static _TEST_schedule_override _soUT_override;
// Set the override value (or remove the override).
void _TEST_set_schedule_override(const _TEST_schedule_override override)
  { _soUT_override = override; }
    3572:	90 93 e5 02 	sts	0x02E5, r25
    3576:	80 93 e4 02 	sts	0x02E4, r24
    357a:	08 95       	ret

0000357c <getSimpleScheduleOn(unsigned char)>:
// Will usually include a pre-warm time before the actual time set.
// Note that unprogrammed EEPROM value will result in invalid time, ie schedule not set.
//   * which  schedule number, counting from 0
uint_least16_t getSimpleScheduleOn(const uint8_t which)
  {
  if(which >= MAX_SIMPLE_SCHEDULES) { return(~0); } // Invalid schedule number.
    357c:	82 30       	cpi	r24, 0x02	; 2
    357e:	d0 f4       	brcc	.+52     	; 0x35b4 <getSimpleScheduleOn(unsigned char)+0x38>
  uint8_t startMM;
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    3580:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3582:	f8 94       	cli
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    3584:	f9 99       	sbic	0x1f, 1	; 31
    3586:	fe cf       	rjmp	.-4      	; 0x3584 <getSimpleScheduleOn(unsigned char)+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    3588:	90 e0       	ldi	r25, 0x00	; 0
    358a:	0c 96       	adiw	r24, 0x0c	; 12
    358c:	92 bd       	out	0x22, r25	; 34
    358e:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    3590:	f8 9a       	sbi	0x1f, 0	; 31
    3592:	90 b5       	in	r25, 0x20	; 32
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3594:	2f bf       	out	0x3f, r18	; 63
    { startMM = eeprom_read_byte((uint8_t*)(EE_START_SIMPLE_SCHEDULE0_ON + which)); }
  if(startMM > MAX_COMPRESSED_MINS_AFTER_MIDNIGHT) { return(~0); } // No schedule set.
    3596:	90 3f       	cpi	r25, 0xF0	; 240
    3598:	68 f4       	brcc	.+26     	; 0x35b4 <getSimpleScheduleOn(unsigned char)+0x38>
  // Compute start time from stored shedule value.
  uint_least16_t startTime = SIMPLE_SCHEDULE_GRANULARITY_MINS * startMM;
    359a:	86 e0       	ldi	r24, 0x06	; 6
    359c:	98 9f       	mul	r25, r24
    359e:	c0 01       	movw	r24, r0
    35a0:	11 24       	eor	r1, r1
  const uint8_t windBackM = PREWARM_MINS; // Wind back start time by about 25% of full interval.
  if(windBackM > startTime) { startTime += MINS_PER_DAY; } // Allow for wrap-around at midnight.
    35a2:	8f 30       	cpi	r24, 0x0F	; 15
    35a4:	91 05       	cpc	r25, r1
    35a6:	10 f4       	brcc	.+4      	; 0x35ac <getSimpleScheduleOn(unsigned char)+0x30>
    35a8:	80 56       	subi	r24, 0x60	; 96
    35aa:	9a 4f       	sbci	r25, 0xFA	; 250
  startTime -= windBackM;
    35ac:	9c 01       	movw	r18, r24
    35ae:	2f 50       	subi	r18, 0x0F	; 15
    35b0:	30 40       	sbci	r19, 0x00	; 0
    35b2:	02 c0       	rjmp	.+4      	; 0x35b8 <getSimpleScheduleOn(unsigned char)+0x3c>
  return(startTime);
    35b4:	2f ef       	ldi	r18, 0xFF	; 255
    35b6:	3f ef       	ldi	r19, 0xFF	; 255
  }
    35b8:	c9 01       	movw	r24, r18
    35ba:	08 95       	ret

000035bc <isAnySimpleScheduleSet()>:
// In unit-test override mode is true for soon/now, false for off.
bool isAnySimpleScheduleSet()
  {
#if defined(UNIT_TESTS)
  // Special behaviour for unit tests.
  switch(_soUT_override)
    35bc:	80 91 e4 02 	lds	r24, 0x02E4
    35c0:	90 91 e5 02 	lds	r25, 0x02E5
    35c4:	81 30       	cpi	r24, 0x01	; 1
    35c6:	91 05       	cpc	r25, r1
    35c8:	31 f0       	breq	.+12     	; 0x35d6 <isAnySimpleScheduleSet()+0x1a>
    35ca:	81 30       	cpi	r24, 0x01	; 1
    35cc:	91 05       	cpc	r25, r1
    35ce:	2c f0       	brlt	.+10     	; 0x35da <isAnySimpleScheduleSet()+0x1e>
    35d0:	04 97       	sbiw	r24, 0x04	; 4
    35d2:	1c f4       	brge	.+6      	; 0x35da <isAnySimpleScheduleSet()+0x1e>
    35d4:	0f c0       	rjmp	.+30     	; 0x35f4 <isAnySimpleScheduleSet()+0x38>
    35d6:	80 e0       	ldi	r24, 0x00	; 0
    35d8:	08 95       	ret
    case _soUT_soon: return(true);
    case _soUT_now: return(true);
    }
#endif

  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    35da:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    35dc:	f8 94       	cli
    35de:	2c e0       	ldi	r18, 0x0C	; 12
    35e0:	30 e0       	ldi	r19, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    35e2:	f9 99       	sbic	0x1f, 1	; 31
    35e4:	fe cf       	rjmp	.-4      	; 0x35e2 <isAnySimpleScheduleSet()+0x26>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    35e6:	32 bd       	out	0x22, r19	; 34
    35e8:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    35ea:	f8 9a       	sbi	0x1f, 0	; 31
    35ec:	80 b5       	in	r24, 0x20	; 32
    {
    for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
      {
      if(eeprom_read_byte((uint8_t*)(EE_START_SIMPLE_SCHEDULE0_ON + which)) <= MAX_COMPRESSED_MINS_AFTER_MIDNIGHT)
    35ee:	80 3f       	cpi	r24, 0xF0	; 240
    35f0:	18 f4       	brcc	.+6      	; 0x35f8 <isAnySimpleScheduleSet()+0x3c>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    35f2:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    35f4:	81 e0       	ldi	r24, 0x01	; 1
    35f6:	08 95       	ret
    35f8:	2f 5f       	subi	r18, 0xFF	; 255
    35fa:	3f 4f       	sbci	r19, 0xFF	; 255
    }
#endif

  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    {
    for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    35fc:	2e 30       	cpi	r18, 0x0E	; 14
    35fe:	31 05       	cpc	r19, r1
    3600:	81 f7       	brne	.-32     	; 0x35e2 <isAnySimpleScheduleSet()+0x26>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3602:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    3604:	80 e0       	ldi	r24, 0x00	; 0
      if(eeprom_read_byte((uint8_t*)(EE_START_SIMPLE_SCHEDULE0_ON + which)) <= MAX_COMPRESSED_MINS_AFTER_MIDNIGHT)
        { return(true); }
      }
    }
  return(false);
  }
    3606:	08 95       	ret

00003608 <getSimpleScheduleOff(unsigned char)>:
  }

// Get the simple/primary schedule off time, as minutes after midnight [0,1439]; invalid (eg ~0) if none set.
// This is based on specifed start time and some element of the current eco/comfort bias.
//   * which  schedule number, counting from 0
uint_least16_t getSimpleScheduleOff(const uint8_t which)
    3608:	cf 93       	push	r28
    360a:	df 93       	push	r29
  {
  const uint_least16_t startMins = getSimpleScheduleOn(which);
    360c:	0e 94 be 1a 	call	0x357c	; 0x357c <getSimpleScheduleOn(unsigned char)>
    3610:	ec 01       	movw	r28, r24
  if(startMins == (uint_least16_t)~0) { return(~0); }
    3612:	8f ef       	ldi	r24, 0xFF	; 255
    3614:	cf 3f       	cpi	r28, 0xFF	; 255
    3616:	d8 07       	cpc	r29, r24
    3618:	19 f4       	brne	.+6      	; 0x3620 <getSimpleScheduleOff(unsigned char)+0x18>
    361a:	2f ef       	ldi	r18, 0xFF	; 255
    361c:	3f ef       	ldi	r19, 0xFF	; 255
    361e:	16 c0       	rjmp	.+44     	; 0x364c <getSimpleScheduleOff(unsigned char)+0x44>
  {
//  // Simple and fast binary choice.
//  return(hasEcoBias() ? LEARNED_ON_PERIOD_M : LEARNED_ON_PERIOD_COMFORT_M);

  // Three-way split based on current WARM target temperature.
  const uint8_t wt = getWARMTargetC();
    3620:	0e 94 5e 03 	call	0x6bc	; 0x6bc <getWARMTargetC()>
  if(isEcoTemperature(wt)) { return(LEARNED_ON_PERIOD_M); }
    3624:	82 31       	cpi	r24, 0x12	; 18
    3626:	10 f4       	brcc	.+4      	; 0x362c <getSimpleScheduleOff(unsigned char)+0x24>
    3628:	8c e3       	ldi	r24, 0x3C	; 60
    362a:	05 c0       	rjmp	.+10     	; 0x3636 <getSimpleScheduleOff(unsigned char)+0x2e>
  else if(isComfortTemperature(wt)) { return(LEARNED_ON_PERIOD_COMFORT_M); }
    362c:	85 31       	cpi	r24, 0x15	; 21
    362e:	10 f4       	brcc	.+4      	; 0x3634 <getSimpleScheduleOff(unsigned char)+0x2c>
    3630:	8a e5       	ldi	r24, 0x5A	; 90
    3632:	01 c0       	rjmp	.+2      	; 0x3636 <getSimpleScheduleOff(unsigned char)+0x2e>
    3634:	88 e7       	ldi	r24, 0x78	; 120
uint_least16_t getSimpleScheduleOff(const uint8_t which)
  {
  const uint_least16_t startMins = getSimpleScheduleOn(which);
  if(startMins == (uint_least16_t)~0) { return(~0); }
  // Compute end from start, allowing for wrap-around at midnight.
  uint_least16_t endTime = startMins + PREWARM_MINS + onTime();
    3636:	9e 01       	movw	r18, r28
    3638:	21 5f       	subi	r18, 0xF1	; 241
    363a:	3f 4f       	sbci	r19, 0xFF	; 255
    363c:	28 0f       	add	r18, r24
    363e:	31 1d       	adc	r19, r1
  if(endTime >= MINS_PER_DAY) { endTime -= MINS_PER_DAY; } // Allow for wrap-around at midnight.
    3640:	85 e0       	ldi	r24, 0x05	; 5
    3642:	20 3a       	cpi	r18, 0xA0	; 160
    3644:	38 07       	cpc	r19, r24
    3646:	10 f0       	brcs	.+4      	; 0x364c <getSimpleScheduleOff(unsigned char)+0x44>
    3648:	20 5a       	subi	r18, 0xA0	; 160
    364a:	35 40       	sbci	r19, 0x05	; 5
  return(endTime);
  }
    364c:	c9 01       	movw	r24, r18
    364e:	df 91       	pop	r29
    3650:	cf 91       	pop	r28
    3652:	08 95       	ret

00003654 <isAnyScheduleOnWARMSoon()>:
// True iff any schedule is due 'on'/'WARM' soon even when schedules overlap.
// May be relatively slow/expensive.
// Can be used to allow room to be brought up to at least a set-back temperature
// if very cold when a WARM period is due soon (to help ensure that WARM target is met on time).
// In unit-test override mode is true for soon, false for now/off.
bool isAnyScheduleOnWARMSoon()
    3654:	0f 93       	push	r16
    3656:	1f 93       	push	r17
    3658:	cf 93       	push	r28
    365a:	df 93       	push	r29
  {
#if defined(UNIT_TESTS)
  // Special behaviour for unit tests.
  switch(_soUT_override)
    365c:	80 91 e4 02 	lds	r24, 0x02E4
    3660:	90 91 e5 02 	lds	r25, 0x02E5
    3664:	82 30       	cpi	r24, 0x02	; 2
    3666:	91 05       	cpc	r25, r1
    3668:	d9 f1       	breq	.+118    	; 0x36e0 <isAnyScheduleOnWARMSoon()+0x8c>
    366a:	83 30       	cpi	r24, 0x03	; 3
    366c:	91 05       	cpc	r25, r1
    366e:	b1 f1       	breq	.+108    	; 0x36dc <isAnyScheduleOnWARMSoon()+0x88>
    3670:	01 97       	sbiw	r24, 0x01	; 1
    3672:	a1 f1       	breq	.+104    	; 0x36dc <isAnyScheduleOnWARMSoon()+0x88>
    case _soUT_soon: return(true);
    case _soUT_now: return(false);
    }
#endif

  const uint_least16_t mm0 = getMinutesSinceMidnightLT() + PREPREWARM_MINS; // Look forward...
    3674:	0e 94 f5 19 	call	0x33ea	; 0x33ea <getMinutesSinceMidnightLT()>
    3678:	9c 01       	movw	r18, r24
    367a:	23 5d       	subi	r18, 0xD3	; 211
    367c:	3f 4f       	sbci	r19, 0xFF	; 255
  const uint_least16_t mm = (mm0 >= MINS_PER_DAY) ? (mm0 - MINS_PER_DAY) : mm0;
    367e:	45 e0       	ldi	r20, 0x05	; 5
    3680:	20 3a       	cpi	r18, 0xA0	; 160
    3682:	34 07       	cpc	r19, r20
    3684:	10 f4       	brcc	.+4      	; 0x368a <isAnyScheduleOnWARMSoon()+0x36>
    3686:	89 01       	movw	r16, r18
    3688:	03 c0       	rjmp	.+6      	; 0x3690 <isAnyScheduleOnWARMSoon()+0x3c>
    368a:	8c 01       	movw	r16, r24
    368c:	03 57       	subi	r16, 0x73	; 115
    368e:	15 40       	sbci	r17, 0x05	; 5

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    3690:	80 e0       	ldi	r24, 0x00	; 0
    3692:	0e 94 be 1a 	call	0x357c	; 0x357c <getSimpleScheduleOn(unsigned char)>
    3696:	ec 01       	movw	r28, r24
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    3698:	08 17       	cp	r16, r24
    369a:	19 07       	cpc	r17, r25
    369c:	68 f0       	brcs	.+26     	; 0x36b8 <isAnyScheduleOnWARMSoon()+0x64>
    uint_least16_t e = getSimpleScheduleOff(which);
    369e:	80 e0       	ldi	r24, 0x00	; 0
    36a0:	0e 94 04 1b 	call	0x3608	; 0x3608 <getSimpleScheduleOff(unsigned char)>
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    36a4:	8c 17       	cp	r24, r28
    36a6:	9d 07       	cpc	r25, r29
    36a8:	20 f0       	brcs	.+8      	; 0x36b2 <isAnyScheduleOnWARMSoon()+0x5e>
    if(mm < e) { return(true); }
    36aa:	08 17       	cp	r16, r24
    36ac:	19 07       	cpc	r17, r25
    36ae:	20 f4       	brcc	.+8      	; 0x36b8 <isAnyScheduleOnWARMSoon()+0x64>
    36b0:	17 c0       	rjmp	.+46     	; 0x36e0 <isAnyScheduleOnWARMSoon()+0x8c>
  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    uint_least16_t e = getSimpleScheduleOff(which);
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    36b2:	80 56       	subi	r24, 0x60	; 96
    36b4:	9a 4f       	sbci	r25, 0xFA	; 250
    36b6:	f9 cf       	rjmp	.-14     	; 0x36aa <isAnyScheduleOnWARMSoon()+0x56>
  const uint_least16_t mm0 = getMinutesSinceMidnightLT() + PREPREWARM_MINS; // Look forward...
  const uint_least16_t mm = (mm0 >= MINS_PER_DAY) ? (mm0 - MINS_PER_DAY) : mm0;

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    36b8:	81 e0       	ldi	r24, 0x01	; 1
    36ba:	0e 94 be 1a 	call	0x357c	; 0x357c <getSimpleScheduleOn(unsigned char)>
    36be:	ec 01       	movw	r28, r24
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    36c0:	08 17       	cp	r16, r24
    36c2:	19 07       	cpc	r17, r25
    36c4:	58 f0       	brcs	.+22     	; 0x36dc <isAnyScheduleOnWARMSoon()+0x88>
    uint_least16_t e = getSimpleScheduleOff(which);
    36c6:	81 e0       	ldi	r24, 0x01	; 1
    36c8:	0e 94 04 1b 	call	0x3608	; 0x3608 <getSimpleScheduleOff(unsigned char)>
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    36cc:	8c 17       	cp	r24, r28
    36ce:	9d 07       	cpc	r25, r29
    36d0:	10 f4       	brcc	.+4      	; 0x36d6 <isAnyScheduleOnWARMSoon()+0x82>
    36d2:	80 56       	subi	r24, 0x60	; 96
    36d4:	9a 4f       	sbci	r25, 0xFA	; 250
    if(mm < e) { return(true); }
    36d6:	08 17       	cp	r16, r24
    36d8:	19 07       	cpc	r17, r25
    36da:	10 f0       	brcs	.+4      	; 0x36e0 <isAnyScheduleOnWARMSoon()+0x8c>
    36dc:	80 e0       	ldi	r24, 0x00	; 0
    36de:	01 c0       	rjmp	.+2      	; 0x36e2 <isAnyScheduleOnWARMSoon()+0x8e>
    36e0:	81 e0       	ldi	r24, 0x01	; 1
    }

  return(false);
  }
    36e2:	df 91       	pop	r29
    36e4:	cf 91       	pop	r28
    36e6:	1f 91       	pop	r17
    36e8:	0f 91       	pop	r16
    36ea:	08 95       	ret

000036ec <isAnyScheduleOnWARMNow()>:
// True iff any schedule is currently 'on'/'WARM' even when schedules overlap.
// May be relatively slow/expensive.
// Can be used to suppress all 'off' activity except for the final one.
// Can be used to suppress set-backs during on times.
// In unit-test override mode is true for now, false for soon/off.
bool isAnyScheduleOnWARMNow()
    36ec:	0f 93       	push	r16
    36ee:	1f 93       	push	r17
    36f0:	cf 93       	push	r28
    36f2:	df 93       	push	r29
  {
#if defined(UNIT_TESTS)
  // Special behaviour for unit tests.
  switch(_soUT_override)
    36f4:	80 91 e4 02 	lds	r24, 0x02E4
    36f8:	90 91 e5 02 	lds	r25, 0x02E5
    36fc:	81 30       	cpi	r24, 0x01	; 1
    36fe:	91 05       	cpc	r25, r1
    3700:	2c f0       	brlt	.+10     	; 0x370c <isAnyScheduleOnWARMNow()+0x20>
    3702:	83 30       	cpi	r24, 0x03	; 3
    3704:	91 05       	cpc	r25, r1
    3706:	5c f1       	brlt	.+86     	; 0x375e <isAnyScheduleOnWARMNow()+0x72>
    3708:	03 97       	sbiw	r24, 0x03	; 3
    370a:	59 f1       	breq	.+86     	; 0x3762 <isAnyScheduleOnWARMNow()+0x76>
    case _soUT_soon: return(false);
    case _soUT_now: return(true);
    }
#endif

  const uint_least16_t mm = getMinutesSinceMidnightLT();
    370c:	0e 94 f5 19 	call	0x33ea	; 0x33ea <getMinutesSinceMidnightLT()>
    3710:	8c 01       	movw	r16, r24

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    3712:	80 e0       	ldi	r24, 0x00	; 0
    3714:	0e 94 be 1a 	call	0x357c	; 0x357c <getSimpleScheduleOn(unsigned char)>
    3718:	ec 01       	movw	r28, r24
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    371a:	08 17       	cp	r16, r24
    371c:	19 07       	cpc	r17, r25
    371e:	68 f0       	brcs	.+26     	; 0x373a <isAnyScheduleOnWARMNow()+0x4e>
    uint_least16_t e = getSimpleScheduleOff(which);
    3720:	80 e0       	ldi	r24, 0x00	; 0
    3722:	0e 94 04 1b 	call	0x3608	; 0x3608 <getSimpleScheduleOff(unsigned char)>
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    3726:	8c 17       	cp	r24, r28
    3728:	9d 07       	cpc	r25, r29
    372a:	20 f0       	brcs	.+8      	; 0x3734 <isAnyScheduleOnWARMNow()+0x48>
    if(mm < e) { return(true); }
    372c:	08 17       	cp	r16, r24
    372e:	19 07       	cpc	r17, r25
    3730:	20 f4       	brcc	.+8      	; 0x373a <isAnyScheduleOnWARMNow()+0x4e>
    3732:	17 c0       	rjmp	.+46     	; 0x3762 <isAnyScheduleOnWARMNow()+0x76>
  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    uint_least16_t e = getSimpleScheduleOff(which);
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    3734:	80 56       	subi	r24, 0x60	; 96
    3736:	9a 4f       	sbci	r25, 0xFA	; 250
    3738:	f9 cf       	rjmp	.-14     	; 0x372c <isAnyScheduleOnWARMNow()+0x40>

  const uint_least16_t mm = getMinutesSinceMidnightLT();

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    373a:	81 e0       	ldi	r24, 0x01	; 1
    373c:	0e 94 be 1a 	call	0x357c	; 0x357c <getSimpleScheduleOn(unsigned char)>
    3740:	ec 01       	movw	r28, r24
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    3742:	08 17       	cp	r16, r24
    3744:	19 07       	cpc	r17, r25
    3746:	58 f0       	brcs	.+22     	; 0x375e <isAnyScheduleOnWARMNow()+0x72>
    uint_least16_t e = getSimpleScheduleOff(which);
    3748:	81 e0       	ldi	r24, 0x01	; 1
    374a:	0e 94 04 1b 	call	0x3608	; 0x3608 <getSimpleScheduleOff(unsigned char)>
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    374e:	8c 17       	cp	r24, r28
    3750:	9d 07       	cpc	r25, r29
    3752:	10 f4       	brcc	.+4      	; 0x3758 <isAnyScheduleOnWARMNow()+0x6c>
    3754:	80 56       	subi	r24, 0x60	; 96
    3756:	9a 4f       	sbci	r25, 0xFA	; 250
    if(mm < e) { return(true); }
    3758:	08 17       	cp	r16, r24
    375a:	19 07       	cpc	r17, r25
    375c:	10 f0       	brcs	.+4      	; 0x3762 <isAnyScheduleOnWARMNow()+0x76>
    375e:	80 e0       	ldi	r24, 0x00	; 0
    3760:	01 c0       	rjmp	.+2      	; 0x3764 <isAnyScheduleOnWARMNow()+0x78>
    3762:	81 e0       	ldi	r24, 0x01	; 1
    }

  return(false);
  }
    3764:	df 91       	pop	r29
    3766:	cf 91       	pop	r28
    3768:	1f 91       	pop	r17
    376a:	0f 91       	pop	r16
    376c:	08 95       	ret

0000376e <getStatsTXLevel()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    376e:	f9 99       	sbic	0x1f, 1	; 31
    3770:	fe cf       	rjmp	.-4      	; 0x376e <getStatsTXLevel()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    3772:	8c e1       	ldi	r24, 0x1C	; 28
    3774:	90 e0       	ldi	r25, 0x00	; 0
    3776:	92 bd       	out	0x22, r25	; 34
    3778:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    377a:	f8 9a       	sbi	0x1f, 0	; 31
    377c:	80 b5       	in	r24, 0x20	; 32


// Get the current stats transmission level (for data outbound from this node).
// May not exactly match enumerated levels; use inequalities.
// Not thread-/ISR- safe.
stats_TX_level getStatsTXLevel() { return((stats_TX_level)eeprom_read_byte((uint8_t *)EE_START_STATS_TX_ENABLE)); }
    377e:	90 e0       	ldi	r25, 0x00	; 0
    3780:	08 95       	ret

00003782 <addEntropyToPool(unsigned char, unsigned char)>:
//   * estBits estimated number of truely securely random bits in range [0,8].
// Not thread-/ISR- safe.
void addEntropyToPool(uint8_t data, uint8_t estBits)
  {
  // TODO: no real entropy pool yet.
  seedRNG8(data, cycleCountCPU(), getSubCycleTime());
    3782:	66 b5       	in	r22, 0x26	; 38
    3784:	40 91 b2 00 	lds	r20, 0x00B2
    3788:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <seedRNG8(unsigned char, unsigned char, unsigned char)>
  }
    378c:	08 95       	ret

0000378e <getSecureRandomByte()>:
// Generate 'secure' new random byte.
// This should be essentially all entropy and unguessable.
// Likely to be slow and may force some peripheral I/O.
// Runtime details are likely to be intimately dependent on hardware implementation.
// Not thread-/ISR- safe.
uint8_t getSecureRandomByte()
    378e:	0f 93       	push	r16
    3790:	1f 93       	push	r17
    3792:	df 93       	push	r29
    3794:	cf 93       	push	r28
    3796:	0f 92       	push	r0
    3798:	cd b7       	in	r28, 0x3d	; 61
    379a:	de b7       	in	r29, 0x3e	; 62
  {
  // Use various real noise sources and whiten with PRNG and other counters.
  // Mix the bits also to help ensure good distribution.
  uint8_t w1 = clockJitterEntropyByte(); // Real noise.
    379c:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <clockJitterEntropyByte()>
  w1 ^= (w1 << 4); // Mix.
    37a0:	08 2f       	mov	r16, r24
    37a2:	02 95       	swap	r16
    37a4:	00 7f       	andi	r16, 0xF0	; 240
    37a6:	08 27       	eor	r16, r24
  w1 ^= noisyADCRead(); // Real noise.
    37a8:	0e 94 02 15 	call	0x2a04	; 0x2a04 <noisyADCRead()>
    37ac:	08 27       	eor	r16, r24
  w1 ^= (w1 >> 4); // Mix.
    37ae:	10 2f       	mov	r17, r16
    37b0:	12 95       	swap	r17
    37b2:	1f 70       	andi	r17, 0x0F	; 15
    37b4:	10 27       	eor	r17, r16
  const uint8_t v = w1;
    37b6:	19 83       	std	Y+1, r17	; 0x01
  w1 ^= randRNG8(); // Whiten.
    37b8:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <randRNG8()>
    37bc:	18 27       	eor	r17, r24
  w1 ^= (w1 << 3); // Mix.
    37be:	81 2f       	mov	r24, r17
    37c0:	88 0f       	add	r24, r24
    37c2:	88 0f       	add	r24, r24
    37c4:	88 0f       	add	r24, r24
    37c6:	81 27       	eor	r24, r17
  w1 ^=  _crc_ibutton_update(cycleCountCPU() ^ (uint8_t)(intptr_t)&v, ++count8 - v); // Whiten.
    37c8:	96 b5       	in	r25, 0x26	; 38
    37ca:	40 91 e6 02 	lds	r20, 0x02E6
    37ce:	4f 5f       	subi	r20, 0xFF	; 255
    37d0:	40 93 e6 02 	sts	0x02E6, r20
		"	brtc	2f" "\n\t"
		"	eor	%0, %2" "\n\t"
		"2:	dec	%1" "\n\t"
		"	brne	1b" "\n\t"
		: "=r" (__crc), "=d" (__i), "=d" (__pattern)
		: "0" (__crc), "r" (__data));
    37d4:	9e 01       	movw	r18, r28
    37d6:	2f 5f       	subi	r18, 0xFF	; 255
    37d8:	3f 4f       	sbci	r19, 0xFF	; 255
    37da:	92 27       	eor	r25, r18
    37dc:	29 81       	ldd	r18, Y+1	; 0x01
    37de:	42 1b       	sub	r20, r18
    37e0:	94 27       	eor	r25, r20
    37e2:	28 e0       	ldi	r18, 0x08	; 8
    37e4:	3c e8       	ldi	r19, 0x8C	; 140
    37e6:	90 fb       	bst	r25, 0
    37e8:	96 95       	lsr	r25
    37ea:	0e f4       	brtc	.+2      	; 0x37ee <getSecureRandomByte()+0x60>
    37ec:	93 27       	eor	r25, r19
    37ee:	2a 95       	dec	r18
    37f0:	d1 f7       	brne	.-12     	; 0x37e6 <getSecureRandomByte()+0x58>
  return(w1);
  }
    37f2:	89 27       	eor	r24, r25
    37f4:	0f 90       	pop	r0
    37f6:	cf 91       	pop	r28
    37f8:	df 91       	pop	r29
    37fa:	1f 91       	pop	r17
    37fc:	0f 91       	pop	r16
    37fe:	08 95       	ret

00003800 <serialPrintlnAndFlush()>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write line-end to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintlnAndFlush()
    3800:	1f 93       	push	r17
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    3802:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <powerUpSerialIfDisabled()>
    3806:	18 2f       	mov	r17, r24
  // Send the text.
  Serial.println();
    3808:	89 e4       	ldi	r24, 0x49	; 73
    380a:	94 e0       	ldi	r25, 0x04	; 4
    380c:	0e 94 17 3a 	call	0x742e	; 0x742e <Print::println()>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    3810:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    3814:	11 23       	and	r17, r17
    3816:	11 f0       	breq	.+4      	; 0x381c <serialPrintlnAndFlush()+0x1c>
    3818:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <powerDownSerial()>
  }
    381c:	1f 91       	pop	r17
    381e:	08 95       	ret

00003820 <serialPrintAndFlush(int, int)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) number to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(const int i, const int fmt)
    3820:	df 92       	push	r13
    3822:	ef 92       	push	r14
    3824:	ff 92       	push	r15
    3826:	0f 93       	push	r16
    3828:	1f 93       	push	r17
    382a:	8c 01       	movw	r16, r24
    382c:	7b 01       	movw	r14, r22
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    382e:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <powerUpSerialIfDisabled()>
    3832:	d8 2e       	mov	r13, r24
  // Send the character.
  Serial.print(i, fmt);
    3834:	89 e4       	ldi	r24, 0x49	; 73
    3836:	94 e0       	ldi	r25, 0x04	; 4
    3838:	b8 01       	movw	r22, r16
    383a:	a7 01       	movw	r20, r14
    383c:	0e 94 2c 3b 	call	0x7658	; 0x7658 <Print::print(int, int)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    3840:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    3844:	dd 20       	and	r13, r13
    3846:	11 f0       	breq	.+4      	; 0x384c <serialPrintAndFlush(int, int)+0x2c>
    3848:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <powerDownSerial()>
  }
    384c:	1f 91       	pop	r17
    384e:	0f 91       	pop	r16
    3850:	ff 90       	pop	r15
    3852:	ef 90       	pop	r14
    3854:	df 90       	pop	r13
    3856:	08 95       	ret

00003858 <serialPrintAndFlush(char const*)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (read-only) string to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(const char * const text)
    3858:	ff 92       	push	r15
    385a:	0f 93       	push	r16
    385c:	1f 93       	push	r17
    385e:	8c 01       	movw	r16, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    3860:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <powerUpSerialIfDisabled()>
    3864:	f8 2e       	mov	r15, r24
  // Send the text.
  Serial.print(text);
    3866:	89 e4       	ldi	r24, 0x49	; 73
    3868:	94 e0       	ldi	r25, 0x04	; 4
    386a:	b8 01       	movw	r22, r16
    386c:	0e 94 3f 3b 	call	0x767e	; 0x767e <Print::print(char const*)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    3870:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    3874:	ff 20       	and	r15, r15
    3876:	11 f0       	breq	.+4      	; 0x387c <serialPrintAndFlush(char const*)+0x24>
    3878:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <powerDownSerial()>
  }
    387c:	1f 91       	pop	r17
    387e:	0f 91       	pop	r16
    3880:	ff 90       	pop	r15
    3882:	08 95       	ret

00003884 <serialPrintAndFlush(__FlashStringHelper const*)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) string to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(__FlashStringHelper const * const text)
    3884:	ff 92       	push	r15
    3886:	0f 93       	push	r16
    3888:	1f 93       	push	r17
    388a:	8c 01       	movw	r16, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    388c:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <powerUpSerialIfDisabled()>
    3890:	f8 2e       	mov	r15, r24
  // Send the text.
  Serial.print(text);
    3892:	89 e4       	ldi	r24, 0x49	; 73
    3894:	94 e0       	ldi	r25, 0x04	; 4
    3896:	b8 01       	movw	r22, r16
    3898:	0e 94 ec 39 	call	0x73d8	; 0x73d8 <Print::print(__FlashStringHelper const*)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    389c:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    38a0:	ff 20       	and	r15, r15
    38a2:	11 f0       	breq	.+4      	; 0x38a8 <serialPrintAndFlush(__FlashStringHelper const*)+0x24>
    38a4:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <powerDownSerial()>
  }
    38a8:	1f 91       	pop	r17
    38aa:	0f 91       	pop	r16
    38ac:	ff 90       	pop	r15
    38ae:	08 95       	ret

000038b0 <serialPrintlnAndFlush(__FlashStringHelper const*)>:
// Flush to use for all serialPrintXXX() and DEBUG_PRINTXXX routines.
#define _flush() flushSerialSCTSensitive()

// Write a single (Flash-resident) string to serial followed by line-end and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintlnAndFlush(__FlashStringHelper const * const line)
    38b0:	ff 92       	push	r15
    38b2:	0f 93       	push	r16
    38b4:	1f 93       	push	r17
    38b6:	8c 01       	movw	r16, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    38b8:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <powerUpSerialIfDisabled()>
    38bc:	f8 2e       	mov	r15, r24
  // Send the line of text followed by line end.
  Serial.println(line);
    38be:	89 e4       	ldi	r24, 0x49	; 73
    38c0:	94 e0       	ldi	r25, 0x04	; 4
    38c2:	b8 01       	movw	r22, r16
    38c4:	0e 94 37 3a 	call	0x746e	; 0x746e <Print::println(__FlashStringHelper const*)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    38c8:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    38cc:	ff 20       	and	r15, r15
    38ce:	11 f0       	breq	.+4      	; 0x38d4 <serialPrintlnAndFlush(__FlashStringHelper const*)+0x24>
    38d0:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <powerDownSerial()>
  }
    38d4:	1f 91       	pop	r17
    38d6:	0f 91       	pop	r16
    38d8:	ff 90       	pop	r15
    38da:	08 95       	ret

000038dc <resetCLIActiveTimer()>:
#define CLI_DEFAULT_TIMEOUT_M 2
static volatile uint8_t CLITimeoutM = CLI_DEFAULT_TIMEOUT_M;

// Reset CLI active timer to the full whack before it goes inactive again (ie makes CLI active for a while).
// Thread-safe.
void resetCLIActiveTimer() { CLITimeoutM = CLI_DEFAULT_TIMEOUT_M; }
    38dc:	82 e0       	ldi	r24, 0x02	; 2
    38de:	80 93 38 01 	sts	0x0138, r24
    38e2:	08 95       	ret

000038e4 <markUIControlUsed()>:
// Record local manual operation of a local physical UI control, eg not remote or via CLI.
// To be thread-safe, everything that this touches or calls must be.
// Thread-safe.
void markUIControlUsed()
  {
  statusChange = true; // Note user interaction with the system.
    38e4:	81 e0       	ldi	r24, 0x01	; 1
    38e6:	80 93 e8 02 	sts	0x02E8, r24
  uiTimeoutM = UI_DEFAULT_TIMEOUT_M; // Ensure that UI controls are kept 'warm' for a little while.
    38ea:	92 e0       	ldi	r25, 0x02	; 2
    38ec:	90 93 e7 02 	sts	0x02E7, r25
#define CLI_DEFAULT_TIMEOUT_M 2
static volatile uint8_t CLITimeoutM = CLI_DEFAULT_TIMEOUT_M;

// Reset CLI active timer to the full whack before it goes inactive again (ie makes CLI active for a while).
// Thread-safe.
void resetCLIActiveTimer() { CLITimeoutM = CLI_DEFAULT_TIMEOUT_M; }
    38f0:	90 93 38 01 	sts	0x0138, r25
    // Do not call based on internal/synthetic events.
    // Such evidence may include operation of buttons (etc) on the unit or PIR.
    // Do not call from (for example) 'on' schedule change.
    // Makes occupation immediately visible.
    // Thread-safe and ISR-safe.
    void markAsOccupied() { value = 100; occupationCountdownM = OCCUPATION_TIMEOUT_M; activityCountdownM = 2; }
    38f4:	84 e6       	ldi	r24, 0x64	; 100
    38f6:	80 93 18 02 	sts	0x0218, r24
    38fa:	82 e3       	ldi	r24, 0x32	; 50
    38fc:	80 93 19 02 	sts	0x0219, r24
    3900:	90 93 1a 02 	sts	0x021A, r25
  uiTimeoutM = UI_DEFAULT_TIMEOUT_M; // Ensure that UI controls are kept 'warm' for a little while.
  // Make CLI active for a while (at some slight possibly-significant energy cost).
  resetCLIActiveTimer(); // Thread-safe.
  // User operation of controls locally is strong indication of presence.
  Occupancy.markAsOccupied(); // Thread-safe.
  }
    3904:	08 95       	ret

00003906 <randRNG8NextBoolean()>:
void resetRNG8();
#endif

// Get a boolean from RNG8.
// Avoids suspect low-order bit(s).
static inline bool randRNG8NextBoolean() { return(0 != (0x8 & randRNG8())); }
    3906:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <randRNG8()>
    390a:	90 e0       	ldi	r25, 0x00	; 0
    390c:	23 e0       	ldi	r18, 0x03	; 3
    390e:	96 95       	lsr	r25
    3910:	87 95       	ror	r24
    3912:	2a 95       	dec	r18
    3914:	e1 f7       	brne	.-8      	; 0x390e <randRNG8NextBoolean()+0x8>
    3916:	81 70       	andi	r24, 0x01	; 1
    3918:	08 95       	ret

0000391a <testEEPROM()>:
// Self-test of EEPROM functioning (and smart/split erase/write).
// Will not usually perform any wear-inducing activity (is idempotent).
// Aborts with panic() upon failure.
static void testEEPROM()
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testEEPROM");
    391a:	86 ec       	ldi	r24, 0xC6	; 198
    391c:	92 e0       	ldi	r25, 0x02	; 2
    391e:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <serialPrintlnAndFlush(__FlashStringHelper const*)>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    3922:	f9 99       	sbic	0x1f, 1	; 31
    3924:	fe cf       	rjmp	.-4      	; 0x3922 <testEEPROM()+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    3926:	12 bc       	out	0x22, r1	; 34
    3928:	11 bc       	out	0x21, r1	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    392a:	f8 9a       	sbi	0x1f, 0	; 31
    392c:	80 b5       	in	r24, 0x20	; 32

  if((uint8_t) 0xff != eeprom_read_byte((uint8_t*)EE_START_TEST_LOC))
    392e:	8f 3f       	cpi	r24, 0xFF	; 255
    3930:	91 f0       	breq	.+36     	; 0x3956 <testEEPROM()+0x3c>
    {
    if(!eeprom_smart_erase_byte((uint8_t*)EE_START_TEST_LOC)) { panic(); } // Should have attempted erase.
    3932:	80 e0       	ldi	r24, 0x00	; 0
    3934:	90 e0       	ldi	r25, 0x00	; 0
    3936:	0e 94 b4 08 	call	0x1168	; 0x1168 <eeprom_smart_erase_byte(unsigned char*)>
    393a:	88 23       	and	r24, r24
    393c:	11 f4       	brne	.+4      	; 0x3942 <testEEPROM()+0x28>
    393e:	0e 94 ec 2f 	call	0x5fd8	; 0x5fd8 <panic()>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    3942:	f9 99       	sbic	0x1f, 1	; 31
    3944:	fe cf       	rjmp	.-4      	; 0x3942 <testEEPROM()+0x28>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    3946:	12 bc       	out	0x22, r1	; 34
    3948:	11 bc       	out	0x21, r1	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    394a:	f8 9a       	sbi	0x1f, 0	; 31
    394c:	80 b5       	in	r24, 0x20	; 32
    if((uint8_t) 0xff != eeprom_read_byte((uint8_t*)EE_START_TEST_LOC)) { panic(); } // Should have erased.
    394e:	8f 3f       	cpi	r24, 0xFF	; 255
    3950:	11 f0       	breq	.+4      	; 0x3956 <testEEPROM()+0x3c>
    3952:	0e 94 ec 2f 	call	0x5fd8	; 0x5fd8 <panic()>
    }
  if(eeprom_smart_erase_byte((uint8_t*)EE_START_TEST_LOC)) { panic(); } // Should not need erase nor attempt one.
    3956:	80 e0       	ldi	r24, 0x00	; 0
    3958:	90 e0       	ldi	r25, 0x00	; 0
    395a:	0e 94 b4 08 	call	0x1168	; 0x1168 <eeprom_smart_erase_byte(unsigned char*)>
    395e:	88 23       	and	r24, r24
    3960:	11 f0       	breq	.+4      	; 0x3966 <testEEPROM()+0x4c>
    3962:	0e 94 ec 2f 	call	0x5fd8	; 0x5fd8 <panic()>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    3966:	f9 99       	sbic	0x1f, 1	; 31
    3968:	fe cf       	rjmp	.-4      	; 0x3966 <testEEPROM()+0x4c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    396a:	81 e0       	ldi	r24, 0x01	; 1
    396c:	90 e0       	ldi	r25, 0x00	; 0
    396e:	92 bd       	out	0x22, r25	; 34
    3970:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    3972:	f8 9a       	sbi	0x1f, 0	; 31
    3974:	80 b5       	in	r24, 0x20	; 32

  const uint8_t eaTestPattern = 0xa5; // Test pattern for masking (selective bit clearing).
  if(0 != ((~eaTestPattern) & eeprom_read_byte((uint8_t*)EE_START_TEST_LOC2))) // Will need to clear some bits.
    3976:	8a 75       	andi	r24, 0x5A	; 90
    3978:	a9 f0       	breq	.+42     	; 0x39a4 <testEEPROM()+0x8a>
    {
      if(!eeprom_smart_clear_bits((uint8_t*)EE_START_TEST_LOC2, eaTestPattern)) { panic(); } // Should have attempted write.
    397a:	81 e0       	ldi	r24, 0x01	; 1
    397c:	90 e0       	ldi	r25, 0x00	; 0
    397e:	65 ea       	ldi	r22, 0xA5	; 165
    3980:	0e 94 c8 08 	call	0x1190	; 0x1190 <eeprom_smart_clear_bits(unsigned char*, unsigned char)>
    3984:	88 23       	and	r24, r24
    3986:	11 f4       	brne	.+4      	; 0x398c <testEEPROM()+0x72>
    3988:	0e 94 ec 2f 	call	0x5fd8	; 0x5fd8 <panic()>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    398c:	f9 99       	sbic	0x1f, 1	; 31
    398e:	fe cf       	rjmp	.-4      	; 0x398c <testEEPROM()+0x72>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    3990:	81 e0       	ldi	r24, 0x01	; 1
    3992:	90 e0       	ldi	r25, 0x00	; 0
    3994:	92 bd       	out	0x22, r25	; 34
    3996:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    3998:	f8 9a       	sbi	0x1f, 0	; 31
    399a:	80 b5       	in	r24, 0x20	; 32
      if(0 != ((~eaTestPattern) & eeprom_read_byte((uint8_t*)EE_START_TEST_LOC2))) { panic(); } // Should have written.
    399c:	8a 75       	andi	r24, 0x5A	; 90
    399e:	11 f0       	breq	.+4      	; 0x39a4 <testEEPROM()+0x8a>
    39a0:	0e 94 ec 2f 	call	0x5fd8	; 0x5fd8 <panic()>
    }
  if(eeprom_smart_clear_bits((uint8_t*)EE_START_TEST_LOC2, eaTestPattern)) { panic(); } // Should not need write nor attempt one.
    39a4:	81 e0       	ldi	r24, 0x01	; 1
    39a6:	90 e0       	ldi	r25, 0x00	; 0
    39a8:	65 ea       	ldi	r22, 0xA5	; 165
    39aa:	0e 94 c8 08 	call	0x1190	; 0x1190 <eeprom_smart_clear_bits(unsigned char*, unsigned char)>
    39ae:	88 23       	and	r24, r24
    39b0:	11 f0       	breq	.+4      	; 0x39b6 <testEEPROM()+0x9c>
    39b2:	0e 94 ec 2f 	call	0x5fd8	; 0x5fd8 <panic()>
    39b6:	08 95       	ret

000039b8 <sleepLowPowerMs(unsigned int)>:
// This may be achieved in part by dynamically slowing the CPU clock if possible.
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed((((MIN_CPU_HZ * (ms)) + 2000) / 4000) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    39b8:	a0 e0       	ldi	r26, 0x00	; 0
    39ba:	b0 e0       	ldi	r27, 0x00	; 0
    39bc:	bc 01       	movw	r22, r24
    39be:	cd 01       	movw	r24, r26
    39c0:	22 e1       	ldi	r18, 0x12	; 18
    39c2:	3a e7       	ldi	r19, 0x7A	; 122
    39c4:	40 e0       	ldi	r20, 0x00	; 0
    39c6:	50 e0       	ldi	r21, 0x00	; 0
    39c8:	0e 94 ce 3b 	call	0x779c	; 0x779c <__mulsi3>
    39cc:	60 53       	subi	r22, 0x30	; 48
    39ce:	78 4f       	sbci	r23, 0xF8	; 248
    39d0:	8f 4f       	sbci	r24, 0xFF	; 255
    39d2:	9f 4f       	sbci	r25, 0xFF	; 255
    39d4:	20 ea       	ldi	r18, 0xA0	; 160
    39d6:	3f e0       	ldi	r19, 0x0F	; 15
    39d8:	40 e0       	ldi	r20, 0x00	; 0
    39da:	50 e0       	ldi	r21, 0x00	; 0
    39dc:	0e 94 42 3c 	call	0x7884	; 0x7884 <__divmodsi4>
    39e0:	da 01       	movw	r26, r20
    39e2:	c9 01       	movw	r24, r18
    39e4:	02 97       	sbiw	r24, 0x02	; 2
    39e6:	0e 94 bf 13 	call	0x277e	; 0x277e <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
    39ea:	08 95       	ret

000039ec <error(int, int)>:
#include "Serial_IO.h"


// Error exit from failed unit test, one int parameter and the failing line number to print...
// Expects to terminate like panic() with flashing light can be detected by eye or in hardware if required.
static void error(int err, int line)
    39ec:	0f 93       	push	r16
    39ee:	1f 93       	push	r17
    39f0:	cf 93       	push	r28
    39f2:	df 93       	push	r29
    39f4:	8c 01       	movw	r16, r24
    39f6:	eb 01       	movw	r28, r22
  {
  for( ; ; )
    {
    serialPrintAndFlush(F("***Test FAILED*** val="));
    39f8:	8a e9       	ldi	r24, 0x9A	; 154
    39fa:	91 e0       	ldi	r25, 0x01	; 1
    39fc:	0e 94 42 1c 	call	0x3884	; 0x3884 <serialPrintAndFlush(__FlashStringHelper const*)>
    serialPrintAndFlush(err, DEC);
    3a00:	c8 01       	movw	r24, r16
    3a02:	6a e0       	ldi	r22, 0x0A	; 10
    3a04:	70 e0       	ldi	r23, 0x00	; 0
    3a06:	0e 94 10 1c 	call	0x3820	; 0x3820 <serialPrintAndFlush(int, int)>
    serialPrintAndFlush(F(" =0x"));
    3a0a:	85 e9       	ldi	r24, 0x95	; 149
    3a0c:	91 e0       	ldi	r25, 0x01	; 1
    3a0e:	0e 94 42 1c 	call	0x3884	; 0x3884 <serialPrintAndFlush(__FlashStringHelper const*)>
    serialPrintAndFlush(err, HEX);
    3a12:	c8 01       	movw	r24, r16
    3a14:	60 e1       	ldi	r22, 0x10	; 16
    3a16:	70 e0       	ldi	r23, 0x00	; 0
    3a18:	0e 94 10 1c 	call	0x3820	; 0x3820 <serialPrintAndFlush(int, int)>
    if(0 != line)
    3a1c:	20 97       	sbiw	r28, 0x00	; 0
    3a1e:	49 f0       	breq	.+18     	; 0x3a32 <error(int, int)+0x46>
      {
      serialPrintAndFlush(F(" at line "));
    3a20:	8b e8       	ldi	r24, 0x8B	; 139
    3a22:	91 e0       	ldi	r25, 0x01	; 1
    3a24:	0e 94 42 1c 	call	0x3884	; 0x3884 <serialPrintAndFlush(__FlashStringHelper const*)>
      serialPrintAndFlush(line);
    3a28:	ce 01       	movw	r24, r28
    3a2a:	6a e0       	ldi	r22, 0x0A	; 10
    3a2c:	70 e0       	ldi	r23, 0x00	; 0
    3a2e:	0e 94 10 1c 	call	0x3820	; 0x3820 <serialPrintAndFlush(int, int)>
      }
    serialPrintlnAndFlush();
    3a32:	0e 94 00 1c 	call	0x3800	; 0x3800 <serialPrintlnAndFlush()>
    LED_HEATCALL_ON();
    3a36:	5c 98       	cbi	0x0b, 4	; 11
// Very tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define VERYTINY_PAUSE_MS 5
static void inline veryTinyPause() { sleepLowPowerMs(VERYTINY_PAUSE_MS); }
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define TINY_PAUSE_MS 15
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    3a38:	80 e0       	ldi	r24, 0x00	; 0
    3a3a:	0e 94 da 13 	call	0x27b4	; 0x27b4 <nap(signed char)>
    tinyPause();
    LED_HEATCALL_OFF();
    3a3e:	5c 9a       	sbi	0x0b, 4	; 11
    sleepLowPowerMs(1000);
    3a40:	88 ee       	ldi	r24, 0xE8	; 232
    3a42:	93 e0       	ldi	r25, 0x03	; 3
    3a44:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <sleepLowPowerMs(unsigned int)>
    3a48:	d7 cf       	rjmp	.-82     	; 0x39f8 <error(int, int)+0xc>

00003a4a <errorIfNotEqual(int, int, int)>:
    }
  }

// Deal with common equality test.
static inline void errorIfNotEqual(int expected, int actual, int line) { if(expected != actual) { error(actual, line); } }
    3a4a:	86 17       	cp	r24, r22
    3a4c:	97 07       	cpc	r25, r23
    3a4e:	21 f0       	breq	.+8      	; 0x3a58 <errorIfNotEqual(int, int, int)+0xe>
    3a50:	cb 01       	movw	r24, r22
    3a52:	ba 01       	movw	r22, r20
    3a54:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
    3a58:	08 95       	ret

00003a5a <testComputeRequiredTRVPercentOpen()>:




// Test for general sanity of computation of desired valve position.
static void testComputeRequiredTRVPercentOpen()
    3a5a:	8f 92       	push	r8
    3a5c:	9f 92       	push	r9
    3a5e:	af 92       	push	r10
    3a60:	bf 92       	push	r11
    3a62:	cf 92       	push	r12
    3a64:	df 92       	push	r13
    3a66:	ef 92       	push	r14
    3a68:	ff 92       	push	r15
    3a6a:	0f 93       	push	r16
    3a6c:	1f 93       	push	r17
    3a6e:	df 93       	push	r29
    3a70:	cf 93       	push	r28
    3a72:	cd b7       	in	r28, 0x3d	; 61
    3a74:	de b7       	in	r29, 0x3e	; 62
    3a76:	c5 55       	subi	r28, 0x55	; 85
    3a78:	d0 40       	sbci	r29, 0x00	; 0
    3a7a:	0f b6       	in	r0, 0x3f	; 63
    3a7c:	f8 94       	cli
    3a7e:	de bf       	out	0x3e, r29	; 62
    3a80:	0f be       	out	0x3f, r0	; 63
    3a82:	cd bf       	out	0x3d, r28	; 61
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testComputeRequiredTRVPercentOpen()");
    3a84:	87 e6       	ldi	r24, 0x67	; 103
    3a86:	91 e0       	ldi	r25, 0x01	; 1
    3a88:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <serialPrintlnAndFlush(__FlashStringHelper const*)>
  {
  ModelledRadValveInputState(const int realTempC16) :
    targetTempC(FROST), 
    minPCOpen(DEFAULT_MIN_VALVE_PC_REALLY_OPEN), maxPCOpen(100),
    widenDeadband(false), glacial(false), hasEcoBias(false), inBakeMode(false),
    currentPCOpen(0)
    3a8c:	87 e0       	ldi	r24, 0x07	; 7
    3a8e:	89 83       	std	Y+1, r24	; 0x01
    3a90:	8a e0       	ldi	r24, 0x0A	; 10
    3a92:	8a 83       	std	Y+2, r24	; 0x02
    3a94:	84 e6       	ldi	r24, 0x64	; 100
    3a96:	8b 83       	std	Y+3, r24	; 0x03
    3a98:	1c 82       	std	Y+4, r1	; 0x04
    3a9a:	1d 82       	std	Y+5, r1	; 0x05
    3a9c:	1e 82       	std	Y+6, r1	; 0x06
    3a9e:	1f 82       	std	Y+7, r1	; 0x07
    3aa0:	1b 86       	std	Y+11, r1	; 0x0b
    { setReferenceTemperatures(realTempC16); }
    3aa2:	ce 01       	movw	r24, r28
    3aa4:	01 96       	adiw	r24, 0x01	; 1
    3aa6:	60 e0       	ldi	r22, 0x00	; 0
    3aa8:	70 e0       	ldi	r23, 0x00	; 0
    3aaa:	0e 94 21 04 	call	0x842	; 0x842 <ModelledRadValveInputState::setReferenceTemperatures(int)>
  // that the valve is being opened,
  // ie that when below any possible legal target FROST/WARM/BAKE temperature the valve will open monotonically,
  // and also test that the fully-open state is reached in a bounded time.
//  DEBUG_SERIAL_PRINTLN_FLASHSTRING("open...");
  ModelledRadValveInputState is0(0);
  is0.targetTempC = randRNG8NextBoolean() ? FROST : WARM;
    3aae:	0e 94 83 1c 	call	0x3906	; 0x3906 <randRNG8NextBoolean()>
    3ab2:	88 23       	and	r24, r24
    3ab4:	11 f4       	brne	.+4      	; 0x3aba <testComputeRequiredTRVPercentOpen()+0x60>
    3ab6:	82 e1       	ldi	r24, 0x12	; 18
    3ab8:	01 c0       	rjmp	.+2      	; 0x3abc <testComputeRequiredTRVPercentOpen()+0x62>
    3aba:	87 e0       	ldi	r24, 0x07	; 7
    3abc:	89 83       	std	Y+1, r24	; 0x01
  {
  ModelledRadValveState() :
    initialised(false),
    isFiltering(false),
    valveTurndownCountdownM(0), valveTurnupCountdownM(0),
    tempOvershootCountdownM(0)
    3abe:	1f 8a       	std	Y+23, r1	; 0x17
    3ac0:	18 8e       	std	Y+24, r1	; 0x18
    3ac2:	19 8e       	std	Y+25, r1	; 0x19
    3ac4:	1a 8e       	std	Y+26, r1	; 0x1a
    3ac6:	1b 8e       	std	Y+27, r1	; 0x1b
  ModelledRadValveState rs0;
  is0.currentPCOpen = randRNG8() % 100;
    3ac8:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <randRNG8()>
    3acc:	64 e6       	ldi	r22, 0x64	; 100
    3ace:	0e 94 ed 3b 	call	0x77da	; 0x77da <__udivmodqi4>
    3ad2:	9b 87       	std	Y+11, r25	; 0x0b
    3ad4:	f4 e6       	ldi	r31, 0x64	; 100
    3ad6:	ef 2e       	mov	r14, r31
    3ad8:	f1 2c       	mov	r15, r1
    // Simulates one minute on each iteration.
    // Futz some input parameters that should not matter.
    is0.glacial = randRNG8NextBoolean();
    is0.widenDeadband = randRNG8NextBoolean();
    is0.hasEcoBias = randRNG8NextBoolean();
    const uint8_t newValvePos = ModelledRadValve::computeRequiredTRVPercentOpen(is0, rs0);
    3ada:	e7 e1       	ldi	r30, 0x17	; 23
    3adc:	ae 2e       	mov	r10, r30
    3ade:	b1 2c       	mov	r11, r1
    3ae0:	ac 0e       	add	r10, r28
    3ae2:	bd 1e       	adc	r11, r29
    3ae4:	6e 01       	movw	r12, r28
    3ae6:	08 94       	sec
    3ae8:	c1 1c       	adc	r12, r1
    3aea:	d1 1c       	adc	r13, r1
    3aec:	29 c0       	rjmp	.+82     	; 0x3b40 <testComputeRequiredTRVPercentOpen()+0xe6>
  is0.currentPCOpen = randRNG8() % 100;
  for(int i = 100; --i >= 0; )
    {
    // Simulates one minute on each iteration.
    // Futz some input parameters that should not matter.
    is0.glacial = randRNG8NextBoolean();
    3aee:	0e 94 83 1c 	call	0x3906	; 0x3906 <randRNG8NextBoolean()>
    3af2:	8d 83       	std	Y+5, r24	; 0x05
    is0.widenDeadband = randRNG8NextBoolean();
    3af4:	0e 94 83 1c 	call	0x3906	; 0x3906 <randRNG8NextBoolean()>
    3af8:	8c 83       	std	Y+4, r24	; 0x04
    is0.hasEcoBias = randRNG8NextBoolean();
    3afa:	0e 94 83 1c 	call	0x3906	; 0x3906 <randRNG8NextBoolean()>
    3afe:	8e 83       	std	Y+6, r24	; 0x06
    const uint8_t newValvePos = ModelledRadValve::computeRequiredTRVPercentOpen(is0, rs0);
    3b00:	c6 01       	movw	r24, r12
    3b02:	b5 01       	movw	r22, r10
    3b04:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)>
    3b08:	18 2f       	mov	r17, r24
    AssertIsTrue(newValvePos > 0);
    3b0a:	88 23       	and	r24, r24
    3b0c:	29 f4       	brne	.+10     	; 0x3b18 <testComputeRequiredTRVPercentOpen()+0xbe>
    3b0e:	80 e0       	ldi	r24, 0x00	; 0
    3b10:	90 e0       	ldi	r25, 0x00	; 0
    3b12:	65 e7       	ldi	r22, 0x75	; 117
    3b14:	70 e0       	ldi	r23, 0x00	; 0
    3b16:	06 c0       	rjmp	.+12     	; 0x3b24 <testComputeRequiredTRVPercentOpen()+0xca>
    AssertIsTrue(newValvePos <= 100);
    3b18:	85 36       	cpi	r24, 0x65	; 101
    3b1a:	30 f0       	brcs	.+12     	; 0x3b28 <testComputeRequiredTRVPercentOpen()+0xce>
    3b1c:	80 e0       	ldi	r24, 0x00	; 0
    3b1e:	90 e0       	ldi	r25, 0x00	; 0
    3b20:	66 e7       	ldi	r22, 0x76	; 118
    3b22:	70 e0       	ldi	r23, 0x00	; 0
    3b24:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
    AssertIsTrue(newValvePos > is0.currentPCOpen);
    3b28:	8b 85       	ldd	r24, Y+11	; 0x0b
    3b2a:	81 17       	cp	r24, r17
    3b2c:	30 f0       	brcs	.+12     	; 0x3b3a <testComputeRequiredTRVPercentOpen()+0xe0>
    3b2e:	80 e0       	ldi	r24, 0x00	; 0
    3b30:	90 e0       	ldi	r25, 0x00	; 0
    3b32:	67 e7       	ldi	r22, 0x77	; 119
    3b34:	70 e0       	ldi	r23, 0x00	; 0
    3b36:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
    is0.currentPCOpen = newValvePos;
    3b3a:	1b 87       	std	Y+11, r17	; 0x0b
    if(100 == newValvePos) { break; }
    3b3c:	14 36       	cpi	r17, 0x64	; 100
    3b3e:	41 f0       	breq	.+16     	; 0x3b50 <testComputeRequiredTRVPercentOpen()+0xf6>
//  DEBUG_SERIAL_PRINTLN_FLASHSTRING("open...");
  ModelledRadValveInputState is0(0);
  is0.targetTempC = randRNG8NextBoolean() ? FROST : WARM;
  ModelledRadValveState rs0;
  is0.currentPCOpen = randRNG8() % 100;
  for(int i = 100; --i >= 0; )
    3b40:	08 94       	sec
    3b42:	e1 08       	sbc	r14, r1
    3b44:	f1 08       	sbc	r15, r1
    3b46:	8f ef       	ldi	r24, 0xFF	; 255
    3b48:	e8 16       	cp	r14, r24
    3b4a:	8f ef       	ldi	r24, 0xFF	; 255
    3b4c:	f8 06       	cpc	r15, r24
    3b4e:	79 f6       	brne	.-98     	; 0x3aee <testComputeRequiredTRVPercentOpen()+0x94>
    AssertIsTrue(newValvePos <= 100);
    AssertIsTrue(newValvePos > is0.currentPCOpen);
    is0.currentPCOpen = newValvePos;
    if(100 == newValvePos) { break; }
    }
  AssertIsEqual(100, is0.currentPCOpen);
    3b50:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b52:	84 e6       	ldi	r24, 0x64	; 100
    3b54:	90 e0       	ldi	r25, 0x00	; 0
    3b56:	70 e0       	ldi	r23, 0x00	; 0
    3b58:	4b e7       	ldi	r20, 0x7B	; 123
    3b5a:	50 e0       	ldi	r21, 0x00	; 0
    3b5c:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <errorIfNotEqual(int, int, int)>
  {
  ModelledRadValveInputState(const int realTempC16) :
    targetTempC(FROST), 
    minPCOpen(DEFAULT_MIN_VALVE_PC_REALLY_OPEN), maxPCOpen(100),
    widenDeadband(false), glacial(false), hasEcoBias(false), inBakeMode(false),
    currentPCOpen(0)
    3b60:	87 e0       	ldi	r24, 0x07	; 7
    3b62:	8c 87       	std	Y+12, r24	; 0x0c
    3b64:	8a e0       	ldi	r24, 0x0A	; 10
    3b66:	8d 87       	std	Y+13, r24	; 0x0d
    3b68:	84 e6       	ldi	r24, 0x64	; 100
    3b6a:	8e 87       	std	Y+14, r24	; 0x0e
    3b6c:	1f 86       	std	Y+15, r1	; 0x0f
    3b6e:	18 8a       	std	Y+16, r1	; 0x10
    3b70:	19 8a       	std	Y+17, r1	; 0x11
    3b72:	1a 8a       	std	Y+18, r1	; 0x12
    3b74:	1e 8a       	std	Y+22, r1	; 0x16
    { setReferenceTemperatures(realTempC16); }
    3b76:	ce 01       	movw	r24, r28
    3b78:	0c 96       	adiw	r24, 0x0c	; 12
    3b7a:	60 e4       	ldi	r22, 0x40	; 64
    3b7c:	76 e0       	ldi	r23, 0x06	; 6
    3b7e:	0e 94 21 04 	call	0x842	; 0x842 <ModelledRadValveInputState::setReferenceTemperatures(int)>
  //   * Once in linger all reductions should be by 1% until possible final jump to 0.
  //   * Check that linger was long enough (if linger threshold is higher enough to allow it).
  // Also check for some correct initialisation and 'velocity'/smoothing behaviour.
//  DEBUG_SERIAL_PRINTLN_FLASHSTRING("close...");
  ModelledRadValveInputState is1(100<<4);
  is1.targetTempC = randRNG8NextBoolean() ? FROST : WARM;
    3b82:	0e 94 83 1c 	call	0x3906	; 0x3906 <randRNG8NextBoolean()>
    3b86:	88 23       	and	r24, r24
    3b88:	11 f4       	brne	.+4      	; 0x3b8e <testComputeRequiredTRVPercentOpen()+0x134>
    3b8a:	82 e1       	ldi	r24, 0x12	; 18
    3b8c:	01 c0       	rjmp	.+2      	; 0x3b90 <testComputeRequiredTRVPercentOpen()+0x136>
    3b8e:	87 e0       	ldi	r24, 0x07	; 7
    3b90:	8c 87       	std	Y+12, r24	; 0x0c
  {
  ModelledRadValveState() :
    initialised(false),
    isFiltering(false),
    valveTurndownCountdownM(0), valveTurnupCountdownM(0),
    tempOvershootCountdownM(0)
    3b92:	1c a6       	std	Y+44, r1	; 0x2c
    3b94:	1d a6       	std	Y+45, r1	; 0x2d
    3b96:	1e a6       	std	Y+46, r1	; 0x2e
    3b98:	1f a6       	std	Y+47, r1	; 0x2f
    3b9a:	18 aa       	std	Y+48, r1	; 0x30
  ModelledRadValveState rs1;
  AssertIsTrue(!rs1.initialised); // Initialisation not yet complete.
  const uint8_t is1StartPC = 1 + (randRNG8() % 100);
    3b9c:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <randRNG8()>
    3ba0:	64 e6       	ldi	r22, 0x64	; 100
    3ba2:	0e 94 ed 3b 	call	0x77da	; 0x77da <__udivmodqi4>
    3ba6:	9f 5f       	subi	r25, 0xFF	; 255
  const bool lookForLinger = (is1StartPC >= is1.minPCOpen);
    3ba8:	dd 24       	eor	r13, r13
    3baa:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bac:	98 17       	cp	r25, r24
    3bae:	10 f0       	brcs	.+4      	; 0x3bb4 <testComputeRequiredTRVPercentOpen()+0x15a>
    3bb0:	dd 24       	eor	r13, r13
    3bb2:	d3 94       	inc	r13
  bool hitLinger = false; // True if the linger value was hit.
  uint8_t lingerMins = 0; // Approx mins spent in linger.
  is1.currentPCOpen = is1StartPC;
    3bb4:	9e 8b       	std	Y+22, r25	; 0x16
    3bb6:	00 e0       	ldi	r16, 0x00	; 0
    3bb8:	cc 24       	eor	r12, r12
    3bba:	74 e6       	ldi	r23, 0x64	; 100
    3bbc:	e7 2e       	mov	r14, r23
    3bbe:	f1 2c       	mov	r15, r1
    // Simulates one minute on each iteration.
    // Futz some input parameters that should not matter.
    is1.glacial = randRNG8NextBoolean();
    is1.widenDeadband = randRNG8NextBoolean();
    is1.hasEcoBias = randRNG8NextBoolean();
    const uint8_t newValvePos = ModelledRadValve::computeRequiredTRVPercentOpen(is1, rs1);
    3bc0:	6c e0       	ldi	r22, 0x0C	; 12
    3bc2:	86 2e       	mov	r8, r22
    3bc4:	91 2c       	mov	r9, r1
    3bc6:	8c 0e       	add	r8, r28
    3bc8:	9d 1e       	adc	r9, r29
    3bca:	5c e2       	ldi	r21, 0x2C	; 44
    3bcc:	a5 2e       	mov	r10, r21
    3bce:	b1 2c       	mov	r11, r1
    3bd0:	ac 0e       	add	r10, r28
    3bd2:	bd 1e       	adc	r11, r29
    3bd4:	42 c0       	rjmp	.+132    	; 0x3c5a <testComputeRequiredTRVPercentOpen()+0x200>
//DEBUG_SERIAL_PRINTLN();
  for(int i = 100; --i >= 0; )
    {
    // Simulates one minute on each iteration.
    // Futz some input parameters that should not matter.
    is1.glacial = randRNG8NextBoolean();
    3bd6:	0e 94 83 1c 	call	0x3906	; 0x3906 <randRNG8NextBoolean()>
    3bda:	88 8b       	std	Y+16, r24	; 0x10
    is1.widenDeadband = randRNG8NextBoolean();
    3bdc:	0e 94 83 1c 	call	0x3906	; 0x3906 <randRNG8NextBoolean()>
    3be0:	8f 87       	std	Y+15, r24	; 0x0f
    is1.hasEcoBias = randRNG8NextBoolean();
    3be2:	0e 94 83 1c 	call	0x3906	; 0x3906 <randRNG8NextBoolean()>
    3be6:	89 8b       	std	Y+17, r24	; 0x11
    const uint8_t newValvePos = ModelledRadValve::computeRequiredTRVPercentOpen(is1, rs1);
    3be8:	c4 01       	movw	r24, r8
    3bea:	b5 01       	movw	r22, r10
    3bec:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <ModelledRadValve::computeRequiredTRVPercentOpen(ModelledRadValveInputState const&, ModelledRadValveState&)>
    3bf0:	18 2f       	mov	r17, r24
    AssertIsTrue(rs1.initialised); // Initialisation must have completed.
    3bf2:	8c a5       	ldd	r24, Y+44	; 0x2c
    3bf4:	88 23       	and	r24, r24
    3bf6:	31 f4       	brne	.+12     	; 0x3c04 <testComputeRequiredTRVPercentOpen()+0x1aa>
    3bf8:	80 e0       	ldi	r24, 0x00	; 0
    3bfa:	90 e0       	ldi	r25, 0x00	; 0
    3bfc:	67 e9       	ldi	r22, 0x97	; 151
    3bfe:	70 e0       	ldi	r23, 0x00	; 0
    3c00:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
//DEBUG_SERIAL_PRINT(newValvePos);
//DEBUG_SERIAL_PRINTLN();
    AssertIsTrue(newValvePos < 100);
    3c04:	14 36       	cpi	r17, 0x64	; 100
    3c06:	30 f0       	brcs	.+12     	; 0x3c14 <testComputeRequiredTRVPercentOpen()+0x1ba>
    3c08:	80 e0       	ldi	r24, 0x00	; 0
    3c0a:	90 e0       	ldi	r25, 0x00	; 0
    3c0c:	6a e9       	ldi	r22, 0x9A	; 154
    3c0e:	70 e0       	ldi	r23, 0x00	; 0
    3c10:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
//    AssertIsTrue(newValvePos >= 0);
    AssertIsTrue(newValvePos < is1.currentPCOpen);
    3c14:	8e 89       	ldd	r24, Y+22	; 0x16
    3c16:	18 17       	cp	r17, r24
    3c18:	30 f0       	brcs	.+12     	; 0x3c26 <testComputeRequiredTRVPercentOpen()+0x1cc>
    3c1a:	80 e0       	ldi	r24, 0x00	; 0
    3c1c:	90 e0       	ldi	r25, 0x00	; 0
    3c1e:	6c e9       	ldi	r22, 0x9C	; 156
    3c20:	70 e0       	ldi	r23, 0x00	; 0
    3c22:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
    if(hitLinger) { ++lingerMins; }
    3c26:	00 23       	and	r16, r16
    3c28:	61 f0       	breq	.+24     	; 0x3c42 <testComputeRequiredTRVPercentOpen()+0x1e8>
    3c2a:	c3 94       	inc	r12
    if(hitLinger && (0 != newValvePos)) { AssertIsEqual(is1.currentPCOpen - 1, newValvePos); }
    3c2c:	11 23       	and	r17, r17
    3c2e:	49 f0       	breq	.+18     	; 0x3c42 <testComputeRequiredTRVPercentOpen()+0x1e8>
    3c30:	8e 89       	ldd	r24, Y+22	; 0x16
    3c32:	90 e0       	ldi	r25, 0x00	; 0
    3c34:	01 97       	sbiw	r24, 0x01	; 1
    3c36:	61 2f       	mov	r22, r17
    3c38:	70 e0       	ldi	r23, 0x00	; 0
    3c3a:	4e e9       	ldi	r20, 0x9E	; 158
    3c3c:	50 e0       	ldi	r21, 0x00	; 0
    3c3e:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <errorIfNotEqual(int, int, int)>
    if(newValvePos == is1.minPCOpen-1) { hitLinger = true; }
    3c42:	21 2f       	mov	r18, r17
    3c44:	30 e0       	ldi	r19, 0x00	; 0
    3c46:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c48:	90 e0       	ldi	r25, 0x00	; 0
    3c4a:	01 97       	sbiw	r24, 0x01	; 1
    3c4c:	28 17       	cp	r18, r24
    3c4e:	39 07       	cpc	r19, r25
    3c50:	09 f4       	brne	.+2      	; 0x3c54 <testComputeRequiredTRVPercentOpen()+0x1fa>
    3c52:	01 e0       	ldi	r16, 0x01	; 1
    is1.currentPCOpen = newValvePos;
    3c54:	1e 8b       	std	Y+22, r17	; 0x16
    if(0 == newValvePos) { break; }
    3c56:	11 23       	and	r17, r17
    3c58:	49 f0       	breq	.+18     	; 0x3c6c <testComputeRequiredTRVPercentOpen()+0x212>
  bool hitLinger = false; // True if the linger value was hit.
  uint8_t lingerMins = 0; // Approx mins spent in linger.
  is1.currentPCOpen = is1StartPC;
//DEBUG_SERIAL_PRINT(is1.currentPCOpen);
//DEBUG_SERIAL_PRINTLN();
  for(int i = 100; --i >= 0; )
    3c5a:	08 94       	sec
    3c5c:	e1 08       	sbc	r14, r1
    3c5e:	f1 08       	sbc	r15, r1
    3c60:	9f ef       	ldi	r25, 0xFF	; 255
    3c62:	e9 16       	cp	r14, r25
    3c64:	9f ef       	ldi	r25, 0xFF	; 255
    3c66:	f9 06       	cpc	r15, r25
    3c68:	09 f0       	breq	.+2      	; 0x3c6c <testComputeRequiredTRVPercentOpen()+0x212>
    3c6a:	b5 cf       	rjmp	.-150    	; 0x3bd6 <testComputeRequiredTRVPercentOpen()+0x17c>
    if(hitLinger && (0 != newValvePos)) { AssertIsEqual(is1.currentPCOpen - 1, newValvePos); }
    if(newValvePos == is1.minPCOpen-1) { hitLinger = true; }
    is1.currentPCOpen = newValvePos;
    if(0 == newValvePos) { break; }
    }
  AssertIsEqual(0, is1.currentPCOpen);
    3c6c:	6e 89       	ldd	r22, Y+22	; 0x16
    3c6e:	80 e0       	ldi	r24, 0x00	; 0
    3c70:	90 e0       	ldi	r25, 0x00	; 0
    3c72:	70 e0       	ldi	r23, 0x00	; 0
    3c74:	43 ea       	ldi	r20, 0xA3	; 163
    3c76:	50 e0       	ldi	r21, 0x00	; 0
    3c78:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <errorIfNotEqual(int, int, int)>
  AssertIsTrue(hitLinger == lookForLinger);
    3c7c:	0d 15       	cp	r16, r13
    3c7e:	31 f0       	breq	.+12     	; 0x3c8c <testComputeRequiredTRVPercentOpen()+0x232>
    3c80:	80 e0       	ldi	r24, 0x00	; 0
    3c82:	90 e0       	ldi	r25, 0x00	; 0
    3c84:	64 ea       	ldi	r22, 0xA4	; 164
    3c86:	70 e0       	ldi	r23, 0x00	; 0
    3c88:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  if(lookForLinger) { AssertIsTrue(lingerMins >= min(is1.minPCOpen, DEFAULT_MAX_RUN_ON_TIME_M)); }
    3c8c:	dd 20       	and	r13, r13
    3c8e:	99 f0       	breq	.+38     	; 0x3cb6 <testComputeRequiredTRVPercentOpen()+0x25c>
    3c90:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c92:	85 30       	cpi	r24, 0x05	; 5
    3c94:	18 f0       	brcs	.+6      	; 0x3c9c <testComputeRequiredTRVPercentOpen()+0x242>
    3c96:	25 e0       	ldi	r18, 0x05	; 5
    3c98:	30 e0       	ldi	r19, 0x00	; 0
    3c9a:	02 c0       	rjmp	.+4      	; 0x3ca0 <testComputeRequiredTRVPercentOpen()+0x246>
    3c9c:	28 2f       	mov	r18, r24
    3c9e:	30 e0       	ldi	r19, 0x00	; 0
    3ca0:	8c 2d       	mov	r24, r12
    3ca2:	90 e0       	ldi	r25, 0x00	; 0
    3ca4:	82 17       	cp	r24, r18
    3ca6:	93 07       	cpc	r25, r19
    3ca8:	34 f4       	brge	.+12     	; 0x3cb6 <testComputeRequiredTRVPercentOpen()+0x25c>
    3caa:	80 e0       	ldi	r24, 0x00	; 0
    3cac:	90 e0       	ldi	r25, 0x00	; 0
    3cae:	65 ea       	ldi	r22, 0xA5	; 165
    3cb0:	70 e0       	ldi	r23, 0x00	; 0
    3cb2:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
    3cb6:	8e 01       	movw	r16, r28
    3cb8:	01 5c       	subi	r16, 0xC1	; 193
    3cba:	1f 4f       	sbci	r17, 0xFF	; 255
  // Filtering should not have been engaged and velocity should be zero (temperature is flat).
  for(int i = ModelledRadValveState::filterLength; --i >= 0; ) { AssertIsEqual(100<<4, rs1.prevRawTempC16[i]); }
    3cbc:	4c e2       	ldi	r20, 0x2C	; 44
    3cbe:	c4 2e       	mov	r12, r20
    3cc0:	d1 2c       	mov	r13, r1
    3cc2:	cc 0e       	add	r12, r28
    3cc4:	dd 1e       	adc	r13, r29
    3cc6:	3f e2       	ldi	r19, 0x2F	; 47
    3cc8:	e3 2e       	mov	r14, r19
    3cca:	f1 2c       	mov	r15, r1
    3ccc:	ec 0e       	add	r14, r28
    3cce:	fd 1e       	adc	r15, r29
    3cd0:	0b c0       	rjmp	.+22     	; 0x3ce8 <testComputeRequiredTRVPercentOpen()+0x28e>
    3cd2:	f8 01       	movw	r30, r16
    3cd4:	60 81       	ld	r22, Z
    3cd6:	71 81       	ldd	r23, Z+1	; 0x01
    3cd8:	80 e4       	ldi	r24, 0x40	; 64
    3cda:	96 e0       	ldi	r25, 0x06	; 6
    3cdc:	47 ea       	ldi	r20, 0xA7	; 167
    3cde:	50 e0       	ldi	r21, 0x00	; 0
    3ce0:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <errorIfNotEqual(int, int, int)>
    3ce4:	02 50       	subi	r16, 0x02	; 2
    3ce6:	10 40       	sbci	r17, 0x00	; 0
    3ce8:	0e 15       	cp	r16, r14
    3cea:	1f 05       	cpc	r17, r15
    3cec:	91 f7       	brne	.-28     	; 0x3cd2 <testComputeRequiredTRVPercentOpen()+0x278>
  AssertIsEqual(100<<4, rs1.getSmoothedRecent());
    3cee:	c6 01       	movw	r24, r12
    3cf0:	0e 94 2d 04 	call	0x85a	; 0x85a <ModelledRadValveState::getSmoothedRecent()>
    3cf4:	bc 01       	movw	r22, r24
    3cf6:	80 e4       	ldi	r24, 0x40	; 64
    3cf8:	96 e0       	ldi	r25, 0x06	; 6
    3cfa:	48 ea       	ldi	r20, 0xA8	; 168
    3cfc:	50 e0       	ldi	r21, 0x00	; 0
    3cfe:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <errorIfNotEqual(int, int, int)>
  AssertIsEqual(0, rs1.getVelocityC16PerTick());
    3d02:	c6 01       	movw	r24, r12
    3d04:	0e 94 43 04 	call	0x886	; 0x886 <ModelledRadValveState::getVelocityC16PerTick()>
    3d08:	bc 01       	movw	r22, r24
    3d0a:	80 e0       	ldi	r24, 0x00	; 0
    3d0c:	90 e0       	ldi	r25, 0x00	; 0
    3d0e:	49 ea       	ldi	r20, 0xA9	; 169
    3d10:	50 e0       	ldi	r21, 0x00	; 0
    3d12:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <errorIfNotEqual(int, int, int)>
  AssertIsTrue(!rs1.isFiltering);
    3d16:	8d a5       	ldd	r24, Y+45	; 0x2d
    3d18:	88 23       	and	r24, r24
    3d1a:	31 f0       	breq	.+12     	; 0x3d28 <testComputeRequiredTRVPercentOpen()+0x2ce>
    3d1c:	80 e0       	ldi	r24, 0x00	; 0
    3d1e:	90 e0       	ldi	r25, 0x00	; 0
    3d20:	6a ea       	ldi	r22, 0xAA	; 170
    3d22:	70 e0       	ldi	r23, 0x00	; 0
    3d24:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
    3d28:	8e 01       	movw	r16, r28
    3d2a:	0f 5b       	subi	r16, 0xBF	; 191
    3d2c:	1f 4f       	sbci	r17, 0xFF	; 255
    3d2e:	f8 01       	movw	r30, r16
    3d30:	10 82       	st	Z, r1
    3d32:	fe 01       	movw	r30, r28
    3d34:	ee 5b       	subi	r30, 0xBE	; 190
    3d36:	ff 4f       	sbci	r31, 0xFF	; 255
    3d38:	10 82       	st	Z, r1
    3d3a:	fe 01       	movw	r30, r28
    3d3c:	ed 5b       	subi	r30, 0xBD	; 189
    3d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d40:	10 82       	st	Z, r1
    3d42:	fe 01       	movw	r30, r28
    3d44:	ec 5b       	subi	r30, 0xBC	; 188
    3d46:	ff 4f       	sbci	r31, 0xFF	; 255
    3d48:	10 82       	st	Z, r1
    3d4a:	fe 01       	movw	r30, r28
    3d4c:	eb 5b       	subi	r30, 0xBB	; 187
    3d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d50:	10 82       	st	Z, r1
  // Some tests of basic velocity computation.
  ModelledRadValveState rs2;
  // Test with steady rising/falling value.
  const int step2C16 = (randRNG8() & 0x1f) - 16;
    3d52:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <randRNG8()>
    3d56:	e8 2e       	mov	r14, r24
    3d58:	ff 24       	eor	r15, r15
    3d5a:	ff e1       	ldi	r31, 0x1F	; 31
    3d5c:	ef 22       	and	r14, r31
    3d5e:	ff 24       	eor	r15, r15
    3d60:	80 ef       	ldi	r24, 0xF0	; 240
    3d62:	9f ef       	ldi	r25, 0xFF	; 255
    3d64:	e8 0e       	add	r14, r24
    3d66:	f9 1e       	adc	r15, r25
//DEBUG_SERIAL_PRINT(step2C16);
//DEBUG_SERIAL_PRINTLN();
  const int base2C16 = (FROST + (randRNG8() % (WARM - FROST))) << 16;
    3d68:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <randRNG8()>
  rs2.prevRawTempC16[0] = base2C16;
    3d6c:	fe 01       	movw	r30, r28
    3d6e:	ea 5b       	subi	r30, 0xBA	; 186
    3d70:	ff 4f       	sbci	r31, 0xFF	; 255
    3d72:	10 82       	st	Z, r1
    3d74:	11 82       	std	Z+1, r1	; 0x01
    3d76:	f8 01       	movw	r30, r16
    3d78:	35 96       	adiw	r30, 0x05	; 5
  for(int i = 1; i < ModelledRadValveState::filterLength; ++i)
    3d7a:	98 01       	movw	r18, r16
    3d7c:	2d 5e       	subi	r18, 0xED	; 237
    3d7e:	3f 4f       	sbci	r19, 0xFF	; 255
    3d80:	07 c0       	rjmp	.+14     	; 0x3d90 <testComputeRequiredTRVPercentOpen()+0x336>
    { rs2.prevRawTempC16[i] = rs2.prevRawTempC16[i-1] - step2C16; }
    3d82:	80 81       	ld	r24, Z
    3d84:	91 81       	ldd	r25, Z+1	; 0x01
    3d86:	8e 19       	sub	r24, r14
    3d88:	9f 09       	sbc	r25, r15
    3d8a:	93 83       	std	Z+3, r25	; 0x03
    3d8c:	82 83       	std	Z+2, r24	; 0x02
    3d8e:	32 96       	adiw	r30, 0x02	; 2
  const int step2C16 = (randRNG8() & 0x1f) - 16;
//DEBUG_SERIAL_PRINT(step2C16);
//DEBUG_SERIAL_PRINTLN();
  const int base2C16 = (FROST + (randRNG8() % (WARM - FROST))) << 16;
  rs2.prevRawTempC16[0] = base2C16;
  for(int i = 1; i < ModelledRadValveState::filterLength; ++i)
    3d90:	e2 17       	cp	r30, r18
    3d92:	f3 07       	cpc	r31, r19
    3d94:	b1 f7       	brne	.-20     	; 0x3d82 <testComputeRequiredTRVPercentOpen()+0x328>
    { rs2.prevRawTempC16[i] = rs2.prevRawTempC16[i-1] - step2C16; }
//DEBUG_SERIAL_PRINT(rs2.getVelocityC16PerTick());
//DEBUG_SERIAL_PRINTLN();
  AssertIsEqualWithDelta(step2C16, rs2.getVelocityC16PerTick(), 2);
    3d96:	c8 01       	movw	r24, r16
    3d98:	0e 94 43 04 	call	0x886	; 0x886 <ModelledRadValveState::getVelocityC16PerTick()>
  }

// Deal with common equality test.
static inline void errorIfNotEqual(int expected, int actual, int line) { if(expected != actual) { error(actual, line); } }
// Allowing a delta.
static inline void errorIfNotEqual(int expected, int actual, int delta, int line) { if(abs(expected - actual) > delta) { error(actual, line); } }
    3d9c:	97 01       	movw	r18, r14
    3d9e:	28 1b       	sub	r18, r24
    3da0:	39 0b       	sbc	r19, r25
    3da2:	37 ff       	sbrs	r19, 7
    3da4:	03 c0       	rjmp	.+6      	; 0x3dac <testComputeRequiredTRVPercentOpen()+0x352>
    3da6:	30 95       	com	r19
    3da8:	21 95       	neg	r18
    3daa:	3f 4f       	sbci	r19, 0xFF	; 255
    3dac:	23 30       	cpi	r18, 0x03	; 3
    3dae:	31 05       	cpc	r19, r1
    3db0:	24 f0       	brlt	.+8      	; 0x3dba <testComputeRequiredTRVPercentOpen()+0x360>
    3db2:	67 eb       	ldi	r22, 0xB7	; 183
    3db4:	70 e0       	ldi	r23, 0x00	; 0
    3db6:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  for(int i = 1; i < ModelledRadValveState::filterLength; ++i)
    { rs2.prevRawTempC16[i] = rs2.prevRawTempC16[i-1] - step2C16; }
//DEBUG_SERIAL_PRINT(rs2.getVelocityC16PerTick());
//DEBUG_SERIAL_PRINTLN();
  AssertIsEqualWithDelta(step2C16, rs2.getVelocityC16PerTick(), 2);
  }
    3dba:	cb 5a       	subi	r28, 0xAB	; 171
    3dbc:	df 4f       	sbci	r29, 0xFF	; 255
    3dbe:	0f b6       	in	r0, 0x3f	; 63
    3dc0:	f8 94       	cli
    3dc2:	de bf       	out	0x3e, r29	; 62
    3dc4:	0f be       	out	0x3f, r0	; 63
    3dc6:	cd bf       	out	0x3d, r28	; 61
    3dc8:	cf 91       	pop	r28
    3dca:	df 91       	pop	r29
    3dcc:	1f 91       	pop	r17
    3dce:	0f 91       	pop	r16
    3dd0:	ff 90       	pop	r15
    3dd2:	ef 90       	pop	r14
    3dd4:	df 90       	pop	r13
    3dd6:	cf 90       	pop	r12
    3dd8:	bf 90       	pop	r11
    3dda:	af 90       	pop	r10
    3ddc:	9f 90       	pop	r9
    3dde:	8f 90       	pop	r8
    3de0:	08 95       	ret

00003de2 <testTargetComputation()>:
2e) Setbacks should be targeted at times of expected low occupancy.
2f) Some setbacks should be possible in office environments with lights mainly or always on.

Starred items are tested.
*/
static void testTargetComputation()
    3de2:	af 92       	push	r10
    3de4:	bf 92       	push	r11
    3de6:	cf 92       	push	r12
    3de8:	df 92       	push	r13
    3dea:	ef 92       	push	r14
    3dec:	ff 92       	push	r15
    3dee:	0f 93       	push	r16
    3df0:	1f 93       	push	r17
    3df2:	cf 93       	push	r28
    3df4:	df 93       	push	r29
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testTargetComputation");
    3df6:	81 eb       	ldi	r24, 0xB1	; 177
    3df8:	91 e0       	ldi	r25, 0x01	; 1
    3dfa:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <serialPrintlnAndFlush(__FlashStringHelper const*)>
    3dfe:	14 e0       	ldi	r17, 0x04	; 4
    3e00:	c1 2e       	mov	r12, r17
    3e02:	d1 2c       	mov	r13, r1
    3e04:	bb 24       	eor	r11, r11
    3e06:	00 e0       	ldi	r16, 0x00	; 0

    // Put directly into energy-conserving 'holiday mode' by making room appear to be 'long vacant'.
    // Be careful of retriggering presence immediately if this is set locally.
    // Set apparent vacancy to maximum to make setting obvious and to hide further vacancy from snooping.
    // Code elsewhere may wish to put the system in FROST mode also.
    void setHolidayMode() { activityCountdownM = 0; value = 0; occupationCountdownM = 0; vacancyH = 255U; }
    3e08:	aa 24       	eor	r10, r10
    3e0a:	aa 94       	dec	r10
    3e0c:	1b c1       	rjmp	.+566    	; 0x4044 <testTargetComputation()+0x262>
  uint8_t maxEcoSetback = 0;
  uint8_t maxComSetback = 0;
  // Systematically work through multiple base temperatures, ending at no override.
  for(int i = _TEST_basetemp_override_MAX+1; --i >= 0; )
    {
    _TEST_set_basetemp_override((_TEST_basetemp_override)i);
    3e0e:	c6 01       	movw	r24, r12
    3e10:	0e 94 59 03 	call	0x6b2	; 0x6b2 <_TEST_set_basetemp_override(_TEST_basetemp_override)>
    3e14:	b2 e0       	ldi	r27, 0x02	; 2
    3e16:	eb 2e       	mov	r14, r27
    3e18:	f1 2c       	mov	r15, r1
    3e1a:	0b c1       	rjmp	.+534    	; 0x4032 <testTargetComputation()+0x250>
     // Test at high and low light levels.
     for(int j = 2; --j >= 0; )
#endif
      {
#ifndef OMIT_MODULE_LDROCCUPANCYDETECTION
      AmbLight._TEST_set_multi_((j != 0) ? 1023 : 0, j != 0);
    3e1c:	e1 14       	cp	r14, r1
    3e1e:	f1 04       	cpc	r15, r1
    3e20:	19 f4       	brne	.+6      	; 0x3e28 <testTargetComputation()+0x46>
    3e22:	80 e0       	ldi	r24, 0x00	; 0
    3e24:	90 e0       	ldi	r25, 0x00	; 0
    3e26:	02 c0       	rjmp	.+4      	; 0x3e2c <testTargetComputation()+0x4a>
    3e28:	8f ef       	ldi	r24, 0xFF	; 255
    3e2a:	93 e0       	ldi	r25, 0x03	; 3
    3e2c:	20 e0       	ldi	r18, 0x00	; 0
    3e2e:	e1 14       	cp	r14, r1
    3e30:	f1 04       	cpc	r15, r1
    3e32:	09 f0       	breq	.+2      	; 0x3e36 <testTargetComputation()+0x54>
    3e34:	21 e0       	ldi	r18, 0x01	; 1

#ifdef UNIT_TESTS
    // Set new value(s) for unit test only.
    // Makes this more usable as a mock for testing other components.
    virtual void _TEST_set_multi_(uint16_t newRawValue, bool newRoomLitFlag)
      { rawValue = newRawValue; value = newRawValue >> 2; isRoomLitFlag = newRoomLitFlag; }
    3e36:	90 93 ef 02 	sts	0x02EF, r25
    3e3a:	80 93 ee 02 	sts	0x02EE, r24
    3e3e:	96 95       	lsr	r25
    3e40:	87 95       	ror	r24
    3e42:	96 95       	lsr	r25
    3e44:	87 95       	ror	r24
    3e46:	80 93 ed 02 	sts	0x02ED, r24
    3e4a:	20 93 f0 02 	sts	0x02F0, r18
    3e4e:	c4 e0       	ldi	r28, 0x04	; 4
    3e50:	d0 e0       	ldi	r29, 0x00	; 0
    3e52:	bd c0       	rjmp	.+378    	; 0x3fce <testTargetComputation()+0x1ec>
#endif
      // Systematically work through all schedule states, ending at 0 (no override).
      for(int k = _TEST_schedule_override_MAX+1; --k >= 0; )
        {
        _TEST_set_schedule_override((_TEST_schedule_override)k);
    3e54:	ce 01       	movw	r24, r28
    3e56:	0e 94 b9 1a 	call	0x3572	; 0x3572 <_TEST_set_schedule_override(_TEST_schedule_override)>
        // Some basic invariants should always be met:
        //   * Both FROST and WARM target values legal.
        //   * WARM target never lower than FROST target.
        AssertIsTrue((getFROSTTargetC() >= MIN_TARGET_C) && (getFROSTTargetC() <= MAX_TARGET_C));
    3e5a:	0e 94 97 03 	call	0x72e	; 0x72e <getFROSTTargetC()>
    3e5e:	85 30       	cpi	r24, 0x05	; 5
    3e60:	20 f0       	brcs	.+8      	; 0x3e6a <testTargetComputation()+0x88>
    3e62:	0e 94 97 03 	call	0x72e	; 0x72e <getFROSTTargetC()>
    3e66:	80 36       	cpi	r24, 0x60	; 96
    3e68:	30 f0       	brcs	.+12     	; 0x3e76 <testTargetComputation()+0x94>
    3e6a:	80 e0       	ldi	r24, 0x00	; 0
    3e6c:	90 e0       	ldi	r25, 0x00	; 0
    3e6e:	67 ee       	ldi	r22, 0xE7	; 231
    3e70:	70 e0       	ldi	r23, 0x00	; 0
    3e72:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
        AssertIsTrue((getWARMTargetC() >= MIN_TARGET_C) && (getWARMTargetC() <= MAX_TARGET_C));
    3e76:	0e 94 5e 03 	call	0x6bc	; 0x6bc <getWARMTargetC()>
    3e7a:	85 30       	cpi	r24, 0x05	; 5
    3e7c:	20 f0       	brcs	.+8      	; 0x3e86 <testTargetComputation()+0xa4>
    3e7e:	0e 94 5e 03 	call	0x6bc	; 0x6bc <getWARMTargetC()>
    3e82:	80 36       	cpi	r24, 0x60	; 96
    3e84:	30 f0       	brcs	.+12     	; 0x3e92 <testTargetComputation()+0xb0>
    3e86:	80 e0       	ldi	r24, 0x00	; 0
    3e88:	90 e0       	ldi	r25, 0x00	; 0
    3e8a:	68 ee       	ldi	r22, 0xE8	; 232
    3e8c:	70 e0       	ldi	r23, 0x00	; 0
    3e8e:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
        AssertIsTrue(getFROSTTargetC() <= getWARMTargetC());
    3e92:	0e 94 97 03 	call	0x72e	; 0x72e <getFROSTTargetC()>
    3e96:	18 2f       	mov	r17, r24
    3e98:	0e 94 5e 03 	call	0x6bc	; 0x6bc <getWARMTargetC()>
    3e9c:	81 17       	cp	r24, r17
    3e9e:	30 f4       	brcc	.+12     	; 0x3eac <testTargetComputation()+0xca>
    3ea0:	80 e0       	ldi	r24, 0x00	; 0
    3ea2:	90 e0       	ldi	r25, 0x00	; 0
    3ea4:	69 ee       	ldi	r22, 0xE9	; 233
    3ea6:	70 e0       	ldi	r23, 0x00	; 0
    3ea8:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
    3eac:	10 92 1a 02 	sts	0x021A, r1
    3eb0:	10 92 18 02 	sts	0x0218, r1
    3eb4:	10 92 19 02 	sts	0x0219, r1
    3eb8:	a0 92 1b 02 	sts	0x021B, r10
        // In FROST mode target temperature must stay at frost level once the room has been vacant for a while.
        // IE: pre-warming is disabled in long-vacant rooms as an energy-saving strategy.
        // Set to long long vacant and FROST mode.
//        Occupancy._TEST_set_vacH_(OccupancyTracker::longLongVacantHThrH+1);
        Occupancy.setHolidayMode();
        setWarmModeDebounced(false);
    3ebc:	80 e0       	ldi	r24, 0x00	; 0
    3ebe:	0e 94 3f 03 	call	0x67e	; 0x67e <setWarmModeDebounced(bool)>
        NominalRadValve.computeTargetTemperature();
    3ec2:	8d e1       	ldi	r24, 0x1D	; 29
    3ec4:	92 e0       	ldi	r25, 0x02	; 2
    3ec6:	0e 94 fb 07 	call	0xff6	; 0xff6 <ModelledRadValve::computeTargetTemperature()>
        AssertIsEqual(getFROSTTargetC(), NominalRadValve.getTargetTempC());
    3eca:	0e 94 97 03 	call	0x72e	; 0x72e <getFROSTTargetC()>
    3ece:	60 91 20 02 	lds	r22, 0x0220
    3ed2:	90 e0       	ldi	r25, 0x00	; 0
    3ed4:	70 e0       	ldi	r23, 0x00	; 0
    3ed6:	43 ef       	ldi	r20, 0xF3	; 243
    3ed8:	50 e0       	ldi	r21, 0x00	; 0
    3eda:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <errorIfNotEqual(int, int, int)>
#endif
        // ENERGY SAVING RULE TEST (TODO-442 1b: "Never a higher pre-warm than WARM target.")
        // Check that in the the target temperature is never higher in FROST than WARM.
        // In this first instance without controlling the other parameters.
        setWarmModeDebounced(false);
    3ede:	80 e0       	ldi	r24, 0x00	; 0
    3ee0:	0e 94 3f 03 	call	0x67e	; 0x67e <setWarmModeDebounced(bool)>
        NominalRadValve.computeTargetTemperature();
    3ee4:	8d e1       	ldi	r24, 0x1D	; 29
    3ee6:	92 e0       	ldi	r25, 0x02	; 2
    3ee8:	0e 94 fb 07 	call	0xff6	; 0xff6 <ModelledRadValve::computeTargetTemperature()>
    // True if this unit is nominally calling for heat (temperature is under target).
    // Thread-safe and ISR safe.
    bool isCallingForHeat() const { return(callingForHeat); }

    // Get target temperature in C as computed by computeTargetTemperature().
    uint8_t getTargetTempC() const { return(inputState.targetTempC); }
    3eec:	10 91 20 02 	lds	r17, 0x0220
        const uint8_t tTF = NominalRadValve.getTargetTempC();
        setWarmModeDebounced(true);
    3ef0:	81 e0       	ldi	r24, 0x01	; 1
    3ef2:	0e 94 3f 03 	call	0x67e	; 0x67e <setWarmModeDebounced(bool)>
        NominalRadValve.computeTargetTemperature();
    3ef6:	8d e1       	ldi	r24, 0x1D	; 29
    3ef8:	92 e0       	ldi	r25, 0x02	; 2
    3efa:	0e 94 fb 07 	call	0xff6	; 0xff6 <ModelledRadValve::computeTargetTemperature()>
        const uint8_t tTW = NominalRadValve.getTargetTempC();
        AssertIsTrue(tTF <= tTW);
    3efe:	80 91 20 02 	lds	r24, 0x0220
    3f02:	81 17       	cp	r24, r17
    3f04:	30 f4       	brcc	.+12     	; 0x3f12 <testTargetComputation()+0x130>
    3f06:	80 e0       	ldi	r24, 0x00	; 0
    3f08:	90 e0       	ldi	r25, 0x00	; 0
    3f0a:	6e ef       	ldi	r22, 0xFE	; 254
    3f0c:	70 e0       	ldi	r23, 0x00	; 0
    3f0e:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
        // ENERGY SAVING RULE TEST (TODO-442 2a: "Setback in WARM mode must happen in dark (quick response) or long vacant room.")
        setWarmModeDebounced(true);
    3f12:	81 e0       	ldi	r24, 0x01	; 1
    3f14:	0e 94 3f 03 	call	0x67e	; 0x67e <setWarmModeDebounced(bool)>
    bool isRoomLit() const { return(isRoomLitFlag); }

    // Returns true if room is light enough for someone to be active.
    // False if unknown.
    // Thread-safe and usable within ISRs (Interrupt Service Routines).
    bool isRoomDark() const { return(!isRoomLitFlag); }
    3f18:	80 91 f0 02 	lds	r24, 0x02F0
        if(AmbLight.isRoomDark())
    3f1c:	88 23       	and	r24, r24
    3f1e:	79 f4       	brne	.+30     	; 0x3f3e <testTargetComputation()+0x15c>
          {
          NominalRadValve.computeTargetTemperature();
    3f20:	8d e1       	ldi	r24, 0x1D	; 29
    3f22:	92 e0       	ldi	r25, 0x02	; 2
    3f24:	0e 94 fb 07 	call	0xff6	; 0xff6 <ModelledRadValve::computeTargetTemperature()>
    3f28:	10 91 20 02 	lds	r17, 0x0220
          AssertIsTrue(NominalRadValve.getTargetTempC() < getWARMTargetC()); // Temp must be set back (assumes FROST < WARM).
    3f2c:	0e 94 5e 03 	call	0x6bc	; 0x6bc <getWARMTargetC()>
    3f30:	18 17       	cp	r17, r24
    3f32:	e8 f0       	brcs	.+58     	; 0x3f6e <testTargetComputation()+0x18c>
    3f34:	80 e0       	ldi	r24, 0x00	; 0
    3f36:	90 e0       	ldi	r25, 0x00	; 0
    3f38:	64 e0       	ldi	r22, 0x04	; 4
    3f3a:	71 e0       	ldi	r23, 0x01	; 1
    3f3c:	16 c0       	rjmp	.+44     	; 0x3f6a <testTargetComputation()+0x188>

    // Put directly into energy-conserving 'holiday mode' by making room appear to be 'long vacant'.
    // Be careful of retriggering presence immediately if this is set locally.
    // Set apparent vacancy to maximum to make setting obvious and to hide further vacancy from snooping.
    // Code elsewhere may wish to put the system in FROST mode also.
    void setHolidayMode() { activityCountdownM = 0; value = 0; occupationCountdownM = 0; vacancyH = 255U; }
    3f3e:	10 92 1a 02 	sts	0x021A, r1
    3f42:	10 92 18 02 	sts	0x0218, r1
    3f46:	10 92 19 02 	sts	0x0219, r1
    3f4a:	a0 92 1b 02 	sts	0x021B, r10
#ifdef OCCUPANCY_SUPPORT
        else
          {
//          Occupancy._TEST_set_vacH_(OccupancyTracker::longLongVacantHThrH+1);
          Occupancy.setHolidayMode();
          NominalRadValve.computeTargetTemperature();
    3f4e:	8d e1       	ldi	r24, 0x1D	; 29
    3f50:	92 e0       	ldi	r25, 0x02	; 2
    3f52:	0e 94 fb 07 	call	0xff6	; 0xff6 <ModelledRadValve::computeTargetTemperature()>
    // True if this unit is nominally calling for heat (temperature is under target).
    // Thread-safe and ISR safe.
    bool isCallingForHeat() const { return(callingForHeat); }

    // Get target temperature in C as computed by computeTargetTemperature().
    uint8_t getTargetTempC() const { return(inputState.targetTempC); }
    3f56:	10 91 20 02 	lds	r17, 0x0220
          AssertIsTrue(NominalRadValve.getTargetTempC() < getWARMTargetC()); // Temp must be set back (assumes FROST < WARM).
    3f5a:	0e 94 5e 03 	call	0x6bc	; 0x6bc <getWARMTargetC()>
    3f5e:	18 17       	cp	r17, r24
    3f60:	30 f0       	brcs	.+12     	; 0x3f6e <testTargetComputation()+0x18c>
    3f62:	80 e0       	ldi	r24, 0x00	; 0
    3f64:	90 e0       	ldi	r25, 0x00	; 0
    3f66:	6c e0       	ldi	r22, 0x0C	; 12
    3f68:	71 e0       	ldi	r23, 0x01	; 1
    3f6a:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
          }
#endif

        // Try to discover/force maximum WARM-mode setback with dark and long vacancy.
        setWarmModeDebounced(true);
    3f6e:	81 e0       	ldi	r24, 0x01	; 1
    3f70:	0e 94 3f 03 	call	0x67e	; 0x67e <setWarmModeDebounced(bool)>

    // Put directly into energy-conserving 'holiday mode' by making room appear to be 'long vacant'.
    // Be careful of retriggering presence immediately if this is set locally.
    // Set apparent vacancy to maximum to make setting obvious and to hide further vacancy from snooping.
    // Code elsewhere may wish to put the system in FROST mode also.
    void setHolidayMode() { activityCountdownM = 0; value = 0; occupationCountdownM = 0; vacancyH = 255U; }
    3f74:	10 92 1a 02 	sts	0x021A, r1
    3f78:	10 92 18 02 	sts	0x0218, r1
    3f7c:	10 92 19 02 	sts	0x0219, r1
    3f80:	a0 92 1b 02 	sts	0x021B, r10
#ifdef OCCUPANCY_SUPPORT
//        Occupancy._TEST_set_vacH_(OccupancyTracker::longLongVacantHThrH+1);
        Occupancy.setHolidayMode();
#endif
        NominalRadValve.computeTargetTemperature();
    3f84:	8d e1       	ldi	r24, 0x1D	; 29
    3f86:	92 e0       	ldi	r25, 0x02	; 2
    3f88:	0e 94 fb 07 	call	0xff6	; 0xff6 <ModelledRadValve::computeTargetTemperature()>
        int8_t setback = getWARMTargetC() - NominalRadValve.getTargetTempC();
    3f8c:	0e 94 5e 03 	call	0x6bc	; 0x6bc <getWARMTargetC()>
    3f90:	90 91 20 02 	lds	r25, 0x0220
    3f94:	18 2f       	mov	r17, r24
    3f96:	19 1b       	sub	r17, r25
        if(setback > 0)
    3f98:	11 16       	cp	r1, r17
    3f9a:	cc f4       	brge	.+50     	; 0x3fce <testTargetComputation()+0x1ec>
DEBUG_SERIAL_PRINT(setback);
DEBUG_SERIAL_PRINT(hasEcoBias() ? F(" eco") : F(" com"));
if(AmbLight.isRoomDark()) { DEBUG_SERIAL_PRINT(F(" isDark")); }
DEBUG_SERIAL_PRINTLN();
#endif
          if(hasEcoBias()) { maxEcoSetback = max(maxEcoSetback, setback); }
    3f9c:	0e 94 8f 03 	call	0x71e	; 0x71e <hasEcoBias()>
    3fa0:	21 2f       	mov	r18, r17
    3fa2:	33 27       	eor	r19, r19
    3fa4:	27 fd       	sbrc	r18, 7
    3fa6:	30 95       	com	r19
    3fa8:	88 23       	and	r24, r24
    3faa:	49 f0       	breq	.+18     	; 0x3fbe <testTargetComputation()+0x1dc>
    3fac:	c9 01       	movw	r24, r18
    3fae:	2b 2d       	mov	r18, r11
    3fb0:	30 e0       	ldi	r19, 0x00	; 0
    3fb2:	82 17       	cp	r24, r18
    3fb4:	93 07       	cpc	r25, r19
    3fb6:	0c f4       	brge	.+2      	; 0x3fba <testTargetComputation()+0x1d8>
    3fb8:	c9 01       	movw	r24, r18
    3fba:	b8 2e       	mov	r11, r24
    3fbc:	08 c0       	rjmp	.+16     	; 0x3fce <testTargetComputation()+0x1ec>
          else { maxComSetback = max(maxComSetback, setback); }
    3fbe:	c9 01       	movw	r24, r18
    3fc0:	20 2f       	mov	r18, r16
    3fc2:	30 e0       	ldi	r19, 0x00	; 0
    3fc4:	82 17       	cp	r24, r18
    3fc6:	93 07       	cpc	r25, r19
    3fc8:	0c f4       	brge	.+2      	; 0x3fcc <testTargetComputation()+0x1ea>
    3fca:	c9 01       	movw	r24, r18
    3fcc:	08 2f       	mov	r16, r24
      {
#ifndef OMIT_MODULE_LDROCCUPANCYDETECTION
      AmbLight._TEST_set_multi_((j != 0) ? 1023 : 0, j != 0);
#endif
      // Systematically work through all schedule states, ending at 0 (no override).
      for(int k = _TEST_schedule_override_MAX+1; --k >= 0; )
    3fce:	21 97       	sbiw	r28, 0x01	; 1
    3fd0:	8f ef       	ldi	r24, 0xFF	; 255
    3fd2:	cf 3f       	cpi	r28, 0xFF	; 255
    3fd4:	d8 07       	cpc	r29, r24
    3fd6:	09 f0       	breq	.+2      	; 0x3fda <testTargetComputation()+0x1f8>
    3fd8:	3d cf       	rjmp	.-390    	; 0x3e54 <testTargetComputation()+0x72>

#ifdef UNIT_TESTS
    // If true then mark as occupied else mark as unoccupied.
    // Hides basic _TEST_set_() which would not behave as expected.
    virtual void _TEST_set_(const bool occupied)
      { if(occupied) { markAsOccupied(); } else { activityCountdownM = 0; value = 0; occupationCountdownM = 0; } }
    3fda:	10 92 1a 02 	sts	0x021A, r1
    3fde:	10 92 18 02 	sts	0x0218, r1
    3fe2:	10 92 19 02 	sts	0x0219, r1
      // ENERGY SAVING RULE TEST (TODO-442 1c: "Prewarm temperature must be set back from normal WARM target.")
#ifdef OCCUPANCY_SUPPORT
//      Occupancy._TEST_set_vacH_(randRNG8() % OccupancyTracker::longVacantHThrH); // Mark occupied or at least not long vacant.
      Occupancy._TEST_set_(false);
#endif
      setWarmModeDebounced(false);
    3fe6:	80 e0       	ldi	r24, 0x00	; 0
    3fe8:	0e 94 3f 03 	call	0x67e	; 0x67e <setWarmModeDebounced(bool)>
      _TEST_set_schedule_override(_soUT_soon);
    3fec:	82 e0       	ldi	r24, 0x02	; 2
    3fee:	90 e0       	ldi	r25, 0x00	; 0
    3ff0:	0e 94 b9 1a 	call	0x3572	; 0x3572 <_TEST_set_schedule_override(_TEST_schedule_override)>
      NominalRadValve.computeTargetTemperature();
    3ff4:	8d e1       	ldi	r24, 0x1D	; 29
    3ff6:	92 e0       	ldi	r25, 0x02	; 2
    3ff8:	0e 94 fb 07 	call	0xff6	; 0xff6 <ModelledRadValve::computeTargetTemperature()>
    // True if this unit is nominally calling for heat (temperature is under target).
    // Thread-safe and ISR safe.
    bool isCallingForHeat() const { return(callingForHeat); }

    // Get target temperature in C as computed by computeTargetTemperature().
    uint8_t getTargetTempC() const { return(inputState.targetTempC); }
    3ffc:	10 91 20 02 	lds	r17, 0x0220
      const uint8_t tTpw = NominalRadValve.getTargetTempC();
      _TEST_set_schedule_override(_soUT_now);
    4000:	83 e0       	ldi	r24, 0x03	; 3
    4002:	90 e0       	ldi	r25, 0x00	; 0
    4004:	0e 94 b9 1a 	call	0x3572	; 0x3572 <_TEST_set_schedule_override(_TEST_schedule_override)>
      setWarmModeDebounced(true);
    4008:	81 e0       	ldi	r24, 0x01	; 1
    400a:	0e 94 3f 03 	call	0x67e	; 0x67e <setWarmModeDebounced(bool)>
      NominalRadValve.computeTargetTemperature();
    400e:	8d e1       	ldi	r24, 0x1D	; 29
    4010:	92 e0       	ldi	r25, 0x02	; 2
    4012:	0e 94 fb 07 	call	0xff6	; 0xff6 <ModelledRadValve::computeTargetTemperature()>
      const uint8_t tTw = NominalRadValve.getTargetTempC();
      AssertIsTrue(tTpw < tTw);
    4016:	80 91 20 02 	lds	r24, 0x0220
    401a:	18 17       	cp	r17, r24
    401c:	30 f0       	brcs	.+12     	; 0x402a <testTargetComputation()+0x248>
    401e:	80 e0       	ldi	r24, 0x00	; 0
    4020:	90 e0       	ldi	r25, 0x00	; 0
    4022:	63 e3       	ldi	r22, 0x33	; 51
    4024:	71 e0       	ldi	r23, 0x01	; 1
    4026:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
      _TEST_set_schedule_override(_soUT_normal); // Override off...
    402a:	80 e0       	ldi	r24, 0x00	; 0
    402c:	90 e0       	ldi	r25, 0x00	; 0
    402e:	0e 94 b9 1a 	call	0x3572	; 0x3572 <_TEST_set_schedule_override(_TEST_schedule_override)>
  for(int i = _TEST_basetemp_override_MAX+1; --i >= 0; )
    {
    _TEST_set_basetemp_override((_TEST_basetemp_override)i);
#ifndef OMIT_MODULE_LDROCCUPANCYDETECTION
     // Test at high and low light levels.
     for(int j = 2; --j >= 0; )
    4032:	08 94       	sec
    4034:	e1 08       	sbc	r14, r1
    4036:	f1 08       	sbc	r15, r1
    4038:	8f ef       	ldi	r24, 0xFF	; 255
    403a:	e8 16       	cp	r14, r24
    403c:	8f ef       	ldi	r24, 0xFF	; 255
    403e:	f8 06       	cpc	r15, r24
    4040:	09 f0       	breq	.+2      	; 0x4044 <testTargetComputation()+0x262>
    4042:	ec ce       	rjmp	.-552    	; 0x3e1c <testTargetComputation()+0x3a>
  //   * light
  //   * schedule activation
  uint8_t maxEcoSetback = 0;
  uint8_t maxComSetback = 0;
  // Systematically work through multiple base temperatures, ending at no override.
  for(int i = _TEST_basetemp_override_MAX+1; --i >= 0; )
    4044:	08 94       	sec
    4046:	c1 08       	sbc	r12, r1
    4048:	d1 08       	sbc	r13, r1
    404a:	8f ef       	ldi	r24, 0xFF	; 255
    404c:	c8 16       	cp	r12, r24
    404e:	8f ef       	ldi	r24, 0xFF	; 255
    4050:	d8 06       	cpc	r13, r24
    4052:	09 f0       	breq	.+2      	; 0x4056 <testTargetComputation()+0x274>
    4054:	dc ce       	rjmp	.-584    	; 0x3e0e <testTargetComputation()+0x2c>
      _TEST_set_schedule_override(_soUT_normal); // Override off...
      }
    }

  // ENERGY SAVING RULE TEST (TODO-442 2b: "Setbacks of up to FULL (3C) must be possible in full eco mode.")
  AssertIsTrue(maxEcoSetback >= SETBACK_FULL);
    4056:	82 e0       	ldi	r24, 0x02	; 2
    4058:	8b 15       	cp	r24, r11
    405a:	30 f0       	brcs	.+12     	; 0x4068 <testTargetComputation()+0x286>
    405c:	80 e0       	ldi	r24, 0x00	; 0
    405e:	90 e0       	ldi	r25, 0x00	; 0
    4060:	69 e3       	ldi	r22, 0x39	; 57
    4062:	71 e0       	ldi	r23, 0x01	; 1
    4064:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  // ENERGY SAVING RULE TEST (TODO-442 2c: "Setbacks are at most 2C in comfort mode (but there is a setback).")
  AssertIsTrue(maxComSetback > 0);
    4068:	00 23       	and	r16, r16
    406a:	29 f4       	brne	.+10     	; 0x4076 <testTargetComputation()+0x294>
    406c:	80 e0       	ldi	r24, 0x00	; 0
    406e:	90 e0       	ldi	r25, 0x00	; 0
    4070:	6b e3       	ldi	r22, 0x3B	; 59
    4072:	71 e0       	ldi	r23, 0x01	; 1
    4074:	06 c0       	rjmp	.+12     	; 0x4082 <testTargetComputation()+0x2a0>
  AssertIsTrue(maxComSetback <= 2);
    4076:	03 30       	cpi	r16, 0x03	; 3
    4078:	30 f0       	brcs	.+12     	; 0x4086 <testTargetComputation()+0x2a4>
    407a:	80 e0       	ldi	r24, 0x00	; 0
    407c:	90 e0       	ldi	r25, 0x00	; 0
    407e:	6c e3       	ldi	r22, 0x3C	; 60
    4080:	71 e0       	ldi	r23, 0x01	; 1
    4082:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  }
    4086:	df 91       	pop	r29
    4088:	cf 91       	pop	r28
    408a:	1f 91       	pop	r17
    408c:	0f 91       	pop	r16
    408e:	ff 90       	pop	r15
    4090:	ef 90       	pop	r14
    4092:	df 90       	pop	r13
    4094:	cf 90       	pop	r12
    4096:	bf 90       	pop	r11
    4098:	af 90       	pop	r10
    409a:	08 95       	ret

0000409c <testSensorMocking()>:


// Test self-mocking of sensor modules (and others) to facilitate other unit tests. 
static void testSensorMocking()
    409c:	ff 92       	push	r15
    409e:	0f 93       	push	r16
    40a0:	1f 93       	push	r17
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testSensorMocking");
    40a2:	87 ec       	ldi	r24, 0xC7	; 199
    40a4:	91 e0       	ldi	r25, 0x01	; 1
    40a6:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <serialPrintlnAndFlush(__FlashStringHelper const*)>
    40aa:	ff 24       	eor	r15, r15
#ifndef OMIT_MODULE_LDROCCUPANCYDETECTION
  // Ambient light
  for(uint8_t i = 0; i < 2; ++i)
    {
    const uint8_t nal = randRNG8();
    40ac:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <randRNG8()>
    40b0:	18 2f       	mov	r17, r24
    const bool nil = randRNG8NextBoolean();
    40b2:	0e 94 83 1c 	call	0x3906	; 0x3906 <randRNG8NextBoolean()>
    40b6:	08 2f       	mov	r16, r24
    AmbLight._TEST_set_multi_(((uint16_t)nal)<<2, nil);
    40b8:	81 2f       	mov	r24, r17
    40ba:	90 e0       	ldi	r25, 0x00	; 0
    40bc:	88 0f       	add	r24, r24
    40be:	99 1f       	adc	r25, r25
    40c0:	88 0f       	add	r24, r24
    40c2:	99 1f       	adc	r25, r25

#ifdef UNIT_TESTS
    // Set new value(s) for unit test only.
    // Makes this more usable as a mock for testing other components.
    virtual void _TEST_set_multi_(uint16_t newRawValue, bool newRoomLitFlag)
      { rawValue = newRawValue; value = newRawValue >> 2; isRoomLitFlag = newRoomLitFlag; }
    40c4:	90 93 ef 02 	sts	0x02EF, r25
    40c8:	80 93 ee 02 	sts	0x02EE, r24
    40cc:	96 95       	lsr	r25
    40ce:	87 95       	ror	r24
    40d0:	96 95       	lsr	r25
    40d2:	87 95       	ror	r24
    40d4:	80 93 ed 02 	sts	0x02ED, r24
    40d8:	00 93 f0 02 	sts	0x02F0, r16
  public:
    // Return last value fetched by read(); undefined before first read().
    // Usually fast.
    // Often likely to be thread-safe or usable within ISRs (Interrupt Service Routines),
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual uint8_t get() const { return(value); }
    40dc:	60 91 ed 02 	lds	r22, 0x02ED
    AssertIsEqual(nal, AmbLight.get());
    40e0:	81 2f       	mov	r24, r17
    40e2:	90 e0       	ldi	r25, 0x00	; 0
    40e4:	70 e0       	ldi	r23, 0x00	; 0
    40e6:	4b e4       	ldi	r20, 0x4B	; 75
    40e8:	51 e0       	ldi	r21, 0x01	; 1
    40ea:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <errorIfNotEqual(int, int, int)>
    uint16_t getRaw() { return(rawValue); }

    // Returns true if room is lit enough for someone to be active.
    // False if unknown.
    // Thread-safe and usable within ISRs (Interrupt Service Routines).
    bool isRoomLit() const { return(isRoomLitFlag); }
    40ee:	80 91 f0 02 	lds	r24, 0x02F0
    AssertIsTrue(nil == AmbLight.isRoomLit());
    40f2:	08 17       	cp	r16, r24
    40f4:	31 f0       	breq	.+12     	; 0x4102 <testSensorMocking()+0x66>
    40f6:	80 e0       	ldi	r24, 0x00	; 0
    40f8:	90 e0       	ldi	r25, 0x00	; 0
    40fa:	6c e4       	ldi	r22, 0x4C	; 76
    40fc:	71 e0       	ldi	r23, 0x01	; 1
    40fe:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
    const uint8_t nal2 = randRNG8();
    4102:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <randRNG8()>
    // Set new value for unit test only.
    // May be just enough to allow get() to see the value for unit tests,
    // but will not deal with other aspects of sensor state.
    // Any call to read() or other mutators may overwrite/clear state that this sets.
    virtual void _TEST_set_(const uint8_t newValue)
      { value = newValue; }
    4106:	80 93 ed 02 	sts	0x02ED, r24
  public:
    // Return last value fetched by read(); undefined before first read().
    // Usually fast.
    // Often likely to be thread-safe or usable within ISRs (Interrupt Service Routines),
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual uint8_t get() const { return(value); }
    410a:	60 91 ed 02 	lds	r22, 0x02ED
    AmbLight._TEST_set_(nal2);
    AssertIsEqual(nal2, AmbLight.get());
    410e:	90 e0       	ldi	r25, 0x00	; 0
    4110:	70 e0       	ldi	r23, 0x00	; 0
    4112:	4f e4       	ldi	r20, 0x4F	; 79
    4114:	51 e0       	ldi	r21, 0x01	; 1
    4116:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <errorIfNotEqual(int, int, int)>
static void testSensorMocking()
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testSensorMocking");
#ifndef OMIT_MODULE_LDROCCUPANCYDETECTION
  // Ambient light
  for(uint8_t i = 0; i < 2; ++i)
    411a:	f3 94       	inc	r15
    411c:	82 e0       	ldi	r24, 0x02	; 2
    411e:	f8 16       	cp	r15, r24
    4120:	29 f6       	brne	.-118    	; 0x40ac <testSensorMocking()+0x10>

    // Put directly into energy-conserving 'holiday mode' by making room appear to be 'long vacant'.
    // Be careful of retriggering presence immediately if this is set locally.
    // Set apparent vacancy to maximum to make setting obvious and to hide further vacancy from snooping.
    // Code elsewhere may wish to put the system in FROST mode also.
    void setHolidayMode() { activityCountdownM = 0; value = 0; occupationCountdownM = 0; vacancyH = 255U; }
    4122:	10 92 1a 02 	sts	0x021A, r1
    4126:	10 92 18 02 	sts	0x0218, r1
    412a:	10 92 19 02 	sts	0x0219, r1
    412e:	8f ef       	ldi	r24, 0xFF	; 255
    4130:	80 93 1b 02 	sts	0x021B, r24
    4134:	60 91 18 02 	lds	r22, 0x0218
#ifdef OCCUPANCY_SUPPORT
  // Occupancy
//  const uint8_t vacH = randRNG8() | 1; // Ensure non-zero.
//  Occupancy._TEST_set_vacH_(vacH);
  Occupancy.setHolidayMode();
  AssertIsEqual(0, Occupancy.get());
    4138:	80 e0       	ldi	r24, 0x00	; 0
    413a:	90 e0       	ldi	r25, 0x00	; 0
    413c:	70 e0       	ldi	r23, 0x00	; 0
    413e:	47 e5       	ldi	r20, 0x57	; 87
    4140:	51 e0       	ldi	r21, 0x01	; 1
    4142:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <errorIfNotEqual(int, int, int)>
    // At other times more relaxed checking (eg lower power) can be used.
    bool increaseCheckForOccupancy() { return(!isLikelyRecentlyOccupied() && isLikelyOccupied() && !reportedRecently()); }

    // Get number of hours room vacant, zero when room occupied; does not wrap.
    // If forced to zero as soon as occupancy is detected.
    uint16_t getVacancyH() { return((value != 0) ? 0 : vacancyH); }
    4146:	80 91 18 02 	lds	r24, 0x0218
    414a:	88 23       	and	r24, r24
    414c:	19 f0       	breq	.+6      	; 0x4154 <testSensorMocking()+0xb8>
    414e:	60 e0       	ldi	r22, 0x00	; 0
    4150:	70 e0       	ldi	r23, 0x00	; 0
    4152:	04 c0       	rjmp	.+8      	; 0x415c <testSensorMocking()+0xc0>
    4154:	80 91 1b 02 	lds	r24, 0x021B
    4158:	68 2f       	mov	r22, r24
    415a:	70 e0       	ldi	r23, 0x00	; 0
  AssertIsEqual(255, Occupancy.getVacancyH());
    415c:	8f ef       	ldi	r24, 0xFF	; 255
    415e:	90 e0       	ldi	r25, 0x00	; 0
    4160:	48 e5       	ldi	r20, 0x58	; 88
    4162:	51 e0       	ldi	r21, 0x01	; 1
    4164:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <errorIfNotEqual(int, int, int)>

    // Returns true if the room appears to be likely occupied (with active users) now.
    // Operates on a timeout; calling markAsOccupied() restarts the timer.
    // Defaults to false (and API still exists) when OCCUPANCY_SUPPORT not defined.
    // Thread-safe.
    bool isLikelyOccupied() { return(0 != occupationCountdownM); }
    4168:	80 91 19 02 	lds	r24, 0x0219
  AssertIsTrue(Occupancy.isLikelyUnoccupied());
    416c:	88 23       	and	r24, r24
    416e:	31 f0       	breq	.+12     	; 0x417c <testSensorMocking()+0xe0>
    4170:	80 e0       	ldi	r24, 0x00	; 0
    4172:	90 e0       	ldi	r25, 0x00	; 0
    4174:	69 e5       	ldi	r22, 0x59	; 89
    4176:	71 e0       	ldi	r23, 0x01	; 1
    4178:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
    // Do not call based on internal/synthetic events.
    // Such evidence may include operation of buttons (etc) on the unit or PIR.
    // Do not call from (for example) 'on' schedule change.
    // Makes occupation immediately visible.
    // Thread-safe and ISR-safe.
    void markAsOccupied() { value = 100; occupationCountdownM = OCCUPATION_TIMEOUT_M; activityCountdownM = 2; }
    417c:	84 e6       	ldi	r24, 0x64	; 100
    417e:	80 93 18 02 	sts	0x0218, r24
    4182:	82 e3       	ldi	r24, 0x32	; 50
    4184:	80 93 19 02 	sts	0x0219, r24
    4188:	82 e0       	ldi	r24, 0x02	; 2
    418a:	80 93 1a 02 	sts	0x021A, r24
    // At other times more relaxed checking (eg lower power) can be used.
    bool increaseCheckForOccupancy() { return(!isLikelyRecentlyOccupied() && isLikelyOccupied() && !reportedRecently()); }

    // Get number of hours room vacant, zero when room occupied; does not wrap.
    // If forced to zero as soon as occupancy is detected.
    uint16_t getVacancyH() { return((value != 0) ? 0 : vacancyH); }
    418e:	80 91 18 02 	lds	r24, 0x0218
    4192:	88 23       	and	r24, r24
    4194:	19 f0       	breq	.+6      	; 0x419c <testSensorMocking()+0x100>
    4196:	60 e0       	ldi	r22, 0x00	; 0
    4198:	70 e0       	ldi	r23, 0x00	; 0
    419a:	04 c0       	rjmp	.+8      	; 0x41a4 <testSensorMocking()+0x108>
    419c:	80 91 1b 02 	lds	r24, 0x021B
    41a0:	68 2f       	mov	r22, r24
    41a2:	70 e0       	ldi	r23, 0x00	; 0
//    Occupancy._TEST_set_vacH_(0);
  Occupancy._TEST_set_(true);
  AssertIsEqual(0, Occupancy.getVacancyH());
    41a4:	80 e0       	ldi	r24, 0x00	; 0
    41a6:	90 e0       	ldi	r25, 0x00	; 0
    41a8:	4c e5       	ldi	r20, 0x5C	; 92
    41aa:	51 e0       	ldi	r21, 0x01	; 1
    41ac:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <errorIfNotEqual(int, int, int)>
    41b0:	80 91 18 02 	lds	r24, 0x0218
  AssertIsTrue(0 != Occupancy.get());
    41b4:	88 23       	and	r24, r24
    41b6:	31 f4       	brne	.+12     	; 0x41c4 <testSensorMocking()+0x128>
    41b8:	80 e0       	ldi	r24, 0x00	; 0
    41ba:	90 e0       	ldi	r25, 0x00	; 0
    41bc:	6d e5       	ldi	r22, 0x5D	; 93
    41be:	71 e0       	ldi	r23, 0x01	; 1
    41c0:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>

    // Returns true if the room appears to be likely occupied (with active users) now.
    // Operates on a timeout; calling markAsOccupied() restarts the timer.
    // Defaults to false (and API still exists) when OCCUPANCY_SUPPORT not defined.
    // Thread-safe.
    bool isLikelyOccupied() { return(0 != occupationCountdownM); }
    41c4:	80 91 19 02 	lds	r24, 0x0219
  AssertIsTrue(Occupancy.isLikelyOccupied());
    41c8:	88 23       	and	r24, r24
    41ca:	31 f4       	brne	.+12     	; 0x41d8 <testSensorMocking()+0x13c>
    41cc:	80 e0       	ldi	r24, 0x00	; 0
    41ce:	90 e0       	ldi	r25, 0x00	; 0
    41d0:	6e e5       	ldi	r22, 0x5E	; 94
    41d2:	71 e0       	ldi	r23, 0x01	; 1
    41d4:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
#endif
  // Schedule
  _TEST_set_schedule_override(_soUT_now);
    41d8:	83 e0       	ldi	r24, 0x03	; 3
    41da:	90 e0       	ldi	r25, 0x00	; 0
    41dc:	0e 94 b9 1a 	call	0x3572	; 0x3572 <_TEST_set_schedule_override(_TEST_schedule_override)>
  AssertIsTrue(isAnySimpleScheduleSet());
    41e0:	0e 94 de 1a 	call	0x35bc	; 0x35bc <isAnySimpleScheduleSet()>
    41e4:	88 23       	and	r24, r24
    41e6:	31 f4       	brne	.+12     	; 0x41f4 <testSensorMocking()+0x158>
    41e8:	80 e0       	ldi	r24, 0x00	; 0
    41ea:	90 e0       	ldi	r25, 0x00	; 0
    41ec:	62 e6       	ldi	r22, 0x62	; 98
    41ee:	71 e0       	ldi	r23, 0x01	; 1
    41f0:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrue(isAnyScheduleOnWARMNow());
    41f4:	0e 94 76 1b 	call	0x36ec	; 0x36ec <isAnyScheduleOnWARMNow()>
    41f8:	88 23       	and	r24, r24
    41fa:	31 f4       	brne	.+12     	; 0x4208 <testSensorMocking()+0x16c>
    41fc:	80 e0       	ldi	r24, 0x00	; 0
    41fe:	90 e0       	ldi	r25, 0x00	; 0
    4200:	63 e6       	ldi	r22, 0x63	; 99
    4202:	71 e0       	ldi	r23, 0x01	; 1
    4204:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrue(!isAnyScheduleOnWARMSoon());
    4208:	0e 94 2a 1b 	call	0x3654	; 0x3654 <isAnyScheduleOnWARMSoon()>
    420c:	88 23       	and	r24, r24
    420e:	31 f0       	breq	.+12     	; 0x421c <testSensorMocking()+0x180>
    4210:	80 e0       	ldi	r24, 0x00	; 0
    4212:	90 e0       	ldi	r25, 0x00	; 0
    4214:	64 e6       	ldi	r22, 0x64	; 100
    4216:	71 e0       	ldi	r23, 0x01	; 1
    4218:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  _TEST_set_schedule_override(_soUT_soon);
    421c:	82 e0       	ldi	r24, 0x02	; 2
    421e:	90 e0       	ldi	r25, 0x00	; 0
    4220:	0e 94 b9 1a 	call	0x3572	; 0x3572 <_TEST_set_schedule_override(_TEST_schedule_override)>
  AssertIsTrue(isAnySimpleScheduleSet());
    4224:	0e 94 de 1a 	call	0x35bc	; 0x35bc <isAnySimpleScheduleSet()>
    4228:	88 23       	and	r24, r24
    422a:	31 f4       	brne	.+12     	; 0x4238 <testSensorMocking()+0x19c>
    422c:	80 e0       	ldi	r24, 0x00	; 0
    422e:	90 e0       	ldi	r25, 0x00	; 0
    4230:	66 e6       	ldi	r22, 0x66	; 102
    4232:	71 e0       	ldi	r23, 0x01	; 1
    4234:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrue(!isAnyScheduleOnWARMNow());
    4238:	0e 94 76 1b 	call	0x36ec	; 0x36ec <isAnyScheduleOnWARMNow()>
    423c:	88 23       	and	r24, r24
    423e:	31 f0       	breq	.+12     	; 0x424c <testSensorMocking()+0x1b0>
    4240:	80 e0       	ldi	r24, 0x00	; 0
    4242:	90 e0       	ldi	r25, 0x00	; 0
    4244:	67 e6       	ldi	r22, 0x67	; 103
    4246:	71 e0       	ldi	r23, 0x01	; 1
    4248:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrue(isAnyScheduleOnWARMSoon());
    424c:	0e 94 2a 1b 	call	0x3654	; 0x3654 <isAnyScheduleOnWARMSoon()>
    4250:	88 23       	and	r24, r24
    4252:	31 f4       	brne	.+12     	; 0x4260 <testSensorMocking()+0x1c4>
    4254:	80 e0       	ldi	r24, 0x00	; 0
    4256:	90 e0       	ldi	r25, 0x00	; 0
    4258:	68 e6       	ldi	r22, 0x68	; 104
    425a:	71 e0       	ldi	r23, 0x01	; 1
    425c:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  _TEST_set_schedule_override(_soUT_off);
    4260:	81 e0       	ldi	r24, 0x01	; 1
    4262:	90 e0       	ldi	r25, 0x00	; 0
    4264:	0e 94 b9 1a 	call	0x3572	; 0x3572 <_TEST_set_schedule_override(_TEST_schedule_override)>
  AssertIsTrue(!isAnySimpleScheduleSet());
    4268:	0e 94 de 1a 	call	0x35bc	; 0x35bc <isAnySimpleScheduleSet()>
    426c:	88 23       	and	r24, r24
    426e:	31 f0       	breq	.+12     	; 0x427c <testSensorMocking()+0x1e0>
    4270:	80 e0       	ldi	r24, 0x00	; 0
    4272:	90 e0       	ldi	r25, 0x00	; 0
    4274:	6a e6       	ldi	r22, 0x6A	; 106
    4276:	71 e0       	ldi	r23, 0x01	; 1
    4278:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrue(!isAnyScheduleOnWARMNow());
    427c:	0e 94 76 1b 	call	0x36ec	; 0x36ec <isAnyScheduleOnWARMNow()>
    4280:	88 23       	and	r24, r24
    4282:	31 f0       	breq	.+12     	; 0x4290 <testSensorMocking()+0x1f4>
    4284:	80 e0       	ldi	r24, 0x00	; 0
    4286:	90 e0       	ldi	r25, 0x00	; 0
    4288:	6b e6       	ldi	r22, 0x6B	; 107
    428a:	71 e0       	ldi	r23, 0x01	; 1
    428c:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrue(!isAnyScheduleOnWARMSoon());
    4290:	0e 94 2a 1b 	call	0x3654	; 0x3654 <isAnyScheduleOnWARMSoon()>
    4294:	88 23       	and	r24, r24
    4296:	31 f0       	breq	.+12     	; 0x42a4 <testSensorMocking()+0x208>
    4298:	80 e0       	ldi	r24, 0x00	; 0
    429a:	90 e0       	ldi	r25, 0x00	; 0
    429c:	6c e6       	ldi	r22, 0x6C	; 108
    429e:	71 e0       	ldi	r23, 0x01	; 1
    42a0:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  _TEST_set_schedule_override(_soUT_normal); // Override off.
    42a4:	80 e0       	ldi	r24, 0x00	; 0
    42a6:	90 e0       	ldi	r25, 0x00	; 0
    42a8:	0e 94 b9 1a 	call	0x3572	; 0x3572 <_TEST_set_schedule_override(_TEST_schedule_override)>
  // Base temperature
  _TEST_set_basetemp_override(_btoUT_min);
    42ac:	81 e0       	ldi	r24, 0x01	; 1
    42ae:	90 e0       	ldi	r25, 0x00	; 0
    42b0:	0e 94 59 03 	call	0x6b2	; 0x6b2 <_TEST_set_basetemp_override(_TEST_basetemp_override)>
  AssertIsTrue(hasEcoBias());
    42b4:	0e 94 8f 03 	call	0x71e	; 0x71e <hasEcoBias()>
    42b8:	88 23       	and	r24, r24
    42ba:	31 f4       	brne	.+12     	; 0x42c8 <testSensorMocking()+0x22c>
    42bc:	80 e0       	ldi	r24, 0x00	; 0
    42be:	90 e0       	ldi	r25, 0x00	; 0
    42c0:	60 e7       	ldi	r22, 0x70	; 112
    42c2:	71 e0       	ldi	r23, 0x01	; 1
    42c4:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrue(getWARMTargetC() <= BIASECO_WARM);
    42c8:	0e 94 5e 03 	call	0x6bc	; 0x6bc <getWARMTargetC()>
    42cc:	82 31       	cpi	r24, 0x12	; 18
    42ce:	30 f0       	brcs	.+12     	; 0x42dc <testSensorMocking()+0x240>
    42d0:	80 e0       	ldi	r24, 0x00	; 0
    42d2:	90 e0       	ldi	r25, 0x00	; 0
    42d4:	61 e7       	ldi	r22, 0x71	; 113
    42d6:	71 e0       	ldi	r23, 0x01	; 1
    42d8:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  _TEST_set_basetemp_override(_btoUT_mid);
    42dc:	82 e0       	ldi	r24, 0x02	; 2
    42de:	90 e0       	ldi	r25, 0x00	; 0
    42e0:	0e 94 59 03 	call	0x6b2	; 0x6b2 <_TEST_set_basetemp_override(_TEST_basetemp_override)>
  AssertIsTrue(hasEcoBias());
    42e4:	0e 94 8f 03 	call	0x71e	; 0x71e <hasEcoBias()>
    42e8:	88 23       	and	r24, r24
    42ea:	31 f4       	brne	.+12     	; 0x42f8 <testSensorMocking()+0x25c>
    42ec:	80 e0       	ldi	r24, 0x00	; 0
    42ee:	90 e0       	ldi	r25, 0x00	; 0
    42f0:	63 e7       	ldi	r22, 0x73	; 115
    42f2:	71 e0       	ldi	r23, 0x01	; 1
    42f4:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrue(getWARMTargetC() > BIASECO_WARM);
    42f8:	0e 94 5e 03 	call	0x6bc	; 0x6bc <getWARMTargetC()>
    42fc:	82 31       	cpi	r24, 0x12	; 18
    42fe:	30 f4       	brcc	.+12     	; 0x430c <testSensorMocking()+0x270>
    4300:	80 e0       	ldi	r24, 0x00	; 0
    4302:	90 e0       	ldi	r25, 0x00	; 0
    4304:	64 e7       	ldi	r22, 0x74	; 116
    4306:	71 e0       	ldi	r23, 0x01	; 1
    4308:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrue(getWARMTargetC() < BIASCOM_WARM);
    430c:	0e 94 5e 03 	call	0x6bc	; 0x6bc <getWARMTargetC()>
    4310:	85 31       	cpi	r24, 0x15	; 21
    4312:	30 f0       	brcs	.+12     	; 0x4320 <testSensorMocking()+0x284>
    4314:	80 e0       	ldi	r24, 0x00	; 0
    4316:	90 e0       	ldi	r25, 0x00	; 0
    4318:	65 e7       	ldi	r22, 0x75	; 117
    431a:	71 e0       	ldi	r23, 0x01	; 1
    431c:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  _TEST_set_basetemp_override(_btoUT_max);
    4320:	83 e0       	ldi	r24, 0x03	; 3
    4322:	90 e0       	ldi	r25, 0x00	; 0
    4324:	0e 94 59 03 	call	0x6b2	; 0x6b2 <_TEST_set_basetemp_override(_TEST_basetemp_override)>
  AssertIsTrue(!hasEcoBias());
    4328:	0e 94 8f 03 	call	0x71e	; 0x71e <hasEcoBias()>
    432c:	88 23       	and	r24, r24
    432e:	31 f0       	breq	.+12     	; 0x433c <testSensorMocking()+0x2a0>
    4330:	80 e0       	ldi	r24, 0x00	; 0
    4332:	90 e0       	ldi	r25, 0x00	; 0
    4334:	67 e7       	ldi	r22, 0x77	; 119
    4336:	71 e0       	ldi	r23, 0x01	; 1
    4338:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrue(getWARMTargetC() >= BIASCOM_WARM);
    433c:	0e 94 5e 03 	call	0x6bc	; 0x6bc <getWARMTargetC()>
    4340:	85 31       	cpi	r24, 0x15	; 21
    4342:	30 f4       	brcc	.+12     	; 0x4350 <testSensorMocking()+0x2b4>
    4344:	80 e0       	ldi	r24, 0x00	; 0
    4346:	90 e0       	ldi	r25, 0x00	; 0
    4348:	68 e7       	ldi	r22, 0x78	; 120
    434a:	71 e0       	ldi	r23, 0x01	; 1
    434c:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  _TEST_set_basetemp_override(_btoUT_normal); // Override off.
    4350:	80 e0       	ldi	r24, 0x00	; 0
    4352:	90 e0       	ldi	r25, 0x00	; 0
    4354:	0e 94 59 03 	call	0x6b2	; 0x6b2 <_TEST_set_basetemp_override(_TEST_basetemp_override)>
  }
    4358:	1f 91       	pop	r17
    435a:	0f 91       	pop	r16
    435c:	ff 90       	pop	r15
    435e:	08 95       	ret

00004360 <testModeControls()>:
  
// Test basic behaviour of system mode setting and some basic parameters.
static void testModeControls()
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testModeControls");
    4360:	89 ed       	ldi	r24, 0xD9	; 217
    4362:	91 e0       	ldi	r25, 0x01	; 1
    4364:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <serialPrintlnAndFlush(__FlashStringHelper const*)>
  AssertIsTrue(!(inBakeMode() && !inWarmMode())); // Check not in initial illegal combination.
    4368:	0e 94 46 03 	call	0x68c	; 0x68c <inBakeMode()>
    436c:	88 23       	and	r24, r24
    436e:	51 f0       	breq	.+20     	; 0x4384 <testModeControls()+0x24>
    4370:	0e 94 3c 03 	call	0x678	; 0x678 <inWarmMode()>
    4374:	88 23       	and	r24, r24
    4376:	31 f4       	brne	.+12     	; 0x4384 <testModeControls()+0x24>
    4378:	80 e0       	ldi	r24, 0x00	; 0
    437a:	90 e0       	ldi	r25, 0x00	; 0
    437c:	60 e8       	ldi	r22, 0x80	; 128
    437e:	71 e0       	ldi	r23, 0x01	; 1
    4380:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  setWarmModeDebounced(false);
    4384:	80 e0       	ldi	r24, 0x00	; 0
    4386:	0e 94 3f 03 	call	0x67e	; 0x67e <setWarmModeDebounced(bool)>
  AssertIsTrue(!inWarmMode());
    438a:	0e 94 3c 03 	call	0x678	; 0x678 <inWarmMode()>
    438e:	88 23       	and	r24, r24
    4390:	31 f0       	breq	.+12     	; 0x439e <testModeControls()+0x3e>
    4392:	80 e0       	ldi	r24, 0x00	; 0
    4394:	90 e0       	ldi	r25, 0x00	; 0
    4396:	62 e8       	ldi	r22, 0x82	; 130
    4398:	71 e0       	ldi	r23, 0x01	; 1
    439a:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrue(!inBakeMode());
    439e:	0e 94 46 03 	call	0x68c	; 0x68c <inBakeMode()>
    43a2:	88 23       	and	r24, r24
    43a4:	31 f0       	breq	.+12     	; 0x43b2 <testModeControls()+0x52>
    43a6:	80 e0       	ldi	r24, 0x00	; 0
    43a8:	90 e0       	ldi	r25, 0x00	; 0
    43aa:	63 e8       	ldi	r22, 0x83	; 131
    43ac:	71 e0       	ldi	r23, 0x01	; 1
    43ae:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  setWarmModeDebounced(true);
    43b2:	81 e0       	ldi	r24, 0x01	; 1
    43b4:	0e 94 3f 03 	call	0x67e	; 0x67e <setWarmModeDebounced(bool)>
  AssertIsTrue(inWarmMode());
    43b8:	0e 94 3c 03 	call	0x678	; 0x678 <inWarmMode()>
    43bc:	88 23       	and	r24, r24
    43be:	31 f4       	brne	.+12     	; 0x43cc <testModeControls()+0x6c>
    43c0:	80 e0       	ldi	r24, 0x00	; 0
    43c2:	90 e0       	ldi	r25, 0x00	; 0
    43c4:	65 e8       	ldi	r22, 0x85	; 133
    43c6:	71 e0       	ldi	r23, 0x01	; 1
    43c8:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrue(!inBakeMode());
    43cc:	0e 94 46 03 	call	0x68c	; 0x68c <inBakeMode()>
    43d0:	88 23       	and	r24, r24
    43d2:	31 f0       	breq	.+12     	; 0x43e0 <testModeControls()+0x80>
    43d4:	80 e0       	ldi	r24, 0x00	; 0
    43d6:	90 e0       	ldi	r25, 0x00	; 0
    43d8:	66 e8       	ldi	r22, 0x86	; 134
    43da:	71 e0       	ldi	r23, 0x01	; 1
    43dc:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  setWarmModeDebounced(false);
    43e0:	80 e0       	ldi	r24, 0x00	; 0
    43e2:	0e 94 3f 03 	call	0x67e	; 0x67e <setWarmModeDebounced(bool)>
  AssertIsTrue(!inWarmMode());
    43e6:	0e 94 3c 03 	call	0x678	; 0x678 <inWarmMode()>
    43ea:	88 23       	and	r24, r24
    43ec:	31 f0       	breq	.+12     	; 0x43fa <testModeControls()+0x9a>
    43ee:	80 e0       	ldi	r24, 0x00	; 0
    43f0:	90 e0       	ldi	r25, 0x00	; 0
    43f2:	68 e8       	ldi	r22, 0x88	; 136
    43f4:	71 e0       	ldi	r23, 0x01	; 1
    43f6:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrue(!inBakeMode());
    43fa:	0e 94 46 03 	call	0x68c	; 0x68c <inBakeMode()>
    43fe:	88 23       	and	r24, r24
    4400:	31 f0       	breq	.+12     	; 0x440e <testModeControls()+0xae>
    4402:	80 e0       	ldi	r24, 0x00	; 0
    4404:	90 e0       	ldi	r25, 0x00	; 0
    4406:	69 e8       	ldi	r22, 0x89	; 137
    4408:	71 e0       	ldi	r23, 0x01	; 1
    440a:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  startBakeDebounced();
    440e:	0e 94 52 03 	call	0x6a4	; 0x6a4 <startBakeDebounced()>
  AssertIsTrue(inWarmMode());
    4412:	0e 94 3c 03 	call	0x678	; 0x678 <inWarmMode()>
    4416:	88 23       	and	r24, r24
    4418:	31 f4       	brne	.+12     	; 0x4426 <testModeControls()+0xc6>
    441a:	80 e0       	ldi	r24, 0x00	; 0
    441c:	90 e0       	ldi	r25, 0x00	; 0
    441e:	6b e8       	ldi	r22, 0x8B	; 139
    4420:	71 e0       	ldi	r23, 0x01	; 1
    4422:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrue(inBakeMode());
    4426:	0e 94 46 03 	call	0x68c	; 0x68c <inBakeMode()>
    442a:	88 23       	and	r24, r24
    442c:	31 f4       	brne	.+12     	; 0x443a <testModeControls()+0xda>
    442e:	80 e0       	ldi	r24, 0x00	; 0
    4430:	90 e0       	ldi	r25, 0x00	; 0
    4432:	6c e8       	ldi	r22, 0x8C	; 140
    4434:	71 e0       	ldi	r23, 0x01	; 1
    4436:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  cancelBakeDebounced();
    443a:	0e 94 4f 03 	call	0x69e	; 0x69e <cancelBakeDebounced()>
  AssertIsTrue(inWarmMode());
    443e:	0e 94 3c 03 	call	0x678	; 0x678 <inWarmMode()>
    4442:	88 23       	and	r24, r24
    4444:	31 f4       	brne	.+12     	; 0x4452 <testModeControls()+0xf2>
    4446:	80 e0       	ldi	r24, 0x00	; 0
    4448:	90 e0       	ldi	r25, 0x00	; 0
    444a:	6e e8       	ldi	r22, 0x8E	; 142
    444c:	71 e0       	ldi	r23, 0x01	; 1
    444e:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrue(!inBakeMode());
    4452:	0e 94 46 03 	call	0x68c	; 0x68c <inBakeMode()>
    4456:	88 23       	and	r24, r24
    4458:	31 f0       	breq	.+12     	; 0x4466 <testModeControls()+0x106>
    445a:	80 e0       	ldi	r24, 0x00	; 0
    445c:	90 e0       	ldi	r25, 0x00	; 0
    445e:	6f e8       	ldi	r22, 0x8F	; 143
    4460:	71 e0       	ldi	r23, 0x01	; 1
    4462:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  setWarmModeDebounced(false);
    4466:	80 e0       	ldi	r24, 0x00	; 0
    4468:	0e 94 3f 03 	call	0x67e	; 0x67e <setWarmModeDebounced(bool)>
  AssertIsTrue(!inWarmMode());
    446c:	0e 94 3c 03 	call	0x678	; 0x678 <inWarmMode()>
    4470:	88 23       	and	r24, r24
    4472:	31 f0       	breq	.+12     	; 0x4480 <testModeControls()+0x120>
    4474:	80 e0       	ldi	r24, 0x00	; 0
    4476:	90 e0       	ldi	r25, 0x00	; 0
    4478:	61 e9       	ldi	r22, 0x91	; 145
    447a:	71 e0       	ldi	r23, 0x01	; 1
    447c:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrue(!inBakeMode());
    4480:	0e 94 46 03 	call	0x68c	; 0x68c <inBakeMode()>
    4484:	88 23       	and	r24, r24
    4486:	31 f0       	breq	.+12     	; 0x4494 <testModeControls()+0x134>
    4488:	80 e0       	ldi	r24, 0x00	; 0
    448a:	90 e0       	ldi	r25, 0x00	; 0
    448c:	62 e9       	ldi	r22, 0x92	; 146
    448e:	71 e0       	ldi	r23, 0x01	; 1
    4490:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
    4494:	08 95       	ret

00004496 <testJSONStats()>:
    AssertIsTrue(tQ <= 6);
    }
  }

// Test handling of JSON stats.
static void testJSONStats()
    4496:	af 92       	push	r10
    4498:	bf 92       	push	r11
    449a:	cf 92       	push	r12
    449c:	df 92       	push	r13
    449e:	ef 92       	push	r14
    44a0:	0f 93       	push	r16
    44a2:	1f 93       	push	r17
    44a4:	df 93       	push	r29
    44a6:	cf 93       	push	r28
    44a8:	cd b7       	in	r28, 0x3d	; 61
    44aa:	de b7       	in	r29, 0x3e	; 62
    44ac:	c1 55       	subi	r28, 0x51	; 81
    44ae:	d0 40       	sbci	r29, 0x00	; 0
    44b0:	0f b6       	in	r0, 0x3f	; 63
    44b2:	f8 94       	cli
    44b4:	de bf       	out	0x3e, r29	; 62
    44b6:	0f be       	out	0x3f, r0	; 63
    44b8:	cd bf       	out	0x3d, r28	; 61
  {
#if defined(ALLOW_JSON_OUTPUT)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testJSONStats");
    44ba:	81 e2       	ldi	r24, 0x21	; 33
    44bc:	92 e0       	ldi	r25, 0x02	; 2
    44be:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <serialPrintlnAndFlush(__FlashStringHelper const*)>

    // Initialise base with appropriate storage (non-null) and capacity knowledge.
    SimpleStatsRotationBase(DescValueTuple *_stats, const uint8_t _capacity)
      : capacity(_capacity), stats(_stats), nStats(0),
        lastTXed(~0), lastTXedLoPri(~0), lastTXedHiPri(~0), // Show the first item on the first pass...
        id(NULL)
    44c2:	82 e0       	ldi	r24, 0x02	; 2
    44c4:	89 83       	std	Y+1, r24	; 0x01
    // The default sensitivity is set to forbid transmission at all but minimum (0) leaf TX security settings.
    // By default the stat is normal priority.
    GenericStatsDescriptor(const char * const statKey,
                           const uint8_t statSensitivity = 1,
                           const bool statHighPriority = false)
      : key(statKey), sensitivity(statSensitivity), highPriority(statHighPriority)
    44c6:	1c 86       	std	Y+12, r1	; 0x0c
    44c8:	1b 86       	std	Y+11, r1	; 0x0b
    44ca:	91 e0       	ldi	r25, 0x01	; 1
    44cc:	9d 87       	std	Y+13, r25	; 0x0d
    44ce:	1e 86       	std	Y+14, r1	; 0x0e
#endif

  protected:
    struct DescValueTuple
      {
      DescValueTuple() : descriptor(NULL), value(0) { }
    44d0:	18 8a       	std	Y+16, r1	; 0x10
    44d2:	1f 86       	std	Y+15, r1	; 0x0f
      int value;

      // Various run-time flags.
      struct Flags
        {
        Flags() : changed(false) { }
    44d4:	89 89       	ldd	r24, Y+17	; 0x11
    44d6:	8e 7f       	andi	r24, 0xFE	; 254
    44d8:	89 8b       	std	Y+17, r24	; 0x11
    // The default sensitivity is set to forbid transmission at all but minimum (0) leaf TX security settings.
    // By default the stat is normal priority.
    GenericStatsDescriptor(const char * const statKey,
                           const uint8_t statSensitivity = 1,
                           const bool statHighPriority = false)
      : key(statKey), sensitivity(statSensitivity), highPriority(statHighPriority)
    44da:	1b 8a       	std	Y+19, r1	; 0x13
    44dc:	1a 8a       	std	Y+18, r1	; 0x12
    44de:	9c 8b       	std	Y+20, r25	; 0x14
    44e0:	1d 8a       	std	Y+21, r1	; 0x15
#endif

  protected:
    struct DescValueTuple
      {
      DescValueTuple() : descriptor(NULL), value(0) { }
    44e2:	1f 8a       	std	Y+23, r1	; 0x17
    44e4:	1e 8a       	std	Y+22, r1	; 0x16
      int value;

      // Various run-time flags.
      struct Flags
        {
        Flags() : changed(false) { }
    44e6:	88 8d       	ldd	r24, Y+24	; 0x18
    44e8:	8e 7f       	andi	r24, 0xFE	; 254
    44ea:	88 8f       	std	Y+24, r24	; 0x18
    // is displayed immediately after the @/ID field when enabled,
    // and missing count values suggest a lost transmission somewhere.
    // Takes minimal space (1 byte).
    struct WriteCount
      {
      WriteCount() : enabled(0), count(0) { }
    44ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    44ee:	80 7f       	andi	r24, 0xF0	; 240
    44f0:	8a 87       	std	Y+10, r24	; 0x0a

    // Initialise base with appropriate storage (non-null) and capacity knowledge.
    SimpleStatsRotationBase(DescValueTuple *_stats, const uint8_t _capacity)
      : capacity(_capacity), stats(_stats), nStats(0),
        lastTXed(~0), lastTXedLoPri(~0), lastTXedHiPri(~0), // Show the first item on the first pass...
        id(NULL)
    44f2:	19 86       	std	Y+9, r1	; 0x09
    44f4:	18 86       	std	Y+8, r1	; 0x08
    44f6:	8f ef       	ldi	r24, 0xFF	; 255
    44f8:	8f 83       	std	Y+7, r24	; 0x07
    44fa:	8e 83       	std	Y+6, r24	; 0x06
    44fc:	8d 83       	std	Y+5, r24	; 0x05
    44fe:	1c 82       	std	Y+4, r1	; 0x04
    4500:	ce 01       	movw	r24, r28
    4502:	0b 96       	adiw	r24, 0x0b	; 11
    4504:	9b 83       	std	Y+3, r25	; 0x03
    4506:	8a 83       	std	Y+2, r24	; 0x02
    // If null (the default) then dynamically generate the system ID,
    // eg house code as two bytes of hex if set, else first two bytes of binary ID as hex.
    // The lifetime of the pointed to string must exceed that of this instance.
    bool setID(const char * const _id)
      {
      if(isValidKey(_id)) { id = _id; return(true); }
    4508:	0c e1       	ldi	r16, 0x1C	; 28
    450a:	11 e0       	ldi	r17, 0x01	; 1
    450c:	c8 01       	movw	r24, r16
    450e:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <isValidKey(char const*)>
    4512:	88 23       	and	r24, r24
    4514:	11 f0       	breq	.+4      	; 0x451a <testJSONStats()+0x84>
    4516:	19 87       	std	Y+9, r17	; 0x09
    4518:	08 87       	std	Y+8, r16	; 0x08
  SimpleStatsRotation<2> ss1;
  ss1.setID("1234");
  AssertIsEqual(0, ss1.size());
    451a:	6c 81       	ldd	r22, Y+4	; 0x04
    451c:	80 e0       	ldi	r24, 0x00	; 0
    451e:	90 e0       	ldi	r25, 0x00	; 0
    4520:	70 e0       	ldi	r23, 0x00	; 0
    4522:	44 eb       	ldi	r20, 0xB4	; 180
    4524:	51 e0       	ldi	r21, 0x01	; 1
    4526:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <errorIfNotEqual(int, int, int)>
  //AssertIsTrue(0 == ss1.writeJSON(NULL, randRNG8(), randRNG8(), randRNG8NextBoolean()));
  char buf[MSG_JSON_MAX_LENGTH + 2]; // Allow for trailing '\0' and spare byte.
  // Create minimal JSON message with no data content. just the (supplied) ID.
  const uint8_t l1 = ss1.writeJSON((uint8_t*)buf, sizeof(buf), randRNG8(), randRNG8NextBoolean());
    452a:	49 e1       	ldi	r20, 0x19	; 25
    452c:	a4 2e       	mov	r10, r20
    452e:	b1 2c       	mov	r11, r1
    4530:	ac 0e       	add	r10, r28
    4532:	bd 1e       	adc	r11, r29
    4534:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <randRNG8()>
    4538:	18 2f       	mov	r17, r24
    453a:	0e 94 83 1c 	call	0x3906	; 0x3906 <randRNG8NextBoolean()>
    453e:	08 2f       	mov	r16, r24
    4540:	ce 01       	movw	r24, r28
    4542:	01 96       	adiw	r24, 0x01	; 1
    4544:	b5 01       	movw	r22, r10
    4546:	49 e3       	ldi	r20, 0x39	; 57
    4548:	21 2f       	mov	r18, r17
    454a:	ee 24       	eor	r14, r14
    454c:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)>
    4550:	68 2f       	mov	r22, r24
//serialPrintAndFlush(buf); serialPrintlnAndFlush();
  AssertIsEqual(12, l1);
    4552:	8c e0       	ldi	r24, 0x0C	; 12
    4554:	90 e0       	ldi	r25, 0x00	; 0
    4556:	70 e0       	ldi	r23, 0x00	; 0
    4558:	4a eb       	ldi	r20, 0xBA	; 186
    455a:	51 e0       	ldi	r21, 0x01	; 1
    455c:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <errorIfNotEqual(int, int, int)>
  const char PROGMEM *t1 = (const char PROGMEM *)F("{\"@\":\"1234\"}");
    4560:	c5 01       	movw	r24, r10
    4562:	64 e1       	ldi	r22, 0x14	; 20
    4564:	72 e0       	ldi	r23, 0x02	; 2
    4566:	0e 94 a2 02 	call	0x544	; 0x544 <strcmp_P>
  AssertIsTrue(0 == strcmp_P(buf, t1));
    456a:	89 2b       	or	r24, r25
    456c:	31 f0       	breq	.+12     	; 0x457a <testJSONStats()+0xe4>
    456e:	80 e0       	ldi	r24, 0x00	; 0
    4570:	90 e0       	ldi	r25, 0x00	; 0
    4572:	6c eb       	ldi	r22, 0xBC	; 188
    4574:	71 e0       	ldi	r23, 0x01	; 1
    4576:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
    bool isEmpty() { return(0 == nStats); }

    // Iff true enable the count ("+") field and display immediately after the "@"/ID field.
    // The unsigned count increments as a successful write() operation completes,
    // and wraps after 63 (to limit space), potentially allowing easy detection of lost stats/transmissions.
    void enableCount(bool enable) { c.enabled = enable; }
    457a:	8a 85       	ldd	r24, Y+10	; 0x0a
    457c:	8e 7f       	andi	r24, 0xFE	; 254
    457e:	8a 87       	std	Y+10, r24	; 0x0a
  ss1.enableCount(false);
  AssertIsEqual(12, ss1.writeJSON((uint8_t*)buf, sizeof(buf), randRNG8(), randRNG8NextBoolean()));
    4580:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <randRNG8()>
    4584:	18 2f       	mov	r17, r24
    4586:	0e 94 83 1c 	call	0x3906	; 0x3906 <randRNG8NextBoolean()>
    458a:	08 2f       	mov	r16, r24
    458c:	ce 01       	movw	r24, r28
    458e:	01 96       	adiw	r24, 0x01	; 1
    4590:	b5 01       	movw	r22, r10
    4592:	49 e3       	ldi	r20, 0x39	; 57
    4594:	21 2f       	mov	r18, r17
    4596:	ee 24       	eor	r14, r14
    4598:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)>
    459c:	68 2f       	mov	r22, r24
    459e:	8c e0       	ldi	r24, 0x0C	; 12
    45a0:	90 e0       	ldi	r25, 0x00	; 0
    45a2:	70 e0       	ldi	r23, 0x00	; 0
    45a4:	4e eb       	ldi	r20, 0xBE	; 190
    45a6:	51 e0       	ldi	r21, 0x01	; 1
    45a8:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <errorIfNotEqual(int, int, int)>
  char buf[MSG_JSON_MAX_LENGTH + 2]; // Allow for trailing '\0' and spare byte.
  // Create minimal JSON message with no data content. just the (supplied) ID.
  const uint8_t l1 = ss1.writeJSON((uint8_t*)buf, sizeof(buf), randRNG8(), randRNG8NextBoolean());
//serialPrintAndFlush(buf); serialPrintlnAndFlush();
  AssertIsEqual(12, l1);
  const char PROGMEM *t1 = (const char PROGMEM *)F("{\"@\":\"1234\"}");
    45ac:	ce 01       	movw	r24, r28
    45ae:	49 96       	adiw	r24, 0x19	; 25
    45b0:	64 e1       	ldi	r22, 0x14	; 20
    45b2:	72 e0       	ldi	r23, 0x02	; 2
    45b4:	0e 94 a2 02 	call	0x544	; 0x544 <strcmp_P>
  AssertIsTrue(0 == strcmp_P(buf, t1));
  ss1.enableCount(false);
  AssertIsEqual(12, ss1.writeJSON((uint8_t*)buf, sizeof(buf), randRNG8(), randRNG8NextBoolean()));
  AssertIsTrue(0 == strcmp_P(buf, t1));
    45b8:	89 2b       	or	r24, r25
    45ba:	31 f0       	breq	.+12     	; 0x45c8 <testJSONStats()+0x132>
    45bc:	80 e0       	ldi	r24, 0x00	; 0
    45be:	90 e0       	ldi	r25, 0x00	; 0
    45c0:	6f eb       	ldi	r22, 0xBF	; 191
    45c2:	71 e0       	ldi	r23, 0x01	; 1
    45c4:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
    45c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    45ca:	81 60       	ori	r24, 0x01	; 1
    45cc:	8a 87       	std	Y+10, r24	; 0x0a
  // Check that count works.
  ss1.enableCount(true);
  AssertIsEqual(0, ss1.size());
    45ce:	6c 81       	ldd	r22, Y+4	; 0x04
    45d0:	80 e0       	ldi	r24, 0x00	; 0
    45d2:	90 e0       	ldi	r25, 0x00	; 0
    45d4:	70 e0       	ldi	r23, 0x00	; 0
    45d6:	42 ec       	ldi	r20, 0xC2	; 194
    45d8:	51 e0       	ldi	r21, 0x01	; 1
    45da:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <errorIfNotEqual(int, int, int)>
  AssertIsEqual(18, ss1.writeJSON((uint8_t*)buf, sizeof(buf), randRNG8(), randRNG8NextBoolean()));
    45de:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <randRNG8()>
    45e2:	18 2f       	mov	r17, r24
    45e4:	0e 94 83 1c 	call	0x3906	; 0x3906 <randRNG8NextBoolean()>
    45e8:	08 2f       	mov	r16, r24
    45ea:	ce 01       	movw	r24, r28
    45ec:	01 96       	adiw	r24, 0x01	; 1
    45ee:	b5 01       	movw	r22, r10
    45f0:	49 e3       	ldi	r20, 0x39	; 57
    45f2:	21 2f       	mov	r18, r17
    45f4:	ee 24       	eor	r14, r14
    45f6:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)>
    45fa:	68 2f       	mov	r22, r24
    45fc:	82 e1       	ldi	r24, 0x12	; 18
    45fe:	90 e0       	ldi	r25, 0x00	; 0
    4600:	70 e0       	ldi	r23, 0x00	; 0
    4602:	43 ec       	ldi	r20, 0xC3	; 195
    4604:	51 e0       	ldi	r21, 0x01	; 1
    4606:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <errorIfNotEqual(int, int, int)>
//serialPrintAndFlush(buf); serialPrintlnAndFlush();
  AssertIsTrue(0 == strcmp_P(buf, (const char PROGMEM *)F("{\"@\":\"1234\",\"+\":2}")));
    460a:	ce 01       	movw	r24, r28
    460c:	49 96       	adiw	r24, 0x19	; 25
    460e:	61 e0       	ldi	r22, 0x01	; 1
    4610:	72 e0       	ldi	r23, 0x02	; 2
    4612:	0e 94 a2 02 	call	0x544	; 0x544 <strcmp_P>
    4616:	89 2b       	or	r24, r25
    4618:	31 f0       	breq	.+12     	; 0x4626 <testJSONStats()+0x190>
    461a:	80 e0       	ldi	r24, 0x00	; 0
    461c:	90 e0       	ldi	r25, 0x00	; 0
    461e:	65 ec       	ldi	r22, 0xC5	; 197
    4620:	71 e0       	ldi	r23, 0x01	; 1
    4622:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
    4626:	8a 85       	ldd	r24, Y+10	; 0x0a
    4628:	8e 7f       	andi	r24, 0xFE	; 254
    462a:	8a 87       	std	Y+10, r24	; 0x0a
  // Turn count off for rest of tests.
  ss1.enableCount(false);
  AssertIsEqual(12, ss1.writeJSON((uint8_t*)buf, sizeof(buf), randRNG8(), randRNG8NextBoolean()));
    462c:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <randRNG8()>
    4630:	18 2f       	mov	r17, r24
    4632:	0e 94 83 1c 	call	0x3906	; 0x3906 <randRNG8NextBoolean()>
    4636:	08 2f       	mov	r16, r24
    4638:	6e 01       	movw	r12, r28
    463a:	08 94       	sec
    463c:	c1 1c       	adc	r12, r1
    463e:	d1 1c       	adc	r13, r1
    4640:	c6 01       	movw	r24, r12
    4642:	b5 01       	movw	r22, r10
    4644:	49 e3       	ldi	r20, 0x39	; 57
    4646:	21 2f       	mov	r18, r17
    4648:	ee 24       	eor	r14, r14
    464a:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)>
    464e:	68 2f       	mov	r22, r24
    4650:	8c e0       	ldi	r24, 0x0C	; 12
    4652:	90 e0       	ldi	r25, 0x00	; 0
    4654:	70 e0       	ldi	r23, 0x00	; 0
    4656:	48 ec       	ldi	r20, 0xC8	; 200
    4658:	51 e0       	ldi	r21, 0x01	; 1
    465a:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <errorIfNotEqual(int, int, int)>
  // Check that removal of absent entry does nothing.
  AssertIsTrue(!ss1.remove("bogus"));
    465e:	c6 01       	movw	r24, r12
    4660:	61 e2       	ldi	r22, 0x21	; 33
    4662:	71 e0       	ldi	r23, 0x01	; 1
    4664:	0e 94 a8 10 	call	0x2150	; 0x2150 <SimpleStatsRotationBase::remove(char const*)>
    4668:	88 23       	and	r24, r24
    466a:	31 f0       	breq	.+12     	; 0x4678 <testJSONStats()+0x1e2>
    466c:	80 e0       	ldi	r24, 0x00	; 0
    466e:	90 e0       	ldi	r25, 0x00	; 0
    4670:	6a ec       	ldi	r22, 0xCA	; 202
    4672:	71 e0       	ldi	r23, 0x01	; 1
    4674:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsEqual(0, ss1.size());
    4678:	6c 81       	ldd	r22, Y+4	; 0x04
    467a:	80 e0       	ldi	r24, 0x00	; 0
    467c:	90 e0       	ldi	r25, 0x00	; 0
    467e:	70 e0       	ldi	r23, 0x00	; 0
    4680:	4b ec       	ldi	r20, 0xCB	; 203
    4682:	51 e0       	ldi	r21, 0x01	; 1
    4684:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <errorIfNotEqual(int, int, int)>
  // Check that new item can be added/put (with no/default properties).
  ss1.put("f1", 42);
    4688:	6e 01       	movw	r12, r28
    468a:	08 94       	sec
    468c:	c1 1c       	adc	r12, r1
    468e:	d1 1c       	adc	r13, r1
    4690:	c6 01       	movw	r24, r12
    4692:	67 e2       	ldi	r22, 0x27	; 39
    4694:	71 e0       	ldi	r23, 0x01	; 1
    4696:	4a e2       	ldi	r20, 0x2A	; 42
    4698:	50 e0       	ldi	r21, 0x00	; 0
    469a:	0e 94 4f 10 	call	0x209e	; 0x209e <SimpleStatsRotationBase::put(char const*, int)>
  AssertIsEqual(1, ss1.size());
    469e:	6c 81       	ldd	r22, Y+4	; 0x04
    46a0:	81 e0       	ldi	r24, 0x01	; 1
    46a2:	90 e0       	ldi	r25, 0x00	; 0
    46a4:	70 e0       	ldi	r23, 0x00	; 0
    46a6:	4e ec       	ldi	r20, 0xCE	; 206
    46a8:	51 e0       	ldi	r21, 0x01	; 1
    46aa:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <errorIfNotEqual(int, int, int)>
  AssertIsEqual(20, ss1.writeJSON((uint8_t*)buf, sizeof(buf), 0, randRNG8NextBoolean()));
    46ae:	0e 94 83 1c 	call	0x3906	; 0x3906 <randRNG8NextBoolean()>
    46b2:	08 2f       	mov	r16, r24
    46b4:	c6 01       	movw	r24, r12
    46b6:	b5 01       	movw	r22, r10
    46b8:	49 e3       	ldi	r20, 0x39	; 57
    46ba:	20 e0       	ldi	r18, 0x00	; 0
    46bc:	ee 24       	eor	r14, r14
    46be:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)>
    46c2:	68 2f       	mov	r22, r24
    46c4:	84 e1       	ldi	r24, 0x14	; 20
    46c6:	90 e0       	ldi	r25, 0x00	; 0
    46c8:	70 e0       	ldi	r23, 0x00	; 0
    46ca:	4f ec       	ldi	r20, 0xCF	; 207
    46cc:	51 e0       	ldi	r21, 0x01	; 1
    46ce:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <errorIfNotEqual(int, int, int)>
#if 0 // Short of Flash space!
//serialPrintAndFlush(buf); serialPrintlnAndFlush();
  AssertIsTrue(0 == strcmp_P(buf, (const char PROGMEM *)F("{\"@\":\"1234\",\"f1\":42}")));
#endif
  ss1.put("f1", -111);
    46d2:	c6 01       	movw	r24, r12
    46d4:	67 e2       	ldi	r22, 0x27	; 39
    46d6:	71 e0       	ldi	r23, 0x01	; 1
    46d8:	41 e9       	ldi	r20, 0x91	; 145
    46da:	5f ef       	ldi	r21, 0xFF	; 255
    46dc:	0e 94 4f 10 	call	0x209e	; 0x209e <SimpleStatsRotationBase::put(char const*, int)>
  AssertIsEqual(1, ss1.size());
    46e0:	6c 81       	ldd	r22, Y+4	; 0x04
    46e2:	81 e0       	ldi	r24, 0x01	; 1
    46e4:	90 e0       	ldi	r25, 0x00	; 0
    46e6:	70 e0       	ldi	r23, 0x00	; 0
    46e8:	45 ed       	ldi	r20, 0xD5	; 213
    46ea:	51 e0       	ldi	r21, 0x01	; 1
    46ec:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <errorIfNotEqual(int, int, int)>
  AssertIsEqual(22, ss1.writeJSON((uint8_t*)buf, sizeof(buf), 0, randRNG8NextBoolean()));
    46f0:	0e 94 83 1c 	call	0x3906	; 0x3906 <randRNG8NextBoolean()>
    46f4:	08 2f       	mov	r16, r24
    46f6:	c6 01       	movw	r24, r12
    46f8:	b5 01       	movw	r22, r10
    46fa:	49 e3       	ldi	r20, 0x39	; 57
    46fc:	20 e0       	ldi	r18, 0x00	; 0
    46fe:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)>
    4702:	68 2f       	mov	r22, r24
    4704:	86 e1       	ldi	r24, 0x16	; 22
    4706:	90 e0       	ldi	r25, 0x00	; 0
    4708:	70 e0       	ldi	r23, 0x00	; 0
    470a:	46 ed       	ldi	r20, 0xD6	; 214
    470c:	51 e0       	ldi	r21, 0x01	; 1
    470e:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <errorIfNotEqual(int, int, int)>
  AssertIsTrue(0 == strcmp_P(buf, (const char PROGMEM *)F("{\"@\":\"1234\",\"f1\":-111}")));
    4712:	ce 01       	movw	r24, r28
    4714:	49 96       	adiw	r24, 0x19	; 25
    4716:	6a ee       	ldi	r22, 0xEA	; 234
    4718:	71 e0       	ldi	r23, 0x01	; 1
    471a:	0e 94 a2 02 	call	0x544	; 0x544 <strcmp_P>
    471e:	89 2b       	or	r24, r25
    4720:	31 f0       	breq	.+12     	; 0x472e <testJSONStats()+0x298>
    4722:	80 e0       	ldi	r24, 0x00	; 0
    4724:	90 e0       	ldi	r25, 0x00	; 0
    4726:	67 ed       	ldi	r22, 0xD7	; 215
    4728:	71 e0       	ldi	r23, 0x01	; 1
    472a:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
#endif
  }
    472e:	cf 5a       	subi	r28, 0xAF	; 175
    4730:	df 4f       	sbci	r29, 0xFF	; 255
    4732:	0f b6       	in	r0, 0x3f	; 63
    4734:	f8 94       	cli
    4736:	de bf       	out	0x3e, r29	; 62
    4738:	0f be       	out	0x3f, r0	; 63
    473a:	cd bf       	out	0x3d, r28	; 61
    473c:	cf 91       	pop	r28
    473e:	df 91       	pop	r29
    4740:	1f 91       	pop	r17
    4742:	0f 91       	pop	r16
    4744:	ef 90       	pop	r14
    4746:	df 90       	pop	r13
    4748:	cf 90       	pop	r12
    474a:	bf 90       	pop	r11
    474c:	af 90       	pop	r10
    474e:	08 95       	ret

00004750 <testJSONForTX()>:

// Test handling of JSON messages for transmission and reception.
// Includes bit-twiddling, CRC computation, and other error checking.
static void testJSONForTX()
    4750:	ff 92       	push	r15
    4752:	0f 93       	push	r16
    4754:	1f 93       	push	r17
    4756:	df 93       	push	r29
    4758:	cf 93       	push	r28
    475a:	cd b7       	in	r28, 0x3d	; 61
    475c:	de b7       	in	r29, 0x3e	; 62
    475e:	e9 97       	sbiw	r28, 0x39	; 57
    4760:	0f b6       	in	r0, 0x3f	; 63
    4762:	f8 94       	cli
    4764:	de bf       	out	0x3e, r29	; 62
    4766:	0f be       	out	0x3f, r0	; 63
    4768:	cd bf       	out	0x3d, r28	; 61
  {
#if defined(ALLOW_JSON_OUTPUT)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testJSONForTX");
    476a:	89 e6       	ldi	r24, 0x69	; 105
    476c:	92 e0       	ldi	r25, 0x02	; 2
    476e:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <serialPrintlnAndFlush(__FlashStringHelper const*)>
  char buf[MSG_JSON_MAX_LENGTH + 2]; // Allow for trailing '\0' or CRC + 0xff terminator.
  // Clear the buffer.
  memset(buf, 0, sizeof(buf));
    4772:	fe 01       	movw	r30, r28
    4774:	31 96       	adiw	r30, 0x01	; 1
    4776:	89 e3       	ldi	r24, 0x39	; 57
    4778:	df 01       	movw	r26, r30
    477a:	1d 92       	st	X+, r1
    477c:	8a 95       	dec	r24
    477e:	e9 f7       	brne	.-6      	; 0x477a <testJSONForTX()+0x2a>
  // Fail sanity check on a completely empty buffer (zero-length string).
  AssertIsTrue(!quickValidateRawSimpleJSONMessage(buf));
    4780:	cf 01       	movw	r24, r30
    4782:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <quickValidateRawSimpleJSONMessage(char const*)>
    4786:	88 23       	and	r24, r24
    4788:	31 f0       	breq	.+12     	; 0x4796 <testJSONForTX()+0x46>
    478a:	80 e0       	ldi	r24, 0x00	; 0
    478c:	90 e0       	ldi	r25, 0x00	; 0
    478e:	65 ee       	ldi	r22, 0xE5	; 229
    4790:	71 e0       	ldi	r23, 0x01	; 1
    4792:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  // Fail sanity check on a few initially-plausible length-1 values.
  buf[0] = '{';
    4796:	8b e7       	ldi	r24, 0x7B	; 123
    4798:	89 83       	std	Y+1, r24	; 0x01
  AssertIsTrue(!quickValidateRawSimpleJSONMessage(buf));
    479a:	ce 01       	movw	r24, r28
    479c:	01 96       	adiw	r24, 0x01	; 1
    479e:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <quickValidateRawSimpleJSONMessage(char const*)>
    47a2:	88 23       	and	r24, r24
    47a4:	31 f0       	breq	.+12     	; 0x47b2 <testJSONForTX()+0x62>
    47a6:	80 e0       	ldi	r24, 0x00	; 0
    47a8:	90 e0       	ldi	r25, 0x00	; 0
    47aa:	68 ee       	ldi	r22, 0xE8	; 232
    47ac:	71 e0       	ldi	r23, 0x01	; 1
    47ae:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  buf[0] = '}';
    47b2:	8d e7       	ldi	r24, 0x7D	; 125
    47b4:	89 83       	std	Y+1, r24	; 0x01
  AssertIsTrue(!quickValidateRawSimpleJSONMessage(buf));
    47b6:	ce 01       	movw	r24, r28
    47b8:	01 96       	adiw	r24, 0x01	; 1
    47ba:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <quickValidateRawSimpleJSONMessage(char const*)>
    47be:	88 23       	and	r24, r24
    47c0:	31 f0       	breq	.+12     	; 0x47ce <testJSONForTX()+0x7e>
    47c2:	80 e0       	ldi	r24, 0x00	; 0
    47c4:	90 e0       	ldi	r25, 0x00	; 0
    47c6:	6a ee       	ldi	r22, 0xEA	; 234
    47c8:	71 e0       	ldi	r23, 0x01	; 1
    47ca:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  buf[0] = '[';
    47ce:	8b e5       	ldi	r24, 0x5B	; 91
    47d0:	89 83       	std	Y+1, r24	; 0x01
  AssertIsTrue(!quickValidateRawSimpleJSONMessage(buf));
    47d2:	ce 01       	movw	r24, r28
    47d4:	01 96       	adiw	r24, 0x01	; 1
    47d6:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <quickValidateRawSimpleJSONMessage(char const*)>
    47da:	88 23       	and	r24, r24
    47dc:	31 f0       	breq	.+12     	; 0x47ea <testJSONForTX()+0x9a>
    47de:	80 e0       	ldi	r24, 0x00	; 0
    47e0:	90 e0       	ldi	r25, 0x00	; 0
    47e2:	6c ee       	ldi	r22, 0xEC	; 236
    47e4:	71 e0       	ldi	r23, 0x01	; 1
    47e6:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  buf[0] = ']';
    47ea:	8d e5       	ldi	r24, 0x5D	; 93
    47ec:	89 83       	std	Y+1, r24	; 0x01
  AssertIsTrue(!quickValidateRawSimpleJSONMessage(buf));
    47ee:	ce 01       	movw	r24, r28
    47f0:	01 96       	adiw	r24, 0x01	; 1
    47f2:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <quickValidateRawSimpleJSONMessage(char const*)>
    47f6:	88 23       	and	r24, r24
    47f8:	31 f0       	breq	.+12     	; 0x4806 <testJSONForTX()+0xb6>
    47fa:	80 e0       	ldi	r24, 0x00	; 0
    47fc:	90 e0       	ldi	r25, 0x00	; 0
    47fe:	6e ee       	ldi	r22, 0xEE	; 238
    4800:	71 e0       	ldi	r23, 0x01	; 1
    4802:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  buf[0] = ' ';
    4806:	80 e2       	ldi	r24, 0x20	; 32
    4808:	89 83       	std	Y+1, r24	; 0x01
  AssertIsTrue(!quickValidateRawSimpleJSONMessage(buf));
    480a:	ce 01       	movw	r24, r28
    480c:	01 96       	adiw	r24, 0x01	; 1
    480e:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <quickValidateRawSimpleJSONMessage(char const*)>
    4812:	88 23       	and	r24, r24
    4814:	31 f0       	breq	.+12     	; 0x4822 <testJSONForTX()+0xd2>
    4816:	80 e0       	ldi	r24, 0x00	; 0
    4818:	90 e0       	ldi	r25, 0x00	; 0
    481a:	60 ef       	ldi	r22, 0xF0	; 240
    481c:	71 e0       	ldi	r23, 0x01	; 1
    481e:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  // Fail sanity check with already-adjusted (minimal) nessage.
  buf[0] = '{';
    4822:	8b e7       	ldi	r24, 0x7B	; 123
    4824:	89 83       	std	Y+1, r24	; 0x01
  buf[1] = ('}' | 0x80);
    4826:	8d ef       	ldi	r24, 0xFD	; 253
    4828:	8a 83       	std	Y+2, r24	; 0x02
  AssertIsTrue(!quickValidateRawSimpleJSONMessage(buf));
    482a:	ce 01       	movw	r24, r28
    482c:	01 96       	adiw	r24, 0x01	; 1
    482e:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <quickValidateRawSimpleJSONMessage(char const*)>
    4832:	88 23       	and	r24, r24
    4834:	31 f0       	breq	.+12     	; 0x4842 <testJSONForTX()+0xf2>
    4836:	80 e0       	ldi	r24, 0x00	; 0
    4838:	90 e0       	ldi	r25, 0x00	; 0
    483a:	64 ef       	ldi	r22, 0xF4	; 244
    483c:	71 e0       	ldi	r23, 0x01	; 1
    483e:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  // Minimal correct messaage should pass.
  buf[0] = '{';
    4842:	8b e7       	ldi	r24, 0x7B	; 123
    4844:	89 83       	std	Y+1, r24	; 0x01
  buf[1] = '}';
    4846:	8d e7       	ldi	r24, 0x7D	; 125
    4848:	8a 83       	std	Y+2, r24	; 0x02
  AssertIsTrue(quickValidateRawSimpleJSONMessage(buf));
    484a:	ce 01       	movw	r24, r28
    484c:	01 96       	adiw	r24, 0x01	; 1
    484e:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <quickValidateRawSimpleJSONMessage(char const*)>
    4852:	88 23       	and	r24, r24
    4854:	31 f4       	brne	.+12     	; 0x4862 <testJSONForTX()+0x112>
    4856:	80 e0       	ldi	r24, 0x00	; 0
    4858:	90 e0       	ldi	r25, 0x00	; 0
    485a:	68 ef       	ldi	r22, 0xF8	; 248
    485c:	71 e0       	ldi	r23, 0x01	; 1
    485e:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  // Try a longer valid trivial message.
  strcpy_P(buf, (const char PROGMEM *)F("{  }"));
    4862:	8e 01       	movw	r16, r28
    4864:	0f 5f       	subi	r16, 0xFF	; 255
    4866:	1f 4f       	sbci	r17, 0xFF	; 255
    4868:	c8 01       	movw	r24, r16
    486a:	64 e6       	ldi	r22, 0x64	; 100
    486c:	72 e0       	ldi	r23, 0x02	; 2
    486e:	0e 94 ab 02 	call	0x556	; 0x556 <strcpy_P>
  AssertIsTrue(quickValidateRawSimpleJSONMessage(buf));
    4872:	c8 01       	movw	r24, r16
    4874:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <quickValidateRawSimpleJSONMessage(char const*)>
    4878:	88 23       	and	r24, r24
    487a:	31 f4       	brne	.+12     	; 0x4888 <testJSONForTX()+0x138>
    487c:	80 e0       	ldi	r24, 0x00	; 0
    487e:	90 e0       	ldi	r25, 0x00	; 0
    4880:	6b ef       	ldi	r22, 0xFB	; 251
    4882:	71 e0       	ldi	r23, 0x01	; 1
    4884:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  // Invalidate it with a non-printable char and check that it is rejected.
  buf[2] = '\1';
    4888:	81 e0       	ldi	r24, 0x01	; 1
    488a:	8b 83       	std	Y+3, r24	; 0x03
  AssertIsTrue(!quickValidateRawSimpleJSONMessage(buf));
    488c:	ce 01       	movw	r24, r28
    488e:	01 96       	adiw	r24, 0x01	; 1
    4890:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <quickValidateRawSimpleJSONMessage(char const*)>
    4894:	88 23       	and	r24, r24
    4896:	31 f0       	breq	.+12     	; 0x48a4 <testJSONForTX()+0x154>
    4898:	80 e0       	ldi	r24, 0x00	; 0
    489a:	90 e0       	ldi	r25, 0x00	; 0
    489c:	6e ef       	ldi	r22, 0xFE	; 254
    489e:	71 e0       	ldi	r23, 0x01	; 1
    48a0:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  // Try a longer valid non-trivial message.
  __FlashStringHelper const* longJSONMsg1 = F("{\"@\":\"cdfb\",\"T|C16\":299,\"H|%\":83,\"L\":255,\"B|cV\":256}");
  memset(buf, 0, sizeof(buf));
    48a4:	8e 01       	movw	r16, r28
    48a6:	0f 5f       	subi	r16, 0xFF	; 255
    48a8:	1f 4f       	sbci	r17, 0xFF	; 255
    48aa:	89 e3       	ldi	r24, 0x39	; 57
    48ac:	f8 01       	movw	r30, r16
    48ae:	11 92       	st	Z+, r1
    48b0:	8a 95       	dec	r24
    48b2:	e9 f7       	brne	.-6      	; 0x48ae <testJSONForTX()+0x15e>
  AssertIsTrue(quickValidateRawSimpleJSONMessage(buf));
  // Invalidate it with a non-printable char and check that it is rejected.
  buf[2] = '\1';
  AssertIsTrue(!quickValidateRawSimpleJSONMessage(buf));
  // Try a longer valid non-trivial message.
  __FlashStringHelper const* longJSONMsg1 = F("{\"@\":\"cdfb\",\"T|C16\":299,\"H|%\":83,\"L\":255,\"B|cV\":256}");
    48b4:	c8 01       	movw	r24, r16
    48b6:	6f e2       	ldi	r22, 0x2F	; 47
    48b8:	72 e0       	ldi	r23, 0x02	; 2
    48ba:	0e 94 ab 02 	call	0x556	; 0x556 <strcpy_P>
  memset(buf, 0, sizeof(buf));
  strcpy_P(buf, (const char PROGMEM *)longJSONMsg1);
  AssertIsTrue(quickValidateRawSimpleJSONMessage(buf));
    48be:	c8 01       	movw	r24, r16
    48c0:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <quickValidateRawSimpleJSONMessage(char const*)>
    48c4:	88 23       	and	r24, r24
    48c6:	31 f4       	brne	.+12     	; 0x48d4 <testJSONForTX()+0x184>
    48c8:	80 e0       	ldi	r24, 0x00	; 0
    48ca:	90 e0       	ldi	r25, 0x00	; 0
    48cc:	63 e0       	ldi	r22, 0x03	; 3
    48ce:	72 e0       	ldi	r23, 0x02	; 2
    48d0:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  // Invalidate it with a high-bit set and check that it is rejected.
  buf[5] |= 0x80;
    48d4:	8e 81       	ldd	r24, Y+6	; 0x06
    48d6:	80 68       	ori	r24, 0x80	; 128
    48d8:	8e 83       	std	Y+6, r24	; 0x06
  AssertIsTrue(!quickValidateRawSimpleJSONMessage(buf));
    48da:	ce 01       	movw	r24, r28
    48dc:	01 96       	adiw	r24, 0x01	; 1
    48de:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <quickValidateRawSimpleJSONMessage(char const*)>
    48e2:	88 23       	and	r24, r24
    48e4:	31 f0       	breq	.+12     	; 0x48f2 <testJSONForTX()+0x1a2>
    48e6:	80 e0       	ldi	r24, 0x00	; 0
    48e8:	90 e0       	ldi	r25, 0x00	; 0
    48ea:	66 e0       	ldi	r22, 0x06	; 6
    48ec:	72 e0       	ldi	r23, 0x02	; 2
    48ee:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  // CRC fun!  
  memset(buf, 0, sizeof(buf));
    48f2:	fe 01       	movw	r30, r28
    48f4:	31 96       	adiw	r30, 0x01	; 1
    48f6:	89 e3       	ldi	r24, 0x39	; 57
    48f8:	df 01       	movw	r26, r30
    48fa:	1d 92       	st	X+, r1
    48fc:	8a 95       	dec	r24
    48fe:	e9 f7       	brne	.-6      	; 0x48fa <testJSONForTX()+0x1aa>
  buf[0] = '{';
    4900:	8b e7       	ldi	r24, 0x7B	; 123
    4902:	89 83       	std	Y+1, r24	; 0x01
  buf[1] = '}';
    4904:	8d e7       	ldi	r24, 0x7D	; 125
    4906:	8a 83       	std	Y+2, r24	; 0x02
  const uint8_t crc1 = adjustJSONMsgForTXAndComputeCRC(buf);
    4908:	cf 01       	movw	r24, r30
    490a:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <adjustJSONMsgForTXAndComputeCRC(char*)>
    490e:	08 2f       	mov	r16, r24
  // Check that top bit is not set (ie CRC was computed OK).
  AssertIsTrueWithErr(!(crc1 & 0x80), crc1);
    4910:	87 ff       	sbrs	r24, 7
    4912:	05 c0       	rjmp	.+10     	; 0x491e <testJSONForTX()+0x1ce>
    4914:	90 e0       	ldi	r25, 0x00	; 0
    4916:	6d e0       	ldi	r22, 0x0D	; 13
    4918:	72 e0       	ldi	r23, 0x02	; 2
    491a:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  // Check for expected CRC value.
  AssertIsTrueWithErr((0x38 == crc1), crc1);
    491e:	08 33       	cpi	r16, 0x38	; 56
    4920:	31 f0       	breq	.+12     	; 0x492e <testJSONForTX()+0x1de>
    4922:	80 2f       	mov	r24, r16
    4924:	90 e0       	ldi	r25, 0x00	; 0
    4926:	6f e0       	ldi	r22, 0x0F	; 15
    4928:	72 e0       	ldi	r23, 0x02	; 2
    492a:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  // Check that initial part unaltered.
  AssertIsTrueWithErr(('{' == buf[0]), buf[0]);
    492e:	89 81       	ldd	r24, Y+1	; 0x01
    4930:	8b 37       	cpi	r24, 0x7B	; 123
    4932:	39 f0       	breq	.+14     	; 0x4942 <testJSONForTX()+0x1f2>
    4934:	99 27       	eor	r25, r25
    4936:	87 fd       	sbrc	r24, 7
    4938:	90 95       	com	r25
    493a:	61 e1       	ldi	r22, 0x11	; 17
    493c:	72 e0       	ldi	r23, 0x02	; 2
    493e:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  // Check that top bit has been set in trailing brace.
  AssertIsTrueWithErr(((char)('}' | 0x80) == buf[1]), buf[1]);
    4942:	8a 81       	ldd	r24, Y+2	; 0x02
    4944:	8d 3f       	cpi	r24, 0xFD	; 253
    4946:	39 f0       	breq	.+14     	; 0x4956 <testJSONForTX()+0x206>
    4948:	99 27       	eor	r25, r25
    494a:	87 fd       	sbrc	r24, 7
    494c:	90 95       	com	r25
    494e:	63 e1       	ldi	r22, 0x13	; 19
    4950:	72 e0       	ldi	r23, 0x02	; 2
    4952:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  // Check that trailing '\0' still present.
  AssertIsTrueWithErr((0 == buf[2]), buf[2]);
    4956:	8b 81       	ldd	r24, Y+3	; 0x03
    4958:	88 23       	and	r24, r24
    495a:	39 f0       	breq	.+14     	; 0x496a <testJSONForTX()+0x21a>
    495c:	99 27       	eor	r25, r25
    495e:	87 fd       	sbrc	r24, 7
    4960:	90 95       	com	r25
    4962:	65 e1       	ldi	r22, 0x15	; 21
    4964:	72 e0       	ldi	r23, 0x02	; 2
    4966:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  // Check that TX-format can be converted for RX.
  buf[2] = crc1;
    496a:	0b 83       	std	Y+3, r16	; 0x03
  buf[3] = 0xff; // As for normal TX...
    496c:	8f ef       	ldi	r24, 0xFF	; 255
    496e:	8c 83       	std	Y+4, r24	; 0x04
  const int8_t l1 = adjustJSONMsgForRXAndCheckCRC(buf, sizeof(buf));
    4970:	ce 01       	movw	r24, r28
    4972:	01 96       	adiw	r24, 0x01	; 1
    4974:	69 e3       	ldi	r22, 0x39	; 57
    4976:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)>
  AssertIsTrueWithErr(2 == l1, l1);
    497a:	82 30       	cpi	r24, 0x02	; 2
    497c:	39 f0       	breq	.+14     	; 0x498c <testJSONForTX()+0x23c>
    497e:	99 27       	eor	r25, r25
    4980:	87 fd       	sbrc	r24, 7
    4982:	90 95       	com	r25
    4984:	6a e1       	ldi	r22, 0x1A	; 26
    4986:	72 e0       	ldi	r23, 0x02	; 2
    4988:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(2 == strlen(buf), strlen(buf));
    498c:	fe 01       	movw	r30, r28
    498e:	31 96       	adiw	r30, 0x01	; 1
    4990:	df 01       	movw	r26, r30
    4992:	0d 90       	ld	r0, X+
    4994:	00 20       	and	r0, r0
    4996:	e9 f7       	brne	.-6      	; 0x4992 <testJSONForTX()+0x242>
    4998:	11 97       	sbiw	r26, 0x01	; 1
    499a:	ae 1b       	sub	r26, r30
    499c:	bf 0b       	sbc	r27, r31
    499e:	a2 30       	cpi	r26, 0x02	; 2
    49a0:	b1 05       	cpc	r27, r1
    49a2:	29 f0       	breq	.+10     	; 0x49ae <testJSONForTX()+0x25e>
    49a4:	cd 01       	movw	r24, r26
    49a6:	6b e1       	ldi	r22, 0x1B	; 27
    49a8:	72 e0       	ldi	r23, 0x02	; 2
    49aa:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrue(quickValidateRawSimpleJSONMessage(buf));
    49ae:	ce 01       	movw	r24, r28
    49b0:	01 96       	adiw	r24, 0x01	; 1
    49b2:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <quickValidateRawSimpleJSONMessage(char const*)>
    49b6:	88 23       	and	r24, r24
    49b8:	31 f4       	brne	.+12     	; 0x49c6 <testJSONForTX()+0x276>
    49ba:	80 e0       	ldi	r24, 0x00	; 0
    49bc:	90 e0       	ldi	r25, 0x00	; 0
    49be:	6c e1       	ldi	r22, 0x1C	; 28
    49c0:	72 e0       	ldi	r23, 0x02	; 2
    49c2:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  // Now a longer message...
  memset(buf, 0, sizeof(buf));
    49c6:	8e 01       	movw	r16, r28
    49c8:	0f 5f       	subi	r16, 0xFF	; 255
    49ca:	1f 4f       	sbci	r17, 0xFF	; 255
    49cc:	89 e3       	ldi	r24, 0x39	; 57
    49ce:	f8 01       	movw	r30, r16
    49d0:	11 92       	st	Z+, r1
    49d2:	8a 95       	dec	r24
    49d4:	e9 f7       	brne	.-6      	; 0x49d0 <testJSONForTX()+0x280>
  AssertIsTrue(quickValidateRawSimpleJSONMessage(buf));
  // Invalidate it with a non-printable char and check that it is rejected.
  buf[2] = '\1';
  AssertIsTrue(!quickValidateRawSimpleJSONMessage(buf));
  // Try a longer valid non-trivial message.
  __FlashStringHelper const* longJSONMsg1 = F("{\"@\":\"cdfb\",\"T|C16\":299,\"H|%\":83,\"L\":255,\"B|cV\":256}");
    49d6:	c8 01       	movw	r24, r16
    49d8:	6f e2       	ldi	r22, 0x2F	; 47
    49da:	72 e0       	ldi	r23, 0x02	; 2
    49dc:	0e 94 ab 02 	call	0x556	; 0x556 <strcpy_P>
  AssertIsTrueWithErr(2 == strlen(buf), strlen(buf));
  AssertIsTrue(quickValidateRawSimpleJSONMessage(buf));
  // Now a longer message...
  memset(buf, 0, sizeof(buf));
  strcpy_P(buf, (const char PROGMEM *)longJSONMsg1);
  const int8_t l2o = strlen(buf);
    49e0:	f8 01       	movw	r30, r16
    49e2:	01 90       	ld	r0, Z+
    49e4:	00 20       	and	r0, r0
    49e6:	e9 f7       	brne	.-6      	; 0x49e2 <testJSONForTX()+0x292>
    49e8:	31 97       	sbiw	r30, 0x01	; 1
    49ea:	fe 2e       	mov	r15, r30
    49ec:	f0 1a       	sub	r15, r16
  const uint8_t crc2 = adjustJSONMsgForTXAndComputeCRC(buf);
    49ee:	c8 01       	movw	r24, r16
    49f0:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <adjustJSONMsgForTXAndComputeCRC(char*)>
    49f4:	08 2f       	mov	r16, r24
  // Check that top bit is not set (ie CRC was computed OK).
  AssertIsTrueWithErr(!(crc2 & 0x80), crc2);
    49f6:	87 ff       	sbrs	r24, 7
    49f8:	05 c0       	rjmp	.+10     	; 0x4a04 <testJSONForTX()+0x2b4>
    49fa:	90 e0       	ldi	r25, 0x00	; 0
    49fc:	63 e2       	ldi	r22, 0x23	; 35
    49fe:	72 e0       	ldi	r23, 0x02	; 2
    4a00:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  // Check for expected CRC value.
  AssertIsTrueWithErr((0x77 == crc2), crc2);
    4a04:	07 37       	cpi	r16, 0x77	; 119
    4a06:	31 f0       	breq	.+12     	; 0x4a14 <testJSONForTX()+0x2c4>
    4a08:	80 2f       	mov	r24, r16
    4a0a:	90 e0       	ldi	r25, 0x00	; 0
    4a0c:	65 e2       	ldi	r22, 0x25	; 37
    4a0e:	72 e0       	ldi	r23, 0x02	; 2
    4a10:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  // Check that TX-format can be converted for RX.
  buf[l2o] = crc2;
    4a14:	af 2d       	mov	r26, r15
    4a16:	bb 27       	eor	r27, r27
    4a18:	a7 fd       	sbrc	r26, 7
    4a1a:	b0 95       	com	r27
    4a1c:	ce 01       	movw	r24, r28
    4a1e:	01 96       	adiw	r24, 0x01	; 1
    4a20:	fc 01       	movw	r30, r24
    4a22:	ea 0f       	add	r30, r26
    4a24:	fb 1f       	adc	r31, r27
    4a26:	00 83       	st	Z, r16
  buf[l2o+1] = 0xff;
    4a28:	ac 0f       	add	r26, r28
    4a2a:	bd 1f       	adc	r27, r29
    4a2c:	2f ef       	ldi	r18, 0xFF	; 255
    4a2e:	12 96       	adiw	r26, 0x02	; 2
    4a30:	2c 93       	st	X, r18
  const int8_t l2 = adjustJSONMsgForRXAndCheckCRC(buf, sizeof(buf));
    4a32:	69 e3       	ldi	r22, 0x39	; 57
    4a34:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)>
  AssertIsTrueWithErr(l2o == l2, l2);
    4a38:	f8 16       	cp	r15, r24
    4a3a:	39 f0       	breq	.+14     	; 0x4a4a <testJSONForTX()+0x2fa>
    4a3c:	99 27       	eor	r25, r25
    4a3e:	87 fd       	sbrc	r24, 7
    4a40:	90 95       	com	r25
    4a42:	6a e2       	ldi	r22, 0x2A	; 42
    4a44:	72 e0       	ldi	r23, 0x02	; 2
    4a46:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrue(quickValidateRawSimpleJSONMessage(buf));
    4a4a:	ce 01       	movw	r24, r28
    4a4c:	01 96       	adiw	r24, 0x01	; 1
    4a4e:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <quickValidateRawSimpleJSONMessage(char const*)>
    4a52:	88 23       	and	r24, r24
    4a54:	31 f4       	brne	.+12     	; 0x4a62 <testJSONForTX()+0x312>
    4a56:	80 e0       	ldi	r24, 0x00	; 0
    4a58:	90 e0       	ldi	r25, 0x00	; 0
    4a5a:	6b e2       	ldi	r22, 0x2B	; 43
    4a5c:	72 e0       	ldi	r23, 0x02	; 2
    4a5e:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
#endif
  }
    4a62:	e9 96       	adiw	r28, 0x39	; 57
    4a64:	0f b6       	in	r0, 0x3f	; 63
    4a66:	f8 94       	cli
    4a68:	de bf       	out	0x3e, r29	; 62
    4a6a:	0f be       	out	0x3f, r0	; 63
    4a6c:	cd bf       	out	0x3d, r28	; 61
    4a6e:	cf 91       	pop	r28
    4a70:	df 91       	pop	r29
    4a72:	1f 91       	pop	r17
    4a74:	0f 91       	pop	r16
    4a76:	ff 90       	pop	r15
    4a78:	08 95       	ret

00004a7a <testFullStatsMessageCoreEncDec()>:

// Test elements of encoding and decoding FullStatsMessageCore_t.
// These are the routines primarily under test:
//     uint8_t *encodeFullStatsMessageCore(uint8_t *buf, uint8_t buflen, stats_TX_level secLevel, bool secureChannel, const FullStatsMessageCore_t *content)
//     const uint8_t *decodeFullStatsMessageCore(const uint8_t *buf, uint8_t buflen, stats_TX_level secLevel, bool secureChannel, FullStatsMessageCore_t *content)
static void testFullStatsMessageCoreEncDec()
    4a7a:	bf 92       	push	r11
    4a7c:	cf 92       	push	r12
    4a7e:	df 92       	push	r13
    4a80:	ef 92       	push	r14
    4a82:	ff 92       	push	r15
    4a84:	0f 93       	push	r16
    4a86:	1f 93       	push	r17
    4a88:	df 93       	push	r29
    4a8a:	cf 93       	push	r28
    4a8c:	cd b7       	in	r28, 0x3d	; 61
    4a8e:	de b7       	in	r29, 0x3e	; 62
    4a90:	60 97       	sbiw	r28, 0x10	; 16
    4a92:	0f b6       	in	r0, 0x3f	; 63
    4a94:	f8 94       	cli
    4a96:	de bf       	out	0x3e, r29	; 62
    4a98:	0f be       	out	0x3f, r0	; 63
    4a9a:	cd bf       	out	0x3d, r28	; 61
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testFullStatsMessageCoreEncDec");
    4a9c:	87 e7       	ldi	r24, 0x77	; 119
    4a9e:	92 e0       	ldi	r25, 0x02	; 2
    4aa0:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <serialPrintlnAndFlush(__FlashStringHelper const*)>

  // Ensure that with null buffer/content encode and decode fail regardless of other arguments.
  uint8_t buf[FullStatsMessageCore_MAX_BYTES_ON_WIRE + 1];
  FullStatsMessageCore_t content;
  AssertIsTrue(NULL == encodeFullStatsMessageCore(NULL, randRNG8(), stTXalwaysAll, randRNG8NextBoolean(), NULL));
    4aa4:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <randRNG8()>
    4aa8:	18 2f       	mov	r17, r24
    4aaa:	0e 94 83 1c 	call	0x3906	; 0x3906 <randRNG8NextBoolean()>
    4aae:	28 2f       	mov	r18, r24
    4ab0:	80 e0       	ldi	r24, 0x00	; 0
    4ab2:	90 e0       	ldi	r25, 0x00	; 0
    4ab4:	61 2f       	mov	r22, r17
    4ab6:	40 e0       	ldi	r20, 0x00	; 0
    4ab8:	50 e0       	ldi	r21, 0x00	; 0
    4aba:	00 e0       	ldi	r16, 0x00	; 0
    4abc:	10 e0       	ldi	r17, 0x00	; 0
    4abe:	0e 94 9f 12 	call	0x253e	; 0x253e <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)>
    4ac2:	89 2b       	or	r24, r25
    4ac4:	31 f0       	breq	.+12     	; 0x4ad2 <testFullStatsMessageCoreEncDec()+0x58>
    4ac6:	80 e0       	ldi	r24, 0x00	; 0
    4ac8:	90 e0       	ldi	r25, 0x00	; 0
    4aca:	63 e6       	ldi	r22, 0x63	; 99
    4acc:	73 e0       	ldi	r23, 0x03	; 3
    4ace:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrue(NULL == decodeFullStatsMessageCore(NULL, randRNG8(), stTXalwaysAll, randRNG8NextBoolean(), NULL));
    4ad2:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <randRNG8()>
    4ad6:	18 2f       	mov	r17, r24
    4ad8:	0e 94 83 1c 	call	0x3906	; 0x3906 <randRNG8NextBoolean()>
    4adc:	28 2f       	mov	r18, r24
    4ade:	80 e0       	ldi	r24, 0x00	; 0
    4ae0:	90 e0       	ldi	r25, 0x00	; 0
    4ae2:	61 2f       	mov	r22, r17
    4ae4:	40 e0       	ldi	r20, 0x00	; 0
    4ae6:	50 e0       	ldi	r21, 0x00	; 0
    4ae8:	00 e0       	ldi	r16, 0x00	; 0
    4aea:	10 e0       	ldi	r17, 0x00	; 0
    4aec:	0e 94 c4 11 	call	0x2388	; 0x2388 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)>
    4af0:	89 2b       	or	r24, r25
    4af2:	31 f0       	breq	.+12     	; 0x4b00 <testFullStatsMessageCoreEncDec()+0x86>
    4af4:	80 e0       	ldi	r24, 0x00	; 0
    4af6:	90 e0       	ldi	r25, 0x00	; 0
    4af8:	64 e6       	ldi	r22, 0x64	; 100
    4afa:	73 e0       	ldi	r23, 0x03	; 3
    4afc:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrue(NULL == encodeFullStatsMessageCore(NULL, FullStatsMessageCore_MAX_BYTES_ON_WIRE+1, stTXalwaysAll, randRNG8NextBoolean(), &content));
    4b00:	0e 94 83 1c 	call	0x3906	; 0x3906 <randRNG8NextBoolean()>
    4b04:	28 2f       	mov	r18, r24
    4b06:	80 e0       	ldi	r24, 0x00	; 0
    4b08:	90 e0       	ldi	r25, 0x00	; 0
    4b0a:	69 e0       	ldi	r22, 0x09	; 9
    4b0c:	40 e0       	ldi	r20, 0x00	; 0
    4b0e:	50 e0       	ldi	r21, 0x00	; 0
    4b10:	8e 01       	movw	r16, r28
    4b12:	0f 5f       	subi	r16, 0xFF	; 255
    4b14:	1f 4f       	sbci	r17, 0xFF	; 255
    4b16:	0e 94 9f 12 	call	0x253e	; 0x253e <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)>
    4b1a:	89 2b       	or	r24, r25
    4b1c:	31 f0       	breq	.+12     	; 0x4b2a <testFullStatsMessageCoreEncDec()+0xb0>
    4b1e:	80 e0       	ldi	r24, 0x00	; 0
    4b20:	90 e0       	ldi	r25, 0x00	; 0
    4b22:	65 e6       	ldi	r22, 0x65	; 101
    4b24:	73 e0       	ldi	r23, 0x03	; 3
    4b26:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrue(NULL == encodeFullStatsMessageCore(buf, FullStatsMessageCore_MAX_BYTES_ON_WIRE+1, stTXalwaysAll, randRNG8NextBoolean(), NULL));
    4b2a:	0e 94 83 1c 	call	0x3906	; 0x3906 <randRNG8NextBoolean()>
    4b2e:	28 2f       	mov	r18, r24
    4b30:	ce 01       	movw	r24, r28
    4b32:	08 96       	adiw	r24, 0x08	; 8
    4b34:	69 e0       	ldi	r22, 0x09	; 9
    4b36:	40 e0       	ldi	r20, 0x00	; 0
    4b38:	50 e0       	ldi	r21, 0x00	; 0
    4b3a:	00 e0       	ldi	r16, 0x00	; 0
    4b3c:	10 e0       	ldi	r17, 0x00	; 0
    4b3e:	0e 94 9f 12 	call	0x253e	; 0x253e <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)>
    4b42:	89 2b       	or	r24, r25
    4b44:	31 f0       	breq	.+12     	; 0x4b52 <testFullStatsMessageCoreEncDec()+0xd8>
    4b46:	80 e0       	ldi	r24, 0x00	; 0
    4b48:	90 e0       	ldi	r25, 0x00	; 0
    4b4a:	66 e6       	ldi	r22, 0x66	; 102
    4b4c:	73 e0       	ldi	r23, 0x03	; 3
    4b4e:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrue(NULL == decodeFullStatsMessageCore(NULL, FullStatsMessageCore_MIN_BYTES_ON_WIRE+1, stTXalwaysAll, randRNG8NextBoolean(), &content));
    4b52:	0e 94 83 1c 	call	0x3906	; 0x3906 <randRNG8NextBoolean()>
    4b56:	28 2f       	mov	r18, r24
    4b58:	80 e0       	ldi	r24, 0x00	; 0
    4b5a:	90 e0       	ldi	r25, 0x00	; 0
    4b5c:	64 e0       	ldi	r22, 0x04	; 4
    4b5e:	40 e0       	ldi	r20, 0x00	; 0
    4b60:	50 e0       	ldi	r21, 0x00	; 0
    4b62:	8e 01       	movw	r16, r28
    4b64:	0f 5f       	subi	r16, 0xFF	; 255
    4b66:	1f 4f       	sbci	r17, 0xFF	; 255
    4b68:	0e 94 c4 11 	call	0x2388	; 0x2388 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)>
    4b6c:	89 2b       	or	r24, r25
    4b6e:	31 f0       	breq	.+12     	; 0x4b7c <testFullStatsMessageCoreEncDec()+0x102>
    4b70:	80 e0       	ldi	r24, 0x00	; 0
    4b72:	90 e0       	ldi	r25, 0x00	; 0
    4b74:	67 e6       	ldi	r22, 0x67	; 103
    4b76:	73 e0       	ldi	r23, 0x03	; 3
    4b78:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrue(NULL == decodeFullStatsMessageCore(buf, FullStatsMessageCore_MIN_BYTES_ON_WIRE+1, stTXalwaysAll, randRNG8NextBoolean(), NULL));
    4b7c:	0e 94 83 1c 	call	0x3906	; 0x3906 <randRNG8NextBoolean()>
    4b80:	28 2f       	mov	r18, r24
    4b82:	ce 01       	movw	r24, r28
    4b84:	08 96       	adiw	r24, 0x08	; 8
    4b86:	64 e0       	ldi	r22, 0x04	; 4
    4b88:	40 e0       	ldi	r20, 0x00	; 0
    4b8a:	50 e0       	ldi	r21, 0x00	; 0
    4b8c:	00 e0       	ldi	r16, 0x00	; 0
    4b8e:	10 e0       	ldi	r17, 0x00	; 0
    4b90:	0e 94 c4 11 	call	0x2388	; 0x2388 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)>
    4b94:	89 2b       	or	r24, r25
    4b96:	31 f0       	breq	.+12     	; 0x4ba4 <testFullStatsMessageCoreEncDec()+0x12a>
    4b98:	80 e0       	ldi	r24, 0x00	; 0
    4b9a:	90 e0       	ldi	r25, 0x00	; 0
    4b9c:	68 e6       	ldi	r22, 0x68	; 104
    4b9e:	73 e0       	ldi	r23, 0x03	; 3
    4ba0:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>

  // Prepare a minimal (empty) non-secure message.
  memset(buf, 0, sizeof(buf));
    4ba4:	fe 01       	movw	r30, r28
    4ba6:	38 96       	adiw	r30, 0x08	; 8
    4ba8:	89 e0       	ldi	r24, 0x09	; 9
    4baa:	df 01       	movw	r26, r30
    4bac:	1d 92       	st	X+, r1
    4bae:	8a 95       	dec	r24
    4bb0:	e9 f7       	brne	.-6      	; 0x4bac <testFullStatsMessageCoreEncDec()+0x132>
#define FullStatsMessageCore_MAX_BYTES_ON_WIRE 8
// Minimum size on wire including trailing CRC of core of FullStatsMessage.  TX message buffer should be one larger for trailing 0xff.
#define FullStatsMessageCore_MIN_BYTES_ON_WIRE 3

// Clear a FullStatsMessageCore_t, also indicating no optional fields present.
static inline void clearFullStatsMessageCore(FullStatsMessageCore_t *const p) { memset(p, 0, sizeof(FullStatsMessageCore_t)); }
    4bb2:	8e 01       	movw	r16, r28
    4bb4:	0f 5f       	subi	r16, 0xFF	; 255
    4bb6:	1f 4f       	sbci	r17, 0xFF	; 255
    4bb8:	87 e0       	ldi	r24, 0x07	; 7
    4bba:	d8 01       	movw	r26, r16
    4bbc:	1d 92       	st	X+, r1
    4bbe:	8a 95       	dec	r24
    4bc0:	e9 f7       	brne	.-6      	; 0x4bbc <testFullStatsMessageCoreEncDec()+0x142>
  clearFullStatsMessageCore(&content);
  const uint8_t *emptyMsg = encodeFullStatsMessageCore(buf, sizeof(buf), stTXalwaysAll, false, &content);
    4bc2:	cf 01       	movw	r24, r30
    4bc4:	69 e0       	ldi	r22, 0x09	; 9
    4bc6:	40 e0       	ldi	r20, 0x00	; 0
    4bc8:	50 e0       	ldi	r21, 0x00	; 0
    4bca:	20 e0       	ldi	r18, 0x00	; 0
    4bcc:	0e 94 9f 12 	call	0x253e	; 0x253e <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)>
    4bd0:	7c 01       	movw	r14, r24
  AssertIsTrue(NULL != emptyMsg); // Must succeed.
    4bd2:	00 97       	sbiw	r24, 0x00	; 0
    4bd4:	31 f4       	brne	.+12     	; 0x4be2 <testFullStatsMessageCoreEncDec()+0x168>
    4bd6:	80 e0       	ldi	r24, 0x00	; 0
    4bd8:	90 e0       	ldi	r25, 0x00	; 0
    4bda:	6e e6       	ldi	r22, 0x6E	; 110
    4bdc:	73 e0       	ldi	r23, 0x03	; 3
    4bde:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(emptyMsg - buf == FullStatsMessageCore_MIN_BYTES_ON_WIRE, emptyMsg - buf); // Must correspond to minimum size.
    4be2:	68 e0       	ldi	r22, 0x08	; 8
    4be4:	c6 2e       	mov	r12, r22
    4be6:	d1 2c       	mov	r13, r1
    4be8:	cc 0e       	add	r12, r28
    4bea:	dd 1e       	adc	r13, r29
    4bec:	c7 01       	movw	r24, r14
    4bee:	8c 19       	sub	r24, r12
    4bf0:	9d 09       	sbc	r25, r13
    4bf2:	83 30       	cpi	r24, 0x03	; 3
    4bf4:	91 05       	cpc	r25, r1
    4bf6:	21 f0       	breq	.+8      	; 0x4c00 <testFullStatsMessageCoreEncDec()+0x186>
    4bf8:	6f e6       	ldi	r22, 0x6F	; 111
    4bfa:	73 e0       	ldi	r23, 0x03	; 3
    4bfc:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(MESSAGING_FULL_STATS_HEADER_MSBS == buf[0], buf[0]); // Header byte.
    4c00:	88 85       	ldd	r24, Y+8	; 0x08
    4c02:	80 37       	cpi	r24, 0x70	; 112
    4c04:	29 f0       	breq	.+10     	; 0x4c10 <testFullStatsMessageCoreEncDec()+0x196>
    4c06:	90 e0       	ldi	r25, 0x00	; 0
    4c08:	60 e7       	ldi	r22, 0x70	; 112
    4c0a:	73 e0       	ldi	r23, 0x03	; 3
    4c0c:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(MESSAGING_FULL_STATS_FLAGS_HEADER_MSBS == buf[1], buf[1]); // Flags header byte.
    4c10:	89 85       	ldd	r24, Y+9	; 0x09
    4c12:	80 36       	cpi	r24, 0x60	; 96
    4c14:	29 f0       	breq	.+10     	; 0x4c20 <testFullStatsMessageCoreEncDec()+0x1a6>
    4c16:	90 e0       	ldi	r25, 0x00	; 0
    4c18:	61 e7       	ldi	r22, 0x71	; 113
    4c1a:	73 e0       	ldi	r23, 0x03	; 3
    4c1c:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(0x65 == buf[2], buf[2]); // CRC.
    4c20:	8a 85       	ldd	r24, Y+10	; 0x0a
    4c22:	85 36       	cpi	r24, 0x65	; 101
    4c24:	29 f0       	breq	.+10     	; 0x4c30 <testFullStatsMessageCoreEncDec()+0x1b6>
    4c26:	90 e0       	ldi	r25, 0x00	; 0
    4c28:	62 e7       	ldi	r22, 0x72	; 114
    4c2a:	73 e0       	ldi	r23, 0x03	; 3
    4c2c:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrue(((uint8_t)0xff) == *emptyMsg); // Must be correctly terminated.
    4c30:	f7 01       	movw	r30, r14
    4c32:	80 81       	ld	r24, Z
    4c34:	8f 3f       	cpi	r24, 0xFF	; 255
    4c36:	31 f0       	breq	.+12     	; 0x4c44 <testFullStatsMessageCoreEncDec()+0x1ca>
    4c38:	80 e0       	ldi	r24, 0x00	; 0
    4c3a:	90 e0       	ldi	r25, 0x00	; 0
    4c3c:	63 e7       	ldi	r22, 0x73	; 115
    4c3e:	73 e0       	ldi	r23, 0x03	; 3
    4c40:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
    4c44:	fe 01       	movw	r30, r28
    4c46:	31 96       	adiw	r30, 0x01	; 1
    4c48:	87 e0       	ldi	r24, 0x07	; 7
    4c4a:	df 01       	movw	r26, r30
    4c4c:	1d 92       	st	X+, r1
    4c4e:	8a 95       	dec	r24
    4c50:	e9 f7       	brne	.-6      	; 0x4c4c <testFullStatsMessageCoreEncDec()+0x1d2>
  // Decode the message just generated into a freshly-scrubbed content structure.
  clearFullStatsMessageCore(&content);
  const uint8_t *emptyMsgDE = decodeFullStatsMessageCore(buf, emptyMsg-buf, stTXalwaysAll, false, &content);
    4c52:	bc 2c       	mov	r11, r12
    4c54:	6e 2d       	mov	r22, r14
    4c56:	6c 19       	sub	r22, r12
    4c58:	ce 01       	movw	r24, r28
    4c5a:	08 96       	adiw	r24, 0x08	; 8
    4c5c:	40 e0       	ldi	r20, 0x00	; 0
    4c5e:	50 e0       	ldi	r21, 0x00	; 0
    4c60:	20 e0       	ldi	r18, 0x00	; 0
    4c62:	8f 01       	movw	r16, r30
    4c64:	0e 94 c4 11 	call	0x2388	; 0x2388 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)>
    4c68:	8c 01       	movw	r16, r24
  AssertIsTrue(NULL != emptyMsgDE); // Must succeed.
    4c6a:	00 97       	sbiw	r24, 0x00	; 0
    4c6c:	31 f4       	brne	.+12     	; 0x4c7a <testFullStatsMessageCoreEncDec()+0x200>
    4c6e:	80 e0       	ldi	r24, 0x00	; 0
    4c70:	90 e0       	ldi	r25, 0x00	; 0
    4c72:	67 e7       	ldi	r22, 0x77	; 119
    4c74:	73 e0       	ldi	r23, 0x03	; 3
    4c76:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrue(emptyMsg == emptyMsgDE); // Must return correct end of message.
    4c7a:	e0 16       	cp	r14, r16
    4c7c:	f1 06       	cpc	r15, r17
    4c7e:	31 f0       	breq	.+12     	; 0x4c8c <testFullStatsMessageCoreEncDec()+0x212>
    4c80:	80 e0       	ldi	r24, 0x00	; 0
    4c82:	90 e0       	ldi	r25, 0x00	; 0
    4c84:	68 e7       	ldi	r22, 0x78	; 120
    4c86:	73 e0       	ldi	r23, 0x03	; 3
    4c88:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  // Verify that there is no content.
  AssertIsTrue(!content.containsID);
    4c8c:	89 81       	ldd	r24, Y+1	; 0x01
    4c8e:	80 ff       	sbrs	r24, 0
    4c90:	06 c0       	rjmp	.+12     	; 0x4c9e <testFullStatsMessageCoreEncDec()+0x224>
    4c92:	80 e0       	ldi	r24, 0x00	; 0
    4c94:	90 e0       	ldi	r25, 0x00	; 0
    4c96:	6a e7       	ldi	r22, 0x7A	; 122
    4c98:	73 e0       	ldi	r23, 0x03	; 3
    4c9a:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrue(!content.containsTempAndPower);
    4c9e:	89 81       	ldd	r24, Y+1	; 0x01
    4ca0:	81 ff       	sbrs	r24, 1
    4ca2:	06 c0       	rjmp	.+12     	; 0x4cb0 <testFullStatsMessageCoreEncDec()+0x236>
    4ca4:	80 e0       	ldi	r24, 0x00	; 0
    4ca6:	90 e0       	ldi	r25, 0x00	; 0
    4ca8:	6b e7       	ldi	r22, 0x7B	; 123
    4caa:	73 e0       	ldi	r23, 0x03	; 3
    4cac:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrue(!content.containsAmbL);
    4cb0:	89 81       	ldd	r24, Y+1	; 0x01
    4cb2:	82 ff       	sbrs	r24, 2
    4cb4:	06 c0       	rjmp	.+12     	; 0x4cc2 <testFullStatsMessageCoreEncDec()+0x248>
    4cb6:	80 e0       	ldi	r24, 0x00	; 0
    4cb8:	90 e0       	ldi	r25, 0x00	; 0
    4cba:	6c e7       	ldi	r22, 0x7C	; 124
    4cbc:	73 e0       	ldi	r23, 0x03	; 3
    4cbe:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>

  // Prepare a non-secure message with ID.
  memset(buf, 0, sizeof(buf));
    4cc2:	fe 01       	movw	r30, r28
    4cc4:	38 96       	adiw	r30, 0x08	; 8
    4cc6:	89 e0       	ldi	r24, 0x09	; 9
    4cc8:	df 01       	movw	r26, r30
    4cca:	1d 92       	st	X+, r1
    4ccc:	8a 95       	dec	r24
    4cce:	e9 f7       	brne	.-6      	; 0x4cca <testFullStatsMessageCoreEncDec()+0x250>
    4cd0:	8e 01       	movw	r16, r28
    4cd2:	0f 5f       	subi	r16, 0xFF	; 255
    4cd4:	1f 4f       	sbci	r17, 0xFF	; 255
    4cd6:	87 e0       	ldi	r24, 0x07	; 7
    4cd8:	d8 01       	movw	r26, r16
    4cda:	1d 92       	st	X+, r1
    4cdc:	8a 95       	dec	r24
    4cde:	e9 f7       	brne	.-6      	; 0x4cda <testFullStatsMessageCoreEncDec()+0x260>
  clearFullStatsMessageCore(&content);
  content.id0 = 0x80;
    4ce0:	80 e8       	ldi	r24, 0x80	; 128
    4ce2:	8a 83       	std	Y+2, r24	; 0x02
  content.id1 = 0x00;
    4ce4:	1b 82       	std	Y+3, r1	; 0x03
  content.containsID = true;
    4ce6:	89 81       	ldd	r24, Y+1	; 0x01
    4ce8:	81 60       	ori	r24, 0x01	; 1
    4cea:	89 83       	std	Y+1, r24	; 0x01
  AssertIsTrue(NULL == encodeFullStatsMessageCore(buf, sizeof(buf), stTXalwaysAll, false, &content)); // Should reject ID bytes with differring msbits.
    4cec:	cf 01       	movw	r24, r30
    4cee:	69 e0       	ldi	r22, 0x09	; 9
    4cf0:	40 e0       	ldi	r20, 0x00	; 0
    4cf2:	50 e0       	ldi	r21, 0x00	; 0
    4cf4:	20 e0       	ldi	r18, 0x00	; 0
    4cf6:	0e 94 9f 12 	call	0x253e	; 0x253e <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)>
    4cfa:	89 2b       	or	r24, r25
    4cfc:	31 f0       	breq	.+12     	; 0x4d0a <testFullStatsMessageCoreEncDec()+0x290>
    4cfe:	80 e0       	ldi	r24, 0x00	; 0
    4d00:	90 e0       	ldi	r25, 0x00	; 0
    4d02:	64 e8       	ldi	r22, 0x84	; 132
    4d04:	73 e0       	ldi	r23, 0x03	; 3
    4d06:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  content.id1 = 0x81;
    4d0a:	81 e8       	ldi	r24, 0x81	; 129
    4d0c:	8b 83       	std	Y+3, r24	; 0x03
  const uint8_t *onlyIDMsg = encodeFullStatsMessageCore(buf, sizeof(buf), stTXalwaysAll, false, &content);
    4d0e:	ce 01       	movw	r24, r28
    4d10:	08 96       	adiw	r24, 0x08	; 8
    4d12:	69 e0       	ldi	r22, 0x09	; 9
    4d14:	40 e0       	ldi	r20, 0x00	; 0
    4d16:	50 e0       	ldi	r21, 0x00	; 0
    4d18:	20 e0       	ldi	r18, 0x00	; 0
    4d1a:	8e 01       	movw	r16, r28
    4d1c:	0f 5f       	subi	r16, 0xFF	; 255
    4d1e:	1f 4f       	sbci	r17, 0xFF	; 255
    4d20:	0e 94 9f 12 	call	0x253e	; 0x253e <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)>
    4d24:	7c 01       	movw	r14, r24
  AssertIsTrue(NULL != onlyIDMsg); // Must succeed.
    4d26:	00 97       	sbiw	r24, 0x00	; 0
    4d28:	31 f4       	brne	.+12     	; 0x4d36 <testFullStatsMessageCoreEncDec()+0x2bc>
    4d2a:	80 e0       	ldi	r24, 0x00	; 0
    4d2c:	90 e0       	ldi	r25, 0x00	; 0
    4d2e:	67 e8       	ldi	r22, 0x87	; 135
    4d30:	73 e0       	ldi	r23, 0x03	; 3
    4d32:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(onlyIDMsg - buf == FullStatsMessageCore_MIN_BYTES_ON_WIRE + 2, onlyIDMsg - buf); // Must correspond to minimum size + 2 ID bytes.
    4d36:	c7 01       	movw	r24, r14
    4d38:	8c 19       	sub	r24, r12
    4d3a:	9d 09       	sbc	r25, r13
    4d3c:	85 30       	cpi	r24, 0x05	; 5
    4d3e:	91 05       	cpc	r25, r1
    4d40:	21 f0       	breq	.+8      	; 0x4d4a <testFullStatsMessageCoreEncDec()+0x2d0>
    4d42:	68 e8       	ldi	r22, 0x88	; 136
    4d44:	73 e0       	ldi	r23, 0x03	; 3
    4d46:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr((MESSAGING_FULL_STATS_HEADER_MSBS | MESSAGING_FULL_STATS_HEADER_BITS_ID_PRESENT | MESSAGING_FULL_STATS_HEADER_BITS_ID_HIGH) == buf[0], buf[0]); // Header byte.
    4d4a:	88 85       	ldd	r24, Y+8	; 0x08
    4d4c:	86 37       	cpi	r24, 0x76	; 118
    4d4e:	29 f0       	breq	.+10     	; 0x4d5a <testFullStatsMessageCoreEncDec()+0x2e0>
    4d50:	90 e0       	ldi	r25, 0x00	; 0
    4d52:	69 e8       	ldi	r22, 0x89	; 137
    4d54:	73 e0       	ldi	r23, 0x03	; 3
    4d56:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(0x00 == buf[1], buf[1]); // ID0 without msbit.
    4d5a:	89 85       	ldd	r24, Y+9	; 0x09
    4d5c:	88 23       	and	r24, r24
    4d5e:	29 f0       	breq	.+10     	; 0x4d6a <testFullStatsMessageCoreEncDec()+0x2f0>
    4d60:	90 e0       	ldi	r25, 0x00	; 0
    4d62:	6a e8       	ldi	r22, 0x8A	; 138
    4d64:	73 e0       	ldi	r23, 0x03	; 3
    4d66:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(0x01 == buf[2], buf[2]); // ID1 without msbit.
    4d6a:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d6c:	81 30       	cpi	r24, 0x01	; 1
    4d6e:	29 f0       	breq	.+10     	; 0x4d7a <testFullStatsMessageCoreEncDec()+0x300>
    4d70:	90 e0       	ldi	r25, 0x00	; 0
    4d72:	6b e8       	ldi	r22, 0x8B	; 139
    4d74:	73 e0       	ldi	r23, 0x03	; 3
    4d76:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(MESSAGING_FULL_STATS_FLAGS_HEADER_MSBS == buf[3], buf[3]); // Flags header byte.
    4d7a:	8b 85       	ldd	r24, Y+11	; 0x0b
    4d7c:	80 36       	cpi	r24, 0x60	; 96
    4d7e:	29 f0       	breq	.+10     	; 0x4d8a <testFullStatsMessageCoreEncDec()+0x310>
    4d80:	90 e0       	ldi	r25, 0x00	; 0
    4d82:	6c e8       	ldi	r22, 0x8C	; 140
    4d84:	73 e0       	ldi	r23, 0x03	; 3
    4d86:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(0x01 == buf[4], buf[4]); // CRC.
    4d8a:	8c 85       	ldd	r24, Y+12	; 0x0c
    4d8c:	81 30       	cpi	r24, 0x01	; 1
    4d8e:	29 f0       	breq	.+10     	; 0x4d9a <testFullStatsMessageCoreEncDec()+0x320>
    4d90:	90 e0       	ldi	r25, 0x00	; 0
    4d92:	6d e8       	ldi	r22, 0x8D	; 141
    4d94:	73 e0       	ldi	r23, 0x03	; 3
    4d96:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrue(((uint8_t)0xff) == *onlyIDMsg); // Must be correctly terminated.
    4d9a:	f7 01       	movw	r30, r14
    4d9c:	80 81       	ld	r24, Z
    4d9e:	8f 3f       	cpi	r24, 0xFF	; 255
    4da0:	31 f0       	breq	.+12     	; 0x4dae <testFullStatsMessageCoreEncDec()+0x334>
    4da2:	80 e0       	ldi	r24, 0x00	; 0
    4da4:	90 e0       	ldi	r25, 0x00	; 0
    4da6:	6e e8       	ldi	r22, 0x8E	; 142
    4da8:	73 e0       	ldi	r23, 0x03	; 3
    4daa:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
    4dae:	fe 01       	movw	r30, r28
    4db0:	31 96       	adiw	r30, 0x01	; 1
    4db2:	87 e0       	ldi	r24, 0x07	; 7
    4db4:	df 01       	movw	r26, r30
    4db6:	1d 92       	st	X+, r1
    4db8:	8a 95       	dec	r24
    4dba:	e9 f7       	brne	.-6      	; 0x4db6 <testFullStatsMessageCoreEncDec()+0x33c>
  // Decode the message just generated into a freshly-scrubbed content structure.
  clearFullStatsMessageCore(&content);
  const uint8_t *onlyIDMsgDE = decodeFullStatsMessageCore(buf, onlyIDMsg-buf, stTXalwaysAll, false, &content);
    4dbc:	6e 2d       	mov	r22, r14
    4dbe:	6b 19       	sub	r22, r11
    4dc0:	ce 01       	movw	r24, r28
    4dc2:	08 96       	adiw	r24, 0x08	; 8
    4dc4:	40 e0       	ldi	r20, 0x00	; 0
    4dc6:	50 e0       	ldi	r21, 0x00	; 0
    4dc8:	20 e0       	ldi	r18, 0x00	; 0
    4dca:	8f 01       	movw	r16, r30
    4dcc:	0e 94 c4 11 	call	0x2388	; 0x2388 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)>
    4dd0:	8c 01       	movw	r16, r24
  AssertIsTrue(NULL != onlyIDMsgDE); // Must succeed.
    4dd2:	00 97       	sbiw	r24, 0x00	; 0
    4dd4:	31 f4       	brne	.+12     	; 0x4de2 <testFullStatsMessageCoreEncDec()+0x368>
    4dd6:	80 e0       	ldi	r24, 0x00	; 0
    4dd8:	90 e0       	ldi	r25, 0x00	; 0
    4dda:	62 e9       	ldi	r22, 0x92	; 146
    4ddc:	73 e0       	ldi	r23, 0x03	; 3
    4dde:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrue(onlyIDMsg == onlyIDMsgDE); // Must return correct end of message.
    4de2:	e0 16       	cp	r14, r16
    4de4:	f1 06       	cpc	r15, r17
    4de6:	31 f0       	breq	.+12     	; 0x4df4 <testFullStatsMessageCoreEncDec()+0x37a>
    4de8:	80 e0       	ldi	r24, 0x00	; 0
    4dea:	90 e0       	ldi	r25, 0x00	; 0
    4dec:	63 e9       	ldi	r22, 0x93	; 147
    4dee:	73 e0       	ldi	r23, 0x03	; 3
    4df0:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  // Verify that there is only ID.
  AssertIsTrue(content.containsID);
    4df4:	89 81       	ldd	r24, Y+1	; 0x01
    4df6:	80 fd       	sbrc	r24, 0
    4df8:	06 c0       	rjmp	.+12     	; 0x4e06 <testFullStatsMessageCoreEncDec()+0x38c>
    4dfa:	80 e0       	ldi	r24, 0x00	; 0
    4dfc:	90 e0       	ldi	r25, 0x00	; 0
    4dfe:	65 e9       	ldi	r22, 0x95	; 149
    4e00:	73 e0       	ldi	r23, 0x03	; 3
    4e02:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(content.id0 == (uint8_t)0x80, content.id0);
    4e06:	8a 81       	ldd	r24, Y+2	; 0x02
    4e08:	80 38       	cpi	r24, 0x80	; 128
    4e0a:	29 f0       	breq	.+10     	; 0x4e16 <testFullStatsMessageCoreEncDec()+0x39c>
    4e0c:	90 e0       	ldi	r25, 0x00	; 0
    4e0e:	66 e9       	ldi	r22, 0x96	; 150
    4e10:	73 e0       	ldi	r23, 0x03	; 3
    4e12:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(content.id1 == (uint8_t)0x81, content.id1);
    4e16:	8b 81       	ldd	r24, Y+3	; 0x03
    4e18:	81 38       	cpi	r24, 0x81	; 129
    4e1a:	29 f0       	breq	.+10     	; 0x4e26 <testFullStatsMessageCoreEncDec()+0x3ac>
    4e1c:	90 e0       	ldi	r25, 0x00	; 0
    4e1e:	67 e9       	ldi	r22, 0x97	; 151
    4e20:	73 e0       	ldi	r23, 0x03	; 3
    4e22:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrue(!content.containsTempAndPower);
    4e26:	89 81       	ldd	r24, Y+1	; 0x01
    4e28:	81 ff       	sbrs	r24, 1
    4e2a:	06 c0       	rjmp	.+12     	; 0x4e38 <testFullStatsMessageCoreEncDec()+0x3be>
    4e2c:	80 e0       	ldi	r24, 0x00	; 0
    4e2e:	90 e0       	ldi	r25, 0x00	; 0
    4e30:	68 e9       	ldi	r22, 0x98	; 152
    4e32:	73 e0       	ldi	r23, 0x03	; 3
    4e34:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrue(!content.containsAmbL);
    4e38:	89 81       	ldd	r24, Y+1	; 0x01
    4e3a:	82 ff       	sbrs	r24, 2
    4e3c:	06 c0       	rjmp	.+12     	; 0x4e4a <testFullStatsMessageCoreEncDec()+0x3d0>
    4e3e:	80 e0       	ldi	r24, 0x00	; 0
    4e40:	90 e0       	ldi	r25, 0x00	; 0
    4e42:	69 e9       	ldi	r22, 0x99	; 153
    4e44:	73 e0       	ldi	r23, 0x03	; 3
    4e46:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>

  // Prepare a non-secure message with ID, temp/power, ambient light level and occupancy.
  memset(buf, 0, sizeof(buf));
    4e4a:	fe 01       	movw	r30, r28
    4e4c:	38 96       	adiw	r30, 0x08	; 8
    4e4e:	89 e0       	ldi	r24, 0x09	; 9
    4e50:	df 01       	movw	r26, r30
    4e52:	1d 92       	st	X+, r1
    4e54:	8a 95       	dec	r24
    4e56:	e9 f7       	brne	.-6      	; 0x4e52 <testFullStatsMessageCoreEncDec()+0x3d8>
    4e58:	8e 01       	movw	r16, r28
    4e5a:	0f 5f       	subi	r16, 0xFF	; 255
    4e5c:	1f 4f       	sbci	r17, 0xFF	; 255
    4e5e:	87 e0       	ldi	r24, 0x07	; 7
    4e60:	d8 01       	movw	r26, r16
    4e62:	1d 92       	st	X+, r1
    4e64:	8a 95       	dec	r24
    4e66:	e9 f7       	brne	.-6      	; 0x4e62 <testFullStatsMessageCoreEncDec()+0x3e8>
  clearFullStatsMessageCore(&content);
  content.id0 = 0x83;
    4e68:	83 e8       	ldi	r24, 0x83	; 131
    4e6a:	8a 83       	std	Y+2, r24	; 0x02
  content.id1 = 0x98;
    4e6c:	88 e9       	ldi	r24, 0x98	; 152
    4e6e:	8b 83       	std	Y+3, r24	; 0x03
  content.containsID = true;
    4e70:	99 81       	ldd	r25, Y+1	; 0x01
  content.tempAndPower.tempC16 = (19 << 4) + 1; // (19 + 1/16)C.
    4e72:	81 e3       	ldi	r24, 0x31	; 49
    4e74:	8c 83       	std	Y+4, r24	; 0x04
  content.tempAndPower.powerLow = false; // Normal power.
    4e76:	81 e0       	ldi	r24, 0x01	; 1
    4e78:	8d 83       	std	Y+5, r24	; 0x05
  content.containsTempAndPower = true;
  content.ambL = 42; // Allowed value in range [1,254].
    4e7a:	8a e2       	ldi	r24, 0x2A	; 42
    4e7c:	8e 83       	std	Y+6, r24	; 0x06
  content.containsAmbL = true;
    4e7e:	97 60       	ori	r25, 0x07	; 7
    4e80:	99 83       	std	Y+1, r25	; 0x01
  content.occ = 3; // Not occupied recently.
    4e82:	8f 81       	ldd	r24, Y+7	; 0x07
    4e84:	83 60       	ori	r24, 0x03	; 3
    4e86:	8f 83       	std	Y+7, r24	; 0x07
  const uint8_t *msg1 = encodeFullStatsMessageCore(buf, sizeof(buf), stTXalwaysAll, false, &content);
    4e88:	cf 01       	movw	r24, r30
    4e8a:	69 e0       	ldi	r22, 0x09	; 9
    4e8c:	40 e0       	ldi	r20, 0x00	; 0
    4e8e:	50 e0       	ldi	r21, 0x00	; 0
    4e90:	20 e0       	ldi	r18, 0x00	; 0
    4e92:	0e 94 9f 12 	call	0x253e	; 0x253e <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)>
    4e96:	7c 01       	movw	r14, r24
  AssertIsTrue(NULL != msg1); // Must succeed.
    4e98:	00 97       	sbiw	r24, 0x00	; 0
    4e9a:	31 f4       	brne	.+12     	; 0x4ea8 <testFullStatsMessageCoreEncDec()+0x42e>
    4e9c:	80 e0       	ldi	r24, 0x00	; 0
    4e9e:	90 e0       	ldi	r25, 0x00	; 0
    4ea0:	68 ea       	ldi	r22, 0xA8	; 168
    4ea2:	73 e0       	ldi	r23, 0x03	; 3
    4ea4:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(msg1 - buf == FullStatsMessageCore_MAX_BYTES_ON_WIRE, msg1 - buf); // Must correspond to minimum size + 2 ID bytes.
    4ea8:	c7 01       	movw	r24, r14
    4eaa:	8c 19       	sub	r24, r12
    4eac:	9d 09       	sbc	r25, r13
    4eae:	88 30       	cpi	r24, 0x08	; 8
    4eb0:	91 05       	cpc	r25, r1
    4eb2:	21 f0       	breq	.+8      	; 0x4ebc <testFullStatsMessageCoreEncDec()+0x442>
    4eb4:	69 ea       	ldi	r22, 0xA9	; 169
    4eb6:	73 e0       	ldi	r23, 0x03	; 3
    4eb8:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr((MESSAGING_FULL_STATS_HEADER_MSBS | MESSAGING_FULL_STATS_HEADER_BITS_ID_PRESENT | MESSAGING_FULL_STATS_HEADER_BITS_ID_HIGH) == buf[0], buf[0]); // Header byte.
    4ebc:	88 85       	ldd	r24, Y+8	; 0x08
    4ebe:	86 37       	cpi	r24, 0x76	; 118
    4ec0:	29 f0       	breq	.+10     	; 0x4ecc <testFullStatsMessageCoreEncDec()+0x452>
    4ec2:	90 e0       	ldi	r25, 0x00	; 0
    4ec4:	6a ea       	ldi	r22, 0xAA	; 170
    4ec6:	73 e0       	ldi	r23, 0x03	; 3
    4ec8:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(0x03 == buf[1], buf[1]); // ID0 without msbit.
    4ecc:	89 85       	ldd	r24, Y+9	; 0x09
    4ece:	83 30       	cpi	r24, 0x03	; 3
    4ed0:	29 f0       	breq	.+10     	; 0x4edc <testFullStatsMessageCoreEncDec()+0x462>
    4ed2:	90 e0       	ldi	r25, 0x00	; 0
    4ed4:	6b ea       	ldi	r22, 0xAB	; 171
    4ed6:	73 e0       	ldi	r23, 0x03	; 3
    4ed8:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(0x18 == buf[2], buf[2]); // ID1 without msbit.
    4edc:	8a 85       	ldd	r24, Y+10	; 0x0a
    4ede:	88 31       	cpi	r24, 0x18	; 24
    4ee0:	29 f0       	breq	.+10     	; 0x4eec <testFullStatsMessageCoreEncDec()+0x472>
    4ee2:	90 e0       	ldi	r25, 0x00	; 0
    4ee4:	6c ea       	ldi	r22, 0xAC	; 172
    4ee6:	73 e0       	ldi	r23, 0x03	; 3
    4ee8:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr((MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MSBS + 1) == buf[3], buf[3]); // Temp/power first byte.
    4eec:	8b 85       	ldd	r24, Y+11	; 0x0b
    4eee:	81 34       	cpi	r24, 0x41	; 65
    4ef0:	29 f0       	breq	.+10     	; 0x4efc <testFullStatsMessageCoreEncDec()+0x482>
    4ef2:	90 e0       	ldi	r25, 0x00	; 0
    4ef4:	6d ea       	ldi	r22, 0xAD	; 173
    4ef6:	73 e0       	ldi	r23, 0x03	; 3
    4ef8:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr((19 + 20) == buf[4], buf[4]); // Temp second byte.
    4efc:	8c 85       	ldd	r24, Y+12	; 0x0c
    4efe:	87 32       	cpi	r24, 0x27	; 39
    4f00:	29 f0       	breq	.+10     	; 0x4f0c <testFullStatsMessageCoreEncDec()+0x492>
    4f02:	90 e0       	ldi	r25, 0x00	; 0
    4f04:	6e ea       	ldi	r22, 0xAE	; 174
    4f06:	73 e0       	ldi	r23, 0x03	; 3
    4f08:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr((MESSAGING_FULL_STATS_FLAGS_HEADER_MSBS | MESSAGING_FULL_STATS_FLAGS_HEADER_AMBL | 3) == buf[5], buf[5]); // Flags header (no extension byte follows).
    4f0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f0e:	8b 36       	cpi	r24, 0x6B	; 107
    4f10:	29 f0       	breq	.+10     	; 0x4f1c <testFullStatsMessageCoreEncDec()+0x4a2>
    4f12:	90 e0       	ldi	r25, 0x00	; 0
    4f14:	6f ea       	ldi	r22, 0xAF	; 175
    4f16:	73 e0       	ldi	r23, 0x03	; 3
    4f18:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(42 == buf[6], buf[6]); // Ambient light.
    4f1c:	8e 85       	ldd	r24, Y+14	; 0x0e
    4f1e:	8a 32       	cpi	r24, 0x2A	; 42
    4f20:	29 f0       	breq	.+10     	; 0x4f2c <testFullStatsMessageCoreEncDec()+0x4b2>
    4f22:	90 e0       	ldi	r25, 0x00	; 0
    4f24:	60 eb       	ldi	r22, 0xB0	; 176
    4f26:	73 e0       	ldi	r23, 0x03	; 3
    4f28:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(0x44 == buf[7], buf[7]); // CRC.
    4f2c:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f2e:	84 34       	cpi	r24, 0x44	; 68
    4f30:	29 f0       	breq	.+10     	; 0x4f3c <testFullStatsMessageCoreEncDec()+0x4c2>
    4f32:	90 e0       	ldi	r25, 0x00	; 0
    4f34:	61 eb       	ldi	r22, 0xB1	; 177
    4f36:	73 e0       	ldi	r23, 0x03	; 3
    4f38:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrue(((uint8_t)0xff) == *msg1); // Must be correctly terminated.
    4f3c:	f7 01       	movw	r30, r14
    4f3e:	80 81       	ld	r24, Z
    4f40:	8f 3f       	cpi	r24, 0xFF	; 255
    4f42:	31 f0       	breq	.+12     	; 0x4f50 <testFullStatsMessageCoreEncDec()+0x4d6>
    4f44:	80 e0       	ldi	r24, 0x00	; 0
    4f46:	90 e0       	ldi	r25, 0x00	; 0
    4f48:	62 eb       	ldi	r22, 0xB2	; 178
    4f4a:	73 e0       	ldi	r23, 0x03	; 3
    4f4c:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
    4f50:	fe 01       	movw	r30, r28
    4f52:	31 96       	adiw	r30, 0x01	; 1
    4f54:	87 e0       	ldi	r24, 0x07	; 7
    4f56:	df 01       	movw	r26, r30
    4f58:	1d 92       	st	X+, r1
    4f5a:	8a 95       	dec	r24
    4f5c:	e9 f7       	brne	.-6      	; 0x4f58 <testFullStatsMessageCoreEncDec()+0x4de>
  // Decode the message just generated into a freshly-scrubbed content structure.
  clearFullStatsMessageCore(&content);
  const uint8_t *msg1DE = decodeFullStatsMessageCore(buf, msg1-buf, stTXalwaysAll, false, &content);
    4f5e:	6e 2d       	mov	r22, r14
    4f60:	6b 19       	sub	r22, r11
    4f62:	ce 01       	movw	r24, r28
    4f64:	08 96       	adiw	r24, 0x08	; 8
    4f66:	40 e0       	ldi	r20, 0x00	; 0
    4f68:	50 e0       	ldi	r21, 0x00	; 0
    4f6a:	20 e0       	ldi	r18, 0x00	; 0
    4f6c:	8f 01       	movw	r16, r30
    4f6e:	0e 94 c4 11 	call	0x2388	; 0x2388 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)>
    4f72:	8c 01       	movw	r16, r24
  AssertIsTrue(NULL != msg1DE); // Must succeed.
    4f74:	00 97       	sbiw	r24, 0x00	; 0
    4f76:	31 f4       	brne	.+12     	; 0x4f84 <testFullStatsMessageCoreEncDec()+0x50a>
    4f78:	80 e0       	ldi	r24, 0x00	; 0
    4f7a:	90 e0       	ldi	r25, 0x00	; 0
    4f7c:	66 eb       	ldi	r22, 0xB6	; 182
    4f7e:	73 e0       	ldi	r23, 0x03	; 3
    4f80:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrue(msg1 == msg1DE); // Must return correct end of message.
    4f84:	e0 16       	cp	r14, r16
    4f86:	f1 06       	cpc	r15, r17
    4f88:	31 f0       	breq	.+12     	; 0x4f96 <testFullStatsMessageCoreEncDec()+0x51c>
    4f8a:	80 e0       	ldi	r24, 0x00	; 0
    4f8c:	90 e0       	ldi	r25, 0x00	; 0
    4f8e:	67 eb       	ldi	r22, 0xB7	; 183
    4f90:	73 e0       	ldi	r23, 0x03	; 3
    4f92:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrue(content.containsID);
    4f96:	89 81       	ldd	r24, Y+1	; 0x01
    4f98:	80 fd       	sbrc	r24, 0
    4f9a:	06 c0       	rjmp	.+12     	; 0x4fa8 <testFullStatsMessageCoreEncDec()+0x52e>
    4f9c:	80 e0       	ldi	r24, 0x00	; 0
    4f9e:	90 e0       	ldi	r25, 0x00	; 0
    4fa0:	68 eb       	ldi	r22, 0xB8	; 184
    4fa2:	73 e0       	ldi	r23, 0x03	; 3
    4fa4:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(content.id0 == (uint8_t)0x83, content.id0);
    4fa8:	8a 81       	ldd	r24, Y+2	; 0x02
    4faa:	83 38       	cpi	r24, 0x83	; 131
    4fac:	29 f0       	breq	.+10     	; 0x4fb8 <testFullStatsMessageCoreEncDec()+0x53e>
    4fae:	90 e0       	ldi	r25, 0x00	; 0
    4fb0:	69 eb       	ldi	r22, 0xB9	; 185
    4fb2:	73 e0       	ldi	r23, 0x03	; 3
    4fb4:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(content.id1 == (uint8_t)0x98, content.id1);
    4fb8:	8b 81       	ldd	r24, Y+3	; 0x03
    4fba:	88 39       	cpi	r24, 0x98	; 152
    4fbc:	29 f0       	breq	.+10     	; 0x4fc8 <testFullStatsMessageCoreEncDec()+0x54e>
    4fbe:	90 e0       	ldi	r25, 0x00	; 0
    4fc0:	6a eb       	ldi	r22, 0xBA	; 186
    4fc2:	73 e0       	ldi	r23, 0x03	; 3
    4fc4:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrue(content.containsTempAndPower);
    4fc8:	89 81       	ldd	r24, Y+1	; 0x01
    4fca:	81 fd       	sbrc	r24, 1
    4fcc:	06 c0       	rjmp	.+12     	; 0x4fda <testFullStatsMessageCoreEncDec()+0x560>
    4fce:	80 e0       	ldi	r24, 0x00	; 0
    4fd0:	90 e0       	ldi	r25, 0x00	; 0
    4fd2:	6b eb       	ldi	r22, 0xBB	; 187
    4fd4:	73 e0       	ldi	r23, 0x03	; 3
    4fd6:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrue(!content.tempAndPower.powerLow);
    4fda:	8d 81       	ldd	r24, Y+5	; 0x05
    4fdc:	87 ff       	sbrs	r24, 7
    4fde:	06 c0       	rjmp	.+12     	; 0x4fec <testFullStatsMessageCoreEncDec()+0x572>
    4fe0:	80 e0       	ldi	r24, 0x00	; 0
    4fe2:	90 e0       	ldi	r25, 0x00	; 0
    4fe4:	6c eb       	ldi	r22, 0xBC	; 188
    4fe6:	73 e0       	ldi	r23, 0x03	; 3
    4fe8:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrue((19 << 4) + 1 == content.tempAndPower.tempC16);
    4fec:	8c 81       	ldd	r24, Y+4	; 0x04
    4fee:	2d 81       	ldd	r18, Y+5	; 0x05
    4ff0:	92 2f       	mov	r25, r18
    4ff2:	9f 77       	andi	r25, 0x7F	; 127
    4ff4:	88 0f       	add	r24, r24
    4ff6:	99 1f       	adc	r25, r25
    4ff8:	82 56       	subi	r24, 0x62	; 98
    4ffa:	92 40       	sbci	r25, 0x02	; 2
    4ffc:	31 f0       	breq	.+12     	; 0x500a <testFullStatsMessageCoreEncDec()+0x590>
    4ffe:	80 e0       	ldi	r24, 0x00	; 0
    5000:	90 e0       	ldi	r25, 0x00	; 0
    5002:	6d eb       	ldi	r22, 0xBD	; 189
    5004:	73 e0       	ldi	r23, 0x03	; 3
    5006:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrue(content.containsAmbL);
    500a:	89 81       	ldd	r24, Y+1	; 0x01
    500c:	82 fd       	sbrc	r24, 2
    500e:	06 c0       	rjmp	.+12     	; 0x501c <testFullStatsMessageCoreEncDec()+0x5a2>
    5010:	80 e0       	ldi	r24, 0x00	; 0
    5012:	90 e0       	ldi	r25, 0x00	; 0
    5014:	6e eb       	ldi	r22, 0xBE	; 190
    5016:	73 e0       	ldi	r23, 0x03	; 3
    5018:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrue(42 == content.ambL);
    501c:	8e 81       	ldd	r24, Y+6	; 0x06
    501e:	8a 32       	cpi	r24, 0x2A	; 42
    5020:	31 f0       	breq	.+12     	; 0x502e <testFullStatsMessageCoreEncDec()+0x5b4>
    5022:	80 e0       	ldi	r24, 0x00	; 0
    5024:	90 e0       	ldi	r25, 0x00	; 0
    5026:	6f eb       	ldi	r22, 0xBF	; 191
    5028:	73 e0       	ldi	r23, 0x03	; 3
    502a:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  }
    502e:	60 96       	adiw	r28, 0x10	; 16
    5030:	0f b6       	in	r0, 0x3f	; 63
    5032:	f8 94       	cli
    5034:	de bf       	out	0x3e, r29	; 62
    5036:	0f be       	out	0x3f, r0	; 63
    5038:	cd bf       	out	0x3d, r28	; 61
    503a:	cf 91       	pop	r28
    503c:	df 91       	pop	r29
    503e:	1f 91       	pop	r17
    5040:	0f 91       	pop	r16
    5042:	ff 90       	pop	r15
    5044:	ef 90       	pop	r14
    5046:	df 90       	pop	r13
    5048:	cf 90       	pop	r12
    504a:	bf 90       	pop	r11
    504c:	08 95       	ret

0000504e <testCRC()>:
  }

// Do some basic testing of CRC routines.
static void testCRC()
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testCRC");
    504e:	86 e9       	ldi	r24, 0x96	; 150
    5050:	92 e0       	ldi	r25, 0x02	; 2
    5052:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <serialPrintlnAndFlush(__FlashStringHelper const*)>
  // Test the 7-bit CRC (0x5b) routine at a few points.
  const uint8_t crc0 = crc7_5B_update(0, 0); // Minimal stats payload with normal power and minimum temperature.
    5056:	80 e0       	ldi	r24, 0x00	; 0
    5058:	60 e0       	ldi	r22, 0x00	; 0
    505a:	0e 94 80 0c 	call	0x1900	; 0x1900 <crc7_5B_update(unsigned char, unsigned char)>
  AssertIsTrueWithErr((0 == crc0), crc0); 
    505e:	88 23       	and	r24, r24
    5060:	29 f0       	breq	.+10     	; 0x506c <testCRC()+0x1e>
    5062:	90 e0       	ldi	r25, 0x00	; 0
    5064:	6d e4       	ldi	r22, 0x4D	; 77
    5066:	72 e0       	ldi	r23, 0x02	; 2
    5068:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  const uint8_t crc1 = crc7_5B_update(0x40, 0); // Minimal stats payload with normal power and minimum temperature.
    506c:	80 e4       	ldi	r24, 0x40	; 64
    506e:	60 e0       	ldi	r22, 0x00	; 0
    5070:	0e 94 80 0c 	call	0x1900	; 0x1900 <crc7_5B_update(unsigned char, unsigned char)>
  AssertIsTrueWithErr((0x1a == crc1), crc1); 
    5074:	8a 31       	cpi	r24, 0x1A	; 26
    5076:	29 f0       	breq	.+10     	; 0x5082 <testCRC()+0x34>
    5078:	90 e0       	ldi	r25, 0x00	; 0
    507a:	6f e4       	ldi	r22, 0x4F	; 79
    507c:	72 e0       	ldi	r23, 0x02	; 2
    507e:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  const uint8_t crc2 = crc7_5B_update(0x50, 40); // Minimal stats payload with low power and 20C temperature.
    5082:	80 e5       	ldi	r24, 0x50	; 80
    5084:	68 e2       	ldi	r22, 0x28	; 40
    5086:	0e 94 80 0c 	call	0x1900	; 0x1900 <crc7_5B_update(unsigned char, unsigned char)>
  AssertIsTrueWithErr((0x7b == crc2), crc2); 
    508a:	8b 37       	cpi	r24, 0x7B	; 123
    508c:	29 f0       	breq	.+10     	; 0x5098 <testCRC()+0x4a>
    508e:	90 e0       	ldi	r25, 0x00	; 0
    5090:	61 e5       	ldi	r22, 0x51	; 81
    5092:	72 e0       	ldi	r23, 0x02	; 2
    5094:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
    5098:	08 95       	ret

0000509a <testTempCompand()>:
  AssertIsTrue(14 == v4);
  }


// Test temperature companding.
static void testTempCompand()
    509a:	0f 93       	push	r16
    509c:	1f 93       	push	r17
    509e:	cf 93       	push	r28
    50a0:	df 93       	push	r29
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testTempCompand");
    50a2:	8e e9       	ldi	r24, 0x9E	; 158
    50a4:	92 e0       	ldi	r25, 0x02	; 2
    50a6:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <serialPrintlnAndFlush(__FlashStringHelper const*)>
    50aa:	c0 e0       	ldi	r28, 0x00	; 0
    50ac:	d0 e0       	ldi	r29, 0x00	; 0
  // Ensure that all (whole) temperatures from 0C to 100C are correctly compressed and expanded.
  for(int i = 0; i <= 100; ++i)
    {
    //DEBUG_SERIAL_PRINT(i<<4); DEBUG_SERIAL_PRINT(" => "); DEBUG_SERIAL_PRINT(compressTempC16(i<<4)); DEBUG_SERIAL_PRINT(" => "); DEBUG_SERIAL_PRINT(expandTempC16(compressTempC16(i<<4))); DEBUG_SERIAL_PRINTLN();
    AssertIsTrueWithErr(i<<4 == expandTempC16(compressTempC16(i<<4)), i);
    50ae:	8e 01       	movw	r16, r28
    50b0:	74 e0       	ldi	r23, 0x04	; 4
    50b2:	00 0f       	add	r16, r16
    50b4:	11 1f       	adc	r17, r17
    50b6:	7a 95       	dec	r23
    50b8:	e1 f7       	brne	.-8      	; 0x50b2 <testTempCompand()+0x18>
    50ba:	c8 01       	movw	r24, r16
    50bc:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <compressTempC16(int)>
    50c0:	0e 94 1c 06 	call	0xc38	; 0xc38 <expandTempC16(unsigned char)>
    50c4:	08 17       	cp	r16, r24
    50c6:	19 07       	cpc	r17, r25
    50c8:	29 f0       	breq	.+10     	; 0x50d4 <testTempCompand()+0x3a>
    50ca:	ce 01       	movw	r24, r28
    50cc:	6c e7       	ldi	r22, 0x7C	; 124
    50ce:	74 e0       	ldi	r23, 0x04	; 4
    50d0:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
// Test temperature companding.
static void testTempCompand()
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testTempCompand");
  // Ensure that all (whole) temperatures from 0C to 100C are correctly compressed and expanded.
  for(int i = 0; i <= 100; ++i)
    50d4:	21 96       	adiw	r28, 0x01	; 1
    50d6:	c5 36       	cpi	r28, 0x65	; 101
    50d8:	d1 05       	cpc	r29, r1
    50da:	49 f7       	brne	.-46     	; 0x50ae <testTempCompand()+0x14>
    {
    //DEBUG_SERIAL_PRINT(i<<4); DEBUG_SERIAL_PRINT(" => "); DEBUG_SERIAL_PRINT(compressTempC16(i<<4)); DEBUG_SERIAL_PRINT(" => "); DEBUG_SERIAL_PRINT(expandTempC16(compressTempC16(i<<4))); DEBUG_SERIAL_PRINTLN();
    AssertIsTrueWithErr(i<<4 == expandTempC16(compressTempC16(i<<4)), i);
    }
  // Ensure that out-of-range inputs are coerced to the limits.
  AssertIsTrueWithErr(0 == expandTempC16(compressTempC16(-1)), -1);
    50dc:	8f ef       	ldi	r24, 0xFF	; 255
    50de:	9f ef       	ldi	r25, 0xFF	; 255
    50e0:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <compressTempC16(int)>
    50e4:	0e 94 1c 06 	call	0xc38	; 0xc38 <expandTempC16(unsigned char)>
    50e8:	89 2b       	or	r24, r25
    50ea:	31 f0       	breq	.+12     	; 0x50f8 <testTempCompand()+0x5e>
    50ec:	8f ef       	ldi	r24, 0xFF	; 255
    50ee:	9f ef       	ldi	r25, 0xFF	; 255
    50f0:	6f e7       	ldi	r22, 0x7F	; 127
    50f2:	74 e0       	ldi	r23, 0x04	; 4
    50f4:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr((100<<4) == expandTempC16(compressTempC16(101<<4)), 101);
    50f8:	80 e5       	ldi	r24, 0x50	; 80
    50fa:	96 e0       	ldi	r25, 0x06	; 6
    50fc:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <compressTempC16(int)>
    5100:	0e 94 1c 06 	call	0xc38	; 0xc38 <expandTempC16(unsigned char)>
    5104:	80 54       	subi	r24, 0x40	; 64
    5106:	96 40       	sbci	r25, 0x06	; 6
    5108:	31 f0       	breq	.+12     	; 0x5116 <testTempCompand()+0x7c>
    510a:	85 e6       	ldi	r24, 0x65	; 101
    510c:	90 e0       	ldi	r25, 0x00	; 0
    510e:	60 e8       	ldi	r22, 0x80	; 128
    5110:	74 e0       	ldi	r23, 0x04	; 4
    5112:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(COMPRESSION_C16_CEIL_VAL_AFTER == compressTempC16(102<<4), COMPRESSION_C16_CEIL_VAL_AFTER); // Verify ceiling.
    5116:	80 e6       	ldi	r24, 0x60	; 96
    5118:	96 e0       	ldi	r25, 0x06	; 6
    511a:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <compressTempC16(int)>
    511e:	88 3f       	cpi	r24, 0xF8	; 248
    5120:	31 f0       	breq	.+12     	; 0x512e <testTempCompand()+0x94>
    5122:	88 ef       	ldi	r24, 0xF8	; 248
    5124:	90 e0       	ldi	r25, 0x00	; 0
    5126:	61 e8       	ldi	r22, 0x81	; 129
    5128:	74 e0       	ldi	r23, 0x04	; 4
    512a:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrue(COMPRESSION_C16_CEIL_VAL_AFTER < 0xff);
  // Ensure that 'unset' compressed value expands to 'unset' uncompressed value.
  AssertIsTrue(STATS_UNSET_INT == expandTempC16(STATS_UNSET_BYTE));
    512e:	8f ef       	ldi	r24, 0xFF	; 255
    5130:	0e 94 1c 06 	call	0xc38	; 0xc38 <expandTempC16(unsigned char)>
    5134:	8f 5f       	subi	r24, 0xFF	; 255
    5136:	9f 47       	sbci	r25, 0x7F	; 127
    5138:	31 f0       	breq	.+12     	; 0x5146 <testTempCompand()+0xac>
    513a:	80 e0       	ldi	r24, 0x00	; 0
    513c:	90 e0       	ldi	r25, 0x00	; 0
    513e:	64 e8       	ldi	r22, 0x84	; 132
    5140:	74 e0       	ldi	r23, 0x04	; 4
    5142:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  }
    5146:	df 91       	pop	r29
    5148:	cf 91       	pop	r28
    514a:	1f 91       	pop	r17
    514c:	0f 91       	pop	r16
    514e:	08 95       	ret

00005150 <testRNG8()>:
  // Covers the key cases 0 and 254 in particular.
  for(int i = 256; --i >= 0; ) { AssertIsTrue((uint8_t)i == smoothStatsValue((uint8_t)i, (uint8_t)i)); }
  }

// Test for expected behaviour of RNG8 PRNG starting from a known state.
static void testRNG8()
    5150:	ef 92       	push	r14
    5152:	ff 92       	push	r15
    5154:	0f 93       	push	r16
    5156:	1f 93       	push	r17
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testRNG8");
    5158:	8e ea       	ldi	r24, 0xAE	; 174
    515a:	92 e0       	ldi	r25, 0x02	; 2
    515c:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <serialPrintlnAndFlush(__FlashStringHelper const*)>
  // Reset to known state; API not normally exposed and only exists for unit tests.
  resetRNG8();
    5160:	0e 94 02 18 	call	0x3004	; 0x3004 <resetRNG8()>
  // Extract and check a few initial values.
  const uint8_t v1 = randRNG8();
    5164:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <randRNG8()>
    5168:	18 2f       	mov	r17, r24
  const uint8_t v2 = randRNG8();
    516a:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <randRNG8()>
    516e:	08 2f       	mov	r16, r24
  const uint8_t v3 = randRNG8();
    5170:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <randRNG8()>
    5174:	f8 2e       	mov	r15, r24
  const uint8_t v4 = randRNG8();
    5176:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <randRNG8()>
    517a:	e8 2e       	mov	r14, r24
  //DEBUG_SERIAL_PRINT(v1); DEBUG_SERIAL_PRINTLN();
  //DEBUG_SERIAL_PRINT(v2); DEBUG_SERIAL_PRINTLN();
  //DEBUG_SERIAL_PRINT(v3); DEBUG_SERIAL_PRINTLN();
  //DEBUG_SERIAL_PRINT(v4); DEBUG_SERIAL_PRINTLN();
  AssertIsTrue(1 == v1);
    517c:	11 30       	cpi	r17, 0x01	; 1
    517e:	31 f0       	breq	.+12     	; 0x518c <testRNG8()+0x3c>
    5180:	80 e0       	ldi	r24, 0x00	; 0
    5182:	90 e0       	ldi	r25, 0x00	; 0
    5184:	6d e6       	ldi	r22, 0x6D	; 109
    5186:	74 e0       	ldi	r23, 0x04	; 4
    5188:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrue(0 == v2);
    518c:	00 23       	and	r16, r16
    518e:	31 f0       	breq	.+12     	; 0x519c <testRNG8()+0x4c>
    5190:	80 e0       	ldi	r24, 0x00	; 0
    5192:	90 e0       	ldi	r25, 0x00	; 0
    5194:	6e e6       	ldi	r22, 0x6E	; 110
    5196:	74 e0       	ldi	r23, 0x04	; 4
    5198:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrue(3 == v3);
    519c:	83 e0       	ldi	r24, 0x03	; 3
    519e:	f8 16       	cp	r15, r24
    51a0:	31 f0       	breq	.+12     	; 0x51ae <testRNG8()+0x5e>
    51a2:	80 e0       	ldi	r24, 0x00	; 0
    51a4:	90 e0       	ldi	r25, 0x00	; 0
    51a6:	6f e6       	ldi	r22, 0x6F	; 111
    51a8:	74 e0       	ldi	r23, 0x04	; 4
    51aa:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrue(14 == v4);
    51ae:	8e e0       	ldi	r24, 0x0E	; 14
    51b0:	e8 16       	cp	r14, r24
    51b2:	31 f0       	breq	.+12     	; 0x51c0 <testRNG8()+0x70>
    51b4:	80 e0       	ldi	r24, 0x00	; 0
    51b6:	90 e0       	ldi	r25, 0x00	; 0
    51b8:	60 e7       	ldi	r22, 0x70	; 112
    51ba:	74 e0       	ldi	r23, 0x04	; 4
    51bc:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  }
    51c0:	1f 91       	pop	r17
    51c2:	0f 91       	pop	r16
    51c4:	ff 90       	pop	r15
    51c6:	ef 90       	pop	r14
    51c8:	08 95       	ret

000051ca <testRTCPersist()>:




// Test elements of RTC time persist/restore (without causing more EEPROM wear, if working correctly).
static void testRTCPersist()
    51ca:	ff 92       	push	r15
    51cc:	0f 93       	push	r16
    51ce:	1f 93       	push	r17
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testRTCPersist");
    51d0:	87 eb       	ldi	r24, 0xB7	; 183
    51d2:	92 e0       	ldi	r25, 0x02	; 2
    51d4:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <serialPrintlnAndFlush(__FlashStringHelper const*)>
  // Perform with interrupts shut out to avoid RTC ISR interferring.
  // This will effectively stall the RTC.
  bool minutesPersistOK;
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    51d8:	ff b6       	in	r15, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    51da:	f8 94       	cli
    {
    const uint_least16_t mb = getMinutesSinceMidnightLT();
    51dc:	0e 94 f5 19 	call	0x33ea	; 0x33ea <getMinutesSinceMidnightLT()>
    51e0:	8c 01       	movw	r16, r24
    persistRTC();
    51e2:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <persistRTC()>
    restoreRTC();
    51e6:	0e 94 0b 1a 	call	0x3416	; 0x3416 <restoreRTC()>
    const uint_least16_t ma = getMinutesSinceMidnightLT();
    51ea:	0e 94 f5 19 	call	0x33ea	; 0x33ea <getMinutesSinceMidnightLT()>
    51ee:	fc 01       	movw	r30, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    51f0:	ff be       	out	0x3f, r15	; 63
    // Check that persist/restore did not change live minutes value at least, within the 15-minute quantum used.
    minutesPersistOK = (mb/15 == ma/15);
    }
    AssertIsTrue(minutesPersistOK);
    51f2:	c8 01       	movw	r24, r16
    51f4:	6f e0       	ldi	r22, 0x0F	; 15
    51f6:	70 e0       	ldi	r23, 0x00	; 0
    51f8:	0e 94 f9 3b 	call	0x77f2	; 0x77f2 <__udivmodhi4>
    51fc:	9b 01       	movw	r18, r22
    51fe:	cf 01       	movw	r24, r30
    5200:	6f e0       	ldi	r22, 0x0F	; 15
    5202:	70 e0       	ldi	r23, 0x00	; 0
    5204:	0e 94 f9 3b 	call	0x77f2	; 0x77f2 <__udivmodhi4>
    5208:	26 17       	cp	r18, r22
    520a:	37 07       	cpc	r19, r23
    520c:	31 f0       	breq	.+12     	; 0x521a <testRTCPersist()+0x50>
    520e:	80 e0       	ldi	r24, 0x00	; 0
    5210:	90 e0       	ldi	r25, 0x00	; 0
    5212:	67 ed       	ldi	r22, 0xD7	; 215
    5214:	73 e0       	ldi	r23, 0x03	; 3
    5216:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  }
    521a:	1f 91       	pop	r17
    521c:	0f 91       	pop	r16
    521e:	ff 90       	pop	r15
    5220:	08 95       	ret

00005222 <testQuartiles()>:
  AssertIsTrue(!inWarmMode());
  AssertIsTrue(!inBakeMode());
  }

// Test basic behaviour of stats quartile routines.
static void testQuartiles()
    5222:	df 92       	push	r13
    5224:	ef 92       	push	r14
    5226:	ff 92       	push	r15
    5228:	0f 93       	push	r16
    522a:	1f 93       	push	r17
    522c:	cf 93       	push	r28
    522e:	df 93       	push	r29
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testQuartiles");
    5230:	81 ed       	ldi	r24, 0xD1	; 209
    5232:	92 e0       	ldi	r25, 0x02	; 2
    5234:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <serialPrintlnAndFlush(__FlashStringHelper const*)>
    5238:	ee 24       	eor	r14, r14
    523a:	34 c0       	rjmp	.+104    	; 0x52a4 <testQuartiles()+0x82>
  for(uint8_t i = 0; i < EE_STATS_SETS; ++i)
    {
    int bQ = 0, tQ = 0;
    for(uint8_t j = 0; j < 24; ++j)
      {
      const bool inTopQ = inOutlierQuartile(true, i, j);
    523c:	81 e0       	ldi	r24, 0x01	; 1
    523e:	6e 2d       	mov	r22, r14
    5240:	4f 2d       	mov	r20, r15
    5242:	0e 94 ff 06 	call	0xdfe	; 0xdfe <inOutlierQuartile(unsigned char, unsigned char, unsigned char)>
    5246:	d8 2e       	mov	r13, r24
      if(inTopQ) { ++tQ; }
    5248:	88 23       	and	r24, r24
    524a:	11 f0       	breq	.+4      	; 0x5250 <testQuartiles()+0x2e>
    524c:	0f 5f       	subi	r16, 0xFF	; 255
    524e:	1f 4f       	sbci	r17, 0xFF	; 255
      const bool inBotQ = inOutlierQuartile(false, i, j);
    5250:	80 e0       	ldi	r24, 0x00	; 0
    5252:	6e 2d       	mov	r22, r14
    5254:	4f 2d       	mov	r20, r15
    5256:	0e 94 ff 06 	call	0xdfe	; 0xdfe <inOutlierQuartile(unsigned char, unsigned char, unsigned char)>
      if(inBotQ) { ++bQ; }
    525a:	81 11       	cpse	r24, r1
    525c:	21 96       	adiw	r28, 0x01	; 1
      AssertIsTrue(!inTopQ || !inBotQ);
    525e:	dd 20       	and	r13, r13
    5260:	41 f0       	breq	.+16     	; 0x5272 <testQuartiles()+0x50>
    5262:	88 23       	and	r24, r24
    5264:	31 f0       	breq	.+12     	; 0x5272 <testQuartiles()+0x50>
    5266:	80 e0       	ldi	r24, 0x00	; 0
    5268:	90 e0       	ldi	r25, 0x00	; 0
    526a:	66 ea       	ldi	r22, 0xA6	; 166
    526c:	71 e0       	ldi	r23, 0x01	; 1
    526e:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  // Make sure that nothing can be seen as top and bottom quartile at same time.
  // Make sure that there cannot be too many items reported in each quartile
  for(uint8_t i = 0; i < EE_STATS_SETS; ++i)
    {
    int bQ = 0, tQ = 0;
    for(uint8_t j = 0; j < 24; ++j)
    5272:	f3 94       	inc	r15
    5274:	88 e1       	ldi	r24, 0x18	; 24
    5276:	f8 16       	cp	r15, r24
    5278:	09 f7       	brne	.-62     	; 0x523c <testQuartiles()+0x1a>
      if(inTopQ) { ++tQ; }
      const bool inBotQ = inOutlierQuartile(false, i, j);
      if(inBotQ) { ++bQ; }
      AssertIsTrue(!inTopQ || !inBotQ);
      }
    AssertIsTrue(bQ <= 6);
    527a:	27 97       	sbiw	r28, 0x07	; 7
    527c:	34 f0       	brlt	.+12     	; 0x528a <testQuartiles()+0x68>
    527e:	80 e0       	ldi	r24, 0x00	; 0
    5280:	90 e0       	ldi	r25, 0x00	; 0
    5282:	68 ea       	ldi	r22, 0xA8	; 168
    5284:	71 e0       	ldi	r23, 0x01	; 1
    5286:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
    AssertIsTrue(tQ <= 6);
    528a:	07 30       	cpi	r16, 0x07	; 7
    528c:	11 05       	cpc	r17, r1
    528e:	34 f0       	brlt	.+12     	; 0x529c <testQuartiles()+0x7a>
    5290:	80 e0       	ldi	r24, 0x00	; 0
    5292:	90 e0       	ldi	r25, 0x00	; 0
    5294:	69 ea       	ldi	r22, 0xA9	; 169
    5296:	71 e0       	ldi	r23, 0x01	; 1
    5298:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testQuartiles");
  // For whatever happens to be in EEPROM at the moment, test for sanity for all stats sets.
  // This does not write to EEPROM, so will not wear it out.
  // Make sure that nothing can be seen as top and bottom quartile at same time.
  // Make sure that there cannot be too many items reported in each quartile
  for(uint8_t i = 0; i < EE_STATS_SETS; ++i)
    529c:	e3 94       	inc	r14
    529e:	8a e0       	ldi	r24, 0x0A	; 10
    52a0:	e8 16       	cp	r14, r24
    52a2:	31 f0       	breq	.+12     	; 0x52b0 <testQuartiles()+0x8e>
    52a4:	c0 e0       	ldi	r28, 0x00	; 0
    52a6:	d0 e0       	ldi	r29, 0x00	; 0
    52a8:	00 e0       	ldi	r16, 0x00	; 0
    52aa:	10 e0       	ldi	r17, 0x00	; 0
    52ac:	ff 24       	eor	r15, r15
    52ae:	c6 cf       	rjmp	.-116    	; 0x523c <testQuartiles()+0x1a>
      AssertIsTrue(!inTopQ || !inBotQ);
      }
    AssertIsTrue(bQ <= 6);
    AssertIsTrue(tQ <= 6);
    }
  }
    52b0:	df 91       	pop	r29
    52b2:	cf 91       	pop	r28
    52b4:	1f 91       	pop	r17
    52b6:	0f 91       	pop	r16
    52b8:	ff 90       	pop	r15
    52ba:	ef 90       	pop	r14
    52bc:	df 90       	pop	r13
    52be:	08 95       	ret

000052c0 <testSmoothStatsValue()>:

// Test that the simple smoothing function never generates an out of range value.
// In particular, with a legitimate value range of [0,254]
// smoothStatsValue() must never generate 255 (0xff) which looks like an uninitialised EEPROM value,
// nor wrap around in either direction.
static void testSmoothStatsValue()
    52c0:	1f 93       	push	r17
    52c2:	cf 93       	push	r28
    52c4:	df 93       	push	r29
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testSmoothStatsValue");
    52c6:	8f ed       	ldi	r24, 0xDF	; 223
    52c8:	92 e0       	ldi	r25, 0x02	; 2
    52ca:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <serialPrintlnAndFlush(__FlashStringHelper const*)>
    52ce:	c0 e0       	ldi	r28, 0x00	; 0
    52d0:	d1 e0       	ldi	r29, 0x01	; 1
    52d2:	0c c0       	rjmp	.+24     	; 0x52ec <testSmoothStatsValue()+0x2c>
  // Covers the key cases 0 and 254 in particular.
  for(int i = 256; --i >= 0; ) { AssertIsTrue((uint8_t)i == smoothStatsValue((uint8_t)i, (uint8_t)i)); }
    52d4:	8c 2f       	mov	r24, r28
    52d6:	6c 2f       	mov	r22, r28
    52d8:	0e 94 b2 06 	call	0xd64	; 0xd64 <smoothStatsValue(unsigned char, unsigned char)>
    52dc:	c8 17       	cp	r28, r24
    52de:	31 f0       	breq	.+12     	; 0x52ec <testSmoothStatsValue()+0x2c>
    52e0:	80 e0       	ldi	r24, 0x00	; 0
    52e2:	90 e0       	ldi	r25, 0x00	; 0
    52e4:	6b e5       	ldi	r22, 0x5B	; 91
    52e6:	74 e0       	ldi	r23, 0x04	; 4
    52e8:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
    52ec:	21 97       	sbiw	r28, 0x01	; 1
    52ee:	8f ef       	ldi	r24, 0xFF	; 255
    52f0:	cf 3f       	cpi	r28, 0xFF	; 255
    52f2:	d8 07       	cpc	r29, r24
    52f4:	79 f7       	brne	.-34     	; 0x52d4 <testSmoothStatsValue()+0x14>
  }
    52f6:	df 91       	pop	r29
    52f8:	cf 91       	pop	r28
    52fa:	1f 91       	pop	r17
    52fc:	08 95       	ret

000052fe <testFHTEncoding()>:
  const uint8_t crc2 = crc7_5B_update(0x50, 40); // Minimal stats payload with low power and 20C temperature.
  AssertIsTrueWithErr((0x7b == crc2), crc2); 
  }

// Test of FHT8V bitstream encoding and decoding.
static void testFHTEncoding()
    52fe:	ef 92       	push	r14
    5300:	ff 92       	push	r15
    5302:	0f 93       	push	r16
    5304:	1f 93       	push	r17
    5306:	df 93       	push	r29
    5308:	cf 93       	push	r28
    530a:	cd b7       	in	r28, 0x3d	; 61
    530c:	de b7       	in	r29, 0x3e	; 62
    530e:	c4 54       	subi	r28, 0x44	; 68
    5310:	d0 40       	sbci	r29, 0x00	; 0
    5312:	0f b6       	in	r0, 0x3f	; 63
    5314:	f8 94       	cli
    5316:	de bf       	out	0x3e, r29	; 62
    5318:	0f be       	out	0x3f, r0	; 63
    531a:	cd bf       	out	0x3d, r28	; 61
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testFHTEncoding");
    531c:	84 ef       	ldi	r24, 0xF4	; 244
    531e:	92 e0       	ldi	r25, 0x02	; 2
    5320:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <serialPrintlnAndFlush(__FlashStringHelper const*)>
  uint8_t buf[FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE];
  fht8v_msg_t command; // For encoding.
  fht8v_msg_t commandDecoded; // For decoding.

  // Encode an example message for a real house code and command (close valve).
  command.hc1 = 13;
    5324:	8d e0       	ldi	r24, 0x0D	; 13
    5326:	89 83       	std	Y+1, r24	; 0x01
  command.hc2 = 73;
    5328:	89 e4       	ldi	r24, 0x49	; 73
    532a:	8a 83       	std	Y+2, r24	; 0x02
#ifdef FHT8V_ADR_USED
  address = 0;
#endif
  command.command = 0x26;
    532c:	86 e2       	ldi	r24, 0x26	; 38
    532e:	8b 83       	std	Y+3, r24	; 0x03
  command.extension = 0;
    5330:	1c 82       	std	Y+4, r1	; 0x04
  memset(buf, 0xff, sizeof(buf));
    5332:	8e 01       	movw	r16, r28
    5334:	07 5f       	subi	r16, 0xF7	; 247
    5336:	1f 4f       	sbci	r17, 0xFF	; 255
    5338:	c8 01       	movw	r24, r16
    533a:	6f ef       	ldi	r22, 0xFF	; 255
    533c:	70 e0       	ldi	r23, 0x00	; 0
    533e:	4c e3       	ldi	r20, 0x3C	; 60
    5340:	50 e0       	ldi	r21, 0x00	; 0
    5342:	0e 94 b2 02 	call	0x564	; 0x564 <memset>
  uint8_t *result1 = FHT8VCreate200usBitStreamBptr(buf, &command);
    5346:	c8 01       	movw	r24, r16
    5348:	be 01       	movw	r22, r28
    534a:	6f 5f       	subi	r22, 0xFF	; 255
    534c:	7f 4f       	sbci	r23, 0xFF	; 255
    534e:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>
    5352:	8c 01       	movw	r16, r24
  AssertIsTrueWithErr(((uint8_t)~0U) == *result1, *result1); // Check that result points at terminator value 0xff/~0.
    5354:	fc 01       	movw	r30, r24
    5356:	80 81       	ld	r24, Z
    5358:	8f 3f       	cpi	r24, 0xFF	; 255
    535a:	29 f0       	breq	.+10     	; 0x5366 <testFHTEncoding()+0x68>
    535c:	90 e0       	ldi	r25, 0x00	; 0
    535e:	67 e6       	ldi	r22, 0x67	; 103
    5360:	72 e0       	ldi	r23, 0x02	; 2
    5362:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  //AssertIsTrue((result1 - buf < MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE), result1-buf); // Check not overflowing the buffer.
  AssertIsTrueWithErr((result1 - buf == 38), result1-buf); // Check correct length.
    5366:	e9 e0       	ldi	r30, 0x09	; 9
    5368:	ee 2e       	mov	r14, r30
    536a:	f1 2c       	mov	r15, r1
    536c:	ec 0e       	add	r14, r28
    536e:	fd 1e       	adc	r15, r29
    5370:	c8 01       	movw	r24, r16
    5372:	8e 19       	sub	r24, r14
    5374:	9f 09       	sbc	r25, r15
    5376:	86 32       	cpi	r24, 0x26	; 38
    5378:	91 05       	cpc	r25, r1
    537a:	21 f0       	breq	.+8      	; 0x5384 <testFHTEncoding()+0x86>
    537c:	69 e6       	ldi	r22, 0x69	; 105
    537e:	72 e0       	ldi	r23, 0x02	; 2
    5380:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(((uint8_t)0xcc) == buf[0], buf[0]); // Check that result starts with FHT8V 0xcc preamble.
    5384:	89 85       	ldd	r24, Y+9	; 0x09
    5386:	8c 3c       	cpi	r24, 0xCC	; 204
    5388:	29 f0       	breq	.+10     	; 0x5394 <testFHTEncoding()+0x96>
    538a:	90 e0       	ldi	r25, 0x00	; 0
    538c:	6a e6       	ldi	r22, 0x6A	; 106
    538e:	72 e0       	ldi	r23, 0x02	; 2
    5390:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(((uint8_t)0xe3) == buf[6], buf[6]); // Check end of preamble.
    5394:	8f 85       	ldd	r24, Y+15	; 0x0f
    5396:	83 3e       	cpi	r24, 0xE3	; 227
    5398:	29 f0       	breq	.+10     	; 0x53a4 <testFHTEncoding()+0xa6>
    539a:	90 e0       	ldi	r25, 0x00	; 0
    539c:	6b e6       	ldi	r22, 0x6B	; 107
    539e:	72 e0       	ldi	r23, 0x02	; 2
    53a0:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(((uint8_t)0xce) == buf[34], buf[34]); // Check part of checksum.
    53a4:	8b a5       	ldd	r24, Y+43	; 0x2b
    53a6:	8e 3c       	cpi	r24, 0xCE	; 206
    53a8:	29 f0       	breq	.+10     	; 0x53b4 <testFHTEncoding()+0xb6>
    53aa:	90 e0       	ldi	r25, 0x00	; 0
    53ac:	6c e6       	ldi	r22, 0x6C	; 108
    53ae:	72 e0       	ldi	r23, 0x02	; 2
    53b0:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  // Attempt to decode.
  AssertIsTrue(FHT8VDecodeBitStream(buf, buf + MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE - 1, &commandDecoded));
    53b4:	ce 01       	movw	r24, r28
    53b6:	09 96       	adiw	r24, 0x09	; 9
    53b8:	be 01       	movw	r22, r28
    53ba:	6a 5c       	subi	r22, 0xCA	; 202
    53bc:	7f 4f       	sbci	r23, 0xFF	; 255
    53be:	ae 01       	movw	r20, r28
    53c0:	4b 5f       	subi	r20, 0xFB	; 251
    53c2:	5f 4f       	sbci	r21, 0xFF	; 255
    53c4:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)>
    53c8:	89 2b       	or	r24, r25
    53ca:	31 f4       	brne	.+12     	; 0x53d8 <testFHTEncoding()+0xda>
    53cc:	80 e0       	ldi	r24, 0x00	; 0
    53ce:	90 e0       	ldi	r25, 0x00	; 0
    53d0:	6e e6       	ldi	r22, 0x6E	; 110
    53d2:	72 e0       	ldi	r23, 0x02	; 2
    53d4:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(13 == commandDecoded.hc1, commandDecoded.hc1);
    53d8:	8d 81       	ldd	r24, Y+5	; 0x05
    53da:	8d 30       	cpi	r24, 0x0D	; 13
    53dc:	29 f0       	breq	.+10     	; 0x53e8 <testFHTEncoding()+0xea>
    53de:	90 e0       	ldi	r25, 0x00	; 0
    53e0:	6f e6       	ldi	r22, 0x6F	; 111
    53e2:	72 e0       	ldi	r23, 0x02	; 2
    53e4:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(73 == commandDecoded.hc2, commandDecoded.hc2);
    53e8:	8e 81       	ldd	r24, Y+6	; 0x06
    53ea:	89 34       	cpi	r24, 0x49	; 73
    53ec:	29 f0       	breq	.+10     	; 0x53f8 <testFHTEncoding()+0xfa>
    53ee:	90 e0       	ldi	r25, 0x00	; 0
    53f0:	60 e7       	ldi	r22, 0x70	; 112
    53f2:	72 e0       	ldi	r23, 0x02	; 2
    53f4:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(0x26 == commandDecoded.command, commandDecoded.command);
    53f8:	8f 81       	ldd	r24, Y+7	; 0x07
    53fa:	86 32       	cpi	r24, 0x26	; 38
    53fc:	29 f0       	breq	.+10     	; 0x5408 <testFHTEncoding()+0x10a>
    53fe:	90 e0       	ldi	r25, 0x00	; 0
    5400:	61 e7       	ldi	r22, 0x71	; 113
    5402:	72 e0       	ldi	r23, 0x02	; 2
    5404:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(0 == commandDecoded.extension, commandDecoded.extension);
    5408:	88 85       	ldd	r24, Y+8	; 0x08
    540a:	88 23       	and	r24, r24
    540c:	29 f0       	breq	.+10     	; 0x5418 <testFHTEncoding()+0x11a>
    540e:	90 e0       	ldi	r25, 0x00	; 0
    5410:	62 e7       	ldi	r22, 0x72	; 114
    5412:	72 e0       	ldi	r23, 0x02	; 2
    5414:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>

  // Encode shortest-possible (all-zero-bits) FHT8V command as 200us-bit-stream...
  command.hc1 = 0;
    5418:	19 82       	std	Y+1, r1	; 0x01
  command.hc2 = 0;
    541a:	1a 82       	std	Y+2, r1	; 0x02
#ifdef FHT8V_ADR_USED
  address = 0;
#endif
  command.command = 0;
    541c:	1b 82       	std	Y+3, r1	; 0x03
  command.extension = 0;
    541e:	1c 82       	std	Y+4, r1	; 0x04
  memset(buf, 0xff, sizeof(buf));
    5420:	8e 01       	movw	r16, r28
    5422:	07 5f       	subi	r16, 0xF7	; 247
    5424:	1f 4f       	sbci	r17, 0xFF	; 255
    5426:	c8 01       	movw	r24, r16
    5428:	6f ef       	ldi	r22, 0xFF	; 255
    542a:	70 e0       	ldi	r23, 0x00	; 0
    542c:	4c e3       	ldi	r20, 0x3C	; 60
    542e:	50 e0       	ldi	r21, 0x00	; 0
    5430:	0e 94 b2 02 	call	0x564	; 0x564 <memset>
  result1 = FHT8VCreate200usBitStreamBptr(buf, &command);
    5434:	c8 01       	movw	r24, r16
    5436:	be 01       	movw	r22, r28
    5438:	6f 5f       	subi	r22, 0xFF	; 255
    543a:	7f 4f       	sbci	r23, 0xFF	; 255
    543c:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>
    5440:	8c 01       	movw	r16, r24
  AssertIsTrueWithErr(((uint8_t)~0U) == *result1, *result1); // Check that result points at terminator value 0xff/~0.
    5442:	fc 01       	movw	r30, r24
    5444:	80 81       	ld	r24, Z
    5446:	8f 3f       	cpi	r24, 0xFF	; 255
    5448:	29 f0       	breq	.+10     	; 0x5454 <testFHTEncoding()+0x156>
    544a:	90 e0       	ldi	r25, 0x00	; 0
    544c:	6e e7       	ldi	r22, 0x7E	; 126
    544e:	72 e0       	ldi	r23, 0x02	; 2
    5450:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  //AssertIsTrue((result1 - buf < MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE), result1-buf); // Check not overflowing the buffer.
  AssertIsTrueWithErr((result1 - buf == 35), result1-buf); // Check correct length.
    5454:	c8 01       	movw	r24, r16
    5456:	8e 19       	sub	r24, r14
    5458:	9f 09       	sbc	r25, r15
    545a:	83 32       	cpi	r24, 0x23	; 35
    545c:	91 05       	cpc	r25, r1
    545e:	21 f0       	breq	.+8      	; 0x5468 <testFHTEncoding()+0x16a>
    5460:	60 e8       	ldi	r22, 0x80	; 128
    5462:	72 e0       	ldi	r23, 0x02	; 2
    5464:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(((uint8_t)0xcc) == buf[0], buf[0]); // Check that result starts with FHT8V 0xcc preamble.
    5468:	89 85       	ldd	r24, Y+9	; 0x09
    546a:	8c 3c       	cpi	r24, 0xCC	; 204
    546c:	29 f0       	breq	.+10     	; 0x5478 <testFHTEncoding()+0x17a>
    546e:	90 e0       	ldi	r25, 0x00	; 0
    5470:	61 e8       	ldi	r22, 0x81	; 129
    5472:	72 e0       	ldi	r23, 0x02	; 2
    5474:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  // Attempt to decode.
  AssertIsTrue(FHT8VDecodeBitStream(buf, buf + MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE - 1, &commandDecoded));
    5478:	ce 01       	movw	r24, r28
    547a:	09 96       	adiw	r24, 0x09	; 9
    547c:	be 01       	movw	r22, r28
    547e:	6a 5c       	subi	r22, 0xCA	; 202
    5480:	7f 4f       	sbci	r23, 0xFF	; 255
    5482:	ae 01       	movw	r20, r28
    5484:	4b 5f       	subi	r20, 0xFB	; 251
    5486:	5f 4f       	sbci	r21, 0xFF	; 255
    5488:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)>
    548c:	89 2b       	or	r24, r25
    548e:	31 f4       	brne	.+12     	; 0x549c <testFHTEncoding()+0x19e>
    5490:	80 e0       	ldi	r24, 0x00	; 0
    5492:	90 e0       	ldi	r25, 0x00	; 0
    5494:	63 e8       	ldi	r22, 0x83	; 131
    5496:	72 e0       	ldi	r23, 0x02	; 2
    5498:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(0 == commandDecoded.hc1, commandDecoded.hc1);
    549c:	8d 81       	ldd	r24, Y+5	; 0x05
    549e:	88 23       	and	r24, r24
    54a0:	29 f0       	breq	.+10     	; 0x54ac <testFHTEncoding()+0x1ae>
    54a2:	90 e0       	ldi	r25, 0x00	; 0
    54a4:	64 e8       	ldi	r22, 0x84	; 132
    54a6:	72 e0       	ldi	r23, 0x02	; 2
    54a8:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(0 == commandDecoded.hc2, commandDecoded.hc2);
    54ac:	8e 81       	ldd	r24, Y+6	; 0x06
    54ae:	88 23       	and	r24, r24
    54b0:	29 f0       	breq	.+10     	; 0x54bc <testFHTEncoding()+0x1be>
    54b2:	90 e0       	ldi	r25, 0x00	; 0
    54b4:	65 e8       	ldi	r22, 0x85	; 133
    54b6:	72 e0       	ldi	r23, 0x02	; 2
    54b8:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(0 == commandDecoded.command, commandDecoded.command);
    54bc:	8f 81       	ldd	r24, Y+7	; 0x07
    54be:	88 23       	and	r24, r24
    54c0:	29 f0       	breq	.+10     	; 0x54cc <testFHTEncoding()+0x1ce>
    54c2:	90 e0       	ldi	r25, 0x00	; 0
    54c4:	66 e8       	ldi	r22, 0x86	; 134
    54c6:	72 e0       	ldi	r23, 0x02	; 2
    54c8:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(0 == commandDecoded.extension, commandDecoded.extension);
    54cc:	88 85       	ldd	r24, Y+8	; 0x08
    54ce:	88 23       	and	r24, r24
    54d0:	29 f0       	breq	.+10     	; 0x54dc <testFHTEncoding()+0x1de>
    54d2:	90 e0       	ldi	r25, 0x00	; 0
    54d4:	67 e8       	ldi	r22, 0x87	; 135
    54d6:	72 e0       	ldi	r23, 0x02	; 2
    54d8:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>

  // Encode longest-possible (as many 1-bits as possible) FHT8V command as 200us-bit-stream...
  command.hc1 = 0xff;
    54dc:	8f ef       	ldi	r24, 0xFF	; 255
    54de:	89 83       	std	Y+1, r24	; 0x01
  command.hc2 = 0xff;
    54e0:	8a 83       	std	Y+2, r24	; 0x02
#ifdef FHT8V_ADR_USED
  address = 0xff;
#endif
  command.command = 0xff;
    54e2:	8b 83       	std	Y+3, r24	; 0x03
  command.extension = 0xff;
    54e4:	8c 83       	std	Y+4, r24	; 0x04
  memset(buf, 0xff, sizeof(buf));
    54e6:	8e 01       	movw	r16, r28
    54e8:	07 5f       	subi	r16, 0xF7	; 247
    54ea:	1f 4f       	sbci	r17, 0xFF	; 255
    54ec:	c8 01       	movw	r24, r16
    54ee:	6f ef       	ldi	r22, 0xFF	; 255
    54f0:	70 e0       	ldi	r23, 0x00	; 0
    54f2:	4c e3       	ldi	r20, 0x3C	; 60
    54f4:	50 e0       	ldi	r21, 0x00	; 0
    54f6:	0e 94 b2 02 	call	0x564	; 0x564 <memset>
  result1 = FHT8VCreate200usBitStreamBptr(buf, &command);
    54fa:	c8 01       	movw	r24, r16
    54fc:	be 01       	movw	r22, r28
    54fe:	6f 5f       	subi	r22, 0xFF	; 255
    5500:	7f 4f       	sbci	r23, 0xFF	; 255
    5502:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>
    5506:	8c 01       	movw	r16, r24
  AssertIsTrueWithErr(((uint8_t)~0U) == *result1, *result1); // Check that result points at terminator value 0xff/~0.
    5508:	fc 01       	movw	r30, r24
    550a:	80 81       	ld	r24, Z
    550c:	8f 3f       	cpi	r24, 0xFF	; 255
    550e:	29 f0       	breq	.+10     	; 0x551a <testFHTEncoding()+0x21c>
    5510:	90 e0       	ldi	r25, 0x00	; 0
    5512:	63 e9       	ldi	r22, 0x93	; 147
    5514:	72 e0       	ldi	r23, 0x02	; 2
    5516:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr((result1 - buf < MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE), result1-buf); // Check not overflowing the buffer.
    551a:	c8 01       	movw	r24, r16
    551c:	8e 19       	sub	r24, r14
    551e:	9f 09       	sbc	r25, r15
    5520:	8e 32       	cpi	r24, 0x2E	; 46
    5522:	91 05       	cpc	r25, r1
    5524:	24 f0       	brlt	.+8      	; 0x552e <testFHTEncoding()+0x230>
    5526:	64 e9       	ldi	r22, 0x94	; 148
    5528:	72 e0       	ldi	r23, 0x02	; 2
    552a:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(((uint8_t)0xcc) == buf[0], buf[0]); // Check that result starts with FHT8V 0xcc preamble.
    552e:	89 85       	ldd	r24, Y+9	; 0x09
    5530:	8c 3c       	cpi	r24, 0xCC	; 204
    5532:	29 f0       	breq	.+10     	; 0x553e <testFHTEncoding()+0x240>
    5534:	90 e0       	ldi	r25, 0x00	; 0
    5536:	65 e9       	ldi	r22, 0x95	; 149
    5538:	72 e0       	ldi	r23, 0x02	; 2
    553a:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  // Attempt to decode.
  AssertIsTrue(FHT8VDecodeBitStream(buf, buf + MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE - 1, &commandDecoded));
    553e:	ce 01       	movw	r24, r28
    5540:	09 96       	adiw	r24, 0x09	; 9
    5542:	be 01       	movw	r22, r28
    5544:	6a 5c       	subi	r22, 0xCA	; 202
    5546:	7f 4f       	sbci	r23, 0xFF	; 255
    5548:	ae 01       	movw	r20, r28
    554a:	4b 5f       	subi	r20, 0xFB	; 251
    554c:	5f 4f       	sbci	r21, 0xFF	; 255
    554e:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)>
    5552:	89 2b       	or	r24, r25
    5554:	31 f4       	brne	.+12     	; 0x5562 <testFHTEncoding()+0x264>
    5556:	80 e0       	ldi	r24, 0x00	; 0
    5558:	90 e0       	ldi	r25, 0x00	; 0
    555a:	67 e9       	ldi	r22, 0x97	; 151
    555c:	72 e0       	ldi	r23, 0x02	; 2
    555e:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(0xff == commandDecoded.hc1, commandDecoded.hc1);
    5562:	8d 81       	ldd	r24, Y+5	; 0x05
    5564:	8f 3f       	cpi	r24, 0xFF	; 255
    5566:	29 f0       	breq	.+10     	; 0x5572 <testFHTEncoding()+0x274>
    5568:	90 e0       	ldi	r25, 0x00	; 0
    556a:	68 e9       	ldi	r22, 0x98	; 152
    556c:	72 e0       	ldi	r23, 0x02	; 2
    556e:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(0xff == commandDecoded.hc2, commandDecoded.hc2);
    5572:	8e 81       	ldd	r24, Y+6	; 0x06
    5574:	8f 3f       	cpi	r24, 0xFF	; 255
    5576:	29 f0       	breq	.+10     	; 0x5582 <testFHTEncoding()+0x284>
    5578:	90 e0       	ldi	r25, 0x00	; 0
    557a:	69 e9       	ldi	r22, 0x99	; 153
    557c:	72 e0       	ldi	r23, 0x02	; 2
    557e:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
#ifdef FHT8V_ADR_USED
  AssertIsTrueWithErr(0xff == commandDecoded.address, commandDecoded.address);
#endif
  AssertIsTrueWithErr(0xff == commandDecoded.command, commandDecoded.command);
    5582:	8f 81       	ldd	r24, Y+7	; 0x07
    5584:	8f 3f       	cpi	r24, 0xFF	; 255
    5586:	29 f0       	breq	.+10     	; 0x5592 <testFHTEncoding()+0x294>
    5588:	90 e0       	ldi	r25, 0x00	; 0
    558a:	6d e9       	ldi	r22, 0x9D	; 157
    558c:	72 e0       	ldi	r23, 0x02	; 2
    558e:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(0xff == commandDecoded.extension, commandDecoded.extension);
    5592:	88 85       	ldd	r24, Y+8	; 0x08
    5594:	8f 3f       	cpi	r24, 0xFF	; 255
    5596:	29 f0       	breq	.+10     	; 0x55a2 <testFHTEncoding()+0x2a4>
    5598:	90 e0       	ldi	r25, 0x00	; 0
    559a:	6e e9       	ldi	r22, 0x9E	; 158
    559c:	72 e0       	ldi	r23, 0x02	; 2
    559e:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  }
    55a2:	cc 5b       	subi	r28, 0xBC	; 188
    55a4:	df 4f       	sbci	r29, 0xFF	; 255
    55a6:	0f b6       	in	r0, 0x3f	; 63
    55a8:	f8 94       	cli
    55aa:	de bf       	out	0x3e, r29	; 62
    55ac:	0f be       	out	0x3f, r0	; 63
    55ae:	cd bf       	out	0x3d, r28	; 61
    55b0:	cf 91       	pop	r28
    55b2:	df 91       	pop	r29
    55b4:	1f 91       	pop	r17
    55b6:	0f 91       	pop	r16
    55b8:	ff 90       	pop	r15
    55ba:	ef 90       	pop	r14
    55bc:	08 95       	ret

000055be <testFHTEncodingHeadAndTail()>:

// Test of heat and tail of FHT8V bitstream encoding and decoding.
static void testFHTEncodingHeadAndTail()
    55be:	7f 92       	push	r7
    55c0:	8f 92       	push	r8
    55c2:	9f 92       	push	r9
    55c4:	af 92       	push	r10
    55c6:	bf 92       	push	r11
    55c8:	cf 92       	push	r12
    55ca:	df 92       	push	r13
    55cc:	ef 92       	push	r14
    55ce:	ff 92       	push	r15
    55d0:	0f 93       	push	r16
    55d2:	1f 93       	push	r17
    55d4:	df 93       	push	r29
    55d6:	cf 93       	push	r28
    55d8:	cd b7       	in	r28, 0x3d	; 61
    55da:	de b7       	in	r29, 0x3e	; 62
    55dc:	c2 55       	subi	r28, 0x52	; 82
    55de:	d0 40       	sbci	r29, 0x00	; 0
    55e0:	0f b6       	in	r0, 0x3f	; 63
    55e2:	f8 94       	cli
    55e4:	de bf       	out	0x3e, r29	; 62
    55e6:	0f be       	out	0x3f, r0	; 63
    55e8:	cd bf       	out	0x3d, r28	; 61
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testFHTEncodingHeadAndTail");
    55ea:	84 e0       	ldi	r24, 0x04	; 4
    55ec:	93 e0       	ldi	r25, 0x03	; 3
    55ee:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <serialPrintlnAndFlush(__FlashStringHelper const*)>
  uint8_t buf[FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE];
  fht8v_msg_t command; // For encoding.
  fht8v_msg_t commandDecoded; // For decoding.

  // Encode a basic message to set a valve to 0%, without headers or trailers.
  command.hc1 = 13;
    55f2:	8d e0       	ldi	r24, 0x0D	; 13
    55f4:	89 83       	std	Y+1, r24	; 0x01
  command.hc2 = 73;
    55f6:	89 e4       	ldi	r24, 0x49	; 73
    55f8:	8a 83       	std	Y+2, r24	; 0x02
#ifdef FHT8V_ADR_USED
  address = 0;
#endif
  memset(buf, 0xff, sizeof(buf));
    55fa:	8e 01       	movw	r16, r28
    55fc:	09 5e       	subi	r16, 0xE9	; 233
    55fe:	1f 4f       	sbci	r17, 0xFF	; 255
    5600:	c8 01       	movw	r24, r16
    5602:	6f ef       	ldi	r22, 0xFF	; 255
    5604:	70 e0       	ldi	r23, 0x00	; 0
    5606:	4c e3       	ldi	r20, 0x3C	; 60
    5608:	50 e0       	ldi	r21, 0x00	; 0
    560a:	0e 94 b2 02 	call	0x564	; 0x564 <memset>
  uint8_t *result1 = FHT8VCreateValveSetCmdFrameHT_r(buf, false, &command, 0, NULL);
    560e:	c8 01       	movw	r24, r16
    5610:	60 e0       	ldi	r22, 0x00	; 0
    5612:	ae 01       	movw	r20, r28
    5614:	4f 5f       	subi	r20, 0xFF	; 255
    5616:	5f 4f       	sbci	r21, 0xFF	; 255
    5618:	20 e0       	ldi	r18, 0x00	; 0
    561a:	00 e0       	ldi	r16, 0x00	; 0
    561c:	10 e0       	ldi	r17, 0x00	; 0
    561e:	0e 94 3b 0c 	call	0x1876	; 0x1876 <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)>
    5622:	8c 01       	movw	r16, r24
  AssertIsTrueWithErr(((uint8_t)~0U) == *result1, *result1); // Check that result points at terminator value 0xff/~0.
    5624:	fc 01       	movw	r30, r24
    5626:	80 81       	ld	r24, Z
    5628:	8f 3f       	cpi	r24, 0xFF	; 255
    562a:	29 f0       	breq	.+10     	; 0x5636 <testFHTEncodingHeadAndTail()+0x78>
    562c:	90 e0       	ldi	r25, 0x00	; 0
    562e:	6c eb       	ldi	r22, 0xBC	; 188
    5630:	72 e0       	ldi	r23, 0x02	; 2
    5632:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  //AssertIsTrue((result1 - buf < MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE), result1-buf); // Check not overflowing the buffer.
  AssertIsTrueWithErr((result1 - buf == 38), result1-buf); // Check correct length: 38-byte body.
    5636:	27 e1       	ldi	r18, 0x17	; 23
    5638:	82 2e       	mov	r8, r18
    563a:	91 2c       	mov	r9, r1
    563c:	8c 0e       	add	r8, r28
    563e:	9d 1e       	adc	r9, r29
    5640:	c8 01       	movw	r24, r16
    5642:	88 19       	sub	r24, r8
    5644:	99 09       	sbc	r25, r9
    5646:	86 32       	cpi	r24, 0x26	; 38
    5648:	91 05       	cpc	r25, r1
    564a:	21 f0       	breq	.+8      	; 0x5654 <testFHTEncodingHeadAndTail()+0x96>
    564c:	6e eb       	ldi	r22, 0xBE	; 190
    564e:	72 e0       	ldi	r23, 0x02	; 2
    5650:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(((uint8_t)0xcc) == buf[0], buf[0]); // Check that result starts with FHT8V 0xcc preamble.
    5654:	8f 89       	ldd	r24, Y+23	; 0x17
    5656:	8c 3c       	cpi	r24, 0xCC	; 204
    5658:	29 f0       	breq	.+10     	; 0x5664 <testFHTEncodingHeadAndTail()+0xa6>
    565a:	90 e0       	ldi	r25, 0x00	; 0
    565c:	6f eb       	ldi	r22, 0xBF	; 191
    565e:	72 e0       	ldi	r23, 0x02	; 2
    5660:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(((uint8_t)0xe3) == buf[6], buf[6]); // Check end of preamble.
    5664:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5666:	83 3e       	cpi	r24, 0xE3	; 227
    5668:	29 f0       	breq	.+10     	; 0x5674 <testFHTEncodingHeadAndTail()+0xb6>
    566a:	90 e0       	ldi	r25, 0x00	; 0
    566c:	60 ec       	ldi	r22, 0xC0	; 192
    566e:	72 e0       	ldi	r23, 0x02	; 2
    5670:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(((uint8_t)0xce) == buf[34], buf[34]); // Check part of checksum.
    5674:	89 ad       	ldd	r24, Y+57	; 0x39
    5676:	8e 3c       	cpi	r24, 0xCE	; 206
    5678:	29 f0       	breq	.+10     	; 0x5684 <testFHTEncodingHeadAndTail()+0xc6>
    567a:	90 e0       	ldi	r25, 0x00	; 0
    567c:	61 ec       	ldi	r22, 0xC1	; 193
    567e:	72 e0       	ldi	r23, 0x02	; 2
    5680:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  // Attempt to decode.
  AssertIsTrue(FHT8VDecodeBitStream(buf, buf + MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE - 1, &commandDecoded));
    5684:	be 01       	movw	r22, r28
    5686:	69 5e       	subi	r22, 0xE9	; 233
    5688:	7f 4f       	sbci	r23, 0xFF	; 255
    568a:	cb 01       	movw	r24, r22
    568c:	63 5d       	subi	r22, 0xD3	; 211
    568e:	7f 4f       	sbci	r23, 0xFF	; 255
    5690:	ae 01       	movw	r20, r28
    5692:	4b 5f       	subi	r20, 0xFB	; 251
    5694:	5f 4f       	sbci	r21, 0xFF	; 255
    5696:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)>
    569a:	89 2b       	or	r24, r25
    569c:	31 f4       	brne	.+12     	; 0x56aa <testFHTEncodingHeadAndTail()+0xec>
    569e:	80 e0       	ldi	r24, 0x00	; 0
    56a0:	90 e0       	ldi	r25, 0x00	; 0
    56a2:	63 ec       	ldi	r22, 0xC3	; 195
    56a4:	72 e0       	ldi	r23, 0x02	; 2
    56a6:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(13 == commandDecoded.hc1, commandDecoded.hc1);
    56aa:	8d 81       	ldd	r24, Y+5	; 0x05
    56ac:	8d 30       	cpi	r24, 0x0D	; 13
    56ae:	29 f0       	breq	.+10     	; 0x56ba <testFHTEncodingHeadAndTail()+0xfc>
    56b0:	90 e0       	ldi	r25, 0x00	; 0
    56b2:	64 ec       	ldi	r22, 0xC4	; 196
    56b4:	72 e0       	ldi	r23, 0x02	; 2
    56b6:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(73 == commandDecoded.hc2, commandDecoded.hc2);
    56ba:	8e 81       	ldd	r24, Y+6	; 0x06
    56bc:	89 34       	cpi	r24, 0x49	; 73
    56be:	29 f0       	breq	.+10     	; 0x56ca <testFHTEncodingHeadAndTail()+0x10c>
    56c0:	90 e0       	ldi	r25, 0x00	; 0
    56c2:	65 ec       	ldi	r22, 0xC5	; 197
    56c4:	72 e0       	ldi	r23, 0x02	; 2
    56c6:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(0x26 == commandDecoded.command, commandDecoded.command);
    56ca:	8f 81       	ldd	r24, Y+7	; 0x07
    56cc:	86 32       	cpi	r24, 0x26	; 38
    56ce:	29 f0       	breq	.+10     	; 0x56da <testFHTEncodingHeadAndTail()+0x11c>
    56d0:	90 e0       	ldi	r25, 0x00	; 0
    56d2:	66 ec       	ldi	r22, 0xC6	; 198
    56d4:	72 e0       	ldi	r23, 0x02	; 2
    56d6:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(0 == commandDecoded.extension, commandDecoded.extension);
    56da:	88 85       	ldd	r24, Y+8	; 0x08
    56dc:	88 23       	and	r24, r24
    56de:	29 f0       	breq	.+10     	; 0x56ea <testFHTEncodingHeadAndTail()+0x12c>
    56e0:	90 e0       	ldi	r25, 0x00	; 0
    56e2:	67 ec       	ldi	r22, 0xC7	; 199
    56e4:	72 e0       	ldi	r23, 0x02	; 2
    56e6:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  // Verify that trailer NOT present.
  AssertIsTrue(!verifyHeaderAndCRCForTrailingMinimalStatsPayload(result1));
    56ea:	c8 01       	movw	r24, r16
    56ec:	0e 94 a4 0c 	call	0x1948	; 0x1948 <verifyHeaderAndCRCForTrailingMinimalStatsPayload(unsigned char const*)>
    56f0:	88 23       	and	r24, r24
    56f2:	31 f0       	breq	.+12     	; 0x5700 <testFHTEncodingHeadAndTail()+0x142>
    56f4:	80 e0       	ldi	r24, 0x00	; 0
    56f6:	90 e0       	ldi	r25, 0x00	; 0
    56f8:	69 ec       	ldi	r22, 0xC9	; 201
    56fa:	72 e0       	ldi	r23, 0x02	; 2
    56fc:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>

 // Encode a basic message to set a valve to 0%, with header but without trailer.
  command.hc1 = 13;
    5700:	8d e0       	ldi	r24, 0x0D	; 13
    5702:	89 83       	std	Y+1, r24	; 0x01
  command.hc2 = 73;
    5704:	89 e4       	ldi	r24, 0x49	; 73
    5706:	8a 83       	std	Y+2, r24	; 0x02
#ifdef FHT8V_ADR_USED
  address = 0;
#endif
  memset(buf, 0xff, sizeof(buf));
    5708:	8e 01       	movw	r16, r28
    570a:	09 5e       	subi	r16, 0xE9	; 233
    570c:	1f 4f       	sbci	r17, 0xFF	; 255
    570e:	c8 01       	movw	r24, r16
    5710:	6f ef       	ldi	r22, 0xFF	; 255
    5712:	70 e0       	ldi	r23, 0x00	; 0
    5714:	4c e3       	ldi	r20, 0x3C	; 60
    5716:	50 e0       	ldi	r21, 0x00	; 0
    5718:	0e 94 b2 02 	call	0x564	; 0x564 <memset>
  result1 = FHT8VCreateValveSetCmdFrameHT_r(buf, true, &command, 0, NULL);
    571c:	c8 01       	movw	r24, r16
    571e:	61 e0       	ldi	r22, 0x01	; 1
    5720:	ae 01       	movw	r20, r28
    5722:	4f 5f       	subi	r20, 0xFF	; 255
    5724:	5f 4f       	sbci	r21, 0xFF	; 255
    5726:	20 e0       	ldi	r18, 0x00	; 0
    5728:	00 e0       	ldi	r16, 0x00	; 0
    572a:	10 e0       	ldi	r17, 0x00	; 0
    572c:	0e 94 3b 0c 	call	0x1876	; 0x1876 <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)>
    5730:	8c 01       	movw	r16, r24
  AssertIsTrueWithErr(((uint8_t)~0U) == *result1, *result1); // Check that result points at terminator value 0xff/~0.
    5732:	fc 01       	movw	r30, r24
    5734:	80 81       	ld	r24, Z
    5736:	8f 3f       	cpi	r24, 0xFF	; 255
    5738:	29 f0       	breq	.+10     	; 0x5744 <testFHTEncodingHeadAndTail()+0x186>
    573a:	90 e0       	ldi	r25, 0x00	; 0
    573c:	63 ed       	ldi	r22, 0xD3	; 211
    573e:	72 e0       	ldi	r23, 0x02	; 2
    5740:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  //AssertIsTrue((result1 - buf < MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE), result1-buf); // Check not overflowing the buffer.
  AssertIsTrueWithErr((result1 - buf == RFM22_PREAMBLE_BYTES + 38), result1-buf); // Check correct length: preamble + 38-byte body.
    5744:	c8 01       	movw	r24, r16
    5746:	88 19       	sub	r24, r8
    5748:	99 09       	sbc	r25, r9
    574a:	8b 32       	cpi	r24, 0x2B	; 43
    574c:	91 05       	cpc	r25, r1
    574e:	21 f0       	breq	.+8      	; 0x5758 <testFHTEncodingHeadAndTail()+0x19a>
    5750:	65 ed       	ldi	r22, 0xD5	; 213
    5752:	72 e0       	ldi	r23, 0x02	; 2
    5754:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(((uint8_t)0xaa) == buf[0], buf[0]); // Check that result starts with FHT8V 0xcc preamble.
    5758:	8f 89       	ldd	r24, Y+23	; 0x17
    575a:	8a 3a       	cpi	r24, 0xAA	; 170
    575c:	29 f0       	breq	.+10     	; 0x5768 <testFHTEncodingHeadAndTail()+0x1aa>
    575e:	90 e0       	ldi	r25, 0x00	; 0
    5760:	66 ed       	ldi	r22, 0xD6	; 214
    5762:	72 e0       	ldi	r23, 0x02	; 2
    5764:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(((uint8_t)0xcc) == buf[RFM22_PREAMBLE_BYTES], buf[RFM22_PREAMBLE_BYTES]); // Check that result starts with FHT8V 0xcc preamble.
    5768:	8c 8d       	ldd	r24, Y+28	; 0x1c
    576a:	8c 3c       	cpi	r24, 0xCC	; 204
    576c:	29 f0       	breq	.+10     	; 0x5778 <testFHTEncodingHeadAndTail()+0x1ba>
    576e:	90 e0       	ldi	r25, 0x00	; 0
    5770:	67 ed       	ldi	r22, 0xD7	; 215
    5772:	72 e0       	ldi	r23, 0x02	; 2
    5774:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(((uint8_t)0xe3) == buf[6+RFM22_PREAMBLE_BYTES], buf[6+RFM22_PREAMBLE_BYTES]); // Check end of preamble.
    5778:	8a a1       	ldd	r24, Y+34	; 0x22
    577a:	83 3e       	cpi	r24, 0xE3	; 227
    577c:	29 f0       	breq	.+10     	; 0x5788 <testFHTEncodingHeadAndTail()+0x1ca>
    577e:	90 e0       	ldi	r25, 0x00	; 0
    5780:	68 ed       	ldi	r22, 0xD8	; 216
    5782:	72 e0       	ldi	r23, 0x02	; 2
    5784:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(((uint8_t)0xce) == buf[34+RFM22_PREAMBLE_BYTES], buf[34+RFM22_PREAMBLE_BYTES]); // Check part of checksum.
    5788:	8e ad       	ldd	r24, Y+62	; 0x3e
    578a:	8e 3c       	cpi	r24, 0xCE	; 206
    578c:	29 f0       	breq	.+10     	; 0x5798 <testFHTEncodingHeadAndTail()+0x1da>
    578e:	90 e0       	ldi	r25, 0x00	; 0
    5790:	69 ed       	ldi	r22, 0xD9	; 217
    5792:	72 e0       	ldi	r23, 0x02	; 2
    5794:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  // Attempt to decode.
  AssertIsTrue(FHT8VDecodeBitStream(buf + RFM22_PREAMBLE_BYTES, buf + MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE - 1, &commandDecoded));
    5798:	ce 01       	movw	r24, r28
    579a:	4c 96       	adiw	r24, 0x1c	; 28
    579c:	be 01       	movw	r22, r28
    579e:	6c 5b       	subi	r22, 0xBC	; 188
    57a0:	7f 4f       	sbci	r23, 0xFF	; 255
    57a2:	ae 01       	movw	r20, r28
    57a4:	4b 5f       	subi	r20, 0xFB	; 251
    57a6:	5f 4f       	sbci	r21, 0xFF	; 255
    57a8:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)>
    57ac:	89 2b       	or	r24, r25
    57ae:	31 f4       	brne	.+12     	; 0x57bc <testFHTEncodingHeadAndTail()+0x1fe>
    57b0:	80 e0       	ldi	r24, 0x00	; 0
    57b2:	90 e0       	ldi	r25, 0x00	; 0
    57b4:	6b ed       	ldi	r22, 0xDB	; 219
    57b6:	72 e0       	ldi	r23, 0x02	; 2
    57b8:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(13 == commandDecoded.hc1, commandDecoded.hc1);
    57bc:	8d 81       	ldd	r24, Y+5	; 0x05
    57be:	8d 30       	cpi	r24, 0x0D	; 13
    57c0:	29 f0       	breq	.+10     	; 0x57cc <testFHTEncodingHeadAndTail()+0x20e>
    57c2:	90 e0       	ldi	r25, 0x00	; 0
    57c4:	6c ed       	ldi	r22, 0xDC	; 220
    57c6:	72 e0       	ldi	r23, 0x02	; 2
    57c8:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(73 == commandDecoded.hc2, commandDecoded.hc2);
    57cc:	8e 81       	ldd	r24, Y+6	; 0x06
    57ce:	89 34       	cpi	r24, 0x49	; 73
    57d0:	29 f0       	breq	.+10     	; 0x57dc <testFHTEncodingHeadAndTail()+0x21e>
    57d2:	90 e0       	ldi	r25, 0x00	; 0
    57d4:	6d ed       	ldi	r22, 0xDD	; 221
    57d6:	72 e0       	ldi	r23, 0x02	; 2
    57d8:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(0x26 == commandDecoded.command, commandDecoded.command);
    57dc:	8f 81       	ldd	r24, Y+7	; 0x07
    57de:	86 32       	cpi	r24, 0x26	; 38
    57e0:	29 f0       	breq	.+10     	; 0x57ec <testFHTEncodingHeadAndTail()+0x22e>
    57e2:	90 e0       	ldi	r25, 0x00	; 0
    57e4:	6e ed       	ldi	r22, 0xDE	; 222
    57e6:	72 e0       	ldi	r23, 0x02	; 2
    57e8:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(0 == commandDecoded.extension, commandDecoded.extension);
    57ec:	88 85       	ldd	r24, Y+8	; 0x08
    57ee:	88 23       	and	r24, r24
    57f0:	29 f0       	breq	.+10     	; 0x57fc <testFHTEncodingHeadAndTail()+0x23e>
    57f2:	90 e0       	ldi	r25, 0x00	; 0
    57f4:	6f ed       	ldi	r22, 0xDF	; 223
    57f6:	72 e0       	ldi	r23, 0x02	; 2
    57f8:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  // Verify that trailer NOT present.
  AssertIsTrue(!verifyHeaderAndCRCForTrailingMinimalStatsPayload(result1));
    57fc:	c8 01       	movw	r24, r16
    57fe:	0e 94 a4 0c 	call	0x1948	; 0x1948 <verifyHeaderAndCRCForTrailingMinimalStatsPayload(unsigned char const*)>
    5802:	88 23       	and	r24, r24
    5804:	31 f0       	breq	.+12     	; 0x5812 <testFHTEncodingHeadAndTail()+0x254>
    5806:	80 e0       	ldi	r24, 0x00	; 0
    5808:	90 e0       	ldi	r25, 0x00	; 0
    580a:	61 ee       	ldi	r22, 0xE1	; 225
    580c:	72 e0       	ldi	r23, 0x02	; 2
    580e:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>

  // Encode a basic message to set a valve to 0%, with header and trailer.
  command.hc1 = 13;
    5812:	8d e0       	ldi	r24, 0x0D	; 13
    5814:	89 83       	std	Y+1, r24	; 0x01
  command.hc2 = 73;
    5816:	89 e4       	ldi	r24, 0x49	; 73
    5818:	8a 83       	std	Y+2, r24	; 0x02
    581a:	99 e0       	ldi	r25, 0x09	; 9
    581c:	e9 2e       	mov	r14, r25
    581e:	f1 2c       	mov	r15, r1
    5820:	ec 0e       	add	r14, r28
    5822:	fd 1e       	adc	r15, r29
    5824:	87 e0       	ldi	r24, 0x07	; 7
    5826:	f7 01       	movw	r30, r14
    5828:	11 92       	st	Z+, r1
    582a:	8a 95       	dec	r24
    582c:	e9 f7       	brne	.-6      	; 0x5828 <testFHTEncodingHeadAndTail()+0x26a>
#ifdef FHT8V_ADR_USED
  address = 0;
#endif
  FullStatsMessageCore_t fullStats;
  clearFullStatsMessageCore(&fullStats);
  captureEntropy1(); // Try stir a little noise into the PRNG before using it.
    582e:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <captureEntropy1()>
  const bool powerLow = !(randRNG8() & 0x40); // Random value.
    5832:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <randRNG8()>
    5836:	b8 2e       	mov	r11, r24
    5838:	b2 94       	swap	r11
    583a:	b6 94       	lsr	r11
    583c:	b6 94       	lsr	r11
    583e:	83 e0       	ldi	r24, 0x03	; 3
    5840:	b8 22       	and	r11, r24
    5842:	b0 94       	com	r11
    5844:	f1 e0       	ldi	r31, 0x01	; 1
    5846:	bf 22       	and	r11, r31
  fullStats.containsTempAndPower = true;
    5848:	89 85       	ldd	r24, Y+9	; 0x09
    584a:	82 60       	ori	r24, 0x02	; 2
    584c:	89 87       	std	Y+9, r24	; 0x09
  fullStats.tempAndPower.powerLow = powerLow;
    584e:	9b 2d       	mov	r25, r11
    5850:	97 95       	ror	r25
    5852:	99 27       	eor	r25, r25
    5854:	97 95       	ror	r25
    5856:	8d 85       	ldd	r24, Y+13	; 0x0d
    5858:	8f 77       	andi	r24, 0x7F	; 127
    585a:	89 2b       	or	r24, r25
    585c:	8d 87       	std	Y+13, r24	; 0x0d
  const int tempC16 = (randRNG8()&0xff) + (10 << 16); // Random value in range [10C, 25C[.
    585e:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <randRNG8()>
    5862:	78 2e       	mov	r7, r24
  fullStats.tempAndPower.tempC16 = tempC16;
    5864:	8c 87       	std	Y+12, r24	; 0x0c
    5866:	8d 85       	ldd	r24, Y+13	; 0x0d
    5868:	80 78       	andi	r24, 0x80	; 128
    586a:	8d 87       	std	Y+13, r24	; 0x0d
  memset(buf, 0xff, sizeof(buf));
    586c:	8e 01       	movw	r16, r28
    586e:	09 5e       	subi	r16, 0xE9	; 233
    5870:	1f 4f       	sbci	r17, 0xFF	; 255
    5872:	c8 01       	movw	r24, r16
    5874:	6f ef       	ldi	r22, 0xFF	; 255
    5876:	70 e0       	ldi	r23, 0x00	; 0
    5878:	4c e3       	ldi	r20, 0x3C	; 60
    587a:	50 e0       	ldi	r21, 0x00	; 0
    587c:	0e 94 b2 02 	call	0x564	; 0x564 <memset>
  result1 = FHT8VCreateValveSetCmdFrameHT_r(buf, true, &command, 0, &fullStats);
    5880:	c8 01       	movw	r24, r16
    5882:	61 e0       	ldi	r22, 0x01	; 1
    5884:	ae 01       	movw	r20, r28
    5886:	4f 5f       	subi	r20, 0xFF	; 255
    5888:	5f 4f       	sbci	r21, 0xFF	; 255
    588a:	20 e0       	ldi	r18, 0x00	; 0
    588c:	87 01       	movw	r16, r14
    588e:	0e 94 3b 0c 	call	0x1876	; 0x1876 <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)>
    5892:	8c 01       	movw	r16, r24
  AssertIsTrueWithErr(((uint8_t)~0U) == *result1, *result1); // Check that result points at terminator value 0xff/~0.
    5894:	fc 01       	movw	r30, r24
    5896:	80 81       	ld	r24, Z
    5898:	8f 3f       	cpi	r24, 0xFF	; 255
    589a:	29 f0       	breq	.+10     	; 0x58a6 <testFHTEncodingHeadAndTail()+0x2e8>
    589c:	90 e0       	ldi	r25, 0x00	; 0
    589e:	63 ef       	ldi	r22, 0xF3	; 243
    58a0:	72 e0       	ldi	r23, 0x02	; 2
    58a2:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  //AssertIsTrue((result1 - buf < MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE), result1-buf); // Check not overflowing the buffer.
#if defined(ALLOW_MINIMAL_STATS_TXRX)
  AssertIsTrueWithErr((result1 - buf == 41 + RFM22_PREAMBLE_BYTES), result1-buf); // Check correct length:prepamble + 38-byte body + 3 byte trailer.
#else // Expect longer encoding in this case...
  AssertIsTrueWithErr((result1 - buf == 43 + RFM22_PREAMBLE_BYTES), result1-buf); // Check correct length:prepamble + 38-byte body + 5ww33 byte trailer.
    58a6:	c8 01       	movw	r24, r16
    58a8:	88 19       	sub	r24, r8
    58aa:	99 09       	sbc	r25, r9
    58ac:	80 33       	cpi	r24, 0x30	; 48
    58ae:	91 05       	cpc	r25, r1
    58b0:	21 f0       	breq	.+8      	; 0x58ba <testFHTEncodingHeadAndTail()+0x2fc>
    58b2:	68 ef       	ldi	r22, 0xF8	; 248
    58b4:	72 e0       	ldi	r23, 0x02	; 2
    58b6:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
#endif
  AssertIsTrueWithErr(((uint8_t)0xaa) == buf[0], buf[0]); // Check that result starts with FHT8V 0xcc preamble.
    58ba:	8f 89       	ldd	r24, Y+23	; 0x17
    58bc:	8a 3a       	cpi	r24, 0xAA	; 170
    58be:	29 f0       	breq	.+10     	; 0x58ca <testFHTEncodingHeadAndTail()+0x30c>
    58c0:	90 e0       	ldi	r25, 0x00	; 0
    58c2:	6a ef       	ldi	r22, 0xFA	; 250
    58c4:	72 e0       	ldi	r23, 0x02	; 2
    58c6:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(((uint8_t)0xcc) == buf[RFM22_PREAMBLE_BYTES], buf[RFM22_PREAMBLE_BYTES]); // Check that result starts with FHT8V 0xcc preamble.
    58ca:	8c 8d       	ldd	r24, Y+28	; 0x1c
    58cc:	8c 3c       	cpi	r24, 0xCC	; 204
    58ce:	29 f0       	breq	.+10     	; 0x58da <testFHTEncodingHeadAndTail()+0x31c>
    58d0:	90 e0       	ldi	r25, 0x00	; 0
    58d2:	6b ef       	ldi	r22, 0xFB	; 251
    58d4:	72 e0       	ldi	r23, 0x02	; 2
    58d6:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(((uint8_t)0xe3) == buf[6+RFM22_PREAMBLE_BYTES], buf[6+RFM22_PREAMBLE_BYTES]); // Check end of preamble.
    58da:	8a a1       	ldd	r24, Y+34	; 0x22
    58dc:	83 3e       	cpi	r24, 0xE3	; 227
    58de:	29 f0       	breq	.+10     	; 0x58ea <testFHTEncodingHeadAndTail()+0x32c>
    58e0:	90 e0       	ldi	r25, 0x00	; 0
    58e2:	6c ef       	ldi	r22, 0xFC	; 252
    58e4:	72 e0       	ldi	r23, 0x02	; 2
    58e6:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(((uint8_t)0xce) == buf[34+RFM22_PREAMBLE_BYTES], buf[34+RFM22_PREAMBLE_BYTES]); // Check part of checksum.
    58ea:	8e ad       	ldd	r24, Y+62	; 0x3e
    58ec:	8e 3c       	cpi	r24, 0xCE	; 206
    58ee:	29 f0       	breq	.+10     	; 0x58fa <testFHTEncodingHeadAndTail()+0x33c>
    58f0:	90 e0       	ldi	r25, 0x00	; 0
    58f2:	6d ef       	ldi	r22, 0xFD	; 253
    58f4:	72 e0       	ldi	r23, 0x02	; 2
    58f6:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  // Attempt to decode.
  const uint8_t *afterBody = FHT8VDecodeBitStream(buf + RFM22_PREAMBLE_BYTES, buf + MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE - 1, &commandDecoded);
    58fa:	ce 01       	movw	r24, r28
    58fc:	4c 96       	adiw	r24, 0x1c	; 28
    58fe:	be 01       	movw	r22, r28
    5900:	6c 5b       	subi	r22, 0xBC	; 188
    5902:	7f 4f       	sbci	r23, 0xFF	; 255
    5904:	ae 01       	movw	r20, r28
    5906:	4b 5f       	subi	r20, 0xFB	; 251
    5908:	5f 4f       	sbci	r21, 0xFF	; 255
    590a:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)>
    590e:	6c 01       	movw	r12, r24
  AssertIsTrue(afterBody);
    5910:	00 97       	sbiw	r24, 0x00	; 0
    5912:	31 f4       	brne	.+12     	; 0x5920 <testFHTEncodingHeadAndTail()+0x362>
    5914:	80 e0       	ldi	r24, 0x00	; 0
    5916:	90 e0       	ldi	r25, 0x00	; 0
    5918:	60 e0       	ldi	r22, 0x00	; 0
    591a:	73 e0       	ldi	r23, 0x03	; 3
    591c:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(13 == commandDecoded.hc1, commandDecoded.hc1);
    5920:	8d 81       	ldd	r24, Y+5	; 0x05
    5922:	8d 30       	cpi	r24, 0x0D	; 13
    5924:	29 f0       	breq	.+10     	; 0x5930 <testFHTEncodingHeadAndTail()+0x372>
    5926:	90 e0       	ldi	r25, 0x00	; 0
    5928:	61 e0       	ldi	r22, 0x01	; 1
    592a:	73 e0       	ldi	r23, 0x03	; 3
    592c:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(73 == commandDecoded.hc2, commandDecoded.hc2);
    5930:	8e 81       	ldd	r24, Y+6	; 0x06
    5932:	89 34       	cpi	r24, 0x49	; 73
    5934:	29 f0       	breq	.+10     	; 0x5940 <testFHTEncodingHeadAndTail()+0x382>
    5936:	90 e0       	ldi	r25, 0x00	; 0
    5938:	62 e0       	ldi	r22, 0x02	; 2
    593a:	73 e0       	ldi	r23, 0x03	; 3
    593c:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(0x26 == commandDecoded.command, commandDecoded.command);
    5940:	8f 81       	ldd	r24, Y+7	; 0x07
    5942:	86 32       	cpi	r24, 0x26	; 38
    5944:	29 f0       	breq	.+10     	; 0x5950 <testFHTEncodingHeadAndTail()+0x392>
    5946:	90 e0       	ldi	r25, 0x00	; 0
    5948:	63 e0       	ldi	r22, 0x03	; 3
    594a:	73 e0       	ldi	r23, 0x03	; 3
    594c:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(0 == commandDecoded.extension, commandDecoded.extension);
    5950:	88 85       	ldd	r24, Y+8	; 0x08
    5952:	88 23       	and	r24, r24
    5954:	29 f0       	breq	.+10     	; 0x5960 <testFHTEncodingHeadAndTail()+0x3a2>
    5956:	90 e0       	ldi	r25, 0x00	; 0
    5958:	64 e0       	ldi	r22, 0x04	; 4
    595a:	73 e0       	ldi	r23, 0x03	; 3
    595c:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
    5960:	76 01       	movw	r14, r12
    5962:	00 e0       	ldi	r16, 0x00	; 0
    5964:	10 e0       	ldi	r17, 0x00	; 0
  serialPrintlnAndFlush();
#endif
  // Verify (start of) trailer is OK.
  for(uint8_t i = 0; i < 3; ++i)
    {
    AssertIsTrueWithErr(0xff != afterBody[i], i); // No trailer byte should be 0xff (so 0xff can be terminator).
    5966:	f7 01       	movw	r30, r14
    5968:	80 81       	ld	r24, Z
    596a:	8f 3f       	cpi	r24, 0xFF	; 255
    596c:	29 f4       	brne	.+10     	; 0x5978 <testFHTEncodingHeadAndTail()+0x3ba>
    596e:	c8 01       	movw	r24, r16
    5970:	61 e1       	ldi	r22, 0x11	; 17
    5972:	73 e0       	ldi	r23, 0x03	; 3
    5974:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
    AssertIsTrueWithErr(0 == (0x80 & afterBody[i]), i); // No trailer byte should have its high bit set.
    5978:	f7 01       	movw	r30, r14
    597a:	80 81       	ld	r24, Z
    597c:	87 ff       	sbrs	r24, 7
    597e:	05 c0       	rjmp	.+10     	; 0x598a <testFHTEncodingHeadAndTail()+0x3cc>
    5980:	c8 01       	movw	r24, r16
    5982:	62 e1       	ldi	r22, 0x12	; 18
    5984:	73 e0       	ldi	r23, 0x03	; 3
    5986:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
    598a:	0f 5f       	subi	r16, 0xFF	; 255
    598c:	1f 4f       	sbci	r17, 0xFF	; 255
    598e:	08 94       	sec
    5990:	e1 1c       	adc	r14, r1
    5992:	f1 1c       	adc	r15, r1
  serialPrintAndFlush(' ');
  serialPrintAndFlush(afterBody[2], HEX);
  serialPrintlnAndFlush();
#endif
  // Verify (start of) trailer is OK.
  for(uint8_t i = 0; i < 3; ++i)
    5994:	03 30       	cpi	r16, 0x03	; 3
    5996:	11 05       	cpc	r17, r1
    5998:	31 f7       	brne	.-52     	; 0x5966 <testFHTEncodingHeadAndTail()+0x3a8>
  extractTrailingMinimalStatsPayload(afterBody, &statsDecoded);
  AssertIsEqual(powerLow, statsDecoded.powerLow);
  AssertIsEqual(tempC16, statsDecoded.tempC16);
#else
  FullStatsMessageCore_t statsDecoded;
  AssertIsTrue(NULL != decodeFullStatsMessageCore(afterBody, sizeof(buf) - (afterBody - buf), (stats_TX_level)randRNG8(), randRNG8NextBoolean(), &statsDecoded));
    599a:	0c e3       	ldi	r16, 0x3C	; 60
    599c:	a0 2e       	mov	r10, r16
    599e:	a8 0c       	add	r10, r8
    59a0:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <randRNG8()>
    59a4:	18 2f       	mov	r17, r24
    59a6:	0e 94 83 1c 	call	0x3906	; 0x3906 <randRNG8NextBoolean()>
    59aa:	28 2f       	mov	r18, r24
    59ac:	6a 2d       	mov	r22, r10
    59ae:	6c 19       	sub	r22, r12
    59b0:	c6 01       	movw	r24, r12
    59b2:	41 2f       	mov	r20, r17
    59b4:	50 e0       	ldi	r21, 0x00	; 0
    59b6:	8e 01       	movw	r16, r28
    59b8:	00 5f       	subi	r16, 0xF0	; 240
    59ba:	1f 4f       	sbci	r17, 0xFF	; 255
    59bc:	0e 94 c4 11 	call	0x2388	; 0x2388 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)>
    59c0:	89 2b       	or	r24, r25
    59c2:	31 f4       	brne	.+12     	; 0x59d0 <testFHTEncodingHeadAndTail()+0x412>
    59c4:	80 e0       	ldi	r24, 0x00	; 0
    59c6:	90 e0       	ldi	r25, 0x00	; 0
    59c8:	6f e1       	ldi	r22, 0x1F	; 31
    59ca:	73 e0       	ldi	r23, 0x03	; 3
    59cc:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsEqual(powerLow, statsDecoded.tempAndPower.powerLow);
    59d0:	6c 89       	ldd	r22, Y+20	; 0x14
    59d2:	66 1f       	adc	r22, r22
    59d4:	66 27       	eor	r22, r22
    59d6:	66 1f       	adc	r22, r22
    59d8:	8b 2d       	mov	r24, r11
    59da:	90 e0       	ldi	r25, 0x00	; 0
    59dc:	70 e0       	ldi	r23, 0x00	; 0
    59de:	40 e2       	ldi	r20, 0x20	; 32
    59e0:	53 e0       	ldi	r21, 0x03	; 3
    59e2:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <errorIfNotEqual(int, int, int)>
  AssertIsEqual(tempC16, statsDecoded.tempAndPower.tempC16);
    59e6:	6b 89       	ldd	r22, Y+19	; 0x13
    59e8:	8c 89       	ldd	r24, Y+20	; 0x14
    59ea:	78 2f       	mov	r23, r24
    59ec:	7f 77       	andi	r23, 0x7F	; 127
    59ee:	66 0f       	add	r22, r22
    59f0:	77 1f       	adc	r23, r23
    59f2:	75 95       	asr	r23
    59f4:	67 95       	ror	r22
    59f6:	87 2d       	mov	r24, r7
    59f8:	90 e0       	ldi	r25, 0x00	; 0
    59fa:	41 e2       	ldi	r20, 0x21	; 33
    59fc:	53 e0       	ldi	r21, 0x03	; 3
    59fe:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <errorIfNotEqual(int, int, int)>
#endif

  // Encode a basic message to set a different valve to 0%, with header and trailer.
  // This one was apparently impossible to TX or RX...
  command.hc1 = 65;
    5a02:	81 e4       	ldi	r24, 0x41	; 65
    5a04:	89 83       	std	Y+1, r24	; 0x01
  command.hc2 = 74;
    5a06:	8a e4       	ldi	r24, 0x4A	; 74
    5a08:	8a 83       	std	Y+2, r24	; 0x02
#ifdef FHT8V_ADR_USED
  address = 0;
#endif
  memset(buf, 0xff, sizeof(buf));
    5a0a:	8e 01       	movw	r16, r28
    5a0c:	09 5e       	subi	r16, 0xE9	; 233
    5a0e:	1f 4f       	sbci	r17, 0xFF	; 255
    5a10:	c8 01       	movw	r24, r16
    5a12:	6f ef       	ldi	r22, 0xFF	; 255
    5a14:	70 e0       	ldi	r23, 0x00	; 0
    5a16:	4c e3       	ldi	r20, 0x3C	; 60
    5a18:	50 e0       	ldi	r21, 0x00	; 0
    5a1a:	0e 94 b2 02 	call	0x564	; 0x564 <memset>
  result1 = FHT8VCreateValveSetCmdFrameHT_r(buf, true, &command, 0, &fullStats);
    5a1e:	c8 01       	movw	r24, r16
    5a20:	61 e0       	ldi	r22, 0x01	; 1
    5a22:	ae 01       	movw	r20, r28
    5a24:	4f 5f       	subi	r20, 0xFF	; 255
    5a26:	5f 4f       	sbci	r21, 0xFF	; 255
    5a28:	20 e0       	ldi	r18, 0x00	; 0
    5a2a:	8e 01       	movw	r16, r28
    5a2c:	07 5f       	subi	r16, 0xF7	; 247
    5a2e:	1f 4f       	sbci	r17, 0xFF	; 255
    5a30:	0e 94 3b 0c 	call	0x1876	; 0x1876 <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)>
    5a34:	7c 01       	movw	r14, r24
//serialPrintAndFlush(result1 - buf); serialPrintlnAndFlush();
  AssertIsTrueWithErr((result1 - buf) < sizeof(buf), (result1 - buf) - sizeof(buf)); // result1 points to the terminating 0xff, not just after it.
    5a36:	8c 01       	movw	r16, r24
    5a38:	08 19       	sub	r16, r8
    5a3a:	19 09       	sbc	r17, r9
    5a3c:	0c 33       	cpi	r16, 0x3C	; 60
    5a3e:	11 05       	cpc	r17, r1
    5a40:	30 f0       	brcs	.+12     	; 0x5a4e <testFHTEncodingHeadAndTail()+0x490>
    5a42:	c8 01       	movw	r24, r16
    5a44:	cc 97       	sbiw	r24, 0x3c	; 60
    5a46:	6e e2       	ldi	r22, 0x2E	; 46
    5a48:	73 e0       	ldi	r23, 0x03	; 3
    5a4a:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(((uint8_t)~0U) == *result1, *result1); // Check that result points at terminator value 0xff/~0.
    5a4e:	f7 01       	movw	r30, r14
    5a50:	80 81       	ld	r24, Z
    5a52:	8f 3f       	cpi	r24, 0xFF	; 255
    5a54:	29 f0       	breq	.+10     	; 0x5a60 <testFHTEncodingHeadAndTail()+0x4a2>
    5a56:	90 e0       	ldi	r25, 0x00	; 0
    5a58:	6f e2       	ldi	r22, 0x2F	; 47
    5a5a:	73 e0       	ldi	r23, 0x03	; 3
    5a5c:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  //AssertIsTrue((result1 - buf < MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE), result1-buf); // Check not overflowing the buffer.
#if defined(ALLOW_MINIMAL_STATS_TXRX)
  AssertIsTrueWithErr((result1 - buf == 42 + RFM22_PREAMBLE_BYTES), result1-buf); // Check correct length.
#else
  AssertIsTrueWithErr((result1 - buf == 44 + RFM22_PREAMBLE_BYTES), result1-buf); // Check correct length.
    5a60:	01 33       	cpi	r16, 0x31	; 49
    5a62:	11 05       	cpc	r17, r1
    5a64:	29 f0       	breq	.+10     	; 0x5a70 <testFHTEncodingHeadAndTail()+0x4b2>
    5a66:	c8 01       	movw	r24, r16
    5a68:	64 e3       	ldi	r22, 0x34	; 52
    5a6a:	73 e0       	ldi	r23, 0x03	; 3
    5a6c:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
#endif
  AssertIsTrueWithErr(((uint8_t)0xaa) == buf[0], buf[0]); // Check that result starts with FHT8V 0xcc preamble.
    5a70:	8f 89       	ldd	r24, Y+23	; 0x17
    5a72:	8a 3a       	cpi	r24, 0xAA	; 170
    5a74:	29 f0       	breq	.+10     	; 0x5a80 <testFHTEncodingHeadAndTail()+0x4c2>
    5a76:	90 e0       	ldi	r25, 0x00	; 0
    5a78:	66 e3       	ldi	r22, 0x36	; 54
    5a7a:	73 e0       	ldi	r23, 0x03	; 3
    5a7c:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(((uint8_t)0xcc) == buf[RFM22_PREAMBLE_BYTES], buf[RFM22_PREAMBLE_BYTES]); // Check that result starts with FHT8V 0xcc preamble.
    5a80:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5a82:	8c 3c       	cpi	r24, 0xCC	; 204
    5a84:	29 f0       	breq	.+10     	; 0x5a90 <testFHTEncodingHeadAndTail()+0x4d2>
    5a86:	90 e0       	ldi	r25, 0x00	; 0
    5a88:	67 e3       	ldi	r22, 0x37	; 55
    5a8a:	73 e0       	ldi	r23, 0x03	; 3
    5a8c:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  // Attempt to decode.
  afterBody = FHT8VDecodeBitStream(buf + RFM22_PREAMBLE_BYTES, buf + MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE - 1, &commandDecoded);
    5a90:	ce 01       	movw	r24, r28
    5a92:	4c 96       	adiw	r24, 0x1c	; 28
    5a94:	be 01       	movw	r22, r28
    5a96:	6c 5b       	subi	r22, 0xBC	; 188
    5a98:	7f 4f       	sbci	r23, 0xFF	; 255
    5a9a:	ae 01       	movw	r20, r28
    5a9c:	4b 5f       	subi	r20, 0xFB	; 251
    5a9e:	5f 4f       	sbci	r21, 0xFF	; 255
    5aa0:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)>
    5aa4:	6c 01       	movw	r12, r24
  AssertIsTrue(0 != afterBody);
    5aa6:	00 97       	sbiw	r24, 0x00	; 0
    5aa8:	31 f4       	brne	.+12     	; 0x5ab6 <testFHTEncodingHeadAndTail()+0x4f8>
    5aaa:	80 e0       	ldi	r24, 0x00	; 0
    5aac:	90 e0       	ldi	r25, 0x00	; 0
    5aae:	6a e3       	ldi	r22, 0x3A	; 58
    5ab0:	73 e0       	ldi	r23, 0x03	; 3
    5ab2:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
//serialPrintAndFlush(afterBody - buf); serialPrintlnAndFlush();
  AssertIsEqual(5, (result1 - buf) - (afterBody - buf));
    5ab6:	08 0d       	add	r16, r8
    5ab8:	19 1d       	adc	r17, r9
    5aba:	0c 19       	sub	r16, r12
    5abc:	1d 09       	sbc	r17, r13
    5abe:	85 e0       	ldi	r24, 0x05	; 5
    5ac0:	90 e0       	ldi	r25, 0x00	; 0
    5ac2:	b8 01       	movw	r22, r16
    5ac4:	4c e3       	ldi	r20, 0x3C	; 60
    5ac6:	53 e0       	ldi	r21, 0x03	; 3
    5ac8:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <errorIfNotEqual(int, int, int)>
  AssertIsTrueWithErr(65 == commandDecoded.hc1, commandDecoded.hc1);
    5acc:	8d 81       	ldd	r24, Y+5	; 0x05
    5ace:	81 34       	cpi	r24, 0x41	; 65
    5ad0:	29 f0       	breq	.+10     	; 0x5adc <testFHTEncodingHeadAndTail()+0x51e>
    5ad2:	90 e0       	ldi	r25, 0x00	; 0
    5ad4:	6d e3       	ldi	r22, 0x3D	; 61
    5ad6:	73 e0       	ldi	r23, 0x03	; 3
    5ad8:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(74 == commandDecoded.hc2, commandDecoded.hc2);
    5adc:	8e 81       	ldd	r24, Y+6	; 0x06
    5ade:	8a 34       	cpi	r24, 0x4A	; 74
    5ae0:	29 f0       	breq	.+10     	; 0x5aec <testFHTEncodingHeadAndTail()+0x52e>
    5ae2:	90 e0       	ldi	r25, 0x00	; 0
    5ae4:	6e e3       	ldi	r22, 0x3E	; 62
    5ae6:	73 e0       	ldi	r23, 0x03	; 3
    5ae8:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(0x26 == commandDecoded.command, commandDecoded.command);
    5aec:	8f 81       	ldd	r24, Y+7	; 0x07
    5aee:	86 32       	cpi	r24, 0x26	; 38
    5af0:	29 f0       	breq	.+10     	; 0x5afc <testFHTEncodingHeadAndTail()+0x53e>
    5af2:	90 e0       	ldi	r25, 0x00	; 0
    5af4:	6f e3       	ldi	r22, 0x3F	; 63
    5af6:	73 e0       	ldi	r23, 0x03	; 3
    5af8:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrueWithErr(0 == commandDecoded.extension, commandDecoded.extension);
    5afc:	88 85       	ldd	r24, Y+8	; 0x08
    5afe:	88 23       	and	r24, r24
    5b00:	29 f0       	breq	.+10     	; 0x5b0c <testFHTEncodingHeadAndTail()+0x54e>
    5b02:	90 e0       	ldi	r25, 0x00	; 0
    5b04:	60 e4       	ldi	r22, 0x40	; 64
    5b06:	73 e0       	ldi	r23, 0x03	; 3
    5b08:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
    5b0c:	76 01       	movw	r14, r12
    5b0e:	00 e0       	ldi	r16, 0x00	; 0
    5b10:	10 e0       	ldi	r17, 0x00	; 0
  // Verify trailer start is OK.
  for(uint8_t i = 0; i < 3; ++i)
    {
    AssertIsTrueWithErr(0xff != afterBody[i], i); // No trailer byte should be 0xff (so 0xff can be terminator).
    5b12:	f7 01       	movw	r30, r14
    5b14:	80 81       	ld	r24, Z
    5b16:	8f 3f       	cpi	r24, 0xFF	; 255
    5b18:	29 f4       	brne	.+10     	; 0x5b24 <testFHTEncodingHeadAndTail()+0x566>
    5b1a:	c8 01       	movw	r24, r16
    5b1c:	64 e4       	ldi	r22, 0x44	; 68
    5b1e:	73 e0       	ldi	r23, 0x03	; 3
    5b20:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
    AssertIsTrueWithErr(0 == (0x80 & afterBody[i]), i); // No trailer byte should have its high bit set.
    5b24:	f7 01       	movw	r30, r14
    5b26:	80 81       	ld	r24, Z
    5b28:	87 ff       	sbrs	r24, 7
    5b2a:	05 c0       	rjmp	.+10     	; 0x5b36 <testFHTEncodingHeadAndTail()+0x578>
    5b2c:	c8 01       	movw	r24, r16
    5b2e:	65 e4       	ldi	r22, 0x45	; 69
    5b30:	73 e0       	ldi	r23, 0x03	; 3
    5b32:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
    5b36:	0f 5f       	subi	r16, 0xFF	; 255
    5b38:	1f 4f       	sbci	r17, 0xFF	; 255
    5b3a:	08 94       	sec
    5b3c:	e1 1c       	adc	r14, r1
    5b3e:	f1 1c       	adc	r15, r1
  AssertIsTrueWithErr(65 == commandDecoded.hc1, commandDecoded.hc1);
  AssertIsTrueWithErr(74 == commandDecoded.hc2, commandDecoded.hc2);
  AssertIsTrueWithErr(0x26 == commandDecoded.command, commandDecoded.command);
  AssertIsTrueWithErr(0 == commandDecoded.extension, commandDecoded.extension);
  // Verify trailer start is OK.
  for(uint8_t i = 0; i < 3; ++i)
    5b40:	03 30       	cpi	r16, 0x03	; 3
    5b42:	11 05       	cpc	r17, r1
    5b44:	31 f7       	brne	.-52     	; 0x5b12 <testFHTEncodingHeadAndTail()+0x554>
    }
#if defined(ALLOW_MINIMAL_STATS_TXRX)
  AssertIsTrueWithErr(verifyHeaderAndCRCForTrailingMinimalStatsPayload(afterBody), *afterBody);
#endif
  // Decode values...
  memset(&statsDecoded, 0xff, sizeof(statsDecoded)); // Clear structure...
    5b46:	8e 01       	movw	r16, r28
    5b48:	00 5f       	subi	r16, 0xF0	; 240
    5b4a:	1f 4f       	sbci	r17, 0xFF	; 255
    5b4c:	c8 01       	movw	r24, r16
    5b4e:	6f ef       	ldi	r22, 0xFF	; 255
    5b50:	70 e0       	ldi	r23, 0x00	; 0
    5b52:	47 e0       	ldi	r20, 0x07	; 7
    5b54:	50 e0       	ldi	r21, 0x00	; 0
    5b56:	0e 94 b2 02 	call	0x564	; 0x564 <memset>
#if defined(ALLOW_MINIMAL_STATS_TXRX)
  extractTrailingMinimalStatsPayload(afterBody, &statsDecoded);
  AssertIsEqual(powerLow, statsDecoded.powerLow);
  AssertIsEqual(tempC16, statsDecoded.tempC16);
#else
  AssertIsTrue(NULL != decodeFullStatsMessageCore(afterBody, sizeof(buf) - (afterBody - buf), (stats_TX_level)randRNG8(), randRNG8NextBoolean(), &statsDecoded));
    5b5a:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <randRNG8()>
    5b5e:	f8 2e       	mov	r15, r24
    5b60:	0e 94 83 1c 	call	0x3906	; 0x3906 <randRNG8NextBoolean()>
    5b64:	28 2f       	mov	r18, r24
    5b66:	ac 18       	sub	r10, r12
    5b68:	c6 01       	movw	r24, r12
    5b6a:	6a 2d       	mov	r22, r10
    5b6c:	4f 2d       	mov	r20, r15
    5b6e:	50 e0       	ldi	r21, 0x00	; 0
    5b70:	0e 94 c4 11 	call	0x2388	; 0x2388 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)>
    5b74:	89 2b       	or	r24, r25
    5b76:	31 f4       	brne	.+12     	; 0x5b84 <testFHTEncodingHeadAndTail()+0x5c6>
    5b78:	80 e0       	ldi	r24, 0x00	; 0
    5b7a:	90 e0       	ldi	r25, 0x00	; 0
    5b7c:	61 e5       	ldi	r22, 0x51	; 81
    5b7e:	73 e0       	ldi	r23, 0x03	; 3
    5b80:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsEqual(powerLow, statsDecoded.tempAndPower.powerLow);
    5b84:	6c 89       	ldd	r22, Y+20	; 0x14
    5b86:	66 1f       	adc	r22, r22
    5b88:	66 27       	eor	r22, r22
    5b8a:	66 1f       	adc	r22, r22
    5b8c:	8b 2d       	mov	r24, r11
    5b8e:	90 e0       	ldi	r25, 0x00	; 0
    5b90:	70 e0       	ldi	r23, 0x00	; 0
    5b92:	42 e5       	ldi	r20, 0x52	; 82
    5b94:	53 e0       	ldi	r21, 0x03	; 3
    5b96:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <errorIfNotEqual(int, int, int)>
  AssertIsEqual(tempC16, statsDecoded.tempAndPower.tempC16);
    5b9a:	6b 89       	ldd	r22, Y+19	; 0x13
    5b9c:	8c 89       	ldd	r24, Y+20	; 0x14
    5b9e:	78 2f       	mov	r23, r24
    5ba0:	7f 77       	andi	r23, 0x7F	; 127
    5ba2:	66 0f       	add	r22, r22
    5ba4:	77 1f       	adc	r23, r23
    5ba6:	75 95       	asr	r23
    5ba8:	67 95       	ror	r22
    5baa:	87 2d       	mov	r24, r7
    5bac:	90 e0       	ldi	r25, 0x00	; 0
    5bae:	43 e5       	ldi	r20, 0x53	; 83
    5bb0:	53 e0       	ldi	r21, 0x03	; 3
    5bb2:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <errorIfNotEqual(int, int, int)>
#endif
  }
    5bb6:	ce 5a       	subi	r28, 0xAE	; 174
    5bb8:	df 4f       	sbci	r29, 0xFF	; 255
    5bba:	0f b6       	in	r0, 0x3f	; 63
    5bbc:	f8 94       	cli
    5bbe:	de bf       	out	0x3e, r29	; 62
    5bc0:	0f be       	out	0x3f, r0	; 63
    5bc2:	cd bf       	out	0x3d, r28	; 61
    5bc4:	cf 91       	pop	r28
    5bc6:	df 91       	pop	r29
    5bc8:	1f 91       	pop	r17
    5bca:	0f 91       	pop	r16
    5bcc:	ff 90       	pop	r15
    5bce:	ef 90       	pop	r14
    5bd0:	df 90       	pop	r13
    5bd2:	cf 90       	pop	r12
    5bd4:	bf 90       	pop	r11
    5bd6:	af 90       	pop	r10
    5bd8:	9f 90       	pop	r9
    5bda:	8f 90       	pop	r8
    5bdc:	7f 90       	pop	r7
    5bde:	08 95       	ret

00005be0 <testTempSensor()>:
#if !defined(DISABLE_SENSOR_UNIT_TESTS)
// Test temperature sensor returns value in reasonable bounds for a test environment.
// Attempts to test that the sensor is actually present.
static void testTempSensor()
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testTempSensor");
    5be0:	8f e1       	ldi	r24, 0x1F	; 31
    5be2:	93 e0       	ldi	r25, 0x03	; 3
    5be4:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <serialPrintlnAndFlush(__FlashStringHelper const*)>
  const int temp = TemperatureC16.read();
    5be8:	85 ef       	ldi	r24, 0xF5	; 245
    5bea:	92 e0       	ldi	r25, 0x02	; 2
    5bec:	0e 94 d8 31 	call	0x63b0	; 0x63b0 <RoomTemperatureC16::read()>
    5bf0:	9c 01       	movw	r18, r24
  serialPrintAndFlush('C');
  serialPrintAndFlush(temp & 0xf, HEX);
  serialPrintlnAndFlush();
#endif
  // During testing temp should be above 0C (0C might indicate a missing/broken sensor) and below 50C.
  AssertIsTrueWithErr((temp > 0) && (temp < (50 << 4)), temp);
    5bf2:	01 97       	sbiw	r24, 0x01	; 1
    5bf4:	8f 51       	subi	r24, 0x1F	; 31
    5bf6:	93 40       	sbci	r25, 0x03	; 3
    5bf8:	28 f0       	brcs	.+10     	; 0x5c04 <testTempSensor()+0x24>
    5bfa:	c9 01       	movw	r24, r18
    5bfc:	6d e9       	ldi	r22, 0x9D	; 157
    5bfe:	74 e0       	ldi	r23, 0x04	; 4
    5c00:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
    5c04:	08 95       	ret

00005c06 <testInternalTempSensor()>:
#if !defined(DISABLE_SENSOR_UNIT_TESTS)
// Test that on-chip temperature sensor returns value in half-reasonable bounds for a test environment.
// Internal sensor may be +/- 10C out.
static void testInternalTempSensor()
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testInternalTempSensor");
    5c06:	8e e2       	ldi	r24, 0x2E	; 46
    5c08:	93 e0       	ldi	r25, 0x03	; 3
    5c0a:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <serialPrintlnAndFlush(__FlashStringHelper const*)>
  const int temp = readInternalTemperatureC16();
    5c0e:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <readInternalTemperatureC16()>
    5c12:	9c 01       	movw	r18, r24
  serialPrintlnAndFlush();
#endif
  // During testing temp should be above 0C (0C might indicate a missing/broken sensor) and below 50C.
  // Internal sensor may be +/- 10C out.
  // DHD20141223: Just has a reading of ~17C from an otherwise-OK AVR with room temp ~20C.
  AssertIsTrueWithErr((temp > (-20 << 4)) && (temp < (60 << 4)), temp);
    5c14:	81 5c       	subi	r24, 0xC1	; 193
    5c16:	9e 4f       	sbci	r25, 0xFE	; 254
    5c18:	8f 5f       	subi	r24, 0xFF	; 255
    5c1a:	94 40       	sbci	r25, 0x04	; 4
    5c1c:	28 f0       	brcs	.+10     	; 0x5c28 <testInternalTempSensor()+0x22>
    5c1e:	c9 01       	movw	r24, r18
    5c20:	62 eb       	ldi	r22, 0xB2	; 178
    5c22:	74 e0       	ldi	r23, 0x04	; 4
    5c24:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
    5c28:	08 95       	ret

00005c2a <testSupplyVoltageMonitor()>:
#endif

#if !defined(DISABLE_SENSOR_UNIT_TESTS)
static void testSupplyVoltageMonitor()
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testSupplyVoltageMonitor");
    5c2a:	85 e4       	ldi	r24, 0x45	; 69
    5c2c:	93 e0       	ldi	r25, 0x03	; 3
    5c2e:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <serialPrintlnAndFlush(__FlashStringHelper const*)>
  const int mv = Supply_mV.read();
    5c32:	81 ed       	ldi	r24, 0xD1	; 209
    5c34:	92 e0       	ldi	r25, 0x02	; 2
    5c36:	0e 94 de 14 	call	0x29bc	; 0x29bc <SupplyVoltageMilliVolts::read()>
    5c3a:	9c 01       	movw	r18, r24
  serialPrintAndFlush(mv, DEC);
  serialPrintlnAndFlush();
#endif
  // During testing power supply voltage should be above ~1.7V BOD limit,
  // and below 3.6V for V0p2 boards which is RFM22 Vss limit.
  AssertIsTrueWithErr((mv >= 1700) && (mv <= 3600), mv);
    5c3c:	84 5a       	subi	r24, 0xA4	; 164
    5c3e:	96 40       	sbci	r25, 0x06	; 6
    5c40:	8d 56       	subi	r24, 0x6D	; 109
    5c42:	97 40       	sbci	r25, 0x07	; 7
    5c44:	28 f0       	brcs	.+10     	; 0x5c50 <testSupplyVoltageMonitor()+0x26>
    5c46:	c9 01       	movw	r24, r18
    5c48:	62 ec       	ldi	r22, 0xC2	; 194
    5c4a:	74 e0       	ldi	r23, 0x04	; 4
    5c4c:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
    5c50:	08 95       	ret

00005c52 <testSleepUntilSubCycleTime()>:
    AssertIsTrue(0 != i); // Generated too many identical values in a row. 
    }
  }

// Test sleepUntilSubCycleTime() routine.
void testSleepUntilSubCycleTime()
    5c52:	0f 93       	push	r16
    5c54:	1f 93       	push	r17
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testSleepUntilSubCycleTime");
    5c56:	8e e5       	ldi	r24, 0x5E	; 94
    5c58:	93 e0       	ldi	r25, 0x03	; 3
    5c5a:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <serialPrintlnAndFlush(__FlashStringHelper const*)>

  const uint8_t start = getSubCycleTime();
    5c5e:	10 91 b2 00 	lds	r17, 0x00B2

  // Check that this correctly notices/vetoes attempt to sleep until time already past.
  if(start > 0) { AssertIsTrue(!sleepUntilSubCycleTime(start-1)); }
    5c62:	11 23       	and	r17, r17
    5c64:	61 f0       	breq	.+24     	; 0x5c7e <testSleepUntilSubCycleTime()+0x2c>
    5c66:	81 2f       	mov	r24, r17
    5c68:	81 50       	subi	r24, 0x01	; 1
    5c6a:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <sleepUntilSubCycleTime(unsigned char)>
    5c6e:	88 23       	and	r24, r24
    5c70:	31 f0       	breq	.+12     	; 0x5c7e <testSleepUntilSubCycleTime()+0x2c>
    5c72:	80 e0       	ldi	r24, 0x00	; 0
    5c74:	90 e0       	ldi	r25, 0x00	; 0
    5c76:	67 e3       	ldi	r22, 0x37	; 55
    5c78:	74 e0       	ldi	r23, 0x04	; 4
    5c7a:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>

  // Don't attempt rest of test if near the end of the current minor cycle...
  if(start > (GSCT_MAX/2)) { return; }
    5c7e:	17 fd       	sbrc	r17, 7
    5c80:	2b c0       	rjmp	.+86     	; 0x5cd8 <testSleepUntilSubCycleTime()+0x86>

  // Set a random target significantly before the end of the current minor cycle.
#if 0x3f > GSCT_MAX/4
#error
#endif
  const uint8_t sleepTicks = 2 + (randRNG8() & 0x3f);
    5c82:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <randRNG8()>
  const uint8_t target = start + sleepTicks;
    5c86:	1e 5f       	subi	r17, 0xFE	; 254
    5c88:	08 2f       	mov	r16, r24
    5c8a:	0f 73       	andi	r16, 0x3F	; 63
    5c8c:	01 0f       	add	r16, r17
    5c8e:	12 50       	subi	r17, 0x02	; 2
  AssertIsTrue(target > start);
    5c90:	10 17       	cp	r17, r16
    5c92:	30 f0       	brcs	.+12     	; 0x5ca0 <testSleepUntilSubCycleTime()+0x4e>
    5c94:	80 e0       	ldi	r24, 0x00	; 0
    5c96:	90 e0       	ldi	r25, 0x00	; 0
    5c98:	62 e4       	ldi	r22, 0x42	; 66
    5c9a:	74 e0       	ldi	r23, 0x04	; 4
    5c9c:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  AssertIsTrue(target < GSCT_MAX);
    5ca0:	0f 3f       	cpi	r16, 0xFF	; 255
    5ca2:	31 f4       	brne	.+12     	; 0x5cb0 <testSleepUntilSubCycleTime()+0x5e>
    5ca4:	80 e0       	ldi	r24, 0x00	; 0
    5ca6:	90 e0       	ldi	r25, 0x00	; 0
    5ca8:	63 e4       	ldi	r22, 0x43	; 67
    5caa:	74 e0       	ldi	r23, 0x04	; 4
    5cac:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>

  // Call should succeed.
  AssertIsTrue(sleepUntilSubCycleTime(target));
    5cb0:	80 2f       	mov	r24, r16
    5cb2:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <sleepUntilSubCycleTime(unsigned char)>
    5cb6:	88 23       	and	r24, r24
    5cb8:	31 f4       	brne	.+12     	; 0x5cc6 <testSleepUntilSubCycleTime()+0x74>
    5cba:	80 e0       	ldi	r24, 0x00	; 0
    5cbc:	90 e0       	ldi	r25, 0x00	; 0
    5cbe:	66 e4       	ldi	r22, 0x46	; 70
    5cc0:	74 e0       	ldi	r23, 0x04	; 4
    5cc2:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>

  // Call should return with some of specified target tick still to run...
  const uint8_t end = getSubCycleTime();
    5cc6:	80 91 b2 00 	lds	r24, 0x00B2
  AssertIsTrueWithErr(target == end, end); // FIXME: DHD2014020: getting occasional failures.
    5cca:	08 17       	cp	r16, r24
    5ccc:	29 f0       	breq	.+10     	; 0x5cd8 <testSleepUntilSubCycleTime()+0x86>
    5cce:	90 e0       	ldi	r25, 0x00	; 0
    5cd0:	6a e4       	ldi	r22, 0x4A	; 74
    5cd2:	74 e0       	ldi	r23, 0x04	; 4
    5cd4:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
#if 0
  DEBUG_SERIAL_PRINT_FLASHSTRING("Sleep ticks: ");
  DEBUG_SERIAL_PRINT(sleepTicks);
  DEBUG_SERIAL_PRINTLN();
#endif
  }
    5cd8:	1f 91       	pop	r17
    5cda:	0f 91       	pop	r16
    5cdc:	08 95       	ret

00005cde <testEntropyGathering()>:
// Tests of entropy gathering routines.
//
// Maximum number of identical nominally random bits (or values with approx one bit of entropy) in a row tolerated.
// Set large enough that even soak testing for many hours should not trigger a failure if behaviour is plausibly correct.
#define MAX_IDENTICAL_BITS_SEQUENTIALLY 32
void testEntropyGathering()
    5cde:	1f 93       	push	r17
    5ce0:	cf 93       	push	r28
    5ce2:	df 93       	push	r29
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testEntropyGathering");
    5ce4:	89 e7       	ldi	r24, 0x79	; 121
    5ce6:	93 e0       	ldi	r25, 0x03	; 3
    5ce8:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <serialPrintlnAndFlush(__FlashStringHelper const*)>

  // Test WDT jitter: assumed about 1 bit of entropy per call/result.
  //DEBUG_SERIAL_PRINT_FLASHSTRING("jWDT... ");
  const uint8_t jWDT = clockJitterWDT();
    5cec:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <clockJitterWDT()>
    5cf0:	18 2f       	mov	r17, r24
    5cf2:	c0 e2       	ldi	r28, 0x20	; 32
    5cf4:	d0 e0       	ldi	r29, 0x00	; 0
    5cf6:	0c c0       	rjmp	.+24     	; 0x5d10 <testEntropyGathering()+0x32>
  for(int i = MAX_IDENTICAL_BITS_SEQUENTIALLY; --i >= 0; )
    {
    if(jWDT != clockJitterWDT()) { break; } // Stop as soon as a different value is obtained.
    5cf8:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <clockJitterWDT()>
    5cfc:	18 17       	cp	r17, r24
    5cfe:	59 f4       	brne	.+22     	; 0x5d16 <testEntropyGathering()+0x38>
    AssertIsTrueWithErr(0 != i, i); // Generated too many identical values in a row. 
    5d00:	20 97       	sbiw	r28, 0x00	; 0
    5d02:	31 f4       	brne	.+12     	; 0x5d10 <testEntropyGathering()+0x32>
    5d04:	80 e0       	ldi	r24, 0x00	; 0
    5d06:	90 e0       	ldi	r25, 0x00	; 0
    5d08:	6a ee       	ldi	r22, 0xEA	; 234
    5d0a:	73 e0       	ldi	r23, 0x03	; 3
    5d0c:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testEntropyGathering");

  // Test WDT jitter: assumed about 1 bit of entropy per call/result.
  //DEBUG_SERIAL_PRINT_FLASHSTRING("jWDT... ");
  const uint8_t jWDT = clockJitterWDT();
  for(int i = MAX_IDENTICAL_BITS_SEQUENTIALLY; --i >= 0; )
    5d10:	21 97       	sbiw	r28, 0x01	; 1
    5d12:	d7 ff       	sbrs	r29, 7
    5d14:	f1 cf       	rjmp	.-30     	; 0x5cf8 <testEntropyGathering()+0x1a>
  //DEBUG_SERIAL_PRINTFMT(jWDT, BIN);
  //DEBUG_SERIAL_PRINTLN();

  // Test RTC jitter: assumed about 1 bit of entropy per call/result.
  //DEBUG_SERIAL_PRINT_FLASHSTRING("jRTC... ");
  for(const uint8_t t0 = getSubCycleTime(); t0 == getSubCycleTime(); ) { } // Wait for sub-cycle time to roll to toughen test.
    5d16:	90 91 b2 00 	lds	r25, 0x00B2
    5d1a:	80 91 b2 00 	lds	r24, 0x00B2
    5d1e:	98 17       	cp	r25, r24
    5d20:	e1 f3       	breq	.-8      	; 0x5d1a <testEntropyGathering()+0x3c>
  const uint8_t jRTC = clockJitterRTC();
    5d22:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <clockJitterRTC()>
    5d26:	18 2f       	mov	r17, r24
    5d28:	c0 e2       	ldi	r28, 0x20	; 32
    5d2a:	d0 e0       	ldi	r29, 0x00	; 0
    5d2c:	0c c0       	rjmp	.+24     	; 0x5d46 <testEntropyGathering()+0x68>
  for(int i = MAX_IDENTICAL_BITS_SEQUENTIALLY; --i >= 0; )
    {
    if(jRTC != clockJitterRTC()) { break; } // Stop as soon as a different value is obtained.
    5d2e:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <clockJitterRTC()>
    5d32:	18 17       	cp	r17, r24
    5d34:	59 f4       	brne	.+22     	; 0x5d4c <testEntropyGathering()+0x6e>
    AssertIsTrue(0 != i); // Generated too many identical values in a row. 
    5d36:	20 97       	sbiw	r28, 0x00	; 0
    5d38:	31 f4       	brne	.+12     	; 0x5d46 <testEntropyGathering()+0x68>
    5d3a:	80 e0       	ldi	r24, 0x00	; 0
    5d3c:	90 e0       	ldi	r25, 0x00	; 0
    5d3e:	67 ef       	ldi	r22, 0xF7	; 247
    5d40:	73 e0       	ldi	r23, 0x03	; 3
    5d42:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>

  // Test RTC jitter: assumed about 1 bit of entropy per call/result.
  //DEBUG_SERIAL_PRINT_FLASHSTRING("jRTC... ");
  for(const uint8_t t0 = getSubCycleTime(); t0 == getSubCycleTime(); ) { } // Wait for sub-cycle time to roll to toughen test.
  const uint8_t jRTC = clockJitterRTC();
  for(int i = MAX_IDENTICAL_BITS_SEQUENTIALLY; --i >= 0; )
    5d46:	21 97       	sbiw	r28, 0x01	; 1
    5d48:	d7 ff       	sbrs	r29, 7
    5d4a:	f1 cf       	rjmp	.-30     	; 0x5d2e <testEntropyGathering()+0x50>
  //DEBUG_SERIAL_PRINTFMT(jRTC, BIN);
  //DEBUG_SERIAL_PRINTLN();

  // Test full-byte jitter: assumed about 8 bits of entropy per call/result.
  //DEBUG_SERIAL_PRINT_FLASHSTRING("jByte... ");
  const uint8_t t0j = getSubCycleTime();
    5d4c:	90 91 b2 00 	lds	r25, 0x00B2
  while(t0j == getSubCycleTime()) { } // Wait for sub-cycle time to roll to toughen test.
    5d50:	80 91 b2 00 	lds	r24, 0x00B2
    5d54:	98 17       	cp	r25, r24
    5d56:	e1 f3       	breq	.-8      	; 0x5d50 <testEntropyGathering()+0x72>
  const uint8_t jByte = clockJitterEntropyByte();
    5d58:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <clockJitterEntropyByte()>
    5d5c:	18 2f       	mov	r17, r24
    5d5e:	c4 e0       	ldi	r28, 0x04	; 4
    5d60:	d0 e0       	ldi	r29, 0x00	; 0
    5d62:	0c c0       	rjmp	.+24     	; 0x5d7c <testEntropyGathering()+0x9e>

  for(int i = MAX_IDENTICAL_BITS_SEQUENTIALLY/8; --i >= 0; )
    {
    if(jByte != clockJitterEntropyByte()) { break; } // Stop as soon as a different value is obtained.
    5d64:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <clockJitterEntropyByte()>
    5d68:	18 17       	cp	r17, r24
    5d6a:	59 f4       	brne	.+22     	; 0x5d82 <testEntropyGathering()+0xa4>
    AssertIsTrue(0 != i); // Generated too many identical values in a row. 
    5d6c:	20 97       	sbiw	r28, 0x00	; 0
    5d6e:	31 f4       	brne	.+12     	; 0x5d7c <testEntropyGathering()+0x9e>
    5d70:	80 e0       	ldi	r24, 0x00	; 0
    5d72:	90 e0       	ldi	r25, 0x00	; 0
    5d74:	66 e0       	ldi	r22, 0x06	; 6
    5d76:	74 e0       	ldi	r23, 0x04	; 4
    5d78:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
  //DEBUG_SERIAL_PRINT_FLASHSTRING("jByte... ");
  const uint8_t t0j = getSubCycleTime();
  while(t0j == getSubCycleTime()) { } // Wait for sub-cycle time to roll to toughen test.
  const uint8_t jByte = clockJitterEntropyByte();

  for(int i = MAX_IDENTICAL_BITS_SEQUENTIALLY/8; --i >= 0; )
    5d7c:	21 97       	sbiw	r28, 0x01	; 1
    5d7e:	d7 ff       	sbrs	r29, 7
    5d80:	f1 cf       	rjmp	.-30     	; 0x5d64 <testEntropyGathering()+0x86>
  //DEBUG_SERIAL_PRINT_FLASHSTRING(", ticks=");
  //DEBUG_SERIAL_PRINT((uint8_t)(t1j - t0j - 1));
  //DEBUG_SERIAL_PRINTLN();
  
  // Test noisy ADC read: assumed at least one bit of noise per call/result.
  const uint8_t nar1 = noisyADCRead();
    5d82:	0e 94 02 15 	call	0x2a04	; 0x2a04 <noisyADCRead()>
    5d86:	18 2f       	mov	r17, r24
    5d88:	c0 e2       	ldi	r28, 0x20	; 32
    5d8a:	d0 e0       	ldi	r29, 0x00	; 0
    5d8c:	0c c0       	rjmp	.+24     	; 0x5da6 <testEntropyGathering()+0xc8>
  DEBUG_SERIAL_PRINTFMT(nar1, BIN);
  DEBUG_SERIAL_PRINTLN();
#endif
  for(int i = MAX_IDENTICAL_BITS_SEQUENTIALLY; --i >= 0; )
    {
    const uint8_t nar = noisyADCRead();
    5d8e:	0e 94 02 15 	call	0x2a04	; 0x2a04 <noisyADCRead()>
    if(nar1 != nar) { break; } // Stop as soon as a different value is obtained.
    5d92:	18 17       	cp	r17, r24
    5d94:	59 f4       	brne	.+22     	; 0x5dac <testEntropyGathering()+0xce>
#if 0
    DEBUG_SERIAL_PRINT_FLASHSTRING("repeat nar ");
    DEBUG_SERIAL_PRINTFMT(nar, BIN);
    DEBUG_SERIAL_PRINTLN();
#endif
    AssertIsTrue(0 != i); // Generated too many identical values in a row. 
    5d96:	20 97       	sbiw	r28, 0x00	; 0
    5d98:	31 f4       	brne	.+12     	; 0x5da6 <testEntropyGathering()+0xc8>
    5d9a:	80 e0       	ldi	r24, 0x00	; 0
    5d9c:	90 e0       	ldi	r25, 0x00	; 0
    5d9e:	6e e1       	ldi	r22, 0x1E	; 30
    5da0:	74 e0       	ldi	r23, 0x04	; 4
    5da2:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
#if 0
  DEBUG_SERIAL_PRINT_FLASHSTRING("nar1 ");
  DEBUG_SERIAL_PRINTFMT(nar1, BIN);
  DEBUG_SERIAL_PRINTLN();
#endif
  for(int i = MAX_IDENTICAL_BITS_SEQUENTIALLY; --i >= 0; )
    5da6:	21 97       	sbiw	r28, 0x01	; 1
    5da8:	d7 ff       	sbrs	r29, 7
    5daa:	f1 cf       	rjmp	.-30     	; 0x5d8e <testEntropyGathering()+0xb0>
#endif
    AssertIsTrue(0 != i); // Generated too many identical values in a row. 
    }

  // Test secure random byte generation.
  const uint8_t srb1 = getSecureRandomByte();
    5dac:	0e 94 c7 1b 	call	0x378e	; 0x378e <getSecureRandomByte()>
    5db0:	18 2f       	mov	r17, r24
    5db2:	c4 e0       	ldi	r28, 0x04	; 4
    5db4:	d0 e0       	ldi	r29, 0x00	; 0
    5db6:	0c c0       	rjmp	.+24     	; 0x5dd0 <testEntropyGathering()+0xf2>
  DEBUG_SERIAL_PRINTFMT(srb1, BIN);
  DEBUG_SERIAL_PRINTLN();
#endif
  for(int i = MAX_IDENTICAL_BITS_SEQUENTIALLY/8; --i >= 0; )
    {
    if(srb1 != getSecureRandomByte()) { break; } // Stop as soon as a different value is obtained.
    5db8:	0e 94 c7 1b 	call	0x378e	; 0x378e <getSecureRandomByte()>
    5dbc:	18 17       	cp	r17, r24
    5dbe:	59 f4       	brne	.+22     	; 0x5dd6 <testEntropyGathering()+0xf8>
    AssertIsTrue(0 != i); // Generated too many identical values in a row. 
    5dc0:	20 97       	sbiw	r28, 0x00	; 0
    5dc2:	31 f4       	brne	.+12     	; 0x5dd0 <testEntropyGathering()+0xf2>
    5dc4:	80 e0       	ldi	r24, 0x00	; 0
    5dc6:	90 e0       	ldi	r25, 0x00	; 0
    5dc8:	6b e2       	ldi	r22, 0x2B	; 43
    5dca:	74 e0       	ldi	r23, 0x04	; 4
    5dcc:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <error(int, int)>
#if 0
  DEBUG_SERIAL_PRINT_FLASHSTRING("srb1 ");
  DEBUG_SERIAL_PRINTFMT(srb1, BIN);
  DEBUG_SERIAL_PRINTLN();
#endif
  for(int i = MAX_IDENTICAL_BITS_SEQUENTIALLY/8; --i >= 0; )
    5dd0:	21 97       	sbiw	r28, 0x01	; 1
    5dd2:	d7 ff       	sbrs	r29, 7
    5dd4:	f1 cf       	rjmp	.-30     	; 0x5db8 <testEntropyGathering()+0xda>
    {
    if(srb1 != getSecureRandomByte()) { break; } // Stop as soon as a different value is obtained.
    AssertIsTrue(0 != i); // Generated too many identical values in a row. 
    }
  }
    5dd6:	df 91       	pop	r29
    5dd8:	cf 91       	pop	r28
    5dda:	1f 91       	pop	r17
    5ddc:	08 95       	ret

00005dde <loopUnitTest()>:



// To be called from loop() instead of main code when running unit tests.
// Tests generally flag an error and stop the test cycle with a call to panic() or error().
void loopUnitTest()
    5dde:	cf 93       	push	r28
    5de0:	df 93       	push	r29
    5de2:	c3 e0       	ldi	r28, 0x03	; 3
    5de4:	d0 e0       	ldi	r29, 0x00	; 0
  static int loopCount = 0;

  // Allow the terminal console to be brought up.
  for(int i = 3; i > 0; --i)
    {
    serialPrintAndFlush(F("Tests starting... "));
    5de6:	84 e5       	ldi	r24, 0x54	; 84
    5de8:	91 e0       	ldi	r25, 0x01	; 1
    5dea:	0e 94 42 1c 	call	0x3884	; 0x3884 <serialPrintAndFlush(__FlashStringHelper const*)>
    serialPrintAndFlush(i);
    5dee:	ce 01       	movw	r24, r28
    5df0:	6a e0       	ldi	r22, 0x0A	; 10
    5df2:	70 e0       	ldi	r23, 0x00	; 0
    5df4:	0e 94 10 1c 	call	0x3820	; 0x3820 <serialPrintAndFlush(int, int)>
    serialPrintlnAndFlush();
    5df8:	0e 94 00 1c 	call	0x3800	; 0x3800 <serialPrintlnAndFlush()>
    sleepLowPowerMs(1000);
    5dfc:	88 ee       	ldi	r24, 0xE8	; 232
    5dfe:	93 e0       	ldi	r25, 0x03	; 3
    5e00:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <sleepLowPowerMs(unsigned int)>
void loopUnitTest()
  {
  static int loopCount = 0;

  // Allow the terminal console to be brought up.
  for(int i = 3; i > 0; --i)
    5e04:	21 97       	sbiw	r28, 0x01	; 1
    5e06:	79 f7       	brne	.-34     	; 0x5de6 <loopUnitTest()+0x8>
    serialPrintAndFlush(F("Tests starting... "));
    serialPrintAndFlush(i);
    serialPrintlnAndFlush();
    sleepLowPowerMs(1000);
    }
  serialPrintlnAndFlush();
    5e08:	0e 94 00 1c 	call	0x3800	; 0x3800 <serialPrintlnAndFlush()>


  // Run the tests, fastest / newest / most-fragile / most-interesting first...
  testComputeRequiredTRVPercentOpen();
    5e0c:	0e 94 2d 1d 	call	0x3a5a	; 0x3a5a <testComputeRequiredTRVPercentOpen()>
  testTargetComputation();
    5e10:	0e 94 f1 1e 	call	0x3de2	; 0x3de2 <testTargetComputation()>
  testSensorMocking();
    5e14:	0e 94 4e 20 	call	0x409c	; 0x409c <testSensorMocking()>
  testModeControls();
    5e18:	0e 94 b0 21 	call	0x4360	; 0x4360 <testModeControls()>
  testJSONStats();
    5e1c:	0e 94 4b 22 	call	0x4496	; 0x4496 <testJSONStats()>
  testJSONForTX();
    5e20:	0e 94 a8 23 	call	0x4750	; 0x4750 <testJSONForTX()>
  testFullStatsMessageCoreEncDec();
    5e24:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <testFullStatsMessageCoreEncDec()>
  testCRC();
    5e28:	0e 94 27 28 	call	0x504e	; 0x504e <testCRC()>
  testTempCompand();
    5e2c:	0e 94 4d 28 	call	0x509a	; 0x509a <testTempCompand()>
  testRNG8();
    5e30:	0e 94 a8 28 	call	0x5150	; 0x5150 <testRNG8()>
  testEntropyGathering();
    5e34:	0e 94 6f 2e 	call	0x5cde	; 0x5cde <testEntropyGathering()>
  testRTCPersist();
    5e38:	0e 94 e5 28 	call	0x51ca	; 0x51ca <testRTCPersist()>
  testEEPROM();
    5e3c:	0e 94 8d 1c 	call	0x391a	; 0x391a <testEEPROM()>
  testQuartiles();
    5e40:	0e 94 11 29 	call	0x5222	; 0x5222 <testQuartiles()>
  testSmoothStatsValue();
    5e44:	0e 94 60 29 	call	0x52c0	; 0x52c0 <testSmoothStatsValue()>
  testSleepUntilSubCycleTime();
    5e48:	0e 94 29 2e 	call	0x5c52	; 0x5c52 <testSleepUntilSubCycleTime()>
  testFHTEncoding();
    5e4c:	0e 94 7f 29 	call	0x52fe	; 0x52fe <testFHTEncoding()>
  testFHTEncodingHeadAndTail();
    5e50:	0e 94 df 2a 	call	0x55be	; 0x55be <testFHTEncodingHeadAndTail()>

  // Sensor tests.
  // May need to be disabled if, for example, running in a simulator or on a partial board.
  // Should not involve anything too complex from the normal run-time, such as interrupts.
#if !defined(DISABLE_SENSOR_UNIT_TESTS)
  testTempSensor();
    5e54:	0e 94 f0 2d 	call	0x5be0	; 0x5be0 <testTempSensor()>
  testInternalTempSensor();
    5e58:	0e 94 03 2e 	call	0x5c06	; 0x5c06 <testInternalTempSensor()>
  testSupplyVoltageMonitor();
    5e5c:	0e 94 15 2e 	call	0x5c2a	; 0x5c2a <testSupplyVoltageMonitor()>
#endif


  // Announce successful loop completion and count.
  ++loopCount;
    5e60:	80 91 e9 02 	lds	r24, 0x02E9
    5e64:	90 91 ea 02 	lds	r25, 0x02EA
    5e68:	01 96       	adiw	r24, 0x01	; 1
    5e6a:	90 93 ea 02 	sts	0x02EA, r25
    5e6e:	80 93 e9 02 	sts	0x02E9, r24
  serialPrintlnAndFlush();
    5e72:	0e 94 00 1c 	call	0x3800	; 0x3800 <serialPrintlnAndFlush()>
  serialPrintAndFlush(F("%%% All tests completed OK, round "));
    5e76:	81 e3       	ldi	r24, 0x31	; 49
    5e78:	91 e0       	ldi	r25, 0x01	; 1
    5e7a:	0e 94 42 1c 	call	0x3884	; 0x3884 <serialPrintAndFlush(__FlashStringHelper const*)>
  serialPrintAndFlush(loopCount);
    5e7e:	80 91 e9 02 	lds	r24, 0x02E9
    5e82:	90 91 ea 02 	lds	r25, 0x02EA
    5e86:	6a e0       	ldi	r22, 0x0A	; 10
    5e88:	70 e0       	ldi	r23, 0x00	; 0
    5e8a:	0e 94 10 1c 	call	0x3820	; 0x3820 <serialPrintAndFlush(int, int)>
  serialPrintlnAndFlush();
    5e8e:	0e 94 00 1c 	call	0x3800	; 0x3800 <serialPrintlnAndFlush()>
  serialPrintlnAndFlush();
    5e92:	0e 94 00 1c 	call	0x3800	; 0x3800 <serialPrintlnAndFlush()>
  serialPrintlnAndFlush();
    5e96:	0e 94 00 1c 	call	0x3800	; 0x3800 <serialPrintlnAndFlush()>
  // Briefly flash the LED once to indicate successful completion of the tests.
  // (Panic/failure causes repeated rapid flash by contrast, and a hang may result in no flashes.)
  LED_HEATCALL_ON();
    5e9a:	5c 98       	cbi	0x0b, 4	; 11
    5e9c:	80 e0       	ldi	r24, 0x00	; 0
    5e9e:	0e 94 da 13 	call	0x27b4	; 0x27b4 <nap(signed char)>
  tinyPause();
  LED_HEATCALL_OFF();
    5ea2:	5c 9a       	sbi	0x0b, 4	; 11
  // Help avoid tests spinning too fast even to see!
  // Also make panic() state flash clearly different to (faster than) this loop success/repeat.
  sleepLowPowerMs(2000);
    5ea4:	80 ed       	ldi	r24, 0xD0	; 208
    5ea6:	97 e0       	ldi	r25, 0x07	; 7
    5ea8:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <sleepLowPowerMs(unsigned int)>
  }
    5eac:	df 91       	pop	r29
    5eae:	cf 91       	pop	r28
    5eb0:	08 95       	ret

00005eb2 <global constructors keyed to _Z5panicv>:
  '/',
  __DATE__[0], __DATE__[1], __DATE__[2],
  '/',
  __DATE__[4], __DATE__[5],
  '\0'
  };
    5eb2:	82 e3       	ldi	r24, 0x32	; 50
    5eb4:	80 93 39 01 	sts	0x0139, r24
    5eb8:	90 e3       	ldi	r25, 0x30	; 48
    5eba:	90 93 3a 01 	sts	0x013A, r25
    5ebe:	81 e3       	ldi	r24, 0x31	; 49
    5ec0:	80 93 3b 01 	sts	0x013B, r24
    5ec4:	84 e3       	ldi	r24, 0x34	; 52
    5ec6:	80 93 3c 01 	sts	0x013C, r24
    5eca:	84 e4       	ldi	r24, 0x44	; 68
    5ecc:	80 93 3e 01 	sts	0x013E, r24
    5ed0:	85 e6       	ldi	r24, 0x65	; 101
    5ed2:	80 93 3f 01 	sts	0x013F, r24
    5ed6:	83 e6       	ldi	r24, 0x63	; 99
    5ed8:	80 93 40 01 	sts	0x0140, r24
    5edc:	83 e3       	ldi	r24, 0x33	; 51
    5ede:	80 93 42 01 	sts	0x0142, r24
    5ee2:	90 93 43 01 	sts	0x0143, r25
//us apparent: 1408
//us apparent: 3776
//us apparent: 2816
#endif
#endif
  }
    5ee6:	08 95       	ret

00005ee8 <loop>:
#endif

#if defined(ALT_MAIN_LOOP) // Run alternative main loop.
  loopAlt();
#elif defined(UNIT_TESTS) // Run unit tests *instead* of normal loop() code. 
  loopUnitTest();
    5ee8:	0e 94 ef 2e 	call	0x5dde	; 0x5dde <loopUnitTest()>
//us apparent: 1408
//us apparent: 3776
//us apparent: 2816
#endif
#endif
  }
    5eec:	08 95       	ret

00005eee <sleepLowPowerMs(unsigned int)>:
// This may be achieved in part by dynamically slowing the CPU clock if possible.
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed((((MIN_CPU_HZ * (ms)) + 2000) / 4000) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    5eee:	a0 e0       	ldi	r26, 0x00	; 0
    5ef0:	b0 e0       	ldi	r27, 0x00	; 0
    5ef2:	bc 01       	movw	r22, r24
    5ef4:	cd 01       	movw	r24, r26
    5ef6:	22 e1       	ldi	r18, 0x12	; 18
    5ef8:	3a e7       	ldi	r19, 0x7A	; 122
    5efa:	40 e0       	ldi	r20, 0x00	; 0
    5efc:	50 e0       	ldi	r21, 0x00	; 0
    5efe:	0e 94 ce 3b 	call	0x779c	; 0x779c <__mulsi3>
    5f02:	60 53       	subi	r22, 0x30	; 48
    5f04:	78 4f       	sbci	r23, 0xF8	; 248
    5f06:	8f 4f       	sbci	r24, 0xFF	; 255
    5f08:	9f 4f       	sbci	r25, 0xFF	; 255
    5f0a:	20 ea       	ldi	r18, 0xA0	; 160
    5f0c:	3f e0       	ldi	r19, 0x0F	; 15
    5f0e:	40 e0       	ldi	r20, 0x00	; 0
    5f10:	50 e0       	ldi	r21, 0x00	; 0
    5f12:	0e 94 42 3c 	call	0x7884	; 0x7884 <__divmodsi4>
    5f16:	da 01       	movw	r26, r20
    5f18:	c9 01       	movw	r24, r18
    5f1a:	02 97       	sbiw	r24, 0x02	; 2
    5f1c:	0e 94 bf 13 	call	0x277e	; 0x277e <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
    5f20:	08 95       	ret

00005f22 <posPOST(unsigned char, __FlashStringHelper const*)>:
//   * Two quick flashes from the Arduino bootloader then the LED comes on.
//   * Each of the 5 main sections of Power On Self Test is 1 second LED on, 0.5 second off, n short flashes separated by 0.25s off, then 0.5s off, then 1s on.
//     The value of n is 1, 2, 3, 4, 5.
//   * The LED should then go off except for optional faint flickers as the radio is being driven if set up to do so.
#define PP_OFF_MS 250
static void posPOST(const uint8_t position, const __FlashStringHelper *s)
    5f22:	ff 92       	push	r15
    5f24:	0f 93       	push	r16
    5f26:	1f 93       	push	r17
    5f28:	cf 93       	push	r28
    5f2a:	df 93       	push	r29
    5f2c:	f8 2e       	mov	r15, r24
    5f2e:	8b 01       	movw	r16, r22
  {
  sleepLowPowerMs(1000);
    5f30:	88 ee       	ldi	r24, 0xE8	; 232
    5f32:	93 e0       	ldi	r25, 0x03	; 3
    5f34:	0e 94 77 2f 	call	0x5eee	; 0x5eee <sleepLowPowerMs(unsigned int)>
#ifdef DEBUG
  DEBUG_SERIAL_PRINT_FLASHSTRING("posPOST: "); // Can only be used once serial is set up.
    5f38:	8b e1       	ldi	r24, 0x1B	; 27
    5f3a:	94 e0       	ldi	r25, 0x04	; 4
    5f3c:	0e 94 42 1c 	call	0x3884	; 0x3884 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(position);
    5f40:	cf 2d       	mov	r28, r15
    5f42:	d0 e0       	ldi	r29, 0x00	; 0
    5f44:	ce 01       	movw	r24, r28
    5f46:	6a e0       	ldi	r22, 0x0A	; 10
    5f48:	70 e0       	ldi	r23, 0x00	; 0
    5f4a:	0e 94 10 1c 	call	0x3820	; 0x3820 <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINT_FLASHSTRING(": ");
    5f4e:	88 e1       	ldi	r24, 0x18	; 24
    5f50:	94 e0       	ldi	r25, 0x04	; 4
    5f52:	0e 94 42 1c 	call	0x3884	; 0x3884 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(s);
    5f56:	c8 01       	movw	r24, r16
    5f58:	0e 94 42 1c 	call	0x3884	; 0x3884 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINTLN();
    5f5c:	0e 94 00 1c 	call	0x3800	; 0x3800 <serialPrintlnAndFlush()>
#else
  serialPrintlnAndFlush(s);
#endif
//  pinMode(LED_HEATCALL, OUTPUT);
  LED_HEATCALL_OFF();
    5f60:	5c 9a       	sbi	0x0b, 4	; 11

  // Skip much of lightshow if '0'/end/none position.
  if(position > 0)
    5f62:	ff 20       	and	r15, r15
    5f64:	89 f0       	breq	.+34     	; 0x5f88 <posPOST(unsigned char, __FlashStringHelper const*)+0x66>
    {
    sleepLowPowerMs(2*PP_OFF_MS); // TODO: use this time to gather entropy.
    5f66:	84 ef       	ldi	r24, 0xF4	; 244
    5f68:	91 e0       	ldi	r25, 0x01	; 1
    5f6a:	07 c0       	rjmp	.+14     	; 0x5f7a <posPOST(unsigned char, __FlashStringHelper const*)+0x58>
    for(int i = position; --i >= 0; )
      {
      LED_HEATCALL_ON();
    5f6c:	5c 98       	cbi	0x0b, 4	; 11
// Very tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define VERYTINY_PAUSE_MS 5
static void inline veryTinyPause() { sleepLowPowerMs(VERYTINY_PAUSE_MS); }
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define TINY_PAUSE_MS 15
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    5f6e:	80 e0       	ldi	r24, 0x00	; 0
    5f70:	0e 94 da 13 	call	0x27b4	; 0x27b4 <nap(signed char)>
      tinyPause();
      LED_HEATCALL_OFF();
    5f74:	5c 9a       	sbi	0x0b, 4	; 11
      sleepLowPowerMs(PP_OFF_MS); // TODO: use this time to gather entropy.
    5f76:	8a ef       	ldi	r24, 0xFA	; 250
    5f78:	90 e0       	ldi	r25, 0x00	; 0
    5f7a:	0e 94 77 2f 	call	0x5eee	; 0x5eee <sleepLowPowerMs(unsigned int)>

  // Skip much of lightshow if '0'/end/none position.
  if(position > 0)
    {
    sleepLowPowerMs(2*PP_OFF_MS); // TODO: use this time to gather entropy.
    for(int i = position; --i >= 0; )
    5f7e:	21 97       	sbiw	r28, 0x01	; 1
    5f80:	8f ef       	ldi	r24, 0xFF	; 255
    5f82:	cf 3f       	cpi	r28, 0xFF	; 255
    5f84:	d8 07       	cpc	r29, r24
    5f86:	91 f7       	brne	.-28     	; 0x5f6c <posPOST(unsigned char, __FlashStringHelper const*)+0x4a>
      LED_HEATCALL_OFF();
      sleepLowPowerMs(PP_OFF_MS); // TODO: use this time to gather entropy.
      }
    }

  sleepLowPowerMs(PP_OFF_MS); // TODO: use this time to gather entropy.
    5f88:	8a ef       	ldi	r24, 0xFA	; 250
    5f8a:	90 e0       	ldi	r25, 0x00	; 0
    5f8c:	0e 94 77 2f 	call	0x5eee	; 0x5eee <sleepLowPowerMs(unsigned int)>
  LED_HEATCALL_ON();
    5f90:	5c 98       	cbi	0x0b, 4	; 11
  sleepLowPowerMs(1000); // TODO: use this time to gather entropy.
    5f92:	88 ee       	ldi	r24, 0xE8	; 232
    5f94:	93 e0       	ldi	r25, 0x03	; 3
    5f96:	0e 94 77 2f 	call	0x5eee	; 0x5eee <sleepLowPowerMs(unsigned int)>
  }
    5f9a:	df 91       	pop	r29
    5f9c:	cf 91       	pop	r28
    5f9e:	1f 91       	pop	r17
    5fa0:	0f 91       	pop	r16
    5fa2:	ff 90       	pop	r15
    5fa4:	08 95       	ret

00005fa6 <serialPrintlnBuildVersion()>:
  };
// Version (code/board) information printed as one line to serial (with line-end, and flushed); machine- and human- parseable.
// Format: "board VXXXX REVY; code YYYY/Mmm/DD HH:MM:SS".
void serialPrintlnBuildVersion()
  {
  serialPrintAndFlush(F("board V0.2 REV"));
    5fa6:	8e e6       	ldi	r24, 0x6E	; 110
    5fa8:	94 e0       	ldi	r25, 0x04	; 4
    5faa:	0e 94 42 1c 	call	0x3884	; 0x3884 <serialPrintAndFlush(__FlashStringHelper const*)>
  serialPrintAndFlush(V0p2_REV);
    5fae:	84 e0       	ldi	r24, 0x04	; 4
    5fb0:	90 e0       	ldi	r25, 0x00	; 0
    5fb2:	6a e0       	ldi	r22, 0x0A	; 10
    5fb4:	70 e0       	ldi	r23, 0x00	; 0
    5fb6:	0e 94 10 1c 	call	0x3820	; 0x3820 <serialPrintAndFlush(int, int)>
  serialPrintAndFlush(F("; code $Id: V0p2_Main.ino 3864 2014-12-10 21:01:54Z damonhd $ ")); // Expect SVN to substitute the Id keyword here with svn:keywords property set.
    5fba:	8f e2       	ldi	r24, 0x2F	; 47
    5fbc:	94 e0       	ldi	r25, 0x04	; 4
    5fbe:	0e 94 42 1c 	call	0x3884	; 0x3884 <serialPrintAndFlush(__FlashStringHelper const*)>
  serialPrintAndFlush(_YYYYMmmDD);
    5fc2:	89 e3       	ldi	r24, 0x39	; 57
    5fc4:	91 e0       	ldi	r25, 0x01	; 1
    5fc6:	0e 94 2c 1c 	call	0x3858	; 0x3858 <serialPrintAndFlush(char const*)>
  serialPrintAndFlush(F(" " __TIME__));
    5fca:	85 e2       	ldi	r24, 0x25	; 37
    5fcc:	94 e0       	ldi	r25, 0x04	; 4
    5fce:	0e 94 42 1c 	call	0x3884	; 0x3884 <serialPrintAndFlush(__FlashStringHelper const*)>
  serialPrintlnAndFlush();
    5fd2:	0e 94 00 1c 	call	0x3800	; 0x3800 <serialPrintlnAndFlush()>
  }
    5fd6:	08 95       	ret

00005fd8 <panic()>:
// Tries not to use lots of energy so as to keep distress beacon running for a while.
void panic()
  {
#ifdef USE_MODULE_RFM22RADIOSIMPLE
  // Reset radio and go into low-power mode.
  RFM22PowerOnInit();
    5fd8:	0e 94 0b 19 	call	0x3216	; 0x3216 <RFM22PowerOnInit()>
#endif
  // Power down almost everything else...
  minimisePowerWithoutSleep();
    5fdc:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <minimisePowerWithoutSleep()>
#ifdef LED_HEATCALL
  pinMode(LED_HEATCALL, OUTPUT);
#else
  pinMode(LED_HEATCALL_L, OUTPUT);
    5fe0:	84 e0       	ldi	r24, 0x04	; 4
    5fe2:	61 e0       	ldi	r22, 0x01	; 1
    5fe4:	0e 94 b2 36 	call	0x6d64	; 0x6d64 <pinMode>
#endif
  for( ; ; )
    {
    LED_HEATCALL_ON();
    5fe8:	5c 98       	cbi	0x0b, 4	; 11
    5fea:	80 e0       	ldi	r24, 0x00	; 0
    5fec:	0e 94 da 13 	call	0x27b4	; 0x27b4 <nap(signed char)>
    tinyPause();
    LED_HEATCALL_OFF();
    5ff0:	5c 9a       	sbi	0x0b, 4	; 11
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define MEDIUM_PAUSE_MS 60
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
// Big low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define BIG_PAUSE_MS 120
static void inline bigPause() { nap(WDTO_120MS); } // 120ms vs 288ms nominal for PICAXE V0.09 impl.
    5ff2:	83 e0       	ldi	r24, 0x03	; 3
    5ff4:	0e 94 da 13 	call	0x27b4	; 0x27b4 <nap(signed char)>
    5ff8:	f7 cf       	rjmp	.-18     	; 0x5fe8 <panic()+0x10>

00005ffa <panic(__FlashStringHelper const*)>:
  }

// Panic with fixed message.
void panic(const __FlashStringHelper *s)
  {
  serialPrintlnAndFlush(s); // May fail.
    5ffa:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <serialPrintlnAndFlush(__FlashStringHelper const*)>
  panic();  
    5ffe:	0e 94 ec 2f 	call	0x5fd8	; 0x5fd8 <panic()>
  }
    6002:	08 95       	ret

00006004 <optionalPOST()>:
  serialPrintlnAndFlush();
  }

// Optional Power-On Self Test routines.
// Aborts with a call to panic() if a test fails.
void optionalPOST()
    6004:	0f 93       	push	r16
    6006:	1f 93       	push	r17
    6008:	cf 93       	push	r28
    600a:	df 93       	push	r29
  {
  // Capture early sub-cycle time to help ensure that the 32768Hz async clock is actually running.
  const uint8_t earlySCT = getSubCycleTime();
    600c:	00 91 b2 00 	lds	r16, 0x00B2
#ifdef USE_MODULE_RFM22RADIOSIMPLE
#if !defined(RFM22_IS_ACTUALLY_RFM23) && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("(Using RFM22.)");
#endif
  // Initialise the radio, if configured, ASAP because it can suck a lot of power until properly initialised.
  RFM22PowerOnInit();
    6010:	0e 94 0b 19 	call	0x3216	; 0x3216 <RFM22PowerOnInit()>
  // Check that the radio is correctly connected; panic if not...
  if(!RFM22CheckConnected()) { panic(); }
    6014:	0e 94 af 19 	call	0x335e	; 0x335e <RFM22CheckConnected()>
    6018:	88 23       	and	r24, r24
    601a:	11 f4       	brne	.+4      	; 0x6020 <optionalPOST()+0x1c>
    601c:	0e 94 ec 2f 	call	0x5fd8	; 0x5fd8 <panic()>
  // Configure the radio.
  RFM22RegisterBlockSetup(FHT8V_RFM22_Reg_Values);
    6020:	88 e6       	ldi	r24, 0x68	; 104
    6022:	90 e0       	ldi	r25, 0x00	; 0
    6024:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <RFM22RegisterBlockSetup(unsigned char const (*) [2])>
  // Put the radio in low-power standby mode.
  RFM22ModeStandbyAndClearState();
    6028:	0e 94 67 19 	call	0x32ce	; 0x32ce <RFM22ModeStandbyAndClearState()>
#endif

//  posPOST(1, F("Radio OK, checking buttons/sensors and xtal"));

  // Check buttons not stuck in the activated position.
  if((fastDigitalRead(BUTTON_MODE_L) == LOW)
    602c:	4d 9b       	sbis	0x09, 5	; 9
    602e:	04 c0       	rjmp	.+8      	; 0x6038 <optionalPOST()+0x34>
    6030:	18 9b       	sbis	0x03, 0	; 3
    6032:	02 c0       	rjmp	.+4      	; 0x6038 <optionalPOST()+0x34>
    6034:	4b 99       	sbic	0x09, 3	; 9
    6036:	04 c0       	rjmp	.+8      	; 0x6040 <optionalPOST()+0x3c>
#endif
#if defined(BUTTON_LEARN2_L)
     || (fastDigitalRead(BUTTON_LEARN2_L) == LOW)
#endif
    )
    { panic(F("button stuck")); }
    6038:	8b e0       	ldi	r24, 0x0B	; 11
    603a:	94 e0       	ldi	r25, 0x04	; 4
    603c:	0e 94 fd 2f 	call	0x5ffa	; 0x5ffa <panic(__FlashStringHelper const*)>

  // Check that the 32768Hz async clock is actually running having done significant CPU-intensive work.
  const uint8_t laterSCT = getSubCycleTime();
    6040:	10 91 b2 00 	lds	r17, 0x00B2
  if(laterSCT == earlySCT)
    6044:	10 17       	cp	r17, r16
    6046:	b1 f4       	brne	.+44     	; 0x6074 <optionalPOST()+0x70>
    6048:	c4 e1       	ldi	r28, 0x14	; 20
    604a:	d0 e0       	ldi	r29, 0x00	; 0
    // Allow (an extra) 1s+ for 32768Hz crystal to start reliably, see: http://www.atmel.com/Images/doc1259.pdf
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("Sleeping to let 32768Hz clock start...");
#endif
    // Time spent here should not be a whole multiple of basic cycle time to avoid a spuriously-stationary async clock reading!
    for(int i = 20; (--i >= 0) && (earlySCT == getSubCycleTime()); )
    604c:	21 97       	sbiw	r28, 0x01	; 1
    604e:	8f ef       	ldi	r24, 0xFF	; 255
    6050:	cf 3f       	cpi	r28, 0xFF	; 255
    6052:	d8 07       	cpc	r29, r24
    6054:	c9 f0       	breq	.+50     	; 0x6088 <optionalPOST()+0x84>
    6056:	80 91 b2 00 	lds	r24, 0x00B2
    605a:	18 17       	cp	r17, r24
    605c:	a9 f4       	brne	.+42     	; 0x6088 <optionalPOST()+0x84>
      {
      sleepLowPowerMs(691);
    605e:	83 eb       	ldi	r24, 0xB3	; 179
    6060:	92 e0       	ldi	r25, 0x02	; 2
    6062:	0e 94 77 2f 	call	0x5eee	; 0x5eee <sleepLowPowerMs(unsigned int)>
      captureEntropy1();
    6066:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <captureEntropy1()>
    606a:	f0 cf       	rjmp	.-32     	; 0x604c <optionalPOST()+0x48>
    if(latestSCT == earlySCT)
      {
#if 0 && defined(DEBUG)
      DEBUG_SERIAL_PRINTLN_FLASHSTRING("32768Hz clock may not be running!");
#endif
      panic(F("Xtal dead")); // Async clock not running.
    606c:	81 e0       	ldi	r24, 0x01	; 1
    606e:	94 e0       	ldi	r25, 0x04	; 4
    6070:	0e 94 fd 2f 	call	0x5ffa	; 0x5ffa <panic(__FlashStringHelper const*)>
      }
    }
//  posPOST(2, F("slow RTC clock OK"));

  // Single POST checkpoint for speed.
  posPOST(0, F("Radio, xtal, buttons OK"));
    6074:	80 e0       	ldi	r24, 0x00	; 0
    6076:	69 ee       	ldi	r22, 0xE9	; 233
    6078:	73 e0       	ldi	r23, 0x03	; 3
    607a:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <posPOST(unsigned char, __FlashStringHelper const*)>
  }
    607e:	df 91       	pop	r29
    6080:	cf 91       	pop	r28
    6082:	1f 91       	pop	r17
    6084:	0f 91       	pop	r16
    6086:	08 95       	ret
      {
      sleepLowPowerMs(691);
      captureEntropy1();
      }
#endif
    const uint8_t latestSCT = getSubCycleTime();
    6088:	80 91 b2 00 	lds	r24, 0x00B2
    if(latestSCT == earlySCT)
    608c:	81 17       	cp	r24, r17
    608e:	91 f7       	brne	.-28     	; 0x6074 <optionalPOST()+0x70>
    6090:	ed cf       	rjmp	.-38     	; 0x606c <optionalPOST()+0x68>

00006092 <setup>:
  }


// Setup routine: runs once after reset.
// Does some limited board self-test and will panic() if anything is obviously broken.
void setup()
    6092:	0f 93       	push	r16
    6094:	1f 93       	push	r17
    6096:	df 93       	push	r29
    6098:	cf 93       	push	r28
    609a:	00 d0       	rcall	.+0      	; 0x609c <setup+0xa>
    609c:	cd b7       	in	r28, 0x3d	; 61
    609e:	de b7       	in	r29, 0x3e	; 62
  {
  // Set appropriate low-power states, interrupts, etc, ASAP.
  powerSetup();
    60a0:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <powerSetup()>
    60a4:	0e e0       	ldi	r16, 0x0E	; 14
    60a6:	10 e0       	ldi	r17, 0x00	; 0
    60a8:	33 c0       	rjmp	.+102    	; 0x6110 <setup+0x7e>
  {
  // Initialise all digital I/O to safe state ASAP and avoid floating lines where possible.
  // In absence of a specific alternative, drive low as an output to minimise consumption (eg from floating input).
  for(int i = 14; --i >= 0; ) // For all digital pins from 0 to 13 inclusive...
    {
    switch(i)
    60aa:	05 30       	cpi	r16, 0x05	; 5
    60ac:	11 05       	cpc	r17, r1
    60ae:	61 f1       	breq	.+88     	; 0x6108 <setup+0x76>
    60b0:	06 30       	cpi	r16, 0x06	; 6
    60b2:	11 05       	cpc	r17, r1
    60b4:	34 f4       	brge	.+12     	; 0x60c2 <setup+0x30>
    60b6:	17 fd       	sbrc	r17, 7
    60b8:	14 c0       	rjmp	.+40     	; 0x60e2 <setup+0x50>
    60ba:	04 30       	cpi	r16, 0x04	; 4
    60bc:	11 05       	cpc	r17, r1
    60be:	24 f1       	brlt	.+72     	; 0x6108 <setup+0x76>
    60c0:	17 c0       	rjmp	.+46     	; 0x60f0 <setup+0x5e>
    60c2:	09 30       	cpi	r16, 0x09	; 9
    60c4:	11 05       	cpc	r17, r1
    60c6:	e9 f0       	breq	.+58     	; 0x6102 <setup+0x70>
    60c8:	0a 30       	cpi	r16, 0x0A	; 10
    60ca:	11 05       	cpc	r17, r1
    60cc:	24 f4       	brge	.+8      	; 0x60d6 <setup+0x44>
    60ce:	08 30       	cpi	r16, 0x08	; 8
    60d0:	11 05       	cpc	r17, r1
    60d2:	39 f4       	brne	.+14     	; 0x60e2 <setup+0x50>
    60d4:	19 c0       	rjmp	.+50     	; 0x6108 <setup+0x76>
    60d6:	0a 30       	cpi	r16, 0x0A	; 10
    60d8:	11 05       	cpc	r17, r1
    60da:	b1 f0       	breq	.+44     	; 0x6108 <setup+0x76>
    60dc:	0c 30       	cpi	r16, 0x0C	; 12
    60de:	11 05       	cpc	r17, r1
    60e0:	99 f0       	breq	.+38     	; 0x6108 <setup+0x76>
      {
      // Low output is good safe low-power default.
      default: { digitalWrite(i, LOW); pinMode(i, OUTPUT); break; }
    60e2:	80 2f       	mov	r24, r16
    60e4:	60 e0       	ldi	r22, 0x00	; 0
    60e6:	0e 94 f1 36 	call	0x6de2	; 0x6de2 <digitalWrite>
    60ea:	80 2f       	mov	r24, r16
    60ec:	61 e0       	ldi	r22, 0x01	; 1
    60ee:	0e c0       	rjmp	.+28     	; 0x610c <setup+0x7a>
      // Switch main UI LED on for the rest of initialisation...
#ifdef LED_HEATCALL
      case LED_HEATCALL: { pinMode(LED_HEATCALL, OUTPUT); digitalWrite(LED_HEATCALL, HIGH); break; }
#endif
#ifdef LED_HEATCALL_L
      case LED_HEATCALL_L: { pinMode(LED_HEATCALL_L, OUTPUT); digitalWrite(LED_HEATCALL_L, LOW); break; }
    60f0:	84 e0       	ldi	r24, 0x04	; 4
    60f2:	61 e0       	ldi	r22, 0x01	; 1
    60f4:	0e 94 b2 36 	call	0x6d64	; 0x6d64 <pinMode>
    60f8:	84 e0       	ldi	r24, 0x04	; 4
    60fa:	60 e0       	ldi	r22, 0x00	; 0
    60fc:	0e 94 f1 36 	call	0x6de2	; 0x6de2 <digitalWrite>
    6100:	07 c0       	rjmp	.+14     	; 0x6110 <setup+0x7e>
#endif

#ifdef PIN_RFM_NIRQ 
      // Set as input to avoid contention current.
      case PIN_RFM_NIRQ: { pinMode(PIN_RFM_NIRQ, INPUT); break; }
    6102:	89 e0       	ldi	r24, 0x09	; 9
    6104:	60 e0       	ldi	r22, 0x00	; 0
    6106:	02 c0       	rjmp	.+4      	; 0x610c <setup+0x7a>
#ifdef PIN_SERIAL_RX
      // Weak TX and RX pull-up empirically found to produce lowest leakage current
      // when 2xAA NiMH battery powered and connected to TTL-232R-3V3 USB lead.
      case PIN_SERIAL_RX: case PIN_SERIAL_TX:
#endif
        { pinMode(i, INPUT_PULLUP); break; }
    6108:	80 2f       	mov	r24, r16
    610a:	62 e0       	ldi	r22, 0x02	; 2
    610c:	0e 94 b2 36 	call	0x6d64	; 0x6d64 <pinMode>
// Call this ASAP in setup() to configure I/O safely for the board, avoid pins floating, etc.
static inline void IOSetup()
  {
  // Initialise all digital I/O to safe state ASAP and avoid floating lines where possible.
  // In absence of a specific alternative, drive low as an output to minimise consumption (eg from floating input).
  for(int i = 14; --i >= 0; ) // For all digital pins from 0 to 13 inclusive...
    6110:	01 50       	subi	r16, 0x01	; 1
    6112:	10 40       	sbci	r17, 0x00	; 0
    6114:	17 ff       	sbrs	r17, 7
    6116:	c9 cf       	rjmp	.-110    	; 0x60aa <setup+0x18>
    }

#ifdef MOTOR_DRIVE_ML
  // Weakly pull up both motor REV7 H-bridge driver lines by default.
  // Safe for all boards and may reduce parasitic floating power consumption on non-REV7 boards.
  pinMode(MOTOR_DRIVE_ML, INPUT_PULLUP);
    6118:	80 e1       	ldi	r24, 0x10	; 16
    611a:	62 e0       	ldi	r22, 0x02	; 2
    611c:	0e 94 b2 36 	call	0x6d64	; 0x6d64 <pinMode>
  pinMode(MOTOR_DRIVE_MR, INPUT_PULLUP);
    6120:	81 e1       	ldi	r24, 0x11	; 17
    6122:	62 e0       	ldi	r22, 0x02	; 2
    6124:	0e 94 b2 36 	call	0x6d64	; 0x6d64 <pinMode>

  // IO setup for safety, eg to avoid pins floating.
  IOSetup();

  // Restore previous RTC state if available.
  restoreRTC();
    6128:	0e 94 0b 1a 	call	0x3416	; 0x3416 <restoreRTC()>
  // TODO: consider code to calibrate the internal RC oscillator against the xtal, eg to keep serial comms happy, eg http://www.avrfreaks.net/index.php?name=PNphpBB2&file=printview&t=36237&start=0

  serialPrintAndFlush(F("\r\nOpenTRV booting: ")); // Leading CRLF to clear leading junk, eg from bootloader.
    612c:	85 ed       	ldi	r24, 0xD5	; 213
    612e:	93 e0       	ldi	r25, 0x03	; 3
    6130:	0e 94 42 1c 	call	0x3884	; 0x3884 <serialPrintAndFlush(__FlashStringHelper const*)>
    serialPrintlnBuildVersion();
    6134:	0e 94 d3 2f 	call	0x5fa6	; 0x5fa6 <serialPrintlnBuildVersion()>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    6138:	f9 99       	sbic	0x1f, 1	; 31
    613a:	fe cf       	rjmp	.-4      	; 0x6138 <setup+0xa6>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    613c:	86 e0       	ldi	r24, 0x06	; 6
    613e:	90 e0       	ldi	r25, 0x00	; 0
    6140:	92 bd       	out	0x22, r25	; 34
    6142:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    6144:	f8 9a       	sbi	0x1f, 0	; 31
    6146:	10 b5       	in	r17, 0x20	; 32
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    6148:	f9 99       	sbic	0x1f, 1	; 31
    614a:	fe cf       	rjmp	.-4      	; 0x6148 <setup+0xb6>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    614c:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    614e:	86 e0       	ldi	r24, 0x06	; 6
    6150:	90 e0       	ldi	r25, 0x00	; 0
    6152:	92 bd       	out	0x22, r25	; 34
    6154:	81 bd       	out	0x21, r24	; 33

  // Count resets to detect unexpected crashes/restarts.
  const uint8_t oldResetCount = eeprom_read_byte((uint8_t *)EE_START_RESET_COUNT);
  eeprom_write_byte((uint8_t *)EE_START_RESET_COUNT, 1 + oldResetCount);
    6156:	1f 5f       	subi	r17, 0xFF	; 255
#endif
    EEDR = __value;
    6158:	10 bd       	out	0x20, r17	; 32
    615a:	11 50       	subi	r17, 0x01	; 1
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    615c:	0f b6       	in	r0, 0x3f	; 63
    615e:	f8 94       	cli
    6160:	fa 9a       	sbi	0x1f, 2	; 31
    6162:	f9 9a       	sbi	0x1f, 1	; 31
    6164:	0f be       	out	0x3f, r0	; 63

#if defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("DEBUG build");
    6166:	89 ec       	ldi	r24, 0xC9	; 201
    6168:	93 e0       	ldi	r25, 0x03	; 3
    616a:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif
#if defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("Resets: ");
    616e:	80 ec       	ldi	r24, 0xC0	; 192
    6170:	93 e0       	ldi	r25, 0x03	; 3
    6172:	0e 94 42 1c 	call	0x3884	; 0x3884 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(oldResetCount);
    6176:	81 2f       	mov	r24, r17
    6178:	90 e0       	ldi	r25, 0x00	; 0
    617a:	6a e0       	ldi	r22, 0x0A	; 10
    617c:	70 e0       	ldi	r23, 0x00	; 0
    617e:	0e 94 10 1c 	call	0x3820	; 0x3820 <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    6182:	0e 94 00 1c 	call	0x3800	; 0x3800 <serialPrintlnAndFlush()>
    DEBUG_SERIAL_PRINTLN();
    }
#endif
#if defined(DEBUG)
  // Compute approx free RAM: see http://jeelabs.org/2011/05/22/atmega-memory-use/
  DEBUG_SERIAL_PRINT_FLASHSTRING("Free RAM: ");
    6186:	85 eb       	ldi	r24, 0xB5	; 181
    6188:	93 e0       	ldi	r25, 0x03	; 3
    618a:	0e 94 42 1c 	call	0x3884	; 0x3884 <serialPrintAndFlush(__FlashStringHelper const*)>
  extern int __heap_start, *__brkval;
  int x;
  DEBUG_SERIAL_PRINT((int) &x - (__brkval == 0 ? (int) &__heap_start : (int) __brkval));
    618e:	80 91 74 04 	lds	r24, 0x0474
    6192:	90 91 75 04 	lds	r25, 0x0475
    6196:	00 97       	sbiw	r24, 0x00	; 0
    6198:	11 f0       	breq	.+4      	; 0x619e <setup+0x10c>
    619a:	9c 01       	movw	r18, r24
    619c:	02 c0       	rjmp	.+4      	; 0x61a2 <setup+0x110>
    619e:	28 e7       	ldi	r18, 0x78	; 120
    61a0:	34 e0       	ldi	r19, 0x04	; 4
    61a2:	ce 01       	movw	r24, r28
    61a4:	01 96       	adiw	r24, 0x01	; 1
    61a6:	82 1b       	sub	r24, r18
    61a8:	93 0b       	sbc	r25, r19
    61aa:	6a e0       	ldi	r22, 0x0A	; 10
    61ac:	70 e0       	ldi	r23, 0x00	; 0
    61ae:	0e 94 10 1c 	call	0x3820	; 0x3820 <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    61b2:	0e 94 00 1c 	call	0x3800	; 0x3800 <serialPrintlnAndFlush()>
#endif
#if defined(ALT_MAIN_LOOP)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("ALTERNATE MAIN LOOP...");
#elif defined(UNIT_TESTS)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("UNIT TESTS...");
    61b6:	87 ea       	ldi	r24, 0xA7	; 167
    61b8:	93 e0       	ldi	r25, 0x03	; 3
    61ba:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <serialPrintlnAndFlush(__FlashStringHelper const*)>
// POST may take too long and do unwanted things,
// especially for non-standard hardware setup.
#if defined(ALT_MAIN_LOOP)
  POSTalt(); // Do alternate POST and setup if required.
#else
  optionalPOST();
    61be:	0e 94 02 30 	call	0x6004	; 0x6004 <optionalPOST()>


  // Ensure that the unique node ID is set up (mainly on first use).
  // Have one attempt (don't want to stress an already failing EEPROM) to force-reset if not good, then panic.
  // Needs to have had entropy gathered, etc.
  if(!ensureIDCreated())
    61c2:	80 e0       	ldi	r24, 0x00	; 0
    61c4:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <ensureIDCreated(bool)>
    61c8:	88 23       	and	r24, r24
    61ca:	49 f4       	brne	.+18     	; 0x61de <setup+0x14c>
    {
    if(!ensureIDCreated(true)) // Force reset.
    61cc:	81 e0       	ldi	r24, 0x01	; 1
    61ce:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <ensureIDCreated(bool)>
    61d2:	88 23       	and	r24, r24
    61d4:	21 f4       	brne	.+8      	; 0x61de <setup+0x14c>
      { panic(F("Bad ID and cannot reset.")); }
    61d6:	8e e8       	ldi	r24, 0x8E	; 142
    61d8:	93 e0       	ldi	r25, 0x03	; 3
    61da:	0e 94 fd 2f 	call	0x5ffa	; 0x5ffa <panic(__FlashStringHelper const*)>
    }


  // Initialised: turn heatcall UI LED off.
//  pinMode(LED_HEATCALL, OUTPUT);
  LED_HEATCALL_OFF();
    61de:	5c 9a       	sbi	0x0b, 4	; 11
  // Report initial status.
  serialStatusReport();
  // Do OpenTRV-specific (late) setup.
  setupOpenTRV();
#endif
  }
    61e0:	0f 90       	pop	r0
    61e2:	0f 90       	pop	r0
    61e4:	cf 91       	pop	r28
    61e6:	df 91       	pop	r29
    61e8:	1f 91       	pop	r17
    61ea:	0f 91       	pop	r16
    61ec:	08 95       	ret

000061ee <AmbientLight::preferredPollInterval_s() const>:
    // Potentially expensive/slow.
    // Not thread-safe nor usable within ISRs (Interrupt Service Routines).
    virtual uint8_t read();

    // Preferred poll interval (in seconds); should bve called at constant rate, usually 1/60s.
    virtual uint8_t preferredPollInterval_s() const { return(60); }
    61ee:	8c e3       	ldi	r24, 0x3C	; 60
    61f0:	08 95       	ret

000061f2 <AmbientLight::tag() const>:

    // Returns a suggested (JSON) tag/field/key name including units of get(); NULL means no recommended tag.
    // The lifetime of the pointed-to text must be at least that of the Sensor instance.
    virtual const char *tag() const { return("L"); }
    61f2:	8a e2       	ldi	r24, 0x2A	; 42
    61f4:	91 e0       	ldi	r25, 0x01	; 1
    61f6:	08 95       	ret

000061f8 <AmbientLight::_TEST_set_multi_(unsigned int, bool)>:
    bool isRoomDark() const { return(!isRoomLitFlag); }

#ifdef UNIT_TESTS
    // Set new value(s) for unit test only.
    // Makes this more usable as a mock for testing other components.
    virtual void _TEST_set_multi_(uint16_t newRawValue, bool newRoomLitFlag)
    61f8:	fc 01       	movw	r30, r24
      { rawValue = newRawValue; value = newRawValue >> 2; isRoomLitFlag = newRoomLitFlag; }
    61fa:	74 83       	std	Z+4, r23	; 0x04
    61fc:	63 83       	std	Z+3, r22	; 0x03
    61fe:	76 95       	lsr	r23
    6200:	67 95       	ror	r22
    6202:	76 95       	lsr	r23
    6204:	67 95       	ror	r22
    6206:	62 83       	std	Z+2, r22	; 0x02
    6208:	45 83       	std	Z+5, r20	; 0x05
    620a:	08 95       	ret

0000620c <RoomTemperatureC16::preferredPollInterval_s() const>:
    // Not thread-safe nor usable within ISRs (Interrupt Service Routines).
    virtual int read();

    // Preferred poll interval (in seconds).
    // This should be called at a regular rate, usually 1/60, so make stats such as velocity measurement easier.
    virtual uint8_t preferredPollInterval_s() const { return(60); }
    620c:	8c e3       	ldi	r24, 0x3C	; 60
    620e:	08 95       	ret

00006210 <RoomTemperatureC16::get() const>:

    // Return last value fetched by read(); undefined before first read().
    // Fast.
    // Not thread-safe nor usable within ISRs (Interrupt Service Routines).
    virtual int get() const { return(value); }
    6210:	fc 01       	movw	r30, r24
    6212:	82 81       	ldd	r24, Z+2	; 0x02
    6214:	93 81       	ldd	r25, Z+3	; 0x03
    6216:	08 95       	ret

00006218 <RoomTemperatureC16::tag() const>:

    // Returns a suggested (JSON) tag/field/key name including units of get(); NULL means no recommended tag.
    // The lifetime of the pointed-to text must be at least that of the Sensor instance.
    virtual const char *tag() const { return("T|C16"); }
    6218:	8c e2       	ldi	r24, 0x2C	; 44
    621a:	91 e0       	ldi	r25, 0x01	; 1
    621c:	08 95       	ret

0000621e <HumiditySensorSHT21::isValid(unsigned char) const>:
    // Potentially expensive/slow.
    // Not thread-safe nor usable within ISRs (Interrupt Service Routines).
    virtual uint8_t read();

    // Returns true if the sensor reading value passed is potentially valid, ie in range [0,100].
    virtual bool isValid(const uint8_t value) const { return(value <= 100); }
    621e:	80 e0       	ldi	r24, 0x00	; 0
    6220:	65 36       	cpi	r22, 0x65	; 101
    6222:	08 f4       	brcc	.+2      	; 0x6226 <HumiditySensorSHT21::isValid(unsigned char) const+0x8>
    6224:	81 e0       	ldi	r24, 0x01	; 1
    6226:	08 95       	ret

00006228 <HumiditySensorSHT21::tag() const>:

    // Returns a suggested (JSON) tag/field/key name including units of get(); NULL means no recommended tag.
    // The lifetime of the pointed-to text must be at least that of the Sensor instance.
    virtual const char *tag() const { return("H|%"); }
    6228:	82 e3       	ldi	r24, 0x32	; 50
    622a:	91 e0       	ldi	r25, 0x01	; 1
    622c:	08 95       	ret

0000622e <Sensor<int>::isValid(int) const>:
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual T get() const = 0;

    // Returns true if this sensor reading value passed is potentially valid, eg in-range.
    // Default is to always return true, ie all values potentially valid.
    virtual bool isValid(T value) const { return(true); }
    622e:	81 e0       	ldi	r24, 0x01	; 1
    6230:	08 95       	ret

00006232 <Sensor<int>::handleInterruptSimple()>:
    // Must be fast and ISR (Interrupt Service Routine) safe.
    // Returns true if interrupt was successfully handled and cleared
    // else another interrupt handler in the chain may be called
    // to attempt to clear the interrupt.
    // By default does nothing (and returns false).
    virtual bool handleInterruptSimple() { return(false); }
    6232:	80 e0       	ldi	r24, 0x00	; 0
    6234:	08 95       	ret

00006236 <Sensor<int>::begin()>:

    // Begin access to this sensor if applicable and not already begun.
    // Returns true if it needed to be begun.
    // Allows logic to end() if required at the end of a block, etc.
    // Defaults to do nothing (and return false).
    virtual bool begin() { return(false); }
    6236:	80 e0       	ldi	r24, 0x00	; 0
    6238:	08 95       	ret

0000623a <Sensor<int>::isAvailable() const>:

    // Returns true if this sensor is currently available.
    // True by default unless implementation overrides.
    // For those sensors that need starting this will be false before begin().
    virtual bool isAvailable() const { return(true); }
    623a:	81 e0       	ldi	r24, 0x01	; 1
    623c:	08 95       	ret

0000623e <Sensor<int>::end()>:

    // End access to this sensor if applicable and not already ended.
    // Returns true if it needed to be ended.
    // Defaults to do nothing (and return false).
    virtual bool end() { return(false); }
    623e:	80 e0       	ldi	r24, 0x00	; 0
    6240:	08 95       	ret

00006242 <global constructors keyed to _ZN12AmbientLight4readEv>:
  {
  protected:
      volatile uint8_t value;

      // By default initialise the value to zero.
      SimpleTSUint8Sensor() : value(0) { }
    6242:	10 92 ed 02 	sts	0x02ED, r1
// http://www.vishay.com/docs/84154/appnotesensors.pdf

#ifndef OMIT_MODULE_LDROCCUPANCYDETECTION
// Sensor for ambient light level; 0 is dark, 255 is bright.
class AmbientLight : public SimpleTSUint8Sensor
  {
    6246:	81 ee       	ldi	r24, 0xE1	; 225
    6248:	91 e0       	ldi	r25, 0x01	; 1
    624a:	90 93 ec 02 	sts	0x02EC, r25
    624e:	80 93 eb 02 	sts	0x02EB, r24
      // Can initialise to a chosen value.
      SimpleTSUint8Sensor(const uint8_t v) : value(v) { }
    6252:	8f ef       	ldi	r24, 0xFF	; 255
    6254:	80 93 f3 02 	sts	0x02F3, r24
    // True if RH% is high, with hysteresis.
    // Marked volatile for thread-safe lock-free access.
    volatile bool highWithHyst;

  public:
    HumiditySensorSHT21() : SimpleTSUint8Sensor(255), highWithHyst(false) { }
    6258:	8b ec       	ldi	r24, 0xCB	; 203
    625a:	91 e0       	ldi	r25, 0x01	; 1
    625c:	90 93 f2 02 	sts	0x02F2, r25
    6260:	80 93 f1 02 	sts	0x02F1, r24
    6264:	10 92 f4 02 	sts	0x02F4, r1
  private:
    // Room temperature in 16*C, eg 1 is 1/16 C, 32 is 2C, -64 is -4C.
    int value;

  public:
    RoomTemperatureC16() : value(0) { }
    6268:	85 eb       	ldi	r24, 0xB5	; 181
    626a:	91 e0       	ldi	r25, 0x01	; 1
    626c:	90 93 f6 02 	sts	0x02F6, r25
    6270:	80 93 f5 02 	sts	0x02F5, r24
    6274:	10 92 f8 02 	sts	0x02F8, r1
    6278:	10 92 f7 02 	sts	0x02F7, r1
  {
  protected:
      volatile uint8_t value;

      // By default initialise the value to zero.
      SimpleTSUint8Sensor() : value(0) { }
    627c:	10 92 fb 02 	sts	0x02FB, r1
    // Raw pot value [0,1023] if extra precision is required.
    uint16_t raw;

  public:
    // Initialise to cautious values.
    TemperaturePot() : raw(0) { }
    6280:	8f e9       	ldi	r24, 0x9F	; 159
    6282:	91 e0       	ldi	r25, 0x01	; 1
    6284:	90 93 fa 02 	sts	0x02FA, r25
    6288:	80 93 f9 02 	sts	0x02F9, r24
    628c:	10 92 fd 02 	sts	0x02FD, r1
    6290:	10 92 fc 02 	sts	0x02FC, r1

  return(value);
  }

// Singleton implementation/instance.
TemperaturePot TempPot;
    6294:	08 95       	ret

00006296 <TemperaturePot::read()>:

// Force a read/poll of the temperature pot and return the value sensed [0,255] (cold to hot).
// Potentially expensive/slow.
// This value has some hysteresis applied to reduce noise.
// Not thread-safe nor usable within ISRs (Interrupt Service Routines).
uint8_t TemperaturePot::read()
    6296:	0f 93       	push	r16
    6298:	1f 93       	push	r17
    629a:	cf 93       	push	r28
    629c:	df 93       	push	r29
    629e:	ec 01       	movw	r28, r24
  {
  // No need to wait for voltage to stablise as pot top end directly driven by IO_POWER_UP.
  power_intermittent_peripherals_enable(false);
    62a0:	80 e0       	ldi	r24, 0x00	; 0
    62a2:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <power_intermittent_peripherals_enable(bool)>
  const uint16_t tpRaw = analogueNoiseReducedRead(TEMP_POT_AIN, DEFAULT); // Vcc reference.
    62a6:	81 e0       	ldi	r24, 0x01	; 1
    62a8:	90 e0       	ldi	r25, 0x00	; 0
    62aa:	61 e0       	ldi	r22, 0x01	; 1
    62ac:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <analogueNoiseReducedRead(int, unsigned char)>
    62b0:	8c 01       	movw	r16, r24
  power_intermittent_peripherals_disable();
    62b2:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <power_intermittent_peripherals_disable()>

#if defined(TEMP_POT_REVERSE)
  const uint16_t tp = TEMP_POT_RAW_MAX - tpRaw; // Travel is in opposite direction to natural!
    62b6:	8f ef       	ldi	r24, 0xFF	; 255
    62b8:	93 e0       	ldi	r25, 0x03	; 3
    62ba:	80 1b       	sub	r24, r16
    62bc:	91 0b       	sbc	r25, r17
#endif

  // TODO: capture entropy from changed LS bits esp if reduced-noise version doesn't change.

  // Store new raw value.
  raw = tp;
    62be:	9c 83       	std	Y+4, r25	; 0x04
    62c0:	8b 83       	std	Y+3, r24	; 0x03

  // Capture reduced-noise value with a little hysteresis.
  const uint8_t oldValue = value;
    62c2:	3a 81       	ldd	r19, Y+2	; 0x02
  const uint8_t shifted = tp >> 2; // Keep signed to avoid wrap-round confusion.
    62c4:	96 95       	lsr	r25
    62c6:	87 95       	ror	r24
    62c8:	96 95       	lsr	r25
    62ca:	87 95       	ror	r24
    62cc:	28 2f       	mov	r18, r24
  if(((shifted > oldValue) && (shifted - oldValue >= RN_HYST)) ||
    62ce:	38 17       	cp	r19, r24
    62d0:	20 f4       	brcc	.+8      	; 0x62da <TemperaturePot::read()+0x44>
    62d2:	90 e0       	ldi	r25, 0x00	; 0
    62d4:	83 1b       	sub	r24, r19
    62d6:	91 09       	sbc	r25, r1
    62d8:	06 c0       	rjmp	.+12     	; 0x62e6 <TemperaturePot::read()+0x50>
    62da:	83 17       	cp	r24, r19
    62dc:	f8 f4       	brcc	.+62     	; 0x631c <TemperaturePot::read()+0x86>
    62de:	83 2f       	mov	r24, r19
    62e0:	90 e0       	ldi	r25, 0x00	; 0
    62e2:	82 1b       	sub	r24, r18
    62e4:	91 09       	sbc	r25, r1
    62e6:	04 97       	sbiw	r24, 0x04	; 4
    62e8:	cc f0       	brlt	.+50     	; 0x631c <TemperaturePot::read()+0x86>
     ((shifted < oldValue) && (oldValue - shifted >= RN_HYST)))
    {
    const uint8_t rn = (uint8_t) shifted;
    // Atomically store reduced-noise normalised value.
    value = rn;
    62ea:	2a 83       	std	Y+2, r18	; 0x02
    // Possible to get reasonable functionality without using MODE button.
    //
    // NOTE: without ignoredFirst this will also respond to the initial position of the pot
    //   as the first reading is taken, ie may force to WARM or BAKE.
    static bool ignoredFirst;
    if(!ignoredFirst) { ignoredFirst = true; }
    62ec:	80 91 fe 02 	lds	r24, 0x02FE
    62f0:	88 23       	and	r24, r24
    62f2:	21 f4       	brne	.+8      	; 0x62fc <TemperaturePot::read()+0x66>
    62f4:	81 e0       	ldi	r24, 0x01	; 1
    62f6:	80 93 fe 02 	sts	0x02FE, r24
    62fa:	10 c0       	rjmp	.+32     	; 0x631c <TemperaturePot::read()+0x86>
    else
      {
      // Force FROST mode when right at bottom of dial.
      if(rn < RN_FRBO) { setWarmModeDebounced(false); }
    62fc:	28 30       	cpi	r18, 0x08	; 8
    62fe:	10 f4       	brcc	.+4      	; 0x6304 <TemperaturePot::read()+0x6e>
    6300:	80 e0       	ldi	r24, 0x00	; 0
    6302:	08 c0       	rjmp	.+16     	; 0x6314 <TemperaturePot::read()+0x7e>
#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
      // Start BAKE mode when dial turned up to top.
      else if(rn > (255-RN_FRBO)) { startBakeDebounced(); }
    6304:	28 3f       	cpi	r18, 0xF8	; 248
    6306:	18 f0       	brcs	.+6      	; 0x630e <TemperaturePot::read()+0x78>
    6308:	0e 94 52 03 	call	0x6a4	; 0x6a4 <startBakeDebounced()>
    630c:	05 c0       	rjmp	.+10     	; 0x6318 <TemperaturePot::read()+0x82>
#endif
      // Force WARM mode if pot/temperature turned up.
      else if(rn > oldValue) { setWarmModeDebounced(true); }
    630e:	32 17       	cp	r19, r18
    6310:	18 f4       	brcc	.+6      	; 0x6318 <TemperaturePot::read()+0x82>
    6312:	81 e0       	ldi	r24, 0x01	; 1
    6314:	0e 94 3f 03 	call	0x67e	; 0x67e <setWarmModeDebounced(bool)>

      // Note user operation of pot.
      markUIControlUsed(); 
    6318:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <markUIControlUsed()>
  DEBUG_SERIAL_PRINT_FLASHSTRING(", rn: ");
  DEBUG_SERIAL_PRINT(tempPotReducedNoise);
  DEBUG_SERIAL_PRINTLN();
#endif

  return(value);
    631c:	8a 81       	ldd	r24, Y+2	; 0x02
  }
    631e:	df 91       	pop	r29
    6320:	cf 91       	pop	r28
    6322:	1f 91       	pop	r17
    6324:	0f 91       	pop	r16
    6326:	08 95       	ret

00006328 <SHT21_init()>:
// Set true once SHT21 has been initialised.
static volatile bool SHT21_initialised;

// Initialise/configure SHT21, once only generally.
// TWI must already be powered up.
static void SHT21_init()
    6328:	1f 93       	push	r17
  {
#if defined(SHT21_USE_REDUCED_PRECISION)
  // Soft reset in order to sample at reduced precision.
  Wire.beginTransmission(SHT21_I2C_ADDR);
    632a:	87 e4       	ldi	r24, 0x47	; 71
    632c:	93 e0       	ldi	r25, 0x03	; 3
    632e:	60 e4       	ldi	r22, 0x40	; 64
    6330:	70 e0       	ldi	r23, 0x00	; 0
    6332:	0e 94 65 33 	call	0x66ca	; 0x66ca <TwoWire::beginTransmission(int)>
  Wire.write((byte) SHT21_I2C_CMD_USERREG); // Select control register.
    6336:	87 e4       	ldi	r24, 0x47	; 71
    6338:	93 e0       	ldi	r25, 0x03	; 3
    633a:	67 ee       	ldi	r22, 0xE7	; 231
    633c:	0e 94 e7 33 	call	0x67ce	; 0x67ce <TwoWire::write(unsigned char)>
  Wire.endTransmission();
    6340:	87 e4       	ldi	r24, 0x47	; 71
    6342:	93 e0       	ldi	r25, 0x03	; 3
    6344:	0e 94 2a 34 	call	0x6854	; 0x6854 <TwoWire::endTransmission()>
  Wire.requestFrom(SHT21_I2C_ADDR, 1);
    6348:	87 e4       	ldi	r24, 0x47	; 71
    634a:	93 e0       	ldi	r25, 0x03	; 3
    634c:	60 e4       	ldi	r22, 0x40	; 64
    634e:	70 e0       	ldi	r23, 0x00	; 0
    6350:	41 e0       	ldi	r20, 0x01	; 1
    6352:	50 e0       	ldi	r21, 0x00	; 0
    6354:	0e 94 3b 34 	call	0x6876	; 0x6876 <TwoWire::requestFrom(int, int)>
    6358:	04 c0       	rjmp	.+8      	; 0x6362 <SHT21_init()+0x3a>
  while(Wire.available() < 1)
    {
    // Wait for data, but avoid rolling over the end of a minor cycle...
    if(getSubCycleTime() >= GSCT_MAX-2)
    635a:	80 91 b2 00 	lds	r24, 0x00B2
    635e:	8d 3f       	cpi	r24, 0xFD	; 253
    6360:	28 f5       	brcc	.+74     	; 0x63ac <SHT21_init()+0x84>
  // Soft reset in order to sample at reduced precision.
  Wire.beginTransmission(SHT21_I2C_ADDR);
  Wire.write((byte) SHT21_I2C_CMD_USERREG); // Select control register.
  Wire.endTransmission();
  Wire.requestFrom(SHT21_I2C_ADDR, 1);
  while(Wire.available() < 1)
    6362:	87 e4       	ldi	r24, 0x47	; 71
    6364:	93 e0       	ldi	r25, 0x03	; 3
    6366:	0e 94 6f 33 	call	0x66de	; 0x66de <TwoWire::available()>
    636a:	18 16       	cp	r1, r24
    636c:	19 06       	cpc	r1, r25
    636e:	ac f7       	brge	.-22     	; 0x635a <SHT21_init()+0x32>
    if(getSubCycleTime() >= GSCT_MAX-2)
      {
      return; // Failed, and not initialised.
      }
    }
  const uint8_t curUR = Wire.read();
    6370:	87 e4       	ldi	r24, 0x47	; 71
    6372:	93 e0       	ldi	r25, 0x03	; 3
    6374:	0e 94 78 33 	call	0x66f0	; 0x66f0 <TwoWire::read()>
    6378:	18 2f       	mov	r17, r24
//  DEBUG_SERIAL_PRINTFMT(curUR, HEX);
//  DEBUG_SERIAL_PRINTLN();

  // Preserve reserved bits (3, 4, 5) and sample 8-bit RH (for for 1%) and 12-bit temp (for 1/16C).
  const uint8_t newUR = (curUR & 0x38) | 3;
  Wire.beginTransmission(SHT21_I2C_ADDR);
    637a:	87 e4       	ldi	r24, 0x47	; 71
    637c:	93 e0       	ldi	r25, 0x03	; 3
    637e:	60 e4       	ldi	r22, 0x40	; 64
    6380:	70 e0       	ldi	r23, 0x00	; 0
    6382:	0e 94 65 33 	call	0x66ca	; 0x66ca <TwoWire::beginTransmission(int)>
  Wire.write((byte) SHT21_I2C_CMD_USERREG); // Select control register.
    6386:	87 e4       	ldi	r24, 0x47	; 71
    6388:	93 e0       	ldi	r25, 0x03	; 3
    638a:	67 ee       	ldi	r22, 0xE7	; 231
    638c:	0e 94 e7 33 	call	0x67ce	; 0x67ce <TwoWire::write(unsigned char)>
  Wire.write((byte) newUR);
    6390:	18 73       	andi	r17, 0x38	; 56
    6392:	13 60       	ori	r17, 0x03	; 3
    6394:	87 e4       	ldi	r24, 0x47	; 71
    6396:	93 e0       	ldi	r25, 0x03	; 3
    6398:	61 2f       	mov	r22, r17
    639a:	0e 94 e7 33 	call	0x67ce	; 0x67ce <TwoWire::write(unsigned char)>
  Wire.endTransmission();
    639e:	87 e4       	ldi	r24, 0x47	; 71
    63a0:	93 e0       	ldi	r25, 0x03	; 3
    63a2:	0e 94 2a 34 	call	0x6854	; 0x6854 <TwoWire::endTransmission()>

#endif
  SHT21_initialised = true;
    63a6:	81 e0       	ldi	r24, 0x01	; 1
    63a8:	80 93 ff 02 	sts	0x02FF, r24
  }
    63ac:	1f 91       	pop	r17
    63ae:	08 95       	ret

000063b0 <RoomTemperatureC16::read()>:

// Singleton implementation/instance.
RoomTemperatureC16 TemperatureC16;

// Temperature read uses/selects one of the implementations/sensors.
int RoomTemperatureC16::read()
    63b0:	ef 92       	push	r14
    63b2:	ff 92       	push	r15
    63b4:	0f 93       	push	r16
    63b6:	1f 93       	push	r17
    63b8:	cf 93       	push	r28
    63ba:	df 93       	push	r29
    63bc:	7c 01       	movw	r14, r24
// This may consume significant power and time.
// Probably no need to do this more than (say) once per minute.
// The first read will initialise the device as necessary and leave it in a low-power mode afterwards.
static int Sensor_SHT21_readTemperatureC16()
  {
  const bool neededPowerUp = powerUpTWIIfDisabled();
    63be:	0e 94 e7 16 	call	0x2dce	; 0x2dce <powerUpTWIIfDisabled()>
    63c2:	08 2f       	mov	r16, r24

  // Initialise/config if necessary.
  if(!SHT21_initialised) { SHT21_init(); }
    63c4:	80 91 ff 02 	lds	r24, 0x02FF
    63c8:	88 23       	and	r24, r24
    63ca:	11 f4       	brne	.+4      	; 0x63d0 <RoomTemperatureC16::read()+0x20>
    63cc:	0e 94 94 31 	call	0x6328	; 0x6328 <SHT21_init()>
  // Max RH measurement time:
  //   * 14-bit: 85ms
  //   * 12-bit: 22ms
  //   * 11-bit: 11ms
  // Use blocking data fetch for now.
  Wire.beginTransmission(SHT21_I2C_ADDR);
    63d0:	87 e4       	ldi	r24, 0x47	; 71
    63d2:	93 e0       	ldi	r25, 0x03	; 3
    63d4:	60 e4       	ldi	r22, 0x40	; 64
    63d6:	70 e0       	ldi	r23, 0x00	; 0
    63d8:	0e 94 65 33 	call	0x66ca	; 0x66ca <TwoWire::beginTransmission(int)>
  Wire.write((byte) SHT21_I2C_CMD_TEMP_HOLD); // Select control register.
    63dc:	87 e4       	ldi	r24, 0x47	; 71
    63de:	93 e0       	ldi	r25, 0x03	; 3
    63e0:	63 ee       	ldi	r22, 0xE3	; 227
    63e2:	0e 94 e7 33 	call	0x67ce	; 0x67ce <TwoWire::write(unsigned char)>
#if defined(SHT21_USE_REDUCED_PRECISION)
  nap(WDTO_30MS); // Should cover 12-bit conversion (22ms).
    63e6:	81 e0       	ldi	r24, 0x01	; 1
    63e8:	0e 94 da 13 	call	0x27b4	; 0x27b4 <nap(signed char)>
#else
  sleepLowPowerMs(90); // Should be plenty for slowest (14-bit) conversion (85ms).
#endif
  //delay(100);
  Wire.endTransmission();
    63ec:	87 e4       	ldi	r24, 0x47	; 71
    63ee:	93 e0       	ldi	r25, 0x03	; 3
    63f0:	0e 94 2a 34 	call	0x6854	; 0x6854 <TwoWire::endTransmission()>
  Wire.requestFrom(SHT21_I2C_ADDR, 3);
    63f4:	87 e4       	ldi	r24, 0x47	; 71
    63f6:	93 e0       	ldi	r25, 0x03	; 3
    63f8:	60 e4       	ldi	r22, 0x40	; 64
    63fa:	70 e0       	ldi	r23, 0x00	; 0
    63fc:	43 e0       	ldi	r20, 0x03	; 3
    63fe:	50 e0       	ldi	r21, 0x00	; 0
    6400:	0e 94 3b 34 	call	0x6876	; 0x6876 <TwoWire::requestFrom(int, int)>
    6404:	07 c0       	rjmp	.+14     	; 0x6414 <RoomTemperatureC16::read()+0x64>
  while(Wire.available() < 3)
    {
    // Wait for data, but avoid rolling over the end of a minor cycle...
    if(getSubCycleTime() >= GSCT_MAX-2)
    6406:	80 91 b2 00 	lds	r24, 0x00B2
    640a:	8d 3f       	cpi	r24, 0xFD	; 253
    640c:	18 f0       	brcs	.+6      	; 0x6414 <RoomTemperatureC16::read()+0x64>
    640e:	60 e0       	ldi	r22, 0x00	; 0
    6410:	70 e0       	ldi	r23, 0x00	; 0
    6412:	2b c0       	rjmp	.+86     	; 0x646a <RoomTemperatureC16::read()+0xba>
  sleepLowPowerMs(90); // Should be plenty for slowest (14-bit) conversion (85ms).
#endif
  //delay(100);
  Wire.endTransmission();
  Wire.requestFrom(SHT21_I2C_ADDR, 3);
  while(Wire.available() < 3)
    6414:	87 e4       	ldi	r24, 0x47	; 71
    6416:	93 e0       	ldi	r25, 0x03	; 3
    6418:	0e 94 6f 33 	call	0x66de	; 0x66de <TwoWire::available()>
    641c:	03 97       	sbiw	r24, 0x03	; 3
    641e:	9c f3       	brlt	.-26     	; 0x6406 <RoomTemperatureC16::read()+0x56>
    if(getSubCycleTime() >= GSCT_MAX-2)
      {
      return(0); // Failure value: may be able to to better.
      }
    }
  uint16_t rawTemp = (Wire.read() << 8);
    6420:	87 e4       	ldi	r24, 0x47	; 71
    6422:	93 e0       	ldi	r25, 0x03	; 3
    6424:	0e 94 78 33 	call	0x66f0	; 0x66f0 <TwoWire::read()>
    6428:	18 2f       	mov	r17, r24
  rawTemp |= (Wire.read() & 0xfc); // Clear status ls bits.
    642a:	87 e4       	ldi	r24, 0x47	; 71
    642c:	93 e0       	ldi	r25, 0x03	; 3
    642e:	0e 94 78 33 	call	0x66f0	; 0x66f0 <TwoWire::read()>
    6432:	ec 01       	movw	r28, r24

  // Power down TWI ASAP.
  if(neededPowerUp) { powerDownTWI(); }
    6434:	00 23       	and	r16, r16
    6436:	11 f0       	breq	.+4      	; 0x643c <RoomTemperatureC16::read()+0x8c>
    6438:	0e 94 91 15 	call	0x2b22	; 0x2b22 <powerDownTWI()>
    if(getSubCycleTime() >= GSCT_MAX-2)
      {
      return(0); // Failure value: may be able to to better.
      }
    }
  uint16_t rawTemp = (Wire.read() << 8);
    643c:	71 2f       	mov	r23, r17
    643e:	60 e0       	ldi	r22, 0x00	; 0
  if(neededPowerUp) { powerDownTWI(); }

  // TODO: capture entropy if (transformed) value has changed.

  // Nominal formula: C = -46.85 + ((175.72*raw) / (1L << 16));
  const int c16 = -750 + ((5623L * rawTemp) >> 17); // FIXME: find a faster approximation...
    6440:	cc 7f       	andi	r28, 0xFC	; 252
    6442:	d0 70       	andi	r29, 0x00	; 0
    6444:	6c 2b       	or	r22, r28
    6446:	7d 2b       	or	r23, r29
    6448:	80 e0       	ldi	r24, 0x00	; 0
    644a:	90 e0       	ldi	r25, 0x00	; 0
    644c:	27 ef       	ldi	r18, 0xF7	; 247
    644e:	35 e1       	ldi	r19, 0x15	; 21
    6450:	40 e0       	ldi	r20, 0x00	; 0
    6452:	50 e0       	ldi	r21, 0x00	; 0
    6454:	0e 94 ce 3b 	call	0x779c	; 0x779c <__mulsi3>
    6458:	31 e1       	ldi	r19, 0x11	; 17
    645a:	95 95       	asr	r25
    645c:	87 95       	ror	r24
    645e:	77 95       	ror	r23
    6460:	67 95       	ror	r22
    6462:	3a 95       	dec	r19
    6464:	d1 f7       	brne	.-12     	; 0x645a <RoomTemperatureC16::read()+0xaa>
    6466:	6e 5e       	subi	r22, 0xEE	; 238
    6468:	72 40       	sbci	r23, 0x02	; 2
  const int raw = Sensor_SHT21_readTemperatureC16();
#else
  const int raw = TMP112_readTemperatureC16();
#endif

  value = raw;
    646a:	f7 01       	movw	r30, r14
    646c:	73 83       	std	Z+3, r23	; 0x03
    646e:	62 83       	std	Z+2, r22	; 0x02
  return(value);
  }
    6470:	cb 01       	movw	r24, r22
    6472:	df 91       	pop	r29
    6474:	cf 91       	pop	r28
    6476:	1f 91       	pop	r17
    6478:	0f 91       	pop	r16
    647a:	ff 90       	pop	r15
    647c:	ef 90       	pop	r14
    647e:	08 95       	ret

00006480 <HumiditySensorSHT21::read()>:
// Measure and return the current relative humidity in %; range [0,100] and 255 for error.
// This may consume significant power and time.
// Probably no need to do this more than (say) once per minute.
// The first read will initialise the device as necessary and leave it in a low-power mode afterwards.
// Returns 255 (~0) in case of error.
uint8_t HumiditySensorSHT21::read()
    6480:	ff 92       	push	r15
    6482:	0f 93       	push	r16
    6484:	1f 93       	push	r17
    6486:	cf 93       	push	r28
    6488:	df 93       	push	r29
    648a:	ec 01       	movw	r28, r24
  {
  const bool neededPowerUp = powerUpTWIIfDisabled();
    648c:	0e 94 e7 16 	call	0x2dce	; 0x2dce <powerUpTWIIfDisabled()>
    6490:	18 2f       	mov	r17, r24

  // Initialise/config if necessary.
  if(!SHT21_initialised) { SHT21_init(); }
    6492:	80 91 ff 02 	lds	r24, 0x02FF
    6496:	88 23       	and	r24, r24
    6498:	11 f4       	brne	.+4      	; 0x649e <HumiditySensorSHT21::read()+0x1e>
    649a:	0e 94 94 31 	call	0x6328	; 0x6328 <SHT21_init()>
  // Get RH%...
  // Max RH measurement time:
  //   * 12-bit: 29ms
  //   *  8-bit:  4ms
  // Use blocking data fetch for now.
  Wire.beginTransmission(SHT21_I2C_ADDR);
    649e:	87 e4       	ldi	r24, 0x47	; 71
    64a0:	93 e0       	ldi	r25, 0x03	; 3
    64a2:	60 e4       	ldi	r22, 0x40	; 64
    64a4:	70 e0       	ldi	r23, 0x00	; 0
    64a6:	0e 94 65 33 	call	0x66ca	; 0x66ca <TwoWire::beginTransmission(int)>
  Wire.write((byte) SHT21_I2C_CMD_RH_HOLD); // Select control register.
    64aa:	87 e4       	ldi	r24, 0x47	; 71
    64ac:	93 e0       	ldi	r25, 0x03	; 3
    64ae:	65 ee       	ldi	r22, 0xE5	; 229
    64b0:	0e 94 e7 33 	call	0x67ce	; 0x67ce <TwoWire::write(unsigned char)>
// This may be achieved in part by dynamically slowing the CPU clock if possible.
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed((((MIN_CPU_HZ * (ms)) + 2000) / 4000) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    64b4:	85 e2       	ldi	r24, 0x25	; 37
    64b6:	90 e0       	ldi	r25, 0x00	; 0
    64b8:	0e 94 bf 13 	call	0x277e	; 0x277e <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
#if defined(SHT21_USE_REDUCED_PRECISION)
  sleepLowPowerMs(5); // Should cover 8-bit conversion (4ms).
#else
  nap(WDTO_30MS); // Should cover even 12-bit conversion (29ms).
#endif
  Wire.endTransmission();
    64bc:	87 e4       	ldi	r24, 0x47	; 71
    64be:	93 e0       	ldi	r25, 0x03	; 3
    64c0:	0e 94 2a 34 	call	0x6854	; 0x6854 <TwoWire::endTransmission()>
  Wire.requestFrom(SHT21_I2C_ADDR, 3);
    64c4:	87 e4       	ldi	r24, 0x47	; 71
    64c6:	93 e0       	ldi	r25, 0x03	; 3
    64c8:	60 e4       	ldi	r22, 0x40	; 64
    64ca:	70 e0       	ldi	r23, 0x00	; 0
    64cc:	43 e0       	ldi	r20, 0x03	; 3
    64ce:	50 e0       	ldi	r21, 0x00	; 0
    64d0:	0e 94 3b 34 	call	0x6876	; 0x6876 <TwoWire::requestFrom(int, int)>
    64d4:	06 c0       	rjmp	.+12     	; 0x64e2 <HumiditySensorSHT21::read()+0x62>
  while(Wire.available() < 3)
    {
    // Wait for data, but avoid rolling over the end of a minor cycle...
    if(getSubCycleTime() >= GSCT_MAX)
    64d6:	80 91 b2 00 	lds	r24, 0x00B2
    64da:	8f 3f       	cpi	r24, 0xFF	; 255
    64dc:	11 f4       	brne	.+4      	; 0x64e2 <HumiditySensorSHT21::read()+0x62>
    64de:	1f ef       	ldi	r17, 0xFF	; 255
    64e0:	3c c0       	rjmp	.+120    	; 0x655a <HumiditySensorSHT21::read()+0xda>
#else
  nap(WDTO_30MS); // Should cover even 12-bit conversion (29ms).
#endif
  Wire.endTransmission();
  Wire.requestFrom(SHT21_I2C_ADDR, 3);
  while(Wire.available() < 3)
    64e2:	87 e4       	ldi	r24, 0x47	; 71
    64e4:	93 e0       	ldi	r25, 0x03	; 3
    64e6:	0e 94 6f 33 	call	0x66de	; 0x66de <TwoWire::available()>
    64ea:	03 97       	sbiw	r24, 0x03	; 3
    64ec:	a4 f3       	brlt	.-24     	; 0x64d6 <HumiditySensorSHT21::read()+0x56>
      {
//      DEBUG_SERIAL_PRINTLN_FLASHSTRING("giving up");
      return(~0);
      }
    }
  const uint8_t rawRH = Wire.read();
    64ee:	87 e4       	ldi	r24, 0x47	; 71
    64f0:	93 e0       	ldi	r25, 0x03	; 3
    64f2:	0e 94 78 33 	call	0x66f0	; 0x66f0 <TwoWire::read()>
    64f6:	f8 2e       	mov	r15, r24
  const uint8_t rawRL = Wire.read();
    64f8:	87 e4       	ldi	r24, 0x47	; 71
    64fa:	93 e0       	ldi	r25, 0x03	; 3
    64fc:	0e 94 78 33 	call	0x66f0	; 0x66f0 <TwoWire::read()>
    6500:	08 2f       	mov	r16, r24

  // Power down TWI ASAP.
  if(neededPowerUp) { powerDownTWI(); }
    6502:	11 23       	and	r17, r17
    6504:	11 f0       	breq	.+4      	; 0x650a <HumiditySensorSHT21::read()+0x8a>
    6506:	0e 94 91 15 	call	0x2b22	; 0x2b22 <powerDownTWI()>

  const uint16_t raw = (((uint16_t)rawRH) << 8) | (rawRL & 0xfc); // Clear status ls bits.
  const uint8_t result = -6 + ((125L * raw) >> 16);
    650a:	60 2f       	mov	r22, r16
    650c:	70 e0       	ldi	r23, 0x00	; 0
    650e:	6c 7f       	andi	r22, 0xFC	; 252
    6510:	70 70       	andi	r23, 0x00	; 0
    6512:	3f 2d       	mov	r19, r15
    6514:	20 e0       	ldi	r18, 0x00	; 0
    6516:	62 2b       	or	r22, r18
    6518:	73 2b       	or	r23, r19
    651a:	80 e0       	ldi	r24, 0x00	; 0
    651c:	90 e0       	ldi	r25, 0x00	; 0
    651e:	2d e7       	ldi	r18, 0x7D	; 125
    6520:	30 e0       	ldi	r19, 0x00	; 0
    6522:	40 e0       	ldi	r20, 0x00	; 0
    6524:	50 e0       	ldi	r21, 0x00	; 0
    6526:	0e 94 ce 3b 	call	0x779c	; 0x779c <__mulsi3>
    652a:	bc 01       	movw	r22, r24
    652c:	99 27       	eor	r25, r25
    652e:	77 fd       	sbrc	r23, 7
    6530:	90 95       	com	r25
    6532:	89 2f       	mov	r24, r25
    6534:	16 2f       	mov	r17, r22
    6536:	16 50       	subi	r17, 0x06	; 6

  // Capture entropy from raw status bits
  // iff (transformed) reading has changed.
  if(value != result) { addEntropyToPool(rawRL ^ rawRH, 1); }
    6538:	8a 81       	ldd	r24, Y+2	; 0x02
    653a:	81 17       	cp	r24, r17
    653c:	29 f0       	breq	.+10     	; 0x6548 <HumiditySensorSHT21::read()+0xc8>
    653e:	80 2f       	mov	r24, r16
    6540:	8f 25       	eor	r24, r15
    6542:	61 e0       	ldi	r22, 0x01	; 1
    6544:	0e 94 c1 1b 	call	0x3782	; 0x3782 <addEntropyToPool(unsigned char, unsigned char)>

  value = result;
    6548:	1a 83       	std	Y+2, r17	; 0x02
  if(result > (HUMIDTY_HIGH_RHPC+HUMIDITY_EPSILON_RHPC)) { highWithHyst = true; }
    654a:	1c 34       	cpi	r17, 0x4C	; 76
    654c:	18 f0       	brcs	.+6      	; 0x6554 <HumiditySensorSHT21::read()+0xd4>
    654e:	81 e0       	ldi	r24, 0x01	; 1
    6550:	8b 83       	std	Y+3, r24	; 0x03
    6552:	03 c0       	rjmp	.+6      	; 0x655a <HumiditySensorSHT21::read()+0xda>
  else if(result < (HUMIDTY_HIGH_RHPC-HUMIDITY_EPSILON_RHPC)) { highWithHyst = false; }
    6554:	11 34       	cpi	r17, 0x41	; 65
    6556:	08 f4       	brcc	.+2      	; 0x655a <HumiditySensorSHT21::read()+0xda>
    6558:	1b 82       	std	Y+3, r1	; 0x03
  return(result);
  }
    655a:	81 2f       	mov	r24, r17
    655c:	df 91       	pop	r29
    655e:	cf 91       	pop	r28
    6560:	1f 91       	pop	r17
    6562:	0f 91       	pop	r16
    6564:	ff 90       	pop	r15
    6566:	08 95       	ret

00006568 <AmbientLight::read()>:
// Measure/store/return the current room ambient light levels in range [0,1023].
// This may consume significant power and time.
// Probably no need to do this more than (say) once per minute.
// This implementation expects LDR (1M dark resistance) from IO_POWER_UP to LDR_SENSOR_AIN and 100k to ground.
// (Not intended to be called from ISR.)
uint8_t AmbientLight::read()
    6568:	ef 92       	push	r14
    656a:	ff 92       	push	r15
    656c:	0f 93       	push	r16
    656e:	1f 93       	push	r17
    6570:	df 93       	push	r29
    6572:	cf 93       	push	r28
    6574:	cd b7       	in	r28, 0x3d	; 61
    6576:	de b7       	in	r29, 0x3e	; 62
    6578:	28 97       	sbiw	r28, 0x08	; 8
    657a:	0f b6       	in	r0, 0x3f	; 63
    657c:	f8 94       	cli
    657e:	de bf       	out	0x3e, r29	; 62
    6580:	0f be       	out	0x3f, r0	; 63
    6582:	cd bf       	out	0x3d, r28	; 61
    6584:	7c 01       	movw	r14, r24
  {
  power_intermittent_peripherals_enable(false); // No need to wait for anything to stablise as direct of IO_POWER_UP.
    6586:	80 e0       	ldi	r24, 0x00	; 0
    6588:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <power_intermittent_peripherals_enable(bool)>
  const uint16_t al0 = analogueNoiseReducedRead(LDR_SENSOR_AIN, ALREFERENCE);
    658c:	80 e0       	ldi	r24, 0x00	; 0
    658e:	90 e0       	ldi	r25, 0x00	; 0
    6590:	63 e0       	ldi	r22, 0x03	; 3
    6592:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <analogueNoiseReducedRead(int, unsigned char)>
#if defined(ADAPTIVE_THRESHOLD)
  uint16_t al;
  if(al0 >= ADAPTIVE_THRESHOLD)
    6596:	23 e0       	ldi	r18, 0x03	; 3
    6598:	80 38       	cpi	r24, 0x80	; 128
    659a:	92 07       	cpc	r25, r18
    659c:	10 f4       	brcc	.+4      	; 0x65a2 <AmbientLight::read()+0x3a>
    659e:	8c 01       	movw	r16, r24
    65a0:	37 c0       	rjmp	.+110    	; 0x6610 <AmbientLight::read()+0xa8>
    {
    const uint16_t al1 = analogueNoiseReducedRead(LDR_SENSOR_AIN, DEFAULT); // Vsupply reference.
    65a2:	80 e0       	ldi	r24, 0x00	; 0
    65a4:	90 e0       	ldi	r25, 0x00	; 0
    65a6:	61 e0       	ldi	r22, 0x01	; 1
    65a8:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <analogueNoiseReducedRead(int, unsigned char)>
    65ac:	8c 01       	movw	r16, r24
    Supply_mV.read();
    65ae:	81 ed       	ldi	r24, 0xD1	; 209
    65b0:	92 e0       	ldi	r25, 0x02	; 2
    65b2:	0e 94 de 14 	call	0x29bc	; 0x29bc <SupplyVoltageMilliVolts::read()>
    const uint16_t vbg = Supply_mV.getRawInv(); // Vbandgap wrt Vsupply.
    // Compute value in extended range up to ~1024 * Vsupply/Vbandgap.
    const uint16_t ale = ((al1 << 5) / ((vbg+16) >> 5)); // Faster int-only approximation to (int)((al1 * 1024L) / vbg)).
    65b6:	60 91 d3 02 	lds	r22, 0x02D3
    65ba:	70 91 d4 02 	lds	r23, 0x02D4
    65be:	60 5f       	subi	r22, 0xF0	; 240
    65c0:	7f 4f       	sbci	r23, 0xFF	; 255
    65c2:	f5 e0       	ldi	r31, 0x05	; 5
    65c4:	76 95       	lsr	r23
    65c6:	67 95       	ror	r22
    65c8:	fa 95       	dec	r31
    65ca:	e1 f7       	brne	.-8      	; 0x65c4 <AmbientLight::read()+0x5c>
    65cc:	c8 01       	movw	r24, r16
    65ce:	e5 e0       	ldi	r30, 0x05	; 5
    65d0:	88 0f       	add	r24, r24
    65d2:	99 1f       	adc	r25, r25
    65d4:	ea 95       	dec	r30
    65d6:	e1 f7       	brne	.-8      	; 0x65d0 <AmbientLight::read()+0x68>
    65d8:	0e 94 f9 3b 	call	0x77f2	; 0x77f2 <__udivmodhi4>
    65dc:	cb 01       	movw	r24, r22
    // Ensure that scale stays monotonic in face of calculation lumpiness, etc...
    // Scale all remaining space above threshold to new top value into remaining space.
    // TODO: ensure scaleFactor is a power of two for speed.
    const uint16_t scaleFactor = (2048 - ADAPTIVE_THRESHOLD) / (1024 - ADAPTIVE_THRESHOLD);
    al = fnmin(1023U,
        ADAPTIVE_THRESHOLD + fnmax(0U, ((ale - ADAPTIVE_THRESHOLD) / scaleFactor)));
    65de:	2f ef       	ldi	r18, 0xFF	; 255
    65e0:	33 e0       	ldi	r19, 0x03	; 3
    65e2:	3e 83       	std	Y+6, r19	; 0x06
    65e4:	2d 83       	std	Y+5, r18	; 0x05
    65e6:	1a 82       	std	Y+2, r1	; 0x02
    65e8:	19 82       	std	Y+1, r1	; 0x01
    65ea:	80 58       	subi	r24, 0x80	; 128
    65ec:	93 40       	sbci	r25, 0x03	; 3
    65ee:	69 e0       	ldi	r22, 0x09	; 9
    65f0:	70 e0       	ldi	r23, 0x00	; 0
    65f2:	0e 94 f9 3b 	call	0x77f2	; 0x77f2 <__udivmodhi4>
    65f6:	7c 83       	std	Y+4, r23	; 0x04
    65f8:	6b 83       	std	Y+3, r22	; 0x03
    65fa:	8b 01       	movw	r16, r22
    65fc:	00 58       	subi	r16, 0x80	; 128
    65fe:	1c 4f       	sbci	r17, 0xFC	; 252
    6600:	18 87       	std	Y+8, r17	; 0x08
    6602:	0f 83       	std	Y+7, r16	; 0x07




// Templated function versions of min/max that do not evaluate the arguments twice.
template <class T> const T& fnmin(const T& a, const T& b) { return((a>b)?b:a); }
    6604:	43 e0       	ldi	r20, 0x03	; 3
    6606:	0f 3f       	cpi	r16, 0xFF	; 255
    6608:	14 07       	cpc	r17, r20
    660a:	10 f0       	brcs	.+4      	; 0x6610 <AmbientLight::read()+0xa8>
    660c:	0f ef       	ldi	r16, 0xFF	; 255
    660e:	13 e0       	ldi	r17, 0x03	; 3
    }
  else { al = al0; }
#else
  const uint16_t al = al0;
#endif
  power_intermittent_peripherals_disable();
    6610:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <power_intermittent_peripherals_disable()>

  // Capture entropy from changed LS bits.
  if((uint8_t)al != (uint8_t)rawValue) { addEntropyToPool((uint8_t)al ^ (uint8_t)rawValue, 0); } // Claim zero entropy as may be forced by Eve.
    6614:	80 2f       	mov	r24, r16
    6616:	f7 01       	movw	r30, r14
    6618:	93 81       	ldd	r25, Z+3	; 0x03
    661a:	09 17       	cp	r16, r25
    661c:	21 f0       	breq	.+8      	; 0x6626 <AmbientLight::read()+0xbe>
    661e:	89 27       	eor	r24, r25
    6620:	60 e0       	ldi	r22, 0x00	; 0
    6622:	0e 94 c1 1b 	call	0x3782	; 0x3782 <addEntropyToPool(unsigned char, unsigned char)>

  // Adjust room-lit flag, with hysteresis.
  if(al <= LDR_THR_LOW)
    6626:	f1 e0       	ldi	r31, 0x01	; 1
    6628:	0f 30       	cpi	r16, 0x0F	; 15
    662a:	1f 07       	cpc	r17, r31
    662c:	18 f4       	brcc	.+6      	; 0x6634 <AmbientLight::read()+0xcc>
    { isRoomLitFlag = false; }
    662e:	f7 01       	movw	r30, r14
    6630:	15 82       	std	Z+5, r1	; 0x05
    6632:	1c c0       	rjmp	.+56     	; 0x666c <AmbientLight::read()+0x104>
  else if(al > LDR_THR_HIGH)
    6634:	f1 e0       	ldi	r31, 0x01	; 1
    6636:	01 39       	cpi	r16, 0x91	; 145
    6638:	1f 07       	cpc	r17, r31
    663a:	c0 f0       	brcs	.+48     	; 0x666c <AmbientLight::read()+0x104>
    {
    // Treat a sharp transition from dark to light as a possible/weak indication of occupancy, eg light flicked on.
    // Ignore trigger at start-up.
    static bool ignoreFirst;
    if(!ignoreFirst) { ignoreFirst = true; }
    663c:	80 91 00 03 	lds	r24, 0x0300
    6640:	88 23       	and	r24, r24
    6642:	21 f4       	brne	.+8      	; 0x664c <AmbientLight::read()+0xe4>
    6644:	81 e0       	ldi	r24, 0x01	; 1
    6646:	80 93 00 03 	sts	0x0300, r24
    664a:	0d c0       	rjmp	.+26     	; 0x6666 <AmbientLight::read()+0xfe>
    else if((!isRoomLitFlag) && (rawValue < LDR_THR_LOW)) { Occupancy.markAsPossiblyOccupied(); }
    664c:	f7 01       	movw	r30, r14
    664e:	85 81       	ldd	r24, Z+5	; 0x05
    6650:	88 23       	and	r24, r24
    6652:	49 f4       	brne	.+18     	; 0x6666 <AmbientLight::read()+0xfe>
    6654:	83 81       	ldd	r24, Z+3	; 0x03
    6656:	94 81       	ldd	r25, Z+4	; 0x04
    6658:	8e 50       	subi	r24, 0x0E	; 14
    665a:	91 40       	sbci	r25, 0x01	; 1
    665c:	20 f4       	brcc	.+8      	; 0x6666 <AmbientLight::read()+0xfe>
    665e:	86 e1       	ldi	r24, 0x16	; 22
    6660:	92 e0       	ldi	r25, 0x02	; 2
    6662:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <OccupancyTracker::markAsPossiblyOccupied()>
    isRoomLitFlag = true;
    6666:	81 e0       	ldi	r24, 0x01	; 1
    6668:	f7 01       	movw	r30, r14
    666a:	85 83       	std	Z+5, r24	; 0x05
    }

  // Store new value, raw and normalised.
  // Unconditionbally store raw value.
  rawValue = al;
    666c:	f7 01       	movw	r30, r14
    666e:	14 83       	std	Z+4, r17	; 0x04
    6670:	03 83       	std	Z+3, r16	; 0x03
  // Apply a little bit of noise reduction (hysteresis) to the normalised version.
  const uint8_t newValue = (uint8_t)(al >> 2);
    6672:	c8 01       	movw	r24, r16
    6674:	96 95       	lsr	r25
    6676:	87 95       	ror	r24
    6678:	96 95       	lsr	r25
    667a:	87 95       	ror	r24
    667c:	28 2f       	mov	r18, r24
  if(newValue != value)
    667e:	82 81       	ldd	r24, Z+2	; 0x02
    6680:	28 17       	cp	r18, r24
    6682:	a1 f0       	breq	.+40     	; 0x66ac <AmbientLight::read()+0x144>
    {
    const uint16_t oldRawImplied = ((uint16_t)value) << 2;
    6684:	82 81       	ldd	r24, Z+2	; 0x02
    6686:	90 e0       	ldi	r25, 0x00	; 0
    6688:	88 0f       	add	r24, r24
    668a:	99 1f       	adc	r25, r25
    668c:	88 0f       	add	r24, r24
    668e:	99 1f       	adc	r25, r25
    const uint16_t absDiff = (oldRawImplied > al) ? (oldRawImplied - al) : (al - oldRawImplied);
    6690:	08 17       	cp	r16, r24
    6692:	19 07       	cpc	r17, r25
    6694:	18 f4       	brcc	.+6      	; 0x669c <AmbientLight::read()+0x134>
    6696:	80 1b       	sub	r24, r16
    6698:	91 0b       	sbc	r25, r17
    669a:	04 c0       	rjmp	.+8      	; 0x66a4 <AmbientLight::read()+0x13c>
    669c:	a8 01       	movw	r20, r16
    669e:	48 1b       	sub	r20, r24
    66a0:	59 0b       	sbc	r21, r25
    66a2:	ca 01       	movw	r24, r20
    if(absDiff > 2) { value = newValue; }
    66a4:	03 97       	sbiw	r24, 0x03	; 3
    66a6:	10 f0       	brcs	.+4      	; 0x66ac <AmbientLight::read()+0x144>
    66a8:	f7 01       	movw	r30, r14
    66aa:	22 83       	std	Z+2, r18	; 0x02
  DEBUG_SERIAL_PRINT_FLASHSTRING("isRoomLit: ");
  DEBUG_SERIAL_PRINT(isRoomLitFlag);
  DEBUG_SERIAL_PRINTLN();
#endif

  return(value);
    66ac:	f7 01       	movw	r30, r14
    66ae:	82 81       	ldd	r24, Z+2	; 0x02
  }
    66b0:	28 96       	adiw	r28, 0x08	; 8
    66b2:	0f b6       	in	r0, 0x3f	; 63
    66b4:	f8 94       	cli
    66b6:	de bf       	out	0x3e, r29	; 62
    66b8:	0f be       	out	0x3f, r0	; 63
    66ba:	cd bf       	out	0x3d, r28	; 61
    66bc:	cf 91       	pop	r28
    66be:	df 91       	pop	r29
    66c0:	1f 91       	pop	r17
    66c2:	0f 91       	pop	r16
    66c4:	ff 90       	pop	r15
    66c6:	ef 90       	pop	r14
    66c8:	08 95       	ret

000066ca <TwoWire::beginTransmission(int)>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    66ca:	81 e0       	ldi	r24, 0x01	; 1
    66cc:	80 93 46 03 	sts	0x0346, r24
  // set address of targeted slave
  txAddress = address;
    66d0:	60 93 23 03 	sts	0x0323, r22
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    66d4:	10 92 44 03 	sts	0x0344, r1
  txBufferLength = 0;
    66d8:	10 92 45 03 	sts	0x0345, r1
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
}
    66dc:	08 95       	ret

000066de <TwoWire::available()>:
}

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
    66de:	20 91 22 03 	lds	r18, 0x0322
    66e2:	30 e0       	ldi	r19, 0x00	; 0
    66e4:	80 91 21 03 	lds	r24, 0x0321
    66e8:	28 1b       	sub	r18, r24
    66ea:	31 09       	sbc	r19, r1
{
  return rxBufferLength - rxBufferIndex;
}
    66ec:	c9 01       	movw	r24, r18
    66ee:	08 95       	ret

000066f0 <TwoWire::read()>:
int TwoWire::read(void)
{
  int value = -1;
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    66f0:	40 91 21 03 	lds	r20, 0x0321
    66f4:	80 91 22 03 	lds	r24, 0x0322
    66f8:	48 17       	cp	r20, r24
    66fa:	18 f0       	brcs	.+6      	; 0x6702 <TwoWire::read()+0x12>
    66fc:	2f ef       	ldi	r18, 0xFF	; 255
    66fe:	3f ef       	ldi	r19, 0xFF	; 255
    6700:	0a c0       	rjmp	.+20     	; 0x6716 <TwoWire::read()+0x26>
    value = rxBuffer[rxBufferIndex];
    6702:	e4 2f       	mov	r30, r20
    6704:	f0 e0       	ldi	r31, 0x00	; 0
    6706:	ef 5f       	subi	r30, 0xFF	; 255
    6708:	fc 4f       	sbci	r31, 0xFC	; 252
    670a:	80 81       	ld	r24, Z
    670c:	28 2f       	mov	r18, r24
    670e:	30 e0       	ldi	r19, 0x00	; 0
    ++rxBufferIndex;
    6710:	4f 5f       	subi	r20, 0xFF	; 255
    6712:	40 93 21 03 	sts	0x0321, r20
  }

  return value;
}
    6716:	c9 01       	movw	r24, r18
    6718:	08 95       	ret

0000671a <TwoWire::peek()>:
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
  
  if(rxBufferIndex < rxBufferLength){
    671a:	e0 91 21 03 	lds	r30, 0x0321
    671e:	80 91 22 03 	lds	r24, 0x0322
    6722:	e8 17       	cp	r30, r24
    6724:	18 f0       	brcs	.+6      	; 0x672c <TwoWire::peek()+0x12>
    6726:	ef ef       	ldi	r30, 0xFF	; 255
    6728:	ff ef       	ldi	r31, 0xFF	; 255
    672a:	06 c0       	rjmp	.+12     	; 0x6738 <TwoWire::peek()+0x1e>
    value = rxBuffer[rxBufferIndex];
    672c:	f0 e0       	ldi	r31, 0x00	; 0
    672e:	ef 5f       	subi	r30, 0xFF	; 255
    6730:	fc 4f       	sbci	r31, 0xFC	; 252
    6732:	80 81       	ld	r24, Z
    6734:	e8 2f       	mov	r30, r24
    6736:	f0 e0       	ldi	r31, 0x00	; 0
  }

  return value;
}
    6738:	cf 01       	movw	r24, r30
    673a:	08 95       	ret

0000673c <TwoWire::flush()>:

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
    673c:	08 95       	ret

0000673e <global constructors keyed to _ZN7TwoWire8rxBufferE>:
    673e:	10 92 4a 03 	sts	0x034A, r1
    6742:	10 92 49 03 	sts	0x0349, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    6746:	88 ee       	ldi	r24, 0xE8	; 232
    6748:	93 e0       	ldi	r25, 0x03	; 3
    674a:	a0 e0       	ldi	r26, 0x00	; 0
    674c:	b0 e0       	ldi	r27, 0x00	; 0
    674e:	80 93 4b 03 	sts	0x034B, r24
    6752:	90 93 4c 03 	sts	0x034C, r25
    6756:	a0 93 4d 03 	sts	0x034D, r26
    675a:	b0 93 4e 03 	sts	0x034E, r27
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    675e:	89 ef       	ldi	r24, 0xF9	; 249
    6760:	91 e0       	ldi	r25, 0x01	; 1
    6762:	90 93 48 03 	sts	0x0348, r25
    6766:	80 93 47 03 	sts	0x0347, r24
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    676a:	08 95       	ret

0000676c <TwoWire::write(unsigned char const*, unsigned int)>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
    676c:	cf 92       	push	r12
    676e:	df 92       	push	r13
    6770:	ef 92       	push	r14
    6772:	ff 92       	push	r15
    6774:	0f 93       	push	r16
    6776:	1f 93       	push	r17
    6778:	cf 93       	push	r28
    677a:	df 93       	push	r29
    677c:	7c 01       	movw	r14, r24
    677e:	6b 01       	movw	r12, r22
    6780:	8a 01       	movw	r16, r20
{
  if(transmitting){
    6782:	80 91 46 03 	lds	r24, 0x0346
    6786:	88 23       	and	r24, r24
    6788:	a1 f0       	breq	.+40     	; 0x67b2 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
    678a:	c0 e0       	ldi	r28, 0x00	; 0
    678c:	d0 e0       	ldi	r29, 0x00	; 0
    678e:	0d c0       	rjmp	.+26     	; 0x67aa <TwoWire::write(unsigned char const*, unsigned int)+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
      write(data[i]);
    6790:	d7 01       	movw	r26, r14
    6792:	ed 91       	ld	r30, X+
    6794:	fc 91       	ld	r31, X
    6796:	d6 01       	movw	r26, r12
    6798:	ac 0f       	add	r26, r28
    679a:	bd 1f       	adc	r27, r29
    679c:	01 90       	ld	r0, Z+
    679e:	f0 81       	ld	r31, Z
    67a0:	e0 2d       	mov	r30, r0
    67a2:	c7 01       	movw	r24, r14
    67a4:	6c 91       	ld	r22, X
    67a6:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    67a8:	21 96       	adiw	r28, 0x01	; 1
    67aa:	c0 17       	cp	r28, r16
    67ac:	d1 07       	cpc	r29, r17
    67ae:	80 f3       	brcs	.-32     	; 0x6790 <TwoWire::write(unsigned char const*, unsigned int)+0x24>
    67b0:	04 c0       	rjmp	.+8      	; 0x67ba <TwoWire::write(unsigned char const*, unsigned int)+0x4e>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    67b2:	cb 01       	movw	r24, r22
    67b4:	64 2f       	mov	r22, r20
    67b6:	0e 94 e8 34 	call	0x69d0	; 0x69d0 <twi_transmit>
  }
  return quantity;
}
    67ba:	c8 01       	movw	r24, r16
    67bc:	df 91       	pop	r29
    67be:	cf 91       	pop	r28
    67c0:	1f 91       	pop	r17
    67c2:	0f 91       	pop	r16
    67c4:	ff 90       	pop	r15
    67c6:	ef 90       	pop	r14
    67c8:	df 90       	pop	r13
    67ca:	cf 90       	pop	r12
    67cc:	08 95       	ret

000067ce <TwoWire::write(unsigned char)>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
    67ce:	df 93       	push	r29
    67d0:	cf 93       	push	r28
    67d2:	0f 92       	push	r0
    67d4:	cd b7       	in	r28, 0x3d	; 61
    67d6:	de b7       	in	r29, 0x3e	; 62
    67d8:	fc 01       	movw	r30, r24
    67da:	69 83       	std	Y+1, r22	; 0x01
{
  if(transmitting){
    67dc:	80 91 46 03 	lds	r24, 0x0346
    67e0:	88 23       	and	r24, r24
    67e2:	c9 f0       	breq	.+50     	; 0x6816 <TwoWire::write(unsigned char)+0x48>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    67e4:	80 91 45 03 	lds	r24, 0x0345
    67e8:	80 32       	cpi	r24, 0x20	; 32
    67ea:	38 f0       	brcs	.+14     	; 0x67fa <TwoWire::write(unsigned char)+0x2c>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    67ec:	81 e0       	ldi	r24, 0x01	; 1
    67ee:	90 e0       	ldi	r25, 0x00	; 0
    67f0:	93 83       	std	Z+3, r25	; 0x03
    67f2:	82 83       	std	Z+2, r24	; 0x02
    67f4:	20 e0       	ldi	r18, 0x00	; 0
    67f6:	30 e0       	ldi	r19, 0x00	; 0
    67f8:	15 c0       	rjmp	.+42     	; 0x6824 <TwoWire::write(unsigned char)+0x56>
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    67fa:	80 91 44 03 	lds	r24, 0x0344
    67fe:	e8 2f       	mov	r30, r24
    6800:	f0 e0       	ldi	r31, 0x00	; 0
    6802:	ec 5d       	subi	r30, 0xDC	; 220
    6804:	fc 4f       	sbci	r31, 0xFC	; 252
    6806:	99 81       	ldd	r25, Y+1	; 0x01
    6808:	90 83       	st	Z, r25
    ++txBufferIndex;
    680a:	8f 5f       	subi	r24, 0xFF	; 255
    680c:	80 93 44 03 	sts	0x0344, r24
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    6810:	80 93 45 03 	sts	0x0345, r24
    6814:	05 c0       	rjmp	.+10     	; 0x6820 <TwoWire::write(unsigned char)+0x52>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    6816:	ce 01       	movw	r24, r28
    6818:	01 96       	adiw	r24, 0x01	; 1
    681a:	61 e0       	ldi	r22, 0x01	; 1
    681c:	0e 94 e8 34 	call	0x69d0	; 0x69d0 <twi_transmit>
    6820:	21 e0       	ldi	r18, 0x01	; 1
    6822:	30 e0       	ldi	r19, 0x00	; 0
  }
  return 1;
}
    6824:	c9 01       	movw	r24, r18
    6826:	0f 90       	pop	r0
    6828:	cf 91       	pop	r28
    682a:	df 91       	pop	r29
    682c:	08 95       	ret

0000682e <TwoWire::endTransmission(unsigned char)>:
//	the bus tenure has been properly ended with a STOP. It
//	is very possible to leave the bus in a hung state if
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
    682e:	0f 93       	push	r16
    6830:	06 2f       	mov	r16, r22
{
  // transmit buffer (blocking)
  int8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    6832:	80 91 23 03 	lds	r24, 0x0323
    6836:	64 e2       	ldi	r22, 0x24	; 36
    6838:	73 e0       	ldi	r23, 0x03	; 3
    683a:	40 91 45 03 	lds	r20, 0x0345
    683e:	21 e0       	ldi	r18, 0x01	; 1
    6840:	0e 94 93 34 	call	0x6926	; 0x6926 <twi_writeTo>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    6844:	10 92 44 03 	sts	0x0344, r1
  txBufferLength = 0;
    6848:	10 92 45 03 	sts	0x0345, r1
  // indicate that we are done transmitting
  transmitting = 0;
    684c:	10 92 46 03 	sts	0x0346, r1
  return ret;
}
    6850:	0f 91       	pop	r16
    6852:	08 95       	ret

00006854 <TwoWire::endTransmission()>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
    6854:	61 e0       	ldi	r22, 0x01	; 1
    6856:	0e 94 17 34 	call	0x682e	; 0x682e <TwoWire::endTransmission(unsigned char)>
}
    685a:	08 95       	ret

0000685c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    quantity = BUFFER_LENGTH;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
    685c:	41 32       	cpi	r20, 0x21	; 33
    685e:	08 f0       	brcs	.+2      	; 0x6862 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x6>
    6860:	40 e2       	ldi	r20, 0x20	; 32
    6862:	86 2f       	mov	r24, r22
    6864:	61 e0       	ldi	r22, 0x01	; 1
    6866:	73 e0       	ldi	r23, 0x03	; 3
    6868:	0e 94 4a 34 	call	0x6894	; 0x6894 <twi_readFrom>
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    686c:	10 92 21 03 	sts	0x0321, r1
  rxBufferLength = read;
    6870:	80 93 22 03 	sts	0x0322, r24

  return read;
}
    6874:	08 95       	ret

00006876 <TwoWire::requestFrom(int, int)>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    6876:	21 e0       	ldi	r18, 0x01	; 1
    6878:	0e 94 2e 34 	call	0x685c	; 0x685c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
}
    687c:	08 95       	ret

0000687e <TwoWire::begin()>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    687e:	10 92 21 03 	sts	0x0321, r1
  rxBufferLength = 0;
    6882:	10 92 22 03 	sts	0x0322, r1

  txBufferIndex = 0;
    6886:	10 92 44 03 	sts	0x0344, r1
  txBufferLength = 0;
    688a:	10 92 45 03 	sts	0x0345, r1

  twi_init();
    688e:	0e 94 94 36 	call	0x6d28	; 0x6d28 <twi_init>
}
    6892:	08 95       	ret

00006894 <twi_readFrom>:
 *          length: number of bytes to read into array
 *          sendStop: Boolean indicating whether to send a stop at the end
 * Output   number of bytes read
 */
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
    6894:	38 2f       	mov	r19, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    6896:	41 32       	cpi	r20, 0x21	; 33
    6898:	10 f0       	brcs	.+4      	; 0x689e <twi_readFrom+0xa>
    689a:	40 e0       	ldi	r20, 0x00	; 0
    689c:	42 c0       	rjmp	.+132    	; 0x6922 <twi_readFrom+0x8e>
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    689e:	80 91 53 03 	lds	r24, 0x0353
    68a2:	88 23       	and	r24, r24
    68a4:	e1 f7       	brne	.-8      	; 0x689e <twi_readFrom+0xa>
    continue;
  }
  twi_state = TWI_MRX;
    68a6:	91 e0       	ldi	r25, 0x01	; 1
    68a8:	90 93 53 03 	sts	0x0353, r25
  twi_sendStop = sendStop;
    68ac:	20 93 55 03 	sts	0x0355, r18
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    68b0:	8f ef       	ldi	r24, 0xFF	; 255
    68b2:	80 93 c0 03 	sts	0x03C0, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    68b6:	10 92 7b 03 	sts	0x037B, r1
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    68ba:	41 50       	subi	r20, 0x01	; 1
    68bc:	40 93 7c 03 	sts	0x037C, r20
    68c0:	4f 5f       	subi	r20, 0xFF	; 255
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    68c2:	90 93 54 03 	sts	0x0354, r25
  twi_slarw |= address << 1;
    68c6:	80 91 54 03 	lds	r24, 0x0354
    68ca:	33 0f       	add	r19, r19
    68cc:	83 2b       	or	r24, r19
    68ce:	80 93 54 03 	sts	0x0354, r24

  if (true == twi_inRepStart) {
    68d2:	80 91 56 03 	lds	r24, 0x0356
    68d6:	81 30       	cpi	r24, 0x01	; 1
    68d8:	41 f4       	brne	.+16     	; 0x68ea <twi_readFrom+0x56>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    68da:	10 92 56 03 	sts	0x0356, r1
    TWDR = twi_slarw;
    68de:	80 91 54 03 	lds	r24, 0x0354
    68e2:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    68e6:	85 ec       	ldi	r24, 0xC5	; 197
    68e8:	01 c0       	rjmp	.+2      	; 0x68ec <twi_readFrom+0x58>
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    68ea:	85 ee       	ldi	r24, 0xE5	; 229
    68ec:	80 93 bc 00 	sts	0x00BC, r24

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    68f0:	80 91 53 03 	lds	r24, 0x0353
    68f4:	81 30       	cpi	r24, 0x01	; 1
    68f6:	e1 f3       	breq	.-8      	; 0x68f0 <twi_readFrom+0x5c>
    continue;
  }

  if (twi_masterBufferIndex < length)
    68f8:	80 91 7b 03 	lds	r24, 0x037B
    68fc:	84 17       	cp	r24, r20
    68fe:	10 f4       	brcc	.+4      	; 0x6904 <twi_readFrom+0x70>
    length = twi_masterBufferIndex;
    6900:	40 91 7b 03 	lds	r20, 0x037B
    6904:	20 e0       	ldi	r18, 0x00	; 0
    6906:	30 e0       	ldi	r19, 0x00	; 0
    6908:	0a c0       	rjmp	.+20     	; 0x691e <twi_readFrom+0x8a>

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
    690a:	fb 01       	movw	r30, r22
    690c:	e2 0f       	add	r30, r18
    690e:	f3 1f       	adc	r31, r19
    6910:	d9 01       	movw	r26, r18
    6912:	a5 5a       	subi	r26, 0xA5	; 165
    6914:	bc 4f       	sbci	r27, 0xFC	; 252
    6916:	8c 91       	ld	r24, X
    6918:	80 83       	st	Z, r24
    691a:	2f 5f       	subi	r18, 0xFF	; 255
    691c:	3f 4f       	sbci	r19, 0xFF	; 255

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    691e:	24 17       	cp	r18, r20
    6920:	a0 f3       	brcs	.-24     	; 0x690a <twi_readFrom+0x76>
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
}
    6922:	84 2f       	mov	r24, r20
    6924:	08 95       	ret

00006926 <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
    6926:	0f 93       	push	r16
    6928:	1f 93       	push	r17
    692a:	58 2f       	mov	r21, r24
    692c:	12 2f       	mov	r17, r18
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    692e:	41 32       	cpi	r20, 0x21	; 33
    6930:	10 f0       	brcs	.+4      	; 0x6936 <twi_writeTo+0x10>
    6932:	81 e0       	ldi	r24, 0x01	; 1
    6934:	4a c0       	rjmp	.+148    	; 0x69ca <twi_writeTo+0xa4>
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    6936:	80 91 53 03 	lds	r24, 0x0353
    693a:	88 23       	and	r24, r24
    693c:	e1 f7       	brne	.-8      	; 0x6936 <twi_writeTo+0x10>
    continue;
  }
  twi_state = TWI_MTX;
    693e:	82 e0       	ldi	r24, 0x02	; 2
    6940:	80 93 53 03 	sts	0x0353, r24
  twi_sendStop = sendStop;
    6944:	00 93 55 03 	sts	0x0355, r16
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    6948:	8f ef       	ldi	r24, 0xFF	; 255
    694a:	80 93 c0 03 	sts	0x03C0, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    694e:	10 92 7b 03 	sts	0x037B, r1
  twi_masterBufferLength = length;
    6952:	40 93 7c 03 	sts	0x037C, r20
    6956:	ab e5       	ldi	r26, 0x5B	; 91
    6958:	b3 e0       	ldi	r27, 0x03	; 3
    695a:	fb 01       	movw	r30, r22
    695c:	02 c0       	rjmp	.+4      	; 0x6962 <twi_writeTo+0x3c>
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
    695e:	81 91       	ld	r24, Z+
    6960:	8d 93       	st	X+, r24
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    6962:	8e 2f       	mov	r24, r30
    6964:	86 1b       	sub	r24, r22
    6966:	84 17       	cp	r24, r20
    6968:	d0 f3       	brcs	.-12     	; 0x695e <twi_writeTo+0x38>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    696a:	10 92 54 03 	sts	0x0354, r1
  twi_slarw |= address << 1;
    696e:	80 91 54 03 	lds	r24, 0x0354
    6972:	55 0f       	add	r21, r21
    6974:	85 2b       	or	r24, r21
    6976:	80 93 54 03 	sts	0x0354, r24
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    697a:	80 91 56 03 	lds	r24, 0x0356
    697e:	81 30       	cpi	r24, 0x01	; 1
    6980:	41 f4       	brne	.+16     	; 0x6992 <twi_writeTo+0x6c>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    6982:	10 92 56 03 	sts	0x0356, r1
    TWDR = twi_slarw;				
    6986:	80 91 54 03 	lds	r24, 0x0354
    698a:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    698e:	85 ec       	ldi	r24, 0xC5	; 197
    6990:	01 c0       	rjmp	.+2      	; 0x6994 <twi_writeTo+0x6e>
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
    6992:	85 ee       	ldi	r24, 0xE5	; 229
    6994:	80 93 bc 00 	sts	0x00BC, r24

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    6998:	11 23       	and	r17, r17
    699a:	21 f0       	breq	.+8      	; 0x69a4 <twi_writeTo+0x7e>
    699c:	80 91 53 03 	lds	r24, 0x0353
    69a0:	82 30       	cpi	r24, 0x02	; 2
    69a2:	e1 f3       	breq	.-8      	; 0x699c <twi_writeTo+0x76>
    continue;
  }
  
  if (twi_error == 0xFF)
    69a4:	80 91 c0 03 	lds	r24, 0x03C0
    69a8:	8f 3f       	cpi	r24, 0xFF	; 255
    69aa:	11 f4       	brne	.+4      	; 0x69b0 <twi_writeTo+0x8a>
    69ac:	80 e0       	ldi	r24, 0x00	; 0
    69ae:	0d c0       	rjmp	.+26     	; 0x69ca <twi_writeTo+0xa4>
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    69b0:	80 91 c0 03 	lds	r24, 0x03C0
    69b4:	80 32       	cpi	r24, 0x20	; 32
    69b6:	11 f4       	brne	.+4      	; 0x69bc <twi_writeTo+0x96>
    69b8:	82 e0       	ldi	r24, 0x02	; 2
    69ba:	07 c0       	rjmp	.+14     	; 0x69ca <twi_writeTo+0xa4>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    69bc:	80 91 c0 03 	lds	r24, 0x03C0
    69c0:	80 33       	cpi	r24, 0x30	; 48
    69c2:	11 f0       	breq	.+4      	; 0x69c8 <twi_writeTo+0xa2>
    69c4:	84 e0       	ldi	r24, 0x04	; 4
    69c6:	01 c0       	rjmp	.+2      	; 0x69ca <twi_writeTo+0xa4>
    69c8:	83 e0       	ldi	r24, 0x03	; 3
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
}
    69ca:	1f 91       	pop	r17
    69cc:	0f 91       	pop	r16
    69ce:	08 95       	ret

000069d0 <twi_transmit>:
 * Output   1 length too long for buffer
 *          2 not slave transmitter
 *          0 ok
 */
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
    69d0:	48 2f       	mov	r20, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    69d2:	61 32       	cpi	r22, 0x21	; 33
    69d4:	10 f0       	brcs	.+4      	; 0x69da <twi_transmit+0xa>
    69d6:	81 e0       	ldi	r24, 0x01	; 1
    69d8:	08 95       	ret
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    69da:	80 91 53 03 	lds	r24, 0x0353
    69de:	84 30       	cpi	r24, 0x04	; 4
    69e0:	11 f0       	breq	.+4      	; 0x69e6 <twi_transmit+0x16>
    69e2:	82 e0       	ldi	r24, 0x02	; 2
    69e4:	08 95       	ret
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
    69e6:	60 93 9e 03 	sts	0x039E, r22
    69ea:	ad e7       	ldi	r26, 0x7D	; 125
    69ec:	b3 e0       	ldi	r27, 0x03	; 3
    69ee:	84 2f       	mov	r24, r20
    69f0:	9c 01       	movw	r18, r24
    69f2:	f9 01       	movw	r30, r18
    69f4:	02 c0       	rjmp	.+4      	; 0x69fa <twi_transmit+0x2a>
  for(i = 0; i < length; ++i){
    twi_txBuffer[i] = data[i];
    69f6:	81 91       	ld	r24, Z+
    69f8:	8d 93       	st	X+, r24
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
    69fa:	8e 2f       	mov	r24, r30
    69fc:	84 1b       	sub	r24, r20
    69fe:	86 17       	cp	r24, r22
    6a00:	d0 f3       	brcs	.-12     	; 0x69f6 <twi_transmit+0x26>
    6a02:	80 e0       	ldi	r24, 0x00	; 0
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
}
    6a04:	08 95       	ret

00006a06 <__vector_24>:
  // update twi state
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
    6a06:	1f 92       	push	r1
    6a08:	0f 92       	push	r0
    6a0a:	0f b6       	in	r0, 0x3f	; 63
    6a0c:	0f 92       	push	r0
    6a0e:	11 24       	eor	r1, r1
    6a10:	2f 93       	push	r18
    6a12:	3f 93       	push	r19
    6a14:	4f 93       	push	r20
    6a16:	5f 93       	push	r21
    6a18:	6f 93       	push	r22
    6a1a:	7f 93       	push	r23
    6a1c:	8f 93       	push	r24
    6a1e:	9f 93       	push	r25
    6a20:	af 93       	push	r26
    6a22:	bf 93       	push	r27
    6a24:	ef 93       	push	r30
    6a26:	ff 93       	push	r31
  switch(TW_STATUS){
    6a28:	80 91 b9 00 	lds	r24, 0x00B9
    6a2c:	90 e0       	ldi	r25, 0x00	; 0
    6a2e:	88 7f       	andi	r24, 0xF8	; 248
    6a30:	90 70       	andi	r25, 0x00	; 0
    6a32:	80 36       	cpi	r24, 0x60	; 96
    6a34:	91 05       	cpc	r25, r1
    6a36:	09 f4       	brne	.+2      	; 0x6a3a <__vector_24+0x34>
    6a38:	f2 c0       	rjmp	.+484    	; 0x6c1e <__vector_24+0x218>
    6a3a:	81 36       	cpi	r24, 0x61	; 97
    6a3c:	91 05       	cpc	r25, r1
    6a3e:	cc f5       	brge	.+114    	; 0x6ab2 <__vector_24+0xac>
    6a40:	88 32       	cpi	r24, 0x28	; 40
    6a42:	91 05       	cpc	r25, r1
    6a44:	09 f4       	brne	.+2      	; 0x6a48 <__vector_24+0x42>
    6a46:	7b c0       	rjmp	.+246    	; 0x6b3e <__vector_24+0x138>
    6a48:	89 32       	cpi	r24, 0x29	; 41
    6a4a:	91 05       	cpc	r25, r1
    6a4c:	b4 f4       	brge	.+44     	; 0x6a7a <__vector_24+0x74>
    6a4e:	80 31       	cpi	r24, 0x10	; 16
    6a50:	91 05       	cpc	r25, r1
    6a52:	09 f4       	brne	.+2      	; 0x6a56 <__vector_24+0x50>
    6a54:	6f c0       	rjmp	.+222    	; 0x6b34 <__vector_24+0x12e>
    6a56:	81 31       	cpi	r24, 0x11	; 17
    6a58:	91 05       	cpc	r25, r1
    6a5a:	3c f4       	brge	.+14     	; 0x6a6a <__vector_24+0x64>
    6a5c:	00 97       	sbiw	r24, 0x00	; 0
    6a5e:	09 f4       	brne	.+2      	; 0x6a62 <__vector_24+0x5c>
    6a60:	47 c1       	rjmp	.+654    	; 0x6cf0 <__vector_24+0x2ea>
    6a62:	08 97       	sbiw	r24, 0x08	; 8
    6a64:	09 f0       	breq	.+2      	; 0x6a68 <__vector_24+0x62>
    6a66:	4f c1       	rjmp	.+670    	; 0x6d06 <__vector_24+0x300>
    6a68:	65 c0       	rjmp	.+202    	; 0x6b34 <__vector_24+0x12e>
    6a6a:	88 31       	cpi	r24, 0x18	; 24
    6a6c:	91 05       	cpc	r25, r1
    6a6e:	09 f4       	brne	.+2      	; 0x6a72 <__vector_24+0x6c>
    6a70:	66 c0       	rjmp	.+204    	; 0x6b3e <__vector_24+0x138>
    6a72:	80 97       	sbiw	r24, 0x20	; 32
    6a74:	09 f0       	breq	.+2      	; 0x6a78 <__vector_24+0x72>
    6a76:	47 c1       	rjmp	.+654    	; 0x6d06 <__vector_24+0x300>
    6a78:	82 c0       	rjmp	.+260    	; 0x6b7e <__vector_24+0x178>
    6a7a:	80 34       	cpi	r24, 0x40	; 64
    6a7c:	91 05       	cpc	r25, r1
    6a7e:	09 f4       	brne	.+2      	; 0x6a82 <__vector_24+0x7c>
    6a80:	a4 c0       	rjmp	.+328    	; 0x6bca <__vector_24+0x1c4>
    6a82:	81 34       	cpi	r24, 0x41	; 65
    6a84:	91 05       	cpc	r25, r1
    6a86:	44 f4       	brge	.+16     	; 0x6a98 <__vector_24+0x92>
    6a88:	80 33       	cpi	r24, 0x30	; 48
    6a8a:	91 05       	cpc	r25, r1
    6a8c:	09 f4       	brne	.+2      	; 0x6a90 <__vector_24+0x8a>
    6a8e:	82 c0       	rjmp	.+260    	; 0x6b94 <__vector_24+0x18e>
    6a90:	c8 97       	sbiw	r24, 0x38	; 56
    6a92:	09 f0       	breq	.+2      	; 0x6a96 <__vector_24+0x90>
    6a94:	38 c1       	rjmp	.+624    	; 0x6d06 <__vector_24+0x300>
    6a96:	89 c0       	rjmp	.+274    	; 0x6baa <__vector_24+0x1a4>
    6a98:	80 35       	cpi	r24, 0x50	; 80
    6a9a:	91 05       	cpc	r25, r1
    6a9c:	09 f4       	brne	.+2      	; 0x6aa0 <__vector_24+0x9a>
    6a9e:	89 c0       	rjmp	.+274    	; 0x6bb2 <__vector_24+0x1ac>
    6aa0:	88 35       	cpi	r24, 0x58	; 88
    6aa2:	91 05       	cpc	r25, r1
    6aa4:	09 f4       	brne	.+2      	; 0x6aa8 <__vector_24+0xa2>
    6aa6:	96 c0       	rjmp	.+300    	; 0x6bd4 <__vector_24+0x1ce>
    6aa8:	88 34       	cpi	r24, 0x48	; 72
    6aaa:	91 05       	cpc	r25, r1
    6aac:	09 f0       	breq	.+2      	; 0x6ab0 <__vector_24+0xaa>
    6aae:	2b c1       	rjmp	.+598    	; 0x6d06 <__vector_24+0x300>
    6ab0:	ae c0       	rjmp	.+348    	; 0x6c0e <__vector_24+0x208>
    6ab2:	88 39       	cpi	r24, 0x98	; 152
    6ab4:	91 05       	cpc	r25, r1
    6ab6:	09 f4       	brne	.+2      	; 0x6aba <__vector_24+0xb4>
    6ab8:	13 c1       	rjmp	.+550    	; 0x6ce0 <__vector_24+0x2da>
    6aba:	89 39       	cpi	r24, 0x99	; 153
    6abc:	91 05       	cpc	r25, r1
    6abe:	ec f4       	brge	.+58     	; 0x6afa <__vector_24+0xf4>
    6ac0:	88 37       	cpi	r24, 0x78	; 120
    6ac2:	91 05       	cpc	r25, r1
    6ac4:	09 f4       	brne	.+2      	; 0x6ac8 <__vector_24+0xc2>
    6ac6:	ab c0       	rjmp	.+342    	; 0x6c1e <__vector_24+0x218>
    6ac8:	89 37       	cpi	r24, 0x79	; 121
    6aca:	91 05       	cpc	r25, r1
    6acc:	4c f4       	brge	.+18     	; 0x6ae0 <__vector_24+0xda>
    6ace:	88 36       	cpi	r24, 0x68	; 104
    6ad0:	91 05       	cpc	r25, r1
    6ad2:	09 f4       	brne	.+2      	; 0x6ad6 <__vector_24+0xd0>
    6ad4:	a4 c0       	rjmp	.+328    	; 0x6c1e <__vector_24+0x218>
    6ad6:	80 37       	cpi	r24, 0x70	; 112
    6ad8:	91 05       	cpc	r25, r1
    6ada:	09 f0       	breq	.+2      	; 0x6ade <__vector_24+0xd8>
    6adc:	14 c1       	rjmp	.+552    	; 0x6d06 <__vector_24+0x300>
    6ade:	9f c0       	rjmp	.+318    	; 0x6c1e <__vector_24+0x218>
    6ae0:	88 38       	cpi	r24, 0x88	; 136
    6ae2:	91 05       	cpc	r25, r1
    6ae4:	09 f4       	brne	.+2      	; 0x6ae8 <__vector_24+0xe2>
    6ae6:	fc c0       	rjmp	.+504    	; 0x6ce0 <__vector_24+0x2da>
    6ae8:	80 39       	cpi	r24, 0x90	; 144
    6aea:	91 05       	cpc	r25, r1
    6aec:	09 f4       	brne	.+2      	; 0x6af0 <__vector_24+0xea>
    6aee:	9d c0       	rjmp	.+314    	; 0x6c2a <__vector_24+0x224>
    6af0:	80 38       	cpi	r24, 0x80	; 128
    6af2:	91 05       	cpc	r25, r1
    6af4:	09 f0       	breq	.+2      	; 0x6af8 <__vector_24+0xf2>
    6af6:	07 c1       	rjmp	.+526    	; 0x6d06 <__vector_24+0x300>
    6af8:	98 c0       	rjmp	.+304    	; 0x6c2a <__vector_24+0x224>
    6afa:	80 3b       	cpi	r24, 0xB0	; 176
    6afc:	91 05       	cpc	r25, r1
    6afe:	09 f4       	brne	.+2      	; 0x6b02 <__vector_24+0xfc>
    6b00:	c6 c0       	rjmp	.+396    	; 0x6c8e <__vector_24+0x288>
    6b02:	81 3b       	cpi	r24, 0xB1	; 177
    6b04:	91 05       	cpc	r25, r1
    6b06:	4c f4       	brge	.+18     	; 0x6b1a <__vector_24+0x114>
    6b08:	80 3a       	cpi	r24, 0xA0	; 160
    6b0a:	91 05       	cpc	r25, r1
    6b0c:	09 f4       	brne	.+2      	; 0x6b10 <__vector_24+0x10a>
    6b0e:	9f c0       	rjmp	.+318    	; 0x6c4e <__vector_24+0x248>
    6b10:	88 3a       	cpi	r24, 0xA8	; 168
    6b12:	91 05       	cpc	r25, r1
    6b14:	09 f0       	breq	.+2      	; 0x6b18 <__vector_24+0x112>
    6b16:	f7 c0       	rjmp	.+494    	; 0x6d06 <__vector_24+0x300>
    6b18:	ba c0       	rjmp	.+372    	; 0x6c8e <__vector_24+0x288>
    6b1a:	80 3c       	cpi	r24, 0xC0	; 192
    6b1c:	91 05       	cpc	r25, r1
    6b1e:	09 f4       	brne	.+2      	; 0x6b22 <__vector_24+0x11c>
    6b20:	e3 c0       	rjmp	.+454    	; 0x6ce8 <__vector_24+0x2e2>
    6b22:	88 3c       	cpi	r24, 0xC8	; 200
    6b24:	91 05       	cpc	r25, r1
    6b26:	09 f4       	brne	.+2      	; 0x6b2a <__vector_24+0x124>
    6b28:	df c0       	rjmp	.+446    	; 0x6ce8 <__vector_24+0x2e2>
    6b2a:	88 3b       	cpi	r24, 0xB8	; 184
    6b2c:	91 05       	cpc	r25, r1
    6b2e:	09 f0       	breq	.+2      	; 0x6b32 <__vector_24+0x12c>
    6b30:	ea c0       	rjmp	.+468    	; 0x6d06 <__vector_24+0x300>
    6b32:	c2 c0       	rjmp	.+388    	; 0x6cb8 <__vector_24+0x2b2>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    6b34:	80 91 54 03 	lds	r24, 0x0354
    6b38:	80 93 bb 00 	sts	0x00BB, r24
    6b3c:	cf c0       	rjmp	.+414    	; 0x6cdc <__vector_24+0x2d6>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    6b3e:	90 91 7b 03 	lds	r25, 0x037B
    6b42:	80 91 7c 03 	lds	r24, 0x037C
    6b46:	98 17       	cp	r25, r24
    6b48:	68 f4       	brcc	.+26     	; 0x6b64 <__vector_24+0x15e>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    6b4a:	90 91 7b 03 	lds	r25, 0x037B
    6b4e:	e9 2f       	mov	r30, r25
    6b50:	f0 e0       	ldi	r31, 0x00	; 0
    6b52:	e5 5a       	subi	r30, 0xA5	; 165
    6b54:	fc 4f       	sbci	r31, 0xFC	; 252
    6b56:	80 81       	ld	r24, Z
    6b58:	80 93 bb 00 	sts	0x00BB, r24
    6b5c:	9f 5f       	subi	r25, 0xFF	; 255
    6b5e:	90 93 7b 03 	sts	0x037B, r25
    6b62:	bc c0       	rjmp	.+376    	; 0x6cdc <__vector_24+0x2d6>
        twi_reply(1);
      }else{
	if (twi_sendStop)
    6b64:	80 91 55 03 	lds	r24, 0x0355
    6b68:	88 23       	and	r24, r24
    6b6a:	09 f4       	brne	.+2      	; 0x6b6e <__vector_24+0x168>
    6b6c:	4b c0       	rjmp	.+150    	; 0x6c04 <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    6b6e:	85 ed       	ldi	r24, 0xD5	; 213
    6b70:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    6b74:	80 91 bc 00 	lds	r24, 0x00BC
    6b78:	84 fd       	sbrc	r24, 4
    6b7a:	fc cf       	rjmp	.-8      	; 0x6b74 <__vector_24+0x16e>
    6b7c:	c2 c0       	rjmp	.+388    	; 0x6d02 <__vector_24+0x2fc>
	  twi_state = TWI_READY;
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    6b7e:	80 e2       	ldi	r24, 0x20	; 32
    6b80:	80 93 c0 03 	sts	0x03C0, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    6b84:	85 ed       	ldi	r24, 0xD5	; 213
    6b86:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    6b8a:	80 91 bc 00 	lds	r24, 0x00BC
    6b8e:	84 fd       	sbrc	r24, 4
    6b90:	fc cf       	rjmp	.-8      	; 0x6b8a <__vector_24+0x184>
    6b92:	b7 c0       	rjmp	.+366    	; 0x6d02 <__vector_24+0x2fc>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    6b94:	80 e3       	ldi	r24, 0x30	; 48
    6b96:	80 93 c0 03 	sts	0x03C0, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    6b9a:	85 ed       	ldi	r24, 0xD5	; 213
    6b9c:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    6ba0:	80 91 bc 00 	lds	r24, 0x00BC
    6ba4:	84 fd       	sbrc	r24, 4
    6ba6:	fc cf       	rjmp	.-8      	; 0x6ba0 <__vector_24+0x19a>
    6ba8:	ac c0       	rjmp	.+344    	; 0x6d02 <__vector_24+0x2fc>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    6baa:	88 e3       	ldi	r24, 0x38	; 56
    6bac:	80 93 c0 03 	sts	0x03C0, r24
    6bb0:	9b c0       	rjmp	.+310    	; 0x6ce8 <__vector_24+0x2e2>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    6bb2:	80 91 7b 03 	lds	r24, 0x037B
    6bb6:	90 91 bb 00 	lds	r25, 0x00BB
    6bba:	e8 2f       	mov	r30, r24
    6bbc:	f0 e0       	ldi	r31, 0x00	; 0
    6bbe:	e5 5a       	subi	r30, 0xA5	; 165
    6bc0:	fc 4f       	sbci	r31, 0xFC	; 252
    6bc2:	90 83       	st	Z, r25
    6bc4:	8f 5f       	subi	r24, 0xFF	; 255
    6bc6:	80 93 7b 03 	sts	0x037B, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    6bca:	90 91 7b 03 	lds	r25, 0x037B
    6bce:	80 91 7c 03 	lds	r24, 0x037C
    6bd2:	82 c0       	rjmp	.+260    	; 0x6cd8 <__vector_24+0x2d2>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    6bd4:	80 91 7b 03 	lds	r24, 0x037B
    6bd8:	90 91 bb 00 	lds	r25, 0x00BB
    6bdc:	e8 2f       	mov	r30, r24
    6bde:	f0 e0       	ldi	r31, 0x00	; 0
    6be0:	e5 5a       	subi	r30, 0xA5	; 165
    6be2:	fc 4f       	sbci	r31, 0xFC	; 252
    6be4:	90 83       	st	Z, r25
    6be6:	8f 5f       	subi	r24, 0xFF	; 255
    6be8:	80 93 7b 03 	sts	0x037B, r24
	if (twi_sendStop)
    6bec:	80 91 55 03 	lds	r24, 0x0355
    6bf0:	88 23       	and	r24, r24
    6bf2:	41 f0       	breq	.+16     	; 0x6c04 <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    6bf4:	85 ed       	ldi	r24, 0xD5	; 213
    6bf6:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    6bfa:	80 91 bc 00 	lds	r24, 0x00BC
    6bfe:	84 fd       	sbrc	r24, 4
    6c00:	fc cf       	rjmp	.-8      	; 0x6bfa <__vector_24+0x1f4>
    6c02:	7f c0       	rjmp	.+254    	; 0x6d02 <__vector_24+0x2fc>
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    6c04:	81 e0       	ldi	r24, 0x01	; 1
    6c06:	80 93 56 03 	sts	0x0356, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    6c0a:	84 ea       	ldi	r24, 0xA4	; 164
    6c0c:	6e c0       	rjmp	.+220    	; 0x6cea <__vector_24+0x2e4>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    6c0e:	85 ed       	ldi	r24, 0xD5	; 213
    6c10:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    6c14:	80 91 bc 00 	lds	r24, 0x00BC
    6c18:	84 fd       	sbrc	r24, 4
    6c1a:	fc cf       	rjmp	.-8      	; 0x6c14 <__vector_24+0x20e>
    6c1c:	72 c0       	rjmp	.+228    	; 0x6d02 <__vector_24+0x2fc>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    6c1e:	83 e0       	ldi	r24, 0x03	; 3
    6c20:	80 93 53 03 	sts	0x0353, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    6c24:	10 92 bf 03 	sts	0x03BF, r1
    6c28:	59 c0       	rjmp	.+178    	; 0x6cdc <__vector_24+0x2d6>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    6c2a:	80 91 bf 03 	lds	r24, 0x03BF
    6c2e:	80 32       	cpi	r24, 0x20	; 32
    6c30:	08 f0       	brcs	.+2      	; 0x6c34 <__vector_24+0x22e>
    6c32:	56 c0       	rjmp	.+172    	; 0x6ce0 <__vector_24+0x2da>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    6c34:	80 91 bf 03 	lds	r24, 0x03BF
    6c38:	90 91 bb 00 	lds	r25, 0x00BB
    6c3c:	e8 2f       	mov	r30, r24
    6c3e:	f0 e0       	ldi	r31, 0x00	; 0
    6c40:	e1 56       	subi	r30, 0x61	; 97
    6c42:	fc 4f       	sbci	r31, 0xFC	; 252
    6c44:	90 83       	st	Z, r25
    6c46:	8f 5f       	subi	r24, 0xFF	; 255
    6c48:	80 93 bf 03 	sts	0x03BF, r24
    6c4c:	47 c0       	rjmp	.+142    	; 0x6cdc <__vector_24+0x2d6>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    6c4e:	80 91 bf 03 	lds	r24, 0x03BF
    6c52:	80 32       	cpi	r24, 0x20	; 32
    6c54:	30 f4       	brcc	.+12     	; 0x6c62 <__vector_24+0x25c>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    6c56:	e0 91 bf 03 	lds	r30, 0x03BF
    6c5a:	f0 e0       	ldi	r31, 0x00	; 0
    6c5c:	e1 56       	subi	r30, 0x61	; 97
    6c5e:	fc 4f       	sbci	r31, 0xFC	; 252
    6c60:	10 82       	st	Z, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    6c62:	85 ed       	ldi	r24, 0xD5	; 213
    6c64:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    6c68:	80 91 bc 00 	lds	r24, 0x00BC
    6c6c:	84 fd       	sbrc	r24, 4
    6c6e:	fc cf       	rjmp	.-8      	; 0x6c68 <__vector_24+0x262>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    6c70:	10 92 53 03 	sts	0x0353, r1
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    6c74:	60 91 bf 03 	lds	r22, 0x03BF
    6c78:	e0 91 59 03 	lds	r30, 0x0359
    6c7c:	f0 91 5a 03 	lds	r31, 0x035A
    6c80:	8f e9       	ldi	r24, 0x9F	; 159
    6c82:	93 e0       	ldi	r25, 0x03	; 3
    6c84:	70 e0       	ldi	r23, 0x00	; 0
    6c86:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    6c88:	10 92 bf 03 	sts	0x03BF, r1
    6c8c:	2d c0       	rjmp	.+90     	; 0x6ce8 <__vector_24+0x2e2>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    6c8e:	84 e0       	ldi	r24, 0x04	; 4
    6c90:	80 93 53 03 	sts	0x0353, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    6c94:	10 92 9d 03 	sts	0x039D, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    6c98:	10 92 9e 03 	sts	0x039E, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    6c9c:	e0 91 57 03 	lds	r30, 0x0357
    6ca0:	f0 91 58 03 	lds	r31, 0x0358
    6ca4:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    6ca6:	80 91 9e 03 	lds	r24, 0x039E
    6caa:	88 23       	and	r24, r24
    6cac:	29 f4       	brne	.+10     	; 0x6cb8 <__vector_24+0x2b2>
        twi_txBufferLength = 1;
    6cae:	81 e0       	ldi	r24, 0x01	; 1
    6cb0:	80 93 9e 03 	sts	0x039E, r24
        twi_txBuffer[0] = 0x00;
    6cb4:	10 92 7d 03 	sts	0x037D, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    6cb8:	90 91 9d 03 	lds	r25, 0x039D
    6cbc:	e9 2f       	mov	r30, r25
    6cbe:	f0 e0       	ldi	r31, 0x00	; 0
    6cc0:	e3 58       	subi	r30, 0x83	; 131
    6cc2:	fc 4f       	sbci	r31, 0xFC	; 252
    6cc4:	80 81       	ld	r24, Z
    6cc6:	80 93 bb 00 	sts	0x00BB, r24
    6cca:	9f 5f       	subi	r25, 0xFF	; 255
    6ccc:	90 93 9d 03 	sts	0x039D, r25
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    6cd0:	90 91 9d 03 	lds	r25, 0x039D
    6cd4:	80 91 9e 03 	lds	r24, 0x039E
    6cd8:	98 17       	cp	r25, r24
    6cda:	10 f4       	brcc	.+4      	; 0x6ce0 <__vector_24+0x2da>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    6cdc:	85 ec       	ldi	r24, 0xC5	; 197
    6cde:	01 c0       	rjmp	.+2      	; 0x6ce2 <__vector_24+0x2dc>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    6ce0:	85 e8       	ldi	r24, 0x85	; 133
    6ce2:	80 93 bc 00 	sts	0x00BC, r24
    6ce6:	0f c0       	rjmp	.+30     	; 0x6d06 <__vector_24+0x300>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    6ce8:	85 ec       	ldi	r24, 0xC5	; 197
    6cea:	80 93 bc 00 	sts	0x00BC, r24
    6cee:	09 c0       	rjmp	.+18     	; 0x6d02 <__vector_24+0x2fc>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    6cf0:	10 92 c0 03 	sts	0x03C0, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    6cf4:	85 ed       	ldi	r24, 0xD5	; 213
    6cf6:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    6cfa:	80 91 bc 00 	lds	r24, 0x00BC
    6cfe:	84 fd       	sbrc	r24, 4
    6d00:	fc cf       	rjmp	.-8      	; 0x6cfa <__vector_24+0x2f4>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    6d02:	10 92 53 03 	sts	0x0353, r1
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    6d06:	ff 91       	pop	r31
    6d08:	ef 91       	pop	r30
    6d0a:	bf 91       	pop	r27
    6d0c:	af 91       	pop	r26
    6d0e:	9f 91       	pop	r25
    6d10:	8f 91       	pop	r24
    6d12:	7f 91       	pop	r23
    6d14:	6f 91       	pop	r22
    6d16:	5f 91       	pop	r21
    6d18:	4f 91       	pop	r20
    6d1a:	3f 91       	pop	r19
    6d1c:	2f 91       	pop	r18
    6d1e:	0f 90       	pop	r0
    6d20:	0f be       	out	0x3f, r0	; 63
    6d22:	0f 90       	pop	r0
    6d24:	1f 90       	pop	r1
    6d26:	18 95       	reti

00006d28 <twi_init>:
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
    6d28:	10 92 53 03 	sts	0x0353, r1
  twi_sendStop = true;		// default value
    6d2c:	81 e0       	ldi	r24, 0x01	; 1
    6d2e:	80 93 55 03 	sts	0x0355, r24
  twi_inRepStart = false;
    6d32:	10 92 56 03 	sts	0x0356, r1
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
    6d36:	82 e1       	ldi	r24, 0x12	; 18
    6d38:	61 e0       	ldi	r22, 0x01	; 1
    6d3a:	0e 94 f1 36 	call	0x6de2	; 0x6de2 <digitalWrite>
  digitalWrite(SCL, 1);
    6d3e:	83 e1       	ldi	r24, 0x13	; 19
    6d40:	61 e0       	ldi	r22, 0x01	; 1
    6d42:	0e 94 f1 36 	call	0x6de2	; 0x6de2 <digitalWrite>

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    6d46:	e9 eb       	ldi	r30, 0xB9	; 185
    6d48:	f0 e0       	ldi	r31, 0x00	; 0
    6d4a:	80 81       	ld	r24, Z
    6d4c:	8e 7f       	andi	r24, 0xFE	; 254
    6d4e:	80 83       	st	Z, r24
  cbi(TWSR, TWPS1);
    6d50:	80 81       	ld	r24, Z
    6d52:	8d 7f       	andi	r24, 0xFD	; 253
    6d54:	80 83       	st	Z, r24
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
    6d56:	8d ef       	ldi	r24, 0xFD	; 253
    6d58:	80 93 b8 00 	sts	0x00B8, r24
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    6d5c:	85 e4       	ldi	r24, 0x45	; 69
    6d5e:	80 93 bc 00 	sts	0x00BC, r24
}
    6d62:	08 95       	ret

00006d64 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    6d64:	cf 93       	push	r28
    6d66:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    6d68:	48 2f       	mov	r20, r24
    6d6a:	50 e0       	ldi	r21, 0x00	; 0
    6d6c:	ca 01       	movw	r24, r20
    6d6e:	81 55       	subi	r24, 0x51	; 81
    6d70:	9b 4f       	sbci	r25, 0xFB	; 251
    6d72:	fc 01       	movw	r30, r24
    6d74:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
    6d76:	45 56       	subi	r20, 0x65	; 101
    6d78:	5b 4f       	sbci	r21, 0xFB	; 251
    6d7a:	fa 01       	movw	r30, r20
    6d7c:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    6d7e:	88 23       	and	r24, r24
    6d80:	69 f1       	breq	.+90     	; 0x6ddc <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    6d82:	90 e0       	ldi	r25, 0x00	; 0
    6d84:	88 0f       	add	r24, r24
    6d86:	99 1f       	adc	r25, r25
    6d88:	fc 01       	movw	r30, r24
    6d8a:	e3 58       	subi	r30, 0x83	; 131
    6d8c:	fb 4f       	sbci	r31, 0xFB	; 251
    6d8e:	a5 91       	lpm	r26, Z+
    6d90:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
    6d92:	fc 01       	movw	r30, r24
    6d94:	e9 57       	subi	r30, 0x79	; 121
    6d96:	fb 4f       	sbci	r31, 0xFB	; 251
    6d98:	c5 91       	lpm	r28, Z+
    6d9a:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
    6d9c:	66 23       	and	r22, r22
    6d9e:	51 f4       	brne	.+20     	; 0x6db4 <pinMode+0x50>
		uint8_t oldSREG = SREG;
    6da0:	2f b7       	in	r18, 0x3f	; 63
                cli();
    6da2:	f8 94       	cli
		*reg &= ~bit;
    6da4:	8c 91       	ld	r24, X
    6da6:	93 2f       	mov	r25, r19
    6da8:	90 95       	com	r25
    6daa:	89 23       	and	r24, r25
    6dac:	8c 93       	st	X, r24
		*out &= ~bit;
    6dae:	88 81       	ld	r24, Y
    6db0:	89 23       	and	r24, r25
    6db2:	0b c0       	rjmp	.+22     	; 0x6dca <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    6db4:	62 30       	cpi	r22, 0x02	; 2
    6db6:	61 f4       	brne	.+24     	; 0x6dd0 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    6db8:	2f b7       	in	r18, 0x3f	; 63
                cli();
    6dba:	f8 94       	cli
		*reg &= ~bit;
    6dbc:	8c 91       	ld	r24, X
    6dbe:	93 2f       	mov	r25, r19
    6dc0:	90 95       	com	r25
    6dc2:	89 23       	and	r24, r25
    6dc4:	8c 93       	st	X, r24
		*out |= bit;
    6dc6:	88 81       	ld	r24, Y
    6dc8:	83 2b       	or	r24, r19
    6dca:	88 83       	st	Y, r24
		SREG = oldSREG;
    6dcc:	2f bf       	out	0x3f, r18	; 63
    6dce:	06 c0       	rjmp	.+12     	; 0x6ddc <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    6dd0:	9f b7       	in	r25, 0x3f	; 63
                cli();
    6dd2:	f8 94       	cli
		*reg |= bit;
    6dd4:	8c 91       	ld	r24, X
    6dd6:	83 2b       	or	r24, r19
    6dd8:	8c 93       	st	X, r24
		SREG = oldSREG;
    6dda:	9f bf       	out	0x3f, r25	; 63
	}
}
    6ddc:	df 91       	pop	r29
    6dde:	cf 91       	pop	r28
    6de0:	08 95       	ret

00006de2 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    6de2:	48 2f       	mov	r20, r24
    6de4:	50 e0       	ldi	r21, 0x00	; 0
    6de6:	ca 01       	movw	r24, r20
    6de8:	8d 53       	subi	r24, 0x3D	; 61
    6dea:	9b 4f       	sbci	r25, 0xFB	; 251
    6dec:	fc 01       	movw	r30, r24
    6dee:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    6df0:	ca 01       	movw	r24, r20
    6df2:	81 55       	subi	r24, 0x51	; 81
    6df4:	9b 4f       	sbci	r25, 0xFB	; 251
    6df6:	fc 01       	movw	r30, r24
    6df8:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    6dfa:	45 56       	subi	r20, 0x65	; 101
    6dfc:	5b 4f       	sbci	r21, 0xFB	; 251
    6dfe:	fa 01       	movw	r30, r20
    6e00:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    6e02:	33 23       	and	r19, r19
    6e04:	09 f4       	brne	.+2      	; 0x6e08 <digitalWrite+0x26>
    6e06:	40 c0       	rjmp	.+128    	; 0x6e88 <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    6e08:	22 23       	and	r18, r18
    6e0a:	51 f1       	breq	.+84     	; 0x6e60 <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    6e0c:	23 30       	cpi	r18, 0x03	; 3
    6e0e:	71 f0       	breq	.+28     	; 0x6e2c <digitalWrite+0x4a>
    6e10:	24 30       	cpi	r18, 0x04	; 4
    6e12:	28 f4       	brcc	.+10     	; 0x6e1e <digitalWrite+0x3c>
    6e14:	21 30       	cpi	r18, 0x01	; 1
    6e16:	a1 f0       	breq	.+40     	; 0x6e40 <digitalWrite+0x5e>
    6e18:	22 30       	cpi	r18, 0x02	; 2
    6e1a:	11 f5       	brne	.+68     	; 0x6e60 <digitalWrite+0x7e>
    6e1c:	14 c0       	rjmp	.+40     	; 0x6e46 <digitalWrite+0x64>
    6e1e:	26 30       	cpi	r18, 0x06	; 6
    6e20:	b1 f0       	breq	.+44     	; 0x6e4e <digitalWrite+0x6c>
    6e22:	27 30       	cpi	r18, 0x07	; 7
    6e24:	c1 f0       	breq	.+48     	; 0x6e56 <digitalWrite+0x74>
    6e26:	24 30       	cpi	r18, 0x04	; 4
    6e28:	d9 f4       	brne	.+54     	; 0x6e60 <digitalWrite+0x7e>
    6e2a:	04 c0       	rjmp	.+8      	; 0x6e34 <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    6e2c:	80 91 80 00 	lds	r24, 0x0080
    6e30:	8f 77       	andi	r24, 0x7F	; 127
    6e32:	03 c0       	rjmp	.+6      	; 0x6e3a <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    6e34:	80 91 80 00 	lds	r24, 0x0080
    6e38:	8f 7d       	andi	r24, 0xDF	; 223
    6e3a:	80 93 80 00 	sts	0x0080, r24
    6e3e:	10 c0       	rjmp	.+32     	; 0x6e60 <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    6e40:	84 b5       	in	r24, 0x24	; 36
    6e42:	8f 77       	andi	r24, 0x7F	; 127
    6e44:	02 c0       	rjmp	.+4      	; 0x6e4a <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    6e46:	84 b5       	in	r24, 0x24	; 36
    6e48:	8f 7d       	andi	r24, 0xDF	; 223
    6e4a:	84 bd       	out	0x24, r24	; 36
    6e4c:	09 c0       	rjmp	.+18     	; 0x6e60 <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    6e4e:	80 91 b0 00 	lds	r24, 0x00B0
    6e52:	8f 77       	andi	r24, 0x7F	; 127
    6e54:	03 c0       	rjmp	.+6      	; 0x6e5c <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    6e56:	80 91 b0 00 	lds	r24, 0x00B0
    6e5a:	8f 7d       	andi	r24, 0xDF	; 223
    6e5c:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    6e60:	e3 2f       	mov	r30, r19
    6e62:	f0 e0       	ldi	r31, 0x00	; 0
    6e64:	ee 0f       	add	r30, r30
    6e66:	ff 1f       	adc	r31, r31
    6e68:	e9 57       	subi	r30, 0x79	; 121
    6e6a:	fb 4f       	sbci	r31, 0xFB	; 251
    6e6c:	a5 91       	lpm	r26, Z+
    6e6e:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    6e70:	2f b7       	in	r18, 0x3f	; 63
	cli();
    6e72:	f8 94       	cli

	if (val == LOW) {
    6e74:	66 23       	and	r22, r22
    6e76:	21 f4       	brne	.+8      	; 0x6e80 <digitalWrite+0x9e>
		*out &= ~bit;
    6e78:	8c 91       	ld	r24, X
    6e7a:	90 95       	com	r25
    6e7c:	89 23       	and	r24, r25
    6e7e:	02 c0       	rjmp	.+4      	; 0x6e84 <digitalWrite+0xa2>
	} else {
		*out |= bit;
    6e80:	8c 91       	ld	r24, X
    6e82:	89 2b       	or	r24, r25
    6e84:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    6e86:	2f bf       	out	0x3f, r18	; 63
    6e88:	08 95       	ret

00006e8a <serialEvent()>:
#if !defined(USART_RX_vect) && !defined(USART0_RX_vect) && \
    !defined(USART_RXC_vect)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    6e8a:	08 95       	ret

00006e8c <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  ISR(USART_RX_vect)
    6e8c:	1f 92       	push	r1
    6e8e:	0f 92       	push	r0
    6e90:	0f b6       	in	r0, 0x3f	; 63
    6e92:	0f 92       	push	r0
    6e94:	11 24       	eor	r1, r1
    6e96:	2f 93       	push	r18
    6e98:	3f 93       	push	r19
    6e9a:	4f 93       	push	r20
    6e9c:	8f 93       	push	r24
    6e9e:	9f 93       	push	r25
    6ea0:	ef 93       	push	r30
    6ea2:	ff 93       	push	r31
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#endif
  {
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
    6ea4:	80 91 c0 00 	lds	r24, 0x00C0
    6ea8:	82 fd       	sbrc	r24, 2
    6eaa:	1d c0       	rjmp	.+58     	; 0x6ee6 <__vector_18+0x5a>
      unsigned char c = UDR0;
    6eac:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    6eb0:	20 91 01 04 	lds	r18, 0x0401
    6eb4:	30 91 02 04 	lds	r19, 0x0402

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    6eb8:	2f 5f       	subi	r18, 0xFF	; 255
    6eba:	3f 4f       	sbci	r19, 0xFF	; 255
    6ebc:	2f 73       	andi	r18, 0x3F	; 63
    6ebe:	30 70       	andi	r19, 0x00	; 0
    6ec0:	80 91 03 04 	lds	r24, 0x0403
    6ec4:	90 91 04 04 	lds	r25, 0x0404
    6ec8:	28 17       	cp	r18, r24
    6eca:	39 07       	cpc	r19, r25
    6ecc:	71 f0       	breq	.+28     	; 0x6eea <__vector_18+0x5e>
    buffer->buffer[buffer->head] = c;
    6ece:	e0 91 01 04 	lds	r30, 0x0401
    6ed2:	f0 91 02 04 	lds	r31, 0x0402
    6ed6:	ef 53       	subi	r30, 0x3F	; 63
    6ed8:	fc 4f       	sbci	r31, 0xFC	; 252
    6eda:	40 83       	st	Z, r20
    buffer->head = i;
    6edc:	30 93 02 04 	sts	0x0402, r19
    6ee0:	20 93 01 04 	sts	0x0401, r18
    6ee4:	02 c0       	rjmp	.+4      	; 0x6eea <__vector_18+0x5e>
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
      unsigned char c = UDR0;
      store_char(c, &rx_buffer);
    } else {
      unsigned char c = UDR0;
    6ee6:	80 91 c6 00 	lds	r24, 0x00C6
      unsigned char c = UDR;
    };
  #else
    #error UDR not defined
  #endif
  }
    6eea:	ff 91       	pop	r31
    6eec:	ef 91       	pop	r30
    6eee:	9f 91       	pop	r25
    6ef0:	8f 91       	pop	r24
    6ef2:	4f 91       	pop	r20
    6ef4:	3f 91       	pop	r19
    6ef6:	2f 91       	pop	r18
    6ef8:	0f 90       	pop	r0
    6efa:	0f be       	out	0x3f, r0	; 63
    6efc:	0f 90       	pop	r0
    6efe:	1f 90       	pop	r1
    6f00:	18 95       	reti

00006f02 <serialEventRun()>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    6f02:	e0 91 55 04 	lds	r30, 0x0455
    6f06:	f0 91 56 04 	lds	r31, 0x0456
    6f0a:	e0 5c       	subi	r30, 0xC0	; 192
    6f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    6f0e:	81 91       	ld	r24, Z+
    6f10:	91 91       	ld	r25, Z+
    6f12:	20 81       	ld	r18, Z
    6f14:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    6f16:	82 1b       	sub	r24, r18
    6f18:	93 0b       	sbc	r25, r19
    6f1a:	8f 73       	andi	r24, 0x3F	; 63
    6f1c:	90 70       	andi	r25, 0x00	; 0
    6f1e:	89 2b       	or	r24, r25
    6f20:	11 f0       	breq	.+4      	; 0x6f26 <serialEventRun()+0x24>
    6f22:	0e 94 45 37 	call	0x6e8a	; 0x6e8a <serialEvent()>
    6f26:	08 95       	ret

00006f28 <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
    6f28:	1f 92       	push	r1
    6f2a:	0f 92       	push	r0
    6f2c:	0f b6       	in	r0, 0x3f	; 63
    6f2e:	0f 92       	push	r0
    6f30:	11 24       	eor	r1, r1
    6f32:	2f 93       	push	r18
    6f34:	3f 93       	push	r19
    6f36:	8f 93       	push	r24
    6f38:	9f 93       	push	r25
    6f3a:	ef 93       	push	r30
    6f3c:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    6f3e:	20 91 45 04 	lds	r18, 0x0445
    6f42:	30 91 46 04 	lds	r19, 0x0446
    6f46:	80 91 47 04 	lds	r24, 0x0447
    6f4a:	90 91 48 04 	lds	r25, 0x0448
    6f4e:	28 17       	cp	r18, r24
    6f50:	39 07       	cpc	r19, r25
    6f52:	31 f4       	brne	.+12     	; 0x6f60 <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    6f54:	80 91 c1 00 	lds	r24, 0x00C1
    6f58:	8f 7d       	andi	r24, 0xDF	; 223
    6f5a:	80 93 c1 00 	sts	0x00C1, r24
    6f5e:	14 c0       	rjmp	.+40     	; 0x6f88 <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    6f60:	e0 91 47 04 	lds	r30, 0x0447
    6f64:	f0 91 48 04 	lds	r31, 0x0448
    6f68:	eb 5f       	subi	r30, 0xFB	; 251
    6f6a:	fb 4f       	sbci	r31, 0xFB	; 251
    6f6c:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    6f6e:	80 91 47 04 	lds	r24, 0x0447
    6f72:	90 91 48 04 	lds	r25, 0x0448
    6f76:	01 96       	adiw	r24, 0x01	; 1
    6f78:	8f 73       	andi	r24, 0x3F	; 63
    6f7a:	90 70       	andi	r25, 0x00	; 0
    6f7c:	90 93 48 04 	sts	0x0448, r25
    6f80:	80 93 47 04 	sts	0x0447, r24
	
  #if defined(UDR0)
    UDR0 = c;
    6f84:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    6f88:	ff 91       	pop	r31
    6f8a:	ef 91       	pop	r30
    6f8c:	9f 91       	pop	r25
    6f8e:	8f 91       	pop	r24
    6f90:	3f 91       	pop	r19
    6f92:	2f 91       	pop	r18
    6f94:	0f 90       	pop	r0
    6f96:	0f be       	out	0x3f, r0	; 63
    6f98:	0f 90       	pop	r0
    6f9a:	1f 90       	pop	r1
    6f9c:	18 95       	reti

00006f9e <HardwareSerial::begin(unsigned long)>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    6f9e:	af 92       	push	r10
    6fa0:	bf 92       	push	r11
    6fa2:	df 92       	push	r13
    6fa4:	ef 92       	push	r14
    6fa6:	ff 92       	push	r15
    6fa8:	0f 93       	push	r16
    6faa:	1f 93       	push	r17
    6fac:	cf 93       	push	r28
    6fae:	df 93       	push	r29
    6fb0:	ec 01       	movw	r28, r24
    6fb2:	7a 01       	movw	r14, r20
    6fb4:	8b 01       	movw	r16, r22
    6fb6:	dd 24       	eor	r13, r13
    6fb8:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    6fba:	91 e0       	ldi	r25, 0x01	; 1
    6fbc:	a9 2e       	mov	r10, r25
    6fbe:	b1 2c       	mov	r11, r1
    6fc0:	ec 89       	ldd	r30, Y+20	; 0x14
    6fc2:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
    6fc4:	dd 20       	and	r13, r13
    6fc6:	69 f0       	breq	.+26     	; 0x6fe2 <HardwareSerial::begin(unsigned long)+0x44>
    *_ucsra = 1 << _u2x;
    6fc8:	c5 01       	movw	r24, r10
    6fca:	08 a0       	ldd	r0, Y+32	; 0x20
    6fcc:	02 c0       	rjmp	.+4      	; 0x6fd2 <HardwareSerial::begin(unsigned long)+0x34>
    6fce:	88 0f       	add	r24, r24
    6fd0:	99 1f       	adc	r25, r25
    6fd2:	0a 94       	dec	r0
    6fd4:	e2 f7       	brpl	.-8      	; 0x6fce <HardwareSerial::begin(unsigned long)+0x30>
    6fd6:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    6fd8:	60 e9       	ldi	r22, 0x90	; 144
    6fda:	70 ed       	ldi	r23, 0xD0	; 208
    6fdc:	83 e0       	ldi	r24, 0x03	; 3
    6fde:	90 e0       	ldi	r25, 0x00	; 0
    6fe0:	05 c0       	rjmp	.+10     	; 0x6fec <HardwareSerial::begin(unsigned long)+0x4e>
  } else {
    *_ucsra = 0;
    6fe2:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    6fe4:	68 e4       	ldi	r22, 0x48	; 72
    6fe6:	78 ee       	ldi	r23, 0xE8	; 232
    6fe8:	81 e0       	ldi	r24, 0x01	; 1
    6fea:	90 e0       	ldi	r25, 0x00	; 0
    6fec:	a8 01       	movw	r20, r16
    6fee:	97 01       	movw	r18, r14
    6ff0:	0e 94 20 3c 	call	0x7840	; 0x7840 <__udivmodsi4>
    6ff4:	21 50       	subi	r18, 0x01	; 1
    6ff6:	30 40       	sbci	r19, 0x00	; 0
    6ff8:	40 40       	sbci	r20, 0x00	; 0
    6ffa:	50 40       	sbci	r21, 0x00	; 0
    6ffc:	56 95       	lsr	r21
    6ffe:	47 95       	ror	r20
    7000:	37 95       	ror	r19
    7002:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    7004:	80 e1       	ldi	r24, 0x10	; 16
    7006:	20 30       	cpi	r18, 0x00	; 0
    7008:	38 07       	cpc	r19, r24
    700a:	20 f0       	brcs	.+8      	; 0x7014 <HardwareSerial::begin(unsigned long)+0x76>
    700c:	dd 20       	and	r13, r13
    700e:	11 f0       	breq	.+4      	; 0x7014 <HardwareSerial::begin(unsigned long)+0x76>
    7010:	dd 24       	eor	r13, r13
    7012:	d6 cf       	rjmp	.-84     	; 0x6fc0 <HardwareSerial::begin(unsigned long)+0x22>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    7014:	e8 89       	ldd	r30, Y+16	; 0x10
    7016:	f9 89       	ldd	r31, Y+17	; 0x11
    7018:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    701a:	ea 89       	ldd	r30, Y+18	; 0x12
    701c:	fb 89       	ldd	r31, Y+19	; 0x13
    701e:	20 83       	st	Z, r18

  transmitting = false;
    7020:	19 a2       	std	Y+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
    7022:	ee 89       	ldd	r30, Y+22	; 0x16
    7024:	ff 89       	ldd	r31, Y+23	; 0x17
    7026:	40 81       	ld	r20, Z
    7028:	21 e0       	ldi	r18, 0x01	; 1
    702a:	30 e0       	ldi	r19, 0x00	; 0
    702c:	c9 01       	movw	r24, r18
    702e:	0c 8c       	ldd	r0, Y+28	; 0x1c
    7030:	02 c0       	rjmp	.+4      	; 0x7036 <HardwareSerial::begin(unsigned long)+0x98>
    7032:	88 0f       	add	r24, r24
    7034:	99 1f       	adc	r25, r25
    7036:	0a 94       	dec	r0
    7038:	e2 f7       	brpl	.-8      	; 0x7032 <HardwareSerial::begin(unsigned long)+0x94>
    703a:	48 2b       	or	r20, r24
    703c:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    703e:	ee 89       	ldd	r30, Y+22	; 0x16
    7040:	ff 89       	ldd	r31, Y+23	; 0x17
    7042:	40 81       	ld	r20, Z
    7044:	c9 01       	movw	r24, r18
    7046:	0d 8c       	ldd	r0, Y+29	; 0x1d
    7048:	02 c0       	rjmp	.+4      	; 0x704e <HardwareSerial::begin(unsigned long)+0xb0>
    704a:	88 0f       	add	r24, r24
    704c:	99 1f       	adc	r25, r25
    704e:	0a 94       	dec	r0
    7050:	e2 f7       	brpl	.-8      	; 0x704a <HardwareSerial::begin(unsigned long)+0xac>
    7052:	48 2b       	or	r20, r24
    7054:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    7056:	ee 89       	ldd	r30, Y+22	; 0x16
    7058:	ff 89       	ldd	r31, Y+23	; 0x17
    705a:	40 81       	ld	r20, Z
    705c:	c9 01       	movw	r24, r18
    705e:	0e 8c       	ldd	r0, Y+30	; 0x1e
    7060:	02 c0       	rjmp	.+4      	; 0x7066 <HardwareSerial::begin(unsigned long)+0xc8>
    7062:	88 0f       	add	r24, r24
    7064:	99 1f       	adc	r25, r25
    7066:	0a 94       	dec	r0
    7068:	e2 f7       	brpl	.-8      	; 0x7062 <HardwareSerial::begin(unsigned long)+0xc4>
    706a:	48 2b       	or	r20, r24
    706c:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    706e:	ee 89       	ldd	r30, Y+22	; 0x16
    7070:	ff 89       	ldd	r31, Y+23	; 0x17
    7072:	80 81       	ld	r24, Z
    7074:	0f 8c       	ldd	r0, Y+31	; 0x1f
    7076:	02 c0       	rjmp	.+4      	; 0x707c <HardwareSerial::begin(unsigned long)+0xde>
    7078:	22 0f       	add	r18, r18
    707a:	33 1f       	adc	r19, r19
    707c:	0a 94       	dec	r0
    707e:	e2 f7       	brpl	.-8      	; 0x7078 <HardwareSerial::begin(unsigned long)+0xda>
    7080:	20 95       	com	r18
    7082:	28 23       	and	r18, r24
    7084:	20 83       	st	Z, r18
}
    7086:	df 91       	pop	r29
    7088:	cf 91       	pop	r28
    708a:	1f 91       	pop	r17
    708c:	0f 91       	pop	r16
    708e:	ff 90       	pop	r15
    7090:	ef 90       	pop	r14
    7092:	df 90       	pop	r13
    7094:	bf 90       	pop	r11
    7096:	af 90       	pop	r10
    7098:	08 95       	ret

0000709a <HardwareSerial::end()>:
  sbi(*_ucsrb, _txen);
  sbi(*_ucsrb, _rxcie);
  cbi(*_ucsrb, _udrie);
}

void HardwareSerial::end()
    709a:	cf 93       	push	r28
    709c:	df 93       	push	r29
    709e:	dc 01       	movw	r26, r24
{
  // wait for transmission of outgoing data
  while (_tx_buffer->head != _tx_buffer->tail)
    70a0:	1e 96       	adiw	r26, 0x0e	; 14
    70a2:	8d 91       	ld	r24, X+
    70a4:	9c 91       	ld	r25, X
    70a6:	1f 97       	sbiw	r26, 0x0f	; 15
    70a8:	ec 01       	movw	r28, r24
    70aa:	c0 5c       	subi	r28, 0xC0	; 192
    70ac:	df 4f       	sbci	r29, 0xFF	; 255
    70ae:	fc 01       	movw	r30, r24
    70b0:	ee 5b       	subi	r30, 0xBE	; 190
    70b2:	ff 4f       	sbci	r31, 0xFF	; 255
    70b4:	28 81       	ld	r18, Y
    70b6:	39 81       	ldd	r19, Y+1	; 0x01
    70b8:	80 81       	ld	r24, Z
    70ba:	91 81       	ldd	r25, Z+1	; 0x01
    70bc:	28 17       	cp	r18, r24
    70be:	39 07       	cpc	r19, r25
    70c0:	c9 f7       	brne	.-14     	; 0x70b4 <HardwareSerial::end()+0x1a>
    ;

  cbi(*_ucsrb, _rxen);
    70c2:	56 96       	adiw	r26, 0x16	; 22
    70c4:	ed 91       	ld	r30, X+
    70c6:	fc 91       	ld	r31, X
    70c8:	57 97       	sbiw	r26, 0x17	; 23
    70ca:	40 81       	ld	r20, Z
    70cc:	21 e0       	ldi	r18, 0x01	; 1
    70ce:	30 e0       	ldi	r19, 0x00	; 0
    70d0:	c9 01       	movw	r24, r18
    70d2:	5c 96       	adiw	r26, 0x1c	; 28
    70d4:	0c 90       	ld	r0, X
    70d6:	5c 97       	sbiw	r26, 0x1c	; 28
    70d8:	02 c0       	rjmp	.+4      	; 0x70de <HardwareSerial::end()+0x44>
    70da:	88 0f       	add	r24, r24
    70dc:	99 1f       	adc	r25, r25
    70de:	0a 94       	dec	r0
    70e0:	e2 f7       	brpl	.-8      	; 0x70da <HardwareSerial::end()+0x40>
    70e2:	80 95       	com	r24
    70e4:	84 23       	and	r24, r20
    70e6:	80 83       	st	Z, r24
  cbi(*_ucsrb, _txen);
    70e8:	56 96       	adiw	r26, 0x16	; 22
    70ea:	ed 91       	ld	r30, X+
    70ec:	fc 91       	ld	r31, X
    70ee:	57 97       	sbiw	r26, 0x17	; 23
    70f0:	40 81       	ld	r20, Z
    70f2:	c9 01       	movw	r24, r18
    70f4:	5d 96       	adiw	r26, 0x1d	; 29
    70f6:	0c 90       	ld	r0, X
    70f8:	5d 97       	sbiw	r26, 0x1d	; 29
    70fa:	02 c0       	rjmp	.+4      	; 0x7100 <HardwareSerial::end()+0x66>
    70fc:	88 0f       	add	r24, r24
    70fe:	99 1f       	adc	r25, r25
    7100:	0a 94       	dec	r0
    7102:	e2 f7       	brpl	.-8      	; 0x70fc <HardwareSerial::end()+0x62>
    7104:	80 95       	com	r24
    7106:	84 23       	and	r24, r20
    7108:	80 83       	st	Z, r24
  cbi(*_ucsrb, _rxcie);  
    710a:	56 96       	adiw	r26, 0x16	; 22
    710c:	ed 91       	ld	r30, X+
    710e:	fc 91       	ld	r31, X
    7110:	57 97       	sbiw	r26, 0x17	; 23
    7112:	40 81       	ld	r20, Z
    7114:	c9 01       	movw	r24, r18
    7116:	5e 96       	adiw	r26, 0x1e	; 30
    7118:	0c 90       	ld	r0, X
    711a:	5e 97       	sbiw	r26, 0x1e	; 30
    711c:	02 c0       	rjmp	.+4      	; 0x7122 <HardwareSerial::end()+0x88>
    711e:	88 0f       	add	r24, r24
    7120:	99 1f       	adc	r25, r25
    7122:	0a 94       	dec	r0
    7124:	e2 f7       	brpl	.-8      	; 0x711e <HardwareSerial::end()+0x84>
    7126:	80 95       	com	r24
    7128:	84 23       	and	r24, r20
    712a:	80 83       	st	Z, r24
  cbi(*_ucsrb, _udrie);
    712c:	56 96       	adiw	r26, 0x16	; 22
    712e:	ed 91       	ld	r30, X+
    7130:	fc 91       	ld	r31, X
    7132:	57 97       	sbiw	r26, 0x17	; 23
    7134:	80 81       	ld	r24, Z
    7136:	5f 96       	adiw	r26, 0x1f	; 31
    7138:	0c 90       	ld	r0, X
    713a:	5f 97       	sbiw	r26, 0x1f	; 31
    713c:	02 c0       	rjmp	.+4      	; 0x7142 <HardwareSerial::end()+0xa8>
    713e:	22 0f       	add	r18, r18
    7140:	33 1f       	adc	r19, r19
    7142:	0a 94       	dec	r0
    7144:	e2 f7       	brpl	.-8      	; 0x713e <HardwareSerial::end()+0xa4>
    7146:	20 95       	com	r18
    7148:	28 23       	and	r18, r24
    714a:	20 83       	st	Z, r18
  
  // clear any received data
  _rx_buffer->head = _rx_buffer->tail;
    714c:	1c 96       	adiw	r26, 0x0c	; 12
    714e:	ed 91       	ld	r30, X+
    7150:	fc 91       	ld	r31, X
    7152:	1d 97       	sbiw	r26, 0x0d	; 13
    7154:	ee 5b       	subi	r30, 0xBE	; 190
    7156:	ff 4f       	sbci	r31, 0xFF	; 255
    7158:	80 81       	ld	r24, Z
    715a:	91 81       	ldd	r25, Z+1	; 0x01
    715c:	92 93       	st	-Z, r25
    715e:	82 93       	st	-Z, r24
}
    7160:	df 91       	pop	r29
    7162:	cf 91       	pop	r28
    7164:	08 95       	ret

00007166 <HardwareSerial::available()>:

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    7166:	dc 01       	movw	r26, r24
    7168:	1c 96       	adiw	r26, 0x0c	; 12
    716a:	ed 91       	ld	r30, X+
    716c:	fc 91       	ld	r31, X
    716e:	1d 97       	sbiw	r26, 0x0d	; 13
    7170:	e0 5c       	subi	r30, 0xC0	; 192
    7172:	ff 4f       	sbci	r31, 0xFF	; 255
    7174:	21 91       	ld	r18, Z+
    7176:	31 91       	ld	r19, Z+
    7178:	80 81       	ld	r24, Z
    717a:	91 81       	ldd	r25, Z+1	; 0x01
    717c:	28 1b       	sub	r18, r24
    717e:	39 0b       	sbc	r19, r25
    7180:	2f 73       	andi	r18, 0x3F	; 63
    7182:	30 70       	andi	r19, 0x00	; 0
}
    7184:	c9 01       	movw	r24, r18
    7186:	08 95       	ret

00007188 <HardwareSerial::peek()>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    7188:	dc 01       	movw	r26, r24
    718a:	1c 96       	adiw	r26, 0x0c	; 12
    718c:	ed 91       	ld	r30, X+
    718e:	fc 91       	ld	r31, X
    7190:	1d 97       	sbiw	r26, 0x0d	; 13
    7192:	e0 5c       	subi	r30, 0xC0	; 192
    7194:	ff 4f       	sbci	r31, 0xFF	; 255
    7196:	20 81       	ld	r18, Z
    7198:	31 81       	ldd	r19, Z+1	; 0x01
    719a:	e0 54       	subi	r30, 0x40	; 64
    719c:	f0 40       	sbci	r31, 0x00	; 0
    719e:	df 01       	movw	r26, r30
    71a0:	ae 5b       	subi	r26, 0xBE	; 190
    71a2:	bf 4f       	sbci	r27, 0xFF	; 255
    71a4:	8d 91       	ld	r24, X+
    71a6:	9c 91       	ld	r25, X
    71a8:	11 97       	sbiw	r26, 0x01	; 1
    71aa:	28 17       	cp	r18, r24
    71ac:	39 07       	cpc	r19, r25
    71ae:	19 f4       	brne	.+6      	; 0x71b6 <HardwareSerial::peek()+0x2e>
    71b0:	2f ef       	ldi	r18, 0xFF	; 255
    71b2:	3f ef       	ldi	r19, 0xFF	; 255
    71b4:	07 c0       	rjmp	.+14     	; 0x71c4 <HardwareSerial::peek()+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    71b6:	8d 91       	ld	r24, X+
    71b8:	9c 91       	ld	r25, X
    71ba:	e8 0f       	add	r30, r24
    71bc:	f9 1f       	adc	r31, r25
    71be:	80 81       	ld	r24, Z
    71c0:	28 2f       	mov	r18, r24
    71c2:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    71c4:	c9 01       	movw	r24, r18
    71c6:	08 95       	ret

000071c8 <HardwareSerial::read()>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    71c8:	dc 01       	movw	r26, r24
    71ca:	1c 96       	adiw	r26, 0x0c	; 12
    71cc:	ed 91       	ld	r30, X+
    71ce:	fc 91       	ld	r31, X
    71d0:	1d 97       	sbiw	r26, 0x0d	; 13
    71d2:	e0 5c       	subi	r30, 0xC0	; 192
    71d4:	ff 4f       	sbci	r31, 0xFF	; 255
    71d6:	20 81       	ld	r18, Z
    71d8:	31 81       	ldd	r19, Z+1	; 0x01
    71da:	e0 54       	subi	r30, 0x40	; 64
    71dc:	f0 40       	sbci	r31, 0x00	; 0
    71de:	df 01       	movw	r26, r30
    71e0:	ae 5b       	subi	r26, 0xBE	; 190
    71e2:	bf 4f       	sbci	r27, 0xFF	; 255
    71e4:	8d 91       	ld	r24, X+
    71e6:	9c 91       	ld	r25, X
    71e8:	11 97       	sbiw	r26, 0x01	; 1
    71ea:	28 17       	cp	r18, r24
    71ec:	39 07       	cpc	r19, r25
    71ee:	19 f4       	brne	.+6      	; 0x71f6 <HardwareSerial::read()+0x2e>
    71f0:	2f ef       	ldi	r18, 0xFF	; 255
    71f2:	3f ef       	ldi	r19, 0xFF	; 255
    71f4:	10 c0       	rjmp	.+32     	; 0x7216 <HardwareSerial::read()+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    71f6:	8d 91       	ld	r24, X+
    71f8:	9c 91       	ld	r25, X
    71fa:	11 97       	sbiw	r26, 0x01	; 1
    71fc:	e8 0f       	add	r30, r24
    71fe:	f9 1f       	adc	r31, r25
    7200:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    7202:	8d 91       	ld	r24, X+
    7204:	9c 91       	ld	r25, X
    7206:	11 97       	sbiw	r26, 0x01	; 1
    7208:	01 96       	adiw	r24, 0x01	; 1
    720a:	8f 73       	andi	r24, 0x3F	; 63
    720c:	90 70       	andi	r25, 0x00	; 0
    720e:	11 96       	adiw	r26, 0x01	; 1
    7210:	9c 93       	st	X, r25
    7212:	8e 93       	st	-X, r24
    return c;
    7214:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    7216:	c9 01       	movw	r24, r18
    7218:	08 95       	ret

0000721a <HardwareSerial::flush()>:

void HardwareSerial::flush()
    721a:	dc 01       	movw	r26, r24
{
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
    721c:	91 96       	adiw	r26, 0x21	; 33
    721e:	8c 91       	ld	r24, X
    7220:	91 97       	sbiw	r26, 0x21	; 33
    7222:	88 23       	and	r24, r24
    7224:	39 f0       	breq	.+14     	; 0x7234 <HardwareSerial::flush()+0x1a>
    7226:	54 96       	adiw	r26, 0x14	; 20
    7228:	ed 91       	ld	r30, X+
    722a:	fc 91       	ld	r31, X
    722c:	55 97       	sbiw	r26, 0x15	; 21
    722e:	80 81       	ld	r24, Z
    7230:	86 ff       	sbrs	r24, 6
    7232:	f9 cf       	rjmp	.-14     	; 0x7226 <HardwareSerial::flush()+0xc>
  transmitting = false;
    7234:	91 96       	adiw	r26, 0x21	; 33
    7236:	1c 92       	st	X, r1
}
    7238:	08 95       	ret

0000723a <HardwareSerial::write(unsigned char)>:

size_t HardwareSerial::write(uint8_t c)
    723a:	cf 93       	push	r28
    723c:	df 93       	push	r29
    723e:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    7240:	ee 85       	ldd	r30, Y+14	; 0x0e
    7242:	ff 85       	ldd	r31, Y+15	; 0x0f
    7244:	e0 5c       	subi	r30, 0xC0	; 192
    7246:	ff 4f       	sbci	r31, 0xFF	; 255
    7248:	20 81       	ld	r18, Z
    724a:	31 81       	ldd	r19, Z+1	; 0x01
    724c:	e0 54       	subi	r30, 0x40	; 64
    724e:	f0 40       	sbci	r31, 0x00	; 0
    7250:	2f 5f       	subi	r18, 0xFF	; 255
    7252:	3f 4f       	sbci	r19, 0xFF	; 255
    7254:	2f 73       	andi	r18, 0x3F	; 63
    7256:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    7258:	df 01       	movw	r26, r30
    725a:	ae 5b       	subi	r26, 0xBE	; 190
    725c:	bf 4f       	sbci	r27, 0xFF	; 255
    725e:	8d 91       	ld	r24, X+
    7260:	9c 91       	ld	r25, X
    7262:	11 97       	sbiw	r26, 0x01	; 1
    7264:	28 17       	cp	r18, r24
    7266:	39 07       	cpc	r19, r25
    7268:	d1 f3       	breq	.-12     	; 0x725e <HardwareSerial::write(unsigned char)+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    726a:	e0 5c       	subi	r30, 0xC0	; 192
    726c:	ff 4f       	sbci	r31, 0xFF	; 255
    726e:	80 81       	ld	r24, Z
    7270:	91 81       	ldd	r25, Z+1	; 0x01
    7272:	e0 54       	subi	r30, 0x40	; 64
    7274:	f0 40       	sbci	r31, 0x00	; 0
    7276:	e8 0f       	add	r30, r24
    7278:	f9 1f       	adc	r31, r25
    727a:	60 83       	st	Z, r22
  _tx_buffer->head = i;
    727c:	ee 85       	ldd	r30, Y+14	; 0x0e
    727e:	ff 85       	ldd	r31, Y+15	; 0x0f
    7280:	e0 5c       	subi	r30, 0xC0	; 192
    7282:	ff 4f       	sbci	r31, 0xFF	; 255
    7284:	31 83       	std	Z+1, r19	; 0x01
    7286:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    7288:	ee 89       	ldd	r30, Y+22	; 0x16
    728a:	ff 89       	ldd	r31, Y+23	; 0x17
    728c:	20 81       	ld	r18, Z
    728e:	81 e0       	ldi	r24, 0x01	; 1
    7290:	90 e0       	ldi	r25, 0x00	; 0
    7292:	0f 8c       	ldd	r0, Y+31	; 0x1f
    7294:	02 c0       	rjmp	.+4      	; 0x729a <HardwareSerial::write(unsigned char)+0x60>
    7296:	88 0f       	add	r24, r24
    7298:	99 1f       	adc	r25, r25
    729a:	0a 94       	dec	r0
    729c:	e2 f7       	brpl	.-8      	; 0x7296 <HardwareSerial::write(unsigned char)+0x5c>
    729e:	28 2b       	or	r18, r24
    72a0:	20 83       	st	Z, r18
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
    72a2:	81 e0       	ldi	r24, 0x01	; 1
    72a4:	89 a3       	std	Y+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
    72a6:	ec 89       	ldd	r30, Y+20	; 0x14
    72a8:	fd 89       	ldd	r31, Y+21	; 0x15
    72aa:	80 81       	ld	r24, Z
    72ac:	80 64       	ori	r24, 0x40	; 64
    72ae:	80 83       	st	Z, r24
  
  return 1;
}
    72b0:	81 e0       	ldi	r24, 0x01	; 1
    72b2:	90 e0       	ldi	r25, 0x00	; 0
    72b4:	df 91       	pop	r29
    72b6:	cf 91       	pop	r28
    72b8:	08 95       	ret

000072ba <global constructors keyed to rx_buffer>:
  public:
    Print() : write_error(0) {}
    72ba:	10 92 4c 04 	sts	0x044C, r1
    72be:	10 92 4b 04 	sts	0x044B, r1
    72c2:	88 ee       	ldi	r24, 0xE8	; 232
    72c4:	93 e0       	ldi	r25, 0x03	; 3
    72c6:	a0 e0       	ldi	r26, 0x00	; 0
    72c8:	b0 e0       	ldi	r27, 0x00	; 0
    72ca:	80 93 4d 04 	sts	0x044D, r24
    72ce:	90 93 4e 04 	sts	0x044E, r25
    72d2:	a0 93 4f 04 	sts	0x044F, r26
    72d6:	b0 93 50 04 	sts	0x0450, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    72da:	89 e0       	ldi	r24, 0x09	; 9
    72dc:	92 e0       	ldi	r25, 0x02	; 2
    72de:	90 93 4a 04 	sts	0x044A, r25
    72e2:	80 93 49 04 	sts	0x0449, r24
{
  _rx_buffer = rx_buffer;
    72e6:	81 ec       	ldi	r24, 0xC1	; 193
    72e8:	93 e0       	ldi	r25, 0x03	; 3
    72ea:	90 93 56 04 	sts	0x0456, r25
    72ee:	80 93 55 04 	sts	0x0455, r24
  _tx_buffer = tx_buffer;
    72f2:	85 e0       	ldi	r24, 0x05	; 5
    72f4:	94 e0       	ldi	r25, 0x04	; 4
    72f6:	90 93 58 04 	sts	0x0458, r25
    72fa:	80 93 57 04 	sts	0x0457, r24
  _ubrrh = ubrrh;
    72fe:	85 ec       	ldi	r24, 0xC5	; 197
    7300:	90 e0       	ldi	r25, 0x00	; 0
    7302:	90 93 5a 04 	sts	0x045A, r25
    7306:	80 93 59 04 	sts	0x0459, r24
  _ubrrl = ubrrl;
    730a:	84 ec       	ldi	r24, 0xC4	; 196
    730c:	90 e0       	ldi	r25, 0x00	; 0
    730e:	90 93 5c 04 	sts	0x045C, r25
    7312:	80 93 5b 04 	sts	0x045B, r24
  _ucsra = ucsra;
    7316:	80 ec       	ldi	r24, 0xC0	; 192
    7318:	90 e0       	ldi	r25, 0x00	; 0
    731a:	90 93 5e 04 	sts	0x045E, r25
    731e:	80 93 5d 04 	sts	0x045D, r24
  _ucsrb = ucsrb;
    7322:	81 ec       	ldi	r24, 0xC1	; 193
    7324:	90 e0       	ldi	r25, 0x00	; 0
    7326:	90 93 60 04 	sts	0x0460, r25
    732a:	80 93 5f 04 	sts	0x045F, r24
  _ucsrc = ucsrc;
    732e:	82 ec       	ldi	r24, 0xC2	; 194
    7330:	90 e0       	ldi	r25, 0x00	; 0
    7332:	90 93 62 04 	sts	0x0462, r25
    7336:	80 93 61 04 	sts	0x0461, r24
  _udr = udr;
    733a:	86 ec       	ldi	r24, 0xC6	; 198
    733c:	90 e0       	ldi	r25, 0x00	; 0
    733e:	90 93 64 04 	sts	0x0464, r25
    7342:	80 93 63 04 	sts	0x0463, r24
  _rxen = rxen;
    7346:	84 e0       	ldi	r24, 0x04	; 4
    7348:	80 93 65 04 	sts	0x0465, r24
  _txen = txen;
    734c:	83 e0       	ldi	r24, 0x03	; 3
    734e:	80 93 66 04 	sts	0x0466, r24
  _rxcie = rxcie;
    7352:	87 e0       	ldi	r24, 0x07	; 7
    7354:	80 93 67 04 	sts	0x0467, r24
  _udrie = udrie;
    7358:	85 e0       	ldi	r24, 0x05	; 5
    735a:	80 93 68 04 	sts	0x0468, r24
  _u2x = u2x;
    735e:	81 e0       	ldi	r24, 0x01	; 1
    7360:	80 93 69 04 	sts	0x0469, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    7364:	08 95       	ret

00007366 <main>:
#include <Arduino.h>

int main(void)
    7366:	cf 93       	push	r28
    7368:	df 93       	push	r29
{
	init();
    736a:	0e 94 96 3b 	call	0x772c	; 0x772c <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    736e:	0e 94 49 30 	call	0x6092	; 0x6092 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    7372:	c1 e8       	ldi	r28, 0x81	; 129
    7374:	d7 e3       	ldi	r29, 0x37	; 55
#endif
	
	setup();
    
	for (;;) {
		loop();
    7376:	0e 94 74 2f 	call	0x5ee8	; 0x5ee8 <loop>
		if (serialEventRun) serialEventRun();
    737a:	20 97       	sbiw	r28, 0x00	; 0
    737c:	e1 f3       	breq	.-8      	; 0x7376 <main+0x10>
    737e:	0e 94 81 37 	call	0x6f02	; 0x6f02 <serialEventRun()>
    7382:	f9 cf       	rjmp	.-14     	; 0x7376 <main+0x10>

00007384 <Print::write(unsigned char const*, unsigned int)>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    7384:	cf 92       	push	r12
    7386:	df 92       	push	r13
    7388:	ef 92       	push	r14
    738a:	ff 92       	push	r15
    738c:	0f 93       	push	r16
    738e:	1f 93       	push	r17
    7390:	cf 93       	push	r28
    7392:	df 93       	push	r29
    7394:	7c 01       	movw	r14, r24
    7396:	6b 01       	movw	r12, r22
    7398:	8a 01       	movw	r16, r20
    739a:	c0 e0       	ldi	r28, 0x00	; 0
    739c:	d0 e0       	ldi	r29, 0x00	; 0
    739e:	0f c0       	rjmp	.+30     	; 0x73be <Print::write(unsigned char const*, unsigned int)+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    73a0:	d6 01       	movw	r26, r12
    73a2:	6d 91       	ld	r22, X+
    73a4:	6d 01       	movw	r12, r26
    73a6:	d7 01       	movw	r26, r14
    73a8:	ed 91       	ld	r30, X+
    73aa:	fc 91       	ld	r31, X
    73ac:	01 90       	ld	r0, Z+
    73ae:	f0 81       	ld	r31, Z
    73b0:	e0 2d       	mov	r30, r0
    73b2:	c7 01       	movw	r24, r14
    73b4:	09 95       	icall
    73b6:	c8 0f       	add	r28, r24
    73b8:	d9 1f       	adc	r29, r25
    73ba:	01 50       	subi	r16, 0x01	; 1
    73bc:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    73be:	01 15       	cp	r16, r1
    73c0:	11 05       	cpc	r17, r1
    73c2:	71 f7       	brne	.-36     	; 0x73a0 <Print::write(unsigned char const*, unsigned int)+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    73c4:	ce 01       	movw	r24, r28
    73c6:	df 91       	pop	r29
    73c8:	cf 91       	pop	r28
    73ca:	1f 91       	pop	r17
    73cc:	0f 91       	pop	r16
    73ce:	ff 90       	pop	r15
    73d0:	ef 90       	pop	r14
    73d2:	df 90       	pop	r13
    73d4:	cf 90       	pop	r12
    73d6:	08 95       	ret

000073d8 <Print::print(__FlashStringHelper const*)>:

size_t Print::print(const __FlashStringHelper *ifsh)
    73d8:	ef 92       	push	r14
    73da:	ff 92       	push	r15
    73dc:	0f 93       	push	r16
    73de:	1f 93       	push	r17
    73e0:	cf 93       	push	r28
    73e2:	df 93       	push	r29
    73e4:	7c 01       	movw	r14, r24
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
    73e6:	8b 01       	movw	r16, r22
    73e8:	c0 e0       	ldi	r28, 0x00	; 0
    73ea:	d0 e0       	ldi	r29, 0x00	; 0
    73ec:	f8 01       	movw	r30, r16
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    73ee:	0f 5f       	subi	r16, 0xFF	; 255
    73f0:	1f 4f       	sbci	r17, 0xFF	; 255
    73f2:	64 91       	lpm	r22, Z+
    if (c == 0) break;
    73f4:	66 23       	and	r22, r22
    73f6:	59 f0       	breq	.+22     	; 0x740e <Print::print(__FlashStringHelper const*)+0x36>
    n += write(c);
    73f8:	d7 01       	movw	r26, r14
    73fa:	ed 91       	ld	r30, X+
    73fc:	fc 91       	ld	r31, X
    73fe:	01 90       	ld	r0, Z+
    7400:	f0 81       	ld	r31, Z
    7402:	e0 2d       	mov	r30, r0
    7404:	c7 01       	movw	r24, r14
    7406:	09 95       	icall
    7408:	c8 0f       	add	r28, r24
    740a:	d9 1f       	adc	r29, r25
    740c:	ef cf       	rjmp	.-34     	; 0x73ec <Print::print(__FlashStringHelper const*)+0x14>
  }
  return n;
}
    740e:	ce 01       	movw	r24, r28
    7410:	df 91       	pop	r29
    7412:	cf 91       	pop	r28
    7414:	1f 91       	pop	r17
    7416:	0f 91       	pop	r16
    7418:	ff 90       	pop	r15
    741a:	ef 90       	pop	r14
    741c:	08 95       	ret

0000741e <Print::print(char)>:
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
    741e:	dc 01       	movw	r26, r24
{
  return write(c);
    7420:	ed 91       	ld	r30, X+
    7422:	fc 91       	ld	r31, X
    7424:	01 90       	ld	r0, Z+
    7426:	f0 81       	ld	r31, Z
    7428:	e0 2d       	mov	r30, r0
    742a:	09 95       	icall
}
    742c:	08 95       	ret

0000742e <Print::println()>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
    742e:	ef 92       	push	r14
    7430:	ff 92       	push	r15
    7432:	0f 93       	push	r16
    7434:	1f 93       	push	r17
    7436:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    7438:	dc 01       	movw	r26, r24
    743a:	ed 91       	ld	r30, X+
    743c:	fc 91       	ld	r31, X
    743e:	01 90       	ld	r0, Z+
    7440:	f0 81       	ld	r31, Z
    7442:	e0 2d       	mov	r30, r0
    7444:	6d e0       	ldi	r22, 0x0D	; 13
    7446:	09 95       	icall
    7448:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    744a:	d8 01       	movw	r26, r16
    744c:	ed 91       	ld	r30, X+
    744e:	fc 91       	ld	r31, X
    7450:	01 90       	ld	r0, Z+
    7452:	f0 81       	ld	r31, Z
    7454:	e0 2d       	mov	r30, r0
    7456:	c8 01       	movw	r24, r16
    7458:	6a e0       	ldi	r22, 0x0A	; 10
    745a:	09 95       	icall
    745c:	9c 01       	movw	r18, r24
    745e:	2e 0d       	add	r18, r14
    7460:	3f 1d       	adc	r19, r15
    7462:	c9 01       	movw	r24, r18
    7464:	1f 91       	pop	r17
    7466:	0f 91       	pop	r16
    7468:	ff 90       	pop	r15
    746a:	ef 90       	pop	r14
    746c:	08 95       	ret

0000746e <Print::println(__FlashStringHelper const*)>:
size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
    746e:	ef 92       	push	r14
    7470:	ff 92       	push	r15
    7472:	0f 93       	push	r16
    7474:	1f 93       	push	r17
    7476:	7c 01       	movw	r14, r24
{
  size_t n = print(ifsh);
    7478:	0e 94 ec 39 	call	0x73d8	; 0x73d8 <Print::print(__FlashStringHelper const*)>
    747c:	8c 01       	movw	r16, r24
  n += println();
    747e:	c7 01       	movw	r24, r14
    7480:	0e 94 17 3a 	call	0x742e	; 0x742e <Print::println()>
    7484:	9c 01       	movw	r18, r24
    7486:	20 0f       	add	r18, r16
    7488:	31 1f       	adc	r19, r17
  return n;
}
    748a:	c9 01       	movw	r24, r18
    748c:	1f 91       	pop	r17
    748e:	0f 91       	pop	r16
    7490:	ff 90       	pop	r15
    7492:	ef 90       	pop	r14
    7494:	08 95       	ret

00007496 <Print::write(char const*)>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    7496:	cf 93       	push	r28
    7498:	df 93       	push	r29
    749a:	ec 01       	movw	r28, r24
      if (str == NULL) return 0;
    749c:	61 15       	cp	r22, r1
    749e:	71 05       	cpc	r23, r1
    74a0:	19 f4       	brne	.+6      	; 0x74a8 <Print::write(char const*)+0x12>
    74a2:	20 e0       	ldi	r18, 0x00	; 0
    74a4:	30 e0       	ldi	r19, 0x00	; 0
    74a6:	0f c0       	rjmp	.+30     	; 0x74c6 <Print::write(char const*)+0x30>
      return write((const uint8_t *)str, strlen(str));
    74a8:	db 01       	movw	r26, r22
    74aa:	0d 90       	ld	r0, X+
    74ac:	00 20       	and	r0, r0
    74ae:	e9 f7       	brne	.-6      	; 0x74aa <Print::write(char const*)+0x14>
    74b0:	11 97       	sbiw	r26, 0x01	; 1
    74b2:	a6 1b       	sub	r26, r22
    74b4:	b7 0b       	sbc	r27, r23
    74b6:	e8 81       	ld	r30, Y
    74b8:	f9 81       	ldd	r31, Y+1	; 0x01
    74ba:	02 80       	ldd	r0, Z+2	; 0x02
    74bc:	f3 81       	ldd	r31, Z+3	; 0x03
    74be:	e0 2d       	mov	r30, r0
    74c0:	ad 01       	movw	r20, r26
    74c2:	09 95       	icall
    74c4:	9c 01       	movw	r18, r24
    }
    74c6:	c9 01       	movw	r24, r18
    74c8:	df 91       	pop	r29
    74ca:	cf 91       	pop	r28
    74cc:	08 95       	ret

000074ce <Print::printNumber(unsigned long, unsigned char)>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    74ce:	4f 92       	push	r4
    74d0:	5f 92       	push	r5
    74d2:	7f 92       	push	r7
    74d4:	8f 92       	push	r8
    74d6:	9f 92       	push	r9
    74d8:	af 92       	push	r10
    74da:	bf 92       	push	r11
    74dc:	cf 92       	push	r12
    74de:	df 92       	push	r13
    74e0:	ef 92       	push	r14
    74e2:	ff 92       	push	r15
    74e4:	0f 93       	push	r16
    74e6:	1f 93       	push	r17
    74e8:	df 93       	push	r29
    74ea:	cf 93       	push	r28
    74ec:	cd b7       	in	r28, 0x3d	; 61
    74ee:	de b7       	in	r29, 0x3e	; 62
    74f0:	a1 97       	sbiw	r28, 0x21	; 33
    74f2:	0f b6       	in	r0, 0x3f	; 63
    74f4:	f8 94       	cli
    74f6:	de bf       	out	0x3e, r29	; 62
    74f8:	0f be       	out	0x3f, r0	; 63
    74fa:	cd bf       	out	0x3d, r28	; 61
    74fc:	2c 01       	movw	r4, r24
    74fe:	74 2e       	mov	r7, r20
    7500:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    7502:	22 30       	cpi	r18, 0x02	; 2
    7504:	08 f4       	brcc	.+2      	; 0x7508 <Print::printNumber(unsigned long, unsigned char)+0x3a>
    7506:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    7508:	19 a2       	std	Y+33, r1	; 0x21
    750a:	31 e2       	ldi	r19, 0x21	; 33
    750c:	c3 2e       	mov	r12, r19
    750e:	d1 2c       	mov	r13, r1
    7510:	cc 0e       	add	r12, r28
    7512:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    7514:	82 2e       	mov	r8, r18
    7516:	99 24       	eor	r9, r9
    7518:	aa 24       	eor	r10, r10
    751a:	bb 24       	eor	r11, r11
    751c:	67 2d       	mov	r22, r7
    751e:	75 2f       	mov	r23, r21
    7520:	a5 01       	movw	r20, r10
    7522:	94 01       	movw	r18, r8
    7524:	0e 94 20 3c 	call	0x7840	; 0x7840 <__udivmodsi4>
    7528:	79 01       	movw	r14, r18
    752a:	8a 01       	movw	r16, r20
    char c = m - base * n;
    752c:	c8 01       	movw	r24, r16
    752e:	b7 01       	movw	r22, r14
    7530:	a5 01       	movw	r20, r10
    7532:	94 01       	movw	r18, r8
    7534:	0e 94 ce 3b 	call	0x779c	; 0x779c <__mulsi3>
    7538:	47 2d       	mov	r20, r7
    753a:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    753c:	08 94       	sec
    753e:	c1 08       	sbc	r12, r1
    7540:	d1 08       	sbc	r13, r1
    7542:	4a 30       	cpi	r20, 0x0A	; 10
    7544:	14 f4       	brge	.+4      	; 0x754a <Print::printNumber(unsigned long, unsigned char)+0x7c>
    7546:	40 5d       	subi	r20, 0xD0	; 208
    7548:	01 c0       	rjmp	.+2      	; 0x754c <Print::printNumber(unsigned long, unsigned char)+0x7e>
    754a:	49 5c       	subi	r20, 0xC9	; 201
    754c:	f6 01       	movw	r30, r12
    754e:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    7550:	e1 14       	cp	r14, r1
    7552:	f1 04       	cpc	r15, r1
    7554:	01 05       	cpc	r16, r1
    7556:	11 05       	cpc	r17, r1
    7558:	21 f0       	breq	.+8      	; 0x7562 <Print::printNumber(unsigned long, unsigned char)+0x94>
    755a:	7e 2c       	mov	r7, r14
    755c:	5f 2d       	mov	r21, r15
    755e:	c8 01       	movw	r24, r16
    7560:	dd cf       	rjmp	.-70     	; 0x751c <Print::printNumber(unsigned long, unsigned char)+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    7562:	c2 01       	movw	r24, r4
    7564:	b6 01       	movw	r22, r12
    7566:	0e 94 4b 3a 	call	0x7496	; 0x7496 <Print::write(char const*)>
}
    756a:	a1 96       	adiw	r28, 0x21	; 33
    756c:	0f b6       	in	r0, 0x3f	; 63
    756e:	f8 94       	cli
    7570:	de bf       	out	0x3e, r29	; 62
    7572:	0f be       	out	0x3f, r0	; 63
    7574:	cd bf       	out	0x3d, r28	; 61
    7576:	cf 91       	pop	r28
    7578:	df 91       	pop	r29
    757a:	1f 91       	pop	r17
    757c:	0f 91       	pop	r16
    757e:	ff 90       	pop	r15
    7580:	ef 90       	pop	r14
    7582:	df 90       	pop	r13
    7584:	cf 90       	pop	r12
    7586:	bf 90       	pop	r11
    7588:	af 90       	pop	r10
    758a:	9f 90       	pop	r9
    758c:	8f 90       	pop	r8
    758e:	7f 90       	pop	r7
    7590:	5f 90       	pop	r5
    7592:	4f 90       	pop	r4
    7594:	08 95       	ret

00007596 <Print::print(unsigned long, int)>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
    7596:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
    7598:	21 15       	cp	r18, r1
    759a:	31 05       	cpc	r19, r1
    759c:	41 f4       	brne	.+16     	; 0x75ae <Print::print(unsigned long, int)+0x18>
    759e:	ed 91       	ld	r30, X+
    75a0:	fc 91       	ld	r31, X
    75a2:	01 90       	ld	r0, Z+
    75a4:	f0 81       	ld	r31, Z
    75a6:	e0 2d       	mov	r30, r0
    75a8:	64 2f       	mov	r22, r20
    75aa:	09 95       	icall
    75ac:	08 95       	ret
  else return printNumber(n, base);
    75ae:	0e 94 67 3a 	call	0x74ce	; 0x74ce <Print::printNumber(unsigned long, unsigned char)>
}
    75b2:	08 95       	ret

000075b4 <Print::print(unsigned char, int)>:
size_t Print::print(char c)
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
    75b4:	ef 92       	push	r14
    75b6:	ff 92       	push	r15
    75b8:	0f 93       	push	r16
    75ba:	1f 93       	push	r17
    75bc:	9a 01       	movw	r18, r20
{
  return print((unsigned long) b, base);
    75be:	e6 2e       	mov	r14, r22
    75c0:	ff 24       	eor	r15, r15
    75c2:	00 e0       	ldi	r16, 0x00	; 0
    75c4:	10 e0       	ldi	r17, 0x00	; 0
    75c6:	b8 01       	movw	r22, r16
    75c8:	a7 01       	movw	r20, r14
    75ca:	0e 94 cb 3a 	call	0x7596	; 0x7596 <Print::print(unsigned long, int)>
}
    75ce:	1f 91       	pop	r17
    75d0:	0f 91       	pop	r16
    75d2:	ff 90       	pop	r15
    75d4:	ef 90       	pop	r14
    75d6:	08 95       	ret

000075d8 <Print::print(long, int)>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
    75d8:	cf 92       	push	r12
    75da:	df 92       	push	r13
    75dc:	ef 92       	push	r14
    75de:	ff 92       	push	r15
    75e0:	0f 93       	push	r16
    75e2:	1f 93       	push	r17
    75e4:	cf 93       	push	r28
    75e6:	df 93       	push	r29
    75e8:	ec 01       	movw	r28, r24
    75ea:	6a 01       	movw	r12, r20
    75ec:	7b 01       	movw	r14, r22
{
  if (base == 0) {
    75ee:	21 15       	cp	r18, r1
    75f0:	31 05       	cpc	r19, r1
    75f2:	41 f4       	brne	.+16     	; 0x7604 <Print::print(long, int)+0x2c>
    return write(n);
    75f4:	e8 81       	ld	r30, Y
    75f6:	f9 81       	ldd	r31, Y+1	; 0x01
    75f8:	01 90       	ld	r0, Z+
    75fa:	f0 81       	ld	r31, Z
    75fc:	e0 2d       	mov	r30, r0
    75fe:	64 2f       	mov	r22, r20
    7600:	09 95       	icall
    7602:	1f c0       	rjmp	.+62     	; 0x7642 <Print::print(long, int)+0x6a>
  } else if (base == 10) {
    7604:	2a 30       	cpi	r18, 0x0A	; 10
    7606:	31 05       	cpc	r19, r1
    7608:	d1 f4       	brne	.+52     	; 0x763e <Print::print(long, int)+0x66>
    if (n < 0) {
    760a:	77 ff       	sbrs	r23, 7
    760c:	17 c0       	rjmp	.+46     	; 0x763c <Print::print(long, int)+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    760e:	e8 81       	ld	r30, Y
    7610:	f9 81       	ldd	r31, Y+1	; 0x01
    7612:	01 90       	ld	r0, Z+
    7614:	f0 81       	ld	r31, Z
    7616:	e0 2d       	mov	r30, r0
    7618:	6d e2       	ldi	r22, 0x2D	; 45
    761a:	09 95       	icall
    761c:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    761e:	44 27       	eor	r20, r20
    7620:	55 27       	eor	r21, r21
    7622:	ba 01       	movw	r22, r20
    7624:	4c 19       	sub	r20, r12
    7626:	5d 09       	sbc	r21, r13
    7628:	6e 09       	sbc	r22, r14
    762a:	7f 09       	sbc	r23, r15
    762c:	ce 01       	movw	r24, r28
    762e:	2a e0       	ldi	r18, 0x0A	; 10
    7630:	0e 94 67 3a 	call	0x74ce	; 0x74ce <Print::printNumber(unsigned long, unsigned char)>
    7634:	98 01       	movw	r18, r16
    7636:	28 0f       	add	r18, r24
    7638:	39 1f       	adc	r19, r25
    763a:	04 c0       	rjmp	.+8      	; 0x7644 <Print::print(long, int)+0x6c>
    }
    return printNumber(n, 10);
    763c:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    763e:	0e 94 67 3a 	call	0x74ce	; 0x74ce <Print::printNumber(unsigned long, unsigned char)>
    7642:	9c 01       	movw	r18, r24
  }
}
    7644:	c9 01       	movw	r24, r18
    7646:	df 91       	pop	r29
    7648:	cf 91       	pop	r28
    764a:	1f 91       	pop	r17
    764c:	0f 91       	pop	r16
    764e:	ff 90       	pop	r15
    7650:	ef 90       	pop	r14
    7652:	df 90       	pop	r13
    7654:	cf 90       	pop	r12
    7656:	08 95       	ret

00007658 <Print::print(int, int)>:
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
    7658:	ef 92       	push	r14
    765a:	ff 92       	push	r15
    765c:	0f 93       	push	r16
    765e:	1f 93       	push	r17
    7660:	7b 01       	movw	r14, r22
    7662:	9a 01       	movw	r18, r20
{
  return print((long) n, base);
    7664:	00 27       	eor	r16, r16
    7666:	f7 fc       	sbrc	r15, 7
    7668:	00 95       	com	r16
    766a:	10 2f       	mov	r17, r16
    766c:	b8 01       	movw	r22, r16
    766e:	a7 01       	movw	r20, r14
    7670:	0e 94 ec 3a 	call	0x75d8	; 0x75d8 <Print::print(long, int)>
}
    7674:	1f 91       	pop	r17
    7676:	0f 91       	pop	r16
    7678:	ff 90       	pop	r15
    767a:	ef 90       	pop	r14
    767c:	08 95       	ret

0000767e <Print::print(char const*)>:
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    767e:	0e 94 4b 3a 	call	0x7496	; 0x7496 <Print::write(char const*)>
}
    7682:	08 95       	ret

00007684 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    7684:	1f 92       	push	r1
    7686:	0f 92       	push	r0
    7688:	0f b6       	in	r0, 0x3f	; 63
    768a:	0f 92       	push	r0
    768c:	11 24       	eor	r1, r1
    768e:	2f 93       	push	r18
    7690:	3f 93       	push	r19
    7692:	4f 93       	push	r20
    7694:	5f 93       	push	r21
    7696:	6f 93       	push	r22
    7698:	7f 93       	push	r23
    769a:	8f 93       	push	r24
    769c:	9f 93       	push	r25
    769e:	af 93       	push	r26
    76a0:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    76a2:	20 91 6f 04 	lds	r18, 0x046F
    76a6:	30 91 70 04 	lds	r19, 0x0470
    76aa:	40 91 71 04 	lds	r20, 0x0471
    76ae:	50 91 72 04 	lds	r21, 0x0472
	unsigned char f = timer0_fract;
    76b2:	70 91 73 04 	lds	r23, 0x0473

	m += MILLIS_INC;
    76b6:	da 01       	movw	r26, r20
    76b8:	c9 01       	movw	r24, r18
    76ba:	40 96       	adiw	r24, 0x10	; 16
    76bc:	a1 1d       	adc	r26, r1
    76be:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    76c0:	67 2f       	mov	r22, r23
    76c2:	60 5d       	subi	r22, 0xD0	; 208
	if (f >= FRACT_MAX) {
    76c4:	6d 37       	cpi	r22, 0x7D	; 125
    76c6:	30 f0       	brcs	.+12     	; 0x76d4 <__vector_16+0x50>
		f -= FRACT_MAX;
    76c8:	6d 57       	subi	r22, 0x7D	; 125
		m += 1;
    76ca:	da 01       	movw	r26, r20
    76cc:	c9 01       	movw	r24, r18
    76ce:	41 96       	adiw	r24, 0x11	; 17
    76d0:	a1 1d       	adc	r26, r1
    76d2:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    76d4:	60 93 73 04 	sts	0x0473, r22
	timer0_millis = m;
    76d8:	80 93 6f 04 	sts	0x046F, r24
    76dc:	90 93 70 04 	sts	0x0470, r25
    76e0:	a0 93 71 04 	sts	0x0471, r26
    76e4:	b0 93 72 04 	sts	0x0472, r27
	timer0_overflow_count++;
    76e8:	80 91 6b 04 	lds	r24, 0x046B
    76ec:	90 91 6c 04 	lds	r25, 0x046C
    76f0:	a0 91 6d 04 	lds	r26, 0x046D
    76f4:	b0 91 6e 04 	lds	r27, 0x046E
    76f8:	01 96       	adiw	r24, 0x01	; 1
    76fa:	a1 1d       	adc	r26, r1
    76fc:	b1 1d       	adc	r27, r1
    76fe:	80 93 6b 04 	sts	0x046B, r24
    7702:	90 93 6c 04 	sts	0x046C, r25
    7706:	a0 93 6d 04 	sts	0x046D, r26
    770a:	b0 93 6e 04 	sts	0x046E, r27
}
    770e:	bf 91       	pop	r27
    7710:	af 91       	pop	r26
    7712:	9f 91       	pop	r25
    7714:	8f 91       	pop	r24
    7716:	7f 91       	pop	r23
    7718:	6f 91       	pop	r22
    771a:	5f 91       	pop	r21
    771c:	4f 91       	pop	r20
    771e:	3f 91       	pop	r19
    7720:	2f 91       	pop	r18
    7722:	0f 90       	pop	r0
    7724:	0f be       	out	0x3f, r0	; 63
    7726:	0f 90       	pop	r0
    7728:	1f 90       	pop	r1
    772a:	18 95       	reti

0000772c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    772c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    772e:	84 b5       	in	r24, 0x24	; 36
    7730:	82 60       	ori	r24, 0x02	; 2
    7732:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    7734:	84 b5       	in	r24, 0x24	; 36
    7736:	81 60       	ori	r24, 0x01	; 1
    7738:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    773a:	85 b5       	in	r24, 0x25	; 37
    773c:	82 60       	ori	r24, 0x02	; 2
    773e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    7740:	85 b5       	in	r24, 0x25	; 37
    7742:	81 60       	ori	r24, 0x01	; 1
    7744:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    7746:	ee e6       	ldi	r30, 0x6E	; 110
    7748:	f0 e0       	ldi	r31, 0x00	; 0
    774a:	80 81       	ld	r24, Z
    774c:	81 60       	ori	r24, 0x01	; 1
    774e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    7750:	e1 e8       	ldi	r30, 0x81	; 129
    7752:	f0 e0       	ldi	r31, 0x00	; 0
    7754:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    7756:	80 81       	ld	r24, Z
    7758:	82 60       	ori	r24, 0x02	; 2
    775a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    775c:	e0 e8       	ldi	r30, 0x80	; 128
    775e:	f0 e0       	ldi	r31, 0x00	; 0
    7760:	80 81       	ld	r24, Z
    7762:	81 60       	ori	r24, 0x01	; 1
    7764:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    7766:	e1 eb       	ldi	r30, 0xB1	; 177
    7768:	f0 e0       	ldi	r31, 0x00	; 0
    776a:	80 81       	ld	r24, Z
    776c:	84 60       	ori	r24, 0x04	; 4
    776e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    7770:	e0 eb       	ldi	r30, 0xB0	; 176
    7772:	f0 e0       	ldi	r31, 0x00	; 0
    7774:	80 81       	ld	r24, Z
    7776:	81 60       	ori	r24, 0x01	; 1
    7778:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    777a:	ea e7       	ldi	r30, 0x7A	; 122
    777c:	f0 e0       	ldi	r31, 0x00	; 0
    777e:	80 81       	ld	r24, Z
    7780:	84 60       	ori	r24, 0x04	; 4
    7782:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    7784:	80 81       	ld	r24, Z
    7786:	82 60       	ori	r24, 0x02	; 2
    7788:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    778a:	80 81       	ld	r24, Z
    778c:	81 60       	ori	r24, 0x01	; 1
    778e:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    7790:	80 81       	ld	r24, Z
    7792:	80 68       	ori	r24, 0x80	; 128
    7794:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    7796:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    779a:	08 95       	ret

0000779c <__mulsi3>:
    779c:	62 9f       	mul	r22, r18
    779e:	d0 01       	movw	r26, r0
    77a0:	73 9f       	mul	r23, r19
    77a2:	f0 01       	movw	r30, r0
    77a4:	82 9f       	mul	r24, r18
    77a6:	e0 0d       	add	r30, r0
    77a8:	f1 1d       	adc	r31, r1
    77aa:	64 9f       	mul	r22, r20
    77ac:	e0 0d       	add	r30, r0
    77ae:	f1 1d       	adc	r31, r1
    77b0:	92 9f       	mul	r25, r18
    77b2:	f0 0d       	add	r31, r0
    77b4:	83 9f       	mul	r24, r19
    77b6:	f0 0d       	add	r31, r0
    77b8:	74 9f       	mul	r23, r20
    77ba:	f0 0d       	add	r31, r0
    77bc:	65 9f       	mul	r22, r21
    77be:	f0 0d       	add	r31, r0
    77c0:	99 27       	eor	r25, r25
    77c2:	72 9f       	mul	r23, r18
    77c4:	b0 0d       	add	r27, r0
    77c6:	e1 1d       	adc	r30, r1
    77c8:	f9 1f       	adc	r31, r25
    77ca:	63 9f       	mul	r22, r19
    77cc:	b0 0d       	add	r27, r0
    77ce:	e1 1d       	adc	r30, r1
    77d0:	f9 1f       	adc	r31, r25
    77d2:	bd 01       	movw	r22, r26
    77d4:	cf 01       	movw	r24, r30
    77d6:	11 24       	eor	r1, r1
    77d8:	08 95       	ret

000077da <__udivmodqi4>:
    77da:	99 1b       	sub	r25, r25
    77dc:	79 e0       	ldi	r23, 0x09	; 9
    77de:	04 c0       	rjmp	.+8      	; 0x77e8 <__udivmodqi4_ep>

000077e0 <__udivmodqi4_loop>:
    77e0:	99 1f       	adc	r25, r25
    77e2:	96 17       	cp	r25, r22
    77e4:	08 f0       	brcs	.+2      	; 0x77e8 <__udivmodqi4_ep>
    77e6:	96 1b       	sub	r25, r22

000077e8 <__udivmodqi4_ep>:
    77e8:	88 1f       	adc	r24, r24
    77ea:	7a 95       	dec	r23
    77ec:	c9 f7       	brne	.-14     	; 0x77e0 <__udivmodqi4_loop>
    77ee:	80 95       	com	r24
    77f0:	08 95       	ret

000077f2 <__udivmodhi4>:
    77f2:	aa 1b       	sub	r26, r26
    77f4:	bb 1b       	sub	r27, r27
    77f6:	51 e1       	ldi	r21, 0x11	; 17
    77f8:	07 c0       	rjmp	.+14     	; 0x7808 <__udivmodhi4_ep>

000077fa <__udivmodhi4_loop>:
    77fa:	aa 1f       	adc	r26, r26
    77fc:	bb 1f       	adc	r27, r27
    77fe:	a6 17       	cp	r26, r22
    7800:	b7 07       	cpc	r27, r23
    7802:	10 f0       	brcs	.+4      	; 0x7808 <__udivmodhi4_ep>
    7804:	a6 1b       	sub	r26, r22
    7806:	b7 0b       	sbc	r27, r23

00007808 <__udivmodhi4_ep>:
    7808:	88 1f       	adc	r24, r24
    780a:	99 1f       	adc	r25, r25
    780c:	5a 95       	dec	r21
    780e:	a9 f7       	brne	.-22     	; 0x77fa <__udivmodhi4_loop>
    7810:	80 95       	com	r24
    7812:	90 95       	com	r25
    7814:	bc 01       	movw	r22, r24
    7816:	cd 01       	movw	r24, r26
    7818:	08 95       	ret

0000781a <__divmodhi4>:
    781a:	97 fb       	bst	r25, 7
    781c:	09 2e       	mov	r0, r25
    781e:	07 26       	eor	r0, r23
    7820:	0a d0       	rcall	.+20     	; 0x7836 <__divmodhi4_neg1>
    7822:	77 fd       	sbrc	r23, 7
    7824:	04 d0       	rcall	.+8      	; 0x782e <__divmodhi4_neg2>
    7826:	e5 df       	rcall	.-54     	; 0x77f2 <__udivmodhi4>
    7828:	06 d0       	rcall	.+12     	; 0x7836 <__divmodhi4_neg1>
    782a:	00 20       	and	r0, r0
    782c:	1a f4       	brpl	.+6      	; 0x7834 <__divmodhi4_exit>

0000782e <__divmodhi4_neg2>:
    782e:	70 95       	com	r23
    7830:	61 95       	neg	r22
    7832:	7f 4f       	sbci	r23, 0xFF	; 255

00007834 <__divmodhi4_exit>:
    7834:	08 95       	ret

00007836 <__divmodhi4_neg1>:
    7836:	f6 f7       	brtc	.-4      	; 0x7834 <__divmodhi4_exit>
    7838:	90 95       	com	r25
    783a:	81 95       	neg	r24
    783c:	9f 4f       	sbci	r25, 0xFF	; 255
    783e:	08 95       	ret

00007840 <__udivmodsi4>:
    7840:	a1 e2       	ldi	r26, 0x21	; 33
    7842:	1a 2e       	mov	r1, r26
    7844:	aa 1b       	sub	r26, r26
    7846:	bb 1b       	sub	r27, r27
    7848:	fd 01       	movw	r30, r26
    784a:	0d c0       	rjmp	.+26     	; 0x7866 <__udivmodsi4_ep>

0000784c <__udivmodsi4_loop>:
    784c:	aa 1f       	adc	r26, r26
    784e:	bb 1f       	adc	r27, r27
    7850:	ee 1f       	adc	r30, r30
    7852:	ff 1f       	adc	r31, r31
    7854:	a2 17       	cp	r26, r18
    7856:	b3 07       	cpc	r27, r19
    7858:	e4 07       	cpc	r30, r20
    785a:	f5 07       	cpc	r31, r21
    785c:	20 f0       	brcs	.+8      	; 0x7866 <__udivmodsi4_ep>
    785e:	a2 1b       	sub	r26, r18
    7860:	b3 0b       	sbc	r27, r19
    7862:	e4 0b       	sbc	r30, r20
    7864:	f5 0b       	sbc	r31, r21

00007866 <__udivmodsi4_ep>:
    7866:	66 1f       	adc	r22, r22
    7868:	77 1f       	adc	r23, r23
    786a:	88 1f       	adc	r24, r24
    786c:	99 1f       	adc	r25, r25
    786e:	1a 94       	dec	r1
    7870:	69 f7       	brne	.-38     	; 0x784c <__udivmodsi4_loop>
    7872:	60 95       	com	r22
    7874:	70 95       	com	r23
    7876:	80 95       	com	r24
    7878:	90 95       	com	r25
    787a:	9b 01       	movw	r18, r22
    787c:	ac 01       	movw	r20, r24
    787e:	bd 01       	movw	r22, r26
    7880:	cf 01       	movw	r24, r30
    7882:	08 95       	ret

00007884 <__divmodsi4>:
    7884:	97 fb       	bst	r25, 7
    7886:	09 2e       	mov	r0, r25
    7888:	05 26       	eor	r0, r21
    788a:	0e d0       	rcall	.+28     	; 0x78a8 <__divmodsi4_neg1>
    788c:	57 fd       	sbrc	r21, 7
    788e:	04 d0       	rcall	.+8      	; 0x7898 <__divmodsi4_neg2>
    7890:	d7 df       	rcall	.-82     	; 0x7840 <__udivmodsi4>
    7892:	0a d0       	rcall	.+20     	; 0x78a8 <__divmodsi4_neg1>
    7894:	00 1c       	adc	r0, r0
    7896:	38 f4       	brcc	.+14     	; 0x78a6 <__divmodsi4_exit>

00007898 <__divmodsi4_neg2>:
    7898:	50 95       	com	r21
    789a:	40 95       	com	r20
    789c:	30 95       	com	r19
    789e:	21 95       	neg	r18
    78a0:	3f 4f       	sbci	r19, 0xFF	; 255
    78a2:	4f 4f       	sbci	r20, 0xFF	; 255
    78a4:	5f 4f       	sbci	r21, 0xFF	; 255

000078a6 <__divmodsi4_exit>:
    78a6:	08 95       	ret

000078a8 <__divmodsi4_neg1>:
    78a8:	f6 f7       	brtc	.-4      	; 0x78a6 <__divmodsi4_exit>
    78aa:	90 95       	com	r25
    78ac:	80 95       	com	r24
    78ae:	70 95       	com	r23
    78b0:	61 95       	neg	r22
    78b2:	7f 4f       	sbci	r23, 0xFF	; 255
    78b4:	8f 4f       	sbci	r24, 0xFF	; 255
    78b6:	9f 4f       	sbci	r25, 0xFF	; 255
    78b8:	08 95       	ret

000078ba <__tablejump2__>:
    78ba:	ee 0f       	add	r30, r30
    78bc:	ff 1f       	adc	r31, r31

000078be <__tablejump__>:
    78be:	05 90       	lpm	r0, Z+
    78c0:	f4 91       	lpm	r31, Z+
    78c2:	e0 2d       	mov	r30, r0
    78c4:	09 94       	ijmp

000078c6 <_exit>:
    78c6:	f8 94       	cli

000078c8 <__stop_program>:
    78c8:	ff cf       	rjmp	.-2      	; 0x78c8 <__stop_program>
