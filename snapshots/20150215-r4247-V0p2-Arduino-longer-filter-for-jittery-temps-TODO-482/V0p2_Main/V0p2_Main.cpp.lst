
/var/folders/km/s_tzntf16nzg5bdh5n6g6lz40000gn/T/build1488024569792584556.tmp/V0p2_Main.cpp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ea  00800100  00006b44  00006bd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006b44  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002f6  008001ea  008001ea  00006cc2  2**0
                  ALLOC
  3 .debug_aranges 00001070  00000000  00000000  00006cc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00002c59  00000000  00000000  00007d32  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0001909f  00000000  00000000  0000a98b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000051d2  00000000  00000000  00023a2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00011d63  00000000  00000000  00028bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001d60  00000000  00000000  0003a960  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000072c8  00000000  00000000  0003c6c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000a100  00000000  00000000  00043988  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 000bcef9  00000000  00000000  0004da88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001318  00000000  00000000  0010a981  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
    // If multiple valves are controlled then is this true only if all are at least partially open.
    // Used to help avoid running boiler pump against closed valves.
    // Must not be true while (re)calibrating.
    // The default is to use the check the current computed position
    // against the minimum open percentage.
    virtual bool isControlledValveReallyOpen() const { return(isCalibrated() && (value >= getMinPercentOpen())); }
       0:	0c 94 74 02 	jmp	0x4e8	; 0x4e8 <__ctors_end>
#endif


// True if FHT8V valve is believed to be open under instruction from this system; false if not in sync.
static bool FHT8V_isValveOpen;
bool getFHT8V_isValveOpen() { return(syncedWithFHT8V && FHT8V_isValveOpen); }
       4:	0c 94 9c 02 	jmp	0x538	; 0x538 <__bad_interrupt>
// Get count of dropped inbound stats messages due to insufficient queue space.
uint16_t getInboundStatsQueueOverrun()
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    { return(inboundStatsQueueOverrun); }
  }
       8:	0c 94 9c 02 	jmp	0x538	; 0x538 <__bad_interrupt>
// For comparator use examples see:
//   * http://forum.arduino.cc/index.php?topic=165744.0
//   * http://forum.arduino.cc/index.php?topic=17450.0
//   * http://www.avr-tutorials.com/comparator/utilizing-avr-analog-comparator-aco
//   * http://winavr.scienceprog.com/avr-gcc-tutorial/avr-comparator-c-programming-example.html
bool analogueVsBandgapRead(const uint8_t aiNumber, const bool napToSettle)
       c:	0c 94 9c 02 	jmp	0x538	; 0x538 <__bad_interrupt>

  // Start listening.
  _RFM22ModeRX();
  
  if(neededEnable) { powerDownSPI(); }
  }
      10:	0c 94 9c 02 	jmp	0x538	; 0x538 <__bad_interrupt>
uint_least8_t getHoursLT() { return(getMinutesSinceMidnightLT() / 60); }

// Get whole days since the start of 2000/01/01 (ie the midnight between 1999 and 2000), local time.
// This will roll in about 2179, by which time I will not care.
// Thread-safe and ISR-safe.
uint_least16_t getDaysSince1999LT()
      14:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <__vector_5>
  }

// Returns true if any simple schedule is set, false otherwise.
// This implementation just checks for any valid schedule 'on' time.
// In unit-test override mode is true for soon/now, false for off.
bool isAnySimpleScheduleSet()
      18:	0c 94 e7 16 	jmp	0x2dce	; 0x2dce <__vector_6>
  Serial.print(m);
  Serial.print(':'); Serial.print(s);
  Serial.print(':'); Serial.print(ss);
  _flush();
  if(neededWaking) { powerDownSerial(); }
  }
      1c:	0c 94 9c 02 	jmp	0x538	; 0x538 <__bad_interrupt>
bool isCLIActive() { return(0 != CLITimeoutM); }

// Record local manual operation of a local physical UI control, eg not remote or via CLI.
// To be thread-safe, everything that this touches or calls must be.
// Thread-safe.
void markUIControlUsed()
      20:	0c 94 9c 02 	jmp	0x538	; 0x538 <__bad_interrupt>
  public:
    // Return last value fetched by read(); undefined before first read().
    // Usually fast.
    // Often likely to be thread-safe or usable within ISRs (Interrupt Service Routines),
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual uint8_t get() const { return(value); }
      24:	0c 94 b7 16 	jmp	0x2d6e	; 0x2d6e <__vector_9>
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
}
      28:	0c 94 9c 02 	jmp	0x538	; 0x538 <__bad_interrupt>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
}
      2c:	0c 94 9c 02 	jmp	0x538	; 0x538 <__bad_interrupt>

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
      30:	0c 94 9c 02 	jmp	0x538	; 0x538 <__bad_interrupt>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
      34:	0c 94 9c 02 	jmp	0x538	; 0x538 <__bad_interrupt>
  free(ptr);
}

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
void __cxa_guard_abort (__guard *) {}; 
      38:	0c 94 9c 02 	jmp	0x538	; 0x538 <__bad_interrupt>
  size_t n = print(ifsh);
  n += println();
  return n;
}

size_t Print::print(const Printable& x)
      3c:	0c 94 9c 02 	jmp	0x538	; 0x538 <__bad_interrupt>
	timer0_millis = m;
	timer0_overflow_count++;
}

unsigned long millis()
{
      40:	0c 94 83 34 	jmp	0x6906	; 0x6906 <__vector_16>
      44:	0c 94 9c 02 	jmp	0x538	; 0x538 <__bad_interrupt>
      48:	0c 94 68 30 	jmp	0x60d0	; 0x60d0 <__vector_18>
      4c:	0c 94 b6 30 	jmp	0x616c	; 0x616c <__vector_19>
      50:	0c 94 9c 02 	jmp	0x538	; 0x538 <__bad_interrupt>
      54:	0c 94 a0 17 	jmp	0x2f40	; 0x2f40 <__vector_21>
      58:	0c 94 9c 02 	jmp	0x538	; 0x538 <__bad_interrupt>
      5c:	0c 94 9c 02 	jmp	0x538	; 0x538 <__bad_interrupt>
      60:	0c 94 43 2e 	jmp	0x5c86	; 0x5c86 <__vector_24>
      64:	0c 94 9c 02 	jmp	0x538	; 0x538 <__bad_interrupt>

00000068 <loopOpenTRV()::__c>:
      68:	21 45 52 52 4f 52 3a 20 6c 6f 6f 70 20 6f 76 65     !ERROR: loop ove
      78:	72 72 75 6e 00                                      rrun.

0000007d <bareStatsTX(bool, bool, bool)::__c>:
      7d:	4a 53 4f 4e 20 67 65 6e 20 65 72 72 21 00           JSON gen err!.

0000008b <FHT8V_RFM22_Reg_Values>:
      8b:	06 00 08 00 0b 15 0c 12 30 00 33 06 34 08 35 10     ........0.3.4.5.
      9b:	36 aa 37 cc 38 cc 39 cc 6d 0d 6e 28 6f f5 70 20     6.7.8.9.m.n(o.p 
      ab:	71 21 72 20 73 00 74 00 75 73 76 64 77 00 79 23     q!r s.t.usvdw.y#
      bb:	7a 01 ff ff                                         z...

000000bf <FHT8VPollSyncAndTX_Next(bool)::__c>:
      bf:	46 48 54 38 56 20 54 58 00                          FHT8V TX.

000000c8 <doSync(bool)::__c>:
      c8:	46 48 54 38 56 20 53 59 4e 43 20 46 49 4e 41 4c     FHT8V SYNC FINAL
	...

000000d9 <doSync(bool)::__c>:
      d9:	46 48 54 38 56 20 53 59 4e 43 2e 2e 2e 00           FHT8V SYNC....

000000e7 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)::__c>:
      e7:	22 2b 22 3a 00                                      "+":.

000000ec <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)::__c>:
      ec:	22 40 22 3a 22 00                                   "@":".

000000f2 <SimpleStatsRotationBase::put(char const*, int)::__c>:
      f2:	54 6f 6f 20 6d 61 6e 79 20 6b 65 79 73 3a 20 00     Too many keys: .

00000102 <ensureIDCreated(bool)::__c>:
     102:	20 2e 2e 2e 20 00                                    ... .

00000108 <ensureIDCreated(bool)::__c>:
     108:	49 6e 76 61 6c 69 64 20 62 79 74 65 20 00           Invalid byte .

00000116 <ensureIDCreated(bool)::__c>:
     116:	53 65 74 74 69 6e 67 20 49 44 20 62 79 74 65 20     Setting ID byte 
	...

00000127 <RFM22CheckConnected()::__c>:
     127:	52 46 4d 32 32 20 62 61 64 00                       RFM22 bad.

00000131 <pollCLI(unsigned char)::__c>:
     131:	4f 4b 00                                            OK.

00000134 <pollCLI(unsigned char)::__c>:
     134:	4e 6f 74 20 66 69 6e 69 73 68 65 64 2e 00           Not finished..

00000142 <pollCLI(unsigned char)::__c>:
     142:	5a 61 70 70 65 64 2e 00                             Zapped..

0000014a <pollCLI(unsigned char)::__c>:
     14a:	4f 76 65 72 72 75 6e 73 3a 20 00                    Overruns: .

00000155 <pollCLI(unsigned char)::__c>:
     155:	52 65 73 65 74 73 3a 20 00                          Resets: .

0000015e <pollCLI(unsigned char)::__c>:
     15e:	68 6f 6c 73 00                                      hols.

00000163 <pollCLI(unsigned char)::__c>:
     163:	6c 61 73 74 00                                      last.

00000168 <pollCLI(unsigned char)::__c>:
     168:	73 6d 6f 6f 74 68 65 64 00                          smoothed.

00000171 <pollCLI(unsigned char)::__c>:
     171:	52 48 25 00                                         RH%.

00000175 <pollCLI(unsigned char)::__c>:
     175:	6f 63 63 25 00                                      occ%.

0000017a <pollCLI(unsigned char)::__c>:
     17a:	61 6d 62 6c 00                                      ambl.

0000017f <pollCLI(unsigned char)::__c>:
     17f:	3f 20 66 6f 72 20 43 4c 49 20 68 65 6c 70 00        ? for CLI help.

0000018e <dumpCLIUsage(unsigned char)::__c>:
     18e:	5a 61 70 20 73 74 61 74 73 00                       Zap stats.

00000198 <dumpCLIUsage(unsigned char)::__c>:
     198:	58 6d 69 74 20 73 65 63 75 72 69 74 79 20 6c 65     Xmit security le
     1a8:	76 65 6c 3b 20 30 20 61 6c 77 61 79 73 2c 20 32     vel; 0 always, 2
     1b8:	35 35 20 6e 65 76 65 72 00                          55 never.

000001c1 <dumpCLIUsage(unsigned char)::__c>:
     1c1:	73 65 74 20 57 61 72 6d 20 74 65 6d 70 20 43 43     set Warm temp CC
	...

000001d2 <dumpCLIUsage(unsigned char)::__c>:
     1d2:	57 20 43 43 00                                      W CC.

000001d7 <dumpCLIUsage(unsigned char)::__c>:
     1d7:	57 61 72 6d 00                                      Warm.

000001dc <dumpCLIUsage(unsigned char)::__c>:
     1dc:	73 79 73 20 56 65 72 73 69 6f 6e 00                 sys Version.

000001e8 <dumpCLIUsage(unsigned char)::__c>:
     1e8:	73 65 74 20 32 34 68 20 54 69 6d 65 00              set 24h Time.

000001f5 <dumpCLIUsage(unsigned char)::__c>:
     1f5:	54 20 48 48 20 4d 4d 00                             T HH MM.

000001fd <dumpCLIUsage(unsigned char)::__c>:
     1fd:	73 68 6f 77 20 53 74 61 74 75 73 00                 show Status.

00000209 <dumpCLIUsage(unsigned char)::__c>:
     209:	51 75 69 63 6b 20 48 65 61 74 00                    Quick Heat.

00000214 <dumpCLIUsage(unsigned char)::__c>:
     214:	72 65 73 65 74 20 4f 70 65 6e 20 25 00              reset Open %.

00000221 <dumpCLIUsage(unsigned char)::__c>:
     221:	6d 69 6e 20 25 20 66 6f 72 20 76 61 6c 76 65 20     min % for valve 
     231:	74 6f 20 62 65 20 4f 70 65 6e 00                    to be Open.

0000023c <dumpCLIUsage(unsigned char)::__c>:
     23c:	4f 20 50 50 00                                      O PP.

00000241 <dumpCLIUsage(unsigned char)::__c>:
     241:	50 72 6f 67 72 61 6d 3a 20 77 61 72 6d 20 64 61     Program: warm da
     251:	69 6c 79 20 73 74 61 72 74 69 6e 67 20 61 74 20     ily starting at 
     261:	48 48 20 4d 4d 20 73 63 68 65 64 75 6c 65 20 53     HH MM schedule S
	...

00000272 <dumpCLIUsage(unsigned char)::__c>:
     272:	50 20 48 48 20 4d 4d 20 53 00                       P HH MM S.

0000027c <dumpCLIUsage(unsigned char)::__c>:
     27c:	4c 65 61 72 6e 20 64 61 69 6c 79 20 77 61 72 6d     Learn daily warm
     28c:	20 6e 6f 77 2c 20 63 6c 65 61 72 20 69 66 20 69      now, clear if i
     29c:	6e 20 66 72 6f 73 74 20 6d 6f 64 65 2c 20 73 63     n frost mode, sc
     2ac:	68 65 64 75 6c 65 20 53 00                          hedule S.

000002b5 <dumpCLIUsage(unsigned char)::__c>:
     2b5:	4c 20 53 00                                         L S.

000002b9 <dumpCLIUsage(unsigned char)::__c>:
     2b9:	6e 65 77 20 49 44 00                                new ID.

000002c0 <dumpCLIUsage(unsigned char)::__c>:
     2c0:	63 6c 65 61 72 20 48 6f 75 73 65 20 63 6f 64 65     clear House code
     2d0:	73 00                                               s.

000002d2 <dumpCLIUsage(unsigned char)::__c>:
     2d2:	73 65 74 20 46 48 54 38 56 20 48 6f 75 73 65 20     set FHT8V House 
     2e2:	63 6f 64 65 73 20 31 26 32 00                       codes 1&2.

000002ec <dumpCLIUsage(unsigned char)::__c>:
     2ec:	48 20 48 31 20 48 32 00                             H H1 H2.

000002f4 <dumpCLIUsage(unsigned char)::__c>:
     2f4:	73 65 74 20 46 72 6f 73 74 2f 73 65 74 62 61 63     set Frost/setbac
     304:	6b 20 74 65 6d 70 20 43 43 00                       k temp CC.

0000030e <dumpCLIUsage(unsigned char)::__c>:
     30e:	46 20 43 43 00                                      F CC.

00000313 <dumpCLIUsage(unsigned char)::__c>:
     313:	46 72 6f 73 74 00                                   Frost.

00000319 <dumpCLIUsage(unsigned char)::__c>:
     319:	45 78 69 74 20 43 4c 49 00                          Exit CLI.

00000322 <dumpCLIUsage(unsigned char)::__c>:
     322:	44 75 6d 70 20 73 74 61 74 73 20 73 65 74 20 4e     Dump stats set N
	...

00000333 <dumpCLIUsage(unsigned char)::__c>:
     333:	44 20 4e 00                                         D N.

00000337 <dumpCLIUsage(unsigned char)::__c>:
     337:	74 68 69 73 20 68 65 6c 70 00                       this help.

00000341 <InvalidIgnored()::__c>:
     341:	49 6e 76 61 6c 69 64 2c 20 69 67 6e 6f 72 65 64     Invalid, ignored
     351:	2e 00                                               ..

00000353 <serialStatusReport()::__c>:
     353:	3b 4d 00                                            ;M.

00000356 <serialStatusReport()::__c>:
     356:	3b 48 43 00                                         ;HC.

0000035a <serialStatusReport()::__c>:
     35a:	3b 58 00                                            ;X.

0000035d <setup::__c>:
     35d:	3f 20 61 74 20 43 4c 49 20 70 72 6f 6d 70 74 20     ? at CLI prompt 
     36d:	66 6f 72 20 68 65 6c 70 00                          for help.

00000376 <setup::__c>:
     376:	21 42 61 64 20 49 44 3a 20 63 61 6e 27 74 20 72     !Bad ID: can't r
     386:	65 73 65 74 00                                      eset.

0000038b <setup::__c>:
     38b:	6d 56 00                                            mV.

0000038e <setup::__c>:
     38e:	56 63 63 3a 20 00                                   Vcc: .

00000394 <setup::__c>:
     394:	4f 76 65 72 72 75 6e 73 3a 20 00                    Overruns: .

0000039f <setup::__c>:
     39f:	52 65 73 65 74 73 3a 20 00                          Resets: .

000003a8 <setup::__c>:
     3a8:	44 45 42 55 47 00                                   DEBUG.

000003ae <setup::__c>:
     3ae:	0d 0a 4f 70 65 6e 54 52 56 3a 20 00                 ..OpenTRV: .

000003ba <optionalPOST()::__c>:
     3ba:	52 61 64 69 6f 2c 20 78 74 61 6c 2c 20 62 75 74     Radio, xtal, but
     3ca:	74 6f 6e 73 20 4f 4b 00                             tons OK.

000003d2 <optionalPOST()::__c>:
     3d2:	58 74 61 6c 20 64 65 61 64 00                       Xtal dead.

000003dc <optionalPOST()::__c>:
     3dc:	62 75 74 74 6f 6e 20 73 74 75 63 6b 00              button stuck.

000003e9 <optionalPOST()::__c>:
     3e9:	28 55 73 69 6e 67 20 52 46 4d 32 32 2e 29 00        (Using RFM22.).

000003f8 <posPOST(unsigned char, __FlashStringHelper const*)::__c>:
     3f8:	3a 20 00                                            : .

000003fb <posPOST(unsigned char, __FlashStringHelper const*)::__c>:
     3fb:	70 6f 73 50 4f 53 54 3a 20 00                       posPOST: .

00000405 <serialPrintlnBuildVersion()::__c>:
     405:	20 31 34 3a 32 33 3a 34 34 00                        14:23:44.

0000040f <serialPrintlnBuildVersion()::__c>:
     40f:	3b 20 63 6f 64 65 20 24 49 64 3a 20 56 30 70 32     ; code $Id: V0p2
     41f:	5f 4d 61 69 6e 2e 69 6e 6f 20 34 31 34 32 20 32     _Main.ino 4142 2
     42f:	30 31 35 2d 30 31 2d 32 37 20 31 38 3a 33 30 3a     015-01-27 18:30:
     43f:	31 35 5a 20 64 61 6d 6f 6e 68 64 20 24 20 00        15Z damonhd $ .

0000044e <serialPrintlnBuildVersion()::__c>:
     44e:	62 6f 61 72 64 20 56 30 2e 32 20 52 45 56 00        board V0.2 REV.

0000045d <Sensor_DS18B10_init()::__c>:
     45d:	44 53 31 38 42 32 30 20 6e 6f 74 20 66 6f 75 6e     DS18B20 not foun
     46d:	64 00                                               d.

0000046f <Sensor_DS18B10_init()::__c>:
     46f:	44 53 31 38 42 32 30 20 69 6e 69 74 2e 2e 2e 00     DS18B20 init....

0000047f <port_to_mode_PGM>:
     47f:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000489 <port_to_output_PGM>:
     489:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000493 <port_to_input_PGM>:
     493:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000049d <digital_pin_to_port_PGM>:
     49d:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     4ad:	03 03 03 03                                         ....

000004b1 <digital_pin_to_bit_mask_PGM>:
     4b1:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     4c1:	04 08 10 20                                         ... 

000004c5 <digital_pin_to_timer_PGM>:
     4c5:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     4d5:	00 00 00 00 00                                      .....

000004da <__ctors_start>:
     4da:	b7 06       	cpc	r11, r23
     4dc:	26 19       	sub	r18, r6
     4de:	55 1b       	sub	r21, r21
     4e0:	94 27       	eor	r25, r20
     4e2:	e1 2b       	or	r30, r17
     4e4:	b0 2d       	mov	r27, r0
     4e6:	7f 32       	cpi	r23, 0x2F	; 47

000004e8 <__ctors_end>:
     4e8:	11 24       	eor	r1, r1
     4ea:	1f be       	out	0x3f, r1	; 63
     4ec:	cf ef       	ldi	r28, 0xFF	; 255
     4ee:	d8 e0       	ldi	r29, 0x08	; 8
     4f0:	de bf       	out	0x3e, r29	; 62
     4f2:	cd bf       	out	0x3d, r28	; 61

000004f4 <__do_copy_data>:
     4f4:	11 e0       	ldi	r17, 0x01	; 1
     4f6:	a0 e0       	ldi	r26, 0x00	; 0
     4f8:	b1 e0       	ldi	r27, 0x01	; 1
     4fa:	e4 e4       	ldi	r30, 0x44	; 68
     4fc:	fb e6       	ldi	r31, 0x6B	; 107
     4fe:	02 c0       	rjmp	.+4      	; 0x504 <.do_copy_data_start>

00000500 <.do_copy_data_loop>:
     500:	05 90       	lpm	r0, Z+
     502:	0d 92       	st	X+, r0

00000504 <.do_copy_data_start>:
     504:	aa 3e       	cpi	r26, 0xEA	; 234
     506:	b1 07       	cpc	r27, r17
     508:	d9 f7       	brne	.-10     	; 0x500 <.do_copy_data_loop>

0000050a <__do_clear_bss>:
     50a:	14 e0       	ldi	r17, 0x04	; 4
     50c:	aa ee       	ldi	r26, 0xEA	; 234
     50e:	b1 e0       	ldi	r27, 0x01	; 1
     510:	01 c0       	rjmp	.+2      	; 0x514 <.do_clear_bss_start>

00000512 <.do_clear_bss_loop>:
     512:	1d 92       	st	X+, r1

00000514 <.do_clear_bss_start>:
     514:	a0 3e       	cpi	r26, 0xE0	; 224
     516:	b1 07       	cpc	r27, r17
     518:	e1 f7       	brne	.-8      	; 0x512 <.do_clear_bss_loop>

0000051a <__do_global_ctors>:
     51a:	14 e0       	ldi	r17, 0x04	; 4
     51c:	c8 ee       	ldi	r28, 0xE8	; 232
     51e:	d4 e0       	ldi	r29, 0x04	; 4
     520:	04 c0       	rjmp	.+8      	; 0x52a <.do_global_ctors_start>

00000522 <.do_global_ctors_loop>:
     522:	22 97       	sbiw	r28, 0x02	; 2
     524:	fe 01       	movw	r30, r28
     526:	0e 94 94 35 	call	0x6b28	; 0x6b28 <__tablejump__>

0000052a <.do_global_ctors_start>:
     52a:	ca 3d       	cpi	r28, 0xDA	; 218
     52c:	d1 07       	cpc	r29, r17
     52e:	c9 f7       	brne	.-14     	; 0x522 <.do_global_ctors_loop>
     530:	0e 94 d5 32 	call	0x65aa	; 0x65aa <main>
     534:	0c 94 a0 35 	jmp	0x6b40	; 0x6b40 <_exit>

00000538 <__bad_interrupt>:
     538:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000053c <abort>:
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	f8 94       	cli
     542:	0c 94 a0 35 	jmp	0x6b40	; 0x6b40 <_exit>

00000546 <atoi>:
     546:	fc 01       	movw	r30, r24
     548:	88 27       	eor	r24, r24
     54a:	99 27       	eor	r25, r25
     54c:	e8 94       	clt
     54e:	21 91       	ld	r18, Z+
     550:	20 32       	cpi	r18, 0x20	; 32
     552:	e9 f3       	breq	.-6      	; 0x54e <atoi+0x8>
     554:	29 30       	cpi	r18, 0x09	; 9
     556:	10 f0       	brcs	.+4      	; 0x55c <atoi+0x16>
     558:	2e 30       	cpi	r18, 0x0E	; 14
     55a:	c8 f3       	brcs	.-14     	; 0x54e <atoi+0x8>
     55c:	2b 32       	cpi	r18, 0x2B	; 43
     55e:	41 f0       	breq	.+16     	; 0x570 <atoi+0x2a>
     560:	2d 32       	cpi	r18, 0x2D	; 45
     562:	39 f4       	brne	.+14     	; 0x572 <atoi+0x2c>
     564:	68 94       	set
     566:	04 c0       	rjmp	.+8      	; 0x570 <atoi+0x2a>
     568:	0e 94 46 03 	call	0x68c	; 0x68c <__mulhi_const_10>
     56c:	82 0f       	add	r24, r18
     56e:	91 1d       	adc	r25, r1
     570:	21 91       	ld	r18, Z+
     572:	20 53       	subi	r18, 0x30	; 48
     574:	2a 30       	cpi	r18, 0x0A	; 10
     576:	c0 f3       	brcs	.-16     	; 0x568 <atoi+0x22>
     578:	1e f4       	brtc	.+6      	; 0x580 <atoi+0x3a>
     57a:	90 95       	com	r25
     57c:	81 95       	neg	r24
     57e:	9f 4f       	sbci	r25, 0xFF	; 255
     580:	08 95       	ret

00000582 <strlen_P>:
     582:	fc 01       	movw	r30, r24
     584:	05 90       	lpm	r0, Z+
     586:	00 20       	and	r0, r0
     588:	e9 f7       	brne	.-6      	; 0x584 <strlen_P+0x2>
     58a:	80 95       	com	r24
     58c:	90 95       	com	r25
     58e:	8e 0f       	add	r24, r30
     590:	9f 1f       	adc	r25, r31
     592:	08 95       	ret

00000594 <memset>:
     594:	dc 01       	movw	r26, r24
     596:	01 c0       	rjmp	.+2      	; 0x59a <memset+0x6>
     598:	6d 93       	st	X+, r22
     59a:	41 50       	subi	r20, 0x01	; 1
     59c:	50 40       	sbci	r21, 0x00	; 0
     59e:	e0 f7       	brcc	.-8      	; 0x598 <memset+0x4>
     5a0:	08 95       	ret

000005a2 <strcmp>:
     5a2:	fb 01       	movw	r30, r22
     5a4:	dc 01       	movw	r26, r24
     5a6:	8d 91       	ld	r24, X+
     5a8:	01 90       	ld	r0, Z+
     5aa:	80 19       	sub	r24, r0
     5ac:	01 10       	cpse	r0, r1
     5ae:	d9 f3       	breq	.-10     	; 0x5a6 <strcmp+0x4>
     5b0:	99 0b       	sbc	r25, r25
     5b2:	08 95       	ret

000005b4 <strncpy>:
     5b4:	fb 01       	movw	r30, r22
     5b6:	dc 01       	movw	r26, r24
     5b8:	41 50       	subi	r20, 0x01	; 1
     5ba:	50 40       	sbci	r21, 0x00	; 0
     5bc:	48 f0       	brcs	.+18     	; 0x5d0 <strncpy+0x1c>
     5be:	01 90       	ld	r0, Z+
     5c0:	0d 92       	st	X+, r0
     5c2:	00 20       	and	r0, r0
     5c4:	c9 f7       	brne	.-14     	; 0x5b8 <strncpy+0x4>
     5c6:	01 c0       	rjmp	.+2      	; 0x5ca <strncpy+0x16>
     5c8:	1d 92       	st	X+, r1
     5ca:	41 50       	subi	r20, 0x01	; 1
     5cc:	50 40       	sbci	r21, 0x00	; 0
     5ce:	e0 f7       	brcc	.-8      	; 0x5c8 <strncpy+0x14>
     5d0:	08 95       	ret

000005d2 <strtok_r>:
     5d2:	00 97       	sbiw	r24, 0x00	; 0
     5d4:	31 f4       	brne	.+12     	; 0x5e2 <strtok_r+0x10>
     5d6:	da 01       	movw	r26, r20
     5d8:	8d 91       	ld	r24, X+
     5da:	9c 91       	ld	r25, X
     5dc:	00 97       	sbiw	r24, 0x00	; 0
     5de:	09 f4       	brne	.+2      	; 0x5e2 <strtok_r+0x10>
     5e0:	0e c0       	rjmp	.+28     	; 0x5fe <strtok_r+0x2c>
     5e2:	dc 01       	movw	r26, r24
     5e4:	fb 01       	movw	r30, r22
     5e6:	3d 91       	ld	r19, X+
     5e8:	21 91       	ld	r18, Z+
     5ea:	22 23       	and	r18, r18
     5ec:	19 f0       	breq	.+6      	; 0x5f4 <strtok_r+0x22>
     5ee:	32 17       	cp	r19, r18
     5f0:	c9 f3       	breq	.-14     	; 0x5e4 <strtok_r+0x12>
     5f2:	fa cf       	rjmp	.-12     	; 0x5e8 <strtok_r+0x16>
     5f4:	33 23       	and	r19, r19
     5f6:	31 f4       	brne	.+12     	; 0x604 <strtok_r+0x32>
     5f8:	da 01       	movw	r26, r20
     5fa:	1d 92       	st	X+, r1
     5fc:	1c 92       	st	X, r1
     5fe:	88 27       	eor	r24, r24
     600:	99 27       	eor	r25, r25
     602:	08 95       	ret
     604:	11 97       	sbiw	r26, 0x01	; 1
     606:	af 93       	push	r26
     608:	bf 93       	push	r27
     60a:	fb 01       	movw	r30, r22
     60c:	3d 91       	ld	r19, X+
     60e:	21 91       	ld	r18, Z+
     610:	32 17       	cp	r19, r18
     612:	71 f4       	brne	.+28     	; 0x630 <strtok_r+0x5e>
     614:	33 23       	and	r19, r19
     616:	21 f4       	brne	.+8      	; 0x620 <strtok_r+0x4e>
     618:	88 27       	eor	r24, r24
     61a:	99 27       	eor	r25, r25
     61c:	11 97       	sbiw	r26, 0x01	; 1
     61e:	02 c0       	rjmp	.+4      	; 0x624 <strtok_r+0x52>
     620:	1e 92       	st	-X, r1
     622:	11 96       	adiw	r26, 0x01	; 1
     624:	fa 01       	movw	r30, r20
     626:	a1 93       	st	Z+, r26
     628:	b0 83       	st	Z, r27
     62a:	9f 91       	pop	r25
     62c:	8f 91       	pop	r24
     62e:	08 95       	ret
     630:	22 23       	and	r18, r18
     632:	69 f7       	brne	.-38     	; 0x60e <strtok_r+0x3c>
     634:	ea cf       	rjmp	.-44     	; 0x60a <strtok_r+0x38>

00000636 <__eerd_word>:
     636:	df 92       	push	r13
     638:	ef 92       	push	r14
     63a:	ff 92       	push	r15
     63c:	0f 93       	push	r16
     63e:	1f 93       	push	r17
     640:	7b 01       	movw	r14, r22
     642:	8c 01       	movw	r16, r24
     644:	fb 01       	movw	r30, r22
     646:	09 95       	icall
     648:	d8 2e       	mov	r13, r24
     64a:	c8 01       	movw	r24, r16
     64c:	01 96       	adiw	r24, 0x01	; 1
     64e:	f7 01       	movw	r30, r14
     650:	09 95       	icall
     652:	98 2f       	mov	r25, r24
     654:	8d 2d       	mov	r24, r13
     656:	1f 91       	pop	r17
     658:	0f 91       	pop	r16
     65a:	ff 90       	pop	r15
     65c:	ef 90       	pop	r14
     65e:	df 90       	pop	r13
     660:	08 95       	ret

00000662 <__eewr_word>:
     662:	df 92       	push	r13
     664:	ef 92       	push	r14
     666:	ff 92       	push	r15
     668:	0f 93       	push	r16
     66a:	1f 93       	push	r17
     66c:	d7 2e       	mov	r13, r23
     66e:	7a 01       	movw	r14, r20
     670:	8c 01       	movw	r16, r24
     672:	fa 01       	movw	r30, r20
     674:	09 95       	icall
     676:	c8 01       	movw	r24, r16
     678:	01 96       	adiw	r24, 0x01	; 1
     67a:	6d 2d       	mov	r22, r13
     67c:	f7 01       	movw	r30, r14
     67e:	09 95       	icall
     680:	1f 91       	pop	r17
     682:	0f 91       	pop	r16
     684:	ff 90       	pop	r15
     686:	ef 90       	pop	r14
     688:	df 90       	pop	r13
     68a:	08 95       	ret

0000068c <__mulhi_const_10>:
     68c:	7a e0       	ldi	r23, 0x0A	; 10
     68e:	97 9f       	mul	r25, r23
     690:	90 2d       	mov	r25, r0
     692:	87 9f       	mul	r24, r23
     694:	80 2d       	mov	r24, r0
     696:	91 0d       	add	r25, r1
     698:	11 24       	eor	r1, r1
     69a:	08 95       	ret

0000069c <SimpleTSUint8Sensor::get() const>:
     69c:	fc 01       	movw	r30, r24
     69e:	82 81       	ldd	r24, Z+2	; 0x02
     6a0:	08 95       	ret

000006a2 <SimpleTSUint8Actuator::get() const>:
  public:
    // Return last value fetched by read(); undefined before first read().
    // Usually fast.
    // Often likely to be thread-safe or usable within ISRs (Interrupt Service Routines),
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual uint8_t get() const { return(value); }
     6a2:	fc 01       	movw	r30, r24
     6a4:	82 81       	ldd	r24, Z+2	; 0x02
     6a6:	08 95       	ret

000006a8 <AbstractRadValve::isValid(unsigned char) const>:
// Implementations may require poll() called at a fixed rate.
class AbstractRadValve : public SimpleTSUint8Actuator
  {
  public:
    // Returns true if this sensor reading value passed is valid, eg in range [0,100].
    virtual bool isValid(const uint8_t value) const { return(value <= 100); }
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	65 36       	cpi	r22, 0x65	; 101
     6ac:	08 f4       	brcc	.+2      	; 0x6b0 <AbstractRadValve::isValid(unsigned char) const+0x8>
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	08 95       	ret

000006b2 <AbstractRadValve::isCalibrated() const>:

    // Returns true iff not (re)calibrating/(re)initialising/(re)syncing.
    // By default there is no recalibration step.
    virtual bool isCalibrated() const { return(true); }
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	08 95       	ret

000006b6 <ModelledRadValve::preferredPollInterval_s() const>:
    // Potentially expensive/slow.
    virtual uint8_t read() { computeCallForHeat(); return(value); }

    // Returns preferred poll interval (in seconds); non-zero.
    // Must be polled at near constant rate, about once per minute.
    virtual uint8_t preferredPollInterval_s() const { return(60); }
     6b6:	8c e3       	ldi	r24, 0x3C	; 60
     6b8:	08 95       	ret

000006ba <ModelledRadValve::tag() const>:

    // Returns a suggested (JSON) tag/field/key name including units of get(); NULL means no recommended tag.
    // The lifetime of the pointed-to text must be at least that of the Sensor instance.
    virtual const char *tag() const { return("v|%"); }
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	91 e0       	ldi	r25, 0x01	; 1
     6be:	08 95       	ret

000006c0 <ModelledRadValve::getMinPercentOpen() const>:
// At the boiler hub this is also the threshold percentage-open on eavesdropped requests that will call for heat.
// If no override is set then DEFAULT_MIN_VALVE_PC_REALLY_OPEN is used.
// NOTE: raising this value temporarily (and shutting down the boiler immediately if possible) is one way to implement dynamic demand.
uint8_t ModelledRadValve::getMinValvePcReallyOpen()
  {
  if(0 != mVPRO_cache) { return(mVPRO_cache); } // Return cached value if possible.
     6c0:	90 91 16 02 	lds	r25, 0x0216
     6c4:	99 23       	and	r25, r25
     6c6:	79 f4       	brne	.+30     	; 0x6e6 <ModelledRadValve::getMinPercentOpen() const+0x26>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     6c8:	f9 99       	sbic	0x1f, 1	; 31
     6ca:	fe cf       	rjmp	.-4      	; 0x6c8 <ModelledRadValve::getMinPercentOpen() const+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     6cc:	83 e1       	ldi	r24, 0x13	; 19
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	92 bd       	out	0x22, r25	; 34
     6d2:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     6d4:	f8 9a       	sbi	0x1f, 0	; 31
     6d6:	90 b5       	in	r25, 0x20	; 32
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_MIN_VALVE_PC_REALLY_OPEN);
  const uint8_t result = ((stored > 0) && (stored <= 100)) ? stored : DEFAULT_MIN_VALVE_PC_REALLY_OPEN;
     6d8:	89 2f       	mov	r24, r25
     6da:	81 50       	subi	r24, 0x01	; 1
     6dc:	84 36       	cpi	r24, 0x64	; 100
     6de:	08 f0       	brcs	.+2      	; 0x6e2 <ModelledRadValve::getMinPercentOpen() const+0x22>
     6e0:	9a e0       	ldi	r25, 0x0A	; 10
  mVPRO_cache = result; // Cache it.
     6e2:	90 93 16 02 	sts	0x0216, r25
    // then this should return true if any of the valves are (significantly) open.
    virtual bool isControlledValveReallyOpen() const;

    // Get estimated minimum percentage open for significant flow [1,99] for this device.
    // Return global node value.
    virtual uint8_t getMinPercentOpen() const { return(getMinValvePcReallyOpen()); }
     6e6:	89 2f       	mov	r24, r25
     6e8:	08 95       	ret

000006ea <OccupancyTracker::isValid(unsigned char) const>:
    // Poll at a fixed rate.
    virtual uint8_t read();

    // Returns true if this sensor reading value passed is potentially valid, eg in-range.
    // True if in range [0,100].
    virtual bool isValid(uint8_t value) const { return(value <= 100); }
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	65 36       	cpi	r22, 0x65	; 101
     6ee:	08 f4       	brcc	.+2      	; 0x6f2 <OccupancyTracker::isValid(unsigned char) const+0x8>
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	08 95       	ret

000006f4 <OccupancyTracker::preferredPollInterval_s() const>:

    // This routine should be called once per minute.
    virtual uint8_t preferredPollInterval_s() const { return(60); }
     6f4:	8c e3       	ldi	r24, 0x3C	; 60
     6f6:	08 95       	ret

000006f8 <OccupancyTracker::tag() const>:

    // Recommended JSON tag for full value; not NULL.
    virtual const char *tag() const { return("occ|%"); }
     6f8:	84 e0       	ldi	r24, 0x04	; 4
     6fa:	91 e0       	ldi	r25, 0x01	; 1
     6fc:	08 95       	ret

000006fe <inWarmMode()>:
// If true then is in WARM (or BAKE) mode; defaults to (starts as) false/FROST.
// Should be only be set when 'debounced'.
// Defaults to (starts as) false/FROST.
static bool isWarmMode;
// If true then the unit is in 'warm' (heating) mode, else 'frost' protection mode.
bool inWarmMode() { return(isWarmMode); }
     6fe:	80 91 6c 02 	lds	r24, 0x026C
     702:	08 95       	ret

00000704 <setWarmModeDebounced(bool)>:
  DEBUG_SERIAL_PRINT_FLASHSTRING("Call to setWarmModeDebounced(");
  DEBUG_SERIAL_PRINT(warm);
  DEBUG_SERIAL_PRINT_FLASHSTRING(")");
  DEBUG_SERIAL_PRINTLN();
#endif
  isWarmMode = warm;
     704:	80 93 6c 02 	sts	0x026C, r24
#ifdef SUPPORT_BAKE
  if(!warm) { cancelBakeDebounced(); }
     708:	88 23       	and	r24, r24
     70a:	11 f4       	brne	.+4      	; 0x710 <setWarmModeDebounced(bool)+0xc>
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// Should be only be called once 'debounced' if coming from a button press for example.
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBakeDebounced() { bakeCountdownM = 0; }
     70c:	10 92 6b 02 	sts	0x026B, r1
     710:	08 95       	ret

00000712 <inBakeMode()>:

#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
     712:	80 91 6c 02 	lds	r24, 0x026C
     716:	88 23       	and	r24, r24
     718:	21 f0       	breq	.+8      	; 0x722 <inBakeMode()+0x10>
     71a:	80 91 6b 02 	lds	r24, 0x026B
     71e:	81 11       	cpse	r24, r1
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	08 95       	ret

00000724 <cancelBakeDebounced()>:
// Should be only be called once 'debounced' if coming from a button press for example.
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBakeDebounced() { bakeCountdownM = 0; }
     724:	10 92 6b 02 	sts	0x026B, r1
     728:	08 95       	ret

0000072a <startBakeDebounced()>:
// Start/restart 'BAKE' mode and timeout.
// Should be only be called once 'debounced' if coming from a button press for example.
void startBakeDebounced() { isWarmMode = true; bakeCountdownM = BAKE_MAX_M; }
     72a:	81 e0       	ldi	r24, 0x01	; 1
     72c:	80 93 6c 02 	sts	0x026C, r24
     730:	8e e1       	ldi	r24, 0x1E	; 30
     732:	80 93 6b 02 	sts	0x026B, r24
     736:	08 95       	ret

00000738 <getFROSTTargetC()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     738:	f9 99       	sbic	0x1f, 1	; 31
     73a:	fe cf       	rjmp	.-4      	; 0x738 <getFROSTTargetC()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     73c:	8e e0       	ldi	r24, 0x0E	; 14
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	92 bd       	out	0x22, r25	; 34
     742:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     744:	f8 9a       	sbi	0x1f, 0	; 31
     746:	90 b5       	in	r25, 0x20	; 32
uint8_t getFROSTTargetC()
  {
  // Get persisted value, if any.
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_FROST_C);
  // If out of bounds or no stored value then use default.
  if((stored < MIN_TARGET_C) || (stored > MAX_TARGET_C)) { return(FROST); }
     748:	89 2f       	mov	r24, r25
     74a:	85 50       	subi	r24, 0x05	; 5
     74c:	8b 35       	cpi	r24, 0x5B	; 91
     74e:	08 f0       	brcs	.+2      	; 0x752 <getFROSTTargetC()+0x1a>
     750:	97 e0       	ldi	r25, 0x07	; 7
  // TODO-403: cannot use hasEcoBias() with RH% as that would cause infinite recursion!
  // Return valid persisted value.
  return(stored);
  }
     752:	89 2f       	mov	r24, r25
     754:	08 95       	ret

00000756 <getWARMTargetC()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     756:	f9 99       	sbic	0x1f, 1	; 31
     758:	fe cf       	rjmp	.-4      	; 0x756 <getWARMTargetC()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     75a:	8f e0       	ldi	r24, 0x0F	; 15
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	92 bd       	out	0x22, r25	; 34
     760:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     762:	f8 9a       	sbi	0x1f, 0	; 31
     764:	20 b5       	in	r18, 0x20	; 32
#endif

  // Get persisted value, if any.
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_WARM_C);
  // If out of bounds or no stored value then use default (or frost value if set and higher).
  if((stored < MIN_TARGET_C) || (stored > MAX_TARGET_C)) { return(fnmax((uint8_t)WARM, getFROSTTargetC())); }
     766:	82 2f       	mov	r24, r18
     768:	85 50       	subi	r24, 0x05	; 5
     76a:	8b 35       	cpi	r24, 0x5B	; 91
     76c:	98 f0       	brcs	.+38     	; 0x794 <getWARMTargetC()+0x3e>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     76e:	f9 99       	sbic	0x1f, 1	; 31
     770:	fe cf       	rjmp	.-4      	; 0x76e <getWARMTargetC()+0x18>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     772:	8e e0       	ldi	r24, 0x0E	; 14
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	92 bd       	out	0x22, r25	; 34
     778:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     77a:	f8 9a       	sbi	0x1f, 0	; 31
     77c:	90 b5       	in	r25, 0x20	; 32
uint8_t getFROSTTargetC()
  {
  // Get persisted value, if any.
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_FROST_C);
  // If out of bounds or no stored value then use default.
  if((stored < MIN_TARGET_C) || (stored > MAX_TARGET_C)) { return(FROST); }
     77e:	89 2f       	mov	r24, r25
     780:	85 50       	subi	r24, 0x05	; 5
     782:	8b 35       	cpi	r24, 0x5B	; 91
     784:	10 f0       	brcs	.+4      	; 0x78a <getWARMTargetC()+0x34>
     786:	87 e3       	ldi	r24, 0x37	; 55
     788:	08 95       	ret
     78a:	87 e3       	ldi	r24, 0x37	; 55
     78c:	89 17       	cp	r24, r25
     78e:	98 f4       	brcc	.+38     	; 0x7b6 <getWARMTargetC()+0x60>
     790:	89 2f       	mov	r24, r25
     792:	08 95       	ret
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     794:	f9 99       	sbic	0x1f, 1	; 31
     796:	fe cf       	rjmp	.-4      	; 0x794 <getWARMTargetC()+0x3e>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     798:	8e e0       	ldi	r24, 0x0E	; 14
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	92 bd       	out	0x22, r25	; 34
     79e:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     7a0:	f8 9a       	sbi	0x1f, 0	; 31
     7a2:	90 b5       	in	r25, 0x20	; 32
     7a4:	89 2f       	mov	r24, r25
     7a6:	85 50       	subi	r24, 0x05	; 5
     7a8:	8b 35       	cpi	r24, 0x5B	; 91
     7aa:	08 f0       	brcs	.+2      	; 0x7ae <getWARMTargetC()+0x58>
     7ac:	97 e0       	ldi	r25, 0x07	; 7
     7ae:	89 2f       	mov	r24, r25
     7b0:	92 17       	cp	r25, r18
     7b2:	08 f4       	brcc	.+2      	; 0x7b6 <getWARMTargetC()+0x60>
     7b4:	82 2f       	mov	r24, r18
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_WARM_C);
  // If out of bounds or no stored value then use default (or frost value if set and higher).
  if((stored < MIN_TARGET_C) || (stored > MAX_TARGET_C)) { return(fnmax((uint8_t)WARM, getFROSTTargetC())); }
  // Return valid persisted value (or frost value if set and higher).
  return(fnmax(stored, getFROSTTargetC()));
  }
     7b6:	08 95       	ret

000007b8 <hasEcoBias()>:
// Several system parameters are adjusted depending on the bias,
// with 'eco' slanted toward saving energy, eg with lower target temperatures and shorter on-times.
#ifndef hasEcoBias // If not a macro...
// True if WARM temperature at/below halfway mark between eco and comfort levels.
// Midpoint should be just in eco part to provide a system bias toward eco.
bool hasEcoBias() { return(getWARMTargetC() <= TEMP_SCALE_MID); }
     7b8:	0e 94 ab 03 	call	0x756	; 0x756 <getWARMTargetC()>
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	8d 33       	cpi	r24, 0x3D	; 61
     7c0:	08 f4       	brcc	.+2      	; 0x7c4 <hasEcoBias()+0xc>
     7c2:	91 e0       	ldi	r25, 0x01	; 1
     7c4:	89 2f       	mov	r24, r25
     7c6:	08 95       	ret

000007c8 <OccupancyTracker::read()>:
#elif OCCUPATION_TIMEOUT_M <= 100
#define OCCCP_SHIFT 0
#endif

// Update notion of occupancy confidence.
uint8_t OccupancyTracker::read()
     7c8:	df 93       	push	r29
     7ca:	cf 93       	push	r28
     7cc:	00 d0       	rcall	.+0      	; 0x7ce <OccupancyTracker::read()+0x6>
     7ce:	cd b7       	in	r28, 0x3d	; 61
     7d0:	de b7       	in	r29, 0x3e	; 62
     7d2:	fc 01       	movw	r30, r24
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
     7d4:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     7d6:	f8 94       	cli
    {
    // Compute as percentage.
    const uint8_t newValue = (0 == occupationCountdownM) ? 0 :
        fnmin((uint8_t)((uint8_t)100 - (uint8_t)((((uint8_t)OCCUPATION_TIMEOUT_M) - occupationCountdownM) << OCCCP_SHIFT)), (uint8_t)100);
     7d8:	83 81       	ldd	r24, Z+3	; 0x03
     7da:	88 23       	and	r24, r24
     7dc:	11 f4       	brne	.+4      	; 0x7e2 <OccupancyTracker::read()+0x1a>
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	0d c0       	rjmp	.+26     	; 0x7fc <OccupancyTracker::read()+0x34>
     7e2:	83 81       	ldd	r24, Z+3	; 0x03
     7e4:	92 e3       	ldi	r25, 0x32	; 50
     7e6:	98 1b       	sub	r25, r24
     7e8:	99 0f       	add	r25, r25
     7ea:	84 e6       	ldi	r24, 0x64	; 100
     7ec:	38 2f       	mov	r19, r24
     7ee:	39 1b       	sub	r19, r25
     7f0:	93 2f       	mov	r25, r19
     7f2:	39 83       	std	Y+1, r19	; 0x01
     7f4:	8a 83       	std	Y+2, r24	; 0x02




// Templated function versions of min/max that do not evaluate the arguments twice.
template <class T> const T& fnmin(const T& a, const T& b) { return((a>b)?b:a); }
     7f6:	35 36       	cpi	r19, 0x65	; 101
     7f8:	08 f0       	brcs	.+2      	; 0x7fc <OccupancyTracker::read()+0x34>
     7fa:	94 e6       	ldi	r25, 0x64	; 100
    value = newValue;
     7fc:	92 83       	std	Z+2, r25	; 0x02
    // Run down occupation timer (or run up vacancy time) if need be.
    if(occupationCountdownM > 0) { --occupationCountdownM; vacancyM = 0; vacancyH = 0; }
     7fe:	83 81       	ldd	r24, Z+3	; 0x03
     800:	88 23       	and	r24, r24
     802:	31 f0       	breq	.+12     	; 0x810 <OccupancyTracker::read()+0x48>
     804:	83 81       	ldd	r24, Z+3	; 0x03
     806:	81 50       	subi	r24, 0x01	; 1
     808:	83 83       	std	Z+3, r24	; 0x03
     80a:	16 82       	std	Z+6, r1	; 0x06
     80c:	15 82       	std	Z+5, r1	; 0x05
     80e:	0b c0       	rjmp	.+22     	; 0x826 <OccupancyTracker::read()+0x5e>
    else if(vacancyH < 0xffU) { if(++vacancyM >= 60) { vacancyM = 0; ++vacancyH; } }
     810:	95 81       	ldd	r25, Z+5	; 0x05
     812:	9f 3f       	cpi	r25, 0xFF	; 255
     814:	41 f0       	breq	.+16     	; 0x826 <OccupancyTracker::read()+0x5e>
     816:	86 81       	ldd	r24, Z+6	; 0x06
     818:	8f 5f       	subi	r24, 0xFF	; 255
     81a:	86 83       	std	Z+6, r24	; 0x06
     81c:	8c 33       	cpi	r24, 0x3C	; 60
     81e:	18 f0       	brcs	.+6      	; 0x826 <OccupancyTracker::read()+0x5e>
     820:	16 82       	std	Z+6, r1	; 0x06
     822:	9f 5f       	subi	r25, 0xFF	; 255
     824:	95 83       	std	Z+5, r25	; 0x05
    // Run down 'recent activity' timer.
    if(activityCountdownM > 0) { --activityCountdownM; }
     826:	84 81       	ldd	r24, Z+4	; 0x04
     828:	88 23       	and	r24, r24
     82a:	19 f0       	breq	.+6      	; 0x832 <OccupancyTracker::read()+0x6a>
     82c:	84 81       	ldd	r24, Z+4	; 0x04
     82e:	81 50       	subi	r24, 0x01	; 1
     830:	84 83       	std	Z+4, r24	; 0x04
    return(value);
     832:	82 81       	ldd	r24, Z+2	; 0x02
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     834:	2f bf       	out	0x3f, r18	; 63
    }
  }
     836:	0f 90       	pop	r0
     838:	0f 90       	pop	r0
     83a:	cf 91       	pop	r28
     83c:	df 91       	pop	r29
     83e:	08 95       	ret

00000840 <OccupancyTracker::markAsPossiblyOccupied()>:

// Call when some/weak evidence of room occupation, such as a light being turned on.
// Do not call based on internal/synthetic events.
// Doesn't force the room to appear recently occupied.
// Thread-safe.
void OccupancyTracker::markAsPossiblyOccupied()
     840:	df 93       	push	r29
     842:	cf 93       	push	r28
     844:	00 d0       	rcall	.+0      	; 0x846 <OccupancyTracker::markAsPossiblyOccupied()+0x6>
     846:	cd b7       	in	r28, 0x3d	; 61
     848:	de b7       	in	r29, 0x3e	; 62
     84a:	fc 01       	movw	r30, r24
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
     84c:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     84e:	f8 94       	cli
    {
    occupationCountdownM = fnmax((uint8_t)occupationCountdownM, (uint8_t)(OCCUPATION_TIMEOUT_1_M));
     850:	93 81       	ldd	r25, Z+3	; 0x03
template <class T> const T& fnmax(const T& a, const T& b) { return((a<b)?b:a); }
     852:	91 32       	cpi	r25, 0x21	; 33
     854:	10 f4       	brcc	.+4      	; 0x85a <OccupancyTracker::markAsPossiblyOccupied()+0x1a>
     856:	81 e2       	ldi	r24, 0x21	; 33
     858:	01 c0       	rjmp	.+2      	; 0x85c <OccupancyTracker::markAsPossiblyOccupied()+0x1c>
     85a:	89 2f       	mov	r24, r25
     85c:	83 83       	std	Z+3, r24	; 0x03
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     85e:	2f bf       	out	0x3f, r18	; 63
     860:	81 e2       	ldi	r24, 0x21	; 33
     862:	8a 83       	std	Y+2, r24	; 0x02
     864:	99 83       	std	Y+1, r25	; 0x01
    }
  activityCountdownM = 2;
     866:	82 e0       	ldi	r24, 0x02	; 2
     868:	84 83       	std	Z+4, r24	; 0x04
  }
     86a:	0f 90       	pop	r0
     86c:	0f 90       	pop	r0
     86e:	cf 91       	pop	r28
     870:	df 91       	pop	r29
     872:	08 95       	ret

00000874 <ModelledRadValve::getMinValvePcReallyOpen()>:
// At the boiler hub this is also the threshold percentage-open on eavesdropped requests that will call for heat.
// If no override is set then DEFAULT_MIN_VALVE_PC_REALLY_OPEN is used.
// NOTE: raising this value temporarily (and shutting down the boiler immediately if possible) is one way to implement dynamic demand.
uint8_t ModelledRadValve::getMinValvePcReallyOpen()
  {
  if(0 != mVPRO_cache) { return(mVPRO_cache); } // Return cached value if possible.
     874:	80 91 16 02 	lds	r24, 0x0216
     878:	88 23       	and	r24, r24
     87a:	89 f4       	brne	.+34     	; 0x89e <ModelledRadValve::getMinValvePcReallyOpen()+0x2a>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     87c:	f9 99       	sbic	0x1f, 1	; 31
     87e:	fe cf       	rjmp	.-4      	; 0x87c <ModelledRadValve::getMinValvePcReallyOpen()+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     880:	83 e1       	ldi	r24, 0x13	; 19
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	92 bd       	out	0x22, r25	; 34
     886:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     888:	f8 9a       	sbi	0x1f, 0	; 31
     88a:	90 b5       	in	r25, 0x20	; 32
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_MIN_VALVE_PC_REALLY_OPEN);
  const uint8_t result = ((stored > 0) && (stored <= 100)) ? stored : DEFAULT_MIN_VALVE_PC_REALLY_OPEN;
     88c:	89 2f       	mov	r24, r25
     88e:	81 50       	subi	r24, 0x01	; 1
     890:	84 36       	cpi	r24, 0x64	; 100
     892:	10 f0       	brcs	.+4      	; 0x898 <ModelledRadValve::getMinValvePcReallyOpen()+0x24>
     894:	8a e0       	ldi	r24, 0x0A	; 10
     896:	01 c0       	rjmp	.+2      	; 0x89a <ModelledRadValve::getMinValvePcReallyOpen()+0x26>
     898:	89 2f       	mov	r24, r25
  mVPRO_cache = result; // Cache it.
     89a:	80 93 16 02 	sts	0x0216, r24
  return(result);
  }
     89e:	08 95       	ret

000008a0 <ModelledRadValveState::getSmoothedRecent()>:
  inputState.setReferenceTemperatures(TemperatureC16.get());
  callingForHeat = (newTarget >= (inputState.refTempC16 >> 4));
  }

// Get smoothed raw/unadjusted temperature from the most recent samples.
int ModelledRadValveState::getSmoothedRecent()
     8a0:	fc 01       	movw	r30, r24
     8a2:	48 e0       	ldi	r20, 0x08	; 8
     8a4:	20 e0       	ldi	r18, 0x00	; 0
     8a6:	30 e0       	ldi	r19, 0x00	; 0
     8a8:	04 c0       	rjmp	.+8      	; 0x8b2 <ModelledRadValveState::getSmoothedRecent()+0x12>
template<size_t N> int smallIntMean(const int data[N])
  {
  // Extract mean.
  // Assume values and sum will be nowhere near the limits.
  int sum = 0;
  for(int8_t i = N; --i >= 0; ) { sum += data[i]; }
     8aa:	87 89       	ldd	r24, Z+23	; 0x17
     8ac:	90 8d       	ldd	r25, Z+24	; 0x18
     8ae:	28 0f       	add	r18, r24
     8b0:	39 1f       	adc	r19, r25
     8b2:	41 50       	subi	r20, 0x01	; 1
     8b4:	32 97       	sbiw	r30, 0x02	; 2
     8b6:	4f 3f       	cpi	r20, 0xFF	; 255
     8b8:	c1 f7       	brne	.-16     	; 0x8aa <ModelledRadValveState::getSmoothedRecent()+0xa>
     8ba:	c9 01       	movw	r24, r18
     8bc:	04 96       	adiw	r24, 0x04	; 4
     8be:	68 e0       	ldi	r22, 0x08	; 8
     8c0:	70 e0       	ldi	r23, 0x00	; 0
     8c2:	0e 94 42 35 	call	0x6a84	; 0x6a84 <__divmodhi4>
     8c6:	cb 01       	movw	r24, r22
  { return(smallIntMean<filterLength>(prevRawTempC16)); }
     8c8:	08 95       	ret

000008ca <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)>:
// Is always willing to turn off quickly, but on slowly (AKA "slow start" algorithm),
// and tries to eliminate unnecessary 'hunting' which makes noise and uses actuator energy.
// Nominally called at a regular rate, once per minute.
// All inputState values should be set to sensible values before starting.
// Usually called by tick() which does required state updates afterwards.
uint8_t ModelledRadValve::computeRequiredTRVPercentOpen(const uint8_t valvePCOpen, const struct ModelledRadValveInputState &inputState, struct ModelledRadValveState &retainedState)
     8ca:	ff 92       	push	r15
     8cc:	0f 93       	push	r16
     8ce:	1f 93       	push	r17
     8d0:	cf 93       	push	r28
     8d2:	df 93       	push	r29
     8d4:	f8 2e       	mov	r15, r24
     8d6:	eb 01       	movw	r28, r22
     8d8:	8a 01       	movw	r16, r20
DEBUG_SERIAL_PRINT(inputState.refTempC);
DEBUG_SERIAL_PRINTLN();
#endif

  // Possibly-adjusted and.or smoothed temperature to use for targetting.
  const int adjustedTempC16 = retainedState.isFiltering ? (retainedState.getSmoothedRecent() + refTempOffsetC16) : inputState.refTempC16;
     8da:	da 01       	movw	r26, r20
     8dc:	11 96       	adiw	r26, 0x01	; 1
     8de:	8c 91       	ld	r24, X
     8e0:	88 23       	and	r24, r24
     8e2:	39 f0       	breq	.+14     	; 0x8f2 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x28>
     8e4:	ca 01       	movw	r24, r20
     8e6:	0e 94 50 04 	call	0x8a0	; 0x8a0 <ModelledRadValveState::getSmoothedRecent()>
     8ea:	9c 01       	movw	r18, r24
     8ec:	28 5f       	subi	r18, 0xF8	; 248
     8ee:	3f 4f       	sbci	r19, 0xFF	; 255
     8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x2c>
     8f2:	2f 81       	ldd	r18, Y+7	; 0x07
     8f4:	38 85       	ldd	r19, Y+8	; 0x08
  const int8_t adjustedTempC = (adjustedTempC16 >> 4);

  // (Well) under temp target: open valve up.
  if(adjustedTempC < inputState.targetTempC)
     8f6:	c9 01       	movw	r24, r18
     8f8:	34 e0       	ldi	r19, 0x04	; 4
     8fa:	95 95       	asr	r25
     8fc:	87 95       	ror	r24
     8fe:	3a 95       	dec	r19
     900:	e1 f7       	brne	.-8      	; 0x8fa <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x30>
     902:	e8 2f       	mov	r30, r24
     904:	ff 27       	eor	r31, r31
     906:	e7 fd       	sbrc	r30, 7
     908:	f0 95       	com	r31
     90a:	88 81       	ld	r24, Y
     90c:	68 2f       	mov	r22, r24
     90e:	70 e0       	ldi	r23, 0x00	; 0
     910:	e6 17       	cp	r30, r22
     912:	f7 07       	cpc	r31, r23
     914:	0c f0       	brlt	.+2      	; 0x918 <__stack+0x19>
     916:	3f c0       	rjmp	.+126    	; 0x996 <__stack+0x97>
//DEBUG_SERIAL_PRINTLN_FLASHSTRING("under temp");
    // Limit valve open slew to help minimise overshoot and actuator noise.
    // This should also reduce nugatory setting changes when occupancy (etc) is fluctuating.
    // Thus it may take several minutes to turn the radiator fully on,
    // though probably opening the first ~33% will allow near-maximum heat output in practice.
    if(valvePCOpen < inputState.maxPCOpen)
     918:	4a 81       	ldd	r20, Y+2	; 0x02
     91a:	f4 16       	cp	r15, r20
     91c:	08 f0       	brcs	.+2      	; 0x920 <__stack+0x21>
     91e:	f2 c0       	rjmp	.+484    	; 0xb04 <__stack+0x205>
      {
#if defined(SUPPORT_BAKE)
      // If room is well below target and in BAKE mode then immediately open to maximum.
      // Need debounced bake mode value to avoid spurious slamming open of the valve as the user cycles through modes.
      if(inputState.inBakeMode) { return(inputState.maxPCOpen); }
     920:	8e 81       	ldd	r24, Y+6	; 0x06
     922:	88 23       	and	r24, r24
     924:	09 f0       	breq	.+2      	; 0x928 <__stack+0x29>
     926:	ee c0       	rjmp	.+476    	; 0xb04 <__stack+0x205>
#endif

      // Reduce valve hunting: defer re-opening if recently closed.
      if(retainedState.dontTurnup()) { return(valvePCOpen); }
     928:	d8 01       	movw	r26, r16
     92a:	15 96       	adiw	r26, 0x05	; 5
     92c:	8c 91       	ld	r24, X
     92e:	88 23       	and	r24, r24
     930:	09 f0       	breq	.+2      	; 0x934 <__stack+0x35>
     932:	e7 c0       	rjmp	.+462    	; 0xb02 <__stack+0x203>
               // Don't work so hard to reach and hold target temp with wide deadband
               // (widened eg because room is dark, or this is a pre-warm in FROST mode, or temperature is gyrating)
               // and not comfort mode nor massively below target temp.
               (inputState.widenDeadband && inputState.hasEcoBias && (adjustedTempC >= (uint8_t)fnmax(inputState.targetTempC-(int)SETBACK_FULL, (int)MIN_TARGET_C))) ||
#endif
               (retainedState.isFiltering && (retainedState.getRawDelta() > 0)))); // FIXME: maybe redundant w/ GLACIAL_ON_WITH_WIDE_DEADBAND and widenDeadband set when isFiltering is true 
     934:	8c 81       	ldd	r24, Y+4	; 0x04
     936:	88 23       	and	r24, r24
     938:	09 f0       	breq	.+2      	; 0x93c <__stack+0x3d>
     93a:	e0 c0       	rjmp	.+448    	; 0xafc <__stack+0x1fd>
     93c:	59 81       	ldd	r21, Y+1	; 0x01
     93e:	f5 16       	cp	r15, r21
     940:	08 f4       	brcc	.+2      	; 0x944 <__stack+0x45>
     942:	e7 c0       	rjmp	.+462    	; 0xb12 <__stack+0x213>
     944:	8b 81       	ldd	r24, Y+3	; 0x03
     946:	88 23       	and	r24, r24
     948:	79 f0       	breq	.+30     	; 0x968 <__stack+0x69>
     94a:	8d 81       	ldd	r24, Y+5	; 0x05
     94c:	88 23       	and	r24, r24
     94e:	61 f0       	breq	.+24     	; 0x968 <__stack+0x69>
     950:	cb 01       	movw	r24, r22
     952:	03 97       	sbiw	r24, 0x03	; 3
     954:	85 30       	cpi	r24, 0x05	; 5
     956:	91 05       	cpc	r25, r1
     958:	14 f4       	brge	.+4      	; 0x95e <__stack+0x5f>
     95a:	85 e0       	ldi	r24, 0x05	; 5
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	e8 17       	cp	r30, r24
     962:	f9 07       	cpc	r31, r25
     964:	0c f0       	brlt	.+2      	; 0x968 <__stack+0x69>
     966:	ca c0       	rjmp	.+404    	; 0xafc <__stack+0x1fd>
     968:	f8 01       	movw	r30, r16
     96a:	81 81       	ldd	r24, Z+1	; 0x01
     96c:	88 23       	and	r24, r24
     96e:	09 f4       	brne	.+2      	; 0x972 <__stack+0x73>
     970:	d0 c0       	rjmp	.+416    	; 0xb12 <__stack+0x213>
     972:	87 81       	ldd	r24, Z+7	; 0x07
     974:	90 85       	ldd	r25, Z+8	; 0x08
     976:	21 85       	ldd	r18, Z+9	; 0x09
     978:	32 85       	ldd	r19, Z+10	; 0x0a
     97a:	82 1b       	sub	r24, r18
     97c:	93 0b       	sbc	r25, r19
     97e:	18 16       	cp	r1, r24
     980:	19 06       	cpc	r1, r25
     982:	0c f4       	brge	.+2      	; 0x986 <__stack+0x87>
     984:	bb c0       	rjmp	.+374    	; 0xafc <__stack+0x1fd>
     986:	c5 c0       	rjmp	.+394    	; 0xb12 <__stack+0x213>
              TRV_MAX_SLEW_PC_PER_MIN : TRV_SLEW_PC_PER_MIN_FAST;
      const uint8_t minOpenFromCold = fnmax(slewRate, inputState.minPCOpen);
      // Open to 'minimum' likely open state immediately if less open currently.
      if(valvePCOpen < minOpenFromCold) { return(minOpenFromCold); }
      // Slew open relatively gently...
      return(fnmin((uint8_t)(valvePCOpen + slewRate), inputState.maxPCOpen)); // Capped at maximum.
     988:	2f 2d       	mov	r18, r15
     98a:	2f 5f       	subi	r18, 0xFF	; 255
     98c:	24 17       	cp	r18, r20
     98e:	08 f0       	brcs	.+2      	; 0x992 <__stack+0x93>
     990:	b9 c0       	rjmp	.+370    	; 0xb04 <__stack+0x205>
     992:	42 2f       	mov	r20, r18
     994:	b7 c0       	rjmp	.+366    	; 0xb04 <__stack+0x205>
    // Keep open at maximum allowed.
    return(inputState.maxPCOpen);
    }

  // (Well) over temp target: close valve down.
  if(adjustedTempC > inputState.targetTempC)
     996:	6e 17       	cp	r22, r30
     998:	7f 07       	cpc	r23, r31
     99a:	0c f0       	brlt	.+2      	; 0x99e <__stack+0x9f>
     99c:	58 c0       	rjmp	.+176    	; 0xa4e <__stack+0x14f>
    {
//DEBUG_SERIAL_PRINTLN_FLASHSTRING("over temp");

    if(0 != valvePCOpen)
     99e:	ff 20       	and	r15, r15
     9a0:	09 f4       	brne	.+2      	; 0x9a4 <__stack+0xa5>
     9a2:	af c0       	rjmp	.+350    	; 0xb02 <__stack+0x203>
      {
      // Reduce valve hunting: defer re-closing if recently opened.
      if(retainedState.dontTurndown()) { return(valvePCOpen); }
     9a4:	d8 01       	movw	r26, r16
     9a6:	16 96       	adiw	r26, 0x06	; 6
     9a8:	8c 91       	ld	r24, X
     9aa:	16 97       	sbiw	r26, 0x06	; 6
     9ac:	88 23       	and	r24, r24
     9ae:	09 f0       	breq	.+2      	; 0x9b2 <__stack+0xb3>
     9b0:	a8 c0       	rjmp	.+336    	; 0xb02 <__stack+0x203>

      // True if just above the the proportional range.
      const bool justOverTemp = (adjustedTempC == inputState.targetTempC+1);
     9b2:	50 e0       	ldi	r21, 0x00	; 0
     9b4:	6f 5f       	subi	r22, 0xFF	; 255
     9b6:	7f 4f       	sbci	r23, 0xFF	; 255
     9b8:	e6 17       	cp	r30, r22
     9ba:	f7 07       	cpc	r31, r23
     9bc:	a9 f4       	brne	.+42     	; 0x9e8 <__stack+0xe9>
     9be:	51 e0       	ldi	r21, 0x01	; 1

      // TODO-453: avoid closing the valve at all when the temperature error is small and falling, and there is a widened deadband.
      if(justOverTemp && inputState.widenDeadband && (retainedState.getRawDelta() < 0)) { return(valvePCOpen); }
     9c0:	8b 81       	ldd	r24, Y+3	; 0x03
     9c2:	88 23       	and	r24, r24
     9c4:	61 f0       	breq	.+24     	; 0x9de <__stack+0xdf>
     9c6:	17 96       	adiw	r26, 0x07	; 7
     9c8:	8d 91       	ld	r24, X+
     9ca:	9c 91       	ld	r25, X
     9cc:	18 97       	sbiw	r26, 0x08	; 8
     9ce:	19 96       	adiw	r26, 0x09	; 9
     9d0:	2d 91       	ld	r18, X+
     9d2:	3c 91       	ld	r19, X
     9d4:	1a 97       	sbiw	r26, 0x0a	; 10
     9d6:	82 1b       	sub	r24, r18
     9d8:	93 0b       	sbc	r25, r19
     9da:	0a f4       	brpl	.+2      	; 0x9de <__stack+0xdf>
     9dc:	92 c0       	rjmp	.+292    	; 0xb02 <__stack+0x203>

      // TODO-482: glacial close if temperature is jittery and not too far above target.
      if(justOverTemp && retainedState.isFiltering) { return(valvePCOpen - 1); }
     9de:	f8 01       	movw	r30, r16
     9e0:	81 81       	ldd	r24, Z+1	; 0x01
     9e2:	88 23       	and	r24, r24
     9e4:	09 f0       	breq	.+2      	; 0x9e8 <__stack+0xe9>
     9e6:	60 c0       	rjmp	.+192    	; 0xaa8 <__stack+0x1a9>

      // Continue shutting valve slowly as not yet fully closed.
      // TODO-117: allow very slow final turn off to help systems with poor bypass, ~1% per minute.
      // Special slow-turn-off rules for final part of travel at/below "min % really open" floor.
      const uint8_t minReallyOpen = inputState.minPCOpen;
     9e8:	89 81       	ldd	r24, Y+1	; 0x01
      const uint8_t lingerThreshold = (minReallyOpen > 0) ? (minReallyOpen-1) : 0;
     9ea:	88 23       	and	r24, r24
     9ec:	91 f0       	breq	.+36     	; 0xa12 <__stack+0x113>
      if(valvePCOpen < minReallyOpen)
     9ee:	f8 16       	cp	r15, r24
     9f0:	18 f0       	brcs	.+6      	; 0x9f8 <__stack+0xf9>

      // Continue shutting valve slowly as not yet fully closed.
      // TODO-117: allow very slow final turn off to help systems with poor bypass, ~1% per minute.
      // Special slow-turn-off rules for final part of travel at/below "min % really open" floor.
      const uint8_t minReallyOpen = inputState.minPCOpen;
      const uint8_t lingerThreshold = (minReallyOpen > 0) ? (minReallyOpen-1) : 0;
     9f2:	48 2f       	mov	r20, r24
     9f4:	41 50       	subi	r20, 0x01	; 1
     9f6:	0e c0       	rjmp	.+28     	; 0xa14 <__stack+0x115>
      if(valvePCOpen < minReallyOpen)
        {
        // If lingered long enough then do final chunk in one burst to help avoid valve hiss and temperature overshoot.
        if((DEFAULT_MAX_RUN_ON_TIME_M < minReallyOpen) && (valvePCOpen < minReallyOpen - DEFAULT_MAX_RUN_ON_TIME_M))
     9f8:	86 30       	cpi	r24, 0x06	; 6
     9fa:	08 f4       	brcc	.+2      	; 0x9fe <__stack+0xff>
     9fc:	55 c0       	rjmp	.+170    	; 0xaa8 <__stack+0x1a9>
     9fe:	2f 2d       	mov	r18, r15
     a00:	30 e0       	ldi	r19, 0x00	; 0
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	05 97       	sbiw	r24, 0x05	; 5
     a06:	28 17       	cp	r18, r24
     a08:	39 07       	cpc	r19, r25
     a0a:	0c f0       	brlt	.+2      	; 0xa0e <__stack+0x10f>
     a0c:	4d c0       	rjmp	.+154    	; 0xaa8 <__stack+0x1a9>
     a0e:	40 e0       	ldi	r20, 0x00	; 0
     a10:	79 c0       	rjmp	.+242    	; 0xb04 <__stack+0x205>
          { return(0); } // Shut valve completely.
        return(valvePCOpen - 1); // Turn down as slowly as reasonably possible to help boiler cool.
     a12:	40 e0       	ldi	r20, 0x00	; 0
        }

      // TODO-109: with comfort bias close relatively slowly to reduce wasted effort from minor overshoots.
      // TODO-453: close relatively slowly when temperature error is small (<1C) to reduce wasted effort from minor overshoots.
      if(((!inputState.hasEcoBias) || justOverTemp || retainedState.isFiltering) &&
     a14:	8d 81       	ldd	r24, Y+5	; 0x05
     a16:	88 23       	and	r24, r24
     a18:	41 f0       	breq	.+16     	; 0xa2a <__stack+0x12b>
     a1a:	55 23       	and	r21, r21
     a1c:	31 f4       	brne	.+12     	; 0xa2a <__stack+0x12b>
     a1e:	d8 01       	movw	r26, r16
     a20:	11 96       	adiw	r26, 0x01	; 1
     a22:	8c 91       	ld	r24, X
     a24:	88 23       	and	r24, r24
     a26:	09 f4       	brne	.+2      	; 0xa2a <__stack+0x12b>
     a28:	6d c0       	rjmp	.+218    	; 0xb04 <__stack+0x205>
     a2a:	24 2f       	mov	r18, r20
     a2c:	30 e0       	ldi	r19, 0x00	; 0
     a2e:	8a 81       	ldd	r24, Y+2	; 0x02
     a30:	68 2f       	mov	r22, r24
     a32:	70 e0       	ldi	r23, 0x00	; 0
     a34:	26 17       	cp	r18, r22
     a36:	37 07       	cpc	r19, r23
     a38:	1c f4       	brge	.+6      	; 0xa40 <__stack+0x141>
     a3a:	b9 01       	movw	r22, r18
     a3c:	6f 5f       	subi	r22, 0xFF	; 255
     a3e:	7f 4f       	sbci	r23, 0xFF	; 255
     a40:	8f 2d       	mov	r24, r15
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	68 17       	cp	r22, r24
     a46:	79 07       	cpc	r23, r25
     a48:	0c f0       	brlt	.+2      	; 0xa4c <__stack+0x14d>
     a4a:	5c c0       	rjmp	.+184    	; 0xb04 <__stack+0x205>
     a4c:	2d c0       	rjmp	.+90     	; 0xaa8 <__stack+0x1a9>

  // Close to (or at) temp target: set valve partly open to try to tightly regulate.
  //
  // Use currentTempC16 lsbits to set valve percentage for proportional feedback
  // to provide more efficient and quieter TRV drive and probably more stable room temperature.
  const uint8_t lsbits = (uint8_t) (adjustedTempC16 & 0xf); // LSbits of temperature above base of proportional adjustment range.
     a4e:	52 2f       	mov	r21, r18
     a50:	5f 70       	andi	r21, 0x0F	; 15
//    uint8_t tmp = (uint8_t) (refTempC16 & 0xf); // Only interested in lsbits.
  const uint8_t tmp = 16 - lsbits; // Now in range 1 (at warmest end of 'correct' temperature) to 16 (coolest).
  const uint8_t ulpStep = 6;
  // Get to nominal range 6 to 96, eg valve nearly shut just below top of 'correct' temperature window.
  const uint8_t targetPORaw = tmp * ulpStep;
     a52:	80 e1       	ldi	r24, 0x10	; 16
     a54:	85 1b       	sub	r24, r21
     a56:	96 e0       	ldi	r25, 0x06	; 6
     a58:	89 9f       	mul	r24, r25
     a5a:	90 01       	movw	r18, r0
     a5c:	11 24       	eor	r1, r1
  // Constrain from below to likely minimum-open value, in part to deal with TODO-117 'linger open' in lieu of boiler bypass.
  // Constrain from above by maximum percentage open allowed, eg for pay-by-volume systems.
  const uint8_t targetPO = constrain(targetPORaw, inputState.minPCOpen, inputState.maxPCOpen);
     a5e:	99 81       	ldd	r25, Y+1	; 0x01
     a60:	29 17       	cp	r18, r25
     a62:	28 f0       	brcs	.+10     	; 0xa6e <__stack+0x16f>
     a64:	8a 81       	ldd	r24, Y+2	; 0x02
     a66:	92 2f       	mov	r25, r18
     a68:	82 17       	cp	r24, r18
     a6a:	08 f4       	brcc	.+2      	; 0xa6e <__stack+0x16f>
     a6c:	98 2f       	mov	r25, r24

  // Reduce spurious valve/boiler adjustment by avoiding movement at all unless current temperature error is significant.
  if(targetPO != valvePCOpen)
     a6e:	9f 15       	cp	r25, r15
     a70:	09 f4       	brne	.+2      	; 0xa74 <__stack+0x175>
     a72:	47 c0       	rjmp	.+142    	; 0xb02 <__stack+0x203>
    const bool tooOpen = (targetPO < valvePCOpen);
    // Compute the minimum/epsilon slew adjustment allowed (the deadband).
    // Also increase effective deadband if temperature resolution is lower than 1/16th, eg 8ths => 1+2*ulpStep minimum.
// FIXME //    const uint8_t realMinUlp = 1 + (inputState.isLowPrecision ? 2*ulpStep : ulpStep); // Assume precision no coarser than 1/8C.
    const uint8_t realMinUlp = 1 + ulpStep;
    const uint8_t minAbsSlew = fnmax(realMinUlp, (uint8_t)(inputState.widenDeadband ? max(min(DEFAULT_VALVE_PC_MODERATELY_OPEN/2,max(TRV_MAX_SLEW_PC_PER_MIN,2*TRV_MIN_SLEW_PC)), 2+TRV_MIN_SLEW_PC) : TRV_MIN_SLEW_PC));
     a74:	4b 81       	ldd	r20, Y+3	; 0x03
     a76:	44 23       	and	r20, r20
     a78:	11 f0       	breq	.+4      	; 0xa7e <__stack+0x17f>
     a7a:	2e e0       	ldi	r18, 0x0E	; 14
     a7c:	01 c0       	rjmp	.+2      	; 0xa80 <__stack+0x181>
     a7e:	27 e0       	ldi	r18, 0x07	; 7
    if(tooOpen) // Currently open more than required.  Still below target at top of proportional range.
     a80:	9f 15       	cp	r25, r15
     a82:	a8 f4       	brcc	.+42     	; 0xaae <__stack+0x1af>
      {
//DEBUG_SERIAL_PRINTLN_FLASHSTRING("slightly too open");
      const uint8_t slew = valvePCOpen - targetPO;
      // Ensure no hunting for ~1ulp temperature wobble.
      if(slew < minAbsSlew) { return(valvePCOpen); }
     a84:	8f 2d       	mov	r24, r15
     a86:	89 1b       	sub	r24, r25
     a88:	82 17       	cp	r24, r18
     a8a:	d8 f1       	brcs	.+118    	; 0xb02 <__stack+0x203>

      // Reduce valve hunting: defer re-closing if recently opened.
      if(retainedState.dontTurndown()) { return(valvePCOpen); }
     a8c:	f8 01       	movw	r30, r16
     a8e:	86 81       	ldd	r24, Z+6	; 0x06
     a90:	88 23       	and	r24, r24
     a92:	b9 f5       	brne	.+110    	; 0xb02 <__stack+0x203>

      // TODO-453: avoid closing the valve at all when the (raw) temperature is not rising, so as to minimise valve movement.
      // Since the target is the top of the proportional range than nothing within it requires the temperature to be *forced* down.
      // Possibly don't apply this rule at the very top of the range in case filtering is on and the filtered value moves differently to the raw.
      if(retainedState.getRawDelta() <= 0) { return(valvePCOpen); }
     a94:	87 81       	ldd	r24, Z+7	; 0x07
     a96:	90 85       	ldd	r25, Z+8	; 0x08
     a98:	21 85       	ldd	r18, Z+9	; 0x09
     a9a:	32 85       	ldd	r19, Z+10	; 0x0a
     a9c:	82 1b       	sub	r24, r18
     a9e:	93 0b       	sbc	r25, r19
     aa0:	18 16       	cp	r1, r24
     aa2:	19 06       	cpc	r1, r25
     aa4:	74 f5       	brge	.+92     	; 0xb02 <__stack+0x203>
      // TODO-482: try to deal better with jittery temperature readings.
      const bool beGlacial = inputState.glacial ||
#if defined(GLACIAL_ON_WITH_WIDE_DEADBAND)
          ((inputState.widenDeadband || retainedState.isFiltering) && (valvePCOpen <= DEFAULT_VALVE_PC_MODERATELY_OPEN)) ||
#endif
          (lsbits < 8);
     aa6:	8c 81       	ldd	r24, Y+4	; 0x04
      if(beGlacial) { return(valvePCOpen - 1); }

      if(slew > TRV_SLEW_PC_PER_MIN_FAST)
          { return(valvePCOpen - TRV_SLEW_PC_PER_MIN_FAST); } // Cap slew rate.
     aa8:	4f 2d       	mov	r20, r15
     aaa:	41 50       	subi	r20, 0x01	; 1
     aac:	2b c0       	rjmp	.+86     	; 0xb04 <__stack+0x205>
    // if(targetPO > TRVPercentOpen) // Currently open less than required.  Still below target at top of proportional range.
//DEBUG_SERIAL_PRINTLN_FLASHSTRING("slightly too closed");
#if defined(SUPPORT_BAKE)
    // If room is well below target and in BAKE mode then immediately open to maximum.
    // Needs debounced bake mode value to avoid spuriously slamming open the valve as the user cycles through modes.
    if(inputState.inBakeMode) { return(inputState.maxPCOpen); }
     aae:	8e 81       	ldd	r24, Y+6	; 0x06
     ab0:	88 23       	and	r24, r24
     ab2:	11 f0       	breq	.+4      	; 0xab8 <__stack+0x1b9>
     ab4:	4a 81       	ldd	r20, Y+2	; 0x02
     ab6:	26 c0       	rjmp	.+76     	; 0xb04 <__stack+0x205>
#endif

    const uint8_t slew = targetPO - valvePCOpen;
    // To to avoid hunting around boundaries of a ~1ulp temperature step.
    if(slew < minAbsSlew) { return(valvePCOpen); }
     ab8:	9f 19       	sub	r25, r15
     aba:	92 17       	cp	r25, r18
     abc:	10 f1       	brcs	.+68     	; 0xb02 <__stack+0x203>

    // Reduce valve hunting: defer re-opening if recently closed.
    if(retainedState.dontTurnup()) { return(valvePCOpen); }
     abe:	d8 01       	movw	r26, r16
     ac0:	15 96       	adiw	r26, 0x05	; 5
     ac2:	8c 91       	ld	r24, X
     ac4:	15 97       	sbiw	r26, 0x05	; 5
     ac6:	88 23       	and	r24, r24
     ac8:	e1 f4       	brne	.+56     	; 0xb02 <__stack+0x203>
    // Keeping the temperature steady anywhere in the target proportional range
    // while minimising valve moment/noise/etc is a good goal,
    // so if raw temperatures are rising at the moment then leave the valve as-is.
    // If fairly near the final target then also leave the valve as-is (TODO-453 & TODO-451).
    const int rise = retainedState.getRawDelta();
    if(rise > 0) { return(valvePCOpen); }
     aca:	17 96       	adiw	r26, 0x07	; 7
     acc:	8d 91       	ld	r24, X+
     ace:	9c 91       	ld	r25, X
     ad0:	18 97       	sbiw	r26, 0x08	; 8
     ad2:	19 96       	adiw	r26, 0x09	; 9
     ad4:	2d 91       	ld	r18, X+
     ad6:	3c 91       	ld	r19, X
     ad8:	1a 97       	sbiw	r26, 0x0a	; 10
     ada:	82 1b       	sub	r24, r18
     adc:	93 0b       	sbc	r25, r19
     ade:	18 16       	cp	r1, r24
     ae0:	19 06       	cpc	r1, r25
     ae2:	7c f0       	brlt	.+30     	; 0xb02 <__stack+0x203>
    if( /* (0 == rise) && */ (lsbits >= (inputState.widenDeadband ? 8 : 12))) { return(valvePCOpen); }
     ae4:	44 23       	and	r20, r20
     ae6:	19 f4       	brne	.+6      	; 0xaee <__stack+0x1ef>
     ae8:	2c e0       	ldi	r18, 0x0C	; 12
     aea:	30 e0       	ldi	r19, 0x00	; 0
     aec:	02 c0       	rjmp	.+4      	; 0xaf2 <__stack+0x1f3>
     aee:	28 e0       	ldi	r18, 0x08	; 8
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	85 2f       	mov	r24, r21
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	82 17       	cp	r24, r18
     af8:	93 07       	cpc	r25, r19
     afa:	1c f4       	brge	.+6      	; 0xb02 <__stack+0x203>
    if(beGlacial) { return(valvePCOpen + 1); }

    // Slew open faster with comfort bias.
    const uint8_t maxSlew = (!inputState.hasEcoBias) ? TRV_SLEW_PC_PER_MIN_FAST : TRV_MAX_SLEW_PC_PER_MIN;
    if(slew > maxSlew)
        { return(valvePCOpen + maxSlew); } // Cap slew rate open.
     afc:	4f 2d       	mov	r20, r15
     afe:	4f 5f       	subi	r20, 0xFF	; 255
     b00:	01 c0       	rjmp	.+2      	; 0xb04 <__stack+0x205>
     b02:	4f 2d       	mov	r20, r15
    return(targetPO);
    }

  // Leave value position as was...
  return(valvePCOpen);
  }
     b04:	84 2f       	mov	r24, r20
     b06:	df 91       	pop	r29
     b08:	cf 91       	pop	r28
     b0a:	1f 91       	pop	r17
     b0c:	0f 91       	pop	r16
     b0e:	ff 90       	pop	r15
     b10:	08 95       	ret
    if(beGlacial) { return(valvePCOpen + 1); }

    // Slew open faster with comfort bias.
    const uint8_t maxSlew = (!inputState.hasEcoBias) ? TRV_SLEW_PC_PER_MIN_FAST : TRV_MAX_SLEW_PC_PER_MIN;
    if(slew > maxSlew)
        { return(valvePCOpen + maxSlew); } // Cap slew rate open.
     b12:	85 2f       	mov	r24, r21
     b14:	55 23       	and	r21, r21
     b16:	09 f4       	brne	.+2      	; 0xb1a <__stack+0x21b>
     b18:	81 e0       	ldi	r24, 0x01	; 1
      const uint8_t slewRate =
          ((valvePCOpen >= DEFAULT_VALVE_PC_MODERATELY_OPEN) || (adjustedTempC == inputState.targetTempC-1)) ?
              TRV_MAX_SLEW_PC_PER_MIN : TRV_SLEW_PC_PER_MIN_FAST;
      const uint8_t minOpenFromCold = fnmax(slewRate, inputState.minPCOpen);
      // Open to 'minimum' likely open state immediately if less open currently.
      if(valvePCOpen < minOpenFromCold) { return(minOpenFromCold); }
     b1a:	f8 16       	cp	r15, r24
     b1c:	08 f0       	brcs	.+2      	; 0xb20 <__stack+0x221>
     b1e:	34 cf       	rjmp	.-408    	; 0x988 <__stack+0x89>
     b20:	48 2f       	mov	r20, r24
     b22:	f0 cf       	rjmp	.-32     	; 0xb04 <__stack+0x205>

00000b24 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)>:

// Perform per-minute tasks such as counter and filter updates then recompute valve position.
// The input state must be complete including target and reference temperatures
// before calling this including the first time whereupon some further lazy initialisation is done.
//   * valvePCOpenRef  current valve position UPDATED BY THIS ROUTINE, in range [0,100]
void ModelledRadValveState::tick(volatile uint8_t &valvePCOpenRef, const ModelledRadValveInputState &inputState)
     b24:	af 92       	push	r10
     b26:	bf 92       	push	r11
     b28:	cf 92       	push	r12
     b2a:	df 92       	push	r13
     b2c:	ef 92       	push	r14
     b2e:	ff 92       	push	r15
     b30:	0f 93       	push	r16
     b32:	1f 93       	push	r17
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29
     b38:	ec 01       	movw	r28, r24
     b3a:	6b 01       	movw	r12, r22
     b3c:	5a 01       	movw	r10, r20
  {
  const int rawTempC16 = inputState.refTempC16 - refTempOffsetC16; // Remove adjustment for target centre.
     b3e:	fa 01       	movw	r30, r20
     b40:	07 81       	ldd	r16, Z+7	; 0x07
     b42:	10 85       	ldd	r17, Z+8	; 0x08
     b44:	08 50       	subi	r16, 0x08	; 8
     b46:	10 40       	sbci	r17, 0x00	; 0
  if(!initialised)
     b48:	88 81       	ld	r24, Y
     b4a:	88 23       	and	r24, r24
     b4c:	71 f4       	brne	.+28     	; 0xb6a <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0x46>
     b4e:	fe 01       	movw	r30, r28
     b50:	88 e0       	ldi	r24, 0x08	; 8
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	02 c0       	rjmp	.+4      	; 0xb5a <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0x36>
    {
    // Fill the filter memory with the current room temperature.
    for(int i = filterLength; --i >= 0; ) { prevRawTempC16[i] = rawTempC16; }
     b56:	10 8f       	std	Z+24, r17	; 0x18
     b58:	07 8b       	std	Z+23, r16	; 0x17
     b5a:	01 97       	sbiw	r24, 0x01	; 1
     b5c:	32 97       	sbiw	r30, 0x02	; 2
     b5e:	2f ef       	ldi	r18, 0xFF	; 255
     b60:	8f 3f       	cpi	r24, 0xFF	; 255
     b62:	92 07       	cpc	r25, r18
     b64:	c1 f7       	brne	.-16     	; 0xb56 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0x32>
    initialised = true;
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	88 83       	st	Y, r24
     b6a:	7e 01       	movw	r14, r28
     b6c:	fe 01       	movw	r30, r28
     b6e:	28 e0       	ldi	r18, 0x08	; 8
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	04 c0       	rjmp	.+8      	; 0xb7c <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0x58>
    }

  // Shift in the latest (raw) temperature.
  for(int i = filterLength; --i > 0; ) { prevRawTempC16[i] = prevRawTempC16[i-1]; }
     b74:	85 89       	ldd	r24, Z+21	; 0x15
     b76:	96 89       	ldd	r25, Z+22	; 0x16
     b78:	90 8f       	std	Z+24, r25	; 0x18
     b7a:	87 8b       	std	Z+23, r24	; 0x17
     b7c:	21 50       	subi	r18, 0x01	; 1
     b7e:	30 40       	sbci	r19, 0x00	; 0
     b80:	32 97       	sbiw	r30, 0x02	; 2
     b82:	21 15       	cp	r18, r1
     b84:	31 05       	cpc	r19, r1
     b86:	b1 f7       	brne	.-20     	; 0xb74 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0x50>
  prevRawTempC16[0] = rawTempC16;
     b88:	18 87       	std	Y+8, r17	; 0x08
     b8a:	0f 83       	std	Y+7, r16	; 0x07

  // Disable/enable filtering.
  // Allow possible exit from filtering for next time
  // if the raw value is close enough to the current filtered value
  // so that reverting to unfiltered will not of itself cause a big jump.
  if(isFiltering)
     b8c:	89 81       	ldd	r24, Y+1	; 0x01
     b8e:	88 23       	and	r24, r24
     b90:	c9 f0       	breq	.+50     	; 0xbc4 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0xa0>
    {
    if(abs(getSmoothedRecent() - rawTempC16) <= MAX_TEMP_JUMP_C16) { isFiltering = false; }  
     b92:	ce 01       	movw	r24, r28
     b94:	0e 94 50 04 	call	0x8a0	; 0x8a0 <ModelledRadValveState::getSmoothedRecent()>
     b98:	80 1b       	sub	r24, r16
     b9a:	91 0b       	sbc	r25, r17
     b9c:	18 16       	cp	r1, r24
     b9e:	19 06       	cpc	r1, r25
     ba0:	44 f4       	brge	.+16     	; 0xbb2 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0x8e>
     ba2:	ce 01       	movw	r24, r28
     ba4:	0e 94 50 04 	call	0x8a0	; 0x8a0 <ModelledRadValveState::getSmoothedRecent()>
     ba8:	80 1b       	sub	r24, r16
     baa:	91 0b       	sbc	r25, r17
     bac:	04 97       	sbiw	r24, 0x04	; 4
     bae:	54 f4       	brge	.+20     	; 0xbc4 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0xa0>
     bb0:	08 c0       	rjmp	.+16     	; 0xbc2 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0x9e>
     bb2:	ce 01       	movw	r24, r28
     bb4:	0e 94 50 04 	call	0x8a0	; 0x8a0 <ModelledRadValveState::getSmoothedRecent()>
     bb8:	08 1b       	sub	r16, r24
     bba:	19 0b       	sbc	r17, r25
     bbc:	04 30       	cpi	r16, 0x04	; 4
     bbe:	11 05       	cpc	r17, r1
     bc0:	0c f4       	brge	.+2      	; 0xbc4 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0xa0>
     bc2:	19 82       	std	Y+1, r1	; 0x01
    }
  // Force filtering (back) on if any adjacent past readings are wildly different.
  if(!isFiltering)
     bc4:	89 81       	ldd	r24, Y+1	; 0x01
     bc6:	88 23       	and	r24, r24
     bc8:	e9 f4       	brne	.+58     	; 0xc04 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0xe0>
     bca:	41 e0       	ldi	r20, 0x01	; 1
     bcc:	50 e0       	ldi	r21, 0x00	; 0
    {
    for(int i = 1; i < filterLength; ++i) { if(abs(prevRawTempC16[i] - prevRawTempC16[i-1]) > MAX_TEMP_JUMP_C16) { isFiltering = true; break; } }
     bce:	f7 01       	movw	r30, r14
     bd0:	21 85       	ldd	r18, Z+9	; 0x09
     bd2:	32 85       	ldd	r19, Z+10	; 0x0a
     bd4:	87 81       	ldd	r24, Z+7	; 0x07
     bd6:	90 85       	ldd	r25, Z+8	; 0x08
     bd8:	28 1b       	sub	r18, r24
     bda:	39 0b       	sbc	r19, r25
     bdc:	37 ff       	sbrs	r19, 7
     bde:	03 c0       	rjmp	.+6      	; 0xbe6 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0xc2>
     be0:	30 95       	com	r19
     be2:	21 95       	neg	r18
     be4:	3f 4f       	sbci	r19, 0xFF	; 255
     be6:	82 e0       	ldi	r24, 0x02	; 2
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	e8 0e       	add	r14, r24
     bec:	f9 1e       	adc	r15, r25
     bee:	24 30       	cpi	r18, 0x04	; 4
     bf0:	31 05       	cpc	r19, r1
     bf2:	1c f0       	brlt	.+6      	; 0xbfa <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0xd6>
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	89 83       	std	Y+1, r24	; 0x01
     bf8:	05 c0       	rjmp	.+10     	; 0xc04 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0xe0>
     bfa:	4f 5f       	subi	r20, 0xFF	; 255
     bfc:	5f 4f       	sbci	r21, 0xFF	; 255
     bfe:	48 30       	cpi	r20, 0x08	; 8
     c00:	51 05       	cpc	r21, r1
     c02:	29 f7       	brne	.-54     	; 0xbce <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0xaa>
    }

  // Tick count down timers.
  if(valveTurndownCountdownM > 0) { --valveTurndownCountdownM; }
     c04:	8d 81       	ldd	r24, Y+5	; 0x05
     c06:	88 23       	and	r24, r24
     c08:	11 f0       	breq	.+4      	; 0xc0e <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0xea>
     c0a:	81 50       	subi	r24, 0x01	; 1
     c0c:	8d 83       	std	Y+5, r24	; 0x05
  if(valveTurnupCountdownM > 0) { --valveTurnupCountdownM; }
     c0e:	8e 81       	ldd	r24, Y+6	; 0x06
     c10:	88 23       	and	r24, r24
     c12:	11 f0       	breq	.+4      	; 0xc18 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0xf4>
     c14:	81 50       	subi	r24, 0x01	; 1
     c16:	8e 83       	std	Y+6, r24	; 0x06

  // Update the modelled state including the valve position passed by reference.
  const uint8_t newValvePC = ModelledRadValve::computeRequiredTRVPercentOpen(valvePCOpenRef, inputState, *this);
     c18:	f6 01       	movw	r30, r12
     c1a:	80 81       	ld	r24, Z
     c1c:	b5 01       	movw	r22, r10
     c1e:	ae 01       	movw	r20, r28
     c20:	0e 94 65 04 	call	0x8ca	; 0x8ca <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)>
     c24:	68 2f       	mov	r22, r24
  const bool changed = (newValvePC != valvePCOpenRef);
     c26:	f6 01       	movw	r30, r12
     c28:	80 81       	ld	r24, Z
     c2a:	70 e0       	ldi	r23, 0x00	; 0
     c2c:	68 17       	cp	r22, r24
     c2e:	29 f1       	breq	.+74     	; 0xc7a <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0x156>
     c30:	71 e0       	ldi	r23, 0x01	; 1
  if(changed)
    {
    if(newValvePC > valvePCOpenRef)
     c32:	80 81       	ld	r24, Z
     c34:	3c 81       	ldd	r19, Y+4	; 0x04
     c36:	46 2f       	mov	r20, r22
     c38:	50 e0       	ldi	r21, 0x00	; 0
     c3a:	86 17       	cp	r24, r22
     c3c:	58 f4       	brcc	.+22     	; 0xc54 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0x130>
  // causing measured temperatures to veer up and down.
  // This attempts to reduce excessive valve noise and energy use
  // and help to avoid boiler short-cycling.
  uint8_t valveTurnupCountdownM;
  // Mark flow as having been increased.
  void valveTurnup() { valveTurnupCountdownM = ANTISEEK_VALVE_RECLOSE_DELAY_M; }
     c3e:	83 e0       	ldi	r24, 0x03	; 3
     c40:	8e 83       	std	Y+6, r24	; 0x06
      {
      // Defer reclosing valve to avoid excessive hunting.
      valveTurnup();
      cumulativeMovementPC += (newValvePC - valvePCOpenRef);
     c42:	20 81       	ld	r18, Z
     c44:	8b 81       	ldd	r24, Y+3	; 0x03
     c46:	93 2f       	mov	r25, r19
     c48:	9f 70       	andi	r25, 0x0F	; 15
     c4a:	82 1b       	sub	r24, r18
     c4c:	91 09       	sbc	r25, r1
     c4e:	84 0f       	add	r24, r20
     c50:	95 1f       	adc	r25, r21
     c52:	0b c0       	rjmp	.+22     	; 0xc6a <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0x146>
  // causing measured temperatures to veer up and down.
  // This attempts to reduce excessive valve noise and energy use
  // and help to avoid boiler short-cycling.
  uint8_t valveTurndownCountdownM;
  // Mark flow as having been reduced.
  void valveTurndown() { valveTurndownCountdownM = ANTISEEK_VALVE_REOPEN_DELAY_M; }
     c54:	86 e0       	ldi	r24, 0x06	; 6
     c56:	8d 83       	std	Y+5, r24	; 0x05
      }
    else
      {
      // Defer opening valve to avoid excessive hunting.
      valveTurndown();
      cumulativeMovementPC += (valvePCOpenRef - newValvePC);
     c58:	f6 01       	movw	r30, r12
     c5a:	20 81       	ld	r18, Z
     c5c:	8b 81       	ldd	r24, Y+3	; 0x03
     c5e:	93 2f       	mov	r25, r19
     c60:	9f 70       	andi	r25, 0x0F	; 15
     c62:	82 0f       	add	r24, r18
     c64:	91 1d       	adc	r25, r1
     c66:	84 1b       	sub	r24, r20
     c68:	95 0b       	sbc	r25, r21
     c6a:	8b 83       	std	Y+3, r24	; 0x03
     c6c:	89 2f       	mov	r24, r25
     c6e:	8f 70       	andi	r24, 0x0F	; 15
     c70:	30 7f       	andi	r19, 0xF0	; 240
     c72:	38 2b       	or	r19, r24
     c74:	3c 83       	std	Y+4, r19	; 0x04
      }
    valvePCOpenRef = newValvePC;
     c76:	f6 01       	movw	r30, r12
     c78:	60 83       	st	Z, r22
    }
  valveMoved = changed;
     c7a:	7a 83       	std	Y+2, r23	; 0x02
  }
     c7c:	df 91       	pop	r29
     c7e:	cf 91       	pop	r28
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	cf 90       	pop	r12
     c8c:	bf 90       	pop	r11
     c8e:	af 90       	pop	r10
     c90:	08 95       	ret

00000c92 <getByHourStat(unsigned char, unsigned char)>:
// Get raw stats value for hour HH [0,23] from stats set N from non-volatile (EEPROM) store.
// A value of 0xff (255) means unset (or out of range); other values depend on which stats set is being used.
// The stats set is determined by the order in memory.
uint8_t getByHourStat(uint8_t hh, uint8_t statsSet)
  {
  if(statsSet > (EE_END_STATS - EE_START_STATS) / EE_STATS_SET_SIZE) { return((uint8_t) 0xff); } // Invalid set.
     c92:	6b 30       	cpi	r22, 0x0B	; 11
     c94:	98 f4       	brcc	.+38     	; 0xcbc <getByHourStat(unsigned char, unsigned char)+0x2a>
  if(hh > 23) { return((uint8_t) 0xff); } // Invalid hour.
     c96:	88 31       	cpi	r24, 0x18	; 24
     c98:	88 f4       	brcc	.+34     	; 0xcbc <getByHourStat(unsigned char, unsigned char)+0x2a>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     c9a:	f9 99       	sbic	0x1f, 1	; 31
     c9c:	fe cf       	rjmp	.-4      	; 0xc9a <getByHourStat(unsigned char, unsigned char)+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     c9e:	28 2f       	mov	r18, r24
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	20 50       	subi	r18, 0x00	; 0
     ca4:	3f 4f       	sbci	r19, 0xFF	; 255
     ca6:	88 e1       	ldi	r24, 0x18	; 24
     ca8:	68 9f       	mul	r22, r24
     caa:	c0 01       	movw	r24, r0
     cac:	11 24       	eor	r1, r1
     cae:	28 0f       	add	r18, r24
     cb0:	39 1f       	adc	r19, r25
     cb2:	32 bd       	out	0x22, r19	; 34
     cb4:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     cb6:	f8 9a       	sbi	0x1f, 0	; 31
     cb8:	80 b5       	in	r24, 0x20	; 32
     cba:	08 95       	ret
  return(eeprom_read_byte((uint8_t *)(EE_START_STATS + (statsSet * (int)EE_STATS_SET_SIZE) + (int)hh)));
     cbc:	8f ef       	ldi	r24, 0xFF	; 255
  }
     cbe:	08 95       	ret

00000cc0 <compressTempC16(int)>:
#define COMPRESSION_C16_HIGH_THR_AFTER (COMPRESSION_C16_LOW_THR_AFTER + ((COMPRESSION_C16_HIGH_THRESHOLD-COMPRESSION_C16_LOW_THRESHOLD)>>1)) // High threshold after compression.
#define COMPRESSION_C16_CEIL_VAL (100<<4) // Ceiling input value to compression.
#define COMPRESSION_C16_CEIL_VAL_AFTER (COMPRESSION_C16_HIGH_THR_AFTER + ((COMPRESSION_C16_CEIL_VAL-COMPRESSION_C16_HIGH_THRESHOLD) >> 3)) // Ceiling input value after compression.
uint8_t compressTempC16(int tempC16)
  {
  if(tempC16 <= 0) { return(0); } // Clamp negative values to zero.
     cc0:	18 16       	cp	r1, r24
     cc2:	19 06       	cpc	r1, r25
     cc4:	14 f0       	brlt	.+4      	; 0xcca <compressTempC16(int)+0xa>
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	08 95       	ret
  if(tempC16 < COMPRESSION_C16_LOW_THRESHOLD) { return(tempC16 >> 3); } // Preserve 1 bit after the binary point (0.5C precision).
     cca:	8f 3f       	cpi	r24, 0xFF	; 255
     ccc:	91 05       	cpc	r25, r1
     cce:	09 f0       	breq	.+2      	; 0xcd2 <compressTempC16(int)+0x12>
     cd0:	34 f4       	brge	.+12     	; 0xcde <compressTempC16(int)+0x1e>
     cd2:	63 e0       	ldi	r22, 0x03	; 3
     cd4:	95 95       	asr	r25
     cd6:	87 95       	ror	r24
     cd8:	6a 95       	dec	r22
     cda:	e1 f7       	brne	.-8      	; 0xcd4 <compressTempC16(int)+0x14>
     cdc:	08 95       	ret
  if(tempC16 < COMPRESSION_C16_HIGH_THRESHOLD)
     cde:	21 e0       	ldi	r18, 0x01	; 1
     ce0:	80 38       	cpi	r24, 0x80	; 128
     ce2:	92 07       	cpc	r25, r18
     ce4:	34 f4       	brge	.+12     	; 0xcf2 <compressTempC16(int)+0x32>
    { return(((tempC16 - COMPRESSION_C16_LOW_THRESHOLD) >> 1) + COMPRESSION_C16_LOW_THR_AFTER); }
     ce6:	80 50       	subi	r24, 0x00	; 0
     ce8:	91 40       	sbci	r25, 0x01	; 1
     cea:	95 95       	asr	r25
     cec:	87 95       	ror	r24
     cee:	80 5e       	subi	r24, 0xE0	; 224
     cf0:	08 95       	ret
  if(tempC16 < COMPRESSION_C16_CEIL_VAL)
     cf2:	26 e0       	ldi	r18, 0x06	; 6
     cf4:	80 34       	cpi	r24, 0x40	; 64
     cf6:	92 07       	cpc	r25, r18
     cf8:	14 f0       	brlt	.+4      	; 0xcfe <compressTempC16(int)+0x3e>
     cfa:	88 ef       	ldi	r24, 0xF8	; 248
     cfc:	08 95       	ret
    { return(((tempC16 - COMPRESSION_C16_HIGH_THRESHOLD) >> 3) + COMPRESSION_C16_HIGH_THR_AFTER); }
     cfe:	80 58       	subi	r24, 0x80	; 128
     d00:	91 40       	sbci	r25, 0x01	; 1
     d02:	43 e0       	ldi	r20, 0x03	; 3
     d04:	95 95       	asr	r25
     d06:	87 95       	ror	r24
     d08:	4a 95       	dec	r20
     d0a:	e1 f7       	brne	.-8      	; 0xd04 <compressTempC16(int)+0x44>
     d0c:	80 5a       	subi	r24, 0xA0	; 160
  return(COMPRESSION_C16_CEIL_VAL_AFTER);
  }
     d0e:	08 95       	ret

00000d10 <expandTempC16(unsigned char)>:

// Reverses range compression done by compressTempC16(); results in range [0,100], with varying precision based on original value.
// 0xff (or other invalid) input results in STATS_UNSET_INT. 
int expandTempC16(uint8_t cTemp)
  {
  if(cTemp < COMPRESSION_C16_LOW_THR_AFTER) { return(cTemp << 3); }
     d10:	80 32       	cpi	r24, 0x20	; 32
     d12:	40 f4       	brcc	.+16     	; 0xd24 <expandTempC16(unsigned char)+0x14>
     d14:	28 2f       	mov	r18, r24
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	f3 e0       	ldi	r31, 0x03	; 3
     d1a:	22 0f       	add	r18, r18
     d1c:	33 1f       	adc	r19, r19
     d1e:	fa 95       	dec	r31
     d20:	e1 f7       	brne	.-8      	; 0xd1a <expandTempC16(unsigned char)+0xa>
     d22:	17 c0       	rjmp	.+46     	; 0xd52 <expandTempC16(unsigned char)+0x42>
  if(cTemp < COMPRESSION_C16_HIGH_THR_AFTER)
     d24:	80 36       	cpi	r24, 0x60	; 96
     d26:	38 f4       	brcc	.+14     	; 0xd36 <expandTempC16(unsigned char)+0x26>
    { return(((cTemp - COMPRESSION_C16_LOW_THR_AFTER) << 1) + COMPRESSION_C16_LOW_THRESHOLD); }
     d28:	28 2f       	mov	r18, r24
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	22 0f       	add	r18, r18
     d2e:	33 1f       	adc	r19, r19
     d30:	20 54       	subi	r18, 0x40	; 64
     d32:	3f 4f       	sbci	r19, 0xFF	; 255
     d34:	0e c0       	rjmp	.+28     	; 0xd52 <expandTempC16(unsigned char)+0x42>
  if(cTemp <= COMPRESSION_C16_CEIL_VAL_AFTER)
     d36:	89 3f       	cpi	r24, 0xF9	; 249
     d38:	18 f0       	brcs	.+6      	; 0xd40 <expandTempC16(unsigned char)+0x30>
     d3a:	2f ef       	ldi	r18, 0xFF	; 255
     d3c:	3f e7       	ldi	r19, 0x7F	; 127
     d3e:	09 c0       	rjmp	.+18     	; 0xd52 <expandTempC16(unsigned char)+0x42>
    { return(((cTemp - COMPRESSION_C16_HIGH_THR_AFTER) << 3) + COMPRESSION_C16_HIGH_THRESHOLD); }
     d40:	28 2f       	mov	r18, r24
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	73 e0       	ldi	r23, 0x03	; 3
     d46:	22 0f       	add	r18, r18
     d48:	33 1f       	adc	r19, r19
     d4a:	7a 95       	dec	r23
     d4c:	e1 f7       	brne	.-8      	; 0xd46 <expandTempC16(unsigned char)+0x36>
     d4e:	20 58       	subi	r18, 0x80	; 128
     d50:	31 40       	sbci	r19, 0x01	; 1
  return(STATS_UNSET_INT); // Invalid/unset input.
  }
     d52:	c9 01       	movw	r24, r18
     d54:	08 95       	ret

00000d56 <pollIO(bool)>:
        { return(true); }
      }
    }
#endif
  return(false);
  }
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	08 95       	ret

00000d5a <Sensor<unsigned char>::handleInterruptSimple()>:
    // Must be fast and ISR (Interrupt Service Routine) safe.
    // Returns true if interrupt was successfully handled and cleared
    // else another interrupt handler in the chain may be called
    // to attempt to clear the interrupt.
    // By default does nothing (and returns false).
    virtual bool handleInterruptSimple() { return(false); }
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	08 95       	ret

00000d5e <Sensor<unsigned char>::begin()>:

    // Begin access to this sensor if applicable and not already begun.
    // Returns true if it needed to be begun.
    // Allows logic to end() if required at the end of a block, etc.
    // Defaults to do nothing (and return false).
    virtual bool begin() { return(false); }
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	08 95       	ret

00000d62 <Sensor<unsigned char>::isAvailable() const>:

    // Returns true if this sensor is currently available.
    // True by default unless implementation overrides.
    // For those sensors that need starting this will be false before begin().
    virtual bool isAvailable() const { return(true); }
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	08 95       	ret

00000d66 <Sensor<unsigned char>::end()>:

    // End access to this sensor if applicable and not already ended.
    // Returns true if it needed to be ended.
    // Defaults to do nothing (and return false).
    virtual bool end() { return(false); }
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	08 95       	ret

00000d6a <Sensor<unsigned char>::isValid(unsigned char) const>:
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual T get() const = 0;

    // Returns true if this sensor reading value passed is potentially valid, eg in-range.
    // Default is to always return true, ie all values potentially valid.
    virtual bool isValid(T value) const { return(true); }
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	08 95       	ret

00000d6e <global constructors keyed to _Z10inWarmModev>:
  {
  protected:
      volatile uint8_t value;

      // By default initialise the value to zero.
      SimpleTSUint8Sensor() : value(0) { }
     d6e:	10 92 ec 01 	sts	0x01EC, r1
    // Hours and minutes since room became vacant (doesn't roll back to zero from max hours); zero when room occupied.
    uint8_t vacancyH;
    uint8_t vacancyM;

  public:
    OccupancyTracker() : occupationCountdownM(0), activityCountdownM(0), vacancyH(0), vacancyM(0) { }
     d72:	86 e6       	ldi	r24, 0x66	; 102
     d74:	91 e0       	ldi	r25, 0x01	; 1
     d76:	90 93 eb 01 	sts	0x01EB, r25
     d7a:	80 93 ea 01 	sts	0x01EA, r24
     d7e:	10 92 ed 01 	sts	0x01ED, r1
     d82:	10 92 ee 01 	sts	0x01EE, r1
     d86:	10 92 ef 01 	sts	0x01EF, r1
     d8a:	10 92 f0 01 	sts	0x01F0, r1
  protected:
    // Requested acuator value/position.
    volatile uint8_t value;

    // By default initialise the value to zero.
    SimpleTSUint8Actuator() : value(0) { }
     d8e:	10 92 f3 01 	sts	0x01F3, r1
  public:
    ModelledRadValve()
      : inputState(0),
        callingForHeat(false),
#if defined(TRV_SLEW_GLACIAL)
        glacial(true)
     d92:	86 e4       	ldi	r24, 0x46	; 70
     d94:	91 e0       	ldi	r25, 0x01	; 1
     d96:	90 93 f2 01 	sts	0x01F2, r25
     d9a:	80 93 f1 01 	sts	0x01F1, r24
struct ModelledRadValveInputState
  {
  ModelledRadValveInputState(const int realTempC16) :
    targetTempC(FROST), 
    minPCOpen(DEFAULT_MIN_VALVE_PC_REALLY_OPEN), maxPCOpen(100),
    widenDeadband(false), glacial(false), hasEcoBias(false), inBakeMode(false)
     d9e:	87 e0       	ldi	r24, 0x07	; 7
     da0:	80 93 f4 01 	sts	0x01F4, r24
     da4:	8a e0       	ldi	r24, 0x0A	; 10
     da6:	80 93 f5 01 	sts	0x01F5, r24
     daa:	84 e6       	ldi	r24, 0x64	; 100
     dac:	80 93 f6 01 	sts	0x01F6, r24
     db0:	10 92 f7 01 	sts	0x01F7, r1
     db4:	10 92 f8 01 	sts	0x01F8, r1
     db8:	10 92 f9 01 	sts	0x01F9, r1
     dbc:	10 92 fa 01 	sts	0x01FA, r1
// and which may save a little energy if users target the specified temperatures.
// Suggestion c/o GG ~2014/10 code, and generally less misleading anyway!
void ModelledRadValveInputState::setReferenceTemperatures(const int currentTempC16)
  {
  const int referenceTempC16 = currentTempC16 + refTempOffsetC16; // TODO-386: push targeted temperature down by 0.5C to middle of degree.
  refTempC16 = referenceTempC16;
     dc0:	88 e0       	ldi	r24, 0x08	; 8
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	90 93 fc 01 	sts	0x01FC, r25
     dc8:	80 93 fb 01 	sts	0x01FB, r24
  ModelledRadValveState() :
    initialised(false),
    isFiltering(false),
    valveMoved(false),
    cumulativeMovementPC(0),
    valveTurndownCountdownM(0), valveTurnupCountdownM(0)
     dcc:	10 92 fd 01 	sts	0x01FD, r1
     dd0:	10 92 fe 01 	sts	0x01FE, r1
     dd4:	10 92 ff 01 	sts	0x01FF, r1
     dd8:	10 92 00 02 	sts	0x0200, r1
     ddc:	80 91 01 02 	lds	r24, 0x0201
     de0:	80 7f       	andi	r24, 0xF0	; 240
     de2:	80 93 01 02 	sts	0x0201, r24
     de6:	10 92 02 02 	sts	0x0202, r1
     dea:	10 92 03 02 	sts	0x0203, r1
  public:
    ModelledRadValve()
      : inputState(0),
        callingForHeat(false),
#if defined(TRV_SLEW_GLACIAL)
        glacial(true)
     dee:	10 92 14 02 	sts	0x0214, r1
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	80 93 15 02 	sts	0x0215, r24
  else if(getSubCycleTime() >= nearOverrunThreshold)
    {
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("?O"); // Near overrun.  Note 2ms/char to send...
    }
#endif
  }
     df8:	08 95       	ret

00000dfa <smoothStatsValue(unsigned char, unsigned char)>:

// Compute new linearly-smoothed value given old smoothed value and new value.
// Guaranteed not to produce a value higher than the max of the old smoothed value and the new value.
// Uses stochastic rounding to nearest to allow nominally sub-lsb values to have an effect over time.
// Usually only made public for unit testing.
uint8_t smoothStatsValue(const uint8_t oldSmoothed, const uint8_t newValue)
     dfa:	0f 93       	push	r16
     dfc:	1f 93       	push	r17
     dfe:	18 2f       	mov	r17, r24
     e00:	06 2f       	mov	r16, r22
  {
  if(oldSmoothed == newValue) { return(oldSmoothed); } // Optimisation: smoothed value is unchanged if new value is the same as extant.
     e02:	86 17       	cp	r24, r22
     e04:	b9 f0       	breq	.+46     	; 0xe34 <smoothStatsValue(unsigned char, unsigned char)+0x3a>
  // Compute and update with new stochastically-rounded exponentially-smoothed ("Brown's simple exponential smoothing") value.
  // Stochastic rounding allows sub-lsb values to have an effect over time.
  const uint8_t stocAdd = randRNG8() & ((1 << STATS_SMOOTH_SHIFT) - 1); // Allows sub-lsb values to have an effect over time.
     e06:	0e 94 3d 1b 	call	0x367a	; 0x367a <randRNG8()>
  DEBUG_SERIAL_PRINT_FLASHSTRING("stocAdd=");
  DEBUG_SERIAL_PRINT(stocAdd);
  DEBUG_SERIAL_PRINTLN();
#endif
  // Do arithmetic in 16 bits to avoid over-/under- flows.
  return((uint8_t) (((((uint16_t) oldSmoothed) << STATS_SMOOTH_SHIFT) - ((uint16_t)oldSmoothed) + ((uint16_t)newValue) + stocAdd) >> STATS_SMOOTH_SHIFT));
     e0a:	21 2f       	mov	r18, r17
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	a9 01       	movw	r20, r18
     e10:	b3 e0       	ldi	r27, 0x03	; 3
     e12:	44 0f       	add	r20, r20
     e14:	55 1f       	adc	r21, r21
     e16:	ba 95       	dec	r27
     e18:	e1 f7       	brne	.-8      	; 0xe12 <smoothStatsValue(unsigned char, unsigned char)+0x18>
     e1a:	42 1b       	sub	r20, r18
     e1c:	53 0b       	sbc	r21, r19
     e1e:	87 70       	andi	r24, 0x07	; 7
     e20:	48 0f       	add	r20, r24
     e22:	51 1d       	adc	r21, r1
     e24:	40 0f       	add	r20, r16
     e26:	51 1d       	adc	r21, r1
     e28:	a3 e0       	ldi	r26, 0x03	; 3
     e2a:	56 95       	lsr	r21
     e2c:	47 95       	ror	r20
     e2e:	aa 95       	dec	r26
     e30:	e1 f7       	brne	.-8      	; 0xe2a <smoothStatsValue(unsigned char, unsigned char)+0x30>
     e32:	14 2f       	mov	r17, r20
  }
     e34:	81 2f       	mov	r24, r17
     e36:	1f 91       	pop	r17
     e38:	0f 91       	pop	r16
     e3a:	08 95       	ret

00000e3c <simpleUpdateStatsPair(unsigned char, unsigned char, unsigned char)>:
  }
// Get some constant calculation done at compile time,
//   * lastSetN  is the set number for the 'last' values, with 'smoothed' assumed to be the next set.
//   * hh  hour for these stats [0,23].
//   * value  new stats value in range [0,254].
static inline void simpleUpdateStatsPair(const uint8_t lastSetN, const uint8_t hh, const uint8_t value)
     e3c:	ff 92       	push	r15
     e3e:	0f 93       	push	r16
     e40:	1f 93       	push	r17
     e42:	f4 2e       	mov	r15, r20
    DEBUG_SERIAL_PRINT(hh);
    DEBUG_SERIAL_PRINT_FLASHSTRING("h = ");
    DEBUG_SERIAL_PRINT(value);
    DEBUG_SERIAL_PRINTLN();
#endif
  simpleUpdateStatsPair_((uint8_t *)(EE_STATS_START_ADDR(lastSetN) + (hh)), (value));
     e44:	98 e1       	ldi	r25, 0x18	; 24
     e46:	89 9f       	mul	r24, r25
     e48:	80 01       	movw	r16, r0
     e4a:	11 24       	eor	r1, r1
     e4c:	06 0f       	add	r16, r22
     e4e:	11 1d       	adc	r17, r1
     e50:	00 50       	subi	r16, 0x00	; 0
     e52:	1f 4f       	sbci	r17, 0xFF	; 255
#if 0 && defined(DEBUG) // Extra arg validation during dev.
  if((((int)lastEEPtr) < EE_START_STATS) || (((int)lastEEPtr)+24 > EE_END_STATS)) { panic(); }
  if(0xff == value) { panic(); }
#endif
  // Update the last-sample slot using the mean samples value.
  eeprom_smart_update_byte(lastEEPtr, value);
     e54:	c8 01       	movw	r24, r16
     e56:	64 2f       	mov	r22, r20
     e58:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <eeprom_smart_update_byte(unsigned char*, unsigned char)>
  // If existing smoothed value unset or invalid, use new one as is, else fold in.
  uint8_t * const pS = lastEEPtr + 24;
     e5c:	08 5e       	subi	r16, 0xE8	; 232
     e5e:	1f 4f       	sbci	r17, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     e60:	f9 99       	sbic	0x1f, 1	; 31
     e62:	fe cf       	rjmp	.-4      	; 0xe60 <simpleUpdateStatsPair(unsigned char, unsigned char, unsigned char)+0x24>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     e64:	12 bd       	out	0x22, r17	; 34
     e66:	01 bd       	out	0x21, r16	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     e68:	f8 9a       	sbi	0x1f, 0	; 31
     e6a:	80 b5       	in	r24, 0x20	; 32
  const uint8_t smoothed = eeprom_read_byte(pS);
  if(0xff == smoothed) { eeprom_smart_update_byte(pS, value); }
     e6c:	8f 3f       	cpi	r24, 0xFF	; 255
     e6e:	19 f4       	brne	.+6      	; 0xe76 <simpleUpdateStatsPair(unsigned char, unsigned char, unsigned char)+0x3a>
     e70:	c8 01       	movw	r24, r16
     e72:	6f 2d       	mov	r22, r15
     e74:	05 c0       	rjmp	.+10     	; 0xe80 <simpleUpdateStatsPair(unsigned char, unsigned char, unsigned char)+0x44>
  else { eeprom_smart_update_byte(pS, smoothStatsValue(smoothed, value)); }
     e76:	6f 2d       	mov	r22, r15
     e78:	0e 94 fd 06 	call	0xdfa	; 0xdfa <smoothStatsValue(unsigned char, unsigned char)>
     e7c:	68 2f       	mov	r22, r24
     e7e:	c8 01       	movw	r24, r16
     e80:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <eeprom_smart_update_byte(unsigned char*, unsigned char)>
    DEBUG_SERIAL_PRINT_FLASHSTRING("h = ");
    DEBUG_SERIAL_PRINT(value);
    DEBUG_SERIAL_PRINTLN();
#endif
  simpleUpdateStatsPair_((uint8_t *)(EE_STATS_START_ADDR(lastSetN) + (hh)), (value));
  }
     e84:	1f 91       	pop	r17
     e86:	0f 91       	pop	r16
     e88:	ff 90       	pop	r15
     e8a:	08 95       	ret

00000e8c <setWARMTargetC(unsigned char)>:
  }
#endif
#if defined(SETTABLE_TARGET_TEMPERATURES) && !defined(TEMP_POT_AVAILABLE)
// Set 'WARM' target in C; no lower than getFROSTTargetC() returns, strictly positive, in range [MIN_TARGET_C,MAX_TARGET_C].
// Returns false if not set, eg because below FROST setting or outside range [MIN_TARGET_C,MAX_TARGET_C], else returns true.
bool setWARMTargetC(uint8_t tempC)
     e8c:	68 2f       	mov	r22, r24
  {
  if((tempC < MIN_TARGET_C) || (tempC > MAX_TARGET_C)) { return(false); } // Invalid temperature.
     e8e:	85 50       	subi	r24, 0x05	; 5
     e90:	8b 35       	cpi	r24, 0x5B	; 91
     e92:	a8 f4       	brcc	.+42     	; 0xebe <setWARMTargetC(unsigned char)+0x32>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     e94:	f9 99       	sbic	0x1f, 1	; 31
     e96:	fe cf       	rjmp	.-4      	; 0xe94 <setWARMTargetC(unsigned char)+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     e98:	8e e0       	ldi	r24, 0x0E	; 14
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	92 bd       	out	0x22, r25	; 34
     e9e:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     ea0:	f8 9a       	sbi	0x1f, 0	; 31
     ea2:	90 b5       	in	r25, 0x20	; 32
uint8_t getFROSTTargetC()
  {
  // Get persisted value, if any.
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_FROST_C);
  // If out of bounds or no stored value then use default.
  if((stored < MIN_TARGET_C) || (stored > MAX_TARGET_C)) { return(FROST); }
     ea4:	89 2f       	mov	r24, r25
     ea6:	85 50       	subi	r24, 0x05	; 5
     ea8:	8b 35       	cpi	r24, 0x5B	; 91
     eaa:	08 f0       	brcs	.+2      	; 0xeae <setWARMTargetC(unsigned char)+0x22>
     eac:	97 e0       	ldi	r25, 0x07	; 7
// Set 'WARM' target in C; no lower than getFROSTTargetC() returns, strictly positive, in range [MIN_TARGET_C,MAX_TARGET_C].
// Returns false if not set, eg because below FROST setting or outside range [MIN_TARGET_C,MAX_TARGET_C], else returns true.
bool setWARMTargetC(uint8_t tempC)
  {
  if((tempC < MIN_TARGET_C) || (tempC > MAX_TARGET_C)) { return(false); } // Invalid temperature.
  if(tempC < getFROSTTargetC()) { return(false); } // Cannot set below FROST target.
     eae:	69 17       	cp	r22, r25
     eb0:	30 f0       	brcs	.+12     	; 0xebe <setWARMTargetC(unsigned char)+0x32>
  eeprom_smart_update_byte((uint8_t *)EE_START_WARM_C, tempC); // Update in EEPROM if necessary.
     eb2:	8f e0       	ldi	r24, 0x0F	; 15
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <eeprom_smart_update_byte(unsigned char*, unsigned char)>
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	08 95       	ret
  return(true); // Assume value correctly written.
     ebe:	80 e0       	ldi	r24, 0x00	; 0
  }
     ec0:	08 95       	ret

00000ec2 <setFROSTTargetC(unsigned char)>:

#if defined(SETTABLE_TARGET_TEMPERATURES)
// Set (non-volatile) 'FROST' protection target in C; no higher than getWARMTargetC() returns, strictly positive, in range [MIN_TARGET_C,MAX_TARGET_C].
// Can also be used, even when a temperature pot is present, to set a floor setback temperature.
// Returns false if not set, eg because outside range [MIN_TARGET_C,MAX_TARGET_C], else returns true.
bool setFROSTTargetC(uint8_t tempC)
     ec2:	1f 93       	push	r17
     ec4:	18 2f       	mov	r17, r24
  {
  if((tempC < MIN_TARGET_C) || (tempC > MAX_TARGET_C)) { return(false); } // Invalid temperature.
     ec6:	85 50       	subi	r24, 0x05	; 5
     ec8:	8b 35       	cpi	r24, 0x5B	; 91
     eca:	58 f4       	brcc	.+22     	; 0xee2 <setFROSTTargetC(unsigned char)+0x20>
  if(tempC > getWARMTargetC()) { return(false); } // Cannot set above WARM target.
     ecc:	0e 94 ab 03 	call	0x756	; 0x756 <getWARMTargetC()>
     ed0:	81 17       	cp	r24, r17
     ed2:	38 f0       	brcs	.+14     	; 0xee2 <setFROSTTargetC(unsigned char)+0x20>
  eeprom_smart_update_byte((uint8_t *)EE_START_FROST_C, tempC); // Update in EEPROM if necessary.
     ed4:	8e e0       	ldi	r24, 0x0E	; 14
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	61 2f       	mov	r22, r17
     eda:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <eeprom_smart_update_byte(unsigned char*, unsigned char)>
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	01 c0       	rjmp	.+2      	; 0xee4 <setFROSTTargetC(unsigned char)+0x22>
  return(true); // Assume value correctly written.
     ee2:	80 e0       	ldi	r24, 0x00	; 0
  }
     ee4:	1f 91       	pop	r17
     ee6:	08 95       	ret

00000ee8 <ModelledRadValve::recalibrate()>:
// If possible exercise the valve to avoid pin sticking and recalibrate valve travel.
// Default does nothing.
void ModelledRadValve::recalibrate()
  {
#ifdef USE_MODULE_FHT8VSIMPLE
  FHT8VSyncAndTXReset(); // Should this be decalcinate instead/also/first?
     ee8:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <FHT8VSyncAndTXReset()>
#endif
  }
     eec:	08 95       	ret

00000eee <rawStatsTX(bool, unsigned char*, bool, bool)>:
//       the unit will resume RX after sending the stats
//   * doubleTX  double TX to increase chance of successful reception
// This will use whichever transmission medium/carrier/etc is available.
#define STATS_MSG_START_OFFSET (RFM22_PREAMBLE_BYTES + RFM22_SYNC_MIN_BYTES)
#define STATS_MSG_MAX_LEN (64 - STATS_MSG_START_OFFSET)
static void rawStatsTX(const bool isBinary, uint8_t * const buf, const bool resumeRX, const bool doubleTX)
     eee:	ff 92       	push	r15
     ef0:	0f 93       	push	r16
     ef2:	1f 93       	push	r17
     ef4:	8b 01       	movw	r16, r22
     ef6:	f2 2e       	mov	r15, r18
  {
  // Write in the preamble/sync bytes.
  uint8_t *bptr = buf;
  // Start with RFM23-friendly preamble which ends with with the aacccccc sync word.
  memset(bptr, RFM22_PREAMBLE_BYTE, RFM22_PREAMBLE_BYTES);
     ef8:	cb 01       	movw	r24, r22
     efa:	6a ea       	ldi	r22, 0xAA	; 170
     efc:	70 e0       	ldi	r23, 0x00	; 0
     efe:	45 e0       	ldi	r20, 0x05	; 5
     f00:	50 e0       	ldi	r21, 0x00	; 0
     f02:	0e 94 ca 02 	call	0x594	; 0x594 <memset>
  bptr += RFM22_PREAMBLE_BYTES;
  memset(bptr, RFM22_SYNC_BYTE, RFM22_SYNC_MIN_BYTES);
     f06:	c8 01       	movw	r24, r16
     f08:	05 96       	adiw	r24, 0x05	; 5
     f0a:	6c ec       	ldi	r22, 0xCC	; 204
     f0c:	70 e0       	ldi	r23, 0x00	; 0
     f0e:	43 e0       	ldi	r20, 0x03	; 3
     f10:	50 e0       	ldi	r21, 0x00	; 0
     f12:	0e 94 ca 02 	call	0x594	; 0x594 <memset>
  bptr += RFM22_SYNC_MIN_BYTES;

  // TODO: put in listen before TX to reduce collisions (CSMA).
  // Send message starting will preamble.
  // Assume RFM22/23 support for now.
  RFM22QueueCmdToFF(buf);
     f16:	c8 01       	movw	r24, r16
     f18:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <RFM22QueueCmdToFF(unsigned char*)>
  RFM22TXFIFO(); // Send it!  Approx 1.6ms/byte.     
     f1c:	0e 94 15 1c 	call	0x382a	; 0x382a <RFM22TXFIFO()>
  if(doubleTX)
     f20:	ff 20       	and	r15, r15
     f22:	29 f0       	breq	.+10     	; 0xf2e <rawStatsTX(bool, unsigned char*, bool, bool)+0x40>
    {
    nap(WDTO_15MS);
     f24:	80 e0       	ldi	r24, 0x00	; 0
     f26:	0e 94 39 17 	call	0x2e72	; 0x2e72 <nap(signed char)>
    RFM22TXFIFO(); // Re-send it!
     f2a:	0e 94 15 1c 	call	0x382a	; 0x382a <RFM22TXFIFO()>
#if defined(ENABLE_BOILER_HUB)
  if(resumeRX)
    { SetupToEavesdropOnFHT8V(); } // Revert to hub listening...
  else
#endif
    { RFM22ModeStandbyAndClearState(); } // Go to standby to conserve energy.
     f2e:	0e 94 cd 1b 	call	0x379a	; 0x379a <RFM22ModeStandbyAndClearState()>
  }
     f32:	1f 91       	pop	r17
     f34:	0f 91       	pop	r16
     f36:	ff 90       	pop	r15
     f38:	08 95       	ret

00000f3a <__vector_5>:

#if !defined(ALT_MAIN_LOOP) // Do not define handlers here when alt main is in use.
// Previous state of port D pins to help detect changes.
static volatile uint8_t prevStatePD;
// Interrupt service routine for PD I/O port transition changes (including RX).
ISR(PCINT2_vect)
     f3a:	1f 92       	push	r1
     f3c:	0f 92       	push	r0
     f3e:	0f b6       	in	r0, 0x3f	; 63
     f40:	0f 92       	push	r0
     f42:	11 24       	eor	r1, r1
     f44:	2f 93       	push	r18
     f46:	3f 93       	push	r19
     f48:	4f 93       	push	r20
     f4a:	5f 93       	push	r21
     f4c:	6f 93       	push	r22
     f4e:	7f 93       	push	r23
     f50:	8f 93       	push	r24
     f52:	9f 93       	push	r25
     f54:	af 93       	push	r26
     f56:	bf 93       	push	r27
     f58:	ef 93       	push	r30
     f5a:	ff 93       	push	r31
  {
  const uint8_t pins = PIND;
     f5c:	89 b1       	in	r24, 0x09	; 9
  const uint8_t changes = pins ^ prevStatePD;
     f5e:	90 91 63 02 	lds	r25, 0x0263
  prevStatePD = pins;
     f62:	80 93 63 02 	sts	0x0263, r24
  // If an interrupt arrived from no other masked source then wake the CLI.
  // The will ensure that the CLI is active, eg from RX activity,
  // eg it is possible to wake the CLI subsystem with an extra CR or LF.
  // It is OK to trigger this from other things such as button presses.
  // FIXME: ensure that resetCLIActiveTimer() is inlineable to minimise ISR prologue/epilogue time and space.
  if(!(changes & MASK_PD & ~1)) { resetCLIActiveTimer(); }
     f66:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <resetCLIActiveTimer()>
  }
     f6a:	ff 91       	pop	r31
     f6c:	ef 91       	pop	r30
     f6e:	bf 91       	pop	r27
     f70:	af 91       	pop	r26
     f72:	9f 91       	pop	r25
     f74:	8f 91       	pop	r24
     f76:	7f 91       	pop	r23
     f78:	6f 91       	pop	r22
     f7a:	5f 91       	pop	r21
     f7c:	4f 91       	pop	r20
     f7e:	3f 91       	pop	r19
     f80:	2f 91       	pop	r18
     f82:	0f 90       	pop	r0
     f84:	0f be       	out	0x3f, r0	; 63
     f86:	0f 90       	pop	r0
     f88:	1f 90       	pop	r1
     f8a:	18 95       	reti

00000f8c <populateCoreStats(FullStatsMessageCore*)>:


// Clear and populate core stats structure with information from this node.
// Exactly what gets filled in will depend on sensors on the node,
// and may depend on stats TX security level (eg if collecting some sensitive items is also expensive).
void populateCoreStats(FullStatsMessageCore_t *const content)
     f8c:	cf 93       	push	r28
     f8e:	df 93       	push	r29
     f90:	ec 01       	movw	r28, r24
#define FullStatsMessageCore_MAX_BYTES_ON_WIRE 8
// Minimum size on wire including trailing CRC of core of FullStatsMessage.  TX message buffer should be one larger for trailing 0xff.
#define FullStatsMessageCore_MIN_BYTES_ON_WIRE 3

// Clear a FullStatsMessageCore_t, also indicating no optional fields present.
static inline void clearFullStatsMessageCore(FullStatsMessageCore_t *const p) { memset(p, 0, sizeof(FullStatsMessageCore_t)); }
     f92:	87 e0       	ldi	r24, 0x07	; 7
     f94:	fe 01       	movw	r30, r28
     f96:	11 92       	st	Z+, r1
     f98:	8a 95       	dec	r24
     f9a:	e9 f7       	brne	.-6      	; 0xf96 <populateCoreStats(FullStatsMessageCore*)+0xa>
  {
  clearFullStatsMessageCore(content); // Defensive programming: all fields should be set explicitly below.
  if(localFHT8VTRVEnabled())
     f9c:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <localFHT8VTRVEnabled()>
     fa0:	88 23       	and	r24, r24
     fa2:	31 f0       	breq	.+12     	; 0xfb0 <populateCoreStats(FullStatsMessageCore*)+0x24>
    {
    // Use FHT8V house codes if available.
    content->id0 = FHT8VGetHC1();
     fa4:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <FHT8VGetHC1()>
     fa8:	89 83       	std	Y+1, r24	; 0x01
    content->id1 = FHT8VGetHC2();
     faa:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <FHT8VGetHC2()>
     fae:	11 c0       	rjmp	.+34     	; 0xfd2 <populateCoreStats(FullStatsMessageCore*)+0x46>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     fb0:	f9 99       	sbic	0x1f, 1	; 31
     fb2:	fe cf       	rjmp	.-4      	; 0xfb0 <populateCoreStats(FullStatsMessageCore*)+0x24>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     fb4:	84 e1       	ldi	r24, 0x14	; 20
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	92 bd       	out	0x22, r25	; 34
     fba:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     fbc:	f8 9a       	sbi	0x1f, 0	; 31
     fbe:	80 b5       	in	r24, 0x20	; 32
    }
  else
    {
    // Use OpenTRV unique ID if no other higher-priority ID.
    content->id0 = eeprom_read_byte(0 + (uint8_t *)EE_START_ID);
     fc0:	89 83       	std	Y+1, r24	; 0x01
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     fc2:	f9 99       	sbic	0x1f, 1	; 31
     fc4:	fe cf       	rjmp	.-4      	; 0xfc2 <populateCoreStats(FullStatsMessageCore*)+0x36>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     fc6:	85 e1       	ldi	r24, 0x15	; 21
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	92 bd       	out	0x22, r25	; 34
     fcc:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     fce:	f8 9a       	sbi	0x1f, 0	; 31
     fd0:	80 b5       	in	r24, 0x20	; 32
    content->id1 = eeprom_read_byte(1 + (uint8_t *)EE_START_ID);
     fd2:	8a 83       	std	Y+2, r24	; 0x02
    }
  content->containsID = true;
     fd4:	28 81       	ld	r18, Y
     fd6:	82 2f       	mov	r24, r18
     fd8:	81 60       	ori	r24, 0x01	; 1
     fda:	88 83       	st	Y, r24
  content->tempAndPower.tempC16 = TemperatureC16.get();
     fdc:	80 91 62 03 	lds	r24, 0x0362
     fe0:	8b 83       	std	Y+3, r24	; 0x03
     fe2:	90 91 63 03 	lds	r25, 0x0363
     fe6:	9f 77       	andi	r25, 0x7F	; 127
     fe8:	8c 81       	ldd	r24, Y+4	; 0x04
     fea:	80 78       	andi	r24, 0x80	; 128
     fec:	89 2b       	or	r24, r25
     fee:	8c 83       	std	Y+4, r24	; 0x04
  content->tempAndPower.powerLow = Supply_mV.isSupplyVoltageLow();
     ff0:	90 91 f5 02 	lds	r25, 0x02F5
     ff4:	97 95       	ror	r25
     ff6:	99 27       	eor	r25, r25
     ff8:	97 95       	ror	r25
     ffa:	8f 77       	andi	r24, 0x7F	; 127
     ffc:	89 2b       	or	r24, r25
     ffe:	8c 83       	std	Y+4, r24	; 0x04
  content->containsTempAndPower = true;
    1000:	23 60       	ori	r18, 0x03	; 3
    1002:	28 83       	st	Y, r18
  public:
    // Return last value fetched by read(); undefined before first read().
    // Usually fast.
    // Often likely to be thread-safe or usable within ISRs (Interrupt Service Routines),
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual uint8_t get() const { return(value); }
    1004:	80 91 5b 03 	lds	r24, 0x035B
  content->ambL = fnmax((uint8_t)1, fnmin((uint8_t)254, (uint8_t)(AmbLight.get() >> 2))); // Coerce to allowed value in range [1,254]. Bug-fix c/o Gary Gladman!
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	95 95       	asr	r25
    100c:	87 95       	ror	r24
    100e:	95 95       	asr	r25
    1010:	87 95       	ror	r24
    1012:	8d 83       	std	Y+5, r24	; 0x05
    1014:	98 2f       	mov	r25, r24
    1016:	88 23       	and	r24, r24
    1018:	09 f4       	brne	.+2      	; 0x101c <populateCoreStats(FullStatsMessageCore*)+0x90>
    101a:	91 e0       	ldi	r25, 0x01	; 1
    101c:	9d 83       	std	Y+5, r25	; 0x05
  content->containsAmbL = true;
    101e:	88 81       	ld	r24, Y
    1020:	84 60       	ori	r24, 0x04	; 4
    1022:	88 83       	st	Y, r24
    // Returns true if the room appears to be likely occupied (with active users) recently.
    // This uses the same timer as isOccupied() (restarted by markAsOccupied())
    // but returns to false somewhat sooner for example to allow ramping up more costly occupancy detection methods
    // and to allow some simple graduated occupancy responses.
    // Thread-safe.
    bool isLikelyRecentlyOccupied() { return(occupationCountdownM > OCCUPATION_TIMEOUT_1_M); }
    1024:	80 91 ed 01 	lds	r24, 0x01ED
    void markAsPossiblyOccupied();

    // Two-bit occupancy: (00 not disclosed,) 1 not occupied, 2 possibly occupied, 3 probably occupied.
    // 0 is not returned by this implementation.
    // Thread-safe.
    uint8_t twoBitOccupancyValue() { return(isLikelyRecentlyOccupied() ? 3 : (isLikelyOccupied() ? 2 : 1)); }
    1028:	82 32       	cpi	r24, 0x22	; 34
    102a:	10 f0       	brcs	.+4      	; 0x1030 <populateCoreStats(FullStatsMessageCore*)+0xa4>
    102c:	93 e0       	ldi	r25, 0x03	; 3
    102e:	07 c0       	rjmp	.+14     	; 0x103e <populateCoreStats(FullStatsMessageCore*)+0xb2>

    // Returns true if the room appears to be likely occupied (with active users) now.
    // Operates on a timeout; calling markAsOccupied() restarts the timer.
    // Defaults to false (and API still exists) when OCCUPANCY_SUPPORT not defined.
    // Thread-safe.
    bool isLikelyOccupied() { return(0 != occupationCountdownM); }
    1030:	80 91 ed 01 	lds	r24, 0x01ED
    void markAsPossiblyOccupied();

    // Two-bit occupancy: (00 not disclosed,) 1 not occupied, 2 possibly occupied, 3 probably occupied.
    // 0 is not returned by this implementation.
    // Thread-safe.
    uint8_t twoBitOccupancyValue() { return(isLikelyRecentlyOccupied() ? 3 : (isLikelyOccupied() ? 2 : 1)); }
    1034:	88 23       	and	r24, r24
    1036:	11 f4       	brne	.+4      	; 0x103c <populateCoreStats(FullStatsMessageCore*)+0xb0>
    1038:	91 e0       	ldi	r25, 0x01	; 1
    103a:	01 c0       	rjmp	.+2      	; 0x103e <populateCoreStats(FullStatsMessageCore*)+0xb2>
    103c:	92 e0       	ldi	r25, 0x02	; 2
  // OC1/OC2 = Occupancy: 00 not disclosed, 01 not occupied, 10 possibly occupied, 11 probably occupied.
  // The encodeFullStatsMessageCore() route should omit data not appopriate for security reasons.
  content->occ = Occupancy.twoBitOccupancyValue();
    103e:	8e 81       	ldd	r24, Y+6	; 0x06
    1040:	8c 7f       	andi	r24, 0xFC	; 252
    1042:	89 2b       	or	r24, r25
    1044:	8e 83       	std	Y+6, r24	; 0x06
  }
    1046:	df 91       	pop	r29
    1048:	cf 91       	pop	r28
    104a:	08 95       	ret

0000104c <bareStatsTX(bool, bool, bool)>:
// This may be binary or JSON format.
//   * resumeRX  if true and unit capable of running in hub/RX mode,
//       the unit will resume RX after sending the stats
//   * allowDoubleTX  allow double TX to increase chance of successful reception
//   * doBinary  send binary form, else JSON form if supported
static void bareStatsTX(const bool resumeRX, const bool allowDoubleTX, const bool doBinary)   {
    104c:	8f 92       	push	r8
    104e:	9f 92       	push	r9
    1050:	af 92       	push	r10
    1052:	bf 92       	push	r11
    1054:	cf 92       	push	r12
    1056:	df 92       	push	r13
    1058:	ef 92       	push	r14
    105a:	ff 92       	push	r15
    105c:	0f 93       	push	r16
    105e:	1f 93       	push	r17
    1060:	df 93       	push	r29
    1062:	cf 93       	push	r28
    1064:	cd b7       	in	r28, 0x3d	; 61
    1066:	de b7       	in	r29, 0x3e	; 62
    1068:	c8 54       	subi	r28, 0x48	; 72
    106a:	d0 40       	sbci	r29, 0x00	; 0
    106c:	0f b6       	in	r0, 0x3f	; 63
    106e:	f8 94       	cli
    1070:	de bf       	out	0x3e, r29	; 62
    1072:	0f be       	out	0x3f, r0	; 63
    1074:	cd bf       	out	0x3d, r28	; 61
    1076:	98 2e       	mov	r9, r24
    1078:	86 2e       	mov	r8, r22
  //   * max binary length, or max JSON length + 1 for CRC + 1 to allow detection of oversize message
  //   * terminating 0xff
  uint8_t buf[STATS_MSG_START_OFFSET + max(FullStatsMessageCore_MAX_BYTES_ON_WIRE,  MSG_JSON_MAX_LENGTH+1) + 1];

#if defined(ALLOW_JSON_OUTPUT)
  if(doBinary)
    107a:	44 23       	and	r20, r20
    107c:	01 f1       	breq	.+64     	; 0x10be <bareStatsTX(bool, bool, bool)+0x72>
#endif
    {
    // Send binary message first.
    // Gather core stats.
    FullStatsMessageCore_t content;
    populateCoreStats(&content);
    107e:	6e 01       	movw	r12, r28
    1080:	08 94       	sec
    1082:	c1 1c       	adc	r12, r1
    1084:	d1 1c       	adc	r13, r1
    1086:	c6 01       	movw	r24, r12
    1088:	0e 94 c6 07 	call	0xf8c	; 0xf8c <populateCoreStats(FullStatsMessageCore*)>
    const uint8_t *msg1 = encodeFullStatsMessageCore(buf + STATS_MSG_START_OFFSET, sizeof(buf) - STATS_MSG_START_OFFSET, getStatsTXLevel(), false, &content);
    108c:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <getStatsTXLevel()>
    1090:	ac 01       	movw	r20, r24
    1092:	68 e0       	ldi	r22, 0x08	; 8
    1094:	e6 2e       	mov	r14, r22
    1096:	f1 2c       	mov	r15, r1
    1098:	ec 0e       	add	r14, r28
    109a:	fd 1e       	adc	r15, r29
    109c:	c7 01       	movw	r24, r14
    109e:	08 96       	adiw	r24, 0x08	; 8
    10a0:	69 e3       	ldi	r22, 0x39	; 57
    10a2:	20 e0       	ldi	r18, 0x00	; 0
    10a4:	86 01       	movw	r16, r12
    10a6:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)>
    if(NULL == msg1)
    10aa:	89 2b       	or	r24, r25
    10ac:	09 f4       	brne	.+2      	; 0x10b0 <bareStatsTX(bool, bool, bool)+0x64>
    10ae:	23 c1       	rjmp	.+582    	; 0x12f6 <bareStatsTX(bool, bool, bool)+0x2aa>
DEBUG_SERIAL_PRINTLN_FLASHSTRING("Bin gen err!");
#endif
      return;
      }
    // Record stats as if remote, and treat channel as secure.
    recordCoreStats(true, &content);
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	b6 01       	movw	r22, r12
    10b4:	0e 94 77 15 	call	0x2aee	; 0x2aee <recordCoreStats(bool, FullStatsMessageCore const*)>
    // Send it!
    rawStatsTX(true, buf, resumeRX, allowDoubleTX);
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	b7 01       	movw	r22, r14
    10bc:	fb c0       	rjmp	.+502    	; 0x12b4 <bareStatsTX(bool, bool, bool)+0x268>
    // Now append JSON text and closing 0xff...
    // Use letters that correspond to the values in ParsedRemoteStatsRecord and when displaying/parsing @ status records.
    int8_t wrote;

    // Managed JSON stats.
    static SimpleStatsRotation<8> ss1; // Configured for maximum different stats.
    10be:	80 91 19 02 	lds	r24, 0x0219
    10c2:	88 23       	and	r24, r24
    10c4:	a9 f5       	brne	.+106    	; 0x1130 <bareStatsTX(bool, bool, bool)+0xe4>
    10c6:	89 e1       	ldi	r24, 0x19	; 25
    10c8:	92 e0       	ldi	r25, 0x02	; 2
    10ca:	0e 94 e4 32 	call	0x65c8	; 0x65c8 <__cxa_guard_acquire>
    10ce:	89 2b       	or	r24, r25
    10d0:	79 f1       	breq	.+94     	; 0x1130 <bareStatsTX(bool, bool, bool)+0xe4>

    // Initialise base with appropriate storage (non-null) and capacity knowledge.
    SimpleStatsRotationBase(DescValueTuple *_stats, const uint8_t _capacity)
      : capacity(_capacity), stats(_stats), nStats(0),
        lastTXed(~0), lastTXedLoPri(~0), lastTXedHiPri(~0), // Show the first item on the first pass...
        id(NULL)
    10d2:	88 e0       	ldi	r24, 0x08	; 8
    10d4:	80 93 21 02 	sts	0x0221, r24
    10d8:	2b e2       	ldi	r18, 0x2B	; 43
    10da:	32 e0       	ldi	r19, 0x02	; 2
    10dc:	30 93 23 02 	sts	0x0223, r19
    10e0:	20 93 22 02 	sts	0x0222, r18
    10e4:	10 92 24 02 	sts	0x0224, r1
    10e8:	8f ef       	ldi	r24, 0xFF	; 255
    10ea:	80 93 25 02 	sts	0x0225, r24
    10ee:	80 93 26 02 	sts	0x0226, r24
    10f2:	80 93 27 02 	sts	0x0227, r24
    10f6:	10 92 29 02 	sts	0x0229, r1
    10fa:	10 92 28 02 	sts	0x0228, r1
    // is displayed immediately after the @/ID field when enabled,
    // and missing count values suggest a lost transmission somewhere.
    // Takes minimal space (1 byte).
    struct WriteCount
      {
      WriteCount() : enabled(0), count(0) { }
    10fe:	80 91 2a 02 	lds	r24, 0x022A
    1102:	80 7f       	andi	r24, 0xF0	; 240
    1104:	80 93 2a 02 	sts	0x022A, r24
    1108:	f9 01       	movw	r30, r18
    // The default sensitivity is set to forbid transmission at all but minimum (0) leaf TX security settings.
    // By default the stat is normal priority.
    GenericStatsDescriptor(const char * const statKey,
                           const uint8_t statSensitivity = 1,
                           const bool statHighPriority = false)
      : key(statKey), sensitivity(statSensitivity), highPriority(statHighPriority)
    110a:	91 e0       	ldi	r25, 0x01	; 1
    110c:	11 82       	std	Z+1, r1	; 0x01
    110e:	10 82       	st	Z, r1
    1110:	92 83       	std	Z+2, r25	; 0x02
    1112:	13 82       	std	Z+3, r1	; 0x03
#endif

  protected:
    struct DescValueTuple
      {
      DescValueTuple() : descriptor(NULL), value(0) { }
    1114:	15 82       	std	Z+5, r1	; 0x05
    1116:	14 82       	std	Z+4, r1	; 0x04
      int value;

      // Various run-time flags.
      struct Flags
        {
        Flags() : changed(false) { }
    1118:	86 81       	ldd	r24, Z+6	; 0x06
    111a:	8e 7f       	andi	r24, 0xFE	; 254
    111c:	86 83       	std	Z+6, r24	; 0x06
    111e:	37 96       	adiw	r30, 0x07	; 7
    // Stats to be tracked and sent; mandatory/priority items must be first.
    // A copy is taken of the user-supplied set of descriptions, preserving order.
    DescValueTuple stats[MaxStats];

  public:
    SimpleStatsRotation() : SimpleStatsRotationBase(stats, MaxStats) { }
    1120:	22 e0       	ldi	r18, 0x02	; 2
    1122:	e3 36       	cpi	r30, 0x63	; 99
    1124:	f2 07       	cpc	r31, r18
    1126:	91 f7       	brne	.-28     	; 0x110c <bareStatsTX(bool, bool, bool)+0xc0>
    1128:	89 e1       	ldi	r24, 0x19	; 25
    112a:	92 e0       	ldi	r25, 0x02	; 2
    112c:	0e 94 ee 32 	call	0x65dc	; 0x65dc <__cxa_guard_release>
    const bool maximise = true; // Make best use of available bandwidth...
    if(ss1.isEmpty())
    1130:	80 91 24 02 	lds	r24, 0x0224
    1134:	88 23       	and	r24, r24
    1136:	29 f4       	brne	.+10     	; 0x1142 <bareStatsTX(bool, bool, bool)+0xf6>
    bool isEmpty() { return(0 == nStats); }

    // Iff true enable the count ("+") field and display immediately after the "@"/ID field.
    // The unsigned count increments as a successful write() operation completes,
    // and wraps after 63 (to limit space), potentially allowing easy detection of lost stats/transmissions.
    void enableCount(bool enable) { c.enabled = enable; }
    1138:	80 91 2a 02 	lds	r24, 0x022A
    113c:	81 60       	ori	r24, 0x01	; 1
    113e:	80 93 2a 02 	sts	0x022A, r24
    // True if successful, false otherwise (eg capacity already reached).
    bool put(SimpleStatsKey key, int newValue);

    // Create/update value for the given sensor.
    // True if successful, false otherwise (eg capacity already reached).
    template <class T> bool put(const Sensor<T> &s) { return(put(s.tag(), s.get())); }
    1142:	e0 91 60 03 	lds	r30, 0x0360
    1146:	f0 91 61 03 	lds	r31, 0x0361
    114a:	00 84       	ldd	r0, Z+8	; 0x08
    114c:	f1 85       	ldd	r31, Z+9	; 0x09
    114e:	e0 2d       	mov	r30, r0
    1150:	80 e6       	ldi	r24, 0x60	; 96
    1152:	93 e0       	ldi	r25, 0x03	; 3
    1154:	09 95       	icall
    1156:	8c 01       	movw	r16, r24
    1158:	e0 91 60 03 	lds	r30, 0x0360
    115c:	f0 91 61 03 	lds	r31, 0x0361
    1160:	02 80       	ldd	r0, Z+2	; 0x02
    1162:	f3 81       	ldd	r31, Z+3	; 0x03
    1164:	e0 2d       	mov	r30, r0
    1166:	80 e6       	ldi	r24, 0x60	; 96
    1168:	93 e0       	ldi	r25, 0x03	; 3
    116a:	09 95       	icall
    116c:	ac 01       	movw	r20, r24
    116e:	81 e2       	ldi	r24, 0x21	; 33
    1170:	92 e0       	ldi	r25, 0x02	; 2
    1172:	b8 01       	movw	r22, r16
    1174:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <SimpleStatsRotationBase::put(char const*, int)>
    // Returns true if the room appears to be likely occupied (with active users) recently.
    // This uses the same timer as isOccupied() (restarted by markAsOccupied())
    // but returns to false somewhat sooner for example to allow ramping up more costly occupancy detection methods
    // and to allow some simple graduated occupancy responses.
    // Thread-safe.
    bool isLikelyRecentlyOccupied() { return(occupationCountdownM > OCCUPATION_TIMEOUT_1_M); }
    1178:	80 91 ed 01 	lds	r24, 0x01ED
    void markAsPossiblyOccupied();

    // Two-bit occupancy: (00 not disclosed,) 1 not occupied, 2 possibly occupied, 3 probably occupied.
    // 0 is not returned by this implementation.
    // Thread-safe.
    uint8_t twoBitOccupancyValue() { return(isLikelyRecentlyOccupied() ? 3 : (isLikelyOccupied() ? 2 : 1)); }
    117c:	82 32       	cpi	r24, 0x22	; 34
    117e:	10 f0       	brcs	.+4      	; 0x1184 <bareStatsTX(bool, bool, bool)+0x138>
    1180:	43 e0       	ldi	r20, 0x03	; 3
    1182:	07 c0       	rjmp	.+14     	; 0x1192 <bareStatsTX(bool, bool, bool)+0x146>

    // Returns true if the room appears to be likely occupied (with active users) now.
    // Operates on a timeout; calling markAsOccupied() restarts the timer.
    // Defaults to false (and API still exists) when OCCUPANCY_SUPPORT not defined.
    // Thread-safe.
    bool isLikelyOccupied() { return(0 != occupationCountdownM); }
    1184:	80 91 ed 01 	lds	r24, 0x01ED
    void markAsPossiblyOccupied();

    // Two-bit occupancy: (00 not disclosed,) 1 not occupied, 2 possibly occupied, 3 probably occupied.
    // 0 is not returned by this implementation.
    // Thread-safe.
    uint8_t twoBitOccupancyValue() { return(isLikelyRecentlyOccupied() ? 3 : (isLikelyOccupied() ? 2 : 1)); }
    1188:	88 23       	and	r24, r24
    118a:	11 f4       	brne	.+4      	; 0x1190 <bareStatsTX(bool, bool, bool)+0x144>
    118c:	41 e0       	ldi	r20, 0x01	; 1
    118e:	01 c0       	rjmp	.+2      	; 0x1192 <bareStatsTX(bool, bool, bool)+0x146>
    1190:	42 e0       	ldi	r20, 0x02	; 2
    ss1.put(TemperatureC16);
#if defined(HUMIDITY_SENSOR_SUPPORT)
    ss1.put(RelHumidity);
#endif
#if defined(OCCUPANCY_SUPPORT)
    ss1.put(Occupancy.twoBitTag(), Occupancy.twoBitOccupancyValue()); // Reduce spurious TX cf percentage.
    1192:	81 e2       	ldi	r24, 0x21	; 33
    1194:	92 e0       	ldi	r25, 0x02	; 2
    1196:	6a e0       	ldi	r22, 0x0A	; 10
    1198:	71 e0       	ldi	r23, 0x01	; 1
    119a:	50 e0       	ldi	r21, 0x00	; 0
    119c:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <SimpleStatsRotationBase::put(char const*, int)>
    // At other times more relaxed checking (eg lower power) can be used.
    bool increaseCheckForOccupancy() { return(!isLikelyRecentlyOccupied() && isLikelyOccupied() && !reportedRecently()); }

    // Get number of hours room vacant, zero when room occupied; does not wrap.
    // If forced to zero as soon as occupancy is detected.
    uint16_t getVacancyH() { return((value != 0) ? 0 : vacancyH); }
    11a0:	80 91 ec 01 	lds	r24, 0x01EC
    11a4:	88 23       	and	r24, r24
    11a6:	19 f0       	breq	.+6      	; 0x11ae <bareStatsTX(bool, bool, bool)+0x162>
    11a8:	40 e0       	ldi	r20, 0x00	; 0
    11aa:	50 e0       	ldi	r21, 0x00	; 0
    11ac:	04 c0       	rjmp	.+8      	; 0x11b6 <bareStatsTX(bool, bool, bool)+0x16a>
    11ae:	80 91 ef 01 	lds	r24, 0x01EF
    11b2:	48 2f       	mov	r20, r24
    11b4:	50 e0       	ldi	r21, 0x00	; 0
    ss1.put(Occupancy.vacHTag(), Occupancy.getVacancyH()); // EXPERIMENTAL
    11b6:	81 e2       	ldi	r24, 0x21	; 33
    11b8:	92 e0       	ldi	r25, 0x02	; 2
    11ba:	6c e0       	ldi	r22, 0x0C	; 12
    11bc:	71 e0       	ldi	r23, 0x01	; 1
    11be:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <SimpleStatsRotationBase::put(char const*, int)>
    // This depends on the AVR and other hardware components (eg sensors) in use.
    bool isSupplyVoltageLow() const { return(isLow); }

    // Returns true if the supply appears to be something like mains, that does not need monitoring.
    // This assumes that anything at/above 3V is mains or at least a long way from needing monitoring.
    bool isMains() const { return(!isLow && (mV >= 3000)); }
    11c2:	80 91 f5 02 	lds	r24, 0x02F5
    11c6:	88 23       	and	r24, r24
    11c8:	09 f0       	breq	.+2      	; 0x11cc <bareStatsTX(bool, bool, bool)+0x180>
    11ca:	79 c0       	rjmp	.+242    	; 0x12be <bareStatsTX(bool, bool, bool)+0x272>
    11cc:	80 91 f3 02 	lds	r24, 0x02F3
    11d0:	90 91 f4 02 	lds	r25, 0x02F4
    11d4:	88 5b       	subi	r24, 0xB8	; 184
    11d6:	9b 40       	sbci	r25, 0x0B	; 11
    11d8:	08 f4       	brcc	.+2      	; 0x11dc <bareStatsTX(bool, bool, bool)+0x190>
    11da:	71 c0       	rjmp	.+226    	; 0x12be <bareStatsTX(bool, bool, bool)+0x272>
#endif
    // OPTIONAL items
    // Only TX supply voltage for units apparently not mains powered.
    if(!Supply_mV.isMains()) { ss1.put(Supply_mV); } else { ss1.remove(Supply_mV.tag()); }
    11dc:	81 e2       	ldi	r24, 0x21	; 33
    11de:	92 e0       	ldi	r25, 0x02	; 2
    11e0:	62 e1       	ldi	r22, 0x12	; 18
    11e2:	71 e0       	ldi	r23, 0x01	; 1
    11e4:	0e 94 c5 14 	call	0x298a	; 0x298a <SimpleStatsRotationBase::remove(char const*)>
    11e8:	e0 91 f1 01 	lds	r30, 0x01F1
    11ec:	f0 91 f2 01 	lds	r31, 0x01F2
    11f0:	00 84       	ldd	r0, Z+8	; 0x08
    11f2:	f1 85       	ldd	r31, Z+9	; 0x09
    11f4:	e0 2d       	mov	r30, r0
    11f6:	81 ef       	ldi	r24, 0xF1	; 241
    11f8:	91 e0       	ldi	r25, 0x01	; 1
    11fa:	09 95       	icall
    11fc:	8c 01       	movw	r16, r24
    11fe:	e0 91 f1 01 	lds	r30, 0x01F1
    1202:	f0 91 f2 01 	lds	r31, 0x01F2
    1206:	02 80       	ldd	r0, Z+2	; 0x02
    1208:	f3 81       	ldd	r31, Z+3	; 0x03
    120a:	e0 2d       	mov	r30, r0
    120c:	81 ef       	ldi	r24, 0xF1	; 241
    120e:	91 e0       	ldi	r25, 0x01	; 1
    1210:	09 95       	icall
    1212:	48 2f       	mov	r20, r24
    1214:	81 e2       	ldi	r24, 0x21	; 33
    1216:	92 e0       	ldi	r25, 0x02	; 2
    1218:	b8 01       	movw	r22, r16
    121a:	50 e0       	ldi	r21, 0x00	; 0
    121c:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <SimpleStatsRotationBase::put(char const*, int)>
#if !defined(LOCAL_TRV) // Deploying as sensor unit, not TRV controller, so show all sensors and no TRV stuff.
    // Only show ambient light levels for non-TRV pure-sensor units.
    ss1.put(AmbLight);
#else
    ss1.put(NominalRadValve);
    ss1.put(NominalRadValve.tagTTC(), NominalRadValve.getTargetTempC());
    1220:	40 91 f4 01 	lds	r20, 0x01F4
    1224:	81 e2       	ldi	r24, 0x21	; 33
    1226:	92 e0       	ldi	r25, 0x02	; 2
    1228:	67 e1       	ldi	r22, 0x17	; 23
    122a:	71 e0       	ldi	r23, 0x01	; 1
    122c:	50 e0       	ldi	r21, 0x00	; 0
    122e:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <SimpleStatsRotationBase::put(char const*, int)>
#if 1
    ss1.put(NominalRadValve.tagCMPC(), NominalRadValve.getCumulativeMovementPC()); // EXPERIMENTAL
    1232:	40 91 00 02 	lds	r20, 0x0200
    1236:	50 91 01 02 	lds	r21, 0x0201
    123a:	5f 70       	andi	r21, 0x0F	; 15
    123c:	81 e2       	ldi	r24, 0x21	; 33
    123e:	92 e0       	ldi	r25, 0x02	; 2
    1240:	6c e1       	ldi	r22, 0x1C	; 28
    1242:	71 e0       	ldi	r23, 0x01	; 1
    1244:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <SimpleStatsRotationBase::put(char const*, int)>
#endif
#endif
    // If not doing a doubleTX then consider sometimes suppressing the change-flag clearing for this send
    // to reduce the chance of important changes being missed by the receiver.
    wrote = ss1.writeJSON(bptr, sizeof(buf) - (bptr-buf), getStatsTXLevel(), maximise); // , !allowDoubleTX && randRNG8NextBoolean());
    1248:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <getStatsTXLevel()>
    124c:	28 2f       	mov	r18, r24
    124e:	48 e0       	ldi	r20, 0x08	; 8
    1250:	a4 2e       	mov	r10, r20
    1252:	b1 2c       	mov	r11, r1
    1254:	ac 0e       	add	r10, r28
    1256:	bd 1e       	adc	r11, r29
    1258:	38 e0       	ldi	r19, 0x08	; 8
    125a:	c3 2e       	mov	r12, r19
    125c:	d1 2c       	mov	r13, r1
    125e:	ca 0c       	add	r12, r10
    1260:	db 1c       	adc	r13, r11
    1262:	81 e2       	ldi	r24, 0x21	; 33
    1264:	92 e0       	ldi	r25, 0x02	; 2
    1266:	b6 01       	movw	r22, r12
    1268:	49 e3       	ldi	r20, 0x39	; 57
    126a:	01 e0       	ldi	r16, 0x01	; 1
    126c:	ee 24       	eor	r14, r14
    126e:	0e 94 60 12 	call	0x24c0	; 0x24c0 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)>
    1272:	18 2f       	mov	r17, r24
    if(0 == wrote)
    1274:	88 23       	and	r24, r24
    1276:	29 f4       	brne	.+10     	; 0x1282 <bareStatsTX(bool, bool, bool)+0x236>
      {
DEBUG_SERIAL_PRINTLN_FLASHSTRING("JSON gen err!");
    1278:	8d e7       	ldi	r24, 0x7D	; 125
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <serialPrintlnAndFlush(__FlashStringHelper const*)>
    1280:	3a c0       	rjmp	.+116    	; 0x12f6 <bareStatsTX(bool, bool, bool)+0x2aa>
      return;
      }

    // Record stats as if local, and treat channel as secure.
    recordJSONStats(true, (const char *)bptr);
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	b6 01       	movw	r22, r12
    1286:	0e 94 93 15 	call	0x2b26	; 0x2b26 <recordJSONStats(bool, char const*)>
#if 0 || !defined(ENABLE_BOILER_HUB) && defined(DEBUG)
    DEBUG_SERIAL_PRINT((const char *)bptr);
    128a:	c6 01       	movw	r24, r12
    128c:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <serialPrintAndFlush(char const*)>
    DEBUG_SERIAL_PRINTLN();
    1290:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <serialPrintlnAndFlush()>
#endif
    // Adjust JSON message for reliable transmission.
    // (Set high-bit on final '}' to make it unique, and compute and append (non-0xff) CRC.)
    const uint8_t crc = adjustJSONMsgForTXAndComputeCRC((char *)bptr);
    1294:	c6 01       	movw	r24, r12
    1296:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <adjustJSONMsgForTXAndComputeCRC(char*)>
    if(0xff == crc)
    129a:	8f 3f       	cpi	r24, 0xFF	; 255
    129c:	61 f1       	breq	.+88     	; 0x12f6 <bareStatsTX(bool, bool, bool)+0x2aa>
      {
  //DEBUG_SERIAL_PRINTLN_FLASHSTRING("JSON msg bad!");
      return;
      }
    bptr += wrote;
    129e:	e1 2f       	mov	r30, r17
    12a0:	ff 27       	eor	r31, r31
    12a2:	e7 fd       	sbrc	r30, 7
    12a4:	f0 95       	com	r31
    12a6:	ec 0d       	add	r30, r12
    12a8:	fd 1d       	adc	r31, r13
    *bptr++ = crc; // Add 7-bit CRC for on-the-wire check.
    12aa:	80 83       	st	Z, r24
    *bptr = 0xff; // Terminate message for TX.
    12ac:	8f ef       	ldi	r24, 0xFF	; 255
    12ae:	81 83       	std	Z+1, r24	; 0x01
      return;
      }
#endif
    // TODO: put in listen before TX to reduce collisions (CSMA).
    // Send it!
    rawStatsTX(false, buf, resumeRX, allowDoubleTX);
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	b5 01       	movw	r22, r10
    12b4:	49 2d       	mov	r20, r9
    12b6:	28 2d       	mov	r18, r8
    12b8:	0e 94 77 07 	call	0xeee	; 0xeee <rawStatsTX(bool, unsigned char*, bool, bool)>
    12bc:	1c c0       	rjmp	.+56     	; 0x12f6 <bareStatsTX(bool, bool, bool)+0x2aa>
    12be:	e0 91 ef 02 	lds	r30, 0x02EF
    12c2:	f0 91 f0 02 	lds	r31, 0x02F0
    12c6:	00 84       	ldd	r0, Z+8	; 0x08
    12c8:	f1 85       	ldd	r31, Z+9	; 0x09
    12ca:	e0 2d       	mov	r30, r0
    12cc:	8f ee       	ldi	r24, 0xEF	; 239
    12ce:	92 e0       	ldi	r25, 0x02	; 2
    12d0:	09 95       	icall
    12d2:	8c 01       	movw	r16, r24
    12d4:	e0 91 ef 02 	lds	r30, 0x02EF
    12d8:	f0 91 f0 02 	lds	r31, 0x02F0
    12dc:	02 80       	ldd	r0, Z+2	; 0x02
    12de:	f3 81       	ldd	r31, Z+3	; 0x03
    12e0:	e0 2d       	mov	r30, r0
    12e2:	8f ee       	ldi	r24, 0xEF	; 239
    12e4:	92 e0       	ldi	r25, 0x02	; 2
    12e6:	09 95       	icall
    12e8:	ac 01       	movw	r20, r24
    12ea:	81 e2       	ldi	r24, 0x21	; 33
    12ec:	92 e0       	ldi	r25, 0x02	; 2
    12ee:	b8 01       	movw	r22, r16
    12f0:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <SimpleStatsRotationBase::put(char const*, int)>
    12f4:	79 cf       	rjmp	.-270    	; 0x11e8 <bareStatsTX(bool, bool, bool)+0x19c>
    }

#endif // defined(ALLOW_JSON_OUTPUT)

//DEBUG_SERIAL_PRINTLN_FLASHSTRING("Stats TX");
  }
    12f6:	c8 5b       	subi	r28, 0xB8	; 184
    12f8:	df 4f       	sbci	r29, 0xFF	; 255
    12fa:	0f b6       	in	r0, 0x3f	; 63
    12fc:	f8 94       	cli
    12fe:	de bf       	out	0x3e, r29	; 62
    1300:	0f be       	out	0x3f, r0	; 63
    1302:	cd bf       	out	0x3d, r28	; 61
    1304:	cf 91       	pop	r28
    1306:	df 91       	pop	r29
    1308:	1f 91       	pop	r17
    130a:	0f 91       	pop	r16
    130c:	ff 90       	pop	r15
    130e:	ef 90       	pop	r14
    1310:	df 90       	pop	r13
    1312:	cf 90       	pop	r12
    1314:	bf 90       	pop	r11
    1316:	af 90       	pop	r10
    1318:	9f 90       	pop	r9
    131a:	8f 90       	pop	r8
    131c:	08 95       	ret

0000131e <setupOpenTRV()>:
#endif

void setupOpenTRV()
  {
  // Set up async edge interrupts.
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    131e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1320:	f8 94       	cli
    {
    //PCICR = 0x05;
    //PCMSK0 = 0b00000011; // PB; PCINT  0--7    (LEARN1 and Radio)
    //PCMSK1 = 0b00000000; // PC; PCINT  8--15
    //PCMSK2 = 0b00101001; // PD; PCINT 16--24   (LEARN2 and MODE, RX)
    PCICR = 0x4; // 0x4 enables PD/PCMSK2.
    1322:	84 e0       	ldi	r24, 0x04	; 4
    1324:	80 93 68 00 	sts	0x0068, r24
    PCMSK2 = MASK_PD; // PD; PCINT 16--24 (0b1 is PCINT16/RX)
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	80 93 6d 00 	sts	0x006D, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    132e:	9f bf       	out	0x3f, r25	; 63
  // Do early 'wake-up' stats transmission if possible
  // when everything else is set up and ready.
  // Attempt to maximise chance of reception with a double TX.
  // Assume not in hub mode yet.
  // Send all possible formats.
  bareStatsTX(false, true, true);
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	61 e0       	ldi	r22, 0x01	; 1
    1334:	41 e0       	ldi	r20, 0x01	; 1
    1336:	0e 94 26 08 	call	0x104c	; 0x104c <bareStatsTX(bool, bool, bool)>
  nap(WDTO_120MS); // Sleep long enough for receiver to have a chance to process the binary format first.
    133a:	83 e0       	ldi	r24, 0x03	; 3
    133c:	0e 94 39 17 	call	0x2e72	; 0x2e72 <nap(signed char)>
  // TODO: send stats repeatedly until all values pushed out (no 'changed' values unsent).
  bareStatsTX(false, true, false);
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	61 e0       	ldi	r22, 0x01	; 1
    1344:	40 e0       	ldi	r20, 0x00	; 0
    1346:	0e 94 26 08 	call	0x104c	; 0x104c <bareStatsTX(bool, bool, bool)>
  // Signal some sort of life on waking up...
  ValveDirect.wiggle();
#endif

  // Set appropriate loop() values just before entering it.
  TIME_LSD = getSecondsLT();
    134a:	80 91 fd 02 	lds	r24, 0x02FD
    134e:	80 93 17 02 	sts	0x0217, r24
  }
    1352:	08 95       	ret

00001354 <zapStats(unsigned int)>:

// Clear all collected statistics, eg when moving device to a new room or at a major time change.
// Requires 1.8ms per byte for each byte that actually needs erasing.
//   * maxBytesToErase limit the number of bytes erased to this; strictly positive, else 0 to allow 65536
// Returns true if finished with all bytes erased.
bool zapStats(uint16_t maxBytesToErase)
    1354:	0f 93       	push	r16
    1356:	1f 93       	push	r17
    1358:	cf 93       	push	r28
    135a:	df 93       	push	r29
    135c:	8c 01       	movw	r16, r24
    135e:	c0 e0       	ldi	r28, 0x00	; 0
    1360:	d1 e0       	ldi	r29, 0x01	; 1
  {
  for(uint8_t *p = (uint8_t *)EE_START_STATS; p <= (uint8_t *)EE_END_STATS; ++p)
    { if(eeprom_smart_erase_byte(p)) { if(--maxBytesToErase == 0) { return(false); } } } // Stop if out of time...
    1362:	ce 01       	movw	r24, r28
    1364:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <eeprom_smart_erase_byte(unsigned char*)>
    1368:	88 23       	and	r24, r24
    136a:	29 f0       	breq	.+10     	; 0x1376 <zapStats(unsigned int)+0x22>
    136c:	01 50       	subi	r16, 0x01	; 1
    136e:	10 40       	sbci	r17, 0x00	; 0
    1370:	11 f4       	brne	.+4      	; 0x1376 <zapStats(unsigned int)+0x22>
    1372:	80 e0       	ldi	r24, 0x00	; 0
    1374:	06 c0       	rjmp	.+12     	; 0x1382 <zapStats(unsigned int)+0x2e>
// Requires 1.8ms per byte for each byte that actually needs erasing.
//   * maxBytesToErase limit the number of bytes erased to this; strictly positive, else 0 to allow 65536
// Returns true if finished with all bytes erased.
bool zapStats(uint16_t maxBytesToErase)
  {
  for(uint8_t *p = (uint8_t *)EE_START_STATS; p <= (uint8_t *)EE_END_STATS; ++p)
    1376:	21 96       	adiw	r28, 0x01	; 1
    1378:	82 e0       	ldi	r24, 0x02	; 2
    137a:	c8 30       	cpi	r28, 0x08	; 8
    137c:	d8 07       	cpc	r29, r24
    137e:	89 f7       	brne	.-30     	; 0x1362 <zapStats(unsigned int)+0xe>
    1380:	81 e0       	ldi	r24, 0x01	; 1
    { if(eeprom_smart_erase_byte(p)) { if(--maxBytesToErase == 0) { return(false); } } } // Stop if out of time...
  return(true); // All done.
  }
    1382:	df 91       	pop	r29
    1384:	cf 91       	pop	r28
    1386:	1f 91       	pop	r17
    1388:	0f 91       	pop	r16
    138a:	08 95       	ret

0000138c <ModelledRadValve::setMinValvePcReallyOpen(unsigned char)>:
  }

// Set and cache minimum valve percentage open to be considered really open.
// Applies to local valve and, at hub, to calls for remote calls for heat.
// Any out-of-range value (eg >100) clears the override and DEFAULT_MIN_VALVE_PC_REALLY_OPEN will be used.
void ModelledRadValve::setMinValvePcReallyOpen(const uint8_t percent)
    138c:	1f 93       	push	r17
    138e:	18 2f       	mov	r17, r24
  {
  if((percent > 100) || (percent == 0) || (percent == DEFAULT_MIN_VALVE_PC_REALLY_OPEN))
    1390:	81 50       	subi	r24, 0x01	; 1
    1392:	84 36       	cpi	r24, 0x64	; 100
    1394:	10 f4       	brcc	.+4      	; 0x139a <ModelledRadValve::setMinValvePcReallyOpen(unsigned char)+0xe>
    1396:	1a 30       	cpi	r17, 0x0A	; 10
    1398:	41 f4       	brne	.+16     	; 0x13aa <ModelledRadValve::setMinValvePcReallyOpen(unsigned char)+0x1e>
    {
    // Bad / out-of-range / default value so erase stored value if not already so.
    eeprom_smart_erase_byte((uint8_t *)EE_START_MIN_VALVE_PC_REALLY_OPEN);
    139a:	83 e1       	ldi	r24, 0x13	; 19
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <eeprom_smart_erase_byte(unsigned char*)>
    // Cache logical default value.
    mVPRO_cache = DEFAULT_MIN_VALVE_PC_REALLY_OPEN;
    13a2:	8a e0       	ldi	r24, 0x0A	; 10
    13a4:	80 93 16 02 	sts	0x0216, r24
    13a8:	07 c0       	rjmp	.+14     	; 0x13b8 <ModelledRadValve::setMinValvePcReallyOpen(unsigned char)+0x2c>
    return;
    }
  // Store specified value with as low wear as possible.
  eeprom_smart_update_byte((uint8_t *)EE_START_MIN_VALVE_PC_REALLY_OPEN, percent);
    13aa:	83 e1       	ldi	r24, 0x13	; 19
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	61 2f       	mov	r22, r17
    13b0:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <eeprom_smart_update_byte(unsigned char*, unsigned char)>
  // Cache it.
  mVPRO_cache = percent;
    13b4:	10 93 16 02 	sts	0x0216, r17
  }
    13b8:	1f 91       	pop	r17
    13ba:	08 95       	ret

000013bc <sampleStats(bool)>:
// Call this once per hour with fullSample==true, as near the end of the hour as possible;
// this will update the non-volatile stats record for the current hour.
// Optionally call this at a small (2--10) even number of evenly-spaced number of other times thoughout the hour
// with fullSample=false to sub-sample (and these may receive lower weighting or be ignored).
// (EEPROM wear should not be an issue at this update rate in normal use.)
void sampleStats(const bool fullSample)
    13bc:	0f 93       	push	r16
    13be:	1f 93       	push	r17
    13c0:	58 2f       	mov	r21, r24
  {
  // (Sub-)sample processing.
  // In general, keep running total of sub-samples in a way that should not overflow
  // and use the mean to update the non-volatile EEPROM values on the fullSample call.
  static uint8_t sampleCount_; // General sub-sample count; initially zero after boot, and zeroed after each full sample.
  const bool firstSample = (0 == sampleCount_++);
    13c2:	60 91 6a 02 	lds	r22, 0x026A
    13c6:	40 e0       	ldi	r20, 0x00	; 0
    13c8:	66 23       	and	r22, r22
    13ca:	09 f4       	brne	.+2      	; 0x13ce <sampleStats(bool)+0x12>
    13cc:	41 e0       	ldi	r20, 0x01	; 1
    13ce:	16 2f       	mov	r17, r22
    13d0:	1f 5f       	subi	r17, 0xFF	; 255
    13d2:	10 93 6a 02 	sts	0x026A, r17
    13d6:	80 91 5b 03 	lds	r24, 0x035B




// Templated function versions of min/max that do not evaluate the arguments twice.
template <class T> const T& fnmin(const T& a, const T& b) { return((a>b)?b:a); }
    13da:	8f 3f       	cpi	r24, 0xFF	; 255
    13dc:	09 f4       	brne	.+2      	; 0x13e0 <sampleStats(bool)+0x24>
    13de:	8e ef       	ldi	r24, 0xFE	; 254
  // WARM mode count.
  static int8_t warmCount; // Sub-sample WARM count; initially zero, and zeroed after each full sample.
  if(inWarmMode()) { ++warmCount; } else { --warmCount; }
#endif
  // Ambient light.
  const uint16_t ambLight = fnmin(AmbLight.get(), (uint8_t)MAX_STATS_AMBLIGHT); // Constrain value at top end to avoid 'not set' value.
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
  static uint16_t ambLightTotal;
  ambLightTotal = firstSample ? ambLight : (ambLightTotal + ambLight);
    13e4:	44 23       	and	r20, r20
    13e6:	31 f4       	brne	.+12     	; 0x13f4 <sampleStats(bool)+0x38>
    13e8:	80 91 68 02 	lds	r24, 0x0268
    13ec:	90 91 69 02 	lds	r25, 0x0269
    13f0:	28 0f       	add	r18, r24
    13f2:	39 1f       	adc	r19, r25
    13f4:	30 93 69 02 	sts	0x0269, r19
    13f8:	20 93 68 02 	sts	0x0268, r18
    virtual uint8_t preferredPollInterval_s() const { return(60); }

    // Return last value fetched by read(); undefined before first read().
    // Fast.
    // Not thread-safe nor usable within ISRs (Interrupt Service Routines).
    virtual int get() const { return(value); }
    13fc:	20 91 62 03 	lds	r18, 0x0362
    1400:	30 91 63 03 	lds	r19, 0x0363
  const int tempC16 = TemperatureC16.get();
  static int tempC16Total;
  tempC16Total = firstSample ? tempC16 : (tempC16Total + tempC16);
    1404:	44 23       	and	r20, r20
    1406:	31 f4       	brne	.+12     	; 0x1414 <sampleStats(bool)+0x58>
    1408:	80 91 66 02 	lds	r24, 0x0266
    140c:	90 91 67 02 	lds	r25, 0x0267
    1410:	28 0f       	add	r18, r24
    1412:	39 1f       	adc	r19, r25
    1414:	30 93 67 02 	sts	0x0267, r19
    1418:	20 93 66 02 	sts	0x0266, r18
    141c:	80 91 ec 01 	lds	r24, 0x01EC
#ifdef OCCUPANCY_SUPPORT
  const uint16_t occpc = Occupancy.get();
    1420:	28 2f       	mov	r18, r24
    1422:	30 e0       	ldi	r19, 0x00	; 0
  static uint16_t occpcTotal;
  occpcTotal = firstSample ? occpc : (occpcTotal + occpc);
    1424:	44 23       	and	r20, r20
    1426:	31 f4       	brne	.+12     	; 0x1434 <sampleStats(bool)+0x78>
    1428:	80 91 64 02 	lds	r24, 0x0264
    142c:	90 91 65 02 	lds	r25, 0x0265
    1430:	28 0f       	add	r18, r24
    1432:	39 1f       	adc	r19, r25
    1434:	30 93 65 02 	sts	0x0265, r19
    1438:	20 93 64 02 	sts	0x0264, r18
  // TODO: allow this to work with at least start-up-time availability detection.
  const uint16_t rhpc = fnmin(RelHumidity.get(), (uint8_t)100); // Fail safe.
  static uint16_t rhpcTotal;
  rhpcTotal = firstSample ? rhpc : (rhpcTotal + rhpc);
#endif
  if(!fullSample) { return; } // Only accumulate values cached until a full sample.
    143c:	55 23       	and	r21, r21
    143e:	09 f4       	brne	.+2      	; 0x1442 <sampleStats(bool)+0x86>
    1440:	60 c0       	rjmp	.+192    	; 0x1502 <sampleStats(bool)+0x146>
  // Catpure sample count to use below.
  const uint8_t sc = sampleCount_; 
  // Reset generic sub-sample count to initial state after fill sample.
  sampleCount_ = 0;
    1442:	10 92 6a 02 	sts	0x026A, r1

  // Get the current local-time hour...
  const uint_least8_t hh = getHoursLT(); 
    1446:	0e 94 ca 1c 	call	0x3994	; 0x3994 <getHoursLT()>
    144a:	08 2f       	mov	r16, r24

  // Scale and constrain last-read temperature to valid range for stats.
  const int tempCTotal = (1==sc)?tempC16Total:
                         ((2==sc)?((tempC16Total+1)>>1):
                                  ((tempC16Total + (sc>>1)) / sc));
    144c:	11 30       	cpi	r17, 0x01	; 1
    144e:	29 f4       	brne	.+10     	; 0x145a <sampleStats(bool)+0x9e>
    1450:	80 91 66 02 	lds	r24, 0x0266
    1454:	90 91 67 02 	lds	r25, 0x0267
    1458:	15 c0       	rjmp	.+42     	; 0x1484 <sampleStats(bool)+0xc8>
    145a:	20 91 66 02 	lds	r18, 0x0266
    145e:	30 91 67 02 	lds	r19, 0x0267
    1462:	12 30       	cpi	r17, 0x02	; 2
    1464:	29 f4       	brne	.+10     	; 0x1470 <sampleStats(bool)+0xb4>
    1466:	c9 01       	movw	r24, r18
    1468:	01 96       	adiw	r24, 0x01	; 1
    146a:	95 95       	asr	r25
    146c:	87 95       	ror	r24
    146e:	0a c0       	rjmp	.+20     	; 0x1484 <sampleStats(bool)+0xc8>
    1470:	61 2f       	mov	r22, r17
    1472:	70 e0       	ldi	r23, 0x00	; 0
    1474:	cb 01       	movw	r24, r22
    1476:	95 95       	asr	r25
    1478:	87 95       	ror	r24
    147a:	82 0f       	add	r24, r18
    147c:	93 1f       	adc	r25, r19
    147e:	0e 94 42 35 	call	0x6a84	; 0x6a84 <__divmodhi4>
    1482:	cb 01       	movw	r24, r22
  const uint8_t temp = compressTempC16(tempCTotal);
    1484:	0e 94 60 06 	call	0xcc0	; 0xcc0 <compressTempC16(int)>
    1488:	48 2f       	mov	r20, r24
  DEBUG_SERIAL_PRINT_FLASHSTRING(", expanded=");
  DEBUG_SERIAL_PRINT(expandTempC16(temp));
  DEBUG_SERIAL_PRINTLN();
#endif
//  const uint8_t temp = compressTempC16(smartDivToU8(tempC16Total, sc));
  simpleUpdateStatsPair(EE_STATS_SET_TEMP_BY_HOUR, hh, temp);
    148a:	80 e0       	ldi	r24, 0x00	; 0
    148c:	60 2f       	mov	r22, r16
    148e:	0e 94 1e 07 	call	0xe3c	; 0xe3c <simpleUpdateStatsPair(unsigned char, unsigned char, unsigned char)>
//  const uint8_t tempSmoothed = eeprom_read_byte(phT);
//  if(tempSmoothed > MAX_STATS_TEMP) { eeprom_smart_update_byte(phT, temp); }
//  else { eeprom_smart_update_byte(phT, smoothStatsValue(tempSmoothed, temp)); }

  // Ambient light; last and smoothed data sets,
  simpleUpdateStatsPair(EE_STATS_SET_AMBLIGHT_BY_HOUR, hh, smartDivToU8(ambLightTotal, sc));
    1492:	40 91 68 02 	lds	r20, 0x0268
    1496:	50 91 69 02 	lds	r21, 0x0269
static uint8_t smartDivToU8(const uint16_t total, const uint8_t sampleCount)
  {
#if 0 && defined(DEBUG) // Extra arg validation during dev.
  if(0 == sampleCount) { panic(); }
#endif
  if(1 == sampleCount) { return((uint8_t) total); } // No division required.
    149a:	11 30       	cpi	r17, 0x01	; 1
    149c:	91 f0       	breq	.+36     	; 0x14c2 <sampleStats(bool)+0x106>
  if(2 == sampleCount) { return((uint8_t) ((total+1) >> 1)); } // Fast shift instead of slow divide.
    149e:	12 30       	cpi	r17, 0x02	; 2
    14a0:	29 f4       	brne	.+10     	; 0x14ac <sampleStats(bool)+0xf0>
    14a2:	4f 5f       	subi	r20, 0xFF	; 255
    14a4:	5f 4f       	sbci	r21, 0xFF	; 255
    14a6:	56 95       	lsr	r21
    14a8:	47 95       	ror	r20
    14aa:	0b c0       	rjmp	.+22     	; 0x14c2 <sampleStats(bool)+0x106>
  return((uint8_t) ((total + (sampleCount>>1)) / sampleCount)); // Generic divide (slow).
    14ac:	81 2f       	mov	r24, r17
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	95 95       	asr	r25
    14b2:	87 95       	ror	r24
    14b4:	84 0f       	add	r24, r20
    14b6:	95 1f       	adc	r25, r21
    14b8:	61 2f       	mov	r22, r17
    14ba:	70 e0       	ldi	r23, 0x00	; 0
    14bc:	0e 94 2e 35 	call	0x6a5c	; 0x6a5c <__udivmodhi4>
    14c0:	46 2f       	mov	r20, r22
//  const uint8_t tempSmoothed = eeprom_read_byte(phT);
//  if(tempSmoothed > MAX_STATS_TEMP) { eeprom_smart_update_byte(phT, temp); }
//  else { eeprom_smart_update_byte(phT, smoothStatsValue(tempSmoothed, temp)); }

  // Ambient light; last and smoothed data sets,
  simpleUpdateStatsPair(EE_STATS_SET_AMBLIGHT_BY_HOUR, hh, smartDivToU8(ambLightTotal, sc));
    14c2:	82 e0       	ldi	r24, 0x02	; 2
    14c4:	60 2f       	mov	r22, r16
    14c6:	0e 94 1e 07 	call	0xe3c	; 0xe3c <simpleUpdateStatsPair(unsigned char, unsigned char, unsigned char)>

#ifdef OCCUPANCY_SUPPORT
  // Occupancy confidence percent, if supported; last and smoothed data sets,
  simpleUpdateStatsPair(EE_STATS_SET_OCCPC_BY_HOUR, hh, smartDivToU8(occpcTotal, sc));
    14ca:	40 91 64 02 	lds	r20, 0x0264
    14ce:	50 91 65 02 	lds	r21, 0x0265
static uint8_t smartDivToU8(const uint16_t total, const uint8_t sampleCount)
  {
#if 0 && defined(DEBUG) // Extra arg validation during dev.
  if(0 == sampleCount) { panic(); }
#endif
  if(1 == sampleCount) { return((uint8_t) total); } // No division required.
    14d2:	11 30       	cpi	r17, 0x01	; 1
    14d4:	91 f0       	breq	.+36     	; 0x14fa <sampleStats(bool)+0x13e>
  if(2 == sampleCount) { return((uint8_t) ((total+1) >> 1)); } // Fast shift instead of slow divide.
    14d6:	12 30       	cpi	r17, 0x02	; 2
    14d8:	29 f4       	brne	.+10     	; 0x14e4 <sampleStats(bool)+0x128>
    14da:	4f 5f       	subi	r20, 0xFF	; 255
    14dc:	5f 4f       	sbci	r21, 0xFF	; 255
    14de:	56 95       	lsr	r21
    14e0:	47 95       	ror	r20
    14e2:	0b c0       	rjmp	.+22     	; 0x14fa <sampleStats(bool)+0x13e>
  return((uint8_t) ((total + (sampleCount>>1)) / sampleCount)); // Generic divide (slow).
    14e4:	81 2f       	mov	r24, r17
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	95 95       	asr	r25
    14ea:	87 95       	ror	r24
    14ec:	84 0f       	add	r24, r20
    14ee:	95 1f       	adc	r25, r21
    14f0:	61 2f       	mov	r22, r17
    14f2:	70 e0       	ldi	r23, 0x00	; 0
    14f4:	0e 94 2e 35 	call	0x6a5c	; 0x6a5c <__udivmodhi4>
    14f8:	46 2f       	mov	r20, r22
  // Ambient light; last and smoothed data sets,
  simpleUpdateStatsPair(EE_STATS_SET_AMBLIGHT_BY_HOUR, hh, smartDivToU8(ambLightTotal, sc));

#ifdef OCCUPANCY_SUPPORT
  // Occupancy confidence percent, if supported; last and smoothed data sets,
  simpleUpdateStatsPair(EE_STATS_SET_OCCPC_BY_HOUR, hh, smartDivToU8(occpcTotal, sc));
    14fa:	84 e0       	ldi	r24, 0x04	; 4
    14fc:	60 2f       	mov	r22, r16
    14fe:	0e 94 1e 07 	call	0xe3c	; 0xe3c <simpleUpdateStatsPair(unsigned char, unsigned char, unsigned char)>
  // Reset WARM sub-sample count after full sample.
  warmCount = 0;
#endif

  // TODO: other stats measures...
  }
    1502:	1f 91       	pop	r17
    1504:	0f 91       	pop	r16
    1506:	08 95       	ret

00001508 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)>:
// Returns false if a full set of stats not available, eg including the specified hour.
// Always returns false if all samples are the same.
//   * inTop  test for membership of the top quartile if true, bottom quartile if false
//   * statsSet  stats set number to use.
//   * hour  hour of day to use or ~0 for current hour.
bool inOutlierQuartile(const uint8_t inTop, const uint8_t statsSet, const uint8_t hour)
    1508:	0f 93       	push	r16
    150a:	1f 93       	push	r17
    150c:	08 2f       	mov	r16, r24
    150e:	16 2f       	mov	r17, r22
  {
  if(statsSet >= EE_STATS_SETS) { return(false); } // Bad stats set number, ie unsafe.
    1510:	6a 30       	cpi	r22, 0x0A	; 10
    1512:	08 f0       	brcs	.+2      	; 0x1516 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0xe>
    1514:	40 c0       	rjmp	.+128    	; 0x1596 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x8e>
  const uint8_t hh = (hour > 23) ? getHoursLT() : hour;
    1516:	48 31       	cpi	r20, 0x18	; 24
    1518:	18 f0       	brcs	.+6      	; 0x1520 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x18>
    151a:	0e 94 ca 1c 	call	0x3994	; 0x3994 <getHoursLT()>
    151e:	48 2f       	mov	r20, r24
  const uint8_t *ss = (uint8_t *)(EE_STATS_START_ADDR(statsSet));
    1520:	88 e1       	ldi	r24, 0x18	; 24
    1522:	18 9f       	mul	r17, r24
    1524:	b0 01       	movw	r22, r0
    1526:	11 24       	eor	r1, r1
    1528:	9b 01       	movw	r18, r22
    152a:	20 50       	subi	r18, 0x00	; 0
    152c:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    152e:	f9 99       	sbic	0x1f, 1	; 31
    1530:	fe cf       	rjmp	.-4      	; 0x152e <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x26>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1532:	c9 01       	movw	r24, r18
    1534:	84 0f       	add	r24, r20
    1536:	91 1d       	adc	r25, r1
    1538:	92 bd       	out	0x22, r25	; 34
    153a:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    153c:	f8 9a       	sbi	0x1f, 0	; 31
    153e:	40 b5       	in	r20, 0x20	; 32
  const uint8_t sample = eeprom_read_byte(ss + hh);
  if(STATS_UNSET_INT == sample) { return(false); }
  if(inTop) { return(inTopQuartile(ss, sample)); }
    1540:	00 23       	and	r16, r16
    1542:	21 f4       	brne	.+8      	; 0x154c <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x44>
    1544:	90 e0       	ldi	r25, 0x00	; 0
//   * s is start of (24) sample set in EEPROM
//   * sample to be tested for being in lower quartile
bool inBottomQuartile(const uint8_t *sE, const uint8_t sample)
  {
  uint8_t valuesHigher = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
    1546:	68 5e       	subi	r22, 0xE8	; 232
    1548:	7e 4f       	sbci	r23, 0xFE	; 254
    154a:	22 c0       	rjmp	.+68     	; 0x1590 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x88>
  if(statsSet >= EE_STATS_SETS) { return(false); } // Bad stats set number, ie unsafe.
  const uint8_t hh = (hour > 23) ? getHoursLT() : hour;
  const uint8_t *ss = (uint8_t *)(EE_STATS_START_ADDR(statsSet));
  const uint8_t sample = eeprom_read_byte(ss + hh);
  if(STATS_UNSET_INT == sample) { return(false); }
  if(inTop) { return(inTopQuartile(ss, sample)); }
    154c:	90 e0       	ldi	r25, 0x00	; 0
//   * s is start of (24) sample set in EEPROM
//   * sample to be tested for being in lower quartile
bool inTopQuartile(const uint8_t *sE, const uint8_t sample)
  {
  uint8_t valuesLower = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
    154e:	68 5e       	subi	r22, 0xE8	; 232
    1550:	7e 4f       	sbci	r23, 0xFE	; 254
    1552:	0d c0       	rjmp	.+26     	; 0x156e <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x66>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1554:	f9 99       	sbic	0x1f, 1	; 31
    1556:	fe cf       	rjmp	.-4      	; 0x1554 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x4c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1558:	32 bd       	out	0x22, r19	; 34
    155a:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    155c:	f8 9a       	sbi	0x1f, 0	; 31
    155e:	80 b5       	in	r24, 0x20	; 32
    {
    const uint8_t v = eeprom_read_byte(sE); 
    if(STATS_UNSET_INT == v) { return(false); } // Abort if not a full set of stats (eg at least one full day's worth). 
    if(v < sample) { if(++valuesLower >= 18) { return(true); } } // Stop as soon as known to be in upper quartile.
    1560:	84 17       	cp	r24, r20
    1562:	18 f4       	brcc	.+6      	; 0x156a <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x62>
    1564:	9f 5f       	subi	r25, 0xFF	; 255
    1566:	92 31       	cpi	r25, 0x12	; 18
    1568:	c0 f4       	brcc	.+48     	; 0x159a <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x92>
//   * s is start of (24) sample set in EEPROM
//   * sample to be tested for being in lower quartile
bool inTopQuartile(const uint8_t *sE, const uint8_t sample)
  {
  uint8_t valuesLower = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
    156a:	2f 5f       	subi	r18, 0xFF	; 255
    156c:	3f 4f       	sbci	r19, 0xFF	; 255
    156e:	26 17       	cp	r18, r22
    1570:	37 07       	cpc	r19, r23
    1572:	81 f7       	brne	.-32     	; 0x1554 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x4c>
    1574:	10 c0       	rjmp	.+32     	; 0x1596 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x8e>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1576:	f9 99       	sbic	0x1f, 1	; 31
    1578:	fe cf       	rjmp	.-4      	; 0x1576 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x6e>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    157a:	32 bd       	out	0x22, r19	; 34
    157c:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    157e:	f8 9a       	sbi	0x1f, 0	; 31
    1580:	80 b5       	in	r24, 0x20	; 32
  uint8_t valuesHigher = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
    {
    const uint8_t v = eeprom_read_byte(sE); 
    if(STATS_UNSET_INT == v) { return(false); } // Abort if not a full set of stats (eg at least one full day's worth). 
    if(v > sample) { if(++valuesHigher >= 18) { return(true); } } // Stop as soon as known to be in lower quartile.
    1582:	48 17       	cp	r20, r24
    1584:	18 f4       	brcc	.+6      	; 0x158c <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x84>
    1586:	9f 5f       	subi	r25, 0xFF	; 255
    1588:	92 31       	cpi	r25, 0x12	; 18
    158a:	38 f4       	brcc	.+14     	; 0x159a <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x92>
//   * s is start of (24) sample set in EEPROM
//   * sample to be tested for being in lower quartile
bool inBottomQuartile(const uint8_t *sE, const uint8_t sample)
  {
  uint8_t valuesHigher = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
    158c:	2f 5f       	subi	r18, 0xFF	; 255
    158e:	3f 4f       	sbci	r19, 0xFF	; 255
    1590:	26 17       	cp	r18, r22
    1592:	37 07       	cpc	r19, r23
    1594:	81 f7       	brne	.-32     	; 0x1576 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x6e>
    1596:	80 e0       	ldi	r24, 0x00	; 0
    1598:	01 c0       	rjmp	.+2      	; 0x159c <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x94>
    159a:	81 e0       	ldi	r24, 0x01	; 1
  const uint8_t *ss = (uint8_t *)(EE_STATS_START_ADDR(statsSet));
  const uint8_t sample = eeprom_read_byte(ss + hh);
  if(STATS_UNSET_INT == sample) { return(false); }
  if(inTop) { return(inTopQuartile(ss, sample)); }
  return(inBottomQuartile(ss, sample));
  }
    159c:	1f 91       	pop	r17
    159e:	0f 91       	pop	r16
    15a0:	08 95       	ret

000015a2 <ModelledRadValve::computeTargetTemp()>:
// Will be called by computeCallForHeat().
// One aim is to allow reasonable energy savings (10--30%)
// even if the device is left in WARM mode all the time,
// using occupancy/light/etc to determine when temperature can be set back
// without annoying users.
uint8_t ModelledRadValve::computeTargetTemp()
    15a2:	ef 92       	push	r14
    15a4:	ff 92       	push	r15
    15a6:	0f 93       	push	r16
    15a8:	1f 93       	push	r17
  {
  // In FROST mode.
  if(!inWarmMode())
    15aa:	80 91 6c 02 	lds	r24, 0x026C
    15ae:	88 23       	and	r24, r24
    15b0:	09 f0       	breq	.+2      	; 0x15b4 <ModelledRadValve::computeTargetTemp()+0x12>
    15b2:	37 c0       	rjmp	.+110    	; 0x1622 <ModelledRadValve::computeTargetTemp()+0x80>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    15b4:	f9 99       	sbic	0x1f, 1	; 31
    15b6:	fe cf       	rjmp	.-4      	; 0x15b4 <ModelledRadValve::computeTargetTemp()+0x12>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    15b8:	8e e0       	ldi	r24, 0x0E	; 14
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	92 bd       	out	0x22, r25	; 34
    15be:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    15c0:	f8 9a       	sbi	0x1f, 0	; 31
    15c2:	10 b5       	in	r17, 0x20	; 32
uint8_t getFROSTTargetC()
  {
  // Get persisted value, if any.
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_FROST_C);
  // If out of bounds or no stored value then use default.
  if((stored < MIN_TARGET_C) || (stored > MAX_TARGET_C)) { return(FROST); }
    15c4:	81 2f       	mov	r24, r17
    15c6:	85 50       	subi	r24, 0x05	; 5
    15c8:	8b 35       	cpi	r24, 0x5B	; 91
    15ca:	08 f0       	brcs	.+2      	; 0x15ce <ModelledRadValve::computeTargetTemp()+0x2c>
    15cc:	17 e0       	ldi	r17, 0x07	; 7
    15ce:	80 91 ec 01 	lds	r24, 0x01EC
    15d2:	88 23       	and	r24, r24
    15d4:	29 f4       	brne	.+10     	; 0x15e0 <ModelledRadValve::computeTargetTemp()+0x3e>
    // If scheduled WARM is due soon then ensure that room is at least at setback temperature
    // to give room a chance to hit the target, and for furniture and surfaces to be warm, etc.
    // Don't do this if the room has been vacant for a long time (eg so as to avoid pre-warm being higher than WARM ever).
    // Don't do this if there has been recent manual intervention, eg to allow manual 'cancellation' of pre-heat (TODO-464).
    // Only do this if the target WARM temperature is NOT an 'eco' temperature (ie very near the bottom of the scale).
    if(!Occupancy.longVacant() && isAnyScheduleOnWARMSoon() && !recentUIControlUse())
    15d6:	80 91 ef 01 	lds	r24, 0x01EF
    15da:	89 31       	cpi	r24, 0x19	; 25
    15dc:	08 f0       	brcs	.+2      	; 0x15e0 <ModelledRadValve::computeTargetTemp()+0x3e>
    15de:	9f c0       	rjmp	.+318    	; 0x171e <ModelledRadValve::computeTargetTemp()+0x17c>
    15e0:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <isAnyScheduleOnWARMSoon()>
    15e4:	88 23       	and	r24, r24
    15e6:	09 f4       	brne	.+2      	; 0x15ea <ModelledRadValve::computeTargetTemp()+0x48>
    15e8:	9a c0       	rjmp	.+308    	; 0x171e <ModelledRadValve::computeTargetTemp()+0x17c>
    15ea:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <recentUIControlUse()>
    15ee:	88 23       	and	r24, r24
    15f0:	09 f0       	breq	.+2      	; 0x15f4 <ModelledRadValve::computeTargetTemp()+0x52>
    15f2:	95 c0       	rjmp	.+298    	; 0x171e <ModelledRadValve::computeTargetTemp()+0x17c>
      {
      const uint8_t warmTarget = getWARMTargetC();
    15f4:	0e 94 ab 03 	call	0x756	; 0x756 <getWARMTargetC()>
    15f8:	08 2f       	mov	r16, r24
      // Compute putative pre-warm temperature...
      const uint8_t preWarmTempC = fnmax((uint8_t)(warmTarget - (hasEcoBias() ? SETBACK_ECO : SETBACK_DEFAULT)), frostC);
    15fa:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <hasEcoBias()>
    15fe:	88 23       	and	r24, r24
    1600:	11 f4       	brne	.+4      	; 0x1606 <ModelledRadValve::computeTargetTemp()+0x64>
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	01 c0       	rjmp	.+2      	; 0x1608 <ModelledRadValve::computeTargetTemp()+0x66>
    1606:	82 e0       	ldi	r24, 0x02	; 2
    1608:	90 2f       	mov	r25, r16
    160a:	98 1b       	sub	r25, r24
    160c:	89 2f       	mov	r24, r25
template <class T> const T& fnmax(const T& a, const T& b) { return((a<b)?b:a); }
    160e:	91 17       	cp	r25, r17
    1610:	08 f4       	brcc	.+2      	; 0x1614 <ModelledRadValve::computeTargetTemp()+0x72>
    1612:	85 c0       	rjmp	.+266    	; 0x171e <ModelledRadValve::computeTargetTemp()+0x17c>
      if((frostC < preWarmTempC) && (!isEcoTemperature(warmTarget)))
    1614:	19 17       	cp	r17, r25
    1616:	08 f0       	brcs	.+2      	; 0x161a <ModelledRadValve::computeTargetTemp()+0x78>
    1618:	82 c0       	rjmp	.+260    	; 0x171e <ModelledRadValve::computeTargetTemp()+0x17c>
    161a:	08 33       	cpi	r16, 0x38	; 56
    161c:	08 f0       	brcs	.+2      	; 0x1620 <ModelledRadValve::computeTargetTemp()+0x7e>
    161e:	82 c0       	rjmp	.+260    	; 0x1724 <ModelledRadValve::computeTargetTemp()+0x182>
    1620:	7e c0       	rjmp	.+252    	; 0x171e <ModelledRadValve::computeTargetTemp()+0x17c>

#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
    1622:	80 91 6b 02 	lds	r24, 0x026B
    1626:	88 23       	and	r24, r24
    1628:	09 f4       	brne	.+2      	; 0x162c <ModelledRadValve::computeTargetTemp()+0x8a>
    162a:	81 c0       	rjmp	.+258    	; 0x172e <ModelledRadValve::computeTargetTemp()+0x18c>
    }

#ifdef SUPPORT_BAKE
  else if(inBakeMode()) // If in BAKE mode then use elevated target.
    {
    return(fnmin((uint8_t)(getWARMTargetC() + BAKE_UPLIFT), (uint8_t)MAX_TARGET_C)); // No setbacks apply in BAKE mode.
    162c:	0e 94 ab 03 	call	0x756	; 0x756 <getWARMTargetC()>
    1630:	8b 5f       	subi	r24, 0xFB	; 251
    1632:	80 36       	cpi	r24, 0x60	; 96
    1634:	08 f4       	brcc	.+2      	; 0x1638 <ModelledRadValve::computeTargetTemp()+0x96>
    1636:	76 c0       	rjmp	.+236    	; 0x1724 <ModelledRadValve::computeTargetTemp()+0x182>
    1638:	8f e5       	ldi	r24, 0x5F	; 95
    163a:	74 c0       	rjmp	.+232    	; 0x1724 <ModelledRadValve::computeTargetTemp()+0x182>
    163c:	80 91 ef 01 	lds	r24, 0x01EF
    1640:	90 e0       	ldi	r25, 0x00	; 0
    bool longVacant() { return(getVacancyH() > longVacantHThrH); }

    // Returns true if room appears to have been vacant for much longer than longVacant().
    // For a home or an office no sign of activity for this long suggests a long weekend or a holiday for example.
    // Longer than longVacant() but much less than 3 days to try to capture some weekend-absence savings.
    bool longLongVacant() { return(getVacancyH() > longLongVacantHThrH); }
    1642:	ff 24       	eor	r15, r15
    1644:	88 97       	sbiw	r24, 0x28	; 40
    1646:	28 f0       	brcs	.+10     	; 0x1652 <ModelledRadValve::computeTargetTemp()+0xb0>
    1648:	ff 24       	eor	r15, r15
    164a:	f3 94       	inc	r15
    // but should also work in artificially-lit offices (maybe ~12h continuous lighting).
    // No 'lights-on' signal for a whole day is a fairly strong indication that the heat can be turned down.
    // TODO-451: TODO-453: ignore a short lights-off, eg from someone briefly leaving room or a transient shadow.
    // TODO: consider bottom quartile of amblient light as alternative setback trigger for near-continuously-lit spaces (aiming to spot daylight signature).
    const bool longLongVacant = Occupancy.longLongVacant();
    const bool longVacant = longLongVacant || Occupancy.longVacant();
    164c:	01 e0       	ldi	r16, 0x01	; 1
    164e:	11 e0       	ldi	r17, 0x01	; 1
    1650:	2c c0       	rjmp	.+88     	; 0x16aa <ModelledRadValve::computeTargetTemp()+0x108>
    // At other times more relaxed checking (eg lower power) can be used.
    bool increaseCheckForOccupancy() { return(!isLikelyRecentlyOccupied() && isLikelyOccupied() && !reportedRecently()); }

    // Get number of hours room vacant, zero when room occupied; does not wrap.
    // If forced to zero as soon as occupancy is detected.
    uint16_t getVacancyH() { return((value != 0) ? 0 : vacancyH); }
    1652:	80 91 ec 01 	lds	r24, 0x01EC
    1656:	88 23       	and	r24, r24
    1658:	11 f0       	breq	.+4      	; 0x165e <ModelledRadValve::computeTargetTemp()+0xbc>
    165a:	10 e0       	ldi	r17, 0x00	; 0
    165c:	06 c0       	rjmp	.+12     	; 0x166a <ModelledRadValve::computeTargetTemp()+0xc8>
    165e:	10 e0       	ldi	r17, 0x00	; 0
    1660:	80 91 ef 01 	lds	r24, 0x01EF
    1664:	89 31       	cpi	r24, 0x19	; 25
    1666:	08 f0       	brcs	.+2      	; 0x166a <ModelledRadValve::computeTargetTemp()+0xc8>
    1668:	11 e0       	ldi	r17, 0x01	; 1

    // Returns true if the room appears to be likely occupied (with active users) now.
    // Operates on a timeout; calling markAsOccupied() restarts the timer.
    // Defaults to false (and API still exists) when OCCUPANCY_SUPPORT not defined.
    // Thread-safe.
    bool isLikelyOccupied() { return(0 != occupationCountdownM); }
    166a:	80 91 ed 01 	lds	r24, 0x01ED
    const bool notLikelyOccupiedSoon = longLongVacant || (Occupancy.isLikelyUnoccupied() && inOutlierQuartile(false, EE_STATS_SET_OCCPC_BY_HOUR_SMOOTHED));
    166e:	88 23       	and	r24, r24
    1670:	41 f4       	brne	.+16     	; 0x1682 <ModelledRadValve::computeTargetTemp()+0xe0>
    1672:	65 e0       	ldi	r22, 0x05	; 5
    1674:	4f ef       	ldi	r20, 0xFF	; 255
    1676:	0e 94 84 0a 	call	0x1508	; 0x1508 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)>
    167a:	88 23       	and	r24, r24
    167c:	11 f0       	breq	.+4      	; 0x1682 <ModelledRadValve::computeTargetTemp()+0xe0>
    167e:	01 e0       	ldi	r16, 0x01	; 1
    1680:	01 c0       	rjmp	.+2      	; 0x1684 <ModelledRadValve::computeTargetTemp()+0xe2>
    1682:	00 e0       	ldi	r16, 0x00	; 0
    if(longVacant ||
    1684:	11 23       	and	r17, r17
    1686:	89 f4       	brne	.+34     	; 0x16aa <ModelledRadValve::computeTargetTemp()+0x108>
    1688:	00 23       	and	r16, r16
    168a:	29 f4       	brne	.+10     	; 0x1696 <ModelledRadValve::computeTargetTemp()+0xf4>
    168c:	80 91 5f 03 	lds	r24, 0x035F
    1690:	8b 30       	cpi	r24, 0x0B	; 11
    1692:	08 f4       	brcc	.+2      	; 0x1696 <ModelledRadValve::computeTargetTemp()+0xf4>
    1694:	46 c0       	rjmp	.+140    	; 0x1722 <ModelledRadValve::computeTargetTemp()+0x180>
    1696:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <isAnyScheduleOnWARMNow()>
    169a:	88 23       	and	r24, r24
    169c:	09 f0       	breq	.+2      	; 0x16a0 <ModelledRadValve::computeTargetTemp()+0xfe>
    169e:	41 c0       	rjmp	.+130    	; 0x1722 <ModelledRadValve::computeTargetTemp()+0x180>
    16a0:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <recentUIControlUse()>
    16a4:	88 23       	and	r24, r24
    16a6:	09 f0       	breq	.+2      	; 0x16aa <ModelledRadValve::computeTargetTemp()+0x108>
    16a8:	3c c0       	rjmp	.+120    	; 0x1722 <ModelledRadValve::computeTargetTemp()+0x180>
                               (!longLongVacant && AmbLight.isRoomLit()) ||
                               (!longLongVacant && inOutlierQuartile(true, EE_STATS_SET_OCCPC_BY_HOUR_SMOOTHED)) ||
                               (!longVacant && isAnyScheduleOnWARMSoon())) ?
              SETBACK_DEFAULT :
          ((longLongVacant || (notLikelyOccupiedSoon && isEcoTemperature(wt))) ?
              SETBACK_FULL : SETBACK_ECO);
    16aa:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <hasEcoBias()>
    16ae:	88 23       	and	r24, r24
    16b0:	01 f1       	breq	.+64     	; 0x16f2 <ModelledRadValve::computeTargetTemp()+0x150>
    16b2:	80 91 ed 01 	lds	r24, 0x01ED
    16b6:	88 23       	and	r24, r24
    16b8:	e1 f4       	brne	.+56     	; 0x16f2 <ModelledRadValve::computeTargetTemp()+0x150>
    16ba:	ff 20       	and	r15, r15
    16bc:	59 f4       	brne	.+22     	; 0x16d4 <ModelledRadValve::computeTargetTemp()+0x132>
    uint16_t getRaw() { return(rawValue); }

    // Returns true if room is lit enough for someone to be active.
    // False if unknown.
    // Thread-safe and usable within ISRs (Interrupt Service Routines).
    bool isRoomLit() const { return(isRoomLitFlag); }
    16be:	80 91 5e 03 	lds	r24, 0x035E
    16c2:	88 23       	and	r24, r24
    16c4:	b1 f4       	brne	.+44     	; 0x16f2 <ModelledRadValve::computeTargetTemp()+0x150>
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	65 e0       	ldi	r22, 0x05	; 5
    16ca:	4f ef       	ldi	r20, 0xFF	; 255
    16cc:	0e 94 84 0a 	call	0x1508	; 0x1508 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)>
    16d0:	88 23       	and	r24, r24
    16d2:	79 f4       	brne	.+30     	; 0x16f2 <ModelledRadValve::computeTargetTemp()+0x150>
    16d4:	11 23       	and	r17, r17
    16d6:	21 f4       	brne	.+8      	; 0x16e0 <ModelledRadValve::computeTargetTemp()+0x13e>
    16d8:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <isAnyScheduleOnWARMSoon()>
    16dc:	88 23       	and	r24, r24
    16de:	49 f4       	brne	.+18     	; 0x16f2 <ModelledRadValve::computeTargetTemp()+0x150>
    16e0:	ff 20       	and	r15, r15
    16e2:	49 f4       	brne	.+18     	; 0x16f6 <ModelledRadValve::computeTargetTemp()+0x154>
    16e4:	00 23       	and	r16, r16
    16e6:	19 f0       	breq	.+6      	; 0x16ee <ModelledRadValve::computeTargetTemp()+0x14c>
    16e8:	87 e3       	ldi	r24, 0x37	; 55
    16ea:	8e 15       	cp	r24, r14
    16ec:	20 f4       	brcc	.+8      	; 0x16f6 <ModelledRadValve::computeTargetTemp()+0x154>
    16ee:	22 e0       	ldi	r18, 0x02	; 2
    16f0:	03 c0       	rjmp	.+6      	; 0x16f8 <ModelledRadValve::computeTargetTemp()+0x156>
    16f2:	21 e0       	ldi	r18, 0x01	; 1
    16f4:	01 c0       	rjmp	.+2      	; 0x16f8 <ModelledRadValve::computeTargetTemp()+0x156>
    16f6:	23 e0       	ldi	r18, 0x03	; 3
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    16f8:	f9 99       	sbic	0x1f, 1	; 31
    16fa:	fe cf       	rjmp	.-4      	; 0x16f8 <ModelledRadValve::computeTargetTemp()+0x156>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    16fc:	8e e0       	ldi	r24, 0x0E	; 14
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	92 bd       	out	0x22, r25	; 34
    1702:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1704:	f8 9a       	sbi	0x1f, 0	; 31
    1706:	90 b5       	in	r25, 0x20	; 32
uint8_t getFROSTTargetC()
  {
  // Get persisted value, if any.
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_FROST_C);
  // If out of bounds or no stored value then use default.
  if((stored < MIN_TARGET_C) || (stored > MAX_TARGET_C)) { return(FROST); }
    1708:	89 2f       	mov	r24, r25
    170a:	85 50       	subi	r24, 0x05	; 5
    170c:	8b 35       	cpi	r24, 0x5B	; 91
    170e:	08 f0       	brcs	.+2      	; 0x1712 <ModelledRadValve::computeTargetTemp()+0x170>
    1710:	97 e0       	ldi	r25, 0x07	; 7
    1712:	e2 1a       	sub	r14, r18
    1714:	89 2f       	mov	r24, r25
    1716:	9e 15       	cp	r25, r14
    1718:	28 f4       	brcc	.+10     	; 0x1724 <ModelledRadValve::computeTargetTemp()+0x182>
    171a:	8e 2d       	mov	r24, r14
    171c:	03 c0       	rjmp	.+6      	; 0x1724 <ModelledRadValve::computeTargetTemp()+0x182>
    171e:	81 2f       	mov	r24, r17
    1720:	01 c0       	rjmp	.+2      	; 0x1724 <ModelledRadValve::computeTargetTemp()+0x182>
    1722:	8e 2d       	mov	r24, r14
      return(fnmax((uint8_t)(wt - setback), getFROSTTargetC())); // Target must never be set low enough to create a frost/freeze hazard.
      }
    // Else use WARM target as-is.
    return(wt);
    }
  }
    1724:	1f 91       	pop	r17
    1726:	0f 91       	pop	r16
    1728:	ff 90       	pop	r15
    172a:	ef 90       	pop	r14
    172c:	08 95       	ret
    }
#endif

  else // In 'WARM' mode with possible setback.
    {
    const uint8_t wt = getWARMTargetC();
    172e:	0e 94 ab 03 	call	0x756	; 0x756 <getWARMTargetC()>
    1732:	e8 2e       	mov	r14, r24
    // At other times more relaxed checking (eg lower power) can be used.
    bool increaseCheckForOccupancy() { return(!isLikelyRecentlyOccupied() && isLikelyOccupied() && !reportedRecently()); }

    // Get number of hours room vacant, zero when room occupied; does not wrap.
    // If forced to zero as soon as occupancy is detected.
    uint16_t getVacancyH() { return((value != 0) ? 0 : vacancyH); }
    1734:	80 91 ec 01 	lds	r24, 0x01EC
    1738:	88 23       	and	r24, r24
    173a:	09 f4       	brne	.+2      	; 0x173e <ModelledRadValve::computeTargetTemp()+0x19c>
    173c:	7f cf       	rjmp	.-258    	; 0x163c <ModelledRadValve::computeTargetTemp()+0x9a>
    173e:	80 e0       	ldi	r24, 0x00	; 0
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	7f cf       	rjmp	.-258    	; 0x1642 <ModelledRadValve::computeTargetTemp()+0xa0>

00001744 <ModelledRadValve::computeTargetTemperature()>:
  // Leave value position as was...
  return(valvePCOpen);
  }

// Compute/update target temperature and set up state for tick()/computeRequiredTRVPercentOpen().
void ModelledRadValve::computeTargetTemperature()
    1744:	0f 93       	push	r16
    1746:	1f 93       	push	r17
    1748:	cf 93       	push	r28
    174a:	df 93       	push	r29
    174c:	ec 01       	movw	r28, r24
  {
  // Compute basic target temperature.
  const uint8_t newTarget = computeTargetTemp();
    174e:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <ModelledRadValve::computeTargetTemp()>
    1752:	08 2f       	mov	r16, r24

  // Set up state for computeRequiredTRVPercentOpen().
  inputState.targetTempC = newTarget;
    1754:	8b 83       	std	Y+3, r24	; 0x03
  inputState.minPCOpen = getMinPercentOpen();
    1756:	e8 81       	ld	r30, Y
    1758:	f9 81       	ldd	r31, Y+1	; 0x01
    175a:	06 88       	ldd	r0, Z+22	; 0x16
    175c:	f7 89       	ldd	r31, Z+23	; 0x17
    175e:	e0 2d       	mov	r30, r0
    1760:	ce 01       	movw	r24, r28
    1762:	09 95       	icall
    1764:	8c 83       	std	Y+4, r24	; 0x04
  inputState.maxPCOpen = getMaxPercentageOpenAllowed();
    1766:	89 e1       	ldi	r24, 0x19	; 25
    1768:	8d 83       	std	Y+5, r24	; 0x05
  inputState.glacial = glacial;
    176a:	8c a1       	ldd	r24, Y+36	; 0x24
    176c:	8f 83       	std	Y+7, r24	; 0x07

#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
    176e:	10 91 6c 02 	lds	r17, 0x026C
    1772:	11 23       	and	r17, r17
    1774:	11 f4       	brne	.+4      	; 0x177a <ModelledRadValve::computeTargetTemperature()+0x36>
    1776:	80 e0       	ldi	r24, 0x00	; 0
    1778:	04 c0       	rjmp	.+8      	; 0x1782 <ModelledRadValve::computeTargetTemperature()+0x3e>
    177a:	80 91 6b 02 	lds	r24, 0x026B
    177e:	81 11       	cpse	r24, r1
    1780:	81 e0       	ldi	r24, 0x01	; 1
  // Set up state for computeRequiredTRVPercentOpen().
  inputState.targetTempC = newTarget;
  inputState.minPCOpen = getMinPercentOpen();
  inputState.maxPCOpen = getMaxPercentageOpenAllowed();
  inputState.glacial = glacial;
  inputState.inBakeMode = inBakeMode();
    1782:	89 87       	std	Y+9, r24	; 0x09
  inputState.hasEcoBias = hasEcoBias();
    1784:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <hasEcoBias()>
    1788:	88 87       	std	Y+8, r24	; 0x08

    // Returns true if room is light enough for someone to be active.
    // False if unknown.
    // Thread-safe and usable within ISRs (Interrupt Service Routines).
    bool isRoomDark() const { return(!isRoomLitFlag); }
    178a:	80 91 5e 03 	lds	r24, 0x035E
  // Widen the allowed deadband significantly in a dark/quiet/vacant room (TODO-383)
  // (or in FROST mode, or if temperature is jittery eg changing fast and filtering has been engaged)
  // to attempt to reduce the total number and size of adjustments and thus reduce noise/disturbance (and battery drain).
  // The wider deadband (less good temperature regulation) might be noticeable/annoying to sensitive occupants.
  // FIXME: With a wider deadband may also simply suppress any movement/noise on some/most minutes while close to target temperature.
  inputState.widenDeadband = AmbLight.isRoomDark() || Occupancy.longVacant() || (!inWarmMode()) || retainedState.isFiltering;
    178e:	88 23       	and	r24, r24
    1790:	61 f0       	breq	.+24     	; 0x17aa <ModelledRadValve::computeTargetTemperature()+0x66>
    1792:	80 91 ec 01 	lds	r24, 0x01EC
    1796:	88 23       	and	r24, r24
    1798:	21 f4       	brne	.+8      	; 0x17a2 <ModelledRadValve::computeTargetTemperature()+0x5e>
    179a:	80 91 ef 01 	lds	r24, 0x01EF
    179e:	89 31       	cpi	r24, 0x19	; 25
    17a0:	20 f4       	brcc	.+8      	; 0x17aa <ModelledRadValve::computeTargetTemperature()+0x66>
    17a2:	11 23       	and	r17, r17
    17a4:	11 f0       	breq	.+4      	; 0x17aa <ModelledRadValve::computeTargetTemperature()+0x66>
    17a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    17a8:	01 c0       	rjmp	.+2      	; 0x17ac <ModelledRadValve::computeTargetTemperature()+0x68>
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	8e 83       	std	Y+6, r24	; 0x06
// ie to the middle of the specified degree, which is more intuitive,
// and which may save a little energy if users target the specified temperatures.
// Suggestion c/o GG ~2014/10 code, and generally less misleading anyway!
void ModelledRadValveInputState::setReferenceTemperatures(const int currentTempC16)
  {
  const int referenceTempC16 = currentTempC16 + refTempOffsetC16; // TODO-386: push targeted temperature down by 0.5C to middle of degree.
    17ae:	80 91 62 03 	lds	r24, 0x0362
    17b2:	90 91 63 03 	lds	r25, 0x0363
    17b6:	08 96       	adiw	r24, 0x08	; 8
  refTempC16 = referenceTempC16;
    17b8:	9b 87       	std	Y+11, r25	; 0x0b
    17ba:	8a 87       	std	Y+10, r24	; 0x0a
  // FIXME: With a wider deadband may also simply suppress any movement/noise on some/most minutes while close to target temperature.
  inputState.widenDeadband = AmbLight.isRoomDark() || Occupancy.longVacant() || (!inWarmMode()) || retainedState.isFiltering;
  // Capture adjusted reference/room temperatures
  // and set callingForHeat flag also using same outline logic as computeRequiredTRVPercentOpen() will use.
  inputState.setReferenceTemperatures(TemperatureC16.get());
  callingForHeat = (newTarget >= (inputState.refTempC16 >> 4));
    17bc:	40 e0       	ldi	r20, 0x00	; 0
    17be:	20 2f       	mov	r18, r16
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	54 e0       	ldi	r21, 0x04	; 4
    17c4:	95 95       	asr	r25
    17c6:	87 95       	ror	r24
    17c8:	5a 95       	dec	r21
    17ca:	e1 f7       	brne	.-8      	; 0x17c4 <ModelledRadValve::computeTargetTemperature()+0x80>
    17cc:	28 17       	cp	r18, r24
    17ce:	39 07       	cpc	r19, r25
    17d0:	0c f0       	brlt	.+2      	; 0x17d4 <ModelledRadValve::computeTargetTemperature()+0x90>
    17d2:	41 e0       	ldi	r20, 0x01	; 1
    17d4:	4b a3       	std	Y+35, r20	; 0x23
  }
    17d6:	df 91       	pop	r29
    17d8:	cf 91       	pop	r28
    17da:	1f 91       	pop	r17
    17dc:	0f 91       	pop	r16
    17de:	08 95       	ret

000017e0 <ModelledRadValve::computeCallForHeat()>:
// The inputs must be valid (and recent).
// Values set are targetTempC, value (TRVPercentOpen).
// This may also prepare data such as TX command sequences for the TRV, boiler, etc.
// This routine may take significant CPU time; no I/O is done, only internal state is updated.
// Returns true if valve target changed and thus messages may need to be recomputed/sent/etc.
void ModelledRadValve::computeCallForHeat()
    17e0:	cf 93       	push	r28
    17e2:	df 93       	push	r29
    17e4:	ec 01       	movw	r28, r24
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    17e6:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    17e8:	f8 94       	cli
    {
#ifdef SUPPORT_BAKE
    // Cancel any BAKE mode once temperature target has been hit.
    if(!callingForHeat) { bakeCountdownM = 0; }
    17ea:	8b a1       	ldd	r24, Y+35	; 0x23
    17ec:	88 23       	and	r24, r24
    17ee:	19 f4       	brne	.+6      	; 0x17f6 <ModelledRadValve::computeCallForHeat()+0x16>
    17f0:	10 92 6b 02 	sts	0x026B, r1
    17f4:	07 c0       	rjmp	.+14     	; 0x1804 <ModelledRadValve::computeCallForHeat()+0x24>
    // Run down BAKE mode timer if need be, one tick per minute.
    else if(bakeCountdownM > 0) { --bakeCountdownM; }
    17f6:	80 91 6b 02 	lds	r24, 0x026B
    17fa:	88 23       	and	r24, r24
    17fc:	19 f0       	breq	.+6      	; 0x1804 <ModelledRadValve::computeCallForHeat()+0x24>
    17fe:	81 50       	subi	r24, 0x01	; 1
    1800:	80 93 6b 02 	sts	0x026B, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1804:	9f bf       	out	0x3f, r25	; 63
#endif
    }

  // Compute target and ensure that required input state is set for computeRequiredTRVPercentOpen().
  computeTargetTemperature();
    1806:	ce 01       	movw	r24, r28
    1808:	0e 94 a2 0b 	call	0x1744	; 0x1744 <ModelledRadValve::computeTargetTemperature()>
  retainedState.tick(value, inputState);
    180c:	ae 01       	movw	r20, r28
    180e:	4d 5f       	subi	r20, 0xFD	; 253
    1810:	5f 4f       	sbci	r21, 0xFF	; 255
    1812:	ce 01       	movw	r24, r28
    1814:	0c 96       	adiw	r24, 0x0c	; 12
    1816:	22 96       	adiw	r28, 0x02	; 2
    1818:	be 01       	movw	r22, r28
    181a:	0e 94 92 05 	call	0xb24	; 0xb24 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)>
  }
    181e:	df 91       	pop	r29
    1820:	cf 91       	pop	r28
    1822:	08 95       	ret

00001824 <ModelledRadValve::read()>:

    // Force a read/poll/recomputation of the target position and call for heat.
    // Sets/clears changed flag if computed valve position changed.
    // Call at a fixed rate (1/60s).
    // Potentially expensive/slow.
    virtual uint8_t read() { computeCallForHeat(); return(value); }
    1824:	0f 93       	push	r16
    1826:	1f 93       	push	r17
    1828:	8c 01       	movw	r16, r24
    182a:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <ModelledRadValve::computeCallForHeat()>
    182e:	f8 01       	movw	r30, r16
    1830:	82 81       	ldd	r24, Z+2	; 0x02
    1832:	1f 91       	pop	r17
    1834:	0f 91       	pop	r16
    1836:	08 95       	ret

00001838 <ModelledRadValve::isRecalibrating() const>:
// The target valve position is not lost while this is true.
// By default there is no recalibration step.
bool ModelledRadValve::isRecalibrating() const
  {
#ifdef USE_MODULE_FHT8VSIMPLE
  if(!isSyncedWithFHT8V()) { return(true); }
    1838:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <isSyncedWithFHT8V()>
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	88 23       	and	r24, r24
    1840:	09 f4       	brne	.+2      	; 0x1844 <ModelledRadValve::isRecalibrating() const+0xc>
    1842:	91 e0       	ldi	r25, 0x01	; 1
#endif
  return(false);
  }
    1844:	89 2f       	mov	r24, r25
    1846:	08 95       	ret

00001848 <ModelledRadValve::isControlledValveReallyOpen() const>:
// True if the controlled physical valve is thought to be at least partially open right now.
// If multiple valves are controlled then is this true only if all are at least partially open.
// Used to help avoid running boiler pump against closed valves.
// The default is to use the check the current computed position
// against the minimum open percentage.
bool ModelledRadValve::isControlledValveReallyOpen() const
    1848:	1f 93       	push	r17
    184a:	cf 93       	push	r28
    184c:	df 93       	push	r29
    184e:	ec 01       	movw	r28, r24
  {
  if(isRecalibrating()) { return(false); }
    1850:	e8 81       	ld	r30, Y
    1852:	f9 81       	ldd	r31, Y+1	; 0x01
    1854:	00 8c       	ldd	r0, Z+24	; 0x18
    1856:	f1 8d       	ldd	r31, Z+25	; 0x19
    1858:	e0 2d       	mov	r30, r0
    185a:	09 95       	icall
    185c:	88 23       	and	r24, r24
    185e:	89 f4       	brne	.+34     	; 0x1882 <ModelledRadValve::isControlledValveReallyOpen() const+0x3a>
#ifdef USE_MODULE_FHT8VSIMPLE
  if(!FHT8VisControlledValveOpen()) { return(false); }
    1860:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <FHT8VisControlledValveOpen()>
    1864:	88 23       	and	r24, r24
    1866:	69 f0       	breq	.+26     	; 0x1882 <ModelledRadValve::isControlledValveReallyOpen() const+0x3a>
#endif
  return(value >= getMinPercentOpen());
    1868:	1a 81       	ldd	r17, Y+2	; 0x02
    186a:	e8 81       	ld	r30, Y
    186c:	f9 81       	ldd	r31, Y+1	; 0x01
    186e:	06 88       	ldd	r0, Z+22	; 0x16
    1870:	f7 89       	ldd	r31, Z+23	; 0x17
    1872:	e0 2d       	mov	r30, r0
    1874:	ce 01       	movw	r24, r28
    1876:	09 95       	icall
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	18 17       	cp	r17, r24
    187c:	18 f0       	brcs	.+6      	; 0x1884 <ModelledRadValve::isControlledValveReallyOpen() const+0x3c>
    187e:	91 e0       	ldi	r25, 0x01	; 1
    1880:	01 c0       	rjmp	.+2      	; 0x1884 <ModelledRadValve::isControlledValveReallyOpen() const+0x3c>
    1882:	90 e0       	ldi	r25, 0x00	; 0
  }
    1884:	89 2f       	mov	r24, r25
    1886:	df 91       	pop	r29
    1888:	cf 91       	pop	r28
    188a:	1f 91       	pop	r17
    188c:	08 95       	ret

0000188e <loopOpenTRV()>:



// Main loop for OpenTRV radiator control.
// Note: exiting and re-entering can take a little while, handling Arduino background tasks such as serial.
void loopOpenTRV()
    188e:	bf 92       	push	r11
    1890:	cf 92       	push	r12
    1892:	df 92       	push	r13
    1894:	ef 92       	push	r14
    1896:	ff 92       	push	r15
    1898:	0f 93       	push	r16
    189a:	1f 93       	push	r17

  // Set up some variables before sleeping to minimise delay/jitter after the RTC tick.
  bool showStatus = false; // Show status at end of loop?

  // Use the zeroth second in each minute to force extra deep device sleeps/resets, etc.
  const bool second0 = (0 == TIME_LSD);
    189c:	00 91 17 02 	lds	r16, 0x0217
  // Sensor readings are taken late in each minute (where they are taken)
  // and if possible noise and heat and light should be minimised in this part of each minute to improve readings.
//  const bool sensorReading30s = (TIME_LSD >= 30);
  // Sensor readings and (stats transmissions) are nominally on a 4-minute cycle.
  const uint8_t minuteFrom4 = (minuteCount & 3);
    18a0:	80 91 18 02 	lds	r24, 0x0218
    18a4:	83 70       	andi	r24, 0x03	; 3
  // The 0th minute in each group of four is always used for measuring where possible (possibly amongst others)
  // and where possible locally-generated noise and heat and light should be minimised in this minute to give the best possible readings.
  // This is the first (0th) minute in each group of four.
  const bool minute0From4ForSensors = (0 == minuteFrom4);
    18a6:	ee 24       	eor	r14, r14
    18a8:	88 23       	and	r24, r24
    18aa:	11 f4       	brne	.+4      	; 0x18b0 <loopOpenTRV()+0x22>
    18ac:	ee 24       	eor	r14, r14
    18ae:	e3 94       	inc	r14
  // True the minute after all sensors should have been sampled.
  const bool minute1From4AfterSensors = (1 == minuteFrom4);
    18b0:	cc 24       	eor	r12, r12
    18b2:	81 30       	cpi	r24, 0x01	; 1
    18b4:	11 f4       	brne	.+4      	; 0x18ba <loopOpenTRV()+0x2c>
    18b6:	cc 24       	eor	r12, r12
    18b8:	c3 94       	inc	r12
    // Get internal bandgap (1.1V nominal, 1.0--1.2V) as fraction of Vcc.
    uint16_t getRawInv() const { return(rawInv); }

    // Returns true if the supply voltage is low/marginal.
    // This depends on the AVR and other hardware components (eg sensors) in use.
    bool isSupplyVoltageLow() const { return(isLow); }
    18ba:	f0 90 f5 02 	lds	r15, 0x02F5
    (batteryLow || !inWarmMode() || Occupancy.longVacant()) &&
#if defined(ENABLE_BOILER_HUB)
    (0 == boilerCountdownTicks) && // Unless the boiler is off, stay responsive.
#endif
    (!NominalRadValve.isControlledValveReallyOpen()) &&  // Run at full speed until valve(s) should actually have shut and the boiler gone off.
    (!NominalRadValve.isCallingForHeat()); // Run at full speed until not nominally demanding heat, eg even during FROST mode or pre-heating.
    18be:	ff 20       	and	r15, r15
    18c0:	61 f4       	brne	.+24     	; 0x18da <loopOpenTRV()+0x4c>
    18c2:	80 91 6c 02 	lds	r24, 0x026C
    18c6:	88 23       	and	r24, r24
    18c8:	41 f0       	breq	.+16     	; 0x18da <loopOpenTRV()+0x4c>
    // At other times more relaxed checking (eg lower power) can be used.
    bool increaseCheckForOccupancy() { return(!isLikelyRecentlyOccupied() && isLikelyOccupied() && !reportedRecently()); }

    // Get number of hours room vacant, zero when room occupied; does not wrap.
    // If forced to zero as soon as occupancy is detected.
    uint16_t getVacancyH() { return((value != 0) ? 0 : vacancyH); }
    18ca:	80 91 ec 01 	lds	r24, 0x01EC
    18ce:	88 23       	and	r24, r24
    18d0:	81 f4       	brne	.+32     	; 0x18f2 <loopOpenTRV()+0x64>
    18d2:	80 91 ef 01 	lds	r24, 0x01EF
    18d6:	89 31       	cpi	r24, 0x19	; 25
    18d8:	60 f0       	brcs	.+24     	; 0x18f2 <loopOpenTRV()+0x64>
    18da:	81 ef       	ldi	r24, 0xF1	; 241
    18dc:	91 e0       	ldi	r25, 0x01	; 1
    18de:	0e 94 24 0c 	call	0x1848	; 0x1848 <ModelledRadValve::isControlledValveReallyOpen() const>
    18e2:	88 23       	and	r24, r24
    18e4:	31 f4       	brne	.+12     	; 0x18f2 <loopOpenTRV()+0x64>
    // Can be used to trigger rebuild of messages, force updates to actuators, etc.
    bool isValveMoved() const { return(retainedState.valveMoved); }

    // True if this unit is nominally calling for heat (temperature is under target).
    // Thread-safe and ISR safe.
    bool isCallingForHeat() const { return(callingForHeat); }
    18e6:	80 91 14 02 	lds	r24, 0x0214
    18ea:	88 23       	and	r24, r24
    18ec:	11 f4       	brne	.+4      	; 0x18f2 <loopOpenTRV()+0x64>
    18ee:	11 e0       	ldi	r17, 0x01	; 1
    18f0:	01 c0       	rjmp	.+2      	; 0x18f4 <loopOpenTRV()+0x66>
    18f2:	10 e0       	ldi	r17, 0x00	; 0
  // Set BOILER_OUT as appropriate for local and/or remote calls for heat.
  // FIXME: local valve-driven boiler on does not obey normal on/off run-time rules.
#if defined(ENABLE_BOILER_HUB)
  fastDigitalWrite(OUT_HEATCALL, ((hubModeBoilerOn || NominalRadValve.isControlledValveReallyOpen()) ? HIGH : LOW));
#else
  fastDigitalWrite(OUT_HEATCALL, NominalRadValve.isControlledValveReallyOpen() ? HIGH : LOW);
    18f4:	81 ef       	ldi	r24, 0xF1	; 241
    18f6:	91 e0       	ldi	r25, 0x01	; 1
    18f8:	0e 94 24 0c 	call	0x1848	; 0x1848 <ModelledRadValve::isControlledValveReallyOpen() const>
    18fc:	68 2f       	mov	r22, r24
    18fe:	86 e0       	ldi	r24, 0x06	; 6
    1900:	0e 94 13 30 	call	0x6026	; 0x6026 <digitalWrite>
  // DHD20130425: waking up from sleep and getting to start processing below this block may take >10ms.
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("*E"); // End-of-cycle sleep.
#endif
  // Ensure that serial I/O is off.
  powerDownSerial();
    1904:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <powerDownSerial()>
  // Power down most stuff (except radio for hub RX).
  minimisePowerWithoutSleep();
    1908:	0e 94 76 19 	call	0x32ec	; 0x32ec <minimisePowerWithoutSleep()>
    190c:	08 c0       	rjmp	.+16     	; 0x191e <loopOpenTRV()+0x90>
    // Poll for RX of remote calls-for-heat if needed.
    if(needsToEavesdrop) { nap30AndPoll(); continue; }
#endif
#if defined(USE_MODULE_RFM22RADIOSIMPLE) // Force radio to power-saving standby state if appropriate.
    // Force radio to known-low-power state from time to time (not every time to avoid unnecessary SPI work, LED flicker, etc.)
    if(batteryLow || second0) { RFM22ModeStandbyAndClearState(); }
    190e:	ff 20       	and	r15, r15
    1910:	11 f4       	brne	.+4      	; 0x1916 <loopOpenTRV()+0x88>
    1912:	00 23       	and	r16, r16
    1914:	11 f4       	brne	.+4      	; 0x191a <loopOpenTRV()+0x8c>
    1916:	0e 94 cd 1b 	call	0x379a	; 0x379a <RFM22ModeStandbyAndClearState()>
#endif
    sleepUntilInt(); // Normal long minimal-power sleep until wake-up interrupt.
    191a:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <sleepPwrSaveWithBODDisabled()>
  // Ensure that serial I/O is off.
  powerDownSerial();
  // Power down most stuff (except radio for hub RX).
  minimisePowerWithoutSleep();
  uint_fast8_t newTLSD;
  while(TIME_LSD == (newTLSD = getSecondsLT()))
    191e:	90 91 fd 02 	lds	r25, 0x02FD
    1922:	80 91 17 02 	lds	r24, 0x0217
    1926:	89 17       	cp	r24, r25
    1928:	91 f3       	breq	.-28     	; 0x190e <loopOpenTRV()+0x80>
    // Force radio to known-low-power state from time to time (not every time to avoid unnecessary SPI work, LED flicker, etc.)
    if(batteryLow || second0) { RFM22ModeStandbyAndClearState(); }
#endif
    sleepUntilInt(); // Normal long minimal-power sleep until wake-up interrupt.
    }
  TIME_LSD = newTLSD;
    192a:	90 93 17 02 	sts	0x0217, r25
  // Try for double TX for more robust conversation with valve unless:
  //   * battery is low
  //   * the valve is not required to be wide open (ie a reasonable temperature is currently being maintained).
  //   * this is a hub and has to listen as much as possible
  // to conserve battery and bandwidth.
  const bool doubleTXForFTH8V = !conserveBattery && !hubMode && (NominalRadValve.get() >= 50);
    192e:	11 23       	and	r17, r17
    1930:	11 f0       	breq	.+4      	; 0x1936 <loopOpenTRV()+0xa8>
    1932:	dd 24       	eor	r13, r13
    1934:	07 c0       	rjmp	.+14     	; 0x1944 <loopOpenTRV()+0xb6>
  public:
    // Return last value fetched by read(); undefined before first read().
    // Usually fast.
    // Often likely to be thread-safe or usable within ISRs (Interrupt Service Routines),
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual uint8_t get() const { return(value); }
    1936:	80 91 f3 01 	lds	r24, 0x01F3
    193a:	dd 24       	eor	r13, r13
    193c:	82 33       	cpi	r24, 0x32	; 50
    193e:	10 f0       	brcs	.+4      	; 0x1944 <loopOpenTRV()+0xb6>
    1940:	dd 24       	eor	r13, r13
    1942:	d3 94       	inc	r13
  // FHT8V is highest priority and runs first.
  // ---------- HALF SECOND #0 -----------
  bool useExtraFHT8VTXSlots = localFHT8VTRVEnabled() && FHT8VPollSyncAndTX_First(doubleTXForFTH8V); // Time for extra TX before UI.
    1944:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <localFHT8VTRVEnabled()>
    1948:	88 23       	and	r24, r24
    194a:	39 f0       	breq	.+14     	; 0x195a <loopOpenTRV()+0xcc>
    194c:	8d 2d       	mov	r24, r13
    194e:	0e 94 27 11 	call	0x224e	; 0x224e <FHT8VPollSyncAndTX_First(bool)>
    1952:	88 23       	and	r24, r24
    1954:	11 f0       	breq	.+4      	; 0x195a <loopOpenTRV()+0xcc>
    1956:	01 e0       	ldi	r16, 0x01	; 1
    1958:	01 c0       	rjmp	.+2      	; 0x195c <loopOpenTRV()+0xce>
    195a:	00 e0       	ldi	r16, 0x00	; 0
  bool recompute = false; // Set true an extra recompute of target temperature should be done.
#if !defined(TWO_S_TICK_RTC_SUPPORT)
  if(0 == (TIME_LSD & 1))
#endif
    {
    if(tickUI(TIME_LSD))
    195c:	80 91 17 02 	lds	r24, 0x0217
    1960:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <tickUI(unsigned char)>
    1964:	88 23       	and	r24, r24
    1966:	19 f0       	breq	.+6      	; 0x196e <loopOpenTRV()+0xe0>
    1968:	bb 24       	eor	r11, r11
    196a:	b3 94       	inc	r11
    196c:	07 c0       	rjmp	.+14     	; 0x197c <loopOpenTRV()+0xee>
      showStatus = true;
      recompute = true;
      }
    }

  if(recompute || veryRecentUIControlUse())
    196e:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <veryRecentUIControlUse()>
    1972:	88 23       	and	r24, r24
    1974:	11 f4       	brne	.+4      	; 0x197a <loopOpenTRV()+0xec>
    1976:	bb 24       	eor	r11, r11
    1978:	05 c0       	rjmp	.+10     	; 0x1984 <loopOpenTRV()+0xf6>
    197a:	bb 24       	eor	r11, r11
    {
    // Force immediate recompute of target temperature for (UI) responsiveness.
    NominalRadValve.computeTargetTemperature();
    197c:	81 ef       	ldi	r24, 0xF1	; 241
    197e:	91 e0       	ldi	r25, 0x01	; 1
    1980:	0e 94 a2 0b 	call	0x1744	; 0x1744 <ModelledRadValve::computeTargetTemperature()>
    }


#if defined(USE_MODULE_FHT8VSIMPLE)
  if(useExtraFHT8VTXSlots)
    1984:	00 23       	and	r16, r16
    1986:	51 f0       	breq	.+20     	; 0x199c <loopOpenTRV()+0x10e>
    {
    // Time for extra TX before other actions, but don't bother if minimising power in frost mode.
    // ---------- HALF SECOND #1 -----------
    useExtraFHT8VTXSlots = localFHT8VTRVEnabled() && FHT8VPollSyncAndTX_Next(doubleTXForFTH8V); 
    1988:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <localFHT8VTRVEnabled()>
    198c:	88 23       	and	r24, r24
    198e:	29 f0       	breq	.+10     	; 0x199a <loopOpenTRV()+0x10c>
    1990:	8d 2d       	mov	r24, r13
    1992:	0e 94 ef 10 	call	0x21de	; 0x21de <FHT8VPollSyncAndTX_Next(bool)>
    1996:	88 23       	and	r24, r24
    1998:	09 f4       	brne	.+2      	; 0x199c <loopOpenTRV()+0x10e>
    199a:	00 e0       	ldi	r16, 0x00	; 0
  // Once-per-minute tasks: all must take << 0.3s.
  // Run tasks spread throughout the minute to be as kind to batteries (etc) as possible.
  // Only when runAll is true run less-critical tasks that be skipped sometimes when particularly conserving energy.
  // TODO: coordinate temperature reading with time when radio and other heat-generating items are off for more accurate readings.
  // TODO: ensure only take ambient light reading at times when all LEDs are off.
  const bool runAll = (!conserveBattery) || minute0From4ForSensors;
    199c:	11 23       	and	r17, r17
    199e:	11 f0       	breq	.+4      	; 0x19a4 <loopOpenTRV()+0x116>
    19a0:	1e 2d       	mov	r17, r14
    19a2:	01 c0       	rjmp	.+2      	; 0x19a6 <loopOpenTRV()+0x118>
    19a4:	11 e0       	ldi	r17, 0x01	; 1

  switch(TIME_LSD) // With TWO_S_TICK_RTC_SUPPORT only even seconds are available.
    19a6:	80 91 17 02 	lds	r24, 0x0217
    19aa:	8a 30       	cpi	r24, 0x0A	; 10
    19ac:	09 f4       	brne	.+2      	; 0x19b0 <loopOpenTRV()+0x122>
    19ae:	3f c0       	rjmp	.+126    	; 0x1a2e <loopOpenTRV()+0x1a0>
    19b0:	8b 30       	cpi	r24, 0x0B	; 11
    19b2:	38 f4       	brcc	.+14     	; 0x19c2 <loopOpenTRV()+0x134>
    19b4:	82 30       	cpi	r24, 0x02	; 2
    19b6:	f9 f0       	breq	.+62     	; 0x19f6 <loopOpenTRV()+0x168>
    19b8:	84 30       	cpi	r24, 0x04	; 4
    19ba:	89 f1       	breq	.+98     	; 0x1a1e <loopOpenTRV()+0x190>
    19bc:	88 23       	and	r24, r24
    19be:	89 f0       	breq	.+34     	; 0x19e2 <loopOpenTRV()+0x154>
    19c0:	b7 c0       	rjmp	.+366    	; 0x1b30 <loopOpenTRV()+0x2a2>
    19c2:	86 33       	cpi	r24, 0x36	; 54
    19c4:	09 f4       	brne	.+2      	; 0x19c8 <loopOpenTRV()+0x13a>
    19c6:	7d c0       	rjmp	.+250    	; 0x1ac2 <loopOpenTRV()+0x234>
    19c8:	87 33       	cpi	r24, 0x37	; 55
    19ca:	20 f4       	brcc	.+8      	; 0x19d4 <loopOpenTRV()+0x146>
    19cc:	84 33       	cpi	r24, 0x34	; 52
    19ce:	09 f0       	breq	.+2      	; 0x19d2 <loopOpenTRV()+0x144>
    19d0:	af c0       	rjmp	.+350    	; 0x1b30 <loopOpenTRV()+0x2a2>
    19d2:	72 c0       	rjmp	.+228    	; 0x1ab8 <loopOpenTRV()+0x22a>
    19d4:	88 33       	cpi	r24, 0x38	; 56
    19d6:	09 f4       	brne	.+2      	; 0x19da <loopOpenTRV()+0x14c>
    19d8:	79 c0       	rjmp	.+242    	; 0x1acc <loopOpenTRV()+0x23e>
    19da:	8a 33       	cpi	r24, 0x3A	; 58
    19dc:	09 f0       	breq	.+2      	; 0x19e0 <loopOpenTRV()+0x152>
    19de:	a8 c0       	rjmp	.+336    	; 0x1b30 <loopOpenTRV()+0x2a2>
    19e0:	94 c0       	rjmp	.+296    	; 0x1b0a <loopOpenTRV()+0x27c>
    {
    case 0:
      {
      // Tasks that must be run every minute.
      ++minuteCount;
    19e2:	80 91 18 02 	lds	r24, 0x0218
    19e6:	8f 5f       	subi	r24, 0xFF	; 255
    19e8:	80 93 18 02 	sts	0x0218, r24
      checkUserSchedule(); // Force to user's programmed settings, if any, at the correct time.
    19ec:	0e 94 bd 20 	call	0x417a	; 0x417a <checkUserSchedule()>
      // Ensure that the RTC has been persisted promptly when necessary.
      persistRTC();
    19f0:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <persistRTC()>
    19f4:	9d c0       	rjmp	.+314    	; 0x1b30 <loopOpenTRV()+0x2a2>
      break;
      }

    // Churn/reseed PRNG(s) a little to improve unpredictability in use: should be lightweight.
    case 2: { if(runAll) { seedRNG8(minuteCount ^ cycleCountCPU() ^ (uint8_t)Supply_mV.get(), _getSubCycleTime() ^ (uint8_t)AmbLight.get(), (uint8_t)TemperatureC16.get()); } break; }
    19f6:	11 23       	and	r17, r17
    19f8:	09 f4       	brne	.+2      	; 0x19fc <loopOpenTRV()+0x16e>
    19fa:	9a c0       	rjmp	.+308    	; 0x1b30 <loopOpenTRV()+0x2a2>
    19fc:	86 b5       	in	r24, 0x26	; 38
    19fe:	20 91 b2 00 	lds	r18, 0x00B2
    1a02:	60 91 5b 03 	lds	r22, 0x035B
    1a06:	90 91 18 02 	lds	r25, 0x0218
    1a0a:	89 27       	eor	r24, r25
    1a0c:	90 91 f3 02 	lds	r25, 0x02F3
    1a10:	62 27       	eor	r22, r18
    1a12:	89 27       	eor	r24, r25
    1a14:	40 91 62 03 	lds	r20, 0x0362
    1a18:	0e 94 22 1b 	call	0x3644	; 0x3644 <seedRNG8(unsigned char, unsigned char, unsigned char)>
    1a1c:	89 c0       	rjmp	.+274    	; 0x1b30 <loopOpenTRV()+0x2a2>
    // Force read of supply/battery voltage; measure and recompute status (etc) less often when already thought to be low, eg when conserving.
    case 4: { if(runAll) { Supply_mV.read(); } break; }
    1a1e:	11 23       	and	r17, r17
    1a20:	09 f4       	brne	.+2      	; 0x1a24 <loopOpenTRV()+0x196>
    1a22:	86 c0       	rjmp	.+268    	; 0x1b30 <loopOpenTRV()+0x2a2>
    1a24:	8f ee       	ldi	r24, 0xEF	; 239
    1a26:	92 e0       	ldi	r25, 0x02	; 2
    1a28:	0e 94 3d 18 	call	0x307a	; 0x307a <SupplyVoltageMilliVolts::read()>
    1a2c:	81 c0       	rjmp	.+258    	; 0x1b30 <loopOpenTRV()+0x2a2>

    // Regular transmission of stats if NOT driving a local valve (else stats can be piggybacked onto that).
    case 10:
      {
      if(!enableTrailingStatsPayload()) { break; } // Not allowed to send stuff like this.
    1a2e:	0e 94 53 11 	call	0x22a6	; 0x22a6 <enableTrailingStatsPayload()>
    1a32:	88 23       	and	r24, r24
    1a34:	09 f4       	brne	.+2      	; 0x1a38 <loopOpenTRV()+0x1aa>
    1a36:	7c c0       	rjmp	.+248    	; 0x1b30 <loopOpenTRV()+0x2a2>
#if defined(USE_MODULE_FHT8VSIMPLE)
      // Avoid transmit conflict with FS20; just drop the slot.
      // We should possibly choose between this and piggybacking stats to avoid busting duty-cycle rules.
      if(localFHT8VTRVEnabled() && useExtraFHT8VTXSlots) { break; }
    1a38:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <localFHT8VTRVEnabled()>
    1a3c:	88 23       	and	r24, r24
    1a3e:	09 f4       	brne	.+2      	; 0x1a42 <loopOpenTRV()+0x1b4>
    1a40:	c0 c0       	rjmp	.+384    	; 0x1bc2 <loopOpenTRV()+0x334>
    1a42:	00 23       	and	r16, r16
    1a44:	09 f4       	brne	.+2      	; 0x1a48 <loopOpenTRV()+0x1ba>
    1a46:	bd c0       	rjmp	.+378    	; 0x1bc2 <loopOpenTRV()+0x334>
    1a48:	75 c0       	rjmp	.+234    	; 0x1b34 <loopOpenTRV()+0x2a6>
#endif

      // Generally only attempt stats TX in the minute after all sensors should have been polled (so that readings are fresh).
      if(minute1From4AfterSensors ||
    1a4a:	ff 20       	and	r15, r15
    1a4c:	09 f0       	breq	.+2      	; 0x1a50 <loopOpenTRV()+0x1c2>
    1a4e:	70 c0       	rjmp	.+224    	; 0x1b30 <loopOpenTRV()+0x2a2>
    1a50:	0e 94 3d 1b 	call	0x367a	; 0x367a <randRNG8()>
    1a54:	84 72       	andi	r24, 0x24	; 36
    1a56:	09 f0       	breq	.+2      	; 0x1a5a <loopOpenTRV()+0x1cc>
    1a58:	6b c0       	rjmp	.+214    	; 0x1b30 <loopOpenTRV()+0x2a2>
        (!batteryLow && (0 == (0x24 & randRNG8())))) // Occasional additional TX when not conserving power.
        {
        pollIO(); // Deal with any pending I/O.
        // Sleep randomly up to 128ms to spread transmissions and thus help avoid collisions.
        sleepLowPowerLessThanMs(1 + (randRNG8() & 0x7f));
    1a5a:	0e 94 3d 1b 	call	0x367a	; 0x367a <randRNG8()>
// Should be good for values up to at least 1000, ie 1 second.
// Uses formulation likely to be quicker than sleepLowPowerMs() for non-constant argument values,
// and that results in a somewhat shorter sleep than sleepLowPowerMs(ms).
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerLessThanMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed(((MIN_CPU_HZ/4000) * (ms)) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	8f 77       	andi	r24, 0x7F	; 127
    1a62:	90 70       	andi	r25, 0x00	; 0
    1a64:	01 96       	adiw	r24, 0x01	; 1
    1a66:	a0 e0       	ldi	r26, 0x00	; 0
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	9c 01       	movw	r18, r24
    1a6c:	ad 01       	movw	r20, r26
    1a6e:	63 e0       	ldi	r22, 0x03	; 3
    1a70:	22 0f       	add	r18, r18
    1a72:	33 1f       	adc	r19, r19
    1a74:	44 1f       	adc	r20, r20
    1a76:	55 1f       	adc	r21, r21
    1a78:	6a 95       	dec	r22
    1a7a:	d1 f7       	brne	.-12     	; 0x1a70 <loopOpenTRV()+0x1e2>
    1a7c:	28 1b       	sub	r18, r24
    1a7e:	39 0b       	sbc	r19, r25
    1a80:	4a 0b       	sbc	r20, r26
    1a82:	5b 0b       	sbc	r21, r27
    1a84:	22 50       	subi	r18, 0x02	; 2
    1a86:	30 40       	sbci	r19, 0x00	; 0
    1a88:	c9 01       	movw	r24, r18
    1a8a:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
        //   * battery is low
        //   * this node is a hub so needs to listen as much as possible
        // This doesn't generally/always need to send binary/both formats
        // if this is controlling a local FHT8V on which the binary stats can be piggybacked.
        // Ie, if doesn't have a local TRV then it must send binary some of the time.
        const bool doBinary = !localFHT8VTRVEnabled() && randRNG8NextBoolean();
    1a8e:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <localFHT8VTRVEnabled()>
    1a92:	88 23       	and	r24, r24
    1a94:	31 f4       	brne	.+12     	; 0x1aa2 <loopOpenTRV()+0x214>
void resetRNG8();
#endif

// Get a boolean from RNG8.
// Avoids suspect low-order bit(s).
static inline bool randRNG8NextBoolean() { return(0 != (0x8 & randRNG8())); }
    1a96:	0e 94 3d 1b 	call	0x367a	; 0x367a <randRNG8()>
    1a9a:	83 ff       	sbrs	r24, 3
    1a9c:	02 c0       	rjmp	.+4      	; 0x1aa2 <loopOpenTRV()+0x214>
    1a9e:	41 e0       	ldi	r20, 0x01	; 1
    1aa0:	01 c0       	rjmp	.+2      	; 0x1aa4 <loopOpenTRV()+0x216>
    1aa2:	40 e0       	ldi	r20, 0x00	; 0
        bareStatsTX(hubMode, minute1From4AfterSensors && !batteryLow && !hubMode, doBinary);
    1aa4:	cc 20       	and	r12, r12
    1aa6:	11 f4       	brne	.+4      	; 0x1aac <loopOpenTRV()+0x21e>
    1aa8:	60 e0       	ldi	r22, 0x00	; 0
    1aaa:	02 c0       	rjmp	.+4      	; 0x1ab0 <loopOpenTRV()+0x222>
    1aac:	61 e0       	ldi	r22, 0x01	; 1
    1aae:	6f 25       	eor	r22, r15
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
    1ab2:	0e 94 26 08 	call	0x104c	; 0x104c <bareStatsTX(bool, bool, bool)>
    1ab6:	3c c0       	rjmp	.+120    	; 0x1b30 <loopOpenTRV()+0x2a2>
    case 50: { if(runAll) { RelHumidity.read(); } break; }
#endif

    // Poll ambient light level at a fixed rate.
    // This allows the unit to respond consistently to (eg) switching lights on (eg TODO-388).
    case 52: { AmbLight.read(); break; }
    1ab8:	89 e5       	ldi	r24, 0x59	; 89
    1aba:	93 e0       	ldi	r25, 0x03	; 3
    1abc:	0e 94 cb 2c 	call	0x5996	; 0x5996 <AmbientLight::read()>
    1ac0:	37 c0       	rjmp	.+110    	; 0x1b30 <loopOpenTRV()+0x2a2>

    // At a hub, sample temperature regularly as late as possible in the minute just before recomputing valve position.
    // Force a regular read to make stats such as rate-of-change simple and to minimise lag.
    // TODO: optimise to reduce power consumption when not calling for heat.
    // TODO: optimise to reduce self-heating jitter when in hub/listen/RX mode.
    case 54: { TemperatureC16.read(); break; }
    1ac2:	80 e6       	ldi	r24, 0x60	; 96
    1ac4:	93 e0       	ldi	r25, 0x03	; 3
    1ac6:	0e 94 74 2c 	call	0x58e8	; 0x58e8 <RoomTemperatureC16::read()>
    1aca:	32 c0       	rjmp	.+100    	; 0x1b30 <loopOpenTRV()+0x2a2>
    // This should happen as soon after the latest readings as possible (temperature especially).
    case 56:
      {
#ifdef OCCUPANCY_SUPPORT
      // Update occupancy status (fresh for target recomputation) at a fixed rate.
      Occupancy.read();
    1acc:	8a ee       	ldi	r24, 0xEA	; 234
    1ace:	91 e0       	ldi	r25, 0x01	; 1
    1ad0:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <OccupancyTracker::read()>

    // Force a read/poll/recomputation of the target position and call for heat.
    // Sets/clears changed flag if computed valve position changed.
    // Call at a fixed rate (1/60s).
    // Potentially expensive/slow.
    virtual uint8_t read() { computeCallForHeat(); return(value); }
    1ad4:	81 ef       	ldi	r24, 0xF1	; 241
    1ad6:	91 e0       	ldi	r25, 0x01	; 1
    1ad8:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <ModelledRadValve::computeCallForHeat()>
    1adc:	80 91 f3 01 	lds	r24, 0x01F3

#if defined(USE_MODULE_FHT8VSIMPLE)
      // If there was a change in target valve position,
      // or periodically in the minute after all sensors should have been read,
      // precompute some or all of any outgoing frame/stats/etc ready for the next transmission.
      if(NominalRadValve.isValveMoved() ||
    1ae0:	80 91 ff 01 	lds	r24, 0x01FF
    1ae4:	88 23       	and	r24, r24
    1ae6:	31 f4       	brne	.+12     	; 0x1af4 <loopOpenTRV()+0x266>
    1ae8:	cc 20       	and	r12, r12
    1aea:	51 f0       	breq	.+20     	; 0x1b00 <loopOpenTRV()+0x272>
    1aec:	0e 94 53 11 	call	0x22a6	; 0x22a6 <enableTrailingStatsPayload()>
    1af0:	88 23       	and	r24, r24
    1af2:	31 f0       	breq	.+12     	; 0x1b00 <loopOpenTRV()+0x272>
         (minute1From4AfterSensors && enableTrailingStatsPayload()))
        {
        if(localFHT8VTRVEnabled()) { FHT8VCreateValveSetCmdFrame(); }
    1af4:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <localFHT8VTRVEnabled()>
    1af8:	88 23       	and	r24, r24
    1afa:	11 f0       	breq	.+4      	; 0x1b00 <loopOpenTRV()+0x272>
    1afc:	0e 94 0a 10 	call	0x2014	; 0x2014 <FHT8VCreateValveSetCmdFrame()>
          }
        }
#endif

      // Show current status if appropriate.
      if(runAll) { showStatus = true; }
    1b00:	11 23       	and	r17, r17
    1b02:	b1 f0       	breq	.+44     	; 0x1b30 <loopOpenTRV()+0x2a2>
    1b04:	bb 24       	eor	r11, r11
    1b06:	b3 94       	inc	r11
    1b08:	13 c0       	rjmp	.+38     	; 0x1b30 <loopOpenTRV()+0x2a2>
    case 58:
      {
      // Take full stats sample as near the end of the hour as reasonably possible (without danger of overrun),
      // and with other optional non-full samples evenly spaced throughout the hour (if not low on battery).
      // A small even number of samples (or 1 sample) is probably most efficient.
      if(minute0From4ForSensors) // Use lowest-noise samples just taken in the special 0 minute out of each 4.
    1b0a:	ee 20       	and	r14, r14
    1b0c:	89 f0       	breq	.+34     	; 0x1b30 <loopOpenTRV()+0x2a2>
        {
        const uint_least8_t mm = getMinutesLT();
    1b0e:	0e 94 be 1c 	call	0x397c	; 0x397c <getMinutesLT()>
        switch(mm)
    1b12:	8a 31       	cpi	r24, 0x1A	; 26
    1b14:	68 f0       	brcs	.+26     	; 0x1b30 <loopOpenTRV()+0x2a2>
    1b16:	8e 31       	cpi	r24, 0x1E	; 30
    1b18:	20 f0       	brcs	.+8      	; 0x1b22 <loopOpenTRV()+0x294>
    1b1a:	88 53       	subi	r24, 0x38	; 56
    1b1c:	84 30       	cpi	r24, 0x04	; 4
    1b1e:	40 f4       	brcc	.+16     	; 0x1b30 <loopOpenTRV()+0x2a2>
    1b20:	04 c0       	rjmp	.+8      	; 0x1b2a <loopOpenTRV()+0x29c>
          {
          case 26: case 27: case 28: case 29:
            { if(!batteryLow) { sampleStats(false); } break; } // Skip sub-samples if short of energy.
    1b22:	ff 20       	and	r15, r15
    1b24:	29 f4       	brne	.+10     	; 0x1b30 <loopOpenTRV()+0x2a2>
    1b26:	80 e0       	ldi	r24, 0x00	; 0
    1b28:	01 c0       	rjmp	.+2      	; 0x1b2c <loopOpenTRV()+0x29e>
          case 56: case 57: case 58: case 59:
            { sampleStats(true); break; } // Always take the full sample at the end of each hour.
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	0e 94 de 09 	call	0x13bc	; 0x13bc <sampleStats(bool)>
      break;
      }
    }

#if defined(USE_MODULE_FHT8VSIMPLE) && defined(TWO_S_TICK_RTC_SUPPORT)
  if(useExtraFHT8VTXSlots)
    1b30:	00 23       	and	r16, r16
    1b32:	61 f0       	breq	.+24     	; 0x1b4c <loopOpenTRV()+0x2be>
    {
    // ---------- HALF SECOND #2 -----------
    useExtraFHT8VTXSlots = localFHT8VTRVEnabled() && FHT8VPollSyncAndTX_Next(doubleTXForFTH8V); 
    1b34:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <localFHT8VTRVEnabled()>
    1b38:	88 23       	and	r24, r24
    1b3a:	39 f0       	breq	.+14     	; 0x1b4a <loopOpenTRV()+0x2bc>
    1b3c:	8d 2d       	mov	r24, r13
    1b3e:	0e 94 ef 10 	call	0x21de	; 0x21de <FHT8VPollSyncAndTX_Next(bool)>
    1b42:	88 23       	and	r24, r24
    1b44:	11 f0       	breq	.+4      	; 0x1b4a <loopOpenTRV()+0x2bc>
    1b46:	01 e0       	ldi	r16, 0x01	; 1
    1b48:	01 c0       	rjmp	.+2      	; 0x1b4c <loopOpenTRV()+0x2be>
    1b4a:	00 e0       	ldi	r16, 0x00	; 0
//    if(useExtraFHT8VTXSlots) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("ES@2"); }
    }
#endif

  // Generate periodic status reports.
  if(showStatus) { serialStatusReport(); }
    1b4c:	bb 20       	and	r11, r11
    1b4e:	11 f0       	breq	.+4      	; 0x1b54 <loopOpenTRV()+0x2c6>
    1b50:	0e 94 08 21 	call	0x4210	; 0x4210 <serialStatusReport()>

#if defined(USE_MODULE_FHT8VSIMPLE) && defined(TWO_S_TICK_RTC_SUPPORT)
  if(useExtraFHT8VTXSlots)
    1b54:	00 23       	and	r16, r16
    1b56:	39 f0       	breq	.+14     	; 0x1b66 <loopOpenTRV()+0x2d8>
    {
    // ---------- HALF SECOND #3 -----------
    useExtraFHT8VTXSlots = localFHT8VTRVEnabled() && FHT8VPollSyncAndTX_Next(doubleTXForFTH8V); 
    1b58:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <localFHT8VTRVEnabled()>
    1b5c:	88 23       	and	r24, r24
    1b5e:	19 f0       	breq	.+6      	; 0x1b66 <loopOpenTRV()+0x2d8>
    1b60:	8d 2d       	mov	r24, r13
    1b62:	0e 94 ef 10 	call	0x21de	; 0x21de <FHT8VPollSyncAndTX_Next(bool)>
  // AND the CLI is / should be active OR a status line has just been output
  // then poll/prompt the user for input
  // using a timeout which should safely avoid overrun, ie missing the next basic tick,
  // and which should also allow some energy-saving sleep.
#if 1 && defined(SUPPORT_CLI)
  const bool humanCLIUse = isCLIActive(); // Keeping CLI active for human interaction rather than for automated interaction.
    1b66:	0e 94 96 1f 	call	0x3f2c	; 0x3f2c <isCLIActive()>
    1b6a:	98 2f       	mov	r25, r24
  if(showStatus || humanCLIUse)
    1b6c:	bb 20       	and	r11, r11
    1b6e:	11 f4       	brne	.+4      	; 0x1b74 <loopOpenTRV()+0x2e6>
    1b70:	88 23       	and	r24, r24
    1b72:	59 f0       	breq	.+22     	; 0x1b8a <loopOpenTRV()+0x2fc>
    {
    const uint8_t sct = getSubCycleTime();
    1b74:	80 91 b2 00 	lds	r24, 0x00B2
    const uint8_t listenTime = max(GSCT_MAX/16, CLI_POLL_MIN_SCT);
    if(sct < (GSCT_MAX - 2*listenTime))
    1b78:	8d 3c       	cpi	r24, 0xCD	; 205
    1b7a:	38 f4       	brcc	.+14     	; 0x1b8a <loopOpenTRV()+0x2fc>
      // Don't listen beyond the last 16th of the cycle,
      // or a minimal time if only prodding for interaction with automated front-end,
      // as listening for UART RX uses lots of power.
      { pollCLI(humanCLIUse ? (GSCT_MAX-listenTime) : (sct+CLI_POLL_MIN_SCT)); }
    1b7c:	99 23       	and	r25, r25
    1b7e:	11 f0       	breq	.+4      	; 0x1b84 <loopOpenTRV()+0x2f6>
    1b80:	86 ee       	ldi	r24, 0xE6	; 230
    1b82:	01 c0       	rjmp	.+2      	; 0x1b86 <loopOpenTRV()+0x2f8>
    1b84:	87 5e       	subi	r24, 0xE7	; 231
    1b86:	0e 94 08 23 	call	0x4610	; 0x4610 <pollCLI(unsigned char)>
    DEBUG_SERIAL_PRINTLN();
    }
#endif

  // Detect and handle (actual or near) overrun, if it happens, though it should not.
  if(TIME_LSD != getSecondsLT())
    1b8a:	90 91 fd 02 	lds	r25, 0x02FD
    1b8e:	80 91 17 02 	lds	r24, 0x0217
    1b92:	89 17       	cp	r24, r25
    1b94:	d1 f0       	breq	.+52     	; 0x1bca <loopOpenTRV()+0x33c>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1b96:	f9 99       	sbic	0x1f, 1	; 31
    1b98:	fe cf       	rjmp	.-4      	; 0x1b96 <loopOpenTRV()+0x308>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1b9a:	8d e1       	ldi	r24, 0x1D	; 29
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	92 bd       	out	0x22, r25	; 34
    1ba0:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1ba2:	f8 9a       	sbi	0x1f, 0	; 31
    1ba4:	60 b5       	in	r22, 0x20	; 32
    {
    // Increment the overrun counter (stored inverted, so 0xff initialised => 0 overruns).
    const uint8_t orc = 1 + ~eeprom_read_byte((uint8_t *)EE_START_OVERRUN_COUNTER);
    eeprom_smart_update_byte((uint8_t *)EE_START_OVERRUN_COUNTER, ~orc);
    1ba6:	61 50       	subi	r22, 0x01	; 1
    1ba8:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <eeprom_smart_update_byte(unsigned char*, unsigned char)>
#if 1 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("!ERROR: loop overrun");
    1bac:	88 e6       	ldi	r24, 0x68	; 104
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <serialPrintlnAndFlush(__FlashStringHelper const*)>
//    DEBUG_SERIAL_PRINT(orc);
//    DEBUG_SERIAL_PRINTLN();
#endif
#if defined(USE_MODULE_FHT8VSIMPLE)
    FHT8VSyncAndTXReset(); // Assume that sync with valve may have been lost, so re-sync.
    1bb4:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <FHT8VSyncAndTXReset()>
#endif
    TIME_LSD = getSecondsLT(); // Prepare to sleep until start of next full minor cycle.
    1bb8:	80 91 fd 02 	lds	r24, 0x02FD
    1bbc:	80 93 17 02 	sts	0x0217, r24
    1bc0:	04 c0       	rjmp	.+8      	; 0x1bca <loopOpenTRV()+0x33c>
      // We should possibly choose between this and piggybacking stats to avoid busting duty-cycle rules.
      if(localFHT8VTRVEnabled() && useExtraFHT8VTXSlots) { break; }
#endif

      // Generally only attempt stats TX in the minute after all sensors should have been polled (so that readings are fresh).
      if(minute1From4AfterSensors ||
    1bc2:	cc 20       	and	r12, r12
    1bc4:	09 f0       	breq	.+2      	; 0x1bc8 <loopOpenTRV()+0x33a>
    1bc6:	49 cf       	rjmp	.-366    	; 0x1a5a <loopOpenTRV()+0x1cc>
    1bc8:	40 cf       	rjmp	.-384    	; 0x1a4a <loopOpenTRV()+0x1bc>
  else if(getSubCycleTime() >= nearOverrunThreshold)
    {
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("?O"); // Near overrun.  Note 2ms/char to send...
    }
#endif
  }
    1bca:	1f 91       	pop	r17
    1bcc:	0f 91       	pop	r16
    1bce:	ff 90       	pop	r15
    1bd0:	ef 90       	pop	r14
    1bd2:	df 90       	pop	r13
    1bd4:	cf 90       	pop	r12
    1bd6:	bf 90       	pop	r11
    1bd8:	08 95       	ret

00001bda <eeprom_smart_erase_byte(unsigned char*)>:
// If the target byte is already 0xff then this does nothing at all beyond an initial read.
// This saves a bit of time and power and possibly a little EEPROM cell wear also.
// Without split erase/write this degenerates to a specialised eeprom_update_byte().
// As with the AVR eeprom_XXX_byte() macros, not safe to use outside and within ISRs as-is.
// Returns true iff an erase was performed.
bool eeprom_smart_erase_byte(uint8_t *p)
    1bda:	9c 01       	movw	r18, r24
  eeprom_write_byte(p, 0xff); // Set to 0xff.
  return(true); // Performed an erase (and probably a write, too).
#else

  // Wait until EEPROM is idle/ready.
  eeprom_busy_wait();
    1bdc:	f9 99       	sbic	0x1f, 1	; 31
    1bde:	fe cf       	rjmp	.-4      	; 0x1bdc <eeprom_smart_erase_byte(unsigned char*)+0x2>
  //     if((uint8_t) 0xff == eeprom_read_byte(p)) { return; }
  // but leaves EEAR[L] set up appropriately for any erase or write.
#if E2END <= 0xFF
  EEARL = (uint8_t)p;
#else
  EEAR = (uint16_t)p;
    1be0:	32 bd       	out	0x22, r19	; 34
    1be2:	21 bd       	out	0x21, r18	; 33
#endif
  // Ignore problems that some AVRs have with EECR and STS instructions (ATmega64 errata).
  EECR = _BV(EERE); // Start EEPROM read operation.
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	8f bb       	out	0x1f, r24	; 31
  const uint8_t oldValue = EEDR; // Get old EEPROM value.
    1be8:	80 b5       	in	r24, 0x20	; 32
  if((uint8_t) 0xff != oldValue) // Needs erase...
    1bea:	8f 3f       	cpi	r24, 0xFF	; 255
    1bec:	11 f4       	brne	.+4      	; 0x1bf2 <eeprom_smart_erase_byte(unsigned char*)+0x18>
    1bee:	80 e0       	ldi	r24, 0x00	; 0
    1bf0:	08 95       	ret
    {
    ATOMIC_BLOCK (ATOMIC_RESTORESTATE) // Avoid timing problems from interrupts.
    1bf2:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1bf4:	f8 94       	cli
      {
      // Erase to 0xff; no write needed.
      EECR = _BV(EEMPE) | _BV(EEPM0); // Set master write-enable bit and erase-only mode.
    1bf6:	84 e1       	ldi	r24, 0x14	; 20
    1bf8:	8f bb       	out	0x1f, r24	; 31
      EECR |= _BV(EEPE);  // Start erase-only operation.
    1bfa:	f9 9a       	sbi	0x1f, 1	; 31
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1bfc:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
      }
    return(true); // Performed the erase.
    }
  return(false);
#endif
  }
    1c00:	08 95       	ret

00001c02 <eeprom_smart_clear_bits(unsigned char*, unsigned char)>:
// If ANDing in the mask has no effect then this does nothing at all beyond an initial read.
// This saves a bit of time and power and possibly a little EEPROM cell wear also.
// Without split erase/write this degenerates to a specialised eeprom_smart_update_byte().
// As with the AVR eeprom_XXX_byte() macros, not safe to use outside and within ISRs as-is.
// Returns true iff a write was performed.
bool eeprom_smart_clear_bits(uint8_t *p, uint8_t mask)
    1c02:	9c 01       	movw	r18, r24
  eeprom_write_byte(p, newValue); // Set to masked value.
  return(true); // Performed a write (and probably an erase, too).
#else

  // Wait until EEPROM is idle/ready.
  eeprom_busy_wait();
    1c04:	f9 99       	sbic	0x1f, 1	; 31
    1c06:	fe cf       	rjmp	.-4      	; 0x1c04 <eeprom_smart_clear_bits(unsigned char*, unsigned char)+0x2>
  //     oldValue = eeprom_read_byte(p);
  // and leaves EEAR[L] set up appropriately for any erase or write.
#if E2END <= 0xFF
  EEARL = (uint8_t)p;
#else
  EEAR = (uint16_t)p;
    1c08:	32 bd       	out	0x22, r19	; 34
    1c0a:	21 bd       	out	0x21, r18	; 33
#endif
  // Ignore problems that some AVRs have with EECR and STS instructions (ATmega64 errata).
  EECR = _BV(EERE); // Start EEPROM read operation.
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	8f bb       	out	0x1f, r24	; 31
  const uint8_t oldValue = EEDR; // Get old EEPROM value.
    1c10:	80 b5       	in	r24, 0x20	; 32
  const uint8_t newValue = oldValue & mask;
    1c12:	68 23       	and	r22, r24
  if(oldValue != newValue) // Write is needed...
    1c14:	86 17       	cp	r24, r22
    1c16:	11 f4       	brne	.+4      	; 0x1c1c <eeprom_smart_clear_bits(unsigned char*, unsigned char)+0x1a>
    1c18:	80 e0       	ldi	r24, 0x00	; 0
    1c1a:	08 95       	ret
    {
    // Do the write: no erase is needed.
    EEDR = newValue; // Set EEPROM data register to required new value.
    1c1c:	60 bd       	out	0x20, r22	; 32
    ATOMIC_BLOCK (ATOMIC_RESTORESTATE) // Avoid timing problems from interrupts.
    1c1e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1c20:	f8 94       	cli
      {
      EECR = _BV(EEMPE) | _BV(EEPM1); // Set master write-enable bit and write-only mode.
    1c22:	84 e2       	ldi	r24, 0x24	; 36
    1c24:	8f bb       	out	0x1f, r24	; 31
      EECR |= _BV(EEPE);  // Start write-only operation.
    1c26:	f9 9a       	sbi	0x1f, 1	; 31
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1c28:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
      }
    return(true); // Performed the write.
    }
  return(false);
#endif
  }
    1c2c:	08 95       	ret

00001c2e <eeprom_smart_update_byte(unsigned char*, unsigned char)>:
// Updates an EEEPROM byte iff not currently at the specified target value.
// May be able to selectively erase or write (ie reduce wear) to reach the desired value.
// As with the AVR eeprom_XXX_byte() macros, not safe to use outside and within ISRs as-is.
// Returns true iff an erase and/or write was performed.
// TODO: make smarter, eg don't wait/read twice...
bool eeprom_smart_update_byte(uint8_t *p, uint8_t value)
    1c2e:	78 2f       	mov	r23, r24
    1c30:	e9 2f       	mov	r30, r25
  {
  // If target byte is 0xff then attempt smart erase rather than more generic write or erase+write.
  if((uint8_t) 0xff == value) { return(eeprom_smart_erase_byte(p)); }
    1c32:	6f 3f       	cpi	r22, 0xFF	; 255
    1c34:	19 f4       	brne	.+6      	; 0x1c3c <eeprom_smart_update_byte(unsigned char*, unsigned char)+0xe>
    1c36:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <eeprom_smart_erase_byte(unsigned char*)>
    1c3a:	08 95       	ret
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1c3c:	f9 99       	sbic	0x1f, 1	; 31
    1c3e:	fe cf       	rjmp	.-4      	; 0x1c3c <eeprom_smart_update_byte(unsigned char*, unsigned char)+0xe>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1c40:	47 2f       	mov	r20, r23
    1c42:	5e 2f       	mov	r21, r30
    1c44:	52 bd       	out	0x22, r21	; 34
    1c46:	41 bd       	out	0x21, r20	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1c48:	f8 9a       	sbi	0x1f, 0	; 31
    1c4a:	80 b5       	in	r24, 0x20	; 32
  // More than an erase might be required...
  const uint8_t oldValue = eeprom_read_byte(p);
  if(value == oldValue) { return(false); } // No change needed.
    1c4c:	68 17       	cp	r22, r24
    1c4e:	11 f4       	brne	.+4      	; 0x1c54 <eeprom_smart_update_byte(unsigned char*, unsigned char)+0x26>
    1c50:	80 e0       	ldi	r24, 0x00	; 0
    1c52:	08 95       	ret
#ifdef EEPROM_SPLIT_ERASE_WRITE // Can do selective write.
  if(value == (value & oldValue)) { return(eeprom_smart_clear_bits(p, value)); } // Can use pure write to clear bits to zero.
    1c54:	26 2f       	mov	r18, r22
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	82 23       	and	r24, r18
    1c5c:	93 23       	and	r25, r19
    1c5e:	28 17       	cp	r18, r24
    1c60:	39 07       	cpc	r19, r25
    1c62:	29 f4       	brne	.+10     	; 0x1c6e <eeprom_smart_update_byte(unsigned char*, unsigned char)+0x40>
    1c64:	87 2f       	mov	r24, r23
    1c66:	9e 2f       	mov	r25, r30
    1c68:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <eeprom_smart_clear_bits(unsigned char*, unsigned char)>
    1c6c:	08 95       	ret
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    1c6e:	f9 99       	sbic	0x1f, 1	; 31
    1c70:	fe cf       	rjmp	.-4      	; 0x1c6e <eeprom_smart_update_byte(unsigned char*, unsigned char)+0x40>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    1c72:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1c74:	52 bd       	out	0x22, r21	; 34
    1c76:	41 bd       	out	0x21, r20	; 33
#endif
    EEDR = __value;
    1c78:	60 bd       	out	0x20, r22	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    1c7a:	0f b6       	in	r0, 0x3f	; 63
    1c7c:	f8 94       	cli
    1c7e:	fa 9a       	sbi	0x1f, 2	; 31
    1c80:	f9 9a       	sbi	0x1f, 1	; 31
    1c82:	0f be       	out	0x3f, r0	; 63
    1c84:	81 e0       	ldi	r24, 0x01	; 1
#endif
  eeprom_write_byte(p, value); // Needs to set some (but not all) bits to 1, so needs erase and write.
  return(true); // Performed an update.
  }
    1c86:	08 95       	ret

00001c88 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>:
// bptr must be pointing at the current byte to update on entry which must start off as 0xff;
// this will write the byte and increment bptr (and write 0xff to the new location) if one is filled up.
// Partial byte can only have even number of bits present, ie be in one of 4 states.
// Two least significant bits used to indicate how many bit pairs are still to be filled,
// so initial 0xff value (which is never a valid complete filled byte) indicates 'empty'.
static uint8_t *_FHT8VCreate200usAppendEncBit(uint8_t *bptr, const bool is1)
    1c88:	fc 01       	movw	r30, r24
  {
  const uint8_t bitPairsLeft = (*bptr) & 3; // Find out how many bit pairs are left to fill in the current byte.
    1c8a:	80 81       	ld	r24, Z
    1c8c:	98 2f       	mov	r25, r24
    1c8e:	93 70       	andi	r25, 0x03	; 3
  if(!is1) // Appending 1100.
    1c90:	66 23       	and	r22, r22
    1c92:	b1 f4       	brne	.+44     	; 0x1cc0 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x38>
    {
    switch(bitPairsLeft)
    1c94:	92 30       	cpi	r25, 0x02	; 2
    1c96:	51 f0       	breq	.+20     	; 0x1cac <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x24>
    1c98:	93 30       	cpi	r25, 0x03	; 3
    1c9a:	31 f0       	breq	.+12     	; 0x1ca8 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x20>
    1c9c:	9f 01       	movw	r18, r30
    1c9e:	2f 5f       	subi	r18, 0xFF	; 255
    1ca0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ca2:	91 30       	cpi	r25, 0x01	; 1
    1ca4:	59 f4       	brne	.+22     	; 0x1cbc <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x34>
    1ca6:	05 c0       	rjmp	.+10     	; 0x1cb2 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x2a>
      {
      case 3: // Empty target byte (should be 0xff currently).
        *bptr = 0xcd; // %11001101 Write back partial byte (msbits now 1100 and two bit pairs remain free).
    1ca8:	8d ec       	ldi	r24, 0xCD	; 205
    1caa:	25 c0       	rjmp	.+74     	; 0x1cf6 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      case 2: // Top bit pair already filled.
        *bptr = (*bptr & 0xc0) | 0x30; // Preserve existing ms bit-pair, set middle four bits 1100, one bit pair remains free.
    1cac:	80 7c       	andi	r24, 0xC0	; 192
    1cae:	80 63       	ori	r24, 0x30	; 48
    1cb0:	22 c0       	rjmp	.+68     	; 0x1cf6 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      case 1: // Top two bit pairs already filled.
        *bptr = (*bptr & 0xf0) | 0xc; // Preserve existing ms (2) bit-pairs, set bottom four bits 1100, write back full byte.
    1cb2:	80 7f       	andi	r24, 0xF0	; 240
    1cb4:	8c 60       	ori	r24, 0x0C	; 12
    1cb6:	80 83       	st	Z, r24
        *++bptr = (uint8_t) ~0U; // Initialise next byte for next incremental update.
    1cb8:	f9 01       	movw	r30, r18
    1cba:	11 c0       	rjmp	.+34     	; 0x1cde <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x56>
        break;
      default: // Top three bit pairs already filled.
        *bptr |= 3; // Preserve existing ms (3) bit-pairs, OR in leading 11 bits, write back full byte.
    1cbc:	83 60       	ori	r24, 0x03	; 3
    1cbe:	13 c0       	rjmp	.+38     	; 0x1ce6 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x5e>
        break;
      }
    }
  else // Appending 111000.
    {
    switch(bitPairsLeft)
    1cc0:	92 30       	cpi	r25, 0x02	; 2
    1cc2:	51 f0       	breq	.+20     	; 0x1cd8 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x50>
    1cc4:	93 30       	cpi	r25, 0x03	; 3
    1cc6:	31 f0       	breq	.+12     	; 0x1cd4 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x4c>
    1cc8:	9f 01       	movw	r18, r30
    1cca:	2f 5f       	subi	r18, 0xFF	; 255
    1ccc:	3f 4f       	sbci	r19, 0xFF	; 255
    1cce:	91 30       	cpi	r25, 0x01	; 1
    1cd0:	71 f4       	brne	.+28     	; 0x1cee <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x66>
    1cd2:	07 c0       	rjmp	.+14     	; 0x1ce2 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x5a>
      {
      case 3: // Empty target byte (should be 0xff currently).
        *bptr = 0xe0; // %11100000 Write back partial byte (msbits now 111000 and one bit pair remains free).
    1cd4:	80 ee       	ldi	r24, 0xE0	; 224
    1cd6:	0f c0       	rjmp	.+30     	; 0x1cf6 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      case 2: // Top bit pair already filled.
        *bptr = (*bptr & 0xc0) | 0x38; // Preserve existing ms bit-pair, set lsbits to 111000, write back full byte.
    1cd8:	80 7c       	andi	r24, 0xC0	; 192
    1cda:	88 63       	ori	r24, 0x38	; 56
    1cdc:	81 93       	st	Z+, r24
        *++bptr = (uint8_t) ~0U; // Initialise next byte for next incremental update.
    1cde:	8f ef       	ldi	r24, 0xFF	; 255
    1ce0:	0a c0       	rjmp	.+20     	; 0x1cf6 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      case 1: // Top two bit pairs already filled.
        *bptr = (*bptr & 0xf0) | 0xe; // Preserve existing (2) ms bit-pairs, set bottom four bits to 1110, write back full byte.
    1ce2:	80 7f       	andi	r24, 0xF0	; 240
    1ce4:	8e 60       	ori	r24, 0x0E	; 14
    1ce6:	80 83       	st	Z, r24
        *++bptr = 0x3e; // %00111110 Write trailing 00 bits to next byte and indicate 3 bit-pairs free for next incremental update.
    1ce8:	f9 01       	movw	r30, r18
    1cea:	8e e3       	ldi	r24, 0x3E	; 62
    1cec:	04 c0       	rjmp	.+8      	; 0x1cf6 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      default: // Top three bit pairs already filled.
        *bptr |= 3; // Preserve existing ms (3) bit-pairs, OR in leading 11 bits, write back full byte.
    1cee:	83 60       	ori	r24, 0x03	; 3
    1cf0:	80 83       	st	Z, r24
        *++bptr = 0x8d; // Write trailing 1000 bits to next byte and indicate 2 bit-pairs free for next incremental update.
    1cf2:	f9 01       	movw	r30, r18
    1cf4:	8d e8       	ldi	r24, 0x8D	; 141
    1cf6:	80 83       	st	Z, r24
        break;
      }
    }
  return(bptr);
  }
    1cf8:	cf 01       	movw	r24, r30
    1cfa:	08 95       	ret

00001cfc <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>:

// Appends encoded byte in b msbit first plus trailing even parity bit (9 bits total)
// to the byte stream being created by FHT8VCreate200usBitStreamBptr.
static uint8_t *_FHT8VCreate200usAppendByteEP(uint8_t *bptr, const uint8_t b)
    1cfc:	ef 92       	push	r14
    1cfe:	ff 92       	push	r15
    1d00:	0f 93       	push	r16
    1d02:	1f 93       	push	r17
    1d04:	cf 93       	push	r28
    1d06:	df 93       	push	r29
    1d08:	9c 01       	movw	r18, r24
    1d0a:	16 2f       	mov	r17, r22
    1d0c:	00 e8       	ldi	r16, 0x80	; 128
    1d0e:	c0 e0       	ldi	r28, 0x00	; 0
    1d10:	d0 e0       	ldi	r29, 0x00	; 0
  {
  for(uint8_t mask = 0x80; mask != 0; mask >>= 1)
    { bptr = _FHT8VCreate200usAppendEncBit(bptr, 0 != (b & mask)); }
    1d12:	e6 2e       	mov	r14, r22
    1d14:	ff 24       	eor	r15, r15
    1d16:	60 e0       	ldi	r22, 0x00	; 0
    1d18:	80 2f       	mov	r24, r16
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	8e 21       	and	r24, r14
    1d1e:	9f 21       	and	r25, r15
    1d20:	89 2b       	or	r24, r25
    1d22:	09 f0       	breq	.+2      	; 0x1d26 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)+0x2a>
    1d24:	61 e0       	ldi	r22, 0x01	; 1
    1d26:	c9 01       	movw	r24, r18
    1d28:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
    1d2c:	9c 01       	movw	r18, r24

// Appends encoded byte in b msbit first plus trailing even parity bit (9 bits total)
// to the byte stream being created by FHT8VCreate200usBitStreamBptr.
static uint8_t *_FHT8VCreate200usAppendByteEP(uint8_t *bptr, const uint8_t b)
  {
  for(uint8_t mask = 0x80; mask != 0; mask >>= 1)
    1d2e:	06 95       	lsr	r16
    1d30:	21 96       	adiw	r28, 0x01	; 1
    1d32:	c8 30       	cpi	r28, 0x08	; 8
    1d34:	d1 05       	cpc	r29, r1
    1d36:	79 f7       	brne	.-34     	; 0x1d16 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)+0x1a>
    { bptr = _FHT8VCreate200usAppendEncBit(bptr, 0 != (b & mask)); }
  return(_FHT8VCreate200usAppendEncBit(bptr, (bool) parity_even_bit(b))); // Append even parity bit.
    1d38:	01 2e       	mov	r0, r17
    1d3a:	12 95       	swap	r17
    1d3c:	10 25       	eor	r17, r0
    1d3e:	01 2e       	mov	r0, r17
    1d40:	16 95       	lsr	r17
    1d42:	16 95       	lsr	r17
    1d44:	10 25       	eor	r17, r0
    1d46:	61 2f       	mov	r22, r17
    1d48:	70 e0       	ldi	r23, 0x00	; 0
    1d4a:	6f 5f       	subi	r22, 0xFF	; 255
    1d4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d4e:	76 95       	lsr	r23
    1d50:	67 95       	ror	r22
    1d52:	61 70       	andi	r22, 0x01	; 1
    1d54:	c9 01       	movw	r24, r18
    1d56:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
  }
    1d5a:	df 91       	pop	r29
    1d5c:	cf 91       	pop	r28
    1d5e:	1f 91       	pop	r17
    1d60:	0f 91       	pop	r16
    1d62:	ff 90       	pop	r15
    1d64:	ef 90       	pop	r14
    1d66:	08 95       	ret

00001d68 <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>:
// On entry the populated FHT8V command struct is passed by pointer.
// On exit, the memory block starting at buffer contains the low-byte, msbit-first bit, 0xff-terminated TX sequence.
// The maximum and minimum possible encoded message sizes are 35 (all zero bytes) and 45 (all 0xff bytes) bytes long.
// Note that a buffer space of at least 46 bytes is needed to accommodate the longest-possible encoded message and terminator.
// Returns pointer to the terminating 0xff on exit.
uint8_t *FHT8VCreate200usBitStreamBptr(uint8_t *bptr, const fht8v_msg_t *command)
    1d68:	ff 92       	push	r15
    1d6a:	0f 93       	push	r16
    1d6c:	1f 93       	push	r17
    1d6e:	dc 01       	movw	r26, r24
    1d70:	8b 01       	movw	r16, r22
  {
  // Generate FHT8V preamble.
  // First 12 x 0 bits of preamble, pre-encoded as 6 x 0xcc bytes.
  *bptr++ = 0xcc;
    1d72:	8c ec       	ldi	r24, 0xCC	; 204
    1d74:	fd 01       	movw	r30, r26
    1d76:	81 93       	st	Z+, r24
  *bptr++ = 0xcc;
    1d78:	11 96       	adiw	r26, 0x01	; 1
    1d7a:	8c 93       	st	X, r24
    1d7c:	df 01       	movw	r26, r30
    1d7e:	11 96       	adiw	r26, 0x01	; 1
  *bptr++ = 0xcc;
    1d80:	81 83       	std	Z+1, r24	; 0x01
    1d82:	fd 01       	movw	r30, r26
    1d84:	31 96       	adiw	r30, 0x01	; 1
  *bptr++ = 0xcc;
    1d86:	11 96       	adiw	r26, 0x01	; 1
    1d88:	8c 93       	st	X, r24
    1d8a:	df 01       	movw	r26, r30
    1d8c:	11 96       	adiw	r26, 0x01	; 1
  *bptr++ = 0xcc;
    1d8e:	81 83       	std	Z+1, r24	; 0x01
    1d90:	fd 01       	movw	r30, r26
    1d92:	31 96       	adiw	r30, 0x01	; 1
  *bptr++ = 0xcc;
    1d94:	11 96       	adiw	r26, 0x01	; 1
    1d96:	8c 93       	st	X, r24
  *bptr = (uint8_t) ~0U; // Initialise for _FHT8VCreate200usAppendEncBit routine.
    1d98:	ff 24       	eor	r15, r15
    1d9a:	fa 94       	dec	r15
    1d9c:	f1 82       	std	Z+1, r15	; 0x01
  // Push remaining 1 of preamble.
  bptr = _FHT8VCreate200usAppendEncBit(bptr, true); // Encode 1.
    1d9e:	cf 01       	movw	r24, r30
    1da0:	01 96       	adiw	r24, 0x01	; 1
    1da2:	61 e0       	ldi	r22, 0x01	; 1
    1da4:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>

  // Generate body.
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->hc1);
    1da8:	f8 01       	movw	r30, r16
    1daa:	60 81       	ld	r22, Z
    1dac:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->hc2);
    1db0:	f8 01       	movw	r30, r16
    1db2:	61 81       	ldd	r22, Z+1	; 0x01
    1db4:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
#ifdef FHT8V_ADR_USED
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->address);
#else
  bptr = _FHT8VCreate200usAppendByteEP(bptr, 0); // Default/broadcast.  TODO: could possibly be further optimised to send 0 value more efficiently.
    1db8:	60 e0       	ldi	r22, 0x00	; 0
    1dba:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
#endif
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->command);
    1dbe:	f8 01       	movw	r30, r16
    1dc0:	62 81       	ldd	r22, Z+2	; 0x02
    1dc2:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->extension);
    1dc6:	f8 01       	movw	r30, r16
    1dc8:	63 81       	ldd	r22, Z+3	; 0x03
    1dca:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
#ifdef FHT8V_ADR_USED
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + command->address + command->command + command->extension;
#else
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + command->command + command->extension;
#endif
  bptr = _FHT8VCreate200usAppendByteEP(bptr, checksum);
    1dce:	f8 01       	movw	r30, r16
    1dd0:	60 81       	ld	r22, Z
    1dd2:	21 81       	ldd	r18, Z+1	; 0x01
    1dd4:	62 0f       	add	r22, r18
    1dd6:	64 5f       	subi	r22, 0xF4	; 244
    1dd8:	22 81       	ldd	r18, Z+2	; 0x02
    1dda:	62 0f       	add	r22, r18
    1ddc:	23 81       	ldd	r18, Z+3	; 0x03
    1dde:	62 0f       	add	r22, r18
    1de0:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>

  // Generate trailer.
  // Append 0 bit for trailer.
  bptr = _FHT8VCreate200usAppendEncBit(bptr, false);
    1de4:	60 e0       	ldi	r22, 0x00	; 0
    1de6:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
  // Append extra 0 bits to ensure that final required bits are flushed out.
  bptr = _FHT8VCreate200usAppendEncBit(bptr, false);
    1dea:	60 e0       	ldi	r22, 0x00	; 0
    1dec:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
  bptr = _FHT8VCreate200usAppendEncBit(bptr, false);
    1df0:	60 e0       	ldi	r22, 0x00	; 0
    1df2:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
    1df6:	fc 01       	movw	r30, r24
  *bptr = (uint8_t)0xff; // Terminate TX bytes.
    1df8:	f0 82       	st	Z, r15
  return(bptr);
  }
    1dfa:	1f 91       	pop	r17
    1dfc:	0f 91       	pop	r16
    1dfe:	ff 90       	pop	r15
    1e00:	08 95       	ret

00001e02 <FHT8VGetHC1()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1e02:	f9 99       	sbic	0x1f, 1	; 31
    1e04:	fe cf       	rjmp	.-4      	; 0x1e02 <FHT8VGetHC1()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1e06:	80 e1       	ldi	r24, 0x10	; 16
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	92 bd       	out	0x22, r25	; 34
    1e0c:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1e0e:	f8 9a       	sbi	0x1f, 0	; 31
    1e10:	80 b5       	in	r24, 0x20	; 32
// Set (non-volatile) HC1 and HC2 for single/primary FHT8V wireless valve under control.
void FHT8VSetHC1(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC1, hc); }
void FHT8VSetHC2(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC2, hc); }

// Get (non-volatile) HC1 and HC2 for single/primary FHT8V wireless valve under control (will be 0xff until set).
uint8_t FHT8VGetHC1() { return(eeprom_read_byte((uint8_t*)EE_START_FHT8V_HC1)); }
    1e12:	08 95       	ret

00001e14 <FHT8VGetHC2()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1e14:	f9 99       	sbic	0x1f, 1	; 31
    1e16:	fe cf       	rjmp	.-4      	; 0x1e14 <FHT8VGetHC2()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1e18:	81 e1       	ldi	r24, 0x11	; 17
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	92 bd       	out	0x22, r25	; 34
    1e1e:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1e20:	f8 9a       	sbi	0x1f, 0	; 31
    1e22:	80 b5       	in	r24, 0x20	; 32
uint8_t FHT8VGetHC2() { return(eeprom_read_byte((uint8_t*)EE_START_FHT8V_HC2)); }
    1e24:	08 95       	ret

00001e26 <localFHT8VTRVEnabled()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1e26:	f9 99       	sbic	0x1f, 1	; 31
    1e28:	fe cf       	rjmp	.-4      	; 0x1e26 <localFHT8VTRVEnabled()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1e2a:	80 e1       	ldi	r24, 0x10	; 16
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	92 bd       	out	0x22, r25	; 34
    1e30:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1e32:	f8 9a       	sbi	0x1f, 0	; 31
    1e34:	80 b5       	in	r24, 0x20	; 32

#ifndef localFHT8VTRVEnabled
// Returns TRV if valve/radiator is to be controlled by this unit.
// Usually the case, but may not be for (a) a hub or (b) a not-yet-configured unit.
// Returns false if house code parts are set to invalid or uninitialised values (>99).
bool localFHT8VTRVEnabled() { return(((FHT8VGetHC1() <= 99) && (FHT8VGetHC2() <= 99))); }
    1e36:	84 36       	cpi	r24, 0x64	; 100
    1e38:	10 f0       	brcs	.+4      	; 0x1e3e <localFHT8VTRVEnabled()+0x18>
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	0c c0       	rjmp	.+24     	; 0x1e56 <localFHT8VTRVEnabled()+0x30>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1e3e:	f9 99       	sbic	0x1f, 1	; 31
    1e40:	fe cf       	rjmp	.-4      	; 0x1e3e <localFHT8VTRVEnabled()+0x18>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1e42:	81 e1       	ldi	r24, 0x11	; 17
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	92 bd       	out	0x22, r25	; 34
    1e48:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1e4a:	f8 9a       	sbi	0x1f, 0	; 31
    1e4c:	80 b5       	in	r24, 0x20	; 32
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	84 36       	cpi	r24, 0x64	; 100
    1e52:	08 f4       	brcc	.+2      	; 0x1e56 <localFHT8VTRVEnabled()+0x30>
    1e54:	91 e0       	ldi	r25, 0x01	; 1
    1e56:	89 2f       	mov	r24, r25
    1e58:	08 95       	ret

00001e5a <isSyncedWithFHT8V()>:
  }

// True once/while this node is synced with and controlling the target FHT8V valve; initially false.
static bool syncedWithFHT8V;
#ifndef IGNORE_FHT_SYNC
bool isSyncedWithFHT8V() { return(syncedWithFHT8V); }
    1e5a:	80 91 6e 02 	lds	r24, 0x026E
    1e5e:	08 95       	ret

00001e60 <FHT8VisControlledValveOpen()>:
#endif


// True if FHT8V valve is believed to be open under instruction from this system; false if not in sync.
static bool FHT8V_isValveOpen;
bool getFHT8V_isValveOpen() { return(syncedWithFHT8V && FHT8V_isValveOpen); }
    1e60:	80 91 6e 02 	lds	r24, 0x026E
    1e64:	88 23       	and	r24, r24
    1e66:	21 f0       	breq	.+8      	; 0x1e70 <FHT8VisControlledValveOpen()+0x10>
    1e68:	80 91 ad 02 	lds	r24, 0x02AD
    1e6c:	81 11       	cpse	r24, r1
    1e6e:	81 e0       	ldi	r24, 0x01	; 1


// GLOBAL NOTION OF CONTROLLED FHT8V VALVE STATE PROVIDED HERE
// True iff the FHT8V valve(s) (if any) controlled by this unit are really open.
// This waits until at least the command to open the FHT8Vhas been sent.
bool FHT8VisControlledValveOpen() { return(getFHT8V_isValveOpen()); }
    1e70:	08 95       	ret

00001e72 <FHT8VSyncAndTXReset()>:
//   FHT8V_isValveOpen (bit, true if this node has last sent command to open valve)
//   syncStateFHT8V (byte, internal)
//   halfSecondsToNextFHT8VTX (byte).
void FHT8VSyncAndTXReset()
  {
  syncedWithFHT8V = false;
    1e72:	10 92 6e 02 	sts	0x026E, r1
  syncStateFHT8V = 0;
    1e76:	10 92 70 02 	sts	0x0270, r1
  halfSecondsToNextFHT8VTX = 0;
    1e7a:	10 92 6f 02 	sts	0x026F, r1
  FHT8V_isValveOpen = false;
    1e7e:	10 92 ad 02 	sts	0x02AD, r1
  }
    1e82:	08 95       	ret

00001e84 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)>:
//
// Returns immediately without transmitting if the command buffer starts with 0xff (ie is empty).
// (If doubleTX is true, sends the bitstream twice, with a short (~8ms) pause between transmissions, to help ensure reliable delivery.)
//
// Note: single transmission time is up to about 80ms (without extra trailers), double up to about 170ms.
static void FHT8VTXFHTQueueAndSendCmd(uint8_t *bptr, const bool doubleTX)
    1e84:	1f 93       	push	r17
    1e86:	fc 01       	movw	r30, r24
    1e88:	16 2f       	mov	r17, r22
  {
  if(((uint8_t)0xff) == *bptr) { return; }
    1e8a:	80 81       	ld	r24, Z
    1e8c:	8f 3f       	cpi	r24, 0xFF	; 255
    1e8e:	79 f0       	breq	.+30     	; 0x1eae <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x2a>
  // Do a final poll for any call for heat that just arrived before doing TX.
  if(hubMode) { FHT8VCallForHeatPoll(); }
  StopEavesdropOnFHT8V(); // Unconditional cleardown of eavesdrop.
#endif

  RFM22QueueCmdToFF(bptr);
    1e90:	cf 01       	movw	r24, r30
    1e92:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <RFM22QueueCmdToFF(unsigned char*)>
  RFM22TXFIFO(); // Send it!  Approx 1.6ms/byte and < 80ms max.
    1e96:	0e 94 15 1c 	call	0x382a	; 0x382a <RFM22TXFIFO()>

  if(doubleTX)
    1e9a:	11 23       	and	r17, r17
    1e9c:	31 f0       	breq	.+12     	; 0x1eaa <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x26>
// This may be achieved in part by dynamically slowing the CPU clock if possible.
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed((((MIN_CPU_HZ * (ms)) + 2000) / 4000) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    1e9e:	8d e3       	ldi	r24, 0x3D	; 61
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
    {
    // Should nominally pause about 8--9ms or similar before retransmission...
    sleepLowPowerMs(8);
    RFM22TXFIFO(); // Re-send it!
    1ea6:	0e 94 15 1c 	call	0x382a	; 0x382a <RFM22TXFIFO()>
#if defined(ENABLE_BOILER_HUB)
  if(hubMode)
    { SetupToEavesdropOnFHT8V(); } // Revert to hub listening...
  else
#endif
    { RFM22ModeStandbyAndClearState(); } // Go to standby to conserve energy.
    1eaa:	0e 94 cd 1b 	call	0x379a	; 0x379a <RFM22ModeStandbyAndClearState()>
  }
    1eae:	1f 91       	pop	r17
    1eb0:	08 95       	ret

00001eb2 <valveSettingTX(bool)>:

// Send current (assumed valve-setting) command and adjust FHT8V_isValveOpen as appropriate.
// Only appropriate when the command is going to be heard by the FHT8V valve itself, not just the hub.
static void valveSettingTX(const bool allowDoubleTX)
    1eb2:	1f 93       	push	r17
    1eb4:	68 2f       	mov	r22, r24
  {
  // Transmit correct valve-setting command that should already be in the buffer...
  FHT8VTXFHTQueueAndSendCmd(FHT8VTXCommandArea, allowDoubleTX);
    1eb6:	81 e7       	ldi	r24, 0x71	; 113
    1eb8:	92 e0       	ldi	r25, 0x02	; 2
    1eba:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)>
    1ebe:	10 91 f3 01 	lds	r17, 0x01F3

// Call just after TX of valve-setting command which is assumed to reflect current TRVPercentOpen state.
// This helps avoiding calling for heat from a central boiler until the valve is really open,
// eg to avoid excess load on (or energy wasting by) the circulation pump.
static void setFHT8V_isValveOpen()
  { FHT8V_isValveOpen = (NominalRadValve.get() >= NominalRadValve.getMinValvePcReallyOpen()); }
    1ec2:	0e 94 3a 04 	call	0x874	; 0x874 <ModelledRadValve::getMinValvePcReallyOpen()>
    1ec6:	10 92 ad 02 	sts	0x02AD, r1
    1eca:	18 17       	cp	r17, r24
    1ecc:	18 f0       	brcs	.+6      	; 0x1ed4 <valveSettingTX(bool)+0x22>
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	80 93 ad 02 	sts	0x02AD, r24
  {
  // Transmit correct valve-setting command that should already be in the buffer...
  FHT8VTXFHTQueueAndSendCmd(FHT8VTXCommandArea, allowDoubleTX);
  // Indicate state that valve should now actually be in (or physically moving to)...
  setFHT8V_isValveOpen();
  }
    1ed4:	1f 91       	pop	r17
    1ed6:	08 95       	ret

00001ed8 <FHT8VSetHC2(unsigned char)>:
  eeprom_smart_erase_byte((uint8_t*)EE_START_FHT8V_HC2);
  }

// Set (non-volatile) HC1 and HC2 for single/primary FHT8V wireless valve under control.
void FHT8VSetHC1(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC1, hc); }
void FHT8VSetHC2(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC2, hc); }
    1ed8:	68 2f       	mov	r22, r24
    1eda:	81 e1       	ldi	r24, 0x11	; 17
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <eeprom_smart_update_byte(unsigned char*, unsigned char)>
    1ee2:	08 95       	ret

00001ee4 <FHT8VSetHC1(unsigned char)>:
  eeprom_smart_erase_byte((uint8_t*)EE_START_FHT8V_HC1);
  eeprom_smart_erase_byte((uint8_t*)EE_START_FHT8V_HC2);
  }

// Set (non-volatile) HC1 and HC2 for single/primary FHT8V wireless valve under control.
void FHT8VSetHC1(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC1, hc); }
    1ee4:	68 2f       	mov	r22, r24
    1ee6:	80 e1       	ldi	r24, 0x10	; 16
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <eeprom_smart_update_byte(unsigned char*, unsigned char)>
    1eee:	08 95       	ret

00001ef0 <FHT8VClearHC()>:
  }

// Clear both housecode parts (and thus disable local valve).
void FHT8VClearHC()
  {
  eeprom_smart_erase_byte((uint8_t*)EE_START_FHT8V_HC1);
    1ef0:	80 e1       	ldi	r24, 0x10	; 16
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <eeprom_smart_erase_byte(unsigned char*)>
  eeprom_smart_erase_byte((uint8_t*)EE_START_FHT8V_HC2);
    1ef8:	81 e1       	ldi	r24, 0x11	; 17
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <eeprom_smart_erase_byte(unsigned char*)>
  }
    1f00:	08 95       	ret

00001f02 <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)>:
//   * trailer  if not null then a stats trailer is appended, built from that info plus a CRC
//   * command  on entry hc1, hc2 (and addresss if used) must be set correctly, this sets the command and extension; never NULL
// The generated command frame can be resent indefinitely.
// The output buffer used must be (at least) FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE bytes.
// Returns pointer to the terminating 0xff on exit.
uint8_t *FHT8VCreateValveSetCmdFrameHT_r(uint8_t *const bptrInitial, const bool doHeader, fht8v_msg_t *const command, const uint8_t TRVPercentOpen, const FullStatsMessageCore_t *trailer)
    1f02:	cf 92       	push	r12
    1f04:	df 92       	push	r13
    1f06:	ef 92       	push	r14
    1f08:	ff 92       	push	r15
    1f0a:	0f 93       	push	r16
    1f0c:	1f 93       	push	r17
    1f0e:	cf 93       	push	r28
    1f10:	df 93       	push	r29
    1f12:	7c 01       	movw	r14, r24
    1f14:	36 2f       	mov	r19, r22
    1f16:	ea 01       	movw	r28, r20
  {
  uint8_t *bptr = bptrInitial;

  command->command = 0x26;
    1f18:	86 e2       	ldi	r24, 0x26	; 38
    1f1a:	8a 83       	std	Y+2, r24	; 0x02
  command->extension = (TRVPercentOpen * 255) / 100;
    1f1c:	8f ef       	ldi	r24, 0xFF	; 255
    1f1e:	28 9f       	mul	r18, r24
    1f20:	c0 01       	movw	r24, r0
    1f22:	11 24       	eor	r1, r1
    1f24:	64 e6       	ldi	r22, 0x64	; 100
    1f26:	70 e0       	ldi	r23, 0x00	; 0
    1f28:	0e 94 42 35 	call	0x6a84	; 0x6a84 <__divmodhi4>
    1f2c:	6b 83       	std	Y+3, r22	; 0x03

  // Add RFM22/32-friendly pre-preamble if requested, eg when calling for heat from the boiler (TRV actually open).
  // NOTE: this requires more buffer space.
  if(doHeader)
    1f2e:	33 23       	and	r19, r19
    1f30:	11 f4       	brne	.+4      	; 0x1f36 <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)+0x34>
    1f32:	c7 01       	movw	r24, r14
    1f34:	09 c0       	rjmp	.+18     	; 0x1f48 <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)+0x46>
    {
    memset(bptr, RFM22_PREAMBLE_BYTE, RFM22_PREAMBLE_BYTES);
    1f36:	c7 01       	movw	r24, r14
    1f38:	6a ea       	ldi	r22, 0xAA	; 170
    1f3a:	70 e0       	ldi	r23, 0x00	; 0
    1f3c:	45 e0       	ldi	r20, 0x05	; 5
    1f3e:	50 e0       	ldi	r21, 0x00	; 0
    1f40:	0e 94 ca 02 	call	0x594	; 0x594 <memset>
    bptr += RFM22_PREAMBLE_BYTES;
    1f44:	c7 01       	movw	r24, r14
    1f46:	05 96       	adiw	r24, 0x05	; 5
    }

  bptr = FHT8VCreate200usBitStreamBptr(bptr, command);
    1f48:	be 01       	movw	r22, r28
    1f4a:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>
    1f4e:	d8 2e       	mov	r13, r24
    1f50:	c9 2e       	mov	r12, r25

#if defined(ALLOW_STATS_TX)
  if(NULL != trailer)
    1f52:	01 15       	cp	r16, r1
    1f54:	11 05       	cpc	r17, r1
    1f56:	79 f0       	breq	.+30     	; 0x1f76 <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)+0x74>
      }
    else
#endif
      {
      // Assume enough space in buffer for largest possible stats message.
      uint8_t * const tail = encodeFullStatsMessageCore(bptr, FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE - (bptr - bptrInitial), getStatsTXLevel(), false, trailer);
    1f58:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <getStatsTXLevel()>
    1f5c:	ac 01       	movw	r20, r24
    1f5e:	6e 2d       	mov	r22, r14
    1f60:	64 5c       	subi	r22, 0xC4	; 196
    1f62:	6d 19       	sub	r22, r13
    1f64:	8d 2d       	mov	r24, r13
    1f66:	9c 2d       	mov	r25, r12
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)>
      if(NULL != tail) { bptr = tail; } // Encoding should not actually fail, but this copes gracefully if so!
    1f6e:	00 97       	sbiw	r24, 0x00	; 0
    1f70:	11 f0       	breq	.+4      	; 0x1f76 <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)+0x74>
    1f72:	d8 2e       	mov	r13, r24
    1f74:	c9 2e       	mov	r12, r25
  // Check that the buffer end was not overrun.
  if(bptr - bptrInitial >= FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE) { panic(F("TX gen too large")); }
#endif

  return(bptr);
  }
    1f76:	8d 2d       	mov	r24, r13
    1f78:	9c 2d       	mov	r25, r12
    1f7a:	df 91       	pop	r29
    1f7c:	cf 91       	pop	r28
    1f7e:	1f 91       	pop	r17
    1f80:	0f 91       	pop	r16
    1f82:	ff 90       	pop	r15
    1f84:	ef 90       	pop	r14
    1f86:	df 90       	pop	r13
    1f88:	cf 90       	pop	r12
    1f8a:	08 95       	ret

00001f8c <FHT8VCreateValveSetCmdFrame_r(unsigned char*, fht8v_msg_t*, unsigned char)>:
//
// Implicitly decides whether to add optional header and trailer components.
//
// NOTE: with SUPPORT_TEMP_TX defined will also insert trailing stats payload where appropriate.
// Also reports local stats as if remote.
uint8_t *FHT8VCreateValveSetCmdFrame_r(uint8_t *const bptr, fht8v_msg_t *command, const uint8_t TRVPercentOpen)
    1f8c:	bf 92       	push	r11
    1f8e:	cf 92       	push	r12
    1f90:	df 92       	push	r13
    1f92:	ef 92       	push	r14
    1f94:	ff 92       	push	r15
    1f96:	0f 93       	push	r16
    1f98:	1f 93       	push	r17
    1f9a:	df 93       	push	r29
    1f9c:	cf 93       	push	r28
    1f9e:	cd b7       	in	r28, 0x3d	; 61
    1fa0:	de b7       	in	r29, 0x3e	; 62
    1fa2:	27 97       	sbiw	r28, 0x07	; 7
    1fa4:	0f b6       	in	r0, 0x3f	; 63
    1fa6:	f8 94       	cli
    1fa8:	de bf       	out	0x3e, r29	; 62
    1faa:	0f be       	out	0x3f, r0	; 63
    1fac:	cd bf       	out	0x3d, r28	; 61
    1fae:	7c 01       	movw	r14, r24
    1fb0:	6b 01       	movw	r12, r22
    1fb2:	b4 2e       	mov	r11, r20
  {
  const bool etmsp = enableTrailingStatsPayload();
    1fb4:	0e 94 53 11 	call	0x22a6	; 0x22a6 <enableTrailingStatsPayload()>
  // OR if adding a trailer that the hub should see.
  // NOTE: this requires more buffer space.
  const bool doHeader = etmsp
#if defined(RFM22_SYNC_BCFH)
  // NOTE: the percentage-open threshold to call for heat from the boiler is set to allow the valve to open significantly, etc.
      || (TRVPercentOpen >= NominalRadValve.getMinValvePcReallyOpen())
    1fb8:	88 23       	and	r24, r24
    1fba:	49 f4       	brne	.+18     	; 0x1fce <FHT8VCreateValveSetCmdFrame_r(unsigned char*, fht8v_msg_t*, unsigned char)+0x42>
    1fbc:	0e 94 3a 04 	call	0x874	; 0x874 <ModelledRadValve::getMinValvePcReallyOpen()>
    1fc0:	60 e0       	ldi	r22, 0x00	; 0
    1fc2:	b8 16       	cp	r11, r24
    1fc4:	08 f0       	brcs	.+2      	; 0x1fc8 <FHT8VCreateValveSetCmdFrame_r(unsigned char*, fht8v_msg_t*, unsigned char)+0x3c>
    1fc6:	61 e0       	ldi	r22, 0x01	; 1
    1fc8:	00 e0       	ldi	r16, 0x00	; 0
    1fca:	10 e0       	ldi	r17, 0x00	; 0
    1fcc:	0e c0       	rjmp	.+28     	; 0x1fea <FHT8VCreateValveSetCmdFrame_r(unsigned char*, fht8v_msg_t*, unsigned char)+0x5e>
//    trailer.tempC16 = getTemperatureC16(); // Use last value read.
//    }
  FullStatsMessageCore_t trailer;
  if(doTrailer)
    {
    populateCoreStats(&trailer);
    1fce:	8e 01       	movw	r16, r28
    1fd0:	0f 5f       	subi	r16, 0xFF	; 255
    1fd2:	1f 4f       	sbci	r17, 0xFF	; 255
    1fd4:	c8 01       	movw	r24, r16
    1fd6:	0e 94 c6 07 	call	0xf8c	; 0xf8c <populateCoreStats(FullStatsMessageCore*)>
    // Record stats as if remote, but secure, and with ID.
    recordCoreStats(true, &trailer);
    1fda:	81 e0       	ldi	r24, 0x01	; 1
    1fdc:	b8 01       	movw	r22, r16
    1fde:	0e 94 77 15 	call	0x2aee	; 0x2aee <recordCoreStats(bool, FullStatsMessageCore const*)>
    // Ensure that no ID is encoded in the message sent on the air since it would be a repeat from the FHT8V frame.
    trailer.containsID = false;
    1fe2:	89 81       	ldd	r24, Y+1	; 0x01
    1fe4:	8e 7f       	andi	r24, 0xFE	; 254
    1fe6:	89 83       	std	Y+1, r24	; 0x01
    1fe8:	61 e0       	ldi	r22, 0x01	; 1
    }

  return(FHT8VCreateValveSetCmdFrameHT_r(bptr, doHeader, command, TRVPercentOpen, (doTrailer ? &trailer : NULL)));
    1fea:	c7 01       	movw	r24, r14
    1fec:	a6 01       	movw	r20, r12
    1fee:	2b 2d       	mov	r18, r11
    1ff0:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)>
  }
    1ff4:	27 96       	adiw	r28, 0x07	; 7
    1ff6:	0f b6       	in	r0, 0x3f	; 63
    1ff8:	f8 94       	cli
    1ffa:	de bf       	out	0x3e, r29	; 62
    1ffc:	0f be       	out	0x3f, r0	; 63
    1ffe:	cd bf       	out	0x3d, r28	; 61
    2000:	cf 91       	pop	r28
    2002:	df 91       	pop	r29
    2004:	1f 91       	pop	r17
    2006:	0f 91       	pop	r16
    2008:	ff 90       	pop	r15
    200a:	ef 90       	pop	r14
    200c:	df 90       	pop	r13
    200e:	cf 90       	pop	r12
    2010:	bf 90       	pop	r11
    2012:	08 95       	ret

00002014 <FHT8VCreateValveSetCmdFrame()>:
// Create FHT8V TRV outgoing valve-setting command frame (terminated with 0xff) in the shared TX buffer.
// The getTRVPercentOpen() result is used to generate the frame.
// HC1 and HC2 are fetched with the FHT8VGetHC1() and FHT8VGetHC2() calls, and address is always 0.
// The generated command frame can be resent indefinitely.
// If no valve is set up then this may simply terminate an empty buffer with 0xff.
void FHT8VCreateValveSetCmdFrame()
    2014:	df 93       	push	r29
    2016:	cf 93       	push	r28
    2018:	00 d0       	rcall	.+0      	; 0x201a <FHT8VCreateValveSetCmdFrame()+0x6>
    201a:	00 d0       	rcall	.+0      	; 0x201c <FHT8VCreateValveSetCmdFrame()+0x8>
    201c:	cd b7       	in	r28, 0x3d	; 61
    201e:	de b7       	in	r29, 0x3e	; 62
  {
  if(!localFHT8VTRVEnabled())
    2020:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <localFHT8VTRVEnabled()>
    2024:	88 23       	and	r24, r24
    2026:	21 f4       	brne	.+8      	; 0x2030 <FHT8VCreateValveSetCmdFrame()+0x1c>
    {
    // Ensure that buffer is terminated, though empty.
    FHT8VTXCommandArea[0] = 0xff;
    2028:	8f ef       	ldi	r24, 0xFF	; 255
    202a:	80 93 71 02 	sts	0x0271, r24
    202e:	1b c0       	rjmp	.+54     	; 0x2066 <FHT8VCreateValveSetCmdFrame()+0x52>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2030:	f9 99       	sbic	0x1f, 1	; 31
    2032:	fe cf       	rjmp	.-4      	; 0x2030 <FHT8VCreateValveSetCmdFrame()+0x1c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2034:	80 e1       	ldi	r24, 0x10	; 16
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	92 bd       	out	0x22, r25	; 34
    203a:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    203c:	f8 9a       	sbi	0x1f, 0	; 31
    203e:	20 b5       	in	r18, 0x20	; 32
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2040:	f9 99       	sbic	0x1f, 1	; 31
    2042:	fe cf       	rjmp	.-4      	; 0x2040 <FHT8VCreateValveSetCmdFrame()+0x2c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2044:	81 e1       	ldi	r24, 0x11	; 17
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	92 bd       	out	0x22, r25	; 34
    204a:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    204c:	f8 9a       	sbi	0x1f, 0	; 31
    204e:	80 b5       	in	r24, 0x20	; 32
    return;
    }

  fht8v_msg_t command;
  command.hc1 = FHT8VGetHC1();
  command.hc2 = FHT8VGetHC2();
    2050:	8a 83       	std	Y+2, r24	; 0x02
    2052:	40 91 f3 01 	lds	r20, 0x01F3
    FHT8VTXCommandArea[0] = 0xff;
    return;
    }

  fht8v_msg_t command;
  command.hc1 = FHT8VGetHC1();
    2056:	29 83       	std	Y+1, r18	; 0x01
  command.hc2 = FHT8VGetHC2();
#ifdef FHT8V_ADR_USED
  command.address = 0;
#endif

  FHT8VCreateValveSetCmdFrame_r(FHT8VTXCommandArea, &command, NominalRadValve.get());
    2058:	81 e7       	ldi	r24, 0x71	; 113
    205a:	92 e0       	ldi	r25, 0x02	; 2
    205c:	be 01       	movw	r22, r28
    205e:	6f 5f       	subi	r22, 0xFF	; 255
    2060:	7f 4f       	sbci	r23, 0xFF	; 255
    2062:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <FHT8VCreateValveSetCmdFrame_r(unsigned char*, fht8v_msg_t*, unsigned char)>
  }
    2066:	0f 90       	pop	r0
    2068:	0f 90       	pop	r0
    206a:	0f 90       	pop	r0
    206c:	0f 90       	pop	r0
    206e:	cf 91       	pop	r28
    2070:	df 91       	pop	r29
    2072:	08 95       	ret

00002074 <doSync(bool)>:
    }

// Run the algorithm to get in sync with the receiver.
// Uses halfSecondCount.
// Iff this returns true then a(nother) call FHT8VPollSyncAndTX_Next() at or before each 0.5s from the cycle start should be made.
static bool doSync(const bool allowDoubleTX)
    2074:	1f 93       	push	r17
    2076:	df 93       	push	r29
    2078:	cf 93       	push	r28
    207a:	00 d0       	rcall	.+0      	; 0x207c <doSync(bool)+0x8>
    207c:	00 d0       	rcall	.+0      	; 0x207e <doSync(bool)+0xa>
    207e:	cd b7       	in	r28, 0x3d	; 61
    2080:	de b7       	in	r29, 0x3e	; 62
    2082:	18 2f       	mov	r17, r24
  {
  // Do not attempt sync at all (and thus do not attempt any other TX) if local FHT8V valve disabled.
  if(!localFHT8VTRVEnabled())
    2084:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <localFHT8VTRVEnabled()>
    2088:	88 23       	and	r24, r24
    208a:	19 f4       	brne	.+6      	; 0x2092 <doSync(bool)+0x1e>
    { syncedWithFHT8V = false; return(false); }
    208c:	10 92 6e 02 	sts	0x026E, r1
    2090:	9e c0       	rjmp	.+316    	; 0x21ce <doSync(bool)+0x15a>

  if(0 == syncStateFHT8V)
    2092:	80 91 70 02 	lds	r24, 0x0270
    2096:	88 23       	and	r24, r24
    2098:	39 f4       	brne	.+14     	; 0x20a8 <doSync(bool)+0x34>
    {
    // Starting sync process.
    syncStateFHT8V = 241;
    209a:	81 ef       	ldi	r24, 0xF1	; 241
    209c:	80 93 70 02 	sts	0x0270, r24
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_TIMESTAMP();
    DEBUG_SERIAL_PRINT(' ');
    //DEBUG_SERIAL_PRINTLN_FLASHSTRING("FHT8V syncing...");
#endif
    serialPrintlnAndFlush(F("FHT8V SYNC..."));
    20a0:	89 ed       	ldi	r24, 0xD9	; 217
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <serialPrintlnAndFlush(__FlashStringHelper const*)>
    }

  if(syncStateFHT8V >= 2)
    20a8:	20 91 70 02 	lds	r18, 0x0270
    20ac:	22 30       	cpi	r18, 0x02	; 2
    20ae:	08 f4       	brcc	.+2      	; 0x20b2 <doSync(bool)+0x3e>
    20b0:	45 c0       	rjmp	.+138    	; 0x213c <doSync(bool)+0xc8>
    {
    // Generate and send sync (command 12) message immediately for odd-numbered ticks, ie once per second.
    if(syncStateFHT8V & 1)
    20b2:	20 ff       	sbrs	r18, 0
    20b4:	2b c0       	rjmp	.+86     	; 0x210c <doSync(bool)+0x98>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    20b6:	f9 99       	sbic	0x1f, 1	; 31
    20b8:	fe cf       	rjmp	.-4      	; 0x20b6 <doSync(bool)+0x42>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    20ba:	80 e1       	ldi	r24, 0x10	; 16
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	92 bd       	out	0x22, r25	; 34
    20c0:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    20c2:	f8 9a       	sbi	0x1f, 0	; 31
    20c4:	30 b5       	in	r19, 0x20	; 32
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    20c6:	f9 99       	sbic	0x1f, 1	; 31
    20c8:	fe cf       	rjmp	.-4      	; 0x20c6 <doSync(bool)+0x52>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    20ca:	81 e1       	ldi	r24, 0x11	; 17
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	92 bd       	out	0x22, r25	; 34
    20d0:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    20d2:	f8 9a       	sbi	0x1f, 0	; 31
    20d4:	80 b5       	in	r24, 0x20	; 32
      {
      fht8v_msg_t command;
      command.hc1 = FHT8VGetHC1();
      command.hc2 = FHT8VGetHC2();
    20d6:	8a 83       	std	Y+2, r24	; 0x02
      command.command = 0x2c; // Command 12, extension byte present.
    20d8:	8c e2       	ldi	r24, 0x2C	; 44
    20da:	8b 83       	std	Y+3, r24	; 0x03
      command.extension = syncStateFHT8V;
    20dc:	2c 83       	std	Y+4, r18	; 0x04
    {
    // Generate and send sync (command 12) message immediately for odd-numbered ticks, ie once per second.
    if(syncStateFHT8V & 1)
      {
      fht8v_msg_t command;
      command.hc1 = FHT8VGetHC1();
    20de:	39 83       	std	Y+1, r19	; 0x01
      command.hc2 = FHT8VGetHC2();
      command.command = 0x2c; // Command 12, extension byte present.
      command.extension = syncStateFHT8V;
      FHT8VCreate200usBitStreamBptr(FHT8VTXCommandArea, &command);
    20e0:	81 e7       	ldi	r24, 0x71	; 113
    20e2:	92 e0       	ldi	r25, 0x02	; 2
    20e4:	be 01       	movw	r22, r28
    20e6:	6f 5f       	subi	r22, 0xFF	; 255
    20e8:	7f 4f       	sbci	r23, 0xFF	; 255
    20ea:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>
      if(halfSecondCount > 0)
    20ee:	80 91 6d 02 	lds	r24, 0x026D
    20f2:	88 23       	and	r24, r24
    20f4:	31 f0       	breq	.+12     	; 0x2102 <doSync(bool)+0x8e>
#endif
      }
#endif

    // Sleep until exactly the right time.
    sleepUntilSubCycleTime(sleepUntil);
    20f6:	82 95       	swap	r24
    20f8:	88 0f       	add	r24, r24
    20fa:	88 0f       	add	r24, r24
    20fc:	80 7c       	andi	r24, 0xC0	; 192
    20fe:	0e 94 b2 1a 	call	0x3564	; 0x3564 <sleepUntilSubCycleTime(unsigned char)>
      command.command = 0x2c; // Command 12, extension byte present.
      command.extension = syncStateFHT8V;
      FHT8VCreate200usBitStreamBptr(FHT8VTXCommandArea, &command);
      if(halfSecondCount > 0)
        { sleepUntilSubCycleTimeOptionalRX((SUB_CYCLE_TICKS_PER_S/2) * halfSecondCount); }
      FHT8VTXFHTQueueAndSendCmd(FHT8VTXCommandArea, allowDoubleTX); // SEND SYNC
    2102:	81 e7       	ldi	r24, 0x71	; 113
    2104:	92 e0       	ldi	r25, 0x02	; 2
    2106:	61 2f       	mov	r22, r17
    2108:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)>
      DEBUG_SERIAL_PRINTLN();
#endif
      }

    // After penultimate sync TX set up time to sending of final sync command.
    if(1 == --syncStateFHT8V)
    210c:	80 91 70 02 	lds	r24, 0x0270
    2110:	81 50       	subi	r24, 0x01	; 1
    2112:	80 93 70 02 	sts	0x0270, r24
    2116:	81 30       	cpi	r24, 0x01	; 1
    2118:	09 f0       	breq	.+2      	; 0x211c <doSync(bool)+0xa8>
    211a:	58 c0       	rjmp	.+176    	; 0x21cc <doSync(bool)+0x158>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    211c:	f9 99       	sbic	0x1f, 1	; 31
    211e:	fe cf       	rjmp	.-4      	; 0x211c <doSync(bool)+0xa8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2120:	81 e1       	ldi	r24, 0x11	; 17
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	92 bd       	out	0x22, r25	; 34
    2126:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2128:	f8 9a       	sbi	0x1f, 0	; 31
    212a:	90 b5       	in	r25, 0x20	; 32
      {
      // Set up timer to sent sync final (0) command
      // with formula: t = 0.5 * (HC2 & 7) + 4 seconds.
      halfSecondsToNextFHT8VTX = (FHT8VGetHC2() & 7) + 8; // Note units of half-seconds for this counter.
      halfSecondsToNextFHT8VTX -= (MAX_HSC - halfSecondCount);
    212c:	80 91 6d 02 	lds	r24, 0x026D
    2130:	8b 5f       	subi	r24, 0xFB	; 251
    2132:	97 70       	andi	r25, 0x07	; 7
    2134:	89 0f       	add	r24, r25
    2136:	80 93 6f 02 	sts	0x026F, r24
    213a:	46 c0       	rjmp	.+140    	; 0x21c8 <doSync(bool)+0x154>
      }
    }

  else // syncStateFHT8V == 1 so waiting to send sync final (0) command...
    {
    if(--halfSecondsToNextFHT8VTX == 0)
    213c:	80 91 6f 02 	lds	r24, 0x026F
    2140:	81 50       	subi	r24, 0x01	; 1
    2142:	80 93 6f 02 	sts	0x026F, r24
    2146:	88 23       	and	r24, r24
    2148:	09 f0       	breq	.+2      	; 0x214c <doSync(bool)+0xd8>
    214a:	40 c0       	rjmp	.+128    	; 0x21cc <doSync(bool)+0x158>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    214c:	f9 99       	sbic	0x1f, 1	; 31
    214e:	fe cf       	rjmp	.-4      	; 0x214c <doSync(bool)+0xd8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2150:	80 e1       	ldi	r24, 0x10	; 16
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	92 bd       	out	0x22, r25	; 34
    2156:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2158:	f8 9a       	sbi	0x1f, 0	; 31
    215a:	20 b5       	in	r18, 0x20	; 32
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    215c:	f9 99       	sbic	0x1f, 1	; 31
    215e:	fe cf       	rjmp	.-4      	; 0x215c <doSync(bool)+0xe8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2160:	81 e1       	ldi	r24, 0x11	; 17
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	92 bd       	out	0x22, r25	; 34
    2166:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2168:	f8 9a       	sbi	0x1f, 0	; 31
    216a:	80 b5       	in	r24, 0x20	; 32
      {
      // Send sync final command.
      fht8v_msg_t command;
      command.hc1 = FHT8VGetHC1();
      command.hc2 = FHT8VGetHC2();
    216c:	8a 83       	std	Y+2, r24	; 0x02
      command.command = 0x20; // Command 0, extension byte present.
    216e:	80 e2       	ldi	r24, 0x20	; 32
    2170:	8b 83       	std	Y+3, r24	; 0x03
      command.extension = 0; // DHD20130324: could set to TRVPercentOpen, but anything other than zero seems to lock up FHT8V-3 units.
    2172:	1c 82       	std	Y+4, r1	; 0x04
      FHT8V_isValveOpen = false; // Note that valve will be closed (0%) upon receipt.
    2174:	10 92 ad 02 	sts	0x02AD, r1
    {
    if(--halfSecondsToNextFHT8VTX == 0)
      {
      // Send sync final command.
      fht8v_msg_t command;
      command.hc1 = FHT8VGetHC1();
    2178:	29 83       	std	Y+1, r18	; 0x01
      command.hc2 = FHT8VGetHC2();
      command.command = 0x20; // Command 0, extension byte present.
      command.extension = 0; // DHD20130324: could set to TRVPercentOpen, but anything other than zero seems to lock up FHT8V-3 units.
      FHT8V_isValveOpen = false; // Note that valve will be closed (0%) upon receipt.
      FHT8VCreate200usBitStreamBptr(FHT8VTXCommandArea, &command);      
    217a:	81 e7       	ldi	r24, 0x71	; 113
    217c:	92 e0       	ldi	r25, 0x02	; 2
    217e:	be 01       	movw	r22, r28
    2180:	6f 5f       	subi	r22, 0xFF	; 255
    2182:	7f 4f       	sbci	r23, 0xFF	; 255
    2184:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>
      if(halfSecondCount > 0) { sleepUntilSubCycleTimeOptionalRX((SUB_CYCLE_TICKS_PER_S/2) * halfSecondCount); }
    2188:	80 91 6d 02 	lds	r24, 0x026D
    218c:	88 23       	and	r24, r24
    218e:	31 f0       	breq	.+12     	; 0x219c <doSync(bool)+0x128>
#endif
      }
#endif

    // Sleep until exactly the right time.
    sleepUntilSubCycleTime(sleepUntil);
    2190:	82 95       	swap	r24
    2192:	88 0f       	add	r24, r24
    2194:	88 0f       	add	r24, r24
    2196:	80 7c       	andi	r24, 0xC0	; 192
    2198:	0e 94 b2 1a 	call	0x3564	; 0x3564 <sleepUntilSubCycleTime(unsigned char)>
      command.command = 0x20; // Command 0, extension byte present.
      command.extension = 0; // DHD20130324: could set to TRVPercentOpen, but anything other than zero seems to lock up FHT8V-3 units.
      FHT8V_isValveOpen = false; // Note that valve will be closed (0%) upon receipt.
      FHT8VCreate200usBitStreamBptr(FHT8VTXCommandArea, &command);      
      if(halfSecondCount > 0) { sleepUntilSubCycleTimeOptionalRX((SUB_CYCLE_TICKS_PER_S/2) * halfSecondCount); }
      FHT8VTXFHTQueueAndSendCmd(FHT8VTXCommandArea, allowDoubleTX); // SEND SYNC FINAL
    219c:	81 e7       	ldi	r24, 0x71	; 113
    219e:	92 e0       	ldi	r25, 0x02	; 2
    21a0:	61 2f       	mov	r22, r17
    21a2:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)>
#if 0 && defined(DEBUG)
      DEBUG_SERIAL_TIMESTAMP();
      DEBUG_SERIAL_PRINT(' ');
      //DEBUG_SERIAL_PRINTLN_FLASHSTRING(" FHT8V SYNC FINAL");
#endif
      serialPrintlnAndFlush(F("FHT8V SYNC FINAL"));
    21a6:	88 ec       	ldi	r24, 0xC8	; 200
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <serialPrintlnAndFlush(__FlashStringHelper const*)>

      // Assume now in sync...
      syncedWithFHT8V = true;
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    21b0:	80 93 6e 02 	sts	0x026E, r24
      // On PICAXE there was no time to recompute valve-setting command immediately after SYNC FINAL SEND...
      // Mark buffer as empty to get it filled with the real TRV valve-setting command ASAP.
      //*FHT8VTXCommandArea = 0xff;

      // On ATmega there is plenty of CPU heft to fill command buffer immediately with valve-setting command.
      FHT8VCreateValveSetCmdFrame();
    21b4:	0e 94 0a 10 	call	0x2014	; 0x2014 <FHT8VCreateValveSetCmdFrame()>

      // Set up correct delay to next TX; no more this minor cycle...
      halfSecondsToNextFHT8VTX = FHT8VTXGapHalfSeconds(command.hc2, halfSecondCount);
    21b8:	90 91 6d 02 	lds	r25, 0x026D
    21bc:	9d 51       	subi	r25, 0x1D	; 29
    21be:	8a 81       	ldd	r24, Y+2	; 0x02
    21c0:	87 70       	andi	r24, 0x07	; 7
    21c2:	98 0f       	add	r25, r24
    21c4:	90 93 6f 02 	sts	0x026F, r25
    21c8:	80 e0       	ldi	r24, 0x00	; 0
    21ca:	01 c0       	rjmp	.+2      	; 0x21ce <doSync(bool)+0x15a>
      return(false);
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    }

  // For simplicity, insist on being called every half-second during sync.
  // TODO: avoid forcing most of these calls to save some CPU/energy and improve responsiveness.
  return(true);
  }
    21ce:	0f 90       	pop	r0
    21d0:	0f 90       	pop	r0
    21d2:	0f 90       	pop	r0
    21d4:	0f 90       	pop	r0
    21d6:	cf 91       	pop	r28
    21d8:	df 91       	pop	r29
    21da:	1f 91       	pop	r17
    21dc:	08 95       	ret

000021de <FHT8VPollSyncAndTX_Next(bool)>:
//
// ALSO MANAGES RX FROM OTHER NODES WHEN ENABLED IN HUB MODE.
//
// Iff this returns false then no further TX slots will be needed
// (and thus this routine need not be called again) on this minor cycle
bool FHT8VPollSyncAndTX_Next(const bool allowDoubleTX)
    21de:	1f 93       	push	r17
    21e0:	18 2f       	mov	r17, r24
  {
  ++halfSecondCount; // Reflects count of calls since _First(), ie how many 
    21e2:	90 91 6d 02 	lds	r25, 0x026D
    21e6:	9f 5f       	subi	r25, 0xFF	; 255
    21e8:	90 93 6d 02 	sts	0x026D, r25
#else

  // Give priority to getting in sync over all other tasks, though pass control to them afterwards...
  // NOTE: startup state, or state to force resync is: syncedWithFHT8V = 0 AND syncStateFHT8V = 0
  // Always make maximum effort to be heard by valve when syncing (ie do double TX).
  if(!syncedWithFHT8V) { return(doSync(true)); }
    21ec:	80 91 6e 02 	lds	r24, 0x026E
    21f0:	88 23       	and	r24, r24
    21f2:	21 f4       	brne	.+8      	; 0x21fc <FHT8VPollSyncAndTX_Next(bool)+0x1e>
    21f4:	81 e0       	ldi	r24, 0x01	; 1
    21f6:	0e 94 3a 10 	call	0x2074	; 0x2074 <doSync(bool)>
    21fa:	27 c0       	rjmp	.+78     	; 0x224a <FHT8VPollSyncAndTX_Next(bool)+0x6c>

  // TX is due this slot so do it (and no more will be needed this minor cycle).
  if(0 == --halfSecondsToNextFHT8VTX)
    21fc:	80 91 6f 02 	lds	r24, 0x026F
    2200:	81 50       	subi	r24, 0x01	; 1
    2202:	80 93 6f 02 	sts	0x026F, r24
    2206:	88 23       	and	r24, r24
    2208:	11 f0       	breq	.+4      	; 0x220e <FHT8VPollSyncAndTX_Next(bool)+0x30>
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	1e c0       	rjmp	.+60     	; 0x224a <FHT8VPollSyncAndTX_Next(bool)+0x6c>
#endif
      }
#endif

    // Sleep until exactly the right time.
    sleepUntilSubCycleTime(sleepUntil);
    220e:	89 2f       	mov	r24, r25
    2210:	82 95       	swap	r24
    2212:	88 0f       	add	r24, r24
    2214:	88 0f       	add	r24, r24
    2216:	80 7c       	andi	r24, 0xC0	; 192
    2218:	0e 94 b2 1a 	call	0x3564	; 0x3564 <sleepUntilSubCycleTime(unsigned char)>

  // TX is due this slot so do it (and no more will be needed this minor cycle).
  if(0 == --halfSecondsToNextFHT8VTX)
    {
    sleepUntilSubCycleTimeOptionalRX((SUB_CYCLE_TICKS_PER_S/2) * halfSecondCount); // Sleep.
    valveSettingTX(allowDoubleTX); // Should be heard by valve.
    221c:	81 2f       	mov	r24, r17
    221e:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <valveSettingTX(bool)>
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_TIMESTAMP();
    DEBUG_SERIAL_PRINT(' ');
    // DEBUG_SERIAL_PRINTLN_FLASHSTRING(" FHT8V TX");
#endif
    serialPrintlnAndFlush(F("FHT8V TX"));
    2222:	8f eb       	ldi	r24, 0xBF	; 191
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <serialPrintlnAndFlush(__FlashStringHelper const*)>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    222a:	f9 99       	sbic	0x1f, 1	; 31
    222c:	fe cf       	rjmp	.-4      	; 0x222a <FHT8VPollSyncAndTX_Next(bool)+0x4c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    222e:	81 e1       	ldi	r24, 0x11	; 17
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	92 bd       	out	0x22, r25	; 34
    2234:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2236:	f8 9a       	sbi	0x1f, 0	; 31
    2238:	90 b5       	in	r25, 0x20	; 32

    // Set up correct delay to next TX.
    halfSecondsToNextFHT8VTX = FHT8VTXGapHalfSeconds(FHT8VGetHC2(), halfSecondCount);
    223a:	80 91 6d 02 	lds	r24, 0x026D
    223e:	8d 51       	subi	r24, 0x1D	; 29
    2240:	97 70       	andi	r25, 0x07	; 7
    2242:	89 0f       	add	r24, r25
    2244:	80 93 6f 02 	sts	0x026F, r24
    2248:	80 e0       	ldi	r24, 0x00	; 0
    }

  // Will need to TX in a following slot in this minor cycle...
  return(true);
#endif
  }
    224a:	1f 91       	pop	r17
    224c:	08 95       	ret

0000224e <FHT8VPollSyncAndTX_First(bool)>:
//
// Iff this returns true then call FHT8VPollSyncAndTX_Next() at or before each 0.5s from the cycle start
// to allow for possible transmissions.
//
// See https://sourceforge.net/p/opentrv/wiki/FHT%20Protocol/ for the underlying protocol.
bool FHT8VPollSyncAndTX_First(const bool allowDoubleTX)
    224e:	98 2f       	mov	r25, r24
  {
  halfSecondCount = 0;
    2250:	10 92 6d 02 	sts	0x026D, r1
#else

  // Give priority to getting in sync over all other tasks, though pass control to them afterwards...
  // NOTE: startup state, or state to force resync is: syncedWithFHT8V = 0 AND syncStateFHT8V = 0
  // Always make maximum effort to be heard by valve when syncing (ie do double TX).
  if(!syncedWithFHT8V) { return(doSync(true)); }
    2254:	80 91 6e 02 	lds	r24, 0x026E
    2258:	88 23       	and	r24, r24
    225a:	21 f4       	brne	.+8      	; 0x2264 <FHT8VPollSyncAndTX_First(bool)+0x16>
    225c:	81 e0       	ldi	r24, 0x01	; 1
    225e:	0e 94 3a 10 	call	0x2074	; 0x2074 <doSync(bool)>
    2262:	08 95       	ret
#if 0 && defined(DEBUG)
   if(0 == halfSecondsToNextFHT8VTX) { panic(F("FHT8V hs count 0 too soon")); }
#endif

  // If no TX required in this minor cycle then can return false quickly (having decremented ticks-to-next-TX value suitably).
  if(halfSecondsToNextFHT8VTX > MAX_HSC+1)
    2264:	80 91 6f 02 	lds	r24, 0x026F
    2268:	85 30       	cpi	r24, 0x05	; 5
    226a:	28 f0       	brcs	.+10     	; 0x2276 <FHT8VPollSyncAndTX_First(bool)+0x28>
    {
    halfSecondsToNextFHT8VTX -= (MAX_HSC+1);
    226c:	84 50       	subi	r24, 0x04	; 4
    226e:	80 93 6f 02 	sts	0x026F, r24
    2272:	80 e0       	ldi	r24, 0x00	; 0
    2274:	08 95       	ret
    return(false); // No TX this minor cycle.
    }

  // TX is due this (first) slot so do it (and no more will be needed this minor cycle).
  if(0 == --halfSecondsToNextFHT8VTX)
    2276:	81 50       	subi	r24, 0x01	; 1
    2278:	80 93 6f 02 	sts	0x026F, r24
    227c:	88 23       	and	r24, r24
    227e:	11 f0       	breq	.+4      	; 0x2284 <FHT8VPollSyncAndTX_First(bool)+0x36>
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	08 95       	ret
    {
    valveSettingTX(allowDoubleTX); // Should be heard by valve.
    2284:	89 2f       	mov	r24, r25
    2286:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <valveSettingTX(bool)>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    228a:	f9 99       	sbic	0x1f, 1	; 31
    228c:	fe cf       	rjmp	.-4      	; 0x228a <FHT8VPollSyncAndTX_First(bool)+0x3c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    228e:	81 e1       	ldi	r24, 0x11	; 17
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	92 bd       	out	0x22, r25	; 34
    2294:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2296:	f8 9a       	sbi	0x1f, 0	; 31
    2298:	80 b5       	in	r24, 0x20	; 32
    DEBUG_SERIAL_PRINT(' ');
    // DEBUG_SERIAL_PRINTLN_FLASHSTRING(" FHT8V TX");
    serialPrintlnAndFlush(F("FHT8V TX"));
#endif
    // Set up correct delay to next TX.
    halfSecondsToNextFHT8VTX = FHT8VTXGapHalfSeconds(FHT8VGetHC2(), 0);
    229a:	87 70       	andi	r24, 0x07	; 7
    229c:	8d 51       	subi	r24, 0x1D	; 29
    229e:	80 93 6f 02 	sts	0x026F, r24
    22a2:	80 e0       	ldi	r24, 0x00	; 0
    }

  // Will need to TX in a following slot in this minor cycle...
  return(true);
#endif
  }
    22a4:	08 95       	ret

000022a6 <enableTrailingStatsPayload()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    22a6:	f9 99       	sbic	0x1f, 1	; 31
    22a8:	fe cf       	rjmp	.-4      	; 0x22a6 <enableTrailingStatsPayload()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    22aa:	8c e1       	ldi	r24, 0x1C	; 28
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	92 bd       	out	0x22, r25	; 34
    22b0:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    22b2:	f8 9a       	sbi	0x1f, 0	; 31
    22b4:	80 b5       	in	r24, 0x20	; 32
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	81 38       	cpi	r24, 0x81	; 129
    22ba:	08 f4       	brcc	.+2      	; 0x22be <enableTrailingStatsPayload()+0x18>
    22bc:	91 e0       	ldi	r25, 0x01	; 1
#if !defined(enableTrailingStatsPayload)
// Returns true if an unencrypted minimal trailing static payload and similar (eg bare stats transmission) is permitted.
// True if the TX_ENABLE value is no higher than stTXmostUnsec.
// Some filtering may be required even if this is true.
// TODO: allow cacheing in RAM for speed.
bool enableTrailingStatsPayload() { return(eeprom_read_byte((uint8_t *)EE_START_STATS_TX_ENABLE) <= stTXmostUnsec); }
    22be:	89 2f       	mov	r24, r25
    22c0:	08 95       	ret

000022c2 <quickValidateRawSimpleJSONMessage(char const*)>:
// Returns true unless the buffer clearly does not contain a possible valid raw JSON message.
// This message is expected to be one object wrapped in '{' and '}'
// and containing only ASCII printable/non-control characters in the range [32,126].
// The message must be no longer than MSG_JSON_MAX_LENGTH excluding trailing null.
// This only does a quick validation for egregious errors.
bool quickValidateRawSimpleJSONMessage(const char * const buf)
    22c2:	fc 01       	movw	r30, r24
  {
  if('{' != buf[0]) { return(false); }
    22c4:	80 81       	ld	r24, Z
    22c6:	8b 37       	cpi	r24, 0x7B	; 123
    22c8:	a9 f4       	brne	.+42     	; 0x22f4 <quickValidateRawSimpleJSONMessage(char const*)+0x32>
  // Scan up to maximum length for terminating '}'.
  const char *p = buf + 1;
  for(int i = 1; i < MSG_JSON_MAX_LENGTH; ++i)
    22ca:	9f 01       	movw	r18, r30
    22cc:	2a 5c       	subi	r18, 0xCA	; 202
    22ce:	3f 4f       	sbci	r19, 0xFF	; 255
    {
    const char c = *p++;
    22d0:	91 81       	ldd	r25, Z+1	; 0x01
    // With a terminating '}' (followed by '\0') the message is superficially valid.
    if(('}' == c) && ('\0' == *p)) { return(true); }
    22d2:	9d 37       	cpi	r25, 0x7D	; 125
    22d4:	29 f4       	brne	.+10     	; 0x22e0 <quickValidateRawSimpleJSONMessage(char const*)+0x1e>
    22d6:	82 81       	ldd	r24, Z+2	; 0x02
    22d8:	88 23       	and	r24, r24
    22da:	11 f4       	brne	.+4      	; 0x22e0 <quickValidateRawSimpleJSONMessage(char const*)+0x1e>
    22dc:	81 e0       	ldi	r24, 0x01	; 1
    22de:	08 95       	ret
    // Non-printable/control character makes the message invalid.
    if((c < 32) || (c > 126)) { return(false); }
    22e0:	89 2f       	mov	r24, r25
    22e2:	80 52       	subi	r24, 0x20	; 32
    22e4:	8f 35       	cpi	r24, 0x5F	; 95
    22e6:	30 f4       	brcc	.+12     	; 0x22f4 <quickValidateRawSimpleJSONMessage(char const*)+0x32>
    // Premature end of message renders it invalid.
    if('\0' == c) { return(false); }
    22e8:	99 23       	and	r25, r25
    22ea:	21 f0       	breq	.+8      	; 0x22f4 <quickValidateRawSimpleJSONMessage(char const*)+0x32>
    22ec:	31 96       	adiw	r30, 0x01	; 1
bool quickValidateRawSimpleJSONMessage(const char * const buf)
  {
  if('{' != buf[0]) { return(false); }
  // Scan up to maximum length for terminating '}'.
  const char *p = buf + 1;
  for(int i = 1; i < MSG_JSON_MAX_LENGTH; ++i)
    22ee:	e2 17       	cp	r30, r18
    22f0:	f3 07       	cpc	r31, r19
    22f2:	71 f7       	brne	.-36     	; 0x22d0 <quickValidateRawSimpleJSONMessage(char const*)+0xe>
    22f4:	80 e0       	ldi	r24, 0x00	; 0
    if((c < 32) || (c > 126)) { return(false); }
    // Premature end of message renders it invalid.
    if('\0' == c) { return(false); }
    }
  return(false); // Bad (unterminated) message.
  }
    22f6:	08 95       	ret

000022f8 <adjustJSONMsgForTXAndComputeCRC(char*)>:
// Computes and returns 0x5B 7-bit CRC in range [0,127]
// or 0xff if the JSON message obviously invalid and should not be TXed.
// The CRC is initialised with the initial '{' character.
// NOTE: adjusts content in place.
#define adjustJSONMsgForTXAndComputeCRC_ERR 0xff // Error return value.
uint8_t adjustJSONMsgForTXAndComputeCRC(char * const bptr)
    22f8:	0f 93       	push	r16
    22fa:	1f 93       	push	r17
    22fc:	18 2f       	mov	r17, r24
    22fe:	09 2f       	mov	r16, r25
  {
  // Do initial quick validation before computing CRC, etc,
  if(!quickValidateRawSimpleJSONMessage(bptr)) { return(adjustJSONMsgForTXAndComputeCRC_ERR); }
    2300:	0e 94 61 11 	call	0x22c2	; 0x22c2 <quickValidateRawSimpleJSONMessage(char const*)>
    2304:	88 23       	and	r24, r24
    2306:	09 f4       	brne	.+2      	; 0x230a <adjustJSONMsgForTXAndComputeCRC(char*)+0x12>
    2308:	51 c0       	rjmp	.+162    	; 0x23ac <adjustJSONMsgForTXAndComputeCRC(char*)+0xb4>
    230a:	81 2f       	mov	r24, r17
    230c:	90 2f       	mov	r25, r16
    230e:	9c 01       	movw	r18, r24
    2310:	f9 01       	movw	r30, r18
    2312:	6b e7       	ldi	r22, 0x7B	; 123
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    2314:	11 e0       	ldi	r17, 0x01	; 1
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
    2316:	77 e3       	ldi	r23, 0x37	; 55
    2318:	44 c0       	rjmp	.+136    	; 0x23a2 <adjustJSONMsgForTXAndComputeCRC(char*)+0xaa>
  uint8_t crc = '{';
  for(char *p = bptr; *++p; ) // Skip first char ('{'); loop until '\0'.
    {
    const char c = *p;
//    if(c & 0x80) { return(adjustJSONMsgForTXAndComputeCRC_ERR); } // No high-bits should be set!
    if(('}' == c) && ('\0' == *(p+1)))
    231a:	9d 37       	cpi	r25, 0x7D	; 125
    231c:	19 f5       	brne	.+70     	; 0x2364 <adjustJSONMsgForTXAndComputeCRC(char*)+0x6c>
    231e:	81 81       	ldd	r24, Z+1	; 0x01
    2320:	88 23       	and	r24, r24
    2322:	01 f5       	brne	.+64     	; 0x2364 <adjustJSONMsgForTXAndComputeCRC(char*)+0x6c>
      {
      seenTrailingClosingBrace = true;
      const char newC = c | 0x80;
      *p = newC; // Set high bit.
    2324:	8d ef       	ldi	r24, 0xFD	; 253
    2326:	80 83       	st	Z, r24
    2328:	40 e8       	ldi	r20, 0x80	; 128
    232a:	20 e0       	ldi	r18, 0x00	; 0
    232c:	30 e0       	ldi	r19, 0x00	; 0
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    232e:	71 e0       	ldi	r23, 0x01	; 1
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
    2330:	57 e3       	ldi	r21, 0x37	; 55
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
    2332:	86 2f       	mov	r24, r22
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	e6 e0       	ldi	r30, 0x06	; 6
    2338:	96 95       	lsr	r25
    233a:	87 95       	ror	r24
    233c:	ea 95       	dec	r30
    233e:	e1 f7       	brne	.-8      	; 0x2338 <adjustJSONMsgForTXAndComputeCRC(char*)+0x40>
    2340:	98 2f       	mov	r25, r24
    2342:	91 70       	andi	r25, 0x01	; 1
        if(0 != (datum & i)) { bit = !bit; }
    2344:	84 2f       	mov	r24, r20
    2346:	8d 7f       	andi	r24, 0xFD	; 253
    2348:	09 f0       	breq	.+2      	; 0x234c <adjustJSONMsgForTXAndComputeCRC(char*)+0x54>
    234a:	97 27       	eor	r25, r23
        crc <<= 1;
    234c:	66 0f       	add	r22, r22
        if(bit) { crc ^= 0x37; }
    234e:	91 11       	cpse	r25, r1
    2350:	65 27       	eor	r22, r21
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
    2352:	46 95       	lsr	r20
    2354:	2f 5f       	subi	r18, 0xFF	; 255
    2356:	3f 4f       	sbci	r19, 0xFF	; 255
    2358:	28 30       	cpi	r18, 0x08	; 8
    235a:	31 05       	cpc	r19, r1
    235c:	51 f7       	brne	.-44     	; 0x2332 <adjustJSONMsgForTXAndComputeCRC(char*)+0x3a>
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
        }
    return(crc & 0x7f);
    235e:	86 2f       	mov	r24, r22
    2360:	8f 77       	andi	r24, 0x7F	; 127
    2362:	25 c0       	rjmp	.+74     	; 0x23ae <adjustJSONMsgForTXAndComputeCRC(char*)+0xb6>
      const char newC = c | 0x80;
      *p = newC; // Set high bit.
      crc = crc7_5B_update(crc, (uint8_t)newC); // Update CRC.
      return(crc);
      }
    crc = crc7_5B_update(crc, (uint8_t)c); // Update CRC.
    2364:	30 e8       	ldi	r19, 0x80	; 128
    2366:	40 e0       	ldi	r20, 0x00	; 0
    2368:	50 e0       	ldi	r21, 0x00	; 0
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    236a:	a9 2f       	mov	r26, r25
    236c:	b0 e0       	ldi	r27, 0x00	; 0
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
    236e:	86 2f       	mov	r24, r22
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	06 e0       	ldi	r16, 0x06	; 6
    2374:	96 95       	lsr	r25
    2376:	87 95       	ror	r24
    2378:	0a 95       	dec	r16
    237a:	e1 f7       	brne	.-8      	; 0x2374 <adjustJSONMsgForTXAndComputeCRC(char*)+0x7c>
    237c:	28 2f       	mov	r18, r24
    237e:	21 70       	andi	r18, 0x01	; 1
        if(0 != (datum & i)) { bit = !bit; }
    2380:	83 2f       	mov	r24, r19
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	8a 23       	and	r24, r26
    2386:	9b 23       	and	r25, r27
    2388:	89 2b       	or	r24, r25
    238a:	09 f0       	breq	.+2      	; 0x238e <adjustJSONMsgForTXAndComputeCRC(char*)+0x96>
    238c:	21 27       	eor	r18, r17
        crc <<= 1;
    238e:	66 0f       	add	r22, r22
        if(bit) { crc ^= 0x37; }
    2390:	21 11       	cpse	r18, r1
    2392:	67 27       	eor	r22, r23
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
    2394:	36 95       	lsr	r19
    2396:	4f 5f       	subi	r20, 0xFF	; 255
    2398:	5f 4f       	sbci	r21, 0xFF	; 255
    239a:	48 30       	cpi	r20, 0x08	; 8
    239c:	51 05       	cpc	r21, r1
    239e:	39 f7       	brne	.-50     	; 0x236e <adjustJSONMsgForTXAndComputeCRC(char*)+0x76>
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
        }
    return(crc & 0x7f);
    23a0:	6f 77       	andi	r22, 0x7F	; 127
  // Do initial quick validation before computing CRC, etc,
  if(!quickValidateRawSimpleJSONMessage(bptr)) { return(adjustJSONMsgForTXAndComputeCRC_ERR); }
//  if('{' != *bptr) { return(adjustJSONMsgForTXAndComputeCRC_ERR); }
  bool seenTrailingClosingBrace = false;
  uint8_t crc = '{';
  for(char *p = bptr; *++p; ) // Skip first char ('{'); loop until '\0'.
    23a2:	31 96       	adiw	r30, 0x01	; 1
    23a4:	90 81       	ld	r25, Z
    23a6:	99 23       	and	r25, r25
    23a8:	09 f0       	breq	.+2      	; 0x23ac <adjustJSONMsgForTXAndComputeCRC(char*)+0xb4>
    23aa:	b7 cf       	rjmp	.-146    	; 0x231a <adjustJSONMsgForTXAndComputeCRC(char*)+0x22>
    23ac:	8f ef       	ldi	r24, 0xFF	; 255
      }
    crc = crc7_5B_update(crc, (uint8_t)c); // Update CRC.
    }
  if(!seenTrailingClosingBrace) { return(adjustJSONMsgForTXAndComputeCRC_ERR); } // Missing ending '}'.
  return(crc);
  }
    23ae:	1f 91       	pop	r17
    23b0:	0f 91       	pop	r16
    23b2:	08 95       	ret

000023b4 <BufPrint::write(unsigned char)>:
  return(adjustJSONMsgForRXAndCheckCRC_ERR); // Bad (unterminated) message.
  }


// Print a single char to a bounded buffer; returns 1 if successful, else 0 if full.
size_t BufPrint::write(const uint8_t c)
    23b4:	dc 01       	movw	r26, r24
  {
  if(size < capacity) { b[size++] = c; b[size] = '\0'; return(1); }
    23b6:	17 96       	adiw	r26, 0x07	; 7
    23b8:	9c 91       	ld	r25, X
    23ba:	17 97       	sbiw	r26, 0x07	; 7
    23bc:	16 96       	adiw	r26, 0x06	; 6
    23be:	8c 91       	ld	r24, X
    23c0:	16 97       	sbiw	r26, 0x06	; 6
    23c2:	98 17       	cp	r25, r24
    23c4:	18 f0       	brcs	.+6      	; 0x23cc <BufPrint::write(unsigned char)+0x18>
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	15 c0       	rjmp	.+42     	; 0x23f6 <BufPrint::write(unsigned char)+0x42>
    23cc:	14 96       	adiw	r26, 0x04	; 4
    23ce:	ed 91       	ld	r30, X+
    23d0:	fc 91       	ld	r31, X
    23d2:	15 97       	sbiw	r26, 0x05	; 5
    23d4:	e9 0f       	add	r30, r25
    23d6:	f1 1d       	adc	r31, r1
    23d8:	60 83       	st	Z, r22
    23da:	89 2f       	mov	r24, r25
    23dc:	8f 5f       	subi	r24, 0xFF	; 255
    23de:	17 96       	adiw	r26, 0x07	; 7
    23e0:	8c 93       	st	X, r24
    23e2:	17 97       	sbiw	r26, 0x07	; 7
    23e4:	14 96       	adiw	r26, 0x04	; 4
    23e6:	ed 91       	ld	r30, X+
    23e8:	fc 91       	ld	r31, X
    23ea:	15 97       	sbiw	r26, 0x05	; 5
    23ec:	e8 0f       	add	r30, r24
    23ee:	f1 1d       	adc	r31, r1
    23f0:	10 82       	st	Z, r1
    23f2:	21 e0       	ldi	r18, 0x01	; 1
    23f4:	30 e0       	ldi	r19, 0x00	; 0
  return(0);
  }
    23f6:	c9 01       	movw	r24, r18
    23f8:	08 95       	ret

000023fa <SimpleStatsRotationBase::print(BufPrint&, SimpleStatsRotationBase::DescValueTuple const&, bool&) const>:
  return(false); // FAILED: full.
  }

#if defined(ALLOW_JSON_OUTPUT)
// Print an object field "name":value to the given buffer.
size_t SimpleStatsRotationBase::print(BufPrint &bp, const SimpleStatsRotationBase::DescValueTuple &s, bool &commaPending) const
    23fa:	4f 92       	push	r4
    23fc:	5f 92       	push	r5
    23fe:	6f 92       	push	r6
    2400:	7f 92       	push	r7
    2402:	8f 92       	push	r8
    2404:	9f 92       	push	r9
    2406:	af 92       	push	r10
    2408:	bf 92       	push	r11
    240a:	cf 92       	push	r12
    240c:	df 92       	push	r13
    240e:	ef 92       	push	r14
    2410:	ff 92       	push	r15
    2412:	0f 93       	push	r16
    2414:	1f 93       	push	r17
    2416:	cf 93       	push	r28
    2418:	df 93       	push	r29
    241a:	96 2e       	mov	r9, r22
    241c:	87 2e       	mov	r8, r23
    241e:	3a 01       	movw	r6, r20
    2420:	29 01       	movw	r4, r18
  {
  size_t w = 0;
  if(commaPending) { w += bp.print(','); }
    2422:	f9 01       	movw	r30, r18
    2424:	80 81       	ld	r24, Z
    2426:	88 23       	and	r24, r24
    2428:	19 f4       	brne	.+6      	; 0x2430 <SimpleStatsRotationBase::print(BufPrint&, SimpleStatsRotationBase::DescValueTuple const&, bool&) const+0x36>
    242a:	c0 e0       	ldi	r28, 0x00	; 0
    242c:	d0 e0       	ldi	r29, 0x00	; 0
    242e:	06 c0       	rjmp	.+12     	; 0x243c <SimpleStatsRotationBase::print(BufPrint&, SimpleStatsRotationBase::DescValueTuple const&, bool&) const+0x42>
    2430:	86 2f       	mov	r24, r22
    2432:	97 2f       	mov	r25, r23
    2434:	6c e2       	ldi	r22, 0x2C	; 44
    2436:	0e 94 3f 33 	call	0x667e	; 0x667e <Print::print(char)>
    243a:	ec 01       	movw	r28, r24
  w += bp.print('"');
    243c:	89 2d       	mov	r24, r9
    243e:	98 2d       	mov	r25, r8
    2440:	62 e2       	ldi	r22, 0x22	; 34
    2442:	0e 94 3f 33 	call	0x667e	; 0x667e <Print::print(char)>
    2446:	8c 01       	movw	r16, r24
  w += bp.print(s.descriptor.key); // Assumed not to need escaping in any way.
    2448:	f3 01       	movw	r30, r6
    244a:	60 81       	ld	r22, Z
    244c:	71 81       	ldd	r23, Z+1	; 0x01
    244e:	89 2d       	mov	r24, r9
    2450:	98 2d       	mov	r25, r8
    2452:	0e 94 80 34 	call	0x6900	; 0x6900 <Print::print(char const*)>
    2456:	5c 01       	movw	r10, r24
  w += bp.print('"');
    2458:	89 2d       	mov	r24, r9
    245a:	98 2d       	mov	r25, r8
    245c:	62 e2       	ldi	r22, 0x22	; 34
    245e:	0e 94 3f 33 	call	0x667e	; 0x667e <Print::print(char)>
    2462:	6c 01       	movw	r12, r24
  w += bp.print(':');
    2464:	89 2d       	mov	r24, r9
    2466:	98 2d       	mov	r25, r8
    2468:	6a e3       	ldi	r22, 0x3A	; 58
    246a:	0e 94 3f 33 	call	0x667e	; 0x667e <Print::print(char)>
    246e:	7c 01       	movw	r14, r24
  w += bp.print(s.value);
    2470:	f3 01       	movw	r30, r6
    2472:	64 81       	ldd	r22, Z+4	; 0x04
    2474:	75 81       	ldd	r23, Z+5	; 0x05
    2476:	89 2d       	mov	r24, r9
    2478:	98 2d       	mov	r25, r8
    247a:	4a e0       	ldi	r20, 0x0A	; 10
    247c:	50 e0       	ldi	r21, 0x00	; 0
    247e:	0e 94 6d 34 	call	0x68da	; 0x68da <Print::print(int, int)>
// Print an object field "name":value to the given buffer.
size_t SimpleStatsRotationBase::print(BufPrint &bp, const SimpleStatsRotationBase::DescValueTuple &s, bool &commaPending) const
  {
  size_t w = 0;
  if(commaPending) { w += bp.print(','); }
  w += bp.print('"');
    2482:	0c 0f       	add	r16, r28
    2484:	1d 1f       	adc	r17, r29
  w += bp.print(s.descriptor.key); // Assumed not to need escaping in any way.
    2486:	0a 0d       	add	r16, r10
    2488:	1b 1d       	adc	r17, r11
  w += bp.print('"');
    248a:	0c 0d       	add	r16, r12
    248c:	1d 1d       	adc	r17, r13
  w += bp.print(':');
    248e:	0e 0d       	add	r16, r14
    2490:	1f 1d       	adc	r17, r15
  w += bp.print(s.value);
  commaPending = true;
    2492:	21 e0       	ldi	r18, 0x01	; 1
    2494:	f2 01       	movw	r30, r4
    2496:	20 83       	st	Z, r18
    2498:	08 0f       	add	r16, r24
    249a:	19 1f       	adc	r17, r25
  return(w);
  }
    249c:	c8 01       	movw	r24, r16
    249e:	df 91       	pop	r29
    24a0:	cf 91       	pop	r28
    24a2:	1f 91       	pop	r17
    24a4:	0f 91       	pop	r16
    24a6:	ff 90       	pop	r15
    24a8:	ef 90       	pop	r14
    24aa:	df 90       	pop	r13
    24ac:	cf 90       	pop	r12
    24ae:	bf 90       	pop	r11
    24b0:	af 90       	pop	r10
    24b2:	9f 90       	pop	r9
    24b4:	8f 90       	pop	r8
    24b6:	7f 90       	pop	r7
    24b8:	6f 90       	pop	r6
    24ba:	5f 90       	pop	r5
    24bc:	4f 90       	pop	r4
    24be:	08 95       	ret

000024c0 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)>:
//   * maximise  if true attempt to maximise the number of stats squeezed into each frame,
//       potentially at the cost of signficant CPU time
//   * suppressClearChanged  if true then 'changed' flag for included fields is not cleared by this
//       allowing them to continue to be treated as higher priority
uint8_t SimpleStatsRotationBase::writeJSON(uint8_t *const buf, const uint8_t bufSize, const uint8_t sensitivity,
                                           const bool maximise, const bool suppressClearChanged)
    24c0:	2f 92       	push	r2
    24c2:	3f 92       	push	r3
    24c4:	4f 92       	push	r4
    24c6:	5f 92       	push	r5
    24c8:	6f 92       	push	r6
    24ca:	7f 92       	push	r7
    24cc:	8f 92       	push	r8
    24ce:	9f 92       	push	r9
    24d0:	af 92       	push	r10
    24d2:	bf 92       	push	r11
    24d4:	cf 92       	push	r12
    24d6:	df 92       	push	r13
    24d8:	ef 92       	push	r14
    24da:	ff 92       	push	r15
    24dc:	0f 93       	push	r16
    24de:	1f 93       	push	r17
    24e0:	df 93       	push	r29
    24e2:	cf 93       	push	r28
    24e4:	cd b7       	in	r28, 0x3d	; 61
    24e6:	de b7       	in	r29, 0x3e	; 62
    24e8:	2d 97       	sbiw	r28, 0x0d	; 13
    24ea:	0f b6       	in	r0, 0x3f	; 63
    24ec:	f8 94       	cli
    24ee:	de bf       	out	0x3e, r29	; 62
    24f0:	0f be       	out	0x3f, r0	; 63
    24f2:	cd bf       	out	0x3d, r28	; 61
    24f4:	6c 01       	movw	r12, r24
    24f6:	1b 01       	movw	r2, r22
    24f8:	f4 2e       	mov	r15, r20
    24fa:	2b 87       	std	Y+11, r18	; 0x0b
    24fc:	0c 87       	std	Y+12, r16	; 0x0c
    24fe:	ed 86       	std	Y+13, r14	; 0x0d
  {
#ifdef DEBUG
  if(NULL == buf) { panic(0); } // Should never happen.
    2500:	61 15       	cp	r22, r1
    2502:	71 05       	cpc	r23, r1
    2504:	21 f4       	brne	.+8      	; 0x250e <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x4e>
    2506:	80 e0       	ldi	r24, 0x00	; 0
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	0e 94 37 28 	call	0x506e	; 0x506e <panic(__FlashStringHelper const*)>
#endif
  // Minimum size is for {"@":""} plus null plus extra padding char/byte to check for overrun.
  if(bufSize < 10) { return(0); } // Failed.
    250e:	39 e0       	ldi	r19, 0x09	; 9
    2510:	3f 15       	cp	r19, r15
    2512:	08 f0       	brcs	.+2      	; 0x2516 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x56>
    2514:	80 c1       	rjmp	.+768    	; 0x2816 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x356>
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    2516:	1d 82       	std	Y+5, r1	; 0x05
    2518:	1c 82       	std	Y+4, r1	; 0x04
    uint8_t mark;
  public:
    // Wrap around a buffer of size bufSize-1 chars and a trailing '\0'.
    // The buffer must be of at least size 1.
    // A buffer of size n can accommodate n-1 characters.
    BufPrint(char *buf, uint8_t bufSize) : b(buf), capacity(bufSize-1), size(0), mark(0) { buf[0] = '\0'; }
    251a:	8c e7       	ldi	r24, 0x7C	; 124
    251c:	91 e0       	ldi	r25, 0x01	; 1
    251e:	9b 83       	std	Y+3, r25	; 0x03
    2520:	8a 83       	std	Y+2, r24	; 0x02
    2522:	3f 82       	std	Y+7, r3	; 0x07
    2524:	2e 82       	std	Y+6, r2	; 0x06
    2526:	fa 94       	dec	r15
    2528:	f8 86       	std	Y+8, r15	; 0x08
    252a:	f3 94       	inc	r15
    252c:	19 86       	std	Y+9, r1	; 0x09
    252e:	1a 86       	std	Y+10, r1	; 0x0a
    2530:	d1 01       	movw	r26, r2
    2532:	1c 92       	st	X, r1

  // Write/print to buffer passed in.
  BufPrint bp((char *)buf, bufSize);
  // True if field has been written and will need a ',' if another field is written.
  bool commaPending = false;
    2534:	19 82       	std	Y+1, r1	; 0x01

  // Start object.
  bp.print('{');
    2536:	8e 01       	movw	r16, r28
    2538:	0e 5f       	subi	r16, 0xFE	; 254
    253a:	1f 4f       	sbci	r17, 0xFF	; 255
    253c:	c8 01       	movw	r24, r16
    253e:	6b e7       	ldi	r22, 0x7B	; 123
    2540:	0e 94 3f 33 	call	0x667e	; 0x667e <Print::print(char)>

  // Write ID first.
  // If an explicit ID is supplied then use it
  // else compute it taking the housecode by preference if it is set.
  bp.print(F("\"@\":\""));
    2544:	c8 01       	movw	r24, r16
    2546:	6c ee       	ldi	r22, 0xEC	; 236
    2548:	70 e0       	ldi	r23, 0x00	; 0
    254a:	0e 94 1c 33 	call	0x6638	; 0x6638 <Print::print(__FlashStringHelper const*)>

#ifdef USE_MODULE_FHT8VSIMPLE
  if(NULL != id) { bp.print(id); } // Value has to be 'safe' (eg no " nor \ in it).
    254e:	f6 01       	movw	r30, r12
    2550:	67 81       	ldd	r22, Z+7	; 0x07
    2552:	70 85       	ldd	r23, Z+8	; 0x08
    2554:	61 15       	cp	r22, r1
    2556:	71 05       	cpc	r23, r1
    2558:	21 f0       	breq	.+8      	; 0x2562 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0xa2>
    255a:	c8 01       	movw	r24, r16
    255c:	0e 94 80 34 	call	0x6900	; 0x6900 <Print::print(char const*)>
    2560:	55 c0       	rjmp	.+170    	; 0x260c <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x14c>
  else
    {
    if(localFHT8VTRVEnabled())
    2562:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <localFHT8VTRVEnabled()>
    2566:	88 23       	and	r24, r24
    2568:	39 f0       	breq	.+14     	; 0x2578 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0xb8>
      {
      const uint8_t hc1 = FHT8VGetHC1();
    256a:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <FHT8VGetHC1()>
    256e:	18 2f       	mov	r17, r24
      const uint8_t hc2 = FHT8VGetHC2();
    2570:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <FHT8VGetHC2()>
    2574:	08 2f       	mov	r16, r24
    2576:	10 c0       	rjmp	.+32     	; 0x2598 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0xd8>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2578:	f9 99       	sbic	0x1f, 1	; 31
    257a:	fe cf       	rjmp	.-4      	; 0x2578 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0xb8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    257c:	84 e1       	ldi	r24, 0x14	; 20
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	92 bd       	out	0x22, r25	; 34
    2582:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2584:	f8 9a       	sbi	0x1f, 0	; 31
    2586:	10 b5       	in	r17, 0x20	; 32
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2588:	f9 99       	sbic	0x1f, 1	; 31
    258a:	fe cf       	rjmp	.-4      	; 0x2588 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0xc8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    258c:	85 e1       	ldi	r24, 0x15	; 21
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	92 bd       	out	0x22, r25	; 34
    2592:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2594:	f8 9a       	sbi	0x1f, 0	; 31
    2596:	00 b5       	in	r16, 0x20	; 32


// Extract ASCII hex digit in range [0-9][a-f] (ie lowercase) from bottom 4 bits of argument.
// Eg, passing in 0xa (10) returns 'a'.
// The top 4 bits are ignored.
static inline char hexDigit(const uint8_t value) { const uint8_t v = 0xf&value; if(v<10) { return('0'+v); } return('a'+(v-10)); }
    2598:	81 2f       	mov	r24, r17
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	74 e0       	ldi	r23, 0x04	; 4
    259e:	95 95       	asr	r25
    25a0:	87 95       	ror	r24
    25a2:	7a 95       	dec	r23
    25a4:	e1 f7       	brne	.-8      	; 0x259e <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0xde>
    25a6:	68 2f       	mov	r22, r24
    25a8:	6f 70       	andi	r22, 0x0F	; 15
    25aa:	6a 30       	cpi	r22, 0x0A	; 10
    25ac:	10 f4       	brcc	.+4      	; 0x25b2 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0xf2>
    25ae:	60 5d       	subi	r22, 0xD0	; 208
    25b0:	01 c0       	rjmp	.+2      	; 0x25b4 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0xf4>
    25b2:	69 5a       	subi	r22, 0xA9	; 169
    else
#endif
      {
      const uint8_t id1 = eeprom_read_byte(0 + (uint8_t *)EE_START_ID);
      const uint8_t id2 = eeprom_read_byte(1 + (uint8_t *)EE_START_ID);
      bp.print(hexDigit(id1 >> 4));
    25b4:	ce 01       	movw	r24, r28
    25b6:	02 96       	adiw	r24, 0x02	; 2
    25b8:	0e 94 3f 33 	call	0x667e	; 0x667e <Print::print(char)>
    25bc:	61 2f       	mov	r22, r17
    25be:	6f 70       	andi	r22, 0x0F	; 15
    25c0:	6a 30       	cpi	r22, 0x0A	; 10
    25c2:	10 f4       	brcc	.+4      	; 0x25c8 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x108>
    25c4:	60 5d       	subi	r22, 0xD0	; 208
    25c6:	01 c0       	rjmp	.+2      	; 0x25ca <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x10a>
    25c8:	69 5a       	subi	r22, 0xA9	; 169
      bp.print(hexDigit(id1));
    25ca:	ce 01       	movw	r24, r28
    25cc:	02 96       	adiw	r24, 0x02	; 2
    25ce:	0e 94 3f 33 	call	0x667e	; 0x667e <Print::print(char)>
    25d2:	80 2f       	mov	r24, r16
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	64 e0       	ldi	r22, 0x04	; 4
    25d8:	95 95       	asr	r25
    25da:	87 95       	ror	r24
    25dc:	6a 95       	dec	r22
    25de:	e1 f7       	brne	.-8      	; 0x25d8 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x118>
    25e0:	68 2f       	mov	r22, r24
    25e2:	6f 70       	andi	r22, 0x0F	; 15
    25e4:	6a 30       	cpi	r22, 0x0A	; 10
    25e6:	10 f4       	brcc	.+4      	; 0x25ec <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x12c>
    25e8:	60 5d       	subi	r22, 0xD0	; 208
    25ea:	01 c0       	rjmp	.+2      	; 0x25ee <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x12e>
    25ec:	69 5a       	subi	r22, 0xA9	; 169
      bp.print(hexDigit(id2 >> 4));
    25ee:	ce 01       	movw	r24, r28
    25f0:	02 96       	adiw	r24, 0x02	; 2
    25f2:	0e 94 3f 33 	call	0x667e	; 0x667e <Print::print(char)>
    25f6:	60 2f       	mov	r22, r16
    25f8:	6f 70       	andi	r22, 0x0F	; 15
    25fa:	6a 30       	cpi	r22, 0x0A	; 10
    25fc:	10 f4       	brcc	.+4      	; 0x2602 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x142>
    25fe:	60 5d       	subi	r22, 0xD0	; 208
    2600:	01 c0       	rjmp	.+2      	; 0x2604 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x144>
    2602:	69 5a       	subi	r22, 0xA9	; 169
      bp.print(hexDigit(id2));
    2604:	ce 01       	movw	r24, r28
    2606:	02 96       	adiw	r24, 0x02	; 2
    2608:	0e 94 3f 33 	call	0x667e	; 0x667e <Print::print(char)>
      }
    }

  bp.print('"');
    260c:	8e 01       	movw	r16, r28
    260e:	0e 5f       	subi	r16, 0xFE	; 254
    2610:	1f 4f       	sbci	r17, 0xFF	; 255
    2612:	c8 01       	movw	r24, r16
    2614:	62 e2       	ldi	r22, 0x22	; 34
    2616:	0e 94 3f 33 	call	0x667e	; 0x667e <Print::print(char)>
  commaPending = true;
    261a:	bb 24       	eor	r11, r11
    261c:	b3 94       	inc	r11
    261e:	b9 82       	std	Y+1, r11	; 0x01

  // Write count next iff enabled.
  if(c.enabled)
    2620:	d6 01       	movw	r26, r12
    2622:	19 96       	adiw	r26, 0x09	; 9
    2624:	8c 91       	ld	r24, X
    2626:	80 ff       	sbrs	r24, 0
    2628:	14 c0       	rjmp	.+40     	; 0x2652 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x192>
    {
    if(commaPending) { bp.print(','); commaPending = false; }
    262a:	c8 01       	movw	r24, r16
    262c:	6c e2       	ldi	r22, 0x2C	; 44
    262e:	0e 94 3f 33 	call	0x667e	; 0x667e <Print::print(char)>
    2632:	19 82       	std	Y+1, r1	; 0x01
    bp.print(F("\"+\":"));
    2634:	c8 01       	movw	r24, r16
    2636:	67 ee       	ldi	r22, 0xE7	; 231
    2638:	70 e0       	ldi	r23, 0x00	; 0
    263a:	0e 94 1c 33 	call	0x6638	; 0x6638 <Print::print(__FlashStringHelper const*)>
    bp.print(c.count);
    263e:	f6 01       	movw	r30, r12
    2640:	61 85       	ldd	r22, Z+9	; 0x09
    2642:	66 95       	lsr	r22
    2644:	67 70       	andi	r22, 0x07	; 7
    2646:	c8 01       	movw	r24, r16
    2648:	4a e0       	ldi	r20, 0x0A	; 10
    264a:	50 e0       	ldi	r21, 0x00	; 0
    264c:	0e 94 1b 34 	call	0x6836	; 0x6836 <Print::print(unsigned char, int)>
    commaPending = true;
    2650:	b9 82       	std	Y+1, r11	; 0x01
    // True if buffer is completely full.
    bool isFull() const { return(size == capacity); }
    // Get size/chars already in the buffer, not including trailing '\0'.
    uint8_t getSize() const { return(size); }
    // Set to record good place to rewind to if necessary.
    void setMark() { mark = size; }
    2652:	89 85       	ldd	r24, Y+9	; 0x09
    2654:	8a 87       	std	Y+10, r24	; 0x0a

  bool gotHiPri = false;
  uint8_t hiPriIndex = 0;
  bool gotLoPri = false;
  uint8_t loPriIndex = 0;
  if(nStats != 0)
    2656:	d6 01       	movw	r26, r12
    2658:	13 96       	adiw	r26, 0x03	; 3
    265a:	6c 91       	ld	r22, X
    265c:	13 97       	sbiw	r26, 0x03	; 3
    265e:	66 23       	and	r22, r22
    2660:	09 f4       	brne	.+2      	; 0x2664 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x1a4>
    2662:	ce c0       	rjmp	.+412    	; 0x2800 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x340>
    {
    // High-pri/changed stats.
    // Only do this on a portion of runs to let 'normal' stats get a look-in.
    // This happens on even-numbered runs (eg including the first, typically).
    // Write at most one high-priority item.
    if(0 == (c.count & 1))
    2664:	19 96       	adiw	r26, 0x09	; 9
    2666:	8c 91       	ld	r24, X
    2668:	19 97       	sbiw	r26, 0x09	; 9
    266a:	86 95       	lsr	r24
    266c:	87 70       	andi	r24, 0x07	; 7
    266e:	80 fd       	sbrc	r24, 0
    2670:	5a c0       	rjmp	.+180    	; 0x2726 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x266>
      {
      uint8_t next = lastTXedHiPri;
    2672:	16 96       	adiw	r26, 0x06	; 6
    2674:	1c 91       	ld	r17, X
    2676:	40 e0       	ldi	r20, 0x00	; 0
    2678:	50 e0       	ldi	r21, 0x00	; 0
      for(int i = nStats; --i >= 0; )
    267a:	26 2f       	mov	r18, r22
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	21 50       	subi	r18, 0x01	; 1
    2680:	30 40       	sbci	r19, 0x00	; 0
        {
        // Wrap around the end of the stats.
        if(++next >= nStats) { next = 0; }
        // Skip stat if too sensitive to include in this output.
        DescValueTuple &s = stats[next];
    2682:	77 e0       	ldi	r23, 0x07	; 7
    2684:	49 c0       	rjmp	.+146    	; 0x2718 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x258>
      {
      uint8_t next = lastTXedHiPri;
      for(int i = nStats; --i >= 0; )
        {
        // Wrap around the end of the stats.
        if(++next >= nStats) { next = 0; }
    2686:	1f 5f       	subi	r17, 0xFF	; 255
    2688:	16 17       	cp	r17, r22
    268a:	08 f0       	brcs	.+2      	; 0x268e <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x1ce>
    268c:	10 e0       	ldi	r17, 0x00	; 0
        // Skip stat if too sensitive to include in this output.
        DescValueTuple &s = stats[next];
    268e:	17 9f       	mul	r17, r23
    2690:	50 01       	movw	r10, r0
    2692:	11 24       	eor	r1, r1
    2694:	d6 01       	movw	r26, r12
    2696:	11 96       	adiw	r26, 0x01	; 1
    2698:	ed 91       	ld	r30, X+
    269a:	fc 91       	ld	r31, X
    269c:	12 97       	sbiw	r26, 0x02	; 2
    269e:	ea 0d       	add	r30, r10
    26a0:	fb 1d       	adc	r31, r11
        if(sensitivity > s.descriptor.sensitivity) { continue; }
    26a2:	82 81       	ldd	r24, Z+2	; 0x02
    26a4:	bb 85       	ldd	r27, Y+11	; 0x0b
    26a6:	8b 17       	cp	r24, r27
    26a8:	a8 f1       	brcs	.+106    	; 0x2714 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x254>
        // Skip stat if neither changed nor high-priority.
        if(!s.descriptor.highPriority && !s.flags.changed) { continue; }
    26aa:	83 81       	ldd	r24, Z+3	; 0x03
    26ac:	88 23       	and	r24, r24
    26ae:	19 f4       	brne	.+6      	; 0x26b6 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x1f6>
    26b0:	86 81       	ldd	r24, Z+6	; 0x06
    26b2:	80 ff       	sbrs	r24, 0
    26b4:	2f c0       	rjmp	.+94     	; 0x2714 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x254>
        // Found suitable stat to include in output.
        hiPriIndex = next;
        gotHiPri = true;
        // Add to JSON output.
        print(bp, s, commaPending);
    26b6:	c6 01       	movw	r24, r12
    26b8:	be 01       	movw	r22, r28
    26ba:	6e 5f       	subi	r22, 0xFE	; 254
    26bc:	7f 4f       	sbci	r23, 0xFF	; 255
    26be:	af 01       	movw	r20, r30
    26c0:	9e 01       	movw	r18, r28
    26c2:	2f 5f       	subi	r18, 0xFF	; 255
    26c4:	3f 4f       	sbci	r19, 0xFF	; 255
    26c6:	0e 94 fd 11 	call	0x23fa	; 0x23fa <SimpleStatsRotationBase::print(BufPrint&, SimpleStatsRotationBase::DescValueTuple const&, bool&) const>
    BufPrint(char *buf, uint8_t bufSize) : b(buf), capacity(bufSize-1), size(0), mark(0) { buf[0] = '\0'; }
    virtual size_t write(uint8_t c);
    // True if buffer is completely full.
    bool isFull() const { return(size == capacity); }
    // Get size/chars already in the buffer, not including trailing '\0'.
    uint8_t getSize() const { return(size); }
    26ca:	49 85       	ldd	r20, Y+9	; 0x09
        // If successful, ie still space for the closing "}\0" without running over-length
        // then mark this as a fall-back, else rewind and discard this item.
        if(bp.getSize() > bufSize - 3) { bp.rewind(); break; }
    26cc:	8f 2d       	mov	r24, r15
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	02 97       	sbiw	r24, 0x02	; 2
    26d2:	24 2f       	mov	r18, r20
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	28 17       	cp	r18, r24
    26d8:	39 07       	cpc	r19, r25
    26da:	44 f0       	brlt	.+16     	; 0x26ec <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x22c>
    // Set to record good place to rewind to if necessary.
    void setMark() { mark = size; }
    // Rewind to previous good position, clearing newer text.
    void rewind() { size = mark; b[size] = '\0'; }
    26dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    26de:	89 87       	std	Y+9, r24	; 0x09
    26e0:	ee 81       	ldd	r30, Y+6	; 0x06
    26e2:	ff 81       	ldd	r31, Y+7	; 0x07
    26e4:	e8 0f       	add	r30, r24
    26e6:	f1 1d       	adc	r31, r1
    26e8:	10 82       	st	Z, r1
    26ea:	11 c0       	rjmp	.+34     	; 0x270e <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x24e>
    // True if buffer is completely full.
    bool isFull() const { return(size == capacity); }
    // Get size/chars already in the buffer, not including trailing '\0'.
    uint8_t getSize() const { return(size); }
    // Set to record good place to rewind to if necessary.
    void setMark() { mark = size; }
    26ec:	4a 87       	std	Y+10, r20	; 0x0a
        else
          {
          bp.setMark();
          lastTXed = lastTXedHiPri = hiPriIndex;
    26ee:	f6 01       	movw	r30, r12
    26f0:	16 83       	std	Z+6, r17	; 0x06
    26f2:	14 83       	std	Z+4, r17	; 0x04
          if(!suppressClearChanged) { stats[hiPriIndex].flags.changed = false; }
    26f4:	fd 85       	ldd	r31, Y+13	; 0x0d
    26f6:	ff 23       	and	r31, r31
    26f8:	51 f4       	brne	.+20     	; 0x270e <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x24e>
    26fa:	d6 01       	movw	r26, r12
    26fc:	11 96       	adiw	r26, 0x01	; 1
    26fe:	ed 91       	ld	r30, X+
    2700:	fc 91       	ld	r31, X
    2702:	12 97       	sbiw	r26, 0x02	; 2
    2704:	ea 0d       	add	r30, r10
    2706:	fb 1d       	adc	r31, r11
    2708:	86 81       	ldd	r24, Z+6	; 0x06
    270a:	8e 7f       	andi	r24, 0xFE	; 254
    270c:	86 83       	std	Z+6, r24	; 0x06
    270e:	51 2e       	mov	r5, r17
    2710:	01 e0       	ldi	r16, 0x01	; 1
    2712:	0b c0       	rjmp	.+22     	; 0x272a <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x26a>
    2714:	4f 5f       	subi	r20, 0xFF	; 255
    2716:	5f 4f       	sbci	r21, 0xFF	; 255
    // This happens on even-numbered runs (eg including the first, typically).
    // Write at most one high-priority item.
    if(0 == (c.count & 1))
      {
      uint8_t next = lastTXedHiPri;
      for(int i = nStats; --i >= 0; )
    2718:	c9 01       	movw	r24, r18
    271a:	84 1b       	sub	r24, r20
    271c:	95 0b       	sbc	r25, r21
    271e:	8f 5f       	subi	r24, 0xFF	; 255
    2720:	9f 4f       	sbci	r25, 0xFF	; 255
    2722:	09 f0       	breq	.+2      	; 0x2726 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x266>
    2724:	b0 cf       	rjmp	.-160    	; 0x2686 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x1c6>
    2726:	00 e0       	ldi	r16, 0x00	; 0
    2728:	55 24       	eor	r5, r5
    // Rotate through all eligible stats round-robin,
    // adding one to the end of the current message if possible,
    // checking first the item indexed after the previous one sent.
//    if(!gotHiPri)
      {
      uint8_t next = lastTXedLoPri;
    272a:	f6 01       	movw	r30, r12
    272c:	25 81       	ldd	r18, Z+5	; 0x05
      for(int i = nStats; --i >= 0; )
    272e:	83 81       	ldd	r24, Z+3	; 0x03
    2730:	88 24       	eor	r8, r8
    2732:	99 24       	eor	r9, r9
    2734:	a8 2e       	mov	r10, r24
    2736:	bb 24       	eor	r11, r11
    2738:	08 94       	sec
    273a:	a1 08       	sbc	r10, r1
    273c:	b1 08       	sbc	r11, r1
        // Avoid re-transmitting the very last thing TXed unless there in only one item!
        if((lastTXed == next) && (nStats > 1)) { continue; }
        // Avoid transmitting the hi-pri item just sent if any.
        if(gotHiPri && (hiPriIndex == next)) { continue; }
        // Skip stat if too sensitive to include in this output.
        DescValueTuple &s = stats[next];
    273e:	57 e0       	ldi	r21, 0x07	; 7
    2740:	45 2e       	mov	r4, r21
        // Add to JSON output.
        print(bp, s, commaPending);
        // If successful then mark this as a fall-back, else rewind and discard this item.
        // If successful, ie still space for the closing "}\0" without running over-length
        // then mark this as a fall-back, else rewind and discard this item.
        if(bp.getSize() > bufSize - 3) { bp.rewind(); break; }
    2742:	ef 2c       	mov	r14, r15
    2744:	ff 24       	eor	r15, r15
    2746:	8e ef       	ldi	r24, 0xFE	; 254
    2748:	9f ef       	ldi	r25, 0xFF	; 255
    274a:	e8 0e       	add	r14, r24
    274c:	f9 1e       	adc	r15, r25
    274e:	51 c0       	rjmp	.+162    	; 0x27f2 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x332>
      {
      uint8_t next = lastTXedLoPri;
      for(int i = nStats; --i >= 0; )
        {
        // Wrap around the end of the stats.
        if(++next >= nStats) { next = 0; }
    2750:	12 2f       	mov	r17, r18
    2752:	1f 5f       	subi	r17, 0xFF	; 255
    2754:	d6 01       	movw	r26, r12
    2756:	13 96       	adiw	r26, 0x03	; 3
    2758:	8c 91       	ld	r24, X
    275a:	18 17       	cp	r17, r24
    275c:	08 f0       	brcs	.+2      	; 0x2760 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x2a0>
    275e:	10 e0       	ldi	r17, 0x00	; 0
        // Avoid re-transmitting the very last thing TXed unless there in only one item!
        if((lastTXed == next) && (nStats > 1)) { continue; }
    2760:	f6 01       	movw	r30, r12
    2762:	24 81       	ldd	r18, Z+4	; 0x04
    2764:	21 17       	cp	r18, r17
    2766:	19 f4       	brne	.+6      	; 0x276e <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x2ae>
    2768:	82 30       	cpi	r24, 0x02	; 2
    276a:	08 f0       	brcs	.+2      	; 0x276e <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x2ae>
    276c:	3f c0       	rjmp	.+126    	; 0x27ec <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x32c>
        // Avoid transmitting the hi-pri item just sent if any.
        if(gotHiPri && (hiPriIndex == next)) { continue; }
    276e:	00 23       	and	r16, r16
    2770:	11 f0       	breq	.+4      	; 0x2776 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x2b6>
    2772:	51 16       	cp	r5, r17
    2774:	d1 f1       	breq	.+116    	; 0x27ea <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x32a>
        // Skip stat if too sensitive to include in this output.
        DescValueTuple &s = stats[next];
    2776:	14 9d       	mul	r17, r4
    2778:	30 01       	movw	r6, r0
    277a:	11 24       	eor	r1, r1
    277c:	d6 01       	movw	r26, r12
    277e:	11 96       	adiw	r26, 0x01	; 1
    2780:	ed 91       	ld	r30, X+
    2782:	fc 91       	ld	r31, X
    2784:	12 97       	sbiw	r26, 0x02	; 2
    2786:	e6 0d       	add	r30, r6
    2788:	f7 1d       	adc	r31, r7
        if(sensitivity > s.descriptor.sensitivity) { continue; }
    278a:	82 81       	ldd	r24, Z+2	; 0x02
    278c:	bb 85       	ldd	r27, Y+11	; 0x0b
    278e:	8b 17       	cp	r24, r27
    2790:	60 f1       	brcs	.+88     	; 0x27ea <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x32a>
        // Found suitable stat to include in output.
        loPriIndex = next;
        gotLoPri = true;
        // Add to JSON output.
        print(bp, s, commaPending);
    2792:	c6 01       	movw	r24, r12
    2794:	be 01       	movw	r22, r28
    2796:	6e 5f       	subi	r22, 0xFE	; 254
    2798:	7f 4f       	sbci	r23, 0xFF	; 255
    279a:	af 01       	movw	r20, r30
    279c:	9e 01       	movw	r18, r28
    279e:	2f 5f       	subi	r18, 0xFF	; 255
    27a0:	3f 4f       	sbci	r19, 0xFF	; 255
    27a2:	0e 94 fd 11 	call	0x23fa	; 0x23fa <SimpleStatsRotationBase::print(BufPrint&, SimpleStatsRotationBase::DescValueTuple const&, bool&) const>
    BufPrint(char *buf, uint8_t bufSize) : b(buf), capacity(bufSize-1), size(0), mark(0) { buf[0] = '\0'; }
    virtual size_t write(uint8_t c);
    // True if buffer is completely full.
    bool isFull() const { return(size == capacity); }
    // Get size/chars already in the buffer, not including trailing '\0'.
    uint8_t getSize() const { return(size); }
    27a6:	29 85       	ldd	r18, Y+9	; 0x09
        // If successful then mark this as a fall-back, else rewind and discard this item.
        // If successful, ie still space for the closing "}\0" without running over-length
        // then mark this as a fall-back, else rewind and discard this item.
        if(bp.getSize() > bufSize - 3) { bp.rewind(); break; }
    27a8:	82 2f       	mov	r24, r18
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	8e 15       	cp	r24, r14
    27ae:	9f 05       	cpc	r25, r15
    27b0:	44 f0       	brlt	.+16     	; 0x27c2 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x302>
    // Set to record good place to rewind to if necessary.
    void setMark() { mark = size; }
    // Rewind to previous good position, clearing newer text.
    void rewind() { size = mark; b[size] = '\0'; }
    27b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    27b4:	89 87       	std	Y+9, r24	; 0x09
    27b6:	ee 81       	ldd	r30, Y+6	; 0x06
    27b8:	ff 81       	ldd	r31, Y+7	; 0x07
    27ba:	e8 0f       	add	r30, r24
    27bc:	f1 1d       	adc	r31, r1
    27be:	10 82       	st	Z, r1
    27c0:	1f c0       	rjmp	.+62     	; 0x2800 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x340>
    // True if buffer is completely full.
    bool isFull() const { return(size == capacity); }
    // Get size/chars already in the buffer, not including trailing '\0'.
    uint8_t getSize() const { return(size); }
    // Set to record good place to rewind to if necessary.
    void setMark() { mark = size; }
    27c2:	2a 87       	std	Y+10, r18	; 0x0a
        else
          {
          bp.setMark();
          lastTXed = lastTXedLoPri = loPriIndex;
    27c4:	f6 01       	movw	r30, r12
    27c6:	15 83       	std	Z+5, r17	; 0x05
    27c8:	14 83       	std	Z+4, r17	; 0x04
          if(!suppressClearChanged) { stats[loPriIndex].flags.changed = false; }
    27ca:	fd 85       	ldd	r31, Y+13	; 0x0d
    27cc:	ff 23       	and	r31, r31
    27ce:	51 f4       	brne	.+20     	; 0x27e4 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x324>
    27d0:	d6 01       	movw	r26, r12
    27d2:	11 96       	adiw	r26, 0x01	; 1
    27d4:	ed 91       	ld	r30, X+
    27d6:	fc 91       	ld	r31, X
    27d8:	12 97       	sbiw	r26, 0x02	; 2
    27da:	e6 0d       	add	r30, r6
    27dc:	f7 1d       	adc	r31, r7
    27de:	86 81       	ldd	r24, Z+6	; 0x06
    27e0:	8e 7f       	andi	r24, 0xFE	; 254
    27e2:	86 83       	std	Z+6, r24	; 0x06
          }
        if(!maximise) { break; }
    27e4:	bc 85       	ldd	r27, Y+12	; 0x0c
    27e6:	bb 23       	and	r27, r27
    27e8:	59 f0       	breq	.+22     	; 0x2800 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x340>
    27ea:	21 2f       	mov	r18, r17
    27ec:	08 94       	sec
    27ee:	81 1c       	adc	r8, r1
    27f0:	91 1c       	adc	r9, r1
    // adding one to the end of the current message if possible,
    // checking first the item indexed after the previous one sent.
//    if(!gotHiPri)
      {
      uint8_t next = lastTXedLoPri;
      for(int i = nStats; --i >= 0; )
    27f2:	c5 01       	movw	r24, r10
    27f4:	88 19       	sub	r24, r8
    27f6:	99 09       	sbc	r25, r9
    27f8:	8f 5f       	subi	r24, 0xFF	; 255
    27fa:	9f 4f       	sbci	r25, 0xFF	; 255
    27fc:	09 f0       	breq	.+2      	; 0x2800 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x340>
    27fe:	a8 cf       	rjmp	.-176    	; 0x2750 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x290>
    }

  // TODO: maximise.

  // Terminate object.
  bp.print('}');
    2800:	ce 01       	movw	r24, r28
    2802:	02 96       	adiw	r24, 0x02	; 2
    2804:	6d e7       	ldi	r22, 0x7D	; 125
    2806:	0e 94 3f 33 	call	0x667e	; 0x667e <Print::print(char)>
    // The buffer must be of at least size 1.
    // A buffer of size n can accommodate n-1 characters.
    BufPrint(char *buf, uint8_t bufSize) : b(buf), capacity(bufSize-1), size(0), mark(0) { buf[0] = '\0'; }
    virtual size_t write(uint8_t c);
    // True if buffer is completely full.
    bool isFull() const { return(size == capacity); }
    280a:	29 85       	ldd	r18, Y+9	; 0x09
  DEBUG_SERIAL_PRINT_FLASHSTRING("JSON: ");
  DEBUG_SERIAL_PRINT((char *)buf);
  DEBUG_SERIAL_PRINTLN();
#endif
//  if(w >= (size_t)(bufSize-1))
  if(bp.isFull())
    280c:	88 85       	ldd	r24, Y+8	; 0x08
    280e:	28 17       	cp	r18, r24
    2810:	21 f4       	brne	.+8      	; 0x281a <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x35a>
    {
    // Overrun, so failed/aborted.
    // Shouldn't really be possible unless buffer far far too small.
    *buf = '\0';
    2812:	d1 01       	movw	r26, r2
    2814:	1c 92       	st	X, r1
    2816:	20 e0       	ldi	r18, 0x00	; 0
    2818:	0a c0       	rjmp	.+20     	; 0x282e <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x36e>
    return(0);
    }

  // On successfully creating output, update some internal state including success count.
  ++c.count;
    281a:	f6 01       	movw	r30, r12
    281c:	91 85       	ldd	r25, Z+9	; 0x09
    281e:	89 2f       	mov	r24, r25
    2820:	86 95       	lsr	r24
    2822:	8f 5f       	subi	r24, 0xFF	; 255
    2824:	87 70       	andi	r24, 0x07	; 7
    2826:	88 0f       	add	r24, r24
    2828:	91 7f       	andi	r25, 0xF1	; 241
    282a:	98 2b       	or	r25, r24
    282c:	91 87       	std	Z+9, r25	; 0x09

  return(bp.getSize()); // Success!
  }
    282e:	82 2f       	mov	r24, r18
    2830:	2d 96       	adiw	r28, 0x0d	; 13
    2832:	0f b6       	in	r0, 0x3f	; 63
    2834:	f8 94       	cli
    2836:	de bf       	out	0x3e, r29	; 62
    2838:	0f be       	out	0x3f, r0	; 63
    283a:	cd bf       	out	0x3d, r28	; 61
    283c:	cf 91       	pop	r28
    283e:	df 91       	pop	r29
    2840:	1f 91       	pop	r17
    2842:	0f 91       	pop	r16
    2844:	ff 90       	pop	r15
    2846:	ef 90       	pop	r14
    2848:	df 90       	pop	r13
    284a:	cf 90       	pop	r12
    284c:	bf 90       	pop	r11
    284e:	af 90       	pop	r10
    2850:	9f 90       	pop	r9
    2852:	8f 90       	pop	r8
    2854:	7f 90       	pop	r7
    2856:	6f 90       	pop	r6
    2858:	5f 90       	pop	r5
    285a:	4f 90       	pop	r4
    285c:	3f 90       	pop	r3
    285e:	2f 90       	pop	r2
    2860:	08 95       	ret

00002862 <SimpleStatsRotationBase::findByKey(char const*) const>:
  return(true);
  }

// Returns pointer to stats tuple with given (non-NULL) key if present, else NULL.
// Does a simple linear search.
SimpleStatsRotationBase::DescValueTuple * SimpleStatsRotationBase::findByKey(const SimpleStatsKey key) const
    2862:	8f 92       	push	r8
    2864:	9f 92       	push	r9
    2866:	af 92       	push	r10
    2868:	bf 92       	push	r11
    286a:	cf 92       	push	r12
    286c:	df 92       	push	r13
    286e:	ef 92       	push	r14
    2870:	ff 92       	push	r15
    2872:	0f 93       	push	r16
    2874:	1f 93       	push	r17
    2876:	cf 93       	push	r28
    2878:	df 93       	push	r29
    287a:	6c 01       	movw	r12, r24
    287c:	4b 01       	movw	r8, r22
  {
  for(int i = 0; i < nStats; ++i)
    287e:	fc 01       	movw	r30, r24
    2880:	83 81       	ldd	r24, Z+3	; 0x03
    2882:	a8 2e       	mov	r10, r24
    2884:	bb 24       	eor	r11, r11
    2886:	ee 24       	eor	r14, r14
    2888:	ff 24       	eor	r15, r15
    288a:	00 e0       	ldi	r16, 0x00	; 0
    288c:	10 e0       	ldi	r17, 0x00	; 0
    288e:	11 c0       	rjmp	.+34     	; 0x28b2 <SimpleStatsRotationBase::findByKey(char const*) const+0x50>
    {
    DescValueTuple * const p = stats + i;
    2890:	f6 01       	movw	r30, r12
    2892:	c1 81       	ldd	r28, Z+1	; 0x01
    2894:	d2 81       	ldd	r29, Z+2	; 0x02
    2896:	c0 0f       	add	r28, r16
    2898:	d1 1f       	adc	r29, r17
    if(0 == strcmp(p->descriptor.key, key)) { return(p); }
    289a:	88 81       	ld	r24, Y
    289c:	99 81       	ldd	r25, Y+1	; 0x01
    289e:	b4 01       	movw	r22, r8
    28a0:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <strcmp>
    28a4:	09 5f       	subi	r16, 0xF9	; 249
    28a6:	1f 4f       	sbci	r17, 0xFF	; 255
    28a8:	00 97       	sbiw	r24, 0x00	; 0
    28aa:	41 f0       	breq	.+16     	; 0x28bc <SimpleStatsRotationBase::findByKey(char const*) const+0x5a>

// Returns pointer to stats tuple with given (non-NULL) key if present, else NULL.
// Does a simple linear search.
SimpleStatsRotationBase::DescValueTuple * SimpleStatsRotationBase::findByKey(const SimpleStatsKey key) const
  {
  for(int i = 0; i < nStats; ++i)
    28ac:	08 94       	sec
    28ae:	e1 1c       	adc	r14, r1
    28b0:	f1 1c       	adc	r15, r1
    28b2:	ea 14       	cp	r14, r10
    28b4:	fb 04       	cpc	r15, r11
    28b6:	64 f3       	brlt	.-40     	; 0x2890 <SimpleStatsRotationBase::findByKey(char const*) const+0x2e>
    28b8:	c0 e0       	ldi	r28, 0x00	; 0
    28ba:	d0 e0       	ldi	r29, 0x00	; 0
    {
    DescValueTuple * const p = stats + i;
    if(0 == strcmp(p->descriptor.key, key)) { return(p); }
    }
  return(NULL); // Not found.
  }
    28bc:	ce 01       	movw	r24, r28
    28be:	df 91       	pop	r29
    28c0:	cf 91       	pop	r28
    28c2:	1f 91       	pop	r17
    28c4:	0f 91       	pop	r16
    28c6:	ff 90       	pop	r15
    28c8:	ef 90       	pop	r14
    28ca:	df 90       	pop	r13
    28cc:	cf 90       	pop	r12
    28ce:	bf 90       	pop	r11
    28d0:	af 90       	pop	r10
    28d2:	9f 90       	pop	r9
    28d4:	8f 90       	pop	r8
    28d6:	08 95       	ret

000028d8 <SimpleStatsRotationBase::put(char const*, int)>:
    
// Create/update value for given stat/key.
// If properties not already set and not supplied then stat will get defaults.
// If descriptor is supplied then its key must match (and the descriptor will be copied).
// True if successful, false otherwise (eg capacity already reached).
bool SimpleStatsRotationBase::put(const SimpleStatsKey key, const int newValue)
    28d8:	ef 92       	push	r14
    28da:	ff 92       	push	r15
    28dc:	0f 93       	push	r16
    28de:	1f 93       	push	r17
    28e0:	cf 93       	push	r28
    28e2:	df 93       	push	r29
    28e4:	ec 01       	movw	r28, r24
    28e6:	8b 01       	movw	r16, r22
    28e8:	7a 01       	movw	r14, r20
// Returns true iff if a valid key for our subset of JSON.
// Rejects keys containing " or \ or any chars outside the range [32,126]
// to avoid having to escape anything.
bool isValidKey(const SimpleStatsKey key)
  {
  if(NULL == key) { return(false); } 
    28ea:	61 15       	cp	r22, r1
    28ec:	71 05       	cpc	r23, r1
    28ee:	e9 f1       	breq	.+122    	; 0x296a <SimpleStatsRotationBase::put(char const*, int)+0x92>
    28f0:	fb 01       	movw	r30, r22
    28f2:	09 c0       	rjmp	.+18     	; 0x2906 <SimpleStatsRotationBase::put(char const*, int)+0x2e>
  for(const char *s = key; '\0' != *s; ++s)
    {
    const char c = *s;
    if((c < 32) || (c > 126) || ('"' == c) || ('\\' == c)) { return(false); }
    28f4:	89 2f       	mov	r24, r25
    28f6:	80 52       	subi	r24, 0x20	; 32
    28f8:	8f 35       	cpi	r24, 0x5F	; 95
    28fa:	b8 f5       	brcc	.+110    	; 0x296a <SimpleStatsRotationBase::put(char const*, int)+0x92>
    28fc:	92 32       	cpi	r25, 0x22	; 34
    28fe:	a9 f1       	breq	.+106    	; 0x296a <SimpleStatsRotationBase::put(char const*, int)+0x92>
    2900:	9c 35       	cpi	r25, 0x5C	; 92
    2902:	99 f1       	breq	.+102    	; 0x296a <SimpleStatsRotationBase::put(char const*, int)+0x92>
// Rejects keys containing " or \ or any chars outside the range [32,126]
// to avoid having to escape anything.
bool isValidKey(const SimpleStatsKey key)
  {
  if(NULL == key) { return(false); } 
  for(const char *s = key; '\0' != *s; ++s)
    2904:	31 96       	adiw	r30, 0x01	; 1
    2906:	90 81       	ld	r25, Z
    2908:	99 23       	and	r25, r25
    290a:	a1 f7       	brne	.-24     	; 0x28f4 <SimpleStatsRotationBase::put(char const*, int)+0x1c>
    290c:	36 c0       	rjmp	.+108    	; 0x297a <SimpleStatsRotationBase::put(char const*, int)+0xa2>
  DescValueTuple *p = findByKey(key);
  // If item already exists, update it.
  if(NULL != p)
    {
    // Update the value and mark as changed if changed.
    if(p->value != newValue)
    290e:	84 81       	ldd	r24, Z+4	; 0x04
    2910:	95 81       	ldd	r25, Z+5	; 0x05
    2912:	8e 15       	cp	r24, r14
    2914:	9f 05       	cpc	r25, r15
    2916:	29 f0       	breq	.+10     	; 0x2922 <SimpleStatsRotationBase::put(char const*, int)+0x4a>
      {
      p->value = newValue;
    2918:	f5 82       	std	Z+5, r15	; 0x05
    291a:	e4 82       	std	Z+4, r14	; 0x04
      p->flags.changed = true;
    291c:	86 81       	ldd	r24, Z+6	; 0x06
    291e:	81 60       	ori	r24, 0x01	; 1
    2920:	86 83       	std	Z+6, r24	; 0x06
    2922:	81 e0       	ldi	r24, 0x01	; 1
    2924:	23 c0       	rjmp	.+70     	; 0x296c <SimpleStatsRotationBase::put(char const*, int)+0x94>
    return(true);
    }

  // If not yet at capacity then add this new item at the end.
  // Mark it as changed to prioritise seeing it in the JSON output.
  if(nStats < capacity)
    2926:	2b 81       	ldd	r18, Y+3	; 0x03
    2928:	88 81       	ld	r24, Y
    292a:	28 17       	cp	r18, r24
    292c:	a8 f4       	brcc	.+42     	; 0x2958 <SimpleStatsRotationBase::put(char const*, int)+0x80>
    {
    p = stats + (nStats++);
    292e:	87 e0       	ldi	r24, 0x07	; 7
    2930:	28 9f       	mul	r18, r24
    2932:	c0 01       	movw	r24, r0
    2934:	11 24       	eor	r1, r1
    2936:	e9 81       	ldd	r30, Y+1	; 0x01
    2938:	fa 81       	ldd	r31, Y+2	; 0x02
    293a:	e8 0f       	add	r30, r24
    293c:	f9 1f       	adc	r31, r25
    293e:	2f 5f       	subi	r18, 0xFF	; 255
    2940:	2b 83       	std	Y+3, r18	; 0x03
    *p = DescValueTuple();
    p->value = newValue;
    2942:	f5 82       	std	Z+5, r15	; 0x05
    2944:	e4 82       	std	Z+4, r14	; 0x04
    p->flags.changed = true;
    2946:	86 81       	ldd	r24, Z+6	; 0x06
    2948:	81 60       	ori	r24, 0x01	; 1
    294a:	86 83       	std	Z+6, r24	; 0x06
    // Copy descriptor .
    p->descriptor = GenericStatsDescriptor(key);
    294c:	13 82       	std	Z+3, r1	; 0x03
    294e:	81 e0       	ldi	r24, 0x01	; 1
    2950:	82 83       	std	Z+2, r24	; 0x02
    2952:	11 83       	std	Z+1, r17	; 0x01
    2954:	00 83       	st	Z, r16
    2956:	0a c0       	rjmp	.+20     	; 0x296c <SimpleStatsRotationBase::put(char const*, int)+0x94>
    // Addition of new field done!
    return(true);
    }

#if 1 && defined(DEBUG)
DEBUG_SERIAL_PRINT_FLASHSTRING("Too many keys: ");
    2958:	82 ef       	ldi	r24, 0xF2	; 242
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	0e 94 66 1f 	call	0x3ecc	; 0x3ecc <serialPrintAndFlush(__FlashStringHelper const*)>
DEBUG_SERIAL_PRINT(key);
    2960:	c8 01       	movw	r24, r16
    2962:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <serialPrintAndFlush(char const*)>
DEBUG_SERIAL_PRINTLN();
    2966:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <serialPrintlnAndFlush()>
#endif
  return(false); // FAILED: full.
    296a:	80 e0       	ldi	r24, 0x00	; 0
  }
    296c:	df 91       	pop	r29
    296e:	cf 91       	pop	r28
    2970:	1f 91       	pop	r17
    2972:	0f 91       	pop	r16
    2974:	ff 90       	pop	r15
    2976:	ef 90       	pop	r14
    2978:	08 95       	ret
DEBUG_SERIAL_PRINTLN();
#endif
    return(false);
    }

  DescValueTuple *p = findByKey(key);
    297a:	ce 01       	movw	r24, r28
    297c:	b8 01       	movw	r22, r16
    297e:	0e 94 31 14 	call	0x2862	; 0x2862 <SimpleStatsRotationBase::findByKey(char const*) const>
    2982:	fc 01       	movw	r30, r24
  // If item already exists, update it.
  if(NULL != p)
    2984:	00 97       	sbiw	r24, 0x00	; 0
    2986:	19 f6       	brne	.-122    	; 0x290e <SimpleStatsRotationBase::put(char const*, int)+0x36>
    2988:	ce cf       	rjmp	.-100    	; 0x2926 <SimpleStatsRotationBase::put(char const*, int)+0x4e>

0000298a <SimpleStatsRotationBase::remove(char const*)>:
  return(NULL); // Not found.
  }

// Remove given stat and properties.
// True iff the item existed and was removed.
bool SimpleStatsRotationBase::remove(const SimpleStatsKey key)
    298a:	cf 93       	push	r28
    298c:	df 93       	push	r29
    298e:	ec 01       	movw	r28, r24
  {
  DescValueTuple *p = findByKey(key);
    2990:	0e 94 31 14 	call	0x2862	; 0x2862 <SimpleStatsRotationBase::findByKey(char const*) const>
    2994:	bc 01       	movw	r22, r24
  if(NULL == p) { return(false); }
    2996:	00 97       	sbiw	r24, 0x00	; 0
    2998:	11 f4       	brne	.+4      	; 0x299e <SimpleStatsRotationBase::remove(char const*)+0x14>
    299a:	80 e0       	ldi	r24, 0x00	; 0
    299c:	2b c0       	rjmp	.+86     	; 0x29f4 <SimpleStatsRotationBase::remove(char const*)+0x6a>
  // If it needs to be removed and is not the last item
  // then move the last item down into its slot.
  const bool lastItem = ((p - stats) == (nStats - 1));
    299e:	a9 81       	ldd	r26, Y+1	; 0x01
    29a0:	ba 81       	ldd	r27, Y+2	; 0x02
    29a2:	4b 81       	ldd	r20, Y+3	; 0x03
  if(!lastItem) { *p = stats[nStats-1]; }
    29a4:	9c 01       	movw	r18, r24
    29a6:	2a 1b       	sub	r18, r26
    29a8:	3b 0b       	sbc	r19, r27
    29aa:	87 eb       	ldi	r24, 0xB7	; 183
    29ac:	9d e6       	ldi	r25, 0x6D	; 109
    29ae:	f9 01       	movw	r30, r18
    29b0:	e8 9f       	mul	r30, r24
    29b2:	90 01       	movw	r18, r0
    29b4:	e9 9f       	mul	r30, r25
    29b6:	30 0d       	add	r19, r0
    29b8:	f8 9f       	mul	r31, r24
    29ba:	30 0d       	add	r19, r0
    29bc:	11 24       	eor	r1, r1
    29be:	50 e0       	ldi	r21, 0x00	; 0
    29c0:	ca 01       	movw	r24, r20
    29c2:	01 97       	sbiw	r24, 0x01	; 1
    29c4:	28 17       	cp	r18, r24
    29c6:	39 07       	cpc	r19, r25
    29c8:	89 f0       	breq	.+34     	; 0x29ec <SimpleStatsRotationBase::remove(char const*)+0x62>
    29ca:	fa 01       	movw	r30, r20
    29cc:	83 e0       	ldi	r24, 0x03	; 3
    29ce:	ee 0f       	add	r30, r30
    29d0:	ff 1f       	adc	r31, r31
    29d2:	8a 95       	dec	r24
    29d4:	e1 f7       	brne	.-8      	; 0x29ce <SimpleStatsRotationBase::remove(char const*)+0x44>
    29d6:	e4 1b       	sub	r30, r20
    29d8:	f5 0b       	sbc	r31, r21
    29da:	ea 0f       	add	r30, r26
    29dc:	fb 1f       	adc	r31, r27
    29de:	db 01       	movw	r26, r22
    29e0:	37 97       	sbiw	r30, 0x07	; 7
    29e2:	87 e0       	ldi	r24, 0x07	; 7
    29e4:	01 90       	ld	r0, Z+
    29e6:	0d 92       	st	X+, r0
    29e8:	81 50       	subi	r24, 0x01	; 1
    29ea:	e1 f7       	brne	.-8      	; 0x29e4 <SimpleStatsRotationBase::remove(char const*)+0x5a>
  // We got rid of one!
  // TODO: possibly explicitly destroy/overwrite the removed one at the end.
  --nStats;
    29ec:	8b 81       	ldd	r24, Y+3	; 0x03
    29ee:	81 50       	subi	r24, 0x01	; 1
    29f0:	8b 83       	std	Y+3, r24	; 0x03
    29f2:	81 e0       	ldi	r24, 0x01	; 1
  return(true);
  }
    29f4:	df 91       	pop	r29
    29f6:	cf 91       	pop	r28
    29f8:	08 95       	ret

000029fa <ensureIDCreated(bool)>:
// Coerce any ID bytes to valid values if unset (0xff) or if forced,
// by filling with valid values (0x80--0xfe) from decent entropy gathered on the fly.
// Will moan about invalid values and return false but not attempt to reset,
// eg in case underlying EEPROM cell is worn/failing.
// Returns true iff all values good.
bool ensureIDCreated(const bool force)
    29fa:	af 92       	push	r10
    29fc:	bf 92       	push	r11
    29fe:	cf 92       	push	r12
    2a00:	df 92       	push	r13
    2a02:	ef 92       	push	r14
    2a04:	ff 92       	push	r15
    2a06:	0f 93       	push	r16
    2a08:	1f 93       	push	r17
    2a0a:	cf 93       	push	r28
    2a0c:	df 93       	push	r29
    2a0e:	a8 2e       	mov	r10, r24
    2a10:	bb 24       	eor	r11, r11
    2a12:	b3 94       	inc	r11
    2a14:	ee 24       	eor	r14, r14
    2a16:	ff 24       	eor	r15, r15
    2a18:	c4 e1       	ldi	r28, 0x14	; 20
    2a1a:	d0 e0       	ldi	r29, 0x00	; 0
    2a1c:	dc 2e       	mov	r13, r28
    2a1e:	cd 2e       	mov	r12, r29
  {
  bool allGood = true;
  for(uint8_t i = 0; i < EE_LEN_ID; ++i)
    {
    uint8_t * const loc = i + (uint8_t *)EE_START_ID;
    if(force || (0xff == eeprom_read_byte(loc))) // Byte is unset or change is being forced.
    2a20:	aa 20       	and	r10, r10
    2a22:	41 f4       	brne	.+16     	; 0x2a34 <ensureIDCreated(bool)+0x3a>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2a24:	f9 99       	sbic	0x1f, 1	; 31
    2a26:	fe cf       	rjmp	.-4      	; 0x2a24 <ensureIDCreated(bool)+0x2a>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2a28:	d2 bd       	out	0x22, r29	; 34
    2a2a:	c1 bd       	out	0x21, r28	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2a2c:	f8 9a       	sbi	0x1f, 0	; 31
    2a2e:	80 b5       	in	r24, 0x20	; 32
    2a30:	8f 3f       	cpi	r24, 0xFF	; 255
    2a32:	41 f5       	brne	.+80     	; 0x2a84 <ensureIDCreated(bool)+0x8a>
        {
        serialPrintAndFlush(F("Setting ID byte "));
    2a34:	86 e1       	ldi	r24, 0x16	; 22
    2a36:	91 e0       	ldi	r25, 0x01	; 1
    2a38:	0e 94 66 1f 	call	0x3ecc	; 0x3ecc <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush(i);
    2a3c:	c7 01       	movw	r24, r14
    2a3e:	6a e0       	ldi	r22, 0x0A	; 10
    2a40:	70 e0       	ldi	r23, 0x00	; 0
    2a42:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <serialPrintAndFlush(int, int)>
        serialPrintAndFlush(' ');
    2a46:	80 e2       	ldi	r24, 0x20	; 32
    2a48:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <serialPrintAndFlush(char)>
        const uint8_t envNoise = ((i & 1) ? TemperatureC16.get() : AmbLight.get());
    2a4c:	e0 fe       	sbrs	r14, 0
    2a4e:	03 c0       	rjmp	.+6      	; 0x2a56 <ensureIDCreated(bool)+0x5c>
    2a50:	00 91 62 03 	lds	r16, 0x0362
    2a54:	02 c0       	rjmp	.+4      	; 0x2a5a <ensureIDCreated(bool)+0x60>
    2a56:	00 91 5b 03 	lds	r16, 0x035B
        for( ; ; )
          {
          // Try to make decently-randomised 'unique-ish' ID with mixture of sources.
          // Is not confidential, and will be transmitted in the clear.
          // System will typically not have been running long when this is invoked.
          const uint8_t newValue = 0x80 | (getSecureRandomByte() ^ envNoise);
    2a5a:	81 e0       	ldi	r24, 0x01	; 1
    2a5c:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <getSecureRandomByte(bool)>
    2a60:	18 2f       	mov	r17, r24
    2a62:	10 27       	eor	r17, r16
    2a64:	10 68       	ori	r17, 0x80	; 128
          if(0xff == newValue) { continue; } // Reject unusable value.
    2a66:	1f 3f       	cpi	r17, 0xFF	; 255
    2a68:	c1 f3       	breq	.-16     	; 0x2a5a <ensureIDCreated(bool)+0x60>
          eeprom_smart_update_byte(loc, newValue);
    2a6a:	8d 2d       	mov	r24, r13
    2a6c:	9c 2d       	mov	r25, r12
    2a6e:	61 2f       	mov	r22, r17
    2a70:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <eeprom_smart_update_byte(unsigned char*, unsigned char)>
          serialPrintAndFlush(newValue, HEX);
    2a74:	81 2f       	mov	r24, r17
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	60 e1       	ldi	r22, 0x10	; 16
    2a7a:	70 e0       	ldi	r23, 0x00	; 0
    2a7c:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <serialPrintAndFlush(int, int)>
          break;
          }
        serialPrintlnAndFlush();
    2a80:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <serialPrintlnAndFlush()>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2a84:	f9 99       	sbic	0x1f, 1	; 31
    2a86:	fe cf       	rjmp	.-4      	; 0x2a84 <ensureIDCreated(bool)+0x8a>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2a88:	d2 bd       	out	0x22, r29	; 34
    2a8a:	c1 bd       	out	0x21, r28	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2a8c:	f8 9a       	sbi	0x1f, 0	; 31
    2a8e:	10 b5       	in	r17, 0x20	; 32
        }
    // Validate.
    const uint8_t v2 = eeprom_read_byte(loc);
    if(!validIDByte(v2))
    2a90:	81 2f       	mov	r24, r17
    2a92:	80 58       	subi	r24, 0x80	; 128
    2a94:	8f 37       	cpi	r24, 0x7F	; 127
    2a96:	b0 f0       	brcs	.+44     	; 0x2ac4 <ensureIDCreated(bool)+0xca>
        {
        allGood = false;
        serialPrintAndFlush(F("Invalid byte "));
    2a98:	88 e0       	ldi	r24, 0x08	; 8
    2a9a:	91 e0       	ldi	r25, 0x01	; 1
    2a9c:	0e 94 66 1f 	call	0x3ecc	; 0x3ecc <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush(i);
    2aa0:	c7 01       	movw	r24, r14
    2aa2:	6a e0       	ldi	r22, 0x0A	; 10
    2aa4:	70 e0       	ldi	r23, 0x00	; 0
    2aa6:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <serialPrintAndFlush(int, int)>
        serialPrintAndFlush(F(" ... "));
    2aaa:	82 e0       	ldi	r24, 0x02	; 2
    2aac:	91 e0       	ldi	r25, 0x01	; 1
    2aae:	0e 94 66 1f 	call	0x3ecc	; 0x3ecc <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush(v2, HEX);
    2ab2:	81 2f       	mov	r24, r17
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	60 e1       	ldi	r22, 0x10	; 16
    2ab8:	70 e0       	ldi	r23, 0x00	; 0
    2aba:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <serialPrintAndFlush(int, int)>
        serialPrintlnAndFlush();
    2abe:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <serialPrintlnAndFlush()>
    2ac2:	bb 24       	eor	r11, r11
    2ac4:	08 94       	sec
    2ac6:	e1 1c       	adc	r14, r1
    2ac8:	f1 1c       	adc	r15, r1
    2aca:	21 96       	adiw	r28, 0x01	; 1
// eg in case underlying EEPROM cell is worn/failing.
// Returns true iff all values good.
bool ensureIDCreated(const bool force)
  {
  bool allGood = true;
  for(uint8_t i = 0; i < EE_LEN_ID; ++i)
    2acc:	88 e0       	ldi	r24, 0x08	; 8
    2ace:	e8 16       	cp	r14, r24
    2ad0:	f1 04       	cpc	r15, r1
    2ad2:	09 f0       	breq	.+2      	; 0x2ad6 <ensureIDCreated(bool)+0xdc>
    2ad4:	a3 cf       	rjmp	.-186    	; 0x2a1c <ensureIDCreated(bool)+0x22>
        serialPrintAndFlush(v2, HEX);
        serialPrintlnAndFlush();
        }
     }
  return(allGood);
  }
    2ad6:	8b 2d       	mov	r24, r11
    2ad8:	df 91       	pop	r29
    2ada:	cf 91       	pop	r28
    2adc:	1f 91       	pop	r17
    2ade:	0f 91       	pop	r16
    2ae0:	ff 90       	pop	r15
    2ae2:	ef 90       	pop	r14
    2ae4:	df 90       	pop	r13
    2ae6:	cf 90       	pop	r12
    2ae8:	bf 90       	pop	r11
    2aea:	af 90       	pop	r10
    2aec:	08 95       	ret

00002aee <recordCoreStats(bool, FullStatsMessageCore const*)>:
// Record core incoming stats; ID must be set as a minimum.
// Is thread/ISR-safe and fast.
// May be backed by a finite-depth queue, even zero-length (ie discarding); usually holds just one item.
#if defined(ALLOW_STATS_RX)
#ifndef recordCoreStats
void recordCoreStats(const bool secure, const FullStatsMessageCore_t * const stats)
    2aee:	fb 01       	movw	r30, r22
  {
#if 0 && defined(DEBUG)
  if(NULL == payload) { panic(); }
#endif  // TODO
   if(!stats->containsID) { return; } // Ignore if no ID.
    2af0:	80 81       	ld	r24, Z
    2af2:	80 ff       	sbrs	r24, 0
    2af4:	17 c0       	rjmp	.+46     	; 0x2b24 <recordCoreStats(bool, FullStatsMessageCore const*)+0x36>
   ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    2af6:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2af8:	f8 94       	cli
    {
    if(coreStats.containsID) { ++inboundStatsQueueOverrun; } // Dropped a frame.
    2afa:	80 91 ae 02 	lds	r24, 0x02AE
    2afe:	80 ff       	sbrs	r24, 0
    2b00:	09 c0       	rjmp	.+18     	; 0x2b14 <recordCoreStats(bool, FullStatsMessageCore const*)+0x26>
    2b02:	80 91 b5 02 	lds	r24, 0x02B5
    2b06:	90 91 b6 02 	lds	r25, 0x02B6
    2b0a:	01 96       	adiw	r24, 0x01	; 1
    2b0c:	90 93 b6 02 	sts	0x02B6, r25
    2b10:	80 93 b5 02 	sts	0x02B5, r24
    memcpy((void *)&coreStats, stats, sizeof(coreStats));
    2b14:	ae ea       	ldi	r26, 0xAE	; 174
    2b16:	b2 e0       	ldi	r27, 0x02	; 2
    2b18:	87 e0       	ldi	r24, 0x07	; 7
    2b1a:	01 90       	ld	r0, Z+
    2b1c:	0d 92       	st	X+, r0
    2b1e:	81 50       	subi	r24, 0x01	; 1
    2b20:	e1 f7       	brne	.-8      	; 0x2b1a <recordCoreStats(bool, FullStatsMessageCore const*)+0x2c>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2b22:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    2b24:	08 95       	ret

00002b26 <recordJSONStats(bool, char const*)>:
// The supplied JSON should already have been somewhat validated.
// Is thread/ISR-safe and moderately fast (though will require a data copy).
// May be backed by a finite-depth queue, even zero-length (ie discarding); usually holds just one item.
#if defined(ALLOW_STATS_RX)
#ifndef recordJSONStats
void recordJSONStats(bool secure, const char *json)
    2b26:	1f 93       	push	r17
  {
#if 0 && defined(DEBUG)
  if(NULL == json) { panic(); }
  if('\0' == *json) { panic(); }
#endif
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    2b28:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2b2a:	f8 94       	cli
    {
    if('\0' != *jsonStats) { ++inboundStatsQueueOverrun; } // Dropped a frame.
    2b2c:	80 91 b7 02 	lds	r24, 0x02B7
    2b30:	88 23       	and	r24, r24
    2b32:	49 f0       	breq	.+18     	; 0x2b46 <recordJSONStats(bool, char const*)+0x20>
    2b34:	80 91 b5 02 	lds	r24, 0x02B5
    2b38:	90 91 b6 02 	lds	r25, 0x02B6
    2b3c:	01 96       	adiw	r24, 0x01	; 1
    2b3e:	90 93 b6 02 	sts	0x02B6, r25
    2b42:	80 93 b5 02 	sts	0x02B5, r24
    // Atomically overwrite existing buffer with new non-empty stats message.
    strncpy(jsonStats, json, MSG_JSON_MAX_LENGTH+1);
    2b46:	87 eb       	ldi	r24, 0xB7	; 183
    2b48:	92 e0       	ldi	r25, 0x02	; 2
    2b4a:	48 e3       	ldi	r20, 0x38	; 56
    2b4c:	50 e0       	ldi	r21, 0x00	; 0
    2b4e:	0e 94 da 02 	call	0x5b4	; 0x5b4 <strncpy>
    // Drop over-length message,
    if('\0' != jsonStats[sizeof(jsonStats) - 1]) { *jsonStats = '\0'; }
    2b52:	80 91 ee 02 	lds	r24, 0x02EE
    2b56:	88 23       	and	r24, r24
    2b58:	11 f0       	breq	.+4      	; 0x2b5e <recordJSONStats(bool, char const*)+0x38>
    2b5a:	10 92 b7 02 	sts	0x02B7, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2b5e:	1f bf       	out	0x3f, r17	; 63
    }
  }
    2b60:	1f 91       	pop	r17
    2b62:	08 95       	ret

00002b64 <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)>:
  }

// Store minimal stats payload into (2-byte) buffer from payload struct (without CRC); values are coerced to fit as necessary..
//   * payload  must be non-null
// Used for minimal and full packet forms,
void writeTrailingMinimalStatsPayloadBody(uint8_t *buf, const trailingMinimalStatsPayload_t *payload)
    2b64:	0f 93       	push	r16
    2b66:	1f 93       	push	r17
    2b68:	cf 93       	push	r28
    2b6a:	df 93       	push	r29
    2b6c:	8c 01       	movw	r16, r24
    2b6e:	eb 01       	movw	r28, r22
  {
#ifdef DEBUG
  if(NULL == payload) { panic(); }
    2b70:	61 15       	cp	r22, r1
    2b72:	71 05       	cpc	r23, r1
    2b74:	11 f4       	brne	.+4      	; 0x2b7a <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x16>
    2b76:	0e 94 26 28 	call	0x504c	; 0x504c <panic()>
  DEBUG_SERIAL_PRINTFMT(minTempRepresentable, DEC);
  DEBUG_SERIAL_PRINT_FLASHSTRING(" max=");
  DEBUG_SERIAL_PRINTFMT(maxTempRepresentable, DEC);
  DEBUG_SERIAL_PRINTLN();
#endif
  int16_t temp16Cbiased = payload->tempC16;
    2b7a:	88 81       	ld	r24, Y
    2b7c:	29 81       	ldd	r18, Y+1	; 0x01
    2b7e:	92 2f       	mov	r25, r18
    2b80:	9f 77       	andi	r25, 0x7F	; 127
    2b82:	88 0f       	add	r24, r24
    2b84:	99 1f       	adc	r25, r25
    2b86:	95 95       	asr	r25
    2b88:	87 95       	ror	r24
    2b8a:	26 e0       	ldi	r18, 0x06	; 6
    2b8c:	80 3c       	cpi	r24, 0xC0	; 192
    2b8e:	92 07       	cpc	r25, r18
    2b90:	14 f0       	brlt	.+4      	; 0x2b96 <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x32>
    2b92:	8f eb       	ldi	r24, 0xBF	; 191
    2b94:	96 e0       	ldi	r25, 0x06	; 6
    2b96:	ee ef       	ldi	r30, 0xFE	; 254
    2b98:	80 3c       	cpi	r24, 0xC0	; 192
    2b9a:	9e 07       	cpc	r25, r30
    2b9c:	14 f4       	brge	.+4      	; 0x2ba2 <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x3e>
    2b9e:	80 ec       	ldi	r24, 0xC0	; 192
    2ba0:	9e ef       	ldi	r25, 0xFE	; 254
  if(temp16Cbiased < minTempRepresentable) { temp16Cbiased = minTempRepresentable; }
  else if(temp16Cbiased > maxTempRepresentable) { temp16Cbiased = maxTempRepresentable; }
  temp16Cbiased -= MESSAGING_TRAILING_MINIMAL_STATS_TEMP_BIAS; // Should now be strictly positive.
    2ba2:	9c 01       	movw	r18, r24
    2ba4:	20 5c       	subi	r18, 0xC0	; 192
    2ba6:	3e 4f       	sbci	r19, 0xFE	; 254
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("temp16Cbiased: ");
  DEBUG_SERIAL_PRINTFMT(temp16Cbiased, DEC);
  DEBUG_SERIAL_PRINTLN();
#endif
  const uint8_t byte0 = MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MSBS | (payload->powerLow ? 0x10 : 0) | (temp16Cbiased & 0xf);
    2ba8:	89 81       	ldd	r24, Y+1	; 0x01
    2baa:	87 fd       	sbrc	r24, 7
    2bac:	02 c0       	rjmp	.+4      	; 0x2bb2 <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x4e>
    2bae:	90 e4       	ldi	r25, 0x40	; 64
    2bb0:	01 c0       	rjmp	.+2      	; 0x2bb4 <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x50>
    2bb2:	90 e5       	ldi	r25, 0x50	; 80
  const uint8_t byte1 = (uint8_t) (temp16Cbiased >> 4);
  buf[0] = byte0;
    2bb4:	82 2f       	mov	r24, r18
    2bb6:	8f 70       	andi	r24, 0x0F	; 15
    2bb8:	98 2b       	or	r25, r24
    2bba:	f8 01       	movw	r30, r16
    2bbc:	90 83       	st	Z, r25
  buf[1] = byte1;
    2bbe:	44 e0       	ldi	r20, 0x04	; 4
    2bc0:	35 95       	asr	r19
    2bc2:	27 95       	ror	r18
    2bc4:	4a 95       	dec	r20
    2bc6:	e1 f7       	brne	.-8      	; 0x2bc0 <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x5c>
    2bc8:	21 83       	std	Z+1, r18	; 0x01
#if 0 && defined(DEBUG)
  for(uint8_t i = 0; i < 2; ++i) { if(0 != (buf[i] & 0x80)) { panic(); } } // MSBits should be clear.
#endif
  }
    2bca:	df 91       	pop	r29
    2bcc:	cf 91       	pop	r28
    2bce:	1f 91       	pop	r17
    2bd0:	0f 91       	pop	r16
    2bd2:	08 95       	ret

00002bd4 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)>:
// Note that up to 7 bytes of payload is optimal for the CRC used.
// If successful, returns pointer to terminating 0xff at end of message.
// Returns null if failed (eg because of bad inputs or insufficient buffer space);
// part of the message may have have been written in this case and in particular the previous terminating 0xff may have been overwritten.
uint8_t *encodeFullStatsMessageCore(uint8_t * const buf, const uint8_t buflen, const stats_TX_level secLevel, const bool secureChannel,
    const FullStatsMessageCore_t * const content)
    2bd4:	cf 92       	push	r12
    2bd6:	df 92       	push	r13
    2bd8:	ef 92       	push	r14
    2bda:	ff 92       	push	r15
    2bdc:	0f 93       	push	r16
    2bde:	1f 93       	push	r17
    2be0:	cf 93       	push	r28
    2be2:	df 93       	push	r29
    2be4:	7c 01       	movw	r14, r24
    2be6:	6a 01       	movw	r12, r20
  {
  if(NULL == buf) { return(NULL); } // Could be an assert/panic instead at a pinch.
    2be8:	00 97       	sbiw	r24, 0x00	; 0
    2bea:	09 f4       	brne	.+2      	; 0x2bee <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x1a>
    2bec:	ad c0       	rjmp	.+346    	; 0x2d48 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x174>
  if(NULL == content) { return(NULL); } // Could be an assert/panic instead at a pinch.
    2bee:	01 15       	cp	r16, r1
    2bf0:	11 05       	cpc	r17, r1
    2bf2:	09 f4       	brne	.+2      	; 0x2bf6 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x22>
    2bf4:	a9 c0       	rjmp	.+338    	; 0x2d48 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x174>
  if(secureChannel) { return(NULL); } // TODO: cannot create secure message yet.
    2bf6:	22 23       	and	r18, r18
    2bf8:	09 f0       	breq	.+2      	; 0x2bfc <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x28>
    2bfa:	a6 c0       	rjmp	.+332    	; 0x2d48 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x174>
  const uint8_t payloadLength =
      1 + // Initial header.
      (content->containsID ? 2 : 0) +
      (content->containsTempAndPower ? 2 : 0) +
      1 + // Flags header.
      (content->containsAmbL ? 1 : 0);
    2bfc:	f8 01       	movw	r30, r16
    2bfe:	80 81       	ld	r24, Z
    2c00:	58 2f       	mov	r21, r24
    2c02:	51 70       	andi	r21, 0x01	; 1
    2c04:	80 fd       	sbrc	r24, 0
    2c06:	02 c0       	rjmp	.+4      	; 0x2c0c <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x38>
    2c08:	21 e0       	ldi	r18, 0x01	; 1
    2c0a:	01 c0       	rjmp	.+2      	; 0x2c0e <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x3a>
    2c0c:	23 e0       	ldi	r18, 0x03	; 3
    2c0e:	f8 01       	movw	r30, r16
    2c10:	80 81       	ld	r24, Z
    2c12:	81 fd       	sbrc	r24, 1
    2c14:	02 c0       	rjmp	.+4      	; 0x2c1a <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x46>
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	01 c0       	rjmp	.+2      	; 0x2c1c <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x48>
    2c1a:	92 e0       	ldi	r25, 0x02	; 2
    2c1c:	f8 01       	movw	r30, r16
    2c1e:	40 81       	ld	r20, Z
    2c20:	46 95       	lsr	r20
    2c22:	46 95       	lsr	r20
    2c24:	41 70       	andi	r20, 0x01	; 1
  if(buflen < payloadLength + 2)  { return(NULL); }
    2c26:	84 2f       	mov	r24, r20
    2c28:	8f 5f       	subi	r24, 0xFF	; 255
    2c2a:	82 0f       	add	r24, r18
    2c2c:	89 0f       	add	r24, r25
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	01 96       	adiw	r24, 0x01	; 1
    2c32:	26 2f       	mov	r18, r22
    2c34:	30 e0       	ldi	r19, 0x00	; 0
    2c36:	82 17       	cp	r24, r18
    2c38:	93 07       	cpc	r25, r19
    2c3a:	0c f0       	brlt	.+2      	; 0x2c3e <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x6a>
    2c3c:	85 c0       	rjmp	.+266    	; 0x2d48 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x174>

  // Validate some more detail.
  // ID
  if(content->containsID)
    2c3e:	55 23       	and	r21, r21
    2c40:	59 f0       	breq	.+22     	; 0x2c58 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x84>
    {
    if((content->id0 == (uint8_t)0xff) || (content->id1 == (uint8_t)0xff)) { return(NULL); } // ID bytes cannot be 0xff.
    2c42:	91 81       	ldd	r25, Z+1	; 0x01
    2c44:	9f 3f       	cpi	r25, 0xFF	; 255
    2c46:	09 f4       	brne	.+2      	; 0x2c4a <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x76>
    2c48:	7f c0       	rjmp	.+254    	; 0x2d48 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x174>
    2c4a:	82 81       	ldd	r24, Z+2	; 0x02
    2c4c:	8f 3f       	cpi	r24, 0xFF	; 255
    2c4e:	09 f4       	brne	.+2      	; 0x2c52 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x7e>
    2c50:	7b c0       	rjmp	.+246    	; 0x2d48 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x174>
    if((content->id0 & 0x80) != (content->id1 & 0x80)) { return(NULL); } // ID top bits don't match.
    2c52:	89 27       	eor	r24, r25
    2c54:	87 fd       	sbrc	r24, 7
    2c56:	78 c0       	rjmp	.+240    	; 0x2d48 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x174>
    }
  // Ambient light.
  if(content->containsAmbL)
    2c58:	44 23       	and	r20, r20
    2c5a:	31 f0       	breq	.+12     	; 0x2c68 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x94>
    {
    if((content->ambL == 0) || (content->ambL == (uint8_t)0xff)) { return(NULL); } // Forbidden values.
    2c5c:	f8 01       	movw	r30, r16
    2c5e:	85 81       	ldd	r24, Z+5	; 0x05
    2c60:	81 50       	subi	r24, 0x01	; 1
    2c62:	8e 3f       	cpi	r24, 0xFE	; 254
    2c64:	08 f0       	brcs	.+2      	; 0x2c68 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x94>
    2c66:	70 c0       	rjmp	.+224    	; 0x2d48 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x174>
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_HIGH 2
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_SECURE 1
  const uint8_t header = MESSAGING_FULL_STATS_HEADER_MSBS |
      (content->containsID ? MESSAGING_FULL_STATS_HEADER_BITS_ID_PRESENT : 0) |
      ((content->containsID && (0 != (content->id0 & 0x80))) ? MESSAGING_FULL_STATS_HEADER_BITS_ID_HIGH : 0) |
      0; // TODO: cannot do secure messages yet.
    2c68:	55 23       	and	r21, r21
    2c6a:	11 f4       	brne	.+4      	; 0x2c70 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x9c>
    2c6c:	80 e7       	ldi	r24, 0x70	; 112
    2c6e:	08 c0       	rjmp	.+16     	; 0x2c80 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xac>
    2c70:	f8 01       	movw	r30, r16
    2c72:	81 81       	ldd	r24, Z+1	; 0x01
    2c74:	87 ff       	sbrs	r24, 7
    2c76:	03 c0       	rjmp	.+6      	; 0x2c7e <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xaa>
    2c78:	92 e0       	ldi	r25, 0x02	; 2
    2c7a:	84 e7       	ldi	r24, 0x74	; 116
    2c7c:	02 c0       	rjmp	.+4      	; 0x2c82 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xae>
    2c7e:	84 e7       	ldi	r24, 0x74	; 116
    2c80:	90 e0       	ldi	r25, 0x00	; 0
  *b++ = header;
    2c82:	89 2b       	or	r24, r25
    2c84:	e7 01       	movw	r28, r14
    2c86:	89 93       	st	Y+, r24
 
  // Insert ID if requested.
  if(content->containsID)
    2c88:	f8 01       	movw	r30, r16
    2c8a:	80 81       	ld	r24, Z
    2c8c:	80 ff       	sbrs	r24, 0
    2c8e:	09 c0       	rjmp	.+18     	; 0x2ca2 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xce>
    {
    *b++ = content->id0 & 0x7f;
    2c90:	81 81       	ldd	r24, Z+1	; 0x01
    2c92:	8f 77       	andi	r24, 0x7F	; 127
    2c94:	f7 01       	movw	r30, r14
    2c96:	81 83       	std	Z+1, r24	; 0x01
    *b++ = content->id1 & 0x7f;
    2c98:	f8 01       	movw	r30, r16
    2c9a:	82 81       	ldd	r24, Z+2	; 0x02
    2c9c:	8f 77       	andi	r24, 0x7F	; 127
    2c9e:	89 83       	std	Y+1, r24	; 0x01
    2ca0:	22 96       	adiw	r28, 0x02	; 2
    }

  // Insert basic temperature and power status if requested.
  if(content->containsTempAndPower)
    2ca2:	f8 01       	movw	r30, r16
    2ca4:	80 81       	ld	r24, Z
    2ca6:	81 ff       	sbrs	r24, 1
    2ca8:	07 c0       	rjmp	.+14     	; 0x2cb8 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xe4>
    {
    writeTrailingMinimalStatsPayloadBody(b, &(content->tempAndPower));
    2caa:	b8 01       	movw	r22, r16
    2cac:	6d 5f       	subi	r22, 0xFD	; 253
    2cae:	7f 4f       	sbci	r23, 0xFF	; 255
    2cb0:	ce 01       	movw	r24, r28
    2cb2:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)>
    b += 2;
    2cb6:	22 96       	adiw	r28, 0x02	; 2
//#define MESSAGING_FULL_STATS_FLAGS_HEADER_AMBL 8
//#define MESSAGING_FULL_STATS_FLAGS_HEADER_RHP 4
  // Omit occupancy data unless encoding for a secure channel or at a very permissive stats TX security level.
  const uint8_t flagsHeader = MESSAGING_FULL_STATS_FLAGS_HEADER_MSBS |
    (content->containsAmbL ? MESSAGING_FULL_STATS_FLAGS_HEADER_AMBL : 0) |
    ((secureChannel || (secLevel <= stTXalwaysAll)) ? (content->occ & 3) : 0);
    2cb8:	f8 01       	movw	r30, r16
    2cba:	80 81       	ld	r24, Z
    2cbc:	82 fd       	sbrc	r24, 2
    2cbe:	02 c0       	rjmp	.+4      	; 0x2cc4 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xf0>
    2cc0:	90 e6       	ldi	r25, 0x60	; 96
    2cc2:	01 c0       	rjmp	.+2      	; 0x2cc6 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xf2>
    2cc4:	98 e6       	ldi	r25, 0x68	; 104
    2cc6:	1c 14       	cp	r1, r12
    2cc8:	1d 04       	cpc	r1, r13
    2cca:	14 f4       	brge	.+4      	; 0x2cd0 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xfc>
    2ccc:	80 e0       	ldi	r24, 0x00	; 0
    2cce:	03 c0       	rjmp	.+6      	; 0x2cd6 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x102>
    2cd0:	f8 01       	movw	r30, r16
    2cd2:	86 81       	ldd	r24, Z+6	; 0x06
    2cd4:	83 70       	andi	r24, 0x03	; 3
  *b++ = flagsHeader;
    2cd6:	89 2b       	or	r24, r25
    2cd8:	de 01       	movw	r26, r28
    2cda:	8d 93       	st	X+, r24
  // Now insert extra fields as flagged.
  if(content->containsAmbL)
    2cdc:	f8 01       	movw	r30, r16
    2cde:	80 81       	ld	r24, Z
    2ce0:	82 ff       	sbrs	r24, 2
    2ce2:	03 c0       	rjmp	.+6      	; 0x2cea <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x116>
    { *b++ = content->ambL; }
    2ce4:	85 81       	ldd	r24, Z+5	; 0x05
    2ce6:	89 83       	std	Y+1, r24	; 0x01
    2ce8:	11 96       	adiw	r26, 0x01	; 1
    2cea:	f7 01       	movw	r30, r14
    2cec:	3f e7       	ldi	r19, 0x7F	; 127
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    2cee:	11 e0       	ldi	r17, 0x01	; 1
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
    2cf0:	77 e3       	ldi	r23, 0x37	; 55
    2cf2:	21 c0       	rjmp	.+66     	; 0x2d36 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x162>
  // TODO: RH% etc

  // Finish off message by computing and appending the CRC and then terminating 0xff (and return pointer to 0xff).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    2cf4:	80 81       	ld	r24, Z
    2cf6:	60 e8       	ldi	r22, 0x80	; 128
    2cf8:	40 e0       	ldi	r20, 0x00	; 0
    2cfa:	50 e0       	ldi	r21, 0x00	; 0
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    2cfc:	c8 2f       	mov	r28, r24
    2cfe:	d0 e0       	ldi	r29, 0x00	; 0
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
    2d00:	83 2f       	mov	r24, r19
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	06 e0       	ldi	r16, 0x06	; 6
    2d06:	96 95       	lsr	r25
    2d08:	87 95       	ror	r24
    2d0a:	0a 95       	dec	r16
    2d0c:	e1 f7       	brne	.-8      	; 0x2d06 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x132>
    2d0e:	28 2f       	mov	r18, r24
    2d10:	21 70       	andi	r18, 0x01	; 1
        if(0 != (datum & i)) { bit = !bit; }
    2d12:	86 2f       	mov	r24, r22
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	8c 23       	and	r24, r28
    2d18:	9d 23       	and	r25, r29
    2d1a:	89 2b       	or	r24, r25
    2d1c:	09 f0       	breq	.+2      	; 0x2d20 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x14c>
    2d1e:	21 27       	eor	r18, r17
        crc <<= 1;
    2d20:	33 0f       	add	r19, r19
        if(bit) { crc ^= 0x37; }
    2d22:	21 11       	cpse	r18, r1
    2d24:	37 27       	eor	r19, r23
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
    2d26:	66 95       	lsr	r22
    2d28:	4f 5f       	subi	r20, 0xFF	; 255
    2d2a:	5f 4f       	sbci	r21, 0xFF	; 255
    2d2c:	48 30       	cpi	r20, 0x08	; 8
    2d2e:	51 05       	cpc	r21, r1
    2d30:	39 f7       	brne	.-50     	; 0x2d00 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x12c>
  // TODO: RH% etc

  // Finish off message by computing and appending the CRC and then terminating 0xff (and return pointer to 0xff).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    2d32:	31 96       	adiw	r30, 0x01	; 1
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
        }
    return(crc & 0x7f);
    2d34:	3f 77       	andi	r19, 0x7F	; 127
  // TODO: RH% etc

  // Finish off message by computing and appending the CRC and then terminating 0xff (and return pointer to 0xff).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    2d36:	ea 17       	cp	r30, r26
    2d38:	fb 07       	cpc	r31, r27
    2d3a:	e0 f2       	brcs	.-72     	; 0x2cf4 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x120>
  *b++ = crc;
    2d3c:	fd 01       	movw	r30, r26
    2d3e:	31 93       	st	Z+, r19
  *b = 0xff;
    2d40:	8f ef       	ldi	r24, 0xFF	; 255
    2d42:	11 96       	adiw	r26, 0x01	; 1
    2d44:	8c 93       	st	X, r24
    2d46:	02 c0       	rjmp	.+4      	; 0x2d4c <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x178>
#if 0 && defined(DEBUG)
  if(b - buf != payloadLength + 1) { panic(F("msg gen err")); }
#endif
  return(b);
    2d48:	e0 e0       	ldi	r30, 0x00	; 0
    2d4a:	f0 e0       	ldi	r31, 0x00	; 0
  }
    2d4c:	cf 01       	movw	r24, r30
    2d4e:	df 91       	pop	r29
    2d50:	cf 91       	pop	r28
    2d52:	1f 91       	pop	r17
    2d54:	0f 91       	pop	r16
    2d56:	ff 90       	pop	r15
    2d58:	ef 90       	pop	r14
    2d5a:	df 90       	pop	r13
    2d5c:	cf 90       	pop	r12
    2d5e:	08 95       	ret

00002d60 <SupplyVoltageMilliVolts::get() const>:
    virtual uint16_t read();

    // Return last value fetched by read(); undefined before first read()).
    // Fast.
    // NOT thread-safe nor usable within ISRs (Interrupt Service Routines).
    virtual uint16_t get() const { return(mV); }
    2d60:	fc 01       	movw	r30, r24
    2d62:	84 81       	ldd	r24, Z+4	; 0x04
    2d64:	95 81       	ldd	r25, Z+5	; 0x05
    2d66:	08 95       	ret

00002d68 <SupplyVoltageMilliVolts::tag() const>:

    // Returns a suggested (JSON) tag/field/key name including units of get(); NULL means no recommended tag.
    // The lifetime of the pointed-to text must be at least that of the Sensor instance.
    virtual const char *tag() const { return("B|mV"); }
    2d68:	81 e2       	ldi	r24, 0x21	; 33
    2d6a:	91 e0       	ldi	r25, 0x01	; 1
    2d6c:	08 95       	ret

00002d6e <__vector_9>:
  timer2XtalIntSetup();
#endif
  }

#ifdef WAKEUP_32768HZ_XTAL
ISR(TIMER2_OVF_vect)
    2d6e:	1f 92       	push	r1
    2d70:	0f 92       	push	r0
    2d72:	0f b6       	in	r0, 0x3f	; 63
    2d74:	0f 92       	push	r0
    2d76:	11 24       	eor	r1, r1
    2d78:	2f 93       	push	r18
    2d7a:	8f 93       	push	r24
    2d7c:	9f 93       	push	r25
// must not enable interrupts, and must leave interrupt state as was on entry.
// If not being called from an ISR then locking round this call that works with the getXXX() functions should be considered.
static inline void tickSecondISR()
#endif
  {
  register uint_fast8_t sTemp = _secondsLT; // Avoid some redundant memory accesses.
    2d7e:	80 91 fd 02 	lds	r24, 0x02FD
  sTemp += MAIN_TICK_S;
    2d82:	8e 5f       	subi	r24, 0xFE	; 254
  if(sTemp > 59)
    2d84:	8c 33       	cpi	r24, 0x3C	; 60
    2d86:	c8 f0       	brcs	.+50     	; 0x2dba <__vector_9+0x4c>
    {
    sTemp = 0; // Seconds roll.
    register uint_least16_t mTemp = _minutesSinceMidnightLT + 1; // Avoid some redundant memory accesses.
    2d88:	80 91 fe 02 	lds	r24, 0x02FE
    2d8c:	90 91 ff 02 	lds	r25, 0x02FF
    2d90:	01 96       	adiw	r24, 0x01	; 1
    if(mTemp > 1439)
    2d92:	25 e0       	ldi	r18, 0x05	; 5
    2d94:	80 3a       	cpi	r24, 0xA0	; 160
    2d96:	92 07       	cpc	r25, r18
    2d98:	58 f0       	brcs	.+22     	; 0x2db0 <__vector_9+0x42>
      {
      mTemp = 0; // Minutes/hours roll.
      // Increment the day.
      ++_daysSince1999LT; // Don't currently prevent roll.
    2d9a:	80 91 00 03 	lds	r24, 0x0300
    2d9e:	90 91 01 03 	lds	r25, 0x0301
    2da2:	01 96       	adiw	r24, 0x01	; 1
    2da4:	90 93 01 03 	sts	0x0301, r25
    2da8:	80 93 00 03 	sts	0x0300, r24
    2dac:	80 e0       	ldi	r24, 0x00	; 0
    2dae:	90 e0       	ldi	r25, 0x00	; 0
      }
    _minutesSinceMidnightLT = mTemp;
    2db0:	90 93 ff 02 	sts	0x02FF, r25
    2db4:	80 93 fe 02 	sts	0x02FE, r24
    2db8:	80 e0       	ldi	r24, 0x00	; 0
    }
  _secondsLT = sTemp;
    2dba:	80 93 fd 02 	sts	0x02FD, r24
#if defined(TWO_S_TICK_RTC_SUPPORT)
  tickDoubleSecondISR();
#else
  tickSecondISR();
#endif
  }
    2dbe:	9f 91       	pop	r25
    2dc0:	8f 91       	pop	r24
    2dc2:	2f 91       	pop	r18
    2dc4:	0f 90       	pop	r0
    2dc6:	0f be       	out	0x3f, r0	; 63
    2dc8:	0f 90       	pop	r0
    2dca:	1f 90       	pop	r1
    2dcc:	18 95       	reti

00002dce <__vector_6>:
// May contain a little entropy concentrated in the least-significant bits, in part from WDT-vs-CPU-clock jitter, especially if not sleeping.
static volatile uint8_t _watchdogFired;

// Catch watchdog timer interrupt to automatically clear WDIE and WDIF.
// This allows use of watchdog for low-power timed sleep.
ISR(WDT_vect)
    2dce:	1f 92       	push	r1
    2dd0:	0f 92       	push	r0
    2dd2:	0f b6       	in	r0, 0x3f	; 63
    2dd4:	0f 92       	push	r0
    2dd6:	11 24       	eor	r1, r1
    2dd8:	8f 93       	push	r24
    2dda:	9f 93       	push	r25
    2ddc:	df 93       	push	r29
    2dde:	cf 93       	push	r28
    2de0:	0f 92       	push	r0
    2de2:	cd b7       	in	r28, 0x3d	; 61
    2de4:	de b7       	in	r29, 0x3e	; 62
  {
  // WDIE and WDIF are cleared in hardware upon entering this ISR.
  wdt_disable();
    2de6:	88 e1       	ldi	r24, 0x18	; 24
    2de8:	0f b6       	in	r0, 0x3f	; 63
    2dea:	f8 94       	cli
    2dec:	80 93 60 00 	sts	0x0060, r24
    2df0:	10 92 60 00 	sts	0x0060, r1
    2df4:	0f be       	out	0x3f, r0	; 63
  // Note: be careful of what is accessed from this ISR.
  // Capture some marginal entropy from the stack position.
  // 
  uint8_t x;
  _watchdogFired = ((uint8_t) 0x80) | ((uint8_t) (int) &x); // Ensure non-zero, retaining any entropy in ls bits.
    2df6:	ce 01       	movw	r24, r28
    2df8:	01 96       	adiw	r24, 0x01	; 1
    2dfa:	80 68       	ori	r24, 0x80	; 128
    2dfc:	80 93 f6 02 	sts	0x02F6, r24
  }
    2e00:	0f 90       	pop	r0
    2e02:	cf 91       	pop	r28
    2e04:	df 91       	pop	r29
    2e06:	9f 91       	pop	r25
    2e08:	8f 91       	pop	r24
    2e0a:	0f 90       	pop	r0
    2e0c:	0f be       	out	0x3f, r0	; 63
    2e0e:	0f 90       	pop	r0
    2e10:	1f 90       	pop	r1
    2e12:	18 95       	reti

00002e14 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>:
// Note: inlining is prevented so as to avoid migrating anything into the section where the CPU is running slowly.
//
// Note: may be dubious to run CPU clock less than 4x 32768Hz crystal speed,
// eg at 31250Hz for 8MHz RC clock and max prescale.
// Don't access timer 2 regs at low CPU speed, eg in ISRs.
__attribute__ ((noinline)) void sleepLowPowerLoopsMinCPUSpeed(uint16_t loops)
    2e14:	fc 01       	movw	r30, r24
  {
  const clock_div_t prescale = clock_prescale_get(); // Capture current prescale value.
    2e16:	80 91 61 00 	lds	r24, 0x0061
  clock_prescale_set(MAX_CPU_PRESCALE); // Reduce clock speed (increase prescale) as far as possible.
    2e1a:	28 e0       	ldi	r18, 0x08	; 8
    2e1c:	30 e0       	ldi	r19, 0x00	; 0
    2e1e:	40 e8       	ldi	r20, 0x80	; 128
    2e20:	0f b6       	in	r0, 0x3f	; 63
    2e22:	f8 94       	cli
    2e24:	40 93 61 00 	sts	0x0061, r20
    2e28:	20 93 61 00 	sts	0x0061, r18
    2e2c:	0f be       	out	0x3f, r0	; 63
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    2e2e:	31 97       	sbiw	r30, 0x01	; 1
    2e30:	f1 f7       	brne	.-4      	; 0x2e2e <sleepLowPowerLoopsMinCPUSpeed(unsigned int)+0x1a>
  _delay_loop_2(loops); // Burn cycles...
  clock_prescale_set(prescale); // Restore clock prescale.
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	8f 70       	andi	r24, 0x0F	; 15
    2e36:	90 70       	andi	r25, 0x00	; 0
    2e38:	20 e8       	ldi	r18, 0x80	; 128
    2e3a:	0f b6       	in	r0, 0x3f	; 63
    2e3c:	f8 94       	cli
    2e3e:	20 93 61 00 	sts	0x0061, r18
    2e42:	80 93 61 00 	sts	0x0061, r24
    2e46:	0f be       	out	0x3f, r0	; 63
  }
    2e48:	08 95       	ret

00002e4a <sleepPwrSaveWithBODDisabled()>:
#endif

// Sleep with BOD disabled in power-save mode; will wake on any interrupt.
void sleepPwrSaveWithBODDisabled()
  {
  set_sleep_mode(SLEEP_MODE_PWR_SAVE); // Stop all but timer 2 and watchdog when sleeping.
    2e4a:	83 b7       	in	r24, 0x33	; 51
    2e4c:	81 7f       	andi	r24, 0xF1	; 241
    2e4e:	86 60       	ori	r24, 0x06	; 6
    2e50:	83 bf       	out	0x33, r24	; 51
  cli();
    2e52:	f8 94       	cli
  sleep_enable();
    2e54:	83 b7       	in	r24, 0x33	; 51
    2e56:	81 60       	ori	r24, 0x01	; 1
    2e58:	83 bf       	out	0x33, r24	; 51
  sleep_bod_disable();
    2e5a:	85 b7       	in	r24, 0x35	; 53
    2e5c:	80 66       	ori	r24, 0x60	; 96
    2e5e:	85 bf       	out	0x35, r24	; 53
    2e60:	8f 7d       	andi	r24, 0xDF	; 223
    2e62:	85 bf       	out	0x35, r24	; 53
  sei();
    2e64:	78 94       	sei
  sleep_cpu();
    2e66:	88 95       	sleep
  sleep_disable();
    2e68:	83 b7       	in	r24, 0x33	; 51
    2e6a:	8e 7f       	andi	r24, 0xFE	; 254
    2e6c:	83 bf       	out	0x33, r24	; 51
  sei();
    2e6e:	78 94       	sei
  }
    2e70:	08 95       	ret

00002e72 <nap(signed char)>:
//   * watchdogSleep is one of the WDTO_XX values from <avr/wdt.h>
// May be useful to call minimsePowerWithoutSleep() first, when not needing any modules left on.
void nap(int_fast8_t watchdogSleep)
  {
  // Watchdog should (already) be disabled on entry.
  _watchdogFired = 0;
    2e72:	10 92 f6 02 	sts	0x02F6, r1

  wdt_enable(watchdogSleep);
    2e76:	83 fd       	sbrc	r24, 3
    2e78:	02 c0       	rjmp	.+4      	; 0x2e7e <nap(signed char)+0xc>
    2e7a:	28 e0       	ldi	r18, 0x08	; 8
    2e7c:	01 c0       	rjmp	.+2      	; 0x2e80 <nap(signed char)+0xe>
    2e7e:	28 e2       	ldi	r18, 0x28	; 40
    2e80:	87 70       	andi	r24, 0x07	; 7
    2e82:	28 2b       	or	r18, r24
    2e84:	88 e1       	ldi	r24, 0x18	; 24
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	0f b6       	in	r0, 0x3f	; 63
    2e8a:	f8 94       	cli
    2e8c:	a8 95       	wdr
    2e8e:	80 93 60 00 	sts	0x0060, r24
    2e92:	0f be       	out	0x3f, r0	; 63
    2e94:	20 93 60 00 	sts	0x0060, r18
  WDTCSR |= (1 << WDIE);
    2e98:	80 91 60 00 	lds	r24, 0x0060
    2e9c:	80 64       	ori	r24, 0x40	; 64
    2e9e:	80 93 60 00 	sts	0x0060, r24
#endif

// Sleep with BOD disabled in power-save mode; will wake on any interrupt.
void sleepPwrSaveWithBODDisabled()
  {
  set_sleep_mode(SLEEP_MODE_PWR_SAVE); // Stop all but timer 2 and watchdog when sleeping.
    2ea2:	83 b7       	in	r24, 0x33	; 51
    2ea4:	81 7f       	andi	r24, 0xF1	; 241
    2ea6:	86 60       	ori	r24, 0x06	; 6
    2ea8:	83 bf       	out	0x33, r24	; 51
  cli();
    2eaa:	f8 94       	cli
  sleep_enable();
    2eac:	83 b7       	in	r24, 0x33	; 51
    2eae:	81 60       	ori	r24, 0x01	; 1
    2eb0:	83 bf       	out	0x33, r24	; 51
  sleep_bod_disable();
    2eb2:	85 b7       	in	r24, 0x35	; 53
    2eb4:	80 66       	ori	r24, 0x60	; 96
    2eb6:	85 bf       	out	0x35, r24	; 53
    2eb8:	8f 7d       	andi	r24, 0xDF	; 223
    2eba:	85 bf       	out	0x35, r24	; 53
  sei();
    2ebc:	78 94       	sei
  sleep_cpu();
    2ebe:	88 95       	sleep
  sleep_disable();
    2ec0:	83 b7       	in	r24, 0x33	; 51
    2ec2:	8e 7f       	andi	r24, 0xFE	; 254
    2ec4:	83 bf       	out	0x33, r24	; 51
  sei();
    2ec6:	78 94       	sei

  // Keep sleeping until watchdog actually fires.
  for( ; ; )
    {
    sleepPwrSaveWithBODDisabled();
    if(0 != _watchdogFired)
    2ec8:	80 91 f6 02 	lds	r24, 0x02F6
    2ecc:	88 23       	and	r24, r24
    2ece:	49 f3       	breq	.-46     	; 0x2ea2 <nap(signed char)+0x30>
      {
      wdt_disable(); // Avoid spurious wakeup later.
    2ed0:	88 e1       	ldi	r24, 0x18	; 24
    2ed2:	0f b6       	in	r0, 0x3f	; 63
    2ed4:	f8 94       	cli
    2ed6:	80 93 60 00 	sts	0x0060, r24
    2eda:	10 92 60 00 	sts	0x0060, r1
    2ede:	0f be       	out	0x3f, r0	; 63
      return; // All done!
      }
    }
 }
    2ee0:	08 95       	ret

00002ee2 <idleCPU(signed char)>:
// Should reduce power consumption vs spinning the CPU >> 3x, though not nearly as much as nap().
// True iff watchdog timer expired; false if something else woke the CPU.
bool idleCPU(const int_fast8_t watchdogSleep)
  {
  // Watchdog should (already) be disabled on entry.
  _watchdogFired = 0;
    2ee2:	10 92 f6 02 	sts	0x02F6, r1
  wdt_enable(watchdogSleep);
    2ee6:	83 fd       	sbrc	r24, 3
    2ee8:	02 c0       	rjmp	.+4      	; 0x2eee <idleCPU(signed char)+0xc>
    2eea:	28 e0       	ldi	r18, 0x08	; 8
    2eec:	01 c0       	rjmp	.+2      	; 0x2ef0 <idleCPU(signed char)+0xe>
    2eee:	28 e2       	ldi	r18, 0x28	; 40
    2ef0:	87 70       	andi	r24, 0x07	; 7
    2ef2:	28 2b       	or	r18, r24
    2ef4:	88 e1       	ldi	r24, 0x18	; 24
    2ef6:	90 e0       	ldi	r25, 0x00	; 0
    2ef8:	0f b6       	in	r0, 0x3f	; 63
    2efa:	f8 94       	cli
    2efc:	a8 95       	wdr
    2efe:	80 93 60 00 	sts	0x0060, r24
    2f02:	0f be       	out	0x3f, r0	; 63
    2f04:	20 93 60 00 	sts	0x0060, r18
  WDTCSR |= (1 << WDIE);
    2f08:	80 91 60 00 	lds	r24, 0x0060
    2f0c:	80 64       	ori	r24, 0x40	; 64
    2f0e:	80 93 60 00 	sts	0x0060, r24
  set_sleep_mode(SLEEP_MODE_IDLE); // Leave everything running but the CPU...
    2f12:	83 b7       	in	r24, 0x33	; 51
    2f14:	81 7f       	andi	r24, 0xF1	; 241
    2f16:	83 bf       	out	0x33, r24	; 51
  sleep_mode();
    2f18:	83 b7       	in	r24, 0x33	; 51
    2f1a:	81 60       	ori	r24, 0x01	; 1
    2f1c:	83 bf       	out	0x33, r24	; 51
    2f1e:	88 95       	sleep
    2f20:	83 b7       	in	r24, 0x33	; 51
    2f22:	8e 7f       	andi	r24, 0xFE	; 254
    2f24:	83 bf       	out	0x33, r24	; 51
  //sleep_disable();
  wdt_disable();
    2f26:	88 e1       	ldi	r24, 0x18	; 24
    2f28:	0f b6       	in	r0, 0x3f	; 63
    2f2a:	f8 94       	cli
    2f2c:	80 93 60 00 	sts	0x0060, r24
    2f30:	10 92 60 00 	sts	0x0060, r1
    2f34:	0f be       	out	0x3f, r0	; 63
  return(0 != _watchdogFired);
    2f36:	80 91 f6 02 	lds	r24, 0x02F6
    2f3a:	81 11       	cpse	r24, r1
    2f3c:	81 e0       	ldi	r24, 0x01	; 1
  }
    2f3e:	08 95       	ret

00002f40 <__vector_21>:
  }


// Allow wake from (lower-power) sleep while ADC is running.
static volatile bool ADC_complete;
ISR(ADC_vect) { ADC_complete = true; }
    2f40:	1f 92       	push	r1
    2f42:	0f 92       	push	r0
    2f44:	0f b6       	in	r0, 0x3f	; 63
    2f46:	0f 92       	push	r0
    2f48:	11 24       	eor	r1, r1
    2f4a:	8f 93       	push	r24
    2f4c:	81 e0       	ldi	r24, 0x01	; 1
    2f4e:	80 93 f8 02 	sts	0x02F8, r24
    2f52:	8f 91       	pop	r24
    2f54:	0f 90       	pop	r0
    2f56:	0f be       	out	0x3f, r0	; 63
    2f58:	0f 90       	pop	r0
    2f5a:	1f 90       	pop	r1
    2f5c:	18 95       	reti

00002f5e <_analogueNoiseReducedReadM(unsigned char, signed char)>:

// Read ADC/analogue input with reduced noise if possible, in range [0,1023].
//   * admux  is the value to set ADMUX to
//   * samples  maximum number of samples to take (if one, nap() before); strictly positive
// Sets sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
static uint16_t _analogueNoiseReducedReadM(const uint8_t admux, int8_t samples = 3)
    2f5e:	0f 93       	push	r16
    2f60:	1f 93       	push	r17
    2f62:	98 2f       	mov	r25, r24
    2f64:	16 2f       	mov	r17, r22
// If already powered up then do nothing other than return false.
// This does not power up the analogue comparator; this needs to be manually enabled if required.
// If this returns true then a matching powerDownADC() may be advisable.
bool powerUpADCIfDisabled()
  {
  if(!(PRR & _BV(PRADC))) { return(false); }
    2f66:	80 91 64 00 	lds	r24, 0x0064
    2f6a:	80 fd       	sbrc	r24, 0
    2f6c:	02 c0       	rjmp	.+4      	; 0x2f72 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x14>
    2f6e:	00 e0       	ldi	r16, 0x00	; 0
    2f70:	0b c0       	rjmp	.+22     	; 0x2f88 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x2a>
  PRR &= ~_BV(PRADC); // Enable the ADC.
    2f72:	80 91 64 00 	lds	r24, 0x0064
    2f76:	8e 7f       	andi	r24, 0xFE	; 254
    2f78:	80 93 64 00 	sts	0x0064, r24
  ADCSRA |= _BV(ADEN);
    2f7c:	80 91 7a 00 	lds	r24, 0x007A
    2f80:	80 68       	ori	r24, 0x80	; 128
    2f82:	80 93 7a 00 	sts	0x007A, r24
    2f86:	01 e0       	ldi	r16, 0x01	; 1
//   * samples  maximum number of samples to take (if one, nap() before); strictly positive
// Sets sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
static uint16_t _analogueNoiseReducedReadM(const uint8_t admux, int8_t samples = 3)
  {
  const bool neededEnable = powerUpADCIfDisabled();
  ACSR |= _BV(ACD); // Disable the analogue comparator.
    2f88:	80 b7       	in	r24, 0x30	; 48
    2f8a:	80 68       	ori	r24, 0x80	; 128
    2f8c:	80 bf       	out	0x30, r24	; 48
  ADMUX = admux;
    2f8e:	90 93 7c 00 	sts	0x007C, r25
  if(samples < 2) { nap(WDTO_15MS); } // Allow plenty of time for things to settle if not taking multiple samples.
    2f92:	12 30       	cpi	r17, 0x02	; 2
    2f94:	1c f4       	brge	.+6      	; 0x2f9c <_analogueNoiseReducedReadM(unsigned char, signed char)+0x3e>
    2f96:	80 e0       	ldi	r24, 0x00	; 0
    2f98:	0e 94 39 17 	call	0x2e72	; 0x2e72 <nap(signed char)>
  set_sleep_mode(SLEEP_MODE_ADC);
    2f9c:	83 b7       	in	r24, 0x33	; 51
    2f9e:	81 7f       	andi	r24, 0xF1	; 241
    2fa0:	82 60       	ori	r24, 0x02	; 2
    2fa2:	83 bf       	out	0x33, r24	; 51
  ADCSRB = 0; // Enable free-running mode.
    2fa4:	10 92 7b 00 	sts	0x007B, r1
  bitWrite(ADCSRA, ADATE, (samples>1)); // Enable ADC auto-trigger iff wanting multiple samples.
    2fa8:	12 30       	cpi	r17, 0x02	; 2
    2faa:	24 f0       	brlt	.+8      	; 0x2fb4 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x56>
    2fac:	80 91 7a 00 	lds	r24, 0x007A
    2fb0:	80 62       	ori	r24, 0x20	; 32
    2fb2:	03 c0       	rjmp	.+6      	; 0x2fba <_analogueNoiseReducedReadM(unsigned char, signed char)+0x5c>
    2fb4:	80 91 7a 00 	lds	r24, 0x007A
    2fb8:	8f 7d       	andi	r24, 0xDF	; 223
    2fba:	80 93 7a 00 	sts	0x007A, r24
  bitSet(ADCSRA, ADIE); // Turn on ADC interrupt.
    2fbe:	80 91 7a 00 	lds	r24, 0x007A
    2fc2:	88 60       	ori	r24, 0x08	; 8
    2fc4:	80 93 7a 00 	sts	0x007A, r24
  bitSet(ADCSRA, ADSC); // Start conversion(s).
    2fc8:	80 91 7a 00 	lds	r24, 0x007A
    2fcc:	80 64       	ori	r24, 0x40	; 64
    2fce:	80 93 7a 00 	sts	0x007A, r24
    2fd2:	4f ef       	ldi	r20, 0xFF	; 255
    2fd4:	9f ef       	ldi	r25, 0xFF	; 255
    2fd6:	21 c0       	rjmp	.+66     	; 0x301a <_analogueNoiseReducedReadM(unsigned char, signed char)+0xbc>
  uint8_t oldADCL = 0xff;
  uint8_t oldADCH = 0xff; // Ensure that a second sample will get taken if multiple samples have been requested.
  // Usually take several readings to improve accuracy.  Discard all but the last...
  while(--samples >= 0)
      {
      ADC_complete = false;
    2fd8:	10 92 f8 02 	sts	0x02F8, r1
    2fdc:	07 c0       	rjmp	.+14     	; 0x2fec <_analogueNoiseReducedReadM(unsigned char, signed char)+0x8e>
      while(!ADC_complete) { sleep_mode(); }
    2fde:	83 b7       	in	r24, 0x33	; 51
    2fe0:	81 60       	ori	r24, 0x01	; 1
    2fe2:	83 bf       	out	0x33, r24	; 51
    2fe4:	88 95       	sleep
    2fe6:	83 b7       	in	r24, 0x33	; 51
    2fe8:	8e 7f       	andi	r24, 0xFE	; 254
    2fea:	83 bf       	out	0x33, r24	; 51
    2fec:	80 91 f8 02 	lds	r24, 0x02F8
    2ff0:	88 23       	and	r24, r24
    2ff2:	a9 f3       	breq	.-22     	; 0x2fde <_analogueNoiseReducedReadM(unsigned char, signed char)+0x80>
      const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
    2ff4:	30 91 78 00 	lds	r19, 0x0078
      const uint8_t h = ADCH; // Capture the high byte.
    2ff8:	20 91 79 00 	lds	r18, 0x0079
      if((h == oldADCH) && (l == oldADCL)) { break; } // Stop now if result seems to have settled.
    2ffc:	29 17       	cp	r18, r25
    2ffe:	11 f4       	brne	.+4      	; 0x3004 <_analogueNoiseReducedReadM(unsigned char, signed char)+0xa6>
    3000:	34 17       	cp	r19, r20
    3002:	71 f0       	breq	.+28     	; 0x3020 <_analogueNoiseReducedReadM(unsigned char, signed char)+0xc2>
      oldADCL = l;
      oldADCH = h;
      _adcNoise = (_adcNoise >> 1) + (l ^ h) + (__TIME__[7] & 0xf); // Capture a little entropy.
    3004:	90 91 f7 02 	lds	r25, 0x02F7
    3008:	82 2f       	mov	r24, r18
    300a:	83 27       	eor	r24, r19
    300c:	8d 5f       	subi	r24, 0xFD	; 253
    300e:	96 95       	lsr	r25
    3010:	98 0f       	add	r25, r24
    3012:	90 93 f7 02 	sts	0x02F7, r25
    3016:	92 2f       	mov	r25, r18
    3018:	43 2f       	mov	r20, r19
  bitSet(ADCSRA, ADIE); // Turn on ADC interrupt.
  bitSet(ADCSRA, ADSC); // Start conversion(s).
  uint8_t oldADCL = 0xff;
  uint8_t oldADCH = 0xff; // Ensure that a second sample will get taken if multiple samples have been requested.
  // Usually take several readings to improve accuracy.  Discard all but the last...
  while(--samples >= 0)
    301a:	11 50       	subi	r17, 0x01	; 1
    301c:	17 ff       	sbrs	r17, 7
    301e:	dc cf       	rjmp	.-72     	; 0x2fd8 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x7a>
      if((h == oldADCH) && (l == oldADCL)) { break; } // Stop now if result seems to have settled.
      oldADCL = l;
      oldADCH = h;
      _adcNoise = (_adcNoise >> 1) + (l ^ h) + (__TIME__[7] & 0xf); // Capture a little entropy.
      }
  bitClear(ADCSRA, ADIE); // Turn off ADC interrupt.
    3020:	80 91 7a 00 	lds	r24, 0x007A
    3024:	87 7f       	andi	r24, 0xF7	; 247
    3026:	80 93 7a 00 	sts	0x007A, r24
  bitClear(ADCSRA, ADATE); // Turn off ADC auto-trigger.
    302a:	80 91 7a 00 	lds	r24, 0x007A
    302e:	8f 7d       	andi	r24, 0xDF	; 223
    3030:	80 93 7a 00 	sts	0x007A, r24
  //sleep_disable();
  const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
    3034:	20 91 78 00 	lds	r18, 0x0078
  const uint8_t h = ADCH; // Capture the high byte.
    3038:	40 91 79 00 	lds	r20, 0x0079
  if(neededEnable) { powerDownADC(); }
    303c:	00 23       	and	r16, r16
    303e:	51 f0       	breq	.+20     	; 0x3054 <_analogueNoiseReducedReadM(unsigned char, signed char)+0xf6>
  }
    
// Power ADC down.
void powerDownADC()
  {
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
    3040:	80 91 7a 00 	lds	r24, 0x007A
    3044:	8f 77       	andi	r24, 0x7F	; 127
    3046:	80 93 7a 00 	sts	0x007A, r24
  PRR |= _BV(PRADC); // Disable the ADC.
    304a:	80 91 64 00 	lds	r24, 0x0064
    304e:	81 60       	ori	r24, 0x01	; 1
    3050:	80 93 64 00 	sts	0x0064, r24
    3054:	94 2f       	mov	r25, r20
    3056:	80 e0       	ldi	r24, 0x00	; 0
    3058:	30 e0       	ldi	r19, 0x00	; 0
    305a:	28 2b       	or	r18, r24
    305c:	39 2b       	or	r19, r25
  //sleep_disable();
  const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
  const uint8_t h = ADCH; // Capture the high byte.
  if(neededEnable) { powerDownADC(); }
  return((h << 8) | l);
  }
    305e:	c9 01       	movw	r24, r18
    3060:	1f 91       	pop	r17
    3062:	0f 91       	pop	r16
    3064:	08 95       	ret

00003066 <analogueNoiseReducedRead(unsigned char, unsigned char)>:
//   * aiNumber is the analogue input number [0,7] for ATMega328P
//   * mode  is the analogue reference, eg DEFAULT (Vcc).
// May set sleep mode to SLEEP_MODE_ADC, and disable sleep on exit.
// Nominally equivalent to analogReference(mode); return(analogRead(pinNumber));
uint16_t analogueNoiseReducedRead(const uint8_t aiNumber, const uint8_t mode)
  { return(_analogueNoiseReducedReadM((mode << 6) | (aiNumber & 7))); }
    3066:	62 95       	swap	r22
    3068:	66 0f       	add	r22, r22
    306a:	66 0f       	add	r22, r22
    306c:	60 7c       	andi	r22, 0xC0	; 192
    306e:	87 70       	andi	r24, 0x07	; 7
    3070:	86 2b       	or	r24, r22
    3072:	63 e0       	ldi	r22, 0x03	; 3
    3074:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <_analogueNoiseReducedReadM(unsigned char, signed char)>
    3078:	08 95       	ret

0000307a <SupplyVoltageMilliVolts::read()>:


// Force a read/poll of the supply voltage and return the value sensed.
// Expensive/slow.
// NOT thread-safe nor usable within ISRs (Interrupt Service Routines).
uint16_t SupplyVoltageMilliVolts::read()
    307a:	cf 93       	push	r28
    307c:	df 93       	push	r29
    307e:	ec 01       	movw	r28, r24
  return(result);
  }


// Measure internal bandgap (1.1V nominal, 1.0--1.2V) as fraction of Vcc [0,1023].
static uint16_t read1V1wrtBattery() { return(_analogueNoiseReducedReadM(_BV(REFS0) | 14)); }
    3080:	8e e4       	ldi	r24, 0x4E	; 78
    3082:	63 e0       	ldi	r22, 0x03	; 3
    3084:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <_analogueNoiseReducedReadM(unsigned char, signed char)>
    3088:	9c 01       	movw	r18, r24
  {
  // Measure internal bandgap (1.1V nominal, 1.0--1.2V) as fraction of Vcc.
  const uint16_t raw = read1V1wrtBattery();
  // If Vcc was 1.1V ADC would give 1023.
  // If Vcc was 2.2V ADC would give 511.
  const uint16_t result = ((1023U<<6) / raw) * (1100U>>6);
    308a:	80 ec       	ldi	r24, 0xC0	; 192
    308c:	9f ef       	ldi	r25, 0xFF	; 255
    308e:	b9 01       	movw	r22, r18
    3090:	0e 94 2e 35 	call	0x6a5c	; 0x6a5c <__udivmodhi4>
    3094:	ab 01       	movw	r20, r22
    3096:	e4 e0       	ldi	r30, 0x04	; 4
    3098:	44 0f       	add	r20, r20
    309a:	55 1f       	adc	r21, r21
    309c:	ea 95       	dec	r30
    309e:	e1 f7       	brne	.-8      	; 0x3098 <SupplyVoltageMilliVolts::read()+0x1e>
    30a0:	46 0f       	add	r20, r22
    30a2:	57 1f       	adc	r21, r23
  rawInv = raw;
    30a4:	3b 83       	std	Y+3, r19	; 0x03
    30a6:	2a 83       	std	Y+2, r18	; 0x02
  mV = result;
    30a8:	5d 83       	std	Y+5, r21	; 0x05
    30aa:	4c 83       	std	Y+4, r20	; 0x04
  isLow = (result < BATTERY_LOW_MV);
    30ac:	1e 82       	std	Y+6, r1	; 0x06
    30ae:	87 e0       	ldi	r24, 0x07	; 7
    30b0:	40 3d       	cpi	r20, 0xD0	; 208
    30b2:	58 07       	cpc	r21, r24
    30b4:	10 f4       	brcc	.+4      	; 0x30ba <SupplyVoltageMilliVolts::read()+0x40>
    30b6:	81 e0       	ldi	r24, 0x01	; 1
    30b8:	8e 83       	std	Y+6, r24	; 0x06
  DEBUG_SERIAL_PRINT(raw);
  if(batteryLow) { DEBUG_SERIAL_PRINT_FLASHSTRING(" LOW"); }
  DEBUG_SERIAL_PRINTLN();
#endif
  return(result);
  }
    30ba:	ca 01       	movw	r24, r20
    30bc:	df 91       	pop	r29
    30be:	cf 91       	pop	r28
    30c0:	08 95       	ret

000030c2 <readInternalTemperatureC16()>:
// May set sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
int readInternalTemperatureC16()
  {
  // Measure internal temperature sensor against internal voltage source.
  // Response is ~1mv/C with 0C at ~289mV according to the data sheet.
  const uint16_t raw = _analogueNoiseReducedReadM(_BV(REFS1) | _BV(REFS0) | _BV(MUX3), 1);
    30c2:	88 ec       	ldi	r24, 0xC8	; 200
    30c4:	61 e0       	ldi	r22, 0x01	; 1
    30c6:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <_analogueNoiseReducedReadM(unsigned char, signed char)>
    30ca:	84 54       	subi	r24, 0x44	; 68
    30cc:	91 40       	sbci	r25, 0x01	; 1
    30ce:	22 ed       	ldi	r18, 0xD2	; 210
    30d0:	30 e0       	ldi	r19, 0x00	; 0
    30d2:	a9 01       	movw	r20, r18
    30d4:	84 9f       	mul	r24, r20
    30d6:	90 01       	movw	r18, r0
    30d8:	85 9f       	mul	r24, r21
    30da:	30 0d       	add	r19, r0
    30dc:	94 9f       	mul	r25, r20
    30de:	30 0d       	add	r19, r0
    30e0:	11 24       	eor	r1, r1
    30e2:	f4 e0       	ldi	r31, 0x04	; 4
    30e4:	35 95       	asr	r19
    30e6:	27 95       	ror	r18
    30e8:	fa 95       	dec	r31
    30ea:	e1 f7       	brne	.-8      	; 0x30e4 <readInternalTemperatureC16()+0x22>
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("");
#endif
  //const int degC = (raw - 328) ; // Crude fast adjustment for one sensor at ~20C (DHD20130429).
  const int degC = ((((int)raw) - 324) * 210) >> 4; // Slightly less crude adjustment, see http://playground.arduino.cc//Main/InternalTemperatureSensor
  return(degC);
  }
    30ec:	c9 01       	movw	r24, r18
    30ee:	08 95       	ret

000030f0 <clockJitterWDT()>:
// Expensive in terms of CPU time and thus energy.
// TODO: may be able to reduce clock speed to lower energy cost while still detecting useful jitter.
uint_fast8_t clockJitterWDT()
  {
  // Watchdog should be (already) be disabled on entry.
  _watchdogFired = false;
    30f0:	10 92 f6 02 	sts	0x02F6, r1
  wdt_enable(WDTO_15MS); // Set watchdog for minimum time.
    30f4:	88 e0       	ldi	r24, 0x08	; 8
    30f6:	28 e1       	ldi	r18, 0x18	; 24
    30f8:	30 e0       	ldi	r19, 0x00	; 0
    30fa:	0f b6       	in	r0, 0x3f	; 63
    30fc:	f8 94       	cli
    30fe:	a8 95       	wdr
    3100:	20 93 60 00 	sts	0x0060, r18
    3104:	0f be       	out	0x3f, r0	; 63
    3106:	80 93 60 00 	sts	0x0060, r24
  WDTCSR |= (1 << WDIE);
    310a:	80 91 60 00 	lds	r24, 0x0060
    310e:	80 64       	ori	r24, 0x40	; 64
    3110:	80 93 60 00 	sts	0x0060, r24
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	01 c0       	rjmp	.+2      	; 0x311a <clockJitterWDT()+0x2a>
  uint_fast8_t count = 0;
  while(!_watchdogFired) { ++count; } // Effectively count CPU cycles until WDT fires.
    3118:	9f 5f       	subi	r25, 0xFF	; 255
    311a:	80 91 f6 02 	lds	r24, 0x02F6
    311e:	88 23       	and	r24, r24
    3120:	d9 f3       	breq	.-10     	; 0x3118 <clockJitterWDT()+0x28>
  return(count);
  }
    3122:	89 2f       	mov	r24, r25
    3124:	08 95       	ret

00003126 <clockJitterEntropyByte()>:
// Internally this uses a CRC as a relatively fast and hopefully effective hash over intermediate values.
// Note the that rejection of repeat values will be less effective with two interleaved gathering mechanisms
// as the interaction while not necessarily adding genuine entropy, will make counts differ between runs.
// DHD20130519: measured as taking ~63ms to run, ie ~8ms per bit gathered.
#ifdef WAKEUP_32768HZ_XTAL
uint_fast8_t clockJitterEntropyByte()
    3126:	1f 93       	push	r17

  uint_fast8_t result = 0;
  uint_fast8_t countR = 0, lastCountR = 0;
  uint_fast8_t countW = 0, lastCountW = 0;

  const uint8_t t0 = TCNT2; // Wait for sub-cycle timer to roll.
    3128:	90 91 b2 00 	lds	r25, 0x00B2
    312c:	40 e0       	ldi	r20, 0x00	; 0
    312e:	50 e0       	ldi	r21, 0x00	; 0
    3130:	02 c0       	rjmp	.+4      	; 0x3136 <clockJitterEntropyByte()+0x10>
  while(t0 == TCNT2) { ++hash; } // Possibly capture some entropy from recent program activity/timing.
    3132:	4f 5f       	subi	r20, 0xFF	; 255
    3134:	5f 4f       	sbci	r21, 0xFF	; 255
    3136:	80 91 b2 00 	lds	r24, 0x00B2
    313a:	98 17       	cp	r25, r24
    313c:	d1 f3       	breq	.-12     	; 0x3132 <clockJitterEntropyByte()+0xc>
  uint8_t t1 = TCNT2;
    313e:	f0 91 b2 00 	lds	r31, 0x00B2

  _watchdogFired = 0;
    3142:	10 92 f6 02 	sts	0x02F6, r1
  wdt_enable(WDTO_15MS); // Start watchdog, with minimum timeout.
    3146:	88 e0       	ldi	r24, 0x08	; 8
    3148:	28 e1       	ldi	r18, 0x18	; 24
    314a:	30 e0       	ldi	r19, 0x00	; 0
    314c:	0f b6       	in	r0, 0x3f	; 63
    314e:	f8 94       	cli
    3150:	a8 95       	wdr
    3152:	20 93 60 00 	sts	0x0060, r18
    3156:	0f be       	out	0x3f, r0	; 63
    3158:	80 93 60 00 	sts	0x0060, r24
  WDTCSR |= (1 << WDIE);
    315c:	80 91 60 00 	lds	r24, 0x0060
    3160:	80 64       	ori	r24, 0x40	; 64
    3162:	80 93 60 00 	sts	0x0060, r24
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	60 e0       	ldi	r22, 0x00	; 0
    316a:	e0 e0       	ldi	r30, 0x00	; 0
    316c:	20 e0       	ldi	r18, 0x00	; 0
    316e:	70 e0       	ldi	r23, 0x00	; 0
    3170:	38 e0       	ldi	r19, 0x08	; 8
        if(--bitsLeft <= 0) { break; } // Got enough bits; stop now.
        lastCountW = countW;
        }
      countW = 0;
      _watchdogFired = 0;
      wdt_enable(WDTO_15MS); // Restart watchdog, with minimum timeout.
    3172:	a8 e1       	ldi	r26, 0x18	; 24
    3174:	b0 e0       	ldi	r27, 0x00	; 0
    3176:	18 e0       	ldi	r17, 0x08	; 8
  WDTCSR |= (1 << WDIE);
  int_fast8_t bitsLeft = 8; // Decrement when a bit is harvested...
  for( ; ; )
    {
    // Extract watchdog jitter vs CPU.
    if(!_watchdogFired) { ++countW; }
    3178:	80 91 f6 02 	lds	r24, 0x02F6
    317c:	88 23       	and	r24, r24
    317e:	11 f4       	brne	.+4      	; 0x3184 <clockJitterEntropyByte()+0x5e>
    3180:	2f 5f       	subi	r18, 0xFF	; 255
    3182:	2a c0       	rjmp	.+84     	; 0x31d8 <clockJitterEntropyByte()+0xb2>
    else // Watchdog fired.
      {
      if(countW != lastCountW) // Got a different value from last; assume one bit of entropy.
    3184:	27 17       	cp	r18, r23
    3186:	c1 f0       	breq	.+48     	; 0x31b8 <clockJitterEntropyByte()+0x92>
        "eor    %A0,__tmp_reg__"

        : "=d" (__ret)
        : "r" (__data), "0" (__crc)
        : "r0"
    );
    3188:	42 27       	eor	r20, r18
    318a:	04 2e       	mov	r0, r20
    318c:	42 95       	swap	r20
    318e:	40 7f       	andi	r20, 0xF0	; 240
    3190:	40 25       	eor	r20, r0
    3192:	05 2e       	mov	r0, r21
    3194:	54 2f       	mov	r21, r20
    3196:	42 95       	swap	r20
    3198:	4f 70       	andi	r20, 0x0F	; 15
    319a:	04 26       	eor	r0, r20
    319c:	46 95       	lsr	r20
    319e:	54 27       	eor	r21, r20
    31a0:	45 27       	eor	r20, r21
    31a2:	44 0f       	add	r20, r20
    31a4:	44 0f       	add	r20, r20
    31a6:	44 0f       	add	r20, r20
    31a8:	40 25       	eor	r20, r0
        {
        hash = _crc_ccitt_update(hash, countW);
        result = (result << 1) ^ ((uint_fast8_t)hash); // Nominally capturing (at least) lsb of hash.
    31aa:	99 0f       	add	r25, r25
    31ac:	94 27       	eor	r25, r20
        if(--bitsLeft <= 0) { break; } // Got enough bits; stop now.
    31ae:	31 50       	subi	r19, 0x01	; 1
    31b0:	13 16       	cp	r1, r19
    31b2:	0c f0       	brlt	.+2      	; 0x31b6 <clockJitterEntropyByte()+0x90>
    31b4:	34 c0       	rjmp	.+104    	; 0x321e <clockJitterEntropyByte()+0xf8>
    31b6:	72 2f       	mov	r23, r18
        lastCountW = countW;
        }
      countW = 0;
      _watchdogFired = 0;
    31b8:	10 92 f6 02 	sts	0x02F6, r1
      wdt_enable(WDTO_15MS); // Restart watchdog, with minimum timeout.
    31bc:	0f b6       	in	r0, 0x3f	; 63
    31be:	f8 94       	cli
    31c0:	a8 95       	wdr
    31c2:	a0 93 60 00 	sts	0x0060, r26
    31c6:	0f be       	out	0x3f, r0	; 63
    31c8:	10 93 60 00 	sts	0x0060, r17
      WDTCSR |= (1 << WDIE);
    31cc:	80 91 60 00 	lds	r24, 0x0060
    31d0:	80 64       	ori	r24, 0x40	; 64
    31d2:	80 93 60 00 	sts	0x0060, r24
    31d6:	20 e0       	ldi	r18, 0x00	; 0
      }

    // Extract RTC jitter vs CPU.
    if(t1 == TCNT2) { --countR; }
    31d8:	80 91 b2 00 	lds	r24, 0x00B2
    31dc:	f8 17       	cp	r31, r24
    31de:	11 f4       	brne	.+4      	; 0x31e4 <clockJitterEntropyByte()+0xbe>
    31e0:	61 50       	subi	r22, 0x01	; 1
    31e2:	ca cf       	rjmp	.-108    	; 0x3178 <clockJitterEntropyByte()+0x52>
    else // Sub-cycle timer rolled.
      {
      if(countR != lastCountR) // Got a different value from last; assume one bit of entropy.
    31e4:	6e 17       	cp	r22, r30
    31e6:	b9 f0       	breq	.+46     	; 0x3216 <clockJitterEntropyByte()+0xf0>
    31e8:	46 27       	eor	r20, r22
    31ea:	04 2e       	mov	r0, r20
    31ec:	42 95       	swap	r20
    31ee:	40 7f       	andi	r20, 0xF0	; 240
    31f0:	40 25       	eor	r20, r0
    31f2:	05 2e       	mov	r0, r21
    31f4:	54 2f       	mov	r21, r20
    31f6:	42 95       	swap	r20
    31f8:	4f 70       	andi	r20, 0x0F	; 15
    31fa:	04 26       	eor	r0, r20
    31fc:	46 95       	lsr	r20
    31fe:	54 27       	eor	r21, r20
    3200:	45 27       	eor	r20, r21
    3202:	44 0f       	add	r20, r20
    3204:	44 0f       	add	r20, r20
    3206:	44 0f       	add	r20, r20
    3208:	40 25       	eor	r20, r0
        {
        hash = _crc_ccitt_update(hash, countR);
        result = (result << 1) ^ ((uint_fast8_t)hash); // Nominally capturing (at least) lsb of hash.
    320a:	99 0f       	add	r25, r25
    320c:	94 27       	eor	r25, r20
        if(--bitsLeft <= 0) { break; } // Got enough bits; stop now.
    320e:	31 50       	subi	r19, 0x01	; 1
    3210:	13 16       	cp	r1, r19
    3212:	2c f4       	brge	.+10     	; 0x321e <clockJitterEntropyByte()+0xf8>
    3214:	e6 2f       	mov	r30, r22
        lastCountR = countR;
        }
      countR = 0;
      t1 = TCNT2; // Set to look for next roll.
    3216:	f0 91 b2 00 	lds	r31, 0x00B2
    321a:	60 e0       	ldi	r22, 0x00	; 0
    321c:	ad cf       	rjmp	.-166    	; 0x3178 <clockJitterEntropyByte()+0x52>
      }
    }

  wdt_disable(); // Ensure no spurious WDT wakeup pending.
    321e:	88 e1       	ldi	r24, 0x18	; 24
    3220:	0f b6       	in	r0, 0x3f	; 63
    3222:	f8 94       	cli
    3224:	80 93 60 00 	sts	0x0060, r24
    3228:	10 92 60 00 	sts	0x0060, r1
    322c:	0f be       	out	0x3f, r0	; 63
  return(result);
  }
    322e:	89 2f       	mov	r24, r25
    3230:	1f 91       	pop	r17
    3232:	08 95       	ret

00003234 <Sensor<unsigned int>::isValid(unsigned int) const>:
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual T get() const = 0;

    // Returns true if this sensor reading value passed is potentially valid, eg in-range.
    // Default is to always return true, ie all values potentially valid.
    virtual bool isValid(T value) const { return(true); }
    3234:	81 e0       	ldi	r24, 0x01	; 1
    3236:	08 95       	ret

00003238 <Sensor<unsigned int>::preferredPollInterval_s() const>:
 
    // Returns non-zero if this implementation requires a regular call to read() to operate correctly.
    // Preferred poll interval (in seconds) or 0 if no regular poll() call required.
    // Default returns 0 indicating regular call to read() not required,
    // only as required to fetch new values from the underlying sensor.
    virtual uint8_t preferredPollInterval_s() const { return(0); }
    3238:	80 e0       	ldi	r24, 0x00	; 0
    323a:	08 95       	ret

0000323c <Sensor<unsigned int>::handleInterruptSimple()>:
    // Must be fast and ISR (Interrupt Service Routine) safe.
    // Returns true if interrupt was successfully handled and cleared
    // else another interrupt handler in the chain may be called
    // to attempt to clear the interrupt.
    // By default does nothing (and returns false).
    virtual bool handleInterruptSimple() { return(false); }
    323c:	80 e0       	ldi	r24, 0x00	; 0
    323e:	08 95       	ret

00003240 <Sensor<unsigned int>::begin()>:

    // Begin access to this sensor if applicable and not already begun.
    // Returns true if it needed to be begun.
    // Allows logic to end() if required at the end of a block, etc.
    // Defaults to do nothing (and return false).
    virtual bool begin() { return(false); }
    3240:	80 e0       	ldi	r24, 0x00	; 0
    3242:	08 95       	ret

00003244 <Sensor<unsigned int>::isAvailable() const>:

    // Returns true if this sensor is currently available.
    // True by default unless implementation overrides.
    // For those sensors that need starting this will be false before begin().
    virtual bool isAvailable() const { return(true); }
    3244:	81 e0       	ldi	r24, 0x01	; 1
    3246:	08 95       	ret

00003248 <Sensor<unsigned int>::end()>:

    // End access to this sensor if applicable and not already ended.
    // Returns true if it needed to be ended.
    // Defaults to do nothing (and return false).
    virtual bool end() { return(false); }
    3248:	80 e0       	ldi	r24, 0x00	; 0
    324a:	08 95       	ret

0000324c <global constructors keyed to _Z25minimisePowerWithoutSleepv>:
    // True if last-measured voltage was low.
    bool isLow;
 
  public:
    // Initialise to cautious values.
    SupplyVoltageMilliVolts() : mV(0), isLow(true) { }
    324c:	84 e8       	ldi	r24, 0x84	; 132
    324e:	91 e0       	ldi	r25, 0x01	; 1
    3250:	90 93 f0 02 	sts	0x02F0, r25
    3254:	80 93 ef 02 	sts	0x02EF, r24
    3258:	10 92 f4 02 	sts	0x02F4, r1
    325c:	10 92 f3 02 	sts	0x02F3, r1
    3260:	81 e0       	ldi	r24, 0x01	; 1
    3262:	80 93 f5 02 	sts	0x02F5, r24
    3266:	08 95       	ret

00003268 <captureEntropy1()>:
// Capture a little system entropy.
// This call should typically take << 1ms at 1MHz CPU.
// Does not change CPU clock speeds, mess with interrupts (other than possible brief blocking), or do I/O, or sleep.
// Should inject some noise into secure (TBD) and non-secure (RNG8) PRNGs.
void captureEntropy1()
  { seedRNG8(_getSubCycleTime() ^ _adcNoise, cycleCountCPU() ^ Supply_mV.get(), _watchdogFired); }
    3268:	20 91 b2 00 	lds	r18, 0x00B2
    326c:	80 91 f7 02 	lds	r24, 0x02F7
    3270:	66 b5       	in	r22, 0x26	; 38
    3272:	40 91 f6 02 	lds	r20, 0x02F6
    3276:	90 91 f3 02 	lds	r25, 0x02F3
    327a:	69 27       	eor	r22, r25
    327c:	82 27       	eor	r24, r18
    327e:	0e 94 22 1b 	call	0x3644	; 0x3644 <seedRNG8(unsigned char, unsigned char, unsigned char)>
    3282:	08 95       	ret

00003284 <powerDownSPI()>:
  }

// Power down SPI.
void powerDownSPI()
  {
  SPCR &= ~_BV(SPE); // Disable SPI.
    3284:	8c b5       	in	r24, 0x2c	; 44
    3286:	8f 7b       	andi	r24, 0xBF	; 191
    3288:	8c bd       	out	0x2c, r24	; 44
  PRR |= _BV(PRSPI); // Power down...
    328a:	e4 e6       	ldi	r30, 0x64	; 100
    328c:	f0 e0       	ldi	r31, 0x00	; 0
    328e:	80 81       	ld	r24, Z
    3290:	84 60       	ori	r24, 0x04	; 4
    3292:	80 83       	st	Z, r24

  pinMode(PIN_SPI_nSS, OUTPUT); // Ensure that nSS is an output to avoid forcing SPI to slave mode by accident.
    3294:	8a e0       	ldi	r24, 0x0A	; 10
    3296:	61 e0       	ldi	r22, 0x01	; 1
    3298:	0e 94 d4 2f 	call	0x5fa8	; 0x5fa8 <pinMode>
  fastDigitalWrite(PIN_SPI_nSS, HIGH); // Ensure that nSS is HIGH and thus any slave deselected when powering up SPI.
    329c:	2a 9a       	sbi	0x05, 2	; 5

  // Avoid pins from floating when SPI is disabled.
  // Try to preserve general I/O direction and restore previous output values for outputs.
  pinMode(PIN_SPI_SCK, OUTPUT);
    329e:	8d e0       	ldi	r24, 0x0D	; 13
    32a0:	61 e0       	ldi	r22, 0x01	; 1
    32a2:	0e 94 d4 2f 	call	0x5fa8	; 0x5fa8 <pinMode>
  pinMode(PIN_SPI_MOSI, OUTPUT);
    32a6:	8b e0       	ldi	r24, 0x0B	; 11
    32a8:	61 e0       	ldi	r22, 0x01	; 1
    32aa:	0e 94 d4 2f 	call	0x5fa8	; 0x5fa8 <pinMode>
  pinMode(PIN_SPI_MISO, INPUT_PULLUP);
    32ae:	8c e0       	ldi	r24, 0x0C	; 12
    32b0:	62 e0       	ldi	r22, 0x02	; 2
    32b2:	0e 94 d4 2f 	call	0x5fa8	; 0x5fa8 <pinMode>

  // If sharing SPI SCK with LED indicator then return this pin to being an output (retaining previous value).
  //if(LED_HEATCALL == PIN_SPI_SCK) { pinMode(LED_HEATCALL, OUTPUT); }
  }
    32b6:	08 95       	ret

000032b8 <powerUpSPIIfDisabled()>:
// If SPI was disabled, power it up, enable it as master and with a sensible clock speed, etc, and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownSPI() may be advisable.
bool powerUpSPIIfDisabled()
  {
  if(!(PRR & _BV(PRSPI))) { return(false); }
    32b8:	80 91 64 00 	lds	r24, 0x0064
    32bc:	82 fd       	sbrc	r24, 2
    32be:	02 c0       	rjmp	.+4      	; 0x32c4 <powerUpSPIIfDisabled()+0xc>
    32c0:	80 e0       	ldi	r24, 0x00	; 0
    32c2:	08 95       	ret

  pinMode(PIN_SPI_nSS, OUTPUT); // Ensure that nSS is an output to avoid forcing SPI to slave mode by accident.
    32c4:	8a e0       	ldi	r24, 0x0A	; 10
    32c6:	61 e0       	ldi	r22, 0x01	; 1
    32c8:	0e 94 d4 2f 	call	0x5fa8	; 0x5fa8 <pinMode>
  fastDigitalWrite(PIN_SPI_nSS, HIGH); // Ensure that nSS is HIGH and thus any slave deselected when powering up SPI.
    32cc:	2a 9a       	sbi	0x05, 2	; 5

  PRR &= ~_BV(PRSPI); // Enable SPI power.
    32ce:	80 91 64 00 	lds	r24, 0x0064
    32d2:	8b 7f       	andi	r24, 0xFB	; 251
    32d4:	80 93 64 00 	sts	0x0064, r24
  // Configure raw SPI to match better how it was used in PICAXE V0.09 code.
  // CPOL = 0, CPHA = 0
  // Enable SPI, set master mode, set speed.
  const uint8_t ENABLE_MASTER =  _BV(SPE) | _BV(MSTR);
#if F_CPU <= 2000000 // Needs minimum prescale (x2) with slow (<=2MHz) CPU clock.
  SPCR = ENABLE_MASTER; // 2x clock prescale for <=1MHz SPI clock from <=2MHz CPU clock (500kHz SPI @ 1MHz CPU).
    32d8:	80 e5       	ldi	r24, 0x50	; 80
    32da:	8c bd       	out	0x2c, r24	; 44
  SPSR = _BV(SPI2X);
    32dc:	81 e0       	ldi	r24, 0x01	; 1
    32de:	8d bd       	out	0x2d, r24	; 45
#else // Needs setting for fast (~16MHz) CPU clock.
  SPCR = _BV(SPR0) | ENABLE_MASTER; // 8x clock prescale for ~2MHz SPI clock from nominal ~16MHz CPU clock.
  SPSR = _BV(SPI2X);
#endif
  return(true);
  }
    32e0:	08 95       	ret

000032e2 <power_intermittent_peripherals_disable()>:
// Disable/remove power to intermittent peripherals.
// Switches the digital line to input with no pull-up (ie high-Z).
// There should be some sort of load to stop this floating.
void power_intermittent_peripherals_disable()
  {
  pinMode(IO_POWER_UP, INPUT);
    32e2:	87 e0       	ldi	r24, 0x07	; 7
    32e4:	60 e0       	ldi	r22, 0x00	; 0
    32e6:	0e 94 d4 2f 	call	0x5fa8	; 0x5fa8 <pinMode>
  }
    32ea:	08 95       	ret

000032ec <minimisePowerWithoutSleep()>:
// to ensure that nothing power-hungry is accidentally left on.
// Any module that may need to run all the time should not be turned off here.
// May be called from panic(), so do not be too clever.
// Does NOT attempt to power down the radio, eg in case that needs to be left in RX mode.
// Does NOT attempt to power down the UART/serial.
void minimisePowerWithoutSleep()
    32ec:	0f 93       	push	r16
    32ee:	1f 93       	push	r17
  {
  // Disable the watchdog timer.
  wdt_disable();
    32f0:	88 e1       	ldi	r24, 0x18	; 24
    32f2:	0f b6       	in	r0, 0x3f	; 63
    32f4:	f8 94       	cli
    32f6:	80 93 60 00 	sts	0x0060, r24
    32fa:	10 92 60 00 	sts	0x0060, r1
    32fe:	0f be       	out	0x3f, r0	; 63
  
  // Ensure that external peripherals are powered down.
  power_intermittent_peripherals_disable();
    3300:	0e 94 71 19 	call	0x32e2	; 0x32e2 <power_intermittent_peripherals_disable()>

  // Turn off analogue stuff that eats power.
  ADCSRA = 0; // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
    3304:	10 92 7a 00 	sts	0x007A, r1
  ACSR = (1<<ACD); // Disable the analog comparator.
    3308:	80 e8       	ldi	r24, 0x80	; 128
    330a:	80 bf       	out	0x30, r24	; 48
  DIDR0 = 0x3F; // Disable digital input buffers on all ADC0-ADC5 pins.
    330c:	8f e3       	ldi	r24, 0x3F	; 63
    330e:	80 93 7e 00 	sts	0x007E, r24
    //#endif
    //#if defined(LDR_SENSOR_AIN)
    //    | (1 << LDR_SENSOR_AIN)
    //#endif
    //    ;
  DIDR1 = (1<<AIN1D)|(1<<AIN0D); // Disable digital input buffer on AIN1/0.
    3312:	83 e0       	ldi	r24, 0x03	; 3
    3314:	80 93 7f 00 	sts	0x007F, r24
  power_adc_disable();
    3318:	04 e6       	ldi	r16, 0x64	; 100
    331a:	10 e0       	ldi	r17, 0x00	; 0
    331c:	f8 01       	movw	r30, r16
    331e:	80 81       	ld	r24, Z
    3320:	81 60       	ori	r24, 0x01	; 1
    3322:	80 83       	st	Z, r24

  // Ensure that SPI is powered down.
  powerDownSPI();
    3324:	0e 94 42 19 	call	0x3284	; 0x3284 <powerDownSPI()>
  }

// Power down TWI (I2C).
void powerDownTWI()
  {
  TWCR &= ~_BV(TWEN); // Disable TWI.
    3328:	ec eb       	ldi	r30, 0xBC	; 188
    332a:	f0 e0       	ldi	r31, 0x00	; 0
    332c:	80 81       	ld	r24, Z
    332e:	8b 7f       	andi	r24, 0xFB	; 251
    3330:	80 83       	st	Z, r24
  PRR |= _BV(PRTWI); // Disable TWI power.
    3332:	f8 01       	movw	r30, r16
    3334:	80 81       	ld	r24, Z
    3336:	80 68       	ori	r24, 0x80	; 128
    3338:	80 83       	st	Z, r24

#if defined(DONT_USE_TIMER0)
  power_timer0_disable();
#endif

  power_timer1_disable();
    333a:	80 81       	ld	r24, Z
    333c:	88 60       	ori	r24, 0x08	; 8
    333e:	80 83       	st	Z, r24

#ifndef WAKEUP_32768HZ_XTAL
  power_timer2_disable();
#endif
  }
    3340:	1f 91       	pop	r17
    3342:	0f 91       	pop	r16
    3344:	08 95       	ret

00003346 <power_intermittent_peripherals_enable(bool)>:
// items powered direct from IO_POWER_UP may need no such wait.
//
// Switches the digital line to high then output (to avoid ever *discharging* the output cap).
// Note that with 100nF cap, and 330R (or lower) resistor from the output pin,
// then 1ms delay should be plenty for the voltage on the cap to settle.
void power_intermittent_peripherals_enable(bool waitUntilStable)
    3346:	1f 93       	push	r17
    3348:	18 2f       	mov	r17, r24
  {
  fastDigitalWrite(IO_POWER_UP, HIGH);
    334a:	5f 9a       	sbi	0x0b, 7	; 11
  pinMode(IO_POWER_UP, OUTPUT);
    334c:	87 e0       	ldi	r24, 0x07	; 7
    334e:	61 e0       	ldi	r22, 0x01	; 1
    3350:	0e 94 d4 2f 	call	0x5fa8	; 0x5fa8 <pinMode>
  // If requested, wait long enough that I/O peripheral power should be stable.
  // Wait in a relatively low-power way...
  if(waitUntilStable) { sleepLowPowerMs(1); }
    3354:	11 23       	and	r17, r17
    3356:	21 f0       	breq	.+8      	; 0x3360 <power_intermittent_peripherals_enable(bool)+0x1a>
// This may be achieved in part by dynamically slowing the CPU clock if possible.
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed((((MIN_CPU_HZ * (ms)) + 2000) / 4000) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    3358:	86 e0       	ldi	r24, 0x06	; 6
    335a:	90 e0       	ldi	r25, 0x00	; 0
    335c:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
  }
    3360:	1f 91       	pop	r17
    3362:	08 95       	ret

00003364 <noisyADCRead(bool)>:
// If requested (and needed) powers up extra I/O during the reads.
//   powerUpIO if true then power up I/O (and power down after if so)
//
// If defined, update _adcNoise value to make noisyADCRead() output at least a poor PRNG if called in a loop, though might disguise underlying problems.
//#define CATCH_OTHER_NOISE_DURING_NAR // May hide underlying weakness if defined.
uint8_t noisyADCRead(const bool powerUpIO)
    3364:	ef 92       	push	r14
    3366:	ff 92       	push	r15
    3368:	0f 93       	push	r16
    336a:	1f 93       	push	r17
    336c:	f8 2e       	mov	r15, r24
// If already powered up then do nothing other than return false.
// This does not power up the analogue comparator; this needs to be manually enabled if required.
// If this returns true then a matching powerDownADC() may be advisable.
bool powerUpADCIfDisabled()
  {
  if(!(PRR & _BV(PRADC))) { return(false); }
    336e:	80 91 64 00 	lds	r24, 0x0064
    3372:	80 fd       	sbrc	r24, 0
    3374:	02 c0       	rjmp	.+4      	; 0x337a <noisyADCRead(bool)+0x16>
    3376:	00 e0       	ldi	r16, 0x00	; 0
    3378:	0b c0       	rjmp	.+22     	; 0x3390 <noisyADCRead(bool)+0x2c>
  PRR &= ~_BV(PRADC); // Enable the ADC.
    337a:	80 91 64 00 	lds	r24, 0x0064
    337e:	8e 7f       	andi	r24, 0xFE	; 254
    3380:	80 93 64 00 	sts	0x0064, r24
  ADCSRA |= _BV(ADEN);
    3384:	80 91 7a 00 	lds	r24, 0x007A
    3388:	80 68       	ori	r24, 0x80	; 128
    338a:	80 93 7a 00 	sts	0x007A, r24
    338e:	01 e0       	ldi	r16, 0x01	; 1
//#define CATCH_OTHER_NOISE_DURING_NAR // May hide underlying weakness if defined.
uint8_t noisyADCRead(const bool powerUpIO)
  {
  const bool neededEnable = powerUpADCIfDisabled();
  const bool poweredUpIO = powerUpIO;
  if(powerUpIO) { power_intermittent_peripherals_enable(false); }
    3390:	ff 20       	and	r15, r15
    3392:	19 f0       	breq	.+6      	; 0x339a <noisyADCRead(bool)+0x36>
    3394:	80 e0       	ldi	r24, 0x00	; 0
    3396:	0e 94 a3 19 	call	0x3346	; 0x3346 <power_intermittent_peripherals_enable(bool)>
  // Sample supply voltage.
  ADMUX = _BV(REFS0) | 14; // Bandgap vs Vcc.
    339a:	8e e4       	ldi	r24, 0x4E	; 78
    339c:	80 93 7c 00 	sts	0x007C, r24
  ADCSRB = 0; // Enable free-running mode.
    33a0:	10 92 7b 00 	sts	0x007B, r1
  bitWrite(ADCSRA, ADATE, 0); // Multiple samples NOT required.
    33a4:	80 91 7a 00 	lds	r24, 0x007A
    33a8:	8f 7d       	andi	r24, 0xDF	; 223
    33aa:	80 93 7a 00 	sts	0x007A, r24
  ADC_complete = false;
    33ae:	10 92 f8 02 	sts	0x02F8, r1
  bitSet(ADCSRA, ADIE); // Turn on ADC interrupt.
    33b2:	80 91 7a 00 	lds	r24, 0x007A
    33b6:	88 60       	ori	r24, 0x08	; 8
    33b8:	80 93 7a 00 	sts	0x007A, r24
  bitSet(ADCSRA, ADSC); // Start conversion.
    33bc:	80 91 7a 00 	lds	r24, 0x007A
    33c0:	80 64       	ori	r24, 0x40	; 64
    33c2:	80 93 7a 00 	sts	0x007A, r24
    33c6:	20 e0       	ldi	r18, 0x00	; 0
    33c8:	01 c0       	rjmp	.+2      	; 0x33cc <noisyADCRead(bool)+0x68>
  uint8_t count = 0;
  while(!ADC_complete) { ++count; } // Busy wait while 'timing' the ADC conversion.
    33ca:	2f 5f       	subi	r18, 0xFF	; 255
    33cc:	80 91 f8 02 	lds	r24, 0x02F8
    33d0:	88 23       	and	r24, r24
    33d2:	d9 f3       	breq	.-10     	; 0x33ca <noisyADCRead(bool)+0x66>
  const uint8_t l1 = ADCL; // Capture the low byte and latch the high byte.
    33d4:	e0 90 78 00 	lds	r14, 0x0078
  const uint8_t h1 = ADCH; // Capture the high byte.
    33d8:	90 91 79 00 	lds	r25, 0x0079
  DEBUG_SERIAL_PRINT(' ');
  DEBUG_SERIAL_PRINTFMT(l1, HEX);
  DEBUG_SERIAL_PRINTLN();
#endif
  // Sample internal temperature.
  ADMUX = _BV(REFS1) | _BV(REFS0) | _BV(MUX3); // Temp vs bandgap.
    33dc:	88 ec       	ldi	r24, 0xC8	; 200
    33de:	80 93 7c 00 	sts	0x007C, r24
  ADC_complete = false;
    33e2:	10 92 f8 02 	sts	0x02F8, r1
  bitSet(ADCSRA, ADSC); // Start conversion.
    33e6:	80 91 7a 00 	lds	r24, 0x007A
    33ea:	80 64       	ori	r24, 0x40	; 64
    33ec:	80 93 7a 00 	sts	0x007A, r24
    33f0:	01 c0       	rjmp	.+2      	; 0x33f4 <noisyADCRead(bool)+0x90>
  while(!ADC_complete) { ++count; } // Busy wait while 'timing' the ADC conversion.
    33f2:	2f 5f       	subi	r18, 0xFF	; 255
    33f4:	80 91 f8 02 	lds	r24, 0x02F8
    33f8:	88 23       	and	r24, r24
    33fa:	d9 f3       	breq	.-10     	; 0x33f2 <noisyADCRead(bool)+0x8e>
  const uint8_t l2 = ADCL; // Capture the low byte and latch the high byte.
    33fc:	80 91 78 00 	lds	r24, 0x0078
  const uint8_t h2 = ADCH; // Capture the high byte.
    3400:	10 91 79 00 	lds	r17, 0x0079
  DEBUG_SERIAL_PRINTFMT(h2, HEX);
  DEBUG_SERIAL_PRINT(' ');
  DEBUG_SERIAL_PRINTFMT(l2, HEX);
  DEBUG_SERIAL_PRINTLN();
#endif
  uint8_t result = (h1 << 5) ^ (l2) ^ (h2 << 3) ^ count;
    3404:	92 95       	swap	r25
    3406:	99 0f       	add	r25, r25
    3408:	90 7e       	andi	r25, 0xE0	; 224
    340a:	11 0f       	add	r17, r17
    340c:	11 0f       	add	r17, r17
    340e:	11 0f       	add	r17, r17
    3410:	19 27       	eor	r17, r25
    3412:	18 27       	eor	r17, r24
    3414:	12 27       	eor	r17, r18
    3416:	30 e0       	ldi	r19, 0x00	; 0
#endif
  // Sample all possible ADC inputs relative to Vcc, whatever the inputs may be connected to.
  // Assumed never to do any harm, eg physical damage, nor to disturb I/O setup.
  for(uint8_t i = 0; i < 8; ++i)
    {
    ADMUX = (i & 7) | (DEFAULT << 6); // Switching MUX after sample has started may add further noise.
    3418:	83 2f       	mov	r24, r19
    341a:	87 70       	andi	r24, 0x07	; 7
    341c:	80 64       	ori	r24, 0x40	; 64
    341e:	80 93 7c 00 	sts	0x007C, r24
    ADC_complete = false;
    3422:	10 92 f8 02 	sts	0x02F8, r1
    bitSet(ADCSRA, ADSC); // Start conversion.
    3426:	80 91 7a 00 	lds	r24, 0x007A
    342a:	80 64       	ori	r24, 0x40	; 64
    342c:	80 93 7a 00 	sts	0x007A, r24
    3430:	01 c0       	rjmp	.+2      	; 0x3434 <noisyADCRead(bool)+0xd0>
    while(!ADC_complete) { ++count; }
    3432:	2f 5f       	subi	r18, 0xFF	; 255
    3434:	80 91 f8 02 	lds	r24, 0x02F8
    3438:	88 23       	and	r24, r24
    343a:	d9 f3       	breq	.-10     	; 0x3432 <noisyADCRead(bool)+0xce>
    const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
    343c:	90 91 78 00 	lds	r25, 0x0078
    const uint8_t h = ADCH; // Capture the high byte.
    3440:	80 91 79 00 	lds	r24, 0x0079
    DEBUG_SERIAL_PRINTFMT(l, HEX);
    DEBUG_SERIAL_PRINT(' ');
    DEBUG_SERIAL_PRINT(count);
    DEBUG_SERIAL_PRINTLN();
#endif
    result = _crc_ibutton_update(result ^ h, l ^ count); // A thorough hash.
    3444:	81 27       	eor	r24, r17
		"	brtc	2f" "\n\t"
		"	eor	%0, %2" "\n\t"
		"2:	dec	%1" "\n\t"
		"	brne	1b" "\n\t"
		: "=r" (__crc), "=d" (__i), "=d" (__pattern)
		: "0" (__crc), "r" (__data));
    3446:	92 27       	eor	r25, r18
    3448:	18 2f       	mov	r17, r24
    344a:	19 27       	eor	r17, r25
    344c:	88 e0       	ldi	r24, 0x08	; 8
    344e:	9c e8       	ldi	r25, 0x8C	; 140
    3450:	10 fb       	bst	r17, 0
    3452:	16 95       	lsr	r17
    3454:	0e f4       	brtc	.+2      	; 0x3458 <noisyADCRead(bool)+0xf4>
    3456:	19 27       	eor	r17, r25
    3458:	8a 95       	dec	r24
    345a:	d1 f7       	brne	.-12     	; 0x3450 <noisyADCRead(bool)+0xec>
#if defined(CATCH_OTHER_NOISE_DURING_NAR)
  result = _crc_ibutton_update(_adcNoise++, result);
#endif
  // Sample all possible ADC inputs relative to Vcc, whatever the inputs may be connected to.
  // Assumed never to do any harm, eg physical damage, nor to disturb I/O setup.
  for(uint8_t i = 0; i < 8; ++i)
    345c:	3f 5f       	subi	r19, 0xFF	; 255
    345e:	38 30       	cpi	r19, 0x08	; 8
    3460:	d9 f6       	brne	.-74     	; 0x3418 <noisyADCRead(bool)+0xb4>
    DEBUG_SERIAL_PRINT_FLASHSTRING("NAR R: ");
    DEBUG_SERIAL_PRINTFMT(result, HEX);
    DEBUG_SERIAL_PRINTLN();
#endif
    }
  bitClear(ADCSRA, ADIE); // Turn off ADC interrupt.
    3462:	80 91 7a 00 	lds	r24, 0x007A
    3466:	87 7f       	andi	r24, 0xF7	; 247
    3468:	80 93 7a 00 	sts	0x007A, r24
  bitClear(ADCSRA, ADATE); // Turn off ADC auto-trigger.
    346c:	80 91 7a 00 	lds	r24, 0x007A
    3470:	8f 7d       	andi	r24, 0xDF	; 223
    3472:	80 93 7a 00 	sts	0x007A, r24
  if(poweredUpIO) { power_intermittent_peripherals_disable(); }
    3476:	ff 20       	and	r15, r15
    3478:	11 f0       	breq	.+4      	; 0x347e <noisyADCRead(bool)+0x11a>
    347a:	0e 94 71 19 	call	0x32e2	; 0x32e2 <power_intermittent_peripherals_disable()>
  if(neededEnable) { powerDownADC(); }
    347e:	00 23       	and	r16, r16
    3480:	51 f0       	breq	.+20     	; 0x3496 <noisyADCRead(bool)+0x132>
  }
    
// Power ADC down.
void powerDownADC()
  {
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
    3482:	80 91 7a 00 	lds	r24, 0x007A
    3486:	8f 77       	andi	r24, 0x7F	; 127
    3488:	80 93 7a 00 	sts	0x007A, r24
  PRR |= _BV(PRADC); // Disable the ADC.
    348c:	80 91 64 00 	lds	r24, 0x0064
    3490:	81 60       	ori	r24, 0x01	; 1
    3492:	80 93 64 00 	sts	0x0064, r24
  DEBUG_SERIAL_PRINT_FLASHSTRING("NAR: ");
  DEBUG_SERIAL_PRINTFMT(result, HEX);
  DEBUG_SERIAL_PRINTLN();
#endif
  return(result); // Use all the bits collected.
  }
    3496:	81 2f       	mov	r24, r17
    3498:	8e 25       	eor	r24, r14
    349a:	1f 91       	pop	r17
    349c:	0f 91       	pop	r16
    349e:	ff 90       	pop	r15
    34a0:	ef 90       	pop	r14
    34a2:	08 95       	ret

000034a4 <powerDownSerial()>:
  PRR |= _BV(PRADC); // Disable the ADC.
  }


// Check if serial is (already) powered up.
static bool _serialIsPoweredUp() { return(!(PRR & _BV(PRUSART0))); }
    34a4:	80 91 64 00 	lds	r24, 0x0064


// Flush any pending serial output and power it down if up.
void powerDownSerial()
  {
  if(_serialIsPoweredUp())
    34a8:	81 fd       	sbrc	r24, 1
    34aa:	08 c0       	rjmp	.+16     	; 0x34bc <powerDownSerial()+0x18>
    {
    // Flush serial output and shut down if apparently active.
    Serial.flush();
    34ac:	85 eb       	ldi	r24, 0xB5	; 181
    34ae:	94 e0       	ldi	r25, 0x04	; 4
    34b0:	0e 94 2f 32 	call	0x645e	; 0x645e <HardwareSerial::flush()>
    //flushSerialHW();
    Serial.end();
    34b4:	85 eb       	ldi	r24, 0xB5	; 181
    34b6:	94 e0       	ldi	r25, 0x04	; 4
    34b8:	0e 94 6f 31 	call	0x62de	; 0x62de <HardwareSerial::end()>
    }
  pinMode(PIN_SERIAL_RX, INPUT_PULLUP);
    34bc:	80 e0       	ldi	r24, 0x00	; 0
    34be:	62 e0       	ldi	r22, 0x02	; 2
    34c0:	0e 94 d4 2f 	call	0x5fa8	; 0x5fa8 <pinMode>
  pinMode(PIN_SERIAL_TX, INPUT_PULLUP);
    34c4:	81 e0       	ldi	r24, 0x01	; 1
    34c6:	62 e0       	ldi	r22, 0x02	; 2
    34c8:	0e 94 d4 2f 	call	0x5fa8	; 0x5fa8 <pinMode>
  PRR |= _BV(PRUSART0); // Disable the UART module.
    34cc:	80 91 64 00 	lds	r24, 0x0064
    34d0:	82 60       	ori	r24, 0x02	; 2
    34d2:	80 93 64 00 	sts	0x0064, r24
  }
    34d6:	08 95       	ret

000034d8 <burnHundredsOfCyclesProductivelyAndPoll()>:
// This call should typically take << 1ms at 1MHz CPU.
// Does not change CPU clock speeds, mess with interrupts (other than possible brief blocking), or sleep.
// May capture some entropy in secure and non-secure PRNGs.
void burnHundredsOfCyclesProductivelyAndPoll()
  {
  if(pollIO()) { seedRNG8(cycleCountCPU(), _watchdogFired, _getSubCycleTime()); }
    34d8:	80 e0       	ldi	r24, 0x00	; 0
    34da:	0e 94 ab 06 	call	0xd56	; 0xd56 <pollIO(bool)>
    34de:	88 23       	and	r24, r24
    34e0:	41 f0       	breq	.+16     	; 0x34f2 <burnHundredsOfCyclesProductivelyAndPoll()+0x1a>
    34e2:	86 b5       	in	r24, 0x26	; 38
    34e4:	60 91 f6 02 	lds	r22, 0x02F6
    34e8:	40 91 b2 00 	lds	r20, 0x00B2
    34ec:	0e 94 22 1b 	call	0x3644	; 0x3644 <seedRNG8(unsigned char, unsigned char, unsigned char)>
    34f0:	08 95       	ret
  else { captureEntropy1(); }
    34f2:	0e 94 34 19 	call	0x3268	; 0x3268 <captureEntropy1()>
    34f6:	08 95       	ret

000034f8 <flushSerialProductive()>:

#ifndef flushSerialProductive
// Does a Serial.flush() attempting to do some useful work (eg I/O polling) while waiting for output to drain.
// Assumes hundreds of CPU cycles available for each character queued for TX.
// Does not change CPU clock speed or disable or mess with USART0, though may poll it.
void flushSerialProductive()
    34f8:	02 c0       	rjmp	.+4      	; 0x34fe <flushSerialProductive()+0x6>
#if 0 && defined(DEBUG)
  if(!_serialIsPoweredUp()) { panic(); } // Trying to operate serial without it powered up.
#endif
  // Can productively spin here churning PRNGs or the like before the flush(), checking for the UART TX buffer to empty...
  // An occasional premature exit to flush() due to Serial interrupt handler interaction is benign, and indeed more grist to the mill.
  while(serialTXInProgress()) { burnHundredsOfCyclesProductivelyAndPoll(); }
    34fa:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <burnHundredsOfCyclesProductivelyAndPoll()>
    34fe:	80 91 c0 00 	lds	r24, 0x00C0
    3502:	85 ff       	sbrs	r24, 5
    3504:	fa cf       	rjmp	.-12     	; 0x34fa <flushSerialProductive()+0x2>
  Serial.flush(); // Wait for all output to have been sent.
    3506:	85 eb       	ldi	r24, 0xB5	; 181
    3508:	94 e0       	ldi	r25, 0x04	; 4
    350a:	0e 94 2f 32 	call	0x645e	; 0x645e <HardwareSerial::flush()>
  }
    350e:	08 95       	ret

00003510 <flushSerialSCTSensitive()>:
// Does not change CPU clock speed or disable or mess with USART0, though may poll it.
// Sleeps in IDLE mode for ~15ms at a time (backtopped by watchdog) waking on any interrupt
// so that the caller must be sure RX overrun (etc) will not be an issue.
// Switches to flushSerialProductive() behaviour
// if in danger of overrunning a minor cycle while idling.
void flushSerialSCTSensitive()
    3510:	1f 93       	push	r17
#ifdef ENABLE_AVR_IDLE_MODE
// Idle productively polling I/O, etc, across the system while spending time in low-power mode if possible.
// Typically sleeps for nominally up to 30ms; tries to allow ealier wakeup if interrupt is received, etc.
// (Will often be prematurely woken by timer0 with ~16ms interval.)
// True iff watchdog timer expired; false if something else woke the CPU.
static bool inline idle15AndPoll() { const bool wd = idleCPU(WDTO_15MS); pollIO(!wd); return(wd); }
    3512:	11 e0       	ldi	r17, 0x01	; 1
  {
#if 0 && defined(DEBUG)
  if(!_serialIsPoweredUp()) { panic(); } // Trying to operate serial without it powered up.
#endif
#ifdef ENABLE_AVR_IDLE_MODE
  while(serialTXInProgress() && (getSubCycleTime() < GSCT_MAX - 2 - (20/SUBCYCLE_TICK_MS_RD)))
    3514:	80 91 c0 00 	lds	r24, 0x00C0
    3518:	85 fd       	sbrc	r24, 5
    351a:	0b c0       	rjmp	.+22     	; 0x3532 <flushSerialSCTSensitive()+0x22>
    351c:	80 91 b2 00 	lds	r24, 0x00B2
    3520:	8b 3f       	cpi	r24, 0xFB	; 251
    3522:	38 f4       	brcc	.+14     	; 0x3532 <flushSerialSCTSensitive()+0x22>
    3524:	80 e0       	ldi	r24, 0x00	; 0
    3526:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <idleCPU(signed char)>
    352a:	81 27       	eor	r24, r17
    352c:	0e 94 ab 06 	call	0xd56	; 0xd56 <pollIO(bool)>
    3530:	f1 cf       	rjmp	.-30     	; 0x3514 <flushSerialSCTSensitive()+0x4>
    { idle15AndPoll(); } // Save much power by idling CPU, though everything else runs.
#endif
  flushSerialProductive();
    3532:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <flushSerialProductive()>
  }
    3536:	1f 91       	pop	r17
    3538:	08 95       	ret

0000353a <powerUpSerialIfDisabled()>:
  PRR |= _BV(PRADC); // Disable the ADC.
  }


// Check if serial is (already) powered up.
static bool _serialIsPoweredUp() { return(!(PRR & _BV(PRUSART0))); }
    353a:	80 91 64 00 	lds	r24, 0x0064
// If serial was disabled, power it up, do Serial.begin(), and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownSerial() may be advisable.
bool powerUpSerialIfDisabled()
  {
  if(_serialIsPoweredUp()) { return(false); }
    353e:	81 fd       	sbrc	r24, 1
    3540:	02 c0       	rjmp	.+4      	; 0x3546 <powerUpSerialIfDisabled()+0xc>
    3542:	80 e0       	ldi	r24, 0x00	; 0
    3544:	08 95       	ret
  PRR &= ~_BV(PRUSART0); // Enable the UART.
    3546:	80 91 64 00 	lds	r24, 0x0064
    354a:	8d 7f       	andi	r24, 0xFD	; 253
    354c:	80 93 64 00 	sts	0x0064, r24
  Serial.begin(BAUD); // Set it going.
    3550:	85 eb       	ldi	r24, 0xB5	; 181
    3552:	94 e0       	ldi	r25, 0x04	; 4
    3554:	40 ec       	ldi	r20, 0xC0	; 192
    3556:	52 e1       	ldi	r21, 0x12	; 18
    3558:	60 e0       	ldi	r22, 0x00	; 0
    355a:	70 e0       	ldi	r23, 0x00	; 0
    355c:	0e 94 f1 30 	call	0x61e2	; 0x61e2 <HardwareSerial::begin(unsigned long)>
    3560:	81 e0       	ldi	r24, 0x01	; 1
  return(true);
  }
    3562:	08 95       	ret

00003564 <sleepUntilSubCycleTime(unsigned char)>:
// May use a combination of techniques to hit the required time.
// Requesting a sleep until at or near the end of the cycle risks overrun and may be unwise.
// Using this to sleep less then 2 ticks may prove unreliable as the RTC rolls on underneath...
// This is NOT intended to be used to sleep over the end of a minor cycle.
// May poll I/O.
bool sleepUntilSubCycleTime(const uint8_t sleepUntil)
    3564:	0f 93       	push	r16
    3566:	1f 93       	push	r17
    3568:	cf 93       	push	r28
    356a:	df 93       	push	r29
    356c:	18 2f       	mov	r17, r24
      sleepLowPowerLessThanMs(max(SUBCYCLE_TICK_MS_RD / 2, 1)); // Assumed to be a constant expression.
      continue;
      }

    // Compute remaining time in milliseconds, rounded down...
    const uint16_t msLeft = ((uint16_t)SUBCYCLE_TICK_MS_RD) * ticksLeft;
    356e:	07 e0       	ldi	r16, 0x07	; 7
// May poll I/O.
bool sleepUntilSubCycleTime(const uint8_t sleepUntil)
  {
  for( ; ; )
    {
    const uint8_t now = getSubCycleTime();
    3570:	80 91 b2 00 	lds	r24, 0x00B2
    if(now == sleepUntil) { return(true); } // Done it!
    3574:	81 17       	cp	r24, r17
    3576:	e1 f1       	breq	.+120    	; 0x35f0 <sleepUntilSubCycleTime(unsigned char)+0x8c>
    if(now > sleepUntil) { return(false); } // Too late...
    3578:	18 17       	cp	r17, r24
    357a:	10 f4       	brcc	.+4      	; 0x3580 <sleepUntilSubCycleTime(unsigned char)+0x1c>
    357c:	80 e0       	ldi	r24, 0x00	; 0
    357e:	39 c0       	rjmp	.+114    	; 0x35f2 <sleepUntilSubCycleTime(unsigned char)+0x8e>

    // Compute time left to sleep.
    // It is easy to sleep a bit more later if necessary, but oversleeping is bad.
    const uint8_t ticksLeft = sleepUntil - now;
    3580:	21 2f       	mov	r18, r17
    3582:	28 1b       	sub	r18, r24
    // Deal with shortest sleep specially to avoid missing target from overheads...
    if(1 == ticksLeft)
    3584:	21 30       	cpi	r18, 0x01	; 1
    3586:	19 f4       	brne	.+6      	; 0x358e <sleepUntilSubCycleTime(unsigned char)+0x2a>
// Should be good for values up to at least 1000, ie 1 second.
// Uses formulation likely to be quicker than sleepLowPowerMs() for non-constant argument values,
// and that results in a somewhat shorter sleep than sleepLowPowerMs(ms).
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerLessThanMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed(((MIN_CPU_HZ/4000) * (ms)) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    3588:	83 e1       	ldi	r24, 0x13	; 19
    358a:	90 e0       	ldi	r25, 0x00	; 0
    358c:	2e c0       	rjmp	.+92     	; 0x35ea <sleepUntilSubCycleTime(unsigned char)+0x86>
      sleepLowPowerLessThanMs(max(SUBCYCLE_TICK_MS_RD / 2, 1)); // Assumed to be a constant expression.
      continue;
      }

    // Compute remaining time in milliseconds, rounded down...
    const uint16_t msLeft = ((uint16_t)SUBCYCLE_TICK_MS_RD) * ticksLeft;
    358e:	20 9f       	mul	r18, r16
    3590:	e0 01       	movw	r28, r0
    3592:	11 24       	eor	r1, r1

    // If comfortably in the area of nap()s then use one of them for improved energy savings.
    // Allow for nap() to overrun a little as its timing can vary with temperature and supply voltage,
    // and the bulk of energy savings should still be available without pushing the timing to the wire.
    // Note that during nap() timer0 should be stopped and thus not cause premature wakeup (from overflow interrupt).
    if(msLeft >= 20)
    3594:	c4 31       	cpi	r28, 0x14	; 20
    3596:	d1 05       	cpc	r29, r1
    3598:	70 f0       	brcs	.+28     	; 0x35b6 <sleepUntilSubCycleTime(unsigned char)+0x52>
      {
      if(msLeft >= 80)
    359a:	c0 35       	cpi	r28, 0x50	; 80
    359c:	d1 05       	cpc	r29, r1
    359e:	38 f0       	brcs	.+14     	; 0x35ae <sleepUntilSubCycleTime(unsigned char)+0x4a>
        {
        if(msLeft >= 333)
    35a0:	cd 54       	subi	r28, 0x4D	; 77
    35a2:	d1 40       	sbci	r29, 0x01	; 1
    35a4:	10 f0       	brcs	.+4      	; 0x35aa <sleepUntilSubCycleTime(unsigned char)+0x46>
          {
          nap(WDTO_250MS); // Nominal 250ms sleep.
    35a6:	84 e0       	ldi	r24, 0x04	; 4
    35a8:	03 c0       	rjmp	.+6      	; 0x35b0 <sleepUntilSubCycleTime(unsigned char)+0x4c>
          continue;
          }
        nap(WDTO_60MS); // Nominal 60ms sleep.
    35aa:	82 e0       	ldi	r24, 0x02	; 2
    35ac:	01 c0       	rjmp	.+2      	; 0x35b0 <sleepUntilSubCycleTime(unsigned char)+0x4c>
        continue;
        }
      nap(WDTO_15MS); // Nominal 15ms sleep.
    35ae:	80 e0       	ldi	r24, 0x00	; 0
    35b0:	0e 94 39 17 	call	0x2e72	; 0x2e72 <nap(signed char)>
    35b4:	dd cf       	rjmp	.-70     	; 0x3570 <sleepUntilSubCycleTime(unsigned char)+0xc>
    // Use low-power CPU sleep for residual time, but being very careful not to oversleep.
    // Aim to sleep somewhat under residual time, eg to allow for overheads, interrupts, and other slippages.
    // Assumed to be > 1 else would have been special-cased above.
    // Assumed to be << 1s else a nap() would have been used above.
#ifdef DEBUG
    if((msLeft < 2) || (msLeft > 1000)) { panic(); }
    35b6:	ce 01       	movw	r24, r28
    35b8:	02 97       	sbiw	r24, 0x02	; 2
    35ba:	87 5e       	subi	r24, 0xE7	; 231
    35bc:	93 40       	sbci	r25, 0x03	; 3
    35be:	10 f0       	brcs	.+4      	; 0x35c4 <sleepUntilSubCycleTime(unsigned char)+0x60>
    35c0:	0e 94 26 28 	call	0x504c	; 0x504c <panic()>
    35c4:	9e 01       	movw	r18, r28
    35c6:	21 50       	subi	r18, 0x01	; 1
    35c8:	30 40       	sbci	r19, 0x00	; 0
    35ca:	40 e0       	ldi	r20, 0x00	; 0
    35cc:	50 e0       	ldi	r21, 0x00	; 0
    35ce:	da 01       	movw	r26, r20
    35d0:	c9 01       	movw	r24, r18
    35d2:	63 e0       	ldi	r22, 0x03	; 3
    35d4:	88 0f       	add	r24, r24
    35d6:	99 1f       	adc	r25, r25
    35d8:	aa 1f       	adc	r26, r26
    35da:	bb 1f       	adc	r27, r27
    35dc:	6a 95       	dec	r22
    35de:	d1 f7       	brne	.-12     	; 0x35d4 <sleepUntilSubCycleTime(unsigned char)+0x70>
    35e0:	82 1b       	sub	r24, r18
    35e2:	93 0b       	sbc	r25, r19
    35e4:	a4 0b       	sbc	r26, r20
    35e6:	b5 0b       	sbc	r27, r21
    35e8:	02 97       	sbiw	r24, 0x02	; 2
    35ea:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
    35ee:	c0 cf       	rjmp	.-128    	; 0x3570 <sleepUntilSubCycleTime(unsigned char)+0xc>
    35f0:	81 e0       	ldi	r24, 0x01	; 1
#endif
    sleepLowPowerLessThanMs(msLeft - 1);
    }
  }
    35f2:	df 91       	pop	r29
    35f4:	cf 91       	pop	r28
    35f6:	1f 91       	pop	r17
    35f8:	0f 91       	pop	r16
    35fa:	08 95       	ret

000035fc <powerSetup()>:
// Call from setup() to turn off unused modules, set up timers and interrupts, etc.
// I/O pin setting is not done here.
void powerSetup()
  {
#ifdef DEBUG
  assert(DEFAULT_CPU_PRESCALE == clock_prescale_get()); // Verify that CPU prescaling is as expected.
    35fc:	80 91 61 00 	lds	r24, 0x0061
    3600:	8f 70       	andi	r24, 0x0F	; 15
    3602:	83 30       	cpi	r24, 0x03	; 3
    3604:	11 f0       	breq	.+4      	; 0x360a <powerSetup()+0xe>
    3606:	0e 94 9e 02 	call	0x53c	; 0x53c <abort>
#endif

  // Do normal gentle switch off, including analogue module/control in correct order.
  minimisePowerWithoutSleep();
    360a:	0e 94 76 19 	call	0x32ec	; 0x32ec <minimisePowerWithoutSleep()>

  // Brutally force off all modules, then re-enable explicitly below any still needed.
  power_all_disable(); 
    360e:	80 91 64 00 	lds	r24, 0x0064
    3612:	8f 6e       	ori	r24, 0xEF	; 239
    3614:	80 93 64 00 	sts	0x0064, r24

#if !defined(DONT_USE_TIMER0)
  power_timer0_enable(); // Turning timer 0 off messes up some standard Arduino support such as delay() and millis().
    3618:	80 91 64 00 	lds	r24, 0x0064
    361c:	8f 7d       	andi	r24, 0xDF	; 223
    361e:	80 93 64 00 	sts	0x0064, r24
#endif
  
#if defined(WAKEUP_32768HZ_XTAL)
  power_timer2_enable();
    3622:	80 91 64 00 	lds	r24, 0x0064
    3626:	8f 7b       	andi	r24, 0xBF	; 191
    3628:	80 93 64 00 	sts	0x0064, r24
#ifdef WAKEUP_32768HZ_XTAL
static void timer2XtalIntSetup()
 {
  // Set up TIMER2 to wake CPU out of sleep regularly using external 32768Hz crystal.
  // See http://www.atmel.com/Images/doc2505.pdf
  TCCR2A = 0x00;
    362c:	10 92 b0 00 	sts	0x00B0, r1

#if defined(HALF_SECOND_RTC_SUPPORT)
  TCCR2B = (1<<CS22); // Set CLK/64 for overflow interrupt every 0.5s.
#elif defined(TWO_S_TICK_RTC_SUPPORT)
  TCCR2B = (1<<CS22)|(1<<CS21); // Set CLK/128 for overflow interrupt every 2s.
    3630:	86 e0       	ldi	r24, 0x06	; 6
    3632:	80 93 b1 00 	sts	0x00B1, r24
#else
  TCCR2B = (1<<CS22)|(1<<CS20); // Set CLK/128 for overflow interrupt every 1s.
#endif
  //TCCR2B = (1<<CS22)|(1<<CS21)|(1<<CS20); // Set CLK/1024 for overflow interrupt every 8s (slowest possible).

  ASSR = (1<<AS2); // Enable asynchronous operation.
    3636:	80 e2       	ldi	r24, 0x20	; 32
    3638:	80 93 b6 00 	sts	0x00B6, r24
  TIMSK2 = (1<<TOIE2); // Enable the timer 2 interrupt.
    363c:	81 e0       	ldi	r24, 0x01	; 1
    363e:	80 93 70 00 	sts	0x0070, r24
  
#if defined(WAKEUP_32768HZ_XTAL)
  power_timer2_enable();
  timer2XtalIntSetup();
#endif
  }
    3642:	08 95       	ret

00003644 <seedRNG8(unsigned char, unsigned char, unsigned char)>:
//2 ADDs, one bit shift right , and one increment. Difficult or slow operations like multiply, etc 
//were avoided for maximum speed on ultra low power devices.
void seedRNG8(uint8_t s1, uint8_t s2, uint8_t s3) // Originally init_rng(s1,s2,s3) //Can also be used to seed the rng with more entropy during use.
  {
  //XOR new entropy into key state
  a ^=s1;
    3644:	20 91 fb 02 	lds	r18, 0x02FB
  b ^=s2;
    3648:	90 91 fc 02 	lds	r25, 0x02FC
    364c:	69 27       	eor	r22, r25
  c ^=s3;
    364e:	90 91 f9 02 	lds	r25, 0x02F9
    3652:	49 27       	eor	r20, r25
  x++;
    3654:	90 91 fa 02 	lds	r25, 0x02FA
    3658:	9f 5f       	subi	r25, 0xFF	; 255
    365a:	90 93 fa 02 	sts	0x02FA, r25
  a = (a^c^x);
    365e:	28 27       	eor	r18, r24
    3660:	24 27       	eor	r18, r20
    3662:	29 27       	eor	r18, r25
    3664:	20 93 fb 02 	sts	0x02FB, r18
  b = (b+a);
    3668:	62 0f       	add	r22, r18
    366a:	60 93 fc 02 	sts	0x02FC, r22
  c = ((c+(b>>1))^a);
    366e:	66 95       	lsr	r22
    3670:	64 0f       	add	r22, r20
    3672:	62 27       	eor	r22, r18
    3674:	60 93 f9 02 	sts	0x02F9, r22
  }
    3678:	08 95       	ret

0000367a <randRNG8()>:
//
uint8_t randRNG8() // Originally unsigned char randomize().
  {
  x++;               //x is incremented every round and is not affected by any other variable
    367a:	80 91 fa 02 	lds	r24, 0x02FA
    367e:	8f 5f       	subi	r24, 0xFF	; 255
    3680:	80 93 fa 02 	sts	0x02FA, r24
  a = (a^c^x);       //note the mix of addition and XOR
    3684:	20 91 f9 02 	lds	r18, 0x02F9
    3688:	90 91 fb 02 	lds	r25, 0x02FB
    368c:	92 27       	eor	r25, r18
    368e:	98 27       	eor	r25, r24
    3690:	90 93 fb 02 	sts	0x02FB, r25
  b = (b+a);         //And the use of very few instructions
    3694:	80 91 fc 02 	lds	r24, 0x02FC
    3698:	89 0f       	add	r24, r25
    369a:	80 93 fc 02 	sts	0x02FC, r24
  c = ((c+(b>>1))^a);  //the right shift is to ensure that high-order bits from b can affect  
    369e:	86 95       	lsr	r24
    36a0:	82 0f       	add	r24, r18
    36a2:	89 27       	eor	r24, r25
    36a4:	80 93 f9 02 	sts	0x02F9, r24
  return(c);         //low order bits of other variables
  }
    36a8:	08 95       	ret

000036aa <global constructors keyed to _Z8seedRNG8hhh>:
uint8_t randRNG8(); // Originally called 'randomize()'.
// RNG8 working state.
static uint8_t a, b, c;
// DHD20130603: avoid the hidden counter always starting at zero c/o some per-build state.
// Derived from linker-driven pointer base plus hash of compilation timestamp, with little run-time cost.
static uint8_t x = (uint8_t)(intptr_t) ((&c) + (uint8_t)((__TIME__[7] * 17) ^ (__TIME__[6]) ^ (__TIME__[4] << 11)));
    36aa:	80 e5       	ldi	r24, 0x50	; 80
    36ac:	93 e0       	ldi	r25, 0x03	; 3
    36ae:	80 93 fa 02 	sts	0x02FA, r24
  x++;               //x is incremented every round and is not affected by any other variable
  a = (a^c^x);       //note the mix of addition and XOR
  b = (b+a);         //And the use of very few instructions
  c = ((c+(b>>1))^a);  //the right shift is to ensure that high-order bits from b can affect  
  return(c);         //low order bits of other variables
  }
    36b2:	08 95       	ret

000036b4 <RFM22QueueCmdToFF(unsigned char*)>:

// Clears the RFM22 TX FIFO and queues up ready to send via the TXFIFO the 0xff-terminated bytes starting at bptr.
// This routine does not change the command area.
// This uses an efficient burst write.
// For DEBUG can abort after (over-)filling the 64-byte FIFO at no extra cost with a check before spinning waiting for SPI byte to be sent.
void RFM22QueueCmdToFF(uint8_t *bptr)
    36b4:	cf 93       	push	r28
    36b6:	df 93       	push	r29
    36b8:	ec 01       	movw	r28, r24
  {
#if 0 && defined(DEBUG)
  if(0 == *bptr) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22QueueCmdToFF: buffer uninitialised"); panic(); } 
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
    36ba:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <powerUpSPIIfDisabled()>
    36be:	98 2f       	mov	r25, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    36c0:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    36c2:	88 e8       	ldi	r24, 0x88	; 136
    36c4:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    36c6:	0d b4       	in	r0, 0x2d	; 45
    36c8:	07 fe       	sbrs	r0, 7
    36ca:	fd cf       	rjmp	.-6      	; 0x36c6 <RFM22QueueCmdToFF(unsigned char*)+0x12>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    36cc:	81 e0       	ldi	r24, 0x01	; 1
    36ce:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    36d0:	0d b4       	in	r0, 0x2d	; 45
    36d2:	07 fe       	sbrs	r0, 7
    36d4:	fd cf       	rjmp	.-6      	; 0x36d0 <RFM22QueueCmdToFF(unsigned char*)+0x1c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    36d6:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    36d8:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    36da:	88 e8       	ldi	r24, 0x88	; 136
    36dc:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    36de:	0d b4       	in	r0, 0x2d	; 45
    36e0:	07 fe       	sbrs	r0, 7
    36e2:	fd cf       	rjmp	.-6      	; 0x36de <RFM22QueueCmdToFF(unsigned char*)+0x2a>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    36e4:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    36e6:	0d b4       	in	r0, 0x2d	; 45
    36e8:	07 fe       	sbrs	r0, 7
    36ea:	fd cf       	rjmp	.-6      	; 0x36e6 <RFM22QueueCmdToFF(unsigned char*)+0x32>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    36ec:	2a 9a       	sbi	0x05, 2	; 5
  if(0 == *bptr) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22QueueCmdToFF: buffer uninitialised"); panic(); } 
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
  // Clear the TX FIFO.
  _RFM22ClearTXFIFO();
  _RFM22_SELECT();
    36ee:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    36f0:	8f ef       	ldi	r24, 0xFF	; 255
    36f2:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    36f4:	0d b4       	in	r0, 0x2d	; 45
    36f6:	07 fe       	sbrs	r0, 7
    36f8:	fd cf       	rjmp	.-6      	; 0x36f4 <RFM22QueueCmdToFF(unsigned char*)+0x40>
    36fa:	04 c0       	rjmp	.+8      	; 0x3704 <RFM22QueueCmdToFF(unsigned char*)+0x50>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    36fc:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    36fe:	0d b4       	in	r0, 0x2d	; 45
    3700:	07 fe       	sbrs	r0, 7
    3702:	fd cf       	rjmp	.-6      	; 0x36fe <RFM22QueueCmdToFF(unsigned char*)+0x4a>
    SPDR = val;
    if(--i < 0) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22QueueCmdToFF: buffer unterminated"); panic(); }
    while (!(SPSR & _BV(SPIF))) { }
    }
#else
  while((uint8_t)0xff != (val = *bptr++)) { _RFM22_wr(val); }
    3704:	89 91       	ld	r24, Y+
    3706:	8f 3f       	cpi	r24, 0xFF	; 255
    3708:	c9 f7       	brne	.-14     	; 0x36fc <RFM22QueueCmdToFF(unsigned char*)+0x48>
#endif
  _RFM22_DESELECT();
    370a:	2a 9a       	sbi	0x05, 2	; 5
  if(neededEnable) { powerDownSPI(); }
    370c:	99 23       	and	r25, r25
    370e:	11 f0       	breq	.+4      	; 0x3714 <RFM22QueueCmdToFF(unsigned char*)+0x60>
    3710:	0e 94 42 19 	call	0x3284	; 0x3284 <powerDownSPI()>
  }
    3714:	df 91       	pop	r29
    3716:	cf 91       	pop	r28
    3718:	08 95       	ret

0000371a <RFM22RegisterBlockSetup(unsigned char const (*) [2])>:


// Configure the radio from a list of register/value pairs in readonly PROGMEM/Flash, terminating with an 0xff register value.
// NOTE: argument is not a pointer into SRAM, it is into PROGMEM!
// Could optimise case where multiple values are for successive RFM22 registers by using burst write.
void RFM22RegisterBlockSetup(const uint8_t registerValues[][2])
    371a:	cf 93       	push	r28
    371c:	df 93       	push	r29
    371e:	ec 01       	movw	r28, r24
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    3720:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <powerUpSPIIfDisabled()>
  for( ; ; )
    {
    const uint8_t reg = pgm_read_byte(&(registerValues[0][0]));
    3724:	fe 01       	movw	r30, r28
    3726:	94 91       	lpm	r25, Z+
    const uint8_t val = pgm_read_byte(&(registerValues[0][1]));
    3728:	21 96       	adiw	r28, 0x01	; 1
    372a:	fe 01       	movw	r30, r28
    372c:	24 91       	lpm	r18, Z+
    372e:	21 97       	sbiw	r28, 0x01	; 1
    if(0xff == reg) { break; }
    3730:	9f 3f       	cpi	r25, 0xFF	; 255
    3732:	69 f0       	breq	.+26     	; 0x374e <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x34>

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    3734:	2a 98       	cbi	0x05, 2	; 5
  _RFM22_wr(addr | 0x80); // Force to write.
    3736:	90 68       	ori	r25, 0x80	; 128

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3738:	9e bd       	out	0x2e, r25	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    373a:	0d b4       	in	r0, 0x2d	; 45
    373c:	07 fe       	sbrs	r0, 7
    373e:	fd cf       	rjmp	.-6      	; 0x373a <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x20>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3740:	2e bd       	out	0x2e, r18	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3742:	0d b4       	in	r0, 0x2d	; 45
    3744:	07 fe       	sbrs	r0, 7
    3746:	fd cf       	rjmp	.-6      	; 0x3742 <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x28>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    3748:	2a 9a       	sbi	0x05, 2	; 5
    DEBUG_SERIAL_PRINT_FLASHSTRING(" = 0x");
    DEBUG_SERIAL_PRINTFMT(val, HEX);
    DEBUG_SERIAL_PRINTLN();
#endif
    _RFM22WriteReg8Bit(reg, val);
    ++registerValues;
    374a:	22 96       	adiw	r28, 0x02	; 2
    374c:	eb cf       	rjmp	.-42     	; 0x3724 <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0xa>
    }
  if(neededEnable) { powerDownSPI(); }
    374e:	88 23       	and	r24, r24
    3750:	11 f0       	breq	.+4      	; 0x3756 <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x3c>
    3752:	0e 94 42 19 	call	0x3284	; 0x3284 <powerDownSPI()>
  }
    3756:	df 91       	pop	r29
    3758:	cf 91       	pop	r28
    375a:	08 95       	ret

0000375c <RFM22PowerOnInit()>:
void RFM22PowerOnInit()
  {
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22 reset...");
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
    375c:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <powerUpSPIIfDisabled()>
    3760:	98 2f       	mov	r25, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    3762:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3764:	87 e8       	ldi	r24, 0x87	; 135
    3766:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3768:	0d b4       	in	r0, 0x2d	; 45
    376a:	07 fe       	sbrs	r0, 7
    376c:	fd cf       	rjmp	.-6      	; 0x3768 <RFM22PowerOnInit()+0xc>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    376e:	80 e8       	ldi	r24, 0x80	; 128
    3770:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3772:	0d b4       	in	r0, 0x2d	; 45
    3774:	07 fe       	sbrs	r0, 7
    3776:	fd cf       	rjmp	.-6      	; 0x3772 <RFM22PowerOnInit()+0x16>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    3778:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    377a:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    377c:	87 e8       	ldi	r24, 0x87	; 135
    377e:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3780:	0d b4       	in	r0, 0x2d	; 45
    3782:	07 fe       	sbrs	r0, 7
    3784:	fd cf       	rjmp	.-6      	; 0x3780 <RFM22PowerOnInit()+0x24>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3786:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3788:	0d b4       	in	r0, 0x2d	; 45
    378a:	07 fe       	sbrs	r0, 7
    378c:	fd cf       	rjmp	.-6      	; 0x3788 <RFM22PowerOnInit()+0x2c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    378e:	2a 9a       	sbi	0x05, 2	; 5
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22 reset...");
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
  _RFM22WriteReg8Bit(RFM22REG_OP_CTRL1, RFM22REG_OP_CTRL1_SWRES);
  _RFM22ModeStandby();
  if(neededEnable) { powerDownSPI(); }
    3790:	99 23       	and	r25, r25
    3792:	11 f0       	breq	.+4      	; 0x3798 <RFM22PowerOnInit()+0x3c>
    3794:	0e 94 42 19 	call	0x3284	; 0x3284 <powerDownSPI()>
    3798:	08 95       	ret

0000379a <RFM22ModeStandbyAndClearState()>:
// Enter standby mode (consume least possible power but retain register contents).
// FIFO state and pending interrupts are cleared.
// Typical consumption in standby 450nA (cf 15nA when shut down, 8.5mA TUNE, 18--80mA RX/TX).
void RFM22ModeStandbyAndClearState()
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    379a:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <powerUpSPIIfDisabled()>
    379e:	98 2f       	mov	r25, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    37a0:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    37a2:	87 e8       	ldi	r24, 0x87	; 135
    37a4:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    37a6:	0d b4       	in	r0, 0x2d	; 45
    37a8:	07 fe       	sbrs	r0, 7
    37aa:	fd cf       	rjmp	.-6      	; 0x37a6 <RFM22ModeStandbyAndClearState()+0xc>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    37ac:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    37ae:	0d b4       	in	r0, 0x2d	; 45
    37b0:	07 fe       	sbrs	r0, 7
    37b2:	fd cf       	rjmp	.-6      	; 0x37ae <RFM22ModeStandbyAndClearState()+0x14>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    37b4:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    37b6:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    37b8:	88 e8       	ldi	r24, 0x88	; 136
    37ba:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    37bc:	0d b4       	in	r0, 0x2d	; 45
    37be:	07 fe       	sbrs	r0, 7
    37c0:	fd cf       	rjmp	.-6      	; 0x37bc <RFM22ModeStandbyAndClearState()+0x22>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    37c2:	83 e0       	ldi	r24, 0x03	; 3
    37c4:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    37c6:	0d b4       	in	r0, 0x2d	; 45
    37c8:	07 fe       	sbrs	r0, 7
    37ca:	fd cf       	rjmp	.-6      	; 0x37c6 <RFM22ModeStandbyAndClearState()+0x2c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    37cc:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    37ce:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    37d0:	88 e8       	ldi	r24, 0x88	; 136
    37d2:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    37d4:	0d b4       	in	r0, 0x2d	; 45
    37d6:	07 fe       	sbrs	r0, 7
    37d8:	fd cf       	rjmp	.-6      	; 0x37d4 <RFM22ModeStandbyAndClearState()+0x3a>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    37da:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    37dc:	0d b4       	in	r0, 0x2d	; 45
    37de:	07 fe       	sbrs	r0, 7
    37e0:	fd cf       	rjmp	.-6      	; 0x37dc <RFM22ModeStandbyAndClearState()+0x42>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    37e2:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    37e4:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    37e6:	85 e8       	ldi	r24, 0x85	; 133
    37e8:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    37ea:	0d b4       	in	r0, 0x2d	; 45
    37ec:	07 fe       	sbrs	r0, 7
    37ee:	fd cf       	rjmp	.-6      	; 0x37ea <RFM22ModeStandbyAndClearState()+0x50>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    37f0:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    37f2:	0d b4       	in	r0, 0x2d	; 45
    37f4:	07 fe       	sbrs	r0, 7
    37f6:	fd cf       	rjmp	.-6      	; 0x37f2 <RFM22ModeStandbyAndClearState()+0x58>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    37f8:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    37fa:	0d b4       	in	r0, 0x2d	; 45
    37fc:	07 fe       	sbrs	r0, 7
    37fe:	fd cf       	rjmp	.-6      	; 0x37fa <RFM22ModeStandbyAndClearState()+0x60>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    3800:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    3802:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3804:	83 e8       	ldi	r24, 0x83	; 131
    3806:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3808:	0d b4       	in	r0, 0x2d	; 45
    380a:	07 fe       	sbrs	r0, 7
    380c:	fd cf       	rjmp	.-6      	; 0x3808 <RFM22ModeStandbyAndClearState()+0x6e>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    380e:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3810:	0d b4       	in	r0, 0x2d	; 45
    3812:	07 fe       	sbrs	r0, 7
    3814:	fd cf       	rjmp	.-6      	; 0x3810 <RFM22ModeStandbyAndClearState()+0x76>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3816:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3818:	0d b4       	in	r0, 0x2d	; 45
    381a:	07 fe       	sbrs	r0, 7
    381c:	fd cf       	rjmp	.-6      	; 0x3818 <RFM22ModeStandbyAndClearState()+0x7e>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    381e:	2a 9a       	sbi	0x05, 2	; 5
//  _RFM22WriteReg8Bit(RFM22REG_INT_ENABLE2, 0); // TODO: combine in burst write with previous...
  _RFM22WriteReg16Bit0(RFM22REG_INT_ENABLE1);
  // Clear any interrupts already/still pending...
  _RFM22ClearInterrupts();  
  //_RFM22WriteReg8Bit(0xd, 0x1f); // Drive GPIO2 to ground as output... (Move to general register settings.)
  if(neededEnable) { powerDownSPI(); }
    3820:	99 23       	and	r25, r25
    3822:	11 f0       	breq	.+4      	; 0x3828 <RFM22ModeStandbyAndClearState()+0x8e>
    3824:	0e 94 42 19 	call	0x3284	; 0x3284 <powerDownSPI()>
    3828:	08 95       	ret

0000382a <RFM22TXFIFO()>:

// Transmit contents of on-chip TX FIFO: caller should revert to low-power standby mode (etc) if required.
// Returns true if packet apparently sent correctly/fully.
// Does not clear TX FIFO (so possible to re-send immediately).
// Note: Reliability possibly helped by early move to 'tune' mode to work other than with default (4MHz) lowish PICAXE clock speeds.
bool RFM22TXFIFO()
    382a:	ff 92       	push	r15
    382c:	0f 93       	push	r16
    382e:	1f 93       	push	r17
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    3830:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <powerUpSPIIfDisabled()>
    3834:	f8 2e       	mov	r15, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    3836:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3838:	85 e8       	ldi	r24, 0x85	; 133
    383a:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    383c:	0d b4       	in	r0, 0x2d	; 45
    383e:	07 fe       	sbrs	r0, 7
    3840:	fd cf       	rjmp	.-6      	; 0x383c <RFM22TXFIFO()+0x12>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3842:	84 e0       	ldi	r24, 0x04	; 4
    3844:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3846:	0d b4       	in	r0, 0x2d	; 45
    3848:	07 fe       	sbrs	r0, 7
    384a:	fd cf       	rjmp	.-6      	; 0x3846 <RFM22TXFIFO()+0x1c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    384c:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    384e:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3850:	86 e8       	ldi	r24, 0x86	; 134
    3852:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3854:	0d b4       	in	r0, 0x2d	; 45
    3856:	07 fe       	sbrs	r0, 7
    3858:	fd cf       	rjmp	.-6      	; 0x3854 <RFM22TXFIFO()+0x2a>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    385a:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    385c:	0d b4       	in	r0, 0x2d	; 45
    385e:	07 fe       	sbrs	r0, 7
    3860:	fd cf       	rjmp	.-6      	; 0x385c <RFM22TXFIFO()+0x32>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    3862:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    3864:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3866:	83 e8       	ldi	r24, 0x83	; 131
    3868:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    386a:	0d b4       	in	r0, 0x2d	; 45
    386c:	07 fe       	sbrs	r0, 7
    386e:	fd cf       	rjmp	.-6      	; 0x386a <RFM22TXFIFO()+0x40>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3870:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3872:	0d b4       	in	r0, 0x2d	; 45
    3874:	07 fe       	sbrs	r0, 7
    3876:	fd cf       	rjmp	.-6      	; 0x3872 <RFM22TXFIFO()+0x48>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3878:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    387a:	0d b4       	in	r0, 0x2d	; 45
    387c:	07 fe       	sbrs	r0, 7
    387e:	fd cf       	rjmp	.-6      	; 0x387a <RFM22TXFIFO()+0x50>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    3880:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    3882:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3884:	87 e8       	ldi	r24, 0x87	; 135
    3886:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3888:	0d b4       	in	r0, 0x2d	; 45
    388a:	07 fe       	sbrs	r0, 7
    388c:	fd cf       	rjmp	.-6      	; 0x3888 <RFM22TXFIFO()+0x5e>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    388e:	89 e0       	ldi	r24, 0x09	; 9
    3890:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3892:	0d b4       	in	r0, 0x2d	; 45
    3894:	07 fe       	sbrs	r0, 7
    3896:	fd cf       	rjmp	.-6      	; 0x3892 <RFM22TXFIFO()+0x68>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    3898:	2a 9a       	sbi	0x05, 2	; 5
    389a:	18 e0       	ldi	r17, 0x08	; 8

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    389c:	03 e0       	ldi	r16, 0x03	; 3
    389e:	13 c0       	rjmp	.+38     	; 0x38c6 <RFM22TXFIFO()+0x9c>
  // Repeately nap until packet sent, with upper bound of ~120ms on TX time in case there is a problem.
  // TX time is ~1.6ms per byte at 5000bps.
  bool result = false; // Usual case is success.
  for(int8_t i = 8; --i >= 0; )
    {
    nap(WDTO_15MS); // Sleep in low power mode for a short time waiting for bits to be sent...
    38a0:	80 e0       	ldi	r24, 0x00	; 0
    38a2:	0e 94 39 17 	call	0x2e72	; 0x2e72 <nap(signed char)>

// Read from 8-bit register on RFM22.
// SPI must already be configured and running.
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
    38a6:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    38a8:	0e bd       	out	0x2e, r16	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    38aa:	0d b4       	in	r0, 0x2d	; 45
    38ac:	07 fe       	sbrs	r0, 7
    38ae:	fd cf       	rjmp	.-6      	; 0x38aa <RFM22TXFIFO()+0x80>
  return(SPDR);
    38b0:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    38b2:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    38b4:	0d b4       	in	r0, 0x2d	; 45
    38b6:	07 fe       	sbrs	r0, 7
    38b8:	fd cf       	rjmp	.-6      	; 0x38b4 <RFM22TXFIFO()+0x8a>
  return(SPDR);
    38ba:	8e b5       	in	r24, 0x2e	; 46
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  const uint8_t result = _RFM22_io(0); // Dummy value...
  _RFM22_DESELECT();
    38bc:	2a 9a       	sbi	0x05, 2	; 5
  bool result = false; // Usual case is success.
  for(int8_t i = 8; --i >= 0; )
    {
    nap(WDTO_15MS); // Sleep in low power mode for a short time waiting for bits to be sent...
    const uint8_t status = _RFM22ReadReg8Bit(RFM22REG_INT_STATUS1); // TODO: could use nIRQ instead if available.
    if(status & 4) { result = true; break; } // Packet sent!
    38be:	82 ff       	sbrs	r24, 2
    38c0:	02 c0       	rjmp	.+4      	; 0x38c6 <RFM22TXFIFO()+0x9c>
    38c2:	11 e0       	ldi	r17, 0x01	; 1
    38c4:	03 c0       	rjmp	.+6      	; 0x38cc <RFM22TXFIFO()+0xa2>
  _RFM22ModeTX(); // Enable TX mode and transmit TX FIFO contents.

  // Repeately nap until packet sent, with upper bound of ~120ms on TX time in case there is a problem.
  // TX time is ~1.6ms per byte at 5000bps.
  bool result = false; // Usual case is success.
  for(int8_t i = 8; --i >= 0; )
    38c6:	11 50       	subi	r17, 0x01	; 1
    38c8:	58 f7       	brcc	.-42     	; 0x38a0 <RFM22TXFIFO()+0x76>
    38ca:	10 e0       	ldi	r17, 0x00	; 0
    nap(WDTO_15MS); // Sleep in low power mode for a short time waiting for bits to be sent...
    const uint8_t status = _RFM22ReadReg8Bit(RFM22REG_INT_STATUS1); // TODO: could use nIRQ instead if available.
    if(status & 4) { result = true; break; } // Packet sent!
    }

  if(neededEnable) { powerDownSPI(); }
    38cc:	ff 20       	and	r15, r15
    38ce:	11 f0       	breq	.+4      	; 0x38d4 <RFM22TXFIFO()+0xaa>
    38d0:	0e 94 42 19 	call	0x3284	; 0x3284 <powerDownSPI()>
  return(result);
  }
    38d4:	81 2f       	mov	r24, r17
    38d6:	1f 91       	pop	r17
    38d8:	0f 91       	pop	r16
    38da:	ff 90       	pop	r15
    38dc:	08 95       	ret

000038de <RFM22CheckConnected()>:
  _RFM22ModeStandby();
  if(neededEnable) { powerDownSPI(); }
  }

// Returns true iff RFM22 (or RFM23) appears to be correctly connected.
bool RFM22CheckConnected()
    38de:	0f 93       	push	r16
    38e0:	1f 93       	push	r17
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    38e2:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <powerUpSPIIfDisabled()>
    38e6:	08 2f       	mov	r16, r24

// Read from 8-bit register on RFM22.
// SPI must already be configured and running.
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
    38e8:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    38ea:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    38ec:	0d b4       	in	r0, 0x2d	; 45
    38ee:	07 fe       	sbrs	r0, 7
    38f0:	fd cf       	rjmp	.-6      	; 0x38ec <RFM22CheckConnected()+0xe>
  return(SPDR);
    38f2:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    38f4:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    38f6:	0d b4       	in	r0, 0x2d	; 45
    38f8:	07 fe       	sbrs	r0, 7
    38fa:	fd cf       	rjmp	.-6      	; 0x38f6 <RFM22CheckConnected()+0x18>
  return(SPDR);
    38fc:	8e b5       	in	r24, 0x2e	; 46
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  const uint8_t result = _RFM22_io(0); // Dummy value...
  _RFM22_DESELECT();
    38fe:	2a 9a       	sbi	0x05, 2	; 5
bool RFM22CheckConnected()
  {
  const bool neededEnable = powerUpSPIIfDisabled();
  bool isOK = false;
  const uint8_t rType = _RFM22ReadReg8Bit(0); // May read as 0 if not connected at all.
  if(RFM22_SUPPORTED_DEVICE_TYPE == rType)
    3900:	88 30       	cpi	r24, 0x08	; 8
    3902:	89 f4       	brne	.+34     	; 0x3926 <RFM22CheckConnected()+0x48>

// Read from 8-bit register on RFM22.
// SPI must already be configured and running.
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
    3904:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    3906:	81 e0       	ldi	r24, 0x01	; 1
    3908:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    390a:	0d b4       	in	r0, 0x2d	; 45
    390c:	07 fe       	sbrs	r0, 7
    390e:	fd cf       	rjmp	.-6      	; 0x390a <RFM22CheckConnected()+0x2c>
  return(SPDR);
    3910:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    3912:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3914:	0d b4       	in	r0, 0x2d	; 45
    3916:	07 fe       	sbrs	r0, 7
    3918:	fd cf       	rjmp	.-6      	; 0x3914 <RFM22CheckConnected()+0x36>
  return(SPDR);
    391a:	8e b5       	in	r24, 0x2e	; 46
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  const uint8_t result = _RFM22_io(0); // Dummy value...
  _RFM22_DESELECT();
    391c:	2a 9a       	sbi	0x05, 2	; 5
  bool isOK = false;
  const uint8_t rType = _RFM22ReadReg8Bit(0); // May read as 0 if not connected at all.
  if(RFM22_SUPPORTED_DEVICE_TYPE == rType)
    {
    const uint8_t rVersion = _RFM22ReadReg8Bit(1);
    if(RFM22_SUPPORTED_DEVICE_VERSION == rVersion)
    391e:	86 30       	cpi	r24, 0x06	; 6
    3920:	11 f4       	brne	.+4      	; 0x3926 <RFM22CheckConnected()+0x48>
    3922:	11 e0       	ldi	r17, 0x01	; 1
    3924:	05 c0       	rjmp	.+10     	; 0x3930 <RFM22CheckConnected()+0x52>
    DEBUG_SERIAL_PRINTFMT(rType, HEX);
    DEBUG_SERIAL_PRINTLN();
    }
#endif
#if 1 && defined(DEBUG)
  if(!isOK) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22 bad"); }
    3926:	87 e2       	ldi	r24, 0x27	; 39
    3928:	91 e0       	ldi	r25, 0x01	; 1
    392a:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <serialPrintlnAndFlush(__FlashStringHelper const*)>
    392e:	10 e0       	ldi	r17, 0x00	; 0
#endif
  if(neededEnable) { powerDownSPI(); }
    3930:	00 23       	and	r16, r16
    3932:	11 f0       	breq	.+4      	; 0x3938 <RFM22CheckConnected()+0x5a>
    3934:	0e 94 42 19 	call	0x3284	; 0x3284 <powerDownSPI()>
  return(isOK);
  }
    3938:	81 2f       	mov	r24, r17
    393a:	1f 91       	pop	r17
    393c:	0f 91       	pop	r16
    393e:	08 95       	ret

00003940 <eeprom_read_byte>:


/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
    3940:	9c 01       	movw	r18, r24
{
    do {} while (!eeprom_is_ready ());
    3942:	f9 99       	sbic	0x1f, 1	; 31
    3944:	fe cf       	rjmp	.-4      	; 0x3942 <eeprom_read_byte+0x2>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    3946:	32 bd       	out	0x22, r19	; 34
    3948:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    394a:	f8 9a       	sbi	0x1f, 0	; 31
    394c:	80 b5       	in	r24, 0x20	; 32
    return __result;
}
    394e:	08 95       	ret

00003950 <eeprom_write_byte>:
}

/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
    3950:	9c 01       	movw	r18, r24
{
    do {} while (!eeprom_is_ready ());
    3952:	f9 99       	sbic	0x1f, 1	; 31
    3954:	fe cf       	rjmp	.-4      	; 0x3952 <eeprom_write_byte+0x2>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    3956:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    3958:	32 bd       	out	0x22, r19	; 34
    395a:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
    395c:	60 bd       	out	0x20, r22	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    395e:	0f b6       	in	r0, 0x3f	; 63
    3960:	f8 94       	cli
    3962:	fa 9a       	sbi	0x1f, 2	; 31
    3964:	f9 9a       	sbi	0x1f, 1	; 31
    3966:	0f be       	out	0x3f, r0	; 63
}
    3968:	08 95       	ret

0000396a <getMinutesSinceMidnightLT()>:
// Thread-safe and ISR-safe.
#ifndef getMinutesSinceMidnightLT
uint_least16_t getMinutesSinceMidnightLT()
  {
  uint_least16_t result;
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    396a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    396c:	f8 94       	cli
    { result = _minutesSinceMidnightLT; }
    396e:	20 91 fe 02 	lds	r18, 0x02FE
    3972:	30 91 ff 02 	lds	r19, 0x02FF
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3976:	8f bf       	out	0x3f, r24	; 63
  return(result);
  }
    3978:	c9 01       	movw	r24, r18
    397a:	08 95       	ret

0000397c <getMinutesLT()>:
// Thread-safe and ISR-safe.
#ifndef getMinutesSinceMidnightLT
uint_least16_t getMinutesSinceMidnightLT()
  {
  uint_least16_t result;
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    397c:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    397e:	f8 94       	cli
    { result = _minutesSinceMidnightLT; }
    3980:	80 91 fe 02 	lds	r24, 0x02FE
    3984:	90 91 ff 02 	lds	r25, 0x02FF
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3988:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    398a:	6c e3       	ldi	r22, 0x3C	; 60
    398c:	70 e0       	ldi	r23, 0x00	; 0
    398e:	0e 94 2e 35 	call	0x6a5c	; 0x6a5c <__udivmodhi4>
#endif

// Get local time minutes from RTC [0,59].
// Relatively slow.
// Thread-safe and ISR-safe.
uint_least8_t getMinutesLT() { return(getMinutesSinceMidnightLT() % 60); }
    3992:	08 95       	ret

00003994 <getHoursLT()>:
// Thread-safe and ISR-safe.
#ifndef getMinutesSinceMidnightLT
uint_least16_t getMinutesSinceMidnightLT()
  {
  uint_least16_t result;
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    3994:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3996:	f8 94       	cli
    { result = _minutesSinceMidnightLT; }
    3998:	80 91 fe 02 	lds	r24, 0x02FE
    399c:	90 91 ff 02 	lds	r25, 0x02FF
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    39a0:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    39a2:	6c e3       	ldi	r22, 0x3C	; 60
    39a4:	70 e0       	ldi	r23, 0x00	; 0
    39a6:	0e 94 2e 35 	call	0x6a5c	; 0x6a5c <__udivmodhi4>
    39aa:	86 2f       	mov	r24, r22
uint_least8_t getMinutesLT() { return(getMinutesSinceMidnightLT() % 60); }

// Get local time hours from RTC [0,23].
// Relatively slow.
// Thread-safe and ISR-safe.
uint_least8_t getHoursLT() { return(getMinutesSinceMidnightLT() / 60); }
    39ac:	08 95       	ret

000039ae <restoreRTC()>:

// Restore software RTC information from non-volatile (EEPROM) store, if possible.
// Returns true if the persisted data seemed valid and was restored, in full or part.
// To void on average using 15/2 minutes at each reset/restart,
// this starts the internal time a little over half way into the restored 15-minute slot.
bool restoreRTC()
    39ae:	1f 93       	push	r17
  {
  uint8_t persistedValue;
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    39b0:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    39b2:	f8 94       	cli
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    39b4:	88 e0       	ldi	r24, 0x08	; 8
    39b6:	90 e0       	ldi	r25, 0x00	; 0
    39b8:	60 ea       	ldi	r22, 0xA0	; 160
    39ba:	7c e1       	ldi	r23, 0x1C	; 28
    39bc:	0e 94 1b 03 	call	0x636	; 0x636 <__eerd_word>
    {
    // Restore the persisted days, though ignore if apparently unset (all 1s).
    const uint16_t days = eeprom_read_word((uint16_t*)EE_START_RTC_DAY_PERSIST);
    if(days != (uint16_t)~0U) { _daysSince1999LT = days; }
    39c0:	2f ef       	ldi	r18, 0xFF	; 255
    39c2:	8f 3f       	cpi	r24, 0xFF	; 255
    39c4:	92 07       	cpc	r25, r18
    39c6:	21 f0       	breq	.+8      	; 0x39d0 <restoreRTC()+0x22>
    39c8:	90 93 01 03 	sts	0x0301, r25
    39cc:	80 93 00 03 	sts	0x0300, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    39d0:	f9 99       	sbic	0x1f, 1	; 31
    39d2:	fe cf       	rjmp	.-4      	; 0x39d0 <restoreRTC()+0x22>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    39d4:	8a e0       	ldi	r24, 0x0A	; 10
    39d6:	90 e0       	ldi	r25, 0x00	; 0
    39d8:	92 bd       	out	0x22, r25	; 34
    39da:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    39dc:	f8 9a       	sbi	0x1f, 0	; 31
    39de:	60 b5       	in	r22, 0x20	; 32
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    39e0:	1f bf       	out	0x3f, r17	; 63
    // Now recover persisted HH:MM value.
    persistedValue = eeprom_read_byte((uint8_t*)EE_START_RTC_HHMM_PERSIST);
    }

  // Abort if value clearly invalid, eg likely an unprogrammed (0xff) byte.
  if(persistedValue >= (24 << 3)) { return(false); }
    39e2:	60 3c       	cpi	r22, 0xC0	; 192
    39e4:	90 f5       	brcc	.+100    	; 0x3a4a <restoreRTC()+0x9c>

  uint_least16_t minutesSinceMidnight = (persistedValue >> 3) * 60;
    39e6:	86 2f       	mov	r24, r22
    39e8:	90 e0       	ldi	r25, 0x00	; 0
    39ea:	23 e0       	ldi	r18, 0x03	; 3
    39ec:	95 95       	asr	r25
    39ee:	87 95       	ror	r24
    39f0:	2a 95       	dec	r18
    39f2:	e1 f7       	brne	.-8      	; 0x39ec <restoreRTC()+0x3e>
    39f4:	2c e3       	ldi	r18, 0x3C	; 60
    39f6:	30 e0       	ldi	r19, 0x00	; 0
    39f8:	82 9f       	mul	r24, r18
    39fa:	a0 01       	movw	r20, r0
    39fc:	83 9f       	mul	r24, r19
    39fe:	50 0d       	add	r21, r0
    3a00:	92 9f       	mul	r25, r18
    3a02:	50 0d       	add	r21, r0
    3a04:	11 24       	eor	r1, r1
  minutesSinceMidnight += 8; // Start just over half-way into one quantum to minimise average time lost on restart.
    3a06:	9a 01       	movw	r18, r20
    3a08:	28 5f       	subi	r18, 0xF8	; 248
    3a0a:	3f 4f       	sbci	r19, 0xFF	; 255
  const uint8_t lowBits = persistedValue & 7; // Extract quarter-hour bits.
  switch(lowBits)
    3a0c:	86 2f       	mov	r24, r22
    3a0e:	87 70       	andi	r24, 0x07	; 7
    3a10:	81 30       	cpi	r24, 0x01	; 1
    3a12:	59 f0       	breq	.+22     	; 0x3a2a <restoreRTC()+0x7c>
    3a14:	81 30       	cpi	r24, 0x01	; 1
    3a16:	28 f0       	brcs	.+10     	; 0x3a22 <restoreRTC()+0x74>
    3a18:	83 30       	cpi	r24, 0x03	; 3
    3a1a:	59 f0       	breq	.+22     	; 0x3a32 <restoreRTC()+0x84>
    3a1c:	87 30       	cpi	r24, 0x07	; 7
    3a1e:	a9 f4       	brne	.+42     	; 0x3a4a <restoreRTC()+0x9c>
    3a20:	0b c0       	rjmp	.+22     	; 0x3a38 <restoreRTC()+0x8a>
    {
    case 0: minutesSinceMidnight += 45; break;
    3a22:	9a 01       	movw	r18, r20
    3a24:	2b 5c       	subi	r18, 0xCB	; 203
    3a26:	3f 4f       	sbci	r19, 0xFF	; 255
    3a28:	07 c0       	rjmp	.+14     	; 0x3a38 <restoreRTC()+0x8a>
    case 1: minutesSinceMidnight += 30; break;
    3a2a:	9a 01       	movw	r18, r20
    3a2c:	2a 5d       	subi	r18, 0xDA	; 218
    3a2e:	3f 4f       	sbci	r19, 0xFF	; 255
    3a30:	03 c0       	rjmp	.+6      	; 0x3a38 <restoreRTC()+0x8a>
    case 3: minutesSinceMidnight += 15; break;
    3a32:	9a 01       	movw	r18, r20
    3a34:	29 5e       	subi	r18, 0xE9	; 233
    3a36:	3f 4f       	sbci	r19, 0xFF	; 255
    default: return(false); // Invalid bit pattern: abort.
    }

  // Set the hours and minutes (atomically).
  // Deliberately leave the seconds unset to avoid units becoming too synchronised with one another, increasing TX collisions, etc.
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    3a38:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3a3a:	f8 94       	cli
    { _minutesSinceMidnightLT = minutesSinceMidnight; }
    3a3c:	30 93 ff 02 	sts	0x02FF, r19
    3a40:	20 93 fe 02 	sts	0x02FE, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3a44:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
    3a46:	81 e0       	ldi	r24, 0x01	; 1
    3a48:	01 c0       	rjmp	.+2      	; 0x3a4c <restoreRTC()+0x9e>

  return(true);
    3a4a:	80 e0       	ldi	r24, 0x00	; 0
  }
    3a4c:	1f 91       	pop	r17
    3a4e:	08 95       	ret

00003a50 <persistRTC()>:
// but enough to help avoid the clock slipping too much during (say) a battery change.
// There is no point calling this more than (say) once per minute,
// though it will simply return relatively quickly from redundant calls.
// The RTC data is stored so as not to wear out AVR EEPROM for at least several years.
// IMPLEMENTATION OF THIS AND THE eeprom_smart_xxx_byte() ROUTINES IS CRITICAL TO PERFORMANCE AND LONGEVITY.
void persistRTC()
    3a50:	1f 93       	push	r17
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    3a52:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3a54:	f8 94       	cli
    {
    uint8_t quarterHours = (_minutesSinceMidnightLT / 15);
    3a56:	80 91 fe 02 	lds	r24, 0x02FE
    3a5a:	90 91 ff 02 	lds	r25, 0x02FF
    3a5e:	6f e0       	ldi	r22, 0x0F	; 15
    3a60:	70 e0       	ldi	r23, 0x00	; 0
    3a62:	0e 94 2e 35 	call	0x6a5c	; 0x6a5c <__udivmodhi4>
    uint8_t targetByte = (quarterHours << 1) & ~7U; // Bit pattern now hhhhh000 where hhhhh is whole hours [0,23].
    3a66:	46 2f       	mov	r20, r22
    3a68:	44 0f       	add	r20, r20
    3a6a:	48 7f       	andi	r20, 0xF8	; 248
    switch(quarterHours & 3)
    3a6c:	70 e0       	ldi	r23, 0x00	; 0
    3a6e:	63 70       	andi	r22, 0x03	; 3
    3a70:	70 70       	andi	r23, 0x00	; 0
    3a72:	61 30       	cpi	r22, 0x01	; 1
    3a74:	71 05       	cpc	r23, r1
    3a76:	39 f0       	breq	.+14     	; 0x3a86 <persistRTC()+0x36>
    3a78:	62 30       	cpi	r22, 0x02	; 2
    3a7a:	71 05       	cpc	r23, r1
    3a7c:	31 f0       	breq	.+12     	; 0x3a8a <persistRTC()+0x3a>
    3a7e:	67 2b       	or	r22, r23
    3a80:	29 f4       	brne	.+10     	; 0x3a8c <persistRTC()+0x3c>
      {
      case 0: targetByte |= 7; break;
    3a82:	47 60       	ori	r20, 0x07	; 7
    3a84:	03 c0       	rjmp	.+6      	; 0x3a8c <persistRTC()+0x3c>
      case 1: targetByte |= 3; break;
    3a86:	43 60       	ori	r20, 0x03	; 3
    3a88:	01 c0       	rjmp	.+2      	; 0x3a8c <persistRTC()+0x3c>
      case 2: targetByte |= 1; break;
    3a8a:	41 60       	ori	r20, 0x01	; 1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    3a8c:	f9 99       	sbic	0x1f, 1	; 31
    3a8e:	fe cf       	rjmp	.-4      	; 0x3a8c <persistRTC()+0x3c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    3a90:	8a e0       	ldi	r24, 0x0A	; 10
    3a92:	90 e0       	ldi	r25, 0x00	; 0
    3a94:	92 bd       	out	0x22, r25	; 34
    3a96:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    3a98:	f8 9a       	sbi	0x1f, 0	; 31
    3a9a:	80 b5       	in	r24, 0x20	; 32
      }

    // Update if target HH:MM not already correct.
    const uint8_t persistedValue = eeprom_read_byte((uint8_t*)EE_START_RTC_HHMM_PERSIST);
    if(persistedValue != targetByte)
    3a9c:	84 17       	cp	r24, r20
    3a9e:	91 f1       	breq	.+100    	; 0x3b04 <persistRTC()+0xb4>
      {
      // Where it is not possible to get the target value just by setting bits to 0,
      // eg for a new hour (ie completely different hour to that in EEPROM and on roll to new hour),
      // then do a full erase/write...
      //if((0 == quarterHours) || ((persistedValue & 0xf8) != (targetByte & 0xf8)))
      if(targetByte != (persistedValue & targetByte))
    3aa0:	24 2f       	mov	r18, r20
    3aa2:	30 e0       	ldi	r19, 0x00	; 0
    3aa4:	90 e0       	ldi	r25, 0x00	; 0
    3aa6:	82 23       	and	r24, r18
    3aa8:	93 23       	and	r25, r19
    3aaa:	28 17       	cp	r18, r24
    3aac:	39 07       	cpc	r19, r25
    3aae:	71 f0       	breq	.+28     	; 0x3acc <persistRTC()+0x7c>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    3ab0:	f9 99       	sbic	0x1f, 1	; 31
    3ab2:	fe cf       	rjmp	.-4      	; 0x3ab0 <persistRTC()+0x60>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    3ab4:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    3ab6:	8a e0       	ldi	r24, 0x0A	; 10
    3ab8:	90 e0       	ldi	r25, 0x00	; 0
    3aba:	92 bd       	out	0x22, r25	; 34
    3abc:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    3abe:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    3ac0:	0f b6       	in	r0, 0x3f	; 63
    3ac2:	f8 94       	cli
    3ac4:	fa 9a       	sbi	0x1f, 2	; 31
    3ac6:	f9 9a       	sbi	0x1f, 1	; 31
    3ac8:	0f be       	out	0x3f, r0	; 63
    3aca:	05 c0       	rjmp	.+10     	; 0x3ad6 <persistRTC()+0x86>
        { eeprom_write_byte((uint8_t*)EE_START_RTC_HHMM_PERSIST, targetByte); }
      // Else do a write without erase, typically clearing the quarter bits one at a time...
      else
        { eeprom_smart_clear_bits((uint8_t*)EE_START_RTC_HHMM_PERSIST, targetByte); }
    3acc:	8a e0       	ldi	r24, 0x0A	; 10
    3ace:	90 e0       	ldi	r25, 0x00	; 0
    3ad0:	64 2f       	mov	r22, r20
    3ad2:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <eeprom_smart_clear_bits(unsigned char*, unsigned char)>
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    3ad6:	88 e0       	ldi	r24, 0x08	; 8
    3ad8:	90 e0       	ldi	r25, 0x00	; 0
    3ada:	60 ea       	ldi	r22, 0xA0	; 160
    3adc:	7c e1       	ldi	r23, 0x1C	; 28
    3ade:	0e 94 1b 03 	call	0x636	; 0x636 <__eerd_word>

      // Also persist the current days if not up to date.
      const uint16_t days = eeprom_read_word((uint16_t*)EE_START_RTC_DAY_PERSIST);
      if(days != _daysSince1999LT) { eeprom_write_word((uint16_t*)EE_START_RTC_DAY_PERSIST, _daysSince1999LT); }
    3ae2:	20 91 00 03 	lds	r18, 0x0300
    3ae6:	30 91 01 03 	lds	r19, 0x0301
    3aea:	82 17       	cp	r24, r18
    3aec:	93 07       	cpc	r25, r19
    3aee:	51 f0       	breq	.+20     	; 0x3b04 <persistRTC()+0xb4>
    3af0:	60 91 00 03 	lds	r22, 0x0300
    3af4:	70 91 01 03 	lds	r23, 0x0301
    Write a word \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_word (uint16_t *__p, uint16_t __value)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    __eewr_word (__p, __value, eeprom_write_byte);
    3af8:	88 e0       	ldi	r24, 0x08	; 8
    3afa:	90 e0       	ldi	r25, 0x00	; 0
    3afc:	48 ea       	ldi	r20, 0xA8	; 168
    3afe:	5c e1       	ldi	r21, 0x1C	; 28
    3b00:	0e 94 31 03 	call	0x662	; 0x662 <__eewr_word>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3b04:	1f bf       	out	0x3f, r17	; 63
      }
    }
  }
    3b06:	1f 91       	pop	r17
    3b08:	08 95       	ret

00003b0a <setHoursMinutesLT(int, int)>:
// Will ignore attempts to set bad values and return false in that case.
// Returns true if all OK and the time has been set.
// Does not attempt to set seconds.
// Thread/interrupt safe, but do not call this from an ISR.
// Will persist time to survive reset as neceessary.
bool setHoursMinutesLT(int hours, int minutes)
    3b0a:	1f 93       	push	r17
    3b0c:	ac 01       	movw	r20, r24
  {
  if((hours < 0) || (hours > 23) || (minutes < 0) || (minutes > 59)) { return(false); } // Invalid time.
    3b0e:	88 31       	cpi	r24, 0x18	; 24
    3b10:	91 05       	cpc	r25, r1
    3b12:	10 f5       	brcc	.+68     	; 0x3b58 <setHoursMinutesLT(int, int)+0x4e>
    3b14:	77 fd       	sbrc	r23, 7
    3b16:	20 c0       	rjmp	.+64     	; 0x3b58 <setHoursMinutesLT(int, int)+0x4e>
    3b18:	6c 33       	cpi	r22, 0x3C	; 60
    3b1a:	71 05       	cpc	r23, r1
    3b1c:	ec f4       	brge	.+58     	; 0x3b58 <setHoursMinutesLT(int, int)+0x4e>
  const uint_least16_t computedMinutesSinceMidnightLT = (uint_least16_t) ((60 * hours) + minutes);
    3b1e:	8c e3       	ldi	r24, 0x3C	; 60
    3b20:	90 e0       	ldi	r25, 0x00	; 0
    3b22:	48 9f       	mul	r20, r24
    3b24:	90 01       	movw	r18, r0
    3b26:	49 9f       	mul	r20, r25
    3b28:	30 0d       	add	r19, r0
    3b2a:	58 9f       	mul	r21, r24
    3b2c:	30 0d       	add	r19, r0
    3b2e:	11 24       	eor	r1, r1
    3b30:	26 0f       	add	r18, r22
    3b32:	37 1f       	adc	r19, r23
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    3b34:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3b36:	f8 94       	cli
    {
    if(computedMinutesSinceMidnightLT != _minutesSinceMidnightLT)
    3b38:	80 91 fe 02 	lds	r24, 0x02FE
    3b3c:	90 91 ff 02 	lds	r25, 0x02FF
    3b40:	28 17       	cp	r18, r24
    3b42:	39 07       	cpc	r19, r25
    3b44:	31 f0       	breq	.+12     	; 0x3b52 <setHoursMinutesLT(int, int)+0x48>
      {
      // If time has changed then store it locally and persist it if need be.
      _minutesSinceMidnightLT = computedMinutesSinceMidnightLT;
    3b46:	30 93 ff 02 	sts	0x02FF, r19
    3b4a:	20 93 fe 02 	sts	0x02FE, r18
      persistRTC();
    3b4e:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <persistRTC()>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3b52:	1f bf       	out	0x3f, r17	; 63
    __asm__ volatile ("" ::: "memory");
    3b54:	81 e0       	ldi	r24, 0x01	; 1
    3b56:	01 c0       	rjmp	.+2      	; 0x3b5a <setHoursMinutesLT(int, int)+0x50>
      }
    }
  return(true); // Assume set and persisted OK.
    3b58:	80 e0       	ldi	r24, 0x00	; 0
  }
    3b5a:	1f 91       	pop	r17
    3b5c:	08 95       	ret

00003b5e <getSimpleScheduleOn(unsigned char)>:
// Will usually include a pre-warm time before the actual time set.
// Note that unprogrammed EEPROM value will result in invalid time, ie schedule not set.
//   * which  schedule number, counting from 0
uint_least16_t getSimpleScheduleOn(const uint8_t which)
  {
  if(which >= MAX_SIMPLE_SCHEDULES) { return(~0); } // Invalid schedule number.
    3b5e:	82 30       	cpi	r24, 0x02	; 2
    3b60:	d0 f4       	brcc	.+52     	; 0x3b96 <getSimpleScheduleOn(unsigned char)+0x38>
  uint8_t startMM;
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    3b62:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3b64:	f8 94       	cli
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    3b66:	f9 99       	sbic	0x1f, 1	; 31
    3b68:	fe cf       	rjmp	.-4      	; 0x3b66 <getSimpleScheduleOn(unsigned char)+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    3b6a:	90 e0       	ldi	r25, 0x00	; 0
    3b6c:	0c 96       	adiw	r24, 0x0c	; 12
    3b6e:	92 bd       	out	0x22, r25	; 34
    3b70:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    3b72:	f8 9a       	sbi	0x1f, 0	; 31
    3b74:	90 b5       	in	r25, 0x20	; 32
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3b76:	2f bf       	out	0x3f, r18	; 63
    { startMM = eeprom_read_byte((uint8_t*)(EE_START_SIMPLE_SCHEDULE0_ON + which)); }
  if(startMM > MAX_COMPRESSED_MINS_AFTER_MIDNIGHT) { return(~0); } // No schedule set.
    3b78:	90 3f       	cpi	r25, 0xF0	; 240
    3b7a:	68 f4       	brcc	.+26     	; 0x3b96 <getSimpleScheduleOn(unsigned char)+0x38>
  // Compute start time from stored shedule value.
  uint_least16_t startTime = SIMPLE_SCHEDULE_GRANULARITY_MINS * startMM;
    3b7c:	86 e0       	ldi	r24, 0x06	; 6
    3b7e:	98 9f       	mul	r25, r24
    3b80:	c0 01       	movw	r24, r0
    3b82:	11 24       	eor	r1, r1
  const uint8_t windBackM = PREWARM_MINS; // Wind back start time by about 25% of full interval.
  if(windBackM > startTime) { startTime += MINS_PER_DAY; } // Allow for wrap-around at midnight.
    3b84:	82 31       	cpi	r24, 0x12	; 18
    3b86:	91 05       	cpc	r25, r1
    3b88:	10 f4       	brcc	.+4      	; 0x3b8e <getSimpleScheduleOn(unsigned char)+0x30>
    3b8a:	80 56       	subi	r24, 0x60	; 96
    3b8c:	9a 4f       	sbci	r25, 0xFA	; 250
  startTime -= windBackM;
    3b8e:	9c 01       	movw	r18, r24
    3b90:	22 51       	subi	r18, 0x12	; 18
    3b92:	30 40       	sbci	r19, 0x00	; 0
    3b94:	02 c0       	rjmp	.+4      	; 0x3b9a <getSimpleScheduleOn(unsigned char)+0x3c>
  return(startTime);
    3b96:	2f ef       	ldi	r18, 0xFF	; 255
    3b98:	3f ef       	ldi	r19, 0xFF	; 255
  }
    3b9a:	c9 01       	movw	r24, r18
    3b9c:	08 95       	ret

00003b9e <clearSimpleSchedule(unsigned char)>:
  }

// Clear a simple schedule.
// There will be neither on nor off events from the selected simple schedule once this is called.
//   * which  schedule number, counting from 0
void clearSimpleSchedule(const uint8_t which)
    3b9e:	1f 93       	push	r17
  {
  if(which >= MAX_SIMPLE_SCHEDULES) { return; } // Invalid schedule number.
    3ba0:	82 30       	cpi	r24, 0x02	; 2
    3ba2:	38 f4       	brcc	.+14     	; 0x3bb2 <clearSimpleSchedule(unsigned char)+0x14>
  // Clear the schedule back to 'unprogrammed' values, minimising wear.
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    3ba4:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3ba6:	f8 94       	cli
    { eeprom_smart_erase_byte((uint8_t*)(EE_START_SIMPLE_SCHEDULE0_ON + which)); }
    3ba8:	90 e0       	ldi	r25, 0x00	; 0
    3baa:	0c 96       	adiw	r24, 0x0c	; 12
    3bac:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <eeprom_smart_erase_byte(unsigned char*)>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3bb0:	1f bf       	out	0x3f, r17	; 63
  }
    3bb2:	1f 91       	pop	r17
    3bb4:	08 95       	ret

00003bb6 <setSimpleSchedule(unsigned int, unsigned char)>:
//   * startMinutesSinceMidnightLT  is start/on time in minutes after midnight [0,1439]
//   * which  schedule number, counting from 0
// Invalid parameters will be ignored and false returned,
// else this will return true and isSimpleScheduleSet() will return true after this.
// NOTE: over-use of this routine can prematurely wear out the EEPROM.
bool setSimpleSchedule(const uint_least16_t startMinutesSinceMidnightLT, const uint8_t which)
    3bb6:	1f 93       	push	r17
  {
  if(which >= MAX_SIMPLE_SCHEDULES) { return(false); } // Invalid schedule number.
    3bb8:	62 30       	cpi	r22, 0x02	; 2
    3bba:	98 f4       	brcc	.+38     	; 0x3be2 <setSimpleSchedule(unsigned int, unsigned char)+0x2c>
  if(startMinutesSinceMidnightLT >= MINS_PER_DAY) { return(false); } // Invalid time.
    3bbc:	25 e0       	ldi	r18, 0x05	; 5
    3bbe:	80 3a       	cpi	r24, 0xA0	; 160
    3bc0:	92 07       	cpc	r25, r18
    3bc2:	78 f4       	brcc	.+30     	; 0x3be2 <setSimpleSchedule(unsigned int, unsigned char)+0x2c>

  // Set the schedule, minimising wear.
  const uint8_t startMM = startMinutesSinceMidnightLT / SIMPLE_SCHEDULE_GRANULARITY_MINS; // Round down...
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    3bc4:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3bc6:	f8 94       	cli
    { eeprom_smart_update_byte((uint8_t*)(EE_START_SIMPLE_SCHEDULE0_ON + which), startMM); }
    3bc8:	26 2f       	mov	r18, r22
    3bca:	30 e0       	ldi	r19, 0x00	; 0
    3bcc:	66 e0       	ldi	r22, 0x06	; 6
    3bce:	70 e0       	ldi	r23, 0x00	; 0
    3bd0:	0e 94 2e 35 	call	0x6a5c	; 0x6a5c <__udivmodhi4>
    3bd4:	c9 01       	movw	r24, r18
    3bd6:	0c 96       	adiw	r24, 0x0c	; 12
    3bd8:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <eeprom_smart_update_byte(unsigned char*, unsigned char)>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3bdc:	1f bf       	out	0x3f, r17	; 63
    __asm__ volatile ("" ::: "memory");
    3bde:	81 e0       	ldi	r24, 0x01	; 1
    3be0:	01 c0       	rjmp	.+2      	; 0x3be4 <setSimpleSchedule(unsigned int, unsigned char)+0x2e>
  return(true); // Assume EEPROM programmed OK...
    3be2:	80 e0       	ldi	r24, 0x00	; 0
  }
    3be4:	1f 91       	pop	r17
    3be6:	08 95       	ret

00003be8 <getSimpleScheduleOff(unsigned char)>:
  }

// Get the simple/primary schedule off time, as minutes after midnight [0,1439]; invalid (eg ~0) if none set.
// This is based on specifed start time and some element of the current eco/comfort bias.
//   * which  schedule number, counting from 0
uint_least16_t getSimpleScheduleOff(const uint8_t which)
    3be8:	cf 93       	push	r28
    3bea:	df 93       	push	r29
  {
  const uint_least16_t startMins = getSimpleScheduleOn(which);
    3bec:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <getSimpleScheduleOn(unsigned char)>
    3bf0:	ec 01       	movw	r28, r24
  if(startMins == (uint_least16_t)~0) { return(~0); }
    3bf2:	8f ef       	ldi	r24, 0xFF	; 255
    3bf4:	cf 3f       	cpi	r28, 0xFF	; 255
    3bf6:	d8 07       	cpc	r29, r24
    3bf8:	19 f4       	brne	.+6      	; 0x3c00 <getSimpleScheduleOff(unsigned char)+0x18>
    3bfa:	2f ef       	ldi	r18, 0xFF	; 255
    3bfc:	3f ef       	ldi	r19, 0xFF	; 255
    3bfe:	16 c0       	rjmp	.+44     	; 0x3c2c <getSimpleScheduleOff(unsigned char)+0x44>
  {
//  // Simple and fast binary choice.
//  return(hasEcoBias() ? LEARNED_ON_PERIOD_M : LEARNED_ON_PERIOD_COMFORT_M);

  // Three-way split based on current WARM target temperature.
  const uint8_t wt = getWARMTargetC();
    3c00:	0e 94 ab 03 	call	0x756	; 0x756 <getWARMTargetC()>
  if(isEcoTemperature(wt)) { return(LEARNED_ON_PERIOD_M); }
    3c04:	88 33       	cpi	r24, 0x38	; 56
    3c06:	10 f4       	brcc	.+4      	; 0x3c0c <getSimpleScheduleOff(unsigned char)+0x24>
    3c08:	8c e3       	ldi	r24, 0x3C	; 60
    3c0a:	05 c0       	rjmp	.+10     	; 0x3c16 <getSimpleScheduleOff(unsigned char)+0x2e>
  else if(isComfortTemperature(wt)) { return(LEARNED_ON_PERIOD_COMFORT_M); }
    3c0c:	81 34       	cpi	r24, 0x41	; 65
    3c0e:	10 f4       	brcc	.+4      	; 0x3c14 <getSimpleScheduleOff(unsigned char)+0x2c>
    3c10:	8a e5       	ldi	r24, 0x5A	; 90
    3c12:	01 c0       	rjmp	.+2      	; 0x3c16 <getSimpleScheduleOff(unsigned char)+0x2e>
    3c14:	88 e7       	ldi	r24, 0x78	; 120
uint_least16_t getSimpleScheduleOff(const uint8_t which)
  {
  const uint_least16_t startMins = getSimpleScheduleOn(which);
  if(startMins == (uint_least16_t)~0) { return(~0); }
  // Compute end from start, allowing for wrap-around at midnight.
  uint_least16_t endTime = startMins + PREWARM_MINS + onTime();
    3c16:	9e 01       	movw	r18, r28
    3c18:	2e 5e       	subi	r18, 0xEE	; 238
    3c1a:	3f 4f       	sbci	r19, 0xFF	; 255
    3c1c:	28 0f       	add	r18, r24
    3c1e:	31 1d       	adc	r19, r1
  if(endTime >= MINS_PER_DAY) { endTime -= MINS_PER_DAY; } // Allow for wrap-around at midnight.
    3c20:	85 e0       	ldi	r24, 0x05	; 5
    3c22:	20 3a       	cpi	r18, 0xA0	; 160
    3c24:	38 07       	cpc	r19, r24
    3c26:	10 f0       	brcs	.+4      	; 0x3c2c <getSimpleScheduleOff(unsigned char)+0x44>
    3c28:	20 5a       	subi	r18, 0xA0	; 160
    3c2a:	35 40       	sbci	r19, 0x05	; 5
  return(endTime);
  }
    3c2c:	c9 01       	movw	r24, r18
    3c2e:	df 91       	pop	r29
    3c30:	cf 91       	pop	r28
    3c32:	08 95       	ret

00003c34 <isAnyScheduleOnWARMSoon()>:
// True iff any schedule is due 'on'/'WARM' soon even when schedules overlap.
// May be relatively slow/expensive.
// Can be used to allow room to be brought up to at least a set-back temperature
// if very cold when a WARM period is due soon (to help ensure that WARM target is met on time).
// In unit-test override mode is true for soon, false for now/off.
bool isAnyScheduleOnWARMSoon()
    3c34:	0f 93       	push	r16
    3c36:	1f 93       	push	r17
    3c38:	cf 93       	push	r28
    3c3a:	df 93       	push	r29
    case _soUT_soon: return(true);
    case _soUT_now: return(false);
    }
#endif

  const uint_least16_t mm0 = getMinutesSinceMidnightLT() + PREPREWARM_MINS; // Look forward...
    3c3c:	0e 94 b5 1c 	call	0x396a	; 0x396a <getMinutesSinceMidnightLT()>
    3c40:	9c 01       	movw	r18, r24
    3c42:	2e 5e       	subi	r18, 0xEE	; 238
    3c44:	3f 4f       	sbci	r19, 0xFF	; 255
  const uint_least16_t mm = (mm0 >= MINS_PER_DAY) ? (mm0 - MINS_PER_DAY) : mm0;
    3c46:	45 e0       	ldi	r20, 0x05	; 5
    3c48:	20 3a       	cpi	r18, 0xA0	; 160
    3c4a:	34 07       	cpc	r19, r20
    3c4c:	10 f4       	brcc	.+4      	; 0x3c52 <isAnyScheduleOnWARMSoon()+0x1e>
    3c4e:	89 01       	movw	r16, r18
    3c50:	03 c0       	rjmp	.+6      	; 0x3c58 <isAnyScheduleOnWARMSoon()+0x24>
    3c52:	8c 01       	movw	r16, r24
    3c54:	0e 58       	subi	r16, 0x8E	; 142
    3c56:	15 40       	sbci	r17, 0x05	; 5

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    3c58:	80 e0       	ldi	r24, 0x00	; 0
    3c5a:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <getSimpleScheduleOn(unsigned char)>
    3c5e:	ec 01       	movw	r28, r24
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    3c60:	08 17       	cp	r16, r24
    3c62:	19 07       	cpc	r17, r25
    3c64:	68 f0       	brcs	.+26     	; 0x3c80 <isAnyScheduleOnWARMSoon()+0x4c>
    uint_least16_t e = getSimpleScheduleOff(which);
    3c66:	80 e0       	ldi	r24, 0x00	; 0
    3c68:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <getSimpleScheduleOff(unsigned char)>
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    3c6c:	8c 17       	cp	r24, r28
    3c6e:	9d 07       	cpc	r25, r29
    3c70:	20 f0       	brcs	.+8      	; 0x3c7a <isAnyScheduleOnWARMSoon()+0x46>
    if(mm < e) { return(true); }
    3c72:	08 17       	cp	r16, r24
    3c74:	19 07       	cpc	r17, r25
    3c76:	20 f4       	brcc	.+8      	; 0x3c80 <isAnyScheduleOnWARMSoon()+0x4c>
    3c78:	17 c0       	rjmp	.+46     	; 0x3ca8 <isAnyScheduleOnWARMSoon()+0x74>
  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    uint_least16_t e = getSimpleScheduleOff(which);
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    3c7a:	80 56       	subi	r24, 0x60	; 96
    3c7c:	9a 4f       	sbci	r25, 0xFA	; 250
    3c7e:	f9 cf       	rjmp	.-14     	; 0x3c72 <isAnyScheduleOnWARMSoon()+0x3e>
  const uint_least16_t mm0 = getMinutesSinceMidnightLT() + PREPREWARM_MINS; // Look forward...
  const uint_least16_t mm = (mm0 >= MINS_PER_DAY) ? (mm0 - MINS_PER_DAY) : mm0;

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    3c80:	81 e0       	ldi	r24, 0x01	; 1
    3c82:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <getSimpleScheduleOn(unsigned char)>
    3c86:	ec 01       	movw	r28, r24
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    3c88:	08 17       	cp	r16, r24
    3c8a:	19 07       	cpc	r17, r25
    3c8c:	58 f0       	brcs	.+22     	; 0x3ca4 <isAnyScheduleOnWARMSoon()+0x70>
    uint_least16_t e = getSimpleScheduleOff(which);
    3c8e:	81 e0       	ldi	r24, 0x01	; 1
    3c90:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <getSimpleScheduleOff(unsigned char)>
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    3c94:	8c 17       	cp	r24, r28
    3c96:	9d 07       	cpc	r25, r29
    3c98:	10 f4       	brcc	.+4      	; 0x3c9e <isAnyScheduleOnWARMSoon()+0x6a>
    3c9a:	80 56       	subi	r24, 0x60	; 96
    3c9c:	9a 4f       	sbci	r25, 0xFA	; 250
    if(mm < e) { return(true); }
    3c9e:	08 17       	cp	r16, r24
    3ca0:	19 07       	cpc	r17, r25
    3ca2:	10 f0       	brcs	.+4      	; 0x3ca8 <isAnyScheduleOnWARMSoon()+0x74>
    3ca4:	80 e0       	ldi	r24, 0x00	; 0
    3ca6:	01 c0       	rjmp	.+2      	; 0x3caa <isAnyScheduleOnWARMSoon()+0x76>
#endif

  const uint_least16_t mm0 = getMinutesSinceMidnightLT() + PREPREWARM_MINS; // Look forward...
  const uint_least16_t mm = (mm0 >= MINS_PER_DAY) ? (mm0 - MINS_PER_DAY) : mm0;

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    3ca8:	81 e0       	ldi	r24, 0x01	; 1
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    if(mm < e) { return(true); }
    }

  return(false);
  }
    3caa:	df 91       	pop	r29
    3cac:	cf 91       	pop	r28
    3cae:	1f 91       	pop	r17
    3cb0:	0f 91       	pop	r16
    3cb2:	08 95       	ret

00003cb4 <isAnyScheduleOnWARMNow()>:
// True iff any schedule is currently 'on'/'WARM' even when schedules overlap.
// May be relatively slow/expensive.
// Can be used to suppress all 'off' activity except for the final one.
// Can be used to suppress set-backs during on times.
// In unit-test override mode is true for now, false for soon/off.
bool isAnyScheduleOnWARMNow()
    3cb4:	0f 93       	push	r16
    3cb6:	1f 93       	push	r17
    3cb8:	cf 93       	push	r28
    3cba:	df 93       	push	r29
    case _soUT_soon: return(false);
    case _soUT_now: return(true);
    }
#endif

  const uint_least16_t mm = getMinutesSinceMidnightLT();
    3cbc:	0e 94 b5 1c 	call	0x396a	; 0x396a <getMinutesSinceMidnightLT()>
    3cc0:	8c 01       	movw	r16, r24

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    3cc2:	80 e0       	ldi	r24, 0x00	; 0
    3cc4:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <getSimpleScheduleOn(unsigned char)>
    3cc8:	ec 01       	movw	r28, r24
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    3cca:	08 17       	cp	r16, r24
    3ccc:	19 07       	cpc	r17, r25
    3cce:	68 f0       	brcs	.+26     	; 0x3cea <isAnyScheduleOnWARMNow()+0x36>
    uint_least16_t e = getSimpleScheduleOff(which);
    3cd0:	80 e0       	ldi	r24, 0x00	; 0
    3cd2:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <getSimpleScheduleOff(unsigned char)>
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    3cd6:	8c 17       	cp	r24, r28
    3cd8:	9d 07       	cpc	r25, r29
    3cda:	20 f0       	brcs	.+8      	; 0x3ce4 <isAnyScheduleOnWARMNow()+0x30>
    if(mm < e) { return(true); }
    3cdc:	08 17       	cp	r16, r24
    3cde:	19 07       	cpc	r17, r25
    3ce0:	20 f4       	brcc	.+8      	; 0x3cea <isAnyScheduleOnWARMNow()+0x36>
    3ce2:	17 c0       	rjmp	.+46     	; 0x3d12 <isAnyScheduleOnWARMNow()+0x5e>
  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    uint_least16_t e = getSimpleScheduleOff(which);
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    3ce4:	80 56       	subi	r24, 0x60	; 96
    3ce6:	9a 4f       	sbci	r25, 0xFA	; 250
    3ce8:	f9 cf       	rjmp	.-14     	; 0x3cdc <isAnyScheduleOnWARMNow()+0x28>

  const uint_least16_t mm = getMinutesSinceMidnightLT();

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    3cea:	81 e0       	ldi	r24, 0x01	; 1
    3cec:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <getSimpleScheduleOn(unsigned char)>
    3cf0:	ec 01       	movw	r28, r24
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    3cf2:	08 17       	cp	r16, r24
    3cf4:	19 07       	cpc	r17, r25
    3cf6:	58 f0       	brcs	.+22     	; 0x3d0e <isAnyScheduleOnWARMNow()+0x5a>
    uint_least16_t e = getSimpleScheduleOff(which);
    3cf8:	81 e0       	ldi	r24, 0x01	; 1
    3cfa:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <getSimpleScheduleOff(unsigned char)>
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    3cfe:	8c 17       	cp	r24, r28
    3d00:	9d 07       	cpc	r25, r29
    3d02:	10 f4       	brcc	.+4      	; 0x3d08 <isAnyScheduleOnWARMNow()+0x54>
    3d04:	80 56       	subi	r24, 0x60	; 96
    3d06:	9a 4f       	sbci	r25, 0xFA	; 250
    if(mm < e) { return(true); }
    3d08:	08 17       	cp	r16, r24
    3d0a:	19 07       	cpc	r17, r25
    3d0c:	10 f0       	brcs	.+4      	; 0x3d12 <isAnyScheduleOnWARMNow()+0x5e>
    3d0e:	80 e0       	ldi	r24, 0x00	; 0
    3d10:	01 c0       	rjmp	.+2      	; 0x3d14 <isAnyScheduleOnWARMNow()+0x60>
    }
#endif

  const uint_least16_t mm = getMinutesSinceMidnightLT();

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    3d12:	81 e0       	ldi	r24, 0x01	; 1
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    if(mm < e) { return(true); }
    }

  return(false);
  }
    3d14:	df 91       	pop	r29
    3d16:	cf 91       	pop	r28
    3d18:	1f 91       	pop	r17
    3d1a:	0f 91       	pop	r16
    3d1c:	08 95       	ret

00003d1e <getStatsTXLevel()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    3d1e:	f9 99       	sbic	0x1f, 1	; 31
    3d20:	fe cf       	rjmp	.-4      	; 0x3d1e <getStatsTXLevel()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    3d22:	8c e1       	ldi	r24, 0x1C	; 28
    3d24:	90 e0       	ldi	r25, 0x00	; 0
    3d26:	92 bd       	out	0x22, r25	; 34
    3d28:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    3d2a:	f8 9a       	sbi	0x1f, 0	; 31
    3d2c:	80 b5       	in	r24, 0x20	; 32


// Get the current stats transmission level (for data outbound from this node).
// May not exactly match enumerated levels; use inequalities.
// Not thread-/ISR- safe.
stats_TX_level getStatsTXLevel() { return((stats_TX_level)eeprom_read_byte((uint8_t *)EE_START_STATS_TX_ENABLE)); }
    3d2e:	90 e0       	ldi	r25, 0x00	; 0
    3d30:	08 95       	ret

00003d32 <addEntropyToPool(unsigned char, unsigned char)>:
//   * estBits estimated number of truely securely random bits in range [0,8].
// Not thread-/ISR- safe.
void addEntropyToPool(uint8_t data, uint8_t estBits)
  {
  // TODO: no real entropy pool yet.
  seedRNG8(data, cycleCountCPU(), getSubCycleTime());
    3d32:	66 b5       	in	r22, 0x26	; 38
    3d34:	40 91 b2 00 	lds	r20, 0x00B2
    3d38:	0e 94 22 1b 	call	0x3644	; 0x3644 <seedRNG8(unsigned char, unsigned char, unsigned char)>
  }
    3d3c:	08 95       	ret

00003d3e <getSecureRandomByte(bool)>:
// Likely to be slow and may force some peripheral I/O.
// Runtime details are likely to be intimately dependent on hardware implementation.
// Not thread-/ISR- safe.
//  * whiten  if true whiten the output a little more, but little or no extra entropy is added;
//      if false then it is easier to test if the underlying source provides new entropy reliably
uint8_t getSecureRandomByte(const bool whiten)
    3d3e:	ff 92       	push	r15
    3d40:	0f 93       	push	r16
    3d42:	1f 93       	push	r17
    3d44:	df 93       	push	r29
    3d46:	cf 93       	push	r28
    3d48:	00 d0       	rcall	.+0      	; 0x3d4a <getSecureRandomByte(bool)+0xc>
    3d4a:	cd b7       	in	r28, 0x3d	; 61
    3d4c:	de b7       	in	r29, 0x3e	; 62
    3d4e:	f8 2e       	mov	r15, r24
  {
#ifdef WAKEUP_32768HZ_XTAL
  // Use various real noise sources and whiten with PRNG and other counters.
  // Mix the bits also to help ensure good distribution.
  uint8_t w1 = clockJitterEntropyByte(); // Real noise.
    3d50:	0e 94 93 18 	call	0x3126	; 0x3126 <clockJitterEntropyByte()>
  w1 ^= (w1 << 2); // Mix.
  w1 ^= clockJitterWDT();
  w1 ^= (w1 >> 1); // Mix.
  w1 ^= clockJitterWDT();
#endif
  const uint8_t v1 = w1;
    3d54:	89 83       	std	Y+1, r24	; 0x01
  w1 ^= (w1 << 3); // Mix.
    3d56:	08 2f       	mov	r16, r24
    3d58:	00 0f       	add	r16, r16
    3d5a:	00 0f       	add	r16, r16
    3d5c:	00 0f       	add	r16, r16
    3d5e:	08 27       	eor	r16, r24
  w1 ^= noisyADCRead(true); // Some more real noise, possibly ~1 bit.
    3d60:	81 e0       	ldi	r24, 0x01	; 1
    3d62:	0e 94 b2 19 	call	0x3364	; 0x3364 <noisyADCRead(bool)>
    3d66:	08 27       	eor	r16, r24
  w1 ^= (w1 << 4); // Mix.
    3d68:	10 2f       	mov	r17, r16
    3d6a:	12 95       	swap	r17
    3d6c:	10 7f       	andi	r17, 0xF0	; 240
    3d6e:	10 27       	eor	r17, r16
  const uint8_t v2 = w1;
    3d70:	1a 83       	std	Y+2, r17	; 0x02
  w1 ^= clockJitterWDT(); // Possibly ~1 bit more of entropy.
    3d72:	0e 94 78 18 	call	0x30f0	; 0x30f0 <clockJitterWDT()>
    3d76:	18 27       	eor	r17, r24
  w1 ^= (w1 >> 4); // Mix.
    3d78:	01 2f       	mov	r16, r17
    3d7a:	02 95       	swap	r16
    3d7c:	0f 70       	andi	r16, 0x0F	; 15
    3d7e:	01 27       	eor	r16, r17
  if(whiten)
    3d80:	ff 20       	and	r15, r15
    3d82:	f1 f0       	breq	.+60     	; 0x3dc0 <getSecureRandomByte(bool)+0x82>
    {
    w1 ^= randRNG8(); // Whiten.
    3d84:	0e 94 3d 1b 	call	0x367a	; 0x367a <randRNG8()>
    3d88:	80 27       	eor	r24, r16
    w1 ^= (w1 << 3); // Mix.
    3d8a:	08 2f       	mov	r16, r24
    3d8c:	00 0f       	add	r16, r16
    3d8e:	00 0f       	add	r16, r16
    3d90:	00 0f       	add	r16, r16
    3d92:	08 27       	eor	r16, r24
    w1 ^= _crc_ibutton_update(cycleCountCPU() ^ (uint8_t)(intptr_t)&v1, ++count8 - (uint8_t)(intptr_t)&v2); // Whiten.
    3d94:	26 b5       	in	r18, 0x26	; 38
    3d96:	30 91 02 03 	lds	r19, 0x0302
    3d9a:	3f 5f       	subi	r19, 0xFF	; 255
    3d9c:	30 93 02 03 	sts	0x0302, r19
    3da0:	ce 01       	movw	r24, r28
    3da2:	01 96       	adiw	r24, 0x01	; 1
    3da4:	28 27       	eor	r18, r24
    3da6:	ce 01       	movw	r24, r28
    3da8:	02 96       	adiw	r24, 0x02	; 2
    3daa:	38 1b       	sub	r19, r24
    3dac:	23 27       	eor	r18, r19
    3dae:	88 e0       	ldi	r24, 0x08	; 8
    3db0:	9c e8       	ldi	r25, 0x8C	; 140
    3db2:	20 fb       	bst	r18, 0
    3db4:	26 95       	lsr	r18
    3db6:	0e f4       	brtc	.+2      	; 0x3dba <getSecureRandomByte(bool)+0x7c>
    3db8:	29 27       	eor	r18, r25
    3dba:	8a 95       	dec	r24
    3dbc:	d1 f7       	brne	.-12     	; 0x3db2 <getSecureRandomByte(bool)+0x74>
    3dbe:	02 27       	eor	r16, r18
    3dc0:	89 81       	ldd	r24, Y+1	; 0x01
    3dc2:	9a 81       	ldd	r25, Y+2	; 0x02
    3dc4:	89 27       	eor	r24, r25
    3dc6:	98 e0       	ldi	r25, 0x08	; 8
    3dc8:	2c e8       	ldi	r18, 0x8C	; 140
    3dca:	80 fb       	bst	r24, 0
    3dcc:	86 95       	lsr	r24
    3dce:	0e f4       	brtc	.+2      	; 0x3dd2 <getSecureRandomByte(bool)+0x94>
    3dd0:	82 27       	eor	r24, r18
    3dd2:	9a 95       	dec	r25
    3dd4:	d1 f7       	brne	.-12     	; 0x3dca <getSecureRandomByte(bool)+0x8c>
    }
  w1 ^= _crc_ibutton_update(v1, v2); // Complex hash.
  return(w1);
  }
    3dd6:	80 27       	eor	r24, r16
    3dd8:	0f 90       	pop	r0
    3dda:	0f 90       	pop	r0
    3ddc:	cf 91       	pop	r28
    3dde:	df 91       	pop	r29
    3de0:	1f 91       	pop	r17
    3de2:	0f 91       	pop	r16
    3de4:	ff 90       	pop	r15
    3de6:	08 95       	ret

00003de8 <serialPrintAndFlush(unsigned int, int)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) number to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(const unsigned u, const int fmt)
    3de8:	df 92       	push	r13
    3dea:	ef 92       	push	r14
    3dec:	ff 92       	push	r15
    3dee:	0f 93       	push	r16
    3df0:	1f 93       	push	r17
    3df2:	8c 01       	movw	r16, r24
    3df4:	7b 01       	movw	r14, r22
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    3df6:	0e 94 9d 1a 	call	0x353a	; 0x353a <powerUpSerialIfDisabled()>
    3dfa:	d8 2e       	mov	r13, r24
  // Send the character.
  Serial.print(u, fmt);
    3dfc:	85 eb       	ldi	r24, 0xB5	; 181
    3dfe:	94 e0       	ldi	r25, 0x04	; 4
    3e00:	b8 01       	movw	r22, r16
    3e02:	a7 01       	movw	r20, r14
    3e04:	0e 94 0a 34 	call	0x6814	; 0x6814 <Print::print(unsigned int, int)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    3e08:	0e 94 88 1a 	call	0x3510	; 0x3510 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    3e0c:	dd 20       	and	r13, r13
    3e0e:	11 f0       	breq	.+4      	; 0x3e14 <serialPrintAndFlush(unsigned int, int)+0x2c>
    3e10:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <powerDownSerial()>
  }
    3e14:	1f 91       	pop	r17
    3e16:	0f 91       	pop	r16
    3e18:	ff 90       	pop	r15
    3e1a:	ef 90       	pop	r14
    3e1c:	df 90       	pop	r13
    3e1e:	08 95       	ret

00003e20 <serialPrintAndFlush(char)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) character to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(const char c)
    3e20:	0f 93       	push	r16
    3e22:	1f 93       	push	r17
    3e24:	18 2f       	mov	r17, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    3e26:	0e 94 9d 1a 	call	0x353a	; 0x353a <powerUpSerialIfDisabled()>
    3e2a:	08 2f       	mov	r16, r24
  // Send the character.
  Serial.print(c);
    3e2c:	85 eb       	ldi	r24, 0xB5	; 181
    3e2e:	94 e0       	ldi	r25, 0x04	; 4
    3e30:	61 2f       	mov	r22, r17
    3e32:	0e 94 3f 33 	call	0x667e	; 0x667e <Print::print(char)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    3e36:	0e 94 88 1a 	call	0x3510	; 0x3510 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    3e3a:	00 23       	and	r16, r16
    3e3c:	11 f0       	breq	.+4      	; 0x3e42 <serialPrintAndFlush(char)+0x22>
    3e3e:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <powerDownSerial()>
  }
    3e42:	1f 91       	pop	r17
    3e44:	0f 91       	pop	r16
    3e46:	08 95       	ret

00003e48 <serialPrintlnAndFlush()>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write line-end to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintlnAndFlush()
    3e48:	1f 93       	push	r17
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    3e4a:	0e 94 9d 1a 	call	0x353a	; 0x353a <powerUpSerialIfDisabled()>
    3e4e:	18 2f       	mov	r17, r24
  // Send the text.
  Serial.println();
    3e50:	85 eb       	ldi	r24, 0xB5	; 181
    3e52:	94 e0       	ldi	r25, 0x04	; 4
    3e54:	0e 94 47 33 	call	0x668e	; 0x668e <Print::println()>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    3e58:	0e 94 88 1a 	call	0x3510	; 0x3510 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    3e5c:	11 23       	and	r17, r17
    3e5e:	11 f0       	breq	.+4      	; 0x3e64 <serialPrintlnAndFlush()+0x1c>
    3e60:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <powerDownSerial()>
  }
    3e64:	1f 91       	pop	r17
    3e66:	08 95       	ret

00003e68 <serialPrintAndFlush(int, int)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) number to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(const int i, const int fmt)
    3e68:	df 92       	push	r13
    3e6a:	ef 92       	push	r14
    3e6c:	ff 92       	push	r15
    3e6e:	0f 93       	push	r16
    3e70:	1f 93       	push	r17
    3e72:	8c 01       	movw	r16, r24
    3e74:	7b 01       	movw	r14, r22
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    3e76:	0e 94 9d 1a 	call	0x353a	; 0x353a <powerUpSerialIfDisabled()>
    3e7a:	d8 2e       	mov	r13, r24
  // Send the character.
  Serial.print(i, fmt);
    3e7c:	85 eb       	ldi	r24, 0xB5	; 181
    3e7e:	94 e0       	ldi	r25, 0x04	; 4
    3e80:	b8 01       	movw	r22, r16
    3e82:	a7 01       	movw	r20, r14
    3e84:	0e 94 6d 34 	call	0x68da	; 0x68da <Print::print(int, int)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    3e88:	0e 94 88 1a 	call	0x3510	; 0x3510 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    3e8c:	dd 20       	and	r13, r13
    3e8e:	11 f0       	breq	.+4      	; 0x3e94 <serialPrintAndFlush(int, int)+0x2c>
    3e90:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <powerDownSerial()>
  }
    3e94:	1f 91       	pop	r17
    3e96:	0f 91       	pop	r16
    3e98:	ff 90       	pop	r15
    3e9a:	ef 90       	pop	r14
    3e9c:	df 90       	pop	r13
    3e9e:	08 95       	ret

00003ea0 <serialPrintAndFlush(char const*)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (read-only) string to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(const char * const text)
    3ea0:	ff 92       	push	r15
    3ea2:	0f 93       	push	r16
    3ea4:	1f 93       	push	r17
    3ea6:	8c 01       	movw	r16, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    3ea8:	0e 94 9d 1a 	call	0x353a	; 0x353a <powerUpSerialIfDisabled()>
    3eac:	f8 2e       	mov	r15, r24
  // Send the text.
  Serial.print(text);
    3eae:	85 eb       	ldi	r24, 0xB5	; 181
    3eb0:	94 e0       	ldi	r25, 0x04	; 4
    3eb2:	b8 01       	movw	r22, r16
    3eb4:	0e 94 80 34 	call	0x6900	; 0x6900 <Print::print(char const*)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    3eb8:	0e 94 88 1a 	call	0x3510	; 0x3510 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    3ebc:	ff 20       	and	r15, r15
    3ebe:	11 f0       	breq	.+4      	; 0x3ec4 <serialPrintAndFlush(char const*)+0x24>
    3ec0:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <powerDownSerial()>
  }
    3ec4:	1f 91       	pop	r17
    3ec6:	0f 91       	pop	r16
    3ec8:	ff 90       	pop	r15
    3eca:	08 95       	ret

00003ecc <serialPrintAndFlush(__FlashStringHelper const*)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) string to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(__FlashStringHelper const * const text)
    3ecc:	ff 92       	push	r15
    3ece:	0f 93       	push	r16
    3ed0:	1f 93       	push	r17
    3ed2:	8c 01       	movw	r16, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    3ed4:	0e 94 9d 1a 	call	0x353a	; 0x353a <powerUpSerialIfDisabled()>
    3ed8:	f8 2e       	mov	r15, r24
  // Send the text.
  Serial.print(text);
    3eda:	85 eb       	ldi	r24, 0xB5	; 181
    3edc:	94 e0       	ldi	r25, 0x04	; 4
    3ede:	b8 01       	movw	r22, r16
    3ee0:	0e 94 1c 33 	call	0x6638	; 0x6638 <Print::print(__FlashStringHelper const*)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    3ee4:	0e 94 88 1a 	call	0x3510	; 0x3510 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    3ee8:	ff 20       	and	r15, r15
    3eea:	11 f0       	breq	.+4      	; 0x3ef0 <serialPrintAndFlush(__FlashStringHelper const*)+0x24>
    3eec:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <powerDownSerial()>
  }
    3ef0:	1f 91       	pop	r17
    3ef2:	0f 91       	pop	r16
    3ef4:	ff 90       	pop	r15
    3ef6:	08 95       	ret

00003ef8 <serialPrintlnAndFlush(__FlashStringHelper const*)>:
// Flush to use for all serialPrintXXX() and DEBUG_PRINTXXX routines.
#define _flush() flushSerialSCTSensitive()

// Write a single (Flash-resident) string to serial followed by line-end and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintlnAndFlush(__FlashStringHelper const * const line)
    3ef8:	ff 92       	push	r15
    3efa:	0f 93       	push	r16
    3efc:	1f 93       	push	r17
    3efe:	8c 01       	movw	r16, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    3f00:	0e 94 9d 1a 	call	0x353a	; 0x353a <powerUpSerialIfDisabled()>
    3f04:	f8 2e       	mov	r15, r24
  // Send the line of text followed by line end.
  Serial.println(line);
    3f06:	85 eb       	ldi	r24, 0xB5	; 181
    3f08:	94 e0       	ldi	r25, 0x04	; 4
    3f0a:	b8 01       	movw	r22, r16
    3f0c:	0e 94 67 33 	call	0x66ce	; 0x66ce <Print::println(__FlashStringHelper const*)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    3f10:	0e 94 88 1a 	call	0x3510	; 0x3510 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    3f14:	ff 20       	and	r15, r15
    3f16:	11 f0       	breq	.+4      	; 0x3f1c <serialPrintlnAndFlush(__FlashStringHelper const*)+0x24>
    3f18:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <powerDownSerial()>
  }
    3f1c:	1f 91       	pop	r17
    3f1e:	0f 91       	pop	r16
    3f20:	ff 90       	pop	r15
    3f22:	08 95       	ret

00003f24 <resetCLIActiveTimer()>:
#define CLI_DEFAULT_TIMEOUT_M 2
static volatile uint8_t CLITimeoutM = CLI_DEFAULT_TIMEOUT_M;

// Reset CLI active timer to the full whack before it goes inactive again (ie makes CLI active for a while).
// Thread-safe.
void resetCLIActiveTimer() { CLITimeoutM = CLI_DEFAULT_TIMEOUT_M; }
    3f24:	82 e0       	ldi	r24, 0x02	; 2
    3f26:	80 93 35 01 	sts	0x0135, r24
    3f2a:	08 95       	ret

00003f2c <isCLIActive()>:

// Returns true if the CLI is active, at least intermittently.
// Thread-safe.
bool isCLIActive() { return(0 != CLITimeoutM); }
    3f2c:	80 91 35 01 	lds	r24, 0x0135
    3f30:	81 11       	cpse	r24, r1
    3f32:	81 e0       	ldi	r24, 0x01	; 1
    3f34:	08 95       	ret

00003f36 <veryRecentUIControlUse()>:
  }

// True if a manual UI control has been very recently (seconds to minutes ago) operated.
// The user may still be interacting with the control and the UI etc should probably be extra responsive.
// Thread-safe.
bool veryRecentUIControlUse() { return(uiTimeoutM >= (UI_DEFAULT_RECENT_USE_TIMEOUT_M - UI_DEFAULT_VERY_RECENT_USE_TIMEOUT_M)); }
    3f36:	80 91 42 03 	lds	r24, 0x0342
    3f3a:	90 e0       	ldi	r25, 0x00	; 0
    3f3c:	8d 31       	cpi	r24, 0x1D	; 29
    3f3e:	08 f0       	brcs	.+2      	; 0x3f42 <veryRecentUIControlUse()+0xc>
    3f40:	91 e0       	ldi	r25, 0x01	; 1
    3f42:	89 2f       	mov	r24, r25
    3f44:	08 95       	ret

00003f46 <recentUIControlUse()>:

// True if a manual UI control has been recently (tens of minutes ago) operated.
// If true then local manual settings should 'win' in any conflict with programmed or remote ones.
// For example, remote requests to override settings may be ignored while this is true.
// Thread-safe....
bool recentUIControlUse() { return(0 != uiTimeoutM); }
    3f46:	80 91 42 03 	lds	r24, 0x0342
    3f4a:	81 11       	cpse	r24, r1
    3f4c:	81 e0       	ldi	r24, 0x01	; 1
    3f4e:	08 95       	ret

00003f50 <Serial_print_space()>:
    }
  }


// Prints a single space to Serial (which must be up and running).
static void Serial_print_space() { Serial.print(' '); }
    3f50:	85 eb       	ldi	r24, 0xB5	; 181
    3f52:	94 e0       	ldi	r25, 0x04	; 4
    3f54:	60 e2       	ldi	r22, 0x20	; 32
    3f56:	0e 94 3f 33 	call	0x667e	; 0x667e <Print::print(char)>
    3f5a:	08 95       	ret

00003f5c <InvalidIgnored()>:
  Serial.println();
  }

// Prints warning to serial (that must be up and running) that invalid (CLI) input has been ignored.
// Probably should not be inlined, to avoid creating duplicate strings in Flash.
static void InvalidIgnored() { Serial.println(F("Invalid, ignored.")); }
    3f5c:	85 eb       	ldi	r24, 0xB5	; 181
    3f5e:	94 e0       	ldi	r25, 0x04	; 4
    3f60:	61 e4       	ldi	r22, 0x41	; 65
    3f62:	73 e0       	ldi	r23, 0x03	; 3
    3f64:	0e 94 67 33 	call	0x66ce	; 0x66ce <Print::println(__FlashStringHelper const*)>
    3f68:	08 95       	ret

00003f6a <printCLILine(unsigned char, char, __FlashStringHelper const*)>:
  for(int8_t padding = SYNTAX_COL_WIDTH - strlen_P((const char *)syntax); --padding >= 0; ) { Serial_print_space(); }
  Serial.println(description);
  }
// Efficiently print a single line given a single-char syntax element and the description, both non-null.
// NOTE: will skip the description if getting close to the end of the time deadline to avoid overrun.
static void printCLILine(const uint8_t deadline, const char syntax, __FlashStringHelper const *description)
    3f6a:	1f 93       	push	r17
    3f6c:	cf 93       	push	r28
    3f6e:	df 93       	push	r29
    3f70:	18 2f       	mov	r17, r24
    3f72:	ea 01       	movw	r28, r20
  {
  Serial.print(syntax);
    3f74:	85 eb       	ldi	r24, 0xB5	; 181
    3f76:	94 e0       	ldi	r25, 0x04	; 4
    3f78:	0e 94 3f 33 	call	0x667e	; 0x667e <Print::print(char)>
  flushSerialProductive(); // Ensure all pending output is flushed before sampling current position in minor cycle.
    3f7c:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <flushSerialProductive()>
  if(getSubCycleTime() >= deadline) { Serial.println(); return; }
    3f80:	80 91 b2 00 	lds	r24, 0x00B2
    3f84:	81 17       	cp	r24, r17
    3f86:	10 f4       	brcc	.+4      	; 0x3f8c <printCLILine(unsigned char, char, __FlashStringHelper const*)+0x22>
    3f88:	19 e0       	ldi	r17, 0x09	; 9
    3f8a:	07 c0       	rjmp	.+14     	; 0x3f9a <printCLILine(unsigned char, char, __FlashStringHelper const*)+0x30>
    3f8c:	85 eb       	ldi	r24, 0xB5	; 181
    3f8e:	94 e0       	ldi	r25, 0x04	; 4
    3f90:	0e 94 47 33 	call	0x668e	; 0x668e <Print::println()>
    3f94:	09 c0       	rjmp	.+18     	; 0x3fa8 <printCLILine(unsigned char, char, __FlashStringHelper const*)+0x3e>
  for(int8_t padding = SYNTAX_COL_WIDTH - 1; --padding >= 0; ) { Serial_print_space(); }
    3f96:	0e 94 a8 1f 	call	0x3f50	; 0x3f50 <Serial_print_space()>
    3f9a:	11 50       	subi	r17, 0x01	; 1
    3f9c:	e0 f7       	brcc	.-8      	; 0x3f96 <printCLILine(unsigned char, char, __FlashStringHelper const*)+0x2c>
  Serial.println(description);
    3f9e:	85 eb       	ldi	r24, 0xB5	; 181
    3fa0:	94 e0       	ldi	r25, 0x04	; 4
    3fa2:	be 01       	movw	r22, r28
    3fa4:	0e 94 67 33 	call	0x66ce	; 0x66ce <Print::println(__FlashStringHelper const*)>
  }
    3fa8:	df 91       	pop	r29
    3faa:	cf 91       	pop	r28
    3fac:	1f 91       	pop	r17
    3fae:	08 95       	ret

00003fb0 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)>:
#define CLI_PRINT_OH_SCT ((uint8_t)(GSCT_MAX/4))
// Deadline in minor cycle by which to stop printing description.
#define STOP_PRINTING_DESCRIPTION_AT ((uint8_t)(GSCT_MAX-CLI_PRINT_OH_SCT))
// Efficiently print a single line given the syntax element and the description, both non-null.
// NOTE: will skip the description if getting close to the end of the time deadline to avoid overrun.
static void printCLILine(const uint8_t deadline, __FlashStringHelper const *syntax, __FlashStringHelper const *description)
    3fb0:	ef 92       	push	r14
    3fb2:	ff 92       	push	r15
    3fb4:	1f 93       	push	r17
    3fb6:	cf 93       	push	r28
    3fb8:	df 93       	push	r29
    3fba:	18 2f       	mov	r17, r24
    3fbc:	eb 01       	movw	r28, r22
    3fbe:	7a 01       	movw	r14, r20
  {
  Serial.print(syntax);
    3fc0:	85 eb       	ldi	r24, 0xB5	; 181
    3fc2:	94 e0       	ldi	r25, 0x04	; 4
    3fc4:	0e 94 1c 33 	call	0x6638	; 0x6638 <Print::print(__FlashStringHelper const*)>
  flushSerialProductive(); // Ensure all pending output is flushed before sampling current position in minor cycle.
    3fc8:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <flushSerialProductive()>
  if(getSubCycleTime() >= deadline) { Serial.println(); return; }
    3fcc:	80 91 b2 00 	lds	r24, 0x00B2
    3fd0:	81 17       	cp	r24, r17
    3fd2:	28 f0       	brcs	.+10     	; 0x3fde <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)+0x2e>
    3fd4:	85 eb       	ldi	r24, 0xB5	; 181
    3fd6:	94 e0       	ldi	r25, 0x04	; 4
    3fd8:	0e 94 47 33 	call	0x668e	; 0x668e <Print::println()>
    3fdc:	10 c0       	rjmp	.+32     	; 0x3ffe <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)+0x4e>
  for(int8_t padding = SYNTAX_COL_WIDTH - strlen_P((const char *)syntax); --padding >= 0; ) { Serial_print_space(); }
    3fde:	ce 01       	movw	r24, r28
    3fe0:	0e 94 c1 02 	call	0x582	; 0x582 <strlen_P>
    3fe4:	1a e0       	ldi	r17, 0x0A	; 10
    3fe6:	18 1b       	sub	r17, r24
    3fe8:	02 c0       	rjmp	.+4      	; 0x3fee <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)+0x3e>
    3fea:	0e 94 a8 1f 	call	0x3f50	; 0x3f50 <Serial_print_space()>
    3fee:	11 50       	subi	r17, 0x01	; 1
    3ff0:	17 ff       	sbrs	r17, 7
    3ff2:	fb cf       	rjmp	.-10     	; 0x3fea <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)+0x3a>
  Serial.println(description);
    3ff4:	85 eb       	ldi	r24, 0xB5	; 181
    3ff6:	94 e0       	ldi	r25, 0x04	; 4
    3ff8:	b7 01       	movw	r22, r14
    3ffa:	0e 94 67 33 	call	0x66ce	; 0x66ce <Print::println(__FlashStringHelper const*)>
  }
    3ffe:	df 91       	pop	r29
    4000:	cf 91       	pop	r28
    4002:	1f 91       	pop	r17
    4004:	ff 90       	pop	r15
    4006:	ef 90       	pop	r14
    4008:	08 95       	ret

0000400a <dumpCLIUsage(unsigned char)>:
  Serial.println(description);
  }

// Dump some brief CLI usage instructions to serial TX, which must be up and running.
// If this gets too big there is a risk of overrunning and missing the next tick...
static void dumpCLIUsage(const uint8_t stopBy)
    400a:	1f 93       	push	r17
    400c:	df 93       	push	r29
    400e:	cf 93       	push	r28
    4010:	00 d0       	rcall	.+0      	; 0x4012 <dumpCLIUsage(unsigned char)+0x8>
    4012:	00 d0       	rcall	.+0      	; 0x4014 <dumpCLIUsage(unsigned char)+0xa>
    4014:	cd b7       	in	r28, 0x3d	; 61
    4016:	de b7       	in	r29, 0x3e	; 62
    4018:	8c 83       	std	Y+4, r24	; 0x04
  {
  const uint8_t deadline = fnmin((uint8_t)(stopBy - fnmin(stopBy,CLI_PRINT_OH_SCT)), STOP_PRINTING_DESCRIPTION_AT);
    401a:	98 2f       	mov	r25, r24
    401c:	8f e3       	ldi	r24, 0x3F	; 63
    401e:	89 83       	std	Y+1, r24	; 0x01
    4020:	89 2f       	mov	r24, r25
    4022:	90 34       	cpi	r25, 0x40	; 64
    4024:	08 f0       	brcs	.+2      	; 0x4028 <dumpCLIUsage(unsigned char)+0x1e>
    4026:	8f e3       	ldi	r24, 0x3F	; 63
    4028:	98 1b       	sub	r25, r24
    402a:	9a 83       	std	Y+2, r25	; 0x02
    402c:	80 ec       	ldi	r24, 0xC0	; 192
    402e:	8b 83       	std	Y+3, r24	; 0x03
    4030:	19 2f       	mov	r17, r25
    4032:	91 3c       	cpi	r25, 0xC1	; 193
    4034:	08 f0       	brcs	.+2      	; 0x4038 <dumpCLIUsage(unsigned char)+0x2e>
    4036:	10 ec       	ldi	r17, 0xC0	; 192
  Serial.println();
    4038:	85 eb       	ldi	r24, 0xB5	; 181
    403a:	94 e0       	ldi	r25, 0x04	; 4
    403c:	0e 94 47 33 	call	0x668e	; 0x668e <Print::println()>
  //Serial.println(F("CLI usage:"));
  printCLILine(deadline, '?', F("this help"));
    4040:	81 2f       	mov	r24, r17
    4042:	6f e3       	ldi	r22, 0x3F	; 63
    4044:	47 e3       	ldi	r20, 0x37	; 55
    4046:	53 e0       	ldi	r21, 0x03	; 3
    4048:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <printCLILine(unsigned char, char, __FlashStringHelper const*)>
#ifdef ENABLE_BOILER_HUB
  printCLILine(deadline, F("C M"), F("Central hub >=M mins on, 0 off"));
#endif
  printCLILine(deadline, F("D N"), F("Dump stats set N"));
    404c:	81 2f       	mov	r24, r17
    404e:	63 e3       	ldi	r22, 0x33	; 51
    4050:	73 e0       	ldi	r23, 0x03	; 3
    4052:	42 e2       	ldi	r20, 0x22	; 34
    4054:	53 e0       	ldi	r21, 0x03	; 3
    4056:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine(deadline, 'E', F("Exit CLI"));
    405a:	81 2f       	mov	r24, r17
    405c:	65 e4       	ldi	r22, 0x45	; 69
    405e:	49 e1       	ldi	r20, 0x19	; 25
    4060:	53 e0       	ldi	r21, 0x03	; 3
    4062:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <printCLILine(unsigned char, char, __FlashStringHelper const*)>
  printCLILine(deadline, 'F', F("Frost"));
    4066:	81 2f       	mov	r24, r17
    4068:	66 e4       	ldi	r22, 0x46	; 70
    406a:	43 e1       	ldi	r20, 0x13	; 19
    406c:	53 e0       	ldi	r21, 0x03	; 3
    406e:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <printCLILine(unsigned char, char, __FlashStringHelper const*)>
#if defined(SETTABLE_TARGET_TEMPERATURES) && !defined(TEMP_POT_AVAILABLE)
  printCLILine(deadline, F("F CC"), F("set Frost/setback temp CC"));
    4072:	81 2f       	mov	r24, r17
    4074:	6e e0       	ldi	r22, 0x0E	; 14
    4076:	73 e0       	ldi	r23, 0x03	; 3
    4078:	44 ef       	ldi	r20, 0xF4	; 244
    407a:	52 e0       	ldi	r21, 0x02	; 2
    407c:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)>
#endif
#if defined(USE_MODULE_FHT8VSIMPLE) && defined(LOCAL_TRV)
  printCLILine(deadline, F("H H1 H2"), F("set FHT8V House codes 1&2"));
    4080:	81 2f       	mov	r24, r17
    4082:	6c ee       	ldi	r22, 0xEC	; 236
    4084:	72 e0       	ldi	r23, 0x02	; 2
    4086:	42 ed       	ldi	r20, 0xD2	; 210
    4088:	52 e0       	ldi	r21, 0x02	; 2
    408a:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine(deadline, 'H', F("clear House codes"));
    408e:	81 2f       	mov	r24, r17
    4090:	68 e4       	ldi	r22, 0x48	; 72
    4092:	40 ec       	ldi	r20, 0xC0	; 192
    4094:	52 e0       	ldi	r21, 0x02	; 2
    4096:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <printCLILine(unsigned char, char, __FlashStringHelper const*)>
#endif
  printCLILine(deadline, 'I', F("new ID"));
    409a:	81 2f       	mov	r24, r17
    409c:	69 e4       	ldi	r22, 0x49	; 73
    409e:	49 eb       	ldi	r20, 0xB9	; 185
    40a0:	52 e0       	ldi	r21, 0x02	; 2
    40a2:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <printCLILine(unsigned char, char, __FlashStringHelper const*)>
  //printCLILine(deadline, 'L', F("Learn to warm every 24h from now, clear if in frost mode, schedule 0"));
  printCLILine(deadline, F("L S"), F("Learn daily warm now, clear if in frost mode, schedule S"));
    40a6:	81 2f       	mov	r24, r17
    40a8:	65 eb       	ldi	r22, 0xB5	; 181
    40aa:	72 e0       	ldi	r23, 0x02	; 2
    40ac:	4c e7       	ldi	r20, 0x7C	; 124
    40ae:	52 e0       	ldi	r21, 0x02	; 2
    40b0:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)>
  //printCLILine(deadline, F("P HH MM"), F("Program: warm daily starting at HH MM schedule 0"));
  printCLILine(deadline, F("P HH MM S"), F("Program: warm daily starting at HH MM schedule S"));
    40b4:	81 2f       	mov	r24, r17
    40b6:	62 e7       	ldi	r22, 0x72	; 114
    40b8:	72 e0       	ldi	r23, 0x02	; 2
    40ba:	41 e4       	ldi	r20, 0x41	; 65
    40bc:	52 e0       	ldi	r21, 0x02	; 2
    40be:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine(deadline, F("O PP"), F("min % for valve to be Open"));
    40c2:	81 2f       	mov	r24, r17
    40c4:	6c e3       	ldi	r22, 0x3C	; 60
    40c6:	72 e0       	ldi	r23, 0x02	; 2
    40c8:	41 e2       	ldi	r20, 0x21	; 33
    40ca:	52 e0       	ldi	r21, 0x02	; 2
    40cc:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine(deadline, 'O', F("reset Open %"));
    40d0:	81 2f       	mov	r24, r17
    40d2:	6f e4       	ldi	r22, 0x4F	; 79
    40d4:	44 e1       	ldi	r20, 0x14	; 20
    40d6:	52 e0       	ldi	r21, 0x02	; 2
    40d8:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <printCLILine(unsigned char, char, __FlashStringHelper const*)>
#ifdef SUPPORT_BAKE
  printCLILine(deadline, 'Q', F("Quick Heat"));
    40dc:	81 2f       	mov	r24, r17
    40de:	61 e5       	ldi	r22, 0x51	; 81
    40e0:	49 e0       	ldi	r20, 0x09	; 9
    40e2:	52 e0       	ldi	r21, 0x02	; 2
    40e4:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <printCLILine(unsigned char, char, __FlashStringHelper const*)>
#endif
//  printCLILine(deadline, F("R N"), F("dump Raw stats set N"));
  printCLILine(deadline, 'S', F("show Status"));
    40e8:	81 2f       	mov	r24, r17
    40ea:	63 e5       	ldi	r22, 0x53	; 83
    40ec:	4d ef       	ldi	r20, 0xFD	; 253
    40ee:	51 e0       	ldi	r21, 0x01	; 1
    40f0:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <printCLILine(unsigned char, char, __FlashStringHelper const*)>
  printCLILine(deadline, F("T HH MM"), F("set 24h Time"));
    40f4:	81 2f       	mov	r24, r17
    40f6:	65 ef       	ldi	r22, 0xF5	; 245
    40f8:	71 e0       	ldi	r23, 0x01	; 1
    40fa:	48 ee       	ldi	r20, 0xE8	; 232
    40fc:	51 e0       	ldi	r21, 0x01	; 1
    40fe:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine(deadline, 'V', F("sys Version"));
    4102:	81 2f       	mov	r24, r17
    4104:	66 e5       	ldi	r22, 0x56	; 86
    4106:	4c ed       	ldi	r20, 0xDC	; 220
    4108:	51 e0       	ldi	r21, 0x01	; 1
    410a:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <printCLILine(unsigned char, char, __FlashStringHelper const*)>
  printCLILine(deadline, 'W', F("Warm"));
    410e:	81 2f       	mov	r24, r17
    4110:	67 e5       	ldi	r22, 0x57	; 87
    4112:	47 ed       	ldi	r20, 0xD7	; 215
    4114:	51 e0       	ldi	r21, 0x01	; 1
    4116:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <printCLILine(unsigned char, char, __FlashStringHelper const*)>
#if defined(SETTABLE_TARGET_TEMPERATURES) && !defined(TEMP_POT_AVAILABLE)
  printCLILine(deadline, F("W CC"), F("set Warm temp CC"));
    411a:	81 2f       	mov	r24, r17
    411c:	62 ed       	ldi	r22, 0xD2	; 210
    411e:	71 e0       	ldi	r23, 0x01	; 1
    4120:	41 ec       	ldi	r20, 0xC1	; 193
    4122:	51 e0       	ldi	r21, 0x01	; 1
    4124:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)>
#endif
  printCLILine(deadline, 'X', F("Xmit security level; 0 always, 255 never"));
    4128:	81 2f       	mov	r24, r17
    412a:	68 e5       	ldi	r22, 0x58	; 88
    412c:	48 e9       	ldi	r20, 0x98	; 152
    412e:	51 e0       	ldi	r21, 0x01	; 1
    4130:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <printCLILine(unsigned char, char, __FlashStringHelper const*)>
  printCLILine(deadline, 'Z', F("Zap stats"));
    4134:	81 2f       	mov	r24, r17
    4136:	6a e5       	ldi	r22, 0x5A	; 90
    4138:	4e e8       	ldi	r20, 0x8E	; 142
    413a:	51 e0       	ldi	r21, 0x01	; 1
    413c:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <printCLILine(unsigned char, char, __FlashStringHelper const*)>
  Serial.println();
    4140:	85 eb       	ldi	r24, 0xB5	; 181
    4142:	94 e0       	ldi	r25, 0x04	; 4
    4144:	0e 94 47 33 	call	0x668e	; 0x668e <Print::println()>
  }
    4148:	0f 90       	pop	r0
    414a:	0f 90       	pop	r0
    414c:	0f 90       	pop	r0
    414e:	0f 90       	pop	r0
    4150:	cf 91       	pop	r28
    4152:	df 91       	pop	r29
    4154:	1f 91       	pop	r17
    4156:	08 95       	ret

00004158 <handleLEARN(unsigned char)>:
#ifdef LEARN_BUTTON_AVAILABLE
// Handle learn button(s).
// First/primary button is 0, second is 1, etc.
// In simple mode: if in frost mode clear simple schedule else set repeat for every 24h from now.
// May be called from pushbutton or CLI UI components.
static void handleLEARN(const uint8_t which)
    4158:	1f 93       	push	r17
    415a:	18 2f       	mov	r17, r24
  {
  // Set simple schedule starting every 24h from a little before now and running for an hour or so.  
  if(inWarmMode()) { setSimpleSchedule(getMinutesSinceMidnightLT(), which); }
    415c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <inWarmMode()>
    4160:	88 23       	and	r24, r24
    4162:	31 f0       	breq	.+12     	; 0x4170 <handleLEARN(unsigned char)+0x18>
    4164:	0e 94 b5 1c 	call	0x396a	; 0x396a <getMinutesSinceMidnightLT()>
    4168:	61 2f       	mov	r22, r17
    416a:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <setSimpleSchedule(unsigned int, unsigned char)>
    416e:	03 c0       	rjmp	.+6      	; 0x4176 <handleLEARN(unsigned char)+0x1e>
  // Clear simple schedule.
  else { clearSimpleSchedule(which); }
    4170:	81 2f       	mov	r24, r17
    4172:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <clearSimpleSchedule(unsigned char)>
  }
    4176:	1f 91       	pop	r17
    4178:	08 95       	ret

0000417a <checkUserSchedule()>:
  return(statusChanged);
  }


// Check/apply the user's schedule, at least once each minute, and act on any timed events.
void checkUserSchedule()
    417a:	1f 93       	push	r17
    417c:	cf 93       	push	r28
    417e:	df 93       	push	r29
  {
  // Get minutes since midnight local time [0,1439].
  const uint_least16_t msm = getMinutesSinceMidnightLT();
    4180:	0e 94 b5 1c 	call	0x396a	; 0x396a <getMinutesSinceMidnightLT()>
    4184:	ec 01       	movw	r28, r24
    4186:	10 e0       	ldi	r17, 0x00	; 0
  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    // Check if now is the simple scheduled off time, as minutes after midnight [0,1439]; invalid (eg ~0) if none set.
    // Programmed off/frost takes priority over on/warm if same to bias towards energy-saving.
    // Note that in the presence of multiple overlapping schedules only the last 'off' applies however.
    if(((MAX_SIMPLE_SCHEDULES < 1) || !isAnyScheduleOnWARMNow()) &&
    4188:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <isAnyScheduleOnWARMNow()>
    418c:	88 23       	and	r24, r24
    418e:	79 f4       	brne	.+30     	; 0x41ae <checkUserSchedule()+0x34>
    4190:	81 2f       	mov	r24, r17
    4192:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <getSimpleScheduleOff(unsigned char)>
    4196:	c8 17       	cp	r28, r24
    4198:	d9 07       	cpc	r29, r25
    419a:	49 f4       	brne	.+18     	; 0x41ae <checkUserSchedule()+0x34>
       (msm == getSimpleScheduleOff(which)))
      { setWarmModeDebounced(false); }
    419c:	80 e0       	ldi	r24, 0x00	; 0
    419e:	01 c0       	rjmp	.+2      	; 0x41a2 <checkUserSchedule()+0x28>
    // Check if now is the simple scheduled on time.
    else if(msm == getSimpleScheduleOn(which))
      { setWarmModeDebounced(true); }
    41a0:	81 e0       	ldi	r24, 0x01	; 1
    41a2:	0e 94 82 03 	call	0x704	; 0x704 <setWarmModeDebounced(bool)>
  // Get minutes since midnight local time [0,1439].
  const uint_least16_t msm = getMinutesSinceMidnightLT();

  // Check all available schedules.
  // FIXME: probably will NOT work as expected for overlapping schedules (ie will got to FROST at end of first one).
  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    41a6:	1f 5f       	subi	r17, 0xFF	; 255
    41a8:	12 30       	cpi	r17, 0x02	; 2
    41aa:	71 f7       	brne	.-36     	; 0x4188 <checkUserSchedule()+0xe>
    41ac:	07 c0       	rjmp	.+14     	; 0x41bc <checkUserSchedule()+0x42>
    // Note that in the presence of multiple overlapping schedules only the last 'off' applies however.
    if(((MAX_SIMPLE_SCHEDULES < 1) || !isAnyScheduleOnWARMNow()) &&
       (msm == getSimpleScheduleOff(which)))
      { setWarmModeDebounced(false); }
    // Check if now is the simple scheduled on time.
    else if(msm == getSimpleScheduleOn(which))
    41ae:	81 2f       	mov	r24, r17
    41b0:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <getSimpleScheduleOn(unsigned char)>
    41b4:	c8 17       	cp	r28, r24
    41b6:	d9 07       	cpc	r29, r25
    41b8:	b1 f7       	brne	.-20     	; 0x41a6 <checkUserSchedule()+0x2c>
    41ba:	f2 cf       	rjmp	.-28     	; 0x41a0 <checkUserSchedule()+0x26>
      { setWarmModeDebounced(true); }
    }
  }
    41bc:	df 91       	pop	r29
    41be:	cf 91       	pop	r28
    41c0:	1f 91       	pop	r17
    41c2:	08 95       	ret

000041c4 <bool SimpleStatsRotationBase::put<unsigned char>(Sensor<unsigned char> const&)>:
    // True if successful, false otherwise (eg capacity already reached).
    bool put(SimpleStatsKey key, int newValue);

    // Create/update value for the given sensor.
    // True if successful, false otherwise (eg capacity already reached).
    template <class T> bool put(const Sensor<T> &s) { return(put(s.tag(), s.get())); }
    41c4:	cf 92       	push	r12
    41c6:	df 92       	push	r13
    41c8:	ef 92       	push	r14
    41ca:	ff 92       	push	r15
    41cc:	0f 93       	push	r16
    41ce:	1f 93       	push	r17
    41d0:	6c 01       	movw	r12, r24
    41d2:	8b 01       	movw	r16, r22
    41d4:	db 01       	movw	r26, r22
    41d6:	ed 91       	ld	r30, X+
    41d8:	fc 91       	ld	r31, X
    41da:	00 84       	ldd	r0, Z+8	; 0x08
    41dc:	f1 85       	ldd	r31, Z+9	; 0x09
    41de:	e0 2d       	mov	r30, r0
    41e0:	cb 01       	movw	r24, r22
    41e2:	09 95       	icall
    41e4:	7c 01       	movw	r14, r24
    41e6:	d8 01       	movw	r26, r16
    41e8:	ed 91       	ld	r30, X+
    41ea:	fc 91       	ld	r31, X
    41ec:	02 80       	ldd	r0, Z+2	; 0x02
    41ee:	f3 81       	ldd	r31, Z+3	; 0x03
    41f0:	e0 2d       	mov	r30, r0
    41f2:	c8 01       	movw	r24, r16
    41f4:	09 95       	icall
    41f6:	48 2f       	mov	r20, r24
    41f8:	c6 01       	movw	r24, r12
    41fa:	b7 01       	movw	r22, r14
    41fc:	50 e0       	ldi	r21, 0x00	; 0
    41fe:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <SimpleStatsRotationBase::put(char const*, int)>
    4202:	1f 91       	pop	r17
    4204:	0f 91       	pop	r16
    4206:	ff 90       	pop	r15
    4208:	ef 90       	pop	r14
    420a:	df 90       	pop	r13
    420c:	cf 90       	pop	r12
    420e:	08 95       	ret

00004210 <serialStatusReport()>:

'HC' introduces the optional FHT8V house codes section, if supported and codes are set.
eg 'HC99 99'
HChc1 hc2 are the house codes 1 and 2 for an FHT8V valve.
*/
void serialStatusReport()
    4210:	bf 92       	push	r11
    4212:	cf 92       	push	r12
    4214:	df 92       	push	r13
    4216:	ef 92       	push	r14
    4218:	ff 92       	push	r15
    421a:	0f 93       	push	r16
    421c:	1f 93       	push	r17
    421e:	df 93       	push	r29
    4220:	cf 93       	push	r28
    4222:	cd b7       	in	r28, 0x3d	; 61
    4224:	de b7       	in	r29, 0x3e	; 62
    4226:	c0 55       	subi	r28, 0x50	; 80
    4228:	d0 40       	sbci	r29, 0x00	; 0
    422a:	0f b6       	in	r0, 0x3f	; 63
    422c:	f8 94       	cli
    422e:	de bf       	out	0x3e, r29	; 62
    4230:	0f be       	out	0x3f, r0	; 63
    4232:	cd bf       	out	0x3d, r28	; 61
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    4234:	0e 94 9d 1a 	call	0x353a	; 0x353a <powerUpSerialIfDisabled()>
    4238:	b8 2e       	mov	r11, r24

  // Aim to overlap CPU usage with characters being TXed for throughput determined primarily by output size and baud.

  // Stats line starts with distingushed marker character.
  // Initial '=' section with common essentials.
  Serial.print(LINE_START_CHAR_STATS);
    423a:	85 eb       	ldi	r24, 0xB5	; 181
    423c:	94 e0       	ldi	r25, 0x04	; 4
    423e:	6d e3       	ldi	r22, 0x3D	; 61
    4240:	0e 94 3f 33 	call	0x667e	; 0x667e <Print::print(char)>
#ifdef SUPPORT_BAKE
  Serial.print(inWarmMode() ? (inBakeMode() ? 'B' : 'W') : 'F');
    4244:	0e 94 7f 03 	call	0x6fe	; 0x6fe <inWarmMode()>
    4248:	88 23       	and	r24, r24
    424a:	11 f4       	brne	.+4      	; 0x4250 <serialStatusReport()+0x40>
    424c:	66 e4       	ldi	r22, 0x46	; 70
    424e:	07 c0       	rjmp	.+14     	; 0x425e <serialStatusReport()+0x4e>
    4250:	0e 94 89 03 	call	0x712	; 0x712 <inBakeMode()>
    4254:	88 23       	and	r24, r24
    4256:	11 f4       	brne	.+4      	; 0x425c <serialStatusReport()+0x4c>
    4258:	67 e5       	ldi	r22, 0x57	; 87
    425a:	01 c0       	rjmp	.+2      	; 0x425e <serialStatusReport()+0x4e>
    425c:	62 e4       	ldi	r22, 0x42	; 66
    425e:	85 eb       	ldi	r24, 0xB5	; 181
    4260:	94 e0       	ldi	r25, 0x04	; 4
    4262:	0e 94 3f 33 	call	0x667e	; 0x667e <Print::print(char)>
    4266:	60 91 f3 01 	lds	r22, 0x01F3
#else
  Serial.print(inWarmMode() ? 'W' : 'F');
#endif
  Serial.print(NominalRadValve.get()); Serial.print('%'); // Target valve position.
    426a:	85 eb       	ldi	r24, 0xB5	; 181
    426c:	94 e0       	ldi	r25, 0x04	; 4
    426e:	4a e0       	ldi	r20, 0x0A	; 10
    4270:	50 e0       	ldi	r21, 0x00	; 0
    4272:	0e 94 1b 34 	call	0x6836	; 0x6836 <Print::print(unsigned char, int)>
    4276:	85 eb       	ldi	r24, 0xB5	; 181
    4278:	94 e0       	ldi	r25, 0x04	; 4
    427a:	65 e2       	ldi	r22, 0x25	; 37
    427c:	0e 94 3f 33 	call	0x667e	; 0x667e <Print::print(char)>
    virtual uint8_t preferredPollInterval_s() const { return(60); }

    // Return last value fetched by read(); undefined before first read().
    // Fast.
    // Not thread-safe nor usable within ISRs (Interrupt Service Routines).
    virtual int get() const { return(value); }
    4280:	00 91 62 03 	lds	r16, 0x0362
    4284:	10 91 63 03 	lds	r17, 0x0363
  const int temp = TemperatureC16.get();
  Serial.print('@'); Serial.print(temp >> 4); Serial.print('C'); // Unrounded whole degrees C.
    4288:	85 eb       	ldi	r24, 0xB5	; 181
    428a:	94 e0       	ldi	r25, 0x04	; 4
    428c:	60 e4       	ldi	r22, 0x40	; 64
    428e:	0e 94 3f 33 	call	0x667e	; 0x667e <Print::print(char)>
    4292:	b8 01       	movw	r22, r16
    4294:	24 e0       	ldi	r18, 0x04	; 4
    4296:	75 95       	asr	r23
    4298:	67 95       	ror	r22
    429a:	2a 95       	dec	r18
    429c:	e1 f7       	brne	.-8      	; 0x4296 <serialStatusReport()+0x86>
    429e:	85 eb       	ldi	r24, 0xB5	; 181
    42a0:	94 e0       	ldi	r25, 0x04	; 4
    42a2:	4a e0       	ldi	r20, 0x0A	; 10
    42a4:	50 e0       	ldi	r21, 0x00	; 0
    42a6:	0e 94 6d 34 	call	0x68da	; 0x68da <Print::print(int, int)>
    42aa:	85 eb       	ldi	r24, 0xB5	; 181
    42ac:	94 e0       	ldi	r25, 0x04	; 4
    42ae:	63 e4       	ldi	r22, 0x43	; 67
    42b0:	0e 94 3f 33 	call	0x667e	; 0x667e <Print::print(char)>
      Serial.print(temp & 0xf, HEX); // Show 16ths in hex.
    42b4:	0f 70       	andi	r16, 0x0F	; 15
    42b6:	10 70       	andi	r17, 0x00	; 0
    42b8:	85 eb       	ldi	r24, 0xB5	; 181
    42ba:	94 e0       	ldi	r25, 0x04	; 4
    42bc:	b8 01       	movw	r22, r16
    42be:	40 e1       	ldi	r20, 0x10	; 16
    42c0:	50 e0       	ldi	r21, 0x00	; 0
    42c2:	0e 94 6d 34 	call	0x68da	; 0x68da <Print::print(int, int)>
//  if(Supply_mV.isSupplyVoltageLow()) { Serial.print(F(";Plow")); }
//#endif

#if 1
  // *X* section: Xmit security level shown only if some non-essential TX potentially allowed.
  const stats_TX_level xmitLevel = getStatsTXLevel();
    42c6:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <getStatsTXLevel()>
  if(xmitLevel < stTXnever) { Serial.print(F(";X")); Serial.print(xmitLevel); }
    42ca:	8c 01       	movw	r16, r24
    42cc:	8f 3f       	cpi	r24, 0xFF	; 255
    42ce:	91 05       	cpc	r25, r1
    42d0:	6c f4       	brge	.+26     	; 0x42ec <serialStatusReport()+0xdc>
    42d2:	85 eb       	ldi	r24, 0xB5	; 181
    42d4:	94 e0       	ldi	r25, 0x04	; 4
    42d6:	6a e5       	ldi	r22, 0x5A	; 90
    42d8:	73 e0       	ldi	r23, 0x03	; 3
    42da:	0e 94 1c 33 	call	0x6638	; 0x6638 <Print::print(__FlashStringHelper const*)>
    42de:	85 eb       	ldi	r24, 0xB5	; 181
    42e0:	94 e0       	ldi	r25, 0x04	; 4
    42e2:	b8 01       	movw	r22, r16
    42e4:	4a e0       	ldi	r20, 0x0A	; 10
    42e6:	50 e0       	ldi	r21, 0x00	; 0
    42e8:	0e 94 6d 34 	call	0x68da	; 0x68da <Print::print(int, int)>
#endif

  // *T* section: time and schedules.
  const uint_least8_t hh = getHoursLT();
    42ec:	0e 94 ca 1c 	call	0x3994	; 0x3994 <getHoursLT()>
    42f0:	18 2f       	mov	r17, r24
  const uint_least8_t mm = getMinutesLT();
    42f2:	0e 94 be 1c 	call	0x397c	; 0x397c <getMinutesLT()>
    42f6:	08 2f       	mov	r16, r24
  Serial.print(';'); // End previous section.
    42f8:	85 eb       	ldi	r24, 0xB5	; 181
    42fa:	94 e0       	ldi	r25, 0x04	; 4
    42fc:	6b e3       	ldi	r22, 0x3B	; 59
    42fe:	0e 94 3f 33 	call	0x667e	; 0x667e <Print::print(char)>
  Serial.print('T'); Serial.print(hh); Serial_print_space(); Serial.print(mm);
    4302:	85 eb       	ldi	r24, 0xB5	; 181
    4304:	94 e0       	ldi	r25, 0x04	; 4
    4306:	64 e5       	ldi	r22, 0x54	; 84
    4308:	0e 94 3f 33 	call	0x667e	; 0x667e <Print::print(char)>
    430c:	85 eb       	ldi	r24, 0xB5	; 181
    430e:	94 e0       	ldi	r25, 0x04	; 4
    4310:	61 2f       	mov	r22, r17
    4312:	4a e0       	ldi	r20, 0x0A	; 10
    4314:	50 e0       	ldi	r21, 0x00	; 0
    4316:	0e 94 1b 34 	call	0x6836	; 0x6836 <Print::print(unsigned char, int)>
    431a:	0e 94 a8 1f 	call	0x3f50	; 0x3f50 <Serial_print_space()>
    431e:	85 eb       	ldi	r24, 0xB5	; 181
    4320:	94 e0       	ldi	r25, 0x04	; 4
    4322:	60 2f       	mov	r22, r16
    4324:	4a e0       	ldi	r20, 0x0A	; 10
    4326:	50 e0       	ldi	r21, 0x00	; 0
    4328:	0e 94 1b 34 	call	0x6836	; 0x6836 <Print::print(unsigned char, int)>
    432c:	dd 24       	eor	r13, r13
  // Show all schedules set.
  for(uint8_t scheduleNumber = 0; scheduleNumber < MAX_SIMPLE_SCHEDULES; ++scheduleNumber)
    {
    Serial_print_space();
    432e:	0e 94 a8 1f 	call	0x3f50	; 0x3f50 <Serial_print_space()>
    uint_least16_t startMinutesSinceMidnightLT = getSimpleScheduleOn(scheduleNumber);
    4332:	8d 2d       	mov	r24, r13
    4334:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <getSimpleScheduleOn(unsigned char)>
    4338:	fc 01       	movw	r30, r24
    const bool invalidStartTime = startMinutesSinceMidnightLT >= MINS_PER_DAY;
    const int startH = invalidStartTime ? 255 : (startMinutesSinceMidnightLT / 60);
    433a:	85 e0       	ldi	r24, 0x05	; 5
    433c:	e0 3a       	cpi	r30, 0xA0	; 160
    433e:	f8 07       	cpc	r31, r24
    4340:	30 f0       	brcs	.+12     	; 0x434e <serialStatusReport()+0x13e>
    4342:	00 e0       	ldi	r16, 0x00	; 0
    4344:	10 e0       	ldi	r17, 0x00	; 0
    4346:	9f ef       	ldi	r25, 0xFF	; 255
    4348:	e9 2e       	mov	r14, r25
    434a:	f1 2c       	mov	r15, r1
    434c:	0c c0       	rjmp	.+24     	; 0x4366 <serialStatusReport()+0x156>
    434e:	cf 01       	movw	r24, r30
    4350:	6c e3       	ldi	r22, 0x3C	; 60
    4352:	70 e0       	ldi	r23, 0x00	; 0
    4354:	0e 94 2e 35 	call	0x6a5c	; 0x6a5c <__udivmodhi4>
    4358:	7b 01       	movw	r14, r22
    const int startM = invalidStartTime ? 0 : (startMinutesSinceMidnightLT % 60);
    435a:	cf 01       	movw	r24, r30
    435c:	6c e3       	ldi	r22, 0x3C	; 60
    435e:	70 e0       	ldi	r23, 0x00	; 0
    4360:	0e 94 2e 35 	call	0x6a5c	; 0x6a5c <__udivmodhi4>
    4364:	8c 01       	movw	r16, r24
    Serial.print('W'); Serial.print(startH); Serial_print_space(); Serial.print(startM);
    4366:	85 eb       	ldi	r24, 0xB5	; 181
    4368:	94 e0       	ldi	r25, 0x04	; 4
    436a:	67 e5       	ldi	r22, 0x57	; 87
    436c:	0e 94 3f 33 	call	0x667e	; 0x667e <Print::print(char)>
    4370:	85 eb       	ldi	r24, 0xB5	; 181
    4372:	94 e0       	ldi	r25, 0x04	; 4
    4374:	b7 01       	movw	r22, r14
    4376:	4a e0       	ldi	r20, 0x0A	; 10
    4378:	50 e0       	ldi	r21, 0x00	; 0
    437a:	0e 94 6d 34 	call	0x68da	; 0x68da <Print::print(int, int)>
    437e:	0e 94 a8 1f 	call	0x3f50	; 0x3f50 <Serial_print_space()>
    4382:	85 eb       	ldi	r24, 0xB5	; 181
    4384:	94 e0       	ldi	r25, 0x04	; 4
    4386:	b8 01       	movw	r22, r16
    4388:	4a e0       	ldi	r20, 0x0A	; 10
    438a:	50 e0       	ldi	r21, 0x00	; 0
    438c:	0e 94 6d 34 	call	0x68da	; 0x68da <Print::print(int, int)>
    Serial_print_space();
    4390:	0e 94 a8 1f 	call	0x3f50	; 0x3f50 <Serial_print_space()>
    uint_least16_t endMinutesSinceMidnightLT = getSimpleScheduleOff(scheduleNumber);
    4394:	8d 2d       	mov	r24, r13
    4396:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <getSimpleScheduleOff(unsigned char)>
    439a:	fc 01       	movw	r30, r24
    const bool invalidEndTime = endMinutesSinceMidnightLT >= MINS_PER_DAY;
    const int endH = invalidEndTime ? 255 : (endMinutesSinceMidnightLT / 60);
    439c:	85 e0       	ldi	r24, 0x05	; 5
    439e:	e0 3a       	cpi	r30, 0xA0	; 160
    43a0:	f8 07       	cpc	r31, r24
    43a2:	30 f0       	brcs	.+12     	; 0x43b0 <serialStatusReport()+0x1a0>
    43a4:	00 e0       	ldi	r16, 0x00	; 0
    43a6:	10 e0       	ldi	r17, 0x00	; 0
    43a8:	8f ef       	ldi	r24, 0xFF	; 255
    43aa:	e8 2e       	mov	r14, r24
    43ac:	f1 2c       	mov	r15, r1
    43ae:	0c c0       	rjmp	.+24     	; 0x43c8 <serialStatusReport()+0x1b8>
    43b0:	cf 01       	movw	r24, r30
    43b2:	6c e3       	ldi	r22, 0x3C	; 60
    43b4:	70 e0       	ldi	r23, 0x00	; 0
    43b6:	0e 94 2e 35 	call	0x6a5c	; 0x6a5c <__udivmodhi4>
    43ba:	7b 01       	movw	r14, r22
    const int endM = invalidEndTime ? 0 : (endMinutesSinceMidnightLT % 60);
    43bc:	cf 01       	movw	r24, r30
    43be:	6c e3       	ldi	r22, 0x3C	; 60
    43c0:	70 e0       	ldi	r23, 0x00	; 0
    43c2:	0e 94 2e 35 	call	0x6a5c	; 0x6a5c <__udivmodhi4>
    43c6:	8c 01       	movw	r16, r24
    Serial.print('F'); Serial.print(endH); Serial_print_space(); Serial.print(endM);
    43c8:	85 eb       	ldi	r24, 0xB5	; 181
    43ca:	94 e0       	ldi	r25, 0x04	; 4
    43cc:	66 e4       	ldi	r22, 0x46	; 70
    43ce:	0e 94 3f 33 	call	0x667e	; 0x667e <Print::print(char)>
    43d2:	85 eb       	ldi	r24, 0xB5	; 181
    43d4:	94 e0       	ldi	r25, 0x04	; 4
    43d6:	b7 01       	movw	r22, r14
    43d8:	4a e0       	ldi	r20, 0x0A	; 10
    43da:	50 e0       	ldi	r21, 0x00	; 0
    43dc:	0e 94 6d 34 	call	0x68da	; 0x68da <Print::print(int, int)>
    43e0:	0e 94 a8 1f 	call	0x3f50	; 0x3f50 <Serial_print_space()>
    43e4:	85 eb       	ldi	r24, 0xB5	; 181
    43e6:	94 e0       	ldi	r25, 0x04	; 4
    43e8:	b8 01       	movw	r22, r16
    43ea:	4a e0       	ldi	r20, 0x0A	; 10
    43ec:	50 e0       	ldi	r21, 0x00	; 0
    43ee:	0e 94 6d 34 	call	0x68da	; 0x68da <Print::print(int, int)>
  const uint_least8_t hh = getHoursLT();
  const uint_least8_t mm = getMinutesLT();
  Serial.print(';'); // End previous section.
  Serial.print('T'); Serial.print(hh); Serial_print_space(); Serial.print(mm);
  // Show all schedules set.
  for(uint8_t scheduleNumber = 0; scheduleNumber < MAX_SIMPLE_SCHEDULES; ++scheduleNumber)
    43f2:	d3 94       	inc	r13
    43f4:	82 e0       	ldi	r24, 0x02	; 2
    43f6:	d8 16       	cp	r13, r24
    43f8:	09 f0       	breq	.+2      	; 0x43fc <serialStatusReport()+0x1ec>
    43fa:	99 cf       	rjmp	.-206    	; 0x432e <serialStatusReport()+0x11e>
    const bool invalidEndTime = endMinutesSinceMidnightLT >= MINS_PER_DAY;
    const int endH = invalidEndTime ? 255 : (endMinutesSinceMidnightLT / 60);
    const int endM = invalidEndTime ? 0 : (endMinutesSinceMidnightLT % 60);
    Serial.print('F'); Serial.print(endH); Serial_print_space(); Serial.print(endM);
    }
  if(isAnyScheduleOnWARMNow()) { Serial.print('*'); } // Indicate that at least one schedule is active now.
    43fc:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <isAnyScheduleOnWARMNow()>
    4400:	88 23       	and	r24, r24
    4402:	29 f0       	breq	.+10     	; 0x440e <serialStatusReport()+0x1fe>
    4404:	85 eb       	ldi	r24, 0xB5	; 181
    4406:	94 e0       	ldi	r25, 0x04	; 4
    4408:	6a e2       	ldi	r22, 0x2A	; 42
    440a:	0e 94 3f 33 	call	0x667e	; 0x667e <Print::print(char)>

  // *S* section: settable target/threshold temperatures, current target, and eco/smart/occupied flags.
#ifdef SETTABLE_TARGET_TEMPERATURES // Show thresholds and current target since no longer so easily deduced.
  Serial.print(';'); // Terminate previous section.
    440e:	85 eb       	ldi	r24, 0xB5	; 181
    4410:	94 e0       	ldi	r25, 0x04	; 4
    4412:	6b e3       	ldi	r22, 0x3B	; 59
    4414:	0e 94 3f 33 	call	0x667e	; 0x667e <Print::print(char)>
  Serial.print('S'); // Current settable temperature target, and FROST and WARM settings.
    4418:	85 eb       	ldi	r24, 0xB5	; 181
    441a:	94 e0       	ldi	r25, 0x04	; 4
    441c:	63 e5       	ldi	r22, 0x53	; 83
    441e:	0e 94 3f 33 	call	0x667e	; 0x667e <Print::print(char)>
  Serial.print(NominalRadValve.getTargetTempC());
    4422:	85 eb       	ldi	r24, 0xB5	; 181
    4424:	94 e0       	ldi	r25, 0x04	; 4
    4426:	60 91 f4 01 	lds	r22, 0x01F4
    442a:	4a e0       	ldi	r20, 0x0A	; 10
    442c:	50 e0       	ldi	r21, 0x00	; 0
    442e:	0e 94 1b 34 	call	0x6836	; 0x6836 <Print::print(unsigned char, int)>
  Serial_print_space();
    4432:	0e 94 a8 1f 	call	0x3f50	; 0x3f50 <Serial_print_space()>
  Serial.print(getFROSTTargetC());
    4436:	0e 94 9c 03 	call	0x738	; 0x738 <getFROSTTargetC()>
    443a:	68 2f       	mov	r22, r24
    443c:	85 eb       	ldi	r24, 0xB5	; 181
    443e:	94 e0       	ldi	r25, 0x04	; 4
    4440:	4a e0       	ldi	r20, 0x0A	; 10
    4442:	50 e0       	ldi	r21, 0x00	; 0
    4444:	0e 94 1b 34 	call	0x6836	; 0x6836 <Print::print(unsigned char, int)>
  Serial_print_space();
    4448:	0e 94 a8 1f 	call	0x3f50	; 0x3f50 <Serial_print_space()>
  Serial.print(getWARMTargetC());
    444c:	0e 94 ab 03 	call	0x756	; 0x756 <getWARMTargetC()>
    4450:	68 2f       	mov	r22, r24
    4452:	85 eb       	ldi	r24, 0xB5	; 181
    4454:	94 e0       	ldi	r25, 0x04	; 4
    4456:	4a e0       	ldi	r20, 0x0A	; 10
    4458:	50 e0       	ldi	r21, 0x00	; 0
    445a:	0e 94 1b 34 	call	0x6836	; 0x6836 <Print::print(unsigned char, int)>
#endif

  // *H* section: house codes for local FHT8V valve and if syncing, iff set.
#if defined(USE_MODULE_FHT8VSIMPLE)
  // Print optional house code section if codes set.
  const uint8_t hc1 = FHT8VGetHC1();
    445e:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <FHT8VGetHC1()>
    4462:	18 2f       	mov	r17, r24
  if(hc1 != 255)
    4464:	8f 3f       	cpi	r24, 0xFF	; 255
    4466:	19 f1       	breq	.+70     	; 0x44ae <serialStatusReport()+0x29e>
    {
    Serial.print(F(";HC"));
    4468:	85 eb       	ldi	r24, 0xB5	; 181
    446a:	94 e0       	ldi	r25, 0x04	; 4
    446c:	66 e5       	ldi	r22, 0x56	; 86
    446e:	73 e0       	ldi	r23, 0x03	; 3
    4470:	0e 94 1c 33 	call	0x6638	; 0x6638 <Print::print(__FlashStringHelper const*)>
    Serial.print(hc1);
    4474:	85 eb       	ldi	r24, 0xB5	; 181
    4476:	94 e0       	ldi	r25, 0x04	; 4
    4478:	61 2f       	mov	r22, r17
    447a:	4a e0       	ldi	r20, 0x0A	; 10
    447c:	50 e0       	ldi	r21, 0x00	; 0
    447e:	0e 94 1b 34 	call	0x6836	; 0x6836 <Print::print(unsigned char, int)>
    Serial_print_space();
    4482:	0e 94 a8 1f 	call	0x3f50	; 0x3f50 <Serial_print_space()>
    Serial.print(FHT8VGetHC2());
    4486:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <FHT8VGetHC2()>
    448a:	68 2f       	mov	r22, r24
    448c:	85 eb       	ldi	r24, 0xB5	; 181
    448e:	94 e0       	ldi	r25, 0x04	; 4
    4490:	4a e0       	ldi	r20, 0x0A	; 10
    4492:	50 e0       	ldi	r21, 0x00	; 0
    4494:	0e 94 1b 34 	call	0x6836	; 0x6836 <Print::print(unsigned char, int)>
    if(!isSyncedWithFHT8V())
    4498:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <isSyncedWithFHT8V()>
    449c:	88 23       	and	r24, r24
    449e:	39 f4       	brne	.+14     	; 0x44ae <serialStatusReport()+0x29e>
      {
      Serial_print_space();
    44a0:	0e 94 a8 1f 	call	0x3f50	; 0x3f50 <Serial_print_space()>
      Serial.print('s'); // Indicate syncing with trailing lower-case 's' in field...
    44a4:	85 eb       	ldi	r24, 0xB5	; 181
    44a6:	94 e0       	ldi	r25, 0x04	; 4
    44a8:	63 e7       	ldi	r22, 0x73	; 115
    44aa:	0e 94 3f 33 	call	0x667e	; 0x667e <Print::print(char)>
    }
#endif

#if 1
  // *M* section: min-valve-percentage open section, iff not at default value.
  const uint8_t minValvePcOpen = NominalRadValve.getMinValvePcReallyOpen();
    44ae:	0e 94 3a 04 	call	0x874	; 0x874 <ModelledRadValve::getMinValvePcReallyOpen()>
    44b2:	18 2f       	mov	r17, r24
  if(DEFAULT_MIN_VALVE_PC_REALLY_OPEN != minValvePcOpen) { Serial.print(F(";M")); Serial.print(minValvePcOpen); }
    44b4:	8a 30       	cpi	r24, 0x0A	; 10
    44b6:	69 f0       	breq	.+26     	; 0x44d2 <serialStatusReport()+0x2c2>
    44b8:	85 eb       	ldi	r24, 0xB5	; 181
    44ba:	94 e0       	ldi	r25, 0x04	; 4
    44bc:	63 e5       	ldi	r22, 0x53	; 83
    44be:	73 e0       	ldi	r23, 0x03	; 3
    44c0:	0e 94 1c 33 	call	0x6638	; 0x6638 <Print::print(__FlashStringHelper const*)>
    44c4:	85 eb       	ldi	r24, 0xB5	; 181
    44c6:	94 e0       	ldi	r25, 0x04	; 4
    44c8:	61 2f       	mov	r22, r17
    44ca:	4a e0       	ldi	r20, 0x0A	; 10
    44cc:	50 e0       	ldi	r21, 0x00	; 0
    44ce:	0e 94 1b 34 	call	0x6836	; 0x6836 <Print::print(unsigned char, int)>
#endif

#if 1 && defined(ALLOW_JSON_OUTPUT)
  Serial.print(';'); // Terminate previous section.
    44d2:	85 eb       	ldi	r24, 0xB5	; 181
    44d4:	94 e0       	ldi	r25, 0x04	; 4
    44d6:	6b e3       	ldi	r22, 0x3B	; 59
    44d8:	0e 94 3f 33 	call	0x667e	; 0x667e <Print::print(char)>
  char buf[80];
  static SimpleStatsRotation<5> ss1; // Configured for maximum different stats.
    44dc:	80 91 0d 03 	lds	r24, 0x030D
    44e0:	88 23       	and	r24, r24
    44e2:	a9 f5       	brne	.+106    	; 0x454e <serialStatusReport()+0x33e>
    44e4:	8d e0       	ldi	r24, 0x0D	; 13
    44e6:	93 e0       	ldi	r25, 0x03	; 3
    44e8:	0e 94 e4 32 	call	0x65c8	; 0x65c8 <__cxa_guard_acquire>
    44ec:	89 2b       	or	r24, r25
    44ee:	79 f1       	breq	.+94     	; 0x454e <serialStatusReport()+0x33e>

    // Initialise base with appropriate storage (non-null) and capacity knowledge.
    SimpleStatsRotationBase(DescValueTuple *_stats, const uint8_t _capacity)
      : capacity(_capacity), stats(_stats), nStats(0),
        lastTXed(~0), lastTXedLoPri(~0), lastTXedHiPri(~0), // Show the first item on the first pass...
        id(NULL)
    44f0:	85 e0       	ldi	r24, 0x05	; 5
    44f2:	80 93 15 03 	sts	0x0315, r24
    44f6:	2f e1       	ldi	r18, 0x1F	; 31
    44f8:	33 e0       	ldi	r19, 0x03	; 3
    44fa:	30 93 17 03 	sts	0x0317, r19
    44fe:	20 93 16 03 	sts	0x0316, r18
    4502:	10 92 18 03 	sts	0x0318, r1
    4506:	8f ef       	ldi	r24, 0xFF	; 255
    4508:	80 93 19 03 	sts	0x0319, r24
    450c:	80 93 1a 03 	sts	0x031A, r24
    4510:	80 93 1b 03 	sts	0x031B, r24
    4514:	10 92 1d 03 	sts	0x031D, r1
    4518:	10 92 1c 03 	sts	0x031C, r1
    // is displayed immediately after the @/ID field when enabled,
    // and missing count values suggest a lost transmission somewhere.
    // Takes minimal space (1 byte).
    struct WriteCount
      {
      WriteCount() : enabled(0), count(0) { }
    451c:	80 91 1e 03 	lds	r24, 0x031E
    4520:	80 7f       	andi	r24, 0xF0	; 240
    4522:	80 93 1e 03 	sts	0x031E, r24
    4526:	f9 01       	movw	r30, r18
    // The default sensitivity is set to forbid transmission at all but minimum (0) leaf TX security settings.
    // By default the stat is normal priority.
    GenericStatsDescriptor(const char * const statKey,
                           const uint8_t statSensitivity = 1,
                           const bool statHighPriority = false)
      : key(statKey), sensitivity(statSensitivity), highPriority(statHighPriority)
    4528:	91 e0       	ldi	r25, 0x01	; 1
    452a:	11 82       	std	Z+1, r1	; 0x01
    452c:	10 82       	st	Z, r1
    452e:	92 83       	std	Z+2, r25	; 0x02
    4530:	13 82       	std	Z+3, r1	; 0x03
#endif

  protected:
    struct DescValueTuple
      {
      DescValueTuple() : descriptor(NULL), value(0) { }
    4532:	15 82       	std	Z+5, r1	; 0x05
    4534:	14 82       	std	Z+4, r1	; 0x04
      int value;

      // Various run-time flags.
      struct Flags
        {
        Flags() : changed(false) { }
    4536:	86 81       	ldd	r24, Z+6	; 0x06
    4538:	8e 7f       	andi	r24, 0xFE	; 254
    453a:	86 83       	std	Z+6, r24	; 0x06
    453c:	37 96       	adiw	r30, 0x07	; 7
    // Stats to be tracked and sent; mandatory/priority items must be first.
    // A copy is taken of the user-supplied set of descriptions, preserving order.
    DescValueTuple stats[MaxStats];

  public:
    SimpleStatsRotation() : SimpleStatsRotationBase(stats, MaxStats) { }
    453e:	83 e0       	ldi	r24, 0x03	; 3
    4540:	e2 34       	cpi	r30, 0x42	; 66
    4542:	f8 07       	cpc	r31, r24
    4544:	91 f7       	brne	.-28     	; 0x452a <serialStatusReport()+0x31a>
    4546:	8d e0       	ldi	r24, 0x0D	; 13
    4548:	93 e0       	ldi	r25, 0x03	; 3
    454a:	0e 94 ee 32 	call	0x65dc	; 0x65dc <__cxa_guard_release>
//  ss1.put(TemperatureC16);
#if defined(HUMIDITY_SENSOR_SUPPORT)
  ss1.put(RelHumidity);
#endif
  ss1.put(AmbLight);
    454e:	85 e1       	ldi	r24, 0x15	; 21
    4550:	93 e0       	ldi	r25, 0x03	; 3
    4552:	69 e5       	ldi	r22, 0x59	; 89
    4554:	73 e0       	ldi	r23, 0x03	; 3
    4556:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <bool SimpleStatsRotationBase::put<unsigned char>(Sensor<unsigned char> const&)>
    // True if successful, false otherwise (eg capacity already reached).
    bool put(SimpleStatsKey key, int newValue);

    // Create/update value for the given sensor.
    // True if successful, false otherwise (eg capacity already reached).
    template <class T> bool put(const Sensor<T> &s) { return(put(s.tag(), s.get())); }
    455a:	e0 91 ef 02 	lds	r30, 0x02EF
    455e:	f0 91 f0 02 	lds	r31, 0x02F0
    4562:	00 84       	ldd	r0, Z+8	; 0x08
    4564:	f1 85       	ldd	r31, Z+9	; 0x09
    4566:	e0 2d       	mov	r30, r0
    4568:	8f ee       	ldi	r24, 0xEF	; 239
    456a:	92 e0       	ldi	r25, 0x02	; 2
    456c:	09 95       	icall
    456e:	8c 01       	movw	r16, r24
    4570:	e0 91 ef 02 	lds	r30, 0x02EF
    4574:	f0 91 f0 02 	lds	r31, 0x02F0
    4578:	02 80       	ldd	r0, Z+2	; 0x02
    457a:	f3 81       	ldd	r31, Z+3	; 0x03
    457c:	e0 2d       	mov	r30, r0
    457e:	8f ee       	ldi	r24, 0xEF	; 239
    4580:	92 e0       	ldi	r25, 0x02	; 2
    4582:	09 95       	icall
    4584:	ac 01       	movw	r20, r24
    4586:	85 e1       	ldi	r24, 0x15	; 21
    4588:	93 e0       	ldi	r25, 0x03	; 3
    458a:	b8 01       	movw	r22, r16
    458c:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <SimpleStatsRotationBase::put(char const*, int)>
  ss1.put(Supply_mV);
#if defined(OCCUPANCY_SUPPORT)
  ss1.put(Occupancy);
    4590:	85 e1       	ldi	r24, 0x15	; 21
    4592:	93 e0       	ldi	r25, 0x03	; 3
    4594:	6a ee       	ldi	r22, 0xEA	; 234
    4596:	71 e0       	ldi	r23, 0x01	; 1
    4598:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <bool SimpleStatsRotationBase::put<unsigned char>(Sensor<unsigned char> const&)>
//  ss1.put(Occupancy.vacHTag(), Occupancy.getVacancyH()); // EXPERIMENTAL
#endif
#if 1 && defined(DEBUG)
    ss1.put(NominalRadValve.tagCMPC(), NominalRadValve.getCumulativeMovementPC()); // EXPERIMENTAL
    459c:	40 91 00 02 	lds	r20, 0x0200
    45a0:	50 91 01 02 	lds	r21, 0x0201
    45a4:	5f 70       	andi	r21, 0x0F	; 15
    45a6:	85 e1       	ldi	r24, 0x15	; 21
    45a8:	93 e0       	ldi	r25, 0x03	; 3
    45aa:	66 e2       	ldi	r22, 0x26	; 38
    45ac:	71 e0       	ldi	r23, 0x01	; 1
    45ae:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <SimpleStatsRotationBase::put(char const*, int)>
#endif
  const uint8_t wrote = ss1.writeJSON((uint8_t *)buf, sizeof(buf), 0, true);
    45b2:	85 e1       	ldi	r24, 0x15	; 21
    45b4:	93 e0       	ldi	r25, 0x03	; 3
    45b6:	6e 01       	movw	r12, r28
    45b8:	08 94       	sec
    45ba:	c1 1c       	adc	r12, r1
    45bc:	d1 1c       	adc	r13, r1
    45be:	b6 01       	movw	r22, r12
    45c0:	40 e5       	ldi	r20, 0x50	; 80
    45c2:	20 e0       	ldi	r18, 0x00	; 0
    45c4:	01 e0       	ldi	r16, 0x01	; 1
    45c6:	ee 24       	eor	r14, r14
    45c8:	0e 94 60 12 	call	0x24c0	; 0x24c0 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)>
  if(0 != wrote) { Serial.print(buf); }
    45cc:	88 23       	and	r24, r24
    45ce:	29 f0       	breq	.+10     	; 0x45da <serialStatusReport()+0x3ca>
    45d0:	85 eb       	ldi	r24, 0xB5	; 181
    45d2:	94 e0       	ldi	r25, 0x04	; 4
    45d4:	b6 01       	movw	r22, r12
    45d6:	0e 94 80 34 	call	0x6900	; 0x6900 <Print::print(char const*)>
#endif

  // Terminate line.
  Serial.println();
    45da:	85 eb       	ldi	r24, 0xB5	; 181
    45dc:	94 e0       	ldi	r25, 0x04	; 4
    45de:	0e 94 47 33 	call	0x668e	; 0x668e <Print::println()>

  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  flushSerialSCTSensitive();
    45e2:	0e 94 88 1a 	call	0x3510	; 0x3510 <flushSerialSCTSensitive()>

  if(neededWaking) { powerDownSerial(); }
    45e6:	bb 20       	and	r11, r11
    45e8:	11 f0       	breq	.+4      	; 0x45ee <serialStatusReport()+0x3de>
    45ea:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <powerDownSerial()>
  }
    45ee:	c0 5b       	subi	r28, 0xB0	; 176
    45f0:	df 4f       	sbci	r29, 0xFF	; 255
    45f2:	0f b6       	in	r0, 0x3f	; 63
    45f4:	f8 94       	cli
    45f6:	de bf       	out	0x3e, r29	; 62
    45f8:	0f be       	out	0x3f, r0	; 63
    45fa:	cd bf       	out	0x3d, r28	; 61
    45fc:	cf 91       	pop	r28
    45fe:	df 91       	pop	r29
    4600:	1f 91       	pop	r17
    4602:	0f 91       	pop	r16
    4604:	ff 90       	pop	r15
    4606:	ef 90       	pop	r14
    4608:	df 90       	pop	r13
    460a:	cf 90       	pop	r12
    460c:	bf 90       	pop	r11
    460e:	08 95       	ret

00004610 <pollCLI(unsigned char)>:
// Used to poll user side for CLI input until specified sub-cycle time.
// Commands should be sent terminated by CR *or* LF; both may prevent 'E' (exit) from working properly.
// A period of less than (say) 500ms will be difficult for direct human response on a raw terminal.
// A period of less than (say) 100ms is not recommended to avoid possibility of overrun on long interactions.
// NOT RENTRANT (eg uses static state for speed and code space).
void pollCLI(const uint8_t maxSCT)
    4610:	bf 92       	push	r11
    4612:	cf 92       	push	r12
    4614:	df 92       	push	r13
    4616:	ef 92       	push	r14
    4618:	ff 92       	push	r15
    461a:	0f 93       	push	r16
    461c:	1f 93       	push	r17
    461e:	df 93       	push	r29
    4620:	cf 93       	push	r28
    4622:	00 d0       	rcall	.+0      	; 0x4624 <pollCLI(unsigned char)+0x14>
    4624:	00 d0       	rcall	.+0      	; 0x4626 <pollCLI(unsigned char)+0x16>
    4626:	00 d0       	rcall	.+0      	; 0x4628 <pollCLI(unsigned char)+0x18>
    4628:	cd b7       	in	r28, 0x3d	; 61
    462a:	de b7       	in	r29, 0x3e	; 62
    462c:	d8 2e       	mov	r13, r24
  {
  // Compute safe limit time given granularity of sleep and buffer fill.
  const uint8_t targetMaxSCT = (maxSCT <= MIN_POLL_SCT) ? ((uint8_t) 0) : ((uint8_t) (maxSCT - 1 - MIN_POLL_SCT));
    462e:	22 e0       	ldi	r18, 0x02	; 2
    4630:	28 17       	cp	r18, r24
    4632:	10 f0       	brcs	.+4      	; 0x4638 <pollCLI(unsigned char)+0x28>
    4634:	00 e0       	ldi	r16, 0x00	; 0
    4636:	02 c0       	rjmp	.+4      	; 0x463c <pollCLI(unsigned char)+0x2c>
    4638:	08 2f       	mov	r16, r24
    463a:	03 50       	subi	r16, 0x03	; 3
  if(getSubCycleTime() >= targetMaxSCT) { return; } // Too short to try.
    463c:	80 91 b2 00 	lds	r24, 0x00B2
    4640:	80 17       	cp	r24, r16
    4642:	08 f0       	brcs	.+2      	; 0x4646 <pollCLI(unsigned char)+0x36>
    4644:	15 c3       	rjmp	.+1578   	; 0x4c70 <pollCLI(unsigned char)+0x660>

  const bool neededWaking = powerUpSerialIfDisabled();
    4646:	0e 94 9d 1a 	call	0x353a	; 0x353a <powerUpSerialIfDisabled()>
    464a:	b8 2e       	mov	r11, r24
    464c:	04 c0       	rjmp	.+8      	; 0x4656 <pollCLI(unsigned char)+0x46>

  // Purge any stray pending input, such as a trailing LF from previous input.
  while(Serial.available() > 0) { Serial.read(); }
    464e:	85 eb       	ldi	r24, 0xB5	; 181
    4650:	94 e0       	ldi	r25, 0x04	; 4
    4652:	0e 94 06 32 	call	0x640c	; 0x640c <HardwareSerial::read()>
    4656:	85 eb       	ldi	r24, 0xB5	; 181
    4658:	94 e0       	ldi	r25, 0x04	; 4
    465a:	0e 94 d5 31 	call	0x63aa	; 0x63aa <HardwareSerial::available()>
    465e:	18 16       	cp	r1, r24
    4660:	19 06       	cpc	r1, r25
    4662:	ac f3       	brlt	.-22     	; 0x464e <pollCLI(unsigned char)+0x3e>

  // Generate and flush prompt character to the user, after a CRLF to reduce ambiguity.
  // Do this AFTER flushing the input so that sending command immediately after prompt should work.
  Serial.println();
    4664:	85 eb       	ldi	r24, 0xB5	; 181
    4666:	94 e0       	ldi	r25, 0x04	; 4
    4668:	0e 94 47 33 	call	0x668e	; 0x668e <Print::println()>
  Serial.print(CLIPromptChar);
    466c:	85 eb       	ldi	r24, 0xB5	; 181
    466e:	94 e0       	ldi	r25, 0x04	; 4
    4670:	6e e3       	ldi	r22, 0x3E	; 62
    4672:	0e 94 3f 33 	call	0x667e	; 0x667e <Print::print(char)>
  // Idle a short while to try to save energy, waiting for serial TX end and possible RX response start.
  flushSerialSCTSensitive();
    4676:	0e 94 88 1a 	call	0x3510	; 0x3510 <flushSerialSCTSensitive()>
    467a:	10 e0       	ldi	r17, 0x00	; 0
    // Idle waiting for input, to save power, then/else do something useful with some CPU cycles...
#if CAN_IDLE_30MS
    // Minimise power consumption leaving CPU/UART clock running, if no danger of RX overrun.
    // Don't do this too close to end of target end time to avoid missing it.
    // Note: may get woken on timer0 interrupts as well as RX and watchdog.
    if(sct < targetMaxSCT-2) { idle15AndPoll(); continue; }
    467c:	e0 2e       	mov	r14, r16
    467e:	ff 24       	eor	r15, r15
    4680:	8e ef       	ldi	r24, 0xFE	; 254
    4682:	9f ef       	ldi	r25, 0xFF	; 255
    4684:	e8 0e       	add	r14, r24
    4686:	f9 1e       	adc	r15, r25
#ifdef ENABLE_AVR_IDLE_MODE
// Idle productively polling I/O, etc, across the system while spending time in low-power mode if possible.
// Typically sleeps for nominally up to 30ms; tries to allow ealier wakeup if interrupt is received, etc.
// (Will often be prematurely woken by timer0 with ~16ms interval.)
// True iff watchdog timer expired; false if something else woke the CPU.
static bool inline idle15AndPoll() { const bool wd = idleCPU(WDTO_15MS); pollIO(!wd); return(wd); }
    4688:	cc 24       	eor	r12, r12
    468a:	c3 94       	inc	r12
  //Serial.setTimeout(timeoutms); const int n = Serial.readBytesUntil('\r', buf, MAXIMUM_CLI_RESPONSE_CHARS);
  uint8_t n = 0;
  while(n < MAXIMUM_CLI_RESPONSE_CHARS)
    {
    // Read next character if immediately available.
    if(Serial.available() > 0)
    468c:	85 eb       	ldi	r24, 0xB5	; 181
    468e:	94 e0       	ldi	r25, 0x04	; 4
    4690:	0e 94 d5 31 	call	0x63aa	; 0x63aa <HardwareSerial::available()>
    4694:	18 16       	cp	r1, r24
    4696:	19 06       	cpc	r1, r25
    4698:	0c f0       	brlt	.+2      	; 0x469c <pollCLI(unsigned char)+0x8c>
    469a:	43 c0       	rjmp	.+134    	; 0x4722 <pollCLI(unsigned char)+0x112>
      {
      int ic = Serial.read();
    469c:	85 eb       	ldi	r24, 0xB5	; 181
    469e:	94 e0       	ldi	r25, 0x04	; 4
    46a0:	0e 94 06 32 	call	0x640c	; 0x640c <HardwareSerial::read()>
    46a4:	bc 01       	movw	r22, r24
      if(('\r' == ic) || ('\n' == ic)) { break; } // Stop at CR, eg from CRLF, or LF.
    46a6:	8d 30       	cpi	r24, 0x0D	; 13
    46a8:	91 05       	cpc	r25, r1
    46aa:	09 f4       	brne	.+2      	; 0x46ae <pollCLI(unsigned char)+0x9e>
    46ac:	50 c0       	rjmp	.+160    	; 0x474e <pollCLI(unsigned char)+0x13e>
    46ae:	8a 30       	cpi	r24, 0x0A	; 10
    46b0:	91 05       	cpc	r25, r1
    46b2:	09 f4       	brne	.+2      	; 0x46b6 <pollCLI(unsigned char)+0xa6>
    46b4:	4c c0       	rjmp	.+152    	; 0x474e <pollCLI(unsigned char)+0x13e>
#ifdef CLI_INTERACTIVE_ECHO
      if(('\b' == ic) || (127 == ic))
    46b6:	88 30       	cpi	r24, 0x08	; 8
    46b8:	91 05       	cpc	r25, r1
    46ba:	19 f0       	breq	.+6      	; 0x46c2 <pollCLI(unsigned char)+0xb2>
    46bc:	8f 37       	cpi	r24, 0x7F	; 127
    46be:	91 05       	cpc	r25, r1
    46c0:	99 f4       	brne	.+38     	; 0x46e8 <pollCLI(unsigned char)+0xd8>
        {
        // Handle backspace or delete as delete...
        if(n > 0) // Ignore unless something to delete...
    46c2:	11 23       	and	r17, r17
    46c4:	19 f3       	breq	.-58     	; 0x468c <pollCLI(unsigned char)+0x7c>
          {
          Serial.print('\b');
    46c6:	85 eb       	ldi	r24, 0xB5	; 181
    46c8:	94 e0       	ldi	r25, 0x04	; 4
    46ca:	68 e0       	ldi	r22, 0x08	; 8
    46cc:	0e 94 3f 33 	call	0x667e	; 0x667e <Print::print(char)>
          Serial.print(' ');
    46d0:	85 eb       	ldi	r24, 0xB5	; 181
    46d2:	94 e0       	ldi	r25, 0x04	; 4
    46d4:	60 e2       	ldi	r22, 0x20	; 32
    46d6:	0e 94 3f 33 	call	0x667e	; 0x667e <Print::print(char)>
          Serial.print('\b');
    46da:	85 eb       	ldi	r24, 0xB5	; 181
    46dc:	94 e0       	ldi	r25, 0x04	; 4
    46de:	68 e0       	ldi	r22, 0x08	; 8
    46e0:	0e 94 3f 33 	call	0x667e	; 0x667e <Print::print(char)>
          --n;
    46e4:	11 50       	subi	r17, 0x01	; 1
    46e6:	2f c0       	rjmp	.+94     	; 0x4746 <pollCLI(unsigned char)+0x136>
          }
        continue;
        }
#endif
      if((ic < 32) || (ic > 126)) { continue; } // Drop bogus characters.
    46e8:	80 97       	sbiw	r24, 0x20	; 32
    46ea:	8f 35       	cpi	r24, 0x5F	; 95
    46ec:	91 05       	cpc	r25, r1
    46ee:	58 f5       	brcc	.+86     	; 0x4746 <pollCLI(unsigned char)+0x136>
      // Ignore any leading char that is not a letter (or '?'),
      // and force leading (command) char to upper case.
      if(0 == n)
    46f0:	11 23       	and	r17, r17
    46f2:	61 f4       	brne	.+24     	; 0x470c <pollCLI(unsigned char)+0xfc>
        {
        ic = toupper(ic);
    46f4:	cb 01       	movw	r24, r22
    46f6:	0e 94 98 35 	call	0x6b30	; 0x6b30 <toupper>
    46fa:	bc 01       	movw	r22, r24
        if(('?' != ic) && ((ic < 'A') || (ic > 'Z'))) { continue; }
    46fc:	8f 33       	cpi	r24, 0x3F	; 63
    46fe:	91 05       	cpc	r25, r1
    4700:	29 f0       	breq	.+10     	; 0x470c <pollCLI(unsigned char)+0xfc>
    4702:	81 54       	subi	r24, 0x41	; 65
    4704:	90 40       	sbci	r25, 0x00	; 0
    4706:	4a 97       	sbiw	r24, 0x1a	; 26
    4708:	08 f0       	brcs	.+2      	; 0x470c <pollCLI(unsigned char)+0xfc>
    470a:	c0 cf       	rjmp	.-128    	; 0x468c <pollCLI(unsigned char)+0x7c>
        }
      // Store the incoming char.
      buf[n++] = (char) ic;
    470c:	e1 2f       	mov	r30, r17
    470e:	f0 e0       	ldi	r31, 0x00	; 0
    4710:	ed 5f       	subi	r30, 0xFD	; 253
    4712:	fc 4f       	sbci	r31, 0xFC	; 252
    4714:	60 83       	st	Z, r22
    4716:	1f 5f       	subi	r17, 0xFF	; 255
#ifdef CLI_INTERACTIVE_ECHO
      Serial.print((char) ic); // Echo immediately.
    4718:	85 eb       	ldi	r24, 0xB5	; 181
    471a:	94 e0       	ldi	r25, 0x04	; 4
    471c:	0e 94 3f 33 	call	0x667e	; 0x667e <Print::print(char)>
    4720:	12 c0       	rjmp	.+36     	; 0x4746 <pollCLI(unsigned char)+0x136>
#endif
      continue;
      }
    // Quit WITHOUT PROCESSING THE POSSIBLY-INCOMPLETE INPUT if time limit is hit (or very close).
    const uint8_t sct = getSubCycleTime();
    4722:	80 91 b2 00 	lds	r24, 0x00B2
    if(sct >= targetMaxSCT)
    4726:	80 17       	cp	r24, r16
    4728:	08 f0       	brcs	.+2      	; 0x472c <pollCLI(unsigned char)+0x11c>
    472a:	85 c2       	rjmp	.+1290   	; 0x4c36 <pollCLI(unsigned char)+0x626>
    // Idle waiting for input, to save power, then/else do something useful with some CPU cycles...
#if CAN_IDLE_30MS
    // Minimise power consumption leaving CPU/UART clock running, if no danger of RX overrun.
    // Don't do this too close to end of target end time to avoid missing it.
    // Note: may get woken on timer0 interrupts as well as RX and watchdog.
    if(sct < targetMaxSCT-2) { idle15AndPoll(); continue; }
    472c:	90 e0       	ldi	r25, 0x00	; 0
    472e:	8e 15       	cp	r24, r14
    4730:	9f 05       	cpc	r25, r15
    4732:	3c f4       	brge	.+14     	; 0x4742 <pollCLI(unsigned char)+0x132>
    4734:	80 e0       	ldi	r24, 0x00	; 0
    4736:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <idleCPU(signed char)>
    473a:	8c 25       	eor	r24, r12
    473c:	0e 94 ab 06 	call	0xd56	; 0xd56 <pollIO(bool)>
    4740:	02 c0       	rjmp	.+4      	; 0x4746 <pollCLI(unsigned char)+0x136>
#endif
    burnHundredsOfCyclesProductivelyAndPoll(); // Use time time to poll for I/O, etc.
    4742:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <burnHundredsOfCyclesProductivelyAndPoll()>
  // Read a line up to a terminating CR, either on its own or as part of CRLF.
  // (Note that command content and timing may be useful to fold into PRNG entropy pool.)
  static char buf[MAXIMUM_CLI_RESPONSE_CHARS+1]; // Note: static state, efficient for small command lines.  Space for terminating '\0'.
  //Serial.setTimeout(timeoutms); const int n = Serial.readBytesUntil('\r', buf, MAXIMUM_CLI_RESPONSE_CHARS);
  uint8_t n = 0;
  while(n < MAXIMUM_CLI_RESPONSE_CHARS)
    4746:	19 30       	cpi	r17, 0x09	; 9
    4748:	08 f4       	brcc	.+2      	; 0x474c <pollCLI(unsigned char)+0x13c>
    474a:	a0 cf       	rjmp	.-192    	; 0x468c <pollCLI(unsigned char)+0x7c>
    474c:	03 c0       	rjmp	.+6      	; 0x4754 <pollCLI(unsigned char)+0x144>
    if(sct < targetMaxSCT-2) { idle15AndPoll(); continue; }
#endif
    burnHundredsOfCyclesProductivelyAndPoll(); // Use time time to poll for I/O, etc.
    }

  if(n > 0)
    474e:	11 23       	and	r17, r17
    4750:	09 f4       	brne	.+2      	; 0x4754 <pollCLI(unsigned char)+0x144>
    4752:	71 c2       	rjmp	.+1250   	; 0x4c36 <pollCLI(unsigned char)+0x626>
    {
    // Restart the CLI timer on receipt of plausible (ASCII) input (cf noise from UART floating or starting up),
    // Else print a very brief low-CPU-cost help message and give up as efficiently and safely and quickly as possible.
    const char firstChar = buf[0];
    const bool plausibleCommand = ((firstChar >= '?') && (firstChar <= 'z'));
    if(plausibleCommand) { resetCLIActiveTimer(); }
    4754:	80 91 03 03 	lds	r24, 0x0303
    4758:	8f 53       	subi	r24, 0x3F	; 63
    475a:	8c 33       	cpi	r24, 0x3C	; 60
    475c:	08 f0       	brcs	.+2      	; 0x4760 <pollCLI(unsigned char)+0x150>
    475e:	40 c0       	rjmp	.+128    	; 0x47e0 <pollCLI(unsigned char)+0x1d0>
#define CLI_DEFAULT_TIMEOUT_M 2
static volatile uint8_t CLITimeoutM = CLI_DEFAULT_TIMEOUT_M;

// Reset CLI active timer to the full whack before it goes inactive again (ie makes CLI active for a while).
// Thread-safe.
void resetCLIActiveTimer() { CLITimeoutM = CLI_DEFAULT_TIMEOUT_M; }
    4760:	82 e0       	ldi	r24, 0x02	; 2
    4762:	80 93 35 01 	sts	0x0135, r24
      if(neededWaking) { powerDownSerial(); }
      return;
      }

    // Null-terminate the received command line.
    buf[n] = '\0';
    4766:	e1 2f       	mov	r30, r17
    4768:	f0 e0       	ldi	r31, 0x00	; 0
    476a:	ed 5f       	subi	r30, 0xFD	; 253
    476c:	fc 4f       	sbci	r31, 0xFC	; 252
    476e:	10 82       	st	Z, r1

    // strupr(buf); // Force to upper-case
#ifdef CLI_INTERACTIVE_ECHO
    Serial.println(); // ACK user's end-of-line.
    4770:	85 eb       	ldi	r24, 0xB5	; 181
    4772:	94 e0       	ldi	r25, 0x04	; 4
    4774:	0e 94 47 33 	call	0x668e	; 0x668e <Print::println()>
    Serial.println(buf); // Echo the line received (asynchronously).
#endif

    // Process the input received, with action based on the first char...
    bool showStatus = true; // Default to showing status.
    switch(buf[0])
    4778:	80 91 03 03 	lds	r24, 0x0303
    477c:	80 35       	cpi	r24, 0x50	; 80
    477e:	09 f4       	brne	.+2      	; 0x4782 <pollCLI(unsigned char)+0x172>
    4780:	54 c1       	rjmp	.+680    	; 0x4a2a <pollCLI(unsigned char)+0x41a>
    4782:	81 35       	cpi	r24, 0x51	; 81
    4784:	b4 f4       	brge	.+44     	; 0x47b2 <pollCLI(unsigned char)+0x1a2>
    4786:	88 34       	cpi	r24, 0x48	; 72
    4788:	09 f4       	brne	.+2      	; 0x478c <pollCLI(unsigned char)+0x17c>
    478a:	e7 c0       	rjmp	.+462    	; 0x495a <pollCLI(unsigned char)+0x34a>
    478c:	89 34       	cpi	r24, 0x49	; 73
    478e:	44 f4       	brge	.+16     	; 0x47a0 <pollCLI(unsigned char)+0x190>
    4790:	85 34       	cpi	r24, 0x45	; 69
    4792:	79 f1       	breq	.+94     	; 0x47f2 <pollCLI(unsigned char)+0x1e2>
    4794:	86 34       	cpi	r24, 0x46	; 70
    4796:	09 f4       	brne	.+2      	; 0x479a <pollCLI(unsigned char)+0x18a>
    4798:	b6 c0       	rjmp	.+364    	; 0x4906 <pollCLI(unsigned char)+0x2f6>
    479a:	84 34       	cpi	r24, 0x44	; 68
    479c:	31 f5       	brne	.+76     	; 0x47ea <pollCLI(unsigned char)+0x1da>
    479e:	2c c0       	rjmp	.+88     	; 0x47f8 <pollCLI(unsigned char)+0x1e8>
    47a0:	8c 34       	cpi	r24, 0x4C	; 76
    47a2:	09 f4       	brne	.+2      	; 0x47a6 <pollCLI(unsigned char)+0x196>
    47a4:	1a c1       	rjmp	.+564    	; 0x49da <pollCLI(unsigned char)+0x3ca>
    47a6:	8f 34       	cpi	r24, 0x4F	; 79
    47a8:	09 f4       	brne	.+2      	; 0x47ac <pollCLI(unsigned char)+0x19c>
    47aa:	2b c1       	rjmp	.+598    	; 0x4a02 <pollCLI(unsigned char)+0x3f2>
    47ac:	89 34       	cpi	r24, 0x49	; 73
    47ae:	e9 f4       	brne	.+58     	; 0x47ea <pollCLI(unsigned char)+0x1da>
    47b0:	10 c1       	rjmp	.+544    	; 0x49d2 <pollCLI(unsigned char)+0x3c2>
    47b2:	86 35       	cpi	r24, 0x56	; 86
    47b4:	09 f4       	brne	.+2      	; 0x47b8 <pollCLI(unsigned char)+0x1a8>
    47b6:	da c1       	rjmp	.+948    	; 0x4b6c <pollCLI(unsigned char)+0x55c>
    47b8:	87 35       	cpi	r24, 0x57	; 87
    47ba:	4c f4       	brge	.+18     	; 0x47ce <pollCLI(unsigned char)+0x1be>
    47bc:	83 35       	cpi	r24, 0x53	; 83
    47be:	09 f4       	brne	.+2      	; 0x47c2 <pollCLI(unsigned char)+0x1b2>
    47c0:	7a c1       	rjmp	.+756    	; 0x4ab6 <pollCLI(unsigned char)+0x4a6>
    47c2:	84 35       	cpi	r24, 0x54	; 84
    47c4:	09 f4       	brne	.+2      	; 0x47c8 <pollCLI(unsigned char)+0x1b8>
    47c6:	a9 c1       	rjmp	.+850    	; 0x4b1a <pollCLI(unsigned char)+0x50a>
    47c8:	81 35       	cpi	r24, 0x51	; 81
    47ca:	79 f4       	brne	.+30     	; 0x47ea <pollCLI(unsigned char)+0x1da>
    47cc:	71 c1       	rjmp	.+738    	; 0x4ab0 <pollCLI(unsigned char)+0x4a0>
    47ce:	88 35       	cpi	r24, 0x58	; 88
    47d0:	09 f4       	brne	.+2      	; 0x47d4 <pollCLI(unsigned char)+0x1c4>
    47d2:	e8 c1       	rjmp	.+976    	; 0x4ba4 <pollCLI(unsigned char)+0x594>
    47d4:	88 35       	cpi	r24, 0x58	; 88
    47d6:	0c f4       	brge	.+2      	; 0x47da <pollCLI(unsigned char)+0x1ca>
    47d8:	cc c1       	rjmp	.+920    	; 0x4b72 <pollCLI(unsigned char)+0x562>
    47da:	8a 35       	cpi	r24, 0x5A	; 90
    47dc:	31 f4       	brne	.+12     	; 0x47ea <pollCLI(unsigned char)+0x1da>
    47de:	f9 c1       	rjmp	.+1010   	; 0x4bd2 <pollCLI(unsigned char)+0x5c2>
    const char firstChar = buf[0];
    const bool plausibleCommand = ((firstChar >= '?') && (firstChar <= 'z'));
    if(plausibleCommand) { resetCLIActiveTimer(); }
    else
      {
      Serial.println(F("? for CLI help"));
    47e0:	85 eb       	ldi	r24, 0xB5	; 181
    47e2:	94 e0       	ldi	r25, 0x04	; 4
    47e4:	6f e7       	ldi	r22, 0x7F	; 127
    47e6:	71 e0       	ldi	r23, 0x01	; 1
    47e8:	23 c2       	rjmp	.+1094   	; 0x4c30 <pollCLI(unsigned char)+0x620>
    bool showStatus = true; // Default to showing status.
    switch(buf[0])
      {
      // Explicit request for help, or unrecognised first character.
      // Avoid showing status as may already be rather a lot of output.
      default: case '?': { dumpCLIUsage(maxSCT); showStatus = false; break; }
    47ea:	8d 2d       	mov	r24, r13
    47ec:	0e 94 05 20 	call	0x400a	; 0x400a <dumpCLIUsage(unsigned char)>
    47f0:	1b c2       	rjmp	.+1078   	; 0x4c28 <pollCLI(unsigned char)+0x618>
#endif

      // Exit/deactivate CLI immediately.
      // This should be followed by JUST CR ('\r') OR LF ('\b')
      // else the second will wake the CLI up again.
      case 'E': { CLITimeoutM = 0; break; }
    47f2:	10 92 35 01 	sts	0x0135, r1
    47f6:	39 c2       	rjmp	.+1138   	; 0x4c6a <pollCLI(unsigned char)+0x65a>
          }
#endif
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 3 character sequence makes sense and is safe to tokenise, eg "D 0".
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    47f8:	13 30       	cpi	r17, 0x03	; 3
    47fa:	08 f4       	brcc	.+2      	; 0x47fe <pollCLI(unsigned char)+0x1ee>
    47fc:	15 c2       	rjmp	.+1066   	; 0x4c28 <pollCLI(unsigned char)+0x618>
    47fe:	85 e0       	ldi	r24, 0x05	; 5
    4800:	93 e0       	ldi	r25, 0x03	; 3
    4802:	6b e2       	ldi	r22, 0x2B	; 43
    4804:	71 e0       	ldi	r23, 0x01	; 1
    4806:	ae 01       	movw	r20, r28
    4808:	4f 5f       	subi	r20, 0xFF	; 255
    480a:	5f 4f       	sbci	r21, 0xFF	; 255
    480c:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <strtok_r>
    4810:	00 97       	sbiw	r24, 0x00	; 0
    4812:	09 f4       	brne	.+2      	; 0x4816 <pollCLI(unsigned char)+0x206>
    4814:	09 c2       	rjmp	.+1042   	; 0x4c28 <pollCLI(unsigned char)+0x618>
          {
          const uint8_t setN = (uint8_t) atoi(tok1);
    4816:	0e 94 a3 02 	call	0x546	; 0x546 <atoi>
    481a:	08 2f       	mov	r16, r24
          const uint8_t thisHH = getHoursLT();
    481c:	0e 94 ca 1c 	call	0x3994	; 0x3994 <getHoursLT()>
    4820:	f8 2e       	mov	r15, r24
//          const uint8_t lastHH = (thisHH > 0) ? (thisHH-1) : 23;
          // Print label.
          switch(setN)
    4822:	06 30       	cpi	r16, 0x06	; 6
    4824:	28 f4       	brcc	.+10     	; 0x4830 <pollCLI(unsigned char)+0x220>
    4826:	04 30       	cpi	r16, 0x04	; 4
    4828:	a0 f4       	brcc	.+40     	; 0x4852 <pollCLI(unsigned char)+0x242>
    482a:	02 30       	cpi	r16, 0x02	; 2
    482c:	48 f0       	brcs	.+18     	; 0x4840 <pollCLI(unsigned char)+0x230>
    482e:	0c c0       	rjmp	.+24     	; 0x4848 <pollCLI(unsigned char)+0x238>
    4830:	08 30       	cpi	r16, 0x08	; 8
    4832:	a0 f0       	brcs	.+40     	; 0x485c <pollCLI(unsigned char)+0x24c>
    4834:	0a 30       	cpi	r16, 0x0A	; 10
    4836:	c8 f0       	brcs	.+50     	; 0x486a <pollCLI(unsigned char)+0x25a>
            {
            default: { Serial.print('?'); break; }
    4838:	85 eb       	ldi	r24, 0xB5	; 181
    483a:	94 e0       	ldi	r25, 0x04	; 4
    483c:	6f e3       	ldi	r22, 0x3F	; 63
    483e:	18 c0       	rjmp	.+48     	; 0x4870 <pollCLI(unsigned char)+0x260>
            case EE_STATS_SET_TEMP_BY_HOUR: case EE_STATS_SET_TEMP_BY_HOUR_SMOOTHED: { Serial.print('C'); break; }
    4840:	85 eb       	ldi	r24, 0xB5	; 181
    4842:	94 e0       	ldi	r25, 0x04	; 4
    4844:	63 e4       	ldi	r22, 0x43	; 67
    4846:	14 c0       	rjmp	.+40     	; 0x4870 <pollCLI(unsigned char)+0x260>
            case EE_STATS_SET_AMBLIGHT_BY_HOUR: case EE_STATS_SET_AMBLIGHT_BY_HOUR_SMOOTHED: { Serial.print(F("ambl")); break; }
    4848:	85 eb       	ldi	r24, 0xB5	; 181
    484a:	94 e0       	ldi	r25, 0x04	; 4
    484c:	6a e7       	ldi	r22, 0x7A	; 122
    484e:	71 e0       	ldi	r23, 0x01	; 1
    4850:	09 c0       	rjmp	.+18     	; 0x4864 <pollCLI(unsigned char)+0x254>
            case EE_STATS_SET_OCCPC_BY_HOUR: case EE_STATS_SET_OCCPC_BY_HOUR_SMOOTHED: { Serial.print(F("occ%")); break; }
    4852:	85 eb       	ldi	r24, 0xB5	; 181
    4854:	94 e0       	ldi	r25, 0x04	; 4
    4856:	65 e7       	ldi	r22, 0x75	; 117
    4858:	71 e0       	ldi	r23, 0x01	; 1
    485a:	04 c0       	rjmp	.+8      	; 0x4864 <pollCLI(unsigned char)+0x254>
            case EE_STATS_SET_RHPC_BY_HOUR: case EE_STATS_SET_RHPC_BY_HOUR_SMOOTHED: { Serial.print(F("RH%")); break; }
    485c:	85 eb       	ldi	r24, 0xB5	; 181
    485e:	94 e0       	ldi	r25, 0x04	; 4
    4860:	61 e7       	ldi	r22, 0x71	; 113
    4862:	71 e0       	ldi	r23, 0x01	; 1
    4864:	0e 94 1c 33 	call	0x6638	; 0x6638 <Print::print(__FlashStringHelper const*)>
    4868:	05 c0       	rjmp	.+10     	; 0x4874 <pollCLI(unsigned char)+0x264>
            case EE_STATS_SET_USER1_BY_HOUR: case EE_STATS_SET_USER1_BY_HOUR_SMOOTHED: { Serial.print('u'); break; }
    486a:	85 eb       	ldi	r24, 0xB5	; 181
    486c:	94 e0       	ldi	r25, 0x04	; 4
    486e:	65 e7       	ldi	r22, 0x75	; 117
    4870:	0e 94 3f 33 	call	0x667e	; 0x667e <Print::print(char)>
#if defined(EE_STATS_SET_WARMMODE_BY_HOUR_OF_WK)
            case EE_STATS_SET_WARMMODE_BY_HOUR_OF_WK: { Serial.print('W'); break; }
#endif
            }
          Serial_print_space();
    4874:	0e 94 a8 1f 	call	0x3f50	; 0x3f50 <Serial_print_space()>
          if(setN & 1) { Serial.print(F("smoothed")); } else { Serial.print(F("last")); }
    4878:	00 ff       	sbrs	r16, 0
    487a:	05 c0       	rjmp	.+10     	; 0x4886 <pollCLI(unsigned char)+0x276>
    487c:	85 eb       	ldi	r24, 0xB5	; 181
    487e:	94 e0       	ldi	r25, 0x04	; 4
    4880:	68 e6       	ldi	r22, 0x68	; 104
    4882:	71 e0       	ldi	r23, 0x01	; 1
    4884:	04 c0       	rjmp	.+8      	; 0x488e <pollCLI(unsigned char)+0x27e>
    4886:	85 eb       	ldi	r24, 0xB5	; 181
    4888:	94 e0       	ldi	r25, 0x04	; 4
    488a:	63 e6       	ldi	r22, 0x63	; 99
    488c:	71 e0       	ldi	r23, 0x01	; 1
    488e:	0e 94 1c 33 	call	0x6638	; 0x6638 <Print::print(__FlashStringHelper const*)>
          Serial_print_space();
    4892:	0e 94 a8 1f 	call	0x3f50	; 0x3f50 <Serial_print_space()>
    4896:	10 e0       	ldi	r17, 0x00	; 0
          // Now print values.
          for(uint8_t hh = 0; hh < 24; ++hh)
            {
            const uint8_t statRaw = getByHourStat(hh, setN);
    4898:	81 2f       	mov	r24, r17
    489a:	60 2f       	mov	r22, r16
    489c:	0e 94 49 06 	call	0xc92	; 0xc92 <getByHourStat(unsigned char, unsigned char)>
    48a0:	68 2f       	mov	r22, r24
            // For unset stat show '-'...
            if(STATS_UNSET_BYTE == statRaw) { Serial.print('-'); }
    48a2:	8f 3f       	cpi	r24, 0xFF	; 255
    48a4:	31 f4       	brne	.+12     	; 0x48b2 <pollCLI(unsigned char)+0x2a2>
    48a6:	85 eb       	ldi	r24, 0xB5	; 181
    48a8:	94 e0       	ldi	r25, 0x04	; 4
    48aa:	6d e2       	ldi	r22, 0x2D	; 45
    48ac:	0e 94 3f 33 	call	0x667e	; 0x667e <Print::print(char)>
    48b0:	19 c0       	rjmp	.+50     	; 0x48e4 <pollCLI(unsigned char)+0x2d4>
            // ...else print more human-friendly version of stat.
            else switch(setN)
    48b2:	02 30       	cpi	r16, 0x02	; 2
    48b4:	38 f0       	brcs	.+14     	; 0x48c4 <pollCLI(unsigned char)+0x2b4>
              {
              default: { Serial.print(statRaw); break; } // Generic decimal stats.
    48b6:	85 eb       	ldi	r24, 0xB5	; 181
    48b8:	94 e0       	ldi	r25, 0x04	; 4
    48ba:	4a e0       	ldi	r20, 0x0A	; 10
    48bc:	50 e0       	ldi	r21, 0x00	; 0
    48be:	0e 94 1b 34 	call	0x6836	; 0x6836 <Print::print(unsigned char, int)>
    48c2:	10 c0       	rjmp	.+32     	; 0x48e4 <pollCLI(unsigned char)+0x2d4>

              // Special formatting cases.
              case EE_STATS_SET_TEMP_BY_HOUR: case EE_STATS_SET_TEMP_BY_HOUR_SMOOTHED:
                // Uncompanded temperature, rounded.
                { Serial.print((expandTempC16(statRaw)+8) >> 4); break; }
    48c4:	0e 94 88 06 	call	0xd10	; 0xd10 <expandTempC16(unsigned char)>
    48c8:	bc 01       	movw	r22, r24
    48ca:	68 5f       	subi	r22, 0xF8	; 248
    48cc:	7f 4f       	sbci	r23, 0xFF	; 255
    48ce:	54 e0       	ldi	r21, 0x04	; 4
    48d0:	75 95       	asr	r23
    48d2:	67 95       	ror	r22
    48d4:	5a 95       	dec	r21
    48d6:	e1 f7       	brne	.-8      	; 0x48d0 <pollCLI(unsigned char)+0x2c0>
    48d8:	85 eb       	ldi	r24, 0xB5	; 181
    48da:	94 e0       	ldi	r25, 0x04	; 4
    48dc:	4a e0       	ldi	r20, 0x0A	; 10
    48de:	50 e0       	ldi	r21, 0x00	; 0
    48e0:	0e 94 6d 34 	call	0x68da	; 0x68da <Print::print(int, int)>
              case EE_STATS_SET_WARMMODE_BY_HOUR_OF_WK:
                // Warm mode usage bitmap by hour over week.
                { Serial.print(statRaw, HEX); break; }
#endif
              }
            if(hh == thisHH) { Serial.print('<'); } // Highlight current stat in this set.
    48e4:	1f 15       	cp	r17, r15
    48e6:	29 f4       	brne	.+10     	; 0x48f2 <pollCLI(unsigned char)+0x2e2>
    48e8:	85 eb       	ldi	r24, 0xB5	; 181
    48ea:	94 e0       	ldi	r25, 0x04	; 4
    48ec:	6c e3       	ldi	r22, 0x3C	; 60
    48ee:	0e 94 3f 33 	call	0x667e	; 0x667e <Print::print(char)>
#if 0 && defined(DEBUG)
            if(inOutlierQuartile(false, setN, hh)) { Serial.print('B'); } // In bottom quartile.
            if(inOutlierQuartile(true, setN, hh)) { Serial.print('T'); } // In top quartile.
#endif
            Serial_print_space();
    48f2:	0e 94 a8 1f 	call	0x3f50	; 0x3f50 <Serial_print_space()>
            }
          Serial_print_space();
          if(setN & 1) { Serial.print(F("smoothed")); } else { Serial.print(F("last")); }
          Serial_print_space();
          // Now print values.
          for(uint8_t hh = 0; hh < 24; ++hh)
    48f6:	1f 5f       	subi	r17, 0xFF	; 255
    48f8:	18 31       	cpi	r17, 0x18	; 24
    48fa:	71 f6       	brne	.-100    	; 0x4898 <pollCLI(unsigned char)+0x288>
            if(inOutlierQuartile(false, setN, hh)) { Serial.print('B'); } // In bottom quartile.
            if(inOutlierQuartile(true, setN, hh)) { Serial.print('T'); } // In top quartile.
#endif
            Serial_print_space();
            }
          Serial.println();
    48fc:	85 eb       	ldi	r24, 0xB5	; 181
    48fe:	94 e0       	ldi	r25, 0x04	; 4
    4900:	0e 94 47 33 	call	0x668e	; 0x668e <Print::println()>
    4904:	91 c1       	rjmp	.+802    	; 0x4c28 <pollCLI(unsigned char)+0x618>

      // Switch to FROST mode OR set FROST/setback temperature (even with temp pot available).
      // With F! force to frost and holiday (long-vacant) mode.  Useful for testing and for remote CLI use.
      case 'F':
        {
        if(n == 2)
    4906:	12 30       	cpi	r17, 0x02	; 2
    4908:	a1 f4       	brne	.+40     	; 0x4932 <pollCLI(unsigned char)+0x322>
          {
          if('!' == buf[1]) { Serial.println(F("hols")); }
    490a:	80 91 04 03 	lds	r24, 0x0304
    490e:	81 32       	cpi	r24, 0x21	; 33
    4910:	31 f4       	brne	.+12     	; 0x491e <pollCLI(unsigned char)+0x30e>
    4912:	85 eb       	ldi	r24, 0xB5	; 181
    4914:	94 e0       	ldi	r25, 0x04	; 4
    4916:	6e e5       	ldi	r22, 0x5E	; 94
    4918:	71 e0       	ldi	r23, 0x01	; 1
    491a:	0e 94 67 33 	call	0x66ce	; 0x66ce <Print::println(__FlashStringHelper const*)>

    // Put directly into energy-conserving 'holiday mode' by making room appear to be 'long vacant'.
    // Be careful of retriggering presence immediately if this is set locally.
    // Set apparent vacancy to maximum to make setting obvious and to hide further vacancy from snooping.
    // Code elsewhere may wish to put the system in FROST mode also.
    void setHolidayMode() { activityCountdownM = 0; value = 0; occupationCountdownM = 0; vacancyH = 255U; }
    491e:	10 92 ee 01 	sts	0x01EE, r1
    4922:	10 92 ec 01 	sts	0x01EC, r1
    4926:	10 92 ed 01 	sts	0x01ED, r1
    492a:	8f ef       	ldi	r24, 0xFF	; 255
    492c:	80 93 ef 01 	sts	0x01EF, r24
    4930:	8d c1       	rjmp	.+794    	; 0x4c4c <pollCLI(unsigned char)+0x63c>
          break;
          }
#if defined(SETTABLE_TARGET_TEMPERATURES)
        char *last; // Used by strtok_r().
        char *tok1;
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    4932:	13 30       	cpi	r17, 0x03	; 3
    4934:	08 f4       	brcc	.+2      	; 0x4938 <pollCLI(unsigned char)+0x328>
    4936:	8a c1       	rjmp	.+788    	; 0x4c4c <pollCLI(unsigned char)+0x63c>
    4938:	85 e0       	ldi	r24, 0x05	; 5
    493a:	93 e0       	ldi	r25, 0x03	; 3
    493c:	6b e2       	ldi	r22, 0x2B	; 43
    493e:	71 e0       	ldi	r23, 0x01	; 1
    4940:	ae 01       	movw	r20, r28
    4942:	4f 5f       	subi	r20, 0xFF	; 255
    4944:	5f 4f       	sbci	r21, 0xFF	; 255
    4946:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <strtok_r>
    494a:	00 97       	sbiw	r24, 0x00	; 0
    494c:	09 f4       	brne	.+2      	; 0x4950 <pollCLI(unsigned char)+0x340>
    494e:	7e c1       	rjmp	.+764    	; 0x4c4c <pollCLI(unsigned char)+0x63c>
          {
          const uint8_t tempC = (uint8_t) atoi(tok1);
    4950:	0e 94 a3 02 	call	0x546	; 0x546 <atoi>
          if(!setFROSTTargetC(tempC)) { InvalidIgnored(); }
    4954:	0e 94 61 07 	call	0xec2	; 0xec2 <setFROSTTargetC(unsigned char)>
    4958:	1f c1       	rjmp	.+574    	; 0x4b98 <pollCLI(unsigned char)+0x588>
      case 'H':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 5 character sequence makes sense and is safe to tokenise, eg "H 1 2".
        if((n >= 5) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    495a:	15 30       	cpi	r17, 0x05	; 5
    495c:	08 f4       	brcc	.+2      	; 0x4960 <pollCLI(unsigned char)+0x350>
    495e:	78 c1       	rjmp	.+752    	; 0x4c50 <pollCLI(unsigned char)+0x640>
    4960:	85 e0       	ldi	r24, 0x05	; 5
    4962:	93 e0       	ldi	r25, 0x03	; 3
    4964:	6b e2       	ldi	r22, 0x2B	; 43
    4966:	71 e0       	ldi	r23, 0x01	; 1
    4968:	6e 01       	movw	r12, r28
    496a:	08 94       	sec
    496c:	c1 1c       	adc	r12, r1
    496e:	d1 1c       	adc	r13, r1
    4970:	a6 01       	movw	r20, r12
    4972:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <strtok_r>
    4976:	7c 01       	movw	r14, r24
    4978:	00 97       	sbiw	r24, 0x00	; 0
    497a:	09 f4       	brne	.+2      	; 0x497e <pollCLI(unsigned char)+0x36e>
    497c:	69 c1       	rjmp	.+722    	; 0x4c50 <pollCLI(unsigned char)+0x640>
          {
          char *tok2 = strtok_r(NULL, " ", &last);
    497e:	80 e0       	ldi	r24, 0x00	; 0
    4980:	90 e0       	ldi	r25, 0x00	; 0
    4982:	6b e2       	ldi	r22, 0x2B	; 43
    4984:	71 e0       	ldi	r23, 0x01	; 1
    4986:	a6 01       	movw	r20, r12
    4988:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <strtok_r>
    498c:	8c 01       	movw	r16, r24
          if(NULL != tok2)
    498e:	00 97       	sbiw	r24, 0x00	; 0
    4990:	09 f4       	brne	.+2      	; 0x4994 <pollCLI(unsigned char)+0x384>
    4992:	6b c1       	rjmp	.+726    	; 0x4c6a <pollCLI(unsigned char)+0x65a>
            {
            const int hc1 = atoi(tok1);
    4994:	c7 01       	movw	r24, r14
    4996:	0e 94 a3 02 	call	0x546	; 0x546 <atoi>
    499a:	7c 01       	movw	r14, r24
            const int hc2 = atoi(tok2);
    499c:	c8 01       	movw	r24, r16
    499e:	0e 94 a3 02 	call	0x546	; 0x546 <atoi>
    49a2:	8c 01       	movw	r16, r24
            if((hc1 < 0) || (hc1 > 99) || (hc2 < 0) || (hc2 > 99)) { InvalidIgnored(); }
    49a4:	94 e6       	ldi	r25, 0x64	; 100
    49a6:	e9 16       	cp	r14, r25
    49a8:	f1 04       	cpc	r15, r1
    49aa:	08 f0       	brcs	.+2      	; 0x49ae <pollCLI(unsigned char)+0x39e>
    49ac:	f8 c0       	rjmp	.+496    	; 0x4b9e <pollCLI(unsigned char)+0x58e>
    49ae:	17 fd       	sbrc	r17, 7
    49b0:	f6 c0       	rjmp	.+492    	; 0x4b9e <pollCLI(unsigned char)+0x58e>
    49b2:	04 36       	cpi	r16, 0x64	; 100
    49b4:	11 05       	cpc	r17, r1
    49b6:	0c f0       	brlt	.+2      	; 0x49ba <pollCLI(unsigned char)+0x3aa>
    49b8:	f2 c0       	rjmp	.+484    	; 0x4b9e <pollCLI(unsigned char)+0x58e>
            else
              {
              FHT8VSetHC1(hc1);
    49ba:	8e 2d       	mov	r24, r14
    49bc:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <FHT8VSetHC1(unsigned char)>
              FHT8VSetHC2(hc2);
    49c0:	80 2f       	mov	r24, r16
    49c2:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <FHT8VSetHC2(unsigned char)>
    49c6:	02 c0       	rjmp	.+4      	; 0x49cc <pollCLI(unsigned char)+0x3bc>
              }
            }
          }
        else if(n < 2) // Just 'H', possibly with trailing whitespace.
          {
          FHT8VClearHC();
    49c8:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <FHT8VClearHC()>
          FHT8VSyncAndTXReset(); // Force into unsynchronized state.
    49cc:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <FHT8VSyncAndTXReset()>
    49d0:	4c c1       	rjmp	.+664    	; 0x4c6a <pollCLI(unsigned char)+0x65a>

      // Set new random ID.
      // Should possibly restart afterwards.
      case 'I':
        {
        ensureIDCreated(true); // Force ID.
    49d2:	81 e0       	ldi	r24, 0x01	; 1
    49d4:	0e 94 fd 14 	call	0x29fa	; 0x29fa <ensureIDCreated(bool)>
    49d8:	48 c1       	rjmp	.+656    	; 0x4c6a <pollCLI(unsigned char)+0x65a>
        int s = 0;
//#if MAX_SIMPLE_SCHEDULES > 1
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 3 character sequence makes sense and is safe to tokenise, eg "L 0".
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    49da:	13 30       	cpi	r17, 0x03	; 3
    49dc:	08 f4       	brcc	.+2      	; 0x49e0 <pollCLI(unsigned char)+0x3d0>
    49de:	3b c1       	rjmp	.+630    	; 0x4c56 <pollCLI(unsigned char)+0x646>
    49e0:	85 e0       	ldi	r24, 0x05	; 5
    49e2:	93 e0       	ldi	r25, 0x03	; 3
    49e4:	6b e2       	ldi	r22, 0x2B	; 43
    49e6:	71 e0       	ldi	r23, 0x01	; 1
    49e8:	ae 01       	movw	r20, r28
    49ea:	4f 5f       	subi	r20, 0xFF	; 255
    49ec:	5f 4f       	sbci	r21, 0xFF	; 255
    49ee:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <strtok_r>
    49f2:	00 97       	sbiw	r24, 0x00	; 0
    49f4:	09 f4       	brne	.+2      	; 0x49f8 <pollCLI(unsigned char)+0x3e8>
    49f6:	2f c1       	rjmp	.+606    	; 0x4c56 <pollCLI(unsigned char)+0x646>
          {
          s = atoi(tok1);
    49f8:	0e 94 a3 02 	call	0x546	; 0x546 <atoi>
          }
//#endif
        handleLEARN((uint8_t) s); break;
    49fc:	0e 94 ac 20 	call	0x4158	; 0x4158 <handleLEARN(unsigned char)>
    4a00:	34 c1       	rjmp	.+616    	; 0x4c6a <pollCLI(unsigned char)+0x65a>
      case 'O':
        {
        uint8_t minPcOpen = 0; // Will clear override and use default threshold.
        char *last; // Used by strtok_r().
        char *tok1;
        if((n > 1) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    4a02:	12 30       	cpi	r17, 0x02	; 2
    4a04:	08 f4       	brcc	.+2      	; 0x4a08 <pollCLI(unsigned char)+0x3f8>
    4a06:	2a c1       	rjmp	.+596    	; 0x4c5c <pollCLI(unsigned char)+0x64c>
    4a08:	85 e0       	ldi	r24, 0x05	; 5
    4a0a:	93 e0       	ldi	r25, 0x03	; 3
    4a0c:	6b e2       	ldi	r22, 0x2B	; 43
    4a0e:	71 e0       	ldi	r23, 0x01	; 1
    4a10:	ae 01       	movw	r20, r28
    4a12:	4f 5f       	subi	r20, 0xFF	; 255
    4a14:	5f 4f       	sbci	r21, 0xFF	; 255
    4a16:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <strtok_r>
    4a1a:	00 97       	sbiw	r24, 0x00	; 0
    4a1c:	09 f4       	brne	.+2      	; 0x4a20 <pollCLI(unsigned char)+0x410>
    4a1e:	1e c1       	rjmp	.+572    	; 0x4c5c <pollCLI(unsigned char)+0x64c>
          { minPcOpen = (uint8_t) atoi(tok1); }
    4a20:	0e 94 a3 02 	call	0x546	; 0x546 <atoi>
        NominalRadValve.setMinValvePcReallyOpen(minPcOpen);
    4a24:	0e 94 c6 09 	call	0x138c	; 0x138c <ModelledRadValve::setMinValvePcReallyOpen(unsigned char)>
    4a28:	20 c1       	rjmp	.+576    	; 0x4c6a <pollCLI(unsigned char)+0x65a>
      case 'P':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 5 character sequence makes sense and is safe to tokenise, eg "P 1 2".
        if((n >= 5) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    4a2a:	15 30       	cpi	r17, 0x05	; 5
    4a2c:	08 f4       	brcc	.+2      	; 0x4a30 <pollCLI(unsigned char)+0x420>
    4a2e:	1d c1       	rjmp	.+570    	; 0x4c6a <pollCLI(unsigned char)+0x65a>
    4a30:	85 e0       	ldi	r24, 0x05	; 5
    4a32:	93 e0       	ldi	r25, 0x03	; 3
    4a34:	6b e2       	ldi	r22, 0x2B	; 43
    4a36:	71 e0       	ldi	r23, 0x01	; 1
    4a38:	6e 01       	movw	r12, r28
    4a3a:	08 94       	sec
    4a3c:	c1 1c       	adc	r12, r1
    4a3e:	d1 1c       	adc	r13, r1
    4a40:	a6 01       	movw	r20, r12
    4a42:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <strtok_r>
    4a46:	7c 01       	movw	r14, r24
    4a48:	00 97       	sbiw	r24, 0x00	; 0
    4a4a:	09 f4       	brne	.+2      	; 0x4a4e <pollCLI(unsigned char)+0x43e>
    4a4c:	0e c1       	rjmp	.+540    	; 0x4c6a <pollCLI(unsigned char)+0x65a>
          {
          char *tok2 = strtok_r(NULL, " ", &last);
    4a4e:	80 e0       	ldi	r24, 0x00	; 0
    4a50:	90 e0       	ldi	r25, 0x00	; 0
    4a52:	6b e2       	ldi	r22, 0x2B	; 43
    4a54:	71 e0       	ldi	r23, 0x01	; 1
    4a56:	a6 01       	movw	r20, r12
    4a58:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <strtok_r>
    4a5c:	8c 01       	movw	r16, r24
          if(NULL != tok2)
    4a5e:	00 97       	sbiw	r24, 0x00	; 0
    4a60:	09 f4       	brne	.+2      	; 0x4a64 <pollCLI(unsigned char)+0x454>
    4a62:	03 c1       	rjmp	.+518    	; 0x4c6a <pollCLI(unsigned char)+0x65a>
            {
            const int hh = atoi(tok1);
    4a64:	c7 01       	movw	r24, r14
    4a66:	0e 94 a3 02 	call	0x546	; 0x546 <atoi>
    4a6a:	7c 01       	movw	r14, r24
            const int mm = atoi(tok2);
    4a6c:	c8 01       	movw	r24, r16
    4a6e:	0e 94 a3 02 	call	0x546	; 0x546 <atoi>
    4a72:	8c 01       	movw	r16, r24
            int s = 0;
//#if MAX_SIMPLE_SCHEDULES > 1         
            char *tok3 = strtok_r(NULL, " ", &last);
    4a74:	80 e0       	ldi	r24, 0x00	; 0
    4a76:	90 e0       	ldi	r25, 0x00	; 0
    4a78:	6b e2       	ldi	r22, 0x2B	; 43
    4a7a:	71 e0       	ldi	r23, 0x01	; 1
    4a7c:	a6 01       	movw	r20, r12
    4a7e:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <strtok_r>
            if(NULL != tok3)
    4a82:	00 97       	sbiw	r24, 0x00	; 0
    4a84:	19 f4       	brne	.+6      	; 0x4a8c <pollCLI(unsigned char)+0x47c>
    4a86:	60 e0       	ldi	r22, 0x00	; 0
    4a88:	70 e0       	ldi	r23, 0x00	; 0
    4a8a:	03 c0       	rjmp	.+6      	; 0x4a92 <pollCLI(unsigned char)+0x482>
              {
              s = atoi(tok3);
    4a8c:	0e 94 a3 02 	call	0x546	; 0x546 <atoi>
    4a90:	bc 01       	movw	r22, r24
              }
//#endif
            // Does not fully validate user inputs (eg for -ve values), but cannot set impossible values.
            if(!setSimpleSchedule((uint_least16_t) ((60 * hh) + mm), (uint8_t)s)) { InvalidIgnored(); }
    4a92:	8c e3       	ldi	r24, 0x3C	; 60
    4a94:	90 e0       	ldi	r25, 0x00	; 0
    4a96:	9c 01       	movw	r18, r24
    4a98:	e2 9e       	mul	r14, r18
    4a9a:	c0 01       	movw	r24, r0
    4a9c:	e3 9e       	mul	r14, r19
    4a9e:	90 0d       	add	r25, r0
    4aa0:	f2 9e       	mul	r15, r18
    4aa2:	90 0d       	add	r25, r0
    4aa4:	11 24       	eor	r1, r1
    4aa6:	80 0f       	add	r24, r16
    4aa8:	91 1f       	adc	r25, r17
    4aaa:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <setSimpleSchedule(unsigned int, unsigned char)>
    4aae:	74 c0       	rjmp	.+232    	; 0x4b98 <pollCLI(unsigned char)+0x588>
        break;
        }

#ifdef SUPPORT_BAKE
      // Switch to (or restart) BAKE (Quick Heat) mode: Q
      case 'Q': { startBakeDebounced(); break; }
    4ab0:	0e 94 95 03 	call	0x72a	; 0x72a <startBakeDebounced()>
    4ab4:	da c0       	rjmp	.+436    	; 0x4c6a <pollCLI(unsigned char)+0x65a>
#endif

      // Status line and optional smart/scheduled warming prediction request.
      case 'S':
        {
        Serial.print(F("Resets: "));
    4ab6:	85 eb       	ldi	r24, 0xB5	; 181
    4ab8:	94 e0       	ldi	r25, 0x04	; 4
    4aba:	65 e5       	ldi	r22, 0x55	; 85
    4abc:	71 e0       	ldi	r23, 0x01	; 1
    4abe:	0e 94 1c 33 	call	0x6638	; 0x6638 <Print::print(__FlashStringHelper const*)>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    4ac2:	f9 99       	sbic	0x1f, 1	; 31
    4ac4:	fe cf       	rjmp	.-4      	; 0x4ac2 <pollCLI(unsigned char)+0x4b2>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    4ac6:	86 e0       	ldi	r24, 0x06	; 6
    4ac8:	90 e0       	ldi	r25, 0x00	; 0
    4aca:	92 bd       	out	0x22, r25	; 34
    4acc:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    4ace:	f8 9a       	sbi	0x1f, 0	; 31
    4ad0:	60 b5       	in	r22, 0x20	; 32
        const uint8_t resetCount = eeprom_read_byte((uint8_t *)EE_START_RESET_COUNT);
        Serial.print(resetCount);
    4ad2:	85 eb       	ldi	r24, 0xB5	; 181
    4ad4:	94 e0       	ldi	r25, 0x04	; 4
    4ad6:	4a e0       	ldi	r20, 0x0A	; 10
    4ad8:	50 e0       	ldi	r21, 0x00	; 0
    4ada:	0e 94 1b 34 	call	0x6836	; 0x6836 <Print::print(unsigned char, int)>
        Serial.println();
    4ade:	85 eb       	ldi	r24, 0xB5	; 181
    4ae0:	94 e0       	ldi	r25, 0x04	; 4
    4ae2:	0e 94 47 33 	call	0x668e	; 0x668e <Print::println()>
        Serial.print(F("Overruns: "));
    4ae6:	85 eb       	ldi	r24, 0xB5	; 181
    4ae8:	94 e0       	ldi	r25, 0x04	; 4
    4aea:	6a e4       	ldi	r22, 0x4A	; 74
    4aec:	71 e0       	ldi	r23, 0x01	; 1
    4aee:	0e 94 1c 33 	call	0x6638	; 0x6638 <Print::print(__FlashStringHelper const*)>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    4af2:	f9 99       	sbic	0x1f, 1	; 31
    4af4:	fe cf       	rjmp	.-4      	; 0x4af2 <pollCLI(unsigned char)+0x4e2>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    4af6:	8d e1       	ldi	r24, 0x1D	; 29
    4af8:	90 e0       	ldi	r25, 0x00	; 0
    4afa:	92 bd       	out	0x22, r25	; 34
    4afc:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    4afe:	f8 9a       	sbi	0x1f, 0	; 31
    4b00:	60 b5       	in	r22, 0x20	; 32
        const uint8_t overrunCount = (~eeprom_read_byte((uint8_t *)EE_START_OVERRUN_COUNTER)) & 0xff;
        Serial.print(overrunCount);
    4b02:	60 95       	com	r22
    4b04:	85 eb       	ldi	r24, 0xB5	; 181
    4b06:	94 e0       	ldi	r25, 0x04	; 4
    4b08:	4a e0       	ldi	r20, 0x0A	; 10
    4b0a:	50 e0       	ldi	r21, 0x00	; 0
    4b0c:	0e 94 1b 34 	call	0x6836	; 0x6836 <Print::print(unsigned char, int)>
        Serial.println();
    4b10:	85 eb       	ldi	r24, 0xB5	; 181
    4b12:	94 e0       	ldi	r25, 0x04	; 4
    4b14:	0e 94 47 33 	call	0x668e	; 0x668e <Print::println()>
    4b18:	a8 c0       	rjmp	.+336    	; 0x4c6a <pollCLI(unsigned char)+0x65a>
      case 'T':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 5 character sequence makes sense and is safe to tokenise, eg "T 1 2".
        if((n >= 5) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    4b1a:	15 30       	cpi	r17, 0x05	; 5
    4b1c:	08 f4       	brcc	.+2      	; 0x4b20 <pollCLI(unsigned char)+0x510>
    4b1e:	a5 c0       	rjmp	.+330    	; 0x4c6a <pollCLI(unsigned char)+0x65a>
    4b20:	85 e0       	ldi	r24, 0x05	; 5
    4b22:	93 e0       	ldi	r25, 0x03	; 3
    4b24:	6b e2       	ldi	r22, 0x2B	; 43
    4b26:	71 e0       	ldi	r23, 0x01	; 1
    4b28:	7e 01       	movw	r14, r28
    4b2a:	08 94       	sec
    4b2c:	e1 1c       	adc	r14, r1
    4b2e:	f1 1c       	adc	r15, r1
    4b30:	a7 01       	movw	r20, r14
    4b32:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <strtok_r>
    4b36:	8c 01       	movw	r16, r24
    4b38:	00 97       	sbiw	r24, 0x00	; 0
    4b3a:	09 f4       	brne	.+2      	; 0x4b3e <pollCLI(unsigned char)+0x52e>
    4b3c:	96 c0       	rjmp	.+300    	; 0x4c6a <pollCLI(unsigned char)+0x65a>
          {
          char *tok2 = strtok_r(NULL, " ", &last);
    4b3e:	80 e0       	ldi	r24, 0x00	; 0
    4b40:	90 e0       	ldi	r25, 0x00	; 0
    4b42:	6b e2       	ldi	r22, 0x2B	; 43
    4b44:	71 e0       	ldi	r23, 0x01	; 1
    4b46:	a7 01       	movw	r20, r14
    4b48:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <strtok_r>
    4b4c:	7c 01       	movw	r14, r24
          if(NULL != tok2)
    4b4e:	00 97       	sbiw	r24, 0x00	; 0
    4b50:	09 f4       	brne	.+2      	; 0x4b54 <pollCLI(unsigned char)+0x544>
    4b52:	8b c0       	rjmp	.+278    	; 0x4c6a <pollCLI(unsigned char)+0x65a>
            {
            const int hh = atoi(tok1);
    4b54:	c8 01       	movw	r24, r16
    4b56:	0e 94 a3 02 	call	0x546	; 0x546 <atoi>
    4b5a:	8c 01       	movw	r16, r24
            const int mm = atoi(tok2);
    4b5c:	c7 01       	movw	r24, r14
    4b5e:	0e 94 a3 02 	call	0x546	; 0x546 <atoi>
    4b62:	bc 01       	movw	r22, r24
            // TODO: zap collected stats if time change too large (eg >> 1h).
            if(!setHoursMinutesLT(hh, mm)) { InvalidIgnored(); }
    4b64:	c8 01       	movw	r24, r16
    4b66:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <setHoursMinutesLT(int, int)>
    4b6a:	16 c0       	rjmp	.+44     	; 0x4b98 <pollCLI(unsigned char)+0x588>
        }

      // Version information printed as one line to serial, machine- and human- parseable.
      case 'V':
        {
        serialPrintlnBuildVersion();
    4b6c:	0e 94 0d 28 	call	0x501a	; 0x501a <serialPrintlnBuildVersion()>
    4b70:	7c c0       	rjmp	.+248    	; 0x4c6a <pollCLI(unsigned char)+0x65a>
      case 'W':
        {
#if defined(SETTABLE_TARGET_TEMPERATURES) && !defined(TEMP_POT_AVAILABLE)
        char *last; // Used by strtok_r().
        char *tok1;
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    4b72:	13 30       	cpi	r17, 0x03	; 3
    4b74:	08 f4       	brcc	.+2      	; 0x4b78 <pollCLI(unsigned char)+0x568>
    4b76:	74 c0       	rjmp	.+232    	; 0x4c60 <pollCLI(unsigned char)+0x650>
    4b78:	85 e0       	ldi	r24, 0x05	; 5
    4b7a:	93 e0       	ldi	r25, 0x03	; 3
    4b7c:	6b e2       	ldi	r22, 0x2B	; 43
    4b7e:	71 e0       	ldi	r23, 0x01	; 1
    4b80:	ae 01       	movw	r20, r28
    4b82:	4f 5f       	subi	r20, 0xFF	; 255
    4b84:	5f 4f       	sbci	r21, 0xFF	; 255
    4b86:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <strtok_r>
    4b8a:	00 97       	sbiw	r24, 0x00	; 0
    4b8c:	09 f4       	brne	.+2      	; 0x4b90 <pollCLI(unsigned char)+0x580>
    4b8e:	68 c0       	rjmp	.+208    	; 0x4c60 <pollCLI(unsigned char)+0x650>
          {
          const uint8_t tempC = (uint8_t) atoi(tok1);
    4b90:	0e 94 a3 02 	call	0x546	; 0x546 <atoi>
          if(!setWARMTargetC(tempC)) { InvalidIgnored(); }
    4b94:	0e 94 46 07 	call	0xe8c	; 0xe8c <setWARMTargetC(unsigned char)>
    4b98:	88 23       	and	r24, r24
    4b9a:	09 f0       	breq	.+2      	; 0x4b9e <pollCLI(unsigned char)+0x58e>
    4b9c:	66 c0       	rjmp	.+204    	; 0x4c6a <pollCLI(unsigned char)+0x65a>
    4b9e:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <InvalidIgnored()>
    4ba2:	63 c0       	rjmp	.+198    	; 0x4c6a <pollCLI(unsigned char)+0x65a>
      case 'X':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 3 character sequence makes sense and is safe to tokenise, eg "X 0".
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    4ba4:	13 30       	cpi	r17, 0x03	; 3
    4ba6:	08 f4       	brcc	.+2      	; 0x4baa <pollCLI(unsigned char)+0x59a>
    4ba8:	60 c0       	rjmp	.+192    	; 0x4c6a <pollCLI(unsigned char)+0x65a>
    4baa:	85 e0       	ldi	r24, 0x05	; 5
    4bac:	93 e0       	ldi	r25, 0x03	; 3
    4bae:	6b e2       	ldi	r22, 0x2B	; 43
    4bb0:	71 e0       	ldi	r23, 0x01	; 1
    4bb2:	ae 01       	movw	r20, r28
    4bb4:	4f 5f       	subi	r20, 0xFF	; 255
    4bb6:	5f 4f       	sbci	r21, 0xFF	; 255
    4bb8:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <strtok_r>
    4bbc:	00 97       	sbiw	r24, 0x00	; 0
    4bbe:	09 f4       	brne	.+2      	; 0x4bc2 <pollCLI(unsigned char)+0x5b2>
    4bc0:	54 c0       	rjmp	.+168    	; 0x4c6a <pollCLI(unsigned char)+0x65a>
          {
          const uint8_t nn = (uint8_t) atoi(tok1);
    4bc2:	0e 94 a3 02 	call	0x546	; 0x546 <atoi>
    4bc6:	68 2f       	mov	r22, r24
          eeprom_smart_update_byte((uint8_t *)EE_START_STATS_TX_ENABLE, nn);
    4bc8:	8c e1       	ldi	r24, 0x1C	; 28
    4bca:	90 e0       	ldi	r25, 0x00	; 0
    4bcc:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <eeprom_smart_update_byte(unsigned char*, unsigned char)>
    4bd0:	4c c0       	rjmp	.+152    	; 0x4c6a <pollCLI(unsigned char)+0x65a>

      // Zap/erase learned statistics.
      case 'Z':
        {
        // Try to avoid causing an overrun if near the end of the minor cycle (even allowing for the warning message if unfinished!).
        if(zapStats((uint16_t) fnmax(1, ((int)msRemainingThisBasicCycle()/2) - 20)))
    4bd2:	81 e0       	ldi	r24, 0x01	; 1
    4bd4:	90 e0       	ldi	r25, 0x00	; 0
    4bd6:	9c 83       	std	Y+4, r25	; 0x04
    4bd8:	8b 83       	std	Y+3, r24	; 0x03
    4bda:	80 91 b2 00 	lds	r24, 0x00B2
    4bde:	2f ef       	ldi	r18, 0xFF	; 255
    4be0:	30 e0       	ldi	r19, 0x00	; 0
    4be2:	28 1b       	sub	r18, r24
    4be4:	31 09       	sbc	r19, r1
    4be6:	c9 01       	movw	r24, r18
    4be8:	43 e0       	ldi	r20, 0x03	; 3
    4bea:	88 0f       	add	r24, r24
    4bec:	99 1f       	adc	r25, r25
    4bee:	4a 95       	dec	r20
    4bf0:	e1 f7       	brne	.-8      	; 0x4bea <pollCLI(unsigned char)+0x5da>
    4bf2:	82 1b       	sub	r24, r18
    4bf4:	93 0b       	sbc	r25, r19
    4bf6:	95 95       	asr	r25
    4bf8:	87 95       	ror	r24
    4bfa:	44 97       	sbiw	r24, 0x14	; 20
    4bfc:	9e 83       	std	Y+6, r25	; 0x06
    4bfe:	8d 83       	std	Y+5, r24	; 0x05
    4c00:	81 30       	cpi	r24, 0x01	; 1
    4c02:	91 05       	cpc	r25, r1
    4c04:	14 f4       	brge	.+4      	; 0x4c0a <pollCLI(unsigned char)+0x5fa>
    4c06:	81 e0       	ldi	r24, 0x01	; 1
    4c08:	90 e0       	ldi	r25, 0x00	; 0
    4c0a:	0e 94 aa 09 	call	0x1354	; 0x1354 <zapStats(unsigned int)>
    4c0e:	88 23       	and	r24, r24
    4c10:	29 f0       	breq	.+10     	; 0x4c1c <pollCLI(unsigned char)+0x60c>
          { Serial.println(F("Zapped.")); }
    4c12:	85 eb       	ldi	r24, 0xB5	; 181
    4c14:	94 e0       	ldi	r25, 0x04	; 4
    4c16:	62 e4       	ldi	r22, 0x42	; 66
    4c18:	71 e0       	ldi	r23, 0x01	; 1
    4c1a:	04 c0       	rjmp	.+8      	; 0x4c24 <pollCLI(unsigned char)+0x614>
        else
          { Serial.println(F("Not finished.")); }
    4c1c:	85 eb       	ldi	r24, 0xB5	; 181
    4c1e:	94 e0       	ldi	r25, 0x04	; 4
    4c20:	64 e3       	ldi	r22, 0x34	; 52
    4c22:	71 e0       	ldi	r23, 0x01	; 1
    4c24:	0e 94 67 33 	call	0x66ce	; 0x66ce <Print::println(__FlashStringHelper const*)>
      }

    // Almost always show status line afterwards as feedback of command received and new state.
    if(showStatus) { serialStatusReport(); }
    // Else show ack of command received.
    else { Serial.println(F("OK")); }
    4c28:	85 eb       	ldi	r24, 0xB5	; 181
    4c2a:	94 e0       	ldi	r25, 0x04	; 4
    4c2c:	61 e3       	ldi	r22, 0x31	; 49
    4c2e:	71 e0       	ldi	r23, 0x01	; 1
    4c30:	0e 94 67 33 	call	0x66ce	; 0x66ce <Print::println(__FlashStringHelper const*)>
    4c34:	04 c0       	rjmp	.+8      	; 0x4c3e <pollCLI(unsigned char)+0x62e>
    }
  else { Serial.println(); } // Terminate empty/partial CLI input line after timeout.
    4c36:	85 eb       	ldi	r24, 0xB5	; 181
    4c38:	94 e0       	ldi	r25, 0x04	; 4
    4c3a:	0e 94 47 33 	call	0x668e	; 0x668e <Print::println()>

  // Force any pending output before return / possible UART power-down.
  flushSerialSCTSensitive();
    4c3e:	0e 94 88 1a 	call	0x3510	; 0x3510 <flushSerialSCTSensitive()>

  if(neededWaking) { powerDownSerial(); }
    4c42:	bb 20       	and	r11, r11
    4c44:	a9 f0       	breq	.+42     	; 0x4c70 <pollCLI(unsigned char)+0x660>
    4c46:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <powerDownSerial()>
    4c4a:	12 c0       	rjmp	.+36     	; 0x4c70 <pollCLI(unsigned char)+0x660>
          const uint8_t tempC = (uint8_t) atoi(tok1);
          if(!setFROSTTargetC(tempC)) { InvalidIgnored(); }
          }
        else
#endif
          { setWarmModeDebounced(false); } // No parameter supplied; switch to FROST mode.
    4c4c:	80 e0       	ldi	r24, 0x00	; 0
    4c4e:	0b c0       	rjmp	.+22     	; 0x4c66 <pollCLI(unsigned char)+0x656>
              FHT8VSetHC2(hc2);
              FHT8VSyncAndTXReset(); // Force re-sync with FHT8V valve.
              }
            }
          }
        else if(n < 2) // Just 'H', possibly with trailing whitespace.
    4c50:	12 30       	cpi	r17, 0x02	; 2
    4c52:	58 f4       	brcc	.+22     	; 0x4c6a <pollCLI(unsigned char)+0x65a>
    4c54:	b9 ce       	rjmp	.-654    	; 0x49c8 <pollCLI(unsigned char)+0x3b8>
    4c56:	80 e0       	ldi	r24, 0x00	; 0
    4c58:	90 e0       	ldi	r25, 0x00	; 0
    4c5a:	d0 ce       	rjmp	.-608    	; 0x49fc <pollCLI(unsigned char)+0x3ec>
    4c5c:	80 e0       	ldi	r24, 0x00	; 0
    4c5e:	e2 ce       	rjmp	.-572    	; 0x4a24 <pollCLI(unsigned char)+0x414>
          }
        else
#endif
          {
#ifdef SUPPORT_BAKE
          cancelBakeDebounced(); // Ensure BAKE mode not entered.
    4c60:	0e 94 92 03 	call	0x724	; 0x724 <cancelBakeDebounced()>
#endif
          setWarmModeDebounced(true); // No parameter supplied; switch to WARM mode.
    4c64:	81 e0       	ldi	r24, 0x01	; 1
    4c66:	0e 94 82 03 	call	0x704	; 0x704 <setWarmModeDebounced(bool)>
        break;
        }
      }

    // Almost always show status line afterwards as feedback of command received and new state.
    if(showStatus) { serialStatusReport(); }
    4c6a:	0e 94 08 21 	call	0x4210	; 0x4210 <serialStatusReport()>
    4c6e:	e7 cf       	rjmp	.-50     	; 0x4c3e <pollCLI(unsigned char)+0x62e>

  // Force any pending output before return / possible UART power-down.
  flushSerialSCTSensitive();

  if(neededWaking) { powerDownSerial(); }
  }
    4c70:	26 96       	adiw	r28, 0x06	; 6
    4c72:	0f b6       	in	r0, 0x3f	; 63
    4c74:	f8 94       	cli
    4c76:	de bf       	out	0x3e, r29	; 62
    4c78:	0f be       	out	0x3f, r0	; 63
    4c7a:	cd bf       	out	0x3d, r28	; 61
    4c7c:	cf 91       	pop	r28
    4c7e:	df 91       	pop	r29
    4c80:	1f 91       	pop	r17
    4c82:	0f 91       	pop	r16
    4c84:	ff 90       	pop	r15
    4c86:	ef 90       	pop	r14
    4c88:	df 90       	pop	r13
    4c8a:	cf 90       	pop	r12
    4c8c:	bf 90       	pop	r11
    4c8e:	08 95       	ret

00004c90 <offPause()>:
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define MEDIUM_PAUSE_MS 60
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
// Big low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define BIG_PAUSE_MS 120
static void inline bigPause() { nap(WDTO_120MS); } // 120ms vs 288ms nominal for PICAXE V0.09 impl.
    4c90:	83 e0       	ldi	r24, 0x03	; 3
    4c92:	0e 94 39 17 	call	0x2e72	; 0x2e72 <nap(signed char)>

// Pause between flashes to allow them to be distinguished (>100ms); was mediumPause() for PICAXE V0.09 impl.
static void inline offPause()
  {
  bigPause(); // 120ms, was V0.09 144ms mediumPause() for PICAXE V0.09 impl.
  pollIO(); // Slip in an I/O poll.
    4c96:	80 e0       	ldi	r24, 0x00	; 0
    4c98:	0e 94 ab 06 	call	0xd56	; 0xd56 <pollIO(bool)>
  }
    4c9c:	08 95       	ret

00004c9e <tickUI(unsigned char)>:
// Should never be skipped, so as to allow the UI to remain responsive.
// Runs in 350ms or less; usually takes only a few milliseconds or microseconds.
// Returns true iff the user interacted with the system, and maybe caused a status change.
// NOTE: since this is on the minimum idle-loop code path, minimise CPU cycles, esp in frost mode.
// Also re-activates CLI on main button push.
bool tickUI(const uint_fast8_t sec)
    4c9e:	0f 93       	push	r16
    4ca0:	1f 93       	push	r17
  {
  // Perform any once-per-minute operations.
  const bool sec0 = (0 == sec);
  if(sec0)
    4ca2:	88 23       	and	r24, r24
    4ca4:	a9 f4       	brne	.+42     	; 0x4cd0 <tickUI(unsigned char)+0x32>
    {
    ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    4ca6:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4ca8:	f8 94       	cli
      {
      // Run down UI iteraction timer if need be, one tick per minute.
      if(uiTimeoutM > 0) { --uiTimeoutM; }
    4caa:	80 91 42 03 	lds	r24, 0x0342
    4cae:	88 23       	and	r24, r24
    4cb0:	29 f0       	breq	.+10     	; 0x4cbc <tickUI(unsigned char)+0x1e>
    4cb2:	80 91 42 03 	lds	r24, 0x0342
    4cb6:	81 50       	subi	r24, 0x01	; 1
    4cb8:	80 93 42 03 	sts	0x0342, r24
      // Run down CLI timer if need be.
      if(CLITimeoutM > 0) { --CLITimeoutM; }
    4cbc:	80 91 35 01 	lds	r24, 0x0135
    4cc0:	88 23       	and	r24, r24
    4cc2:	29 f0       	breq	.+10     	; 0x4cce <tickUI(unsigned char)+0x30>
    4cc4:	80 91 35 01 	lds	r24, 0x0135
    4cc8:	81 50       	subi	r24, 0x01	; 1
    4cca:	80 93 35 01 	sts	0x0135, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4cce:	9f bf       	out	0x3f, r25	; 63
  tinyPause();
  LED_UI2_OFF(); // Generally force 2nd LED off.
#endif

  // True on every 4th tick/call, ie about once every 8 seconds.
  const bool forthTick = !((++tickCount) & 3); // True on every 4th tick.
    4cd0:	00 91 43 03 	lds	r16, 0x0343
    4cd4:	0f 5f       	subi	r16, 0xFF	; 255
    4cd6:	00 93 43 03 	sts	0x0343, r16
    4cda:	80 91 46 03 	lds	r24, 0x0346
#ifdef SUPPORT_BAKE
  static bool isBakeModePutative;
#endif

  static bool modeButtonWasPressed;
  if(fastDigitalRead(BUTTON_MODE_L) == LOW)
    4cde:	4d 99       	sbic	0x09, 5	; 9
    4ce0:	4b c0       	rjmp	.+150    	; 0x4d78 <tickUI(unsigned char)+0xda>
    {
    if(!modeButtonWasPressed)
    4ce2:	88 23       	and	r24, r24
    4ce4:	59 f4       	brne	.+22     	; 0x4cfc <tickUI(unsigned char)+0x5e>
      {
      // Capture real mode variable as button is pressed.
      isWarmModePutative = inWarmMode();
    4ce6:	0e 94 7f 03 	call	0x6fe	; 0x6fe <inWarmMode()>
    4cea:	80 93 48 03 	sts	0x0348, r24
#ifdef SUPPORT_BAKE
      isBakeModePutative = inBakeMode();
    4cee:	0e 94 89 03 	call	0x712	; 0x712 <inBakeMode()>
    4cf2:	80 93 47 03 	sts	0x0347, r24
#endif      
      modeButtonWasPressed = true;
    4cf6:	81 e0       	ldi	r24, 0x01	; 1
    4cf8:	80 93 46 03 	sts	0x0346, r24
// Record local manual operation of a local physical UI control, eg not remote or via CLI.
// To be thread-safe, everything that this touches or calls must be.
// Thread-safe.
void markUIControlUsed()
  {
  statusChange = true; // Note user interaction with the system.
    4cfc:	11 e0       	ldi	r17, 0x01	; 1
    4cfe:	10 93 44 03 	sts	0x0344, r17
  uiTimeoutM = UI_DEFAULT_RECENT_USE_TIMEOUT_M; // Ensure that UI controls are kept 'warm' for a little while.
    4d02:	8f e1       	ldi	r24, 0x1F	; 31
    4d04:	80 93 42 03 	sts	0x0342, r24
#define CLI_DEFAULT_TIMEOUT_M 2
static volatile uint8_t CLITimeoutM = CLI_DEFAULT_TIMEOUT_M;

// Reset CLI active timer to the full whack before it goes inactive again (ie makes CLI active for a while).
// Thread-safe.
void resetCLIActiveTimer() { CLITimeoutM = CLI_DEFAULT_TIMEOUT_M; }
    4d08:	92 e0       	ldi	r25, 0x02	; 2
    4d0a:	90 93 35 01 	sts	0x0135, r25
    // Do not call based on internal/synthetic events.
    // Such evidence may include operation of buttons (etc) on the unit or PIR.
    // Do not call from (for example) 'on' schedule change.
    // Makes occupation immediately visible.
    // Thread-safe and ISR-safe.
    void markAsOccupied() { value = 100; occupationCountdownM = OCCUPATION_TIMEOUT_M; activityCountdownM = 2; }
    4d0e:	84 e6       	ldi	r24, 0x64	; 100
    4d10:	80 93 ec 01 	sts	0x01EC, r24
    4d14:	82 e3       	ldi	r24, 0x32	; 50
    4d16:	80 93 ed 01 	sts	0x01ED, r24
    4d1a:	90 93 ee 01 	sts	0x01EE, r25

    // User is pressing the mode button: cycle through FROST | WARM [ | BAKE ].
    // Mark controls used and room as currently occupied given button press.
    markUIControlUsed();
    // LED on...
    LED_HEATCALL_ON();
    4d1e:	5c 98       	cbi	0x0b, 4	; 11
// Very tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define VERYTINY_PAUSE_MS 5
static void inline veryTinyPause() { sleepLowPowerMs(VERYTINY_PAUSE_MS); }
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define TINY_PAUSE_MS 15
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    4d20:	80 e0       	ldi	r24, 0x00	; 0
    4d22:	0e 94 39 17 	call	0x2e72	; 0x2e72 <nap(signed char)>
    tinyPause(); // Leading tiny pause...
    if(!isWarmModePutative) // Was in FROST mode; moving to WARM mode.
    4d26:	80 91 48 03 	lds	r24, 0x0348
    4d2a:	88 23       	and	r24, r24
    4d2c:	51 f4       	brne	.+20     	; 0x4d42 <tickUI(unsigned char)+0xa4>
      {
      isWarmModePutative = true;
    4d2e:	10 93 48 03 	sts	0x0348, r17
#ifdef SUPPORT_BAKE
      isBakeModePutative = false;
    4d32:	10 92 47 03 	sts	0x0347, r1
#endif
      // 2 x flash 'heat call' to indicate now in WARM mode.
      LED_HEATCALL_OFF();
    4d36:	5c 9a       	sbi	0x0b, 4	; 11
      offPause();
    4d38:	0e 94 48 26 	call	0x4c90	; 0x4c90 <offPause()>
      LED_HEATCALL_ON();
    4d3c:	5c 98       	cbi	0x0b, 4	; 11
    4d3e:	80 e0       	ldi	r24, 0x00	; 0
    4d40:	13 c0       	rjmp	.+38     	; 0x4d68 <tickUI(unsigned char)+0xca>
      tinyPause();
      }
#ifdef SUPPORT_BAKE
    else if(!isBakeModePutative) // Was in WARM mode, move to BAKE (with full timeout to run).
    4d42:	80 91 47 03 	lds	r24, 0x0347
    4d46:	88 23       	and	r24, r24
    4d48:	91 f4       	brne	.+36     	; 0x4d6e <tickUI(unsigned char)+0xd0>
      {
      isBakeModePutative = true;
    4d4a:	10 93 47 03 	sts	0x0347, r17
      // 2 x flash + one longer flash 'heat call' to indicate now in BAKE mode.
      LED_HEATCALL_OFF();
    4d4e:	5c 9a       	sbi	0x0b, 4	; 11
      offPause();
    4d50:	0e 94 48 26 	call	0x4c90	; 0x4c90 <offPause()>
      LED_HEATCALL_ON();
    4d54:	5c 98       	cbi	0x0b, 4	; 11
    4d56:	80 e0       	ldi	r24, 0x00	; 0
    4d58:	0e 94 39 17 	call	0x2e72	; 0x2e72 <nap(signed char)>
      tinyPause();
      LED_HEATCALL_OFF();
    4d5c:	5c 9a       	sbi	0x0b, 4	; 11
// Small low-power sleep.
#define SMALL_PAUSE_MS 30
static void inline smallPause() { nap(WDTO_30MS); }
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define MEDIUM_PAUSE_MS 60
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
    4d5e:	82 e0       	ldi	r24, 0x02	; 2
    4d60:	0e 94 39 17 	call	0x2e72	; 0x2e72 <nap(signed char)>
      mediumPause(); // Note different flash on/off duty cycle to try to distinguish this last flash.
      LED_HEATCALL_ON();
    4d64:	5c 98       	cbi	0x0b, 4	; 11
    4d66:	82 e0       	ldi	r24, 0x02	; 2
    4d68:	0e 94 39 17 	call	0x2e72	; 0x2e72 <nap(signed char)>
    4d6c:	ae c0       	rjmp	.+348    	; 0x4eca <tickUI(unsigned char)+0x22c>
      mediumPause();
      }
#endif
    else // Was in BAKE (if supported, else was in WARM), move to FROST.
      {
      isWarmModePutative = false;
    4d6e:	10 92 48 03 	sts	0x0348, r1
#ifdef SUPPORT_BAKE
      isBakeModePutative = false;
    4d72:	10 92 47 03 	sts	0x0347, r1
    4d76:	a9 c0       	rjmp	.+338    	; 0x4eca <tickUI(unsigned char)+0x22c>
      }
    }
  else
    {
    // Update real control variables for mode when button is released.
    if(modeButtonWasPressed)
    4d78:	88 23       	and	r24, r24
    4d7a:	01 f1       	breq	.+64     	; 0x4dbc <tickUI(unsigned char)+0x11e>
      {
      // Don't update the debounced WARM mode while button held down.
      // Will also capture programmatic changes to isWarmMode, eg from schedules.
      const bool isWarmModeDebounced = isWarmModePutative;
      setWarmModeDebounced(isWarmModeDebounced);
    4d7c:	80 91 48 03 	lds	r24, 0x0348
    4d80:	0e 94 82 03 	call	0x704	; 0x704 <setWarmModeDebounced(bool)>
#ifdef SUPPORT_BAKE
      if(isBakeModePutative) { startBakeDebounced(); } else { cancelBakeDebounced(); }
    4d84:	80 91 47 03 	lds	r24, 0x0347
    4d88:	88 23       	and	r24, r24
    4d8a:	19 f0       	breq	.+6      	; 0x4d92 <tickUI(unsigned char)+0xf4>
    4d8c:	0e 94 95 03 	call	0x72a	; 0x72a <startBakeDebounced()>
    4d90:	02 c0       	rjmp	.+4      	; 0x4d96 <tickUI(unsigned char)+0xf8>
    4d92:	0e 94 92 03 	call	0x724	; 0x724 <cancelBakeDebounced()>
// Record local manual operation of a local physical UI control, eg not remote or via CLI.
// To be thread-safe, everything that this touches or calls must be.
// Thread-safe.
void markUIControlUsed()
  {
  statusChange = true; // Note user interaction with the system.
    4d96:	81 e0       	ldi	r24, 0x01	; 1
    4d98:	80 93 44 03 	sts	0x0344, r24
  uiTimeoutM = UI_DEFAULT_RECENT_USE_TIMEOUT_M; // Ensure that UI controls are kept 'warm' for a little while.
    4d9c:	8f e1       	ldi	r24, 0x1F	; 31
    4d9e:	80 93 42 03 	sts	0x0342, r24
#define CLI_DEFAULT_TIMEOUT_M 2
static volatile uint8_t CLITimeoutM = CLI_DEFAULT_TIMEOUT_M;

// Reset CLI active timer to the full whack before it goes inactive again (ie makes CLI active for a while).
// Thread-safe.
void resetCLIActiveTimer() { CLITimeoutM = CLI_DEFAULT_TIMEOUT_M; }
    4da2:	92 e0       	ldi	r25, 0x02	; 2
    4da4:	90 93 35 01 	sts	0x0135, r25
    4da8:	84 e6       	ldi	r24, 0x64	; 100
    4daa:	80 93 ec 01 	sts	0x01EC, r24
    4dae:	82 e3       	ldi	r24, 0x32	; 50
    4db0:	80 93 ed 01 	sts	0x01ED, r24
    4db4:	90 93 ee 01 	sts	0x01EE, r25
#ifdef SUPPORT_BAKE
      if(isBakeModePutative) { startBakeDebounced(); } else { cancelBakeDebounced(); }
#endif

      markUIControlUsed(); // Note activity on release of MODE button...
      modeButtonWasPressed = false;
    4db8:	10 92 46 03 	sts	0x0346, r1
      }

    // Keep reporting UI status if the user has just touched the unit in some way.
    // (Or if occupancy/activity was just detected, to give the use some feedback for indirectly interacting.)
    const bool justTouched = statusChange || veryRecentUIControlUse() || Occupancy.reportedRecently();
    4dbc:	80 91 44 03 	lds	r24, 0x0344
    4dc0:	88 23       	and	r24, r24
    4dc2:	c9 f4       	brne	.+50     	; 0x4df6 <tickUI(unsigned char)+0x158>
  }

// True if a manual UI control has been very recently (seconds to minutes ago) operated.
// The user may still be interacting with the control and the UI etc should probably be extra responsive.
// Thread-safe.
bool veryRecentUIControlUse() { return(uiTimeoutM >= (UI_DEFAULT_RECENT_USE_TIMEOUT_M - UI_DEFAULT_VERY_RECENT_USE_TIMEOUT_M)); }
    4dc4:	80 91 42 03 	lds	r24, 0x0342
      modeButtonWasPressed = false;
      }

    // Keep reporting UI status if the user has just touched the unit in some way.
    // (Or if occupancy/activity was just detected, to give the use some feedback for indirectly interacting.)
    const bool justTouched = statusChange || veryRecentUIControlUse() || Occupancy.reportedRecently();
    4dc8:	8d 31       	cpi	r24, 0x1D	; 29
    4dca:	a8 f4       	brcc	.+42     	; 0x4df6 <tickUI(unsigned char)+0x158>
    virtual const char *tag() const { return("occ|%"); }

    // True if activity/occupancy recently reported (within last couple of minutes).
    // Includes weak and strong reports.
    // Thread-safe.
    bool reportedRecently() { return(0 != activityCountdownM); }
    4dcc:	80 91 ee 01 	lds	r24, 0x01EE
    4dd0:	88 23       	and	r24, r24
    4dd2:	89 f4       	brne	.+34     	; 0x4df6 <tickUI(unsigned char)+0x158>
    4dd4:	99 c0       	rjmp	.+306    	; 0x4f08 <tickUI(unsigned char)+0x26a>
      // DHD20131223: do not flash if the room is dark so as to save energy and avoid disturbing sleep, etc.
      // In this case force resample of light level frequently in case user turns light on eg to operate unit.
      // Do show LED flash if user has recently operated controls (other than mode button) manually.
      // Flash infrequently if no recently operated controls and not in BAKE mode and not actually calling for heat;
      // this is to conserve batteries for those people who leave the valves in WARM mode all the time.
      if(justTouched ||
    4dd6:	11 23       	and	r17, r17
    4dd8:	49 f4       	brne	.+18     	; 0x4dec <tickUI(unsigned char)+0x14e>
    // Can be used to trigger rebuild of messages, force updates to actuators, etc.
    bool isValveMoved() const { return(retainedState.valveMoved); }

    // True if this unit is nominally calling for heat (temperature is under target).
    // Thread-safe and ISR safe.
    bool isCallingForHeat() const { return(callingForHeat); }
    4dda:	80 91 14 02 	lds	r24, 0x0214
    4dde:	88 23       	and	r24, r24
    4de0:	29 f4       	brne	.+10     	; 0x4dec <tickUI(unsigned char)+0x14e>
    4de2:	0e 94 89 03 	call	0x712	; 0x712 <inBakeMode()>
    4de6:	88 23       	and	r24, r24
    4de8:	09 f4       	brne	.+2      	; 0x4dec <tickUI(unsigned char)+0x14e>
    4dea:	5f c0       	rjmp	.+190    	; 0x4eaa <tickUI(unsigned char)+0x20c>
    bool isRoomLit() const { return(isRoomLitFlag); }

    // Returns true if room is light enough for someone to be active.
    // False if unknown.
    // Thread-safe and usable within ISRs (Interrupt Service Routines).
    bool isRoomDark() const { return(!isRoomLitFlag); }
    4dec:	80 91 5e 03 	lds	r24, 0x035E
    4df0:	88 23       	and	r24, r24
    4df2:	09 f4       	brne	.+2      	; 0x4df6 <tickUI(unsigned char)+0x158>
    4df4:	5a c0       	rjmp	.+180    	; 0x4eaa <tickUI(unsigned char)+0x20c>
         ((forthTick || NominalRadValve.isCallingForHeat() || inBakeMode()) && !AmbLight.isRoomDark()))
        {
        // First flash to indicate WARM mode (or pot being twiddled).
        LED_HEATCALL_ON();
    4df6:	5c 98       	cbi	0x0b, 4	; 11
        // LED on stepwise proportional to temp pot setting.
        // Small number of steps (3) should help make positioning more obvious.
        const uint8_t wt = getWARMTargetC();
    4df8:	0e 94 ab 03 	call	0x756	; 0x756 <getWARMTargetC()>
    4dfc:	18 2f       	mov	r17, r24
        // Makes vtiny|tiny|medium flash for cool|OK|warm temperature target.
        if(isEcoTemperature(wt)) { veryTinyPause(); }
    4dfe:	88 33       	cpi	r24, 0x38	; 56
    4e00:	28 f4       	brcc	.+10     	; 0x4e0c <tickUI(unsigned char)+0x16e>
// This may be achieved in part by dynamically slowing the CPU clock if possible.
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed((((MIN_CPU_HZ * (ms)) + 2000) / 4000) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    4e02:	85 e2       	ldi	r24, 0x25	; 37
    4e04:	90 e0       	ldi	r25, 0x00	; 0
    4e06:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
    4e0a:	07 c0       	rjmp	.+14     	; 0x4e1a <tickUI(unsigned char)+0x17c>
        else if(!isComfortTemperature(wt)) { tinyPause(); }
    4e0c:	81 34       	cpi	r24, 0x41	; 65
    4e0e:	10 f4       	brcc	.+4      	; 0x4e14 <tickUI(unsigned char)+0x176>
// Very tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define VERYTINY_PAUSE_MS 5
static void inline veryTinyPause() { sleepLowPowerMs(VERYTINY_PAUSE_MS); }
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define TINY_PAUSE_MS 15
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    4e10:	80 e0       	ldi	r24, 0x00	; 0
    4e12:	01 c0       	rjmp	.+2      	; 0x4e16 <tickUI(unsigned char)+0x178>
// Small low-power sleep.
#define SMALL_PAUSE_MS 30
static void inline smallPause() { nap(WDTO_30MS); }
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define MEDIUM_PAUSE_MS 60
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
    4e14:	82 e0       	ldi	r24, 0x02	; 2
    4e16:	0e 94 39 17 	call	0x2e72	; 0x2e72 <nap(signed char)>
    4e1a:	80 91 14 02 	lds	r24, 0x0214
        else { mediumPause(); }

        // Second flash to indicate actually calling for heat.
        if(NominalRadValve.isCallingForHeat())
    4e1e:	88 23       	and	r24, r24
    4e20:	09 f4       	brne	.+2      	; 0x4e24 <tickUI(unsigned char)+0x186>
    4e22:	43 c0       	rjmp	.+134    	; 0x4eaa <tickUI(unsigned char)+0x20c>
          {
          LED_HEATCALL_OFF();
    4e24:	5c 9a       	sbi	0x0b, 4	; 11
          offPause(); // V0.09 was mediumPause().
    4e26:	0e 94 48 26 	call	0x4c90	; 0x4c90 <offPause()>
          LED_HEATCALL_ON(); // flash
    4e2a:	5c 98       	cbi	0x0b, 4	; 11
          if(isEcoTemperature(wt)) { veryTinyPause(); }
    4e2c:	18 33       	cpi	r17, 0x38	; 56
    4e2e:	18 f4       	brcc	.+6      	; 0x4e36 <tickUI(unsigned char)+0x198>
// This may be achieved in part by dynamically slowing the CPU clock if possible.
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed((((MIN_CPU_HZ * (ms)) + 2000) / 4000) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    4e30:	85 e2       	ldi	r24, 0x25	; 37
    4e32:	90 e0       	ldi	r25, 0x00	; 0
    4e34:	04 c0       	rjmp	.+8      	; 0x4e3e <tickUI(unsigned char)+0x1a0>
          else if(!isComfortTemperature(wt)) { sleepLowPowerMs((VERYTINY_PAUSE_MS + TINY_PAUSE_MS) / 2); }
    4e36:	11 34       	cpi	r17, 0x41	; 65
    4e38:	28 f4       	brcc	.+10     	; 0x4e44 <tickUI(unsigned char)+0x1a6>
    4e3a:	8c e4       	ldi	r24, 0x4C	; 76
    4e3c:	90 e0       	ldi	r25, 0x00	; 0
    4e3e:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
    4e42:	03 c0       	rjmp	.+6      	; 0x4e4a <tickUI(unsigned char)+0x1ac>
// Very tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define VERYTINY_PAUSE_MS 5
static void inline veryTinyPause() { sleepLowPowerMs(VERYTINY_PAUSE_MS); }
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define TINY_PAUSE_MS 15
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    4e44:	80 e0       	ldi	r24, 0x00	; 0
    4e46:	0e 94 39 17 	call	0x2e72	; 0x2e72 <nap(signed char)>
          else { tinyPause(); }

#ifdef SUPPORT_BAKE
          if(inBakeMode())
    4e4a:	0e 94 89 03 	call	0x712	; 0x712 <inBakeMode()>
    4e4e:	88 23       	and	r24, r24
    4e50:	61 f1       	breq	.+88     	; 0x4eaa <tickUI(unsigned char)+0x20c>
            {
            // Third (lengthened) flash to indicate BAKE mode.
            LED_HEATCALL_OFF();
    4e52:	5c 9a       	sbi	0x0b, 4	; 11
// Small low-power sleep.
#define SMALL_PAUSE_MS 30
static void inline smallPause() { nap(WDTO_30MS); }
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define MEDIUM_PAUSE_MS 60
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
    4e54:	82 e0       	ldi	r24, 0x02	; 2
    4e56:	0e 94 39 17 	call	0x2e72	; 0x2e72 <nap(signed char)>
            mediumPause(); // Note different flash off time to try to distinguish this last flash.
            LED_HEATCALL_ON();
    4e5a:	5c 98       	cbi	0x0b, 4	; 11
            // Makes tiny|small|medium flash for eco|OK|comfort temperature target.
            if(isEcoTemperature(wt)) { tinyPause(); }
    4e5c:	18 33       	cpi	r17, 0x38	; 56
    4e5e:	10 f4       	brcc	.+4      	; 0x4e64 <tickUI(unsigned char)+0x1c6>
// Very tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define VERYTINY_PAUSE_MS 5
static void inline veryTinyPause() { sleepLowPowerMs(VERYTINY_PAUSE_MS); }
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define TINY_PAUSE_MS 15
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    4e60:	80 e0       	ldi	r24, 0x00	; 0
    4e62:	05 c0       	rjmp	.+10     	; 0x4e6e <tickUI(unsigned char)+0x1d0>
            else if(!isComfortTemperature(wt)) { smallPause(); }
    4e64:	11 34       	cpi	r17, 0x41	; 65
    4e66:	10 f4       	brcc	.+4      	; 0x4e6c <tickUI(unsigned char)+0x1ce>
// Small low-power sleep.
#define SMALL_PAUSE_MS 30
static void inline smallPause() { nap(WDTO_30MS); }
    4e68:	81 e0       	ldi	r24, 0x01	; 1
    4e6a:	01 c0       	rjmp	.+2      	; 0x4e6e <tickUI(unsigned char)+0x1d0>
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define MEDIUM_PAUSE_MS 60
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
    4e6c:	82 e0       	ldi	r24, 0x02	; 2
    4e6e:	0e 94 39 17 	call	0x2e72	; 0x2e72 <nap(signed char)>
    4e72:	1b c0       	rjmp	.+54     	; 0x4eaa <tickUI(unsigned char)+0x20c>
    4e74:	80 91 5e 03 	lds	r24, 0x035E
    // Even in FROST mode, and if actually calling for heat (eg opening the rad valve significantly, etc)
    // then emit a tiny double flash on every 4th tick.
    // This call for heat may be frost protection or pre-warming / anticipating demand.
    // DHD20130528: new 4th-tick flash in FROST mode...
    // DHD20131223: do not flash if the room is dark so as to save energy and avoid disturbing sleep, etc.
    else if(forthTick &&
    4e78:	88 23       	and	r24, r24
    4e7a:	b9 f0       	breq	.+46     	; 0x4eaa <tickUI(unsigned char)+0x20c>
    4e7c:	80 91 14 02 	lds	r24, 0x0214
    4e80:	88 23       	and	r24, r24
    4e82:	99 f0       	breq	.+38     	; 0x4eaa <tickUI(unsigned char)+0x20c>
    4e84:	81 ef       	ldi	r24, 0xF1	; 241
    4e86:	91 e0       	ldi	r25, 0x01	; 1
    4e88:	0e 94 24 0c 	call	0x1848	; 0x1848 <ModelledRadValve::isControlledValveReallyOpen() const>
    4e8c:	88 23       	and	r24, r24
    4e8e:	69 f0       	breq	.+26     	; 0x4eaa <tickUI(unsigned char)+0x20c>
            !AmbLight.isRoomDark() &&
            NominalRadValve.isCallingForHeat() &&
            NominalRadValve.isControlledValveReallyOpen())
      {
      // Double flash every 4th tick indicates call for heat while in FROST MODE (matches call for heat in WARM mode).
      LED_HEATCALL_ON(); // flash
    4e90:	5c 98       	cbi	0x0b, 4	; 11
// This may be achieved in part by dynamically slowing the CPU clock if possible.
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed((((MIN_CPU_HZ * (ms)) + 2000) / 4000) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    4e92:	85 e2       	ldi	r24, 0x25	; 37
    4e94:	90 e0       	ldi	r25, 0x00	; 0
    4e96:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
      veryTinyPause();
      LED_HEATCALL_OFF();
    4e9a:	5c 9a       	sbi	0x0b, 4	; 11
      offPause();
    4e9c:	0e 94 48 26 	call	0x4c90	; 0x4c90 <offPause()>
      LED_HEATCALL_ON(); // flash
    4ea0:	5c 98       	cbi	0x0b, 4	; 11
    4ea2:	85 e2       	ldi	r24, 0x25	; 37
    4ea4:	90 e0       	ldi	r25, 0x00	; 0
    4ea6:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
      veryTinyPause();
      }

    // Enforce any changes that may have been driven by other UI components (ie other than MODE button).
    // Eg adjustment of temp pot / eco bias changing scheduled state.
    if(statusChange)
    4eaa:	80 91 44 03 	lds	r24, 0x0344
    4eae:	88 23       	and	r24, r24
    4eb0:	61 f0       	breq	.+24     	; 0x4eca <tickUI(unsigned char)+0x22c>
      {
      static bool prevScheduleStatus;
      const bool currentScheduleStatus = isAnyScheduleOnWARMNow();
    4eb2:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <isAnyScheduleOnWARMNow()>
    4eb6:	98 2f       	mov	r25, r24
      if(currentScheduleStatus != prevScheduleStatus)
    4eb8:	80 91 45 03 	lds	r24, 0x0345
    4ebc:	98 17       	cp	r25, r24
    4ebe:	29 f0       	breq	.+10     	; 0x4eca <tickUI(unsigned char)+0x22c>
        {
        prevScheduleStatus = currentScheduleStatus;
    4ec0:	90 93 45 03 	sts	0x0345, r25
        setWarmModeDebounced(currentScheduleStatus);
    4ec4:	89 2f       	mov	r24, r25
    4ec6:	0e 94 82 03 	call	0x704	; 0x704 <setWarmModeDebounced(bool)>
        }
      }
    }

  // Ensure LED forced off unconditionally at least once each cycle.
  LED_HEATCALL_OFF();
    4eca:	5c 9a       	sbi	0x0b, 4	; 11

#ifdef LEARN_BUTTON_AVAILABLE
  // Handle learn button if supported and if is currently pressed.
  if(fastDigitalRead(BUTTON_LEARN_L) == LOW)
    4ecc:	18 99       	sbic	0x03, 0	; 3
    4ece:	15 c0       	rjmp	.+42     	; 0x4efa <tickUI(unsigned char)+0x25c>
    {
    handleLEARN(0);
    4ed0:	80 e0       	ldi	r24, 0x00	; 0
    4ed2:	0e 94 ac 20 	call	0x4158	; 0x4158 <handleLEARN(unsigned char)>
// Record local manual operation of a local physical UI control, eg not remote or via CLI.
// To be thread-safe, everything that this touches or calls must be.
// Thread-safe.
void markUIControlUsed()
  {
  statusChange = true; // Note user interaction with the system.
    4ed6:	81 e0       	ldi	r24, 0x01	; 1
    4ed8:	80 93 44 03 	sts	0x0344, r24
  uiTimeoutM = UI_DEFAULT_RECENT_USE_TIMEOUT_M; // Ensure that UI controls are kept 'warm' for a little while.
    4edc:	8f e1       	ldi	r24, 0x1F	; 31
    4ede:	80 93 42 03 	sts	0x0342, r24
#define CLI_DEFAULT_TIMEOUT_M 2
static volatile uint8_t CLITimeoutM = CLI_DEFAULT_TIMEOUT_M;

// Reset CLI active timer to the full whack before it goes inactive again (ie makes CLI active for a while).
// Thread-safe.
void resetCLIActiveTimer() { CLITimeoutM = CLI_DEFAULT_TIMEOUT_M; }
    4ee2:	92 e0       	ldi	r25, 0x02	; 2
    4ee4:	90 93 35 01 	sts	0x0135, r25
    // Do not call based on internal/synthetic events.
    // Such evidence may include operation of buttons (etc) on the unit or PIR.
    // Do not call from (for example) 'on' schedule change.
    // Makes occupation immediately visible.
    // Thread-safe and ISR-safe.
    void markAsOccupied() { value = 100; occupationCountdownM = OCCUPATION_TIMEOUT_M; activityCountdownM = 2; }
    4ee8:	84 e6       	ldi	r24, 0x64	; 100
    4eea:	80 93 ec 01 	sts	0x01EC, r24
    4eee:	82 e3       	ldi	r24, 0x32	; 50
    4ef0:	80 93 ed 01 	sts	0x01ED, r24
    4ef4:	90 93 ee 01 	sts	0x01EE, r25
  // Handle learn button if supported and if is currently pressed.
  if(fastDigitalRead(BUTTON_LEARN_L) == LOW)
    {
    handleLEARN(0);
    markUIControlUsed(); // Mark controls used and room as currently occupied given button press.
    LED_HEATCALL_ON(); // Leave heatcall LED on while learn button held down.
    4ef8:	5c 98       	cbi	0x0b, 4	; 11
    LED_HEATCALL_ON(); // Leave heatcall LED on while learn button held down.
    }
#endif
#endif

  const bool statusChanged = statusChange;
    4efa:	80 91 44 03 	lds	r24, 0x0344
  statusChange = false; // Potential race.
    4efe:	10 92 44 03 	sts	0x0344, r1
  return(statusChanged);
  }
    4f02:	1f 91       	pop	r17
    4f04:	0f 91       	pop	r16
    4f06:	08 95       	ret
  tinyPause();
  LED_UI2_OFF(); // Generally force 2nd LED off.
#endif

  // True on every 4th tick/call, ie about once every 8 seconds.
  const bool forthTick = !((++tickCount) & 3); // True on every 4th tick.
    4f08:	10 e0       	ldi	r17, 0x00	; 0
    4f0a:	80 2f       	mov	r24, r16
    4f0c:	90 e0       	ldi	r25, 0x00	; 0
    4f0e:	83 70       	andi	r24, 0x03	; 3
    4f10:	90 70       	andi	r25, 0x00	; 0
    4f12:	89 2b       	or	r24, r25
    4f14:	09 f4       	brne	.+2      	; 0x4f18 <tickUI(unsigned char)+0x27a>
    4f16:	11 e0       	ldi	r17, 0x01	; 1
    // (Or if occupancy/activity was just detected, to give the use some feedback for indirectly interacting.)
    const bool justTouched = statusChange || veryRecentUIControlUse() || Occupancy.reportedRecently();

    // Mode button not pressed: indicate current mode with flash(es); more flashes if actually calling for heat.
    // Force display while UI controls are being used, eg to indicate temp pot position.
    if(justTouched || inWarmMode()) // Generate flash(es) if in WARM mode or fiddling with UI other than Mode button.
    4f18:	0e 94 7f 03 	call	0x6fe	; 0x6fe <inWarmMode()>
    4f1c:	88 23       	and	r24, r24
    4f1e:	09 f0       	breq	.+2      	; 0x4f22 <tickUI(unsigned char)+0x284>
    4f20:	5a cf       	rjmp	.-332    	; 0x4dd6 <tickUI(unsigned char)+0x138>
    // Even in FROST mode, and if actually calling for heat (eg opening the rad valve significantly, etc)
    // then emit a tiny double flash on every 4th tick.
    // This call for heat may be frost protection or pre-warming / anticipating demand.
    // DHD20130528: new 4th-tick flash in FROST mode...
    // DHD20131223: do not flash if the room is dark so as to save energy and avoid disturbing sleep, etc.
    else if(forthTick &&
    4f22:	11 23       	and	r17, r17
    4f24:	11 f2       	breq	.-124    	; 0x4eaa <tickUI(unsigned char)+0x20c>
    4f26:	a6 cf       	rjmp	.-180    	; 0x4e74 <tickUI(unsigned char)+0x1d6>

00004f28 <global constructors keyed to _Z5panicv>:
  '/',
  __DATE__[0], __DATE__[1], __DATE__[2],
  '/',
  __DATE__[4], __DATE__[5],
  '\0'
  };
    4f28:	82 e3       	ldi	r24, 0x32	; 50
    4f2a:	80 93 36 01 	sts	0x0136, r24
    4f2e:	80 e3       	ldi	r24, 0x30	; 48
    4f30:	80 93 37 01 	sts	0x0137, r24
    4f34:	21 e3       	ldi	r18, 0x31	; 49
    4f36:	20 93 38 01 	sts	0x0138, r18
    4f3a:	95 e3       	ldi	r25, 0x35	; 53
    4f3c:	90 93 39 01 	sts	0x0139, r25
    4f40:	86 e4       	ldi	r24, 0x46	; 70
    4f42:	80 93 3b 01 	sts	0x013B, r24
    4f46:	85 e6       	ldi	r24, 0x65	; 101
    4f48:	80 93 3c 01 	sts	0x013C, r24
    4f4c:	82 e6       	ldi	r24, 0x62	; 98
    4f4e:	80 93 3d 01 	sts	0x013D, r24
    4f52:	20 93 3f 01 	sts	0x013F, r18
    4f56:	90 93 40 01 	sts	0x0140, r25
//us apparent: 1408
//us apparent: 3776
//us apparent: 2816
#endif
#endif
  }
    4f5a:	08 95       	ret

00004f5c <loop>:
#if defined(UNIT_TESTS) // Run unit tests *instead* of normal loop() code. 
  loopUnitTest();
#elif defined(ALT_MAIN_LOOP) // Run alternative main loop.
  loopAlt();
#else // Normal OpenTRV usage.
  loopOpenTRV();
    4f5c:	0e 94 47 0c 	call	0x188e	; 0x188e <loopOpenTRV()>
//us apparent: 1408
//us apparent: 3776
//us apparent: 2816
#endif
#endif
  }
    4f60:	08 95       	ret

00004f62 <sleepLowPowerMs(unsigned int)>:
    4f62:	a0 e0       	ldi	r26, 0x00	; 0
    4f64:	b0 e0       	ldi	r27, 0x00	; 0
    4f66:	bc 01       	movw	r22, r24
    4f68:	cd 01       	movw	r24, r26
    4f6a:	22 e1       	ldi	r18, 0x12	; 18
    4f6c:	3a e7       	ldi	r19, 0x7A	; 122
    4f6e:	40 e0       	ldi	r20, 0x00	; 0
    4f70:	50 e0       	ldi	r21, 0x00	; 0
    4f72:	0e 94 0f 35 	call	0x6a1e	; 0x6a1e <__mulsi3>
    4f76:	60 53       	subi	r22, 0x30	; 48
    4f78:	78 4f       	sbci	r23, 0xF8	; 248
    4f7a:	8f 4f       	sbci	r24, 0xFF	; 255
    4f7c:	9f 4f       	sbci	r25, 0xFF	; 255
    4f7e:	20 ea       	ldi	r18, 0xA0	; 160
    4f80:	3f e0       	ldi	r19, 0x0F	; 15
    4f82:	40 e0       	ldi	r20, 0x00	; 0
    4f84:	50 e0       	ldi	r21, 0x00	; 0
    4f86:	0e 94 77 35 	call	0x6aee	; 0x6aee <__divmodsi4>
    4f8a:	da 01       	movw	r26, r20
    4f8c:	c9 01       	movw	r24, r18
    4f8e:	02 97       	sbiw	r24, 0x02	; 2
    4f90:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
    4f94:	08 95       	ret

00004f96 <posPOST(unsigned char, __FlashStringHelper const*)>:
//   * Two quick flashes from the Arduino bootloader then the LED comes on.
//   * Each of the 5 main sections of Power On Self Test is 1 second LED on, 0.5 second off, n short flashes separated by 0.25s off, then 0.5s off, then 1s on.
//     The value of n is 1, 2, 3, 4, 5.
//   * The LED should then go off except for optional faint flickers as the radio is being driven if set up to do so.
#define PP_OFF_MS 250
static void posPOST(const uint8_t position, const __FlashStringHelper *s)
    4f96:	ff 92       	push	r15
    4f98:	0f 93       	push	r16
    4f9a:	1f 93       	push	r17
    4f9c:	cf 93       	push	r28
    4f9e:	df 93       	push	r29
    4fa0:	f8 2e       	mov	r15, r24
    4fa2:	8b 01       	movw	r16, r22
  {
  sleepLowPowerMs(1000);
    4fa4:	88 ee       	ldi	r24, 0xE8	; 232
    4fa6:	93 e0       	ldi	r25, 0x03	; 3
    4fa8:	0e 94 b1 27 	call	0x4f62	; 0x4f62 <sleepLowPowerMs(unsigned int)>
#ifdef DEBUG
  DEBUG_SERIAL_PRINT_FLASHSTRING("posPOST: "); // Can only be used once serial is set up.
    4fac:	8b ef       	ldi	r24, 0xFB	; 251
    4fae:	93 e0       	ldi	r25, 0x03	; 3
    4fb0:	0e 94 66 1f 	call	0x3ecc	; 0x3ecc <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(position);
    4fb4:	cf 2d       	mov	r28, r15
    4fb6:	d0 e0       	ldi	r29, 0x00	; 0
    4fb8:	ce 01       	movw	r24, r28
    4fba:	6a e0       	ldi	r22, 0x0A	; 10
    4fbc:	70 e0       	ldi	r23, 0x00	; 0
    4fbe:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINT_FLASHSTRING(": ");
    4fc2:	88 ef       	ldi	r24, 0xF8	; 248
    4fc4:	93 e0       	ldi	r25, 0x03	; 3
    4fc6:	0e 94 66 1f 	call	0x3ecc	; 0x3ecc <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(s);
    4fca:	c8 01       	movw	r24, r16
    4fcc:	0e 94 66 1f 	call	0x3ecc	; 0x3ecc <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINTLN();
    4fd0:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <serialPrintlnAndFlush()>
#else
  serialPrintlnAndFlush(s);
#endif
//  pinMode(LED_HEATCALL, OUTPUT);
  LED_HEATCALL_OFF();
    4fd4:	5c 9a       	sbi	0x0b, 4	; 11

  // Skip much of lightshow if '0'/end/none position.
  if(position > 0)
    4fd6:	ff 20       	and	r15, r15
    4fd8:	89 f0       	breq	.+34     	; 0x4ffc <posPOST(unsigned char, __FlashStringHelper const*)+0x66>
    {
    sleepLowPowerMs(2*PP_OFF_MS); // TODO: use this time to gather entropy.
    4fda:	84 ef       	ldi	r24, 0xF4	; 244
    4fdc:	91 e0       	ldi	r25, 0x01	; 1
    4fde:	07 c0       	rjmp	.+14     	; 0x4fee <posPOST(unsigned char, __FlashStringHelper const*)+0x58>
    for(int i = position; --i >= 0; )
      {
      LED_HEATCALL_ON();
    4fe0:	5c 98       	cbi	0x0b, 4	; 11
// Very tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define VERYTINY_PAUSE_MS 5
static void inline veryTinyPause() { sleepLowPowerMs(VERYTINY_PAUSE_MS); }
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define TINY_PAUSE_MS 15
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    4fe2:	80 e0       	ldi	r24, 0x00	; 0
    4fe4:	0e 94 39 17 	call	0x2e72	; 0x2e72 <nap(signed char)>
      tinyPause();
      LED_HEATCALL_OFF();
    4fe8:	5c 9a       	sbi	0x0b, 4	; 11
      sleepLowPowerMs(PP_OFF_MS); // TODO: use this time to gather entropy.
    4fea:	8a ef       	ldi	r24, 0xFA	; 250
    4fec:	90 e0       	ldi	r25, 0x00	; 0
    4fee:	0e 94 b1 27 	call	0x4f62	; 0x4f62 <sleepLowPowerMs(unsigned int)>

  // Skip much of lightshow if '0'/end/none position.
  if(position > 0)
    {
    sleepLowPowerMs(2*PP_OFF_MS); // TODO: use this time to gather entropy.
    for(int i = position; --i >= 0; )
    4ff2:	21 97       	sbiw	r28, 0x01	; 1
    4ff4:	8f ef       	ldi	r24, 0xFF	; 255
    4ff6:	cf 3f       	cpi	r28, 0xFF	; 255
    4ff8:	d8 07       	cpc	r29, r24
    4ffa:	91 f7       	brne	.-28     	; 0x4fe0 <posPOST(unsigned char, __FlashStringHelper const*)+0x4a>
      LED_HEATCALL_OFF();
      sleepLowPowerMs(PP_OFF_MS); // TODO: use this time to gather entropy.
      }
    }

  sleepLowPowerMs(PP_OFF_MS); // TODO: use this time to gather entropy.
    4ffc:	8a ef       	ldi	r24, 0xFA	; 250
    4ffe:	90 e0       	ldi	r25, 0x00	; 0
    5000:	0e 94 b1 27 	call	0x4f62	; 0x4f62 <sleepLowPowerMs(unsigned int)>
  LED_HEATCALL_ON();
    5004:	5c 98       	cbi	0x0b, 4	; 11
  sleepLowPowerMs(1000); // TODO: use this time to gather entropy.
    5006:	88 ee       	ldi	r24, 0xE8	; 232
    5008:	93 e0       	ldi	r25, 0x03	; 3
    500a:	0e 94 b1 27 	call	0x4f62	; 0x4f62 <sleepLowPowerMs(unsigned int)>
  }
    500e:	df 91       	pop	r29
    5010:	cf 91       	pop	r28
    5012:	1f 91       	pop	r17
    5014:	0f 91       	pop	r16
    5016:	ff 90       	pop	r15
    5018:	08 95       	ret

0000501a <serialPrintlnBuildVersion()>:
  };
// Version (code/board) information printed as one line to serial (with line-end, and flushed); machine- and human- parseable.
// Format: "board VXXXX REVY; code YYYY/Mmm/DD HH:MM:SS".
void serialPrintlnBuildVersion()
  {
  serialPrintAndFlush(F("board V0.2 REV"));
    501a:	8e e4       	ldi	r24, 0x4E	; 78
    501c:	94 e0       	ldi	r25, 0x04	; 4
    501e:	0e 94 66 1f 	call	0x3ecc	; 0x3ecc <serialPrintAndFlush(__FlashStringHelper const*)>
  serialPrintAndFlush(V0p2_REV);
    5022:	80 e0       	ldi	r24, 0x00	; 0
    5024:	90 e0       	ldi	r25, 0x00	; 0
    5026:	6a e0       	ldi	r22, 0x0A	; 10
    5028:	70 e0       	ldi	r23, 0x00	; 0
    502a:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <serialPrintAndFlush(int, int)>
  serialPrintAndFlush(F("; code $Id: V0p2_Main.ino 4142 2015-01-27 18:30:15Z damonhd $ ")); // Expect SVN to substitute the Id keyword here with svn:keywords property set.
    502e:	8f e0       	ldi	r24, 0x0F	; 15
    5030:	94 e0       	ldi	r25, 0x04	; 4
    5032:	0e 94 66 1f 	call	0x3ecc	; 0x3ecc <serialPrintAndFlush(__FlashStringHelper const*)>
  serialPrintAndFlush(_YYYYMmmDD);
    5036:	86 e3       	ldi	r24, 0x36	; 54
    5038:	91 e0       	ldi	r25, 0x01	; 1
    503a:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <serialPrintAndFlush(char const*)>
  serialPrintAndFlush(F(" " __TIME__));
    503e:	85 e0       	ldi	r24, 0x05	; 5
    5040:	94 e0       	ldi	r25, 0x04	; 4
    5042:	0e 94 66 1f 	call	0x3ecc	; 0x3ecc <serialPrintAndFlush(__FlashStringHelper const*)>
  serialPrintlnAndFlush();
    5046:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <serialPrintlnAndFlush()>
  }
    504a:	08 95       	ret

0000504c <panic()>:
// Tries not to use lots of energy so as to keep distress beacon running for a while.
void panic()
  {
#ifdef USE_MODULE_RFM22RADIOSIMPLE
  // Reset radio and go into low-power mode.
  RFM22PowerOnInit();
    504c:	0e 94 ae 1b 	call	0x375c	; 0x375c <RFM22PowerOnInit()>
#endif
  // Power down almost everything else...
  minimisePowerWithoutSleep();
    5050:	0e 94 76 19 	call	0x32ec	; 0x32ec <minimisePowerWithoutSleep()>
#ifdef LED_HEATCALL
  pinMode(LED_HEATCALL, OUTPUT);
#else
  pinMode(LED_HEATCALL_L, OUTPUT);
    5054:	84 e0       	ldi	r24, 0x04	; 4
    5056:	61 e0       	ldi	r22, 0x01	; 1
    5058:	0e 94 d4 2f 	call	0x5fa8	; 0x5fa8 <pinMode>
#endif
  for( ; ; )
    {
    LED_HEATCALL_ON();
    505c:	5c 98       	cbi	0x0b, 4	; 11
    505e:	80 e0       	ldi	r24, 0x00	; 0
    5060:	0e 94 39 17 	call	0x2e72	; 0x2e72 <nap(signed char)>
    tinyPause();
    LED_HEATCALL_OFF();
    5064:	5c 9a       	sbi	0x0b, 4	; 11
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define MEDIUM_PAUSE_MS 60
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
// Big low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define BIG_PAUSE_MS 120
static void inline bigPause() { nap(WDTO_120MS); } // 120ms vs 288ms nominal for PICAXE V0.09 impl.
    5066:	83 e0       	ldi	r24, 0x03	; 3
    5068:	0e 94 39 17 	call	0x2e72	; 0x2e72 <nap(signed char)>
    506c:	f7 cf       	rjmp	.-18     	; 0x505c <panic()+0x10>

0000506e <panic(__FlashStringHelper const*)>:
  }

// Panic with fixed message.
void panic(const __FlashStringHelper *s)
  {
  serialPrintlnAndFlush(s); // May fail.
    506e:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <serialPrintlnAndFlush(__FlashStringHelper const*)>
  panic();  
    5072:	0e 94 26 28 	call	0x504c	; 0x504c <panic()>
  }
    5076:	08 95       	ret

00005078 <optionalPOST()>:
  serialPrintlnAndFlush();
  }

// Optional Power-On Self Test routines.
// Aborts with a call to panic() if a test fails.
void optionalPOST()
    5078:	ff 92       	push	r15
    507a:	0f 93       	push	r16
    507c:	1f 93       	push	r17
  {
  // Capture early sub-cycle time to help ensure that the 32768Hz async clock is actually running.
  const uint8_t earlySCT = getSubCycleTime();
    507e:	10 91 b2 00 	lds	r17, 0x00B2

//  posPOST(1, F("about to test radio module"));

#ifdef USE_MODULE_RFM22RADIOSIMPLE
#if !defined(RFM22_IS_ACTUALLY_RFM23) && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("(Using RFM22.)");
    5082:	89 ee       	ldi	r24, 0xE9	; 233
    5084:	93 e0       	ldi	r25, 0x03	; 3
    5086:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif
  // Initialise the radio, if configured, ASAP because it can suck a lot of power until properly initialised.
  RFM22PowerOnInit();
    508a:	0e 94 ae 1b 	call	0x375c	; 0x375c <RFM22PowerOnInit()>
  // Check that the radio is correctly connected; panic if not...
  if(!RFM22CheckConnected()) { panic(); }
    508e:	0e 94 6f 1c 	call	0x38de	; 0x38de <RFM22CheckConnected()>
    5092:	88 23       	and	r24, r24
    5094:	11 f4       	brne	.+4      	; 0x509a <optionalPOST()+0x22>
    5096:	0e 94 26 28 	call	0x504c	; 0x504c <panic()>
  // Configure the radio.
  RFM22RegisterBlockSetup(FHT8V_RFM22_Reg_Values);
    509a:	8b e8       	ldi	r24, 0x8B	; 139
    509c:	90 e0       	ldi	r25, 0x00	; 0
    509e:	0e 94 8d 1b 	call	0x371a	; 0x371a <RFM22RegisterBlockSetup(unsigned char const (*) [2])>
  // Put the radio in low-power standby mode.
  RFM22ModeStandbyAndClearState();
    50a2:	0e 94 cd 1b 	call	0x379a	; 0x379a <RFM22ModeStandbyAndClearState()>
#endif

//  posPOST(1, F("Radio OK, checking buttons/sensors and xtal"));

  // Check buttons not stuck in the activated position.
  if((fastDigitalRead(BUTTON_MODE_L) == LOW)
    50a6:	4d 9b       	sbis	0x09, 5	; 9
    50a8:	02 c0       	rjmp	.+4      	; 0x50ae <optionalPOST()+0x36>
    50aa:	18 99       	sbic	0x03, 0	; 3
    50ac:	04 c0       	rjmp	.+8      	; 0x50b6 <optionalPOST()+0x3e>
#endif
#if defined(BUTTON_LEARN2_L)
     || (fastDigitalRead(BUTTON_LEARN2_L) == LOW)
#endif
    )
    { panic(F("button stuck")); }
    50ae:	8c ed       	ldi	r24, 0xDC	; 220
    50b0:	93 e0       	ldi	r25, 0x03	; 3
    50b2:	0e 94 37 28 	call	0x506e	; 0x506e <panic(__FlashStringHelper const*)>

#if defined(WAKEUP_32768HZ_XTAL)
  // Check that the 32768Hz async clock is actually running having done significant CPU-intensive work.
  const uint8_t laterSCT = getSubCycleTime();
    50b6:	f0 90 b2 00 	lds	r15, 0x00B2
  if(laterSCT == earlySCT)
    50ba:	f1 16       	cp	r15, r17
    50bc:	d9 f4       	brne	.+54     	; 0x50f4 <optionalPOST()+0x7c>
    50be:	0f ef       	ldi	r16, 0xFF	; 255
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("Sleeping to let 32768Hz clock start...");
#endif
    // Time spent here should not be a whole multiple of basic cycle time to avoid a spuriously-stationary async clock reading!
    // Allow several seconds to start.
    // Attempt to capture some entropy while waiting, implicitly from oscillator start-up time if nothing else.
    for(uint8_t i = 255; (--i > 0) && (earlySCT == getSubCycleTime()); )
    50c0:	01 50       	subi	r16, 0x01	; 1
    50c2:	09 f1       	breq	.+66     	; 0x5106 <optionalPOST()+0x8e>
    50c4:	80 91 b2 00 	lds	r24, 0x00B2
    50c8:	f8 16       	cp	r15, r24
    50ca:	e9 f4       	brne	.+58     	; 0x5106 <optionalPOST()+0x8e>
      {
      addEntropyToPool(clockJitterWDT() ^ noisyADCRead(), 1); // Conservatively hope for at least 1 bit from combined sources!
    50cc:	0e 94 78 18 	call	0x30f0	; 0x30f0 <clockJitterWDT()>
    50d0:	18 2f       	mov	r17, r24
    50d2:	81 e0       	ldi	r24, 0x01	; 1
    50d4:	0e 94 b2 19 	call	0x3364	; 0x3364 <noisyADCRead(bool)>
    50d8:	81 27       	eor	r24, r17
    50da:	61 e0       	ldi	r22, 0x01	; 1
    50dc:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <addEntropyToPool(unsigned char, unsigned char)>
      nap(WDTO_15MS); // Ensure lower mount of ~3s until loop finishes.
    50e0:	80 e0       	ldi	r24, 0x00	; 0
    50e2:	0e 94 39 17 	call	0x2e72	; 0x2e72 <nap(signed char)>
      captureEntropy1(); // Have other fun, though likely largely ineffective at this stage.
    50e6:	0e 94 34 19 	call	0x3268	; 0x3268 <captureEntropy1()>
    50ea:	ea cf       	rjmp	.-44     	; 0x50c0 <optionalPOST()+0x48>
    if(latestSCT == earlySCT)
      {
#if 0 && defined(DEBUG)
      DEBUG_SERIAL_PRINTLN_FLASHSTRING("32768Hz clock may not be running!");
#endif
      panic(F("Xtal dead")); // Async clock not running.
    50ec:	82 ed       	ldi	r24, 0xD2	; 210
    50ee:	93 e0       	ldi	r25, 0x03	; 3
    50f0:	0e 94 37 28 	call	0x506e	; 0x506e <panic(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("(No xtal.)");
#endif

  // Single POST checkpoint for speed.
#if defined(WAKEUP_32768HZ_XTAL)
  posPOST(0, F("Radio, xtal, buttons OK"));
    50f4:	80 e0       	ldi	r24, 0x00	; 0
    50f6:	6a eb       	ldi	r22, 0xBA	; 186
    50f8:	73 e0       	ldi	r23, 0x03	; 3
    50fa:	0e 94 cb 27 	call	0x4f96	; 0x4f96 <posPOST(unsigned char, __FlashStringHelper const*)>
#else
  posPOST(0, F("Radio, buttons OK"));
#endif
  }
    50fe:	1f 91       	pop	r17
    5100:	0f 91       	pop	r16
    5102:	ff 90       	pop	r15
    5104:	08 95       	ret
      addEntropyToPool(clockJitterWDT() ^ noisyADCRead(), 1); // Conservatively hope for at least 1 bit from combined sources!
      nap(WDTO_15MS); // Ensure lower mount of ~3s until loop finishes.
      captureEntropy1(); // Have other fun, though likely largely ineffective at this stage.
      }
#endif
    const uint8_t latestSCT = getSubCycleTime();
    5106:	80 91 b2 00 	lds	r24, 0x00B2
    if(latestSCT == earlySCT)
    510a:	8f 15       	cp	r24, r15
    510c:	99 f7       	brne	.-26     	; 0x50f4 <optionalPOST()+0x7c>
    510e:	ee cf       	rjmp	.-36     	; 0x50ec <optionalPOST()+0x74>

00005110 <setup>:
  }


// Setup routine: runs once after reset.
// Does some limited board self-test and will panic() if anything is obviously broken.
void setup()
    5110:	6f 92       	push	r6
    5112:	7f 92       	push	r7
    5114:	8f 92       	push	r8
    5116:	9f 92       	push	r9
    5118:	af 92       	push	r10
    511a:	bf 92       	push	r11
    511c:	cf 92       	push	r12
    511e:	df 92       	push	r13
    5120:	ef 92       	push	r14
    5122:	ff 92       	push	r15
    5124:	0f 93       	push	r16
    5126:	1f 93       	push	r17
    5128:	cf 93       	push	r28
    512a:	df 93       	push	r29
  {
  // Set appropriate low-power states, interrupts, etc, ASAP.
  powerSetup();
    512c:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <powerSetup()>
    5130:	0e e0       	ldi	r16, 0x0E	; 14
    5132:	10 e0       	ldi	r17, 0x00	; 0
    5134:	33 c0       	rjmp	.+102    	; 0x519c <setup+0x8c>
  {
  // Initialise all digital I/O to safe state ASAP and avoid floating lines where possible.
  // In absence of a specific alternative, drive low as an output to minimise consumption (eg from floating input).
  for(int i = 14; --i >= 0; ) // For all digital pins from 0 to 13 inclusive...
    {
    switch(i)
    5136:	05 30       	cpi	r16, 0x05	; 5
    5138:	11 05       	cpc	r17, r1
    513a:	61 f1       	breq	.+88     	; 0x5194 <setup+0x84>
    513c:	06 30       	cpi	r16, 0x06	; 6
    513e:	11 05       	cpc	r17, r1
    5140:	34 f4       	brge	.+12     	; 0x514e <setup+0x3e>
    5142:	17 fd       	sbrc	r17, 7
    5144:	14 c0       	rjmp	.+40     	; 0x516e <setup+0x5e>
    5146:	04 30       	cpi	r16, 0x04	; 4
    5148:	11 05       	cpc	r17, r1
    514a:	24 f1       	brlt	.+72     	; 0x5194 <setup+0x84>
    514c:	17 c0       	rjmp	.+46     	; 0x517c <setup+0x6c>
    514e:	09 30       	cpi	r16, 0x09	; 9
    5150:	11 05       	cpc	r17, r1
    5152:	e9 f0       	breq	.+58     	; 0x518e <setup+0x7e>
    5154:	0a 30       	cpi	r16, 0x0A	; 10
    5156:	11 05       	cpc	r17, r1
    5158:	24 f4       	brge	.+8      	; 0x5162 <setup+0x52>
    515a:	08 30       	cpi	r16, 0x08	; 8
    515c:	11 05       	cpc	r17, r1
    515e:	39 f4       	brne	.+14     	; 0x516e <setup+0x5e>
    5160:	19 c0       	rjmp	.+50     	; 0x5194 <setup+0x84>
    5162:	0a 30       	cpi	r16, 0x0A	; 10
    5164:	11 05       	cpc	r17, r1
    5166:	b1 f0       	breq	.+44     	; 0x5194 <setup+0x84>
    5168:	0c 30       	cpi	r16, 0x0C	; 12
    516a:	11 05       	cpc	r17, r1
    516c:	99 f0       	breq	.+38     	; 0x5194 <setup+0x84>
      {
      // Low output is good safe low-power default.
      default: { digitalWrite(i, LOW); pinMode(i, OUTPUT); break; }
    516e:	80 2f       	mov	r24, r16
    5170:	60 e0       	ldi	r22, 0x00	; 0
    5172:	0e 94 13 30 	call	0x6026	; 0x6026 <digitalWrite>
    5176:	80 2f       	mov	r24, r16
    5178:	61 e0       	ldi	r22, 0x01	; 1
    517a:	0e c0       	rjmp	.+28     	; 0x5198 <setup+0x88>
      // Switch main UI LED on for the rest of initialisation...
#ifdef LED_HEATCALL
      case LED_HEATCALL: { pinMode(LED_HEATCALL, OUTPUT); digitalWrite(LED_HEATCALL, HIGH); break; }
#endif
#ifdef LED_HEATCALL_L
      case LED_HEATCALL_L: { pinMode(LED_HEATCALL_L, OUTPUT); digitalWrite(LED_HEATCALL_L, LOW); break; }
    517c:	84 e0       	ldi	r24, 0x04	; 4
    517e:	61 e0       	ldi	r22, 0x01	; 1
    5180:	0e 94 d4 2f 	call	0x5fa8	; 0x5fa8 <pinMode>
    5184:	84 e0       	ldi	r24, 0x04	; 4
    5186:	60 e0       	ldi	r22, 0x00	; 0
    5188:	0e 94 13 30 	call	0x6026	; 0x6026 <digitalWrite>
    518c:	07 c0       	rjmp	.+14     	; 0x519c <setup+0x8c>
      case LED_UI2_L: { pinMode(LED_UI2_L, OUTPUT); digitalWrite(LED_UI2_L, HIGH); break; }
#endif

#ifdef PIN_RFM_NIRQ 
      // Set as input to avoid contention current.
      case PIN_RFM_NIRQ: { pinMode(PIN_RFM_NIRQ, INPUT); break; }
    518e:	89 e0       	ldi	r24, 0x09	; 9
    5190:	60 e0       	ldi	r22, 0x00	; 0
    5192:	02 c0       	rjmp	.+4      	; 0x5198 <setup+0x88>
#ifdef PIN_SERIAL_RX
      // Weak TX and RX pull-up empirically found to produce lowest leakage current
      // when 2xAA NiMH battery powered and connected to TTL-232R-3V3 USB lead.
      case PIN_SERIAL_RX: case PIN_SERIAL_TX:
#endif
        { pinMode(i, INPUT_PULLUP); break; }
    5194:	80 2f       	mov	r24, r16
    5196:	62 e0       	ldi	r22, 0x02	; 2
    5198:	0e 94 d4 2f 	call	0x5fa8	; 0x5fa8 <pinMode>
// Call this ASAP in setup() to configure I/O safely for the board, avoid pins floating, etc.
static inline void IOSetup()
  {
  // Initialise all digital I/O to safe state ASAP and avoid floating lines where possible.
  // In absence of a specific alternative, drive low as an output to minimise consumption (eg from floating input).
  for(int i = 14; --i >= 0; ) // For all digital pins from 0 to 13 inclusive...
    519c:	01 50       	subi	r16, 0x01	; 1
    519e:	10 40       	sbci	r17, 0x00	; 0
    51a0:	17 ff       	sbrs	r17, 7
    51a2:	c9 cf       	rjmp	.-110    	; 0x5136 <setup+0x26>
    }

#ifdef MOTOR_DRIVE_ML
  // Weakly pull up both motor REV7 H-bridge driver lines by default.
  // Safe for all boards and may reduce parasitic floating power consumption on non-REV7 boards.
  pinMode(MOTOR_DRIVE_ML, INPUT_PULLUP);
    51a4:	80 e1       	ldi	r24, 0x10	; 16
    51a6:	62 e0       	ldi	r22, 0x02	; 2
    51a8:	0e 94 d4 2f 	call	0x5fa8	; 0x5fa8 <pinMode>
  pinMode(MOTOR_DRIVE_MR, INPUT_PULLUP);
    51ac:	81 e1       	ldi	r24, 0x11	; 17
    51ae:	62 e0       	ldi	r22, 0x02	; 2
    51b0:	0e 94 d4 2f 	call	0x5fa8	; 0x5fa8 <pinMode>

  // IO setup for safety, eg to avoid pins floating.
  IOSetup();

  // Restore previous RTC state if available.
  restoreRTC();
    51b4:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <restoreRTC()>
  // TODO: consider code to calibrate the internal RC oscillator against the xtal, eg to keep serial comms happy, eg http://www.avrfreaks.net/index.php?name=PNphpBB2&file=printview&t=36237&start=0

  serialPrintAndFlush(F("\r\nOpenTRV: ")); // Leading CRLF to clear leading junk, eg from bootloader.
    51b8:	8e ea       	ldi	r24, 0xAE	; 174
    51ba:	93 e0       	ldi	r25, 0x03	; 3
    51bc:	0e 94 66 1f 	call	0x3ecc	; 0x3ecc <serialPrintAndFlush(__FlashStringHelper const*)>
    serialPrintlnBuildVersion();
    51c0:	0e 94 0d 28 	call	0x501a	; 0x501a <serialPrintlnBuildVersion()>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    51c4:	f9 99       	sbic	0x1f, 1	; 31
    51c6:	fe cf       	rjmp	.-4      	; 0x51c4 <setup+0xb4>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    51c8:	86 e0       	ldi	r24, 0x06	; 6
    51ca:	90 e0       	ldi	r25, 0x00	; 0
    51cc:	92 bd       	out	0x22, r25	; 34
    51ce:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    51d0:	f8 9a       	sbi	0x1f, 0	; 31
    51d2:	90 b4       	in	r9, 0x20	; 32
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    51d4:	f9 99       	sbic	0x1f, 1	; 31
    51d6:	fe cf       	rjmp	.-4      	; 0x51d4 <setup+0xc4>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    51d8:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    51da:	86 e0       	ldi	r24, 0x06	; 6
    51dc:	90 e0       	ldi	r25, 0x00	; 0
    51de:	92 bd       	out	0x22, r25	; 34
    51e0:	81 bd       	out	0x21, r24	; 33

  // Count resets to detect unexpected crashes/restarts.
  const uint8_t oldResetCount = eeprom_read_byte((uint8_t *)EE_START_RESET_COUNT);
  eeprom_write_byte((uint8_t *)EE_START_RESET_COUNT, 1 + oldResetCount);
    51e2:	93 94       	inc	r9
#endif
    EEDR = __value;
    51e4:	90 bc       	out	0x20, r9	; 32
    51e6:	9a 94       	dec	r9
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    51e8:	0f b6       	in	r0, 0x3f	; 63
    51ea:	f8 94       	cli
    51ec:	fa 9a       	sbi	0x1f, 2	; 31
    51ee:	f9 9a       	sbi	0x1f, 1	; 31
    51f0:	0f be       	out	0x3f, r0	; 63

#if defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("DEBUG");
    51f2:	88 ea       	ldi	r24, 0xA8	; 168
    51f4:	93 e0       	ldi	r25, 0x03	; 3
    51f6:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif
#if defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("Resets: ");
    51fa:	8f e9       	ldi	r24, 0x9F	; 159
    51fc:	93 e0       	ldi	r25, 0x03	; 3
    51fe:	0e 94 66 1f 	call	0x3ecc	; 0x3ecc <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(oldResetCount);
    5202:	89 2d       	mov	r24, r9
    5204:	90 e0       	ldi	r25, 0x00	; 0
    5206:	6a e0       	ldi	r22, 0x0A	; 10
    5208:	70 e0       	ldi	r23, 0x00	; 0
    520a:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    520e:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <serialPrintlnAndFlush()>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    5212:	f9 99       	sbic	0x1f, 1	; 31
    5214:	fe cf       	rjmp	.-4      	; 0x5212 <setup+0x102>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    5216:	8d e1       	ldi	r24, 0x1D	; 29
    5218:	90 e0       	ldi	r25, 0x00	; 0
    521a:	92 bd       	out	0x22, r25	; 34
    521c:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    521e:	f8 9a       	sbi	0x1f, 0	; 31
    5220:	10 b5       	in	r17, 0x20	; 32
#if !defined(ALT_MAIN_LOOP) && !defined(UNIT_TESTS)
  const uint8_t overruns = (~eeprom_read_byte((uint8_t *)EE_START_OVERRUN_COUNTER)) & 0xff;
    5222:	10 95       	com	r17
  if(0 != overruns)
    5224:	61 f0       	breq	.+24     	; 0x523e <setup+0x12e>
    {
    DEBUG_SERIAL_PRINT_FLASHSTRING("Overruns: ");
    5226:	84 e9       	ldi	r24, 0x94	; 148
    5228:	93 e0       	ldi	r25, 0x03	; 3
    522a:	0e 94 66 1f 	call	0x3ecc	; 0x3ecc <serialPrintAndFlush(__FlashStringHelper const*)>
    DEBUG_SERIAL_PRINT(overruns);
    522e:	81 2f       	mov	r24, r17
    5230:	90 e0       	ldi	r25, 0x00	; 0
    5232:	6a e0       	ldi	r22, 0x0A	; 10
    5234:	70 e0       	ldi	r23, 0x00	; 0
    5236:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <serialPrintAndFlush(int, int)>
    DEBUG_SERIAL_PRINTLN();
    523a:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <serialPrintlnAndFlush()>
// POST may take too long and do unwanted things,
// especially for non-standard hardware setup.
#if defined(ALT_MAIN_LOOP)
  POSTalt(); // Do alternate POST and setup if required.
#else
  optionalPOST();
    523e:	0e 94 3c 28 	call	0x5078	; 0x5078 <optionalPOST()>

  // No external sensors are *assumed* present if running alt main loop.
  // This may mean that the alt loop/POST will have to initialise them explicitly,
  // and the initial seed entropy may be marginally reduced also.
#if !defined(ALT_MAIN_LOOP) && !defined(UNIT_TESTS)
  const int light = AmbLight.read();
    5242:	89 e5       	ldi	r24, 0x59	; 89
    5244:	93 e0       	ldi	r25, 0x03	; 3
    5246:	0e 94 cb 2c 	call	0x5996	; 0x5996 <AmbientLight::read()>
    524a:	88 2e       	mov	r8, r24
  DEBUG_SERIAL_PRINT(light);
  DEBUG_SERIAL_PRINTLN();
#endif
//  // Assume 0 or full-scale values unlikely.
//  if((0 == light) || (light >= 1023)) { panic(F("LDR fault")); }
  const int heat = TemperatureC16.read();
    524c:	80 e6       	ldi	r24, 0x60	; 96
    524e:	93 e0       	ldi	r25, 0x03	; 3
    5250:	0e 94 74 2c 	call	0x58e8	; 0x58e8 <RoomTemperatureC16::read()>
    5254:	5c 01       	movw	r10, r24
#endif


#if !defined(ALT_MAIN_LOOP) && !defined(UNIT_TESTS)
  // Get current power supply voltage (internal sensor).
  const uint16_t Vcc = Supply_mV.read();
    5256:	8f ee       	ldi	r24, 0xEF	; 239
    5258:	92 e0       	ldi	r25, 0x02	; 2
    525a:	0e 94 3d 18 	call	0x307a	; 0x307a <SupplyVoltageMilliVolts::read()>
    525e:	3c 01       	movw	r6, r24
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("Vcc: ");
    5260:	8e e8       	ldi	r24, 0x8E	; 142
    5262:	93 e0       	ldi	r25, 0x03	; 3
    5264:	0e 94 66 1f 	call	0x3ecc	; 0x3ecc <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(Vcc);
    5268:	c3 01       	movw	r24, r6
    526a:	6a e0       	ldi	r22, 0x0A	; 10
    526c:	70 e0       	ldi	r23, 0x00	; 0
    526e:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <serialPrintAndFlush(unsigned int, int)>
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("mV");
    5272:	8b e8       	ldi	r24, 0x8B	; 139
    5274:	93 e0       	ldi	r25, 0x03	; 3
    5276:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif
  // Get internal temperature measurement (internal sensor).
  const int intTempC16 = readInternalTemperatureC16();
    527a:	0e 94 61 18 	call	0x30c2	; 0x30c2 <readInternalTemperatureC16()>
    527e:	8c 01       	movw	r16, r24
    5280:	e0 e0       	ldi	r30, 0x00	; 0
    5282:	f1 e0       	ldi	r31, 0x01	; 1
    5284:	cc 24       	eor	r12, r12
    5286:	ca 94       	dec	r12
    5288:	dc 2c       	mov	r13, r12
        "eor    %A0,__tmp_reg__"

        : "=d" (__ret)
        : "r" (__data), "0" (__crc)
        : "r0"
    );
    528a:	81 91       	ld	r24, Z+
    528c:	96 01       	movw	r18, r12
    528e:	28 27       	eor	r18, r24
    5290:	02 2e       	mov	r0, r18
    5292:	22 95       	swap	r18
    5294:	20 7f       	andi	r18, 0xF0	; 240
    5296:	20 25       	eor	r18, r0
    5298:	03 2e       	mov	r0, r19
    529a:	32 2f       	mov	r19, r18
    529c:	22 95       	swap	r18
    529e:	2f 70       	andi	r18, 0x0F	; 15
    52a0:	02 26       	eor	r0, r18
    52a2:	26 95       	lsr	r18
    52a4:	32 27       	eor	r19, r18
    52a6:	23 27       	eor	r18, r19
    52a8:	22 0f       	add	r18, r18
    52aa:	22 0f       	add	r18, r18
    52ac:	22 0f       	add	r18, r18
    52ae:	20 25       	eor	r18, r0
    52b0:	69 01       	movw	r12, r18
#define RAMSTART (0x100)
#endif
static uint16_t sramCRC()
  {
  uint16_t result = ~0U;
  for(uint8_t *p = (uint8_t *)RAMSTART; p <= (uint8_t *)RAMEND; ++p)
    52b2:	39 e0       	ldi	r19, 0x09	; 9
    52b4:	e0 30       	cpi	r30, 0x00	; 0
    52b6:	f3 07       	cpc	r31, r19
    52b8:	41 f7       	brne	.-48     	; 0x528a <setup+0x17a>
    52ba:	20 e0       	ldi	r18, 0x00	; 0
    52bc:	30 e0       	ldi	r19, 0x00	; 0
    52be:	ee 24       	eor	r14, r14
    52c0:	ea 94       	dec	r14
    52c2:	fe 2c       	mov	r15, r14
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    52c4:	f9 99       	sbic	0x1f, 1	; 31
    52c6:	fe cf       	rjmp	.-4      	; 0x52c4 <setup+0x1b4>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    52c8:	32 bd       	out	0x22, r19	; 34
    52ca:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    52cc:	f8 9a       	sbi	0x1f, 0	; 31
    52ce:	80 b5       	in	r24, 0x20	; 32
    52d0:	a7 01       	movw	r20, r14
    52d2:	48 27       	eor	r20, r24
    52d4:	04 2e       	mov	r0, r20
    52d6:	42 95       	swap	r20
    52d8:	40 7f       	andi	r20, 0xF0	; 240
    52da:	40 25       	eor	r20, r0
    52dc:	05 2e       	mov	r0, r21
    52de:	54 2f       	mov	r21, r20
    52e0:	42 95       	swap	r20
    52e2:	4f 70       	andi	r20, 0x0F	; 15
    52e4:	04 26       	eor	r0, r20
    52e6:	46 95       	lsr	r20
    52e8:	54 27       	eor	r21, r20
    52ea:	45 27       	eor	r20, r21
    52ec:	44 0f       	add	r20, r20
    52ee:	44 0f       	add	r20, r20
    52f0:	44 0f       	add	r20, r20
    52f2:	40 25       	eor	r20, r0
    52f4:	7a 01       	movw	r14, r20
  }
// Compute a CRC of all of EEPROM as a hash that may contain some entropy, particularly across restarts.
static uint16_t eeCRC()
  {
  uint16_t result = ~0U;
  for(uint8_t *p = (uint8_t *)0; p <= (uint8_t *)E2END; ++p)
    52f6:	2f 5f       	subi	r18, 0xFF	; 255
    52f8:	3f 4f       	sbci	r19, 0xFF	; 255
    52fa:	54 e0       	ldi	r21, 0x04	; 4
    52fc:	20 30       	cpi	r18, 0x00	; 0
    52fe:	35 07       	cpc	r19, r21
    5300:	09 f7       	brne	.-62     	; 0x52c4 <setup+0x1b4>
#if defined(HUMIDITY_SENSOR_SUPPORT)
                       ((((uint16_t)rh) << 8) - rh) ^
#endif
#endif
                       (getMinutesSinceMidnightLT() << 5) ^
                       (((uint16_t)getSubCycleTime()) << 6);
    5302:	0e 94 b5 1c 	call	0x396a	; 0x396a <getMinutesSinceMidnightLT()>
    5306:	20 91 b2 00 	lds	r18, 0x00B2
    530a:	c2 2f       	mov	r28, r18
    530c:	d0 e0       	ldi	r29, 0x00	; 0
    530e:	76 e0       	ldi	r23, 0x06	; 6
    5310:	cc 0f       	add	r28, r28
    5312:	dd 1f       	adc	r29, r29
    5314:	7a 95       	dec	r23
    5316:	e1 f7       	brne	.-8      	; 0x5310 <setup+0x200>
    5318:	c5 63       	ori	r28, 0x35	; 53
    531a:	c6 25       	eor	r28, r6
    531c:	d7 25       	eor	r29, r7
    531e:	00 0f       	add	r16, r16
    5320:	11 1f       	adc	r17, r17
    5322:	c0 27       	eor	r28, r16
    5324:	d1 27       	eor	r29, r17
    5326:	aa 0c       	add	r10, r10
    5328:	bb 1c       	adc	r11, r11
    532a:	aa 0c       	add	r10, r10
    532c:	bb 1c       	adc	r11, r11
    532e:	ca 25       	eor	r28, r10
    5330:	db 25       	eor	r29, r11
    5332:	28 2d       	mov	r18, r8
    5334:	30 e0       	ldi	r19, 0x00	; 0
    5336:	44 e0       	ldi	r20, 0x04	; 4
    5338:	22 0f       	add	r18, r18
    533a:	33 1f       	adc	r19, r19
    533c:	4a 95       	dec	r20
    533e:	e1 f7       	brne	.-8      	; 0x5338 <setup+0x228>
    5340:	c2 27       	eor	r28, r18
    5342:	d3 27       	eor	r29, r19
    5344:	25 e0       	ldi	r18, 0x05	; 5
    5346:	88 0f       	add	r24, r24
    5348:	99 1f       	adc	r25, r25
    534a:	2a 95       	dec	r18
    534c:	e1 f7       	brne	.-8      	; 0x5346 <setup+0x236>
    534e:	c8 27       	eor	r28, r24
    5350:	d9 27       	eor	r29, r25
  //const long seed1 = ((((long) clockJitterRTC()) << 13) ^ (((long)clockJitterWDT()) << 21) ^ (((long)(srseed^eeseed)) << 16)) + s16;
  // Seed simple/fast/small built-in PRNG.  (Smaller and faster than srandom()/random().)
  const uint8_t nar1 = noisyADCRead();
    5352:	81 e0       	ldi	r24, 0x01	; 1
    5354:	0e 94 b2 19 	call	0x3364	; 0x3364 <noisyADCRead(bool)>
    5358:	18 2f       	mov	r17, r24
  seedRNG8(nar1 ^ (uint8_t) s16, oldResetCount - (uint8_t)((s16+eeseed) >> 8), clockJitterWDT() ^ (uint8_t)srseed);
    535a:	ac 2e       	mov	r10, r28
    535c:	a8 26       	eor	r10, r24
    535e:	ce 01       	movw	r24, r28
    5360:	8e 0d       	add	r24, r14
    5362:	9f 1d       	adc	r25, r15
    5364:	b9 2c       	mov	r11, r9
    5366:	b9 1a       	sub	r11, r25
    5368:	0e 94 78 18 	call	0x30f0	; 0x30f0 <clockJitterWDT()>
    536c:	dc 2c       	mov	r13, r12
    536e:	48 2f       	mov	r20, r24
    5370:	4c 25       	eor	r20, r12
    5372:	8a 2d       	mov	r24, r10
    5374:	6b 2d       	mov	r22, r11
    5376:	0e 94 22 1b 	call	0x3644	; 0x3644 <seedRNG8(unsigned char, unsigned char, unsigned char)>
  DEBUG_SERIAL_PRINTFMT(nar1, BIN);
  DEBUG_SERIAL_PRINTLN();
#endif
  // TODO: seed other/better PRNGs.
  // Feed in mainly persistent/nonvolatile state explicitly. 
  addEntropyToPool(oldResetCount ^ eeseed, 0);
    537a:	ce 2c       	mov	r12, r14
    537c:	8e 2d       	mov	r24, r14
    537e:	89 25       	eor	r24, r9
    5380:	60 e0       	ldi	r22, 0x00	; 0
    5382:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <addEntropyToPool(unsigned char, unsigned char)>
  addEntropyToPool((uint8_t)(eeseed >> 8) + nar1, 0);
    5386:	ef 2c       	mov	r14, r15
    5388:	ff 24       	eor	r15, r15
    538a:	81 2f       	mov	r24, r17
    538c:	8e 0d       	add	r24, r14
    538e:	60 e0       	ldi	r22, 0x00	; 0
    5390:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <addEntropyToPool(unsigned char, unsigned char)>
  addEntropyToPool((uint8_t)s16 ^ (uint8_t)(s16 >> 8), 0);
    5394:	8c 2f       	mov	r24, r28
    5396:	8d 27       	eor	r24, r29
    5398:	60 e0       	ldi	r22, 0x00	; 0
    539a:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <addEntropyToPool(unsigned char, unsigned char)>
    539e:	02 e0       	ldi	r16, 0x02	; 2
    53a0:	10 e0       	ldi	r17, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    53a2:	f9 99       	sbic	0x1f, 1	; 31
    53a4:	fe cf       	rjmp	.-4      	; 0x53a2 <setup+0x292>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    53a6:	12 bd       	out	0x22, r17	; 34
    53a8:	01 bd       	out	0x21, r16	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    53aa:	f8 9a       	sbi	0x1f, 0	; 31
    53ac:	80 b5       	in	r24, 0x20	; 32
  for(uint8_t i = 0; i < EE_LEN_SEED; ++i)
    { addEntropyToPool(eeprom_read_byte((uint8_t *)(EE_START_SEED + i)), 0); }
    53ae:	60 e0       	ldi	r22, 0x00	; 0
    53b0:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <addEntropyToPool(unsigned char, unsigned char)>
    53b4:	0f 5f       	subi	r16, 0xFF	; 255
    53b6:	1f 4f       	sbci	r17, 0xFF	; 255
  // TODO: seed other/better PRNGs.
  // Feed in mainly persistent/nonvolatile state explicitly. 
  addEntropyToPool(oldResetCount ^ eeseed, 0);
  addEntropyToPool((uint8_t)(eeseed >> 8) + nar1, 0);
  addEntropyToPool((uint8_t)s16 ^ (uint8_t)(s16 >> 8), 0);
  for(uint8_t i = 0; i < EE_LEN_SEED; ++i)
    53b8:	06 30       	cpi	r16, 0x06	; 6
    53ba:	11 05       	cpc	r17, r1
    53bc:	91 f7       	brne	.-28     	; 0x53a2 <setup+0x292>
    { addEntropyToPool(eeprom_read_byte((uint8_t *)(EE_START_SEED + i)), 0); }
  addEntropyToPool(noisyADCRead(), 1); // Conservative first push of noise into pool.
    53be:	81 e0       	ldi	r24, 0x01	; 1
    53c0:	0e 94 b2 19 	call	0x3364	; 0x3364 <noisyADCRead(bool)>
    53c4:	61 e0       	ldi	r22, 0x01	; 1
    53c6:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <addEntropyToPool(unsigned char, unsigned char)>
  // Carry a few bits of entropy over a reset by picking one of the four designated EEPROM bytes at random;
  // if zero, erase to 0xff, else AND in part of the seed including some of the previous EEPROM hash (and write).
  // This amounts to about a quarter of an erase/write cycle per reset/restart per byte, or 400k restarts endurance!
  // These 4 bytes should be picked up as part of the hash/CRC of EEPROM above, next time,
  // essentially forming a longish-cycle (poor) PRNG even with little new real entropy each time.
  seedRNG8(nar1 ^ (uint8_t) s16, oldResetCount - (uint8_t)((s16+eeseed) >> 8), clockJitterWDT() ^ (uint8_t)srseed);
    53ca:	0e 94 78 18 	call	0x30f0	; 0x30f0 <clockJitterWDT()>
    53ce:	d8 26       	eor	r13, r24
    53d0:	8a 2d       	mov	r24, r10
    53d2:	6b 2d       	mov	r22, r11
    53d4:	4d 2d       	mov	r20, r13
    53d6:	0e 94 22 1b 	call	0x3644	; 0x3644 <seedRNG8(unsigned char, unsigned char, unsigned char)>
  uint8_t *const erp = (uint8_t *)(EE_START_SEED + (3&((s16)^((eeseed>>8)+(__TIME__[7]))))); // Use some new and some eeseed bits to choose which byte to updated.
    53da:	87 01       	movw	r16, r14
    53dc:	0c 27       	eor	r16, r28
    53de:	1d 27       	eor	r17, r29
    53e0:	03 70       	andi	r16, 0x03	; 3
    53e2:	10 70       	andi	r17, 0x00	; 0
    53e4:	0e 5f       	subi	r16, 0xFE	; 254
    53e6:	1f 4f       	sbci	r17, 0xFF	; 255
    53e8:	f0 2e       	mov	r15, r16
    53ea:	e1 2e       	mov	r14, r17
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    53ec:	f9 99       	sbic	0x1f, 1	; 31
    53ee:	fe cf       	rjmp	.-4      	; 0x53ec <setup+0x2dc>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    53f0:	12 bd       	out	0x22, r17	; 34
    53f2:	01 bd       	out	0x21, r16	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    53f4:	f8 9a       	sbi	0x1f, 0	; 31
    53f6:	80 b5       	in	r24, 0x20	; 32
  const uint8_t erv = eeprom_read_byte(erp);
  if(0 == erv) { eeprom_smart_erase_byte(erp); }
    53f8:	88 23       	and	r24, r24
    53fa:	29 f4       	brne	.+10     	; 0x5406 <setup+0x2f6>
    53fc:	8f 2d       	mov	r24, r15
    53fe:	9e 2d       	mov	r25, r14
    5400:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <eeprom_smart_erase_byte(unsigned char*)>
    5404:	08 c0       	rjmp	.+16     	; 0x5416 <setup+0x306>
#if !defined(NO_clockJitterEntropyByte)
      clockJitterEntropyByte()
#else
      (clockJitterWDT() ^ nar1) // Less good fall-back when clockJitterEntropyByte() not available with more actual entropy.
#endif
      + ((uint8_t)eeseed)); // Nominally include disjoint set of eeseed bits in choice of which to clear.
    5406:	0e 94 93 18 	call	0x3126	; 0x3126 <clockJitterEntropyByte()>
    540a:	c8 0e       	add	r12, r24
    540c:	8f 2d       	mov	r24, r15
    540e:	9e 2d       	mov	r25, r14
    5410:	6c 2d       	mov	r22, r12
    5412:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <eeprom_smart_clear_bits(unsigned char*, unsigned char)>

    // Force a read/poll/recomputation of the target position and call for heat.
    // Sets/clears changed flag if computed valve position changed.
    // Call at a fixed rate (1/60s).
    // Potentially expensive/slow.
    virtual uint8_t read() { computeCallForHeat(); return(value); }
    5416:	81 ef       	ldi	r24, 0xF1	; 241
    5418:	91 e0       	ldi	r25, 0x01	; 1
    541a:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <ModelledRadValve::computeCallForHeat()>
    541e:	80 91 f3 01 	lds	r24, 0x01F3
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("Creating initial FHT8V frame...");
#endif
  // Unconditionally ensure that a valid FHT8V TRV command frame has been computed and stored
  // in case this unit is actually controlling a local valve.
  FHT8VCreateValveSetCmdFrame();
    5422:	0e 94 0a 10 	call	0x2014	; 0x2014 <FHT8VCreateValveSetCmdFrame()>


  // Ensure that the unique node ID is set up (mainly on first use).
  // Have one attempt (don't want to stress an already failing EEPROM) to force-reset if not good, then panic.
  // Needs to have had entropy gathered, etc.
  if(!ensureIDCreated())
    5426:	80 e0       	ldi	r24, 0x00	; 0
    5428:	0e 94 fd 14 	call	0x29fa	; 0x29fa <ensureIDCreated(bool)>
    542c:	88 23       	and	r24, r24
    542e:	49 f4       	brne	.+18     	; 0x5442 <setup+0x332>
    {
    if(!ensureIDCreated(true)) // Force reset.
    5430:	81 e0       	ldi	r24, 0x01	; 1
    5432:	0e 94 fd 14 	call	0x29fa	; 0x29fa <ensureIDCreated(bool)>
    5436:	88 23       	and	r24, r24
    5438:	21 f4       	brne	.+8      	; 0x5442 <setup+0x332>
      { panic(F("!Bad ID: can't reset")); }
    543a:	86 e7       	ldi	r24, 0x76	; 118
    543c:	93 e0       	ldi	r25, 0x03	; 3
    543e:	0e 94 37 28 	call	0x506e	; 0x506e <panic(__FlashStringHelper const*)>
    }


  // Initialised: turn heatcall UI LED off.
//  pinMode(LED_HEATCALL, OUTPUT);
  LED_HEATCALL_OFF();
    5442:	5c 9a       	sbi	0x0b, 4	; 11
  
#if defined(SUPPORT_CLI) && !defined(ALT_MAIN_LOOP) && !defined(UNIT_TESTS)
  // Help user get to CLI.
  serialPrintlnAndFlush(F("? at CLI prompt for help"));
    5444:	8d e5       	ldi	r24, 0x5D	; 93
    5446:	93 e0       	ldi	r25, 0x03	; 3
    5448:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif

#if !defined(ALT_MAIN_LOOP) && !defined(UNIT_TESTS)
  // Report initial status.
  serialStatusReport();
    544c:	0e 94 08 21 	call	0x4210	; 0x4210 <serialStatusReport()>
  // Do OpenTRV-specific (late) setup.
  setupOpenTRV();
    5450:	0e 94 8f 09 	call	0x131e	; 0x131e <setupOpenTRV()>
#endif
  }
    5454:	df 91       	pop	r29
    5456:	cf 91       	pop	r28
    5458:	1f 91       	pop	r17
    545a:	0f 91       	pop	r16
    545c:	ff 90       	pop	r15
    545e:	ef 90       	pop	r14
    5460:	df 90       	pop	r13
    5462:	cf 90       	pop	r12
    5464:	bf 90       	pop	r11
    5466:	af 90       	pop	r10
    5468:	9f 90       	pop	r9
    546a:	8f 90       	pop	r8
    546c:	7f 90       	pop	r7
    546e:	6f 90       	pop	r6
    5470:	08 95       	ret

00005472 <AmbientLight::preferredPollInterval_s() const>:
    // Potentially expensive/slow.
    // Not thread-safe nor usable within ISRs (Interrupt Service Routines).
    virtual uint8_t read();

    // Preferred poll interval (in seconds); should bve called at constant rate, usually 1/60s.
    virtual uint8_t preferredPollInterval_s() const { return(60); }
    5472:	8c e3       	ldi	r24, 0x3C	; 60
    5474:	08 95       	ret

00005476 <AmbientLight::tag() const>:

    // Returns a suggested (JSON) tag/field/key name including units of get(); NULL means no recommended tag.
    // The lifetime of the pointed-to text must be at least that of the Sensor instance.
    virtual const char *tag() const { return("L"); }
    5476:	8d e2       	ldi	r24, 0x2D	; 45
    5478:	91 e0       	ldi	r25, 0x01	; 1
    547a:	08 95       	ret

0000547c <RoomTemperatureC16::preferredPollInterval_s() const>:
    // Not thread-safe nor usable within ISRs (Interrupt Service Routines).
    virtual int read();

    // Preferred poll interval (in seconds).
    // This should be called at a regular rate, usually 1/60, so make stats such as velocity measurement easier.
    virtual uint8_t preferredPollInterval_s() const { return(60); }
    547c:	8c e3       	ldi	r24, 0x3C	; 60
    547e:	08 95       	ret

00005480 <RoomTemperatureC16::get() const>:

    // Return last value fetched by read(); undefined before first read().
    // Fast.
    // Not thread-safe nor usable within ISRs (Interrupt Service Routines).
    virtual int get() const { return(value); }
    5480:	fc 01       	movw	r30, r24
    5482:	82 81       	ldd	r24, Z+2	; 0x02
    5484:	93 81       	ldd	r25, Z+3	; 0x03
    5486:	08 95       	ret

00005488 <RoomTemperatureC16::tag() const>:

    // Returns a suggested (JSON) tag/field/key name including units of get(); NULL means no recommended tag.
    // The lifetime of the pointed-to text must be at least that of the Sensor instance.
    virtual const char *tag() const { return("T|C16"); }
    5488:	8f e2       	ldi	r24, 0x2F	; 47
    548a:	91 e0       	ldi	r25, 0x01	; 1
    548c:	08 95       	ret

0000548e <MinimalOneWireBase::reset()>:

// Reset interface; returns false if no slave device present.
// Reset the 1-Wire bus slave devices and ready them for a command.
// Delay G (0); drive bus low, delay H (48); release bus, delay I (70); sample bus, 0 = device(s) present, 1 = no device present; delay J (410).
// Timing intervals quite long so slightly slower impl here in base class is OK.
bool MinimalOneWireBase::reset()
    548e:	dc 01       	movw	r26, r24
  {
  bool result = false;

  // Locks out all interrupts until the final recovery delay to keep timing as accurate as possible,
  // restoring them to their original state when done.
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    5490:	5f b7       	in	r21, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5492:	f8 94       	cli
// Attempt to sleep accurate-ish small number of microseconds even with our slow (1MHz) CPU clock.
// This does not attempt to adjust clock speeds or sleep.
// Interrupts should probably be disabled around the code that uses this to avoid extra unexpected delays.
#if (F_CPU == 1000000) && defined(__AVR_ATmega328P__)
static inline void _delay_us(const uint8_t us) { }
static __inline__ void _delay_NOP(void) { __asm__ volatile ( "nop" "\n\t" ); } // Assumed to take 1us with 1MHz CPU clock.
    5494:	00 00       	nop

    // Fast direct GPIO operations.
    // Will be fastest (eg often single instructions) if their arguments are compile-time constants.
#if defined(__AVR_ATmega328P__) // Probably all AVR.
    // Set selected bit low if an output, else turn off weak pull-up if an input.
    inline void bitWriteLow  (volatile uint8_t *const inputReg, const uint8_t bitmask) { *(inputReg+2) &= ~bitmask; }
    5496:	00 00       	nop
    5498:	15 96       	adiw	r26, 0x05	; 5
    549a:	ed 91       	ld	r30, X+
    549c:	fc 91       	ld	r31, X
    549e:	16 97       	sbiw	r26, 0x06	; 6
    54a0:	92 81       	ldd	r25, Z+2	; 0x02
    54a2:	17 96       	adiw	r26, 0x07	; 7
    54a4:	8c 91       	ld	r24, X
    54a6:	17 97       	sbiw	r26, 0x07	; 7
    54a8:	80 95       	com	r24
    54aa:	98 23       	and	r25, r24
    54ac:	92 83       	std	Z+2, r25	; 0x02
    // Set selected bit high if an output, else turn on weak pull-up if an input.
    inline void bitWriteHigh (volatile uint8_t *const inputReg, const uint8_t bitmask) { *(inputReg+2) |=  bitmask; }
    // Set selected bit to be an output.
    inline void bitModeOutput(volatile uint8_t *const inputReg, const uint8_t bitmask) { *(inputReg+1) |=  bitmask; }
    54ae:	15 96       	adiw	r26, 0x05	; 5
    54b0:	ed 91       	ld	r30, X+
    54b2:	fc 91       	ld	r31, X
    54b4:	16 97       	sbiw	r26, 0x06	; 6
    54b6:	81 81       	ldd	r24, Z+1	; 0x01
    54b8:	17 96       	adiw	r26, 0x07	; 7
    54ba:	9c 91       	ld	r25, X
    54bc:	17 97       	sbiw	r26, 0x07	; 7
    54be:	89 2b       	or	r24, r25
    54c0:	81 83       	std	Z+1, r24	; 0x01
    54c2:	00 00       	nop
      "1: dec  %0" "\n\t"
      "   breq 2f" "\n\t"
      "2: brne 1b"
      : "=r" (n)
      : "0" (n)
    );
    54c4:	00 00       	nop
    54c6:	87 e7       	ldi	r24, 0x77	; 119
    54c8:	8a 95       	dec	r24
    54ca:	01 f0       	breq	.+0      	; 0x54cc <MinimalOneWireBase::reset()+0x3e>
    54cc:	e9 f7       	brne	.-6      	; 0x54c8 <MinimalOneWireBase::reset()+0x3a>
    // Set selected bit to be an input.
    inline void bitModeInput (volatile uint8_t *const inputReg, const uint8_t bitmask) { *(inputReg+1) &= ~bitmask; }
    54ce:	15 96       	adiw	r26, 0x05	; 5
    54d0:	ed 91       	ld	r30, X+
    54d2:	fc 91       	ld	r31, X
    54d4:	16 97       	sbiw	r26, 0x06	; 6
    54d6:	91 81       	ldd	r25, Z+1	; 0x01
    54d8:	17 96       	adiw	r26, 0x07	; 7
    54da:	8c 91       	ld	r24, X
    54dc:	17 97       	sbiw	r26, 0x07	; 7
    54de:	80 95       	com	r24
    54e0:	98 23       	and	r25, r24
    54e2:	91 83       	std	Z+1, r25	; 0x01
    54e4:	81 e1       	ldi	r24, 0x11	; 17
    54e6:	8a 95       	dec	r24
    54e8:	01 f0       	breq	.+0      	; 0x54ea <MinimalOneWireBase::reset()+0x5c>
    54ea:	e9 f7       	brne	.-6      	; 0x54e6 <MinimalOneWireBase::reset()+0x58>
    // Release the bus (ie let it float).
    bitModeInput(inputReg, regMask);
    // Delay I.
    delayI();
    // Sample for presence pulse from slave; low signal means slave present.
    result = !bitReadIn(inputReg, regMask);
    54ec:	15 96       	adiw	r26, 0x05	; 5
    54ee:	ed 91       	ld	r30, X+
    54f0:	fc 91       	ld	r31, X
    54f2:	16 97       	sbiw	r26, 0x06	; 6
    // Read selected bit.
    inline bool bitReadIn    (volatile uint8_t *const inputReg, const uint8_t bitmask) { return(0 != ((*inputReg) & bitmask)); }
    54f4:	20 81       	ld	r18, Z
    54f6:	40 e0       	ldi	r20, 0x00	; 0
    54f8:	30 e0       	ldi	r19, 0x00	; 0
    54fa:	17 96       	adiw	r26, 0x07	; 7
    54fc:	8c 91       	ld	r24, X
    54fe:	90 e0       	ldi	r25, 0x00	; 0
    5500:	28 23       	and	r18, r24
    5502:	39 23       	and	r19, r25
    5504:	23 2b       	or	r18, r19
    5506:	09 f4       	brne	.+2      	; 0x550a <MinimalOneWireBase::reset()+0x7c>
    5508:	41 e0       	ldi	r20, 0x01	; 1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    550a:	5f bf       	out	0x3f, r21	; 63
    550c:	86 e6       	ldi	r24, 0x66	; 102
    550e:	8a 95       	dec	r24
    5510:	01 f0       	breq	.+0      	; 0x5512 <MinimalOneWireBase::reset()+0x84>
    5512:	e9 f7       	brne	.-6      	; 0x550e <MinimalOneWireBase::reset()+0x80>
  if(result) { DEBUG_SERIAL_PRINT_FLASHSTRING(" found slave(s)"); }
  DEBUG_SERIAL_PRINTLN();
#endif

  return(result);
  }
    5514:	84 2f       	mov	r24, r20
    5516:	08 95       	ret

00005518 <MinimalOneWireBase::read()>:

// Read a byte.
// Read least-significant-bit first.
uint8_t MinimalOneWireBase::read()
    5518:	0f 93       	push	r16
    551a:	1f 93       	push	r17
    551c:	cf 93       	push	r28
    551e:	df 93       	push	r29
    5520:	ec 01       	movw	r28, r24
    5522:	80 e0       	ldi	r24, 0x00	; 0
    5524:	10 e0       	ldi	r17, 0x00	; 0
  {
  uint8_t result = 0;
  for(uint8_t i = 0; i < 8; ++i)
    {
    result >>= 1;
    5526:	08 2f       	mov	r16, r24
    5528:	06 95       	lsr	r16
    if(read_bit()) { result |= 0x80; } else { result &= 0x7f; }
    552a:	e8 81       	ld	r30, Y
    552c:	f9 81       	ldd	r31, Y+1	; 0x01
    552e:	01 90       	ld	r0, Z+
    5530:	f0 81       	ld	r31, Z
    5532:	e0 2d       	mov	r30, r0
    5534:	ce 01       	movw	r24, r28
    5536:	09 95       	icall
    5538:	88 23       	and	r24, r24
    553a:	19 f0       	breq	.+6      	; 0x5542 <MinimalOneWireBase::read()+0x2a>
    553c:	80 2f       	mov	r24, r16
    553e:	80 68       	ori	r24, 0x80	; 128
    5540:	02 c0       	rjmp	.+4      	; 0x5546 <MinimalOneWireBase::read()+0x2e>
    5542:	80 2f       	mov	r24, r16
    5544:	8f 77       	andi	r24, 0x7F	; 127
// Read a byte.
// Read least-significant-bit first.
uint8_t MinimalOneWireBase::read()
  {
  uint8_t result = 0;
  for(uint8_t i = 0; i < 8; ++i)
    5546:	1f 5f       	subi	r17, 0xFF	; 255
    5548:	18 30       	cpi	r17, 0x08	; 8
    554a:	69 f7       	brne	.-38     	; 0x5526 <MinimalOneWireBase::read()+0xe>
    {
    result >>= 1;
    if(read_bit()) { result |= 0x80; } else { result &= 0x7f; }
    }
  return(result);
  }
    554c:	df 91       	pop	r29
    554e:	cf 91       	pop	r28
    5550:	1f 91       	pop	r17
    5552:	0f 91       	pop	r16
    5554:	08 95       	ret

00005556 <MinimalOneWireBase::write(unsigned char)>:

// Write a byte leaving the bus unpowered at the end.
// Write least-significant-bit first.
void MinimalOneWireBase::write(uint8_t v)
    5556:	ff 92       	push	r15
    5558:	0f 93       	push	r16
    555a:	1f 93       	push	r17
    555c:	cf 93       	push	r28
    555e:	df 93       	push	r29
    5560:	ec 01       	movw	r28, r24
    5562:	ff 24       	eor	r15, r15
  {
  for(uint8_t i = 0; i < 8; ++i)
    {
    write_bit(0 != (v & 1));
    5564:	06 2f       	mov	r16, r22
    5566:	10 e0       	ldi	r17, 0x00	; 0
    5568:	e8 81       	ld	r30, Y
    556a:	f9 81       	ldd	r31, Y+1	; 0x01
    556c:	b8 01       	movw	r22, r16
    556e:	61 70       	andi	r22, 0x01	; 1
    5570:	70 70       	andi	r23, 0x00	; 0
    5572:	02 80       	ldd	r0, Z+2	; 0x02
    5574:	f3 81       	ldd	r31, Z+3	; 0x03
    5576:	e0 2d       	mov	r30, r0
    5578:	ce 01       	movw	r24, r28
    557a:	09 95       	icall
    v >>= 1;
    557c:	15 95       	asr	r17
    557e:	07 95       	ror	r16
    5580:	60 2f       	mov	r22, r16

// Write a byte leaving the bus unpowered at the end.
// Write least-significant-bit first.
void MinimalOneWireBase::write(uint8_t v)
  {
  for(uint8_t i = 0; i < 8; ++i)
    5582:	f3 94       	inc	r15
    5584:	88 e0       	ldi	r24, 0x08	; 8
    5586:	f8 16       	cp	r15, r24
    5588:	69 f7       	brne	.-38     	; 0x5564 <MinimalOneWireBase::write(unsigned char)+0xe>
    {
    write_bit(0 != (v & 1));
    v >>= 1;
    }
  }
    558a:	df 91       	pop	r29
    558c:	cf 91       	pop	r28
    558e:	1f 91       	pop	r17
    5590:	0f 91       	pop	r16
    5592:	ff 90       	pop	r15
    5594:	08 95       	ret

00005596 <MinimalOneWireBase::search(unsigned char*)>:
// Search for the next device.
// Returns true if a new address has been found;
// false means no devices or all devices already found or bus shorted.
// This does not check the CRC.
// Follows the broad algorithm shown in http://www.maximintegrated.com/en/app-notes/index.mvp/id/187
bool MinimalOneWireBase::search(uint8_t newAddr[])
    5596:	af 92       	push	r10
    5598:	bf 92       	push	r11
    559a:	cf 92       	push	r12
    559c:	df 92       	push	r13
    559e:	ef 92       	push	r14
    55a0:	ff 92       	push	r15
    55a2:	0f 93       	push	r16
    55a4:	1f 93       	push	r17
    55a6:	df 93       	push	r29
    55a8:	cf 93       	push	r28
    55aa:	0f 92       	push	r0
    55ac:	cd b7       	in	r28, 0x3d	; 61
    55ae:	de b7       	in	r29, 0x3e	; 62
    55b0:	5c 01       	movw	r10, r24
    55b2:	6b 01       	movw	r12, r22
  {
  bool result = false;

  // If not at last device, reset and start again.
  if(!lastDeviceFlag)
    55b4:	dc 01       	movw	r26, r24
    55b6:	12 96       	adiw	r26, 0x02	; 2
    55b8:	8c 91       	ld	r24, X
    55ba:	88 23       	and	r24, r24
    55bc:	09 f0       	breq	.+2      	; 0x55c0 <MinimalOneWireBase::search(unsigned char*)+0x2a>
    55be:	68 c0       	rjmp	.+208    	; 0x5690 <MinimalOneWireBase::search(unsigned char*)+0xfa>
    uint8_t addrByteMask = 1;
    uint8_t idBitNumber = 1;
    uint8_t lastZero = 0;

    // 1-Wire reset
    if(!reset())
    55c0:	c5 01       	movw	r24, r10
    55c2:	0e 94 47 2a 	call	0x548e	; 0x548e <MinimalOneWireBase::reset()>
    55c6:	88 23       	and	r24, r24
    55c8:	31 f4       	brne	.+12     	; 0x55d6 <MinimalOneWireBase::search(unsigned char*)+0x40>
      {
      // Reset search state other than addr.
      lastDeviceFlag = false;
    55ca:	f5 01       	movw	r30, r10
    55cc:	12 82       	std	Z+2, r1	; 0x02
      lastDiscrepancy = 0;
    55ce:	14 82       	std	Z+4, r1	; 0x04
    55d0:	13 82       	std	Z+3, r1	; 0x03
    55d2:	90 e0       	ldi	r25, 0x00	; 0
    55d4:	76 c0       	rjmp	.+236    	; 0x56c2 <MinimalOneWireBase::search(unsigned char*)+0x12c>
      return(false); // No slave devices on bus...
      }

    // Send search command.
    write(0xf0);
    55d6:	c5 01       	movw	r24, r10
    55d8:	60 ef       	ldi	r22, 0xF0	; 240
    55da:	0e 94 ab 2a 	call	0x5556	; 0x5556 <MinimalOneWireBase::write(unsigned char)>
    55de:	10 e0       	ldi	r17, 0x00	; 0
    55e0:	01 e0       	ldi	r16, 0x01	; 1
    55e2:	ff 24       	eor	r15, r15
    55e4:	f3 94       	inc	r15
    55e6:	ee 24       	eor	r14, r14

    // Start the search loop.
    do
      {
      // Read bit and the complement.
      const bool idBit = read_bit();
    55e8:	d5 01       	movw	r26, r10
    55ea:	ed 91       	ld	r30, X+
    55ec:	fc 91       	ld	r31, X
    55ee:	01 90       	ld	r0, Z+
    55f0:	f0 81       	ld	r31, Z
    55f2:	e0 2d       	mov	r30, r0
    55f4:	c5 01       	movw	r24, r10
    55f6:	09 95       	icall
    55f8:	89 83       	std	Y+1, r24	; 0x01
      const bool cmplIDBit = read_bit();
    55fa:	d5 01       	movw	r26, r10
    55fc:	ed 91       	ld	r30, X+
    55fe:	fc 91       	ld	r31, X
    5600:	01 90       	ld	r0, Z+
    5602:	f0 81       	ld	r31, Z
    5604:	e0 2d       	mov	r30, r0
    5606:	c5 01       	movw	r24, r10
    5608:	09 95       	icall
      DEBUG_SERIAL_PRINT(cmplIDBit);
      DEBUG_SERIAL_PRINTLN();
#endif

      // Stop if no slave devices on the bus.
      if(idBit && cmplIDBit) { break; }
    560a:	b9 81       	ldd	r27, Y+1	; 0x01
    560c:	bb 23       	and	r27, r27
    560e:	19 f0       	breq	.+6      	; 0x5616 <MinimalOneWireBase::search(unsigned char*)+0x80>
    5610:	88 23       	and	r24, r24
    5612:	e1 f0       	breq	.+56     	; 0x564c <MinimalOneWireBase::search(unsigned char*)+0xb6>
    5614:	32 c0       	rjmp	.+100    	; 0x567a <MinimalOneWireBase::search(unsigned char*)+0xe4>

      bool searchDirection;

      // If all active (non-waiting) slaves have the same next address bit
      // then that bit becomes the search direction.
      if(idBit != cmplIDBit) { searchDirection = idBit; }
    5616:	88 23       	and	r24, r24
    5618:	09 f0       	breq	.+2      	; 0x561c <MinimalOneWireBase::search(unsigned char*)+0x86>
    561a:	67 c0       	rjmp	.+206    	; 0x56ea <MinimalOneWireBase::search(unsigned char*)+0x154>
      else
        {
        if(idBitNumber < lastDiscrepancy)
    561c:	2f 2d       	mov	r18, r15
    561e:	30 e0       	ldi	r19, 0x00	; 0
    5620:	f5 01       	movw	r30, r10
    5622:	83 81       	ldd	r24, Z+3	; 0x03
    5624:	94 81       	ldd	r25, Z+4	; 0x04
    5626:	28 17       	cp	r18, r24
    5628:	39 07       	cpc	r19, r25
    562a:	64 f4       	brge	.+24     	; 0x5644 <MinimalOneWireBase::search(unsigned char*)+0xae>
          { searchDirection = (0 != (addr[addrByteNumber] & addrByteMask)); }
    562c:	e1 0f       	add	r30, r17
    562e:	f1 1d       	adc	r31, r1
    5630:	80 85       	ldd	r24, Z+8	; 0x08
    5632:	90 e0       	ldi	r25, 0x00	; 0
    5634:	20 2f       	mov	r18, r16
    5636:	30 e0       	ldi	r19, 0x00	; 0
    5638:	82 23       	and	r24, r18
    563a:	93 23       	and	r25, r19
    563c:	89 2b       	or	r24, r25
    563e:	09 f4       	brne	.+2      	; 0x5642 <MinimalOneWireBase::search(unsigned char*)+0xac>
    5640:	53 c0       	rjmp	.+166    	; 0x56e8 <MinimalOneWireBase::search(unsigned char*)+0x152>
    5642:	04 c0       	rjmp	.+8      	; 0x564c <MinimalOneWireBase::search(unsigned char*)+0xb6>
        else
          { searchDirection = (idBitNumber == lastDiscrepancy); }
    5644:	28 17       	cp	r18, r24
    5646:	39 07       	cpc	r19, r25
    5648:	09 f0       	breq	.+2      	; 0x564c <MinimalOneWireBase::search(unsigned char*)+0xb6>
    564a:	4e c0       	rjmp	.+156    	; 0x56e8 <MinimalOneWireBase::search(unsigned char*)+0x152>
    564c:	61 e0       	ldi	r22, 0x01	; 1
        // If direction is false/0 then remember its position in lastZero.
        if(false == searchDirection) { lastZero = idBitNumber; }
        }

      // Set/clear addr bit as appropriate.
      if(searchDirection) { addr[addrByteNumber] |= addrByteMask; }
    564e:	f5 01       	movw	r30, r10
    5650:	e1 0f       	add	r30, r17
    5652:	f1 1d       	adc	r31, r1
    5654:	80 85       	ldd	r24, Z+8	; 0x08
    5656:	80 2b       	or	r24, r16
    5658:	80 87       	std	Z+8, r24	; 0x08
      else { addr[addrByteNumber] &= ~addrByteMask; }

      // Adjust the mask, etc.
      ++idBitNumber;
    565a:	f3 94       	inc	r15
      if(0 == (addrByteMask <<= 1))
    565c:	00 0f       	add	r16, r16
    565e:	11 f4       	brne	.+4      	; 0x5664 <MinimalOneWireBase::search(unsigned char*)+0xce>
        DEBUG_SERIAL_PRINT_FLASHSTRING("Addr byte: ");
        DEBUG_SERIAL_PRINTFMT(addr[addrByteNumber], HEX);
        DEBUG_SERIAL_PRINTLN();
#endif
        addrByteMask = 1;
        ++addrByteNumber;
    5660:	1f 5f       	subi	r17, 0xFF	; 255
    5662:	01 e0       	ldi	r16, 0x01	; 1
#if 0 && defined(DEBUG)
      DEBUG_SERIAL_PRINT_FLASHSTRING("Search write: ");
      DEBUG_SERIAL_PRINT(searchDirection);
      DEBUG_SERIAL_PRINTLN();
#endif
      write_bit(searchDirection);
    5664:	d5 01       	movw	r26, r10
    5666:	ed 91       	ld	r30, X+
    5668:	fc 91       	ld	r31, X
    566a:	02 80       	ldd	r0, Z+2	; 0x02
    566c:	f3 81       	ldd	r31, Z+3	; 0x03
    566e:	e0 2d       	mov	r30, r0
    5670:	c5 01       	movw	r24, r10
    5672:	09 95       	icall

    // Send search command.
    write(0xf0);

    // Start the search loop.
    do
    5674:	18 30       	cpi	r17, 0x08	; 8
    5676:	08 f4       	brcc	.+2      	; 0x567a <MinimalOneWireBase::search(unsigned char*)+0xe4>
    5678:	b7 cf       	rjmp	.-146    	; 0x55e8 <MinimalOneWireBase::search(unsigned char*)+0x52>
      DEBUG_SERIAL_PRINTLN();
#endif
      write_bit(searchDirection);
      } while(addrByteNumber < 8); // Collect all address bytes!

    if(idBitNumber == 65)
    567a:	b1 e4       	ldi	r27, 0x41	; 65
    567c:	fb 16       	cp	r15, r27
    567e:	41 f4       	brne	.+16     	; 0x5690 <MinimalOneWireBase::search(unsigned char*)+0xfa>
      {
      // Success!
      lastDiscrepancy = lastZero;
    5680:	f5 01       	movw	r30, r10
    5682:	e3 82       	std	Z+3, r14	; 0x03
    5684:	14 82       	std	Z+4, r1	; 0x04
      if(0 == lastZero) { lastDeviceFlag = true; }
    5686:	ee 20       	and	r14, r14
    5688:	49 f5       	brne	.+82     	; 0x56dc <MinimalOneWireBase::search(unsigned char*)+0x146>
    568a:	81 e0       	ldi	r24, 0x01	; 1
    568c:	82 83       	std	Z+2, r24	; 0x02
    568e:	26 c0       	rjmp	.+76     	; 0x56dc <MinimalOneWireBase::search(unsigned char*)+0x146>
    }

  if(!result || (0 == addr[0]))
    {
    // No device found, so reset to be like first!
    lastDeviceFlag = false;
    5690:	d5 01       	movw	r26, r10
    5692:	12 96       	adiw	r26, 0x02	; 2
    5694:	1c 92       	st	X, r1
    5696:	12 97       	sbiw	r26, 0x02	; 2
    lastDiscrepancy = 0;
    5698:	14 96       	adiw	r26, 0x04	; 4
    569a:	1c 92       	st	X, r1
    569c:	1e 92       	st	-X, r1
    569e:	13 97       	sbiw	r26, 0x03	; 3
    56a0:	90 e0       	ldi	r25, 0x00	; 0
    56a2:	d5 01       	movw	r26, r10
    56a4:	20 e0       	ldi	r18, 0x00	; 0
    56a6:	30 e0       	ldi	r19, 0x00	; 0
    result = false;
    }

  for(uint8_t i = 0; i < 8; ++i) { newAddr[i] = addr[i]; }
    56a8:	f6 01       	movw	r30, r12
    56aa:	e2 0f       	add	r30, r18
    56ac:	f3 1f       	adc	r31, r19
    56ae:	18 96       	adiw	r26, 0x08	; 8
    56b0:	8c 91       	ld	r24, X
    56b2:	18 97       	sbiw	r26, 0x08	; 8
    56b4:	80 83       	st	Z, r24
    56b6:	2f 5f       	subi	r18, 0xFF	; 255
    56b8:	3f 4f       	sbci	r19, 0xFF	; 255
    56ba:	11 96       	adiw	r26, 0x01	; 1
    56bc:	28 30       	cpi	r18, 0x08	; 8
    56be:	31 05       	cpc	r19, r1
    56c0:	99 f7       	brne	.-26     	; 0x56a8 <MinimalOneWireBase::search(unsigned char*)+0x112>
  return(result);  
  }
    56c2:	89 2f       	mov	r24, r25
    56c4:	0f 90       	pop	r0
    56c6:	cf 91       	pop	r28
    56c8:	df 91       	pop	r29
    56ca:	1f 91       	pop	r17
    56cc:	0f 91       	pop	r16
    56ce:	ff 90       	pop	r15
    56d0:	ef 90       	pop	r14
    56d2:	df 90       	pop	r13
    56d4:	cf 90       	pop	r12
    56d6:	bf 90       	pop	r11
    56d8:	af 90       	pop	r10
    56da:	08 95       	ret
      if(0 == lastZero) { lastDeviceFlag = true; }
      result = true;
      } 
    }

  if(!result || (0 == addr[0]))
    56dc:	f5 01       	movw	r30, r10
    56de:	80 85       	ldd	r24, Z+8	; 0x08
    56e0:	88 23       	and	r24, r24
    56e2:	b1 f2       	breq	.-84     	; 0x5690 <MinimalOneWireBase::search(unsigned char*)+0xfa>
    56e4:	91 e0       	ldi	r25, 0x01	; 1
    56e6:	dd cf       	rjmp	.-70     	; 0x56a2 <MinimalOneWireBase::search(unsigned char*)+0x10c>
    56e8:	ef 2c       	mov	r14, r15
        if(false == searchDirection) { lastZero = idBitNumber; }
        }

      // Set/clear addr bit as appropriate.
      if(searchDirection) { addr[addrByteNumber] |= addrByteMask; }
      else { addr[addrByteNumber] &= ~addrByteMask; }
    56ea:	f5 01       	movw	r30, r10
    56ec:	e1 0f       	add	r30, r17
    56ee:	f1 1d       	adc	r31, r1
    56f0:	90 2f       	mov	r25, r16
    56f2:	90 95       	com	r25
    56f4:	80 85       	ldd	r24, Z+8	; 0x08
    56f6:	89 23       	and	r24, r25
    56f8:	80 87       	std	Z+8, r24	; 0x08
    56fa:	60 e0       	ldi	r22, 0x00	; 0
    56fc:	ae cf       	rjmp	.-164    	; 0x565a <MinimalOneWireBase::search(unsigned char*)+0xc4>

000056fe <MinimalOneWireBase::select(unsigned char const*)>:
  return(result);  
  }


// Select a particular device on the bus.
void MinimalOneWireBase::select(const uint8_t addr[8])
    56fe:	ef 92       	push	r14
    5700:	ff 92       	push	r15
    5702:	0f 93       	push	r16
    5704:	1f 93       	push	r17
    5706:	cf 93       	push	r28
    5708:	df 93       	push	r29
    570a:	8c 01       	movw	r16, r24
    570c:	7b 01       	movw	r14, r22
  {
  write(0x55);
    570e:	65 e5       	ldi	r22, 0x55	; 85
    5710:	0e 94 ab 2a 	call	0x5556	; 0x5556 <MinimalOneWireBase::write(unsigned char)>
    5714:	c0 e0       	ldi	r28, 0x00	; 0
    5716:	d0 e0       	ldi	r29, 0x00	; 0
  for(uint8_t i = 0; i < 8; ++i) { write(addr[i]); }
    5718:	f7 01       	movw	r30, r14
    571a:	ec 0f       	add	r30, r28
    571c:	fd 1f       	adc	r31, r29
    571e:	c8 01       	movw	r24, r16
    5720:	60 81       	ld	r22, Z
    5722:	0e 94 ab 2a 	call	0x5556	; 0x5556 <MinimalOneWireBase::write(unsigned char)>
    5726:	21 96       	adiw	r28, 0x01	; 1
    5728:	c8 30       	cpi	r28, 0x08	; 8
    572a:	d1 05       	cpc	r29, r1
    572c:	a9 f7       	brne	.-22     	; 0x5718 <MinimalOneWireBase::select(unsigned char const*)+0x1a>
  }
    572e:	df 91       	pop	r29
    5730:	cf 91       	pop	r28
    5732:	1f 91       	pop	r17
    5734:	0f 91       	pop	r16
    5736:	ff 90       	pop	r15
    5738:	ef 90       	pop	r14
    573a:	08 95       	ret

0000573c <MinimalOneWire<(unsigned char)2>::read_bit()>:

      volatile uint8_t *const inputReg = getInputReg();

      // Locks out all interrupts until the final delay to keep timing as accurate as possible,
      // restoring them to their original state when done.
      ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    573c:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    573e:	f8 94       	cli

    // Fast direct GPIO operations.
    // Will be fastest (eg often single instructions) if their arguments are compile-time constants.
#if defined(__AVR_ATmega328P__) // Probably all AVR.
    // Set selected bit low if an output, else turn off weak pull-up if an input.
    inline void bitWriteLow  (volatile uint8_t *const inputReg, const uint8_t bitmask) { *(inputReg+2) &= ~bitmask; }
    5740:	5a 98       	cbi	0x0b, 2	; 11
    // Set selected bit high if an output, else turn on weak pull-up if an input.
    inline void bitWriteHigh (volatile uint8_t *const inputReg, const uint8_t bitmask) { *(inputReg+2) |=  bitmask; }
    // Set selected bit to be an output.
    inline void bitModeOutput(volatile uint8_t *const inputReg, const uint8_t bitmask) { *(inputReg+1) |=  bitmask; }
    5742:	52 9a       	sbi	0x0a, 2	; 10
    5744:	81 e0       	ldi	r24, 0x01	; 1
    5746:	98 2f       	mov	r25, r24
    5748:	9a 95       	dec	r25
    574a:	01 f0       	breq	.+0      	; 0x574c <MinimalOneWire<(unsigned char)2>::read_bit()+0x10>
    574c:	e9 f7       	brne	.-6      	; 0x5748 <MinimalOneWire<(unsigned char)2>::read_bit()+0xc>
    // Set selected bit to be an input.
    inline void bitModeInput (volatile uint8_t *const inputReg, const uint8_t bitmask) { *(inputReg+1) &= ~bitmask; }
    574e:	52 98       	cbi	0x0a, 2	; 10
// Attempt to sleep accurate-ish small number of microseconds even with our slow (1MHz) CPU clock.
// This does not attempt to adjust clock speeds or sleep.
// Interrupts should probably be disabled around the code that uses this to avoid extra unexpected delays.
#if (F_CPU == 1000000) && defined(__AVR_ATmega328P__)
static inline void _delay_us(const uint8_t us) { }
static __inline__ void _delay_NOP(void) { __asm__ volatile ( "nop" "\n\t" ); } // Assumed to take 1us with 1MHz CPU clock.
    5750:	00 00       	nop
      "1: dec  %0" "\n\t"
      "   breq 2f" "\n\t"
      "2: brne 1b"
      : "=r" (n)
      : "0" (n)
    );
    5752:	00 00       	nop
    5754:	00 00       	nop
    5756:	8a 95       	dec	r24
    5758:	01 f0       	breq	.+0      	; 0x575a <MinimalOneWire<(unsigned char)2>::read_bit()+0x1e>
    575a:	e9 f7       	brne	.-6      	; 0x5756 <MinimalOneWire<(unsigned char)2>::read_bit()+0x1a>
    // Read selected bit.
    inline bool bitReadIn    (volatile uint8_t *const inputReg, const uint8_t bitmask) { return(0 != ((*inputReg) & bitmask)); }
    575c:	89 b1       	in	r24, 0x09	; 9
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    575e:	2f bf       	out	0x3f, r18	; 63
// Attempt to sleep accurate-ish small number of microseconds even with our slow (1MHz) CPU clock.
// This does not attempt to adjust clock speeds or sleep.
// Interrupts should probably be disabled around the code that uses this to avoid extra unexpected delays.
#if (F_CPU == 1000000) && defined(__AVR_ATmega328P__)
static inline void _delay_us(const uint8_t us) { }
static __inline__ void _delay_NOP(void) { __asm__ volatile ( "nop" "\n\t" ); } // Assumed to take 1us with 1MHz CPU clock.
    5760:	00 00       	nop
      "1: dec  %0" "\n\t"
      "   breq 2f" "\n\t"
      "2: brne 1b"
      : "=r" (n)
      : "0" (n)
    );
    5762:	9d e0       	ldi	r25, 0x0D	; 13
    5764:	9a 95       	dec	r25
    5766:	01 f0       	breq	.+0      	; 0x5768 <MinimalOneWire<(unsigned char)2>::read_bit()+0x2c>
    5768:	e9 f7       	brne	.-6      	; 0x5764 <MinimalOneWire<(unsigned char)2>::read_bit()+0x28>
    576a:	90 e0       	ldi	r25, 0x00	; 0
    576c:	96 95       	lsr	r25
    576e:	87 95       	ror	r24
    5770:	96 95       	lsr	r25
    5772:	87 95       	ror	r24
      // Delay F.
      // Timing is not critical here so interrupts are allowed in again...
      delayF();

      return(result);
      }
    5774:	81 70       	andi	r24, 0x01	; 1
    5776:	08 95       	ret

00005778 <Sensor<int>::isValid(int) const>:
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual T get() const = 0;

    // Returns true if this sensor reading value passed is potentially valid, eg in-range.
    // Default is to always return true, ie all values potentially valid.
    virtual bool isValid(T value) const { return(true); }
    5778:	81 e0       	ldi	r24, 0x01	; 1
    577a:	08 95       	ret

0000577c <Sensor<int>::handleInterruptSimple()>:
    // Must be fast and ISR (Interrupt Service Routine) safe.
    // Returns true if interrupt was successfully handled and cleared
    // else another interrupt handler in the chain may be called
    // to attempt to clear the interrupt.
    // By default does nothing (and returns false).
    virtual bool handleInterruptSimple() { return(false); }
    577c:	80 e0       	ldi	r24, 0x00	; 0
    577e:	08 95       	ret

00005780 <Sensor<int>::begin()>:

    // Begin access to this sensor if applicable and not already begun.
    // Returns true if it needed to be begun.
    // Allows logic to end() if required at the end of a block, etc.
    // Defaults to do nothing (and return false).
    virtual bool begin() { return(false); }
    5780:	80 e0       	ldi	r24, 0x00	; 0
    5782:	08 95       	ret

00005784 <Sensor<int>::isAvailable() const>:

    // Returns true if this sensor is currently available.
    // True by default unless implementation overrides.
    // For those sensors that need starting this will be false before begin().
    virtual bool isAvailable() const { return(true); }
    5784:	81 e0       	ldi	r24, 0x01	; 1
    5786:	08 95       	ret

00005788 <Sensor<int>::end()>:

    // End access to this sensor if applicable and not already ended.
    // Returns true if it needed to be ended.
    // Defaults to do nothing (and return false).
    virtual bool end() { return(false); }
    5788:	80 e0       	ldi	r24, 0x00	; 0
    578a:	08 95       	ret

0000578c <MinimalOneWire<(unsigned char)2>::write_bit(bool)>:
      {
      volatile uint8_t *const inputReg = getInputReg();

      // Locks out all interrupts until the final delay to keep timing as accurate as possible,
      // restoring them to their original state when done.
      ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    578c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    578e:	f8 94       	cli

    // Fast direct GPIO operations.
    // Will be fastest (eg often single instructions) if their arguments are compile-time constants.
#if defined(__AVR_ATmega328P__) // Probably all AVR.
    // Set selected bit low if an output, else turn off weak pull-up if an input.
    inline void bitWriteLow  (volatile uint8_t *const inputReg, const uint8_t bitmask) { *(inputReg+2) &= ~bitmask; }
    5790:	5a 98       	cbi	0x0b, 2	; 11
    // Set selected bit high if an output, else turn on weak pull-up if an input.
    inline void bitWriteHigh (volatile uint8_t *const inputReg, const uint8_t bitmask) { *(inputReg+2) |=  bitmask; }
    // Set selected bit to be an output.
    inline void bitModeOutput(volatile uint8_t *const inputReg, const uint8_t bitmask) { *(inputReg+1) |=  bitmask; }
    5792:	52 9a       	sbi	0x0a, 2	; 10
        {
        // Drive bus/DQ low.
        bitWriteLow(inputReg, regMask);
        bitModeOutput(inputReg, regMask);
        // Delay A (for 1) or C (for 0).
        if(high) { delayA(); } else { delayC(); }
    5794:	66 23       	and	r22, r22
    5796:	11 f0       	breq	.+4      	; 0x579c <MinimalOneWire<(unsigned char)2>::write_bit(bool)+0x10>
    5798:	81 e0       	ldi	r24, 0x01	; 1
    579a:	03 c0       	rjmp	.+6      	; 0x57a2 <MinimalOneWire<(unsigned char)2>::write_bit(bool)+0x16>
// Attempt to sleep accurate-ish small number of microseconds even with our slow (1MHz) CPU clock.
// This does not attempt to adjust clock speeds or sleep.
// Interrupts should probably be disabled around the code that uses this to avoid extra unexpected delays.
#if (F_CPU == 1000000) && defined(__AVR_ATmega328P__)
static inline void _delay_us(const uint8_t us) { }
static __inline__ void _delay_NOP(void) { __asm__ volatile ( "nop" "\n\t" ); } // Assumed to take 1us with 1MHz CPU clock.
    579c:	00 00       	nop
      "1: dec  %0" "\n\t"
      "   breq 2f" "\n\t"
      "2: brne 1b"
      : "=r" (n)
      : "0" (n)
    );
    579e:	00 00       	nop
    57a0:	8e e0       	ldi	r24, 0x0E	; 14
    57a2:	8a 95       	dec	r24
    57a4:	01 f0       	breq	.+0      	; 0x57a6 <MinimalOneWire<(unsigned char)2>::write_bit(bool)+0x1a>
    57a6:	e9 f7       	brne	.-6      	; 0x57a2 <MinimalOneWire<(unsigned char)2>::write_bit(bool)+0x16>
    // Set selected bit high if an output, else turn on weak pull-up if an input.
    inline void bitWriteHigh (volatile uint8_t *const inputReg, const uint8_t bitmask) { *(inputReg+2) |=  bitmask; }
    // Set selected bit to be an output.
    inline void bitModeOutput(volatile uint8_t *const inputReg, const uint8_t bitmask) { *(inputReg+1) |=  bitmask; }
    // Set selected bit to be an input.
    inline void bitModeInput (volatile uint8_t *const inputReg, const uint8_t bitmask) { *(inputReg+1) &= ~bitmask; }
    57a8:	52 98       	cbi	0x0a, 2	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    57aa:	9f bf       	out	0x3f, r25	; 63
        // Release the bus (ie let it float).
        bitModeInput(inputReg, regMask);
        }
      // Delay B (for 1) or D (for 0).
      // Timing is not critical here so interrupts are allowed in again...
      if(high) { delayB(); } else { delayD(); }
    57ac:	66 23       	and	r22, r22
    57ae:	21 f0       	breq	.+8      	; 0x57b8 <MinimalOneWire<(unsigned char)2>::write_bit(bool)+0x2c>
// Attempt to sleep accurate-ish small number of microseconds even with our slow (1MHz) CPU clock.
// This does not attempt to adjust clock speeds or sleep.
// Interrupts should probably be disabled around the code that uses this to avoid extra unexpected delays.
#if (F_CPU == 1000000) && defined(__AVR_ATmega328P__)
static inline void _delay_us(const uint8_t us) { }
static __inline__ void _delay_NOP(void) { __asm__ volatile ( "nop" "\n\t" ); } // Assumed to take 1us with 1MHz CPU clock.
    57b0:	00 00       	nop
      "1: dec  %0" "\n\t"
      "   breq 2f" "\n\t"
      "2: brne 1b"
      : "=r" (n)
      : "0" (n)
    );
    57b2:	00 00       	nop
    57b4:	8f e0       	ldi	r24, 0x0F	; 15
    57b6:	01 c0       	rjmp	.+2      	; 0x57ba <MinimalOneWire<(unsigned char)2>::write_bit(bool)+0x2e>
    57b8:	82 e0       	ldi	r24, 0x02	; 2
    57ba:	8a 95       	dec	r24
    57bc:	01 f0       	breq	.+0      	; 0x57be <MinimalOneWire<(unsigned char)2>::write_bit(bool)+0x32>
    57be:	e9 f7       	brne	.-6      	; 0x57ba <MinimalOneWire<(unsigned char)2>::write_bit(bool)+0x2e>
    57c0:	08 95       	ret

000057c2 <global constructors keyed to _ZN18MinimalOneWireBase5resetEv>:
    // Core non-ephemeral search parameters as per Maxim doc 187.
    bool lastDeviceFlag;
    int lastDiscrepancy;

  protected:
    MinimalOneWireBase(volatile uint8_t *const ir, const uint8_t rm) : inputReg(ir), regMask(rm) { }
    57c2:	89 e2       	ldi	r24, 0x29	; 41
    57c4:	90 e0       	ldi	r25, 0x00	; 0
    57c6:	90 93 4f 03 	sts	0x034F, r25
    57ca:	80 93 4e 03 	sts	0x034E, r24
    57ce:	84 e0       	ldi	r24, 0x04	; 4
    57d0:	80 93 50 03 	sts	0x0350, r24
    // Compute the bit mask for the OW pin in advance.
    // This may need further parameterisation for non-ATMega328P systems.
    static const uint8_t regMask = _fastDigitalMask(PIN_OW_DQ_DATA);

  public:
    MinimalOneWire() : MinimalOneWireBase(getInputReg(), regMask) { reset_search(); }
    57d4:	86 ec       	ldi	r24, 0xC6	; 198
    57d6:	91 e0       	ldi	r25, 0x01	; 1
    57d8:	90 93 4a 03 	sts	0x034A, r25
    57dc:	80 93 49 03 	sts	0x0349, r24
    }
  }

void MinimalOneWireBase::reset_search()
  {
  lastDeviceFlag = false;
    57e0:	10 92 4b 03 	sts	0x034B, r1
  lastDiscrepancy = 0;
    57e4:	10 92 4d 03 	sts	0x034D, r1
    57e8:	10 92 4c 03 	sts	0x034C, r1
    57ec:	e8 e5       	ldi	r30, 0x58	; 88
    57ee:	f3 e0       	ldi	r31, 0x03	; 3
    57f0:	02 c0       	rjmp	.+4      	; 0x57f6 <global constructors keyed to _ZN18MinimalOneWireBase5resetEv+0x34>
  for(int i = sizeof(addr); --i >= 0; ) { addr[i] = 0; }
    57f2:	10 82       	st	Z, r1
    57f4:	31 97       	sbiw	r30, 0x01	; 1
    57f6:	83 e0       	ldi	r24, 0x03	; 3
    57f8:	e0 35       	cpi	r30, 0x50	; 80
    57fa:	f8 07       	cpc	r31, r24
    57fc:	d1 f7       	brne	.-12     	; 0x57f2 <global constructors keyed to _ZN18MinimalOneWireBase5resetEv+0x30>
  {
  protected:
      volatile uint8_t value;

      // By default initialise the value to zero.
      SimpleTSUint8Sensor() : value(0) { }
    57fe:	10 92 5b 03 	sts	0x035B, r1
// http://www.vishay.com/docs/84154/appnotesensors.pdf

#ifndef OMIT_MODULE_LDROCCUPANCYDETECTION
// Sensor for ambient light level; 0 is dark, 255 is bright.
class AmbientLight : public SimpleTSUint8Sensor
  {
    5802:	80 eb       	ldi	r24, 0xB0	; 176
    5804:	91 e0       	ldi	r25, 0x01	; 1
    5806:	90 93 5a 03 	sts	0x035A, r25
    580a:	80 93 59 03 	sts	0x0359, r24
  private:
    // Room temperature in 16*C, eg 1 is 1/16 C, 32 is 2C, -64 is -4C.
    int value;

  public:
    RoomTemperatureC16() : value(0) { }
    580e:	8a e9       	ldi	r24, 0x9A	; 154
    5810:	91 e0       	ldi	r25, 0x01	; 1
    5812:	90 93 61 03 	sts	0x0361, r25
    5816:	80 93 60 03 	sts	0x0360, r24
    581a:	10 92 63 03 	sts	0x0363, r1
    581e:	10 92 62 03 	sts	0x0362, r1
  const int raw = TMP112_readTemperatureC16();
#endif

  value = raw;
  return(value);
  }
    5822:	08 95       	ret

00005824 <Sensor_DS18B10_init()>:
static uint8_t first_DS18B20_address[8];

// Initialise the device (if any) before first use.
// Returns true iff successful.
// Uses first DS18B20 found on bus.
static bool Sensor_DS18B10_init()
    5824:	1f 93       	push	r17
    5826:	cf 93       	push	r28
    5828:	df 93       	push	r29
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("DS18B20 init...");
    582a:	8f e6       	ldi	r24, 0x6F	; 111
    582c:	94 e0       	ldi	r25, 0x04	; 4
    582e:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <serialPrintlnAndFlush(__FlashStringHelper const*)>
    }
  }

void MinimalOneWireBase::reset_search()
  {
  lastDeviceFlag = false;
    5832:	10 92 4b 03 	sts	0x034B, r1
  lastDiscrepancy = 0;
    5836:	10 92 4d 03 	sts	0x034D, r1
    583a:	10 92 4c 03 	sts	0x034C, r1
    583e:	c8 e5       	ldi	r28, 0x58	; 88
    5840:	d3 e0       	ldi	r29, 0x03	; 3
    5842:	fe 01       	movw	r30, r28
    5844:	02 c0       	rjmp	.+4      	; 0x584a <Sensor_DS18B10_init()+0x26>
  for(int i = sizeof(addr); --i >= 0; ) { addr[i] = 0; }
    5846:	10 82       	st	Z, r1
    5848:	31 97       	sbiw	r30, 0x01	; 1
    584a:	83 e0       	ldi	r24, 0x03	; 3
    584c:	e0 35       	cpi	r30, 0x50	; 80
    584e:	f8 07       	cpc	r31, r24
    5850:	d1 f7       	brne	.-12     	; 0x5846 <Sensor_DS18B10_init()+0x22>
    5852:	10 e0       	ldi	r17, 0x00	; 0
  // Ensure no bad search state.
  MinOW.reset_search();

  for( ; ; )
    {
    if(!MinOW.search(first_DS18B20_address))
    5854:	89 e4       	ldi	r24, 0x49	; 73
    5856:	93 e0       	ldi	r25, 0x03	; 3
    5858:	65 e6       	ldi	r22, 0x65	; 101
    585a:	73 e0       	ldi	r23, 0x03	; 3
    585c:	0e 94 cb 2a 	call	0x5596	; 0x5596 <MinimalOneWireBase::search(unsigned char*)>
    5860:	88 23       	and	r24, r24
    5862:	99 f4       	brne	.+38     	; 0x588a <Sensor_DS18B10_init()+0x66>
    }
  }

void MinimalOneWireBase::reset_search()
  {
  lastDeviceFlag = false;
    5864:	10 92 4b 03 	sts	0x034B, r1
  lastDiscrepancy = 0;
    5868:	10 92 4d 03 	sts	0x034D, r1
    586c:	10 92 4c 03 	sts	0x034C, r1
    5870:	02 c0       	rjmp	.+4      	; 0x5876 <Sensor_DS18B10_init()+0x52>
  for(int i = sizeof(addr); --i >= 0; ) { addr[i] = 0; }
    5872:	18 82       	st	Y, r1
    5874:	21 97       	sbiw	r28, 0x01	; 1
    5876:	83 e0       	ldi	r24, 0x03	; 3
    5878:	c0 35       	cpi	r28, 0x50	; 80
    587a:	d8 07       	cpc	r29, r24
    587c:	d1 f7       	brne	.-12     	; 0x5872 <Sensor_DS18B10_init()+0x4e>
    // Found one and configured it!
    found = true;
    }

  // Search has been run (whether DS18B20 was found or not).
  sensor_DS18B10_initialised = true;
    587e:	81 e0       	ldi	r24, 0x01	; 1
    5880:	80 93 64 03 	sts	0x0364, r24

  if(!found)
    5884:	11 23       	and	r17, r17
    5886:	59 f5       	brne	.+86     	; 0x58de <Sensor_DS18B10_init()+0xba>
    5888:	24 c0       	rjmp	.+72     	; 0x58d2 <Sensor_DS18B10_init()+0xae>
      DEBUG_SERIAL_PRINTFMT(first_DS18B20_address[i], HEX);
      }
    DEBUG_SERIAL_PRINTLN();
#endif

    if(0x28 != first_DS18B20_address[0])
    588a:	80 91 65 03 	lds	r24, 0x0365
    588e:	88 32       	cpi	r24, 0x28	; 40
    5890:	09 f7       	brne	.-62     	; 0x5854 <Sensor_DS18B10_init()+0x30>
      }

#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("Setting precision...");
#endif
    MinOW.reset();
    5892:	89 e4       	ldi	r24, 0x49	; 73
    5894:	93 e0       	ldi	r25, 0x03	; 3
    5896:	0e 94 47 2a 	call	0x548e	; 0x548e <MinimalOneWireBase::reset()>
    // Write scratchpad/config
    MinOW.select(first_DS18B20_address);
    589a:	89 e4       	ldi	r24, 0x49	; 73
    589c:	93 e0       	ldi	r25, 0x03	; 3
    589e:	65 e6       	ldi	r22, 0x65	; 101
    58a0:	73 e0       	ldi	r23, 0x03	; 3
    58a2:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <MinimalOneWireBase::select(unsigned char const*)>
    MinOW.write(0x4e);
    58a6:	89 e4       	ldi	r24, 0x49	; 73
    58a8:	93 e0       	ldi	r25, 0x03	; 3
    58aa:	6e e4       	ldi	r22, 0x4E	; 78
    58ac:	0e 94 ab 2a 	call	0x5556	; 0x5556 <MinimalOneWireBase::write(unsigned char)>
    MinOW.write(0); // Th: not used.
    58b0:	89 e4       	ldi	r24, 0x49	; 73
    58b2:	93 e0       	ldi	r25, 0x03	; 3
    58b4:	60 e0       	ldi	r22, 0x00	; 0
    58b6:	0e 94 ab 2a 	call	0x5556	; 0x5556 <MinimalOneWireBase::write(unsigned char)>
    MinOW.write(0); // Tl: not used.
    58ba:	89 e4       	ldi	r24, 0x49	; 73
    58bc:	93 e0       	ldi	r25, 0x03	; 3
    58be:	60 e0       	ldi	r22, 0x00	; 0
    58c0:	0e 94 ab 2a 	call	0x5556	; 0x5556 <MinimalOneWireBase::write(unsigned char)>
    MinOW.write(DS1820_PRECISION | 0x1f); // Config register; lsbs all 1.
    58c4:	89 e4       	ldi	r24, 0x49	; 73
    58c6:	93 e0       	ldi	r25, 0x03	; 3
    58c8:	6f e5       	ldi	r22, 0x5F	; 95
    58ca:	0e 94 ab 2a 	call	0x5556	; 0x5556 <MinimalOneWireBase::write(unsigned char)>
    58ce:	11 e0       	ldi	r17, 0x01	; 1
    58d0:	c1 cf       	rjmp	.-126    	; 0x5854 <Sensor_DS18B10_init()+0x30>
  // Search has been run (whether DS18B20 was found or not).
  sensor_DS18B10_initialised = true;

  if(!found)
    {
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("DS18B20 not found");
    58d2:	8d e5       	ldi	r24, 0x5D	; 93
    58d4:	94 e0       	ldi	r25, 0x04	; 4
    58d6:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <serialPrintlnAndFlush(__FlashStringHelper const*)>
    first_DS18B20_address[0] = 0; // Indicate no DS18B20 found.
    58da:	10 92 65 03 	sts	0x0365, r1
    }
  return(found);
  }
    58de:	81 2f       	mov	r24, r17
    58e0:	df 91       	pop	r29
    58e2:	cf 91       	pop	r28
    58e4:	1f 91       	pop	r17
    58e6:	08 95       	ret

000058e8 <RoomTemperatureC16::read()>:

// Singleton implementation/instance.
RoomTemperatureC16 TemperatureC16;

// Temperature read uses/selects one of the implementations/sensors.
int RoomTemperatureC16::read()
    58e8:	0f 93       	push	r16
    58ea:	1f 93       	push	r17
    58ec:	cf 93       	push	r28
    58ee:	df 93       	push	r29
    58f0:	ec 01       	movw	r28, r24

// Returns temperature in C*16.
// Returns <= 0 for some sorts of error as failsafe (-1 if failed to initialise).
static int Sensor_DS18B10_readTemperatureC16()
  {
  if(!sensor_DS18B10_initialised) { Sensor_DS18B10_init(); }
    58f2:	80 91 64 03 	lds	r24, 0x0364
    58f6:	88 23       	and	r24, r24
    58f8:	11 f4       	brne	.+4      	; 0x58fe <RoomTemperatureC16::read()+0x16>
    58fa:	0e 94 12 2c 	call	0x5824	; 0x5824 <Sensor_DS18B10_init()>
  if(0 == first_DS18B20_address[0]) { return(-1); }
    58fe:	80 91 65 03 	lds	r24, 0x0365
    5902:	88 23       	and	r24, r24
    5904:	19 f4       	brne	.+6      	; 0x590c <RoomTemperatureC16::read()+0x24>
    5906:	2f ef       	ldi	r18, 0xFF	; 255
    5908:	3f ef       	ldi	r19, 0xFF	; 255
    590a:	3d c0       	rjmp	.+122    	; 0x5986 <RoomTemperatureC16::read()+0x9e>

  // Start a temperature reading.
  MinOW.reset();
    590c:	89 e4       	ldi	r24, 0x49	; 73
    590e:	93 e0       	ldi	r25, 0x03	; 3
    5910:	0e 94 47 2a 	call	0x548e	; 0x548e <MinimalOneWireBase::reset()>
  MinOW.select(first_DS18B20_address);
    5914:	89 e4       	ldi	r24, 0x49	; 73
    5916:	93 e0       	ldi	r25, 0x03	; 3
    5918:	65 e6       	ldi	r22, 0x65	; 101
    591a:	73 e0       	ldi	r23, 0x03	; 3
    591c:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <MinimalOneWireBase::select(unsigned char const*)>
  MinOW.write(0x44); // Start conversion without parasite power.
    5920:	89 e4       	ldi	r24, 0x49	; 73
    5922:	93 e0       	ldi	r25, 0x03	; 3
    5924:	64 e4       	ldi	r22, 0x44	; 68
    5926:	0e 94 ab 2a 	call	0x5556	; 0x5556 <MinimalOneWireBase::write(unsigned char)>
    592a:	03 c0       	rjmp	.+6      	; 0x5932 <RoomTemperatureC16::read()+0x4a>
  //delay(750); // 750ms should be enough.
  // Poll for conversion complete (bus released)...
  while(MinOW.read_bit() == 0) { nap(WDTO_30MS); }
    592c:	81 e0       	ldi	r24, 0x01	; 1
    592e:	0e 94 39 17 	call	0x2e72	; 0x2e72 <nap(signed char)>
    5932:	89 e4       	ldi	r24, 0x49	; 73
    5934:	93 e0       	ldi	r25, 0x03	; 3
    5936:	0e 94 9e 2b 	call	0x573c	; 0x573c <MinimalOneWire<(unsigned char)2>::read_bit()>
    593a:	88 23       	and	r24, r24
    593c:	b9 f3       	breq	.-18     	; 0x592c <RoomTemperatureC16::read()+0x44>

  // Fetch temperature (scratchpad read).
  MinOW.reset();
    593e:	89 e4       	ldi	r24, 0x49	; 73
    5940:	93 e0       	ldi	r25, 0x03	; 3
    5942:	0e 94 47 2a 	call	0x548e	; 0x548e <MinimalOneWireBase::reset()>
  MinOW.select(first_DS18B20_address);    
    5946:	89 e4       	ldi	r24, 0x49	; 73
    5948:	93 e0       	ldi	r25, 0x03	; 3
    594a:	65 e6       	ldi	r22, 0x65	; 101
    594c:	73 e0       	ldi	r23, 0x03	; 3
    594e:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <MinimalOneWireBase::select(unsigned char const*)>
  MinOW.write(0xbe);
    5952:	89 e4       	ldi	r24, 0x49	; 73
    5954:	93 e0       	ldi	r25, 0x03	; 3
    5956:	6e eb       	ldi	r22, 0xBE	; 190
    5958:	0e 94 ab 2a 	call	0x5556	; 0x5556 <MinimalOneWireBase::write(unsigned char)>
  // Read first two bytes of 9 available.  (No CRC config or check.)
  const uint8_t d0 = MinOW.read();
    595c:	89 e4       	ldi	r24, 0x49	; 73
    595e:	93 e0       	ldi	r25, 0x03	; 3
    5960:	0e 94 8c 2a 	call	0x5518	; 0x5518 <MinimalOneWireBase::read()>
    5964:	18 2f       	mov	r17, r24
  const uint8_t d1 = MinOW.read();
    5966:	89 e4       	ldi	r24, 0x49	; 73
    5968:	93 e0       	ldi	r25, 0x03	; 3
    596a:	0e 94 8c 2a 	call	0x5518	; 0x5518 <MinimalOneWireBase::read()>
    596e:	08 2f       	mov	r16, r24
  // Terminate read and let DS18B20 go back to sleep.
  MinOW.reset();
    5970:	89 e4       	ldi	r24, 0x49	; 73
    5972:	93 e0       	ldi	r25, 0x03	; 3
    5974:	0e 94 47 2a 	call	0x548e	; 0x548e <MinimalOneWireBase::reset()>

  // Extract raw temperature, masking any undefined lsbit.
  const int16_t rawC16 = (d1 << 8) | (d0 & ~1);
    5978:	21 2f       	mov	r18, r17
    597a:	30 e0       	ldi	r19, 0x00	; 0
    597c:	2e 7f       	andi	r18, 0xFE	; 254
    597e:	90 2f       	mov	r25, r16
    5980:	80 e0       	ldi	r24, 0x00	; 0
    5982:	28 2b       	or	r18, r24
    5984:	39 2b       	or	r19, r25
  const int raw = Sensor_SHT21_readTemperatureC16();
#else
  const int raw = TMP112_readTemperatureC16();
#endif

  value = raw;
    5986:	3b 83       	std	Y+3, r19	; 0x03
    5988:	2a 83       	std	Y+2, r18	; 0x02
  return(value);
  }
    598a:	c9 01       	movw	r24, r18
    598c:	df 91       	pop	r29
    598e:	cf 91       	pop	r28
    5990:	1f 91       	pop	r17
    5992:	0f 91       	pop	r16
    5994:	08 95       	ret

00005996 <AmbientLight::read()>:
// Measure/store/return the current room ambient light levels in range [0,1023].
// This may consume significant power and time.
// Probably no need to do this more than (say) once per minute.
// This implementation expects LDR (1M dark resistance) from IO_POWER_UP to LDR_SENSOR_AIN and 100k to ground.
// (Not intended to be called from ISR.)
uint8_t AmbientLight::read()
    5996:	ef 92       	push	r14
    5998:	ff 92       	push	r15
    599a:	0f 93       	push	r16
    599c:	1f 93       	push	r17
    599e:	df 93       	push	r29
    59a0:	cf 93       	push	r28
    59a2:	cd b7       	in	r28, 0x3d	; 61
    59a4:	de b7       	in	r29, 0x3e	; 62
    59a6:	28 97       	sbiw	r28, 0x08	; 8
    59a8:	0f b6       	in	r0, 0x3f	; 63
    59aa:	f8 94       	cli
    59ac:	de bf       	out	0x3e, r29	; 62
    59ae:	0f be       	out	0x3f, r0	; 63
    59b0:	cd bf       	out	0x3d, r28	; 61
    59b2:	7c 01       	movw	r14, r24
  {
  power_intermittent_peripherals_enable(false); // No need to wait for anything to stablise as direct of IO_POWER_UP.
    59b4:	80 e0       	ldi	r24, 0x00	; 0
    59b6:	0e 94 a3 19 	call	0x3346	; 0x3346 <power_intermittent_peripherals_enable(bool)>
  const uint16_t al0 = analogueNoiseReducedRead(LDR_SENSOR_AIN, ALREFERENCE);
    59ba:	80 e0       	ldi	r24, 0x00	; 0
    59bc:	63 e0       	ldi	r22, 0x03	; 3
    59be:	0e 94 33 18 	call	0x3066	; 0x3066 <analogueNoiseReducedRead(unsigned char, unsigned char)>
#if defined(ADAPTIVE_THRESHOLD)
  uint16_t al;
  if(al0 >= ADAPTIVE_THRESHOLD)
    59c2:	23 e0       	ldi	r18, 0x03	; 3
    59c4:	80 38       	cpi	r24, 0x80	; 128
    59c6:	92 07       	cpc	r25, r18
    59c8:	10 f4       	brcc	.+4      	; 0x59ce <AmbientLight::read()+0x38>
    59ca:	8c 01       	movw	r16, r24
    59cc:	36 c0       	rjmp	.+108    	; 0x5a3a <AmbientLight::read()+0xa4>
    {
    const uint16_t al1 = analogueNoiseReducedRead(LDR_SENSOR_AIN, DEFAULT); // Vsupply reference.
    59ce:	80 e0       	ldi	r24, 0x00	; 0
    59d0:	61 e0       	ldi	r22, 0x01	; 1
    59d2:	0e 94 33 18 	call	0x3066	; 0x3066 <analogueNoiseReducedRead(unsigned char, unsigned char)>
    59d6:	8c 01       	movw	r16, r24
    Supply_mV.read();
    59d8:	8f ee       	ldi	r24, 0xEF	; 239
    59da:	92 e0       	ldi	r25, 0x02	; 2
    59dc:	0e 94 3d 18 	call	0x307a	; 0x307a <SupplyVoltageMilliVolts::read()>
    const uint16_t vbg = Supply_mV.getRawInv(); // Vbandgap wrt Vsupply.
    // Compute value in extended range up to ~1024 * Vsupply/Vbandgap.
    const uint16_t ale = ((al1 << 5) / ((vbg+16) >> 5)); // Faster int-only approximation to (int)((al1 * 1024L) / vbg)).
    59e0:	60 91 f1 02 	lds	r22, 0x02F1
    59e4:	70 91 f2 02 	lds	r23, 0x02F2
    59e8:	60 5f       	subi	r22, 0xF0	; 240
    59ea:	7f 4f       	sbci	r23, 0xFF	; 255
    59ec:	e5 e0       	ldi	r30, 0x05	; 5
    59ee:	76 95       	lsr	r23
    59f0:	67 95       	ror	r22
    59f2:	ea 95       	dec	r30
    59f4:	e1 f7       	brne	.-8      	; 0x59ee <AmbientLight::read()+0x58>
    59f6:	c8 01       	movw	r24, r16
    59f8:	55 e0       	ldi	r21, 0x05	; 5
    59fa:	88 0f       	add	r24, r24
    59fc:	99 1f       	adc	r25, r25
    59fe:	5a 95       	dec	r21
    5a00:	e1 f7       	brne	.-8      	; 0x59fa <AmbientLight::read()+0x64>
    5a02:	0e 94 2e 35 	call	0x6a5c	; 0x6a5c <__udivmodhi4>
    5a06:	cb 01       	movw	r24, r22
    // Ensure that scale stays monotonic in face of calculation lumpiness, etc...
    // Scale all remaining space above threshold to new top value into remaining space.
    // TODO: ensure scaleFactor is a power of two for speed.
    const uint16_t scaleFactor = (2048 - ADAPTIVE_THRESHOLD) / (1024 - ADAPTIVE_THRESHOLD);
    al = fnmin(1023U,
        ADAPTIVE_THRESHOLD + fnmax(0U, ((ale - ADAPTIVE_THRESHOLD) / scaleFactor)));
    5a08:	2f ef       	ldi	r18, 0xFF	; 255
    5a0a:	33 e0       	ldi	r19, 0x03	; 3
    5a0c:	3e 83       	std	Y+6, r19	; 0x06
    5a0e:	2d 83       	std	Y+5, r18	; 0x05
    5a10:	1a 82       	std	Y+2, r1	; 0x02
    5a12:	19 82       	std	Y+1, r1	; 0x01
    5a14:	80 58       	subi	r24, 0x80	; 128
    5a16:	93 40       	sbci	r25, 0x03	; 3
    5a18:	69 e0       	ldi	r22, 0x09	; 9
    5a1a:	70 e0       	ldi	r23, 0x00	; 0
    5a1c:	0e 94 2e 35 	call	0x6a5c	; 0x6a5c <__udivmodhi4>
    5a20:	7c 83       	std	Y+4, r23	; 0x04
    5a22:	6b 83       	std	Y+3, r22	; 0x03
    5a24:	8b 01       	movw	r16, r22
    5a26:	00 58       	subi	r16, 0x80	; 128
    5a28:	1c 4f       	sbci	r17, 0xFC	; 252
    5a2a:	18 87       	std	Y+8, r17	; 0x08
    5a2c:	0f 83       	std	Y+7, r16	; 0x07




// Templated function versions of min/max that do not evaluate the arguments twice.
template <class T> const T& fnmin(const T& a, const T& b) { return((a>b)?b:a); }
    5a2e:	43 e0       	ldi	r20, 0x03	; 3
    5a30:	0f 3f       	cpi	r16, 0xFF	; 255
    5a32:	14 07       	cpc	r17, r20
    5a34:	10 f0       	brcs	.+4      	; 0x5a3a <AmbientLight::read()+0xa4>
    5a36:	0f ef       	ldi	r16, 0xFF	; 255
    5a38:	13 e0       	ldi	r17, 0x03	; 3
    }
  else { al = al0; }
#else
  const uint16_t al = al0;
#endif
  power_intermittent_peripherals_disable();
    5a3a:	0e 94 71 19 	call	0x32e2	; 0x32e2 <power_intermittent_peripherals_disable()>

  // Capture entropy from changed LS bits.
  if((uint8_t)al != (uint8_t)rawValue) { addEntropyToPool((uint8_t)al ^ (uint8_t)rawValue, 0); } // Claim zero entropy as may be forced by Eve.
    5a3e:	80 2f       	mov	r24, r16
    5a40:	f7 01       	movw	r30, r14
    5a42:	93 81       	ldd	r25, Z+3	; 0x03
    5a44:	09 17       	cp	r16, r25
    5a46:	21 f0       	breq	.+8      	; 0x5a50 <AmbientLight::read()+0xba>
    5a48:	89 27       	eor	r24, r25
    5a4a:	60 e0       	ldi	r22, 0x00	; 0
    5a4c:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <addEntropyToPool(unsigned char, unsigned char)>

  // Adjust room-lit flag, with hysteresis.
  if(al <= LDR_THR_LOW)
    5a50:	f1 e0       	ldi	r31, 0x01	; 1
    5a52:	0f 30       	cpi	r16, 0x0F	; 15
    5a54:	1f 07       	cpc	r17, r31
    5a56:	40 f4       	brcc	.+16     	; 0x5a68 <AmbientLight::read()+0xd2>
    {
    isRoomLitFlag = false;
    5a58:	f7 01       	movw	r30, r14
    5a5a:	15 82       	std	Z+5, r1	; 0x05
    // If dark enough to isRoomLitFlag false then increment counter.
    if(darkTicks < 255) { ++darkTicks; }
    5a5c:	86 81       	ldd	r24, Z+6	; 0x06
    5a5e:	8f 3f       	cpi	r24, 0xFF	; 255
    5a60:	01 f1       	breq	.+64     	; 0x5aa2 <AmbientLight::read()+0x10c>
    5a62:	8f 5f       	subi	r24, 0xFF	; 255
    5a64:	86 83       	std	Z+6, r24	; 0x06
    5a66:	1d c0       	rjmp	.+58     	; 0x5aa2 <AmbientLight::read()+0x10c>
    }
  else if(al > LDR_THR_HIGH)
    5a68:	f1 e0       	ldi	r31, 0x01	; 1
    5a6a:	01 39       	cpi	r16, 0x91	; 145
    5a6c:	1f 07       	cpc	r17, r31
    5a6e:	c8 f0       	brcs	.+50     	; 0x5aa2 <AmbientLight::read()+0x10c>
    {
    // Treat a sharp transition from dark to light as a possible/weak indication of occupancy, eg light flicked on.
    // Ignore trigger at start-up.
    static bool ignoreFirst;
    if(!ignoreFirst) { ignoreFirst = true; }
    5a70:	80 91 6d 03 	lds	r24, 0x036D
    5a74:	88 23       	and	r24, r24
    5a76:	21 f4       	brne	.+8      	; 0x5a80 <AmbientLight::read()+0xea>
    5a78:	81 e0       	ldi	r24, 0x01	; 1
    5a7a:	80 93 6d 03 	sts	0x036D, r24
    5a7e:	0d c0       	rjmp	.+26     	; 0x5a9a <AmbientLight::read()+0x104>
    else if((!isRoomLitFlag) && (rawValue < LDR_THR_LOW)) { Occupancy.markAsPossiblyOccupied(); }
    5a80:	f7 01       	movw	r30, r14
    5a82:	85 81       	ldd	r24, Z+5	; 0x05
    5a84:	88 23       	and	r24, r24
    5a86:	49 f4       	brne	.+18     	; 0x5a9a <AmbientLight::read()+0x104>
    5a88:	83 81       	ldd	r24, Z+3	; 0x03
    5a8a:	94 81       	ldd	r25, Z+4	; 0x04
    5a8c:	8e 50       	subi	r24, 0x0E	; 14
    5a8e:	91 40       	sbci	r25, 0x01	; 1
    5a90:	20 f4       	brcc	.+8      	; 0x5a9a <AmbientLight::read()+0x104>
    5a92:	8a ee       	ldi	r24, 0xEA	; 234
    5a94:	91 e0       	ldi	r25, 0x01	; 1
    5a96:	0e 94 20 04 	call	0x840	; 0x840 <OccupancyTracker::markAsPossiblyOccupied()>
    isRoomLitFlag = true;
    5a9a:	81 e0       	ldi	r24, 0x01	; 1
    5a9c:	f7 01       	movw	r30, r14
    5a9e:	85 83       	std	Z+5, r24	; 0x05
    // If light enough to isRoomLitFlag true then reset counter.
    darkTicks = 0;
    5aa0:	16 82       	std	Z+6, r1	; 0x06
    }

  // Store new value, raw and normalised.
  // Unconditionbally store raw value.
  rawValue = al;
    5aa2:	f7 01       	movw	r30, r14
    5aa4:	14 83       	std	Z+4, r17	; 0x04
    5aa6:	03 83       	std	Z+3, r16	; 0x03
  // Apply a little bit of noise reduction (hysteresis) to the normalised version.
  const uint8_t newValue = (uint8_t)(al >> 2);
    5aa8:	c8 01       	movw	r24, r16
    5aaa:	96 95       	lsr	r25
    5aac:	87 95       	ror	r24
    5aae:	96 95       	lsr	r25
    5ab0:	87 95       	ror	r24
    5ab2:	28 2f       	mov	r18, r24
  if(newValue != value)
    5ab4:	82 81       	ldd	r24, Z+2	; 0x02
    5ab6:	28 17       	cp	r18, r24
    5ab8:	a1 f0       	breq	.+40     	; 0x5ae2 <AmbientLight::read()+0x14c>
    {
    const uint16_t oldRawImplied = ((uint16_t)value) << 2;
    5aba:	82 81       	ldd	r24, Z+2	; 0x02
    5abc:	90 e0       	ldi	r25, 0x00	; 0
    5abe:	88 0f       	add	r24, r24
    5ac0:	99 1f       	adc	r25, r25
    5ac2:	88 0f       	add	r24, r24
    5ac4:	99 1f       	adc	r25, r25
    const uint16_t absDiff = (oldRawImplied > al) ? (oldRawImplied - al) : (al - oldRawImplied);
    5ac6:	08 17       	cp	r16, r24
    5ac8:	19 07       	cpc	r17, r25
    5aca:	18 f4       	brcc	.+6      	; 0x5ad2 <AmbientLight::read()+0x13c>
    5acc:	80 1b       	sub	r24, r16
    5ace:	91 0b       	sbc	r25, r17
    5ad0:	04 c0       	rjmp	.+8      	; 0x5ada <AmbientLight::read()+0x144>
    5ad2:	a8 01       	movw	r20, r16
    5ad4:	48 1b       	sub	r20, r24
    5ad6:	59 0b       	sbc	r21, r25
    5ad8:	ca 01       	movw	r24, r20
    if(absDiff > 2) { value = newValue; }
    5ada:	03 97       	sbiw	r24, 0x03	; 3
    5adc:	10 f0       	brcs	.+4      	; 0x5ae2 <AmbientLight::read()+0x14c>
    5ade:	f7 01       	movw	r30, r14
    5ae0:	22 83       	std	Z+2, r18	; 0x02
  DEBUG_SERIAL_PRINT_FLASHSTRING("isRoomLit: ");
  DEBUG_SERIAL_PRINT(isRoomLitFlag);
  DEBUG_SERIAL_PRINTLN();
#endif

  return(value);
    5ae2:	f7 01       	movw	r30, r14
    5ae4:	82 81       	ldd	r24, Z+2	; 0x02
  }
    5ae6:	28 96       	adiw	r28, 0x08	; 8
    5ae8:	0f b6       	in	r0, 0x3f	; 63
    5aea:	f8 94       	cli
    5aec:	de bf       	out	0x3e, r29	; 62
    5aee:	0f be       	out	0x3f, r0	; 63
    5af0:	cd bf       	out	0x3d, r28	; 61
    5af2:	cf 91       	pop	r28
    5af4:	df 91       	pop	r29
    5af6:	1f 91       	pop	r17
    5af8:	0f 91       	pop	r16
    5afa:	ff 90       	pop	r15
    5afc:	ef 90       	pop	r14
    5afe:	08 95       	ret

00005b00 <TwoWire::available()>:
}

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
    5b00:	20 91 8f 03 	lds	r18, 0x038F
    5b04:	30 e0       	ldi	r19, 0x00	; 0
    5b06:	80 91 8e 03 	lds	r24, 0x038E
    5b0a:	28 1b       	sub	r18, r24
    5b0c:	31 09       	sbc	r19, r1
{
  return rxBufferLength - rxBufferIndex;
}
    5b0e:	c9 01       	movw	r24, r18
    5b10:	08 95       	ret

00005b12 <TwoWire::read()>:
int TwoWire::read(void)
{
  int value = -1;
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    5b12:	40 91 8e 03 	lds	r20, 0x038E
    5b16:	80 91 8f 03 	lds	r24, 0x038F
    5b1a:	48 17       	cp	r20, r24
    5b1c:	18 f0       	brcs	.+6      	; 0x5b24 <TwoWire::read()+0x12>
    5b1e:	2f ef       	ldi	r18, 0xFF	; 255
    5b20:	3f ef       	ldi	r19, 0xFF	; 255
    5b22:	0a c0       	rjmp	.+20     	; 0x5b38 <TwoWire::read()+0x26>
    value = rxBuffer[rxBufferIndex];
    5b24:	e4 2f       	mov	r30, r20
    5b26:	f0 e0       	ldi	r31, 0x00	; 0
    5b28:	e2 59       	subi	r30, 0x92	; 146
    5b2a:	fc 4f       	sbci	r31, 0xFC	; 252
    5b2c:	80 81       	ld	r24, Z
    5b2e:	28 2f       	mov	r18, r24
    5b30:	30 e0       	ldi	r19, 0x00	; 0
    ++rxBufferIndex;
    5b32:	4f 5f       	subi	r20, 0xFF	; 255
    5b34:	40 93 8e 03 	sts	0x038E, r20
  }

  return value;
}
    5b38:	c9 01       	movw	r24, r18
    5b3a:	08 95       	ret

00005b3c <TwoWire::peek()>:
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
  
  if(rxBufferIndex < rxBufferLength){
    5b3c:	e0 91 8e 03 	lds	r30, 0x038E
    5b40:	80 91 8f 03 	lds	r24, 0x038F
    5b44:	e8 17       	cp	r30, r24
    5b46:	18 f0       	brcs	.+6      	; 0x5b4e <TwoWire::peek()+0x12>
    5b48:	ef ef       	ldi	r30, 0xFF	; 255
    5b4a:	ff ef       	ldi	r31, 0xFF	; 255
    5b4c:	06 c0       	rjmp	.+12     	; 0x5b5a <TwoWire::peek()+0x1e>
    value = rxBuffer[rxBufferIndex];
    5b4e:	f0 e0       	ldi	r31, 0x00	; 0
    5b50:	e2 59       	subi	r30, 0x92	; 146
    5b52:	fc 4f       	sbci	r31, 0xFC	; 252
    5b54:	80 81       	ld	r24, Z
    5b56:	e8 2f       	mov	r30, r24
    5b58:	f0 e0       	ldi	r31, 0x00	; 0
  }

  return value;
}
    5b5a:	cf 01       	movw	r24, r30
    5b5c:	08 95       	ret

00005b5e <TwoWire::flush()>:

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
    5b5e:	08 95       	ret

00005b60 <global constructors keyed to _ZN7TwoWire8rxBufferE>:
    5b60:	10 92 b6 03 	sts	0x03B6, r1
    5b64:	10 92 b5 03 	sts	0x03B5, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    5b68:	88 ee       	ldi	r24, 0xE8	; 232
    5b6a:	93 e0       	ldi	r25, 0x03	; 3
    5b6c:	a0 e0       	ldi	r26, 0x00	; 0
    5b6e:	b0 e0       	ldi	r27, 0x00	; 0
    5b70:	80 93 b7 03 	sts	0x03B7, r24
    5b74:	90 93 b8 03 	sts	0x03B8, r25
    5b78:	a0 93 b9 03 	sts	0x03B9, r26
    5b7c:	b0 93 ba 03 	sts	0x03BA, r27
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    5b80:	8e ec       	ldi	r24, 0xCE	; 206
    5b82:	91 e0       	ldi	r25, 0x01	; 1
    5b84:	90 93 b4 03 	sts	0x03B4, r25
    5b88:	80 93 b3 03 	sts	0x03B3, r24
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    5b8c:	08 95       	ret

00005b8e <TwoWire::write(unsigned char const*, unsigned int)>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
    5b8e:	cf 92       	push	r12
    5b90:	df 92       	push	r13
    5b92:	ef 92       	push	r14
    5b94:	ff 92       	push	r15
    5b96:	0f 93       	push	r16
    5b98:	1f 93       	push	r17
    5b9a:	cf 93       	push	r28
    5b9c:	df 93       	push	r29
    5b9e:	7c 01       	movw	r14, r24
    5ba0:	6b 01       	movw	r12, r22
    5ba2:	8a 01       	movw	r16, r20
{
  if(transmitting){
    5ba4:	80 91 b2 03 	lds	r24, 0x03B2
    5ba8:	88 23       	and	r24, r24
    5baa:	a1 f0       	breq	.+40     	; 0x5bd4 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
    5bac:	c0 e0       	ldi	r28, 0x00	; 0
    5bae:	d0 e0       	ldi	r29, 0x00	; 0
    5bb0:	0d c0       	rjmp	.+26     	; 0x5bcc <TwoWire::write(unsigned char const*, unsigned int)+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
      write(data[i]);
    5bb2:	d7 01       	movw	r26, r14
    5bb4:	ed 91       	ld	r30, X+
    5bb6:	fc 91       	ld	r31, X
    5bb8:	d6 01       	movw	r26, r12
    5bba:	ac 0f       	add	r26, r28
    5bbc:	bd 1f       	adc	r27, r29
    5bbe:	01 90       	ld	r0, Z+
    5bc0:	f0 81       	ld	r31, Z
    5bc2:	e0 2d       	mov	r30, r0
    5bc4:	c7 01       	movw	r24, r14
    5bc6:	6c 91       	ld	r22, X
    5bc8:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    5bca:	21 96       	adiw	r28, 0x01	; 1
    5bcc:	c0 17       	cp	r28, r16
    5bce:	d1 07       	cpc	r29, r17
    5bd0:	80 f3       	brcs	.-32     	; 0x5bb2 <TwoWire::write(unsigned char const*, unsigned int)+0x24>
    5bd2:	04 c0       	rjmp	.+8      	; 0x5bdc <TwoWire::write(unsigned char const*, unsigned int)+0x4e>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    5bd4:	cb 01       	movw	r24, r22
    5bd6:	64 2f       	mov	r22, r20
    5bd8:	0e 94 28 2e 	call	0x5c50	; 0x5c50 <twi_transmit>
  }
  return quantity;
}
    5bdc:	c8 01       	movw	r24, r16
    5bde:	df 91       	pop	r29
    5be0:	cf 91       	pop	r28
    5be2:	1f 91       	pop	r17
    5be4:	0f 91       	pop	r16
    5be6:	ff 90       	pop	r15
    5be8:	ef 90       	pop	r14
    5bea:	df 90       	pop	r13
    5bec:	cf 90       	pop	r12
    5bee:	08 95       	ret

00005bf0 <TwoWire::write(unsigned char)>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
    5bf0:	df 93       	push	r29
    5bf2:	cf 93       	push	r28
    5bf4:	0f 92       	push	r0
    5bf6:	cd b7       	in	r28, 0x3d	; 61
    5bf8:	de b7       	in	r29, 0x3e	; 62
    5bfa:	fc 01       	movw	r30, r24
    5bfc:	69 83       	std	Y+1, r22	; 0x01
{
  if(transmitting){
    5bfe:	80 91 b2 03 	lds	r24, 0x03B2
    5c02:	88 23       	and	r24, r24
    5c04:	c9 f0       	breq	.+50     	; 0x5c38 <TwoWire::write(unsigned char)+0x48>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    5c06:	80 91 b1 03 	lds	r24, 0x03B1
    5c0a:	80 32       	cpi	r24, 0x20	; 32
    5c0c:	38 f0       	brcs	.+14     	; 0x5c1c <TwoWire::write(unsigned char)+0x2c>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    5c0e:	81 e0       	ldi	r24, 0x01	; 1
    5c10:	90 e0       	ldi	r25, 0x00	; 0
    5c12:	93 83       	std	Z+3, r25	; 0x03
    5c14:	82 83       	std	Z+2, r24	; 0x02
    5c16:	20 e0       	ldi	r18, 0x00	; 0
    5c18:	30 e0       	ldi	r19, 0x00	; 0
    5c1a:	15 c0       	rjmp	.+42     	; 0x5c46 <TwoWire::write(unsigned char)+0x56>
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    5c1c:	80 91 b0 03 	lds	r24, 0x03B0
    5c20:	e8 2f       	mov	r30, r24
    5c22:	f0 e0       	ldi	r31, 0x00	; 0
    5c24:	e0 57       	subi	r30, 0x70	; 112
    5c26:	fc 4f       	sbci	r31, 0xFC	; 252
    5c28:	99 81       	ldd	r25, Y+1	; 0x01
    5c2a:	90 83       	st	Z, r25
    ++txBufferIndex;
    5c2c:	8f 5f       	subi	r24, 0xFF	; 255
    5c2e:	80 93 b0 03 	sts	0x03B0, r24
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    5c32:	80 93 b1 03 	sts	0x03B1, r24
    5c36:	05 c0       	rjmp	.+10     	; 0x5c42 <TwoWire::write(unsigned char)+0x52>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    5c38:	ce 01       	movw	r24, r28
    5c3a:	01 96       	adiw	r24, 0x01	; 1
    5c3c:	61 e0       	ldi	r22, 0x01	; 1
    5c3e:	0e 94 28 2e 	call	0x5c50	; 0x5c50 <twi_transmit>
    5c42:	21 e0       	ldi	r18, 0x01	; 1
    5c44:	30 e0       	ldi	r19, 0x00	; 0
  }
  return 1;
}
    5c46:	c9 01       	movw	r24, r18
    5c48:	0f 90       	pop	r0
    5c4a:	cf 91       	pop	r28
    5c4c:	df 91       	pop	r29
    5c4e:	08 95       	ret

00005c50 <twi_transmit>:
 * Output   1 length too long for buffer
 *          2 not slave transmitter
 *          0 ok
 */
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
    5c50:	48 2f       	mov	r20, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    5c52:	61 32       	cpi	r22, 0x21	; 33
    5c54:	10 f0       	brcs	.+4      	; 0x5c5a <twi_transmit+0xa>
    5c56:	81 e0       	ldi	r24, 0x01	; 1
    5c58:	08 95       	ret
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    5c5a:	80 91 bf 03 	lds	r24, 0x03BF
    5c5e:	84 30       	cpi	r24, 0x04	; 4
    5c60:	11 f0       	breq	.+4      	; 0x5c66 <twi_transmit+0x16>
    5c62:	82 e0       	ldi	r24, 0x02	; 2
    5c64:	08 95       	ret
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
    5c66:	60 93 0a 04 	sts	0x040A, r22
    5c6a:	a9 ee       	ldi	r26, 0xE9	; 233
    5c6c:	b3 e0       	ldi	r27, 0x03	; 3
    5c6e:	84 2f       	mov	r24, r20
    5c70:	9c 01       	movw	r18, r24
    5c72:	f9 01       	movw	r30, r18
    5c74:	02 c0       	rjmp	.+4      	; 0x5c7a <twi_transmit+0x2a>
  for(i = 0; i < length; ++i){
    twi_txBuffer[i] = data[i];
    5c76:	81 91       	ld	r24, Z+
    5c78:	8d 93       	st	X+, r24
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
    5c7a:	8e 2f       	mov	r24, r30
    5c7c:	84 1b       	sub	r24, r20
    5c7e:	86 17       	cp	r24, r22
    5c80:	d0 f3       	brcs	.-12     	; 0x5c76 <twi_transmit+0x26>
    5c82:	80 e0       	ldi	r24, 0x00	; 0
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
}
    5c84:	08 95       	ret

00005c86 <__vector_24>:
  // update twi state
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
    5c86:	1f 92       	push	r1
    5c88:	0f 92       	push	r0
    5c8a:	0f b6       	in	r0, 0x3f	; 63
    5c8c:	0f 92       	push	r0
    5c8e:	11 24       	eor	r1, r1
    5c90:	2f 93       	push	r18
    5c92:	3f 93       	push	r19
    5c94:	4f 93       	push	r20
    5c96:	5f 93       	push	r21
    5c98:	6f 93       	push	r22
    5c9a:	7f 93       	push	r23
    5c9c:	8f 93       	push	r24
    5c9e:	9f 93       	push	r25
    5ca0:	af 93       	push	r26
    5ca2:	bf 93       	push	r27
    5ca4:	ef 93       	push	r30
    5ca6:	ff 93       	push	r31
  switch(TW_STATUS){
    5ca8:	80 91 b9 00 	lds	r24, 0x00B9
    5cac:	90 e0       	ldi	r25, 0x00	; 0
    5cae:	88 7f       	andi	r24, 0xF8	; 248
    5cb0:	90 70       	andi	r25, 0x00	; 0
    5cb2:	80 36       	cpi	r24, 0x60	; 96
    5cb4:	91 05       	cpc	r25, r1
    5cb6:	09 f4       	brne	.+2      	; 0x5cba <__vector_24+0x34>
    5cb8:	f2 c0       	rjmp	.+484    	; 0x5e9e <__vector_24+0x218>
    5cba:	81 36       	cpi	r24, 0x61	; 97
    5cbc:	91 05       	cpc	r25, r1
    5cbe:	cc f5       	brge	.+114    	; 0x5d32 <__vector_24+0xac>
    5cc0:	88 32       	cpi	r24, 0x28	; 40
    5cc2:	91 05       	cpc	r25, r1
    5cc4:	09 f4       	brne	.+2      	; 0x5cc8 <__vector_24+0x42>
    5cc6:	7b c0       	rjmp	.+246    	; 0x5dbe <__vector_24+0x138>
    5cc8:	89 32       	cpi	r24, 0x29	; 41
    5cca:	91 05       	cpc	r25, r1
    5ccc:	b4 f4       	brge	.+44     	; 0x5cfa <__vector_24+0x74>
    5cce:	80 31       	cpi	r24, 0x10	; 16
    5cd0:	91 05       	cpc	r25, r1
    5cd2:	09 f4       	brne	.+2      	; 0x5cd6 <__vector_24+0x50>
    5cd4:	6f c0       	rjmp	.+222    	; 0x5db4 <__vector_24+0x12e>
    5cd6:	81 31       	cpi	r24, 0x11	; 17
    5cd8:	91 05       	cpc	r25, r1
    5cda:	3c f4       	brge	.+14     	; 0x5cea <__vector_24+0x64>
    5cdc:	00 97       	sbiw	r24, 0x00	; 0
    5cde:	09 f4       	brne	.+2      	; 0x5ce2 <__vector_24+0x5c>
    5ce0:	47 c1       	rjmp	.+654    	; 0x5f70 <__vector_24+0x2ea>
    5ce2:	08 97       	sbiw	r24, 0x08	; 8
    5ce4:	09 f0       	breq	.+2      	; 0x5ce8 <__vector_24+0x62>
    5ce6:	4f c1       	rjmp	.+670    	; 0x5f86 <__vector_24+0x300>
    5ce8:	65 c0       	rjmp	.+202    	; 0x5db4 <__vector_24+0x12e>
    5cea:	88 31       	cpi	r24, 0x18	; 24
    5cec:	91 05       	cpc	r25, r1
    5cee:	09 f4       	brne	.+2      	; 0x5cf2 <__vector_24+0x6c>
    5cf0:	66 c0       	rjmp	.+204    	; 0x5dbe <__vector_24+0x138>
    5cf2:	80 97       	sbiw	r24, 0x20	; 32
    5cf4:	09 f0       	breq	.+2      	; 0x5cf8 <__vector_24+0x72>
    5cf6:	47 c1       	rjmp	.+654    	; 0x5f86 <__vector_24+0x300>
    5cf8:	82 c0       	rjmp	.+260    	; 0x5dfe <__vector_24+0x178>
    5cfa:	80 34       	cpi	r24, 0x40	; 64
    5cfc:	91 05       	cpc	r25, r1
    5cfe:	09 f4       	brne	.+2      	; 0x5d02 <__vector_24+0x7c>
    5d00:	a4 c0       	rjmp	.+328    	; 0x5e4a <__vector_24+0x1c4>
    5d02:	81 34       	cpi	r24, 0x41	; 65
    5d04:	91 05       	cpc	r25, r1
    5d06:	44 f4       	brge	.+16     	; 0x5d18 <__vector_24+0x92>
    5d08:	80 33       	cpi	r24, 0x30	; 48
    5d0a:	91 05       	cpc	r25, r1
    5d0c:	09 f4       	brne	.+2      	; 0x5d10 <__vector_24+0x8a>
    5d0e:	82 c0       	rjmp	.+260    	; 0x5e14 <__vector_24+0x18e>
    5d10:	c8 97       	sbiw	r24, 0x38	; 56
    5d12:	09 f0       	breq	.+2      	; 0x5d16 <__vector_24+0x90>
    5d14:	38 c1       	rjmp	.+624    	; 0x5f86 <__vector_24+0x300>
    5d16:	89 c0       	rjmp	.+274    	; 0x5e2a <__vector_24+0x1a4>
    5d18:	80 35       	cpi	r24, 0x50	; 80
    5d1a:	91 05       	cpc	r25, r1
    5d1c:	09 f4       	brne	.+2      	; 0x5d20 <__vector_24+0x9a>
    5d1e:	89 c0       	rjmp	.+274    	; 0x5e32 <__vector_24+0x1ac>
    5d20:	88 35       	cpi	r24, 0x58	; 88
    5d22:	91 05       	cpc	r25, r1
    5d24:	09 f4       	brne	.+2      	; 0x5d28 <__vector_24+0xa2>
    5d26:	96 c0       	rjmp	.+300    	; 0x5e54 <__vector_24+0x1ce>
    5d28:	88 34       	cpi	r24, 0x48	; 72
    5d2a:	91 05       	cpc	r25, r1
    5d2c:	09 f0       	breq	.+2      	; 0x5d30 <__vector_24+0xaa>
    5d2e:	2b c1       	rjmp	.+598    	; 0x5f86 <__vector_24+0x300>
    5d30:	ae c0       	rjmp	.+348    	; 0x5e8e <__vector_24+0x208>
    5d32:	88 39       	cpi	r24, 0x98	; 152
    5d34:	91 05       	cpc	r25, r1
    5d36:	09 f4       	brne	.+2      	; 0x5d3a <__vector_24+0xb4>
    5d38:	13 c1       	rjmp	.+550    	; 0x5f60 <__vector_24+0x2da>
    5d3a:	89 39       	cpi	r24, 0x99	; 153
    5d3c:	91 05       	cpc	r25, r1
    5d3e:	ec f4       	brge	.+58     	; 0x5d7a <__vector_24+0xf4>
    5d40:	88 37       	cpi	r24, 0x78	; 120
    5d42:	91 05       	cpc	r25, r1
    5d44:	09 f4       	brne	.+2      	; 0x5d48 <__vector_24+0xc2>
    5d46:	ab c0       	rjmp	.+342    	; 0x5e9e <__vector_24+0x218>
    5d48:	89 37       	cpi	r24, 0x79	; 121
    5d4a:	91 05       	cpc	r25, r1
    5d4c:	4c f4       	brge	.+18     	; 0x5d60 <__vector_24+0xda>
    5d4e:	88 36       	cpi	r24, 0x68	; 104
    5d50:	91 05       	cpc	r25, r1
    5d52:	09 f4       	brne	.+2      	; 0x5d56 <__vector_24+0xd0>
    5d54:	a4 c0       	rjmp	.+328    	; 0x5e9e <__vector_24+0x218>
    5d56:	80 37       	cpi	r24, 0x70	; 112
    5d58:	91 05       	cpc	r25, r1
    5d5a:	09 f0       	breq	.+2      	; 0x5d5e <__vector_24+0xd8>
    5d5c:	14 c1       	rjmp	.+552    	; 0x5f86 <__vector_24+0x300>
    5d5e:	9f c0       	rjmp	.+318    	; 0x5e9e <__vector_24+0x218>
    5d60:	88 38       	cpi	r24, 0x88	; 136
    5d62:	91 05       	cpc	r25, r1
    5d64:	09 f4       	brne	.+2      	; 0x5d68 <__vector_24+0xe2>
    5d66:	fc c0       	rjmp	.+504    	; 0x5f60 <__vector_24+0x2da>
    5d68:	80 39       	cpi	r24, 0x90	; 144
    5d6a:	91 05       	cpc	r25, r1
    5d6c:	09 f4       	brne	.+2      	; 0x5d70 <__vector_24+0xea>
    5d6e:	9d c0       	rjmp	.+314    	; 0x5eaa <__vector_24+0x224>
    5d70:	80 38       	cpi	r24, 0x80	; 128
    5d72:	91 05       	cpc	r25, r1
    5d74:	09 f0       	breq	.+2      	; 0x5d78 <__vector_24+0xf2>
    5d76:	07 c1       	rjmp	.+526    	; 0x5f86 <__vector_24+0x300>
    5d78:	98 c0       	rjmp	.+304    	; 0x5eaa <__vector_24+0x224>
    5d7a:	80 3b       	cpi	r24, 0xB0	; 176
    5d7c:	91 05       	cpc	r25, r1
    5d7e:	09 f4       	brne	.+2      	; 0x5d82 <__vector_24+0xfc>
    5d80:	c6 c0       	rjmp	.+396    	; 0x5f0e <__vector_24+0x288>
    5d82:	81 3b       	cpi	r24, 0xB1	; 177
    5d84:	91 05       	cpc	r25, r1
    5d86:	4c f4       	brge	.+18     	; 0x5d9a <__vector_24+0x114>
    5d88:	80 3a       	cpi	r24, 0xA0	; 160
    5d8a:	91 05       	cpc	r25, r1
    5d8c:	09 f4       	brne	.+2      	; 0x5d90 <__vector_24+0x10a>
    5d8e:	9f c0       	rjmp	.+318    	; 0x5ece <__vector_24+0x248>
    5d90:	88 3a       	cpi	r24, 0xA8	; 168
    5d92:	91 05       	cpc	r25, r1
    5d94:	09 f0       	breq	.+2      	; 0x5d98 <__vector_24+0x112>
    5d96:	f7 c0       	rjmp	.+494    	; 0x5f86 <__vector_24+0x300>
    5d98:	ba c0       	rjmp	.+372    	; 0x5f0e <__vector_24+0x288>
    5d9a:	80 3c       	cpi	r24, 0xC0	; 192
    5d9c:	91 05       	cpc	r25, r1
    5d9e:	09 f4       	brne	.+2      	; 0x5da2 <__vector_24+0x11c>
    5da0:	e3 c0       	rjmp	.+454    	; 0x5f68 <__vector_24+0x2e2>
    5da2:	88 3c       	cpi	r24, 0xC8	; 200
    5da4:	91 05       	cpc	r25, r1
    5da6:	09 f4       	brne	.+2      	; 0x5daa <__vector_24+0x124>
    5da8:	df c0       	rjmp	.+446    	; 0x5f68 <__vector_24+0x2e2>
    5daa:	88 3b       	cpi	r24, 0xB8	; 184
    5dac:	91 05       	cpc	r25, r1
    5dae:	09 f0       	breq	.+2      	; 0x5db2 <__vector_24+0x12c>
    5db0:	ea c0       	rjmp	.+468    	; 0x5f86 <__vector_24+0x300>
    5db2:	c2 c0       	rjmp	.+388    	; 0x5f38 <__vector_24+0x2b2>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    5db4:	80 91 c0 03 	lds	r24, 0x03C0
    5db8:	80 93 bb 00 	sts	0x00BB, r24
    5dbc:	cf c0       	rjmp	.+414    	; 0x5f5c <__vector_24+0x2d6>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    5dbe:	90 91 e7 03 	lds	r25, 0x03E7
    5dc2:	80 91 e8 03 	lds	r24, 0x03E8
    5dc6:	98 17       	cp	r25, r24
    5dc8:	68 f4       	brcc	.+26     	; 0x5de4 <__vector_24+0x15e>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    5dca:	90 91 e7 03 	lds	r25, 0x03E7
    5dce:	e9 2f       	mov	r30, r25
    5dd0:	f0 e0       	ldi	r31, 0x00	; 0
    5dd2:	e9 53       	subi	r30, 0x39	; 57
    5dd4:	fc 4f       	sbci	r31, 0xFC	; 252
    5dd6:	80 81       	ld	r24, Z
    5dd8:	80 93 bb 00 	sts	0x00BB, r24
    5ddc:	9f 5f       	subi	r25, 0xFF	; 255
    5dde:	90 93 e7 03 	sts	0x03E7, r25
    5de2:	bc c0       	rjmp	.+376    	; 0x5f5c <__vector_24+0x2d6>
        twi_reply(1);
      }else{
	if (twi_sendStop)
    5de4:	80 91 c1 03 	lds	r24, 0x03C1
    5de8:	88 23       	and	r24, r24
    5dea:	09 f4       	brne	.+2      	; 0x5dee <__vector_24+0x168>
    5dec:	4b c0       	rjmp	.+150    	; 0x5e84 <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    5dee:	85 ed       	ldi	r24, 0xD5	; 213
    5df0:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    5df4:	80 91 bc 00 	lds	r24, 0x00BC
    5df8:	84 fd       	sbrc	r24, 4
    5dfa:	fc cf       	rjmp	.-8      	; 0x5df4 <__vector_24+0x16e>
    5dfc:	c2 c0       	rjmp	.+388    	; 0x5f82 <__vector_24+0x2fc>
	  twi_state = TWI_READY;
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    5dfe:	80 e2       	ldi	r24, 0x20	; 32
    5e00:	80 93 2c 04 	sts	0x042C, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    5e04:	85 ed       	ldi	r24, 0xD5	; 213
    5e06:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    5e0a:	80 91 bc 00 	lds	r24, 0x00BC
    5e0e:	84 fd       	sbrc	r24, 4
    5e10:	fc cf       	rjmp	.-8      	; 0x5e0a <__vector_24+0x184>
    5e12:	b7 c0       	rjmp	.+366    	; 0x5f82 <__vector_24+0x2fc>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    5e14:	80 e3       	ldi	r24, 0x30	; 48
    5e16:	80 93 2c 04 	sts	0x042C, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    5e1a:	85 ed       	ldi	r24, 0xD5	; 213
    5e1c:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    5e20:	80 91 bc 00 	lds	r24, 0x00BC
    5e24:	84 fd       	sbrc	r24, 4
    5e26:	fc cf       	rjmp	.-8      	; 0x5e20 <__vector_24+0x19a>
    5e28:	ac c0       	rjmp	.+344    	; 0x5f82 <__vector_24+0x2fc>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    5e2a:	88 e3       	ldi	r24, 0x38	; 56
    5e2c:	80 93 2c 04 	sts	0x042C, r24
    5e30:	9b c0       	rjmp	.+310    	; 0x5f68 <__vector_24+0x2e2>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    5e32:	80 91 e7 03 	lds	r24, 0x03E7
    5e36:	90 91 bb 00 	lds	r25, 0x00BB
    5e3a:	e8 2f       	mov	r30, r24
    5e3c:	f0 e0       	ldi	r31, 0x00	; 0
    5e3e:	e9 53       	subi	r30, 0x39	; 57
    5e40:	fc 4f       	sbci	r31, 0xFC	; 252
    5e42:	90 83       	st	Z, r25
    5e44:	8f 5f       	subi	r24, 0xFF	; 255
    5e46:	80 93 e7 03 	sts	0x03E7, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    5e4a:	90 91 e7 03 	lds	r25, 0x03E7
    5e4e:	80 91 e8 03 	lds	r24, 0x03E8
    5e52:	82 c0       	rjmp	.+260    	; 0x5f58 <__vector_24+0x2d2>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    5e54:	80 91 e7 03 	lds	r24, 0x03E7
    5e58:	90 91 bb 00 	lds	r25, 0x00BB
    5e5c:	e8 2f       	mov	r30, r24
    5e5e:	f0 e0       	ldi	r31, 0x00	; 0
    5e60:	e9 53       	subi	r30, 0x39	; 57
    5e62:	fc 4f       	sbci	r31, 0xFC	; 252
    5e64:	90 83       	st	Z, r25
    5e66:	8f 5f       	subi	r24, 0xFF	; 255
    5e68:	80 93 e7 03 	sts	0x03E7, r24
	if (twi_sendStop)
    5e6c:	80 91 c1 03 	lds	r24, 0x03C1
    5e70:	88 23       	and	r24, r24
    5e72:	41 f0       	breq	.+16     	; 0x5e84 <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    5e74:	85 ed       	ldi	r24, 0xD5	; 213
    5e76:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    5e7a:	80 91 bc 00 	lds	r24, 0x00BC
    5e7e:	84 fd       	sbrc	r24, 4
    5e80:	fc cf       	rjmp	.-8      	; 0x5e7a <__vector_24+0x1f4>
    5e82:	7f c0       	rjmp	.+254    	; 0x5f82 <__vector_24+0x2fc>
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    5e84:	81 e0       	ldi	r24, 0x01	; 1
    5e86:	80 93 c2 03 	sts	0x03C2, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    5e8a:	84 ea       	ldi	r24, 0xA4	; 164
    5e8c:	6e c0       	rjmp	.+220    	; 0x5f6a <__vector_24+0x2e4>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    5e8e:	85 ed       	ldi	r24, 0xD5	; 213
    5e90:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    5e94:	80 91 bc 00 	lds	r24, 0x00BC
    5e98:	84 fd       	sbrc	r24, 4
    5e9a:	fc cf       	rjmp	.-8      	; 0x5e94 <__vector_24+0x20e>
    5e9c:	72 c0       	rjmp	.+228    	; 0x5f82 <__vector_24+0x2fc>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    5e9e:	83 e0       	ldi	r24, 0x03	; 3
    5ea0:	80 93 bf 03 	sts	0x03BF, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    5ea4:	10 92 2b 04 	sts	0x042B, r1
    5ea8:	59 c0       	rjmp	.+178    	; 0x5f5c <__vector_24+0x2d6>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    5eaa:	80 91 2b 04 	lds	r24, 0x042B
    5eae:	80 32       	cpi	r24, 0x20	; 32
    5eb0:	08 f0       	brcs	.+2      	; 0x5eb4 <__vector_24+0x22e>
    5eb2:	56 c0       	rjmp	.+172    	; 0x5f60 <__vector_24+0x2da>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    5eb4:	80 91 2b 04 	lds	r24, 0x042B
    5eb8:	90 91 bb 00 	lds	r25, 0x00BB
    5ebc:	e8 2f       	mov	r30, r24
    5ebe:	f0 e0       	ldi	r31, 0x00	; 0
    5ec0:	e5 5f       	subi	r30, 0xF5	; 245
    5ec2:	fb 4f       	sbci	r31, 0xFB	; 251
    5ec4:	90 83       	st	Z, r25
    5ec6:	8f 5f       	subi	r24, 0xFF	; 255
    5ec8:	80 93 2b 04 	sts	0x042B, r24
    5ecc:	47 c0       	rjmp	.+142    	; 0x5f5c <__vector_24+0x2d6>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    5ece:	80 91 2b 04 	lds	r24, 0x042B
    5ed2:	80 32       	cpi	r24, 0x20	; 32
    5ed4:	30 f4       	brcc	.+12     	; 0x5ee2 <__vector_24+0x25c>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    5ed6:	e0 91 2b 04 	lds	r30, 0x042B
    5eda:	f0 e0       	ldi	r31, 0x00	; 0
    5edc:	e5 5f       	subi	r30, 0xF5	; 245
    5ede:	fb 4f       	sbci	r31, 0xFB	; 251
    5ee0:	10 82       	st	Z, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    5ee2:	85 ed       	ldi	r24, 0xD5	; 213
    5ee4:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    5ee8:	80 91 bc 00 	lds	r24, 0x00BC
    5eec:	84 fd       	sbrc	r24, 4
    5eee:	fc cf       	rjmp	.-8      	; 0x5ee8 <__vector_24+0x262>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    5ef0:	10 92 bf 03 	sts	0x03BF, r1
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    5ef4:	60 91 2b 04 	lds	r22, 0x042B
    5ef8:	e0 91 c5 03 	lds	r30, 0x03C5
    5efc:	f0 91 c6 03 	lds	r31, 0x03C6
    5f00:	8b e0       	ldi	r24, 0x0B	; 11
    5f02:	94 e0       	ldi	r25, 0x04	; 4
    5f04:	70 e0       	ldi	r23, 0x00	; 0
    5f06:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    5f08:	10 92 2b 04 	sts	0x042B, r1
    5f0c:	2d c0       	rjmp	.+90     	; 0x5f68 <__vector_24+0x2e2>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    5f0e:	84 e0       	ldi	r24, 0x04	; 4
    5f10:	80 93 bf 03 	sts	0x03BF, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    5f14:	10 92 09 04 	sts	0x0409, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    5f18:	10 92 0a 04 	sts	0x040A, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    5f1c:	e0 91 c3 03 	lds	r30, 0x03C3
    5f20:	f0 91 c4 03 	lds	r31, 0x03C4
    5f24:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    5f26:	80 91 0a 04 	lds	r24, 0x040A
    5f2a:	88 23       	and	r24, r24
    5f2c:	29 f4       	brne	.+10     	; 0x5f38 <__vector_24+0x2b2>
        twi_txBufferLength = 1;
    5f2e:	81 e0       	ldi	r24, 0x01	; 1
    5f30:	80 93 0a 04 	sts	0x040A, r24
        twi_txBuffer[0] = 0x00;
    5f34:	10 92 e9 03 	sts	0x03E9, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    5f38:	90 91 09 04 	lds	r25, 0x0409
    5f3c:	e9 2f       	mov	r30, r25
    5f3e:	f0 e0       	ldi	r31, 0x00	; 0
    5f40:	e7 51       	subi	r30, 0x17	; 23
    5f42:	fc 4f       	sbci	r31, 0xFC	; 252
    5f44:	80 81       	ld	r24, Z
    5f46:	80 93 bb 00 	sts	0x00BB, r24
    5f4a:	9f 5f       	subi	r25, 0xFF	; 255
    5f4c:	90 93 09 04 	sts	0x0409, r25
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    5f50:	90 91 09 04 	lds	r25, 0x0409
    5f54:	80 91 0a 04 	lds	r24, 0x040A
    5f58:	98 17       	cp	r25, r24
    5f5a:	10 f4       	brcc	.+4      	; 0x5f60 <__vector_24+0x2da>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5f5c:	85 ec       	ldi	r24, 0xC5	; 197
    5f5e:	01 c0       	rjmp	.+2      	; 0x5f62 <__vector_24+0x2dc>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    5f60:	85 e8       	ldi	r24, 0x85	; 133
    5f62:	80 93 bc 00 	sts	0x00BC, r24
    5f66:	0f c0       	rjmp	.+30     	; 0x5f86 <__vector_24+0x300>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5f68:	85 ec       	ldi	r24, 0xC5	; 197
    5f6a:	80 93 bc 00 	sts	0x00BC, r24
    5f6e:	09 c0       	rjmp	.+18     	; 0x5f82 <__vector_24+0x2fc>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    5f70:	10 92 2c 04 	sts	0x042C, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    5f74:	85 ed       	ldi	r24, 0xD5	; 213
    5f76:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    5f7a:	80 91 bc 00 	lds	r24, 0x00BC
    5f7e:	84 fd       	sbrc	r24, 4
    5f80:	fc cf       	rjmp	.-8      	; 0x5f7a <__vector_24+0x2f4>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    5f82:	10 92 bf 03 	sts	0x03BF, r1
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    5f86:	ff 91       	pop	r31
    5f88:	ef 91       	pop	r30
    5f8a:	bf 91       	pop	r27
    5f8c:	af 91       	pop	r26
    5f8e:	9f 91       	pop	r25
    5f90:	8f 91       	pop	r24
    5f92:	7f 91       	pop	r23
    5f94:	6f 91       	pop	r22
    5f96:	5f 91       	pop	r21
    5f98:	4f 91       	pop	r20
    5f9a:	3f 91       	pop	r19
    5f9c:	2f 91       	pop	r18
    5f9e:	0f 90       	pop	r0
    5fa0:	0f be       	out	0x3f, r0	; 63
    5fa2:	0f 90       	pop	r0
    5fa4:	1f 90       	pop	r1
    5fa6:	18 95       	reti

00005fa8 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    5fa8:	cf 93       	push	r28
    5faa:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    5fac:	48 2f       	mov	r20, r24
    5fae:	50 e0       	ldi	r21, 0x00	; 0
    5fb0:	ca 01       	movw	r24, r20
    5fb2:	8f 54       	subi	r24, 0x4F	; 79
    5fb4:	9b 4f       	sbci	r25, 0xFB	; 251
    5fb6:	fc 01       	movw	r30, r24
    5fb8:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
    5fba:	43 56       	subi	r20, 0x63	; 99
    5fbc:	5b 4f       	sbci	r21, 0xFB	; 251
    5fbe:	fa 01       	movw	r30, r20
    5fc0:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    5fc2:	88 23       	and	r24, r24
    5fc4:	69 f1       	breq	.+90     	; 0x6020 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    5fc6:	90 e0       	ldi	r25, 0x00	; 0
    5fc8:	88 0f       	add	r24, r24
    5fca:	99 1f       	adc	r25, r25
    5fcc:	fc 01       	movw	r30, r24
    5fce:	e1 58       	subi	r30, 0x81	; 129
    5fd0:	fb 4f       	sbci	r31, 0xFB	; 251
    5fd2:	a5 91       	lpm	r26, Z+
    5fd4:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
    5fd6:	fc 01       	movw	r30, r24
    5fd8:	e7 57       	subi	r30, 0x77	; 119
    5fda:	fb 4f       	sbci	r31, 0xFB	; 251
    5fdc:	c5 91       	lpm	r28, Z+
    5fde:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
    5fe0:	66 23       	and	r22, r22
    5fe2:	51 f4       	brne	.+20     	; 0x5ff8 <pinMode+0x50>
		uint8_t oldSREG = SREG;
    5fe4:	2f b7       	in	r18, 0x3f	; 63
                cli();
    5fe6:	f8 94       	cli
		*reg &= ~bit;
    5fe8:	8c 91       	ld	r24, X
    5fea:	93 2f       	mov	r25, r19
    5fec:	90 95       	com	r25
    5fee:	89 23       	and	r24, r25
    5ff0:	8c 93       	st	X, r24
		*out &= ~bit;
    5ff2:	88 81       	ld	r24, Y
    5ff4:	89 23       	and	r24, r25
    5ff6:	0b c0       	rjmp	.+22     	; 0x600e <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    5ff8:	62 30       	cpi	r22, 0x02	; 2
    5ffa:	61 f4       	brne	.+24     	; 0x6014 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    5ffc:	2f b7       	in	r18, 0x3f	; 63
                cli();
    5ffe:	f8 94       	cli
		*reg &= ~bit;
    6000:	8c 91       	ld	r24, X
    6002:	93 2f       	mov	r25, r19
    6004:	90 95       	com	r25
    6006:	89 23       	and	r24, r25
    6008:	8c 93       	st	X, r24
		*out |= bit;
    600a:	88 81       	ld	r24, Y
    600c:	83 2b       	or	r24, r19
    600e:	88 83       	st	Y, r24
		SREG = oldSREG;
    6010:	2f bf       	out	0x3f, r18	; 63
    6012:	06 c0       	rjmp	.+12     	; 0x6020 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    6014:	9f b7       	in	r25, 0x3f	; 63
                cli();
    6016:	f8 94       	cli
		*reg |= bit;
    6018:	8c 91       	ld	r24, X
    601a:	83 2b       	or	r24, r19
    601c:	8c 93       	st	X, r24
		SREG = oldSREG;
    601e:	9f bf       	out	0x3f, r25	; 63
	}
}
    6020:	df 91       	pop	r29
    6022:	cf 91       	pop	r28
    6024:	08 95       	ret

00006026 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    6026:	48 2f       	mov	r20, r24
    6028:	50 e0       	ldi	r21, 0x00	; 0
    602a:	ca 01       	movw	r24, r20
    602c:	8b 53       	subi	r24, 0x3B	; 59
    602e:	9b 4f       	sbci	r25, 0xFB	; 251
    6030:	fc 01       	movw	r30, r24
    6032:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    6034:	ca 01       	movw	r24, r20
    6036:	8f 54       	subi	r24, 0x4F	; 79
    6038:	9b 4f       	sbci	r25, 0xFB	; 251
    603a:	fc 01       	movw	r30, r24
    603c:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    603e:	43 56       	subi	r20, 0x63	; 99
    6040:	5b 4f       	sbci	r21, 0xFB	; 251
    6042:	fa 01       	movw	r30, r20
    6044:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    6046:	33 23       	and	r19, r19
    6048:	09 f4       	brne	.+2      	; 0x604c <digitalWrite+0x26>
    604a:	40 c0       	rjmp	.+128    	; 0x60cc <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    604c:	22 23       	and	r18, r18
    604e:	51 f1       	breq	.+84     	; 0x60a4 <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    6050:	23 30       	cpi	r18, 0x03	; 3
    6052:	71 f0       	breq	.+28     	; 0x6070 <digitalWrite+0x4a>
    6054:	24 30       	cpi	r18, 0x04	; 4
    6056:	28 f4       	brcc	.+10     	; 0x6062 <digitalWrite+0x3c>
    6058:	21 30       	cpi	r18, 0x01	; 1
    605a:	a1 f0       	breq	.+40     	; 0x6084 <digitalWrite+0x5e>
    605c:	22 30       	cpi	r18, 0x02	; 2
    605e:	11 f5       	brne	.+68     	; 0x60a4 <digitalWrite+0x7e>
    6060:	14 c0       	rjmp	.+40     	; 0x608a <digitalWrite+0x64>
    6062:	26 30       	cpi	r18, 0x06	; 6
    6064:	b1 f0       	breq	.+44     	; 0x6092 <digitalWrite+0x6c>
    6066:	27 30       	cpi	r18, 0x07	; 7
    6068:	c1 f0       	breq	.+48     	; 0x609a <digitalWrite+0x74>
    606a:	24 30       	cpi	r18, 0x04	; 4
    606c:	d9 f4       	brne	.+54     	; 0x60a4 <digitalWrite+0x7e>
    606e:	04 c0       	rjmp	.+8      	; 0x6078 <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    6070:	80 91 80 00 	lds	r24, 0x0080
    6074:	8f 77       	andi	r24, 0x7F	; 127
    6076:	03 c0       	rjmp	.+6      	; 0x607e <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    6078:	80 91 80 00 	lds	r24, 0x0080
    607c:	8f 7d       	andi	r24, 0xDF	; 223
    607e:	80 93 80 00 	sts	0x0080, r24
    6082:	10 c0       	rjmp	.+32     	; 0x60a4 <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    6084:	84 b5       	in	r24, 0x24	; 36
    6086:	8f 77       	andi	r24, 0x7F	; 127
    6088:	02 c0       	rjmp	.+4      	; 0x608e <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    608a:	84 b5       	in	r24, 0x24	; 36
    608c:	8f 7d       	andi	r24, 0xDF	; 223
    608e:	84 bd       	out	0x24, r24	; 36
    6090:	09 c0       	rjmp	.+18     	; 0x60a4 <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    6092:	80 91 b0 00 	lds	r24, 0x00B0
    6096:	8f 77       	andi	r24, 0x7F	; 127
    6098:	03 c0       	rjmp	.+6      	; 0x60a0 <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    609a:	80 91 b0 00 	lds	r24, 0x00B0
    609e:	8f 7d       	andi	r24, 0xDF	; 223
    60a0:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    60a4:	e3 2f       	mov	r30, r19
    60a6:	f0 e0       	ldi	r31, 0x00	; 0
    60a8:	ee 0f       	add	r30, r30
    60aa:	ff 1f       	adc	r31, r31
    60ac:	e7 57       	subi	r30, 0x77	; 119
    60ae:	fb 4f       	sbci	r31, 0xFB	; 251
    60b0:	a5 91       	lpm	r26, Z+
    60b2:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    60b4:	2f b7       	in	r18, 0x3f	; 63
	cli();
    60b6:	f8 94       	cli

	if (val == LOW) {
    60b8:	66 23       	and	r22, r22
    60ba:	21 f4       	brne	.+8      	; 0x60c4 <digitalWrite+0x9e>
		*out &= ~bit;
    60bc:	8c 91       	ld	r24, X
    60be:	90 95       	com	r25
    60c0:	89 23       	and	r24, r25
    60c2:	02 c0       	rjmp	.+4      	; 0x60c8 <digitalWrite+0xa2>
	} else {
		*out |= bit;
    60c4:	8c 91       	ld	r24, X
    60c6:	89 2b       	or	r24, r25
    60c8:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    60ca:	2f bf       	out	0x3f, r18	; 63
    60cc:	08 95       	ret

000060ce <serialEvent()>:
#if !defined(USART_RX_vect) && !defined(USART0_RX_vect) && \
    !defined(USART_RXC_vect)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    60ce:	08 95       	ret

000060d0 <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  ISR(USART_RX_vect)
    60d0:	1f 92       	push	r1
    60d2:	0f 92       	push	r0
    60d4:	0f b6       	in	r0, 0x3f	; 63
    60d6:	0f 92       	push	r0
    60d8:	11 24       	eor	r1, r1
    60da:	2f 93       	push	r18
    60dc:	3f 93       	push	r19
    60de:	4f 93       	push	r20
    60e0:	8f 93       	push	r24
    60e2:	9f 93       	push	r25
    60e4:	ef 93       	push	r30
    60e6:	ff 93       	push	r31
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#endif
  {
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
    60e8:	80 91 c0 00 	lds	r24, 0x00C0
    60ec:	82 fd       	sbrc	r24, 2
    60ee:	1d c0       	rjmp	.+58     	; 0x612a <__vector_18+0x5a>
      unsigned char c = UDR0;
    60f0:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    60f4:	20 91 6d 04 	lds	r18, 0x046D
    60f8:	30 91 6e 04 	lds	r19, 0x046E

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    60fc:	2f 5f       	subi	r18, 0xFF	; 255
    60fe:	3f 4f       	sbci	r19, 0xFF	; 255
    6100:	2f 73       	andi	r18, 0x3F	; 63
    6102:	30 70       	andi	r19, 0x00	; 0
    6104:	80 91 6f 04 	lds	r24, 0x046F
    6108:	90 91 70 04 	lds	r25, 0x0470
    610c:	28 17       	cp	r18, r24
    610e:	39 07       	cpc	r19, r25
    6110:	71 f0       	breq	.+28     	; 0x612e <__vector_18+0x5e>
    buffer->buffer[buffer->head] = c;
    6112:	e0 91 6d 04 	lds	r30, 0x046D
    6116:	f0 91 6e 04 	lds	r31, 0x046E
    611a:	e3 5d       	subi	r30, 0xD3	; 211
    611c:	fb 4f       	sbci	r31, 0xFB	; 251
    611e:	40 83       	st	Z, r20
    buffer->head = i;
    6120:	30 93 6e 04 	sts	0x046E, r19
    6124:	20 93 6d 04 	sts	0x046D, r18
    6128:	02 c0       	rjmp	.+4      	; 0x612e <__vector_18+0x5e>
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
      unsigned char c = UDR0;
      store_char(c, &rx_buffer);
    } else {
      unsigned char c = UDR0;
    612a:	80 91 c6 00 	lds	r24, 0x00C6
      unsigned char c = UDR;
    };
  #else
    #error UDR not defined
  #endif
  }
    612e:	ff 91       	pop	r31
    6130:	ef 91       	pop	r30
    6132:	9f 91       	pop	r25
    6134:	8f 91       	pop	r24
    6136:	4f 91       	pop	r20
    6138:	3f 91       	pop	r19
    613a:	2f 91       	pop	r18
    613c:	0f 90       	pop	r0
    613e:	0f be       	out	0x3f, r0	; 63
    6140:	0f 90       	pop	r0
    6142:	1f 90       	pop	r1
    6144:	18 95       	reti

00006146 <serialEventRun()>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    6146:	e0 91 c1 04 	lds	r30, 0x04C1
    614a:	f0 91 c2 04 	lds	r31, 0x04C2
    614e:	e0 5c       	subi	r30, 0xC0	; 192
    6150:	ff 4f       	sbci	r31, 0xFF	; 255
    6152:	81 91       	ld	r24, Z+
    6154:	91 91       	ld	r25, Z+
    6156:	20 81       	ld	r18, Z
    6158:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    615a:	82 1b       	sub	r24, r18
    615c:	93 0b       	sbc	r25, r19
    615e:	8f 73       	andi	r24, 0x3F	; 63
    6160:	90 70       	andi	r25, 0x00	; 0
    6162:	89 2b       	or	r24, r25
    6164:	11 f0       	breq	.+4      	; 0x616a <serialEventRun()+0x24>
    6166:	0e 94 67 30 	call	0x60ce	; 0x60ce <serialEvent()>
    616a:	08 95       	ret

0000616c <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
    616c:	1f 92       	push	r1
    616e:	0f 92       	push	r0
    6170:	0f b6       	in	r0, 0x3f	; 63
    6172:	0f 92       	push	r0
    6174:	11 24       	eor	r1, r1
    6176:	2f 93       	push	r18
    6178:	3f 93       	push	r19
    617a:	8f 93       	push	r24
    617c:	9f 93       	push	r25
    617e:	ef 93       	push	r30
    6180:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    6182:	20 91 b1 04 	lds	r18, 0x04B1
    6186:	30 91 b2 04 	lds	r19, 0x04B2
    618a:	80 91 b3 04 	lds	r24, 0x04B3
    618e:	90 91 b4 04 	lds	r25, 0x04B4
    6192:	28 17       	cp	r18, r24
    6194:	39 07       	cpc	r19, r25
    6196:	31 f4       	brne	.+12     	; 0x61a4 <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    6198:	80 91 c1 00 	lds	r24, 0x00C1
    619c:	8f 7d       	andi	r24, 0xDF	; 223
    619e:	80 93 c1 00 	sts	0x00C1, r24
    61a2:	14 c0       	rjmp	.+40     	; 0x61cc <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    61a4:	e0 91 b3 04 	lds	r30, 0x04B3
    61a8:	f0 91 b4 04 	lds	r31, 0x04B4
    61ac:	ef 58       	subi	r30, 0x8F	; 143
    61ae:	fb 4f       	sbci	r31, 0xFB	; 251
    61b0:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    61b2:	80 91 b3 04 	lds	r24, 0x04B3
    61b6:	90 91 b4 04 	lds	r25, 0x04B4
    61ba:	01 96       	adiw	r24, 0x01	; 1
    61bc:	8f 73       	andi	r24, 0x3F	; 63
    61be:	90 70       	andi	r25, 0x00	; 0
    61c0:	90 93 b4 04 	sts	0x04B4, r25
    61c4:	80 93 b3 04 	sts	0x04B3, r24
	
  #if defined(UDR0)
    UDR0 = c;
    61c8:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    61cc:	ff 91       	pop	r31
    61ce:	ef 91       	pop	r30
    61d0:	9f 91       	pop	r25
    61d2:	8f 91       	pop	r24
    61d4:	3f 91       	pop	r19
    61d6:	2f 91       	pop	r18
    61d8:	0f 90       	pop	r0
    61da:	0f be       	out	0x3f, r0	; 63
    61dc:	0f 90       	pop	r0
    61de:	1f 90       	pop	r1
    61e0:	18 95       	reti

000061e2 <HardwareSerial::begin(unsigned long)>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    61e2:	af 92       	push	r10
    61e4:	bf 92       	push	r11
    61e6:	df 92       	push	r13
    61e8:	ef 92       	push	r14
    61ea:	ff 92       	push	r15
    61ec:	0f 93       	push	r16
    61ee:	1f 93       	push	r17
    61f0:	cf 93       	push	r28
    61f2:	df 93       	push	r29
    61f4:	ec 01       	movw	r28, r24
    61f6:	7a 01       	movw	r14, r20
    61f8:	8b 01       	movw	r16, r22
    61fa:	dd 24       	eor	r13, r13
    61fc:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    61fe:	91 e0       	ldi	r25, 0x01	; 1
    6200:	a9 2e       	mov	r10, r25
    6202:	b1 2c       	mov	r11, r1
    6204:	ec 89       	ldd	r30, Y+20	; 0x14
    6206:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
    6208:	dd 20       	and	r13, r13
    620a:	69 f0       	breq	.+26     	; 0x6226 <HardwareSerial::begin(unsigned long)+0x44>
    *_ucsra = 1 << _u2x;
    620c:	c5 01       	movw	r24, r10
    620e:	08 a0       	ldd	r0, Y+32	; 0x20
    6210:	02 c0       	rjmp	.+4      	; 0x6216 <HardwareSerial::begin(unsigned long)+0x34>
    6212:	88 0f       	add	r24, r24
    6214:	99 1f       	adc	r25, r25
    6216:	0a 94       	dec	r0
    6218:	e2 f7       	brpl	.-8      	; 0x6212 <HardwareSerial::begin(unsigned long)+0x30>
    621a:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    621c:	60 e9       	ldi	r22, 0x90	; 144
    621e:	70 ed       	ldi	r23, 0xD0	; 208
    6220:	83 e0       	ldi	r24, 0x03	; 3
    6222:	90 e0       	ldi	r25, 0x00	; 0
    6224:	05 c0       	rjmp	.+10     	; 0x6230 <HardwareSerial::begin(unsigned long)+0x4e>
  } else {
    *_ucsra = 0;
    6226:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    6228:	68 e4       	ldi	r22, 0x48	; 72
    622a:	78 ee       	ldi	r23, 0xE8	; 232
    622c:	81 e0       	ldi	r24, 0x01	; 1
    622e:	90 e0       	ldi	r25, 0x00	; 0
    6230:	a8 01       	movw	r20, r16
    6232:	97 01       	movw	r18, r14
    6234:	0e 94 55 35 	call	0x6aaa	; 0x6aaa <__udivmodsi4>
    6238:	21 50       	subi	r18, 0x01	; 1
    623a:	30 40       	sbci	r19, 0x00	; 0
    623c:	40 40       	sbci	r20, 0x00	; 0
    623e:	50 40       	sbci	r21, 0x00	; 0
    6240:	56 95       	lsr	r21
    6242:	47 95       	ror	r20
    6244:	37 95       	ror	r19
    6246:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    6248:	80 e1       	ldi	r24, 0x10	; 16
    624a:	20 30       	cpi	r18, 0x00	; 0
    624c:	38 07       	cpc	r19, r24
    624e:	20 f0       	brcs	.+8      	; 0x6258 <HardwareSerial::begin(unsigned long)+0x76>
    6250:	dd 20       	and	r13, r13
    6252:	11 f0       	breq	.+4      	; 0x6258 <HardwareSerial::begin(unsigned long)+0x76>
    6254:	dd 24       	eor	r13, r13
    6256:	d6 cf       	rjmp	.-84     	; 0x6204 <HardwareSerial::begin(unsigned long)+0x22>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    6258:	e8 89       	ldd	r30, Y+16	; 0x10
    625a:	f9 89       	ldd	r31, Y+17	; 0x11
    625c:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    625e:	ea 89       	ldd	r30, Y+18	; 0x12
    6260:	fb 89       	ldd	r31, Y+19	; 0x13
    6262:	20 83       	st	Z, r18

  transmitting = false;
    6264:	19 a2       	std	Y+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
    6266:	ee 89       	ldd	r30, Y+22	; 0x16
    6268:	ff 89       	ldd	r31, Y+23	; 0x17
    626a:	40 81       	ld	r20, Z
    626c:	21 e0       	ldi	r18, 0x01	; 1
    626e:	30 e0       	ldi	r19, 0x00	; 0
    6270:	c9 01       	movw	r24, r18
    6272:	0c 8c       	ldd	r0, Y+28	; 0x1c
    6274:	02 c0       	rjmp	.+4      	; 0x627a <HardwareSerial::begin(unsigned long)+0x98>
    6276:	88 0f       	add	r24, r24
    6278:	99 1f       	adc	r25, r25
    627a:	0a 94       	dec	r0
    627c:	e2 f7       	brpl	.-8      	; 0x6276 <HardwareSerial::begin(unsigned long)+0x94>
    627e:	48 2b       	or	r20, r24
    6280:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    6282:	ee 89       	ldd	r30, Y+22	; 0x16
    6284:	ff 89       	ldd	r31, Y+23	; 0x17
    6286:	40 81       	ld	r20, Z
    6288:	c9 01       	movw	r24, r18
    628a:	0d 8c       	ldd	r0, Y+29	; 0x1d
    628c:	02 c0       	rjmp	.+4      	; 0x6292 <HardwareSerial::begin(unsigned long)+0xb0>
    628e:	88 0f       	add	r24, r24
    6290:	99 1f       	adc	r25, r25
    6292:	0a 94       	dec	r0
    6294:	e2 f7       	brpl	.-8      	; 0x628e <HardwareSerial::begin(unsigned long)+0xac>
    6296:	48 2b       	or	r20, r24
    6298:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    629a:	ee 89       	ldd	r30, Y+22	; 0x16
    629c:	ff 89       	ldd	r31, Y+23	; 0x17
    629e:	40 81       	ld	r20, Z
    62a0:	c9 01       	movw	r24, r18
    62a2:	0e 8c       	ldd	r0, Y+30	; 0x1e
    62a4:	02 c0       	rjmp	.+4      	; 0x62aa <HardwareSerial::begin(unsigned long)+0xc8>
    62a6:	88 0f       	add	r24, r24
    62a8:	99 1f       	adc	r25, r25
    62aa:	0a 94       	dec	r0
    62ac:	e2 f7       	brpl	.-8      	; 0x62a6 <HardwareSerial::begin(unsigned long)+0xc4>
    62ae:	48 2b       	or	r20, r24
    62b0:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    62b2:	ee 89       	ldd	r30, Y+22	; 0x16
    62b4:	ff 89       	ldd	r31, Y+23	; 0x17
    62b6:	80 81       	ld	r24, Z
    62b8:	0f 8c       	ldd	r0, Y+31	; 0x1f
    62ba:	02 c0       	rjmp	.+4      	; 0x62c0 <HardwareSerial::begin(unsigned long)+0xde>
    62bc:	22 0f       	add	r18, r18
    62be:	33 1f       	adc	r19, r19
    62c0:	0a 94       	dec	r0
    62c2:	e2 f7       	brpl	.-8      	; 0x62bc <HardwareSerial::begin(unsigned long)+0xda>
    62c4:	20 95       	com	r18
    62c6:	28 23       	and	r18, r24
    62c8:	20 83       	st	Z, r18
}
    62ca:	df 91       	pop	r29
    62cc:	cf 91       	pop	r28
    62ce:	1f 91       	pop	r17
    62d0:	0f 91       	pop	r16
    62d2:	ff 90       	pop	r15
    62d4:	ef 90       	pop	r14
    62d6:	df 90       	pop	r13
    62d8:	bf 90       	pop	r11
    62da:	af 90       	pop	r10
    62dc:	08 95       	ret

000062de <HardwareSerial::end()>:
  sbi(*_ucsrb, _txen);
  sbi(*_ucsrb, _rxcie);
  cbi(*_ucsrb, _udrie);
}

void HardwareSerial::end()
    62de:	cf 93       	push	r28
    62e0:	df 93       	push	r29
    62e2:	dc 01       	movw	r26, r24
{
  // wait for transmission of outgoing data
  while (_tx_buffer->head != _tx_buffer->tail)
    62e4:	1e 96       	adiw	r26, 0x0e	; 14
    62e6:	8d 91       	ld	r24, X+
    62e8:	9c 91       	ld	r25, X
    62ea:	1f 97       	sbiw	r26, 0x0f	; 15
    62ec:	ec 01       	movw	r28, r24
    62ee:	c0 5c       	subi	r28, 0xC0	; 192
    62f0:	df 4f       	sbci	r29, 0xFF	; 255
    62f2:	fc 01       	movw	r30, r24
    62f4:	ee 5b       	subi	r30, 0xBE	; 190
    62f6:	ff 4f       	sbci	r31, 0xFF	; 255
    62f8:	28 81       	ld	r18, Y
    62fa:	39 81       	ldd	r19, Y+1	; 0x01
    62fc:	80 81       	ld	r24, Z
    62fe:	91 81       	ldd	r25, Z+1	; 0x01
    6300:	28 17       	cp	r18, r24
    6302:	39 07       	cpc	r19, r25
    6304:	c9 f7       	brne	.-14     	; 0x62f8 <HardwareSerial::end()+0x1a>
    ;

  cbi(*_ucsrb, _rxen);
    6306:	56 96       	adiw	r26, 0x16	; 22
    6308:	ed 91       	ld	r30, X+
    630a:	fc 91       	ld	r31, X
    630c:	57 97       	sbiw	r26, 0x17	; 23
    630e:	40 81       	ld	r20, Z
    6310:	21 e0       	ldi	r18, 0x01	; 1
    6312:	30 e0       	ldi	r19, 0x00	; 0
    6314:	c9 01       	movw	r24, r18
    6316:	5c 96       	adiw	r26, 0x1c	; 28
    6318:	0c 90       	ld	r0, X
    631a:	5c 97       	sbiw	r26, 0x1c	; 28
    631c:	02 c0       	rjmp	.+4      	; 0x6322 <HardwareSerial::end()+0x44>
    631e:	88 0f       	add	r24, r24
    6320:	99 1f       	adc	r25, r25
    6322:	0a 94       	dec	r0
    6324:	e2 f7       	brpl	.-8      	; 0x631e <HardwareSerial::end()+0x40>
    6326:	80 95       	com	r24
    6328:	84 23       	and	r24, r20
    632a:	80 83       	st	Z, r24
  cbi(*_ucsrb, _txen);
    632c:	56 96       	adiw	r26, 0x16	; 22
    632e:	ed 91       	ld	r30, X+
    6330:	fc 91       	ld	r31, X
    6332:	57 97       	sbiw	r26, 0x17	; 23
    6334:	40 81       	ld	r20, Z
    6336:	c9 01       	movw	r24, r18
    6338:	5d 96       	adiw	r26, 0x1d	; 29
    633a:	0c 90       	ld	r0, X
    633c:	5d 97       	sbiw	r26, 0x1d	; 29
    633e:	02 c0       	rjmp	.+4      	; 0x6344 <HardwareSerial::end()+0x66>
    6340:	88 0f       	add	r24, r24
    6342:	99 1f       	adc	r25, r25
    6344:	0a 94       	dec	r0
    6346:	e2 f7       	brpl	.-8      	; 0x6340 <HardwareSerial::end()+0x62>
    6348:	80 95       	com	r24
    634a:	84 23       	and	r24, r20
    634c:	80 83       	st	Z, r24
  cbi(*_ucsrb, _rxcie);  
    634e:	56 96       	adiw	r26, 0x16	; 22
    6350:	ed 91       	ld	r30, X+
    6352:	fc 91       	ld	r31, X
    6354:	57 97       	sbiw	r26, 0x17	; 23
    6356:	40 81       	ld	r20, Z
    6358:	c9 01       	movw	r24, r18
    635a:	5e 96       	adiw	r26, 0x1e	; 30
    635c:	0c 90       	ld	r0, X
    635e:	5e 97       	sbiw	r26, 0x1e	; 30
    6360:	02 c0       	rjmp	.+4      	; 0x6366 <HardwareSerial::end()+0x88>
    6362:	88 0f       	add	r24, r24
    6364:	99 1f       	adc	r25, r25
    6366:	0a 94       	dec	r0
    6368:	e2 f7       	brpl	.-8      	; 0x6362 <HardwareSerial::end()+0x84>
    636a:	80 95       	com	r24
    636c:	84 23       	and	r24, r20
    636e:	80 83       	st	Z, r24
  cbi(*_ucsrb, _udrie);
    6370:	56 96       	adiw	r26, 0x16	; 22
    6372:	ed 91       	ld	r30, X+
    6374:	fc 91       	ld	r31, X
    6376:	57 97       	sbiw	r26, 0x17	; 23
    6378:	80 81       	ld	r24, Z
    637a:	5f 96       	adiw	r26, 0x1f	; 31
    637c:	0c 90       	ld	r0, X
    637e:	5f 97       	sbiw	r26, 0x1f	; 31
    6380:	02 c0       	rjmp	.+4      	; 0x6386 <HardwareSerial::end()+0xa8>
    6382:	22 0f       	add	r18, r18
    6384:	33 1f       	adc	r19, r19
    6386:	0a 94       	dec	r0
    6388:	e2 f7       	brpl	.-8      	; 0x6382 <HardwareSerial::end()+0xa4>
    638a:	20 95       	com	r18
    638c:	28 23       	and	r18, r24
    638e:	20 83       	st	Z, r18
  
  // clear any received data
  _rx_buffer->head = _rx_buffer->tail;
    6390:	1c 96       	adiw	r26, 0x0c	; 12
    6392:	ed 91       	ld	r30, X+
    6394:	fc 91       	ld	r31, X
    6396:	1d 97       	sbiw	r26, 0x0d	; 13
    6398:	ee 5b       	subi	r30, 0xBE	; 190
    639a:	ff 4f       	sbci	r31, 0xFF	; 255
    639c:	80 81       	ld	r24, Z
    639e:	91 81       	ldd	r25, Z+1	; 0x01
    63a0:	92 93       	st	-Z, r25
    63a2:	82 93       	st	-Z, r24
}
    63a4:	df 91       	pop	r29
    63a6:	cf 91       	pop	r28
    63a8:	08 95       	ret

000063aa <HardwareSerial::available()>:

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    63aa:	dc 01       	movw	r26, r24
    63ac:	1c 96       	adiw	r26, 0x0c	; 12
    63ae:	ed 91       	ld	r30, X+
    63b0:	fc 91       	ld	r31, X
    63b2:	1d 97       	sbiw	r26, 0x0d	; 13
    63b4:	e0 5c       	subi	r30, 0xC0	; 192
    63b6:	ff 4f       	sbci	r31, 0xFF	; 255
    63b8:	21 91       	ld	r18, Z+
    63ba:	31 91       	ld	r19, Z+
    63bc:	80 81       	ld	r24, Z
    63be:	91 81       	ldd	r25, Z+1	; 0x01
    63c0:	28 1b       	sub	r18, r24
    63c2:	39 0b       	sbc	r19, r25
    63c4:	2f 73       	andi	r18, 0x3F	; 63
    63c6:	30 70       	andi	r19, 0x00	; 0
}
    63c8:	c9 01       	movw	r24, r18
    63ca:	08 95       	ret

000063cc <HardwareSerial::peek()>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    63cc:	dc 01       	movw	r26, r24
    63ce:	1c 96       	adiw	r26, 0x0c	; 12
    63d0:	ed 91       	ld	r30, X+
    63d2:	fc 91       	ld	r31, X
    63d4:	1d 97       	sbiw	r26, 0x0d	; 13
    63d6:	e0 5c       	subi	r30, 0xC0	; 192
    63d8:	ff 4f       	sbci	r31, 0xFF	; 255
    63da:	20 81       	ld	r18, Z
    63dc:	31 81       	ldd	r19, Z+1	; 0x01
    63de:	e0 54       	subi	r30, 0x40	; 64
    63e0:	f0 40       	sbci	r31, 0x00	; 0
    63e2:	df 01       	movw	r26, r30
    63e4:	ae 5b       	subi	r26, 0xBE	; 190
    63e6:	bf 4f       	sbci	r27, 0xFF	; 255
    63e8:	8d 91       	ld	r24, X+
    63ea:	9c 91       	ld	r25, X
    63ec:	11 97       	sbiw	r26, 0x01	; 1
    63ee:	28 17       	cp	r18, r24
    63f0:	39 07       	cpc	r19, r25
    63f2:	19 f4       	brne	.+6      	; 0x63fa <HardwareSerial::peek()+0x2e>
    63f4:	2f ef       	ldi	r18, 0xFF	; 255
    63f6:	3f ef       	ldi	r19, 0xFF	; 255
    63f8:	07 c0       	rjmp	.+14     	; 0x6408 <HardwareSerial::peek()+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    63fa:	8d 91       	ld	r24, X+
    63fc:	9c 91       	ld	r25, X
    63fe:	e8 0f       	add	r30, r24
    6400:	f9 1f       	adc	r31, r25
    6402:	80 81       	ld	r24, Z
    6404:	28 2f       	mov	r18, r24
    6406:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    6408:	c9 01       	movw	r24, r18
    640a:	08 95       	ret

0000640c <HardwareSerial::read()>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    640c:	dc 01       	movw	r26, r24
    640e:	1c 96       	adiw	r26, 0x0c	; 12
    6410:	ed 91       	ld	r30, X+
    6412:	fc 91       	ld	r31, X
    6414:	1d 97       	sbiw	r26, 0x0d	; 13
    6416:	e0 5c       	subi	r30, 0xC0	; 192
    6418:	ff 4f       	sbci	r31, 0xFF	; 255
    641a:	20 81       	ld	r18, Z
    641c:	31 81       	ldd	r19, Z+1	; 0x01
    641e:	e0 54       	subi	r30, 0x40	; 64
    6420:	f0 40       	sbci	r31, 0x00	; 0
    6422:	df 01       	movw	r26, r30
    6424:	ae 5b       	subi	r26, 0xBE	; 190
    6426:	bf 4f       	sbci	r27, 0xFF	; 255
    6428:	8d 91       	ld	r24, X+
    642a:	9c 91       	ld	r25, X
    642c:	11 97       	sbiw	r26, 0x01	; 1
    642e:	28 17       	cp	r18, r24
    6430:	39 07       	cpc	r19, r25
    6432:	19 f4       	brne	.+6      	; 0x643a <HardwareSerial::read()+0x2e>
    6434:	2f ef       	ldi	r18, 0xFF	; 255
    6436:	3f ef       	ldi	r19, 0xFF	; 255
    6438:	10 c0       	rjmp	.+32     	; 0x645a <HardwareSerial::read()+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    643a:	8d 91       	ld	r24, X+
    643c:	9c 91       	ld	r25, X
    643e:	11 97       	sbiw	r26, 0x01	; 1
    6440:	e8 0f       	add	r30, r24
    6442:	f9 1f       	adc	r31, r25
    6444:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    6446:	8d 91       	ld	r24, X+
    6448:	9c 91       	ld	r25, X
    644a:	11 97       	sbiw	r26, 0x01	; 1
    644c:	01 96       	adiw	r24, 0x01	; 1
    644e:	8f 73       	andi	r24, 0x3F	; 63
    6450:	90 70       	andi	r25, 0x00	; 0
    6452:	11 96       	adiw	r26, 0x01	; 1
    6454:	9c 93       	st	X, r25
    6456:	8e 93       	st	-X, r24
    return c;
    6458:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    645a:	c9 01       	movw	r24, r18
    645c:	08 95       	ret

0000645e <HardwareSerial::flush()>:

void HardwareSerial::flush()
    645e:	dc 01       	movw	r26, r24
{
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
    6460:	91 96       	adiw	r26, 0x21	; 33
    6462:	8c 91       	ld	r24, X
    6464:	91 97       	sbiw	r26, 0x21	; 33
    6466:	88 23       	and	r24, r24
    6468:	39 f0       	breq	.+14     	; 0x6478 <HardwareSerial::flush()+0x1a>
    646a:	54 96       	adiw	r26, 0x14	; 20
    646c:	ed 91       	ld	r30, X+
    646e:	fc 91       	ld	r31, X
    6470:	55 97       	sbiw	r26, 0x15	; 21
    6472:	80 81       	ld	r24, Z
    6474:	86 ff       	sbrs	r24, 6
    6476:	f9 cf       	rjmp	.-14     	; 0x646a <HardwareSerial::flush()+0xc>
  transmitting = false;
    6478:	91 96       	adiw	r26, 0x21	; 33
    647a:	1c 92       	st	X, r1
}
    647c:	08 95       	ret

0000647e <HardwareSerial::write(unsigned char)>:

size_t HardwareSerial::write(uint8_t c)
    647e:	cf 93       	push	r28
    6480:	df 93       	push	r29
    6482:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    6484:	ee 85       	ldd	r30, Y+14	; 0x0e
    6486:	ff 85       	ldd	r31, Y+15	; 0x0f
    6488:	e0 5c       	subi	r30, 0xC0	; 192
    648a:	ff 4f       	sbci	r31, 0xFF	; 255
    648c:	20 81       	ld	r18, Z
    648e:	31 81       	ldd	r19, Z+1	; 0x01
    6490:	e0 54       	subi	r30, 0x40	; 64
    6492:	f0 40       	sbci	r31, 0x00	; 0
    6494:	2f 5f       	subi	r18, 0xFF	; 255
    6496:	3f 4f       	sbci	r19, 0xFF	; 255
    6498:	2f 73       	andi	r18, 0x3F	; 63
    649a:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    649c:	df 01       	movw	r26, r30
    649e:	ae 5b       	subi	r26, 0xBE	; 190
    64a0:	bf 4f       	sbci	r27, 0xFF	; 255
    64a2:	8d 91       	ld	r24, X+
    64a4:	9c 91       	ld	r25, X
    64a6:	11 97       	sbiw	r26, 0x01	; 1
    64a8:	28 17       	cp	r18, r24
    64aa:	39 07       	cpc	r19, r25
    64ac:	d1 f3       	breq	.-12     	; 0x64a2 <HardwareSerial::write(unsigned char)+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    64ae:	e0 5c       	subi	r30, 0xC0	; 192
    64b0:	ff 4f       	sbci	r31, 0xFF	; 255
    64b2:	80 81       	ld	r24, Z
    64b4:	91 81       	ldd	r25, Z+1	; 0x01
    64b6:	e0 54       	subi	r30, 0x40	; 64
    64b8:	f0 40       	sbci	r31, 0x00	; 0
    64ba:	e8 0f       	add	r30, r24
    64bc:	f9 1f       	adc	r31, r25
    64be:	60 83       	st	Z, r22
  _tx_buffer->head = i;
    64c0:	ee 85       	ldd	r30, Y+14	; 0x0e
    64c2:	ff 85       	ldd	r31, Y+15	; 0x0f
    64c4:	e0 5c       	subi	r30, 0xC0	; 192
    64c6:	ff 4f       	sbci	r31, 0xFF	; 255
    64c8:	31 83       	std	Z+1, r19	; 0x01
    64ca:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    64cc:	ee 89       	ldd	r30, Y+22	; 0x16
    64ce:	ff 89       	ldd	r31, Y+23	; 0x17
    64d0:	20 81       	ld	r18, Z
    64d2:	81 e0       	ldi	r24, 0x01	; 1
    64d4:	90 e0       	ldi	r25, 0x00	; 0
    64d6:	0f 8c       	ldd	r0, Y+31	; 0x1f
    64d8:	02 c0       	rjmp	.+4      	; 0x64de <HardwareSerial::write(unsigned char)+0x60>
    64da:	88 0f       	add	r24, r24
    64dc:	99 1f       	adc	r25, r25
    64de:	0a 94       	dec	r0
    64e0:	e2 f7       	brpl	.-8      	; 0x64da <HardwareSerial::write(unsigned char)+0x5c>
    64e2:	28 2b       	or	r18, r24
    64e4:	20 83       	st	Z, r18
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
    64e6:	81 e0       	ldi	r24, 0x01	; 1
    64e8:	89 a3       	std	Y+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
    64ea:	ec 89       	ldd	r30, Y+20	; 0x14
    64ec:	fd 89       	ldd	r31, Y+21	; 0x15
    64ee:	80 81       	ld	r24, Z
    64f0:	80 64       	ori	r24, 0x40	; 64
    64f2:	80 83       	st	Z, r24
  
  return 1;
}
    64f4:	81 e0       	ldi	r24, 0x01	; 1
    64f6:	90 e0       	ldi	r25, 0x00	; 0
    64f8:	df 91       	pop	r29
    64fa:	cf 91       	pop	r28
    64fc:	08 95       	ret

000064fe <global constructors keyed to rx_buffer>:
  public:
    Print() : write_error(0) {}
    64fe:	10 92 b8 04 	sts	0x04B8, r1
    6502:	10 92 b7 04 	sts	0x04B7, r1
    6506:	88 ee       	ldi	r24, 0xE8	; 232
    6508:	93 e0       	ldi	r25, 0x03	; 3
    650a:	a0 e0       	ldi	r26, 0x00	; 0
    650c:	b0 e0       	ldi	r27, 0x00	; 0
    650e:	80 93 b9 04 	sts	0x04B9, r24
    6512:	90 93 ba 04 	sts	0x04BA, r25
    6516:	a0 93 bb 04 	sts	0x04BB, r26
    651a:	b0 93 bc 04 	sts	0x04BC, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    651e:	8e ed       	ldi	r24, 0xDE	; 222
    6520:	91 e0       	ldi	r25, 0x01	; 1
    6522:	90 93 b6 04 	sts	0x04B6, r25
    6526:	80 93 b5 04 	sts	0x04B5, r24
{
  _rx_buffer = rx_buffer;
    652a:	8d e2       	ldi	r24, 0x2D	; 45
    652c:	94 e0       	ldi	r25, 0x04	; 4
    652e:	90 93 c2 04 	sts	0x04C2, r25
    6532:	80 93 c1 04 	sts	0x04C1, r24
  _tx_buffer = tx_buffer;
    6536:	81 e7       	ldi	r24, 0x71	; 113
    6538:	94 e0       	ldi	r25, 0x04	; 4
    653a:	90 93 c4 04 	sts	0x04C4, r25
    653e:	80 93 c3 04 	sts	0x04C3, r24
  _ubrrh = ubrrh;
    6542:	85 ec       	ldi	r24, 0xC5	; 197
    6544:	90 e0       	ldi	r25, 0x00	; 0
    6546:	90 93 c6 04 	sts	0x04C6, r25
    654a:	80 93 c5 04 	sts	0x04C5, r24
  _ubrrl = ubrrl;
    654e:	84 ec       	ldi	r24, 0xC4	; 196
    6550:	90 e0       	ldi	r25, 0x00	; 0
    6552:	90 93 c8 04 	sts	0x04C8, r25
    6556:	80 93 c7 04 	sts	0x04C7, r24
  _ucsra = ucsra;
    655a:	80 ec       	ldi	r24, 0xC0	; 192
    655c:	90 e0       	ldi	r25, 0x00	; 0
    655e:	90 93 ca 04 	sts	0x04CA, r25
    6562:	80 93 c9 04 	sts	0x04C9, r24
  _ucsrb = ucsrb;
    6566:	81 ec       	ldi	r24, 0xC1	; 193
    6568:	90 e0       	ldi	r25, 0x00	; 0
    656a:	90 93 cc 04 	sts	0x04CC, r25
    656e:	80 93 cb 04 	sts	0x04CB, r24
  _ucsrc = ucsrc;
    6572:	82 ec       	ldi	r24, 0xC2	; 194
    6574:	90 e0       	ldi	r25, 0x00	; 0
    6576:	90 93 ce 04 	sts	0x04CE, r25
    657a:	80 93 cd 04 	sts	0x04CD, r24
  _udr = udr;
    657e:	86 ec       	ldi	r24, 0xC6	; 198
    6580:	90 e0       	ldi	r25, 0x00	; 0
    6582:	90 93 d0 04 	sts	0x04D0, r25
    6586:	80 93 cf 04 	sts	0x04CF, r24
  _rxen = rxen;
    658a:	84 e0       	ldi	r24, 0x04	; 4
    658c:	80 93 d1 04 	sts	0x04D1, r24
  _txen = txen;
    6590:	83 e0       	ldi	r24, 0x03	; 3
    6592:	80 93 d2 04 	sts	0x04D2, r24
  _rxcie = rxcie;
    6596:	87 e0       	ldi	r24, 0x07	; 7
    6598:	80 93 d3 04 	sts	0x04D3, r24
  _udrie = udrie;
    659c:	85 e0       	ldi	r24, 0x05	; 5
    659e:	80 93 d4 04 	sts	0x04D4, r24
  _u2x = u2x;
    65a2:	81 e0       	ldi	r24, 0x01	; 1
    65a4:	80 93 d5 04 	sts	0x04D5, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    65a8:	08 95       	ret

000065aa <main>:
#include <Arduino.h>

int main(void)
    65aa:	cf 93       	push	r28
    65ac:	df 93       	push	r29
{
	init();
    65ae:	0e 94 d7 34 	call	0x69ae	; 0x69ae <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    65b2:	0e 94 88 28 	call	0x5110	; 0x5110 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    65b6:	c3 ea       	ldi	r28, 0xA3	; 163
    65b8:	d0 e3       	ldi	r29, 0x30	; 48
#endif
	
	setup();
    
	for (;;) {
		loop();
    65ba:	0e 94 ae 27 	call	0x4f5c	; 0x4f5c <loop>
		if (serialEventRun) serialEventRun();
    65be:	20 97       	sbiw	r28, 0x00	; 0
    65c0:	e1 f3       	breq	.-8      	; 0x65ba <main+0x10>
    65c2:	0e 94 a3 30 	call	0x6146	; 0x6146 <serialEventRun()>
    65c6:	f9 cf       	rjmp	.-14     	; 0x65ba <main+0x10>

000065c8 <__cxa_guard_acquire>:
void operator delete[](void * ptr)
{
  free(ptr);
}

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
    65c8:	fc 01       	movw	r30, r24
    65ca:	20 e0       	ldi	r18, 0x00	; 0
    65cc:	30 e0       	ldi	r19, 0x00	; 0
    65ce:	80 81       	ld	r24, Z
    65d0:	88 23       	and	r24, r24
    65d2:	11 f4       	brne	.+4      	; 0x65d8 <__cxa_guard_acquire+0x10>
    65d4:	21 e0       	ldi	r18, 0x01	; 1
    65d6:	30 e0       	ldi	r19, 0x00	; 0
    65d8:	c9 01       	movw	r24, r18
    65da:	08 95       	ret

000065dc <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
    65dc:	fc 01       	movw	r30, r24
    65de:	81 e0       	ldi	r24, 0x01	; 1
    65e0:	80 83       	st	Z, r24
    65e2:	08 95       	ret

000065e4 <Print::write(unsigned char const*, unsigned int)>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    65e4:	cf 92       	push	r12
    65e6:	df 92       	push	r13
    65e8:	ef 92       	push	r14
    65ea:	ff 92       	push	r15
    65ec:	0f 93       	push	r16
    65ee:	1f 93       	push	r17
    65f0:	cf 93       	push	r28
    65f2:	df 93       	push	r29
    65f4:	7c 01       	movw	r14, r24
    65f6:	6b 01       	movw	r12, r22
    65f8:	8a 01       	movw	r16, r20
    65fa:	c0 e0       	ldi	r28, 0x00	; 0
    65fc:	d0 e0       	ldi	r29, 0x00	; 0
    65fe:	0f c0       	rjmp	.+30     	; 0x661e <Print::write(unsigned char const*, unsigned int)+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    6600:	d6 01       	movw	r26, r12
    6602:	6d 91       	ld	r22, X+
    6604:	6d 01       	movw	r12, r26
    6606:	d7 01       	movw	r26, r14
    6608:	ed 91       	ld	r30, X+
    660a:	fc 91       	ld	r31, X
    660c:	01 90       	ld	r0, Z+
    660e:	f0 81       	ld	r31, Z
    6610:	e0 2d       	mov	r30, r0
    6612:	c7 01       	movw	r24, r14
    6614:	09 95       	icall
    6616:	c8 0f       	add	r28, r24
    6618:	d9 1f       	adc	r29, r25
    661a:	01 50       	subi	r16, 0x01	; 1
    661c:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    661e:	01 15       	cp	r16, r1
    6620:	11 05       	cpc	r17, r1
    6622:	71 f7       	brne	.-36     	; 0x6600 <Print::write(unsigned char const*, unsigned int)+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    6624:	ce 01       	movw	r24, r28
    6626:	df 91       	pop	r29
    6628:	cf 91       	pop	r28
    662a:	1f 91       	pop	r17
    662c:	0f 91       	pop	r16
    662e:	ff 90       	pop	r15
    6630:	ef 90       	pop	r14
    6632:	df 90       	pop	r13
    6634:	cf 90       	pop	r12
    6636:	08 95       	ret

00006638 <Print::print(__FlashStringHelper const*)>:

size_t Print::print(const __FlashStringHelper *ifsh)
    6638:	ef 92       	push	r14
    663a:	ff 92       	push	r15
    663c:	0f 93       	push	r16
    663e:	1f 93       	push	r17
    6640:	cf 93       	push	r28
    6642:	df 93       	push	r29
    6644:	7c 01       	movw	r14, r24
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
    6646:	8b 01       	movw	r16, r22
    6648:	c0 e0       	ldi	r28, 0x00	; 0
    664a:	d0 e0       	ldi	r29, 0x00	; 0
    664c:	f8 01       	movw	r30, r16
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    664e:	0f 5f       	subi	r16, 0xFF	; 255
    6650:	1f 4f       	sbci	r17, 0xFF	; 255
    6652:	64 91       	lpm	r22, Z+
    if (c == 0) break;
    6654:	66 23       	and	r22, r22
    6656:	59 f0       	breq	.+22     	; 0x666e <Print::print(__FlashStringHelper const*)+0x36>
    n += write(c);
    6658:	d7 01       	movw	r26, r14
    665a:	ed 91       	ld	r30, X+
    665c:	fc 91       	ld	r31, X
    665e:	01 90       	ld	r0, Z+
    6660:	f0 81       	ld	r31, Z
    6662:	e0 2d       	mov	r30, r0
    6664:	c7 01       	movw	r24, r14
    6666:	09 95       	icall
    6668:	c8 0f       	add	r28, r24
    666a:	d9 1f       	adc	r29, r25
    666c:	ef cf       	rjmp	.-34     	; 0x664c <Print::print(__FlashStringHelper const*)+0x14>
  }
  return n;
}
    666e:	ce 01       	movw	r24, r28
    6670:	df 91       	pop	r29
    6672:	cf 91       	pop	r28
    6674:	1f 91       	pop	r17
    6676:	0f 91       	pop	r16
    6678:	ff 90       	pop	r15
    667a:	ef 90       	pop	r14
    667c:	08 95       	ret

0000667e <Print::print(char)>:
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
    667e:	dc 01       	movw	r26, r24
{
  return write(c);
    6680:	ed 91       	ld	r30, X+
    6682:	fc 91       	ld	r31, X
    6684:	01 90       	ld	r0, Z+
    6686:	f0 81       	ld	r31, Z
    6688:	e0 2d       	mov	r30, r0
    668a:	09 95       	icall
}
    668c:	08 95       	ret

0000668e <Print::println()>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
    668e:	ef 92       	push	r14
    6690:	ff 92       	push	r15
    6692:	0f 93       	push	r16
    6694:	1f 93       	push	r17
    6696:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    6698:	dc 01       	movw	r26, r24
    669a:	ed 91       	ld	r30, X+
    669c:	fc 91       	ld	r31, X
    669e:	01 90       	ld	r0, Z+
    66a0:	f0 81       	ld	r31, Z
    66a2:	e0 2d       	mov	r30, r0
    66a4:	6d e0       	ldi	r22, 0x0D	; 13
    66a6:	09 95       	icall
    66a8:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    66aa:	d8 01       	movw	r26, r16
    66ac:	ed 91       	ld	r30, X+
    66ae:	fc 91       	ld	r31, X
    66b0:	01 90       	ld	r0, Z+
    66b2:	f0 81       	ld	r31, Z
    66b4:	e0 2d       	mov	r30, r0
    66b6:	c8 01       	movw	r24, r16
    66b8:	6a e0       	ldi	r22, 0x0A	; 10
    66ba:	09 95       	icall
    66bc:	9c 01       	movw	r18, r24
    66be:	2e 0d       	add	r18, r14
    66c0:	3f 1d       	adc	r19, r15
    66c2:	c9 01       	movw	r24, r18
    66c4:	1f 91       	pop	r17
    66c6:	0f 91       	pop	r16
    66c8:	ff 90       	pop	r15
    66ca:	ef 90       	pop	r14
    66cc:	08 95       	ret

000066ce <Print::println(__FlashStringHelper const*)>:
size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
    66ce:	ef 92       	push	r14
    66d0:	ff 92       	push	r15
    66d2:	0f 93       	push	r16
    66d4:	1f 93       	push	r17
    66d6:	7c 01       	movw	r14, r24
{
  size_t n = print(ifsh);
    66d8:	0e 94 1c 33 	call	0x6638	; 0x6638 <Print::print(__FlashStringHelper const*)>
    66dc:	8c 01       	movw	r16, r24
  n += println();
    66de:	c7 01       	movw	r24, r14
    66e0:	0e 94 47 33 	call	0x668e	; 0x668e <Print::println()>
    66e4:	9c 01       	movw	r18, r24
    66e6:	20 0f       	add	r18, r16
    66e8:	31 1f       	adc	r19, r17
  return n;
}
    66ea:	c9 01       	movw	r24, r18
    66ec:	1f 91       	pop	r17
    66ee:	0f 91       	pop	r16
    66f0:	ff 90       	pop	r15
    66f2:	ef 90       	pop	r14
    66f4:	08 95       	ret

000066f6 <Print::write(char const*)>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    66f6:	cf 93       	push	r28
    66f8:	df 93       	push	r29
    66fa:	ec 01       	movw	r28, r24
      if (str == NULL) return 0;
    66fc:	61 15       	cp	r22, r1
    66fe:	71 05       	cpc	r23, r1
    6700:	19 f4       	brne	.+6      	; 0x6708 <Print::write(char const*)+0x12>
    6702:	20 e0       	ldi	r18, 0x00	; 0
    6704:	30 e0       	ldi	r19, 0x00	; 0
    6706:	0f c0       	rjmp	.+30     	; 0x6726 <Print::write(char const*)+0x30>
      return write((const uint8_t *)str, strlen(str));
    6708:	db 01       	movw	r26, r22
    670a:	0d 90       	ld	r0, X+
    670c:	00 20       	and	r0, r0
    670e:	e9 f7       	brne	.-6      	; 0x670a <Print::write(char const*)+0x14>
    6710:	11 97       	sbiw	r26, 0x01	; 1
    6712:	a6 1b       	sub	r26, r22
    6714:	b7 0b       	sbc	r27, r23
    6716:	e8 81       	ld	r30, Y
    6718:	f9 81       	ldd	r31, Y+1	; 0x01
    671a:	02 80       	ldd	r0, Z+2	; 0x02
    671c:	f3 81       	ldd	r31, Z+3	; 0x03
    671e:	e0 2d       	mov	r30, r0
    6720:	ad 01       	movw	r20, r26
    6722:	09 95       	icall
    6724:	9c 01       	movw	r18, r24
    }
    6726:	c9 01       	movw	r24, r18
    6728:	df 91       	pop	r29
    672a:	cf 91       	pop	r28
    672c:	08 95       	ret

0000672e <Print::printNumber(unsigned long, unsigned char)>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    672e:	4f 92       	push	r4
    6730:	5f 92       	push	r5
    6732:	7f 92       	push	r7
    6734:	8f 92       	push	r8
    6736:	9f 92       	push	r9
    6738:	af 92       	push	r10
    673a:	bf 92       	push	r11
    673c:	cf 92       	push	r12
    673e:	df 92       	push	r13
    6740:	ef 92       	push	r14
    6742:	ff 92       	push	r15
    6744:	0f 93       	push	r16
    6746:	1f 93       	push	r17
    6748:	df 93       	push	r29
    674a:	cf 93       	push	r28
    674c:	cd b7       	in	r28, 0x3d	; 61
    674e:	de b7       	in	r29, 0x3e	; 62
    6750:	a1 97       	sbiw	r28, 0x21	; 33
    6752:	0f b6       	in	r0, 0x3f	; 63
    6754:	f8 94       	cli
    6756:	de bf       	out	0x3e, r29	; 62
    6758:	0f be       	out	0x3f, r0	; 63
    675a:	cd bf       	out	0x3d, r28	; 61
    675c:	2c 01       	movw	r4, r24
    675e:	74 2e       	mov	r7, r20
    6760:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    6762:	22 30       	cpi	r18, 0x02	; 2
    6764:	08 f4       	brcc	.+2      	; 0x6768 <Print::printNumber(unsigned long, unsigned char)+0x3a>
    6766:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    6768:	19 a2       	std	Y+33, r1	; 0x21
    676a:	31 e2       	ldi	r19, 0x21	; 33
    676c:	c3 2e       	mov	r12, r19
    676e:	d1 2c       	mov	r13, r1
    6770:	cc 0e       	add	r12, r28
    6772:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    6774:	82 2e       	mov	r8, r18
    6776:	99 24       	eor	r9, r9
    6778:	aa 24       	eor	r10, r10
    677a:	bb 24       	eor	r11, r11
    677c:	67 2d       	mov	r22, r7
    677e:	75 2f       	mov	r23, r21
    6780:	a5 01       	movw	r20, r10
    6782:	94 01       	movw	r18, r8
    6784:	0e 94 55 35 	call	0x6aaa	; 0x6aaa <__udivmodsi4>
    6788:	79 01       	movw	r14, r18
    678a:	8a 01       	movw	r16, r20
    char c = m - base * n;
    678c:	c8 01       	movw	r24, r16
    678e:	b7 01       	movw	r22, r14
    6790:	a5 01       	movw	r20, r10
    6792:	94 01       	movw	r18, r8
    6794:	0e 94 0f 35 	call	0x6a1e	; 0x6a1e <__mulsi3>
    6798:	47 2d       	mov	r20, r7
    679a:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    679c:	08 94       	sec
    679e:	c1 08       	sbc	r12, r1
    67a0:	d1 08       	sbc	r13, r1
    67a2:	4a 30       	cpi	r20, 0x0A	; 10
    67a4:	14 f4       	brge	.+4      	; 0x67aa <Print::printNumber(unsigned long, unsigned char)+0x7c>
    67a6:	40 5d       	subi	r20, 0xD0	; 208
    67a8:	01 c0       	rjmp	.+2      	; 0x67ac <Print::printNumber(unsigned long, unsigned char)+0x7e>
    67aa:	49 5c       	subi	r20, 0xC9	; 201
    67ac:	f6 01       	movw	r30, r12
    67ae:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    67b0:	e1 14       	cp	r14, r1
    67b2:	f1 04       	cpc	r15, r1
    67b4:	01 05       	cpc	r16, r1
    67b6:	11 05       	cpc	r17, r1
    67b8:	21 f0       	breq	.+8      	; 0x67c2 <Print::printNumber(unsigned long, unsigned char)+0x94>
    67ba:	7e 2c       	mov	r7, r14
    67bc:	5f 2d       	mov	r21, r15
    67be:	c8 01       	movw	r24, r16
    67c0:	dd cf       	rjmp	.-70     	; 0x677c <Print::printNumber(unsigned long, unsigned char)+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    67c2:	c2 01       	movw	r24, r4
    67c4:	b6 01       	movw	r22, r12
    67c6:	0e 94 7b 33 	call	0x66f6	; 0x66f6 <Print::write(char const*)>
}
    67ca:	a1 96       	adiw	r28, 0x21	; 33
    67cc:	0f b6       	in	r0, 0x3f	; 63
    67ce:	f8 94       	cli
    67d0:	de bf       	out	0x3e, r29	; 62
    67d2:	0f be       	out	0x3f, r0	; 63
    67d4:	cd bf       	out	0x3d, r28	; 61
    67d6:	cf 91       	pop	r28
    67d8:	df 91       	pop	r29
    67da:	1f 91       	pop	r17
    67dc:	0f 91       	pop	r16
    67de:	ff 90       	pop	r15
    67e0:	ef 90       	pop	r14
    67e2:	df 90       	pop	r13
    67e4:	cf 90       	pop	r12
    67e6:	bf 90       	pop	r11
    67e8:	af 90       	pop	r10
    67ea:	9f 90       	pop	r9
    67ec:	8f 90       	pop	r8
    67ee:	7f 90       	pop	r7
    67f0:	5f 90       	pop	r5
    67f2:	4f 90       	pop	r4
    67f4:	08 95       	ret

000067f6 <Print::print(unsigned long, int)>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
    67f6:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
    67f8:	21 15       	cp	r18, r1
    67fa:	31 05       	cpc	r19, r1
    67fc:	41 f4       	brne	.+16     	; 0x680e <Print::print(unsigned long, int)+0x18>
    67fe:	ed 91       	ld	r30, X+
    6800:	fc 91       	ld	r31, X
    6802:	01 90       	ld	r0, Z+
    6804:	f0 81       	ld	r31, Z
    6806:	e0 2d       	mov	r30, r0
    6808:	64 2f       	mov	r22, r20
    680a:	09 95       	icall
    680c:	08 95       	ret
  else return printNumber(n, base);
    680e:	0e 94 97 33 	call	0x672e	; 0x672e <Print::printNumber(unsigned long, unsigned char)>
}
    6812:	08 95       	ret

00006814 <Print::print(unsigned int, int)>:
size_t Print::print(int n, int base)
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
    6814:	ef 92       	push	r14
    6816:	ff 92       	push	r15
    6818:	0f 93       	push	r16
    681a:	1f 93       	push	r17
    681c:	9a 01       	movw	r18, r20
{
  return print((unsigned long) n, base);
    681e:	7b 01       	movw	r14, r22
    6820:	00 e0       	ldi	r16, 0x00	; 0
    6822:	10 e0       	ldi	r17, 0x00	; 0
    6824:	b8 01       	movw	r22, r16
    6826:	a7 01       	movw	r20, r14
    6828:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <Print::print(unsigned long, int)>
}
    682c:	1f 91       	pop	r17
    682e:	0f 91       	pop	r16
    6830:	ff 90       	pop	r15
    6832:	ef 90       	pop	r14
    6834:	08 95       	ret

00006836 <Print::print(unsigned char, int)>:
size_t Print::print(char c)
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
    6836:	ef 92       	push	r14
    6838:	ff 92       	push	r15
    683a:	0f 93       	push	r16
    683c:	1f 93       	push	r17
    683e:	9a 01       	movw	r18, r20
{
  return print((unsigned long) b, base);
    6840:	e6 2e       	mov	r14, r22
    6842:	ff 24       	eor	r15, r15
    6844:	00 e0       	ldi	r16, 0x00	; 0
    6846:	10 e0       	ldi	r17, 0x00	; 0
    6848:	b8 01       	movw	r22, r16
    684a:	a7 01       	movw	r20, r14
    684c:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <Print::print(unsigned long, int)>
}
    6850:	1f 91       	pop	r17
    6852:	0f 91       	pop	r16
    6854:	ff 90       	pop	r15
    6856:	ef 90       	pop	r14
    6858:	08 95       	ret

0000685a <Print::print(long, int)>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
    685a:	cf 92       	push	r12
    685c:	df 92       	push	r13
    685e:	ef 92       	push	r14
    6860:	ff 92       	push	r15
    6862:	0f 93       	push	r16
    6864:	1f 93       	push	r17
    6866:	cf 93       	push	r28
    6868:	df 93       	push	r29
    686a:	ec 01       	movw	r28, r24
    686c:	6a 01       	movw	r12, r20
    686e:	7b 01       	movw	r14, r22
{
  if (base == 0) {
    6870:	21 15       	cp	r18, r1
    6872:	31 05       	cpc	r19, r1
    6874:	41 f4       	brne	.+16     	; 0x6886 <Print::print(long, int)+0x2c>
    return write(n);
    6876:	e8 81       	ld	r30, Y
    6878:	f9 81       	ldd	r31, Y+1	; 0x01
    687a:	01 90       	ld	r0, Z+
    687c:	f0 81       	ld	r31, Z
    687e:	e0 2d       	mov	r30, r0
    6880:	64 2f       	mov	r22, r20
    6882:	09 95       	icall
    6884:	1f c0       	rjmp	.+62     	; 0x68c4 <Print::print(long, int)+0x6a>
  } else if (base == 10) {
    6886:	2a 30       	cpi	r18, 0x0A	; 10
    6888:	31 05       	cpc	r19, r1
    688a:	d1 f4       	brne	.+52     	; 0x68c0 <Print::print(long, int)+0x66>
    if (n < 0) {
    688c:	77 ff       	sbrs	r23, 7
    688e:	17 c0       	rjmp	.+46     	; 0x68be <Print::print(long, int)+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    6890:	e8 81       	ld	r30, Y
    6892:	f9 81       	ldd	r31, Y+1	; 0x01
    6894:	01 90       	ld	r0, Z+
    6896:	f0 81       	ld	r31, Z
    6898:	e0 2d       	mov	r30, r0
    689a:	6d e2       	ldi	r22, 0x2D	; 45
    689c:	09 95       	icall
    689e:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    68a0:	44 27       	eor	r20, r20
    68a2:	55 27       	eor	r21, r21
    68a4:	ba 01       	movw	r22, r20
    68a6:	4c 19       	sub	r20, r12
    68a8:	5d 09       	sbc	r21, r13
    68aa:	6e 09       	sbc	r22, r14
    68ac:	7f 09       	sbc	r23, r15
    68ae:	ce 01       	movw	r24, r28
    68b0:	2a e0       	ldi	r18, 0x0A	; 10
    68b2:	0e 94 97 33 	call	0x672e	; 0x672e <Print::printNumber(unsigned long, unsigned char)>
    68b6:	98 01       	movw	r18, r16
    68b8:	28 0f       	add	r18, r24
    68ba:	39 1f       	adc	r19, r25
    68bc:	04 c0       	rjmp	.+8      	; 0x68c6 <Print::print(long, int)+0x6c>
    }
    return printNumber(n, 10);
    68be:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    68c0:	0e 94 97 33 	call	0x672e	; 0x672e <Print::printNumber(unsigned long, unsigned char)>
    68c4:	9c 01       	movw	r18, r24
  }
}
    68c6:	c9 01       	movw	r24, r18
    68c8:	df 91       	pop	r29
    68ca:	cf 91       	pop	r28
    68cc:	1f 91       	pop	r17
    68ce:	0f 91       	pop	r16
    68d0:	ff 90       	pop	r15
    68d2:	ef 90       	pop	r14
    68d4:	df 90       	pop	r13
    68d6:	cf 90       	pop	r12
    68d8:	08 95       	ret

000068da <Print::print(int, int)>:
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
    68da:	ef 92       	push	r14
    68dc:	ff 92       	push	r15
    68de:	0f 93       	push	r16
    68e0:	1f 93       	push	r17
    68e2:	7b 01       	movw	r14, r22
    68e4:	9a 01       	movw	r18, r20
{
  return print((long) n, base);
    68e6:	00 27       	eor	r16, r16
    68e8:	f7 fc       	sbrc	r15, 7
    68ea:	00 95       	com	r16
    68ec:	10 2f       	mov	r17, r16
    68ee:	b8 01       	movw	r22, r16
    68f0:	a7 01       	movw	r20, r14
    68f2:	0e 94 2d 34 	call	0x685a	; 0x685a <Print::print(long, int)>
}
    68f6:	1f 91       	pop	r17
    68f8:	0f 91       	pop	r16
    68fa:	ff 90       	pop	r15
    68fc:	ef 90       	pop	r14
    68fe:	08 95       	ret

00006900 <Print::print(char const*)>:
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    6900:	0e 94 7b 33 	call	0x66f6	; 0x66f6 <Print::write(char const*)>
}
    6904:	08 95       	ret

00006906 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    6906:	1f 92       	push	r1
    6908:	0f 92       	push	r0
    690a:	0f b6       	in	r0, 0x3f	; 63
    690c:	0f 92       	push	r0
    690e:	11 24       	eor	r1, r1
    6910:	2f 93       	push	r18
    6912:	3f 93       	push	r19
    6914:	4f 93       	push	r20
    6916:	5f 93       	push	r21
    6918:	6f 93       	push	r22
    691a:	7f 93       	push	r23
    691c:	8f 93       	push	r24
    691e:	9f 93       	push	r25
    6920:	af 93       	push	r26
    6922:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    6924:	20 91 db 04 	lds	r18, 0x04DB
    6928:	30 91 dc 04 	lds	r19, 0x04DC
    692c:	40 91 dd 04 	lds	r20, 0x04DD
    6930:	50 91 de 04 	lds	r21, 0x04DE
	unsigned char f = timer0_fract;
    6934:	70 91 df 04 	lds	r23, 0x04DF

	m += MILLIS_INC;
    6938:	da 01       	movw	r26, r20
    693a:	c9 01       	movw	r24, r18
    693c:	40 96       	adiw	r24, 0x10	; 16
    693e:	a1 1d       	adc	r26, r1
    6940:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    6942:	67 2f       	mov	r22, r23
    6944:	60 5d       	subi	r22, 0xD0	; 208
	if (f >= FRACT_MAX) {
    6946:	6d 37       	cpi	r22, 0x7D	; 125
    6948:	30 f0       	brcs	.+12     	; 0x6956 <__vector_16+0x50>
		f -= FRACT_MAX;
    694a:	6d 57       	subi	r22, 0x7D	; 125
		m += 1;
    694c:	da 01       	movw	r26, r20
    694e:	c9 01       	movw	r24, r18
    6950:	41 96       	adiw	r24, 0x11	; 17
    6952:	a1 1d       	adc	r26, r1
    6954:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    6956:	60 93 df 04 	sts	0x04DF, r22
	timer0_millis = m;
    695a:	80 93 db 04 	sts	0x04DB, r24
    695e:	90 93 dc 04 	sts	0x04DC, r25
    6962:	a0 93 dd 04 	sts	0x04DD, r26
    6966:	b0 93 de 04 	sts	0x04DE, r27
	timer0_overflow_count++;
    696a:	80 91 d7 04 	lds	r24, 0x04D7
    696e:	90 91 d8 04 	lds	r25, 0x04D8
    6972:	a0 91 d9 04 	lds	r26, 0x04D9
    6976:	b0 91 da 04 	lds	r27, 0x04DA
    697a:	01 96       	adiw	r24, 0x01	; 1
    697c:	a1 1d       	adc	r26, r1
    697e:	b1 1d       	adc	r27, r1
    6980:	80 93 d7 04 	sts	0x04D7, r24
    6984:	90 93 d8 04 	sts	0x04D8, r25
    6988:	a0 93 d9 04 	sts	0x04D9, r26
    698c:	b0 93 da 04 	sts	0x04DA, r27
}
    6990:	bf 91       	pop	r27
    6992:	af 91       	pop	r26
    6994:	9f 91       	pop	r25
    6996:	8f 91       	pop	r24
    6998:	7f 91       	pop	r23
    699a:	6f 91       	pop	r22
    699c:	5f 91       	pop	r21
    699e:	4f 91       	pop	r20
    69a0:	3f 91       	pop	r19
    69a2:	2f 91       	pop	r18
    69a4:	0f 90       	pop	r0
    69a6:	0f be       	out	0x3f, r0	; 63
    69a8:	0f 90       	pop	r0
    69aa:	1f 90       	pop	r1
    69ac:	18 95       	reti

000069ae <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    69ae:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    69b0:	84 b5       	in	r24, 0x24	; 36
    69b2:	82 60       	ori	r24, 0x02	; 2
    69b4:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    69b6:	84 b5       	in	r24, 0x24	; 36
    69b8:	81 60       	ori	r24, 0x01	; 1
    69ba:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    69bc:	85 b5       	in	r24, 0x25	; 37
    69be:	82 60       	ori	r24, 0x02	; 2
    69c0:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    69c2:	85 b5       	in	r24, 0x25	; 37
    69c4:	81 60       	ori	r24, 0x01	; 1
    69c6:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    69c8:	ee e6       	ldi	r30, 0x6E	; 110
    69ca:	f0 e0       	ldi	r31, 0x00	; 0
    69cc:	80 81       	ld	r24, Z
    69ce:	81 60       	ori	r24, 0x01	; 1
    69d0:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    69d2:	e1 e8       	ldi	r30, 0x81	; 129
    69d4:	f0 e0       	ldi	r31, 0x00	; 0
    69d6:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    69d8:	80 81       	ld	r24, Z
    69da:	82 60       	ori	r24, 0x02	; 2
    69dc:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    69de:	e0 e8       	ldi	r30, 0x80	; 128
    69e0:	f0 e0       	ldi	r31, 0x00	; 0
    69e2:	80 81       	ld	r24, Z
    69e4:	81 60       	ori	r24, 0x01	; 1
    69e6:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    69e8:	e1 eb       	ldi	r30, 0xB1	; 177
    69ea:	f0 e0       	ldi	r31, 0x00	; 0
    69ec:	80 81       	ld	r24, Z
    69ee:	84 60       	ori	r24, 0x04	; 4
    69f0:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    69f2:	e0 eb       	ldi	r30, 0xB0	; 176
    69f4:	f0 e0       	ldi	r31, 0x00	; 0
    69f6:	80 81       	ld	r24, Z
    69f8:	81 60       	ori	r24, 0x01	; 1
    69fa:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    69fc:	ea e7       	ldi	r30, 0x7A	; 122
    69fe:	f0 e0       	ldi	r31, 0x00	; 0
    6a00:	80 81       	ld	r24, Z
    6a02:	84 60       	ori	r24, 0x04	; 4
    6a04:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    6a06:	80 81       	ld	r24, Z
    6a08:	82 60       	ori	r24, 0x02	; 2
    6a0a:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    6a0c:	80 81       	ld	r24, Z
    6a0e:	81 60       	ori	r24, 0x01	; 1
    6a10:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    6a12:	80 81       	ld	r24, Z
    6a14:	80 68       	ori	r24, 0x80	; 128
    6a16:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    6a18:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    6a1c:	08 95       	ret

00006a1e <__mulsi3>:
    6a1e:	62 9f       	mul	r22, r18
    6a20:	d0 01       	movw	r26, r0
    6a22:	73 9f       	mul	r23, r19
    6a24:	f0 01       	movw	r30, r0
    6a26:	82 9f       	mul	r24, r18
    6a28:	e0 0d       	add	r30, r0
    6a2a:	f1 1d       	adc	r31, r1
    6a2c:	64 9f       	mul	r22, r20
    6a2e:	e0 0d       	add	r30, r0
    6a30:	f1 1d       	adc	r31, r1
    6a32:	92 9f       	mul	r25, r18
    6a34:	f0 0d       	add	r31, r0
    6a36:	83 9f       	mul	r24, r19
    6a38:	f0 0d       	add	r31, r0
    6a3a:	74 9f       	mul	r23, r20
    6a3c:	f0 0d       	add	r31, r0
    6a3e:	65 9f       	mul	r22, r21
    6a40:	f0 0d       	add	r31, r0
    6a42:	99 27       	eor	r25, r25
    6a44:	72 9f       	mul	r23, r18
    6a46:	b0 0d       	add	r27, r0
    6a48:	e1 1d       	adc	r30, r1
    6a4a:	f9 1f       	adc	r31, r25
    6a4c:	63 9f       	mul	r22, r19
    6a4e:	b0 0d       	add	r27, r0
    6a50:	e1 1d       	adc	r30, r1
    6a52:	f9 1f       	adc	r31, r25
    6a54:	bd 01       	movw	r22, r26
    6a56:	cf 01       	movw	r24, r30
    6a58:	11 24       	eor	r1, r1
    6a5a:	08 95       	ret

00006a5c <__udivmodhi4>:
    6a5c:	aa 1b       	sub	r26, r26
    6a5e:	bb 1b       	sub	r27, r27
    6a60:	51 e1       	ldi	r21, 0x11	; 17
    6a62:	07 c0       	rjmp	.+14     	; 0x6a72 <__udivmodhi4_ep>

00006a64 <__udivmodhi4_loop>:
    6a64:	aa 1f       	adc	r26, r26
    6a66:	bb 1f       	adc	r27, r27
    6a68:	a6 17       	cp	r26, r22
    6a6a:	b7 07       	cpc	r27, r23
    6a6c:	10 f0       	brcs	.+4      	; 0x6a72 <__udivmodhi4_ep>
    6a6e:	a6 1b       	sub	r26, r22
    6a70:	b7 0b       	sbc	r27, r23

00006a72 <__udivmodhi4_ep>:
    6a72:	88 1f       	adc	r24, r24
    6a74:	99 1f       	adc	r25, r25
    6a76:	5a 95       	dec	r21
    6a78:	a9 f7       	brne	.-22     	; 0x6a64 <__udivmodhi4_loop>
    6a7a:	80 95       	com	r24
    6a7c:	90 95       	com	r25
    6a7e:	bc 01       	movw	r22, r24
    6a80:	cd 01       	movw	r24, r26
    6a82:	08 95       	ret

00006a84 <__divmodhi4>:
    6a84:	97 fb       	bst	r25, 7
    6a86:	09 2e       	mov	r0, r25
    6a88:	07 26       	eor	r0, r23
    6a8a:	0a d0       	rcall	.+20     	; 0x6aa0 <__divmodhi4_neg1>
    6a8c:	77 fd       	sbrc	r23, 7
    6a8e:	04 d0       	rcall	.+8      	; 0x6a98 <__divmodhi4_neg2>
    6a90:	e5 df       	rcall	.-54     	; 0x6a5c <__udivmodhi4>
    6a92:	06 d0       	rcall	.+12     	; 0x6aa0 <__divmodhi4_neg1>
    6a94:	00 20       	and	r0, r0
    6a96:	1a f4       	brpl	.+6      	; 0x6a9e <__divmodhi4_exit>

00006a98 <__divmodhi4_neg2>:
    6a98:	70 95       	com	r23
    6a9a:	61 95       	neg	r22
    6a9c:	7f 4f       	sbci	r23, 0xFF	; 255

00006a9e <__divmodhi4_exit>:
    6a9e:	08 95       	ret

00006aa0 <__divmodhi4_neg1>:
    6aa0:	f6 f7       	brtc	.-4      	; 0x6a9e <__divmodhi4_exit>
    6aa2:	90 95       	com	r25
    6aa4:	81 95       	neg	r24
    6aa6:	9f 4f       	sbci	r25, 0xFF	; 255
    6aa8:	08 95       	ret

00006aaa <__udivmodsi4>:
    6aaa:	a1 e2       	ldi	r26, 0x21	; 33
    6aac:	1a 2e       	mov	r1, r26
    6aae:	aa 1b       	sub	r26, r26
    6ab0:	bb 1b       	sub	r27, r27
    6ab2:	fd 01       	movw	r30, r26
    6ab4:	0d c0       	rjmp	.+26     	; 0x6ad0 <__udivmodsi4_ep>

00006ab6 <__udivmodsi4_loop>:
    6ab6:	aa 1f       	adc	r26, r26
    6ab8:	bb 1f       	adc	r27, r27
    6aba:	ee 1f       	adc	r30, r30
    6abc:	ff 1f       	adc	r31, r31
    6abe:	a2 17       	cp	r26, r18
    6ac0:	b3 07       	cpc	r27, r19
    6ac2:	e4 07       	cpc	r30, r20
    6ac4:	f5 07       	cpc	r31, r21
    6ac6:	20 f0       	brcs	.+8      	; 0x6ad0 <__udivmodsi4_ep>
    6ac8:	a2 1b       	sub	r26, r18
    6aca:	b3 0b       	sbc	r27, r19
    6acc:	e4 0b       	sbc	r30, r20
    6ace:	f5 0b       	sbc	r31, r21

00006ad0 <__udivmodsi4_ep>:
    6ad0:	66 1f       	adc	r22, r22
    6ad2:	77 1f       	adc	r23, r23
    6ad4:	88 1f       	adc	r24, r24
    6ad6:	99 1f       	adc	r25, r25
    6ad8:	1a 94       	dec	r1
    6ada:	69 f7       	brne	.-38     	; 0x6ab6 <__udivmodsi4_loop>
    6adc:	60 95       	com	r22
    6ade:	70 95       	com	r23
    6ae0:	80 95       	com	r24
    6ae2:	90 95       	com	r25
    6ae4:	9b 01       	movw	r18, r22
    6ae6:	ac 01       	movw	r20, r24
    6ae8:	bd 01       	movw	r22, r26
    6aea:	cf 01       	movw	r24, r30
    6aec:	08 95       	ret

00006aee <__divmodsi4>:
    6aee:	97 fb       	bst	r25, 7
    6af0:	09 2e       	mov	r0, r25
    6af2:	05 26       	eor	r0, r21
    6af4:	0e d0       	rcall	.+28     	; 0x6b12 <__divmodsi4_neg1>
    6af6:	57 fd       	sbrc	r21, 7
    6af8:	04 d0       	rcall	.+8      	; 0x6b02 <__divmodsi4_neg2>
    6afa:	d7 df       	rcall	.-82     	; 0x6aaa <__udivmodsi4>
    6afc:	0a d0       	rcall	.+20     	; 0x6b12 <__divmodsi4_neg1>
    6afe:	00 1c       	adc	r0, r0
    6b00:	38 f4       	brcc	.+14     	; 0x6b10 <__divmodsi4_exit>

00006b02 <__divmodsi4_neg2>:
    6b02:	50 95       	com	r21
    6b04:	40 95       	com	r20
    6b06:	30 95       	com	r19
    6b08:	21 95       	neg	r18
    6b0a:	3f 4f       	sbci	r19, 0xFF	; 255
    6b0c:	4f 4f       	sbci	r20, 0xFF	; 255
    6b0e:	5f 4f       	sbci	r21, 0xFF	; 255

00006b10 <__divmodsi4_exit>:
    6b10:	08 95       	ret

00006b12 <__divmodsi4_neg1>:
    6b12:	f6 f7       	brtc	.-4      	; 0x6b10 <__divmodsi4_exit>
    6b14:	90 95       	com	r25
    6b16:	80 95       	com	r24
    6b18:	70 95       	com	r23
    6b1a:	61 95       	neg	r22
    6b1c:	7f 4f       	sbci	r23, 0xFF	; 255
    6b1e:	8f 4f       	sbci	r24, 0xFF	; 255
    6b20:	9f 4f       	sbci	r25, 0xFF	; 255
    6b22:	08 95       	ret

00006b24 <__tablejump2__>:
    6b24:	ee 0f       	add	r30, r30
    6b26:	ff 1f       	adc	r31, r31

00006b28 <__tablejump__>:
    6b28:	05 90       	lpm	r0, Z+
    6b2a:	f4 91       	lpm	r31, Z+
    6b2c:	e0 2d       	mov	r30, r0
    6b2e:	09 94       	ijmp

00006b30 <toupper>:
    6b30:	91 11       	cpse	r25, r1
    6b32:	08 95       	ret
    6b34:	81 56       	subi	r24, 0x61	; 97
    6b36:	8a 51       	subi	r24, 0x1A	; 26
    6b38:	08 f4       	brcc	.+2      	; 0x6b3c <toupper+0xc>
    6b3a:	80 52       	subi	r24, 0x20	; 32
    6b3c:	85 58       	subi	r24, 0x85	; 133
    6b3e:	08 95       	ret

00006b40 <_exit>:
    6b40:	f8 94       	cli

00006b42 <__stop_program>:
    6b42:	ff cf       	rjmp	.-2      	; 0x6b42 <__stop_program>
