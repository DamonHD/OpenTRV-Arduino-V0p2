
/var/folders/km/s_tzntf16nzg5bdh5n6g6lz40000gn/T/build6763744114461649109.tmp/V0p2_Main.cpp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000112  00800100  00007c56  00007cea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007c56  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000337  00800212  00800212  00007dfc  2**0
                  ALLOC
  3 .debug_aranges 00001098  00000000  00000000  00007dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00002cec  00000000  00000000  00008e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0001844c  00000000  00000000  0000bb80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00004d59  00000000  00000000  00023fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000115ed  00000000  00000000  00028d25  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001db0  00000000  00000000  0003a314  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00006f83  00000000  00000000  0003c0c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000a274  00000000  00000000  00043047  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 000ab3ce  00000000  00000000  0004d2bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001328  00000000  00000000  000f8689  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
    virtual bool isValid(const uint8_t value) const { return(value <= 100); }

    // Returns true if (re)calibrating/(re)initialising/(re)syncing.
    // The target valve position is not lost while this is true.
    // By default there is no recalibration step.
    virtual bool isRecalibrating() const { return(false); }
       0:	0c 94 9e 02 	jmp	0x53c	; 0x53c <__ctors_end>
#endif


// True if FHT8V valve is believed to be open under instruction from this system; false if not in sync.
static bool FHT8V_isValveOpen;
bool getFHT8V_isValveOpen() { return(syncedWithFHT8V && FHT8V_isValveOpen); }
       4:	0c 94 c6 02 	jmp	0x58c	; 0x58c <__bad_interrupt>
bool verifyHeaderAndCRCForTrailingMinimalStatsPayload(uint8_t const *const buf)
  {
  return((MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MSBS == ((buf[0]) & MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MASK)) && // Plausible header.
         (0 == (buf[1] & 0x80)) && // Top bit is clear on this byte also.
         (buf[2] == crc7_5B_update(buf[0], buf[1]))); // CRC validates, top bit implicitly zero.
  }
       8:	0c 94 c6 02 	jmp	0x58c	; 0x58c <__bad_interrupt>
// For comparator use examples see:
//   * http://forum.arduino.cc/index.php?topic=165744.0
//   * http://forum.arduino.cc/index.php?topic=17450.0
//   * http://www.avr-tutorials.com/comparator/utilizing-avr-analog-comparator-aco
//   * http://winavr.scienceprog.com/avr-gcc-tutorial/avr-comparator-c-programming-example.html
bool analogueVsBandgapRead(const int aiNumber, const bool napToSettle)
       c:	0c 94 c6 02 	jmp	0x58c	; 0x58c <__bad_interrupt>
uint_least8_t getHoursLT() { return(getMinutesSinceMidnightLT() / 60); }

// Get whole days since the start of 2000/01/01 (ie the midnight between 1999 and 2000), local time.
// This will roll in about 2179, by which time I will not care.
// Thread-safe and ISR-safe.
uint_least16_t getDaysSince1999LT()
      10:	0c 94 c6 02 	jmp	0x58c	; 0x58c <__bad_interrupt>
  }

// Returns true if any simple schedule is set, false otherwise.
// This implementation just checks for any valid schedule 'on' time.
// In unit-test override mode is true for soon/now, false for off.
bool isAnySimpleScheduleSet()
      14:	0c 94 f9 07 	jmp	0xff2	; 0xff2 <__vector_5>
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) number to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(const unsigned long u, const int fmt)
      18:	0c 94 53 1d 	jmp	0x3aa6	; 0x3aa6 <__vector_6>
    // True if successful, false otherwise (eg capacity already reached).
    bool put(SimpleStatsKey key, int newValue);

    // Create/update value for the given sensor.
    // True if successful, false otherwise (eg capacity already reached).
    template <class T> bool put(const Sensor<T> &s) { return(put(s.tag(), s.get())); }
      1c:	0c 94 c6 02 	jmp	0x58c	; 0x58c <__bad_interrupt>
  public:
    // Return last value fetched by read(); undefined before first read().
    // Usually fast.
    // Often likely to be thread-safe or usable within ISRs (Interrupt Service Routines),
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual uint8_t get() const { return(value); }
      20:	0c 94 c6 02 	jmp	0x58c	; 0x58c <__bad_interrupt>
  // set address of targeted slave
  txAddress = address;
  // reset tx buffer iterator vars
  txBufferIndex = 0;
  txBufferLength = 0;
}
      24:	0c 94 23 1d 	jmp	0x3a46	; 0x3a46 <__vector_9>
 */
void twi_setAddress(uint8_t address)
{
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
}
      28:	0c 94 c6 02 	jmp	0x58c	; 0x58c <__bad_interrupt>

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
      2c:	0c 94 c6 02 	jmp	0x58c	; 0x58c <__bad_interrupt>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
      30:	0c 94 c6 02 	jmp	0x58c	; 0x58c <__bad_interrupt>
  free(ptr);
}

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
void __cxa_guard_abort (__guard *) {}; 
      34:	0c 94 c6 02 	jmp	0x58c	; 0x58c <__bad_interrupt>
  size_t n = print(ifsh);
  n += println();
  return n;
}

size_t Print::print(const Printable& x)
      38:	0c 94 c6 02 	jmp	0x58c	; 0x58c <__bad_interrupt>
	timer0_millis = m;
	timer0_overflow_count++;
}

unsigned long millis()
{
      3c:	0c 94 c6 02 	jmp	0x58c	; 0x58c <__bad_interrupt>
      40:	0c 94 88 3c 	jmp	0x7910	; 0x7910 <__vector_16>
      44:	0c 94 c6 02 	jmp	0x58c	; 0x58c <__bad_interrupt>
      48:	0c 94 6d 38 	jmp	0x70da	; 0x70da <__vector_18>
      4c:	0c 94 bb 38 	jmp	0x7176	; 0x7176 <__vector_19>
      50:	0c 94 c6 02 	jmp	0x58c	; 0x58c <__bad_interrupt>
      54:	0c 94 0c 1e 	jmp	0x3c18	; 0x3c18 <__vector_21>
      58:	0c 94 c6 02 	jmp	0x58c	; 0x58c <__bad_interrupt>
      5c:	0c 94 c6 02 	jmp	0x58c	; 0x58c <__bad_interrupt>
      60:	0c 94 2a 36 	jmp	0x6c54	; 0x6c54 <__vector_24>
      64:	0c 94 c6 02 	jmp	0x58c	; 0x58c <__bad_interrupt>

00000068 <loopOpenTRV()::__c>:
      68:	21 45 52 52 4f 52 3a 20 6c 6f 6f 70 20 6f 76 65     !ERROR: loop ove
      78:	72 72 75 6e 00                                      rrun.

0000007d <loopOpenTRV()::__c>:
      7d:	42 6f 69 6c 65 72 20 6f 6e 2c 20 73 3a 20 00        Boiler on, s: .

0000008c <loopOpenTRV()::__c>:
      8c:	3f 6e 65 61 72 20 6f 76 65 72 72 75 6e 00           ?near overrun.

0000009a <loopOpenTRV()::__c>:
      9a:	3f 44 52 4f 50 50 45 44 20 73 74 61 74 73 3a 20     ?DROPPED stats: 
	...

000000ab <loopOpenTRV()::__c>:
      ab:	52 43 66 48 30 00                                   RCfH0.

000000b1 <loopOpenTRV()::__c>:
      b1:	52 43 66 48 31 00                                   RCfH1.

000000b7 <loopOpenTRV()::__c>:
      b7:	21 52 58 65 72 72 20 46 00                          !RXerr F.

000000c0 <loopOpenTRV()::__c>:
      c0:	43 66 48 20 00                                      CfH .

000000c5 <loopOpenTRV()::__c>:
      c5:	3b 4f 00                                            ;O.

000000c8 <loopOpenTRV()::__c>:
      c8:	3b 4c 00                                            ;L.

000000cb <loopOpenTRV()::__c>:
      cb:	3b 50 00                                            ;P.

000000ce <loopOpenTRV()::__c>:
      ce:	3b 54 00                                            ;T.

000000d1 <bareStatsTX(bool, bool, bool)::__c>:
      d1:	4a 53 4f 4e 20 67 65 6e 20 65 72 72 21 00           JSON gen err!.

000000df <FHT8V_RFM22_Reg_Values>:
      df:	06 00 08 00 30 00 33 06 34 08 35 10 36 aa 37 cc     ....0.3.4.5.6.7.
      ef:	38 cc 39 cc 6d 0b 6e 28 6f f5 70 20 71 21 72 20     8.9.m.n(o.p q!r 
      ff:	73 00 74 00 75 73 76 64 77 00 79 23 7a 01 1c c1     s.t.usvdw.y#z...
     10f:	1d 40 1e 0a 1f 03 20 96 21 00 22 da 23 74 24 00     .@.... .!.".#t$.
     11f:	25 dc 2a 24 2c 28 2d fa 2e 29 69 60 ff ff           %.*$,(-..)i`..

0000012d <FHT8VPollSyncAndTX_Next(bool)::__c>:
     12d:	46 48 54 38 56 20 54 58 00                          FHT8V TX.

00000136 <doSync(bool)::__c>:
     136:	46 48 54 38 56 20 53 59 4e 43 20 46 49 4e 41 4c     FHT8V SYNC FINAL
	...

00000147 <doSync(bool)::__c>:
     147:	46 48 54 38 56 20 53 59 4e 43 2e 2e 2e 00           FHT8V SYNC....

00000155 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)::__c>:
     155:	22 2b 22 3a 00                                      "+":.

0000015a <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)::__c>:
     15a:	22 40 22 3a 22 00                                   "@":".

00000160 <SimpleStatsRotationBase::put(char const*, int)::__c>:
     160:	54 6f 6f 20 6d 61 6e 79 20 6b 65 79 73 3a 20 00     Too many keys: .

00000170 <ensureIDCreated(bool)::__c>:
     170:	20 2e 2e 2e 20 00                                    ... .

00000176 <ensureIDCreated(bool)::__c>:
     176:	49 6e 76 61 6c 69 64 20 49 44 20 62 79 74 65 20     Invalid ID byte 
	...

00000187 <ensureIDCreated(bool)::__c>:
     187:	20 2e 2e 2e 20 00                                    ... .

0000018d <ensureIDCreated(bool)::__c>:
     18d:	53 65 74 74 69 6e 67 20 49 44 20 62 79 74 65 20     Setting ID byte 
	...

0000019e <RFM22CheckConnected()::__c>:
     19e:	52 46 4d 32 32 20 62 61 64 00                       RFM22 bad.

000001a8 <pollCLI(unsigned char)::__c>:
     1a8:	4f 4b 00                                            OK.

000001ab <pollCLI(unsigned char)::__c>:
     1ab:	4e 6f 74 20 66 69 6e 69 73 68 65 64 2e 00           Not finished..

000001b9 <pollCLI(unsigned char)::__c>:
     1b9:	5a 61 70 70 65 64 2e 00                             Zapped..

000001c1 <pollCLI(unsigned char)::__c>:
     1c1:	4f 76 65 72 72 75 6e 73 3a 20 00                    Overruns: .

000001cc <pollCLI(unsigned char)::__c>:
     1cc:	52 65 73 65 74 73 3a 20 00                          Resets: .

000001d5 <pollCLI(unsigned char)::__c>:
     1d5:	68 6f 6c 73 00                                      hols.

000001da <pollCLI(unsigned char)::__c>:
     1da:	6c 61 73 74 00                                      last.

000001df <pollCLI(unsigned char)::__c>:
     1df:	73 6d 6f 6f 74 68 65 64 00                          smoothed.

000001e8 <pollCLI(unsigned char)::__c>:
     1e8:	52 48 25 00                                         RH%.

000001ec <pollCLI(unsigned char)::__c>:
     1ec:	6f 63 63 25 00                                      occ%.

000001f1 <pollCLI(unsigned char)::__c>:
     1f1:	61 6d 62 6c 00                                      ambl.

000001f6 <pollCLI(unsigned char)::__c>:
     1f6:	3f 20 66 6f 72 20 43 4c 49 20 68 65 6c 70 00        ? for CLI help.

00000205 <dumpCLIUsage(unsigned char)::__c>:
     205:	5a 61 70 20 73 74 61 74 73 00                       Zap stats.

0000020f <dumpCLIUsage(unsigned char)::__c>:
     20f:	58 6d 69 74 20 73 65 63 75 72 69 74 79 20 6c 65     Xmit security le
     21f:	76 65 6c 3b 20 30 20 61 6c 77 61 79 73 2c 20 32     vel; 0 always, 2
     22f:	35 35 20 6e 65 76 65 72 00                          55 never.

00000238 <dumpCLIUsage(unsigned char)::__c>:
     238:	73 79 73 20 56 65 72 73 69 6f 6e 00                 sys Version.

00000244 <dumpCLIUsage(unsigned char)::__c>:
     244:	57 61 72 6d 00                                      Warm.

00000249 <dumpCLIUsage(unsigned char)::__c>:
     249:	73 65 74 20 32 34 68 20 54 69 6d 65 00              set 24h Time.

00000256 <dumpCLIUsage(unsigned char)::__c>:
     256:	54 20 48 48 20 4d 4d 00                             T HH MM.

0000025e <dumpCLIUsage(unsigned char)::__c>:
     25e:	73 68 6f 77 20 53 74 61 74 75 73 00                 show Status.

0000026a <dumpCLIUsage(unsigned char)::__c>:
     26a:	51 75 69 63 6b 20 48 65 61 74 00                    Quick Heat.

00000275 <dumpCLIUsage(unsigned char)::__c>:
     275:	72 65 73 65 74 20 4f 70 65 6e 20 25 00              reset Open %.

00000282 <dumpCLIUsage(unsigned char)::__c>:
     282:	6d 69 6e 20 25 20 66 6f 72 20 76 61 6c 76 65 20     min % for valve 
     292:	74 6f 20 62 65 20 4f 70 65 6e 00                    to be Open.

0000029d <dumpCLIUsage(unsigned char)::__c>:
     29d:	4f 20 50 50 00                                      O PP.

000002a2 <dumpCLIUsage(unsigned char)::__c>:
     2a2:	50 72 6f 67 72 61 6d 3a 20 77 61 72 6d 20 64 61     Program: warm da
     2b2:	69 6c 79 20 73 74 61 72 74 69 6e 67 20 61 74 20     ily starting at 
     2c2:	48 48 20 4d 4d 20 73 63 68 65 64 75 6c 65 20 53     HH MM schedule S
	...

000002d3 <dumpCLIUsage(unsigned char)::__c>:
     2d3:	50 20 48 48 20 4d 4d 20 53 00                       P HH MM S.

000002dd <dumpCLIUsage(unsigned char)::__c>:
     2dd:	4c 65 61 72 6e 20 64 61 69 6c 79 20 77 61 72 6d     Learn daily warm
     2ed:	20 6e 6f 77 2c 20 63 6c 65 61 72 20 69 66 20 69      now, clear if i
     2fd:	6e 20 66 72 6f 73 74 20 6d 6f 64 65 2c 20 73 63     n frost mode, sc
     30d:	68 65 64 75 6c 65 20 53 00                          hedule S.

00000316 <dumpCLIUsage(unsigned char)::__c>:
     316:	4c 20 53 00                                         L S.

0000031a <dumpCLIUsage(unsigned char)::__c>:
     31a:	6e 65 77 20 49 44 00                                new ID.

00000321 <dumpCLIUsage(unsigned char)::__c>:
     321:	63 6c 65 61 72 20 48 6f 75 73 65 20 63 6f 64 65     clear House code
     331:	73 00                                               s.

00000333 <dumpCLIUsage(unsigned char)::__c>:
     333:	73 65 74 20 46 48 54 38 56 20 48 6f 75 73 65 20     set FHT8V House 
     343:	63 6f 64 65 73 20 31 26 32 00                       codes 1&2.

0000034d <dumpCLIUsage(unsigned char)::__c>:
     34d:	48 20 48 31 20 48 32 00                             H H1 H2.

00000355 <dumpCLIUsage(unsigned char)::__c>:
     355:	46 72 6f 73 74 00                                   Frost.

0000035b <dumpCLIUsage(unsigned char)::__c>:
     35b:	45 78 69 74 20 43 4c 49 00                          Exit CLI.

00000364 <dumpCLIUsage(unsigned char)::__c>:
     364:	44 75 6d 70 20 73 74 61 74 73 20 73 65 74 20 4e     Dump stats set N
	...

00000375 <dumpCLIUsage(unsigned char)::__c>:
     375:	44 20 4e 00                                         D N.

00000379 <dumpCLIUsage(unsigned char)::__c>:
     379:	43 65 6e 74 72 61 6c 20 68 75 62 20 3e 3d 4d 20     Central hub >=M 
     389:	6d 69 6e 73 20 6f 6e 2c 20 30 20 6f 66 66 00        mins on, 0 off.

00000398 <dumpCLIUsage(unsigned char)::__c>:
     398:	43 20 4d 00                                         C M.

0000039c <dumpCLIUsage(unsigned char)::__c>:
     39c:	74 68 69 73 20 68 65 6c 70 00                       this help.

000003a6 <InvalidIgnored()::__c>:
     3a6:	49 6e 76 61 6c 69 64 2c 20 69 67 6e 6f 72 65 64     Invalid, ignored
     3b6:	2e 00                                               ..

000003b8 <serialStatusReport()::__c>:
     3b8:	3b 4d 00                                            ;M.

000003bb <serialStatusReport()::__c>:
     3bb:	3b 48 43 00                                         ;HC.

000003bf <serialStatusReport()::__c>:
     3bf:	3b 58 00                                            ;X.

000003c2 <setup::__c>:
     3c2:	3f 20 61 74 20 43 4c 49 20 70 72 6f 6d 70 74 20     ? at CLI prompt 
     3d2:	66 6f 72 20 68 65 6c 70 00                          for help.

000003db <setup::__c>:
     3db:	42 61 64 20 49 44 20 61 6e 64 20 63 61 6e 6e 6f     Bad ID and canno
     3eb:	74 20 72 65 73 65 74 2e 00                          t reset..

000003f4 <setup::__c>:
     3f4:	6d 56 00                                            mV.

000003f7 <setup::__c>:
     3f7:	56 63 63 3a 20 00                                   Vcc: .

000003fd <setup::__c>:
     3fd:	54 3a 20 00                                         T: .

00000401 <setup::__c>:
     401:	46 72 65 65 20 52 41 4d 3a 20 00                    Free RAM: .

0000040c <setup::__c>:
     40c:	4f 76 65 72 72 75 6e 73 3a 20 00                    Overruns: .

00000417 <setup::__c>:
     417:	52 65 73 65 74 73 3a 20 00                          Resets: .

00000420 <setup::__c>:
     420:	44 45 42 55 47 20 62 75 69 6c 64 00                 DEBUG build.

0000042c <setup::__c>:
     42c:	0d 0a 4f 70 65 6e 54 52 56 20 62 6f 6f 74 69 6e     ..OpenTRV bootin
     43c:	67 3a 20 00                                         g: .

00000440 <optionalPOST()::__c>:
     440:	52 61 64 69 6f 2c 20 78 74 61 6c 2c 20 62 75 74     Radio, xtal, but
     450:	74 6f 6e 73 20 4f 4b 00                             tons OK.

00000458 <optionalPOST()::__c>:
     458:	58 74 61 6c 20 64 65 61 64 00                       Xtal dead.

00000462 <optionalPOST()::__c>:
     462:	62 75 74 74 6f 6e 20 73 74 75 63 6b 00              button stuck.

0000046f <posPOST(unsigned char, __FlashStringHelper const*)::__c>:
     46f:	3a 20 00                                            : .

00000472 <posPOST(unsigned char, __FlashStringHelper const*)::__c>:
     472:	70 6f 73 50 4f 53 54 3a 20 00                       posPOST: .

0000047c <serialPrintlnBuildVersion()::__c>:
     47c:	20 32 33 3a 31 37 3a 31 37 00                        23:17:17.

00000486 <serialPrintlnBuildVersion()::__c>:
     486:	3b 20 63 6f 64 65 20 24 49 64 3a 20 56 30 70 32     ; code $Id: V0p2
     496:	5f 4d 61 69 6e 2e 69 6e 6f 20 33 38 36 34 20 32     _Main.ino 3864 2
     4a6:	30 31 34 2d 31 32 2d 31 30 20 32 31 3a 30 31 3a     014-12-10 21:01:
     4b6:	35 34 5a 20 64 61 6d 6f 6e 68 64 20 24 20 00        54Z damonhd $ .

000004c5 <serialPrintlnBuildVersion()::__c>:
     4c5:	62 6f 61 72 64 20 56 30 2e 32 20 52 45 56 00        board V0.2 REV.

000004d4 <port_to_mode_PGM>:
     4d4:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000004de <port_to_output_PGM>:
     4de:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000004e8 <port_to_input_PGM>:
     4e8:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000004f2 <digital_pin_to_port_PGM>:
     4f2:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     502:	03 03 03 03                                         ....

00000506 <digital_pin_to_bit_mask_PGM>:
     506:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     516:	04 08 10 20                                         ... 

0000051a <digital_pin_to_timer_PGM>:
     51a:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     52a:	00 00 00 00                                         ....

0000052e <__ctors_start>:
     52e:	d9 06       	cpc	r13, r25
     530:	15 20       	and	r1, r5
     532:	bc 21       	and	r27, r12
     534:	33 2f       	mov	r19, r19
     536:	48 32       	cpi	r20, 0x28	; 40
     538:	c6 34       	cpi	r28, 0x46	; 70
     53a:	84 3a       	cpi	r24, 0xA4	; 164

0000053c <__ctors_end>:
     53c:	11 24       	eor	r1, r1
     53e:	1f be       	out	0x3f, r1	; 63
     540:	cf ef       	ldi	r28, 0xFF	; 255
     542:	d8 e0       	ldi	r29, 0x08	; 8
     544:	de bf       	out	0x3e, r29	; 62
     546:	cd bf       	out	0x3d, r28	; 61

00000548 <__do_copy_data>:
     548:	12 e0       	ldi	r17, 0x02	; 2
     54a:	a0 e0       	ldi	r26, 0x00	; 0
     54c:	b1 e0       	ldi	r27, 0x01	; 1
     54e:	e6 e5       	ldi	r30, 0x56	; 86
     550:	fc e7       	ldi	r31, 0x7C	; 124
     552:	02 c0       	rjmp	.+4      	; 0x558 <.do_copy_data_start>

00000554 <.do_copy_data_loop>:
     554:	05 90       	lpm	r0, Z+
     556:	0d 92       	st	X+, r0

00000558 <.do_copy_data_start>:
     558:	a2 31       	cpi	r26, 0x12	; 18
     55a:	b1 07       	cpc	r27, r17
     55c:	d9 f7       	brne	.-10     	; 0x554 <.do_copy_data_loop>

0000055e <__do_clear_bss>:
     55e:	15 e0       	ldi	r17, 0x05	; 5
     560:	a2 e1       	ldi	r26, 0x12	; 18
     562:	b2 e0       	ldi	r27, 0x02	; 2
     564:	01 c0       	rjmp	.+2      	; 0x568 <.do_clear_bss_start>

00000566 <.do_clear_bss_loop>:
     566:	1d 92       	st	X+, r1

00000568 <.do_clear_bss_start>:
     568:	a9 34       	cpi	r26, 0x49	; 73
     56a:	b1 07       	cpc	r27, r17
     56c:	e1 f7       	brne	.-8      	; 0x566 <.do_clear_bss_loop>

0000056e <__do_global_ctors>:
     56e:	15 e0       	ldi	r17, 0x05	; 5
     570:	cc e3       	ldi	r28, 0x3C	; 60
     572:	d5 e0       	ldi	r29, 0x05	; 5
     574:	04 c0       	rjmp	.+8      	; 0x57e <.do_global_ctors_start>

00000576 <.do_global_ctors_loop>:
     576:	22 97       	sbiw	r28, 0x02	; 2
     578:	fe 01       	movw	r30, r28
     57a:	0e 94 1d 3e 	call	0x7c3a	; 0x7c3a <__tablejump__>

0000057e <.do_global_ctors_start>:
     57e:	ce 32       	cpi	r28, 0x2E	; 46
     580:	d1 07       	cpc	r29, r17
     582:	c9 f7       	brne	.-14     	; 0x576 <.do_global_ctors_loop>
     584:	0e 94 da 3a 	call	0x75b4	; 0x75b4 <main>
     588:	0c 94 29 3e 	jmp	0x7c52	; 0x7c52 <_exit>

0000058c <__bad_interrupt>:
     58c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000590 <abort>:
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	f8 94       	cli
     596:	0c 94 29 3e 	jmp	0x7c52	; 0x7c52 <_exit>

0000059a <atoi>:
     59a:	fc 01       	movw	r30, r24
     59c:	88 27       	eor	r24, r24
     59e:	99 27       	eor	r25, r25
     5a0:	e8 94       	clt
     5a2:	21 91       	ld	r18, Z+
     5a4:	20 32       	cpi	r18, 0x20	; 32
     5a6:	e9 f3       	breq	.-6      	; 0x5a2 <atoi+0x8>
     5a8:	29 30       	cpi	r18, 0x09	; 9
     5aa:	10 f0       	brcs	.+4      	; 0x5b0 <atoi+0x16>
     5ac:	2e 30       	cpi	r18, 0x0E	; 14
     5ae:	c8 f3       	brcs	.-14     	; 0x5a2 <atoi+0x8>
     5b0:	2b 32       	cpi	r18, 0x2B	; 43
     5b2:	41 f0       	breq	.+16     	; 0x5c4 <atoi+0x2a>
     5b4:	2d 32       	cpi	r18, 0x2D	; 45
     5b6:	39 f4       	brne	.+14     	; 0x5c6 <atoi+0x2c>
     5b8:	68 94       	set
     5ba:	04 c0       	rjmp	.+8      	; 0x5c4 <atoi+0x2a>
     5bc:	0e 94 77 03 	call	0x6ee	; 0x6ee <__mulhi_const_10>
     5c0:	82 0f       	add	r24, r18
     5c2:	91 1d       	adc	r25, r1
     5c4:	21 91       	ld	r18, Z+
     5c6:	20 53       	subi	r18, 0x30	; 48
     5c8:	2a 30       	cpi	r18, 0x0A	; 10
     5ca:	c0 f3       	brcs	.-16     	; 0x5bc <atoi+0x22>
     5cc:	1e f4       	brtc	.+6      	; 0x5d4 <atoi+0x3a>
     5ce:	90 95       	com	r25
     5d0:	81 95       	neg	r24
     5d2:	9f 4f       	sbci	r25, 0xFF	; 255
     5d4:	08 95       	ret

000005d6 <strlen_P>:
     5d6:	fc 01       	movw	r30, r24
     5d8:	05 90       	lpm	r0, Z+
     5da:	00 20       	and	r0, r0
     5dc:	e9 f7       	brne	.-6      	; 0x5d8 <strlen_P+0x2>
     5de:	80 95       	com	r24
     5e0:	90 95       	com	r25
     5e2:	8e 0f       	add	r24, r30
     5e4:	9f 1f       	adc	r25, r31
     5e6:	08 95       	ret

000005e8 <memset>:
     5e8:	dc 01       	movw	r26, r24
     5ea:	01 c0       	rjmp	.+2      	; 0x5ee <memset+0x6>
     5ec:	6d 93       	st	X+, r22
     5ee:	41 50       	subi	r20, 0x01	; 1
     5f0:	50 40       	sbci	r21, 0x00	; 0
     5f2:	e0 f7       	brcc	.-8      	; 0x5ec <memset+0x4>
     5f4:	08 95       	ret

000005f6 <strcmp>:
     5f6:	fb 01       	movw	r30, r22
     5f8:	dc 01       	movw	r26, r24
     5fa:	8d 91       	ld	r24, X+
     5fc:	01 90       	ld	r0, Z+
     5fe:	80 19       	sub	r24, r0
     600:	01 10       	cpse	r0, r1
     602:	d9 f3       	breq	.-10     	; 0x5fa <strcmp+0x4>
     604:	99 0b       	sbc	r25, r25
     606:	08 95       	ret

00000608 <strcpy>:
     608:	fb 01       	movw	r30, r22
     60a:	dc 01       	movw	r26, r24
     60c:	01 90       	ld	r0, Z+
     60e:	0d 92       	st	X+, r0
     610:	00 20       	and	r0, r0
     612:	e1 f7       	brne	.-8      	; 0x60c <strcpy+0x4>
     614:	08 95       	ret

00000616 <strncpy>:
     616:	fb 01       	movw	r30, r22
     618:	dc 01       	movw	r26, r24
     61a:	41 50       	subi	r20, 0x01	; 1
     61c:	50 40       	sbci	r21, 0x00	; 0
     61e:	48 f0       	brcs	.+18     	; 0x632 <strncpy+0x1c>
     620:	01 90       	ld	r0, Z+
     622:	0d 92       	st	X+, r0
     624:	00 20       	and	r0, r0
     626:	c9 f7       	brne	.-14     	; 0x61a <strncpy+0x4>
     628:	01 c0       	rjmp	.+2      	; 0x62c <strncpy+0x16>
     62a:	1d 92       	st	X+, r1
     62c:	41 50       	subi	r20, 0x01	; 1
     62e:	50 40       	sbci	r21, 0x00	; 0
     630:	e0 f7       	brcc	.-8      	; 0x62a <strncpy+0x14>
     632:	08 95       	ret

00000634 <strtok_r>:
     634:	00 97       	sbiw	r24, 0x00	; 0
     636:	31 f4       	brne	.+12     	; 0x644 <strtok_r+0x10>
     638:	da 01       	movw	r26, r20
     63a:	8d 91       	ld	r24, X+
     63c:	9c 91       	ld	r25, X
     63e:	00 97       	sbiw	r24, 0x00	; 0
     640:	09 f4       	brne	.+2      	; 0x644 <strtok_r+0x10>
     642:	0e c0       	rjmp	.+28     	; 0x660 <strtok_r+0x2c>
     644:	dc 01       	movw	r26, r24
     646:	fb 01       	movw	r30, r22
     648:	3d 91       	ld	r19, X+
     64a:	21 91       	ld	r18, Z+
     64c:	22 23       	and	r18, r18
     64e:	19 f0       	breq	.+6      	; 0x656 <strtok_r+0x22>
     650:	32 17       	cp	r19, r18
     652:	c9 f3       	breq	.-14     	; 0x646 <strtok_r+0x12>
     654:	fa cf       	rjmp	.-12     	; 0x64a <strtok_r+0x16>
     656:	33 23       	and	r19, r19
     658:	31 f4       	brne	.+12     	; 0x666 <strtok_r+0x32>
     65a:	da 01       	movw	r26, r20
     65c:	1d 92       	st	X+, r1
     65e:	1c 92       	st	X, r1
     660:	88 27       	eor	r24, r24
     662:	99 27       	eor	r25, r25
     664:	08 95       	ret
     666:	11 97       	sbiw	r26, 0x01	; 1
     668:	af 93       	push	r26
     66a:	bf 93       	push	r27
     66c:	fb 01       	movw	r30, r22
     66e:	3d 91       	ld	r19, X+
     670:	21 91       	ld	r18, Z+
     672:	32 17       	cp	r19, r18
     674:	71 f4       	brne	.+28     	; 0x692 <strtok_r+0x5e>
     676:	33 23       	and	r19, r19
     678:	21 f4       	brne	.+8      	; 0x682 <strtok_r+0x4e>
     67a:	88 27       	eor	r24, r24
     67c:	99 27       	eor	r25, r25
     67e:	11 97       	sbiw	r26, 0x01	; 1
     680:	02 c0       	rjmp	.+4      	; 0x686 <strtok_r+0x52>
     682:	1e 92       	st	-X, r1
     684:	11 96       	adiw	r26, 0x01	; 1
     686:	fa 01       	movw	r30, r20
     688:	a1 93       	st	Z+, r26
     68a:	b0 83       	st	Z, r27
     68c:	9f 91       	pop	r25
     68e:	8f 91       	pop	r24
     690:	08 95       	ret
     692:	22 23       	and	r18, r18
     694:	69 f7       	brne	.-38     	; 0x670 <strtok_r+0x3c>
     696:	ea cf       	rjmp	.-44     	; 0x66c <strtok_r+0x38>

00000698 <__eerd_word>:
     698:	df 92       	push	r13
     69a:	ef 92       	push	r14
     69c:	ff 92       	push	r15
     69e:	0f 93       	push	r16
     6a0:	1f 93       	push	r17
     6a2:	7b 01       	movw	r14, r22
     6a4:	8c 01       	movw	r16, r24
     6a6:	fb 01       	movw	r30, r22
     6a8:	09 95       	icall
     6aa:	d8 2e       	mov	r13, r24
     6ac:	c8 01       	movw	r24, r16
     6ae:	01 96       	adiw	r24, 0x01	; 1
     6b0:	f7 01       	movw	r30, r14
     6b2:	09 95       	icall
     6b4:	98 2f       	mov	r25, r24
     6b6:	8d 2d       	mov	r24, r13
     6b8:	1f 91       	pop	r17
     6ba:	0f 91       	pop	r16
     6bc:	ff 90       	pop	r15
     6be:	ef 90       	pop	r14
     6c0:	df 90       	pop	r13
     6c2:	08 95       	ret

000006c4 <__eewr_word>:
     6c4:	df 92       	push	r13
     6c6:	ef 92       	push	r14
     6c8:	ff 92       	push	r15
     6ca:	0f 93       	push	r16
     6cc:	1f 93       	push	r17
     6ce:	d7 2e       	mov	r13, r23
     6d0:	7a 01       	movw	r14, r20
     6d2:	8c 01       	movw	r16, r24
     6d4:	fa 01       	movw	r30, r20
     6d6:	09 95       	icall
     6d8:	c8 01       	movw	r24, r16
     6da:	01 96       	adiw	r24, 0x01	; 1
     6dc:	6d 2d       	mov	r22, r13
     6de:	f7 01       	movw	r30, r14
     6e0:	09 95       	icall
     6e2:	1f 91       	pop	r17
     6e4:	0f 91       	pop	r16
     6e6:	ff 90       	pop	r15
     6e8:	ef 90       	pop	r14
     6ea:	df 90       	pop	r13
     6ec:	08 95       	ret

000006ee <__mulhi_const_10>:
     6ee:	7a e0       	ldi	r23, 0x0A	; 10
     6f0:	97 9f       	mul	r25, r23
     6f2:	90 2d       	mov	r25, r0
     6f4:	87 9f       	mul	r24, r23
     6f6:	80 2d       	mov	r24, r0
     6f8:	91 0d       	add	r25, r1
     6fa:	11 24       	eor	r1, r1
     6fc:	08 95       	ret

000006fe <SimpleTSUint8Sensor::get() const>:
     6fe:	fc 01       	movw	r30, r24
     700:	82 81       	ldd	r24, Z+2	; 0x02
     702:	08 95       	ret

00000704 <SimpleTSUint8Actuator::get() const>:
  public:
    // Return last value fetched by read(); undefined before first read().
    // Usually fast.
    // Often likely to be thread-safe or usable within ISRs (Interrupt Service Routines),
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual uint8_t get() const { return(value); }
     704:	fc 01       	movw	r30, r24
     706:	82 81       	ldd	r24, Z+2	; 0x02
     708:	08 95       	ret

0000070a <AbstractRadValve::isValid(unsigned char) const>:
// Implementations may require poll() called at a fixed rate.
class AbstractRadValve : public SimpleTSUint8Actuator
  {
  public:
    // Returns true if this sensor reading value passed is valid, eg in range [0,100].
    virtual bool isValid(const uint8_t value) const { return(value <= 100); }
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	65 36       	cpi	r22, 0x65	; 101
     70e:	08 f4       	brcc	.+2      	; 0x712 <AbstractRadValve::isValid(unsigned char) const+0x8>
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	08 95       	ret

00000714 <ModelledRadValve::preferredPollInterval_s() const>:
    // Potentially expensive/slow.
    virtual uint8_t read() { computeCallForHeat(); return(value); }

    // Returns preferred poll interval (in seconds); non-zero.
    // Must be polled at near constant rate, about once per minute.
    virtual uint8_t preferredPollInterval_s() const { return(60); }
     714:	8c e3       	ldi	r24, 0x3C	; 60
     716:	08 95       	ret

00000718 <ModelledRadValve::tag() const>:

    // Returns a suggested (JSON) tag/field/key name including units of get(); NULL means no recommended tag.
    // The lifetime of the pointed-to text must be at least that of the Sensor instance.
    virtual const char *tag() const { return("v|%"); }
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	91 e0       	ldi	r25, 0x01	; 1
     71c:	08 95       	ret

0000071e <ModelledRadValve::getMinPercentOpen() const>:
// At the boiler hub this is also the threshold percentage-open on eavesdropped requests that will call for heat.
// If no override is set then DEFAULT_MIN_VALVE_PC_REALLY_OPEN is used.
// NOTE: raising this value temporarily (and shutting down the boiler immediately if possible) is one way to implement dynamic demand.
uint8_t ModelledRadValve::getMinValvePcReallyOpen()
  {
  if(0 != mVPRO_cache) { return(mVPRO_cache); } // Return cached value if possible.
     71e:	90 91 3e 02 	lds	r25, 0x023E
     722:	99 23       	and	r25, r25
     724:	79 f4       	brne	.+30     	; 0x744 <ModelledRadValve::getMinPercentOpen() const+0x26>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     726:	f9 99       	sbic	0x1f, 1	; 31
     728:	fe cf       	rjmp	.-4      	; 0x726 <ModelledRadValve::getMinPercentOpen() const+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     72a:	83 e1       	ldi	r24, 0x13	; 19
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	92 bd       	out	0x22, r25	; 34
     730:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     732:	f8 9a       	sbi	0x1f, 0	; 31
     734:	90 b5       	in	r25, 0x20	; 32
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_MIN_VALVE_PC_REALLY_OPEN);
  const uint8_t result = ((stored > 0) && (stored <= 100)) ? stored : DEFAULT_MIN_VALVE_PC_REALLY_OPEN;
     736:	89 2f       	mov	r24, r25
     738:	81 50       	subi	r24, 0x01	; 1
     73a:	84 36       	cpi	r24, 0x64	; 100
     73c:	08 f0       	brcs	.+2      	; 0x740 <ModelledRadValve::getMinPercentOpen() const+0x22>
     73e:	9a e0       	ldi	r25, 0x0A	; 10
  mVPRO_cache = result; // Cache it.
     740:	90 93 3e 02 	sts	0x023E, r25
    // then this should return true if any of the valves are (significantly) open.
    virtual bool isControlledValveReallyOpen() const;

    // Get estimated minimum percentage open for significant flow [1,99] for this device.
    // Return global node value.
    virtual uint8_t getMinPercentOpen() const { return(getMinValvePcReallyOpen()); }
     744:	89 2f       	mov	r24, r25
     746:	08 95       	ret

00000748 <OccupancyTracker::isValid(unsigned char) const>:
    // Poll at a fixed rate.
    virtual uint8_t read();

    // Returns true if this sensor reading value passed is potentially valid, eg in-range.
    // True if in range [0,100].
    virtual bool isValid(uint8_t value) const { return(value <= 100); }
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	65 36       	cpi	r22, 0x65	; 101
     74c:	08 f4       	brcc	.+2      	; 0x750 <OccupancyTracker::isValid(unsigned char) const+0x8>
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	08 95       	ret

00000752 <OccupancyTracker::preferredPollInterval_s() const>:

    // This routine should be called once per minute.
    virtual uint8_t preferredPollInterval_s() const { return(60); }
     752:	8c e3       	ldi	r24, 0x3C	; 60
     754:	08 95       	ret

00000756 <OccupancyTracker::tag() const>:

    // Recommended JSON tag for full value; not NULL.
    virtual const char *tag() const { return("occ|%"); }
     756:	84 e0       	ldi	r24, 0x04	; 4
     758:	91 e0       	ldi	r25, 0x01	; 1
     75a:	08 95       	ret

0000075c <inWarmMode()>:
// If true then is in WARM (or BAKE) mode; defaults to (starts as) false/FROST.
// Should be only be set when 'debounced'.
// Defaults to (starts as) false/FROST.
static bool isWarmMode;
// If true then the unit is in 'warm' (heating) mode, else 'frost' protection mode.
bool inWarmMode() { return(isWarmMode); }
     75c:	80 91 9f 02 	lds	r24, 0x029F
     760:	08 95       	ret

00000762 <setWarmModeDebounced(bool)>:
  DEBUG_SERIAL_PRINT_FLASHSTRING("Call to setWarmModeDebounced(");
  DEBUG_SERIAL_PRINT(warm);
  DEBUG_SERIAL_PRINT_FLASHSTRING(")");
  DEBUG_SERIAL_PRINTLN();
#endif
  isWarmMode = warm;
     762:	80 93 9f 02 	sts	0x029F, r24
#ifdef SUPPORT_BAKE
  if(!warm) { cancelBakeDebounced(); }
     766:	88 23       	and	r24, r24
     768:	11 f4       	brne	.+4      	; 0x76e <setWarmModeDebounced(bool)+0xc>
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// Should be only be called once 'debounced' if coming from a button press for example.
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBakeDebounced() { bakeCountdownM = 0; }
     76a:	10 92 9c 02 	sts	0x029C, r1
     76e:	08 95       	ret

00000770 <inBakeMode()>:

#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
     770:	80 91 9f 02 	lds	r24, 0x029F
     774:	88 23       	and	r24, r24
     776:	21 f0       	breq	.+8      	; 0x780 <inBakeMode()+0x10>
     778:	80 91 9c 02 	lds	r24, 0x029C
     77c:	81 11       	cpse	r24, r1
     77e:	81 e0       	ldi	r24, 0x01	; 1
     780:	08 95       	ret

00000782 <cancelBakeDebounced()>:
// Should be only be called once 'debounced' if coming from a button press for example.
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBakeDebounced() { bakeCountdownM = 0; }
     782:	10 92 9c 02 	sts	0x029C, r1
     786:	08 95       	ret

00000788 <startBakeDebounced()>:
// Start/restart 'BAKE' mode and timeout.
// Should be only be called once 'debounced' if coming from a button press for example.
void startBakeDebounced() { isWarmMode = true; bakeCountdownM = BAKE_MAX_M; }
     788:	81 e0       	ldi	r24, 0x01	; 1
     78a:	80 93 9f 02 	sts	0x029F, r24
     78e:	8e e1       	ldi	r24, 0x1E	; 30
     790:	80 93 9c 02 	sts	0x029C, r24
     794:	08 95       	ret

00000796 <getWARMTargetC()>:
     796:	20 91 cc 03 	lds	r18, 0x03CC
  // Cached input and result values; initially zero.
  static uint8_t potLast;
  static uint8_t resultLast;
  // Force recomputation if pot value changed
  // or apparently no calc done yet (unlikely/impossible zero cached result).
  if((potLast != pot) || (0 == resultLast))
     79a:	80 91 9e 02 	lds	r24, 0x029E
     79e:	82 17       	cp	r24, r18
     7a0:	21 f4       	brne	.+8      	; 0x7aa <getWARMTargetC()+0x14>
     7a2:	80 91 9d 02 	lds	r24, 0x029D
     7a6:	88 23       	and	r24, r24
     7a8:	99 f4       	brne	.+38     	; 0x7d0 <getWARMTargetC()+0x3a>
  const uint8_t range = TEMP_SCALE_MAX - TEMP_SCALE_MIN + 1;
  const uint8_t band = 256 / range; // Width of band for each degree C...

  // If there are is relatively small number of distinct temperature values
  // then compute result iteratively...
  if(pot >= 256 - band) { return(TEMP_SCALE_MAX); } // At top... (optimisation / robustness)
     7aa:	2c 3d       	cpi	r18, 0xDC	; 220
     7ac:	10 f0       	brcs	.+4      	; 0x7b2 <getWARMTargetC()+0x1c>
     7ae:	86 e1       	ldi	r24, 0x16	; 22
     7b0:	0b c0       	rjmp	.+22     	; 0x7c8 <getWARMTargetC()+0x32>
  if(pot < band) { return(TEMP_SCALE_MIN); } // At bottom... (optimisation / robustness)
     7b2:	24 32       	cpi	r18, 0x24	; 36
     7b4:	10 f4       	brcc	.+4      	; 0x7ba <getWARMTargetC()+0x24>
     7b6:	80 e1       	ldi	r24, 0x10	; 16
     7b8:	07 c0       	rjmp	.+14     	; 0x7c8 <getWARMTargetC()+0x32>
     7ba:	98 e4       	ldi	r25, 0x48	; 72
     7bc:	81 e1       	ldi	r24, 0x11	; 17
     7be:	02 c0       	rjmp	.+4      	; 0x7c4 <getWARMTargetC()+0x2e>
  if(range < 10)
    {
    uint8_t result = TEMP_SCALE_MIN+1;
    for(uint8_t ppot = band<<1; ppot < pot; ++result) { ppot += band; }
     7c0:	9c 5d       	subi	r25, 0xDC	; 220
     7c2:	8f 5f       	subi	r24, 0xFF	; 255
     7c4:	92 17       	cp	r25, r18
     7c6:	e0 f3       	brcs	.-8      	; 0x7c0 <getWARMTargetC()+0x2a>
  // or apparently no calc done yet (unlikely/impossible zero cached result).
  if((potLast != pot) || (0 == resultLast))
    {
    const uint8_t result = computeWARMTargetC(pot);
    // Cache input/result.
    resultLast = result;
     7c8:	80 93 9d 02 	sts	0x029D, r24
    potLast = pot;
     7cc:	20 93 9e 02 	sts	0x029E, r18
    return(result);
    }

  // Return cached result.
  return(resultLast);
  }
     7d0:	08 95       	ret

000007d2 <hasEcoBias()>:
//// Optimisiation/simplication: true if temp pot less than about half way.
//bool hasEcoBias() { return(TempPot.get() <= 128); }
//#else
// True if WARM temperature at/below halfway mark between eco and comfort levels.
// Midpoint should be just eco to provide a system bias toward eco.
bool hasEcoBias() { return(getWARMTargetC() <= TEMP_SCALE_MID); }
     7d2:	0e 94 cb 03 	call	0x796	; 0x796 <getWARMTargetC()>
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	84 31       	cpi	r24, 0x14	; 20
     7da:	08 f4       	brcc	.+2      	; 0x7de <hasEcoBias()+0xc>
     7dc:	91 e0       	ldi	r25, 0x01	; 1
     7de:	89 2f       	mov	r24, r25
     7e0:	08 95       	ret

000007e2 <getFROSTTargetC()>:
#if defined(TEMP_POT_AVAILABLE)
// Derived from temperature pot position.
uint8_t getFROSTTargetC()
  {
  // Prevent falling to lowest frost temperature if relative humidity is high (eg to avoid mould).
  const uint8_t result = (!hasEcoBias() || (RelHumidity.isAvailable() && RelHumidity.isRHHighWithHyst())) ? BIASCOM_FROST : BIASECO_FROST;
     7e2:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <hasEcoBias()>
     7e6:	88 23       	and	r24, r24
     7e8:	31 f0       	breq	.+12     	; 0x7f6 <getFROSTTargetC()+0x14>
    // Thread-safe and usable within ISRs (Interrupt Service Routines).
    bool isRHHigh() { return(get() > (HUMIDTY_HIGH_RHPC+HUMIDITY_EPSILON_RHPC)); }

    // True if RH% high with a hysteresis band of 2 * HUMIDITY_EPSILON_RHPC.
    // Thread-safe and usable within ISRs (Interrupt Service Routines).
    bool isRHHighWithHyst() { return(highWithHyst); }
     7ea:	80 91 c5 03 	lds	r24, 0x03C5
     7ee:	88 23       	and	r24, r24
     7f0:	11 f4       	brne	.+4      	; 0x7f6 <getFROSTTargetC()+0x14>
     7f2:	27 e0       	ldi	r18, 0x07	; 7
     7f4:	01 c0       	rjmp	.+2      	; 0x7f8 <getFROSTTargetC()+0x16>
     7f6:	2c e0       	ldi	r18, 0x0C	; 12
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     7f8:	f9 99       	sbic	0x1f, 1	; 31
     7fa:	fe cf       	rjmp	.-4      	; 0x7f8 <getFROSTTargetC()+0x16>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     7fc:	8e e0       	ldi	r24, 0x0E	; 14
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	92 bd       	out	0x22, r25	; 34
     802:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     804:	f8 9a       	sbi	0x1f, 0	; 31
     806:	90 b5       	in	r25, 0x20	; 32
#if defined(SETTABLE_TARGET_TEMPERATURES)
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_FROST_C);
  // If stored value is set and in bounds and higher than computed value then use stored value instead.
  if((stored >= MIN_TARGET_C) && (stored <= MAX_TARGET_C) && (stored > result)) { return(stored); }
     808:	89 2f       	mov	r24, r25
     80a:	85 50       	subi	r24, 0x05	; 5
     80c:	8b 35       	cpi	r24, 0x5B	; 91
     80e:	10 f0       	brcs	.+4      	; 0x814 <getFROSTTargetC()+0x32>
     810:	82 2f       	mov	r24, r18
     812:	08 95       	ret
     814:	89 2f       	mov	r24, r25
     816:	92 17       	cp	r25, r18
     818:	08 f4       	brcc	.+2      	; 0x81c <getFROSTTargetC()+0x3a>
     81a:	82 2f       	mov	r24, r18
#endif
  return(result);
  }
     81c:	08 95       	ret

0000081e <getMinBoilerOnMinutes()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     81e:	f9 99       	sbic	0x1f, 1	; 31
     820:	fe cf       	rjmp	.-4      	; 0x81e <getMinBoilerOnMinutes()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     822:	82 e1       	ldi	r24, 0x12	; 18
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	92 bd       	out	0x22, r25	; 34
     828:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     82a:	f8 9a       	sbi	0x1f, 0	; 31
     82c:	80 b5       	in	r24, 0x20	; 32
#endif


#ifndef getMinBoilerOnMinutes
// Get minimum on (and off) time for pointer (minutes); zero if not in hub mode.
uint8_t getMinBoilerOnMinutes() { return(~eeprom_read_byte((uint8_t *)EE_START_MIN_BOILER_ON_MINS_INV)); }
     82e:	80 95       	com	r24
     830:	08 95       	ret

00000832 <OccupancyTracker::read()>:
#elif OCCUPATION_TIMEOUT_M <= 100
#define OCCCP_SHIFT 0
#endif

// Update notion of occupancy confidence.
uint8_t OccupancyTracker::read()
     832:	df 93       	push	r29
     834:	cf 93       	push	r28
     836:	00 d0       	rcall	.+0      	; 0x838 <OccupancyTracker::read()+0x6>
     838:	cd b7       	in	r28, 0x3d	; 61
     83a:	de b7       	in	r29, 0x3e	; 62
     83c:	fc 01       	movw	r30, r24
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
     83e:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     840:	f8 94       	cli
    {
    // Compute as percentage.
    const uint8_t newValue = (0 == occupationCountdownM) ? 0 :
        fnmin((uint8_t)((uint8_t)100 - (uint8_t)((((uint8_t)OCCUPATION_TIMEOUT_M) - occupationCountdownM) << OCCCP_SHIFT)), (uint8_t)100);
     842:	83 81       	ldd	r24, Z+3	; 0x03
     844:	88 23       	and	r24, r24
     846:	11 f4       	brne	.+4      	; 0x84c <OccupancyTracker::read()+0x1a>
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	0d c0       	rjmp	.+26     	; 0x866 <OccupancyTracker::read()+0x34>
     84c:	83 81       	ldd	r24, Z+3	; 0x03
     84e:	92 e3       	ldi	r25, 0x32	; 50
     850:	98 1b       	sub	r25, r24
     852:	99 0f       	add	r25, r25
     854:	84 e6       	ldi	r24, 0x64	; 100
     856:	38 2f       	mov	r19, r24
     858:	39 1b       	sub	r19, r25
     85a:	93 2f       	mov	r25, r19
     85c:	39 83       	std	Y+1, r19	; 0x01
     85e:	8a 83       	std	Y+2, r24	; 0x02




// Templated function versions of min/max that do not evaluate the arguments twice.
template <class T> const T& fnmin(const T& a, const T& b) { return((a>b)?b:a); }
     860:	35 36       	cpi	r19, 0x65	; 101
     862:	08 f0       	brcs	.+2      	; 0x866 <OccupancyTracker::read()+0x34>
     864:	94 e6       	ldi	r25, 0x64	; 100
    value = newValue;
     866:	92 83       	std	Z+2, r25	; 0x02
    // Run down occupation timer (or run up vacancy time) if need be.
    if(occupationCountdownM > 0) { --occupationCountdownM; vacancyM = 0; vacancyH = 0; }
     868:	83 81       	ldd	r24, Z+3	; 0x03
     86a:	88 23       	and	r24, r24
     86c:	31 f0       	breq	.+12     	; 0x87a <OccupancyTracker::read()+0x48>
     86e:	83 81       	ldd	r24, Z+3	; 0x03
     870:	81 50       	subi	r24, 0x01	; 1
     872:	83 83       	std	Z+3, r24	; 0x03
     874:	16 82       	std	Z+6, r1	; 0x06
     876:	15 82       	std	Z+5, r1	; 0x05
     878:	0b c0       	rjmp	.+22     	; 0x890 <OccupancyTracker::read()+0x5e>
    else if(vacancyH < 0xffU) { if(++vacancyM >= 60) { vacancyM = 0; ++vacancyH; } }
     87a:	95 81       	ldd	r25, Z+5	; 0x05
     87c:	9f 3f       	cpi	r25, 0xFF	; 255
     87e:	41 f0       	breq	.+16     	; 0x890 <OccupancyTracker::read()+0x5e>
     880:	86 81       	ldd	r24, Z+6	; 0x06
     882:	8f 5f       	subi	r24, 0xFF	; 255
     884:	86 83       	std	Z+6, r24	; 0x06
     886:	8c 33       	cpi	r24, 0x3C	; 60
     888:	18 f0       	brcs	.+6      	; 0x890 <OccupancyTracker::read()+0x5e>
     88a:	16 82       	std	Z+6, r1	; 0x06
     88c:	9f 5f       	subi	r25, 0xFF	; 255
     88e:	95 83       	std	Z+5, r25	; 0x05
    // Run down 'recent activity' timer.
    if(activityCountdownM > 0) { --activityCountdownM; }
     890:	84 81       	ldd	r24, Z+4	; 0x04
     892:	88 23       	and	r24, r24
     894:	19 f0       	breq	.+6      	; 0x89c <OccupancyTracker::read()+0x6a>
     896:	84 81       	ldd	r24, Z+4	; 0x04
     898:	81 50       	subi	r24, 0x01	; 1
     89a:	84 83       	std	Z+4, r24	; 0x04
    return(value);
     89c:	82 81       	ldd	r24, Z+2	; 0x02
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     89e:	2f bf       	out	0x3f, r18	; 63
    }
  }
     8a0:	0f 90       	pop	r0
     8a2:	0f 90       	pop	r0
     8a4:	cf 91       	pop	r28
     8a6:	df 91       	pop	r29
     8a8:	08 95       	ret

000008aa <OccupancyTracker::markAsPossiblyOccupied()>:

// Call when some/weak evidence of room occupation, such as a light being turned on.
// Do not call based on internal/synthetic events.
// Doesn't force the room to appear recently occupied.
// Thread-safe.
void OccupancyTracker::markAsPossiblyOccupied()
     8aa:	df 93       	push	r29
     8ac:	cf 93       	push	r28
     8ae:	00 d0       	rcall	.+0      	; 0x8b0 <OccupancyTracker::markAsPossiblyOccupied()+0x6>
     8b0:	cd b7       	in	r28, 0x3d	; 61
     8b2:	de b7       	in	r29, 0x3e	; 62
     8b4:	fc 01       	movw	r30, r24
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
     8b6:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     8b8:	f8 94       	cli
    {
    occupationCountdownM = fnmax((uint8_t)occupationCountdownM, (uint8_t)(OCCUPATION_TIMEOUT_1_M));
     8ba:	93 81       	ldd	r25, Z+3	; 0x03
template <class T> const T& fnmax(const T& a, const T& b) { return((a<b)?b:a); }
     8bc:	91 32       	cpi	r25, 0x21	; 33
     8be:	10 f4       	brcc	.+4      	; 0x8c4 <OccupancyTracker::markAsPossiblyOccupied()+0x1a>
     8c0:	81 e2       	ldi	r24, 0x21	; 33
     8c2:	01 c0       	rjmp	.+2      	; 0x8c6 <OccupancyTracker::markAsPossiblyOccupied()+0x1c>
     8c4:	89 2f       	mov	r24, r25
     8c6:	83 83       	std	Z+3, r24	; 0x03
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     8c8:	2f bf       	out	0x3f, r18	; 63
     8ca:	81 e2       	ldi	r24, 0x21	; 33
     8cc:	8a 83       	std	Y+2, r24	; 0x02
     8ce:	99 83       	std	Y+1, r25	; 0x01
    }
  activityCountdownM = 2;
     8d0:	82 e0       	ldi	r24, 0x02	; 2
     8d2:	84 83       	std	Z+4, r24	; 0x04
  }
     8d4:	0f 90       	pop	r0
     8d6:	0f 90       	pop	r0
     8d8:	cf 91       	pop	r28
     8da:	df 91       	pop	r29
     8dc:	08 95       	ret

000008de <ModelledRadValve::getMinValvePcReallyOpen()>:
// At the boiler hub this is also the threshold percentage-open on eavesdropped requests that will call for heat.
// If no override is set then DEFAULT_MIN_VALVE_PC_REALLY_OPEN is used.
// NOTE: raising this value temporarily (and shutting down the boiler immediately if possible) is one way to implement dynamic demand.
uint8_t ModelledRadValve::getMinValvePcReallyOpen()
  {
  if(0 != mVPRO_cache) { return(mVPRO_cache); } // Return cached value if possible.
     8de:	80 91 3e 02 	lds	r24, 0x023E
     8e2:	88 23       	and	r24, r24
     8e4:	89 f4       	brne	.+34     	; 0x908 <__stack+0x9>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     8e6:	f9 99       	sbic	0x1f, 1	; 31
     8e8:	fe cf       	rjmp	.-4      	; 0x8e6 <ModelledRadValve::getMinValvePcReallyOpen()+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     8ea:	83 e1       	ldi	r24, 0x13	; 19
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	92 bd       	out	0x22, r25	; 34
     8f0:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     8f2:	f8 9a       	sbi	0x1f, 0	; 31
     8f4:	90 b5       	in	r25, 0x20	; 32
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_MIN_VALVE_PC_REALLY_OPEN);
  const uint8_t result = ((stored > 0) && (stored <= 100)) ? stored : DEFAULT_MIN_VALVE_PC_REALLY_OPEN;
     8f6:	89 2f       	mov	r24, r25
     8f8:	81 50       	subi	r24, 0x01	; 1
     8fa:	84 36       	cpi	r24, 0x64	; 100
     8fc:	10 f0       	brcs	.+4      	; 0x902 <__stack+0x3>
     8fe:	8a e0       	ldi	r24, 0x0A	; 10
     900:	01 c0       	rjmp	.+2      	; 0x904 <__stack+0x5>
     902:	89 2f       	mov	r24, r25
  mVPRO_cache = result; // Cache it.
     904:	80 93 3e 02 	sts	0x023E, r24
  return(result);
  }
     908:	08 95       	ret

0000090a <ModelledRadValveState::getSmoothedRecent()>:
  inputState.setReferenceTemperatures(TemperatureC16.get());
  callingForHeat = (newTarget >= (inputState.refTempC16 >> 4));
  }

// Get smoothed raw/unadjusted temperature from the most recent samples.
int ModelledRadValveState::getSmoothedRecent()
     90a:	fc 01       	movw	r30, r24
template<size_t N> int smallIntMean(const int data[N])
  {
  // Extract mean.
  // Assume values and sum will be nowhere near the limits.
  int sum = 0;
  for(int8_t i = N; --i >= 0; ) { sum += data[i]; }
     90c:	83 85       	ldd	r24, Z+11	; 0x0b
     90e:	94 85       	ldd	r25, Z+12	; 0x0c
     910:	25 85       	ldd	r18, Z+13	; 0x0d
     912:	36 85       	ldd	r19, Z+14	; 0x0e
     914:	82 0f       	add	r24, r18
     916:	93 1f       	adc	r25, r19
     918:	21 85       	ldd	r18, Z+9	; 0x09
     91a:	32 85       	ldd	r19, Z+10	; 0x0a
     91c:	82 0f       	add	r24, r18
     91e:	93 1f       	adc	r25, r19
     920:	27 81       	ldd	r18, Z+7	; 0x07
     922:	30 85       	ldd	r19, Z+8	; 0x08
     924:	82 0f       	add	r24, r18
     926:	93 1f       	adc	r25, r19
     928:	02 96       	adiw	r24, 0x02	; 2
     92a:	64 e0       	ldi	r22, 0x04	; 4
     92c:	70 e0       	ldi	r23, 0x00	; 0
     92e:	0e 94 cb 3d 	call	0x7b96	; 0x7b96 <__divmodhi4>
     932:	cb 01       	movw	r24, r22
  { return(smallIntMean<filterLength/2>(prevRawTempC16)); }
     934:	08 95       	ret

00000936 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)>:
// Is always willing to turn off quickly, but on slowly (AKA "slow start" algorithm),
// and tries to eliminate unnecessary 'hunting' which makes noise and uses actuator energy.
// Nominally called at a regular rate, once per minute.
// All inputState values should be set to sensible values before starting.
// Usually called by tick() which does required state updates afterwards.
uint8_t ModelledRadValve::computeRequiredTRVPercentOpen(const uint8_t valvePCOpen, const struct ModelledRadValveInputState &inputState, struct ModelledRadValveState &retainedState)
     936:	ff 92       	push	r15
     938:	0f 93       	push	r16
     93a:	1f 93       	push	r17
     93c:	cf 93       	push	r28
     93e:	df 93       	push	r29
     940:	f8 2e       	mov	r15, r24
     942:	eb 01       	movw	r28, r22
     944:	8a 01       	movw	r16, r20
DEBUG_SERIAL_PRINT(inputState.refTempC);
DEBUG_SERIAL_PRINTLN();
#endif

  // Possibly-adjusted and.or smoothed temperature to use for targetting.
  const int adjustedTempC16 = retainedState.isFiltering ? (retainedState.getSmoothedRecent() + refTempOffsetC16) : inputState.refTempC16;
     946:	da 01       	movw	r26, r20
     948:	11 96       	adiw	r26, 0x01	; 1
     94a:	8c 91       	ld	r24, X
     94c:	88 23       	and	r24, r24
     94e:	39 f0       	breq	.+14     	; 0x95e <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x28>
     950:	ca 01       	movw	r24, r20
     952:	0e 94 85 04 	call	0x90a	; 0x90a <ModelledRadValveState::getSmoothedRecent()>
     956:	9c 01       	movw	r18, r24
     958:	28 5f       	subi	r18, 0xF8	; 248
     95a:	3f 4f       	sbci	r19, 0xFF	; 255
     95c:	02 c0       	rjmp	.+4      	; 0x962 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x2c>
     95e:	2f 81       	ldd	r18, Y+7	; 0x07
     960:	38 85       	ldd	r19, Y+8	; 0x08
  const int8_t adjustedTempC = (adjustedTempC16 >> 4);

  // (Well) under temp target: open valve up.
  if(adjustedTempC < inputState.targetTempC)
     962:	c9 01       	movw	r24, r18
     964:	34 e0       	ldi	r19, 0x04	; 4
     966:	95 95       	asr	r25
     968:	87 95       	ror	r24
     96a:	3a 95       	dec	r19
     96c:	e1 f7       	brne	.-8      	; 0x966 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x30>
     96e:	e8 2f       	mov	r30, r24
     970:	ff 27       	eor	r31, r31
     972:	e7 fd       	sbrc	r30, 7
     974:	f0 95       	com	r31
     976:	88 81       	ld	r24, Y
     978:	68 2f       	mov	r22, r24
     97a:	70 e0       	ldi	r23, 0x00	; 0
     97c:	e6 17       	cp	r30, r22
     97e:	f7 07       	cpc	r31, r23
     980:	0c f0       	brlt	.+2      	; 0x984 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x4e>
     982:	40 c0       	rjmp	.+128    	; 0xa04 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0xce>
//DEBUG_SERIAL_PRINTLN_FLASHSTRING("well under temp");
    // Limit valve open slew to help minimise overshoot and actuator noise.
    // This should also reduce nugatory setting changes when occupancy (etc) is fluctuating.
    // Thus it may take several minutes to turn the radiator fully on,
    // though probably opening the first ~33% will allow near-maximum heat output in practice.
    if(valvePCOpen < inputState.maxPCOpen)
     984:	5a 81       	ldd	r21, Y+2	; 0x02
     986:	f5 16       	cp	r15, r21
     988:	08 f0       	brcs	.+2      	; 0x98c <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x56>
     98a:	da c0       	rjmp	.+436    	; 0xb40 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x20a>
      {
#if defined(SUPPORT_BAKE)
      // If room is well below target and in BAKE mode then immediately open to maximum.
      // Need debounced bake mode value to avoid spurious slamming open of the valve as the user cycles through modes.
      if(inputState.inBakeMode) { return(inputState.maxPCOpen); }
     98c:	8e 81       	ldd	r24, Y+6	; 0x06
     98e:	88 23       	and	r24, r24
     990:	09 f0       	breq	.+2      	; 0x994 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x5e>
     992:	d6 c0       	rjmp	.+428    	; 0xb40 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x20a>
#endif

      // Reduce valve hunting: defer re-opening if recently closed.
      if(retainedState.dontTurnup()) { return(valvePCOpen); }
     994:	d8 01       	movw	r26, r16
     996:	15 96       	adiw	r26, 0x05	; 5
     998:	8c 91       	ld	r24, X
     99a:	15 97       	sbiw	r26, 0x05	; 5
     99c:	88 23       	and	r24, r24
     99e:	09 f0       	breq	.+2      	; 0x9a2 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x6c>
     9a0:	cc c0       	rjmp	.+408    	; 0xb3a <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x204>
      // Open glacially if explicitly requested or if temperature overshoot has happened or is a danger.
      // If already at least the minimum % open for flow, filtering is on indicating rapid recent changes or jitter,
      // and the last raw change was upwards, then force glacial to try to damp oscillations and avoid overshoot.
      // Note that pseudo overshoots may be seen as the target temperature steps down.
      const bool beGlacial = inputState.glacial ||
          (retainedState.isFiltering && (valvePCOpen >= inputState.minPCOpen) && (retainedState.prevRawTempC16[0] > retainedState.prevRawTempC16[1]));
     9a2:	8c 81       	ldd	r24, Y+4	; 0x04
     9a4:	88 23       	and	r24, r24
     9a6:	09 f0       	breq	.+2      	; 0x9aa <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x74>
     9a8:	bf c0       	rjmp	.+382    	; 0xb28 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x1f2>
     9aa:	11 96       	adiw	r26, 0x01	; 1
     9ac:	8c 91       	ld	r24, X
     9ae:	11 97       	sbiw	r26, 0x01	; 1
     9b0:	88 23       	and	r24, r24
     9b2:	09 f4       	brne	.+2      	; 0x9b6 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x80>
     9b4:	cc c0       	rjmp	.+408    	; 0xb4e <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x218>
     9b6:	89 81       	ldd	r24, Y+1	; 0x01
     9b8:	f8 16       	cp	r15, r24
     9ba:	08 f4       	brcc	.+2      	; 0x9be <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x88>
     9bc:	c8 c0       	rjmp	.+400    	; 0xb4e <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x218>
     9be:	17 96       	adiw	r26, 0x07	; 7
     9c0:	2d 91       	ld	r18, X+
     9c2:	3c 91       	ld	r19, X
     9c4:	18 97       	sbiw	r26, 0x08	; 8
     9c6:	19 96       	adiw	r26, 0x09	; 9
     9c8:	8d 91       	ld	r24, X+
     9ca:	9c 91       	ld	r25, X
     9cc:	1a 97       	sbiw	r26, 0x0a	; 10
     9ce:	82 17       	cp	r24, r18
     9d0:	93 07       	cpc	r25, r19
     9d2:	0c f0       	brlt	.+2      	; 0x9d6 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0xa0>
     9d4:	bc c0       	rjmp	.+376    	; 0xb4e <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x218>
     9d6:	a8 c0       	rjmp	.+336    	; 0xb28 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x1f2>

      // Ensure that the valve opens quickly from cold for acceptable response.
      // Less fast if already moderately open or in the degree below target.
      const uint8_t slewRate =
          ((valvePCOpen >= DEFAULT_VALVE_PC_MODERATELY_OPEN) || (adjustedTempC == inputState.targetTempC-1)) ?
              TRV_MAX_SLEW_PC_PER_MIN : TRV_SLEW_PC_PER_MIN_FAST;
     9d8:	61 50       	subi	r22, 0x01	; 1
     9da:	70 40       	sbci	r23, 0x00	; 0
     9dc:	e6 17       	cp	r30, r22
     9de:	f7 07       	cpc	r31, r23
     9e0:	11 f0       	breq	.+4      	; 0x9e6 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0xb0>
     9e2:	2a e0       	ldi	r18, 0x0A	; 10
     9e4:	01 c0       	rjmp	.+2      	; 0x9e8 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0xb2>
     9e6:	25 e0       	ldi	r18, 0x05	; 5
     9e8:	69 81       	ldd	r22, Y+1	; 0x01
     9ea:	42 2f       	mov	r20, r18
     9ec:	26 17       	cp	r18, r22
     9ee:	08 f4       	brcc	.+2      	; 0x9f2 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0xbc>
     9f0:	46 2f       	mov	r20, r22
      const uint8_t minOpenFromCold = fnmax(slewRate, inputState.minPCOpen);
      // Open to 'minimum' likely open state immediately if less open currently.
      if(valvePCOpen < minOpenFromCold) { return(minOpenFromCold); }
     9f2:	f4 16       	cp	r15, r20
     9f4:	08 f4       	brcc	.+2      	; 0x9f8 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0xc2>
     9f6:	a3 c0       	rjmp	.+326    	; 0xb3e <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x208>
      // Slew open relatively gently...
      return(fnmin((uint8_t)(valvePCOpen + slewRate), inputState.maxPCOpen)); // Capped at maximum.
     9f8:	2f 0d       	add	r18, r15
     9fa:	25 17       	cp	r18, r21
     9fc:	08 f0       	brcs	.+2      	; 0xa00 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0xca>
     9fe:	a0 c0       	rjmp	.+320    	; 0xb40 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x20a>
     a00:	52 2f       	mov	r21, r18
     a02:	9e c0       	rjmp	.+316    	; 0xb40 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x20a>
    // Keep open at maximum allowed.
    return(inputState.maxPCOpen);
    }

  // (Well) over temp target: close valve down.
  if(adjustedTempC > inputState.targetTempC)
     a04:	6e 17       	cp	r22, r30
     a06:	7f 07       	cpc	r23, r31
     a08:	ec f5       	brge	.+122    	; 0xa84 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x14e>
    {
//DEBUG_SERIAL_PRINTLN_FLASHSTRING("well over temp");

    if(0 != valvePCOpen)
     a0a:	ff 20       	and	r15, r15
     a0c:	09 f4       	brne	.+2      	; 0xa10 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0xda>
     a0e:	95 c0       	rjmp	.+298    	; 0xb3a <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x204>
      {
      // Reduce valve hunting: defer re-closing if recently opened.
      if(retainedState.dontTurndown()) { return(valvePCOpen); }
     a10:	d8 01       	movw	r26, r16
     a12:	16 96       	adiw	r26, 0x06	; 6
     a14:	8c 91       	ld	r24, X
     a16:	88 23       	and	r24, r24
     a18:	09 f0       	breq	.+2      	; 0xa1c <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0xe6>
     a1a:	8f c0       	rjmp	.+286    	; 0xb3a <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x204>

      // Continue shutting valve as not yet closed.
      // TODO-117: allow very slow final turn off to help systems with poor bypass, ~1% per minute.
      // Special slow-turn-off rules for final part of travel at/below DEFAULT_MIN_VALVE_PC_REALLY_OPEN floor.
      const uint8_t minReallyOpen = inputState.minPCOpen;
     a1c:	89 81       	ldd	r24, Y+1	; 0x01
      const uint8_t lingerThreshold = (minReallyOpen > 0) ? (minReallyOpen-1) : 0;
     a1e:	88 23       	and	r24, r24
     a20:	99 f0       	breq	.+38     	; 0xa48 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x112>
//      const uint8_t lingerThreshold = DEFAULT_MIN_VALVE_PC_REALLY_OPEN - 1; // Should be below 'call for heat' threshold.
      if(valvePCOpen < minReallyOpen)
     a22:	f8 16       	cp	r15, r24
     a24:	18 f0       	brcs	.+6      	; 0xa2c <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0xf6>

      // Continue shutting valve as not yet closed.
      // TODO-117: allow very slow final turn off to help systems with poor bypass, ~1% per minute.
      // Special slow-turn-off rules for final part of travel at/below DEFAULT_MIN_VALVE_PC_REALLY_OPEN floor.
      const uint8_t minReallyOpen = inputState.minPCOpen;
      const uint8_t lingerThreshold = (minReallyOpen > 0) ? (minReallyOpen-1) : 0;
     a26:	48 2f       	mov	r20, r24
     a28:	41 50       	subi	r20, 0x01	; 1
     a2a:	0f c0       	rjmp	.+30     	; 0xa4a <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x114>
//      const uint8_t lingerThreshold = DEFAULT_MIN_VALVE_PC_REALLY_OPEN - 1; // Should be below 'call for heat' threshold.
      if(valvePCOpen < minReallyOpen)
        {
        // If lingered long enough then do final chunk in one burst to help avoid valve hiss and temperature overshoot.
        if((DEFAULT_MAX_RUN_ON_TIME_M < minReallyOpen) && (valvePCOpen < minReallyOpen - DEFAULT_MAX_RUN_ON_TIME_M))
     a2c:	86 30       	cpi	r24, 0x06	; 6
     a2e:	48 f0       	brcs	.+18     	; 0xa42 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x10c>
     a30:	2f 2d       	mov	r18, r15
     a32:	30 e0       	ldi	r19, 0x00	; 0
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	05 97       	sbiw	r24, 0x05	; 5
     a38:	28 17       	cp	r18, r24
     a3a:	39 07       	cpc	r19, r25
     a3c:	14 f4       	brge	.+4      	; 0xa42 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x10c>
     a3e:	50 e0       	ldi	r21, 0x00	; 0
     a40:	7f c0       	rjmp	.+254    	; 0xb40 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x20a>
          { return(0); } // Shut right off.
        return(valvePCOpen - 1); // Turn down as slowly as reasonably possible to help boiler cool.
     a42:	5f 2d       	mov	r21, r15
     a44:	51 50       	subi	r21, 0x01	; 1
     a46:	7c c0       	rjmp	.+248    	; 0xb40 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x20a>
     a48:	40 e0       	ldi	r20, 0x00	; 0

      // FIXME: TODO-453: consider avoiding closing valve at all when temperature is falling and temperature error is small and w/ widened deadband.

      // TODO-109: with comfort bias close relatively slowly to reduce wasted effort from minor overshoots.
      // TODO-453: close relatively slowly when temperature error is small (<1C) to reduce wasted effort from minor overshoots.
      if(((!inputState.hasEcoBias) || (adjustedTempC == inputState.targetTempC+1)) &&
     a4a:	8d 81       	ldd	r24, Y+5	; 0x05
     a4c:	88 23       	and	r24, r24
     a4e:	31 f0       	breq	.+12     	; 0xa5c <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x126>
     a50:	6f 5f       	subi	r22, 0xFF	; 255
     a52:	7f 4f       	sbci	r23, 0xFF	; 255
     a54:	e6 17       	cp	r30, r22
     a56:	f7 07       	cpc	r31, r23
     a58:	09 f0       	breq	.+2      	; 0xa5c <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x126>
     a5a:	71 c0       	rjmp	.+226    	; 0xb3e <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x208>
     a5c:	24 2f       	mov	r18, r20
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	8a 81       	ldd	r24, Y+2	; 0x02
     a62:	68 2f       	mov	r22, r24
     a64:	70 e0       	ldi	r23, 0x00	; 0
     a66:	c9 01       	movw	r24, r18
     a68:	09 96       	adiw	r24, 0x09	; 9
     a6a:	86 17       	cp	r24, r22
     a6c:	97 07       	cpc	r25, r23
     a6e:	1c f4       	brge	.+6      	; 0xa76 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x140>
     a70:	b9 01       	movw	r22, r18
     a72:	66 5f       	subi	r22, 0xF6	; 246
     a74:	7f 4f       	sbci	r23, 0xFF	; 255
     a76:	8f 2d       	mov	r24, r15
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	68 17       	cp	r22, r24
     a7c:	79 07       	cpc	r23, r25
     a7e:	0c f0       	brlt	.+2      	; 0xa82 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x14c>
     a80:	5e c0       	rjmp	.+188    	; 0xb3e <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x208>
     a82:	25 c0       	rjmp	.+74     	; 0xace <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x198>

  // Close to (or at) temp target: set valve partly open to try to tightly regulate.
  //
  // Use currentTempC16 lsbits to set valve percentage for proportional feedback
  // to provide more efficient and quieter TRV drive and probably more stable room temperature.
  const uint8_t lsbits = (uint8_t) (adjustedTempC16 & 0xf); // LSbits of temperature above base of proportional adjustment range.
     a84:	52 2f       	mov	r21, r18
     a86:	5f 70       	andi	r21, 0x0F	; 15
//    uint8_t tmp = (uint8_t) (refTempC16 & 0xf); // Only interested in lsbits.
  const uint8_t tmp = 16 - lsbits; // Now in range 1 (at warmest end of 'correct' temperature) to 16 (coolest).
  const uint8_t ulpStep = 6;
  // Get to nominal range 6 to 96, eg valve nearly shut just below top of 'correct' temperature window.
  const uint8_t targetPORaw = tmp * ulpStep;
     a88:	80 e1       	ldi	r24, 0x10	; 16
     a8a:	85 1b       	sub	r24, r21
     a8c:	96 e0       	ldi	r25, 0x06	; 6
     a8e:	89 9f       	mul	r24, r25
     a90:	c0 01       	movw	r24, r0
     a92:	11 24       	eor	r1, r1
  // Constrain from below to likely minimum-open value, in part to deal with TODO-117 'linger open' in lieu of boiler bypass.
  // Constrain from above by maximum percentage open allowed, eg for pay-by-volume systems.
  const uint8_t targetPO = constrain(targetPORaw, inputState.minPCOpen, inputState.maxPCOpen);
     a94:	49 81       	ldd	r20, Y+1	; 0x01
     a96:	84 17       	cp	r24, r20
     a98:	28 f0       	brcs	.+10     	; 0xaa4 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x16e>
     a9a:	2a 81       	ldd	r18, Y+2	; 0x02
     a9c:	48 2f       	mov	r20, r24
     a9e:	28 17       	cp	r18, r24
     aa0:	08 f4       	brcc	.+2      	; 0xaa4 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x16e>
     aa2:	42 2f       	mov	r20, r18

  // Reduce spurious valve/boiler adjustment by avoiding movement at all unless current temperature error is significant.
  if(targetPO != valvePCOpen)
     aa4:	4f 15       	cp	r20, r15
     aa6:	09 f4       	brne	.+2      	; 0xaaa <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x174>
     aa8:	48 c0       	rjmp	.+144    	; 0xb3a <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x204>
    const bool tooHot = (targetPO < valvePCOpen);
    // Compute the minimum/epsilon slew adjustment allowed (the deadband).
    // Also increase effective deadband if temperature resolution is lower than 1/16th, eg 8ths => 1+2*ulpStep minimum.
// FIXME //    const uint8_t realMinUlp = 1 + (TemperatureC16.isLowPrecision() ? 2*ulpStep : ulpStep); // Assume precision no coarser than 1/8C.
    const uint8_t realMinUlp = 1 + ulpStep;
    const uint8_t minAbsSlew = fnmax(realMinUlp, (uint8_t)(inputState.widenDeadband ? max(min(DEFAULT_VALVE_PC_MODERATELY_OPEN/2,max(TRV_MAX_SLEW_PC_PER_MIN,2*TRV_MIN_SLEW_PC)), 2+TRV_MIN_SLEW_PC) : TRV_MIN_SLEW_PC));
     aaa:	8b 81       	ldd	r24, Y+3	; 0x03
     aac:	88 23       	and	r24, r24
     aae:	11 f4       	brne	.+4      	; 0xab4 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x17e>
     ab0:	97 e0       	ldi	r25, 0x07	; 7
     ab2:	01 c0       	rjmp	.+2      	; 0xab6 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x180>
     ab4:	9e e0       	ldi	r25, 0x0E	; 14
    if(tooHot) // Currently open more than required, ie above target temperature.
     ab6:	4f 15       	cp	r20, r15
     ab8:	68 f4       	brcc	.+26     	; 0xad4 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x19e>
      {
//DEBUG_SERIAL_PRINTLN_FLASHSTRING("slightly over temp");
      // Reduce valve hunting: defer re-closing if recently opened.
      if(retainedState.dontTurndown()) { return(valvePCOpen); }
     aba:	f8 01       	movw	r30, r16
     abc:	86 81       	ldd	r24, Z+6	; 0x06
     abe:	88 23       	and	r24, r24
     ac0:	e1 f5       	brne	.+120    	; 0xb3a <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x204>

      // FIXME: TODO-453: could avoid closing valve at all when (raw) temperature already falling (or steady?).

      const uint8_t slew = valvePCOpen - targetPO;
     ac2:	8f 2d       	mov	r24, r15
     ac4:	84 1b       	sub	r24, r20
      // Ensure no hunting for ~1ulp temperature wobble.
      if(slew < minAbsSlew) { return(valvePCOpen); }
     ac6:	89 17       	cp	r24, r25
     ac8:	c0 f1       	brcs	.+112    	; 0xb3a <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x204>
      
      if(slew > TRV_SLEW_PC_PER_MIN_FAST)
     aca:	8b 30       	cpi	r24, 0x0B	; 11
     acc:	c0 f1       	brcs	.+112    	; 0xb3e <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x208>
          { return(valvePCOpen - TRV_SLEW_PC_PER_MIN_FAST); } // Cap slew rate.
     ace:	5f 2d       	mov	r21, r15
     ad0:	5a 50       	subi	r21, 0x0A	; 10
     ad2:	36 c0       	rjmp	.+108    	; 0xb40 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x20a>
    // if(targetPO > TRVPercentOpen) // Currently open less than required, ie below target temperature.
//DEBUG_SERIAL_PRINTLN_FLASHSTRING("slightly under temp");
#if defined(SUPPORT_BAKE)
    // If room is well below target and in BAKE mode then immediately open to maximum.
    // Need debounced bake mode value to avoid spurious slamming open of the valve as the user cycles through modes.
    if(inputState.inBakeMode) { return(inputState.maxPCOpen); }
     ad4:	8e 81       	ldd	r24, Y+6	; 0x06
     ad6:	88 23       	and	r24, r24
     ad8:	11 f0       	breq	.+4      	; 0xade <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x1a8>
     ada:	5a 81       	ldd	r21, Y+2	; 0x02
     adc:	31 c0       	rjmp	.+98     	; 0xb40 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x20a>
    // (TODO-451 - Have darkness only immediately trigger a 'soft setback')
    if(inputState.softSetback && (lsbits >= 8)) { return(valvePCOpen); }
#endif

    // Reduce valve hunting: defer re-opening if recently closed.
    if(retainedState.dontTurnup()) { return(valvePCOpen); }
     ade:	d8 01       	movw	r26, r16
     ae0:	15 96       	adiw	r26, 0x05	; 5
     ae2:	8c 91       	ld	r24, X
     ae4:	15 97       	sbiw	r26, 0x05	; 5
     ae6:	88 23       	and	r24, r24
     ae8:	41 f5       	brne	.+80     	; 0xb3a <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x204>

    const uint8_t slew = targetPO - valvePCOpen;
     aea:	64 2f       	mov	r22, r20
     aec:	6f 19       	sub	r22, r15
    // To to avoid hunting around boundaries of a ~1ulp temperature step.
    if(slew < minAbsSlew) { return(valvePCOpen); }
     aee:	69 17       	cp	r22, r25
     af0:	20 f1       	brcs	.+72     	; 0xb3a <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x204>

    // Keeping the temperature steady anywhere in the target proportional range
    // while minimising valve moment/noise/etc is a good goal,
    // so if raw temperatures are rising at the moment then leave the valve as-is.
    // If steady and near the final target then also leave the valve as-is.
    const int rise = retainedState.prevRawTempC16[0] - retainedState.prevRawTempC16[1];
     af2:	17 96       	adiw	r26, 0x07	; 7
     af4:	2d 91       	ld	r18, X+
     af6:	3c 91       	ld	r19, X
     af8:	18 97       	sbiw	r26, 0x08	; 8
     afa:	19 96       	adiw	r26, 0x09	; 9
     afc:	8d 91       	ld	r24, X+
     afe:	9c 91       	ld	r25, X
     b00:	1a 97       	sbiw	r26, 0x0a	; 10
     b02:	28 1b       	sub	r18, r24
     b04:	39 0b       	sbc	r19, r25
    if(rise > 0) { return(valvePCOpen); }
     b06:	12 16       	cp	r1, r18
     b08:	13 06       	cpc	r1, r19
     b0a:	bc f0       	brlt	.+46     	; 0xb3a <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x204>
    if((lsbits >= 12) && (0 == rise)) { return(valvePCOpen); }
     b0c:	5c 30       	cpi	r21, 0x0C	; 12
     b0e:	10 f0       	brcs	.+4      	; 0xb14 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x1de>
     b10:	23 2b       	or	r18, r19
     b12:	99 f0       	breq	.+38     	; 0xb3a <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x204>
    // This assumes that most valves more than about 1/3rd open can deliver significant power, esp if not statically balanced.
    const bool beGlacial = inputState.glacial ||
#if defined(ALLOW_SOFT_SETBACK)
        inputState.softSetback ||
#endif
        (lsbits >= 8) || ((lsbits >= 4) && (valvePCOpen >= DEFAULT_VALVE_PC_MODERATELY_OPEN));
     b14:	8c 81       	ldd	r24, Y+4	; 0x04
     b16:	88 23       	and	r24, r24
     b18:	39 f4       	brne	.+14     	; 0xb28 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x1f2>
     b1a:	58 30       	cpi	r21, 0x08	; 8
     b1c:	28 f4       	brcc	.+10     	; 0xb28 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x1f2>
     b1e:	54 30       	cpi	r21, 0x04	; 4
     b20:	d8 f0       	brcs	.+54     	; 0xb58 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x222>
     b22:	b0 e2       	ldi	r27, 0x20	; 32
     b24:	bf 15       	cp	r27, r15
     b26:	c0 f4       	brcc	.+48     	; 0xb58 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x222>
    if(beGlacial) { return(valvePCOpen + 1); }
     b28:	5f 2d       	mov	r21, r15
     b2a:	5f 5f       	subi	r21, 0xFF	; 255
     b2c:	09 c0       	rjmp	.+18     	; 0xb40 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x20a>

    // Slew open faster with comfort bias.
    const uint8_t maxSlew = (!inputState.hasEcoBias) ? TRV_SLEW_PC_PER_MIN_FAST : TRV_MAX_SLEW_PC_PER_MIN;
    if(slew > maxSlew)
     b2e:	6b 30       	cpi	r22, 0x0B	; 11
     b30:	30 f0       	brcs	.+12     	; 0xb3e <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x208>
     b32:	8a e0       	ldi	r24, 0x0A	; 10
        { return(valvePCOpen + maxSlew); } // Cap slew rate open.
     b34:	58 2f       	mov	r21, r24
     b36:	5f 0d       	add	r21, r15
     b38:	03 c0       	rjmp	.+6      	; 0xb40 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x20a>
     b3a:	5f 2d       	mov	r21, r15
     b3c:	01 c0       	rjmp	.+2      	; 0xb40 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x20a>
     b3e:	54 2f       	mov	r21, r20
    return(targetPO);
    }

  // Leave value position as was...
  return(valvePCOpen);
  }
     b40:	85 2f       	mov	r24, r21
     b42:	df 91       	pop	r29
     b44:	cf 91       	pop	r28
     b46:	1f 91       	pop	r17
     b48:	0f 91       	pop	r16
     b4a:	ff 90       	pop	r15
     b4c:	08 95       	ret

      // Ensure that the valve opens quickly from cold for acceptable response.
      // Less fast if already moderately open or in the degree below target.
      const uint8_t slewRate =
          ((valvePCOpen >= DEFAULT_VALVE_PC_MODERATELY_OPEN) || (adjustedTempC == inputState.targetTempC-1)) ?
              TRV_MAX_SLEW_PC_PER_MIN : TRV_SLEW_PC_PER_MIN_FAST;
     b4e:	80 e2       	ldi	r24, 0x20	; 32
     b50:	8f 15       	cp	r24, r15
     b52:	08 f4       	brcc	.+2      	; 0xb56 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x220>
     b54:	48 cf       	rjmp	.-368    	; 0x9e6 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0xb0>
     b56:	40 cf       	rjmp	.-384    	; 0x9d8 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0xa2>
#endif
        (lsbits >= 8) || ((lsbits >= 4) && (valvePCOpen >= DEFAULT_VALVE_PC_MODERATELY_OPEN));
    if(beGlacial) { return(valvePCOpen + 1); }

    // Slew open faster with comfort bias.
    const uint8_t maxSlew = (!inputState.hasEcoBias) ? TRV_SLEW_PC_PER_MIN_FAST : TRV_MAX_SLEW_PC_PER_MIN;
     b58:	8d 81       	ldd	r24, Y+5	; 0x05
     b5a:	88 23       	and	r24, r24
     b5c:	41 f3       	breq	.-48     	; 0xb2e <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x1f8>
     b5e:	85 e0       	ldi	r24, 0x05	; 5
     b60:	e9 cf       	rjmp	.-46     	; 0xb34 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x1fe>

00000b62 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)>:

// Perform per-minute tasks such as counter and filter updates then recompute valve position.
// The input state must be complete including target and reference temperatures
// before calling this including the first time whereupon some further lazy initialisation is done.
//   * valvePCOpenRef  current valve position UPDATED BY THIS ROUTINE, in range [0,100]
void ModelledRadValveState::tick(volatile uint8_t &valvePCOpenRef, const ModelledRadValveInputState &inputState)
     b62:	af 92       	push	r10
     b64:	bf 92       	push	r11
     b66:	cf 92       	push	r12
     b68:	df 92       	push	r13
     b6a:	ef 92       	push	r14
     b6c:	ff 92       	push	r15
     b6e:	0f 93       	push	r16
     b70:	1f 93       	push	r17
     b72:	cf 93       	push	r28
     b74:	df 93       	push	r29
     b76:	ec 01       	movw	r28, r24
     b78:	6b 01       	movw	r12, r22
     b7a:	5a 01       	movw	r10, r20
  {
  const int rawTempC16 = inputState.refTempC16 - refTempOffsetC16; // Remove adjustment for target centre.
     b7c:	fa 01       	movw	r30, r20
     b7e:	07 81       	ldd	r16, Z+7	; 0x07
     b80:	10 85       	ldd	r17, Z+8	; 0x08
     b82:	08 50       	subi	r16, 0x08	; 8
     b84:	10 40       	sbci	r17, 0x00	; 0
  if(!initialised)
     b86:	88 81       	ld	r24, Y
     b88:	88 23       	and	r24, r24
     b8a:	71 f4       	brne	.+28     	; 0xba8 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0x46>
     b8c:	fe 01       	movw	r30, r28
     b8e:	88 e0       	ldi	r24, 0x08	; 8
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	02 c0       	rjmp	.+4      	; 0xb98 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0x36>
    {
    // Fill the filter memory with the current room temperature.
    for(int i = filterLength; --i >= 0; ) { prevRawTempC16[i] = rawTempC16; }
     b94:	10 8f       	std	Z+24, r17	; 0x18
     b96:	07 8b       	std	Z+23, r16	; 0x17
     b98:	01 97       	sbiw	r24, 0x01	; 1
     b9a:	32 97       	sbiw	r30, 0x02	; 2
     b9c:	2f ef       	ldi	r18, 0xFF	; 255
     b9e:	8f 3f       	cpi	r24, 0xFF	; 255
     ba0:	92 07       	cpc	r25, r18
     ba2:	c1 f7       	brne	.-16     	; 0xb94 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0x32>
    initialised = true;
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	88 83       	st	Y, r24
     ba8:	7e 01       	movw	r14, r28
     baa:	fe 01       	movw	r30, r28
     bac:	28 e0       	ldi	r18, 0x08	; 8
     bae:	30 e0       	ldi	r19, 0x00	; 0
     bb0:	04 c0       	rjmp	.+8      	; 0xbba <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0x58>
    }

  // Shift in the latest (raw) temperature.
  for(int i = filterLength; --i > 0; ) { prevRawTempC16[i] = prevRawTempC16[i-1]; }
     bb2:	85 89       	ldd	r24, Z+21	; 0x15
     bb4:	96 89       	ldd	r25, Z+22	; 0x16
     bb6:	90 8f       	std	Z+24, r25	; 0x18
     bb8:	87 8b       	std	Z+23, r24	; 0x17
     bba:	21 50       	subi	r18, 0x01	; 1
     bbc:	30 40       	sbci	r19, 0x00	; 0
     bbe:	32 97       	sbiw	r30, 0x02	; 2
     bc0:	21 15       	cp	r18, r1
     bc2:	31 05       	cpc	r19, r1
     bc4:	b1 f7       	brne	.-20     	; 0xbb2 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0x50>
  prevRawTempC16[0] = rawTempC16;
     bc6:	18 87       	std	Y+8, r17	; 0x08
     bc8:	0f 83       	std	Y+7, r16	; 0x07

  // Disable/enable filtering.
  // Allow possible exit from filtering for next time
  // if the raw value is close enough to the current filtered value
  // so that reverting to unfiltered will not of itself cause a big jump.
  if(isFiltering)
     bca:	89 81       	ldd	r24, Y+1	; 0x01
     bcc:	88 23       	and	r24, r24
     bce:	c9 f0       	breq	.+50     	; 0xc02 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0xa0>
    {
    if(abs(getSmoothedRecent() - rawTempC16) <= MAX_TEMP_JUMP_C16) { isFiltering = false; }  
     bd0:	ce 01       	movw	r24, r28
     bd2:	0e 94 85 04 	call	0x90a	; 0x90a <ModelledRadValveState::getSmoothedRecent()>
     bd6:	80 1b       	sub	r24, r16
     bd8:	91 0b       	sbc	r25, r17
     bda:	18 16       	cp	r1, r24
     bdc:	19 06       	cpc	r1, r25
     bde:	44 f4       	brge	.+16     	; 0xbf0 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0x8e>
     be0:	ce 01       	movw	r24, r28
     be2:	0e 94 85 04 	call	0x90a	; 0x90a <ModelledRadValveState::getSmoothedRecent()>
     be6:	80 1b       	sub	r24, r16
     be8:	91 0b       	sbc	r25, r17
     bea:	04 97       	sbiw	r24, 0x04	; 4
     bec:	54 f4       	brge	.+20     	; 0xc02 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0xa0>
     bee:	08 c0       	rjmp	.+16     	; 0xc00 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0x9e>
     bf0:	ce 01       	movw	r24, r28
     bf2:	0e 94 85 04 	call	0x90a	; 0x90a <ModelledRadValveState::getSmoothedRecent()>
     bf6:	08 1b       	sub	r16, r24
     bf8:	19 0b       	sbc	r17, r25
     bfa:	04 30       	cpi	r16, 0x04	; 4
     bfc:	11 05       	cpc	r17, r1
     bfe:	0c f4       	brge	.+2      	; 0xc02 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0xa0>
     c00:	19 82       	std	Y+1, r1	; 0x01
    }
  // Force filtering (back) on if any adjacent past readings are wildly different.
  if(!isFiltering)
     c02:	89 81       	ldd	r24, Y+1	; 0x01
     c04:	88 23       	and	r24, r24
     c06:	e9 f4       	brne	.+58     	; 0xc42 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0xe0>
     c08:	41 e0       	ldi	r20, 0x01	; 1
     c0a:	50 e0       	ldi	r21, 0x00	; 0
    {
    for(int i = 1; i < filterLength; ++i) { if(abs(prevRawTempC16[i] - prevRawTempC16[i-1]) > MAX_TEMP_JUMP_C16) { isFiltering = true; break; } }
     c0c:	f7 01       	movw	r30, r14
     c0e:	21 85       	ldd	r18, Z+9	; 0x09
     c10:	32 85       	ldd	r19, Z+10	; 0x0a
     c12:	87 81       	ldd	r24, Z+7	; 0x07
     c14:	90 85       	ldd	r25, Z+8	; 0x08
     c16:	28 1b       	sub	r18, r24
     c18:	39 0b       	sbc	r19, r25
     c1a:	37 ff       	sbrs	r19, 7
     c1c:	03 c0       	rjmp	.+6      	; 0xc24 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0xc2>
     c1e:	30 95       	com	r19
     c20:	21 95       	neg	r18
     c22:	3f 4f       	sbci	r19, 0xFF	; 255
     c24:	82 e0       	ldi	r24, 0x02	; 2
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	e8 0e       	add	r14, r24
     c2a:	f9 1e       	adc	r15, r25
     c2c:	24 30       	cpi	r18, 0x04	; 4
     c2e:	31 05       	cpc	r19, r1
     c30:	1c f0       	brlt	.+6      	; 0xc38 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0xd6>
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	89 83       	std	Y+1, r24	; 0x01
     c36:	05 c0       	rjmp	.+10     	; 0xc42 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0xe0>
     c38:	4f 5f       	subi	r20, 0xFF	; 255
     c3a:	5f 4f       	sbci	r21, 0xFF	; 255
     c3c:	48 30       	cpi	r20, 0x08	; 8
     c3e:	51 05       	cpc	r21, r1
     c40:	29 f7       	brne	.-54     	; 0xc0c <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0xaa>
    }

  // Tick count down timers.
  if(valveTurndownCountdownM > 0) { --valveTurndownCountdownM; }
     c42:	8d 81       	ldd	r24, Y+5	; 0x05
     c44:	88 23       	and	r24, r24
     c46:	11 f0       	breq	.+4      	; 0xc4c <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0xea>
     c48:	81 50       	subi	r24, 0x01	; 1
     c4a:	8d 83       	std	Y+5, r24	; 0x05
  if(valveTurnupCountdownM > 0) { --valveTurnupCountdownM; }
     c4c:	8e 81       	ldd	r24, Y+6	; 0x06
     c4e:	88 23       	and	r24, r24
     c50:	11 f0       	breq	.+4      	; 0xc56 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0xf4>
     c52:	81 50       	subi	r24, 0x01	; 1
     c54:	8e 83       	std	Y+6, r24	; 0x06

  // Update the modelled state including the valve position passed by reference.
  const uint8_t newValvePC = ModelledRadValve::computeRequiredTRVPercentOpen(valvePCOpenRef, inputState, *this);
     c56:	f6 01       	movw	r30, r12
     c58:	80 81       	ld	r24, Z
     c5a:	b5 01       	movw	r22, r10
     c5c:	ae 01       	movw	r20, r28
     c5e:	0e 94 9b 04 	call	0x936	; 0x936 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)>
     c62:	68 2f       	mov	r22, r24
  const bool changed = (newValvePC != valvePCOpenRef);
     c64:	f6 01       	movw	r30, r12
     c66:	80 81       	ld	r24, Z
     c68:	70 e0       	ldi	r23, 0x00	; 0
     c6a:	68 17       	cp	r22, r24
     c6c:	29 f1       	breq	.+74     	; 0xcb8 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0x156>
     c6e:	71 e0       	ldi	r23, 0x01	; 1
  if(changed)
    {
    if(newValvePC > valvePCOpenRef)
     c70:	80 81       	ld	r24, Z
     c72:	3c 81       	ldd	r19, Y+4	; 0x04
     c74:	46 2f       	mov	r20, r22
     c76:	50 e0       	ldi	r21, 0x00	; 0
     c78:	86 17       	cp	r24, r22
     c7a:	58 f4       	brcc	.+22     	; 0xc92 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0x130>
  // causing measured temperatures to veer up and down.
  // This attempts to reduce excessive valve noise and energy use
  // and help to avoid boiler short-cycling.
  uint8_t valveTurnupCountdownM;
  // Mark flow as having been increased.
  void valveTurnup() { valveTurnupCountdownM = ANTISEEK_VALVE_RECLOSE_DELAY_M; }
     c7c:	83 e0       	ldi	r24, 0x03	; 3
     c7e:	8e 83       	std	Y+6, r24	; 0x06
      {
      // Defer reclosing valve to avoid excessive hunting.
      valveTurnup();
      cumulativeMovementPC += (newValvePC - valvePCOpenRef);
     c80:	20 81       	ld	r18, Z
     c82:	8b 81       	ldd	r24, Y+3	; 0x03
     c84:	93 2f       	mov	r25, r19
     c86:	9f 70       	andi	r25, 0x0F	; 15
     c88:	82 1b       	sub	r24, r18
     c8a:	91 09       	sbc	r25, r1
     c8c:	84 0f       	add	r24, r20
     c8e:	95 1f       	adc	r25, r21
     c90:	0b c0       	rjmp	.+22     	; 0xca8 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0x146>
  // causing measured temperatures to veer up and down.
  // This attempts to reduce excessive valve noise and energy use
  // and help to avoid boiler short-cycling.
  uint8_t valveTurndownCountdownM;
  // Mark flow as having been reduced.
  void valveTurndown() { valveTurndownCountdownM = ANTISEEK_VALVE_REOPEN_DELAY_M; }
     c92:	89 e0       	ldi	r24, 0x09	; 9
     c94:	8d 83       	std	Y+5, r24	; 0x05
      }
    else
      {
      // Defer opening valve to avoid excessive hunting.
      valveTurndown();
      cumulativeMovementPC += (valvePCOpenRef - newValvePC);
     c96:	f6 01       	movw	r30, r12
     c98:	20 81       	ld	r18, Z
     c9a:	8b 81       	ldd	r24, Y+3	; 0x03
     c9c:	93 2f       	mov	r25, r19
     c9e:	9f 70       	andi	r25, 0x0F	; 15
     ca0:	82 0f       	add	r24, r18
     ca2:	91 1d       	adc	r25, r1
     ca4:	84 1b       	sub	r24, r20
     ca6:	95 0b       	sbc	r25, r21
     ca8:	8b 83       	std	Y+3, r24	; 0x03
     caa:	89 2f       	mov	r24, r25
     cac:	8f 70       	andi	r24, 0x0F	; 15
     cae:	30 7f       	andi	r19, 0xF0	; 240
     cb0:	38 2b       	or	r19, r24
     cb2:	3c 83       	std	Y+4, r19	; 0x04
      }
    valvePCOpenRef = newValvePC;
     cb4:	f6 01       	movw	r30, r12
     cb6:	60 83       	st	Z, r22
    }
  valveMoved = changed;
     cb8:	7a 83       	std	Y+2, r23	; 0x02
  }
     cba:	df 91       	pop	r29
     cbc:	cf 91       	pop	r28
     cbe:	1f 91       	pop	r17
     cc0:	0f 91       	pop	r16
     cc2:	ff 90       	pop	r15
     cc4:	ef 90       	pop	r14
     cc6:	df 90       	pop	r13
     cc8:	cf 90       	pop	r12
     cca:	bf 90       	pop	r11
     ccc:	af 90       	pop	r10
     cce:	08 95       	ret

00000cd0 <getByHourStat(unsigned char, unsigned char)>:
// Get raw stats value for hour HH [0,23] from stats set N from non-volatile (EEPROM) store.
// A value of 0xff (255) means unset (or out of range); other values depend on which stats set is being used.
// The stats set is determined by the order in memory.
uint8_t getByHourStat(uint8_t hh, uint8_t statsSet)
  {
  if(statsSet > (EE_END_STATS - EE_START_STATS) / EE_STATS_SET_SIZE) { return((uint8_t) 0xff); } // Invalid set.
     cd0:	6b 30       	cpi	r22, 0x0B	; 11
     cd2:	98 f4       	brcc	.+38     	; 0xcfa <getByHourStat(unsigned char, unsigned char)+0x2a>
  if(hh > 23) { return((uint8_t) 0xff); } // Invalid hour.
     cd4:	88 31       	cpi	r24, 0x18	; 24
     cd6:	88 f4       	brcc	.+34     	; 0xcfa <getByHourStat(unsigned char, unsigned char)+0x2a>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     cd8:	f9 99       	sbic	0x1f, 1	; 31
     cda:	fe cf       	rjmp	.-4      	; 0xcd8 <getByHourStat(unsigned char, unsigned char)+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     cdc:	28 2f       	mov	r18, r24
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	20 50       	subi	r18, 0x00	; 0
     ce2:	3f 4f       	sbci	r19, 0xFF	; 255
     ce4:	88 e1       	ldi	r24, 0x18	; 24
     ce6:	68 9f       	mul	r22, r24
     ce8:	c0 01       	movw	r24, r0
     cea:	11 24       	eor	r1, r1
     cec:	28 0f       	add	r18, r24
     cee:	39 1f       	adc	r19, r25
     cf0:	32 bd       	out	0x22, r19	; 34
     cf2:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     cf4:	f8 9a       	sbi	0x1f, 0	; 31
     cf6:	80 b5       	in	r24, 0x20	; 32
     cf8:	08 95       	ret
  return(eeprom_read_byte((uint8_t *)(EE_START_STATS + (statsSet * (int)EE_STATS_SET_SIZE) + (int)hh)));
     cfa:	8f ef       	ldi	r24, 0xFF	; 255
  }
     cfc:	08 95       	ret

00000cfe <compressTempC16(int)>:
#define COMPRESSION_C16_HIGH_THR_AFTER (COMPRESSION_C16_LOW_THR_AFTER + ((COMPRESSION_C16_HIGH_THRESHOLD-COMPRESSION_C16_LOW_THRESHOLD)>>1)) // High threshold after compression.
#define COMPRESSION_C16_CEIL_VAL (100<<4) // Ceiling input value to compression.
#define COMPRESSION_C16_CEIL_VAL_AFTER (COMPRESSION_C16_HIGH_THR_AFTER + ((COMPRESSION_C16_CEIL_VAL-COMPRESSION_C16_HIGH_THRESHOLD) >> 3)) // Ceiling input value after compression.
uint8_t compressTempC16(int tempC16)
  {
  if(tempC16 <= 0) { return(0); } // Clamp negative values to zero.
     cfe:	18 16       	cp	r1, r24
     d00:	19 06       	cpc	r1, r25
     d02:	14 f0       	brlt	.+4      	; 0xd08 <compressTempC16(int)+0xa>
     d04:	80 e0       	ldi	r24, 0x00	; 0
     d06:	08 95       	ret
  if(tempC16 < COMPRESSION_C16_LOW_THRESHOLD) { return(tempC16 >> 3); } // Preserve 1 bit after the binary point (0.5C precision).
     d08:	8f 3f       	cpi	r24, 0xFF	; 255
     d0a:	91 05       	cpc	r25, r1
     d0c:	09 f0       	breq	.+2      	; 0xd10 <compressTempC16(int)+0x12>
     d0e:	34 f4       	brge	.+12     	; 0xd1c <compressTempC16(int)+0x1e>
     d10:	63 e0       	ldi	r22, 0x03	; 3
     d12:	95 95       	asr	r25
     d14:	87 95       	ror	r24
     d16:	6a 95       	dec	r22
     d18:	e1 f7       	brne	.-8      	; 0xd12 <compressTempC16(int)+0x14>
     d1a:	08 95       	ret
  if(tempC16 < COMPRESSION_C16_HIGH_THRESHOLD)
     d1c:	21 e0       	ldi	r18, 0x01	; 1
     d1e:	80 38       	cpi	r24, 0x80	; 128
     d20:	92 07       	cpc	r25, r18
     d22:	34 f4       	brge	.+12     	; 0xd30 <compressTempC16(int)+0x32>
    { return(((tempC16 - COMPRESSION_C16_LOW_THRESHOLD) >> 1) + COMPRESSION_C16_LOW_THR_AFTER); }
     d24:	80 50       	subi	r24, 0x00	; 0
     d26:	91 40       	sbci	r25, 0x01	; 1
     d28:	95 95       	asr	r25
     d2a:	87 95       	ror	r24
     d2c:	80 5e       	subi	r24, 0xE0	; 224
     d2e:	08 95       	ret
  if(tempC16 < COMPRESSION_C16_CEIL_VAL)
     d30:	26 e0       	ldi	r18, 0x06	; 6
     d32:	80 34       	cpi	r24, 0x40	; 64
     d34:	92 07       	cpc	r25, r18
     d36:	14 f0       	brlt	.+4      	; 0xd3c <compressTempC16(int)+0x3e>
     d38:	88 ef       	ldi	r24, 0xF8	; 248
     d3a:	08 95       	ret
    { return(((tempC16 - COMPRESSION_C16_HIGH_THRESHOLD) >> 3) + COMPRESSION_C16_HIGH_THR_AFTER); }
     d3c:	80 58       	subi	r24, 0x80	; 128
     d3e:	91 40       	sbci	r25, 0x01	; 1
     d40:	43 e0       	ldi	r20, 0x03	; 3
     d42:	95 95       	asr	r25
     d44:	87 95       	ror	r24
     d46:	4a 95       	dec	r20
     d48:	e1 f7       	brne	.-8      	; 0xd42 <compressTempC16(int)+0x44>
     d4a:	80 5a       	subi	r24, 0xA0	; 160
  return(COMPRESSION_C16_CEIL_VAL_AFTER);
  }
     d4c:	08 95       	ret

00000d4e <expandTempC16(unsigned char)>:

// Reverses range compression done by compressTempC16(); results in range [0,100], with varying precision based on original value.
// 0xff (or other invalid) input results in STATS_UNSET_INT. 
int expandTempC16(uint8_t cTemp)
  {
  if(cTemp < COMPRESSION_C16_LOW_THR_AFTER) { return(cTemp << 3); }
     d4e:	80 32       	cpi	r24, 0x20	; 32
     d50:	40 f4       	brcc	.+16     	; 0xd62 <expandTempC16(unsigned char)+0x14>
     d52:	28 2f       	mov	r18, r24
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	f3 e0       	ldi	r31, 0x03	; 3
     d58:	22 0f       	add	r18, r18
     d5a:	33 1f       	adc	r19, r19
     d5c:	fa 95       	dec	r31
     d5e:	e1 f7       	brne	.-8      	; 0xd58 <expandTempC16(unsigned char)+0xa>
     d60:	17 c0       	rjmp	.+46     	; 0xd90 <expandTempC16(unsigned char)+0x42>
  if(cTemp < COMPRESSION_C16_HIGH_THR_AFTER)
     d62:	80 36       	cpi	r24, 0x60	; 96
     d64:	38 f4       	brcc	.+14     	; 0xd74 <expandTempC16(unsigned char)+0x26>
    { return(((cTemp - COMPRESSION_C16_LOW_THR_AFTER) << 1) + COMPRESSION_C16_LOW_THRESHOLD); }
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	22 0f       	add	r18, r18
     d6c:	33 1f       	adc	r19, r19
     d6e:	20 54       	subi	r18, 0x40	; 64
     d70:	3f 4f       	sbci	r19, 0xFF	; 255
     d72:	0e c0       	rjmp	.+28     	; 0xd90 <expandTempC16(unsigned char)+0x42>
  if(cTemp <= COMPRESSION_C16_CEIL_VAL_AFTER)
     d74:	89 3f       	cpi	r24, 0xF9	; 249
     d76:	18 f0       	brcs	.+6      	; 0xd7e <expandTempC16(unsigned char)+0x30>
     d78:	2f ef       	ldi	r18, 0xFF	; 255
     d7a:	3f e7       	ldi	r19, 0x7F	; 127
     d7c:	09 c0       	rjmp	.+18     	; 0xd90 <expandTempC16(unsigned char)+0x42>
    { return(((cTemp - COMPRESSION_C16_HIGH_THR_AFTER) << 3) + COMPRESSION_C16_HIGH_THRESHOLD); }
     d7e:	28 2f       	mov	r18, r24
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	73 e0       	ldi	r23, 0x03	; 3
     d84:	22 0f       	add	r18, r18
     d86:	33 1f       	adc	r19, r19
     d88:	7a 95       	dec	r23
     d8a:	e1 f7       	brne	.-8      	; 0xd84 <expandTempC16(unsigned char)+0x36>
     d8c:	20 58       	subi	r18, 0x80	; 128
     d8e:	31 40       	sbci	r19, 0x01	; 1
  return(STATS_UNSET_INT); // Invalid/unset input.
  }
     d90:	c9 01       	movw	r24, r18
     d92:	08 95       	ret

00000d94 <Sensor<unsigned char>::isAvailable() const>:
    virtual bool begin() { return(false); }

    // Returns true if this sensor is currently available.
    // True by default unless implementation overrides.
    // For those sensors that need starting this will be false before begin().
    virtual bool isAvailable() const { return(true); }
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	08 95       	ret

00000d98 <Sensor<unsigned char>::tag() const>:
    // only as required to fetch new values from the underlying sensor.
    virtual uint8_t preferredPollInterval_s() const { return(0); }

    // Returns a suggested (JSON) tag/field/key name including units of get(); NULL means no recommended tag.
    // The lifetime of the pointed-to text must be at least that of the Sensor instance.
    virtual const char *tag() const { return(NULL); }
     d98:	80 e0       	ldi	r24, 0x00	; 0
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	08 95       	ret

00000d9e <Sensor<unsigned char>::handleInterruptSimple()>:
    // Must be fast and ISR (Interrupt Service Routine) safe.
    // Returns true if interrupt was successfully handled and cleared
    // else another interrupt handler in the chain may be called
    // to attempt to clear the interrupt.
    // By default does nothing (and returns false).
    virtual bool handleInterruptSimple() { return(false); }
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	08 95       	ret

00000da2 <Sensor<unsigned char>::begin()>:

    // Begin access to this sensor if applicable and not already begun.
    // Returns true if it needed to be begun.
    // Allows logic to end() if required at the end of a block, etc.
    // Defaults to do nothing (and return false).
    virtual bool begin() { return(false); }
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	08 95       	ret

00000da6 <Sensor<unsigned char>::end()>:
    virtual bool isAvailable() const { return(true); }

    // End access to this sensor if applicable and not already ended.
    // Returns true if it needed to be ended.
    // Defaults to do nothing (and return false).
    virtual bool end() { return(false); }
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	08 95       	ret

00000daa <Sensor<unsigned char>::preferredPollInterval_s() const>:
 
    // Returns non-zero if this implementation requires a regular call to read() to operate correctly.
    // Preferred poll interval (in seconds) or 0 if no regular poll() call required.
    // Default returns 0 indicating regular call to read() not required,
    // only as required to fetch new values from the underlying sensor.
    virtual uint8_t preferredPollInterval_s() const { return(0); }
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	08 95       	ret

00000dae <Sensor<unsigned char>::isValid(unsigned char) const>:
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual T get() const = 0;

    // Returns true if this sensor reading value passed is potentially valid, eg in-range.
    // Default is to always return true, ie all values potentially valid.
    virtual bool isValid(T value) const { return(true); }
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	08 95       	ret

00000db2 <global constructors keyed to _Z10inWarmModev>:
  {
  protected:
      volatile uint8_t value;

      // By default initialise the value to zero.
      SimpleTSUint8Sensor() : value(0) { }
     db2:	10 92 14 02 	sts	0x0214, r1
    // Hours and minutes since room became vacant (doesn't roll back to zero from max hours); zero when room occupied.
    uint8_t vacancyH;
    uint8_t vacancyM;

  public:
    OccupancyTracker() : occupationCountdownM(0), activityCountdownM(0), vacancyH(0), vacancyM(0) { }
     db6:	8a e6       	ldi	r24, 0x6A	; 106
     db8:	91 e0       	ldi	r25, 0x01	; 1
     dba:	90 93 13 02 	sts	0x0213, r25
     dbe:	80 93 12 02 	sts	0x0212, r24
     dc2:	10 92 15 02 	sts	0x0215, r1
     dc6:	10 92 16 02 	sts	0x0216, r1
     dca:	10 92 17 02 	sts	0x0217, r1
     dce:	10 92 18 02 	sts	0x0218, r1
  protected:
    // Requested acuator value/position.
    volatile uint8_t value;

    // By default initialise the value to zero.
    SimpleTSUint8Actuator() : value(0) { }
     dd2:	10 92 1b 02 	sts	0x021B, r1
      : inputState(0),
        callingForHeat(false),
#if defined(TRV_SLEW_GLACIAL)
        glacial(true)
#else
        glacial(false)
     dd6:	8c e4       	ldi	r24, 0x4C	; 76
     dd8:	91 e0       	ldi	r25, 0x01	; 1
     dda:	90 93 1a 02 	sts	0x021A, r25
     dde:	80 93 19 02 	sts	0x0219, r24
struct ModelledRadValveInputState
  {
  ModelledRadValveInputState(const int realTempC16) :
    targetTempC(FROST), 
    minPCOpen(DEFAULT_MIN_VALVE_PC_REALLY_OPEN), maxPCOpen(100),
    widenDeadband(false), glacial(false), hasEcoBias(false), inBakeMode(false)
     de2:	87 e0       	ldi	r24, 0x07	; 7
     de4:	80 93 1c 02 	sts	0x021C, r24
     de8:	8a e0       	ldi	r24, 0x0A	; 10
     dea:	80 93 1d 02 	sts	0x021D, r24
     dee:	84 e6       	ldi	r24, 0x64	; 100
     df0:	80 93 1e 02 	sts	0x021E, r24
     df4:	10 92 1f 02 	sts	0x021F, r1
     df8:	10 92 20 02 	sts	0x0220, r1
     dfc:	10 92 21 02 	sts	0x0221, r1
     e00:	10 92 22 02 	sts	0x0222, r1
// and which may save a little energy if users target the specified temperatures.
// Suggestion c/o GG ~2014/10 code, and generally less misleading anyway!
void ModelledRadValveInputState::setReferenceTemperatures(const int currentTempC16)
  {
  const int referenceTempC16 = currentTempC16 + refTempOffsetC16; // TODO-386: push targeted temperature down by 0.5C to middle of degree.
  refTempC16 = referenceTempC16;
     e04:	88 e0       	ldi	r24, 0x08	; 8
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	90 93 24 02 	sts	0x0224, r25
     e0c:	80 93 23 02 	sts	0x0223, r24
  ModelledRadValveState() :
    initialised(false),
    isFiltering(false),
    valveMoved(false),
    cumulativeMovementPC(0),
    valveTurndownCountdownM(0), valveTurnupCountdownM(0)
     e10:	10 92 25 02 	sts	0x0225, r1
     e14:	10 92 26 02 	sts	0x0226, r1
     e18:	10 92 27 02 	sts	0x0227, r1
     e1c:	10 92 28 02 	sts	0x0228, r1
     e20:	80 91 29 02 	lds	r24, 0x0229
     e24:	80 7f       	andi	r24, 0xF0	; 240
     e26:	80 93 29 02 	sts	0x0229, r24
     e2a:	10 92 2a 02 	sts	0x022A, r1
     e2e:	10 92 2b 02 	sts	0x022B, r1
      : inputState(0),
        callingForHeat(false),
#if defined(TRV_SLEW_GLACIAL)
        glacial(true)
#else
        glacial(false)
     e32:	10 92 3c 02 	sts	0x023C, r1
     e36:	10 92 3d 02 	sts	0x023D, r1
  else if(getSubCycleTime() >= nearOverrunThreshold)
    {
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("?O"); // Near overrun.  Note 2ms/char to send...
    }
#endif
  }
     e3a:	08 95       	ret

00000e3c <pollIO(bool)>:
// Call this to do an I/O poll if needed; returns true if something useful happened.
// This call should typically take << 1ms at 1MHz CPU.
// Does not change CPU clock speeds, mess with interrupts (other than possible brief blocking), or sleep.
// Limits actual poll rate to something like once every 32ms, unless force is true.
//   * force if true then force full poll on every call (ie do not internally rate-limit)
bool pollIO(const bool force)
     e3c:	38 2f       	mov	r19, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     e3e:	f9 99       	sbic	0x1f, 1	; 31
     e40:	fe cf       	rjmp	.-4      	; 0xe3e <pollIO(bool)+0x2>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     e42:	82 e1       	ldi	r24, 0x12	; 18
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	92 bd       	out	0x22, r25	; 34
     e48:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     e4a:	f8 9a       	sbi	0x1f, 0	; 31
     e4c:	80 b5       	in	r24, 0x20	; 32
  {
#if defined(ENABLE_BOILER_HUB) && defined(USE_MODULE_FHT8VSIMPLE)
  if(inHubMode())
     e4e:	8f 3f       	cpi	r24, 0xFF	; 255
     e50:	99 f0       	breq	.+38     	; 0xe78 <pollIO(bool)+0x3c>
    {
    static volatile uint8_t _pO_lastPoll;

    // Poll RX at most about every ~32ms to help approx match spil rate when called in loop with 30ms nap.
    const uint8_t sct = getSubCycleTime();
     e52:	20 91 b2 00 	lds	r18, 0x00B2
    if(force || ((0 == (sct & 3)) && (sct != _pO_lastPoll)))
     e56:	33 23       	and	r19, r19
     e58:	51 f4       	brne	.+20     	; 0xe6e <pollIO(bool)+0x32>
     e5a:	82 2f       	mov	r24, r18
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	83 70       	andi	r24, 0x03	; 3
     e60:	90 70       	andi	r25, 0x00	; 0
     e62:	89 2b       	or	r24, r25
     e64:	49 f4       	brne	.+18     	; 0xe78 <pollIO(bool)+0x3c>
     e66:	80 91 92 02 	lds	r24, 0x0292
     e6a:	28 17       	cp	r18, r24
     e6c:	29 f0       	breq	.+10     	; 0xe78 <pollIO(bool)+0x3c>
      {
      _pO_lastPoll = sct;
     e6e:	20 93 92 02 	sts	0x0292, r18
      if(FHT8VCallForHeatPoll()) // Check if call-for-heat has been overheard.
     e72:	0e 94 df 12 	call	0x25be	; 0x25be <FHT8VCallForHeatPoll()>
     e76:	08 95       	ret
     e78:	80 e0       	ldi	r24, 0x00	; 0
        { return(true); }
      }
    }
#endif
  return(false);
  }
     e7a:	08 95       	ret

00000e7c <smoothStatsValue(unsigned char, unsigned char)>:

// Compute new linearly-smoothed value given old smoothed value and new value.
// Guaranteed not to produce a value higher than the max of the old smoothed value and the new value.
// Uses stochastic rounding to nearest to allow nominally sub-lsb values to have an effect over time.
// Usually only made public for unit testing.
uint8_t smoothStatsValue(const uint8_t oldSmoothed, const uint8_t newValue)
     e7c:	0f 93       	push	r16
     e7e:	1f 93       	push	r17
     e80:	18 2f       	mov	r17, r24
     e82:	06 2f       	mov	r16, r22
  {
  if(oldSmoothed == newValue) { return(oldSmoothed); } // Optimisation: smoothed value is unchanged if new value is the same as extant.
     e84:	86 17       	cp	r24, r22
     e86:	b9 f0       	breq	.+46     	; 0xeb6 <smoothStatsValue(unsigned char, unsigned char)+0x3a>
  // Compute and update with new stochastically-rounded exponentially-smoothed ("Brown's simple exponential smoothing") value.
  // Stochastic rounding allows sub-lsb values to have an effect over time.
  const uint8_t stocAdd = randRNG8() & ((1 << STATS_SMOOTH_SHIFT) - 1); // Allows sub-lsb values to have an effect over time.
     e88:	0e 94 a4 21 	call	0x4348	; 0x4348 <randRNG8()>
  DEBUG_SERIAL_PRINT_FLASHSTRING("stocAdd=");
  DEBUG_SERIAL_PRINT(stocAdd);
  DEBUG_SERIAL_PRINTLN();
#endif
  // Do arithmetic in 16 bits to avoid over-/under- flows.
  return((uint8_t) (((((uint16_t) oldSmoothed) << STATS_SMOOTH_SHIFT) - ((uint16_t)oldSmoothed) + ((uint16_t)newValue) + stocAdd) >> STATS_SMOOTH_SHIFT));
     e8c:	21 2f       	mov	r18, r17
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	a9 01       	movw	r20, r18
     e92:	b3 e0       	ldi	r27, 0x03	; 3
     e94:	44 0f       	add	r20, r20
     e96:	55 1f       	adc	r21, r21
     e98:	ba 95       	dec	r27
     e9a:	e1 f7       	brne	.-8      	; 0xe94 <smoothStatsValue(unsigned char, unsigned char)+0x18>
     e9c:	42 1b       	sub	r20, r18
     e9e:	53 0b       	sbc	r21, r19
     ea0:	87 70       	andi	r24, 0x07	; 7
     ea2:	48 0f       	add	r20, r24
     ea4:	51 1d       	adc	r21, r1
     ea6:	40 0f       	add	r20, r16
     ea8:	51 1d       	adc	r21, r1
     eaa:	a3 e0       	ldi	r26, 0x03	; 3
     eac:	56 95       	lsr	r21
     eae:	47 95       	ror	r20
     eb0:	aa 95       	dec	r26
     eb2:	e1 f7       	brne	.-8      	; 0xeac <smoothStatsValue(unsigned char, unsigned char)+0x30>
     eb4:	14 2f       	mov	r17, r20
  }
     eb6:	81 2f       	mov	r24, r17
     eb8:	1f 91       	pop	r17
     eba:	0f 91       	pop	r16
     ebc:	08 95       	ret

00000ebe <simpleUpdateStatsPair(unsigned char, unsigned char, unsigned char)>:
  }
// Get some constant calculation done at compile time,
//   * lastSetN  is the set number for the 'last' values, with 'smoothed' assumed to be the next set.
//   * hh  hour for these stats [0,23].
//   * value  new stats value in range [0,254].
static inline void simpleUpdateStatsPair(const uint8_t lastSetN, const uint8_t hh, const uint8_t value)
     ebe:	ff 92       	push	r15
     ec0:	0f 93       	push	r16
     ec2:	1f 93       	push	r17
     ec4:	f4 2e       	mov	r15, r20
    DEBUG_SERIAL_PRINT(hh);
    DEBUG_SERIAL_PRINT_FLASHSTRING("h = ");
    DEBUG_SERIAL_PRINT(value);
    DEBUG_SERIAL_PRINTLN();
#endif
  simpleUpdateStatsPair_((uint8_t *)(EE_STATS_START_ADDR(lastSetN) + (hh)), (value));
     ec6:	98 e1       	ldi	r25, 0x18	; 24
     ec8:	89 9f       	mul	r24, r25
     eca:	80 01       	movw	r16, r0
     ecc:	11 24       	eor	r1, r1
     ece:	06 0f       	add	r16, r22
     ed0:	11 1d       	adc	r17, r1
     ed2:	00 50       	subi	r16, 0x00	; 0
     ed4:	1f 4f       	sbci	r17, 0xFF	; 255
#if 0 && defined(DEBUG) // Extra arg validation during dev.
  if((((int)lastEEPtr) < EE_START_STATS) || (((int)lastEEPtr)+24 > EE_END_STATS)) { panic(); }
  if(0xff == value) { panic(); }
#endif
  // Update the last-sample slot using the mean samples value.
  eeprom_smart_update_byte(lastEEPtr, value);
     ed6:	c8 01       	movw	r24, r16
     ed8:	64 2f       	mov	r22, r20
     eda:	0e 94 49 10 	call	0x2092	; 0x2092 <eeprom_smart_update_byte(unsigned char*, unsigned char)>
  // If existing smoothed value unset or invalid, use new one as is, else fold in.
  uint8_t * const pS = lastEEPtr + 24;
     ede:	08 5e       	subi	r16, 0xE8	; 232
     ee0:	1f 4f       	sbci	r17, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     ee2:	f9 99       	sbic	0x1f, 1	; 31
     ee4:	fe cf       	rjmp	.-4      	; 0xee2 <simpleUpdateStatsPair(unsigned char, unsigned char, unsigned char)+0x24>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     ee6:	12 bd       	out	0x22, r17	; 34
     ee8:	01 bd       	out	0x21, r16	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     eea:	f8 9a       	sbi	0x1f, 0	; 31
     eec:	80 b5       	in	r24, 0x20	; 32
  const uint8_t smoothed = eeprom_read_byte(pS);
  if(0xff == smoothed) { eeprom_smart_update_byte(pS, value); }
     eee:	8f 3f       	cpi	r24, 0xFF	; 255
     ef0:	19 f4       	brne	.+6      	; 0xef8 <simpleUpdateStatsPair(unsigned char, unsigned char, unsigned char)+0x3a>
     ef2:	c8 01       	movw	r24, r16
     ef4:	6f 2d       	mov	r22, r15
     ef6:	05 c0       	rjmp	.+10     	; 0xf02 <simpleUpdateStatsPair(unsigned char, unsigned char, unsigned char)+0x44>
  else { eeprom_smart_update_byte(pS, smoothStatsValue(smoothed, value)); }
     ef8:	6f 2d       	mov	r22, r15
     efa:	0e 94 3e 07 	call	0xe7c	; 0xe7c <smoothStatsValue(unsigned char, unsigned char)>
     efe:	68 2f       	mov	r22, r24
     f00:	c8 01       	movw	r24, r16
     f02:	0e 94 49 10 	call	0x2092	; 0x2092 <eeprom_smart_update_byte(unsigned char*, unsigned char)>
    DEBUG_SERIAL_PRINT_FLASHSTRING("h = ");
    DEBUG_SERIAL_PRINT(value);
    DEBUG_SERIAL_PRINTLN();
#endif
  simpleUpdateStatsPair_((uint8_t *)(EE_STATS_START_ADDR(lastSetN) + (hh)), (value));
  }
     f06:	1f 91       	pop	r17
     f08:	0f 91       	pop	r16
     f0a:	ff 90       	pop	r15
     f0c:	08 95       	ret

00000f0e <setMinBoilerOnMinutes(unsigned char)>:
#endif

#ifndef setMinBoilerOnMinutes
// Set minimum on (and off) time for pointer (minutes); zero to disable hub mode.
// Suggested minimum of 4 minutes for gas combi; much longer for heat pumps for example.
void setMinBoilerOnMinutes(uint8_t mins) { eeprom_smart_update_byte((uint8_t *)EE_START_MIN_BOILER_ON_MINS_INV, ~(mins)); }
     f0e:	68 2f       	mov	r22, r24
     f10:	60 95       	com	r22
     f12:	82 e1       	ldi	r24, 0x12	; 18
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	0e 94 49 10 	call	0x2092	; 0x2092 <eeprom_smart_update_byte(unsigned char*, unsigned char)>
     f1a:	08 95       	ret

00000f1c <setFROSTTargetC(unsigned char)>:

#if defined(SETTABLE_TARGET_TEMPERATURES)
// Set (non-volatile) 'FROST' protection target in C; no higher than getWARMTargetC() returns, strictly positive, in range [MIN_TARGET_C,MAX_TARGET_C].
// Can also be used, even when a temperature pot is present, to set a floor setback temperature.
// Returns false if not set, eg because outside range [MIN_TARGET_C,MAX_TARGET_C], else returns true.
bool setFROSTTargetC(uint8_t tempC)
     f1c:	1f 93       	push	r17
     f1e:	18 2f       	mov	r17, r24
  {
  if((tempC < MIN_TARGET_C) || (tempC > MAX_TARGET_C)) { return(false); } // Invalid temperature.
     f20:	85 50       	subi	r24, 0x05	; 5
     f22:	8b 35       	cpi	r24, 0x5B	; 91
     f24:	58 f4       	brcc	.+22     	; 0xf3c <setFROSTTargetC(unsigned char)+0x20>
  if(tempC > getWARMTargetC()) { return(false); } // Cannot set above WARM target.
     f26:	0e 94 cb 03 	call	0x796	; 0x796 <getWARMTargetC()>
     f2a:	81 17       	cp	r24, r17
     f2c:	38 f0       	brcs	.+14     	; 0xf3c <setFROSTTargetC(unsigned char)+0x20>
  eeprom_smart_update_byte((uint8_t *)EE_START_FROST_C, tempC); // Update in EEPROM if necessary.
     f2e:	8e e0       	ldi	r24, 0x0E	; 14
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	61 2f       	mov	r22, r17
     f34:	0e 94 49 10 	call	0x2092	; 0x2092 <eeprom_smart_update_byte(unsigned char*, unsigned char)>
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	01 c0       	rjmp	.+2      	; 0xf3e <setFROSTTargetC(unsigned char)+0x22>
  return(true); // Assume value correctly written.
     f3c:	80 e0       	ldi	r24, 0x00	; 0
  }
     f3e:	1f 91       	pop	r17
     f40:	08 95       	ret

00000f42 <ModelledRadValve::recalibrate()>:
// If possible exercise the valve to avoid pin sticking and recalibrate valve travel.
// Default does nothing.
void ModelledRadValve::recalibrate()
  {
#ifdef USE_MODULE_FHT8VSIMPLE
  FHT8VSyncAndTXReset(); // Should this be decalcinate instead/also/first?
     f42:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <FHT8VSyncAndTXReset()>
#endif
  }
     f46:	08 95       	ret

00000f48 <bool SimpleStatsRotationBase::put<unsigned char>(Sensor<unsigned char> const&)>:
     f48:	cf 92       	push	r12
     f4a:	df 92       	push	r13
     f4c:	ef 92       	push	r14
     f4e:	ff 92       	push	r15
     f50:	0f 93       	push	r16
     f52:	1f 93       	push	r17
     f54:	6c 01       	movw	r12, r24
     f56:	8b 01       	movw	r16, r22
     f58:	db 01       	movw	r26, r22
     f5a:	ed 91       	ld	r30, X+
     f5c:	fc 91       	ld	r31, X
     f5e:	00 84       	ldd	r0, Z+8	; 0x08
     f60:	f1 85       	ldd	r31, Z+9	; 0x09
     f62:	e0 2d       	mov	r30, r0
     f64:	cb 01       	movw	r24, r22
     f66:	09 95       	icall
     f68:	7c 01       	movw	r14, r24
     f6a:	d8 01       	movw	r26, r16
     f6c:	ed 91       	ld	r30, X+
     f6e:	fc 91       	ld	r31, X
     f70:	02 80       	ldd	r0, Z+2	; 0x02
     f72:	f3 81       	ldd	r31, Z+3	; 0x03
     f74:	e0 2d       	mov	r30, r0
     f76:	c8 01       	movw	r24, r16
     f78:	09 95       	icall
     f7a:	48 2f       	mov	r20, r24
     f7c:	c6 01       	movw	r24, r12
     f7e:	b7 01       	movw	r22, r14
     f80:	50 e0       	ldi	r21, 0x00	; 0
     f82:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <SimpleStatsRotationBase::put(char const*, int)>
     f86:	1f 91       	pop	r17
     f88:	0f 91       	pop	r16
     f8a:	ff 90       	pop	r15
     f8c:	ef 90       	pop	r14
     f8e:	df 90       	pop	r13
     f90:	cf 90       	pop	r12
     f92:	08 95       	ret

00000f94 <rawStatsTX(bool, unsigned char*, bool, bool)>:
//       the unit will resume RX after sending the stats
//   * doubleTX  double TX to increase chance of successful reception
// This will use whichever transmission medium/carrier/etc is available.
#define STATS_MSG_START_OFFSET (RFM22_PREAMBLE_BYTES + RFM22_SYNC_MIN_BYTES)
#define STATS_MSG_MAX_LEN (64 - STATS_MSG_START_OFFSET)
static void rawStatsTX(const bool isBinary, uint8_t * const buf, const bool resumeRX, const bool doubleTX)
     f94:	ef 92       	push	r14
     f96:	ff 92       	push	r15
     f98:	0f 93       	push	r16
     f9a:	1f 93       	push	r17
     f9c:	8b 01       	movw	r16, r22
     f9e:	e4 2e       	mov	r14, r20
     fa0:	f2 2e       	mov	r15, r18
  {
  // Write in the preamble/sync bytes.
  uint8_t *bptr = buf;
  // Start with RFM23-friendly preamble which ends with with the aacccccc sync word.
  memset(bptr, RFM22_PREAMBLE_BYTE, RFM22_PREAMBLE_BYTES);
     fa2:	cb 01       	movw	r24, r22
     fa4:	6a ea       	ldi	r22, 0xAA	; 170
     fa6:	70 e0       	ldi	r23, 0x00	; 0
     fa8:	45 e0       	ldi	r20, 0x05	; 5
     faa:	50 e0       	ldi	r21, 0x00	; 0
     fac:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <memset>
  bptr += RFM22_PREAMBLE_BYTES;
  memset(bptr, RFM22_SYNC_BYTE, RFM22_SYNC_MIN_BYTES);
     fb0:	c8 01       	movw	r24, r16
     fb2:	05 96       	adiw	r24, 0x05	; 5
     fb4:	6c ec       	ldi	r22, 0xCC	; 204
     fb6:	70 e0       	ldi	r23, 0x00	; 0
     fb8:	43 e0       	ldi	r20, 0x03	; 3
     fba:	50 e0       	ldi	r21, 0x00	; 0
     fbc:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <memset>
  bptr += RFM22_SYNC_MIN_BYTES;

  // TODO: put in listen before TX to reduce collisions (CSMA).
  // Send message starting will preamble.
  // Assume RFM22/23 support for now.
  RFM22QueueCmdToFF(buf);
     fc0:	c8 01       	movw	r24, r16
     fc2:	0e 94 9b 22 	call	0x4536	; 0x4536 <RFM22QueueCmdToFF(unsigned char*)>
  RFM22TXFIFO(); // Send it!  Approx 1.6ms/byte.     
     fc6:	0e 94 93 23 	call	0x4726	; 0x4726 <RFM22TXFIFO()>
  if(doubleTX)
     fca:	ff 20       	and	r15, r15
     fcc:	29 f0       	breq	.+10     	; 0xfd8 <rawStatsTX(bool, unsigned char*, bool, bool)+0x44>
    {
    nap(WDTO_15MS);
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <nap(signed char)>
    RFM22TXFIFO(); // Re-send it!
     fd4:	0e 94 93 23 	call	0x4726	; 0x4726 <RFM22TXFIFO()>
    }

  // Resume appropriate behaviour after TX.
#if defined(ENABLE_BOILER_HUB)
  if(resumeRX)
     fd8:	ee 20       	and	r14, r14
     fda:	21 f0       	breq	.+8      	; 0xfe4 <rawStatsTX(bool, unsigned char*, bool, bool)+0x50>
    { SetupToEavesdropOnFHT8V(); } // Revert to hub listening...
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	0e 94 9e 11 	call	0x233c	; 0x233c <SetupToEavesdropOnFHT8V(bool)>
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <rawStatsTX(bool, unsigned char*, bool, bool)+0x54>
  else
#endif
    { RFM22ModeStandbyAndClearState(); } // Go to standby to conserve energy.
     fe4:	0e 94 4b 23 	call	0x4696	; 0x4696 <RFM22ModeStandbyAndClearState()>
  }
     fe8:	1f 91       	pop	r17
     fea:	0f 91       	pop	r16
     fec:	ff 90       	pop	r15
     fee:	ef 90       	pop	r14
     ff0:	08 95       	ret

00000ff2 <__vector_5>:

#if !defined(ALT_MAIN_LOOP) // Do not define handlers here when alt main is in use.
// Previous state of port D pins to help detect changes.
static volatile uint8_t prevStatePD;
// Interrupt service routine for PD I/O port transition changes (including RX).
ISR(PCINT2_vect)
     ff2:	1f 92       	push	r1
     ff4:	0f 92       	push	r0
     ff6:	0f b6       	in	r0, 0x3f	; 63
     ff8:	0f 92       	push	r0
     ffa:	11 24       	eor	r1, r1
     ffc:	2f 93       	push	r18
     ffe:	3f 93       	push	r19
    1000:	4f 93       	push	r20
    1002:	5f 93       	push	r21
    1004:	6f 93       	push	r22
    1006:	7f 93       	push	r23
    1008:	8f 93       	push	r24
    100a:	9f 93       	push	r25
    100c:	af 93       	push	r26
    100e:	bf 93       	push	r27
    1010:	ef 93       	push	r30
    1012:	ff 93       	push	r31
  {
  const uint8_t pins = PIND;
    1014:	89 b1       	in	r24, 0x09	; 9
  const uint8_t changes = pins ^ prevStatePD;
    1016:	90 91 91 02 	lds	r25, 0x0291
  prevStatePD = pins;
    101a:	80 93 91 02 	sts	0x0291, r24
  // If an interrupt arrived from no other masked source then wake the CLI.
  // The will ensure that the CLI is active, eg from RX activity,
  // eg it is possible to wake the CLI subsystem with an extra CR or LF.
  // It is OK to trigger this from other things such as button presses.
  // FIXME: ensure that resetCLIActiveTimer() is inlineable to minimise ISR prologue/epilogue time and space.
  if(!(changes & MASK_PD & ~1)) { resetCLIActiveTimer(); }
    101e:	0e 94 29 27 	call	0x4e52	; 0x4e52 <resetCLIActiveTimer()>
  }
    1022:	ff 91       	pop	r31
    1024:	ef 91       	pop	r30
    1026:	bf 91       	pop	r27
    1028:	af 91       	pop	r26
    102a:	9f 91       	pop	r25
    102c:	8f 91       	pop	r24
    102e:	7f 91       	pop	r23
    1030:	6f 91       	pop	r22
    1032:	5f 91       	pop	r21
    1034:	4f 91       	pop	r20
    1036:	3f 91       	pop	r19
    1038:	2f 91       	pop	r18
    103a:	0f 90       	pop	r0
    103c:	0f be       	out	0x3f, r0	; 63
    103e:	0f 90       	pop	r0
    1040:	1f 90       	pop	r1
    1042:	18 95       	reti

00001044 <populateCoreStats(FullStatsMessageCore*)>:


// Clear and populate core stats structure with information from this node.
// Exactly what gets filled in will depend on sensors on the node,
// and may depend on stats TX security level (eg if collecting some sensitive items is also expensive).
void populateCoreStats(FullStatsMessageCore_t *const content)
    1044:	cf 93       	push	r28
    1046:	df 93       	push	r29
    1048:	ec 01       	movw	r28, r24
#define FullStatsMessageCore_MAX_BYTES_ON_WIRE 8
// Minimum size on wire including trailing CRC of core of FullStatsMessage.  TX message buffer should be one larger for trailing 0xff.
#define FullStatsMessageCore_MIN_BYTES_ON_WIRE 3

// Clear a FullStatsMessageCore_t, also indicating no optional fields present.
static inline void clearFullStatsMessageCore(FullStatsMessageCore_t *const p) { memset(p, 0, sizeof(FullStatsMessageCore_t)); }
    104a:	87 e0       	ldi	r24, 0x07	; 7
    104c:	fe 01       	movw	r30, r28
    104e:	11 92       	st	Z+, r1
    1050:	8a 95       	dec	r24
    1052:	e9 f7       	brne	.-6      	; 0x104e <populateCoreStats(FullStatsMessageCore*)+0xa>
  {
  clearFullStatsMessageCore(content); // Defensive programming: all fields should be set explicitly below.
  if(localFHT8VTRVEnabled())
    1054:	0e 94 45 11 	call	0x228a	; 0x228a <localFHT8VTRVEnabled()>
    1058:	88 23       	and	r24, r24
    105a:	31 f0       	breq	.+12     	; 0x1068 <populateCoreStats(FullStatsMessageCore*)+0x24>
    {
    // Use FHT8V house codes if available.
    content->id0 = FHT8VGetHC1();
    105c:	0e 94 33 11 	call	0x2266	; 0x2266 <FHT8VGetHC1()>
    1060:	89 83       	std	Y+1, r24	; 0x01
    content->id1 = FHT8VGetHC2();
    1062:	0e 94 3c 11 	call	0x2278	; 0x2278 <FHT8VGetHC2()>
    1066:	11 c0       	rjmp	.+34     	; 0x108a <populateCoreStats(FullStatsMessageCore*)+0x46>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1068:	f9 99       	sbic	0x1f, 1	; 31
    106a:	fe cf       	rjmp	.-4      	; 0x1068 <populateCoreStats(FullStatsMessageCore*)+0x24>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    106c:	84 e1       	ldi	r24, 0x14	; 20
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	92 bd       	out	0x22, r25	; 34
    1072:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1074:	f8 9a       	sbi	0x1f, 0	; 31
    1076:	80 b5       	in	r24, 0x20	; 32
    }
  else
    {
    // Use OpenTRV unique ID if no other higher-priority ID.
    content->id0 = eeprom_read_byte(0 + (uint8_t *)EE_START_ID);
    1078:	89 83       	std	Y+1, r24	; 0x01
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    107a:	f9 99       	sbic	0x1f, 1	; 31
    107c:	fe cf       	rjmp	.-4      	; 0x107a <populateCoreStats(FullStatsMessageCore*)+0x36>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    107e:	85 e1       	ldi	r24, 0x15	; 21
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	92 bd       	out	0x22, r25	; 34
    1084:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1086:	f8 9a       	sbi	0x1f, 0	; 31
    1088:	80 b5       	in	r24, 0x20	; 32
    content->id1 = eeprom_read_byte(1 + (uint8_t *)EE_START_ID);
    108a:	8a 83       	std	Y+2, r24	; 0x02
    }
  content->containsID = true;
    108c:	28 81       	ld	r18, Y
    108e:	82 2f       	mov	r24, r18
    1090:	81 60       	ori	r24, 0x01	; 1
    1092:	88 83       	st	Y, r24
  content->tempAndPower.tempC16 = TemperatureC16.get();
    1094:	80 91 c8 03 	lds	r24, 0x03C8
    1098:	8b 83       	std	Y+3, r24	; 0x03
    109a:	90 91 c9 03 	lds	r25, 0x03C9
    109e:	9f 77       	andi	r25, 0x7F	; 127
    10a0:	8c 81       	ldd	r24, Y+4	; 0x04
    10a2:	80 78       	andi	r24, 0x80	; 128
    10a4:	89 2b       	or	r24, r25
    10a6:	8c 83       	std	Y+4, r24	; 0x04
  content->tempAndPower.powerLow = Supply_mV.isSupplyVoltageLow();
    10a8:	90 91 68 03 	lds	r25, 0x0368
    10ac:	97 95       	ror	r25
    10ae:	99 27       	eor	r25, r25
    10b0:	97 95       	ror	r25
    10b2:	8f 77       	andi	r24, 0x7F	; 127
    10b4:	89 2b       	or	r24, r25
    10b6:	8c 83       	std	Y+4, r24	; 0x04
  content->containsTempAndPower = true;
    10b8:	23 60       	ori	r18, 0x03	; 3
    10ba:	28 83       	st	Y, r18
  public:
    // Return last value fetched by read(); undefined before first read().
    // Usually fast.
    // Often likely to be thread-safe or usable within ISRs (Interrupt Service Routines),
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual uint8_t get() const { return(value); }
    10bc:	80 91 be 03 	lds	r24, 0x03BE
  content->ambL = fnmax((uint8_t)1, fnmin((uint8_t)254, (uint8_t)(AmbLight.get() >> 2))); // Coerce to allowed value in range [1,254]. Bug-fix c/o Gary Gladman!
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	95 95       	asr	r25
    10c4:	87 95       	ror	r24
    10c6:	95 95       	asr	r25
    10c8:	87 95       	ror	r24
    10ca:	8d 83       	std	Y+5, r24	; 0x05
    10cc:	98 2f       	mov	r25, r24
    10ce:	88 23       	and	r24, r24
    10d0:	09 f4       	brne	.+2      	; 0x10d4 <populateCoreStats(FullStatsMessageCore*)+0x90>
    10d2:	91 e0       	ldi	r25, 0x01	; 1
    10d4:	9d 83       	std	Y+5, r25	; 0x05
  content->containsAmbL = true;
    10d6:	88 81       	ld	r24, Y
    10d8:	84 60       	ori	r24, 0x04	; 4
    10da:	88 83       	st	Y, r24
    // Returns true if the room appears to be likely occupied (with active users) recently.
    // This uses the same timer as isOccupied() (restarted by markAsOccupied())
    // but returns to false somewhat sooner for example to allow ramping up more costly occupancy detection methods
    // and to allow some simple graduated occupancy responses.
    // Thread-safe.
    bool isLikelyRecentlyOccupied() { return(occupationCountdownM > OCCUPATION_TIMEOUT_1_M); }
    10dc:	80 91 15 02 	lds	r24, 0x0215
    void markAsPossiblyOccupied();

    // Two-bit occupancy: (00 not disclosed,) 1 not occupied, 2 possibly occupied, 3 probably occupied.
    // 0 is not returned by this implementation.
    // Thread-safe.
    uint8_t twoBitOccupancyValue() { return(isLikelyRecentlyOccupied() ? 3 : (isLikelyOccupied() ? 2 : 1)); }
    10e0:	82 32       	cpi	r24, 0x22	; 34
    10e2:	10 f0       	brcs	.+4      	; 0x10e8 <populateCoreStats(FullStatsMessageCore*)+0xa4>
    10e4:	93 e0       	ldi	r25, 0x03	; 3
    10e6:	07 c0       	rjmp	.+14     	; 0x10f6 <populateCoreStats(FullStatsMessageCore*)+0xb2>

    // Returns true if the room appears to be likely occupied (with active users) now.
    // Operates on a timeout; calling markAsOccupied() restarts the timer.
    // Defaults to false (and API still exists) when OCCUPANCY_SUPPORT not defined.
    // Thread-safe.
    bool isLikelyOccupied() { return(0 != occupationCountdownM); }
    10e8:	80 91 15 02 	lds	r24, 0x0215
    void markAsPossiblyOccupied();

    // Two-bit occupancy: (00 not disclosed,) 1 not occupied, 2 possibly occupied, 3 probably occupied.
    // 0 is not returned by this implementation.
    // Thread-safe.
    uint8_t twoBitOccupancyValue() { return(isLikelyRecentlyOccupied() ? 3 : (isLikelyOccupied() ? 2 : 1)); }
    10ec:	88 23       	and	r24, r24
    10ee:	11 f4       	brne	.+4      	; 0x10f4 <populateCoreStats(FullStatsMessageCore*)+0xb0>
    10f0:	91 e0       	ldi	r25, 0x01	; 1
    10f2:	01 c0       	rjmp	.+2      	; 0x10f6 <populateCoreStats(FullStatsMessageCore*)+0xb2>
    10f4:	92 e0       	ldi	r25, 0x02	; 2
  // OC1/OC2 = Occupancy: 00 not disclosed, 01 not occupied, 10 possibly occupied, 11 probably occupied.
  // The encodeFullStatsMessageCore() route should omit data not appopriate for security reasons.
  content->occ = Occupancy.twoBitOccupancyValue();
    10f6:	8e 81       	ldd	r24, Y+6	; 0x06
    10f8:	8c 7f       	andi	r24, 0xFC	; 252
    10fa:	89 2b       	or	r24, r25
    10fc:	8e 83       	std	Y+6, r24	; 0x06
  }
    10fe:	df 91       	pop	r29
    1100:	cf 91       	pop	r28
    1102:	08 95       	ret

00001104 <bareStatsTX(bool, bool, bool)>:
// This may be binary or JSON format.
//   * resumeRX  if true and unit capable of running in hub/RX mode,
//       the unit will resume RX after sending the stats
//   * allowDoubleTX  allow double TX to increase chance of successful reception
//   * doBinary  send binary form, else JSON form if supported
static void bareStatsTX(const bool resumeRX, const bool allowDoubleTX, const bool doBinary)   {
    1104:	8f 92       	push	r8
    1106:	9f 92       	push	r9
    1108:	af 92       	push	r10
    110a:	bf 92       	push	r11
    110c:	cf 92       	push	r12
    110e:	df 92       	push	r13
    1110:	ef 92       	push	r14
    1112:	ff 92       	push	r15
    1114:	0f 93       	push	r16
    1116:	1f 93       	push	r17
    1118:	df 93       	push	r29
    111a:	cf 93       	push	r28
    111c:	cd b7       	in	r28, 0x3d	; 61
    111e:	de b7       	in	r29, 0x3e	; 62
    1120:	c8 54       	subi	r28, 0x48	; 72
    1122:	d0 40       	sbci	r29, 0x00	; 0
    1124:	0f b6       	in	r0, 0x3f	; 63
    1126:	f8 94       	cli
    1128:	de bf       	out	0x3e, r29	; 62
    112a:	0f be       	out	0x3f, r0	; 63
    112c:	cd bf       	out	0x3d, r28	; 61
    112e:	98 2e       	mov	r9, r24
    1130:	86 2e       	mov	r8, r22
  //   * max binary length, or max JSON length + 1 for CRC + 1 to allow detection of oversize message
  //   * terminating 0xff
  uint8_t buf[STATS_MSG_START_OFFSET + max(FullStatsMessageCore_MAX_BYTES_ON_WIRE,  MSG_JSON_MAX_LENGTH+1) + 1];

#if defined(ALLOW_JSON_OUTPUT)
  if(doBinary)
    1132:	44 23       	and	r20, r20
    1134:	01 f1       	breq	.+64     	; 0x1176 <bareStatsTX(bool, bool, bool)+0x72>
#endif
    {
    // Send binary message first.
    // Gather core stats.
    FullStatsMessageCore_t content;
    populateCoreStats(&content);
    1136:	6e 01       	movw	r12, r28
    1138:	08 94       	sec
    113a:	c1 1c       	adc	r12, r1
    113c:	d1 1c       	adc	r13, r1
    113e:	c6 01       	movw	r24, r12
    1140:	0e 94 22 08 	call	0x1044	; 0x1044 <populateCoreStats(FullStatsMessageCore*)>
    const uint8_t *msg1 = encodeFullStatsMessageCore(buf + STATS_MSG_START_OFFSET, sizeof(buf) - STATS_MSG_START_OFFSET, getStatsTXLevel(), false, &content);
    1144:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <getStatsTXLevel()>
    1148:	ac 01       	movw	r20, r24
    114a:	68 e0       	ldi	r22, 0x08	; 8
    114c:	e6 2e       	mov	r14, r22
    114e:	f1 2c       	mov	r15, r1
    1150:	ec 0e       	add	r14, r28
    1152:	fd 1e       	adc	r15, r29
    1154:	c7 01       	movw	r24, r14
    1156:	08 96       	adiw	r24, 0x08	; 8
    1158:	69 e3       	ldi	r22, 0x39	; 57
    115a:	20 e0       	ldi	r18, 0x00	; 0
    115c:	86 01       	movw	r16, r12
    115e:	0e 94 56 1c 	call	0x38ac	; 0x38ac <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)>
    if(NULL == msg1)
    1162:	89 2b       	or	r24, r25
    1164:	09 f4       	brne	.+2      	; 0x1168 <bareStatsTX(bool, bool, bool)+0x64>
    1166:	0e c1       	rjmp	.+540    	; 0x1384 <bareStatsTX(bool, bool, bool)+0x280>
DEBUG_SERIAL_PRINTLN_FLASHSTRING("Bin gen err!");
#endif
      return;
      }
    // Record stats as if remote, and treat channel as secure.
    recordCoreStats(true, &content);
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	b6 01       	movw	r22, r12
    116c:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <recordCoreStats(bool, FullStatsMessageCore const*)>
    // Send it!
    rawStatsTX(true, buf, resumeRX, allowDoubleTX);
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	b7 01       	movw	r22, r14
    1174:	e6 c0       	rjmp	.+460    	; 0x1342 <bareStatsTX(bool, bool, bool)+0x23e>
    // Now append JSON text and closing 0xff...
    // Use letters that correspond to the values in ParsedRemoteStatsRecord and when displaying/parsing @ status records.
    int8_t wrote;

    // Managed JSON stats.
    static SimpleStatsRotation<8> ss1; // Configured for maximum different stats.
    1176:	80 91 47 02 	lds	r24, 0x0247
    117a:	88 23       	and	r24, r24
    117c:	a9 f5       	brne	.+106    	; 0x11e8 <bareStatsTX(bool, bool, bool)+0xe4>
    117e:	87 e4       	ldi	r24, 0x47	; 71
    1180:	92 e0       	ldi	r25, 0x02	; 2
    1182:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <__cxa_guard_acquire>
    1186:	89 2b       	or	r24, r25
    1188:	79 f1       	breq	.+94     	; 0x11e8 <bareStatsTX(bool, bool, bool)+0xe4>

    // Initialise base with appropriate storage (non-null) and capacity knowledge.
    SimpleStatsRotationBase(DescValueTuple *_stats, const uint8_t _capacity)
      : capacity(_capacity), stats(_stats), nStats(0),
        lastTXed(~0), lastTXedLoPri(~0), lastTXedHiPri(~0), // Show the first item on the first pass...
        id(NULL)
    118a:	88 e0       	ldi	r24, 0x08	; 8
    118c:	80 93 4f 02 	sts	0x024F, r24
    1190:	29 e5       	ldi	r18, 0x59	; 89
    1192:	32 e0       	ldi	r19, 0x02	; 2
    1194:	30 93 51 02 	sts	0x0251, r19
    1198:	20 93 50 02 	sts	0x0250, r18
    119c:	10 92 52 02 	sts	0x0252, r1
    11a0:	8f ef       	ldi	r24, 0xFF	; 255
    11a2:	80 93 53 02 	sts	0x0253, r24
    11a6:	80 93 54 02 	sts	0x0254, r24
    11aa:	80 93 55 02 	sts	0x0255, r24
    11ae:	10 92 57 02 	sts	0x0257, r1
    11b2:	10 92 56 02 	sts	0x0256, r1
    // is displayed immediately after the @/ID field when enabled,
    // and missing count values suggest a lost transmission somewhere.
    // Takes minimal space (1 byte).
    struct WriteCount
      {
      WriteCount() : enabled(0), count(0) { }
    11b6:	80 91 58 02 	lds	r24, 0x0258
    11ba:	80 7f       	andi	r24, 0xF0	; 240
    11bc:	80 93 58 02 	sts	0x0258, r24
    11c0:	f9 01       	movw	r30, r18
    // The default sensitivity is set to forbid transmission at all but minimum (0) leaf TX security settings.
    // By default the stat is normal priority.
    GenericStatsDescriptor(const char * const statKey,
                           const uint8_t statSensitivity = 1,
                           const bool statHighPriority = false)
      : key(statKey), sensitivity(statSensitivity), highPriority(statHighPriority)
    11c2:	91 e0       	ldi	r25, 0x01	; 1
    11c4:	11 82       	std	Z+1, r1	; 0x01
    11c6:	10 82       	st	Z, r1
    11c8:	92 83       	std	Z+2, r25	; 0x02
    11ca:	13 82       	std	Z+3, r1	; 0x03
#endif

  protected:
    struct DescValueTuple
      {
      DescValueTuple() : descriptor(NULL), value(0) { }
    11cc:	15 82       	std	Z+5, r1	; 0x05
    11ce:	14 82       	std	Z+4, r1	; 0x04
      int value;

      // Various run-time flags.
      struct Flags
        {
        Flags() : changed(false) { }
    11d0:	86 81       	ldd	r24, Z+6	; 0x06
    11d2:	8e 7f       	andi	r24, 0xFE	; 254
    11d4:	86 83       	std	Z+6, r24	; 0x06
    11d6:	37 96       	adiw	r30, 0x07	; 7
    // Stats to be tracked and sent; mandatory/priority items must be first.
    // A copy is taken of the user-supplied set of descriptions, preserving order.
    DescValueTuple stats[MaxStats];

  public:
    SimpleStatsRotation() : SimpleStatsRotationBase(stats, MaxStats) { }
    11d8:	22 e0       	ldi	r18, 0x02	; 2
    11da:	e1 39       	cpi	r30, 0x91	; 145
    11dc:	f2 07       	cpc	r31, r18
    11de:	91 f7       	brne	.-28     	; 0x11c4 <bareStatsTX(bool, bool, bool)+0xc0>
    11e0:	87 e4       	ldi	r24, 0x47	; 71
    11e2:	92 e0       	ldi	r25, 0x02	; 2
    11e4:	0e 94 f3 3a 	call	0x75e6	; 0x75e6 <__cxa_guard_release>
    const bool maximise = true; // Make best use of available bandwidth...
    if(ss1.isEmpty())
    11e8:	80 91 52 02 	lds	r24, 0x0252
    11ec:	88 23       	and	r24, r24
    11ee:	29 f4       	brne	.+10     	; 0x11fa <bareStatsTX(bool, bool, bool)+0xf6>
    bool isEmpty() { return(0 == nStats); }

    // Iff true enable the count ("+") field and display immediately after the "@"/ID field.
    // The unsigned count increments as a successful write() operation completes,
    // and wraps after 63 (to limit space), potentially allowing easy detection of lost stats/transmissions.
    void enableCount(bool enable) { c.enabled = enable; }
    11f0:	80 91 58 02 	lds	r24, 0x0258
    11f4:	81 60       	ori	r24, 0x01	; 1
    11f6:	80 93 58 02 	sts	0x0258, r24
    // True if successful, false otherwise (eg capacity already reached).
    bool put(SimpleStatsKey key, int newValue);

    // Create/update value for the given sensor.
    // True if successful, false otherwise (eg capacity already reached).
    template <class T> bool put(const Sensor<T> &s) { return(put(s.tag(), s.get())); }
    11fa:	e0 91 c6 03 	lds	r30, 0x03C6
    11fe:	f0 91 c7 03 	lds	r31, 0x03C7
    1202:	00 84       	ldd	r0, Z+8	; 0x08
    1204:	f1 85       	ldd	r31, Z+9	; 0x09
    1206:	e0 2d       	mov	r30, r0
    1208:	86 ec       	ldi	r24, 0xC6	; 198
    120a:	93 e0       	ldi	r25, 0x03	; 3
    120c:	09 95       	icall
    120e:	8c 01       	movw	r16, r24
    1210:	e0 91 c6 03 	lds	r30, 0x03C6
    1214:	f0 91 c7 03 	lds	r31, 0x03C7
    1218:	02 80       	ldd	r0, Z+2	; 0x02
    121a:	f3 81       	ldd	r31, Z+3	; 0x03
    121c:	e0 2d       	mov	r30, r0
    121e:	86 ec       	ldi	r24, 0xC6	; 198
    1220:	93 e0       	ldi	r25, 0x03	; 3
    1222:	09 95       	icall
    1224:	ac 01       	movw	r20, r24
    1226:	8f e4       	ldi	r24, 0x4F	; 79
    1228:	92 e0       	ldi	r25, 0x02	; 2
    122a:	b8 01       	movw	r22, r16
    122c:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <SimpleStatsRotationBase::put(char const*, int)>
//      // Try and get as much out on the first TX as possible.
//      maximise = true;
      }
    ss1.put(TemperatureC16);
#if defined(HUMIDITY_SENSOR_SUPPORT)
    ss1.put(RelHumidity);
    1230:	8f e4       	ldi	r24, 0x4F	; 79
    1232:	92 e0       	ldi	r25, 0x02	; 2
    1234:	62 ec       	ldi	r22, 0xC2	; 194
    1236:	73 e0       	ldi	r23, 0x03	; 3
    1238:	0e 94 a4 07 	call	0xf48	; 0xf48 <bool SimpleStatsRotationBase::put<unsigned char>(Sensor<unsigned char> const&)>
    // Returns true if the room appears to be likely occupied (with active users) recently.
    // This uses the same timer as isOccupied() (restarted by markAsOccupied())
    // but returns to false somewhat sooner for example to allow ramping up more costly occupancy detection methods
    // and to allow some simple graduated occupancy responses.
    // Thread-safe.
    bool isLikelyRecentlyOccupied() { return(occupationCountdownM > OCCUPATION_TIMEOUT_1_M); }
    123c:	80 91 15 02 	lds	r24, 0x0215
    void markAsPossiblyOccupied();

    // Two-bit occupancy: (00 not disclosed,) 1 not occupied, 2 possibly occupied, 3 probably occupied.
    // 0 is not returned by this implementation.
    // Thread-safe.
    uint8_t twoBitOccupancyValue() { return(isLikelyRecentlyOccupied() ? 3 : (isLikelyOccupied() ? 2 : 1)); }
    1240:	82 32       	cpi	r24, 0x22	; 34
    1242:	10 f0       	brcs	.+4      	; 0x1248 <bareStatsTX(bool, bool, bool)+0x144>
    1244:	43 e0       	ldi	r20, 0x03	; 3
    1246:	07 c0       	rjmp	.+14     	; 0x1256 <bareStatsTX(bool, bool, bool)+0x152>

    // Returns true if the room appears to be likely occupied (with active users) now.
    // Operates on a timeout; calling markAsOccupied() restarts the timer.
    // Defaults to false (and API still exists) when OCCUPANCY_SUPPORT not defined.
    // Thread-safe.
    bool isLikelyOccupied() { return(0 != occupationCountdownM); }
    1248:	80 91 15 02 	lds	r24, 0x0215
    void markAsPossiblyOccupied();

    // Two-bit occupancy: (00 not disclosed,) 1 not occupied, 2 possibly occupied, 3 probably occupied.
    // 0 is not returned by this implementation.
    // Thread-safe.
    uint8_t twoBitOccupancyValue() { return(isLikelyRecentlyOccupied() ? 3 : (isLikelyOccupied() ? 2 : 1)); }
    124c:	88 23       	and	r24, r24
    124e:	11 f4       	brne	.+4      	; 0x1254 <bareStatsTX(bool, bool, bool)+0x150>
    1250:	41 e0       	ldi	r20, 0x01	; 1
    1252:	01 c0       	rjmp	.+2      	; 0x1256 <bareStatsTX(bool, bool, bool)+0x152>
    1254:	42 e0       	ldi	r20, 0x02	; 2
#endif
#if defined(OCCUPANCY_SUPPORT)
    ss1.put(Occupancy.twoBitTag(), Occupancy.twoBitOccupancyValue()); // Reduce spurious TX cf percentage.
    1256:	8f e4       	ldi	r24, 0x4F	; 79
    1258:	92 e0       	ldi	r25, 0x02	; 2
    125a:	6a e0       	ldi	r22, 0x0A	; 10
    125c:	71 e0       	ldi	r23, 0x01	; 1
    125e:	50 e0       	ldi	r21, 0x00	; 0
    1260:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <SimpleStatsRotationBase::put(char const*, int)>
    // At other times more relaxed checking (eg lower power) can be used.
    bool increaseCheckForOccupancy() { return(!isLikelyRecentlyOccupied() && isLikelyOccupied() && !reportedRecently()); }

    // Get number of hours room vacant, zero when room occupied; does not wrap.
    // If forced to zero as soon as occupancy is detected.
    uint16_t getVacancyH() { return((value != 0) ? 0 : vacancyH); }
    1264:	80 91 14 02 	lds	r24, 0x0214
    1268:	88 23       	and	r24, r24
    126a:	19 f0       	breq	.+6      	; 0x1272 <bareStatsTX(bool, bool, bool)+0x16e>
    126c:	40 e0       	ldi	r20, 0x00	; 0
    126e:	50 e0       	ldi	r21, 0x00	; 0
    1270:	04 c0       	rjmp	.+8      	; 0x127a <bareStatsTX(bool, bool, bool)+0x176>
    1272:	80 91 17 02 	lds	r24, 0x0217
    1276:	48 2f       	mov	r20, r24
    1278:	50 e0       	ldi	r21, 0x00	; 0
    ss1.put(Occupancy.vacHTag(), Occupancy.getVacancyH()); // EXPERIMENTAL
    127a:	8f e4       	ldi	r24, 0x4F	; 79
    127c:	92 e0       	ldi	r25, 0x02	; 2
    127e:	6c e0       	ldi	r22, 0x0C	; 12
    1280:	71 e0       	ldi	r23, 0x01	; 1
    1282:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <SimpleStatsRotationBase::put(char const*, int)>
    // This depends on the AVR and other hardware components (eg sensors) in use.
    bool isSupplyVoltageLow() const { return(isLow); }

    // Returns true if the supply appears to be something like mains, that does not need monitoring.
    // This assumes that anything at/above 3V is mains or at least a long way from needing monitoring.
    bool isMains() const { return(!isLow && (mV >= 3000)); }
    1286:	80 91 68 03 	lds	r24, 0x0368
    128a:	88 23       	and	r24, r24
    128c:	09 f0       	breq	.+2      	; 0x1290 <bareStatsTX(bool, bool, bool)+0x18c>
    128e:	5e c0       	rjmp	.+188    	; 0x134c <bareStatsTX(bool, bool, bool)+0x248>
    1290:	80 91 66 03 	lds	r24, 0x0366
    1294:	90 91 67 03 	lds	r25, 0x0367
    1298:	88 5b       	subi	r24, 0xB8	; 184
    129a:	9b 40       	sbci	r25, 0x0B	; 11
    129c:	08 f4       	brcc	.+2      	; 0x12a0 <bareStatsTX(bool, bool, bool)+0x19c>
    129e:	56 c0       	rjmp	.+172    	; 0x134c <bareStatsTX(bool, bool, bool)+0x248>
#endif
    // OPTIONAL items
    // Only TX supply voltage for units apparently not mains powered.
    if(!Supply_mV.isMains()) { ss1.put(Supply_mV); } else { ss1.remove(Supply_mV.tag()); }
    12a0:	8f e4       	ldi	r24, 0x4F	; 79
    12a2:	92 e0       	ldi	r25, 0x02	; 2
    12a4:	62 e1       	ldi	r22, 0x12	; 18
    12a6:	71 e0       	ldi	r23, 0x01	; 1
    12a8:	0e 94 31 1a 	call	0x3462	; 0x3462 <SimpleStatsRotationBase::remove(char const*)>
#if !defined(LOCAL_TRV) // Deploying as sensor unit, not TRV controller, so show all sensors and no TRV stuff.
    // Only show ambient light levels for non-TRV pure-sensor units.
    ss1.put(AmbLight);
#else
    ss1.put(NominalRadValve);
    12ac:	8f e4       	ldi	r24, 0x4F	; 79
    12ae:	92 e0       	ldi	r25, 0x02	; 2
    12b0:	69 e1       	ldi	r22, 0x19	; 25
    12b2:	72 e0       	ldi	r23, 0x02	; 2
    12b4:	0e 94 a4 07 	call	0xf48	; 0xf48 <bool SimpleStatsRotationBase::put<unsigned char>(Sensor<unsigned char> const&)>
    ss1.put(NominalRadValve.tagTTC(), NominalRadValve.getTargetTempC());
    12b8:	40 91 1c 02 	lds	r20, 0x021C
    12bc:	8f e4       	ldi	r24, 0x4F	; 79
    12be:	92 e0       	ldi	r25, 0x02	; 2
    12c0:	67 e1       	ldi	r22, 0x17	; 23
    12c2:	71 e0       	ldi	r23, 0x01	; 1
    12c4:	50 e0       	ldi	r21, 0x00	; 0
    12c6:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <SimpleStatsRotationBase::put(char const*, int)>
#if 1
    ss1.put(NominalRadValve.tagCMPC(), NominalRadValve.getCumulativeMovementPC()); // EXPERIMENTAL
    12ca:	40 91 28 02 	lds	r20, 0x0228
    12ce:	50 91 29 02 	lds	r21, 0x0229
    12d2:	5f 70       	andi	r21, 0x0F	; 15
    12d4:	8f e4       	ldi	r24, 0x4F	; 79
    12d6:	92 e0       	ldi	r25, 0x02	; 2
    12d8:	6c e1       	ldi	r22, 0x1C	; 28
    12da:	71 e0       	ldi	r23, 0x01	; 1
    12dc:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <SimpleStatsRotationBase::put(char const*, int)>
#endif
#endif
    // If not doing a doubleTX then consider sometimes suppressing the change-flag clearing for this send
    // to reduce the chance of important changes being missed by the receiver.
    wrote = ss1.writeJSON(bptr, sizeof(buf) - (bptr-buf), getStatsTXLevel(), maximise); // , !allowDoubleTX && randRNG8NextBoolean());
    12e0:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <getStatsTXLevel()>
    12e4:	28 2f       	mov	r18, r24
    12e6:	48 e0       	ldi	r20, 0x08	; 8
    12e8:	a4 2e       	mov	r10, r20
    12ea:	b1 2c       	mov	r11, r1
    12ec:	ac 0e       	add	r10, r28
    12ee:	bd 1e       	adc	r11, r29
    12f0:	38 e0       	ldi	r19, 0x08	; 8
    12f2:	c3 2e       	mov	r12, r19
    12f4:	d1 2c       	mov	r13, r1
    12f6:	ca 0c       	add	r12, r10
    12f8:	db 1c       	adc	r13, r11
    12fa:	8f e4       	ldi	r24, 0x4F	; 79
    12fc:	92 e0       	ldi	r25, 0x02	; 2
    12fe:	b6 01       	movw	r22, r12
    1300:	49 e3       	ldi	r20, 0x39	; 57
    1302:	01 e0       	ldi	r16, 0x01	; 1
    1304:	ee 24       	eor	r14, r14
    1306:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)>
    130a:	18 2f       	mov	r17, r24
    if(0 == wrote)
    130c:	88 23       	and	r24, r24
    130e:	29 f4       	brne	.+10     	; 0x131a <bareStatsTX(bool, bool, bool)+0x216>
      {
DEBUG_SERIAL_PRINTLN_FLASHSTRING("JSON gen err!");
    1310:	81 ed       	ldi	r24, 0xD1	; 209
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	0e 94 13 27 	call	0x4e26	; 0x4e26 <serialPrintlnAndFlush(__FlashStringHelper const*)>
    1318:	35 c0       	rjmp	.+106    	; 0x1384 <bareStatsTX(bool, bool, bool)+0x280>
      return;
      }

    // Record stats as if local, and treat channel as secure.
    recordJSONStats(true, (const char *)bptr);
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	b6 01       	movw	r22, r12
    131e:	0e 94 2d 1b 	call	0x365a	; 0x365a <recordJSONStats(bool, char const*)>
    DEBUG_SERIAL_PRINT((const char *)bptr);
    DEBUG_SERIAL_PRINTLN();
#endif
    // Adjust JSON message for reliable transmission.
    // (Set high-bit on final '}' to make it unique, and compute and append (non-0xff) CRC.)
    const uint8_t crc = adjustJSONMsgForTXAndComputeCRC((char *)bptr);
    1322:	c6 01       	movw	r24, r12
    1324:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <adjustJSONMsgForTXAndComputeCRC(char*)>
    if(0xff == crc)
    1328:	8f 3f       	cpi	r24, 0xFF	; 255
    132a:	61 f1       	breq	.+88     	; 0x1384 <bareStatsTX(bool, bool, bool)+0x280>
      {
  //DEBUG_SERIAL_PRINTLN_FLASHSTRING("JSON msg bad!");
      return;
      }
    bptr += wrote;
    132c:	e1 2f       	mov	r30, r17
    132e:	ff 27       	eor	r31, r31
    1330:	e7 fd       	sbrc	r30, 7
    1332:	f0 95       	com	r31
    1334:	ec 0d       	add	r30, r12
    1336:	fd 1d       	adc	r31, r13
    *bptr++ = crc; // Add 7-bit CRC for on-the-wire check.
    1338:	80 83       	st	Z, r24
    *bptr = 0xff; // Terminate message for TX.
    133a:	8f ef       	ldi	r24, 0xFF	; 255
    133c:	81 83       	std	Z+1, r24	; 0x01
      return;
      }
#endif
    // TODO: put in listen before TX to reduce collisions (CSMA).
    // Send it!
    rawStatsTX(false, buf, resumeRX, allowDoubleTX);
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	b5 01       	movw	r22, r10
    1342:	49 2d       	mov	r20, r9
    1344:	28 2d       	mov	r18, r8
    1346:	0e 94 ca 07 	call	0xf94	; 0xf94 <rawStatsTX(bool, unsigned char*, bool, bool)>
    134a:	1c c0       	rjmp	.+56     	; 0x1384 <bareStatsTX(bool, bool, bool)+0x280>
    134c:	e0 91 62 03 	lds	r30, 0x0362
    1350:	f0 91 63 03 	lds	r31, 0x0363
    1354:	00 84       	ldd	r0, Z+8	; 0x08
    1356:	f1 85       	ldd	r31, Z+9	; 0x09
    1358:	e0 2d       	mov	r30, r0
    135a:	82 e6       	ldi	r24, 0x62	; 98
    135c:	93 e0       	ldi	r25, 0x03	; 3
    135e:	09 95       	icall
    1360:	8c 01       	movw	r16, r24
    1362:	e0 91 62 03 	lds	r30, 0x0362
    1366:	f0 91 63 03 	lds	r31, 0x0363
    136a:	02 80       	ldd	r0, Z+2	; 0x02
    136c:	f3 81       	ldd	r31, Z+3	; 0x03
    136e:	e0 2d       	mov	r30, r0
    1370:	82 e6       	ldi	r24, 0x62	; 98
    1372:	93 e0       	ldi	r25, 0x03	; 3
    1374:	09 95       	icall
    1376:	ac 01       	movw	r20, r24
    1378:	8f e4       	ldi	r24, 0x4F	; 79
    137a:	92 e0       	ldi	r25, 0x02	; 2
    137c:	b8 01       	movw	r22, r16
    137e:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <SimpleStatsRotationBase::put(char const*, int)>
    1382:	94 cf       	rjmp	.-216    	; 0x12ac <bareStatsTX(bool, bool, bool)+0x1a8>
    }

#endif // defined(ALLOW_JSON_OUTPUT)

//DEBUG_SERIAL_PRINTLN_FLASHSTRING("Stats TX");
  }
    1384:	c8 5b       	subi	r28, 0xB8	; 184
    1386:	df 4f       	sbci	r29, 0xFF	; 255
    1388:	0f b6       	in	r0, 0x3f	; 63
    138a:	f8 94       	cli
    138c:	de bf       	out	0x3e, r29	; 62
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	cd bf       	out	0x3d, r28	; 61
    1392:	cf 91       	pop	r28
    1394:	df 91       	pop	r29
    1396:	1f 91       	pop	r17
    1398:	0f 91       	pop	r16
    139a:	ff 90       	pop	r15
    139c:	ef 90       	pop	r14
    139e:	df 90       	pop	r13
    13a0:	cf 90       	pop	r12
    13a2:	bf 90       	pop	r11
    13a4:	af 90       	pop	r10
    13a6:	9f 90       	pop	r9
    13a8:	8f 90       	pop	r8
    13aa:	08 95       	ret

000013ac <setupOpenTRV()>:
#endif

void setupOpenTRV()
  {
  // Set up async edge interrupts.
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    13ac:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    13ae:	f8 94       	cli
    {
    //PCICR = 0x05;
    //PCMSK0 = 0b00000011; // PB; PCINT  0--7    (LEARN1 and Radio)
    //PCMSK1 = 0b00000000; // PC; PCINT  8--15
    //PCMSK2 = 0b00101001; // PD; PCINT 16--24   (LEARN2 and MODE, RX)
    PCICR = 0x4; // 0x4 enables PD/PCMSK2.
    13b0:	84 e0       	ldi	r24, 0x04	; 4
    13b2:	80 93 68 00 	sts	0x0068, r24
    PCMSK2 = MASK_PD; // PD; PCINT 16--24 (0b1 is PCINT16/RX)
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	80 93 6d 00 	sts	0x006D, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    13bc:	9f bf       	out	0x3f, r25	; 63
  // Do early 'wake-up' stats transmission if possible
  // when everything else is set up and ready.
  // Attempt to maximise chance of reception with  double TX.
  // Assume not in hub mode yet.
  // Send all possible formats.
  bareStatsTX(false, true, true);
    13be:	80 e0       	ldi	r24, 0x00	; 0
    13c0:	61 e0       	ldi	r22, 0x01	; 1
    13c2:	41 e0       	ldi	r20, 0x01	; 1
    13c4:	0e 94 82 08 	call	0x1104	; 0x1104 <bareStatsTX(bool, bool, bool)>
  nap(WDTO_120MS); // Sleep long enough for receiver to have a chance to process binary format first.
    13c8:	83 e0       	ldi	r24, 0x03	; 3
    13ca:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <nap(signed char)>
  bareStatsTX(false, true, false);
    13ce:	80 e0       	ldi	r24, 0x00	; 0
    13d0:	61 e0       	ldi	r22, 0x01	; 1
    13d2:	40 e0       	ldi	r20, 0x00	; 0
    13d4:	0e 94 82 08 	call	0x1104	; 0x1104 <bareStatsTX(bool, bool, bool)>

  // Set appropriate loop() values just before entering it.
  TIME_LSD = getSecondsLT();
    13d8:	80 91 70 03 	lds	r24, 0x0370
    13dc:	80 93 3f 02 	sts	0x023F, r24
  }
    13e0:	08 95       	ret

000013e2 <zapStats(unsigned int)>:

// Clear all collected statistics, eg when moving device to a new room or at a major time change.
// Requires 1.8ms per byte for each byte that actually needs erasing.
//   * maxBytesToErase limit the number of bytes erased to this; strictly positive, else 0 to allow 65536
// Returns true if finished with all bytes erased.
bool zapStats(uint16_t maxBytesToErase)
    13e2:	0f 93       	push	r16
    13e4:	1f 93       	push	r17
    13e6:	cf 93       	push	r28
    13e8:	df 93       	push	r29
    13ea:	8c 01       	movw	r16, r24
    13ec:	c0 e0       	ldi	r28, 0x00	; 0
    13ee:	d1 e0       	ldi	r29, 0x01	; 1
  {
  for(uint8_t *p = (uint8_t *)EE_START_STATS; p <= (uint8_t *)EE_END_STATS; ++p)
    { if(eeprom_smart_erase_byte(p)) { if(--maxBytesToErase == 0) { return(false); } } } // Stop if out of time...
    13f0:	ce 01       	movw	r24, r28
    13f2:	0e 94 1f 10 	call	0x203e	; 0x203e <eeprom_smart_erase_byte(unsigned char*)>
    13f6:	88 23       	and	r24, r24
    13f8:	29 f0       	breq	.+10     	; 0x1404 <zapStats(unsigned int)+0x22>
    13fa:	01 50       	subi	r16, 0x01	; 1
    13fc:	10 40       	sbci	r17, 0x00	; 0
    13fe:	11 f4       	brne	.+4      	; 0x1404 <zapStats(unsigned int)+0x22>
    1400:	80 e0       	ldi	r24, 0x00	; 0
    1402:	06 c0       	rjmp	.+12     	; 0x1410 <zapStats(unsigned int)+0x2e>
// Requires 1.8ms per byte for each byte that actually needs erasing.
//   * maxBytesToErase limit the number of bytes erased to this; strictly positive, else 0 to allow 65536
// Returns true if finished with all bytes erased.
bool zapStats(uint16_t maxBytesToErase)
  {
  for(uint8_t *p = (uint8_t *)EE_START_STATS; p <= (uint8_t *)EE_END_STATS; ++p)
    1404:	21 96       	adiw	r28, 0x01	; 1
    1406:	82 e0       	ldi	r24, 0x02	; 2
    1408:	c8 30       	cpi	r28, 0x08	; 8
    140a:	d8 07       	cpc	r29, r24
    140c:	89 f7       	brne	.-30     	; 0x13f0 <zapStats(unsigned int)+0xe>
    140e:	81 e0       	ldi	r24, 0x01	; 1
    { if(eeprom_smart_erase_byte(p)) { if(--maxBytesToErase == 0) { return(false); } } } // Stop if out of time...
  return(true); // All done.
  }
    1410:	df 91       	pop	r29
    1412:	cf 91       	pop	r28
    1414:	1f 91       	pop	r17
    1416:	0f 91       	pop	r16
    1418:	08 95       	ret

0000141a <ModelledRadValve::setMinValvePcReallyOpen(unsigned char)>:
  }

// Set and cache minimum valve percentage open to be considered really open.
// Applies to local valve and, at hub, to calls for remote calls for heat.
// Any out-of-range value (eg >100) clears the override and DEFAULT_MIN_VALVE_PC_REALLY_OPEN will be used.
void ModelledRadValve::setMinValvePcReallyOpen(const uint8_t percent)
    141a:	1f 93       	push	r17
    141c:	18 2f       	mov	r17, r24
  {
  if((percent > 100) || (percent == 0) || (percent == DEFAULT_MIN_VALVE_PC_REALLY_OPEN))
    141e:	81 50       	subi	r24, 0x01	; 1
    1420:	84 36       	cpi	r24, 0x64	; 100
    1422:	10 f4       	brcc	.+4      	; 0x1428 <ModelledRadValve::setMinValvePcReallyOpen(unsigned char)+0xe>
    1424:	1a 30       	cpi	r17, 0x0A	; 10
    1426:	41 f4       	brne	.+16     	; 0x1438 <ModelledRadValve::setMinValvePcReallyOpen(unsigned char)+0x1e>
    {
    // Bad / out-of-range / default value so erase stored value if not already so.
    eeprom_smart_erase_byte((uint8_t *)EE_START_MIN_VALVE_PC_REALLY_OPEN);
    1428:	83 e1       	ldi	r24, 0x13	; 19
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	0e 94 1f 10 	call	0x203e	; 0x203e <eeprom_smart_erase_byte(unsigned char*)>
    // Cache logical default value.
    mVPRO_cache = DEFAULT_MIN_VALVE_PC_REALLY_OPEN;
    1430:	8a e0       	ldi	r24, 0x0A	; 10
    1432:	80 93 3e 02 	sts	0x023E, r24
    1436:	07 c0       	rjmp	.+14     	; 0x1446 <ModelledRadValve::setMinValvePcReallyOpen(unsigned char)+0x2c>
    return;
    }
  // Store specified value with as low wear as possible.
  eeprom_smart_update_byte((uint8_t *)EE_START_MIN_VALVE_PC_REALLY_OPEN, percent);
    1438:	83 e1       	ldi	r24, 0x13	; 19
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	61 2f       	mov	r22, r17
    143e:	0e 94 49 10 	call	0x2092	; 0x2092 <eeprom_smart_update_byte(unsigned char*, unsigned char)>
  // Cache it.
  mVPRO_cache = percent;
    1442:	10 93 3e 02 	sts	0x023E, r17
  }
    1446:	1f 91       	pop	r17
    1448:	08 95       	ret

0000144a <sampleStats(bool)>:
// Call this once per hour with fullSample==true, as near the end of the hour as possible;
// this will update the non-volatile stats record for the current hour.
// Optionally call this at a small (2--10) even number of evenly-spaced number of other times thoughout the hour
// with fullSample=false to sub-sample (and these may receive lower weighting or be ignored).
// (EEPROM wear should not be an issue at this update rate in normal use.)
void sampleStats(const bool fullSample)
    144a:	0f 93       	push	r16
    144c:	1f 93       	push	r17
    144e:	58 2f       	mov	r21, r24
  {
  // (Sub-)sample processing.
  // In general, keep running total of sub-samples in a way that should not overflow
  // and use the mean to update the non-volatile EEPROM values on the fullSample call.
  static uint8_t sampleCount_; // General sub-sample count; initially zero after boot, and zeroed after each full sample.
  const bool firstSample = (0 == sampleCount_++);
    1450:	60 91 9b 02 	lds	r22, 0x029B
    1454:	40 e0       	ldi	r20, 0x00	; 0
    1456:	66 23       	and	r22, r22
    1458:	09 f4       	brne	.+2      	; 0x145c <sampleStats(bool)+0x12>
    145a:	41 e0       	ldi	r20, 0x01	; 1
    145c:	16 2f       	mov	r17, r22
    145e:	1f 5f       	subi	r17, 0xFF	; 255
    1460:	10 93 9b 02 	sts	0x029B, r17
    1464:	80 91 be 03 	lds	r24, 0x03BE




// Templated function versions of min/max that do not evaluate the arguments twice.
template <class T> const T& fnmin(const T& a, const T& b) { return((a>b)?b:a); }
    1468:	8f 3f       	cpi	r24, 0xFF	; 255
    146a:	09 f4       	brne	.+2      	; 0x146e <sampleStats(bool)+0x24>
    146c:	8e ef       	ldi	r24, 0xFE	; 254
  // WARM mode count.
  static int8_t warmCount; // Sub-sample WARM count; initially zero, and zeroed after each full sample.
  if(inWarmMode()) { ++warmCount; } else { --warmCount; }
#endif
  // Ambient light.
  const uint16_t ambLight = fnmin(AmbLight.get(), (uint8_t)MAX_STATS_AMBLIGHT); // Constrain value at top end to avoid 'not set' value.
    146e:	28 2f       	mov	r18, r24
    1470:	30 e0       	ldi	r19, 0x00	; 0
  static uint16_t ambLightTotal;
  ambLightTotal = firstSample ? ambLight : (ambLightTotal + ambLight);
    1472:	44 23       	and	r20, r20
    1474:	31 f4       	brne	.+12     	; 0x1482 <sampleStats(bool)+0x38>
    1476:	80 91 99 02 	lds	r24, 0x0299
    147a:	90 91 9a 02 	lds	r25, 0x029A
    147e:	28 0f       	add	r18, r24
    1480:	39 1f       	adc	r19, r25
    1482:	30 93 9a 02 	sts	0x029A, r19
    1486:	20 93 99 02 	sts	0x0299, r18
    virtual uint8_t preferredPollInterval_s() const { return(60); }

    // Return last value fetched by read(); undefined before first read().
    // Fast.
    // Not thread-safe nor usable within ISRs (Interrupt Service Routines).
    virtual int get() const { return(value); }
    148a:	20 91 c8 03 	lds	r18, 0x03C8
    148e:	30 91 c9 03 	lds	r19, 0x03C9
  const int tempC16 = TemperatureC16.get();
  static int tempC16Total;
  tempC16Total = firstSample ? tempC16 : (tempC16Total + tempC16);
    1492:	44 23       	and	r20, r20
    1494:	31 f4       	brne	.+12     	; 0x14a2 <sampleStats(bool)+0x58>
    1496:	80 91 97 02 	lds	r24, 0x0297
    149a:	90 91 98 02 	lds	r25, 0x0298
    149e:	28 0f       	add	r18, r24
    14a0:	39 1f       	adc	r19, r25
    14a2:	30 93 98 02 	sts	0x0298, r19
    14a6:	20 93 97 02 	sts	0x0297, r18
    14aa:	80 91 14 02 	lds	r24, 0x0214
#ifdef OCCUPANCY_SUPPORT
  const uint16_t occpc = Occupancy.get();
    14ae:	28 2f       	mov	r18, r24
    14b0:	30 e0       	ldi	r19, 0x00	; 0
  static uint16_t occpcTotal;
  occpcTotal = firstSample ? occpc : (occpcTotal + occpc);
    14b2:	44 23       	and	r20, r20
    14b4:	31 f4       	brne	.+12     	; 0x14c2 <sampleStats(bool)+0x78>
    14b6:	80 91 95 02 	lds	r24, 0x0295
    14ba:	90 91 96 02 	lds	r25, 0x0296
    14be:	28 0f       	add	r18, r24
    14c0:	39 1f       	adc	r19, r25
    14c2:	30 93 96 02 	sts	0x0296, r19
    14c6:	20 93 95 02 	sts	0x0295, r18
    14ca:	80 91 c4 03 	lds	r24, 0x03C4
#endif
#if defined(HUMIDITY_SENSOR_SUPPORT)
  // Assume for now RH% always available (compile-time determined) or not; not intermittent.
  // TODO: allow this to work with at least start-up-time availability detection.
  const uint16_t rhpc = fnmin(RelHumidity.get(), (uint8_t)100); // Fail safe.
    14ce:	85 36       	cpi	r24, 0x65	; 101
    14d0:	08 f0       	brcs	.+2      	; 0x14d4 <sampleStats(bool)+0x8a>
    14d2:	84 e6       	ldi	r24, 0x64	; 100
    14d4:	28 2f       	mov	r18, r24
    14d6:	30 e0       	ldi	r19, 0x00	; 0
  static uint16_t rhpcTotal;
  rhpcTotal = firstSample ? rhpc : (rhpcTotal + rhpc);
    14d8:	44 23       	and	r20, r20
    14da:	31 f4       	brne	.+12     	; 0x14e8 <sampleStats(bool)+0x9e>
    14dc:	80 91 93 02 	lds	r24, 0x0293
    14e0:	90 91 94 02 	lds	r25, 0x0294
    14e4:	28 0f       	add	r18, r24
    14e6:	39 1f       	adc	r19, r25
    14e8:	30 93 94 02 	sts	0x0294, r19
    14ec:	20 93 93 02 	sts	0x0293, r18
#endif
  if(!fullSample) { return; } // Only accumulate values cached until a full sample.
    14f0:	55 23       	and	r21, r21
    14f2:	09 f4       	brne	.+2      	; 0x14f6 <sampleStats(bool)+0xac>
    14f4:	76 c0       	rjmp	.+236    	; 0x15e2 <sampleStats(bool)+0x198>
  // Catpure sample count to use below.
  const uint8_t sc = sampleCount_; 
  // Reset generic sub-sample count to initial state after fill sample.
  sampleCount_ = 0;
    14f6:	10 92 9b 02 	sts	0x029B, r1

  // Get the current local-time hour...
  const uint_least8_t hh = getHoursLT(); 
    14fa:	0e 94 48 24 	call	0x4890	; 0x4890 <getHoursLT()>
    14fe:	08 2f       	mov	r16, r24

  // Scale and constrain last-read temperature to valid range for stats.
  const int tempCTotal = (1==sc)?tempC16Total:
                         ((2==sc)?((tempC16Total+1)>>1):
                                  ((tempC16Total + (sc>>1)) / sc));
    1500:	11 30       	cpi	r17, 0x01	; 1
    1502:	29 f4       	brne	.+10     	; 0x150e <sampleStats(bool)+0xc4>
    1504:	80 91 97 02 	lds	r24, 0x0297
    1508:	90 91 98 02 	lds	r25, 0x0298
    150c:	15 c0       	rjmp	.+42     	; 0x1538 <sampleStats(bool)+0xee>
    150e:	20 91 97 02 	lds	r18, 0x0297
    1512:	30 91 98 02 	lds	r19, 0x0298
    1516:	12 30       	cpi	r17, 0x02	; 2
    1518:	29 f4       	brne	.+10     	; 0x1524 <sampleStats(bool)+0xda>
    151a:	c9 01       	movw	r24, r18
    151c:	01 96       	adiw	r24, 0x01	; 1
    151e:	95 95       	asr	r25
    1520:	87 95       	ror	r24
    1522:	0a c0       	rjmp	.+20     	; 0x1538 <sampleStats(bool)+0xee>
    1524:	61 2f       	mov	r22, r17
    1526:	70 e0       	ldi	r23, 0x00	; 0
    1528:	cb 01       	movw	r24, r22
    152a:	95 95       	asr	r25
    152c:	87 95       	ror	r24
    152e:	82 0f       	add	r24, r18
    1530:	93 1f       	adc	r25, r19
    1532:	0e 94 cb 3d 	call	0x7b96	; 0x7b96 <__divmodhi4>
    1536:	cb 01       	movw	r24, r22
  const uint8_t temp = compressTempC16(tempCTotal);
    1538:	0e 94 7f 06 	call	0xcfe	; 0xcfe <compressTempC16(int)>
    153c:	48 2f       	mov	r20, r24
  DEBUG_SERIAL_PRINT_FLASHSTRING(", expanded=");
  DEBUG_SERIAL_PRINT(expandTempC16(temp));
  DEBUG_SERIAL_PRINTLN();
#endif
//  const uint8_t temp = compressTempC16(smartDivToU8(tempC16Total, sc));
  simpleUpdateStatsPair(EE_STATS_SET_TEMP_BY_HOUR, hh, temp);
    153e:	80 e0       	ldi	r24, 0x00	; 0
    1540:	60 2f       	mov	r22, r16
    1542:	0e 94 5f 07 	call	0xebe	; 0xebe <simpleUpdateStatsPair(unsigned char, unsigned char, unsigned char)>
//  const uint8_t tempSmoothed = eeprom_read_byte(phT);
//  if(tempSmoothed > MAX_STATS_TEMP) { eeprom_smart_update_byte(phT, temp); }
//  else { eeprom_smart_update_byte(phT, smoothStatsValue(tempSmoothed, temp)); }

  // Ambient light; last and smoothed data sets,
  simpleUpdateStatsPair(EE_STATS_SET_AMBLIGHT_BY_HOUR, hh, smartDivToU8(ambLightTotal, sc));
    1546:	40 91 99 02 	lds	r20, 0x0299
    154a:	50 91 9a 02 	lds	r21, 0x029A
static uint8_t smartDivToU8(const uint16_t total, const uint8_t sampleCount)
  {
#if 0 && defined(DEBUG) // Extra arg validation during dev.
  if(0 == sampleCount) { panic(); }
#endif
  if(1 == sampleCount) { return((uint8_t) total); } // No division required.
    154e:	11 30       	cpi	r17, 0x01	; 1
    1550:	81 f0       	breq	.+32     	; 0x1572 <sampleStats(bool)+0x128>
  if(2 == sampleCount) { return((uint8_t) (total >> 1)); } // Fast shift instead of slow divide.
    1552:	12 30       	cpi	r17, 0x02	; 2
    1554:	19 f4       	brne	.+6      	; 0x155c <sampleStats(bool)+0x112>
    1556:	56 95       	lsr	r21
    1558:	47 95       	ror	r20
    155a:	0b c0       	rjmp	.+22     	; 0x1572 <sampleStats(bool)+0x128>
  return((uint8_t) ((total + (sampleCount>>1)) / sampleCount)); // Generic divide (slow).
    155c:	81 2f       	mov	r24, r17
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	95 95       	asr	r25
    1562:	87 95       	ror	r24
    1564:	84 0f       	add	r24, r20
    1566:	95 1f       	adc	r25, r21
    1568:	61 2f       	mov	r22, r17
    156a:	70 e0       	ldi	r23, 0x00	; 0
    156c:	0e 94 b7 3d 	call	0x7b6e	; 0x7b6e <__udivmodhi4>
    1570:	46 2f       	mov	r20, r22
//  const uint8_t tempSmoothed = eeprom_read_byte(phT);
//  if(tempSmoothed > MAX_STATS_TEMP) { eeprom_smart_update_byte(phT, temp); }
//  else { eeprom_smart_update_byte(phT, smoothStatsValue(tempSmoothed, temp)); }

  // Ambient light; last and smoothed data sets,
  simpleUpdateStatsPair(EE_STATS_SET_AMBLIGHT_BY_HOUR, hh, smartDivToU8(ambLightTotal, sc));
    1572:	82 e0       	ldi	r24, 0x02	; 2
    1574:	60 2f       	mov	r22, r16
    1576:	0e 94 5f 07 	call	0xebe	; 0xebe <simpleUpdateStatsPair(unsigned char, unsigned char, unsigned char)>

#ifdef OCCUPANCY_SUPPORT
  // Occupancy confidence percent, if supported; last and smoothed data sets,
  simpleUpdateStatsPair(EE_STATS_SET_OCCPC_BY_HOUR, hh, smartDivToU8(occpcTotal, sc));
    157a:	40 91 95 02 	lds	r20, 0x0295
    157e:	50 91 96 02 	lds	r21, 0x0296
static uint8_t smartDivToU8(const uint16_t total, const uint8_t sampleCount)
  {
#if 0 && defined(DEBUG) // Extra arg validation during dev.
  if(0 == sampleCount) { panic(); }
#endif
  if(1 == sampleCount) { return((uint8_t) total); } // No division required.
    1582:	11 30       	cpi	r17, 0x01	; 1
    1584:	81 f0       	breq	.+32     	; 0x15a6 <sampleStats(bool)+0x15c>
  if(2 == sampleCount) { return((uint8_t) (total >> 1)); } // Fast shift instead of slow divide.
    1586:	12 30       	cpi	r17, 0x02	; 2
    1588:	19 f4       	brne	.+6      	; 0x1590 <sampleStats(bool)+0x146>
    158a:	56 95       	lsr	r21
    158c:	47 95       	ror	r20
    158e:	0b c0       	rjmp	.+22     	; 0x15a6 <sampleStats(bool)+0x15c>
  return((uint8_t) ((total + (sampleCount>>1)) / sampleCount)); // Generic divide (slow).
    1590:	81 2f       	mov	r24, r17
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	95 95       	asr	r25
    1596:	87 95       	ror	r24
    1598:	84 0f       	add	r24, r20
    159a:	95 1f       	adc	r25, r21
    159c:	61 2f       	mov	r22, r17
    159e:	70 e0       	ldi	r23, 0x00	; 0
    15a0:	0e 94 b7 3d 	call	0x7b6e	; 0x7b6e <__udivmodhi4>
    15a4:	46 2f       	mov	r20, r22
  // Ambient light; last and smoothed data sets,
  simpleUpdateStatsPair(EE_STATS_SET_AMBLIGHT_BY_HOUR, hh, smartDivToU8(ambLightTotal, sc));

#ifdef OCCUPANCY_SUPPORT
  // Occupancy confidence percent, if supported; last and smoothed data sets,
  simpleUpdateStatsPair(EE_STATS_SET_OCCPC_BY_HOUR, hh, smartDivToU8(occpcTotal, sc));
    15a6:	84 e0       	ldi	r24, 0x04	; 4
    15a8:	60 2f       	mov	r22, r16
    15aa:	0e 94 5f 07 	call	0xebe	; 0xebe <simpleUpdateStatsPair(unsigned char, unsigned char, unsigned char)>
#endif 

#if defined(HUMIDITY_SENSOR_SUPPORT)
  // Relative humidity percent, if supported; last and smoothed data sets,
  simpleUpdateStatsPair(EE_STATS_SET_RHPC_BY_HOUR, hh, smartDivToU8(rhpcTotal, sc));
    15ae:	40 91 93 02 	lds	r20, 0x0293
    15b2:	50 91 94 02 	lds	r21, 0x0294
static uint8_t smartDivToU8(const uint16_t total, const uint8_t sampleCount)
  {
#if 0 && defined(DEBUG) // Extra arg validation during dev.
  if(0 == sampleCount) { panic(); }
#endif
  if(1 == sampleCount) { return((uint8_t) total); } // No division required.
    15b6:	11 30       	cpi	r17, 0x01	; 1
    15b8:	81 f0       	breq	.+32     	; 0x15da <sampleStats(bool)+0x190>
  if(2 == sampleCount) { return((uint8_t) (total >> 1)); } // Fast shift instead of slow divide.
    15ba:	12 30       	cpi	r17, 0x02	; 2
    15bc:	19 f4       	brne	.+6      	; 0x15c4 <sampleStats(bool)+0x17a>
    15be:	56 95       	lsr	r21
    15c0:	47 95       	ror	r20
    15c2:	0b c0       	rjmp	.+22     	; 0x15da <sampleStats(bool)+0x190>
  return((uint8_t) ((total + (sampleCount>>1)) / sampleCount)); // Generic divide (slow).
    15c4:	81 2f       	mov	r24, r17
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	95 95       	asr	r25
    15ca:	87 95       	ror	r24
    15cc:	84 0f       	add	r24, r20
    15ce:	95 1f       	adc	r25, r21
    15d0:	61 2f       	mov	r22, r17
    15d2:	70 e0       	ldi	r23, 0x00	; 0
    15d4:	0e 94 b7 3d 	call	0x7b6e	; 0x7b6e <__udivmodhi4>
    15d8:	46 2f       	mov	r20, r22
  simpleUpdateStatsPair(EE_STATS_SET_OCCPC_BY_HOUR, hh, smartDivToU8(occpcTotal, sc));
#endif 

#if defined(HUMIDITY_SENSOR_SUPPORT)
  // Relative humidity percent, if supported; last and smoothed data sets,
  simpleUpdateStatsPair(EE_STATS_SET_RHPC_BY_HOUR, hh, smartDivToU8(rhpcTotal, sc));
    15da:	86 e0       	ldi	r24, 0x06	; 6
    15dc:	60 2f       	mov	r22, r16
    15de:	0e 94 5f 07 	call	0xebe	; 0xebe <simpleUpdateStatsPair(unsigned char, unsigned char, unsigned char)>
  // Reset WARM sub-sample count after full sample.
  warmCount = 0;
#endif

  // TODO: other stats measures...
  }
    15e2:	1f 91       	pop	r17
    15e4:	0f 91       	pop	r16
    15e6:	08 95       	ret

000015e8 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)>:
// Returns false if a full set of stats not available, eg including the specified hour.
// Always returns false if all samples are the same.
//   * inTop  test for membership of the top quartile if true, bottom quartile if false
//   * statsSet  stats set number to use.
//   * hour  hour of day to use or ~0 for current hour.
bool inOutlierQuartile(const uint8_t inTop, const uint8_t statsSet, const uint8_t hour)
    15e8:	0f 93       	push	r16
    15ea:	1f 93       	push	r17
    15ec:	08 2f       	mov	r16, r24
    15ee:	16 2f       	mov	r17, r22
  {
  if(statsSet >= EE_STATS_SETS) { return(false); } // Bad stats set number, ie unsafe.
    15f0:	6a 30       	cpi	r22, 0x0A	; 10
    15f2:	08 f0       	brcs	.+2      	; 0x15f6 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0xe>
    15f4:	40 c0       	rjmp	.+128    	; 0x1676 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x8e>
  const uint8_t hh = (hour > 23) ? getHoursLT() : hour;
    15f6:	48 31       	cpi	r20, 0x18	; 24
    15f8:	18 f0       	brcs	.+6      	; 0x1600 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x18>
    15fa:	0e 94 48 24 	call	0x4890	; 0x4890 <getHoursLT()>
    15fe:	48 2f       	mov	r20, r24
  const uint8_t *ss = (uint8_t *)(EE_STATS_START_ADDR(statsSet));
    1600:	88 e1       	ldi	r24, 0x18	; 24
    1602:	18 9f       	mul	r17, r24
    1604:	b0 01       	movw	r22, r0
    1606:	11 24       	eor	r1, r1
    1608:	9b 01       	movw	r18, r22
    160a:	20 50       	subi	r18, 0x00	; 0
    160c:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    160e:	f9 99       	sbic	0x1f, 1	; 31
    1610:	fe cf       	rjmp	.-4      	; 0x160e <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x26>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1612:	c9 01       	movw	r24, r18
    1614:	84 0f       	add	r24, r20
    1616:	91 1d       	adc	r25, r1
    1618:	92 bd       	out	0x22, r25	; 34
    161a:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    161c:	f8 9a       	sbi	0x1f, 0	; 31
    161e:	40 b5       	in	r20, 0x20	; 32
  const uint8_t sample = eeprom_read_byte(ss + hh);
  if(STATS_UNSET_INT == sample) { return(false); }
  if(inTop) { return(inTopQuartile(ss, sample)); }
    1620:	00 23       	and	r16, r16
    1622:	21 f4       	brne	.+8      	; 0x162c <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x44>
    1624:	90 e0       	ldi	r25, 0x00	; 0
//   * s is start of (24) sample set in EEPROM
//   * sample to be tested for being in lower quartile
bool inBottomQuartile(const uint8_t *sE, const uint8_t sample)
  {
  uint8_t valuesHigher = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
    1626:	68 5e       	subi	r22, 0xE8	; 232
    1628:	7e 4f       	sbci	r23, 0xFE	; 254
    162a:	22 c0       	rjmp	.+68     	; 0x1670 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x88>
  if(statsSet >= EE_STATS_SETS) { return(false); } // Bad stats set number, ie unsafe.
  const uint8_t hh = (hour > 23) ? getHoursLT() : hour;
  const uint8_t *ss = (uint8_t *)(EE_STATS_START_ADDR(statsSet));
  const uint8_t sample = eeprom_read_byte(ss + hh);
  if(STATS_UNSET_INT == sample) { return(false); }
  if(inTop) { return(inTopQuartile(ss, sample)); }
    162c:	90 e0       	ldi	r25, 0x00	; 0
//   * s is start of (24) sample set in EEPROM
//   * sample to be tested for being in lower quartile
bool inTopQuartile(const uint8_t *sE, const uint8_t sample)
  {
  uint8_t valuesLower = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
    162e:	68 5e       	subi	r22, 0xE8	; 232
    1630:	7e 4f       	sbci	r23, 0xFE	; 254
    1632:	0d c0       	rjmp	.+26     	; 0x164e <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x66>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1634:	f9 99       	sbic	0x1f, 1	; 31
    1636:	fe cf       	rjmp	.-4      	; 0x1634 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x4c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1638:	32 bd       	out	0x22, r19	; 34
    163a:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    163c:	f8 9a       	sbi	0x1f, 0	; 31
    163e:	80 b5       	in	r24, 0x20	; 32
    {
    const uint8_t v = eeprom_read_byte(sE); 
    if(STATS_UNSET_INT == v) { return(false); } // Abort if not a full set of stats (eg at least one full day's worth). 
    if(v < sample) { if(++valuesLower >= 18) { return(true); } } // Stop as soon as known to be in upper quartile.
    1640:	84 17       	cp	r24, r20
    1642:	18 f4       	brcc	.+6      	; 0x164a <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x62>
    1644:	9f 5f       	subi	r25, 0xFF	; 255
    1646:	92 31       	cpi	r25, 0x12	; 18
    1648:	c0 f4       	brcc	.+48     	; 0x167a <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x92>
//   * s is start of (24) sample set in EEPROM
//   * sample to be tested for being in lower quartile
bool inTopQuartile(const uint8_t *sE, const uint8_t sample)
  {
  uint8_t valuesLower = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
    164a:	2f 5f       	subi	r18, 0xFF	; 255
    164c:	3f 4f       	sbci	r19, 0xFF	; 255
    164e:	26 17       	cp	r18, r22
    1650:	37 07       	cpc	r19, r23
    1652:	81 f7       	brne	.-32     	; 0x1634 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x4c>
    1654:	10 c0       	rjmp	.+32     	; 0x1676 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x8e>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1656:	f9 99       	sbic	0x1f, 1	; 31
    1658:	fe cf       	rjmp	.-4      	; 0x1656 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x6e>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    165a:	32 bd       	out	0x22, r19	; 34
    165c:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    165e:	f8 9a       	sbi	0x1f, 0	; 31
    1660:	80 b5       	in	r24, 0x20	; 32
  uint8_t valuesHigher = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
    {
    const uint8_t v = eeprom_read_byte(sE); 
    if(STATS_UNSET_INT == v) { return(false); } // Abort if not a full set of stats (eg at least one full day's worth). 
    if(v > sample) { if(++valuesHigher >= 18) { return(true); } } // Stop as soon as known to be in lower quartile.
    1662:	48 17       	cp	r20, r24
    1664:	18 f4       	brcc	.+6      	; 0x166c <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x84>
    1666:	9f 5f       	subi	r25, 0xFF	; 255
    1668:	92 31       	cpi	r25, 0x12	; 18
    166a:	38 f4       	brcc	.+14     	; 0x167a <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x92>
//   * s is start of (24) sample set in EEPROM
//   * sample to be tested for being in lower quartile
bool inBottomQuartile(const uint8_t *sE, const uint8_t sample)
  {
  uint8_t valuesHigher = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
    166c:	2f 5f       	subi	r18, 0xFF	; 255
    166e:	3f 4f       	sbci	r19, 0xFF	; 255
    1670:	26 17       	cp	r18, r22
    1672:	37 07       	cpc	r19, r23
    1674:	81 f7       	brne	.-32     	; 0x1656 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x6e>
    1676:	80 e0       	ldi	r24, 0x00	; 0
    1678:	01 c0       	rjmp	.+2      	; 0x167c <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x94>
    167a:	81 e0       	ldi	r24, 0x01	; 1
  const uint8_t *ss = (uint8_t *)(EE_STATS_START_ADDR(statsSet));
  const uint8_t sample = eeprom_read_byte(ss + hh);
  if(STATS_UNSET_INT == sample) { return(false); }
  if(inTop) { return(inTopQuartile(ss, sample)); }
  return(inBottomQuartile(ss, sample));
  }
    167c:	1f 91       	pop	r17
    167e:	0f 91       	pop	r16
    1680:	08 95       	ret

00001682 <ModelledRadValve::computeTargetTemp()>:
// Will be called by computeCallForHeat().
// One aim is to allow reasonable energy savings (10--30%)
// even if the device is left in WARM mode all the time,
// using occupancy/light/etc to determine when temperature can be set back
// without annoying users.
uint8_t ModelledRadValve::computeTargetTemp()
    1682:	ef 92       	push	r14
    1684:	ff 92       	push	r15
    1686:	0f 93       	push	r16
    1688:	1f 93       	push	r17
  {
  // In FROST mode.
  if(!inWarmMode())
    168a:	80 91 9f 02 	lds	r24, 0x029F
    168e:	88 23       	and	r24, r24
    1690:	81 f5       	brne	.+96     	; 0x16f2 <ModelledRadValve::computeTargetTemp()+0x70>
    {
    const uint8_t frostC = getFROSTTargetC();
    1692:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <getFROSTTargetC()>
    1696:	08 2f       	mov	r16, r24
    1698:	80 91 14 02 	lds	r24, 0x0214
    169c:	88 23       	and	r24, r24
    169e:	29 f4       	brne	.+10     	; 0x16aa <ModelledRadValve::computeTargetTemp()+0x28>
    // to give room a chance to hit the target, and for furniture and surfaces to be warm, etc.
    // Don't do this if the room has been vacant for a long time (eg so as to avoid pre-warm being higher than WARM ever).
    // HINT OF SMARTNESS/ANTICIPATION HERE...
    // Only do this if the target WARM temperature is not an 'eco' temperature (ie near the bottom of the scale)
    // unless the current hour seems to be in the top quartile of occupancy.
    if(!Occupancy.longVacant() && isAnyScheduleOnWARMSoon())
    16a0:	80 91 17 02 	lds	r24, 0x0217
    16a4:	89 31       	cpi	r24, 0x19	; 25
    16a6:	08 f0       	brcs	.+2      	; 0x16aa <ModelledRadValve::computeTargetTemp()+0x28>
    16a8:	8e c0       	rjmp	.+284    	; 0x17c6 <ModelledRadValve::computeTargetTemp()+0x144>
    16aa:	0e 94 98 25 	call	0x4b30	; 0x4b30 <isAnyScheduleOnWARMSoon()>
    16ae:	88 23       	and	r24, r24
    16b0:	09 f4       	brne	.+2      	; 0x16b4 <ModelledRadValve::computeTargetTemp()+0x32>
    16b2:	89 c0       	rjmp	.+274    	; 0x17c6 <ModelledRadValve::computeTargetTemp()+0x144>
      {
      const uint8_t warmTarget = getWARMTargetC();
    16b4:	0e 94 cb 03 	call	0x796	; 0x796 <getWARMTargetC()>
    16b8:	f8 2e       	mov	r15, r24
      // Compute putative pre-warm temperature...
      const uint8_t preWarmTempC = fnmax((uint8_t)(warmTarget - (hasEcoBias() ? SETBACK_ECO : SETBACK_DEFAULT)), frostC);
    16ba:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <hasEcoBias()>
    16be:	88 23       	and	r24, r24
    16c0:	11 f4       	brne	.+4      	; 0x16c6 <ModelledRadValve::computeTargetTemp()+0x44>
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	01 c0       	rjmp	.+2      	; 0x16c8 <ModelledRadValve::computeTargetTemp()+0x46>
    16c6:	82 e0       	ldi	r24, 0x02	; 2
    16c8:	1f 2d       	mov	r17, r15
    16ca:	18 1b       	sub	r17, r24
template <class T> const T& fnmax(const T& a, const T& b) { return((a<b)?b:a); }
    16cc:	10 17       	cp	r17, r16
    16ce:	08 f4       	brcc	.+2      	; 0x16d2 <ModelledRadValve::computeTargetTemp()+0x50>
    16d0:	7a c0       	rjmp	.+244    	; 0x17c6 <ModelledRadValve::computeTargetTemp()+0x144>
      if((frostC < preWarmTempC) &&
    16d2:	01 17       	cp	r16, r17
    16d4:	08 f0       	brcs	.+2      	; 0x16d8 <ModelledRadValve::computeTargetTemp()+0x56>
    16d6:	77 c0       	rjmp	.+238    	; 0x17c6 <ModelledRadValve::computeTargetTemp()+0x144>
    16d8:	81 e1       	ldi	r24, 0x11	; 17
    16da:	8f 15       	cp	r24, r15
    16dc:	08 f4       	brcc	.+2      	; 0x16e0 <ModelledRadValve::computeTargetTemp()+0x5e>
    16de:	76 c0       	rjmp	.+236    	; 0x17cc <ModelledRadValve::computeTargetTemp()+0x14a>
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	65 e0       	ldi	r22, 0x05	; 5
    16e4:	4f ef       	ldi	r20, 0xFF	; 255
    16e6:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)>
    16ea:	88 23       	and	r24, r24
    16ec:	09 f0       	breq	.+2      	; 0x16f0 <ModelledRadValve::computeTargetTemp()+0x6e>
    16ee:	6e c0       	rjmp	.+220    	; 0x17cc <ModelledRadValve::computeTargetTemp()+0x14a>
    16f0:	6a c0       	rjmp	.+212    	; 0x17c6 <ModelledRadValve::computeTargetTemp()+0x144>

#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
    16f2:	80 91 9c 02 	lds	r24, 0x029C
    16f6:	88 23       	and	r24, r24
    16f8:	09 f4       	brne	.+2      	; 0x16fc <ModelledRadValve::computeTargetTemp()+0x7a>
    16fa:	6e c0       	rjmp	.+220    	; 0x17d8 <ModelledRadValve::computeTargetTemp()+0x156>
    }

#ifdef SUPPORT_BAKE
  else if(inBakeMode()) // If in BAKE mode then use elevated target.
    {
    return(fnmin((uint8_t)(getWARMTargetC() + BAKE_UPLIFT), (uint8_t)MAX_TARGET_C)); // No setbacks apply in BAKE mode.
    16fc:	0e 94 cb 03 	call	0x796	; 0x796 <getWARMTargetC()>
    1700:	18 2f       	mov	r17, r24
    1702:	1b 5f       	subi	r17, 0xFB	; 251
    1704:	10 36       	cpi	r17, 0x60	; 96
    1706:	08 f4       	brcc	.+2      	; 0x170a <ModelledRadValve::computeTargetTemp()+0x88>
    1708:	61 c0       	rjmp	.+194    	; 0x17cc <ModelledRadValve::computeTargetTemp()+0x14a>
    170a:	1f e5       	ldi	r17, 0x5F	; 95
    170c:	5f c0       	rjmp	.+190    	; 0x17cc <ModelledRadValve::computeTargetTemp()+0x14a>
    170e:	80 91 17 02 	lds	r24, 0x0217
    1712:	90 e0       	ldi	r25, 0x00	; 0
    bool longVacant() { return(getVacancyH() > longVacantHThrH); }

    // Returns true if room appears to have been vacant for much longer than longVacant().
    // For a home or an office no sign of activity for this long suggests a long weekend or a holiday for example.
    // Longer than longVacant() but much less than 3 days to try to capture some weekend-absence savings.
    bool longLongVacant() { return(getVacancyH() > longLongVacantHThrH); }
    1714:	ff 24       	eor	r15, r15
    1716:	88 97       	sbiw	r24, 0x28	; 40
    1718:	28 f0       	brcs	.+10     	; 0x1724 <ModelledRadValve::computeTargetTemp()+0xa2>
    171a:	ff 24       	eor	r15, r15
    171c:	f3 94       	inc	r15
    // Note that this mainly has to work in domestic settings in winter (with ~8h of daylight)
    // but should also work in artificially-lit offices (maybe ~12h continuous lighting).
    // No 'lights-on' signal for a whole day may be a fairly strong indication that the heat can be turned down!
    // TODO: consider bottom quartile of amblient light as alternative setback trigger for near-continuously-lit spaces (aiming to spot daylight signature).
    const bool longLongVacant = Occupancy.longLongVacant();
    const bool longVacant = longLongVacant || Occupancy.longVacant();
    171e:	01 e0       	ldi	r16, 0x01	; 1
    1720:	11 e0       	ldi	r17, 0x01	; 1
    1722:	25 c0       	rjmp	.+74     	; 0x176e <ModelledRadValve::computeTargetTemp()+0xec>
    // At other times more relaxed checking (eg lower power) can be used.
    bool increaseCheckForOccupancy() { return(!isLikelyRecentlyOccupied() && isLikelyOccupied() && !reportedRecently()); }

    // Get number of hours room vacant, zero when room occupied; does not wrap.
    // If forced to zero as soon as occupancy is detected.
    uint16_t getVacancyH() { return((value != 0) ? 0 : vacancyH); }
    1724:	80 91 14 02 	lds	r24, 0x0214
    1728:	88 23       	and	r24, r24
    172a:	11 f0       	breq	.+4      	; 0x1730 <ModelledRadValve::computeTargetTemp()+0xae>
    172c:	10 e0       	ldi	r17, 0x00	; 0
    172e:	06 c0       	rjmp	.+12     	; 0x173c <ModelledRadValve::computeTargetTemp()+0xba>
    1730:	10 e0       	ldi	r17, 0x00	; 0
    1732:	80 91 17 02 	lds	r24, 0x0217
    1736:	89 31       	cpi	r24, 0x19	; 25
    1738:	08 f0       	brcs	.+2      	; 0x173c <ModelledRadValve::computeTargetTemp()+0xba>
    173a:	11 e0       	ldi	r17, 0x01	; 1

    // Returns true if the room appears to be likely occupied (with active users) now.
    // Operates on a timeout; calling markAsOccupied() restarts the timer.
    // Defaults to false (and API still exists) when OCCUPANCY_SUPPORT not defined.
    // Thread-safe.
    bool isLikelyOccupied() { return(0 != occupationCountdownM); }
    173c:	80 91 15 02 	lds	r24, 0x0215
    const bool notLikelyOccupiedSoon = longLongVacant || (Occupancy.isLikelyUnoccupied() && inOutlierQuartile(false, EE_STATS_SET_OCCPC_BY_HOUR_SMOOTHED));
    1740:	88 23       	and	r24, r24
    1742:	41 f4       	brne	.+16     	; 0x1754 <ModelledRadValve::computeTargetTemp()+0xd2>
    1744:	65 e0       	ldi	r22, 0x05	; 5
    1746:	4f ef       	ldi	r20, 0xFF	; 255
    1748:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)>
    174c:	88 23       	and	r24, r24
    174e:	11 f0       	breq	.+4      	; 0x1754 <ModelledRadValve::computeTargetTemp()+0xd2>
    1750:	01 e0       	ldi	r16, 0x01	; 1
    1752:	01 c0       	rjmp	.+2      	; 0x1756 <ModelledRadValve::computeTargetTemp()+0xd4>
    1754:	00 e0       	ldi	r16, 0x00	; 0
    if(longVacant ||
    1756:	11 23       	and	r17, r17
    1758:	51 f4       	brne	.+20     	; 0x176e <ModelledRadValve::computeTargetTemp()+0xec>
    bool isRoomLit() const { return(isRoomLitFlag); }

    // Returns true if room is light enough for someone to be active.
    // False if unknown.
    // Thread-safe and usable within ISRs (Interrupt Service Routines).
    bool isRoomDark() const { return(!isRoomLitFlag); }
    175a:	80 91 c1 03 	lds	r24, 0x03C1
    175e:	88 23       	and	r24, r24
    1760:	11 f0       	breq	.+4      	; 0x1766 <ModelledRadValve::computeTargetTemp()+0xe4>
    1762:	00 23       	and	r16, r16
    1764:	91 f1       	breq	.+100    	; 0x17ca <ModelledRadValve::computeTargetTemp()+0x148>
    1766:	0e 94 d8 25 	call	0x4bb0	; 0x4bb0 <isAnyScheduleOnWARMNow()>
    176a:	88 23       	and	r24, r24
    176c:	71 f5       	brne	.+92     	; 0x17ca <ModelledRadValve::computeTargetTemp()+0x148>
                               (!longLongVacant && AmbLight.isRoomLit()) ||
                               (!longLongVacant && inOutlierQuartile(true, EE_STATS_SET_OCCPC_BY_HOUR_SMOOTHED)) ||
                               (!longVacant && isAnyScheduleOnWARMSoon())) ?
              SETBACK_DEFAULT :
          ((longLongVacant || notLikelyOccupiedSoon) ?
              SETBACK_FULL : SETBACK_ECO);
    176e:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <hasEcoBias()>
    1772:	88 23       	and	r24, r24
    1774:	e9 f0       	breq	.+58     	; 0x17b0 <ModelledRadValve::computeTargetTemp()+0x12e>
    1776:	80 91 15 02 	lds	r24, 0x0215
    177a:	88 23       	and	r24, r24
    177c:	c9 f4       	brne	.+50     	; 0x17b0 <ModelledRadValve::computeTargetTemp()+0x12e>
    177e:	ff 20       	and	r15, r15
    1780:	59 f4       	brne	.+22     	; 0x1798 <ModelledRadValve::computeTargetTemp()+0x116>
    uint16_t getRaw() { return(rawValue); }

    // Returns true if room is lit enough for someone to be active.
    // False if unknown.
    // Thread-safe and usable within ISRs (Interrupt Service Routines).
    bool isRoomLit() const { return(isRoomLitFlag); }
    1782:	80 91 c1 03 	lds	r24, 0x03C1
    1786:	88 23       	and	r24, r24
    1788:	99 f4       	brne	.+38     	; 0x17b0 <ModelledRadValve::computeTargetTemp()+0x12e>
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	65 e0       	ldi	r22, 0x05	; 5
    178e:	4f ef       	ldi	r20, 0xFF	; 255
    1790:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)>
    1794:	88 23       	and	r24, r24
    1796:	61 f4       	brne	.+24     	; 0x17b0 <ModelledRadValve::computeTargetTemp()+0x12e>
    1798:	11 23       	and	r17, r17
    179a:	21 f4       	brne	.+8      	; 0x17a4 <ModelledRadValve::computeTargetTemp()+0x122>
    179c:	0e 94 98 25 	call	0x4b30	; 0x4b30 <isAnyScheduleOnWARMSoon()>
    17a0:	88 23       	and	r24, r24
    17a2:	31 f4       	brne	.+12     	; 0x17b0 <ModelledRadValve::computeTargetTemp()+0x12e>
    17a4:	ff 20       	and	r15, r15
    17a6:	31 f4       	brne	.+12     	; 0x17b4 <ModelledRadValve::computeTargetTemp()+0x132>
    17a8:	00 23       	and	r16, r16
    17aa:	21 f4       	brne	.+8      	; 0x17b4 <ModelledRadValve::computeTargetTemp()+0x132>
    17ac:	12 e0       	ldi	r17, 0x02	; 2
    17ae:	03 c0       	rjmp	.+6      	; 0x17b6 <ModelledRadValve::computeTargetTemp()+0x134>
    17b0:	11 e0       	ldi	r17, 0x01	; 1
    17b2:	01 c0       	rjmp	.+2      	; 0x17b6 <ModelledRadValve::computeTargetTemp()+0x134>
    17b4:	13 e0       	ldi	r17, 0x03	; 3

      return(fnmax((uint8_t)(wt - setback), getFROSTTargetC())); // Target must never be set low enough to create a frost/freeze hazard.
    17b6:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <getFROSTTargetC()>
    17ba:	e1 1a       	sub	r14, r17
    17bc:	1e 2d       	mov	r17, r14
    17be:	e8 16       	cp	r14, r24
    17c0:	28 f4       	brcc	.+10     	; 0x17cc <ModelledRadValve::computeTargetTemp()+0x14a>
    17c2:	18 2f       	mov	r17, r24
    17c4:	03 c0       	rjmp	.+6      	; 0x17cc <ModelledRadValve::computeTargetTemp()+0x14a>
    17c6:	10 2f       	mov	r17, r16
    17c8:	01 c0       	rjmp	.+2      	; 0x17cc <ModelledRadValve::computeTargetTemp()+0x14a>
    17ca:	1e 2d       	mov	r17, r14
      }
    // Else use WARM target as-is.
    return(wt);
    }
  }
    17cc:	81 2f       	mov	r24, r17
    17ce:	1f 91       	pop	r17
    17d0:	0f 91       	pop	r16
    17d2:	ff 90       	pop	r15
    17d4:	ef 90       	pop	r14
    17d6:	08 95       	ret
    }
#endif

  else // In 'WARM' mode with possible setback.
    {
    const uint8_t wt = getWARMTargetC();
    17d8:	0e 94 cb 03 	call	0x796	; 0x796 <getWARMTargetC()>
    17dc:	e8 2e       	mov	r14, r24
    // At other times more relaxed checking (eg lower power) can be used.
    bool increaseCheckForOccupancy() { return(!isLikelyRecentlyOccupied() && isLikelyOccupied() && !reportedRecently()); }

    // Get number of hours room vacant, zero when room occupied; does not wrap.
    // If forced to zero as soon as occupancy is detected.
    uint16_t getVacancyH() { return((value != 0) ? 0 : vacancyH); }
    17de:	80 91 14 02 	lds	r24, 0x0214
    17e2:	88 23       	and	r24, r24
    17e4:	09 f4       	brne	.+2      	; 0x17e8 <ModelledRadValve::computeTargetTemp()+0x166>
    17e6:	93 cf       	rjmp	.-218    	; 0x170e <ModelledRadValve::computeTargetTemp()+0x8c>
    17e8:	80 e0       	ldi	r24, 0x00	; 0
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	93 cf       	rjmp	.-218    	; 0x1714 <ModelledRadValve::computeTargetTemp()+0x92>

000017ee <ModelledRadValve::computeTargetTemperature()>:
  // Leave value position as was...
  return(valvePCOpen);
  }

// Compute/update target temperature and set up state for tick()/computeRequiredTRVPercentOpen().
void ModelledRadValve::computeTargetTemperature()
    17ee:	0f 93       	push	r16
    17f0:	1f 93       	push	r17
    17f2:	cf 93       	push	r28
    17f4:	df 93       	push	r29
    17f6:	ec 01       	movw	r28, r24
  {
  // Compute basic target temperature.
  const uint8_t newTarget = computeTargetTemp();
    17f8:	0e 94 41 0b 	call	0x1682	; 0x1682 <ModelledRadValve::computeTargetTemp()>
    17fc:	08 2f       	mov	r16, r24

  // Set up state for computeRequiredTRVPercentOpen().
  inputState.targetTempC = newTarget;
    17fe:	8b 83       	std	Y+3, r24	; 0x03
  inputState.minPCOpen = getMinPercentOpen();
    1800:	e8 81       	ld	r30, Y
    1802:	f9 81       	ldd	r31, Y+1	; 0x01
    1804:	00 8c       	ldd	r0, Z+24	; 0x18
    1806:	f1 8d       	ldd	r31, Z+25	; 0x19
    1808:	e0 2d       	mov	r30, r0
    180a:	ce 01       	movw	r24, r28
    180c:	09 95       	icall
    180e:	8c 83       	std	Y+4, r24	; 0x04
  inputState.maxPCOpen = getMaxPercentageOpenAllowed();
    1810:	84 e6       	ldi	r24, 0x64	; 100
    1812:	8d 83       	std	Y+5, r24	; 0x05
  inputState.glacial = glacial;
    1814:	8c a1       	ldd	r24, Y+36	; 0x24
    1816:	8f 83       	std	Y+7, r24	; 0x07

#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
    1818:	10 91 9f 02 	lds	r17, 0x029F
    181c:	11 23       	and	r17, r17
    181e:	11 f4       	brne	.+4      	; 0x1824 <ModelledRadValve::computeTargetTemperature()+0x36>
    1820:	80 e0       	ldi	r24, 0x00	; 0
    1822:	04 c0       	rjmp	.+8      	; 0x182c <ModelledRadValve::computeTargetTemperature()+0x3e>
    1824:	80 91 9c 02 	lds	r24, 0x029C
    1828:	81 11       	cpse	r24, r1
    182a:	81 e0       	ldi	r24, 0x01	; 1
  // Set up state for computeRequiredTRVPercentOpen().
  inputState.targetTempC = newTarget;
  inputState.minPCOpen = getMinPercentOpen();
  inputState.maxPCOpen = getMaxPercentageOpenAllowed();
  inputState.glacial = glacial;
  inputState.inBakeMode = inBakeMode();
    182c:	89 87       	std	Y+9, r24	; 0x09
  inputState.hasEcoBias = hasEcoBias();
    182e:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <hasEcoBias()>
    1832:	88 87       	std	Y+8, r24	; 0x08

    // Returns true if room is light enough for someone to be active.
    // False if unknown.
    // Thread-safe and usable within ISRs (Interrupt Service Routines).
    bool isRoomDark() const { return(!isRoomLitFlag); }
    1834:	80 91 c1 03 	lds	r24, 0x03C1
  // Widen the allowed deadband significantly in a dark/quiet/vacant room
  // (or in FROST mode, or if temperature is jittery ie filtering has been engaged)
  // to attempt to reduce the total number and size of adjustments and thus reduce noise (and battery drain).
  // The wider deadband (less good temperature regulation) might be noticeable/annoying to sensitive occupants.
  // FIXME: With a wider deadband also simply suppress any movement/noise on some/most minutes while close to target temperature.
  inputState.widenDeadband = AmbLight.isRoomDark() || Occupancy.longVacant() || (!inWarmMode()) || retainedState.isFiltering;
    1838:	88 23       	and	r24, r24
    183a:	61 f0       	breq	.+24     	; 0x1854 <ModelledRadValve::computeTargetTemperature()+0x66>
    183c:	80 91 14 02 	lds	r24, 0x0214
    1840:	88 23       	and	r24, r24
    1842:	21 f4       	brne	.+8      	; 0x184c <ModelledRadValve::computeTargetTemperature()+0x5e>
    1844:	80 91 17 02 	lds	r24, 0x0217
    1848:	89 31       	cpi	r24, 0x19	; 25
    184a:	20 f4       	brcc	.+8      	; 0x1854 <ModelledRadValve::computeTargetTemperature()+0x66>
    184c:	11 23       	and	r17, r17
    184e:	11 f0       	breq	.+4      	; 0x1854 <ModelledRadValve::computeTargetTemperature()+0x66>
    1850:	8d 85       	ldd	r24, Y+13	; 0x0d
    1852:	01 c0       	rjmp	.+2      	; 0x1856 <ModelledRadValve::computeTargetTemperature()+0x68>
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	8e 83       	std	Y+6, r24	; 0x06
// ie to the middle of the specified degree, which is more intuitive,
// and which may save a little energy if users target the specified temperatures.
// Suggestion c/o GG ~2014/10 code, and generally less misleading anyway!
void ModelledRadValveInputState::setReferenceTemperatures(const int currentTempC16)
  {
  const int referenceTempC16 = currentTempC16 + refTempOffsetC16; // TODO-386: push targeted temperature down by 0.5C to middle of degree.
    1858:	80 91 c8 03 	lds	r24, 0x03C8
    185c:	90 91 c9 03 	lds	r25, 0x03C9
    1860:	08 96       	adiw	r24, 0x08	; 8
  refTempC16 = referenceTempC16;
    1862:	9b 87       	std	Y+11, r25	; 0x0b
    1864:	8a 87       	std	Y+10, r24	; 0x0a
  // FIXME: With a wider deadband also simply suppress any movement/noise on some/most minutes while close to target temperature.
  inputState.widenDeadband = AmbLight.isRoomDark() || Occupancy.longVacant() || (!inWarmMode()) || retainedState.isFiltering;
  // Capture adjusted reference/room temperatures
  // and set callingForHeat flag also using same outline logic as computeRequiredTRVPercentOpen() will use.
  inputState.setReferenceTemperatures(TemperatureC16.get());
  callingForHeat = (newTarget >= (inputState.refTempC16 >> 4));
    1866:	40 e0       	ldi	r20, 0x00	; 0
    1868:	20 2f       	mov	r18, r16
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	64 e0       	ldi	r22, 0x04	; 4
    186e:	95 95       	asr	r25
    1870:	87 95       	ror	r24
    1872:	6a 95       	dec	r22
    1874:	e1 f7       	brne	.-8      	; 0x186e <ModelledRadValve::computeTargetTemperature()+0x80>
    1876:	28 17       	cp	r18, r24
    1878:	39 07       	cpc	r19, r25
    187a:	0c f0       	brlt	.+2      	; 0x187e <ModelledRadValve::computeTargetTemperature()+0x90>
    187c:	41 e0       	ldi	r20, 0x01	; 1
    187e:	4b a3       	std	Y+35, r20	; 0x23
  }
    1880:	df 91       	pop	r29
    1882:	cf 91       	pop	r28
    1884:	1f 91       	pop	r17
    1886:	0f 91       	pop	r16
    1888:	08 95       	ret

0000188a <ModelledRadValve::computeCallForHeat()>:
// The inputs must be valid (and recent).
// Values set are targetTempC, value (TRVPercentOpen).
// This may also prepare data such as TX command sequences for the TRV, boiler, etc.
// This routine may take significant CPU time; no I/O is done, only internal state is updated.
// Returns true if valve target changed and thus messages may need to be recomputed/sent/etc.
void ModelledRadValve::computeCallForHeat()
    188a:	cf 93       	push	r28
    188c:	df 93       	push	r29
    188e:	ec 01       	movw	r28, r24
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    1890:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1892:	f8 94       	cli
    {
#ifdef SUPPORT_BAKE
    // Cancel any BAKE mode once temperature target has been hit.
    if(!callingForHeat) { bakeCountdownM = 0; }
    1894:	8b a1       	ldd	r24, Y+35	; 0x23
    1896:	88 23       	and	r24, r24
    1898:	19 f4       	brne	.+6      	; 0x18a0 <ModelledRadValve::computeCallForHeat()+0x16>
    189a:	10 92 9c 02 	sts	0x029C, r1
    189e:	07 c0       	rjmp	.+14     	; 0x18ae <ModelledRadValve::computeCallForHeat()+0x24>
    // Run down BAKE mode timer if need be, one tick per minute.
    else if(bakeCountdownM > 0) { --bakeCountdownM; }
    18a0:	80 91 9c 02 	lds	r24, 0x029C
    18a4:	88 23       	and	r24, r24
    18a6:	19 f0       	breq	.+6      	; 0x18ae <ModelledRadValve::computeCallForHeat()+0x24>
    18a8:	81 50       	subi	r24, 0x01	; 1
    18aa:	80 93 9c 02 	sts	0x029C, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    18ae:	9f bf       	out	0x3f, r25	; 63
#endif
    }

  // Compute target and ensure that required input state is set for computeRequiredTRVPercentOpen().
  computeTargetTemperature();
    18b0:	ce 01       	movw	r24, r28
    18b2:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <ModelledRadValve::computeTargetTemperature()>
  retainedState.tick(value, inputState);
    18b6:	ae 01       	movw	r20, r28
    18b8:	4d 5f       	subi	r20, 0xFD	; 253
    18ba:	5f 4f       	sbci	r21, 0xFF	; 255
    18bc:	ce 01       	movw	r24, r28
    18be:	0c 96       	adiw	r24, 0x0c	; 12
    18c0:	22 96       	adiw	r28, 0x02	; 2
    18c2:	be 01       	movw	r22, r28
    18c4:	0e 94 b1 05 	call	0xb62	; 0xb62 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)>
  }
    18c8:	df 91       	pop	r29
    18ca:	cf 91       	pop	r28
    18cc:	08 95       	ret

000018ce <ModelledRadValve::read()>:

    // Force a read/poll/recomputation of the target position and call for heat.
    // Sets/clears changed flag if computed valve position changed.
    // Call at a fixed rate (1/60s).
    // Potentially expensive/slow.
    virtual uint8_t read() { computeCallForHeat(); return(value); }
    18ce:	0f 93       	push	r16
    18d0:	1f 93       	push	r17
    18d2:	8c 01       	movw	r16, r24
    18d4:	0e 94 45 0c 	call	0x188a	; 0x188a <ModelledRadValve::computeCallForHeat()>
    18d8:	f8 01       	movw	r30, r16
    18da:	82 81       	ldd	r24, Z+2	; 0x02
    18dc:	1f 91       	pop	r17
    18de:	0f 91       	pop	r16
    18e0:	08 95       	ret

000018e2 <ModelledRadValve::isRecalibrating() const>:
// The target valve position is not lost while this is true.
// By default there is no recalibration step.
bool ModelledRadValve::isRecalibrating() const
  {
#ifdef USE_MODULE_FHT8VSIMPLE
  if(!isSyncedWithFHT8V()) { return(true); }
    18e2:	0e 94 5f 11 	call	0x22be	; 0x22be <isSyncedWithFHT8V()>
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	88 23       	and	r24, r24
    18ea:	09 f4       	brne	.+2      	; 0x18ee <ModelledRadValve::isRecalibrating() const+0xc>
    18ec:	91 e0       	ldi	r25, 0x01	; 1
#endif
  return(false);
  }
    18ee:	89 2f       	mov	r24, r25
    18f0:	08 95       	ret

000018f2 <ModelledRadValve::isControlledValveReallyOpen() const>:
// True if the controlled physical valve is thought to be at least partially open right now.
// If multiple valves are controlled then is this true only if all are at least partially open.
// Used to help avoid running boiler pump against closed valves.
// The default is to use the check the current computed position
// against the minimum open percentage.
bool ModelledRadValve::isControlledValveReallyOpen() const
    18f2:	1f 93       	push	r17
    18f4:	cf 93       	push	r28
    18f6:	df 93       	push	r29
    18f8:	ec 01       	movw	r28, r24
  {
  if(isRecalibrating()) { return(false); }
    18fa:	e8 81       	ld	r30, Y
    18fc:	f9 81       	ldd	r31, Y+1	; 0x01
    18fe:	02 88       	ldd	r0, Z+18	; 0x12
    1900:	f3 89       	ldd	r31, Z+19	; 0x13
    1902:	e0 2d       	mov	r30, r0
    1904:	09 95       	icall
    1906:	88 23       	and	r24, r24
    1908:	89 f4       	brne	.+34     	; 0x192c <ModelledRadValve::isControlledValveReallyOpen() const+0x3a>
#ifdef USE_MODULE_FHT8VSIMPLE
  if(!FHT8VisControlledValveOpen()) { return(false); }
    190a:	0e 94 62 11 	call	0x22c4	; 0x22c4 <FHT8VisControlledValveOpen()>
    190e:	88 23       	and	r24, r24
    1910:	69 f0       	breq	.+26     	; 0x192c <ModelledRadValve::isControlledValveReallyOpen() const+0x3a>
#endif
  return(value >= getMinPercentOpen());
    1912:	1a 81       	ldd	r17, Y+2	; 0x02
    1914:	e8 81       	ld	r30, Y
    1916:	f9 81       	ldd	r31, Y+1	; 0x01
    1918:	00 8c       	ldd	r0, Z+24	; 0x18
    191a:	f1 8d       	ldd	r31, Z+25	; 0x19
    191c:	e0 2d       	mov	r30, r0
    191e:	ce 01       	movw	r24, r28
    1920:	09 95       	icall
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	18 17       	cp	r17, r24
    1926:	18 f0       	brcs	.+6      	; 0x192e <ModelledRadValve::isControlledValveReallyOpen() const+0x3c>
    1928:	91 e0       	ldi	r25, 0x01	; 1
    192a:	01 c0       	rjmp	.+2      	; 0x192e <ModelledRadValve::isControlledValveReallyOpen() const+0x3c>
    192c:	90 e0       	ldi	r25, 0x00	; 0
  }
    192e:	89 2f       	mov	r24, r25
    1930:	df 91       	pop	r29
    1932:	cf 91       	pop	r28
    1934:	1f 91       	pop	r17
    1936:	08 95       	ret

00001938 <loopOpenTRV()>:



// Main loop for OpenTRV radiator control.
// Note: exiting and re-entering can take a little while, handling Arduino background tasks such as serial.
void loopOpenTRV()
    1938:	7f 92       	push	r7
    193a:	8f 92       	push	r8
    193c:	9f 92       	push	r9
    193e:	af 92       	push	r10
    1940:	bf 92       	push	r11
    1942:	cf 92       	push	r12
    1944:	df 92       	push	r13
    1946:	ef 92       	push	r14
    1948:	ff 92       	push	r15
    194a:	0f 93       	push	r16
    194c:	1f 93       	push	r17
    194e:	df 93       	push	r29
    1950:	cf 93       	push	r28
    1952:	cd b7       	in	r28, 0x3d	; 61
    1954:	de b7       	in	r29, 0x3e	; 62
    1956:	ef 97       	sbiw	r28, 0x3f	; 63
    1958:	0f b6       	in	r0, 0x3f	; 63
    195a:	f8 94       	cli
    195c:	de bf       	out	0x3e, r29	; 62
    195e:	0f be       	out	0x3f, r0	; 63
    1960:	cd bf       	out	0x3d, r28	; 61

  // Set up some variables before sleeping to minimise delay/jitter after the RTC tick.
  bool showStatus = false; // Show status at end of loop?

  // Use the zeroth second in each minute to force extra deep device sleeps/resets, etc.
  const bool second0 = (0 == TIME_LSD);
    1962:	bb 24       	eor	r11, r11
    1964:	80 91 3f 02 	lds	r24, 0x023F
    1968:	88 23       	and	r24, r24
    196a:	11 f4       	brne	.+4      	; 0x1970 <loopOpenTRV()+0x38>
    196c:	bb 24       	eor	r11, r11
    196e:	b3 94       	inc	r11
  // Sensor readings are taken late in each minute (where they are taken)
  // and if possible noise and heat and light should be minimised in this part of each minute to improve readings.
//  const bool sensorReading30s = (TIME_LSD >= 30);
  // Sensor readings and (stats transmissions) are nominally on a 4-minute cycle.
  const uint8_t minuteFrom4 = (minuteCount & 3);
    1970:	80 91 40 02 	lds	r24, 0x0240
    1974:	83 70       	andi	r24, 0x03	; 3
  // The 0th minute in each group of four is always used for measuring where possible (possibly amongst others)
  // and where possible locally-generated noise and heat and light should be minimised in this minute to give the best possible readings.
  // This is the first (0th) minute in each group of four.
  const bool minute0From4ForSensors = (0 == minuteFrom4);
    1976:	99 24       	eor	r9, r9
    1978:	88 23       	and	r24, r24
    197a:	11 f4       	brne	.+4      	; 0x1980 <loopOpenTRV()+0x48>
    197c:	99 24       	eor	r9, r9
    197e:	93 94       	inc	r9
  // True the minute after all sensors should have been sampled.
  const bool minute1From4AfterSensors = (1 == minuteFrom4);
    1980:	77 24       	eor	r7, r7
    1982:	81 30       	cpi	r24, 0x01	; 1
    1984:	11 f4       	brne	.+4      	; 0x198a <loopOpenTRV()+0x52>
    1986:	77 24       	eor	r7, r7
    1988:	73 94       	inc	r7
    // Get internal bandgap (1.1V nominal, 1.0--1.2V) as fraction of Vcc.
    uint16_t getRawInv() const { return(rawInv); }

    // Returns true if the supply voltage is low/marginal.
    // This depends on the AVR and other hardware components (eg sensors) in use.
    bool isSupplyVoltageLow() const { return(isLow); }
    198a:	a0 90 68 03 	lds	r10, 0x0368
    (batteryLow || !inWarmMode() || Occupancy.longVacant()) &&
#if defined(ENABLE_BOILER_HUB)
    (0 == boilerCountdownTicks) && // Unless the boiler is off, stay responsive.
#endif
    (!NominalRadValve.isControlledValveReallyOpen()) &&  // Run at full speed until valve(s) should actually have shut and the boiler gone off.
    (!NominalRadValve.isCallingForHeat()); // Run at full speed until not nominally demanding heat, eg even during FROST mode or pre-heating.
    198e:	aa 20       	and	r10, r10
    1990:	61 f4       	brne	.+24     	; 0x19aa <loopOpenTRV()+0x72>
    1992:	80 91 9f 02 	lds	r24, 0x029F
    1996:	88 23       	and	r24, r24
    1998:	41 f0       	breq	.+16     	; 0x19aa <loopOpenTRV()+0x72>
    // At other times more relaxed checking (eg lower power) can be used.
    bool increaseCheckForOccupancy() { return(!isLikelyRecentlyOccupied() && isLikelyOccupied() && !reportedRecently()); }

    // Get number of hours room vacant, zero when room occupied; does not wrap.
    // If forced to zero as soon as occupancy is detected.
    uint16_t getVacancyH() { return((value != 0) ? 0 : vacancyH); }
    199a:	80 91 14 02 	lds	r24, 0x0214
    199e:	88 23       	and	r24, r24
    19a0:	b9 f4       	brne	.+46     	; 0x19d0 <loopOpenTRV()+0x98>
    19a2:	80 91 17 02 	lds	r24, 0x0217
    19a6:	89 31       	cpi	r24, 0x19	; 25
    19a8:	98 f0       	brcs	.+38     	; 0x19d0 <loopOpenTRV()+0x98>
    19aa:	80 91 41 02 	lds	r24, 0x0241
    19ae:	90 91 42 02 	lds	r25, 0x0242
    19b2:	89 2b       	or	r24, r25
    19b4:	69 f4       	brne	.+26     	; 0x19d0 <loopOpenTRV()+0x98>
    19b6:	89 e1       	ldi	r24, 0x19	; 25
    19b8:	92 e0       	ldi	r25, 0x02	; 2
    19ba:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <ModelledRadValve::isControlledValveReallyOpen() const>
    19be:	88 23       	and	r24, r24
    19c0:	39 f4       	brne	.+14     	; 0x19d0 <loopOpenTRV()+0x98>
    // Can be used to trigger rebuild of messages, force updates to actuators, etc.
    bool isValveMoved() const { return(retainedState.valveMoved); }

    // True if this unit is nominally calling for heat (temperature is under target).
    // Thread-safe and ISR safe.
    bool isCallingForHeat() const { return(callingForHeat); }
    19c2:	80 91 3c 02 	lds	r24, 0x023C
    19c6:	88 23       	and	r24, r24
    19c8:	19 f4       	brne	.+6      	; 0x19d0 <loopOpenTRV()+0x98>
    19ca:	88 24       	eor	r8, r8
    19cc:	83 94       	inc	r8
    19ce:	01 c0       	rjmp	.+2      	; 0x19d2 <loopOpenTRV()+0x9a>
    19d0:	88 24       	eor	r8, r8
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    19d2:	f9 99       	sbic	0x1f, 1	; 31
    19d4:	fe cf       	rjmp	.-4      	; 0x19d2 <loopOpenTRV()+0x9a>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    19d6:	82 e1       	ldi	r24, 0x12	; 18
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	92 bd       	out	0x22, r25	; 34
    19dc:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    19de:	f8 9a       	sbi	0x1f, 0	; 31
    19e0:	c0 b4       	in	r12, 0x20	; 32
  // Conversely, if not true, should have time to savely log outputs, etc.
  const uint8_t nearOverrunThreshold = GSCT_MAX - 8; // ~64ms/~32 serial TX chars of grace time...
  bool tooNearOverrun = false; // Set flag that can be checked later.

  // Is this unit currently in central hub listener mode?
  const bool hubMode = inHubMode();
    19e2:	c0 94       	com	r12
    19e4:	11 f0       	breq	.+4      	; 0x19ea <loopOpenTRV()+0xb2>
    19e6:	cc 24       	eor	r12, r12
    19e8:	c3 94       	inc	r12
  // The output is terse to avoid taking too long and possibly delaying other stuff too far.
  // Avoid doing this at all if too near the end of the cycle and risking overrun,
  // leaving any message queued, hoping it does not get overwritten.
  // TODO: safely process more than one pending message if present.
  // TODO: move to process in a batch periodically, eg when CLI is due.
  if(getSubCycleTime() >= nearOverrunThreshold) { tooNearOverrun = true; }
    19ea:	80 91 b2 00 	lds	r24, 0x00B2
    19ee:	87 3f       	cpi	r24, 0xF7	; 247
    19f0:	18 f0       	brcs	.+6      	; 0x19f8 <loopOpenTRV()+0xc0>
    19f2:	ee 24       	eor	r14, r14
    19f4:	e3 94       	inc	r14
    19f6:	6d c0       	rjmp	.+218    	; 0x1ad2 <loopOpenTRV()+0x19a>
  else
    {
    // Look for binary-format message.
    FullStatsMessageCore_t stats;
    getLastCoreStats(&stats);
    19f8:	ce 01       	movw	r24, r28
    19fa:	01 96       	adiw	r24, 0x01	; 1
    19fc:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <getLastCoreStats(FullStatsMessageCore*)>
    if(stats.containsID)
    1a00:	89 81       	ldd	r24, Y+1	; 0x01
    1a02:	80 ff       	sbrs	r24, 0
    1a04:	57 c0       	rjmp	.+174    	; 0x1ab4 <loopOpenTRV()+0x17c>
      {
      // Dump (remote) stats field '@<hexnodeID>;TnnCh[P;]'
      // where the T field shows temperature in C with a hex digit after the binary point indicated by C
      // and the optional P field indicates low power.
      serialPrintAndFlush(LINE_START_CHAR_RSTATS);
    1a06:	80 e4       	ldi	r24, 0x40	; 64
    1a08:	0e 94 a7 26 	call	0x4d4e	; 0x4d4e <serialPrintAndFlush(char)>
      serialPrintAndFlush((((uint16_t)stats.id0) << 8) | stats.id1, HEX);
    1a0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	2b 81       	ldd	r18, Y+3	; 0x03
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	82 2b       	or	r24, r18
    1a16:	93 2b       	or	r25, r19
    1a18:	60 e1       	ldi	r22, 0x10	; 16
    1a1a:	70 e0       	ldi	r23, 0x00	; 0
    1a1c:	0e 94 8b 26 	call	0x4d16	; 0x4d16 <serialPrintAndFlush(unsigned int, int)>
      if(stats.containsTempAndPower)
    1a20:	89 81       	ldd	r24, Y+1	; 0x01
    1a22:	81 ff       	sbrs	r24, 1
    1a24:	2b c0       	rjmp	.+86     	; 0x1a7c <loopOpenTRV()+0x144>
        {
        serialPrintAndFlush(F(";T"));
    1a26:	8e ec       	ldi	r24, 0xCE	; 206
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush(stats.tempAndPower.tempC16 >> 4, DEC);
    1a2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a30:	2d 81       	ldd	r18, Y+5	; 0x05
    1a32:	92 2f       	mov	r25, r18
    1a34:	9f 77       	andi	r25, 0x7F	; 127
    1a36:	88 0f       	add	r24, r24
    1a38:	99 1f       	adc	r25, r25
    1a3a:	b5 e0       	ldi	r27, 0x05	; 5
    1a3c:	95 95       	asr	r25
    1a3e:	87 95       	ror	r24
    1a40:	ba 95       	dec	r27
    1a42:	e1 f7       	brne	.-8      	; 0x1a3c <loopOpenTRV()+0x104>
    1a44:	6a e0       	ldi	r22, 0x0A	; 10
    1a46:	70 e0       	ldi	r23, 0x00	; 0
    1a48:	0e 94 cb 26 	call	0x4d96	; 0x4d96 <serialPrintAndFlush(int, int)>
        serialPrintAndFlush('C');
    1a4c:	83 e4       	ldi	r24, 0x43	; 67
    1a4e:	0e 94 a7 26 	call	0x4d4e	; 0x4d4e <serialPrintAndFlush(char)>
        serialPrintAndFlush(stats.tempAndPower.tempC16 & 0xf, HEX);
    1a52:	8c 81       	ldd	r24, Y+4	; 0x04
    1a54:	2d 81       	ldd	r18, Y+5	; 0x05
    1a56:	92 2f       	mov	r25, r18
    1a58:	9f 77       	andi	r25, 0x7F	; 127
    1a5a:	88 0f       	add	r24, r24
    1a5c:	99 1f       	adc	r25, r25
    1a5e:	95 95       	asr	r25
    1a60:	87 95       	ror	r24
    1a62:	8f 70       	andi	r24, 0x0F	; 15
    1a64:	90 70       	andi	r25, 0x00	; 0
    1a66:	60 e1       	ldi	r22, 0x10	; 16
    1a68:	70 e0       	ldi	r23, 0x00	; 0
    1a6a:	0e 94 cb 26 	call	0x4d96	; 0x4d96 <serialPrintAndFlush(int, int)>
        if(stats.tempAndPower.powerLow) { serialPrintAndFlush(F(";P")); } // Insert power-low field if needed.
    1a6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a70:	87 ff       	sbrs	r24, 7
    1a72:	04 c0       	rjmp	.+8      	; 0x1a7c <loopOpenTRV()+0x144>
    1a74:	8b ec       	ldi	r24, 0xCB	; 203
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <serialPrintAndFlush(__FlashStringHelper const*)>
        }
      if(stats.containsAmbL)
    1a7c:	89 81       	ldd	r24, Y+1	; 0x01
    1a7e:	82 ff       	sbrs	r24, 2
    1a80:	0a c0       	rjmp	.+20     	; 0x1a96 <loopOpenTRV()+0x15e>
        {
        serialPrintAndFlush(F(";L"));
    1a82:	88 ec       	ldi	r24, 0xC8	; 200
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush(stats.ambL);
    1a8a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	6a e0       	ldi	r22, 0x0A	; 10
    1a90:	70 e0       	ldi	r23, 0x00	; 0
    1a92:	0e 94 cb 26 	call	0x4d96	; 0x4d96 <serialPrintAndFlush(int, int)>
        }
      if(0 != stats.occ)
    1a96:	8f 81       	ldd	r24, Y+7	; 0x07
    1a98:	83 70       	andi	r24, 0x03	; 3
    1a9a:	c1 f0       	breq	.+48     	; 0x1acc <loopOpenTRV()+0x194>
        {
        serialPrintAndFlush(F(";O"));
    1a9c:	85 ec       	ldi	r24, 0xC5	; 197
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush(stats.occ);
    1aa4:	8f 81       	ldd	r24, Y+7	; 0x07
    1aa6:	83 70       	andi	r24, 0x03	; 3
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	6a e0       	ldi	r22, 0x0A	; 10
    1aac:	70 e0       	ldi	r23, 0x00	; 0
    1aae:	0e 94 cb 26 	call	0x4d96	; 0x4d96 <serialPrintAndFlush(int, int)>
    1ab2:	0c c0       	rjmp	.+24     	; 0x1acc <loopOpenTRV()+0x194>
      }
    // Check for JSON/text-format message if no binary message waiting.
    else
      {
      char buf[MSG_JSON_MAX_LENGTH+1];
      getLastJSONStats(buf);
    1ab4:	8e 01       	movw	r16, r28
    1ab6:	08 5f       	subi	r16, 0xF8	; 248
    1ab8:	1f 4f       	sbci	r17, 0xFF	; 255
    1aba:	c8 01       	movw	r24, r16
    1abc:	0e 94 19 1b 	call	0x3632	; 0x3632 <getLastJSONStats(char*)>
      if('\0' != *buf)
    1ac0:	88 85       	ldd	r24, Y+8	; 0x08
    1ac2:	88 23       	and	r24, r24
    1ac4:	29 f0       	breq	.+10     	; 0x1ad0 <loopOpenTRV()+0x198>
        {
        // Dump contained JSON message as-is at start of line.
        serialPrintAndFlush(buf);
    1ac6:	c8 01       	movw	r24, r16
    1ac8:	0e 94 e7 26 	call	0x4dce	; 0x4dce <serialPrintAndFlush(char const*)>
        serialPrintlnAndFlush();
    1acc:	0e 94 bb 26 	call	0x4d76	; 0x4d76 <serialPrintlnAndFlush()>
    1ad0:	ee 24       	eor	r14, r14
  // and could be disabled if no local valve is being run to provide better response to remote nodes.
  bool hubModeBoilerOn = false; // If true then remote call for heat is in progress.
#if defined(USE_MODULE_FHT8VSIMPLE)
  bool needsToEavesdrop = false; // By default assume no need to eavesdrop.
#endif
  if(hubMode)
    1ad2:	cc 20       	and	r12, r12
    1ad4:	11 f4       	brne	.+4      	; 0x1ada <loopOpenTRV()+0x1a2>
    1ad6:	ff 24       	eor	r15, r15
    1ad8:	a4 c0       	rjmp	.+328    	; 0x1c22 <loopOpenTRV()+0x2ea>
    {
#if defined(USE_MODULE_FHT8VSIMPLE)
    // Final poll to to cover up to end of previous minor loop.
    // Keep time from here to following SetupToEavesdropOnFHT8V() as short as possible to avoid missing remote calls.
    FHT8VCallForHeatPoll();
    1ada:	0e 94 df 12 	call	0x25be	; 0x25be <FHT8VCallForHeatPoll()>

    // Fetch and clear current pending sample house code calling for heat.
    const uint16_t hcRequest = FHT8VCallForHeatHeardGetAndClear();
    1ade:	0e 94 74 11 	call	0x22e8	; 0x22e8 <FHT8VCallForHeatHeardGetAndClear()>
    1ae2:	8c 01       	movw	r16, r24
    const bool heardIt = (hcRequest != ((uint16_t)~0));
    1ae4:	dd 24       	eor	r13, r13
    1ae6:	8f ef       	ldi	r24, 0xFF	; 255
    1ae8:	0f 3f       	cpi	r16, 0xFF	; 255
    1aea:	18 07       	cpc	r17, r24
    1aec:	11 f0       	breq	.+4      	; 0x1af2 <loopOpenTRV()+0x1ba>
    1aee:	dd 24       	eor	r13, r13
    1af0:	d3 94       	inc	r13
    // Don't log call for hear if near overrun,
    // and leave any error queued for next time.
    if(getSubCycleTime() >= nearOverrunThreshold) { tooNearOverrun = true; }
    1af2:	80 91 b2 00 	lds	r24, 0x00B2
    1af6:	87 3f       	cpi	r24, 0xF7	; 247
    1af8:	78 f5       	brcc	.+94     	; 0x1b58 <loopOpenTRV()+0x220>
    else
      {
      if(heardIt)
    1afa:	dd 20       	and	r13, r13
    1afc:	d9 f0       	breq	.+54     	; 0x1b34 <loopOpenTRV()+0x1fc>
        {
        DEBUG_SERIAL_TIMESTAMP();
    1afe:	0e 94 56 26 	call	0x4cac	; 0x4cac <_debug_serial_timestamp()>
        DEBUG_SERIAL_PRINT(' ');
    1b02:	80 e2       	ldi	r24, 0x20	; 32
    1b04:	0e 94 a7 26 	call	0x4d4e	; 0x4d4e <serialPrintAndFlush(char)>
        serialPrintAndFlush(F("CfH ")); // Call for heat from 
    1b08:	80 ec       	ldi	r24, 0xC0	; 192
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush((hcRequest >> 8) & 0xff);
    1b10:	81 2f       	mov	r24, r17
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	6a e0       	ldi	r22, 0x0A	; 10
    1b16:	70 e0       	ldi	r23, 0x00	; 0
    1b18:	0e 94 8b 26 	call	0x4d16	; 0x4d16 <serialPrintAndFlush(unsigned int, int)>
        serialPrintAndFlush(' ');
    1b1c:	80 e2       	ldi	r24, 0x20	; 32
    1b1e:	0e 94 a7 26 	call	0x4d4e	; 0x4d4e <serialPrintAndFlush(char)>
        serialPrintAndFlush(hcRequest & 0xff);
    1b22:	c8 01       	movw	r24, r16
    1b24:	90 70       	andi	r25, 0x00	; 0
    1b26:	6a e0       	ldi	r22, 0x0A	; 10
    1b28:	70 e0       	ldi	r23, 0x00	; 0
    1b2a:	0e 94 8b 26 	call	0x4d16	; 0x4d16 <serialPrintAndFlush(unsigned int, int)>
        serialPrintlnAndFlush();
    1b2e:	0e 94 bb 26 	call	0x4d76	; 0x4d76 <serialPrintlnAndFlush()>
    1b32:	16 c0       	rjmp	.+44     	; 0x1b60 <loopOpenTRV()+0x228>
        }
      else
        {
        // Check for error if nothing received.
        const uint8_t err = FHT8VLastRXErrGetAndClear();
    1b34:	0e 94 83 11 	call	0x2306	; 0x2306 <FHT8VLastRXErrGetAndClear()>
    1b38:	18 2f       	mov	r17, r24
        if(0 != err)
    1b3a:	88 23       	and	r24, r24
    1b3c:	b1 f1       	breq	.+108    	; 0x1baa <loopOpenTRV()+0x272>
          {
          serialPrintAndFlush(F("!RXerr F"));
    1b3e:	87 eb       	ldi	r24, 0xB7	; 183
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <serialPrintAndFlush(__FlashStringHelper const*)>
          serialPrintAndFlush(err);
    1b46:	81 2f       	mov	r24, r17
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	6a e0       	ldi	r22, 0x0A	; 10
    1b4c:	70 e0       	ldi	r23, 0x00	; 0
    1b4e:	0e 94 cb 26 	call	0x4d96	; 0x4d96 <serialPrintAndFlush(int, int)>
          serialPrintlnAndFlush();
    1b52:	0e 94 bb 26 	call	0x4d76	; 0x4d76 <serialPrintlnAndFlush()>
    1b56:	29 c0       	rjmp	.+82     	; 0x1baa <loopOpenTRV()+0x272>
    1b58:	ee 24       	eor	r14, r14
    1b5a:	e3 94       	inc	r14
        }
      }

    // Record call for heat, both to start boiler-on cycle and to defer need to listen again. 
    // Optimisation: may be able to stop RX if boiler is on for local demand (can measure local temp better: less self-heating).
    if(heardIt)
    1b5c:	dd 20       	and	r13, r13
    1b5e:	29 f1       	breq	.+74     	; 0x1baa <loopOpenTRV()+0x272>
      {
      if(0 == boilerCountdownTicks)
    1b60:	80 91 41 02 	lds	r24, 0x0241
    1b64:	90 91 42 02 	lds	r25, 0x0242
    1b68:	89 2b       	or	r24, r25
    1b6a:	59 f4       	brne	.+22     	; 0x1b82 <loopOpenTRV()+0x24a>
        {
        if(getSubCycleTime() >= nearOverrunThreshold) { tooNearOverrun = true; }
    1b6c:	80 91 b2 00 	lds	r24, 0x00B2
    1b70:	87 3f       	cpi	r24, 0xF7	; 247
    1b72:	18 f0       	brcs	.+6      	; 0x1b7a <loopOpenTRV()+0x242>
    1b74:	ee 24       	eor	r14, r14
    1b76:	e3 94       	inc	r14
    1b78:	04 c0       	rjmp	.+8      	; 0x1b82 <loopOpenTRV()+0x24a>
        else { serialPrintlnAndFlush(F("RCfH1")); } // Remote call for heat on.
    1b7a:	81 eb       	ldi	r24, 0xB1	; 177
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	0e 94 13 27 	call	0x4e26	; 0x4e26 <serialPrintlnAndFlush(__FlashStringHelper const*)>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1b82:	f9 99       	sbic	0x1f, 1	; 31
    1b84:	fe cf       	rjmp	.-4      	; 0x1b82 <loopOpenTRV()+0x24a>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1b86:	82 e1       	ldi	r24, 0x12	; 18
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	92 bd       	out	0x22, r25	; 34
    1b8c:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1b8e:	f8 9a       	sbi	0x1f, 0	; 31
    1b90:	80 b5       	in	r24, 0x20	; 32
        }
      boilerCountdownTicks = getMinBoilerOnMinutes() * (60/MAIN_TICK_S);
    1b92:	80 95       	com	r24
    1b94:	2e e1       	ldi	r18, 0x1E	; 30
    1b96:	82 9f       	mul	r24, r18
    1b98:	c0 01       	movw	r24, r0
    1b9a:	11 24       	eor	r1, r1
    1b9c:	90 93 42 02 	sts	0x0242, r25
    1ba0:	80 93 41 02 	sts	0x0241, r24
      boilerNoCallM = 0; // No time has passed since the last call.
    1ba4:	10 92 43 02 	sts	0x0243, r1
    1ba8:	22 c0       	rjmp	.+68     	; 0x1bee <loopOpenTRV()+0x2b6>
      }
    // Else count down towards boiler off.
    else if(boilerCountdownTicks > 0)
    1baa:	80 91 41 02 	lds	r24, 0x0241
    1bae:	90 91 42 02 	lds	r25, 0x0242
    1bb2:	00 97       	sbiw	r24, 0x00	; 0
    1bb4:	99 f0       	breq	.+38     	; 0x1bdc <loopOpenTRV()+0x2a4>
      {
      if(0 == --boilerCountdownTicks)
    1bb6:	01 97       	sbiw	r24, 0x01	; 1
    1bb8:	90 93 42 02 	sts	0x0242, r25
    1bbc:	80 93 41 02 	sts	0x0241, r24
    1bc0:	89 2b       	or	r24, r25
    1bc2:	a9 f4       	brne	.+42     	; 0x1bee <loopOpenTRV()+0x2b6>
        {
        if(getSubCycleTime() >= nearOverrunThreshold) { tooNearOverrun = true; }
    1bc4:	80 91 b2 00 	lds	r24, 0x00B2
    1bc8:	87 3f       	cpi	r24, 0xF7	; 247
    1bca:	18 f0       	brcs	.+6      	; 0x1bd2 <loopOpenTRV()+0x29a>
    1bcc:	ee 24       	eor	r14, r14
    1bce:	e3 94       	inc	r14
    1bd0:	0e c0       	rjmp	.+28     	; 0x1bee <loopOpenTRV()+0x2b6>
        else { serialPrintlnAndFlush(F("RCfH0")); } // Remote call for heat off
    1bd2:	8b ea       	ldi	r24, 0xAB	; 171
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	0e 94 13 27 	call	0x4e26	; 0x4e26 <serialPrintlnAndFlush(__FlashStringHelper const*)>
    1bda:	09 c0       	rjmp	.+18     	; 0x1bee <loopOpenTRV()+0x2b6>
        }
      }
    // Else already off so count up quiet minutes...
    else if(second0 && (boilerNoCallM < (uint8_t)~0)) { ++boilerNoCallM; }         
    1bdc:	bb 20       	and	r11, r11
    1bde:	39 f0       	breq	.+14     	; 0x1bee <loopOpenTRV()+0x2b6>
    1be0:	80 91 43 02 	lds	r24, 0x0243
    1be4:	8f 3f       	cpi	r24, 0xFF	; 255
    1be6:	19 f0       	breq	.+6      	; 0x1bee <loopOpenTRV()+0x2b6>
    1be8:	8f 5f       	subi	r24, 0xFF	; 255
    1bea:	80 93 43 02 	sts	0x0243, r24

    // Turn boiler output on or off in response to calls for heat.
    hubModeBoilerOn = (boilerCountdownTicks > 0);
    1bee:	ff 24       	eor	r15, r15
    1bf0:	80 91 41 02 	lds	r24, 0x0241
    1bf4:	90 91 42 02 	lds	r25, 0x0242
    1bf8:	89 2b       	or	r24, r25
    1bfa:	11 f0       	breq	.+4      	; 0x1c00 <loopOpenTRV()+0x2c8>
    1bfc:	ff 24       	eor	r15, r15
    1bfe:	f3 94       	inc	r15

    // If not running a local TRV, and thus without local temperature measurement problems from self-heating,
    // then just listen all the time for maximum simplicity and responsiveness at some cost in extra power consumption.
    // (At least as long as power is not running low for some reason.)
    if(!localFHT8VTRVEnabled() && !batteryLow)
    1c00:	0e 94 45 11 	call	0x228a	; 0x228a <localFHT8VTRVEnabled()>
    1c04:	88 23       	and	r24, r24
    1c06:	09 f0       	breq	.+2      	; 0x1c0a <loopOpenTRV()+0x2d2>
    1c08:	ea c1       	rjmp	.+980    	; 0x1fde <loopOpenTRV()+0x6a6>
    1c0a:	aa 20       	and	r10, r10
    1c0c:	09 f0       	breq	.+2      	; 0x1c10 <loopOpenTRV()+0x2d8>
    1c0e:	e7 c1       	rjmp	.+974    	; 0x1fde <loopOpenTRV()+0x6a6>
    1c10:	ef c1       	rjmp	.+990    	; 0x1ff0 <loopOpenTRV()+0x6b8>
    // Aim to listen in one stretch for greater than full FHT8V TX cycle of ~2m to avoid missing a call for heat.
    // MUST listen for all of final 2 mins of boiler-on to avoid missing TX (without forcing boiler over-run).
    else if((boilerCountdownTicks <= ((MAX_FHT8V_TX_CYCLE_HS+1)/(2*MAIN_TICK_S))) && // Don't miss a final TX that would keep the boiler on...
       (boilerCountdownTicks != 0)) // But don't force unit to listen/RX all the time if no recent call for heat.
      { needsToEavesdrop = true; }
    else if((!heardIt) &&
    1c12:	dd 20       	and	r13, r13
    1c14:	31 f4       	brne	.+12     	; 0x1c22 <loopOpenTRV()+0x2ea>
    1c16:	99 20       	and	r9, r9
    1c18:	21 f4       	brne	.+8      	; 0x1c22 <loopOpenTRV()+0x2ea>
    1c1a:	29 55       	subi	r18, 0x59	; 89
    1c1c:	32 40       	sbci	r19, 0x02	; 2
    1c1e:	08 f4       	brcc	.+2      	; 0x1c22 <loopOpenTRV()+0x2ea>
    1c20:	e7 c1       	rjmp	.+974    	; 0x1ff0 <loopOpenTRV()+0x6b8>
#endif
    }
  else
    {
    // Power down and clear radio state (if currently eavesdropping).
    StopEavesdropOnFHT8V(second0);
    1c22:	8b 2d       	mov	r24, r11
    1c24:	0e 94 8b 11 	call	0x2316	; 0x2316 <StopEavesdropOnFHT8V(bool)>
    // Clear any RX state so that nothing stale is carried forward.
    FHT8VCallForHeatHeardGetAndClear();
    1c28:	0e 94 74 11 	call	0x22e8	; 0x22e8 <FHT8VCallForHeatHeardGetAndClear()>
    1c2c:	10 e0       	ldi	r17, 0x00	; 0
    1c2e:	10 c0       	rjmp	.+32     	; 0x1c50 <loopOpenTRV()+0x318>
#if 1 && defined(DEBUG)
    const uint16_t dropped = getInboundStatsQueueOverrun();
    static uint16_t oldDropped;
    if(dropped != oldDropped)
      {
      DEBUG_SERIAL_PRINT_FLASHSTRING("?DROPPED stats: ");
    1c30:	8a e9       	ldi	r24, 0x9A	; 154
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <serialPrintAndFlush(__FlashStringHelper const*)>
      DEBUG_SERIAL_PRINT(dropped);
    1c38:	c8 01       	movw	r24, r16
    1c3a:	6a e0       	ldi	r22, 0x0A	; 10
    1c3c:	70 e0       	ldi	r23, 0x00	; 0
    1c3e:	0e 94 8b 26 	call	0x4d16	; 0x4d16 <serialPrintAndFlush(unsigned int, int)>
      DEBUG_SERIAL_PRINTLN();
    1c42:	0e 94 bb 26 	call	0x4d76	; 0x4d76 <serialPrintlnAndFlush()>
      oldDropped = dropped;
    1c46:	10 93 46 02 	sts	0x0246, r17
    1c4a:	00 93 45 02 	sts	0x0245, r16
    1c4e:	11 e0       	ldi	r17, 0x01	; 1


  // Set BOILER_OUT as appropriate for local and/or remote calls for heat.
  // FIXME: local valve-driven boiler on does not obey normal on/off run-time rules.
#if defined(ENABLE_BOILER_HUB)
  fastDigitalWrite(OUT_HEATCALL, ((hubModeBoilerOn || NominalRadValve.isControlledValveReallyOpen()) ? HIGH : LOW));
    1c50:	ff 20       	and	r15, r15
    1c52:	41 f4       	brne	.+16     	; 0x1c64 <loopOpenTRV()+0x32c>
    1c54:	89 e1       	ldi	r24, 0x19	; 25
    1c56:	92 e0       	ldi	r25, 0x02	; 2
    1c58:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <ModelledRadValve::isControlledValveReallyOpen() const>
    1c5c:	88 23       	and	r24, r24
    1c5e:	11 f4       	brne	.+4      	; 0x1c64 <loopOpenTRV()+0x32c>
    1c60:	60 e0       	ldi	r22, 0x00	; 0
    1c62:	01 c0       	rjmp	.+2      	; 0x1c66 <loopOpenTRV()+0x32e>
    1c64:	61 e0       	ldi	r22, 0x01	; 1
    1c66:	86 e0       	ldi	r24, 0x06	; 6
    1c68:	0e 94 18 38 	call	0x7030	; 0x7030 <digitalWrite>
  // DHD20130425: waking up from sleep and getting to start processing below this block may take >10ms.
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("*E"); // End-of-cycle sleep.
#endif
  // Ensure that serial I/O is off.
  powerDownSerial();
    1c6c:	0e 94 b9 20 	call	0x4172	; 0x4172 <powerDownSerial()>
  // Power down most stuff (except radio for hub RX).
  minimisePowerWithoutSleep();
    1c70:	0e 94 65 20 	call	0x40ca	; 0x40ca <minimisePowerWithoutSleep()>
    1c74:	11 c0       	rjmp	.+34     	; 0x1c98 <loopOpenTRV()+0x360>
  uint_fast8_t newTLSD;
  while(TIME_LSD == (newTLSD = getSecondsLT()))
    {
#if defined(ENABLE_BOILER_HUB) && defined(USE_MODULE_FHT8VSIMPLE) // Deal with FHT8V eavesdropping if needed.
    // Poll for RX of remote calls-for-heat if needed.
    if(needsToEavesdrop) { nap30AndPoll(); continue; }
    1c76:	11 23       	and	r17, r17
    1c78:	39 f0       	breq	.+14     	; 0x1c88 <loopOpenTRV()+0x350>
//   * force if true then force full poll on every call (ie do not internally rate-limit)
// NOTE: implementation may not be in power-management module.
bool pollIO(bool force = false);
// Nap productively polling I/O, etc, across the system while spending time in low-power mode if possible.
// Typically sleeps for about 30ms; tries to allow ealier wakeup if interrupt is received, etc.
static void inline nap30AndPoll() { nap(WDTO_30MS); pollIO(true); }
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <nap(signed char)>
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	0e 94 1e 07 	call	0xe3c	; 0xe3c <pollIO(bool)>
    1c86:	08 c0       	rjmp	.+16     	; 0x1c98 <loopOpenTRV()+0x360>
#endif
#if defined(USE_MODULE_RFM22RADIOSIMPLE) // Force radio to power-saving standby state if appropriate.
    // Force radio to known-low-power state from time to time (not every time to avoid unnecessary SPI work, LED flicker, etc.)
    if(batteryLow || second0) { RFM22ModeStandbyAndClearState(); }
    1c88:	aa 20       	and	r10, r10
    1c8a:	11 f4       	brne	.+4      	; 0x1c90 <loopOpenTRV()+0x358>
    1c8c:	bb 20       	and	r11, r11
    1c8e:	11 f0       	breq	.+4      	; 0x1c94 <loopOpenTRV()+0x35c>
    1c90:	0e 94 4b 23 	call	0x4696	; 0x4696 <RFM22ModeStandbyAndClearState()>
#endif
    sleepUntilInt(); // Normal long minimal-power sleep until wake-up interrupt.
    1c94:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <sleepPwrSaveWithBODDisabled()>
  // Ensure that serial I/O is off.
  powerDownSerial();
  // Power down most stuff (except radio for hub RX).
  minimisePowerWithoutSleep();
  uint_fast8_t newTLSD;
  while(TIME_LSD == (newTLSD = getSecondsLT()))
    1c98:	90 91 70 03 	lds	r25, 0x0370
    1c9c:	80 91 3f 02 	lds	r24, 0x023F
    1ca0:	89 17       	cp	r24, r25
    1ca2:	49 f3       	breq	.-46     	; 0x1c76 <loopOpenTRV()+0x33e>
    // Force radio to known-low-power state from time to time (not every time to avoid unnecessary SPI work, LED flicker, etc.)
    if(batteryLow || second0) { RFM22ModeStandbyAndClearState(); }
#endif
    sleepUntilInt(); // Normal long minimal-power sleep until wake-up interrupt.
    }
  TIME_LSD = newTLSD;
    1ca4:	90 93 3f 02 	sts	0x023F, r25
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("*S"); // Start-of-cycle wake.
#endif

#if defined(ENABLE_BOILER_HUB) && defined(USE_MODULE_FHT8VSIMPLE) // Deal with FHT8V eavesdropping if needed.
  // Check RSSI...
  if(needsToEavesdrop)
    1ca8:	11 23       	and	r17, r17
    1caa:	79 f0       	breq	.+30     	; 0x1cca <loopOpenTRV()+0x392>
    {
    const uint8_t rssi = RFM22RSSI();
    1cac:	0e 94 0e 23 	call	0x461c	; 0x461c <RFM22RSSI()>
    1cb0:	98 2f       	mov	r25, r24
    static uint8_t lastRSSI;
    if((rssi > 0) && (lastRSSI != rssi))
    1cb2:	88 23       	and	r24, r24
    1cb4:	51 f0       	breq	.+20     	; 0x1cca <loopOpenTRV()+0x392>
    1cb6:	80 91 44 02 	lds	r24, 0x0244
    1cba:	89 17       	cp	r24, r25
    1cbc:	31 f0       	breq	.+12     	; 0x1cca <loopOpenTRV()+0x392>
      {
      lastRSSI = rssi;
    1cbe:	90 93 44 02 	sts	0x0244, r25
      addEntropyToPool(rssi, 0); // Probably some real entropy but don't assume it.
    1cc2:	89 2f       	mov	r24, r25
    1cc4:	60 e0       	ldi	r22, 0x00	; 0
    1cc6:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <addEntropyToPool(unsigned char, unsigned char)>
  // START LOOP BODY
  // ===============


  // Warn if too near overrun before.
  if(tooNearOverrun) { serialPrintlnAndFlush(F("?near overrun")); }
    1cca:	ee 20       	and	r14, r14
    1ccc:	21 f0       	breq	.+8      	; 0x1cd6 <loopOpenTRV()+0x39e>
    1cce:	8c e8       	ldi	r24, 0x8C	; 140
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	0e 94 13 27 	call	0x4e26	; 0x4e26 <serialPrintlnAndFlush(__FlashStringHelper const*)>
  // Try for double TX for more robust conversation with valve unless:
  //   * battery is low
  //   * the valve is not required to be wide open (ie a reasonable temperature is currently being maintained).
  //   * this is a hub and has to listen as much as possible
  // to conserve battery and bandwidth.
  const bool doubleTXForFTH8V = !conserveBattery && !hubMode && (NominalRadValve.get() >= 75);
    1cd6:	88 20       	and	r8, r8
    1cd8:	51 f4       	brne	.+20     	; 0x1cee <loopOpenTRV()+0x3b6>
    1cda:	cc 20       	and	r12, r12
    1cdc:	41 f4       	brne	.+16     	; 0x1cee <loopOpenTRV()+0x3b6>
  public:
    // Return last value fetched by read(); undefined before first read().
    // Usually fast.
    // Often likely to be thread-safe or usable within ISRs (Interrupt Service Routines),
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual uint8_t get() const { return(value); }
    1cde:	80 91 1b 02 	lds	r24, 0x021B
    1ce2:	ff 24       	eor	r15, r15
    1ce4:	8b 34       	cpi	r24, 0x4B	; 75
    1ce6:	20 f0       	brcs	.+8      	; 0x1cf0 <loopOpenTRV()+0x3b8>
    1ce8:	ff 24       	eor	r15, r15
    1cea:	f3 94       	inc	r15
    1cec:	01 c0       	rjmp	.+2      	; 0x1cf0 <loopOpenTRV()+0x3b8>
    1cee:	ff 24       	eor	r15, r15
  // FHT8V is highest priority and runs first.
  // ---------- HALF SECOND #0 -----------
  bool useExtraFHT8VTXSlots = localFHT8VTRVEnabled() && FHT8VPollSyncAndTX_First(doubleTXForFTH8V); // Time for extra TX before UI.
    1cf0:	0e 94 45 11 	call	0x228a	; 0x228a <localFHT8VTRVEnabled()>
    1cf4:	88 23       	and	r24, r24
    1cf6:	39 f0       	breq	.+14     	; 0x1d06 <loopOpenTRV()+0x3ce>
    1cf8:	8f 2d       	mov	r24, r15
    1cfa:	0e 94 31 16 	call	0x2c62	; 0x2c62 <FHT8VPollSyncAndTX_First(bool)>
    1cfe:	88 23       	and	r24, r24
    1d00:	11 f0       	breq	.+4      	; 0x1d06 <loopOpenTRV()+0x3ce>
    1d02:	01 e0       	ldi	r16, 0x01	; 1
    1d04:	01 c0       	rjmp	.+2      	; 0x1d08 <loopOpenTRV()+0x3d0>
    1d06:	00 e0       	ldi	r16, 0x00	; 0
  bool recompute = false; // Set true an extra recompute of target temperature should be done.
#if !defined(TWO_S_TICK_RTC_SUPPORT)
  if(0 == (TIME_LSD & 1))
#endif
    {
    if(tickUI(TIME_LSD))
    1d08:	80 91 3f 02 	lds	r24, 0x023F
    1d0c:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <tickUI(unsigned char)>
    1d10:	88 23       	and	r24, r24
    1d12:	19 f0       	breq	.+6      	; 0x1d1a <loopOpenTRV()+0x3e2>
    1d14:	ee 24       	eor	r14, r14
    1d16:	e3 94       	inc	r14
    1d18:	07 c0       	rjmp	.+14     	; 0x1d28 <loopOpenTRV()+0x3f0>
      showStatus = true;
      recompute = true;
      }
    }

  if(recompute || recentUIControlUse())
    1d1a:	0e 94 43 27 	call	0x4e86	; 0x4e86 <recentUIControlUse()>
    1d1e:	88 23       	and	r24, r24
    1d20:	11 f4       	brne	.+4      	; 0x1d26 <loopOpenTRV()+0x3ee>
    1d22:	ee 24       	eor	r14, r14
    1d24:	05 c0       	rjmp	.+10     	; 0x1d30 <loopOpenTRV()+0x3f8>
    1d26:	ee 24       	eor	r14, r14
    {
    // Force immediate recompute of target temperature for (UI) responsiveness.
    NominalRadValve.computeTargetTemperature();
    1d28:	89 e1       	ldi	r24, 0x19	; 25
    1d2a:	92 e0       	ldi	r25, 0x02	; 2
    1d2c:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <ModelledRadValve::computeTargetTemperature()>
    }


#if defined(USE_MODULE_FHT8VSIMPLE)
  if(useExtraFHT8VTXSlots)
    1d30:	00 23       	and	r16, r16
    1d32:	51 f0       	breq	.+20     	; 0x1d48 <loopOpenTRV()+0x410>
    {
    // Time for extra TX before other actions, but don't bother if minimising power in frost mode.
    // ---------- HALF SECOND #1 -----------
    useExtraFHT8VTXSlots = localFHT8VTRVEnabled() && FHT8VPollSyncAndTX_Next(doubleTXForFTH8V); 
    1d34:	0e 94 45 11 	call	0x228a	; 0x228a <localFHT8VTRVEnabled()>
    1d38:	88 23       	and	r24, r24
    1d3a:	29 f0       	breq	.+10     	; 0x1d46 <loopOpenTRV()+0x40e>
    1d3c:	8f 2d       	mov	r24, r15
    1d3e:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <FHT8VPollSyncAndTX_Next(bool)>
    1d42:	88 23       	and	r24, r24
    1d44:	09 f4       	brne	.+2      	; 0x1d48 <loopOpenTRV()+0x410>
    1d46:	00 e0       	ldi	r16, 0x00	; 0
  // Once-per-minute tasks: all must take << 0.3s.
  // Run tasks spread throughout the minute to be as kind to batteries (etc) as possible.
  // Only when runAll is true run less-critical tasks that be skipped sometimes when particularly conserving energy.
  // TODO: coordinate temperature reading with time when radio and other heat-generating items are off for more accurate readings.
  // TODO: ensure only take ambient light reading at times when all LEDs are off.
  const bool runAll = (!conserveBattery) || minute0From4ForSensors;
    1d48:	88 20       	and	r8, r8
    1d4a:	11 f0       	breq	.+4      	; 0x1d50 <loopOpenTRV()+0x418>
    1d4c:	19 2d       	mov	r17, r9
    1d4e:	01 c0       	rjmp	.+2      	; 0x1d52 <loopOpenTRV()+0x41a>
    1d50:	11 e0       	ldi	r17, 0x01	; 1

  switch(TIME_LSD) // With TWO_S_TICK_RTC_SUPPORT only even seconds are available.
    1d52:	80 91 3f 02 	lds	r24, 0x023F
    1d56:	80 33       	cpi	r24, 0x30	; 48
    1d58:	09 f4       	brne	.+2      	; 0x1d5c <loopOpenTRV()+0x424>
    1d5a:	97 c0       	rjmp	.+302    	; 0x1e8a <loopOpenTRV()+0x552>
    1d5c:	81 33       	cpi	r24, 0x31	; 49
    1d5e:	68 f4       	brcc	.+26     	; 0x1d7a <loopOpenTRV()+0x442>
    1d60:	82 30       	cpi	r24, 0x02	; 2
    1d62:	41 f1       	breq	.+80     	; 0x1db4 <loopOpenTRV()+0x47c>
    1d64:	83 30       	cpi	r24, 0x03	; 3
    1d66:	18 f4       	brcc	.+6      	; 0x1d6e <loopOpenTRV()+0x436>
    1d68:	88 23       	and	r24, r24
    1d6a:	d1 f0       	breq	.+52     	; 0x1da0 <loopOpenTRV()+0x468>
    1d6c:	ef c0       	rjmp	.+478    	; 0x1f4c <loopOpenTRV()+0x614>
    1d6e:	84 30       	cpi	r24, 0x04	; 4
    1d70:	a9 f1       	breq	.+106    	; 0x1ddc <loopOpenTRV()+0x4a4>
    1d72:	8a 30       	cpi	r24, 0x0A	; 10
    1d74:	09 f0       	breq	.+2      	; 0x1d78 <loopOpenTRV()+0x440>
    1d76:	ea c0       	rjmp	.+468    	; 0x1f4c <loopOpenTRV()+0x614>
    1d78:	39 c0       	rjmp	.+114    	; 0x1dec <loopOpenTRV()+0x4b4>
    1d7a:	86 33       	cpi	r24, 0x36	; 54
    1d7c:	09 f4       	brne	.+2      	; 0x1d80 <loopOpenTRV()+0x448>
    1d7e:	97 c0       	rjmp	.+302    	; 0x1eae <loopOpenTRV()+0x576>
    1d80:	87 33       	cpi	r24, 0x37	; 55
    1d82:	38 f4       	brcc	.+14     	; 0x1d92 <loopOpenTRV()+0x45a>
    1d84:	82 33       	cpi	r24, 0x32	; 50
    1d86:	09 f4       	brne	.+2      	; 0x1d8a <loopOpenTRV()+0x452>
    1d88:	85 c0       	rjmp	.+266    	; 0x1e94 <loopOpenTRV()+0x55c>
    1d8a:	84 33       	cpi	r24, 0x34	; 52
    1d8c:	09 f0       	breq	.+2      	; 0x1d90 <loopOpenTRV()+0x458>
    1d8e:	de c0       	rjmp	.+444    	; 0x1f4c <loopOpenTRV()+0x614>
    1d90:	89 c0       	rjmp	.+274    	; 0x1ea4 <loopOpenTRV()+0x56c>
    1d92:	88 33       	cpi	r24, 0x38	; 56
    1d94:	09 f4       	brne	.+2      	; 0x1d98 <loopOpenTRV()+0x460>
    1d96:	90 c0       	rjmp	.+288    	; 0x1eb8 <loopOpenTRV()+0x580>
    1d98:	8a 33       	cpi	r24, 0x3A	; 58
    1d9a:	09 f0       	breq	.+2      	; 0x1d9e <loopOpenTRV()+0x466>
    1d9c:	d7 c0       	rjmp	.+430    	; 0x1f4c <loopOpenTRV()+0x614>
    1d9e:	c3 c0       	rjmp	.+390    	; 0x1f26 <loopOpenTRV()+0x5ee>
    {
    case 0:
      {
      // Tasks that must be run every minute.
      ++minuteCount;
    1da0:	80 91 40 02 	lds	r24, 0x0240
    1da4:	8f 5f       	subi	r24, 0xFF	; 255
    1da6:	80 93 40 02 	sts	0x0240, r24
      checkUserSchedule(); // Force to user's programmed settings, if any, at the correct time.
    1daa:	0e 94 56 28 	call	0x50ac	; 0x50ac <checkUserSchedule()>
      // Ensure that the RTC has been persisted promptly when necessary.
      persistRTC();
    1dae:	0e 94 a6 24 	call	0x494c	; 0x494c <persistRTC()>
    1db2:	cc c0       	rjmp	.+408    	; 0x1f4c <loopOpenTRV()+0x614>
      break;
      }

    // Churn/reseed PRNG(s) a little to improve unpredictability in use: should be lightweight.
    case 2: { if(runAll) { seedRNG8(minuteCount ^ cycleCountCPU() ^ (uint8_t)Supply_mV.get(), getSubCycleTime() ^ (uint8_t)AmbLight.get(), (uint8_t)TemperatureC16.get()); } break; }
    1db4:	11 23       	and	r17, r17
    1db6:	09 f4       	brne	.+2      	; 0x1dba <loopOpenTRV()+0x482>
    1db8:	c9 c0       	rjmp	.+402    	; 0x1f4c <loopOpenTRV()+0x614>
    1dba:	86 b5       	in	r24, 0x26	; 38
    1dbc:	20 91 b2 00 	lds	r18, 0x00B2
    1dc0:	60 91 be 03 	lds	r22, 0x03BE
    1dc4:	90 91 40 02 	lds	r25, 0x0240
    1dc8:	89 27       	eor	r24, r25
    1dca:	90 91 66 03 	lds	r25, 0x0366
    1dce:	62 27       	eor	r22, r18
    1dd0:	89 27       	eor	r24, r25
    1dd2:	40 91 c8 03 	lds	r20, 0x03C8
    1dd6:	0e 94 89 21 	call	0x4312	; 0x4312 <seedRNG8(unsigned char, unsigned char, unsigned char)>
    1dda:	b8 c0       	rjmp	.+368    	; 0x1f4c <loopOpenTRV()+0x614>
    // Force read of supply/battery voltage; measure and recompute status (etc) less often when already thought to be low, eg when conserving.
    case 4: { if(runAll) { Supply_mV.read(); } break; }
    1ddc:	11 23       	and	r17, r17
    1dde:	09 f4       	brne	.+2      	; 0x1de2 <loopOpenTRV()+0x4aa>
    1de0:	b5 c0       	rjmp	.+362    	; 0x1f4c <loopOpenTRV()+0x614>
    1de2:	82 e6       	ldi	r24, 0x62	; 98
    1de4:	93 e0       	ldi	r25, 0x03	; 3
    1de6:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <SupplyVoltageMilliVolts::read()>
    1dea:	b0 c0       	rjmp	.+352    	; 0x1f4c <loopOpenTRV()+0x614>

    // Regular transmission of stats if NOT driving a local valve (else stats can be piggybacked onto that).
    case 10:
      {
      if(!enableTrailingStatsPayload()) { break; } // Not allowed to send stuff like this.
    1dec:	0e 94 65 16 	call	0x2cca	; 0x2cca <enableTrailingStatsPayload()>
    1df0:	88 23       	and	r24, r24
    1df2:	09 f4       	brne	.+2      	; 0x1df6 <loopOpenTRV()+0x4be>
    1df4:	ab c0       	rjmp	.+342    	; 0x1f4c <loopOpenTRV()+0x614>
#if defined(USE_MODULE_FHT8VSIMPLE)
      // Avoid transmit conflict with FS20; just drop the slot.
      // We should possibly choose between this and piggybacking stats to avoid busting duty-cycle rules.
      if(localFHT8VTRVEnabled() && useExtraFHT8VTXSlots) { break; }
    1df6:	0e 94 45 11 	call	0x228a	; 0x228a <localFHT8VTRVEnabled()>
    1dfa:	88 23       	and	r24, r24
    1dfc:	09 f4       	brne	.+2      	; 0x1e00 <loopOpenTRV()+0x4c8>
    1dfe:	07 c1       	rjmp	.+526    	; 0x200e <loopOpenTRV()+0x6d6>
    1e00:	00 23       	and	r16, r16
    1e02:	09 f4       	brne	.+2      	; 0x1e06 <loopOpenTRV()+0x4ce>
    1e04:	04 c1       	rjmp	.+520    	; 0x200e <loopOpenTRV()+0x6d6>
    1e06:	a4 c0       	rjmp	.+328    	; 0x1f50 <loopOpenTRV()+0x618>
#endif

      // Generally only attempt stats TX in the minute after all sensors should have been polled (so that readings are fresh).
      if(minute1From4AfterSensors ||
    1e08:	aa 20       	and	r10, r10
    1e0a:	09 f0       	breq	.+2      	; 0x1e0e <loopOpenTRV()+0x4d6>
    1e0c:	9f c0       	rjmp	.+318    	; 0x1f4c <loopOpenTRV()+0x614>
    1e0e:	0e 94 a4 21 	call	0x4348	; 0x4348 <randRNG8()>
    1e12:	84 72       	andi	r24, 0x24	; 36
    1e14:	09 f0       	breq	.+2      	; 0x1e18 <loopOpenTRV()+0x4e0>
    1e16:	9a c0       	rjmp	.+308    	; 0x1f4c <loopOpenTRV()+0x614>
        (!batteryLow && (0 == (0x24 & randRNG8())))) // Occasional additional TX when not conserving power.
        {
        pollIO(); // Deal with any pending I/O.
    1e18:	80 e0       	ldi	r24, 0x00	; 0
    1e1a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <pollIO(bool)>
        // Sleep randomly up to 128ms to spread transmissions and thus help avoid collisions.
        sleepLowPowerLessThanMs(1 + (randRNG8() & 0x7f));
    1e1e:	0e 94 a4 21 	call	0x4348	; 0x4348 <randRNG8()>
// Should be good for values up to at least 1000, ie 1 second.
// Uses formulation likely to be quicker than sleepLowPowerMs() for non-constant argument values,
// and that results in a somewhat shorter sleep than sleepLowPowerMs(ms).
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerLessThanMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed(((MIN_CPU_HZ/4000) * (ms)) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	8f 77       	andi	r24, 0x7F	; 127
    1e26:	90 70       	andi	r25, 0x00	; 0
    1e28:	01 96       	adiw	r24, 0x01	; 1
    1e2a:	a0 e0       	ldi	r26, 0x00	; 0
    1e2c:	b0 e0       	ldi	r27, 0x00	; 0
    1e2e:	9c 01       	movw	r18, r24
    1e30:	ad 01       	movw	r20, r26
    1e32:	e3 e0       	ldi	r30, 0x03	; 3
    1e34:	22 0f       	add	r18, r18
    1e36:	33 1f       	adc	r19, r19
    1e38:	44 1f       	adc	r20, r20
    1e3a:	55 1f       	adc	r21, r21
    1e3c:	ea 95       	dec	r30
    1e3e:	d1 f7       	brne	.-12     	; 0x1e34 <loopOpenTRV()+0x4fc>
    1e40:	28 1b       	sub	r18, r24
    1e42:	39 0b       	sbc	r19, r25
    1e44:	4a 0b       	sbc	r20, r26
    1e46:	5b 0b       	sbc	r21, r27
    1e48:	22 50       	subi	r18, 0x02	; 2
    1e4a:	30 40       	sbci	r19, 0x00	; 0
    1e4c:	c9 01       	movw	r24, r18
    1e4e:	0e 94 76 1d 	call	0x3aec	; 0x3aec <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
        pollIO(); // Deal with any pending I/O.
    1e52:	80 e0       	ldi	r24, 0x00	; 0
    1e54:	0e 94 1e 07 	call	0xe3c	; 0xe3c <pollIO(bool)>
        //   * battery is low
        //   * this node is a hub so needs to listen as much as possible
        // This doesn't generally/always need to send binary/both formats
        // if this is controlling a local FHT8V on which the binary stats can be piggybacked.
        // Ie, if doesn't have a local TRV then it must send binary some of the time.
        const bool doBinary = !localFHT8VTRVEnabled() && randRNG8NextBoolean();
    1e58:	0e 94 45 11 	call	0x228a	; 0x228a <localFHT8VTRVEnabled()>
    1e5c:	88 23       	and	r24, r24
    1e5e:	31 f4       	brne	.+12     	; 0x1e6c <loopOpenTRV()+0x534>
void resetRNG8();
#endif

// Get a boolean from RNG8.
// Avoids suspect low-order bit(s).
static inline bool randRNG8NextBoolean() { return(0 != (0x8 & randRNG8())); }
    1e60:	0e 94 a4 21 	call	0x4348	; 0x4348 <randRNG8()>
    1e64:	83 ff       	sbrs	r24, 3
    1e66:	02 c0       	rjmp	.+4      	; 0x1e6c <loopOpenTRV()+0x534>
    1e68:	41 e0       	ldi	r20, 0x01	; 1
    1e6a:	01 c0       	rjmp	.+2      	; 0x1e6e <loopOpenTRV()+0x536>
    1e6c:	40 e0       	ldi	r20, 0x00	; 0
        bareStatsTX(hubMode, minute1From4AfterSensors && !batteryLow && !hubMode, doBinary);
    1e6e:	77 20       	and	r7, r7
    1e70:	39 f0       	breq	.+14     	; 0x1e80 <loopOpenTRV()+0x548>
    1e72:	aa 20       	and	r10, r10
    1e74:	29 f4       	brne	.+10     	; 0x1e80 <loopOpenTRV()+0x548>
    1e76:	60 e0       	ldi	r22, 0x00	; 0
    1e78:	cc 20       	and	r12, r12
    1e7a:	19 f4       	brne	.+6      	; 0x1e82 <loopOpenTRV()+0x54a>
    1e7c:	61 e0       	ldi	r22, 0x01	; 1
    1e7e:	01 c0       	rjmp	.+2      	; 0x1e82 <loopOpenTRV()+0x54a>
    1e80:	60 e0       	ldi	r22, 0x00	; 0
    1e82:	8c 2d       	mov	r24, r12
    1e84:	0e 94 82 08 	call	0x1104	; 0x1104 <bareStatsTX(bool, bool, bool)>
    1e88:	61 c0       	rjmp	.+194    	; 0x1f4c <loopOpenTRV()+0x614>
#endif

#ifdef TEMP_POT_AVAILABLE
    // Sample the user-selected WARM temperature target at a fixed rate.
    // This allows the unit to stay reasonably responsive to adjusting the temperature dial.
    case 48: { TempPot.read(); break; }
    1e8a:	8a ec       	ldi	r24, 0xCA	; 202
    1e8c:	93 e0       	ldi	r25, 0x03	; 3
    1e8e:	0e 94 72 32 	call	0x64e4	; 0x64e4 <TemperaturePot::read()>
    1e92:	5c c0       	rjmp	.+184    	; 0x1f4c <loopOpenTRV()+0x614>
#endif

    // Read all environmental inputs, late in the cycle.
#ifdef HUMIDITY_SENSOR_SUPPORT
    // Sample humidity.
    case 50: { if(runAll) { RelHumidity.read(); } break; }
    1e94:	11 23       	and	r17, r17
    1e96:	09 f4       	brne	.+2      	; 0x1e9a <loopOpenTRV()+0x562>
    1e98:	59 c0       	rjmp	.+178    	; 0x1f4c <loopOpenTRV()+0x614>
    1e9a:	82 ec       	ldi	r24, 0xC2	; 194
    1e9c:	93 e0       	ldi	r25, 0x03	; 3
    1e9e:	0e 94 67 33 	call	0x66ce	; 0x66ce <HumiditySensorSHT21::read()>
    1ea2:	54 c0       	rjmp	.+168    	; 0x1f4c <loopOpenTRV()+0x614>
#endif

    // Poll ambient light level at a fixed rate.
    // This allows the unit to respond consistently to (eg) switching lights on (eg TODO-388).
    case 52: { AmbLight.read(); break; }
    1ea4:	8c eb       	ldi	r24, 0xBC	; 188
    1ea6:	93 e0       	ldi	r25, 0x03	; 3
    1ea8:	0e 94 db 33 	call	0x67b6	; 0x67b6 <AmbientLight::read()>
    1eac:	4f c0       	rjmp	.+158    	; 0x1f4c <loopOpenTRV()+0x614>

    // At a hub, sample temperature regularly as late as possible in the minute just before recomputing valve position.
    // Force a regular read to make stats such as rate-of-change simple and to minimise lag.
    // TODO: optimise to reduce power consumption when not calling for heat.
    // TODO: optimise to reduce self-heating jitter when in hub/listen/RX mode.
    case 54: { TemperatureC16.read(); break; }
    1eae:	86 ec       	ldi	r24, 0xC6	; 198
    1eb0:	93 e0       	ldi	r25, 0x03	; 3
    1eb2:	0e 94 ff 32 	call	0x65fe	; 0x65fe <RoomTemperatureC16::read()>
    1eb6:	4a c0       	rjmp	.+148    	; 0x1f4c <loopOpenTRV()+0x614>
    // This should happen as soon after the latest readings as possible (temperature especially).
    case 56:
      {
#ifdef OCCUPANCY_SUPPORT
      // Update occupancy status (fresh for target recomputation) at a fixed rate.
      Occupancy.read();
    1eb8:	82 e1       	ldi	r24, 0x12	; 18
    1eba:	92 e0       	ldi	r25, 0x02	; 2
    1ebc:	0e 94 19 04 	call	0x832	; 0x832 <OccupancyTracker::read()>

    // Force a read/poll/recomputation of the target position and call for heat.
    // Sets/clears changed flag if computed valve position changed.
    // Call at a fixed rate (1/60s).
    // Potentially expensive/slow.
    virtual uint8_t read() { computeCallForHeat(); return(value); }
    1ec0:	89 e1       	ldi	r24, 0x19	; 25
    1ec2:	92 e0       	ldi	r25, 0x02	; 2
    1ec4:	0e 94 45 0c 	call	0x188a	; 0x188a <ModelledRadValve::computeCallForHeat()>
    1ec8:	80 91 1b 02 	lds	r24, 0x021B

#if defined(USE_MODULE_FHT8VSIMPLE)
      // If there was a change in target valve position,
      // or periodically in the minute after all sensors should have been read,
      // precompute some or all of any outgoing frame/stats/etc ready for the next transmission.
      if(NominalRadValve.isValveMoved() ||
    1ecc:	80 91 27 02 	lds	r24, 0x0227
    1ed0:	88 23       	and	r24, r24
    1ed2:	31 f4       	brne	.+12     	; 0x1ee0 <loopOpenTRV()+0x5a8>
    1ed4:	77 20       	and	r7, r7
    1ed6:	51 f0       	breq	.+20     	; 0x1eec <loopOpenTRV()+0x5b4>
    1ed8:	0e 94 65 16 	call	0x2cca	; 0x2cca <enableTrailingStatsPayload()>
    1edc:	88 23       	and	r24, r24
    1ede:	31 f0       	breq	.+12     	; 0x1eec <loopOpenTRV()+0x5b4>
         (minute1From4AfterSensors && enableTrailingStatsPayload()))
        {
        if(localFHT8VTRVEnabled()) { FHT8VCreateValveSetCmdFrame(); }
    1ee0:	0e 94 45 11 	call	0x228a	; 0x228a <localFHT8VTRVEnabled()>
    1ee4:	88 23       	and	r24, r24
    1ee6:	11 f0       	breq	.+4      	; 0x1eec <loopOpenTRV()+0x5b4>
    1ee8:	0e 94 14 15 	call	0x2a28	; 0x2a28 <FHT8VCreateValveSetCmdFrame()>
        }
#endif

#if defined(ENABLE_BOILER_HUB)
      // Track how long since remote call for heat last heard.
      if(hubMode)
    1eec:	cc 20       	and	r12, r12
    1eee:	b1 f0       	breq	.+44     	; 0x1f1c <loopOpenTRV()+0x5e4>
        {
        if(boilerCountdownTicks != 0)
    1ef0:	80 91 41 02 	lds	r24, 0x0241
    1ef4:	90 91 42 02 	lds	r25, 0x0242
    1ef8:	89 2b       	or	r24, r25
    1efa:	81 f0       	breq	.+32     	; 0x1f1c <loopOpenTRV()+0x5e4>
          {
#if 1 && defined(DEBUG)
          DEBUG_SERIAL_PRINT_FLASHSTRING("Boiler on, s: ");
    1efc:	8d e7       	ldi	r24, 0x7D	; 125
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <serialPrintAndFlush(__FlashStringHelper const*)>
          DEBUG_SERIAL_PRINT(boilerCountdownTicks * MAIN_TICK_S);
    1f04:	80 91 41 02 	lds	r24, 0x0241
    1f08:	90 91 42 02 	lds	r25, 0x0242
    1f0c:	88 0f       	add	r24, r24
    1f0e:	99 1f       	adc	r25, r25
    1f10:	6a e0       	ldi	r22, 0x0A	; 10
    1f12:	70 e0       	ldi	r23, 0x00	; 0
    1f14:	0e 94 8b 26 	call	0x4d16	; 0x4d16 <serialPrintAndFlush(unsigned int, int)>
          DEBUG_SERIAL_PRINTLN();
    1f18:	0e 94 bb 26 	call	0x4d76	; 0x4d76 <serialPrintlnAndFlush()>
          }
        }
#endif

      // Show current status if appropriate.
      if(runAll) { showStatus = true; }
    1f1c:	11 23       	and	r17, r17
    1f1e:	b1 f0       	breq	.+44     	; 0x1f4c <loopOpenTRV()+0x614>
    1f20:	ee 24       	eor	r14, r14
    1f22:	e3 94       	inc	r14
    1f24:	13 c0       	rjmp	.+38     	; 0x1f4c <loopOpenTRV()+0x614>
    case 58:
      {
      // Take full stats sample as near the end of the hour as reasonably possible (without danger of overrun),
      // and with other optional non-full samples evenly spaced throughout the hour (if not low on battery).
      // A small even number of samples (or 1 sample) is probably most efficient.
      if(minute0From4ForSensors) // Use lowest-noise samples just taken in the special 0 minute out of each 4.
    1f26:	99 20       	and	r9, r9
    1f28:	89 f0       	breq	.+34     	; 0x1f4c <loopOpenTRV()+0x614>
        {
        const uint_least8_t mm = getMinutesLT();
    1f2a:	0e 94 3c 24 	call	0x4878	; 0x4878 <getMinutesLT()>
        switch(mm)
    1f2e:	8a 31       	cpi	r24, 0x1A	; 26
    1f30:	68 f0       	brcs	.+26     	; 0x1f4c <loopOpenTRV()+0x614>
    1f32:	8e 31       	cpi	r24, 0x1E	; 30
    1f34:	20 f0       	brcs	.+8      	; 0x1f3e <loopOpenTRV()+0x606>
    1f36:	88 53       	subi	r24, 0x38	; 56
    1f38:	84 30       	cpi	r24, 0x04	; 4
    1f3a:	40 f4       	brcc	.+16     	; 0x1f4c <loopOpenTRV()+0x614>
    1f3c:	04 c0       	rjmp	.+8      	; 0x1f46 <loopOpenTRV()+0x60e>
          {
          case 26: case 27: case 28: case 29:
            { if(!batteryLow) { sampleStats(false); } break; } // Skip sub-samples if short of energy.
    1f3e:	aa 20       	and	r10, r10
    1f40:	29 f4       	brne	.+10     	; 0x1f4c <loopOpenTRV()+0x614>
    1f42:	80 e0       	ldi	r24, 0x00	; 0
    1f44:	01 c0       	rjmp	.+2      	; 0x1f48 <loopOpenTRV()+0x610>
          case 56: case 57: case 58: case 59:
            { sampleStats(true); break; } // Always take the full sample at the end of each hour.
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	0e 94 25 0a 	call	0x144a	; 0x144a <sampleStats(bool)>
      break;
      }
    }

#if defined(USE_MODULE_FHT8VSIMPLE) && defined(TWO_S_TICK_RTC_SUPPORT)
  if(useExtraFHT8VTXSlots)
    1f4c:	00 23       	and	r16, r16
    1f4e:	61 f0       	breq	.+24     	; 0x1f68 <loopOpenTRV()+0x630>
    {
    // ---------- HALF SECOND #2 -----------
    useExtraFHT8VTXSlots = localFHT8VTRVEnabled() && FHT8VPollSyncAndTX_Next(doubleTXForFTH8V); 
    1f50:	0e 94 45 11 	call	0x228a	; 0x228a <localFHT8VTRVEnabled()>
    1f54:	88 23       	and	r24, r24
    1f56:	39 f0       	breq	.+14     	; 0x1f66 <loopOpenTRV()+0x62e>
    1f58:	8f 2d       	mov	r24, r15
    1f5a:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <FHT8VPollSyncAndTX_Next(bool)>
    1f5e:	88 23       	and	r24, r24
    1f60:	11 f0       	breq	.+4      	; 0x1f66 <loopOpenTRV()+0x62e>
    1f62:	01 e0       	ldi	r16, 0x01	; 1
    1f64:	01 c0       	rjmp	.+2      	; 0x1f68 <loopOpenTRV()+0x630>
    1f66:	00 e0       	ldi	r16, 0x00	; 0
//    if(useExtraFHT8VTXSlots) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("ES@2"); }
    }
#endif

  // Generate periodic status reports.
  if(showStatus) { serialStatusReport(); }
    1f68:	ee 20       	and	r14, r14
    1f6a:	11 f0       	breq	.+4      	; 0x1f70 <loopOpenTRV()+0x638>
    1f6c:	0e 94 7b 28 	call	0x50f6	; 0x50f6 <serialStatusReport()>

#if defined(USE_MODULE_FHT8VSIMPLE) && defined(TWO_S_TICK_RTC_SUPPORT)
  if(useExtraFHT8VTXSlots)
    1f70:	00 23       	and	r16, r16
    1f72:	39 f0       	breq	.+14     	; 0x1f82 <loopOpenTRV()+0x64a>
    {
    // ---------- HALF SECOND #3 -----------
    useExtraFHT8VTXSlots = localFHT8VTRVEnabled() && FHT8VPollSyncAndTX_Next(doubleTXForFTH8V); 
    1f74:	0e 94 45 11 	call	0x228a	; 0x228a <localFHT8VTRVEnabled()>
    1f78:	88 23       	and	r24, r24
    1f7a:	19 f0       	breq	.+6      	; 0x1f82 <loopOpenTRV()+0x64a>
    1f7c:	8f 2d       	mov	r24, r15
    1f7e:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <FHT8VPollSyncAndTX_Next(bool)>
  // AND the CLI is / should be active OR a status line has just been output
  // then poll/prompt the user for input
  // using a timeout which should safely avoid overrun, ie missing the next basic tick,
  // and which should also allow some energy-saving sleep.
#if 1 && defined(SUPPORT_CLI)
  const bool humanCLIUse = isCLIActive(); // Keeping CLI active for human interaction rather than for automated interaction.
    1f82:	0e 94 2d 27 	call	0x4e5a	; 0x4e5a <isCLIActive()>
    1f86:	98 2f       	mov	r25, r24
  if(showStatus || humanCLIUse)
    1f88:	ee 20       	and	r14, r14
    1f8a:	11 f4       	brne	.+4      	; 0x1f90 <loopOpenTRV()+0x658>
    1f8c:	88 23       	and	r24, r24
    1f8e:	59 f0       	breq	.+22     	; 0x1fa6 <loopOpenTRV()+0x66e>
    {
    const uint8_t sct = getSubCycleTime();
    1f90:	80 91 b2 00 	lds	r24, 0x00B2
    const uint8_t listenTime = max(GSCT_MAX/16, CLI_POLL_MIN_SCT);
    if(sct < (GSCT_MAX - 2*listenTime))
    1f94:	8d 3c       	cpi	r24, 0xCD	; 205
    1f96:	38 f4       	brcc	.+14     	; 0x1fa6 <loopOpenTRV()+0x66e>
      // Don't listen beyond the last 16th of the cycle,
      // or a minimal time if only prodding for interaction with automated front-end,
      // as listening for UART RX uses lots of power.
      { pollCLI(humanCLIUse ? (GSCT_MAX-listenTime) : (sct+CLI_POLL_MIN_SCT)); }
    1f98:	99 23       	and	r25, r25
    1f9a:	11 f0       	breq	.+4      	; 0x1fa0 <loopOpenTRV()+0x668>
    1f9c:	86 ee       	ldi	r24, 0xE6	; 230
    1f9e:	01 c0       	rjmp	.+2      	; 0x1fa2 <loopOpenTRV()+0x66a>
    1fa0:	87 5e       	subi	r24, 0xE7	; 231
    1fa2:	0e 94 97 2a 	call	0x552e	; 0x552e <pollCLI(unsigned char)>
    DEBUG_SERIAL_PRINTLN();
    }
#endif

  // Detect and handle (actual or near) overrun, if it happens, though it should not.
  if(TIME_LSD != getSecondsLT())
    1fa6:	90 91 70 03 	lds	r25, 0x0370
    1faa:	80 91 3f 02 	lds	r24, 0x023F
    1fae:	89 17       	cp	r24, r25
    1fb0:	91 f1       	breq	.+100    	; 0x2016 <loopOpenTRV()+0x6de>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1fb2:	f9 99       	sbic	0x1f, 1	; 31
    1fb4:	fe cf       	rjmp	.-4      	; 0x1fb2 <loopOpenTRV()+0x67a>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1fb6:	8d e1       	ldi	r24, 0x1D	; 29
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	92 bd       	out	0x22, r25	; 34
    1fbc:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1fbe:	f8 9a       	sbi	0x1f, 0	; 31
    1fc0:	60 b5       	in	r22, 0x20	; 32
    {
    // Increment the overrun counter (stored inverted, so 0xff initialised => 0 overruns).
    const uint8_t orc = 1 + ~eeprom_read_byte((uint8_t *)EE_START_OVERRUN_COUNTER);
    eeprom_smart_update_byte((uint8_t *)EE_START_OVERRUN_COUNTER, ~orc);
    1fc2:	61 50       	subi	r22, 0x01	; 1
    1fc4:	0e 94 49 10 	call	0x2092	; 0x2092 <eeprom_smart_update_byte(unsigned char*, unsigned char)>
#if 1 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("!ERROR: loop overrun");
    1fc8:	88 e6       	ldi	r24, 0x68	; 104
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	0e 94 13 27 	call	0x4e26	; 0x4e26 <serialPrintlnAndFlush(__FlashStringHelper const*)>
//    DEBUG_SERIAL_PRINT(orc);
//    DEBUG_SERIAL_PRINTLN();
#endif
#if defined(USE_MODULE_FHT8VSIMPLE)
    FHT8VSyncAndTXReset(); // Assume that sync with valve may have been lost, so re-sync.
    1fd0:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <FHT8VSyncAndTXReset()>
#endif
    TIME_LSD = getSecondsLT(); // Prepare to sleep until start of next full minor cycle.
    1fd4:	80 91 70 03 	lds	r24, 0x0370
    1fd8:	80 93 3f 02 	sts	0x023F, r24
    1fdc:	1c c0       	rjmp	.+56     	; 0x2016 <loopOpenTRV()+0x6de>
    // Optimisation: if just heard a call need not listen on this next cycle.
    // Optimisation: if boiler timeout is a long time away (>> one FHT8V TX cycle, ~2 minutes excl quiet minute), then can avoid listening for now.
    //    Longish period without any RX listening may allow hub unit to cool and get better sample of local temperature if marginal.
    // Aim to listen in one stretch for greater than full FHT8V TX cycle of ~2m to avoid missing a call for heat.
    // MUST listen for all of final 2 mins of boiler-on to avoid missing TX (without forcing boiler over-run).
    else if((boilerCountdownTicks <= ((MAX_FHT8V_TX_CYCLE_HS+1)/(2*MAIN_TICK_S))) && // Don't miss a final TX that would keep the boiler on...
    1fde:	20 91 41 02 	lds	r18, 0x0241
    1fe2:	30 91 42 02 	lds	r19, 0x0242
    1fe6:	c9 01       	movw	r24, r18
    1fe8:	01 97       	sbiw	r24, 0x01	; 1
    1fea:	cb 97       	sbiw	r24, 0x3b	; 59
    1fec:	08 f0       	brcs	.+2      	; 0x1ff0 <loopOpenTRV()+0x6b8>
    1fee:	11 ce       	rjmp	.-990    	; 0x1c12 <loopOpenTRV()+0x2da>
#if defined(USE_MODULE_FHT8VSIMPLE)
  // Act on eavesdropping need, setting up or clearing down hooks as required.
  if(needsToEavesdrop)
    {
    // Ensure radio is in RX mode rather than standby, and possibly hook up interrupts if available (REV1 board).
    const bool startedRX = SetupToEavesdropOnFHT8V(second0); // Start listening (if not already so).
    1ff0:	8b 2d       	mov	r24, r11
    1ff2:	0e 94 9e 11 	call	0x233c	; 0x233c <SetupToEavesdropOnFHT8V(bool)>
#if 0 && defined(DEBUG)
    if(startedRX) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("STARTED eavesdropping"); }
#endif
#if 1 && defined(DEBUG)
    const uint16_t dropped = getInboundStatsQueueOverrun();
    1ff6:	0e 94 5d 16 	call	0x2cba	; 0x2cba <getInboundStatsQueueOverrun()>
    1ffa:	8c 01       	movw	r16, r24
    static uint16_t oldDropped;
    if(dropped != oldDropped)
    1ffc:	80 91 45 02 	lds	r24, 0x0245
    2000:	90 91 46 02 	lds	r25, 0x0246
    2004:	08 17       	cp	r16, r24
    2006:	19 07       	cpc	r17, r25
    2008:	09 f0       	breq	.+2      	; 0x200c <loopOpenTRV()+0x6d4>
    200a:	12 ce       	rjmp	.-988    	; 0x1c30 <loopOpenTRV()+0x2f8>
    200c:	20 ce       	rjmp	.-960    	; 0x1c4e <loopOpenTRV()+0x316>
      // We should possibly choose between this and piggybacking stats to avoid busting duty-cycle rules.
      if(localFHT8VTRVEnabled() && useExtraFHT8VTXSlots) { break; }
#endif

      // Generally only attempt stats TX in the minute after all sensors should have been polled (so that readings are fresh).
      if(minute1From4AfterSensors ||
    200e:	77 20       	and	r7, r7
    2010:	09 f0       	breq	.+2      	; 0x2014 <loopOpenTRV()+0x6dc>
    2012:	02 cf       	rjmp	.-508    	; 0x1e18 <loopOpenTRV()+0x4e0>
    2014:	f9 ce       	rjmp	.-526    	; 0x1e08 <loopOpenTRV()+0x4d0>
  else if(getSubCycleTime() >= nearOverrunThreshold)
    {
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("?O"); // Near overrun.  Note 2ms/char to send...
    }
#endif
  }
    2016:	ef 96       	adiw	r28, 0x3f	; 63
    2018:	0f b6       	in	r0, 0x3f	; 63
    201a:	f8 94       	cli
    201c:	de bf       	out	0x3e, r29	; 62
    201e:	0f be       	out	0x3f, r0	; 63
    2020:	cd bf       	out	0x3d, r28	; 61
    2022:	cf 91       	pop	r28
    2024:	df 91       	pop	r29
    2026:	1f 91       	pop	r17
    2028:	0f 91       	pop	r16
    202a:	ff 90       	pop	r15
    202c:	ef 90       	pop	r14
    202e:	df 90       	pop	r13
    2030:	cf 90       	pop	r12
    2032:	bf 90       	pop	r11
    2034:	af 90       	pop	r10
    2036:	9f 90       	pop	r9
    2038:	8f 90       	pop	r8
    203a:	7f 90       	pop	r7
    203c:	08 95       	ret

0000203e <eeprom_smart_erase_byte(unsigned char*)>:
// If the target byte is already 0xff then this does nothing at all beyond an initial read.
// This saves a bit of time and power and possibly a little EEPROM cell wear also.
// Without split erase/write this degenerates to a specialised eeprom_update_byte().
// As with the AVR eeprom_XXX_byte() macros, not safe to use outside and within ISRs as-is.
// Returns true iff an erase was performed.
bool eeprom_smart_erase_byte(uint8_t *p)
    203e:	9c 01       	movw	r18, r24
  eeprom_write_byte(p, 0xff); // Set to 0xff.
  return(true); // Performed an erase (and probably a write, too).
#else

  // Wait until EEPROM is idle/ready.
  eeprom_busy_wait();
    2040:	f9 99       	sbic	0x1f, 1	; 31
    2042:	fe cf       	rjmp	.-4      	; 0x2040 <eeprom_smart_erase_byte(unsigned char*)+0x2>
  //     if((uint8_t) 0xff == eeprom_read_byte(p)) { return; }
  // but leaves EEAR[L] set up appropriately for any erase or write.
#if E2END <= 0xFF
  EEARL = (uint8_t)p;
#else
  EEAR = (uint16_t)p;
    2044:	32 bd       	out	0x22, r19	; 34
    2046:	21 bd       	out	0x21, r18	; 33
#endif
  // Ignore problems that some AVRs have with EECR and STS instructions (ATmega64 errata).
  EECR = _BV(EERE); // Start EEPROM read operation.
    2048:	81 e0       	ldi	r24, 0x01	; 1
    204a:	8f bb       	out	0x1f, r24	; 31
  const uint8_t oldValue = EEDR; // Get old EEPROM value.
    204c:	80 b5       	in	r24, 0x20	; 32
  if((uint8_t) 0xff != oldValue) // Needs erase...
    204e:	8f 3f       	cpi	r24, 0xFF	; 255
    2050:	11 f4       	brne	.+4      	; 0x2056 <eeprom_smart_erase_byte(unsigned char*)+0x18>
    2052:	80 e0       	ldi	r24, 0x00	; 0
    2054:	08 95       	ret
    {
    ATOMIC_BLOCK (ATOMIC_RESTORESTATE) // Avoid timing problems from interrupts.
    2056:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2058:	f8 94       	cli
      {
      // Erase to 0xff; no write needed.
      EECR = _BV(EEMPE) | _BV(EEPM0); // Set master write-enable bit and erase-only mode.
    205a:	84 e1       	ldi	r24, 0x14	; 20
    205c:	8f bb       	out	0x1f, r24	; 31
      EECR |= _BV(EEPE);  // Start erase-only operation.
    205e:	f9 9a       	sbi	0x1f, 1	; 31
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2060:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    2062:	81 e0       	ldi	r24, 0x01	; 1
      }
    return(true); // Performed the erase.
    }
  return(false);
#endif
  }
    2064:	08 95       	ret

00002066 <eeprom_smart_clear_bits(unsigned char*, unsigned char)>:
// If ANDing in the mask has no effect then this does nothing at all beyond an initial read.
// This saves a bit of time and power and possibly a little EEPROM cell wear also.
// Without split erase/write this degenerates to a specialised eeprom_smart_update_byte().
// As with the AVR eeprom_XXX_byte() macros, not safe to use outside and within ISRs as-is.
// Returns true iff a write was performed.
bool eeprom_smart_clear_bits(uint8_t *p, uint8_t mask)
    2066:	9c 01       	movw	r18, r24
  eeprom_write_byte(p, newValue); // Set to masked value.
  return(true); // Performed a write (and probably an erase, too).
#else

  // Wait until EEPROM is idle/ready.
  eeprom_busy_wait();
    2068:	f9 99       	sbic	0x1f, 1	; 31
    206a:	fe cf       	rjmp	.-4      	; 0x2068 <eeprom_smart_clear_bits(unsigned char*, unsigned char)+0x2>
  //     oldValue = eeprom_read_byte(p);
  // and leaves EEAR[L] set up appropriately for any erase or write.
#if E2END <= 0xFF
  EEARL = (uint8_t)p;
#else
  EEAR = (uint16_t)p;
    206c:	32 bd       	out	0x22, r19	; 34
    206e:	21 bd       	out	0x21, r18	; 33
#endif
  // Ignore problems that some AVRs have with EECR and STS instructions (ATmega64 errata).
  EECR = _BV(EERE); // Start EEPROM read operation.
    2070:	81 e0       	ldi	r24, 0x01	; 1
    2072:	8f bb       	out	0x1f, r24	; 31
  const uint8_t oldValue = EEDR; // Get old EEPROM value.
    2074:	80 b5       	in	r24, 0x20	; 32
  const uint8_t newValue = oldValue & mask;
    2076:	68 23       	and	r22, r24
  if(oldValue != newValue) // Write is needed...
    2078:	86 17       	cp	r24, r22
    207a:	11 f4       	brne	.+4      	; 0x2080 <eeprom_smart_clear_bits(unsigned char*, unsigned char)+0x1a>
    207c:	80 e0       	ldi	r24, 0x00	; 0
    207e:	08 95       	ret
    {
    // Do the write: no erase is needed.
    EEDR = newValue; // Set EEPROM data register to required new value.
    2080:	60 bd       	out	0x20, r22	; 32
    ATOMIC_BLOCK (ATOMIC_RESTORESTATE) // Avoid timing problems from interrupts.
    2082:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2084:	f8 94       	cli
      {
      EECR = _BV(EEMPE) | _BV(EEPM1); // Set master write-enable bit and write-only mode.
    2086:	84 e2       	ldi	r24, 0x24	; 36
    2088:	8f bb       	out	0x1f, r24	; 31
      EECR |= _BV(EEPE);  // Start write-only operation.
    208a:	f9 9a       	sbi	0x1f, 1	; 31
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    208c:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    208e:	81 e0       	ldi	r24, 0x01	; 1
      }
    return(true); // Performed the write.
    }
  return(false);
#endif
  }
    2090:	08 95       	ret

00002092 <eeprom_smart_update_byte(unsigned char*, unsigned char)>:
// Updates an EEEPROM byte iff not currently at the specified target value.
// May be able to selectively erase or write (ie reduce wear) to reach the desired value.
// As with the AVR eeprom_XXX_byte() macros, not safe to use outside and within ISRs as-is.
// Returns true iff an erase and/or write was performed.
// TODO: make smarter, eg don't wait/read twice...
bool eeprom_smart_update_byte(uint8_t *p, uint8_t value)
    2092:	78 2f       	mov	r23, r24
    2094:	e9 2f       	mov	r30, r25
  {
  // If target byte is 0xff then attempt smart erase rather than more generic write or erase+write.
  if((uint8_t) 0xff == value) { return(eeprom_smart_erase_byte(p)); }
    2096:	6f 3f       	cpi	r22, 0xFF	; 255
    2098:	19 f4       	brne	.+6      	; 0x20a0 <eeprom_smart_update_byte(unsigned char*, unsigned char)+0xe>
    209a:	0e 94 1f 10 	call	0x203e	; 0x203e <eeprom_smart_erase_byte(unsigned char*)>
    209e:	08 95       	ret
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    20a0:	f9 99       	sbic	0x1f, 1	; 31
    20a2:	fe cf       	rjmp	.-4      	; 0x20a0 <eeprom_smart_update_byte(unsigned char*, unsigned char)+0xe>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    20a4:	47 2f       	mov	r20, r23
    20a6:	5e 2f       	mov	r21, r30
    20a8:	52 bd       	out	0x22, r21	; 34
    20aa:	41 bd       	out	0x21, r20	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    20ac:	f8 9a       	sbi	0x1f, 0	; 31
    20ae:	80 b5       	in	r24, 0x20	; 32
  // More than an erase might be required...
  const uint8_t oldValue = eeprom_read_byte(p);
  if(value == oldValue) { return(false); } // No change needed.
    20b0:	68 17       	cp	r22, r24
    20b2:	11 f4       	brne	.+4      	; 0x20b8 <eeprom_smart_update_byte(unsigned char*, unsigned char)+0x26>
    20b4:	80 e0       	ldi	r24, 0x00	; 0
    20b6:	08 95       	ret
#ifdef EEPROM_SPLIT_ERASE_WRITE // Can do selective write.
  if(value == (value & oldValue)) { return(eeprom_smart_clear_bits(p, value)); } // Can use pure write to clear bits to zero.
    20b8:	26 2f       	mov	r18, r22
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	82 23       	and	r24, r18
    20c0:	93 23       	and	r25, r19
    20c2:	28 17       	cp	r18, r24
    20c4:	39 07       	cpc	r19, r25
    20c6:	29 f4       	brne	.+10     	; 0x20d2 <eeprom_smart_update_byte(unsigned char*, unsigned char)+0x40>
    20c8:	87 2f       	mov	r24, r23
    20ca:	9e 2f       	mov	r25, r30
    20cc:	0e 94 33 10 	call	0x2066	; 0x2066 <eeprom_smart_clear_bits(unsigned char*, unsigned char)>
    20d0:	08 95       	ret
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    20d2:	f9 99       	sbic	0x1f, 1	; 31
    20d4:	fe cf       	rjmp	.-4      	; 0x20d2 <eeprom_smart_update_byte(unsigned char*, unsigned char)+0x40>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    20d6:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    20d8:	52 bd       	out	0x22, r21	; 34
    20da:	41 bd       	out	0x21, r20	; 33
#endif
    EEDR = __value;
    20dc:	60 bd       	out	0x20, r22	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    20de:	0f b6       	in	r0, 0x3f	; 63
    20e0:	f8 94       	cli
    20e2:	fa 9a       	sbi	0x1f, 2	; 31
    20e4:	f9 9a       	sbi	0x1f, 1	; 31
    20e6:	0f be       	out	0x3f, r0	; 63
    20e8:	81 e0       	ldi	r24, 0x01	; 1
#endif
  eeprom_write_byte(p, value); // Needs to set some (but not all) bits to 1, so needs erase and write.
  return(true); // Performed an update.
  }
    20ea:	08 95       	ret

000020ec <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>:
// bptr must be pointing at the current byte to update on entry which must start off as 0xff;
// this will write the byte and increment bptr (and write 0xff to the new location) if one is filled up.
// Partial byte can only have even number of bits present, ie be in one of 4 states.
// Two least significant bits used to indicate how many bit pairs are still to be filled,
// so initial 0xff value (which is never a valid complete filled byte) indicates 'empty'.
static uint8_t *_FHT8VCreate200usAppendEncBit(uint8_t *bptr, const bool is1)
    20ec:	fc 01       	movw	r30, r24
  {
  const uint8_t bitPairsLeft = (*bptr) & 3; // Find out how many bit pairs are left to fill in the current byte.
    20ee:	80 81       	ld	r24, Z
    20f0:	98 2f       	mov	r25, r24
    20f2:	93 70       	andi	r25, 0x03	; 3
  if(!is1) // Appending 1100.
    20f4:	66 23       	and	r22, r22
    20f6:	b1 f4       	brne	.+44     	; 0x2124 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x38>
    {
    switch(bitPairsLeft)
    20f8:	92 30       	cpi	r25, 0x02	; 2
    20fa:	51 f0       	breq	.+20     	; 0x2110 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x24>
    20fc:	93 30       	cpi	r25, 0x03	; 3
    20fe:	31 f0       	breq	.+12     	; 0x210c <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x20>
    2100:	9f 01       	movw	r18, r30
    2102:	2f 5f       	subi	r18, 0xFF	; 255
    2104:	3f 4f       	sbci	r19, 0xFF	; 255
    2106:	91 30       	cpi	r25, 0x01	; 1
    2108:	59 f4       	brne	.+22     	; 0x2120 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x34>
    210a:	05 c0       	rjmp	.+10     	; 0x2116 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x2a>
      {
      case 3: // Empty target byte (should be 0xff currently).
        *bptr = 0xcd; // %11001101 Write back partial byte (msbits now 1100 and two bit pairs remain free).
    210c:	8d ec       	ldi	r24, 0xCD	; 205
    210e:	25 c0       	rjmp	.+74     	; 0x215a <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      case 2: // Top bit pair already filled.
        *bptr = (*bptr & 0xc0) | 0x30; // Preserve existing ms bit-pair, set middle four bits 1100, one bit pair remains free.
    2110:	80 7c       	andi	r24, 0xC0	; 192
    2112:	80 63       	ori	r24, 0x30	; 48
    2114:	22 c0       	rjmp	.+68     	; 0x215a <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      case 1: // Top two bit pairs already filled.
        *bptr = (*bptr & 0xf0) | 0xc; // Preserve existing ms (2) bit-pairs, set bottom four bits 1100, write back full byte.
    2116:	80 7f       	andi	r24, 0xF0	; 240
    2118:	8c 60       	ori	r24, 0x0C	; 12
    211a:	80 83       	st	Z, r24
        *++bptr = (uint8_t) ~0U; // Initialise next byte for next incremental update.
    211c:	f9 01       	movw	r30, r18
    211e:	11 c0       	rjmp	.+34     	; 0x2142 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x56>
        break;
      default: // Top three bit pairs already filled.
        *bptr |= 3; // Preserve existing ms (3) bit-pairs, OR in leading 11 bits, write back full byte.
    2120:	83 60       	ori	r24, 0x03	; 3
    2122:	13 c0       	rjmp	.+38     	; 0x214a <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x5e>
        break;
      }
    }
  else // Appending 111000.
    {
    switch(bitPairsLeft)
    2124:	92 30       	cpi	r25, 0x02	; 2
    2126:	51 f0       	breq	.+20     	; 0x213c <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x50>
    2128:	93 30       	cpi	r25, 0x03	; 3
    212a:	31 f0       	breq	.+12     	; 0x2138 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x4c>
    212c:	9f 01       	movw	r18, r30
    212e:	2f 5f       	subi	r18, 0xFF	; 255
    2130:	3f 4f       	sbci	r19, 0xFF	; 255
    2132:	91 30       	cpi	r25, 0x01	; 1
    2134:	71 f4       	brne	.+28     	; 0x2152 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x66>
    2136:	07 c0       	rjmp	.+14     	; 0x2146 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x5a>
      {
      case 3: // Empty target byte (should be 0xff currently).
        *bptr = 0xe0; // %11100000 Write back partial byte (msbits now 111000 and one bit pair remains free).
    2138:	80 ee       	ldi	r24, 0xE0	; 224
    213a:	0f c0       	rjmp	.+30     	; 0x215a <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      case 2: // Top bit pair already filled.
        *bptr = (*bptr & 0xc0) | 0x38; // Preserve existing ms bit-pair, set lsbits to 111000, write back full byte.
    213c:	80 7c       	andi	r24, 0xC0	; 192
    213e:	88 63       	ori	r24, 0x38	; 56
    2140:	81 93       	st	Z+, r24
        *++bptr = (uint8_t) ~0U; // Initialise next byte for next incremental update.
    2142:	8f ef       	ldi	r24, 0xFF	; 255
    2144:	0a c0       	rjmp	.+20     	; 0x215a <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      case 1: // Top two bit pairs already filled.
        *bptr = (*bptr & 0xf0) | 0xe; // Preserve existing (2) ms bit-pairs, set bottom four bits to 1110, write back full byte.
    2146:	80 7f       	andi	r24, 0xF0	; 240
    2148:	8e 60       	ori	r24, 0x0E	; 14
    214a:	80 83       	st	Z, r24
        *++bptr = 0x3e; // %00111110 Write trailing 00 bits to next byte and indicate 3 bit-pairs free for next incremental update.
    214c:	f9 01       	movw	r30, r18
    214e:	8e e3       	ldi	r24, 0x3E	; 62
    2150:	04 c0       	rjmp	.+8      	; 0x215a <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      default: // Top three bit pairs already filled.
        *bptr |= 3; // Preserve existing ms (3) bit-pairs, OR in leading 11 bits, write back full byte.
    2152:	83 60       	ori	r24, 0x03	; 3
    2154:	80 83       	st	Z, r24
        *++bptr = 0x8d; // Write trailing 1000 bits to next byte and indicate 2 bit-pairs free for next incremental update.
    2156:	f9 01       	movw	r30, r18
    2158:	8d e8       	ldi	r24, 0x8D	; 141
    215a:	80 83       	st	Z, r24
        break;
      }
    }
  return(bptr);
  }
    215c:	cf 01       	movw	r24, r30
    215e:	08 95       	ret

00002160 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>:

// Appends encoded byte in b msbit first plus trailing even parity bit (9 bits total)
// to the byte stream being created by FHT8VCreate200usBitStreamBptr.
static uint8_t *_FHT8VCreate200usAppendByteEP(uint8_t *bptr, const uint8_t b)
    2160:	ef 92       	push	r14
    2162:	ff 92       	push	r15
    2164:	0f 93       	push	r16
    2166:	1f 93       	push	r17
    2168:	cf 93       	push	r28
    216a:	df 93       	push	r29
    216c:	9c 01       	movw	r18, r24
    216e:	16 2f       	mov	r17, r22
    2170:	00 e8       	ldi	r16, 0x80	; 128
    2172:	c0 e0       	ldi	r28, 0x00	; 0
    2174:	d0 e0       	ldi	r29, 0x00	; 0
  {
  for(uint8_t mask = 0x80; mask != 0; mask >>= 1)
    { bptr = _FHT8VCreate200usAppendEncBit(bptr, 0 != (b & mask)); }
    2176:	e6 2e       	mov	r14, r22
    2178:	ff 24       	eor	r15, r15
    217a:	60 e0       	ldi	r22, 0x00	; 0
    217c:	80 2f       	mov	r24, r16
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	8e 21       	and	r24, r14
    2182:	9f 21       	and	r25, r15
    2184:	89 2b       	or	r24, r25
    2186:	09 f0       	breq	.+2      	; 0x218a <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)+0x2a>
    2188:	61 e0       	ldi	r22, 0x01	; 1
    218a:	c9 01       	movw	r24, r18
    218c:	0e 94 76 10 	call	0x20ec	; 0x20ec <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
    2190:	9c 01       	movw	r18, r24

// Appends encoded byte in b msbit first plus trailing even parity bit (9 bits total)
// to the byte stream being created by FHT8VCreate200usBitStreamBptr.
static uint8_t *_FHT8VCreate200usAppendByteEP(uint8_t *bptr, const uint8_t b)
  {
  for(uint8_t mask = 0x80; mask != 0; mask >>= 1)
    2192:	06 95       	lsr	r16
    2194:	21 96       	adiw	r28, 0x01	; 1
    2196:	c8 30       	cpi	r28, 0x08	; 8
    2198:	d1 05       	cpc	r29, r1
    219a:	79 f7       	brne	.-34     	; 0x217a <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)+0x1a>
    { bptr = _FHT8VCreate200usAppendEncBit(bptr, 0 != (b & mask)); }
  return(_FHT8VCreate200usAppendEncBit(bptr, (bool) parity_even_bit(b))); // Append even parity bit.
    219c:	01 2e       	mov	r0, r17
    219e:	12 95       	swap	r17
    21a0:	10 25       	eor	r17, r0
    21a2:	01 2e       	mov	r0, r17
    21a4:	16 95       	lsr	r17
    21a6:	16 95       	lsr	r17
    21a8:	10 25       	eor	r17, r0
    21aa:	61 2f       	mov	r22, r17
    21ac:	70 e0       	ldi	r23, 0x00	; 0
    21ae:	6f 5f       	subi	r22, 0xFF	; 255
    21b0:	7f 4f       	sbci	r23, 0xFF	; 255
    21b2:	76 95       	lsr	r23
    21b4:	67 95       	ror	r22
    21b6:	61 70       	andi	r22, 0x01	; 1
    21b8:	c9 01       	movw	r24, r18
    21ba:	0e 94 76 10 	call	0x20ec	; 0x20ec <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
  }
    21be:	df 91       	pop	r29
    21c0:	cf 91       	pop	r28
    21c2:	1f 91       	pop	r17
    21c4:	0f 91       	pop	r16
    21c6:	ff 90       	pop	r15
    21c8:	ef 90       	pop	r14
    21ca:	08 95       	ret

000021cc <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>:
// On entry the populated FHT8V command struct is passed by pointer.
// On exit, the memory block starting at buffer contains the low-byte, msbit-first bit, 0xff-terminated TX sequence.
// The maximum and minimum possible encoded message sizes are 35 (all zero bytes) and 45 (all 0xff bytes) bytes long.
// Note that a buffer space of at least 46 bytes is needed to accommodate the longest-possible encoded message and terminator.
// Returns pointer to the terminating 0xff on exit.
uint8_t *FHT8VCreate200usBitStreamBptr(uint8_t *bptr, const fht8v_msg_t *command)
    21cc:	ff 92       	push	r15
    21ce:	0f 93       	push	r16
    21d0:	1f 93       	push	r17
    21d2:	dc 01       	movw	r26, r24
    21d4:	8b 01       	movw	r16, r22
  {
  // Generate FHT8V preamble.
  // First 12 x 0 bits of preamble, pre-encoded as 6 x 0xcc bytes.
  *bptr++ = 0xcc;
    21d6:	8c ec       	ldi	r24, 0xCC	; 204
    21d8:	fd 01       	movw	r30, r26
    21da:	81 93       	st	Z+, r24
  *bptr++ = 0xcc;
    21dc:	11 96       	adiw	r26, 0x01	; 1
    21de:	8c 93       	st	X, r24
    21e0:	df 01       	movw	r26, r30
    21e2:	11 96       	adiw	r26, 0x01	; 1
  *bptr++ = 0xcc;
    21e4:	81 83       	std	Z+1, r24	; 0x01
    21e6:	fd 01       	movw	r30, r26
    21e8:	31 96       	adiw	r30, 0x01	; 1
  *bptr++ = 0xcc;
    21ea:	11 96       	adiw	r26, 0x01	; 1
    21ec:	8c 93       	st	X, r24
    21ee:	df 01       	movw	r26, r30
    21f0:	11 96       	adiw	r26, 0x01	; 1
  *bptr++ = 0xcc;
    21f2:	81 83       	std	Z+1, r24	; 0x01
    21f4:	fd 01       	movw	r30, r26
    21f6:	31 96       	adiw	r30, 0x01	; 1
  *bptr++ = 0xcc;
    21f8:	11 96       	adiw	r26, 0x01	; 1
    21fa:	8c 93       	st	X, r24
  *bptr = (uint8_t) ~0U; // Initialise for _FHT8VCreate200usAppendEncBit routine.
    21fc:	ff 24       	eor	r15, r15
    21fe:	fa 94       	dec	r15
    2200:	f1 82       	std	Z+1, r15	; 0x01
  // Push remaining 1 of preamble.
  bptr = _FHT8VCreate200usAppendEncBit(bptr, true); // Encode 1.
    2202:	cf 01       	movw	r24, r30
    2204:	01 96       	adiw	r24, 0x01	; 1
    2206:	61 e0       	ldi	r22, 0x01	; 1
    2208:	0e 94 76 10 	call	0x20ec	; 0x20ec <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>

  // Generate body.
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->hc1);
    220c:	f8 01       	movw	r30, r16
    220e:	60 81       	ld	r22, Z
    2210:	0e 94 b0 10 	call	0x2160	; 0x2160 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->hc2);
    2214:	f8 01       	movw	r30, r16
    2216:	61 81       	ldd	r22, Z+1	; 0x01
    2218:	0e 94 b0 10 	call	0x2160	; 0x2160 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
#ifdef FHT8V_ADR_USED
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->address);
#else
  bptr = _FHT8VCreate200usAppendByteEP(bptr, 0); // Default/broadcast.  TODO: could possibly be further optimised to send 0 value more efficiently.
    221c:	60 e0       	ldi	r22, 0x00	; 0
    221e:	0e 94 b0 10 	call	0x2160	; 0x2160 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
#endif
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->command);
    2222:	f8 01       	movw	r30, r16
    2224:	62 81       	ldd	r22, Z+2	; 0x02
    2226:	0e 94 b0 10 	call	0x2160	; 0x2160 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->extension);
    222a:	f8 01       	movw	r30, r16
    222c:	63 81       	ldd	r22, Z+3	; 0x03
    222e:	0e 94 b0 10 	call	0x2160	; 0x2160 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
#ifdef FHT8V_ADR_USED
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + command->address + command->command + command->extension;
#else
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + command->command + command->extension;
#endif
  bptr = _FHT8VCreate200usAppendByteEP(bptr, checksum);
    2232:	f8 01       	movw	r30, r16
    2234:	60 81       	ld	r22, Z
    2236:	21 81       	ldd	r18, Z+1	; 0x01
    2238:	62 0f       	add	r22, r18
    223a:	64 5f       	subi	r22, 0xF4	; 244
    223c:	22 81       	ldd	r18, Z+2	; 0x02
    223e:	62 0f       	add	r22, r18
    2240:	23 81       	ldd	r18, Z+3	; 0x03
    2242:	62 0f       	add	r22, r18
    2244:	0e 94 b0 10 	call	0x2160	; 0x2160 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>

  // Generate trailer.
  // Append 0 bit for trailer.
  bptr = _FHT8VCreate200usAppendEncBit(bptr, false);
    2248:	60 e0       	ldi	r22, 0x00	; 0
    224a:	0e 94 76 10 	call	0x20ec	; 0x20ec <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
  // Append extra 0 bits to ensure that final required bits are flushed out.
  bptr = _FHT8VCreate200usAppendEncBit(bptr, false);
    224e:	60 e0       	ldi	r22, 0x00	; 0
    2250:	0e 94 76 10 	call	0x20ec	; 0x20ec <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
  bptr = _FHT8VCreate200usAppendEncBit(bptr, false);
    2254:	60 e0       	ldi	r22, 0x00	; 0
    2256:	0e 94 76 10 	call	0x20ec	; 0x20ec <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
    225a:	fc 01       	movw	r30, r24
  *bptr = (uint8_t)0xff; // Terminate TX bytes.
    225c:	f0 82       	st	Z, r15
  return(bptr);
  }
    225e:	1f 91       	pop	r17
    2260:	0f 91       	pop	r16
    2262:	ff 90       	pop	r15
    2264:	08 95       	ret

00002266 <FHT8VGetHC1()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2266:	f9 99       	sbic	0x1f, 1	; 31
    2268:	fe cf       	rjmp	.-4      	; 0x2266 <FHT8VGetHC1()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    226a:	80 e1       	ldi	r24, 0x10	; 16
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	92 bd       	out	0x22, r25	; 34
    2270:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2272:	f8 9a       	sbi	0x1f, 0	; 31
    2274:	80 b5       	in	r24, 0x20	; 32
// Set (non-volatile) HC1 and HC2 for single/primary FHT8V wireless valve under control.
void FHT8VSetHC1(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC1, hc); }
void FHT8VSetHC2(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC2, hc); }

// Get (non-volatile) HC1 and HC2 for single/primary FHT8V wireless valve under control (will be 0xff until set).
uint8_t FHT8VGetHC1() { return(eeprom_read_byte((uint8_t*)EE_START_FHT8V_HC1)); }
    2276:	08 95       	ret

00002278 <FHT8VGetHC2()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2278:	f9 99       	sbic	0x1f, 1	; 31
    227a:	fe cf       	rjmp	.-4      	; 0x2278 <FHT8VGetHC2()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    227c:	81 e1       	ldi	r24, 0x11	; 17
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	92 bd       	out	0x22, r25	; 34
    2282:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2284:	f8 9a       	sbi	0x1f, 0	; 31
    2286:	80 b5       	in	r24, 0x20	; 32
uint8_t FHT8VGetHC2() { return(eeprom_read_byte((uint8_t*)EE_START_FHT8V_HC2)); }
    2288:	08 95       	ret

0000228a <localFHT8VTRVEnabled()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    228a:	f9 99       	sbic	0x1f, 1	; 31
    228c:	fe cf       	rjmp	.-4      	; 0x228a <localFHT8VTRVEnabled()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    228e:	80 e1       	ldi	r24, 0x10	; 16
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	92 bd       	out	0x22, r25	; 34
    2294:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2296:	f8 9a       	sbi	0x1f, 0	; 31
    2298:	80 b5       	in	r24, 0x20	; 32

#ifndef localFHT8VTRVEnabled
// Returns TRV if valve/radiator is to be controlled by this unit.
// Usually the case, but may not be for (a) a hub or (b) a not-yet-configured unit.
// Returns false if house code parts are set to invalid or uninitialised values (>99).
bool localFHT8VTRVEnabled() { return(((FHT8VGetHC1() <= 99) && (FHT8VGetHC2() <= 99))); }
    229a:	84 36       	cpi	r24, 0x64	; 100
    229c:	10 f0       	brcs	.+4      	; 0x22a2 <localFHT8VTRVEnabled()+0x18>
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	0c c0       	rjmp	.+24     	; 0x22ba <localFHT8VTRVEnabled()+0x30>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    22a2:	f9 99       	sbic	0x1f, 1	; 31
    22a4:	fe cf       	rjmp	.-4      	; 0x22a2 <localFHT8VTRVEnabled()+0x18>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    22a6:	81 e1       	ldi	r24, 0x11	; 17
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	92 bd       	out	0x22, r25	; 34
    22ac:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    22ae:	f8 9a       	sbi	0x1f, 0	; 31
    22b0:	80 b5       	in	r24, 0x20	; 32
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	84 36       	cpi	r24, 0x64	; 100
    22b6:	08 f4       	brcc	.+2      	; 0x22ba <localFHT8VTRVEnabled()+0x30>
    22b8:	91 e0       	ldi	r25, 0x01	; 1
    22ba:	89 2f       	mov	r24, r25
    22bc:	08 95       	ret

000022be <isSyncedWithFHT8V()>:
  }

// True once/while this node is synced with and controlling the target FHT8V valve; initially false.
static bool syncedWithFHT8V;
#ifndef IGNORE_FHT_SYNC
bool isSyncedWithFHT8V() { return(syncedWithFHT8V); }
    22be:	80 91 e1 02 	lds	r24, 0x02E1
    22c2:	08 95       	ret

000022c4 <FHT8VisControlledValveOpen()>:
#endif


// True if FHT8V valve is believed to be open under instruction from this system; false if not in sync.
static bool FHT8V_isValveOpen;
bool getFHT8V_isValveOpen() { return(syncedWithFHT8V && FHT8V_isValveOpen); }
    22c4:	80 91 e1 02 	lds	r24, 0x02E1
    22c8:	88 23       	and	r24, r24
    22ca:	21 f0       	breq	.+8      	; 0x22d4 <FHT8VisControlledValveOpen()+0x10>
    22cc:	80 91 20 03 	lds	r24, 0x0320
    22d0:	81 11       	cpse	r24, r1
    22d2:	81 e0       	ldi	r24, 0x01	; 1


// GLOBAL NOTION OF CONTROLLED FHT8V VALVE STATE PROVIDED HERE
// True iff the FHT8V valve(s) (if any) controlled by this unit are really open.
// This waits until at least the command to open the FHT8Vhas been sent.
bool FHT8VisControlledValveOpen() { return(getFHT8V_isValveOpen()); }
    22d4:	08 95       	ret

000022d6 <FHT8VSyncAndTXReset()>:
//   FHT8V_isValveOpen (bit, true if this node has last sent command to open valve)
//   syncStateFHT8V (byte, internal)
//   halfSecondsToNextFHT8VTX (byte).
void FHT8VSyncAndTXReset()
  {
  syncedWithFHT8V = false;
    22d6:	10 92 e1 02 	sts	0x02E1, r1
  syncStateFHT8V = 0;
    22da:	10 92 e3 02 	sts	0x02E3, r1
  halfSecondsToNextFHT8VTX = 0;
    22de:	10 92 e2 02 	sts	0x02E2, r1
  FHT8V_isValveOpen = false;
    22e2:	10 92 20 03 	sts	0x0320, r1
  }
    22e6:	08 95       	ret

000022e8 <FHT8VCallForHeatHeardGetAndClear()>:
  }

// Atomically returns and clears one housecode calling for heat heard since last call, or ~0 if none.
uint16_t FHT8VCallForHeatHeardGetAndClear()
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    22e8:	4f b7       	in	r20, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    22ea:	f8 94       	cli
    {
    const uint16_t result = lastCallForHeatHC;
    22ec:	20 91 39 01 	lds	r18, 0x0139
    22f0:	30 91 3a 01 	lds	r19, 0x013A
    lastCallForHeatHC = ~0;
    22f4:	8f ef       	ldi	r24, 0xFF	; 255
    22f6:	9f ef       	ldi	r25, 0xFF	; 255
    22f8:	90 93 3a 01 	sts	0x013A, r25
    22fc:	80 93 39 01 	sts	0x0139, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2300:	4f bf       	out	0x3f, r20	; 63
    return(result);
    }
    return(~0); // Not reachable.
  }
    2302:	c9 01       	movw	r24, r18
    2304:	08 95       	ret

00002306 <FHT8VLastRXErrGetAndClear()>:

// Atomically returns and clears last (FHT8V) RX error code, or 0 if none.
uint8_t FHT8VLastRXErrGetAndClear()
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    2306:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2308:	f8 94       	cli
    {
    const uint8_t result = lastRXerrno;
    230a:	80 91 a0 02 	lds	r24, 0x02A0
    lastRXerrno = 0;
    230e:	10 92 a0 02 	sts	0x02A0, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2312:	9f bf       	out	0x3f, r25	; 63
    return(result);
    }
  return(0); // Not reachable.
  }
    2314:	08 95       	ret

00002316 <StopEavesdropOnFHT8V(bool)>:
// Stop listening out for remote TRVs calling for heat iff currently eavesdropping, else does nothing.
// Puts radio in standby mode.
// DOES NOT clear flags which indicate that a call for heat has been heard.
void StopEavesdropOnFHT8V(bool force)
  {
  if(!force && !eavesdropping) { return; }
    2316:	88 23       	and	r24, r24
    2318:	21 f4       	brne	.+8      	; 0x2322 <StopEavesdropOnFHT8V(bool)+0xc>
    231a:	80 91 a1 02 	lds	r24, 0x02A1
    231e:	88 23       	and	r24, r24
    2320:	21 f0       	breq	.+8      	; 0x232a <StopEavesdropOnFHT8V(bool)+0x14>
  eavesdropping = false;
    2322:	10 92 a1 02 	sts	0x02A1, r1
  RFM22ModeStandbyAndClearState();
    2326:	0e 94 4b 23 	call	0x4696	; 0x4696 <RFM22ModeStandbyAndClearState()>
    232a:	08 95       	ret

0000232c <_SetupRFM22ToEavesdropOnFHT8V()>:
static void setLastRXErr(const uint8_t err) { ATOMIC_BLOCK (ATOMIC_RESTORESTATE) { lastRXerrno = err; } }


static void _SetupRFM22ToEavesdropOnFHT8V()
  {
  RFM22ModeStandbyAndClearState();
    232c:	0e 94 4b 23 	call	0x4696	; 0x4696 <RFM22ModeStandbyAndClearState()>
  RFM22SetUpRX(MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE, true, true); // Set to RX longest-possible valid FS20 encoded frame.
    2330:	8e e2       	ldi	r24, 0x2E	; 46
    2332:	61 e0       	ldi	r22, 0x01	; 1
    2334:	41 e0       	ldi	r20, 0x01	; 1
    2336:	0e 94 29 22 	call	0x4452	; 0x4452 <RFM22SetUpRX(unsigned char, bool, bool)>
#error Board revision not defined.
#endif
#if V0p2_REV > 0
// TODO: hook into interrupts?
#endif
  }
    233a:	08 95       	ret

0000233c <SetupToEavesdropOnFHT8V(bool)>:

// Set up radio to listen for remote TRV nodes calling for heat iff not already eavesdropping, else does nothing.
// Only done if in central hub mode.
// May set up interrupts/handlers.
// Does NOT clear flags indicating receipt of call for heat for example.
bool SetupToEavesdropOnFHT8V(const bool force)
    233c:	0f 93       	push	r16
    233e:	1f 93       	push	r17
  {
  if(!force && eavesdropping) { return(false); } // Already eavesdropping.
    2340:	88 23       	and	r24, r24
    2342:	41 f4       	brne	.+16     	; 0x2354 <SetupToEavesdropOnFHT8V(bool)+0x18>
    2344:	80 91 a1 02 	lds	r24, 0x02A1
    2348:	88 23       	and	r24, r24
    234a:	21 f0       	breq	.+8      	; 0x2354 <SetupToEavesdropOnFHT8V(bool)+0x18>
    234c:	80 e0       	ldi	r24, 0x00	; 0
  _SetupRFM22ToEavesdropOnFHT8V();
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("RX start");
#endif
  return(!wasEavesdropping);
  }
    234e:	1f 91       	pop	r17
    2350:	0f 91       	pop	r16
    2352:	08 95       	ret
// May set up interrupts/handlers.
// Does NOT clear flags indicating receipt of call for heat for example.
bool SetupToEavesdropOnFHT8V(const bool force)
  {
  if(!force && eavesdropping) { return(false); } // Already eavesdropping.
  const bool wasEavesdropping = eavesdropping;
    2354:	00 91 a1 02 	lds	r16, 0x02A1
  eavesdropping = true;
    2358:	11 e0       	ldi	r17, 0x01	; 1
    235a:	10 93 a1 02 	sts	0x02A1, r17
  _SetupRFM22ToEavesdropOnFHT8V();
    235e:	0e 94 96 11 	call	0x232c	; 0x232c <_SetupRFM22ToEavesdropOnFHT8V()>
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("RX start");
#endif
  return(!wasEavesdropping);
    2362:	80 2f       	mov	r24, r16
    2364:	81 27       	eor	r24, r17
    2366:	f3 cf       	rjmp	.-26     	; 0x234e <SetupToEavesdropOnFHT8V(bool)+0x12>

00002368 <readOneBit(decode_state_t*)>:
  } decode_state_t;

// Decode bit pattern 1100 as 0, 111000 as 1.
// Returns 1 or 0 for the bit decoded, else marks the state as failed.
// Reads two bits at a time, MSB to LSB, advancing the byte pointer if necessary.
static uint8_t readOneBit(decode_state_t *const state)
    2368:	cf 93       	push	r28
    236a:	df 93       	push	r29
    236c:	ec 01       	movw	r28, r24
  {
  if(state->bitStream > state->lastByte) { state->failed = true; } // Stop if off the buffer end.
    236e:	28 81       	ld	r18, Y
    2370:	39 81       	ldd	r19, Y+1	; 0x01
    2372:	8a 81       	ldd	r24, Y+2	; 0x02
    2374:	9b 81       	ldd	r25, Y+3	; 0x03
    2376:	82 17       	cp	r24, r18
    2378:	93 07       	cpc	r25, r19
    237a:	10 f4       	brcc	.+4      	; 0x2380 <readOneBit(decode_state_t*)+0x18>
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	8d 83       	std	Y+5, r24	; 0x05
  if(state->failed) { return(0); } // Refuse to do anything further once decoding has failed.
    2380:	8d 81       	ldd	r24, Y+5	; 0x05
    2382:	88 23       	and	r24, r24
    2384:	09 f0       	breq	.+2      	; 0x2388 <readOneBit(decode_state_t*)+0x20>
    2386:	7e c0       	rjmp	.+252    	; 0x2484 <readOneBit(decode_state_t*)+0x11c>

  if(0 == state->mask) { state->mask = 0xc0; } // Special treatment of 0 as equivalent to 0xc0 on entry.
    2388:	8c 81       	ldd	r24, Y+4	; 0x04
    238a:	88 23       	and	r24, r24
    238c:	11 f4       	brne	.+4      	; 0x2392 <readOneBit(decode_state_t*)+0x2a>
    238e:	80 ec       	ldi	r24, 0xC0	; 192
    2390:	8c 83       	std	Y+4, r24	; 0x04
#if defined(DEBUG)
  if((state->mask != 0xc0) && (state->mask != 0x30) && (state->mask != 0xc) && (state->mask != 3)) { panic(); }
    2392:	8c 81       	ldd	r24, Y+4	; 0x04
    2394:	80 3c       	cpi	r24, 0xC0	; 192
    2396:	41 f0       	breq	.+16     	; 0x23a8 <readOneBit(decode_state_t*)+0x40>
    2398:	80 33       	cpi	r24, 0x30	; 48
    239a:	31 f0       	breq	.+12     	; 0x23a8 <readOneBit(decode_state_t*)+0x40>
    239c:	8c 30       	cpi	r24, 0x0C	; 12
    239e:	21 f0       	breq	.+8      	; 0x23a8 <readOneBit(decode_state_t*)+0x40>
    23a0:	83 30       	cpi	r24, 0x03	; 3
    23a2:	11 f0       	breq	.+4      	; 0x23a8 <readOneBit(decode_state_t*)+0x40>
    23a4:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <panic()>
#endif

  // First two bits read must be 11.
  if(state->mask != (state->mask & *(state->bitStream)))
    23a8:	8c 81       	ldd	r24, Y+4	; 0x04
    23aa:	28 2f       	mov	r18, r24
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	e8 81       	ld	r30, Y
    23b0:	f9 81       	ldd	r31, Y+1	; 0x01
    23b2:	80 81       	ld	r24, Z
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	82 23       	and	r24, r18
    23b8:	93 23       	and	r25, r19
    23ba:	28 17       	cp	r18, r24
    23bc:	39 07       	cpc	r19, r25
    23be:	09 f0       	breq	.+2      	; 0x23c2 <readOneBit(decode_state_t*)+0x5a>
    23c0:	51 c0       	rjmp	.+162    	; 0x2464 <readOneBit(decode_state_t*)+0xfc>
#endif
    state->failed = true; return(0);
    }

  // Advance the mask; if the mask becomes 0 (then 0xc0 again) then advance the byte pointer.
  if(0 == ((state->mask) >>= 2))
    23c2:	c9 01       	movw	r24, r18
    23c4:	95 95       	asr	r25
    23c6:	87 95       	ror	r24
    23c8:	95 95       	asr	r25
    23ca:	87 95       	ror	r24
    23cc:	8c 83       	std	Y+4, r24	; 0x04
    23ce:	88 23       	and	r24, r24
    23d0:	61 f4       	brne	.+24     	; 0x23ea <readOneBit(decode_state_t*)+0x82>
    {
    state->mask = 0xc0;
    23d2:	80 ec       	ldi	r24, 0xC0	; 192
    23d4:	8c 83       	std	Y+4, r24	; 0x04
    // If end of stream is encountered this is an error since more bits need to be read.
    if(++(state->bitStream) > state->lastByte) { state->failed = true; return(0); }
    23d6:	9f 01       	movw	r18, r30
    23d8:	2f 5f       	subi	r18, 0xFF	; 255
    23da:	3f 4f       	sbci	r19, 0xFF	; 255
    23dc:	39 83       	std	Y+1, r19	; 0x01
    23de:	28 83       	st	Y, r18
    23e0:	8a 81       	ldd	r24, Y+2	; 0x02
    23e2:	9b 81       	ldd	r25, Y+3	; 0x03
    23e4:	82 17       	cp	r24, r18
    23e6:	93 07       	cpc	r25, r19
    23e8:	e8 f1       	brcs	.+122    	; 0x2464 <readOneBit(decode_state_t*)+0xfc>
    }

  // Next two bits can be 00 to decode a zero,
  // or 10 (followed by 00) to decode a one.
  const uint8_t secondPair = (state->mask & *(state->bitStream));
    23ea:	8c 81       	ldd	r24, Y+4	; 0x04
  switch(secondPair)
    23ec:	e8 81       	ld	r30, Y
    23ee:	f9 81       	ldd	r31, Y+1	; 0x01
    23f0:	20 81       	ld	r18, Z
    23f2:	28 23       	and	r18, r24
    23f4:	28 30       	cpi	r18, 0x08	; 8
    23f6:	c1 f0       	breq	.+48     	; 0x2428 <readOneBit(decode_state_t*)+0xc0>
    23f8:	29 30       	cpi	r18, 0x09	; 9
    23fa:	28 f4       	brcc	.+10     	; 0x2406 <readOneBit(decode_state_t*)+0x9e>
    23fc:	22 23       	and	r18, r18
    23fe:	41 f0       	breq	.+16     	; 0x2410 <readOneBit(decode_state_t*)+0xa8>
    2400:	22 30       	cpi	r18, 0x02	; 2
    2402:	81 f5       	brne	.+96     	; 0x2464 <readOneBit(decode_state_t*)+0xfc>
    2404:	11 c0       	rjmp	.+34     	; 0x2428 <readOneBit(decode_state_t*)+0xc0>
    2406:	20 32       	cpi	r18, 0x20	; 32
    2408:	79 f0       	breq	.+30     	; 0x2428 <readOneBit(decode_state_t*)+0xc0>
    240a:	20 38       	cpi	r18, 0x80	; 128
    240c:	59 f5       	brne	.+86     	; 0x2464 <readOneBit(decode_state_t*)+0xfc>
    240e:	0c c0       	rjmp	.+24     	; 0x2428 <readOneBit(decode_state_t*)+0xc0>
      {
#if 0 && defined(DEBUG)
      DEBUG_SERIAL_PRINTLN_FLASHSTRING("decoded 0");
#endif
      // Advance the mask; if the mask becomes 0 then advance the byte pointer.
      if(0 == ((state->mask) >>= 2)) { ++(state->bitStream); }
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	95 95       	asr	r25
    2414:	87 95       	ror	r24
    2416:	95 95       	asr	r25
    2418:	87 95       	ror	r24
    241a:	8c 83       	std	Y+4, r24	; 0x04
    241c:	88 23       	and	r24, r24
    241e:	91 f5       	brne	.+100    	; 0x2484 <readOneBit(decode_state_t*)+0x11c>
    2420:	31 96       	adiw	r30, 0x01	; 1
    2422:	f9 83       	std	Y+1, r31	; 0x01
    2424:	e8 83       	st	Y, r30
    2426:	2f c0       	rjmp	.+94     	; 0x2486 <readOneBit(decode_state_t*)+0x11e>
      state->failed = true; return(0);
      }
    }

  // Advance the mask; if the mask becomes 0 (then 0xc0 again) then advance the byte pointer.
  if(0 == ((state->mask) >>= 2))
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	95 95       	asr	r25
    242c:	87 95       	ror	r24
    242e:	95 95       	asr	r25
    2430:	87 95       	ror	r24
    2432:	8c 83       	std	Y+4, r24	; 0x04
    2434:	88 23       	and	r24, r24
    2436:	61 f4       	brne	.+24     	; 0x2450 <readOneBit(decode_state_t*)+0xe8>
    {
    state->mask = 0xc0;
    2438:	80 ec       	ldi	r24, 0xC0	; 192
    243a:	8c 83       	std	Y+4, r24	; 0x04
    // If end of stream is encountered this is an error since more bits need to be read.
    if(++(state->bitStream) > state->lastByte) { state->failed = true; return(0); }
    243c:	88 81       	ld	r24, Y
    243e:	99 81       	ldd	r25, Y+1	; 0x01
    2440:	01 96       	adiw	r24, 0x01	; 1
    2442:	99 83       	std	Y+1, r25	; 0x01
    2444:	88 83       	st	Y, r24
    2446:	2a 81       	ldd	r18, Y+2	; 0x02
    2448:	3b 81       	ldd	r19, Y+3	; 0x03
    244a:	28 17       	cp	r18, r24
    244c:	39 07       	cpc	r19, r25
    244e:	50 f0       	brcs	.+20     	; 0x2464 <readOneBit(decode_state_t*)+0xfc>
    }

  // Third pair of bits must be 00.
  if(0 != (state->mask & *(state->bitStream)))
    2450:	2c 81       	ldd	r18, Y+4	; 0x04
    2452:	e8 81       	ld	r30, Y
    2454:	f9 81       	ldd	r31, Y+1	; 0x01
    2456:	80 81       	ld	r24, Z
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	82 23       	and	r24, r18
    245e:	93 23       	and	r25, r19
    2460:	89 2b       	or	r24, r25
    2462:	19 f0       	breq	.+6      	; 0x246a <readOneBit(decode_state_t*)+0x102>
     {
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("trailing 00 corrupt");
#endif
    state->failed = true; return(0);
    2464:	81 e0       	ldi	r24, 0x01	; 1
    2466:	8d 83       	std	Y+5, r24	; 0x05
    2468:	0d c0       	rjmp	.+26     	; 0x2484 <readOneBit(decode_state_t*)+0x11c>
    }    

  // Advance the mask; if the mask becomes 0 then advance the byte pointer.
  if(0 == ((state->mask) >>= 2)) { ++(state->bitStream); }
    246a:	c9 01       	movw	r24, r18
    246c:	95 95       	asr	r25
    246e:	87 95       	ror	r24
    2470:	95 95       	asr	r25
    2472:	87 95       	ror	r24
    2474:	8c 83       	std	Y+4, r24	; 0x04
    2476:	88 23       	and	r24, r24
    2478:	19 f4       	brne	.+6      	; 0x2480 <readOneBit(decode_state_t*)+0x118>
    247a:	31 96       	adiw	r30, 0x01	; 1
    247c:	f9 83       	std	Y+1, r31	; 0x01
    247e:	e8 83       	st	Y, r30
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	01 c0       	rjmp	.+2      	; 0x2486 <readOneBit(decode_state_t*)+0x11e>
    2484:	80 e0       	ldi	r24, 0x00	; 0
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("decoded 1");
#endif
  return(1); // Decoded a 1.
  }
    2486:	df 91       	pop	r29
    2488:	cf 91       	pop	r28
    248a:	08 95       	ret

0000248c <readOneByteWithParity(decode_state_t*)>:

// Decodes a series of encoded bits plus parity (and checks the parity, failing if wrong).
// Returns the byte decoded, else marks the state as failed.
static uint8_t readOneByteWithParity(decode_state_t *const state)
    248c:	ef 92       	push	r14
    248e:	ff 92       	push	r15
    2490:	0f 93       	push	r16
    2492:	1f 93       	push	r17
    2494:	cf 93       	push	r28
    2496:	df 93       	push	r29
    2498:	7c 01       	movw	r14, r24
  {
  if(state->failed) { return(0); } // Refuse to do anything further once decoding has failed.
    249a:	fc 01       	movw	r30, r24
    249c:	85 81       	ldd	r24, Z+5	; 0x05
    249e:	88 23       	and	r24, r24
    24a0:	11 f0       	breq	.+4      	; 0x24a6 <readOneByteWithParity(decode_state_t*)+0x1a>
    24a2:	10 e0       	ldi	r17, 0x00	; 0
    24a4:	1b c0       	rjmp	.+54     	; 0x24dc <readOneByteWithParity(decode_state_t*)+0x50>

  // Read first bit specially...
  const uint8_t b7 = readOneBit(state); 
    24a6:	c7 01       	movw	r24, r14
    24a8:	0e 94 b4 11 	call	0x2368	; 0x2368 <readOneBit(decode_state_t*)>
    24ac:	18 2f       	mov	r17, r24
    24ae:	08 2f       	mov	r16, r24
    24b0:	c7 e0       	ldi	r28, 0x07	; 7
    24b2:	d0 e0       	ldi	r29, 0x00	; 0
    24b4:	06 c0       	rjmp	.+12     	; 0x24c2 <readOneByteWithParity(decode_state_t*)+0x36>
  uint8_t result = b7;
  uint8_t parity = b7;
  // Then remaining 7 bits...
  for(int i = 7; --i >= 0; )
    {
    const uint8_t bit = readOneBit(state);
    24b6:	c7 01       	movw	r24, r14
    24b8:	0e 94 b4 11 	call	0x2368	; 0x2368 <readOneBit(decode_state_t*)>
    parity ^= bit;
    24bc:	08 27       	eor	r16, r24
    result = (result << 1) | bit;
    24be:	11 0f       	add	r17, r17
    24c0:	18 2b       	or	r17, r24
  // Read first bit specially...
  const uint8_t b7 = readOneBit(state); 
  uint8_t result = b7;
  uint8_t parity = b7;
  // Then remaining 7 bits...
  for(int i = 7; --i >= 0; )
    24c2:	21 97       	sbiw	r28, 0x01	; 1
    24c4:	ff ef       	ldi	r31, 0xFF	; 255
    24c6:	cf 3f       	cpi	r28, 0xFF	; 255
    24c8:	df 07       	cpc	r29, r31
    24ca:	a9 f7       	brne	.-22     	; 0x24b6 <readOneByteWithParity(decode_state_t*)+0x2a>
    const uint8_t bit = readOneBit(state);
    parity ^= bit;
    result = (result << 1) | bit;
    }
  // Then get parity bit and check.
  if(parity != readOneBit(state))
    24cc:	c7 01       	movw	r24, r14
    24ce:	0e 94 b4 11 	call	0x2368	; 0x2368 <readOneBit(decode_state_t*)>
    24d2:	08 17       	cp	r16, r24
    24d4:	19 f0       	breq	.+6      	; 0x24dc <readOneByteWithParity(decode_state_t*)+0x50>
    {
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("bad parity");
#endif
    state->failed = true;
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	f7 01       	movw	r30, r14
    24da:	85 83       	std	Z+5, r24	; 0x05
    }
  return(result);
  }
    24dc:	81 2f       	mov	r24, r17
    24de:	df 91       	pop	r29
    24e0:	cf 91       	pop	r28
    24e2:	1f 91       	pop	r17
    24e4:	0f 91       	pop	r16
    24e6:	ff 90       	pop	r15
    24e8:	ef 90       	pop	r14
    24ea:	08 95       	ret

000024ec <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)>:

// Decode raw bitstream into non-null command structure passed in; returns true if successful.
// Will return true if OK, else false if anything obviously invalid is detected such as failing parity or checksum.
// Finds and discards leading encoded 1 and trailing 0.
// Returns NULL on failure, else pointer to next full byte after last decoded.
uint8_t const *FHT8VDecodeBitStream(uint8_t const *bitStream, uint8_t const *lastByte, fht8v_msg_t *command)
    24ec:	df 92       	push	r13
    24ee:	ef 92       	push	r14
    24f0:	ff 92       	push	r15
    24f2:	0f 93       	push	r16
    24f4:	1f 93       	push	r17
    24f6:	df 93       	push	r29
    24f8:	cf 93       	push	r28
    24fa:	00 d0       	rcall	.+0      	; 0x24fc <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x10>
    24fc:	00 d0       	rcall	.+0      	; 0x24fe <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x12>
    24fe:	00 d0       	rcall	.+0      	; 0x2500 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x14>
    2500:	cd b7       	in	r28, 0x3d	; 61
    2502:	de b7       	in	r29, 0x3e	; 62
    2504:	8a 01       	movw	r16, r20
  {
  decode_state_t state;
  state.bitStream = bitStream;
    2506:	9a 83       	std	Y+2, r25	; 0x02
    2508:	89 83       	std	Y+1, r24	; 0x01
  state.lastByte = lastByte;
    250a:	7c 83       	std	Y+4, r23	; 0x04
    250c:	6b 83       	std	Y+3, r22	; 0x03
  state.mask = 0;
    250e:	1d 82       	std	Y+5, r1	; 0x05
  state.failed = false;
    2510:	1e 82       	std	Y+6, r1	; 0x06
      }
  DEBUG_SERIAL_PRINTLN();
#endif

  // Find and absorb the leading encoded '1', else quit if not found by end of stream.
  while(0 == readOneBit(&state)) { if(state.failed) { return(NULL); } }
    2512:	7e 01       	movw	r14, r28
    2514:	08 94       	sec
    2516:	e1 1c       	adc	r14, r1
    2518:	f1 1c       	adc	r15, r1
    251a:	03 c0       	rjmp	.+6      	; 0x2522 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x36>
    251c:	8e 81       	ldd	r24, Y+6	; 0x06
    251e:	88 23       	and	r24, r24
    2520:	e9 f5       	brne	.+122    	; 0x259c <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb0>
    2522:	c7 01       	movw	r24, r14
    2524:	0e 94 b4 11 	call	0x2368	; 0x2368 <readOneBit(decode_state_t*)>
    2528:	88 23       	and	r24, r24
    252a:	c1 f3       	breq	.-16     	; 0x251c <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x30>
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("Read leading 1");
#endif

  command->hc1 = readOneByteWithParity(&state);
    252c:	c7 01       	movw	r24, r14
    252e:	0e 94 46 12 	call	0x248c	; 0x248c <readOneByteWithParity(decode_state_t*)>
    2532:	f8 01       	movw	r30, r16
    2534:	80 83       	st	Z, r24
  command->hc2 = readOneByteWithParity(&state);
    2536:	c7 01       	movw	r24, r14
    2538:	0e 94 46 12 	call	0x248c	; 0x248c <readOneByteWithParity(decode_state_t*)>
    253c:	f8 01       	movw	r30, r16
    253e:	81 83       	std	Z+1, r24	; 0x01
#ifdef FHT8V_ADR_USED
  command->address = readOneByteWithParity(&state);
#else
  const uint8_t address = readOneByteWithParity(&state);
    2540:	c7 01       	movw	r24, r14
    2542:	0e 94 46 12 	call	0x248c	; 0x248c <readOneByteWithParity(decode_state_t*)>
    2546:	d8 2e       	mov	r13, r24
#endif
  command->command = readOneByteWithParity(&state);
    2548:	c7 01       	movw	r24, r14
    254a:	0e 94 46 12 	call	0x248c	; 0x248c <readOneByteWithParity(decode_state_t*)>
    254e:	f8 01       	movw	r30, r16
    2550:	82 83       	std	Z+2, r24	; 0x02
  command->extension = readOneByteWithParity(&state);
    2552:	c7 01       	movw	r24, r14
    2554:	0e 94 46 12 	call	0x248c	; 0x248c <readOneByteWithParity(decode_state_t*)>
    2558:	f8 01       	movw	r30, r16
    255a:	83 83       	std	Z+3, r24	; 0x03
  const uint8_t checksumRead = readOneByteWithParity(&state);
    255c:	c7 01       	movw	r24, r14
    255e:	0e 94 46 12 	call	0x248c	; 0x248c <readOneByteWithParity(decode_state_t*)>
    2562:	28 2f       	mov	r18, r24
  if(state.failed)
    2564:	8e 81       	ldd	r24, Y+6	; 0x06
    2566:	88 23       	and	r24, r24
    2568:	c9 f4       	brne	.+50     	; 0x259c <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb0>
#ifdef FHT8V_ADR_USED
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + command->address + command->command + command->extension;
#else
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + address + command->command + command->extension;
#endif
  if(checksum != checksumRead)
    256a:	f8 01       	movw	r30, r16
    256c:	80 81       	ld	r24, Z
    256e:	91 81       	ldd	r25, Z+1	; 0x01
    2570:	89 0f       	add	r24, r25
    2572:	84 5f       	subi	r24, 0xF4	; 244
    2574:	92 81       	ldd	r25, Z+2	; 0x02
    2576:	89 0f       	add	r24, r25
    2578:	93 81       	ldd	r25, Z+3	; 0x03
    257a:	89 0f       	add	r24, r25
    257c:	8d 0d       	add	r24, r13
    257e:	82 17       	cp	r24, r18
    2580:	69 f4       	brne	.+26     	; 0x259c <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb0>
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("Checksum OK");
    }
#endif

  // Check the trailing encoded '0'.
  if(0 != readOneBit(&state))
    2582:	c7 01       	movw	r24, r14
    2584:	0e 94 b4 11 	call	0x2368	; 0x2368 <readOneBit(decode_state_t*)>
    2588:	88 23       	and	r24, r24
    258a:	41 f4       	brne	.+16     	; 0x259c <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb0>
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("Read of trailing 0 failed");
#endif
    state.failed = true; return(NULL);
    }
  if(state.failed) { return(NULL); }
    258c:	8e 81       	ldd	r24, Y+6	; 0x06
    258e:	88 23       	and	r24, r24
    2590:	29 f4       	brne	.+10     	; 0x259c <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb0>
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("Read entire message");
#endif
  // Return pointer to where any trailing data may be
  // in next byte beyond end of FHT8V frame.
  return(state.bitStream + 1);
    2592:	29 81       	ldd	r18, Y+1	; 0x01
    2594:	3a 81       	ldd	r19, Y+2	; 0x02
    2596:	2f 5f       	subi	r18, 0xFF	; 255
    2598:	3f 4f       	sbci	r19, 0xFF	; 255
    259a:	02 c0       	rjmp	.+4      	; 0x25a0 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb4>
    259c:	20 e0       	ldi	r18, 0x00	; 0
    259e:	30 e0       	ldi	r19, 0x00	; 0
  }
    25a0:	c9 01       	movw	r24, r18
    25a2:	26 96       	adiw	r28, 0x06	; 6
    25a4:	0f b6       	in	r0, 0x3f	; 63
    25a6:	f8 94       	cli
    25a8:	de bf       	out	0x3e, r29	; 62
    25aa:	0f be       	out	0x3f, r0	; 63
    25ac:	cd bf       	out	0x3d, r28	; 61
    25ae:	cf 91       	pop	r28
    25b0:	df 91       	pop	r29
    25b2:	1f 91       	pop	r17
    25b4:	0f 91       	pop	r16
    25b6:	ff 90       	pop	r15
    25b8:	ef 90       	pop	r14
    25ba:	df 90       	pop	r13
    25bc:	08 95       	ret

000025be <FHT8VCallForHeatPoll()>:
// If used instead of an interrupt then should probably called at least about once every 100ms.
// Returns true if any useful activity/progress was detected by this call (not necessarily a full valid call-for-heat).
// Upon receipt of a valid call-for-heat this comes out of eavesdropping mode to save energy.
// If a problem is encountered this restarts the eavesdropping process.
// Does not block nor take significant time.
bool FHT8VCallForHeatPoll()
    25be:	ef 92       	push	r14
    25c0:	ff 92       	push	r15
    25c2:	0f 93       	push	r16
    25c4:	1f 93       	push	r17
    25c6:	df 93       	push	r29
    25c8:	cf 93       	push	r28
    25ca:	cd b7       	in	r28, 0x3d	; 61
    25cc:	de b7       	in	r29, 0x3e	; 62
    25ce:	2b 97       	sbiw	r28, 0x0b	; 11
    25d0:	0f b6       	in	r0, 0x3f	; 63
    25d2:	f8 94       	cli
    25d4:	de bf       	out	0x3e, r29	; 62
    25d6:	0f be       	out	0x3f, r0	; 63
    25d8:	cd bf       	out	0x3d, r28	; 61
  {
  // Do nothing unless already in eavesdropping mode.
  if(!eavesdropping) { return(false); }
    25da:	80 91 a1 02 	lds	r24, 0x02A1
    25de:	88 23       	and	r24, r24
    25e0:	09 f4       	brne	.+2      	; 0x25e4 <FHT8VCallForHeatPoll()+0x26>
    25e2:	d7 c0       	rjmp	.+430    	; 0x2792 <FHT8VCallForHeatPoll()+0x1d4>
//  if(FHT8VCallForHeatHeard()) { return(false); }
//#endif

#if defined(PIN_RFM_NIRQ)
  // If nIRQ line is available then abort if it is not active (and thus spare the SPI bus).
  if(fastDigitalRead(PIN_RFM_NIRQ) != LOW) { return(false); }
    25e4:	19 99       	sbic	0x03, 1	; 3
    25e6:	d5 c0       	rjmp	.+426    	; 0x2792 <FHT8VCallForHeatPoll()+0x1d4>
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("RX IRQ");
#endif
#endif

  const uint16_t status = RFM22ReadStatusBoth(); // reg1:reg2, on V0.08 PICAXE tempB2:SPI_DATAB.
    25e8:	0e 94 26 23 	call	0x464c	; 0x464c <RFM22ReadStatusBoth()>
    25ec:	8c 01       	movw	r16, r24

  if(status & 0x1000) // Received frame.
    25ee:	94 ff       	sbrs	r25, 4
    25f0:	ba c0       	rjmp	.+372    	; 0x2766 <FHT8VCallForHeatPoll()+0x1a8>
    {
// Ensure that data from a previous frame is not trivially re-read by clearing the buffer explicitly.
//    for(uint8_t *p = FHT8VRXHubArea + FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE; --p >= FHT8VRXHubArea; )
//      { *p = 0; }
    memset(FHT8VRXHubArea, 0xff, sizeof(FHT8VRXHubArea));
    25f2:	82 ea       	ldi	r24, 0xA2	; 162
    25f4:	92 e0       	ldi	r25, 0x02	; 2
    25f6:	6f ef       	ldi	r22, 0xFF	; 255
    25f8:	70 e0       	ldi	r23, 0x00	; 0
    25fa:	4e e3       	ldi	r20, 0x3E	; 62
    25fc:	50 e0       	ldi	r21, 0x00	; 0
    25fe:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <memset>
    // Attempt to read the entire frame.
    RFM22RXFIFO(FHT8VRXHubArea, sizeof(FHT8VRXHubArea));
    2602:	82 ea       	ldi	r24, 0xA2	; 162
    2604:	92 e0       	ldi	r25, 0x02	; 2
    2606:	6e e3       	ldi	r22, 0x3E	; 62
    2608:	0e 94 c1 21 	call	0x4382	; 0x4382 <RFM22RXFIFO(unsigned char*, unsigned char)>
    260c:	20 e0       	ldi	r18, 0x00	; 0
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	82 2f       	mov	r24, r18
    uint8_t pos; // Current byte position in RX buffer...
    // Validate FHT8V premable (zeros encoded as up to 6x 0xcc bytes), else abort/restart.
    // Insist on at least a couple of bytes of valid preamble being present.
    for(pos = 0; pos < 6; ++pos)
      {
      const uint8_t b = FHT8VRXHubArea[pos];
    2612:	f9 01       	movw	r30, r18
    2614:	ee 55       	subi	r30, 0x5E	; 94
    2616:	fd 4f       	sbci	r31, 0xFD	; 253
    2618:	e0 81       	ld	r30, Z
      if(0xcc != b)
    261a:	ec 3c       	cpi	r30, 0xCC	; 204
    261c:	09 f4       	brne	.+2      	; 0x2620 <FHT8VCallForHeatPoll()+0x62>
    261e:	44 c0       	rjmp	.+136    	; 0x26a8 <FHT8VCallForHeatPoll()+0xea>
        {
        if(MSG_JSON_LEADING_CHAR == b)
    2620:	eb 37       	cpi	r30, 0x7B	; 123
    2622:	a1 f4       	brne	.+40     	; 0x264c <FHT8VCallForHeatPoll()+0x8e>
          {
          if(adjustJSONMsgForRXAndCheckCRC((char *)(FHT8VRXHubArea + pos), sizeof(FHT8VRXHubArea)-pos) > 0)
    2624:	02 2f       	mov	r16, r18
    2626:	10 e0       	ldi	r17, 0x00	; 0
    2628:	0e 55       	subi	r16, 0x5E	; 94
    262a:	1d 4f       	sbci	r17, 0xFD	; 253
    262c:	6e e3       	ldi	r22, 0x3E	; 62
    262e:	62 1b       	sub	r22, r18
    2630:	c8 01       	movw	r24, r16
    2632:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)>
    2636:	18 16       	cp	r1, r24
    2638:	2c f4       	brge	.+10     	; 0x2644 <FHT8VCallForHeatPoll()+0x86>
            {
            recordJSONStats(false, (const char *)(FHT8VRXHubArea + pos));
    263a:	80 e0       	ldi	r24, 0x00	; 0
    263c:	b8 01       	movw	r22, r16
    263e:	0e 94 2d 1b 	call	0x365a	; 0x365a <recordJSONStats(bool, char const*)>
    2642:	8a c0       	rjmp	.+276    	; 0x2758 <FHT8VCallForHeatPoll()+0x19a>
// Useful to assess the noise enviromentment.
static volatile uint8_t lastRXerrno;

// Atomically returns and clears last (FHT8V) RX error code, or 0 if none.
// Set with such codes as FHT8VRXErr_GENERIC; never set to zero.
static void setLastRXErr(const uint8_t err) { ATOMIC_BLOCK (ATOMIC_RESTORESTATE) { lastRXerrno = err; } }
    2644:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2646:	f8 94       	cli
    2648:	85 e0       	ldi	r24, 0x05	; 5
    264a:	9e c0       	rjmp	.+316    	; 0x2788 <FHT8VCallForHeatPoll()+0x1ca>
#endif
          setLastRXErr(FHT8VRXErr_BAD_RX_STATSFRAME);
          _SetupRFM22ToEavesdropOnFHT8V(); // Reset/restart RX.
          return(false); // Didn't look like valid JSON.
          }
        else if(MESSAGING_FULL_STATS_FLAGS_HEADER_MSBS == (b & MESSAGING_FULL_STATS_FLAGS_HEADER_MASK))
    264c:	e0 7e       	andi	r30, 0xE0	; 224
    264e:	e0 36       	cpi	r30, 0x60	; 96
    2650:	d1 f4       	brne	.+52     	; 0x2686 <FHT8VCallForHeatPoll()+0xc8>
          {
          // May be binary stats frame, so attempt to decode...
          FullStatsMessageCore_t content;
          // (TODO: should reject non-secure messages when expecting secure ones...)
          const uint8_t *msg = decodeFullStatsMessageCore(FHT8VRXHubArea, sizeof(FHT8VRXHubArea)-pos, stTXalwaysAll, false, &content);
    2652:	6e e3       	ldi	r22, 0x3E	; 62
    2654:	62 1b       	sub	r22, r18
    2656:	75 e0       	ldi	r23, 0x05	; 5
    2658:	e7 2e       	mov	r14, r23
    265a:	f1 2c       	mov	r15, r1
    265c:	ec 0e       	add	r14, r28
    265e:	fd 1e       	adc	r15, r29
    2660:	82 ea       	ldi	r24, 0xA2	; 162
    2662:	92 e0       	ldi	r25, 0x02	; 2
    2664:	40 e0       	ldi	r20, 0x00	; 0
    2666:	50 e0       	ldi	r21, 0x00	; 0
    2668:	20 e0       	ldi	r18, 0x00	; 0
    266a:	87 01       	movw	r16, r14
    266c:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)>
          if(NULL != msg)
    2670:	89 2b       	or	r24, r25
    2672:	09 f4       	brne	.+2      	; 0x2676 <FHT8VCallForHeatPoll()+0xb8>
    2674:	8c c0       	rjmp	.+280    	; 0x278e <FHT8VCallForHeatPoll()+0x1d0>
             {
             if(content.containsID)
    2676:	8d 81       	ldd	r24, Y+5	; 0x05
    2678:	80 ff       	sbrs	r24, 0
    267a:	6e c0       	rjmp	.+220    	; 0x2758 <FHT8VCallForHeatPoll()+0x19a>
               DEBUG_SERIAL_PRINTFMT(content.id0, HEX);
               DEBUG_SERIAL_PRINT(' ');
               DEBUG_SERIAL_PRINTFMT(content.id1, HEX);
               DEBUG_SERIAL_PRINTLN();
#endif
               recordCoreStats(false, &content);
    267c:	80 e0       	ldi	r24, 0x00	; 0
    267e:	b7 01       	movw	r22, r14
    2680:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <recordCoreStats(bool, FullStatsMessageCore const*)>
    2684:	69 c0       	rjmp	.+210    	; 0x2758 <FHT8VCallForHeatPoll()+0x19a>

          _SetupRFM22ToEavesdropOnFHT8V(); // Reset/restart RX.
          return(false); // Nothing valid received.
          }

        if(pos < 2)
    2686:	22 30       	cpi	r18, 0x02	; 2
    2688:	b0 f4       	brcc	.+44     	; 0x26b6 <FHT8VCallForHeatPoll()+0xf8>
// Useful to assess the noise enviromentment.
static volatile uint8_t lastRXerrno;

// Atomically returns and clears last (FHT8V) RX error code, or 0 if none.
// Set with such codes as FHT8VRXErr_GENERIC; never set to zero.
static void setLastRXErr(const uint8_t err) { ATOMIC_BLOCK (ATOMIC_RESTORESTATE) { lastRXerrno = err; } }
    268a:	9f b7       	in	r25, 0x3f	; 63
    268c:	f8 94       	cli
    268e:	82 e0       	ldi	r24, 0x02	; 2
    2690:	80 93 a0 02 	sts	0x02A0, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2694:	9f bf       	out	0x3f, r25	; 63
            DEBUG_SERIAL_PRINT_FLASHSTRING(" 0x");
            DEBUG_SERIAL_PRINTFMT(FHT8VRXHubArea[p], HEX);
            }
          DEBUG_SERIAL_PRINTLN();
#endif
          seedRNG8(FHT8VRXHubArea[pos], FHT8VRXHubArea[pos+2], FHT8VRXHubArea[pos+5]); // Attempt to gather some entropy from RX noise. (TODO-302).
    2696:	f9 01       	movw	r30, r18
    2698:	ee 55       	subi	r30, 0x5E	; 94
    269a:	fd 4f       	sbci	r31, 0xFD	; 253
    269c:	80 81       	ld	r24, Z
    269e:	62 81       	ldd	r22, Z+2	; 0x02
    26a0:	45 81       	ldd	r20, Z+5	; 0x05
    26a2:	0e 94 89 21 	call	0x4312	; 0x4312 <seedRNG8(unsigned char, unsigned char, unsigned char)>
    26a6:	73 c0       	rjmp	.+230    	; 0x278e <FHT8VCallForHeatPoll()+0x1d0>
          _SetupRFM22ToEavesdropOnFHT8V(); // Reset/restart RX.
          return(false);
    26a8:	8f 5f       	subi	r24, 0xFF	; 255
    26aa:	2f 5f       	subi	r18, 0xFF	; 255
    26ac:	3f 4f       	sbci	r19, 0xFF	; 255
    // Attempt to read the entire frame.
    RFM22RXFIFO(FHT8VRXHubArea, sizeof(FHT8VRXHubArea));
    uint8_t pos; // Current byte position in RX buffer...
    // Validate FHT8V premable (zeros encoded as up to 6x 0xcc bytes), else abort/restart.
    // Insist on at least a couple of bytes of valid preamble being present.
    for(pos = 0; pos < 6; ++pos)
    26ae:	26 30       	cpi	r18, 0x06	; 6
    26b0:	31 05       	cpc	r19, r1
    26b2:	09 f0       	breq	.+2      	; 0x26b6 <FHT8VCallForHeatPoll()+0xf8>
    26b4:	ad cf       	rjmp	.-166    	; 0x2610 <FHT8VCallForHeatPoll()+0x52>
        break; // If enough preamble has been seen, move on to the body.
        }
      }
    fht8v_msg_t command;
    uint8_t const *lastByte = FHT8VRXHubArea + FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE - 1;
    uint8_t const *trailer = FHT8VDecodeBitStream(FHT8VRXHubArea + pos, lastByte, &command);
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	0d ed       	ldi	r16, 0xDD	; 221
    26ba:	12 e0       	ldi	r17, 0x02	; 2
    26bc:	8e 55       	subi	r24, 0x5E	; 94
    26be:	9d 4f       	sbci	r25, 0xFD	; 253
    26c0:	b8 01       	movw	r22, r16
    26c2:	ae 01       	movw	r20, r28
    26c4:	4f 5f       	subi	r20, 0xFF	; 255
    26c6:	5f 4f       	sbci	r21, 0xFF	; 255
    26c8:	0e 94 76 12 	call	0x24ec	; 0x24ec <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)>
    26cc:	fc 01       	movw	r30, r24
    if(NULL != trailer)
    26ce:	00 97       	sbiw	r24, 0x00	; 0
    26d0:	09 f4       	brne	.+2      	; 0x26d4 <FHT8VCallForHeatPoll()+0x116>
    26d2:	45 c0       	rjmp	.+138    	; 0x275e <FHT8VCallForHeatPoll()+0x1a0>

#if defined(ALLOW_STATS_RX) // Only look for the trailer if supported.
      // If whole FHT8V frame was OK then check if there is a valid stats trailer.

      // Check for 'core' stats trailer.
      if((trailer + FullStatsMessageCore_MAX_BYTES_ON_WIRE <= lastByte) && // Enough space for minimum-stats trailer.
    26d4:	08 96       	adiw	r24, 0x08	; 8
    26d6:	08 17       	cp	r16, r24
    26d8:	19 07       	cpc	r17, r25
    26da:	48 f1       	brcs	.+82     	; 0x272e <FHT8VCallForHeatPoll()+0x170>
    26dc:	80 81       	ld	r24, Z
    26de:	80 7e       	andi	r24, 0xE0	; 224
    26e0:	80 36       	cpi	r24, 0x60	; 96
    26e2:	29 f5       	brne	.+74     	; 0x272e <FHT8VCallForHeatPoll()+0x170>
         (MESSAGING_FULL_STATS_FLAGS_HEADER_MSBS == (trailer[0] & MESSAGING_FULL_STATS_FLAGS_HEADER_MASK)))
        {
        FullStatsMessageCore_t content;
        const uint8_t *tail = decodeFullStatsMessageCore(trailer, lastByte - trailer, stTXalwaysAll, false, &content);
    26e4:	60 2f       	mov	r22, r16
    26e6:	6e 1b       	sub	r22, r30
    26e8:	cf 01       	movw	r24, r30
    26ea:	40 e0       	ldi	r20, 0x00	; 0
    26ec:	50 e0       	ldi	r21, 0x00	; 0
    26ee:	20 e0       	ldi	r18, 0x00	; 0
    26f0:	8e 01       	movw	r16, r28
    26f2:	0b 5f       	subi	r16, 0xFB	; 251
    26f4:	1f 4f       	sbci	r17, 0xFF	; 255
    26f6:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)>
        if(NULL != tail)
    26fa:	89 2b       	or	r24, r25
    26fc:	c1 f0       	breq	.+48     	; 0x272e <FHT8VCallForHeatPoll()+0x170>
          // Received trailing stats frame!
 
          // If ID is present then make sure it matches that implied by the FHT8V frame (else reject this trailer)
          // else file it in from the FHT8C frame.
          bool allGood = true;
          if(content.containsID)
    26fe:	9d 81       	ldd	r25, Y+5	; 0x05
    2700:	29 81       	ldd	r18, Y+1	; 0x01
    2702:	90 ff       	sbrs	r25, 0
    2704:	08 c0       	rjmp	.+16     	; 0x2716 <FHT8VCallForHeatPoll()+0x158>
            {
            if((content.id0 != command.hc1) || (content.id1 != command.hc2))
    2706:	8e 81       	ldd	r24, Y+6	; 0x06
    2708:	82 17       	cp	r24, r18
    270a:	59 f4       	brne	.+22     	; 0x2722 <FHT8VCallForHeatPoll()+0x164>
    270c:	9f 81       	ldd	r25, Y+7	; 0x07
    270e:	8a 81       	ldd	r24, Y+2	; 0x02
    2710:	98 17       	cp	r25, r24
    2712:	39 f4       	brne	.+14     	; 0x2722 <FHT8VCallForHeatPoll()+0x164>
    2714:	4c c0       	rjmp	.+152    	; 0x27ae <FHT8VCallForHeatPoll()+0x1f0>
              { allGood = false; }
            }
          else
            {
            content.id0 = command.hc1;
    2716:	2e 83       	std	Y+6, r18	; 0x06
            content.id1 = command.hc2;
    2718:	8a 81       	ldd	r24, Y+2	; 0x02
    271a:	8f 83       	std	Y+7, r24	; 0x07
            content.containsID = true;
    271c:	91 60       	ori	r25, 0x01	; 1
    271e:	9d 83       	std	Y+5, r25	; 0x05
    2720:	46 c0       	rjmp	.+140    	; 0x27ae <FHT8VCallForHeatPoll()+0x1f0>
// Useful to assess the noise enviromentment.
static volatile uint8_t lastRXerrno;

// Atomically returns and clears last (FHT8V) RX error code, or 0 if none.
// Set with such codes as FHT8VRXErr_GENERIC; never set to zero.
static void setLastRXErr(const uint8_t err) { ATOMIC_BLOCK (ATOMIC_RESTORESTATE) { lastRXerrno = err; } }
    2722:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2724:	f8 94       	cli
    2726:	84 e0       	ldi	r24, 0x04	; 4
    2728:	80 93 a0 02 	sts	0x02A0, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    272c:	9f bf       	out	0x3f, r25	; 63
        }
#endif
#endif

      // Potentially accept as call for heat only if command is 0x26 (38) and value open enough as used by OpenTRV to TX.
      if((0x26 == command.command) && (command.extension >= NominalRadValve.getMinValvePcReallyOpen()))
    272e:	8b 81       	ldd	r24, Y+3	; 0x03
    2730:	86 32       	cpi	r24, 0x26	; 38
    2732:	91 f4       	brne	.+36     	; 0x2758 <FHT8VCallForHeatPoll()+0x19a>
    2734:	1c 81       	ldd	r17, Y+4	; 0x04
    2736:	0e 94 6f 04 	call	0x8de	; 0x8de <ModelledRadValve::getMinValvePcReallyOpen()>
    273a:	18 17       	cp	r17, r24
    273c:	68 f0       	brcs	.+26     	; 0x2758 <FHT8VCallForHeatPoll()+0x19a>
        {
        if(FHT8VHubAcceptedHouseCode(command.hc1, command.hc2))
          {
          // Accept if house code not filtered out.
          const uint16_t compoundHC = (command.hc1 << 8) | command.hc2;
    273e:	99 81       	ldd	r25, Y+1	; 0x01
    2740:	80 e0       	ldi	r24, 0x00	; 0
    2742:	2a 81       	ldd	r18, Y+2	; 0x02
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	82 2b       	or	r24, r18
    2748:	93 2b       	or	r25, r19
          ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    274a:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    274c:	f8 94       	cli
            { lastCallForHeatHC = compoundHC; } // Update atomically.
    274e:	90 93 3a 01 	sts	0x013A, r25
    2752:	80 93 39 01 	sts	0x0139, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2756:	2f bf       	out	0x3f, r18	; 63
//#if defined(SAVE_RX_ENERGY)
//          StopEavesdropOnFHT8V(); // Need not eavesdrop for a while.
//#endif
          }
        }
      _SetupRFM22ToEavesdropOnFHT8V(); // Reset/restart RX.
    2758:	0e 94 96 11 	call	0x232c	; 0x232c <_SetupRFM22ToEavesdropOnFHT8V()>
    275c:	0e c0       	rjmp	.+28     	; 0x277a <FHT8VCallForHeatPoll()+0x1bc>
// Useful to assess the noise enviromentment.
static volatile uint8_t lastRXerrno;

// Atomically returns and clears last (FHT8V) RX error code, or 0 if none.
// Set with such codes as FHT8VRXErr_GENERIC; never set to zero.
static void setLastRXErr(const uint8_t err) { ATOMIC_BLOCK (ATOMIC_RESTORESTATE) { lastRXerrno = err; } }
    275e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2760:	f8 94       	cli
    2762:	83 e0       	ldi	r24, 0x03	; 3
    2764:	11 c0       	rjmp	.+34     	; 0x2788 <FHT8VCallForHeatPoll()+0x1ca>

    // Ensure that RX is re-enabled to avoid missing anything.
    _SetupRFM22ToEavesdropOnFHT8V(); // Reset/restart RX.
    return(false); // Nothing valid received.
    }
  else if(status & 0x80) // Got sync from incoming FHT8V message.
    2766:	87 ff       	sbrs	r24, 7
    2768:	0a c0       	rjmp	.+20     	; 0x277e <FHT8VCallForHeatPoll()+0x1c0>
    {
    // Capture some entropy from RSSI and timing...
    const uint8_t rssi = RFM22RSSI();
    276a:	0e 94 0e 23 	call	0x461c	; 0x461c <RFM22RSSI()>
    // TODO adjust output power down a little if RX very loud.
    addEntropyToPool(rssi ^ (uint8_t)(status ^ (status >> 8)), 1); // Maybe ~1 real bit of entropy.
    276e:	91 2f       	mov	r25, r17
    2770:	90 27       	eor	r25, r16
    2772:	89 27       	eor	r24, r25
    2774:	61 e0       	ldi	r22, 0x01	; 1
    2776:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <addEntropyToPool(unsigned char, unsigned char)>
    277a:	81 e0       	ldi	r24, 0x01	; 1
    277c:	0b c0       	rjmp	.+22     	; 0x2794 <FHT8VCallForHeatPoll()+0x1d6>
      }
#endif 
//    syncSeen = true;
    return(true);
    }
  else if(status & 0x8000) // RX FIFO overflow/underflow: give up and restart...
    277e:	97 ff       	sbrs	r25, 7
    2780:	08 c0       	rjmp	.+16     	; 0x2792 <FHT8VCallForHeatPoll()+0x1d4>
// Useful to assess the noise enviromentment.
static volatile uint8_t lastRXerrno;

// Atomically returns and clears last (FHT8V) RX error code, or 0 if none.
// Set with such codes as FHT8VRXErr_GENERIC; never set to zero.
static void setLastRXErr(const uint8_t err) { ATOMIC_BLOCK (ATOMIC_RESTORESTATE) { lastRXerrno = err; } }
    2782:	9f b7       	in	r25, 0x3f	; 63
    2784:	f8 94       	cli
    2786:	81 e0       	ldi	r24, 0x01	; 1
    2788:	80 93 a0 02 	sts	0x02A0, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    278c:	9f bf       	out	0x3f, r25	; 63
    {
    setLastRXErr(FHT8VRXErr_GENERIC);
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("RX FIFO problem");
#endif
    _SetupRFM22ToEavesdropOnFHT8V(); // Reset/restart RX.
    278e:	0e 94 96 11 	call	0x232c	; 0x232c <_SetupRFM22ToEavesdropOnFHT8V()>
    return(false);
    2792:	80 e0       	ldi	r24, 0x00	; 0
    }

  return(false);
  }
    2794:	2b 96       	adiw	r28, 0x0b	; 11
    2796:	0f b6       	in	r0, 0x3f	; 63
    2798:	f8 94       	cli
    279a:	de bf       	out	0x3e, r29	; 62
    279c:	0f be       	out	0x3f, r0	; 63
    279e:	cd bf       	out	0x3d, r28	; 61
    27a0:	cf 91       	pop	r28
    27a2:	df 91       	pop	r29
    27a4:	1f 91       	pop	r17
    27a6:	0f 91       	pop	r16
    27a8:	ff 90       	pop	r15
    27aa:	ef 90       	pop	r14
    27ac:	08 95       	ret
            content.id1 = command.hc2;
            content.containsID = true;
            }
 
          // If frame looks good then capture it.
          if(allGood) { recordCoreStats(false, &content); }
    27ae:	80 e0       	ldi	r24, 0x00	; 0
    27b0:	be 01       	movw	r22, r28
    27b2:	6b 5f       	subi	r22, 0xFB	; 251
    27b4:	7f 4f       	sbci	r23, 0xFF	; 255
    27b6:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <recordCoreStats(bool, FullStatsMessageCore const*)>
    27ba:	b9 cf       	rjmp	.-142    	; 0x272e <FHT8VCallForHeatPoll()+0x170>

000027bc <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)>:
//
// Returns immediately without transmitting if the command buffer starts with 0xff (ie is empty).
// (If doubleTX is true, sends the bitstream twice, with a short (~8ms) pause between transmissions, to help ensure reliable delivery.)
//
// Note: single transmission time is up to about 80ms (without extra trailers), double up to about 170ms.
static void FHT8VTXFHTQueueAndSendCmd(uint8_t *bptr, const bool doubleTX)
    27bc:	0f 93       	push	r16
    27be:	1f 93       	push	r17
    27c0:	cf 93       	push	r28
    27c2:	df 93       	push	r29
    27c4:	ec 01       	movw	r28, r24
    27c6:	06 2f       	mov	r16, r22
  {
  if(((uint8_t)0xff) == *bptr) { return; }
    27c8:	88 81       	ld	r24, Y
    27ca:	8f 3f       	cpi	r24, 0xFF	; 255
    27cc:	01 f1       	breq	.+64     	; 0x280e <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x52>
#if 0 && defined(DEBUG)
  if(0 == *bptr) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("FHT8V frame not initialised"); panic(); }
#endif

#if defined(ENABLE_BOILER_HUB)
  const bool hubMode = inHubMode();
    27ce:	0e 94 0f 04 	call	0x81e	; 0x81e <getMinBoilerOnMinutes()>
    27d2:	18 2f       	mov	r17, r24
    27d4:	88 23       	and	r24, r24
    27d6:	19 f0       	breq	.+6      	; 0x27de <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x22>
    27d8:	11 e0       	ldi	r17, 0x01	; 1
  // Do a final poll for any call for heat that just arrived before doing TX.
  if(hubMode) { FHT8VCallForHeatPoll(); }
    27da:	0e 94 df 12 	call	0x25be	; 0x25be <FHT8VCallForHeatPoll()>
  StopEavesdropOnFHT8V(); // Unconditional cleardown of eavesdrop.
    27de:	80 e0       	ldi	r24, 0x00	; 0
    27e0:	0e 94 8b 11 	call	0x2316	; 0x2316 <StopEavesdropOnFHT8V(bool)>
#endif

  RFM22QueueCmdToFF(bptr);
    27e4:	ce 01       	movw	r24, r28
    27e6:	0e 94 9b 22 	call	0x4536	; 0x4536 <RFM22QueueCmdToFF(unsigned char*)>
  RFM22TXFIFO(); // Send it!  Approx 1.6ms/byte and < 80ms max.
    27ea:	0e 94 93 23 	call	0x4726	; 0x4726 <RFM22TXFIFO()>

  if(doubleTX)
    27ee:	00 23       	and	r16, r16
    27f0:	31 f0       	breq	.+12     	; 0x27fe <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x42>
// This may be achieved in part by dynamically slowing the CPU clock if possible.
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed((((MIN_CPU_HZ * (ms)) + 2000) / 4000) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    27f2:	8d e3       	ldi	r24, 0x3D	; 61
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	0e 94 76 1d 	call	0x3aec	; 0x3aec <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
    {
    // Should nominally pause about 8--9ms or similar before retransmission...
    sleepLowPowerMs(8);
    RFM22TXFIFO(); // Re-send it!
    27fa:	0e 94 93 23 	call	0x4726	; 0x4726 <RFM22TXFIFO()>
    }

#if defined(ENABLE_BOILER_HUB)
  if(hubMode)
    27fe:	11 23       	and	r17, r17
    2800:	21 f0       	breq	.+8      	; 0x280a <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x4e>
    { SetupToEavesdropOnFHT8V(); } // Revert to hub listening...
    2802:	80 e0       	ldi	r24, 0x00	; 0
    2804:	0e 94 9e 11 	call	0x233c	; 0x233c <SetupToEavesdropOnFHT8V(bool)>
    2808:	02 c0       	rjmp	.+4      	; 0x280e <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x52>
  else
#endif
    { RFM22ModeStandbyAndClearState(); } // Go to standby to conserve energy.
    280a:	0e 94 4b 23 	call	0x4696	; 0x4696 <RFM22ModeStandbyAndClearState()>
  }
    280e:	df 91       	pop	r29
    2810:	cf 91       	pop	r28
    2812:	1f 91       	pop	r17
    2814:	0f 91       	pop	r16
    2816:	08 95       	ret

00002818 <valveSettingTX(bool)>:

// Send current (assumed valve-setting) command and adjust FHT8V_isValveOpen as appropriate.
// Only appropriate when the command is going to be heard by the FHT8V valve itself, not just the hub.
static void valveSettingTX(const bool allowDoubleTX)
    2818:	1f 93       	push	r17
    281a:	68 2f       	mov	r22, r24
  {
  // Transmit correct valve-setting command that should already be in the buffer...
  FHT8VTXFHTQueueAndSendCmd(FHT8VTXCommandArea, allowDoubleTX);
    281c:	84 ee       	ldi	r24, 0xE4	; 228
    281e:	92 e0       	ldi	r25, 0x02	; 2
    2820:	0e 94 de 13 	call	0x27bc	; 0x27bc <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)>
    2824:	10 91 1b 02 	lds	r17, 0x021B

// Call just after TX of valve-setting command which is assumed to reflect current TRVPercentOpen state.
// This helps avoiding calling for heat from a central boiler until the valve is really open,
// eg to avoid excess load on (or energy wasting by) the circulation pump.
static void setFHT8V_isValveOpen()
  { FHT8V_isValveOpen = (NominalRadValve.get() >= NominalRadValve.getMinValvePcReallyOpen()); }
    2828:	0e 94 6f 04 	call	0x8de	; 0x8de <ModelledRadValve::getMinValvePcReallyOpen()>
    282c:	10 92 20 03 	sts	0x0320, r1
    2830:	18 17       	cp	r17, r24
    2832:	18 f0       	brcs	.+6      	; 0x283a <valveSettingTX(bool)+0x22>
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	80 93 20 03 	sts	0x0320, r24
  {
  // Transmit correct valve-setting command that should already be in the buffer...
  FHT8VTXFHTQueueAndSendCmd(FHT8VTXCommandArea, allowDoubleTX);
  // Indicate state that valve should now actually be in (or physically moving to)...
  setFHT8V_isValveOpen();
  }
    283a:	1f 91       	pop	r17
    283c:	08 95       	ret

0000283e <sleepUntilSubCycleTimeOptionalRX(unsigned char)>:
// Returns true if OK, false if specified time already passed or significantly missed (eg by more than one tick).
// May use a combination of techniques to hit the required time.
// Requesting a sleep until at or near the end of the cycle risks overrun and may be unwise.
// Using this to sleep less then 2 ticks may prove unreliable as the RTC rolls on underneath...
// This is NOT intended to be used to sleep over the end of a minor cycle. 
static void sleepUntilSubCycleTimeOptionalRX(const uint8_t sleepUntil)
    283e:	8f 92       	push	r8
    2840:	9f 92       	push	r9
    2842:	af 92       	push	r10
    2844:	bf 92       	push	r11
    2846:	cf 92       	push	r12
    2848:	df 92       	push	r13
    284a:	ef 92       	push	r14
    284c:	ff 92       	push	r15
    284e:	0f 93       	push	r16
    2850:	1f 93       	push	r17
    2852:	98 2e       	mov	r9, r24
    {
#if defined(ENABLE_BOILER_HUB)
    const bool hubMode = inHubMode();
    2854:	0e 94 0f 04 	call	0x81e	; 0x81e <getMinBoilerOnMinutes()>
    2858:	88 2e       	mov	r8, r24
    285a:	88 23       	and	r24, r24
    285c:	a9 f1       	breq	.+106    	; 0x28c8 <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x8a>
    285e:	88 24       	eor	r8, r8
    2860:	83 94       	inc	r8
      {
#if 0 && defined(DEBUG)
      DEBUG_SERIAL_PRINT_FLASHSTRING("TXwait");
#endif
      // Only do nap+poll if lots of time left.
      while(sleepUntil > fmax(getSubCycleTime() + (50/SUBCYCLE_TICK_MS_RD), GSCT_MAX))
    2862:	89 2d       	mov	r24, r9
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	5c 01       	movw	r10, r24
    2868:	cc 24       	eor	r12, r12
    286a:	b7 fc       	sbrc	r11, 7
    286c:	c0 94       	com	r12
    286e:	dc 2c       	mov	r13, r12
    2870:	06 c0       	rjmp	.+12     	; 0x287e <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x40>
//   * force if true then force full poll on every call (ie do not internally rate-limit)
// NOTE: implementation may not be in power-management module.
bool pollIO(bool force = false);
// Nap productively polling I/O, etc, across the system while spending time in low-power mode if possible.
// Typically sleeps for about 30ms; tries to allow ealier wakeup if interrupt is received, etc.
static void inline nap30AndPoll() { nap(WDTO_30MS); pollIO(true); }
    2872:	81 e0       	ldi	r24, 0x01	; 1
    2874:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <nap(signed char)>
    2878:	81 e0       	ldi	r24, 0x01	; 1
    287a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <pollIO(bool)>
    287e:	60 91 b2 00 	lds	r22, 0x00B2
    2882:	70 e0       	ldi	r23, 0x00	; 0
    2884:	69 5f       	subi	r22, 0xF9	; 249
    2886:	7f 4f       	sbci	r23, 0xFF	; 255
    2888:	88 27       	eor	r24, r24
    288a:	77 fd       	sbrc	r23, 7
    288c:	80 95       	com	r24
    288e:	98 2f       	mov	r25, r24
    2890:	0e 94 16 3d 	call	0x7a2c	; 0x7a2c <__floatsisf>
    2894:	20 e0       	ldi	r18, 0x00	; 0
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	4f e7       	ldi	r20, 0x7F	; 127
    289a:	53 e4       	ldi	r21, 0x43	; 67
    289c:	0e 94 51 3d 	call	0x7aa2	; 0x7aa2 <fmax>
    28a0:	7b 01       	movw	r14, r22
    28a2:	8c 01       	movw	r16, r24
    28a4:	c6 01       	movw	r24, r12
    28a6:	b5 01       	movw	r22, r10
    28a8:	0e 94 16 3d 	call	0x7a2c	; 0x7a2c <__floatsisf>
    28ac:	a8 01       	movw	r20, r16
    28ae:	97 01       	movw	r18, r14
    28b0:	0e 94 94 3d 	call	0x7b28	; 0x7b28 <__gesf2>
    28b4:	18 16       	cp	r1, r24
    28b6:	ec f2       	brlt	.-70     	; 0x2872 <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x34>
    28b8:	03 c0       	rjmp	.+6      	; 0x28c0 <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x82>
        { nap30AndPoll(); } // Assumed ~30ms sleep max.
      // Poll in remaining time without nap.
      while(sleepUntil > getSubCycleTime())
        { pollIO(); }
    28ba:	80 e0       	ldi	r24, 0x00	; 0
    28bc:	0e 94 1e 07 	call	0xe3c	; 0xe3c <pollIO(bool)>
#endif
      // Only do nap+poll if lots of time left.
      while(sleepUntil > fmax(getSubCycleTime() + (50/SUBCYCLE_TICK_MS_RD), GSCT_MAX))
        { nap30AndPoll(); } // Assumed ~30ms sleep max.
      // Poll in remaining time without nap.
      while(sleepUntil > getSubCycleTime())
    28c0:	80 91 b2 00 	lds	r24, 0x00B2
    28c4:	89 15       	cp	r24, r9
    28c6:	c8 f3       	brcs	.-14     	; 0x28ba <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x7c>
#endif
      }
#endif

    // Sleep until exactly the right time.
    sleepUntilSubCycleTime(sleepUntil);
    28c8:	89 2d       	mov	r24, r9
    28ca:	0e 94 19 21 	call	0x4232	; 0x4232 <sleepUntilSubCycleTime(unsigned char)>

#if defined(ENABLE_BOILER_HUB)
    // Final quick poll for RX activity.
    if(hubMode) { FHT8VCallForHeatPoll(); }
    28ce:	88 20       	and	r8, r8
    28d0:	11 f0       	breq	.+4      	; 0x28d6 <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x98>
    28d2:	0e 94 df 12 	call	0x25be	; 0x25be <FHT8VCallForHeatPoll()>
#endif
    }
    28d6:	1f 91       	pop	r17
    28d8:	0f 91       	pop	r16
    28da:	ff 90       	pop	r15
    28dc:	ef 90       	pop	r14
    28de:	df 90       	pop	r13
    28e0:	cf 90       	pop	r12
    28e2:	bf 90       	pop	r11
    28e4:	af 90       	pop	r10
    28e6:	9f 90       	pop	r9
    28e8:	8f 90       	pop	r8
    28ea:	08 95       	ret

000028ec <FHT8VSetHC2(unsigned char)>:
  eeprom_smart_erase_byte((uint8_t*)EE_START_FHT8V_HC2);
  }

// Set (non-volatile) HC1 and HC2 for single/primary FHT8V wireless valve under control.
void FHT8VSetHC1(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC1, hc); }
void FHT8VSetHC2(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC2, hc); }
    28ec:	68 2f       	mov	r22, r24
    28ee:	81 e1       	ldi	r24, 0x11	; 17
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	0e 94 49 10 	call	0x2092	; 0x2092 <eeprom_smart_update_byte(unsigned char*, unsigned char)>
    28f6:	08 95       	ret

000028f8 <FHT8VSetHC1(unsigned char)>:
  eeprom_smart_erase_byte((uint8_t*)EE_START_FHT8V_HC1);
  eeprom_smart_erase_byte((uint8_t*)EE_START_FHT8V_HC2);
  }

// Set (non-volatile) HC1 and HC2 for single/primary FHT8V wireless valve under control.
void FHT8VSetHC1(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC1, hc); }
    28f8:	68 2f       	mov	r22, r24
    28fa:	80 e1       	ldi	r24, 0x10	; 16
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	0e 94 49 10 	call	0x2092	; 0x2092 <eeprom_smart_update_byte(unsigned char*, unsigned char)>
    2902:	08 95       	ret

00002904 <FHT8VClearHC()>:
  }

// Clear both housecode parts (and thus disable local valve).
void FHT8VClearHC()
  {
  eeprom_smart_erase_byte((uint8_t*)EE_START_FHT8V_HC1);
    2904:	80 e1       	ldi	r24, 0x10	; 16
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	0e 94 1f 10 	call	0x203e	; 0x203e <eeprom_smart_erase_byte(unsigned char*)>
  eeprom_smart_erase_byte((uint8_t*)EE_START_FHT8V_HC2);
    290c:	81 e1       	ldi	r24, 0x11	; 17
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	0e 94 1f 10 	call	0x203e	; 0x203e <eeprom_smart_erase_byte(unsigned char*)>
  }
    2914:	08 95       	ret

00002916 <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)>:
//   * trailer  if not null then a stats trailer is appended, built from that info plus a CRC
//   * command  on entry hc1, hc2 (and addresss if used) must be set correctly, this sets the command and extension; never NULL
// The generated command frame can be resent indefinitely.
// The output buffer used must be (at least) FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE bytes.
// Returns pointer to the terminating 0xff on exit.
uint8_t *FHT8VCreateValveSetCmdFrameHT_r(uint8_t *const bptrInitial, const bool doHeader, fht8v_msg_t *const command, const uint8_t TRVPercentOpen, const FullStatsMessageCore_t *trailer)
    2916:	cf 92       	push	r12
    2918:	df 92       	push	r13
    291a:	ef 92       	push	r14
    291c:	ff 92       	push	r15
    291e:	0f 93       	push	r16
    2920:	1f 93       	push	r17
    2922:	cf 93       	push	r28
    2924:	df 93       	push	r29
    2926:	7c 01       	movw	r14, r24
    2928:	36 2f       	mov	r19, r22
    292a:	ea 01       	movw	r28, r20
  {
  uint8_t *bptr = bptrInitial;

  command->command = 0x26;
    292c:	86 e2       	ldi	r24, 0x26	; 38
    292e:	8a 83       	std	Y+2, r24	; 0x02
  command->extension = (TRVPercentOpen * 255) / 100;
    2930:	8f ef       	ldi	r24, 0xFF	; 255
    2932:	28 9f       	mul	r18, r24
    2934:	c0 01       	movw	r24, r0
    2936:	11 24       	eor	r1, r1
    2938:	64 e6       	ldi	r22, 0x64	; 100
    293a:	70 e0       	ldi	r23, 0x00	; 0
    293c:	0e 94 cb 3d 	call	0x7b96	; 0x7b96 <__divmodhi4>
    2940:	6b 83       	std	Y+3, r22	; 0x03

  // Add RFM22/32-friendly pre-preamble if requested, eg when calling for heat from the boiler (TRV actually open).
  // NOTE: this requires more buffer space.
  if(doHeader)
    2942:	33 23       	and	r19, r19
    2944:	11 f4       	brne	.+4      	; 0x294a <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)+0x34>
    2946:	c7 01       	movw	r24, r14
    2948:	09 c0       	rjmp	.+18     	; 0x295c <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)+0x46>
    {
    memset(bptr, RFM22_PREAMBLE_BYTE, RFM22_PREAMBLE_BYTES);
    294a:	c7 01       	movw	r24, r14
    294c:	6a ea       	ldi	r22, 0xAA	; 170
    294e:	70 e0       	ldi	r23, 0x00	; 0
    2950:	45 e0       	ldi	r20, 0x05	; 5
    2952:	50 e0       	ldi	r21, 0x00	; 0
    2954:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <memset>
    bptr += RFM22_PREAMBLE_BYTES;
    2958:	c7 01       	movw	r24, r14
    295a:	05 96       	adiw	r24, 0x05	; 5
    }

  bptr = FHT8VCreate200usBitStreamBptr(bptr, command);
    295c:	be 01       	movw	r22, r28
    295e:	0e 94 e6 10 	call	0x21cc	; 0x21cc <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>
    2962:	d8 2e       	mov	r13, r24
    2964:	c9 2e       	mov	r12, r25

#if defined(ALLOW_STATS_TX)
  if(NULL != trailer)
    2966:	01 15       	cp	r16, r1
    2968:	11 05       	cpc	r17, r1
    296a:	79 f0       	breq	.+30     	; 0x298a <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)+0x74>
      }
    else
#endif
      {
      // Assume enough space in buffer for largest possible stats message.
      uint8_t * const tail = encodeFullStatsMessageCore(bptr, FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE - (bptr - bptrInitial), getStatsTXLevel(), false, trailer);
    296c:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <getStatsTXLevel()>
    2970:	ac 01       	movw	r20, r24
    2972:	6e 2d       	mov	r22, r14
    2974:	64 5c       	subi	r22, 0xC4	; 196
    2976:	6d 19       	sub	r22, r13
    2978:	8d 2d       	mov	r24, r13
    297a:	9c 2d       	mov	r25, r12
    297c:	20 e0       	ldi	r18, 0x00	; 0
    297e:	0e 94 56 1c 	call	0x38ac	; 0x38ac <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)>
      if(NULL != tail) { bptr = tail; } // Encoding should not actually fail, but this copes gracefully if so!
    2982:	00 97       	sbiw	r24, 0x00	; 0
    2984:	11 f0       	breq	.+4      	; 0x298a <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)+0x74>
    2986:	d8 2e       	mov	r13, r24
    2988:	c9 2e       	mov	r12, r25
  // Check that the buffer end was not overrun.
  if(bptr - bptrInitial >= FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE) { panic(F("TX gen too large")); }
#endif

  return(bptr);
  }
    298a:	8d 2d       	mov	r24, r13
    298c:	9c 2d       	mov	r25, r12
    298e:	df 91       	pop	r29
    2990:	cf 91       	pop	r28
    2992:	1f 91       	pop	r17
    2994:	0f 91       	pop	r16
    2996:	ff 90       	pop	r15
    2998:	ef 90       	pop	r14
    299a:	df 90       	pop	r13
    299c:	cf 90       	pop	r12
    299e:	08 95       	ret

000029a0 <FHT8VCreateValveSetCmdFrame_r(unsigned char*, fht8v_msg_t*, unsigned char)>:
//
// Implicitly decides whether to add optional header and trailer components.
//
// NOTE: with SUPPORT_TEMP_TX defined will also insert trailing stats payload where appropriate.
// Also reports local stats as if remote.
uint8_t *FHT8VCreateValveSetCmdFrame_r(uint8_t *const bptr, fht8v_msg_t *command, const uint8_t TRVPercentOpen)
    29a0:	bf 92       	push	r11
    29a2:	cf 92       	push	r12
    29a4:	df 92       	push	r13
    29a6:	ef 92       	push	r14
    29a8:	ff 92       	push	r15
    29aa:	0f 93       	push	r16
    29ac:	1f 93       	push	r17
    29ae:	df 93       	push	r29
    29b0:	cf 93       	push	r28
    29b2:	cd b7       	in	r28, 0x3d	; 61
    29b4:	de b7       	in	r29, 0x3e	; 62
    29b6:	27 97       	sbiw	r28, 0x07	; 7
    29b8:	0f b6       	in	r0, 0x3f	; 63
    29ba:	f8 94       	cli
    29bc:	de bf       	out	0x3e, r29	; 62
    29be:	0f be       	out	0x3f, r0	; 63
    29c0:	cd bf       	out	0x3d, r28	; 61
    29c2:	7c 01       	movw	r14, r24
    29c4:	6b 01       	movw	r12, r22
    29c6:	b4 2e       	mov	r11, r20
  {
  const bool etmsp = enableTrailingStatsPayload();
    29c8:	0e 94 65 16 	call	0x2cca	; 0x2cca <enableTrailingStatsPayload()>
  // OR if adding a trailer that the hub should see.
  // NOTE: this requires more buffer space.
  const bool doHeader = etmsp
#if defined(RFM22_SYNC_BCFH)
  // NOTE: the percentage-open threshold to call for heat from the boiler is set to allow the valve to open significantly, etc.
      || (TRVPercentOpen >= NominalRadValve.getMinValvePcReallyOpen())
    29cc:	88 23       	and	r24, r24
    29ce:	49 f4       	brne	.+18     	; 0x29e2 <FHT8VCreateValveSetCmdFrame_r(unsigned char*, fht8v_msg_t*, unsigned char)+0x42>
    29d0:	0e 94 6f 04 	call	0x8de	; 0x8de <ModelledRadValve::getMinValvePcReallyOpen()>
    29d4:	60 e0       	ldi	r22, 0x00	; 0
    29d6:	b8 16       	cp	r11, r24
    29d8:	08 f0       	brcs	.+2      	; 0x29dc <FHT8VCreateValveSetCmdFrame_r(unsigned char*, fht8v_msg_t*, unsigned char)+0x3c>
    29da:	61 e0       	ldi	r22, 0x01	; 1
    29dc:	00 e0       	ldi	r16, 0x00	; 0
    29de:	10 e0       	ldi	r17, 0x00	; 0
    29e0:	0e c0       	rjmp	.+28     	; 0x29fe <FHT8VCreateValveSetCmdFrame_r(unsigned char*, fht8v_msg_t*, unsigned char)+0x5e>
//    trailer.tempC16 = getTemperatureC16(); // Use last value read.
//    }
  FullStatsMessageCore_t trailer;
  if(doTrailer)
    {
    populateCoreStats(&trailer);
    29e2:	8e 01       	movw	r16, r28
    29e4:	0f 5f       	subi	r16, 0xFF	; 255
    29e6:	1f 4f       	sbci	r17, 0xFF	; 255
    29e8:	c8 01       	movw	r24, r16
    29ea:	0e 94 22 08 	call	0x1044	; 0x1044 <populateCoreStats(FullStatsMessageCore*)>
    // Record stats as if remote, but secure, and with ID.
    recordCoreStats(true, &trailer);
    29ee:	81 e0       	ldi	r24, 0x01	; 1
    29f0:	b8 01       	movw	r22, r16
    29f2:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <recordCoreStats(bool, FullStatsMessageCore const*)>
    // Ensure that no ID is encoded in the message sent on the air since it would be a repeat from the FHT8V frame.
    trailer.containsID = false;
    29f6:	89 81       	ldd	r24, Y+1	; 0x01
    29f8:	8e 7f       	andi	r24, 0xFE	; 254
    29fa:	89 83       	std	Y+1, r24	; 0x01
    29fc:	61 e0       	ldi	r22, 0x01	; 1
    }

  return(FHT8VCreateValveSetCmdFrameHT_r(bptr, doHeader, command, TRVPercentOpen, (doTrailer ? &trailer : NULL)));
    29fe:	c7 01       	movw	r24, r14
    2a00:	a6 01       	movw	r20, r12
    2a02:	2b 2d       	mov	r18, r11
    2a04:	0e 94 8b 14 	call	0x2916	; 0x2916 <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)>
  }
    2a08:	27 96       	adiw	r28, 0x07	; 7
    2a0a:	0f b6       	in	r0, 0x3f	; 63
    2a0c:	f8 94       	cli
    2a0e:	de bf       	out	0x3e, r29	; 62
    2a10:	0f be       	out	0x3f, r0	; 63
    2a12:	cd bf       	out	0x3d, r28	; 61
    2a14:	cf 91       	pop	r28
    2a16:	df 91       	pop	r29
    2a18:	1f 91       	pop	r17
    2a1a:	0f 91       	pop	r16
    2a1c:	ff 90       	pop	r15
    2a1e:	ef 90       	pop	r14
    2a20:	df 90       	pop	r13
    2a22:	cf 90       	pop	r12
    2a24:	bf 90       	pop	r11
    2a26:	08 95       	ret

00002a28 <FHT8VCreateValveSetCmdFrame()>:
// Create FHT8V TRV outgoing valve-setting command frame (terminated with 0xff) in the shared TX buffer.
// The getTRVPercentOpen() result is used to generate the frame.
// HC1 and HC2 are fetched with the FHT8VGetHC1() and FHT8VGetHC2() calls, and address is always 0.
// The generated command frame can be resent indefinitely.
// If no valve is set up then this may simply terminate an empty buffer with 0xff.
void FHT8VCreateValveSetCmdFrame()
    2a28:	df 93       	push	r29
    2a2a:	cf 93       	push	r28
    2a2c:	00 d0       	rcall	.+0      	; 0x2a2e <FHT8VCreateValveSetCmdFrame()+0x6>
    2a2e:	00 d0       	rcall	.+0      	; 0x2a30 <FHT8VCreateValveSetCmdFrame()+0x8>
    2a30:	cd b7       	in	r28, 0x3d	; 61
    2a32:	de b7       	in	r29, 0x3e	; 62
  {
  if(!localFHT8VTRVEnabled())
    2a34:	0e 94 45 11 	call	0x228a	; 0x228a <localFHT8VTRVEnabled()>
    2a38:	88 23       	and	r24, r24
    2a3a:	21 f4       	brne	.+8      	; 0x2a44 <FHT8VCreateValveSetCmdFrame()+0x1c>
    {
    // Ensure that buffer is terminated, though empty.
    FHT8VTXCommandArea[0] = 0xff;
    2a3c:	8f ef       	ldi	r24, 0xFF	; 255
    2a3e:	80 93 e4 02 	sts	0x02E4, r24
    2a42:	1b c0       	rjmp	.+54     	; 0x2a7a <FHT8VCreateValveSetCmdFrame()+0x52>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2a44:	f9 99       	sbic	0x1f, 1	; 31
    2a46:	fe cf       	rjmp	.-4      	; 0x2a44 <FHT8VCreateValveSetCmdFrame()+0x1c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2a48:	80 e1       	ldi	r24, 0x10	; 16
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	92 bd       	out	0x22, r25	; 34
    2a4e:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2a50:	f8 9a       	sbi	0x1f, 0	; 31
    2a52:	20 b5       	in	r18, 0x20	; 32
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2a54:	f9 99       	sbic	0x1f, 1	; 31
    2a56:	fe cf       	rjmp	.-4      	; 0x2a54 <FHT8VCreateValveSetCmdFrame()+0x2c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2a58:	81 e1       	ldi	r24, 0x11	; 17
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	92 bd       	out	0x22, r25	; 34
    2a5e:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2a60:	f8 9a       	sbi	0x1f, 0	; 31
    2a62:	80 b5       	in	r24, 0x20	; 32
    return;
    }

  fht8v_msg_t command;
  command.hc1 = FHT8VGetHC1();
  command.hc2 = FHT8VGetHC2();
    2a64:	8a 83       	std	Y+2, r24	; 0x02
    2a66:	40 91 1b 02 	lds	r20, 0x021B
    FHT8VTXCommandArea[0] = 0xff;
    return;
    }

  fht8v_msg_t command;
  command.hc1 = FHT8VGetHC1();
    2a6a:	29 83       	std	Y+1, r18	; 0x01
  command.hc2 = FHT8VGetHC2();
#ifdef FHT8V_ADR_USED
  command.address = 0;
#endif

  FHT8VCreateValveSetCmdFrame_r(FHT8VTXCommandArea, &command, NominalRadValve.get());
    2a6c:	84 ee       	ldi	r24, 0xE4	; 228
    2a6e:	92 e0       	ldi	r25, 0x02	; 2
    2a70:	be 01       	movw	r22, r28
    2a72:	6f 5f       	subi	r22, 0xFF	; 255
    2a74:	7f 4f       	sbci	r23, 0xFF	; 255
    2a76:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <FHT8VCreateValveSetCmdFrame_r(unsigned char*, fht8v_msg_t*, unsigned char)>
  }
    2a7a:	0f 90       	pop	r0
    2a7c:	0f 90       	pop	r0
    2a7e:	0f 90       	pop	r0
    2a80:	0f 90       	pop	r0
    2a82:	cf 91       	pop	r28
    2a84:	df 91       	pop	r29
    2a86:	08 95       	ret

00002a88 <doSync(bool)>:
    }

// Run the algorithm to get in sync with the receiver.
// Uses halfSecondCount.
// Iff this returns true then a(nother) call FHT8VPollSyncAndTX_Next() at or before each 0.5s from the cycle start should be made.
static bool doSync(const bool allowDoubleTX)
    2a88:	1f 93       	push	r17
    2a8a:	df 93       	push	r29
    2a8c:	cf 93       	push	r28
    2a8e:	00 d0       	rcall	.+0      	; 0x2a90 <doSync(bool)+0x8>
    2a90:	00 d0       	rcall	.+0      	; 0x2a92 <doSync(bool)+0xa>
    2a92:	cd b7       	in	r28, 0x3d	; 61
    2a94:	de b7       	in	r29, 0x3e	; 62
    2a96:	18 2f       	mov	r17, r24
  {
  // Do not attempt sync at all (and thus do not attempt any other TX) if local FHT8V valve disabled.
  if(!localFHT8VTRVEnabled())
    2a98:	0e 94 45 11 	call	0x228a	; 0x228a <localFHT8VTRVEnabled()>
    2a9c:	88 23       	and	r24, r24
    2a9e:	19 f4       	brne	.+6      	; 0x2aa6 <doSync(bool)+0x1e>
    { syncedWithFHT8V = false; return(false); }
    2aa0:	10 92 e1 02 	sts	0x02E1, r1
    2aa4:	9e c0       	rjmp	.+316    	; 0x2be2 <doSync(bool)+0x15a>

  if(0 == syncStateFHT8V)
    2aa6:	80 91 e3 02 	lds	r24, 0x02E3
    2aaa:	88 23       	and	r24, r24
    2aac:	39 f4       	brne	.+14     	; 0x2abc <doSync(bool)+0x34>
    {
    // Starting sync process.
    syncStateFHT8V = 241;
    2aae:	81 ef       	ldi	r24, 0xF1	; 241
    2ab0:	80 93 e3 02 	sts	0x02E3, r24
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_TIMESTAMP();
    DEBUG_SERIAL_PRINT(' ');
    //DEBUG_SERIAL_PRINTLN_FLASHSTRING("FHT8V syncing...");
#endif
    serialPrintlnAndFlush(F("FHT8V SYNC..."));
    2ab4:	87 e4       	ldi	r24, 0x47	; 71
    2ab6:	91 e0       	ldi	r25, 0x01	; 1
    2ab8:	0e 94 13 27 	call	0x4e26	; 0x4e26 <serialPrintlnAndFlush(__FlashStringHelper const*)>
    }

  if(syncStateFHT8V >= 2)
    2abc:	20 91 e3 02 	lds	r18, 0x02E3
    2ac0:	22 30       	cpi	r18, 0x02	; 2
    2ac2:	08 f4       	brcc	.+2      	; 0x2ac6 <doSync(bool)+0x3e>
    2ac4:	45 c0       	rjmp	.+138    	; 0x2b50 <doSync(bool)+0xc8>
    {
    // Generate and send sync (command 12) message immediately for odd-numbered ticks, ie once per second.
    if(syncStateFHT8V & 1)
    2ac6:	20 ff       	sbrs	r18, 0
    2ac8:	2b c0       	rjmp	.+86     	; 0x2b20 <doSync(bool)+0x98>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2aca:	f9 99       	sbic	0x1f, 1	; 31
    2acc:	fe cf       	rjmp	.-4      	; 0x2aca <doSync(bool)+0x42>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2ace:	80 e1       	ldi	r24, 0x10	; 16
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	92 bd       	out	0x22, r25	; 34
    2ad4:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2ad6:	f8 9a       	sbi	0x1f, 0	; 31
    2ad8:	30 b5       	in	r19, 0x20	; 32
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2ada:	f9 99       	sbic	0x1f, 1	; 31
    2adc:	fe cf       	rjmp	.-4      	; 0x2ada <doSync(bool)+0x52>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2ade:	81 e1       	ldi	r24, 0x11	; 17
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	92 bd       	out	0x22, r25	; 34
    2ae4:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2ae6:	f8 9a       	sbi	0x1f, 0	; 31
    2ae8:	80 b5       	in	r24, 0x20	; 32
      {
      fht8v_msg_t command;
      command.hc1 = FHT8VGetHC1();
      command.hc2 = FHT8VGetHC2();
    2aea:	8a 83       	std	Y+2, r24	; 0x02
      command.command = 0x2c; // Command 12, extension byte present.
    2aec:	8c e2       	ldi	r24, 0x2C	; 44
    2aee:	8b 83       	std	Y+3, r24	; 0x03
      command.extension = syncStateFHT8V;
    2af0:	2c 83       	std	Y+4, r18	; 0x04
    {
    // Generate and send sync (command 12) message immediately for odd-numbered ticks, ie once per second.
    if(syncStateFHT8V & 1)
      {
      fht8v_msg_t command;
      command.hc1 = FHT8VGetHC1();
    2af2:	39 83       	std	Y+1, r19	; 0x01
      command.hc2 = FHT8VGetHC2();
      command.command = 0x2c; // Command 12, extension byte present.
      command.extension = syncStateFHT8V;
      FHT8VCreate200usBitStreamBptr(FHT8VTXCommandArea, &command);
    2af4:	84 ee       	ldi	r24, 0xE4	; 228
    2af6:	92 e0       	ldi	r25, 0x02	; 2
    2af8:	be 01       	movw	r22, r28
    2afa:	6f 5f       	subi	r22, 0xFF	; 255
    2afc:	7f 4f       	sbci	r23, 0xFF	; 255
    2afe:	0e 94 e6 10 	call	0x21cc	; 0x21cc <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>
      if(halfSecondCount > 0)
    2b02:	80 91 e0 02 	lds	r24, 0x02E0
    2b06:	88 23       	and	r24, r24
    2b08:	31 f0       	breq	.+12     	; 0x2b16 <doSync(bool)+0x8e>
        { sleepUntilSubCycleTimeOptionalRX((SUB_CYCLE_TICKS_PER_S/2) * halfSecondCount); }
    2b0a:	82 95       	swap	r24
    2b0c:	88 0f       	add	r24, r24
    2b0e:	88 0f       	add	r24, r24
    2b10:	80 7c       	andi	r24, 0xC0	; 192
    2b12:	0e 94 1f 14 	call	0x283e	; 0x283e <sleepUntilSubCycleTimeOptionalRX(unsigned char)>
      FHT8VTXFHTQueueAndSendCmd(FHT8VTXCommandArea, allowDoubleTX); // SEND SYNC
    2b16:	84 ee       	ldi	r24, 0xE4	; 228
    2b18:	92 e0       	ldi	r25, 0x02	; 2
    2b1a:	61 2f       	mov	r22, r17
    2b1c:	0e 94 de 13 	call	0x27bc	; 0x27bc <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)>
      DEBUG_SERIAL_PRINTLN();
#endif
      }

    // After penultimate sync TX set up time to sending of final sync command.
    if(1 == --syncStateFHT8V)
    2b20:	80 91 e3 02 	lds	r24, 0x02E3
    2b24:	81 50       	subi	r24, 0x01	; 1
    2b26:	80 93 e3 02 	sts	0x02E3, r24
    2b2a:	81 30       	cpi	r24, 0x01	; 1
    2b2c:	09 f0       	breq	.+2      	; 0x2b30 <doSync(bool)+0xa8>
    2b2e:	58 c0       	rjmp	.+176    	; 0x2be0 <doSync(bool)+0x158>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2b30:	f9 99       	sbic	0x1f, 1	; 31
    2b32:	fe cf       	rjmp	.-4      	; 0x2b30 <doSync(bool)+0xa8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2b34:	81 e1       	ldi	r24, 0x11	; 17
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	92 bd       	out	0x22, r25	; 34
    2b3a:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2b3c:	f8 9a       	sbi	0x1f, 0	; 31
    2b3e:	90 b5       	in	r25, 0x20	; 32
      {
      // Set up timer to sent sync final (0) command
      // with formula: t = 0.5 * (HC2 & 7) + 4 seconds.
      halfSecondsToNextFHT8VTX = (FHT8VGetHC2() & 7) + 8; // Note units of half-seconds for this counter.
      halfSecondsToNextFHT8VTX -= (MAX_HSC - halfSecondCount);
    2b40:	80 91 e0 02 	lds	r24, 0x02E0
    2b44:	8b 5f       	subi	r24, 0xFB	; 251
    2b46:	97 70       	andi	r25, 0x07	; 7
    2b48:	89 0f       	add	r24, r25
    2b4a:	80 93 e2 02 	sts	0x02E2, r24
    2b4e:	46 c0       	rjmp	.+140    	; 0x2bdc <doSync(bool)+0x154>
      }
    }

  else // syncStateFHT8V == 1 so waiting to send sync final (0) command...
    {
    if(--halfSecondsToNextFHT8VTX == 0)
    2b50:	80 91 e2 02 	lds	r24, 0x02E2
    2b54:	81 50       	subi	r24, 0x01	; 1
    2b56:	80 93 e2 02 	sts	0x02E2, r24
    2b5a:	88 23       	and	r24, r24
    2b5c:	09 f0       	breq	.+2      	; 0x2b60 <doSync(bool)+0xd8>
    2b5e:	40 c0       	rjmp	.+128    	; 0x2be0 <doSync(bool)+0x158>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2b60:	f9 99       	sbic	0x1f, 1	; 31
    2b62:	fe cf       	rjmp	.-4      	; 0x2b60 <doSync(bool)+0xd8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2b64:	80 e1       	ldi	r24, 0x10	; 16
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	92 bd       	out	0x22, r25	; 34
    2b6a:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2b6c:	f8 9a       	sbi	0x1f, 0	; 31
    2b6e:	20 b5       	in	r18, 0x20	; 32
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2b70:	f9 99       	sbic	0x1f, 1	; 31
    2b72:	fe cf       	rjmp	.-4      	; 0x2b70 <doSync(bool)+0xe8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2b74:	81 e1       	ldi	r24, 0x11	; 17
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	92 bd       	out	0x22, r25	; 34
    2b7a:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2b7c:	f8 9a       	sbi	0x1f, 0	; 31
    2b7e:	80 b5       	in	r24, 0x20	; 32
      {
      // Send sync final command.
      fht8v_msg_t command;
      command.hc1 = FHT8VGetHC1();
      command.hc2 = FHT8VGetHC2();
    2b80:	8a 83       	std	Y+2, r24	; 0x02
      command.command = 0x20; // Command 0, extension byte present.
    2b82:	80 e2       	ldi	r24, 0x20	; 32
    2b84:	8b 83       	std	Y+3, r24	; 0x03
      command.extension = 0; // DHD20130324: could set to TRVPercentOpen, but anything other than zero seems to lock up FHT8V-3 units.
    2b86:	1c 82       	std	Y+4, r1	; 0x04
      FHT8V_isValveOpen = false; // Note that valve will be closed (0%) upon receipt.
    2b88:	10 92 20 03 	sts	0x0320, r1
    {
    if(--halfSecondsToNextFHT8VTX == 0)
      {
      // Send sync final command.
      fht8v_msg_t command;
      command.hc1 = FHT8VGetHC1();
    2b8c:	29 83       	std	Y+1, r18	; 0x01
      command.hc2 = FHT8VGetHC2();
      command.command = 0x20; // Command 0, extension byte present.
      command.extension = 0; // DHD20130324: could set to TRVPercentOpen, but anything other than zero seems to lock up FHT8V-3 units.
      FHT8V_isValveOpen = false; // Note that valve will be closed (0%) upon receipt.
      FHT8VCreate200usBitStreamBptr(FHT8VTXCommandArea, &command);      
    2b8e:	84 ee       	ldi	r24, 0xE4	; 228
    2b90:	92 e0       	ldi	r25, 0x02	; 2
    2b92:	be 01       	movw	r22, r28
    2b94:	6f 5f       	subi	r22, 0xFF	; 255
    2b96:	7f 4f       	sbci	r23, 0xFF	; 255
    2b98:	0e 94 e6 10 	call	0x21cc	; 0x21cc <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>
      if(halfSecondCount > 0) { sleepUntilSubCycleTimeOptionalRX((SUB_CYCLE_TICKS_PER_S/2) * halfSecondCount); }
    2b9c:	80 91 e0 02 	lds	r24, 0x02E0
    2ba0:	88 23       	and	r24, r24
    2ba2:	31 f0       	breq	.+12     	; 0x2bb0 <doSync(bool)+0x128>
    2ba4:	82 95       	swap	r24
    2ba6:	88 0f       	add	r24, r24
    2ba8:	88 0f       	add	r24, r24
    2baa:	80 7c       	andi	r24, 0xC0	; 192
    2bac:	0e 94 1f 14 	call	0x283e	; 0x283e <sleepUntilSubCycleTimeOptionalRX(unsigned char)>
      FHT8VTXFHTQueueAndSendCmd(FHT8VTXCommandArea, allowDoubleTX); // SEND SYNC FINAL
    2bb0:	84 ee       	ldi	r24, 0xE4	; 228
    2bb2:	92 e0       	ldi	r25, 0x02	; 2
    2bb4:	61 2f       	mov	r22, r17
    2bb6:	0e 94 de 13 	call	0x27bc	; 0x27bc <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)>
#if 0 && defined(DEBUG)
      DEBUG_SERIAL_TIMESTAMP();
      DEBUG_SERIAL_PRINT(' ');
      //DEBUG_SERIAL_PRINTLN_FLASHSTRING(" FHT8V SYNC FINAL");
#endif
      serialPrintlnAndFlush(F("FHT8V SYNC FINAL"));
    2bba:	86 e3       	ldi	r24, 0x36	; 54
    2bbc:	91 e0       	ldi	r25, 0x01	; 1
    2bbe:	0e 94 13 27 	call	0x4e26	; 0x4e26 <serialPrintlnAndFlush(__FlashStringHelper const*)>

      // Assume now in sync...
      syncedWithFHT8V = true;
    2bc2:	81 e0       	ldi	r24, 0x01	; 1
    2bc4:	80 93 e1 02 	sts	0x02E1, r24
      // On PICAXE there was no time to recompute valve-setting command immediately after SYNC FINAL SEND...
      // Mark buffer as empty to get it filled with the real TRV valve-setting command ASAP.
      //*FHT8VTXCommandArea = 0xff;

      // On ATmega there is plenty of CPU heft to fill command buffer immediately with valve-setting command.
      FHT8VCreateValveSetCmdFrame();
    2bc8:	0e 94 14 15 	call	0x2a28	; 0x2a28 <FHT8VCreateValveSetCmdFrame()>

      // Set up correct delay to next TX; no more this minor cycle...
      halfSecondsToNextFHT8VTX = FHT8VTXGapHalfSeconds(command.hc2, halfSecondCount);
    2bcc:	90 91 e0 02 	lds	r25, 0x02E0
    2bd0:	9d 51       	subi	r25, 0x1D	; 29
    2bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd4:	87 70       	andi	r24, 0x07	; 7
    2bd6:	98 0f       	add	r25, r24
    2bd8:	90 93 e2 02 	sts	0x02E2, r25
    2bdc:	80 e0       	ldi	r24, 0x00	; 0
    2bde:	01 c0       	rjmp	.+2      	; 0x2be2 <doSync(bool)+0x15a>
      return(false);
    2be0:	81 e0       	ldi	r24, 0x01	; 1
    }

  // For simplicity, insist on being called every half-second during sync.
  // TODO: avoid forcing most of these calls to save some CPU/energy and improve responsiveness.
  return(true);
  }
    2be2:	0f 90       	pop	r0
    2be4:	0f 90       	pop	r0
    2be6:	0f 90       	pop	r0
    2be8:	0f 90       	pop	r0
    2bea:	cf 91       	pop	r28
    2bec:	df 91       	pop	r29
    2bee:	1f 91       	pop	r17
    2bf0:	08 95       	ret

00002bf2 <FHT8VPollSyncAndTX_Next(bool)>:
//
// ALSO MANAGES RX FROM OTHER NODES WHEN ENABLED IN HUB MODE.
//
// Iff this returns false then no further TX slots will be needed
// (and thus this routine need not be called again) on this minor cycle
bool FHT8VPollSyncAndTX_Next(const bool allowDoubleTX)
    2bf2:	1f 93       	push	r17
    2bf4:	18 2f       	mov	r17, r24
  {
  ++halfSecondCount; // Reflects count of calls since _First(), ie how many 
    2bf6:	90 91 e0 02 	lds	r25, 0x02E0
    2bfa:	9f 5f       	subi	r25, 0xFF	; 255
    2bfc:	90 93 e0 02 	sts	0x02E0, r25
#else

  // Give priority to getting in sync over all other tasks, though pass control to them afterwards...
  // NOTE: startup state, or state to force resync is: syncedWithFHT8V = 0 AND syncStateFHT8V = 0
  // Always make maximum effort to be heard by valve when syncing (ie do double TX).
  if(!syncedWithFHT8V) { return(doSync(true)); }
    2c00:	80 91 e1 02 	lds	r24, 0x02E1
    2c04:	88 23       	and	r24, r24
    2c06:	21 f4       	brne	.+8      	; 0x2c10 <FHT8VPollSyncAndTX_Next(bool)+0x1e>
    2c08:	81 e0       	ldi	r24, 0x01	; 1
    2c0a:	0e 94 44 15 	call	0x2a88	; 0x2a88 <doSync(bool)>
    2c0e:	27 c0       	rjmp	.+78     	; 0x2c5e <FHT8VPollSyncAndTX_Next(bool)+0x6c>

  // TX is due this slot so do it (and no more will be needed this minor cycle).
  if(0 == --halfSecondsToNextFHT8VTX)
    2c10:	80 91 e2 02 	lds	r24, 0x02E2
    2c14:	81 50       	subi	r24, 0x01	; 1
    2c16:	80 93 e2 02 	sts	0x02E2, r24
    2c1a:	88 23       	and	r24, r24
    2c1c:	11 f0       	breq	.+4      	; 0x2c22 <FHT8VPollSyncAndTX_Next(bool)+0x30>
    2c1e:	81 e0       	ldi	r24, 0x01	; 1
    2c20:	1e c0       	rjmp	.+60     	; 0x2c5e <FHT8VPollSyncAndTX_Next(bool)+0x6c>
    {
    sleepUntilSubCycleTimeOptionalRX((SUB_CYCLE_TICKS_PER_S/2) * halfSecondCount); // Sleep.
    2c22:	89 2f       	mov	r24, r25
    2c24:	82 95       	swap	r24
    2c26:	88 0f       	add	r24, r24
    2c28:	88 0f       	add	r24, r24
    2c2a:	80 7c       	andi	r24, 0xC0	; 192
    2c2c:	0e 94 1f 14 	call	0x283e	; 0x283e <sleepUntilSubCycleTimeOptionalRX(unsigned char)>
    valveSettingTX(allowDoubleTX); // Should be heard by valve.
    2c30:	81 2f       	mov	r24, r17
    2c32:	0e 94 0c 14 	call	0x2818	; 0x2818 <valveSettingTX(bool)>
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_TIMESTAMP();
    DEBUG_SERIAL_PRINT(' ');
    // DEBUG_SERIAL_PRINTLN_FLASHSTRING(" FHT8V TX");
#endif
    serialPrintlnAndFlush(F("FHT8V TX"));
    2c36:	8d e2       	ldi	r24, 0x2D	; 45
    2c38:	91 e0       	ldi	r25, 0x01	; 1
    2c3a:	0e 94 13 27 	call	0x4e26	; 0x4e26 <serialPrintlnAndFlush(__FlashStringHelper const*)>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2c3e:	f9 99       	sbic	0x1f, 1	; 31
    2c40:	fe cf       	rjmp	.-4      	; 0x2c3e <FHT8VPollSyncAndTX_Next(bool)+0x4c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2c42:	81 e1       	ldi	r24, 0x11	; 17
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	92 bd       	out	0x22, r25	; 34
    2c48:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2c4a:	f8 9a       	sbi	0x1f, 0	; 31
    2c4c:	90 b5       	in	r25, 0x20	; 32

    // Set up correct delay to next TX.
    halfSecondsToNextFHT8VTX = FHT8VTXGapHalfSeconds(FHT8VGetHC2(), halfSecondCount);
    2c4e:	80 91 e0 02 	lds	r24, 0x02E0
    2c52:	8d 51       	subi	r24, 0x1D	; 29
    2c54:	97 70       	andi	r25, 0x07	; 7
    2c56:	89 0f       	add	r24, r25
    2c58:	80 93 e2 02 	sts	0x02E2, r24
    2c5c:	80 e0       	ldi	r24, 0x00	; 0
    }

  // Will need to TX in a following slot in this minor cycle...
  return(true);
#endif
  }
    2c5e:	1f 91       	pop	r17
    2c60:	08 95       	ret

00002c62 <FHT8VPollSyncAndTX_First(bool)>:
//
// Iff this returns true then call FHT8VPollSyncAndTX_Next() at or before each 0.5s from the cycle start
// to allow for possible transmissions.
//
// See https://sourceforge.net/p/opentrv/wiki/FHT%20Protocol/ for the underlying protocol.
bool FHT8VPollSyncAndTX_First(const bool allowDoubleTX)
    2c62:	98 2f       	mov	r25, r24
  {
  halfSecondCount = 0;
    2c64:	10 92 e0 02 	sts	0x02E0, r1
#else

  // Give priority to getting in sync over all other tasks, though pass control to them afterwards...
  // NOTE: startup state, or state to force resync is: syncedWithFHT8V = 0 AND syncStateFHT8V = 0
  // Always make maximum effort to be heard by valve when syncing (ie do double TX).
  if(!syncedWithFHT8V) { return(doSync(true)); }
    2c68:	80 91 e1 02 	lds	r24, 0x02E1
    2c6c:	88 23       	and	r24, r24
    2c6e:	21 f4       	brne	.+8      	; 0x2c78 <FHT8VPollSyncAndTX_First(bool)+0x16>
    2c70:	81 e0       	ldi	r24, 0x01	; 1
    2c72:	0e 94 44 15 	call	0x2a88	; 0x2a88 <doSync(bool)>
    2c76:	08 95       	ret
#if 0 && defined(DEBUG)
   if(0 == halfSecondsToNextFHT8VTX) { panic(F("FHT8V hs count 0 too soon")); }
#endif

  // If no TX required in this minor cycle then can return false quickly (having decremented ticks-to-next-TX value suitably).
  if(halfSecondsToNextFHT8VTX > MAX_HSC+1)
    2c78:	80 91 e2 02 	lds	r24, 0x02E2
    2c7c:	85 30       	cpi	r24, 0x05	; 5
    2c7e:	28 f0       	brcs	.+10     	; 0x2c8a <FHT8VPollSyncAndTX_First(bool)+0x28>
    {
    halfSecondsToNextFHT8VTX -= (MAX_HSC+1);
    2c80:	84 50       	subi	r24, 0x04	; 4
    2c82:	80 93 e2 02 	sts	0x02E2, r24
    2c86:	80 e0       	ldi	r24, 0x00	; 0
    2c88:	08 95       	ret
    return(false); // No TX this minor cycle.
    }

  // TX is due this (first) slot so do it (and no more will be needed this minor cycle).
  if(0 == --halfSecondsToNextFHT8VTX)
    2c8a:	81 50       	subi	r24, 0x01	; 1
    2c8c:	80 93 e2 02 	sts	0x02E2, r24
    2c90:	88 23       	and	r24, r24
    2c92:	11 f0       	breq	.+4      	; 0x2c98 <FHT8VPollSyncAndTX_First(bool)+0x36>
    2c94:	81 e0       	ldi	r24, 0x01	; 1
    2c96:	08 95       	ret
    {
    valveSettingTX(allowDoubleTX); // Should be heard by valve.
    2c98:	89 2f       	mov	r24, r25
    2c9a:	0e 94 0c 14 	call	0x2818	; 0x2818 <valveSettingTX(bool)>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2c9e:	f9 99       	sbic	0x1f, 1	; 31
    2ca0:	fe cf       	rjmp	.-4      	; 0x2c9e <FHT8VPollSyncAndTX_First(bool)+0x3c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2ca2:	81 e1       	ldi	r24, 0x11	; 17
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	92 bd       	out	0x22, r25	; 34
    2ca8:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2caa:	f8 9a       	sbi	0x1f, 0	; 31
    2cac:	80 b5       	in	r24, 0x20	; 32
    DEBUG_SERIAL_PRINT(' ');
    // DEBUG_SERIAL_PRINTLN_FLASHSTRING(" FHT8V TX");
    serialPrintlnAndFlush(F("FHT8V TX"));
#endif
    // Set up correct delay to next TX.
    halfSecondsToNextFHT8VTX = FHT8VTXGapHalfSeconds(FHT8VGetHC2(), 0);
    2cae:	87 70       	andi	r24, 0x07	; 7
    2cb0:	8d 51       	subi	r24, 0x1D	; 29
    2cb2:	80 93 e2 02 	sts	0x02E2, r24
    2cb6:	80 e0       	ldi	r24, 0x00	; 0
    }

  // Will need to TX in a following slot in this minor cycle...
  return(true);
#endif
  }
    2cb8:	08 95       	ret

00002cba <getInboundStatsQueueOverrun()>:
static uint16_t inboundStatsQueueOverrun = 0;

// Get count of dropped inbound stats messages due to insufficient queue space.
uint16_t getInboundStatsQueueOverrun()
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    2cba:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2cbc:	f8 94       	cli
    { return(inboundStatsQueueOverrun); }
    2cbe:	80 91 28 03 	lds	r24, 0x0328
    2cc2:	90 91 29 03 	lds	r25, 0x0329
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2cc6:	2f bf       	out	0x3f, r18	; 63
  }
    2cc8:	08 95       	ret

00002cca <enableTrailingStatsPayload()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2cca:	f9 99       	sbic	0x1f, 1	; 31
    2ccc:	fe cf       	rjmp	.-4      	; 0x2cca <enableTrailingStatsPayload()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2cce:	8c e1       	ldi	r24, 0x1C	; 28
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	92 bd       	out	0x22, r25	; 34
    2cd4:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2cd6:	f8 9a       	sbi	0x1f, 0	; 31
    2cd8:	80 b5       	in	r24, 0x20	; 32
    2cda:	90 e0       	ldi	r25, 0x00	; 0
    2cdc:	81 38       	cpi	r24, 0x81	; 129
    2cde:	08 f4       	brcc	.+2      	; 0x2ce2 <enableTrailingStatsPayload()+0x18>
    2ce0:	91 e0       	ldi	r25, 0x01	; 1
#if !defined(enableTrailingStatsPayload)
// Returns true if an unencrypted minimal trailing static payload and similar (eg bare stats transmission) is permitted.
// True if the TX_ENABLE value is no higher than stTXmostUnsec.
// Some filtering may be required even if this is true.
// TODO: allow cacheing in RAM for speed.
bool enableTrailingStatsPayload() { return(eeprom_read_byte((uint8_t *)EE_START_STATS_TX_ENABLE) <= stTXmostUnsec); }
    2ce2:	89 2f       	mov	r24, r25
    2ce4:	08 95       	ret

00002ce6 <quickValidateRawSimpleJSONMessage(char const*)>:
// Returns true unless the buffer clearly does not contain a possible valid raw JSON message.
// This message is expected to be one object wrapped in '{' and '}'
// and containing only ASCII printable/non-control characters in the range [32,126].
// The message must be no longer than MSG_JSON_MAX_LENGTH excluding trailing null.
// This only does a quick validation for egregious errors.
bool quickValidateRawSimpleJSONMessage(const char * const buf)
    2ce6:	fc 01       	movw	r30, r24
  {
  if('{' != buf[0]) { return(false); }
    2ce8:	80 81       	ld	r24, Z
    2cea:	8b 37       	cpi	r24, 0x7B	; 123
    2cec:	a9 f4       	brne	.+42     	; 0x2d18 <quickValidateRawSimpleJSONMessage(char const*)+0x32>
  // Scan up to maximum length for terminating '}'.
  const char *p = buf + 1;
  for(int i = 1; i < MSG_JSON_MAX_LENGTH; ++i)
    2cee:	9f 01       	movw	r18, r30
    2cf0:	2a 5c       	subi	r18, 0xCA	; 202
    2cf2:	3f 4f       	sbci	r19, 0xFF	; 255
    {
    const char c = *p++;
    2cf4:	91 81       	ldd	r25, Z+1	; 0x01
    // With a terminating '}' (followed by '\0') the message is superficially valid.
    if(('}' == c) && ('\0' == *p)) { return(true); }
    2cf6:	9d 37       	cpi	r25, 0x7D	; 125
    2cf8:	29 f4       	brne	.+10     	; 0x2d04 <quickValidateRawSimpleJSONMessage(char const*)+0x1e>
    2cfa:	82 81       	ldd	r24, Z+2	; 0x02
    2cfc:	88 23       	and	r24, r24
    2cfe:	11 f4       	brne	.+4      	; 0x2d04 <quickValidateRawSimpleJSONMessage(char const*)+0x1e>
    2d00:	81 e0       	ldi	r24, 0x01	; 1
    2d02:	08 95       	ret
    // Non-printable/control character makes the message invalid.
    if((c < 32) || (c > 126)) { return(false); }
    2d04:	89 2f       	mov	r24, r25
    2d06:	80 52       	subi	r24, 0x20	; 32
    2d08:	8f 35       	cpi	r24, 0x5F	; 95
    2d0a:	30 f4       	brcc	.+12     	; 0x2d18 <quickValidateRawSimpleJSONMessage(char const*)+0x32>
    // Premature end of message renders it invalid.
    if('\0' == c) { return(false); }
    2d0c:	99 23       	and	r25, r25
    2d0e:	21 f0       	breq	.+8      	; 0x2d18 <quickValidateRawSimpleJSONMessage(char const*)+0x32>
    2d10:	31 96       	adiw	r30, 0x01	; 1
bool quickValidateRawSimpleJSONMessage(const char * const buf)
  {
  if('{' != buf[0]) { return(false); }
  // Scan up to maximum length for terminating '}'.
  const char *p = buf + 1;
  for(int i = 1; i < MSG_JSON_MAX_LENGTH; ++i)
    2d12:	e2 17       	cp	r30, r18
    2d14:	f3 07       	cpc	r31, r19
    2d16:	71 f7       	brne	.-36     	; 0x2cf4 <quickValidateRawSimpleJSONMessage(char const*)+0xe>
    2d18:	80 e0       	ldi	r24, 0x00	; 0
    if((c < 32) || (c > 126)) { return(false); }
    // Premature end of message renders it invalid.
    if('\0' == c) { return(false); }
    }
  return(false); // Bad (unterminated) message.
  }
    2d1a:	08 95       	ret

00002d1c <adjustJSONMsgForTXAndComputeCRC(char*)>:
// Computes and returns 0x5B 7-bit CRC in range [0,127]
// or 0xff if the JSON message obviously invalid and should not be TXed.
// The CRC is initialised with the initial '{' character.
// NOTE: adjusts content in place.
#define adjustJSONMsgForTXAndComputeCRC_ERR 0xff // Error return value.
uint8_t adjustJSONMsgForTXAndComputeCRC(char * const bptr)
    2d1c:	0f 93       	push	r16
    2d1e:	1f 93       	push	r17
    2d20:	18 2f       	mov	r17, r24
    2d22:	09 2f       	mov	r16, r25
  {
  // Do initial quick validation before computing CRC, etc,
  if(!quickValidateRawSimpleJSONMessage(bptr)) { return(adjustJSONMsgForTXAndComputeCRC_ERR); }
    2d24:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <quickValidateRawSimpleJSONMessage(char const*)>
    2d28:	88 23       	and	r24, r24
    2d2a:	09 f4       	brne	.+2      	; 0x2d2e <adjustJSONMsgForTXAndComputeCRC(char*)+0x12>
    2d2c:	51 c0       	rjmp	.+162    	; 0x2dd0 <adjustJSONMsgForTXAndComputeCRC(char*)+0xb4>
    2d2e:	81 2f       	mov	r24, r17
    2d30:	90 2f       	mov	r25, r16
    2d32:	9c 01       	movw	r18, r24
    2d34:	f9 01       	movw	r30, r18
    2d36:	6b e7       	ldi	r22, 0x7B	; 123
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    2d38:	11 e0       	ldi	r17, 0x01	; 1
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
    2d3a:	77 e3       	ldi	r23, 0x37	; 55
    2d3c:	44 c0       	rjmp	.+136    	; 0x2dc6 <adjustJSONMsgForTXAndComputeCRC(char*)+0xaa>
  uint8_t crc = '{';
  for(char *p = bptr; *++p; ) // Skip first char ('{'); loop until '\0'.
    {
    const char c = *p;
//    if(c & 0x80) { return(adjustJSONMsgForTXAndComputeCRC_ERR); } // No high-bits should be set!
    if(('}' == c) && ('\0' == *(p+1)))
    2d3e:	9d 37       	cpi	r25, 0x7D	; 125
    2d40:	19 f5       	brne	.+70     	; 0x2d88 <adjustJSONMsgForTXAndComputeCRC(char*)+0x6c>
    2d42:	81 81       	ldd	r24, Z+1	; 0x01
    2d44:	88 23       	and	r24, r24
    2d46:	01 f5       	brne	.+64     	; 0x2d88 <adjustJSONMsgForTXAndComputeCRC(char*)+0x6c>
      {
      seenTrailingClosingBrace = true;
      const char newC = c | 0x80;
      *p = newC; // Set high bit.
    2d48:	8d ef       	ldi	r24, 0xFD	; 253
    2d4a:	80 83       	st	Z, r24
    2d4c:	40 e8       	ldi	r20, 0x80	; 128
    2d4e:	20 e0       	ldi	r18, 0x00	; 0
    2d50:	30 e0       	ldi	r19, 0x00	; 0
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    2d52:	71 e0       	ldi	r23, 0x01	; 1
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
    2d54:	57 e3       	ldi	r21, 0x37	; 55
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
    2d56:	86 2f       	mov	r24, r22
    2d58:	90 e0       	ldi	r25, 0x00	; 0
    2d5a:	e6 e0       	ldi	r30, 0x06	; 6
    2d5c:	96 95       	lsr	r25
    2d5e:	87 95       	ror	r24
    2d60:	ea 95       	dec	r30
    2d62:	e1 f7       	brne	.-8      	; 0x2d5c <adjustJSONMsgForTXAndComputeCRC(char*)+0x40>
    2d64:	98 2f       	mov	r25, r24
    2d66:	91 70       	andi	r25, 0x01	; 1
        if(0 != (datum & i)) { bit = !bit; }
    2d68:	84 2f       	mov	r24, r20
    2d6a:	8d 7f       	andi	r24, 0xFD	; 253
    2d6c:	09 f0       	breq	.+2      	; 0x2d70 <adjustJSONMsgForTXAndComputeCRC(char*)+0x54>
    2d6e:	97 27       	eor	r25, r23
        crc <<= 1;
    2d70:	66 0f       	add	r22, r22
        if(bit) { crc ^= 0x37; }
    2d72:	91 11       	cpse	r25, r1
    2d74:	65 27       	eor	r22, r21
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
    2d76:	46 95       	lsr	r20
    2d78:	2f 5f       	subi	r18, 0xFF	; 255
    2d7a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d7c:	28 30       	cpi	r18, 0x08	; 8
    2d7e:	31 05       	cpc	r19, r1
    2d80:	51 f7       	brne	.-44     	; 0x2d56 <adjustJSONMsgForTXAndComputeCRC(char*)+0x3a>
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
        }
    return(crc & 0x7f);
    2d82:	86 2f       	mov	r24, r22
    2d84:	8f 77       	andi	r24, 0x7F	; 127
    2d86:	25 c0       	rjmp	.+74     	; 0x2dd2 <adjustJSONMsgForTXAndComputeCRC(char*)+0xb6>
      const char newC = c | 0x80;
      *p = newC; // Set high bit.
      crc = crc7_5B_update(crc, (uint8_t)newC); // Update CRC.
      return(crc);
      }
    crc = crc7_5B_update(crc, (uint8_t)c); // Update CRC.
    2d88:	30 e8       	ldi	r19, 0x80	; 128
    2d8a:	40 e0       	ldi	r20, 0x00	; 0
    2d8c:	50 e0       	ldi	r21, 0x00	; 0
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    2d8e:	a9 2f       	mov	r26, r25
    2d90:	b0 e0       	ldi	r27, 0x00	; 0
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
    2d92:	86 2f       	mov	r24, r22
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	06 e0       	ldi	r16, 0x06	; 6
    2d98:	96 95       	lsr	r25
    2d9a:	87 95       	ror	r24
    2d9c:	0a 95       	dec	r16
    2d9e:	e1 f7       	brne	.-8      	; 0x2d98 <adjustJSONMsgForTXAndComputeCRC(char*)+0x7c>
    2da0:	28 2f       	mov	r18, r24
    2da2:	21 70       	andi	r18, 0x01	; 1
        if(0 != (datum & i)) { bit = !bit; }
    2da4:	83 2f       	mov	r24, r19
    2da6:	90 e0       	ldi	r25, 0x00	; 0
    2da8:	8a 23       	and	r24, r26
    2daa:	9b 23       	and	r25, r27
    2dac:	89 2b       	or	r24, r25
    2dae:	09 f0       	breq	.+2      	; 0x2db2 <adjustJSONMsgForTXAndComputeCRC(char*)+0x96>
    2db0:	21 27       	eor	r18, r17
        crc <<= 1;
    2db2:	66 0f       	add	r22, r22
        if(bit) { crc ^= 0x37; }
    2db4:	21 11       	cpse	r18, r1
    2db6:	67 27       	eor	r22, r23
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
    2db8:	36 95       	lsr	r19
    2dba:	4f 5f       	subi	r20, 0xFF	; 255
    2dbc:	5f 4f       	sbci	r21, 0xFF	; 255
    2dbe:	48 30       	cpi	r20, 0x08	; 8
    2dc0:	51 05       	cpc	r21, r1
    2dc2:	39 f7       	brne	.-50     	; 0x2d92 <adjustJSONMsgForTXAndComputeCRC(char*)+0x76>
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
        }
    return(crc & 0x7f);
    2dc4:	6f 77       	andi	r22, 0x7F	; 127
  // Do initial quick validation before computing CRC, etc,
  if(!quickValidateRawSimpleJSONMessage(bptr)) { return(adjustJSONMsgForTXAndComputeCRC_ERR); }
//  if('{' != *bptr) { return(adjustJSONMsgForTXAndComputeCRC_ERR); }
  bool seenTrailingClosingBrace = false;
  uint8_t crc = '{';
  for(char *p = bptr; *++p; ) // Skip first char ('{'); loop until '\0'.
    2dc6:	31 96       	adiw	r30, 0x01	; 1
    2dc8:	90 81       	ld	r25, Z
    2dca:	99 23       	and	r25, r25
    2dcc:	09 f0       	breq	.+2      	; 0x2dd0 <adjustJSONMsgForTXAndComputeCRC(char*)+0xb4>
    2dce:	b7 cf       	rjmp	.-146    	; 0x2d3e <adjustJSONMsgForTXAndComputeCRC(char*)+0x22>
    2dd0:	8f ef       	ldi	r24, 0xFF	; 255
      }
    crc = crc7_5B_update(crc, (uint8_t)c); // Update CRC.
    }
  if(!seenTrailingClosingBrace) { return(adjustJSONMsgForTXAndComputeCRC_ERR); } // Missing ending '}'.
  return(crc);
  }
    2dd2:	1f 91       	pop	r17
    2dd4:	0f 91       	pop	r16
    2dd6:	08 95       	ret

00002dd8 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)>:
// to allow easy handling with string functions.
//  * bptr  pointer to first byte/char (which must be '{')
//  * bufLen  remaining bytes in buffer starting at bptr
// NOTE: adjusts content in place iff the message appears to be valid JSON.
#define adjustJSONMsgForRXAndCheckCRC_ERR -1
int8_t adjustJSONMsgForRXAndCheckCRC(char * const bptr, const uint8_t bufLen)
    2dd8:	cf 92       	push	r12
    2dda:	df 92       	push	r13
    2ddc:	ef 92       	push	r14
    2dde:	ff 92       	push	r15
    2de0:	0f 93       	push	r16
    2de2:	1f 93       	push	r17
    2de4:	cf 93       	push	r28
    2de6:	df 93       	push	r29
    2de8:	fc 01       	movw	r30, r24
  {
  if('{' != *bptr) { return(adjustJSONMsgForRXAndCheckCRC_ERR); }
    2dea:	80 81       	ld	r24, Z
    2dec:	8b 37       	cpi	r24, 0x7B	; 123
    2dee:	09 f0       	breq	.+2      	; 0x2df2 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x1a>
    2df0:	43 c0       	rjmp	.+134    	; 0x2e78 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0xa0>
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("adjustJSONMsgForRXAndCheckCRC()... {");
#endif
  uint8_t crc = '{';
  // Scan up to maximum length for terminating '}'-with-high-bit.
  const uint8_t ml = min(MSG_JSON_MAX_LENGTH, bufLen);
    2df2:	68 33       	cpi	r22, 0x38	; 56
    2df4:	08 f0       	brcs	.+2      	; 0x2df8 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x20>
    2df6:	67 e3       	ldi	r22, 0x37	; 55
  char *p = bptr + 1;
    2df8:	ef 01       	movw	r28, r30
    2dfa:	21 96       	adiw	r28, 0x01	; 1
    2dfc:	3b e7       	ldi	r19, 0x7B	; 123
    2dfe:	a1 e0       	ldi	r26, 0x01	; 1
    2e00:	b0 e0       	ldi	r27, 0x00	; 0
  for(int i = 1; i < ml; ++i)
    2e02:	e6 2e       	mov	r14, r22
    2e04:	ff 24       	eor	r15, r15
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    2e06:	cc 24       	eor	r12, r12
    2e08:	c3 94       	inc	r12
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
    2e0a:	47 e3       	ldi	r20, 0x37	; 55
    2e0c:	d4 2e       	mov	r13, r20
    2e0e:	31 c0       	rjmp	.+98     	; 0x2e72 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x9a>
  // Scan up to maximum length for terminating '}'-with-high-bit.
  const uint8_t ml = min(MSG_JSON_MAX_LENGTH, bufLen);
  char *p = bptr + 1;
  for(int i = 1; i < ml; ++i)
    {
    const char c = *p++;
    2e10:	fe 01       	movw	r30, r28
    2e12:	71 91       	ld	r23, Z+
    crc = crc7_5B_update(crc, (uint8_t)c); // Update CRC.
    2e14:	60 e8       	ldi	r22, 0x80	; 128
    2e16:	40 e0       	ldi	r20, 0x00	; 0
    2e18:	50 e0       	ldi	r21, 0x00	; 0
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    2e1a:	07 2f       	mov	r16, r23
    2e1c:	10 e0       	ldi	r17, 0x00	; 0
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
    2e1e:	83 2f       	mov	r24, r19
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	26 e0       	ldi	r18, 0x06	; 6
    2e24:	96 95       	lsr	r25
    2e26:	87 95       	ror	r24
    2e28:	2a 95       	dec	r18
    2e2a:	e1 f7       	brne	.-8      	; 0x2e24 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x4c>
    2e2c:	28 2f       	mov	r18, r24
    2e2e:	21 70       	andi	r18, 0x01	; 1
        if(0 != (datum & i)) { bit = !bit; }
    2e30:	86 2f       	mov	r24, r22
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	80 23       	and	r24, r16
    2e36:	91 23       	and	r25, r17
    2e38:	89 2b       	or	r24, r25
    2e3a:	09 f0       	breq	.+2      	; 0x2e3e <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x66>
    2e3c:	2c 25       	eor	r18, r12
        crc <<= 1;
    2e3e:	33 0f       	add	r19, r19
        if(bit) { crc ^= 0x37; }
    2e40:	21 11       	cpse	r18, r1
    2e42:	3d 25       	eor	r19, r13
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
    2e44:	66 95       	lsr	r22
    2e46:	4f 5f       	subi	r20, 0xFF	; 255
    2e48:	5f 4f       	sbci	r21, 0xFF	; 255
    2e4a:	48 30       	cpi	r20, 0x08	; 8
    2e4c:	51 05       	cpc	r21, r1
    2e4e:	39 f7       	brne	.-50     	; 0x2e1e <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x46>
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
        }
    return(crc & 0x7f);
    2e50:	3f 77       	andi	r19, 0x7F	; 127
#endif
      return(i+1);
      }
#endif
    // With a terminating '}' (followed by '\0') the message is superficially valid.
    if((((char)('}' | 0x80)) == c) && (crc == (uint8_t)*p))
    2e52:	7d 3f       	cpi	r23, 0xFD	; 253
    2e54:	49 f4       	brne	.+18     	; 0x2e68 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x90>
    2e56:	80 81       	ld	r24, Z
    2e58:	38 17       	cp	r19, r24
    2e5a:	31 f4       	brne	.+12     	; 0x2e68 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x90>
      {
      *(p - 1) = '}';
    2e5c:	8d e7       	ldi	r24, 0x7D	; 125
    2e5e:	88 83       	st	Y, r24
      *p = '\0'; // Null terminate for use as a text string.
    2e60:	10 82       	st	Z, r1
#if 0 && defined(DEBUG)
      DEBUG_SERIAL_PRINTLN_FLASHSTRING("} OK with CRC");
#endif
      return(i+1);
    2e62:	8a 2f       	mov	r24, r26
    2e64:	8f 5f       	subi	r24, 0xFF	; 255
    2e66:	09 c0       	rjmp	.+18     	; 0x2e7a <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0xa2>
      }
    // Non-printable/control character makes the message invalid.
    if((c < 32) || (c > 126))
    2e68:	70 52       	subi	r23, 0x20	; 32
    2e6a:	7f 35       	cpi	r23, 0x5F	; 95
    2e6c:	28 f4       	brcc	.+10     	; 0x2e78 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0xa0>
#endif
  uint8_t crc = '{';
  // Scan up to maximum length for terminating '}'-with-high-bit.
  const uint8_t ml = min(MSG_JSON_MAX_LENGTH, bufLen);
  char *p = bptr + 1;
  for(int i = 1; i < ml; ++i)
    2e6e:	11 96       	adiw	r26, 0x01	; 1
    2e70:	ef 01       	movw	r28, r30
    2e72:	ae 15       	cp	r26, r14
    2e74:	bf 05       	cpc	r27, r15
    2e76:	64 f2       	brlt	.-104    	; 0x2e10 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x38>
    2e78:	8f ef       	ldi	r24, 0xFF	; 255
    }
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING(" bad: unterminated");
#endif
  return(adjustJSONMsgForRXAndCheckCRC_ERR); // Bad (unterminated) message.
  }
    2e7a:	df 91       	pop	r29
    2e7c:	cf 91       	pop	r28
    2e7e:	1f 91       	pop	r17
    2e80:	0f 91       	pop	r16
    2e82:	ff 90       	pop	r15
    2e84:	ef 90       	pop	r14
    2e86:	df 90       	pop	r13
    2e88:	cf 90       	pop	r12
    2e8a:	08 95       	ret

00002e8c <BufPrint::write(unsigned char)>:


// Print a single char to a bounded buffer; returns 1 if successful, else 0 if full.
size_t BufPrint::write(const uint8_t c)
    2e8c:	dc 01       	movw	r26, r24
  {
  if(size < capacity) { b[size++] = c; b[size] = '\0'; return(1); }
    2e8e:	17 96       	adiw	r26, 0x07	; 7
    2e90:	9c 91       	ld	r25, X
    2e92:	17 97       	sbiw	r26, 0x07	; 7
    2e94:	16 96       	adiw	r26, 0x06	; 6
    2e96:	8c 91       	ld	r24, X
    2e98:	16 97       	sbiw	r26, 0x06	; 6
    2e9a:	98 17       	cp	r25, r24
    2e9c:	18 f0       	brcs	.+6      	; 0x2ea4 <BufPrint::write(unsigned char)+0x18>
    2e9e:	20 e0       	ldi	r18, 0x00	; 0
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	15 c0       	rjmp	.+42     	; 0x2ece <BufPrint::write(unsigned char)+0x42>
    2ea4:	14 96       	adiw	r26, 0x04	; 4
    2ea6:	ed 91       	ld	r30, X+
    2ea8:	fc 91       	ld	r31, X
    2eaa:	15 97       	sbiw	r26, 0x05	; 5
    2eac:	e9 0f       	add	r30, r25
    2eae:	f1 1d       	adc	r31, r1
    2eb0:	60 83       	st	Z, r22
    2eb2:	89 2f       	mov	r24, r25
    2eb4:	8f 5f       	subi	r24, 0xFF	; 255
    2eb6:	17 96       	adiw	r26, 0x07	; 7
    2eb8:	8c 93       	st	X, r24
    2eba:	17 97       	sbiw	r26, 0x07	; 7
    2ebc:	14 96       	adiw	r26, 0x04	; 4
    2ebe:	ed 91       	ld	r30, X+
    2ec0:	fc 91       	ld	r31, X
    2ec2:	15 97       	sbiw	r26, 0x05	; 5
    2ec4:	e8 0f       	add	r30, r24
    2ec6:	f1 1d       	adc	r31, r1
    2ec8:	10 82       	st	Z, r1
    2eca:	21 e0       	ldi	r18, 0x01	; 1
    2ecc:	30 e0       	ldi	r19, 0x00	; 0
  return(0);
  }
    2ece:	c9 01       	movw	r24, r18
    2ed0:	08 95       	ret

00002ed2 <SimpleStatsRotationBase::print(BufPrint&, SimpleStatsRotationBase::DescValueTuple const&, bool&) const>:
  return(false); // FAILED: full.
  }

#if defined(ALLOW_JSON_OUTPUT)
// Print an object field "name":value to the given buffer.
size_t SimpleStatsRotationBase::print(BufPrint &bp, const SimpleStatsRotationBase::DescValueTuple &s, bool &commaPending) const
    2ed2:	4f 92       	push	r4
    2ed4:	5f 92       	push	r5
    2ed6:	6f 92       	push	r6
    2ed8:	7f 92       	push	r7
    2eda:	8f 92       	push	r8
    2edc:	9f 92       	push	r9
    2ede:	af 92       	push	r10
    2ee0:	bf 92       	push	r11
    2ee2:	cf 92       	push	r12
    2ee4:	df 92       	push	r13
    2ee6:	ef 92       	push	r14
    2ee8:	ff 92       	push	r15
    2eea:	0f 93       	push	r16
    2eec:	1f 93       	push	r17
    2eee:	cf 93       	push	r28
    2ef0:	df 93       	push	r29
    2ef2:	96 2e       	mov	r9, r22
    2ef4:	87 2e       	mov	r8, r23
    2ef6:	3a 01       	movw	r6, r20
    2ef8:	29 01       	movw	r4, r18
  {
  size_t w = 0;
  if(commaPending) { w += bp.print(','); }
    2efa:	f9 01       	movw	r30, r18
    2efc:	80 81       	ld	r24, Z
    2efe:	88 23       	and	r24, r24
    2f00:	19 f4       	brne	.+6      	; 0x2f08 <SimpleStatsRotationBase::print(BufPrint&, SimpleStatsRotationBase::DescValueTuple const&, bool&) const+0x36>
    2f02:	c0 e0       	ldi	r28, 0x00	; 0
    2f04:	d0 e0       	ldi	r29, 0x00	; 0
    2f06:	06 c0       	rjmp	.+12     	; 0x2f14 <SimpleStatsRotationBase::print(BufPrint&, SimpleStatsRotationBase::DescValueTuple const&, bool&) const+0x42>
    2f08:	86 2f       	mov	r24, r22
    2f0a:	97 2f       	mov	r25, r23
    2f0c:	6c e2       	ldi	r22, 0x2C	; 44
    2f0e:	0e 94 44 3b 	call	0x7688	; 0x7688 <Print::print(char)>
    2f12:	ec 01       	movw	r28, r24
  w += bp.print('"');
    2f14:	89 2d       	mov	r24, r9
    2f16:	98 2d       	mov	r25, r8
    2f18:	62 e2       	ldi	r22, 0x22	; 34
    2f1a:	0e 94 44 3b 	call	0x7688	; 0x7688 <Print::print(char)>
    2f1e:	8c 01       	movw	r16, r24
  w += bp.print(s.descriptor.key); // Assumed not to need escaping in any way.
    2f20:	f3 01       	movw	r30, r6
    2f22:	60 81       	ld	r22, Z
    2f24:	71 81       	ldd	r23, Z+1	; 0x01
    2f26:	89 2d       	mov	r24, r9
    2f28:	98 2d       	mov	r25, r8
    2f2a:	0e 94 85 3c 	call	0x790a	; 0x790a <Print::print(char const*)>
    2f2e:	5c 01       	movw	r10, r24
  w += bp.print('"');
    2f30:	89 2d       	mov	r24, r9
    2f32:	98 2d       	mov	r25, r8
    2f34:	62 e2       	ldi	r22, 0x22	; 34
    2f36:	0e 94 44 3b 	call	0x7688	; 0x7688 <Print::print(char)>
    2f3a:	6c 01       	movw	r12, r24
  w += bp.print(':');
    2f3c:	89 2d       	mov	r24, r9
    2f3e:	98 2d       	mov	r25, r8
    2f40:	6a e3       	ldi	r22, 0x3A	; 58
    2f42:	0e 94 44 3b 	call	0x7688	; 0x7688 <Print::print(char)>
    2f46:	7c 01       	movw	r14, r24
  w += bp.print(s.value);
    2f48:	f3 01       	movw	r30, r6
    2f4a:	64 81       	ldd	r22, Z+4	; 0x04
    2f4c:	75 81       	ldd	r23, Z+5	; 0x05
    2f4e:	89 2d       	mov	r24, r9
    2f50:	98 2d       	mov	r25, r8
    2f52:	4a e0       	ldi	r20, 0x0A	; 10
    2f54:	50 e0       	ldi	r21, 0x00	; 0
    2f56:	0e 94 72 3c 	call	0x78e4	; 0x78e4 <Print::print(int, int)>
// Print an object field "name":value to the given buffer.
size_t SimpleStatsRotationBase::print(BufPrint &bp, const SimpleStatsRotationBase::DescValueTuple &s, bool &commaPending) const
  {
  size_t w = 0;
  if(commaPending) { w += bp.print(','); }
  w += bp.print('"');
    2f5a:	0c 0f       	add	r16, r28
    2f5c:	1d 1f       	adc	r17, r29
  w += bp.print(s.descriptor.key); // Assumed not to need escaping in any way.
    2f5e:	0a 0d       	add	r16, r10
    2f60:	1b 1d       	adc	r17, r11
  w += bp.print('"');
    2f62:	0c 0d       	add	r16, r12
    2f64:	1d 1d       	adc	r17, r13
  w += bp.print(':');
    2f66:	0e 0d       	add	r16, r14
    2f68:	1f 1d       	adc	r17, r15
  w += bp.print(s.value);
  commaPending = true;
    2f6a:	21 e0       	ldi	r18, 0x01	; 1
    2f6c:	f2 01       	movw	r30, r4
    2f6e:	20 83       	st	Z, r18
    2f70:	08 0f       	add	r16, r24
    2f72:	19 1f       	adc	r17, r25
  return(w);
  }
    2f74:	c8 01       	movw	r24, r16
    2f76:	df 91       	pop	r29
    2f78:	cf 91       	pop	r28
    2f7a:	1f 91       	pop	r17
    2f7c:	0f 91       	pop	r16
    2f7e:	ff 90       	pop	r15
    2f80:	ef 90       	pop	r14
    2f82:	df 90       	pop	r13
    2f84:	cf 90       	pop	r12
    2f86:	bf 90       	pop	r11
    2f88:	af 90       	pop	r10
    2f8a:	9f 90       	pop	r9
    2f8c:	8f 90       	pop	r8
    2f8e:	7f 90       	pop	r7
    2f90:	6f 90       	pop	r6
    2f92:	5f 90       	pop	r5
    2f94:	4f 90       	pop	r4
    2f96:	08 95       	ret

00002f98 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)>:
//   * maximise  if true attempt to maximise the number of stats squeezed into each frame,
//       potentially at the cost of signficant CPU time
//   * suppressClearChanged  if true then 'changed' flag for included fields is not cleared by this
//       allowing them to continue to be treated as higher priority
uint8_t SimpleStatsRotationBase::writeJSON(uint8_t *const buf, const uint8_t bufSize, const uint8_t sensitivity,
                                           const bool maximise, const bool suppressClearChanged)
    2f98:	2f 92       	push	r2
    2f9a:	3f 92       	push	r3
    2f9c:	4f 92       	push	r4
    2f9e:	5f 92       	push	r5
    2fa0:	6f 92       	push	r6
    2fa2:	7f 92       	push	r7
    2fa4:	8f 92       	push	r8
    2fa6:	9f 92       	push	r9
    2fa8:	af 92       	push	r10
    2faa:	bf 92       	push	r11
    2fac:	cf 92       	push	r12
    2fae:	df 92       	push	r13
    2fb0:	ef 92       	push	r14
    2fb2:	ff 92       	push	r15
    2fb4:	0f 93       	push	r16
    2fb6:	1f 93       	push	r17
    2fb8:	df 93       	push	r29
    2fba:	cf 93       	push	r28
    2fbc:	cd b7       	in	r28, 0x3d	; 61
    2fbe:	de b7       	in	r29, 0x3e	; 62
    2fc0:	2d 97       	sbiw	r28, 0x0d	; 13
    2fc2:	0f b6       	in	r0, 0x3f	; 63
    2fc4:	f8 94       	cli
    2fc6:	de bf       	out	0x3e, r29	; 62
    2fc8:	0f be       	out	0x3f, r0	; 63
    2fca:	cd bf       	out	0x3d, r28	; 61
    2fcc:	6c 01       	movw	r12, r24
    2fce:	1b 01       	movw	r2, r22
    2fd0:	f4 2e       	mov	r15, r20
    2fd2:	2b 87       	std	Y+11, r18	; 0x0b
    2fd4:	0c 87       	std	Y+12, r16	; 0x0c
    2fd6:	ed 86       	std	Y+13, r14	; 0x0d
  {
#ifdef DEBUG
  if(NULL == buf) { panic(0); } // Should never happen.
    2fd8:	61 15       	cp	r22, r1
    2fda:	71 05       	cpc	r23, r1
    2fdc:	21 f4       	brne	.+8      	; 0x2fe6 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x4e>
    2fde:	80 e0       	ldi	r24, 0x00	; 0
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	0e 94 d7 2f 	call	0x5fae	; 0x5fae <panic(__FlashStringHelper const*)>
#endif
  // Minimum size is for {"@":""} plus null plus extra padding char/byte to check for overrun.
  if(bufSize < 10) { return(0); } // Failed.
    2fe6:	39 e0       	ldi	r19, 0x09	; 9
    2fe8:	3f 15       	cp	r19, r15
    2fea:	08 f0       	brcs	.+2      	; 0x2fee <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x56>
    2fec:	80 c1       	rjmp	.+768    	; 0x32ee <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x356>
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    2fee:	1d 82       	std	Y+5, r1	; 0x05
    2ff0:	1c 82       	std	Y+4, r1	; 0x04
    uint8_t mark;
  public:
    // Wrap around a buffer of size bufSize-1 chars and a trailing '\0'.
    // The buffer must be of at least size 1.
    // A buffer of size n can accommodate n-1 characters.
    BufPrint(char *buf, uint8_t bufSize) : b(buf), capacity(bufSize-1), size(0), mark(0) { buf[0] = '\0'; }
    2ff2:	80 e8       	ldi	r24, 0x80	; 128
    2ff4:	91 e0       	ldi	r25, 0x01	; 1
    2ff6:	9b 83       	std	Y+3, r25	; 0x03
    2ff8:	8a 83       	std	Y+2, r24	; 0x02
    2ffa:	3f 82       	std	Y+7, r3	; 0x07
    2ffc:	2e 82       	std	Y+6, r2	; 0x06
    2ffe:	fa 94       	dec	r15
    3000:	f8 86       	std	Y+8, r15	; 0x08
    3002:	f3 94       	inc	r15
    3004:	19 86       	std	Y+9, r1	; 0x09
    3006:	1a 86       	std	Y+10, r1	; 0x0a
    3008:	d1 01       	movw	r26, r2
    300a:	1c 92       	st	X, r1

  // Write/print to buffer passed in.
  BufPrint bp((char *)buf, bufSize);
  // True if field has been written and will need a ',' if another field is written.
  bool commaPending = false;
    300c:	19 82       	std	Y+1, r1	; 0x01

  // Start object.
  bp.print('{');
    300e:	8e 01       	movw	r16, r28
    3010:	0e 5f       	subi	r16, 0xFE	; 254
    3012:	1f 4f       	sbci	r17, 0xFF	; 255
    3014:	c8 01       	movw	r24, r16
    3016:	6b e7       	ldi	r22, 0x7B	; 123
    3018:	0e 94 44 3b 	call	0x7688	; 0x7688 <Print::print(char)>

  // Write ID first.
  // If an explicit ID is supplied then use it
  // else compute it taking the housecode by preference if it is set.
  bp.print(F("\"@\":\""));
    301c:	c8 01       	movw	r24, r16
    301e:	6a e5       	ldi	r22, 0x5A	; 90
    3020:	71 e0       	ldi	r23, 0x01	; 1
    3022:	0e 94 21 3b 	call	0x7642	; 0x7642 <Print::print(__FlashStringHelper const*)>

#ifdef USE_MODULE_FHT8VSIMPLE
  if(NULL != id) { bp.print(id); } // Value has to be 'safe' (eg no " nor \ in it).
    3026:	f6 01       	movw	r30, r12
    3028:	67 81       	ldd	r22, Z+7	; 0x07
    302a:	70 85       	ldd	r23, Z+8	; 0x08
    302c:	61 15       	cp	r22, r1
    302e:	71 05       	cpc	r23, r1
    3030:	21 f0       	breq	.+8      	; 0x303a <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0xa2>
    3032:	c8 01       	movw	r24, r16
    3034:	0e 94 85 3c 	call	0x790a	; 0x790a <Print::print(char const*)>
    3038:	55 c0       	rjmp	.+170    	; 0x30e4 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x14c>
  else
    {
    if(localFHT8VTRVEnabled())
    303a:	0e 94 45 11 	call	0x228a	; 0x228a <localFHT8VTRVEnabled()>
    303e:	88 23       	and	r24, r24
    3040:	39 f0       	breq	.+14     	; 0x3050 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0xb8>
      {
      const uint8_t hc1 = FHT8VGetHC1();
    3042:	0e 94 33 11 	call	0x2266	; 0x2266 <FHT8VGetHC1()>
    3046:	18 2f       	mov	r17, r24
      const uint8_t hc2 = FHT8VGetHC2();
    3048:	0e 94 3c 11 	call	0x2278	; 0x2278 <FHT8VGetHC2()>
    304c:	08 2f       	mov	r16, r24
    304e:	10 c0       	rjmp	.+32     	; 0x3070 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0xd8>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    3050:	f9 99       	sbic	0x1f, 1	; 31
    3052:	fe cf       	rjmp	.-4      	; 0x3050 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0xb8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    3054:	84 e1       	ldi	r24, 0x14	; 20
    3056:	90 e0       	ldi	r25, 0x00	; 0
    3058:	92 bd       	out	0x22, r25	; 34
    305a:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    305c:	f8 9a       	sbi	0x1f, 0	; 31
    305e:	10 b5       	in	r17, 0x20	; 32
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    3060:	f9 99       	sbic	0x1f, 1	; 31
    3062:	fe cf       	rjmp	.-4      	; 0x3060 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0xc8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    3064:	85 e1       	ldi	r24, 0x15	; 21
    3066:	90 e0       	ldi	r25, 0x00	; 0
    3068:	92 bd       	out	0x22, r25	; 34
    306a:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    306c:	f8 9a       	sbi	0x1f, 0	; 31
    306e:	00 b5       	in	r16, 0x20	; 32


// Extract ASCII hex digit in range [0-9][a-f] (ie lowercase) from bottom 4 bits of argument.
// Eg, passing in 0xa (10) returns 'a'.
// The top 4 bits are ignored.
static inline char hexDigit(const uint8_t value) { const uint8_t v = 0xf&value; if(v<10) { return('0'+v); } return('a'+(v-10)); }
    3070:	81 2f       	mov	r24, r17
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	74 e0       	ldi	r23, 0x04	; 4
    3076:	95 95       	asr	r25
    3078:	87 95       	ror	r24
    307a:	7a 95       	dec	r23
    307c:	e1 f7       	brne	.-8      	; 0x3076 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0xde>
    307e:	68 2f       	mov	r22, r24
    3080:	6f 70       	andi	r22, 0x0F	; 15
    3082:	6a 30       	cpi	r22, 0x0A	; 10
    3084:	10 f4       	brcc	.+4      	; 0x308a <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0xf2>
    3086:	60 5d       	subi	r22, 0xD0	; 208
    3088:	01 c0       	rjmp	.+2      	; 0x308c <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0xf4>
    308a:	69 5a       	subi	r22, 0xA9	; 169
    else
#endif
      {
      const uint8_t id1 = eeprom_read_byte(0 + (uint8_t *)EE_START_ID);
      const uint8_t id2 = eeprom_read_byte(1 + (uint8_t *)EE_START_ID);
      bp.print(hexDigit(id1 >> 4));
    308c:	ce 01       	movw	r24, r28
    308e:	02 96       	adiw	r24, 0x02	; 2
    3090:	0e 94 44 3b 	call	0x7688	; 0x7688 <Print::print(char)>
    3094:	61 2f       	mov	r22, r17
    3096:	6f 70       	andi	r22, 0x0F	; 15
    3098:	6a 30       	cpi	r22, 0x0A	; 10
    309a:	10 f4       	brcc	.+4      	; 0x30a0 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x108>
    309c:	60 5d       	subi	r22, 0xD0	; 208
    309e:	01 c0       	rjmp	.+2      	; 0x30a2 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x10a>
    30a0:	69 5a       	subi	r22, 0xA9	; 169
      bp.print(hexDigit(id1));
    30a2:	ce 01       	movw	r24, r28
    30a4:	02 96       	adiw	r24, 0x02	; 2
    30a6:	0e 94 44 3b 	call	0x7688	; 0x7688 <Print::print(char)>
    30aa:	80 2f       	mov	r24, r16
    30ac:	90 e0       	ldi	r25, 0x00	; 0
    30ae:	64 e0       	ldi	r22, 0x04	; 4
    30b0:	95 95       	asr	r25
    30b2:	87 95       	ror	r24
    30b4:	6a 95       	dec	r22
    30b6:	e1 f7       	brne	.-8      	; 0x30b0 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x118>
    30b8:	68 2f       	mov	r22, r24
    30ba:	6f 70       	andi	r22, 0x0F	; 15
    30bc:	6a 30       	cpi	r22, 0x0A	; 10
    30be:	10 f4       	brcc	.+4      	; 0x30c4 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x12c>
    30c0:	60 5d       	subi	r22, 0xD0	; 208
    30c2:	01 c0       	rjmp	.+2      	; 0x30c6 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x12e>
    30c4:	69 5a       	subi	r22, 0xA9	; 169
      bp.print(hexDigit(id2 >> 4));
    30c6:	ce 01       	movw	r24, r28
    30c8:	02 96       	adiw	r24, 0x02	; 2
    30ca:	0e 94 44 3b 	call	0x7688	; 0x7688 <Print::print(char)>
    30ce:	60 2f       	mov	r22, r16
    30d0:	6f 70       	andi	r22, 0x0F	; 15
    30d2:	6a 30       	cpi	r22, 0x0A	; 10
    30d4:	10 f4       	brcc	.+4      	; 0x30da <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x142>
    30d6:	60 5d       	subi	r22, 0xD0	; 208
    30d8:	01 c0       	rjmp	.+2      	; 0x30dc <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x144>
    30da:	69 5a       	subi	r22, 0xA9	; 169
      bp.print(hexDigit(id2));
    30dc:	ce 01       	movw	r24, r28
    30de:	02 96       	adiw	r24, 0x02	; 2
    30e0:	0e 94 44 3b 	call	0x7688	; 0x7688 <Print::print(char)>
      }
    }

  bp.print('"');
    30e4:	8e 01       	movw	r16, r28
    30e6:	0e 5f       	subi	r16, 0xFE	; 254
    30e8:	1f 4f       	sbci	r17, 0xFF	; 255
    30ea:	c8 01       	movw	r24, r16
    30ec:	62 e2       	ldi	r22, 0x22	; 34
    30ee:	0e 94 44 3b 	call	0x7688	; 0x7688 <Print::print(char)>
  commaPending = true;
    30f2:	bb 24       	eor	r11, r11
    30f4:	b3 94       	inc	r11
    30f6:	b9 82       	std	Y+1, r11	; 0x01

  // Write count next iff enabled.
  if(c.enabled)
    30f8:	d6 01       	movw	r26, r12
    30fa:	19 96       	adiw	r26, 0x09	; 9
    30fc:	8c 91       	ld	r24, X
    30fe:	80 ff       	sbrs	r24, 0
    3100:	14 c0       	rjmp	.+40     	; 0x312a <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x192>
    {
    if(commaPending) { bp.print(','); commaPending = false; }
    3102:	c8 01       	movw	r24, r16
    3104:	6c e2       	ldi	r22, 0x2C	; 44
    3106:	0e 94 44 3b 	call	0x7688	; 0x7688 <Print::print(char)>
    310a:	19 82       	std	Y+1, r1	; 0x01
    bp.print(F("\"+\":"));
    310c:	c8 01       	movw	r24, r16
    310e:	65 e5       	ldi	r22, 0x55	; 85
    3110:	71 e0       	ldi	r23, 0x01	; 1
    3112:	0e 94 21 3b 	call	0x7642	; 0x7642 <Print::print(__FlashStringHelper const*)>
    bp.print(c.count);
    3116:	f6 01       	movw	r30, r12
    3118:	61 85       	ldd	r22, Z+9	; 0x09
    311a:	66 95       	lsr	r22
    311c:	67 70       	andi	r22, 0x07	; 7
    311e:	c8 01       	movw	r24, r16
    3120:	4a e0       	ldi	r20, 0x0A	; 10
    3122:	50 e0       	ldi	r21, 0x00	; 0
    3124:	0e 94 20 3c 	call	0x7840	; 0x7840 <Print::print(unsigned char, int)>
    commaPending = true;
    3128:	b9 82       	std	Y+1, r11	; 0x01
    // True if buffer is completely full.
    bool isFull() const { return(size == capacity); }
    // Get size/chars already in the buffer, not including trailing '\0'.
    uint8_t getSize() const { return(size); }
    // Set to record good place to rewind to if necessary.
    void setMark() { mark = size; }
    312a:	89 85       	ldd	r24, Y+9	; 0x09
    312c:	8a 87       	std	Y+10, r24	; 0x0a

  bool gotHiPri = false;
  uint8_t hiPriIndex = 0;
  bool gotLoPri = false;
  uint8_t loPriIndex = 0;
  if(nStats != 0)
    312e:	d6 01       	movw	r26, r12
    3130:	13 96       	adiw	r26, 0x03	; 3
    3132:	6c 91       	ld	r22, X
    3134:	13 97       	sbiw	r26, 0x03	; 3
    3136:	66 23       	and	r22, r22
    3138:	09 f4       	brne	.+2      	; 0x313c <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x1a4>
    313a:	ce c0       	rjmp	.+412    	; 0x32d8 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x340>
    {
    // High-pri/changed stats.
    // Only do this on a portion of runs to let 'normal' stats get a look-in.
    // This happens on even-numbered runs (eg including the first, typically).
    // Write at most one high-priority item.
    if(0 == (c.count & 1))
    313c:	19 96       	adiw	r26, 0x09	; 9
    313e:	8c 91       	ld	r24, X
    3140:	19 97       	sbiw	r26, 0x09	; 9
    3142:	86 95       	lsr	r24
    3144:	87 70       	andi	r24, 0x07	; 7
    3146:	80 fd       	sbrc	r24, 0
    3148:	5a c0       	rjmp	.+180    	; 0x31fe <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x266>
      {
      uint8_t next = lastTXedHiPri;
    314a:	16 96       	adiw	r26, 0x06	; 6
    314c:	1c 91       	ld	r17, X
    314e:	40 e0       	ldi	r20, 0x00	; 0
    3150:	50 e0       	ldi	r21, 0x00	; 0
      for(int i = nStats; --i >= 0; )
    3152:	26 2f       	mov	r18, r22
    3154:	30 e0       	ldi	r19, 0x00	; 0
    3156:	21 50       	subi	r18, 0x01	; 1
    3158:	30 40       	sbci	r19, 0x00	; 0
        {
        // Wrap around the end of the stats.
        if(++next >= nStats) { next = 0; }
        // Skip stat if too sensitive to include in this output.
        DescValueTuple &s = stats[next];
    315a:	77 e0       	ldi	r23, 0x07	; 7
    315c:	49 c0       	rjmp	.+146    	; 0x31f0 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x258>
      {
      uint8_t next = lastTXedHiPri;
      for(int i = nStats; --i >= 0; )
        {
        // Wrap around the end of the stats.
        if(++next >= nStats) { next = 0; }
    315e:	1f 5f       	subi	r17, 0xFF	; 255
    3160:	16 17       	cp	r17, r22
    3162:	08 f0       	brcs	.+2      	; 0x3166 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x1ce>
    3164:	10 e0       	ldi	r17, 0x00	; 0
        // Skip stat if too sensitive to include in this output.
        DescValueTuple &s = stats[next];
    3166:	17 9f       	mul	r17, r23
    3168:	50 01       	movw	r10, r0
    316a:	11 24       	eor	r1, r1
    316c:	d6 01       	movw	r26, r12
    316e:	11 96       	adiw	r26, 0x01	; 1
    3170:	ed 91       	ld	r30, X+
    3172:	fc 91       	ld	r31, X
    3174:	12 97       	sbiw	r26, 0x02	; 2
    3176:	ea 0d       	add	r30, r10
    3178:	fb 1d       	adc	r31, r11
        if(sensitivity > s.descriptor.sensitivity) { continue; }
    317a:	82 81       	ldd	r24, Z+2	; 0x02
    317c:	bb 85       	ldd	r27, Y+11	; 0x0b
    317e:	8b 17       	cp	r24, r27
    3180:	a8 f1       	brcs	.+106    	; 0x31ec <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x254>
        // Skip stat if neither changed nor high-priority.
        if(!s.descriptor.highPriority && !s.flags.changed) { continue; }
    3182:	83 81       	ldd	r24, Z+3	; 0x03
    3184:	88 23       	and	r24, r24
    3186:	19 f4       	brne	.+6      	; 0x318e <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x1f6>
    3188:	86 81       	ldd	r24, Z+6	; 0x06
    318a:	80 ff       	sbrs	r24, 0
    318c:	2f c0       	rjmp	.+94     	; 0x31ec <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x254>
        // Found suitable stat to include in output.
        hiPriIndex = next;
        gotHiPri = true;
        // Add to JSON output.
        print(bp, s, commaPending);
    318e:	c6 01       	movw	r24, r12
    3190:	be 01       	movw	r22, r28
    3192:	6e 5f       	subi	r22, 0xFE	; 254
    3194:	7f 4f       	sbci	r23, 0xFF	; 255
    3196:	af 01       	movw	r20, r30
    3198:	9e 01       	movw	r18, r28
    319a:	2f 5f       	subi	r18, 0xFF	; 255
    319c:	3f 4f       	sbci	r19, 0xFF	; 255
    319e:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <SimpleStatsRotationBase::print(BufPrint&, SimpleStatsRotationBase::DescValueTuple const&, bool&) const>
    BufPrint(char *buf, uint8_t bufSize) : b(buf), capacity(bufSize-1), size(0), mark(0) { buf[0] = '\0'; }
    virtual size_t write(uint8_t c);
    // True if buffer is completely full.
    bool isFull() const { return(size == capacity); }
    // Get size/chars already in the buffer, not including trailing '\0'.
    uint8_t getSize() const { return(size); }
    31a2:	49 85       	ldd	r20, Y+9	; 0x09
        // If successful, ie still space for the closing "}\0" without running over-length
        // then mark this as a fall-back, else rewind and discard this item.
        if(bp.getSize() > bufSize - 3) { bp.rewind(); break; }
    31a4:	8f 2d       	mov	r24, r15
    31a6:	90 e0       	ldi	r25, 0x00	; 0
    31a8:	02 97       	sbiw	r24, 0x02	; 2
    31aa:	24 2f       	mov	r18, r20
    31ac:	30 e0       	ldi	r19, 0x00	; 0
    31ae:	28 17       	cp	r18, r24
    31b0:	39 07       	cpc	r19, r25
    31b2:	44 f0       	brlt	.+16     	; 0x31c4 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x22c>
    // Set to record good place to rewind to if necessary.
    void setMark() { mark = size; }
    // Rewind to previous good position, clearing newer text.
    void rewind() { size = mark; b[size] = '\0'; }
    31b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    31b6:	89 87       	std	Y+9, r24	; 0x09
    31b8:	ee 81       	ldd	r30, Y+6	; 0x06
    31ba:	ff 81       	ldd	r31, Y+7	; 0x07
    31bc:	e8 0f       	add	r30, r24
    31be:	f1 1d       	adc	r31, r1
    31c0:	10 82       	st	Z, r1
    31c2:	11 c0       	rjmp	.+34     	; 0x31e6 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x24e>
    // True if buffer is completely full.
    bool isFull() const { return(size == capacity); }
    // Get size/chars already in the buffer, not including trailing '\0'.
    uint8_t getSize() const { return(size); }
    // Set to record good place to rewind to if necessary.
    void setMark() { mark = size; }
    31c4:	4a 87       	std	Y+10, r20	; 0x0a
        else
          {
          bp.setMark();
          lastTXed = lastTXedHiPri = hiPriIndex;
    31c6:	f6 01       	movw	r30, r12
    31c8:	16 83       	std	Z+6, r17	; 0x06
    31ca:	14 83       	std	Z+4, r17	; 0x04
          if(!suppressClearChanged) { stats[hiPriIndex].flags.changed = false; }
    31cc:	fd 85       	ldd	r31, Y+13	; 0x0d
    31ce:	ff 23       	and	r31, r31
    31d0:	51 f4       	brne	.+20     	; 0x31e6 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x24e>
    31d2:	d6 01       	movw	r26, r12
    31d4:	11 96       	adiw	r26, 0x01	; 1
    31d6:	ed 91       	ld	r30, X+
    31d8:	fc 91       	ld	r31, X
    31da:	12 97       	sbiw	r26, 0x02	; 2
    31dc:	ea 0d       	add	r30, r10
    31de:	fb 1d       	adc	r31, r11
    31e0:	86 81       	ldd	r24, Z+6	; 0x06
    31e2:	8e 7f       	andi	r24, 0xFE	; 254
    31e4:	86 83       	std	Z+6, r24	; 0x06
    31e6:	51 2e       	mov	r5, r17
    31e8:	01 e0       	ldi	r16, 0x01	; 1
    31ea:	0b c0       	rjmp	.+22     	; 0x3202 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x26a>
    31ec:	4f 5f       	subi	r20, 0xFF	; 255
    31ee:	5f 4f       	sbci	r21, 0xFF	; 255
    // This happens on even-numbered runs (eg including the first, typically).
    // Write at most one high-priority item.
    if(0 == (c.count & 1))
      {
      uint8_t next = lastTXedHiPri;
      for(int i = nStats; --i >= 0; )
    31f0:	c9 01       	movw	r24, r18
    31f2:	84 1b       	sub	r24, r20
    31f4:	95 0b       	sbc	r25, r21
    31f6:	8f 5f       	subi	r24, 0xFF	; 255
    31f8:	9f 4f       	sbci	r25, 0xFF	; 255
    31fa:	09 f0       	breq	.+2      	; 0x31fe <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x266>
    31fc:	b0 cf       	rjmp	.-160    	; 0x315e <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x1c6>
    31fe:	00 e0       	ldi	r16, 0x00	; 0
    3200:	55 24       	eor	r5, r5
    // Rotate through all eligible stats round-robin,
    // adding one to the end of the current message if possible,
    // checking first the item indexed after the previous one sent.
//    if(!gotHiPri)
      {
      uint8_t next = lastTXedLoPri;
    3202:	f6 01       	movw	r30, r12
    3204:	25 81       	ldd	r18, Z+5	; 0x05
      for(int i = nStats; --i >= 0; )
    3206:	83 81       	ldd	r24, Z+3	; 0x03
    3208:	88 24       	eor	r8, r8
    320a:	99 24       	eor	r9, r9
    320c:	a8 2e       	mov	r10, r24
    320e:	bb 24       	eor	r11, r11
    3210:	08 94       	sec
    3212:	a1 08       	sbc	r10, r1
    3214:	b1 08       	sbc	r11, r1
        // Avoid re-transmitting the very last thing TXed unless there in only one item!
        if((lastTXed == next) && (nStats > 1)) { continue; }
        // Avoid transmitting the hi-pri item just sent if any.
        if(gotHiPri && (hiPriIndex == next)) { continue; }
        // Skip stat if too sensitive to include in this output.
        DescValueTuple &s = stats[next];
    3216:	57 e0       	ldi	r21, 0x07	; 7
    3218:	45 2e       	mov	r4, r21
        // Add to JSON output.
        print(bp, s, commaPending);
        // If successful then mark this as a fall-back, else rewind and discard this item.
        // If successful, ie still space for the closing "}\0" without running over-length
        // then mark this as a fall-back, else rewind and discard this item.
        if(bp.getSize() > bufSize - 3) { bp.rewind(); break; }
    321a:	ef 2c       	mov	r14, r15
    321c:	ff 24       	eor	r15, r15
    321e:	8e ef       	ldi	r24, 0xFE	; 254
    3220:	9f ef       	ldi	r25, 0xFF	; 255
    3222:	e8 0e       	add	r14, r24
    3224:	f9 1e       	adc	r15, r25
    3226:	51 c0       	rjmp	.+162    	; 0x32ca <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x332>
      {
      uint8_t next = lastTXedLoPri;
      for(int i = nStats; --i >= 0; )
        {
        // Wrap around the end of the stats.
        if(++next >= nStats) { next = 0; }
    3228:	12 2f       	mov	r17, r18
    322a:	1f 5f       	subi	r17, 0xFF	; 255
    322c:	d6 01       	movw	r26, r12
    322e:	13 96       	adiw	r26, 0x03	; 3
    3230:	8c 91       	ld	r24, X
    3232:	18 17       	cp	r17, r24
    3234:	08 f0       	brcs	.+2      	; 0x3238 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x2a0>
    3236:	10 e0       	ldi	r17, 0x00	; 0
        // Avoid re-transmitting the very last thing TXed unless there in only one item!
        if((lastTXed == next) && (nStats > 1)) { continue; }
    3238:	f6 01       	movw	r30, r12
    323a:	24 81       	ldd	r18, Z+4	; 0x04
    323c:	21 17       	cp	r18, r17
    323e:	19 f4       	brne	.+6      	; 0x3246 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x2ae>
    3240:	82 30       	cpi	r24, 0x02	; 2
    3242:	08 f0       	brcs	.+2      	; 0x3246 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x2ae>
    3244:	3f c0       	rjmp	.+126    	; 0x32c4 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x32c>
        // Avoid transmitting the hi-pri item just sent if any.
        if(gotHiPri && (hiPriIndex == next)) { continue; }
    3246:	00 23       	and	r16, r16
    3248:	11 f0       	breq	.+4      	; 0x324e <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x2b6>
    324a:	51 16       	cp	r5, r17
    324c:	d1 f1       	breq	.+116    	; 0x32c2 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x32a>
        // Skip stat if too sensitive to include in this output.
        DescValueTuple &s = stats[next];
    324e:	14 9d       	mul	r17, r4
    3250:	30 01       	movw	r6, r0
    3252:	11 24       	eor	r1, r1
    3254:	d6 01       	movw	r26, r12
    3256:	11 96       	adiw	r26, 0x01	; 1
    3258:	ed 91       	ld	r30, X+
    325a:	fc 91       	ld	r31, X
    325c:	12 97       	sbiw	r26, 0x02	; 2
    325e:	e6 0d       	add	r30, r6
    3260:	f7 1d       	adc	r31, r7
        if(sensitivity > s.descriptor.sensitivity) { continue; }
    3262:	82 81       	ldd	r24, Z+2	; 0x02
    3264:	bb 85       	ldd	r27, Y+11	; 0x0b
    3266:	8b 17       	cp	r24, r27
    3268:	60 f1       	brcs	.+88     	; 0x32c2 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x32a>
        // Found suitable stat to include in output.
        loPriIndex = next;
        gotLoPri = true;
        // Add to JSON output.
        print(bp, s, commaPending);
    326a:	c6 01       	movw	r24, r12
    326c:	be 01       	movw	r22, r28
    326e:	6e 5f       	subi	r22, 0xFE	; 254
    3270:	7f 4f       	sbci	r23, 0xFF	; 255
    3272:	af 01       	movw	r20, r30
    3274:	9e 01       	movw	r18, r28
    3276:	2f 5f       	subi	r18, 0xFF	; 255
    3278:	3f 4f       	sbci	r19, 0xFF	; 255
    327a:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <SimpleStatsRotationBase::print(BufPrint&, SimpleStatsRotationBase::DescValueTuple const&, bool&) const>
    BufPrint(char *buf, uint8_t bufSize) : b(buf), capacity(bufSize-1), size(0), mark(0) { buf[0] = '\0'; }
    virtual size_t write(uint8_t c);
    // True if buffer is completely full.
    bool isFull() const { return(size == capacity); }
    // Get size/chars already in the buffer, not including trailing '\0'.
    uint8_t getSize() const { return(size); }
    327e:	29 85       	ldd	r18, Y+9	; 0x09
        // If successful then mark this as a fall-back, else rewind and discard this item.
        // If successful, ie still space for the closing "}\0" without running over-length
        // then mark this as a fall-back, else rewind and discard this item.
        if(bp.getSize() > bufSize - 3) { bp.rewind(); break; }
    3280:	82 2f       	mov	r24, r18
    3282:	90 e0       	ldi	r25, 0x00	; 0
    3284:	8e 15       	cp	r24, r14
    3286:	9f 05       	cpc	r25, r15
    3288:	44 f0       	brlt	.+16     	; 0x329a <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x302>
    // Set to record good place to rewind to if necessary.
    void setMark() { mark = size; }
    // Rewind to previous good position, clearing newer text.
    void rewind() { size = mark; b[size] = '\0'; }
    328a:	8a 85       	ldd	r24, Y+10	; 0x0a
    328c:	89 87       	std	Y+9, r24	; 0x09
    328e:	ee 81       	ldd	r30, Y+6	; 0x06
    3290:	ff 81       	ldd	r31, Y+7	; 0x07
    3292:	e8 0f       	add	r30, r24
    3294:	f1 1d       	adc	r31, r1
    3296:	10 82       	st	Z, r1
    3298:	1f c0       	rjmp	.+62     	; 0x32d8 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x340>
    // True if buffer is completely full.
    bool isFull() const { return(size == capacity); }
    // Get size/chars already in the buffer, not including trailing '\0'.
    uint8_t getSize() const { return(size); }
    // Set to record good place to rewind to if necessary.
    void setMark() { mark = size; }
    329a:	2a 87       	std	Y+10, r18	; 0x0a
        else
          {
          bp.setMark();
          lastTXed = lastTXedLoPri = loPriIndex;
    329c:	f6 01       	movw	r30, r12
    329e:	15 83       	std	Z+5, r17	; 0x05
    32a0:	14 83       	std	Z+4, r17	; 0x04
          if(!suppressClearChanged) { stats[loPriIndex].flags.changed = false; }
    32a2:	fd 85       	ldd	r31, Y+13	; 0x0d
    32a4:	ff 23       	and	r31, r31
    32a6:	51 f4       	brne	.+20     	; 0x32bc <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x324>
    32a8:	d6 01       	movw	r26, r12
    32aa:	11 96       	adiw	r26, 0x01	; 1
    32ac:	ed 91       	ld	r30, X+
    32ae:	fc 91       	ld	r31, X
    32b0:	12 97       	sbiw	r26, 0x02	; 2
    32b2:	e6 0d       	add	r30, r6
    32b4:	f7 1d       	adc	r31, r7
    32b6:	86 81       	ldd	r24, Z+6	; 0x06
    32b8:	8e 7f       	andi	r24, 0xFE	; 254
    32ba:	86 83       	std	Z+6, r24	; 0x06
          }
        if(!maximise) { break; }
    32bc:	bc 85       	ldd	r27, Y+12	; 0x0c
    32be:	bb 23       	and	r27, r27
    32c0:	59 f0       	breq	.+22     	; 0x32d8 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x340>
    32c2:	21 2f       	mov	r18, r17
    32c4:	08 94       	sec
    32c6:	81 1c       	adc	r8, r1
    32c8:	91 1c       	adc	r9, r1
    // adding one to the end of the current message if possible,
    // checking first the item indexed after the previous one sent.
//    if(!gotHiPri)
      {
      uint8_t next = lastTXedLoPri;
      for(int i = nStats; --i >= 0; )
    32ca:	c5 01       	movw	r24, r10
    32cc:	88 19       	sub	r24, r8
    32ce:	99 09       	sbc	r25, r9
    32d0:	8f 5f       	subi	r24, 0xFF	; 255
    32d2:	9f 4f       	sbci	r25, 0xFF	; 255
    32d4:	09 f0       	breq	.+2      	; 0x32d8 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x340>
    32d6:	a8 cf       	rjmp	.-176    	; 0x3228 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x290>
    }

  // TODO: maximise.

  // Terminate object.
  bp.print('}');
    32d8:	ce 01       	movw	r24, r28
    32da:	02 96       	adiw	r24, 0x02	; 2
    32dc:	6d e7       	ldi	r22, 0x7D	; 125
    32de:	0e 94 44 3b 	call	0x7688	; 0x7688 <Print::print(char)>
    // The buffer must be of at least size 1.
    // A buffer of size n can accommodate n-1 characters.
    BufPrint(char *buf, uint8_t bufSize) : b(buf), capacity(bufSize-1), size(0), mark(0) { buf[0] = '\0'; }
    virtual size_t write(uint8_t c);
    // True if buffer is completely full.
    bool isFull() const { return(size == capacity); }
    32e2:	29 85       	ldd	r18, Y+9	; 0x09
  DEBUG_SERIAL_PRINT_FLASHSTRING("JSON: ");
  DEBUG_SERIAL_PRINT((char *)buf);
  DEBUG_SERIAL_PRINTLN();
#endif
//  if(w >= (size_t)(bufSize-1))
  if(bp.isFull())
    32e4:	88 85       	ldd	r24, Y+8	; 0x08
    32e6:	28 17       	cp	r18, r24
    32e8:	21 f4       	brne	.+8      	; 0x32f2 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x35a>
    {
    // Overrun, so failed/aborted.
    // Shouldn't really be possible unless buffer far far too small.
    *buf = '\0';
    32ea:	d1 01       	movw	r26, r2
    32ec:	1c 92       	st	X, r1
    32ee:	20 e0       	ldi	r18, 0x00	; 0
    32f0:	0a c0       	rjmp	.+20     	; 0x3306 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x36e>
    return(0);
    }

  // On successfully creating output, update some internal state including success count.
  ++c.count;
    32f2:	f6 01       	movw	r30, r12
    32f4:	91 85       	ldd	r25, Z+9	; 0x09
    32f6:	89 2f       	mov	r24, r25
    32f8:	86 95       	lsr	r24
    32fa:	8f 5f       	subi	r24, 0xFF	; 255
    32fc:	87 70       	andi	r24, 0x07	; 7
    32fe:	88 0f       	add	r24, r24
    3300:	91 7f       	andi	r25, 0xF1	; 241
    3302:	98 2b       	or	r25, r24
    3304:	91 87       	std	Z+9, r25	; 0x09

  return(bp.getSize()); // Success!
  }
    3306:	82 2f       	mov	r24, r18
    3308:	2d 96       	adiw	r28, 0x0d	; 13
    330a:	0f b6       	in	r0, 0x3f	; 63
    330c:	f8 94       	cli
    330e:	de bf       	out	0x3e, r29	; 62
    3310:	0f be       	out	0x3f, r0	; 63
    3312:	cd bf       	out	0x3d, r28	; 61
    3314:	cf 91       	pop	r28
    3316:	df 91       	pop	r29
    3318:	1f 91       	pop	r17
    331a:	0f 91       	pop	r16
    331c:	ff 90       	pop	r15
    331e:	ef 90       	pop	r14
    3320:	df 90       	pop	r13
    3322:	cf 90       	pop	r12
    3324:	bf 90       	pop	r11
    3326:	af 90       	pop	r10
    3328:	9f 90       	pop	r9
    332a:	8f 90       	pop	r8
    332c:	7f 90       	pop	r7
    332e:	6f 90       	pop	r6
    3330:	5f 90       	pop	r5
    3332:	4f 90       	pop	r4
    3334:	3f 90       	pop	r3
    3336:	2f 90       	pop	r2
    3338:	08 95       	ret

0000333a <SimpleStatsRotationBase::findByKey(char const*) const>:
  return(true);
  }

// Returns pointer to stats tuple with given (non-NULL) key if present, else NULL.
// Does a simple linear search.
SimpleStatsRotationBase::DescValueTuple * SimpleStatsRotationBase::findByKey(const SimpleStatsKey key) const
    333a:	8f 92       	push	r8
    333c:	9f 92       	push	r9
    333e:	af 92       	push	r10
    3340:	bf 92       	push	r11
    3342:	cf 92       	push	r12
    3344:	df 92       	push	r13
    3346:	ef 92       	push	r14
    3348:	ff 92       	push	r15
    334a:	0f 93       	push	r16
    334c:	1f 93       	push	r17
    334e:	cf 93       	push	r28
    3350:	df 93       	push	r29
    3352:	6c 01       	movw	r12, r24
    3354:	4b 01       	movw	r8, r22
  {
  for(int i = 0; i < nStats; ++i)
    3356:	fc 01       	movw	r30, r24
    3358:	83 81       	ldd	r24, Z+3	; 0x03
    335a:	a8 2e       	mov	r10, r24
    335c:	bb 24       	eor	r11, r11
    335e:	ee 24       	eor	r14, r14
    3360:	ff 24       	eor	r15, r15
    3362:	00 e0       	ldi	r16, 0x00	; 0
    3364:	10 e0       	ldi	r17, 0x00	; 0
    3366:	11 c0       	rjmp	.+34     	; 0x338a <SimpleStatsRotationBase::findByKey(char const*) const+0x50>
    {
    DescValueTuple * const p = stats + i;
    3368:	f6 01       	movw	r30, r12
    336a:	c1 81       	ldd	r28, Z+1	; 0x01
    336c:	d2 81       	ldd	r29, Z+2	; 0x02
    336e:	c0 0f       	add	r28, r16
    3370:	d1 1f       	adc	r29, r17
    if(0 == strcmp(p->descriptor.key, key)) { return(p); }
    3372:	88 81       	ld	r24, Y
    3374:	99 81       	ldd	r25, Y+1	; 0x01
    3376:	b4 01       	movw	r22, r8
    3378:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <strcmp>
    337c:	09 5f       	subi	r16, 0xF9	; 249
    337e:	1f 4f       	sbci	r17, 0xFF	; 255
    3380:	00 97       	sbiw	r24, 0x00	; 0
    3382:	41 f0       	breq	.+16     	; 0x3394 <SimpleStatsRotationBase::findByKey(char const*) const+0x5a>

// Returns pointer to stats tuple with given (non-NULL) key if present, else NULL.
// Does a simple linear search.
SimpleStatsRotationBase::DescValueTuple * SimpleStatsRotationBase::findByKey(const SimpleStatsKey key) const
  {
  for(int i = 0; i < nStats; ++i)
    3384:	08 94       	sec
    3386:	e1 1c       	adc	r14, r1
    3388:	f1 1c       	adc	r15, r1
    338a:	ea 14       	cp	r14, r10
    338c:	fb 04       	cpc	r15, r11
    338e:	64 f3       	brlt	.-40     	; 0x3368 <SimpleStatsRotationBase::findByKey(char const*) const+0x2e>
    3390:	c0 e0       	ldi	r28, 0x00	; 0
    3392:	d0 e0       	ldi	r29, 0x00	; 0
    {
    DescValueTuple * const p = stats + i;
    if(0 == strcmp(p->descriptor.key, key)) { return(p); }
    }
  return(NULL); // Not found.
  }
    3394:	ce 01       	movw	r24, r28
    3396:	df 91       	pop	r29
    3398:	cf 91       	pop	r28
    339a:	1f 91       	pop	r17
    339c:	0f 91       	pop	r16
    339e:	ff 90       	pop	r15
    33a0:	ef 90       	pop	r14
    33a2:	df 90       	pop	r13
    33a4:	cf 90       	pop	r12
    33a6:	bf 90       	pop	r11
    33a8:	af 90       	pop	r10
    33aa:	9f 90       	pop	r9
    33ac:	8f 90       	pop	r8
    33ae:	08 95       	ret

000033b0 <SimpleStatsRotationBase::put(char const*, int)>:
    
// Create/update value for given stat/key.
// If properties not already set and not supplied then stat will get defaults.
// If descriptor is supplied then its key must match (and the descriptor will be copied).
// True if successful, false otherwise (eg capacity already reached).
bool SimpleStatsRotationBase::put(const SimpleStatsKey key, const int newValue)
    33b0:	ef 92       	push	r14
    33b2:	ff 92       	push	r15
    33b4:	0f 93       	push	r16
    33b6:	1f 93       	push	r17
    33b8:	cf 93       	push	r28
    33ba:	df 93       	push	r29
    33bc:	ec 01       	movw	r28, r24
    33be:	8b 01       	movw	r16, r22
    33c0:	7a 01       	movw	r14, r20
// Returns true iff if a valid key for our subset of JSON.
// Rejects keys containing " or \ or any chars outside the range [32,126]
// to avoid having to escape anything.
bool isValidKey(const SimpleStatsKey key)
  {
  if(NULL == key) { return(false); } 
    33c2:	61 15       	cp	r22, r1
    33c4:	71 05       	cpc	r23, r1
    33c6:	e9 f1       	breq	.+122    	; 0x3442 <SimpleStatsRotationBase::put(char const*, int)+0x92>
    33c8:	fb 01       	movw	r30, r22
    33ca:	09 c0       	rjmp	.+18     	; 0x33de <SimpleStatsRotationBase::put(char const*, int)+0x2e>
  for(const char *s = key; '\0' != *s; ++s)
    {
    const char c = *s;
    if((c < 32) || (c > 126) || ('"' == c) || ('\\' == c)) { return(false); }
    33cc:	89 2f       	mov	r24, r25
    33ce:	80 52       	subi	r24, 0x20	; 32
    33d0:	8f 35       	cpi	r24, 0x5F	; 95
    33d2:	b8 f5       	brcc	.+110    	; 0x3442 <SimpleStatsRotationBase::put(char const*, int)+0x92>
    33d4:	92 32       	cpi	r25, 0x22	; 34
    33d6:	a9 f1       	breq	.+106    	; 0x3442 <SimpleStatsRotationBase::put(char const*, int)+0x92>
    33d8:	9c 35       	cpi	r25, 0x5C	; 92
    33da:	99 f1       	breq	.+102    	; 0x3442 <SimpleStatsRotationBase::put(char const*, int)+0x92>
// Rejects keys containing " or \ or any chars outside the range [32,126]
// to avoid having to escape anything.
bool isValidKey(const SimpleStatsKey key)
  {
  if(NULL == key) { return(false); } 
  for(const char *s = key; '\0' != *s; ++s)
    33dc:	31 96       	adiw	r30, 0x01	; 1
    33de:	90 81       	ld	r25, Z
    33e0:	99 23       	and	r25, r25
    33e2:	a1 f7       	brne	.-24     	; 0x33cc <SimpleStatsRotationBase::put(char const*, int)+0x1c>
    33e4:	36 c0       	rjmp	.+108    	; 0x3452 <SimpleStatsRotationBase::put(char const*, int)+0xa2>
  DescValueTuple *p = findByKey(key);
  // If item already exists, update it.
  if(NULL != p)
    {
    // Update the value and mark as changed if changed.
    if(p->value != newValue)
    33e6:	84 81       	ldd	r24, Z+4	; 0x04
    33e8:	95 81       	ldd	r25, Z+5	; 0x05
    33ea:	8e 15       	cp	r24, r14
    33ec:	9f 05       	cpc	r25, r15
    33ee:	29 f0       	breq	.+10     	; 0x33fa <SimpleStatsRotationBase::put(char const*, int)+0x4a>
      {
      p->value = newValue;
    33f0:	f5 82       	std	Z+5, r15	; 0x05
    33f2:	e4 82       	std	Z+4, r14	; 0x04
      p->flags.changed = true;
    33f4:	86 81       	ldd	r24, Z+6	; 0x06
    33f6:	81 60       	ori	r24, 0x01	; 1
    33f8:	86 83       	std	Z+6, r24	; 0x06
    33fa:	81 e0       	ldi	r24, 0x01	; 1
    33fc:	23 c0       	rjmp	.+70     	; 0x3444 <SimpleStatsRotationBase::put(char const*, int)+0x94>
    return(true);
    }

  // If not yet at capacity then add this new item at the end.
  // Mark it as changed to prioritise seeing it in the JSON output.
  if(nStats < capacity)
    33fe:	2b 81       	ldd	r18, Y+3	; 0x03
    3400:	88 81       	ld	r24, Y
    3402:	28 17       	cp	r18, r24
    3404:	a8 f4       	brcc	.+42     	; 0x3430 <SimpleStatsRotationBase::put(char const*, int)+0x80>
    {
    p = stats + (nStats++);
    3406:	87 e0       	ldi	r24, 0x07	; 7
    3408:	28 9f       	mul	r18, r24
    340a:	c0 01       	movw	r24, r0
    340c:	11 24       	eor	r1, r1
    340e:	e9 81       	ldd	r30, Y+1	; 0x01
    3410:	fa 81       	ldd	r31, Y+2	; 0x02
    3412:	e8 0f       	add	r30, r24
    3414:	f9 1f       	adc	r31, r25
    3416:	2f 5f       	subi	r18, 0xFF	; 255
    3418:	2b 83       	std	Y+3, r18	; 0x03
    *p = DescValueTuple();
    p->value = newValue;
    341a:	f5 82       	std	Z+5, r15	; 0x05
    341c:	e4 82       	std	Z+4, r14	; 0x04
    p->flags.changed = true;
    341e:	86 81       	ldd	r24, Z+6	; 0x06
    3420:	81 60       	ori	r24, 0x01	; 1
    3422:	86 83       	std	Z+6, r24	; 0x06
    // Copy descriptor .
    p->descriptor = GenericStatsDescriptor(key);
    3424:	13 82       	std	Z+3, r1	; 0x03
    3426:	81 e0       	ldi	r24, 0x01	; 1
    3428:	82 83       	std	Z+2, r24	; 0x02
    342a:	11 83       	std	Z+1, r17	; 0x01
    342c:	00 83       	st	Z, r16
    342e:	0a c0       	rjmp	.+20     	; 0x3444 <SimpleStatsRotationBase::put(char const*, int)+0x94>
    // Addition of new field done!
    return(true);
    }

#if 1 && defined(DEBUG)
DEBUG_SERIAL_PRINT_FLASHSTRING("Too many keys: ");
    3430:	80 e6       	ldi	r24, 0x60	; 96
    3432:	91 e0       	ldi	r25, 0x01	; 1
    3434:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <serialPrintAndFlush(__FlashStringHelper const*)>
DEBUG_SERIAL_PRINT(key);
    3438:	c8 01       	movw	r24, r16
    343a:	0e 94 e7 26 	call	0x4dce	; 0x4dce <serialPrintAndFlush(char const*)>
DEBUG_SERIAL_PRINTLN();
    343e:	0e 94 bb 26 	call	0x4d76	; 0x4d76 <serialPrintlnAndFlush()>
#endif
  return(false); // FAILED: full.
    3442:	80 e0       	ldi	r24, 0x00	; 0
  }
    3444:	df 91       	pop	r29
    3446:	cf 91       	pop	r28
    3448:	1f 91       	pop	r17
    344a:	0f 91       	pop	r16
    344c:	ff 90       	pop	r15
    344e:	ef 90       	pop	r14
    3450:	08 95       	ret
DEBUG_SERIAL_PRINTLN();
#endif
    return(false);
    }

  DescValueTuple *p = findByKey(key);
    3452:	ce 01       	movw	r24, r28
    3454:	b8 01       	movw	r22, r16
    3456:	0e 94 9d 19 	call	0x333a	; 0x333a <SimpleStatsRotationBase::findByKey(char const*) const>
    345a:	fc 01       	movw	r30, r24
  // If item already exists, update it.
  if(NULL != p)
    345c:	00 97       	sbiw	r24, 0x00	; 0
    345e:	19 f6       	brne	.-122    	; 0x33e6 <SimpleStatsRotationBase::put(char const*, int)+0x36>
    3460:	ce cf       	rjmp	.-100    	; 0x33fe <SimpleStatsRotationBase::put(char const*, int)+0x4e>

00003462 <SimpleStatsRotationBase::remove(char const*)>:
  return(NULL); // Not found.
  }

// Remove given stat and properties.
// True iff the item existed and was removed.
bool SimpleStatsRotationBase::remove(const SimpleStatsKey key)
    3462:	cf 93       	push	r28
    3464:	df 93       	push	r29
    3466:	ec 01       	movw	r28, r24
  {
  DescValueTuple *p = findByKey(key);
    3468:	0e 94 9d 19 	call	0x333a	; 0x333a <SimpleStatsRotationBase::findByKey(char const*) const>
    346c:	bc 01       	movw	r22, r24
  if(NULL == p) { return(false); }
    346e:	00 97       	sbiw	r24, 0x00	; 0
    3470:	11 f4       	brne	.+4      	; 0x3476 <SimpleStatsRotationBase::remove(char const*)+0x14>
    3472:	80 e0       	ldi	r24, 0x00	; 0
    3474:	2b c0       	rjmp	.+86     	; 0x34cc <SimpleStatsRotationBase::remove(char const*)+0x6a>
  // If it needs to be removed and is not the last item
  // then move the last item down into its slot.
  const bool lastItem = ((p - stats) == (nStats - 1));
    3476:	a9 81       	ldd	r26, Y+1	; 0x01
    3478:	ba 81       	ldd	r27, Y+2	; 0x02
    347a:	4b 81       	ldd	r20, Y+3	; 0x03
  if(!lastItem) { *p = stats[nStats-1]; }
    347c:	9c 01       	movw	r18, r24
    347e:	2a 1b       	sub	r18, r26
    3480:	3b 0b       	sbc	r19, r27
    3482:	87 eb       	ldi	r24, 0xB7	; 183
    3484:	9d e6       	ldi	r25, 0x6D	; 109
    3486:	f9 01       	movw	r30, r18
    3488:	e8 9f       	mul	r30, r24
    348a:	90 01       	movw	r18, r0
    348c:	e9 9f       	mul	r30, r25
    348e:	30 0d       	add	r19, r0
    3490:	f8 9f       	mul	r31, r24
    3492:	30 0d       	add	r19, r0
    3494:	11 24       	eor	r1, r1
    3496:	50 e0       	ldi	r21, 0x00	; 0
    3498:	ca 01       	movw	r24, r20
    349a:	01 97       	sbiw	r24, 0x01	; 1
    349c:	28 17       	cp	r18, r24
    349e:	39 07       	cpc	r19, r25
    34a0:	89 f0       	breq	.+34     	; 0x34c4 <SimpleStatsRotationBase::remove(char const*)+0x62>
    34a2:	fa 01       	movw	r30, r20
    34a4:	83 e0       	ldi	r24, 0x03	; 3
    34a6:	ee 0f       	add	r30, r30
    34a8:	ff 1f       	adc	r31, r31
    34aa:	8a 95       	dec	r24
    34ac:	e1 f7       	brne	.-8      	; 0x34a6 <SimpleStatsRotationBase::remove(char const*)+0x44>
    34ae:	e4 1b       	sub	r30, r20
    34b0:	f5 0b       	sbc	r31, r21
    34b2:	ea 0f       	add	r30, r26
    34b4:	fb 1f       	adc	r31, r27
    34b6:	db 01       	movw	r26, r22
    34b8:	37 97       	sbiw	r30, 0x07	; 7
    34ba:	87 e0       	ldi	r24, 0x07	; 7
    34bc:	01 90       	ld	r0, Z+
    34be:	0d 92       	st	X+, r0
    34c0:	81 50       	subi	r24, 0x01	; 1
    34c2:	e1 f7       	brne	.-8      	; 0x34bc <SimpleStatsRotationBase::remove(char const*)+0x5a>
  // We got rid of one!
  // TODO: possibly explicitly destroy/overwrite the removed one at the end.
  --nStats;
    34c4:	8b 81       	ldd	r24, Y+3	; 0x03
    34c6:	81 50       	subi	r24, 0x01	; 1
    34c8:	8b 83       	std	Y+3, r24	; 0x03
    34ca:	81 e0       	ldi	r24, 0x01	; 1
  return(true);
  }
    34cc:	df 91       	pop	r29
    34ce:	cf 91       	pop	r28
    34d0:	08 95       	ret

000034d2 <ensureIDCreated(bool)>:
// Coerce any ID bytes to valid values if unset (0xff) or if forced,
// by filling with valid values (0x80--0xfe) from decent entropy gathered on the fly.
// Will moan about invalid values and return false but not attempt to reset,
// eg in case underlying EEPROM cell is worn/failing.
// Returns true iff all values good.
bool ensureIDCreated(const bool force)
    34d2:	af 92       	push	r10
    34d4:	bf 92       	push	r11
    34d6:	cf 92       	push	r12
    34d8:	df 92       	push	r13
    34da:	ef 92       	push	r14
    34dc:	ff 92       	push	r15
    34de:	0f 93       	push	r16
    34e0:	1f 93       	push	r17
    34e2:	cf 93       	push	r28
    34e4:	df 93       	push	r29
    34e6:	a8 2e       	mov	r10, r24
    34e8:	bb 24       	eor	r11, r11
    34ea:	b3 94       	inc	r11
    34ec:	ee 24       	eor	r14, r14
    34ee:	ff 24       	eor	r15, r15
    34f0:	c4 e1       	ldi	r28, 0x14	; 20
    34f2:	d0 e0       	ldi	r29, 0x00	; 0
    34f4:	dc 2e       	mov	r13, r28
    34f6:	cd 2e       	mov	r12, r29
  {
  bool allGood = true;
  for(uint8_t i = 0; i < EE_LEN_ID; ++i)
    {
    uint8_t * const loc = i + (uint8_t *)EE_START_ID;
    if(force || (0xff == eeprom_read_byte(loc))) // Byte is unset or change is being forced.
    34f8:	aa 20       	and	r10, r10
    34fa:	41 f4       	brne	.+16     	; 0x350c <ensureIDCreated(bool)+0x3a>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    34fc:	f9 99       	sbic	0x1f, 1	; 31
    34fe:	fe cf       	rjmp	.-4      	; 0x34fc <ensureIDCreated(bool)+0x2a>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    3500:	d2 bd       	out	0x22, r29	; 34
    3502:	c1 bd       	out	0x21, r28	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    3504:	f8 9a       	sbi	0x1f, 0	; 31
    3506:	80 b5       	in	r24, 0x20	; 32
    3508:	8f 3f       	cpi	r24, 0xFF	; 255
    350a:	41 f5       	brne	.+80     	; 0x355c <ensureIDCreated(bool)+0x8a>
        {
        serialPrintAndFlush(F("Setting ID byte "));
    350c:	8d e8       	ldi	r24, 0x8D	; 141
    350e:	91 e0       	ldi	r25, 0x01	; 1
    3510:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush(i);
    3514:	c7 01       	movw	r24, r14
    3516:	6a e0       	ldi	r22, 0x0A	; 10
    3518:	70 e0       	ldi	r23, 0x00	; 0
    351a:	0e 94 cb 26 	call	0x4d96	; 0x4d96 <serialPrintAndFlush(int, int)>
        serialPrintAndFlush(F(" ... "));
    351e:	87 e8       	ldi	r24, 0x87	; 135
    3520:	91 e0       	ldi	r25, 0x01	; 1
    3522:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <serialPrintAndFlush(__FlashStringHelper const*)>
        const uint8_t envNoise = ((i & 1) ? TemperatureC16.get() : AmbLight.get());
    3526:	e0 fe       	sbrs	r14, 0
    3528:	03 c0       	rjmp	.+6      	; 0x3530 <ensureIDCreated(bool)+0x5e>
    352a:	00 91 c8 03 	lds	r16, 0x03C8
    352e:	02 c0       	rjmp	.+4      	; 0x3534 <ensureIDCreated(bool)+0x62>
    3530:	00 91 be 03 	lds	r16, 0x03BE
        for( ; ; )
          {
          // Try to make decently-randomised 'unique-ish' ID with mixture of sources.
          // Is not confidential, and will be transmitted in the clear.
          // System will typically not have been running long when this is invoked.
          const uint8_t newValue = 0x80 | (getSecureRandomByte() ^ envNoise);
    3534:	0e 94 1d 26 	call	0x4c3a	; 0x4c3a <getSecureRandomByte()>
    3538:	18 2f       	mov	r17, r24
    353a:	10 27       	eor	r17, r16
    353c:	10 68       	ori	r17, 0x80	; 128
          if(0xff == newValue) { continue; } // Reject unusable value.
    353e:	1f 3f       	cpi	r17, 0xFF	; 255
    3540:	c9 f3       	breq	.-14     	; 0x3534 <ensureIDCreated(bool)+0x62>
          eeprom_smart_update_byte(loc, newValue);
    3542:	8d 2d       	mov	r24, r13
    3544:	9c 2d       	mov	r25, r12
    3546:	61 2f       	mov	r22, r17
    3548:	0e 94 49 10 	call	0x2092	; 0x2092 <eeprom_smart_update_byte(unsigned char*, unsigned char)>
          serialPrintAndFlush(newValue, HEX);
    354c:	81 2f       	mov	r24, r17
    354e:	90 e0       	ldi	r25, 0x00	; 0
    3550:	60 e1       	ldi	r22, 0x10	; 16
    3552:	70 e0       	ldi	r23, 0x00	; 0
    3554:	0e 94 cb 26 	call	0x4d96	; 0x4d96 <serialPrintAndFlush(int, int)>
          break;
          }
        serialPrintlnAndFlush();
    3558:	0e 94 bb 26 	call	0x4d76	; 0x4d76 <serialPrintlnAndFlush()>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    355c:	f9 99       	sbic	0x1f, 1	; 31
    355e:	fe cf       	rjmp	.-4      	; 0x355c <ensureIDCreated(bool)+0x8a>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    3560:	d2 bd       	out	0x22, r29	; 34
    3562:	c1 bd       	out	0x21, r28	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    3564:	f8 9a       	sbi	0x1f, 0	; 31
    3566:	10 b5       	in	r17, 0x20	; 32
        }
    // Validate.
    const uint8_t v2 = eeprom_read_byte(loc);
    if(!validIDByte(v2))
    3568:	81 2f       	mov	r24, r17
    356a:	80 58       	subi	r24, 0x80	; 128
    356c:	8f 37       	cpi	r24, 0x7F	; 127
    356e:	b0 f0       	brcs	.+44     	; 0x359c <ensureIDCreated(bool)+0xca>
        {
        allGood = false;
        serialPrintAndFlush(F("Invalid ID byte "));
    3570:	86 e7       	ldi	r24, 0x76	; 118
    3572:	91 e0       	ldi	r25, 0x01	; 1
    3574:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush(i);
    3578:	c7 01       	movw	r24, r14
    357a:	6a e0       	ldi	r22, 0x0A	; 10
    357c:	70 e0       	ldi	r23, 0x00	; 0
    357e:	0e 94 cb 26 	call	0x4d96	; 0x4d96 <serialPrintAndFlush(int, int)>
        serialPrintAndFlush(F(" ... "));
    3582:	80 e7       	ldi	r24, 0x70	; 112
    3584:	91 e0       	ldi	r25, 0x01	; 1
    3586:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush(v2, HEX);
    358a:	81 2f       	mov	r24, r17
    358c:	90 e0       	ldi	r25, 0x00	; 0
    358e:	60 e1       	ldi	r22, 0x10	; 16
    3590:	70 e0       	ldi	r23, 0x00	; 0
    3592:	0e 94 cb 26 	call	0x4d96	; 0x4d96 <serialPrintAndFlush(int, int)>
        serialPrintlnAndFlush();
    3596:	0e 94 bb 26 	call	0x4d76	; 0x4d76 <serialPrintlnAndFlush()>
    359a:	bb 24       	eor	r11, r11
    359c:	08 94       	sec
    359e:	e1 1c       	adc	r14, r1
    35a0:	f1 1c       	adc	r15, r1
    35a2:	21 96       	adiw	r28, 0x01	; 1
// eg in case underlying EEPROM cell is worn/failing.
// Returns true iff all values good.
bool ensureIDCreated(const bool force)
  {
  bool allGood = true;
  for(uint8_t i = 0; i < EE_LEN_ID; ++i)
    35a4:	88 e0       	ldi	r24, 0x08	; 8
    35a6:	e8 16       	cp	r14, r24
    35a8:	f1 04       	cpc	r15, r1
    35aa:	09 f0       	breq	.+2      	; 0x35ae <ensureIDCreated(bool)+0xdc>
    35ac:	a3 cf       	rjmp	.-186    	; 0x34f4 <ensureIDCreated(bool)+0x22>
        serialPrintAndFlush(v2, HEX);
        serialPrintlnAndFlush();
        }
     }
  return(allGood);
  }
    35ae:	8b 2d       	mov	r24, r11
    35b0:	df 91       	pop	r29
    35b2:	cf 91       	pop	r28
    35b4:	1f 91       	pop	r17
    35b6:	0f 91       	pop	r16
    35b8:	ff 90       	pop	r15
    35ba:	ef 90       	pop	r14
    35bc:	df 90       	pop	r13
    35be:	cf 90       	pop	r12
    35c0:	bf 90       	pop	r11
    35c2:	af 90       	pop	r10
    35c4:	08 95       	ret

000035c6 <getLastCoreStats(FullStatsMessageCore*)>:

// Gets (and clears) the last core stats record received, if any, returning true and filling in the stats struct.
// If no minimal stats record has been received since the last call then the ID will be absent and the rest undefined.
#if defined(ALLOW_STATS_RX)
#ifndef getLastCoreStats
void getLastCoreStats(FullStatsMessageCore_t *stats)
    35c6:	fc 01       	movw	r30, r24
  {
#if 0 && defined(DEBUG)
  if(NULL == stats) { panic(); }
#endif
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    35c8:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    35ca:	f8 94       	cli
    {
    if(!coreStats.containsID)
    35cc:	80 91 21 03 	lds	r24, 0x0321
    35d0:	80 fd       	sbrc	r24, 0
    35d2:	04 c0       	rjmp	.+8      	; 0x35dc <getLastCoreStats(FullStatsMessageCore*)+0x16>
      { stats->containsID = false; } // Nothing there; just clear containsID field in response for speed.
    35d4:	80 81       	ld	r24, Z
    35d6:	8e 7f       	andi	r24, 0xFE	; 254
    35d8:	80 83       	st	Z, r24
    35da:	0d c0       	rjmp	.+26     	; 0x35f6 <getLastCoreStats(FullStatsMessageCore*)+0x30>
    else
      {
      // Copy everything.
      memcpy(stats, (void *)&coreStats, sizeof(*stats));
    35dc:	df 01       	movw	r26, r30
    35de:	e1 e2       	ldi	r30, 0x21	; 33
    35e0:	f3 e0       	ldi	r31, 0x03	; 3
    35e2:	87 e0       	ldi	r24, 0x07	; 7
    35e4:	01 90       	ld	r0, Z+
    35e6:	0d 92       	st	X+, r0
    35e8:	81 50       	subi	r24, 0x01	; 1
    35ea:	e1 f7       	brne	.-8      	; 0x35e4 <getLastCoreStats(FullStatsMessageCore*)+0x1e>
      coreStats.containsID = false; // Mark stats as read.
    35ec:	80 91 21 03 	lds	r24, 0x0321
    35f0:	8e 7f       	andi	r24, 0xFE	; 254
    35f2:	80 93 21 03 	sts	0x0321, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    35f6:	9f bf       	out	0x3f, r25	; 63
      }
    }
  }
    35f8:	08 95       	ret

000035fa <recordCoreStats(bool, FullStatsMessageCore const*)>:
// Record core incoming stats; ID must be set as a minimum.
// Is thread/ISR-safe and fast.
// May be backed by a finite-depth queue, even zero-length (ie discarding); usually holds just one item.
#if defined(ALLOW_STATS_RX)
#ifndef recordCoreStats
void recordCoreStats(const bool secure, const FullStatsMessageCore_t * const stats)
    35fa:	fb 01       	movw	r30, r22
  {
#if 0 && defined(DEBUG)
  if(NULL == payload) { panic(); }
#endif  // TODO
   if(!stats->containsID) { return; } // Ignore if no ID.
    35fc:	80 81       	ld	r24, Z
    35fe:	80 ff       	sbrs	r24, 0
    3600:	17 c0       	rjmp	.+46     	; 0x3630 <recordCoreStats(bool, FullStatsMessageCore const*)+0x36>
   ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    3602:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3604:	f8 94       	cli
    {
    if(coreStats.containsID) { ++inboundStatsQueueOverrun; } // Dropped a frame.
    3606:	80 91 21 03 	lds	r24, 0x0321
    360a:	80 ff       	sbrs	r24, 0
    360c:	09 c0       	rjmp	.+18     	; 0x3620 <recordCoreStats(bool, FullStatsMessageCore const*)+0x26>
    360e:	80 91 28 03 	lds	r24, 0x0328
    3612:	90 91 29 03 	lds	r25, 0x0329
    3616:	01 96       	adiw	r24, 0x01	; 1
    3618:	90 93 29 03 	sts	0x0329, r25
    361c:	80 93 28 03 	sts	0x0328, r24
    memcpy((void *)&coreStats, stats, sizeof(coreStats));
    3620:	a1 e2       	ldi	r26, 0x21	; 33
    3622:	b3 e0       	ldi	r27, 0x03	; 3
    3624:	87 e0       	ldi	r24, 0x07	; 7
    3626:	01 90       	ld	r0, Z+
    3628:	0d 92       	st	X+, r0
    362a:	81 50       	subi	r24, 0x01	; 1
    362c:	e1 f7       	brne	.-8      	; 0x3626 <recordCoreStats(bool, FullStatsMessageCore const*)+0x2c>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    362e:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    3630:	08 95       	ret

00003632 <getLastJSONStats(char*)>:
// filling in the supplied buffer
// else leaving it starting with '\0' if none available.
// The buffer must be at least MSG_JSON_MAX_LENGTH+1 chars.
#if defined(ALLOW_STATS_RX)
#ifndef getLastJSONStats
void getLastJSONStats(char *buf)
    3632:	1f 93       	push	r17
    3634:	fc 01       	movw	r30, r24
  {
#if 0 && defined(DEBUG)
  if(NULL == buf) { panic(); }
#endif
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    3636:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3638:	f8 94       	cli
    {
    if('\0' == *jsonStats)
    363a:	80 91 2a 03 	lds	r24, 0x032A
    363e:	88 23       	and	r24, r24
    3640:	11 f4       	brne	.+4      	; 0x3646 <getLastJSONStats(char*)+0x14>
      { *buf = '\0'; } // No message available.
    3642:	10 82       	st	Z, r1
    3644:	07 c0       	rjmp	.+14     	; 0x3654 <getLastJSONStats(char*)+0x22>
    else
      {
      // Copy the message to the receiver.
      strcpy(buf, jsonStats);
    3646:	cf 01       	movw	r24, r30
    3648:	6a e2       	ldi	r22, 0x2A	; 42
    364a:	73 e0       	ldi	r23, 0x03	; 3
    364c:	0e 94 04 03 	call	0x608	; 0x608 <strcpy>
      // Clear the buffer.
      *jsonStats = '\0';
    3650:	10 92 2a 03 	sts	0x032A, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3654:	1f bf       	out	0x3f, r17	; 63
      }
    }
  }
    3656:	1f 91       	pop	r17
    3658:	08 95       	ret

0000365a <recordJSONStats(bool, char const*)>:
// The supplied JSON should already have been somewhat validated.
// Is thread/ISR-safe and moderately fast (though will require a data copy).
// May be backed by a finite-depth queue, even zero-length (ie discarding); usually holds just one item.
#if defined(ALLOW_STATS_RX)
#ifndef recordJSONStats
void recordJSONStats(bool secure, const char *json)
    365a:	1f 93       	push	r17
  {
#if 0 && defined(DEBUG)
  if(NULL == json) { panic(); }
  if('\0' == *json) { panic(); }
#endif
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    365c:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    365e:	f8 94       	cli
    {
    if('\0' != *jsonStats) { ++inboundStatsQueueOverrun; } // Dropped a frame.
    3660:	80 91 2a 03 	lds	r24, 0x032A
    3664:	88 23       	and	r24, r24
    3666:	49 f0       	breq	.+18     	; 0x367a <recordJSONStats(bool, char const*)+0x20>
    3668:	80 91 28 03 	lds	r24, 0x0328
    366c:	90 91 29 03 	lds	r25, 0x0329
    3670:	01 96       	adiw	r24, 0x01	; 1
    3672:	90 93 29 03 	sts	0x0329, r25
    3676:	80 93 28 03 	sts	0x0328, r24
    // Atomically overwrite existing buffer with new non-empty stats message.
    strncpy(jsonStats, json, MSG_JSON_MAX_LENGTH+1);
    367a:	8a e2       	ldi	r24, 0x2A	; 42
    367c:	93 e0       	ldi	r25, 0x03	; 3
    367e:	48 e3       	ldi	r20, 0x38	; 56
    3680:	50 e0       	ldi	r21, 0x00	; 0
    3682:	0e 94 0b 03 	call	0x616	; 0x616 <strncpy>
    // Drop over-length message,
    if('\0' != jsonStats[sizeof(jsonStats) - 1]) { *jsonStats = '\0'; }
    3686:	80 91 61 03 	lds	r24, 0x0361
    368a:	88 23       	and	r24, r24
    368c:	11 f0       	breq	.+4      	; 0x3692 <recordJSONStats(bool, char const*)+0x38>
    368e:	10 92 2a 03 	sts	0x032A, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3692:	1f bf       	out	0x3f, r17	; 63
    }
  }
    3694:	1f 91       	pop	r17
    3696:	08 95       	ret

00003698 <extractTrailingMinimalStatsPayload(unsigned char const*, trailingMinimalStatsPayload*)>:
#endif
  }

// Extract payload from valid (3-byte) header+payload+CRC into payload struct; only 2 bytes are actually read.
// Input bytes (eg header and check value) must already have been validated.
void extractTrailingMinimalStatsPayload(const uint8_t *const buf, trailingMinimalStatsPayload_t *const payload)
    3698:	0f 93       	push	r16
    369a:	1f 93       	push	r17
    369c:	cf 93       	push	r28
    369e:	df 93       	push	r29
    36a0:	ec 01       	movw	r28, r24
    36a2:	8b 01       	movw	r16, r22
  {
#ifdef DEBUG
  if(NULL == payload) { panic(); }
    36a4:	61 15       	cp	r22, r1
    36a6:	71 05       	cpc	r23, r1
    36a8:	11 f4       	brne	.+4      	; 0x36ae <extractTrailingMinimalStatsPayload(unsigned char const*, trailingMinimalStatsPayload*)+0x16>
    36aa:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <panic()>
#endif
  payload->powerLow = (0 != (buf[0] & 0x10));
    36ae:	88 81       	ld	r24, Y
    36b0:	88 0f       	add	r24, r24
    36b2:	88 0f       	add	r24, r24
    36b4:	88 0f       	add	r24, r24
    36b6:	80 78       	andi	r24, 0x80	; 128
    36b8:	f8 01       	movw	r30, r16
    36ba:	41 81       	ldd	r20, Z+1	; 0x01
    36bc:	4f 77       	andi	r20, 0x7F	; 127
    36be:	48 2b       	or	r20, r24
    36c0:	41 83       	std	Z+1, r20	; 0x01
  payload->tempC16 = ((((int16_t) buf[1]) << 4) | (buf[0] & 0xf)) + MESSAGING_TRAILING_MINIMAL_STATS_TEMP_BIAS;
    36c2:	29 81       	ldd	r18, Y+1	; 0x01
    36c4:	30 e0       	ldi	r19, 0x00	; 0
    36c6:	94 e0       	ldi	r25, 0x04	; 4
    36c8:	22 0f       	add	r18, r18
    36ca:	33 1f       	adc	r19, r19
    36cc:	9a 95       	dec	r25
    36ce:	e1 f7       	brne	.-8      	; 0x36c8 <extractTrailingMinimalStatsPayload(unsigned char const*, trailingMinimalStatsPayload*)+0x30>
    36d0:	88 81       	ld	r24, Y
    36d2:	90 e0       	ldi	r25, 0x00	; 0
    36d4:	8f 70       	andi	r24, 0x0F	; 15
    36d6:	90 70       	andi	r25, 0x00	; 0
    36d8:	28 2b       	or	r18, r24
    36da:	39 2b       	or	r19, r25
    36dc:	20 54       	subi	r18, 0x40	; 64
    36de:	31 40       	sbci	r19, 0x01	; 1
    36e0:	20 83       	st	Z, r18
    36e2:	83 2f       	mov	r24, r19
    36e4:	8f 77       	andi	r24, 0x7F	; 127
    36e6:	40 78       	andi	r20, 0x80	; 128
    36e8:	48 2b       	or	r20, r24
    36ea:	41 83       	std	Z+1, r20	; 0x01
  }
    36ec:	df 91       	pop	r29
    36ee:	cf 91       	pop	r28
    36f0:	1f 91       	pop	r17
    36f2:	0f 91       	pop	r16
    36f4:	08 95       	ret

000036f6 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)>:
// If successful returns pointer to next byte of message, ie just after full stats message decoded.
// Returns null if failed (eg because of corrupt message data) and state of 'content' result is undefined.
// This will avoid copying into the result data (possibly tainted) that has arrived at an inappropriate security level.
//   * content will contain data decoded from the message; must be non-null
const uint8_t *decodeFullStatsMessageCore(const uint8_t * const buf, const uint8_t buflen, const stats_TX_level secLevel, const bool secureChannel,
    FullStatsMessageCore_t * const content)
    36f6:	ef 92       	push	r14
    36f8:	ff 92       	push	r15
    36fa:	0f 93       	push	r16
    36fc:	1f 93       	push	r17
    36fe:	cf 93       	push	r28
    3700:	df 93       	push	r29
    3702:	7c 01       	movw	r14, r24
  {
  if(NULL == buf) { return(NULL); } // Could be an assert/panic instead at a pinch.
    3704:	00 97       	sbiw	r24, 0x00	; 0
    3706:	09 f4       	brne	.+2      	; 0x370a <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x14>
    3708:	8f c0       	rjmp	.+286    	; 0x3828 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  if(NULL == content) { return(NULL); } // Could be an assert/panic instead at a pinch.
    370a:	01 15       	cp	r16, r1
    370c:	11 05       	cpc	r17, r1
    370e:	09 f4       	brne	.+2      	; 0x3712 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x1c>
    3710:	8b c0       	rjmp	.+278    	; 0x3828 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  if(buflen < FullStatsMessageCore_MIN_BYTES_ON_WIRE)
    3712:	63 30       	cpi	r22, 0x03	; 3
    3714:	08 f4       	brcc	.+2      	; 0x3718 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x22>
    3716:	88 c0       	rjmp	.+272    	; 0x3828 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
#define FullStatsMessageCore_MAX_BYTES_ON_WIRE 8
// Minimum size on wire including trailing CRC of core of FullStatsMessage.  TX message buffer should be one larger for trailing 0xff.
#define FullStatsMessageCore_MIN_BYTES_ON_WIRE 3

// Clear a FullStatsMessageCore_t, also indicating no optional fields present.
static inline void clearFullStatsMessageCore(FullStatsMessageCore_t *const p) { memset(p, 0, sizeof(FullStatsMessageCore_t)); }
    3718:	87 e0       	ldi	r24, 0x07	; 7
    371a:	f8 01       	movw	r30, r16
    371c:	11 92       	st	Z+, r1
    371e:	8a 95       	dec	r24
    3720:	e9 f7       	brne	.-6      	; 0x371c <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x26>
//#define MESSAGING_FULL_STATS_HEADER_MSBS 0x70
//#define MESSAGING_FULL_STATS_HEADER_MASK 0xf0
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_PRESENT 4
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_HIGH 2
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_SECURE 1
  if(MESSAGING_FULL_STATS_HEADER_MSBS != (header & MESSAGING_FULL_STATS_HEADER_MASK)) { return(NULL); } // Bad header.
    3722:	f7 01       	movw	r30, r14
    3724:	80 81       	ld	r24, Z
    3726:	28 2f       	mov	r18, r24
    3728:	30 e0       	ldi	r19, 0x00	; 0
    372a:	c9 01       	movw	r24, r18
    372c:	80 7f       	andi	r24, 0xF0	; 240
    372e:	90 70       	andi	r25, 0x00	; 0
    3730:	80 37       	cpi	r24, 0x70	; 112
    3732:	91 05       	cpc	r25, r1
    3734:	09 f0       	breq	.+2      	; 0x3738 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x42>
    3736:	78 c0       	rjmp	.+240    	; 0x3828 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  if(0 != (header & MESSAGING_FULL_STATS_HEADER_BITS_ID_SECURE)) { return(NULL); } // TODO: cannot do secure messages yet.
    3738:	20 fd       	sbrc	r18, 0
    373a:	76 c0       	rjmp	.+236    	; 0x3828 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  // READ THE MESSAGE!
  // Pointer to next byte to read in message.
  register const uint8_t *b = buf;

  // Validate the message header and start to fill in structure.
  const uint8_t header = *b++;
    373c:	e7 01       	movw	r28, r14
    373e:	21 96       	adiw	r28, 0x01	; 1
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_SECURE 1
  if(MESSAGING_FULL_STATS_HEADER_MSBS != (header & MESSAGING_FULL_STATS_HEADER_MASK)) { return(NULL); } // Bad header.
  if(0 != (header & MESSAGING_FULL_STATS_HEADER_BITS_ID_SECURE)) { return(NULL); } // TODO: cannot do secure messages yet.
  // Extract ID if present.
  const bool containsID = (0 != (header & MESSAGING_FULL_STATS_HEADER_BITS_ID_PRESENT));
  if(containsID)
    3740:	22 ff       	sbrs	r18, 2
    3742:	12 c0       	rjmp	.+36     	; 0x3768 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x72>
    {
    content->containsID = true;
    3744:	f8 01       	movw	r30, r16
    3746:	80 81       	ld	r24, Z
    3748:	81 60       	ori	r24, 0x01	; 1
    374a:	80 83       	st	Z, r24
    const uint8_t idHigh = ((0 != (header & MESSAGING_FULL_STATS_HEADER_BITS_ID_HIGH)) ? 0x80 : 0);
    374c:	21 fd       	sbrc	r18, 1
    374e:	02 c0       	rjmp	.+4      	; 0x3754 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x5e>
    3750:	90 e0       	ldi	r25, 0x00	; 0
    3752:	01 c0       	rjmp	.+2      	; 0x3756 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x60>
    3754:	90 e8       	ldi	r25, 0x80	; 128
    content->id0 = *b++ | idHigh;
    3756:	f7 01       	movw	r30, r14
    3758:	81 81       	ldd	r24, Z+1	; 0x01
    375a:	89 2b       	or	r24, r25
    375c:	f8 01       	movw	r30, r16
    375e:	81 83       	std	Z+1, r24	; 0x01
    content->id1 = *b++ | idHigh;
    3760:	89 81       	ldd	r24, Y+1	; 0x01
    3762:	98 2b       	or	r25, r24
    3764:	92 83       	std	Z+2, r25	; 0x02
    3766:	22 96       	adiw	r28, 0x02	; 2
    }

  // If next header is temp/power then extract it, else must be the flags header.
  if(MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MSBS == (*b & MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MASK))
    3768:	88 81       	ld	r24, Y
    376a:	80 7e       	andi	r24, 0xE0	; 224
    376c:	80 34       	cpi	r24, 0x40	; 64
    376e:	71 f4       	brne	.+28     	; 0x378c <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x96>
    {
    if(0 != (0x80 & b[1])) { return(NULL); } // Following byte does not have msb correctly cleared.
    3770:	89 81       	ldd	r24, Y+1	; 0x01
    3772:	87 fd       	sbrc	r24, 7
    3774:	59 c0       	rjmp	.+178    	; 0x3828 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
    extractTrailingMinimalStatsPayload(b, &(content->tempAndPower));
    3776:	b8 01       	movw	r22, r16
    3778:	6d 5f       	subi	r22, 0xFD	; 253
    377a:	7f 4f       	sbci	r23, 0xFF	; 255
    377c:	ce 01       	movw	r24, r28
    377e:	0e 94 4c 1b 	call	0x3698	; 0x3698 <extractTrailingMinimalStatsPayload(unsigned char const*, trailingMinimalStatsPayload*)>
    b += 2;
    3782:	22 96       	adiw	r28, 0x02	; 2
    content->containsTempAndPower = true;
    3784:	f8 01       	movw	r30, r16
    3786:	80 81       	ld	r24, Z
    3788:	82 60       	ori	r24, 0x02	; 2
    378a:	80 83       	st	Z, r24
    }

  // If next header is flags then extract it.
  // FIXME: risk of misinterpretting CRC.
  if(MESSAGING_FULL_STATS_FLAGS_HEADER_MSBS != (*b & MESSAGING_FULL_STATS_FLAGS_HEADER_MASK)) { return(NULL); } // Corrupt message.
    378c:	28 81       	ld	r18, Y
    378e:	42 2f       	mov	r20, r18
    3790:	50 e0       	ldi	r21, 0x00	; 0
    3792:	ca 01       	movw	r24, r20
    3794:	80 7e       	andi	r24, 0xE0	; 224
    3796:	90 70       	andi	r25, 0x00	; 0
    3798:	80 36       	cpi	r24, 0x60	; 96
    379a:	91 05       	cpc	r25, r1
    379c:	09 f0       	breq	.+2      	; 0x37a0 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0xaa>
    379e:	44 c0       	rjmp	.+136    	; 0x3828 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  const uint8_t flagsHeader = *b++;
    37a0:	de 01       	movw	r26, r28
    37a2:	11 96       	adiw	r26, 0x01	; 1
  content->occ = flagsHeader & 3;
    37a4:	23 70       	andi	r18, 0x03	; 3
    37a6:	f8 01       	movw	r30, r16
    37a8:	86 81       	ldd	r24, Z+6	; 0x06
    37aa:	8c 7f       	andi	r24, 0xFC	; 252
    37ac:	82 2b       	or	r24, r18
    37ae:	86 83       	std	Z+6, r24	; 0x06
  const bool containsAmbL = (0 != (flagsHeader & MESSAGING_FULL_STATS_FLAGS_HEADER_AMBL));
  if(containsAmbL)
    37b0:	43 ff       	sbrs	r20, 3
    37b2:	0a c0       	rjmp	.+20     	; 0x37c8 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0xd2>
    {
    const uint8_t ambL = *b++;
    37b4:	99 81       	ldd	r25, Y+1	; 0x01
    if((0 == ambL) || (ambL == (uint8_t)0xff)) { return(NULL); } // Illegal value.
    37b6:	89 2f       	mov	r24, r25
    37b8:	81 50       	subi	r24, 0x01	; 1
    37ba:	8e 3f       	cpi	r24, 0xFE	; 254
    37bc:	a8 f5       	brcc	.+106    	; 0x3828 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  const uint8_t flagsHeader = *b++;
  content->occ = flagsHeader & 3;
  const bool containsAmbL = (0 != (flagsHeader & MESSAGING_FULL_STATS_FLAGS_HEADER_AMBL));
  if(containsAmbL)
    {
    const uint8_t ambL = *b++;
    37be:	11 96       	adiw	r26, 0x01	; 1
    if((0 == ambL) || (ambL == (uint8_t)0xff)) { return(NULL); } // Illegal value.
    content->ambL = ambL;
    37c0:	95 83       	std	Z+5, r25	; 0x05
    content->containsAmbL = true;
    37c2:	80 81       	ld	r24, Z
    37c4:	84 60       	ori	r24, 0x04	; 4
    37c6:	80 83       	st	Z, r24
    37c8:	f7 01       	movw	r30, r14
    37ca:	3f e7       	ldi	r19, 0x7F	; 127
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    37cc:	11 e0       	ldi	r17, 0x01	; 1
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
    37ce:	77 e3       	ldi	r23, 0x37	; 55
    37d0:	21 c0       	rjmp	.+66     	; 0x3814 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x11e>
    }

  // Finish off by computing and checking the CRC (and return pointer to just after CRC).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    37d2:	80 81       	ld	r24, Z
    37d4:	60 e8       	ldi	r22, 0x80	; 128
    37d6:	40 e0       	ldi	r20, 0x00	; 0
    37d8:	50 e0       	ldi	r21, 0x00	; 0
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    37da:	c8 2f       	mov	r28, r24
    37dc:	d0 e0       	ldi	r29, 0x00	; 0
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
    37de:	83 2f       	mov	r24, r19
    37e0:	90 e0       	ldi	r25, 0x00	; 0
    37e2:	26 e0       	ldi	r18, 0x06	; 6
    37e4:	96 95       	lsr	r25
    37e6:	87 95       	ror	r24
    37e8:	2a 95       	dec	r18
    37ea:	e1 f7       	brne	.-8      	; 0x37e4 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0xee>
    37ec:	28 2f       	mov	r18, r24
    37ee:	21 70       	andi	r18, 0x01	; 1
        if(0 != (datum & i)) { bit = !bit; }
    37f0:	86 2f       	mov	r24, r22
    37f2:	90 e0       	ldi	r25, 0x00	; 0
    37f4:	8c 23       	and	r24, r28
    37f6:	9d 23       	and	r25, r29
    37f8:	89 2b       	or	r24, r25
    37fa:	09 f0       	breq	.+2      	; 0x37fe <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x108>
    37fc:	21 27       	eor	r18, r17
        crc <<= 1;
    37fe:	33 0f       	add	r19, r19
        if(bit) { crc ^= 0x37; }
    3800:	21 11       	cpse	r18, r1
    3802:	37 27       	eor	r19, r23
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
    3804:	66 95       	lsr	r22
    3806:	4f 5f       	subi	r20, 0xFF	; 255
    3808:	5f 4f       	sbci	r21, 0xFF	; 255
    380a:	48 30       	cpi	r20, 0x08	; 8
    380c:	51 05       	cpc	r21, r1
    380e:	39 f7       	brne	.-50     	; 0x37de <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0xe8>
    }

  // Finish off by computing and checking the CRC (and return pointer to just after CRC).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    3810:	31 96       	adiw	r30, 0x01	; 1
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
        }
    return(crc & 0x7f);
    3812:	3f 77       	andi	r19, 0x7F	; 127
    }

  // Finish off by computing and checking the CRC (and return pointer to just after CRC).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    3814:	ea 17       	cp	r30, r26
    3816:	fb 07       	cpc	r31, r27
    3818:	e0 f2       	brcs	.-72     	; 0x37d2 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0xdc>
  if(crc != *b++) { return(NULL); } // Bad CRC.
    381a:	8c 91       	ld	r24, X
    381c:	38 17       	cp	r19, r24
    381e:	21 f4       	brne	.+8      	; 0x3828 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
    3820:	9d 01       	movw	r18, r26
    3822:	2f 5f       	subi	r18, 0xFF	; 255
    3824:	3f 4f       	sbci	r19, 0xFF	; 255
    3826:	02 c0       	rjmp	.+4      	; 0x382c <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x136>

  return(b); // Point to just after CRC.
    3828:	20 e0       	ldi	r18, 0x00	; 0
    382a:	30 e0       	ldi	r19, 0x00	; 0
  }
    382c:	c9 01       	movw	r24, r18
    382e:	df 91       	pop	r29
    3830:	cf 91       	pop	r28
    3832:	1f 91       	pop	r17
    3834:	0f 91       	pop	r16
    3836:	ff 90       	pop	r15
    3838:	ef 90       	pop	r14
    383a:	08 95       	ret

0000383c <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)>:
  }

// Store minimal stats payload into (2-byte) buffer from payload struct (without CRC); values are coerced to fit as necessary..
//   * payload  must be non-null
// Used for minimal and full packet forms,
void writeTrailingMinimalStatsPayloadBody(uint8_t *buf, const trailingMinimalStatsPayload_t *payload)
    383c:	0f 93       	push	r16
    383e:	1f 93       	push	r17
    3840:	cf 93       	push	r28
    3842:	df 93       	push	r29
    3844:	8c 01       	movw	r16, r24
    3846:	eb 01       	movw	r28, r22
  {
#ifdef DEBUG
  if(NULL == payload) { panic(); }
    3848:	61 15       	cp	r22, r1
    384a:	71 05       	cpc	r23, r1
    384c:	11 f4       	brne	.+4      	; 0x3852 <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x16>
    384e:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <panic()>
  DEBUG_SERIAL_PRINTFMT(minTempRepresentable, DEC);
  DEBUG_SERIAL_PRINT_FLASHSTRING(" max=");
  DEBUG_SERIAL_PRINTFMT(maxTempRepresentable, DEC);
  DEBUG_SERIAL_PRINTLN();
#endif
  int16_t temp16Cbiased = payload->tempC16;
    3852:	88 81       	ld	r24, Y
    3854:	29 81       	ldd	r18, Y+1	; 0x01
    3856:	92 2f       	mov	r25, r18
    3858:	9f 77       	andi	r25, 0x7F	; 127
    385a:	88 0f       	add	r24, r24
    385c:	99 1f       	adc	r25, r25
    385e:	95 95       	asr	r25
    3860:	87 95       	ror	r24
    3862:	26 e0       	ldi	r18, 0x06	; 6
    3864:	80 3c       	cpi	r24, 0xC0	; 192
    3866:	92 07       	cpc	r25, r18
    3868:	14 f0       	brlt	.+4      	; 0x386e <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x32>
    386a:	8f eb       	ldi	r24, 0xBF	; 191
    386c:	96 e0       	ldi	r25, 0x06	; 6
    386e:	ee ef       	ldi	r30, 0xFE	; 254
    3870:	80 3c       	cpi	r24, 0xC0	; 192
    3872:	9e 07       	cpc	r25, r30
    3874:	14 f4       	brge	.+4      	; 0x387a <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x3e>
    3876:	80 ec       	ldi	r24, 0xC0	; 192
    3878:	9e ef       	ldi	r25, 0xFE	; 254
  if(temp16Cbiased < minTempRepresentable) { temp16Cbiased = minTempRepresentable; }
  else if(temp16Cbiased > maxTempRepresentable) { temp16Cbiased = maxTempRepresentable; }
  temp16Cbiased -= MESSAGING_TRAILING_MINIMAL_STATS_TEMP_BIAS; // Should now be strictly positive.
    387a:	9c 01       	movw	r18, r24
    387c:	20 5c       	subi	r18, 0xC0	; 192
    387e:	3e 4f       	sbci	r19, 0xFE	; 254
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("temp16Cbiased: ");
  DEBUG_SERIAL_PRINTFMT(temp16Cbiased, DEC);
  DEBUG_SERIAL_PRINTLN();
#endif
  const uint8_t byte0 = MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MSBS | (payload->powerLow ? 0x10 : 0) | (temp16Cbiased & 0xf);
    3880:	89 81       	ldd	r24, Y+1	; 0x01
    3882:	87 fd       	sbrc	r24, 7
    3884:	02 c0       	rjmp	.+4      	; 0x388a <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x4e>
    3886:	90 e4       	ldi	r25, 0x40	; 64
    3888:	01 c0       	rjmp	.+2      	; 0x388c <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x50>
    388a:	90 e5       	ldi	r25, 0x50	; 80
  const uint8_t byte1 = (uint8_t) (temp16Cbiased >> 4);
  buf[0] = byte0;
    388c:	82 2f       	mov	r24, r18
    388e:	8f 70       	andi	r24, 0x0F	; 15
    3890:	98 2b       	or	r25, r24
    3892:	f8 01       	movw	r30, r16
    3894:	90 83       	st	Z, r25
  buf[1] = byte1;
    3896:	44 e0       	ldi	r20, 0x04	; 4
    3898:	35 95       	asr	r19
    389a:	27 95       	ror	r18
    389c:	4a 95       	dec	r20
    389e:	e1 f7       	brne	.-8      	; 0x3898 <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x5c>
    38a0:	21 83       	std	Z+1, r18	; 0x01
#if 0 && defined(DEBUG)
  for(uint8_t i = 0; i < 2; ++i) { if(0 != (buf[i] & 0x80)) { panic(); } } // MSBits should be clear.
#endif
  }
    38a2:	df 91       	pop	r29
    38a4:	cf 91       	pop	r28
    38a6:	1f 91       	pop	r17
    38a8:	0f 91       	pop	r16
    38aa:	08 95       	ret

000038ac <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)>:
// Note that up to 7 bytes of payload is optimal for the CRC used.
// If successful, returns pointer to terminating 0xff at end of message.
// Returns null if failed (eg because of bad inputs or insufficient buffer space);
// part of the message may have have been written in this case and in particular the previous terminating 0xff may have been overwritten.
uint8_t *encodeFullStatsMessageCore(uint8_t * const buf, const uint8_t buflen, const stats_TX_level secLevel, const bool secureChannel,
    const FullStatsMessageCore_t * const content)
    38ac:	cf 92       	push	r12
    38ae:	df 92       	push	r13
    38b0:	ef 92       	push	r14
    38b2:	ff 92       	push	r15
    38b4:	0f 93       	push	r16
    38b6:	1f 93       	push	r17
    38b8:	cf 93       	push	r28
    38ba:	df 93       	push	r29
    38bc:	7c 01       	movw	r14, r24
    38be:	6a 01       	movw	r12, r20
  {
  if(NULL == buf) { return(NULL); } // Could be an assert/panic instead at a pinch.
    38c0:	00 97       	sbiw	r24, 0x00	; 0
    38c2:	09 f4       	brne	.+2      	; 0x38c6 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x1a>
    38c4:	ad c0       	rjmp	.+346    	; 0x3a20 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x174>
  if(NULL == content) { return(NULL); } // Could be an assert/panic instead at a pinch.
    38c6:	01 15       	cp	r16, r1
    38c8:	11 05       	cpc	r17, r1
    38ca:	09 f4       	brne	.+2      	; 0x38ce <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x22>
    38cc:	a9 c0       	rjmp	.+338    	; 0x3a20 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x174>
  if(secureChannel) { return(NULL); } // TODO: cannot create secure message yet.
    38ce:	22 23       	and	r18, r18
    38d0:	09 f0       	breq	.+2      	; 0x38d4 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x28>
    38d2:	a6 c0       	rjmp	.+332    	; 0x3a20 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x174>
  const uint8_t payloadLength =
      1 + // Initial header.
      (content->containsID ? 2 : 0) +
      (content->containsTempAndPower ? 2 : 0) +
      1 + // Flags header.
      (content->containsAmbL ? 1 : 0);
    38d4:	f8 01       	movw	r30, r16
    38d6:	80 81       	ld	r24, Z
    38d8:	58 2f       	mov	r21, r24
    38da:	51 70       	andi	r21, 0x01	; 1
    38dc:	80 fd       	sbrc	r24, 0
    38de:	02 c0       	rjmp	.+4      	; 0x38e4 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x38>
    38e0:	21 e0       	ldi	r18, 0x01	; 1
    38e2:	01 c0       	rjmp	.+2      	; 0x38e6 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x3a>
    38e4:	23 e0       	ldi	r18, 0x03	; 3
    38e6:	f8 01       	movw	r30, r16
    38e8:	80 81       	ld	r24, Z
    38ea:	81 fd       	sbrc	r24, 1
    38ec:	02 c0       	rjmp	.+4      	; 0x38f2 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x46>
    38ee:	90 e0       	ldi	r25, 0x00	; 0
    38f0:	01 c0       	rjmp	.+2      	; 0x38f4 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x48>
    38f2:	92 e0       	ldi	r25, 0x02	; 2
    38f4:	f8 01       	movw	r30, r16
    38f6:	40 81       	ld	r20, Z
    38f8:	46 95       	lsr	r20
    38fa:	46 95       	lsr	r20
    38fc:	41 70       	andi	r20, 0x01	; 1
  if(buflen < payloadLength + 2)  { return(NULL); }
    38fe:	84 2f       	mov	r24, r20
    3900:	8f 5f       	subi	r24, 0xFF	; 255
    3902:	82 0f       	add	r24, r18
    3904:	89 0f       	add	r24, r25
    3906:	90 e0       	ldi	r25, 0x00	; 0
    3908:	01 96       	adiw	r24, 0x01	; 1
    390a:	26 2f       	mov	r18, r22
    390c:	30 e0       	ldi	r19, 0x00	; 0
    390e:	82 17       	cp	r24, r18
    3910:	93 07       	cpc	r25, r19
    3912:	0c f0       	brlt	.+2      	; 0x3916 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x6a>
    3914:	85 c0       	rjmp	.+266    	; 0x3a20 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x174>

  // Validate some more detail.
  // ID
  if(content->containsID)
    3916:	55 23       	and	r21, r21
    3918:	59 f0       	breq	.+22     	; 0x3930 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x84>
    {
    if((content->id0 == (uint8_t)0xff) || (content->id1 == (uint8_t)0xff)) { return(NULL); } // ID bytes cannot be 0xff.
    391a:	91 81       	ldd	r25, Z+1	; 0x01
    391c:	9f 3f       	cpi	r25, 0xFF	; 255
    391e:	09 f4       	brne	.+2      	; 0x3922 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x76>
    3920:	7f c0       	rjmp	.+254    	; 0x3a20 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x174>
    3922:	82 81       	ldd	r24, Z+2	; 0x02
    3924:	8f 3f       	cpi	r24, 0xFF	; 255
    3926:	09 f4       	brne	.+2      	; 0x392a <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x7e>
    3928:	7b c0       	rjmp	.+246    	; 0x3a20 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x174>
    if((content->id0 & 0x80) != (content->id1 & 0x80)) { return(NULL); } // ID top bits don't match.
    392a:	89 27       	eor	r24, r25
    392c:	87 fd       	sbrc	r24, 7
    392e:	78 c0       	rjmp	.+240    	; 0x3a20 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x174>
    }
  // Ambient light.
  if(content->containsAmbL)
    3930:	44 23       	and	r20, r20
    3932:	31 f0       	breq	.+12     	; 0x3940 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x94>
    {
    if((content->ambL == 0) || (content->ambL == (uint8_t)0xff)) { return(NULL); } // Forbidden values.
    3934:	f8 01       	movw	r30, r16
    3936:	85 81       	ldd	r24, Z+5	; 0x05
    3938:	81 50       	subi	r24, 0x01	; 1
    393a:	8e 3f       	cpi	r24, 0xFE	; 254
    393c:	08 f0       	brcs	.+2      	; 0x3940 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x94>
    393e:	70 c0       	rjmp	.+224    	; 0x3a20 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x174>
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_HIGH 2
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_SECURE 1
  const uint8_t header = MESSAGING_FULL_STATS_HEADER_MSBS |
      (content->containsID ? MESSAGING_FULL_STATS_HEADER_BITS_ID_PRESENT : 0) |
      ((content->containsID && (0 != (content->id0 & 0x80))) ? MESSAGING_FULL_STATS_HEADER_BITS_ID_HIGH : 0) |
      0; // TODO: cannot do secure messages yet.
    3940:	55 23       	and	r21, r21
    3942:	11 f4       	brne	.+4      	; 0x3948 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x9c>
    3944:	80 e7       	ldi	r24, 0x70	; 112
    3946:	08 c0       	rjmp	.+16     	; 0x3958 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xac>
    3948:	f8 01       	movw	r30, r16
    394a:	81 81       	ldd	r24, Z+1	; 0x01
    394c:	87 ff       	sbrs	r24, 7
    394e:	03 c0       	rjmp	.+6      	; 0x3956 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xaa>
    3950:	92 e0       	ldi	r25, 0x02	; 2
    3952:	84 e7       	ldi	r24, 0x74	; 116
    3954:	02 c0       	rjmp	.+4      	; 0x395a <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xae>
    3956:	84 e7       	ldi	r24, 0x74	; 116
    3958:	90 e0       	ldi	r25, 0x00	; 0
  *b++ = header;
    395a:	89 2b       	or	r24, r25
    395c:	e7 01       	movw	r28, r14
    395e:	89 93       	st	Y+, r24
 
  // Insert ID if requested.
  if(content->containsID)
    3960:	f8 01       	movw	r30, r16
    3962:	80 81       	ld	r24, Z
    3964:	80 ff       	sbrs	r24, 0
    3966:	09 c0       	rjmp	.+18     	; 0x397a <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xce>
    {
    *b++ = content->id0 & 0x7f;
    3968:	81 81       	ldd	r24, Z+1	; 0x01
    396a:	8f 77       	andi	r24, 0x7F	; 127
    396c:	f7 01       	movw	r30, r14
    396e:	81 83       	std	Z+1, r24	; 0x01
    *b++ = content->id1 & 0x7f;
    3970:	f8 01       	movw	r30, r16
    3972:	82 81       	ldd	r24, Z+2	; 0x02
    3974:	8f 77       	andi	r24, 0x7F	; 127
    3976:	89 83       	std	Y+1, r24	; 0x01
    3978:	22 96       	adiw	r28, 0x02	; 2
    }

  // Insert basic temperature and power status if requested.
  if(content->containsTempAndPower)
    397a:	f8 01       	movw	r30, r16
    397c:	80 81       	ld	r24, Z
    397e:	81 ff       	sbrs	r24, 1
    3980:	07 c0       	rjmp	.+14     	; 0x3990 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xe4>
    {
    writeTrailingMinimalStatsPayloadBody(b, &(content->tempAndPower));
    3982:	b8 01       	movw	r22, r16
    3984:	6d 5f       	subi	r22, 0xFD	; 253
    3986:	7f 4f       	sbci	r23, 0xFF	; 255
    3988:	ce 01       	movw	r24, r28
    398a:	0e 94 1e 1c 	call	0x383c	; 0x383c <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)>
    b += 2;
    398e:	22 96       	adiw	r28, 0x02	; 2
//#define MESSAGING_FULL_STATS_FLAGS_HEADER_AMBL 8
//#define MESSAGING_FULL_STATS_FLAGS_HEADER_RHP 4
  // Omit occupancy data unless encoding for a secure channel or at a very permissive stats TX security level.
  const uint8_t flagsHeader = MESSAGING_FULL_STATS_FLAGS_HEADER_MSBS |
    (content->containsAmbL ? MESSAGING_FULL_STATS_FLAGS_HEADER_AMBL : 0) |
    ((secureChannel || (secLevel <= stTXalwaysAll)) ? (content->occ & 3) : 0);
    3990:	f8 01       	movw	r30, r16
    3992:	80 81       	ld	r24, Z
    3994:	82 fd       	sbrc	r24, 2
    3996:	02 c0       	rjmp	.+4      	; 0x399c <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xf0>
    3998:	90 e6       	ldi	r25, 0x60	; 96
    399a:	01 c0       	rjmp	.+2      	; 0x399e <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xf2>
    399c:	98 e6       	ldi	r25, 0x68	; 104
    399e:	1c 14       	cp	r1, r12
    39a0:	1d 04       	cpc	r1, r13
    39a2:	14 f4       	brge	.+4      	; 0x39a8 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xfc>
    39a4:	80 e0       	ldi	r24, 0x00	; 0
    39a6:	03 c0       	rjmp	.+6      	; 0x39ae <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x102>
    39a8:	f8 01       	movw	r30, r16
    39aa:	86 81       	ldd	r24, Z+6	; 0x06
    39ac:	83 70       	andi	r24, 0x03	; 3
  *b++ = flagsHeader;
    39ae:	89 2b       	or	r24, r25
    39b0:	de 01       	movw	r26, r28
    39b2:	8d 93       	st	X+, r24
  // Now insert extra fields as flagged.
  if(content->containsAmbL)
    39b4:	f8 01       	movw	r30, r16
    39b6:	80 81       	ld	r24, Z
    39b8:	82 ff       	sbrs	r24, 2
    39ba:	03 c0       	rjmp	.+6      	; 0x39c2 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x116>
    { *b++ = content->ambL; }
    39bc:	85 81       	ldd	r24, Z+5	; 0x05
    39be:	89 83       	std	Y+1, r24	; 0x01
    39c0:	11 96       	adiw	r26, 0x01	; 1
    39c2:	f7 01       	movw	r30, r14
    39c4:	3f e7       	ldi	r19, 0x7F	; 127
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    39c6:	11 e0       	ldi	r17, 0x01	; 1
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
    39c8:	77 e3       	ldi	r23, 0x37	; 55
    39ca:	21 c0       	rjmp	.+66     	; 0x3a0e <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x162>
  // TODO: RH% etc

  // Finish off message by computing and appending the CRC and then terminating 0xff (and return pointer to 0xff).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    39cc:	80 81       	ld	r24, Z
    39ce:	60 e8       	ldi	r22, 0x80	; 128
    39d0:	40 e0       	ldi	r20, 0x00	; 0
    39d2:	50 e0       	ldi	r21, 0x00	; 0
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    39d4:	c8 2f       	mov	r28, r24
    39d6:	d0 e0       	ldi	r29, 0x00	; 0
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
    39d8:	83 2f       	mov	r24, r19
    39da:	90 e0       	ldi	r25, 0x00	; 0
    39dc:	06 e0       	ldi	r16, 0x06	; 6
    39de:	96 95       	lsr	r25
    39e0:	87 95       	ror	r24
    39e2:	0a 95       	dec	r16
    39e4:	e1 f7       	brne	.-8      	; 0x39de <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x132>
    39e6:	28 2f       	mov	r18, r24
    39e8:	21 70       	andi	r18, 0x01	; 1
        if(0 != (datum & i)) { bit = !bit; }
    39ea:	86 2f       	mov	r24, r22
    39ec:	90 e0       	ldi	r25, 0x00	; 0
    39ee:	8c 23       	and	r24, r28
    39f0:	9d 23       	and	r25, r29
    39f2:	89 2b       	or	r24, r25
    39f4:	09 f0       	breq	.+2      	; 0x39f8 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x14c>
    39f6:	21 27       	eor	r18, r17
        crc <<= 1;
    39f8:	33 0f       	add	r19, r19
        if(bit) { crc ^= 0x37; }
    39fa:	21 11       	cpse	r18, r1
    39fc:	37 27       	eor	r19, r23
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
    39fe:	66 95       	lsr	r22
    3a00:	4f 5f       	subi	r20, 0xFF	; 255
    3a02:	5f 4f       	sbci	r21, 0xFF	; 255
    3a04:	48 30       	cpi	r20, 0x08	; 8
    3a06:	51 05       	cpc	r21, r1
    3a08:	39 f7       	brne	.-50     	; 0x39d8 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x12c>
  // TODO: RH% etc

  // Finish off message by computing and appending the CRC and then terminating 0xff (and return pointer to 0xff).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    3a0a:	31 96       	adiw	r30, 0x01	; 1
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
        }
    return(crc & 0x7f);
    3a0c:	3f 77       	andi	r19, 0x7F	; 127
  // TODO: RH% etc

  // Finish off message by computing and appending the CRC and then terminating 0xff (and return pointer to 0xff).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    3a0e:	ea 17       	cp	r30, r26
    3a10:	fb 07       	cpc	r31, r27
    3a12:	e0 f2       	brcs	.-72     	; 0x39cc <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x120>
  *b++ = crc;
    3a14:	fd 01       	movw	r30, r26
    3a16:	31 93       	st	Z+, r19
  *b = 0xff;
    3a18:	8f ef       	ldi	r24, 0xFF	; 255
    3a1a:	11 96       	adiw	r26, 0x01	; 1
    3a1c:	8c 93       	st	X, r24
    3a1e:	02 c0       	rjmp	.+4      	; 0x3a24 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x178>
#if 0 && defined(DEBUG)
  if(b - buf != payloadLength + 1) { panic(F("msg gen err")); }
#endif
  return(b);
    3a20:	e0 e0       	ldi	r30, 0x00	; 0
    3a22:	f0 e0       	ldi	r31, 0x00	; 0
  }
    3a24:	cf 01       	movw	r24, r30
    3a26:	df 91       	pop	r29
    3a28:	cf 91       	pop	r28
    3a2a:	1f 91       	pop	r17
    3a2c:	0f 91       	pop	r16
    3a2e:	ff 90       	pop	r15
    3a30:	ef 90       	pop	r14
    3a32:	df 90       	pop	r13
    3a34:	cf 90       	pop	r12
    3a36:	08 95       	ret

00003a38 <SupplyVoltageMilliVolts::get() const>:
    virtual uint16_t read();

    // Return last value fetched by read(); undefined before first read()).
    // Fast.
    // NOT thread-safe nor usable within ISRs (Interrupt Service Routines).
    virtual uint16_t get() const { return(mV); }
    3a38:	fc 01       	movw	r30, r24
    3a3a:	84 81       	ldd	r24, Z+4	; 0x04
    3a3c:	95 81       	ldd	r25, Z+5	; 0x05
    3a3e:	08 95       	ret

00003a40 <SupplyVoltageMilliVolts::tag() const>:

    // Returns a suggested (JSON) tag/field/key name including units of get(); NULL means no recommended tag.
    // The lifetime of the pointed-to text must be at least that of the Sensor instance.
    virtual const char *tag() const { return("B|mV"); }
    3a40:	81 e2       	ldi	r24, 0x21	; 33
    3a42:	91 e0       	ldi	r25, 0x01	; 1
    3a44:	08 95       	ret

00003a46 <__vector_9>:
  timer2XtalIntSetup();
#endif
  }

#ifdef WAKEUP_32768HZ_XTAL
ISR(TIMER2_OVF_vect)
    3a46:	1f 92       	push	r1
    3a48:	0f 92       	push	r0
    3a4a:	0f b6       	in	r0, 0x3f	; 63
    3a4c:	0f 92       	push	r0
    3a4e:	11 24       	eor	r1, r1
    3a50:	2f 93       	push	r18
    3a52:	8f 93       	push	r24
    3a54:	9f 93       	push	r25
// must not enable interrupts, and must leave interrupt state as was on entry.
// If not being called from an ISR then locking round this call that works with the getXXX() functions should be considered.
static inline void tickSecondISR()
#endif
  {
  register uint_fast8_t sTemp = _secondsLT; // Avoid some redundant memory accesses.
    3a56:	80 91 70 03 	lds	r24, 0x0370
  sTemp += MAIN_TICK_S;
    3a5a:	8e 5f       	subi	r24, 0xFE	; 254
  if(sTemp > 59)
    3a5c:	8c 33       	cpi	r24, 0x3C	; 60
    3a5e:	c8 f0       	brcs	.+50     	; 0x3a92 <__vector_9+0x4c>
    {
    sTemp = 0; // Seconds roll.
    register uint_least16_t mTemp = _minutesSinceMidnightLT + 1; // Avoid some redundant memory accesses.
    3a60:	80 91 71 03 	lds	r24, 0x0371
    3a64:	90 91 72 03 	lds	r25, 0x0372
    3a68:	01 96       	adiw	r24, 0x01	; 1
    if(mTemp > 1439)
    3a6a:	25 e0       	ldi	r18, 0x05	; 5
    3a6c:	80 3a       	cpi	r24, 0xA0	; 160
    3a6e:	92 07       	cpc	r25, r18
    3a70:	58 f0       	brcs	.+22     	; 0x3a88 <__vector_9+0x42>
      {
      mTemp = 0; // Minutes/hours roll.
      // Increment the day.
      ++_daysSince1999LT; // Don't currently prevent roll.
    3a72:	80 91 73 03 	lds	r24, 0x0373
    3a76:	90 91 74 03 	lds	r25, 0x0374
    3a7a:	01 96       	adiw	r24, 0x01	; 1
    3a7c:	90 93 74 03 	sts	0x0374, r25
    3a80:	80 93 73 03 	sts	0x0373, r24
    3a84:	80 e0       	ldi	r24, 0x00	; 0
    3a86:	90 e0       	ldi	r25, 0x00	; 0
      }
    _minutesSinceMidnightLT = mTemp;
    3a88:	90 93 72 03 	sts	0x0372, r25
    3a8c:	80 93 71 03 	sts	0x0371, r24
    3a90:	80 e0       	ldi	r24, 0x00	; 0
    }
  _secondsLT = sTemp;
    3a92:	80 93 70 03 	sts	0x0370, r24
#if defined(TWO_S_TICK_RTC_SUPPORT)
  tickDoubleSecondISR();
#else
  tickSecondISR();
#endif
  }
    3a96:	9f 91       	pop	r25
    3a98:	8f 91       	pop	r24
    3a9a:	2f 91       	pop	r18
    3a9c:	0f 90       	pop	r0
    3a9e:	0f be       	out	0x3f, r0	; 63
    3aa0:	0f 90       	pop	r0
    3aa2:	1f 90       	pop	r1
    3aa4:	18 95       	reti

00003aa6 <__vector_6>:
// May contain a little entropy concentrated in the least-significant bits, in part from WDT-vs-CPU-clock jitter, especially if not sleeping.
static volatile uint8_t _watchdogFired;

// Catch watchdog timer interrupt to automatically clear WDIE and WDIF.
// This allows use of watchdog for low-power timed sleep.
ISR(WDT_vect)
    3aa6:	1f 92       	push	r1
    3aa8:	0f 92       	push	r0
    3aaa:	0f b6       	in	r0, 0x3f	; 63
    3aac:	0f 92       	push	r0
    3aae:	11 24       	eor	r1, r1
    3ab0:	8f 93       	push	r24
    3ab2:	9f 93       	push	r25
    3ab4:	df 93       	push	r29
    3ab6:	cf 93       	push	r28
    3ab8:	0f 92       	push	r0
    3aba:	cd b7       	in	r28, 0x3d	; 61
    3abc:	de b7       	in	r29, 0x3e	; 62
  {
  // WDIE and WDIF are cleared in hardware upon entering this ISR.
  wdt_disable();
    3abe:	88 e1       	ldi	r24, 0x18	; 24
    3ac0:	0f b6       	in	r0, 0x3f	; 63
    3ac2:	f8 94       	cli
    3ac4:	80 93 60 00 	sts	0x0060, r24
    3ac8:	10 92 60 00 	sts	0x0060, r1
    3acc:	0f be       	out	0x3f, r0	; 63
  // Note: be careful of what is accessed from this ISR.
  // Capture some marginal entropy from the stack position.
  // 
  uint8_t x;
  _watchdogFired = ((uint8_t) 0x80) | ((uint8_t) (int) &x); // Ensure non-zero, retaining any entropy in ls bits.
    3ace:	ce 01       	movw	r24, r28
    3ad0:	01 96       	adiw	r24, 0x01	; 1
    3ad2:	80 68       	ori	r24, 0x80	; 128
    3ad4:	80 93 69 03 	sts	0x0369, r24
  }
    3ad8:	0f 90       	pop	r0
    3ada:	cf 91       	pop	r28
    3adc:	df 91       	pop	r29
    3ade:	9f 91       	pop	r25
    3ae0:	8f 91       	pop	r24
    3ae2:	0f 90       	pop	r0
    3ae4:	0f be       	out	0x3f, r0	; 63
    3ae6:	0f 90       	pop	r0
    3ae8:	1f 90       	pop	r1
    3aea:	18 95       	reti

00003aec <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>:
// Note: inlining is prevented so as to avoid migrating anything into the section where the CPU is running slowly.
//
// Note: may be dubious to run CPU clock less than 4x 32768Hz crystal speed,
// eg at 31250Hz for 8MHz RC clock and max prescale.
// Don't access timer 2 regs at low CPU speed, eg in ISRs.
__attribute__ ((noinline)) void sleepLowPowerLoopsMinCPUSpeed(uint16_t loops)
    3aec:	fc 01       	movw	r30, r24
  {
  const clock_div_t prescale = clock_prescale_get(); // Capture current prescale value.
    3aee:	80 91 61 00 	lds	r24, 0x0061
  clock_prescale_set(MAX_CPU_PRESCALE); // Reduce clock speed (increase prescale) as far as possible.
    3af2:	28 e0       	ldi	r18, 0x08	; 8
    3af4:	30 e0       	ldi	r19, 0x00	; 0
    3af6:	40 e8       	ldi	r20, 0x80	; 128
    3af8:	0f b6       	in	r0, 0x3f	; 63
    3afa:	f8 94       	cli
    3afc:	40 93 61 00 	sts	0x0061, r20
    3b00:	20 93 61 00 	sts	0x0061, r18
    3b04:	0f be       	out	0x3f, r0	; 63
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    3b06:	31 97       	sbiw	r30, 0x01	; 1
    3b08:	f1 f7       	brne	.-4      	; 0x3b06 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)+0x1a>
  _delay_loop_2(loops); // Burn cycles...
  clock_prescale_set(prescale); // Restore clock prescale.
    3b0a:	90 e0       	ldi	r25, 0x00	; 0
    3b0c:	8f 70       	andi	r24, 0x0F	; 15
    3b0e:	90 70       	andi	r25, 0x00	; 0
    3b10:	20 e8       	ldi	r18, 0x80	; 128
    3b12:	0f b6       	in	r0, 0x3f	; 63
    3b14:	f8 94       	cli
    3b16:	20 93 61 00 	sts	0x0061, r18
    3b1a:	80 93 61 00 	sts	0x0061, r24
    3b1e:	0f be       	out	0x3f, r0	; 63
  }
    3b20:	08 95       	ret

00003b22 <sleepPwrSaveWithBODDisabled()>:
#endif

// Sleep with BOD disabled in power-save mode; will wake on any interrupt.
void sleepPwrSaveWithBODDisabled()
  {
  set_sleep_mode(SLEEP_MODE_PWR_SAVE); // Stop all but timer 2 and watchdog when sleeping.
    3b22:	83 b7       	in	r24, 0x33	; 51
    3b24:	81 7f       	andi	r24, 0xF1	; 241
    3b26:	86 60       	ori	r24, 0x06	; 6
    3b28:	83 bf       	out	0x33, r24	; 51
  cli();
    3b2a:	f8 94       	cli
  sleep_enable();
    3b2c:	83 b7       	in	r24, 0x33	; 51
    3b2e:	81 60       	ori	r24, 0x01	; 1
    3b30:	83 bf       	out	0x33, r24	; 51
  sleep_bod_disable();
    3b32:	85 b7       	in	r24, 0x35	; 53
    3b34:	80 66       	ori	r24, 0x60	; 96
    3b36:	85 bf       	out	0x35, r24	; 53
    3b38:	8f 7d       	andi	r24, 0xDF	; 223
    3b3a:	85 bf       	out	0x35, r24	; 53
  sei();
    3b3c:	78 94       	sei
  sleep_cpu();
    3b3e:	88 95       	sleep
  sleep_disable();
    3b40:	83 b7       	in	r24, 0x33	; 51
    3b42:	8e 7f       	andi	r24, 0xFE	; 254
    3b44:	83 bf       	out	0x33, r24	; 51
  sei();
    3b46:	78 94       	sei
  }
    3b48:	08 95       	ret

00003b4a <nap(signed char)>:
//   * watchdogSleep is one of the WDTO_XX values from <avr/wdt.h>
// May be useful to call minimsePowerWithoutSleep() first, when not needing any modules left on.
void nap(int_fast8_t watchdogSleep)
  {
  // Watchdog should (already) be disabled on entry.
  _watchdogFired = 0;
    3b4a:	10 92 69 03 	sts	0x0369, r1

  wdt_enable(watchdogSleep);
    3b4e:	83 fd       	sbrc	r24, 3
    3b50:	02 c0       	rjmp	.+4      	; 0x3b56 <nap(signed char)+0xc>
    3b52:	28 e0       	ldi	r18, 0x08	; 8
    3b54:	01 c0       	rjmp	.+2      	; 0x3b58 <nap(signed char)+0xe>
    3b56:	28 e2       	ldi	r18, 0x28	; 40
    3b58:	87 70       	andi	r24, 0x07	; 7
    3b5a:	28 2b       	or	r18, r24
    3b5c:	88 e1       	ldi	r24, 0x18	; 24
    3b5e:	90 e0       	ldi	r25, 0x00	; 0
    3b60:	0f b6       	in	r0, 0x3f	; 63
    3b62:	f8 94       	cli
    3b64:	a8 95       	wdr
    3b66:	80 93 60 00 	sts	0x0060, r24
    3b6a:	0f be       	out	0x3f, r0	; 63
    3b6c:	20 93 60 00 	sts	0x0060, r18
  WDTCSR |= (1 << WDIE);
    3b70:	80 91 60 00 	lds	r24, 0x0060
    3b74:	80 64       	ori	r24, 0x40	; 64
    3b76:	80 93 60 00 	sts	0x0060, r24
#endif

// Sleep with BOD disabled in power-save mode; will wake on any interrupt.
void sleepPwrSaveWithBODDisabled()
  {
  set_sleep_mode(SLEEP_MODE_PWR_SAVE); // Stop all but timer 2 and watchdog when sleeping.
    3b7a:	83 b7       	in	r24, 0x33	; 51
    3b7c:	81 7f       	andi	r24, 0xF1	; 241
    3b7e:	86 60       	ori	r24, 0x06	; 6
    3b80:	83 bf       	out	0x33, r24	; 51
  cli();
    3b82:	f8 94       	cli
  sleep_enable();
    3b84:	83 b7       	in	r24, 0x33	; 51
    3b86:	81 60       	ori	r24, 0x01	; 1
    3b88:	83 bf       	out	0x33, r24	; 51
  sleep_bod_disable();
    3b8a:	85 b7       	in	r24, 0x35	; 53
    3b8c:	80 66       	ori	r24, 0x60	; 96
    3b8e:	85 bf       	out	0x35, r24	; 53
    3b90:	8f 7d       	andi	r24, 0xDF	; 223
    3b92:	85 bf       	out	0x35, r24	; 53
  sei();
    3b94:	78 94       	sei
  sleep_cpu();
    3b96:	88 95       	sleep
  sleep_disable();
    3b98:	83 b7       	in	r24, 0x33	; 51
    3b9a:	8e 7f       	andi	r24, 0xFE	; 254
    3b9c:	83 bf       	out	0x33, r24	; 51
  sei();
    3b9e:	78 94       	sei

  // Keep sleeping until watchdog actually fires.
  for( ; ; )
    {
    sleepPwrSaveWithBODDisabled();
    if(0 != _watchdogFired)
    3ba0:	80 91 69 03 	lds	r24, 0x0369
    3ba4:	88 23       	and	r24, r24
    3ba6:	49 f3       	breq	.-46     	; 0x3b7a <nap(signed char)+0x30>
      {
      wdt_disable(); // Avoid spurious wakeup later.
    3ba8:	88 e1       	ldi	r24, 0x18	; 24
    3baa:	0f b6       	in	r0, 0x3f	; 63
    3bac:	f8 94       	cli
    3bae:	80 93 60 00 	sts	0x0060, r24
    3bb2:	10 92 60 00 	sts	0x0060, r1
    3bb6:	0f be       	out	0x3f, r0	; 63
      return; // All done!
      }
    }
 }
    3bb8:	08 95       	ret

00003bba <idleCPU(signed char)>:
// Should reduce power consumption vs spinning the CPU >> 3x, though not nearly as much as nap().
// True iff watchdog timer expired; false if something else woke the CPU.
bool idleCPU(const int_fast8_t watchdogSleep)
  {
  // Watchdog should (already) be disabled on entry.
  _watchdogFired = 0;
    3bba:	10 92 69 03 	sts	0x0369, r1
  wdt_enable(watchdogSleep);
    3bbe:	83 fd       	sbrc	r24, 3
    3bc0:	02 c0       	rjmp	.+4      	; 0x3bc6 <idleCPU(signed char)+0xc>
    3bc2:	28 e0       	ldi	r18, 0x08	; 8
    3bc4:	01 c0       	rjmp	.+2      	; 0x3bc8 <idleCPU(signed char)+0xe>
    3bc6:	28 e2       	ldi	r18, 0x28	; 40
    3bc8:	87 70       	andi	r24, 0x07	; 7
    3bca:	28 2b       	or	r18, r24
    3bcc:	88 e1       	ldi	r24, 0x18	; 24
    3bce:	90 e0       	ldi	r25, 0x00	; 0
    3bd0:	0f b6       	in	r0, 0x3f	; 63
    3bd2:	f8 94       	cli
    3bd4:	a8 95       	wdr
    3bd6:	80 93 60 00 	sts	0x0060, r24
    3bda:	0f be       	out	0x3f, r0	; 63
    3bdc:	20 93 60 00 	sts	0x0060, r18
  WDTCSR |= (1 << WDIE);
    3be0:	80 91 60 00 	lds	r24, 0x0060
    3be4:	80 64       	ori	r24, 0x40	; 64
    3be6:	80 93 60 00 	sts	0x0060, r24
  set_sleep_mode(SLEEP_MODE_IDLE); // Leave everything running but the CPU...
    3bea:	83 b7       	in	r24, 0x33	; 51
    3bec:	81 7f       	andi	r24, 0xF1	; 241
    3bee:	83 bf       	out	0x33, r24	; 51
  sleep_mode();
    3bf0:	83 b7       	in	r24, 0x33	; 51
    3bf2:	81 60       	ori	r24, 0x01	; 1
    3bf4:	83 bf       	out	0x33, r24	; 51
    3bf6:	88 95       	sleep
    3bf8:	83 b7       	in	r24, 0x33	; 51
    3bfa:	8e 7f       	andi	r24, 0xFE	; 254
    3bfc:	83 bf       	out	0x33, r24	; 51
  //sleep_disable();
  wdt_disable();
    3bfe:	88 e1       	ldi	r24, 0x18	; 24
    3c00:	0f b6       	in	r0, 0x3f	; 63
    3c02:	f8 94       	cli
    3c04:	80 93 60 00 	sts	0x0060, r24
    3c08:	10 92 60 00 	sts	0x0060, r1
    3c0c:	0f be       	out	0x3f, r0	; 63
  return(0 != _watchdogFired);
    3c0e:	80 91 69 03 	lds	r24, 0x0369
    3c12:	81 11       	cpse	r24, r1
    3c14:	81 e0       	ldi	r24, 0x01	; 1
  }
    3c16:	08 95       	ret

00003c18 <__vector_21>:
  }


// Allow wake from (lower-power) sleep while ADC is running.
static volatile bool ADC_complete;
ISR(ADC_vect) { ADC_complete = true; }
    3c18:	1f 92       	push	r1
    3c1a:	0f 92       	push	r0
    3c1c:	0f b6       	in	r0, 0x3f	; 63
    3c1e:	0f 92       	push	r0
    3c20:	11 24       	eor	r1, r1
    3c22:	8f 93       	push	r24
    3c24:	81 e0       	ldi	r24, 0x01	; 1
    3c26:	80 93 6b 03 	sts	0x036B, r24
    3c2a:	8f 91       	pop	r24
    3c2c:	0f 90       	pop	r0
    3c2e:	0f be       	out	0x3f, r0	; 63
    3c30:	0f 90       	pop	r0
    3c32:	1f 90       	pop	r1
    3c34:	18 95       	reti

00003c36 <_analogueNoiseReducedReadM(unsigned char, signed char)>:

// Read ADC/analogue input with reduced noise if possible, in range [0,1023].
//   * admux  is the value to set ADMUX to
//   * samples  maximum number of samples to take (if one, nap() before); strictly positive
// Sets sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
static uint16_t _analogueNoiseReducedReadM(const uint8_t admux, int8_t samples = 3)
    3c36:	0f 93       	push	r16
    3c38:	1f 93       	push	r17
    3c3a:	98 2f       	mov	r25, r24
    3c3c:	16 2f       	mov	r17, r22
// If already powered up then do nothing other than return false.
// This does not power up the analogue comparator; this needs to be manually enabled if required.
// If this returns true then a matching powerDownADC() may be advisable.
bool powerUpADCIfDisabled()
  {
  if(!(PRR & _BV(PRADC))) { return(false); }
    3c3e:	80 91 64 00 	lds	r24, 0x0064
    3c42:	80 fd       	sbrc	r24, 0
    3c44:	02 c0       	rjmp	.+4      	; 0x3c4a <_analogueNoiseReducedReadM(unsigned char, signed char)+0x14>
    3c46:	00 e0       	ldi	r16, 0x00	; 0
    3c48:	0b c0       	rjmp	.+22     	; 0x3c60 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x2a>
  PRR &= ~_BV(PRADC); // Enable the ADC.
    3c4a:	80 91 64 00 	lds	r24, 0x0064
    3c4e:	8e 7f       	andi	r24, 0xFE	; 254
    3c50:	80 93 64 00 	sts	0x0064, r24
  ADCSRA |= _BV(ADEN);
    3c54:	80 91 7a 00 	lds	r24, 0x007A
    3c58:	80 68       	ori	r24, 0x80	; 128
    3c5a:	80 93 7a 00 	sts	0x007A, r24
    3c5e:	01 e0       	ldi	r16, 0x01	; 1
//   * samples  maximum number of samples to take (if one, nap() before); strictly positive
// Sets sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
static uint16_t _analogueNoiseReducedReadM(const uint8_t admux, int8_t samples = 3)
  {
  const bool neededEnable = powerUpADCIfDisabled();
  ACSR |= _BV(ACD); // Disable the analogue comparator.
    3c60:	80 b7       	in	r24, 0x30	; 48
    3c62:	80 68       	ori	r24, 0x80	; 128
    3c64:	80 bf       	out	0x30, r24	; 48
  ADMUX = admux;
    3c66:	90 93 7c 00 	sts	0x007C, r25
  if(samples < 2) { nap(WDTO_15MS); } // Allow plenty of time for things to settle if not taking multiple samples.
    3c6a:	12 30       	cpi	r17, 0x02	; 2
    3c6c:	1c f4       	brge	.+6      	; 0x3c74 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x3e>
    3c6e:	80 e0       	ldi	r24, 0x00	; 0
    3c70:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <nap(signed char)>
  set_sleep_mode(SLEEP_MODE_ADC);
    3c74:	83 b7       	in	r24, 0x33	; 51
    3c76:	81 7f       	andi	r24, 0xF1	; 241
    3c78:	82 60       	ori	r24, 0x02	; 2
    3c7a:	83 bf       	out	0x33, r24	; 51
  ADCSRB = 0; // Enable free-running mode.
    3c7c:	10 92 7b 00 	sts	0x007B, r1
  bitWrite(ADCSRA, ADATE, (samples>1)); // Enable ADC auto-trigger iff wanting multiple samples.
    3c80:	12 30       	cpi	r17, 0x02	; 2
    3c82:	24 f0       	brlt	.+8      	; 0x3c8c <_analogueNoiseReducedReadM(unsigned char, signed char)+0x56>
    3c84:	80 91 7a 00 	lds	r24, 0x007A
    3c88:	80 62       	ori	r24, 0x20	; 32
    3c8a:	03 c0       	rjmp	.+6      	; 0x3c92 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x5c>
    3c8c:	80 91 7a 00 	lds	r24, 0x007A
    3c90:	8f 7d       	andi	r24, 0xDF	; 223
    3c92:	80 93 7a 00 	sts	0x007A, r24
  bitSet(ADCSRA, ADIE); // Turn on ADC interrupt.
    3c96:	80 91 7a 00 	lds	r24, 0x007A
    3c9a:	88 60       	ori	r24, 0x08	; 8
    3c9c:	80 93 7a 00 	sts	0x007A, r24
  bitSet(ADCSRA, ADSC); // Start conversion(s).
    3ca0:	80 91 7a 00 	lds	r24, 0x007A
    3ca4:	80 64       	ori	r24, 0x40	; 64
    3ca6:	80 93 7a 00 	sts	0x007A, r24
    3caa:	4f ef       	ldi	r20, 0xFF	; 255
    3cac:	9f ef       	ldi	r25, 0xFF	; 255
    3cae:	21 c0       	rjmp	.+66     	; 0x3cf2 <_analogueNoiseReducedReadM(unsigned char, signed char)+0xbc>
  uint8_t oldADCL = 0xff;
  uint8_t oldADCH = 0xff; // Ensure that a second sample will get taken if multiple samples have been requested.
  // Usually take several readings to improve accuracy.  Discard all but the last...
  while(--samples >= 0)
      {
      ADC_complete = false;
    3cb0:	10 92 6b 03 	sts	0x036B, r1
    3cb4:	07 c0       	rjmp	.+14     	; 0x3cc4 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x8e>
      while(!ADC_complete) { sleep_mode(); }
    3cb6:	83 b7       	in	r24, 0x33	; 51
    3cb8:	81 60       	ori	r24, 0x01	; 1
    3cba:	83 bf       	out	0x33, r24	; 51
    3cbc:	88 95       	sleep
    3cbe:	83 b7       	in	r24, 0x33	; 51
    3cc0:	8e 7f       	andi	r24, 0xFE	; 254
    3cc2:	83 bf       	out	0x33, r24	; 51
    3cc4:	80 91 6b 03 	lds	r24, 0x036B
    3cc8:	88 23       	and	r24, r24
    3cca:	a9 f3       	breq	.-22     	; 0x3cb6 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x80>
      const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
    3ccc:	30 91 78 00 	lds	r19, 0x0078
      const uint8_t h = ADCH; // Capture the high byte.
    3cd0:	20 91 79 00 	lds	r18, 0x0079
      if((h == oldADCH) && (l == oldADCL)) { break; } // Stop now if result seems to have settled.
    3cd4:	29 17       	cp	r18, r25
    3cd6:	11 f4       	brne	.+4      	; 0x3cdc <_analogueNoiseReducedReadM(unsigned char, signed char)+0xa6>
    3cd8:	34 17       	cp	r19, r20
    3cda:	71 f0       	breq	.+28     	; 0x3cf8 <_analogueNoiseReducedReadM(unsigned char, signed char)+0xc2>
      oldADCL = l;
      oldADCH = h;
      _adcNoise = (_adcNoise >> 1) + (l ^ h) + (__TIME__[7] & 0xf); // Capture a little entropy.
    3cdc:	90 91 6a 03 	lds	r25, 0x036A
    3ce0:	82 2f       	mov	r24, r18
    3ce2:	83 27       	eor	r24, r19
    3ce4:	8a 5f       	subi	r24, 0xFA	; 250
    3ce6:	96 95       	lsr	r25
    3ce8:	98 0f       	add	r25, r24
    3cea:	90 93 6a 03 	sts	0x036A, r25
    3cee:	92 2f       	mov	r25, r18
    3cf0:	43 2f       	mov	r20, r19
  bitSet(ADCSRA, ADIE); // Turn on ADC interrupt.
  bitSet(ADCSRA, ADSC); // Start conversion(s).
  uint8_t oldADCL = 0xff;
  uint8_t oldADCH = 0xff; // Ensure that a second sample will get taken if multiple samples have been requested.
  // Usually take several readings to improve accuracy.  Discard all but the last...
  while(--samples >= 0)
    3cf2:	11 50       	subi	r17, 0x01	; 1
    3cf4:	17 ff       	sbrs	r17, 7
    3cf6:	dc cf       	rjmp	.-72     	; 0x3cb0 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x7a>
      if((h == oldADCH) && (l == oldADCL)) { break; } // Stop now if result seems to have settled.
      oldADCL = l;
      oldADCH = h;
      _adcNoise = (_adcNoise >> 1) + (l ^ h) + (__TIME__[7] & 0xf); // Capture a little entropy.
      }
  bitClear(ADCSRA, ADIE); // Turn off ADC interrupt.
    3cf8:	80 91 7a 00 	lds	r24, 0x007A
    3cfc:	87 7f       	andi	r24, 0xF7	; 247
    3cfe:	80 93 7a 00 	sts	0x007A, r24
  bitClear(ADCSRA, ADATE); // Turn off ADC auto-trigger.
    3d02:	80 91 7a 00 	lds	r24, 0x007A
    3d06:	8f 7d       	andi	r24, 0xDF	; 223
    3d08:	80 93 7a 00 	sts	0x007A, r24
  //sleep_disable();
  const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
    3d0c:	20 91 78 00 	lds	r18, 0x0078
  const uint8_t h = ADCH; // Capture the high byte.
    3d10:	40 91 79 00 	lds	r20, 0x0079
  if(neededEnable) { powerDownADC(); }
    3d14:	00 23       	and	r16, r16
    3d16:	51 f0       	breq	.+20     	; 0x3d2c <_analogueNoiseReducedReadM(unsigned char, signed char)+0xf6>
  }
    
// Power ADC down.
void powerDownADC()
  {
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
    3d18:	80 91 7a 00 	lds	r24, 0x007A
    3d1c:	8f 77       	andi	r24, 0x7F	; 127
    3d1e:	80 93 7a 00 	sts	0x007A, r24
  PRR |= _BV(PRADC); // Disable the ADC.
    3d22:	80 91 64 00 	lds	r24, 0x0064
    3d26:	81 60       	ori	r24, 0x01	; 1
    3d28:	80 93 64 00 	sts	0x0064, r24
    3d2c:	94 2f       	mov	r25, r20
    3d2e:	80 e0       	ldi	r24, 0x00	; 0
    3d30:	30 e0       	ldi	r19, 0x00	; 0
    3d32:	28 2b       	or	r18, r24
    3d34:	39 2b       	or	r19, r25
  //sleep_disable();
  const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
  const uint8_t h = ADCH; // Capture the high byte.
  if(neededEnable) { powerDownADC(); }
  return((h << 8) | l);
  }
    3d36:	c9 01       	movw	r24, r18
    3d38:	1f 91       	pop	r17
    3d3a:	0f 91       	pop	r16
    3d3c:	08 95       	ret

00003d3e <analogueNoiseReducedRead(int, unsigned char)>:
//   * aiNumber is the analogue input number [0,7] for ATMega328P
//   * mode  is the analogue reference, eg DEFAULT (Vcc).
// May set sleep mode to SLEEP_MODE_ADC, and disable sleep on exit.
// Nominally equivalent to analogReference(mode); return(analogRead(pinNumber));
uint16_t analogueNoiseReducedRead(int aiNumber, uint8_t mode)
  { return(_analogueNoiseReducedReadM((mode << 6) | (aiNumber & 7))); }
    3d3e:	62 95       	swap	r22
    3d40:	66 0f       	add	r22, r22
    3d42:	66 0f       	add	r22, r22
    3d44:	60 7c       	andi	r22, 0xC0	; 192
    3d46:	87 70       	andi	r24, 0x07	; 7
    3d48:	86 2b       	or	r24, r22
    3d4a:	63 e0       	ldi	r22, 0x03	; 3
    3d4c:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <_analogueNoiseReducedReadM(unsigned char, signed char)>
    3d50:	08 95       	ret

00003d52 <SupplyVoltageMilliVolts::read()>:


// Force a read/poll of the supply voltage and return the value sensed.
// Expensive/slow.
// NOT thread-safe nor usable within ISRs (Interrupt Service Routines).
uint16_t SupplyVoltageMilliVolts::read()
    3d52:	cf 93       	push	r28
    3d54:	df 93       	push	r29
    3d56:	ec 01       	movw	r28, r24
  return(result);
  }


// Measure internal bandgap (1.1V nominal, 1.0--1.2V) as fraction of Vcc [0,1023].
static uint16_t read1V1wrtBattery() { return(_analogueNoiseReducedReadM(_BV(REFS0) | 14)); }
    3d58:	8e e4       	ldi	r24, 0x4E	; 78
    3d5a:	63 e0       	ldi	r22, 0x03	; 3
    3d5c:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <_analogueNoiseReducedReadM(unsigned char, signed char)>
    3d60:	9c 01       	movw	r18, r24
  {
  // Measure internal bandgap (1.1V nominal, 1.0--1.2V) as fraction of Vcc.
  const uint16_t raw = read1V1wrtBattery();
  // If Vcc was 1.1V ADC would give 1023.
  // If Vcc was 2.2V ADC would give 511.
  const uint16_t result = ((1023U<<6) / raw) * (1100U>>6);
    3d62:	80 ec       	ldi	r24, 0xC0	; 192
    3d64:	9f ef       	ldi	r25, 0xFF	; 255
    3d66:	b9 01       	movw	r22, r18
    3d68:	0e 94 b7 3d 	call	0x7b6e	; 0x7b6e <__udivmodhi4>
    3d6c:	ab 01       	movw	r20, r22
    3d6e:	e4 e0       	ldi	r30, 0x04	; 4
    3d70:	44 0f       	add	r20, r20
    3d72:	55 1f       	adc	r21, r21
    3d74:	ea 95       	dec	r30
    3d76:	e1 f7       	brne	.-8      	; 0x3d70 <SupplyVoltageMilliVolts::read()+0x1e>
    3d78:	46 0f       	add	r20, r22
    3d7a:	57 1f       	adc	r21, r23
  rawInv = raw;
    3d7c:	3b 83       	std	Y+3, r19	; 0x03
    3d7e:	2a 83       	std	Y+2, r18	; 0x02
  mV = result;
    3d80:	5d 83       	std	Y+5, r21	; 0x05
    3d82:	4c 83       	std	Y+4, r20	; 0x04
  isLow = (result < BATTERY_LOW_MV);
    3d84:	1e 82       	std	Y+6, r1	; 0x06
    3d86:	88 e0       	ldi	r24, 0x08	; 8
    3d88:	47 39       	cpi	r20, 0x97	; 151
    3d8a:	58 07       	cpc	r21, r24
    3d8c:	10 f4       	brcc	.+4      	; 0x3d92 <SupplyVoltageMilliVolts::read()+0x40>
    3d8e:	81 e0       	ldi	r24, 0x01	; 1
    3d90:	8e 83       	std	Y+6, r24	; 0x06
  DEBUG_SERIAL_PRINT(raw);
  if(batteryLow) { DEBUG_SERIAL_PRINT_FLASHSTRING(" LOW"); }
  DEBUG_SERIAL_PRINTLN();
#endif
  return(result);
  }
    3d92:	ca 01       	movw	r24, r20
    3d94:	df 91       	pop	r29
    3d96:	cf 91       	pop	r28
    3d98:	08 95       	ret

00003d9a <noisyADCRead()>:
// If already powered up then do nothing other than return false.
// This does not power up the analogue comparator; this needs to be manually enabled if required.
// If this returns true then a matching powerDownADC() may be advisable.
bool powerUpADCIfDisabled()
  {
  if(!(PRR & _BV(PRADC))) { return(false); }
    3d9a:	80 91 64 00 	lds	r24, 0x0064
    3d9e:	80 fd       	sbrc	r24, 0
    3da0:	02 c0       	rjmp	.+4      	; 0x3da6 <noisyADCRead()+0xc>
    3da2:	40 e0       	ldi	r20, 0x00	; 0
    3da4:	0b c0       	rjmp	.+22     	; 0x3dbc <noisyADCRead()+0x22>
  PRR &= ~_BV(PRADC); // Enable the ADC.
    3da6:	80 91 64 00 	lds	r24, 0x0064
    3daa:	8e 7f       	andi	r24, 0xFE	; 254
    3dac:	80 93 64 00 	sts	0x0064, r24
  ADCSRA |= _BV(ADEN);
    3db0:	80 91 7a 00 	lds	r24, 0x007A
    3db4:	80 68       	ori	r24, 0x80	; 128
    3db6:	80 93 7a 00 	sts	0x007A, r24
    3dba:	41 e0       	ldi	r20, 0x01	; 1
// If defined, update _adcNoise value to make noisyADCRead() output at least a poor PRNG if called in a loop, though might disguise underlying problems.
//#define CATCH_OTHER_NOISE_DURING_NAR // May hide underlying weakness if defined.
uint8_t noisyADCRead()
  {
  const bool neededEnable = powerUpADCIfDisabled();
  ADMUX = _BV(REFS0) | 14; // Bandgap vs Vcc.
    3dbc:	8e e4       	ldi	r24, 0x4E	; 78
    3dbe:	80 93 7c 00 	sts	0x007C, r24
  ADCSRB = 0; // Enable free-running mode.
    3dc2:	10 92 7b 00 	sts	0x007B, r1
  bitWrite(ADCSRA, ADATE, 1); // Multiple samples required.
    3dc6:	80 91 7a 00 	lds	r24, 0x007A
    3dca:	80 62       	ori	r24, 0x20	; 32
    3dcc:	80 93 7a 00 	sts	0x007A, r24
  ADC_complete = false;
    3dd0:	10 92 6b 03 	sts	0x036B, r1
  bitSet(ADCSRA, ADIE); // Turn on ADC interrupt.
    3dd4:	80 91 7a 00 	lds	r24, 0x007A
    3dd8:	88 60       	ori	r24, 0x08	; 8
    3dda:	80 93 7a 00 	sts	0x007A, r24
  bitSet(ADCSRA, ADSC); // Start conversion.
    3dde:	80 91 7a 00 	lds	r24, 0x007A
    3de2:	80 64       	ori	r24, 0x40	; 64
    3de4:	80 93 7a 00 	sts	0x007A, r24
    3de8:	90 e0       	ldi	r25, 0x00	; 0
    3dea:	01 c0       	rjmp	.+2      	; 0x3dee <noisyADCRead()+0x54>
  uint8_t count = 0;
  while(!ADC_complete) { ++count; } // Busy wait while 'timing' the ADC conversion.
    3dec:	9f 5f       	subi	r25, 0xFF	; 255
    3dee:	80 91 6b 03 	lds	r24, 0x036B
    3df2:	88 23       	and	r24, r24
    3df4:	d9 f3       	breq	.-10     	; 0x3dec <noisyADCRead()+0x52>
  const uint8_t l1 = ADCL; // Capture the low byte and latch the high byte.
    3df6:	50 91 78 00 	lds	r21, 0x0078
  const uint8_t h1 = ADCH; // Capture the high byte.
    3dfa:	20 91 79 00 	lds	r18, 0x0079
#if defined(CATCH_OTHER_NOISE_DURING_NAR)
  uint8_t result = _crc_ibutton_update(_adcNoise++, h1 ^ count);
#else
  uint8_t result = (h1 << 5) + count;
    3dfe:	22 95       	swap	r18
    3e00:	22 0f       	add	r18, r18
    3e02:	20 7e       	andi	r18, 0xE0	; 224
    3e04:	29 0f       	add	r18, r25
#endif
  set_sleep_mode(SLEEP_MODE_ADC); // Take further samples in more energy-efficient mode.
    3e06:	83 b7       	in	r24, 0x33	; 51
    3e08:	81 7f       	andi	r24, 0xF1	; 241
    3e0a:	82 60       	ori	r24, 0x02	; 2
    3e0c:	83 bf       	out	0x33, r24	; 51
    3e0e:	30 e0       	ldi	r19, 0x00	; 0
  // Sample all possible ADC inputs relative to Vcc, whatever the inputs may be connected to.
  // Assumed never to do any harm, eg physical damage or to disturb I/O setup.
  for(uint8_t i = 0; i < 8; ++i)
    {
    ADMUX = (i & 7) | (DEFAULT << 6); // Switching MUX after sample has started, which may add further noise.
    3e10:	83 2f       	mov	r24, r19
    3e12:	87 70       	andi	r24, 0x07	; 7
    3e14:	80 64       	ori	r24, 0x40	; 64
    3e16:	80 93 7c 00 	sts	0x007C, r24
    ADC_complete = false;
    3e1a:	10 92 6b 03 	sts	0x036B, r1
    3e1e:	07 c0       	rjmp	.+14     	; 0x3e2e <noisyADCRead()+0x94>
    while(!ADC_complete)
      {
#if defined(CATCH_OTHER_NOISE_DURING_NAR)       
      result -= 37; /* prime; may capture unrelated interrupt wakeups... */
#endif
      sleep_mode();
    3e20:	83 b7       	in	r24, 0x33	; 51
    3e22:	81 60       	ori	r24, 0x01	; 1
    3e24:	83 bf       	out	0x33, r24	; 51
    3e26:	88 95       	sleep
    3e28:	83 b7       	in	r24, 0x33	; 51
    3e2a:	8e 7f       	andi	r24, 0xFE	; 254
    3e2c:	83 bf       	out	0x33, r24	; 51
  // Assumed never to do any harm, eg physical damage or to disturb I/O setup.
  for(uint8_t i = 0; i < 8; ++i)
    {
    ADMUX = (i & 7) | (DEFAULT << 6); // Switching MUX after sample has started, which may add further noise.
    ADC_complete = false;
    while(!ADC_complete)
    3e2e:	80 91 6b 03 	lds	r24, 0x036B
    3e32:	88 23       	and	r24, r24
    3e34:	a9 f3       	breq	.-22     	; 0x3e20 <noisyADCRead()+0x86>
#if defined(CATCH_OTHER_NOISE_DURING_NAR)       
      result -= 37; /* prime; may capture unrelated interrupt wakeups... */
#endif
      sleep_mode();
      }
    const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
    3e36:	90 91 78 00 	lds	r25, 0x0078
    const uint8_t h = ADCH; // Capture the high byte.
    3e3a:	80 91 79 00 	lds	r24, 0x0079
		"	brtc	2f" "\n\t"
		"	eor	%0, %2" "\n\t"
		"2:	dec	%1" "\n\t"
		"	brne	1b" "\n\t"
		: "=r" (__crc), "=d" (__i), "=d" (__pattern)
		: "0" (__crc), "r" (__data));
    3e3e:	89 27       	eor	r24, r25
    3e40:	28 27       	eor	r18, r24
    3e42:	88 e0       	ldi	r24, 0x08	; 8
    3e44:	9c e8       	ldi	r25, 0x8C	; 140
    3e46:	20 fb       	bst	r18, 0
    3e48:	26 95       	lsr	r18
    3e4a:	0e f4       	brtc	.+2      	; 0x3e4e <noisyADCRead()+0xb4>
    3e4c:	29 27       	eor	r18, r25
    3e4e:	8a 95       	dec	r24
    3e50:	d1 f7       	brne	.-12     	; 0x3e46 <noisyADCRead()+0xac>
  uint8_t result = (h1 << 5) + count;
#endif
  set_sleep_mode(SLEEP_MODE_ADC); // Take further samples in more energy-efficient mode.
  // Sample all possible ADC inputs relative to Vcc, whatever the inputs may be connected to.
  // Assumed never to do any harm, eg physical damage or to disturb I/O setup.
  for(uint8_t i = 0; i < 8; ++i)
    3e52:	3f 5f       	subi	r19, 0xFF	; 255
    3e54:	38 30       	cpi	r19, 0x08	; 8
    3e56:	e1 f6       	brne	.-72     	; 0x3e10 <noisyADCRead()+0x76>
      }
    const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
    const uint8_t h = ADCH; // Capture the high byte.
    result = _crc_ibutton_update(result, l ^ h); // A thorough hash.
    }
  bitClear(ADCSRA, ADIE); // Turn off ADC interrupt.
    3e58:	80 91 7a 00 	lds	r24, 0x007A
    3e5c:	87 7f       	andi	r24, 0xF7	; 247
    3e5e:	80 93 7a 00 	sts	0x007A, r24
  bitClear(ADCSRA, ADATE); // Turn off ADC auto-trigger.
    3e62:	80 91 7a 00 	lds	r24, 0x007A
    3e66:	8f 7d       	andi	r24, 0xDF	; 223
    3e68:	80 93 7a 00 	sts	0x007A, r24
  if(neededEnable) { powerDownADC(); }
    3e6c:	44 23       	and	r20, r20
    3e6e:	51 f0       	breq	.+20     	; 0x3e84 <noisyADCRead()+0xea>
  }
    
// Power ADC down.
void powerDownADC()
  {
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
    3e70:	80 91 7a 00 	lds	r24, 0x007A
    3e74:	8f 77       	andi	r24, 0x7F	; 127
    3e76:	80 93 7a 00 	sts	0x007A, r24
  PRR |= _BV(PRADC); // Disable the ADC.
    3e7a:	80 91 64 00 	lds	r24, 0x0064
    3e7e:	81 60       	ori	r24, 0x01	; 1
    3e80:	80 93 64 00 	sts	0x0064, r24
  bitClear(ADCSRA, ADIE); // Turn off ADC interrupt.
  bitClear(ADCSRA, ADATE); // Turn off ADC auto-trigger.
  if(neededEnable) { powerDownADC(); }
  result ^= l1; // Ensure that the actual Vcc raw lsbs do get folded in to the final result.
  return(result); // Use all the bits collected.
  }
    3e84:	82 2f       	mov	r24, r18
    3e86:	85 27       	eor	r24, r21
    3e88:	08 95       	ret

00003e8a <readInternalTemperatureC16()>:
// May set sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
int readInternalTemperatureC16()
  {
  // Measure internal temperature sensor against internal voltage source.
  // Response is ~1mv/C with 0C at ~289mV according to the data sheet.
  const uint16_t raw = _analogueNoiseReducedReadM(_BV(REFS1) | _BV(REFS0) | _BV(MUX3), 1);
    3e8a:	88 ec       	ldi	r24, 0xC8	; 200
    3e8c:	61 e0       	ldi	r22, 0x01	; 1
    3e8e:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <_analogueNoiseReducedReadM(unsigned char, signed char)>
    3e92:	84 54       	subi	r24, 0x44	; 68
    3e94:	91 40       	sbci	r25, 0x01	; 1
    3e96:	22 ed       	ldi	r18, 0xD2	; 210
    3e98:	30 e0       	ldi	r19, 0x00	; 0
    3e9a:	a9 01       	movw	r20, r18
    3e9c:	84 9f       	mul	r24, r20
    3e9e:	90 01       	movw	r18, r0
    3ea0:	85 9f       	mul	r24, r21
    3ea2:	30 0d       	add	r19, r0
    3ea4:	94 9f       	mul	r25, r20
    3ea6:	30 0d       	add	r19, r0
    3ea8:	11 24       	eor	r1, r1
    3eaa:	f4 e0       	ldi	r31, 0x04	; 4
    3eac:	35 95       	asr	r19
    3eae:	27 95       	ror	r18
    3eb0:	fa 95       	dec	r31
    3eb2:	e1 f7       	brne	.-8      	; 0x3eac <readInternalTemperatureC16()+0x22>
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("");
#endif
  //const int degC = (raw - 328) ; // Crude fast adjustment for one sensor at ~20C (DHD20130429).
  const int degC = ((((int)raw) - 324) * 210) >> 4; // Slightly less crude adjustment, see http://playground.arduino.cc//Main/InternalTemperatureSensor
  return(degC);
  }
    3eb4:	c9 01       	movw	r24, r18
    3eb6:	08 95       	ret

00003eb8 <powerDownTWI()>:
  }

// Power down TWI (I2C).
void powerDownTWI()
  {
  TWCR &= ~_BV(TWEN); // Disable TWI.
    3eb8:	ec eb       	ldi	r30, 0xBC	; 188
    3eba:	f0 e0       	ldi	r31, 0x00	; 0
    3ebc:	80 81       	ld	r24, Z
    3ebe:	8b 7f       	andi	r24, 0xFB	; 251
    3ec0:	80 83       	st	Z, r24
  PRR |= _BV(PRTWI); // Disable TWI power.
    3ec2:	e4 e6       	ldi	r30, 0x64	; 100
    3ec4:	f0 e0       	ldi	r31, 0x00	; 0
    3ec6:	80 81       	ld	r24, Z
    3ec8:	80 68       	ori	r24, 0x80	; 128
    3eca:	80 83       	st	Z, r24
  //digitalWrite(SCL, 0);

  // Convert to hi-Z inputs.
  //pinMode(SDA, INPUT);
  //pinMode(SCL, INPUT);
  }
    3ecc:	08 95       	ret

00003ece <clockJitterWDT()>:
// Expensive in terms of CPU time and thus energy.
// TODO: may be able to reduce clock speed to lower energy cost while still detecting useful jitter.
uint_fast8_t clockJitterWDT()
  {
  // Watchdog should be (already) be disabled on entry.
  _watchdogFired = false;
    3ece:	10 92 69 03 	sts	0x0369, r1
  wdt_enable(WDTO_15MS); // Set watchdog for minimum time.
    3ed2:	88 e0       	ldi	r24, 0x08	; 8
    3ed4:	28 e1       	ldi	r18, 0x18	; 24
    3ed6:	30 e0       	ldi	r19, 0x00	; 0
    3ed8:	0f b6       	in	r0, 0x3f	; 63
    3eda:	f8 94       	cli
    3edc:	a8 95       	wdr
    3ede:	20 93 60 00 	sts	0x0060, r18
    3ee2:	0f be       	out	0x3f, r0	; 63
    3ee4:	80 93 60 00 	sts	0x0060, r24
  WDTCSR |= (1 << WDIE);
    3ee8:	80 91 60 00 	lds	r24, 0x0060
    3eec:	80 64       	ori	r24, 0x40	; 64
    3eee:	80 93 60 00 	sts	0x0060, r24
    3ef2:	90 e0       	ldi	r25, 0x00	; 0
    3ef4:	01 c0       	rjmp	.+2      	; 0x3ef8 <clockJitterWDT()+0x2a>
  uint_fast8_t count = 0;
  while(!_watchdogFired) { ++count; } // Effectively count CPU cycles until WDT fires.
    3ef6:	9f 5f       	subi	r25, 0xFF	; 255
    3ef8:	80 91 69 03 	lds	r24, 0x0369
    3efc:	88 23       	and	r24, r24
    3efe:	d9 f3       	breq	.-10     	; 0x3ef6 <clockJitterWDT()+0x28>
  return(count);
  }
    3f00:	89 2f       	mov	r24, r25
    3f02:	08 95       	ret

00003f04 <clockJitterEntropyByte()>:
// Expensive in terms of CPU time and thus energy, though possibly more efficient than basic clockJitterXXX() routines.
// Internally this uses a CRC as a relatively fast and hopefully effective hash over intermediate values.
// Note the that rejection of repeat values will be less effective with two interleaved gathering mechanisms
// as the interaction while not necessarily adding genuine entropy, will make counts differ between runs.
// DHD20130519: measured as taking ~63ms to run, ie ~8ms per bit gathered.
uint_fast8_t clockJitterEntropyByte()
    3f04:	1f 93       	push	r17

  uint_fast8_t result = 0;
  uint_fast8_t countR = 0, lastCountR = 0;
  uint_fast8_t countW = 0, lastCountW = 0;

  const uint8_t t0 = TCNT2; // Wait for sub-cycle timer to roll.
    3f06:	90 91 b2 00 	lds	r25, 0x00B2
    3f0a:	40 e0       	ldi	r20, 0x00	; 0
    3f0c:	50 e0       	ldi	r21, 0x00	; 0
    3f0e:	02 c0       	rjmp	.+4      	; 0x3f14 <clockJitterEntropyByte()+0x10>
  while(t0 == TCNT2) { ++hash; } // Possibly capture some entropy from recent program activity/timing.
    3f10:	4f 5f       	subi	r20, 0xFF	; 255
    3f12:	5f 4f       	sbci	r21, 0xFF	; 255
    3f14:	80 91 b2 00 	lds	r24, 0x00B2
    3f18:	98 17       	cp	r25, r24
    3f1a:	d1 f3       	breq	.-12     	; 0x3f10 <clockJitterEntropyByte()+0xc>
  uint8_t t1 = TCNT2;
    3f1c:	f0 91 b2 00 	lds	r31, 0x00B2

  _watchdogFired = 0;
    3f20:	10 92 69 03 	sts	0x0369, r1
  wdt_enable(WDTO_15MS); // Start watchdog, with minimum timeout.
    3f24:	88 e0       	ldi	r24, 0x08	; 8
    3f26:	28 e1       	ldi	r18, 0x18	; 24
    3f28:	30 e0       	ldi	r19, 0x00	; 0
    3f2a:	0f b6       	in	r0, 0x3f	; 63
    3f2c:	f8 94       	cli
    3f2e:	a8 95       	wdr
    3f30:	20 93 60 00 	sts	0x0060, r18
    3f34:	0f be       	out	0x3f, r0	; 63
    3f36:	80 93 60 00 	sts	0x0060, r24
  WDTCSR |= (1 << WDIE);
    3f3a:	80 91 60 00 	lds	r24, 0x0060
    3f3e:	80 64       	ori	r24, 0x40	; 64
    3f40:	80 93 60 00 	sts	0x0060, r24
    3f44:	90 e0       	ldi	r25, 0x00	; 0
    3f46:	60 e0       	ldi	r22, 0x00	; 0
    3f48:	e0 e0       	ldi	r30, 0x00	; 0
    3f4a:	20 e0       	ldi	r18, 0x00	; 0
    3f4c:	70 e0       	ldi	r23, 0x00	; 0
    3f4e:	38 e0       	ldi	r19, 0x08	; 8
        if(--bitsLeft <= 0) { break; } // Got enough bits; stop now.
        lastCountW = countW;
        }
      countW = 0;
      _watchdogFired = 0;
      wdt_enable(WDTO_15MS); // Restart watchdog, with minimum timeout.
    3f50:	a8 e1       	ldi	r26, 0x18	; 24
    3f52:	b0 e0       	ldi	r27, 0x00	; 0
    3f54:	18 e0       	ldi	r17, 0x08	; 8
  WDTCSR |= (1 << WDIE);
  int_fast8_t bitsLeft = 8; // Decrement when a bit is harvested...
  for( ; ; )
    {
    // Extract watchdog jitter vs CPU.
    if(!_watchdogFired) { ++countW; }
    3f56:	80 91 69 03 	lds	r24, 0x0369
    3f5a:	88 23       	and	r24, r24
    3f5c:	11 f4       	brne	.+4      	; 0x3f62 <clockJitterEntropyByte()+0x5e>
    3f5e:	2f 5f       	subi	r18, 0xFF	; 255
    3f60:	2a c0       	rjmp	.+84     	; 0x3fb6 <clockJitterEntropyByte()+0xb2>
    else // Watchdog fired.
      {
      if(countW != lastCountW) // Got a different value from last; assume one bit of entropy.
    3f62:	27 17       	cp	r18, r23
    3f64:	c1 f0       	breq	.+48     	; 0x3f96 <clockJitterEntropyByte()+0x92>
        "eor    %A0,__tmp_reg__"

        : "=d" (__ret)
        : "r" (__data), "0" (__crc)
        : "r0"
    );
    3f66:	42 27       	eor	r20, r18
    3f68:	04 2e       	mov	r0, r20
    3f6a:	42 95       	swap	r20
    3f6c:	40 7f       	andi	r20, 0xF0	; 240
    3f6e:	40 25       	eor	r20, r0
    3f70:	05 2e       	mov	r0, r21
    3f72:	54 2f       	mov	r21, r20
    3f74:	42 95       	swap	r20
    3f76:	4f 70       	andi	r20, 0x0F	; 15
    3f78:	04 26       	eor	r0, r20
    3f7a:	46 95       	lsr	r20
    3f7c:	54 27       	eor	r21, r20
    3f7e:	45 27       	eor	r20, r21
    3f80:	44 0f       	add	r20, r20
    3f82:	44 0f       	add	r20, r20
    3f84:	44 0f       	add	r20, r20
    3f86:	40 25       	eor	r20, r0
        {
        hash = _crc_ccitt_update(hash, countW);
        result = (result << 1) ^ ((uint_fast8_t)hash); // Nominally capturing (at least) lsb of hash.
    3f88:	99 0f       	add	r25, r25
    3f8a:	94 27       	eor	r25, r20
        if(--bitsLeft <= 0) { break; } // Got enough bits; stop now.
    3f8c:	31 50       	subi	r19, 0x01	; 1
    3f8e:	13 16       	cp	r1, r19
    3f90:	0c f0       	brlt	.+2      	; 0x3f94 <clockJitterEntropyByte()+0x90>
    3f92:	34 c0       	rjmp	.+104    	; 0x3ffc <clockJitterEntropyByte()+0xf8>
    3f94:	72 2f       	mov	r23, r18
        lastCountW = countW;
        }
      countW = 0;
      _watchdogFired = 0;
    3f96:	10 92 69 03 	sts	0x0369, r1
      wdt_enable(WDTO_15MS); // Restart watchdog, with minimum timeout.
    3f9a:	0f b6       	in	r0, 0x3f	; 63
    3f9c:	f8 94       	cli
    3f9e:	a8 95       	wdr
    3fa0:	a0 93 60 00 	sts	0x0060, r26
    3fa4:	0f be       	out	0x3f, r0	; 63
    3fa6:	10 93 60 00 	sts	0x0060, r17
      WDTCSR |= (1 << WDIE);
    3faa:	80 91 60 00 	lds	r24, 0x0060
    3fae:	80 64       	ori	r24, 0x40	; 64
    3fb0:	80 93 60 00 	sts	0x0060, r24
    3fb4:	20 e0       	ldi	r18, 0x00	; 0
      }

    // Extract RTC jitter vs CPU.
    if(t1 == TCNT2) { --countR; }
    3fb6:	80 91 b2 00 	lds	r24, 0x00B2
    3fba:	f8 17       	cp	r31, r24
    3fbc:	11 f4       	brne	.+4      	; 0x3fc2 <clockJitterEntropyByte()+0xbe>
    3fbe:	61 50       	subi	r22, 0x01	; 1
    3fc0:	ca cf       	rjmp	.-108    	; 0x3f56 <clockJitterEntropyByte()+0x52>
    else // Sub-cycle timer rolled.
      {
      if(countR != lastCountR) // Got a different value from last; assume one bit of entropy.
    3fc2:	6e 17       	cp	r22, r30
    3fc4:	b9 f0       	breq	.+46     	; 0x3ff4 <clockJitterEntropyByte()+0xf0>
    3fc6:	46 27       	eor	r20, r22
    3fc8:	04 2e       	mov	r0, r20
    3fca:	42 95       	swap	r20
    3fcc:	40 7f       	andi	r20, 0xF0	; 240
    3fce:	40 25       	eor	r20, r0
    3fd0:	05 2e       	mov	r0, r21
    3fd2:	54 2f       	mov	r21, r20
    3fd4:	42 95       	swap	r20
    3fd6:	4f 70       	andi	r20, 0x0F	; 15
    3fd8:	04 26       	eor	r0, r20
    3fda:	46 95       	lsr	r20
    3fdc:	54 27       	eor	r21, r20
    3fde:	45 27       	eor	r20, r21
    3fe0:	44 0f       	add	r20, r20
    3fe2:	44 0f       	add	r20, r20
    3fe4:	44 0f       	add	r20, r20
    3fe6:	40 25       	eor	r20, r0
        {
        hash = _crc_ccitt_update(hash, countR);
        result = (result << 1) ^ ((uint_fast8_t)hash); // Nominally capturing (at least) lsb of hash.
    3fe8:	99 0f       	add	r25, r25
    3fea:	94 27       	eor	r25, r20
        if(--bitsLeft <= 0) { break; } // Got enough bits; stop now.
    3fec:	31 50       	subi	r19, 0x01	; 1
    3fee:	13 16       	cp	r1, r19
    3ff0:	2c f4       	brge	.+10     	; 0x3ffc <clockJitterEntropyByte()+0xf8>
    3ff2:	e6 2f       	mov	r30, r22
        lastCountR = countR;
        }
      countR = 0;
      t1 = TCNT2; // Set to look for next roll.
    3ff4:	f0 91 b2 00 	lds	r31, 0x00B2
    3ff8:	60 e0       	ldi	r22, 0x00	; 0
    3ffa:	ad cf       	rjmp	.-166    	; 0x3f56 <clockJitterEntropyByte()+0x52>
      }
    }

  wdt_disable(); // Ensure no spurious WDT wakeup pending.
    3ffc:	88 e1       	ldi	r24, 0x18	; 24
    3ffe:	0f b6       	in	r0, 0x3f	; 63
    4000:	f8 94       	cli
    4002:	80 93 60 00 	sts	0x0060, r24
    4006:	10 92 60 00 	sts	0x0060, r1
    400a:	0f be       	out	0x3f, r0	; 63
  return(result);
  }
    400c:	89 2f       	mov	r24, r25
    400e:	1f 91       	pop	r17
    4010:	08 95       	ret

00004012 <Sensor<unsigned int>::isValid(unsigned int) const>:
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual T get() const = 0;

    // Returns true if this sensor reading value passed is potentially valid, eg in-range.
    // Default is to always return true, ie all values potentially valid.
    virtual bool isValid(T value) const { return(true); }
    4012:	81 e0       	ldi	r24, 0x01	; 1
    4014:	08 95       	ret

00004016 <Sensor<unsigned int>::preferredPollInterval_s() const>:
 
    // Returns non-zero if this implementation requires a regular call to read() to operate correctly.
    // Preferred poll interval (in seconds) or 0 if no regular poll() call required.
    // Default returns 0 indicating regular call to read() not required,
    // only as required to fetch new values from the underlying sensor.
    virtual uint8_t preferredPollInterval_s() const { return(0); }
    4016:	80 e0       	ldi	r24, 0x00	; 0
    4018:	08 95       	ret

0000401a <Sensor<unsigned int>::handleInterruptSimple()>:
    // Must be fast and ISR (Interrupt Service Routine) safe.
    // Returns true if interrupt was successfully handled and cleared
    // else another interrupt handler in the chain may be called
    // to attempt to clear the interrupt.
    // By default does nothing (and returns false).
    virtual bool handleInterruptSimple() { return(false); }
    401a:	80 e0       	ldi	r24, 0x00	; 0
    401c:	08 95       	ret

0000401e <Sensor<unsigned int>::begin()>:

    // Begin access to this sensor if applicable and not already begun.
    // Returns true if it needed to be begun.
    // Allows logic to end() if required at the end of a block, etc.
    // Defaults to do nothing (and return false).
    virtual bool begin() { return(false); }
    401e:	80 e0       	ldi	r24, 0x00	; 0
    4020:	08 95       	ret

00004022 <Sensor<unsigned int>::isAvailable() const>:

    // Returns true if this sensor is currently available.
    // True by default unless implementation overrides.
    // For those sensors that need starting this will be false before begin().
    virtual bool isAvailable() const { return(true); }
    4022:	81 e0       	ldi	r24, 0x01	; 1
    4024:	08 95       	ret

00004026 <Sensor<unsigned int>::end()>:

    // End access to this sensor if applicable and not already ended.
    // Returns true if it needed to be ended.
    // Defaults to do nothing (and return false).
    virtual bool end() { return(false); }
    4026:	80 e0       	ldi	r24, 0x00	; 0
    4028:	08 95       	ret

0000402a <global constructors keyed to _Z25minimisePowerWithoutSleepv>:
    // True if last-measured voltage was low.
    bool isLow;
 
  public:
    // Initialise to cautious values.
    SupplyVoltageMilliVolts() : mV(0), isLow(true) { }
    402a:	88 e8       	ldi	r24, 0x88	; 136
    402c:	91 e0       	ldi	r25, 0x01	; 1
    402e:	90 93 63 03 	sts	0x0363, r25
    4032:	80 93 62 03 	sts	0x0362, r24
    4036:	10 92 67 03 	sts	0x0367, r1
    403a:	10 92 66 03 	sts	0x0366, r1
    403e:	81 e0       	ldi	r24, 0x01	; 1
    4040:	80 93 68 03 	sts	0x0368, r24
    4044:	08 95       	ret

00004046 <captureEntropy1()>:
// Capture a little system entropy.
// This call should typically take << 1ms at 1MHz CPU.
// Does not change CPU clock speeds, mess with interrupts (other than possible brief blocking), or do I/O, or sleep.
// Should inject some noise into secure (TBD) and non-secure (RNG8) PRNGs.
void captureEntropy1()
  { seedRNG8(getSubCycleTime() ^ _adcNoise, cycleCountCPU() ^ Supply_mV.get(), _watchdogFired); }
    4046:	20 91 b2 00 	lds	r18, 0x00B2
    404a:	80 91 6a 03 	lds	r24, 0x036A
    404e:	66 b5       	in	r22, 0x26	; 38
    4050:	40 91 69 03 	lds	r20, 0x0369
    4054:	90 91 66 03 	lds	r25, 0x0366
    4058:	69 27       	eor	r22, r25
    405a:	82 27       	eor	r24, r18
    405c:	0e 94 89 21 	call	0x4312	; 0x4312 <seedRNG8(unsigned char, unsigned char, unsigned char)>
    4060:	08 95       	ret

00004062 <powerDownSPI()>:
  }

// Power down SPI.
void powerDownSPI()
  {
  SPCR &= ~_BV(SPE); // Disable SPI.
    4062:	8c b5       	in	r24, 0x2c	; 44
    4064:	8f 7b       	andi	r24, 0xBF	; 191
    4066:	8c bd       	out	0x2c, r24	; 44
  PRR |= _BV(PRSPI); // Power down...
    4068:	e4 e6       	ldi	r30, 0x64	; 100
    406a:	f0 e0       	ldi	r31, 0x00	; 0
    406c:	80 81       	ld	r24, Z
    406e:	84 60       	ori	r24, 0x04	; 4
    4070:	80 83       	st	Z, r24

  pinMode(PIN_SPI_nSS, OUTPUT); // Ensure that nSS is an output to avoid forcing SPI to slave mode by accident.
    4072:	8a e0       	ldi	r24, 0x0A	; 10
    4074:	61 e0       	ldi	r22, 0x01	; 1
    4076:	0e 94 d9 37 	call	0x6fb2	; 0x6fb2 <pinMode>
  fastDigitalWrite(PIN_SPI_nSS, HIGH); // Ensure that nSS is HIGH and thus any slave deselected when powering up SPI.
    407a:	2a 9a       	sbi	0x05, 2	; 5

  // Avoid pins from floating when SPI is disabled.
  // Try to preserve general I/O direction and restore previous output values for outputs.
  pinMode(PIN_SPI_SCK, OUTPUT);
    407c:	8d e0       	ldi	r24, 0x0D	; 13
    407e:	61 e0       	ldi	r22, 0x01	; 1
    4080:	0e 94 d9 37 	call	0x6fb2	; 0x6fb2 <pinMode>
  pinMode(PIN_SPI_MOSI, OUTPUT);
    4084:	8b e0       	ldi	r24, 0x0B	; 11
    4086:	61 e0       	ldi	r22, 0x01	; 1
    4088:	0e 94 d9 37 	call	0x6fb2	; 0x6fb2 <pinMode>
  pinMode(PIN_SPI_MISO, INPUT_PULLUP);
    408c:	8c e0       	ldi	r24, 0x0C	; 12
    408e:	62 e0       	ldi	r22, 0x02	; 2
    4090:	0e 94 d9 37 	call	0x6fb2	; 0x6fb2 <pinMode>

  // If sharing SPI SCK with LED indicator then return this pin to being an output (retaining previous value).
  //if(LED_HEATCALL == PIN_SPI_SCK) { pinMode(LED_HEATCALL, OUTPUT); }
  }
    4094:	08 95       	ret

00004096 <powerUpSPIIfDisabled()>:
// If SPI was disabled, power it up, enable it as master and with a sensible clock speed, etc, and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownSPI() may be advisable.
bool powerUpSPIIfDisabled()
  {
  if(!(PRR & _BV(PRSPI))) { return(false); }
    4096:	80 91 64 00 	lds	r24, 0x0064
    409a:	82 fd       	sbrc	r24, 2
    409c:	02 c0       	rjmp	.+4      	; 0x40a2 <powerUpSPIIfDisabled()+0xc>
    409e:	80 e0       	ldi	r24, 0x00	; 0
    40a0:	08 95       	ret

  pinMode(PIN_SPI_nSS, OUTPUT); // Ensure that nSS is an output to avoid forcing SPI to slave mode by accident.
    40a2:	8a e0       	ldi	r24, 0x0A	; 10
    40a4:	61 e0       	ldi	r22, 0x01	; 1
    40a6:	0e 94 d9 37 	call	0x6fb2	; 0x6fb2 <pinMode>
  fastDigitalWrite(PIN_SPI_nSS, HIGH); // Ensure that nSS is HIGH and thus any slave deselected when powering up SPI.
    40aa:	2a 9a       	sbi	0x05, 2	; 5

  PRR &= ~_BV(PRSPI); // Enable SPI power.
    40ac:	80 91 64 00 	lds	r24, 0x0064
    40b0:	8b 7f       	andi	r24, 0xFB	; 251
    40b2:	80 93 64 00 	sts	0x0064, r24
  // Configure raw SPI to match better how it was used in PICAXE V0.09 code.
  // CPOL = 0, CPHA = 0
  // Enable SPI, set master mode, set speed.
  const uint8_t ENABLE_MASTER =  _BV(SPE) | _BV(MSTR);
#if F_CPU <= 2000000 // Needs minimum prescale (x2) with slow (<=2MHz) CPU clock.
  SPCR = ENABLE_MASTER; // 2x clock prescale for <=1MHz SPI clock from <=2MHz CPU clock (500kHz SPI @ 1MHz CPU).
    40b6:	80 e5       	ldi	r24, 0x50	; 80
    40b8:	8c bd       	out	0x2c, r24	; 44
  SPSR = _BV(SPI2X);
    40ba:	81 e0       	ldi	r24, 0x01	; 1
    40bc:	8d bd       	out	0x2d, r24	; 45
#else // Needs setting for fast (~16MHz) CPU clock.
  SPCR = _BV(SPR0) | ENABLE_MASTER; // 8x clock prescale for ~2MHz SPI clock from nominal ~16MHz CPU clock.
  SPSR = _BV(SPI2X);
#endif
  return(true);
  }
    40be:	08 95       	ret

000040c0 <power_intermittent_peripherals_disable()>:
// Disable/remove power to intermittent peripherals.
// Switches the digital line to input with no pull-up (ie high-Z).
// There should be some sort of load to stop this floating.
void power_intermittent_peripherals_disable()
  {
  pinMode(IO_POWER_UP, INPUT);
    40c0:	87 e0       	ldi	r24, 0x07	; 7
    40c2:	60 e0       	ldi	r22, 0x00	; 0
    40c4:	0e 94 d9 37 	call	0x6fb2	; 0x6fb2 <pinMode>
  }
    40c8:	08 95       	ret

000040ca <minimisePowerWithoutSleep()>:
// to ensure that nothing power-hungry is accidentally left on.
// Any module that may need to run all the time should not be turned off here.
// May be called from panic(), so do not be too clever.
// Does NOT attempt to power down the radio, eg in case that needs to be left in RX mode.
// Does NOT attempt to power down the UART/serial.
void minimisePowerWithoutSleep()
    40ca:	0f 93       	push	r16
    40cc:	1f 93       	push	r17
  {
  // Disable the watchdog timer.
  wdt_disable();
    40ce:	88 e1       	ldi	r24, 0x18	; 24
    40d0:	0f b6       	in	r0, 0x3f	; 63
    40d2:	f8 94       	cli
    40d4:	80 93 60 00 	sts	0x0060, r24
    40d8:	10 92 60 00 	sts	0x0060, r1
    40dc:	0f be       	out	0x3f, r0	; 63
  
  // Ensure that external peripherals are powered down.
  power_intermittent_peripherals_disable();
    40de:	0e 94 60 20 	call	0x40c0	; 0x40c0 <power_intermittent_peripherals_disable()>

  // Turn off analogue stuff that eats power.
  ADCSRA = 0; // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
    40e2:	10 92 7a 00 	sts	0x007A, r1
  ACSR = (1<<ACD); // Disable the analog comparator.
    40e6:	80 e8       	ldi	r24, 0x80	; 128
    40e8:	80 bf       	out	0x30, r24	; 48
  DIDR0 = 0x3F; // Disable digital input buffers on all ADC0-ADC5 pins.
    40ea:	8f e3       	ldi	r24, 0x3F	; 63
    40ec:	80 93 7e 00 	sts	0x007E, r24
    //#endif
    //#if defined(LDR_SENSOR_AIN)
    //    | (1 << LDR_SENSOR_AIN)
    //#endif
    //    ;
  DIDR1 = (1<<AIN1D)|(1<<AIN0D); // Disable digital input buffer on AIN1/0.
    40f0:	83 e0       	ldi	r24, 0x03	; 3
    40f2:	80 93 7f 00 	sts	0x007F, r24
  power_adc_disable();
    40f6:	04 e6       	ldi	r16, 0x64	; 100
    40f8:	10 e0       	ldi	r17, 0x00	; 0
    40fa:	f8 01       	movw	r30, r16
    40fc:	80 81       	ld	r24, Z
    40fe:	81 60       	ori	r24, 0x01	; 1
    4100:	80 83       	st	Z, r24

  // Ensure that SPI is powered down.
  powerDownSPI();
    4102:	0e 94 31 20 	call	0x4062	; 0x4062 <powerDownSPI()>
  }

// Power down TWI (I2C).
void powerDownTWI()
  {
  TWCR &= ~_BV(TWEN); // Disable TWI.
    4106:	ec eb       	ldi	r30, 0xBC	; 188
    4108:	f0 e0       	ldi	r31, 0x00	; 0
    410a:	80 81       	ld	r24, Z
    410c:	8b 7f       	andi	r24, 0xFB	; 251
    410e:	80 83       	st	Z, r24
  PRR |= _BV(PRTWI); // Disable TWI power.
    4110:	f8 01       	movw	r30, r16
    4112:	80 81       	ld	r24, Z
    4114:	80 68       	ori	r24, 0x80	; 128
    4116:	80 83       	st	Z, r24

#if defined(DONT_USE_TIMER0)
  power_timer0_disable();
#endif

  power_timer1_disable();
    4118:	80 81       	ld	r24, Z
    411a:	88 60       	ori	r24, 0x08	; 8
    411c:	80 83       	st	Z, r24

#ifndef WAKEUP_32768HZ_XTAL
  power_timer2_disable();
#endif
  }
    411e:	1f 91       	pop	r17
    4120:	0f 91       	pop	r16
    4122:	08 95       	ret

00004124 <power_intermittent_peripherals_enable(bool)>:
// items powered direct from IO_POWER_UP may need no such wait.
//
// Switches the digital line to high then output (to avoid ever *discharging* the output cap).
// Note that with 100nF cap, and 330R (or lower) resistor from the output pin,
// then 1ms delay should be plenty for the voltage on the cap to settle.
void power_intermittent_peripherals_enable(bool waitUntilStable)
    4124:	1f 93       	push	r17
    4126:	18 2f       	mov	r17, r24
  {
  fastDigitalWrite(IO_POWER_UP, HIGH);
    4128:	5f 9a       	sbi	0x0b, 7	; 11
  pinMode(IO_POWER_UP, OUTPUT);
    412a:	87 e0       	ldi	r24, 0x07	; 7
    412c:	61 e0       	ldi	r22, 0x01	; 1
    412e:	0e 94 d9 37 	call	0x6fb2	; 0x6fb2 <pinMode>
  // If requested, wait long enough that I/O peripheral power should be stable.
  // Wait in a relatively low-power way...
  if(waitUntilStable) { sleepLowPowerMs(1); }
    4132:	11 23       	and	r17, r17
    4134:	21 f0       	breq	.+8      	; 0x413e <power_intermittent_peripherals_enable(bool)+0x1a>
// This may be achieved in part by dynamically slowing the CPU clock if possible.
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed((((MIN_CPU_HZ * (ms)) + 2000) / 4000) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    4136:	86 e0       	ldi	r24, 0x06	; 6
    4138:	90 e0       	ldi	r25, 0x00	; 0
    413a:	0e 94 76 1d 	call	0x3aec	; 0x3aec <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
  }
    413e:	1f 91       	pop	r17
    4140:	08 95       	ret

00004142 <powerUpTWIIfDisabled()>:
// If TWI (I2C) was disabled, power it up, do Wire.begin(), and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownRWI() may be advisable.
bool powerUpTWIIfDisabled()
  {
  if(!(PRR & _BV(PRTWI))) { return(false); }
    4142:	80 91 64 00 	lds	r24, 0x0064
    4146:	87 fd       	sbrc	r24, 7
    4148:	02 c0       	rjmp	.+4      	; 0x414e <powerUpTWIIfDisabled()+0xc>
    414a:	80 e0       	ldi	r24, 0x00	; 0
    414c:	08 95       	ret

  PRR &= ~_BV(PRTWI); // Enable TWI power.
    414e:	80 91 64 00 	lds	r24, 0x0064
    4152:	8f 77       	andi	r24, 0x7F	; 127
    4154:	80 93 64 00 	sts	0x0064, r24
  TWCR |= _BV(TWEN); // Enable TWI.
    4158:	80 91 bc 00 	lds	r24, 0x00BC
    415c:	84 60       	ori	r24, 0x04	; 4
    415e:	80 93 bc 00 	sts	0x00BC, r24
  Wire.begin(); // Set it going.
    4162:	88 e1       	ldi	r24, 0x18	; 24
    4164:	94 e0       	ldi	r25, 0x04	; 4
    4166:	0e 94 66 35 	call	0x6acc	; 0x6acc <TwoWire::begin()>
  // TODO: reset TWBR and prescaler for our low CPU frequency     (TWBR = ((F_CPU / TWI_FREQ) - 16) / 2 gives -3!)
#if F_CPU <= 1000000
  TWBR = 0; // Implies SCL freq of F_CPU / (16 + 2 * TBWR * PRESC) = 62.5kHz @ F_CPU==1MHz and PRESC==1 (from Wire/TWI code).
    416a:	10 92 b8 00 	sts	0x00B8, r1
    416e:	81 e0       	ldi	r24, 0x01	; 1
#endif
  return(true);
  }
    4170:	08 95       	ret

00004172 <powerDownSerial()>:
  PRR |= _BV(PRADC); // Disable the ADC.
  }


// Check if serial is (already) powered up.
static bool _serialIsPoweredUp() { return(!(PRR & _BV(PRUSART0))); }
    4172:	80 91 64 00 	lds	r24, 0x0064


// Flush any pending serial output and power it down if up.
void powerDownSerial()
  {
  if(_serialIsPoweredUp())
    4176:	81 fd       	sbrc	r24, 1
    4178:	08 c0       	rjmp	.+16     	; 0x418a <powerDownSerial()+0x18>
    {
    // Flush serial output and shut down if apparently active.
    Serial.flush();
    417a:	8a e1       	ldi	r24, 0x1A	; 26
    417c:	95 e0       	ldi	r25, 0x05	; 5
    417e:	0e 94 34 3a 	call	0x7468	; 0x7468 <HardwareSerial::flush()>
    //flushSerialHW();
    Serial.end();
    4182:	8a e1       	ldi	r24, 0x1A	; 26
    4184:	95 e0       	ldi	r25, 0x05	; 5
    4186:	0e 94 74 39 	call	0x72e8	; 0x72e8 <HardwareSerial::end()>
    }
  pinMode(PIN_SERIAL_RX, INPUT_PULLUP);
    418a:	80 e0       	ldi	r24, 0x00	; 0
    418c:	62 e0       	ldi	r22, 0x02	; 2
    418e:	0e 94 d9 37 	call	0x6fb2	; 0x6fb2 <pinMode>
  pinMode(PIN_SERIAL_TX, INPUT_PULLUP);
    4192:	81 e0       	ldi	r24, 0x01	; 1
    4194:	62 e0       	ldi	r22, 0x02	; 2
    4196:	0e 94 d9 37 	call	0x6fb2	; 0x6fb2 <pinMode>
  PRR |= _BV(PRUSART0); // Disable the UART module.
    419a:	80 91 64 00 	lds	r24, 0x0064
    419e:	82 60       	ori	r24, 0x02	; 2
    41a0:	80 93 64 00 	sts	0x0064, r24
  }
    41a4:	08 95       	ret

000041a6 <burnHundredsOfCyclesProductivelyAndPoll()>:
// This call should typically take << 1ms at 1MHz CPU.
// Does not change CPU clock speeds, mess with interrupts (other than possible brief blocking), or sleep.
// May capture some entropy in secure and non-secure PRNGs.
void burnHundredsOfCyclesProductivelyAndPoll()
  {
  if(pollIO()) { seedRNG8(cycleCountCPU(), _watchdogFired, getSubCycleTime()); }
    41a6:	80 e0       	ldi	r24, 0x00	; 0
    41a8:	0e 94 1e 07 	call	0xe3c	; 0xe3c <pollIO(bool)>
    41ac:	88 23       	and	r24, r24
    41ae:	41 f0       	breq	.+16     	; 0x41c0 <burnHundredsOfCyclesProductivelyAndPoll()+0x1a>
    41b0:	86 b5       	in	r24, 0x26	; 38
    41b2:	60 91 69 03 	lds	r22, 0x0369
    41b6:	40 91 b2 00 	lds	r20, 0x00B2
    41ba:	0e 94 89 21 	call	0x4312	; 0x4312 <seedRNG8(unsigned char, unsigned char, unsigned char)>
    41be:	08 95       	ret
  else { captureEntropy1(); }
    41c0:	0e 94 23 20 	call	0x4046	; 0x4046 <captureEntropy1()>
    41c4:	08 95       	ret

000041c6 <flushSerialProductive()>:

#ifndef flushSerialProductive
// Does a Serial.flush() attempting to do some useful work (eg I/O polling) while waiting for output to drain.
// Assumes hundreds of CPU cycles available for each character queued for TX.
// Does not change CPU clock speed or disable or mess with USART0, though may poll it.
void flushSerialProductive()
    41c6:	02 c0       	rjmp	.+4      	; 0x41cc <flushSerialProductive()+0x6>
#if 0 && defined(DEBUG)
  if(!_serialIsPoweredUp()) { panic(); } // Trying to operate serial without it powered up.
#endif
  // Can productively spin here churning PRNGs or the like before the flush(), checking for the UART TX buffer to empty...
  // An occasional premature exit to flush() due to Serial interrupt handler interaction is benign, and indeed more grist to the mill.
  while(serialTXInProgress()) { burnHundredsOfCyclesProductivelyAndPoll(); }
    41c8:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <burnHundredsOfCyclesProductivelyAndPoll()>
    41cc:	80 91 c0 00 	lds	r24, 0x00C0
    41d0:	85 ff       	sbrs	r24, 5
    41d2:	fa cf       	rjmp	.-12     	; 0x41c8 <flushSerialProductive()+0x2>
  Serial.flush(); // Wait for all output to have been sent.
    41d4:	8a e1       	ldi	r24, 0x1A	; 26
    41d6:	95 e0       	ldi	r25, 0x05	; 5
    41d8:	0e 94 34 3a 	call	0x7468	; 0x7468 <HardwareSerial::flush()>
  }
    41dc:	08 95       	ret

000041de <flushSerialSCTSensitive()>:
// Does not change CPU clock speed or disable or mess with USART0, though may poll it.
// Sleeps in IDLE mode for ~15ms at a time (backtopped by watchdog) waking on any interrupt
// so that the caller must be sure RX overrun (etc) will not be an issue.
// Switches to flushSerialProductive() behaviour
// if in danger of overrunning a minor cycle while idling.
void flushSerialSCTSensitive()
    41de:	1f 93       	push	r17
#ifdef ENABLE_AVR_IDLE_MODE
// Idle productively polling I/O, etc, across the system while spending time in low-power mode if possible.
// Typically sleeps for nominally up to 30ms; tries to allow ealier wakeup if interrupt is received, etc.
// (Will often be prematurely woken by timer0 with ~16ms interval.)
// True iff watchdog timer expired; false if something else woke the CPU.
static bool inline idle15AndPoll() { const bool wd = idleCPU(WDTO_15MS); pollIO(!wd); return(wd); }
    41e0:	11 e0       	ldi	r17, 0x01	; 1
  {
#if 0 && defined(DEBUG)
  if(!_serialIsPoweredUp()) { panic(); } // Trying to operate serial without it powered up.
#endif
#ifdef ENABLE_AVR_IDLE_MODE
  while(serialTXInProgress() && (getSubCycleTime() < GSCT_MAX - 2 - (20/SUBCYCLE_TICK_MS_RD)))
    41e2:	80 91 c0 00 	lds	r24, 0x00C0
    41e6:	85 fd       	sbrc	r24, 5
    41e8:	0b c0       	rjmp	.+22     	; 0x4200 <flushSerialSCTSensitive()+0x22>
    41ea:	80 91 b2 00 	lds	r24, 0x00B2
    41ee:	8b 3f       	cpi	r24, 0xFB	; 251
    41f0:	38 f4       	brcc	.+14     	; 0x4200 <flushSerialSCTSensitive()+0x22>
    41f2:	80 e0       	ldi	r24, 0x00	; 0
    41f4:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <idleCPU(signed char)>
    41f8:	81 27       	eor	r24, r17
    41fa:	0e 94 1e 07 	call	0xe3c	; 0xe3c <pollIO(bool)>
    41fe:	f1 cf       	rjmp	.-30     	; 0x41e2 <flushSerialSCTSensitive()+0x4>
    { idle15AndPoll(); } // Save much power by idling CPU, though everything else runs.
#endif
  flushSerialProductive();
    4200:	0e 94 e3 20 	call	0x41c6	; 0x41c6 <flushSerialProductive()>
  }
    4204:	1f 91       	pop	r17
    4206:	08 95       	ret

00004208 <powerUpSerialIfDisabled()>:
  PRR |= _BV(PRADC); // Disable the ADC.
  }


// Check if serial is (already) powered up.
static bool _serialIsPoweredUp() { return(!(PRR & _BV(PRUSART0))); }
    4208:	80 91 64 00 	lds	r24, 0x0064
// If serial was disabled, power it up, do Serial.begin(), and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownSerial() may be advisable.
bool powerUpSerialIfDisabled()
  {
  if(_serialIsPoweredUp()) { return(false); }
    420c:	81 fd       	sbrc	r24, 1
    420e:	02 c0       	rjmp	.+4      	; 0x4214 <powerUpSerialIfDisabled()+0xc>
    4210:	80 e0       	ldi	r24, 0x00	; 0
    4212:	08 95       	ret
  PRR &= ~_BV(PRUSART0); // Enable the UART.
    4214:	80 91 64 00 	lds	r24, 0x0064
    4218:	8d 7f       	andi	r24, 0xFD	; 253
    421a:	80 93 64 00 	sts	0x0064, r24
  Serial.begin(BAUD); // Set it going.
    421e:	8a e1       	ldi	r24, 0x1A	; 26
    4220:	95 e0       	ldi	r25, 0x05	; 5
    4222:	40 ec       	ldi	r20, 0xC0	; 192
    4224:	52 e1       	ldi	r21, 0x12	; 18
    4226:	60 e0       	ldi	r22, 0x00	; 0
    4228:	70 e0       	ldi	r23, 0x00	; 0
    422a:	0e 94 f6 38 	call	0x71ec	; 0x71ec <HardwareSerial::begin(unsigned long)>
    422e:	81 e0       	ldi	r24, 0x01	; 1
  return(true);
  }
    4230:	08 95       	ret

00004232 <sleepUntilSubCycleTime(unsigned char)>:
// May use a combination of techniques to hit the required time.
// Requesting a sleep until at or near the end of the cycle risks overrun and may be unwise.
// Using this to sleep less then 2 ticks may prove unreliable as the RTC rolls on underneath...
// This is NOT intended to be used to sleep over the end of a minor cycle.
// May poll I/O.
bool sleepUntilSubCycleTime(const uint8_t sleepUntil)
    4232:	0f 93       	push	r16
    4234:	1f 93       	push	r17
    4236:	cf 93       	push	r28
    4238:	df 93       	push	r29
    423a:	18 2f       	mov	r17, r24
      sleepLowPowerLessThanMs(max(SUBCYCLE_TICK_MS_RD / 2, 1)); // Assumed to be a constant expression.
      continue;
      }

    // Compute remaining time in milliseconds, rounded down...
    const uint16_t msLeft = ((uint16_t)SUBCYCLE_TICK_MS_RD) * ticksLeft;
    423c:	07 e0       	ldi	r16, 0x07	; 7
// May poll I/O.
bool sleepUntilSubCycleTime(const uint8_t sleepUntil)
  {
  for( ; ; )
    {
    const uint8_t now = getSubCycleTime();
    423e:	80 91 b2 00 	lds	r24, 0x00B2
    if(now == sleepUntil) { return(true); } // Done it!
    4242:	81 17       	cp	r24, r17
    4244:	e1 f1       	breq	.+120    	; 0x42be <sleepUntilSubCycleTime(unsigned char)+0x8c>
    if(now > sleepUntil) { return(false); } // Too late...
    4246:	18 17       	cp	r17, r24
    4248:	10 f4       	brcc	.+4      	; 0x424e <sleepUntilSubCycleTime(unsigned char)+0x1c>
    424a:	80 e0       	ldi	r24, 0x00	; 0
    424c:	39 c0       	rjmp	.+114    	; 0x42c0 <sleepUntilSubCycleTime(unsigned char)+0x8e>

    // Compute time left to sleep.
    // It is easy to sleep a bit more later if necessary, but oversleeping is bad.
    const uint8_t ticksLeft = sleepUntil - now;
    424e:	21 2f       	mov	r18, r17
    4250:	28 1b       	sub	r18, r24
    // Deal with shortest sleep specially to avoid missing target from overheads...
    if(1 == ticksLeft)
    4252:	21 30       	cpi	r18, 0x01	; 1
    4254:	19 f4       	brne	.+6      	; 0x425c <sleepUntilSubCycleTime(unsigned char)+0x2a>
// Should be good for values up to at least 1000, ie 1 second.
// Uses formulation likely to be quicker than sleepLowPowerMs() for non-constant argument values,
// and that results in a somewhat shorter sleep than sleepLowPowerMs(ms).
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerLessThanMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed(((MIN_CPU_HZ/4000) * (ms)) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    4256:	83 e1       	ldi	r24, 0x13	; 19
    4258:	90 e0       	ldi	r25, 0x00	; 0
    425a:	2e c0       	rjmp	.+92     	; 0x42b8 <sleepUntilSubCycleTime(unsigned char)+0x86>
      sleepLowPowerLessThanMs(max(SUBCYCLE_TICK_MS_RD / 2, 1)); // Assumed to be a constant expression.
      continue;
      }

    // Compute remaining time in milliseconds, rounded down...
    const uint16_t msLeft = ((uint16_t)SUBCYCLE_TICK_MS_RD) * ticksLeft;
    425c:	20 9f       	mul	r18, r16
    425e:	e0 01       	movw	r28, r0
    4260:	11 24       	eor	r1, r1

    // If comfortably in the area of nap()s then use one of them for improved energy savings.
    // Allow for nap() to overrun a little as its timing can vary with temperature and supply voltage,
    // and the bulk of energy savings should still be available without pushing the timing to the wire.
    // Note that during nap() timer0 should be stopped and thus not cause premature wakeup (from overflow interrupt).
    if(msLeft >= 20)
    4262:	c4 31       	cpi	r28, 0x14	; 20
    4264:	d1 05       	cpc	r29, r1
    4266:	70 f0       	brcs	.+28     	; 0x4284 <sleepUntilSubCycleTime(unsigned char)+0x52>
      {
      if(msLeft >= 80)
    4268:	c0 35       	cpi	r28, 0x50	; 80
    426a:	d1 05       	cpc	r29, r1
    426c:	38 f0       	brcs	.+14     	; 0x427c <sleepUntilSubCycleTime(unsigned char)+0x4a>
        {
        if(msLeft >= 333)
    426e:	cd 54       	subi	r28, 0x4D	; 77
    4270:	d1 40       	sbci	r29, 0x01	; 1
    4272:	10 f0       	brcs	.+4      	; 0x4278 <sleepUntilSubCycleTime(unsigned char)+0x46>
          {
          nap(WDTO_250MS); // Nominal 250ms sleep.
    4274:	84 e0       	ldi	r24, 0x04	; 4
    4276:	03 c0       	rjmp	.+6      	; 0x427e <sleepUntilSubCycleTime(unsigned char)+0x4c>
          continue;
          }
        nap(WDTO_60MS); // Nominal 60ms sleep.
    4278:	82 e0       	ldi	r24, 0x02	; 2
    427a:	01 c0       	rjmp	.+2      	; 0x427e <sleepUntilSubCycleTime(unsigned char)+0x4c>
        continue;
        }
      nap(WDTO_15MS); // Nominal 15ms sleep.
    427c:	80 e0       	ldi	r24, 0x00	; 0
    427e:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <nap(signed char)>
    4282:	dd cf       	rjmp	.-70     	; 0x423e <sleepUntilSubCycleTime(unsigned char)+0xc>
    // Use low-power CPU sleep for residual time, but being very careful not to oversleep.
    // Aim to sleep somewhat under residual time, eg to allow for overheads, interrupts, and other slippages.
    // Assumed to be > 1 else would have been special-cased above.
    // Assumed to be << 1s else a nap() would have been used above.
#ifdef DEBUG
    if((msLeft < 2) || (msLeft > 1000)) { panic(); }
    4284:	ce 01       	movw	r24, r28
    4286:	02 97       	sbiw	r24, 0x02	; 2
    4288:	87 5e       	subi	r24, 0xE7	; 231
    428a:	93 40       	sbci	r25, 0x03	; 3
    428c:	10 f0       	brcs	.+4      	; 0x4292 <sleepUntilSubCycleTime(unsigned char)+0x60>
    428e:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <panic()>
    4292:	9e 01       	movw	r18, r28
    4294:	21 50       	subi	r18, 0x01	; 1
    4296:	30 40       	sbci	r19, 0x00	; 0
    4298:	40 e0       	ldi	r20, 0x00	; 0
    429a:	50 e0       	ldi	r21, 0x00	; 0
    429c:	da 01       	movw	r26, r20
    429e:	c9 01       	movw	r24, r18
    42a0:	63 e0       	ldi	r22, 0x03	; 3
    42a2:	88 0f       	add	r24, r24
    42a4:	99 1f       	adc	r25, r25
    42a6:	aa 1f       	adc	r26, r26
    42a8:	bb 1f       	adc	r27, r27
    42aa:	6a 95       	dec	r22
    42ac:	d1 f7       	brne	.-12     	; 0x42a2 <sleepUntilSubCycleTime(unsigned char)+0x70>
    42ae:	82 1b       	sub	r24, r18
    42b0:	93 0b       	sbc	r25, r19
    42b2:	a4 0b       	sbc	r26, r20
    42b4:	b5 0b       	sbc	r27, r21
    42b6:	02 97       	sbiw	r24, 0x02	; 2
    42b8:	0e 94 76 1d 	call	0x3aec	; 0x3aec <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
    42bc:	c0 cf       	rjmp	.-128    	; 0x423e <sleepUntilSubCycleTime(unsigned char)+0xc>
    42be:	81 e0       	ldi	r24, 0x01	; 1
#endif
    sleepLowPowerLessThanMs(msLeft - 1);
    }
  }
    42c0:	df 91       	pop	r29
    42c2:	cf 91       	pop	r28
    42c4:	1f 91       	pop	r17
    42c6:	0f 91       	pop	r16
    42c8:	08 95       	ret

000042ca <powerSetup()>:
// Call from setup() to turn off unused modules, set up timers and interrupts, etc.
// I/O pin setting is not done here.
void powerSetup()
  {
#ifdef DEBUG
  assert(DEFAULT_CPU_PRESCALE == clock_prescale_get()); // Verify that CPU prescaling is as expected.
    42ca:	80 91 61 00 	lds	r24, 0x0061
    42ce:	8f 70       	andi	r24, 0x0F	; 15
    42d0:	83 30       	cpi	r24, 0x03	; 3
    42d2:	11 f0       	breq	.+4      	; 0x42d8 <powerSetup()+0xe>
    42d4:	0e 94 c8 02 	call	0x590	; 0x590 <abort>
#endif

  // Do normal gentle switch off, including analogue module/control in correct order.
  minimisePowerWithoutSleep();
    42d8:	0e 94 65 20 	call	0x40ca	; 0x40ca <minimisePowerWithoutSleep()>

  // Brutally force off all modules, then re-enable explicitly below any still needed.
  power_all_disable(); 
    42dc:	80 91 64 00 	lds	r24, 0x0064
    42e0:	8f 6e       	ori	r24, 0xEF	; 239
    42e2:	80 93 64 00 	sts	0x0064, r24

#if !defined(DONT_USE_TIMER0)
  power_timer0_enable(); // Turning timer 0 off messes up some standard Arduino support such as delay() and millis().
    42e6:	80 91 64 00 	lds	r24, 0x0064
    42ea:	8f 7d       	andi	r24, 0xDF	; 223
    42ec:	80 93 64 00 	sts	0x0064, r24
#endif
  
#if defined(WAKEUP_32768HZ_XTAL)
  power_timer2_enable();
    42f0:	80 91 64 00 	lds	r24, 0x0064
    42f4:	8f 7b       	andi	r24, 0xBF	; 191
    42f6:	80 93 64 00 	sts	0x0064, r24
#ifdef WAKEUP_32768HZ_XTAL
static void timer2XtalIntSetup()
 {
  // Set up TIMER2 to wake CPU out of sleep regularly using external 32768Hz crystal.
  // See http://www.atmel.com/Images/doc2505.pdf
  TCCR2A = 0x00;
    42fa:	10 92 b0 00 	sts	0x00B0, r1

#if defined(HALF_SECOND_RTC_SUPPORT)
  TCCR2B = (1<<CS22); // Set CLK/64 for overflow interrupt every 0.5s.
#elif defined(TWO_S_TICK_RTC_SUPPORT)
  TCCR2B = (1<<CS22)|(1<<CS21); // Set CLK/128 for overflow interrupt every 2s.
    42fe:	86 e0       	ldi	r24, 0x06	; 6
    4300:	80 93 b1 00 	sts	0x00B1, r24
#else
  TCCR2B = (1<<CS22)|(1<<CS20); // Set CLK/128 for overflow interrupt every 1s.
#endif
  //TCCR2B = (1<<CS22)|(1<<CS21)|(1<<CS20); // Set CLK/1024 for overflow interrupt every 8s (slowest possible).

  ASSR = (1<<AS2); // Enable asynchronous operation.
    4304:	80 e2       	ldi	r24, 0x20	; 32
    4306:	80 93 b6 00 	sts	0x00B6, r24
  TIMSK2 = (1<<TOIE2); // Enable the timer 2 interrupt.
    430a:	81 e0       	ldi	r24, 0x01	; 1
    430c:	80 93 70 00 	sts	0x0070, r24
  
#if defined(WAKEUP_32768HZ_XTAL)
  power_timer2_enable();
  timer2XtalIntSetup();
#endif
  }
    4310:	08 95       	ret

00004312 <seedRNG8(unsigned char, unsigned char, unsigned char)>:
//2 ADDs, one bit shift right , and one increment. Difficult or slow operations like multiply, etc 
//were avoided for maximum speed on ultra low power devices.
void seedRNG8(uint8_t s1, uint8_t s2, uint8_t s3) // Originally init_rng(s1,s2,s3) //Can also be used to seed the rng with more entropy during use.
  {
  //XOR new entropy into key state
  a ^=s1;
    4312:	20 91 6e 03 	lds	r18, 0x036E
  b ^=s2;
    4316:	90 91 6f 03 	lds	r25, 0x036F
    431a:	69 27       	eor	r22, r25
  c ^=s3;
    431c:	90 91 6c 03 	lds	r25, 0x036C
    4320:	49 27       	eor	r20, r25
  x++;
    4322:	90 91 6d 03 	lds	r25, 0x036D
    4326:	9f 5f       	subi	r25, 0xFF	; 255
    4328:	90 93 6d 03 	sts	0x036D, r25
  a = (a^c^x);
    432c:	28 27       	eor	r18, r24
    432e:	24 27       	eor	r18, r20
    4330:	29 27       	eor	r18, r25
    4332:	20 93 6e 03 	sts	0x036E, r18
  b = (b+a);
    4336:	62 0f       	add	r22, r18
    4338:	60 93 6f 03 	sts	0x036F, r22
  c = ((c+(b>>1))^a);
    433c:	66 95       	lsr	r22
    433e:	64 0f       	add	r22, r20
    4340:	62 27       	eor	r22, r18
    4342:	60 93 6c 03 	sts	0x036C, r22
  }
    4346:	08 95       	ret

00004348 <randRNG8()>:
//
uint8_t randRNG8() // Originally unsigned char randomize().
  {
  x++;               //x is incremented every round and is not affected by any other variable
    4348:	80 91 6d 03 	lds	r24, 0x036D
    434c:	8f 5f       	subi	r24, 0xFF	; 255
    434e:	80 93 6d 03 	sts	0x036D, r24
  a = (a^c^x);       //note the mix of addition and XOR
    4352:	20 91 6c 03 	lds	r18, 0x036C
    4356:	90 91 6e 03 	lds	r25, 0x036E
    435a:	92 27       	eor	r25, r18
    435c:	98 27       	eor	r25, r24
    435e:	90 93 6e 03 	sts	0x036E, r25
  b = (b+a);         //And the use of very few instructions
    4362:	80 91 6f 03 	lds	r24, 0x036F
    4366:	89 0f       	add	r24, r25
    4368:	80 93 6f 03 	sts	0x036F, r24
  c = ((c+(b>>1))^a);  //the right shift is to ensure that high-order bits from b can affect  
    436c:	86 95       	lsr	r24
    436e:	82 0f       	add	r24, r18
    4370:	89 27       	eor	r24, r25
    4372:	80 93 6c 03 	sts	0x036C, r24
  return(c);         //low order bits of other variables
  }
    4376:	08 95       	ret

00004378 <global constructors keyed to _Z8seedRNG8hhh>:
uint8_t randRNG8(); // Originally called 'randomize()'.
// RNG8 working state.
static uint8_t a, b, c;
// DHD20130603: avoid the hidden counter always starting at zero c/o some per-build state.
// Derived from linker-driven pointer base plus hash of compilation timestamp, with little run-time cost.
static uint8_t x = (uint8_t)(intptr_t) ((&c) + (uint8_t)((__TIME__[7] * 17) ^ (__TIME__[6]) ^ (__TIME__[4] << 11)));
    4378:	83 e1       	ldi	r24, 0x13	; 19
    437a:	94 e0       	ldi	r25, 0x04	; 4
    437c:	80 93 6d 03 	sts	0x036D, r24
  x++;               //x is incremented every round and is not affected by any other variable
  a = (a^c^x);       //note the mix of addition and XOR
  b = (b+a);         //And the use of very few instructions
  c = ((c+(b>>1))^a);  //the right shift is to ensure that high-order bits from b can affect  
  return(c);         //low order bits of other variables
  }
    4380:	08 95       	ret

00004382 <RFM22RXFIFO(unsigned char*, unsigned char)>:


// Put RFM22 into standby, attempt to read specified number of bytes from FIFO to buffer.
// Leaves RFM22 in low-power standby mode.
// Trailing bytes (more than were actually sent) undefined.
void RFM22RXFIFO(uint8_t *buf, const uint8_t bufSize)
    4382:	ff 92       	push	r15
    4384:	0f 93       	push	r16
    4386:	1f 93       	push	r17
    4388:	18 2f       	mov	r17, r24
    438a:	09 2f       	mov	r16, r25
    438c:	f6 2e       	mov	r15, r22
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    438e:	0e 94 4b 20 	call	0x4096	; 0x4096 <powerUpSPIIfDisabled()>
    4392:	48 2f       	mov	r20, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    4394:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4396:	87 e8       	ldi	r24, 0x87	; 135
    4398:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    439a:	0d b4       	in	r0, 0x2d	; 45
    439c:	07 fe       	sbrs	r0, 7
    439e:	fd cf       	rjmp	.-6      	; 0x439a <RFM22RXFIFO(unsigned char*, unsigned char)+0x18>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    43a0:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    43a2:	0d b4       	in	r0, 0x2d	; 45
    43a4:	07 fe       	sbrs	r0, 7
    43a6:	fd cf       	rjmp	.-6      	; 0x43a2 <RFM22RXFIFO(unsigned char*, unsigned char)+0x20>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    43a8:	2a 9a       	sbi	0x05, 2	; 5
  {
  const bool neededEnable = powerUpSPIIfDisabled();

  _RFM22ModeStandby();

  _RFM22_SELECT();
    43aa:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    43ac:	8f e7       	ldi	r24, 0x7F	; 127
    43ae:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    43b0:	0d b4       	in	r0, 0x2d	; 45
    43b2:	07 fe       	sbrs	r0, 7
    43b4:	fd cf       	rjmp	.-6      	; 0x43b0 <RFM22RXFIFO(unsigned char*, unsigned char)+0x2e>
  return(SPDR);
    43b6:	8e b5       	in	r24, 0x2e	; 46
    43b8:	81 2f       	mov	r24, r17
    43ba:	90 2f       	mov	r25, r16
    43bc:	9c 01       	movw	r18, r24
    43be:	f9 01       	movw	r30, r18
    43c0:	90 e0       	ldi	r25, 0x00	; 0
    43c2:	07 c0       	rjmp	.+14     	; 0x43d2 <RFM22RXFIFO(unsigned char*, unsigned char)+0x50>

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    43c4:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    43c6:	0d b4       	in	r0, 0x2d	; 45
    43c8:	07 fe       	sbrs	r0, 7
    43ca:	fd cf       	rjmp	.-6      	; 0x43c6 <RFM22RXFIFO(unsigned char*, unsigned char)+0x44>
  return(SPDR);
    43cc:	8e b5       	in	r24, 0x2e	; 46

  _RFM22_SELECT();
  _RFM22_io(RFM22REG_FIFO & 0x7F); // Start burst read from RX FIFO.
//  uint8_t val;
  for(uint8_t i = 0; i < bufSize; ++i)
    { buf[i] = _RFM22_io(0);  }
    43ce:	81 93       	st	Z+, r24
  _RFM22ModeStandby();

  _RFM22_SELECT();
  _RFM22_io(RFM22REG_FIFO & 0x7F); // Start burst read from RX FIFO.
//  uint8_t val;
  for(uint8_t i = 0; i < bufSize; ++i)
    43d0:	9f 5f       	subi	r25, 0xFF	; 255
    43d2:	9f 15       	cp	r25, r15
    43d4:	b8 f3       	brcs	.-18     	; 0x43c4 <RFM22RXFIFO(unsigned char*, unsigned char)+0x42>
    { buf[i] = _RFM22_io(0);  }
  _RFM22_DESELECT();
    43d6:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    43d8:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    43da:	88 e8       	ldi	r24, 0x88	; 136
    43dc:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    43de:	0d b4       	in	r0, 0x2d	; 45
    43e0:	07 fe       	sbrs	r0, 7
    43e2:	fd cf       	rjmp	.-6      	; 0x43de <RFM22RXFIFO(unsigned char*, unsigned char)+0x5c>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    43e4:	83 e0       	ldi	r24, 0x03	; 3
    43e6:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    43e8:	0d b4       	in	r0, 0x2d	; 45
    43ea:	07 fe       	sbrs	r0, 7
    43ec:	fd cf       	rjmp	.-6      	; 0x43e8 <RFM22RXFIFO(unsigned char*, unsigned char)+0x66>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    43ee:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    43f0:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    43f2:	88 e8       	ldi	r24, 0x88	; 136
    43f4:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    43f6:	0d b4       	in	r0, 0x2d	; 45
    43f8:	07 fe       	sbrs	r0, 7
    43fa:	fd cf       	rjmp	.-6      	; 0x43f6 <RFM22RXFIFO(unsigned char*, unsigned char)+0x74>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    43fc:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    43fe:	0d b4       	in	r0, 0x2d	; 45
    4400:	07 fe       	sbrs	r0, 7
    4402:	fd cf       	rjmp	.-6      	; 0x43fe <RFM22RXFIFO(unsigned char*, unsigned char)+0x7c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    4404:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    4406:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4408:	85 e8       	ldi	r24, 0x85	; 133
    440a:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    440c:	0d b4       	in	r0, 0x2d	; 45
    440e:	07 fe       	sbrs	r0, 7
    4410:	fd cf       	rjmp	.-6      	; 0x440c <RFM22RXFIFO(unsigned char*, unsigned char)+0x8a>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4412:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4414:	0d b4       	in	r0, 0x2d	; 45
    4416:	07 fe       	sbrs	r0, 7
    4418:	fd cf       	rjmp	.-6      	; 0x4414 <RFM22RXFIFO(unsigned char*, unsigned char)+0x92>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    441a:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    441c:	0d b4       	in	r0, 0x2d	; 45
    441e:	07 fe       	sbrs	r0, 7
    4420:	fd cf       	rjmp	.-6      	; 0x441c <RFM22RXFIFO(unsigned char*, unsigned char)+0x9a>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    4422:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    4424:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4426:	83 e8       	ldi	r24, 0x83	; 131
    4428:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    442a:	0d b4       	in	r0, 0x2d	; 45
    442c:	07 fe       	sbrs	r0, 7
    442e:	fd cf       	rjmp	.-6      	; 0x442a <RFM22RXFIFO(unsigned char*, unsigned char)+0xa8>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4430:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4432:	0d b4       	in	r0, 0x2d	; 45
    4434:	07 fe       	sbrs	r0, 7
    4436:	fd cf       	rjmp	.-6      	; 0x4432 <RFM22RXFIFO(unsigned char*, unsigned char)+0xb0>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4438:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    443a:	0d b4       	in	r0, 0x2d	; 45
    443c:	07 fe       	sbrs	r0, 7
    443e:	fd cf       	rjmp	.-6      	; 0x443a <RFM22RXFIFO(unsigned char*, unsigned char)+0xb8>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    4440:	2a 9a       	sbi	0x05, 2	; 5
  _RFM22WriteReg16Bit0(RFM22REG_INT_ENABLE1);
  // Clear any interrupts already/still pending...
  _RFM22ClearInterrupts();  
  //_RFM22WriteReg8Bit(0xd, 0x1f); // Drive GPIO2 to ground as output... (Move to general register settings.)

  if(neededEnable) { powerDownSPI(); }
    4442:	44 23       	and	r20, r20
    4444:	11 f0       	breq	.+4      	; 0x444a <RFM22RXFIFO(unsigned char*, unsigned char)+0xc8>
    4446:	0e 94 31 20 	call	0x4062	; 0x4062 <powerDownSPI()>
  }
    444a:	1f 91       	pop	r17
    444c:	0f 91       	pop	r16
    444e:	ff 90       	pop	r15
    4450:	08 95       	ret

00004452 <RFM22SetUpRX(unsigned char, bool, bool)>:
  _RFM22_DESELECT();
  if(neededEnable) { powerDownSPI(); }
  }

// Put RFM22 into RX mode with given RX FIFO 'nearly-full' threshold and optional interrupts enabled.
void RFM22SetUpRX(const uint8_t nearlyFullThreshold, const bool syncInt, const bool dataInt)
    4452:	ff 92       	push	r15
    4454:	0f 93       	push	r16
    4456:	1f 93       	push	r17
    4458:	18 2f       	mov	r17, r24
    445a:	f6 2e       	mov	r15, r22
    445c:	04 2f       	mov	r16, r20
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    445e:	0e 94 4b 20 	call	0x4096	; 0x4096 <powerUpSPIIfDisabled()>
    4462:	28 2f       	mov	r18, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    4464:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4466:	88 e8       	ldi	r24, 0x88	; 136
    4468:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    446a:	0d b4       	in	r0, 0x2d	; 45
    446c:	07 fe       	sbrs	r0, 7
    446e:	fd cf       	rjmp	.-6      	; 0x446a <RFM22SetUpRX(unsigned char, bool, bool)+0x18>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4470:	83 e0       	ldi	r24, 0x03	; 3
    4472:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4474:	0d b4       	in	r0, 0x2d	; 45
    4476:	07 fe       	sbrs	r0, 7
    4478:	fd cf       	rjmp	.-6      	; 0x4474 <RFM22SetUpRX(unsigned char, bool, bool)+0x22>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    447a:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    447c:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    447e:	88 e8       	ldi	r24, 0x88	; 136
    4480:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4482:	0d b4       	in	r0, 0x2d	; 45
    4484:	07 fe       	sbrs	r0, 7
    4486:	fd cf       	rjmp	.-6      	; 0x4482 <RFM22SetUpRX(unsigned char, bool, bool)+0x30>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4488:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    448a:	0d b4       	in	r0, 0x2d	; 45
    448c:	07 fe       	sbrs	r0, 7
    448e:	fd cf       	rjmp	.-6      	; 0x448a <RFM22SetUpRX(unsigned char, bool, bool)+0x38>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    4490:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    4492:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4494:	8e ef       	ldi	r24, 0xFE	; 254
    4496:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4498:	0d b4       	in	r0, 0x2d	; 45
    449a:	07 fe       	sbrs	r0, 7
    449c:	fd cf       	rjmp	.-6      	; 0x4498 <RFM22SetUpRX(unsigned char, bool, bool)+0x46>
  // Clear RX and TX FIFOs.
  _RFM22WriteReg8Bit(RFM22REG_OP_CTRL2, 3); // FFCLRTX | FFCLRTX
  _RFM22WriteReg8Bit(RFM22REG_OP_CTRL2, 0);

  // Set FIFO RX almost-full threshold as specified.
  _RFM22WriteReg8Bit(RFM22REG_RX_FIFO_CTRL, min(nearlyFullThreshold, 63));
    449e:	81 2f       	mov	r24, r17
    44a0:	10 34       	cpi	r17, 0x40	; 64
    44a2:	08 f0       	brcs	.+2      	; 0x44a6 <RFM22SetUpRX(unsigned char, bool, bool)+0x54>
    44a4:	8f e3       	ldi	r24, 0x3F	; 63

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    44a6:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    44a8:	0d b4       	in	r0, 0x2d	; 45
    44aa:	07 fe       	sbrs	r0, 7
    44ac:	fd cf       	rjmp	.-6      	; 0x44a8 <RFM22SetUpRX(unsigned char, bool, bool)+0x56>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    44ae:	2a 9a       	sbi	0x05, 2	; 5

  // Set FIFO RX almost-full threshold as specified.
  _RFM22WriteReg8Bit(RFM22REG_RX_FIFO_CTRL, min(nearlyFullThreshold, 63));

  // Enable requested RX-related interrupts.
  _RFM22WriteReg8Bit(RFM22REG_INT_ENABLE1, (dataInt?0x10:0)); // enrxffafull: Enable RX FIFO Almost Full.
    44b0:	00 23       	and	r16, r16
    44b2:	11 f4       	brne	.+4      	; 0x44b8 <RFM22SetUpRX(unsigned char, bool, bool)+0x66>
    44b4:	90 e0       	ldi	r25, 0x00	; 0
    44b6:	01 c0       	rjmp	.+2      	; 0x44ba <RFM22SetUpRX(unsigned char, bool, bool)+0x68>
    44b8:	90 e1       	ldi	r25, 0x10	; 16

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    44ba:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    44bc:	85 e8       	ldi	r24, 0x85	; 133
    44be:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    44c0:	0d b4       	in	r0, 0x2d	; 45
    44c2:	07 fe       	sbrs	r0, 7
    44c4:	fd cf       	rjmp	.-6      	; 0x44c0 <RFM22SetUpRX(unsigned char, bool, bool)+0x6e>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    44c6:	9e bd       	out	0x2e, r25	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    44c8:	0d b4       	in	r0, 0x2d	; 45
    44ca:	07 fe       	sbrs	r0, 7
    44cc:	fd cf       	rjmp	.-6      	; 0x44c8 <RFM22SetUpRX(unsigned char, bool, bool)+0x76>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    44ce:	2a 9a       	sbi	0x05, 2	; 5
  // Set FIFO RX almost-full threshold as specified.
  _RFM22WriteReg8Bit(RFM22REG_RX_FIFO_CTRL, min(nearlyFullThreshold, 63));

  // Enable requested RX-related interrupts.
  _RFM22WriteReg8Bit(RFM22REG_INT_ENABLE1, (dataInt?0x10:0)); // enrxffafull: Enable RX FIFO Almost Full.
  _RFM22WriteReg8Bit(RFM22REG_INT_ENABLE2, (syncInt?0x80:0)); // enswdet: Enable Sync Word Detected.
    44d0:	ff 20       	and	r15, r15
    44d2:	11 f4       	brne	.+4      	; 0x44d8 <RFM22SetUpRX(unsigned char, bool, bool)+0x86>
    44d4:	90 e0       	ldi	r25, 0x00	; 0
    44d6:	01 c0       	rjmp	.+2      	; 0x44da <RFM22SetUpRX(unsigned char, bool, bool)+0x88>
    44d8:	90 e8       	ldi	r25, 0x80	; 128

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    44da:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    44dc:	86 e8       	ldi	r24, 0x86	; 134
    44de:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    44e0:	0d b4       	in	r0, 0x2d	; 45
    44e2:	07 fe       	sbrs	r0, 7
    44e4:	fd cf       	rjmp	.-6      	; 0x44e0 <RFM22SetUpRX(unsigned char, bool, bool)+0x8e>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    44e6:	9e bd       	out	0x2e, r25	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    44e8:	0d b4       	in	r0, 0x2d	; 45
    44ea:	07 fe       	sbrs	r0, 7
    44ec:	fd cf       	rjmp	.-6      	; 0x44e8 <RFM22SetUpRX(unsigned char, bool, bool)+0x96>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    44ee:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    44f0:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    44f2:	83 e8       	ldi	r24, 0x83	; 131
    44f4:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    44f6:	0d b4       	in	r0, 0x2d	; 45
    44f8:	07 fe       	sbrs	r0, 7
    44fa:	fd cf       	rjmp	.-6      	; 0x44f6 <RFM22SetUpRX(unsigned char, bool, bool)+0xa4>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    44fc:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    44fe:	0d b4       	in	r0, 0x2d	; 45
    4500:	07 fe       	sbrs	r0, 7
    4502:	fd cf       	rjmp	.-6      	; 0x44fe <RFM22SetUpRX(unsigned char, bool, bool)+0xac>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4504:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4506:	0d b4       	in	r0, 0x2d	; 45
    4508:	07 fe       	sbrs	r0, 7
    450a:	fd cf       	rjmp	.-6      	; 0x4506 <RFM22SetUpRX(unsigned char, bool, bool)+0xb4>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    450c:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    450e:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4510:	87 e8       	ldi	r24, 0x87	; 135
    4512:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4514:	0d b4       	in	r0, 0x2d	; 45
    4516:	07 fe       	sbrs	r0, 7
    4518:	fd cf       	rjmp	.-6      	; 0x4514 <RFM22SetUpRX(unsigned char, bool, bool)+0xc2>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    451a:	85 e0       	ldi	r24, 0x05	; 5
    451c:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    451e:	0d b4       	in	r0, 0x2d	; 45
    4520:	07 fe       	sbrs	r0, 7
    4522:	fd cf       	rjmp	.-6      	; 0x451e <RFM22SetUpRX(unsigned char, bool, bool)+0xcc>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    4524:	2a 9a       	sbi	0x05, 2	; 5
  _RFM22ClearInterrupts();

  // Start listening.
  _RFM22ModeRX();
  
  if(neededEnable) { powerDownSPI(); }
    4526:	22 23       	and	r18, r18
    4528:	11 f0       	breq	.+4      	; 0x452e <RFM22SetUpRX(unsigned char, bool, bool)+0xdc>
    452a:	0e 94 31 20 	call	0x4062	; 0x4062 <powerDownSPI()>
  }
    452e:	1f 91       	pop	r17
    4530:	0f 91       	pop	r16
    4532:	ff 90       	pop	r15
    4534:	08 95       	ret

00004536 <RFM22QueueCmdToFF(unsigned char*)>:

// Clears the RFM22 TX FIFO and queues up ready to send via the TXFIFO the 0xff-terminated bytes starting at bptr.
// This routine does not change the command area.
// This uses an efficient burst write.
// For DEBUG can abort after (over-)filling the 64-byte FIFO at no extra cost with a check before spinning waiting for SPI byte to be sent.
void RFM22QueueCmdToFF(uint8_t *bptr)
    4536:	cf 93       	push	r28
    4538:	df 93       	push	r29
    453a:	ec 01       	movw	r28, r24
  {
#if 0 && defined(DEBUG)
  if(0 == *bptr) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22QueueCmdToFF: buffer uninitialised"); panic(); } 
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
    453c:	0e 94 4b 20 	call	0x4096	; 0x4096 <powerUpSPIIfDisabled()>
    4540:	98 2f       	mov	r25, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    4542:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4544:	88 e8       	ldi	r24, 0x88	; 136
    4546:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4548:	0d b4       	in	r0, 0x2d	; 45
    454a:	07 fe       	sbrs	r0, 7
    454c:	fd cf       	rjmp	.-6      	; 0x4548 <RFM22QueueCmdToFF(unsigned char*)+0x12>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    454e:	81 e0       	ldi	r24, 0x01	; 1
    4550:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4552:	0d b4       	in	r0, 0x2d	; 45
    4554:	07 fe       	sbrs	r0, 7
    4556:	fd cf       	rjmp	.-6      	; 0x4552 <RFM22QueueCmdToFF(unsigned char*)+0x1c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    4558:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    455a:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    455c:	88 e8       	ldi	r24, 0x88	; 136
    455e:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4560:	0d b4       	in	r0, 0x2d	; 45
    4562:	07 fe       	sbrs	r0, 7
    4564:	fd cf       	rjmp	.-6      	; 0x4560 <RFM22QueueCmdToFF(unsigned char*)+0x2a>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4566:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4568:	0d b4       	in	r0, 0x2d	; 45
    456a:	07 fe       	sbrs	r0, 7
    456c:	fd cf       	rjmp	.-6      	; 0x4568 <RFM22QueueCmdToFF(unsigned char*)+0x32>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    456e:	2a 9a       	sbi	0x05, 2	; 5
  if(0 == *bptr) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22QueueCmdToFF: buffer uninitialised"); panic(); } 
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
  // Clear the TX FIFO.
  _RFM22ClearTXFIFO();
  _RFM22_SELECT();
    4570:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4572:	8f ef       	ldi	r24, 0xFF	; 255
    4574:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4576:	0d b4       	in	r0, 0x2d	; 45
    4578:	07 fe       	sbrs	r0, 7
    457a:	fd cf       	rjmp	.-6      	; 0x4576 <RFM22QueueCmdToFF(unsigned char*)+0x40>
    457c:	04 c0       	rjmp	.+8      	; 0x4586 <RFM22QueueCmdToFF(unsigned char*)+0x50>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    457e:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4580:	0d b4       	in	r0, 0x2d	; 45
    4582:	07 fe       	sbrs	r0, 7
    4584:	fd cf       	rjmp	.-6      	; 0x4580 <RFM22QueueCmdToFF(unsigned char*)+0x4a>
    SPDR = val;
    if(--i < 0) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22QueueCmdToFF: buffer unterminated"); panic(); }
    while (!(SPSR & _BV(SPIF))) { }
    }
#else
  while((uint8_t)0xff != (val = *bptr++)) { _RFM22_wr(val); }
    4586:	89 91       	ld	r24, Y+
    4588:	8f 3f       	cpi	r24, 0xFF	; 255
    458a:	c9 f7       	brne	.-14     	; 0x457e <RFM22QueueCmdToFF(unsigned char*)+0x48>
#endif
  _RFM22_DESELECT();
    458c:	2a 9a       	sbi	0x05, 2	; 5
  if(neededEnable) { powerDownSPI(); }
    458e:	99 23       	and	r25, r25
    4590:	11 f0       	breq	.+4      	; 0x4596 <RFM22QueueCmdToFF(unsigned char*)+0x60>
    4592:	0e 94 31 20 	call	0x4062	; 0x4062 <powerDownSPI()>
  }
    4596:	df 91       	pop	r29
    4598:	cf 91       	pop	r28
    459a:	08 95       	ret

0000459c <RFM22RegisterBlockSetup(unsigned char const (*) [2])>:


// Configure the radio from a list of register/value pairs in readonly PROGMEM/Flash, terminating with an 0xff register value.
// NOTE: argument is not a pointer into SRAM, it is into PROGMEM!
// Could optimise case where multiple values are for successive RFM22 registers by using burst write.
void RFM22RegisterBlockSetup(const uint8_t registerValues[][2])
    459c:	cf 93       	push	r28
    459e:	df 93       	push	r29
    45a0:	ec 01       	movw	r28, r24
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    45a2:	0e 94 4b 20 	call	0x4096	; 0x4096 <powerUpSPIIfDisabled()>
  for( ; ; )
    {
    const uint8_t reg = pgm_read_byte(&(registerValues[0][0]));
    45a6:	fe 01       	movw	r30, r28
    45a8:	94 91       	lpm	r25, Z+
    const uint8_t val = pgm_read_byte(&(registerValues[0][1]));
    45aa:	21 96       	adiw	r28, 0x01	; 1
    45ac:	fe 01       	movw	r30, r28
    45ae:	24 91       	lpm	r18, Z+
    45b0:	21 97       	sbiw	r28, 0x01	; 1
    if(0xff == reg) { break; }
    45b2:	9f 3f       	cpi	r25, 0xFF	; 255
    45b4:	69 f0       	breq	.+26     	; 0x45d0 <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x34>

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    45b6:	2a 98       	cbi	0x05, 2	; 5
  _RFM22_wr(addr | 0x80); // Force to write.
    45b8:	90 68       	ori	r25, 0x80	; 128

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    45ba:	9e bd       	out	0x2e, r25	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    45bc:	0d b4       	in	r0, 0x2d	; 45
    45be:	07 fe       	sbrs	r0, 7
    45c0:	fd cf       	rjmp	.-6      	; 0x45bc <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x20>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    45c2:	2e bd       	out	0x2e, r18	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    45c4:	0d b4       	in	r0, 0x2d	; 45
    45c6:	07 fe       	sbrs	r0, 7
    45c8:	fd cf       	rjmp	.-6      	; 0x45c4 <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x28>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    45ca:	2a 9a       	sbi	0x05, 2	; 5
    DEBUG_SERIAL_PRINT_FLASHSTRING(" = 0x");
    DEBUG_SERIAL_PRINTFMT(val, HEX);
    DEBUG_SERIAL_PRINTLN();
#endif
    _RFM22WriteReg8Bit(reg, val);
    ++registerValues;
    45cc:	22 96       	adiw	r28, 0x02	; 2
    45ce:	eb cf       	rjmp	.-42     	; 0x45a6 <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0xa>
    }
  if(neededEnable) { powerDownSPI(); }
    45d0:	88 23       	and	r24, r24
    45d2:	11 f0       	breq	.+4      	; 0x45d8 <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x3c>
    45d4:	0e 94 31 20 	call	0x4062	; 0x4062 <powerDownSPI()>
  }
    45d8:	df 91       	pop	r29
    45da:	cf 91       	pop	r28
    45dc:	08 95       	ret

000045de <RFM22PowerOnInit()>:
void RFM22PowerOnInit()
  {
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22 reset...");
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
    45de:	0e 94 4b 20 	call	0x4096	; 0x4096 <powerUpSPIIfDisabled()>
    45e2:	98 2f       	mov	r25, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    45e4:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    45e6:	87 e8       	ldi	r24, 0x87	; 135
    45e8:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    45ea:	0d b4       	in	r0, 0x2d	; 45
    45ec:	07 fe       	sbrs	r0, 7
    45ee:	fd cf       	rjmp	.-6      	; 0x45ea <RFM22PowerOnInit()+0xc>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    45f0:	80 e8       	ldi	r24, 0x80	; 128
    45f2:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    45f4:	0d b4       	in	r0, 0x2d	; 45
    45f6:	07 fe       	sbrs	r0, 7
    45f8:	fd cf       	rjmp	.-6      	; 0x45f4 <RFM22PowerOnInit()+0x16>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    45fa:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    45fc:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    45fe:	87 e8       	ldi	r24, 0x87	; 135
    4600:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4602:	0d b4       	in	r0, 0x2d	; 45
    4604:	07 fe       	sbrs	r0, 7
    4606:	fd cf       	rjmp	.-6      	; 0x4602 <RFM22PowerOnInit()+0x24>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4608:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    460a:	0d b4       	in	r0, 0x2d	; 45
    460c:	07 fe       	sbrs	r0, 7
    460e:	fd cf       	rjmp	.-6      	; 0x460a <RFM22PowerOnInit()+0x2c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    4610:	2a 9a       	sbi	0x05, 2	; 5
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22 reset...");
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
  _RFM22WriteReg8Bit(RFM22REG_OP_CTRL1, RFM22REG_OP_CTRL1_SWRES);
  _RFM22ModeStandby();
  if(neededEnable) { powerDownSPI(); }
    4612:	99 23       	and	r25, r25
    4614:	11 f0       	breq	.+4      	; 0x461a <RFM22PowerOnInit()+0x3c>
    4616:	0e 94 31 20 	call	0x4062	; 0x4062 <powerDownSPI()>
    461a:	08 95       	ret

0000461c <RFM22RSSI()>:
  return(result);
  }

// Get current RSSI.
// Only valid when in RX mode.
uint8_t RFM22RSSI() 
    461c:	1f 93       	push	r17
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    461e:	0e 94 4b 20 	call	0x4096	; 0x4096 <powerUpSPIIfDisabled()>
    4622:	98 2f       	mov	r25, r24

// Read from 8-bit register on RFM22.
// SPI must already be configured and running.
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
    4624:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    4626:	86 e2       	ldi	r24, 0x26	; 38
    4628:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    462a:	0d b4       	in	r0, 0x2d	; 45
    462c:	07 fe       	sbrs	r0, 7
    462e:	fd cf       	rjmp	.-6      	; 0x462a <RFM22RSSI()+0xe>
  return(SPDR);
    4630:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    4632:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4634:	0d b4       	in	r0, 0x2d	; 45
    4636:	07 fe       	sbrs	r0, 7
    4638:	fd cf       	rjmp	.-6      	; 0x4634 <RFM22RSSI()+0x18>
  return(SPDR);
    463a:	1e b5       	in	r17, 0x2e	; 46
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  const uint8_t result = _RFM22_io(0); // Dummy value...
  _RFM22_DESELECT();
    463c:	2a 9a       	sbi	0x05, 2	; 5
// Only valid when in RX mode.
uint8_t RFM22RSSI() 
  {
  const bool neededEnable = powerUpSPIIfDisabled();
  const uint8_t rssi = _RFM22ReadReg8Bit(RFM22REG_RSSI);
  if(neededEnable) { powerDownSPI(); }
    463e:	99 23       	and	r25, r25
    4640:	11 f0       	breq	.+4      	; 0x4646 <RFM22RSSI()+0x2a>
    4642:	0e 94 31 20 	call	0x4062	; 0x4062 <powerDownSPI()>
  return(rssi);
  }
    4646:	81 2f       	mov	r24, r17
    4648:	1f 91       	pop	r17
    464a:	08 95       	ret

0000464c <RFM22ReadStatusBoth()>:
  }

// Read status (both registers) and clear interrupts.
// Status register 1 is returned in the top 8 bits, register 2 in the bottom 8 bits.
// Zero indicates no pending interrupts or other status flags set.
uint16_t RFM22ReadStatusBoth()
    464c:	0f 93       	push	r16
    464e:	1f 93       	push	r17
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    4650:	0e 94 4b 20 	call	0x4096	; 0x4096 <powerUpSPIIfDisabled()>
    4654:	98 2f       	mov	r25, r24

// Read from 16-bit big-endian register pair.
// The result has the first (lower-numbered) register in the most significant byte.
static uint16_t _RFM22ReadReg16Bit(const uint8_t addr)
{
  _RFM22_SELECT();
    4656:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    4658:	83 e0       	ldi	r24, 0x03	; 3
    465a:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    465c:	0d b4       	in	r0, 0x2d	; 45
    465e:	07 fe       	sbrs	r0, 7
    4660:	fd cf       	rjmp	.-6      	; 0x465c <RFM22ReadStatusBoth()+0x10>
  return(SPDR);
    4662:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    4664:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4666:	0d b4       	in	r0, 0x2d	; 45
    4668:	07 fe       	sbrs	r0, 7
    466a:	fd cf       	rjmp	.-6      	; 0x4666 <RFM22ReadStatusBoth()+0x1a>
  return(SPDR);
    466c:	0e b5       	in	r16, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    466e:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4670:	0d b4       	in	r0, 0x2d	; 45
    4672:	07 fe       	sbrs	r0, 7
    4674:	fd cf       	rjmp	.-6      	; 0x4670 <RFM22ReadStatusBoth()+0x24>
  return(SPDR);
    4676:	1e b5       	in	r17, 0x2e	; 46
{
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  uint16_t result = ((uint16_t)_RFM22_io(0)) << 8;
  result |= ((uint16_t)_RFM22_io(0));
  _RFM22_DESELECT();
    4678:	2a 9a       	sbi	0x05, 2	; 5
// Zero indicates no pending interrupts or other status flags set.
uint16_t RFM22ReadStatusBoth()
  {
  const bool neededEnable = powerUpSPIIfDisabled();
  const uint16_t result = _RFM22ReadReg16Bit(RFM22REG_INT_STATUS1);
  if(neededEnable) { powerDownSPI(); }
    467a:	99 23       	and	r25, r25
    467c:	11 f0       	breq	.+4      	; 0x4682 <RFM22ReadStatusBoth()+0x36>
    467e:	0e 94 31 20 	call	0x4062	; 0x4062 <powerDownSPI()>
    4682:	90 2f       	mov	r25, r16
    4684:	80 e0       	ldi	r24, 0x00	; 0
    4686:	21 2f       	mov	r18, r17
    4688:	30 e0       	ldi	r19, 0x00	; 0
    468a:	28 2b       	or	r18, r24
    468c:	39 2b       	or	r19, r25
  return(result);
  }
    468e:	c9 01       	movw	r24, r18
    4690:	1f 91       	pop	r17
    4692:	0f 91       	pop	r16
    4694:	08 95       	ret

00004696 <RFM22ModeStandbyAndClearState()>:
// Enter standby mode (consume least possible power but retain register contents).
// FIFO state and pending interrupts are cleared.
// Typical consumption in standby 450nA (cf 15nA when shut down, 8.5mA TUNE, 18--80mA RX/TX).
void RFM22ModeStandbyAndClearState()
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    4696:	0e 94 4b 20 	call	0x4096	; 0x4096 <powerUpSPIIfDisabled()>
    469a:	98 2f       	mov	r25, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    469c:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    469e:	87 e8       	ldi	r24, 0x87	; 135
    46a0:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    46a2:	0d b4       	in	r0, 0x2d	; 45
    46a4:	07 fe       	sbrs	r0, 7
    46a6:	fd cf       	rjmp	.-6      	; 0x46a2 <RFM22ModeStandbyAndClearState()+0xc>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    46a8:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    46aa:	0d b4       	in	r0, 0x2d	; 45
    46ac:	07 fe       	sbrs	r0, 7
    46ae:	fd cf       	rjmp	.-6      	; 0x46aa <RFM22ModeStandbyAndClearState()+0x14>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    46b0:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    46b2:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    46b4:	88 e8       	ldi	r24, 0x88	; 136
    46b6:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    46b8:	0d b4       	in	r0, 0x2d	; 45
    46ba:	07 fe       	sbrs	r0, 7
    46bc:	fd cf       	rjmp	.-6      	; 0x46b8 <RFM22ModeStandbyAndClearState()+0x22>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    46be:	83 e0       	ldi	r24, 0x03	; 3
    46c0:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    46c2:	0d b4       	in	r0, 0x2d	; 45
    46c4:	07 fe       	sbrs	r0, 7
    46c6:	fd cf       	rjmp	.-6      	; 0x46c2 <RFM22ModeStandbyAndClearState()+0x2c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    46c8:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    46ca:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    46cc:	88 e8       	ldi	r24, 0x88	; 136
    46ce:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    46d0:	0d b4       	in	r0, 0x2d	; 45
    46d2:	07 fe       	sbrs	r0, 7
    46d4:	fd cf       	rjmp	.-6      	; 0x46d0 <RFM22ModeStandbyAndClearState()+0x3a>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    46d6:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    46d8:	0d b4       	in	r0, 0x2d	; 45
    46da:	07 fe       	sbrs	r0, 7
    46dc:	fd cf       	rjmp	.-6      	; 0x46d8 <RFM22ModeStandbyAndClearState()+0x42>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    46de:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    46e0:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    46e2:	85 e8       	ldi	r24, 0x85	; 133
    46e4:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    46e6:	0d b4       	in	r0, 0x2d	; 45
    46e8:	07 fe       	sbrs	r0, 7
    46ea:	fd cf       	rjmp	.-6      	; 0x46e6 <RFM22ModeStandbyAndClearState()+0x50>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    46ec:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    46ee:	0d b4       	in	r0, 0x2d	; 45
    46f0:	07 fe       	sbrs	r0, 7
    46f2:	fd cf       	rjmp	.-6      	; 0x46ee <RFM22ModeStandbyAndClearState()+0x58>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    46f4:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    46f6:	0d b4       	in	r0, 0x2d	; 45
    46f8:	07 fe       	sbrs	r0, 7
    46fa:	fd cf       	rjmp	.-6      	; 0x46f6 <RFM22ModeStandbyAndClearState()+0x60>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    46fc:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    46fe:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4700:	83 e8       	ldi	r24, 0x83	; 131
    4702:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4704:	0d b4       	in	r0, 0x2d	; 45
    4706:	07 fe       	sbrs	r0, 7
    4708:	fd cf       	rjmp	.-6      	; 0x4704 <RFM22ModeStandbyAndClearState()+0x6e>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    470a:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    470c:	0d b4       	in	r0, 0x2d	; 45
    470e:	07 fe       	sbrs	r0, 7
    4710:	fd cf       	rjmp	.-6      	; 0x470c <RFM22ModeStandbyAndClearState()+0x76>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4712:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4714:	0d b4       	in	r0, 0x2d	; 45
    4716:	07 fe       	sbrs	r0, 7
    4718:	fd cf       	rjmp	.-6      	; 0x4714 <RFM22ModeStandbyAndClearState()+0x7e>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    471a:	2a 9a       	sbi	0x05, 2	; 5
//  _RFM22WriteReg8Bit(RFM22REG_INT_ENABLE2, 0); // TODO: combine in burst write with previous...
  _RFM22WriteReg16Bit0(RFM22REG_INT_ENABLE1);
  // Clear any interrupts already/still pending...
  _RFM22ClearInterrupts();  
  //_RFM22WriteReg8Bit(0xd, 0x1f); // Drive GPIO2 to ground as output... (Move to general register settings.)
  if(neededEnable) { powerDownSPI(); }
    471c:	99 23       	and	r25, r25
    471e:	11 f0       	breq	.+4      	; 0x4724 <RFM22ModeStandbyAndClearState()+0x8e>
    4720:	0e 94 31 20 	call	0x4062	; 0x4062 <powerDownSPI()>
    4724:	08 95       	ret

00004726 <RFM22TXFIFO()>:

// Transmit contents of on-chip TX FIFO: caller should revert to low-power standby mode (etc) if required.
// Returns true if packet apparently sent correctly/fully.
// Does not clear TX FIFO (so possible to re-send immediately).
// Note: Reliability possibly helped by early move to 'tune' mode to work other than with default (4MHz) lowish PICAXE clock speeds.
bool RFM22TXFIFO()
    4726:	ff 92       	push	r15
    4728:	0f 93       	push	r16
    472a:	1f 93       	push	r17
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    472c:	0e 94 4b 20 	call	0x4096	; 0x4096 <powerUpSPIIfDisabled()>
    4730:	f8 2e       	mov	r15, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    4732:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4734:	85 e8       	ldi	r24, 0x85	; 133
    4736:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4738:	0d b4       	in	r0, 0x2d	; 45
    473a:	07 fe       	sbrs	r0, 7
    473c:	fd cf       	rjmp	.-6      	; 0x4738 <RFM22TXFIFO()+0x12>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    473e:	84 e0       	ldi	r24, 0x04	; 4
    4740:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4742:	0d b4       	in	r0, 0x2d	; 45
    4744:	07 fe       	sbrs	r0, 7
    4746:	fd cf       	rjmp	.-6      	; 0x4742 <RFM22TXFIFO()+0x1c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    4748:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    474a:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    474c:	86 e8       	ldi	r24, 0x86	; 134
    474e:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4750:	0d b4       	in	r0, 0x2d	; 45
    4752:	07 fe       	sbrs	r0, 7
    4754:	fd cf       	rjmp	.-6      	; 0x4750 <RFM22TXFIFO()+0x2a>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4756:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4758:	0d b4       	in	r0, 0x2d	; 45
    475a:	07 fe       	sbrs	r0, 7
    475c:	fd cf       	rjmp	.-6      	; 0x4758 <RFM22TXFIFO()+0x32>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    475e:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    4760:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4762:	83 e8       	ldi	r24, 0x83	; 131
    4764:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4766:	0d b4       	in	r0, 0x2d	; 45
    4768:	07 fe       	sbrs	r0, 7
    476a:	fd cf       	rjmp	.-6      	; 0x4766 <RFM22TXFIFO()+0x40>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    476c:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    476e:	0d b4       	in	r0, 0x2d	; 45
    4770:	07 fe       	sbrs	r0, 7
    4772:	fd cf       	rjmp	.-6      	; 0x476e <RFM22TXFIFO()+0x48>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4774:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4776:	0d b4       	in	r0, 0x2d	; 45
    4778:	07 fe       	sbrs	r0, 7
    477a:	fd cf       	rjmp	.-6      	; 0x4776 <RFM22TXFIFO()+0x50>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    477c:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    477e:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4780:	87 e8       	ldi	r24, 0x87	; 135
    4782:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4784:	0d b4       	in	r0, 0x2d	; 45
    4786:	07 fe       	sbrs	r0, 7
    4788:	fd cf       	rjmp	.-6      	; 0x4784 <RFM22TXFIFO()+0x5e>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    478a:	89 e0       	ldi	r24, 0x09	; 9
    478c:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    478e:	0d b4       	in	r0, 0x2d	; 45
    4790:	07 fe       	sbrs	r0, 7
    4792:	fd cf       	rjmp	.-6      	; 0x478e <RFM22TXFIFO()+0x68>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    4794:	2a 9a       	sbi	0x05, 2	; 5
    4796:	18 e0       	ldi	r17, 0x08	; 8

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    4798:	03 e0       	ldi	r16, 0x03	; 3
    479a:	13 c0       	rjmp	.+38     	; 0x47c2 <RFM22TXFIFO()+0x9c>
  // Repeately nap until packet sent, with upper bound of ~120ms on TX time in case there is a problem.
  // TX time is ~1.6ms per byte at 5000bps.
  bool result = false; // Usual case is success.
  for(int8_t i = 8; --i >= 0; )
    {
    nap(WDTO_15MS); // Sleep in low power mode for a short time waiting for bits to be sent...
    479c:	80 e0       	ldi	r24, 0x00	; 0
    479e:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <nap(signed char)>

// Read from 8-bit register on RFM22.
// SPI must already be configured and running.
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
    47a2:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    47a4:	0e bd       	out	0x2e, r16	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    47a6:	0d b4       	in	r0, 0x2d	; 45
    47a8:	07 fe       	sbrs	r0, 7
    47aa:	fd cf       	rjmp	.-6      	; 0x47a6 <RFM22TXFIFO()+0x80>
  return(SPDR);
    47ac:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    47ae:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    47b0:	0d b4       	in	r0, 0x2d	; 45
    47b2:	07 fe       	sbrs	r0, 7
    47b4:	fd cf       	rjmp	.-6      	; 0x47b0 <RFM22TXFIFO()+0x8a>
  return(SPDR);
    47b6:	8e b5       	in	r24, 0x2e	; 46
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  const uint8_t result = _RFM22_io(0); // Dummy value...
  _RFM22_DESELECT();
    47b8:	2a 9a       	sbi	0x05, 2	; 5
  bool result = false; // Usual case is success.
  for(int8_t i = 8; --i >= 0; )
    {
    nap(WDTO_15MS); // Sleep in low power mode for a short time waiting for bits to be sent...
    const uint8_t status = _RFM22ReadReg8Bit(RFM22REG_INT_STATUS1); // TODO: could use nIRQ instead if available.
    if(status & 4) { result = true; break; } // Packet sent!
    47ba:	82 ff       	sbrs	r24, 2
    47bc:	02 c0       	rjmp	.+4      	; 0x47c2 <RFM22TXFIFO()+0x9c>
    47be:	11 e0       	ldi	r17, 0x01	; 1
    47c0:	03 c0       	rjmp	.+6      	; 0x47c8 <RFM22TXFIFO()+0xa2>
  _RFM22ModeTX(); // Enable TX mode and transmit TX FIFO contents.

  // Repeately nap until packet sent, with upper bound of ~120ms on TX time in case there is a problem.
  // TX time is ~1.6ms per byte at 5000bps.
  bool result = false; // Usual case is success.
  for(int8_t i = 8; --i >= 0; )
    47c2:	11 50       	subi	r17, 0x01	; 1
    47c4:	58 f7       	brcc	.-42     	; 0x479c <RFM22TXFIFO()+0x76>
    47c6:	10 e0       	ldi	r17, 0x00	; 0
    nap(WDTO_15MS); // Sleep in low power mode for a short time waiting for bits to be sent...
    const uint8_t status = _RFM22ReadReg8Bit(RFM22REG_INT_STATUS1); // TODO: could use nIRQ instead if available.
    if(status & 4) { result = true; break; } // Packet sent!
    }

  if(neededEnable) { powerDownSPI(); }
    47c8:	ff 20       	and	r15, r15
    47ca:	11 f0       	breq	.+4      	; 0x47d0 <RFM22TXFIFO()+0xaa>
    47cc:	0e 94 31 20 	call	0x4062	; 0x4062 <powerDownSPI()>
  return(result);
  }
    47d0:	81 2f       	mov	r24, r17
    47d2:	1f 91       	pop	r17
    47d4:	0f 91       	pop	r16
    47d6:	ff 90       	pop	r15
    47d8:	08 95       	ret

000047da <RFM22CheckConnected()>:
  _RFM22ModeStandby();
  if(neededEnable) { powerDownSPI(); }
  }

// Returns true iff RFM22 (or RFM23) appears to be correctly connected.
bool RFM22CheckConnected()
    47da:	0f 93       	push	r16
    47dc:	1f 93       	push	r17
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    47de:	0e 94 4b 20 	call	0x4096	; 0x4096 <powerUpSPIIfDisabled()>
    47e2:	08 2f       	mov	r16, r24

// Read from 8-bit register on RFM22.
// SPI must already be configured and running.
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
    47e4:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    47e6:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    47e8:	0d b4       	in	r0, 0x2d	; 45
    47ea:	07 fe       	sbrs	r0, 7
    47ec:	fd cf       	rjmp	.-6      	; 0x47e8 <RFM22CheckConnected()+0xe>
  return(SPDR);
    47ee:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    47f0:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    47f2:	0d b4       	in	r0, 0x2d	; 45
    47f4:	07 fe       	sbrs	r0, 7
    47f6:	fd cf       	rjmp	.-6      	; 0x47f2 <RFM22CheckConnected()+0x18>
  return(SPDR);
    47f8:	8e b5       	in	r24, 0x2e	; 46
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  const uint8_t result = _RFM22_io(0); // Dummy value...
  _RFM22_DESELECT();
    47fa:	2a 9a       	sbi	0x05, 2	; 5
bool RFM22CheckConnected()
  {
  const bool neededEnable = powerUpSPIIfDisabled();
  bool isOK = false;
  const uint8_t rType = _RFM22ReadReg8Bit(0); // May read as 0 if not connected at all.
  if(RFM22_SUPPORTED_DEVICE_TYPE == rType)
    47fc:	88 30       	cpi	r24, 0x08	; 8
    47fe:	89 f4       	brne	.+34     	; 0x4822 <RFM22CheckConnected()+0x48>

// Read from 8-bit register on RFM22.
// SPI must already be configured and running.
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
    4800:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    4802:	81 e0       	ldi	r24, 0x01	; 1
    4804:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4806:	0d b4       	in	r0, 0x2d	; 45
    4808:	07 fe       	sbrs	r0, 7
    480a:	fd cf       	rjmp	.-6      	; 0x4806 <RFM22CheckConnected()+0x2c>
  return(SPDR);
    480c:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    480e:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4810:	0d b4       	in	r0, 0x2d	; 45
    4812:	07 fe       	sbrs	r0, 7
    4814:	fd cf       	rjmp	.-6      	; 0x4810 <RFM22CheckConnected()+0x36>
  return(SPDR);
    4816:	8e b5       	in	r24, 0x2e	; 46
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  const uint8_t result = _RFM22_io(0); // Dummy value...
  _RFM22_DESELECT();
    4818:	2a 9a       	sbi	0x05, 2	; 5
  bool isOK = false;
  const uint8_t rType = _RFM22ReadReg8Bit(0); // May read as 0 if not connected at all.
  if(RFM22_SUPPORTED_DEVICE_TYPE == rType)
    {
    const uint8_t rVersion = _RFM22ReadReg8Bit(1);
    if(RFM22_SUPPORTED_DEVICE_VERSION == rVersion)
    481a:	86 30       	cpi	r24, 0x06	; 6
    481c:	11 f4       	brne	.+4      	; 0x4822 <RFM22CheckConnected()+0x48>
    481e:	11 e0       	ldi	r17, 0x01	; 1
    4820:	05 c0       	rjmp	.+10     	; 0x482c <RFM22CheckConnected()+0x52>
    DEBUG_SERIAL_PRINTFMT(rType, HEX);
    DEBUG_SERIAL_PRINTLN();
    }
#endif
#if 1 && defined(DEBUG)
  if(!isOK) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22 bad"); }
    4822:	8e e9       	ldi	r24, 0x9E	; 158
    4824:	91 e0       	ldi	r25, 0x01	; 1
    4826:	0e 94 13 27 	call	0x4e26	; 0x4e26 <serialPrintlnAndFlush(__FlashStringHelper const*)>
    482a:	10 e0       	ldi	r17, 0x00	; 0
#endif
  if(neededEnable) { powerDownSPI(); }
    482c:	00 23       	and	r16, r16
    482e:	11 f0       	breq	.+4      	; 0x4834 <RFM22CheckConnected()+0x5a>
    4830:	0e 94 31 20 	call	0x4062	; 0x4062 <powerDownSPI()>
  return(isOK);
  }
    4834:	81 2f       	mov	r24, r17
    4836:	1f 91       	pop	r17
    4838:	0f 91       	pop	r16
    483a:	08 95       	ret

0000483c <eeprom_read_byte>:


/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
    483c:	9c 01       	movw	r18, r24
{
    do {} while (!eeprom_is_ready ());
    483e:	f9 99       	sbic	0x1f, 1	; 31
    4840:	fe cf       	rjmp	.-4      	; 0x483e <eeprom_read_byte+0x2>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    4842:	32 bd       	out	0x22, r19	; 34
    4844:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    4846:	f8 9a       	sbi	0x1f, 0	; 31
    4848:	80 b5       	in	r24, 0x20	; 32
    return __result;
}
    484a:	08 95       	ret

0000484c <eeprom_write_byte>:
}

/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
    484c:	9c 01       	movw	r18, r24
{
    do {} while (!eeprom_is_ready ());
    484e:	f9 99       	sbic	0x1f, 1	; 31
    4850:	fe cf       	rjmp	.-4      	; 0x484e <eeprom_write_byte+0x2>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    4852:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    4854:	32 bd       	out	0x22, r19	; 34
    4856:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
    4858:	60 bd       	out	0x20, r22	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    485a:	0f b6       	in	r0, 0x3f	; 63
    485c:	f8 94       	cli
    485e:	fa 9a       	sbi	0x1f, 2	; 31
    4860:	f9 9a       	sbi	0x1f, 1	; 31
    4862:	0f be       	out	0x3f, r0	; 63
}
    4864:	08 95       	ret

00004866 <getMinutesSinceMidnightLT()>:
// Thread-safe and ISR-safe.
#ifndef getMinutesSinceMidnightLT
uint_least16_t getMinutesSinceMidnightLT()
  {
  uint_least16_t result;
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    4866:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4868:	f8 94       	cli
    { result = _minutesSinceMidnightLT; }
    486a:	20 91 71 03 	lds	r18, 0x0371
    486e:	30 91 72 03 	lds	r19, 0x0372
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4872:	8f bf       	out	0x3f, r24	; 63
  return(result);
  }
    4874:	c9 01       	movw	r24, r18
    4876:	08 95       	ret

00004878 <getMinutesLT()>:
// Thread-safe and ISR-safe.
#ifndef getMinutesSinceMidnightLT
uint_least16_t getMinutesSinceMidnightLT()
  {
  uint_least16_t result;
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    4878:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    487a:	f8 94       	cli
    { result = _minutesSinceMidnightLT; }
    487c:	80 91 71 03 	lds	r24, 0x0371
    4880:	90 91 72 03 	lds	r25, 0x0372
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4884:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    4886:	6c e3       	ldi	r22, 0x3C	; 60
    4888:	70 e0       	ldi	r23, 0x00	; 0
    488a:	0e 94 b7 3d 	call	0x7b6e	; 0x7b6e <__udivmodhi4>
#endif

// Get local time minutes from RTC [0,59].
// Relatively slow.
// Thread-safe and ISR-safe.
uint_least8_t getMinutesLT() { return(getMinutesSinceMidnightLT() % 60); }
    488e:	08 95       	ret

00004890 <getHoursLT()>:
// Thread-safe and ISR-safe.
#ifndef getMinutesSinceMidnightLT
uint_least16_t getMinutesSinceMidnightLT()
  {
  uint_least16_t result;
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    4890:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4892:	f8 94       	cli
    { result = _minutesSinceMidnightLT; }
    4894:	80 91 71 03 	lds	r24, 0x0371
    4898:	90 91 72 03 	lds	r25, 0x0372
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    489c:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    489e:	6c e3       	ldi	r22, 0x3C	; 60
    48a0:	70 e0       	ldi	r23, 0x00	; 0
    48a2:	0e 94 b7 3d 	call	0x7b6e	; 0x7b6e <__udivmodhi4>
    48a6:	86 2f       	mov	r24, r22
uint_least8_t getMinutesLT() { return(getMinutesSinceMidnightLT() % 60); }

// Get local time hours from RTC [0,23].
// Relatively slow.
// Thread-safe and ISR-safe.
uint_least8_t getHoursLT() { return(getMinutesSinceMidnightLT() / 60); }
    48a8:	08 95       	ret

000048aa <restoreRTC()>:

// Restore software RTC information from non-volatile (EEPROM) store, if possible.
// Returns true if the persisted data seemed valid and was restored, in full or part.
// To void on average using 15/2 minutes at each reset/restart,
// this starts the internal time a little over half way into the restored 15-minute slot.
bool restoreRTC()
    48aa:	1f 93       	push	r17
  {
  uint8_t persistedValue;
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    48ac:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    48ae:	f8 94       	cli
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    48b0:	88 e0       	ldi	r24, 0x08	; 8
    48b2:	90 e0       	ldi	r25, 0x00	; 0
    48b4:	6e e1       	ldi	r22, 0x1E	; 30
    48b6:	74 e2       	ldi	r23, 0x24	; 36
    48b8:	0e 94 4c 03 	call	0x698	; 0x698 <__eerd_word>
    {
    // Restore the persisted days, though ignore if apparently unset (all 1s).
    const uint16_t days = eeprom_read_word((uint16_t*)EE_START_RTC_DAY_PERSIST);
    if(days != (uint16_t)~0U) { _daysSince1999LT = days; }
    48bc:	2f ef       	ldi	r18, 0xFF	; 255
    48be:	8f 3f       	cpi	r24, 0xFF	; 255
    48c0:	92 07       	cpc	r25, r18
    48c2:	21 f0       	breq	.+8      	; 0x48cc <restoreRTC()+0x22>
    48c4:	90 93 74 03 	sts	0x0374, r25
    48c8:	80 93 73 03 	sts	0x0373, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    48cc:	f9 99       	sbic	0x1f, 1	; 31
    48ce:	fe cf       	rjmp	.-4      	; 0x48cc <restoreRTC()+0x22>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    48d0:	8a e0       	ldi	r24, 0x0A	; 10
    48d2:	90 e0       	ldi	r25, 0x00	; 0
    48d4:	92 bd       	out	0x22, r25	; 34
    48d6:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    48d8:	f8 9a       	sbi	0x1f, 0	; 31
    48da:	60 b5       	in	r22, 0x20	; 32
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    48dc:	1f bf       	out	0x3f, r17	; 63
    // Now recover persisted HH:MM value.
    persistedValue = eeprom_read_byte((uint8_t*)EE_START_RTC_HHMM_PERSIST);
    }

  // Abort if value clearly invalid, eg likely an unprogrammed (0xff) byte.
  if(persistedValue >= (24 << 3)) { return(false); }
    48de:	60 3c       	cpi	r22, 0xC0	; 192
    48e0:	90 f5       	brcc	.+100    	; 0x4946 <restoreRTC()+0x9c>

  uint_least16_t minutesSinceMidnight = (persistedValue >> 3) * 60;
    48e2:	86 2f       	mov	r24, r22
    48e4:	90 e0       	ldi	r25, 0x00	; 0
    48e6:	23 e0       	ldi	r18, 0x03	; 3
    48e8:	95 95       	asr	r25
    48ea:	87 95       	ror	r24
    48ec:	2a 95       	dec	r18
    48ee:	e1 f7       	brne	.-8      	; 0x48e8 <restoreRTC()+0x3e>
    48f0:	2c e3       	ldi	r18, 0x3C	; 60
    48f2:	30 e0       	ldi	r19, 0x00	; 0
    48f4:	82 9f       	mul	r24, r18
    48f6:	a0 01       	movw	r20, r0
    48f8:	83 9f       	mul	r24, r19
    48fa:	50 0d       	add	r21, r0
    48fc:	92 9f       	mul	r25, r18
    48fe:	50 0d       	add	r21, r0
    4900:	11 24       	eor	r1, r1
  minutesSinceMidnight += 8; // Start just over half-way into one quantum to minimise average time lost on restart.
    4902:	9a 01       	movw	r18, r20
    4904:	28 5f       	subi	r18, 0xF8	; 248
    4906:	3f 4f       	sbci	r19, 0xFF	; 255
  const uint8_t lowBits = persistedValue & 7; // Extract quarter-hour bits.
  switch(lowBits)
    4908:	86 2f       	mov	r24, r22
    490a:	87 70       	andi	r24, 0x07	; 7
    490c:	81 30       	cpi	r24, 0x01	; 1
    490e:	59 f0       	breq	.+22     	; 0x4926 <restoreRTC()+0x7c>
    4910:	81 30       	cpi	r24, 0x01	; 1
    4912:	28 f0       	brcs	.+10     	; 0x491e <restoreRTC()+0x74>
    4914:	83 30       	cpi	r24, 0x03	; 3
    4916:	59 f0       	breq	.+22     	; 0x492e <restoreRTC()+0x84>
    4918:	87 30       	cpi	r24, 0x07	; 7
    491a:	a9 f4       	brne	.+42     	; 0x4946 <restoreRTC()+0x9c>
    491c:	0b c0       	rjmp	.+22     	; 0x4934 <restoreRTC()+0x8a>
    {
    case 0: minutesSinceMidnight += 45; break;
    491e:	9a 01       	movw	r18, r20
    4920:	2b 5c       	subi	r18, 0xCB	; 203
    4922:	3f 4f       	sbci	r19, 0xFF	; 255
    4924:	07 c0       	rjmp	.+14     	; 0x4934 <restoreRTC()+0x8a>
    case 1: minutesSinceMidnight += 30; break;
    4926:	9a 01       	movw	r18, r20
    4928:	2a 5d       	subi	r18, 0xDA	; 218
    492a:	3f 4f       	sbci	r19, 0xFF	; 255
    492c:	03 c0       	rjmp	.+6      	; 0x4934 <restoreRTC()+0x8a>
    case 3: minutesSinceMidnight += 15; break;
    492e:	9a 01       	movw	r18, r20
    4930:	29 5e       	subi	r18, 0xE9	; 233
    4932:	3f 4f       	sbci	r19, 0xFF	; 255
    default: return(false); // Invalid bit pattern: abort.
    }

  // Set the hours and minutes (atomically).
  // Deliberately leave the seconds unset to avoid units becoming too synchronised with one another, increasing TX collisions, etc.
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    4934:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4936:	f8 94       	cli
    { _minutesSinceMidnightLT = minutesSinceMidnight; }
    4938:	30 93 72 03 	sts	0x0372, r19
    493c:	20 93 71 03 	sts	0x0371, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4940:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
    4942:	81 e0       	ldi	r24, 0x01	; 1
    4944:	01 c0       	rjmp	.+2      	; 0x4948 <restoreRTC()+0x9e>

  return(true);
    4946:	80 e0       	ldi	r24, 0x00	; 0
  }
    4948:	1f 91       	pop	r17
    494a:	08 95       	ret

0000494c <persistRTC()>:
// but enough to help avoid the clock slipping too much during (say) a battery change.
// There is no point calling this more than (say) once per minute,
// though it will simply return relatively quickly from redundant calls.
// The RTC data is stored so as not to wear out AVR EEPROM for at least several years.
// IMPLEMENTATION OF THIS AND THE eeprom_smart_xxx_byte() ROUTINES IS CRITICAL TO PERFORMANCE AND LONGEVITY.
void persistRTC()
    494c:	1f 93       	push	r17
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    494e:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4950:	f8 94       	cli
    {
    uint8_t quarterHours = (_minutesSinceMidnightLT / 15);
    4952:	80 91 71 03 	lds	r24, 0x0371
    4956:	90 91 72 03 	lds	r25, 0x0372
    495a:	6f e0       	ldi	r22, 0x0F	; 15
    495c:	70 e0       	ldi	r23, 0x00	; 0
    495e:	0e 94 b7 3d 	call	0x7b6e	; 0x7b6e <__udivmodhi4>
    uint8_t targetByte = (quarterHours << 1) & ~7U; // Bit pattern now hhhhh000 where hhhhh is whole hours [0,23].
    4962:	46 2f       	mov	r20, r22
    4964:	44 0f       	add	r20, r20
    4966:	48 7f       	andi	r20, 0xF8	; 248
    switch(quarterHours & 3)
    4968:	70 e0       	ldi	r23, 0x00	; 0
    496a:	63 70       	andi	r22, 0x03	; 3
    496c:	70 70       	andi	r23, 0x00	; 0
    496e:	61 30       	cpi	r22, 0x01	; 1
    4970:	71 05       	cpc	r23, r1
    4972:	39 f0       	breq	.+14     	; 0x4982 <persistRTC()+0x36>
    4974:	62 30       	cpi	r22, 0x02	; 2
    4976:	71 05       	cpc	r23, r1
    4978:	31 f0       	breq	.+12     	; 0x4986 <persistRTC()+0x3a>
    497a:	67 2b       	or	r22, r23
    497c:	29 f4       	brne	.+10     	; 0x4988 <persistRTC()+0x3c>
      {
      case 0: targetByte |= 7; break;
    497e:	47 60       	ori	r20, 0x07	; 7
    4980:	03 c0       	rjmp	.+6      	; 0x4988 <persistRTC()+0x3c>
      case 1: targetByte |= 3; break;
    4982:	43 60       	ori	r20, 0x03	; 3
    4984:	01 c0       	rjmp	.+2      	; 0x4988 <persistRTC()+0x3c>
      case 2: targetByte |= 1; break;
    4986:	41 60       	ori	r20, 0x01	; 1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    4988:	f9 99       	sbic	0x1f, 1	; 31
    498a:	fe cf       	rjmp	.-4      	; 0x4988 <persistRTC()+0x3c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    498c:	8a e0       	ldi	r24, 0x0A	; 10
    498e:	90 e0       	ldi	r25, 0x00	; 0
    4990:	92 bd       	out	0x22, r25	; 34
    4992:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    4994:	f8 9a       	sbi	0x1f, 0	; 31
    4996:	80 b5       	in	r24, 0x20	; 32
      }

    // Update if target HH:MM not already correct.
    const uint8_t persistedValue = eeprom_read_byte((uint8_t*)EE_START_RTC_HHMM_PERSIST);
    if(persistedValue != targetByte)
    4998:	84 17       	cp	r24, r20
    499a:	91 f1       	breq	.+100    	; 0x4a00 <persistRTC()+0xb4>
      {
      // Where it is not possible to get the target value just by setting bits to 0,
      // eg for a new hour (ie completely different hour to that in EEPROM and on roll to new hour),
      // then do a full erase/write...
      //if((0 == quarterHours) || ((persistedValue & 0xf8) != (targetByte & 0xf8)))
      if(targetByte != (persistedValue & targetByte))
    499c:	24 2f       	mov	r18, r20
    499e:	30 e0       	ldi	r19, 0x00	; 0
    49a0:	90 e0       	ldi	r25, 0x00	; 0
    49a2:	82 23       	and	r24, r18
    49a4:	93 23       	and	r25, r19
    49a6:	28 17       	cp	r18, r24
    49a8:	39 07       	cpc	r19, r25
    49aa:	71 f0       	breq	.+28     	; 0x49c8 <persistRTC()+0x7c>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    49ac:	f9 99       	sbic	0x1f, 1	; 31
    49ae:	fe cf       	rjmp	.-4      	; 0x49ac <persistRTC()+0x60>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    49b0:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    49b2:	8a e0       	ldi	r24, 0x0A	; 10
    49b4:	90 e0       	ldi	r25, 0x00	; 0
    49b6:	92 bd       	out	0x22, r25	; 34
    49b8:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    49ba:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    49bc:	0f b6       	in	r0, 0x3f	; 63
    49be:	f8 94       	cli
    49c0:	fa 9a       	sbi	0x1f, 2	; 31
    49c2:	f9 9a       	sbi	0x1f, 1	; 31
    49c4:	0f be       	out	0x3f, r0	; 63
    49c6:	05 c0       	rjmp	.+10     	; 0x49d2 <persistRTC()+0x86>
        { eeprom_write_byte((uint8_t*)EE_START_RTC_HHMM_PERSIST, targetByte); }
      // Else do a write without erase, typically clearing the quarter bits one at a time...
      else
        { eeprom_smart_clear_bits((uint8_t*)EE_START_RTC_HHMM_PERSIST, targetByte); }
    49c8:	8a e0       	ldi	r24, 0x0A	; 10
    49ca:	90 e0       	ldi	r25, 0x00	; 0
    49cc:	64 2f       	mov	r22, r20
    49ce:	0e 94 33 10 	call	0x2066	; 0x2066 <eeprom_smart_clear_bits(unsigned char*, unsigned char)>
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    49d2:	88 e0       	ldi	r24, 0x08	; 8
    49d4:	90 e0       	ldi	r25, 0x00	; 0
    49d6:	6e e1       	ldi	r22, 0x1E	; 30
    49d8:	74 e2       	ldi	r23, 0x24	; 36
    49da:	0e 94 4c 03 	call	0x698	; 0x698 <__eerd_word>

      // Also persist the current days if not up to date.
      const uint16_t days = eeprom_read_word((uint16_t*)EE_START_RTC_DAY_PERSIST);
      if(days != _daysSince1999LT) { eeprom_write_word((uint16_t*)EE_START_RTC_DAY_PERSIST, _daysSince1999LT); }
    49de:	20 91 73 03 	lds	r18, 0x0373
    49e2:	30 91 74 03 	lds	r19, 0x0374
    49e6:	82 17       	cp	r24, r18
    49e8:	93 07       	cpc	r25, r19
    49ea:	51 f0       	breq	.+20     	; 0x4a00 <persistRTC()+0xb4>
    49ec:	60 91 73 03 	lds	r22, 0x0373
    49f0:	70 91 74 03 	lds	r23, 0x0374
    Write a word \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_word (uint16_t *__p, uint16_t __value)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    __eewr_word (__p, __value, eeprom_write_byte);
    49f4:	88 e0       	ldi	r24, 0x08	; 8
    49f6:	90 e0       	ldi	r25, 0x00	; 0
    49f8:	46 e2       	ldi	r20, 0x26	; 38
    49fa:	54 e2       	ldi	r21, 0x24	; 36
    49fc:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__eewr_word>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4a00:	1f bf       	out	0x3f, r17	; 63
      }
    }
  }
    4a02:	1f 91       	pop	r17
    4a04:	08 95       	ret

00004a06 <setHoursMinutesLT(int, int)>:
// Will ignore attempts to set bad values and return false in that case.
// Returns true if all OK and the time has been set.
// Does not attempt to set seconds.
// Thread/interrupt safe, but do not call this from an ISR.
// Will persist time to survive reset as neceessary.
bool setHoursMinutesLT(int hours, int minutes)
    4a06:	1f 93       	push	r17
    4a08:	ac 01       	movw	r20, r24
  {
  if((hours < 0) || (hours > 23) || (minutes < 0) || (minutes > 59)) { return(false); } // Invalid time.
    4a0a:	88 31       	cpi	r24, 0x18	; 24
    4a0c:	91 05       	cpc	r25, r1
    4a0e:	10 f5       	brcc	.+68     	; 0x4a54 <setHoursMinutesLT(int, int)+0x4e>
    4a10:	77 fd       	sbrc	r23, 7
    4a12:	20 c0       	rjmp	.+64     	; 0x4a54 <setHoursMinutesLT(int, int)+0x4e>
    4a14:	6c 33       	cpi	r22, 0x3C	; 60
    4a16:	71 05       	cpc	r23, r1
    4a18:	ec f4       	brge	.+58     	; 0x4a54 <setHoursMinutesLT(int, int)+0x4e>
  const uint_least16_t computedMinutesSinceMidnightLT = (uint_least16_t) ((60 * hours) + minutes);
    4a1a:	8c e3       	ldi	r24, 0x3C	; 60
    4a1c:	90 e0       	ldi	r25, 0x00	; 0
    4a1e:	48 9f       	mul	r20, r24
    4a20:	90 01       	movw	r18, r0
    4a22:	49 9f       	mul	r20, r25
    4a24:	30 0d       	add	r19, r0
    4a26:	58 9f       	mul	r21, r24
    4a28:	30 0d       	add	r19, r0
    4a2a:	11 24       	eor	r1, r1
    4a2c:	26 0f       	add	r18, r22
    4a2e:	37 1f       	adc	r19, r23
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    4a30:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4a32:	f8 94       	cli
    {
    if(computedMinutesSinceMidnightLT != _minutesSinceMidnightLT)
    4a34:	80 91 71 03 	lds	r24, 0x0371
    4a38:	90 91 72 03 	lds	r25, 0x0372
    4a3c:	28 17       	cp	r18, r24
    4a3e:	39 07       	cpc	r19, r25
    4a40:	31 f0       	breq	.+12     	; 0x4a4e <setHoursMinutesLT(int, int)+0x48>
      {
      // If time has changed then store it locally and persist it if need be.
      _minutesSinceMidnightLT = computedMinutesSinceMidnightLT;
    4a42:	30 93 72 03 	sts	0x0372, r19
    4a46:	20 93 71 03 	sts	0x0371, r18
      persistRTC();
    4a4a:	0e 94 a6 24 	call	0x494c	; 0x494c <persistRTC()>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4a4e:	1f bf       	out	0x3f, r17	; 63
    __asm__ volatile ("" ::: "memory");
    4a50:	81 e0       	ldi	r24, 0x01	; 1
    4a52:	01 c0       	rjmp	.+2      	; 0x4a56 <setHoursMinutesLT(int, int)+0x50>
      }
    }
  return(true); // Assume set and persisted OK.
    4a54:	80 e0       	ldi	r24, 0x00	; 0
  }
    4a56:	1f 91       	pop	r17
    4a58:	08 95       	ret

00004a5a <getSimpleScheduleOn(unsigned char)>:
// Will usually include a pre-warm time before the actual time set.
// Note that unprogrammed EEPROM value will result in invalid time, ie schedule not set.
//   * which  schedule number, counting from 0
uint_least16_t getSimpleScheduleOn(const uint8_t which)
  {
  if(which >= MAX_SIMPLE_SCHEDULES) { return(~0); } // Invalid schedule number.
    4a5a:	82 30       	cpi	r24, 0x02	; 2
    4a5c:	d0 f4       	brcc	.+52     	; 0x4a92 <getSimpleScheduleOn(unsigned char)+0x38>
  uint8_t startMM;
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    4a5e:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4a60:	f8 94       	cli
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    4a62:	f9 99       	sbic	0x1f, 1	; 31
    4a64:	fe cf       	rjmp	.-4      	; 0x4a62 <getSimpleScheduleOn(unsigned char)+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    4a66:	90 e0       	ldi	r25, 0x00	; 0
    4a68:	0c 96       	adiw	r24, 0x0c	; 12
    4a6a:	92 bd       	out	0x22, r25	; 34
    4a6c:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    4a6e:	f8 9a       	sbi	0x1f, 0	; 31
    4a70:	90 b5       	in	r25, 0x20	; 32
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4a72:	2f bf       	out	0x3f, r18	; 63
    { startMM = eeprom_read_byte((uint8_t*)(EE_START_SIMPLE_SCHEDULE0_ON + which)); }
  if(startMM > MAX_COMPRESSED_MINS_AFTER_MIDNIGHT) { return(~0); } // No schedule set.
    4a74:	90 3f       	cpi	r25, 0xF0	; 240
    4a76:	68 f4       	brcc	.+26     	; 0x4a92 <getSimpleScheduleOn(unsigned char)+0x38>
  // Compute start time from stored shedule value.
  uint_least16_t startTime = SIMPLE_SCHEDULE_GRANULARITY_MINS * startMM;
    4a78:	86 e0       	ldi	r24, 0x06	; 6
    4a7a:	98 9f       	mul	r25, r24
    4a7c:	c0 01       	movw	r24, r0
    4a7e:	11 24       	eor	r1, r1
  const uint8_t windBackM = PREWARM_MINS; // Wind back start time by about 25% of full interval.
  if(windBackM > startTime) { startTime += MINS_PER_DAY; } // Allow for wrap-around at midnight.
    4a80:	8f 30       	cpi	r24, 0x0F	; 15
    4a82:	91 05       	cpc	r25, r1
    4a84:	10 f4       	brcc	.+4      	; 0x4a8a <getSimpleScheduleOn(unsigned char)+0x30>
    4a86:	80 56       	subi	r24, 0x60	; 96
    4a88:	9a 4f       	sbci	r25, 0xFA	; 250
  startTime -= windBackM;
    4a8a:	9c 01       	movw	r18, r24
    4a8c:	2f 50       	subi	r18, 0x0F	; 15
    4a8e:	30 40       	sbci	r19, 0x00	; 0
    4a90:	02 c0       	rjmp	.+4      	; 0x4a96 <getSimpleScheduleOn(unsigned char)+0x3c>
  return(startTime);
    4a92:	2f ef       	ldi	r18, 0xFF	; 255
    4a94:	3f ef       	ldi	r19, 0xFF	; 255
  }
    4a96:	c9 01       	movw	r24, r18
    4a98:	08 95       	ret

00004a9a <clearSimpleSchedule(unsigned char)>:
  }

// Clear a simple schedule.
// There will be neither on nor off events from the selected simple schedule once this is called.
//   * which  schedule number, counting from 0
void clearSimpleSchedule(const uint8_t which)
    4a9a:	1f 93       	push	r17
  {
  if(which >= MAX_SIMPLE_SCHEDULES) { return; } // Invalid schedule number.
    4a9c:	82 30       	cpi	r24, 0x02	; 2
    4a9e:	38 f4       	brcc	.+14     	; 0x4aae <clearSimpleSchedule(unsigned char)+0x14>
  // Clear the schedule back to 'unprogrammed' values, minimising wear.
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    4aa0:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4aa2:	f8 94       	cli
    { eeprom_smart_erase_byte((uint8_t*)(EE_START_SIMPLE_SCHEDULE0_ON + which)); }
    4aa4:	90 e0       	ldi	r25, 0x00	; 0
    4aa6:	0c 96       	adiw	r24, 0x0c	; 12
    4aa8:	0e 94 1f 10 	call	0x203e	; 0x203e <eeprom_smart_erase_byte(unsigned char*)>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4aac:	1f bf       	out	0x3f, r17	; 63
  }
    4aae:	1f 91       	pop	r17
    4ab0:	08 95       	ret

00004ab2 <setSimpleSchedule(unsigned int, unsigned char)>:
//   * startMinutesSinceMidnightLT  is start/on time in minutes after midnight [0,1439]
//   * which  schedule number, counting from 0
// Invalid parameters will be ignored and false returned,
// else this will return true and isSimpleScheduleSet() will return true after this.
// NOTE: over-use of this routine can prematurely wear out the EEPROM.
bool setSimpleSchedule(const uint_least16_t startMinutesSinceMidnightLT, const uint8_t which)
    4ab2:	1f 93       	push	r17
  {
  if(which >= MAX_SIMPLE_SCHEDULES) { return(false); } // Invalid schedule number.
    4ab4:	62 30       	cpi	r22, 0x02	; 2
    4ab6:	98 f4       	brcc	.+38     	; 0x4ade <setSimpleSchedule(unsigned int, unsigned char)+0x2c>
  if(startMinutesSinceMidnightLT >= MINS_PER_DAY) { return(false); } // Invalid time.
    4ab8:	25 e0       	ldi	r18, 0x05	; 5
    4aba:	80 3a       	cpi	r24, 0xA0	; 160
    4abc:	92 07       	cpc	r25, r18
    4abe:	78 f4       	brcc	.+30     	; 0x4ade <setSimpleSchedule(unsigned int, unsigned char)+0x2c>

  // Set the schedule, minimising wear.
  const uint8_t startMM = startMinutesSinceMidnightLT / SIMPLE_SCHEDULE_GRANULARITY_MINS; // Round down...
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    4ac0:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4ac2:	f8 94       	cli
    { eeprom_smart_update_byte((uint8_t*)(EE_START_SIMPLE_SCHEDULE0_ON + which), startMM); }
    4ac4:	26 2f       	mov	r18, r22
    4ac6:	30 e0       	ldi	r19, 0x00	; 0
    4ac8:	66 e0       	ldi	r22, 0x06	; 6
    4aca:	70 e0       	ldi	r23, 0x00	; 0
    4acc:	0e 94 b7 3d 	call	0x7b6e	; 0x7b6e <__udivmodhi4>
    4ad0:	c9 01       	movw	r24, r18
    4ad2:	0c 96       	adiw	r24, 0x0c	; 12
    4ad4:	0e 94 49 10 	call	0x2092	; 0x2092 <eeprom_smart_update_byte(unsigned char*, unsigned char)>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4ad8:	1f bf       	out	0x3f, r17	; 63
    __asm__ volatile ("" ::: "memory");
    4ada:	81 e0       	ldi	r24, 0x01	; 1
    4adc:	01 c0       	rjmp	.+2      	; 0x4ae0 <setSimpleSchedule(unsigned int, unsigned char)+0x2e>
  return(true); // Assume EEPROM programmed OK...
    4ade:	80 e0       	ldi	r24, 0x00	; 0
  }
    4ae0:	1f 91       	pop	r17
    4ae2:	08 95       	ret

00004ae4 <getSimpleScheduleOff(unsigned char)>:
  }

// Get the simple/primary schedule off time, as minutes after midnight [0,1439]; invalid (eg ~0) if none set.
// This is based on specifed start time and some element of the current eco/comfort bias.
//   * which  schedule number, counting from 0
uint_least16_t getSimpleScheduleOff(const uint8_t which)
    4ae4:	cf 93       	push	r28
    4ae6:	df 93       	push	r29
  {
  const uint_least16_t startMins = getSimpleScheduleOn(which);
    4ae8:	0e 94 2d 25 	call	0x4a5a	; 0x4a5a <getSimpleScheduleOn(unsigned char)>
    4aec:	ec 01       	movw	r28, r24
  if(startMins == (uint_least16_t)~0) { return(~0); }
    4aee:	8f ef       	ldi	r24, 0xFF	; 255
    4af0:	cf 3f       	cpi	r28, 0xFF	; 255
    4af2:	d8 07       	cpc	r29, r24
    4af4:	19 f4       	brne	.+6      	; 0x4afc <getSimpleScheduleOff(unsigned char)+0x18>
    4af6:	2f ef       	ldi	r18, 0xFF	; 255
    4af8:	3f ef       	ldi	r19, 0xFF	; 255
    4afa:	16 c0       	rjmp	.+44     	; 0x4b28 <getSimpleScheduleOff(unsigned char)+0x44>
  {
//  // Simple and fast binary choice.
//  return(hasEcoBias() ? LEARNED_ON_PERIOD_M : LEARNED_ON_PERIOD_COMFORT_M);

  // Three-way split based on current WARM target temperature.
  const uint8_t wt = getWARMTargetC();
    4afc:	0e 94 cb 03 	call	0x796	; 0x796 <getWARMTargetC()>
  if(isEcoTemperature(wt)) { return(LEARNED_ON_PERIOD_M); }
    4b00:	82 31       	cpi	r24, 0x12	; 18
    4b02:	10 f4       	brcc	.+4      	; 0x4b08 <getSimpleScheduleOff(unsigned char)+0x24>
    4b04:	8c e3       	ldi	r24, 0x3C	; 60
    4b06:	05 c0       	rjmp	.+10     	; 0x4b12 <getSimpleScheduleOff(unsigned char)+0x2e>
  else if(isComfortTemperature(wt)) { return(LEARNED_ON_PERIOD_COMFORT_M); }
    4b08:	85 31       	cpi	r24, 0x15	; 21
    4b0a:	10 f4       	brcc	.+4      	; 0x4b10 <getSimpleScheduleOff(unsigned char)+0x2c>
    4b0c:	8a e5       	ldi	r24, 0x5A	; 90
    4b0e:	01 c0       	rjmp	.+2      	; 0x4b12 <getSimpleScheduleOff(unsigned char)+0x2e>
    4b10:	88 e7       	ldi	r24, 0x78	; 120
uint_least16_t getSimpleScheduleOff(const uint8_t which)
  {
  const uint_least16_t startMins = getSimpleScheduleOn(which);
  if(startMins == (uint_least16_t)~0) { return(~0); }
  // Compute end from start, allowing for wrap-around at midnight.
  uint_least16_t endTime = startMins + PREWARM_MINS + onTime();
    4b12:	9e 01       	movw	r18, r28
    4b14:	21 5f       	subi	r18, 0xF1	; 241
    4b16:	3f 4f       	sbci	r19, 0xFF	; 255
    4b18:	28 0f       	add	r18, r24
    4b1a:	31 1d       	adc	r19, r1
  if(endTime >= MINS_PER_DAY) { endTime -= MINS_PER_DAY; } // Allow for wrap-around at midnight.
    4b1c:	85 e0       	ldi	r24, 0x05	; 5
    4b1e:	20 3a       	cpi	r18, 0xA0	; 160
    4b20:	38 07       	cpc	r19, r24
    4b22:	10 f0       	brcs	.+4      	; 0x4b28 <getSimpleScheduleOff(unsigned char)+0x44>
    4b24:	20 5a       	subi	r18, 0xA0	; 160
    4b26:	35 40       	sbci	r19, 0x05	; 5
  return(endTime);
  }
    4b28:	c9 01       	movw	r24, r18
    4b2a:	df 91       	pop	r29
    4b2c:	cf 91       	pop	r28
    4b2e:	08 95       	ret

00004b30 <isAnyScheduleOnWARMSoon()>:
// True iff any schedule is due 'on'/'WARM' soon even when schedules overlap.
// May be relatively slow/expensive.
// Can be used to allow room to be brought up to at least a set-back temperature
// if very cold when a WARM period is due soon (to help ensure that WARM target is met on time).
// In unit-test override mode is true for soon, false for now/off.
bool isAnyScheduleOnWARMSoon()
    4b30:	0f 93       	push	r16
    4b32:	1f 93       	push	r17
    4b34:	cf 93       	push	r28
    4b36:	df 93       	push	r29
    case _soUT_soon: return(true);
    case _soUT_now: return(false);
    }
#endif

  const uint_least16_t mm0 = getMinutesSinceMidnightLT() + PREPREWARM_MINS; // Look forward...
    4b38:	0e 94 33 24 	call	0x4866	; 0x4866 <getMinutesSinceMidnightLT()>
    4b3c:	9c 01       	movw	r18, r24
    4b3e:	23 5d       	subi	r18, 0xD3	; 211
    4b40:	3f 4f       	sbci	r19, 0xFF	; 255
  const uint_least16_t mm = (mm0 >= MINS_PER_DAY) ? (mm0 - MINS_PER_DAY) : mm0;
    4b42:	45 e0       	ldi	r20, 0x05	; 5
    4b44:	20 3a       	cpi	r18, 0xA0	; 160
    4b46:	34 07       	cpc	r19, r20
    4b48:	10 f4       	brcc	.+4      	; 0x4b4e <isAnyScheduleOnWARMSoon()+0x1e>
    4b4a:	89 01       	movw	r16, r18
    4b4c:	03 c0       	rjmp	.+6      	; 0x4b54 <isAnyScheduleOnWARMSoon()+0x24>
    4b4e:	8c 01       	movw	r16, r24
    4b50:	03 57       	subi	r16, 0x73	; 115
    4b52:	15 40       	sbci	r17, 0x05	; 5

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    4b54:	80 e0       	ldi	r24, 0x00	; 0
    4b56:	0e 94 2d 25 	call	0x4a5a	; 0x4a5a <getSimpleScheduleOn(unsigned char)>
    4b5a:	ec 01       	movw	r28, r24
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    4b5c:	08 17       	cp	r16, r24
    4b5e:	19 07       	cpc	r17, r25
    4b60:	68 f0       	brcs	.+26     	; 0x4b7c <isAnyScheduleOnWARMSoon()+0x4c>
    uint_least16_t e = getSimpleScheduleOff(which);
    4b62:	80 e0       	ldi	r24, 0x00	; 0
    4b64:	0e 94 72 25 	call	0x4ae4	; 0x4ae4 <getSimpleScheduleOff(unsigned char)>
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    4b68:	8c 17       	cp	r24, r28
    4b6a:	9d 07       	cpc	r25, r29
    4b6c:	20 f0       	brcs	.+8      	; 0x4b76 <isAnyScheduleOnWARMSoon()+0x46>
    if(mm < e) { return(true); }
    4b6e:	08 17       	cp	r16, r24
    4b70:	19 07       	cpc	r17, r25
    4b72:	20 f4       	brcc	.+8      	; 0x4b7c <isAnyScheduleOnWARMSoon()+0x4c>
    4b74:	17 c0       	rjmp	.+46     	; 0x4ba4 <isAnyScheduleOnWARMSoon()+0x74>
  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    uint_least16_t e = getSimpleScheduleOff(which);
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    4b76:	80 56       	subi	r24, 0x60	; 96
    4b78:	9a 4f       	sbci	r25, 0xFA	; 250
    4b7a:	f9 cf       	rjmp	.-14     	; 0x4b6e <isAnyScheduleOnWARMSoon()+0x3e>
  const uint_least16_t mm0 = getMinutesSinceMidnightLT() + PREPREWARM_MINS; // Look forward...
  const uint_least16_t mm = (mm0 >= MINS_PER_DAY) ? (mm0 - MINS_PER_DAY) : mm0;

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    4b7c:	81 e0       	ldi	r24, 0x01	; 1
    4b7e:	0e 94 2d 25 	call	0x4a5a	; 0x4a5a <getSimpleScheduleOn(unsigned char)>
    4b82:	ec 01       	movw	r28, r24
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    4b84:	08 17       	cp	r16, r24
    4b86:	19 07       	cpc	r17, r25
    4b88:	58 f0       	brcs	.+22     	; 0x4ba0 <isAnyScheduleOnWARMSoon()+0x70>
    uint_least16_t e = getSimpleScheduleOff(which);
    4b8a:	81 e0       	ldi	r24, 0x01	; 1
    4b8c:	0e 94 72 25 	call	0x4ae4	; 0x4ae4 <getSimpleScheduleOff(unsigned char)>
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    4b90:	8c 17       	cp	r24, r28
    4b92:	9d 07       	cpc	r25, r29
    4b94:	10 f4       	brcc	.+4      	; 0x4b9a <isAnyScheduleOnWARMSoon()+0x6a>
    4b96:	80 56       	subi	r24, 0x60	; 96
    4b98:	9a 4f       	sbci	r25, 0xFA	; 250
    if(mm < e) { return(true); }
    4b9a:	08 17       	cp	r16, r24
    4b9c:	19 07       	cpc	r17, r25
    4b9e:	10 f0       	brcs	.+4      	; 0x4ba4 <isAnyScheduleOnWARMSoon()+0x74>
    4ba0:	80 e0       	ldi	r24, 0x00	; 0
    4ba2:	01 c0       	rjmp	.+2      	; 0x4ba6 <isAnyScheduleOnWARMSoon()+0x76>
#endif

  const uint_least16_t mm0 = getMinutesSinceMidnightLT() + PREPREWARM_MINS; // Look forward...
  const uint_least16_t mm = (mm0 >= MINS_PER_DAY) ? (mm0 - MINS_PER_DAY) : mm0;

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    4ba4:	81 e0       	ldi	r24, 0x01	; 1
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    if(mm < e) { return(true); }
    }

  return(false);
  }
    4ba6:	df 91       	pop	r29
    4ba8:	cf 91       	pop	r28
    4baa:	1f 91       	pop	r17
    4bac:	0f 91       	pop	r16
    4bae:	08 95       	ret

00004bb0 <isAnyScheduleOnWARMNow()>:
// True iff any schedule is currently 'on'/'WARM' even when schedules overlap.
// May be relatively slow/expensive.
// Can be used to suppress all 'off' activity except for the final one.
// Can be used to suppress set-backs during on times.
// In unit-test override mode is true for now, false for soon/off.
bool isAnyScheduleOnWARMNow()
    4bb0:	0f 93       	push	r16
    4bb2:	1f 93       	push	r17
    4bb4:	cf 93       	push	r28
    4bb6:	df 93       	push	r29
    case _soUT_soon: return(false);
    case _soUT_now: return(true);
    }
#endif

  const uint_least16_t mm = getMinutesSinceMidnightLT();
    4bb8:	0e 94 33 24 	call	0x4866	; 0x4866 <getMinutesSinceMidnightLT()>
    4bbc:	8c 01       	movw	r16, r24

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    4bbe:	80 e0       	ldi	r24, 0x00	; 0
    4bc0:	0e 94 2d 25 	call	0x4a5a	; 0x4a5a <getSimpleScheduleOn(unsigned char)>
    4bc4:	ec 01       	movw	r28, r24
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    4bc6:	08 17       	cp	r16, r24
    4bc8:	19 07       	cpc	r17, r25
    4bca:	68 f0       	brcs	.+26     	; 0x4be6 <isAnyScheduleOnWARMNow()+0x36>
    uint_least16_t e = getSimpleScheduleOff(which);
    4bcc:	80 e0       	ldi	r24, 0x00	; 0
    4bce:	0e 94 72 25 	call	0x4ae4	; 0x4ae4 <getSimpleScheduleOff(unsigned char)>
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    4bd2:	8c 17       	cp	r24, r28
    4bd4:	9d 07       	cpc	r25, r29
    4bd6:	20 f0       	brcs	.+8      	; 0x4be0 <isAnyScheduleOnWARMNow()+0x30>
    if(mm < e) { return(true); }
    4bd8:	08 17       	cp	r16, r24
    4bda:	19 07       	cpc	r17, r25
    4bdc:	20 f4       	brcc	.+8      	; 0x4be6 <isAnyScheduleOnWARMNow()+0x36>
    4bde:	17 c0       	rjmp	.+46     	; 0x4c0e <isAnyScheduleOnWARMNow()+0x5e>
  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    uint_least16_t e = getSimpleScheduleOff(which);
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    4be0:	80 56       	subi	r24, 0x60	; 96
    4be2:	9a 4f       	sbci	r25, 0xFA	; 250
    4be4:	f9 cf       	rjmp	.-14     	; 0x4bd8 <isAnyScheduleOnWARMNow()+0x28>

  const uint_least16_t mm = getMinutesSinceMidnightLT();

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    4be6:	81 e0       	ldi	r24, 0x01	; 1
    4be8:	0e 94 2d 25 	call	0x4a5a	; 0x4a5a <getSimpleScheduleOn(unsigned char)>
    4bec:	ec 01       	movw	r28, r24
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    4bee:	08 17       	cp	r16, r24
    4bf0:	19 07       	cpc	r17, r25
    4bf2:	58 f0       	brcs	.+22     	; 0x4c0a <isAnyScheduleOnWARMNow()+0x5a>
    uint_least16_t e = getSimpleScheduleOff(which);
    4bf4:	81 e0       	ldi	r24, 0x01	; 1
    4bf6:	0e 94 72 25 	call	0x4ae4	; 0x4ae4 <getSimpleScheduleOff(unsigned char)>
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    4bfa:	8c 17       	cp	r24, r28
    4bfc:	9d 07       	cpc	r25, r29
    4bfe:	10 f4       	brcc	.+4      	; 0x4c04 <isAnyScheduleOnWARMNow()+0x54>
    4c00:	80 56       	subi	r24, 0x60	; 96
    4c02:	9a 4f       	sbci	r25, 0xFA	; 250
    if(mm < e) { return(true); }
    4c04:	08 17       	cp	r16, r24
    4c06:	19 07       	cpc	r17, r25
    4c08:	10 f0       	brcs	.+4      	; 0x4c0e <isAnyScheduleOnWARMNow()+0x5e>
    4c0a:	80 e0       	ldi	r24, 0x00	; 0
    4c0c:	01 c0       	rjmp	.+2      	; 0x4c10 <isAnyScheduleOnWARMNow()+0x60>
    }
#endif

  const uint_least16_t mm = getMinutesSinceMidnightLT();

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    4c0e:	81 e0       	ldi	r24, 0x01	; 1
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    if(mm < e) { return(true); }
    }

  return(false);
  }
    4c10:	df 91       	pop	r29
    4c12:	cf 91       	pop	r28
    4c14:	1f 91       	pop	r17
    4c16:	0f 91       	pop	r16
    4c18:	08 95       	ret

00004c1a <getStatsTXLevel()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    4c1a:	f9 99       	sbic	0x1f, 1	; 31
    4c1c:	fe cf       	rjmp	.-4      	; 0x4c1a <getStatsTXLevel()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    4c1e:	8c e1       	ldi	r24, 0x1C	; 28
    4c20:	90 e0       	ldi	r25, 0x00	; 0
    4c22:	92 bd       	out	0x22, r25	; 34
    4c24:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    4c26:	f8 9a       	sbi	0x1f, 0	; 31
    4c28:	80 b5       	in	r24, 0x20	; 32


// Get the current stats transmission level (for data outbound from this node).
// May not exactly match enumerated levels; use inequalities.
// Not thread-/ISR- safe.
stats_TX_level getStatsTXLevel() { return((stats_TX_level)eeprom_read_byte((uint8_t *)EE_START_STATS_TX_ENABLE)); }
    4c2a:	90 e0       	ldi	r25, 0x00	; 0
    4c2c:	08 95       	ret

00004c2e <addEntropyToPool(unsigned char, unsigned char)>:
//   * estBits estimated number of truely securely random bits in range [0,8].
// Not thread-/ISR- safe.
void addEntropyToPool(uint8_t data, uint8_t estBits)
  {
  // TODO: no real entropy pool yet.
  seedRNG8(data, cycleCountCPU(), getSubCycleTime());
    4c2e:	66 b5       	in	r22, 0x26	; 38
    4c30:	40 91 b2 00 	lds	r20, 0x00B2
    4c34:	0e 94 89 21 	call	0x4312	; 0x4312 <seedRNG8(unsigned char, unsigned char, unsigned char)>
  }
    4c38:	08 95       	ret

00004c3a <getSecureRandomByte()>:
// Generate 'secure' new random byte.
// This should be essentially all entropy and unguessable.
// Likely to be slow and may force some peripheral I/O.
// Runtime details are likely to be intimately dependent on hardware implementation.
// Not thread-/ISR- safe.
uint8_t getSecureRandomByte()
    4c3a:	0f 93       	push	r16
    4c3c:	1f 93       	push	r17
    4c3e:	df 93       	push	r29
    4c40:	cf 93       	push	r28
    4c42:	0f 92       	push	r0
    4c44:	cd b7       	in	r28, 0x3d	; 61
    4c46:	de b7       	in	r29, 0x3e	; 62
  {
  // Use various real noise sources and whiten with PRNG and other counters.
  // Mix the bits also to help ensure good distribution.
  uint8_t w1 = clockJitterEntropyByte(); // Real noise.
    4c48:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <clockJitterEntropyByte()>
  w1 ^= (w1 << 4); // Mix.
    4c4c:	08 2f       	mov	r16, r24
    4c4e:	02 95       	swap	r16
    4c50:	00 7f       	andi	r16, 0xF0	; 240
    4c52:	08 27       	eor	r16, r24
  w1 ^= noisyADCRead(); // Real noise.
    4c54:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <noisyADCRead()>
    4c58:	08 27       	eor	r16, r24
  w1 ^= (w1 >> 4); // Mix.
    4c5a:	10 2f       	mov	r17, r16
    4c5c:	12 95       	swap	r17
    4c5e:	1f 70       	andi	r17, 0x0F	; 15
    4c60:	10 27       	eor	r17, r16
  const uint8_t v = w1;
    4c62:	19 83       	std	Y+1, r17	; 0x01
  w1 ^= randRNG8(); // Whiten.
    4c64:	0e 94 a4 21 	call	0x4348	; 0x4348 <randRNG8()>
    4c68:	18 27       	eor	r17, r24
  w1 ^= (w1 << 3); // Mix.
    4c6a:	81 2f       	mov	r24, r17
    4c6c:	88 0f       	add	r24, r24
    4c6e:	88 0f       	add	r24, r24
    4c70:	88 0f       	add	r24, r24
    4c72:	81 27       	eor	r24, r17
  w1 ^=  _crc_ibutton_update(cycleCountCPU() ^ (uint8_t)(intptr_t)&v, ++count8 - v); // Whiten.
    4c74:	96 b5       	in	r25, 0x26	; 38
    4c76:	40 91 75 03 	lds	r20, 0x0375
    4c7a:	4f 5f       	subi	r20, 0xFF	; 255
    4c7c:	40 93 75 03 	sts	0x0375, r20
		"	brtc	2f" "\n\t"
		"	eor	%0, %2" "\n\t"
		"2:	dec	%1" "\n\t"
		"	brne	1b" "\n\t"
		: "=r" (__crc), "=d" (__i), "=d" (__pattern)
		: "0" (__crc), "r" (__data));
    4c80:	9e 01       	movw	r18, r28
    4c82:	2f 5f       	subi	r18, 0xFF	; 255
    4c84:	3f 4f       	sbci	r19, 0xFF	; 255
    4c86:	92 27       	eor	r25, r18
    4c88:	29 81       	ldd	r18, Y+1	; 0x01
    4c8a:	42 1b       	sub	r20, r18
    4c8c:	94 27       	eor	r25, r20
    4c8e:	28 e0       	ldi	r18, 0x08	; 8
    4c90:	3c e8       	ldi	r19, 0x8C	; 140
    4c92:	90 fb       	bst	r25, 0
    4c94:	96 95       	lsr	r25
    4c96:	0e f4       	brtc	.+2      	; 0x4c9a <getSecureRandomByte()+0x60>
    4c98:	93 27       	eor	r25, r19
    4c9a:	2a 95       	dec	r18
    4c9c:	d1 f7       	brne	.-12     	; 0x4c92 <getSecureRandomByte()+0x58>
  return(w1);
  }
    4c9e:	89 27       	eor	r24, r25
    4ca0:	0f 90       	pop	r0
    4ca2:	cf 91       	pop	r28
    4ca4:	df 91       	pop	r29
    4ca6:	1f 91       	pop	r17
    4ca8:	0f 91       	pop	r16
    4caa:	08 95       	ret

00004cac <_debug_serial_timestamp()>:


#ifdef DEBUG // Don't emit debug-support code unless in DEBUG.

// Print timestamp with no newline in format: MinutesSinceMidnight:Seconds:SubCycleTime
void _debug_serial_timestamp()
    4cac:	ff 92       	push	r15
    4cae:	0f 93       	push	r16
    4cb0:	1f 93       	push	r17
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    4cb2:	0e 94 04 21 	call	0x4208	; 0x4208 <powerUpSerialIfDisabled()>
    4cb6:	f8 2e       	mov	r15, r24
  // Grab time values ASAP, fastest-incrementing first.
  // TODO: could lock out interrupts to capture atomically.
  const uint8_t ss = getSubCycleTime();
    4cb8:	00 91 b2 00 	lds	r16, 0x00B2
  const uint8_t s = getSecondsLT();
    4cbc:	10 91 70 03 	lds	r17, 0x0370
  const uint16_t m = getMinutesSinceMidnightLT();
    4cc0:	0e 94 33 24 	call	0x4866	; 0x4866 <getMinutesSinceMidnightLT()>
    4cc4:	bc 01       	movw	r22, r24
  Serial.print(m);
    4cc6:	8a e1       	ldi	r24, 0x1A	; 26
    4cc8:	95 e0       	ldi	r25, 0x05	; 5
    4cca:	4a e0       	ldi	r20, 0x0A	; 10
    4ccc:	50 e0       	ldi	r21, 0x00	; 0
    4cce:	0e 94 0f 3c 	call	0x781e	; 0x781e <Print::print(unsigned int, int)>
  Serial.print(':'); Serial.print(s);
    4cd2:	8a e1       	ldi	r24, 0x1A	; 26
    4cd4:	95 e0       	ldi	r25, 0x05	; 5
    4cd6:	6a e3       	ldi	r22, 0x3A	; 58
    4cd8:	0e 94 44 3b 	call	0x7688	; 0x7688 <Print::print(char)>
    4cdc:	8a e1       	ldi	r24, 0x1A	; 26
    4cde:	95 e0       	ldi	r25, 0x05	; 5
    4ce0:	61 2f       	mov	r22, r17
    4ce2:	4a e0       	ldi	r20, 0x0A	; 10
    4ce4:	50 e0       	ldi	r21, 0x00	; 0
    4ce6:	0e 94 20 3c 	call	0x7840	; 0x7840 <Print::print(unsigned char, int)>
  Serial.print(':'); Serial.print(ss);
    4cea:	8a e1       	ldi	r24, 0x1A	; 26
    4cec:	95 e0       	ldi	r25, 0x05	; 5
    4cee:	6a e3       	ldi	r22, 0x3A	; 58
    4cf0:	0e 94 44 3b 	call	0x7688	; 0x7688 <Print::print(char)>
    4cf4:	8a e1       	ldi	r24, 0x1A	; 26
    4cf6:	95 e0       	ldi	r25, 0x05	; 5
    4cf8:	60 2f       	mov	r22, r16
    4cfa:	4a e0       	ldi	r20, 0x0A	; 10
    4cfc:	50 e0       	ldi	r21, 0x00	; 0
    4cfe:	0e 94 20 3c 	call	0x7840	; 0x7840 <Print::print(unsigned char, int)>
  _flush();
    4d02:	0e 94 ef 20 	call	0x41de	; 0x41de <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    4d06:	ff 20       	and	r15, r15
    4d08:	11 f0       	breq	.+4      	; 0x4d0e <_debug_serial_timestamp()+0x62>
    4d0a:	0e 94 b9 20 	call	0x4172	; 0x4172 <powerDownSerial()>
  }
    4d0e:	1f 91       	pop	r17
    4d10:	0f 91       	pop	r16
    4d12:	ff 90       	pop	r15
    4d14:	08 95       	ret

00004d16 <serialPrintAndFlush(unsigned int, int)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) number to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(const unsigned u, const int fmt)
    4d16:	df 92       	push	r13
    4d18:	ef 92       	push	r14
    4d1a:	ff 92       	push	r15
    4d1c:	0f 93       	push	r16
    4d1e:	1f 93       	push	r17
    4d20:	8c 01       	movw	r16, r24
    4d22:	7b 01       	movw	r14, r22
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    4d24:	0e 94 04 21 	call	0x4208	; 0x4208 <powerUpSerialIfDisabled()>
    4d28:	d8 2e       	mov	r13, r24
  // Send the character.
  Serial.print(u, fmt);
    4d2a:	8a e1       	ldi	r24, 0x1A	; 26
    4d2c:	95 e0       	ldi	r25, 0x05	; 5
    4d2e:	b8 01       	movw	r22, r16
    4d30:	a7 01       	movw	r20, r14
    4d32:	0e 94 0f 3c 	call	0x781e	; 0x781e <Print::print(unsigned int, int)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    4d36:	0e 94 ef 20 	call	0x41de	; 0x41de <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    4d3a:	dd 20       	and	r13, r13
    4d3c:	11 f0       	breq	.+4      	; 0x4d42 <serialPrintAndFlush(unsigned int, int)+0x2c>
    4d3e:	0e 94 b9 20 	call	0x4172	; 0x4172 <powerDownSerial()>
  }
    4d42:	1f 91       	pop	r17
    4d44:	0f 91       	pop	r16
    4d46:	ff 90       	pop	r15
    4d48:	ef 90       	pop	r14
    4d4a:	df 90       	pop	r13
    4d4c:	08 95       	ret

00004d4e <serialPrintAndFlush(char)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) character to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(const char c)
    4d4e:	0f 93       	push	r16
    4d50:	1f 93       	push	r17
    4d52:	18 2f       	mov	r17, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    4d54:	0e 94 04 21 	call	0x4208	; 0x4208 <powerUpSerialIfDisabled()>
    4d58:	08 2f       	mov	r16, r24
  // Send the character.
  Serial.print(c);
    4d5a:	8a e1       	ldi	r24, 0x1A	; 26
    4d5c:	95 e0       	ldi	r25, 0x05	; 5
    4d5e:	61 2f       	mov	r22, r17
    4d60:	0e 94 44 3b 	call	0x7688	; 0x7688 <Print::print(char)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    4d64:	0e 94 ef 20 	call	0x41de	; 0x41de <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    4d68:	00 23       	and	r16, r16
    4d6a:	11 f0       	breq	.+4      	; 0x4d70 <serialPrintAndFlush(char)+0x22>
    4d6c:	0e 94 b9 20 	call	0x4172	; 0x4172 <powerDownSerial()>
  }
    4d70:	1f 91       	pop	r17
    4d72:	0f 91       	pop	r16
    4d74:	08 95       	ret

00004d76 <serialPrintlnAndFlush()>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write line-end to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintlnAndFlush()
    4d76:	1f 93       	push	r17
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    4d78:	0e 94 04 21 	call	0x4208	; 0x4208 <powerUpSerialIfDisabled()>
    4d7c:	18 2f       	mov	r17, r24
  // Send the text.
  Serial.println();
    4d7e:	8a e1       	ldi	r24, 0x1A	; 26
    4d80:	95 e0       	ldi	r25, 0x05	; 5
    4d82:	0e 94 4c 3b 	call	0x7698	; 0x7698 <Print::println()>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    4d86:	0e 94 ef 20 	call	0x41de	; 0x41de <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    4d8a:	11 23       	and	r17, r17
    4d8c:	11 f0       	breq	.+4      	; 0x4d92 <serialPrintlnAndFlush()+0x1c>
    4d8e:	0e 94 b9 20 	call	0x4172	; 0x4172 <powerDownSerial()>
  }
    4d92:	1f 91       	pop	r17
    4d94:	08 95       	ret

00004d96 <serialPrintAndFlush(int, int)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) number to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(const int i, const int fmt)
    4d96:	df 92       	push	r13
    4d98:	ef 92       	push	r14
    4d9a:	ff 92       	push	r15
    4d9c:	0f 93       	push	r16
    4d9e:	1f 93       	push	r17
    4da0:	8c 01       	movw	r16, r24
    4da2:	7b 01       	movw	r14, r22
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    4da4:	0e 94 04 21 	call	0x4208	; 0x4208 <powerUpSerialIfDisabled()>
    4da8:	d8 2e       	mov	r13, r24
  // Send the character.
  Serial.print(i, fmt);
    4daa:	8a e1       	ldi	r24, 0x1A	; 26
    4dac:	95 e0       	ldi	r25, 0x05	; 5
    4dae:	b8 01       	movw	r22, r16
    4db0:	a7 01       	movw	r20, r14
    4db2:	0e 94 72 3c 	call	0x78e4	; 0x78e4 <Print::print(int, int)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    4db6:	0e 94 ef 20 	call	0x41de	; 0x41de <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    4dba:	dd 20       	and	r13, r13
    4dbc:	11 f0       	breq	.+4      	; 0x4dc2 <serialPrintAndFlush(int, int)+0x2c>
    4dbe:	0e 94 b9 20 	call	0x4172	; 0x4172 <powerDownSerial()>
  }
    4dc2:	1f 91       	pop	r17
    4dc4:	0f 91       	pop	r16
    4dc6:	ff 90       	pop	r15
    4dc8:	ef 90       	pop	r14
    4dca:	df 90       	pop	r13
    4dcc:	08 95       	ret

00004dce <serialPrintAndFlush(char const*)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (read-only) string to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(const char * const text)
    4dce:	ff 92       	push	r15
    4dd0:	0f 93       	push	r16
    4dd2:	1f 93       	push	r17
    4dd4:	8c 01       	movw	r16, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    4dd6:	0e 94 04 21 	call	0x4208	; 0x4208 <powerUpSerialIfDisabled()>
    4dda:	f8 2e       	mov	r15, r24
  // Send the text.
  Serial.print(text);
    4ddc:	8a e1       	ldi	r24, 0x1A	; 26
    4dde:	95 e0       	ldi	r25, 0x05	; 5
    4de0:	b8 01       	movw	r22, r16
    4de2:	0e 94 85 3c 	call	0x790a	; 0x790a <Print::print(char const*)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    4de6:	0e 94 ef 20 	call	0x41de	; 0x41de <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    4dea:	ff 20       	and	r15, r15
    4dec:	11 f0       	breq	.+4      	; 0x4df2 <serialPrintAndFlush(char const*)+0x24>
    4dee:	0e 94 b9 20 	call	0x4172	; 0x4172 <powerDownSerial()>
  }
    4df2:	1f 91       	pop	r17
    4df4:	0f 91       	pop	r16
    4df6:	ff 90       	pop	r15
    4df8:	08 95       	ret

00004dfa <serialPrintAndFlush(__FlashStringHelper const*)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) string to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(__FlashStringHelper const * const text)
    4dfa:	ff 92       	push	r15
    4dfc:	0f 93       	push	r16
    4dfe:	1f 93       	push	r17
    4e00:	8c 01       	movw	r16, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    4e02:	0e 94 04 21 	call	0x4208	; 0x4208 <powerUpSerialIfDisabled()>
    4e06:	f8 2e       	mov	r15, r24
  // Send the text.
  Serial.print(text);
    4e08:	8a e1       	ldi	r24, 0x1A	; 26
    4e0a:	95 e0       	ldi	r25, 0x05	; 5
    4e0c:	b8 01       	movw	r22, r16
    4e0e:	0e 94 21 3b 	call	0x7642	; 0x7642 <Print::print(__FlashStringHelper const*)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    4e12:	0e 94 ef 20 	call	0x41de	; 0x41de <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    4e16:	ff 20       	and	r15, r15
    4e18:	11 f0       	breq	.+4      	; 0x4e1e <serialPrintAndFlush(__FlashStringHelper const*)+0x24>
    4e1a:	0e 94 b9 20 	call	0x4172	; 0x4172 <powerDownSerial()>
  }
    4e1e:	1f 91       	pop	r17
    4e20:	0f 91       	pop	r16
    4e22:	ff 90       	pop	r15
    4e24:	08 95       	ret

00004e26 <serialPrintlnAndFlush(__FlashStringHelper const*)>:
// Flush to use for all serialPrintXXX() and DEBUG_PRINTXXX routines.
#define _flush() flushSerialSCTSensitive()

// Write a single (Flash-resident) string to serial followed by line-end and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintlnAndFlush(__FlashStringHelper const * const line)
    4e26:	ff 92       	push	r15
    4e28:	0f 93       	push	r16
    4e2a:	1f 93       	push	r17
    4e2c:	8c 01       	movw	r16, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    4e2e:	0e 94 04 21 	call	0x4208	; 0x4208 <powerUpSerialIfDisabled()>
    4e32:	f8 2e       	mov	r15, r24
  // Send the line of text followed by line end.
  Serial.println(line);
    4e34:	8a e1       	ldi	r24, 0x1A	; 26
    4e36:	95 e0       	ldi	r25, 0x05	; 5
    4e38:	b8 01       	movw	r22, r16
    4e3a:	0e 94 6c 3b 	call	0x76d8	; 0x76d8 <Print::println(__FlashStringHelper const*)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    4e3e:	0e 94 ef 20 	call	0x41de	; 0x41de <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    4e42:	ff 20       	and	r15, r15
    4e44:	11 f0       	breq	.+4      	; 0x4e4a <serialPrintlnAndFlush(__FlashStringHelper const*)+0x24>
    4e46:	0e 94 b9 20 	call	0x4172	; 0x4172 <powerDownSerial()>
  }
    4e4a:	1f 91       	pop	r17
    4e4c:	0f 91       	pop	r16
    4e4e:	ff 90       	pop	r15
    4e50:	08 95       	ret

00004e52 <resetCLIActiveTimer()>:
#define CLI_DEFAULT_TIMEOUT_M 2
static volatile uint8_t CLITimeoutM = CLI_DEFAULT_TIMEOUT_M;

// Reset CLI active timer to the full whack before it goes inactive again (ie makes CLI active for a while).
// Thread-safe.
void resetCLIActiveTimer() { CLITimeoutM = CLI_DEFAULT_TIMEOUT_M; }
    4e52:	82 e0       	ldi	r24, 0x02	; 2
    4e54:	80 93 3b 01 	sts	0x013B, r24
    4e58:	08 95       	ret

00004e5a <isCLIActive()>:

// Returns true if the CLI is active, at least intermittently.
// Thread-safe.
bool isCLIActive() { return(0 != CLITimeoutM); }
    4e5a:	80 91 3b 01 	lds	r24, 0x013B
    4e5e:	81 11       	cpse	r24, r1
    4e60:	81 e0       	ldi	r24, 0x01	; 1
    4e62:	08 95       	ret

00004e64 <markUIControlUsed()>:
// Record local manual operation of a local physical UI control, eg not remote or via CLI.
// To be thread-safe, everything that this touches or calls must be.
// Thread-safe.
void markUIControlUsed()
  {
  statusChange = true; // Note user interaction with the system.
    4e64:	81 e0       	ldi	r24, 0x01	; 1
    4e66:	80 93 b7 03 	sts	0x03B7, r24
  uiTimeoutM = UI_DEFAULT_TIMEOUT_M; // Ensure that UI controls are kept 'warm' for a little while.
    4e6a:	92 e0       	ldi	r25, 0x02	; 2
    4e6c:	90 93 b5 03 	sts	0x03B5, r25
#define CLI_DEFAULT_TIMEOUT_M 2
static volatile uint8_t CLITimeoutM = CLI_DEFAULT_TIMEOUT_M;

// Reset CLI active timer to the full whack before it goes inactive again (ie makes CLI active for a while).
// Thread-safe.
void resetCLIActiveTimer() { CLITimeoutM = CLI_DEFAULT_TIMEOUT_M; }
    4e70:	90 93 3b 01 	sts	0x013B, r25
    // Do not call based on internal/synthetic events.
    // Such evidence may include operation of buttons (etc) on the unit or PIR.
    // Do not call from (for example) 'on' schedule change.
    // Makes occupation immediately visible.
    // Thread-safe and ISR-safe.
    void markAsOccupied() { value = 100; occupationCountdownM = OCCUPATION_TIMEOUT_M; activityCountdownM = 2; }
    4e74:	84 e6       	ldi	r24, 0x64	; 100
    4e76:	80 93 14 02 	sts	0x0214, r24
    4e7a:	82 e3       	ldi	r24, 0x32	; 50
    4e7c:	80 93 15 02 	sts	0x0215, r24
    4e80:	90 93 16 02 	sts	0x0216, r25
  uiTimeoutM = UI_DEFAULT_TIMEOUT_M; // Ensure that UI controls are kept 'warm' for a little while.
  // Make CLI active for a while (at some slight possibly-significant energy cost).
  resetCLIActiveTimer(); // Thread-safe.
  // User operation of controls locally is strong indication of presence.
  Occupancy.markAsOccupied(); // Thread-safe.
  }
    4e84:	08 95       	ret

00004e86 <recentUIControlUse()>:

// True if a manual UI control has been recently (seconds to minutes ago) operated.
// Thread-safe.
bool recentUIControlUse() { return(0 != uiTimeoutM); }
    4e86:	80 91 b5 03 	lds	r24, 0x03B5
    4e8a:	81 11       	cpse	r24, r1
    4e8c:	81 e0       	ldi	r24, 0x01	; 1
    4e8e:	08 95       	ret

00004e90 <Serial_print_space()>:
    }
  }


// Prints a single space to Serial (which must be up and running).
static void Serial_print_space() { Serial.print(' '); }
    4e90:	8a e1       	ldi	r24, 0x1A	; 26
    4e92:	95 e0       	ldi	r25, 0x05	; 5
    4e94:	60 e2       	ldi	r22, 0x20	; 32
    4e96:	0e 94 44 3b 	call	0x7688	; 0x7688 <Print::print(char)>
    4e9a:	08 95       	ret

00004e9c <InvalidIgnored()>:
  Serial.println();
  }

// Prints warning to serial (that must be up and running) that invalid (CLI) input has been ignored.
// Probably should not be inlined, to avoid creating duplicate strings in Flash.
static void InvalidIgnored() { Serial.println(F("Invalid, ignored.")); }
    4e9c:	8a e1       	ldi	r24, 0x1A	; 26
    4e9e:	95 e0       	ldi	r25, 0x05	; 5
    4ea0:	66 ea       	ldi	r22, 0xA6	; 166
    4ea2:	73 e0       	ldi	r23, 0x03	; 3
    4ea4:	0e 94 6c 3b 	call	0x76d8	; 0x76d8 <Print::println(__FlashStringHelper const*)>
    4ea8:	08 95       	ret

00004eaa <printCLILine(unsigned char, char, __FlashStringHelper const*)>:
  for(int8_t padding = SYNTAX_COL_WIDTH - strlen_P((const char *)syntax); --padding >= 0; ) { Serial_print_space(); }
  Serial.println(description);
  }
// Efficiently print a single line given a single-char syntax element and the description, both non-null.
// NOTE: will skip the description if getting close to the end of the time deadline to avoid overrun.
static void printCLILine(const uint8_t deadline, const char syntax, __FlashStringHelper const *description)
    4eaa:	1f 93       	push	r17
    4eac:	cf 93       	push	r28
    4eae:	df 93       	push	r29
    4eb0:	18 2f       	mov	r17, r24
    4eb2:	ea 01       	movw	r28, r20
  {
  Serial.print(syntax);
    4eb4:	8a e1       	ldi	r24, 0x1A	; 26
    4eb6:	95 e0       	ldi	r25, 0x05	; 5
    4eb8:	0e 94 44 3b 	call	0x7688	; 0x7688 <Print::print(char)>
  flushSerialProductive(); // Ensure all pending output is flushed before sampling current position in minor cycle.
    4ebc:	0e 94 e3 20 	call	0x41c6	; 0x41c6 <flushSerialProductive()>
  if(getSubCycleTime() >= deadline) { Serial.println(); return; }
    4ec0:	80 91 b2 00 	lds	r24, 0x00B2
    4ec4:	81 17       	cp	r24, r17
    4ec6:	10 f4       	brcc	.+4      	; 0x4ecc <printCLILine(unsigned char, char, __FlashStringHelper const*)+0x22>
    4ec8:	19 e0       	ldi	r17, 0x09	; 9
    4eca:	07 c0       	rjmp	.+14     	; 0x4eda <printCLILine(unsigned char, char, __FlashStringHelper const*)+0x30>
    4ecc:	8a e1       	ldi	r24, 0x1A	; 26
    4ece:	95 e0       	ldi	r25, 0x05	; 5
    4ed0:	0e 94 4c 3b 	call	0x7698	; 0x7698 <Print::println()>
    4ed4:	09 c0       	rjmp	.+18     	; 0x4ee8 <printCLILine(unsigned char, char, __FlashStringHelper const*)+0x3e>
  for(int8_t padding = SYNTAX_COL_WIDTH - 1; --padding >= 0; ) { Serial_print_space(); }
    4ed6:	0e 94 48 27 	call	0x4e90	; 0x4e90 <Serial_print_space()>
    4eda:	11 50       	subi	r17, 0x01	; 1
    4edc:	e0 f7       	brcc	.-8      	; 0x4ed6 <printCLILine(unsigned char, char, __FlashStringHelper const*)+0x2c>
  Serial.println(description);
    4ede:	8a e1       	ldi	r24, 0x1A	; 26
    4ee0:	95 e0       	ldi	r25, 0x05	; 5
    4ee2:	be 01       	movw	r22, r28
    4ee4:	0e 94 6c 3b 	call	0x76d8	; 0x76d8 <Print::println(__FlashStringHelper const*)>
  }
    4ee8:	df 91       	pop	r29
    4eea:	cf 91       	pop	r28
    4eec:	1f 91       	pop	r17
    4eee:	08 95       	ret

00004ef0 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)>:
#define CLI_PRINT_OH_SCT ((uint8_t)(GSCT_MAX/4))
// Deadline in minor cycle by which to stop printing description.
#define STOP_PRINTING_DESCRIPTION_AT ((uint8_t)(GSCT_MAX-CLI_PRINT_OH_SCT))
// Efficiently print a single line given the syntax element and the description, both non-null.
// NOTE: will skip the description if getting close to the end of the time deadline to avoid overrun.
static void printCLILine(const uint8_t deadline, __FlashStringHelper const *syntax, __FlashStringHelper const *description)
    4ef0:	ef 92       	push	r14
    4ef2:	ff 92       	push	r15
    4ef4:	1f 93       	push	r17
    4ef6:	cf 93       	push	r28
    4ef8:	df 93       	push	r29
    4efa:	18 2f       	mov	r17, r24
    4efc:	eb 01       	movw	r28, r22
    4efe:	7a 01       	movw	r14, r20
  {
  Serial.print(syntax);
    4f00:	8a e1       	ldi	r24, 0x1A	; 26
    4f02:	95 e0       	ldi	r25, 0x05	; 5
    4f04:	0e 94 21 3b 	call	0x7642	; 0x7642 <Print::print(__FlashStringHelper const*)>
  flushSerialProductive(); // Ensure all pending output is flushed before sampling current position in minor cycle.
    4f08:	0e 94 e3 20 	call	0x41c6	; 0x41c6 <flushSerialProductive()>
  if(getSubCycleTime() >= deadline) { Serial.println(); return; }
    4f0c:	80 91 b2 00 	lds	r24, 0x00B2
    4f10:	81 17       	cp	r24, r17
    4f12:	28 f0       	brcs	.+10     	; 0x4f1e <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)+0x2e>
    4f14:	8a e1       	ldi	r24, 0x1A	; 26
    4f16:	95 e0       	ldi	r25, 0x05	; 5
    4f18:	0e 94 4c 3b 	call	0x7698	; 0x7698 <Print::println()>
    4f1c:	10 c0       	rjmp	.+32     	; 0x4f3e <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)+0x4e>
  for(int8_t padding = SYNTAX_COL_WIDTH - strlen_P((const char *)syntax); --padding >= 0; ) { Serial_print_space(); }
    4f1e:	ce 01       	movw	r24, r28
    4f20:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <strlen_P>
    4f24:	1a e0       	ldi	r17, 0x0A	; 10
    4f26:	18 1b       	sub	r17, r24
    4f28:	02 c0       	rjmp	.+4      	; 0x4f2e <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)+0x3e>
    4f2a:	0e 94 48 27 	call	0x4e90	; 0x4e90 <Serial_print_space()>
    4f2e:	11 50       	subi	r17, 0x01	; 1
    4f30:	17 ff       	sbrs	r17, 7
    4f32:	fb cf       	rjmp	.-10     	; 0x4f2a <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)+0x3a>
  Serial.println(description);
    4f34:	8a e1       	ldi	r24, 0x1A	; 26
    4f36:	95 e0       	ldi	r25, 0x05	; 5
    4f38:	b7 01       	movw	r22, r14
    4f3a:	0e 94 6c 3b 	call	0x76d8	; 0x76d8 <Print::println(__FlashStringHelper const*)>
  }
    4f3e:	df 91       	pop	r29
    4f40:	cf 91       	pop	r28
    4f42:	1f 91       	pop	r17
    4f44:	ff 90       	pop	r15
    4f46:	ef 90       	pop	r14
    4f48:	08 95       	ret

00004f4a <dumpCLIUsage(unsigned char)>:
  Serial.println(description);
  }

// Dump some brief CLI usage instructions to serial TX, which must be up and running.
// If this gets too big there is a risk of overrunning and missing the next tick...
static void dumpCLIUsage(const uint8_t stopBy)
    4f4a:	1f 93       	push	r17
    4f4c:	df 93       	push	r29
    4f4e:	cf 93       	push	r28
    4f50:	00 d0       	rcall	.+0      	; 0x4f52 <dumpCLIUsage(unsigned char)+0x8>
    4f52:	00 d0       	rcall	.+0      	; 0x4f54 <dumpCLIUsage(unsigned char)+0xa>
    4f54:	cd b7       	in	r28, 0x3d	; 61
    4f56:	de b7       	in	r29, 0x3e	; 62
    4f58:	8c 83       	std	Y+4, r24	; 0x04
  {
  const uint8_t deadline = fnmin((uint8_t)(stopBy - fnmin(stopBy,CLI_PRINT_OH_SCT)), STOP_PRINTING_DESCRIPTION_AT);
    4f5a:	98 2f       	mov	r25, r24
    4f5c:	8f e3       	ldi	r24, 0x3F	; 63
    4f5e:	89 83       	std	Y+1, r24	; 0x01
    4f60:	89 2f       	mov	r24, r25
    4f62:	90 34       	cpi	r25, 0x40	; 64
    4f64:	08 f0       	brcs	.+2      	; 0x4f68 <dumpCLIUsage(unsigned char)+0x1e>
    4f66:	8f e3       	ldi	r24, 0x3F	; 63
    4f68:	98 1b       	sub	r25, r24
    4f6a:	9a 83       	std	Y+2, r25	; 0x02
    4f6c:	80 ec       	ldi	r24, 0xC0	; 192
    4f6e:	8b 83       	std	Y+3, r24	; 0x03
    4f70:	19 2f       	mov	r17, r25
    4f72:	91 3c       	cpi	r25, 0xC1	; 193
    4f74:	08 f0       	brcs	.+2      	; 0x4f78 <dumpCLIUsage(unsigned char)+0x2e>
    4f76:	10 ec       	ldi	r17, 0xC0	; 192
  Serial.println();
    4f78:	8a e1       	ldi	r24, 0x1A	; 26
    4f7a:	95 e0       	ldi	r25, 0x05	; 5
    4f7c:	0e 94 4c 3b 	call	0x7698	; 0x7698 <Print::println()>
  //Serial.println(F("CLI usage:"));
  printCLILine(deadline, '?', F("this help"));
    4f80:	81 2f       	mov	r24, r17
    4f82:	6f e3       	ldi	r22, 0x3F	; 63
    4f84:	4c e9       	ldi	r20, 0x9C	; 156
    4f86:	53 e0       	ldi	r21, 0x03	; 3
    4f88:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <printCLILine(unsigned char, char, __FlashStringHelper const*)>
#ifdef ENABLE_BOILER_HUB
  printCLILine(deadline, F("C M"), F("Central hub >=M mins on, 0 off"));
    4f8c:	81 2f       	mov	r24, r17
    4f8e:	68 e9       	ldi	r22, 0x98	; 152
    4f90:	73 e0       	ldi	r23, 0x03	; 3
    4f92:	49 e7       	ldi	r20, 0x79	; 121
    4f94:	53 e0       	ldi	r21, 0x03	; 3
    4f96:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)>
#endif
  printCLILine(deadline, F("D N"), F("Dump stats set N"));
    4f9a:	81 2f       	mov	r24, r17
    4f9c:	65 e7       	ldi	r22, 0x75	; 117
    4f9e:	73 e0       	ldi	r23, 0x03	; 3
    4fa0:	44 e6       	ldi	r20, 0x64	; 100
    4fa2:	53 e0       	ldi	r21, 0x03	; 3
    4fa4:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine(deadline, 'E', F("Exit CLI"));
    4fa8:	81 2f       	mov	r24, r17
    4faa:	65 e4       	ldi	r22, 0x45	; 69
    4fac:	4b e5       	ldi	r20, 0x5B	; 91
    4fae:	53 e0       	ldi	r21, 0x03	; 3
    4fb0:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <printCLILine(unsigned char, char, __FlashStringHelper const*)>
  printCLILine(deadline, 'F', F("Frost"));
    4fb4:	81 2f       	mov	r24, r17
    4fb6:	66 e4       	ldi	r22, 0x46	; 70
    4fb8:	45 e5       	ldi	r20, 0x55	; 85
    4fba:	53 e0       	ldi	r21, 0x03	; 3
    4fbc:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <printCLILine(unsigned char, char, __FlashStringHelper const*)>
#if defined(SETTABLE_TARGET_TEMPERATURES) && !defined(TEMP_POT_AVAILABLE)
  printCLILine(deadline, F("F CC"), F("set Frost/setback temp CC"));
#endif
#if defined(USE_MODULE_FHT8VSIMPLE) && defined(LOCAL_TRV)
  printCLILine(deadline, F("H H1 H2"), F("set FHT8V House codes 1&2"));
    4fc0:	81 2f       	mov	r24, r17
    4fc2:	6d e4       	ldi	r22, 0x4D	; 77
    4fc4:	73 e0       	ldi	r23, 0x03	; 3
    4fc6:	43 e3       	ldi	r20, 0x33	; 51
    4fc8:	53 e0       	ldi	r21, 0x03	; 3
    4fca:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine(deadline, 'H', F("clear House codes"));
    4fce:	81 2f       	mov	r24, r17
    4fd0:	68 e4       	ldi	r22, 0x48	; 72
    4fd2:	41 e2       	ldi	r20, 0x21	; 33
    4fd4:	53 e0       	ldi	r21, 0x03	; 3
    4fd6:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <printCLILine(unsigned char, char, __FlashStringHelper const*)>
#endif
  printCLILine(deadline, 'I', F("new ID"));
    4fda:	81 2f       	mov	r24, r17
    4fdc:	69 e4       	ldi	r22, 0x49	; 73
    4fde:	4a e1       	ldi	r20, 0x1A	; 26
    4fe0:	53 e0       	ldi	r21, 0x03	; 3
    4fe2:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <printCLILine(unsigned char, char, __FlashStringHelper const*)>
  //printCLILine(deadline, 'L', F("Learn to warm every 24h from now, clear if in frost mode, schedule 0"));
  printCLILine(deadline, F("L S"), F("Learn daily warm now, clear if in frost mode, schedule S"));
    4fe6:	81 2f       	mov	r24, r17
    4fe8:	66 e1       	ldi	r22, 0x16	; 22
    4fea:	73 e0       	ldi	r23, 0x03	; 3
    4fec:	4d ed       	ldi	r20, 0xDD	; 221
    4fee:	52 e0       	ldi	r21, 0x02	; 2
    4ff0:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)>
  //printCLILine(deadline, F("P HH MM"), F("Program: warm daily starting at HH MM schedule 0"));
  printCLILine(deadline, F("P HH MM S"), F("Program: warm daily starting at HH MM schedule S"));
    4ff4:	81 2f       	mov	r24, r17
    4ff6:	63 ed       	ldi	r22, 0xD3	; 211
    4ff8:	72 e0       	ldi	r23, 0x02	; 2
    4ffa:	42 ea       	ldi	r20, 0xA2	; 162
    4ffc:	52 e0       	ldi	r21, 0x02	; 2
    4ffe:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine(deadline, F("O PP"), F("min % for valve to be Open"));
    5002:	81 2f       	mov	r24, r17
    5004:	6d e9       	ldi	r22, 0x9D	; 157
    5006:	72 e0       	ldi	r23, 0x02	; 2
    5008:	42 e8       	ldi	r20, 0x82	; 130
    500a:	52 e0       	ldi	r21, 0x02	; 2
    500c:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine(deadline, 'O', F("reset Open %"));
    5010:	81 2f       	mov	r24, r17
    5012:	6f e4       	ldi	r22, 0x4F	; 79
    5014:	45 e7       	ldi	r20, 0x75	; 117
    5016:	52 e0       	ldi	r21, 0x02	; 2
    5018:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <printCLILine(unsigned char, char, __FlashStringHelper const*)>
#ifdef SUPPORT_BAKE
  printCLILine(deadline, 'Q', F("Quick Heat"));
    501c:	81 2f       	mov	r24, r17
    501e:	61 e5       	ldi	r22, 0x51	; 81
    5020:	4a e6       	ldi	r20, 0x6A	; 106
    5022:	52 e0       	ldi	r21, 0x02	; 2
    5024:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <printCLILine(unsigned char, char, __FlashStringHelper const*)>
#endif
//  printCLILine(deadline, F("R N"), F("dump Raw stats set N"));
  printCLILine(deadline, 'S', F("show Status"));
    5028:	81 2f       	mov	r24, r17
    502a:	63 e5       	ldi	r22, 0x53	; 83
    502c:	4e e5       	ldi	r20, 0x5E	; 94
    502e:	52 e0       	ldi	r21, 0x02	; 2
    5030:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <printCLILine(unsigned char, char, __FlashStringHelper const*)>
  printCLILine(deadline, F("T HH MM"), F("set 24h Time"));
    5034:	81 2f       	mov	r24, r17
    5036:	66 e5       	ldi	r22, 0x56	; 86
    5038:	72 e0       	ldi	r23, 0x02	; 2
    503a:	49 e4       	ldi	r20, 0x49	; 73
    503c:	52 e0       	ldi	r21, 0x02	; 2
    503e:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine(deadline, 'W', F("Warm"));
    5042:	81 2f       	mov	r24, r17
    5044:	67 e5       	ldi	r22, 0x57	; 87
    5046:	44 e4       	ldi	r20, 0x44	; 68
    5048:	52 e0       	ldi	r21, 0x02	; 2
    504a:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <printCLILine(unsigned char, char, __FlashStringHelper const*)>
  printCLILine(deadline, 'V', F("sys Version"));
    504e:	81 2f       	mov	r24, r17
    5050:	66 e5       	ldi	r22, 0x56	; 86
    5052:	48 e3       	ldi	r20, 0x38	; 56
    5054:	52 e0       	ldi	r21, 0x02	; 2
    5056:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <printCLILine(unsigned char, char, __FlashStringHelper const*)>
#if defined(SETTABLE_TARGET_TEMPERATURES) && !defined(TEMP_POT_AVAILABLE)
  printCLILine(deadline, F("W CC"), F("set Warm temp CC"));
#endif
  printCLILine(deadline, 'X', F("Xmit security level; 0 always, 255 never"));
    505a:	81 2f       	mov	r24, r17
    505c:	68 e5       	ldi	r22, 0x58	; 88
    505e:	4f e0       	ldi	r20, 0x0F	; 15
    5060:	52 e0       	ldi	r21, 0x02	; 2
    5062:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <printCLILine(unsigned char, char, __FlashStringHelper const*)>
  printCLILine(deadline, 'Z', F("Zap stats"));
    5066:	81 2f       	mov	r24, r17
    5068:	6a e5       	ldi	r22, 0x5A	; 90
    506a:	45 e0       	ldi	r20, 0x05	; 5
    506c:	52 e0       	ldi	r21, 0x02	; 2
    506e:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <printCLILine(unsigned char, char, __FlashStringHelper const*)>
  Serial.println();
    5072:	8a e1       	ldi	r24, 0x1A	; 26
    5074:	95 e0       	ldi	r25, 0x05	; 5
    5076:	0e 94 4c 3b 	call	0x7698	; 0x7698 <Print::println()>
  }
    507a:	0f 90       	pop	r0
    507c:	0f 90       	pop	r0
    507e:	0f 90       	pop	r0
    5080:	0f 90       	pop	r0
    5082:	cf 91       	pop	r28
    5084:	df 91       	pop	r29
    5086:	1f 91       	pop	r17
    5088:	08 95       	ret

0000508a <handleLEARN(unsigned char)>:
#ifdef LEARN_BUTTON_AVAILABLE
// Handle learn button(s).
// First/primary button is 0, second is 1, etc.
// In simple mode: if in frost mode clear simple schedule else set repeat for every 24h from now.
// May be called from pushbutton or CLI UI components.
static void handleLEARN(const uint8_t which)
    508a:	1f 93       	push	r17
    508c:	18 2f       	mov	r17, r24
  {
  // Set simple schedule starting every 24h from a little before now and running for an hour or so.  
  if(inWarmMode()) { setSimpleSchedule(getMinutesSinceMidnightLT(), which); }
    508e:	0e 94 ae 03 	call	0x75c	; 0x75c <inWarmMode()>
    5092:	88 23       	and	r24, r24
    5094:	31 f0       	breq	.+12     	; 0x50a2 <handleLEARN(unsigned char)+0x18>
    5096:	0e 94 33 24 	call	0x4866	; 0x4866 <getMinutesSinceMidnightLT()>
    509a:	61 2f       	mov	r22, r17
    509c:	0e 94 59 25 	call	0x4ab2	; 0x4ab2 <setSimpleSchedule(unsigned int, unsigned char)>
    50a0:	03 c0       	rjmp	.+6      	; 0x50a8 <handleLEARN(unsigned char)+0x1e>
  // Clear simple schedule.
  else { clearSimpleSchedule(which); }
    50a2:	81 2f       	mov	r24, r17
    50a4:	0e 94 4d 25 	call	0x4a9a	; 0x4a9a <clearSimpleSchedule(unsigned char)>
  }
    50a8:	1f 91       	pop	r17
    50aa:	08 95       	ret

000050ac <checkUserSchedule()>:
  return(statusChanged);
  }


// Check/apply the user's schedule, at least once each minute, and act on any timed events.
void checkUserSchedule()
    50ac:	1f 93       	push	r17
    50ae:	cf 93       	push	r28
    50b0:	df 93       	push	r29
  {
  // Get minutes since midnight local time [0,1439].
  const uint_least16_t msm = getMinutesSinceMidnightLT();
    50b2:	0e 94 33 24 	call	0x4866	; 0x4866 <getMinutesSinceMidnightLT()>
    50b6:	ec 01       	movw	r28, r24
    50b8:	10 e0       	ldi	r17, 0x00	; 0
  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    // Check if now is the simple scheduled off time, as minutes after midnight [0,1439]; invalid (eg ~0) if none set.
    // Programmed off/frost takes priority over on/warm if same to bias towards energy-saving.
    // Note that in the presence of multiple overlapping schedules only the last 'off' applies however.
    if(((MAX_SIMPLE_SCHEDULES < 1) || !isAnyScheduleOnWARMNow()) &&
    50ba:	0e 94 d8 25 	call	0x4bb0	; 0x4bb0 <isAnyScheduleOnWARMNow()>
    50be:	88 23       	and	r24, r24
    50c0:	79 f4       	brne	.+30     	; 0x50e0 <checkUserSchedule()+0x34>
    50c2:	81 2f       	mov	r24, r17
    50c4:	0e 94 72 25 	call	0x4ae4	; 0x4ae4 <getSimpleScheduleOff(unsigned char)>
    50c8:	c8 17       	cp	r28, r24
    50ca:	d9 07       	cpc	r29, r25
    50cc:	49 f4       	brne	.+18     	; 0x50e0 <checkUserSchedule()+0x34>
       (msm == getSimpleScheduleOff(which)))
      { setWarmModeDebounced(false); }
    50ce:	80 e0       	ldi	r24, 0x00	; 0
    50d0:	01 c0       	rjmp	.+2      	; 0x50d4 <checkUserSchedule()+0x28>
    // Check if now is the simple scheduled on time.
    else if(msm == getSimpleScheduleOn(which))
      { setWarmModeDebounced(true); }
    50d2:	81 e0       	ldi	r24, 0x01	; 1
    50d4:	0e 94 b1 03 	call	0x762	; 0x762 <setWarmModeDebounced(bool)>
  // Get minutes since midnight local time [0,1439].
  const uint_least16_t msm = getMinutesSinceMidnightLT();

  // Check all available schedules.
  // FIXME: probably will NOT work as expected for overlapping schedules (ie will got to FROST at end of first one).
  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    50d8:	1f 5f       	subi	r17, 0xFF	; 255
    50da:	12 30       	cpi	r17, 0x02	; 2
    50dc:	71 f7       	brne	.-36     	; 0x50ba <checkUserSchedule()+0xe>
    50de:	07 c0       	rjmp	.+14     	; 0x50ee <checkUserSchedule()+0x42>
    // Note that in the presence of multiple overlapping schedules only the last 'off' applies however.
    if(((MAX_SIMPLE_SCHEDULES < 1) || !isAnyScheduleOnWARMNow()) &&
       (msm == getSimpleScheduleOff(which)))
      { setWarmModeDebounced(false); }
    // Check if now is the simple scheduled on time.
    else if(msm == getSimpleScheduleOn(which))
    50e0:	81 2f       	mov	r24, r17
    50e2:	0e 94 2d 25 	call	0x4a5a	; 0x4a5a <getSimpleScheduleOn(unsigned char)>
    50e6:	c8 17       	cp	r28, r24
    50e8:	d9 07       	cpc	r29, r25
    50ea:	b1 f7       	brne	.-20     	; 0x50d8 <checkUserSchedule()+0x2c>
    50ec:	f2 cf       	rjmp	.-28     	; 0x50d2 <checkUserSchedule()+0x26>
      { setWarmModeDebounced(true); }
    }
  }
    50ee:	df 91       	pop	r29
    50f0:	cf 91       	pop	r28
    50f2:	1f 91       	pop	r17
    50f4:	08 95       	ret

000050f6 <serialStatusReport()>:

'HC' introduces the optional FHT8V house codes section, if supported and codes are set.
eg 'HC99 99'
HChc1 hc2 are the house codes 1 and 2 for an FHT8V valve.
*/
void serialStatusReport()
    50f6:	bf 92       	push	r11
    50f8:	cf 92       	push	r12
    50fa:	df 92       	push	r13
    50fc:	ef 92       	push	r14
    50fe:	ff 92       	push	r15
    5100:	0f 93       	push	r16
    5102:	1f 93       	push	r17
    5104:	df 93       	push	r29
    5106:	cf 93       	push	r28
    5108:	cd b7       	in	r28, 0x3d	; 61
    510a:	de b7       	in	r29, 0x3e	; 62
    510c:	c0 55       	subi	r28, 0x50	; 80
    510e:	d0 40       	sbci	r29, 0x00	; 0
    5110:	0f b6       	in	r0, 0x3f	; 63
    5112:	f8 94       	cli
    5114:	de bf       	out	0x3e, r29	; 62
    5116:	0f be       	out	0x3f, r0	; 63
    5118:	cd bf       	out	0x3d, r28	; 61
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    511a:	0e 94 04 21 	call	0x4208	; 0x4208 <powerUpSerialIfDisabled()>
    511e:	b8 2e       	mov	r11, r24

  // Aim to overlap CPU usage with characters being TXed for throughput determined primarily by output size and baud.

  // Stats line starts with distingushed marker character.
  // Initial '=' section with common essentials.
  Serial.print(LINE_START_CHAR_STATS);
    5120:	8a e1       	ldi	r24, 0x1A	; 26
    5122:	95 e0       	ldi	r25, 0x05	; 5
    5124:	6d e3       	ldi	r22, 0x3D	; 61
    5126:	0e 94 44 3b 	call	0x7688	; 0x7688 <Print::print(char)>
#ifdef SUPPORT_BAKE
  Serial.print(inWarmMode() ? (inBakeMode() ? 'B' : 'W') : 'F');
    512a:	0e 94 ae 03 	call	0x75c	; 0x75c <inWarmMode()>
    512e:	88 23       	and	r24, r24
    5130:	11 f4       	brne	.+4      	; 0x5136 <serialStatusReport()+0x40>
    5132:	66 e4       	ldi	r22, 0x46	; 70
    5134:	07 c0       	rjmp	.+14     	; 0x5144 <serialStatusReport()+0x4e>
    5136:	0e 94 b8 03 	call	0x770	; 0x770 <inBakeMode()>
    513a:	88 23       	and	r24, r24
    513c:	11 f4       	brne	.+4      	; 0x5142 <serialStatusReport()+0x4c>
    513e:	67 e5       	ldi	r22, 0x57	; 87
    5140:	01 c0       	rjmp	.+2      	; 0x5144 <serialStatusReport()+0x4e>
    5142:	62 e4       	ldi	r22, 0x42	; 66
    5144:	8a e1       	ldi	r24, 0x1A	; 26
    5146:	95 e0       	ldi	r25, 0x05	; 5
    5148:	0e 94 44 3b 	call	0x7688	; 0x7688 <Print::print(char)>
    514c:	60 91 1b 02 	lds	r22, 0x021B
#else
  Serial.print(inWarmMode() ? 'W' : 'F');
#endif
  Serial.print(NominalRadValve.get()); Serial.print('%'); // Target valve position.
    5150:	8a e1       	ldi	r24, 0x1A	; 26
    5152:	95 e0       	ldi	r25, 0x05	; 5
    5154:	4a e0       	ldi	r20, 0x0A	; 10
    5156:	50 e0       	ldi	r21, 0x00	; 0
    5158:	0e 94 20 3c 	call	0x7840	; 0x7840 <Print::print(unsigned char, int)>
    515c:	8a e1       	ldi	r24, 0x1A	; 26
    515e:	95 e0       	ldi	r25, 0x05	; 5
    5160:	65 e2       	ldi	r22, 0x25	; 37
    5162:	0e 94 44 3b 	call	0x7688	; 0x7688 <Print::print(char)>
    virtual uint8_t preferredPollInterval_s() const { return(60); }

    // Return last value fetched by read(); undefined before first read().
    // Fast.
    // Not thread-safe nor usable within ISRs (Interrupt Service Routines).
    virtual int get() const { return(value); }
    5166:	00 91 c8 03 	lds	r16, 0x03C8
    516a:	10 91 c9 03 	lds	r17, 0x03C9
  const int temp = TemperatureC16.get();
  Serial.print('@'); Serial.print(temp >> 4); Serial.print('C'); // Unrounded whole degrees C.
    516e:	8a e1       	ldi	r24, 0x1A	; 26
    5170:	95 e0       	ldi	r25, 0x05	; 5
    5172:	60 e4       	ldi	r22, 0x40	; 64
    5174:	0e 94 44 3b 	call	0x7688	; 0x7688 <Print::print(char)>
    5178:	b8 01       	movw	r22, r16
    517a:	24 e0       	ldi	r18, 0x04	; 4
    517c:	75 95       	asr	r23
    517e:	67 95       	ror	r22
    5180:	2a 95       	dec	r18
    5182:	e1 f7       	brne	.-8      	; 0x517c <serialStatusReport()+0x86>
    5184:	8a e1       	ldi	r24, 0x1A	; 26
    5186:	95 e0       	ldi	r25, 0x05	; 5
    5188:	4a e0       	ldi	r20, 0x0A	; 10
    518a:	50 e0       	ldi	r21, 0x00	; 0
    518c:	0e 94 72 3c 	call	0x78e4	; 0x78e4 <Print::print(int, int)>
    5190:	8a e1       	ldi	r24, 0x1A	; 26
    5192:	95 e0       	ldi	r25, 0x05	; 5
    5194:	63 e4       	ldi	r22, 0x43	; 67
    5196:	0e 94 44 3b 	call	0x7688	; 0x7688 <Print::print(char)>
      Serial.print(temp & 0xf, HEX); // Show 16ths in hex.
    519a:	0f 70       	andi	r16, 0x0F	; 15
    519c:	10 70       	andi	r17, 0x00	; 0
    519e:	8a e1       	ldi	r24, 0x1A	; 26
    51a0:	95 e0       	ldi	r25, 0x05	; 5
    51a2:	b8 01       	movw	r22, r16
    51a4:	40 e1       	ldi	r20, 0x10	; 16
    51a6:	50 e0       	ldi	r21, 0x00	; 0
    51a8:	0e 94 72 3c 	call	0x78e4	; 0x78e4 <Print::print(int, int)>
//  if(Supply_mV.isSupplyVoltageLow()) { Serial.print(F(";Plow")); }
//#endif

#if 1
  // *X* section: Xmit security level shown only if some non-essential TX potentially allowed.
  const stats_TX_level xmitLevel = getStatsTXLevel();
    51ac:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <getStatsTXLevel()>
  if(xmitLevel < stTXnever) { Serial.print(F(";X")); Serial.print(xmitLevel); }
    51b0:	8c 01       	movw	r16, r24
    51b2:	8f 3f       	cpi	r24, 0xFF	; 255
    51b4:	91 05       	cpc	r25, r1
    51b6:	6c f4       	brge	.+26     	; 0x51d2 <serialStatusReport()+0xdc>
    51b8:	8a e1       	ldi	r24, 0x1A	; 26
    51ba:	95 e0       	ldi	r25, 0x05	; 5
    51bc:	6f eb       	ldi	r22, 0xBF	; 191
    51be:	73 e0       	ldi	r23, 0x03	; 3
    51c0:	0e 94 21 3b 	call	0x7642	; 0x7642 <Print::print(__FlashStringHelper const*)>
    51c4:	8a e1       	ldi	r24, 0x1A	; 26
    51c6:	95 e0       	ldi	r25, 0x05	; 5
    51c8:	b8 01       	movw	r22, r16
    51ca:	4a e0       	ldi	r20, 0x0A	; 10
    51cc:	50 e0       	ldi	r21, 0x00	; 0
    51ce:	0e 94 72 3c 	call	0x78e4	; 0x78e4 <Print::print(int, int)>
#endif

  // *T* section: time and schedules.
  const uint_least8_t hh = getHoursLT();
    51d2:	0e 94 48 24 	call	0x4890	; 0x4890 <getHoursLT()>
    51d6:	18 2f       	mov	r17, r24
  const uint_least8_t mm = getMinutesLT();
    51d8:	0e 94 3c 24 	call	0x4878	; 0x4878 <getMinutesLT()>
    51dc:	08 2f       	mov	r16, r24
  Serial.print(';'); // End previous section.
    51de:	8a e1       	ldi	r24, 0x1A	; 26
    51e0:	95 e0       	ldi	r25, 0x05	; 5
    51e2:	6b e3       	ldi	r22, 0x3B	; 59
    51e4:	0e 94 44 3b 	call	0x7688	; 0x7688 <Print::print(char)>
  Serial.print('T'); Serial.print(hh); Serial_print_space(); Serial.print(mm);
    51e8:	8a e1       	ldi	r24, 0x1A	; 26
    51ea:	95 e0       	ldi	r25, 0x05	; 5
    51ec:	64 e5       	ldi	r22, 0x54	; 84
    51ee:	0e 94 44 3b 	call	0x7688	; 0x7688 <Print::print(char)>
    51f2:	8a e1       	ldi	r24, 0x1A	; 26
    51f4:	95 e0       	ldi	r25, 0x05	; 5
    51f6:	61 2f       	mov	r22, r17
    51f8:	4a e0       	ldi	r20, 0x0A	; 10
    51fa:	50 e0       	ldi	r21, 0x00	; 0
    51fc:	0e 94 20 3c 	call	0x7840	; 0x7840 <Print::print(unsigned char, int)>
    5200:	0e 94 48 27 	call	0x4e90	; 0x4e90 <Serial_print_space()>
    5204:	8a e1       	ldi	r24, 0x1A	; 26
    5206:	95 e0       	ldi	r25, 0x05	; 5
    5208:	60 2f       	mov	r22, r16
    520a:	4a e0       	ldi	r20, 0x0A	; 10
    520c:	50 e0       	ldi	r21, 0x00	; 0
    520e:	0e 94 20 3c 	call	0x7840	; 0x7840 <Print::print(unsigned char, int)>
    5212:	dd 24       	eor	r13, r13
  // Show all schedules set.
  for(uint8_t scheduleNumber = 0; scheduleNumber < MAX_SIMPLE_SCHEDULES; ++scheduleNumber)
    {
    Serial_print_space();
    5214:	0e 94 48 27 	call	0x4e90	; 0x4e90 <Serial_print_space()>
    uint_least16_t startMinutesSinceMidnightLT = getSimpleScheduleOn(scheduleNumber);
    5218:	8d 2d       	mov	r24, r13
    521a:	0e 94 2d 25 	call	0x4a5a	; 0x4a5a <getSimpleScheduleOn(unsigned char)>
    521e:	fc 01       	movw	r30, r24
    const bool invalidStartTime = startMinutesSinceMidnightLT >= MINS_PER_DAY;
    const int startH = invalidStartTime ? 255 : (startMinutesSinceMidnightLT / 60);
    5220:	85 e0       	ldi	r24, 0x05	; 5
    5222:	e0 3a       	cpi	r30, 0xA0	; 160
    5224:	f8 07       	cpc	r31, r24
    5226:	30 f0       	brcs	.+12     	; 0x5234 <serialStatusReport()+0x13e>
    5228:	00 e0       	ldi	r16, 0x00	; 0
    522a:	10 e0       	ldi	r17, 0x00	; 0
    522c:	9f ef       	ldi	r25, 0xFF	; 255
    522e:	e9 2e       	mov	r14, r25
    5230:	f1 2c       	mov	r15, r1
    5232:	0c c0       	rjmp	.+24     	; 0x524c <serialStatusReport()+0x156>
    5234:	cf 01       	movw	r24, r30
    5236:	6c e3       	ldi	r22, 0x3C	; 60
    5238:	70 e0       	ldi	r23, 0x00	; 0
    523a:	0e 94 b7 3d 	call	0x7b6e	; 0x7b6e <__udivmodhi4>
    523e:	7b 01       	movw	r14, r22
    const int startM = invalidStartTime ? 0 : (startMinutesSinceMidnightLT % 60);
    5240:	cf 01       	movw	r24, r30
    5242:	6c e3       	ldi	r22, 0x3C	; 60
    5244:	70 e0       	ldi	r23, 0x00	; 0
    5246:	0e 94 b7 3d 	call	0x7b6e	; 0x7b6e <__udivmodhi4>
    524a:	8c 01       	movw	r16, r24
    Serial.print('W'); Serial.print(startH); Serial_print_space(); Serial.print(startM);
    524c:	8a e1       	ldi	r24, 0x1A	; 26
    524e:	95 e0       	ldi	r25, 0x05	; 5
    5250:	67 e5       	ldi	r22, 0x57	; 87
    5252:	0e 94 44 3b 	call	0x7688	; 0x7688 <Print::print(char)>
    5256:	8a e1       	ldi	r24, 0x1A	; 26
    5258:	95 e0       	ldi	r25, 0x05	; 5
    525a:	b7 01       	movw	r22, r14
    525c:	4a e0       	ldi	r20, 0x0A	; 10
    525e:	50 e0       	ldi	r21, 0x00	; 0
    5260:	0e 94 72 3c 	call	0x78e4	; 0x78e4 <Print::print(int, int)>
    5264:	0e 94 48 27 	call	0x4e90	; 0x4e90 <Serial_print_space()>
    5268:	8a e1       	ldi	r24, 0x1A	; 26
    526a:	95 e0       	ldi	r25, 0x05	; 5
    526c:	b8 01       	movw	r22, r16
    526e:	4a e0       	ldi	r20, 0x0A	; 10
    5270:	50 e0       	ldi	r21, 0x00	; 0
    5272:	0e 94 72 3c 	call	0x78e4	; 0x78e4 <Print::print(int, int)>
    Serial_print_space();
    5276:	0e 94 48 27 	call	0x4e90	; 0x4e90 <Serial_print_space()>
    uint_least16_t endMinutesSinceMidnightLT = getSimpleScheduleOff(scheduleNumber);
    527a:	8d 2d       	mov	r24, r13
    527c:	0e 94 72 25 	call	0x4ae4	; 0x4ae4 <getSimpleScheduleOff(unsigned char)>
    5280:	fc 01       	movw	r30, r24
    const bool invalidEndTime = endMinutesSinceMidnightLT >= MINS_PER_DAY;
    const int endH = invalidEndTime ? 255 : (endMinutesSinceMidnightLT / 60);
    5282:	85 e0       	ldi	r24, 0x05	; 5
    5284:	e0 3a       	cpi	r30, 0xA0	; 160
    5286:	f8 07       	cpc	r31, r24
    5288:	30 f0       	brcs	.+12     	; 0x5296 <serialStatusReport()+0x1a0>
    528a:	00 e0       	ldi	r16, 0x00	; 0
    528c:	10 e0       	ldi	r17, 0x00	; 0
    528e:	8f ef       	ldi	r24, 0xFF	; 255
    5290:	e8 2e       	mov	r14, r24
    5292:	f1 2c       	mov	r15, r1
    5294:	0c c0       	rjmp	.+24     	; 0x52ae <serialStatusReport()+0x1b8>
    5296:	cf 01       	movw	r24, r30
    5298:	6c e3       	ldi	r22, 0x3C	; 60
    529a:	70 e0       	ldi	r23, 0x00	; 0
    529c:	0e 94 b7 3d 	call	0x7b6e	; 0x7b6e <__udivmodhi4>
    52a0:	7b 01       	movw	r14, r22
    const int endM = invalidEndTime ? 0 : (endMinutesSinceMidnightLT % 60);
    52a2:	cf 01       	movw	r24, r30
    52a4:	6c e3       	ldi	r22, 0x3C	; 60
    52a6:	70 e0       	ldi	r23, 0x00	; 0
    52a8:	0e 94 b7 3d 	call	0x7b6e	; 0x7b6e <__udivmodhi4>
    52ac:	8c 01       	movw	r16, r24
    Serial.print('F'); Serial.print(endH); Serial_print_space(); Serial.print(endM);
    52ae:	8a e1       	ldi	r24, 0x1A	; 26
    52b0:	95 e0       	ldi	r25, 0x05	; 5
    52b2:	66 e4       	ldi	r22, 0x46	; 70
    52b4:	0e 94 44 3b 	call	0x7688	; 0x7688 <Print::print(char)>
    52b8:	8a e1       	ldi	r24, 0x1A	; 26
    52ba:	95 e0       	ldi	r25, 0x05	; 5
    52bc:	b7 01       	movw	r22, r14
    52be:	4a e0       	ldi	r20, 0x0A	; 10
    52c0:	50 e0       	ldi	r21, 0x00	; 0
    52c2:	0e 94 72 3c 	call	0x78e4	; 0x78e4 <Print::print(int, int)>
    52c6:	0e 94 48 27 	call	0x4e90	; 0x4e90 <Serial_print_space()>
    52ca:	8a e1       	ldi	r24, 0x1A	; 26
    52cc:	95 e0       	ldi	r25, 0x05	; 5
    52ce:	b8 01       	movw	r22, r16
    52d0:	4a e0       	ldi	r20, 0x0A	; 10
    52d2:	50 e0       	ldi	r21, 0x00	; 0
    52d4:	0e 94 72 3c 	call	0x78e4	; 0x78e4 <Print::print(int, int)>
  const uint_least8_t hh = getHoursLT();
  const uint_least8_t mm = getMinutesLT();
  Serial.print(';'); // End previous section.
  Serial.print('T'); Serial.print(hh); Serial_print_space(); Serial.print(mm);
  // Show all schedules set.
  for(uint8_t scheduleNumber = 0; scheduleNumber < MAX_SIMPLE_SCHEDULES; ++scheduleNumber)
    52d8:	d3 94       	inc	r13
    52da:	82 e0       	ldi	r24, 0x02	; 2
    52dc:	d8 16       	cp	r13, r24
    52de:	09 f0       	breq	.+2      	; 0x52e2 <serialStatusReport()+0x1ec>
    52e0:	99 cf       	rjmp	.-206    	; 0x5214 <serialStatusReport()+0x11e>
    const bool invalidEndTime = endMinutesSinceMidnightLT >= MINS_PER_DAY;
    const int endH = invalidEndTime ? 255 : (endMinutesSinceMidnightLT / 60);
    const int endM = invalidEndTime ? 0 : (endMinutesSinceMidnightLT % 60);
    Serial.print('F'); Serial.print(endH); Serial_print_space(); Serial.print(endM);
    }
  if(isAnyScheduleOnWARMNow()) { Serial.print('*'); } // Indicate that at least one schedule is active now.
    52e2:	0e 94 d8 25 	call	0x4bb0	; 0x4bb0 <isAnyScheduleOnWARMNow()>
    52e6:	88 23       	and	r24, r24
    52e8:	29 f0       	breq	.+10     	; 0x52f4 <serialStatusReport()+0x1fe>
    52ea:	8a e1       	ldi	r24, 0x1A	; 26
    52ec:	95 e0       	ldi	r25, 0x05	; 5
    52ee:	6a e2       	ldi	r22, 0x2A	; 42
    52f0:	0e 94 44 3b 	call	0x7688	; 0x7688 <Print::print(char)>

  // *S* section: settable target/threshold temperatures, current target, and eco/smart/occupied flags.
#ifdef SETTABLE_TARGET_TEMPERATURES // Show thresholds and current target since no longer so easily deduced.
  Serial.print(';'); // Terminate previous section.
    52f4:	8a e1       	ldi	r24, 0x1A	; 26
    52f6:	95 e0       	ldi	r25, 0x05	; 5
    52f8:	6b e3       	ldi	r22, 0x3B	; 59
    52fa:	0e 94 44 3b 	call	0x7688	; 0x7688 <Print::print(char)>
  Serial.print('S'); // Current settable temperature target, and FROST and WARM settings.
    52fe:	8a e1       	ldi	r24, 0x1A	; 26
    5300:	95 e0       	ldi	r25, 0x05	; 5
    5302:	63 e5       	ldi	r22, 0x53	; 83
    5304:	0e 94 44 3b 	call	0x7688	; 0x7688 <Print::print(char)>
  Serial.print(NominalRadValve.getTargetTempC());
    5308:	8a e1       	ldi	r24, 0x1A	; 26
    530a:	95 e0       	ldi	r25, 0x05	; 5
    530c:	60 91 1c 02 	lds	r22, 0x021C
    5310:	4a e0       	ldi	r20, 0x0A	; 10
    5312:	50 e0       	ldi	r21, 0x00	; 0
    5314:	0e 94 20 3c 	call	0x7840	; 0x7840 <Print::print(unsigned char, int)>
  Serial_print_space();
    5318:	0e 94 48 27 	call	0x4e90	; 0x4e90 <Serial_print_space()>
  Serial.print(getFROSTTargetC());
    531c:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <getFROSTTargetC()>
    5320:	68 2f       	mov	r22, r24
    5322:	8a e1       	ldi	r24, 0x1A	; 26
    5324:	95 e0       	ldi	r25, 0x05	; 5
    5326:	4a e0       	ldi	r20, 0x0A	; 10
    5328:	50 e0       	ldi	r21, 0x00	; 0
    532a:	0e 94 20 3c 	call	0x7840	; 0x7840 <Print::print(unsigned char, int)>
  Serial_print_space();
    532e:	0e 94 48 27 	call	0x4e90	; 0x4e90 <Serial_print_space()>
  Serial.print(getWARMTargetC());
    5332:	0e 94 cb 03 	call	0x796	; 0x796 <getWARMTargetC()>
    5336:	68 2f       	mov	r22, r24
    5338:	8a e1       	ldi	r24, 0x1A	; 26
    533a:	95 e0       	ldi	r25, 0x05	; 5
    533c:	4a e0       	ldi	r20, 0x0A	; 10
    533e:	50 e0       	ldi	r21, 0x00	; 0
    5340:	0e 94 20 3c 	call	0x7840	; 0x7840 <Print::print(unsigned char, int)>
#endif

  // *C* section: central hub values.
#if defined(ENABLE_BOILER_HUB)
  // Print optional hub boiler-on-time section if apparently set (non-zero) and thus in hub mode.
  const uint8_t boilerOnMinutes = getMinBoilerOnMinutes();
    5344:	0e 94 0f 04 	call	0x81e	; 0x81e <getMinBoilerOnMinutes()>
    5348:	18 2f       	mov	r17, r24
  if(boilerOnMinutes != 0)
    534a:	88 23       	and	r24, r24
    534c:	89 f0       	breq	.+34     	; 0x5370 <serialStatusReport()+0x27a>
    {
    Serial.print(';'); // Terminate previous section.
    534e:	8a e1       	ldi	r24, 0x1A	; 26
    5350:	95 e0       	ldi	r25, 0x05	; 5
    5352:	6b e3       	ldi	r22, 0x3B	; 59
    5354:	0e 94 44 3b 	call	0x7688	; 0x7688 <Print::print(char)>
    Serial.print('C'); // Indicate central hub mode available.
    5358:	8a e1       	ldi	r24, 0x1A	; 26
    535a:	95 e0       	ldi	r25, 0x05	; 5
    535c:	63 e4       	ldi	r22, 0x43	; 67
    535e:	0e 94 44 3b 	call	0x7688	; 0x7688 <Print::print(char)>
    Serial.print(boilerOnMinutes); // Show min 'on' time, or zero if disabled.
    5362:	8a e1       	ldi	r24, 0x1A	; 26
    5364:	95 e0       	ldi	r25, 0x05	; 5
    5366:	61 2f       	mov	r22, r17
    5368:	4a e0       	ldi	r20, 0x0A	; 10
    536a:	50 e0       	ldi	r21, 0x00	; 0
    536c:	0e 94 20 3c 	call	0x7840	; 0x7840 <Print::print(unsigned char, int)>
#endif

  // *H* section: house codes for local FHT8V valve and if syncing, iff set.
#if defined(USE_MODULE_FHT8VSIMPLE)
  // Print optional house code section if codes set.
  const uint8_t hc1 = FHT8VGetHC1();
    5370:	0e 94 33 11 	call	0x2266	; 0x2266 <FHT8VGetHC1()>
    5374:	18 2f       	mov	r17, r24
  if(hc1 != 255)
    5376:	8f 3f       	cpi	r24, 0xFF	; 255
    5378:	19 f1       	breq	.+70     	; 0x53c0 <serialStatusReport()+0x2ca>
    {
    Serial.print(F(";HC"));
    537a:	8a e1       	ldi	r24, 0x1A	; 26
    537c:	95 e0       	ldi	r25, 0x05	; 5
    537e:	6b eb       	ldi	r22, 0xBB	; 187
    5380:	73 e0       	ldi	r23, 0x03	; 3
    5382:	0e 94 21 3b 	call	0x7642	; 0x7642 <Print::print(__FlashStringHelper const*)>
    Serial.print(hc1);
    5386:	8a e1       	ldi	r24, 0x1A	; 26
    5388:	95 e0       	ldi	r25, 0x05	; 5
    538a:	61 2f       	mov	r22, r17
    538c:	4a e0       	ldi	r20, 0x0A	; 10
    538e:	50 e0       	ldi	r21, 0x00	; 0
    5390:	0e 94 20 3c 	call	0x7840	; 0x7840 <Print::print(unsigned char, int)>
    Serial_print_space();
    5394:	0e 94 48 27 	call	0x4e90	; 0x4e90 <Serial_print_space()>
    Serial.print(FHT8VGetHC2());
    5398:	0e 94 3c 11 	call	0x2278	; 0x2278 <FHT8VGetHC2()>
    539c:	68 2f       	mov	r22, r24
    539e:	8a e1       	ldi	r24, 0x1A	; 26
    53a0:	95 e0       	ldi	r25, 0x05	; 5
    53a2:	4a e0       	ldi	r20, 0x0A	; 10
    53a4:	50 e0       	ldi	r21, 0x00	; 0
    53a6:	0e 94 20 3c 	call	0x7840	; 0x7840 <Print::print(unsigned char, int)>
    if(!isSyncedWithFHT8V())
    53aa:	0e 94 5f 11 	call	0x22be	; 0x22be <isSyncedWithFHT8V()>
    53ae:	88 23       	and	r24, r24
    53b0:	39 f4       	brne	.+14     	; 0x53c0 <serialStatusReport()+0x2ca>
      {
      Serial_print_space();
    53b2:	0e 94 48 27 	call	0x4e90	; 0x4e90 <Serial_print_space()>
      Serial.print('s'); // Indicate syncing with trailing lower-case 's' in field...
    53b6:	8a e1       	ldi	r24, 0x1A	; 26
    53b8:	95 e0       	ldi	r25, 0x05	; 5
    53ba:	63 e7       	ldi	r22, 0x73	; 115
    53bc:	0e 94 44 3b 	call	0x7688	; 0x7688 <Print::print(char)>
    }
#endif

#if 1
  // *M* section: min-valve-percentage open section, iff not at default value.
  const uint8_t minValvePcOpen = NominalRadValve.getMinValvePcReallyOpen();
    53c0:	0e 94 6f 04 	call	0x8de	; 0x8de <ModelledRadValve::getMinValvePcReallyOpen()>
    53c4:	18 2f       	mov	r17, r24
  if(DEFAULT_MIN_VALVE_PC_REALLY_OPEN != minValvePcOpen) { Serial.print(F(";M")); Serial.print(minValvePcOpen); }
    53c6:	8a 30       	cpi	r24, 0x0A	; 10
    53c8:	69 f0       	breq	.+26     	; 0x53e4 <serialStatusReport()+0x2ee>
    53ca:	8a e1       	ldi	r24, 0x1A	; 26
    53cc:	95 e0       	ldi	r25, 0x05	; 5
    53ce:	68 eb       	ldi	r22, 0xB8	; 184
    53d0:	73 e0       	ldi	r23, 0x03	; 3
    53d2:	0e 94 21 3b 	call	0x7642	; 0x7642 <Print::print(__FlashStringHelper const*)>
    53d6:	8a e1       	ldi	r24, 0x1A	; 26
    53d8:	95 e0       	ldi	r25, 0x05	; 5
    53da:	61 2f       	mov	r22, r17
    53dc:	4a e0       	ldi	r20, 0x0A	; 10
    53de:	50 e0       	ldi	r21, 0x00	; 0
    53e0:	0e 94 20 3c 	call	0x7840	; 0x7840 <Print::print(unsigned char, int)>
#endif

#if 1 && defined(ALLOW_JSON_OUTPUT)
  Serial.print(';'); // Terminate previous section.
    53e4:	8a e1       	ldi	r24, 0x1A	; 26
    53e6:	95 e0       	ldi	r25, 0x05	; 5
    53e8:	6b e3       	ldi	r22, 0x3B	; 59
    53ea:	0e 94 44 3b 	call	0x7688	; 0x7688 <Print::print(char)>
  char buf[80];
  static SimpleStatsRotation<5> ss1; // Configured for maximum different stats.
    53ee:	80 91 80 03 	lds	r24, 0x0380
    53f2:	88 23       	and	r24, r24
    53f4:	a9 f5       	brne	.+106    	; 0x5460 <serialStatusReport()+0x36a>
    53f6:	80 e8       	ldi	r24, 0x80	; 128
    53f8:	93 e0       	ldi	r25, 0x03	; 3
    53fa:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <__cxa_guard_acquire>
    53fe:	89 2b       	or	r24, r25
    5400:	79 f1       	breq	.+94     	; 0x5460 <serialStatusReport()+0x36a>

    // Initialise base with appropriate storage (non-null) and capacity knowledge.
    SimpleStatsRotationBase(DescValueTuple *_stats, const uint8_t _capacity)
      : capacity(_capacity), stats(_stats), nStats(0),
        lastTXed(~0), lastTXedLoPri(~0), lastTXedHiPri(~0), // Show the first item on the first pass...
        id(NULL)
    5402:	85 e0       	ldi	r24, 0x05	; 5
    5404:	80 93 88 03 	sts	0x0388, r24
    5408:	22 e9       	ldi	r18, 0x92	; 146
    540a:	33 e0       	ldi	r19, 0x03	; 3
    540c:	30 93 8a 03 	sts	0x038A, r19
    5410:	20 93 89 03 	sts	0x0389, r18
    5414:	10 92 8b 03 	sts	0x038B, r1
    5418:	8f ef       	ldi	r24, 0xFF	; 255
    541a:	80 93 8c 03 	sts	0x038C, r24
    541e:	80 93 8d 03 	sts	0x038D, r24
    5422:	80 93 8e 03 	sts	0x038E, r24
    5426:	10 92 90 03 	sts	0x0390, r1
    542a:	10 92 8f 03 	sts	0x038F, r1
    // is displayed immediately after the @/ID field when enabled,
    // and missing count values suggest a lost transmission somewhere.
    // Takes minimal space (1 byte).
    struct WriteCount
      {
      WriteCount() : enabled(0), count(0) { }
    542e:	80 91 91 03 	lds	r24, 0x0391
    5432:	80 7f       	andi	r24, 0xF0	; 240
    5434:	80 93 91 03 	sts	0x0391, r24
    5438:	f9 01       	movw	r30, r18
    // The default sensitivity is set to forbid transmission at all but minimum (0) leaf TX security settings.
    // By default the stat is normal priority.
    GenericStatsDescriptor(const char * const statKey,
                           const uint8_t statSensitivity = 1,
                           const bool statHighPriority = false)
      : key(statKey), sensitivity(statSensitivity), highPriority(statHighPriority)
    543a:	91 e0       	ldi	r25, 0x01	; 1
    543c:	11 82       	std	Z+1, r1	; 0x01
    543e:	10 82       	st	Z, r1
    5440:	92 83       	std	Z+2, r25	; 0x02
    5442:	13 82       	std	Z+3, r1	; 0x03
#endif

  protected:
    struct DescValueTuple
      {
      DescValueTuple() : descriptor(NULL), value(0) { }
    5444:	15 82       	std	Z+5, r1	; 0x05
    5446:	14 82       	std	Z+4, r1	; 0x04
      int value;

      // Various run-time flags.
      struct Flags
        {
        Flags() : changed(false) { }
    5448:	86 81       	ldd	r24, Z+6	; 0x06
    544a:	8e 7f       	andi	r24, 0xFE	; 254
    544c:	86 83       	std	Z+6, r24	; 0x06
    544e:	37 96       	adiw	r30, 0x07	; 7
    // Stats to be tracked and sent; mandatory/priority items must be first.
    // A copy is taken of the user-supplied set of descriptions, preserving order.
    DescValueTuple stats[MaxStats];

  public:
    SimpleStatsRotation() : SimpleStatsRotationBase(stats, MaxStats) { }
    5450:	83 e0       	ldi	r24, 0x03	; 3
    5452:	e5 3b       	cpi	r30, 0xB5	; 181
    5454:	f8 07       	cpc	r31, r24
    5456:	91 f7       	brne	.-28     	; 0x543c <serialStatusReport()+0x346>
    5458:	80 e8       	ldi	r24, 0x80	; 128
    545a:	93 e0       	ldi	r25, 0x03	; 3
    545c:	0e 94 f3 3a 	call	0x75e6	; 0x75e6 <__cxa_guard_release>
//  ss1.put(TemperatureC16);
#if defined(HUMIDITY_SENSOR_SUPPORT)
  ss1.put(RelHumidity);
    5460:	88 e8       	ldi	r24, 0x88	; 136
    5462:	93 e0       	ldi	r25, 0x03	; 3
    5464:	62 ec       	ldi	r22, 0xC2	; 194
    5466:	73 e0       	ldi	r23, 0x03	; 3
    5468:	0e 94 a4 07 	call	0xf48	; 0xf48 <bool SimpleStatsRotationBase::put<unsigned char>(Sensor<unsigned char> const&)>
#endif
  ss1.put(AmbLight);
    546c:	88 e8       	ldi	r24, 0x88	; 136
    546e:	93 e0       	ldi	r25, 0x03	; 3
    5470:	6c eb       	ldi	r22, 0xBC	; 188
    5472:	73 e0       	ldi	r23, 0x03	; 3
    5474:	0e 94 a4 07 	call	0xf48	; 0xf48 <bool SimpleStatsRotationBase::put<unsigned char>(Sensor<unsigned char> const&)>
    // True if successful, false otherwise (eg capacity already reached).
    bool put(SimpleStatsKey key, int newValue);

    // Create/update value for the given sensor.
    // True if successful, false otherwise (eg capacity already reached).
    template <class T> bool put(const Sensor<T> &s) { return(put(s.tag(), s.get())); }
    5478:	e0 91 62 03 	lds	r30, 0x0362
    547c:	f0 91 63 03 	lds	r31, 0x0363
    5480:	00 84       	ldd	r0, Z+8	; 0x08
    5482:	f1 85       	ldd	r31, Z+9	; 0x09
    5484:	e0 2d       	mov	r30, r0
    5486:	82 e6       	ldi	r24, 0x62	; 98
    5488:	93 e0       	ldi	r25, 0x03	; 3
    548a:	09 95       	icall
    548c:	8c 01       	movw	r16, r24
    548e:	e0 91 62 03 	lds	r30, 0x0362
    5492:	f0 91 63 03 	lds	r31, 0x0363
    5496:	02 80       	ldd	r0, Z+2	; 0x02
    5498:	f3 81       	ldd	r31, Z+3	; 0x03
    549a:	e0 2d       	mov	r30, r0
    549c:	82 e6       	ldi	r24, 0x62	; 98
    549e:	93 e0       	ldi	r25, 0x03	; 3
    54a0:	09 95       	icall
    54a2:	ac 01       	movw	r20, r24
    54a4:	88 e8       	ldi	r24, 0x88	; 136
    54a6:	93 e0       	ldi	r25, 0x03	; 3
    54a8:	b8 01       	movw	r22, r16
    54aa:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <SimpleStatsRotationBase::put(char const*, int)>
  ss1.put(Supply_mV);
#if defined(OCCUPANCY_SUPPORT)
  ss1.put(Occupancy);
    54ae:	88 e8       	ldi	r24, 0x88	; 136
    54b0:	93 e0       	ldi	r25, 0x03	; 3
    54b2:	62 e1       	ldi	r22, 0x12	; 18
    54b4:	72 e0       	ldi	r23, 0x02	; 2
    54b6:	0e 94 a4 07 	call	0xf48	; 0xf48 <bool SimpleStatsRotationBase::put<unsigned char>(Sensor<unsigned char> const&)>
//  ss1.put(Occupancy.vacHTag(), Occupancy.getVacancyH()); // EXPERIMENTAL
#endif
#if 1 && defined(DEBUG)
    ss1.put(NominalRadValve.tagCMPC(), NominalRadValve.getCumulativeMovementPC()); // EXPERIMENTAL
    54ba:	40 91 28 02 	lds	r20, 0x0228
    54be:	50 91 29 02 	lds	r21, 0x0229
    54c2:	5f 70       	andi	r21, 0x0F	; 15
    54c4:	88 e8       	ldi	r24, 0x88	; 136
    54c6:	93 e0       	ldi	r25, 0x03	; 3
    54c8:	66 e2       	ldi	r22, 0x26	; 38
    54ca:	71 e0       	ldi	r23, 0x01	; 1
    54cc:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <SimpleStatsRotationBase::put(char const*, int)>
#endif
  const uint8_t wrote = ss1.writeJSON((uint8_t *)buf, sizeof(buf), 0, true);
    54d0:	88 e8       	ldi	r24, 0x88	; 136
    54d2:	93 e0       	ldi	r25, 0x03	; 3
    54d4:	6e 01       	movw	r12, r28
    54d6:	08 94       	sec
    54d8:	c1 1c       	adc	r12, r1
    54da:	d1 1c       	adc	r13, r1
    54dc:	b6 01       	movw	r22, r12
    54de:	40 e5       	ldi	r20, 0x50	; 80
    54e0:	20 e0       	ldi	r18, 0x00	; 0
    54e2:	01 e0       	ldi	r16, 0x01	; 1
    54e4:	ee 24       	eor	r14, r14
    54e6:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)>
  if(0 != wrote) { Serial.print(buf); }
    54ea:	88 23       	and	r24, r24
    54ec:	29 f0       	breq	.+10     	; 0x54f8 <serialStatusReport()+0x402>
    54ee:	8a e1       	ldi	r24, 0x1A	; 26
    54f0:	95 e0       	ldi	r25, 0x05	; 5
    54f2:	b6 01       	movw	r22, r12
    54f4:	0e 94 85 3c 	call	0x790a	; 0x790a <Print::print(char const*)>
#endif

  // Terminate line.
  Serial.println();
    54f8:	8a e1       	ldi	r24, 0x1A	; 26
    54fa:	95 e0       	ldi	r25, 0x05	; 5
    54fc:	0e 94 4c 3b 	call	0x7698	; 0x7698 <Print::println()>

  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  flushSerialSCTSensitive();
    5500:	0e 94 ef 20 	call	0x41de	; 0x41de <flushSerialSCTSensitive()>

  if(neededWaking) { powerDownSerial(); }
    5504:	bb 20       	and	r11, r11
    5506:	11 f0       	breq	.+4      	; 0x550c <serialStatusReport()+0x416>
    5508:	0e 94 b9 20 	call	0x4172	; 0x4172 <powerDownSerial()>
  }
    550c:	c0 5b       	subi	r28, 0xB0	; 176
    550e:	df 4f       	sbci	r29, 0xFF	; 255
    5510:	0f b6       	in	r0, 0x3f	; 63
    5512:	f8 94       	cli
    5514:	de bf       	out	0x3e, r29	; 62
    5516:	0f be       	out	0x3f, r0	; 63
    5518:	cd bf       	out	0x3d, r28	; 61
    551a:	cf 91       	pop	r28
    551c:	df 91       	pop	r29
    551e:	1f 91       	pop	r17
    5520:	0f 91       	pop	r16
    5522:	ff 90       	pop	r15
    5524:	ef 90       	pop	r14
    5526:	df 90       	pop	r13
    5528:	cf 90       	pop	r12
    552a:	bf 90       	pop	r11
    552c:	08 95       	ret

0000552e <pollCLI(unsigned char)>:
// Used to poll user side for CLI input until specified sub-cycle time.
// Commands should be sent terminated by CR *or* LF; both may prevent 'E' (exit) from working properly.
// A period of less than (say) 500ms will be difficult for direct human response on a raw terminal.
// A period of less than (say) 100ms is not recommended to avoid possibility of overrun on long interactions.
// NOT RENTRANT (eg uses static state for speed and code space).
void pollCLI(const uint8_t maxSCT)
    552e:	bf 92       	push	r11
    5530:	cf 92       	push	r12
    5532:	df 92       	push	r13
    5534:	ef 92       	push	r14
    5536:	ff 92       	push	r15
    5538:	0f 93       	push	r16
    553a:	1f 93       	push	r17
    553c:	df 93       	push	r29
    553e:	cf 93       	push	r28
    5540:	00 d0       	rcall	.+0      	; 0x5542 <pollCLI(unsigned char)+0x14>
    5542:	00 d0       	rcall	.+0      	; 0x5544 <pollCLI(unsigned char)+0x16>
    5544:	00 d0       	rcall	.+0      	; 0x5546 <pollCLI(unsigned char)+0x18>
    5546:	cd b7       	in	r28, 0x3d	; 61
    5548:	de b7       	in	r29, 0x3e	; 62
    554a:	d8 2e       	mov	r13, r24
  {
  // Compute safe limit time given granularity of sleep and buffer fill.
  const uint8_t targetMaxSCT = (maxSCT <= MIN_POLL_SCT) ? ((uint8_t) 0) : ((uint8_t) (maxSCT - 1 - MIN_POLL_SCT));
    554c:	22 e0       	ldi	r18, 0x02	; 2
    554e:	28 17       	cp	r18, r24
    5550:	10 f0       	brcs	.+4      	; 0x5556 <pollCLI(unsigned char)+0x28>
    5552:	00 e0       	ldi	r16, 0x00	; 0
    5554:	02 c0       	rjmp	.+4      	; 0x555a <pollCLI(unsigned char)+0x2c>
    5556:	08 2f       	mov	r16, r24
    5558:	03 50       	subi	r16, 0x03	; 3
  if(getSubCycleTime() >= targetMaxSCT) { return; } // Too short to try.
    555a:	80 91 b2 00 	lds	r24, 0x00B2
    555e:	80 17       	cp	r24, r16
    5560:	08 f0       	brcs	.+2      	; 0x5564 <pollCLI(unsigned char)+0x36>
    5562:	1d c3       	rjmp	.+1594   	; 0x5b9e <pollCLI(unsigned char)+0x670>

  const bool neededWaking = powerUpSerialIfDisabled();
    5564:	0e 94 04 21 	call	0x4208	; 0x4208 <powerUpSerialIfDisabled()>
    5568:	b8 2e       	mov	r11, r24
    556a:	04 c0       	rjmp	.+8      	; 0x5574 <pollCLI(unsigned char)+0x46>

  // Purge any stray pending input, such as a trailing LF from previous input.
  while(Serial.available() > 0) { Serial.read(); }
    556c:	8a e1       	ldi	r24, 0x1A	; 26
    556e:	95 e0       	ldi	r25, 0x05	; 5
    5570:	0e 94 0b 3a 	call	0x7416	; 0x7416 <HardwareSerial::read()>
    5574:	8a e1       	ldi	r24, 0x1A	; 26
    5576:	95 e0       	ldi	r25, 0x05	; 5
    5578:	0e 94 da 39 	call	0x73b4	; 0x73b4 <HardwareSerial::available()>
    557c:	18 16       	cp	r1, r24
    557e:	19 06       	cpc	r1, r25
    5580:	ac f3       	brlt	.-22     	; 0x556c <pollCLI(unsigned char)+0x3e>

  // Generate and flush prompt character to the user, after a CRLF to reduce ambiguity.
  // Do this AFTER flushing the input so that sending command immediately after prompt should work.
  Serial.println();
    5582:	8a e1       	ldi	r24, 0x1A	; 26
    5584:	95 e0       	ldi	r25, 0x05	; 5
    5586:	0e 94 4c 3b 	call	0x7698	; 0x7698 <Print::println()>
  Serial.print(CLIPromptChar);
    558a:	8a e1       	ldi	r24, 0x1A	; 26
    558c:	95 e0       	ldi	r25, 0x05	; 5
    558e:	6e e3       	ldi	r22, 0x3E	; 62
    5590:	0e 94 44 3b 	call	0x7688	; 0x7688 <Print::print(char)>
  // Idle a short while to try to save energy, waiting for serial TX end and possible RX response start.
  flushSerialSCTSensitive();
    5594:	0e 94 ef 20 	call	0x41de	; 0x41de <flushSerialSCTSensitive()>
    5598:	10 e0       	ldi	r17, 0x00	; 0
    // Idle waiting for input, to save power, then/else do something useful with some CPU cycles...
#if CAN_IDLE_30MS
    // Minimise power consumption leaving CPU/UART clock running, if no danger of RX overrun.
    // Don't do this too close to end of target end time to avoid missing it.
    // Note: may get woken on timer0 interrupts as well as RX and watchdog.
    if(sct < targetMaxSCT-2) { idle15AndPoll(); continue; }
    559a:	e0 2e       	mov	r14, r16
    559c:	ff 24       	eor	r15, r15
    559e:	8e ef       	ldi	r24, 0xFE	; 254
    55a0:	9f ef       	ldi	r25, 0xFF	; 255
    55a2:	e8 0e       	add	r14, r24
    55a4:	f9 1e       	adc	r15, r25
#ifdef ENABLE_AVR_IDLE_MODE
// Idle productively polling I/O, etc, across the system while spending time in low-power mode if possible.
// Typically sleeps for nominally up to 30ms; tries to allow ealier wakeup if interrupt is received, etc.
// (Will often be prematurely woken by timer0 with ~16ms interval.)
// True iff watchdog timer expired; false if something else woke the CPU.
static bool inline idle15AndPoll() { const bool wd = idleCPU(WDTO_15MS); pollIO(!wd); return(wd); }
    55a6:	cc 24       	eor	r12, r12
    55a8:	c3 94       	inc	r12
  //Serial.setTimeout(timeoutms); const int n = Serial.readBytesUntil('\r', buf, MAXIMUM_CLI_RESPONSE_CHARS);
  uint8_t n = 0;
  while(n < MAXIMUM_CLI_RESPONSE_CHARS)
    {
    // Read next character if immediately available.
    if(Serial.available() > 0)
    55aa:	8a e1       	ldi	r24, 0x1A	; 26
    55ac:	95 e0       	ldi	r25, 0x05	; 5
    55ae:	0e 94 da 39 	call	0x73b4	; 0x73b4 <HardwareSerial::available()>
    55b2:	18 16       	cp	r1, r24
    55b4:	19 06       	cpc	r1, r25
    55b6:	0c f0       	brlt	.+2      	; 0x55ba <pollCLI(unsigned char)+0x8c>
    55b8:	43 c0       	rjmp	.+134    	; 0x5640 <pollCLI(unsigned char)+0x112>
      {
      int ic = Serial.read();
    55ba:	8a e1       	ldi	r24, 0x1A	; 26
    55bc:	95 e0       	ldi	r25, 0x05	; 5
    55be:	0e 94 0b 3a 	call	0x7416	; 0x7416 <HardwareSerial::read()>
    55c2:	bc 01       	movw	r22, r24
      if(('\r' == ic) || ('\n' == ic)) { break; } // Stop at CR, eg from CRLF, or LF.
    55c4:	8d 30       	cpi	r24, 0x0D	; 13
    55c6:	91 05       	cpc	r25, r1
    55c8:	09 f4       	brne	.+2      	; 0x55cc <pollCLI(unsigned char)+0x9e>
    55ca:	50 c0       	rjmp	.+160    	; 0x566c <pollCLI(unsigned char)+0x13e>
    55cc:	8a 30       	cpi	r24, 0x0A	; 10
    55ce:	91 05       	cpc	r25, r1
    55d0:	09 f4       	brne	.+2      	; 0x55d4 <pollCLI(unsigned char)+0xa6>
    55d2:	4c c0       	rjmp	.+152    	; 0x566c <pollCLI(unsigned char)+0x13e>
#ifdef CLI_INTERACTIVE_ECHO
      if(('\b' == ic) || (127 == ic))
    55d4:	88 30       	cpi	r24, 0x08	; 8
    55d6:	91 05       	cpc	r25, r1
    55d8:	19 f0       	breq	.+6      	; 0x55e0 <pollCLI(unsigned char)+0xb2>
    55da:	8f 37       	cpi	r24, 0x7F	; 127
    55dc:	91 05       	cpc	r25, r1
    55de:	99 f4       	brne	.+38     	; 0x5606 <pollCLI(unsigned char)+0xd8>
        {
        // Handle backspace or delete as delete...
        if(n > 0) // Ignore unless something to delete...
    55e0:	11 23       	and	r17, r17
    55e2:	19 f3       	breq	.-58     	; 0x55aa <pollCLI(unsigned char)+0x7c>
          {
          Serial.print('\b');
    55e4:	8a e1       	ldi	r24, 0x1A	; 26
    55e6:	95 e0       	ldi	r25, 0x05	; 5
    55e8:	68 e0       	ldi	r22, 0x08	; 8
    55ea:	0e 94 44 3b 	call	0x7688	; 0x7688 <Print::print(char)>
          Serial.print(' ');
    55ee:	8a e1       	ldi	r24, 0x1A	; 26
    55f0:	95 e0       	ldi	r25, 0x05	; 5
    55f2:	60 e2       	ldi	r22, 0x20	; 32
    55f4:	0e 94 44 3b 	call	0x7688	; 0x7688 <Print::print(char)>
          Serial.print('\b');
    55f8:	8a e1       	ldi	r24, 0x1A	; 26
    55fa:	95 e0       	ldi	r25, 0x05	; 5
    55fc:	68 e0       	ldi	r22, 0x08	; 8
    55fe:	0e 94 44 3b 	call	0x7688	; 0x7688 <Print::print(char)>
          --n;
    5602:	11 50       	subi	r17, 0x01	; 1
    5604:	2f c0       	rjmp	.+94     	; 0x5664 <pollCLI(unsigned char)+0x136>
          }
        continue;
        }
#endif
      if((ic < 32) || (ic > 126)) { continue; } // Drop bogus characters.
    5606:	80 97       	sbiw	r24, 0x20	; 32
    5608:	8f 35       	cpi	r24, 0x5F	; 95
    560a:	91 05       	cpc	r25, r1
    560c:	58 f5       	brcc	.+86     	; 0x5664 <pollCLI(unsigned char)+0x136>
      // Ignore any leading char that is not a letter (or '?'),
      // and force leading (command) char to upper case.
      if(0 == n)
    560e:	11 23       	and	r17, r17
    5610:	61 f4       	brne	.+24     	; 0x562a <pollCLI(unsigned char)+0xfc>
        {
        ic = toupper(ic);
    5612:	cb 01       	movw	r24, r22
    5614:	0e 94 21 3e 	call	0x7c42	; 0x7c42 <toupper>
    5618:	bc 01       	movw	r22, r24
        if(('?' != ic) && ((ic < 'A') || (ic > 'Z'))) { continue; }
    561a:	8f 33       	cpi	r24, 0x3F	; 63
    561c:	91 05       	cpc	r25, r1
    561e:	29 f0       	breq	.+10     	; 0x562a <pollCLI(unsigned char)+0xfc>
    5620:	81 54       	subi	r24, 0x41	; 65
    5622:	90 40       	sbci	r25, 0x00	; 0
    5624:	4a 97       	sbiw	r24, 0x1a	; 26
    5626:	08 f0       	brcs	.+2      	; 0x562a <pollCLI(unsigned char)+0xfc>
    5628:	c0 cf       	rjmp	.-128    	; 0x55aa <pollCLI(unsigned char)+0x7c>
        }
      // Store the incoming char.
      buf[n++] = (char) ic;
    562a:	e1 2f       	mov	r30, r17
    562c:	f0 e0       	ldi	r31, 0x00	; 0
    562e:	ea 58       	subi	r30, 0x8A	; 138
    5630:	fc 4f       	sbci	r31, 0xFC	; 252
    5632:	60 83       	st	Z, r22
    5634:	1f 5f       	subi	r17, 0xFF	; 255
#ifdef CLI_INTERACTIVE_ECHO
      Serial.print((char) ic); // Echo immediately.
    5636:	8a e1       	ldi	r24, 0x1A	; 26
    5638:	95 e0       	ldi	r25, 0x05	; 5
    563a:	0e 94 44 3b 	call	0x7688	; 0x7688 <Print::print(char)>
    563e:	12 c0       	rjmp	.+36     	; 0x5664 <pollCLI(unsigned char)+0x136>
#endif
      continue;
      }
    // Quit WITHOUT PROCESSING THE POSSIBLY-INCOMPLETE INPUT if time limit is hit (or very close).
    const uint8_t sct = getSubCycleTime();
    5640:	80 91 b2 00 	lds	r24, 0x00B2
    if(sct >= targetMaxSCT)
    5644:	80 17       	cp	r24, r16
    5646:	08 f0       	brcs	.+2      	; 0x564a <pollCLI(unsigned char)+0x11c>
    5648:	90 c2       	rjmp	.+1312   	; 0x5b6a <pollCLI(unsigned char)+0x63c>
    // Idle waiting for input, to save power, then/else do something useful with some CPU cycles...
#if CAN_IDLE_30MS
    // Minimise power consumption leaving CPU/UART clock running, if no danger of RX overrun.
    // Don't do this too close to end of target end time to avoid missing it.
    // Note: may get woken on timer0 interrupts as well as RX and watchdog.
    if(sct < targetMaxSCT-2) { idle15AndPoll(); continue; }
    564a:	90 e0       	ldi	r25, 0x00	; 0
    564c:	8e 15       	cp	r24, r14
    564e:	9f 05       	cpc	r25, r15
    5650:	3c f4       	brge	.+14     	; 0x5660 <pollCLI(unsigned char)+0x132>
    5652:	80 e0       	ldi	r24, 0x00	; 0
    5654:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <idleCPU(signed char)>
    5658:	8c 25       	eor	r24, r12
    565a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <pollIO(bool)>
    565e:	02 c0       	rjmp	.+4      	; 0x5664 <pollCLI(unsigned char)+0x136>
#endif
    burnHundredsOfCyclesProductivelyAndPoll(); // Use time time to poll for I/O, etc.
    5660:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <burnHundredsOfCyclesProductivelyAndPoll()>
  // Read a line up to a terminating CR, either on its own or as part of CRLF.
  // (Note that command content and timing may be useful to fold into PRNG entropy pool.)
  static char buf[MAXIMUM_CLI_RESPONSE_CHARS+1]; // Note: static state, efficient for small command lines.  Space for terminating '\0'.
  //Serial.setTimeout(timeoutms); const int n = Serial.readBytesUntil('\r', buf, MAXIMUM_CLI_RESPONSE_CHARS);
  uint8_t n = 0;
  while(n < MAXIMUM_CLI_RESPONSE_CHARS)
    5664:	19 30       	cpi	r17, 0x09	; 9
    5666:	08 f4       	brcc	.+2      	; 0x566a <pollCLI(unsigned char)+0x13c>
    5668:	a0 cf       	rjmp	.-192    	; 0x55aa <pollCLI(unsigned char)+0x7c>
    566a:	03 c0       	rjmp	.+6      	; 0x5672 <pollCLI(unsigned char)+0x144>
    if(sct < targetMaxSCT-2) { idle15AndPoll(); continue; }
#endif
    burnHundredsOfCyclesProductivelyAndPoll(); // Use time time to poll for I/O, etc.
    }

  if(n > 0)
    566c:	11 23       	and	r17, r17
    566e:	09 f4       	brne	.+2      	; 0x5672 <pollCLI(unsigned char)+0x144>
    5670:	7c c2       	rjmp	.+1272   	; 0x5b6a <pollCLI(unsigned char)+0x63c>
    {
    // Restart the CLI timer on receipt of plausible (ASCII) input (cf noise from UART floating or starting up),
    // Else print a very brief low-CPU-cost help message and give up as efficiently and safely and quickly as possible.
    const char firstChar = buf[0];
    const bool plausibleCommand = ((firstChar >= '?') && (firstChar <= 'z'));
    if(plausibleCommand) { resetCLIActiveTimer(); }
    5672:	80 91 76 03 	lds	r24, 0x0376
    5676:	8f 53       	subi	r24, 0x3F	; 63
    5678:	8c 33       	cpi	r24, 0x3C	; 60
    567a:	08 f0       	brcs	.+2      	; 0x567e <pollCLI(unsigned char)+0x150>
    567c:	46 c0       	rjmp	.+140    	; 0x570a <pollCLI(unsigned char)+0x1dc>
#define CLI_DEFAULT_TIMEOUT_M 2
static volatile uint8_t CLITimeoutM = CLI_DEFAULT_TIMEOUT_M;

// Reset CLI active timer to the full whack before it goes inactive again (ie makes CLI active for a while).
// Thread-safe.
void resetCLIActiveTimer() { CLITimeoutM = CLI_DEFAULT_TIMEOUT_M; }
    567e:	82 e0       	ldi	r24, 0x02	; 2
    5680:	80 93 3b 01 	sts	0x013B, r24
      if(neededWaking) { powerDownSerial(); }
      return;
      }

    // Null-terminate the received command line.
    buf[n] = '\0';
    5684:	e1 2f       	mov	r30, r17
    5686:	f0 e0       	ldi	r31, 0x00	; 0
    5688:	ea 58       	subi	r30, 0x8A	; 138
    568a:	fc 4f       	sbci	r31, 0xFC	; 252
    568c:	10 82       	st	Z, r1

    // strupr(buf); // Force to upper-case
#ifdef CLI_INTERACTIVE_ECHO
    Serial.println(); // ACK user's end-of-line.
    568e:	8a e1       	ldi	r24, 0x1A	; 26
    5690:	95 e0       	ldi	r25, 0x05	; 5
    5692:	0e 94 4c 3b 	call	0x7698	; 0x7698 <Print::println()>
    Serial.println(buf); // Echo the line received (asynchronously).
#endif

    // Process the input received, with action based on the first char...
    bool showStatus = true; // Default to showing status.
    switch(buf[0])
    5696:	80 91 76 03 	lds	r24, 0x0376
    569a:	8f 34       	cpi	r24, 0x4F	; 79
    569c:	09 f4       	brne	.+2      	; 0x56a0 <pollCLI(unsigned char)+0x172>
    569e:	5a c1       	rjmp	.+692    	; 0x5954 <pollCLI(unsigned char)+0x426>
    56a0:	80 35       	cpi	r24, 0x50	; 80
    56a2:	bc f4       	brge	.+46     	; 0x56d2 <pollCLI(unsigned char)+0x1a4>
    56a4:	86 34       	cpi	r24, 0x46	; 70
    56a6:	09 f4       	brne	.+2      	; 0x56aa <pollCLI(unsigned char)+0x17c>
    56a8:	d7 c0       	rjmp	.+430    	; 0x5858 <pollCLI(unsigned char)+0x32a>
    56aa:	87 34       	cpi	r24, 0x47	; 71
    56ac:	4c f4       	brge	.+18     	; 0x56c0 <pollCLI(unsigned char)+0x192>
    56ae:	84 34       	cpi	r24, 0x44	; 68
    56b0:	09 f4       	brne	.+2      	; 0x56b4 <pollCLI(unsigned char)+0x186>
    56b2:	4b c0       	rjmp	.+150    	; 0x574a <pollCLI(unsigned char)+0x21c>
    56b4:	85 34       	cpi	r24, 0x45	; 69
    56b6:	0c f0       	brlt	.+2      	; 0x56ba <pollCLI(unsigned char)+0x18c>
    56b8:	45 c0       	rjmp	.+138    	; 0x5744 <pollCLI(unsigned char)+0x216>
    56ba:	83 34       	cpi	r24, 0x43	; 67
    56bc:	59 f5       	brne	.+86     	; 0x5714 <pollCLI(unsigned char)+0x1e6>
    56be:	2e c0       	rjmp	.+92     	; 0x571c <pollCLI(unsigned char)+0x1ee>
    56c0:	89 34       	cpi	r24, 0x49	; 73
    56c2:	09 f4       	brne	.+2      	; 0x56c6 <pollCLI(unsigned char)+0x198>
    56c4:	2f c1       	rjmp	.+606    	; 0x5924 <pollCLI(unsigned char)+0x3f6>
    56c6:	8c 34       	cpi	r24, 0x4C	; 76
    56c8:	09 f4       	brne	.+2      	; 0x56cc <pollCLI(unsigned char)+0x19e>
    56ca:	30 c1       	rjmp	.+608    	; 0x592c <pollCLI(unsigned char)+0x3fe>
    56cc:	88 34       	cpi	r24, 0x48	; 72
    56ce:	11 f5       	brne	.+68     	; 0x5714 <pollCLI(unsigned char)+0x1e6>
    56d0:	ed c0       	rjmp	.+474    	; 0x58ac <pollCLI(unsigned char)+0x37e>
    56d2:	84 35       	cpi	r24, 0x54	; 84
    56d4:	09 f4       	brne	.+2      	; 0x56d8 <pollCLI(unsigned char)+0x1aa>
    56d6:	cb c1       	rjmp	.+918    	; 0x5a6e <pollCLI(unsigned char)+0x540>
    56d8:	85 35       	cpi	r24, 0x55	; 85
    56da:	4c f4       	brge	.+18     	; 0x56ee <pollCLI(unsigned char)+0x1c0>
    56dc:	81 35       	cpi	r24, 0x51	; 81
    56de:	09 f4       	brne	.+2      	; 0x56e2 <pollCLI(unsigned char)+0x1b4>
    56e0:	91 c1       	rjmp	.+802    	; 0x5a04 <pollCLI(unsigned char)+0x4d6>
    56e2:	81 35       	cpi	r24, 0x51	; 81
    56e4:	0c f4       	brge	.+2      	; 0x56e8 <pollCLI(unsigned char)+0x1ba>
    56e6:	4a c1       	rjmp	.+660    	; 0x597c <pollCLI(unsigned char)+0x44e>
    56e8:	83 35       	cpi	r24, 0x53	; 83
    56ea:	a1 f4       	brne	.+40     	; 0x5714 <pollCLI(unsigned char)+0x1e6>
    56ec:	8e c1       	rjmp	.+796    	; 0x5a0a <pollCLI(unsigned char)+0x4dc>
    56ee:	87 35       	cpi	r24, 0x57	; 87
    56f0:	09 f4       	brne	.+2      	; 0x56f4 <pollCLI(unsigned char)+0x1c6>
    56f2:	ee c1       	rjmp	.+988    	; 0x5ad0 <pollCLI(unsigned char)+0x5a2>
    56f4:	88 35       	cpi	r24, 0x58	; 88
    56f6:	1c f4       	brge	.+6      	; 0x56fe <pollCLI(unsigned char)+0x1d0>
    56f8:	86 35       	cpi	r24, 0x56	; 86
    56fa:	61 f4       	brne	.+24     	; 0x5714 <pollCLI(unsigned char)+0x1e6>
    56fc:	e6 c1       	rjmp	.+972    	; 0x5aca <pollCLI(unsigned char)+0x59c>
    56fe:	88 35       	cpi	r24, 0x58	; 88
    5700:	09 f4       	brne	.+2      	; 0x5704 <pollCLI(unsigned char)+0x1d6>
    5702:	ea c1       	rjmp	.+980    	; 0x5ad8 <pollCLI(unsigned char)+0x5aa>
    5704:	8a 35       	cpi	r24, 0x5A	; 90
    5706:	31 f4       	brne	.+12     	; 0x5714 <pollCLI(unsigned char)+0x1e6>
    5708:	fe c1       	rjmp	.+1020   	; 0x5b06 <pollCLI(unsigned char)+0x5d8>
    const char firstChar = buf[0];
    const bool plausibleCommand = ((firstChar >= '?') && (firstChar <= 'z'));
    if(plausibleCommand) { resetCLIActiveTimer(); }
    else
      {
      Serial.println(F("? for CLI help"));
    570a:	8a e1       	ldi	r24, 0x1A	; 26
    570c:	95 e0       	ldi	r25, 0x05	; 5
    570e:	66 ef       	ldi	r22, 0xF6	; 246
    5710:	71 e0       	ldi	r23, 0x01	; 1
    5712:	28 c2       	rjmp	.+1104   	; 0x5b64 <pollCLI(unsigned char)+0x636>
    bool showStatus = true; // Default to showing status.
    switch(buf[0])
      {
      // Explicit request for help, or unrecognised first character.
      // Avoid showing status as may already be rather a lot of output.
      default: case '?': { dumpCLIUsage(maxSCT); showStatus = false; break; }
    5714:	8d 2d       	mov	r24, r13
    5716:	0e 94 a5 27 	call	0x4f4a	; 0x4f4a <dumpCLIUsage(unsigned char)>
    571a:	20 c2       	rjmp	.+1088   	; 0x5b5c <pollCLI(unsigned char)+0x62e>
      case 'C':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 3 character sequence makes sense and is safe to tokenise, eg "C 0".
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    571c:	13 30       	cpi	r17, 0x03	; 3
    571e:	08 f4       	brcc	.+2      	; 0x5722 <pollCLI(unsigned char)+0x1f4>
    5720:	3b c2       	rjmp	.+1142   	; 0x5b98 <pollCLI(unsigned char)+0x66a>
    5722:	88 e7       	ldi	r24, 0x78	; 120
    5724:	93 e0       	ldi	r25, 0x03	; 3
    5726:	6b e2       	ldi	r22, 0x2B	; 43
    5728:	71 e0       	ldi	r23, 0x01	; 1
    572a:	ae 01       	movw	r20, r28
    572c:	4f 5f       	subi	r20, 0xFF	; 255
    572e:	5f 4f       	sbci	r21, 0xFF	; 255
    5730:	0e 94 1a 03 	call	0x634	; 0x634 <strtok_r>
    5734:	00 97       	sbiw	r24, 0x00	; 0
    5736:	09 f4       	brne	.+2      	; 0x573a <pollCLI(unsigned char)+0x20c>
    5738:	2f c2       	rjmp	.+1118   	; 0x5b98 <pollCLI(unsigned char)+0x66a>
          {
          const uint8_t m = (uint8_t) atoi(tok1);
    573a:	0e 94 cd 02 	call	0x59a	; 0x59a <atoi>
          setMinBoilerOnMinutes(m);
    573e:	0e 94 87 07 	call	0xf0e	; 0xf0e <setMinBoilerOnMinutes(unsigned char)>
    5742:	2a c2       	rjmp	.+1108   	; 0x5b98 <pollCLI(unsigned char)+0x66a>
#endif

      // Exit/deactivate CLI immediately.
      // This should be followed by JUST CR ('\r') OR LF ('\b')
      // else the second will wake the CLI up again.
      case 'E': { CLITimeoutM = 0; break; }
    5744:	10 92 3b 01 	sts	0x013B, r1
    5748:	27 c2       	rjmp	.+1102   	; 0x5b98 <pollCLI(unsigned char)+0x66a>
          }
#endif
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 3 character sequence makes sense and is safe to tokenise, eg "D 0".
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    574a:	13 30       	cpi	r17, 0x03	; 3
    574c:	08 f4       	brcc	.+2      	; 0x5750 <pollCLI(unsigned char)+0x222>
    574e:	06 c2       	rjmp	.+1036   	; 0x5b5c <pollCLI(unsigned char)+0x62e>
    5750:	88 e7       	ldi	r24, 0x78	; 120
    5752:	93 e0       	ldi	r25, 0x03	; 3
    5754:	6b e2       	ldi	r22, 0x2B	; 43
    5756:	71 e0       	ldi	r23, 0x01	; 1
    5758:	ae 01       	movw	r20, r28
    575a:	4f 5f       	subi	r20, 0xFF	; 255
    575c:	5f 4f       	sbci	r21, 0xFF	; 255
    575e:	0e 94 1a 03 	call	0x634	; 0x634 <strtok_r>
    5762:	00 97       	sbiw	r24, 0x00	; 0
    5764:	09 f4       	brne	.+2      	; 0x5768 <pollCLI(unsigned char)+0x23a>
    5766:	fa c1       	rjmp	.+1012   	; 0x5b5c <pollCLI(unsigned char)+0x62e>
          {
          const uint8_t setN = (uint8_t) atoi(tok1);
    5768:	0e 94 cd 02 	call	0x59a	; 0x59a <atoi>
    576c:	08 2f       	mov	r16, r24
          const uint8_t thisHH = getHoursLT();
    576e:	0e 94 48 24 	call	0x4890	; 0x4890 <getHoursLT()>
    5772:	f8 2e       	mov	r15, r24
//          const uint8_t lastHH = (thisHH > 0) ? (thisHH-1) : 23;
          // Print label.
          switch(setN)
    5774:	06 30       	cpi	r16, 0x06	; 6
    5776:	28 f4       	brcc	.+10     	; 0x5782 <pollCLI(unsigned char)+0x254>
    5778:	04 30       	cpi	r16, 0x04	; 4
    577a:	a0 f4       	brcc	.+40     	; 0x57a4 <pollCLI(unsigned char)+0x276>
    577c:	02 30       	cpi	r16, 0x02	; 2
    577e:	48 f0       	brcs	.+18     	; 0x5792 <pollCLI(unsigned char)+0x264>
    5780:	0c c0       	rjmp	.+24     	; 0x579a <pollCLI(unsigned char)+0x26c>
    5782:	08 30       	cpi	r16, 0x08	; 8
    5784:	a0 f0       	brcs	.+40     	; 0x57ae <pollCLI(unsigned char)+0x280>
    5786:	0a 30       	cpi	r16, 0x0A	; 10
    5788:	c8 f0       	brcs	.+50     	; 0x57bc <pollCLI(unsigned char)+0x28e>
            {
            default: { Serial.print('?'); break; }
    578a:	8a e1       	ldi	r24, 0x1A	; 26
    578c:	95 e0       	ldi	r25, 0x05	; 5
    578e:	6f e3       	ldi	r22, 0x3F	; 63
    5790:	18 c0       	rjmp	.+48     	; 0x57c2 <pollCLI(unsigned char)+0x294>
            case EE_STATS_SET_TEMP_BY_HOUR: case EE_STATS_SET_TEMP_BY_HOUR_SMOOTHED: { Serial.print('C'); break; }
    5792:	8a e1       	ldi	r24, 0x1A	; 26
    5794:	95 e0       	ldi	r25, 0x05	; 5
    5796:	63 e4       	ldi	r22, 0x43	; 67
    5798:	14 c0       	rjmp	.+40     	; 0x57c2 <pollCLI(unsigned char)+0x294>
            case EE_STATS_SET_AMBLIGHT_BY_HOUR: case EE_STATS_SET_AMBLIGHT_BY_HOUR_SMOOTHED: { Serial.print(F("ambl")); break; }
    579a:	8a e1       	ldi	r24, 0x1A	; 26
    579c:	95 e0       	ldi	r25, 0x05	; 5
    579e:	61 ef       	ldi	r22, 0xF1	; 241
    57a0:	71 e0       	ldi	r23, 0x01	; 1
    57a2:	09 c0       	rjmp	.+18     	; 0x57b6 <pollCLI(unsigned char)+0x288>
            case EE_STATS_SET_OCCPC_BY_HOUR: case EE_STATS_SET_OCCPC_BY_HOUR_SMOOTHED: { Serial.print(F("occ%")); break; }
    57a4:	8a e1       	ldi	r24, 0x1A	; 26
    57a6:	95 e0       	ldi	r25, 0x05	; 5
    57a8:	6c ee       	ldi	r22, 0xEC	; 236
    57aa:	71 e0       	ldi	r23, 0x01	; 1
    57ac:	04 c0       	rjmp	.+8      	; 0x57b6 <pollCLI(unsigned char)+0x288>
            case EE_STATS_SET_RHPC_BY_HOUR: case EE_STATS_SET_RHPC_BY_HOUR_SMOOTHED: { Serial.print(F("RH%")); break; }
    57ae:	8a e1       	ldi	r24, 0x1A	; 26
    57b0:	95 e0       	ldi	r25, 0x05	; 5
    57b2:	68 ee       	ldi	r22, 0xE8	; 232
    57b4:	71 e0       	ldi	r23, 0x01	; 1
    57b6:	0e 94 21 3b 	call	0x7642	; 0x7642 <Print::print(__FlashStringHelper const*)>
    57ba:	05 c0       	rjmp	.+10     	; 0x57c6 <pollCLI(unsigned char)+0x298>
            case EE_STATS_SET_USER1_BY_HOUR: case EE_STATS_SET_USER1_BY_HOUR_SMOOTHED: { Serial.print('u'); break; }
    57bc:	8a e1       	ldi	r24, 0x1A	; 26
    57be:	95 e0       	ldi	r25, 0x05	; 5
    57c0:	65 e7       	ldi	r22, 0x75	; 117
    57c2:	0e 94 44 3b 	call	0x7688	; 0x7688 <Print::print(char)>
#if defined(EE_STATS_SET_WARMMODE_BY_HOUR_OF_WK)
            case EE_STATS_SET_WARMMODE_BY_HOUR_OF_WK: { Serial.print('W'); break; }
#endif
            }
          Serial_print_space();
    57c6:	0e 94 48 27 	call	0x4e90	; 0x4e90 <Serial_print_space()>
          if(setN & 1) { Serial.print(F("smoothed")); } else { Serial.print(F("last")); }
    57ca:	00 ff       	sbrs	r16, 0
    57cc:	05 c0       	rjmp	.+10     	; 0x57d8 <pollCLI(unsigned char)+0x2aa>
    57ce:	8a e1       	ldi	r24, 0x1A	; 26
    57d0:	95 e0       	ldi	r25, 0x05	; 5
    57d2:	6f ed       	ldi	r22, 0xDF	; 223
    57d4:	71 e0       	ldi	r23, 0x01	; 1
    57d6:	04 c0       	rjmp	.+8      	; 0x57e0 <pollCLI(unsigned char)+0x2b2>
    57d8:	8a e1       	ldi	r24, 0x1A	; 26
    57da:	95 e0       	ldi	r25, 0x05	; 5
    57dc:	6a ed       	ldi	r22, 0xDA	; 218
    57de:	71 e0       	ldi	r23, 0x01	; 1
    57e0:	0e 94 21 3b 	call	0x7642	; 0x7642 <Print::print(__FlashStringHelper const*)>
          Serial_print_space();
    57e4:	0e 94 48 27 	call	0x4e90	; 0x4e90 <Serial_print_space()>
    57e8:	10 e0       	ldi	r17, 0x00	; 0
          // Now print values.
          for(uint8_t hh = 0; hh < 24; ++hh)
            {
            const uint8_t statRaw = getByHourStat(hh, setN);
    57ea:	81 2f       	mov	r24, r17
    57ec:	60 2f       	mov	r22, r16
    57ee:	0e 94 68 06 	call	0xcd0	; 0xcd0 <getByHourStat(unsigned char, unsigned char)>
    57f2:	68 2f       	mov	r22, r24
            // For unset stat show '-'...
            if(STATS_UNSET_BYTE == statRaw) { Serial.print('-'); }
    57f4:	8f 3f       	cpi	r24, 0xFF	; 255
    57f6:	31 f4       	brne	.+12     	; 0x5804 <pollCLI(unsigned char)+0x2d6>
    57f8:	8a e1       	ldi	r24, 0x1A	; 26
    57fa:	95 e0       	ldi	r25, 0x05	; 5
    57fc:	6d e2       	ldi	r22, 0x2D	; 45
    57fe:	0e 94 44 3b 	call	0x7688	; 0x7688 <Print::print(char)>
    5802:	19 c0       	rjmp	.+50     	; 0x5836 <pollCLI(unsigned char)+0x308>
            // ...else print more human-friendly version of stat.
            else switch(setN)
    5804:	02 30       	cpi	r16, 0x02	; 2
    5806:	38 f0       	brcs	.+14     	; 0x5816 <pollCLI(unsigned char)+0x2e8>
              {
              default: { Serial.print(statRaw); break; } // Generic decimal stats.
    5808:	8a e1       	ldi	r24, 0x1A	; 26
    580a:	95 e0       	ldi	r25, 0x05	; 5
    580c:	4a e0       	ldi	r20, 0x0A	; 10
    580e:	50 e0       	ldi	r21, 0x00	; 0
    5810:	0e 94 20 3c 	call	0x7840	; 0x7840 <Print::print(unsigned char, int)>
    5814:	10 c0       	rjmp	.+32     	; 0x5836 <pollCLI(unsigned char)+0x308>

              // Special formatting cases.
              case EE_STATS_SET_TEMP_BY_HOUR: case EE_STATS_SET_TEMP_BY_HOUR_SMOOTHED:
                // Uncompanded temperature, rounded.
                { Serial.print((expandTempC16(statRaw)+8) >> 4); break; }
    5816:	0e 94 a7 06 	call	0xd4e	; 0xd4e <expandTempC16(unsigned char)>
    581a:	bc 01       	movw	r22, r24
    581c:	68 5f       	subi	r22, 0xF8	; 248
    581e:	7f 4f       	sbci	r23, 0xFF	; 255
    5820:	54 e0       	ldi	r21, 0x04	; 4
    5822:	75 95       	asr	r23
    5824:	67 95       	ror	r22
    5826:	5a 95       	dec	r21
    5828:	e1 f7       	brne	.-8      	; 0x5822 <pollCLI(unsigned char)+0x2f4>
    582a:	8a e1       	ldi	r24, 0x1A	; 26
    582c:	95 e0       	ldi	r25, 0x05	; 5
    582e:	4a e0       	ldi	r20, 0x0A	; 10
    5830:	50 e0       	ldi	r21, 0x00	; 0
    5832:	0e 94 72 3c 	call	0x78e4	; 0x78e4 <Print::print(int, int)>
              case EE_STATS_SET_WARMMODE_BY_HOUR_OF_WK:
                // Warm mode usage bitmap by hour over week.
                { Serial.print(statRaw, HEX); break; }
#endif
              }
            if(hh == thisHH) { Serial.print('<'); } // Highlight current stat in this set.
    5836:	1f 15       	cp	r17, r15
    5838:	29 f4       	brne	.+10     	; 0x5844 <pollCLI(unsigned char)+0x316>
    583a:	8a e1       	ldi	r24, 0x1A	; 26
    583c:	95 e0       	ldi	r25, 0x05	; 5
    583e:	6c e3       	ldi	r22, 0x3C	; 60
    5840:	0e 94 44 3b 	call	0x7688	; 0x7688 <Print::print(char)>
#if 0 && defined(DEBUG)
            if(inOutlierQuartile(false, setN, hh)) { Serial.print('B'); } // In bottom quartile.
            if(inOutlierQuartile(true, setN, hh)) { Serial.print('T'); } // In top quartile.
#endif
            Serial_print_space();
    5844:	0e 94 48 27 	call	0x4e90	; 0x4e90 <Serial_print_space()>
            }
          Serial_print_space();
          if(setN & 1) { Serial.print(F("smoothed")); } else { Serial.print(F("last")); }
          Serial_print_space();
          // Now print values.
          for(uint8_t hh = 0; hh < 24; ++hh)
    5848:	1f 5f       	subi	r17, 0xFF	; 255
    584a:	18 31       	cpi	r17, 0x18	; 24
    584c:	71 f6       	brne	.-100    	; 0x57ea <pollCLI(unsigned char)+0x2bc>
            if(inOutlierQuartile(false, setN, hh)) { Serial.print('B'); } // In bottom quartile.
            if(inOutlierQuartile(true, setN, hh)) { Serial.print('T'); } // In top quartile.
#endif
            Serial_print_space();
            }
          Serial.println();
    584e:	8a e1       	ldi	r24, 0x1A	; 26
    5850:	95 e0       	ldi	r25, 0x05	; 5
    5852:	0e 94 4c 3b 	call	0x7698	; 0x7698 <Print::println()>
    5856:	82 c1       	rjmp	.+772    	; 0x5b5c <pollCLI(unsigned char)+0x62e>

      // Switch to FROST mode OR set FROST/setback temperature (even with temp pot available).
      // With F! force to frost and holiday (long-vacant) mode.  Useful for testing and for remote CLI use.
      case 'F':
        {
        if(n == 2)
    5858:	12 30       	cpi	r17, 0x02	; 2
    585a:	a1 f4       	brne	.+40     	; 0x5884 <pollCLI(unsigned char)+0x356>
          {
          if('!' == buf[1]) { Serial.println(F("hols")); }
    585c:	80 91 77 03 	lds	r24, 0x0377
    5860:	81 32       	cpi	r24, 0x21	; 33
    5862:	31 f4       	brne	.+12     	; 0x5870 <pollCLI(unsigned char)+0x342>
    5864:	8a e1       	ldi	r24, 0x1A	; 26
    5866:	95 e0       	ldi	r25, 0x05	; 5
    5868:	65 ed       	ldi	r22, 0xD5	; 213
    586a:	71 e0       	ldi	r23, 0x01	; 1
    586c:	0e 94 6c 3b 	call	0x76d8	; 0x76d8 <Print::println(__FlashStringHelper const*)>

    // Put directly into energy-conserving 'holiday mode' by making room appear to be 'long vacant'.
    // Be careful of retriggering presence immediately if this is set locally.
    // Set apparent vacancy to maximum to make setting obvious and to hide further vacancy from snooping.
    // Code elsewhere may wish to put the system in FROST mode also.
    void setHolidayMode() { activityCountdownM = 0; value = 0; occupationCountdownM = 0; vacancyH = 255U; }
    5870:	10 92 16 02 	sts	0x0216, r1
    5874:	10 92 14 02 	sts	0x0214, r1
    5878:	10 92 15 02 	sts	0x0215, r1
    587c:	8f ef       	ldi	r24, 0xFF	; 255
    587e:	80 93 17 02 	sts	0x0217, r24
    5882:	7e c1       	rjmp	.+764    	; 0x5b80 <pollCLI(unsigned char)+0x652>
          break;
          }
#if defined(SETTABLE_TARGET_TEMPERATURES)
        char *last; // Used by strtok_r().
        char *tok1;
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    5884:	13 30       	cpi	r17, 0x03	; 3
    5886:	08 f4       	brcc	.+2      	; 0x588a <pollCLI(unsigned char)+0x35c>
    5888:	7b c1       	rjmp	.+758    	; 0x5b80 <pollCLI(unsigned char)+0x652>
    588a:	88 e7       	ldi	r24, 0x78	; 120
    588c:	93 e0       	ldi	r25, 0x03	; 3
    588e:	6b e2       	ldi	r22, 0x2B	; 43
    5890:	71 e0       	ldi	r23, 0x01	; 1
    5892:	ae 01       	movw	r20, r28
    5894:	4f 5f       	subi	r20, 0xFF	; 255
    5896:	5f 4f       	sbci	r21, 0xFF	; 255
    5898:	0e 94 1a 03 	call	0x634	; 0x634 <strtok_r>
    589c:	00 97       	sbiw	r24, 0x00	; 0
    589e:	09 f4       	brne	.+2      	; 0x58a2 <pollCLI(unsigned char)+0x374>
    58a0:	6f c1       	rjmp	.+734    	; 0x5b80 <pollCLI(unsigned char)+0x652>
          {
          const uint8_t tempC = (uint8_t) atoi(tok1);
    58a2:	0e 94 cd 02 	call	0x59a	; 0x59a <atoi>
          if(!setFROSTTargetC(tempC)) { InvalidIgnored(); }
    58a6:	0e 94 8e 07 	call	0xf1c	; 0xf1c <setFROSTTargetC(unsigned char)>
    58aa:	09 c1       	rjmp	.+530    	; 0x5abe <pollCLI(unsigned char)+0x590>
      case 'H':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 5 character sequence makes sense and is safe to tokenise, eg "H 1 2".
        if((n >= 5) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    58ac:	15 30       	cpi	r17, 0x05	; 5
    58ae:	08 f4       	brcc	.+2      	; 0x58b2 <pollCLI(unsigned char)+0x384>
    58b0:	6b c1       	rjmp	.+726    	; 0x5b88 <pollCLI(unsigned char)+0x65a>
    58b2:	88 e7       	ldi	r24, 0x78	; 120
    58b4:	93 e0       	ldi	r25, 0x03	; 3
    58b6:	6b e2       	ldi	r22, 0x2B	; 43
    58b8:	71 e0       	ldi	r23, 0x01	; 1
    58ba:	ae 01       	movw	r20, r28
    58bc:	4f 5f       	subi	r20, 0xFF	; 255
    58be:	5f 4f       	sbci	r21, 0xFF	; 255
    58c0:	0e 94 1a 03 	call	0x634	; 0x634 <strtok_r>
    58c4:	7c 01       	movw	r14, r24
    58c6:	00 97       	sbiw	r24, 0x00	; 0
    58c8:	09 f4       	brne	.+2      	; 0x58cc <pollCLI(unsigned char)+0x39e>
    58ca:	5e c1       	rjmp	.+700    	; 0x5b88 <pollCLI(unsigned char)+0x65a>
          {
          char *tok2 = strtok_r(NULL, " ", &last);
    58cc:	80 e0       	ldi	r24, 0x00	; 0
    58ce:	90 e0       	ldi	r25, 0x00	; 0
    58d0:	6b e2       	ldi	r22, 0x2B	; 43
    58d2:	71 e0       	ldi	r23, 0x01	; 1
    58d4:	ae 01       	movw	r20, r28
    58d6:	4f 5f       	subi	r20, 0xFF	; 255
    58d8:	5f 4f       	sbci	r21, 0xFF	; 255
    58da:	0e 94 1a 03 	call	0x634	; 0x634 <strtok_r>
    58de:	8c 01       	movw	r16, r24
          if(NULL != tok2)
    58e0:	00 97       	sbiw	r24, 0x00	; 0
    58e2:	09 f4       	brne	.+2      	; 0x58e6 <pollCLI(unsigned char)+0x3b8>
    58e4:	59 c1       	rjmp	.+690    	; 0x5b98 <pollCLI(unsigned char)+0x66a>
            {
            const int hc1 = atoi(tok1);
    58e6:	c7 01       	movw	r24, r14
    58e8:	0e 94 cd 02 	call	0x59a	; 0x59a <atoi>
    58ec:	7c 01       	movw	r14, r24
            const int hc2 = atoi(tok2);
    58ee:	c8 01       	movw	r24, r16
    58f0:	0e 94 cd 02 	call	0x59a	; 0x59a <atoi>
    58f4:	8c 01       	movw	r16, r24
            if((hc1 < 0) || (hc1 > 99) || (hc2 < 0) || (hc2 > 99)) { InvalidIgnored(); }
    58f6:	94 e6       	ldi	r25, 0x64	; 100
    58f8:	e9 16       	cp	r14, r25
    58fa:	f1 04       	cpc	r15, r1
    58fc:	08 f0       	brcs	.+2      	; 0x5900 <pollCLI(unsigned char)+0x3d2>
    58fe:	e2 c0       	rjmp	.+452    	; 0x5ac4 <pollCLI(unsigned char)+0x596>
    5900:	17 fd       	sbrc	r17, 7
    5902:	e0 c0       	rjmp	.+448    	; 0x5ac4 <pollCLI(unsigned char)+0x596>
    5904:	04 36       	cpi	r16, 0x64	; 100
    5906:	11 05       	cpc	r17, r1
    5908:	0c f0       	brlt	.+2      	; 0x590c <pollCLI(unsigned char)+0x3de>
    590a:	dc c0       	rjmp	.+440    	; 0x5ac4 <pollCLI(unsigned char)+0x596>
            else
              {
              FHT8VSetHC1(hc1);
    590c:	8e 2d       	mov	r24, r14
    590e:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <FHT8VSetHC1(unsigned char)>
              FHT8VSetHC2(hc2);
    5912:	80 2f       	mov	r24, r16
    5914:	0e 94 76 14 	call	0x28ec	; 0x28ec <FHT8VSetHC2(unsigned char)>
    5918:	02 c0       	rjmp	.+4      	; 0x591e <pollCLI(unsigned char)+0x3f0>
              }
            }
          }
        else if(n < 2) // Just 'H', possibly with trailing whitespace.
          {
          FHT8VClearHC();
    591a:	0e 94 82 14 	call	0x2904	; 0x2904 <FHT8VClearHC()>
          FHT8VSyncAndTXReset(); // Force into unsynchronized state.
    591e:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <FHT8VSyncAndTXReset()>
    5922:	3a c1       	rjmp	.+628    	; 0x5b98 <pollCLI(unsigned char)+0x66a>

      // Set new random ID.
      // Should possibly restart afterwards.
      case 'I':
        {
        ensureIDCreated(true); // Force ID.
    5924:	81 e0       	ldi	r24, 0x01	; 1
    5926:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <ensureIDCreated(bool)>
    592a:	36 c1       	rjmp	.+620    	; 0x5b98 <pollCLI(unsigned char)+0x66a>
        int s = 0;
//#if MAX_SIMPLE_SCHEDULES > 1
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 3 character sequence makes sense and is safe to tokenise, eg "L 0".
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    592c:	13 30       	cpi	r17, 0x03	; 3
    592e:	08 f4       	brcc	.+2      	; 0x5932 <pollCLI(unsigned char)+0x404>
    5930:	2e c1       	rjmp	.+604    	; 0x5b8e <pollCLI(unsigned char)+0x660>
    5932:	88 e7       	ldi	r24, 0x78	; 120
    5934:	93 e0       	ldi	r25, 0x03	; 3
    5936:	6b e2       	ldi	r22, 0x2B	; 43
    5938:	71 e0       	ldi	r23, 0x01	; 1
    593a:	ae 01       	movw	r20, r28
    593c:	4f 5f       	subi	r20, 0xFF	; 255
    593e:	5f 4f       	sbci	r21, 0xFF	; 255
    5940:	0e 94 1a 03 	call	0x634	; 0x634 <strtok_r>
    5944:	00 97       	sbiw	r24, 0x00	; 0
    5946:	09 f4       	brne	.+2      	; 0x594a <pollCLI(unsigned char)+0x41c>
    5948:	22 c1       	rjmp	.+580    	; 0x5b8e <pollCLI(unsigned char)+0x660>
          {
          s = atoi(tok1);
    594a:	0e 94 cd 02 	call	0x59a	; 0x59a <atoi>
          }
//#endif
        handleLEARN((uint8_t) s); break;
    594e:	0e 94 45 28 	call	0x508a	; 0x508a <handleLEARN(unsigned char)>
    5952:	22 c1       	rjmp	.+580    	; 0x5b98 <pollCLI(unsigned char)+0x66a>
      case 'O':
        {
        uint8_t minPcOpen = 0; // Will clear override and use default threshold.
        char *last; // Used by strtok_r().
        char *tok1;
        if((n > 1) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    5954:	12 30       	cpi	r17, 0x02	; 2
    5956:	08 f4       	brcc	.+2      	; 0x595a <pollCLI(unsigned char)+0x42c>
    5958:	1d c1       	rjmp	.+570    	; 0x5b94 <pollCLI(unsigned char)+0x666>
    595a:	88 e7       	ldi	r24, 0x78	; 120
    595c:	93 e0       	ldi	r25, 0x03	; 3
    595e:	6b e2       	ldi	r22, 0x2B	; 43
    5960:	71 e0       	ldi	r23, 0x01	; 1
    5962:	ae 01       	movw	r20, r28
    5964:	4f 5f       	subi	r20, 0xFF	; 255
    5966:	5f 4f       	sbci	r21, 0xFF	; 255
    5968:	0e 94 1a 03 	call	0x634	; 0x634 <strtok_r>
    596c:	00 97       	sbiw	r24, 0x00	; 0
    596e:	09 f4       	brne	.+2      	; 0x5972 <pollCLI(unsigned char)+0x444>
    5970:	11 c1       	rjmp	.+546    	; 0x5b94 <pollCLI(unsigned char)+0x666>
          { minPcOpen = (uint8_t) atoi(tok1); }
    5972:	0e 94 cd 02 	call	0x59a	; 0x59a <atoi>
        NominalRadValve.setMinValvePcReallyOpen(minPcOpen);
    5976:	0e 94 0d 0a 	call	0x141a	; 0x141a <ModelledRadValve::setMinValvePcReallyOpen(unsigned char)>
    597a:	0e c1       	rjmp	.+540    	; 0x5b98 <pollCLI(unsigned char)+0x66a>
      case 'P':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 5 character sequence makes sense and is safe to tokenise, eg "P 1 2".
        if((n >= 5) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    597c:	15 30       	cpi	r17, 0x05	; 5
    597e:	08 f4       	brcc	.+2      	; 0x5982 <pollCLI(unsigned char)+0x454>
    5980:	0b c1       	rjmp	.+534    	; 0x5b98 <pollCLI(unsigned char)+0x66a>
    5982:	88 e7       	ldi	r24, 0x78	; 120
    5984:	93 e0       	ldi	r25, 0x03	; 3
    5986:	6b e2       	ldi	r22, 0x2B	; 43
    5988:	71 e0       	ldi	r23, 0x01	; 1
    598a:	8e 01       	movw	r16, r28
    598c:	0f 5f       	subi	r16, 0xFF	; 255
    598e:	1f 4f       	sbci	r17, 0xFF	; 255
    5990:	a8 01       	movw	r20, r16
    5992:	0e 94 1a 03 	call	0x634	; 0x634 <strtok_r>
    5996:	7c 01       	movw	r14, r24
    5998:	00 97       	sbiw	r24, 0x00	; 0
    599a:	09 f4       	brne	.+2      	; 0x599e <pollCLI(unsigned char)+0x470>
    599c:	fd c0       	rjmp	.+506    	; 0x5b98 <pollCLI(unsigned char)+0x66a>
          {
          char *tok2 = strtok_r(NULL, " ", &last);
    599e:	80 e0       	ldi	r24, 0x00	; 0
    59a0:	90 e0       	ldi	r25, 0x00	; 0
    59a2:	6b e2       	ldi	r22, 0x2B	; 43
    59a4:	71 e0       	ldi	r23, 0x01	; 1
    59a6:	a8 01       	movw	r20, r16
    59a8:	0e 94 1a 03 	call	0x634	; 0x634 <strtok_r>
    59ac:	8c 01       	movw	r16, r24
          if(NULL != tok2)
    59ae:	00 97       	sbiw	r24, 0x00	; 0
    59b0:	09 f4       	brne	.+2      	; 0x59b4 <pollCLI(unsigned char)+0x486>
    59b2:	f2 c0       	rjmp	.+484    	; 0x5b98 <pollCLI(unsigned char)+0x66a>
            {
            const int hh = atoi(tok1);
    59b4:	c7 01       	movw	r24, r14
    59b6:	0e 94 cd 02 	call	0x59a	; 0x59a <atoi>
    59ba:	7c 01       	movw	r14, r24
            const int mm = atoi(tok2);
    59bc:	c8 01       	movw	r24, r16
    59be:	0e 94 cd 02 	call	0x59a	; 0x59a <atoi>
    59c2:	8c 01       	movw	r16, r24
            int s = 0;
//#if MAX_SIMPLE_SCHEDULES > 1         
            char *tok3 = strtok_r(NULL, " ", &last);
    59c4:	80 e0       	ldi	r24, 0x00	; 0
    59c6:	90 e0       	ldi	r25, 0x00	; 0
    59c8:	6b e2       	ldi	r22, 0x2B	; 43
    59ca:	71 e0       	ldi	r23, 0x01	; 1
    59cc:	ae 01       	movw	r20, r28
    59ce:	4f 5f       	subi	r20, 0xFF	; 255
    59d0:	5f 4f       	sbci	r21, 0xFF	; 255
    59d2:	0e 94 1a 03 	call	0x634	; 0x634 <strtok_r>
            if(NULL != tok3)
    59d6:	00 97       	sbiw	r24, 0x00	; 0
    59d8:	19 f4       	brne	.+6      	; 0x59e0 <pollCLI(unsigned char)+0x4b2>
    59da:	60 e0       	ldi	r22, 0x00	; 0
    59dc:	70 e0       	ldi	r23, 0x00	; 0
    59de:	03 c0       	rjmp	.+6      	; 0x59e6 <pollCLI(unsigned char)+0x4b8>
              {
              s = atoi(tok3);
    59e0:	0e 94 cd 02 	call	0x59a	; 0x59a <atoi>
    59e4:	bc 01       	movw	r22, r24
              }
//#endif
            // Does not fully validate user inputs (eg for -ve values), but cannot set impossible values.
            if(!setSimpleSchedule((uint_least16_t) ((60 * hh) + mm), (uint8_t)s)) { InvalidIgnored(); }
    59e6:	8c e3       	ldi	r24, 0x3C	; 60
    59e8:	90 e0       	ldi	r25, 0x00	; 0
    59ea:	9c 01       	movw	r18, r24
    59ec:	e2 9e       	mul	r14, r18
    59ee:	c0 01       	movw	r24, r0
    59f0:	e3 9e       	mul	r14, r19
    59f2:	90 0d       	add	r25, r0
    59f4:	f2 9e       	mul	r15, r18
    59f6:	90 0d       	add	r25, r0
    59f8:	11 24       	eor	r1, r1
    59fa:	80 0f       	add	r24, r16
    59fc:	91 1f       	adc	r25, r17
    59fe:	0e 94 59 25 	call	0x4ab2	; 0x4ab2 <setSimpleSchedule(unsigned int, unsigned char)>
    5a02:	5d c0       	rjmp	.+186    	; 0x5abe <pollCLI(unsigned char)+0x590>
        break;
        }

#ifdef SUPPORT_BAKE
      // Switch to (or restart) BAKE (Quick Heat) mode: Q
      case 'Q': { startBakeDebounced(); break; }
    5a04:	0e 94 c4 03 	call	0x788	; 0x788 <startBakeDebounced()>
    5a08:	c7 c0       	rjmp	.+398    	; 0x5b98 <pollCLI(unsigned char)+0x66a>
#endif

      // Status line and optional smart/scheduled warming prediction request.
      case 'S':
        {
        Serial.print(F("Resets: "));
    5a0a:	8a e1       	ldi	r24, 0x1A	; 26
    5a0c:	95 e0       	ldi	r25, 0x05	; 5
    5a0e:	6c ec       	ldi	r22, 0xCC	; 204
    5a10:	71 e0       	ldi	r23, 0x01	; 1
    5a12:	0e 94 21 3b 	call	0x7642	; 0x7642 <Print::print(__FlashStringHelper const*)>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    5a16:	f9 99       	sbic	0x1f, 1	; 31
    5a18:	fe cf       	rjmp	.-4      	; 0x5a16 <pollCLI(unsigned char)+0x4e8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    5a1a:	86 e0       	ldi	r24, 0x06	; 6
    5a1c:	90 e0       	ldi	r25, 0x00	; 0
    5a1e:	92 bd       	out	0x22, r25	; 34
    5a20:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    5a22:	f8 9a       	sbi	0x1f, 0	; 31
    5a24:	60 b5       	in	r22, 0x20	; 32
        const uint8_t resetCount = eeprom_read_byte((uint8_t *)EE_START_RESET_COUNT);
        Serial.print(resetCount);
    5a26:	8a e1       	ldi	r24, 0x1A	; 26
    5a28:	95 e0       	ldi	r25, 0x05	; 5
    5a2a:	4a e0       	ldi	r20, 0x0A	; 10
    5a2c:	50 e0       	ldi	r21, 0x00	; 0
    5a2e:	0e 94 20 3c 	call	0x7840	; 0x7840 <Print::print(unsigned char, int)>
        Serial.println();
    5a32:	8a e1       	ldi	r24, 0x1A	; 26
    5a34:	95 e0       	ldi	r25, 0x05	; 5
    5a36:	0e 94 4c 3b 	call	0x7698	; 0x7698 <Print::println()>
        Serial.print(F("Overruns: "));
    5a3a:	8a e1       	ldi	r24, 0x1A	; 26
    5a3c:	95 e0       	ldi	r25, 0x05	; 5
    5a3e:	61 ec       	ldi	r22, 0xC1	; 193
    5a40:	71 e0       	ldi	r23, 0x01	; 1
    5a42:	0e 94 21 3b 	call	0x7642	; 0x7642 <Print::print(__FlashStringHelper const*)>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    5a46:	f9 99       	sbic	0x1f, 1	; 31
    5a48:	fe cf       	rjmp	.-4      	; 0x5a46 <pollCLI(unsigned char)+0x518>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    5a4a:	8d e1       	ldi	r24, 0x1D	; 29
    5a4c:	90 e0       	ldi	r25, 0x00	; 0
    5a4e:	92 bd       	out	0x22, r25	; 34
    5a50:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    5a52:	f8 9a       	sbi	0x1f, 0	; 31
    5a54:	60 b5       	in	r22, 0x20	; 32
        const uint8_t overrunCount = (~eeprom_read_byte((uint8_t *)EE_START_OVERRUN_COUNTER)) & 0xff;
        Serial.print(overrunCount);
    5a56:	60 95       	com	r22
    5a58:	8a e1       	ldi	r24, 0x1A	; 26
    5a5a:	95 e0       	ldi	r25, 0x05	; 5
    5a5c:	4a e0       	ldi	r20, 0x0A	; 10
    5a5e:	50 e0       	ldi	r21, 0x00	; 0
    5a60:	0e 94 20 3c 	call	0x7840	; 0x7840 <Print::print(unsigned char, int)>
        Serial.println();
    5a64:	8a e1       	ldi	r24, 0x1A	; 26
    5a66:	95 e0       	ldi	r25, 0x05	; 5
    5a68:	0e 94 4c 3b 	call	0x7698	; 0x7698 <Print::println()>
    5a6c:	95 c0       	rjmp	.+298    	; 0x5b98 <pollCLI(unsigned char)+0x66a>
      case 'T':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 5 character sequence makes sense and is safe to tokenise, eg "T 1 2".
        if((n >= 5) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    5a6e:	15 30       	cpi	r17, 0x05	; 5
    5a70:	08 f4       	brcc	.+2      	; 0x5a74 <pollCLI(unsigned char)+0x546>
    5a72:	92 c0       	rjmp	.+292    	; 0x5b98 <pollCLI(unsigned char)+0x66a>
    5a74:	88 e7       	ldi	r24, 0x78	; 120
    5a76:	93 e0       	ldi	r25, 0x03	; 3
    5a78:	6b e2       	ldi	r22, 0x2B	; 43
    5a7a:	71 e0       	ldi	r23, 0x01	; 1
    5a7c:	7e 01       	movw	r14, r28
    5a7e:	08 94       	sec
    5a80:	e1 1c       	adc	r14, r1
    5a82:	f1 1c       	adc	r15, r1
    5a84:	a7 01       	movw	r20, r14
    5a86:	0e 94 1a 03 	call	0x634	; 0x634 <strtok_r>
    5a8a:	8c 01       	movw	r16, r24
    5a8c:	00 97       	sbiw	r24, 0x00	; 0
    5a8e:	09 f4       	brne	.+2      	; 0x5a92 <pollCLI(unsigned char)+0x564>
    5a90:	83 c0       	rjmp	.+262    	; 0x5b98 <pollCLI(unsigned char)+0x66a>
          {
          char *tok2 = strtok_r(NULL, " ", &last);
    5a92:	80 e0       	ldi	r24, 0x00	; 0
    5a94:	90 e0       	ldi	r25, 0x00	; 0
    5a96:	6b e2       	ldi	r22, 0x2B	; 43
    5a98:	71 e0       	ldi	r23, 0x01	; 1
    5a9a:	a7 01       	movw	r20, r14
    5a9c:	0e 94 1a 03 	call	0x634	; 0x634 <strtok_r>
    5aa0:	7c 01       	movw	r14, r24
          if(NULL != tok2)
    5aa2:	00 97       	sbiw	r24, 0x00	; 0
    5aa4:	09 f4       	brne	.+2      	; 0x5aa8 <pollCLI(unsigned char)+0x57a>
    5aa6:	78 c0       	rjmp	.+240    	; 0x5b98 <pollCLI(unsigned char)+0x66a>
            {
            const int hh = atoi(tok1);
    5aa8:	c8 01       	movw	r24, r16
    5aaa:	0e 94 cd 02 	call	0x59a	; 0x59a <atoi>
    5aae:	8c 01       	movw	r16, r24
            const int mm = atoi(tok2);
    5ab0:	c7 01       	movw	r24, r14
    5ab2:	0e 94 cd 02 	call	0x59a	; 0x59a <atoi>
    5ab6:	bc 01       	movw	r22, r24
            // TODO: zap collected stats if time change too large (eg >> 1h).
            if(!setHoursMinutesLT(hh, mm)) { InvalidIgnored(); }
    5ab8:	c8 01       	movw	r24, r16
    5aba:	0e 94 03 25 	call	0x4a06	; 0x4a06 <setHoursMinutesLT(int, int)>
    5abe:	88 23       	and	r24, r24
    5ac0:	09 f0       	breq	.+2      	; 0x5ac4 <pollCLI(unsigned char)+0x596>
    5ac2:	6a c0       	rjmp	.+212    	; 0x5b98 <pollCLI(unsigned char)+0x66a>
    5ac4:	0e 94 4e 27 	call	0x4e9c	; 0x4e9c <InvalidIgnored()>
    5ac8:	67 c0       	rjmp	.+206    	; 0x5b98 <pollCLI(unsigned char)+0x66a>
        }

      // Version information printed as one line to serial, machine- and human- parseable.
      case 'V':
        {
        serialPrintlnBuildVersion();
    5aca:	0e 94 ad 2f 	call	0x5f5a	; 0x5f5a <serialPrintlnBuildVersion()>
    5ace:	64 c0       	rjmp	.+200    	; 0x5b98 <pollCLI(unsigned char)+0x66a>
          }
        else
#endif
          {
#ifdef SUPPORT_BAKE
          cancelBakeDebounced(); // Ensure BAKE mode not entered.
    5ad0:	0e 94 c1 03 	call	0x782	; 0x782 <cancelBakeDebounced()>
#endif
          setWarmModeDebounced(true); // No parameter supplied; switch to WARM mode.
    5ad4:	81 e0       	ldi	r24, 0x01	; 1
    5ad6:	55 c0       	rjmp	.+170    	; 0x5b82 <pollCLI(unsigned char)+0x654>
      case 'X':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 3 character sequence makes sense and is safe to tokenise, eg "X 0".
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    5ad8:	13 30       	cpi	r17, 0x03	; 3
    5ada:	08 f4       	brcc	.+2      	; 0x5ade <pollCLI(unsigned char)+0x5b0>
    5adc:	5d c0       	rjmp	.+186    	; 0x5b98 <pollCLI(unsigned char)+0x66a>
    5ade:	88 e7       	ldi	r24, 0x78	; 120
    5ae0:	93 e0       	ldi	r25, 0x03	; 3
    5ae2:	6b e2       	ldi	r22, 0x2B	; 43
    5ae4:	71 e0       	ldi	r23, 0x01	; 1
    5ae6:	ae 01       	movw	r20, r28
    5ae8:	4f 5f       	subi	r20, 0xFF	; 255
    5aea:	5f 4f       	sbci	r21, 0xFF	; 255
    5aec:	0e 94 1a 03 	call	0x634	; 0x634 <strtok_r>
    5af0:	00 97       	sbiw	r24, 0x00	; 0
    5af2:	09 f4       	brne	.+2      	; 0x5af6 <pollCLI(unsigned char)+0x5c8>
    5af4:	51 c0       	rjmp	.+162    	; 0x5b98 <pollCLI(unsigned char)+0x66a>
          {
          const uint8_t nn = (uint8_t) atoi(tok1);
    5af6:	0e 94 cd 02 	call	0x59a	; 0x59a <atoi>
    5afa:	68 2f       	mov	r22, r24
          eeprom_smart_update_byte((uint8_t *)EE_START_STATS_TX_ENABLE, nn);
    5afc:	8c e1       	ldi	r24, 0x1C	; 28
    5afe:	90 e0       	ldi	r25, 0x00	; 0
    5b00:	0e 94 49 10 	call	0x2092	; 0x2092 <eeprom_smart_update_byte(unsigned char*, unsigned char)>
    5b04:	49 c0       	rjmp	.+146    	; 0x5b98 <pollCLI(unsigned char)+0x66a>

      // Zap/erase learned statistics.
      case 'Z':
        {
        // Try to avoid causing an overrun if near the end of the minor cycle (even allowing for the warning message if unfinished!).
        if(zapStats((uint16_t) fnmax(1, ((int)msRemainingThisBasicCycle()/2) - 20)))
    5b06:	81 e0       	ldi	r24, 0x01	; 1
    5b08:	90 e0       	ldi	r25, 0x00	; 0
    5b0a:	9c 83       	std	Y+4, r25	; 0x04
    5b0c:	8b 83       	std	Y+3, r24	; 0x03
    5b0e:	80 91 b2 00 	lds	r24, 0x00B2
    5b12:	2f ef       	ldi	r18, 0xFF	; 255
    5b14:	30 e0       	ldi	r19, 0x00	; 0
    5b16:	28 1b       	sub	r18, r24
    5b18:	31 09       	sbc	r19, r1
    5b1a:	c9 01       	movw	r24, r18
    5b1c:	43 e0       	ldi	r20, 0x03	; 3
    5b1e:	88 0f       	add	r24, r24
    5b20:	99 1f       	adc	r25, r25
    5b22:	4a 95       	dec	r20
    5b24:	e1 f7       	brne	.-8      	; 0x5b1e <pollCLI(unsigned char)+0x5f0>
    5b26:	82 1b       	sub	r24, r18
    5b28:	93 0b       	sbc	r25, r19
    5b2a:	95 95       	asr	r25
    5b2c:	87 95       	ror	r24
    5b2e:	44 97       	sbiw	r24, 0x14	; 20
    5b30:	9e 83       	std	Y+6, r25	; 0x06
    5b32:	8d 83       	std	Y+5, r24	; 0x05
    5b34:	81 30       	cpi	r24, 0x01	; 1
    5b36:	91 05       	cpc	r25, r1
    5b38:	14 f4       	brge	.+4      	; 0x5b3e <pollCLI(unsigned char)+0x610>
    5b3a:	81 e0       	ldi	r24, 0x01	; 1
    5b3c:	90 e0       	ldi	r25, 0x00	; 0
    5b3e:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <zapStats(unsigned int)>
    5b42:	88 23       	and	r24, r24
    5b44:	29 f0       	breq	.+10     	; 0x5b50 <pollCLI(unsigned char)+0x622>
          { Serial.println(F("Zapped.")); }
    5b46:	8a e1       	ldi	r24, 0x1A	; 26
    5b48:	95 e0       	ldi	r25, 0x05	; 5
    5b4a:	69 eb       	ldi	r22, 0xB9	; 185
    5b4c:	71 e0       	ldi	r23, 0x01	; 1
    5b4e:	04 c0       	rjmp	.+8      	; 0x5b58 <pollCLI(unsigned char)+0x62a>
        else
          { Serial.println(F("Not finished.")); }
    5b50:	8a e1       	ldi	r24, 0x1A	; 26
    5b52:	95 e0       	ldi	r25, 0x05	; 5
    5b54:	6b ea       	ldi	r22, 0xAB	; 171
    5b56:	71 e0       	ldi	r23, 0x01	; 1
    5b58:	0e 94 6c 3b 	call	0x76d8	; 0x76d8 <Print::println(__FlashStringHelper const*)>
      }

    // Almost always show status line afterwards as feedback of command received and new state.
    if(showStatus) { serialStatusReport(); }
    // Else show ack of command received.
    else { Serial.println(F("OK")); }
    5b5c:	8a e1       	ldi	r24, 0x1A	; 26
    5b5e:	95 e0       	ldi	r25, 0x05	; 5
    5b60:	68 ea       	ldi	r22, 0xA8	; 168
    5b62:	71 e0       	ldi	r23, 0x01	; 1
    5b64:	0e 94 6c 3b 	call	0x76d8	; 0x76d8 <Print::println(__FlashStringHelper const*)>
    5b68:	04 c0       	rjmp	.+8      	; 0x5b72 <pollCLI(unsigned char)+0x644>
    }
  else { Serial.println(); } // Terminate empty/partial CLI input line after timeout.
    5b6a:	8a e1       	ldi	r24, 0x1A	; 26
    5b6c:	95 e0       	ldi	r25, 0x05	; 5
    5b6e:	0e 94 4c 3b 	call	0x7698	; 0x7698 <Print::println()>

  // Force any pending output before return / possible UART power-down.
  flushSerialSCTSensitive();
    5b72:	0e 94 ef 20 	call	0x41de	; 0x41de <flushSerialSCTSensitive()>

  if(neededWaking) { powerDownSerial(); }
    5b76:	bb 20       	and	r11, r11
    5b78:	91 f0       	breq	.+36     	; 0x5b9e <pollCLI(unsigned char)+0x670>
    5b7a:	0e 94 b9 20 	call	0x4172	; 0x4172 <powerDownSerial()>
    5b7e:	0f c0       	rjmp	.+30     	; 0x5b9e <pollCLI(unsigned char)+0x670>
          const uint8_t tempC = (uint8_t) atoi(tok1);
          if(!setFROSTTargetC(tempC)) { InvalidIgnored(); }
          }
        else
#endif
          { setWarmModeDebounced(false); } // No parameter supplied; switch to FROST mode.
    5b80:	80 e0       	ldi	r24, 0x00	; 0
    5b82:	0e 94 b1 03 	call	0x762	; 0x762 <setWarmModeDebounced(bool)>
    5b86:	08 c0       	rjmp	.+16     	; 0x5b98 <pollCLI(unsigned char)+0x66a>
              FHT8VSetHC2(hc2);
              FHT8VSyncAndTXReset(); // Force re-sync with FHT8V valve.
              }
            }
          }
        else if(n < 2) // Just 'H', possibly with trailing whitespace.
    5b88:	12 30       	cpi	r17, 0x02	; 2
    5b8a:	30 f4       	brcc	.+12     	; 0x5b98 <pollCLI(unsigned char)+0x66a>
    5b8c:	c6 ce       	rjmp	.-628    	; 0x591a <pollCLI(unsigned char)+0x3ec>
    5b8e:	80 e0       	ldi	r24, 0x00	; 0
    5b90:	90 e0       	ldi	r25, 0x00	; 0
    5b92:	dd ce       	rjmp	.-582    	; 0x594e <pollCLI(unsigned char)+0x420>
    5b94:	80 e0       	ldi	r24, 0x00	; 0
    5b96:	ef ce       	rjmp	.-546    	; 0x5976 <pollCLI(unsigned char)+0x448>
        break;
        }
      }

    // Almost always show status line afterwards as feedback of command received and new state.
    if(showStatus) { serialStatusReport(); }
    5b98:	0e 94 7b 28 	call	0x50f6	; 0x50f6 <serialStatusReport()>
    5b9c:	ea cf       	rjmp	.-44     	; 0x5b72 <pollCLI(unsigned char)+0x644>

  // Force any pending output before return / possible UART power-down.
  flushSerialSCTSensitive();

  if(neededWaking) { powerDownSerial(); }
  }
    5b9e:	26 96       	adiw	r28, 0x06	; 6
    5ba0:	0f b6       	in	r0, 0x3f	; 63
    5ba2:	f8 94       	cli
    5ba4:	de bf       	out	0x3e, r29	; 62
    5ba6:	0f be       	out	0x3f, r0	; 63
    5ba8:	cd bf       	out	0x3d, r28	; 61
    5baa:	cf 91       	pop	r28
    5bac:	df 91       	pop	r29
    5bae:	1f 91       	pop	r17
    5bb0:	0f 91       	pop	r16
    5bb2:	ff 90       	pop	r15
    5bb4:	ef 90       	pop	r14
    5bb6:	df 90       	pop	r13
    5bb8:	cf 90       	pop	r12
    5bba:	bf 90       	pop	r11
    5bbc:	08 95       	ret

00005bbe <offPause()>:
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define MEDIUM_PAUSE_MS 60
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
// Big low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define BIG_PAUSE_MS 120
static void inline bigPause() { nap(WDTO_120MS); } // 120ms vs 288ms nominal for PICAXE V0.09 impl.
    5bbe:	83 e0       	ldi	r24, 0x03	; 3
    5bc0:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <nap(signed char)>

// Pause between flashes to allow them to be distinguished (>100ms); was mediumPause() for PICAXE V0.09 impl.
static void inline offPause()
  {
  bigPause(); // 120ms, was V0.09 144ms mediumPause() for PICAXE V0.09 impl.
  pollIO(); // Slip in an I/O poll.
    5bc4:	80 e0       	ldi	r24, 0x00	; 0
    5bc6:	0e 94 1e 07 	call	0xe3c	; 0xe3c <pollIO(bool)>
  }
    5bca:	08 95       	ret

00005bcc <tickUI(unsigned char)>:
// Should never be skipped, so as to allow the UI to remain responsive.
// Runs in 350ms or less; usually takes only a few milliseconds or microseconds.
// Returns true iff the user interacted with the system, and maybe caused a status change.
// NOTE: since this is on the minimum idle-loop code path, minimise CPU cycles, esp in frost mode.
// Also re-activates CLI on main button push.
bool tickUI(const uint_fast8_t sec)
    5bcc:	1f 93       	push	r17
  {
  // Perform any once-per-minute operations.
  const bool sec0 = (0 == sec);
  if(sec0)
    5bce:	88 23       	and	r24, r24
    5bd0:	a9 f4       	brne	.+42     	; 0x5bfc <tickUI(unsigned char)+0x30>
    {
    ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    5bd2:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5bd4:	f8 94       	cli
      {
      // Run down UI iteraction timer if need be, one tick per minute.
      if(uiTimeoutM > 0) { --uiTimeoutM; }
    5bd6:	80 91 b5 03 	lds	r24, 0x03B5
    5bda:	88 23       	and	r24, r24
    5bdc:	29 f0       	breq	.+10     	; 0x5be8 <tickUI(unsigned char)+0x1c>
    5bde:	80 91 b5 03 	lds	r24, 0x03B5
    5be2:	81 50       	subi	r24, 0x01	; 1
    5be4:	80 93 b5 03 	sts	0x03B5, r24
      // Run down CLI timer if need be.
      if(CLITimeoutM > 0) { --CLITimeoutM; }
    5be8:	80 91 3b 01 	lds	r24, 0x013B
    5bec:	88 23       	and	r24, r24
    5bee:	29 f0       	breq	.+10     	; 0x5bfa <tickUI(unsigned char)+0x2e>
    5bf0:	80 91 3b 01 	lds	r24, 0x013B
    5bf4:	81 50       	subi	r24, 0x01	; 1
    5bf6:	80 93 3b 01 	sts	0x013B, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5bfa:	9f bf       	out	0x3f, r25	; 63
      }
    }

  // True on every 4th tick/call, ie about once every 8 seconds.
  const bool forthTick = !((++tickCount) & 3); // True on every 4th tick.
    5bfc:	80 91 b6 03 	lds	r24, 0x03B6
    5c00:	8f 5f       	subi	r24, 0xFF	; 255
    5c02:	80 93 b6 03 	sts	0x03B6, r24
    5c06:	10 e0       	ldi	r17, 0x00	; 0
    5c08:	90 e0       	ldi	r25, 0x00	; 0
    5c0a:	83 70       	andi	r24, 0x03	; 3
    5c0c:	90 70       	andi	r25, 0x00	; 0
    5c0e:	89 2b       	or	r24, r25
    5c10:	09 f4       	brne	.+2      	; 0x5c14 <tickUI(unsigned char)+0x48>
    5c12:	11 e0       	ldi	r17, 0x01	; 1
  Occupancy.markAsOccupied(); // Thread-safe.
  }

// True if a manual UI control has been recently (seconds to minutes ago) operated.
// Thread-safe.
bool recentUIControlUse() { return(0 != uiTimeoutM); }
    5c14:	80 91 b5 03 	lds	r24, 0x03B5
  // True on every 4th tick/call, ie about once every 8 seconds.
  const bool forthTick = !((++tickCount) & 3); // True on every 4th tick.

#ifdef TEMP_POT_AVAILABLE
  const bool rUIcu = recentUIControlUse();
  if(rUIcu || forthTick) // If recent UI activity, and periodically.
    5c18:	88 23       	and	r24, r24
    5c1a:	11 f4       	brne	.+4      	; 0x5c20 <tickUI(unsigned char)+0x54>
    5c1c:	11 23       	and	r17, r17
    5c1e:	21 f0       	breq	.+8      	; 0x5c28 <tickUI(unsigned char)+0x5c>
    {
    // Force relatively-frequent re-read of temp pot UI device.
    TempPot.read();
    5c20:	8a ec       	ldi	r24, 0xCA	; 202
    5c22:	93 e0       	ldi	r25, 0x03	; 3
    5c24:	0e 94 72 32 	call	0x64e4	; 0x64e4 <TemperaturePot::read()>
    5c28:	80 91 b9 03 	lds	r24, 0x03B9
#ifdef SUPPORT_BAKE
  static bool isBakeModePutative;
#endif

  static bool modeButtonWasPressed;
  if(fastDigitalRead(BUTTON_MODE_L) == LOW)
    5c2c:	4d 99       	sbic	0x09, 5	; 9
    5c2e:	4a c0       	rjmp	.+148    	; 0x5cc4 <tickUI(unsigned char)+0xf8>
    {
    if(!modeButtonWasPressed)
    5c30:	88 23       	and	r24, r24
    5c32:	59 f4       	brne	.+22     	; 0x5c4a <tickUI(unsigned char)+0x7e>
      {
      // Capture real mode variable as button is pressed.
      isWarmModePutative = inWarmMode();
    5c34:	0e 94 ae 03 	call	0x75c	; 0x75c <inWarmMode()>
    5c38:	80 93 bb 03 	sts	0x03BB, r24
#ifdef SUPPORT_BAKE
      isBakeModePutative = inBakeMode();
    5c3c:	0e 94 b8 03 	call	0x770	; 0x770 <inBakeMode()>
    5c40:	80 93 ba 03 	sts	0x03BA, r24
#endif      
      modeButtonWasPressed = true;
    5c44:	81 e0       	ldi	r24, 0x01	; 1
    5c46:	80 93 b9 03 	sts	0x03B9, r24
// Record local manual operation of a local physical UI control, eg not remote or via CLI.
// To be thread-safe, everything that this touches or calls must be.
// Thread-safe.
void markUIControlUsed()
  {
  statusChange = true; // Note user interaction with the system.
    5c4a:	11 e0       	ldi	r17, 0x01	; 1
    5c4c:	10 93 b7 03 	sts	0x03B7, r17
  uiTimeoutM = UI_DEFAULT_TIMEOUT_M; // Ensure that UI controls are kept 'warm' for a little while.
    5c50:	92 e0       	ldi	r25, 0x02	; 2
    5c52:	90 93 b5 03 	sts	0x03B5, r25
#define CLI_DEFAULT_TIMEOUT_M 2
static volatile uint8_t CLITimeoutM = CLI_DEFAULT_TIMEOUT_M;

// Reset CLI active timer to the full whack before it goes inactive again (ie makes CLI active for a while).
// Thread-safe.
void resetCLIActiveTimer() { CLITimeoutM = CLI_DEFAULT_TIMEOUT_M; }
    5c56:	90 93 3b 01 	sts	0x013B, r25
    // Do not call based on internal/synthetic events.
    // Such evidence may include operation of buttons (etc) on the unit or PIR.
    // Do not call from (for example) 'on' schedule change.
    // Makes occupation immediately visible.
    // Thread-safe and ISR-safe.
    void markAsOccupied() { value = 100; occupationCountdownM = OCCUPATION_TIMEOUT_M; activityCountdownM = 2; }
    5c5a:	84 e6       	ldi	r24, 0x64	; 100
    5c5c:	80 93 14 02 	sts	0x0214, r24
    5c60:	82 e3       	ldi	r24, 0x32	; 50
    5c62:	80 93 15 02 	sts	0x0215, r24
    5c66:	90 93 16 02 	sts	0x0216, r25

    // User is pressing the mode button: cycle through FROST | WARM [ | BAKE ].
    // Mark controls used and room as currently occupied given button press.
    markUIControlUsed();
    // LED on...
    LED_HEATCALL_ON();
    5c6a:	5c 98       	cbi	0x0b, 4	; 11
// Very tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define VERYTINY_PAUSE_MS 5
static void inline veryTinyPause() { sleepLowPowerMs(VERYTINY_PAUSE_MS); }
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define TINY_PAUSE_MS 15
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    5c6c:	80 e0       	ldi	r24, 0x00	; 0
    5c6e:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <nap(signed char)>
    tinyPause(); // Leading tiny pause...
    if(!isWarmModePutative) // Was in FROST mode; moving to WARM mode.
    5c72:	80 91 bb 03 	lds	r24, 0x03BB
    5c76:	88 23       	and	r24, r24
    5c78:	51 f4       	brne	.+20     	; 0x5c8e <tickUI(unsigned char)+0xc2>
      {
      isWarmModePutative = true;
    5c7a:	10 93 bb 03 	sts	0x03BB, r17
#ifdef SUPPORT_BAKE
      isBakeModePutative = false;
    5c7e:	10 92 ba 03 	sts	0x03BA, r1
#endif
      // 2 x flash 'heat call' to indicate now in WARM mode.
      LED_HEATCALL_OFF();
    5c82:	5c 9a       	sbi	0x0b, 4	; 11
      offPause();
    5c84:	0e 94 df 2d 	call	0x5bbe	; 0x5bbe <offPause()>
      LED_HEATCALL_ON();
    5c88:	5c 98       	cbi	0x0b, 4	; 11
    5c8a:	80 e0       	ldi	r24, 0x00	; 0
    5c8c:	13 c0       	rjmp	.+38     	; 0x5cb4 <tickUI(unsigned char)+0xe8>
      tinyPause();
      }
#ifdef SUPPORT_BAKE
    else if(!isBakeModePutative) // Was in WARM mode, move to BAKE (with full timeout to run).
    5c8e:	80 91 ba 03 	lds	r24, 0x03BA
    5c92:	88 23       	and	r24, r24
    5c94:	91 f4       	brne	.+36     	; 0x5cba <tickUI(unsigned char)+0xee>
      {
      isBakeModePutative = true;
    5c96:	10 93 ba 03 	sts	0x03BA, r17
      // 2 x flash + one longer flash 'heat call' to indicate now in BAKE mode.
      LED_HEATCALL_OFF();
    5c9a:	5c 9a       	sbi	0x0b, 4	; 11
      offPause();
    5c9c:	0e 94 df 2d 	call	0x5bbe	; 0x5bbe <offPause()>
      LED_HEATCALL_ON();
    5ca0:	5c 98       	cbi	0x0b, 4	; 11
    5ca2:	80 e0       	ldi	r24, 0x00	; 0
    5ca4:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <nap(signed char)>
      tinyPause();
      LED_HEATCALL_OFF();
    5ca8:	5c 9a       	sbi	0x0b, 4	; 11
// Small low-power sleep.
#define SMALL_PAUSE_MS 30
static void inline smallPause() { nap(WDTO_30MS); }
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define MEDIUM_PAUSE_MS 60
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
    5caa:	82 e0       	ldi	r24, 0x02	; 2
    5cac:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <nap(signed char)>
      mediumPause(); // Note different flash on/off duty cycle to try to distinguish this last flash.
      LED_HEATCALL_ON();
    5cb0:	5c 98       	cbi	0x0b, 4	; 11
    5cb2:	82 e0       	ldi	r24, 0x02	; 2
    5cb4:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <nap(signed char)>
    5cb8:	ad c0       	rjmp	.+346    	; 0x5e14 <tickUI(unsigned char)+0x248>
      mediumPause();
      }
#endif
    else // Was in BAKE (if supported, else was in WARM), move to FROST.
      {
      isWarmModePutative = false;
    5cba:	10 92 bb 03 	sts	0x03BB, r1
#ifdef SUPPORT_BAKE
      isBakeModePutative = false;
    5cbe:	10 92 ba 03 	sts	0x03BA, r1
    5cc2:	a8 c0       	rjmp	.+336    	; 0x5e14 <tickUI(unsigned char)+0x248>
      }
    }
  else
    {
    // Update real control variables for mode when button is released.
    if(modeButtonWasPressed)
    5cc4:	88 23       	and	r24, r24
    5cc6:	f9 f0       	breq	.+62     	; 0x5d06 <tickUI(unsigned char)+0x13a>
      {
      // Don't update the debounced WARM mode while button held down.
      // Will also capture programmatic changes to isWarmMode, eg from schedules.
      const bool isWarmModeDebounced = isWarmModePutative;
      setWarmModeDebounced(isWarmModeDebounced);
    5cc8:	80 91 bb 03 	lds	r24, 0x03BB
    5ccc:	0e 94 b1 03 	call	0x762	; 0x762 <setWarmModeDebounced(bool)>
#ifdef SUPPORT_BAKE
      if(isBakeModePutative) { startBakeDebounced(); } else { cancelBakeDebounced(); }
    5cd0:	80 91 ba 03 	lds	r24, 0x03BA
    5cd4:	88 23       	and	r24, r24
    5cd6:	19 f0       	breq	.+6      	; 0x5cde <tickUI(unsigned char)+0x112>
    5cd8:	0e 94 c4 03 	call	0x788	; 0x788 <startBakeDebounced()>
    5cdc:	02 c0       	rjmp	.+4      	; 0x5ce2 <tickUI(unsigned char)+0x116>
    5cde:	0e 94 c1 03 	call	0x782	; 0x782 <cancelBakeDebounced()>
// Record local manual operation of a local physical UI control, eg not remote or via CLI.
// To be thread-safe, everything that this touches or calls must be.
// Thread-safe.
void markUIControlUsed()
  {
  statusChange = true; // Note user interaction with the system.
    5ce2:	81 e0       	ldi	r24, 0x01	; 1
    5ce4:	80 93 b7 03 	sts	0x03B7, r24
  uiTimeoutM = UI_DEFAULT_TIMEOUT_M; // Ensure that UI controls are kept 'warm' for a little while.
    5ce8:	92 e0       	ldi	r25, 0x02	; 2
    5cea:	90 93 b5 03 	sts	0x03B5, r25
#define CLI_DEFAULT_TIMEOUT_M 2
static volatile uint8_t CLITimeoutM = CLI_DEFAULT_TIMEOUT_M;

// Reset CLI active timer to the full whack before it goes inactive again (ie makes CLI active for a while).
// Thread-safe.
void resetCLIActiveTimer() { CLITimeoutM = CLI_DEFAULT_TIMEOUT_M; }
    5cee:	90 93 3b 01 	sts	0x013B, r25
    5cf2:	84 e6       	ldi	r24, 0x64	; 100
    5cf4:	80 93 14 02 	sts	0x0214, r24
    5cf8:	82 e3       	ldi	r24, 0x32	; 50
    5cfa:	80 93 15 02 	sts	0x0215, r24
    5cfe:	90 93 16 02 	sts	0x0216, r25
#ifdef SUPPORT_BAKE
      if(isBakeModePutative) { startBakeDebounced(); } else { cancelBakeDebounced(); }
#endif

      markUIControlUsed(); // Note activity on release of MODE button...
      modeButtonWasPressed = false;
    5d02:	10 92 b9 03 	sts	0x03B9, r1
      }

    // Keep reporting UI status if the user has just touched the unit in some way.
    // (Or if occupancy/activity was just detected, to give the use some feedback for indirectly interacting.)
    const bool justTouched = statusChange || recentUIControlUse() || Occupancy.reportedRecently();
    5d06:	80 91 b7 03 	lds	r24, 0x03B7
    5d0a:	88 23       	and	r24, r24
    5d0c:	c9 f4       	brne	.+50     	; 0x5d40 <tickUI(unsigned char)+0x174>
  Occupancy.markAsOccupied(); // Thread-safe.
  }

// True if a manual UI control has been recently (seconds to minutes ago) operated.
// Thread-safe.
bool recentUIControlUse() { return(0 != uiTimeoutM); }
    5d0e:	80 91 b5 03 	lds	r24, 0x03B5
      modeButtonWasPressed = false;
      }

    // Keep reporting UI status if the user has just touched the unit in some way.
    // (Or if occupancy/activity was just detected, to give the use some feedback for indirectly interacting.)
    const bool justTouched = statusChange || recentUIControlUse() || Occupancy.reportedRecently();
    5d12:	88 23       	and	r24, r24
    5d14:	a9 f4       	brne	.+42     	; 0x5d40 <tickUI(unsigned char)+0x174>
    virtual const char *tag() const { return("occ|%"); }

    // True if activity/occupancy recently reported (within last couple of minutes).
    // Includes weak and strong reports.
    // Thread-safe.
    bool reportedRecently() { return(0 != activityCountdownM); }
    5d16:	80 91 16 02 	lds	r24, 0x0216
    5d1a:	88 23       	and	r24, r24
    5d1c:	89 f4       	brne	.+34     	; 0x5d40 <tickUI(unsigned char)+0x174>
    5d1e:	9b c0       	rjmp	.+310    	; 0x5e56 <tickUI(unsigned char)+0x28a>
      // DHD20131223: do not flash if the room is dark so as to save energy and avoid disturbing sleep, etc.
      // In this case force resample of light level frequently in case user turns light on eg to operate unit.
      // Do show LED flash if user has recently operated controls (other than mode button) manually.
      // Flash infrequently if no recently operated controls and not in BAKE mode and not actually calling for heat;
      // this is to conserve batteries for those people who leave the valves in WARM mode all the time.
      if(justTouched ||
    5d20:	11 23       	and	r17, r17
    5d22:	49 f4       	brne	.+18     	; 0x5d36 <tickUI(unsigned char)+0x16a>
    // Can be used to trigger rebuild of messages, force updates to actuators, etc.
    bool isValveMoved() const { return(retainedState.valveMoved); }

    // True if this unit is nominally calling for heat (temperature is under target).
    // Thread-safe and ISR safe.
    bool isCallingForHeat() const { return(callingForHeat); }
    5d24:	80 91 3c 02 	lds	r24, 0x023C
    5d28:	88 23       	and	r24, r24
    5d2a:	29 f4       	brne	.+10     	; 0x5d36 <tickUI(unsigned char)+0x16a>
    5d2c:	0e 94 b8 03 	call	0x770	; 0x770 <inBakeMode()>
    5d30:	88 23       	and	r24, r24
    5d32:	09 f4       	brne	.+2      	; 0x5d36 <tickUI(unsigned char)+0x16a>
    5d34:	5f c0       	rjmp	.+190    	; 0x5df4 <tickUI(unsigned char)+0x228>
    bool isRoomLit() const { return(isRoomLitFlag); }

    // Returns true if room is light enough for someone to be active.
    // False if unknown.
    // Thread-safe and usable within ISRs (Interrupt Service Routines).
    bool isRoomDark() const { return(!isRoomLitFlag); }
    5d36:	80 91 c1 03 	lds	r24, 0x03C1
    5d3a:	88 23       	and	r24, r24
    5d3c:	09 f4       	brne	.+2      	; 0x5d40 <tickUI(unsigned char)+0x174>
    5d3e:	5a c0       	rjmp	.+180    	; 0x5df4 <tickUI(unsigned char)+0x228>
         ((forthTick || NominalRadValve.isCallingForHeat() || inBakeMode()) && !AmbLight.isRoomDark()))
        {
        // First flash to indicate WARM mode (or pot being twiddled).
        LED_HEATCALL_ON();
    5d40:	5c 98       	cbi	0x0b, 4	; 11
        // LED on stepwise proportional to temp pot setting.
        // Small number of steps (3) should help make positioning more obvious.
        const uint8_t wt = getWARMTargetC();
    5d42:	0e 94 cb 03 	call	0x796	; 0x796 <getWARMTargetC()>
    5d46:	18 2f       	mov	r17, r24
        // Makes vtiny|tiny|medium flash for cool|OK|warm temperature target.
        if(isEcoTemperature(wt)) { veryTinyPause(); }
    5d48:	82 31       	cpi	r24, 0x12	; 18
    5d4a:	28 f4       	brcc	.+10     	; 0x5d56 <tickUI(unsigned char)+0x18a>
// This may be achieved in part by dynamically slowing the CPU clock if possible.
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed((((MIN_CPU_HZ * (ms)) + 2000) / 4000) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    5d4c:	85 e2       	ldi	r24, 0x25	; 37
    5d4e:	90 e0       	ldi	r25, 0x00	; 0
    5d50:	0e 94 76 1d 	call	0x3aec	; 0x3aec <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
    5d54:	07 c0       	rjmp	.+14     	; 0x5d64 <tickUI(unsigned char)+0x198>
        else if(!isComfortTemperature(wt)) { tinyPause(); }
    5d56:	85 31       	cpi	r24, 0x15	; 21
    5d58:	10 f4       	brcc	.+4      	; 0x5d5e <tickUI(unsigned char)+0x192>
// Very tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define VERYTINY_PAUSE_MS 5
static void inline veryTinyPause() { sleepLowPowerMs(VERYTINY_PAUSE_MS); }
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define TINY_PAUSE_MS 15
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    5d5a:	80 e0       	ldi	r24, 0x00	; 0
    5d5c:	01 c0       	rjmp	.+2      	; 0x5d60 <tickUI(unsigned char)+0x194>
// Small low-power sleep.
#define SMALL_PAUSE_MS 30
static void inline smallPause() { nap(WDTO_30MS); }
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define MEDIUM_PAUSE_MS 60
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
    5d5e:	82 e0       	ldi	r24, 0x02	; 2
    5d60:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <nap(signed char)>
    5d64:	80 91 3c 02 	lds	r24, 0x023C
        else { mediumPause(); }

        // Second flash to indicate actually calling for heat.
        if(NominalRadValve.isCallingForHeat())
    5d68:	88 23       	and	r24, r24
    5d6a:	09 f4       	brne	.+2      	; 0x5d6e <tickUI(unsigned char)+0x1a2>
    5d6c:	43 c0       	rjmp	.+134    	; 0x5df4 <tickUI(unsigned char)+0x228>
          {
          LED_HEATCALL_OFF();
    5d6e:	5c 9a       	sbi	0x0b, 4	; 11
          offPause(); // V0.09 was mediumPause().
    5d70:	0e 94 df 2d 	call	0x5bbe	; 0x5bbe <offPause()>
          LED_HEATCALL_ON(); // flash
    5d74:	5c 98       	cbi	0x0b, 4	; 11
          if(isEcoTemperature(wt)) { veryTinyPause(); }
    5d76:	12 31       	cpi	r17, 0x12	; 18
    5d78:	18 f4       	brcc	.+6      	; 0x5d80 <tickUI(unsigned char)+0x1b4>
// This may be achieved in part by dynamically slowing the CPU clock if possible.
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed((((MIN_CPU_HZ * (ms)) + 2000) / 4000) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    5d7a:	85 e2       	ldi	r24, 0x25	; 37
    5d7c:	90 e0       	ldi	r25, 0x00	; 0
    5d7e:	04 c0       	rjmp	.+8      	; 0x5d88 <tickUI(unsigned char)+0x1bc>
          else if(!isComfortTemperature(wt)) { sleepLowPowerMs((VERYTINY_PAUSE_MS + TINY_PAUSE_MS) / 2); }
    5d80:	15 31       	cpi	r17, 0x15	; 21
    5d82:	28 f4       	brcc	.+10     	; 0x5d8e <tickUI(unsigned char)+0x1c2>
    5d84:	8c e4       	ldi	r24, 0x4C	; 76
    5d86:	90 e0       	ldi	r25, 0x00	; 0
    5d88:	0e 94 76 1d 	call	0x3aec	; 0x3aec <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
    5d8c:	03 c0       	rjmp	.+6      	; 0x5d94 <tickUI(unsigned char)+0x1c8>
// Very tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define VERYTINY_PAUSE_MS 5
static void inline veryTinyPause() { sleepLowPowerMs(VERYTINY_PAUSE_MS); }
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define TINY_PAUSE_MS 15
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    5d8e:	80 e0       	ldi	r24, 0x00	; 0
    5d90:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <nap(signed char)>
          else { tinyPause(); }

#ifdef SUPPORT_BAKE
          if(inBakeMode())
    5d94:	0e 94 b8 03 	call	0x770	; 0x770 <inBakeMode()>
    5d98:	88 23       	and	r24, r24
    5d9a:	61 f1       	breq	.+88     	; 0x5df4 <tickUI(unsigned char)+0x228>
            {
            // Third (lengthened) flash to indicate BAKE mode.
            LED_HEATCALL_OFF();
    5d9c:	5c 9a       	sbi	0x0b, 4	; 11
// Small low-power sleep.
#define SMALL_PAUSE_MS 30
static void inline smallPause() { nap(WDTO_30MS); }
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define MEDIUM_PAUSE_MS 60
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
    5d9e:	82 e0       	ldi	r24, 0x02	; 2
    5da0:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <nap(signed char)>
            mediumPause(); // Note different flash off time to try to distinguish this last flash.
            LED_HEATCALL_ON();
    5da4:	5c 98       	cbi	0x0b, 4	; 11
            // Makes tiny|small|medium flash for eco|OK|comfort temperature target.
            if(isEcoTemperature(wt)) { tinyPause(); }
    5da6:	12 31       	cpi	r17, 0x12	; 18
    5da8:	10 f4       	brcc	.+4      	; 0x5dae <tickUI(unsigned char)+0x1e2>
// Very tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define VERYTINY_PAUSE_MS 5
static void inline veryTinyPause() { sleepLowPowerMs(VERYTINY_PAUSE_MS); }
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define TINY_PAUSE_MS 15
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    5daa:	80 e0       	ldi	r24, 0x00	; 0
    5dac:	05 c0       	rjmp	.+10     	; 0x5db8 <tickUI(unsigned char)+0x1ec>
            else if(!isComfortTemperature(wt)) { smallPause(); }
    5dae:	15 31       	cpi	r17, 0x15	; 21
    5db0:	10 f4       	brcc	.+4      	; 0x5db6 <tickUI(unsigned char)+0x1ea>
// Small low-power sleep.
#define SMALL_PAUSE_MS 30
static void inline smallPause() { nap(WDTO_30MS); }
    5db2:	81 e0       	ldi	r24, 0x01	; 1
    5db4:	01 c0       	rjmp	.+2      	; 0x5db8 <tickUI(unsigned char)+0x1ec>
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define MEDIUM_PAUSE_MS 60
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
    5db6:	82 e0       	ldi	r24, 0x02	; 2
    5db8:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <nap(signed char)>
    5dbc:	1b c0       	rjmp	.+54     	; 0x5df4 <tickUI(unsigned char)+0x228>
    5dbe:	80 91 c1 03 	lds	r24, 0x03C1
    // Even in FROST mode, and if actually calling for heat (eg opening the rad valve significantly, etc)
    // then emit a tiny double flash on every 4th tick.
    // This call for heat may be frost protection or pre-warming / anticipating demand.
    // DHD20130528: new 4th-tick flash in FROST mode...
    // DHD20131223: do not flash if the room is dark so as to save energy and avoid disturbing sleep, etc.
    else if(forthTick &&
    5dc2:	88 23       	and	r24, r24
    5dc4:	b9 f0       	breq	.+46     	; 0x5df4 <tickUI(unsigned char)+0x228>
    5dc6:	80 91 3c 02 	lds	r24, 0x023C
    5dca:	88 23       	and	r24, r24
    5dcc:	99 f0       	breq	.+38     	; 0x5df4 <tickUI(unsigned char)+0x228>
    5dce:	89 e1       	ldi	r24, 0x19	; 25
    5dd0:	92 e0       	ldi	r25, 0x02	; 2
    5dd2:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <ModelledRadValve::isControlledValveReallyOpen() const>
    5dd6:	88 23       	and	r24, r24
    5dd8:	69 f0       	breq	.+26     	; 0x5df4 <tickUI(unsigned char)+0x228>
            !AmbLight.isRoomDark() &&
            NominalRadValve.isCallingForHeat() &&
            NominalRadValve.isControlledValveReallyOpen())
      {
      // Double flash every 4th tick indicates call for heat while in FROST MODE (matches call for heat in WARM mode).
      LED_HEATCALL_ON(); // flash
    5dda:	5c 98       	cbi	0x0b, 4	; 11
// This may be achieved in part by dynamically slowing the CPU clock if possible.
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed((((MIN_CPU_HZ * (ms)) + 2000) / 4000) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    5ddc:	85 e2       	ldi	r24, 0x25	; 37
    5dde:	90 e0       	ldi	r25, 0x00	; 0
    5de0:	0e 94 76 1d 	call	0x3aec	; 0x3aec <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
      veryTinyPause();
      LED_HEATCALL_OFF();
    5de4:	5c 9a       	sbi	0x0b, 4	; 11
      offPause();
    5de6:	0e 94 df 2d 	call	0x5bbe	; 0x5bbe <offPause()>
      LED_HEATCALL_ON(); // flash
    5dea:	5c 98       	cbi	0x0b, 4	; 11
    5dec:	85 e2       	ldi	r24, 0x25	; 37
    5dee:	90 e0       	ldi	r25, 0x00	; 0
    5df0:	0e 94 76 1d 	call	0x3aec	; 0x3aec <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
      veryTinyPause();
      }

    // Enforce any changes that may have been driven by other UI components (ie other than MODE button).
    // Eg adjustment of temp pot / eco bias changing scheduled state.
    if(statusChange)
    5df4:	80 91 b7 03 	lds	r24, 0x03B7
    5df8:	88 23       	and	r24, r24
    5dfa:	61 f0       	breq	.+24     	; 0x5e14 <tickUI(unsigned char)+0x248>
      {
      static bool prevScheduleStatus;
      const bool currentScheduleStatus = isAnyScheduleOnWARMNow();
    5dfc:	0e 94 d8 25 	call	0x4bb0	; 0x4bb0 <isAnyScheduleOnWARMNow()>
    5e00:	98 2f       	mov	r25, r24
      if(currentScheduleStatus != prevScheduleStatus)
    5e02:	80 91 b8 03 	lds	r24, 0x03B8
    5e06:	98 17       	cp	r25, r24
    5e08:	29 f0       	breq	.+10     	; 0x5e14 <tickUI(unsigned char)+0x248>
        {
        prevScheduleStatus = currentScheduleStatus;
    5e0a:	90 93 b8 03 	sts	0x03B8, r25
        setWarmModeDebounced(currentScheduleStatus);
    5e0e:	89 2f       	mov	r24, r25
    5e10:	0e 94 b1 03 	call	0x762	; 0x762 <setWarmModeDebounced(bool)>
        }
      }
    }

  // Ensure LED forced off unconditionally at least once each cycle.
  LED_HEATCALL_OFF();
    5e14:	5c 9a       	sbi	0x0b, 4	; 11

#ifdef LEARN_BUTTON_AVAILABLE
  // Handle learn button if supported and if is currently pressed.
  if(fastDigitalRead(BUTTON_LEARN_L) == LOW)
    5e16:	18 99       	sbic	0x03, 0	; 3
    5e18:	02 c0       	rjmp	.+4      	; 0x5e1e <tickUI(unsigned char)+0x252>
    {
    handleLEARN(0);
    5e1a:	80 e0       	ldi	r24, 0x00	; 0
    5e1c:	03 c0       	rjmp	.+6      	; 0x5e24 <tickUI(unsigned char)+0x258>
    LED_HEATCALL_ON(); // Leave heatcall LED on while learn button held down.
    }

#if defined(BUTTON_LEARN2_L)
  // Handle second learn button if supported and currently pressed and primary learn button not pressed.
  else if(fastDigitalRead(BUTTON_LEARN2_L) == LOW)
    5e1e:	4b 99       	sbic	0x09, 3	; 9
    5e20:	14 c0       	rjmp	.+40     	; 0x5e4a <tickUI(unsigned char)+0x27e>
    {
    handleLEARN(1);
    5e22:	81 e0       	ldi	r24, 0x01	; 1
    5e24:	0e 94 45 28 	call	0x508a	; 0x508a <handleLEARN(unsigned char)>
// Record local manual operation of a local physical UI control, eg not remote or via CLI.
// To be thread-safe, everything that this touches or calls must be.
// Thread-safe.
void markUIControlUsed()
  {
  statusChange = true; // Note user interaction with the system.
    5e28:	81 e0       	ldi	r24, 0x01	; 1
    5e2a:	80 93 b7 03 	sts	0x03B7, r24
  uiTimeoutM = UI_DEFAULT_TIMEOUT_M; // Ensure that UI controls are kept 'warm' for a little while.
    5e2e:	92 e0       	ldi	r25, 0x02	; 2
    5e30:	90 93 b5 03 	sts	0x03B5, r25
#define CLI_DEFAULT_TIMEOUT_M 2
static volatile uint8_t CLITimeoutM = CLI_DEFAULT_TIMEOUT_M;

// Reset CLI active timer to the full whack before it goes inactive again (ie makes CLI active for a while).
// Thread-safe.
void resetCLIActiveTimer() { CLITimeoutM = CLI_DEFAULT_TIMEOUT_M; }
    5e34:	90 93 3b 01 	sts	0x013B, r25
    // Do not call based on internal/synthetic events.
    // Such evidence may include operation of buttons (etc) on the unit or PIR.
    // Do not call from (for example) 'on' schedule change.
    // Makes occupation immediately visible.
    // Thread-safe and ISR-safe.
    void markAsOccupied() { value = 100; occupationCountdownM = OCCUPATION_TIMEOUT_M; activityCountdownM = 2; }
    5e38:	84 e6       	ldi	r24, 0x64	; 100
    5e3a:	80 93 14 02 	sts	0x0214, r24
    5e3e:	82 e3       	ldi	r24, 0x32	; 50
    5e40:	80 93 15 02 	sts	0x0215, r24
    5e44:	90 93 16 02 	sts	0x0216, r25
  // Handle second learn button if supported and currently pressed and primary learn button not pressed.
  else if(fastDigitalRead(BUTTON_LEARN2_L) == LOW)
    {
    handleLEARN(1);
    markUIControlUsed(); // Mark controls used and room as currently occupied given button press.
    LED_HEATCALL_ON(); // Leave heatcall LED on while learn button held down.
    5e48:	5c 98       	cbi	0x0b, 4	; 11
    }
#endif
#endif

  const bool statusChanged = statusChange;
    5e4a:	80 91 b7 03 	lds	r24, 0x03B7
  statusChange = false; // Potential race.
    5e4e:	10 92 b7 03 	sts	0x03B7, r1
  return(statusChanged);
  }
    5e52:	1f 91       	pop	r17
    5e54:	08 95       	ret
    // (Or if occupancy/activity was just detected, to give the use some feedback for indirectly interacting.)
    const bool justTouched = statusChange || recentUIControlUse() || Occupancy.reportedRecently();

    // Mode button not pressed: indicate current mode with flash(es); more flashes if actually calling for heat.
    // Force display while UI controls are being used, eg to indicate temp pot position.
    if(justTouched || inWarmMode()) // Generate flash(es) if in WARM mode or fiddling with UI other than Mode button.
    5e56:	0e 94 ae 03 	call	0x75c	; 0x75c <inWarmMode()>
    5e5a:	88 23       	and	r24, r24
    5e5c:	09 f0       	breq	.+2      	; 0x5e60 <tickUI(unsigned char)+0x294>
    5e5e:	60 cf       	rjmp	.-320    	; 0x5d20 <tickUI(unsigned char)+0x154>
    // Even in FROST mode, and if actually calling for heat (eg opening the rad valve significantly, etc)
    // then emit a tiny double flash on every 4th tick.
    // This call for heat may be frost protection or pre-warming / anticipating demand.
    // DHD20130528: new 4th-tick flash in FROST mode...
    // DHD20131223: do not flash if the room is dark so as to save energy and avoid disturbing sleep, etc.
    else if(forthTick &&
    5e60:	11 23       	and	r17, r17
    5e62:	41 f2       	breq	.-112    	; 0x5df4 <tickUI(unsigned char)+0x228>
    5e64:	ac cf       	rjmp	.-168    	; 0x5dbe <tickUI(unsigned char)+0x1f2>

00005e66 <global constructors keyed to _Z5panicv>:
  '/',
  __DATE__[0], __DATE__[1], __DATE__[2],
  '/',
  __DATE__[4], __DATE__[5],
  '\0'
  };
    5e66:	82 e3       	ldi	r24, 0x32	; 50
    5e68:	80 93 3c 01 	sts	0x013C, r24
    5e6c:	80 e3       	ldi	r24, 0x30	; 48
    5e6e:	80 93 3d 01 	sts	0x013D, r24
    5e72:	91 e3       	ldi	r25, 0x31	; 49
    5e74:	90 93 3e 01 	sts	0x013E, r25
    5e78:	85 e3       	ldi	r24, 0x35	; 53
    5e7a:	80 93 3f 01 	sts	0x013F, r24
    5e7e:	8a e4       	ldi	r24, 0x4A	; 74
    5e80:	80 93 41 01 	sts	0x0141, r24
    5e84:	81 e6       	ldi	r24, 0x61	; 97
    5e86:	80 93 42 01 	sts	0x0142, r24
    5e8a:	8e e6       	ldi	r24, 0x6E	; 110
    5e8c:	80 93 43 01 	sts	0x0143, r24
    5e90:	80 e2       	ldi	r24, 0x20	; 32
    5e92:	80 93 45 01 	sts	0x0145, r24
    5e96:	90 93 46 01 	sts	0x0146, r25
//us apparent: 1408
//us apparent: 3776
//us apparent: 2816
#endif
#endif
  }
    5e9a:	08 95       	ret

00005e9c <loop>:
#if defined(ALT_MAIN_LOOP) // Run alternative main loop.
  loopAlt();
#elif defined(UNIT_TESTS) // Run unit tests *instead* of normal loop() code. 
  loopUnitTest();
#else // Normal OpenTRV usage.
  loopOpenTRV();
    5e9c:	0e 94 9c 0c 	call	0x1938	; 0x1938 <loopOpenTRV()>
//us apparent: 1408
//us apparent: 3776
//us apparent: 2816
#endif
#endif
  }
    5ea0:	08 95       	ret

00005ea2 <sleepLowPowerMs(unsigned int)>:
    5ea2:	a0 e0       	ldi	r26, 0x00	; 0
    5ea4:	b0 e0       	ldi	r27, 0x00	; 0
    5ea6:	bc 01       	movw	r22, r24
    5ea8:	cd 01       	movw	r24, r26
    5eaa:	22 e1       	ldi	r18, 0x12	; 18
    5eac:	3a e7       	ldi	r19, 0x7A	; 122
    5eae:	40 e0       	ldi	r20, 0x00	; 0
    5eb0:	50 e0       	ldi	r21, 0x00	; 0
    5eb2:	0e 94 98 3d 	call	0x7b30	; 0x7b30 <__mulsi3>
    5eb6:	60 53       	subi	r22, 0x30	; 48
    5eb8:	78 4f       	sbci	r23, 0xF8	; 248
    5eba:	8f 4f       	sbci	r24, 0xFF	; 255
    5ebc:	9f 4f       	sbci	r25, 0xFF	; 255
    5ebe:	20 ea       	ldi	r18, 0xA0	; 160
    5ec0:	3f e0       	ldi	r19, 0x0F	; 15
    5ec2:	40 e0       	ldi	r20, 0x00	; 0
    5ec4:	50 e0       	ldi	r21, 0x00	; 0
    5ec6:	0e 94 00 3e 	call	0x7c00	; 0x7c00 <__divmodsi4>
    5eca:	da 01       	movw	r26, r20
    5ecc:	c9 01       	movw	r24, r18
    5ece:	02 97       	sbiw	r24, 0x02	; 2
    5ed0:	0e 94 76 1d 	call	0x3aec	; 0x3aec <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
    5ed4:	08 95       	ret

00005ed6 <posPOST(unsigned char, __FlashStringHelper const*)>:
//   * Two quick flashes from the Arduino bootloader then the LED comes on.
//   * Each of the 5 main sections of Power On Self Test is 1 second LED on, 0.5 second off, n short flashes separated by 0.25s off, then 0.5s off, then 1s on.
//     The value of n is 1, 2, 3, 4, 5.
//   * The LED should then go off except for optional faint flickers as the radio is being driven if set up to do so.
#define PP_OFF_MS 250
static void posPOST(const uint8_t position, const __FlashStringHelper *s)
    5ed6:	ff 92       	push	r15
    5ed8:	0f 93       	push	r16
    5eda:	1f 93       	push	r17
    5edc:	cf 93       	push	r28
    5ede:	df 93       	push	r29
    5ee0:	f8 2e       	mov	r15, r24
    5ee2:	8b 01       	movw	r16, r22
  {
  sleepLowPowerMs(1000);
    5ee4:	88 ee       	ldi	r24, 0xE8	; 232
    5ee6:	93 e0       	ldi	r25, 0x03	; 3
    5ee8:	0e 94 51 2f 	call	0x5ea2	; 0x5ea2 <sleepLowPowerMs(unsigned int)>
#ifdef DEBUG
  DEBUG_SERIAL_PRINT_FLASHSTRING("posPOST: "); // Can only be used once serial is set up.
    5eec:	82 e7       	ldi	r24, 0x72	; 114
    5eee:	94 e0       	ldi	r25, 0x04	; 4
    5ef0:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(position);
    5ef4:	cf 2d       	mov	r28, r15
    5ef6:	d0 e0       	ldi	r29, 0x00	; 0
    5ef8:	ce 01       	movw	r24, r28
    5efa:	6a e0       	ldi	r22, 0x0A	; 10
    5efc:	70 e0       	ldi	r23, 0x00	; 0
    5efe:	0e 94 cb 26 	call	0x4d96	; 0x4d96 <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINT_FLASHSTRING(": ");
    5f02:	8f e6       	ldi	r24, 0x6F	; 111
    5f04:	94 e0       	ldi	r25, 0x04	; 4
    5f06:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(s);
    5f0a:	c8 01       	movw	r24, r16
    5f0c:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINTLN();
    5f10:	0e 94 bb 26 	call	0x4d76	; 0x4d76 <serialPrintlnAndFlush()>
#else
  serialPrintlnAndFlush(s);
#endif
//  pinMode(LED_HEATCALL, OUTPUT);
  LED_HEATCALL_OFF();
    5f14:	5c 9a       	sbi	0x0b, 4	; 11

  // Skip much of lightshow if '0'/end/none position.
  if(position > 0)
    5f16:	ff 20       	and	r15, r15
    5f18:	89 f0       	breq	.+34     	; 0x5f3c <posPOST(unsigned char, __FlashStringHelper const*)+0x66>
    {
    sleepLowPowerMs(2*PP_OFF_MS); // TODO: use this time to gather entropy.
    5f1a:	84 ef       	ldi	r24, 0xF4	; 244
    5f1c:	91 e0       	ldi	r25, 0x01	; 1
    5f1e:	07 c0       	rjmp	.+14     	; 0x5f2e <posPOST(unsigned char, __FlashStringHelper const*)+0x58>
    for(int i = position; --i >= 0; )
      {
      LED_HEATCALL_ON();
    5f20:	5c 98       	cbi	0x0b, 4	; 11
// Very tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define VERYTINY_PAUSE_MS 5
static void inline veryTinyPause() { sleepLowPowerMs(VERYTINY_PAUSE_MS); }
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define TINY_PAUSE_MS 15
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    5f22:	80 e0       	ldi	r24, 0x00	; 0
    5f24:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <nap(signed char)>
      tinyPause();
      LED_HEATCALL_OFF();
    5f28:	5c 9a       	sbi	0x0b, 4	; 11
      sleepLowPowerMs(PP_OFF_MS); // TODO: use this time to gather entropy.
    5f2a:	8a ef       	ldi	r24, 0xFA	; 250
    5f2c:	90 e0       	ldi	r25, 0x00	; 0
    5f2e:	0e 94 51 2f 	call	0x5ea2	; 0x5ea2 <sleepLowPowerMs(unsigned int)>

  // Skip much of lightshow if '0'/end/none position.
  if(position > 0)
    {
    sleepLowPowerMs(2*PP_OFF_MS); // TODO: use this time to gather entropy.
    for(int i = position; --i >= 0; )
    5f32:	21 97       	sbiw	r28, 0x01	; 1
    5f34:	8f ef       	ldi	r24, 0xFF	; 255
    5f36:	cf 3f       	cpi	r28, 0xFF	; 255
    5f38:	d8 07       	cpc	r29, r24
    5f3a:	91 f7       	brne	.-28     	; 0x5f20 <posPOST(unsigned char, __FlashStringHelper const*)+0x4a>
      LED_HEATCALL_OFF();
      sleepLowPowerMs(PP_OFF_MS); // TODO: use this time to gather entropy.
      }
    }

  sleepLowPowerMs(PP_OFF_MS); // TODO: use this time to gather entropy.
    5f3c:	8a ef       	ldi	r24, 0xFA	; 250
    5f3e:	90 e0       	ldi	r25, 0x00	; 0
    5f40:	0e 94 51 2f 	call	0x5ea2	; 0x5ea2 <sleepLowPowerMs(unsigned int)>
  LED_HEATCALL_ON();
    5f44:	5c 98       	cbi	0x0b, 4	; 11
  sleepLowPowerMs(1000); // TODO: use this time to gather entropy.
    5f46:	88 ee       	ldi	r24, 0xE8	; 232
    5f48:	93 e0       	ldi	r25, 0x03	; 3
    5f4a:	0e 94 51 2f 	call	0x5ea2	; 0x5ea2 <sleepLowPowerMs(unsigned int)>
  }
    5f4e:	df 91       	pop	r29
    5f50:	cf 91       	pop	r28
    5f52:	1f 91       	pop	r17
    5f54:	0f 91       	pop	r16
    5f56:	ff 90       	pop	r15
    5f58:	08 95       	ret

00005f5a <serialPrintlnBuildVersion()>:
  };
// Version (code/board) information printed as one line to serial (with line-end, and flushed); machine- and human- parseable.
// Format: "board VXXXX REVY; code YYYY/Mmm/DD HH:MM:SS".
void serialPrintlnBuildVersion()
  {
  serialPrintAndFlush(F("board V0.2 REV"));
    5f5a:	85 ec       	ldi	r24, 0xC5	; 197
    5f5c:	94 e0       	ldi	r25, 0x04	; 4
    5f5e:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <serialPrintAndFlush(__FlashStringHelper const*)>
  serialPrintAndFlush(V0p2_REV);
    5f62:	84 e0       	ldi	r24, 0x04	; 4
    5f64:	90 e0       	ldi	r25, 0x00	; 0
    5f66:	6a e0       	ldi	r22, 0x0A	; 10
    5f68:	70 e0       	ldi	r23, 0x00	; 0
    5f6a:	0e 94 cb 26 	call	0x4d96	; 0x4d96 <serialPrintAndFlush(int, int)>
  serialPrintAndFlush(F("; code $Id: V0p2_Main.ino 3864 2014-12-10 21:01:54Z damonhd $ ")); // Expect SVN to substitute the Id keyword here with svn:keywords property set.
    5f6e:	86 e8       	ldi	r24, 0x86	; 134
    5f70:	94 e0       	ldi	r25, 0x04	; 4
    5f72:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <serialPrintAndFlush(__FlashStringHelper const*)>
  serialPrintAndFlush(_YYYYMmmDD);
    5f76:	8c e3       	ldi	r24, 0x3C	; 60
    5f78:	91 e0       	ldi	r25, 0x01	; 1
    5f7a:	0e 94 e7 26 	call	0x4dce	; 0x4dce <serialPrintAndFlush(char const*)>
  serialPrintAndFlush(F(" " __TIME__));
    5f7e:	8c e7       	ldi	r24, 0x7C	; 124
    5f80:	94 e0       	ldi	r25, 0x04	; 4
    5f82:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <serialPrintAndFlush(__FlashStringHelper const*)>
  serialPrintlnAndFlush();
    5f86:	0e 94 bb 26 	call	0x4d76	; 0x4d76 <serialPrintlnAndFlush()>
  }
    5f8a:	08 95       	ret

00005f8c <panic()>:
// Tries not to use lots of energy so as to keep distress beacon running for a while.
void panic()
  {
#ifdef USE_MODULE_RFM22RADIOSIMPLE
  // Reset radio and go into low-power mode.
  RFM22PowerOnInit();
    5f8c:	0e 94 ef 22 	call	0x45de	; 0x45de <RFM22PowerOnInit()>
#endif
  // Power down almost everything else...
  minimisePowerWithoutSleep();
    5f90:	0e 94 65 20 	call	0x40ca	; 0x40ca <minimisePowerWithoutSleep()>
#ifdef LED_HEATCALL
  pinMode(LED_HEATCALL, OUTPUT);
#else
  pinMode(LED_HEATCALL_L, OUTPUT);
    5f94:	84 e0       	ldi	r24, 0x04	; 4
    5f96:	61 e0       	ldi	r22, 0x01	; 1
    5f98:	0e 94 d9 37 	call	0x6fb2	; 0x6fb2 <pinMode>
#endif
  for( ; ; )
    {
    LED_HEATCALL_ON();
    5f9c:	5c 98       	cbi	0x0b, 4	; 11
    5f9e:	80 e0       	ldi	r24, 0x00	; 0
    5fa0:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <nap(signed char)>
    tinyPause();
    LED_HEATCALL_OFF();
    5fa4:	5c 9a       	sbi	0x0b, 4	; 11
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define MEDIUM_PAUSE_MS 60
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
// Big low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define BIG_PAUSE_MS 120
static void inline bigPause() { nap(WDTO_120MS); } // 120ms vs 288ms nominal for PICAXE V0.09 impl.
    5fa6:	83 e0       	ldi	r24, 0x03	; 3
    5fa8:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <nap(signed char)>
    5fac:	f7 cf       	rjmp	.-18     	; 0x5f9c <panic()+0x10>

00005fae <panic(__FlashStringHelper const*)>:
  }

// Panic with fixed message.
void panic(const __FlashStringHelper *s)
  {
  serialPrintlnAndFlush(s); // May fail.
    5fae:	0e 94 13 27 	call	0x4e26	; 0x4e26 <serialPrintlnAndFlush(__FlashStringHelper const*)>
  panic();  
    5fb2:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <panic()>
  }
    5fb6:	08 95       	ret

00005fb8 <optionalPOST()>:
  serialPrintlnAndFlush();
  }

// Optional Power-On Self Test routines.
// Aborts with a call to panic() if a test fails.
void optionalPOST()
    5fb8:	0f 93       	push	r16
    5fba:	1f 93       	push	r17
    5fbc:	cf 93       	push	r28
    5fbe:	df 93       	push	r29
  {
  // Capture early sub-cycle time to help ensure that the 32768Hz async clock is actually running.
  const uint8_t earlySCT = getSubCycleTime();
    5fc0:	00 91 b2 00 	lds	r16, 0x00B2
#ifdef USE_MODULE_RFM22RADIOSIMPLE
#if !defined(RFM22_IS_ACTUALLY_RFM23) && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("(Using RFM22.)");
#endif
  // Initialise the radio, if configured, ASAP because it can suck a lot of power until properly initialised.
  RFM22PowerOnInit();
    5fc4:	0e 94 ef 22 	call	0x45de	; 0x45de <RFM22PowerOnInit()>
  // Check that the radio is correctly connected; panic if not...
  if(!RFM22CheckConnected()) { panic(); }
    5fc8:	0e 94 ed 23 	call	0x47da	; 0x47da <RFM22CheckConnected()>
    5fcc:	88 23       	and	r24, r24
    5fce:	11 f4       	brne	.+4      	; 0x5fd4 <optionalPOST()+0x1c>
    5fd0:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <panic()>
  // Configure the radio.
  RFM22RegisterBlockSetup(FHT8V_RFM22_Reg_Values);
    5fd4:	8f ed       	ldi	r24, 0xDF	; 223
    5fd6:	90 e0       	ldi	r25, 0x00	; 0
    5fd8:	0e 94 ce 22 	call	0x459c	; 0x459c <RFM22RegisterBlockSetup(unsigned char const (*) [2])>
  // Put the radio in low-power standby mode.
  RFM22ModeStandbyAndClearState();
    5fdc:	0e 94 4b 23 	call	0x4696	; 0x4696 <RFM22ModeStandbyAndClearState()>
#endif

//  posPOST(1, F("Radio OK, checking buttons/sensors and xtal"));

  // Check buttons not stuck in the activated position.
  if((fastDigitalRead(BUTTON_MODE_L) == LOW)
    5fe0:	4d 9b       	sbis	0x09, 5	; 9
    5fe2:	04 c0       	rjmp	.+8      	; 0x5fec <optionalPOST()+0x34>
    5fe4:	18 9b       	sbis	0x03, 0	; 3
    5fe6:	02 c0       	rjmp	.+4      	; 0x5fec <optionalPOST()+0x34>
    5fe8:	4b 99       	sbic	0x09, 3	; 9
    5fea:	04 c0       	rjmp	.+8      	; 0x5ff4 <optionalPOST()+0x3c>
#endif
#if defined(BUTTON_LEARN2_L)
     || (fastDigitalRead(BUTTON_LEARN2_L) == LOW)
#endif
    )
    { panic(F("button stuck")); }
    5fec:	82 e6       	ldi	r24, 0x62	; 98
    5fee:	94 e0       	ldi	r25, 0x04	; 4
    5ff0:	0e 94 d7 2f 	call	0x5fae	; 0x5fae <panic(__FlashStringHelper const*)>

  // Check that the 32768Hz async clock is actually running having done significant CPU-intensive work.
  const uint8_t laterSCT = getSubCycleTime();
    5ff4:	10 91 b2 00 	lds	r17, 0x00B2
  if(laterSCT == earlySCT)
    5ff8:	10 17       	cp	r17, r16
    5ffa:	b1 f4       	brne	.+44     	; 0x6028 <optionalPOST()+0x70>
    5ffc:	c4 e1       	ldi	r28, 0x14	; 20
    5ffe:	d0 e0       	ldi	r29, 0x00	; 0
    // Allow (an extra) 1s+ for 32768Hz crystal to start reliably, see: http://www.atmel.com/Images/doc1259.pdf
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("Sleeping to let 32768Hz clock start...");
#endif
    // Time spent here should not be a whole multiple of basic cycle time to avoid a spuriously-stationary async clock reading!
    for(int i = 20; (--i >= 0) && (earlySCT == getSubCycleTime()); )
    6000:	21 97       	sbiw	r28, 0x01	; 1
    6002:	8f ef       	ldi	r24, 0xFF	; 255
    6004:	cf 3f       	cpi	r28, 0xFF	; 255
    6006:	d8 07       	cpc	r29, r24
    6008:	c9 f0       	breq	.+50     	; 0x603c <optionalPOST()+0x84>
    600a:	80 91 b2 00 	lds	r24, 0x00B2
    600e:	18 17       	cp	r17, r24
    6010:	a9 f4       	brne	.+42     	; 0x603c <optionalPOST()+0x84>
      {
      sleepLowPowerMs(691);
    6012:	83 eb       	ldi	r24, 0xB3	; 179
    6014:	92 e0       	ldi	r25, 0x02	; 2
    6016:	0e 94 51 2f 	call	0x5ea2	; 0x5ea2 <sleepLowPowerMs(unsigned int)>
      captureEntropy1();
    601a:	0e 94 23 20 	call	0x4046	; 0x4046 <captureEntropy1()>
    601e:	f0 cf       	rjmp	.-32     	; 0x6000 <optionalPOST()+0x48>
    if(latestSCT == earlySCT)
      {
#if 0 && defined(DEBUG)
      DEBUG_SERIAL_PRINTLN_FLASHSTRING("32768Hz clock may not be running!");
#endif
      panic(F("Xtal dead")); // Async clock not running.
    6020:	88 e5       	ldi	r24, 0x58	; 88
    6022:	94 e0       	ldi	r25, 0x04	; 4
    6024:	0e 94 d7 2f 	call	0x5fae	; 0x5fae <panic(__FlashStringHelper const*)>
      }
    }
//  posPOST(2, F("slow RTC clock OK"));

  // Single POST checkpoint for speed.
  posPOST(0, F("Radio, xtal, buttons OK"));
    6028:	80 e0       	ldi	r24, 0x00	; 0
    602a:	60 e4       	ldi	r22, 0x40	; 64
    602c:	74 e0       	ldi	r23, 0x04	; 4
    602e:	0e 94 6b 2f 	call	0x5ed6	; 0x5ed6 <posPOST(unsigned char, __FlashStringHelper const*)>
  }
    6032:	df 91       	pop	r29
    6034:	cf 91       	pop	r28
    6036:	1f 91       	pop	r17
    6038:	0f 91       	pop	r16
    603a:	08 95       	ret
      {
      sleepLowPowerMs(691);
      captureEntropy1();
      }
#endif
    const uint8_t latestSCT = getSubCycleTime();
    603c:	80 91 b2 00 	lds	r24, 0x00B2
    if(latestSCT == earlySCT)
    6040:	81 17       	cp	r24, r17
    6042:	91 f7       	brne	.-28     	; 0x6028 <optionalPOST()+0x70>
    6044:	ed cf       	rjmp	.-38     	; 0x6020 <optionalPOST()+0x68>

00006046 <setup>:
  }


// Setup routine: runs once after reset.
// Does some limited board self-test and will panic() if anything is obviously broken.
void setup()
    6046:	2f 92       	push	r2
    6048:	3f 92       	push	r3
    604a:	4f 92       	push	r4
    604c:	5f 92       	push	r5
    604e:	6f 92       	push	r6
    6050:	7f 92       	push	r7
    6052:	8f 92       	push	r8
    6054:	9f 92       	push	r9
    6056:	af 92       	push	r10
    6058:	bf 92       	push	r11
    605a:	cf 92       	push	r12
    605c:	df 92       	push	r13
    605e:	ef 92       	push	r14
    6060:	ff 92       	push	r15
    6062:	0f 93       	push	r16
    6064:	1f 93       	push	r17
    6066:	df 93       	push	r29
    6068:	cf 93       	push	r28
    606a:	00 d0       	rcall	.+0      	; 0x606c <setup+0x26>
    606c:	00 d0       	rcall	.+0      	; 0x606e <setup+0x28>
    606e:	cd b7       	in	r28, 0x3d	; 61
    6070:	de b7       	in	r29, 0x3e	; 62
  {
  // Set appropriate low-power states, interrupts, etc, ASAP.
  powerSetup();
    6072:	0e 94 65 21 	call	0x42ca	; 0x42ca <powerSetup()>
    6076:	0e e0       	ldi	r16, 0x0E	; 14
    6078:	10 e0       	ldi	r17, 0x00	; 0
    607a:	33 c0       	rjmp	.+102    	; 0x60e2 <setup+0x9c>
  {
  // Initialise all digital I/O to safe state ASAP and avoid floating lines where possible.
  // In absence of a specific alternative, drive low as an output to minimise consumption (eg from floating input).
  for(int i = 14; --i >= 0; ) // For all digital pins from 0 to 13 inclusive...
    {
    switch(i)
    607c:	05 30       	cpi	r16, 0x05	; 5
    607e:	11 05       	cpc	r17, r1
    6080:	61 f1       	breq	.+88     	; 0x60da <setup+0x94>
    6082:	06 30       	cpi	r16, 0x06	; 6
    6084:	11 05       	cpc	r17, r1
    6086:	34 f4       	brge	.+12     	; 0x6094 <setup+0x4e>
    6088:	17 fd       	sbrc	r17, 7
    608a:	14 c0       	rjmp	.+40     	; 0x60b4 <setup+0x6e>
    608c:	04 30       	cpi	r16, 0x04	; 4
    608e:	11 05       	cpc	r17, r1
    6090:	24 f1       	brlt	.+72     	; 0x60da <setup+0x94>
    6092:	17 c0       	rjmp	.+46     	; 0x60c2 <setup+0x7c>
    6094:	09 30       	cpi	r16, 0x09	; 9
    6096:	11 05       	cpc	r17, r1
    6098:	e9 f0       	breq	.+58     	; 0x60d4 <setup+0x8e>
    609a:	0a 30       	cpi	r16, 0x0A	; 10
    609c:	11 05       	cpc	r17, r1
    609e:	24 f4       	brge	.+8      	; 0x60a8 <setup+0x62>
    60a0:	08 30       	cpi	r16, 0x08	; 8
    60a2:	11 05       	cpc	r17, r1
    60a4:	39 f4       	brne	.+14     	; 0x60b4 <setup+0x6e>
    60a6:	19 c0       	rjmp	.+50     	; 0x60da <setup+0x94>
    60a8:	0a 30       	cpi	r16, 0x0A	; 10
    60aa:	11 05       	cpc	r17, r1
    60ac:	b1 f0       	breq	.+44     	; 0x60da <setup+0x94>
    60ae:	0c 30       	cpi	r16, 0x0C	; 12
    60b0:	11 05       	cpc	r17, r1
    60b2:	99 f0       	breq	.+38     	; 0x60da <setup+0x94>
      {
      // Low output is good safe low-power default.
      default: { digitalWrite(i, LOW); pinMode(i, OUTPUT); break; }
    60b4:	80 2f       	mov	r24, r16
    60b6:	60 e0       	ldi	r22, 0x00	; 0
    60b8:	0e 94 18 38 	call	0x7030	; 0x7030 <digitalWrite>
    60bc:	80 2f       	mov	r24, r16
    60be:	61 e0       	ldi	r22, 0x01	; 1
    60c0:	0e c0       	rjmp	.+28     	; 0x60de <setup+0x98>
      // Switch main UI LED on for the rest of initialisation...
#ifdef LED_HEATCALL
      case LED_HEATCALL: { pinMode(LED_HEATCALL, OUTPUT); digitalWrite(LED_HEATCALL, HIGH); break; }
#endif
#ifdef LED_HEATCALL_L
      case LED_HEATCALL_L: { pinMode(LED_HEATCALL_L, OUTPUT); digitalWrite(LED_HEATCALL_L, LOW); break; }
    60c2:	84 e0       	ldi	r24, 0x04	; 4
    60c4:	61 e0       	ldi	r22, 0x01	; 1
    60c6:	0e 94 d9 37 	call	0x6fb2	; 0x6fb2 <pinMode>
    60ca:	84 e0       	ldi	r24, 0x04	; 4
    60cc:	60 e0       	ldi	r22, 0x00	; 0
    60ce:	0e 94 18 38 	call	0x7030	; 0x7030 <digitalWrite>
    60d2:	07 c0       	rjmp	.+14     	; 0x60e2 <setup+0x9c>
#endif

#ifdef PIN_RFM_NIRQ 
      // Set as input to avoid contention current.
      case PIN_RFM_NIRQ: { pinMode(PIN_RFM_NIRQ, INPUT); break; }
    60d4:	89 e0       	ldi	r24, 0x09	; 9
    60d6:	60 e0       	ldi	r22, 0x00	; 0
    60d8:	02 c0       	rjmp	.+4      	; 0x60de <setup+0x98>
#ifdef PIN_SERIAL_RX
      // Weak TX and RX pull-up empirically found to produce lowest leakage current
      // when 2xAA NiMH battery powered and connected to TTL-232R-3V3 USB lead.
      case PIN_SERIAL_RX: case PIN_SERIAL_TX:
#endif
        { pinMode(i, INPUT_PULLUP); break; }
    60da:	80 2f       	mov	r24, r16
    60dc:	62 e0       	ldi	r22, 0x02	; 2
    60de:	0e 94 d9 37 	call	0x6fb2	; 0x6fb2 <pinMode>
// Call this ASAP in setup() to configure I/O safely for the board, avoid pins floating, etc.
static inline void IOSetup()
  {
  // Initialise all digital I/O to safe state ASAP and avoid floating lines where possible.
  // In absence of a specific alternative, drive low as an output to minimise consumption (eg from floating input).
  for(int i = 14; --i >= 0; ) // For all digital pins from 0 to 13 inclusive...
    60e2:	01 50       	subi	r16, 0x01	; 1
    60e4:	10 40       	sbci	r17, 0x00	; 0
    60e6:	17 ff       	sbrs	r17, 7
    60e8:	c9 cf       	rjmp	.-110    	; 0x607c <setup+0x36>
    }

#ifdef MOTOR_DRIVE_ML
  // Weakly pull up both motor REV7 H-bridge driver lines by default.
  // Safe for all boards and may reduce parasitic floating power consumption on non-REV7 boards.
  pinMode(MOTOR_DRIVE_ML, INPUT_PULLUP);
    60ea:	80 e1       	ldi	r24, 0x10	; 16
    60ec:	62 e0       	ldi	r22, 0x02	; 2
    60ee:	0e 94 d9 37 	call	0x6fb2	; 0x6fb2 <pinMode>
  pinMode(MOTOR_DRIVE_MR, INPUT_PULLUP);
    60f2:	81 e1       	ldi	r24, 0x11	; 17
    60f4:	62 e0       	ldi	r22, 0x02	; 2
    60f6:	0e 94 d9 37 	call	0x6fb2	; 0x6fb2 <pinMode>

  // IO setup for safety, eg to avoid pins floating.
  IOSetup();

  // Restore previous RTC state if available.
  restoreRTC();
    60fa:	0e 94 55 24 	call	0x48aa	; 0x48aa <restoreRTC()>
  // TODO: consider code to calibrate the internal RC oscillator against the xtal, eg to keep serial comms happy, eg http://www.avrfreaks.net/index.php?name=PNphpBB2&file=printview&t=36237&start=0

  serialPrintAndFlush(F("\r\nOpenTRV booting: ")); // Leading CRLF to clear leading junk, eg from bootloader.
    60fe:	8c e2       	ldi	r24, 0x2C	; 44
    6100:	94 e0       	ldi	r25, 0x04	; 4
    6102:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <serialPrintAndFlush(__FlashStringHelper const*)>
    serialPrintlnBuildVersion();
    6106:	0e 94 ad 2f 	call	0x5f5a	; 0x5f5a <serialPrintlnBuildVersion()>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    610a:	f9 99       	sbic	0x1f, 1	; 31
    610c:	fe cf       	rjmp	.-4      	; 0x610a <setup+0xc4>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    610e:	86 e0       	ldi	r24, 0x06	; 6
    6110:	90 e0       	ldi	r25, 0x00	; 0
    6112:	92 bd       	out	0x22, r25	; 34
    6114:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    6116:	f8 9a       	sbi	0x1f, 0	; 31
    6118:	30 b4       	in	r3, 0x20	; 32
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    611a:	f9 99       	sbic	0x1f, 1	; 31
    611c:	fe cf       	rjmp	.-4      	; 0x611a <setup+0xd4>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    611e:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    6120:	86 e0       	ldi	r24, 0x06	; 6
    6122:	90 e0       	ldi	r25, 0x00	; 0
    6124:	92 bd       	out	0x22, r25	; 34
    6126:	81 bd       	out	0x21, r24	; 33

  // Count resets to detect unexpected crashes/restarts.
  const uint8_t oldResetCount = eeprom_read_byte((uint8_t *)EE_START_RESET_COUNT);
  eeprom_write_byte((uint8_t *)EE_START_RESET_COUNT, 1 + oldResetCount);
    6128:	33 94       	inc	r3
#endif
    EEDR = __value;
    612a:	30 bc       	out	0x20, r3	; 32
    612c:	3a 94       	dec	r3
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    612e:	0f b6       	in	r0, 0x3f	; 63
    6130:	f8 94       	cli
    6132:	fa 9a       	sbi	0x1f, 2	; 31
    6134:	f9 9a       	sbi	0x1f, 1	; 31
    6136:	0f be       	out	0x3f, r0	; 63

#if defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("DEBUG build");
    6138:	80 e2       	ldi	r24, 0x20	; 32
    613a:	94 e0       	ldi	r25, 0x04	; 4
    613c:	0e 94 13 27 	call	0x4e26	; 0x4e26 <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif
#if defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("Resets: ");
    6140:	87 e1       	ldi	r24, 0x17	; 23
    6142:	94 e0       	ldi	r25, 0x04	; 4
    6144:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(oldResetCount);
    6148:	83 2d       	mov	r24, r3
    614a:	90 e0       	ldi	r25, 0x00	; 0
    614c:	6a e0       	ldi	r22, 0x0A	; 10
    614e:	70 e0       	ldi	r23, 0x00	; 0
    6150:	0e 94 cb 26 	call	0x4d96	; 0x4d96 <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    6154:	0e 94 bb 26 	call	0x4d76	; 0x4d76 <serialPrintlnAndFlush()>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    6158:	f9 99       	sbic	0x1f, 1	; 31
    615a:	fe cf       	rjmp	.-4      	; 0x6158 <setup+0x112>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    615c:	8d e1       	ldi	r24, 0x1D	; 29
    615e:	90 e0       	ldi	r25, 0x00	; 0
    6160:	92 bd       	out	0x22, r25	; 34
    6162:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    6164:	f8 9a       	sbi	0x1f, 0	; 31
    6166:	10 b5       	in	r17, 0x20	; 32
#if !defined(ALT_MAIN_LOOP) && !defined(UNIT_TESTS)
  const uint8_t overruns = (~eeprom_read_byte((uint8_t *)EE_START_OVERRUN_COUNTER)) & 0xff;
    6168:	10 95       	com	r17
  if(0 != overruns)
    616a:	61 f0       	breq	.+24     	; 0x6184 <setup+0x13e>
    {
    DEBUG_SERIAL_PRINT_FLASHSTRING("Overruns: ");
    616c:	8c e0       	ldi	r24, 0x0C	; 12
    616e:	94 e0       	ldi	r25, 0x04	; 4
    6170:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <serialPrintAndFlush(__FlashStringHelper const*)>
    DEBUG_SERIAL_PRINT(overruns);
    6174:	81 2f       	mov	r24, r17
    6176:	90 e0       	ldi	r25, 0x00	; 0
    6178:	6a e0       	ldi	r22, 0x0A	; 10
    617a:	70 e0       	ldi	r23, 0x00	; 0
    617c:	0e 94 cb 26 	call	0x4d96	; 0x4d96 <serialPrintAndFlush(int, int)>
    DEBUG_SERIAL_PRINTLN();
    6180:	0e 94 bb 26 	call	0x4d76	; 0x4d76 <serialPrintlnAndFlush()>
    }
#endif
#if defined(DEBUG)
  // Compute approx free RAM: see http://jeelabs.org/2011/05/22/atmega-memory-use/
  DEBUG_SERIAL_PRINT_FLASHSTRING("Free RAM: ");
    6184:	81 e0       	ldi	r24, 0x01	; 1
    6186:	94 e0       	ldi	r25, 0x04	; 4
    6188:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <serialPrintAndFlush(__FlashStringHelper const*)>
  extern int __heap_start, *__brkval;
  int x;
  DEBUG_SERIAL_PRINT((int) &x - (__brkval == 0 ? (int) &__heap_start : (int) __brkval));
    618c:	80 91 45 05 	lds	r24, 0x0545
    6190:	90 91 46 05 	lds	r25, 0x0546
    6194:	00 97       	sbiw	r24, 0x00	; 0
    6196:	11 f0       	breq	.+4      	; 0x619c <setup+0x156>
    6198:	9c 01       	movw	r18, r24
    619a:	02 c0       	rjmp	.+4      	; 0x61a0 <setup+0x15a>
    619c:	29 e4       	ldi	r18, 0x49	; 73
    619e:	35 e0       	ldi	r19, 0x05	; 5
    61a0:	ce 01       	movw	r24, r28
    61a2:	01 96       	adiw	r24, 0x01	; 1
    61a4:	82 1b       	sub	r24, r18
    61a6:	93 0b       	sbc	r25, r19
    61a8:	6a e0       	ldi	r22, 0x0A	; 10
    61aa:	70 e0       	ldi	r23, 0x00	; 0
    61ac:	0e 94 cb 26 	call	0x4d96	; 0x4d96 <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    61b0:	0e 94 bb 26 	call	0x4d76	; 0x4d76 <serialPrintlnAndFlush()>
// POST may take too long and do unwanted things,
// especially for non-standard hardware setup.
#if defined(ALT_MAIN_LOOP)
  POSTalt(); // Do alternate POST and setup if required.
#else
  optionalPOST();
    61b4:	0e 94 dc 2f 	call	0x5fb8	; 0x5fb8 <optionalPOST()>

  // No external sensors are *assumed* present if running alt main loop.
  // This may mean that the alt loop/POST will have to initialise them explicitly,
  // and the initial seed entropy may be marginally reduced also.
#if !defined(ALT_MAIN_LOOP) && !defined(UNIT_TESTS)
  const int light = AmbLight.read();
    61b8:	8c eb       	ldi	r24, 0xBC	; 188
    61ba:	93 e0       	ldi	r25, 0x03	; 3
    61bc:	0e 94 db 33 	call	0x67b6	; 0x67b6 <AmbientLight::read()>
    61c0:	28 2e       	mov	r2, r24
  DEBUG_SERIAL_PRINT(light);
  DEBUG_SERIAL_PRINTLN();
#endif
//  // Assume 0 or full-scale values unlikely.
//  if((0 == light) || (light >= 1023)) { panic(F("LDR fault")); }
  const int heat = TemperatureC16.read();
    61c2:	86 ec       	ldi	r24, 0xC6	; 198
    61c4:	93 e0       	ldi	r25, 0x03	; 3
    61c6:	0e 94 ff 32 	call	0x65fe	; 0x65fe <RoomTemperatureC16::read()>
    61ca:	3c 01       	movw	r6, r24
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("T: ");
    61cc:	8d ef       	ldi	r24, 0xFD	; 253
    61ce:	93 e0       	ldi	r25, 0x03	; 3
    61d0:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(heat);
    61d4:	c3 01       	movw	r24, r6
    61d6:	6a e0       	ldi	r22, 0x0A	; 10
    61d8:	70 e0       	ldi	r23, 0x00	; 0
    61da:	0e 94 cb 26 	call	0x4d96	; 0x4d96 <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    61de:	0e 94 bb 26 	call	0x4d76	; 0x4d76 <serialPrintlnAndFlush()>
#endif
#ifdef HUMIDITY_SENSOR_SUPPORT
  const uint8_t rh = RelHumidity.read();
    61e2:	82 ec       	ldi	r24, 0xC2	; 194
    61e4:	93 e0       	ldi	r25, 0x03	; 3
    61e6:	0e 94 67 33 	call	0x66ce	; 0x66ce <HumiditySensorSHT21::read()>
    61ea:	08 2f       	mov	r16, r24
  DEBUG_SERIAL_PRINT(rh);
  DEBUG_SERIAL_PRINTLN();
#endif
#endif
#if defined(TEMP_POT_AVAILABLE)
  const int tempPot = TempPot.read();
    61ec:	8a ec       	ldi	r24, 0xCA	; 202
    61ee:	93 e0       	ldi	r25, 0x03	; 3
    61f0:	0e 94 72 32 	call	0x64e4	; 0x64e4 <TemperaturePot::read()>
    61f4:	e8 2e       	mov	r14, r24
#endif


#if !defined(ALT_MAIN_LOOP) && !defined(UNIT_TESTS)
  // Get current power supply voltage (internal sensor).
  const uint16_t Vcc = Supply_mV.read();
    61f6:	82 e6       	ldi	r24, 0x62	; 98
    61f8:	93 e0       	ldi	r25, 0x03	; 3
    61fa:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <SupplyVoltageMilliVolts::read()>
    61fe:	9c 83       	std	Y+4, r25	; 0x04
    6200:	8b 83       	std	Y+3, r24	; 0x03
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("Vcc: ");
    6202:	87 ef       	ldi	r24, 0xF7	; 247
    6204:	93 e0       	ldi	r25, 0x03	; 3
    6206:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(Vcc);
    620a:	8b 81       	ldd	r24, Y+3	; 0x03
    620c:	9c 81       	ldd	r25, Y+4	; 0x04
    620e:	6a e0       	ldi	r22, 0x0A	; 10
    6210:	70 e0       	ldi	r23, 0x00	; 0
    6212:	0e 94 8b 26 	call	0x4d16	; 0x4d16 <serialPrintAndFlush(unsigned int, int)>
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("mV");
    6216:	84 ef       	ldi	r24, 0xF4	; 244
    6218:	93 e0       	ldi	r25, 0x03	; 3
    621a:	0e 94 13 27 	call	0x4e26	; 0x4e26 <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif
  // Get internal temperature measurement (internal sensor).
  const int intTempC16 = readInternalTemperatureC16();
    621e:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <readInternalTemperatureC16()>
    6222:	5c 01       	movw	r10, r24
    6224:	e0 e0       	ldi	r30, 0x00	; 0
    6226:	f1 e0       	ldi	r31, 0x01	; 1
    6228:	44 24       	eor	r4, r4
    622a:	4a 94       	dec	r4
    622c:	54 2c       	mov	r5, r4
        "eor    %A0,__tmp_reg__"

        : "=d" (__ret)
        : "r" (__data), "0" (__crc)
        : "r0"
    );
    622e:	81 91       	ld	r24, Z+
    6230:	92 01       	movw	r18, r4
    6232:	28 27       	eor	r18, r24
    6234:	02 2e       	mov	r0, r18
    6236:	22 95       	swap	r18
    6238:	20 7f       	andi	r18, 0xF0	; 240
    623a:	20 25       	eor	r18, r0
    623c:	03 2e       	mov	r0, r19
    623e:	32 2f       	mov	r19, r18
    6240:	22 95       	swap	r18
    6242:	2f 70       	andi	r18, 0x0F	; 15
    6244:	02 26       	eor	r0, r18
    6246:	26 95       	lsr	r18
    6248:	32 27       	eor	r19, r18
    624a:	23 27       	eor	r18, r19
    624c:	22 0f       	add	r18, r18
    624e:	22 0f       	add	r18, r18
    6250:	22 0f       	add	r18, r18
    6252:	20 25       	eor	r18, r0
    6254:	29 01       	movw	r4, r18
#define RAMSTART (0x100)
#endif
static uint16_t sramCRC()
  {
  uint16_t result = ~0U;
  for(uint8_t *p = (uint8_t *)RAMSTART; p <= (uint8_t *)RAMEND; ++p)
    6256:	39 e0       	ldi	r19, 0x09	; 9
    6258:	e0 30       	cpi	r30, 0x00	; 0
    625a:	f3 07       	cpc	r31, r19
    625c:	41 f7       	brne	.-48     	; 0x622e <setup+0x1e8>
    625e:	20 e0       	ldi	r18, 0x00	; 0
    6260:	30 e0       	ldi	r19, 0x00	; 0
    6262:	88 24       	eor	r8, r8
    6264:	8a 94       	dec	r8
    6266:	98 2c       	mov	r9, r8
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    6268:	f9 99       	sbic	0x1f, 1	; 31
    626a:	fe cf       	rjmp	.-4      	; 0x6268 <setup+0x222>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    626c:	32 bd       	out	0x22, r19	; 34
    626e:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    6270:	f8 9a       	sbi	0x1f, 0	; 31
    6272:	80 b5       	in	r24, 0x20	; 32
    6274:	a4 01       	movw	r20, r8
    6276:	48 27       	eor	r20, r24
    6278:	04 2e       	mov	r0, r20
    627a:	42 95       	swap	r20
    627c:	40 7f       	andi	r20, 0xF0	; 240
    627e:	40 25       	eor	r20, r0
    6280:	05 2e       	mov	r0, r21
    6282:	54 2f       	mov	r21, r20
    6284:	42 95       	swap	r20
    6286:	4f 70       	andi	r20, 0x0F	; 15
    6288:	04 26       	eor	r0, r20
    628a:	46 95       	lsr	r20
    628c:	54 27       	eor	r21, r20
    628e:	45 27       	eor	r20, r21
    6290:	44 0f       	add	r20, r20
    6292:	44 0f       	add	r20, r20
    6294:	44 0f       	add	r20, r20
    6296:	40 25       	eor	r20, r0
    6298:	4a 01       	movw	r8, r20
  }
// Compute a CRC of all of EEPROM as a hash that may contain some entropy, particularly across restarts.
static uint16_t eeCRC()
  {
  uint16_t result = ~0U;
  for(uint8_t *p = (uint8_t *)0; p <= (uint8_t *)E2END; ++p)
    629a:	2f 5f       	subi	r18, 0xFF	; 255
    629c:	3f 4f       	sbci	r19, 0xFF	; 255
    629e:	54 e0       	ldi	r21, 0x04	; 4
    62a0:	20 30       	cpi	r18, 0x00	; 0
    62a2:	35 07       	cpc	r19, r21
    62a4:	09 f7       	brne	.-62     	; 0x6268 <setup+0x222>
#if defined(HUMIDITY_SENSOR_SUPPORT)
                       ((((uint16_t)rh) << 8) - rh) ^
#endif
#endif
                       (getMinutesSinceMidnightLT() << 5) ^
                       (((uint16_t)getSubCycleTime()) << 6);
    62a6:	ff 24       	eor	r15, r15
    62a8:	10 e0       	ldi	r17, 0x00	; 0
    62aa:	0e 94 33 24 	call	0x4866	; 0x4866 <getMinutesSinceMidnightLT()>
    62ae:	20 91 b2 00 	lds	r18, 0x00B2
    62b2:	c2 2e       	mov	r12, r18
    62b4:	dd 24       	eor	r13, r13
    62b6:	f6 e0       	ldi	r31, 0x06	; 6
    62b8:	cc 0c       	add	r12, r12
    62ba:	dd 1c       	adc	r13, r13
    62bc:	fa 95       	dec	r31
    62be:	e1 f7       	brne	.-8      	; 0x62b8 <setup+0x272>
    62c0:	21 e3       	ldi	r18, 0x31	; 49
    62c2:	30 e0       	ldi	r19, 0x00	; 0
    62c4:	c2 2a       	or	r12, r18
    62c6:	d3 2a       	or	r13, r19
    62c8:	4b 81       	ldd	r20, Y+3	; 0x03
    62ca:	5c 81       	ldd	r21, Y+4	; 0x04
    62cc:	c4 26       	eor	r12, r20
    62ce:	d5 26       	eor	r13, r21
    62d0:	aa 0c       	add	r10, r10
    62d2:	bb 1c       	adc	r11, r11
    62d4:	ca 24       	eor	r12, r10
    62d6:	db 24       	eor	r13, r11
    62d8:	66 0c       	add	r6, r6
    62da:	77 1c       	adc	r7, r7
    62dc:	66 0c       	add	r6, r6
    62de:	77 1c       	adc	r7, r7
    62e0:	c6 24       	eor	r12, r6
    62e2:	d7 24       	eor	r13, r7
    62e4:	22 2d       	mov	r18, r2
    62e6:	30 e0       	ldi	r19, 0x00	; 0
    62e8:	64 e0       	ldi	r22, 0x04	; 4
    62ea:	22 0f       	add	r18, r18
    62ec:	33 1f       	adc	r19, r19
    62ee:	6a 95       	dec	r22
    62f0:	e1 f7       	brne	.-8      	; 0x62ea <setup+0x2a4>
    62f2:	c2 26       	eor	r12, r18
    62f4:	d3 26       	eor	r13, r19
    62f6:	30 2f       	mov	r19, r16
    62f8:	22 27       	eor	r18, r18
    62fa:	20 1b       	sub	r18, r16
    62fc:	31 0b       	sbc	r19, r17
    62fe:	c2 26       	eor	r12, r18
    6300:	d3 26       	eor	r13, r19
    6302:	97 01       	movw	r18, r14
    6304:	43 e0       	ldi	r20, 0x03	; 3
    6306:	22 0f       	add	r18, r18
    6308:	33 1f       	adc	r19, r19
    630a:	4a 95       	dec	r20
    630c:	e1 f7       	brne	.-8      	; 0x6306 <setup+0x2c0>
    630e:	2e 0d       	add	r18, r14
    6310:	3f 1d       	adc	r19, r15
    6312:	c2 26       	eor	r12, r18
    6314:	d3 26       	eor	r13, r19
    6316:	25 e0       	ldi	r18, 0x05	; 5
    6318:	88 0f       	add	r24, r24
    631a:	99 1f       	adc	r25, r25
    631c:	2a 95       	dec	r18
    631e:	e1 f7       	brne	.-8      	; 0x6318 <setup+0x2d2>
    6320:	c8 26       	eor	r12, r24
    6322:	d9 26       	eor	r13, r25
  //const long seed1 = ((((long) clockJitterRTC()) << 13) ^ (((long)clockJitterWDT()) << 21) ^ (((long)(srseed^eeseed)) << 16)) + s16;
  // Seed simple/fast/small built-in PRNG.  (Smaller and faster than srandom()/random().)
  const uint8_t nar1 = noisyADCRead();
    6324:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <noisyADCRead()>
    6328:	18 2f       	mov	r17, r24
  seedRNG8(nar1 ^ (uint8_t) s16, oldResetCount - (uint8_t)((s16+eeseed) >> 8), clockJitterWDT() ^ (uint8_t)srseed);
    632a:	fc 2c       	mov	r15, r12
    632c:	f8 26       	eor	r15, r24
    632e:	c6 01       	movw	r24, r12
    6330:	88 0d       	add	r24, r8
    6332:	99 1d       	adc	r25, r9
    6334:	63 2c       	mov	r6, r3
    6336:	69 1a       	sub	r6, r25
    6338:	0e 94 67 1f 	call	0x3ece	; 0x3ece <clockJitterWDT()>
    633c:	e4 2c       	mov	r14, r4
    633e:	48 2f       	mov	r20, r24
    6340:	44 25       	eor	r20, r4
    6342:	8f 2d       	mov	r24, r15
    6344:	66 2d       	mov	r22, r6
    6346:	0e 94 89 21 	call	0x4312	; 0x4312 <seedRNG8(unsigned char, unsigned char, unsigned char)>
  DEBUG_SERIAL_PRINTFMT(nar1, BIN);
  DEBUG_SERIAL_PRINTLN();
#endif
  // TODO: seed other/better PRNGs.
  // Feed in mainly persistent/nonvolatile state explicitly. 
  addEntropyToPool(oldResetCount ^ eeseed, 0);
    634a:	78 2c       	mov	r7, r8
    634c:	88 2d       	mov	r24, r8
    634e:	83 25       	eor	r24, r3
    6350:	60 e0       	ldi	r22, 0x00	; 0
    6352:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <addEntropyToPool(unsigned char, unsigned char)>
  addEntropyToPool((uint8_t)(eeseed >> 8) + nar1, 0);
    6356:	a9 2c       	mov	r10, r9
    6358:	bb 24       	eor	r11, r11
    635a:	81 2f       	mov	r24, r17
    635c:	8a 0d       	add	r24, r10
    635e:	60 e0       	ldi	r22, 0x00	; 0
    6360:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <addEntropyToPool(unsigned char, unsigned char)>
  addEntropyToPool((uint8_t)s16 ^ (uint8_t)(s16 >> 8) , 0);
    6364:	8c 2d       	mov	r24, r12
    6366:	8d 25       	eor	r24, r13
    6368:	60 e0       	ldi	r22, 0x00	; 0
    636a:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <addEntropyToPool(unsigned char, unsigned char)>
    636e:	02 e0       	ldi	r16, 0x02	; 2
    6370:	10 e0       	ldi	r17, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    6372:	f9 99       	sbic	0x1f, 1	; 31
    6374:	fe cf       	rjmp	.-4      	; 0x6372 <setup+0x32c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    6376:	12 bd       	out	0x22, r17	; 34
    6378:	01 bd       	out	0x21, r16	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    637a:	f8 9a       	sbi	0x1f, 0	; 31
    637c:	80 b5       	in	r24, 0x20	; 32
  for(uint8_t i = 0; i < EE_LEN_SEED; ++i)
    { addEntropyToPool(eeprom_read_byte((uint8_t *)(EE_START_SEED + i)), 0); }
    637e:	60 e0       	ldi	r22, 0x00	; 0
    6380:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <addEntropyToPool(unsigned char, unsigned char)>
    6384:	0f 5f       	subi	r16, 0xFF	; 255
    6386:	1f 4f       	sbci	r17, 0xFF	; 255
  // TODO: seed other/better PRNGs.
  // Feed in mainly persistent/nonvolatile state explicitly. 
  addEntropyToPool(oldResetCount ^ eeseed, 0);
  addEntropyToPool((uint8_t)(eeseed >> 8) + nar1, 0);
  addEntropyToPool((uint8_t)s16 ^ (uint8_t)(s16 >> 8) , 0);
  for(uint8_t i = 0; i < EE_LEN_SEED; ++i)
    6388:	06 30       	cpi	r16, 0x06	; 6
    638a:	11 05       	cpc	r17, r1
    638c:	91 f7       	brne	.-28     	; 0x6372 <setup+0x32c>
    { addEntropyToPool(eeprom_read_byte((uint8_t *)(EE_START_SEED + i)), 0); }
  addEntropyToPool(noisyADCRead(), 4); // Conservative first push of noise into pool.
    638e:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <noisyADCRead()>
    6392:	64 e0       	ldi	r22, 0x04	; 4
    6394:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <addEntropyToPool(unsigned char, unsigned char)>
  // Carry a few bits of entropy over a reset by picking one of the four designated EEPROM bytes at random;
  // if zero, erase to 0xff, else AND in part of the seed including some of the previous EEPROM hash (and write).
  // This amounts to about a quarter of an erase/write cycle per reset/restart per byte, or 400k restarts endurance!
  // These 4 bytes should be picked up as part of the hash/CRC of EEPROM above, next time,
  // essentially forming a longish-cycle (poor) PRNG even with little new real entropy each time.
  seedRNG8(nar1 ^ (uint8_t) s16, oldResetCount - (uint8_t)((s16+eeseed) >> 8), clockJitterWDT() ^ (uint8_t)srseed);
    6398:	0e 94 67 1f 	call	0x3ece	; 0x3ece <clockJitterWDT()>
    639c:	e8 26       	eor	r14, r24
    639e:	8f 2d       	mov	r24, r15
    63a0:	66 2d       	mov	r22, r6
    63a2:	4e 2d       	mov	r20, r14
    63a4:	0e 94 89 21 	call	0x4312	; 0x4312 <seedRNG8(unsigned char, unsigned char, unsigned char)>
  uint8_t *const erp = (uint8_t *)(EE_START_SEED + (3&((s16)^((eeseed>>8)+(__TIME__[7]))))); // Use some new and some eeseed bits to choose which byte to updated.
    63a8:	c5 01       	movw	r24, r10
    63aa:	c7 96       	adiw	r24, 0x37	; 55
    63ac:	8c 25       	eor	r24, r12
    63ae:	9d 25       	eor	r25, r13
    63b0:	83 70       	andi	r24, 0x03	; 3
    63b2:	90 70       	andi	r25, 0x00	; 0
    63b4:	02 96       	adiw	r24, 0x02	; 2
    63b6:	18 2f       	mov	r17, r24
    63b8:	09 2f       	mov	r16, r25
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    63ba:	f9 99       	sbic	0x1f, 1	; 31
    63bc:	fe cf       	rjmp	.-4      	; 0x63ba <setup+0x374>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    63be:	92 bd       	out	0x22, r25	; 34
    63c0:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    63c2:	f8 9a       	sbi	0x1f, 0	; 31
    63c4:	80 b5       	in	r24, 0x20	; 32
  const uint8_t erv = eeprom_read_byte(erp);
  if(0 == erv) { eeprom_smart_erase_byte(erp); }
    63c6:	88 23       	and	r24, r24
    63c8:	29 f4       	brne	.+10     	; 0x63d4 <setup+0x38e>
    63ca:	81 2f       	mov	r24, r17
    63cc:	90 2f       	mov	r25, r16
    63ce:	0e 94 1f 10 	call	0x203e	; 0x203e <eeprom_smart_erase_byte(unsigned char*)>
    63d2:	08 c0       	rjmp	.+16     	; 0x63e4 <setup+0x39e>
  else { eeprom_smart_clear_bits(erp, clockJitterEntropyByte() + ((uint8_t)eeseed)); } // Nominally include disjoint set of eeseed bits in choice of which to clear.
    63d4:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <clockJitterEntropyByte()>
    63d8:	78 0e       	add	r7, r24
    63da:	81 2f       	mov	r24, r17
    63dc:	90 2f       	mov	r25, r16
    63de:	67 2d       	mov	r22, r7
    63e0:	0e 94 33 10 	call	0x2066	; 0x2066 <eeprom_smart_clear_bits(unsigned char*, unsigned char)>

    // Force a read/poll/recomputation of the target position and call for heat.
    // Sets/clears changed flag if computed valve position changed.
    // Call at a fixed rate (1/60s).
    // Potentially expensive/slow.
    virtual uint8_t read() { computeCallForHeat(); return(value); }
    63e4:	89 e1       	ldi	r24, 0x19	; 25
    63e6:	92 e0       	ldi	r25, 0x02	; 2
    63e8:	0e 94 45 0c 	call	0x188a	; 0x188a <ModelledRadValve::computeCallForHeat()>
    63ec:	80 91 1b 02 	lds	r24, 0x021B
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("Creating initial FHT8V frame...");
#endif
  // Unconditionally ensure that a valid FHT8V TRV command frame has been computed and stored
  // in case this unit is actually controlling a local valve.
  FHT8VCreateValveSetCmdFrame();
    63f0:	0e 94 14 15 	call	0x2a28	; 0x2a28 <FHT8VCreateValveSetCmdFrame()>


  // Ensure that the unique node ID is set up (mainly on first use).
  // Have one attempt (don't want to stress an already failing EEPROM) to force-reset if not good, then panic.
  // Needs to have had entropy gathered, etc.
  if(!ensureIDCreated())
    63f4:	80 e0       	ldi	r24, 0x00	; 0
    63f6:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <ensureIDCreated(bool)>
    63fa:	88 23       	and	r24, r24
    63fc:	49 f4       	brne	.+18     	; 0x6410 <setup+0x3ca>
    {
    if(!ensureIDCreated(true)) // Force reset.
    63fe:	81 e0       	ldi	r24, 0x01	; 1
    6400:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <ensureIDCreated(bool)>
    6404:	88 23       	and	r24, r24
    6406:	21 f4       	brne	.+8      	; 0x6410 <setup+0x3ca>
      { panic(F("Bad ID and cannot reset.")); }
    6408:	8b ed       	ldi	r24, 0xDB	; 219
    640a:	93 e0       	ldi	r25, 0x03	; 3
    640c:	0e 94 d7 2f 	call	0x5fae	; 0x5fae <panic(__FlashStringHelper const*)>
    }


  // Initialised: turn heatcall UI LED off.
//  pinMode(LED_HEATCALL, OUTPUT);
  LED_HEATCALL_OFF();
    6410:	5c 9a       	sbi	0x0b, 4	; 11
  
#if defined(SUPPORT_CLI) && !defined(ALT_MAIN_LOOP) && !defined(UNIT_TESTS)
  // Help user get to CLI.
  serialPrintlnAndFlush(F("? at CLI prompt for help"));
    6412:	82 ec       	ldi	r24, 0xC2	; 194
    6414:	93 e0       	ldi	r25, 0x03	; 3
    6416:	0e 94 13 27 	call	0x4e26	; 0x4e26 <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif

#if !defined(ALT_MAIN_LOOP) && !defined(UNIT_TESTS)
  // Report initial status.
  serialStatusReport();
    641a:	0e 94 7b 28 	call	0x50f6	; 0x50f6 <serialStatusReport()>
  // Do OpenTRV-specific (late) setup.
  setupOpenTRV();
    641e:	0e 94 d6 09 	call	0x13ac	; 0x13ac <setupOpenTRV()>
#endif
  }
    6422:	0f 90       	pop	r0
    6424:	0f 90       	pop	r0
    6426:	0f 90       	pop	r0
    6428:	0f 90       	pop	r0
    642a:	cf 91       	pop	r28
    642c:	df 91       	pop	r29
    642e:	1f 91       	pop	r17
    6430:	0f 91       	pop	r16
    6432:	ff 90       	pop	r15
    6434:	ef 90       	pop	r14
    6436:	df 90       	pop	r13
    6438:	cf 90       	pop	r12
    643a:	bf 90       	pop	r11
    643c:	af 90       	pop	r10
    643e:	9f 90       	pop	r9
    6440:	8f 90       	pop	r8
    6442:	7f 90       	pop	r7
    6444:	6f 90       	pop	r6
    6446:	5f 90       	pop	r5
    6448:	4f 90       	pop	r4
    644a:	3f 90       	pop	r3
    644c:	2f 90       	pop	r2
    644e:	08 95       	ret

00006450 <AmbientLight::preferredPollInterval_s() const>:
    // Potentially expensive/slow.
    // Not thread-safe nor usable within ISRs (Interrupt Service Routines).
    virtual uint8_t read();

    // Preferred poll interval (in seconds); should bve called at constant rate, usually 1/60s.
    virtual uint8_t preferredPollInterval_s() const { return(60); }
    6450:	8c e3       	ldi	r24, 0x3C	; 60
    6452:	08 95       	ret

00006454 <AmbientLight::tag() const>:

    // Returns a suggested (JSON) tag/field/key name including units of get(); NULL means no recommended tag.
    // The lifetime of the pointed-to text must be at least that of the Sensor instance.
    virtual const char *tag() const { return("L"); }
    6454:	8d e2       	ldi	r24, 0x2D	; 45
    6456:	91 e0       	ldi	r25, 0x01	; 1
    6458:	08 95       	ret

0000645a <RoomTemperatureC16::preferredPollInterval_s() const>:
    // Not thread-safe nor usable within ISRs (Interrupt Service Routines).
    virtual int read();

    // Preferred poll interval (in seconds).
    // This should be called at a regular rate, usually 1/60, so make stats such as velocity measurement easier.
    virtual uint8_t preferredPollInterval_s() const { return(60); }
    645a:	8c e3       	ldi	r24, 0x3C	; 60
    645c:	08 95       	ret

0000645e <RoomTemperatureC16::get() const>:

    // Return last value fetched by read(); undefined before first read().
    // Fast.
    // Not thread-safe nor usable within ISRs (Interrupt Service Routines).
    virtual int get() const { return(value); }
    645e:	fc 01       	movw	r30, r24
    6460:	82 81       	ldd	r24, Z+2	; 0x02
    6462:	93 81       	ldd	r25, Z+3	; 0x03
    6464:	08 95       	ret

00006466 <RoomTemperatureC16::tag() const>:

    // Returns a suggested (JSON) tag/field/key name including units of get(); NULL means no recommended tag.
    // The lifetime of the pointed-to text must be at least that of the Sensor instance.
    virtual const char *tag() const { return("T|C16"); }
    6466:	8f e2       	ldi	r24, 0x2F	; 47
    6468:	91 e0       	ldi	r25, 0x01	; 1
    646a:	08 95       	ret

0000646c <HumiditySensorSHT21::isValid(unsigned char) const>:
    // Potentially expensive/slow.
    // Not thread-safe nor usable within ISRs (Interrupt Service Routines).
    virtual uint8_t read();

    // Returns true if the sensor reading value passed is potentially valid, ie in range [0,100].
    virtual bool isValid(const uint8_t value) const { return(value <= 100); }
    646c:	80 e0       	ldi	r24, 0x00	; 0
    646e:	65 36       	cpi	r22, 0x65	; 101
    6470:	08 f4       	brcc	.+2      	; 0x6474 <HumiditySensorSHT21::isValid(unsigned char) const+0x8>
    6472:	81 e0       	ldi	r24, 0x01	; 1
    6474:	08 95       	ret

00006476 <HumiditySensorSHT21::tag() const>:

    // Returns a suggested (JSON) tag/field/key name including units of get(); NULL means no recommended tag.
    // The lifetime of the pointed-to text must be at least that of the Sensor instance.
    virtual const char *tag() const { return("H|%"); }
    6476:	85 e3       	ldi	r24, 0x35	; 53
    6478:	91 e0       	ldi	r25, 0x01	; 1
    647a:	08 95       	ret

0000647c <Sensor<int>::isValid(int) const>:
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual T get() const = 0;

    // Returns true if this sensor reading value passed is potentially valid, eg in-range.
    // Default is to always return true, ie all values potentially valid.
    virtual bool isValid(T value) const { return(true); }
    647c:	81 e0       	ldi	r24, 0x01	; 1
    647e:	08 95       	ret

00006480 <Sensor<int>::handleInterruptSimple()>:
    // Must be fast and ISR (Interrupt Service Routine) safe.
    // Returns true if interrupt was successfully handled and cleared
    // else another interrupt handler in the chain may be called
    // to attempt to clear the interrupt.
    // By default does nothing (and returns false).
    virtual bool handleInterruptSimple() { return(false); }
    6480:	80 e0       	ldi	r24, 0x00	; 0
    6482:	08 95       	ret

00006484 <Sensor<int>::begin()>:

    // Begin access to this sensor if applicable and not already begun.
    // Returns true if it needed to be begun.
    // Allows logic to end() if required at the end of a block, etc.
    // Defaults to do nothing (and return false).
    virtual bool begin() { return(false); }
    6484:	80 e0       	ldi	r24, 0x00	; 0
    6486:	08 95       	ret

00006488 <Sensor<int>::isAvailable() const>:

    // Returns true if this sensor is currently available.
    // True by default unless implementation overrides.
    // For those sensors that need starting this will be false before begin().
    virtual bool isAvailable() const { return(true); }
    6488:	81 e0       	ldi	r24, 0x01	; 1
    648a:	08 95       	ret

0000648c <Sensor<int>::end()>:

    // End access to this sensor if applicable and not already ended.
    // Returns true if it needed to be ended.
    // Defaults to do nothing (and return false).
    virtual bool end() { return(false); }
    648c:	80 e0       	ldi	r24, 0x00	; 0
    648e:	08 95       	ret

00006490 <global constructors keyed to _ZN12AmbientLight4readEv>:
  {
  protected:
      volatile uint8_t value;

      // By default initialise the value to zero.
      SimpleTSUint8Sensor() : value(0) { }
    6490:	10 92 be 03 	sts	0x03BE, r1
// http://www.vishay.com/docs/84154/appnotesensors.pdf

#ifndef OMIT_MODULE_LDROCCUPANCYDETECTION
// Sensor for ambient light level; 0 is dark, 255 is bright.
class AmbientLight : public SimpleTSUint8Sensor
  {
    6494:	80 ee       	ldi	r24, 0xE0	; 224
    6496:	91 e0       	ldi	r25, 0x01	; 1
    6498:	90 93 bd 03 	sts	0x03BD, r25
    649c:	80 93 bc 03 	sts	0x03BC, r24
      // Can initialise to a chosen value.
      SimpleTSUint8Sensor(const uint8_t v) : value(v) { }
    64a0:	8f ef       	ldi	r24, 0xFF	; 255
    64a2:	80 93 c4 03 	sts	0x03C4, r24
    // True if RH% is high, with hysteresis.
    // Marked volatile for thread-safe lock-free access.
    volatile bool highWithHyst;

  public:
    HumiditySensorSHT21() : SimpleTSUint8Sensor(255), highWithHyst(false) { }
    64a6:	8a ec       	ldi	r24, 0xCA	; 202
    64a8:	91 e0       	ldi	r25, 0x01	; 1
    64aa:	90 93 c3 03 	sts	0x03C3, r25
    64ae:	80 93 c2 03 	sts	0x03C2, r24
    64b2:	10 92 c5 03 	sts	0x03C5, r1
  private:
    // Room temperature in 16*C, eg 1 is 1/16 C, 32 is 2C, -64 is -4C.
    int value;

  public:
    RoomTemperatureC16() : value(0) { }
    64b6:	84 eb       	ldi	r24, 0xB4	; 180
    64b8:	91 e0       	ldi	r25, 0x01	; 1
    64ba:	90 93 c7 03 	sts	0x03C7, r25
    64be:	80 93 c6 03 	sts	0x03C6, r24
    64c2:	10 92 c9 03 	sts	0x03C9, r1
    64c6:	10 92 c8 03 	sts	0x03C8, r1
  {
  protected:
      volatile uint8_t value;

      // By default initialise the value to zero.
      SimpleTSUint8Sensor() : value(0) { }
    64ca:	10 92 cc 03 	sts	0x03CC, r1
    // Raw pot value [0,1023] if extra precision is required.
    uint16_t raw;

  public:
    // Initialise to cautious values.
    TemperaturePot() : raw(0) { }
    64ce:	8e e9       	ldi	r24, 0x9E	; 158
    64d0:	91 e0       	ldi	r25, 0x01	; 1
    64d2:	90 93 cb 03 	sts	0x03CB, r25
    64d6:	80 93 ca 03 	sts	0x03CA, r24
    64da:	10 92 ce 03 	sts	0x03CE, r1
    64de:	10 92 cd 03 	sts	0x03CD, r1

  return(value);
  }

// Singleton implementation/instance.
TemperaturePot TempPot;
    64e2:	08 95       	ret

000064e4 <TemperaturePot::read()>:

// Force a read/poll of the temperature pot and return the value sensed [0,255] (cold to hot).
// Potentially expensive/slow.
// This value has some hysteresis applied to reduce noise.
// Not thread-safe nor usable within ISRs (Interrupt Service Routines).
uint8_t TemperaturePot::read()
    64e4:	0f 93       	push	r16
    64e6:	1f 93       	push	r17
    64e8:	cf 93       	push	r28
    64ea:	df 93       	push	r29
    64ec:	ec 01       	movw	r28, r24
  {
  // No need to wait for voltage to stablise as pot top end directly driven by IO_POWER_UP.
  power_intermittent_peripherals_enable(false);
    64ee:	80 e0       	ldi	r24, 0x00	; 0
    64f0:	0e 94 92 20 	call	0x4124	; 0x4124 <power_intermittent_peripherals_enable(bool)>
  const uint16_t tpRaw = analogueNoiseReducedRead(TEMP_POT_AIN, DEFAULT); // Vcc reference.
    64f4:	81 e0       	ldi	r24, 0x01	; 1
    64f6:	90 e0       	ldi	r25, 0x00	; 0
    64f8:	61 e0       	ldi	r22, 0x01	; 1
    64fa:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <analogueNoiseReducedRead(int, unsigned char)>
    64fe:	8c 01       	movw	r16, r24
  power_intermittent_peripherals_disable();
    6500:	0e 94 60 20 	call	0x40c0	; 0x40c0 <power_intermittent_peripherals_disable()>

#if defined(TEMP_POT_REVERSE)
  const uint16_t tp = TEMP_POT_RAW_MAX - tpRaw; // Travel is in opposite direction to natural!
    6504:	8f ef       	ldi	r24, 0xFF	; 255
    6506:	93 e0       	ldi	r25, 0x03	; 3
    6508:	80 1b       	sub	r24, r16
    650a:	91 0b       	sbc	r25, r17
#endif

  // TODO: capture entropy from changed LS bits esp if reduced-noise version doesn't change.

  // Store new raw value.
  raw = tp;
    650c:	9c 83       	std	Y+4, r25	; 0x04
    650e:	8b 83       	std	Y+3, r24	; 0x03

  // Capture reduced-noise value with a little hysteresis.
  const uint8_t oldValue = value;
    6510:	3a 81       	ldd	r19, Y+2	; 0x02
  const uint8_t shifted = tp >> 2; // Keep signed to avoid wrap-round confusion.
    6512:	96 95       	lsr	r25
    6514:	87 95       	ror	r24
    6516:	96 95       	lsr	r25
    6518:	87 95       	ror	r24
    651a:	28 2f       	mov	r18, r24
  if(((shifted > oldValue) && (shifted - oldValue >= RN_HYST)) ||
    651c:	38 17       	cp	r19, r24
    651e:	20 f4       	brcc	.+8      	; 0x6528 <TemperaturePot::read()+0x44>
    6520:	90 e0       	ldi	r25, 0x00	; 0
    6522:	83 1b       	sub	r24, r19
    6524:	91 09       	sbc	r25, r1
    6526:	06 c0       	rjmp	.+12     	; 0x6534 <TemperaturePot::read()+0x50>
    6528:	83 17       	cp	r24, r19
    652a:	f8 f4       	brcc	.+62     	; 0x656a <TemperaturePot::read()+0x86>
    652c:	83 2f       	mov	r24, r19
    652e:	90 e0       	ldi	r25, 0x00	; 0
    6530:	82 1b       	sub	r24, r18
    6532:	91 09       	sbc	r25, r1
    6534:	04 97       	sbiw	r24, 0x04	; 4
    6536:	cc f0       	brlt	.+50     	; 0x656a <TemperaturePot::read()+0x86>
     ((shifted < oldValue) && (oldValue - shifted >= RN_HYST)))
    {
    const uint8_t rn = (uint8_t) shifted;
    // Atomically store reduced-noise normalised value.
    value = rn;
    6538:	2a 83       	std	Y+2, r18	; 0x02
    // Possible to get reasonable functionality without using MODE button.
    //
    // NOTE: without ignoredFirst this will also respond to the initial position of the pot
    //   as the first reading is taken, ie may force to WARM or BAKE.
    static bool ignoredFirst;
    if(!ignoredFirst) { ignoredFirst = true; }
    653a:	80 91 cf 03 	lds	r24, 0x03CF
    653e:	88 23       	and	r24, r24
    6540:	21 f4       	brne	.+8      	; 0x654a <TemperaturePot::read()+0x66>
    6542:	81 e0       	ldi	r24, 0x01	; 1
    6544:	80 93 cf 03 	sts	0x03CF, r24
    6548:	10 c0       	rjmp	.+32     	; 0x656a <TemperaturePot::read()+0x86>
    else
      {
      // Force FROST mode when right at bottom of dial.
      if(rn < RN_FRBO) { setWarmModeDebounced(false); }
    654a:	28 30       	cpi	r18, 0x08	; 8
    654c:	10 f4       	brcc	.+4      	; 0x6552 <TemperaturePot::read()+0x6e>
    654e:	80 e0       	ldi	r24, 0x00	; 0
    6550:	08 c0       	rjmp	.+16     	; 0x6562 <TemperaturePot::read()+0x7e>
#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
      // Start BAKE mode when dial turned up to top.
      else if(rn > (255-RN_FRBO)) { startBakeDebounced(); }
    6552:	28 3f       	cpi	r18, 0xF8	; 248
    6554:	18 f0       	brcs	.+6      	; 0x655c <TemperaturePot::read()+0x78>
    6556:	0e 94 c4 03 	call	0x788	; 0x788 <startBakeDebounced()>
    655a:	05 c0       	rjmp	.+10     	; 0x6566 <TemperaturePot::read()+0x82>
#endif
      // Force WARM mode if pot/temperature turned up.
      else if(rn > oldValue) { setWarmModeDebounced(true); }
    655c:	32 17       	cp	r19, r18
    655e:	18 f4       	brcc	.+6      	; 0x6566 <TemperaturePot::read()+0x82>
    6560:	81 e0       	ldi	r24, 0x01	; 1
    6562:	0e 94 b1 03 	call	0x762	; 0x762 <setWarmModeDebounced(bool)>

      // Note user operation of pot.
      markUIControlUsed(); 
    6566:	0e 94 32 27 	call	0x4e64	; 0x4e64 <markUIControlUsed()>
  DEBUG_SERIAL_PRINT_FLASHSTRING(", rn: ");
  DEBUG_SERIAL_PRINT(tempPotReducedNoise);
  DEBUG_SERIAL_PRINTLN();
#endif

  return(value);
    656a:	8a 81       	ldd	r24, Y+2	; 0x02
  }
    656c:	df 91       	pop	r29
    656e:	cf 91       	pop	r28
    6570:	1f 91       	pop	r17
    6572:	0f 91       	pop	r16
    6574:	08 95       	ret

00006576 <SHT21_init()>:
// Set true once SHT21 has been initialised.
static volatile bool SHT21_initialised;

// Initialise/configure SHT21, once only generally.
// TWI must already be powered up.
static void SHT21_init()
    6576:	1f 93       	push	r17
  {
#if defined(SHT21_USE_REDUCED_PRECISION)
  // Soft reset in order to sample at reduced precision.
  Wire.beginTransmission(SHT21_I2C_ADDR);
    6578:	88 e1       	ldi	r24, 0x18	; 24
    657a:	94 e0       	ldi	r25, 0x04	; 4
    657c:	60 e4       	ldi	r22, 0x40	; 64
    657e:	70 e0       	ldi	r23, 0x00	; 0
    6580:	0e 94 8c 34 	call	0x6918	; 0x6918 <TwoWire::beginTransmission(int)>
  Wire.write((byte) SHT21_I2C_CMD_USERREG); // Select control register.
    6584:	88 e1       	ldi	r24, 0x18	; 24
    6586:	94 e0       	ldi	r25, 0x04	; 4
    6588:	67 ee       	ldi	r22, 0xE7	; 231
    658a:	0e 94 0e 35 	call	0x6a1c	; 0x6a1c <TwoWire::write(unsigned char)>
  Wire.endTransmission();
    658e:	88 e1       	ldi	r24, 0x18	; 24
    6590:	94 e0       	ldi	r25, 0x04	; 4
    6592:	0e 94 51 35 	call	0x6aa2	; 0x6aa2 <TwoWire::endTransmission()>
  Wire.requestFrom(SHT21_I2C_ADDR, 1);
    6596:	88 e1       	ldi	r24, 0x18	; 24
    6598:	94 e0       	ldi	r25, 0x04	; 4
    659a:	60 e4       	ldi	r22, 0x40	; 64
    659c:	70 e0       	ldi	r23, 0x00	; 0
    659e:	41 e0       	ldi	r20, 0x01	; 1
    65a0:	50 e0       	ldi	r21, 0x00	; 0
    65a2:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <TwoWire::requestFrom(int, int)>
    65a6:	04 c0       	rjmp	.+8      	; 0x65b0 <SHT21_init()+0x3a>
  while(Wire.available() < 1)
    {
    // Wait for data, but avoid rolling over the end of a minor cycle...
    if(getSubCycleTime() >= GSCT_MAX-2)
    65a8:	80 91 b2 00 	lds	r24, 0x00B2
    65ac:	8d 3f       	cpi	r24, 0xFD	; 253
    65ae:	28 f5       	brcc	.+74     	; 0x65fa <SHT21_init()+0x84>
  // Soft reset in order to sample at reduced precision.
  Wire.beginTransmission(SHT21_I2C_ADDR);
  Wire.write((byte) SHT21_I2C_CMD_USERREG); // Select control register.
  Wire.endTransmission();
  Wire.requestFrom(SHT21_I2C_ADDR, 1);
  while(Wire.available() < 1)
    65b0:	88 e1       	ldi	r24, 0x18	; 24
    65b2:	94 e0       	ldi	r25, 0x04	; 4
    65b4:	0e 94 96 34 	call	0x692c	; 0x692c <TwoWire::available()>
    65b8:	18 16       	cp	r1, r24
    65ba:	19 06       	cpc	r1, r25
    65bc:	ac f7       	brge	.-22     	; 0x65a8 <SHT21_init()+0x32>
    if(getSubCycleTime() >= GSCT_MAX-2)
      {
      return; // Failed, and not initialised.
      }
    }
  const uint8_t curUR = Wire.read();
    65be:	88 e1       	ldi	r24, 0x18	; 24
    65c0:	94 e0       	ldi	r25, 0x04	; 4
    65c2:	0e 94 9f 34 	call	0x693e	; 0x693e <TwoWire::read()>
    65c6:	18 2f       	mov	r17, r24
//  DEBUG_SERIAL_PRINTFMT(curUR, HEX);
//  DEBUG_SERIAL_PRINTLN();

  // Preserve reserved bits (3, 4, 5) and sample 8-bit RH (for for 1%) and 12-bit temp (for 1/16C).
  const uint8_t newUR = (curUR & 0x38) | 3;
  Wire.beginTransmission(SHT21_I2C_ADDR);
    65c8:	88 e1       	ldi	r24, 0x18	; 24
    65ca:	94 e0       	ldi	r25, 0x04	; 4
    65cc:	60 e4       	ldi	r22, 0x40	; 64
    65ce:	70 e0       	ldi	r23, 0x00	; 0
    65d0:	0e 94 8c 34 	call	0x6918	; 0x6918 <TwoWire::beginTransmission(int)>
  Wire.write((byte) SHT21_I2C_CMD_USERREG); // Select control register.
    65d4:	88 e1       	ldi	r24, 0x18	; 24
    65d6:	94 e0       	ldi	r25, 0x04	; 4
    65d8:	67 ee       	ldi	r22, 0xE7	; 231
    65da:	0e 94 0e 35 	call	0x6a1c	; 0x6a1c <TwoWire::write(unsigned char)>
  Wire.write((byte) newUR);
    65de:	18 73       	andi	r17, 0x38	; 56
    65e0:	13 60       	ori	r17, 0x03	; 3
    65e2:	88 e1       	ldi	r24, 0x18	; 24
    65e4:	94 e0       	ldi	r25, 0x04	; 4
    65e6:	61 2f       	mov	r22, r17
    65e8:	0e 94 0e 35 	call	0x6a1c	; 0x6a1c <TwoWire::write(unsigned char)>
  Wire.endTransmission();
    65ec:	88 e1       	ldi	r24, 0x18	; 24
    65ee:	94 e0       	ldi	r25, 0x04	; 4
    65f0:	0e 94 51 35 	call	0x6aa2	; 0x6aa2 <TwoWire::endTransmission()>

#endif
  SHT21_initialised = true;
    65f4:	81 e0       	ldi	r24, 0x01	; 1
    65f6:	80 93 d0 03 	sts	0x03D0, r24
  }
    65fa:	1f 91       	pop	r17
    65fc:	08 95       	ret

000065fe <RoomTemperatureC16::read()>:

// Singleton implementation/instance.
RoomTemperatureC16 TemperatureC16;

// Temperature read uses/selects one of the implementations/sensors.
int RoomTemperatureC16::read()
    65fe:	ef 92       	push	r14
    6600:	ff 92       	push	r15
    6602:	0f 93       	push	r16
    6604:	1f 93       	push	r17
    6606:	cf 93       	push	r28
    6608:	df 93       	push	r29
    660a:	7c 01       	movw	r14, r24
// This may consume significant power and time.
// Probably no need to do this more than (say) once per minute.
// The first read will initialise the device as necessary and leave it in a low-power mode afterwards.
static int Sensor_SHT21_readTemperatureC16()
  {
  const bool neededPowerUp = powerUpTWIIfDisabled();
    660c:	0e 94 a1 20 	call	0x4142	; 0x4142 <powerUpTWIIfDisabled()>
    6610:	08 2f       	mov	r16, r24

  // Initialise/config if necessary.
  if(!SHT21_initialised) { SHT21_init(); }
    6612:	80 91 d0 03 	lds	r24, 0x03D0
    6616:	88 23       	and	r24, r24
    6618:	11 f4       	brne	.+4      	; 0x661e <RoomTemperatureC16::read()+0x20>
    661a:	0e 94 bb 32 	call	0x6576	; 0x6576 <SHT21_init()>
  // Max RH measurement time:
  //   * 14-bit: 85ms
  //   * 12-bit: 22ms
  //   * 11-bit: 11ms
  // Use blocking data fetch for now.
  Wire.beginTransmission(SHT21_I2C_ADDR);
    661e:	88 e1       	ldi	r24, 0x18	; 24
    6620:	94 e0       	ldi	r25, 0x04	; 4
    6622:	60 e4       	ldi	r22, 0x40	; 64
    6624:	70 e0       	ldi	r23, 0x00	; 0
    6626:	0e 94 8c 34 	call	0x6918	; 0x6918 <TwoWire::beginTransmission(int)>
  Wire.write((byte) SHT21_I2C_CMD_TEMP_HOLD); // Select control register.
    662a:	88 e1       	ldi	r24, 0x18	; 24
    662c:	94 e0       	ldi	r25, 0x04	; 4
    662e:	63 ee       	ldi	r22, 0xE3	; 227
    6630:	0e 94 0e 35 	call	0x6a1c	; 0x6a1c <TwoWire::write(unsigned char)>
#if defined(SHT21_USE_REDUCED_PRECISION)
  nap(WDTO_30MS); // Should cover 12-bit conversion (22ms).
    6634:	81 e0       	ldi	r24, 0x01	; 1
    6636:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <nap(signed char)>
#else
  sleepLowPowerMs(90); // Should be plenty for slowest (14-bit) conversion (85ms).
#endif
  //delay(100);
  Wire.endTransmission();
    663a:	88 e1       	ldi	r24, 0x18	; 24
    663c:	94 e0       	ldi	r25, 0x04	; 4
    663e:	0e 94 51 35 	call	0x6aa2	; 0x6aa2 <TwoWire::endTransmission()>
  Wire.requestFrom(SHT21_I2C_ADDR, 3);
    6642:	88 e1       	ldi	r24, 0x18	; 24
    6644:	94 e0       	ldi	r25, 0x04	; 4
    6646:	60 e4       	ldi	r22, 0x40	; 64
    6648:	70 e0       	ldi	r23, 0x00	; 0
    664a:	43 e0       	ldi	r20, 0x03	; 3
    664c:	50 e0       	ldi	r21, 0x00	; 0
    664e:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <TwoWire::requestFrom(int, int)>
    6652:	07 c0       	rjmp	.+14     	; 0x6662 <RoomTemperatureC16::read()+0x64>
  while(Wire.available() < 3)
    {
    // Wait for data, but avoid rolling over the end of a minor cycle...
    if(getSubCycleTime() >= GSCT_MAX-2)
    6654:	80 91 b2 00 	lds	r24, 0x00B2
    6658:	8d 3f       	cpi	r24, 0xFD	; 253
    665a:	18 f0       	brcs	.+6      	; 0x6662 <RoomTemperatureC16::read()+0x64>
    665c:	60 e0       	ldi	r22, 0x00	; 0
    665e:	70 e0       	ldi	r23, 0x00	; 0
    6660:	2b c0       	rjmp	.+86     	; 0x66b8 <RoomTemperatureC16::read()+0xba>
  sleepLowPowerMs(90); // Should be plenty for slowest (14-bit) conversion (85ms).
#endif
  //delay(100);
  Wire.endTransmission();
  Wire.requestFrom(SHT21_I2C_ADDR, 3);
  while(Wire.available() < 3)
    6662:	88 e1       	ldi	r24, 0x18	; 24
    6664:	94 e0       	ldi	r25, 0x04	; 4
    6666:	0e 94 96 34 	call	0x692c	; 0x692c <TwoWire::available()>
    666a:	03 97       	sbiw	r24, 0x03	; 3
    666c:	9c f3       	brlt	.-26     	; 0x6654 <RoomTemperatureC16::read()+0x56>
    if(getSubCycleTime() >= GSCT_MAX-2)
      {
      return(0); // Failure value: may be able to to better.
      }
    }
  uint16_t rawTemp = (Wire.read() << 8);
    666e:	88 e1       	ldi	r24, 0x18	; 24
    6670:	94 e0       	ldi	r25, 0x04	; 4
    6672:	0e 94 9f 34 	call	0x693e	; 0x693e <TwoWire::read()>
    6676:	18 2f       	mov	r17, r24
  rawTemp |= (Wire.read() & 0xfc); // Clear status ls bits.
    6678:	88 e1       	ldi	r24, 0x18	; 24
    667a:	94 e0       	ldi	r25, 0x04	; 4
    667c:	0e 94 9f 34 	call	0x693e	; 0x693e <TwoWire::read()>
    6680:	ec 01       	movw	r28, r24

  // Power down TWI ASAP.
  if(neededPowerUp) { powerDownTWI(); }
    6682:	00 23       	and	r16, r16
    6684:	11 f0       	breq	.+4      	; 0x668a <RoomTemperatureC16::read()+0x8c>
    6686:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <powerDownTWI()>
    if(getSubCycleTime() >= GSCT_MAX-2)
      {
      return(0); // Failure value: may be able to to better.
      }
    }
  uint16_t rawTemp = (Wire.read() << 8);
    668a:	71 2f       	mov	r23, r17
    668c:	60 e0       	ldi	r22, 0x00	; 0
  if(neededPowerUp) { powerDownTWI(); }

  // TODO: capture entropy if (transformed) value has changed.

  // Nominal formula: C = -46.85 + ((175.72*raw) / (1L << 16));
  const int c16 = -750 + ((5623L * rawTemp) >> 17); // FIXME: find a faster approximation...
    668e:	cc 7f       	andi	r28, 0xFC	; 252
    6690:	d0 70       	andi	r29, 0x00	; 0
    6692:	6c 2b       	or	r22, r28
    6694:	7d 2b       	or	r23, r29
    6696:	80 e0       	ldi	r24, 0x00	; 0
    6698:	90 e0       	ldi	r25, 0x00	; 0
    669a:	27 ef       	ldi	r18, 0xF7	; 247
    669c:	35 e1       	ldi	r19, 0x15	; 21
    669e:	40 e0       	ldi	r20, 0x00	; 0
    66a0:	50 e0       	ldi	r21, 0x00	; 0
    66a2:	0e 94 98 3d 	call	0x7b30	; 0x7b30 <__mulsi3>
    66a6:	31 e1       	ldi	r19, 0x11	; 17
    66a8:	95 95       	asr	r25
    66aa:	87 95       	ror	r24
    66ac:	77 95       	ror	r23
    66ae:	67 95       	ror	r22
    66b0:	3a 95       	dec	r19
    66b2:	d1 f7       	brne	.-12     	; 0x66a8 <RoomTemperatureC16::read()+0xaa>
    66b4:	6e 5e       	subi	r22, 0xEE	; 238
    66b6:	72 40       	sbci	r23, 0x02	; 2
  const int raw = Sensor_SHT21_readTemperatureC16();
#else
  const int raw = TMP112_readTemperatureC16();
#endif

  value = raw;
    66b8:	f7 01       	movw	r30, r14
    66ba:	73 83       	std	Z+3, r23	; 0x03
    66bc:	62 83       	std	Z+2, r22	; 0x02
  return(value);
  }
    66be:	cb 01       	movw	r24, r22
    66c0:	df 91       	pop	r29
    66c2:	cf 91       	pop	r28
    66c4:	1f 91       	pop	r17
    66c6:	0f 91       	pop	r16
    66c8:	ff 90       	pop	r15
    66ca:	ef 90       	pop	r14
    66cc:	08 95       	ret

000066ce <HumiditySensorSHT21::read()>:
// Measure and return the current relative humidity in %; range [0,100] and 255 for error.
// This may consume significant power and time.
// Probably no need to do this more than (say) once per minute.
// The first read will initialise the device as necessary and leave it in a low-power mode afterwards.
// Returns 255 (~0) in case of error.
uint8_t HumiditySensorSHT21::read()
    66ce:	ff 92       	push	r15
    66d0:	0f 93       	push	r16
    66d2:	1f 93       	push	r17
    66d4:	cf 93       	push	r28
    66d6:	df 93       	push	r29
    66d8:	ec 01       	movw	r28, r24
  {
  const bool neededPowerUp = powerUpTWIIfDisabled();
    66da:	0e 94 a1 20 	call	0x4142	; 0x4142 <powerUpTWIIfDisabled()>
    66de:	18 2f       	mov	r17, r24

  // Initialise/config if necessary.
  if(!SHT21_initialised) { SHT21_init(); }
    66e0:	80 91 d0 03 	lds	r24, 0x03D0
    66e4:	88 23       	and	r24, r24
    66e6:	11 f4       	brne	.+4      	; 0x66ec <HumiditySensorSHT21::read()+0x1e>
    66e8:	0e 94 bb 32 	call	0x6576	; 0x6576 <SHT21_init()>
  // Get RH%...
  // Max RH measurement time:
  //   * 12-bit: 29ms
  //   *  8-bit:  4ms
  // Use blocking data fetch for now.
  Wire.beginTransmission(SHT21_I2C_ADDR);
    66ec:	88 e1       	ldi	r24, 0x18	; 24
    66ee:	94 e0       	ldi	r25, 0x04	; 4
    66f0:	60 e4       	ldi	r22, 0x40	; 64
    66f2:	70 e0       	ldi	r23, 0x00	; 0
    66f4:	0e 94 8c 34 	call	0x6918	; 0x6918 <TwoWire::beginTransmission(int)>
  Wire.write((byte) SHT21_I2C_CMD_RH_HOLD); // Select control register.
    66f8:	88 e1       	ldi	r24, 0x18	; 24
    66fa:	94 e0       	ldi	r25, 0x04	; 4
    66fc:	65 ee       	ldi	r22, 0xE5	; 229
    66fe:	0e 94 0e 35 	call	0x6a1c	; 0x6a1c <TwoWire::write(unsigned char)>
// This may be achieved in part by dynamically slowing the CPU clock if possible.
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed((((MIN_CPU_HZ * (ms)) + 2000) / 4000) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    6702:	85 e2       	ldi	r24, 0x25	; 37
    6704:	90 e0       	ldi	r25, 0x00	; 0
    6706:	0e 94 76 1d 	call	0x3aec	; 0x3aec <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
#if defined(SHT21_USE_REDUCED_PRECISION)
  sleepLowPowerMs(5); // Should cover 8-bit conversion (4ms).
#else
  nap(WDTO_30MS); // Should cover even 12-bit conversion (29ms).
#endif
  Wire.endTransmission();
    670a:	88 e1       	ldi	r24, 0x18	; 24
    670c:	94 e0       	ldi	r25, 0x04	; 4
    670e:	0e 94 51 35 	call	0x6aa2	; 0x6aa2 <TwoWire::endTransmission()>
  Wire.requestFrom(SHT21_I2C_ADDR, 3);
    6712:	88 e1       	ldi	r24, 0x18	; 24
    6714:	94 e0       	ldi	r25, 0x04	; 4
    6716:	60 e4       	ldi	r22, 0x40	; 64
    6718:	70 e0       	ldi	r23, 0x00	; 0
    671a:	43 e0       	ldi	r20, 0x03	; 3
    671c:	50 e0       	ldi	r21, 0x00	; 0
    671e:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <TwoWire::requestFrom(int, int)>
    6722:	06 c0       	rjmp	.+12     	; 0x6730 <HumiditySensorSHT21::read()+0x62>
  while(Wire.available() < 3)
    {
    // Wait for data, but avoid rolling over the end of a minor cycle...
    if(getSubCycleTime() >= GSCT_MAX)
    6724:	80 91 b2 00 	lds	r24, 0x00B2
    6728:	8f 3f       	cpi	r24, 0xFF	; 255
    672a:	11 f4       	brne	.+4      	; 0x6730 <HumiditySensorSHT21::read()+0x62>
    672c:	1f ef       	ldi	r17, 0xFF	; 255
    672e:	3c c0       	rjmp	.+120    	; 0x67a8 <HumiditySensorSHT21::read()+0xda>
#else
  nap(WDTO_30MS); // Should cover even 12-bit conversion (29ms).
#endif
  Wire.endTransmission();
  Wire.requestFrom(SHT21_I2C_ADDR, 3);
  while(Wire.available() < 3)
    6730:	88 e1       	ldi	r24, 0x18	; 24
    6732:	94 e0       	ldi	r25, 0x04	; 4
    6734:	0e 94 96 34 	call	0x692c	; 0x692c <TwoWire::available()>
    6738:	03 97       	sbiw	r24, 0x03	; 3
    673a:	a4 f3       	brlt	.-24     	; 0x6724 <HumiditySensorSHT21::read()+0x56>
      {
//      DEBUG_SERIAL_PRINTLN_FLASHSTRING("giving up");
      return(~0);
      }
    }
  const uint8_t rawRH = Wire.read();
    673c:	88 e1       	ldi	r24, 0x18	; 24
    673e:	94 e0       	ldi	r25, 0x04	; 4
    6740:	0e 94 9f 34 	call	0x693e	; 0x693e <TwoWire::read()>
    6744:	f8 2e       	mov	r15, r24
  const uint8_t rawRL = Wire.read();
    6746:	88 e1       	ldi	r24, 0x18	; 24
    6748:	94 e0       	ldi	r25, 0x04	; 4
    674a:	0e 94 9f 34 	call	0x693e	; 0x693e <TwoWire::read()>
    674e:	08 2f       	mov	r16, r24

  // Power down TWI ASAP.
  if(neededPowerUp) { powerDownTWI(); }
    6750:	11 23       	and	r17, r17
    6752:	11 f0       	breq	.+4      	; 0x6758 <HumiditySensorSHT21::read()+0x8a>
    6754:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <powerDownTWI()>

  const uint16_t raw = (((uint16_t)rawRH) << 8) | (rawRL & 0xfc); // Clear status ls bits.
  const uint8_t result = -6 + ((125L * raw) >> 16);
    6758:	60 2f       	mov	r22, r16
    675a:	70 e0       	ldi	r23, 0x00	; 0
    675c:	6c 7f       	andi	r22, 0xFC	; 252
    675e:	70 70       	andi	r23, 0x00	; 0
    6760:	3f 2d       	mov	r19, r15
    6762:	20 e0       	ldi	r18, 0x00	; 0
    6764:	62 2b       	or	r22, r18
    6766:	73 2b       	or	r23, r19
    6768:	80 e0       	ldi	r24, 0x00	; 0
    676a:	90 e0       	ldi	r25, 0x00	; 0
    676c:	2d e7       	ldi	r18, 0x7D	; 125
    676e:	30 e0       	ldi	r19, 0x00	; 0
    6770:	40 e0       	ldi	r20, 0x00	; 0
    6772:	50 e0       	ldi	r21, 0x00	; 0
    6774:	0e 94 98 3d 	call	0x7b30	; 0x7b30 <__mulsi3>
    6778:	bc 01       	movw	r22, r24
    677a:	99 27       	eor	r25, r25
    677c:	77 fd       	sbrc	r23, 7
    677e:	90 95       	com	r25
    6780:	89 2f       	mov	r24, r25
    6782:	16 2f       	mov	r17, r22
    6784:	16 50       	subi	r17, 0x06	; 6

  // Capture entropy from raw status bits
  // iff (transformed) reading has changed.
  if(value != result) { addEntropyToPool(rawRL ^ rawRH, 1); }
    6786:	8a 81       	ldd	r24, Y+2	; 0x02
    6788:	81 17       	cp	r24, r17
    678a:	29 f0       	breq	.+10     	; 0x6796 <HumiditySensorSHT21::read()+0xc8>
    678c:	80 2f       	mov	r24, r16
    678e:	8f 25       	eor	r24, r15
    6790:	61 e0       	ldi	r22, 0x01	; 1
    6792:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <addEntropyToPool(unsigned char, unsigned char)>

  value = result;
    6796:	1a 83       	std	Y+2, r17	; 0x02
  if(result > (HUMIDTY_HIGH_RHPC+HUMIDITY_EPSILON_RHPC)) { highWithHyst = true; }
    6798:	1c 34       	cpi	r17, 0x4C	; 76
    679a:	18 f0       	brcs	.+6      	; 0x67a2 <HumiditySensorSHT21::read()+0xd4>
    679c:	81 e0       	ldi	r24, 0x01	; 1
    679e:	8b 83       	std	Y+3, r24	; 0x03
    67a0:	03 c0       	rjmp	.+6      	; 0x67a8 <HumiditySensorSHT21::read()+0xda>
  else if(result < (HUMIDTY_HIGH_RHPC-HUMIDITY_EPSILON_RHPC)) { highWithHyst = false; }
    67a2:	11 34       	cpi	r17, 0x41	; 65
    67a4:	08 f4       	brcc	.+2      	; 0x67a8 <HumiditySensorSHT21::read()+0xda>
    67a6:	1b 82       	std	Y+3, r1	; 0x03
  return(result);
  }
    67a8:	81 2f       	mov	r24, r17
    67aa:	df 91       	pop	r29
    67ac:	cf 91       	pop	r28
    67ae:	1f 91       	pop	r17
    67b0:	0f 91       	pop	r16
    67b2:	ff 90       	pop	r15
    67b4:	08 95       	ret

000067b6 <AmbientLight::read()>:
// Measure/store/return the current room ambient light levels in range [0,1023].
// This may consume significant power and time.
// Probably no need to do this more than (say) once per minute.
// This implementation expects LDR (1M dark resistance) from IO_POWER_UP to LDR_SENSOR_AIN and 100k to ground.
// (Not intended to be called from ISR.)
uint8_t AmbientLight::read()
    67b6:	ef 92       	push	r14
    67b8:	ff 92       	push	r15
    67ba:	0f 93       	push	r16
    67bc:	1f 93       	push	r17
    67be:	df 93       	push	r29
    67c0:	cf 93       	push	r28
    67c2:	cd b7       	in	r28, 0x3d	; 61
    67c4:	de b7       	in	r29, 0x3e	; 62
    67c6:	28 97       	sbiw	r28, 0x08	; 8
    67c8:	0f b6       	in	r0, 0x3f	; 63
    67ca:	f8 94       	cli
    67cc:	de bf       	out	0x3e, r29	; 62
    67ce:	0f be       	out	0x3f, r0	; 63
    67d0:	cd bf       	out	0x3d, r28	; 61
    67d2:	7c 01       	movw	r14, r24
  {
  power_intermittent_peripherals_enable(false); // No need to wait for anything to stablise as direct of IO_POWER_UP.
    67d4:	80 e0       	ldi	r24, 0x00	; 0
    67d6:	0e 94 92 20 	call	0x4124	; 0x4124 <power_intermittent_peripherals_enable(bool)>
  const uint16_t al0 = analogueNoiseReducedRead(LDR_SENSOR_AIN, ALREFERENCE);
    67da:	80 e0       	ldi	r24, 0x00	; 0
    67dc:	90 e0       	ldi	r25, 0x00	; 0
    67de:	63 e0       	ldi	r22, 0x03	; 3
    67e0:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <analogueNoiseReducedRead(int, unsigned char)>
#if defined(ADAPTIVE_THRESHOLD)
  uint16_t al;
  if(al0 >= ADAPTIVE_THRESHOLD)
    67e4:	23 e0       	ldi	r18, 0x03	; 3
    67e6:	80 38       	cpi	r24, 0x80	; 128
    67e8:	92 07       	cpc	r25, r18
    67ea:	10 f4       	brcc	.+4      	; 0x67f0 <AmbientLight::read()+0x3a>
    67ec:	8c 01       	movw	r16, r24
    67ee:	37 c0       	rjmp	.+110    	; 0x685e <AmbientLight::read()+0xa8>
    {
    const uint16_t al1 = analogueNoiseReducedRead(LDR_SENSOR_AIN, DEFAULT); // Vsupply reference.
    67f0:	80 e0       	ldi	r24, 0x00	; 0
    67f2:	90 e0       	ldi	r25, 0x00	; 0
    67f4:	61 e0       	ldi	r22, 0x01	; 1
    67f6:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <analogueNoiseReducedRead(int, unsigned char)>
    67fa:	8c 01       	movw	r16, r24
    Supply_mV.read();
    67fc:	82 e6       	ldi	r24, 0x62	; 98
    67fe:	93 e0       	ldi	r25, 0x03	; 3
    6800:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <SupplyVoltageMilliVolts::read()>
    const uint16_t vbg = Supply_mV.getRawInv(); // Vbandgap wrt Vsupply.
    // Compute value in extended range up to ~1024 * Vsupply/Vbandgap.
    const uint16_t ale = ((al1 << 5) / ((vbg+16) >> 5)); // Faster int-only approximation to (int)((al1 * 1024L) / vbg)).
    6804:	60 91 64 03 	lds	r22, 0x0364
    6808:	70 91 65 03 	lds	r23, 0x0365
    680c:	60 5f       	subi	r22, 0xF0	; 240
    680e:	7f 4f       	sbci	r23, 0xFF	; 255
    6810:	f5 e0       	ldi	r31, 0x05	; 5
    6812:	76 95       	lsr	r23
    6814:	67 95       	ror	r22
    6816:	fa 95       	dec	r31
    6818:	e1 f7       	brne	.-8      	; 0x6812 <AmbientLight::read()+0x5c>
    681a:	c8 01       	movw	r24, r16
    681c:	e5 e0       	ldi	r30, 0x05	; 5
    681e:	88 0f       	add	r24, r24
    6820:	99 1f       	adc	r25, r25
    6822:	ea 95       	dec	r30
    6824:	e1 f7       	brne	.-8      	; 0x681e <AmbientLight::read()+0x68>
    6826:	0e 94 b7 3d 	call	0x7b6e	; 0x7b6e <__udivmodhi4>
    682a:	cb 01       	movw	r24, r22
    // Ensure that scale stays monotonic in face of calculation lumpiness, etc...
    // Scale all remaining space above threshold to new top value into remaining space.
    // TODO: ensure scaleFactor is a power of two for speed.
    const uint16_t scaleFactor = (2048 - ADAPTIVE_THRESHOLD) / (1024 - ADAPTIVE_THRESHOLD);
    al = fnmin(1023U,
        ADAPTIVE_THRESHOLD + fnmax(0U, ((ale - ADAPTIVE_THRESHOLD) / scaleFactor)));
    682c:	2f ef       	ldi	r18, 0xFF	; 255
    682e:	33 e0       	ldi	r19, 0x03	; 3
    6830:	3e 83       	std	Y+6, r19	; 0x06
    6832:	2d 83       	std	Y+5, r18	; 0x05
    6834:	1a 82       	std	Y+2, r1	; 0x02
    6836:	19 82       	std	Y+1, r1	; 0x01
    6838:	80 58       	subi	r24, 0x80	; 128
    683a:	93 40       	sbci	r25, 0x03	; 3
    683c:	69 e0       	ldi	r22, 0x09	; 9
    683e:	70 e0       	ldi	r23, 0x00	; 0
    6840:	0e 94 b7 3d 	call	0x7b6e	; 0x7b6e <__udivmodhi4>
    6844:	7c 83       	std	Y+4, r23	; 0x04
    6846:	6b 83       	std	Y+3, r22	; 0x03
    6848:	8b 01       	movw	r16, r22
    684a:	00 58       	subi	r16, 0x80	; 128
    684c:	1c 4f       	sbci	r17, 0xFC	; 252
    684e:	18 87       	std	Y+8, r17	; 0x08
    6850:	0f 83       	std	Y+7, r16	; 0x07




// Templated function versions of min/max that do not evaluate the arguments twice.
template <class T> const T& fnmin(const T& a, const T& b) { return((a>b)?b:a); }
    6852:	43 e0       	ldi	r20, 0x03	; 3
    6854:	0f 3f       	cpi	r16, 0xFF	; 255
    6856:	14 07       	cpc	r17, r20
    6858:	10 f0       	brcs	.+4      	; 0x685e <AmbientLight::read()+0xa8>
    685a:	0f ef       	ldi	r16, 0xFF	; 255
    685c:	13 e0       	ldi	r17, 0x03	; 3
    }
  else { al = al0; }
#else
  const uint16_t al = al0;
#endif
  power_intermittent_peripherals_disable();
    685e:	0e 94 60 20 	call	0x40c0	; 0x40c0 <power_intermittent_peripherals_disable()>

  // Capture entropy from changed LS bits.
  if((uint8_t)al != (uint8_t)rawValue) { addEntropyToPool((uint8_t)al ^ (uint8_t)rawValue, 0); } // Claim zero entropy as may be forced by Eve.
    6862:	80 2f       	mov	r24, r16
    6864:	f7 01       	movw	r30, r14
    6866:	93 81       	ldd	r25, Z+3	; 0x03
    6868:	09 17       	cp	r16, r25
    686a:	21 f0       	breq	.+8      	; 0x6874 <AmbientLight::read()+0xbe>
    686c:	89 27       	eor	r24, r25
    686e:	60 e0       	ldi	r22, 0x00	; 0
    6870:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <addEntropyToPool(unsigned char, unsigned char)>

  // Adjust room-lit flag, with hysteresis.
  if(al <= LDR_THR_LOW)
    6874:	f1 e0       	ldi	r31, 0x01	; 1
    6876:	0f 30       	cpi	r16, 0x0F	; 15
    6878:	1f 07       	cpc	r17, r31
    687a:	18 f4       	brcc	.+6      	; 0x6882 <AmbientLight::read()+0xcc>
    { isRoomLitFlag = false; }
    687c:	f7 01       	movw	r30, r14
    687e:	15 82       	std	Z+5, r1	; 0x05
    6880:	1c c0       	rjmp	.+56     	; 0x68ba <AmbientLight::read()+0x104>
  else if(al > LDR_THR_HIGH)
    6882:	f1 e0       	ldi	r31, 0x01	; 1
    6884:	01 39       	cpi	r16, 0x91	; 145
    6886:	1f 07       	cpc	r17, r31
    6888:	c0 f0       	brcs	.+48     	; 0x68ba <AmbientLight::read()+0x104>
    {
    // Treat a sharp transition from dark to light as a possible/weak indication of occupancy, eg light flicked on.
    // Ignore trigger at start-up.
    static bool ignoreFirst;
    if(!ignoreFirst) { ignoreFirst = true; }
    688a:	80 91 d1 03 	lds	r24, 0x03D1
    688e:	88 23       	and	r24, r24
    6890:	21 f4       	brne	.+8      	; 0x689a <AmbientLight::read()+0xe4>
    6892:	81 e0       	ldi	r24, 0x01	; 1
    6894:	80 93 d1 03 	sts	0x03D1, r24
    6898:	0d c0       	rjmp	.+26     	; 0x68b4 <AmbientLight::read()+0xfe>
    else if((!isRoomLitFlag) && (rawValue < LDR_THR_LOW)) { Occupancy.markAsPossiblyOccupied(); }
    689a:	f7 01       	movw	r30, r14
    689c:	85 81       	ldd	r24, Z+5	; 0x05
    689e:	88 23       	and	r24, r24
    68a0:	49 f4       	brne	.+18     	; 0x68b4 <AmbientLight::read()+0xfe>
    68a2:	83 81       	ldd	r24, Z+3	; 0x03
    68a4:	94 81       	ldd	r25, Z+4	; 0x04
    68a6:	8e 50       	subi	r24, 0x0E	; 14
    68a8:	91 40       	sbci	r25, 0x01	; 1
    68aa:	20 f4       	brcc	.+8      	; 0x68b4 <AmbientLight::read()+0xfe>
    68ac:	82 e1       	ldi	r24, 0x12	; 18
    68ae:	92 e0       	ldi	r25, 0x02	; 2
    68b0:	0e 94 55 04 	call	0x8aa	; 0x8aa <OccupancyTracker::markAsPossiblyOccupied()>
    isRoomLitFlag = true;
    68b4:	81 e0       	ldi	r24, 0x01	; 1
    68b6:	f7 01       	movw	r30, r14
    68b8:	85 83       	std	Z+5, r24	; 0x05
    }

  // Store new value, raw and normalised.
  // Unconditionbally store raw value.
  rawValue = al;
    68ba:	f7 01       	movw	r30, r14
    68bc:	14 83       	std	Z+4, r17	; 0x04
    68be:	03 83       	std	Z+3, r16	; 0x03
  // Apply a little bit of noise reduction (hysteresis) to the normalised version.
  const uint8_t newValue = (uint8_t)(al >> 2);
    68c0:	c8 01       	movw	r24, r16
    68c2:	96 95       	lsr	r25
    68c4:	87 95       	ror	r24
    68c6:	96 95       	lsr	r25
    68c8:	87 95       	ror	r24
    68ca:	28 2f       	mov	r18, r24
  if(newValue != value)
    68cc:	82 81       	ldd	r24, Z+2	; 0x02
    68ce:	28 17       	cp	r18, r24
    68d0:	a1 f0       	breq	.+40     	; 0x68fa <AmbientLight::read()+0x144>
    {
    const uint16_t oldRawImplied = ((uint16_t)value) << 2;
    68d2:	82 81       	ldd	r24, Z+2	; 0x02
    68d4:	90 e0       	ldi	r25, 0x00	; 0
    68d6:	88 0f       	add	r24, r24
    68d8:	99 1f       	adc	r25, r25
    68da:	88 0f       	add	r24, r24
    68dc:	99 1f       	adc	r25, r25
    const uint16_t absDiff = (oldRawImplied > al) ? (oldRawImplied - al) : (al - oldRawImplied);
    68de:	08 17       	cp	r16, r24
    68e0:	19 07       	cpc	r17, r25
    68e2:	18 f4       	brcc	.+6      	; 0x68ea <AmbientLight::read()+0x134>
    68e4:	80 1b       	sub	r24, r16
    68e6:	91 0b       	sbc	r25, r17
    68e8:	04 c0       	rjmp	.+8      	; 0x68f2 <AmbientLight::read()+0x13c>
    68ea:	a8 01       	movw	r20, r16
    68ec:	48 1b       	sub	r20, r24
    68ee:	59 0b       	sbc	r21, r25
    68f0:	ca 01       	movw	r24, r20
    if(absDiff > 2) { value = newValue; }
    68f2:	03 97       	sbiw	r24, 0x03	; 3
    68f4:	10 f0       	brcs	.+4      	; 0x68fa <AmbientLight::read()+0x144>
    68f6:	f7 01       	movw	r30, r14
    68f8:	22 83       	std	Z+2, r18	; 0x02
  DEBUG_SERIAL_PRINT_FLASHSTRING("isRoomLit: ");
  DEBUG_SERIAL_PRINT(isRoomLitFlag);
  DEBUG_SERIAL_PRINTLN();
#endif

  return(value);
    68fa:	f7 01       	movw	r30, r14
    68fc:	82 81       	ldd	r24, Z+2	; 0x02
  }
    68fe:	28 96       	adiw	r28, 0x08	; 8
    6900:	0f b6       	in	r0, 0x3f	; 63
    6902:	f8 94       	cli
    6904:	de bf       	out	0x3e, r29	; 62
    6906:	0f be       	out	0x3f, r0	; 63
    6908:	cd bf       	out	0x3d, r28	; 61
    690a:	cf 91       	pop	r28
    690c:	df 91       	pop	r29
    690e:	1f 91       	pop	r17
    6910:	0f 91       	pop	r16
    6912:	ff 90       	pop	r15
    6914:	ef 90       	pop	r14
    6916:	08 95       	ret

00006918 <TwoWire::beginTransmission(int)>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    6918:	81 e0       	ldi	r24, 0x01	; 1
    691a:	80 93 17 04 	sts	0x0417, r24
  // set address of targeted slave
  txAddress = address;
    691e:	60 93 f4 03 	sts	0x03F4, r22
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    6922:	10 92 15 04 	sts	0x0415, r1
  txBufferLength = 0;
    6926:	10 92 16 04 	sts	0x0416, r1
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
}
    692a:	08 95       	ret

0000692c <TwoWire::available()>:
}

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
    692c:	20 91 f3 03 	lds	r18, 0x03F3
    6930:	30 e0       	ldi	r19, 0x00	; 0
    6932:	80 91 f2 03 	lds	r24, 0x03F2
    6936:	28 1b       	sub	r18, r24
    6938:	31 09       	sbc	r19, r1
{
  return rxBufferLength - rxBufferIndex;
}
    693a:	c9 01       	movw	r24, r18
    693c:	08 95       	ret

0000693e <TwoWire::read()>:
int TwoWire::read(void)
{
  int value = -1;
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    693e:	40 91 f2 03 	lds	r20, 0x03F2
    6942:	80 91 f3 03 	lds	r24, 0x03F3
    6946:	48 17       	cp	r20, r24
    6948:	18 f0       	brcs	.+6      	; 0x6950 <TwoWire::read()+0x12>
    694a:	2f ef       	ldi	r18, 0xFF	; 255
    694c:	3f ef       	ldi	r19, 0xFF	; 255
    694e:	0a c0       	rjmp	.+20     	; 0x6964 <TwoWire::read()+0x26>
    value = rxBuffer[rxBufferIndex];
    6950:	e4 2f       	mov	r30, r20
    6952:	f0 e0       	ldi	r31, 0x00	; 0
    6954:	ee 52       	subi	r30, 0x2E	; 46
    6956:	fc 4f       	sbci	r31, 0xFC	; 252
    6958:	80 81       	ld	r24, Z
    695a:	28 2f       	mov	r18, r24
    695c:	30 e0       	ldi	r19, 0x00	; 0
    ++rxBufferIndex;
    695e:	4f 5f       	subi	r20, 0xFF	; 255
    6960:	40 93 f2 03 	sts	0x03F2, r20
  }

  return value;
}
    6964:	c9 01       	movw	r24, r18
    6966:	08 95       	ret

00006968 <TwoWire::peek()>:
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
  
  if(rxBufferIndex < rxBufferLength){
    6968:	e0 91 f2 03 	lds	r30, 0x03F2
    696c:	80 91 f3 03 	lds	r24, 0x03F3
    6970:	e8 17       	cp	r30, r24
    6972:	18 f0       	brcs	.+6      	; 0x697a <TwoWire::peek()+0x12>
    6974:	ef ef       	ldi	r30, 0xFF	; 255
    6976:	ff ef       	ldi	r31, 0xFF	; 255
    6978:	06 c0       	rjmp	.+12     	; 0x6986 <TwoWire::peek()+0x1e>
    value = rxBuffer[rxBufferIndex];
    697a:	f0 e0       	ldi	r31, 0x00	; 0
    697c:	ee 52       	subi	r30, 0x2E	; 46
    697e:	fc 4f       	sbci	r31, 0xFC	; 252
    6980:	80 81       	ld	r24, Z
    6982:	e8 2f       	mov	r30, r24
    6984:	f0 e0       	ldi	r31, 0x00	; 0
  }

  return value;
}
    6986:	cf 01       	movw	r24, r30
    6988:	08 95       	ret

0000698a <TwoWire::flush()>:

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
    698a:	08 95       	ret

0000698c <global constructors keyed to _ZN7TwoWire8rxBufferE>:
    698c:	10 92 1b 04 	sts	0x041B, r1
    6990:	10 92 1a 04 	sts	0x041A, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    6994:	88 ee       	ldi	r24, 0xE8	; 232
    6996:	93 e0       	ldi	r25, 0x03	; 3
    6998:	a0 e0       	ldi	r26, 0x00	; 0
    699a:	b0 e0       	ldi	r27, 0x00	; 0
    699c:	80 93 1c 04 	sts	0x041C, r24
    69a0:	90 93 1d 04 	sts	0x041D, r25
    69a4:	a0 93 1e 04 	sts	0x041E, r26
    69a8:	b0 93 1f 04 	sts	0x041F, r27
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    69ac:	86 ef       	ldi	r24, 0xF6	; 246
    69ae:	91 e0       	ldi	r25, 0x01	; 1
    69b0:	90 93 19 04 	sts	0x0419, r25
    69b4:	80 93 18 04 	sts	0x0418, r24
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    69b8:	08 95       	ret

000069ba <TwoWire::write(unsigned char const*, unsigned int)>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
    69ba:	cf 92       	push	r12
    69bc:	df 92       	push	r13
    69be:	ef 92       	push	r14
    69c0:	ff 92       	push	r15
    69c2:	0f 93       	push	r16
    69c4:	1f 93       	push	r17
    69c6:	cf 93       	push	r28
    69c8:	df 93       	push	r29
    69ca:	7c 01       	movw	r14, r24
    69cc:	6b 01       	movw	r12, r22
    69ce:	8a 01       	movw	r16, r20
{
  if(transmitting){
    69d0:	80 91 17 04 	lds	r24, 0x0417
    69d4:	88 23       	and	r24, r24
    69d6:	a1 f0       	breq	.+40     	; 0x6a00 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
    69d8:	c0 e0       	ldi	r28, 0x00	; 0
    69da:	d0 e0       	ldi	r29, 0x00	; 0
    69dc:	0d c0       	rjmp	.+26     	; 0x69f8 <TwoWire::write(unsigned char const*, unsigned int)+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
      write(data[i]);
    69de:	d7 01       	movw	r26, r14
    69e0:	ed 91       	ld	r30, X+
    69e2:	fc 91       	ld	r31, X
    69e4:	d6 01       	movw	r26, r12
    69e6:	ac 0f       	add	r26, r28
    69e8:	bd 1f       	adc	r27, r29
    69ea:	01 90       	ld	r0, Z+
    69ec:	f0 81       	ld	r31, Z
    69ee:	e0 2d       	mov	r30, r0
    69f0:	c7 01       	movw	r24, r14
    69f2:	6c 91       	ld	r22, X
    69f4:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    69f6:	21 96       	adiw	r28, 0x01	; 1
    69f8:	c0 17       	cp	r28, r16
    69fa:	d1 07       	cpc	r29, r17
    69fc:	80 f3       	brcs	.-32     	; 0x69de <TwoWire::write(unsigned char const*, unsigned int)+0x24>
    69fe:	04 c0       	rjmp	.+8      	; 0x6a08 <TwoWire::write(unsigned char const*, unsigned int)+0x4e>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    6a00:	cb 01       	movw	r24, r22
    6a02:	64 2f       	mov	r22, r20
    6a04:	0e 94 0f 36 	call	0x6c1e	; 0x6c1e <twi_transmit>
  }
  return quantity;
}
    6a08:	c8 01       	movw	r24, r16
    6a0a:	df 91       	pop	r29
    6a0c:	cf 91       	pop	r28
    6a0e:	1f 91       	pop	r17
    6a10:	0f 91       	pop	r16
    6a12:	ff 90       	pop	r15
    6a14:	ef 90       	pop	r14
    6a16:	df 90       	pop	r13
    6a18:	cf 90       	pop	r12
    6a1a:	08 95       	ret

00006a1c <TwoWire::write(unsigned char)>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
    6a1c:	df 93       	push	r29
    6a1e:	cf 93       	push	r28
    6a20:	0f 92       	push	r0
    6a22:	cd b7       	in	r28, 0x3d	; 61
    6a24:	de b7       	in	r29, 0x3e	; 62
    6a26:	fc 01       	movw	r30, r24
    6a28:	69 83       	std	Y+1, r22	; 0x01
{
  if(transmitting){
    6a2a:	80 91 17 04 	lds	r24, 0x0417
    6a2e:	88 23       	and	r24, r24
    6a30:	c9 f0       	breq	.+50     	; 0x6a64 <TwoWire::write(unsigned char)+0x48>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    6a32:	80 91 16 04 	lds	r24, 0x0416
    6a36:	80 32       	cpi	r24, 0x20	; 32
    6a38:	38 f0       	brcs	.+14     	; 0x6a48 <TwoWire::write(unsigned char)+0x2c>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    6a3a:	81 e0       	ldi	r24, 0x01	; 1
    6a3c:	90 e0       	ldi	r25, 0x00	; 0
    6a3e:	93 83       	std	Z+3, r25	; 0x03
    6a40:	82 83       	std	Z+2, r24	; 0x02
    6a42:	20 e0       	ldi	r18, 0x00	; 0
    6a44:	30 e0       	ldi	r19, 0x00	; 0
    6a46:	15 c0       	rjmp	.+42     	; 0x6a72 <TwoWire::write(unsigned char)+0x56>
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    6a48:	80 91 15 04 	lds	r24, 0x0415
    6a4c:	e8 2f       	mov	r30, r24
    6a4e:	f0 e0       	ldi	r31, 0x00	; 0
    6a50:	eb 50       	subi	r30, 0x0B	; 11
    6a52:	fc 4f       	sbci	r31, 0xFC	; 252
    6a54:	99 81       	ldd	r25, Y+1	; 0x01
    6a56:	90 83       	st	Z, r25
    ++txBufferIndex;
    6a58:	8f 5f       	subi	r24, 0xFF	; 255
    6a5a:	80 93 15 04 	sts	0x0415, r24
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    6a5e:	80 93 16 04 	sts	0x0416, r24
    6a62:	05 c0       	rjmp	.+10     	; 0x6a6e <TwoWire::write(unsigned char)+0x52>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    6a64:	ce 01       	movw	r24, r28
    6a66:	01 96       	adiw	r24, 0x01	; 1
    6a68:	61 e0       	ldi	r22, 0x01	; 1
    6a6a:	0e 94 0f 36 	call	0x6c1e	; 0x6c1e <twi_transmit>
    6a6e:	21 e0       	ldi	r18, 0x01	; 1
    6a70:	30 e0       	ldi	r19, 0x00	; 0
  }
  return 1;
}
    6a72:	c9 01       	movw	r24, r18
    6a74:	0f 90       	pop	r0
    6a76:	cf 91       	pop	r28
    6a78:	df 91       	pop	r29
    6a7a:	08 95       	ret

00006a7c <TwoWire::endTransmission(unsigned char)>:
//	the bus tenure has been properly ended with a STOP. It
//	is very possible to leave the bus in a hung state if
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
    6a7c:	0f 93       	push	r16
    6a7e:	06 2f       	mov	r16, r22
{
  // transmit buffer (blocking)
  int8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    6a80:	80 91 f4 03 	lds	r24, 0x03F4
    6a84:	65 ef       	ldi	r22, 0xF5	; 245
    6a86:	73 e0       	ldi	r23, 0x03	; 3
    6a88:	40 91 16 04 	lds	r20, 0x0416
    6a8c:	21 e0       	ldi	r18, 0x01	; 1
    6a8e:	0e 94 ba 35 	call	0x6b74	; 0x6b74 <twi_writeTo>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    6a92:	10 92 15 04 	sts	0x0415, r1
  txBufferLength = 0;
    6a96:	10 92 16 04 	sts	0x0416, r1
  // indicate that we are done transmitting
  transmitting = 0;
    6a9a:	10 92 17 04 	sts	0x0417, r1
  return ret;
}
    6a9e:	0f 91       	pop	r16
    6aa0:	08 95       	ret

00006aa2 <TwoWire::endTransmission()>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
    6aa2:	61 e0       	ldi	r22, 0x01	; 1
    6aa4:	0e 94 3e 35 	call	0x6a7c	; 0x6a7c <TwoWire::endTransmission(unsigned char)>
}
    6aa8:	08 95       	ret

00006aaa <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    quantity = BUFFER_LENGTH;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
    6aaa:	41 32       	cpi	r20, 0x21	; 33
    6aac:	08 f0       	brcs	.+2      	; 0x6ab0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x6>
    6aae:	40 e2       	ldi	r20, 0x20	; 32
    6ab0:	86 2f       	mov	r24, r22
    6ab2:	62 ed       	ldi	r22, 0xD2	; 210
    6ab4:	73 e0       	ldi	r23, 0x03	; 3
    6ab6:	0e 94 71 35 	call	0x6ae2	; 0x6ae2 <twi_readFrom>
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    6aba:	10 92 f2 03 	sts	0x03F2, r1
  rxBufferLength = read;
    6abe:	80 93 f3 03 	sts	0x03F3, r24

  return read;
}
    6ac2:	08 95       	ret

00006ac4 <TwoWire::requestFrom(int, int)>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    6ac4:	21 e0       	ldi	r18, 0x01	; 1
    6ac6:	0e 94 55 35 	call	0x6aaa	; 0x6aaa <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
}
    6aca:	08 95       	ret

00006acc <TwoWire::begin()>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    6acc:	10 92 f2 03 	sts	0x03F2, r1
  rxBufferLength = 0;
    6ad0:	10 92 f3 03 	sts	0x03F3, r1

  txBufferIndex = 0;
    6ad4:	10 92 15 04 	sts	0x0415, r1
  txBufferLength = 0;
    6ad8:	10 92 16 04 	sts	0x0416, r1

  twi_init();
    6adc:	0e 94 bb 37 	call	0x6f76	; 0x6f76 <twi_init>
}
    6ae0:	08 95       	ret

00006ae2 <twi_readFrom>:
 *          length: number of bytes to read into array
 *          sendStop: Boolean indicating whether to send a stop at the end
 * Output   number of bytes read
 */
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
    6ae2:	38 2f       	mov	r19, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    6ae4:	41 32       	cpi	r20, 0x21	; 33
    6ae6:	10 f0       	brcs	.+4      	; 0x6aec <twi_readFrom+0xa>
    6ae8:	40 e0       	ldi	r20, 0x00	; 0
    6aea:	42 c0       	rjmp	.+132    	; 0x6b70 <twi_readFrom+0x8e>
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    6aec:	80 91 24 04 	lds	r24, 0x0424
    6af0:	88 23       	and	r24, r24
    6af2:	e1 f7       	brne	.-8      	; 0x6aec <twi_readFrom+0xa>
    continue;
  }
  twi_state = TWI_MRX;
    6af4:	91 e0       	ldi	r25, 0x01	; 1
    6af6:	90 93 24 04 	sts	0x0424, r25
  twi_sendStop = sendStop;
    6afa:	20 93 26 04 	sts	0x0426, r18
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    6afe:	8f ef       	ldi	r24, 0xFF	; 255
    6b00:	80 93 91 04 	sts	0x0491, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    6b04:	10 92 4c 04 	sts	0x044C, r1
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    6b08:	41 50       	subi	r20, 0x01	; 1
    6b0a:	40 93 4d 04 	sts	0x044D, r20
    6b0e:	4f 5f       	subi	r20, 0xFF	; 255
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    6b10:	90 93 25 04 	sts	0x0425, r25
  twi_slarw |= address << 1;
    6b14:	80 91 25 04 	lds	r24, 0x0425
    6b18:	33 0f       	add	r19, r19
    6b1a:	83 2b       	or	r24, r19
    6b1c:	80 93 25 04 	sts	0x0425, r24

  if (true == twi_inRepStart) {
    6b20:	80 91 27 04 	lds	r24, 0x0427
    6b24:	81 30       	cpi	r24, 0x01	; 1
    6b26:	41 f4       	brne	.+16     	; 0x6b38 <twi_readFrom+0x56>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    6b28:	10 92 27 04 	sts	0x0427, r1
    TWDR = twi_slarw;
    6b2c:	80 91 25 04 	lds	r24, 0x0425
    6b30:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    6b34:	85 ec       	ldi	r24, 0xC5	; 197
    6b36:	01 c0       	rjmp	.+2      	; 0x6b3a <twi_readFrom+0x58>
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    6b38:	85 ee       	ldi	r24, 0xE5	; 229
    6b3a:	80 93 bc 00 	sts	0x00BC, r24

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    6b3e:	80 91 24 04 	lds	r24, 0x0424
    6b42:	81 30       	cpi	r24, 0x01	; 1
    6b44:	e1 f3       	breq	.-8      	; 0x6b3e <twi_readFrom+0x5c>
    continue;
  }

  if (twi_masterBufferIndex < length)
    6b46:	80 91 4c 04 	lds	r24, 0x044C
    6b4a:	84 17       	cp	r24, r20
    6b4c:	10 f4       	brcc	.+4      	; 0x6b52 <twi_readFrom+0x70>
    length = twi_masterBufferIndex;
    6b4e:	40 91 4c 04 	lds	r20, 0x044C
    6b52:	20 e0       	ldi	r18, 0x00	; 0
    6b54:	30 e0       	ldi	r19, 0x00	; 0
    6b56:	0a c0       	rjmp	.+20     	; 0x6b6c <twi_readFrom+0x8a>

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
    6b58:	fb 01       	movw	r30, r22
    6b5a:	e2 0f       	add	r30, r18
    6b5c:	f3 1f       	adc	r31, r19
    6b5e:	d9 01       	movw	r26, r18
    6b60:	a4 5d       	subi	r26, 0xD4	; 212
    6b62:	bb 4f       	sbci	r27, 0xFB	; 251
    6b64:	8c 91       	ld	r24, X
    6b66:	80 83       	st	Z, r24
    6b68:	2f 5f       	subi	r18, 0xFF	; 255
    6b6a:	3f 4f       	sbci	r19, 0xFF	; 255

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    6b6c:	24 17       	cp	r18, r20
    6b6e:	a0 f3       	brcs	.-24     	; 0x6b58 <twi_readFrom+0x76>
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
}
    6b70:	84 2f       	mov	r24, r20
    6b72:	08 95       	ret

00006b74 <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
    6b74:	0f 93       	push	r16
    6b76:	1f 93       	push	r17
    6b78:	58 2f       	mov	r21, r24
    6b7a:	12 2f       	mov	r17, r18
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    6b7c:	41 32       	cpi	r20, 0x21	; 33
    6b7e:	10 f0       	brcs	.+4      	; 0x6b84 <twi_writeTo+0x10>
    6b80:	81 e0       	ldi	r24, 0x01	; 1
    6b82:	4a c0       	rjmp	.+148    	; 0x6c18 <twi_writeTo+0xa4>
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    6b84:	80 91 24 04 	lds	r24, 0x0424
    6b88:	88 23       	and	r24, r24
    6b8a:	e1 f7       	brne	.-8      	; 0x6b84 <twi_writeTo+0x10>
    continue;
  }
  twi_state = TWI_MTX;
    6b8c:	82 e0       	ldi	r24, 0x02	; 2
    6b8e:	80 93 24 04 	sts	0x0424, r24
  twi_sendStop = sendStop;
    6b92:	00 93 26 04 	sts	0x0426, r16
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    6b96:	8f ef       	ldi	r24, 0xFF	; 255
    6b98:	80 93 91 04 	sts	0x0491, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    6b9c:	10 92 4c 04 	sts	0x044C, r1
  twi_masterBufferLength = length;
    6ba0:	40 93 4d 04 	sts	0x044D, r20
    6ba4:	ac e2       	ldi	r26, 0x2C	; 44
    6ba6:	b4 e0       	ldi	r27, 0x04	; 4
    6ba8:	fb 01       	movw	r30, r22
    6baa:	02 c0       	rjmp	.+4      	; 0x6bb0 <twi_writeTo+0x3c>
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
    6bac:	81 91       	ld	r24, Z+
    6bae:	8d 93       	st	X+, r24
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    6bb0:	8e 2f       	mov	r24, r30
    6bb2:	86 1b       	sub	r24, r22
    6bb4:	84 17       	cp	r24, r20
    6bb6:	d0 f3       	brcs	.-12     	; 0x6bac <twi_writeTo+0x38>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    6bb8:	10 92 25 04 	sts	0x0425, r1
  twi_slarw |= address << 1;
    6bbc:	80 91 25 04 	lds	r24, 0x0425
    6bc0:	55 0f       	add	r21, r21
    6bc2:	85 2b       	or	r24, r21
    6bc4:	80 93 25 04 	sts	0x0425, r24
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    6bc8:	80 91 27 04 	lds	r24, 0x0427
    6bcc:	81 30       	cpi	r24, 0x01	; 1
    6bce:	41 f4       	brne	.+16     	; 0x6be0 <twi_writeTo+0x6c>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    6bd0:	10 92 27 04 	sts	0x0427, r1
    TWDR = twi_slarw;				
    6bd4:	80 91 25 04 	lds	r24, 0x0425
    6bd8:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    6bdc:	85 ec       	ldi	r24, 0xC5	; 197
    6bde:	01 c0       	rjmp	.+2      	; 0x6be2 <twi_writeTo+0x6e>
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
    6be0:	85 ee       	ldi	r24, 0xE5	; 229
    6be2:	80 93 bc 00 	sts	0x00BC, r24

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    6be6:	11 23       	and	r17, r17
    6be8:	21 f0       	breq	.+8      	; 0x6bf2 <twi_writeTo+0x7e>
    6bea:	80 91 24 04 	lds	r24, 0x0424
    6bee:	82 30       	cpi	r24, 0x02	; 2
    6bf0:	e1 f3       	breq	.-8      	; 0x6bea <twi_writeTo+0x76>
    continue;
  }
  
  if (twi_error == 0xFF)
    6bf2:	80 91 91 04 	lds	r24, 0x0491
    6bf6:	8f 3f       	cpi	r24, 0xFF	; 255
    6bf8:	11 f4       	brne	.+4      	; 0x6bfe <twi_writeTo+0x8a>
    6bfa:	80 e0       	ldi	r24, 0x00	; 0
    6bfc:	0d c0       	rjmp	.+26     	; 0x6c18 <twi_writeTo+0xa4>
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    6bfe:	80 91 91 04 	lds	r24, 0x0491
    6c02:	80 32       	cpi	r24, 0x20	; 32
    6c04:	11 f4       	brne	.+4      	; 0x6c0a <twi_writeTo+0x96>
    6c06:	82 e0       	ldi	r24, 0x02	; 2
    6c08:	07 c0       	rjmp	.+14     	; 0x6c18 <twi_writeTo+0xa4>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    6c0a:	80 91 91 04 	lds	r24, 0x0491
    6c0e:	80 33       	cpi	r24, 0x30	; 48
    6c10:	11 f0       	breq	.+4      	; 0x6c16 <twi_writeTo+0xa2>
    6c12:	84 e0       	ldi	r24, 0x04	; 4
    6c14:	01 c0       	rjmp	.+2      	; 0x6c18 <twi_writeTo+0xa4>
    6c16:	83 e0       	ldi	r24, 0x03	; 3
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
}
    6c18:	1f 91       	pop	r17
    6c1a:	0f 91       	pop	r16
    6c1c:	08 95       	ret

00006c1e <twi_transmit>:
 * Output   1 length too long for buffer
 *          2 not slave transmitter
 *          0 ok
 */
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
    6c1e:	48 2f       	mov	r20, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    6c20:	61 32       	cpi	r22, 0x21	; 33
    6c22:	10 f0       	brcs	.+4      	; 0x6c28 <twi_transmit+0xa>
    6c24:	81 e0       	ldi	r24, 0x01	; 1
    6c26:	08 95       	ret
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    6c28:	80 91 24 04 	lds	r24, 0x0424
    6c2c:	84 30       	cpi	r24, 0x04	; 4
    6c2e:	11 f0       	breq	.+4      	; 0x6c34 <twi_transmit+0x16>
    6c30:	82 e0       	ldi	r24, 0x02	; 2
    6c32:	08 95       	ret
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
    6c34:	60 93 6f 04 	sts	0x046F, r22
    6c38:	ae e4       	ldi	r26, 0x4E	; 78
    6c3a:	b4 e0       	ldi	r27, 0x04	; 4
    6c3c:	84 2f       	mov	r24, r20
    6c3e:	9c 01       	movw	r18, r24
    6c40:	f9 01       	movw	r30, r18
    6c42:	02 c0       	rjmp	.+4      	; 0x6c48 <twi_transmit+0x2a>
  for(i = 0; i < length; ++i){
    twi_txBuffer[i] = data[i];
    6c44:	81 91       	ld	r24, Z+
    6c46:	8d 93       	st	X+, r24
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
    6c48:	8e 2f       	mov	r24, r30
    6c4a:	84 1b       	sub	r24, r20
    6c4c:	86 17       	cp	r24, r22
    6c4e:	d0 f3       	brcs	.-12     	; 0x6c44 <twi_transmit+0x26>
    6c50:	80 e0       	ldi	r24, 0x00	; 0
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
}
    6c52:	08 95       	ret

00006c54 <__vector_24>:
  // update twi state
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
    6c54:	1f 92       	push	r1
    6c56:	0f 92       	push	r0
    6c58:	0f b6       	in	r0, 0x3f	; 63
    6c5a:	0f 92       	push	r0
    6c5c:	11 24       	eor	r1, r1
    6c5e:	2f 93       	push	r18
    6c60:	3f 93       	push	r19
    6c62:	4f 93       	push	r20
    6c64:	5f 93       	push	r21
    6c66:	6f 93       	push	r22
    6c68:	7f 93       	push	r23
    6c6a:	8f 93       	push	r24
    6c6c:	9f 93       	push	r25
    6c6e:	af 93       	push	r26
    6c70:	bf 93       	push	r27
    6c72:	ef 93       	push	r30
    6c74:	ff 93       	push	r31
  switch(TW_STATUS){
    6c76:	80 91 b9 00 	lds	r24, 0x00B9
    6c7a:	90 e0       	ldi	r25, 0x00	; 0
    6c7c:	88 7f       	andi	r24, 0xF8	; 248
    6c7e:	90 70       	andi	r25, 0x00	; 0
    6c80:	80 36       	cpi	r24, 0x60	; 96
    6c82:	91 05       	cpc	r25, r1
    6c84:	09 f4       	brne	.+2      	; 0x6c88 <__vector_24+0x34>
    6c86:	f2 c0       	rjmp	.+484    	; 0x6e6c <__vector_24+0x218>
    6c88:	81 36       	cpi	r24, 0x61	; 97
    6c8a:	91 05       	cpc	r25, r1
    6c8c:	cc f5       	brge	.+114    	; 0x6d00 <__vector_24+0xac>
    6c8e:	88 32       	cpi	r24, 0x28	; 40
    6c90:	91 05       	cpc	r25, r1
    6c92:	09 f4       	brne	.+2      	; 0x6c96 <__vector_24+0x42>
    6c94:	7b c0       	rjmp	.+246    	; 0x6d8c <__vector_24+0x138>
    6c96:	89 32       	cpi	r24, 0x29	; 41
    6c98:	91 05       	cpc	r25, r1
    6c9a:	b4 f4       	brge	.+44     	; 0x6cc8 <__vector_24+0x74>
    6c9c:	80 31       	cpi	r24, 0x10	; 16
    6c9e:	91 05       	cpc	r25, r1
    6ca0:	09 f4       	brne	.+2      	; 0x6ca4 <__vector_24+0x50>
    6ca2:	6f c0       	rjmp	.+222    	; 0x6d82 <__vector_24+0x12e>
    6ca4:	81 31       	cpi	r24, 0x11	; 17
    6ca6:	91 05       	cpc	r25, r1
    6ca8:	3c f4       	brge	.+14     	; 0x6cb8 <__vector_24+0x64>
    6caa:	00 97       	sbiw	r24, 0x00	; 0
    6cac:	09 f4       	brne	.+2      	; 0x6cb0 <__vector_24+0x5c>
    6cae:	47 c1       	rjmp	.+654    	; 0x6f3e <__vector_24+0x2ea>
    6cb0:	08 97       	sbiw	r24, 0x08	; 8
    6cb2:	09 f0       	breq	.+2      	; 0x6cb6 <__vector_24+0x62>
    6cb4:	4f c1       	rjmp	.+670    	; 0x6f54 <__vector_24+0x300>
    6cb6:	65 c0       	rjmp	.+202    	; 0x6d82 <__vector_24+0x12e>
    6cb8:	88 31       	cpi	r24, 0x18	; 24
    6cba:	91 05       	cpc	r25, r1
    6cbc:	09 f4       	brne	.+2      	; 0x6cc0 <__vector_24+0x6c>
    6cbe:	66 c0       	rjmp	.+204    	; 0x6d8c <__vector_24+0x138>
    6cc0:	80 97       	sbiw	r24, 0x20	; 32
    6cc2:	09 f0       	breq	.+2      	; 0x6cc6 <__vector_24+0x72>
    6cc4:	47 c1       	rjmp	.+654    	; 0x6f54 <__vector_24+0x300>
    6cc6:	82 c0       	rjmp	.+260    	; 0x6dcc <__vector_24+0x178>
    6cc8:	80 34       	cpi	r24, 0x40	; 64
    6cca:	91 05       	cpc	r25, r1
    6ccc:	09 f4       	brne	.+2      	; 0x6cd0 <__vector_24+0x7c>
    6cce:	a4 c0       	rjmp	.+328    	; 0x6e18 <__vector_24+0x1c4>
    6cd0:	81 34       	cpi	r24, 0x41	; 65
    6cd2:	91 05       	cpc	r25, r1
    6cd4:	44 f4       	brge	.+16     	; 0x6ce6 <__vector_24+0x92>
    6cd6:	80 33       	cpi	r24, 0x30	; 48
    6cd8:	91 05       	cpc	r25, r1
    6cda:	09 f4       	brne	.+2      	; 0x6cde <__vector_24+0x8a>
    6cdc:	82 c0       	rjmp	.+260    	; 0x6de2 <__vector_24+0x18e>
    6cde:	c8 97       	sbiw	r24, 0x38	; 56
    6ce0:	09 f0       	breq	.+2      	; 0x6ce4 <__vector_24+0x90>
    6ce2:	38 c1       	rjmp	.+624    	; 0x6f54 <__vector_24+0x300>
    6ce4:	89 c0       	rjmp	.+274    	; 0x6df8 <__vector_24+0x1a4>
    6ce6:	80 35       	cpi	r24, 0x50	; 80
    6ce8:	91 05       	cpc	r25, r1
    6cea:	09 f4       	brne	.+2      	; 0x6cee <__vector_24+0x9a>
    6cec:	89 c0       	rjmp	.+274    	; 0x6e00 <__vector_24+0x1ac>
    6cee:	88 35       	cpi	r24, 0x58	; 88
    6cf0:	91 05       	cpc	r25, r1
    6cf2:	09 f4       	brne	.+2      	; 0x6cf6 <__vector_24+0xa2>
    6cf4:	96 c0       	rjmp	.+300    	; 0x6e22 <__vector_24+0x1ce>
    6cf6:	88 34       	cpi	r24, 0x48	; 72
    6cf8:	91 05       	cpc	r25, r1
    6cfa:	09 f0       	breq	.+2      	; 0x6cfe <__vector_24+0xaa>
    6cfc:	2b c1       	rjmp	.+598    	; 0x6f54 <__vector_24+0x300>
    6cfe:	ae c0       	rjmp	.+348    	; 0x6e5c <__vector_24+0x208>
    6d00:	88 39       	cpi	r24, 0x98	; 152
    6d02:	91 05       	cpc	r25, r1
    6d04:	09 f4       	brne	.+2      	; 0x6d08 <__vector_24+0xb4>
    6d06:	13 c1       	rjmp	.+550    	; 0x6f2e <__vector_24+0x2da>
    6d08:	89 39       	cpi	r24, 0x99	; 153
    6d0a:	91 05       	cpc	r25, r1
    6d0c:	ec f4       	brge	.+58     	; 0x6d48 <__vector_24+0xf4>
    6d0e:	88 37       	cpi	r24, 0x78	; 120
    6d10:	91 05       	cpc	r25, r1
    6d12:	09 f4       	brne	.+2      	; 0x6d16 <__vector_24+0xc2>
    6d14:	ab c0       	rjmp	.+342    	; 0x6e6c <__vector_24+0x218>
    6d16:	89 37       	cpi	r24, 0x79	; 121
    6d18:	91 05       	cpc	r25, r1
    6d1a:	4c f4       	brge	.+18     	; 0x6d2e <__vector_24+0xda>
    6d1c:	88 36       	cpi	r24, 0x68	; 104
    6d1e:	91 05       	cpc	r25, r1
    6d20:	09 f4       	brne	.+2      	; 0x6d24 <__vector_24+0xd0>
    6d22:	a4 c0       	rjmp	.+328    	; 0x6e6c <__vector_24+0x218>
    6d24:	80 37       	cpi	r24, 0x70	; 112
    6d26:	91 05       	cpc	r25, r1
    6d28:	09 f0       	breq	.+2      	; 0x6d2c <__vector_24+0xd8>
    6d2a:	14 c1       	rjmp	.+552    	; 0x6f54 <__vector_24+0x300>
    6d2c:	9f c0       	rjmp	.+318    	; 0x6e6c <__vector_24+0x218>
    6d2e:	88 38       	cpi	r24, 0x88	; 136
    6d30:	91 05       	cpc	r25, r1
    6d32:	09 f4       	brne	.+2      	; 0x6d36 <__vector_24+0xe2>
    6d34:	fc c0       	rjmp	.+504    	; 0x6f2e <__vector_24+0x2da>
    6d36:	80 39       	cpi	r24, 0x90	; 144
    6d38:	91 05       	cpc	r25, r1
    6d3a:	09 f4       	brne	.+2      	; 0x6d3e <__vector_24+0xea>
    6d3c:	9d c0       	rjmp	.+314    	; 0x6e78 <__vector_24+0x224>
    6d3e:	80 38       	cpi	r24, 0x80	; 128
    6d40:	91 05       	cpc	r25, r1
    6d42:	09 f0       	breq	.+2      	; 0x6d46 <__vector_24+0xf2>
    6d44:	07 c1       	rjmp	.+526    	; 0x6f54 <__vector_24+0x300>
    6d46:	98 c0       	rjmp	.+304    	; 0x6e78 <__vector_24+0x224>
    6d48:	80 3b       	cpi	r24, 0xB0	; 176
    6d4a:	91 05       	cpc	r25, r1
    6d4c:	09 f4       	brne	.+2      	; 0x6d50 <__vector_24+0xfc>
    6d4e:	c6 c0       	rjmp	.+396    	; 0x6edc <__vector_24+0x288>
    6d50:	81 3b       	cpi	r24, 0xB1	; 177
    6d52:	91 05       	cpc	r25, r1
    6d54:	4c f4       	brge	.+18     	; 0x6d68 <__vector_24+0x114>
    6d56:	80 3a       	cpi	r24, 0xA0	; 160
    6d58:	91 05       	cpc	r25, r1
    6d5a:	09 f4       	brne	.+2      	; 0x6d5e <__vector_24+0x10a>
    6d5c:	9f c0       	rjmp	.+318    	; 0x6e9c <__vector_24+0x248>
    6d5e:	88 3a       	cpi	r24, 0xA8	; 168
    6d60:	91 05       	cpc	r25, r1
    6d62:	09 f0       	breq	.+2      	; 0x6d66 <__vector_24+0x112>
    6d64:	f7 c0       	rjmp	.+494    	; 0x6f54 <__vector_24+0x300>
    6d66:	ba c0       	rjmp	.+372    	; 0x6edc <__vector_24+0x288>
    6d68:	80 3c       	cpi	r24, 0xC0	; 192
    6d6a:	91 05       	cpc	r25, r1
    6d6c:	09 f4       	brne	.+2      	; 0x6d70 <__vector_24+0x11c>
    6d6e:	e3 c0       	rjmp	.+454    	; 0x6f36 <__vector_24+0x2e2>
    6d70:	88 3c       	cpi	r24, 0xC8	; 200
    6d72:	91 05       	cpc	r25, r1
    6d74:	09 f4       	brne	.+2      	; 0x6d78 <__vector_24+0x124>
    6d76:	df c0       	rjmp	.+446    	; 0x6f36 <__vector_24+0x2e2>
    6d78:	88 3b       	cpi	r24, 0xB8	; 184
    6d7a:	91 05       	cpc	r25, r1
    6d7c:	09 f0       	breq	.+2      	; 0x6d80 <__vector_24+0x12c>
    6d7e:	ea c0       	rjmp	.+468    	; 0x6f54 <__vector_24+0x300>
    6d80:	c2 c0       	rjmp	.+388    	; 0x6f06 <__vector_24+0x2b2>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    6d82:	80 91 25 04 	lds	r24, 0x0425
    6d86:	80 93 bb 00 	sts	0x00BB, r24
    6d8a:	cf c0       	rjmp	.+414    	; 0x6f2a <__vector_24+0x2d6>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    6d8c:	90 91 4c 04 	lds	r25, 0x044C
    6d90:	80 91 4d 04 	lds	r24, 0x044D
    6d94:	98 17       	cp	r25, r24
    6d96:	68 f4       	brcc	.+26     	; 0x6db2 <__vector_24+0x15e>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    6d98:	90 91 4c 04 	lds	r25, 0x044C
    6d9c:	e9 2f       	mov	r30, r25
    6d9e:	f0 e0       	ldi	r31, 0x00	; 0
    6da0:	e4 5d       	subi	r30, 0xD4	; 212
    6da2:	fb 4f       	sbci	r31, 0xFB	; 251
    6da4:	80 81       	ld	r24, Z
    6da6:	80 93 bb 00 	sts	0x00BB, r24
    6daa:	9f 5f       	subi	r25, 0xFF	; 255
    6dac:	90 93 4c 04 	sts	0x044C, r25
    6db0:	bc c0       	rjmp	.+376    	; 0x6f2a <__vector_24+0x2d6>
        twi_reply(1);
      }else{
	if (twi_sendStop)
    6db2:	80 91 26 04 	lds	r24, 0x0426
    6db6:	88 23       	and	r24, r24
    6db8:	09 f4       	brne	.+2      	; 0x6dbc <__vector_24+0x168>
    6dba:	4b c0       	rjmp	.+150    	; 0x6e52 <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    6dbc:	85 ed       	ldi	r24, 0xD5	; 213
    6dbe:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    6dc2:	80 91 bc 00 	lds	r24, 0x00BC
    6dc6:	84 fd       	sbrc	r24, 4
    6dc8:	fc cf       	rjmp	.-8      	; 0x6dc2 <__vector_24+0x16e>
    6dca:	c2 c0       	rjmp	.+388    	; 0x6f50 <__vector_24+0x2fc>
	  twi_state = TWI_READY;
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    6dcc:	80 e2       	ldi	r24, 0x20	; 32
    6dce:	80 93 91 04 	sts	0x0491, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    6dd2:	85 ed       	ldi	r24, 0xD5	; 213
    6dd4:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    6dd8:	80 91 bc 00 	lds	r24, 0x00BC
    6ddc:	84 fd       	sbrc	r24, 4
    6dde:	fc cf       	rjmp	.-8      	; 0x6dd8 <__vector_24+0x184>
    6de0:	b7 c0       	rjmp	.+366    	; 0x6f50 <__vector_24+0x2fc>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    6de2:	80 e3       	ldi	r24, 0x30	; 48
    6de4:	80 93 91 04 	sts	0x0491, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    6de8:	85 ed       	ldi	r24, 0xD5	; 213
    6dea:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    6dee:	80 91 bc 00 	lds	r24, 0x00BC
    6df2:	84 fd       	sbrc	r24, 4
    6df4:	fc cf       	rjmp	.-8      	; 0x6dee <__vector_24+0x19a>
    6df6:	ac c0       	rjmp	.+344    	; 0x6f50 <__vector_24+0x2fc>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    6df8:	88 e3       	ldi	r24, 0x38	; 56
    6dfa:	80 93 91 04 	sts	0x0491, r24
    6dfe:	9b c0       	rjmp	.+310    	; 0x6f36 <__vector_24+0x2e2>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    6e00:	80 91 4c 04 	lds	r24, 0x044C
    6e04:	90 91 bb 00 	lds	r25, 0x00BB
    6e08:	e8 2f       	mov	r30, r24
    6e0a:	f0 e0       	ldi	r31, 0x00	; 0
    6e0c:	e4 5d       	subi	r30, 0xD4	; 212
    6e0e:	fb 4f       	sbci	r31, 0xFB	; 251
    6e10:	90 83       	st	Z, r25
    6e12:	8f 5f       	subi	r24, 0xFF	; 255
    6e14:	80 93 4c 04 	sts	0x044C, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    6e18:	90 91 4c 04 	lds	r25, 0x044C
    6e1c:	80 91 4d 04 	lds	r24, 0x044D
    6e20:	82 c0       	rjmp	.+260    	; 0x6f26 <__vector_24+0x2d2>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    6e22:	80 91 4c 04 	lds	r24, 0x044C
    6e26:	90 91 bb 00 	lds	r25, 0x00BB
    6e2a:	e8 2f       	mov	r30, r24
    6e2c:	f0 e0       	ldi	r31, 0x00	; 0
    6e2e:	e4 5d       	subi	r30, 0xD4	; 212
    6e30:	fb 4f       	sbci	r31, 0xFB	; 251
    6e32:	90 83       	st	Z, r25
    6e34:	8f 5f       	subi	r24, 0xFF	; 255
    6e36:	80 93 4c 04 	sts	0x044C, r24
	if (twi_sendStop)
    6e3a:	80 91 26 04 	lds	r24, 0x0426
    6e3e:	88 23       	and	r24, r24
    6e40:	41 f0       	breq	.+16     	; 0x6e52 <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    6e42:	85 ed       	ldi	r24, 0xD5	; 213
    6e44:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    6e48:	80 91 bc 00 	lds	r24, 0x00BC
    6e4c:	84 fd       	sbrc	r24, 4
    6e4e:	fc cf       	rjmp	.-8      	; 0x6e48 <__vector_24+0x1f4>
    6e50:	7f c0       	rjmp	.+254    	; 0x6f50 <__vector_24+0x2fc>
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    6e52:	81 e0       	ldi	r24, 0x01	; 1
    6e54:	80 93 27 04 	sts	0x0427, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    6e58:	84 ea       	ldi	r24, 0xA4	; 164
    6e5a:	6e c0       	rjmp	.+220    	; 0x6f38 <__vector_24+0x2e4>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    6e5c:	85 ed       	ldi	r24, 0xD5	; 213
    6e5e:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    6e62:	80 91 bc 00 	lds	r24, 0x00BC
    6e66:	84 fd       	sbrc	r24, 4
    6e68:	fc cf       	rjmp	.-8      	; 0x6e62 <__vector_24+0x20e>
    6e6a:	72 c0       	rjmp	.+228    	; 0x6f50 <__vector_24+0x2fc>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    6e6c:	83 e0       	ldi	r24, 0x03	; 3
    6e6e:	80 93 24 04 	sts	0x0424, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    6e72:	10 92 90 04 	sts	0x0490, r1
    6e76:	59 c0       	rjmp	.+178    	; 0x6f2a <__vector_24+0x2d6>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    6e78:	80 91 90 04 	lds	r24, 0x0490
    6e7c:	80 32       	cpi	r24, 0x20	; 32
    6e7e:	08 f0       	brcs	.+2      	; 0x6e82 <__vector_24+0x22e>
    6e80:	56 c0       	rjmp	.+172    	; 0x6f2e <__vector_24+0x2da>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    6e82:	80 91 90 04 	lds	r24, 0x0490
    6e86:	90 91 bb 00 	lds	r25, 0x00BB
    6e8a:	e8 2f       	mov	r30, r24
    6e8c:	f0 e0       	ldi	r31, 0x00	; 0
    6e8e:	e0 59       	subi	r30, 0x90	; 144
    6e90:	fb 4f       	sbci	r31, 0xFB	; 251
    6e92:	90 83       	st	Z, r25
    6e94:	8f 5f       	subi	r24, 0xFF	; 255
    6e96:	80 93 90 04 	sts	0x0490, r24
    6e9a:	47 c0       	rjmp	.+142    	; 0x6f2a <__vector_24+0x2d6>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    6e9c:	80 91 90 04 	lds	r24, 0x0490
    6ea0:	80 32       	cpi	r24, 0x20	; 32
    6ea2:	30 f4       	brcc	.+12     	; 0x6eb0 <__vector_24+0x25c>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    6ea4:	e0 91 90 04 	lds	r30, 0x0490
    6ea8:	f0 e0       	ldi	r31, 0x00	; 0
    6eaa:	e0 59       	subi	r30, 0x90	; 144
    6eac:	fb 4f       	sbci	r31, 0xFB	; 251
    6eae:	10 82       	st	Z, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    6eb0:	85 ed       	ldi	r24, 0xD5	; 213
    6eb2:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    6eb6:	80 91 bc 00 	lds	r24, 0x00BC
    6eba:	84 fd       	sbrc	r24, 4
    6ebc:	fc cf       	rjmp	.-8      	; 0x6eb6 <__vector_24+0x262>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    6ebe:	10 92 24 04 	sts	0x0424, r1
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    6ec2:	60 91 90 04 	lds	r22, 0x0490
    6ec6:	e0 91 2a 04 	lds	r30, 0x042A
    6eca:	f0 91 2b 04 	lds	r31, 0x042B
    6ece:	80 e7       	ldi	r24, 0x70	; 112
    6ed0:	94 e0       	ldi	r25, 0x04	; 4
    6ed2:	70 e0       	ldi	r23, 0x00	; 0
    6ed4:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    6ed6:	10 92 90 04 	sts	0x0490, r1
    6eda:	2d c0       	rjmp	.+90     	; 0x6f36 <__vector_24+0x2e2>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    6edc:	84 e0       	ldi	r24, 0x04	; 4
    6ede:	80 93 24 04 	sts	0x0424, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    6ee2:	10 92 6e 04 	sts	0x046E, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    6ee6:	10 92 6f 04 	sts	0x046F, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    6eea:	e0 91 28 04 	lds	r30, 0x0428
    6eee:	f0 91 29 04 	lds	r31, 0x0429
    6ef2:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    6ef4:	80 91 6f 04 	lds	r24, 0x046F
    6ef8:	88 23       	and	r24, r24
    6efa:	29 f4       	brne	.+10     	; 0x6f06 <__vector_24+0x2b2>
        twi_txBufferLength = 1;
    6efc:	81 e0       	ldi	r24, 0x01	; 1
    6efe:	80 93 6f 04 	sts	0x046F, r24
        twi_txBuffer[0] = 0x00;
    6f02:	10 92 4e 04 	sts	0x044E, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    6f06:	90 91 6e 04 	lds	r25, 0x046E
    6f0a:	e9 2f       	mov	r30, r25
    6f0c:	f0 e0       	ldi	r31, 0x00	; 0
    6f0e:	e2 5b       	subi	r30, 0xB2	; 178
    6f10:	fb 4f       	sbci	r31, 0xFB	; 251
    6f12:	80 81       	ld	r24, Z
    6f14:	80 93 bb 00 	sts	0x00BB, r24
    6f18:	9f 5f       	subi	r25, 0xFF	; 255
    6f1a:	90 93 6e 04 	sts	0x046E, r25
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    6f1e:	90 91 6e 04 	lds	r25, 0x046E
    6f22:	80 91 6f 04 	lds	r24, 0x046F
    6f26:	98 17       	cp	r25, r24
    6f28:	10 f4       	brcc	.+4      	; 0x6f2e <__vector_24+0x2da>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    6f2a:	85 ec       	ldi	r24, 0xC5	; 197
    6f2c:	01 c0       	rjmp	.+2      	; 0x6f30 <__vector_24+0x2dc>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    6f2e:	85 e8       	ldi	r24, 0x85	; 133
    6f30:	80 93 bc 00 	sts	0x00BC, r24
    6f34:	0f c0       	rjmp	.+30     	; 0x6f54 <__vector_24+0x300>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    6f36:	85 ec       	ldi	r24, 0xC5	; 197
    6f38:	80 93 bc 00 	sts	0x00BC, r24
    6f3c:	09 c0       	rjmp	.+18     	; 0x6f50 <__vector_24+0x2fc>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    6f3e:	10 92 91 04 	sts	0x0491, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    6f42:	85 ed       	ldi	r24, 0xD5	; 213
    6f44:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    6f48:	80 91 bc 00 	lds	r24, 0x00BC
    6f4c:	84 fd       	sbrc	r24, 4
    6f4e:	fc cf       	rjmp	.-8      	; 0x6f48 <__vector_24+0x2f4>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    6f50:	10 92 24 04 	sts	0x0424, r1
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    6f54:	ff 91       	pop	r31
    6f56:	ef 91       	pop	r30
    6f58:	bf 91       	pop	r27
    6f5a:	af 91       	pop	r26
    6f5c:	9f 91       	pop	r25
    6f5e:	8f 91       	pop	r24
    6f60:	7f 91       	pop	r23
    6f62:	6f 91       	pop	r22
    6f64:	5f 91       	pop	r21
    6f66:	4f 91       	pop	r20
    6f68:	3f 91       	pop	r19
    6f6a:	2f 91       	pop	r18
    6f6c:	0f 90       	pop	r0
    6f6e:	0f be       	out	0x3f, r0	; 63
    6f70:	0f 90       	pop	r0
    6f72:	1f 90       	pop	r1
    6f74:	18 95       	reti

00006f76 <twi_init>:
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
    6f76:	10 92 24 04 	sts	0x0424, r1
  twi_sendStop = true;		// default value
    6f7a:	81 e0       	ldi	r24, 0x01	; 1
    6f7c:	80 93 26 04 	sts	0x0426, r24
  twi_inRepStart = false;
    6f80:	10 92 27 04 	sts	0x0427, r1
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
    6f84:	82 e1       	ldi	r24, 0x12	; 18
    6f86:	61 e0       	ldi	r22, 0x01	; 1
    6f88:	0e 94 18 38 	call	0x7030	; 0x7030 <digitalWrite>
  digitalWrite(SCL, 1);
    6f8c:	83 e1       	ldi	r24, 0x13	; 19
    6f8e:	61 e0       	ldi	r22, 0x01	; 1
    6f90:	0e 94 18 38 	call	0x7030	; 0x7030 <digitalWrite>

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    6f94:	e9 eb       	ldi	r30, 0xB9	; 185
    6f96:	f0 e0       	ldi	r31, 0x00	; 0
    6f98:	80 81       	ld	r24, Z
    6f9a:	8e 7f       	andi	r24, 0xFE	; 254
    6f9c:	80 83       	st	Z, r24
  cbi(TWSR, TWPS1);
    6f9e:	80 81       	ld	r24, Z
    6fa0:	8d 7f       	andi	r24, 0xFD	; 253
    6fa2:	80 83       	st	Z, r24
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
    6fa4:	8d ef       	ldi	r24, 0xFD	; 253
    6fa6:	80 93 b8 00 	sts	0x00B8, r24
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    6faa:	85 e4       	ldi	r24, 0x45	; 69
    6fac:	80 93 bc 00 	sts	0x00BC, r24
}
    6fb0:	08 95       	ret

00006fb2 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    6fb2:	cf 93       	push	r28
    6fb4:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    6fb6:	48 2f       	mov	r20, r24
    6fb8:	50 e0       	ldi	r21, 0x00	; 0
    6fba:	ca 01       	movw	r24, r20
    6fbc:	8a 5f       	subi	r24, 0xFA	; 250
    6fbe:	9a 4f       	sbci	r25, 0xFA	; 250
    6fc0:	fc 01       	movw	r30, r24
    6fc2:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
    6fc4:	4e 50       	subi	r20, 0x0E	; 14
    6fc6:	5b 4f       	sbci	r21, 0xFB	; 251
    6fc8:	fa 01       	movw	r30, r20
    6fca:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    6fcc:	88 23       	and	r24, r24
    6fce:	69 f1       	breq	.+90     	; 0x702a <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    6fd0:	90 e0       	ldi	r25, 0x00	; 0
    6fd2:	88 0f       	add	r24, r24
    6fd4:	99 1f       	adc	r25, r25
    6fd6:	fc 01       	movw	r30, r24
    6fd8:	ec 52       	subi	r30, 0x2C	; 44
    6fda:	fb 4f       	sbci	r31, 0xFB	; 251
    6fdc:	a5 91       	lpm	r26, Z+
    6fde:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
    6fe0:	fc 01       	movw	r30, r24
    6fe2:	e2 52       	subi	r30, 0x22	; 34
    6fe4:	fb 4f       	sbci	r31, 0xFB	; 251
    6fe6:	c5 91       	lpm	r28, Z+
    6fe8:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
    6fea:	66 23       	and	r22, r22
    6fec:	51 f4       	brne	.+20     	; 0x7002 <pinMode+0x50>
		uint8_t oldSREG = SREG;
    6fee:	2f b7       	in	r18, 0x3f	; 63
                cli();
    6ff0:	f8 94       	cli
		*reg &= ~bit;
    6ff2:	8c 91       	ld	r24, X
    6ff4:	93 2f       	mov	r25, r19
    6ff6:	90 95       	com	r25
    6ff8:	89 23       	and	r24, r25
    6ffa:	8c 93       	st	X, r24
		*out &= ~bit;
    6ffc:	88 81       	ld	r24, Y
    6ffe:	89 23       	and	r24, r25
    7000:	0b c0       	rjmp	.+22     	; 0x7018 <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    7002:	62 30       	cpi	r22, 0x02	; 2
    7004:	61 f4       	brne	.+24     	; 0x701e <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    7006:	2f b7       	in	r18, 0x3f	; 63
                cli();
    7008:	f8 94       	cli
		*reg &= ~bit;
    700a:	8c 91       	ld	r24, X
    700c:	93 2f       	mov	r25, r19
    700e:	90 95       	com	r25
    7010:	89 23       	and	r24, r25
    7012:	8c 93       	st	X, r24
		*out |= bit;
    7014:	88 81       	ld	r24, Y
    7016:	83 2b       	or	r24, r19
    7018:	88 83       	st	Y, r24
		SREG = oldSREG;
    701a:	2f bf       	out	0x3f, r18	; 63
    701c:	06 c0       	rjmp	.+12     	; 0x702a <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    701e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    7020:	f8 94       	cli
		*reg |= bit;
    7022:	8c 91       	ld	r24, X
    7024:	83 2b       	or	r24, r19
    7026:	8c 93       	st	X, r24
		SREG = oldSREG;
    7028:	9f bf       	out	0x3f, r25	; 63
	}
}
    702a:	df 91       	pop	r29
    702c:	cf 91       	pop	r28
    702e:	08 95       	ret

00007030 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    7030:	48 2f       	mov	r20, r24
    7032:	50 e0       	ldi	r21, 0x00	; 0
    7034:	ca 01       	movw	r24, r20
    7036:	86 5e       	subi	r24, 0xE6	; 230
    7038:	9a 4f       	sbci	r25, 0xFA	; 250
    703a:	fc 01       	movw	r30, r24
    703c:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    703e:	ca 01       	movw	r24, r20
    7040:	8a 5f       	subi	r24, 0xFA	; 250
    7042:	9a 4f       	sbci	r25, 0xFA	; 250
    7044:	fc 01       	movw	r30, r24
    7046:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    7048:	4e 50       	subi	r20, 0x0E	; 14
    704a:	5b 4f       	sbci	r21, 0xFB	; 251
    704c:	fa 01       	movw	r30, r20
    704e:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    7050:	33 23       	and	r19, r19
    7052:	09 f4       	brne	.+2      	; 0x7056 <digitalWrite+0x26>
    7054:	40 c0       	rjmp	.+128    	; 0x70d6 <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    7056:	22 23       	and	r18, r18
    7058:	51 f1       	breq	.+84     	; 0x70ae <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    705a:	23 30       	cpi	r18, 0x03	; 3
    705c:	71 f0       	breq	.+28     	; 0x707a <digitalWrite+0x4a>
    705e:	24 30       	cpi	r18, 0x04	; 4
    7060:	28 f4       	brcc	.+10     	; 0x706c <digitalWrite+0x3c>
    7062:	21 30       	cpi	r18, 0x01	; 1
    7064:	a1 f0       	breq	.+40     	; 0x708e <digitalWrite+0x5e>
    7066:	22 30       	cpi	r18, 0x02	; 2
    7068:	11 f5       	brne	.+68     	; 0x70ae <digitalWrite+0x7e>
    706a:	14 c0       	rjmp	.+40     	; 0x7094 <digitalWrite+0x64>
    706c:	26 30       	cpi	r18, 0x06	; 6
    706e:	b1 f0       	breq	.+44     	; 0x709c <digitalWrite+0x6c>
    7070:	27 30       	cpi	r18, 0x07	; 7
    7072:	c1 f0       	breq	.+48     	; 0x70a4 <digitalWrite+0x74>
    7074:	24 30       	cpi	r18, 0x04	; 4
    7076:	d9 f4       	brne	.+54     	; 0x70ae <digitalWrite+0x7e>
    7078:	04 c0       	rjmp	.+8      	; 0x7082 <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    707a:	80 91 80 00 	lds	r24, 0x0080
    707e:	8f 77       	andi	r24, 0x7F	; 127
    7080:	03 c0       	rjmp	.+6      	; 0x7088 <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    7082:	80 91 80 00 	lds	r24, 0x0080
    7086:	8f 7d       	andi	r24, 0xDF	; 223
    7088:	80 93 80 00 	sts	0x0080, r24
    708c:	10 c0       	rjmp	.+32     	; 0x70ae <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    708e:	84 b5       	in	r24, 0x24	; 36
    7090:	8f 77       	andi	r24, 0x7F	; 127
    7092:	02 c0       	rjmp	.+4      	; 0x7098 <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    7094:	84 b5       	in	r24, 0x24	; 36
    7096:	8f 7d       	andi	r24, 0xDF	; 223
    7098:	84 bd       	out	0x24, r24	; 36
    709a:	09 c0       	rjmp	.+18     	; 0x70ae <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    709c:	80 91 b0 00 	lds	r24, 0x00B0
    70a0:	8f 77       	andi	r24, 0x7F	; 127
    70a2:	03 c0       	rjmp	.+6      	; 0x70aa <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    70a4:	80 91 b0 00 	lds	r24, 0x00B0
    70a8:	8f 7d       	andi	r24, 0xDF	; 223
    70aa:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    70ae:	e3 2f       	mov	r30, r19
    70b0:	f0 e0       	ldi	r31, 0x00	; 0
    70b2:	ee 0f       	add	r30, r30
    70b4:	ff 1f       	adc	r31, r31
    70b6:	e2 52       	subi	r30, 0x22	; 34
    70b8:	fb 4f       	sbci	r31, 0xFB	; 251
    70ba:	a5 91       	lpm	r26, Z+
    70bc:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    70be:	2f b7       	in	r18, 0x3f	; 63
	cli();
    70c0:	f8 94       	cli

	if (val == LOW) {
    70c2:	66 23       	and	r22, r22
    70c4:	21 f4       	brne	.+8      	; 0x70ce <digitalWrite+0x9e>
		*out &= ~bit;
    70c6:	8c 91       	ld	r24, X
    70c8:	90 95       	com	r25
    70ca:	89 23       	and	r24, r25
    70cc:	02 c0       	rjmp	.+4      	; 0x70d2 <digitalWrite+0xa2>
	} else {
		*out |= bit;
    70ce:	8c 91       	ld	r24, X
    70d0:	89 2b       	or	r24, r25
    70d2:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    70d4:	2f bf       	out	0x3f, r18	; 63
    70d6:	08 95       	ret

000070d8 <serialEvent()>:
#if !defined(USART_RX_vect) && !defined(USART0_RX_vect) && \
    !defined(USART_RXC_vect)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    70d8:	08 95       	ret

000070da <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  ISR(USART_RX_vect)
    70da:	1f 92       	push	r1
    70dc:	0f 92       	push	r0
    70de:	0f b6       	in	r0, 0x3f	; 63
    70e0:	0f 92       	push	r0
    70e2:	11 24       	eor	r1, r1
    70e4:	2f 93       	push	r18
    70e6:	3f 93       	push	r19
    70e8:	4f 93       	push	r20
    70ea:	8f 93       	push	r24
    70ec:	9f 93       	push	r25
    70ee:	ef 93       	push	r30
    70f0:	ff 93       	push	r31
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#endif
  {
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
    70f2:	80 91 c0 00 	lds	r24, 0x00C0
    70f6:	82 fd       	sbrc	r24, 2
    70f8:	1d c0       	rjmp	.+58     	; 0x7134 <__vector_18+0x5a>
      unsigned char c = UDR0;
    70fa:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    70fe:	20 91 d2 04 	lds	r18, 0x04D2
    7102:	30 91 d3 04 	lds	r19, 0x04D3

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    7106:	2f 5f       	subi	r18, 0xFF	; 255
    7108:	3f 4f       	sbci	r19, 0xFF	; 255
    710a:	2f 73       	andi	r18, 0x3F	; 63
    710c:	30 70       	andi	r19, 0x00	; 0
    710e:	80 91 d4 04 	lds	r24, 0x04D4
    7112:	90 91 d5 04 	lds	r25, 0x04D5
    7116:	28 17       	cp	r18, r24
    7118:	39 07       	cpc	r19, r25
    711a:	71 f0       	breq	.+28     	; 0x7138 <__vector_18+0x5e>
    buffer->buffer[buffer->head] = c;
    711c:	e0 91 d2 04 	lds	r30, 0x04D2
    7120:	f0 91 d3 04 	lds	r31, 0x04D3
    7124:	ee 56       	subi	r30, 0x6E	; 110
    7126:	fb 4f       	sbci	r31, 0xFB	; 251
    7128:	40 83       	st	Z, r20
    buffer->head = i;
    712a:	30 93 d3 04 	sts	0x04D3, r19
    712e:	20 93 d2 04 	sts	0x04D2, r18
    7132:	02 c0       	rjmp	.+4      	; 0x7138 <__vector_18+0x5e>
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
      unsigned char c = UDR0;
      store_char(c, &rx_buffer);
    } else {
      unsigned char c = UDR0;
    7134:	80 91 c6 00 	lds	r24, 0x00C6
      unsigned char c = UDR;
    };
  #else
    #error UDR not defined
  #endif
  }
    7138:	ff 91       	pop	r31
    713a:	ef 91       	pop	r30
    713c:	9f 91       	pop	r25
    713e:	8f 91       	pop	r24
    7140:	4f 91       	pop	r20
    7142:	3f 91       	pop	r19
    7144:	2f 91       	pop	r18
    7146:	0f 90       	pop	r0
    7148:	0f be       	out	0x3f, r0	; 63
    714a:	0f 90       	pop	r0
    714c:	1f 90       	pop	r1
    714e:	18 95       	reti

00007150 <serialEventRun()>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    7150:	e0 91 26 05 	lds	r30, 0x0526
    7154:	f0 91 27 05 	lds	r31, 0x0527
    7158:	e0 5c       	subi	r30, 0xC0	; 192
    715a:	ff 4f       	sbci	r31, 0xFF	; 255
    715c:	81 91       	ld	r24, Z+
    715e:	91 91       	ld	r25, Z+
    7160:	20 81       	ld	r18, Z
    7162:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    7164:	82 1b       	sub	r24, r18
    7166:	93 0b       	sbc	r25, r19
    7168:	8f 73       	andi	r24, 0x3F	; 63
    716a:	90 70       	andi	r25, 0x00	; 0
    716c:	89 2b       	or	r24, r25
    716e:	11 f0       	breq	.+4      	; 0x7174 <serialEventRun()+0x24>
    7170:	0e 94 6c 38 	call	0x70d8	; 0x70d8 <serialEvent()>
    7174:	08 95       	ret

00007176 <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
    7176:	1f 92       	push	r1
    7178:	0f 92       	push	r0
    717a:	0f b6       	in	r0, 0x3f	; 63
    717c:	0f 92       	push	r0
    717e:	11 24       	eor	r1, r1
    7180:	2f 93       	push	r18
    7182:	3f 93       	push	r19
    7184:	8f 93       	push	r24
    7186:	9f 93       	push	r25
    7188:	ef 93       	push	r30
    718a:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    718c:	20 91 16 05 	lds	r18, 0x0516
    7190:	30 91 17 05 	lds	r19, 0x0517
    7194:	80 91 18 05 	lds	r24, 0x0518
    7198:	90 91 19 05 	lds	r25, 0x0519
    719c:	28 17       	cp	r18, r24
    719e:	39 07       	cpc	r19, r25
    71a0:	31 f4       	brne	.+12     	; 0x71ae <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    71a2:	80 91 c1 00 	lds	r24, 0x00C1
    71a6:	8f 7d       	andi	r24, 0xDF	; 223
    71a8:	80 93 c1 00 	sts	0x00C1, r24
    71ac:	14 c0       	rjmp	.+40     	; 0x71d6 <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    71ae:	e0 91 18 05 	lds	r30, 0x0518
    71b2:	f0 91 19 05 	lds	r31, 0x0519
    71b6:	ea 52       	subi	r30, 0x2A	; 42
    71b8:	fb 4f       	sbci	r31, 0xFB	; 251
    71ba:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    71bc:	80 91 18 05 	lds	r24, 0x0518
    71c0:	90 91 19 05 	lds	r25, 0x0519
    71c4:	01 96       	adiw	r24, 0x01	; 1
    71c6:	8f 73       	andi	r24, 0x3F	; 63
    71c8:	90 70       	andi	r25, 0x00	; 0
    71ca:	90 93 19 05 	sts	0x0519, r25
    71ce:	80 93 18 05 	sts	0x0518, r24
	
  #if defined(UDR0)
    UDR0 = c;
    71d2:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    71d6:	ff 91       	pop	r31
    71d8:	ef 91       	pop	r30
    71da:	9f 91       	pop	r25
    71dc:	8f 91       	pop	r24
    71de:	3f 91       	pop	r19
    71e0:	2f 91       	pop	r18
    71e2:	0f 90       	pop	r0
    71e4:	0f be       	out	0x3f, r0	; 63
    71e6:	0f 90       	pop	r0
    71e8:	1f 90       	pop	r1
    71ea:	18 95       	reti

000071ec <HardwareSerial::begin(unsigned long)>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    71ec:	af 92       	push	r10
    71ee:	bf 92       	push	r11
    71f0:	df 92       	push	r13
    71f2:	ef 92       	push	r14
    71f4:	ff 92       	push	r15
    71f6:	0f 93       	push	r16
    71f8:	1f 93       	push	r17
    71fa:	cf 93       	push	r28
    71fc:	df 93       	push	r29
    71fe:	ec 01       	movw	r28, r24
    7200:	7a 01       	movw	r14, r20
    7202:	8b 01       	movw	r16, r22
    7204:	dd 24       	eor	r13, r13
    7206:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    7208:	91 e0       	ldi	r25, 0x01	; 1
    720a:	a9 2e       	mov	r10, r25
    720c:	b1 2c       	mov	r11, r1
    720e:	ec 89       	ldd	r30, Y+20	; 0x14
    7210:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
    7212:	dd 20       	and	r13, r13
    7214:	69 f0       	breq	.+26     	; 0x7230 <HardwareSerial::begin(unsigned long)+0x44>
    *_ucsra = 1 << _u2x;
    7216:	c5 01       	movw	r24, r10
    7218:	08 a0       	ldd	r0, Y+32	; 0x20
    721a:	02 c0       	rjmp	.+4      	; 0x7220 <HardwareSerial::begin(unsigned long)+0x34>
    721c:	88 0f       	add	r24, r24
    721e:	99 1f       	adc	r25, r25
    7220:	0a 94       	dec	r0
    7222:	e2 f7       	brpl	.-8      	; 0x721c <HardwareSerial::begin(unsigned long)+0x30>
    7224:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    7226:	60 e9       	ldi	r22, 0x90	; 144
    7228:	70 ed       	ldi	r23, 0xD0	; 208
    722a:	83 e0       	ldi	r24, 0x03	; 3
    722c:	90 e0       	ldi	r25, 0x00	; 0
    722e:	05 c0       	rjmp	.+10     	; 0x723a <HardwareSerial::begin(unsigned long)+0x4e>
  } else {
    *_ucsra = 0;
    7230:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    7232:	68 e4       	ldi	r22, 0x48	; 72
    7234:	78 ee       	ldi	r23, 0xE8	; 232
    7236:	81 e0       	ldi	r24, 0x01	; 1
    7238:	90 e0       	ldi	r25, 0x00	; 0
    723a:	a8 01       	movw	r20, r16
    723c:	97 01       	movw	r18, r14
    723e:	0e 94 de 3d 	call	0x7bbc	; 0x7bbc <__udivmodsi4>
    7242:	21 50       	subi	r18, 0x01	; 1
    7244:	30 40       	sbci	r19, 0x00	; 0
    7246:	40 40       	sbci	r20, 0x00	; 0
    7248:	50 40       	sbci	r21, 0x00	; 0
    724a:	56 95       	lsr	r21
    724c:	47 95       	ror	r20
    724e:	37 95       	ror	r19
    7250:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    7252:	80 e1       	ldi	r24, 0x10	; 16
    7254:	20 30       	cpi	r18, 0x00	; 0
    7256:	38 07       	cpc	r19, r24
    7258:	20 f0       	brcs	.+8      	; 0x7262 <HardwareSerial::begin(unsigned long)+0x76>
    725a:	dd 20       	and	r13, r13
    725c:	11 f0       	breq	.+4      	; 0x7262 <HardwareSerial::begin(unsigned long)+0x76>
    725e:	dd 24       	eor	r13, r13
    7260:	d6 cf       	rjmp	.-84     	; 0x720e <HardwareSerial::begin(unsigned long)+0x22>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    7262:	e8 89       	ldd	r30, Y+16	; 0x10
    7264:	f9 89       	ldd	r31, Y+17	; 0x11
    7266:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    7268:	ea 89       	ldd	r30, Y+18	; 0x12
    726a:	fb 89       	ldd	r31, Y+19	; 0x13
    726c:	20 83       	st	Z, r18

  transmitting = false;
    726e:	19 a2       	std	Y+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
    7270:	ee 89       	ldd	r30, Y+22	; 0x16
    7272:	ff 89       	ldd	r31, Y+23	; 0x17
    7274:	40 81       	ld	r20, Z
    7276:	21 e0       	ldi	r18, 0x01	; 1
    7278:	30 e0       	ldi	r19, 0x00	; 0
    727a:	c9 01       	movw	r24, r18
    727c:	0c 8c       	ldd	r0, Y+28	; 0x1c
    727e:	02 c0       	rjmp	.+4      	; 0x7284 <HardwareSerial::begin(unsigned long)+0x98>
    7280:	88 0f       	add	r24, r24
    7282:	99 1f       	adc	r25, r25
    7284:	0a 94       	dec	r0
    7286:	e2 f7       	brpl	.-8      	; 0x7280 <HardwareSerial::begin(unsigned long)+0x94>
    7288:	48 2b       	or	r20, r24
    728a:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    728c:	ee 89       	ldd	r30, Y+22	; 0x16
    728e:	ff 89       	ldd	r31, Y+23	; 0x17
    7290:	40 81       	ld	r20, Z
    7292:	c9 01       	movw	r24, r18
    7294:	0d 8c       	ldd	r0, Y+29	; 0x1d
    7296:	02 c0       	rjmp	.+4      	; 0x729c <HardwareSerial::begin(unsigned long)+0xb0>
    7298:	88 0f       	add	r24, r24
    729a:	99 1f       	adc	r25, r25
    729c:	0a 94       	dec	r0
    729e:	e2 f7       	brpl	.-8      	; 0x7298 <HardwareSerial::begin(unsigned long)+0xac>
    72a0:	48 2b       	or	r20, r24
    72a2:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    72a4:	ee 89       	ldd	r30, Y+22	; 0x16
    72a6:	ff 89       	ldd	r31, Y+23	; 0x17
    72a8:	40 81       	ld	r20, Z
    72aa:	c9 01       	movw	r24, r18
    72ac:	0e 8c       	ldd	r0, Y+30	; 0x1e
    72ae:	02 c0       	rjmp	.+4      	; 0x72b4 <HardwareSerial::begin(unsigned long)+0xc8>
    72b0:	88 0f       	add	r24, r24
    72b2:	99 1f       	adc	r25, r25
    72b4:	0a 94       	dec	r0
    72b6:	e2 f7       	brpl	.-8      	; 0x72b0 <HardwareSerial::begin(unsigned long)+0xc4>
    72b8:	48 2b       	or	r20, r24
    72ba:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    72bc:	ee 89       	ldd	r30, Y+22	; 0x16
    72be:	ff 89       	ldd	r31, Y+23	; 0x17
    72c0:	80 81       	ld	r24, Z
    72c2:	0f 8c       	ldd	r0, Y+31	; 0x1f
    72c4:	02 c0       	rjmp	.+4      	; 0x72ca <HardwareSerial::begin(unsigned long)+0xde>
    72c6:	22 0f       	add	r18, r18
    72c8:	33 1f       	adc	r19, r19
    72ca:	0a 94       	dec	r0
    72cc:	e2 f7       	brpl	.-8      	; 0x72c6 <HardwareSerial::begin(unsigned long)+0xda>
    72ce:	20 95       	com	r18
    72d0:	28 23       	and	r18, r24
    72d2:	20 83       	st	Z, r18
}
    72d4:	df 91       	pop	r29
    72d6:	cf 91       	pop	r28
    72d8:	1f 91       	pop	r17
    72da:	0f 91       	pop	r16
    72dc:	ff 90       	pop	r15
    72de:	ef 90       	pop	r14
    72e0:	df 90       	pop	r13
    72e2:	bf 90       	pop	r11
    72e4:	af 90       	pop	r10
    72e6:	08 95       	ret

000072e8 <HardwareSerial::end()>:
  sbi(*_ucsrb, _txen);
  sbi(*_ucsrb, _rxcie);
  cbi(*_ucsrb, _udrie);
}

void HardwareSerial::end()
    72e8:	cf 93       	push	r28
    72ea:	df 93       	push	r29
    72ec:	dc 01       	movw	r26, r24
{
  // wait for transmission of outgoing data
  while (_tx_buffer->head != _tx_buffer->tail)
    72ee:	1e 96       	adiw	r26, 0x0e	; 14
    72f0:	8d 91       	ld	r24, X+
    72f2:	9c 91       	ld	r25, X
    72f4:	1f 97       	sbiw	r26, 0x0f	; 15
    72f6:	ec 01       	movw	r28, r24
    72f8:	c0 5c       	subi	r28, 0xC0	; 192
    72fa:	df 4f       	sbci	r29, 0xFF	; 255
    72fc:	fc 01       	movw	r30, r24
    72fe:	ee 5b       	subi	r30, 0xBE	; 190
    7300:	ff 4f       	sbci	r31, 0xFF	; 255
    7302:	28 81       	ld	r18, Y
    7304:	39 81       	ldd	r19, Y+1	; 0x01
    7306:	80 81       	ld	r24, Z
    7308:	91 81       	ldd	r25, Z+1	; 0x01
    730a:	28 17       	cp	r18, r24
    730c:	39 07       	cpc	r19, r25
    730e:	c9 f7       	brne	.-14     	; 0x7302 <HardwareSerial::end()+0x1a>
    ;

  cbi(*_ucsrb, _rxen);
    7310:	56 96       	adiw	r26, 0x16	; 22
    7312:	ed 91       	ld	r30, X+
    7314:	fc 91       	ld	r31, X
    7316:	57 97       	sbiw	r26, 0x17	; 23
    7318:	40 81       	ld	r20, Z
    731a:	21 e0       	ldi	r18, 0x01	; 1
    731c:	30 e0       	ldi	r19, 0x00	; 0
    731e:	c9 01       	movw	r24, r18
    7320:	5c 96       	adiw	r26, 0x1c	; 28
    7322:	0c 90       	ld	r0, X
    7324:	5c 97       	sbiw	r26, 0x1c	; 28
    7326:	02 c0       	rjmp	.+4      	; 0x732c <HardwareSerial::end()+0x44>
    7328:	88 0f       	add	r24, r24
    732a:	99 1f       	adc	r25, r25
    732c:	0a 94       	dec	r0
    732e:	e2 f7       	brpl	.-8      	; 0x7328 <HardwareSerial::end()+0x40>
    7330:	80 95       	com	r24
    7332:	84 23       	and	r24, r20
    7334:	80 83       	st	Z, r24
  cbi(*_ucsrb, _txen);
    7336:	56 96       	adiw	r26, 0x16	; 22
    7338:	ed 91       	ld	r30, X+
    733a:	fc 91       	ld	r31, X
    733c:	57 97       	sbiw	r26, 0x17	; 23
    733e:	40 81       	ld	r20, Z
    7340:	c9 01       	movw	r24, r18
    7342:	5d 96       	adiw	r26, 0x1d	; 29
    7344:	0c 90       	ld	r0, X
    7346:	5d 97       	sbiw	r26, 0x1d	; 29
    7348:	02 c0       	rjmp	.+4      	; 0x734e <HardwareSerial::end()+0x66>
    734a:	88 0f       	add	r24, r24
    734c:	99 1f       	adc	r25, r25
    734e:	0a 94       	dec	r0
    7350:	e2 f7       	brpl	.-8      	; 0x734a <HardwareSerial::end()+0x62>
    7352:	80 95       	com	r24
    7354:	84 23       	and	r24, r20
    7356:	80 83       	st	Z, r24
  cbi(*_ucsrb, _rxcie);  
    7358:	56 96       	adiw	r26, 0x16	; 22
    735a:	ed 91       	ld	r30, X+
    735c:	fc 91       	ld	r31, X
    735e:	57 97       	sbiw	r26, 0x17	; 23
    7360:	40 81       	ld	r20, Z
    7362:	c9 01       	movw	r24, r18
    7364:	5e 96       	adiw	r26, 0x1e	; 30
    7366:	0c 90       	ld	r0, X
    7368:	5e 97       	sbiw	r26, 0x1e	; 30
    736a:	02 c0       	rjmp	.+4      	; 0x7370 <HardwareSerial::end()+0x88>
    736c:	88 0f       	add	r24, r24
    736e:	99 1f       	adc	r25, r25
    7370:	0a 94       	dec	r0
    7372:	e2 f7       	brpl	.-8      	; 0x736c <HardwareSerial::end()+0x84>
    7374:	80 95       	com	r24
    7376:	84 23       	and	r24, r20
    7378:	80 83       	st	Z, r24
  cbi(*_ucsrb, _udrie);
    737a:	56 96       	adiw	r26, 0x16	; 22
    737c:	ed 91       	ld	r30, X+
    737e:	fc 91       	ld	r31, X
    7380:	57 97       	sbiw	r26, 0x17	; 23
    7382:	80 81       	ld	r24, Z
    7384:	5f 96       	adiw	r26, 0x1f	; 31
    7386:	0c 90       	ld	r0, X
    7388:	5f 97       	sbiw	r26, 0x1f	; 31
    738a:	02 c0       	rjmp	.+4      	; 0x7390 <HardwareSerial::end()+0xa8>
    738c:	22 0f       	add	r18, r18
    738e:	33 1f       	adc	r19, r19
    7390:	0a 94       	dec	r0
    7392:	e2 f7       	brpl	.-8      	; 0x738c <HardwareSerial::end()+0xa4>
    7394:	20 95       	com	r18
    7396:	28 23       	and	r18, r24
    7398:	20 83       	st	Z, r18
  
  // clear any received data
  _rx_buffer->head = _rx_buffer->tail;
    739a:	1c 96       	adiw	r26, 0x0c	; 12
    739c:	ed 91       	ld	r30, X+
    739e:	fc 91       	ld	r31, X
    73a0:	1d 97       	sbiw	r26, 0x0d	; 13
    73a2:	ee 5b       	subi	r30, 0xBE	; 190
    73a4:	ff 4f       	sbci	r31, 0xFF	; 255
    73a6:	80 81       	ld	r24, Z
    73a8:	91 81       	ldd	r25, Z+1	; 0x01
    73aa:	92 93       	st	-Z, r25
    73ac:	82 93       	st	-Z, r24
}
    73ae:	df 91       	pop	r29
    73b0:	cf 91       	pop	r28
    73b2:	08 95       	ret

000073b4 <HardwareSerial::available()>:

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    73b4:	dc 01       	movw	r26, r24
    73b6:	1c 96       	adiw	r26, 0x0c	; 12
    73b8:	ed 91       	ld	r30, X+
    73ba:	fc 91       	ld	r31, X
    73bc:	1d 97       	sbiw	r26, 0x0d	; 13
    73be:	e0 5c       	subi	r30, 0xC0	; 192
    73c0:	ff 4f       	sbci	r31, 0xFF	; 255
    73c2:	21 91       	ld	r18, Z+
    73c4:	31 91       	ld	r19, Z+
    73c6:	80 81       	ld	r24, Z
    73c8:	91 81       	ldd	r25, Z+1	; 0x01
    73ca:	28 1b       	sub	r18, r24
    73cc:	39 0b       	sbc	r19, r25
    73ce:	2f 73       	andi	r18, 0x3F	; 63
    73d0:	30 70       	andi	r19, 0x00	; 0
}
    73d2:	c9 01       	movw	r24, r18
    73d4:	08 95       	ret

000073d6 <HardwareSerial::peek()>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    73d6:	dc 01       	movw	r26, r24
    73d8:	1c 96       	adiw	r26, 0x0c	; 12
    73da:	ed 91       	ld	r30, X+
    73dc:	fc 91       	ld	r31, X
    73de:	1d 97       	sbiw	r26, 0x0d	; 13
    73e0:	e0 5c       	subi	r30, 0xC0	; 192
    73e2:	ff 4f       	sbci	r31, 0xFF	; 255
    73e4:	20 81       	ld	r18, Z
    73e6:	31 81       	ldd	r19, Z+1	; 0x01
    73e8:	e0 54       	subi	r30, 0x40	; 64
    73ea:	f0 40       	sbci	r31, 0x00	; 0
    73ec:	df 01       	movw	r26, r30
    73ee:	ae 5b       	subi	r26, 0xBE	; 190
    73f0:	bf 4f       	sbci	r27, 0xFF	; 255
    73f2:	8d 91       	ld	r24, X+
    73f4:	9c 91       	ld	r25, X
    73f6:	11 97       	sbiw	r26, 0x01	; 1
    73f8:	28 17       	cp	r18, r24
    73fa:	39 07       	cpc	r19, r25
    73fc:	19 f4       	brne	.+6      	; 0x7404 <HardwareSerial::peek()+0x2e>
    73fe:	2f ef       	ldi	r18, 0xFF	; 255
    7400:	3f ef       	ldi	r19, 0xFF	; 255
    7402:	07 c0       	rjmp	.+14     	; 0x7412 <HardwareSerial::peek()+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    7404:	8d 91       	ld	r24, X+
    7406:	9c 91       	ld	r25, X
    7408:	e8 0f       	add	r30, r24
    740a:	f9 1f       	adc	r31, r25
    740c:	80 81       	ld	r24, Z
    740e:	28 2f       	mov	r18, r24
    7410:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    7412:	c9 01       	movw	r24, r18
    7414:	08 95       	ret

00007416 <HardwareSerial::read()>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    7416:	dc 01       	movw	r26, r24
    7418:	1c 96       	adiw	r26, 0x0c	; 12
    741a:	ed 91       	ld	r30, X+
    741c:	fc 91       	ld	r31, X
    741e:	1d 97       	sbiw	r26, 0x0d	; 13
    7420:	e0 5c       	subi	r30, 0xC0	; 192
    7422:	ff 4f       	sbci	r31, 0xFF	; 255
    7424:	20 81       	ld	r18, Z
    7426:	31 81       	ldd	r19, Z+1	; 0x01
    7428:	e0 54       	subi	r30, 0x40	; 64
    742a:	f0 40       	sbci	r31, 0x00	; 0
    742c:	df 01       	movw	r26, r30
    742e:	ae 5b       	subi	r26, 0xBE	; 190
    7430:	bf 4f       	sbci	r27, 0xFF	; 255
    7432:	8d 91       	ld	r24, X+
    7434:	9c 91       	ld	r25, X
    7436:	11 97       	sbiw	r26, 0x01	; 1
    7438:	28 17       	cp	r18, r24
    743a:	39 07       	cpc	r19, r25
    743c:	19 f4       	brne	.+6      	; 0x7444 <HardwareSerial::read()+0x2e>
    743e:	2f ef       	ldi	r18, 0xFF	; 255
    7440:	3f ef       	ldi	r19, 0xFF	; 255
    7442:	10 c0       	rjmp	.+32     	; 0x7464 <HardwareSerial::read()+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    7444:	8d 91       	ld	r24, X+
    7446:	9c 91       	ld	r25, X
    7448:	11 97       	sbiw	r26, 0x01	; 1
    744a:	e8 0f       	add	r30, r24
    744c:	f9 1f       	adc	r31, r25
    744e:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    7450:	8d 91       	ld	r24, X+
    7452:	9c 91       	ld	r25, X
    7454:	11 97       	sbiw	r26, 0x01	; 1
    7456:	01 96       	adiw	r24, 0x01	; 1
    7458:	8f 73       	andi	r24, 0x3F	; 63
    745a:	90 70       	andi	r25, 0x00	; 0
    745c:	11 96       	adiw	r26, 0x01	; 1
    745e:	9c 93       	st	X, r25
    7460:	8e 93       	st	-X, r24
    return c;
    7462:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    7464:	c9 01       	movw	r24, r18
    7466:	08 95       	ret

00007468 <HardwareSerial::flush()>:

void HardwareSerial::flush()
    7468:	dc 01       	movw	r26, r24
{
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
    746a:	91 96       	adiw	r26, 0x21	; 33
    746c:	8c 91       	ld	r24, X
    746e:	91 97       	sbiw	r26, 0x21	; 33
    7470:	88 23       	and	r24, r24
    7472:	39 f0       	breq	.+14     	; 0x7482 <HardwareSerial::flush()+0x1a>
    7474:	54 96       	adiw	r26, 0x14	; 20
    7476:	ed 91       	ld	r30, X+
    7478:	fc 91       	ld	r31, X
    747a:	55 97       	sbiw	r26, 0x15	; 21
    747c:	80 81       	ld	r24, Z
    747e:	86 ff       	sbrs	r24, 6
    7480:	f9 cf       	rjmp	.-14     	; 0x7474 <HardwareSerial::flush()+0xc>
  transmitting = false;
    7482:	91 96       	adiw	r26, 0x21	; 33
    7484:	1c 92       	st	X, r1
}
    7486:	08 95       	ret

00007488 <HardwareSerial::write(unsigned char)>:

size_t HardwareSerial::write(uint8_t c)
    7488:	cf 93       	push	r28
    748a:	df 93       	push	r29
    748c:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    748e:	ee 85       	ldd	r30, Y+14	; 0x0e
    7490:	ff 85       	ldd	r31, Y+15	; 0x0f
    7492:	e0 5c       	subi	r30, 0xC0	; 192
    7494:	ff 4f       	sbci	r31, 0xFF	; 255
    7496:	20 81       	ld	r18, Z
    7498:	31 81       	ldd	r19, Z+1	; 0x01
    749a:	e0 54       	subi	r30, 0x40	; 64
    749c:	f0 40       	sbci	r31, 0x00	; 0
    749e:	2f 5f       	subi	r18, 0xFF	; 255
    74a0:	3f 4f       	sbci	r19, 0xFF	; 255
    74a2:	2f 73       	andi	r18, 0x3F	; 63
    74a4:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    74a6:	df 01       	movw	r26, r30
    74a8:	ae 5b       	subi	r26, 0xBE	; 190
    74aa:	bf 4f       	sbci	r27, 0xFF	; 255
    74ac:	8d 91       	ld	r24, X+
    74ae:	9c 91       	ld	r25, X
    74b0:	11 97       	sbiw	r26, 0x01	; 1
    74b2:	28 17       	cp	r18, r24
    74b4:	39 07       	cpc	r19, r25
    74b6:	d1 f3       	breq	.-12     	; 0x74ac <HardwareSerial::write(unsigned char)+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    74b8:	e0 5c       	subi	r30, 0xC0	; 192
    74ba:	ff 4f       	sbci	r31, 0xFF	; 255
    74bc:	80 81       	ld	r24, Z
    74be:	91 81       	ldd	r25, Z+1	; 0x01
    74c0:	e0 54       	subi	r30, 0x40	; 64
    74c2:	f0 40       	sbci	r31, 0x00	; 0
    74c4:	e8 0f       	add	r30, r24
    74c6:	f9 1f       	adc	r31, r25
    74c8:	60 83       	st	Z, r22
  _tx_buffer->head = i;
    74ca:	ee 85       	ldd	r30, Y+14	; 0x0e
    74cc:	ff 85       	ldd	r31, Y+15	; 0x0f
    74ce:	e0 5c       	subi	r30, 0xC0	; 192
    74d0:	ff 4f       	sbci	r31, 0xFF	; 255
    74d2:	31 83       	std	Z+1, r19	; 0x01
    74d4:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    74d6:	ee 89       	ldd	r30, Y+22	; 0x16
    74d8:	ff 89       	ldd	r31, Y+23	; 0x17
    74da:	20 81       	ld	r18, Z
    74dc:	81 e0       	ldi	r24, 0x01	; 1
    74de:	90 e0       	ldi	r25, 0x00	; 0
    74e0:	0f 8c       	ldd	r0, Y+31	; 0x1f
    74e2:	02 c0       	rjmp	.+4      	; 0x74e8 <HardwareSerial::write(unsigned char)+0x60>
    74e4:	88 0f       	add	r24, r24
    74e6:	99 1f       	adc	r25, r25
    74e8:	0a 94       	dec	r0
    74ea:	e2 f7       	brpl	.-8      	; 0x74e4 <HardwareSerial::write(unsigned char)+0x5c>
    74ec:	28 2b       	or	r18, r24
    74ee:	20 83       	st	Z, r18
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
    74f0:	81 e0       	ldi	r24, 0x01	; 1
    74f2:	89 a3       	std	Y+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
    74f4:	ec 89       	ldd	r30, Y+20	; 0x14
    74f6:	fd 89       	ldd	r31, Y+21	; 0x15
    74f8:	80 81       	ld	r24, Z
    74fa:	80 64       	ori	r24, 0x40	; 64
    74fc:	80 83       	st	Z, r24
  
  return 1;
}
    74fe:	81 e0       	ldi	r24, 0x01	; 1
    7500:	90 e0       	ldi	r25, 0x00	; 0
    7502:	df 91       	pop	r29
    7504:	cf 91       	pop	r28
    7506:	08 95       	ret

00007508 <global constructors keyed to rx_buffer>:
  public:
    Print() : write_error(0) {}
    7508:	10 92 1d 05 	sts	0x051D, r1
    750c:	10 92 1c 05 	sts	0x051C, r1
    7510:	88 ee       	ldi	r24, 0xE8	; 232
    7512:	93 e0       	ldi	r25, 0x03	; 3
    7514:	a0 e0       	ldi	r26, 0x00	; 0
    7516:	b0 e0       	ldi	r27, 0x00	; 0
    7518:	80 93 1e 05 	sts	0x051E, r24
    751c:	90 93 1f 05 	sts	0x051F, r25
    7520:	a0 93 20 05 	sts	0x0520, r26
    7524:	b0 93 21 05 	sts	0x0521, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    7528:	86 e0       	ldi	r24, 0x06	; 6
    752a:	92 e0       	ldi	r25, 0x02	; 2
    752c:	90 93 1b 05 	sts	0x051B, r25
    7530:	80 93 1a 05 	sts	0x051A, r24
{
  _rx_buffer = rx_buffer;
    7534:	82 e9       	ldi	r24, 0x92	; 146
    7536:	94 e0       	ldi	r25, 0x04	; 4
    7538:	90 93 27 05 	sts	0x0527, r25
    753c:	80 93 26 05 	sts	0x0526, r24
  _tx_buffer = tx_buffer;
    7540:	86 ed       	ldi	r24, 0xD6	; 214
    7542:	94 e0       	ldi	r25, 0x04	; 4
    7544:	90 93 29 05 	sts	0x0529, r25
    7548:	80 93 28 05 	sts	0x0528, r24
  _ubrrh = ubrrh;
    754c:	85 ec       	ldi	r24, 0xC5	; 197
    754e:	90 e0       	ldi	r25, 0x00	; 0
    7550:	90 93 2b 05 	sts	0x052B, r25
    7554:	80 93 2a 05 	sts	0x052A, r24
  _ubrrl = ubrrl;
    7558:	84 ec       	ldi	r24, 0xC4	; 196
    755a:	90 e0       	ldi	r25, 0x00	; 0
    755c:	90 93 2d 05 	sts	0x052D, r25
    7560:	80 93 2c 05 	sts	0x052C, r24
  _ucsra = ucsra;
    7564:	80 ec       	ldi	r24, 0xC0	; 192
    7566:	90 e0       	ldi	r25, 0x00	; 0
    7568:	90 93 2f 05 	sts	0x052F, r25
    756c:	80 93 2e 05 	sts	0x052E, r24
  _ucsrb = ucsrb;
    7570:	81 ec       	ldi	r24, 0xC1	; 193
    7572:	90 e0       	ldi	r25, 0x00	; 0
    7574:	90 93 31 05 	sts	0x0531, r25
    7578:	80 93 30 05 	sts	0x0530, r24
  _ucsrc = ucsrc;
    757c:	82 ec       	ldi	r24, 0xC2	; 194
    757e:	90 e0       	ldi	r25, 0x00	; 0
    7580:	90 93 33 05 	sts	0x0533, r25
    7584:	80 93 32 05 	sts	0x0532, r24
  _udr = udr;
    7588:	86 ec       	ldi	r24, 0xC6	; 198
    758a:	90 e0       	ldi	r25, 0x00	; 0
    758c:	90 93 35 05 	sts	0x0535, r25
    7590:	80 93 34 05 	sts	0x0534, r24
  _rxen = rxen;
    7594:	84 e0       	ldi	r24, 0x04	; 4
    7596:	80 93 36 05 	sts	0x0536, r24
  _txen = txen;
    759a:	83 e0       	ldi	r24, 0x03	; 3
    759c:	80 93 37 05 	sts	0x0537, r24
  _rxcie = rxcie;
    75a0:	87 e0       	ldi	r24, 0x07	; 7
    75a2:	80 93 38 05 	sts	0x0538, r24
  _udrie = udrie;
    75a6:	85 e0       	ldi	r24, 0x05	; 5
    75a8:	80 93 39 05 	sts	0x0539, r24
  _u2x = u2x;
    75ac:	81 e0       	ldi	r24, 0x01	; 1
    75ae:	80 93 3a 05 	sts	0x053A, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    75b2:	08 95       	ret

000075b4 <main>:
#include <Arduino.h>

int main(void)
    75b4:	cf 93       	push	r28
    75b6:	df 93       	push	r29
{
	init();
    75b8:	0e 94 dc 3c 	call	0x79b8	; 0x79b8 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    75bc:	0e 94 23 30 	call	0x6046	; 0x6046 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    75c0:	c8 ea       	ldi	r28, 0xA8	; 168
    75c2:	d8 e3       	ldi	r29, 0x38	; 56
#endif
	
	setup();
    
	for (;;) {
		loop();
    75c4:	0e 94 4e 2f 	call	0x5e9c	; 0x5e9c <loop>
		if (serialEventRun) serialEventRun();
    75c8:	20 97       	sbiw	r28, 0x00	; 0
    75ca:	e1 f3       	breq	.-8      	; 0x75c4 <main+0x10>
    75cc:	0e 94 a8 38 	call	0x7150	; 0x7150 <serialEventRun()>
    75d0:	f9 cf       	rjmp	.-14     	; 0x75c4 <main+0x10>

000075d2 <__cxa_guard_acquire>:
void operator delete[](void * ptr)
{
  free(ptr);
}

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
    75d2:	fc 01       	movw	r30, r24
    75d4:	20 e0       	ldi	r18, 0x00	; 0
    75d6:	30 e0       	ldi	r19, 0x00	; 0
    75d8:	80 81       	ld	r24, Z
    75da:	88 23       	and	r24, r24
    75dc:	11 f4       	brne	.+4      	; 0x75e2 <__cxa_guard_acquire+0x10>
    75de:	21 e0       	ldi	r18, 0x01	; 1
    75e0:	30 e0       	ldi	r19, 0x00	; 0
    75e2:	c9 01       	movw	r24, r18
    75e4:	08 95       	ret

000075e6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
    75e6:	fc 01       	movw	r30, r24
    75e8:	81 e0       	ldi	r24, 0x01	; 1
    75ea:	80 83       	st	Z, r24
    75ec:	08 95       	ret

000075ee <Print::write(unsigned char const*, unsigned int)>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    75ee:	cf 92       	push	r12
    75f0:	df 92       	push	r13
    75f2:	ef 92       	push	r14
    75f4:	ff 92       	push	r15
    75f6:	0f 93       	push	r16
    75f8:	1f 93       	push	r17
    75fa:	cf 93       	push	r28
    75fc:	df 93       	push	r29
    75fe:	7c 01       	movw	r14, r24
    7600:	6b 01       	movw	r12, r22
    7602:	8a 01       	movw	r16, r20
    7604:	c0 e0       	ldi	r28, 0x00	; 0
    7606:	d0 e0       	ldi	r29, 0x00	; 0
    7608:	0f c0       	rjmp	.+30     	; 0x7628 <Print::write(unsigned char const*, unsigned int)+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    760a:	d6 01       	movw	r26, r12
    760c:	6d 91       	ld	r22, X+
    760e:	6d 01       	movw	r12, r26
    7610:	d7 01       	movw	r26, r14
    7612:	ed 91       	ld	r30, X+
    7614:	fc 91       	ld	r31, X
    7616:	01 90       	ld	r0, Z+
    7618:	f0 81       	ld	r31, Z
    761a:	e0 2d       	mov	r30, r0
    761c:	c7 01       	movw	r24, r14
    761e:	09 95       	icall
    7620:	c8 0f       	add	r28, r24
    7622:	d9 1f       	adc	r29, r25
    7624:	01 50       	subi	r16, 0x01	; 1
    7626:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    7628:	01 15       	cp	r16, r1
    762a:	11 05       	cpc	r17, r1
    762c:	71 f7       	brne	.-36     	; 0x760a <Print::write(unsigned char const*, unsigned int)+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    762e:	ce 01       	movw	r24, r28
    7630:	df 91       	pop	r29
    7632:	cf 91       	pop	r28
    7634:	1f 91       	pop	r17
    7636:	0f 91       	pop	r16
    7638:	ff 90       	pop	r15
    763a:	ef 90       	pop	r14
    763c:	df 90       	pop	r13
    763e:	cf 90       	pop	r12
    7640:	08 95       	ret

00007642 <Print::print(__FlashStringHelper const*)>:

size_t Print::print(const __FlashStringHelper *ifsh)
    7642:	ef 92       	push	r14
    7644:	ff 92       	push	r15
    7646:	0f 93       	push	r16
    7648:	1f 93       	push	r17
    764a:	cf 93       	push	r28
    764c:	df 93       	push	r29
    764e:	7c 01       	movw	r14, r24
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
    7650:	8b 01       	movw	r16, r22
    7652:	c0 e0       	ldi	r28, 0x00	; 0
    7654:	d0 e0       	ldi	r29, 0x00	; 0
    7656:	f8 01       	movw	r30, r16
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    7658:	0f 5f       	subi	r16, 0xFF	; 255
    765a:	1f 4f       	sbci	r17, 0xFF	; 255
    765c:	64 91       	lpm	r22, Z+
    if (c == 0) break;
    765e:	66 23       	and	r22, r22
    7660:	59 f0       	breq	.+22     	; 0x7678 <Print::print(__FlashStringHelper const*)+0x36>
    n += write(c);
    7662:	d7 01       	movw	r26, r14
    7664:	ed 91       	ld	r30, X+
    7666:	fc 91       	ld	r31, X
    7668:	01 90       	ld	r0, Z+
    766a:	f0 81       	ld	r31, Z
    766c:	e0 2d       	mov	r30, r0
    766e:	c7 01       	movw	r24, r14
    7670:	09 95       	icall
    7672:	c8 0f       	add	r28, r24
    7674:	d9 1f       	adc	r29, r25
    7676:	ef cf       	rjmp	.-34     	; 0x7656 <Print::print(__FlashStringHelper const*)+0x14>
  }
  return n;
}
    7678:	ce 01       	movw	r24, r28
    767a:	df 91       	pop	r29
    767c:	cf 91       	pop	r28
    767e:	1f 91       	pop	r17
    7680:	0f 91       	pop	r16
    7682:	ff 90       	pop	r15
    7684:	ef 90       	pop	r14
    7686:	08 95       	ret

00007688 <Print::print(char)>:
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
    7688:	dc 01       	movw	r26, r24
{
  return write(c);
    768a:	ed 91       	ld	r30, X+
    768c:	fc 91       	ld	r31, X
    768e:	01 90       	ld	r0, Z+
    7690:	f0 81       	ld	r31, Z
    7692:	e0 2d       	mov	r30, r0
    7694:	09 95       	icall
}
    7696:	08 95       	ret

00007698 <Print::println()>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
    7698:	ef 92       	push	r14
    769a:	ff 92       	push	r15
    769c:	0f 93       	push	r16
    769e:	1f 93       	push	r17
    76a0:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    76a2:	dc 01       	movw	r26, r24
    76a4:	ed 91       	ld	r30, X+
    76a6:	fc 91       	ld	r31, X
    76a8:	01 90       	ld	r0, Z+
    76aa:	f0 81       	ld	r31, Z
    76ac:	e0 2d       	mov	r30, r0
    76ae:	6d e0       	ldi	r22, 0x0D	; 13
    76b0:	09 95       	icall
    76b2:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    76b4:	d8 01       	movw	r26, r16
    76b6:	ed 91       	ld	r30, X+
    76b8:	fc 91       	ld	r31, X
    76ba:	01 90       	ld	r0, Z+
    76bc:	f0 81       	ld	r31, Z
    76be:	e0 2d       	mov	r30, r0
    76c0:	c8 01       	movw	r24, r16
    76c2:	6a e0       	ldi	r22, 0x0A	; 10
    76c4:	09 95       	icall
    76c6:	9c 01       	movw	r18, r24
    76c8:	2e 0d       	add	r18, r14
    76ca:	3f 1d       	adc	r19, r15
    76cc:	c9 01       	movw	r24, r18
    76ce:	1f 91       	pop	r17
    76d0:	0f 91       	pop	r16
    76d2:	ff 90       	pop	r15
    76d4:	ef 90       	pop	r14
    76d6:	08 95       	ret

000076d8 <Print::println(__FlashStringHelper const*)>:
size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
    76d8:	ef 92       	push	r14
    76da:	ff 92       	push	r15
    76dc:	0f 93       	push	r16
    76de:	1f 93       	push	r17
    76e0:	7c 01       	movw	r14, r24
{
  size_t n = print(ifsh);
    76e2:	0e 94 21 3b 	call	0x7642	; 0x7642 <Print::print(__FlashStringHelper const*)>
    76e6:	8c 01       	movw	r16, r24
  n += println();
    76e8:	c7 01       	movw	r24, r14
    76ea:	0e 94 4c 3b 	call	0x7698	; 0x7698 <Print::println()>
    76ee:	9c 01       	movw	r18, r24
    76f0:	20 0f       	add	r18, r16
    76f2:	31 1f       	adc	r19, r17
  return n;
}
    76f4:	c9 01       	movw	r24, r18
    76f6:	1f 91       	pop	r17
    76f8:	0f 91       	pop	r16
    76fa:	ff 90       	pop	r15
    76fc:	ef 90       	pop	r14
    76fe:	08 95       	ret

00007700 <Print::write(char const*)>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    7700:	cf 93       	push	r28
    7702:	df 93       	push	r29
    7704:	ec 01       	movw	r28, r24
      if (str == NULL) return 0;
    7706:	61 15       	cp	r22, r1
    7708:	71 05       	cpc	r23, r1
    770a:	19 f4       	brne	.+6      	; 0x7712 <Print::write(char const*)+0x12>
    770c:	20 e0       	ldi	r18, 0x00	; 0
    770e:	30 e0       	ldi	r19, 0x00	; 0
    7710:	0f c0       	rjmp	.+30     	; 0x7730 <Print::write(char const*)+0x30>
      return write((const uint8_t *)str, strlen(str));
    7712:	db 01       	movw	r26, r22
    7714:	0d 90       	ld	r0, X+
    7716:	00 20       	and	r0, r0
    7718:	e9 f7       	brne	.-6      	; 0x7714 <Print::write(char const*)+0x14>
    771a:	11 97       	sbiw	r26, 0x01	; 1
    771c:	a6 1b       	sub	r26, r22
    771e:	b7 0b       	sbc	r27, r23
    7720:	e8 81       	ld	r30, Y
    7722:	f9 81       	ldd	r31, Y+1	; 0x01
    7724:	02 80       	ldd	r0, Z+2	; 0x02
    7726:	f3 81       	ldd	r31, Z+3	; 0x03
    7728:	e0 2d       	mov	r30, r0
    772a:	ad 01       	movw	r20, r26
    772c:	09 95       	icall
    772e:	9c 01       	movw	r18, r24
    }
    7730:	c9 01       	movw	r24, r18
    7732:	df 91       	pop	r29
    7734:	cf 91       	pop	r28
    7736:	08 95       	ret

00007738 <Print::printNumber(unsigned long, unsigned char)>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    7738:	4f 92       	push	r4
    773a:	5f 92       	push	r5
    773c:	7f 92       	push	r7
    773e:	8f 92       	push	r8
    7740:	9f 92       	push	r9
    7742:	af 92       	push	r10
    7744:	bf 92       	push	r11
    7746:	cf 92       	push	r12
    7748:	df 92       	push	r13
    774a:	ef 92       	push	r14
    774c:	ff 92       	push	r15
    774e:	0f 93       	push	r16
    7750:	1f 93       	push	r17
    7752:	df 93       	push	r29
    7754:	cf 93       	push	r28
    7756:	cd b7       	in	r28, 0x3d	; 61
    7758:	de b7       	in	r29, 0x3e	; 62
    775a:	a1 97       	sbiw	r28, 0x21	; 33
    775c:	0f b6       	in	r0, 0x3f	; 63
    775e:	f8 94       	cli
    7760:	de bf       	out	0x3e, r29	; 62
    7762:	0f be       	out	0x3f, r0	; 63
    7764:	cd bf       	out	0x3d, r28	; 61
    7766:	2c 01       	movw	r4, r24
    7768:	74 2e       	mov	r7, r20
    776a:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    776c:	22 30       	cpi	r18, 0x02	; 2
    776e:	08 f4       	brcc	.+2      	; 0x7772 <Print::printNumber(unsigned long, unsigned char)+0x3a>
    7770:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    7772:	19 a2       	std	Y+33, r1	; 0x21
    7774:	31 e2       	ldi	r19, 0x21	; 33
    7776:	c3 2e       	mov	r12, r19
    7778:	d1 2c       	mov	r13, r1
    777a:	cc 0e       	add	r12, r28
    777c:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    777e:	82 2e       	mov	r8, r18
    7780:	99 24       	eor	r9, r9
    7782:	aa 24       	eor	r10, r10
    7784:	bb 24       	eor	r11, r11
    7786:	67 2d       	mov	r22, r7
    7788:	75 2f       	mov	r23, r21
    778a:	a5 01       	movw	r20, r10
    778c:	94 01       	movw	r18, r8
    778e:	0e 94 de 3d 	call	0x7bbc	; 0x7bbc <__udivmodsi4>
    7792:	79 01       	movw	r14, r18
    7794:	8a 01       	movw	r16, r20
    char c = m - base * n;
    7796:	c8 01       	movw	r24, r16
    7798:	b7 01       	movw	r22, r14
    779a:	a5 01       	movw	r20, r10
    779c:	94 01       	movw	r18, r8
    779e:	0e 94 98 3d 	call	0x7b30	; 0x7b30 <__mulsi3>
    77a2:	47 2d       	mov	r20, r7
    77a4:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    77a6:	08 94       	sec
    77a8:	c1 08       	sbc	r12, r1
    77aa:	d1 08       	sbc	r13, r1
    77ac:	4a 30       	cpi	r20, 0x0A	; 10
    77ae:	14 f4       	brge	.+4      	; 0x77b4 <Print::printNumber(unsigned long, unsigned char)+0x7c>
    77b0:	40 5d       	subi	r20, 0xD0	; 208
    77b2:	01 c0       	rjmp	.+2      	; 0x77b6 <Print::printNumber(unsigned long, unsigned char)+0x7e>
    77b4:	49 5c       	subi	r20, 0xC9	; 201
    77b6:	f6 01       	movw	r30, r12
    77b8:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    77ba:	e1 14       	cp	r14, r1
    77bc:	f1 04       	cpc	r15, r1
    77be:	01 05       	cpc	r16, r1
    77c0:	11 05       	cpc	r17, r1
    77c2:	21 f0       	breq	.+8      	; 0x77cc <Print::printNumber(unsigned long, unsigned char)+0x94>
    77c4:	7e 2c       	mov	r7, r14
    77c6:	5f 2d       	mov	r21, r15
    77c8:	c8 01       	movw	r24, r16
    77ca:	dd cf       	rjmp	.-70     	; 0x7786 <Print::printNumber(unsigned long, unsigned char)+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    77cc:	c2 01       	movw	r24, r4
    77ce:	b6 01       	movw	r22, r12
    77d0:	0e 94 80 3b 	call	0x7700	; 0x7700 <Print::write(char const*)>
}
    77d4:	a1 96       	adiw	r28, 0x21	; 33
    77d6:	0f b6       	in	r0, 0x3f	; 63
    77d8:	f8 94       	cli
    77da:	de bf       	out	0x3e, r29	; 62
    77dc:	0f be       	out	0x3f, r0	; 63
    77de:	cd bf       	out	0x3d, r28	; 61
    77e0:	cf 91       	pop	r28
    77e2:	df 91       	pop	r29
    77e4:	1f 91       	pop	r17
    77e6:	0f 91       	pop	r16
    77e8:	ff 90       	pop	r15
    77ea:	ef 90       	pop	r14
    77ec:	df 90       	pop	r13
    77ee:	cf 90       	pop	r12
    77f0:	bf 90       	pop	r11
    77f2:	af 90       	pop	r10
    77f4:	9f 90       	pop	r9
    77f6:	8f 90       	pop	r8
    77f8:	7f 90       	pop	r7
    77fa:	5f 90       	pop	r5
    77fc:	4f 90       	pop	r4
    77fe:	08 95       	ret

00007800 <Print::print(unsigned long, int)>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
    7800:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
    7802:	21 15       	cp	r18, r1
    7804:	31 05       	cpc	r19, r1
    7806:	41 f4       	brne	.+16     	; 0x7818 <Print::print(unsigned long, int)+0x18>
    7808:	ed 91       	ld	r30, X+
    780a:	fc 91       	ld	r31, X
    780c:	01 90       	ld	r0, Z+
    780e:	f0 81       	ld	r31, Z
    7810:	e0 2d       	mov	r30, r0
    7812:	64 2f       	mov	r22, r20
    7814:	09 95       	icall
    7816:	08 95       	ret
  else return printNumber(n, base);
    7818:	0e 94 9c 3b 	call	0x7738	; 0x7738 <Print::printNumber(unsigned long, unsigned char)>
}
    781c:	08 95       	ret

0000781e <Print::print(unsigned int, int)>:
size_t Print::print(int n, int base)
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
    781e:	ef 92       	push	r14
    7820:	ff 92       	push	r15
    7822:	0f 93       	push	r16
    7824:	1f 93       	push	r17
    7826:	9a 01       	movw	r18, r20
{
  return print((unsigned long) n, base);
    7828:	7b 01       	movw	r14, r22
    782a:	00 e0       	ldi	r16, 0x00	; 0
    782c:	10 e0       	ldi	r17, 0x00	; 0
    782e:	b8 01       	movw	r22, r16
    7830:	a7 01       	movw	r20, r14
    7832:	0e 94 00 3c 	call	0x7800	; 0x7800 <Print::print(unsigned long, int)>
}
    7836:	1f 91       	pop	r17
    7838:	0f 91       	pop	r16
    783a:	ff 90       	pop	r15
    783c:	ef 90       	pop	r14
    783e:	08 95       	ret

00007840 <Print::print(unsigned char, int)>:
size_t Print::print(char c)
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
    7840:	ef 92       	push	r14
    7842:	ff 92       	push	r15
    7844:	0f 93       	push	r16
    7846:	1f 93       	push	r17
    7848:	9a 01       	movw	r18, r20
{
  return print((unsigned long) b, base);
    784a:	e6 2e       	mov	r14, r22
    784c:	ff 24       	eor	r15, r15
    784e:	00 e0       	ldi	r16, 0x00	; 0
    7850:	10 e0       	ldi	r17, 0x00	; 0
    7852:	b8 01       	movw	r22, r16
    7854:	a7 01       	movw	r20, r14
    7856:	0e 94 00 3c 	call	0x7800	; 0x7800 <Print::print(unsigned long, int)>
}
    785a:	1f 91       	pop	r17
    785c:	0f 91       	pop	r16
    785e:	ff 90       	pop	r15
    7860:	ef 90       	pop	r14
    7862:	08 95       	ret

00007864 <Print::print(long, int)>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
    7864:	cf 92       	push	r12
    7866:	df 92       	push	r13
    7868:	ef 92       	push	r14
    786a:	ff 92       	push	r15
    786c:	0f 93       	push	r16
    786e:	1f 93       	push	r17
    7870:	cf 93       	push	r28
    7872:	df 93       	push	r29
    7874:	ec 01       	movw	r28, r24
    7876:	6a 01       	movw	r12, r20
    7878:	7b 01       	movw	r14, r22
{
  if (base == 0) {
    787a:	21 15       	cp	r18, r1
    787c:	31 05       	cpc	r19, r1
    787e:	41 f4       	brne	.+16     	; 0x7890 <Print::print(long, int)+0x2c>
    return write(n);
    7880:	e8 81       	ld	r30, Y
    7882:	f9 81       	ldd	r31, Y+1	; 0x01
    7884:	01 90       	ld	r0, Z+
    7886:	f0 81       	ld	r31, Z
    7888:	e0 2d       	mov	r30, r0
    788a:	64 2f       	mov	r22, r20
    788c:	09 95       	icall
    788e:	1f c0       	rjmp	.+62     	; 0x78ce <Print::print(long, int)+0x6a>
  } else if (base == 10) {
    7890:	2a 30       	cpi	r18, 0x0A	; 10
    7892:	31 05       	cpc	r19, r1
    7894:	d1 f4       	brne	.+52     	; 0x78ca <Print::print(long, int)+0x66>
    if (n < 0) {
    7896:	77 ff       	sbrs	r23, 7
    7898:	17 c0       	rjmp	.+46     	; 0x78c8 <Print::print(long, int)+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    789a:	e8 81       	ld	r30, Y
    789c:	f9 81       	ldd	r31, Y+1	; 0x01
    789e:	01 90       	ld	r0, Z+
    78a0:	f0 81       	ld	r31, Z
    78a2:	e0 2d       	mov	r30, r0
    78a4:	6d e2       	ldi	r22, 0x2D	; 45
    78a6:	09 95       	icall
    78a8:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    78aa:	44 27       	eor	r20, r20
    78ac:	55 27       	eor	r21, r21
    78ae:	ba 01       	movw	r22, r20
    78b0:	4c 19       	sub	r20, r12
    78b2:	5d 09       	sbc	r21, r13
    78b4:	6e 09       	sbc	r22, r14
    78b6:	7f 09       	sbc	r23, r15
    78b8:	ce 01       	movw	r24, r28
    78ba:	2a e0       	ldi	r18, 0x0A	; 10
    78bc:	0e 94 9c 3b 	call	0x7738	; 0x7738 <Print::printNumber(unsigned long, unsigned char)>
    78c0:	98 01       	movw	r18, r16
    78c2:	28 0f       	add	r18, r24
    78c4:	39 1f       	adc	r19, r25
    78c6:	04 c0       	rjmp	.+8      	; 0x78d0 <Print::print(long, int)+0x6c>
    }
    return printNumber(n, 10);
    78c8:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    78ca:	0e 94 9c 3b 	call	0x7738	; 0x7738 <Print::printNumber(unsigned long, unsigned char)>
    78ce:	9c 01       	movw	r18, r24
  }
}
    78d0:	c9 01       	movw	r24, r18
    78d2:	df 91       	pop	r29
    78d4:	cf 91       	pop	r28
    78d6:	1f 91       	pop	r17
    78d8:	0f 91       	pop	r16
    78da:	ff 90       	pop	r15
    78dc:	ef 90       	pop	r14
    78de:	df 90       	pop	r13
    78e0:	cf 90       	pop	r12
    78e2:	08 95       	ret

000078e4 <Print::print(int, int)>:
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
    78e4:	ef 92       	push	r14
    78e6:	ff 92       	push	r15
    78e8:	0f 93       	push	r16
    78ea:	1f 93       	push	r17
    78ec:	7b 01       	movw	r14, r22
    78ee:	9a 01       	movw	r18, r20
{
  return print((long) n, base);
    78f0:	00 27       	eor	r16, r16
    78f2:	f7 fc       	sbrc	r15, 7
    78f4:	00 95       	com	r16
    78f6:	10 2f       	mov	r17, r16
    78f8:	b8 01       	movw	r22, r16
    78fa:	a7 01       	movw	r20, r14
    78fc:	0e 94 32 3c 	call	0x7864	; 0x7864 <Print::print(long, int)>
}
    7900:	1f 91       	pop	r17
    7902:	0f 91       	pop	r16
    7904:	ff 90       	pop	r15
    7906:	ef 90       	pop	r14
    7908:	08 95       	ret

0000790a <Print::print(char const*)>:
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    790a:	0e 94 80 3b 	call	0x7700	; 0x7700 <Print::write(char const*)>
}
    790e:	08 95       	ret

00007910 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    7910:	1f 92       	push	r1
    7912:	0f 92       	push	r0
    7914:	0f b6       	in	r0, 0x3f	; 63
    7916:	0f 92       	push	r0
    7918:	11 24       	eor	r1, r1
    791a:	2f 93       	push	r18
    791c:	3f 93       	push	r19
    791e:	4f 93       	push	r20
    7920:	5f 93       	push	r21
    7922:	6f 93       	push	r22
    7924:	7f 93       	push	r23
    7926:	8f 93       	push	r24
    7928:	9f 93       	push	r25
    792a:	af 93       	push	r26
    792c:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    792e:	20 91 40 05 	lds	r18, 0x0540
    7932:	30 91 41 05 	lds	r19, 0x0541
    7936:	40 91 42 05 	lds	r20, 0x0542
    793a:	50 91 43 05 	lds	r21, 0x0543
	unsigned char f = timer0_fract;
    793e:	70 91 44 05 	lds	r23, 0x0544

	m += MILLIS_INC;
    7942:	da 01       	movw	r26, r20
    7944:	c9 01       	movw	r24, r18
    7946:	40 96       	adiw	r24, 0x10	; 16
    7948:	a1 1d       	adc	r26, r1
    794a:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    794c:	67 2f       	mov	r22, r23
    794e:	60 5d       	subi	r22, 0xD0	; 208
	if (f >= FRACT_MAX) {
    7950:	6d 37       	cpi	r22, 0x7D	; 125
    7952:	30 f0       	brcs	.+12     	; 0x7960 <__vector_16+0x50>
		f -= FRACT_MAX;
    7954:	6d 57       	subi	r22, 0x7D	; 125
		m += 1;
    7956:	da 01       	movw	r26, r20
    7958:	c9 01       	movw	r24, r18
    795a:	41 96       	adiw	r24, 0x11	; 17
    795c:	a1 1d       	adc	r26, r1
    795e:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    7960:	60 93 44 05 	sts	0x0544, r22
	timer0_millis = m;
    7964:	80 93 40 05 	sts	0x0540, r24
    7968:	90 93 41 05 	sts	0x0541, r25
    796c:	a0 93 42 05 	sts	0x0542, r26
    7970:	b0 93 43 05 	sts	0x0543, r27
	timer0_overflow_count++;
    7974:	80 91 3c 05 	lds	r24, 0x053C
    7978:	90 91 3d 05 	lds	r25, 0x053D
    797c:	a0 91 3e 05 	lds	r26, 0x053E
    7980:	b0 91 3f 05 	lds	r27, 0x053F
    7984:	01 96       	adiw	r24, 0x01	; 1
    7986:	a1 1d       	adc	r26, r1
    7988:	b1 1d       	adc	r27, r1
    798a:	80 93 3c 05 	sts	0x053C, r24
    798e:	90 93 3d 05 	sts	0x053D, r25
    7992:	a0 93 3e 05 	sts	0x053E, r26
    7996:	b0 93 3f 05 	sts	0x053F, r27
}
    799a:	bf 91       	pop	r27
    799c:	af 91       	pop	r26
    799e:	9f 91       	pop	r25
    79a0:	8f 91       	pop	r24
    79a2:	7f 91       	pop	r23
    79a4:	6f 91       	pop	r22
    79a6:	5f 91       	pop	r21
    79a8:	4f 91       	pop	r20
    79aa:	3f 91       	pop	r19
    79ac:	2f 91       	pop	r18
    79ae:	0f 90       	pop	r0
    79b0:	0f be       	out	0x3f, r0	; 63
    79b2:	0f 90       	pop	r0
    79b4:	1f 90       	pop	r1
    79b6:	18 95       	reti

000079b8 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    79b8:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    79ba:	84 b5       	in	r24, 0x24	; 36
    79bc:	82 60       	ori	r24, 0x02	; 2
    79be:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    79c0:	84 b5       	in	r24, 0x24	; 36
    79c2:	81 60       	ori	r24, 0x01	; 1
    79c4:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    79c6:	85 b5       	in	r24, 0x25	; 37
    79c8:	82 60       	ori	r24, 0x02	; 2
    79ca:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    79cc:	85 b5       	in	r24, 0x25	; 37
    79ce:	81 60       	ori	r24, 0x01	; 1
    79d0:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    79d2:	ee e6       	ldi	r30, 0x6E	; 110
    79d4:	f0 e0       	ldi	r31, 0x00	; 0
    79d6:	80 81       	ld	r24, Z
    79d8:	81 60       	ori	r24, 0x01	; 1
    79da:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    79dc:	e1 e8       	ldi	r30, 0x81	; 129
    79de:	f0 e0       	ldi	r31, 0x00	; 0
    79e0:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    79e2:	80 81       	ld	r24, Z
    79e4:	82 60       	ori	r24, 0x02	; 2
    79e6:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    79e8:	e0 e8       	ldi	r30, 0x80	; 128
    79ea:	f0 e0       	ldi	r31, 0x00	; 0
    79ec:	80 81       	ld	r24, Z
    79ee:	81 60       	ori	r24, 0x01	; 1
    79f0:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    79f2:	e1 eb       	ldi	r30, 0xB1	; 177
    79f4:	f0 e0       	ldi	r31, 0x00	; 0
    79f6:	80 81       	ld	r24, Z
    79f8:	84 60       	ori	r24, 0x04	; 4
    79fa:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    79fc:	e0 eb       	ldi	r30, 0xB0	; 176
    79fe:	f0 e0       	ldi	r31, 0x00	; 0
    7a00:	80 81       	ld	r24, Z
    7a02:	81 60       	ori	r24, 0x01	; 1
    7a04:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    7a06:	ea e7       	ldi	r30, 0x7A	; 122
    7a08:	f0 e0       	ldi	r31, 0x00	; 0
    7a0a:	80 81       	ld	r24, Z
    7a0c:	84 60       	ori	r24, 0x04	; 4
    7a0e:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    7a10:	80 81       	ld	r24, Z
    7a12:	82 60       	ori	r24, 0x02	; 2
    7a14:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    7a16:	80 81       	ld	r24, Z
    7a18:	81 60       	ori	r24, 0x01	; 1
    7a1a:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    7a1c:	80 81       	ld	r24, Z
    7a1e:	80 68       	ori	r24, 0x80	; 128
    7a20:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    7a22:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    7a26:	08 95       	ret

00007a28 <__floatunsisf>:
    7a28:	e8 94       	clt
    7a2a:	09 c0       	rjmp	.+18     	; 0x7a3e <__floatsisf+0x12>

00007a2c <__floatsisf>:
    7a2c:	97 fb       	bst	r25, 7
    7a2e:	3e f4       	brtc	.+14     	; 0x7a3e <__floatsisf+0x12>
    7a30:	90 95       	com	r25
    7a32:	80 95       	com	r24
    7a34:	70 95       	com	r23
    7a36:	61 95       	neg	r22
    7a38:	7f 4f       	sbci	r23, 0xFF	; 255
    7a3a:	8f 4f       	sbci	r24, 0xFF	; 255
    7a3c:	9f 4f       	sbci	r25, 0xFF	; 255
    7a3e:	99 23       	and	r25, r25
    7a40:	a9 f0       	breq	.+42     	; 0x7a6c <__floatsisf+0x40>
    7a42:	f9 2f       	mov	r31, r25
    7a44:	96 e9       	ldi	r25, 0x96	; 150
    7a46:	bb 27       	eor	r27, r27
    7a48:	93 95       	inc	r25
    7a4a:	f6 95       	lsr	r31
    7a4c:	87 95       	ror	r24
    7a4e:	77 95       	ror	r23
    7a50:	67 95       	ror	r22
    7a52:	b7 95       	ror	r27
    7a54:	f1 11       	cpse	r31, r1
    7a56:	f8 cf       	rjmp	.-16     	; 0x7a48 <__floatsisf+0x1c>
    7a58:	fa f4       	brpl	.+62     	; 0x7a98 <__floatsisf+0x6c>
    7a5a:	bb 0f       	add	r27, r27
    7a5c:	11 f4       	brne	.+4      	; 0x7a62 <__floatsisf+0x36>
    7a5e:	60 ff       	sbrs	r22, 0
    7a60:	1b c0       	rjmp	.+54     	; 0x7a98 <__floatsisf+0x6c>
    7a62:	6f 5f       	subi	r22, 0xFF	; 255
    7a64:	7f 4f       	sbci	r23, 0xFF	; 255
    7a66:	8f 4f       	sbci	r24, 0xFF	; 255
    7a68:	9f 4f       	sbci	r25, 0xFF	; 255
    7a6a:	16 c0       	rjmp	.+44     	; 0x7a98 <__floatsisf+0x6c>
    7a6c:	88 23       	and	r24, r24
    7a6e:	11 f0       	breq	.+4      	; 0x7a74 <__floatsisf+0x48>
    7a70:	96 e9       	ldi	r25, 0x96	; 150
    7a72:	11 c0       	rjmp	.+34     	; 0x7a96 <__floatsisf+0x6a>
    7a74:	77 23       	and	r23, r23
    7a76:	21 f0       	breq	.+8      	; 0x7a80 <__floatsisf+0x54>
    7a78:	9e e8       	ldi	r25, 0x8E	; 142
    7a7a:	87 2f       	mov	r24, r23
    7a7c:	76 2f       	mov	r23, r22
    7a7e:	05 c0       	rjmp	.+10     	; 0x7a8a <__floatsisf+0x5e>
    7a80:	66 23       	and	r22, r22
    7a82:	71 f0       	breq	.+28     	; 0x7aa0 <__floatsisf+0x74>
    7a84:	96 e8       	ldi	r25, 0x86	; 134
    7a86:	86 2f       	mov	r24, r22
    7a88:	70 e0       	ldi	r23, 0x00	; 0
    7a8a:	60 e0       	ldi	r22, 0x00	; 0
    7a8c:	2a f0       	brmi	.+10     	; 0x7a98 <__floatsisf+0x6c>
    7a8e:	9a 95       	dec	r25
    7a90:	66 0f       	add	r22, r22
    7a92:	77 1f       	adc	r23, r23
    7a94:	88 1f       	adc	r24, r24
    7a96:	da f7       	brpl	.-10     	; 0x7a8e <__floatsisf+0x62>
    7a98:	88 0f       	add	r24, r24
    7a9a:	96 95       	lsr	r25
    7a9c:	87 95       	ror	r24
    7a9e:	97 f9       	bld	r25, 7
    7aa0:	08 95       	ret

00007aa2 <fmax>:
    7aa2:	99 0f       	add	r25, r25
    7aa4:	bb 0b       	sbc	r27, r27
    7aa6:	55 0f       	add	r21, r21
    7aa8:	aa 0b       	sbc	r26, r26
    7aaa:	e0 e8       	ldi	r30, 0x80	; 128
    7aac:	fe ef       	ldi	r31, 0xFE	; 254
    7aae:	16 16       	cp	r1, r22
    7ab0:	17 06       	cpc	r1, r23
    7ab2:	e8 07       	cpc	r30, r24
    7ab4:	f9 07       	cpc	r31, r25
    7ab6:	70 f0       	brcs	.+28     	; 0x7ad4 <fmax+0x32>
    7ab8:	12 16       	cp	r1, r18
    7aba:	13 06       	cpc	r1, r19
    7abc:	e4 07       	cpc	r30, r20
    7abe:	f5 07       	cpc	r31, r21
    7ac0:	60 f0       	brcs	.+24     	; 0x7ada <fmax+0x38>
    7ac2:	ba 17       	cp	r27, r26
    7ac4:	3c f0       	brlt	.+14     	; 0x7ad4 <fmax+0x32>
    7ac6:	49 f4       	brne	.+18     	; 0x7ada <fmax+0x38>
    7ac8:	62 17       	cp	r22, r18
    7aca:	73 07       	cpc	r23, r19
    7acc:	84 07       	cpc	r24, r20
    7ace:	95 07       	cpc	r25, r21
    7ad0:	a7 95       	ror	r26
    7ad2:	1b f4       	brvc	.+6      	; 0x7ada <fmax+0x38>
    7ad4:	b9 01       	movw	r22, r18
    7ad6:	ca 01       	movw	r24, r20
    7ad8:	ba 2f       	mov	r27, r26
    7ada:	b6 95       	lsr	r27
    7adc:	97 95       	ror	r25
    7ade:	08 95       	ret

00007ae0 <__fp_cmp>:
    7ae0:	99 0f       	add	r25, r25
    7ae2:	00 08       	sbc	r0, r0
    7ae4:	55 0f       	add	r21, r21
    7ae6:	aa 0b       	sbc	r26, r26
    7ae8:	e0 e8       	ldi	r30, 0x80	; 128
    7aea:	fe ef       	ldi	r31, 0xFE	; 254
    7aec:	16 16       	cp	r1, r22
    7aee:	17 06       	cpc	r1, r23
    7af0:	e8 07       	cpc	r30, r24
    7af2:	f9 07       	cpc	r31, r25
    7af4:	c0 f0       	brcs	.+48     	; 0x7b26 <__fp_cmp+0x46>
    7af6:	12 16       	cp	r1, r18
    7af8:	13 06       	cpc	r1, r19
    7afa:	e4 07       	cpc	r30, r20
    7afc:	f5 07       	cpc	r31, r21
    7afe:	98 f0       	brcs	.+38     	; 0x7b26 <__fp_cmp+0x46>
    7b00:	62 1b       	sub	r22, r18
    7b02:	73 0b       	sbc	r23, r19
    7b04:	84 0b       	sbc	r24, r20
    7b06:	95 0b       	sbc	r25, r21
    7b08:	39 f4       	brne	.+14     	; 0x7b18 <__fp_cmp+0x38>
    7b0a:	0a 26       	eor	r0, r26
    7b0c:	61 f0       	breq	.+24     	; 0x7b26 <__fp_cmp+0x46>
    7b0e:	23 2b       	or	r18, r19
    7b10:	24 2b       	or	r18, r20
    7b12:	25 2b       	or	r18, r21
    7b14:	21 f4       	brne	.+8      	; 0x7b1e <__fp_cmp+0x3e>
    7b16:	08 95       	ret
    7b18:	0a 26       	eor	r0, r26
    7b1a:	09 f4       	brne	.+2      	; 0x7b1e <__fp_cmp+0x3e>
    7b1c:	a1 40       	sbci	r26, 0x01	; 1
    7b1e:	a6 95       	lsr	r26
    7b20:	8f ef       	ldi	r24, 0xFF	; 255
    7b22:	81 1d       	adc	r24, r1
    7b24:	81 1d       	adc	r24, r1
    7b26:	08 95       	ret

00007b28 <__gesf2>:
    7b28:	db df       	rcall	.-74     	; 0x7ae0 <__fp_cmp>
    7b2a:	08 f4       	brcc	.+2      	; 0x7b2e <__gesf2+0x6>
    7b2c:	8f ef       	ldi	r24, 0xFF	; 255
    7b2e:	08 95       	ret

00007b30 <__mulsi3>:
    7b30:	62 9f       	mul	r22, r18
    7b32:	d0 01       	movw	r26, r0
    7b34:	73 9f       	mul	r23, r19
    7b36:	f0 01       	movw	r30, r0
    7b38:	82 9f       	mul	r24, r18
    7b3a:	e0 0d       	add	r30, r0
    7b3c:	f1 1d       	adc	r31, r1
    7b3e:	64 9f       	mul	r22, r20
    7b40:	e0 0d       	add	r30, r0
    7b42:	f1 1d       	adc	r31, r1
    7b44:	92 9f       	mul	r25, r18
    7b46:	f0 0d       	add	r31, r0
    7b48:	83 9f       	mul	r24, r19
    7b4a:	f0 0d       	add	r31, r0
    7b4c:	74 9f       	mul	r23, r20
    7b4e:	f0 0d       	add	r31, r0
    7b50:	65 9f       	mul	r22, r21
    7b52:	f0 0d       	add	r31, r0
    7b54:	99 27       	eor	r25, r25
    7b56:	72 9f       	mul	r23, r18
    7b58:	b0 0d       	add	r27, r0
    7b5a:	e1 1d       	adc	r30, r1
    7b5c:	f9 1f       	adc	r31, r25
    7b5e:	63 9f       	mul	r22, r19
    7b60:	b0 0d       	add	r27, r0
    7b62:	e1 1d       	adc	r30, r1
    7b64:	f9 1f       	adc	r31, r25
    7b66:	bd 01       	movw	r22, r26
    7b68:	cf 01       	movw	r24, r30
    7b6a:	11 24       	eor	r1, r1
    7b6c:	08 95       	ret

00007b6e <__udivmodhi4>:
    7b6e:	aa 1b       	sub	r26, r26
    7b70:	bb 1b       	sub	r27, r27
    7b72:	51 e1       	ldi	r21, 0x11	; 17
    7b74:	07 c0       	rjmp	.+14     	; 0x7b84 <__udivmodhi4_ep>

00007b76 <__udivmodhi4_loop>:
    7b76:	aa 1f       	adc	r26, r26
    7b78:	bb 1f       	adc	r27, r27
    7b7a:	a6 17       	cp	r26, r22
    7b7c:	b7 07       	cpc	r27, r23
    7b7e:	10 f0       	brcs	.+4      	; 0x7b84 <__udivmodhi4_ep>
    7b80:	a6 1b       	sub	r26, r22
    7b82:	b7 0b       	sbc	r27, r23

00007b84 <__udivmodhi4_ep>:
    7b84:	88 1f       	adc	r24, r24
    7b86:	99 1f       	adc	r25, r25
    7b88:	5a 95       	dec	r21
    7b8a:	a9 f7       	brne	.-22     	; 0x7b76 <__udivmodhi4_loop>
    7b8c:	80 95       	com	r24
    7b8e:	90 95       	com	r25
    7b90:	bc 01       	movw	r22, r24
    7b92:	cd 01       	movw	r24, r26
    7b94:	08 95       	ret

00007b96 <__divmodhi4>:
    7b96:	97 fb       	bst	r25, 7
    7b98:	09 2e       	mov	r0, r25
    7b9a:	07 26       	eor	r0, r23
    7b9c:	0a d0       	rcall	.+20     	; 0x7bb2 <__divmodhi4_neg1>
    7b9e:	77 fd       	sbrc	r23, 7
    7ba0:	04 d0       	rcall	.+8      	; 0x7baa <__divmodhi4_neg2>
    7ba2:	e5 df       	rcall	.-54     	; 0x7b6e <__udivmodhi4>
    7ba4:	06 d0       	rcall	.+12     	; 0x7bb2 <__divmodhi4_neg1>
    7ba6:	00 20       	and	r0, r0
    7ba8:	1a f4       	brpl	.+6      	; 0x7bb0 <__divmodhi4_exit>

00007baa <__divmodhi4_neg2>:
    7baa:	70 95       	com	r23
    7bac:	61 95       	neg	r22
    7bae:	7f 4f       	sbci	r23, 0xFF	; 255

00007bb0 <__divmodhi4_exit>:
    7bb0:	08 95       	ret

00007bb2 <__divmodhi4_neg1>:
    7bb2:	f6 f7       	brtc	.-4      	; 0x7bb0 <__divmodhi4_exit>
    7bb4:	90 95       	com	r25
    7bb6:	81 95       	neg	r24
    7bb8:	9f 4f       	sbci	r25, 0xFF	; 255
    7bba:	08 95       	ret

00007bbc <__udivmodsi4>:
    7bbc:	a1 e2       	ldi	r26, 0x21	; 33
    7bbe:	1a 2e       	mov	r1, r26
    7bc0:	aa 1b       	sub	r26, r26
    7bc2:	bb 1b       	sub	r27, r27
    7bc4:	fd 01       	movw	r30, r26
    7bc6:	0d c0       	rjmp	.+26     	; 0x7be2 <__udivmodsi4_ep>

00007bc8 <__udivmodsi4_loop>:
    7bc8:	aa 1f       	adc	r26, r26
    7bca:	bb 1f       	adc	r27, r27
    7bcc:	ee 1f       	adc	r30, r30
    7bce:	ff 1f       	adc	r31, r31
    7bd0:	a2 17       	cp	r26, r18
    7bd2:	b3 07       	cpc	r27, r19
    7bd4:	e4 07       	cpc	r30, r20
    7bd6:	f5 07       	cpc	r31, r21
    7bd8:	20 f0       	brcs	.+8      	; 0x7be2 <__udivmodsi4_ep>
    7bda:	a2 1b       	sub	r26, r18
    7bdc:	b3 0b       	sbc	r27, r19
    7bde:	e4 0b       	sbc	r30, r20
    7be0:	f5 0b       	sbc	r31, r21

00007be2 <__udivmodsi4_ep>:
    7be2:	66 1f       	adc	r22, r22
    7be4:	77 1f       	adc	r23, r23
    7be6:	88 1f       	adc	r24, r24
    7be8:	99 1f       	adc	r25, r25
    7bea:	1a 94       	dec	r1
    7bec:	69 f7       	brne	.-38     	; 0x7bc8 <__udivmodsi4_loop>
    7bee:	60 95       	com	r22
    7bf0:	70 95       	com	r23
    7bf2:	80 95       	com	r24
    7bf4:	90 95       	com	r25
    7bf6:	9b 01       	movw	r18, r22
    7bf8:	ac 01       	movw	r20, r24
    7bfa:	bd 01       	movw	r22, r26
    7bfc:	cf 01       	movw	r24, r30
    7bfe:	08 95       	ret

00007c00 <__divmodsi4>:
    7c00:	97 fb       	bst	r25, 7
    7c02:	09 2e       	mov	r0, r25
    7c04:	05 26       	eor	r0, r21
    7c06:	0e d0       	rcall	.+28     	; 0x7c24 <__divmodsi4_neg1>
    7c08:	57 fd       	sbrc	r21, 7
    7c0a:	04 d0       	rcall	.+8      	; 0x7c14 <__divmodsi4_neg2>
    7c0c:	d7 df       	rcall	.-82     	; 0x7bbc <__udivmodsi4>
    7c0e:	0a d0       	rcall	.+20     	; 0x7c24 <__divmodsi4_neg1>
    7c10:	00 1c       	adc	r0, r0
    7c12:	38 f4       	brcc	.+14     	; 0x7c22 <__divmodsi4_exit>

00007c14 <__divmodsi4_neg2>:
    7c14:	50 95       	com	r21
    7c16:	40 95       	com	r20
    7c18:	30 95       	com	r19
    7c1a:	21 95       	neg	r18
    7c1c:	3f 4f       	sbci	r19, 0xFF	; 255
    7c1e:	4f 4f       	sbci	r20, 0xFF	; 255
    7c20:	5f 4f       	sbci	r21, 0xFF	; 255

00007c22 <__divmodsi4_exit>:
    7c22:	08 95       	ret

00007c24 <__divmodsi4_neg1>:
    7c24:	f6 f7       	brtc	.-4      	; 0x7c22 <__divmodsi4_exit>
    7c26:	90 95       	com	r25
    7c28:	80 95       	com	r24
    7c2a:	70 95       	com	r23
    7c2c:	61 95       	neg	r22
    7c2e:	7f 4f       	sbci	r23, 0xFF	; 255
    7c30:	8f 4f       	sbci	r24, 0xFF	; 255
    7c32:	9f 4f       	sbci	r25, 0xFF	; 255
    7c34:	08 95       	ret

00007c36 <__tablejump2__>:
    7c36:	ee 0f       	add	r30, r30
    7c38:	ff 1f       	adc	r31, r31

00007c3a <__tablejump__>:
    7c3a:	05 90       	lpm	r0, Z+
    7c3c:	f4 91       	lpm	r31, Z+
    7c3e:	e0 2d       	mov	r30, r0
    7c40:	09 94       	ijmp

00007c42 <toupper>:
    7c42:	91 11       	cpse	r25, r1
    7c44:	08 95       	ret
    7c46:	81 56       	subi	r24, 0x61	; 97
    7c48:	8a 51       	subi	r24, 0x1A	; 26
    7c4a:	08 f4       	brcc	.+2      	; 0x7c4e <toupper+0xc>
    7c4c:	80 52       	subi	r24, 0x20	; 32
    7c4e:	85 58       	subi	r24, 0x85	; 133
    7c50:	08 95       	ret

00007c52 <_exit>:
    7c52:	f8 94       	cli

00007c54 <__stop_program>:
    7c54:	ff cf       	rjmp	.-2      	; 0x7c54 <__stop_program>
