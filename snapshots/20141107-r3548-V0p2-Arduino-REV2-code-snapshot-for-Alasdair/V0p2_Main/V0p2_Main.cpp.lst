
/var/folders/km/s_tzntf16nzg5bdh5n6g6lz40000gn/T/build3708409309747220748.tmp/V0p2_Main.cpp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  0000734c  000073e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000734c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000239  00800132  00800132  00007412  2**0
                  ALLOC
  3 .debug_aranges 00000f08  00000000  00000000  00007412  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000229b  00000000  00000000  0000831a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00012bc9  00000000  00000000  0000a5b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00004397  00000000  00000000  0001d17e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000118e0  00000000  00000000  00021515  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000019b0  00000000  00000000  00032df8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00005674  00000000  00000000  000347a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00008af7  00000000  00000000  00039e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 000d0909  00000000  00000000  00042913  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001098  00000000  00000000  0011321c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
// Get 'WARM' target in C; no lower than getFROSTTargetC() returns, strictly positive, in range [MIN_TARGET_C,MAX_TARGET_C].
#if defined(TEMP_POT_AVAILABLE)
// Derived from temperature pot position, 0 for coldest (most eco), 255 for hotest (comfort).
// Temp ranges from eco-1C to comfort+1C levels across full (reduced jitter) [0,255] pot range.
// Should be fastest computing values at extreme ends of range.
uint8_t computeWARMTargetC(const uint8_t pot)
       0:	0c 94 bc 03 	jmp	0x778	; 0x778 <__ctors_end>
#endif


// True if FHT8V valve is believed to be open under instruction from this system; false if not in sync.
static bool FHT8V_isValveOpen;
bool getFHT8V_isValveOpen() { return(syncedWithFHT8V && FHT8V_isValveOpen); }
       4:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__bad_interrupt>
        if(0 != (datum & i)) { bit = !bit; }
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
        }
    return(crc & 0x7f);
    }
       8:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__bad_interrupt>


// If ADC was disabled, power it up, do Serial.begin(), and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownSerial() may be advisable.
bool powerUpADCIfDisabled()
       c:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__bad_interrupt>
// Get local time hours from RTC [0,23].
uint_least8_t getHoursLT() { return(getMinutesSinceMidnightLT() / 60); }

// Get whole days since the start of 2000/01/01 (ie the midnight between 1999 and 2000), local time.
// This will roll in about 2179, by which time I will not care.
uint_least16_t getDaysSince1999LT()
      10:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__bad_interrupt>
    { eeprom_smart_erase_byte((uint8_t*)(EE_START_SIMPLE_SCHEDULE0_ON + which)); }
  }

// Returns true if any simple schedule is set, false otherwise.
// This implementation just checks for any valid schedule 'on' time.
bool isAnySimpleScheduleSet()
      14:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__bad_interrupt>

// Reduced-noise temp pot value in range [0,255].
static uint8_t tempPotReducedNoise;

// Return previously-read (with readTempPot()) temperature pot user control level in range [0,1023]; very fast.
int getTempPot() { return(tempPot); }
      18:	0c 94 d7 15 	jmp	0x2bae	; 0x2bae <__vector_6>
// TODO: this is not fully 'debounced', ie could flip between WARM/BAKE with button held down.
bool inBakeModeDebounced() { return(isWarmModeDebounced && (0 != bakeCountdownM)); }
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
// Start/restart 'bake' mode and timeout.
void startBake() { isWarmMode = true; bakeCountdownM = BAKE_MAX_M; }
      1c:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__bad_interrupt>
  // set address of targeted slave
  txAddress = address;
  // reset tx buffer iterator vars
  txBufferIndex = 0;
  txBufferLength = 0;
}
      20:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__bad_interrupt>
 */
void twi_setAddress(uint8_t address)
{
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
}
      24:	0c 94 a7 15 	jmp	0x2b4e	; 0x2b4e <__vector_9>

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
      28:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__bad_interrupt>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
      2c:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__bad_interrupt>
  size_t n = print(ifsh);
  n += println();
  return n;
}

size_t Print::print(const Printable& x)
      30:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__bad_interrupt>
	timer0_millis = m;
	timer0_overflow_count++;
}

unsigned long millis()
{
      34:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__bad_interrupt>
      38:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__bad_interrupt>
      3c:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__bad_interrupt>
      40:	0c 94 77 37 	jmp	0x6eee	; 0x6eee <__vector_16>
      44:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__bad_interrupt>
      48:	0c 94 6a 33 	jmp	0x66d4	; 0x66d4 <__vector_18>
      4c:	0c 94 b8 33 	jmp	0x6770	; 0x6770 <__vector_19>
      50:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__bad_interrupt>
      54:	0c 94 90 16 	jmp	0x2d20	; 0x2d20 <__vector_21>
      58:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__bad_interrupt>
      5c:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__bad_interrupt>
      60:	0c 94 27 31 	jmp	0x624e	; 0x624e <__vector_24>
      64:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__bad_interrupt>
      68:	b6 24       	eor	r11, r6
      6a:	f1 24       	eor	r15, r1
      6c:	ca 24       	eor	r12, r10
      6e:	5a 25       	eor	r21, r10
      70:	b2 24       	eor	r11, r2
      72:	5f 25       	eor	r21, r15
      74:	9b 25       	eor	r25, r11
      76:	b2 24       	eor	r11, r2
      78:	b2 24       	eor	r11, r2
      7a:	9f 25       	eor	r25, r15
      7c:	b2 24       	eor	r11, r2
      7e:	b2 24       	eor	r11, r2
      80:	b3 25       	eor	r27, r3
      82:	c7 25       	eor	r28, r7
      84:	0a 26       	eor	r0, r26
      86:	cd 24       	eor	r12, r13
      88:	11 26       	eor	r1, r17
      8a:	6a 26       	eor	r6, r26
      8c:	b2 24       	eor	r11, r2
      8e:	98 26       	eor	r9, r24
      90:	9b 26       	eor	r9, r27
      92:	a3 26       	eor	r10, r19
      94:	b2 24       	eor	r11, r2
      96:	ba 26       	eor	r11, r26

00000098 <FHT8V_RFM22_Reg_Values>:
      98:	06 00 08 00 0b 15 0c 12 30 00 33 06 34 08 35 10     ........0.3.4.5.
      a8:	36 aa 37 cc 38 cc 39 cc 6d 0d 6e 28 6f f5 70 20     6.7.8.9.m.n(o.p 
      b8:	71 21 72 20 73 00 74 00 75 73 76 64 77 00 79 23     q!r s.t.usvdw.y#
      c8:	7a 01 1c c1 1d 40 1e 0a 1f 03 20 96 21 00 22 da     z....@.... .!.".
      d8:	23 74 24 00 25 dc 2a 24 2c 28 2d fa 2e 29 69 60     #t$.%.*$,(-..)i`
      e8:	ff ff                                               ..

000000ea <FHT8VPollSyncAndTX_Next(bool)::__c>:
      ea:	46 48 54 38 56 20 54 58 00                          FHT8V TX.

000000f3 <FHT8VPollSyncAndTX_Next(bool)::__c>:
      f3:	46 48 54 38 56 50 6f 6c 6c 53 79 6e 63 41 6e 64     FHT8VPollSyncAnd
     103:	54 58 5f 4e 65 78 74 28 29 20 63 61 6c 6c 65 64     TX_Next() called
     113:	20 74 6f 6f 20 6f 66 74 65 6e 00                     too often.

0000011e <doSync(bool)::__c>:
     11e:	46 48 54 38 56 20 53 59 4e 43 20 46 49 4e 41 4c     FHT8V SYNC FINAL
	...

0000012f <doSync(bool)::__c>:
     12f:	46 48 54 38 56 20 53 59 4e 43 2e 2e 2e 00           FHT8V SYNC....

0000013d <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)::__c>:
     13d:	46 48 54 38 56 20 66 72 61 6d 65 20 6e 6f 74 20     FHT8V frame not 
     14d:	69 6e 69 74 69 61 6c 69 73 65 64 00                 initialised.

00000159 <FHT8VPollSyncAndTX_First(bool)::__c>:
     159:	46 48 54 38 56 20 54 58 00                          FHT8V TX.

00000162 <FHT8VPollSyncAndTX_First(bool)::__c>:
     162:	46 48 54 38 56 20 68 73 20 63 6f 75 6e 74 20 30     FHT8V hs count 0
     172:	20 74 6f 6f 20 73 6f 6f 6e 00                        too soon.

0000017c <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)::__c>:
     17c:	54 58 20 67 65 6e 20 74 6f 6f 20 6c 61 72 67 65     TX gen too large
	...

0000018d <sprintfRawSimpleJSONMessage(char*, __FlashStringHelper const*, ...)::__c>:
     18d:	3a 20 00                                            : .

00000190 <sprintfRawSimpleJSONMessage(char*, __FlashStringHelper const*, ...)::__c>:
     190:	72 61 77 20 4a 53 4f 4e 20 6f 76 65 72 72 75 6e     raw JSON overrun
     1a0:	3a 20 00                                            : .

000001a3 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)::__c>:
     1a3:	6d 73 67 20 67 65 6e 20 65 72 72 00                 msg gen err.

000001af <ensureIDCreated(bool)::__c>:
     1af:	20 2e 2e 2e 20 00                                    ... .

000001b5 <ensureIDCreated(bool)::__c>:
     1b5:	49 6e 76 61 6c 69 64 20 49 44 20 62 79 74 65 20     Invalid ID byte 
	...

000001c6 <ensureIDCreated(bool)::__c>:
     1c6:	20 2e 2e 2e 20 00                                    ... .

000001cc <ensureIDCreated(bool)::__c>:
     1cc:	53 65 74 74 69 6e 67 20 49 44 20 62 79 74 65 20     Setting ID byte 
	...

000001dd <RFM22CheckConnected()::__c>:
     1dd:	52 46 4d 32 32 20 62 61 64 20 74 79 70 65 3a 20     RFM22 bad type: 
	...

000001ee <RFM22CheckConnected()::__c>:
     1ee:	52 46 4d 32 32 20 62 61 64 20 76 65 72 73 69 6f     RFM22 bad versio
     1fe:	6e 3a 20 00                                         n: .

00000202 <pollCLI(unsigned char)::__c>:
     202:	4f 4b 00                                            OK.

00000205 <pollCLI(unsigned char)::__c>:
     205:	4e 6f 74 20 66 69 6e 69 73 68 65 64 2e 00           Not finished..

00000213 <pollCLI(unsigned char)::__c>:
     213:	5a 61 70 70 65 64 2e 00                             Zapped..

0000021b <pollCLI(unsigned char)::__c>:
     21b:	53 6d 61 72 74 20 77 61 72 6d 69 6e 67 3a 20 00     Smart warming: .

0000022b <pollCLI(unsigned char)::__c>:
     22b:	4f 76 65 72 72 75 6e 73 3a 20 00                    Overruns: .

00000236 <pollCLI(unsigned char)::__c>:
     236:	52 65 73 65 74 73 3a 20 00                          Resets: .

0000023f <pollCLI(unsigned char)::__c>:
     23f:	3f 20 66 6f 72 20 43 4c 49 20 68 65 6c 70 00        ? for CLI help.

0000024e <dumpCLIUsage(unsigned char)::__c>:
     24e:	5a 61 70 20 73 74 61 74 73 00                       Zap stats.

00000258 <dumpCLIUsage(unsigned char)::__c>:
     258:	58 6d 69 74 20 73 65 63 75 72 69 74 79 20 6c 65     Xmit security le
     268:	76 65 6c 3b 20 30 20 61 6c 77 61 79 73 2c 20 32     vel; 0 always, 2
     278:	35 35 20 6e 65 76 65 72 00                          55 never.

00000281 <dumpCLIUsage(unsigned char)::__c>:
     281:	63 6f 64 65 2f 62 6f 61 72 64 20 56 65 72 73 69     code/board Versi
     291:	6f 6e 00                                            on.

00000294 <dumpCLIUsage(unsigned char)::__c>:
     294:	57 61 72 6d 00                                      Warm.

00000299 <dumpCLIUsage(unsigned char)::__c>:
     299:	73 65 74 20 32 34 68 20 54 69 6d 65 00              set 24h Time.

000002a6 <dumpCLIUsage(unsigned char)::__c>:
     2a6:	54 20 48 48 20 4d 4d 00                             T HH MM.

000002ae <dumpCLIUsage(unsigned char)::__c>:
     2ae:	73 68 6f 77 20 53 74 61 74 75 73 20 61 6e 64 20     show Status and 
     2be:	73 6d 61 72 74 20 77 61 72 6d 69 6e 67 20 66 6f     smart warming fo
     2ce:	72 20 6e 65 78 74 20 32 34 68 00                    r next 24h.

000002d9 <dumpCLIUsage(unsigned char)::__c>:
     2d9:	64 75 6d 70 20 52 61 77 20 73 74 61 74 73 20 73     dump Raw stats s
     2e9:	65 74 20 4e 00                                      et N.

000002ee <dumpCLIUsage(unsigned char)::__c>:
     2ee:	52 20 4e 00                                         R N.

000002f2 <dumpCLIUsage(unsigned char)::__c>:
     2f2:	51 75 69 63 6b 20 48 65 61 74 00                    Quick Heat.

000002fd <dumpCLIUsage(unsigned char)::__c>:
     2fd:	72 65 73 65 74 20 4f 70 65 6e 20 25 00              reset Open %.

0000030a <dumpCLIUsage(unsigned char)::__c>:
     30a:	6d 69 6e 20 25 20 66 6f 72 20 76 61 6c 76 65 20     min % for valve 
     31a:	74 6f 20 62 65 20 4f 70 65 6e 00                    to be Open.

00000325 <dumpCLIUsage(unsigned char)::__c>:
     325:	4f 20 50 50 00                                      O PP.

0000032a <dumpCLIUsage(unsigned char)::__c>:
     32a:	50 72 6f 67 72 61 6d 3a 20 77 61 72 6d 20 64 61     Program: warm da
     33a:	69 6c 79 20 73 74 61 72 74 69 6e 67 20 61 74 20     ily starting at 
     34a:	48 48 20 4d 4d 20 73 63 68 65 64 75 6c 65 20 53     HH MM schedule S
	...

0000035b <dumpCLIUsage(unsigned char)::__c>:
     35b:	50 20 48 48 20 4d 4d 20 53 00                       P HH MM S.

00000365 <dumpCLIUsage(unsigned char)::__c>:
     365:	4c 65 61 72 6e 20 64 61 69 6c 79 20 77 61 72 6d     Learn daily warm
     375:	20 6e 6f 77 2c 20 63 6c 65 61 72 20 69 66 20 69      now, clear if i
     385:	6e 20 66 72 6f 73 74 20 6d 6f 64 65 2c 20 73 63     n frost mode, sc
     395:	68 65 64 75 6c 65 20 53 00                          hedule S.

0000039e <dumpCLIUsage(unsigned char)::__c>:
     39e:	4c 20 53 00                                         L S.

000003a2 <dumpCLIUsage(unsigned char)::__c>:
     3a2:	73 65 74 20 6e 65 77 20 49 44 00                    set new ID.

000003ad <dumpCLIUsage(unsigned char)::__c>:
     3ad:	63 6c 65 61 72 20 48 6f 75 73 65 20 63 6f 64 65     clear House code
     3bd:	73 00                                               s.

000003bf <dumpCLIUsage(unsigned char)::__c>:
     3bf:	73 65 74 20 46 48 54 38 56 20 48 6f 75 73 65 20     set FHT8V House 
     3cf:	63 6f 64 65 73 20 31 26 32 00                       codes 1&2.

000003d9 <dumpCLIUsage(unsigned char)::__c>:
     3d9:	48 20 48 31 20 48 32 00                             H H1 H2.

000003e1 <dumpCLIUsage(unsigned char)::__c>:
     3e1:	46 72 6f 73 74 00                                   Frost.

000003e7 <dumpCLIUsage(unsigned char)::__c>:
     3e7:	45 78 69 74 20 43 4c 49 00                          Exit CLI.

000003f0 <dumpCLIUsage(unsigned char)::__c>:
     3f0:	44 75 6d 70 20 73 74 61 74 73 20 73 65 74 20 4e     Dump stats set N
	...

00000401 <dumpCLIUsage(unsigned char)::__c>:
     401:	44 20 4e 00                                         D N.

00000405 <dumpCLIUsage(unsigned char)::__c>:
     405:	43 65 6e 74 72 61 6c 20 68 75 62 20 3e 3d 4d 20     Central hub >=M 
     415:	6d 69 6e 73 20 6f 6e 2c 20 30 20 6f 66 66 00        mins on, 0 off.

00000424 <dumpCLIUsage(unsigned char)::__c>:
     424:	43 20 4d 00                                         C M.

00000428 <dumpCLIUsage(unsigned char)::__c>:
     428:	74 68 69 73 20 68 65 6c 70 00                       this help.

00000432 <InvalidIgnored()::__c>:
     432:	49 6e 76 61 6c 69 64 2c 20 69 67 6e 6f 72 65 64     Invalid, ignored
     442:	2e 00                                               ..

00000444 <serialStatusReport()::__c>:
     444:	3b 4d 00                                            ;M.

00000447 <serialStatusReport()::__c>:
     447:	3b 48 43 00                                         ;HC.

0000044b <serialStatusReport()::__c>:
     44b:	3b 4f 00                                            ;O.

0000044e <serialStatusReport()::__c>:
     44e:	3b 52 00                                            ;R.

00000451 <serialStatusReport()::__c>:
     451:	3b 4c 00                                            ;L.

00000454 <serialStatusReport()::__c>:
     454:	3b 58 00                                            ;X.

00000457 <serialStatusReport()::__c>:
     457:	3b 56 00                                            ;V.

0000045a <serialStatusReport()::__c>:
     45a:	3b 50 6c 6f 77 00                                   ;Plow.

00000460 <serialStatusReport()::__c>:
     460:	3b 49 00                                            ;I.

00000463 <loop::__c>:
     463:	21 45 52 52 4f 52 3a 20 6c 6f 6f 70 20 6f 76 65     !ERROR: loop ove
     473:	72 72 75 6e 20 00                                   rrun .

00000479 <loop::__c>:
     479:	42 6f 69 6c 65 72 20 6f 6e 2c 20 73 20 6c 65 66     Boiler on, s lef
     489:	74 3a 20 00                                         t: .

0000048d <loop::__c>:
     48d:	42 61 72 65 20 73 74 61 74 73 20 54 58 00           Bare stats TX.

0000049b <loop::__c>:
     49b:	4a 53 4f 4e 20 73 65 6e 74 3a 20 00                 JSON sent: .

000004a7 <loop::__c>:
     4a7:	4d 73 67 20 4a 53 4f 4e 20 67 65 6e 20 65 72 72     Msg JSON gen err
     4b7:	21 00                                               !.

000004b9 <loop::__c>:
     4b9:	7b 22 69 64 22 3a 22 25 30 2e 32 68 68 78 25 30     {"id":"%0.2hhx%0
     4c9:	2e 32 68 68 78 22 2c 22 74 7c 43 31 36 22 3a 25     .2hhx","t|C16":%
     4d9:	64 2c 22 52 48 7c 25 25 22 3a 25 68 68 64 2c 22     d,"RH|%%":%hhd,"
     4e9:	6c 22 3a 25 64 2c 22 6f 22 3a 25 68 68 64 2c 22     l":%d,"o":%hhd,"
     4f9:	62 7c 63 56 22 3a 25 64 7d 00                       b|cV":%d}.

00000503 <loop::__c>:
     503:	3f 6e 65 61 72 20 6f 76 65 72 72 75 6e 00           ?near overrun.

00000511 <loop::__c>:
     511:	52 43 66 48 30 00                                   RCfH0.

00000517 <loop::__c>:
     517:	52 43 66 48 31 00                                   RCfH1.

0000051d <loop::__c>:
     51d:	21 52 58 65 72 72 20 46 00                          !RXerr F.

00000526 <loop::__c>:
     526:	43 66 48 20 00                                      CfH .

0000052b <loop::__c>:
     52b:	3b 4f 00                                            ;O.

0000052e <loop::__c>:
     52e:	3b 4c 00                                            ;L.

00000531 <loop::__c>:
     531:	3b 50 00                                            ;P.

00000534 <loop::__c>:
     534:	3b 54 00                                            ;T.

00000537 <setup::__c>:
     537:	3f 20 61 74 20 43 4c 49 20 70 72 6f 6d 70 74 20     ? at CLI prompt 
     547:	66 6f 72 20 68 65 6c 70 00                          for help.

00000550 <setup::__c>:
     550:	49 6e 76 61 6c 69 64 20 49 44 20 61 6e 64 20 63     Invalid ID and c
     560:	61 6e 6e 6f 74 20 72 65 73 65 74 2c 20 73 6f 72     annot reset, sor
     570:	72 79 2e 00                                         ry..

00000574 <setup::__c>:
     574:	43 6f 6d 70 75 74 69 6e 67 20 69 6e 69 74 69 61     Computing initia
     584:	6c 20 74 61 72 67 65 74 2f 64 65 6d 61 6e 64 2e     l target/demand.
     594:	2e 2e 00                                            ...

00000597 <setup::__c>:
     597:	43 20 2f 20 00                                      C / .

0000059c <setup::__c>:
     59c:	49 6e 74 20 74 65 6d 70 3a 20 00                    Int temp: .

000005a7 <setup::__c>:
     5a7:	6d 56 00                                            mV.

000005aa <setup::__c>:
     5aa:	56 63 63 3a 20 00                                   Vcc: .

000005b0 <setup::__c>:
     5b0:	74 65 6d 70 20 70 6f 74 3a 20 00                    temp pot: .

000005bb <setup::__c>:
     5bb:	52 48 25 3a 20 00                                   RH%: .

000005c1 <setup::__c>:
     5c1:	74 65 6d 70 3a 20 00                                temp: .

000005c8 <setup::__c>:
     5c8:	6c 69 67 68 74 3a 20 00                             light: .

000005d0 <setup::__c>:
     5d0:	46 72 65 65 20 52 41 4d 3a 20 00                    Free RAM: .

000005db <setup::__c>:
     5db:	4f 76 65 72 72 75 6e 73 3a 20 00                    Overruns: .

000005e6 <setup::__c>:
     5e6:	52 65 73 65 74 73 3a 20 00                          Resets: .

000005ef <setup::__c>:
     5ef:	44 45 42 55 47 20 6d 6f 64 65 20 77 69 74 68 20     DEBUG mode with 
     5ff:	73 65 72 69 61 6c 20 6c 6f 67 67 69 6e 67 00        serial logging.

0000060e <setup::__c>:
     60e:	0d 0a 4f 70 65 6e 54 52 56 20 62 6f 6f 74 69 6e     ..OpenTRV bootin
     61e:	67 3a 20 00                                         g: .

00000622 <optionalPOST()::__c>:
     622:	73 6c 6f 77 20 52 54 43 20 63 6c 6f 63 6b 20 4f     slow RTC clock O
     632:	4b 00                                               K.

00000634 <optionalPOST()::__c>:
     634:	58 54 41 4c 20 64 65 61 64 00                       XTAL dead.

0000063e <optionalPOST()::__c>:
     63e:	41 73 79 6e 63 20 33 32 37 36 38 48 7a 20 63 6c     Async 32768Hz cl
     64e:	6f 63 6b 20 6d 61 79 20 6e 6f 74 20 62 65 20 72     ock may not be r
     65e:	75 6e 6e 69 6e 67 21 00                             unning!.

00000666 <optionalPOST()::__c>:
     666:	53 6c 65 65 70 69 6e 67 20 74 6f 20 6c 65 74 20     Sleeping to let 
     676:	61 73 79 6e 63 20 33 32 37 36 38 48 7a 20 63 6c     async 32768Hz cl
     686:	6f 63 6b 20 73 74 61 72 74 2e 2e 2e 00              ock start....

00000693 <optionalPOST()::__c>:
     693:	4c 32 20 73 74 75 63 6b 00                          L2 stuck.

0000069c <optionalPOST()::__c>:
     69c:	4c 20 73 74 75 63 6b 00                             L stuck.

000006a4 <optionalPOST()::__c>:
     6a4:	4d 20 73 74 75 63 6b 00                             M stuck.

000006ac <optionalPOST()::__c>:
     6ac:	52 61 64 69 6f 20 4f 4b 2c 20 63 68 65 63 6b 69     Radio OK, checki
     6bc:	6e 67 20 62 75 74 74 6f 6e 73 2f 73 65 6e 73 6f     ng buttons/senso
     6cc:	72 73 20 61 6e 64 20 78 74 61 6c 00                 rs and xtal.

000006d8 <optionalPOST()::__c>:
     6d8:	28 55 73 69 6e 67 20 52 46 4d 32 32 2e 29 00        (Using RFM22.).

000006e7 <posPOST(unsigned char, __FlashStringHelper const*)::__c>:
     6e7:	3a 20 00                                            : .

000006ea <posPOST(unsigned char, __FlashStringHelper const*)::__c>:
     6ea:	70 6f 73 50 4f 53 54 3a 20 00                       posPOST: .

000006f4 <serialPrintlnBuildVersion()::__c>:
     6f4:	20 31 34 3a 34 35 3a 31 33 00                        14:45:13.

000006fe <serialPrintlnBuildVersion()::__c>:
     6fe:	3b 20 63 6f 64 65 20 00                             ; code .

00000706 <serialPrintlnBuildVersion()::__c>:
     706:	62 6f 61 72 64 20 56 30 2e 32 20 52 45 56 00        board V0.2 REV.

00000715 <port_to_mode_PGM>:
     715:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000071f <port_to_output_PGM>:
     71f:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000729 <port_to_input_PGM>:
     729:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000733 <digital_pin_to_port_PGM>:
     733:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     743:	03 03 03 03                                         ....

00000747 <digital_pin_to_bit_mask_PGM>:
     747:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     757:	04 08 10 20                                         ... 

0000075b <digital_pin_to_timer_PGM>:
     75b:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     76b:	00 00 00 00 00                                      .....

00000770 <__ctors_start>:
     770:	30 1a       	sub	r3, r16
     772:	62 28       	or	r6, r2
     774:	c3 2f       	mov	r28, r19
     776:	81 35       	cpi	r24, 0x51	; 81

00000778 <__ctors_end>:
     778:	11 24       	eor	r1, r1
     77a:	1f be       	out	0x3f, r1	; 63
     77c:	cf ef       	ldi	r28, 0xFF	; 255
     77e:	d8 e0       	ldi	r29, 0x08	; 8
     780:	de bf       	out	0x3e, r29	; 62
     782:	cd bf       	out	0x3d, r28	; 61

00000784 <__do_copy_data>:
     784:	11 e0       	ldi	r17, 0x01	; 1
     786:	a0 e0       	ldi	r26, 0x00	; 0
     788:	b1 e0       	ldi	r27, 0x01	; 1
     78a:	ec e4       	ldi	r30, 0x4C	; 76
     78c:	f3 e7       	ldi	r31, 0x73	; 115
     78e:	02 c0       	rjmp	.+4      	; 0x794 <.do_copy_data_start>

00000790 <.do_copy_data_loop>:
     790:	05 90       	lpm	r0, Z+
     792:	0d 92       	st	X+, r0

00000794 <.do_copy_data_start>:
     794:	a2 33       	cpi	r26, 0x32	; 50
     796:	b1 07       	cpc	r27, r17
     798:	d9 f7       	brne	.-10     	; 0x790 <.do_copy_data_loop>

0000079a <__do_clear_bss>:
     79a:	13 e0       	ldi	r17, 0x03	; 3
     79c:	a2 e3       	ldi	r26, 0x32	; 50
     79e:	b1 e0       	ldi	r27, 0x01	; 1
     7a0:	01 c0       	rjmp	.+2      	; 0x7a4 <.do_clear_bss_start>

000007a2 <.do_clear_bss_loop>:
     7a2:	1d 92       	st	X+, r1

000007a4 <.do_clear_bss_start>:
     7a4:	ab 36       	cpi	r26, 0x6B	; 107
     7a6:	b1 07       	cpc	r27, r17
     7a8:	e1 f7       	brne	.-8      	; 0x7a2 <.do_clear_bss_loop>

000007aa <__do_global_ctors>:
     7aa:	17 e0       	ldi	r17, 0x07	; 7
     7ac:	c8 e7       	ldi	r28, 0x78	; 120
     7ae:	d7 e0       	ldi	r29, 0x07	; 7
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <.do_global_ctors_start>

000007b2 <.do_global_ctors_loop>:
     7b2:	22 97       	sbiw	r28, 0x02	; 2
     7b4:	fe 01       	movw	r30, r28
     7b6:	0e 94 61 39 	call	0x72c2	; 0x72c2 <__tablejump__>

000007ba <.do_global_ctors_start>:
     7ba:	c0 37       	cpi	r28, 0x70	; 112
     7bc:	d1 07       	cpc	r29, r17
     7be:	c9 f7       	brne	.-14     	; 0x7b2 <.do_global_ctors_loop>
     7c0:	0e 94 d7 35 	call	0x6bae	; 0x6bae <main>
     7c4:	0c 94 a4 39 	jmp	0x7348	; 0x7348 <_exit>

000007c8 <__bad_interrupt>:
     7c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000007cc <abort>:
     7cc:	81 e0       	ldi	r24, 0x01	; 1
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	f8 94       	cli
     7d2:	0c 94 a4 39 	jmp	0x7348	; 0x7348 <_exit>

000007d6 <atoi>:
     7d6:	fc 01       	movw	r30, r24
     7d8:	88 27       	eor	r24, r24
     7da:	99 27       	eor	r25, r25
     7dc:	e8 94       	clt
     7de:	21 91       	ld	r18, Z+
     7e0:	20 32       	cpi	r18, 0x20	; 32
     7e2:	e9 f3       	breq	.-6      	; 0x7de <atoi+0x8>
     7e4:	29 30       	cpi	r18, 0x09	; 9
     7e6:	10 f0       	brcs	.+4      	; 0x7ec <atoi+0x16>
     7e8:	2e 30       	cpi	r18, 0x0E	; 14
     7ea:	c8 f3       	brcs	.-14     	; 0x7de <atoi+0x8>
     7ec:	2b 32       	cpi	r18, 0x2B	; 43
     7ee:	41 f0       	breq	.+16     	; 0x800 <atoi+0x2a>
     7f0:	2d 32       	cpi	r18, 0x2D	; 45
     7f2:	39 f4       	brne	.+14     	; 0x802 <atoi+0x2c>
     7f4:	68 94       	set
     7f6:	04 c0       	rjmp	.+8      	; 0x800 <atoi+0x2a>
     7f8:	0e 94 76 04 	call	0x8ec	; 0x8ec <__mulhi_const_10>
     7fc:	82 0f       	add	r24, r18
     7fe:	91 1d       	adc	r25, r1
     800:	21 91       	ld	r18, Z+
     802:	20 53       	subi	r18, 0x30	; 48
     804:	2a 30       	cpi	r18, 0x0A	; 10
     806:	c0 f3       	brcs	.-16     	; 0x7f8 <atoi+0x22>
     808:	1e f4       	brtc	.+6      	; 0x810 <atoi+0x3a>
     80a:	90 95       	com	r25
     80c:	81 95       	neg	r24
     80e:	9f 4f       	sbci	r25, 0xFF	; 255
     810:	08 95       	ret

00000812 <strlen_P>:
     812:	fc 01       	movw	r30, r24
     814:	05 90       	lpm	r0, Z+
     816:	00 20       	and	r0, r0
     818:	e9 f7       	brne	.-6      	; 0x814 <strlen_P+0x2>
     81a:	80 95       	com	r24
     81c:	90 95       	com	r25
     81e:	8e 0f       	add	r24, r30
     820:	9f 1f       	adc	r25, r31
     822:	08 95       	ret

00000824 <memset>:
     824:	dc 01       	movw	r26, r24
     826:	01 c0       	rjmp	.+2      	; 0x82a <memset+0x6>
     828:	6d 93       	st	X+, r22
     82a:	41 50       	subi	r20, 0x01	; 1
     82c:	50 40       	sbci	r21, 0x00	; 0
     82e:	e0 f7       	brcc	.-8      	; 0x828 <memset+0x4>
     830:	08 95       	ret

00000832 <strtok_r>:
     832:	00 97       	sbiw	r24, 0x00	; 0
     834:	31 f4       	brne	.+12     	; 0x842 <strtok_r+0x10>
     836:	da 01       	movw	r26, r20
     838:	8d 91       	ld	r24, X+
     83a:	9c 91       	ld	r25, X
     83c:	00 97       	sbiw	r24, 0x00	; 0
     83e:	09 f4       	brne	.+2      	; 0x842 <strtok_r+0x10>
     840:	0e c0       	rjmp	.+28     	; 0x85e <strtok_r+0x2c>
     842:	dc 01       	movw	r26, r24
     844:	fb 01       	movw	r30, r22
     846:	3d 91       	ld	r19, X+
     848:	21 91       	ld	r18, Z+
     84a:	22 23       	and	r18, r18
     84c:	19 f0       	breq	.+6      	; 0x854 <strtok_r+0x22>
     84e:	32 17       	cp	r19, r18
     850:	c9 f3       	breq	.-14     	; 0x844 <strtok_r+0x12>
     852:	fa cf       	rjmp	.-12     	; 0x848 <strtok_r+0x16>
     854:	33 23       	and	r19, r19
     856:	31 f4       	brne	.+12     	; 0x864 <strtok_r+0x32>
     858:	da 01       	movw	r26, r20
     85a:	1d 92       	st	X+, r1
     85c:	1c 92       	st	X, r1
     85e:	88 27       	eor	r24, r24
     860:	99 27       	eor	r25, r25
     862:	08 95       	ret
     864:	11 97       	sbiw	r26, 0x01	; 1
     866:	af 93       	push	r26
     868:	bf 93       	push	r27
     86a:	fb 01       	movw	r30, r22
     86c:	3d 91       	ld	r19, X+
     86e:	21 91       	ld	r18, Z+
     870:	32 17       	cp	r19, r18
     872:	71 f4       	brne	.+28     	; 0x890 <strtok_r+0x5e>
     874:	33 23       	and	r19, r19
     876:	21 f4       	brne	.+8      	; 0x880 <strtok_r+0x4e>
     878:	88 27       	eor	r24, r24
     87a:	99 27       	eor	r25, r25
     87c:	11 97       	sbiw	r26, 0x01	; 1
     87e:	02 c0       	rjmp	.+4      	; 0x884 <strtok_r+0x52>
     880:	1e 92       	st	-X, r1
     882:	11 96       	adiw	r26, 0x01	; 1
     884:	fa 01       	movw	r30, r20
     886:	a1 93       	st	Z+, r26
     888:	b0 83       	st	Z, r27
     88a:	9f 91       	pop	r25
     88c:	8f 91       	pop	r24
     88e:	08 95       	ret
     890:	22 23       	and	r18, r18
     892:	69 f7       	brne	.-38     	; 0x86e <strtok_r+0x3c>
     894:	ea cf       	rjmp	.-44     	; 0x86a <strtok_r+0x38>

00000896 <__eerd_word>:
     896:	df 92       	push	r13
     898:	ef 92       	push	r14
     89a:	ff 92       	push	r15
     89c:	0f 93       	push	r16
     89e:	1f 93       	push	r17
     8a0:	7b 01       	movw	r14, r22
     8a2:	8c 01       	movw	r16, r24
     8a4:	fb 01       	movw	r30, r22
     8a6:	09 95       	icall
     8a8:	d8 2e       	mov	r13, r24
     8aa:	c8 01       	movw	r24, r16
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	f7 01       	movw	r30, r14
     8b0:	09 95       	icall
     8b2:	98 2f       	mov	r25, r24
     8b4:	8d 2d       	mov	r24, r13
     8b6:	1f 91       	pop	r17
     8b8:	0f 91       	pop	r16
     8ba:	ff 90       	pop	r15
     8bc:	ef 90       	pop	r14
     8be:	df 90       	pop	r13
     8c0:	08 95       	ret

000008c2 <__eewr_word>:
     8c2:	df 92       	push	r13
     8c4:	ef 92       	push	r14
     8c6:	ff 92       	push	r15
     8c8:	0f 93       	push	r16
     8ca:	1f 93       	push	r17
     8cc:	d7 2e       	mov	r13, r23
     8ce:	7a 01       	movw	r14, r20
     8d0:	8c 01       	movw	r16, r24
     8d2:	fa 01       	movw	r30, r20
     8d4:	09 95       	icall
     8d6:	c8 01       	movw	r24, r16
     8d8:	01 96       	adiw	r24, 0x01	; 1
     8da:	6d 2d       	mov	r22, r13
     8dc:	f7 01       	movw	r30, r14
     8de:	09 95       	icall
     8e0:	1f 91       	pop	r17
     8e2:	0f 91       	pop	r16
     8e4:	ff 90       	pop	r15
     8e6:	ef 90       	pop	r14
     8e8:	df 90       	pop	r13
     8ea:	08 95       	ret

000008ec <__mulhi_const_10>:
     8ec:	7a e0       	ldi	r23, 0x0A	; 10
     8ee:	97 9f       	mul	r25, r23
     8f0:	90 2d       	mov	r25, r0
     8f2:	87 9f       	mul	r24, r23
     8f4:	80 2d       	mov	r24, r0
     8f6:	91 0d       	add	r25, r1
     8f8:	11 24       	eor	r1, r1
     8fa:	08 95       	ret

000008fc <vsnprintf_P>:
     8fc:	ae e0       	ldi	r26, 0x0E	; 14
     8fe:	b0 e0       	ldi	r27, 0x00	; 0
     900:	e4 e8       	ldi	r30, 0x84	; 132
     902:	f4 e0       	ldi	r31, 0x04	; 4
     904:	0c 94 7b 39 	jmp	0x72f6	; 0x72f6 <__prologue_saves__+0x1c>
     908:	8c 01       	movw	r16, r24
     90a:	77 ff       	sbrs	r23, 7
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__stack+0x13>
     90e:	60 e0       	ldi	r22, 0x00	; 0
     910:	70 e8       	ldi	r23, 0x80	; 128
     912:	61 50       	subi	r22, 0x01	; 1
     914:	70 40       	sbci	r23, 0x00	; 0
     916:	7e 83       	std	Y+6, r23	; 0x06
     918:	6d 83       	std	Y+5, r22	; 0x05
     91a:	1a 83       	std	Y+2, r17	; 0x02
     91c:	09 83       	std	Y+1, r16	; 0x01
     91e:	8e e0       	ldi	r24, 0x0E	; 14
     920:	8c 83       	std	Y+4, r24	; 0x04
     922:	ce 01       	movw	r24, r28
     924:	01 96       	adiw	r24, 0x01	; 1
     926:	ba 01       	movw	r22, r20
     928:	a9 01       	movw	r20, r18
     92a:	0e 94 a8 04 	call	0x950	; 0x950 <vfprintf>
     92e:	2d 81       	ldd	r18, Y+5	; 0x05
     930:	3e 81       	ldd	r19, Y+6	; 0x06
     932:	37 fd       	sbrc	r19, 7
     934:	09 c0       	rjmp	.+18     	; 0x948 <__stack+0x49>
     936:	ef 81       	ldd	r30, Y+7	; 0x07
     938:	f8 85       	ldd	r31, Y+8	; 0x08
     93a:	2e 17       	cp	r18, r30
     93c:	3f 07       	cpc	r19, r31
     93e:	0c f4       	brge	.+2      	; 0x942 <__stack+0x43>
     940:	f9 01       	movw	r30, r18
     942:	e0 0f       	add	r30, r16
     944:	f1 1f       	adc	r31, r17
     946:	10 82       	st	Z, r1
     948:	2e 96       	adiw	r28, 0x0e	; 14
     94a:	e4 e0       	ldi	r30, 0x04	; 4
     94c:	0c 94 97 39 	jmp	0x732e	; 0x732e <__epilogue_restores__+0x1c>

00000950 <vfprintf>:
     950:	ab e0       	ldi	r26, 0x0B	; 11
     952:	b0 e0       	ldi	r27, 0x00	; 0
     954:	ee ea       	ldi	r30, 0xAE	; 174
     956:	f4 e0       	ldi	r31, 0x04	; 4
     958:	0c 94 6d 39 	jmp	0x72da	; 0x72da <__prologue_saves__>
     95c:	3c 01       	movw	r6, r24
     95e:	2b 01       	movw	r4, r22
     960:	5a 01       	movw	r10, r20
     962:	fc 01       	movw	r30, r24
     964:	17 82       	std	Z+7, r1	; 0x07
     966:	16 82       	std	Z+6, r1	; 0x06
     968:	83 81       	ldd	r24, Z+3	; 0x03
     96a:	81 fd       	sbrc	r24, 1
     96c:	03 c0       	rjmp	.+6      	; 0x974 <vfprintf+0x24>
     96e:	6f ef       	ldi	r22, 0xFF	; 255
     970:	7f ef       	ldi	r23, 0xFF	; 255
     972:	c6 c1       	rjmp	.+908    	; 0xd00 <vfprintf+0x3b0>
     974:	9a e0       	ldi	r25, 0x0A	; 10
     976:	89 2e       	mov	r8, r25
     978:	1e 01       	movw	r2, r28
     97a:	08 94       	sec
     97c:	21 1c       	adc	r2, r1
     97e:	31 1c       	adc	r3, r1
     980:	f3 01       	movw	r30, r6
     982:	23 81       	ldd	r18, Z+3	; 0x03
     984:	f2 01       	movw	r30, r4
     986:	23 fd       	sbrc	r18, 3
     988:	85 91       	lpm	r24, Z+
     98a:	23 ff       	sbrs	r18, 3
     98c:	81 91       	ld	r24, Z+
     98e:	2f 01       	movw	r4, r30
     990:	88 23       	and	r24, r24
     992:	09 f4       	brne	.+2      	; 0x996 <vfprintf+0x46>
     994:	b2 c1       	rjmp	.+868    	; 0xcfa <vfprintf+0x3aa>
     996:	85 32       	cpi	r24, 0x25	; 37
     998:	39 f4       	brne	.+14     	; 0x9a8 <vfprintf+0x58>
     99a:	23 fd       	sbrc	r18, 3
     99c:	85 91       	lpm	r24, Z+
     99e:	23 ff       	sbrs	r18, 3
     9a0:	81 91       	ld	r24, Z+
     9a2:	2f 01       	movw	r4, r30
     9a4:	85 32       	cpi	r24, 0x25	; 37
     9a6:	29 f4       	brne	.+10     	; 0x9b2 <vfprintf+0x62>
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	b3 01       	movw	r22, r6
     9ac:	0e 94 9b 06 	call	0xd36	; 0xd36 <fputc>
     9b0:	e7 cf       	rjmp	.-50     	; 0x980 <vfprintf+0x30>
     9b2:	98 2f       	mov	r25, r24
     9b4:	ff 24       	eor	r15, r15
     9b6:	ee 24       	eor	r14, r14
     9b8:	99 24       	eor	r9, r9
     9ba:	ff e1       	ldi	r31, 0x1F	; 31
     9bc:	ff 15       	cp	r31, r15
     9be:	d0 f0       	brcs	.+52     	; 0x9f4 <vfprintf+0xa4>
     9c0:	9b 32       	cpi	r25, 0x2B	; 43
     9c2:	69 f0       	breq	.+26     	; 0x9de <vfprintf+0x8e>
     9c4:	9c 32       	cpi	r25, 0x2C	; 44
     9c6:	28 f4       	brcc	.+10     	; 0x9d2 <vfprintf+0x82>
     9c8:	90 32       	cpi	r25, 0x20	; 32
     9ca:	59 f0       	breq	.+22     	; 0x9e2 <vfprintf+0x92>
     9cc:	93 32       	cpi	r25, 0x23	; 35
     9ce:	91 f4       	brne	.+36     	; 0x9f4 <vfprintf+0xa4>
     9d0:	0e c0       	rjmp	.+28     	; 0x9ee <vfprintf+0x9e>
     9d2:	9d 32       	cpi	r25, 0x2D	; 45
     9d4:	49 f0       	breq	.+18     	; 0x9e8 <vfprintf+0x98>
     9d6:	90 33       	cpi	r25, 0x30	; 48
     9d8:	69 f4       	brne	.+26     	; 0x9f4 <vfprintf+0xa4>
     9da:	41 e0       	ldi	r20, 0x01	; 1
     9dc:	24 c0       	rjmp	.+72     	; 0xa26 <vfprintf+0xd6>
     9de:	52 e0       	ldi	r21, 0x02	; 2
     9e0:	f5 2a       	or	r15, r21
     9e2:	84 e0       	ldi	r24, 0x04	; 4
     9e4:	f8 2a       	or	r15, r24
     9e6:	28 c0       	rjmp	.+80     	; 0xa38 <vfprintf+0xe8>
     9e8:	98 e0       	ldi	r25, 0x08	; 8
     9ea:	f9 2a       	or	r15, r25
     9ec:	25 c0       	rjmp	.+74     	; 0xa38 <vfprintf+0xe8>
     9ee:	e0 e1       	ldi	r30, 0x10	; 16
     9f0:	fe 2a       	or	r15, r30
     9f2:	22 c0       	rjmp	.+68     	; 0xa38 <vfprintf+0xe8>
     9f4:	f7 fc       	sbrc	r15, 7
     9f6:	29 c0       	rjmp	.+82     	; 0xa4a <vfprintf+0xfa>
     9f8:	89 2f       	mov	r24, r25
     9fa:	80 53       	subi	r24, 0x30	; 48
     9fc:	8a 30       	cpi	r24, 0x0A	; 10
     9fe:	70 f4       	brcc	.+28     	; 0xa1c <vfprintf+0xcc>
     a00:	f6 fe       	sbrs	r15, 6
     a02:	05 c0       	rjmp	.+10     	; 0xa0e <vfprintf+0xbe>
     a04:	98 9c       	mul	r9, r8
     a06:	90 2c       	mov	r9, r0
     a08:	11 24       	eor	r1, r1
     a0a:	98 0e       	add	r9, r24
     a0c:	15 c0       	rjmp	.+42     	; 0xa38 <vfprintf+0xe8>
     a0e:	e8 9c       	mul	r14, r8
     a10:	e0 2c       	mov	r14, r0
     a12:	11 24       	eor	r1, r1
     a14:	e8 0e       	add	r14, r24
     a16:	f0 e2       	ldi	r31, 0x20	; 32
     a18:	ff 2a       	or	r15, r31
     a1a:	0e c0       	rjmp	.+28     	; 0xa38 <vfprintf+0xe8>
     a1c:	9e 32       	cpi	r25, 0x2E	; 46
     a1e:	29 f4       	brne	.+10     	; 0xa2a <vfprintf+0xda>
     a20:	f6 fc       	sbrc	r15, 6
     a22:	6b c1       	rjmp	.+726    	; 0xcfa <vfprintf+0x3aa>
     a24:	40 e4       	ldi	r20, 0x40	; 64
     a26:	f4 2a       	or	r15, r20
     a28:	07 c0       	rjmp	.+14     	; 0xa38 <vfprintf+0xe8>
     a2a:	9c 36       	cpi	r25, 0x6C	; 108
     a2c:	19 f4       	brne	.+6      	; 0xa34 <vfprintf+0xe4>
     a2e:	50 e8       	ldi	r21, 0x80	; 128
     a30:	f5 2a       	or	r15, r21
     a32:	02 c0       	rjmp	.+4      	; 0xa38 <vfprintf+0xe8>
     a34:	98 36       	cpi	r25, 0x68	; 104
     a36:	49 f4       	brne	.+18     	; 0xa4a <vfprintf+0xfa>
     a38:	f2 01       	movw	r30, r4
     a3a:	23 fd       	sbrc	r18, 3
     a3c:	95 91       	lpm	r25, Z+
     a3e:	23 ff       	sbrs	r18, 3
     a40:	91 91       	ld	r25, Z+
     a42:	2f 01       	movw	r4, r30
     a44:	99 23       	and	r25, r25
     a46:	09 f0       	breq	.+2      	; 0xa4a <vfprintf+0xfa>
     a48:	b8 cf       	rjmp	.-144    	; 0x9ba <vfprintf+0x6a>
     a4a:	89 2f       	mov	r24, r25
     a4c:	85 54       	subi	r24, 0x45	; 69
     a4e:	83 30       	cpi	r24, 0x03	; 3
     a50:	18 f0       	brcs	.+6      	; 0xa58 <vfprintf+0x108>
     a52:	80 52       	subi	r24, 0x20	; 32
     a54:	83 30       	cpi	r24, 0x03	; 3
     a56:	38 f4       	brcc	.+14     	; 0xa66 <vfprintf+0x116>
     a58:	44 e0       	ldi	r20, 0x04	; 4
     a5a:	50 e0       	ldi	r21, 0x00	; 0
     a5c:	a4 0e       	add	r10, r20
     a5e:	b5 1e       	adc	r11, r21
     a60:	5f e3       	ldi	r21, 0x3F	; 63
     a62:	59 83       	std	Y+1, r21	; 0x01
     a64:	0f c0       	rjmp	.+30     	; 0xa84 <vfprintf+0x134>
     a66:	93 36       	cpi	r25, 0x63	; 99
     a68:	31 f0       	breq	.+12     	; 0xa76 <vfprintf+0x126>
     a6a:	93 37       	cpi	r25, 0x73	; 115
     a6c:	79 f0       	breq	.+30     	; 0xa8c <vfprintf+0x13c>
     a6e:	93 35       	cpi	r25, 0x53	; 83
     a70:	09 f0       	breq	.+2      	; 0xa74 <vfprintf+0x124>
     a72:	56 c0       	rjmp	.+172    	; 0xb20 <vfprintf+0x1d0>
     a74:	20 c0       	rjmp	.+64     	; 0xab6 <vfprintf+0x166>
     a76:	f5 01       	movw	r30, r10
     a78:	80 81       	ld	r24, Z
     a7a:	89 83       	std	Y+1, r24	; 0x01
     a7c:	42 e0       	ldi	r20, 0x02	; 2
     a7e:	50 e0       	ldi	r21, 0x00	; 0
     a80:	a4 0e       	add	r10, r20
     a82:	b5 1e       	adc	r11, r21
     a84:	61 01       	movw	r12, r2
     a86:	01 e0       	ldi	r16, 0x01	; 1
     a88:	10 e0       	ldi	r17, 0x00	; 0
     a8a:	12 c0       	rjmp	.+36     	; 0xab0 <vfprintf+0x160>
     a8c:	f5 01       	movw	r30, r10
     a8e:	c0 80       	ld	r12, Z
     a90:	d1 80       	ldd	r13, Z+1	; 0x01
     a92:	f6 fc       	sbrc	r15, 6
     a94:	03 c0       	rjmp	.+6      	; 0xa9c <vfprintf+0x14c>
     a96:	6f ef       	ldi	r22, 0xFF	; 255
     a98:	7f ef       	ldi	r23, 0xFF	; 255
     a9a:	02 c0       	rjmp	.+4      	; 0xaa0 <vfprintf+0x150>
     a9c:	69 2d       	mov	r22, r9
     a9e:	70 e0       	ldi	r23, 0x00	; 0
     aa0:	42 e0       	ldi	r20, 0x02	; 2
     aa2:	50 e0       	ldi	r21, 0x00	; 0
     aa4:	a4 0e       	add	r10, r20
     aa6:	b5 1e       	adc	r11, r21
     aa8:	c6 01       	movw	r24, r12
     aaa:	0e 94 90 06 	call	0xd20	; 0xd20 <strnlen>
     aae:	8c 01       	movw	r16, r24
     ab0:	5f e7       	ldi	r21, 0x7F	; 127
     ab2:	f5 22       	and	r15, r21
     ab4:	14 c0       	rjmp	.+40     	; 0xade <vfprintf+0x18e>
     ab6:	f5 01       	movw	r30, r10
     ab8:	c0 80       	ld	r12, Z
     aba:	d1 80       	ldd	r13, Z+1	; 0x01
     abc:	f6 fc       	sbrc	r15, 6
     abe:	03 c0       	rjmp	.+6      	; 0xac6 <vfprintf+0x176>
     ac0:	6f ef       	ldi	r22, 0xFF	; 255
     ac2:	7f ef       	ldi	r23, 0xFF	; 255
     ac4:	02 c0       	rjmp	.+4      	; 0xaca <vfprintf+0x17a>
     ac6:	69 2d       	mov	r22, r9
     ac8:	70 e0       	ldi	r23, 0x00	; 0
     aca:	42 e0       	ldi	r20, 0x02	; 2
     acc:	50 e0       	ldi	r21, 0x00	; 0
     ace:	a4 0e       	add	r10, r20
     ad0:	b5 1e       	adc	r11, r21
     ad2:	c6 01       	movw	r24, r12
     ad4:	0e 94 85 06 	call	0xd0a	; 0xd0a <strnlen_P>
     ad8:	8c 01       	movw	r16, r24
     ada:	50 e8       	ldi	r21, 0x80	; 128
     adc:	f5 2a       	or	r15, r21
     ade:	f3 fe       	sbrs	r15, 3
     ae0:	07 c0       	rjmp	.+14     	; 0xaf0 <vfprintf+0x1a0>
     ae2:	1a c0       	rjmp	.+52     	; 0xb18 <vfprintf+0x1c8>
     ae4:	80 e2       	ldi	r24, 0x20	; 32
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	b3 01       	movw	r22, r6
     aea:	0e 94 9b 06 	call	0xd36	; 0xd36 <fputc>
     aee:	ea 94       	dec	r14
     af0:	8e 2d       	mov	r24, r14
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	08 17       	cp	r16, r24
     af6:	19 07       	cpc	r17, r25
     af8:	a8 f3       	brcs	.-22     	; 0xae4 <vfprintf+0x194>
     afa:	0e c0       	rjmp	.+28     	; 0xb18 <vfprintf+0x1c8>
     afc:	f6 01       	movw	r30, r12
     afe:	f7 fc       	sbrc	r15, 7
     b00:	85 91       	lpm	r24, Z+
     b02:	f7 fe       	sbrs	r15, 7
     b04:	81 91       	ld	r24, Z+
     b06:	6f 01       	movw	r12, r30
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	b3 01       	movw	r22, r6
     b0c:	0e 94 9b 06 	call	0xd36	; 0xd36 <fputc>
     b10:	e1 10       	cpse	r14, r1
     b12:	ea 94       	dec	r14
     b14:	01 50       	subi	r16, 0x01	; 1
     b16:	10 40       	sbci	r17, 0x00	; 0
     b18:	01 15       	cp	r16, r1
     b1a:	11 05       	cpc	r17, r1
     b1c:	79 f7       	brne	.-34     	; 0xafc <vfprintf+0x1ac>
     b1e:	ea c0       	rjmp	.+468    	; 0xcf4 <vfprintf+0x3a4>
     b20:	94 36       	cpi	r25, 0x64	; 100
     b22:	11 f0       	breq	.+4      	; 0xb28 <vfprintf+0x1d8>
     b24:	99 36       	cpi	r25, 0x69	; 105
     b26:	69 f5       	brne	.+90     	; 0xb82 <vfprintf+0x232>
     b28:	f7 fe       	sbrs	r15, 7
     b2a:	08 c0       	rjmp	.+16     	; 0xb3c <vfprintf+0x1ec>
     b2c:	f5 01       	movw	r30, r10
     b2e:	20 81       	ld	r18, Z
     b30:	31 81       	ldd	r19, Z+1	; 0x01
     b32:	42 81       	ldd	r20, Z+2	; 0x02
     b34:	53 81       	ldd	r21, Z+3	; 0x03
     b36:	84 e0       	ldi	r24, 0x04	; 4
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	0a c0       	rjmp	.+20     	; 0xb50 <vfprintf+0x200>
     b3c:	f5 01       	movw	r30, r10
     b3e:	80 81       	ld	r24, Z
     b40:	91 81       	ldd	r25, Z+1	; 0x01
     b42:	9c 01       	movw	r18, r24
     b44:	44 27       	eor	r20, r20
     b46:	37 fd       	sbrc	r19, 7
     b48:	40 95       	com	r20
     b4a:	54 2f       	mov	r21, r20
     b4c:	82 e0       	ldi	r24, 0x02	; 2
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	a8 0e       	add	r10, r24
     b52:	b9 1e       	adc	r11, r25
     b54:	9f e6       	ldi	r25, 0x6F	; 111
     b56:	f9 22       	and	r15, r25
     b58:	57 ff       	sbrs	r21, 7
     b5a:	09 c0       	rjmp	.+18     	; 0xb6e <vfprintf+0x21e>
     b5c:	50 95       	com	r21
     b5e:	40 95       	com	r20
     b60:	30 95       	com	r19
     b62:	21 95       	neg	r18
     b64:	3f 4f       	sbci	r19, 0xFF	; 255
     b66:	4f 4f       	sbci	r20, 0xFF	; 255
     b68:	5f 4f       	sbci	r21, 0xFF	; 255
     b6a:	e0 e8       	ldi	r30, 0x80	; 128
     b6c:	fe 2a       	or	r15, r30
     b6e:	ca 01       	movw	r24, r20
     b70:	b9 01       	movw	r22, r18
     b72:	a1 01       	movw	r20, r2
     b74:	2a e0       	ldi	r18, 0x0A	; 10
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	0e 94 c7 06 	call	0xd8e	; 0xd8e <__ultoa_invert>
     b7c:	d8 2e       	mov	r13, r24
     b7e:	d2 18       	sub	r13, r2
     b80:	40 c0       	rjmp	.+128    	; 0xc02 <vfprintf+0x2b2>
     b82:	95 37       	cpi	r25, 0x75	; 117
     b84:	29 f4       	brne	.+10     	; 0xb90 <vfprintf+0x240>
     b86:	1f 2d       	mov	r17, r15
     b88:	1f 7e       	andi	r17, 0xEF	; 239
     b8a:	2a e0       	ldi	r18, 0x0A	; 10
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	1d c0       	rjmp	.+58     	; 0xbca <vfprintf+0x27a>
     b90:	1f 2d       	mov	r17, r15
     b92:	19 7f       	andi	r17, 0xF9	; 249
     b94:	9f 36       	cpi	r25, 0x6F	; 111
     b96:	61 f0       	breq	.+24     	; 0xbb0 <vfprintf+0x260>
     b98:	90 37       	cpi	r25, 0x70	; 112
     b9a:	20 f4       	brcc	.+8      	; 0xba4 <vfprintf+0x254>
     b9c:	98 35       	cpi	r25, 0x58	; 88
     b9e:	09 f0       	breq	.+2      	; 0xba2 <vfprintf+0x252>
     ba0:	ac c0       	rjmp	.+344    	; 0xcfa <vfprintf+0x3aa>
     ba2:	0f c0       	rjmp	.+30     	; 0xbc2 <vfprintf+0x272>
     ba4:	90 37       	cpi	r25, 0x70	; 112
     ba6:	39 f0       	breq	.+14     	; 0xbb6 <vfprintf+0x266>
     ba8:	98 37       	cpi	r25, 0x78	; 120
     baa:	09 f0       	breq	.+2      	; 0xbae <vfprintf+0x25e>
     bac:	a6 c0       	rjmp	.+332    	; 0xcfa <vfprintf+0x3aa>
     bae:	04 c0       	rjmp	.+8      	; 0xbb8 <vfprintf+0x268>
     bb0:	28 e0       	ldi	r18, 0x08	; 8
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	0a c0       	rjmp	.+20     	; 0xbca <vfprintf+0x27a>
     bb6:	10 61       	ori	r17, 0x10	; 16
     bb8:	14 fd       	sbrc	r17, 4
     bba:	14 60       	ori	r17, 0x04	; 4
     bbc:	20 e1       	ldi	r18, 0x10	; 16
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	04 c0       	rjmp	.+8      	; 0xbca <vfprintf+0x27a>
     bc2:	14 fd       	sbrc	r17, 4
     bc4:	16 60       	ori	r17, 0x06	; 6
     bc6:	20 e1       	ldi	r18, 0x10	; 16
     bc8:	32 e0       	ldi	r19, 0x02	; 2
     bca:	17 ff       	sbrs	r17, 7
     bcc:	08 c0       	rjmp	.+16     	; 0xbde <vfprintf+0x28e>
     bce:	f5 01       	movw	r30, r10
     bd0:	60 81       	ld	r22, Z
     bd2:	71 81       	ldd	r23, Z+1	; 0x01
     bd4:	82 81       	ldd	r24, Z+2	; 0x02
     bd6:	93 81       	ldd	r25, Z+3	; 0x03
     bd8:	44 e0       	ldi	r20, 0x04	; 4
     bda:	50 e0       	ldi	r21, 0x00	; 0
     bdc:	08 c0       	rjmp	.+16     	; 0xbee <vfprintf+0x29e>
     bde:	f5 01       	movw	r30, r10
     be0:	80 81       	ld	r24, Z
     be2:	91 81       	ldd	r25, Z+1	; 0x01
     be4:	bc 01       	movw	r22, r24
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	42 e0       	ldi	r20, 0x02	; 2
     bec:	50 e0       	ldi	r21, 0x00	; 0
     bee:	a4 0e       	add	r10, r20
     bf0:	b5 1e       	adc	r11, r21
     bf2:	a1 01       	movw	r20, r2
     bf4:	0e 94 c7 06 	call	0xd8e	; 0xd8e <__ultoa_invert>
     bf8:	d8 2e       	mov	r13, r24
     bfa:	d2 18       	sub	r13, r2
     bfc:	8f e7       	ldi	r24, 0x7F	; 127
     bfe:	f8 2e       	mov	r15, r24
     c00:	f1 22       	and	r15, r17
     c02:	f6 fe       	sbrs	r15, 6
     c04:	0b c0       	rjmp	.+22     	; 0xc1c <vfprintf+0x2cc>
     c06:	5e ef       	ldi	r21, 0xFE	; 254
     c08:	f5 22       	and	r15, r21
     c0a:	d9 14       	cp	r13, r9
     c0c:	38 f4       	brcc	.+14     	; 0xc1c <vfprintf+0x2cc>
     c0e:	f4 fe       	sbrs	r15, 4
     c10:	07 c0       	rjmp	.+14     	; 0xc20 <vfprintf+0x2d0>
     c12:	f2 fc       	sbrc	r15, 2
     c14:	05 c0       	rjmp	.+10     	; 0xc20 <vfprintf+0x2d0>
     c16:	8f ee       	ldi	r24, 0xEF	; 239
     c18:	f8 22       	and	r15, r24
     c1a:	02 c0       	rjmp	.+4      	; 0xc20 <vfprintf+0x2d0>
     c1c:	1d 2d       	mov	r17, r13
     c1e:	01 c0       	rjmp	.+2      	; 0xc22 <vfprintf+0x2d2>
     c20:	19 2d       	mov	r17, r9
     c22:	f4 fe       	sbrs	r15, 4
     c24:	0d c0       	rjmp	.+26     	; 0xc40 <vfprintf+0x2f0>
     c26:	fe 01       	movw	r30, r28
     c28:	ed 0d       	add	r30, r13
     c2a:	f1 1d       	adc	r31, r1
     c2c:	80 81       	ld	r24, Z
     c2e:	80 33       	cpi	r24, 0x30	; 48
     c30:	19 f4       	brne	.+6      	; 0xc38 <vfprintf+0x2e8>
     c32:	99 ee       	ldi	r25, 0xE9	; 233
     c34:	f9 22       	and	r15, r25
     c36:	08 c0       	rjmp	.+16     	; 0xc48 <vfprintf+0x2f8>
     c38:	1f 5f       	subi	r17, 0xFF	; 255
     c3a:	f2 fe       	sbrs	r15, 2
     c3c:	05 c0       	rjmp	.+10     	; 0xc48 <vfprintf+0x2f8>
     c3e:	03 c0       	rjmp	.+6      	; 0xc46 <vfprintf+0x2f6>
     c40:	8f 2d       	mov	r24, r15
     c42:	86 78       	andi	r24, 0x86	; 134
     c44:	09 f0       	breq	.+2      	; 0xc48 <vfprintf+0x2f8>
     c46:	1f 5f       	subi	r17, 0xFF	; 255
     c48:	0f 2d       	mov	r16, r15
     c4a:	f3 fc       	sbrc	r15, 3
     c4c:	14 c0       	rjmp	.+40     	; 0xc76 <vfprintf+0x326>
     c4e:	f0 fe       	sbrs	r15, 0
     c50:	0f c0       	rjmp	.+30     	; 0xc70 <vfprintf+0x320>
     c52:	1e 15       	cp	r17, r14
     c54:	10 f0       	brcs	.+4      	; 0xc5a <vfprintf+0x30a>
     c56:	9d 2c       	mov	r9, r13
     c58:	0b c0       	rjmp	.+22     	; 0xc70 <vfprintf+0x320>
     c5a:	9d 2c       	mov	r9, r13
     c5c:	9e 0c       	add	r9, r14
     c5e:	91 1a       	sub	r9, r17
     c60:	1e 2d       	mov	r17, r14
     c62:	06 c0       	rjmp	.+12     	; 0xc70 <vfprintf+0x320>
     c64:	80 e2       	ldi	r24, 0x20	; 32
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	b3 01       	movw	r22, r6
     c6a:	0e 94 9b 06 	call	0xd36	; 0xd36 <fputc>
     c6e:	1f 5f       	subi	r17, 0xFF	; 255
     c70:	1e 15       	cp	r17, r14
     c72:	c0 f3       	brcs	.-16     	; 0xc64 <vfprintf+0x314>
     c74:	04 c0       	rjmp	.+8      	; 0xc7e <vfprintf+0x32e>
     c76:	1e 15       	cp	r17, r14
     c78:	10 f4       	brcc	.+4      	; 0xc7e <vfprintf+0x32e>
     c7a:	e1 1a       	sub	r14, r17
     c7c:	01 c0       	rjmp	.+2      	; 0xc80 <vfprintf+0x330>
     c7e:	ee 24       	eor	r14, r14
     c80:	04 ff       	sbrs	r16, 4
     c82:	0f c0       	rjmp	.+30     	; 0xca2 <vfprintf+0x352>
     c84:	80 e3       	ldi	r24, 0x30	; 48
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	b3 01       	movw	r22, r6
     c8a:	0e 94 9b 06 	call	0xd36	; 0xd36 <fputc>
     c8e:	02 ff       	sbrs	r16, 2
     c90:	1d c0       	rjmp	.+58     	; 0xccc <vfprintf+0x37c>
     c92:	01 fd       	sbrc	r16, 1
     c94:	03 c0       	rjmp	.+6      	; 0xc9c <vfprintf+0x34c>
     c96:	88 e7       	ldi	r24, 0x78	; 120
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	0e c0       	rjmp	.+28     	; 0xcb8 <vfprintf+0x368>
     c9c:	88 e5       	ldi	r24, 0x58	; 88
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	0b c0       	rjmp	.+22     	; 0xcb8 <vfprintf+0x368>
     ca2:	80 2f       	mov	r24, r16
     ca4:	86 78       	andi	r24, 0x86	; 134
     ca6:	91 f0       	breq	.+36     	; 0xccc <vfprintf+0x37c>
     ca8:	01 ff       	sbrs	r16, 1
     caa:	02 c0       	rjmp	.+4      	; 0xcb0 <vfprintf+0x360>
     cac:	8b e2       	ldi	r24, 0x2B	; 43
     cae:	01 c0       	rjmp	.+2      	; 0xcb2 <vfprintf+0x362>
     cb0:	80 e2       	ldi	r24, 0x20	; 32
     cb2:	f7 fc       	sbrc	r15, 7
     cb4:	8d e2       	ldi	r24, 0x2D	; 45
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	b3 01       	movw	r22, r6
     cba:	0e 94 9b 06 	call	0xd36	; 0xd36 <fputc>
     cbe:	06 c0       	rjmp	.+12     	; 0xccc <vfprintf+0x37c>
     cc0:	80 e3       	ldi	r24, 0x30	; 48
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	b3 01       	movw	r22, r6
     cc6:	0e 94 9b 06 	call	0xd36	; 0xd36 <fputc>
     cca:	9a 94       	dec	r9
     ccc:	d9 14       	cp	r13, r9
     cce:	c0 f3       	brcs	.-16     	; 0xcc0 <vfprintf+0x370>
     cd0:	da 94       	dec	r13
     cd2:	f1 01       	movw	r30, r2
     cd4:	ed 0d       	add	r30, r13
     cd6:	f1 1d       	adc	r31, r1
     cd8:	80 81       	ld	r24, Z
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	b3 01       	movw	r22, r6
     cde:	0e 94 9b 06 	call	0xd36	; 0xd36 <fputc>
     ce2:	dd 20       	and	r13, r13
     ce4:	a9 f7       	brne	.-22     	; 0xcd0 <vfprintf+0x380>
     ce6:	06 c0       	rjmp	.+12     	; 0xcf4 <vfprintf+0x3a4>
     ce8:	80 e2       	ldi	r24, 0x20	; 32
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	b3 01       	movw	r22, r6
     cee:	0e 94 9b 06 	call	0xd36	; 0xd36 <fputc>
     cf2:	ea 94       	dec	r14
     cf4:	ee 20       	and	r14, r14
     cf6:	c1 f7       	brne	.-16     	; 0xce8 <vfprintf+0x398>
     cf8:	43 ce       	rjmp	.-890    	; 0x980 <vfprintf+0x30>
     cfa:	f3 01       	movw	r30, r6
     cfc:	66 81       	ldd	r22, Z+6	; 0x06
     cfe:	77 81       	ldd	r23, Z+7	; 0x07
     d00:	cb 01       	movw	r24, r22
     d02:	2b 96       	adiw	r28, 0x0b	; 11
     d04:	e2 e1       	ldi	r30, 0x12	; 18
     d06:	0c 94 89 39 	jmp	0x7312	; 0x7312 <__epilogue_restores__>

00000d0a <strnlen_P>:
     d0a:	fc 01       	movw	r30, r24
     d0c:	05 90       	lpm	r0, Z+
     d0e:	61 50       	subi	r22, 0x01	; 1
     d10:	70 40       	sbci	r23, 0x00	; 0
     d12:	01 10       	cpse	r0, r1
     d14:	d8 f7       	brcc	.-10     	; 0xd0c <strnlen_P+0x2>
     d16:	80 95       	com	r24
     d18:	90 95       	com	r25
     d1a:	8e 0f       	add	r24, r30
     d1c:	9f 1f       	adc	r25, r31
     d1e:	08 95       	ret

00000d20 <strnlen>:
     d20:	fc 01       	movw	r30, r24
     d22:	61 50       	subi	r22, 0x01	; 1
     d24:	70 40       	sbci	r23, 0x00	; 0
     d26:	01 90       	ld	r0, Z+
     d28:	01 10       	cpse	r0, r1
     d2a:	d8 f7       	brcc	.-10     	; 0xd22 <strnlen+0x2>
     d2c:	80 95       	com	r24
     d2e:	90 95       	com	r25
     d30:	8e 0f       	add	r24, r30
     d32:	9f 1f       	adc	r25, r31
     d34:	08 95       	ret

00000d36 <fputc>:
     d36:	0f 93       	push	r16
     d38:	1f 93       	push	r17
     d3a:	cf 93       	push	r28
     d3c:	df 93       	push	r29
     d3e:	8c 01       	movw	r16, r24
     d40:	eb 01       	movw	r28, r22
     d42:	8b 81       	ldd	r24, Y+3	; 0x03
     d44:	81 ff       	sbrs	r24, 1
     d46:	1b c0       	rjmp	.+54     	; 0xd7e <fputc+0x48>
     d48:	82 ff       	sbrs	r24, 2
     d4a:	0d c0       	rjmp	.+26     	; 0xd66 <fputc+0x30>
     d4c:	2e 81       	ldd	r18, Y+6	; 0x06
     d4e:	3f 81       	ldd	r19, Y+7	; 0x07
     d50:	8c 81       	ldd	r24, Y+4	; 0x04
     d52:	9d 81       	ldd	r25, Y+5	; 0x05
     d54:	28 17       	cp	r18, r24
     d56:	39 07       	cpc	r19, r25
     d58:	64 f4       	brge	.+24     	; 0xd72 <fputc+0x3c>
     d5a:	e8 81       	ld	r30, Y
     d5c:	f9 81       	ldd	r31, Y+1	; 0x01
     d5e:	01 93       	st	Z+, r16
     d60:	f9 83       	std	Y+1, r31	; 0x01
     d62:	e8 83       	st	Y, r30
     d64:	06 c0       	rjmp	.+12     	; 0xd72 <fputc+0x3c>
     d66:	e8 85       	ldd	r30, Y+8	; 0x08
     d68:	f9 85       	ldd	r31, Y+9	; 0x09
     d6a:	80 2f       	mov	r24, r16
     d6c:	09 95       	icall
     d6e:	89 2b       	or	r24, r25
     d70:	31 f4       	brne	.+12     	; 0xd7e <fputc+0x48>
     d72:	8e 81       	ldd	r24, Y+6	; 0x06
     d74:	9f 81       	ldd	r25, Y+7	; 0x07
     d76:	01 96       	adiw	r24, 0x01	; 1
     d78:	9f 83       	std	Y+7, r25	; 0x07
     d7a:	8e 83       	std	Y+6, r24	; 0x06
     d7c:	02 c0       	rjmp	.+4      	; 0xd82 <fputc+0x4c>
     d7e:	0f ef       	ldi	r16, 0xFF	; 255
     d80:	1f ef       	ldi	r17, 0xFF	; 255
     d82:	c8 01       	movw	r24, r16
     d84:	df 91       	pop	r29
     d86:	cf 91       	pop	r28
     d88:	1f 91       	pop	r17
     d8a:	0f 91       	pop	r16
     d8c:	08 95       	ret

00000d8e <__ultoa_invert>:
     d8e:	fa 01       	movw	r30, r20
     d90:	aa 27       	eor	r26, r26
     d92:	28 30       	cpi	r18, 0x08	; 8
     d94:	51 f1       	breq	.+84     	; 0xdea <__ultoa_invert+0x5c>
     d96:	20 31       	cpi	r18, 0x10	; 16
     d98:	81 f1       	breq	.+96     	; 0xdfa <__ultoa_invert+0x6c>
     d9a:	e8 94       	clt
     d9c:	6f 93       	push	r22
     d9e:	6e 7f       	andi	r22, 0xFE	; 254
     da0:	6e 5f       	subi	r22, 0xFE	; 254
     da2:	7f 4f       	sbci	r23, 0xFF	; 255
     da4:	8f 4f       	sbci	r24, 0xFF	; 255
     da6:	9f 4f       	sbci	r25, 0xFF	; 255
     da8:	af 4f       	sbci	r26, 0xFF	; 255
     daa:	b1 e0       	ldi	r27, 0x01	; 1
     dac:	3e d0       	rcall	.+124    	; 0xe2a <__ultoa_invert+0x9c>
     dae:	b4 e0       	ldi	r27, 0x04	; 4
     db0:	3c d0       	rcall	.+120    	; 0xe2a <__ultoa_invert+0x9c>
     db2:	67 0f       	add	r22, r23
     db4:	78 1f       	adc	r23, r24
     db6:	89 1f       	adc	r24, r25
     db8:	9a 1f       	adc	r25, r26
     dba:	a1 1d       	adc	r26, r1
     dbc:	68 0f       	add	r22, r24
     dbe:	79 1f       	adc	r23, r25
     dc0:	8a 1f       	adc	r24, r26
     dc2:	91 1d       	adc	r25, r1
     dc4:	a1 1d       	adc	r26, r1
     dc6:	6a 0f       	add	r22, r26
     dc8:	71 1d       	adc	r23, r1
     dca:	81 1d       	adc	r24, r1
     dcc:	91 1d       	adc	r25, r1
     dce:	a1 1d       	adc	r26, r1
     dd0:	20 d0       	rcall	.+64     	; 0xe12 <__ultoa_invert+0x84>
     dd2:	09 f4       	brne	.+2      	; 0xdd6 <__ultoa_invert+0x48>
     dd4:	68 94       	set
     dd6:	3f 91       	pop	r19
     dd8:	2a e0       	ldi	r18, 0x0A	; 10
     dda:	26 9f       	mul	r18, r22
     ddc:	11 24       	eor	r1, r1
     dde:	30 19       	sub	r19, r0
     de0:	30 5d       	subi	r19, 0xD0	; 208
     de2:	31 93       	st	Z+, r19
     de4:	de f6       	brtc	.-74     	; 0xd9c <__ultoa_invert+0xe>
     de6:	cf 01       	movw	r24, r30
     de8:	08 95       	ret
     dea:	46 2f       	mov	r20, r22
     dec:	47 70       	andi	r20, 0x07	; 7
     dee:	40 5d       	subi	r20, 0xD0	; 208
     df0:	41 93       	st	Z+, r20
     df2:	b3 e0       	ldi	r27, 0x03	; 3
     df4:	0f d0       	rcall	.+30     	; 0xe14 <__ultoa_invert+0x86>
     df6:	c9 f7       	brne	.-14     	; 0xdea <__ultoa_invert+0x5c>
     df8:	f6 cf       	rjmp	.-20     	; 0xde6 <__ultoa_invert+0x58>
     dfa:	46 2f       	mov	r20, r22
     dfc:	4f 70       	andi	r20, 0x0F	; 15
     dfe:	40 5d       	subi	r20, 0xD0	; 208
     e00:	4a 33       	cpi	r20, 0x3A	; 58
     e02:	18 f0       	brcs	.+6      	; 0xe0a <__ultoa_invert+0x7c>
     e04:	49 5d       	subi	r20, 0xD9	; 217
     e06:	31 fd       	sbrc	r19, 1
     e08:	40 52       	subi	r20, 0x20	; 32
     e0a:	41 93       	st	Z+, r20
     e0c:	02 d0       	rcall	.+4      	; 0xe12 <__ultoa_invert+0x84>
     e0e:	a9 f7       	brne	.-22     	; 0xdfa <__ultoa_invert+0x6c>
     e10:	ea cf       	rjmp	.-44     	; 0xde6 <__ultoa_invert+0x58>
     e12:	b4 e0       	ldi	r27, 0x04	; 4
     e14:	a6 95       	lsr	r26
     e16:	97 95       	ror	r25
     e18:	87 95       	ror	r24
     e1a:	77 95       	ror	r23
     e1c:	67 95       	ror	r22
     e1e:	ba 95       	dec	r27
     e20:	c9 f7       	brne	.-14     	; 0xe14 <__ultoa_invert+0x86>
     e22:	00 97       	sbiw	r24, 0x00	; 0
     e24:	61 05       	cpc	r22, r1
     e26:	71 05       	cpc	r23, r1
     e28:	08 95       	ret
     e2a:	9b 01       	movw	r18, r22
     e2c:	ac 01       	movw	r20, r24
     e2e:	0a 2e       	mov	r0, r26
     e30:	06 94       	lsr	r0
     e32:	57 95       	ror	r21
     e34:	47 95       	ror	r20
     e36:	37 95       	ror	r19
     e38:	27 95       	ror	r18
     e3a:	ba 95       	dec	r27
     e3c:	c9 f7       	brne	.-14     	; 0xe30 <__ultoa_invert+0xa2>
     e3e:	62 0f       	add	r22, r18
     e40:	73 1f       	adc	r23, r19
     e42:	84 1f       	adc	r24, r20
     e44:	95 1f       	adc	r25, r21
     e46:	a0 1d       	adc	r26, r0
     e48:	08 95       	ret

00000e4a <isRoomLit()>:

static bool isRoomLitFlag;

// Returns true if room/environs well enough lit for normal activity.
// Based on results of last call to readAmbientLight().
bool isRoomLit() { return(isRoomLitFlag); }
     e4a:	80 91 34 01 	lds	r24, 0x0134
     e4e:	08 95       	ret

00000e50 <getAmbientLight()>:

// Ambient light levels in range [0,1023].
static int ambientLightLevel;

// Return previously-read (with readAmbientLight()) ambient light level in range [0,1023]; very fast.
int getAmbientLight() { return(ambientLightLevel); }
     e50:	80 91 32 01 	lds	r24, 0x0132
     e54:	90 91 33 01 	lds	r25, 0x0133
     e58:	08 95       	ret

00000e5a <readAmbientLight()>:
// Measure/store/return the current room ambient light levels in range [0,1023].
// This may consume significant power and time.
// Probably no need to do this more than (say) once per minute.
// This implementation expects LDR (1M dark resistance) from IO_POWER_UP to LDR_SENSOR_AIN and 100k to ground.
// (Not intended to be called from ISR.)
int readAmbientLight()
     e5a:	0f 93       	push	r16
     e5c:	1f 93       	push	r17
     e5e:	cf 93       	push	r28
     e60:	df 93       	push	r29
  {
  power_intermittent_peripherals_enable(false); // No need to wait for anything to stablise as direct of IO_POWER_UP.
     e62:	80 e0       	ldi	r24, 0x00	; 0
     e64:	0e 94 00 19 	call	0x3200	; 0x3200 <power_intermittent_peripherals_enable(bool)>
  const int al0 = analogueNoiseReducedRead(LDR_SENSOR_AIN, reference);
     e68:	80 e0       	ldi	r24, 0x00	; 0
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	63 e0       	ldi	r22, 0x03	; 3
     e6e:	0e 94 20 17 	call	0x2e40	; 0x2e40 <analogueNoiseReducedRead(int, unsigned char)>
     e72:	9c 01       	movw	r18, r24
#if defined(ADAPTIVE_THRESHOLD)
  int al;
  if(al0 >= ADAPTIVE_THRESHOLD)
     e74:	83 e0       	ldi	r24, 0x03	; 3
     e76:	20 38       	cpi	r18, 0x80	; 128
     e78:	38 07       	cpc	r19, r24
     e7a:	14 f4       	brge	.+4      	; 0xe80 <readAmbientLight()+0x26>
     e7c:	e9 01       	movw	r28, r18
     e7e:	2d c0       	rjmp	.+90     	; 0xeda <readAmbientLight()+0x80>
    {
    const int al1 = analogueNoiseReducedRead(LDR_SENSOR_AIN, DEFAULT); // Vsupply reference.
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	61 e0       	ldi	r22, 0x01	; 1
     e86:	0e 94 20 17 	call	0x2e40	; 0x2e40 <analogueNoiseReducedRead(int, unsigned char)>
     e8a:	8c 01       	movw	r16, r24
    const int vbg = read1V1wrtBattery(); // Vbandgap wrt Vsupply.
     e8c:	0e 94 32 17 	call	0x2e64	; 0x2e64 <read1V1wrtBattery()>
    // Ensure that scale stays monotonic in face of calculation lumpiness, etc...
    // Scale all remaining space above threshold to new top value into remaining space.
    // TODO: ensure scaleFactor a power of two for speed.
    const int scaleFactor = (2048 - ADAPTIVE_THRESHOLD) / (1024 - ADAPTIVE_THRESHOLD);
    al = fnmin(1023,
        ADAPTIVE_THRESHOLD + fnmax(0, ((ale - ADAPTIVE_THRESHOLD) / scaleFactor)));
     e90:	bc 01       	movw	r22, r24
     e92:	60 5f       	subi	r22, 0xF0	; 240
     e94:	7f 4f       	sbci	r23, 0xFF	; 255
     e96:	35 e0       	ldi	r19, 0x05	; 5
     e98:	75 95       	asr	r23
     e9a:	67 95       	ror	r22
     e9c:	3a 95       	dec	r19
     e9e:	e1 f7       	brne	.-8      	; 0xe98 <readAmbientLight()+0x3e>
     ea0:	c8 01       	movw	r24, r16
     ea2:	25 e0       	ldi	r18, 0x05	; 5
     ea4:	88 0f       	add	r24, r24
     ea6:	99 1f       	adc	r25, r25
     ea8:	2a 95       	dec	r18
     eaa:	e1 f7       	brne	.-8      	; 0xea4 <readAmbientLight()+0x4a>
     eac:	0e 94 0f 39 	call	0x721e	; 0x721e <__divmodhi4>
     eb0:	cb 01       	movw	r24, r22
     eb2:	80 58       	subi	r24, 0x80	; 128
     eb4:	93 40       	sbci	r25, 0x03	; 3
     eb6:	69 e0       	ldi	r22, 0x09	; 9
     eb8:	70 e0       	ldi	r23, 0x00	; 0
     eba:	0e 94 0f 39 	call	0x721e	; 0x721e <__divmodhi4>
     ebe:	cb 01       	movw	r24, r22
     ec0:	77 ff       	sbrs	r23, 7
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <readAmbientLight()+0x6e>
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	ec 01       	movw	r28, r24
     eca:	c0 58       	subi	r28, 0x80	; 128
     ecc:	dc 4f       	sbci	r29, 0xFC	; 252




// Templated function versions of min/max that do not evaluate the arguments twice.
template <class T> const T& fnmin(const T& a, const T& b) { return((a>b)?b:a); }
     ece:	83 e0       	ldi	r24, 0x03	; 3
     ed0:	cf 3f       	cpi	r28, 0xFF	; 255
     ed2:	d8 07       	cpc	r29, r24
     ed4:	14 f0       	brlt	.+4      	; 0xeda <readAmbientLight()+0x80>
     ed6:	cf ef       	ldi	r28, 0xFF	; 255
     ed8:	d3 e0       	ldi	r29, 0x03	; 3
    }
  else { al = al0; }
#else
  const int al = al0;
#endif
  power_intermittent_peripherals_disable();
     eda:	0e 94 ce 18 	call	0x319c	; 0x319c <power_intermittent_peripherals_disable()>

  // Capture entropy from changed LS bits.
  if((uint8_t)al != (uint8_t)ambientLightLevel) { addEntropyToPool((uint8_t)al ^ (uint8_t)ambientLightLevel, 0); } // Claim zero entropy as may be forced by Eve.
     ede:	8c 2f       	mov	r24, r28
     ee0:	90 91 32 01 	lds	r25, 0x0132
     ee4:	c9 17       	cp	r28, r25
     ee6:	21 f0       	breq	.+8      	; 0xef0 <readAmbientLight()+0x96>
     ee8:	89 27       	eor	r24, r25
     eea:	60 e0       	ldi	r22, 0x00	; 0
     eec:	0e 94 56 1e 	call	0x3cac	; 0x3cac <addEntropyToPool(unsigned char, unsigned char)>

  // Adjust room-lit flag, with hysteresis.
  if(al <= LDR_THR_LOW)
     ef0:	c5 30       	cpi	r28, 0x05	; 5
     ef2:	d1 05       	cpc	r29, r1
     ef4:	1c f4       	brge	.+6      	; 0xefc <readAmbientLight()+0xa2>
    { isRoomLitFlag = false; }
     ef6:	10 92 34 01 	sts	0x0134, r1
     efa:	12 c0       	rjmp	.+36     	; 0xf20 <readAmbientLight()+0xc6>
  else if(al > LDR_THR_HIGH)
     efc:	c9 30       	cpi	r28, 0x09	; 9
     efe:	d1 05       	cpc	r29, r1
     f00:	7c f0       	brlt	.+30     	; 0xf20 <readAmbientLight()+0xc6>
    {
    // Treat a sharp transition from dark to light as a possible/weak indication of occupancy, eg light flicked on.
    // TODO: consider refusal to trigger from zero to avoid power-up in light conditions causing transition. 
    if((!isRoomLitFlag) && (ambientLightLevel < LDR_THR_LOW)) { markAsPossiblyOccupied(); }
     f02:	80 91 34 01 	lds	r24, 0x0134
     f06:	88 23       	and	r24, r24
     f08:	41 f4       	brne	.+16     	; 0xf1a <readAmbientLight()+0xc0>
     f0a:	80 91 32 01 	lds	r24, 0x0132
     f0e:	90 91 33 01 	lds	r25, 0x0133
     f12:	04 97       	sbiw	r24, 0x04	; 4
     f14:	14 f4       	brge	.+4      	; 0xf1a <readAmbientLight()+0xc0>
     f16:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <markAsPossiblyOccupied()>

    isRoomLitFlag = true;
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	80 93 34 01 	sts	0x0134, r24
    }

  // Store new value.
  ambientLightLevel = al;
     f20:	d0 93 33 01 	sts	0x0133, r29
     f24:	c0 93 32 01 	sts	0x0132, r28
  DEBUG_SERIAL_PRINT(isRoomLitFlag);
  DEBUG_SERIAL_PRINTLN();
#endif

  return(al);
  }
     f28:	ce 01       	movw	r24, r28
     f2a:	df 91       	pop	r29
     f2c:	cf 91       	pop	r28
     f2e:	1f 91       	pop	r17
     f30:	0f 91       	pop	r16
     f32:	08 95       	ret

00000f34 <getTRVPercentOpen()>:
#include "Temp_Pot.h"
#include "UI_Minimal.h"

// Percentage open for local TRV being controlled in range [0,100]; 0 is closed/off and is also the initial state.
static uint8_t TRVPercentOpen;
uint8_t getTRVPercentOpen() { return(TRVPercentOpen); }
     f34:	80 91 3d 01 	lds	r24, 0x013D
     f38:	08 95       	ret

00000f3a <getTargetTempC()>:

// Target temperature in Centigrade.
static uint8_t targetTempC;
uint8_t getTargetTempC() { return(targetTempC); }
     f3a:	80 91 3c 01 	lds	r24, 0x013C
     f3e:	08 95       	ret

00000f40 <getMinBoilerOnMinutes()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     f40:	f9 99       	sbic	0x1f, 1	; 31
     f42:	fe cf       	rjmp	.-4      	; 0xf40 <getMinBoilerOnMinutes()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     f44:	82 e1       	ldi	r24, 0x12	; 18
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	92 bd       	out	0x22, r25	; 34
     f4a:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     f4c:	f8 9a       	sbi	0x1f, 0	; 31
     f4e:	80 b5       	in	r24, 0x20	; 32
#endif


#ifndef getMinBoilerOnMinutes
// Get minimum on (and off) time for pointer (minutes); zero if not in hub mode.
uint8_t getMinBoilerOnMinutes() { return(~eeprom_read_byte((uint8_t *)EE_START_MIN_BOILER_ON_MINS_INV)); }
     f50:	80 95       	com	r24
     f52:	08 95       	ret

00000f54 <twoBitOccupancyValue()>:
// Returns true if the room appears to be likely occupied (with active users) recently.
// This uses the same timer as isOccupied() (restarted by markAsOccupied())
// but returns to false somewhat sooner for example to allow ramping up more costly occupancy detection methods
// and to allow some simple graduated occupancy responses.
// Do not call from an ISR.
bool isLikelyRecentlyOccupied() { return(occupationCountdownM > OCCUPATION_TIMEOUT_M/2); }
     f54:	80 91 3b 01 	lds	r24, 0x013B

// Two-bit occupancy: (00 not disclosed,) 1 not occupied, 2 possibly occupied, 3 probably occupied.
// 0 is not returned by this implementation.
uint8_t twoBitOccupancyValue() { return(isLikelyRecentlyOccupied() ? 3 : (isLikelyOccupied() ? 2 : 1)); }
     f58:	87 31       	cpi	r24, 0x17	; 23
     f5a:	10 f0       	brcs	.+4      	; 0xf60 <twoBitOccupancyValue()+0xc>
     f5c:	83 e0       	ldi	r24, 0x03	; 3
     f5e:	08 95       	ret
     f60:	88 23       	and	r24, r24
     f62:	11 f4       	brne	.+4      	; 0xf68 <twoBitOccupancyValue()+0x14>
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	08 95       	ret
     f68:	82 e0       	ldi	r24, 0x02	; 2
     f6a:	08 95       	ret

00000f6c <markAsOccupied()>:

// Call when some strong evidence of room occupation has occurred.
// Such evidence may include operation of buttons (etc) on the unit or PIR.
// Do not call from (for example) 'on' schedule change.
// Do not call from an ISR.
void markAsOccupied() { occupationCountdownM = OCCUPATION_TIMEOUT_M; }
     f6c:	8d e2       	ldi	r24, 0x2D	; 45
     f6e:	80 93 3b 01 	sts	0x013B, r24
     f72:	08 95       	ret

00000f74 <getByHourStat(unsigned char, unsigned char)>:
// Get raw stats value for hour HH [0,23] from stats set N from non-volatile (EEPROM) store.
// A value of 0xff (255) means unset (or out of range); other values depend on which stats set is being used.
// The stats set is determined by the order in memory.
uint8_t getByHourStat(uint8_t hh, uint8_t statsSet)
  {
  if(statsSet > (EE_END_STATS - EE_START_STATS) / EE_STATS_SET_SIZE) { return((uint8_t) 0xff); } // Invalid set.
     f74:	65 30       	cpi	r22, 0x05	; 5
     f76:	98 f4       	brcc	.+38     	; 0xf9e <getByHourStat(unsigned char, unsigned char)+0x2a>
  if(hh > 23) { return((uint8_t) 0xff); } // Invalid hour.
     f78:	88 31       	cpi	r24, 0x18	; 24
     f7a:	88 f4       	brcc	.+34     	; 0xf9e <getByHourStat(unsigned char, unsigned char)+0x2a>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     f7c:	f9 99       	sbic	0x1f, 1	; 31
     f7e:	fe cf       	rjmp	.-4      	; 0xf7c <getByHourStat(unsigned char, unsigned char)+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     f80:	28 2f       	mov	r18, r24
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	20 50       	subi	r18, 0x00	; 0
     f86:	3f 4f       	sbci	r19, 0xFF	; 255
     f88:	88 e1       	ldi	r24, 0x18	; 24
     f8a:	68 9f       	mul	r22, r24
     f8c:	c0 01       	movw	r24, r0
     f8e:	11 24       	eor	r1, r1
     f90:	28 0f       	add	r18, r24
     f92:	39 1f       	adc	r19, r25
     f94:	32 bd       	out	0x22, r19	; 34
     f96:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     f98:	f8 9a       	sbi	0x1f, 0	; 31
     f9a:	80 b5       	in	r24, 0x20	; 32
     f9c:	08 95       	ret
  return(eeprom_read_byte((uint8_t *)(EE_START_STATS + (statsSet * (int)EE_STATS_SET_SIZE) + (int)hh)));
     f9e:	8f ef       	ldi	r24, 0xFF	; 255
  }
     fa0:	08 95       	ret

00000fa2 <compressTempC16(int)>:
#define COMPRESSION_C16_HIGH_THR_AFTER (COMPRESSION_C16_LOW_THR_AFTER + ((COMPRESSION_C16_HIGH_THRESHOLD-COMPRESSION_C16_LOW_THRESHOLD)>>1)) // High threshold after compression.
#define COMPRESSION_C16_CEIL_VAL (100<<4) // Ceiling input value to compression.
#define COMPRESSION_C16_CEIL_VAL_AFTER (COMPRESSION_C16_HIGH_THR_AFTER + ((COMPRESSION_C16_CEIL_VAL-COMPRESSION_C16_HIGH_THRESHOLD) >> 3)) // Ceiling input value after compression.
uint8_t compressTempC16(int tempC16)
  {
  if(tempC16 <= 0) { return(0); } // Clamp negative values to zero.
     fa2:	18 16       	cp	r1, r24
     fa4:	19 06       	cpc	r1, r25
     fa6:	14 f0       	brlt	.+4      	; 0xfac <compressTempC16(int)+0xa>
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	08 95       	ret
  if(tempC16 < COMPRESSION_C16_LOW_THRESHOLD) { return(tempC16 >> 3); } // Preserve 1 bit after the binary point (0.5C precision).
     fac:	8f 3f       	cpi	r24, 0xFF	; 255
     fae:	91 05       	cpc	r25, r1
     fb0:	09 f0       	breq	.+2      	; 0xfb4 <compressTempC16(int)+0x12>
     fb2:	34 f4       	brge	.+12     	; 0xfc0 <compressTempC16(int)+0x1e>
     fb4:	43 e0       	ldi	r20, 0x03	; 3
     fb6:	95 95       	asr	r25
     fb8:	87 95       	ror	r24
     fba:	4a 95       	dec	r20
     fbc:	e1 f7       	brne	.-8      	; 0xfb6 <compressTempC16(int)+0x14>
     fbe:	08 95       	ret
  if(tempC16 < COMPRESSION_C16_HIGH_THRESHOLD)
     fc0:	21 e0       	ldi	r18, 0x01	; 1
     fc2:	80 38       	cpi	r24, 0x80	; 128
     fc4:	92 07       	cpc	r25, r18
     fc6:	34 f4       	brge	.+12     	; 0xfd4 <compressTempC16(int)+0x32>
    { return(((tempC16 - COMPRESSION_C16_LOW_THRESHOLD) >> 1) + COMPRESSION_C16_LOW_THR_AFTER); }
     fc8:	80 50       	subi	r24, 0x00	; 0
     fca:	91 40       	sbci	r25, 0x01	; 1
     fcc:	95 95       	asr	r25
     fce:	87 95       	ror	r24
     fd0:	80 5e       	subi	r24, 0xE0	; 224
     fd2:	08 95       	ret
  if(tempC16 < COMPRESSION_C16_CEIL_VAL)
     fd4:	26 e0       	ldi	r18, 0x06	; 6
     fd6:	80 34       	cpi	r24, 0x40	; 64
     fd8:	92 07       	cpc	r25, r18
     fda:	14 f0       	brlt	.+4      	; 0xfe0 <compressTempC16(int)+0x3e>
     fdc:	88 ef       	ldi	r24, 0xF8	; 248
     fde:	08 95       	ret
    { return(((tempC16 - COMPRESSION_C16_HIGH_THRESHOLD) >> 3) + COMPRESSION_C16_HIGH_THR_AFTER); }
     fe0:	80 58       	subi	r24, 0x80	; 128
     fe2:	91 40       	sbci	r25, 0x01	; 1
     fe4:	23 e0       	ldi	r18, 0x03	; 3
     fe6:	95 95       	asr	r25
     fe8:	87 95       	ror	r24
     fea:	2a 95       	dec	r18
     fec:	e1 f7       	brne	.-8      	; 0xfe6 <compressTempC16(int)+0x44>
     fee:	80 5a       	subi	r24, 0xA0	; 160
  return(COMPRESSION_C16_CEIL_VAL_AFTER);
  }
     ff0:	08 95       	ret

00000ff2 <expandTempC16(unsigned char)>:

// Reverses range compression done by compressTempC16(); results in range [0,100], with varying precision based on original value.
// 0xff (or other invalid) input results in STATS_UNSET_INT. 
int expandTempC16(uint8_t cTemp)
  {
  if(cTemp < COMPRESSION_C16_LOW_THR_AFTER) { return(cTemp << 3); }
     ff2:	80 32       	cpi	r24, 0x20	; 32
     ff4:	40 f4       	brcc	.+16     	; 0x1006 <expandTempC16(unsigned char)+0x14>
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	73 e0       	ldi	r23, 0x03	; 3
     ffc:	22 0f       	add	r18, r18
     ffe:	33 1f       	adc	r19, r19
    1000:	7a 95       	dec	r23
    1002:	e1 f7       	brne	.-8      	; 0xffc <expandTempC16(unsigned char)+0xa>
    1004:	17 c0       	rjmp	.+46     	; 0x1034 <expandTempC16(unsigned char)+0x42>
  if(cTemp < COMPRESSION_C16_HIGH_THR_AFTER)
    1006:	80 36       	cpi	r24, 0x60	; 96
    1008:	38 f4       	brcc	.+14     	; 0x1018 <expandTempC16(unsigned char)+0x26>
    { return(((cTemp - COMPRESSION_C16_LOW_THR_AFTER) << 1) + COMPRESSION_C16_LOW_THRESHOLD); }
    100a:	28 2f       	mov	r18, r24
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	22 0f       	add	r18, r18
    1010:	33 1f       	adc	r19, r19
    1012:	20 54       	subi	r18, 0x40	; 64
    1014:	3f 4f       	sbci	r19, 0xFF	; 255
    1016:	0e c0       	rjmp	.+28     	; 0x1034 <expandTempC16(unsigned char)+0x42>
  if(cTemp <= COMPRESSION_C16_CEIL_VAL_AFTER)
    1018:	89 3f       	cpi	r24, 0xF9	; 249
    101a:	18 f0       	brcs	.+6      	; 0x1022 <expandTempC16(unsigned char)+0x30>
    101c:	2f ef       	ldi	r18, 0xFF	; 255
    101e:	3f e7       	ldi	r19, 0x7F	; 127
    1020:	09 c0       	rjmp	.+18     	; 0x1034 <expandTempC16(unsigned char)+0x42>
    { return(((cTemp - COMPRESSION_C16_HIGH_THR_AFTER) << 3) + COMPRESSION_C16_HIGH_THRESHOLD); }
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	53 e0       	ldi	r21, 0x03	; 3
    1028:	22 0f       	add	r18, r18
    102a:	33 1f       	adc	r19, r19
    102c:	5a 95       	dec	r21
    102e:	e1 f7       	brne	.-8      	; 0x1028 <expandTempC16(unsigned char)+0x36>
    1030:	20 58       	subi	r18, 0x80	; 128
    1032:	31 40       	sbci	r19, 0x01	; 1
  return(STATS_UNSET_INT); // Invalid/unset input.
  }
    1034:	c9 01       	movw	r24, r18
    1036:	08 95       	ret

00001038 <getMinValvePcReallyOpen()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1038:	f9 99       	sbic	0x1f, 1	; 31
    103a:	fe cf       	rjmp	.-4      	; 0x1038 <getMinValvePcReallyOpen()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    103c:	83 e1       	ldi	r24, 0x13	; 19
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	92 bd       	out	0x22, r25	; 34
    1042:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1044:	f8 9a       	sbi	0x1f, 0	; 31
    1046:	90 b5       	in	r25, 0x20	; 32
// If no override is set then DEFAULT_MIN_VALVE_PC_REALLY_OPEN is used.
// NOTE: raising this value temporarily (and shutting down the boiler immediate if possible) is one way to implement dynamic demand.
uint8_t getMinValvePcReallyOpen()
  {
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_MIN_VALVE_PC_REALLY_OPEN);
  if((stored > 0) && (stored <= 100)) { return(stored); }
    1048:	89 2f       	mov	r24, r25
    104a:	81 50       	subi	r24, 0x01	; 1
    104c:	84 36       	cpi	r24, 0x64	; 100
    104e:	08 f0       	brcs	.+2      	; 0x1052 <getMinValvePcReallyOpen()+0x1a>
    1050:	9a e0       	ldi	r25, 0x0A	; 10
  return(DEFAULT_MIN_VALVE_PC_REALLY_OPEN);
  }
    1052:	89 2f       	mov	r24, r25
    1054:	08 95       	ret

00001056 <populateCoreStats(FullStatsMessageCore*)>:


// Clear and populate core stats structure with information from this node.
// Exactly what gets filled in will depend on sensors on the node,
// and may depend on stats TX security level (eg if collecting some sensitive items is also expensive).
void populateCoreStats(FullStatsMessageCore_t *const content)
    1056:	0f 93       	push	r16
    1058:	1f 93       	push	r17
    105a:	df 93       	push	r29
    105c:	cf 93       	push	r28
    105e:	00 d0       	rcall	.+0      	; 0x1060 <populateCoreStats(FullStatsMessageCore*)+0xa>
    1060:	00 d0       	rcall	.+0      	; 0x1062 <populateCoreStats(FullStatsMessageCore*)+0xc>
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
    1066:	8c 01       	movw	r16, r24
#define FullStatsMessageCore_MAX_BYTES_ON_WIRE 8
// Minimum size on wire including trailing CRC of core of FullStatsMessage.  TX message buffer should be one larger for trailing 0xff.
#define FullStatsMessageCore_MIN_BYTES_ON_WIRE 3

// Clear a FullStatsMessageCore_t, also indicating no optional fields present.
static inline void clearFullStatsMessageCore(FullStatsMessageCore_t *const p) { memset(p, 0, sizeof(FullStatsMessageCore_t)); }
    1068:	87 e0       	ldi	r24, 0x07	; 7
    106a:	f8 01       	movw	r30, r16
    106c:	11 92       	st	Z+, r1
    106e:	8a 95       	dec	r24
    1070:	e9 f7       	brne	.-6      	; 0x106c <populateCoreStats(FullStatsMessageCore*)+0x16>
  {
  clearFullStatsMessageCore(content); // Defensive programming: all fields should be set explicitly below.
  if(localFHT8VTRVEnabled())
    1072:	0e 94 c6 0c 	call	0x198c	; 0x198c <localFHT8VTRVEnabled()>
    1076:	88 23       	and	r24, r24
    1078:	39 f0       	breq	.+14     	; 0x1088 <populateCoreStats(FullStatsMessageCore*)+0x32>
    {
    // Use FHT8V house codes if available.
    content->id0 = FHT8VGetHC1();
    107a:	0e 94 b4 0c 	call	0x1968	; 0x1968 <FHT8VGetHC1()>
    107e:	f8 01       	movw	r30, r16
    1080:	81 83       	std	Z+1, r24	; 0x01
    content->id1 = FHT8VGetHC2();
    1082:	0e 94 bd 0c 	call	0x197a	; 0x197a <FHT8VGetHC2()>
    1086:	12 c0       	rjmp	.+36     	; 0x10ac <populateCoreStats(FullStatsMessageCore*)+0x56>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1088:	f9 99       	sbic	0x1f, 1	; 31
    108a:	fe cf       	rjmp	.-4      	; 0x1088 <populateCoreStats(FullStatsMessageCore*)+0x32>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    108c:	84 e1       	ldi	r24, 0x14	; 20
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	92 bd       	out	0x22, r25	; 34
    1092:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1094:	f8 9a       	sbi	0x1f, 0	; 31
    1096:	80 b5       	in	r24, 0x20	; 32
    }
  else
    {
    // Use OpenTRV unique ID if no other higher-priority ID.
    content->id0 = eeprom_read_byte(0 + (uint8_t *)EE_START_ID);
    1098:	f8 01       	movw	r30, r16
    109a:	81 83       	std	Z+1, r24	; 0x01
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    109c:	f9 99       	sbic	0x1f, 1	; 31
    109e:	fe cf       	rjmp	.-4      	; 0x109c <populateCoreStats(FullStatsMessageCore*)+0x46>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    10a0:	85 e1       	ldi	r24, 0x15	; 21
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	92 bd       	out	0x22, r25	; 34
    10a6:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    10a8:	f8 9a       	sbi	0x1f, 0	; 31
    10aa:	80 b5       	in	r24, 0x20	; 32
    content->id1 = eeprom_read_byte(1 + (uint8_t *)EE_START_ID);
    10ac:	f8 01       	movw	r30, r16
    10ae:	82 83       	std	Z+2, r24	; 0x02
    }
  content->containsID = true;
    10b0:	f8 01       	movw	r30, r16
    10b2:	80 81       	ld	r24, Z
    10b4:	81 60       	ori	r24, 0x01	; 1
    10b6:	80 83       	st	Z, r24
  content->tempAndPower.tempC16 = getTemperatureC16();
    10b8:	0e 94 9e 20 	call	0x413c	; 0x413c <getTemperatureC16()>
    10bc:	f8 01       	movw	r30, r16
    10be:	83 83       	std	Z+3, r24	; 0x03
    10c0:	9f 77       	andi	r25, 0x7F	; 127
    10c2:	84 81       	ldd	r24, Z+4	; 0x04
    10c4:	80 78       	andi	r24, 0x80	; 128
    10c6:	89 2b       	or	r24, r25
    10c8:	84 83       	std	Z+4, r24	; 0x04
  content->tempAndPower.powerLow = isBatteryLow();
    10ca:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <isBatteryLow()>
    10ce:	87 95       	ror	r24
    10d0:	88 27       	eor	r24, r24
    10d2:	87 95       	ror	r24
    10d4:	f8 01       	movw	r30, r16
    10d6:	94 81       	ldd	r25, Z+4	; 0x04
    10d8:	9f 77       	andi	r25, 0x7F	; 127
    10da:	98 2b       	or	r25, r24
    10dc:	94 83       	std	Z+4, r25	; 0x04
  content->containsTempAndPower = true;
    10de:	80 81       	ld	r24, Z
    10e0:	82 60       	ori	r24, 0x02	; 2
    10e2:	80 83       	st	Z, r24
  content->ambL = fnmax(1, fnmin(254, getAmbientLight() >> 2)); // Coerce to allowed value in range [1,254]. Bug-fix c/o Gary Gladman!
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	9c 83       	std	Y+4, r25	; 0x04
    10ea:	8b 83       	std	Y+3, r24	; 0x03
    10ec:	8e ef       	ldi	r24, 0xFE	; 254
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	9a 83       	std	Y+2, r25	; 0x02
    10f2:	89 83       	std	Y+1, r24	; 0x01
    10f4:	0e 94 28 07 	call	0xe50	; 0xe50 <getAmbientLight()>
    10f8:	95 95       	asr	r25
    10fa:	87 95       	ror	r24
    10fc:	95 95       	asr	r25
    10fe:	87 95       	ror	r24
    1100:	29 81       	ldd	r18, Y+1	; 0x01
    1102:	3a 81       	ldd	r19, Y+2	; 0x02
    1104:	28 17       	cp	r18, r24
    1106:	39 07       	cpc	r19, r25
    1108:	0c f4       	brge	.+2      	; 0x110c <populateCoreStats(FullStatsMessageCore*)+0xb6>
    110a:	c9 01       	movw	r24, r18
    110c:	2b 81       	ldd	r18, Y+3	; 0x03
    110e:	3c 81       	ldd	r19, Y+4	; 0x04
    1110:	82 17       	cp	r24, r18
    1112:	93 07       	cpc	r25, r19
    1114:	0c f4       	brge	.+2      	; 0x1118 <populateCoreStats(FullStatsMessageCore*)+0xc2>
    1116:	c9 01       	movw	r24, r18
    1118:	f8 01       	movw	r30, r16
    111a:	85 83       	std	Z+5, r24	; 0x05
  content->containsAmbL = true;
    111c:	80 81       	ld	r24, Z
    111e:	84 60       	ori	r24, 0x04	; 4
    1120:	80 83       	st	Z, r24
// Returns true if the room appears to be likely occupied (with active users) recently.
// This uses the same timer as isOccupied() (restarted by markAsOccupied())
// but returns to false somewhat sooner for example to allow ramping up more costly occupancy detection methods
// and to allow some simple graduated occupancy responses.
// Do not call from an ISR.
bool isLikelyRecentlyOccupied() { return(occupationCountdownM > OCCUPATION_TIMEOUT_M/2); }
    1122:	80 91 3b 01 	lds	r24, 0x013B

// Two-bit occupancy: (00 not disclosed,) 1 not occupied, 2 possibly occupied, 3 probably occupied.
// 0 is not returned by this implementation.
uint8_t twoBitOccupancyValue() { return(isLikelyRecentlyOccupied() ? 3 : (isLikelyOccupied() ? 2 : 1)); }
    1126:	87 31       	cpi	r24, 0x17	; 23
    1128:	10 f0       	brcs	.+4      	; 0x112e <populateCoreStats(FullStatsMessageCore*)+0xd8>
    112a:	93 e0       	ldi	r25, 0x03	; 3
    112c:	05 c0       	rjmp	.+10     	; 0x1138 <populateCoreStats(FullStatsMessageCore*)+0xe2>
    112e:	88 23       	and	r24, r24
    1130:	11 f4       	brne	.+4      	; 0x1136 <populateCoreStats(FullStatsMessageCore*)+0xe0>
    1132:	91 e0       	ldi	r25, 0x01	; 1
    1134:	01 c0       	rjmp	.+2      	; 0x1138 <populateCoreStats(FullStatsMessageCore*)+0xe2>
    1136:	92 e0       	ldi	r25, 0x02	; 2
  content->containsTempAndPower = true;
  content->ambL = fnmax(1, fnmin(254, getAmbientLight() >> 2)); // Coerce to allowed value in range [1,254]. Bug-fix c/o Gary Gladman!
  content->containsAmbL = true;
  // OC1/OC2 = Occupancy: 00 not disclosed, 01 not occupied, 10 possibly occupied, 11 probably occupied.
  // The encodeFullStatsMessageCore() route should omit data not appopriate for security reasons.
  content->occ = twoBitOccupancyValue();
    1138:	f8 01       	movw	r30, r16
    113a:	86 81       	ldd	r24, Z+6	; 0x06
    113c:	8c 7f       	andi	r24, 0xFC	; 252
    113e:	89 2b       	or	r24, r25
    1140:	86 83       	std	Z+6, r24	; 0x06
  }
    1142:	0f 90       	pop	r0
    1144:	0f 90       	pop	r0
    1146:	0f 90       	pop	r0
    1148:	0f 90       	pop	r0
    114a:	cf 91       	pop	r28
    114c:	df 91       	pop	r29
    114e:	1f 91       	pop	r17
    1150:	0f 91       	pop	r16
    1152:	08 95       	ret

00001154 <zapStats(unsigned int)>:

// Clear all collected statistics, eg when moving device to a new room or at a major time change.
// Requires 1.8ms per byte for each byte that actually needs erasing.
//   * maxBytesToErase limit the number of bytes erased to this; strictly positive, else 0 to allow 65536
// Returns true if finished with all bytes erased.
bool zapStats(uint16_t maxBytesToErase)
    1154:	0f 93       	push	r16
    1156:	1f 93       	push	r17
    1158:	cf 93       	push	r28
    115a:	df 93       	push	r29
    115c:	8c 01       	movw	r16, r24
    115e:	c0 e0       	ldi	r28, 0x00	; 0
    1160:	d1 e0       	ldi	r29, 0x01	; 1
  {
  for(uint8_t *p = (uint8_t *)EE_START_STATS; p <= (uint8_t *)EE_END_STATS; ++p)
    { if(eeprom_smart_erase_byte(p)) { if(--maxBytesToErase == 0) { return(false); } } } // Stop if out of time...
    1162:	ce 01       	movw	r24, r28
    1164:	0e 94 a0 0b 	call	0x1740	; 0x1740 <eeprom_smart_erase_byte(unsigned char*)>
    1168:	88 23       	and	r24, r24
    116a:	29 f0       	breq	.+10     	; 0x1176 <zapStats(unsigned int)+0x22>
    116c:	01 50       	subi	r16, 0x01	; 1
    116e:	10 40       	sbci	r17, 0x00	; 0
    1170:	11 f4       	brne	.+4      	; 0x1176 <zapStats(unsigned int)+0x22>
    1172:	80 e0       	ldi	r24, 0x00	; 0
    1174:	06 c0       	rjmp	.+12     	; 0x1182 <zapStats(unsigned int)+0x2e>
// Requires 1.8ms per byte for each byte that actually needs erasing.
//   * maxBytesToErase limit the number of bytes erased to this; strictly positive, else 0 to allow 65536
// Returns true if finished with all bytes erased.
bool zapStats(uint16_t maxBytesToErase)
  {
  for(uint8_t *p = (uint8_t *)EE_START_STATS; p <= (uint8_t *)EE_END_STATS; ++p)
    1176:	21 96       	adiw	r28, 0x01	; 1
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	c8 37       	cpi	r28, 0x78	; 120
    117c:	d8 07       	cpc	r29, r24
    117e:	89 f7       	brne	.-30     	; 0x1162 <zapStats(unsigned int)+0xe>
    1180:	81 e0       	ldi	r24, 0x01	; 1
    { if(eeprom_smart_erase_byte(p)) { if(--maxBytesToErase == 0) { return(false); } } } // Stop if out of time...
  return(true); // All done.
  }
    1182:	df 91       	pop	r29
    1184:	cf 91       	pop	r28
    1186:	1f 91       	pop	r17
    1188:	0f 91       	pop	r16
    118a:	08 95       	ret

0000118c <setMinValvePcReallyOpen(unsigned char)>:
  }

// Set percent open to be considered really open.
// Applies to local valve and, at hub, to calls for remote calls for heat.
// Any out-of-range value (eg >100) clears the override and DEFAULT_MIN_VALVE_PC_REALLY_OPEN will be used.
void setMinValvePcReallyOpen(uint8_t percent)
    118c:	68 2f       	mov	r22, r24
  {
  if((percent > 100) || (percent == 0) || (percent == DEFAULT_MIN_VALVE_PC_REALLY_OPEN))
    118e:	81 50       	subi	r24, 0x01	; 1
    1190:	84 36       	cpi	r24, 0x64	; 100
    1192:	10 f4       	brcc	.+4      	; 0x1198 <setMinValvePcReallyOpen(unsigned char)+0xc>
    1194:	6a 30       	cpi	r22, 0x0A	; 10
    1196:	29 f4       	brne	.+10     	; 0x11a2 <setMinValvePcReallyOpen(unsigned char)+0x16>
    {
    // Bad / out-of-range / default value so erase stored value if not already so.
    eeprom_smart_erase_byte((uint8_t *)EE_START_MIN_VALVE_PC_REALLY_OPEN);
    1198:	83 e1       	ldi	r24, 0x13	; 19
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	0e 94 a0 0b 	call	0x1740	; 0x1740 <eeprom_smart_erase_byte(unsigned char*)>
    11a0:	08 95       	ret
    return;
    }
  // Store specified value with as low wear as possible.
  eeprom_smart_update_byte((uint8_t *)EE_START_MIN_VALVE_PC_REALLY_OPEN, percent);
    11a2:	83 e1       	ldi	r24, 0x13	; 19
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	0e 94 ca 0b 	call	0x1794	; 0x1794 <eeprom_smart_update_byte(unsigned char*, unsigned char)>
    11aa:	08 95       	ret

000011ac <setMinBoilerOnMinutes(unsigned char)>:
#endif

#ifndef setMinBoilerOnMinutes
// Set minimum on (and off) time for pointer (minutes); zero to disable hub mode.
// Suggested minimum of 4 minutes for gas combi; much longer for heat pumps for example.
void setMinBoilerOnMinutes(uint8_t mins) { eeprom_smart_update_byte((uint8_t *)EE_START_MIN_BOILER_ON_MINS_INV, ~(mins)); }
    11ac:	68 2f       	mov	r22, r24
    11ae:	60 95       	com	r22
    11b0:	82 e1       	ldi	r24, 0x12	; 18
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	0e 94 ca 0b 	call	0x1794	; 0x1794 <eeprom_smart_update_byte(unsigned char*, unsigned char)>
    11b8:	08 95       	ret

000011ba <hasEcoBias()>:
// Several system parameters are adjusted depending on the bias,
// with 'eco' slanted toward saving energy, eg with lower target temperatures and shorter on-times.
#ifndef hasEcoBias // If not a macro...
#if defined(TEMP_POT_AVAILABLE)
// Optimisiation/simplication: true if temp pot less than half way.
bool hasEcoBias() { return(getTempPotReducedNoise() < 128); }
    11ba:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <getTempPotReducedNoise()>
    11be:	80 95       	com	r24
    11c0:	88 1f       	adc	r24, r24
    11c2:	88 27       	eor	r24, r24
    11c4:	88 1f       	adc	r24, r24
    11c6:	08 95       	ret

000011c8 <getWARMTargetC()>:
// Exposed implementation.
// Uses cache to avoid expensive recomputation.
// NOT safe in face of interrupts.
uint8_t getWARMTargetC()
  {
  const uint8_t pot = getTempPotReducedNoise();
    11c8:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <getTempPotReducedNoise()>
    11cc:	28 2f       	mov	r18, r24
  // Cached input and result values; initially zero.
  static uint8_t potLast;
  static uint8_t resultLast;
  // Force recompuation if pot value changed
  // or apparently no calc done yet (unlikely/impossible zero cached result).
  if((potLast != pot) || (0 == resultLast))
    11ce:	80 91 3f 01 	lds	r24, 0x013F
    11d2:	82 17       	cp	r24, r18
    11d4:	21 f4       	brne	.+8      	; 0x11de <getWARMTargetC()+0x16>
    11d6:	80 91 3e 01 	lds	r24, 0x013E
    11da:	88 23       	and	r24, r24
    11dc:	79 f4       	brne	.+30     	; 0x11fc <getWARMTargetC()+0x34>
  const uint8_t high = (BIASCOM_WARM+1);
  const uint8_t range = high - low + 1;
  const uint8_t band = 256 / range; // Width of band for each degree C...

  // If relatively small number of distinct temperature values...
  if(pot >= 256 - band) { return(high); } // At top... (optimisation / robustness)
    11de:	24 3e       	cpi	r18, 0xE4	; 228
    11e0:	10 f0       	brcs	.+4      	; 0x11e6 <getWARMTargetC()+0x1e>
    11e2:	88 e1       	ldi	r24, 0x18	; 24
    11e4:	07 c0       	rjmp	.+14     	; 0x11f4 <getWARMTargetC()+0x2c>
    11e6:	9c e1       	ldi	r25, 0x1C	; 28
    11e8:	80 e1       	ldi	r24, 0x10	; 16
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <getWARMTargetC()+0x28>
  if(range < 10)
    {
    uint8_t result = low;
    for(uint8_t ppot = band; ppot < pot; ++result) { ppot += band; }
    11ec:	94 5e       	subi	r25, 0xE4	; 228
    11ee:	8f 5f       	subi	r24, 0xFF	; 255
    11f0:	92 17       	cp	r25, r18
    11f2:	e0 f3       	brcs	.-8      	; 0x11ec <getWARMTargetC()+0x24>
  // or apparently no calc done yet (unlikely/impossible zero cached result).
  if((potLast != pot) || (0 == resultLast))
    {
    const uint8_t result = computeWARMTargetC(pot);
    // Cache input/result.
    resultLast = result;
    11f4:	80 93 3e 01 	sts	0x013E, r24
    potLast = pot;
    11f8:	20 93 3f 01 	sts	0x013F, r18
    return(result);
    }

  // Return cached result.
  return(resultLast);
  }
    11fc:	08 95       	ret

000011fe <shouldBeWarmedAtHour(unsigned char)>:

// Returns true iff room likely to be occupied and need warming at the specified hour's sample point based on collected stats.
// Used for predictively warming a room in smart mode and for choosing setback depths.
// Returns false if no good evidence to warm the room at the given time based on past history over about one week.
//   * hh hour to check for predictive warming [0,23]
bool shouldBeWarmedAtHour(const uint_least8_t hh)
    11fe:	cf 93       	push	r28
    1200:	df 93       	push	r29
  {
#ifndef OMIT_MODULE_LDROCCUPANCYDETECTION
  // Return false if the sample hour's historic ambient light level falls in the bottom quartile.
  // Thus avoid any 'smart' warming for at least 25% of the daily cycle.
  const uint8_t smoothedAmbLight = eeprom_read_byte((uint8_t *)(EE_START_LAST_AMBLIGHT_BY_HOUR_SMOOTHED + hh));
    1202:	48 2f       	mov	r20, r24
    1204:	50 e0       	ldi	r21, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1206:	f9 99       	sbic	0x1f, 1	; 31
    1208:	fe cf       	rjmp	.-4      	; 0x1206 <shouldBeWarmedAtHour(unsigned char)+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    120a:	48 5b       	subi	r20, 0xB8	; 184
    120c:	5e 4f       	sbci	r21, 0xFE	; 254
    120e:	52 bd       	out	0x22, r21	; 34
    1210:	41 bd       	out	0x21, r20	; 33
    1212:	48 54       	subi	r20, 0x48	; 72
    1214:	51 40       	sbci	r21, 0x01	; 1
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1216:	f8 9a       	sbi	0x1f, 0	; 31
    1218:	60 b5       	in	r22, 0x20	; 32
    121a:	28 e4       	ldi	r18, 0x48	; 72
    121c:	31 e0       	ldi	r19, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1220:	f9 99       	sbic	0x1f, 1	; 31
    1222:	fe cf       	rjmp	.-4      	; 0x1220 <shouldBeWarmedAtHour(unsigned char)+0x22>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1224:	32 bd       	out	0x22, r19	; 34
    1226:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1228:	f8 9a       	sbi	0x1f, 0	; 31
    122a:	80 b5       	in	r24, 0x20	; 32
  uint8_t valuesHigher = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
    {
    const uint8_t v = eeprom_read_byte(sE); 
    if(STATS_UNSET_INT == v) { return(false); } // Abort if not a full set of stats (eg at least one full days' worth). 
    if(v > sample) { if(++valuesHigher >= 18) { return(true); } } // Stop as soon as known to be in lower quartile.
    122c:	68 17       	cp	r22, r24
    122e:	20 f4       	brcc	.+8      	; 0x1238 <shouldBeWarmedAtHour(unsigned char)+0x3a>
    1230:	9f 5f       	subi	r25, 0xFF	; 255
    1232:	92 31       	cpi	r25, 0x12	; 18
    1234:	08 f0       	brcs	.+2      	; 0x1238 <shouldBeWarmedAtHour(unsigned char)+0x3a>
    1236:	55 c0       	rjmp	.+170    	; 0x12e2 <shouldBeWarmedAtHour(unsigned char)+0xe4>
//   * s is start of (24) sample set in EEPROM
//   * sample to be tested for being in lower quartile
static bool inBottomQuartile(uint8_t *sE, const uint8_t sample)
  {
  uint8_t valuesHigher = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
    1238:	2f 5f       	subi	r18, 0xFF	; 255
    123a:	3f 4f       	sbci	r19, 0xFF	; 255
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	20 36       	cpi	r18, 0x60	; 96
    1240:	38 07       	cpc	r19, r24
    1242:	71 f7       	brne	.-36     	; 0x1220 <shouldBeWarmedAtHour(unsigned char)+0x22>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1244:	f9 99       	sbic	0x1f, 1	; 31
    1246:	fe cf       	rjmp	.-4      	; 0x1244 <shouldBeWarmedAtHour(unsigned char)+0x46>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1248:	40 5a       	subi	r20, 0xA0	; 160
    124a:	5e 4f       	sbci	r21, 0xFE	; 254
    124c:	52 bd       	out	0x22, r21	; 34
    124e:	41 bd       	out	0x21, r20	; 33
    1250:	40 56       	subi	r20, 0x60	; 96
    1252:	51 40       	sbci	r21, 0x01	; 1
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1254:	f8 9a       	sbi	0x1f, 0	; 31
    1256:	80 b5       	in	r24, 0x20	; 32
#endif

  // Return false if no WARM mode this hour for the last week (ie the unit needs reminding at least once per week).
  // Return true if this hour was in WARM mode yesterday or a week ago, and at least one other day.
  const uint8_t warmHistory = eeprom_read_byte((uint8_t *)(EE_START_LAST_WARMMODE_BY_HOUR + hh));
  if(0 == (0x80 & warmHistory)) // This hour has a history.
    1258:	87 fd       	sbrc	r24, 7
    125a:	0e c0       	rjmp	.+28     	; 0x1278 <shouldBeWarmedAtHour(unsigned char)+0x7a>
    {
    if(0 == warmHistory) // No explicit WARM for a week at this hour, so prevent 'smart' warming.
    125c:	88 23       	and	r24, r24
    125e:	09 f4       	brne	.+2      	; 0x1262 <shouldBeWarmedAtHour(unsigned char)+0x64>
    1260:	40 c0       	rjmp	.+128    	; 0x12e2 <shouldBeWarmedAtHour(unsigned char)+0xe4>
      { return(false); }
    if((0 != (0x41 & warmHistory)) && (0 != (0x3e & warmHistory)))
    1262:	28 2f       	mov	r18, r24
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	c9 01       	movw	r24, r18
    1268:	81 74       	andi	r24, 0x41	; 65
    126a:	90 70       	andi	r25, 0x00	; 0
    126c:	89 2b       	or	r24, r25
    126e:	21 f0       	breq	.+8      	; 0x1278 <shouldBeWarmedAtHour(unsigned char)+0x7a>
    1270:	2e 73       	andi	r18, 0x3E	; 62
    1272:	30 70       	andi	r19, 0x00	; 0
    1274:	23 2b       	or	r18, r19
    1276:	99 f5       	brne	.+102    	; 0x12de <shouldBeWarmedAtHour(unsigned char)+0xe0>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1278:	f9 99       	sbic	0x1f, 1	; 31
    127a:	fe cf       	rjmp	.-4      	; 0x1278 <shouldBeWarmedAtHour(unsigned char)+0x7a>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    127c:	48 5e       	subi	r20, 0xE8	; 232
    127e:	5e 4f       	sbci	r21, 0xFE	; 254
    1280:	52 bd       	out	0x22, r21	; 34
    1282:	41 bd       	out	0x21, r20	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1284:	f8 9a       	sbi	0x1f, 0	; 31
    1286:	80 b5       	in	r24, 0x20	; 32

// Reverses range compression done by compressTempC16(); results in range [0,100], with varying precision based on original value.
// 0xff (or other invalid) input results in STATS_UNSET_INT. 
int expandTempC16(uint8_t cTemp)
  {
  if(cTemp < COMPRESSION_C16_LOW_THR_AFTER) { return(cTemp << 3); }
    1288:	80 32       	cpi	r24, 0x20	; 32
    128a:	40 f4       	brcc	.+16     	; 0x129c <shouldBeWarmedAtHour(unsigned char)+0x9e>
    128c:	c8 2f       	mov	r28, r24
    128e:	d0 e0       	ldi	r29, 0x00	; 0
    1290:	83 e0       	ldi	r24, 0x03	; 3
    1292:	cc 0f       	add	r28, r28
    1294:	dd 1f       	adc	r29, r29
    1296:	8a 95       	dec	r24
    1298:	e1 f7       	brne	.-8      	; 0x1292 <shouldBeWarmedAtHour(unsigned char)+0x94>
    129a:	14 c0       	rjmp	.+40     	; 0x12c4 <shouldBeWarmedAtHour(unsigned char)+0xc6>
  if(cTemp < COMPRESSION_C16_HIGH_THR_AFTER)
    129c:	80 36       	cpi	r24, 0x60	; 96
    129e:	38 f4       	brcc	.+14     	; 0x12ae <shouldBeWarmedAtHour(unsigned char)+0xb0>
    { return(((cTemp - COMPRESSION_C16_LOW_THR_AFTER) << 1) + COMPRESSION_C16_LOW_THRESHOLD); }
    12a0:	c8 2f       	mov	r28, r24
    12a2:	d0 e0       	ldi	r29, 0x00	; 0
    12a4:	cc 0f       	add	r28, r28
    12a6:	dd 1f       	adc	r29, r29
    12a8:	c0 54       	subi	r28, 0x40	; 64
    12aa:	df 4f       	sbci	r29, 0xFF	; 255
    12ac:	0b c0       	rjmp	.+22     	; 0x12c4 <shouldBeWarmedAtHour(unsigned char)+0xc6>
  if(cTemp <= COMPRESSION_C16_CEIL_VAL_AFTER)
    12ae:	89 3f       	cpi	r24, 0xF9	; 249
    12b0:	c0 f4       	brcc	.+48     	; 0x12e2 <shouldBeWarmedAtHour(unsigned char)+0xe4>
    { return(((cTemp - COMPRESSION_C16_HIGH_THR_AFTER) << 3) + COMPRESSION_C16_HIGH_THRESHOLD); }
    12b2:	c8 2f       	mov	r28, r24
    12b4:	d0 e0       	ldi	r29, 0x00	; 0
    12b6:	a3 e0       	ldi	r26, 0x03	; 3
    12b8:	cc 0f       	add	r28, r28
    12ba:	dd 1f       	adc	r29, r29
    12bc:	aa 95       	dec	r26
    12be:	e1 f7       	brne	.-8      	; 0x12b8 <shouldBeWarmedAtHour(unsigned char)+0xba>
    12c0:	c0 58       	subi	r28, 0x80	; 128
    12c2:	d1 40       	sbci	r29, 0x01	; 1
  DEBUG_SERIAL_PRINT(hh);
  DEBUG_SERIAL_PRINT_FLASHSTRING("h is ");
  DEBUG_SERIAL_PRINT(smoothedTempHHNext >> 4);
  DEBUG_SERIAL_PRINTLN();
#endif
  if((STATS_UNSET_INT != smoothedTempHHNext) && (((smoothedTempHHNext+8)>>4) >= getWARMTargetC()))
    12c4:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <getWARMTargetC()>
    12c8:	20 e0       	ldi	r18, 0x00	; 0
    12ca:	28 96       	adiw	r28, 0x08	; 8
    12cc:	f4 e0       	ldi	r31, 0x04	; 4
    12ce:	d5 95       	asr	r29
    12d0:	c7 95       	ror	r28
    12d2:	fa 95       	dec	r31
    12d4:	e1 f7       	brne	.-8      	; 0x12ce <shouldBeWarmedAtHour(unsigned char)+0xd0>
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	c8 17       	cp	r28, r24
    12da:	d9 07       	cpc	r29, r25
    12dc:	1c f0       	brlt	.+6      	; 0x12e4 <shouldBeWarmedAtHour(unsigned char)+0xe6>
    12de:	21 e0       	ldi	r18, 0x01	; 1
    12e0:	01 c0       	rjmp	.+2      	; 0x12e4 <shouldBeWarmedAtHour(unsigned char)+0xe6>
    12e2:	20 e0       	ldi	r18, 0x00	; 0
    { return(true); }

  // No good evidence for room to be warmed for specified hour.
  return(false);
  }
    12e4:	82 2f       	mov	r24, r18
    12e6:	df 91       	pop	r29
    12e8:	cf 91       	pop	r28
    12ea:	08 95       	ret

000012ec <smoothStatsValue(unsigned char, unsigned char)>:

// Compute new linearly-smoothed value given old smoothed value and new value.
// Guaranteed not to produce a value higher than the max of the old smoothed value and the new value.
// Uses stochastic rounding to nearest to allow nominally sub-lsb values to have an effect over time.
// Usually only made public for unit testing.
uint8_t smoothStatsValue(const uint8_t oldSmoothed, const uint8_t newValue)
    12ec:	0f 93       	push	r16
    12ee:	1f 93       	push	r17
    12f0:	18 2f       	mov	r17, r24
    12f2:	06 2f       	mov	r16, r22
  {
  if(oldSmoothed == newValue) { return(oldSmoothed); } // Optimisation: smoothed value is unchanged if new value is the same as extant.
    12f4:	86 17       	cp	r24, r22
    12f6:	b9 f0       	breq	.+46     	; 0x1326 <smoothStatsValue(unsigned char, unsigned char)+0x3a>
  // Compute and update with new stochastically-rounded exponentially-smoothed ("Brown's simple exponential smoothing") value.
  // Stochastic rounding allows sub-lsb values to have an effect over time.
  const uint8_t stocAdd = randRNG8() & ((1 << STATS_SMOOTH_SHIFT) - 1); // Allows sub-lsb values to have an effect over time.
    12f8:	0e 94 18 1a 	call	0x3430	; 0x3430 <randRNG8()>
  DEBUG_SERIAL_PRINT_FLASHSTRING("stocAdd=");
  DEBUG_SERIAL_PRINT(stocAdd);
  DEBUG_SERIAL_PRINTLN();
#endif
  // Do arithmetic in 16 bits to avoid over-/under- flows.
  return((uint8_t) (((((uint16_t) oldSmoothed) << STATS_SMOOTH_SHIFT) - ((uint16_t)oldSmoothed) + ((uint16_t)newValue) + stocAdd) >> STATS_SMOOTH_SHIFT));
    12fc:	21 2f       	mov	r18, r17
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	a9 01       	movw	r20, r18
    1302:	63 e0       	ldi	r22, 0x03	; 3
    1304:	44 0f       	add	r20, r20
    1306:	55 1f       	adc	r21, r21
    1308:	6a 95       	dec	r22
    130a:	e1 f7       	brne	.-8      	; 0x1304 <smoothStatsValue(unsigned char, unsigned char)+0x18>
    130c:	42 1b       	sub	r20, r18
    130e:	53 0b       	sbc	r21, r19
    1310:	87 70       	andi	r24, 0x07	; 7
    1312:	48 0f       	add	r20, r24
    1314:	51 1d       	adc	r21, r1
    1316:	40 0f       	add	r20, r16
    1318:	51 1d       	adc	r21, r1
    131a:	93 e0       	ldi	r25, 0x03	; 3
    131c:	56 95       	lsr	r21
    131e:	47 95       	ror	r20
    1320:	9a 95       	dec	r25
    1322:	e1 f7       	brne	.-8      	; 0x131c <smoothStatsValue(unsigned char, unsigned char)+0x30>
    1324:	14 2f       	mov	r17, r20
  }
    1326:	81 2f       	mov	r24, r17
    1328:	1f 91       	pop	r17
    132a:	0f 91       	pop	r16
    132c:	08 95       	ret

0000132e <sampleStats(bool)>:
// Call this once per hour with fullSample==true, as near the end of the hour as possible;
// this will update the non-volatile stats record for the current hour.
// Optionally call this at a small (2--10) even number of evenly-spaced number of other times thoughout the hour
// with fullSample=false to sub-sample (and these may receive lower weighting or be ignored).
// (EEPROM wear should not be an issue at this update rate in normal use.)
void sampleStats(const bool fullSample)
    132e:	ef 92       	push	r14
    1330:	ff 92       	push	r15
    1332:	0f 93       	push	r16
    1334:	1f 93       	push	r17
    1336:	cf 93       	push	r28
    1338:	df 93       	push	r29
    133a:	08 2f       	mov	r16, r24
  {
  // (Sub-)sample processing.
  static uint8_t sampleCount; // General sub-sample count; initially zero, and zeroed after each full sample.
  const bool firstSample = (0 == sampleCount++);
    133c:	80 91 3a 01 	lds	r24, 0x013A
    1340:	10 e0       	ldi	r17, 0x00	; 0
    1342:	88 23       	and	r24, r24
    1344:	09 f4       	brne	.+2      	; 0x1348 <sampleStats(bool)+0x1a>
    1346:	11 e0       	ldi	r17, 0x01	; 1
    1348:	8f 5f       	subi	r24, 0xFF	; 255
    134a:	80 93 3a 01 	sts	0x013A, r24
  // WARM mode count.
  static int8_t warmCount; // Sub-sample WARM count; initially zero, and zeroed after each full sample.
  if(inWarmModeDebounced()) { ++warmCount; } else { --warmCount; }
    134e:	0e 94 aa 20 	call	0x4154	; 0x4154 <inWarmModeDebounced()>
    1352:	90 91 39 01 	lds	r25, 0x0139
    1356:	88 23       	and	r24, r24
    1358:	11 f0       	breq	.+4      	; 0x135e <sampleStats(bool)+0x30>
    135a:	9f 5f       	subi	r25, 0xFF	; 255
    135c:	01 c0       	rjmp	.+2      	; 0x1360 <sampleStats(bool)+0x32>
    135e:	91 50       	subi	r25, 0x01	; 1
    1360:	90 93 39 01 	sts	0x0139, r25
  // Ambient light.
  const int ambLight = getAmbientLight();
    1364:	0e 94 28 07 	call	0xe50	; 0xe50 <getAmbientLight()>
    1368:	9c 01       	movw	r18, r24
  static int ambLightTotal;
  ambLightTotal = firstSample ? ambLight : (ambLightTotal + ambLight);
    136a:	11 23       	and	r17, r17
    136c:	31 f4       	brne	.+12     	; 0x137a <sampleStats(bool)+0x4c>
    136e:	80 91 37 01 	lds	r24, 0x0137
    1372:	90 91 38 01 	lds	r25, 0x0138
    1376:	28 0f       	add	r18, r24
    1378:	39 1f       	adc	r19, r25
    137a:	30 93 38 01 	sts	0x0138, r19
    137e:	20 93 37 01 	sts	0x0137, r18
  const int tempC16 = getTemperatureC16();
    1382:	0e 94 9e 20 	call	0x413c	; 0x413c <getTemperatureC16()>
    1386:	9c 01       	movw	r18, r24
  static int tempC16Total;
  tempC16Total = firstSample ? tempC16 : (tempC16Total + tempC16);
    1388:	11 23       	and	r17, r17
    138a:	31 f4       	brne	.+12     	; 0x1398 <sampleStats(bool)+0x6a>
    138c:	80 91 35 01 	lds	r24, 0x0135
    1390:	90 91 36 01 	lds	r25, 0x0136
    1394:	28 0f       	add	r18, r24
    1396:	39 1f       	adc	r19, r25
    1398:	30 93 36 01 	sts	0x0136, r19
    139c:	20 93 35 01 	sts	0x0135, r18
  if(!fullSample) { return; } // Only accumulate values cached until a full sample.
    13a0:	00 23       	and	r16, r16
    13a2:	09 f4       	brne	.+2      	; 0x13a6 <sampleStats(bool)+0x78>
    13a4:	89 c0       	rjmp	.+274    	; 0x14b8 <sampleStats(bool)+0x18a>

  const uint_least8_t hh = getHoursLT(); // Get the current local-time hour...
    13a6:	0e 94 c7 1c 	call	0x398e	; 0x398e <getHoursLT()>
    13aa:	18 2f       	mov	r17, r24

  // Scale and constrain last-read temperature to valid range for stats.
  const uint8_t temp = compressTempC16((tempC16Total + (sampleCount/2)) / sampleCount);
    13ac:	60 91 3a 01 	lds	r22, 0x013A
    13b0:	26 2f       	mov	r18, r22
    13b2:	26 95       	lsr	r18
    13b4:	80 91 35 01 	lds	r24, 0x0135
    13b8:	90 91 36 01 	lds	r25, 0x0136
    13bc:	82 0f       	add	r24, r18
    13be:	91 1d       	adc	r25, r1
    13c0:	70 e0       	ldi	r23, 0x00	; 0
    13c2:	0e 94 0f 39 	call	0x721e	; 0x721e <__divmodhi4>
    13c6:	cb 01       	movw	r24, r22
    13c8:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <compressTempC16(int)>
    13cc:	08 2f       	mov	r16, r24
  // Update the last-sample slot using the mean samples value.
  eeprom_smart_update_byte((uint8_t *)(EE_START_LAST_TEMP_BY_HOUR + hh), temp);
    13ce:	e1 2e       	mov	r14, r17
    13d0:	ff 24       	eor	r15, r15
    13d2:	c7 01       	movw	r24, r14
    13d4:	80 50       	subi	r24, 0x00	; 0
    13d6:	9f 4f       	sbci	r25, 0xFF	; 255
    13d8:	60 2f       	mov	r22, r16
    13da:	0e 94 ca 0b 	call	0x1794	; 0x1794 <eeprom_smart_update_byte(unsigned char*, unsigned char)>
  // If existing smoothed value unset or invalid, use new one as is, else fold in.
  uint8_t *const phT = (uint8_t *)(EE_START_LAST_TEMP_BY_HOUR_SMOOTHED + hh);
    13de:	e7 01       	movw	r28, r14
    13e0:	c8 5e       	subi	r28, 0xE8	; 232
    13e2:	de 4f       	sbci	r29, 0xFE	; 254
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    13e4:	f9 99       	sbic	0x1f, 1	; 31
    13e6:	fe cf       	rjmp	.-4      	; 0x13e4 <sampleStats(bool)+0xb6>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    13e8:	d2 bd       	out	0x22, r29	; 34
    13ea:	c1 bd       	out	0x21, r28	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    13ec:	f8 9a       	sbi	0x1f, 0	; 31
    13ee:	80 b5       	in	r24, 0x20	; 32
  const uint8_t tempSmoothed = eeprom_read_byte(phT);
  if(tempSmoothed > MAX_STATS_TEMP) { eeprom_smart_update_byte(phT, temp); }
    13f0:	89 3f       	cpi	r24, 0xF9	; 249
    13f2:	18 f0       	brcs	.+6      	; 0x13fa <sampleStats(bool)+0xcc>
    13f4:	ce 01       	movw	r24, r28
    13f6:	60 2f       	mov	r22, r16
    13f8:	05 c0       	rjmp	.+10     	; 0x1404 <sampleStats(bool)+0xd6>
  else { eeprom_smart_update_byte(phT, smoothStatsValue(tempSmoothed, temp)); }
    13fa:	60 2f       	mov	r22, r16
    13fc:	0e 94 76 09 	call	0x12ec	; 0x12ec <smoothStatsValue(unsigned char, unsigned char)>
    1400:	68 2f       	mov	r22, r24
    1402:	ce 01       	movw	r24, r28
    1404:	0e 94 ca 0b 	call	0x1794	; 0x1794 <eeprom_smart_update_byte(unsigned char*, unsigned char)>

  // Scale and constrain mean ambient-light value to valid range for stats; very top of range is compressed to retain maximum gamut.
  const uint8_t ambLShifted = (uint8_t) ((ambLightTotal + (sampleCount<<1)) / (sampleCount<<2));
    1408:	80 91 3a 01 	lds	r24, 0x013A
    140c:	90 e0       	ldi	r25, 0x00	; 0
  const uint8_t ambL = min(ambLShifted, MAX_STATS_AMBLIGHT);
    140e:	20 91 37 01 	lds	r18, 0x0137
    1412:	30 91 38 01 	lds	r19, 0x0138
    1416:	bc 01       	movw	r22, r24
    1418:	66 0f       	add	r22, r22
    141a:	77 1f       	adc	r23, r23
    141c:	66 0f       	add	r22, r22
    141e:	77 1f       	adc	r23, r23
    1420:	88 0f       	add	r24, r24
    1422:	99 1f       	adc	r25, r25
    1424:	82 0f       	add	r24, r18
    1426:	93 1f       	adc	r25, r19
    1428:	0e 94 0f 39 	call	0x721e	; 0x721e <__divmodhi4>
    142c:	16 2f       	mov	r17, r22
    142e:	6f 3f       	cpi	r22, 0xFF	; 255
    1430:	08 f0       	brcs	.+2      	; 0x1434 <sampleStats(bool)+0x106>
    1432:	1e ef       	ldi	r17, 0xFE	; 254
  // Update the last-sample slot using the mean samples value.
  eeprom_smart_update_byte((uint8_t *)(EE_START_LAST_AMBLIGHT_BY_HOUR + hh), ambL);
    1434:	c7 01       	movw	r24, r14
    1436:	80 5d       	subi	r24, 0xD0	; 208
    1438:	9e 4f       	sbci	r25, 0xFE	; 254
    143a:	61 2f       	mov	r22, r17
    143c:	0e 94 ca 0b 	call	0x1794	; 0x1794 <eeprom_smart_update_byte(unsigned char*, unsigned char)>
  // If existing smoothed value unset or invalid, use new one as is, else fold in.
  uint8_t *const phA = (uint8_t *)(EE_START_LAST_AMBLIGHT_BY_HOUR_SMOOTHED + hh);
    1440:	e7 01       	movw	r28, r14
    1442:	c8 5b       	subi	r28, 0xB8	; 184
    1444:	de 4f       	sbci	r29, 0xFE	; 254
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1446:	f9 99       	sbic	0x1f, 1	; 31
    1448:	fe cf       	rjmp	.-4      	; 0x1446 <sampleStats(bool)+0x118>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    144a:	d2 bd       	out	0x22, r29	; 34
    144c:	c1 bd       	out	0x21, r28	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    144e:	f8 9a       	sbi	0x1f, 0	; 31
    1450:	80 b5       	in	r24, 0x20	; 32
  const uint8_t ambLSmoothed = eeprom_read_byte(phA);
  if(ambLSmoothed > MAX_STATS_AMBLIGHT) { eeprom_smart_update_byte(phA, ambL); }
    1452:	8f 3f       	cpi	r24, 0xFF	; 255
    1454:	19 f4       	brne	.+6      	; 0x145c <sampleStats(bool)+0x12e>
    1456:	ce 01       	movw	r24, r28
    1458:	61 2f       	mov	r22, r17
    145a:	05 c0       	rjmp	.+10     	; 0x1466 <sampleStats(bool)+0x138>
  else { eeprom_smart_update_byte(phA, smoothStatsValue(ambLSmoothed, ambL)); }
    145c:	61 2f       	mov	r22, r17
    145e:	0e 94 76 09 	call	0x12ec	; 0x12ec <smoothStatsValue(unsigned char, unsigned char)>
    1462:	68 2f       	mov	r22, r24
    1464:	ce 01       	movw	r24, r28
    1466:	0e 94 ca 0b 	call	0x1794	; 0x1794 <eeprom_smart_update_byte(unsigned char*, unsigned char)>
  // Bit 6 is 1 if most recent day's sample was in WARM (or BAKE) mode, 0 if in FROST mode.
  // At each new sampling, bits 6--1 are shifted down and the new bit 6 set as above.
  // Designed to enable low-wear no-write or selective erase/write use much of the time;
  // periods which are always the same mode will achieve a steady-state value (eliminating most EEPROM wear)
  // while even some of the rest (while switching over from all-WARM to all-FROST) will only need pure writes (no erase).
  uint8_t *const phW = (uint8_t *)(EE_START_LAST_WARMMODE_BY_HOUR + hh);
    146a:	e7 01       	movw	r28, r14
    146c:	c0 5a       	subi	r28, 0xA0	; 160
    146e:	de 4f       	sbci	r29, 0xFE	; 254
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1470:	f9 99       	sbic	0x1f, 1	; 31
    1472:	fe cf       	rjmp	.-4      	; 0x1470 <sampleStats(bool)+0x142>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1474:	d2 bd       	out	0x22, r29	; 34
    1476:	c1 bd       	out	0x21, r28	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1478:	f8 9a       	sbi	0x1f, 0	; 31
    147a:	80 b5       	in	r24, 0x20	; 32
  const uint8_t warmHistory = eeprom_read_byte(phW);
  if(warmHistory & 0x80) { eeprom_smart_clear_bits(phW, inWarmModeDebounced() ? 0x7f : 0); } // First use sets all history bits to current sample value.
    147c:	87 ff       	sbrs	r24, 7
    147e:	0b c0       	rjmp	.+22     	; 0x1496 <sampleStats(bool)+0x168>
    1480:	0e 94 aa 20 	call	0x4154	; 0x4154 <inWarmModeDebounced()>
    1484:	88 23       	and	r24, r24
    1486:	11 f4       	brne	.+4      	; 0x148c <sampleStats(bool)+0x15e>
    1488:	60 e0       	ldi	r22, 0x00	; 0
    148a:	01 c0       	rjmp	.+2      	; 0x148e <sampleStats(bool)+0x160>
    148c:	6f e7       	ldi	r22, 0x7F	; 127
    148e:	ce 01       	movw	r24, r28
    1490:	0e 94 b4 0b 	call	0x1768	; 0x1768 <eeprom_smart_clear_bits(unsigned char*, unsigned char)>
    1494:	0d c0       	rjmp	.+26     	; 0x14b0 <sampleStats(bool)+0x182>
  else // Shift in today's sample bit value for this hour at bit 6...
    {
    uint8_t newWarmHistory = (warmHistory >> 1) & 0x3f;
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	95 95       	asr	r25
    149a:	87 95       	ror	r24
    149c:	68 2f       	mov	r22, r24
    149e:	6f 73       	andi	r22, 0x3F	; 63
    if(warmCount > 0) { newWarmHistory |= 0x40; } // Treat as warm iff more WARM than FROST (sub-)samples.
    14a0:	80 91 39 01 	lds	r24, 0x0139
    14a4:	18 16       	cp	r1, r24
    14a6:	0c f4       	brge	.+2      	; 0x14aa <sampleStats(bool)+0x17c>
    14a8:	60 64       	ori	r22, 0x40	; 64
    eeprom_smart_update_byte(phW, newWarmHistory);
    14aa:	ce 01       	movw	r24, r28
    14ac:	0e 94 ca 0b 	call	0x1794	; 0x1794 <eeprom_smart_update_byte(unsigned char*, unsigned char)>
    }
  // Reset WARM sub-sample count after full sample.
  warmCount = 0;
    14b0:	10 92 39 01 	sts	0x0139, r1

  // TODO: other stats measures...


  // Reset generical sub-sample count to initial state after fill sample.
  sampleCount = 0;
    14b4:	10 92 3a 01 	sts	0x013A, r1
  }
    14b8:	df 91       	pop	r29
    14ba:	cf 91       	pop	r28
    14bc:	1f 91       	pop	r17
    14be:	0f 91       	pop	r16
    14c0:	ff 90       	pop	r15
    14c2:	ef 90       	pop	r14
    14c4:	08 95       	ret

000014c6 <markAsPossiblyOccupied()>:
// Also use to simulate demand on behalf of user, eg for some part of schedule.
// In this implementation sets the timeout to half the usual time (unless already higher),
// which shouldn't force the room to appear recently occupied.
// Do not call from an ISR.
void markAsPossiblyOccupied()
  { occupationCountdownM = fmax(occupationCountdownM, OCCUPATION_TIMEOUT_M/2); }
    14c6:	60 91 3b 01 	lds	r22, 0x013B
    14ca:	70 e0       	ldi	r23, 0x00	; 0
    14cc:	80 e0       	ldi	r24, 0x00	; 0
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	0e 94 2f 38 	call	0x705e	; 0x705e <__floatunsisf>
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	40 eb       	ldi	r20, 0xB0	; 176
    14da:	51 e4       	ldi	r21, 0x41	; 65
    14dc:	0e 94 6c 38 	call	0x70d8	; 0x70d8 <fmax>
    14e0:	0e 94 03 38 	call	0x7006	; 0x7006 <__fixunssfsi>
    14e4:	60 93 3b 01 	sts	0x013B, r22
    14e8:	08 95       	ret

000014ea <getFROSTTargetC()>:
uint8_t getFROSTTargetC()
  {
  // Crudely select between eco/comfort FROST levels at the half-way mark.
  // Should not be critical enough to worry over.
  // Prevent falling to lowest frost temperature if relative humidity is high (eg to avoid mould).
  if(!hasEcoBias() || (isRHAvailable() && isRHHigh())) { return(BIASCOM_FROST); }
    14ea:	0e 94 dd 08 	call	0x11ba	; 0x11ba <hasEcoBias()>
    14ee:	88 23       	and	r24, r24
    14f0:	31 f0       	breq	.+12     	; 0x14fe <getFROSTTargetC()+0x14>
    14f2:	0e 94 45 12 	call	0x248a	; 0x248a <getRHpc()>
    14f6:	8b 34       	cpi	r24, 0x4B	; 75
    14f8:	10 f4       	brcc	.+4      	; 0x14fe <getFROSTTargetC()+0x14>
    14fa:	85 e0       	ldi	r24, 0x05	; 5
    14fc:	08 95       	ret
    14fe:	8c e0       	ldi	r24, 0x0C	; 12
  return(BIASECO_FROST); // Default is 'eco' notion of frost protection.
  }
    1500:	08 95       	ret

00001502 <computeTargetTemperature()>:


// Compute target temperature.
// Can be called as often as require though may be slow/expensive.
// Will be called by computeCallForHeat().
void computeTargetTemperature()
    1502:	1f 93       	push	r17
  {
#if defined(TEMP_POT_AVAILABLE)
  // Force up-to-date reading of temperature pot.
  readTempPot();
    1504:	0e 94 6e 20 	call	0x40dc	; 0x40dc <readTempPot()>
#endif

  if(!inWarmModeDebounced()) // In FROST mode.
    1508:	0e 94 aa 20 	call	0x4154	; 0x4154 <inWarmModeDebounced()>
    150c:	88 23       	and	r24, r24
    150e:	19 f4       	brne	.+6      	; 0x1516 <computeTargetTemperature()+0x14>
    {
    const uint8_t frostC = getFROSTTargetC();
    1510:	0e 94 75 0a 	call	0x14ea	; 0x14ea <getFROSTTargetC()>
    1514:	2e c0       	rjmp	.+92     	; 0x1572 <computeTargetTemperature()+0x70>
      }
#endif
    }

#ifdef SUPPORT_BAKE
  else if(inBakeModeDebounced()) // If in BAKE mode then use elevated target.
    1516:	0e 94 ad 20 	call	0x415a	; 0x415a <inBakeModeDebounced()>
    151a:	88 23       	and	r24, r24
    151c:	39 f0       	breq	.+14     	; 0x152c <computeTargetTemperature()+0x2a>
    {
    // dec bakeCountdownM // Moved management of counter to UI code.
    targetTempC = fnmin((uint8_t)(getWARMTargetC() + BAKE_UPLIFT), (uint8_t)MAX_TARGET_C); // No setbacks apply in BAKE mode.
    151e:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <getWARMTargetC()>
    1522:	8b 5f       	subi	r24, 0xFB	; 251
    1524:	80 36       	cpi	r24, 0x60	; 96
    1526:	28 f1       	brcs	.+74     	; 0x1572 <computeTargetTemperature()+0x70>
    1528:	8f e5       	ldi	r24, 0x5F	; 95
    152a:	23 c0       	rjmp	.+70     	; 0x1572 <computeTargetTemperature()+0x70>
    // TODO: If no schedule set and no occupancy detected for over 1 day, then invoke full setback assuming people are away, eg on holiday.

    // Set back target temperature a little if room is too dark for activity AND room seems unoccupied
    // AND the unit has an eco bias or no schedule is on WARM at the moment (TODO-111).
    // TODO: with full occupancy support then allow setback simply based on lack of occupancy.
    const bool scheduledOn = isAnyScheduleOnWARMNow();
    152c:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <isAnyScheduleOnWARMNow()>
    1530:	18 2f       	mov	r17, r24
    if(((!scheduledOn) || hasEcoBias()) && // TODO-111: suppress set-back from lack of occupancy in scheduled on-time in comfort mode.
    1532:	88 23       	and	r24, r24
    1534:	21 f0       	breq	.+8      	; 0x153e <computeTargetTemperature()+0x3c>
    1536:	0e 94 dd 08 	call	0x11ba	; 0x11ba <hasEcoBias()>
    153a:	88 23       	and	r24, r24
    153c:	c1 f0       	breq	.+48     	; 0x156e <computeTargetTemperature()+0x6c>
    153e:	0e 94 25 07 	call	0xe4a	; 0xe4a <isRoomLit()>
    1542:	88 23       	and	r24, r24
    1544:	a1 f4       	brne	.+40     	; 0x156e <computeTargetTemperature()+0x6c>
    1546:	80 91 3b 01 	lds	r24, 0x013B
    154a:	88 23       	and	r24, r24
    154c:	81 f4       	brne	.+32     	; 0x156e <computeTargetTemperature()+0x6c>
       isRoomDark() && isLikelyUnoccupied()) // Only setback if apparently unoccupied.  
      {
      const uint8_t wt = getWARMTargetC();
    154e:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <getWARMTargetC()>
    1552:	98 2f       	mov	r25, r24
      // Use a bigger setback if extreme eco bias, unless in scheduled on-time.
      const uint8_t setback = ((!scheduledOn) && isEcoTemperature(wt)) ? SETBACK_ECO : SETBACK_DEFAULT;
    1554:	11 23       	and	r17, r17
    1556:	21 f4       	brne	.+8      	; 0x1560 <computeTargetTemperature()+0x5e>
    1558:	82 31       	cpi	r24, 0x12	; 18
    155a:	10 f4       	brcc	.+4      	; 0x1560 <computeTargetTemperature()+0x5e>
    155c:	82 e0       	ldi	r24, 0x02	; 2
    155e:	01 c0       	rjmp	.+2      	; 0x1562 <computeTargetTemperature()+0x60>
    1560:	81 e0       	ldi	r24, 0x01	; 1
      // Set a 'smarter' setback target temperature based on predicted occupancy, etc, even if not explicitly in 'smart' mode.
      const uint_least8_t hh = getHoursLT();
      const uint8_t sba = shouldBeWarmedAtHour(hh) ? setback : SETBACK_FULL; 
      targetTempC = fnmax((uint8_t)(wt - sba), getFROSTTargetC());
#else // Lighter-weight code, eg for PICAXE.
      targetTempC = fnmax((uint8_t)(wt - setback), (uint8_t)MIN_TARGET_C); // Target must never be set low enough to create a frost/freeze hazard.
    1562:	98 1b       	sub	r25, r24
    1564:	89 2f       	mov	r24, r25
template <class T> const T& fnmax(const T& a, const T& b) { return((a<b)?b:a); }
    1566:	95 30       	cpi	r25, 0x05	; 5
    1568:	20 f4       	brcc	.+8      	; 0x1572 <computeTargetTemperature()+0x70>
    156a:	85 e0       	ldi	r24, 0x05	; 5
    156c:	02 c0       	rjmp	.+4      	; 0x1572 <computeTargetTemperature()+0x70>
#endif
      }
    else
      { targetTempC = getWARMTargetC(); } // Room not known to be too dark for normal activity so use WARM target directly.
    156e:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <getWARMTargetC()>
    1572:	80 93 3c 01 	sts	0x013C, r24
    }
  }
    1576:	1f 91       	pop	r17
    1578:	08 95       	ret

0000157a <computeCallForHeat()>:
// The inputs must be valid (and recent).
// Values set are targetTempC, TRVPercentOpen.
// This may also prepare data such as TX command sequences for the TRV, boiler, etc.
// This routine may take significant CPU time; no I/O is done, only internal state is updated.
// Returns true if valve target changed and thus messages may need to be recomputed/sent/etc.
bool computeCallForHeat()
    157a:	ef 92       	push	r14
    157c:	0f 93       	push	r16
    157e:	df 93       	push	r29
    1580:	cf 93       	push	r28
    1582:	00 d0       	rcall	.+0      	; 0x1584 <computeCallForHeat()+0xa>
    1584:	00 d0       	rcall	.+0      	; 0x1586 <computeCallForHeat()+0xc>
    1586:	cd b7       	in	r28, 0x3d	; 61
    1588:	de b7       	in	r29, 0x3e	; 62
  {
  // Run down occupation timer if need be.
  if(occupationCountdownM > 0) { --occupationCountdownM; }
    158a:	80 91 3b 01 	lds	r24, 0x013B
    158e:	88 23       	and	r24, r24
    1590:	19 f0       	breq	.+6      	; 0x1598 <computeCallForHeat()+0x1e>
    1592:	81 50       	subi	r24, 0x01	; 1
    1594:	80 93 3b 01 	sts	0x013B, r24

  computeTargetTemperature();
    1598:	0e 94 81 0a 	call	0x1502	; 0x1502 <computeTargetTemperature()>
// and try to eliminate unnecessary 'hunting' which makes noise and uses actuator energy.
static bool computeRequiredTRVPercentOpen()
  {
  bool changed = false;

  const int currentTempC16 = getTemperatureC16();
    159c:	0e 94 9e 20 	call	0x413c	; 0x413c <getTemperatureC16()>
    15a0:	ac 01       	movw	r20, r24
  const uint8_t currentTempC = (uint8_t)(currentTempC16 >> 4);
    15a2:	a4 e0       	ldi	r26, 0x04	; 4
    15a4:	95 95       	asr	r25
    15a6:	87 95       	ror	r24
    15a8:	aa 95       	dec	r26
    15aa:	e1 f7       	brne	.-8      	; 0x15a4 <computeCallForHeat()+0x2a>

  if(currentTempC < targetTempC) // (Well) under temp target: open valve.
    15ac:	30 91 3c 01 	lds	r19, 0x013C
    15b0:	83 17       	cp	r24, r19
    15b2:	e0 f4       	brcc	.+56     	; 0x15ec <computeCallForHeat()+0x72>
    {
    // Limit valve open slew to help minimise overshoot and actuator noise.
    // This should also reduce nugatory setting changes when occupancy (etc) is fluctuating.
    // Thus it may take several minutes to turn the radiator fully on,
    // though probably opening the first 30% will allow near-maximum heat output in practice.
    if(TRVPercentOpen != 100)
    15b4:	80 91 3d 01 	lds	r24, 0x013D
    15b8:	84 36       	cpi	r24, 0x64	; 100
    15ba:	09 f4       	brne	.+2      	; 0x15be <computeCallForHeat()+0x44>
    15bc:	b5 c0       	rjmp	.+362    	; 0x1728 <computeCallForHeat()+0x1ae>
      {
#if defined(SUPPORT_BAKE) && !defined(TRV_SLEW_GLACIAL)
      // If room is well below target then in BAKE mode immediately open to 100%, unless always glacial.
      // FIXME: use debounced bake mode value to avoid spurious slamming open of the valve if user cycles through modes.
      if(inBakeModeDebounced()) { TRVPercentOpen = 100; }
    15be:	0e 94 ad 20 	call	0x415a	; 0x415a <inBakeModeDebounced()>
    15c2:	88 23       	and	r24, r24
    15c4:	61 f4       	brne	.+24     	; 0x15de <computeCallForHeat()+0x64>
      else
#endif
        {
#if !defined(TRV_SLEW_GLACIAL) // Unless glacial, open faster than usual even with eco bias, and even faster with comfort.
        const uint8_t tmp = TRVPercentOpen + ((!hasEcoBias()) ? TRV_SLEW_PC_PER_MIN_VFAST : TRV_SLEW_PC_PER_MIN_FAST);
    15c6:	00 91 3d 01 	lds	r16, 0x013D
    15ca:	0e 94 dd 08 	call	0x11ba	; 0x11ba <hasEcoBias()>
    15ce:	88 23       	and	r24, r24
    15d0:	11 f0       	breq	.+4      	; 0x15d6 <computeCallForHeat()+0x5c>
    15d2:	8a e0       	ldi	r24, 0x0A	; 10
    15d4:	01 c0       	rjmp	.+2      	; 0x15d8 <computeCallForHeat()+0x5e>
    15d6:	84 e1       	ldi	r24, 0x14	; 20
    15d8:	80 0f       	add	r24, r16
#else
        const uint8_t tmp = TRVPercentOpen + TRV_MAX_SLEW_PC_PER_MIN;
#endif
        if(tmp > 100) { TRVPercentOpen = 100; } // Capped at 100%.
    15da:	85 36       	cpi	r24, 0x65	; 101
    15dc:	10 f0       	brcs	.+4      	; 0x15e2 <computeCallForHeat()+0x68>
    15de:	84 e6       	ldi	r24, 0x64	; 100
    15e0:	9c c0       	rjmp	.+312    	; 0x171a <computeCallForHeat()+0x1a0>
        else
          {
#if defined(VALVE_TURN_OFF_LINGER) && (DEFAULT_MIN_VALVE_PC_REALLY_OPEN > TRV_MAX_SLEW_PC_PER_MIN)
          // Ensure valve will be immediately significantly opened (and that linger can work properly).
          if(tmp < DEFAULT_MIN_VALVE_PC_REALLY_OPEN) { TRVPercentOpen = DEFAULT_MIN_VALVE_PC_REALLY_OPEN; }
    15e2:	8a 30       	cpi	r24, 0x0A	; 10
    15e4:	08 f0       	brcs	.+2      	; 0x15e8 <computeCallForHeat()+0x6e>
    15e6:	99 c0       	rjmp	.+306    	; 0x171a <computeCallForHeat()+0x1a0>
    15e8:	8a e0       	ldi	r24, 0x0A	; 10
    15ea:	97 c0       	rjmp	.+302    	; 0x171a <computeCallForHeat()+0x1a0>
          }
        }      
      changed = true; // TRV setting has been changed.
      }
    }
  else if(currentTempC > targetTempC) // (Well) over temp target: close valve if not yet closed.
    15ec:	38 17       	cp	r19, r24
    15ee:	30 f5       	brcc	.+76     	; 0x163c <computeCallForHeat()+0xc2>
    {
    cancelBake(); // Ensure BAKE mode cancelled immediately if over target (eg when target is BAKE).
    15f0:	0e 94 b6 20 	call	0x416c	; 0x416c <cancelBake()>
    if(TRVPercentOpen != 0)
    15f4:	80 91 3d 01 	lds	r24, 0x013D
    15f8:	88 23       	and	r24, r24
    15fa:	09 f4       	brne	.+2      	; 0x15fe <computeCallForHeat()+0x84>
    15fc:	95 c0       	rjmp	.+298    	; 0x1728 <computeCallForHeat()+0x1ae>
      // Continue shutting valve as not yet closed.
#if defined(VALVE_TURN_OFF_LINGER) && (DEFAULT_MIN_VALVE_PC_REALLY_OPEN > 0)
      // TODO-117: allow very slow final turn off to help systems with poor bypass, ~1% per minute.
      // Special slow-turn-off rules for final part of travel at/below DEFAULT_MIN_VALVE_PC_REALLY_OPEN floor.
      const uint8_t lingerThreshold = DEFAULT_MIN_VALVE_PC_REALLY_OPEN - 1; // Should be below 'call for heat' threshold.
      if(TRVPercentOpen <= lingerThreshold)
    15fe:	8a 30       	cpi	r24, 0x0A	; 10
    1600:	38 f4       	brcc	.+14     	; 0x1610 <computeCallForHeat()+0x96>
        {
        // If lingered long enough then do final chunk in one burst to help avoid valve hiss and temperature overshoot.
        if((DEFAULT_MAX_RUN_ON_TIME_M < DEFAULT_MIN_VALVE_PC_REALLY_OPEN) && (TRVPercentOpen < DEFAULT_MIN_VALVE_PC_REALLY_OPEN - DEFAULT_MAX_RUN_ON_TIME_M))
    1602:	85 30       	cpi	r24, 0x05	; 5
    1604:	18 f4       	brcc	.+6      	; 0x160c <computeCallForHeat()+0x92>
          { TRVPercentOpen = 0; } // Shut right off.
    1606:	10 92 3d 01 	sts	0x013D, r1
    160a:	89 c0       	rjmp	.+274    	; 0x171e <computeCallForHeat()+0x1a4>
        else
          { --TRVPercentOpen; } // Turn down as slowly as reasonably possible to help boiler cool.
    160c:	81 50       	subi	r24, 0x01	; 1
    160e:	85 c0       	rjmp	.+266    	; 0x171a <computeCallForHeat()+0x1a0>
#else
      // No special linger threshold.
      const uint8_t lingerThreshold = 0; // Fully off.
#endif    
      // TODO-109: with comfort bias (or at hub because of self-heating temp errors) slew to off relatively slowly.
      if(((!hasEcoBias()) || inHubMode()) && (TRVPercentOpen > lingerThreshold + TRV_SLEW_PC_PER_MIN_VFAST)) { TRVPercentOpen -= TRV_SLEW_PC_PER_MIN_VFAST; }
    1610:	0e 94 dd 08 	call	0x11ba	; 0x11ba <hasEcoBias()>
    1614:	88 23       	and	r24, r24
    1616:	59 f0       	breq	.+22     	; 0x162e <computeCallForHeat()+0xb4>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1618:	f9 99       	sbic	0x1f, 1	; 31
    161a:	fe cf       	rjmp	.-4      	; 0x1618 <computeCallForHeat()+0x9e>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    161c:	82 e1       	ldi	r24, 0x12	; 18
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	92 bd       	out	0x22, r25	; 34
    1622:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1624:	f8 9a       	sbi	0x1f, 0	; 31
    1626:	80 b5       	in	r24, 0x20	; 32
    1628:	8f 3f       	cpi	r24, 0xFF	; 255
    162a:	09 f4       	brne	.+2      	; 0x162e <computeCallForHeat()+0xb4>
    162c:	87 c0       	rjmp	.+270    	; 0x173c <computeCallForHeat()+0x1c2>
    162e:	80 91 3d 01 	lds	r24, 0x013D
    1632:	8e 31       	cpi	r24, 0x1E	; 30
    1634:	08 f4       	brcc	.+2      	; 0x1638 <computeCallForHeat()+0xbe>
    1636:	82 c0       	rjmp	.+260    	; 0x173c <computeCallForHeat()+0x1c2>
    1638:	84 51       	subi	r24, 0x14	; 20
    163a:	6f c0       	rjmp	.+222    	; 0x171a <computeCallForHeat()+0x1a0>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    163c:	f9 99       	sbic	0x1f, 1	; 31
    163e:	fe cf       	rjmp	.-4      	; 0x163c <computeCallForHeat()+0xc2>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1640:	83 e1       	ldi	r24, 0x13	; 19
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	92 bd       	out	0x22, r25	; 34
    1646:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1648:	f8 9a       	sbi	0x1f, 0	; 31
    164a:	00 b5       	in	r16, 0x20	; 32
// If no override is set then DEFAULT_MIN_VALVE_PC_REALLY_OPEN is used.
// NOTE: raising this value temporarily (and shutting down the boiler immediate if possible) is one way to implement dynamic demand.
uint8_t getMinValvePcReallyOpen()
  {
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_MIN_VALVE_PC_REALLY_OPEN);
  if((stored > 0) && (stored <= 100)) { return(stored); }
    164c:	80 2f       	mov	r24, r16
    164e:	81 50       	subi	r24, 0x01	; 1
    1650:	84 36       	cpi	r24, 0x64	; 100
    1652:	08 f0       	brcs	.+2      	; 0x1656 <computeCallForHeat()+0xdc>
    1654:	0a e0       	ldi	r16, 0x0A	; 10
    }
  else // Close to (or at) temp target: set valve partly open to try to tightly regulate.
    {
    // Use currentTempC16 lsbits to set valve percentage for proportional feedback
    // to provide more efficient and quieter TRV drive and probably more stable room temperature.
    uint8_t tmp = (uint8_t) (currentTempC16 & 0xf); // Only interested in lsbits.
    1656:	24 2f       	mov	r18, r20
    1658:	2f 70       	andi	r18, 0x0F	; 15
    const uint8_t ulpStep = 6;
    // Get to nominal range 6 to 96, eg valve nearly shut just below top of 'correct' temperature window.
    const uint8_t targetPORaw = tmp * ulpStep;
#if defined(VALVE_TURN_OFF_LINGER)
    // Constrain from below to likely minimum-open value, in part to deal with TODO-117 'linger open' in lieu of boiler bypass.
    const uint8_t targetPO = fmax(targetPORaw, getMinValvePcReallyOpen());
    165a:	60 e1       	ldi	r22, 0x10	; 16
    165c:	62 1b       	sub	r22, r18
    165e:	26 e0       	ldi	r18, 0x06	; 6
    1660:	62 9f       	mul	r22, r18
    1662:	60 2d       	mov	r22, r0
    1664:	11 24       	eor	r1, r1
    1666:	70 e0       	ldi	r23, 0x00	; 0
    1668:	80 e0       	ldi	r24, 0x00	; 0
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	0e 94 2f 38 	call	0x705e	; 0x705e <__floatunsisf>
    1670:	69 83       	std	Y+1, r22	; 0x01
    1672:	7a 83       	std	Y+2, r23	; 0x02
    1674:	8b 83       	std	Y+3, r24	; 0x03
    1676:	9c 83       	std	Y+4, r25	; 0x04
    1678:	60 2f       	mov	r22, r16
    167a:	70 e0       	ldi	r23, 0x00	; 0
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	0e 94 2f 38 	call	0x705e	; 0x705e <__floatunsisf>
    1684:	9b 01       	movw	r18, r22
    1686:	ac 01       	movw	r20, r24
    1688:	69 81       	ldd	r22, Y+1	; 0x01
    168a:	7a 81       	ldd	r23, Y+2	; 0x02
    168c:	8b 81       	ldd	r24, Y+3	; 0x03
    168e:	9c 81       	ldd	r25, Y+4	; 0x04
    1690:	0e 94 6c 38 	call	0x70d8	; 0x70d8 <fmax>
    1694:	0e 94 03 38 	call	0x7006	; 0x7006 <__fixunssfsi>
    1698:	06 2f       	mov	r16, r22
#else
    // Use as-is.
    const uint8_t targetPO = targetPORaw;
#endif
    // Reduce spurious valve/boiler adjustment by avoiding movement at all unless current error is significant.
    if(targetPO != TRVPercentOpen)
    169a:	80 91 3d 01 	lds	r24, 0x013D
    169e:	08 17       	cp	r16, r24
    16a0:	09 f4       	brne	.+2      	; 0x16a4 <computeCallForHeat()+0x12a>
    16a2:	42 c0       	rjmp	.+132    	; 0x1728 <computeCallForHeat()+0x1ae>
      {
      // Compute the minimum/epsilion slew adjustment allowed.
      // Raise this minimum in dark/quiet/unnoccupied room to minimise disturbance and battery use.
      const bool minimiseSlew = isRoomDark() || isLikelyUnoccupied();
    16a4:	0e 94 25 07 	call	0xe4a	; 0xe4a <isRoomLit()>
    16a8:	88 23       	and	r24, r24
    16aa:	49 f0       	breq	.+18     	; 0x16be <computeCallForHeat()+0x144>
    16ac:	80 91 3b 01 	lds	r24, 0x013B
    16b0:	88 23       	and	r24, r24
    16b2:	29 f0       	breq	.+10     	; 0x16be <computeCallForHeat()+0x144>
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	40 ee       	ldi	r20, 0xE0	; 224
    16ba:	50 e4       	ldi	r21, 0x40	; 64
    16bc:	04 c0       	rjmp	.+8      	; 0x16c6 <computeCallForHeat()+0x14c>
    16be:	20 e0       	ldi	r18, 0x00	; 0
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	40 e6       	ldi	r20, 0x60	; 96
    16c4:	51 e4       	ldi	r21, 0x41	; 65
      const uint8_t minAbsSlew = fmax((1+ulpStep), minimiseSlew ? (2*TRV_MIN_SLEW_PC) : TRV_MIN_SLEW_PC);
    16c6:	60 e0       	ldi	r22, 0x00	; 0
    16c8:	70 e0       	ldi	r23, 0x00	; 0
    16ca:	80 ee       	ldi	r24, 0xE0	; 224
    16cc:	90 e4       	ldi	r25, 0x40	; 64
    16ce:	0e 94 6c 38 	call	0x70d8	; 0x70d8 <fmax>
    16d2:	0e 94 03 38 	call	0x7006	; 0x7006 <__fixunssfsi>
      if(targetPO < TRVPercentOpen) // Currently open more than required.
    16d6:	20 91 3d 01 	lds	r18, 0x013D
    16da:	02 17       	cp	r16, r18
    16dc:	50 f4       	brcc	.+20     	; 0x16f2 <computeCallForHeat()+0x178>
        {
        const uint8_t slew = TRVPercentOpen - targetPO;
    16de:	32 2f       	mov	r19, r18
    16e0:	30 1b       	sub	r19, r16
        if(slew >= minAbsSlew) // Ensure no hunting for 1ulp temperature wobble.
    16e2:	36 17       	cp	r19, r22
    16e4:	08 f1       	brcs	.+66     	; 0x1728 <computeCallForHeat()+0x1ae>
          {
          if(slew > TRV_MAX_SLEW_PC_PER_MIN)
    16e6:	36 30       	cpi	r19, 0x06	; 6
    16e8:	e0 f0       	brcs	.+56     	; 0x1722 <computeCallForHeat()+0x1a8>
              { TRVPercentOpen -= TRV_MAX_SLEW_PC_PER_MIN; } // Cap slew rate.
    16ea:	25 50       	subi	r18, 0x05	; 5
    16ec:	20 93 3d 01 	sts	0x013D, r18
    16f0:	16 c0       	rjmp	.+44     	; 0x171e <computeCallForHeat()+0x1a4>
          changed = true; // TRV setting has been changed.
          }
        }
      else // if(targetPO > TRVPercentOpen) // Currently open less than required.
        {
        const uint8_t slew = targetPO - TRVPercentOpen;
    16f2:	e0 2e       	mov	r14, r16
    16f4:	e2 1a       	sub	r14, r18
        if(slew >= minAbsSlew) // Ensure no hunting for 1ulp temperature wobble.
    16f6:	e6 16       	cp	r14, r22
    16f8:	b8 f0       	brcs	.+46     	; 0x1728 <computeCallForHeat()+0x1ae>
          {
          // Slew open faster in BAKE mode or with comfort bias (unless always glacial).
#if !defined(TRV_SLEW_GLACIAL)
          const uint8_t maxSlew = (inBakeModeDebounced() || !hasEcoBias()) ? TRV_SLEW_PC_PER_MIN_FAST : TRV_MAX_SLEW_PC_PER_MIN;
    16fa:	0e 94 ad 20 	call	0x415a	; 0x415a <inBakeModeDebounced()>
    16fe:	88 23       	and	r24, r24
    1700:	31 f4       	brne	.+12     	; 0x170e <computeCallForHeat()+0x194>
    1702:	0e 94 dd 08 	call	0x11ba	; 0x11ba <hasEcoBias()>
    1706:	88 23       	and	r24, r24
    1708:	11 f0       	breq	.+4      	; 0x170e <computeCallForHeat()+0x194>
    170a:	95 e0       	ldi	r25, 0x05	; 5
    170c:	01 c0       	rjmp	.+2      	; 0x1710 <computeCallForHeat()+0x196>
    170e:	9a e0       	ldi	r25, 0x0A	; 10
#else
          const uint8_t maxSlew = TRV_MAX_SLEW_PC_PER_MIN;
#endif
          if(slew > maxSlew)
    1710:	9e 15       	cp	r25, r14
    1712:	38 f4       	brcc	.+14     	; 0x1722 <computeCallForHeat()+0x1a8>
              { TRVPercentOpen += maxSlew; } // Cap slew rate.
    1714:	80 91 3d 01 	lds	r24, 0x013D
    1718:	89 0f       	add	r24, r25
    171a:	80 93 3d 01 	sts	0x013D, r24
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	04 c0       	rjmp	.+8      	; 0x172a <computeCallForHeat()+0x1b0>
          else
              { TRVPercentOpen = targetPO; } // Adjust directly to target.
    1722:	00 93 3d 01 	sts	0x013D, r16
    1726:	fb cf       	rjmp	.-10     	; 0x171e <computeCallForHeat()+0x1a4>
    1728:	80 e0       	ldi	r24, 0x00	; 0
  // Run down occupation timer if need be.
  if(occupationCountdownM > 0) { --occupationCountdownM; }

  computeTargetTemperature();
  return(computeRequiredTRVPercentOpen());
  }
    172a:	0f 90       	pop	r0
    172c:	0f 90       	pop	r0
    172e:	0f 90       	pop	r0
    1730:	0f 90       	pop	r0
    1732:	cf 91       	pop	r28
    1734:	df 91       	pop	r29
    1736:	0f 91       	pop	r16
    1738:	ef 90       	pop	r14
    173a:	08 95       	ret
#endif    
      // TODO-109: with comfort bias (or at hub because of self-heating temp errors) slew to off relatively slowly.
      if(((!hasEcoBias()) || inHubMode()) && (TRVPercentOpen > lingerThreshold + TRV_SLEW_PC_PER_MIN_VFAST)) { TRVPercentOpen -= TRV_SLEW_PC_PER_MIN_VFAST; }
      // Else (by default) force to (nearly) off immediately when requested, ie eagerly stop heating to conserve energy.
      // In any case percentage open should now be low enough to stop calling for heat immediately.
      else { TRVPercentOpen = lingerThreshold; }
    173c:	89 e0       	ldi	r24, 0x09	; 9
    173e:	ed cf       	rjmp	.-38     	; 0x171a <computeCallForHeat()+0x1a0>

00001740 <eeprom_smart_erase_byte(unsigned char*)>:
// If the target byte is already 0xff then this does nothing at all beyond an initial read.
// This saves a bit of time and power and possibly a little EEPROM cell wear also.
// Without split erase/write this degenerates to a specialised eeprom_update_byte().
// As with the AVR eeprom_XXX_byte() macros, not safe to use outside and within ISRs as-is.
// Returns true iff an erase was performed.
bool eeprom_smart_erase_byte(uint8_t *p)
    1740:	9c 01       	movw	r18, r24
  eeprom_write_byte(p, 0xff); // Set to 0xff.
  return(true); // Performed an erase (and probably a write, too).
#else

  // Wait until EEPROM is idle/ready.
  eeprom_busy_wait();
    1742:	f9 99       	sbic	0x1f, 1	; 31
    1744:	fe cf       	rjmp	.-4      	; 0x1742 <eeprom_smart_erase_byte(unsigned char*)+0x2>
  //     if((uint8_t) 0xff == eeprom_read_byte(p)) { return; }
  // but leaves EEAR[L] set up appropriately for any erase or write.
#if E2END <= 0xFF
  EEARL = (uint8_t)p;
#else
  EEAR = (uint16_t)p;
    1746:	32 bd       	out	0x22, r19	; 34
    1748:	21 bd       	out	0x21, r18	; 33
#endif
  // Ignore problems that some AVRs have with EECR and STS instructions (ATmega64 errata).
  EECR = _BV(EERE); // Start EEPROM read operation.
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	8f bb       	out	0x1f, r24	; 31
  const uint8_t oldValue = EEDR; // Get old EEPROM value.
    174e:	80 b5       	in	r24, 0x20	; 32
  if((uint8_t) 0xff != oldValue) // Needs erase...
    1750:	8f 3f       	cpi	r24, 0xFF	; 255
    1752:	11 f4       	brne	.+4      	; 0x1758 <eeprom_smart_erase_byte(unsigned char*)+0x18>
    1754:	80 e0       	ldi	r24, 0x00	; 0
    1756:	08 95       	ret
    {
    ATOMIC_BLOCK (ATOMIC_RESTORESTATE) // Avoid timing problems from interrupts.
    1758:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    175a:	f8 94       	cli
      {
      // Erase to 0xff; no write needed.
      EECR = _BV(EEMPE) | _BV(EEPM0); // Set master write-enable bit and erase-only mode.
    175c:	84 e1       	ldi	r24, 0x14	; 20
    175e:	8f bb       	out	0x1f, r24	; 31
      EECR |= _BV(EEPE);  // Start erase-only operation.
    1760:	f9 9a       	sbi	0x1f, 1	; 31
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1762:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    1764:	81 e0       	ldi	r24, 0x01	; 1
      }
    return(true); // Performed the erase.
    }
  return(false);
#endif
  }
    1766:	08 95       	ret

00001768 <eeprom_smart_clear_bits(unsigned char*, unsigned char)>:
// If ANDing in the mask has no effect then this does nothing at all beyond an initial read.
// This saves a bit of time and power and possibly a little EEPROM cell wear also.
// Without split erase/write this degenerates to a specialised eeprom_smart_update_byte().
// As with the AVR eeprom_XXX_byte() macros, not safe to use outside and within ISRs as-is.
// Returns true iff a write was performed.
bool eeprom_smart_clear_bits(uint8_t *p, uint8_t mask)
    1768:	9c 01       	movw	r18, r24
  eeprom_write_byte(p, newValue); // Set to masked value.
  return(true); // Performed a write (and probably an erase, too).
#else

  // Wait until EEPROM is idle/ready.
  eeprom_busy_wait();
    176a:	f9 99       	sbic	0x1f, 1	; 31
    176c:	fe cf       	rjmp	.-4      	; 0x176a <eeprom_smart_clear_bits(unsigned char*, unsigned char)+0x2>
  //     oldValue = eeprom_read_byte(p);
  // and leaves EEAR[L] set up appropriately for any erase or write.
#if E2END <= 0xFF
  EEARL = (uint8_t)p;
#else
  EEAR = (uint16_t)p;
    176e:	32 bd       	out	0x22, r19	; 34
    1770:	21 bd       	out	0x21, r18	; 33
#endif
  // Ignore problems that some AVRs have with EECR and STS instructions (ATmega64 errata).
  EECR = _BV(EERE); // Start EEPROM read operation.
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	8f bb       	out	0x1f, r24	; 31
  const uint8_t oldValue = EEDR; // Get old EEPROM value.
    1776:	80 b5       	in	r24, 0x20	; 32
  const uint8_t newValue = oldValue & mask;
    1778:	68 23       	and	r22, r24
  if(oldValue != newValue) // Write is needed...
    177a:	86 17       	cp	r24, r22
    177c:	11 f4       	brne	.+4      	; 0x1782 <eeprom_smart_clear_bits(unsigned char*, unsigned char)+0x1a>
    177e:	80 e0       	ldi	r24, 0x00	; 0
    1780:	08 95       	ret
    {
    // Do the write: no erase is needed.
    EEDR = newValue; // Set EEPROM data register to required new value.
    1782:	60 bd       	out	0x20, r22	; 32
    ATOMIC_BLOCK (ATOMIC_RESTORESTATE) // Avoid timing problems from interrupts.
    1784:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1786:	f8 94       	cli
      {
      EECR = _BV(EEMPE) | _BV(EEPM1); // Set master write-enable bit and write-only mode.
    1788:	84 e2       	ldi	r24, 0x24	; 36
    178a:	8f bb       	out	0x1f, r24	; 31
      EECR |= _BV(EEPE);  // Start write-only operation.
    178c:	f9 9a       	sbi	0x1f, 1	; 31
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    178e:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    1790:	81 e0       	ldi	r24, 0x01	; 1
      }
    return(true); // Performed the write.
    }
  return(false);
#endif
  }
    1792:	08 95       	ret

00001794 <eeprom_smart_update_byte(unsigned char*, unsigned char)>:
// Updates an EEEPROM byte iff not currently at the specified target value.
// May be able to selectively erase or write (ie reduce wear) to reach the desired value.
// As with the AVR eeprom_XXX_byte() macros, not safe to use outside and within ISRs as-is.
// Returns true iff an erase and/or write was performed.
// TODO: make smarter, eg don't wait/read twice...
bool eeprom_smart_update_byte(uint8_t *p, uint8_t value)
    1794:	78 2f       	mov	r23, r24
    1796:	e9 2f       	mov	r30, r25
  {
  // If target byte is 0xff then attempt smart erase rather than more generic write or erase+write.
  if((uint8_t) 0xff == value) { return(eeprom_smart_erase_byte(p)); }
    1798:	6f 3f       	cpi	r22, 0xFF	; 255
    179a:	19 f4       	brne	.+6      	; 0x17a2 <eeprom_smart_update_byte(unsigned char*, unsigned char)+0xe>
    179c:	0e 94 a0 0b 	call	0x1740	; 0x1740 <eeprom_smart_erase_byte(unsigned char*)>
    17a0:	08 95       	ret
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    17a2:	f9 99       	sbic	0x1f, 1	; 31
    17a4:	fe cf       	rjmp	.-4      	; 0x17a2 <eeprom_smart_update_byte(unsigned char*, unsigned char)+0xe>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    17a6:	47 2f       	mov	r20, r23
    17a8:	5e 2f       	mov	r21, r30
    17aa:	52 bd       	out	0x22, r21	; 34
    17ac:	41 bd       	out	0x21, r20	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    17ae:	f8 9a       	sbi	0x1f, 0	; 31
    17b0:	80 b5       	in	r24, 0x20	; 32
  // More than an erase might be required...
  const uint8_t oldValue = eeprom_read_byte(p);
  if(value == oldValue) { return(false); } // No change needed.
    17b2:	68 17       	cp	r22, r24
    17b4:	11 f4       	brne	.+4      	; 0x17ba <eeprom_smart_update_byte(unsigned char*, unsigned char)+0x26>
    17b6:	80 e0       	ldi	r24, 0x00	; 0
    17b8:	08 95       	ret
#ifdef EEPROM_SPLIT_ERASE_WRITE // Can do selective write.
  if(value == (value & oldValue)) { return(eeprom_smart_clear_bits(p, value)); } // Can use pure write to clear bits to zero.
    17ba:	26 2f       	mov	r18, r22
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	82 23       	and	r24, r18
    17c2:	93 23       	and	r25, r19
    17c4:	28 17       	cp	r18, r24
    17c6:	39 07       	cpc	r19, r25
    17c8:	29 f4       	brne	.+10     	; 0x17d4 <eeprom_smart_update_byte(unsigned char*, unsigned char)+0x40>
    17ca:	87 2f       	mov	r24, r23
    17cc:	9e 2f       	mov	r25, r30
    17ce:	0e 94 b4 0b 	call	0x1768	; 0x1768 <eeprom_smart_clear_bits(unsigned char*, unsigned char)>
    17d2:	08 95       	ret
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    17d4:	f9 99       	sbic	0x1f, 1	; 31
    17d6:	fe cf       	rjmp	.-4      	; 0x17d4 <eeprom_smart_update_byte(unsigned char*, unsigned char)+0x40>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    17d8:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    17da:	52 bd       	out	0x22, r21	; 34
    17dc:	41 bd       	out	0x21, r20	; 33
#endif
    EEDR = __value;
    17de:	60 bd       	out	0x20, r22	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    17e0:	0f b6       	in	r0, 0x3f	; 63
    17e2:	f8 94       	cli
    17e4:	fa 9a       	sbi	0x1f, 2	; 31
    17e6:	f9 9a       	sbi	0x1f, 1	; 31
    17e8:	0f be       	out	0x3f, r0	; 63
    17ea:	81 e0       	ldi	r24, 0x01	; 1
#endif
  eeprom_write_byte(p, value); // Needs to set some (but not all) bits to 1, so needs erase and write.
  return(true); // Performed an update.
  }
    17ec:	08 95       	ret

000017ee <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>:
// bptr must be pointing at the current byte to update on entry which must start off as 0xff;
// this will write the byte and increment bptr (and write 0xff to the new location) if one is filled up.
// Partial byte can only have even number of bits present, ie be in one of 4 states.
// Two least significant bits used to indicate how many bit pairs are still to be filled,
// so initial 0xff value (which is never a valid complete filled byte) indicates 'empty'.
static uint8_t *_FHT8VCreate200usAppendEncBit(uint8_t *bptr, const bool is1)
    17ee:	fc 01       	movw	r30, r24
  {
  const uint8_t bitPairsLeft = (*bptr) & 3; // Find out how many bit pairs are left to fill in the current byte.
    17f0:	80 81       	ld	r24, Z
    17f2:	98 2f       	mov	r25, r24
    17f4:	93 70       	andi	r25, 0x03	; 3
  if(!is1) // Appending 1100.
    17f6:	66 23       	and	r22, r22
    17f8:	b1 f4       	brne	.+44     	; 0x1826 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x38>
    {
    switch(bitPairsLeft)
    17fa:	92 30       	cpi	r25, 0x02	; 2
    17fc:	51 f0       	breq	.+20     	; 0x1812 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x24>
    17fe:	93 30       	cpi	r25, 0x03	; 3
    1800:	31 f0       	breq	.+12     	; 0x180e <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x20>
    1802:	9f 01       	movw	r18, r30
    1804:	2f 5f       	subi	r18, 0xFF	; 255
    1806:	3f 4f       	sbci	r19, 0xFF	; 255
    1808:	91 30       	cpi	r25, 0x01	; 1
    180a:	59 f4       	brne	.+22     	; 0x1822 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x34>
    180c:	05 c0       	rjmp	.+10     	; 0x1818 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x2a>
      {
      case 3: // Empty target byte (should be 0xff currently).
        *bptr = 0xcd; // %11001101 Write back partial byte (msbits now 1100 and two bit pairs remain free).
    180e:	8d ec       	ldi	r24, 0xCD	; 205
    1810:	25 c0       	rjmp	.+74     	; 0x185c <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      case 2: // Top bit pair already filled.
        *bptr = (*bptr & 0xc0) | 0x30; // Preserve existing ms bit-pair, set middle four bits 1100, one bit pair remains free.
    1812:	80 7c       	andi	r24, 0xC0	; 192
    1814:	80 63       	ori	r24, 0x30	; 48
    1816:	22 c0       	rjmp	.+68     	; 0x185c <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      case 1: // Top two bit pairs already filled.
        *bptr = (*bptr & 0xf0) | 0xc; // Preserve existing ms (2) bit-pairs, set bottom four bits 1100, write back full byte.
    1818:	80 7f       	andi	r24, 0xF0	; 240
    181a:	8c 60       	ori	r24, 0x0C	; 12
    181c:	80 83       	st	Z, r24
        *++bptr = (uint8_t) ~0U; // Initialise next byte for next incremental update.
    181e:	f9 01       	movw	r30, r18
    1820:	11 c0       	rjmp	.+34     	; 0x1844 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x56>
        break;
      default: // Top three bit pairs already filled.
        *bptr |= 3; // Preserve existing ms (3) bit-pairs, OR in leading 11 bits, write back full byte.
    1822:	83 60       	ori	r24, 0x03	; 3
    1824:	13 c0       	rjmp	.+38     	; 0x184c <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x5e>
        break;
      }
    }
  else // Appending 111000.
    {
    switch(bitPairsLeft)
    1826:	92 30       	cpi	r25, 0x02	; 2
    1828:	51 f0       	breq	.+20     	; 0x183e <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x50>
    182a:	93 30       	cpi	r25, 0x03	; 3
    182c:	31 f0       	breq	.+12     	; 0x183a <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x4c>
    182e:	9f 01       	movw	r18, r30
    1830:	2f 5f       	subi	r18, 0xFF	; 255
    1832:	3f 4f       	sbci	r19, 0xFF	; 255
    1834:	91 30       	cpi	r25, 0x01	; 1
    1836:	71 f4       	brne	.+28     	; 0x1854 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x66>
    1838:	07 c0       	rjmp	.+14     	; 0x1848 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x5a>
      {
      case 3: // Empty target byte (should be 0xff currently).
        *bptr = 0xe0; // %11100000 Write back partial byte (msbits now 111000 and one bit pair remains free).
    183a:	80 ee       	ldi	r24, 0xE0	; 224
    183c:	0f c0       	rjmp	.+30     	; 0x185c <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      case 2: // Top bit pair already filled.
        *bptr = (*bptr & 0xc0) | 0x38; // Preserve existing ms bit-pair, set lsbits to 111000, write back full byte.
    183e:	80 7c       	andi	r24, 0xC0	; 192
    1840:	88 63       	ori	r24, 0x38	; 56
    1842:	81 93       	st	Z+, r24
        *++bptr = (uint8_t) ~0U; // Initialise next byte for next incremental update.
    1844:	8f ef       	ldi	r24, 0xFF	; 255
    1846:	0a c0       	rjmp	.+20     	; 0x185c <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      case 1: // Top two bit pairs already filled.
        *bptr = (*bptr & 0xf0) | 0xe; // Preserve existing (2) ms bit-pairs, set bottom four bits to 1110, write back full byte.
    1848:	80 7f       	andi	r24, 0xF0	; 240
    184a:	8e 60       	ori	r24, 0x0E	; 14
    184c:	80 83       	st	Z, r24
        *++bptr = 0x3e; // %00111110 Write trailing 00 bits to next byte and indicate 3 bit-pairs free for next incremental update.
    184e:	f9 01       	movw	r30, r18
    1850:	8e e3       	ldi	r24, 0x3E	; 62
    1852:	04 c0       	rjmp	.+8      	; 0x185c <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      default: // Top three bit pairs already filled.
        *bptr |= 3; // Preserve existing ms (3) bit-pairs, OR in leading 11 bits, write back full byte.
    1854:	83 60       	ori	r24, 0x03	; 3
    1856:	80 83       	st	Z, r24
        *++bptr = 0x8d; // Write trailing 1000 bits to next byte and indicate 2 bit-pairs free for next incremental update.
    1858:	f9 01       	movw	r30, r18
    185a:	8d e8       	ldi	r24, 0x8D	; 141
    185c:	80 83       	st	Z, r24
        break;
      }
    }
  return(bptr);
  }
    185e:	cf 01       	movw	r24, r30
    1860:	08 95       	ret

00001862 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>:

// Appends encoded byte in b msbit first plus trailing even parity bit (9 bits total)
// to the byte stream being created by FHT8VCreate200usBitStreamBptr.
static uint8_t *_FHT8VCreate200usAppendByteEP(uint8_t *bptr, const uint8_t b)
    1862:	ef 92       	push	r14
    1864:	ff 92       	push	r15
    1866:	0f 93       	push	r16
    1868:	1f 93       	push	r17
    186a:	cf 93       	push	r28
    186c:	df 93       	push	r29
    186e:	9c 01       	movw	r18, r24
    1870:	16 2f       	mov	r17, r22
    1872:	00 e8       	ldi	r16, 0x80	; 128
    1874:	c0 e0       	ldi	r28, 0x00	; 0
    1876:	d0 e0       	ldi	r29, 0x00	; 0
  {
  for(uint8_t mask = 0x80; mask != 0; mask >>= 1)
    { bptr = _FHT8VCreate200usAppendEncBit(bptr, 0 != (b & mask)); }
    1878:	e6 2e       	mov	r14, r22
    187a:	ff 24       	eor	r15, r15
    187c:	60 e0       	ldi	r22, 0x00	; 0
    187e:	80 2f       	mov	r24, r16
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	8e 21       	and	r24, r14
    1884:	9f 21       	and	r25, r15
    1886:	89 2b       	or	r24, r25
    1888:	09 f0       	breq	.+2      	; 0x188c <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)+0x2a>
    188a:	61 e0       	ldi	r22, 0x01	; 1
    188c:	c9 01       	movw	r24, r18
    188e:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
    1892:	9c 01       	movw	r18, r24

// Appends encoded byte in b msbit first plus trailing even parity bit (9 bits total)
// to the byte stream being created by FHT8VCreate200usBitStreamBptr.
static uint8_t *_FHT8VCreate200usAppendByteEP(uint8_t *bptr, const uint8_t b)
  {
  for(uint8_t mask = 0x80; mask != 0; mask >>= 1)
    1894:	06 95       	lsr	r16
    1896:	21 96       	adiw	r28, 0x01	; 1
    1898:	c8 30       	cpi	r28, 0x08	; 8
    189a:	d1 05       	cpc	r29, r1
    189c:	79 f7       	brne	.-34     	; 0x187c <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)+0x1a>
    { bptr = _FHT8VCreate200usAppendEncBit(bptr, 0 != (b & mask)); }
  return(_FHT8VCreate200usAppendEncBit(bptr, (bool) parity_even_bit(b))); // Append even parity bit.
    189e:	01 2e       	mov	r0, r17
    18a0:	12 95       	swap	r17
    18a2:	10 25       	eor	r17, r0
    18a4:	01 2e       	mov	r0, r17
    18a6:	16 95       	lsr	r17
    18a8:	16 95       	lsr	r17
    18aa:	10 25       	eor	r17, r0
    18ac:	61 2f       	mov	r22, r17
    18ae:	70 e0       	ldi	r23, 0x00	; 0
    18b0:	6f 5f       	subi	r22, 0xFF	; 255
    18b2:	7f 4f       	sbci	r23, 0xFF	; 255
    18b4:	76 95       	lsr	r23
    18b6:	67 95       	ror	r22
    18b8:	61 70       	andi	r22, 0x01	; 1
    18ba:	c9 01       	movw	r24, r18
    18bc:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
  }
    18c0:	df 91       	pop	r29
    18c2:	cf 91       	pop	r28
    18c4:	1f 91       	pop	r17
    18c6:	0f 91       	pop	r16
    18c8:	ff 90       	pop	r15
    18ca:	ef 90       	pop	r14
    18cc:	08 95       	ret

000018ce <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>:
// On entry the populated FHT8V command struct is passed by pointer.
// On exit, the memory block starting at buffer contains the low-byte, msbit-first bit, 0xff-terminated TX sequence.
// The maximum and minimum possible encoded message sizes are 35 (all zero bytes) and 45 (all 0xff bytes) bytes long.
// Note that a buffer space of at least 46 bytes is needed to accommodate the longest-possible encoded message and terminator.
// Returns pointer to the terminating 0xff on exit.
uint8_t *FHT8VCreate200usBitStreamBptr(uint8_t *bptr, const fht8v_msg_t *command)
    18ce:	ff 92       	push	r15
    18d0:	0f 93       	push	r16
    18d2:	1f 93       	push	r17
    18d4:	dc 01       	movw	r26, r24
    18d6:	8b 01       	movw	r16, r22
  {
  // Generate FHT8V preamble.
  // First 12 x 0 bits of preamble, pre-encoded as 6 x 0xcc bytes.
  *bptr++ = 0xcc;
    18d8:	8c ec       	ldi	r24, 0xCC	; 204
    18da:	fd 01       	movw	r30, r26
    18dc:	81 93       	st	Z+, r24
  *bptr++ = 0xcc;
    18de:	11 96       	adiw	r26, 0x01	; 1
    18e0:	8c 93       	st	X, r24
    18e2:	df 01       	movw	r26, r30
    18e4:	11 96       	adiw	r26, 0x01	; 1
  *bptr++ = 0xcc;
    18e6:	81 83       	std	Z+1, r24	; 0x01
    18e8:	fd 01       	movw	r30, r26
    18ea:	31 96       	adiw	r30, 0x01	; 1
  *bptr++ = 0xcc;
    18ec:	11 96       	adiw	r26, 0x01	; 1
    18ee:	8c 93       	st	X, r24
    18f0:	df 01       	movw	r26, r30
    18f2:	11 96       	adiw	r26, 0x01	; 1
  *bptr++ = 0xcc;
    18f4:	81 83       	std	Z+1, r24	; 0x01
    18f6:	fd 01       	movw	r30, r26
    18f8:	31 96       	adiw	r30, 0x01	; 1
  *bptr++ = 0xcc;
    18fa:	11 96       	adiw	r26, 0x01	; 1
    18fc:	8c 93       	st	X, r24
  *bptr = (uint8_t) ~0U; // Initialise for _FHT8VCreate200usAppendEncBit routine.
    18fe:	ff 24       	eor	r15, r15
    1900:	fa 94       	dec	r15
    1902:	f1 82       	std	Z+1, r15	; 0x01
  // Push remaining 1 of preamble.
  bptr = _FHT8VCreate200usAppendEncBit(bptr, true); // Encode 1.
    1904:	cf 01       	movw	r24, r30
    1906:	01 96       	adiw	r24, 0x01	; 1
    1908:	61 e0       	ldi	r22, 0x01	; 1
    190a:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>

  // Generate body.
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->hc1);
    190e:	f8 01       	movw	r30, r16
    1910:	60 81       	ld	r22, Z
    1912:	0e 94 31 0c 	call	0x1862	; 0x1862 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->hc2);
    1916:	f8 01       	movw	r30, r16
    1918:	61 81       	ldd	r22, Z+1	; 0x01
    191a:	0e 94 31 0c 	call	0x1862	; 0x1862 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
#ifdef FHT8V_ADR_USED
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->address);
#else
  bptr = _FHT8VCreate200usAppendByteEP(bptr, 0); // Default/broadcast.  TODO: could possibly be further optimised to send 0 value more efficiently.
    191e:	60 e0       	ldi	r22, 0x00	; 0
    1920:	0e 94 31 0c 	call	0x1862	; 0x1862 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
#endif
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->command);
    1924:	f8 01       	movw	r30, r16
    1926:	62 81       	ldd	r22, Z+2	; 0x02
    1928:	0e 94 31 0c 	call	0x1862	; 0x1862 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->extension);
    192c:	f8 01       	movw	r30, r16
    192e:	63 81       	ldd	r22, Z+3	; 0x03
    1930:	0e 94 31 0c 	call	0x1862	; 0x1862 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
#ifdef FHT8V_ADR_USED
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + command->address + command->command + command->extension;
#else
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + command->command + command->extension;
#endif
  bptr = _FHT8VCreate200usAppendByteEP(bptr, checksum);
    1934:	f8 01       	movw	r30, r16
    1936:	60 81       	ld	r22, Z
    1938:	21 81       	ldd	r18, Z+1	; 0x01
    193a:	62 0f       	add	r22, r18
    193c:	64 5f       	subi	r22, 0xF4	; 244
    193e:	22 81       	ldd	r18, Z+2	; 0x02
    1940:	62 0f       	add	r22, r18
    1942:	23 81       	ldd	r18, Z+3	; 0x03
    1944:	62 0f       	add	r22, r18
    1946:	0e 94 31 0c 	call	0x1862	; 0x1862 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>

  // Generate trailer.
  // Append 0 bit for trailer.
  bptr = _FHT8VCreate200usAppendEncBit(bptr, false);
    194a:	60 e0       	ldi	r22, 0x00	; 0
    194c:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
  // Append extra 0 bits to ensure that final required bits are flushed out.
  bptr = _FHT8VCreate200usAppendEncBit(bptr, false);
    1950:	60 e0       	ldi	r22, 0x00	; 0
    1952:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
  bptr = _FHT8VCreate200usAppendEncBit(bptr, false);
    1956:	60 e0       	ldi	r22, 0x00	; 0
    1958:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
    195c:	fc 01       	movw	r30, r24
  *bptr = (uint8_t)0xff; // Terminate TX bytes.
    195e:	f0 82       	st	Z, r15
  return(bptr);
  }
    1960:	1f 91       	pop	r17
    1962:	0f 91       	pop	r16
    1964:	ff 90       	pop	r15
    1966:	08 95       	ret

00001968 <FHT8VGetHC1()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1968:	f9 99       	sbic	0x1f, 1	; 31
    196a:	fe cf       	rjmp	.-4      	; 0x1968 <FHT8VGetHC1()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    196c:	80 e1       	ldi	r24, 0x10	; 16
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	92 bd       	out	0x22, r25	; 34
    1972:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1974:	f8 9a       	sbi	0x1f, 0	; 31
    1976:	80 b5       	in	r24, 0x20	; 32
// Set (non-volatile) HC1 and HC2 for single/primary FHT8V wireless valve under control.
void FHT8VSetHC1(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC1, hc); }
void FHT8VSetHC2(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC2, hc); }

// Get (non-volatile) HC1 and HC2 for single/primary FHT8V wireless valve under control (will be 0xff until set).
uint8_t FHT8VGetHC1() { return(eeprom_read_byte((uint8_t*)EE_START_FHT8V_HC1)); }
    1978:	08 95       	ret

0000197a <FHT8VGetHC2()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    197a:	f9 99       	sbic	0x1f, 1	; 31
    197c:	fe cf       	rjmp	.-4      	; 0x197a <FHT8VGetHC2()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    197e:	81 e1       	ldi	r24, 0x11	; 17
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	92 bd       	out	0x22, r25	; 34
    1984:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1986:	f8 9a       	sbi	0x1f, 0	; 31
    1988:	80 b5       	in	r24, 0x20	; 32
uint8_t FHT8VGetHC2() { return(eeprom_read_byte((uint8_t*)EE_START_FHT8V_HC2)); }
    198a:	08 95       	ret

0000198c <localFHT8VTRVEnabled()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    198c:	f9 99       	sbic	0x1f, 1	; 31
    198e:	fe cf       	rjmp	.-4      	; 0x198c <localFHT8VTRVEnabled()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1990:	80 e1       	ldi	r24, 0x10	; 16
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	92 bd       	out	0x22, r25	; 34
    1996:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1998:	f8 9a       	sbi	0x1f, 0	; 31
    199a:	80 b5       	in	r24, 0x20	; 32

#ifndef localFHT8VTRVEnabled
// Returns TRV if valve/radiator is to be controlled by this unit.
// Usually the case, but may not be for (a) a hub or (b) a not-yet-configured unit.
// Returns false if house code parts are set to invalid or uninitialised values (>99).
bool localFHT8VTRVEnabled() { return(((FHT8VGetHC1() <= 99) && (FHT8VGetHC2() <= 99))); }
    199c:	84 36       	cpi	r24, 0x64	; 100
    199e:	10 f0       	brcs	.+4      	; 0x19a4 <localFHT8VTRVEnabled()+0x18>
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	0c c0       	rjmp	.+24     	; 0x19bc <localFHT8VTRVEnabled()+0x30>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    19a4:	f9 99       	sbic	0x1f, 1	; 31
    19a6:	fe cf       	rjmp	.-4      	; 0x19a4 <localFHT8VTRVEnabled()+0x18>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    19a8:	81 e1       	ldi	r24, 0x11	; 17
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	92 bd       	out	0x22, r25	; 34
    19ae:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    19b0:	f8 9a       	sbi	0x1f, 0	; 31
    19b2:	80 b5       	in	r24, 0x20	; 32
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	84 36       	cpi	r24, 0x64	; 100
    19b8:	08 f4       	brcc	.+2      	; 0x19bc <localFHT8VTRVEnabled()+0x30>
    19ba:	91 e0       	ldi	r25, 0x01	; 1
    19bc:	89 2f       	mov	r24, r25
    19be:	08 95       	ret

000019c0 <isSyncedWithFHT8V()>:
  }

// True once/while this node is synced with and controlling the target FHT8V valve; initially false.
static bool syncedWithFHT8V;
#ifndef IGNORE_FHT_SYNC
bool isSyncedWithFHT8V() { return(syncedWithFHT8V); }
    19c0:	80 91 7f 01 	lds	r24, 0x017F
    19c4:	08 95       	ret

000019c6 <isControlledValveOpen()>:
#endif


// True if FHT8V valve is believed to be open under instruction from this system; false if not in sync.
static bool FHT8V_isValveOpen;
bool getFHT8V_isValveOpen() { return(syncedWithFHT8V && FHT8V_isValveOpen); }
    19c6:	80 91 7f 01 	lds	r24, 0x017F
    19ca:	88 23       	and	r24, r24
    19cc:	21 f0       	breq	.+8      	; 0x19d6 <isControlledValveOpen()+0x10>
    19ce:	80 91 be 01 	lds	r24, 0x01BE
    19d2:	81 11       	cpse	r24, r1
    19d4:	81 e0       	ldi	r24, 0x01	; 1
// GLOBAL NOTION OF CONTROLLED VALVE STATE PROVIDED HERE
// True iff the valve(s) (if any) controlled by this unit are really open.
// This waits until, for example, an ACK where appropriate, or at least the command has been sent.
// This also implies open to DEFAULT_MIN_VALVE_PC_REALLY_OPEN or equivalent.
// Must be exectly one definition supplied at link time.
bool isControlledValveOpen() { return(getFHT8V_isValveOpen()); }
    19d6:	08 95       	ret

000019d8 <FHT8VSyncAndTXReset()>:
//   FHT8V_isValveOpen (bit, true if this node has last sent command to open valve)
//   syncStateFHT8V (byte, internal)
//   halfSecondsToNextFHT8VTX (byte).
void FHT8VSyncAndTXReset()
  {
  syncedWithFHT8V = false;
    19d8:	10 92 7f 01 	sts	0x017F, r1
  syncStateFHT8V = 0;
    19dc:	10 92 81 01 	sts	0x0181, r1
  halfSecondsToNextFHT8VTX = 0;
    19e0:	10 92 80 01 	sts	0x0180, r1
  FHT8V_isValveOpen = false;
    19e4:	10 92 be 01 	sts	0x01BE, r1
  }
    19e8:	08 95       	ret

000019ea <FHT8VCallForHeatHeardGetAndClear()>:
  }

// Atomically returns and clears one housecode calling for heat heard since last call, or ~0 if none.
uint16_t FHT8VCallForHeatHeardGetAndClear()
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    19ea:	4f b7       	in	r20, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    19ec:	f8 94       	cli
    {
    const uint16_t result = lastCallForHeatHC;
    19ee:	20 91 02 01 	lds	r18, 0x0102
    19f2:	30 91 03 01 	lds	r19, 0x0103
    lastCallForHeatHC = ~0;
    19f6:	8f ef       	ldi	r24, 0xFF	; 255
    19f8:	9f ef       	ldi	r25, 0xFF	; 255
    19fa:	90 93 03 01 	sts	0x0103, r25
    19fe:	80 93 02 01 	sts	0x0102, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1a02:	4f bf       	out	0x3f, r20	; 63
    return(result);
    }
  }
    1a04:	c9 01       	movw	r24, r18
    1a06:	08 95       	ret

00001a08 <FHT8VLastRXErrGetAndClear()>:

// Atomically returns and clears last (FHT8V) RX error code, or 0 if none.
uint8_t FHT8VLastRXErrGetAndClear()
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    1a08:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1a0a:	f8 94       	cli
    {
    const uint8_t result = lastRXerrno;
    1a0c:	80 91 40 01 	lds	r24, 0x0140
    lastRXerrno = 0;
    1a10:	10 92 40 01 	sts	0x0140, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1a14:	9f bf       	out	0x3f, r25	; 63
    return(result);
    }
  }
    1a16:	08 95       	ret

00001a18 <StopEavesdropOnFHT8V(bool)>:
// Stop listening out for remote TRVs calling for heat iff currently eavesdropping, else does nothing.
// Puts radio in standby mode.
// DOES NOT clear flags which indicate that a call for heat has been heard.
void StopEavesdropOnFHT8V(bool force)
  {
  if(!force && !eavesdropping) { return; }
    1a18:	88 23       	and	r24, r24
    1a1a:	21 f4       	brne	.+8      	; 0x1a24 <StopEavesdropOnFHT8V(bool)+0xc>
    1a1c:	80 91 41 01 	lds	r24, 0x0141
    1a20:	88 23       	and	r24, r24
    1a22:	21 f0       	breq	.+8      	; 0x1a2c <StopEavesdropOnFHT8V(bool)+0x14>
  eavesdropping = false;
    1a24:	10 92 41 01 	sts	0x0141, r1
  RFM22ModeStandbyAndClearState();
    1a28:	0e 94 bf 1b 	call	0x377e	; 0x377e <RFM22ModeStandbyAndClearState()>
    1a2c:	08 95       	ret

00001a2e <_SetupRFM22ToEavesdropOnFHT8V()>:
static void setLastRXErr(const uint8_t err) { ATOMIC_BLOCK (ATOMIC_RESTORESTATE) { lastRXerrno = err; } }


static void _SetupRFM22ToEavesdropOnFHT8V()
  {
  RFM22ModeStandbyAndClearState();
    1a2e:	0e 94 bf 1b 	call	0x377e	; 0x377e <RFM22ModeStandbyAndClearState()>
  RFM22SetUpRX(MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE, true, true); // Set to RX longest-possible valid FS20 encoded frame.
    1a32:	8e e2       	ldi	r24, 0x2E	; 46
    1a34:	61 e0       	ldi	r22, 0x01	; 1
    1a36:	41 e0       	ldi	r20, 0x01	; 1
    1a38:	0e 94 9d 1a 	call	0x353a	; 0x353a <RFM22SetUpRX(unsigned char, bool, bool)>
#error Board revision not defined.
#endif
#if V0p2_REV > 0
// TODO: hook into interrupts?
#endif
  }
    1a3c:	08 95       	ret

00001a3e <SetupToEavesdropOnFHT8V(bool)>:
// Only done if in central hub mode.
// May set up interrupts/handlers.
// Does NOT clear flags indicating receipt of call for heat for example.
void SetupToEavesdropOnFHT8V(bool force)
  {
  if(!force && eavesdropping) { return; } // Already eavesdropping.
    1a3e:	88 23       	and	r24, r24
    1a40:	21 f4       	brne	.+8      	; 0x1a4a <SetupToEavesdropOnFHT8V(bool)+0xc>
    1a42:	80 91 41 01 	lds	r24, 0x0141
    1a46:	88 23       	and	r24, r24
    1a48:	29 f4       	brne	.+10     	; 0x1a54 <SetupToEavesdropOnFHT8V(bool)+0x16>
  eavesdropping = true;
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	80 93 41 01 	sts	0x0141, r24
  _SetupRFM22ToEavesdropOnFHT8V();
    1a50:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_SetupRFM22ToEavesdropOnFHT8V()>
    1a54:	08 95       	ret

00001a56 <readOneBit(decode_state_t*)>:
  } decode_state_t;

// Decode bit pattern 1100 as 0, 111000 as 1.
// Returns 1 or 0 for the bit decoded, else marks the state as failed.
// Reads two bits at a time, MSB to LSB, advancing the byte pointer if necessary.
static uint8_t readOneBit(decode_state_t *const state)
    1a56:	cf 93       	push	r28
    1a58:	df 93       	push	r29
    1a5a:	ec 01       	movw	r28, r24
  {
  if(state->bitStream > state->lastByte) { state->failed = true; } // Stop if off the buffer end.
    1a5c:	28 81       	ld	r18, Y
    1a5e:	39 81       	ldd	r19, Y+1	; 0x01
    1a60:	8a 81       	ldd	r24, Y+2	; 0x02
    1a62:	9b 81       	ldd	r25, Y+3	; 0x03
    1a64:	82 17       	cp	r24, r18
    1a66:	93 07       	cpc	r25, r19
    1a68:	10 f4       	brcc	.+4      	; 0x1a6e <readOneBit(decode_state_t*)+0x18>
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	8d 83       	std	Y+5, r24	; 0x05
  if(state->failed) { return(0); } // Refuse to do anything further once decoding has failed.
    1a6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a70:	88 23       	and	r24, r24
    1a72:	09 f0       	breq	.+2      	; 0x1a76 <readOneBit(decode_state_t*)+0x20>
    1a74:	7e c0       	rjmp	.+252    	; 0x1b72 <readOneBit(decode_state_t*)+0x11c>

  if(0 == state->mask) { state->mask = 0xc0; } // Special treatment of 0 as equivalent to 0xc0 on entry.
    1a76:	8c 81       	ldd	r24, Y+4	; 0x04
    1a78:	88 23       	and	r24, r24
    1a7a:	11 f4       	brne	.+4      	; 0x1a80 <readOneBit(decode_state_t*)+0x2a>
    1a7c:	80 ec       	ldi	r24, 0xC0	; 192
    1a7e:	8c 83       	std	Y+4, r24	; 0x04
#if defined(DEBUG)
  if((state->mask != 0xc0) && (state->mask != 0x30) && (state->mask != 0xc) && (state->mask != 3)) { panic(); }
    1a80:	8c 81       	ldd	r24, Y+4	; 0x04
    1a82:	80 3c       	cpi	r24, 0xC0	; 192
    1a84:	41 f0       	breq	.+16     	; 0x1a96 <readOneBit(decode_state_t*)+0x40>
    1a86:	80 33       	cpi	r24, 0x30	; 48
    1a88:	31 f0       	breq	.+12     	; 0x1a96 <readOneBit(decode_state_t*)+0x40>
    1a8a:	8c 30       	cpi	r24, 0x0C	; 12
    1a8c:	21 f0       	breq	.+8      	; 0x1a96 <readOneBit(decode_state_t*)+0x40>
    1a8e:	83 30       	cpi	r24, 0x03	; 3
    1a90:	11 f0       	breq	.+4      	; 0x1a96 <readOneBit(decode_state_t*)+0x40>
    1a92:	0e 94 cd 2c 	call	0x599a	; 0x599a <panic()>
#endif

  // First two bits read must be 11.
  if(state->mask != (state->mask & *(state->bitStream)))
    1a96:	8c 81       	ldd	r24, Y+4	; 0x04
    1a98:	28 2f       	mov	r18, r24
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	e8 81       	ld	r30, Y
    1a9e:	f9 81       	ldd	r31, Y+1	; 0x01
    1aa0:	80 81       	ld	r24, Z
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	82 23       	and	r24, r18
    1aa6:	93 23       	and	r25, r19
    1aa8:	28 17       	cp	r18, r24
    1aaa:	39 07       	cpc	r19, r25
    1aac:	09 f0       	breq	.+2      	; 0x1ab0 <readOneBit(decode_state_t*)+0x5a>
    1aae:	51 c0       	rjmp	.+162    	; 0x1b52 <readOneBit(decode_state_t*)+0xfc>
#endif
    state->failed = true; return(0);
    }

  // Advance the mask; if the mask becomes 0 (then 0xc0 again) then advance the byte pointer.
  if(0 == ((state->mask) >>= 2))
    1ab0:	c9 01       	movw	r24, r18
    1ab2:	95 95       	asr	r25
    1ab4:	87 95       	ror	r24
    1ab6:	95 95       	asr	r25
    1ab8:	87 95       	ror	r24
    1aba:	8c 83       	std	Y+4, r24	; 0x04
    1abc:	88 23       	and	r24, r24
    1abe:	61 f4       	brne	.+24     	; 0x1ad8 <readOneBit(decode_state_t*)+0x82>
    {
    state->mask = 0xc0;
    1ac0:	80 ec       	ldi	r24, 0xC0	; 192
    1ac2:	8c 83       	std	Y+4, r24	; 0x04
    // If end of stream is encountered this is an error since more bits need to be read.
    if(++(state->bitStream) > state->lastByte) { state->failed = true; return(0); }
    1ac4:	9f 01       	movw	r18, r30
    1ac6:	2f 5f       	subi	r18, 0xFF	; 255
    1ac8:	3f 4f       	sbci	r19, 0xFF	; 255
    1aca:	39 83       	std	Y+1, r19	; 0x01
    1acc:	28 83       	st	Y, r18
    1ace:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ad2:	82 17       	cp	r24, r18
    1ad4:	93 07       	cpc	r25, r19
    1ad6:	e8 f1       	brcs	.+122    	; 0x1b52 <readOneBit(decode_state_t*)+0xfc>
    }

  // Next two bits can be 00 to decode a zero,
  // or 10 (followed by 00) to decode a one.
  const uint8_t secondPair = (state->mask & *(state->bitStream));
    1ad8:	8c 81       	ldd	r24, Y+4	; 0x04
  switch(secondPair)
    1ada:	e8 81       	ld	r30, Y
    1adc:	f9 81       	ldd	r31, Y+1	; 0x01
    1ade:	20 81       	ld	r18, Z
    1ae0:	28 23       	and	r18, r24
    1ae2:	28 30       	cpi	r18, 0x08	; 8
    1ae4:	c1 f0       	breq	.+48     	; 0x1b16 <readOneBit(decode_state_t*)+0xc0>
    1ae6:	29 30       	cpi	r18, 0x09	; 9
    1ae8:	28 f4       	brcc	.+10     	; 0x1af4 <readOneBit(decode_state_t*)+0x9e>
    1aea:	22 23       	and	r18, r18
    1aec:	41 f0       	breq	.+16     	; 0x1afe <readOneBit(decode_state_t*)+0xa8>
    1aee:	22 30       	cpi	r18, 0x02	; 2
    1af0:	81 f5       	brne	.+96     	; 0x1b52 <readOneBit(decode_state_t*)+0xfc>
    1af2:	11 c0       	rjmp	.+34     	; 0x1b16 <readOneBit(decode_state_t*)+0xc0>
    1af4:	20 32       	cpi	r18, 0x20	; 32
    1af6:	79 f0       	breq	.+30     	; 0x1b16 <readOneBit(decode_state_t*)+0xc0>
    1af8:	20 38       	cpi	r18, 0x80	; 128
    1afa:	59 f5       	brne	.+86     	; 0x1b52 <readOneBit(decode_state_t*)+0xfc>
    1afc:	0c c0       	rjmp	.+24     	; 0x1b16 <readOneBit(decode_state_t*)+0xc0>
      {
#if 0 && defined(DEBUG)
      DEBUG_SERIAL_PRINTLN_FLASHSTRING("decoded 0");
#endif
      // Advance the mask; if the mask becomes 0 then advance the byte pointer.
      if(0 == ((state->mask) >>= 2)) { ++(state->bitStream); }
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	95 95       	asr	r25
    1b02:	87 95       	ror	r24
    1b04:	95 95       	asr	r25
    1b06:	87 95       	ror	r24
    1b08:	8c 83       	std	Y+4, r24	; 0x04
    1b0a:	88 23       	and	r24, r24
    1b0c:	91 f5       	brne	.+100    	; 0x1b72 <readOneBit(decode_state_t*)+0x11c>
    1b0e:	31 96       	adiw	r30, 0x01	; 1
    1b10:	f9 83       	std	Y+1, r31	; 0x01
    1b12:	e8 83       	st	Y, r30
    1b14:	2f c0       	rjmp	.+94     	; 0x1b74 <readOneBit(decode_state_t*)+0x11e>
      state->failed = true; return(0);
      }
    }

  // Advance the mask; if the mask becomes 0 (then 0xc0 again) then advance the byte pointer.
  if(0 == ((state->mask) >>= 2))
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	95 95       	asr	r25
    1b1a:	87 95       	ror	r24
    1b1c:	95 95       	asr	r25
    1b1e:	87 95       	ror	r24
    1b20:	8c 83       	std	Y+4, r24	; 0x04
    1b22:	88 23       	and	r24, r24
    1b24:	61 f4       	brne	.+24     	; 0x1b3e <readOneBit(decode_state_t*)+0xe8>
    {
    state->mask = 0xc0;
    1b26:	80 ec       	ldi	r24, 0xC0	; 192
    1b28:	8c 83       	std	Y+4, r24	; 0x04
    // If end of stream is encountered this is an error since more bits need to be read.
    if(++(state->bitStream) > state->lastByte) { state->failed = true; return(0); }
    1b2a:	88 81       	ld	r24, Y
    1b2c:	99 81       	ldd	r25, Y+1	; 0x01
    1b2e:	01 96       	adiw	r24, 0x01	; 1
    1b30:	99 83       	std	Y+1, r25	; 0x01
    1b32:	88 83       	st	Y, r24
    1b34:	2a 81       	ldd	r18, Y+2	; 0x02
    1b36:	3b 81       	ldd	r19, Y+3	; 0x03
    1b38:	28 17       	cp	r18, r24
    1b3a:	39 07       	cpc	r19, r25
    1b3c:	50 f0       	brcs	.+20     	; 0x1b52 <readOneBit(decode_state_t*)+0xfc>
    }

  // Third pair of bits must be 00.
  if(0 != (state->mask & *(state->bitStream)))
    1b3e:	2c 81       	ldd	r18, Y+4	; 0x04
    1b40:	e8 81       	ld	r30, Y
    1b42:	f9 81       	ldd	r31, Y+1	; 0x01
    1b44:	80 81       	ld	r24, Z
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	82 23       	and	r24, r18
    1b4c:	93 23       	and	r25, r19
    1b4e:	89 2b       	or	r24, r25
    1b50:	19 f0       	breq	.+6      	; 0x1b58 <readOneBit(decode_state_t*)+0x102>
     {
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("trailing 00 corrupt");
#endif
    state->failed = true; return(0);
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	8d 83       	std	Y+5, r24	; 0x05
    1b56:	0d c0       	rjmp	.+26     	; 0x1b72 <readOneBit(decode_state_t*)+0x11c>
    }    

  // Advance the mask; if the mask becomes 0 then advance the byte pointer.
  if(0 == ((state->mask) >>= 2)) { ++(state->bitStream); }
    1b58:	c9 01       	movw	r24, r18
    1b5a:	95 95       	asr	r25
    1b5c:	87 95       	ror	r24
    1b5e:	95 95       	asr	r25
    1b60:	87 95       	ror	r24
    1b62:	8c 83       	std	Y+4, r24	; 0x04
    1b64:	88 23       	and	r24, r24
    1b66:	19 f4       	brne	.+6      	; 0x1b6e <readOneBit(decode_state_t*)+0x118>
    1b68:	31 96       	adiw	r30, 0x01	; 1
    1b6a:	f9 83       	std	Y+1, r31	; 0x01
    1b6c:	e8 83       	st	Y, r30
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	01 c0       	rjmp	.+2      	; 0x1b74 <readOneBit(decode_state_t*)+0x11e>
    1b72:	80 e0       	ldi	r24, 0x00	; 0
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("decoded 1");
#endif
  return(1); // Decoded a 1.
  }
    1b74:	df 91       	pop	r29
    1b76:	cf 91       	pop	r28
    1b78:	08 95       	ret

00001b7a <readOneByteWithParity(decode_state_t*)>:

// Decodes a series of encoded bits plus parity (and checks the parity, failing if wrong).
// Returns the byte decoded, else marks the state as failed.
static uint8_t readOneByteWithParity(decode_state_t *const state)
    1b7a:	ef 92       	push	r14
    1b7c:	ff 92       	push	r15
    1b7e:	0f 93       	push	r16
    1b80:	1f 93       	push	r17
    1b82:	cf 93       	push	r28
    1b84:	df 93       	push	r29
    1b86:	7c 01       	movw	r14, r24
  {
  if(state->failed) { return(0); } // Refuse to do anything further once decoding has failed.
    1b88:	fc 01       	movw	r30, r24
    1b8a:	85 81       	ldd	r24, Z+5	; 0x05
    1b8c:	88 23       	and	r24, r24
    1b8e:	11 f0       	breq	.+4      	; 0x1b94 <readOneByteWithParity(decode_state_t*)+0x1a>
    1b90:	10 e0       	ldi	r17, 0x00	; 0
    1b92:	1b c0       	rjmp	.+54     	; 0x1bca <readOneByteWithParity(decode_state_t*)+0x50>

  // Read first bit specially...
  const uint8_t b7 = readOneBit(state); 
    1b94:	c7 01       	movw	r24, r14
    1b96:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <readOneBit(decode_state_t*)>
    1b9a:	18 2f       	mov	r17, r24
    1b9c:	08 2f       	mov	r16, r24
    1b9e:	c7 e0       	ldi	r28, 0x07	; 7
    1ba0:	d0 e0       	ldi	r29, 0x00	; 0
    1ba2:	06 c0       	rjmp	.+12     	; 0x1bb0 <readOneByteWithParity(decode_state_t*)+0x36>
  uint8_t result = b7;
  uint8_t parity = b7;
  // Then remaining 7 bits...
  for(int i = 7; --i >= 0; )
    {
    const uint8_t bit = readOneBit(state);
    1ba4:	c7 01       	movw	r24, r14
    1ba6:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <readOneBit(decode_state_t*)>
    parity ^= bit;
    1baa:	08 27       	eor	r16, r24
    result = (result << 1) | bit;
    1bac:	11 0f       	add	r17, r17
    1bae:	18 2b       	or	r17, r24
  // Read first bit specially...
  const uint8_t b7 = readOneBit(state); 
  uint8_t result = b7;
  uint8_t parity = b7;
  // Then remaining 7 bits...
  for(int i = 7; --i >= 0; )
    1bb0:	21 97       	sbiw	r28, 0x01	; 1
    1bb2:	ff ef       	ldi	r31, 0xFF	; 255
    1bb4:	cf 3f       	cpi	r28, 0xFF	; 255
    1bb6:	df 07       	cpc	r29, r31
    1bb8:	a9 f7       	brne	.-22     	; 0x1ba4 <readOneByteWithParity(decode_state_t*)+0x2a>
    const uint8_t bit = readOneBit(state);
    parity ^= bit;
    result = (result << 1) | bit;
    }
  // Then get parity bit and check.
  if(parity != readOneBit(state))
    1bba:	c7 01       	movw	r24, r14
    1bbc:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <readOneBit(decode_state_t*)>
    1bc0:	08 17       	cp	r16, r24
    1bc2:	19 f0       	breq	.+6      	; 0x1bca <readOneByteWithParity(decode_state_t*)+0x50>
    {
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("bad parity");
#endif
    state->failed = true;
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
    1bc6:	f7 01       	movw	r30, r14
    1bc8:	85 83       	std	Z+5, r24	; 0x05
    }
  return(result);
  }
    1bca:	81 2f       	mov	r24, r17
    1bcc:	df 91       	pop	r29
    1bce:	cf 91       	pop	r28
    1bd0:	1f 91       	pop	r17
    1bd2:	0f 91       	pop	r16
    1bd4:	ff 90       	pop	r15
    1bd6:	ef 90       	pop	r14
    1bd8:	08 95       	ret

00001bda <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)>:

// Decode raw bitstream into non-null command structure passed in; returns true if successful.
// Will return true if OK, else false if anything obviously invalid is detected such as failing parity or checksum.
// Finds and discards leading encoded 1 and trailing 0.
// Returns NULL on failure, else pointer to next full byte after last decoded.
uint8_t const *FHT8VDecodeBitStream(uint8_t const *bitStream, uint8_t const *lastByte, fht8v_msg_t *command)
    1bda:	df 92       	push	r13
    1bdc:	ef 92       	push	r14
    1bde:	ff 92       	push	r15
    1be0:	0f 93       	push	r16
    1be2:	1f 93       	push	r17
    1be4:	df 93       	push	r29
    1be6:	cf 93       	push	r28
    1be8:	00 d0       	rcall	.+0      	; 0x1bea <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x10>
    1bea:	00 d0       	rcall	.+0      	; 0x1bec <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x12>
    1bec:	00 d0       	rcall	.+0      	; 0x1bee <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x14>
    1bee:	cd b7       	in	r28, 0x3d	; 61
    1bf0:	de b7       	in	r29, 0x3e	; 62
    1bf2:	8a 01       	movw	r16, r20
  {
  decode_state_t state;
  state.bitStream = bitStream;
    1bf4:	9a 83       	std	Y+2, r25	; 0x02
    1bf6:	89 83       	std	Y+1, r24	; 0x01
  state.lastByte = lastByte;
    1bf8:	7c 83       	std	Y+4, r23	; 0x04
    1bfa:	6b 83       	std	Y+3, r22	; 0x03
  state.mask = 0;
    1bfc:	1d 82       	std	Y+5, r1	; 0x05
  state.failed = false;
    1bfe:	1e 82       	std	Y+6, r1	; 0x06
      }
  DEBUG_SERIAL_PRINTLN();
#endif

  // Find and absorb the leading encoded '1', else quit if not found by end of stream.
  while(0 == readOneBit(&state)) { if(state.failed) { return(NULL); } }
    1c00:	7e 01       	movw	r14, r28
    1c02:	08 94       	sec
    1c04:	e1 1c       	adc	r14, r1
    1c06:	f1 1c       	adc	r15, r1
    1c08:	03 c0       	rjmp	.+6      	; 0x1c10 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x36>
    1c0a:	8e 81       	ldd	r24, Y+6	; 0x06
    1c0c:	88 23       	and	r24, r24
    1c0e:	e9 f5       	brne	.+122    	; 0x1c8a <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb0>
    1c10:	c7 01       	movw	r24, r14
    1c12:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <readOneBit(decode_state_t*)>
    1c16:	88 23       	and	r24, r24
    1c18:	c1 f3       	breq	.-16     	; 0x1c0a <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x30>
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("Read leading 1");
#endif

  command->hc1 = readOneByteWithParity(&state);
    1c1a:	c7 01       	movw	r24, r14
    1c1c:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <readOneByteWithParity(decode_state_t*)>
    1c20:	f8 01       	movw	r30, r16
    1c22:	80 83       	st	Z, r24
  command->hc2 = readOneByteWithParity(&state);
    1c24:	c7 01       	movw	r24, r14
    1c26:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <readOneByteWithParity(decode_state_t*)>
    1c2a:	f8 01       	movw	r30, r16
    1c2c:	81 83       	std	Z+1, r24	; 0x01
#ifdef FHT8V_ADR_USED
  command->address = readOneByteWithParity(&state);
#else
  const uint8_t address = readOneByteWithParity(&state);
    1c2e:	c7 01       	movw	r24, r14
    1c30:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <readOneByteWithParity(decode_state_t*)>
    1c34:	d8 2e       	mov	r13, r24
#endif
  command->command = readOneByteWithParity(&state);
    1c36:	c7 01       	movw	r24, r14
    1c38:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <readOneByteWithParity(decode_state_t*)>
    1c3c:	f8 01       	movw	r30, r16
    1c3e:	82 83       	std	Z+2, r24	; 0x02
  command->extension = readOneByteWithParity(&state);
    1c40:	c7 01       	movw	r24, r14
    1c42:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <readOneByteWithParity(decode_state_t*)>
    1c46:	f8 01       	movw	r30, r16
    1c48:	83 83       	std	Z+3, r24	; 0x03
  const uint8_t checksumRead = readOneByteWithParity(&state);
    1c4a:	c7 01       	movw	r24, r14
    1c4c:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <readOneByteWithParity(decode_state_t*)>
    1c50:	28 2f       	mov	r18, r24
  if(state.failed)
    1c52:	8e 81       	ldd	r24, Y+6	; 0x06
    1c54:	88 23       	and	r24, r24
    1c56:	c9 f4       	brne	.+50     	; 0x1c8a <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb0>
#ifdef FHT8V_ADR_USED
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + command->address + command->command + command->extension;
#else
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + address + command->command + command->extension;
#endif
  if(checksum != checksumRead)
    1c58:	f8 01       	movw	r30, r16
    1c5a:	80 81       	ld	r24, Z
    1c5c:	91 81       	ldd	r25, Z+1	; 0x01
    1c5e:	89 0f       	add	r24, r25
    1c60:	84 5f       	subi	r24, 0xF4	; 244
    1c62:	92 81       	ldd	r25, Z+2	; 0x02
    1c64:	89 0f       	add	r24, r25
    1c66:	93 81       	ldd	r25, Z+3	; 0x03
    1c68:	89 0f       	add	r24, r25
    1c6a:	8d 0d       	add	r24, r13
    1c6c:	82 17       	cp	r24, r18
    1c6e:	69 f4       	brne	.+26     	; 0x1c8a <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb0>
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("Checksum OK");
    }
#endif

  // Check the trailing encoded '0'.
  if(0 != readOneBit(&state))
    1c70:	c7 01       	movw	r24, r14
    1c72:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <readOneBit(decode_state_t*)>
    1c76:	88 23       	and	r24, r24
    1c78:	41 f4       	brne	.+16     	; 0x1c8a <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb0>
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("Read of trailing 0 failed");
#endif
    state.failed = true; return(NULL);
    }
  if(state.failed) { return(NULL); }
    1c7a:	8e 81       	ldd	r24, Y+6	; 0x06
    1c7c:	88 23       	and	r24, r24
    1c7e:	29 f4       	brne	.+10     	; 0x1c8a <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb0>
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("Read entire message");
#endif
  // Return pointer to where any trailing data may be
  // in next byte beyond end of FHT8V frame.
  return(state.bitStream + 1);
    1c80:	29 81       	ldd	r18, Y+1	; 0x01
    1c82:	3a 81       	ldd	r19, Y+2	; 0x02
    1c84:	2f 5f       	subi	r18, 0xFF	; 255
    1c86:	3f 4f       	sbci	r19, 0xFF	; 255
    1c88:	02 c0       	rjmp	.+4      	; 0x1c8e <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb4>
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
  }
    1c8e:	c9 01       	movw	r24, r18
    1c90:	26 96       	adiw	r28, 0x06	; 6
    1c92:	0f b6       	in	r0, 0x3f	; 63
    1c94:	f8 94       	cli
    1c96:	de bf       	out	0x3e, r29	; 62
    1c98:	0f be       	out	0x3f, r0	; 63
    1c9a:	cd bf       	out	0x3d, r28	; 61
    1c9c:	cf 91       	pop	r28
    1c9e:	df 91       	pop	r29
    1ca0:	1f 91       	pop	r17
    1ca2:	0f 91       	pop	r16
    1ca4:	ff 90       	pop	r15
    1ca6:	ef 90       	pop	r14
    1ca8:	df 90       	pop	r13
    1caa:	08 95       	ret

00001cac <FHT8VCallForHeatPoll()>:
// If used instead of an interrupt then should probably called at least about once every 100ms.
// Returns true if any useful activity/progress was detected by this call (not necessarily a full valid call-for-heat).
// Upon receipt of a valid call-for-heat this comes out of eavesdropping mode to save energy.
// If a problem is encountered this restarts the eavesdropping process.
// Does not block nor take significant time.
bool FHT8VCallForHeatPoll()
    1cac:	af 92       	push	r10
    1cae:	bf 92       	push	r11
    1cb0:	cf 92       	push	r12
    1cb2:	df 92       	push	r13
    1cb4:	ef 92       	push	r14
    1cb6:	ff 92       	push	r15
    1cb8:	0f 93       	push	r16
    1cba:	1f 93       	push	r17
    1cbc:	df 93       	push	r29
    1cbe:	cf 93       	push	r28
    1cc0:	cd b7       	in	r28, 0x3d	; 61
    1cc2:	de b7       	in	r29, 0x3e	; 62
    1cc4:	2d 97       	sbiw	r28, 0x0d	; 13
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	f8 94       	cli
    1cca:	de bf       	out	0x3e, r29	; 62
    1ccc:	0f be       	out	0x3f, r0	; 63
    1cce:	cd bf       	out	0x3d, r28	; 61
  {
  // Do nothing unless already in eavesdropping mode.
  if(!eavesdropping) { return(false); }
    1cd0:	80 91 41 01 	lds	r24, 0x0141
    1cd4:	88 23       	and	r24, r24
    1cd6:	09 f4       	brne	.+2      	; 0x1cda <FHT8VCallForHeatPoll()+0x2e>
    1cd8:	f7 c0       	rjmp	.+494    	; 0x1ec8 <FHT8VCallForHeatPoll()+0x21c>
  if(FHT8VCallForHeatHeard()) { return(false); }
#endif

#if defined(PIN_RFM_NIRQ)
  // If nIRQ line is available then abort if it is not active (and thus spare the SPI bus).
  if(fastDigitalRead(PIN_RFM_NIRQ) != LOW) { return(false); }
    1cda:	19 99       	sbic	0x03, 1	; 3
    1cdc:	f5 c0       	rjmp	.+490    	; 0x1ec8 <FHT8VCallForHeatPoll()+0x21c>
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("RX IRQ");
#endif
#endif

  const uint16_t status = RFM22ReadStatusBoth(); // reg1:reg2, on V0.08 PICAXE tempB2:SPI_DATAB.
    1cde:	0e 94 9a 1b 	call	0x3734	; 0x3734 <RFM22ReadStatusBoth()>
    1ce2:	8c 01       	movw	r16, r24

  if(status & 0x1000) // Received frame.
    1ce4:	94 ff       	sbrs	r25, 4
    1ce6:	db c0       	rjmp	.+438    	; 0x1e9e <FHT8VCallForHeatPoll()+0x1f2>
    {
// Ensure that data from a previous frame is not trivially re-read by clearing the buffer explicitly.
//    for(uint8_t *p = FHT8VRXHubArea + FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE; --p >= FHT8VRXHubArea; )
//      { *p = 0; }
    memset(FHT8VRXHubArea, 0xff, sizeof(FHT8VRXHubArea));
    1ce8:	82 e4       	ldi	r24, 0x42	; 66
    1cea:	91 e0       	ldi	r25, 0x01	; 1
    1cec:	6f ef       	ldi	r22, 0xFF	; 255
    1cee:	70 e0       	ldi	r23, 0x00	; 0
    1cf0:	4c e3       	ldi	r20, 0x3C	; 60
    1cf2:	50 e0       	ldi	r21, 0x00	; 0
    1cf4:	0e 94 12 04 	call	0x824	; 0x824 <memset>
    // Attempt to read the entire frame.
    RFM22RXFIFO(FHT8VRXHubArea, sizeof(FHT8VRXHubArea));
    1cf8:	82 e4       	ldi	r24, 0x42	; 66
    1cfa:	91 e0       	ldi	r25, 0x01	; 1
    1cfc:	6c e3       	ldi	r22, 0x3C	; 60
    1cfe:	0e 94 35 1a 	call	0x346a	; 0x346a <RFM22RXFIFO(unsigned char*, unsigned char)>
    1d02:	ee 24       	eor	r14, r14
    1d04:	ff 24       	eor	r15, r15
    1d06:	de 2c       	mov	r13, r14
    uint8_t pos; // Current byte position in RX buffer...
    // Validate FHT8V premable (zeros encoded as up to 6x 0xcc bytes), else abort/restart.
    // Insist on at least a couple of bytes of valid premable being present.
    for(pos = 0; pos < 6; ++pos)
      {
      const uint8_t b = FHT8VRXHubArea[pos];
    1d08:	f7 01       	movw	r30, r14
    1d0a:	ee 5b       	subi	r30, 0xBE	; 190
    1d0c:	fe 4f       	sbci	r31, 0xFE	; 254
    1d0e:	e0 81       	ld	r30, Z
      if(0xcc != b)
    1d10:	ec 3c       	cpi	r30, 0xCC	; 204
    1d12:	89 f1       	breq	.+98     	; 0x1d76 <FHT8VCallForHeatPoll()+0xca>
    1d14:	ce 2c       	mov	r12, r14
        {
        if(MESSAGING_FULL_STATS_FLAGS_HEADER_MSBS == (b & MESSAGING_FULL_STATS_FLAGS_HEADER_MASK))
    1d16:	e0 7e       	andi	r30, 0xE0	; 224
    1d18:	e0 36       	cpi	r30, 0x60	; 96
    1d1a:	d9 f4       	brne	.+54     	; 0x1d52 <FHT8VCallForHeatPoll()+0xa6>
          {
          // May be stats frame, so attempt to decode...
          FullStatsMessageCore_t content;
          // (TODO: should reject non-secure messages when expecting secure ones...)
          const uint8_t *msg = decodeFullStatsMessageCore(FHT8VRXHubArea, sizeof(FHT8VRXHubArea)-pos, stTXalwaysAll, false, &content);
    1d1c:	6c e3       	ldi	r22, 0x3C	; 60
    1d1e:	6e 19       	sub	r22, r14
    1d20:	77 e0       	ldi	r23, 0x07	; 7
    1d22:	a7 2e       	mov	r10, r23
    1d24:	b1 2c       	mov	r11, r1
    1d26:	ac 0e       	add	r10, r28
    1d28:	bd 1e       	adc	r11, r29
    1d2a:	82 e4       	ldi	r24, 0x42	; 66
    1d2c:	91 e0       	ldi	r25, 0x01	; 1
    1d2e:	40 e0       	ldi	r20, 0x00	; 0
    1d30:	50 e0       	ldi	r21, 0x00	; 0
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	85 01       	movw	r16, r10
    1d36:	0e 94 c5 13 	call	0x278a	; 0x278a <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)>
          if(NULL != msg)
    1d3a:	89 2b       	or	r24, r25
    1d3c:	51 f0       	breq	.+20     	; 0x1d52 <FHT8VCallForHeatPoll()+0xa6>
             {
             if(content.containsID)
    1d3e:	8f 81       	ldd	r24, Y+7	; 0x07
    1d40:	80 ff       	sbrs	r24, 0
    1d42:	04 c0       	rjmp	.+8      	; 0x1d4c <FHT8VCallForHeatPoll()+0xa0>
               DEBUG_SERIAL_PRINTFMT(content.id0, HEX);
               DEBUG_SERIAL_PRINT(' ');
               DEBUG_SERIAL_PRINTFMT(content.id1, HEX);
               DEBUG_SERIAL_PRINTLN();
#endif
               recordCoreStats(false, &content);
    1d44:	80 e0       	ldi	r24, 0x00	; 0
    1d46:	b5 01       	movw	r22, r10
    1d48:	0e 94 64 13 	call	0x26c8	; 0x26c8 <recordCoreStats(bool, FullStatsMessageCore const*)>
               }
             _SetupRFM22ToEavesdropOnFHT8V(); // Reset/restart RX.
    1d4c:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_SetupRFM22ToEavesdropOnFHT8V()>
    1d50:	bd c0       	rjmp	.+378    	; 0x1ecc <FHT8VCallForHeatPoll()+0x220>
            seedRNG8(FHT8VRXHubArea[pos+1], FHT8VRXHubArea[pos+2], FHT8VRXHubArea[pos+3]); // Attempt to gather some entropy from RX noise. (TODO-302).
            }
#endif
          }

        if(pos < 2)
    1d52:	21 e0       	ldi	r18, 0x01	; 1
    1d54:	2c 15       	cp	r18, r12
    1d56:	c0 f0       	brcs	.+48     	; 0x1d88 <FHT8VCallForHeatPoll()+0xdc>
// Useful to assess the noise enviromentment.
static volatile uint8_t lastRXerrno;

// Atomically returns and clears last (FHT8V) RX error code, or 0 if none.
// Set with such codes as FHT8VRXErr_GENERIC; never set to zero.
static void setLastRXErr(const uint8_t err) { ATOMIC_BLOCK (ATOMIC_RESTORESTATE) { lastRXerrno = err; } }
    1d58:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1d5a:	f8 94       	cli
    1d5c:	82 e0       	ldi	r24, 0x02	; 2
    1d5e:	80 93 40 01 	sts	0x0140, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1d62:	9f bf       	out	0x3f, r25	; 63
            DEBUG_SERIAL_PRINT_FLASHSTRING(" 0x");
            DEBUG_SERIAL_PRINTFMT(FHT8VRXHubArea[p], HEX);
            }
          DEBUG_SERIAL_PRINTLN();
#endif
          seedRNG8(FHT8VRXHubArea[pos], FHT8VRXHubArea[pos+2], FHT8VRXHubArea[pos+5]); // Attempt to gather some entropy from RX noise. (TODO-302).
    1d64:	f7 01       	movw	r30, r14
    1d66:	ee 5b       	subi	r30, 0xBE	; 190
    1d68:	fe 4f       	sbci	r31, 0xFE	; 254
    1d6a:	80 81       	ld	r24, Z
    1d6c:	62 81       	ldd	r22, Z+2	; 0x02
    1d6e:	45 81       	ldd	r20, Z+5	; 0x05
    1d70:	0e 94 fd 19 	call	0x33fa	; 0x33fa <seedRNG8(unsigned char, unsigned char, unsigned char)>
    1d74:	a7 c0       	rjmp	.+334    	; 0x1ec4 <FHT8VCallForHeatPoll()+0x218>
          _SetupRFM22ToEavesdropOnFHT8V(); // Reset/restart RX.
          return(false);
    1d76:	d3 94       	inc	r13
    1d78:	08 94       	sec
    1d7a:	e1 1c       	adc	r14, r1
    1d7c:	f1 1c       	adc	r15, r1
    // Attempt to read the entire frame.
    RFM22RXFIFO(FHT8VRXHubArea, sizeof(FHT8VRXHubArea));
    uint8_t pos; // Current byte position in RX buffer...
    // Validate FHT8V premable (zeros encoded as up to 6x 0xcc bytes), else abort/restart.
    // Insist on at least a couple of bytes of valid premable being present.
    for(pos = 0; pos < 6; ++pos)
    1d7e:	86 e0       	ldi	r24, 0x06	; 6
    1d80:	e8 16       	cp	r14, r24
    1d82:	f1 04       	cpc	r15, r1
    1d84:	09 f0       	breq	.+2      	; 0x1d88 <FHT8VCallForHeatPoll()+0xdc>
    1d86:	bf cf       	rjmp	.-130    	; 0x1d06 <FHT8VCallForHeatPoll()+0x5a>
        break; // If enough preamble has been seen, move on to the body.
        }
      }
    fht8v_msg_t command;
    uint8_t const *lastByte = FHT8VRXHubArea + FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE - 1;
    uint8_t const *trailer = FHT8VDecodeBitStream(FHT8VRXHubArea + pos, lastByte, &command);
    1d88:	8d 2d       	mov	r24, r13
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	6d e7       	ldi	r22, 0x7D	; 125
    1d8e:	e6 2e       	mov	r14, r22
    1d90:	61 e0       	ldi	r22, 0x01	; 1
    1d92:	f6 2e       	mov	r15, r22
    1d94:	8e 5b       	subi	r24, 0xBE	; 190
    1d96:	9e 4f       	sbci	r25, 0xFE	; 254
    1d98:	b7 01       	movw	r22, r14
    1d9a:	ae 01       	movw	r20, r28
    1d9c:	4d 5f       	subi	r20, 0xFD	; 253
    1d9e:	5f 4f       	sbci	r21, 0xFF	; 255
    1da0:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)>
    1da4:	8c 01       	movw	r16, r24
    if(NULL != trailer)
    1da6:	00 97       	sbiw	r24, 0x00	; 0
    1da8:	09 f4       	brne	.+2      	; 0x1dac <FHT8VCallForHeatPoll()+0x100>
    1daa:	75 c0       	rjmp	.+234    	; 0x1e96 <FHT8VCallForHeatPoll()+0x1ea>

#if defined(SUPPORT_TEMP_TX) // Only look for the trailer if supported.
      // If whole FHT8V frame was OK then check if there is a valid stats trailer.
      
      // Check for 'core' stats trailer.
      if((trailer + FullStatsMessageCore_MAX_BYTES_ON_WIRE <= lastByte) && // Enough space for minimum-stats trailer.
    1dac:	08 96       	adiw	r24, 0x08	; 8
    1dae:	e8 16       	cp	r14, r24
    1db0:	f9 06       	cpc	r15, r25
    1db2:	60 f1       	brcs	.+88     	; 0x1e0c <FHT8VCallForHeatPoll()+0x160>
    1db4:	f8 01       	movw	r30, r16
    1db6:	80 81       	ld	r24, Z
    1db8:	80 7e       	andi	r24, 0xE0	; 224
    1dba:	80 36       	cpi	r24, 0x60	; 96
    1dbc:	39 f5       	brne	.+78     	; 0x1e0c <FHT8VCallForHeatPoll()+0x160>
         (MESSAGING_FULL_STATS_FLAGS_HEADER_MSBS == (trailer[0] & MESSAGING_FULL_STATS_FLAGS_HEADER_MASK)))
        {
        FullStatsMessageCore_t content;
        const uint8_t *tail = decodeFullStatsMessageCore(trailer, lastByte - trailer, stTXalwaysAll, false, &content);
    1dbe:	6e 2d       	mov	r22, r14
    1dc0:	60 1b       	sub	r22, r16
    1dc2:	c8 01       	movw	r24, r16
    1dc4:	40 e0       	ldi	r20, 0x00	; 0
    1dc6:	50 e0       	ldi	r21, 0x00	; 0
    1dc8:	20 e0       	ldi	r18, 0x00	; 0
    1dca:	8e 01       	movw	r16, r28
    1dcc:	09 5f       	subi	r16, 0xF9	; 249
    1dce:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd0:	0e 94 c5 13 	call	0x278a	; 0x278a <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)>
        if(NULL != tail)
    1dd4:	89 2b       	or	r24, r25
    1dd6:	09 f4       	brne	.+2      	; 0x1dda <FHT8VCallForHeatPoll()+0x12e>
    1dd8:	48 c0       	rjmp	.+144    	; 0x1e6a <FHT8VCallForHeatPoll()+0x1be>
          // Received trailing stats frame!
 
          // If ID is present then make sure it matches that implied by the FHT8V frame (else reject this trailer)
          // else file it in from the FHT8C frame.
          bool allGood = true;
          if(content.containsID)
    1dda:	9f 81       	ldd	r25, Y+7	; 0x07
    1ddc:	2b 81       	ldd	r18, Y+3	; 0x03
    1dde:	90 ff       	sbrs	r25, 0
    1de0:	08 c0       	rjmp	.+16     	; 0x1df2 <FHT8VCallForHeatPoll()+0x146>
            {
            if((content.id0 != command.hc1) || (content.id1 != command.hc2))
    1de2:	88 85       	ldd	r24, Y+8	; 0x08
    1de4:	82 17       	cp	r24, r18
    1de6:	59 f4       	brne	.+22     	; 0x1dfe <FHT8VCallForHeatPoll()+0x152>
    1de8:	99 85       	ldd	r25, Y+9	; 0x09
    1dea:	8c 81       	ldd	r24, Y+4	; 0x04
    1dec:	98 17       	cp	r25, r24
    1dee:	39 f4       	brne	.+14     	; 0x1dfe <FHT8VCallForHeatPoll()+0x152>
    1df0:	7f c0       	rjmp	.+254    	; 0x1ef0 <FHT8VCallForHeatPoll()+0x244>
              { allGood = false; }
            }
          else
            {
            content.id0 = command.hc1;
    1df2:	28 87       	std	Y+8, r18	; 0x08
            content.id1 = command.hc2;
    1df4:	8c 81       	ldd	r24, Y+4	; 0x04
    1df6:	89 87       	std	Y+9, r24	; 0x09
            content.containsID = true;
    1df8:	91 60       	ori	r25, 0x01	; 1
    1dfa:	9f 83       	std	Y+7, r25	; 0x07
    1dfc:	79 c0       	rjmp	.+242    	; 0x1ef0 <FHT8VCallForHeatPoll()+0x244>
// Useful to assess the noise enviromentment.
static volatile uint8_t lastRXerrno;

// Atomically returns and clears last (FHT8V) RX error code, or 0 if none.
// Set with such codes as FHT8VRXErr_GENERIC; never set to zero.
static void setLastRXErr(const uint8_t err) { ATOMIC_BLOCK (ATOMIC_RESTORESTATE) { lastRXerrno = err; } }
    1dfe:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1e00:	f8 94       	cli
    1e02:	84 e0       	ldi	r24, 0x04	; 4
    1e04:	80 93 40 01 	sts	0x0140, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1e08:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    1e0a:	2f c0       	rjmp	.+94     	; 0x1e6a <FHT8VCallForHeatPoll()+0x1be>
          // TODO: record error with mismatched ID.
          }
        // TODO: maybe scrape some entropy from damaged frame.
        }
      // Check for minimum stats trailer.
      else if((trailer + MESSAGING_TRAILING_MINIMAL_STATS_PAYLOAD_BYTES <= lastByte) && // Enough space for minimum-stats trailer.
    1e0c:	c8 01       	movw	r24, r16
    1e0e:	03 96       	adiw	r24, 0x03	; 3
    1e10:	8d 57       	subi	r24, 0x7D	; 125
    1e12:	91 40       	sbci	r25, 0x01	; 1
    1e14:	09 f0       	breq	.+2      	; 0x1e18 <FHT8VCallForHeatPoll()+0x16c>
    1e16:	48 f5       	brcc	.+82     	; 0x1e6a <FHT8VCallForHeatPoll()+0x1be>
    1e18:	f8 01       	movw	r30, r16
    1e1a:	80 81       	ld	r24, Z
    1e1c:	80 7e       	andi	r24, 0xE0	; 224
    1e1e:	80 34       	cpi	r24, 0x40	; 64
    1e20:	21 f5       	brne	.+72     	; 0x1e6a <FHT8VCallForHeatPoll()+0x1be>
         (MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MSBS == (trailer[0] & MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MASK)))
        {
        if(verifyHeaderAndCRCForTrailingMinimalStatsPayload(trailer)) // Valid header and CRC.
    1e22:	c8 01       	movw	r24, r16
    1e24:	0e 94 4d 12 	call	0x249a	; 0x249a <verifyHeaderAndCRCForTrailingMinimalStatsPayload(unsigned char const*)>
    1e28:	88 23       	and	r24, r24
    1e2a:	71 f0       	breq	.+28     	; 0x1e48 <FHT8VCallForHeatPoll()+0x19c>
          {
          trailingMinimalStatsPayload_t payload;
          extractTrailingMinimalStatsPayload(trailer, &payload);
    1e2c:	c8 01       	movw	r24, r16
    1e2e:	8e 01       	movw	r16, r28
    1e30:	0f 5f       	subi	r16, 0xFF	; 255
    1e32:	1f 4f       	sbci	r17, 0xFF	; 255
    1e34:	b8 01       	movw	r22, r16
    1e36:	0e 94 96 13 	call	0x272c	; 0x272c <extractTrailingMinimalStatsPayload(unsigned char const*, trailingMinimalStatsPayload*)>
          recordMinimalStats(false, command.hc1, command.hc2, &payload);
    1e3a:	80 e0       	ldi	r24, 0x00	; 0
    1e3c:	6b 81       	ldd	r22, Y+3	; 0x03
    1e3e:	4c 81       	ldd	r20, Y+4	; 0x04
    1e40:	98 01       	movw	r18, r16
    1e42:	0e 94 73 13 	call	0x26e6	; 0x26e6 <recordMinimalStats(bool, unsigned char, unsigned char, trailingMinimalStatsPayload const*)>
    1e46:	11 c0       	rjmp	.+34     	; 0x1e6a <FHT8VCallForHeatPoll()+0x1be>
#endif
          }
#if 1 // Optional extra tracking of error rate/type/location.
        else // Failed to verify; deduce bad frame if header looks OK.
          {
          if(MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MSBS == (trailer[0] & MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MASK))
    1e48:	f8 01       	movw	r30, r16
    1e4a:	80 81       	ld	r24, Z
    1e4c:	80 7e       	andi	r24, 0xE0	; 224
    1e4e:	80 34       	cpi	r24, 0x40	; 64
    1e50:	61 f4       	brne	.+24     	; 0x1e6a <FHT8VCallForHeatPoll()+0x1be>
// Useful to assess the noise enviromentment.
static volatile uint8_t lastRXerrno;

// Atomically returns and clears last (FHT8V) RX error code, or 0 if none.
// Set with such codes as FHT8VRXErr_GENERIC; never set to zero.
static void setLastRXErr(const uint8_t err) { ATOMIC_BLOCK (ATOMIC_RESTORESTATE) { lastRXerrno = err; } }
    1e52:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1e54:	f8 94       	cli
    1e56:	84 e0       	ldi	r24, 0x04	; 4
    1e58:	80 93 40 01 	sts	0x0140, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1e5c:	9f bf       	out	0x3f, r25	; 63
        else // Failed to verify; deduce bad frame if header looks OK.
          {
          if(MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MSBS == (trailer[0] & MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MASK))
            {
            setLastRXErr(FHT8VRXErr_BAD_RX_SUBFRAME);
            seedRNG8(trailer[0], trailer[1], trailer[2]); // Attempt to gather some entropy from the RX noise. (TODO-302).
    1e5e:	f8 01       	movw	r30, r16
    1e60:	80 81       	ld	r24, Z
    1e62:	61 81       	ldd	r22, Z+1	; 0x01
    1e64:	42 81       	ldd	r20, Z+2	; 0x02
    1e66:	0e 94 fd 19 	call	0x33fa	; 0x33fa <seedRNG8(unsigned char, unsigned char, unsigned char)>
#endif
        }
#endif

      // Potentially accept as call for heat only if command is 0x26 (38) and value open enough as used by OpenTRV to TX.
      if((0x26 == command.command) && (command.extension >= getMinValvePcReallyOpen()))
    1e6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e6c:	86 32       	cpi	r24, 0x26	; 38
    1e6e:	71 f5       	brne	.+92     	; 0x1ecc <FHT8VCallForHeatPoll()+0x220>
    1e70:	1e 81       	ldd	r17, Y+6	; 0x06
    1e72:	0e 94 1c 08 	call	0x1038	; 0x1038 <getMinValvePcReallyOpen()>
    1e76:	18 17       	cp	r17, r24
    1e78:	48 f1       	brcs	.+82     	; 0x1ecc <FHT8VCallForHeatPoll()+0x220>
        {
        if(FHT8VHubAcceptedHouseCode(command.hc1, command.hc2))
          {
          // Accept if house code not filtered out.
          const uint16_t compoundHC = (command.hc1 << 8) | command.hc2;
    1e7a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	2c 81       	ldd	r18, Y+4	; 0x04
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	82 2b       	or	r24, r18
    1e84:	93 2b       	or	r25, r19
          ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    1e86:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1e88:	f8 94       	cli
            { lastCallForHeatHC = compoundHC; } // Update atomically.
    1e8a:	90 93 03 01 	sts	0x0103, r25
    1e8e:	80 93 02 01 	sts	0x0102, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1e92:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    1e94:	1b c0       	rjmp	.+54     	; 0x1ecc <FHT8VCallForHeatPoll()+0x220>
// Useful to assess the noise enviromentment.
static volatile uint8_t lastRXerrno;

// Atomically returns and clears last (FHT8V) RX error code, or 0 if none.
// Set with such codes as FHT8VRXErr_GENERIC; never set to zero.
static void setLastRXErr(const uint8_t err) { ATOMIC_BLOCK (ATOMIC_RESTORESTATE) { lastRXerrno = err; } }
    1e96:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1e98:	f8 94       	cli
    1e9a:	83 e0       	ldi	r24, 0x03	; 3
    1e9c:	10 c0       	rjmp	.+32     	; 0x1ebe <FHT8VCallForHeatPoll()+0x212>
#endif
      _SetupRFM22ToEavesdropOnFHT8V(); // Reset/restart RX.
      return(false);
      }
    }
  else if(status & 0x80) // Got sync from incoming FHT8V message.
    1e9e:	87 ff       	sbrs	r24, 7
    1ea0:	09 c0       	rjmp	.+18     	; 0x1eb4 <FHT8VCallForHeatPoll()+0x208>
    {
    // Capture some entropy from RSSI and timing...
    const uint8_t rssi = RFM22RSSI();
    1ea2:	0e 94 82 1b 	call	0x3704	; 0x3704 <RFM22RSSI()>
    // TODO adjust output power down a little if RX very loud.
    addEntropyToPool(rssi ^ (uint8_t)(status ^ (status >> 8)), 1); // Maybe ~1 real bit of entropy.
    1ea6:	91 2f       	mov	r25, r17
    1ea8:	90 27       	eor	r25, r16
    1eaa:	89 27       	eor	r24, r25
    1eac:	61 e0       	ldi	r22, 0x01	; 1
    1eae:	0e 94 56 1e 	call	0x3cac	; 0x3cac <addEntropyToPool(unsigned char, unsigned char)>
    1eb2:	0c c0       	rjmp	.+24     	; 0x1ecc <FHT8VCallForHeatPoll()+0x220>
      }
#endif 
//    syncSeen = true;
    return(true);
    }
  else if(status & 0x8000) // RX FIFO overflow/underflow: give up and restart...
    1eb4:	97 ff       	sbrs	r25, 7
    1eb6:	08 c0       	rjmp	.+16     	; 0x1ec8 <FHT8VCallForHeatPoll()+0x21c>
// Useful to assess the noise enviromentment.
static volatile uint8_t lastRXerrno;

// Atomically returns and clears last (FHT8V) RX error code, or 0 if none.
// Set with such codes as FHT8VRXErr_GENERIC; never set to zero.
static void setLastRXErr(const uint8_t err) { ATOMIC_BLOCK (ATOMIC_RESTORESTATE) { lastRXerrno = err; } }
    1eb8:	9f b7       	in	r25, 0x3f	; 63
    1eba:	f8 94       	cli
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	80 93 40 01 	sts	0x0140, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1ec2:	9f bf       	out	0x3f, r25	; 63
    {
    setLastRXErr(FHT8VRXErr_GENERIC);
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("RX FIFO problem");
#endif
    _SetupRFM22ToEavesdropOnFHT8V(); // Reset/restart RX.
    1ec4:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <_SetupRFM22ToEavesdropOnFHT8V()>
    return(false);
    1ec8:	80 e0       	ldi	r24, 0x00	; 0
    1eca:	01 c0       	rjmp	.+2      	; 0x1ece <FHT8VCallForHeatPoll()+0x222>
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    }

  return(false);
  }
    1ece:	2d 96       	adiw	r28, 0x0d	; 13
    1ed0:	0f b6       	in	r0, 0x3f	; 63
    1ed2:	f8 94       	cli
    1ed4:	de bf       	out	0x3e, r29	; 62
    1ed6:	0f be       	out	0x3f, r0	; 63
    1ed8:	cd bf       	out	0x3d, r28	; 61
    1eda:	cf 91       	pop	r28
    1edc:	df 91       	pop	r29
    1ede:	1f 91       	pop	r17
    1ee0:	0f 91       	pop	r16
    1ee2:	ff 90       	pop	r15
    1ee4:	ef 90       	pop	r14
    1ee6:	df 90       	pop	r13
    1ee8:	cf 90       	pop	r12
    1eea:	bf 90       	pop	r11
    1eec:	af 90       	pop	r10
    1eee:	08 95       	ret
            content.id1 = command.hc2;
            content.containsID = true;
            }
 
          // If frame looks good then capture it.
          if(allGood) { recordCoreStats(false, &content); }
    1ef0:	80 e0       	ldi	r24, 0x00	; 0
    1ef2:	be 01       	movw	r22, r28
    1ef4:	69 5f       	subi	r22, 0xF9	; 249
    1ef6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ef8:	0e 94 64 13 	call	0x26c8	; 0x26c8 <recordCoreStats(bool, FullStatsMessageCore const*)>
    1efc:	b6 cf       	rjmp	.-148    	; 0x1e6a <FHT8VCallForHeatPoll()+0x1be>

00001efe <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)>:
//
// Returns immediately without transmitting if the command buffer starts with 0xff (ie is empty).
// (If doubleTX is true, sends the bitstream twice, with a short (~8ms) pause between transmissions, to help ensure reliable delivery.)
//
// Note: single transmission time is up to about 80ms (without extra trailers), double up to about 170ms.
static void FHT8VTXFHTQueueAndSendCmd(uint8_t *bptr, const bool doubleTX)
    1efe:	0f 93       	push	r16
    1f00:	1f 93       	push	r17
    1f02:	cf 93       	push	r28
    1f04:	df 93       	push	r29
    1f06:	ec 01       	movw	r28, r24
    1f08:	06 2f       	mov	r16, r22
  {
  if(((uint8_t)0xff) == *bptr) { return; }
    1f0a:	88 81       	ld	r24, Y
    1f0c:	8f 3f       	cpi	r24, 0xFF	; 255
    1f0e:	41 f1       	breq	.+80     	; 0x1f60 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x62>
#ifdef DEBUG
  if(0 == *bptr) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("FHT8V frame not initialised"); panic(); }
    1f10:	88 23       	and	r24, r24
    1f12:	31 f4       	brne	.+12     	; 0x1f20 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x22>
    1f14:	8d e3       	ldi	r24, 0x3D	; 61
    1f16:	91 e0       	ldi	r25, 0x01	; 1
    1f18:	0e 94 55 20 	call	0x40aa	; 0x40aa <serialPrintlnAndFlush(__FlashStringHelper const*)>
    1f1c:	0e 94 cd 2c 	call	0x599a	; 0x599a <panic()>
#endif

#if defined(ENABLE_BOILER_HUB)
  const bool hubMode = inHubMode();
    1f20:	0e 94 a0 07 	call	0xf40	; 0xf40 <getMinBoilerOnMinutes()>
    1f24:	18 2f       	mov	r17, r24
    1f26:	88 23       	and	r24, r24
    1f28:	19 f0       	breq	.+6      	; 0x1f30 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x32>
    1f2a:	11 e0       	ldi	r17, 0x01	; 1
  // Do a final poll for any call for heat that just arrived before doing TX.
  if(hubMode) { FHT8VCallForHeatPoll(); }
    1f2c:	0e 94 56 0e 	call	0x1cac	; 0x1cac <FHT8VCallForHeatPoll()>
  StopEavesdropOnFHT8V(); // Unconditional cleardown of eavesdrop.
    1f30:	80 e0       	ldi	r24, 0x00	; 0
    1f32:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <StopEavesdropOnFHT8V(bool)>
#endif

  RFM22QueueCmdToFF(bptr);
    1f36:	ce 01       	movw	r24, r28
    1f38:	0e 94 0f 1b 	call	0x361e	; 0x361e <RFM22QueueCmdToFF(unsigned char*)>
  RFM22TXFIFO(); // Send it!  Approx 1.6ms/byte and < 80ms max.
    1f3c:	0e 94 07 1c 	call	0x380e	; 0x380e <RFM22TXFIFO()>

  if(doubleTX)
    1f40:	00 23       	and	r16, r16
    1f42:	31 f0       	breq	.+12     	; 0x1f50 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x52>
// This may be achieved in part by dynamically slowing the CPU clock if possible.
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed((((MIN_CPU_HZ * (ms)) + 2000) / 4000) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    1f44:	8d e3       	ldi	r24, 0x3D	; 61
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
    {
    // Should nominally pause about 8--9ms or similar before retransmission...
    sleepLowPowerMs(8);
    RFM22TXFIFO(); // Re-send it!
    1f4c:	0e 94 07 1c 	call	0x380e	; 0x380e <RFM22TXFIFO()>
    }

#if defined(ENABLE_BOILER_HUB)
  if(hubMode)
    1f50:	11 23       	and	r17, r17
    1f52:	21 f0       	breq	.+8      	; 0x1f5c <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x5e>
    { SetupToEavesdropOnFHT8V(); } // Revert to hub listening...
    1f54:	80 e0       	ldi	r24, 0x00	; 0
    1f56:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <SetupToEavesdropOnFHT8V(bool)>
    1f5a:	02 c0       	rjmp	.+4      	; 0x1f60 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x62>
  else
#endif
    { RFM22ModeStandbyAndClearState(); } // Go to standby to conserve energy.
    1f5c:	0e 94 bf 1b 	call	0x377e	; 0x377e <RFM22ModeStandbyAndClearState()>
  }
    1f60:	df 91       	pop	r29
    1f62:	cf 91       	pop	r28
    1f64:	1f 91       	pop	r17
    1f66:	0f 91       	pop	r16
    1f68:	08 95       	ret

00001f6a <sleepUntilSubCycleTimeOptionalRX(unsigned char)>:
// Returns true if OK, false if specified time already passed or significantly missed (eg by more than one tick).
// May use a combination of techniques to hit the required time.
// Requesting a sleep until at or near the end of the cycle risks overrun and may be unwise.
// Using this to sleep less then 2 ticks may prove unreliable as the RTC rolls on underneath...
// This is NOT intended to be used to sleep over the end of a minor cycle. 
static void sleepUntilSubCycleTimeOptionalRX(const uint8_t sleepUntil)
    1f6a:	8f 92       	push	r8
    1f6c:	9f 92       	push	r9
    1f6e:	af 92       	push	r10
    1f70:	bf 92       	push	r11
    1f72:	cf 92       	push	r12
    1f74:	df 92       	push	r13
    1f76:	ef 92       	push	r14
    1f78:	ff 92       	push	r15
    1f7a:	0f 93       	push	r16
    1f7c:	1f 93       	push	r17
    1f7e:	98 2e       	mov	r9, r24
    {
#if defined(ENABLE_BOILER_HUB)
    const bool hubMode = inHubMode();
    1f80:	0e 94 a0 07 	call	0xf40	; 0xf40 <getMinBoilerOnMinutes()>
    1f84:	88 2e       	mov	r8, r24
    1f86:	88 23       	and	r24, r24
    1f88:	a9 f1       	breq	.+106    	; 0x1ff4 <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x8a>
    1f8a:	88 24       	eor	r8, r8
    1f8c:	83 94       	inc	r8
      {
#if 0 && defined(DEBUG)
      DEBUG_SERIAL_PRINT_FLASHSTRING("TXwait");
#endif
      // Only do nap+poll if lots of time left.
      while(sleepUntil > fmax(getSubCycleTime() + (50/SUBCYCLE_TICK_MS_RD), GSCT_MAX))
    1f8e:	89 2d       	mov	r24, r9
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	5c 01       	movw	r10, r24
    1f94:	cc 24       	eor	r12, r12
    1f96:	b7 fc       	sbrc	r11, 7
    1f98:	c0 94       	com	r12
    1f9a:	dc 2c       	mov	r13, r12
    1f9c:	06 c0       	rjmp	.+12     	; 0x1faa <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x40>
//   * force if true then force full poll on every call (ie do not internally rate-limit)
// NOTE: implementation may not be in power-management module.
bool pollIO(bool force = false);
// Nap productively polling I/O, etc, across the system while spending time in low-power mode if possible.
// Typically sleeps for about 30ms; tries to allow ealier wakeup if interrupt is received, etc.
static void inline nap30AndPoll() { nap(WDTO_30MS); pollIO(true); }
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	0e 94 29 16 	call	0x2c52	; 0x2c52 <nap(signed char)>
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	0e 94 7c 28 	call	0x50f8	; 0x50f8 <pollIO(bool)>
    1faa:	60 91 b2 00 	lds	r22, 0x00B2
    1fae:	70 e0       	ldi	r23, 0x00	; 0
    1fb0:	69 5f       	subi	r22, 0xF9	; 249
    1fb2:	7f 4f       	sbci	r23, 0xFF	; 255
    1fb4:	88 27       	eor	r24, r24
    1fb6:	77 fd       	sbrc	r23, 7
    1fb8:	80 95       	com	r24
    1fba:	98 2f       	mov	r25, r24
    1fbc:	0e 94 31 38 	call	0x7062	; 0x7062 <__floatsisf>
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	4f e7       	ldi	r20, 0x7F	; 127
    1fc6:	53 e4       	ldi	r21, 0x43	; 67
    1fc8:	0e 94 6c 38 	call	0x70d8	; 0x70d8 <fmax>
    1fcc:	7b 01       	movw	r14, r22
    1fce:	8c 01       	movw	r16, r24
    1fd0:	c6 01       	movw	r24, r12
    1fd2:	b5 01       	movw	r22, r10
    1fd4:	0e 94 31 38 	call	0x7062	; 0x7062 <__floatsisf>
    1fd8:	a8 01       	movw	r20, r16
    1fda:	97 01       	movw	r18, r14
    1fdc:	0e 94 d8 38 	call	0x71b0	; 0x71b0 <__gesf2>
    1fe0:	18 16       	cp	r1, r24
    1fe2:	ec f2       	brlt	.-70     	; 0x1f9e <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x34>
    1fe4:	03 c0       	rjmp	.+6      	; 0x1fec <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x82>
        { nap30AndPoll(); } // Assumed ~30ms sleep max.
      // Poll in remaining time without nap.
      while(sleepUntil > getSubCycleTime())
        { pollIO(); }
    1fe6:	80 e0       	ldi	r24, 0x00	; 0
    1fe8:	0e 94 7c 28 	call	0x50f8	; 0x50f8 <pollIO(bool)>
#endif
      // Only do nap+poll if lots of time left.
      while(sleepUntil > fmax(getSubCycleTime() + (50/SUBCYCLE_TICK_MS_RD), GSCT_MAX))
        { nap30AndPoll(); } // Assumed ~30ms sleep max.
      // Poll in remaining time without nap.
      while(sleepUntil > getSubCycleTime())
    1fec:	80 91 b2 00 	lds	r24, 0x00B2
    1ff0:	89 15       	cp	r24, r9
    1ff2:	c8 f3       	brcs	.-14     	; 0x1fe6 <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x7c>
#endif
      }
#endif

    // Sleep until exactly the right time.
    sleepUntilSubCycleTime(sleepUntil);
    1ff4:	89 2d       	mov	r24, r9
    1ff6:	0e 94 78 19 	call	0x32f0	; 0x32f0 <sleepUntilSubCycleTime(unsigned char)>

#if defined(ENABLE_BOILER_HUB)
    // Final quick poll for RX activity.
    if(hubMode) { FHT8VCallForHeatPoll(); }
    1ffa:	88 20       	and	r8, r8
    1ffc:	11 f0       	breq	.+4      	; 0x2002 <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x98>
    1ffe:	0e 94 56 0e 	call	0x1cac	; 0x1cac <FHT8VCallForHeatPoll()>
#endif
    }
    2002:	1f 91       	pop	r17
    2004:	0f 91       	pop	r16
    2006:	ff 90       	pop	r15
    2008:	ef 90       	pop	r14
    200a:	df 90       	pop	r13
    200c:	cf 90       	pop	r12
    200e:	bf 90       	pop	r11
    2010:	af 90       	pop	r10
    2012:	9f 90       	pop	r9
    2014:	8f 90       	pop	r8
    2016:	08 95       	ret

00002018 <valveSettingTX(bool)>:
    { RFM22ModeStandbyAndClearState(); } // Go to standby to conserve energy.
  }

// Send current (assumed valve-setting) command and adjust FHT8V_isValveOpen as appropriate.
// Only appropriate when the command is going to be heard by the FHT8V valve itself, not just the hub.
static void valveSettingTX(const bool allowDoubleTX)
    2018:	1f 93       	push	r17
    201a:	68 2f       	mov	r22, r24
  {
  // Transmit correct valve-setting command that should already be in the buffer...
  FHT8VTXFHTQueueAndSendCmd(FHT8VTXCommandArea, allowDoubleTX);
    201c:	82 e8       	ldi	r24, 0x82	; 130
    201e:	91 e0       	ldi	r25, 0x01	; 1
    2020:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)>

// Call just after TX of valve-setting command which is assumed to reflect current TRVPercentOpen state.
// This helps avoiding calling for heat from a central boiler until the valve is really open,
// eg to avoid excess load on (or power wasting in) the circulation pump.
static void setFHT8V_isValveOpen()
  { FHT8V_isValveOpen = (getTRVPercentOpen() >= getMinValvePcReallyOpen()); }
    2024:	0e 94 9a 07 	call	0xf34	; 0xf34 <getTRVPercentOpen()>
    2028:	18 2f       	mov	r17, r24
    202a:	0e 94 1c 08 	call	0x1038	; 0x1038 <getMinValvePcReallyOpen()>
    202e:	10 92 be 01 	sts	0x01BE, r1
    2032:	18 17       	cp	r17, r24
    2034:	18 f0       	brcs	.+6      	; 0x203c <valveSettingTX(bool)+0x24>
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	80 93 be 01 	sts	0x01BE, r24
  {
  // Transmit correct valve-setting command that should already be in the buffer...
  FHT8VTXFHTQueueAndSendCmd(FHT8VTXCommandArea, allowDoubleTX);
  // Indicate state that valve should now actually be in (or physically moving to)...
  setFHT8V_isValveOpen();
  }
    203c:	1f 91       	pop	r17
    203e:	08 95       	ret

00002040 <FHT8VSetHC2(unsigned char)>:
  eeprom_smart_erase_byte((uint8_t*)EE_START_FHT8V_HC2);
  }

// Set (non-volatile) HC1 and HC2 for single/primary FHT8V wireless valve under control.
void FHT8VSetHC1(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC1, hc); }
void FHT8VSetHC2(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC2, hc); }
    2040:	68 2f       	mov	r22, r24
    2042:	81 e1       	ldi	r24, 0x11	; 17
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	0e 94 ca 0b 	call	0x1794	; 0x1794 <eeprom_smart_update_byte(unsigned char*, unsigned char)>
    204a:	08 95       	ret

0000204c <FHT8VSetHC1(unsigned char)>:
  eeprom_smart_erase_byte((uint8_t*)EE_START_FHT8V_HC1);
  eeprom_smart_erase_byte((uint8_t*)EE_START_FHT8V_HC2);
  }

// Set (non-volatile) HC1 and HC2 for single/primary FHT8V wireless valve under control.
void FHT8VSetHC1(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC1, hc); }
    204c:	68 2f       	mov	r22, r24
    204e:	80 e1       	ldi	r24, 0x10	; 16
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	0e 94 ca 0b 	call	0x1794	; 0x1794 <eeprom_smart_update_byte(unsigned char*, unsigned char)>
    2056:	08 95       	ret

00002058 <FHT8VClearHC()>:
  }

// Clear both housecode parts (and thus disable local valve).
void FHT8VClearHC()
  {
  eeprom_smart_erase_byte((uint8_t*)EE_START_FHT8V_HC1);
    2058:	80 e1       	ldi	r24, 0x10	; 16
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	0e 94 a0 0b 	call	0x1740	; 0x1740 <eeprom_smart_erase_byte(unsigned char*)>
  eeprom_smart_erase_byte((uint8_t*)EE_START_FHT8V_HC2);
    2060:	81 e1       	ldi	r24, 0x11	; 17
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	0e 94 a0 0b 	call	0x1740	; 0x1740 <eeprom_smart_erase_byte(unsigned char*)>
  }
    2068:	08 95       	ret

0000206a <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)>:
//   * trailer  if not null then a stats trailer is appended, built from that info plus a CRC
//   * command  on entry hc1, hc2 (and addresss if used) must be set correctly, this sets the command and extension; never NULL
// The generated command frame can be resent indefinitely.
// The output buffer used must be (at least) FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE bytes.
// Returns pointer to the terminating 0xff on exit.
uint8_t *FHT8VCreateValveSetCmdFrameHT_r(uint8_t *const bptrInitial, const bool doHeader, fht8v_msg_t *const command, const uint8_t TRVPercentOpen, const FullStatsMessageCore_t *trailer)
    206a:	ef 92       	push	r14
    206c:	ff 92       	push	r15
    206e:	0f 93       	push	r16
    2070:	1f 93       	push	r17
    2072:	cf 93       	push	r28
    2074:	df 93       	push	r29
    2076:	7c 01       	movw	r14, r24
    2078:	36 2f       	mov	r19, r22
    207a:	ea 01       	movw	r28, r20
  {
  uint8_t *bptr = bptrInitial;

  command->command = 0x26;
    207c:	86 e2       	ldi	r24, 0x26	; 38
    207e:	8a 83       	std	Y+2, r24	; 0x02
  command->extension = (TRVPercentOpen * 255) / 100;
    2080:	8f ef       	ldi	r24, 0xFF	; 255
    2082:	28 9f       	mul	r18, r24
    2084:	c0 01       	movw	r24, r0
    2086:	11 24       	eor	r1, r1
    2088:	64 e6       	ldi	r22, 0x64	; 100
    208a:	70 e0       	ldi	r23, 0x00	; 0
    208c:	0e 94 0f 39 	call	0x721e	; 0x721e <__divmodhi4>
    2090:	6b 83       	std	Y+3, r22	; 0x03

  // Add RFM22/32-friendly pre-preamble if requested, eg when calling for heat from the boiler (TRV actually open).
  // NOTE: this requires more buffer space.
  if(doHeader)
    2092:	33 23       	and	r19, r19
    2094:	11 f4       	brne	.+4      	; 0x209a <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)+0x30>
    2096:	c7 01       	movw	r24, r14
    2098:	09 c0       	rjmp	.+18     	; 0x20ac <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)+0x42>
    {
    memset(bptr, RFM22_PREAMBLE_BYTE, RFM22_PREAMBLE_BYTES);
    209a:	c7 01       	movw	r24, r14
    209c:	6a ea       	ldi	r22, 0xAA	; 170
    209e:	70 e0       	ldi	r23, 0x00	; 0
    20a0:	45 e0       	ldi	r20, 0x05	; 5
    20a2:	50 e0       	ldi	r21, 0x00	; 0
    20a4:	0e 94 12 04 	call	0x824	; 0x824 <memset>
    bptr += RFM22_PREAMBLE_BYTES;
    20a8:	c7 01       	movw	r24, r14
    20aa:	05 96       	adiw	r24, 0x05	; 5
    }

  bptr = FHT8VCreate200usBitStreamBptr(bptr, command);
    20ac:	be 01       	movw	r22, r28
    20ae:	0e 94 67 0c 	call	0x18ce	; 0x18ce <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>
    20b2:	ec 01       	movw	r28, r24

  if(NULL != trailer)
    20b4:	01 15       	cp	r16, r1
    20b6:	11 05       	cpc	r17, r1
    20b8:	f9 f0       	breq	.+62     	; 0x20f8 <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)+0x8e>
    {
    // As bandwidth optimisation just write minimal trailer if only temp&power available.
    if(trailer->containsTempAndPower && 
    20ba:	f8 01       	movw	r30, r16
    20bc:	80 81       	ld	r24, Z
    20be:	81 ff       	sbrs	r24, 1
    20c0:	0e c0       	rjmp	.+28     	; 0x20de <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)+0x74>
    20c2:	80 fd       	sbrc	r24, 0
    20c4:	0c c0       	rjmp	.+24     	; 0x20de <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)+0x74>
    20c6:	82 fd       	sbrc	r24, 2
    20c8:	0a c0       	rjmp	.+20     	; 0x20de <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)+0x74>
       !trailer->containsID && !trailer->containsAmbL)
      {
      writeTrailingMinimalStatsPayload(bptr, &(trailer->tempAndPower));
    20ca:	0d 5f       	subi	r16, 0xFD	; 253
    20cc:	1f 4f       	sbci	r17, 0xFF	; 255
    20ce:	ce 01       	movw	r24, r28
    20d0:	b8 01       	movw	r22, r16
    20d2:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <writeTrailingMinimalStatsPayload(unsigned char*, trailingMinimalStatsPayload const*)>
      bptr += 3;
    20d6:	23 96       	adiw	r28, 0x03	; 3
      *bptr = (uint8_t)0xff; // Terminate TX bytes.
    20d8:	8f ef       	ldi	r24, 0xFF	; 255
    20da:	88 83       	st	Y, r24
    20dc:	0d c0       	rjmp	.+26     	; 0x20f8 <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)+0x8e>
      }
    else
      {
      // Assume enough space in buffer for largest possible stats message.
      uint8_t * const tail = encodeFullStatsMessageCore(bptr, FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE - (bptr - bptrInitial), getStatsTXLevel(), false, trailer);
    20de:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <getStatsTXLevel()>
    20e2:	ac 01       	movw	r20, r24
    20e4:	6e 2d       	mov	r22, r14
    20e6:	64 5c       	subi	r22, 0xC4	; 196
    20e8:	6c 1b       	sub	r22, r28
    20ea:	ce 01       	movw	r24, r28
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	0e 94 a0 14 	call	0x2940	; 0x2940 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)>
      if(NULL != tail) { bptr = tail; } // Encoding should not actually fail, but this copes gracefully if so!
    20f2:	00 97       	sbiw	r24, 0x00	; 0
    20f4:	09 f0       	breq	.+2      	; 0x20f8 <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)+0x8e>
    20f6:	ec 01       	movw	r28, r24
      }
    }

#if 1 && defined(DEBUG)
  // Check that the buffer end was not overrun.
  if(bptr - bptrInitial >= FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE) { panic(F("TX gen too large")); }
    20f8:	ce 01       	movw	r24, r28
    20fa:	8e 19       	sub	r24, r14
    20fc:	9f 09       	sbc	r25, r15
    20fe:	cc 97       	sbiw	r24, 0x3c	; 60
    2100:	24 f0       	brlt	.+8      	; 0x210a <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)+0xa0>
    2102:	8c e7       	ldi	r24, 0x7C	; 124
    2104:	91 e0       	ldi	r25, 0x01	; 1
    2106:	0e 94 de 2c 	call	0x59bc	; 0x59bc <panic(__FlashStringHelper const*)>
#endif

  return(bptr);
  }
    210a:	ce 01       	movw	r24, r28
    210c:	df 91       	pop	r29
    210e:	cf 91       	pop	r28
    2110:	1f 91       	pop	r17
    2112:	0f 91       	pop	r16
    2114:	ff 90       	pop	r15
    2116:	ef 90       	pop	r14
    2118:	08 95       	ret

0000211a <FHT8VCreateValveSetCmdFrame_r(unsigned char*, fht8v_msg_t*, unsigned char)>:
//
// Implicitly decides whether to add optional header and trailer components.
//
// NOTE: with SUPPORT_TEMP_TX defined will also insert trailing stats payload where appropriate.
// Also reports local stats as if remote.
uint8_t *FHT8VCreateValveSetCmdFrame_r(uint8_t *const bptr, fht8v_msg_t *command, const uint8_t TRVPercentOpen)
    211a:	bf 92       	push	r11
    211c:	cf 92       	push	r12
    211e:	df 92       	push	r13
    2120:	ef 92       	push	r14
    2122:	ff 92       	push	r15
    2124:	0f 93       	push	r16
    2126:	1f 93       	push	r17
    2128:	df 93       	push	r29
    212a:	cf 93       	push	r28
    212c:	cd b7       	in	r28, 0x3d	; 61
    212e:	de b7       	in	r29, 0x3e	; 62
    2130:	27 97       	sbiw	r28, 0x07	; 7
    2132:	0f b6       	in	r0, 0x3f	; 63
    2134:	f8 94       	cli
    2136:	de bf       	out	0x3e, r29	; 62
    2138:	0f be       	out	0x3f, r0	; 63
    213a:	cd bf       	out	0x3d, r28	; 61
    213c:	7c 01       	movw	r14, r24
    213e:	6b 01       	movw	r12, r22
    2140:	b4 2e       	mov	r11, r20
  {
  const bool etmsp = enableTrailingMinimalStatsPayload();
    2142:	0e 94 7f 12 	call	0x24fe	; 0x24fe <enableTrailingMinimalStatsPayload()>
  // OR if adding a trailer that the hub should see.
  // NOTE: this requires more buffer space.
  const bool doHeader = etmsp
#if defined(RFM22_SYNC_BCFH)
  // NOTE: the percentage-open threshold to call for heat from the boiler is set to allow the valve to open significantly, etc.
      || (TRVPercentOpen >= getMinValvePcReallyOpen())
    2146:	88 23       	and	r24, r24
    2148:	49 f4       	brne	.+18     	; 0x215c <FHT8VCreateValveSetCmdFrame_r(unsigned char*, fht8v_msg_t*, unsigned char)+0x42>
    214a:	0e 94 1c 08 	call	0x1038	; 0x1038 <getMinValvePcReallyOpen()>
    214e:	60 e0       	ldi	r22, 0x00	; 0
    2150:	b8 16       	cp	r11, r24
    2152:	08 f0       	brcs	.+2      	; 0x2156 <FHT8VCreateValveSetCmdFrame_r(unsigned char*, fht8v_msg_t*, unsigned char)+0x3c>
    2154:	61 e0       	ldi	r22, 0x01	; 1
    2156:	00 e0       	ldi	r16, 0x00	; 0
    2158:	10 e0       	ldi	r17, 0x00	; 0
    215a:	0e c0       	rjmp	.+28     	; 0x2178 <FHT8VCreateValveSetCmdFrame_r(unsigned char*, fht8v_msg_t*, unsigned char)+0x5e>
//    trailer.tempC16 = getTemperatureC16(); // Use last value read.
//    }
  FullStatsMessageCore_t trailer;
  if(doTrailer)
    {
    populateCoreStats(&trailer);
    215c:	8e 01       	movw	r16, r28
    215e:	0f 5f       	subi	r16, 0xFF	; 255
    2160:	1f 4f       	sbci	r17, 0xFF	; 255
    2162:	c8 01       	movw	r24, r16
    2164:	0e 94 2b 08 	call	0x1056	; 0x1056 <populateCoreStats(FullStatsMessageCore*)>
    // Record stats as if remote, but secure, and with ID.
    recordCoreStats(true, &trailer);
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	b8 01       	movw	r22, r16
    216c:	0e 94 64 13 	call	0x26c8	; 0x26c8 <recordCoreStats(bool, FullStatsMessageCore const*)>
    // Ensure that no ID is encoded in the message sent on the air since it would be a repeat from the FHT8V frame.
    trailer.containsID = false;
    2170:	89 81       	ldd	r24, Y+1	; 0x01
    2172:	8e 7f       	andi	r24, 0xFE	; 254
    2174:	89 83       	std	Y+1, r24	; 0x01
    2176:	61 e0       	ldi	r22, 0x01	; 1
    }

  return(FHT8VCreateValveSetCmdFrameHT_r(bptr, doHeader, command, TRVPercentOpen, (doTrailer ? &trailer : NULL)));
    2178:	c7 01       	movw	r24, r14
    217a:	a6 01       	movw	r20, r12
    217c:	2b 2d       	mov	r18, r11
    217e:	0e 94 35 10 	call	0x206a	; 0x206a <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)>
  }
    2182:	27 96       	adiw	r28, 0x07	; 7
    2184:	0f b6       	in	r0, 0x3f	; 63
    2186:	f8 94       	cli
    2188:	de bf       	out	0x3e, r29	; 62
    218a:	0f be       	out	0x3f, r0	; 63
    218c:	cd bf       	out	0x3d, r28	; 61
    218e:	cf 91       	pop	r28
    2190:	df 91       	pop	r29
    2192:	1f 91       	pop	r17
    2194:	0f 91       	pop	r16
    2196:	ff 90       	pop	r15
    2198:	ef 90       	pop	r14
    219a:	df 90       	pop	r13
    219c:	cf 90       	pop	r12
    219e:	bf 90       	pop	r11
    21a0:	08 95       	ret

000021a2 <FHT8VCreateValveSetCmdFrame()>:
// Create FHT8V TRV outgoing valve-setting command frame (terminated with 0xff) in the shared TX buffer.
// The getTRVPercentOpen() result is used to generate the frame.
// HC1 and HC2 are fetched with the FHT8VGetHC1() and FHT8VGetHC2() calls, and address is always 0.
// The generated command frame can be resent indefinitely.
// If no valve is set up then this may simply terminate an empty buffer with 0xff.
void FHT8VCreateValveSetCmdFrame()
    21a2:	df 93       	push	r29
    21a4:	cf 93       	push	r28
    21a6:	00 d0       	rcall	.+0      	; 0x21a8 <FHT8VCreateValveSetCmdFrame()+0x6>
    21a8:	00 d0       	rcall	.+0      	; 0x21aa <FHT8VCreateValveSetCmdFrame()+0x8>
    21aa:	cd b7       	in	r28, 0x3d	; 61
    21ac:	de b7       	in	r29, 0x3e	; 62
  {
  if(!localFHT8VTRVEnabled())
    21ae:	0e 94 c6 0c 	call	0x198c	; 0x198c <localFHT8VTRVEnabled()>
    21b2:	88 23       	and	r24, r24
    21b4:	21 f4       	brne	.+8      	; 0x21be <FHT8VCreateValveSetCmdFrame()+0x1c>
    {
    // Ensure that buffer is terminated, though empty.
    FHT8VTXCommandArea[0] = 0xff;
    21b6:	8f ef       	ldi	r24, 0xFF	; 255
    21b8:	80 93 82 01 	sts	0x0182, r24
    21bc:	1c c0       	rjmp	.+56     	; 0x21f6 <FHT8VCreateValveSetCmdFrame()+0x54>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    21be:	f9 99       	sbic	0x1f, 1	; 31
    21c0:	fe cf       	rjmp	.-4      	; 0x21be <FHT8VCreateValveSetCmdFrame()+0x1c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    21c2:	80 e1       	ldi	r24, 0x10	; 16
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	92 bd       	out	0x22, r25	; 34
    21c8:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    21ca:	f8 9a       	sbi	0x1f, 0	; 31
    21cc:	20 b5       	in	r18, 0x20	; 32
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    21ce:	f9 99       	sbic	0x1f, 1	; 31
    21d0:	fe cf       	rjmp	.-4      	; 0x21ce <FHT8VCreateValveSetCmdFrame()+0x2c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    21d2:	81 e1       	ldi	r24, 0x11	; 17
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	92 bd       	out	0x22, r25	; 34
    21d8:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    21da:	f8 9a       	sbi	0x1f, 0	; 31
    21dc:	80 b5       	in	r24, 0x20	; 32
    return;
    }

  fht8v_msg_t command;
  command.hc1 = FHT8VGetHC1();
  command.hc2 = FHT8VGetHC2();
    21de:	8a 83       	std	Y+2, r24	; 0x02
    FHT8VTXCommandArea[0] = 0xff;
    return;
    }

  fht8v_msg_t command;
  command.hc1 = FHT8VGetHC1();
    21e0:	29 83       	std	Y+1, r18	; 0x01
  command.hc2 = FHT8VGetHC2();
#ifdef FHT8V_ADR_USED
  command.address = 0;
#endif

  FHT8VCreateValveSetCmdFrame_r(FHT8VTXCommandArea, &command, getTRVPercentOpen());
    21e2:	0e 94 9a 07 	call	0xf34	; 0xf34 <getTRVPercentOpen()>
    21e6:	48 2f       	mov	r20, r24
    21e8:	82 e8       	ldi	r24, 0x82	; 130
    21ea:	91 e0       	ldi	r25, 0x01	; 1
    21ec:	be 01       	movw	r22, r28
    21ee:	6f 5f       	subi	r22, 0xFF	; 255
    21f0:	7f 4f       	sbci	r23, 0xFF	; 255
    21f2:	0e 94 8d 10 	call	0x211a	; 0x211a <FHT8VCreateValveSetCmdFrame_r(unsigned char*, fht8v_msg_t*, unsigned char)>
  }
    21f6:	0f 90       	pop	r0
    21f8:	0f 90       	pop	r0
    21fa:	0f 90       	pop	r0
    21fc:	0f 90       	pop	r0
    21fe:	cf 91       	pop	r28
    2200:	df 91       	pop	r29
    2202:	08 95       	ret

00002204 <doSync(bool)>:
    }

// Run the algorithm to get in sync with the receiver.
// Uses halfSecondCount.
// Iff this returns true then a(nother) call FHT8VPollSyncAndTX_Next() at or before each 0.5s from the cycle start should be made.
static bool doSync(const bool allowDoubleTX)
    2204:	1f 93       	push	r17
    2206:	df 93       	push	r29
    2208:	cf 93       	push	r28
    220a:	00 d0       	rcall	.+0      	; 0x220c <doSync(bool)+0x8>
    220c:	00 d0       	rcall	.+0      	; 0x220e <doSync(bool)+0xa>
    220e:	cd b7       	in	r28, 0x3d	; 61
    2210:	de b7       	in	r29, 0x3e	; 62
    2212:	18 2f       	mov	r17, r24
  {
  // Do not attempt sync at all (and thus do not attempt any other TX) if local FHT8V valve disabled.
  if(!localFHT8VTRVEnabled())
    2214:	0e 94 c6 0c 	call	0x198c	; 0x198c <localFHT8VTRVEnabled()>
    2218:	88 23       	and	r24, r24
    221a:	19 f4       	brne	.+6      	; 0x2222 <doSync(bool)+0x1e>
    { syncedWithFHT8V = false; return(false); }
    221c:	10 92 7f 01 	sts	0x017F, r1
    2220:	a8 c0       	rjmp	.+336    	; 0x2372 <doSync(bool)+0x16e>

  if(0 == syncStateFHT8V)
    2222:	80 91 81 01 	lds	r24, 0x0181
    2226:	88 23       	and	r24, r24
    2228:	61 f4       	brne	.+24     	; 0x2242 <doSync(bool)+0x3e>
    {
    // Starting sync process.
    syncStateFHT8V = 241;
    222a:	81 ef       	ldi	r24, 0xF1	; 241
    222c:	80 93 81 01 	sts	0x0181, r24
#if 1 && defined(DEBUG)
    DEBUG_SERIAL_TIMESTAMP();
    2230:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <_debug_serial_timestamp()>
    DEBUG_SERIAL_PRINT(' ');
    2234:	80 e2       	ldi	r24, 0x20	; 32
    2236:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <serialPrintAndFlush(char)>
    //DEBUG_SERIAL_PRINTLN_FLASHSTRING("FHT8V syncing...");
#endif
    serialPrintlnAndFlush(F("FHT8V SYNC..."));
    223a:	8f e2       	ldi	r24, 0x2F	; 47
    223c:	91 e0       	ldi	r25, 0x01	; 1
    223e:	0e 94 55 20 	call	0x40aa	; 0x40aa <serialPrintlnAndFlush(__FlashStringHelper const*)>
    }

  if(syncStateFHT8V >= 2)
    2242:	20 91 81 01 	lds	r18, 0x0181
    2246:	22 30       	cpi	r18, 0x02	; 2
    2248:	08 f4       	brcc	.+2      	; 0x224c <doSync(bool)+0x48>
    224a:	45 c0       	rjmp	.+138    	; 0x22d6 <doSync(bool)+0xd2>
    {
    // Generate and send sync (command 12) message immediately for odd-numbered ticks, ie once per second.
    if(syncStateFHT8V & 1)
    224c:	20 ff       	sbrs	r18, 0
    224e:	2b c0       	rjmp	.+86     	; 0x22a6 <doSync(bool)+0xa2>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2250:	f9 99       	sbic	0x1f, 1	; 31
    2252:	fe cf       	rjmp	.-4      	; 0x2250 <doSync(bool)+0x4c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2254:	80 e1       	ldi	r24, 0x10	; 16
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	92 bd       	out	0x22, r25	; 34
    225a:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    225c:	f8 9a       	sbi	0x1f, 0	; 31
    225e:	30 b5       	in	r19, 0x20	; 32
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2260:	f9 99       	sbic	0x1f, 1	; 31
    2262:	fe cf       	rjmp	.-4      	; 0x2260 <doSync(bool)+0x5c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2264:	81 e1       	ldi	r24, 0x11	; 17
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	92 bd       	out	0x22, r25	; 34
    226a:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    226c:	f8 9a       	sbi	0x1f, 0	; 31
    226e:	80 b5       	in	r24, 0x20	; 32
      {
      fht8v_msg_t command;
      command.hc1 = FHT8VGetHC1();
      command.hc2 = FHT8VGetHC2();
    2270:	8a 83       	std	Y+2, r24	; 0x02
      command.command = 0x2c; // Command 12, extension byte present.
    2272:	8c e2       	ldi	r24, 0x2C	; 44
    2274:	8b 83       	std	Y+3, r24	; 0x03
      command.extension = syncStateFHT8V;
    2276:	2c 83       	std	Y+4, r18	; 0x04
    {
    // Generate and send sync (command 12) message immediately for odd-numbered ticks, ie once per second.
    if(syncStateFHT8V & 1)
      {
      fht8v_msg_t command;
      command.hc1 = FHT8VGetHC1();
    2278:	39 83       	std	Y+1, r19	; 0x01
      command.hc2 = FHT8VGetHC2();
      command.command = 0x2c; // Command 12, extension byte present.
      command.extension = syncStateFHT8V;
      FHT8VCreate200usBitStreamBptr(FHT8VTXCommandArea, &command);
    227a:	82 e8       	ldi	r24, 0x82	; 130
    227c:	91 e0       	ldi	r25, 0x01	; 1
    227e:	be 01       	movw	r22, r28
    2280:	6f 5f       	subi	r22, 0xFF	; 255
    2282:	7f 4f       	sbci	r23, 0xFF	; 255
    2284:	0e 94 67 0c 	call	0x18ce	; 0x18ce <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>
      if(halfSecondCount > 0)
    2288:	80 91 7e 01 	lds	r24, 0x017E
    228c:	88 23       	and	r24, r24
    228e:	31 f0       	breq	.+12     	; 0x229c <doSync(bool)+0x98>
        { sleepUntilSubCycleTimeOptionalRX((SUB_CYCLE_TICKS_PER_S/2) * halfSecondCount); }
    2290:	82 95       	swap	r24
    2292:	88 0f       	add	r24, r24
    2294:	88 0f       	add	r24, r24
    2296:	80 7c       	andi	r24, 0xC0	; 192
    2298:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <sleepUntilSubCycleTimeOptionalRX(unsigned char)>
      FHT8VTXFHTQueueAndSendCmd(FHT8VTXCommandArea, allowDoubleTX); // SEND SYNC
    229c:	82 e8       	ldi	r24, 0x82	; 130
    229e:	91 e0       	ldi	r25, 0x01	; 1
    22a0:	61 2f       	mov	r22, r17
    22a2:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)>
      DEBUG_SERIAL_PRINTLN();
#endif
      }

    // After penultimate sync TX set up time to sending of final sync command.
    if(1 == --syncStateFHT8V)
    22a6:	80 91 81 01 	lds	r24, 0x0181
    22aa:	81 50       	subi	r24, 0x01	; 1
    22ac:	80 93 81 01 	sts	0x0181, r24
    22b0:	81 30       	cpi	r24, 0x01	; 1
    22b2:	09 f0       	breq	.+2      	; 0x22b6 <doSync(bool)+0xb2>
    22b4:	5d c0       	rjmp	.+186    	; 0x2370 <doSync(bool)+0x16c>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    22b6:	f9 99       	sbic	0x1f, 1	; 31
    22b8:	fe cf       	rjmp	.-4      	; 0x22b6 <doSync(bool)+0xb2>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    22ba:	81 e1       	ldi	r24, 0x11	; 17
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	92 bd       	out	0x22, r25	; 34
    22c0:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    22c2:	f8 9a       	sbi	0x1f, 0	; 31
    22c4:	90 b5       	in	r25, 0x20	; 32
      {
      // Set up timer to sent sync final (0) command
      // with formula: t = 0.5 * (HC2 & 7) + 4 seconds.
      halfSecondsToNextFHT8VTX = (FHT8VGetHC2() & 7) + 8; // Note units of half-seconds for this counter.
      halfSecondsToNextFHT8VTX -= (MAX_HSC - halfSecondCount);
    22c6:	80 91 7e 01 	lds	r24, 0x017E
    22ca:	8b 5f       	subi	r24, 0xFB	; 251
    22cc:	97 70       	andi	r25, 0x07	; 7
    22ce:	89 0f       	add	r24, r25
    22d0:	80 93 80 01 	sts	0x0180, r24
    22d4:	4b c0       	rjmp	.+150    	; 0x236c <doSync(bool)+0x168>
      }
    }

  else // syncStateFHT8V == 1 so waiting to send sync final (0) command...
    {
    if(--halfSecondsToNextFHT8VTX == 0)
    22d6:	80 91 80 01 	lds	r24, 0x0180
    22da:	81 50       	subi	r24, 0x01	; 1
    22dc:	80 93 80 01 	sts	0x0180, r24
    22e0:	88 23       	and	r24, r24
    22e2:	09 f0       	breq	.+2      	; 0x22e6 <doSync(bool)+0xe2>
    22e4:	45 c0       	rjmp	.+138    	; 0x2370 <doSync(bool)+0x16c>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    22e6:	f9 99       	sbic	0x1f, 1	; 31
    22e8:	fe cf       	rjmp	.-4      	; 0x22e6 <doSync(bool)+0xe2>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    22ea:	80 e1       	ldi	r24, 0x10	; 16
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	92 bd       	out	0x22, r25	; 34
    22f0:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    22f2:	f8 9a       	sbi	0x1f, 0	; 31
    22f4:	20 b5       	in	r18, 0x20	; 32
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    22f6:	f9 99       	sbic	0x1f, 1	; 31
    22f8:	fe cf       	rjmp	.-4      	; 0x22f6 <doSync(bool)+0xf2>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    22fa:	81 e1       	ldi	r24, 0x11	; 17
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	92 bd       	out	0x22, r25	; 34
    2300:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2302:	f8 9a       	sbi	0x1f, 0	; 31
    2304:	80 b5       	in	r24, 0x20	; 32
      {
      // Send sync final command.
      fht8v_msg_t command;
      command.hc1 = FHT8VGetHC1();
      command.hc2 = FHT8VGetHC2();
    2306:	8a 83       	std	Y+2, r24	; 0x02
      command.command = 0x20; // Command 0, extension byte present.
    2308:	80 e2       	ldi	r24, 0x20	; 32
    230a:	8b 83       	std	Y+3, r24	; 0x03
      command.extension = 0; // DHD20130324: could set to TRVPercentOpen, but anything other than zero seems to lock up FHT8V-3 units.
    230c:	1c 82       	std	Y+4, r1	; 0x04
      FHT8V_isValveOpen = false; // Note that valve will be closed (0%) upon receipt.
    230e:	10 92 be 01 	sts	0x01BE, r1
    {
    if(--halfSecondsToNextFHT8VTX == 0)
      {
      // Send sync final command.
      fht8v_msg_t command;
      command.hc1 = FHT8VGetHC1();
    2312:	29 83       	std	Y+1, r18	; 0x01
      command.hc2 = FHT8VGetHC2();
      command.command = 0x20; // Command 0, extension byte present.
      command.extension = 0; // DHD20130324: could set to TRVPercentOpen, but anything other than zero seems to lock up FHT8V-3 units.
      FHT8V_isValveOpen = false; // Note that valve will be closed (0%) upon receipt.
      FHT8VCreate200usBitStreamBptr(FHT8VTXCommandArea, &command);      
    2314:	82 e8       	ldi	r24, 0x82	; 130
    2316:	91 e0       	ldi	r25, 0x01	; 1
    2318:	be 01       	movw	r22, r28
    231a:	6f 5f       	subi	r22, 0xFF	; 255
    231c:	7f 4f       	sbci	r23, 0xFF	; 255
    231e:	0e 94 67 0c 	call	0x18ce	; 0x18ce <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>
      if(halfSecondCount > 0) { sleepUntilSubCycleTimeOptionalRX((SUB_CYCLE_TICKS_PER_S/2) * halfSecondCount); }
    2322:	80 91 7e 01 	lds	r24, 0x017E
    2326:	88 23       	and	r24, r24
    2328:	31 f0       	breq	.+12     	; 0x2336 <doSync(bool)+0x132>
    232a:	82 95       	swap	r24
    232c:	88 0f       	add	r24, r24
    232e:	88 0f       	add	r24, r24
    2330:	80 7c       	andi	r24, 0xC0	; 192
    2332:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <sleepUntilSubCycleTimeOptionalRX(unsigned char)>
      FHT8VTXFHTQueueAndSendCmd(FHT8VTXCommandArea, allowDoubleTX); // SEND SYNC FINAL
    2336:	82 e8       	ldi	r24, 0x82	; 130
    2338:	91 e0       	ldi	r25, 0x01	; 1
    233a:	61 2f       	mov	r22, r17
    233c:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)>
    // Note that FHT8VTXCommandArea now does not contain a valid valve-setting command...
#if 1 && defined(DEBUG)
      DEBUG_SERIAL_TIMESTAMP();
    2340:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <_debug_serial_timestamp()>
      DEBUG_SERIAL_PRINT(' ');
    2344:	80 e2       	ldi	r24, 0x20	; 32
    2346:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <serialPrintAndFlush(char)>
      //DEBUG_SERIAL_PRINTLN_FLASHSTRING(" FHT8V SYNC FINAL");
#endif
      serialPrintlnAndFlush(F("FHT8V SYNC FINAL"));
    234a:	8e e1       	ldi	r24, 0x1E	; 30
    234c:	91 e0       	ldi	r25, 0x01	; 1
    234e:	0e 94 55 20 	call	0x40aa	; 0x40aa <serialPrintlnAndFlush(__FlashStringHelper const*)>

      // Assume now in sync...
      syncedWithFHT8V = true;
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	80 93 7f 01 	sts	0x017F, r24
      // On PICAXE there was no time to recompute valve-setting command immediately after SYNC FINAL SEND...
      // Mark buffer as empty to get it filled with the real TRV valve-setting command ASAP.
      //*FHT8VTXCommandArea = 0xff;

      // On ATmega there is plenty of CPU heft to fill command buffer immediately with valve-setting command.
      FHT8VCreateValveSetCmdFrame();
    2358:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <FHT8VCreateValveSetCmdFrame()>

      // Set up correct delay to next TX; no more this minor cycle...
      halfSecondsToNextFHT8VTX = FHT8VTXGapHalfSeconds(command.hc2, halfSecondCount);
    235c:	90 91 7e 01 	lds	r25, 0x017E
    2360:	9d 51       	subi	r25, 0x1D	; 29
    2362:	8a 81       	ldd	r24, Y+2	; 0x02
    2364:	87 70       	andi	r24, 0x07	; 7
    2366:	98 0f       	add	r25, r24
    2368:	90 93 80 01 	sts	0x0180, r25
    236c:	80 e0       	ldi	r24, 0x00	; 0
    236e:	01 c0       	rjmp	.+2      	; 0x2372 <doSync(bool)+0x16e>
      return(false);
    2370:	81 e0       	ldi	r24, 0x01	; 1
    }

  // For simplicity, insist on being called every half-second during sync.
  // TODO: avoid forcing most of these calls to save some CPU/energy and improve responsiveness.
  return(true);
  }
    2372:	0f 90       	pop	r0
    2374:	0f 90       	pop	r0
    2376:	0f 90       	pop	r0
    2378:	0f 90       	pop	r0
    237a:	cf 91       	pop	r28
    237c:	df 91       	pop	r29
    237e:	1f 91       	pop	r17
    2380:	08 95       	ret

00002382 <FHT8VPollSyncAndTX_Next(bool)>:
//
// ALSO MANAGES RX FROM OTHER NODES WHEN ENABLED IN HUB MODE.
//
// Iff this returns false then no further TX slots will be needed
// (and thus this routine need not be called again) on this minor cycle
bool FHT8VPollSyncAndTX_Next(const bool allowDoubleTX)
    2382:	1f 93       	push	r17
    2384:	18 2f       	mov	r17, r24
  {
  ++halfSecondCount; // Reflects count of calls since _First(), ie how many 
    2386:	80 91 7e 01 	lds	r24, 0x017E
    238a:	8f 5f       	subi	r24, 0xFF	; 255
    238c:	80 93 7e 01 	sts	0x017E, r24
#ifdef DEBUG
    if(halfSecondCount > MAX_HSC) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("FHT8VPollSyncAndTX_Next() called too often"); panic(); }
    2390:	84 30       	cpi	r24, 0x04	; 4
    2392:	30 f0       	brcs	.+12     	; 0x23a0 <FHT8VPollSyncAndTX_Next(bool)+0x1e>
    2394:	83 ef       	ldi	r24, 0xF3	; 243
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	0e 94 55 20 	call	0x40aa	; 0x40aa <serialPrintlnAndFlush(__FlashStringHelper const*)>
    239c:	0e 94 cd 2c 	call	0x599a	; 0x599a <panic()>
  return(true); // Need to do further TXes this minor cycle.
#else

  // Give priority to getting in sync over all other tasks, though pass control to them afterwards...
  // NOTE: startup state, or state to force resync is: syncedWithFHT8V = 0 AND syncStateFHT8V = 0
  if(!syncedWithFHT8V) { return(doSync(allowDoubleTX)); }
    23a0:	80 91 7f 01 	lds	r24, 0x017F
    23a4:	88 23       	and	r24, r24
    23a6:	21 f4       	brne	.+8      	; 0x23b0 <FHT8VPollSyncAndTX_Next(bool)+0x2e>
    23a8:	81 2f       	mov	r24, r17
    23aa:	0e 94 02 11 	call	0x2204	; 0x2204 <doSync(bool)>
    23ae:	2d c0       	rjmp	.+90     	; 0x240a <FHT8VPollSyncAndTX_Next(bool)+0x88>

  // TX is due this slot so do it (and no more will be needed this minor cycle).
  if(0 == --halfSecondsToNextFHT8VTX)
    23b0:	80 91 80 01 	lds	r24, 0x0180
    23b4:	81 50       	subi	r24, 0x01	; 1
    23b6:	80 93 80 01 	sts	0x0180, r24
    23ba:	88 23       	and	r24, r24
    23bc:	11 f0       	breq	.+4      	; 0x23c2 <FHT8VPollSyncAndTX_Next(bool)+0x40>
    23be:	81 e0       	ldi	r24, 0x01	; 1
    23c0:	24 c0       	rjmp	.+72     	; 0x240a <FHT8VPollSyncAndTX_Next(bool)+0x88>
    {
    sleepUntilSubCycleTimeOptionalRX((SUB_CYCLE_TICKS_PER_S/2) * halfSecondCount); // Sleep.
    23c2:	80 91 7e 01 	lds	r24, 0x017E
    23c6:	82 95       	swap	r24
    23c8:	88 0f       	add	r24, r24
    23ca:	88 0f       	add	r24, r24
    23cc:	80 7c       	andi	r24, 0xC0	; 192
    23ce:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <sleepUntilSubCycleTimeOptionalRX(unsigned char)>
    valveSettingTX(allowDoubleTX); // Should be heard by valve.
    23d2:	81 2f       	mov	r24, r17
    23d4:	0e 94 0c 10 	call	0x2018	; 0x2018 <valveSettingTX(bool)>
#if 1 && defined(DEBUG)
    DEBUG_SERIAL_TIMESTAMP();
    23d8:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <_debug_serial_timestamp()>
    DEBUG_SERIAL_PRINT(' ');
    23dc:	80 e2       	ldi	r24, 0x20	; 32
    23de:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <serialPrintAndFlush(char)>
    // DEBUG_SERIAL_PRINTLN_FLASHSTRING(" FHT8V TX");
#endif
    serialPrintlnAndFlush(F("FHT8V TX"));
    23e2:	8a ee       	ldi	r24, 0xEA	; 234
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	0e 94 55 20 	call	0x40aa	; 0x40aa <serialPrintlnAndFlush(__FlashStringHelper const*)>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    23ea:	f9 99       	sbic	0x1f, 1	; 31
    23ec:	fe cf       	rjmp	.-4      	; 0x23ea <FHT8VPollSyncAndTX_Next(bool)+0x68>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    23ee:	81 e1       	ldi	r24, 0x11	; 17
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	92 bd       	out	0x22, r25	; 34
    23f4:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    23f6:	f8 9a       	sbi	0x1f, 0	; 31
    23f8:	90 b5       	in	r25, 0x20	; 32

    // Set up correct delay to next TX.
    halfSecondsToNextFHT8VTX = FHT8VTXGapHalfSeconds(FHT8VGetHC2(), halfSecondCount);
    23fa:	80 91 7e 01 	lds	r24, 0x017E
    23fe:	8d 51       	subi	r24, 0x1D	; 29
    2400:	97 70       	andi	r25, 0x07	; 7
    2402:	89 0f       	add	r24, r25
    2404:	80 93 80 01 	sts	0x0180, r24
    2408:	80 e0       	ldi	r24, 0x00	; 0
    }

  // Will need to TX in a following slot in this minor cycle...
  return(true);
#endif
  }
    240a:	1f 91       	pop	r17
    240c:	08 95       	ret

0000240e <FHT8VPollSyncAndTX_First(bool)>:
//
// Iff this returns true then call FHT8VPollSyncAndTX_Next() at or before each 0.5s from the cycle start
// to allow for possible transmissions.
//
// See https://sourceforge.net/p/opentrv/wiki/FHT%20Protocol/ for the underlying protocol.
bool FHT8VPollSyncAndTX_First(const bool allowDoubleTX)
    240e:	1f 93       	push	r17
    2410:	18 2f       	mov	r17, r24
  {
  halfSecondCount = 0;
    2412:	10 92 7e 01 	sts	0x017E, r1
  return(true); // Will need anther TX in slot 2.
#else

  // Give priority to getting in sync over all other tasks, though pass control to them afterwards...
  // NOTE: startup state, or state to force resync is: syncedWithFHT8V = 0 AND syncStateFHT8V = 0
  if(!syncedWithFHT8V) { return(doSync(allowDoubleTX)); }
    2416:	80 91 7f 01 	lds	r24, 0x017F
    241a:	88 23       	and	r24, r24
    241c:	21 f4       	brne	.+8      	; 0x2426 <FHT8VPollSyncAndTX_First(bool)+0x18>
    241e:	81 2f       	mov	r24, r17
    2420:	0e 94 02 11 	call	0x2204	; 0x2204 <doSync(bool)>
    2424:	30 c0       	rjmp	.+96     	; 0x2486 <FHT8VPollSyncAndTX_First(bool)+0x78>

#ifdef DEBUG
   if(0 == halfSecondsToNextFHT8VTX) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("FHT8V hs count 0 too soon"); panic(); }
    2426:	80 91 80 01 	lds	r24, 0x0180
    242a:	88 23       	and	r24, r24
    242c:	31 f4       	brne	.+12     	; 0x243a <FHT8VPollSyncAndTX_First(bool)+0x2c>
    242e:	82 e6       	ldi	r24, 0x62	; 98
    2430:	91 e0       	ldi	r25, 0x01	; 1
    2432:	0e 94 55 20 	call	0x40aa	; 0x40aa <serialPrintlnAndFlush(__FlashStringHelper const*)>
    2436:	0e 94 cd 2c 	call	0x599a	; 0x599a <panic()>
#endif

  // If no TX required in this minor cycle then can return false quickly (having decremented ticks-to-next-TX value suitably).
  if(halfSecondsToNextFHT8VTX > MAX_HSC+1)
    243a:	80 91 80 01 	lds	r24, 0x0180
    243e:	85 30       	cpi	r24, 0x05	; 5
    2440:	10 f0       	brcs	.+4      	; 0x2446 <FHT8VPollSyncAndTX_First(bool)+0x38>
    {
    halfSecondsToNextFHT8VTX -= (MAX_HSC+1);
    2442:	84 50       	subi	r24, 0x04	; 4
    2444:	1d c0       	rjmp	.+58     	; 0x2480 <FHT8VPollSyncAndTX_First(bool)+0x72>
    return(false); // No TX this minor cycle.
    }

  // TX is due this (first) slot so do it (and no more will be needed this minor cycle).
  if(0 == --halfSecondsToNextFHT8VTX)
    2446:	81 50       	subi	r24, 0x01	; 1
    2448:	80 93 80 01 	sts	0x0180, r24
    244c:	88 23       	and	r24, r24
    244e:	11 f0       	breq	.+4      	; 0x2454 <FHT8VPollSyncAndTX_First(bool)+0x46>
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	19 c0       	rjmp	.+50     	; 0x2486 <FHT8VPollSyncAndTX_First(bool)+0x78>
    {
    valveSettingTX(allowDoubleTX); // Should be heard by valve.
    2454:	81 2f       	mov	r24, r17
    2456:	0e 94 0c 10 	call	0x2018	; 0x2018 <valveSettingTX(bool)>
#if 1 && defined(DEBUG)
    DEBUG_SERIAL_TIMESTAMP();
    245a:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <_debug_serial_timestamp()>
    DEBUG_SERIAL_PRINT(' ');
    245e:	80 e2       	ldi	r24, 0x20	; 32
    2460:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <serialPrintAndFlush(char)>
    // DEBUG_SERIAL_PRINTLN_FLASHSTRING(" FHT8V TX");
#endif
    serialPrintlnAndFlush(F("FHT8V TX"));
    2464:	89 e5       	ldi	r24, 0x59	; 89
    2466:	91 e0       	ldi	r25, 0x01	; 1
    2468:	0e 94 55 20 	call	0x40aa	; 0x40aa <serialPrintlnAndFlush(__FlashStringHelper const*)>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    246c:	f9 99       	sbic	0x1f, 1	; 31
    246e:	fe cf       	rjmp	.-4      	; 0x246c <FHT8VPollSyncAndTX_First(bool)+0x5e>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2470:	81 e1       	ldi	r24, 0x11	; 17
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	92 bd       	out	0x22, r25	; 34
    2476:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2478:	f8 9a       	sbi	0x1f, 0	; 31
    247a:	80 b5       	in	r24, 0x20	; 32
    // Set up correct delay to next TX.
    halfSecondsToNextFHT8VTX = FHT8VTXGapHalfSeconds(FHT8VGetHC2(), 0);
    247c:	87 70       	andi	r24, 0x07	; 7
    247e:	8d 51       	subi	r24, 0x1D	; 29
    2480:	80 93 80 01 	sts	0x0180, r24
    2484:	80 e0       	ldi	r24, 0x00	; 0
    }

  // Will need to TX in a following slot in this minor cycle...
  return(true);
#endif
  }
    2486:	1f 91       	pop	r17
    2488:	08 95       	ret

0000248a <getRHpc()>:
#if defined(HUMIDITY_SENSOR_SUPPORT)
// Saved relative humidity % [0,100] or 255 (~0) if not valid/read.
static uint8_t rhpc = 255;
// Measure and return the current relative humidity in %; range [0,100] and 255 for error/unread.
// Always fast.
uint8_t getRHpc() { return(rhpc); }
    248a:	80 91 04 01 	lds	r24, 0x0104
    248e:	08 95       	ret

00002490 <readRHpc()>:
// Measure and return the current relative humidity in %; range [0,100] and 255 for error.
// This may consume significant power and time.
// Probably no need to do this more than (say) once per minute.
uint8_t readRHpc()
  {
  const uint8_t v = Sensor_SHT21_readRHpc();
    2490:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <Sensor_SHT21_readRHpc()>
  rhpc = v;
    2494:	80 93 04 01 	sts	0x0104, r24
  return(v);
  }
    2498:	08 95       	ret

0000249a <verifyHeaderAndCRCForTrailingMinimalStatsPayload(unsigned char const*)>:




// Return true if header/structure and CRC looks valid for (3-byte) buffered stats payload.
bool verifyHeaderAndCRCForTrailingMinimalStatsPayload(uint8_t const *const buf)
    249a:	fc 01       	movw	r30, r24
  {
  return((MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MSBS == ((buf[0]) & MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MASK)) && // Plausible header.
         (0 == (buf[1] & 0x80)) && // Top bit is clear on this byte also.
         (buf[2] == crc7_5B_update(buf[0], buf[1]))); // CRC validates, top bit implicitly zero.
    249c:	30 81       	ld	r19, Z
    249e:	83 2f       	mov	r24, r19
    24a0:	80 7e       	andi	r24, 0xE0	; 224
    24a2:	80 34       	cpi	r24, 0x40	; 64
    24a4:	51 f5       	brne	.+84     	; 0x24fa <verifyHeaderAndCRCForTrailingMinimalStatsPayload(unsigned char const*)+0x60>
    24a6:	81 81       	ldd	r24, Z+1	; 0x01
    24a8:	87 fd       	sbrc	r24, 7
    24aa:	27 c0       	rjmp	.+78     	; 0x24fa <verifyHeaderAndCRCForTrailingMinimalStatsPayload(unsigned char const*)+0x60>
    24ac:	72 81       	ldd	r23, Z+2	; 0x02
    24ae:	60 e8       	ldi	r22, 0x80	; 128
    24b0:	40 e0       	ldi	r20, 0x00	; 0
    24b2:	50 e0       	ldi	r21, 0x00	; 0
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    24b4:	e8 2f       	mov	r30, r24
    24b6:	f0 e0       	ldi	r31, 0x00	; 0
    24b8:	b1 e0       	ldi	r27, 0x01	; 1
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
    24ba:	a7 e3       	ldi	r26, 0x37	; 55
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
    24bc:	83 2f       	mov	r24, r19
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	26 e0       	ldi	r18, 0x06	; 6
    24c2:	96 95       	lsr	r25
    24c4:	87 95       	ror	r24
    24c6:	2a 95       	dec	r18
    24c8:	e1 f7       	brne	.-8      	; 0x24c2 <verifyHeaderAndCRCForTrailingMinimalStatsPayload(unsigned char const*)+0x28>
    24ca:	28 2f       	mov	r18, r24
    24cc:	21 70       	andi	r18, 0x01	; 1
        if(0 != (datum & i)) { bit = !bit; }
    24ce:	86 2f       	mov	r24, r22
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	8e 23       	and	r24, r30
    24d4:	9f 23       	and	r25, r31
    24d6:	89 2b       	or	r24, r25
    24d8:	09 f0       	breq	.+2      	; 0x24dc <verifyHeaderAndCRCForTrailingMinimalStatsPayload(unsigned char const*)+0x42>
    24da:	2b 27       	eor	r18, r27
        crc <<= 1;
    24dc:	33 0f       	add	r19, r19
        if(bit) { crc ^= 0x37; }
    24de:	21 11       	cpse	r18, r1
    24e0:	3a 27       	eor	r19, r26
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
    24e2:	66 95       	lsr	r22
    24e4:	4f 5f       	subi	r20, 0xFF	; 255
    24e6:	5f 4f       	sbci	r21, 0xFF	; 255
    24e8:	48 30       	cpi	r20, 0x08	; 8
    24ea:	51 05       	cpc	r21, r1
    24ec:	39 f7       	brne	.-50     	; 0x24bc <verifyHeaderAndCRCForTrailingMinimalStatsPayload(unsigned char const*)+0x22>
    24ee:	80 e0       	ldi	r24, 0x00	; 0
    24f0:	3f 77       	andi	r19, 0x7F	; 127
    24f2:	73 17       	cp	r23, r19
    24f4:	19 f4       	brne	.+6      	; 0x24fc <verifyHeaderAndCRCForTrailingMinimalStatsPayload(unsigned char const*)+0x62>
    24f6:	81 e0       	ldi	r24, 0x01	; 1
    24f8:	08 95       	ret
// Return true if header/structure and CRC looks valid for (3-byte) buffered stats payload.
bool verifyHeaderAndCRCForTrailingMinimalStatsPayload(uint8_t const *const buf)
  {
  return((MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MSBS == ((buf[0]) & MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MASK)) && // Plausible header.
         (0 == (buf[1] & 0x80)) && // Top bit is clear on this byte also.
         (buf[2] == crc7_5B_update(buf[0], buf[1]))); // CRC validates, top bit implicitly zero.
    24fa:	80 e0       	ldi	r24, 0x00	; 0
  }
    24fc:	08 95       	ret

000024fe <enableTrailingMinimalStatsPayload()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    24fe:	f9 99       	sbic	0x1f, 1	; 31
    2500:	fe cf       	rjmp	.-4      	; 0x24fe <enableTrailingMinimalStatsPayload()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2502:	8c e1       	ldi	r24, 0x1C	; 28
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	92 bd       	out	0x22, r25	; 34
    2508:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    250a:	f8 9a       	sbi	0x1f, 0	; 31
    250c:	80 b5       	in	r24, 0x20	; 32
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	82 30       	cpi	r24, 0x02	; 2
    2512:	08 f4       	brcc	.+2      	; 0x2516 <enableTrailingMinimalStatsPayload()+0x18>
    2514:	91 e0       	ldi	r25, 0x01	; 1
#if !defined(enableTrailingMinimalStatsPayload)
// Returns true if an unencrypted minimal trailing static payload and similar (eg bare stats transmission) is permitted.
// True if the TX_ENABLE value is no higher than stTXmostUnsec.
// Some filtering may be required even if this is true.
// TODO: allow cacheing in RAM for speed.
bool enableTrailingMinimalStatsPayload() { return(eeprom_read_byte((uint8_t *)EE_START_STATS_TX_ENABLE) <= stTXmostUnsec); }
    2516:	89 2f       	mov	r24, r25
    2518:	08 95       	ret

0000251a <sprintfRawSimpleJSONMessage(char*, __FlashStringHelper const*, ...)>:
// This attenmpts to quickly detect an overrun or other gross error
// by checking for the last char being '}', returning a -ve result if not,
// but this check is in no way comprehensive.
// See: http://playground.arduino.cc/Main/Printf
#ifdef F // check to see if F() macro is available
int8_t sprintfRawSimpleJSONMessage(char *buf, const __FlashStringHelper *const  format, ...)
    251a:	ef 92       	push	r14
    251c:	ff 92       	push	r15
    251e:	0f 93       	push	r16
    2520:	1f 93       	push	r17
    2522:	df 93       	push	r29
    2524:	cf 93       	push	r28
    2526:	cd b7       	in	r28, 0x3d	; 61
    2528:	de b7       	in	r29, 0x3e	; 62
    252a:	e9 84       	ldd	r14, Y+9	; 0x09
    252c:	fa 84       	ldd	r15, Y+10	; 0x0a
    252e:	fe 01       	movw	r30, r28
    2530:	3d 96       	adiw	r30, 0x0d	; 13
  va_list ap;
  va_start(ap, format);
  int wrote;
  // The function vsnprintf() writes at most size bytes (including the terminating null byte ('\0')) to str.
#ifdef __AVR__
  wrote = vsnprintf_P(buf, MSG_JSON_MAX_LENGTH-1, (const char *)format, ap); // progmem for AVR
    2532:	c7 01       	movw	r24, r14
    2534:	6e e3       	ldi	r22, 0x3E	; 62
    2536:	70 e0       	ldi	r23, 0x00	; 0
    2538:	4b 85       	ldd	r20, Y+11	; 0x0b
    253a:	5c 85       	ldd	r21, Y+12	; 0x0c
    253c:	9f 01       	movw	r18, r30
    253e:	0e 94 7e 04 	call	0x8fc	; 0x8fc <vsnprintf_P>
    2542:	8c 01       	movw	r16, r24
#else
  wrote = vsnprintf(buf, MSG_JSON_MAX_LENGTH-1, (const char *)format, ap); // for the rest of the world
#endif
  va_end(ap);
  if(wrote < 2) { return(-1); } // Failed: must successfully write at least "{}".
    2544:	82 30       	cpi	r24, 0x02	; 2
    2546:	91 05       	cpc	r25, r1
    2548:	cc f0       	brlt	.+50     	; 0x257c <sprintfRawSimpleJSONMessage(char*, __FlashStringHelper const*, ...)+0x62>
  if('}' != buf[wrote-1])
    254a:	f7 01       	movw	r30, r14
    254c:	e8 0f       	add	r30, r24
    254e:	f9 1f       	adc	r31, r25
    2550:	31 97       	sbiw	r30, 0x01	; 1
    2552:	80 81       	ld	r24, Z
    2554:	8d 37       	cpi	r24, 0x7D	; 125
    2556:	a1 f0       	breq	.+40     	; 0x2580 <sprintfRawSimpleJSONMessage(char*, __FlashStringHelper const*, ...)+0x66>
    {
#if 1 && defined(DEBUG)
    DEBUG_SERIAL_PRINT_FLASHSTRING("raw JSON overrun: ");
    2558:	80 e9       	ldi	r24, 0x90	; 144
    255a:	91 e0       	ldi	r25, 0x01	; 1
    255c:	0e 94 3f 20 	call	0x407e	; 0x407e <serialPrintAndFlush(__FlashStringHelper const*)>
    DEBUG_SERIAL_PRINT(wrote);
    2560:	c8 01       	movw	r24, r16
    2562:	6a e0       	ldi	r22, 0x0A	; 10
    2564:	70 e0       	ldi	r23, 0x00	; 0
    2566:	0e 94 0d 20 	call	0x401a	; 0x401a <serialPrintAndFlush(int, int)>
    DEBUG_SERIAL_PRINT_FLASHSTRING(": ");
    256a:	8d e8       	ldi	r24, 0x8D	; 141
    256c:	91 e0       	ldi	r25, 0x01	; 1
    256e:	0e 94 3f 20 	call	0x407e	; 0x407e <serialPrintAndFlush(__FlashStringHelper const*)>
    DEBUG_SERIAL_PRINT(buf);
    2572:	c7 01       	movw	r24, r14
    2574:	0e 94 29 20 	call	0x4052	; 0x4052 <serialPrintAndFlush(char const*)>
    DEBUG_SERIAL_PRINTLN();
    2578:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <serialPrintlnAndFlush()>
    257c:	8f ef       	ldi	r24, 0xFF	; 255
    257e:	01 c0       	rjmp	.+2      	; 0x2582 <sprintfRawSimpleJSONMessage(char*, __FlashStringHelper const*, ...)+0x68>
#endif
    return(-1); // Failed.
    }
  return(wrote);
    2580:	80 2f       	mov	r24, r16
  }
    2582:	cf 91       	pop	r28
    2584:	df 91       	pop	r29
    2586:	1f 91       	pop	r17
    2588:	0f 91       	pop	r16
    258a:	ff 90       	pop	r15
    258c:	ef 90       	pop	r14
    258e:	08 95       	ret

00002590 <ensureIDCreated(bool)>:
// Coerce any ID bytes to valid values if unset (0xff) or if forced,
// by filling with valid values (0x80--0xfe) from decent entropy gathered on the fly.
// Will moan about invalid values and return false but not attempt to reset,
// eg in case underlying EEPROM cell is worn/failing.
// Returns true iff all values good.
bool ensureIDCreated(const bool force)
    2590:	9f 92       	push	r9
    2592:	af 92       	push	r10
    2594:	bf 92       	push	r11
    2596:	cf 92       	push	r12
    2598:	df 92       	push	r13
    259a:	ef 92       	push	r14
    259c:	ff 92       	push	r15
    259e:	0f 93       	push	r16
    25a0:	1f 93       	push	r17
    25a2:	cf 93       	push	r28
    25a4:	df 93       	push	r29
    25a6:	98 2e       	mov	r9, r24
    25a8:	aa 24       	eor	r10, r10
    25aa:	a3 94       	inc	r10
    25ac:	ee 24       	eor	r14, r14
    25ae:	ff 24       	eor	r15, r15
    25b0:	c4 e1       	ldi	r28, 0x14	; 20
    25b2:	d0 e0       	ldi	r29, 0x00	; 0
    25b4:	0c 2f       	mov	r16, r28
    25b6:	bd 2e       	mov	r11, r29
  {
  bool allGood = true;
  for(uint8_t i = 0; i < EE_LEN_ID; ++i)
    {
    uint8_t * const loc = i + (uint8_t *)EE_START_ID;
    if(force || (0xff == eeprom_read_byte(loc))) // Byte is unset or change is being forced.
    25b8:	99 20       	and	r9, r9
    25ba:	41 f4       	brne	.+16     	; 0x25cc <ensureIDCreated(bool)+0x3c>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    25bc:	f9 99       	sbic	0x1f, 1	; 31
    25be:	fe cf       	rjmp	.-4      	; 0x25bc <ensureIDCreated(bool)+0x2c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    25c0:	d2 bd       	out	0x22, r29	; 34
    25c2:	c1 bd       	out	0x21, r28	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    25c4:	f8 9a       	sbi	0x1f, 0	; 31
    25c6:	80 b5       	in	r24, 0x20	; 32
    25c8:	8f 3f       	cpi	r24, 0xFF	; 255
    25ca:	71 f5       	brne	.+92     	; 0x2628 <ensureIDCreated(bool)+0x98>
        {
        serialPrintAndFlush(F("Setting ID byte "));
    25cc:	8c ec       	ldi	r24, 0xCC	; 204
    25ce:	91 e0       	ldi	r25, 0x01	; 1
    25d0:	0e 94 3f 20 	call	0x407e	; 0x407e <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush(i);
    25d4:	c7 01       	movw	r24, r14
    25d6:	6a e0       	ldi	r22, 0x0A	; 10
    25d8:	70 e0       	ldi	r23, 0x00	; 0
    25da:	0e 94 0d 20 	call	0x401a	; 0x401a <serialPrintAndFlush(int, int)>
        serialPrintAndFlush(F(" ... "));
    25de:	86 ec       	ldi	r24, 0xC6	; 198
    25e0:	91 e0       	ldi	r25, 0x01	; 1
    25e2:	0e 94 3f 20 	call	0x407e	; 0x407e <serialPrintAndFlush(__FlashStringHelper const*)>
        for( ; ; )
          {
          // Try to make decently-randomised 'unique-ish' ID with mixture of sources.
          // Is not confidential, and will be transmitted in the clear.
          // System will typically not have been running long when this is invoked.
          const uint8_t envNoise = ((i & 1) ? readTemperatureC16() : readAmbientLight());
    25e6:	31 e0       	ldi	r19, 0x01	; 1
    25e8:	c3 2e       	mov	r12, r19
    25ea:	d1 2c       	mov	r13, r1
    25ec:	ce 20       	and	r12, r14
    25ee:	df 20       	and	r13, r15
    25f0:	c1 14       	cp	r12, r1
    25f2:	d1 04       	cpc	r13, r1
    25f4:	19 f0       	breq	.+6      	; 0x25fc <ensureIDCreated(bool)+0x6c>
    25f6:	0e 94 a3 20 	call	0x4146	; 0x4146 <readTemperatureC16()>
    25fa:	02 c0       	rjmp	.+4      	; 0x2600 <ensureIDCreated(bool)+0x70>
    25fc:	0e 94 2d 07 	call	0xe5a	; 0xe5a <readAmbientLight()>
    2600:	18 2f       	mov	r17, r24
          const uint8_t newValue = 0x80 | (getSecureRandomByte() ^ envNoise);
    2602:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <getSecureRandomByte()>
    2606:	18 27       	eor	r17, r24
    2608:	10 68       	ori	r17, 0x80	; 128
          if(0xff == newValue) { continue; } // Reject unusable value.
    260a:	1f 3f       	cpi	r17, 0xFF	; 255
    260c:	89 f3       	breq	.-30     	; 0x25f0 <ensureIDCreated(bool)+0x60>
          eeprom_smart_update_byte(loc, newValue);
    260e:	80 2f       	mov	r24, r16
    2610:	9b 2d       	mov	r25, r11
    2612:	61 2f       	mov	r22, r17
    2614:	0e 94 ca 0b 	call	0x1794	; 0x1794 <eeprom_smart_update_byte(unsigned char*, unsigned char)>
          serialPrintAndFlush(newValue, HEX);
    2618:	81 2f       	mov	r24, r17
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	60 e1       	ldi	r22, 0x10	; 16
    261e:	70 e0       	ldi	r23, 0x00	; 0
    2620:	0e 94 0d 20 	call	0x401a	; 0x401a <serialPrintAndFlush(int, int)>
          break;
          }
        serialPrintlnAndFlush();
    2624:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <serialPrintlnAndFlush()>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2628:	f9 99       	sbic	0x1f, 1	; 31
    262a:	fe cf       	rjmp	.-4      	; 0x2628 <ensureIDCreated(bool)+0x98>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    262c:	d2 bd       	out	0x22, r29	; 34
    262e:	c1 bd       	out	0x21, r28	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2630:	f8 9a       	sbi	0x1f, 0	; 31
    2632:	10 b5       	in	r17, 0x20	; 32
        }
    // Validate.
    const uint8_t v2 = eeprom_read_byte(loc);
    if(!validIDByte(v2))
    2634:	81 2f       	mov	r24, r17
    2636:	80 58       	subi	r24, 0x80	; 128
    2638:	8f 37       	cpi	r24, 0x7F	; 127
    263a:	b0 f0       	brcs	.+44     	; 0x2668 <ensureIDCreated(bool)+0xd8>
        {
        allGood = false;
        serialPrintAndFlush(F("Invalid ID byte "));
    263c:	85 eb       	ldi	r24, 0xB5	; 181
    263e:	91 e0       	ldi	r25, 0x01	; 1
    2640:	0e 94 3f 20 	call	0x407e	; 0x407e <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush(i);
    2644:	c7 01       	movw	r24, r14
    2646:	6a e0       	ldi	r22, 0x0A	; 10
    2648:	70 e0       	ldi	r23, 0x00	; 0
    264a:	0e 94 0d 20 	call	0x401a	; 0x401a <serialPrintAndFlush(int, int)>
        serialPrintAndFlush(F(" ... "));
    264e:	8f ea       	ldi	r24, 0xAF	; 175
    2650:	91 e0       	ldi	r25, 0x01	; 1
    2652:	0e 94 3f 20 	call	0x407e	; 0x407e <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush(v2, HEX);
    2656:	81 2f       	mov	r24, r17
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	60 e1       	ldi	r22, 0x10	; 16
    265c:	70 e0       	ldi	r23, 0x00	; 0
    265e:	0e 94 0d 20 	call	0x401a	; 0x401a <serialPrintAndFlush(int, int)>
        serialPrintlnAndFlush();
    2662:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <serialPrintlnAndFlush()>
    2666:	aa 24       	eor	r10, r10
    2668:	08 94       	sec
    266a:	e1 1c       	adc	r14, r1
    266c:	f1 1c       	adc	r15, r1
    266e:	21 96       	adiw	r28, 0x01	; 1
// eg in case underlying EEPROM cell is worn/failing.
// Returns true iff all values good.
bool ensureIDCreated(const bool force)
  {
  bool allGood = true;
  for(uint8_t i = 0; i < EE_LEN_ID; ++i)
    2670:	88 e0       	ldi	r24, 0x08	; 8
    2672:	e8 16       	cp	r14, r24
    2674:	f1 04       	cpc	r15, r1
    2676:	09 f0       	breq	.+2      	; 0x267a <ensureIDCreated(bool)+0xea>
    2678:	9d cf       	rjmp	.-198    	; 0x25b4 <ensureIDCreated(bool)+0x24>
        serialPrintAndFlush(v2, HEX);
        serialPrintlnAndFlush();
        }
     }
  return(allGood);
  }
    267a:	8a 2d       	mov	r24, r10
    267c:	df 91       	pop	r29
    267e:	cf 91       	pop	r28
    2680:	1f 91       	pop	r17
    2682:	0f 91       	pop	r16
    2684:	ff 90       	pop	r15
    2686:	ef 90       	pop	r14
    2688:	df 90       	pop	r13
    268a:	cf 90       	pop	r12
    268c:	bf 90       	pop	r11
    268e:	af 90       	pop	r10
    2690:	9f 90       	pop	r9
    2692:	08 95       	ret

00002694 <getLastCoreStats(FullStatsMessageCore*)>:
    }
  }

// Gets (and clears) the last core stats record received, if any, returning true and filling in the stats struct.
// If no minimal stats record has been received since the last call then the ID will be absent and the rest undefined.
void getLastCoreStats(FullStatsMessageCore_t *stats)
    2694:	fc 01       	movw	r30, r24
  {
#if 0 && defined(DEBUG)
  if(NULL == stats) { panic(); }
#endif
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    2696:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2698:	f8 94       	cli
    {
    if(!coreStats.containsID)
    269a:	80 91 bf 01 	lds	r24, 0x01BF
    269e:	80 fd       	sbrc	r24, 0
    26a0:	04 c0       	rjmp	.+8      	; 0x26aa <getLastCoreStats(FullStatsMessageCore*)+0x16>
      { stats->containsID = false; } // Nothing there; just clear containsID field in response for speed.
    26a2:	80 81       	ld	r24, Z
    26a4:	8e 7f       	andi	r24, 0xFE	; 254
    26a6:	80 83       	st	Z, r24
    26a8:	0d c0       	rjmp	.+26     	; 0x26c4 <getLastCoreStats(FullStatsMessageCore*)+0x30>
    else
      {
      // Copy everything.
      memcpy(stats, (void *)&coreStats, sizeof(*stats));
    26aa:	df 01       	movw	r26, r30
    26ac:	ef eb       	ldi	r30, 0xBF	; 191
    26ae:	f1 e0       	ldi	r31, 0x01	; 1
    26b0:	87 e0       	ldi	r24, 0x07	; 7
    26b2:	01 90       	ld	r0, Z+
    26b4:	0d 92       	st	X+, r0
    26b6:	81 50       	subi	r24, 0x01	; 1
    26b8:	e1 f7       	brne	.-8      	; 0x26b2 <getLastCoreStats(FullStatsMessageCore*)+0x1e>
      coreStats.containsID = false; // Mark stats as read.
    26ba:	80 91 bf 01 	lds	r24, 0x01BF
    26be:	8e 7f       	andi	r24, 0xFE	; 254
    26c0:	80 93 bf 01 	sts	0x01BF, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    26c4:	9f bf       	out	0x3f, r25	; 63
      }
    }
  }
    26c6:	08 95       	ret

000026c8 <recordCoreStats(bool, FullStatsMessageCore const*)>:
  }

// Record core incoming stats; ID must be set as a minimum.
// Is thread/ISR-safe and fast.
// May be backed by a finite-depth queue, even zero-length (ie discarding); usually holds just one item.
void recordCoreStats(const bool secure, const FullStatsMessageCore_t * const stats)
    26c8:	fb 01       	movw	r30, r22
  {
#if 0 && defined(DEBUG)
  if(NULL == payload) { panic(); }
#endif  // TODO
   if(!stats->containsID) { return; } // Ignore if no ID.
    26ca:	80 81       	ld	r24, Z
    26cc:	80 ff       	sbrs	r24, 0
    26ce:	0a c0       	rjmp	.+20     	; 0x26e4 <recordCoreStats(bool, FullStatsMessageCore const*)+0x1c>
   ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    26d0:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    26d2:	f8 94       	cli
    {
    memcpy((void *)&coreStats, stats, sizeof(coreStats));
    26d4:	af eb       	ldi	r26, 0xBF	; 191
    26d6:	b1 e0       	ldi	r27, 0x01	; 1
    26d8:	87 e0       	ldi	r24, 0x07	; 7
    26da:	01 90       	ld	r0, Z+
    26dc:	0d 92       	st	X+, r0
    26de:	81 50       	subi	r24, 0x01	; 1
    26e0:	e1 f7       	brne	.-8      	; 0x26da <recordCoreStats(bool, FullStatsMessageCore const*)+0x12>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    26e2:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    26e4:	08 95       	ret

000026e6 <recordMinimalStats(bool, unsigned char, unsigned char, trailingMinimalStatsPayload const*)>:
static /* volatile */ FullStatsMessageCore_t coreStats; // Start up showing no record set.

// Record minimal incoming stats from given ID (if each byte < 100, then may be FHT8V-compatible house code).
// Is thread/ISR-safe and fast.
// May be backed by a finite-depth queue, even zero-length (ie discarding); usually holds just one item.
void recordMinimalStats(const bool secure, const uint8_t id0, const uint8_t id1, const trailingMinimalStatsPayload_t * const payload)
    26e6:	cf 93       	push	r28
    26e8:	df 93       	push	r29
    26ea:	d9 01       	movw	r26, r18
  {
#if 0 && defined(DEBUG)
  if(NULL == payload) { panic(); }
#endif  // TODO
   ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    26ec:	3f b7       	in	r19, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    26ee:	f8 94       	cli
    26f0:	87 e0       	ldi	r24, 0x07	; 7
    26f2:	ef eb       	ldi	r30, 0xBF	; 191
    26f4:	f1 e0       	ldi	r31, 0x01	; 1
    26f6:	ef 01       	movw	r28, r30
    26f8:	19 92       	st	Y+, r1
    26fa:	8a 95       	dec	r24
    26fc:	e9 f7       	brne	.-6      	; 0x26f8 <recordMinimalStats(bool, unsigned char, unsigned char, trailingMinimalStatsPayload const*)+0x12>
    {
    clearFullStatsMessageCore(&coreStats);
    coreStats.id0 = id0;
    26fe:	60 93 c0 01 	sts	0x01C0, r22
    coreStats.id1 = id1;
    2702:	40 93 c1 01 	sts	0x01C1, r20
    coreStats.containsID = true;
    2706:	20 91 bf 01 	lds	r18, 0x01BF
    270a:	82 2f       	mov	r24, r18
    270c:	81 60       	ori	r24, 0x01	; 1
    270e:	80 93 bf 01 	sts	0x01BF, r24
    memcpy((void *)&coreStats.tempAndPower, payload, sizeof(coreStats.tempAndPower));
    2712:	8d 91       	ld	r24, X+
    2714:	9c 91       	ld	r25, X
    2716:	90 93 c3 01 	sts	0x01C3, r25
    271a:	80 93 c2 01 	sts	0x01C2, r24
    coreStats.containsTempAndPower = true;
    271e:	23 60       	ori	r18, 0x03	; 3
    2720:	20 93 bf 01 	sts	0x01BF, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2724:	3f bf       	out	0x3f, r19	; 63
    }
  }
    2726:	df 91       	pop	r29
    2728:	cf 91       	pop	r28
    272a:	08 95       	ret

0000272c <extractTrailingMinimalStatsPayload(unsigned char const*, trailingMinimalStatsPayload*)>:
#endif
  }

// Extract payload from valid (3-byte) header+payload+CRC into payload struct; only 2 bytes are actually read.
// Input bytes (eg header and check value) must already have been validated.
void extractTrailingMinimalStatsPayload(const uint8_t *const buf, trailingMinimalStatsPayload_t *const payload)
    272c:	0f 93       	push	r16
    272e:	1f 93       	push	r17
    2730:	cf 93       	push	r28
    2732:	df 93       	push	r29
    2734:	ec 01       	movw	r28, r24
    2736:	8b 01       	movw	r16, r22
  {
#ifdef DEBUG
  if(NULL == payload) { panic(); }
    2738:	61 15       	cp	r22, r1
    273a:	71 05       	cpc	r23, r1
    273c:	11 f4       	brne	.+4      	; 0x2742 <extractTrailingMinimalStatsPayload(unsigned char const*, trailingMinimalStatsPayload*)+0x16>
    273e:	0e 94 cd 2c 	call	0x599a	; 0x599a <panic()>
#endif
  payload->powerLow = (0 != (buf[0] & 0x10));
    2742:	88 81       	ld	r24, Y
    2744:	88 0f       	add	r24, r24
    2746:	88 0f       	add	r24, r24
    2748:	88 0f       	add	r24, r24
    274a:	80 78       	andi	r24, 0x80	; 128
    274c:	f8 01       	movw	r30, r16
    274e:	41 81       	ldd	r20, Z+1	; 0x01
    2750:	4f 77       	andi	r20, 0x7F	; 127
    2752:	48 2b       	or	r20, r24
    2754:	41 83       	std	Z+1, r20	; 0x01
  payload->tempC16 = ((((int16_t) buf[1]) << 4) | (buf[0] & 0xf)) + MESSAGING_TRAILING_MINIMAL_STATS_TEMP_BIAS;
    2756:	29 81       	ldd	r18, Y+1	; 0x01
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	54 e0       	ldi	r21, 0x04	; 4
    275c:	22 0f       	add	r18, r18
    275e:	33 1f       	adc	r19, r19
    2760:	5a 95       	dec	r21
    2762:	e1 f7       	brne	.-8      	; 0x275c <extractTrailingMinimalStatsPayload(unsigned char const*, trailingMinimalStatsPayload*)+0x30>
    2764:	88 81       	ld	r24, Y
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	8f 70       	andi	r24, 0x0F	; 15
    276a:	90 70       	andi	r25, 0x00	; 0
    276c:	28 2b       	or	r18, r24
    276e:	39 2b       	or	r19, r25
    2770:	20 54       	subi	r18, 0x40	; 64
    2772:	31 40       	sbci	r19, 0x01	; 1
    2774:	20 83       	st	Z, r18
    2776:	83 2f       	mov	r24, r19
    2778:	8f 77       	andi	r24, 0x7F	; 127
    277a:	40 78       	andi	r20, 0x80	; 128
    277c:	48 2b       	or	r20, r24
    277e:	41 83       	std	Z+1, r20	; 0x01
  }
    2780:	df 91       	pop	r29
    2782:	cf 91       	pop	r28
    2784:	1f 91       	pop	r17
    2786:	0f 91       	pop	r16
    2788:	08 95       	ret

0000278a <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)>:
// Decode core/common 'full' stats message.
//   * content will contains data decoded from the message; must be non-null
// If successful returns pointer to nexte byte of message, ie just after full stats message decoded.
// Returns null if failed (eg because of corrupt message data) and state of 'content' result is undefined.
const uint8_t *decodeFullStatsMessageCore(const uint8_t * const buf, const uint8_t buflen, const stats_TX_level secLevel, const bool secureChannel,
    FullStatsMessageCore_t * const content)
    278a:	ef 92       	push	r14
    278c:	ff 92       	push	r15
    278e:	0f 93       	push	r16
    2790:	1f 93       	push	r17
    2792:	cf 93       	push	r28
    2794:	df 93       	push	r29
    2796:	7c 01       	movw	r14, r24
  {
  if(NULL == buf) { return(NULL); } // Could be an assert/panic instead at a pinch.
    2798:	00 97       	sbiw	r24, 0x00	; 0
    279a:	09 f4       	brne	.+2      	; 0x279e <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x14>
    279c:	8f c0       	rjmp	.+286    	; 0x28bc <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  if(NULL == content) { return(NULL); } // Could be an assert/panic instead at a pinch.
    279e:	01 15       	cp	r16, r1
    27a0:	11 05       	cpc	r17, r1
    27a2:	09 f4       	brne	.+2      	; 0x27a6 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x1c>
    27a4:	8b c0       	rjmp	.+278    	; 0x28bc <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  if(buflen < FullStatsMessageCore_MIN_BYTES_ON_WIRE) { return(NULL); } // Must be at least minimal message.
    27a6:	63 30       	cpi	r22, 0x03	; 3
    27a8:	08 f4       	brcc	.+2      	; 0x27ac <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x22>
    27aa:	88 c0       	rjmp	.+272    	; 0x28bc <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
    27ac:	87 e0       	ldi	r24, 0x07	; 7
    27ae:	f8 01       	movw	r30, r16
    27b0:	11 92       	st	Z+, r1
    27b2:	8a 95       	dec	r24
    27b4:	e9 f7       	brne	.-6      	; 0x27b0 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x26>
//#define MESSAGING_FULL_STATS_HEADER_MSBS 0x70
//#define MESSAGING_FULL_STATS_HEADER_MASK 0xf0
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_PRESENT 4
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_HIGH 2
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_SECURE 1
  if(MESSAGING_FULL_STATS_HEADER_MSBS != (header & MESSAGING_FULL_STATS_HEADER_MASK)) { return(NULL); } // Bad header.
    27b6:	f7 01       	movw	r30, r14
    27b8:	80 81       	ld	r24, Z
    27ba:	28 2f       	mov	r18, r24
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	c9 01       	movw	r24, r18
    27c0:	80 7f       	andi	r24, 0xF0	; 240
    27c2:	90 70       	andi	r25, 0x00	; 0
    27c4:	80 37       	cpi	r24, 0x70	; 112
    27c6:	91 05       	cpc	r25, r1
    27c8:	09 f0       	breq	.+2      	; 0x27cc <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x42>
    27ca:	78 c0       	rjmp	.+240    	; 0x28bc <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  if(0 != (header & MESSAGING_FULL_STATS_HEADER_BITS_ID_SECURE)) { return(NULL); } // TODO: cannot do secure messages yet.
    27cc:	20 fd       	sbrc	r18, 0
    27ce:	76 c0       	rjmp	.+236    	; 0x28bc <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  // READ THE MESSAGE!
  // Pointer to next byte to read in message.
  register const uint8_t *b = buf;

  // Validate the message header and start to fill in structure.
  const uint8_t header = *b++;
    27d0:	e7 01       	movw	r28, r14
    27d2:	21 96       	adiw	r28, 0x01	; 1
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_SECURE 1
  if(MESSAGING_FULL_STATS_HEADER_MSBS != (header & MESSAGING_FULL_STATS_HEADER_MASK)) { return(NULL); } // Bad header.
  if(0 != (header & MESSAGING_FULL_STATS_HEADER_BITS_ID_SECURE)) { return(NULL); } // TODO: cannot do secure messages yet.
  // Extract ID if present.
  const bool containsID = (0 != (header & MESSAGING_FULL_STATS_HEADER_BITS_ID_PRESENT));
  if(containsID)
    27d4:	22 ff       	sbrs	r18, 2
    27d6:	12 c0       	rjmp	.+36     	; 0x27fc <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x72>
    {
    content->containsID = true;
    27d8:	f8 01       	movw	r30, r16
    27da:	80 81       	ld	r24, Z
    27dc:	81 60       	ori	r24, 0x01	; 1
    27de:	80 83       	st	Z, r24
    const uint8_t idHigh = ((0 != (header & MESSAGING_FULL_STATS_HEADER_BITS_ID_HIGH)) ? 0x80 : 0);
    27e0:	21 fd       	sbrc	r18, 1
    27e2:	02 c0       	rjmp	.+4      	; 0x27e8 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x5e>
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	01 c0       	rjmp	.+2      	; 0x27ea <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x60>
    27e8:	90 e8       	ldi	r25, 0x80	; 128
    content->id0 = *b++ | idHigh;
    27ea:	f7 01       	movw	r30, r14
    27ec:	81 81       	ldd	r24, Z+1	; 0x01
    27ee:	89 2b       	or	r24, r25
    27f0:	f8 01       	movw	r30, r16
    27f2:	81 83       	std	Z+1, r24	; 0x01
    content->id1 = *b++ | idHigh;
    27f4:	89 81       	ldd	r24, Y+1	; 0x01
    27f6:	98 2b       	or	r25, r24
    27f8:	92 83       	std	Z+2, r25	; 0x02
    27fa:	22 96       	adiw	r28, 0x02	; 2
    }

  // If next header is temp/power then extract it, else must be the flags header.
  if(MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MSBS == (*b & MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MASK))
    27fc:	88 81       	ld	r24, Y
    27fe:	80 7e       	andi	r24, 0xE0	; 224
    2800:	80 34       	cpi	r24, 0x40	; 64
    2802:	71 f4       	brne	.+28     	; 0x2820 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x96>
    {
    if(0 != (0x80 & b[1])) { return(NULL); } // Following byte does not have msb correctly cleared.
    2804:	89 81       	ldd	r24, Y+1	; 0x01
    2806:	87 fd       	sbrc	r24, 7
    2808:	59 c0       	rjmp	.+178    	; 0x28bc <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
    extractTrailingMinimalStatsPayload(b, &(content->tempAndPower));
    280a:	b8 01       	movw	r22, r16
    280c:	6d 5f       	subi	r22, 0xFD	; 253
    280e:	7f 4f       	sbci	r23, 0xFF	; 255
    2810:	ce 01       	movw	r24, r28
    2812:	0e 94 96 13 	call	0x272c	; 0x272c <extractTrailingMinimalStatsPayload(unsigned char const*, trailingMinimalStatsPayload*)>
    b += 2;
    2816:	22 96       	adiw	r28, 0x02	; 2
    content->containsTempAndPower = true;
    2818:	f8 01       	movw	r30, r16
    281a:	80 81       	ld	r24, Z
    281c:	82 60       	ori	r24, 0x02	; 2
    281e:	80 83       	st	Z, r24
    }

  // If next header is flags then extract it.
  // FIXME: risk of misinterpretting CRC.
  if(MESSAGING_FULL_STATS_FLAGS_HEADER_MSBS != (*b & MESSAGING_FULL_STATS_FLAGS_HEADER_MASK)) { return(NULL); } // Corrupt message.
    2820:	28 81       	ld	r18, Y
    2822:	42 2f       	mov	r20, r18
    2824:	50 e0       	ldi	r21, 0x00	; 0
    2826:	ca 01       	movw	r24, r20
    2828:	80 7e       	andi	r24, 0xE0	; 224
    282a:	90 70       	andi	r25, 0x00	; 0
    282c:	80 36       	cpi	r24, 0x60	; 96
    282e:	91 05       	cpc	r25, r1
    2830:	09 f0       	breq	.+2      	; 0x2834 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0xaa>
    2832:	44 c0       	rjmp	.+136    	; 0x28bc <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  const uint8_t flagsHeader = *b++;
    2834:	de 01       	movw	r26, r28
    2836:	11 96       	adiw	r26, 0x01	; 1
  content->occ = flagsHeader & 3;
    2838:	23 70       	andi	r18, 0x03	; 3
    283a:	f8 01       	movw	r30, r16
    283c:	86 81       	ldd	r24, Z+6	; 0x06
    283e:	8c 7f       	andi	r24, 0xFC	; 252
    2840:	82 2b       	or	r24, r18
    2842:	86 83       	std	Z+6, r24	; 0x06
  const bool containsAmbL = (0 != (flagsHeader & MESSAGING_FULL_STATS_FLAGS_HEADER_AMBL));
  if(containsAmbL)
    2844:	43 ff       	sbrs	r20, 3
    2846:	0a c0       	rjmp	.+20     	; 0x285c <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0xd2>
    {
    const uint8_t ambL = *b++;
    2848:	99 81       	ldd	r25, Y+1	; 0x01
    if((0 == ambL) || (ambL == (uint8_t)0xff)) { return(NULL); } // Illegal value.
    284a:	89 2f       	mov	r24, r25
    284c:	81 50       	subi	r24, 0x01	; 1
    284e:	8e 3f       	cpi	r24, 0xFE	; 254
    2850:	a8 f5       	brcc	.+106    	; 0x28bc <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  const uint8_t flagsHeader = *b++;
  content->occ = flagsHeader & 3;
  const bool containsAmbL = (0 != (flagsHeader & MESSAGING_FULL_STATS_FLAGS_HEADER_AMBL));
  if(containsAmbL)
    {
    const uint8_t ambL = *b++;
    2852:	11 96       	adiw	r26, 0x01	; 1
    if((0 == ambL) || (ambL == (uint8_t)0xff)) { return(NULL); } // Illegal value.
    content->ambL = ambL;
    2854:	95 83       	std	Z+5, r25	; 0x05
    content->containsAmbL = true;
    2856:	80 81       	ld	r24, Z
    2858:	84 60       	ori	r24, 0x04	; 4
    285a:	80 83       	st	Z, r24
    285c:	f7 01       	movw	r30, r14
    285e:	3f e7       	ldi	r19, 0x7F	; 127
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    2860:	11 e0       	ldi	r17, 0x01	; 1
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
    2862:	77 e3       	ldi	r23, 0x37	; 55
    2864:	21 c0       	rjmp	.+66     	; 0x28a8 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x11e>
    }

  // Finish off by computing and checking the CRC (and return pointer to just after CRC).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    2866:	80 81       	ld	r24, Z
    2868:	60 e8       	ldi	r22, 0x80	; 128
    286a:	40 e0       	ldi	r20, 0x00	; 0
    286c:	50 e0       	ldi	r21, 0x00	; 0
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    286e:	c8 2f       	mov	r28, r24
    2870:	d0 e0       	ldi	r29, 0x00	; 0
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
    2872:	83 2f       	mov	r24, r19
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	06 e0       	ldi	r16, 0x06	; 6
    2878:	96 95       	lsr	r25
    287a:	87 95       	ror	r24
    287c:	0a 95       	dec	r16
    287e:	e1 f7       	brne	.-8      	; 0x2878 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0xee>
    2880:	28 2f       	mov	r18, r24
    2882:	21 70       	andi	r18, 0x01	; 1
        if(0 != (datum & i)) { bit = !bit; }
    2884:	86 2f       	mov	r24, r22
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	8c 23       	and	r24, r28
    288a:	9d 23       	and	r25, r29
    288c:	89 2b       	or	r24, r25
    288e:	09 f0       	breq	.+2      	; 0x2892 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x108>
    2890:	21 27       	eor	r18, r17
        crc <<= 1;
    2892:	33 0f       	add	r19, r19
        if(bit) { crc ^= 0x37; }
    2894:	21 11       	cpse	r18, r1
    2896:	37 27       	eor	r19, r23
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
    2898:	66 95       	lsr	r22
    289a:	4f 5f       	subi	r20, 0xFF	; 255
    289c:	5f 4f       	sbci	r21, 0xFF	; 255
    289e:	48 30       	cpi	r20, 0x08	; 8
    28a0:	51 05       	cpc	r21, r1
    28a2:	39 f7       	brne	.-50     	; 0x2872 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0xe8>
    }

  // Finish off by computing and checking the CRC (and return pointer to just after CRC).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    28a4:	31 96       	adiw	r30, 0x01	; 1
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
        }
    return(crc & 0x7f);
    28a6:	3f 77       	andi	r19, 0x7F	; 127
    }

  // Finish off by computing and checking the CRC (and return pointer to just after CRC).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    28a8:	ea 17       	cp	r30, r26
    28aa:	fb 07       	cpc	r31, r27
    28ac:	e0 f2       	brcs	.-72     	; 0x2866 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0xdc>
  if(crc != *b++) { return(NULL); } // Bad CRC.
    28ae:	8c 91       	ld	r24, X
    28b0:	38 17       	cp	r19, r24
    28b2:	21 f4       	brne	.+8      	; 0x28bc <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
    28b4:	9d 01       	movw	r18, r26
    28b6:	2f 5f       	subi	r18, 0xFF	; 255
    28b8:	3f 4f       	sbci	r19, 0xFF	; 255
    28ba:	02 c0       	rjmp	.+4      	; 0x28c0 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x136>

  return(b); // Point to just after CRC.
    28bc:	20 e0       	ldi	r18, 0x00	; 0
    28be:	30 e0       	ldi	r19, 0x00	; 0
  }
    28c0:	c9 01       	movw	r24, r18
    28c2:	df 91       	pop	r29
    28c4:	cf 91       	pop	r28
    28c6:	1f 91       	pop	r17
    28c8:	0f 91       	pop	r16
    28ca:	ff 90       	pop	r15
    28cc:	ef 90       	pop	r14
    28ce:	08 95       	ret

000028d0 <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)>:
  }

// Store minimal stats payload into (2-byte) buffer from payload struct (without CRC); values are coerced to fit as necessary..
//   * payload  must be non-null
// Used for minimal and full packet forms,
void writeTrailingMinimalStatsPayloadBody(uint8_t *buf, const trailingMinimalStatsPayload_t *payload)
    28d0:	0f 93       	push	r16
    28d2:	1f 93       	push	r17
    28d4:	cf 93       	push	r28
    28d6:	df 93       	push	r29
    28d8:	8c 01       	movw	r16, r24
    28da:	eb 01       	movw	r28, r22
  {
#ifdef DEBUG
  if(NULL == payload) { panic(); }
    28dc:	61 15       	cp	r22, r1
    28de:	71 05       	cpc	r23, r1
    28e0:	11 f4       	brne	.+4      	; 0x28e6 <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x16>
    28e2:	0e 94 cd 2c 	call	0x599a	; 0x599a <panic()>
  DEBUG_SERIAL_PRINTFMT(minTempRepresentable, DEC);
  DEBUG_SERIAL_PRINT_FLASHSTRING(" max=");
  DEBUG_SERIAL_PRINTFMT(maxTempRepresentable, DEC);
  DEBUG_SERIAL_PRINTLN();
#endif
  int16_t temp16Cbiased = payload->tempC16;
    28e6:	88 81       	ld	r24, Y
    28e8:	29 81       	ldd	r18, Y+1	; 0x01
    28ea:	92 2f       	mov	r25, r18
    28ec:	9f 77       	andi	r25, 0x7F	; 127
    28ee:	88 0f       	add	r24, r24
    28f0:	99 1f       	adc	r25, r25
    28f2:	95 95       	asr	r25
    28f4:	87 95       	ror	r24
    28f6:	26 e0       	ldi	r18, 0x06	; 6
    28f8:	80 3c       	cpi	r24, 0xC0	; 192
    28fa:	92 07       	cpc	r25, r18
    28fc:	14 f0       	brlt	.+4      	; 0x2902 <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x32>
    28fe:	8f eb       	ldi	r24, 0xBF	; 191
    2900:	96 e0       	ldi	r25, 0x06	; 6
    2902:	ee ef       	ldi	r30, 0xFE	; 254
    2904:	80 3c       	cpi	r24, 0xC0	; 192
    2906:	9e 07       	cpc	r25, r30
    2908:	14 f4       	brge	.+4      	; 0x290e <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x3e>
    290a:	80 ec       	ldi	r24, 0xC0	; 192
    290c:	9e ef       	ldi	r25, 0xFE	; 254
  if(temp16Cbiased < minTempRepresentable) { temp16Cbiased = minTempRepresentable; }
  else if(temp16Cbiased > maxTempRepresentable) { temp16Cbiased = maxTempRepresentable; }
  temp16Cbiased -= MESSAGING_TRAILING_MINIMAL_STATS_TEMP_BIAS; // Should now be strictly positive.
    290e:	9c 01       	movw	r18, r24
    2910:	20 5c       	subi	r18, 0xC0	; 192
    2912:	3e 4f       	sbci	r19, 0xFE	; 254
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("temp16Cbiased: ");
  DEBUG_SERIAL_PRINTFMT(temp16Cbiased, DEC);
  DEBUG_SERIAL_PRINTLN();
#endif
  const uint8_t byte0 = MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MSBS | (payload->powerLow ? 0x10 : 0) | (temp16Cbiased & 0xf);
    2914:	89 81       	ldd	r24, Y+1	; 0x01
    2916:	87 fd       	sbrc	r24, 7
    2918:	02 c0       	rjmp	.+4      	; 0x291e <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x4e>
    291a:	90 e4       	ldi	r25, 0x40	; 64
    291c:	01 c0       	rjmp	.+2      	; 0x2920 <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x50>
    291e:	90 e5       	ldi	r25, 0x50	; 80
  const uint8_t byte1 = (uint8_t) (temp16Cbiased >> 4);
  buf[0] = byte0;
    2920:	82 2f       	mov	r24, r18
    2922:	8f 70       	andi	r24, 0x0F	; 15
    2924:	98 2b       	or	r25, r24
    2926:	f8 01       	movw	r30, r16
    2928:	90 83       	st	Z, r25
  buf[1] = byte1;
    292a:	84 e0       	ldi	r24, 0x04	; 4
    292c:	35 95       	asr	r19
    292e:	27 95       	ror	r18
    2930:	8a 95       	dec	r24
    2932:	e1 f7       	brne	.-8      	; 0x292c <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x5c>
    2934:	21 83       	std	Z+1, r18	; 0x01
#if 0 && defined(DEBUG)
  for(uint8_t i = 0; i < 2; ++i) { if(0 != (buf[i] & 0x80)) { panic(); } } // MSBits should be clear.
#endif
  }
    2936:	df 91       	pop	r29
    2938:	cf 91       	pop	r28
    293a:	1f 91       	pop	r17
    293c:	0f 91       	pop	r16
    293e:	08 95       	ret

00002940 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)>:
// Note that up to 7 bytes of payload is optimal for the CRC used.
// If successful, returns pointer to terminating 0xff at end of message.
// Returns null if failed (eg because of bad inputs or insufficient buffer space);
// part of the message may have have been written in this case and in particular the previous terminating 0xff may have been overwritten.
uint8_t *encodeFullStatsMessageCore(uint8_t * const buf, const uint8_t buflen, const stats_TX_level secLevel, const bool secureChannel,
    const FullStatsMessageCore_t * const content)
    2940:	af 92       	push	r10
    2942:	bf 92       	push	r11
    2944:	cf 92       	push	r12
    2946:	df 92       	push	r13
    2948:	ef 92       	push	r14
    294a:	ff 92       	push	r15
    294c:	0f 93       	push	r16
    294e:	1f 93       	push	r17
    2950:	cf 93       	push	r28
    2952:	df 93       	push	r29
    2954:	6c 01       	movw	r12, r24
    2956:	5a 01       	movw	r10, r20
  {
  if(NULL == buf) { return(NULL); } // Could be an assert/panic instead at a pinch.
    2958:	00 97       	sbiw	r24, 0x00	; 0
    295a:	09 f4       	brne	.+2      	; 0x295e <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x1e>
    295c:	be c0       	rjmp	.+380    	; 0x2ada <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x19a>
  if(NULL == content) { return(NULL); } // Could be an assert/panic instead at a pinch.
    295e:	01 15       	cp	r16, r1
    2960:	11 05       	cpc	r17, r1
    2962:	09 f4       	brne	.+2      	; 0x2966 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x26>
    2964:	ba c0       	rjmp	.+372    	; 0x2ada <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x19a>
  if(secureChannel) { return(NULL); } // TODO: cannot create secure message yet.
    2966:	22 23       	and	r18, r18
    2968:	09 f0       	breq	.+2      	; 0x296c <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x2c>
    296a:	b7 c0       	rjmp	.+366    	; 0x2ada <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x19a>
  const uint8_t payloadLength =
      1 + // Initial header.
      (content->containsID ? 2 : 0) +
      (content->containsTempAndPower ? 2 : 0) +
      1 + // Flags header.
      (content->containsAmbL ? 1 : 0);
    296c:	d8 01       	movw	r26, r16
    296e:	8c 91       	ld	r24, X
    2970:	58 2f       	mov	r21, r24
    2972:	51 70       	andi	r21, 0x01	; 1
    2974:	80 fd       	sbrc	r24, 0
    2976:	02 c0       	rjmp	.+4      	; 0x297c <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x3c>
    2978:	41 e0       	ldi	r20, 0x01	; 1
    297a:	01 c0       	rjmp	.+2      	; 0x297e <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x3e>
    297c:	43 e0       	ldi	r20, 0x03	; 3
    297e:	f8 01       	movw	r30, r16
    2980:	80 81       	ld	r24, Z
    2982:	81 fd       	sbrc	r24, 1
    2984:	02 c0       	rjmp	.+4      	; 0x298a <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x4a>
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	01 c0       	rjmp	.+2      	; 0x298c <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x4c>
    298a:	32 e0       	ldi	r19, 0x02	; 2
    298c:	d8 01       	movw	r26, r16
    298e:	2c 91       	ld	r18, X
    2990:	26 95       	lsr	r18
    2992:	26 95       	lsr	r18
    2994:	21 70       	andi	r18, 0x01	; 1
  if(buflen < payloadLength + 2)  { return(NULL); }
    2996:	82 2f       	mov	r24, r18
    2998:	8f 5f       	subi	r24, 0xFF	; 255
    299a:	84 0f       	add	r24, r20
    299c:	83 0f       	add	r24, r19
    299e:	e8 2e       	mov	r14, r24
    29a0:	ff 24       	eor	r15, r15
    29a2:	08 94       	sec
    29a4:	e1 1c       	adc	r14, r1
    29a6:	f1 1c       	adc	r15, r1
    29a8:	86 2f       	mov	r24, r22
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	e8 16       	cp	r14, r24
    29ae:	f9 06       	cpc	r15, r25
    29b0:	0c f0       	brlt	.+2      	; 0x29b4 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x74>
    29b2:	93 c0       	rjmp	.+294    	; 0x2ada <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x19a>

  // Validate some more detail.
  // ID
  if(content->containsID)
    29b4:	55 23       	and	r21, r21
    29b6:	71 f0       	breq	.+28     	; 0x29d4 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x94>
    {
    if((content->id0 == (uint8_t)0xff) || (content->id1 == (uint8_t)0xff)) { return(NULL); } // ID bytes cannot be 0xff.
    29b8:	11 96       	adiw	r26, 0x01	; 1
    29ba:	9c 91       	ld	r25, X
    29bc:	11 97       	sbiw	r26, 0x01	; 1
    29be:	9f 3f       	cpi	r25, 0xFF	; 255
    29c0:	09 f4       	brne	.+2      	; 0x29c4 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x84>
    29c2:	8b c0       	rjmp	.+278    	; 0x2ada <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x19a>
    29c4:	12 96       	adiw	r26, 0x02	; 2
    29c6:	8c 91       	ld	r24, X
    29c8:	8f 3f       	cpi	r24, 0xFF	; 255
    29ca:	09 f4       	brne	.+2      	; 0x29ce <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x8e>
    29cc:	86 c0       	rjmp	.+268    	; 0x2ada <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x19a>
    if((content->id0 & 0x80) != (content->id1 & 0x80)) { return(NULL); } // ID top bits don't match.
    29ce:	89 27       	eor	r24, r25
    29d0:	87 fd       	sbrc	r24, 7
    29d2:	83 c0       	rjmp	.+262    	; 0x2ada <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x19a>
    }
  // Ambient light.
  if(content->containsAmbL)
    29d4:	22 23       	and	r18, r18
    29d6:	31 f0       	breq	.+12     	; 0x29e4 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xa4>
    {
    if((content->ambL == 0) || (content->ambL == (uint8_t)0xff)) { return(NULL); } // Forbidden values.
    29d8:	f8 01       	movw	r30, r16
    29da:	85 81       	ldd	r24, Z+5	; 0x05
    29dc:	81 50       	subi	r24, 0x01	; 1
    29de:	8e 3f       	cpi	r24, 0xFE	; 254
    29e0:	08 f0       	brcs	.+2      	; 0x29e4 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xa4>
    29e2:	7b c0       	rjmp	.+246    	; 0x2ada <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x19a>
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_HIGH 2
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_SECURE 1
  const uint8_t header = MESSAGING_FULL_STATS_HEADER_MSBS |
      (content->containsID ? MESSAGING_FULL_STATS_HEADER_BITS_ID_PRESENT : 0) |
      ((content->containsID && (0 != (content->id0 & 0x80))) ? MESSAGING_FULL_STATS_HEADER_BITS_ID_HIGH : 0) |
      0; // TODO: cannot do secure messages yet.
    29e4:	55 23       	and	r21, r21
    29e6:	11 f4       	brne	.+4      	; 0x29ec <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xac>
    29e8:	80 e7       	ldi	r24, 0x70	; 112
    29ea:	09 c0       	rjmp	.+18     	; 0x29fe <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xbe>
    29ec:	d8 01       	movw	r26, r16
    29ee:	11 96       	adiw	r26, 0x01	; 1
    29f0:	8c 91       	ld	r24, X
    29f2:	87 ff       	sbrs	r24, 7
    29f4:	03 c0       	rjmp	.+6      	; 0x29fc <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xbc>
    29f6:	92 e0       	ldi	r25, 0x02	; 2
    29f8:	84 e7       	ldi	r24, 0x74	; 116
    29fa:	02 c0       	rjmp	.+4      	; 0x2a00 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xc0>
    29fc:	84 e7       	ldi	r24, 0x74	; 116
    29fe:	90 e0       	ldi	r25, 0x00	; 0
  *b++ = header;
    2a00:	89 2b       	or	r24, r25
    2a02:	e6 01       	movw	r28, r12
    2a04:	89 93       	st	Y+, r24
 
  // Insert ID if requested.
  if(content->containsID)
    2a06:	f8 01       	movw	r30, r16
    2a08:	80 81       	ld	r24, Z
    2a0a:	80 ff       	sbrs	r24, 0
    2a0c:	09 c0       	rjmp	.+18     	; 0x2a20 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xe0>
    {
    *b++ = content->id0 & 0x7f;
    2a0e:	81 81       	ldd	r24, Z+1	; 0x01
    2a10:	8f 77       	andi	r24, 0x7F	; 127
    2a12:	d6 01       	movw	r26, r12
    2a14:	11 96       	adiw	r26, 0x01	; 1
    2a16:	8c 93       	st	X, r24
    *b++ = content->id1 & 0x7f;
    2a18:	82 81       	ldd	r24, Z+2	; 0x02
    2a1a:	8f 77       	andi	r24, 0x7F	; 127
    2a1c:	89 83       	std	Y+1, r24	; 0x01
    2a1e:	22 96       	adiw	r28, 0x02	; 2
    }

  // Insert basic temperature and power status if requested.
  if(content->containsTempAndPower)
    2a20:	f8 01       	movw	r30, r16
    2a22:	80 81       	ld	r24, Z
    2a24:	81 ff       	sbrs	r24, 1
    2a26:	07 c0       	rjmp	.+14     	; 0x2a36 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xf6>
    {
    writeTrailingMinimalStatsPayloadBody(b, &(content->tempAndPower));
    2a28:	b8 01       	movw	r22, r16
    2a2a:	6d 5f       	subi	r22, 0xFD	; 253
    2a2c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a2e:	ce 01       	movw	r24, r28
    2a30:	0e 94 68 14 	call	0x28d0	; 0x28d0 <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)>
    b += 2;
    2a34:	22 96       	adiw	r28, 0x02	; 2
//#define MESSAGING_FULL_STATS_FLAGS_HEADER_AMBL 8
//#define MESSAGING_FULL_STATS_FLAGS_HEADER_RHP 4
  // Omit occupancy data unless encoding for a secure channel or at a very permissive stats TX security level.
  const uint8_t flagsHeader = MESSAGING_FULL_STATS_FLAGS_HEADER_MSBS |
    (content->containsAmbL ? MESSAGING_FULL_STATS_FLAGS_HEADER_AMBL : 0) |
    ((secureChannel || (secLevel <= stTXalwaysAll)) ? (content->occ & 3) : 0);
    2a36:	d8 01       	movw	r26, r16
    2a38:	8c 91       	ld	r24, X
    2a3a:	82 fd       	sbrc	r24, 2
    2a3c:	02 c0       	rjmp	.+4      	; 0x2a42 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x102>
    2a3e:	90 e6       	ldi	r25, 0x60	; 96
    2a40:	01 c0       	rjmp	.+2      	; 0x2a44 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x104>
    2a42:	98 e6       	ldi	r25, 0x68	; 104
    2a44:	1a 14       	cp	r1, r10
    2a46:	1b 04       	cpc	r1, r11
    2a48:	14 f4       	brge	.+4      	; 0x2a4e <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x10e>
    2a4a:	80 e0       	ldi	r24, 0x00	; 0
    2a4c:	03 c0       	rjmp	.+6      	; 0x2a54 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x114>
    2a4e:	f8 01       	movw	r30, r16
    2a50:	86 81       	ldd	r24, Z+6	; 0x06
    2a52:	83 70       	andi	r24, 0x03	; 3
  *b++ = flagsHeader;
    2a54:	89 2b       	or	r24, r25
    2a56:	fe 01       	movw	r30, r28
    2a58:	81 93       	st	Z+, r24
  // Now insert extra fields as flagged.
  if(content->containsAmbL)
    2a5a:	d8 01       	movw	r26, r16
    2a5c:	8c 91       	ld	r24, X
    2a5e:	82 ff       	sbrs	r24, 2
    2a60:	04 c0       	rjmp	.+8      	; 0x2a6a <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x12a>
    { *b++ = content->ambL; }
    2a62:	15 96       	adiw	r26, 0x05	; 5
    2a64:	8c 91       	ld	r24, X
    2a66:	89 83       	std	Y+1, r24	; 0x01
    2a68:	31 96       	adiw	r30, 0x01	; 1
    2a6a:	d6 01       	movw	r26, r12
    2a6c:	3f e7       	ldi	r19, 0x7F	; 127
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    2a6e:	11 e0       	ldi	r17, 0x01	; 1
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
    2a70:	77 e3       	ldi	r23, 0x37	; 55
    2a72:	21 c0       	rjmp	.+66     	; 0x2ab6 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x176>
  // TODO: RH% etc

  // Finish off message by computing and appending the CRC and then terminating 0xff (and return pointer to 0xff).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    2a74:	8c 91       	ld	r24, X
    2a76:	60 e8       	ldi	r22, 0x80	; 128
    2a78:	40 e0       	ldi	r20, 0x00	; 0
    2a7a:	50 e0       	ldi	r21, 0x00	; 0
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    2a7c:	c8 2f       	mov	r28, r24
    2a7e:	d0 e0       	ldi	r29, 0x00	; 0
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
    2a80:	83 2f       	mov	r24, r19
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	06 e0       	ldi	r16, 0x06	; 6
    2a86:	96 95       	lsr	r25
    2a88:	87 95       	ror	r24
    2a8a:	0a 95       	dec	r16
    2a8c:	e1 f7       	brne	.-8      	; 0x2a86 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x146>
    2a8e:	28 2f       	mov	r18, r24
    2a90:	21 70       	andi	r18, 0x01	; 1
        if(0 != (datum & i)) { bit = !bit; }
    2a92:	86 2f       	mov	r24, r22
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	8c 23       	and	r24, r28
    2a98:	9d 23       	and	r25, r29
    2a9a:	89 2b       	or	r24, r25
    2a9c:	09 f0       	breq	.+2      	; 0x2aa0 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x160>
    2a9e:	21 27       	eor	r18, r17
        crc <<= 1;
    2aa0:	33 0f       	add	r19, r19
        if(bit) { crc ^= 0x37; }
    2aa2:	21 11       	cpse	r18, r1
    2aa4:	37 27       	eor	r19, r23
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
    2aa6:	66 95       	lsr	r22
    2aa8:	4f 5f       	subi	r20, 0xFF	; 255
    2aaa:	5f 4f       	sbci	r21, 0xFF	; 255
    2aac:	48 30       	cpi	r20, 0x08	; 8
    2aae:	51 05       	cpc	r21, r1
    2ab0:	39 f7       	brne	.-50     	; 0x2a80 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x140>
  // TODO: RH% etc

  // Finish off message by computing and appending the CRC and then terminating 0xff (and return pointer to 0xff).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    2ab2:	11 96       	adiw	r26, 0x01	; 1
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
        }
    return(crc & 0x7f);
    2ab4:	3f 77       	andi	r19, 0x7F	; 127
  // TODO: RH% etc

  // Finish off message by computing and appending the CRC and then terminating 0xff (and return pointer to 0xff).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    2ab6:	ae 17       	cp	r26, r30
    2ab8:	bf 07       	cpc	r27, r31
    2aba:	e0 f2       	brcs	.-72     	; 0x2a74 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x134>
  *b++ = crc;
    2abc:	ef 01       	movw	r28, r30
    2abe:	39 93       	st	Y+, r19
  *b = 0xff;
    2ac0:	8f ef       	ldi	r24, 0xFF	; 255
    2ac2:	81 83       	std	Z+1, r24	; 0x01
#if 1 && defined(DEBUG)
  if(b - buf != payloadLength + 1) { panic(F("msg gen err")); }
    2ac4:	ce 01       	movw	r24, r28
    2ac6:	8c 19       	sub	r24, r12
    2ac8:	9d 09       	sbc	r25, r13
    2aca:	8e 15       	cp	r24, r14
    2acc:	9f 05       	cpc	r25, r15
    2ace:	39 f0       	breq	.+14     	; 0x2ade <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x19e>
    2ad0:	83 ea       	ldi	r24, 0xA3	; 163
    2ad2:	91 e0       	ldi	r25, 0x01	; 1
    2ad4:	0e 94 de 2c 	call	0x59bc	; 0x59bc <panic(__FlashStringHelper const*)>
    2ad8:	02 c0       	rjmp	.+4      	; 0x2ade <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x19e>
    2ada:	c0 e0       	ldi	r28, 0x00	; 0
    2adc:	d0 e0       	ldi	r29, 0x00	; 0
#endif
  return(b);
  }
    2ade:	ce 01       	movw	r24, r28
    2ae0:	df 91       	pop	r29
    2ae2:	cf 91       	pop	r28
    2ae4:	1f 91       	pop	r17
    2ae6:	0f 91       	pop	r16
    2ae8:	ff 90       	pop	r15
    2aea:	ef 90       	pop	r14
    2aec:	df 90       	pop	r13
    2aee:	cf 90       	pop	r12
    2af0:	bf 90       	pop	r11
    2af2:	af 90       	pop	r10
    2af4:	08 95       	ret

00002af6 <writeTrailingMinimalStatsPayload(unsigned char*, trailingMinimalStatsPayload const*)>:
#endif
  }

// Store minimal stats payload into (3-byte) buffer from payload struct and append CRC; values are coerced to fit as necessary..
//   * payload  must be non-null
void writeTrailingMinimalStatsPayload(uint8_t *buf, const trailingMinimalStatsPayload_t *payload)
    2af6:	cf 93       	push	r28
    2af8:	df 93       	push	r29
    2afa:	ec 01       	movw	r28, r24
  {
  writeTrailingMinimalStatsPayloadBody(buf, payload);
    2afc:	0e 94 68 14 	call	0x28d0	; 0x28d0 <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)>
  buf[2] = crc7_5B_update(buf[0], buf[1]);
    2b00:	28 81       	ld	r18, Y
    2b02:	89 81       	ldd	r24, Y+1	; 0x01
    2b04:	60 e8       	ldi	r22, 0x80	; 128
    2b06:	40 e0       	ldi	r20, 0x00	; 0
    2b08:	50 e0       	ldi	r21, 0x00	; 0
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    2b0a:	e8 2f       	mov	r30, r24
    2b0c:	f0 e0       	ldi	r31, 0x00	; 0
    2b0e:	a1 e0       	ldi	r26, 0x01	; 1
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
    2b10:	77 e3       	ldi	r23, 0x37	; 55
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
    2b12:	82 2f       	mov	r24, r18
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	36 e0       	ldi	r19, 0x06	; 6
    2b18:	96 95       	lsr	r25
    2b1a:	87 95       	ror	r24
    2b1c:	3a 95       	dec	r19
    2b1e:	e1 f7       	brne	.-8      	; 0x2b18 <writeTrailingMinimalStatsPayload(unsigned char*, trailingMinimalStatsPayload const*)+0x22>
    2b20:	38 2f       	mov	r19, r24
    2b22:	31 70       	andi	r19, 0x01	; 1
        if(0 != (datum & i)) { bit = !bit; }
    2b24:	86 2f       	mov	r24, r22
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	8e 23       	and	r24, r30
    2b2a:	9f 23       	and	r25, r31
    2b2c:	89 2b       	or	r24, r25
    2b2e:	09 f0       	breq	.+2      	; 0x2b32 <writeTrailingMinimalStatsPayload(unsigned char*, trailingMinimalStatsPayload const*)+0x3c>
    2b30:	3a 27       	eor	r19, r26
        crc <<= 1;
    2b32:	22 0f       	add	r18, r18
        if(bit) { crc ^= 0x37; }
    2b34:	31 11       	cpse	r19, r1
    2b36:	27 27       	eor	r18, r23
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
    2b38:	66 95       	lsr	r22
    2b3a:	4f 5f       	subi	r20, 0xFF	; 255
    2b3c:	5f 4f       	sbci	r21, 0xFF	; 255
    2b3e:	48 30       	cpi	r20, 0x08	; 8
    2b40:	51 05       	cpc	r21, r1
    2b42:	39 f7       	brne	.-50     	; 0x2b12 <writeTrailingMinimalStatsPayload(unsigned char*, trailingMinimalStatsPayload const*)+0x1c>
// Store minimal stats payload into (3-byte) buffer from payload struct and append CRC; values are coerced to fit as necessary..
//   * payload  must be non-null
void writeTrailingMinimalStatsPayload(uint8_t *buf, const trailingMinimalStatsPayload_t *payload)
  {
  writeTrailingMinimalStatsPayloadBody(buf, payload);
  buf[2] = crc7_5B_update(buf[0], buf[1]);
    2b44:	2f 77       	andi	r18, 0x7F	; 127
    2b46:	2a 83       	std	Y+2, r18	; 0x02
#if 0 && defined(DEBUG)
  for(uint8_t i = 0; i < 3; ++i) { if(0 != (buf[i] & 0x80)) { panic(); } } // MSBits should be clear.
#endif
  }
    2b48:	df 91       	pop	r29
    2b4a:	cf 91       	pop	r28
    2b4c:	08 95       	ret

00002b4e <__vector_9>:
  timer2XtalIntSetup();
#endif
  }

#ifdef WAKEUP_32768HZ_XTAL
ISR(TIMER2_OVF_vect)
    2b4e:	1f 92       	push	r1
    2b50:	0f 92       	push	r0
    2b52:	0f b6       	in	r0, 0x3f	; 63
    2b54:	0f 92       	push	r0
    2b56:	11 24       	eor	r1, r1
    2b58:	2f 93       	push	r18
    2b5a:	8f 93       	push	r24
    2b5c:	9f 93       	push	r25
// must not enable interrupts, and must leave interrupt state as was on entry.
// If not being called from an ISR then locking round this call that works with the getXXX() functions should be considered.
static inline void tickSecondISR()
#endif
  {
  register uint_fast8_t sTemp = _secondsLT; // Avoid some redundant memory accesses.
    2b5e:	80 91 d0 01 	lds	r24, 0x01D0
  sTemp += MAIN_TICK_S;
    2b62:	8e 5f       	subi	r24, 0xFE	; 254
  if(sTemp > 59)
    2b64:	8c 33       	cpi	r24, 0x3C	; 60
    2b66:	c8 f0       	brcs	.+50     	; 0x2b9a <__vector_9+0x4c>
    {
    sTemp = 0; // Seconds roll.
    register uint_least16_t mTemp = _minutesSinceMidnightLT + 1; // Avoid some redundant memory accesses.
    2b68:	80 91 d1 01 	lds	r24, 0x01D1
    2b6c:	90 91 d2 01 	lds	r25, 0x01D2
    2b70:	01 96       	adiw	r24, 0x01	; 1
    if(mTemp > 1439)
    2b72:	25 e0       	ldi	r18, 0x05	; 5
    2b74:	80 3a       	cpi	r24, 0xA0	; 160
    2b76:	92 07       	cpc	r25, r18
    2b78:	58 f0       	brcs	.+22     	; 0x2b90 <__vector_9+0x42>
      {
      mTemp = 0; // Minutes/hours roll.
      // Increment the day.
      ++_daysSince1999LT; // Don't currently prevent roll.
    2b7a:	80 91 d3 01 	lds	r24, 0x01D3
    2b7e:	90 91 d4 01 	lds	r25, 0x01D4
    2b82:	01 96       	adiw	r24, 0x01	; 1
    2b84:	90 93 d4 01 	sts	0x01D4, r25
    2b88:	80 93 d3 01 	sts	0x01D3, r24
    2b8c:	80 e0       	ldi	r24, 0x00	; 0
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
      }
    _minutesSinceMidnightLT = mTemp;
    2b90:	90 93 d2 01 	sts	0x01D2, r25
    2b94:	80 93 d1 01 	sts	0x01D1, r24
    2b98:	80 e0       	ldi	r24, 0x00	; 0
    }
  _secondsLT = sTemp;
    2b9a:	80 93 d0 01 	sts	0x01D0, r24
#if defined(TWO_S_TICK_RTC_SUPPORT)
  tickDoubleSecondISR();
#else
  tickSecondISR();
#endif
  }
    2b9e:	9f 91       	pop	r25
    2ba0:	8f 91       	pop	r24
    2ba2:	2f 91       	pop	r18
    2ba4:	0f 90       	pop	r0
    2ba6:	0f be       	out	0x3f, r0	; 63
    2ba8:	0f 90       	pop	r0
    2baa:	1f 90       	pop	r1
    2bac:	18 95       	reti

00002bae <__vector_6>:
// May contain a little entropy concentrated in the least-significant bits, in part from WDT-vs-CPU-clock jitter, especially if not sleeping.
static volatile uint8_t _watchdogFired;

// Catch watchdog timer interrupt to automatically clear WDIE and WDIF.
// This allows use of watchdog for low-power timed sleep.
ISR(WDT_vect)
    2bae:	1f 92       	push	r1
    2bb0:	0f 92       	push	r0
    2bb2:	0f b6       	in	r0, 0x3f	; 63
    2bb4:	0f 92       	push	r0
    2bb6:	11 24       	eor	r1, r1
    2bb8:	8f 93       	push	r24
    2bba:	9f 93       	push	r25
    2bbc:	df 93       	push	r29
    2bbe:	cf 93       	push	r28
    2bc0:	0f 92       	push	r0
    2bc2:	cd b7       	in	r28, 0x3d	; 61
    2bc4:	de b7       	in	r29, 0x3e	; 62
  {
  // WDIE and WDIF are cleared in hardware upon entering this ISR.
  wdt_disable();
    2bc6:	88 e1       	ldi	r24, 0x18	; 24
    2bc8:	0f b6       	in	r0, 0x3f	; 63
    2bca:	f8 94       	cli
    2bcc:	80 93 60 00 	sts	0x0060, r24
    2bd0:	10 92 60 00 	sts	0x0060, r1
    2bd4:	0f be       	out	0x3f, r0	; 63
  // Note: be careful of what is accessed from this ISR.
  // Capture some marginal entropy from the stack position.
  // 
  uint8_t x;
  _watchdogFired = ((uint8_t) 0x80) | ((uint8_t) (int) &x); // Ensure non-zero, retaining any entropy in ls bits.
    2bd6:	ce 01       	movw	r24, r28
    2bd8:	01 96       	adiw	r24, 0x01	; 1
    2bda:	80 68       	ori	r24, 0x80	; 128
    2bdc:	80 93 c6 01 	sts	0x01C6, r24
  }
    2be0:	0f 90       	pop	r0
    2be2:	cf 91       	pop	r28
    2be4:	df 91       	pop	r29
    2be6:	9f 91       	pop	r25
    2be8:	8f 91       	pop	r24
    2bea:	0f 90       	pop	r0
    2bec:	0f be       	out	0x3f, r0	; 63
    2bee:	0f 90       	pop	r0
    2bf0:	1f 90       	pop	r1
    2bf2:	18 95       	reti

00002bf4 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>:
// Note: inlining is prevented so as to avoid migrating anything into the section where the CPU is running slowly.
//
// Note: may be dubious to run CPU clock less than 4x 32768Hz crystal speed,
// eg at 31250Hz for 8MHz RC clock and max prescale.
// Don't access timer 2 regs at low CPU speed, eg in ISRs.
__attribute__ ((noinline)) void sleepLowPowerLoopsMinCPUSpeed(uint16_t loops)
    2bf4:	fc 01       	movw	r30, r24
  {
  const clock_div_t prescale = clock_prescale_get(); // Capture current prescale value.
    2bf6:	80 91 61 00 	lds	r24, 0x0061
  clock_prescale_set(MAX_CPU_PRESCALE); // Reduce clock speed (increase prescale) as far as possible.
    2bfa:	28 e0       	ldi	r18, 0x08	; 8
    2bfc:	30 e0       	ldi	r19, 0x00	; 0
    2bfe:	40 e8       	ldi	r20, 0x80	; 128
    2c00:	0f b6       	in	r0, 0x3f	; 63
    2c02:	f8 94       	cli
    2c04:	40 93 61 00 	sts	0x0061, r20
    2c08:	20 93 61 00 	sts	0x0061, r18
    2c0c:	0f be       	out	0x3f, r0	; 63
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    2c0e:	31 97       	sbiw	r30, 0x01	; 1
    2c10:	f1 f7       	brne	.-4      	; 0x2c0e <sleepLowPowerLoopsMinCPUSpeed(unsigned int)+0x1a>
  _delay_loop_2(loops); // Burn cycles...
  clock_prescale_set(prescale); // Restore clock prescale.
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	8f 70       	andi	r24, 0x0F	; 15
    2c16:	90 70       	andi	r25, 0x00	; 0
    2c18:	20 e8       	ldi	r18, 0x80	; 128
    2c1a:	0f b6       	in	r0, 0x3f	; 63
    2c1c:	f8 94       	cli
    2c1e:	20 93 61 00 	sts	0x0061, r18
    2c22:	80 93 61 00 	sts	0x0061, r24
    2c26:	0f be       	out	0x3f, r0	; 63
  }
    2c28:	08 95       	ret

00002c2a <sleepPwrSaveWithBODDisabled()>:
#endif

// Sleep with BOD disabled in power-save mode; will wake on any interrupt.
void sleepPwrSaveWithBODDisabled()
  {
  set_sleep_mode(SLEEP_MODE_PWR_SAVE); // Stop all but timer 2 and watchdog when sleeping.
    2c2a:	83 b7       	in	r24, 0x33	; 51
    2c2c:	81 7f       	andi	r24, 0xF1	; 241
    2c2e:	86 60       	ori	r24, 0x06	; 6
    2c30:	83 bf       	out	0x33, r24	; 51
  cli();
    2c32:	f8 94       	cli
  sleep_enable();
    2c34:	83 b7       	in	r24, 0x33	; 51
    2c36:	81 60       	ori	r24, 0x01	; 1
    2c38:	83 bf       	out	0x33, r24	; 51
  sleep_bod_disable();
    2c3a:	85 b7       	in	r24, 0x35	; 53
    2c3c:	80 66       	ori	r24, 0x60	; 96
    2c3e:	85 bf       	out	0x35, r24	; 53
    2c40:	8f 7d       	andi	r24, 0xDF	; 223
    2c42:	85 bf       	out	0x35, r24	; 53
  sei();
    2c44:	78 94       	sei
  sleep_cpu();
    2c46:	88 95       	sleep
  sleep_disable();
    2c48:	83 b7       	in	r24, 0x33	; 51
    2c4a:	8e 7f       	andi	r24, 0xFE	; 254
    2c4c:	83 bf       	out	0x33, r24	; 51
  sei();
    2c4e:	78 94       	sei
  }
    2c50:	08 95       	ret

00002c52 <nap(signed char)>:
//   * watchdogSleep is one of the WDTO_XX values from <avr/wdt.h>
// May be useful to call minimsePowerWithoutSleep() first, when not needing any modules left on.
void nap(int_fast8_t watchdogSleep)
  {
  // Watchdog should (already) be disabled on entry.
  _watchdogFired = 0;
    2c52:	10 92 c6 01 	sts	0x01C6, r1

  wdt_enable(watchdogSleep);
    2c56:	83 fd       	sbrc	r24, 3
    2c58:	02 c0       	rjmp	.+4      	; 0x2c5e <nap(signed char)+0xc>
    2c5a:	28 e0       	ldi	r18, 0x08	; 8
    2c5c:	01 c0       	rjmp	.+2      	; 0x2c60 <nap(signed char)+0xe>
    2c5e:	28 e2       	ldi	r18, 0x28	; 40
    2c60:	87 70       	andi	r24, 0x07	; 7
    2c62:	28 2b       	or	r18, r24
    2c64:	88 e1       	ldi	r24, 0x18	; 24
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	0f b6       	in	r0, 0x3f	; 63
    2c6a:	f8 94       	cli
    2c6c:	a8 95       	wdr
    2c6e:	80 93 60 00 	sts	0x0060, r24
    2c72:	0f be       	out	0x3f, r0	; 63
    2c74:	20 93 60 00 	sts	0x0060, r18
  WDTCSR |= (1 << WDIE);
    2c78:	80 91 60 00 	lds	r24, 0x0060
    2c7c:	80 64       	ori	r24, 0x40	; 64
    2c7e:	80 93 60 00 	sts	0x0060, r24
#endif

// Sleep with BOD disabled in power-save mode; will wake on any interrupt.
void sleepPwrSaveWithBODDisabled()
  {
  set_sleep_mode(SLEEP_MODE_PWR_SAVE); // Stop all but timer 2 and watchdog when sleeping.
    2c82:	83 b7       	in	r24, 0x33	; 51
    2c84:	81 7f       	andi	r24, 0xF1	; 241
    2c86:	86 60       	ori	r24, 0x06	; 6
    2c88:	83 bf       	out	0x33, r24	; 51
  cli();
    2c8a:	f8 94       	cli
  sleep_enable();
    2c8c:	83 b7       	in	r24, 0x33	; 51
    2c8e:	81 60       	ori	r24, 0x01	; 1
    2c90:	83 bf       	out	0x33, r24	; 51
  sleep_bod_disable();
    2c92:	85 b7       	in	r24, 0x35	; 53
    2c94:	80 66       	ori	r24, 0x60	; 96
    2c96:	85 bf       	out	0x35, r24	; 53
    2c98:	8f 7d       	andi	r24, 0xDF	; 223
    2c9a:	85 bf       	out	0x35, r24	; 53
  sei();
    2c9c:	78 94       	sei
  sleep_cpu();
    2c9e:	88 95       	sleep
  sleep_disable();
    2ca0:	83 b7       	in	r24, 0x33	; 51
    2ca2:	8e 7f       	andi	r24, 0xFE	; 254
    2ca4:	83 bf       	out	0x33, r24	; 51
  sei();
    2ca6:	78 94       	sei

  // Keep sleeping until watchdog actually fires.
  for( ; ; )
    {
    sleepPwrSaveWithBODDisabled();
    if(0 != _watchdogFired)
    2ca8:	80 91 c6 01 	lds	r24, 0x01C6
    2cac:	88 23       	and	r24, r24
    2cae:	49 f3       	breq	.-46     	; 0x2c82 <nap(signed char)+0x30>
      {
      wdt_disable(); // Avoid spurious wakeup later.
    2cb0:	88 e1       	ldi	r24, 0x18	; 24
    2cb2:	0f b6       	in	r0, 0x3f	; 63
    2cb4:	f8 94       	cli
    2cb6:	80 93 60 00 	sts	0x0060, r24
    2cba:	10 92 60 00 	sts	0x0060, r1
    2cbe:	0f be       	out	0x3f, r0	; 63
      return; // All done!
      }
    }
 }
    2cc0:	08 95       	ret

00002cc2 <idleCPU(signed char)>:
// Should reduce power consumption vs spinning the CPU >> 3x, though not nearly as much as nap().
// True iff watchdog timer expired; false if something else woke the CPU.
bool idleCPU(const int_fast8_t watchdogSleep)
  {
  // Watchdog should (already) be disabled on entry.
  _watchdogFired = 0;
    2cc2:	10 92 c6 01 	sts	0x01C6, r1
  wdt_enable(watchdogSleep);
    2cc6:	83 fd       	sbrc	r24, 3
    2cc8:	02 c0       	rjmp	.+4      	; 0x2cce <idleCPU(signed char)+0xc>
    2cca:	28 e0       	ldi	r18, 0x08	; 8
    2ccc:	01 c0       	rjmp	.+2      	; 0x2cd0 <idleCPU(signed char)+0xe>
    2cce:	28 e2       	ldi	r18, 0x28	; 40
    2cd0:	87 70       	andi	r24, 0x07	; 7
    2cd2:	28 2b       	or	r18, r24
    2cd4:	88 e1       	ldi	r24, 0x18	; 24
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	0f b6       	in	r0, 0x3f	; 63
    2cda:	f8 94       	cli
    2cdc:	a8 95       	wdr
    2cde:	80 93 60 00 	sts	0x0060, r24
    2ce2:	0f be       	out	0x3f, r0	; 63
    2ce4:	20 93 60 00 	sts	0x0060, r18
  WDTCSR |= (1 << WDIE);
    2ce8:	80 91 60 00 	lds	r24, 0x0060
    2cec:	80 64       	ori	r24, 0x40	; 64
    2cee:	80 93 60 00 	sts	0x0060, r24
  set_sleep_mode(SLEEP_MODE_IDLE); // Leave everything running but the CPU...
    2cf2:	83 b7       	in	r24, 0x33	; 51
    2cf4:	81 7f       	andi	r24, 0xF1	; 241
    2cf6:	83 bf       	out	0x33, r24	; 51
  sleep_mode();
    2cf8:	83 b7       	in	r24, 0x33	; 51
    2cfa:	81 60       	ori	r24, 0x01	; 1
    2cfc:	83 bf       	out	0x33, r24	; 51
    2cfe:	88 95       	sleep
    2d00:	83 b7       	in	r24, 0x33	; 51
    2d02:	8e 7f       	andi	r24, 0xFE	; 254
    2d04:	83 bf       	out	0x33, r24	; 51
  //sleep_disable();
  wdt_disable();
    2d06:	88 e1       	ldi	r24, 0x18	; 24
    2d08:	0f b6       	in	r0, 0x3f	; 63
    2d0a:	f8 94       	cli
    2d0c:	80 93 60 00 	sts	0x0060, r24
    2d10:	10 92 60 00 	sts	0x0060, r1
    2d14:	0f be       	out	0x3f, r0	; 63
  return(0 != _watchdogFired);
    2d16:	80 91 c6 01 	lds	r24, 0x01C6
    2d1a:	81 11       	cpse	r24, r1
    2d1c:	81 e0       	ldi	r24, 0x01	; 1
  }
    2d1e:	08 95       	ret

00002d20 <__vector_21>:
  }


// Allow wake from (lower-power) sleep while ADC is running.
static volatile bool ADC_complete;
ISR(ADC_vect) { ADC_complete = true; }
    2d20:	1f 92       	push	r1
    2d22:	0f 92       	push	r0
    2d24:	0f b6       	in	r0, 0x3f	; 63
    2d26:	0f 92       	push	r0
    2d28:	11 24       	eor	r1, r1
    2d2a:	8f 93       	push	r24
    2d2c:	81 e0       	ldi	r24, 0x01	; 1
    2d2e:	80 93 ca 01 	sts	0x01CA, r24
    2d32:	8f 91       	pop	r24
    2d34:	0f 90       	pop	r0
    2d36:	0f be       	out	0x3f, r0	; 63
    2d38:	0f 90       	pop	r0
    2d3a:	1f 90       	pop	r1
    2d3c:	18 95       	reti

00002d3e <_analogueNoiseReducedReadM(unsigned char, signed char)>:

// Read ADC/analogue input with reduced noise if possible, in range [0,1023].
//   * admux  is the value to set ADMUX to
//   * samples  maximum number of samples to take (if one, nap() before); strictly positive
// Sets sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
static uint16_t _analogueNoiseReducedReadM(uint8_t admux, int8_t samples = 3)
    2d3e:	0f 93       	push	r16
    2d40:	1f 93       	push	r17
    2d42:	98 2f       	mov	r25, r24
    2d44:	16 2f       	mov	r17, r22
// If ADC was disabled, power it up, do Serial.begin(), and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownSerial() may be advisable.
bool powerUpADCIfDisabled()
  {
  if(!(PRR & _BV(PRADC))) { return(false); }
    2d46:	80 91 64 00 	lds	r24, 0x0064
    2d4a:	80 fd       	sbrc	r24, 0
    2d4c:	02 c0       	rjmp	.+4      	; 0x2d52 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x14>
    2d4e:	00 e0       	ldi	r16, 0x00	; 0
    2d50:	0b c0       	rjmp	.+22     	; 0x2d68 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x2a>
  PRR &= ~_BV(PRADC); // Enable the ADC.
    2d52:	80 91 64 00 	lds	r24, 0x0064
    2d56:	8e 7f       	andi	r24, 0xFE	; 254
    2d58:	80 93 64 00 	sts	0x0064, r24
  ADCSRA |= _BV(ADEN);
    2d5c:	80 91 7a 00 	lds	r24, 0x007A
    2d60:	80 68       	ori	r24, 0x80	; 128
    2d62:	80 93 7a 00 	sts	0x007A, r24
    2d66:	01 e0       	ldi	r16, 0x01	; 1
//   * samples  maximum number of samples to take (if one, nap() before); strictly positive
// Sets sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
static uint16_t _analogueNoiseReducedReadM(uint8_t admux, int8_t samples = 3)
  {
  const bool neededEnable = powerUpADCIfDisabled();
  ADMUX = admux;
    2d68:	90 93 7c 00 	sts	0x007C, r25
  if(samples < 2) { nap(WDTO_15MS); } // Allow plenty of time for things to settle if not taking multiple samples.
    2d6c:	12 30       	cpi	r17, 0x02	; 2
    2d6e:	1c f4       	brge	.+6      	; 0x2d76 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x38>
    2d70:	80 e0       	ldi	r24, 0x00	; 0
    2d72:	0e 94 29 16 	call	0x2c52	; 0x2c52 <nap(signed char)>
  set_sleep_mode(SLEEP_MODE_ADC);
    2d76:	83 b7       	in	r24, 0x33	; 51
    2d78:	81 7f       	andi	r24, 0xF1	; 241
    2d7a:	82 60       	ori	r24, 0x02	; 2
    2d7c:	83 bf       	out	0x33, r24	; 51
  ADCSRB = 0; // Enable free-running mode.
    2d7e:	10 92 7b 00 	sts	0x007B, r1
  bitWrite(ADCSRA, ADATE, (samples>1)); // Enable ADC auto-trigger iff wanting multiple samples.
    2d82:	12 30       	cpi	r17, 0x02	; 2
    2d84:	24 f0       	brlt	.+8      	; 0x2d8e <_analogueNoiseReducedReadM(unsigned char, signed char)+0x50>
    2d86:	80 91 7a 00 	lds	r24, 0x007A
    2d8a:	80 62       	ori	r24, 0x20	; 32
    2d8c:	03 c0       	rjmp	.+6      	; 0x2d94 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x56>
    2d8e:	80 91 7a 00 	lds	r24, 0x007A
    2d92:	8f 7d       	andi	r24, 0xDF	; 223
    2d94:	80 93 7a 00 	sts	0x007A, r24
  bitSet(ADCSRA, ADIE); // Turn on ADC interrupt.
    2d98:	80 91 7a 00 	lds	r24, 0x007A
    2d9c:	88 60       	ori	r24, 0x08	; 8
    2d9e:	80 93 7a 00 	sts	0x007A, r24
  bitSet(ADCSRA, ADSC); // Start conversion(s).
    2da2:	80 91 7a 00 	lds	r24, 0x007A
    2da6:	80 64       	ori	r24, 0x40	; 64
    2da8:	80 93 7a 00 	sts	0x007A, r24
    2dac:	4f ef       	ldi	r20, 0xFF	; 255
    2dae:	9f ef       	ldi	r25, 0xFF	; 255
    2db0:	21 c0       	rjmp	.+66     	; 0x2df4 <_analogueNoiseReducedReadM(unsigned char, signed char)+0xb6>
  uint8_t oldADCL = 0xff;
  uint8_t oldADCH = 0xff; // Ensure that a second sample will get taken if multiple samples have been requested.
  // Usually take several readings to improve accuracy.  Discard all but the last...
  while(--samples >= 0)
      {
      ADC_complete = false;
    2db2:	10 92 ca 01 	sts	0x01CA, r1
    2db6:	07 c0       	rjmp	.+14     	; 0x2dc6 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x88>
      while(!ADC_complete) { sleep_mode(); }
    2db8:	83 b7       	in	r24, 0x33	; 51
    2dba:	81 60       	ori	r24, 0x01	; 1
    2dbc:	83 bf       	out	0x33, r24	; 51
    2dbe:	88 95       	sleep
    2dc0:	83 b7       	in	r24, 0x33	; 51
    2dc2:	8e 7f       	andi	r24, 0xFE	; 254
    2dc4:	83 bf       	out	0x33, r24	; 51
    2dc6:	80 91 ca 01 	lds	r24, 0x01CA
    2dca:	88 23       	and	r24, r24
    2dcc:	a9 f3       	breq	.-22     	; 0x2db8 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x7a>
      const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
    2dce:	30 91 78 00 	lds	r19, 0x0078
      const uint8_t h = ADCH; // Capture the high byte.
    2dd2:	20 91 79 00 	lds	r18, 0x0079
      if((h == oldADCH) && (l == oldADCL)) { break; } // Stop now if result seems to have settled.
    2dd6:	29 17       	cp	r18, r25
    2dd8:	11 f4       	brne	.+4      	; 0x2dde <_analogueNoiseReducedReadM(unsigned char, signed char)+0xa0>
    2dda:	34 17       	cp	r19, r20
    2ddc:	71 f0       	breq	.+28     	; 0x2dfa <_analogueNoiseReducedReadM(unsigned char, signed char)+0xbc>
      oldADCL = l;
      oldADCH = h;
      _adcNoise = (_adcNoise >> 1) + (l ^ h) + (__TIME__[7] & 0xf); // Capture a little entropy.
    2dde:	90 91 c7 01 	lds	r25, 0x01C7
    2de2:	82 2f       	mov	r24, r18
    2de4:	83 27       	eor	r24, r19
    2de6:	8e 5f       	subi	r24, 0xFE	; 254
    2de8:	96 95       	lsr	r25
    2dea:	98 0f       	add	r25, r24
    2dec:	90 93 c7 01 	sts	0x01C7, r25
    2df0:	92 2f       	mov	r25, r18
    2df2:	43 2f       	mov	r20, r19
  bitSet(ADCSRA, ADIE); // Turn on ADC interrupt.
  bitSet(ADCSRA, ADSC); // Start conversion(s).
  uint8_t oldADCL = 0xff;
  uint8_t oldADCH = 0xff; // Ensure that a second sample will get taken if multiple samples have been requested.
  // Usually take several readings to improve accuracy.  Discard all but the last...
  while(--samples >= 0)
    2df4:	11 50       	subi	r17, 0x01	; 1
    2df6:	17 ff       	sbrs	r17, 7
    2df8:	dc cf       	rjmp	.-72     	; 0x2db2 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x74>
      if((h == oldADCH) && (l == oldADCL)) { break; } // Stop now if result seems to have settled.
      oldADCL = l;
      oldADCH = h;
      _adcNoise = (_adcNoise >> 1) + (l ^ h) + (__TIME__[7] & 0xf); // Capture a little entropy.
      }
  bitClear(ADCSRA, ADIE); // Turn off ADC interrupt.
    2dfa:	80 91 7a 00 	lds	r24, 0x007A
    2dfe:	87 7f       	andi	r24, 0xF7	; 247
    2e00:	80 93 7a 00 	sts	0x007A, r24
  bitClear(ADCSRA, ADATE); // Turn off ADC auto-trigger.
    2e04:	80 91 7a 00 	lds	r24, 0x007A
    2e08:	8f 7d       	andi	r24, 0xDF	; 223
    2e0a:	80 93 7a 00 	sts	0x007A, r24
  //sleep_disable();
  const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
    2e0e:	20 91 78 00 	lds	r18, 0x0078
  const uint8_t h = ADCH; // Capture the high byte.
    2e12:	40 91 79 00 	lds	r20, 0x0079
  if(neededEnable) { powerDownADC(); }
    2e16:	00 23       	and	r16, r16
    2e18:	51 f0       	breq	.+20     	; 0x2e2e <_analogueNoiseReducedReadM(unsigned char, signed char)+0xf0>
  }
    
// Power ADC down.
void powerDownADC()
  {
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
    2e1a:	80 91 7a 00 	lds	r24, 0x007A
    2e1e:	8f 77       	andi	r24, 0x7F	; 127
    2e20:	80 93 7a 00 	sts	0x007A, r24
  PRR |= _BV(PRADC); // Disable the ADC.
    2e24:	80 91 64 00 	lds	r24, 0x0064
    2e28:	81 60       	ori	r24, 0x01	; 1
    2e2a:	80 93 64 00 	sts	0x0064, r24
    2e2e:	94 2f       	mov	r25, r20
    2e30:	80 e0       	ldi	r24, 0x00	; 0
    2e32:	30 e0       	ldi	r19, 0x00	; 0
    2e34:	28 2b       	or	r18, r24
    2e36:	39 2b       	or	r19, r25
  //sleep_disable();
  const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
  const uint8_t h = ADCH; // Capture the high byte.
  if(neededEnable) { powerDownADC(); }
  return((h << 8) | l);
  }
    2e38:	c9 01       	movw	r24, r18
    2e3a:	1f 91       	pop	r17
    2e3c:	0f 91       	pop	r16
    2e3e:	08 95       	ret

00002e40 <analogueNoiseReducedRead(int, unsigned char)>:
// Read ADC/analogue input with reduced noise if possible, in range [0,1023].
//   * mode  is the analogue reference, eg DEFAULT (Vcc).
// May set sleep mode to SLEEP_MODE_ADC, and disable sleep on exit.
// Nominally equivalent to analogReference(mode); return(analogRead(pinNumber));
uint16_t analogueNoiseReducedRead(int pinNumber, uint8_t mode)
  { return(_analogueNoiseReducedReadM((mode << 6) | (pinNumber & 7))); }
    2e40:	62 95       	swap	r22
    2e42:	66 0f       	add	r22, r22
    2e44:	66 0f       	add	r22, r22
    2e46:	60 7c       	andi	r22, 0xC0	; 192
    2e48:	87 70       	andi	r24, 0x07	; 7
    2e4a:	86 2b       	or	r24, r22
    2e4c:	63 e0       	ldi	r22, 0x03	; 3
    2e4e:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <_analogueNoiseReducedReadM(unsigned char, signed char)>
    2e52:	08 95       	ret

00002e54 <isBatteryLow()>:

// True if battery voltage was low when last read.
// For a 2xAA NiMH configuration this is ~2.0V, where the BOD may force a reset at 1.8V.
static bool batteryLow; // Initially false.
bool isBatteryLow() { return(batteryLow); }
    2e54:	80 91 cb 01 	lds	r24, 0x01CB
    2e58:	08 95       	ret

00002e5a <getBatterymV()>:
// Last-read battery voltage.
static uint16_t batterymV;

// Get power supply voltage in mV as last read by readBatterymV(); non-negative, intially zero until first readBatterymV().
uint16_t getBatterymV() { return(batterymV); }
    2e5a:	80 91 c8 01 	lds	r24, 0x01C8
    2e5e:	90 91 c9 01 	lds	r25, 0x01C9
    2e62:	08 95       	ret

00002e64 <read1V1wrtBattery()>:

// Measure internal bandgap (1.1V nominal, 1.0--1.2V) as fraction of Vcc [0,1023].
uint16_t read1V1wrtBattery() { return(_analogueNoiseReducedReadM(_BV(REFS0) | 14)); }
    2e64:	8e e4       	ldi	r24, 0x4E	; 78
    2e66:	63 e0       	ldi	r22, 0x03	; 3
    2e68:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <_analogueNoiseReducedReadM(unsigned char, signed char)>
    2e6c:	08 95       	ret

00002e6e <readBatterymV()>:
// Only accurate to +/- 10%.
// May set sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
uint16_t readBatterymV()
  {
  // Measure internal bandgap (1.1V nominal, 1.0--1.2V) as fraction of Vcc.
  const uint16_t raw = read1V1wrtBattery();
    2e6e:	0e 94 32 17 	call	0x2e64	; 0x2e64 <read1V1wrtBattery()>
    2e72:	bc 01       	movw	r22, r24
  // If Vcc was 1.1V ADC would give 1023.
  // If Vcc was 2.2V ADC would give 511.
  const uint16_t result = ((1023U<<6) / raw) * (1100U>>6);
    2e74:	80 ec       	ldi	r24, 0xC0	; 192
    2e76:	9f ef       	ldi	r25, 0xFF	; 255
    2e78:	0e 94 fb 38 	call	0x71f6	; 0x71f6 <__udivmodhi4>
    2e7c:	9b 01       	movw	r18, r22
    2e7e:	84 e0       	ldi	r24, 0x04	; 4
    2e80:	22 0f       	add	r18, r18
    2e82:	33 1f       	adc	r19, r19
    2e84:	8a 95       	dec	r24
    2e86:	e1 f7       	brne	.-8      	; 0x2e80 <readBatterymV()+0x12>
    2e88:	26 0f       	add	r18, r22
    2e8a:	37 1f       	adc	r19, r23
  batterymV = result;
    2e8c:	30 93 c9 01 	sts	0x01C9, r19
    2e90:	20 93 c8 01 	sts	0x01C8, r18
  batteryLow = (result < BATTERY_LOW_MV); // 
    2e94:	10 92 cb 01 	sts	0x01CB, r1
    2e98:	88 e0       	ldi	r24, 0x08	; 8
    2e9a:	24 33       	cpi	r18, 0x34	; 52
    2e9c:	38 07       	cpc	r19, r24
    2e9e:	18 f4       	brcc	.+6      	; 0x2ea6 <readBatterymV()+0x38>
    2ea0:	81 e0       	ldi	r24, 0x01	; 1
    2ea2:	80 93 cb 01 	sts	0x01CB, r24
  DEBUG_SERIAL_PRINT(raw);
  if(batteryLow) { DEBUG_SERIAL_PRINT_FLASHSTRING(" LOW"); }
  DEBUG_SERIAL_PRINTLN();
#endif
  return(result);
  }
    2ea6:	c9 01       	movw	r24, r18
    2ea8:	08 95       	ret

00002eaa <noisyADCRead()>:
// If ADC was disabled, power it up, do Serial.begin(), and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownSerial() may be advisable.
bool powerUpADCIfDisabled()
  {
  if(!(PRR & _BV(PRADC))) { return(false); }
    2eaa:	80 91 64 00 	lds	r24, 0x0064
    2eae:	80 fd       	sbrc	r24, 0
    2eb0:	02 c0       	rjmp	.+4      	; 0x2eb6 <noisyADCRead()+0xc>
    2eb2:	40 e0       	ldi	r20, 0x00	; 0
    2eb4:	0b c0       	rjmp	.+22     	; 0x2ecc <noisyADCRead()+0x22>
  PRR &= ~_BV(PRADC); // Enable the ADC.
    2eb6:	80 91 64 00 	lds	r24, 0x0064
    2eba:	8e 7f       	andi	r24, 0xFE	; 254
    2ebc:	80 93 64 00 	sts	0x0064, r24
  ADCSRA |= _BV(ADEN);
    2ec0:	80 91 7a 00 	lds	r24, 0x007A
    2ec4:	80 68       	ori	r24, 0x80	; 128
    2ec6:	80 93 7a 00 	sts	0x007A, r24
    2eca:	41 e0       	ldi	r20, 0x01	; 1
// If defined, update _adcNoise value to make noisyADCRead() output at least a poor PRNG if called in a loop, though might disguise underlying problems.
//#define CATCH_OTHER_NOISE_DURING_NAR // May hide underlying weakness if defined.
uint8_t noisyADCRead()
  {
  const bool neededEnable = powerUpADCIfDisabled();
  ADMUX = _BV(REFS0) | 14; // Bandgap vs Vcc.
    2ecc:	8e e4       	ldi	r24, 0x4E	; 78
    2ece:	80 93 7c 00 	sts	0x007C, r24
  ADCSRB = 0; // Enable free-running mode.
    2ed2:	10 92 7b 00 	sts	0x007B, r1
  bitWrite(ADCSRA, ADATE, 1); // Multiple samples required.
    2ed6:	80 91 7a 00 	lds	r24, 0x007A
    2eda:	80 62       	ori	r24, 0x20	; 32
    2edc:	80 93 7a 00 	sts	0x007A, r24
  ADC_complete = false;
    2ee0:	10 92 ca 01 	sts	0x01CA, r1
  bitSet(ADCSRA, ADIE); // Turn on ADC interrupt.
    2ee4:	80 91 7a 00 	lds	r24, 0x007A
    2ee8:	88 60       	ori	r24, 0x08	; 8
    2eea:	80 93 7a 00 	sts	0x007A, r24
  bitSet(ADCSRA, ADSC); // Start conversion.
    2eee:	80 91 7a 00 	lds	r24, 0x007A
    2ef2:	80 64       	ori	r24, 0x40	; 64
    2ef4:	80 93 7a 00 	sts	0x007A, r24
    2ef8:	90 e0       	ldi	r25, 0x00	; 0
    2efa:	01 c0       	rjmp	.+2      	; 0x2efe <noisyADCRead()+0x54>
  uint8_t count = 0;
  while(!ADC_complete) { ++count; } // Busy wait while 'timing' the ADC conversion.
    2efc:	9f 5f       	subi	r25, 0xFF	; 255
    2efe:	80 91 ca 01 	lds	r24, 0x01CA
    2f02:	88 23       	and	r24, r24
    2f04:	d9 f3       	breq	.-10     	; 0x2efc <noisyADCRead()+0x52>
  const uint8_t l1 = ADCL; // Capture the low byte and latch the high byte.
    2f06:	50 91 78 00 	lds	r21, 0x0078
  const uint8_t h1 = ADCH; // Capture the high byte.
    2f0a:	20 91 79 00 	lds	r18, 0x0079
#if defined(CATCH_OTHER_NOISE_DURING_NAR)
  uint8_t result = _crc_ibutton_update(_adcNoise++, h1 ^ count);
#else
  uint8_t result = (h1 << 5) + count;
    2f0e:	22 95       	swap	r18
    2f10:	22 0f       	add	r18, r18
    2f12:	20 7e       	andi	r18, 0xE0	; 224
    2f14:	29 0f       	add	r18, r25
#endif
  set_sleep_mode(SLEEP_MODE_ADC); // Take further samples in more energy-efficient mode.
    2f16:	83 b7       	in	r24, 0x33	; 51
    2f18:	81 7f       	andi	r24, 0xF1	; 241
    2f1a:	82 60       	ori	r24, 0x02	; 2
    2f1c:	83 bf       	out	0x33, r24	; 51
    2f1e:	30 e0       	ldi	r19, 0x00	; 0
  // Sample all possible ADC inputs relative to Vcc, whatever the inputs may be connected to.
  // Assumed never to do any harm, eg physical damage or to disturb I/O setup.
  for(uint8_t i = 0; i < 8; ++i)
    {
    ADMUX = (i & 7) | (DEFAULT << 6); // Switching MUX after sample has started, which may add further noise.
    2f20:	83 2f       	mov	r24, r19
    2f22:	87 70       	andi	r24, 0x07	; 7
    2f24:	80 64       	ori	r24, 0x40	; 64
    2f26:	80 93 7c 00 	sts	0x007C, r24
    ADC_complete = false;
    2f2a:	10 92 ca 01 	sts	0x01CA, r1
    2f2e:	07 c0       	rjmp	.+14     	; 0x2f3e <noisyADCRead()+0x94>
    while(!ADC_complete)
      {
#if defined(CATCH_OTHER_NOISE_DURING_NAR)       
      result -= 37; /* prime; may capture unrelated interrupt wakeups... */
#endif
      sleep_mode();
    2f30:	83 b7       	in	r24, 0x33	; 51
    2f32:	81 60       	ori	r24, 0x01	; 1
    2f34:	83 bf       	out	0x33, r24	; 51
    2f36:	88 95       	sleep
    2f38:	83 b7       	in	r24, 0x33	; 51
    2f3a:	8e 7f       	andi	r24, 0xFE	; 254
    2f3c:	83 bf       	out	0x33, r24	; 51
  // Assumed never to do any harm, eg physical damage or to disturb I/O setup.
  for(uint8_t i = 0; i < 8; ++i)
    {
    ADMUX = (i & 7) | (DEFAULT << 6); // Switching MUX after sample has started, which may add further noise.
    ADC_complete = false;
    while(!ADC_complete)
    2f3e:	80 91 ca 01 	lds	r24, 0x01CA
    2f42:	88 23       	and	r24, r24
    2f44:	a9 f3       	breq	.-22     	; 0x2f30 <noisyADCRead()+0x86>
#if defined(CATCH_OTHER_NOISE_DURING_NAR)       
      result -= 37; /* prime; may capture unrelated interrupt wakeups... */
#endif
      sleep_mode();
      }
    const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
    2f46:	90 91 78 00 	lds	r25, 0x0078
    const uint8_t h = ADCH; // Capture the high byte.
    2f4a:	80 91 79 00 	lds	r24, 0x0079
		"	brtc	2f" "\n\t"
		"	eor	%0, %2" "\n\t"
		"2:	dec	%1" "\n\t"
		"	brne	1b" "\n\t"
		: "=r" (__crc), "=d" (__i), "=d" (__pattern)
		: "0" (__crc), "r" (__data));
    2f4e:	89 27       	eor	r24, r25
    2f50:	28 27       	eor	r18, r24
    2f52:	88 e0       	ldi	r24, 0x08	; 8
    2f54:	9c e8       	ldi	r25, 0x8C	; 140
    2f56:	20 fb       	bst	r18, 0
    2f58:	26 95       	lsr	r18
    2f5a:	0e f4       	brtc	.+2      	; 0x2f5e <noisyADCRead()+0xb4>
    2f5c:	29 27       	eor	r18, r25
    2f5e:	8a 95       	dec	r24
    2f60:	d1 f7       	brne	.-12     	; 0x2f56 <noisyADCRead()+0xac>
  uint8_t result = (h1 << 5) + count;
#endif
  set_sleep_mode(SLEEP_MODE_ADC); // Take further samples in more energy-efficient mode.
  // Sample all possible ADC inputs relative to Vcc, whatever the inputs may be connected to.
  // Assumed never to do any harm, eg physical damage or to disturb I/O setup.
  for(uint8_t i = 0; i < 8; ++i)
    2f62:	3f 5f       	subi	r19, 0xFF	; 255
    2f64:	38 30       	cpi	r19, 0x08	; 8
    2f66:	e1 f6       	brne	.-72     	; 0x2f20 <noisyADCRead()+0x76>
      }
    const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
    const uint8_t h = ADCH; // Capture the high byte.
    result = _crc_ibutton_update(result, l ^ h); // A thorough hash.
    }
  bitClear(ADCSRA, ADIE); // Turn off ADC interrupt.
    2f68:	80 91 7a 00 	lds	r24, 0x007A
    2f6c:	87 7f       	andi	r24, 0xF7	; 247
    2f6e:	80 93 7a 00 	sts	0x007A, r24
  bitClear(ADCSRA, ADATE); // Turn off ADC auto-trigger.
    2f72:	80 91 7a 00 	lds	r24, 0x007A
    2f76:	8f 7d       	andi	r24, 0xDF	; 223
    2f78:	80 93 7a 00 	sts	0x007A, r24
  if(neededEnable) { powerDownADC(); }
    2f7c:	44 23       	and	r20, r20
    2f7e:	51 f0       	breq	.+20     	; 0x2f94 <noisyADCRead()+0xea>
  }
    
// Power ADC down.
void powerDownADC()
  {
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
    2f80:	80 91 7a 00 	lds	r24, 0x007A
    2f84:	8f 77       	andi	r24, 0x7F	; 127
    2f86:	80 93 7a 00 	sts	0x007A, r24
  PRR |= _BV(PRADC); // Disable the ADC.
    2f8a:	80 91 64 00 	lds	r24, 0x0064
    2f8e:	81 60       	ori	r24, 0x01	; 1
    2f90:	80 93 64 00 	sts	0x0064, r24
  bitClear(ADCSRA, ADIE); // Turn off ADC interrupt.
  bitClear(ADCSRA, ADATE); // Turn off ADC auto-trigger.
  if(neededEnable) { powerDownADC(); }
  result ^= l1; // Ensure that the actual Vcc raw lsbs do get folded in to the final result.
  return(result); // Use all the bits collected.
  }
    2f94:	82 2f       	mov	r24, r18
    2f96:	85 27       	eor	r24, r21
    2f98:	08 95       	ret

00002f9a <readInternalTemperatureC16()>:
// May set sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
int readInternalTemperatureC16()
  {
  // Measure internal temperature sensor against internal voltage source.
  // Response is ~1mv/C with 0C at ~289mV according to the data sheet.
  const uint16_t raw = _analogueNoiseReducedReadM(_BV(REFS1) | _BV(REFS0) | _BV(MUX3), 1);
    2f9a:	88 ec       	ldi	r24, 0xC8	; 200
    2f9c:	61 e0       	ldi	r22, 0x01	; 1
    2f9e:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <_analogueNoiseReducedReadM(unsigned char, signed char)>
    2fa2:	84 54       	subi	r24, 0x44	; 68
    2fa4:	91 40       	sbci	r25, 0x01	; 1
    2fa6:	22 ed       	ldi	r18, 0xD2	; 210
    2fa8:	30 e0       	ldi	r19, 0x00	; 0
    2faa:	a9 01       	movw	r20, r18
    2fac:	84 9f       	mul	r24, r20
    2fae:	90 01       	movw	r18, r0
    2fb0:	85 9f       	mul	r24, r21
    2fb2:	30 0d       	add	r19, r0
    2fb4:	94 9f       	mul	r25, r20
    2fb6:	30 0d       	add	r19, r0
    2fb8:	11 24       	eor	r1, r1
    2fba:	94 e0       	ldi	r25, 0x04	; 4
    2fbc:	35 95       	asr	r19
    2fbe:	27 95       	ror	r18
    2fc0:	9a 95       	dec	r25
    2fc2:	e1 f7       	brne	.-8      	; 0x2fbc <readInternalTemperatureC16()+0x22>
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("");
#endif
  //const int degC = (raw - 328) ; // Crude fast adjustment for one sensor at ~20C (DHD20130429).
  const int degC = ((((int)raw) - 324) * 210) >> 4; // Slightly less crude adjustment, see http://playground.arduino.cc//Main/InternalTemperatureSensor
  return(degC);
  }
    2fc4:	c9 01       	movw	r24, r18
    2fc6:	08 95       	ret

00002fc8 <powerDownTWI()>:
  }

// Power down TWI (I2C).
void powerDownTWI()
  {
  TWCR &= ~_BV(TWEN); // Disable TWI.
    2fc8:	ec eb       	ldi	r30, 0xBC	; 188
    2fca:	f0 e0       	ldi	r31, 0x00	; 0
    2fcc:	80 81       	ld	r24, Z
    2fce:	8b 7f       	andi	r24, 0xFB	; 251
    2fd0:	80 83       	st	Z, r24
  PRR |= _BV(PRTWI); // Disable TWI power.
    2fd2:	e4 e6       	ldi	r30, 0x64	; 100
    2fd4:	f0 e0       	ldi	r31, 0x00	; 0
    2fd6:	80 81       	ld	r24, Z
    2fd8:	80 68       	ori	r24, 0x80	; 128
    2fda:	80 83       	st	Z, r24
  //digitalWrite(SCL, 0);

  // Convert to hi-Z inputs.
  //pinMode(SDA, INPUT);
  //pinMode(SCL, INPUT);
  }
    2fdc:	08 95       	ret

00002fde <clockJitterWDT()>:
// Expensive in terms of CPU time and thus energy.
// TODO: may be able to reduce clock speed to lower energy cost while still detecting useful jitter.
uint_fast8_t clockJitterWDT()
  {
  // Watchdog should be (already) be disabled on entry.
  _watchdogFired = false;
    2fde:	10 92 c6 01 	sts	0x01C6, r1
  wdt_enable(WDTO_15MS); // Set watchdog for minimum time.
    2fe2:	88 e0       	ldi	r24, 0x08	; 8
    2fe4:	28 e1       	ldi	r18, 0x18	; 24
    2fe6:	30 e0       	ldi	r19, 0x00	; 0
    2fe8:	0f b6       	in	r0, 0x3f	; 63
    2fea:	f8 94       	cli
    2fec:	a8 95       	wdr
    2fee:	20 93 60 00 	sts	0x0060, r18
    2ff2:	0f be       	out	0x3f, r0	; 63
    2ff4:	80 93 60 00 	sts	0x0060, r24
  WDTCSR |= (1 << WDIE);
    2ff8:	80 91 60 00 	lds	r24, 0x0060
    2ffc:	80 64       	ori	r24, 0x40	; 64
    2ffe:	80 93 60 00 	sts	0x0060, r24
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	01 c0       	rjmp	.+2      	; 0x3008 <clockJitterWDT()+0x2a>
  uint_fast8_t count = 0;
  while(!_watchdogFired) { ++count; } // Effectively count CPU cycles until WDT fires.
    3006:	9f 5f       	subi	r25, 0xFF	; 255
    3008:	80 91 c6 01 	lds	r24, 0x01C6
    300c:	88 23       	and	r24, r24
    300e:	d9 f3       	breq	.-10     	; 0x3006 <clockJitterWDT()+0x28>
  return(count);
  }
    3010:	89 2f       	mov	r24, r25
    3012:	08 95       	ret

00003014 <clockJitterEntropyByte()>:
// Expensive in terms of CPU time and thus energy, though possibly more efficient than basic clockJitterXXX() routines.
// Internally this uses a CRC as a relatively fast and hopefully effective hash over intermediate values.
// Note the that rejection of repeat values will be less effective with two interleaved gathering mechanisms
// as the interaction while not necessarily adding genuine entropy, will make counts differ between runs.
// DHD20130519: measured as taking ~63ms to run, ie ~8ms per bit gathered.
uint_fast8_t clockJitterEntropyByte()
    3014:	1f 93       	push	r17

  uint_fast8_t result = 0;
  uint_fast8_t countR = 0, lastCountR = 0;
  uint_fast8_t countW = 0, lastCountW = 0;

  const uint8_t t0 = TCNT2; // Wait for sub-cycle timer to roll.
    3016:	90 91 b2 00 	lds	r25, 0x00B2
    301a:	40 e0       	ldi	r20, 0x00	; 0
    301c:	50 e0       	ldi	r21, 0x00	; 0
    301e:	02 c0       	rjmp	.+4      	; 0x3024 <clockJitterEntropyByte()+0x10>
  while(t0 == TCNT2) { ++hash; } // Possibly capture some entropy from recent program activity/timing.
    3020:	4f 5f       	subi	r20, 0xFF	; 255
    3022:	5f 4f       	sbci	r21, 0xFF	; 255
    3024:	80 91 b2 00 	lds	r24, 0x00B2
    3028:	98 17       	cp	r25, r24
    302a:	d1 f3       	breq	.-12     	; 0x3020 <clockJitterEntropyByte()+0xc>
  uint8_t t1 = TCNT2;
    302c:	f0 91 b2 00 	lds	r31, 0x00B2

  _watchdogFired = 0;
    3030:	10 92 c6 01 	sts	0x01C6, r1
  wdt_enable(WDTO_15MS); // Start watchdog, with minimum timeout.
    3034:	88 e0       	ldi	r24, 0x08	; 8
    3036:	28 e1       	ldi	r18, 0x18	; 24
    3038:	30 e0       	ldi	r19, 0x00	; 0
    303a:	0f b6       	in	r0, 0x3f	; 63
    303c:	f8 94       	cli
    303e:	a8 95       	wdr
    3040:	20 93 60 00 	sts	0x0060, r18
    3044:	0f be       	out	0x3f, r0	; 63
    3046:	80 93 60 00 	sts	0x0060, r24
  WDTCSR |= (1 << WDIE);
    304a:	80 91 60 00 	lds	r24, 0x0060
    304e:	80 64       	ori	r24, 0x40	; 64
    3050:	80 93 60 00 	sts	0x0060, r24
    3054:	90 e0       	ldi	r25, 0x00	; 0
    3056:	60 e0       	ldi	r22, 0x00	; 0
    3058:	e0 e0       	ldi	r30, 0x00	; 0
    305a:	20 e0       	ldi	r18, 0x00	; 0
    305c:	38 e0       	ldi	r19, 0x08	; 8
    305e:	70 e0       	ldi	r23, 0x00	; 0
        if(--bitsLeft <= 0) { break; } // Got enough bits; stop now.
        lastCountW = countW;
        }
      countW = 0;
      _watchdogFired = 0;
      wdt_enable(WDTO_15MS); // Restart watchdog, with minimum timeout.
    3060:	a8 e1       	ldi	r26, 0x18	; 24
    3062:	b0 e0       	ldi	r27, 0x00	; 0
    3064:	18 e0       	ldi	r17, 0x08	; 8
  WDTCSR |= (1 << WDIE);
  int_fast8_t bitsLeft = 8; // Decrement when a bit is harvested...
  for( ; ; )
    {
    // Extract watchdog jitter vs CPU.
    if(!_watchdogFired) { ++countW; }
    3066:	80 91 c6 01 	lds	r24, 0x01C6
    306a:	88 23       	and	r24, r24
    306c:	11 f4       	brne	.+4      	; 0x3072 <clockJitterEntropyByte()+0x5e>
    306e:	2f 5f       	subi	r18, 0xFF	; 255
    3070:	2a c0       	rjmp	.+84     	; 0x30c6 <clockJitterEntropyByte()+0xb2>
    else // Watchdog fired.
      {
      if(countW != lastCountW) // Got a different value from last; assume one bit of entropy.
    3072:	27 17       	cp	r18, r23
    3074:	c1 f0       	breq	.+48     	; 0x30a6 <clockJitterEntropyByte()+0x92>
        "eor    %A0,__tmp_reg__"

        : "=d" (__ret)
        : "r" (__data), "0" (__crc)
        : "r0"
    );
    3076:	42 27       	eor	r20, r18
    3078:	04 2e       	mov	r0, r20
    307a:	42 95       	swap	r20
    307c:	40 7f       	andi	r20, 0xF0	; 240
    307e:	40 25       	eor	r20, r0
    3080:	05 2e       	mov	r0, r21
    3082:	54 2f       	mov	r21, r20
    3084:	42 95       	swap	r20
    3086:	4f 70       	andi	r20, 0x0F	; 15
    3088:	04 26       	eor	r0, r20
    308a:	46 95       	lsr	r20
    308c:	54 27       	eor	r21, r20
    308e:	45 27       	eor	r20, r21
    3090:	44 0f       	add	r20, r20
    3092:	44 0f       	add	r20, r20
    3094:	44 0f       	add	r20, r20
    3096:	40 25       	eor	r20, r0
        {
        hash = _crc_ccitt_update(hash, countW);
        result = (result << 1) ^ ((uint_fast8_t)hash); // Nominally capturing (at least) lsb of hash.
    3098:	99 0f       	add	r25, r25
    309a:	94 27       	eor	r25, r20
        if(--bitsLeft <= 0) { break; } // Got enough bits; stop now.
    309c:	31 50       	subi	r19, 0x01	; 1
    309e:	13 16       	cp	r1, r19
    30a0:	0c f0       	brlt	.+2      	; 0x30a4 <clockJitterEntropyByte()+0x90>
    30a2:	34 c0       	rjmp	.+104    	; 0x310c <clockJitterEntropyByte()+0xf8>
    30a4:	72 2f       	mov	r23, r18
        lastCountW = countW;
        }
      countW = 0;
      _watchdogFired = 0;
    30a6:	10 92 c6 01 	sts	0x01C6, r1
      wdt_enable(WDTO_15MS); // Restart watchdog, with minimum timeout.
    30aa:	0f b6       	in	r0, 0x3f	; 63
    30ac:	f8 94       	cli
    30ae:	a8 95       	wdr
    30b0:	a0 93 60 00 	sts	0x0060, r26
    30b4:	0f be       	out	0x3f, r0	; 63
    30b6:	10 93 60 00 	sts	0x0060, r17
      WDTCSR |= (1 << WDIE);
    30ba:	80 91 60 00 	lds	r24, 0x0060
    30be:	80 64       	ori	r24, 0x40	; 64
    30c0:	80 93 60 00 	sts	0x0060, r24
    30c4:	20 e0       	ldi	r18, 0x00	; 0
      }

    // Extract RTC jitter vs CPU.
    if(t1 == TCNT2) { --countR; }
    30c6:	80 91 b2 00 	lds	r24, 0x00B2
    30ca:	f8 17       	cp	r31, r24
    30cc:	11 f4       	brne	.+4      	; 0x30d2 <clockJitterEntropyByte()+0xbe>
    30ce:	61 50       	subi	r22, 0x01	; 1
    30d0:	ca cf       	rjmp	.-108    	; 0x3066 <clockJitterEntropyByte()+0x52>
    else // Sub-cycle timer rolled.
      {
      if(countR != lastCountR) // Got a different value from last; assume one bit of entropy.
    30d2:	6e 17       	cp	r22, r30
    30d4:	b9 f0       	breq	.+46     	; 0x3104 <clockJitterEntropyByte()+0xf0>
    30d6:	46 27       	eor	r20, r22
    30d8:	04 2e       	mov	r0, r20
    30da:	42 95       	swap	r20
    30dc:	40 7f       	andi	r20, 0xF0	; 240
    30de:	40 25       	eor	r20, r0
    30e0:	05 2e       	mov	r0, r21
    30e2:	54 2f       	mov	r21, r20
    30e4:	42 95       	swap	r20
    30e6:	4f 70       	andi	r20, 0x0F	; 15
    30e8:	04 26       	eor	r0, r20
    30ea:	46 95       	lsr	r20
    30ec:	54 27       	eor	r21, r20
    30ee:	45 27       	eor	r20, r21
    30f0:	44 0f       	add	r20, r20
    30f2:	44 0f       	add	r20, r20
    30f4:	44 0f       	add	r20, r20
    30f6:	40 25       	eor	r20, r0
        {
        hash = _crc_ccitt_update(hash, countR);
        result = (result << 1) ^ ((uint_fast8_t)hash); // Nominally capturing (at least) lsb of hash.
    30f8:	99 0f       	add	r25, r25
    30fa:	94 27       	eor	r25, r20
        if(--bitsLeft <= 0) { break; } // Got enough bits; stop now.
    30fc:	31 50       	subi	r19, 0x01	; 1
    30fe:	13 16       	cp	r1, r19
    3100:	2c f4       	brge	.+10     	; 0x310c <clockJitterEntropyByte()+0xf8>
    3102:	e6 2f       	mov	r30, r22
        lastCountR = countR;
        }
      countR = 0;
      t1 = TCNT2; // Set to look for next roll.
    3104:	f0 91 b2 00 	lds	r31, 0x00B2
    3108:	60 e0       	ldi	r22, 0x00	; 0
    310a:	ad cf       	rjmp	.-166    	; 0x3066 <clockJitterEntropyByte()+0x52>
      }
    }

  wdt_disable(); // Ensure no spurious WDT wakeup pending.
    310c:	88 e1       	ldi	r24, 0x18	; 24
    310e:	0f b6       	in	r0, 0x3f	; 63
    3110:	f8 94       	cli
    3112:	80 93 60 00 	sts	0x0060, r24
    3116:	10 92 60 00 	sts	0x0060, r1
    311a:	0f be       	out	0x3f, r0	; 63
  return(result);
  }
    311c:	89 2f       	mov	r24, r25
    311e:	1f 91       	pop	r17
    3120:	08 95       	ret

00003122 <captureEntropy1()>:
// Capture a little system entropy.
// This call should typically take << 1ms at 1MHz CPU.
// Does not change CPU clock speeds, mess with interrupts (other than possible brief blocking), or do I/O, or sleep.
// Should inject some noise into secure (TBD) and non-secure (RNG8) PRNGs.
void captureEntropy1()
  { seedRNG8(getSubCycleTime() ^ _adcNoise, cycleCountCPU() ^ batterymV, _watchdogFired); }
    3122:	20 91 b2 00 	lds	r18, 0x00B2
    3126:	80 91 c7 01 	lds	r24, 0x01C7
    312a:	66 b5       	in	r22, 0x26	; 38
    312c:	40 91 c6 01 	lds	r20, 0x01C6
    3130:	90 91 c8 01 	lds	r25, 0x01C8
    3134:	69 27       	eor	r22, r25
    3136:	82 27       	eor	r24, r18
    3138:	0e 94 fd 19 	call	0x33fa	; 0x33fa <seedRNG8(unsigned char, unsigned char, unsigned char)>
    313c:	08 95       	ret

0000313e <powerDownSPI()>:
  }

// Power down SPI.
void powerDownSPI()
  {
  SPCR &= ~_BV(SPE); // Disable SPI.
    313e:	8c b5       	in	r24, 0x2c	; 44
    3140:	8f 7b       	andi	r24, 0xBF	; 191
    3142:	8c bd       	out	0x2c, r24	; 44
  PRR |= _BV(PRSPI); // Power down...
    3144:	e4 e6       	ldi	r30, 0x64	; 100
    3146:	f0 e0       	ldi	r31, 0x00	; 0
    3148:	80 81       	ld	r24, Z
    314a:	84 60       	ori	r24, 0x04	; 4
    314c:	80 83       	st	Z, r24

  pinMode(PIN_SPI_nSS, OUTPUT); // Ensure that nSS is an output to avoid forcing SPI to slave mode by accident.
    314e:	8a e0       	ldi	r24, 0x0A	; 10
    3150:	61 e0       	ldi	r22, 0x01	; 1
    3152:	0e 94 d6 32 	call	0x65ac	; 0x65ac <pinMode>
  fastDigitalWrite(PIN_SPI_nSS, HIGH); // Ensure that nSS is HIGH and thus any slave deselected when powering up SPI.
    3156:	2a 9a       	sbi	0x05, 2	; 5

  // Avoid pins from floating when SPI is disabled.
  // Try to preserve general I/O direction and restore previous output values for outputs.
  pinMode(PIN_SPI_SCK, OUTPUT);
    3158:	8d e0       	ldi	r24, 0x0D	; 13
    315a:	61 e0       	ldi	r22, 0x01	; 1
    315c:	0e 94 d6 32 	call	0x65ac	; 0x65ac <pinMode>
  pinMode(PIN_SPI_MOSI, OUTPUT);
    3160:	8b e0       	ldi	r24, 0x0B	; 11
    3162:	61 e0       	ldi	r22, 0x01	; 1
    3164:	0e 94 d6 32 	call	0x65ac	; 0x65ac <pinMode>
  pinMode(PIN_SPI_MISO, INPUT_PULLUP);
    3168:	8c e0       	ldi	r24, 0x0C	; 12
    316a:	62 e0       	ldi	r22, 0x02	; 2
    316c:	0e 94 d6 32 	call	0x65ac	; 0x65ac <pinMode>

  // If sharing SPI SCK with LED indicator then return this pin to being an output (retaining previous value).
  //if(LED_HEATCALL == PIN_SPI_SCK) { pinMode(LED_HEATCALL, OUTPUT); }
  }
    3170:	08 95       	ret

00003172 <powerUpSPIIfDisabled()>:
// If SPI was disabled, power it up, enable it as master and with a sensible clock speed, etc, and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownSPI() may be advisable.
bool powerUpSPIIfDisabled()
  {
  if(!(PRR & _BV(PRSPI))) { return(false); }
    3172:	80 91 64 00 	lds	r24, 0x0064
    3176:	82 fd       	sbrc	r24, 2
    3178:	02 c0       	rjmp	.+4      	; 0x317e <powerUpSPIIfDisabled()+0xc>
    317a:	80 e0       	ldi	r24, 0x00	; 0
    317c:	08 95       	ret

  pinMode(PIN_SPI_nSS, OUTPUT); // Ensure that nSS is an output to avoid forcing SPI to slave mode by accident.
    317e:	8a e0       	ldi	r24, 0x0A	; 10
    3180:	61 e0       	ldi	r22, 0x01	; 1
    3182:	0e 94 d6 32 	call	0x65ac	; 0x65ac <pinMode>
  fastDigitalWrite(PIN_SPI_nSS, HIGH); // Ensure that nSS is HIGH and thus any slave deselected when powering up SPI.
    3186:	2a 9a       	sbi	0x05, 2	; 5

  PRR &= ~_BV(PRSPI); // Enable SPI power.
    3188:	80 91 64 00 	lds	r24, 0x0064
    318c:	8b 7f       	andi	r24, 0xFB	; 251
    318e:	80 93 64 00 	sts	0x0064, r24
  // Configure raw SPI to match better how it was used in PICAXE V0.09 code.
  // CPOL = 0, CPHA = 0
  // Enable SPI, set master mode, set speed.
  const uint8_t ENABLE_MASTER =  _BV(SPE) | _BV(MSTR);
#if F_CPU <= 2000000 // Needs minimum prescale (x2) with slow (<=2MHz) CPU clock.
  SPCR = ENABLE_MASTER; // 2x clock prescale for <=1MHz SPI clock from <=2MHz CPU clock (500kHz SPI @ 1MHz CPU).
    3192:	80 e5       	ldi	r24, 0x50	; 80
    3194:	8c bd       	out	0x2c, r24	; 44
  SPSR = _BV(SPI2X);
    3196:	81 e0       	ldi	r24, 0x01	; 1
    3198:	8d bd       	out	0x2d, r24	; 45
#else // Needs setting for fast (~16MHz) CPU clock.
  SPCR = _BV(SPR0) | ENABLE_MASTER; // 8x clock prescale for ~2MHz SPI clock from nominal ~16MHz CPU clock.
  SPSR = _BV(SPI2X);
#endif
  return(true);
  }
    319a:	08 95       	ret

0000319c <power_intermittent_peripherals_disable()>:
// Disable/remove power to intermittent peripherals.
// Switches the digital line to input with no pull-up (ie high-Z).
// There should be some sort of load to stop this floating.
void power_intermittent_peripherals_disable()
  {
  pinMode(IO_POWER_UP, INPUT);
    319c:	87 e0       	ldi	r24, 0x07	; 7
    319e:	60 e0       	ldi	r22, 0x00	; 0
    31a0:	0e 94 d6 32 	call	0x65ac	; 0x65ac <pinMode>
  }
    31a4:	08 95       	ret

000031a6 <minimisePowerWithoutSleep()>:
// to ensure that nothing power-hungry is accidentally left on.
// Any module that may need to run all the time should not be turned off here.
// May be called from panic(), so do not be too clever.
// Does NOT attempt to power down the radio, eg in case that needs to be left in RX mode.
// Does NOT attempt to power down the UART/serial.
void minimisePowerWithoutSleep()
    31a6:	0f 93       	push	r16
    31a8:	1f 93       	push	r17
  {
  // Disable the watchdog timer.
  wdt_disable();
    31aa:	88 e1       	ldi	r24, 0x18	; 24
    31ac:	0f b6       	in	r0, 0x3f	; 63
    31ae:	f8 94       	cli
    31b0:	80 93 60 00 	sts	0x0060, r24
    31b4:	10 92 60 00 	sts	0x0060, r1
    31b8:	0f be       	out	0x3f, r0	; 63
  
  // Ensure that external peripherals are powered down.
  power_intermittent_peripherals_disable();
    31ba:	0e 94 ce 18 	call	0x319c	; 0x319c <power_intermittent_peripherals_disable()>

  // Turn off analogue stuff that eats power.
  ADCSRA = 0; // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
    31be:	10 92 7a 00 	sts	0x007A, r1
  ACSR = (1<<ACD); // Disable the analog comparator.
    31c2:	80 e8       	ldi	r24, 0x80	; 128
    31c4:	80 bf       	out	0x30, r24	; 48
  DIDR0 = 0x3F; // Disable digital input buffers on all ADC0-ADC5 pins.
    31c6:	8f e3       	ldi	r24, 0x3F	; 63
    31c8:	80 93 7e 00 	sts	0x007E, r24
  DIDR1 = (1<<AIN1D)|(1<<AIN0D); // Disable digital input buffer on AIN1/0.
    31cc:	83 e0       	ldi	r24, 0x03	; 3
    31ce:	80 93 7f 00 	sts	0x007F, r24
  power_adc_disable();
    31d2:	04 e6       	ldi	r16, 0x64	; 100
    31d4:	10 e0       	ldi	r17, 0x00	; 0
    31d6:	f8 01       	movw	r30, r16
    31d8:	80 81       	ld	r24, Z
    31da:	81 60       	ori	r24, 0x01	; 1
    31dc:	80 83       	st	Z, r24

  // Ensure that SPI is powered down.
  powerDownSPI();
    31de:	0e 94 9f 18 	call	0x313e	; 0x313e <powerDownSPI()>
  }

// Power down TWI (I2C).
void powerDownTWI()
  {
  TWCR &= ~_BV(TWEN); // Disable TWI.
    31e2:	ec eb       	ldi	r30, 0xBC	; 188
    31e4:	f0 e0       	ldi	r31, 0x00	; 0
    31e6:	80 81       	ld	r24, Z
    31e8:	8b 7f       	andi	r24, 0xFB	; 251
    31ea:	80 83       	st	Z, r24
  PRR |= _BV(PRTWI); // Disable TWI power.
    31ec:	f8 01       	movw	r30, r16
    31ee:	80 81       	ld	r24, Z
    31f0:	80 68       	ori	r24, 0x80	; 128
    31f2:	80 83       	st	Z, r24

#if defined(DONT_USE_TIMER0)
  power_timer0_disable();
#endif

  power_timer1_disable();
    31f4:	80 81       	ld	r24, Z
    31f6:	88 60       	ori	r24, 0x08	; 8
    31f8:	80 83       	st	Z, r24

#ifndef WAKEUP_32768HZ_XTAL
  power_timer2_disable();
#endif
  }
    31fa:	1f 91       	pop	r17
    31fc:	0f 91       	pop	r16
    31fe:	08 95       	ret

00003200 <power_intermittent_peripherals_enable(bool)>:
// items powered direct from IO_POWER_UP may need no such wait.
//
// Switches the digital line to high then output (to avoid ever *discharging* the output cap).
// Note that with 100nF cap, and 330R (or lower) resistor from the output pin,
// then 1ms delay should be plenty for the voltage on the cap to settle.
void power_intermittent_peripherals_enable(bool waitUntilStable)
    3200:	1f 93       	push	r17
    3202:	18 2f       	mov	r17, r24
  {
  fastDigitalWrite(IO_POWER_UP, HIGH);
    3204:	5f 9a       	sbi	0x0b, 7	; 11
  pinMode(IO_POWER_UP, OUTPUT);
    3206:	87 e0       	ldi	r24, 0x07	; 7
    3208:	61 e0       	ldi	r22, 0x01	; 1
    320a:	0e 94 d6 32 	call	0x65ac	; 0x65ac <pinMode>
  // If requested, wait long enough that I/O peripheral power should be stable.
  // Wait in a relatively low-power way...
  if(waitUntilStable) { sleepLowPowerMs(1); }
    320e:	11 23       	and	r17, r17
    3210:	21 f0       	breq	.+8      	; 0x321a <power_intermittent_peripherals_enable(bool)+0x1a>
// This may be achieved in part by dynamically slowing the CPU clock if possible.
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed((((MIN_CPU_HZ * (ms)) + 2000) / 4000) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    3212:	86 e0       	ldi	r24, 0x06	; 6
    3214:	90 e0       	ldi	r25, 0x00	; 0
    3216:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
  }
    321a:	1f 91       	pop	r17
    321c:	08 95       	ret

0000321e <powerUpTWIIfDisabled()>:
// If TWI (I2C) was disabled, power it up, do Wire.begin(), and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownRWI() may be advisable.
bool powerUpTWIIfDisabled()
  {
  if(!(PRR & _BV(PRTWI))) { return(false); }
    321e:	80 91 64 00 	lds	r24, 0x0064
    3222:	87 fd       	sbrc	r24, 7
    3224:	02 c0       	rjmp	.+4      	; 0x322a <powerUpTWIIfDisabled()+0xc>
    3226:	80 e0       	ldi	r24, 0x00	; 0
    3228:	08 95       	ret

  PRR &= ~_BV(PRTWI); // Enable TWI power.
    322a:	80 91 64 00 	lds	r24, 0x0064
    322e:	8f 77       	andi	r24, 0x7F	; 127
    3230:	80 93 64 00 	sts	0x0064, r24
  TWCR |= _BV(TWEN); // Enable TWI.
    3234:	80 91 bc 00 	lds	r24, 0x00BC
    3238:	84 60       	ori	r24, 0x04	; 4
    323a:	80 93 bc 00 	sts	0x00BC, r24
  Wire.begin(); // Set it going.
    323e:	8a e3       	ldi	r24, 0x3A	; 58
    3240:	92 e0       	ldi	r25, 0x02	; 2
    3242:	0e 94 63 30 	call	0x60c6	; 0x60c6 <TwoWire::begin()>
  // TODO: reset TWBR and prescaler for our low CPU frequency     (TWBR = ((F_CPU / TWI_FREQ) - 16) / 2 gives -3!)
#if F_CPU <= 1000000
  TWBR = 0; // Implies SCL freq of F_CPU / (16 + 2 * TBWR * PRESC) = 62.5kHz @ F_CPU==1MHz and PRESC==1 (from Wire/TWI code).
    3246:	10 92 b8 00 	sts	0x00B8, r1
    324a:	81 e0       	ldi	r24, 0x01	; 1
#endif
  return(true);
  }
    324c:	08 95       	ret

0000324e <powerDownSerial()>:
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
  PRR |= _BV(PRADC); // Disable the ADC.
  }

// Check if serial is (already) powered up.
static bool _serialIsPoweredUp() { return(!(PRR & _BV(PRUSART0))); }
    324e:	80 91 64 00 	lds	r24, 0x0064


// Flush any pending serial output and power it down if up.
void powerDownSerial()
  {
  if(_serialIsPoweredUp())
    3252:	81 fd       	sbrc	r24, 1
    3254:	08 c0       	rjmp	.+16     	; 0x3266 <powerDownSerial()+0x18>
    {
    // Flush serial output and shut down if apparently active.
    Serial.flush();
    3256:	8c e3       	ldi	r24, 0x3C	; 60
    3258:	93 e0       	ldi	r25, 0x03	; 3
    325a:	0e 94 31 35 	call	0x6a62	; 0x6a62 <HardwareSerial::flush()>
    //flushSerialHW();
    Serial.end();
    325e:	8c e3       	ldi	r24, 0x3C	; 60
    3260:	93 e0       	ldi	r25, 0x03	; 3
    3262:	0e 94 71 34 	call	0x68e2	; 0x68e2 <HardwareSerial::end()>
    }
  pinMode(PIN_SERIAL_RX, INPUT_PULLUP);
    3266:	80 e0       	ldi	r24, 0x00	; 0
    3268:	62 e0       	ldi	r22, 0x02	; 2
    326a:	0e 94 d6 32 	call	0x65ac	; 0x65ac <pinMode>
  pinMode(PIN_SERIAL_TX, INPUT_PULLUP);
    326e:	81 e0       	ldi	r24, 0x01	; 1
    3270:	62 e0       	ldi	r22, 0x02	; 2
    3272:	0e 94 d6 32 	call	0x65ac	; 0x65ac <pinMode>
  PRR |= _BV(PRUSART0); // Disable the UART module.
    3276:	80 91 64 00 	lds	r24, 0x0064
    327a:	82 60       	ori	r24, 0x02	; 2
    327c:	80 93 64 00 	sts	0x0064, r24
  }
    3280:	08 95       	ret

00003282 <burnHundredsOfCyclesProductivelyAndPoll()>:
// This call should typically take << 1ms at 1MHz CPU.
// Does not change CPU clock speeds, mess with interrupts (other than possible brief blocking), or sleep.
// May capture some entropy in secure and non-secure PRNGs.
void burnHundredsOfCyclesProductivelyAndPoll()
  {
  if(pollIO()) { seedRNG8(cycleCountCPU(), _watchdogFired, getSubCycleTime()); }
    3282:	80 e0       	ldi	r24, 0x00	; 0
    3284:	0e 94 7c 28 	call	0x50f8	; 0x50f8 <pollIO(bool)>
    3288:	88 23       	and	r24, r24
    328a:	41 f0       	breq	.+16     	; 0x329c <burnHundredsOfCyclesProductivelyAndPoll()+0x1a>
    328c:	86 b5       	in	r24, 0x26	; 38
    328e:	60 91 c6 01 	lds	r22, 0x01C6
    3292:	40 91 b2 00 	lds	r20, 0x00B2
    3296:	0e 94 fd 19 	call	0x33fa	; 0x33fa <seedRNG8(unsigned char, unsigned char, unsigned char)>
    329a:	08 95       	ret
  else { captureEntropy1(); }
    329c:	0e 94 91 18 	call	0x3122	; 0x3122 <captureEntropy1()>
    32a0:	08 95       	ret

000032a2 <flushSerialProductive()>:
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
  PRR |= _BV(PRADC); // Disable the ADC.
  }

// Check if serial is (already) powered up.
static bool _serialIsPoweredUp() { return(!(PRR & _BV(PRUSART0))); }
    32a2:	80 91 64 00 	lds	r24, 0x0064
// Assumes hundreds of CPU cycles available for each character queued for TX.
// Does not change CPU clock speed or disable or mess with USART0, though may poll it.
void flushSerialProductive()
  {
#if 1 && defined(DEBUG)
  if(!_serialIsPoweredUp()) { panic(); } // Trying to operate serial without it powered up.
    32a6:	81 ff       	sbrs	r24, 1
    32a8:	05 c0       	rjmp	.+10     	; 0x32b4 <flushSerialProductive()+0x12>
    32aa:	0e 94 cd 2c 	call	0x599a	; 0x599a <panic()>
    32ae:	02 c0       	rjmp	.+4      	; 0x32b4 <flushSerialProductive()+0x12>
#endif
  // Can productively spin here churning PRNGs or the like before the flush(), checking for the UART TX buffer to empty...
  // An occasional premature exit to flush() due to Serial interrupt handler interaction is benign, and indeed more grist to the mill.
  while(serialTXInProgress()) { burnHundredsOfCyclesProductivelyAndPoll(); }
    32b0:	0e 94 41 19 	call	0x3282	; 0x3282 <burnHundredsOfCyclesProductivelyAndPoll()>
    32b4:	80 91 c0 00 	lds	r24, 0x00C0
    32b8:	85 ff       	sbrs	r24, 5
    32ba:	fa cf       	rjmp	.-12     	; 0x32b0 <flushSerialProductive()+0xe>
  Serial.flush(); // Wait for all output to have been sent.
    32bc:	8c e3       	ldi	r24, 0x3C	; 60
    32be:	93 e0       	ldi	r25, 0x03	; 3
    32c0:	0e 94 31 35 	call	0x6a62	; 0x6a62 <HardwareSerial::flush()>
  }
    32c4:	08 95       	ret

000032c6 <flushSerialSCTSensitive()>:
// Does not change CPU clock speed or disable or mess with USART0, though may poll it.
// Sleeps in IDLE mode for ~15ms at a time (backtopped by watchdog) waking on any interrupt
// so that the caller must be sure RX overrun (etc) will not be an issue.
// Switches to flushSerialProductive() behaviour
// if in danger of overrunning a minor cycle while idling.
void flushSerialSCTSensitive()
    32c6:	1f 93       	push	r17
#ifdef ENABLE_AVR_IDLE_MODE
// Idle productively polling I/O, etc, across the system while spending time in low-power mode if possible.
// Typically sleeps for nominally up to 30ms; tries to allow ealier wakeup if interrupt is received, etc.
// (Will often be prematurely woken by timer0 with ~16ms interval.)
// True iff watchdog timer expired; false if something else woke the CPU.
static bool inline idle15AndPoll() { const bool wd = idleCPU(WDTO_15MS); pollIO(!wd); return(wd); }
    32c8:	11 e0       	ldi	r17, 0x01	; 1
  {
#if 0 && defined(DEBUG)
  if(!_serialIsPoweredUp()) { panic(); } // Trying to operate serial without it powered up.
#endif
#ifdef ENABLE_AVR_IDLE_MODE
  while(serialTXInProgress() && (getSubCycleTime() < GSCT_MAX - 2 - (20/SUBCYCLE_TICK_MS_RD)))
    32ca:	80 91 c0 00 	lds	r24, 0x00C0
    32ce:	85 fd       	sbrc	r24, 5
    32d0:	0b c0       	rjmp	.+22     	; 0x32e8 <flushSerialSCTSensitive()+0x22>
    32d2:	80 91 b2 00 	lds	r24, 0x00B2
    32d6:	8b 3f       	cpi	r24, 0xFB	; 251
    32d8:	38 f4       	brcc	.+14     	; 0x32e8 <flushSerialSCTSensitive()+0x22>
    32da:	80 e0       	ldi	r24, 0x00	; 0
    32dc:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <idleCPU(signed char)>
    32e0:	81 27       	eor	r24, r17
    32e2:	0e 94 7c 28 	call	0x50f8	; 0x50f8 <pollIO(bool)>
    32e6:	f1 cf       	rjmp	.-30     	; 0x32ca <flushSerialSCTSensitive()+0x4>
    { idle15AndPoll(); } // Save much power by idling CPU, though everything else runs.
#endif
  flushSerialProductive();
    32e8:	0e 94 51 19 	call	0x32a2	; 0x32a2 <flushSerialProductive()>
  }
    32ec:	1f 91       	pop	r17
    32ee:	08 95       	ret

000032f0 <sleepUntilSubCycleTime(unsigned char)>:
// May use a combination of techniques to hit the required time.
// Requesting a sleep until at or near the end of the cycle risks overrun and may be unwise.
// Using this to sleep less then 2 ticks may prove unreliable as the RTC rolls on underneath...
// This is NOT intended to be used to sleep over the end of a minor cycle.
// May poll I/O.
bool sleepUntilSubCycleTime(const uint8_t sleepUntil)
    32f0:	0f 93       	push	r16
    32f2:	1f 93       	push	r17
    32f4:	cf 93       	push	r28
    32f6:	df 93       	push	r29
    32f8:	18 2f       	mov	r17, r24
      sleepLowPowerLessThanMs(max(SUBCYCLE_TICK_MS_RD / 2, 1)); // Assumed to be a constant expression.
      continue;
      }

    // Compute remaining time in milliseconds, rounded down...
    const uint16_t msLeft = ((uint16_t)SUBCYCLE_TICK_MS_RD) * ticksLeft;
    32fa:	07 e0       	ldi	r16, 0x07	; 7
// May poll I/O.
bool sleepUntilSubCycleTime(const uint8_t sleepUntil)
  {
  for( ; ; )
    {
    const uint8_t now = getSubCycleTime();
    32fc:	80 91 b2 00 	lds	r24, 0x00B2
    if(now == sleepUntil) { return(true); } // Done it!
    3300:	81 17       	cp	r24, r17
    3302:	e1 f1       	breq	.+120    	; 0x337c <sleepUntilSubCycleTime(unsigned char)+0x8c>
    if(now > sleepUntil) { return(false); } // Too late...
    3304:	18 17       	cp	r17, r24
    3306:	10 f4       	brcc	.+4      	; 0x330c <sleepUntilSubCycleTime(unsigned char)+0x1c>
    3308:	80 e0       	ldi	r24, 0x00	; 0
    330a:	39 c0       	rjmp	.+114    	; 0x337e <sleepUntilSubCycleTime(unsigned char)+0x8e>

    // Compute time left to sleep.
    // It is easy to sleep a bit more later if necessary, but oversleeping is bad.
    const uint8_t ticksLeft = sleepUntil - now;
    330c:	21 2f       	mov	r18, r17
    330e:	28 1b       	sub	r18, r24
    // Deal with shortest sleep specially to avoid missing target from overheads...
    if(1 == ticksLeft)
    3310:	21 30       	cpi	r18, 0x01	; 1
    3312:	19 f4       	brne	.+6      	; 0x331a <sleepUntilSubCycleTime(unsigned char)+0x2a>
// Should be good for values up to at least 1000, ie 1 second.
// Uses formulation likely to be quicker than sleepLowPowerMs() for non-constant argument values,
// and that results in a somewhat shorter sleep than sleepLowPowerMs(ms).
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerLessThanMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed(((MIN_CPU_HZ/4000) * (ms)) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    3314:	83 e1       	ldi	r24, 0x13	; 19
    3316:	90 e0       	ldi	r25, 0x00	; 0
    3318:	2e c0       	rjmp	.+92     	; 0x3376 <sleepUntilSubCycleTime(unsigned char)+0x86>
      sleepLowPowerLessThanMs(max(SUBCYCLE_TICK_MS_RD / 2, 1)); // Assumed to be a constant expression.
      continue;
      }

    // Compute remaining time in milliseconds, rounded down...
    const uint16_t msLeft = ((uint16_t)SUBCYCLE_TICK_MS_RD) * ticksLeft;
    331a:	20 9f       	mul	r18, r16
    331c:	e0 01       	movw	r28, r0
    331e:	11 24       	eor	r1, r1

    // If comfortably in the area of nap()s then use one of them for improved energy savings.
    // Allow for nap() to overrun a little as its timing can vary with temperature and supply voltage,
    // and the bulk of energy savings should still be available without pushing the timing to the wire.
    // Note that during nap() timer0 should be stopped and thus not cause premature wakeup (from overflow interrupt).
    if(msLeft >= 20)
    3320:	c4 31       	cpi	r28, 0x14	; 20
    3322:	d1 05       	cpc	r29, r1
    3324:	70 f0       	brcs	.+28     	; 0x3342 <sleepUntilSubCycleTime(unsigned char)+0x52>
      {
      if(msLeft >= 80)
    3326:	c0 35       	cpi	r28, 0x50	; 80
    3328:	d1 05       	cpc	r29, r1
    332a:	38 f0       	brcs	.+14     	; 0x333a <sleepUntilSubCycleTime(unsigned char)+0x4a>
        {
        if(msLeft >= 333)
    332c:	cd 54       	subi	r28, 0x4D	; 77
    332e:	d1 40       	sbci	r29, 0x01	; 1
    3330:	10 f0       	brcs	.+4      	; 0x3336 <sleepUntilSubCycleTime(unsigned char)+0x46>
          {
          nap(WDTO_250MS); // Nominal 250ms sleep.
    3332:	84 e0       	ldi	r24, 0x04	; 4
    3334:	03 c0       	rjmp	.+6      	; 0x333c <sleepUntilSubCycleTime(unsigned char)+0x4c>
          continue;
          }
        nap(WDTO_60MS); // Nominal 60ms sleep.
    3336:	82 e0       	ldi	r24, 0x02	; 2
    3338:	01 c0       	rjmp	.+2      	; 0x333c <sleepUntilSubCycleTime(unsigned char)+0x4c>
        continue;
        }
      nap(WDTO_15MS); // Nominal 15ms sleep.
    333a:	80 e0       	ldi	r24, 0x00	; 0
    333c:	0e 94 29 16 	call	0x2c52	; 0x2c52 <nap(signed char)>
    3340:	dd cf       	rjmp	.-70     	; 0x32fc <sleepUntilSubCycleTime(unsigned char)+0xc>
    // Use low-power CPU sleep for residual time, but being very careful not to oversleep.
    // Aim to sleep somewhat under residual time, eg to allow for overheads, interrupts, and other slippages.
    // Assumed to be > 1 else would have been special-cased above.
    // Assumed to be << 1s else a nap() would have been used above.
#ifdef DEBUG
    if((msLeft < 2) || (msLeft > 1000)) { panic(); }
    3342:	ce 01       	movw	r24, r28
    3344:	02 97       	sbiw	r24, 0x02	; 2
    3346:	87 5e       	subi	r24, 0xE7	; 231
    3348:	93 40       	sbci	r25, 0x03	; 3
    334a:	10 f0       	brcs	.+4      	; 0x3350 <sleepUntilSubCycleTime(unsigned char)+0x60>
    334c:	0e 94 cd 2c 	call	0x599a	; 0x599a <panic()>
    3350:	9e 01       	movw	r18, r28
    3352:	21 50       	subi	r18, 0x01	; 1
    3354:	30 40       	sbci	r19, 0x00	; 0
    3356:	40 e0       	ldi	r20, 0x00	; 0
    3358:	50 e0       	ldi	r21, 0x00	; 0
    335a:	da 01       	movw	r26, r20
    335c:	c9 01       	movw	r24, r18
    335e:	63 e0       	ldi	r22, 0x03	; 3
    3360:	88 0f       	add	r24, r24
    3362:	99 1f       	adc	r25, r25
    3364:	aa 1f       	adc	r26, r26
    3366:	bb 1f       	adc	r27, r27
    3368:	6a 95       	dec	r22
    336a:	d1 f7       	brne	.-12     	; 0x3360 <sleepUntilSubCycleTime(unsigned char)+0x70>
    336c:	82 1b       	sub	r24, r18
    336e:	93 0b       	sbc	r25, r19
    3370:	a4 0b       	sbc	r26, r20
    3372:	b5 0b       	sbc	r27, r21
    3374:	02 97       	sbiw	r24, 0x02	; 2
    3376:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
    337a:	c0 cf       	rjmp	.-128    	; 0x32fc <sleepUntilSubCycleTime(unsigned char)+0xc>
    337c:	81 e0       	ldi	r24, 0x01	; 1
#endif
    sleepLowPowerLessThanMs(msLeft - 1);
    }
  }
    337e:	df 91       	pop	r29
    3380:	cf 91       	pop	r28
    3382:	1f 91       	pop	r17
    3384:	0f 91       	pop	r16
    3386:	08 95       	ret

00003388 <powerUpSerialIfDisabled()>:
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
  PRR |= _BV(PRADC); // Disable the ADC.
  }

// Check if serial is (already) powered up.
static bool _serialIsPoweredUp() { return(!(PRR & _BV(PRUSART0))); }
    3388:	80 91 64 00 	lds	r24, 0x0064
// If serial was disabled, power it up, do Serial.begin(), and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownSerial() may be advisable.
bool powerUpSerialIfDisabled()
  {
  if(_serialIsPoweredUp()) { return(false); }
    338c:	81 fd       	sbrc	r24, 1
    338e:	02 c0       	rjmp	.+4      	; 0x3394 <powerUpSerialIfDisabled()+0xc>
    3390:	80 e0       	ldi	r24, 0x00	; 0
    3392:	08 95       	ret
  PRR &= ~_BV(PRUSART0); // Enable the UART.
    3394:	80 91 64 00 	lds	r24, 0x0064
    3398:	8d 7f       	andi	r24, 0xFD	; 253
    339a:	80 93 64 00 	sts	0x0064, r24
  Serial.begin(BAUD); // Set it going.
    339e:	8c e3       	ldi	r24, 0x3C	; 60
    33a0:	93 e0       	ldi	r25, 0x03	; 3
    33a2:	40 ec       	ldi	r20, 0xC0	; 192
    33a4:	52 e1       	ldi	r21, 0x12	; 18
    33a6:	60 e0       	ldi	r22, 0x00	; 0
    33a8:	70 e0       	ldi	r23, 0x00	; 0
    33aa:	0e 94 f3 33 	call	0x67e6	; 0x67e6 <HardwareSerial::begin(unsigned long)>
    33ae:	81 e0       	ldi	r24, 0x01	; 1
  return(true);
  }
    33b0:	08 95       	ret

000033b2 <powerSetup()>:
// Call from setup() to turn off unused modules, set up timers and interrupts, etc.
// I/O pin setting is not done here.
void powerSetup()
  {
#ifdef DEBUG
  assert(DEFAULT_CPU_PRESCALE == clock_prescale_get()); // Verify that CPU prescaling is as expected.
    33b2:	80 91 61 00 	lds	r24, 0x0061
    33b6:	8f 70       	andi	r24, 0x0F	; 15
    33b8:	83 30       	cpi	r24, 0x03	; 3
    33ba:	11 f0       	breq	.+4      	; 0x33c0 <powerSetup()+0xe>
    33bc:	0e 94 e6 03 	call	0x7cc	; 0x7cc <abort>
#endif

  // Do normal gentle switch off, including analogue module/control in correct order.
  minimisePowerWithoutSleep();
    33c0:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <minimisePowerWithoutSleep()>

  // Brutally force off all modules, then re-enable explicitly below any still needed.
  power_all_disable(); 
    33c4:	80 91 64 00 	lds	r24, 0x0064
    33c8:	8f 6e       	ori	r24, 0xEF	; 239
    33ca:	80 93 64 00 	sts	0x0064, r24

#if !defined(DONT_USE_TIMER0)
  power_timer0_enable(); // Turning timer 0 off messes up some standard Arduino support such as delay() and millis().
    33ce:	80 91 64 00 	lds	r24, 0x0064
    33d2:	8f 7d       	andi	r24, 0xDF	; 223
    33d4:	80 93 64 00 	sts	0x0064, r24
#endif
  
#if defined(WAKEUP_32768HZ_XTAL)
  power_timer2_enable();
    33d8:	80 91 64 00 	lds	r24, 0x0064
    33dc:	8f 7b       	andi	r24, 0xBF	; 191
    33de:	80 93 64 00 	sts	0x0064, r24
#ifdef WAKEUP_32768HZ_XTAL
static void timer2XtalIntSetup()
 {
  // Set up TIMER2 to wake CPU out of sleep regularly using external 32768Hz crystal.
  // See http://www.atmel.com/Images/doc2505.pdf
  TCCR2A = 0x00;
    33e2:	10 92 b0 00 	sts	0x00B0, r1

#if defined(HALF_SECOND_RTC_SUPPORT)
  TCCR2B = (1<<CS22); // Set CLK/64 for overflow interrupt every 0.5s.
#elif defined(TWO_S_TICK_RTC_SUPPORT)
  TCCR2B = (1<<CS22)|(1<<CS21); // Set CLK/128 for overflow interrupt every 2s.
    33e6:	86 e0       	ldi	r24, 0x06	; 6
    33e8:	80 93 b1 00 	sts	0x00B1, r24
#else
  TCCR2B = (1<<CS22)|(1<<CS20); // Set CLK/128 for overflow interrupt every 1s.
#endif
  //TCCR2B = (1<<CS22)|(1<<CS21)|(1<<CS20); // Set CLK/1024 for overflow interrupt every 8s (slowest possible).

  ASSR = (1<<AS2); // Enable asynchronous operation.
    33ec:	80 e2       	ldi	r24, 0x20	; 32
    33ee:	80 93 b6 00 	sts	0x00B6, r24
  TIMSK2 = (1<<TOIE2); // Enable the timer 2 interrupt.
    33f2:	81 e0       	ldi	r24, 0x01	; 1
    33f4:	80 93 70 00 	sts	0x0070, r24
  
#if defined(WAKEUP_32768HZ_XTAL)
  power_timer2_enable();
  timer2XtalIntSetup();
#endif
  }
    33f8:	08 95       	ret

000033fa <seedRNG8(unsigned char, unsigned char, unsigned char)>:
//2 ADDs, one bit shift right , and one increment. Difficult or slow operations like multiply, etc 
//were avoided for maximum speed on ultra low power devices.
void seedRNG8(uint8_t s1, uint8_t s2, uint8_t s3) // Originally init_rng(s1,s2,s3) //Can also be used to seed the rng with more entropy during use.
  {
  //XOR new entropy into key state
  a ^=s1;
    33fa:	20 91 ce 01 	lds	r18, 0x01CE
  b ^=s2;
    33fe:	90 91 cf 01 	lds	r25, 0x01CF
    3402:	69 27       	eor	r22, r25
  c ^=s3;
    3404:	90 91 cc 01 	lds	r25, 0x01CC
    3408:	49 27       	eor	r20, r25
  x++;
    340a:	90 91 cd 01 	lds	r25, 0x01CD
    340e:	9f 5f       	subi	r25, 0xFF	; 255
    3410:	90 93 cd 01 	sts	0x01CD, r25
  a = (a^c^x);
    3414:	28 27       	eor	r18, r24
    3416:	24 27       	eor	r18, r20
    3418:	29 27       	eor	r18, r25
    341a:	20 93 ce 01 	sts	0x01CE, r18
  b = (b+a);
    341e:	62 0f       	add	r22, r18
    3420:	60 93 cf 01 	sts	0x01CF, r22
  c = ((c+(b>>1))^a);
    3424:	66 95       	lsr	r22
    3426:	64 0f       	add	r22, r20
    3428:	62 27       	eor	r22, r18
    342a:	60 93 cc 01 	sts	0x01CC, r22
  }
    342e:	08 95       	ret

00003430 <randRNG8()>:
//
uint8_t randRNG8() // Originally unsigned char randomize().
  {
  x++;               //x is incremented every round and is not affected by any other variable
    3430:	80 91 cd 01 	lds	r24, 0x01CD
    3434:	8f 5f       	subi	r24, 0xFF	; 255
    3436:	80 93 cd 01 	sts	0x01CD, r24
  a = (a^c^x);       //note the mix of addition and XOR
    343a:	20 91 cc 01 	lds	r18, 0x01CC
    343e:	90 91 ce 01 	lds	r25, 0x01CE
    3442:	92 27       	eor	r25, r18
    3444:	98 27       	eor	r25, r24
    3446:	90 93 ce 01 	sts	0x01CE, r25
  b = (b+a);         //And the use of very few instructions
    344a:	80 91 cf 01 	lds	r24, 0x01CF
    344e:	89 0f       	add	r24, r25
    3450:	80 93 cf 01 	sts	0x01CF, r24
  c = ((c+(b>>1))^a);  //the right shift is to ensure that high-order bits from b can affect  
    3454:	86 95       	lsr	r24
    3456:	82 0f       	add	r24, r18
    3458:	89 27       	eor	r24, r25
    345a:	80 93 cc 01 	sts	0x01CC, r24
  return(c);         //low order bits of other variables
  }
    345e:	08 95       	ret

00003460 <global constructors keyed to _Z8seedRNG8hhh>:
uint8_t randRNG8(); // Originally called 'randomize()'.
// RNG8 working state.
static uint8_t a, b, c;
// DHD20130603: avoid the hidden counter always starting at zero c/o some per-build state.
// Derived from linker-driven pointer base plus hash of compilation timestamp, with little run-time cost.
static uint8_t x = (uint8_t)(intptr_t) ((&c) + (uint8_t)((__TIME__[7] * 17) ^ (__TIME__[6]) ^ (__TIME__[4] << 11)));
    3460:	8f e2       	ldi	r24, 0x2F	; 47
    3462:	92 e0       	ldi	r25, 0x02	; 2
    3464:	80 93 cd 01 	sts	0x01CD, r24
  x++;               //x is incremented every round and is not affected by any other variable
  a = (a^c^x);       //note the mix of addition and XOR
  b = (b+a);         //And the use of very few instructions
  c = ((c+(b>>1))^a);  //the right shift is to ensure that high-order bits from b can affect  
  return(c);         //low order bits of other variables
  }
    3468:	08 95       	ret

0000346a <RFM22RXFIFO(unsigned char*, unsigned char)>:


// Put RFM22 into standby, attempt to read specified number of bytes from FIFO to buffer.
// Leaves RFM22 in low-power standby mode.
// Trailing bytes (more than were actually sent) undefined.
void RFM22RXFIFO(uint8_t *buf, const uint8_t bufSize)
    346a:	ff 92       	push	r15
    346c:	0f 93       	push	r16
    346e:	1f 93       	push	r17
    3470:	18 2f       	mov	r17, r24
    3472:	09 2f       	mov	r16, r25
    3474:	f6 2e       	mov	r15, r22
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    3476:	0e 94 b9 18 	call	0x3172	; 0x3172 <powerUpSPIIfDisabled()>
    347a:	48 2f       	mov	r20, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    347c:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    347e:	87 e8       	ldi	r24, 0x87	; 135
    3480:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3482:	0d b4       	in	r0, 0x2d	; 45
    3484:	07 fe       	sbrs	r0, 7
    3486:	fd cf       	rjmp	.-6      	; 0x3482 <RFM22RXFIFO(unsigned char*, unsigned char)+0x18>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3488:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    348a:	0d b4       	in	r0, 0x2d	; 45
    348c:	07 fe       	sbrs	r0, 7
    348e:	fd cf       	rjmp	.-6      	; 0x348a <RFM22RXFIFO(unsigned char*, unsigned char)+0x20>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    3490:	2a 9a       	sbi	0x05, 2	; 5
  {
  const bool neededEnable = powerUpSPIIfDisabled();

  _RFM22ModeStandby();

  _RFM22_SELECT();
    3492:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    3494:	8f e7       	ldi	r24, 0x7F	; 127
    3496:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3498:	0d b4       	in	r0, 0x2d	; 45
    349a:	07 fe       	sbrs	r0, 7
    349c:	fd cf       	rjmp	.-6      	; 0x3498 <RFM22RXFIFO(unsigned char*, unsigned char)+0x2e>
  return(SPDR);
    349e:	8e b5       	in	r24, 0x2e	; 46
    34a0:	81 2f       	mov	r24, r17
    34a2:	90 2f       	mov	r25, r16
    34a4:	9c 01       	movw	r18, r24
    34a6:	f9 01       	movw	r30, r18
    34a8:	90 e0       	ldi	r25, 0x00	; 0
    34aa:	07 c0       	rjmp	.+14     	; 0x34ba <RFM22RXFIFO(unsigned char*, unsigned char)+0x50>

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    34ac:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    34ae:	0d b4       	in	r0, 0x2d	; 45
    34b0:	07 fe       	sbrs	r0, 7
    34b2:	fd cf       	rjmp	.-6      	; 0x34ae <RFM22RXFIFO(unsigned char*, unsigned char)+0x44>
  return(SPDR);
    34b4:	8e b5       	in	r24, 0x2e	; 46

  _RFM22_SELECT();
  _RFM22_io(RFM22REG_FIFO & 0x7F); // Start burst read from RX FIFO.
//  uint8_t val;
  for(uint8_t i = 0; i < bufSize; ++i)
    { buf[i] = _RFM22_io(0);  }
    34b6:	81 93       	st	Z+, r24
  _RFM22ModeStandby();

  _RFM22_SELECT();
  _RFM22_io(RFM22REG_FIFO & 0x7F); // Start burst read from RX FIFO.
//  uint8_t val;
  for(uint8_t i = 0; i < bufSize; ++i)
    34b8:	9f 5f       	subi	r25, 0xFF	; 255
    34ba:	9f 15       	cp	r25, r15
    34bc:	b8 f3       	brcs	.-18     	; 0x34ac <RFM22RXFIFO(unsigned char*, unsigned char)+0x42>
    { buf[i] = _RFM22_io(0);  }
  _RFM22_DESELECT();
    34be:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    34c0:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    34c2:	88 e8       	ldi	r24, 0x88	; 136
    34c4:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    34c6:	0d b4       	in	r0, 0x2d	; 45
    34c8:	07 fe       	sbrs	r0, 7
    34ca:	fd cf       	rjmp	.-6      	; 0x34c6 <RFM22RXFIFO(unsigned char*, unsigned char)+0x5c>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    34cc:	83 e0       	ldi	r24, 0x03	; 3
    34ce:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    34d0:	0d b4       	in	r0, 0x2d	; 45
    34d2:	07 fe       	sbrs	r0, 7
    34d4:	fd cf       	rjmp	.-6      	; 0x34d0 <RFM22RXFIFO(unsigned char*, unsigned char)+0x66>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    34d6:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    34d8:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    34da:	88 e8       	ldi	r24, 0x88	; 136
    34dc:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    34de:	0d b4       	in	r0, 0x2d	; 45
    34e0:	07 fe       	sbrs	r0, 7
    34e2:	fd cf       	rjmp	.-6      	; 0x34de <RFM22RXFIFO(unsigned char*, unsigned char)+0x74>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    34e4:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    34e6:	0d b4       	in	r0, 0x2d	; 45
    34e8:	07 fe       	sbrs	r0, 7
    34ea:	fd cf       	rjmp	.-6      	; 0x34e6 <RFM22RXFIFO(unsigned char*, unsigned char)+0x7c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    34ec:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    34ee:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    34f0:	85 e8       	ldi	r24, 0x85	; 133
    34f2:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    34f4:	0d b4       	in	r0, 0x2d	; 45
    34f6:	07 fe       	sbrs	r0, 7
    34f8:	fd cf       	rjmp	.-6      	; 0x34f4 <RFM22RXFIFO(unsigned char*, unsigned char)+0x8a>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    34fa:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    34fc:	0d b4       	in	r0, 0x2d	; 45
    34fe:	07 fe       	sbrs	r0, 7
    3500:	fd cf       	rjmp	.-6      	; 0x34fc <RFM22RXFIFO(unsigned char*, unsigned char)+0x92>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3502:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3504:	0d b4       	in	r0, 0x2d	; 45
    3506:	07 fe       	sbrs	r0, 7
    3508:	fd cf       	rjmp	.-6      	; 0x3504 <RFM22RXFIFO(unsigned char*, unsigned char)+0x9a>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    350a:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    350c:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    350e:	83 e8       	ldi	r24, 0x83	; 131
    3510:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3512:	0d b4       	in	r0, 0x2d	; 45
    3514:	07 fe       	sbrs	r0, 7
    3516:	fd cf       	rjmp	.-6      	; 0x3512 <RFM22RXFIFO(unsigned char*, unsigned char)+0xa8>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3518:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    351a:	0d b4       	in	r0, 0x2d	; 45
    351c:	07 fe       	sbrs	r0, 7
    351e:	fd cf       	rjmp	.-6      	; 0x351a <RFM22RXFIFO(unsigned char*, unsigned char)+0xb0>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3520:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3522:	0d b4       	in	r0, 0x2d	; 45
    3524:	07 fe       	sbrs	r0, 7
    3526:	fd cf       	rjmp	.-6      	; 0x3522 <RFM22RXFIFO(unsigned char*, unsigned char)+0xb8>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    3528:	2a 9a       	sbi	0x05, 2	; 5
  _RFM22WriteReg16Bit0(RFM22REG_INT_ENABLE1);
  // Clear any interrupts already/still pending...
  _RFM22ClearInterrupts();  
  //_RFM22WriteReg8Bit(0xd, 0x1f); // Drive GPIO2 to ground as output... (Move to general register settings.)

  if(neededEnable) { powerDownSPI(); }
    352a:	44 23       	and	r20, r20
    352c:	11 f0       	breq	.+4      	; 0x3532 <RFM22RXFIFO(unsigned char*, unsigned char)+0xc8>
    352e:	0e 94 9f 18 	call	0x313e	; 0x313e <powerDownSPI()>
  }
    3532:	1f 91       	pop	r17
    3534:	0f 91       	pop	r16
    3536:	ff 90       	pop	r15
    3538:	08 95       	ret

0000353a <RFM22SetUpRX(unsigned char, bool, bool)>:
  _RFM22_DESELECT();
  if(neededEnable) { powerDownSPI(); }
  }

// Put RFM22 into RX mode with given RX FIFO 'nearly-full' threshold and optional interrupts enabled.
void RFM22SetUpRX(const uint8_t nearlyFullThreshold, const bool syncInt, const bool dataInt)
    353a:	ff 92       	push	r15
    353c:	0f 93       	push	r16
    353e:	1f 93       	push	r17
    3540:	18 2f       	mov	r17, r24
    3542:	f6 2e       	mov	r15, r22
    3544:	04 2f       	mov	r16, r20
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    3546:	0e 94 b9 18 	call	0x3172	; 0x3172 <powerUpSPIIfDisabled()>
    354a:	28 2f       	mov	r18, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    354c:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    354e:	88 e8       	ldi	r24, 0x88	; 136
    3550:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3552:	0d b4       	in	r0, 0x2d	; 45
    3554:	07 fe       	sbrs	r0, 7
    3556:	fd cf       	rjmp	.-6      	; 0x3552 <RFM22SetUpRX(unsigned char, bool, bool)+0x18>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3558:	83 e0       	ldi	r24, 0x03	; 3
    355a:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    355c:	0d b4       	in	r0, 0x2d	; 45
    355e:	07 fe       	sbrs	r0, 7
    3560:	fd cf       	rjmp	.-6      	; 0x355c <RFM22SetUpRX(unsigned char, bool, bool)+0x22>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    3562:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    3564:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3566:	88 e8       	ldi	r24, 0x88	; 136
    3568:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    356a:	0d b4       	in	r0, 0x2d	; 45
    356c:	07 fe       	sbrs	r0, 7
    356e:	fd cf       	rjmp	.-6      	; 0x356a <RFM22SetUpRX(unsigned char, bool, bool)+0x30>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3570:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3572:	0d b4       	in	r0, 0x2d	; 45
    3574:	07 fe       	sbrs	r0, 7
    3576:	fd cf       	rjmp	.-6      	; 0x3572 <RFM22SetUpRX(unsigned char, bool, bool)+0x38>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    3578:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    357a:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    357c:	8e ef       	ldi	r24, 0xFE	; 254
    357e:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3580:	0d b4       	in	r0, 0x2d	; 45
    3582:	07 fe       	sbrs	r0, 7
    3584:	fd cf       	rjmp	.-6      	; 0x3580 <RFM22SetUpRX(unsigned char, bool, bool)+0x46>
  // Clear RX and TX FIFOs.
  _RFM22WriteReg8Bit(RFM22REG_OP_CTRL2, 3); // FFCLRTX | FFCLRTX
  _RFM22WriteReg8Bit(RFM22REG_OP_CTRL2, 0);

  // Set FIFO RX almost-full threshold as specified.
  _RFM22WriteReg8Bit(RFM22REG_RX_FIFO_CTRL, min(nearlyFullThreshold, 63));
    3586:	81 2f       	mov	r24, r17
    3588:	10 34       	cpi	r17, 0x40	; 64
    358a:	08 f0       	brcs	.+2      	; 0x358e <RFM22SetUpRX(unsigned char, bool, bool)+0x54>
    358c:	8f e3       	ldi	r24, 0x3F	; 63

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    358e:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3590:	0d b4       	in	r0, 0x2d	; 45
    3592:	07 fe       	sbrs	r0, 7
    3594:	fd cf       	rjmp	.-6      	; 0x3590 <RFM22SetUpRX(unsigned char, bool, bool)+0x56>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    3596:	2a 9a       	sbi	0x05, 2	; 5

  // Set FIFO RX almost-full threshold as specified.
  _RFM22WriteReg8Bit(RFM22REG_RX_FIFO_CTRL, min(nearlyFullThreshold, 63));

  // Enable requested RX-related interrupts.
  _RFM22WriteReg8Bit(RFM22REG_INT_ENABLE1, (dataInt?0x10:0)); // enrxffafull: Enable RX FIFO Almost Full.
    3598:	00 23       	and	r16, r16
    359a:	11 f4       	brne	.+4      	; 0x35a0 <RFM22SetUpRX(unsigned char, bool, bool)+0x66>
    359c:	90 e0       	ldi	r25, 0x00	; 0
    359e:	01 c0       	rjmp	.+2      	; 0x35a2 <RFM22SetUpRX(unsigned char, bool, bool)+0x68>
    35a0:	90 e1       	ldi	r25, 0x10	; 16

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    35a2:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    35a4:	85 e8       	ldi	r24, 0x85	; 133
    35a6:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    35a8:	0d b4       	in	r0, 0x2d	; 45
    35aa:	07 fe       	sbrs	r0, 7
    35ac:	fd cf       	rjmp	.-6      	; 0x35a8 <RFM22SetUpRX(unsigned char, bool, bool)+0x6e>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    35ae:	9e bd       	out	0x2e, r25	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    35b0:	0d b4       	in	r0, 0x2d	; 45
    35b2:	07 fe       	sbrs	r0, 7
    35b4:	fd cf       	rjmp	.-6      	; 0x35b0 <RFM22SetUpRX(unsigned char, bool, bool)+0x76>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    35b6:	2a 9a       	sbi	0x05, 2	; 5
  // Set FIFO RX almost-full threshold as specified.
  _RFM22WriteReg8Bit(RFM22REG_RX_FIFO_CTRL, min(nearlyFullThreshold, 63));

  // Enable requested RX-related interrupts.
  _RFM22WriteReg8Bit(RFM22REG_INT_ENABLE1, (dataInt?0x10:0)); // enrxffafull: Enable RX FIFO Almost Full.
  _RFM22WriteReg8Bit(RFM22REG_INT_ENABLE2, (syncInt?0x80:0)); // enswdet: Enable Sync Word Detected.
    35b8:	ff 20       	and	r15, r15
    35ba:	11 f4       	brne	.+4      	; 0x35c0 <RFM22SetUpRX(unsigned char, bool, bool)+0x86>
    35bc:	90 e0       	ldi	r25, 0x00	; 0
    35be:	01 c0       	rjmp	.+2      	; 0x35c2 <RFM22SetUpRX(unsigned char, bool, bool)+0x88>
    35c0:	90 e8       	ldi	r25, 0x80	; 128

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    35c2:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    35c4:	86 e8       	ldi	r24, 0x86	; 134
    35c6:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    35c8:	0d b4       	in	r0, 0x2d	; 45
    35ca:	07 fe       	sbrs	r0, 7
    35cc:	fd cf       	rjmp	.-6      	; 0x35c8 <RFM22SetUpRX(unsigned char, bool, bool)+0x8e>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    35ce:	9e bd       	out	0x2e, r25	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    35d0:	0d b4       	in	r0, 0x2d	; 45
    35d2:	07 fe       	sbrs	r0, 7
    35d4:	fd cf       	rjmp	.-6      	; 0x35d0 <RFM22SetUpRX(unsigned char, bool, bool)+0x96>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    35d6:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    35d8:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    35da:	83 e8       	ldi	r24, 0x83	; 131
    35dc:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    35de:	0d b4       	in	r0, 0x2d	; 45
    35e0:	07 fe       	sbrs	r0, 7
    35e2:	fd cf       	rjmp	.-6      	; 0x35de <RFM22SetUpRX(unsigned char, bool, bool)+0xa4>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    35e4:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    35e6:	0d b4       	in	r0, 0x2d	; 45
    35e8:	07 fe       	sbrs	r0, 7
    35ea:	fd cf       	rjmp	.-6      	; 0x35e6 <RFM22SetUpRX(unsigned char, bool, bool)+0xac>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    35ec:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    35ee:	0d b4       	in	r0, 0x2d	; 45
    35f0:	07 fe       	sbrs	r0, 7
    35f2:	fd cf       	rjmp	.-6      	; 0x35ee <RFM22SetUpRX(unsigned char, bool, bool)+0xb4>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    35f4:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    35f6:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    35f8:	87 e8       	ldi	r24, 0x87	; 135
    35fa:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    35fc:	0d b4       	in	r0, 0x2d	; 45
    35fe:	07 fe       	sbrs	r0, 7
    3600:	fd cf       	rjmp	.-6      	; 0x35fc <RFM22SetUpRX(unsigned char, bool, bool)+0xc2>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3602:	85 e0       	ldi	r24, 0x05	; 5
    3604:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3606:	0d b4       	in	r0, 0x2d	; 45
    3608:	07 fe       	sbrs	r0, 7
    360a:	fd cf       	rjmp	.-6      	; 0x3606 <RFM22SetUpRX(unsigned char, bool, bool)+0xcc>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    360c:	2a 9a       	sbi	0x05, 2	; 5
  _RFM22ClearInterrupts();

  // Start listening.
  _RFM22ModeRX();
  
  if(neededEnable) { powerDownSPI(); }
    360e:	22 23       	and	r18, r18
    3610:	11 f0       	breq	.+4      	; 0x3616 <RFM22SetUpRX(unsigned char, bool, bool)+0xdc>
    3612:	0e 94 9f 18 	call	0x313e	; 0x313e <powerDownSPI()>
  }
    3616:	1f 91       	pop	r17
    3618:	0f 91       	pop	r16
    361a:	ff 90       	pop	r15
    361c:	08 95       	ret

0000361e <RFM22QueueCmdToFF(unsigned char*)>:

// Clears the RFM22 TX FIFO and queues up ready to send via the TXFIFO the 0xff-terminated bytes starting at bptr.
// This routine does not change the command area.
// This uses an efficient burst write.
// For DEBUG can abort after (over-)filling the 64-byte FIFO at no extra cost with a check before spinning waiting for SPI byte to be sent.
void RFM22QueueCmdToFF(uint8_t *bptr)
    361e:	cf 93       	push	r28
    3620:	df 93       	push	r29
    3622:	ec 01       	movw	r28, r24
  {
#if 0 && defined(DEBUG)
  if(0 == *bptr) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22QueueCmdToFF: buffer uninitialised"); panic(); } 
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
    3624:	0e 94 b9 18 	call	0x3172	; 0x3172 <powerUpSPIIfDisabled()>
    3628:	98 2f       	mov	r25, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    362a:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    362c:	88 e8       	ldi	r24, 0x88	; 136
    362e:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3630:	0d b4       	in	r0, 0x2d	; 45
    3632:	07 fe       	sbrs	r0, 7
    3634:	fd cf       	rjmp	.-6      	; 0x3630 <RFM22QueueCmdToFF(unsigned char*)+0x12>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3636:	81 e0       	ldi	r24, 0x01	; 1
    3638:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    363a:	0d b4       	in	r0, 0x2d	; 45
    363c:	07 fe       	sbrs	r0, 7
    363e:	fd cf       	rjmp	.-6      	; 0x363a <RFM22QueueCmdToFF(unsigned char*)+0x1c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    3640:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    3642:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3644:	88 e8       	ldi	r24, 0x88	; 136
    3646:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3648:	0d b4       	in	r0, 0x2d	; 45
    364a:	07 fe       	sbrs	r0, 7
    364c:	fd cf       	rjmp	.-6      	; 0x3648 <RFM22QueueCmdToFF(unsigned char*)+0x2a>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    364e:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3650:	0d b4       	in	r0, 0x2d	; 45
    3652:	07 fe       	sbrs	r0, 7
    3654:	fd cf       	rjmp	.-6      	; 0x3650 <RFM22QueueCmdToFF(unsigned char*)+0x32>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    3656:	2a 9a       	sbi	0x05, 2	; 5
  if(0 == *bptr) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22QueueCmdToFF: buffer uninitialised"); panic(); } 
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
  // Clear the TX FIFO.
  _RFM22ClearTXFIFO();
  _RFM22_SELECT();
    3658:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    365a:	8f ef       	ldi	r24, 0xFF	; 255
    365c:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    365e:	0d b4       	in	r0, 0x2d	; 45
    3660:	07 fe       	sbrs	r0, 7
    3662:	fd cf       	rjmp	.-6      	; 0x365e <RFM22QueueCmdToFF(unsigned char*)+0x40>
    3664:	04 c0       	rjmp	.+8      	; 0x366e <RFM22QueueCmdToFF(unsigned char*)+0x50>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3666:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3668:	0d b4       	in	r0, 0x2d	; 45
    366a:	07 fe       	sbrs	r0, 7
    366c:	fd cf       	rjmp	.-6      	; 0x3668 <RFM22QueueCmdToFF(unsigned char*)+0x4a>
    SPDR = val;
    if(--i < 0) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22QueueCmdToFF: buffer unterminated"); panic(); }
    while (!(SPSR & _BV(SPIF))) { }
    }
#else
  while((uint8_t)0xff != (val = *bptr++)) { _RFM22_wr(val); }
    366e:	89 91       	ld	r24, Y+
    3670:	8f 3f       	cpi	r24, 0xFF	; 255
    3672:	c9 f7       	brne	.-14     	; 0x3666 <RFM22QueueCmdToFF(unsigned char*)+0x48>
#endif
  _RFM22_DESELECT();
    3674:	2a 9a       	sbi	0x05, 2	; 5
  if(neededEnable) { powerDownSPI(); }
    3676:	99 23       	and	r25, r25
    3678:	11 f0       	breq	.+4      	; 0x367e <RFM22QueueCmdToFF(unsigned char*)+0x60>
    367a:	0e 94 9f 18 	call	0x313e	; 0x313e <powerDownSPI()>
  }
    367e:	df 91       	pop	r29
    3680:	cf 91       	pop	r28
    3682:	08 95       	ret

00003684 <RFM22RegisterBlockSetup(unsigned char const (*) [2])>:


// Configure the radio from a list of register/value pairs in readonly PROGMEM/Flash, terminating with an 0xff register value.
// NOTE: argument is not a pointer into SRAM, it is into PROGMEM!
// Could optimise case where multiple values are for successive RFM22 registers by using burst write.
void RFM22RegisterBlockSetup(const uint8_t registerValues[][2])
    3684:	cf 93       	push	r28
    3686:	df 93       	push	r29
    3688:	ec 01       	movw	r28, r24
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    368a:	0e 94 b9 18 	call	0x3172	; 0x3172 <powerUpSPIIfDisabled()>
  for( ; ; )
    {
    const uint8_t reg = pgm_read_byte(&(registerValues[0][0]));
    368e:	fe 01       	movw	r30, r28
    3690:	94 91       	lpm	r25, Z+
    const uint8_t val = pgm_read_byte(&(registerValues[0][1]));
    3692:	21 96       	adiw	r28, 0x01	; 1
    3694:	fe 01       	movw	r30, r28
    3696:	24 91       	lpm	r18, Z+
    3698:	21 97       	sbiw	r28, 0x01	; 1
    if(0xff == reg) { break; }
    369a:	9f 3f       	cpi	r25, 0xFF	; 255
    369c:	69 f0       	breq	.+26     	; 0x36b8 <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x34>

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    369e:	2a 98       	cbi	0x05, 2	; 5
  _RFM22_wr(addr | 0x80); // Force to write.
    36a0:	90 68       	ori	r25, 0x80	; 128

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    36a2:	9e bd       	out	0x2e, r25	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    36a4:	0d b4       	in	r0, 0x2d	; 45
    36a6:	07 fe       	sbrs	r0, 7
    36a8:	fd cf       	rjmp	.-6      	; 0x36a4 <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x20>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    36aa:	2e bd       	out	0x2e, r18	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    36ac:	0d b4       	in	r0, 0x2d	; 45
    36ae:	07 fe       	sbrs	r0, 7
    36b0:	fd cf       	rjmp	.-6      	; 0x36ac <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x28>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    36b2:	2a 9a       	sbi	0x05, 2	; 5
    DEBUG_SERIAL_PRINT_FLASHSTRING(" = 0x");
    DEBUG_SERIAL_PRINTFMT(val, HEX);
    DEBUG_SERIAL_PRINTLN();
#endif
    _RFM22WriteReg8Bit(reg, val);
    ++registerValues;
    36b4:	22 96       	adiw	r28, 0x02	; 2
    36b6:	eb cf       	rjmp	.-42     	; 0x368e <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0xa>
    }
  if(neededEnable) { powerDownSPI(); }
    36b8:	88 23       	and	r24, r24
    36ba:	11 f0       	breq	.+4      	; 0x36c0 <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x3c>
    36bc:	0e 94 9f 18 	call	0x313e	; 0x313e <powerDownSPI()>
  }
    36c0:	df 91       	pop	r29
    36c2:	cf 91       	pop	r28
    36c4:	08 95       	ret

000036c6 <RFM22PowerOnInit()>:
void RFM22PowerOnInit()
  {
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22 reset...");
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
    36c6:	0e 94 b9 18 	call	0x3172	; 0x3172 <powerUpSPIIfDisabled()>
    36ca:	98 2f       	mov	r25, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    36cc:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    36ce:	87 e8       	ldi	r24, 0x87	; 135
    36d0:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    36d2:	0d b4       	in	r0, 0x2d	; 45
    36d4:	07 fe       	sbrs	r0, 7
    36d6:	fd cf       	rjmp	.-6      	; 0x36d2 <RFM22PowerOnInit()+0xc>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    36d8:	80 e8       	ldi	r24, 0x80	; 128
    36da:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    36dc:	0d b4       	in	r0, 0x2d	; 45
    36de:	07 fe       	sbrs	r0, 7
    36e0:	fd cf       	rjmp	.-6      	; 0x36dc <RFM22PowerOnInit()+0x16>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    36e2:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    36e4:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    36e6:	87 e8       	ldi	r24, 0x87	; 135
    36e8:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    36ea:	0d b4       	in	r0, 0x2d	; 45
    36ec:	07 fe       	sbrs	r0, 7
    36ee:	fd cf       	rjmp	.-6      	; 0x36ea <RFM22PowerOnInit()+0x24>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    36f0:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    36f2:	0d b4       	in	r0, 0x2d	; 45
    36f4:	07 fe       	sbrs	r0, 7
    36f6:	fd cf       	rjmp	.-6      	; 0x36f2 <RFM22PowerOnInit()+0x2c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    36f8:	2a 9a       	sbi	0x05, 2	; 5
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22 reset...");
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
  _RFM22WriteReg8Bit(RFM22REG_OP_CTRL1, RFM22REG_OP_CTRL1_SWRES);
  _RFM22ModeStandby();
  if(neededEnable) { powerDownSPI(); }
    36fa:	99 23       	and	r25, r25
    36fc:	11 f0       	breq	.+4      	; 0x3702 <RFM22PowerOnInit()+0x3c>
    36fe:	0e 94 9f 18 	call	0x313e	; 0x313e <powerDownSPI()>
    3702:	08 95       	ret

00003704 <RFM22RSSI()>:
  return(result);
  }

// Get current RSSI.
// Only valid when in RX mode.
uint8_t RFM22RSSI() 
    3704:	1f 93       	push	r17
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    3706:	0e 94 b9 18 	call	0x3172	; 0x3172 <powerUpSPIIfDisabled()>
    370a:	98 2f       	mov	r25, r24

// Read from 8-bit register on RFM22.
// SPI must already be configured and running.
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
    370c:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    370e:	86 e2       	ldi	r24, 0x26	; 38
    3710:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3712:	0d b4       	in	r0, 0x2d	; 45
    3714:	07 fe       	sbrs	r0, 7
    3716:	fd cf       	rjmp	.-6      	; 0x3712 <RFM22RSSI()+0xe>
  return(SPDR);
    3718:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    371a:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    371c:	0d b4       	in	r0, 0x2d	; 45
    371e:	07 fe       	sbrs	r0, 7
    3720:	fd cf       	rjmp	.-6      	; 0x371c <RFM22RSSI()+0x18>
  return(SPDR);
    3722:	1e b5       	in	r17, 0x2e	; 46
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  const uint8_t result = _RFM22_io(0); // Dummy value...
  _RFM22_DESELECT();
    3724:	2a 9a       	sbi	0x05, 2	; 5
// Only valid when in RX mode.
uint8_t RFM22RSSI() 
  {
  const bool neededEnable = powerUpSPIIfDisabled();
  const uint8_t rssi = _RFM22ReadReg8Bit(RFM22REG_RSSI);
  if(neededEnable) { powerDownSPI(); }
    3726:	99 23       	and	r25, r25
    3728:	11 f0       	breq	.+4      	; 0x372e <RFM22RSSI()+0x2a>
    372a:	0e 94 9f 18 	call	0x313e	; 0x313e <powerDownSPI()>
  return(rssi);
  }
    372e:	81 2f       	mov	r24, r17
    3730:	1f 91       	pop	r17
    3732:	08 95       	ret

00003734 <RFM22ReadStatusBoth()>:
  }

// Read status (both registers) and clear interrupts.
// Status register 1 is returned in the top 8 bits, register 2 in the bottom 8 bits.
// Zero indicates no pending interrupts or other status flags set.
uint16_t RFM22ReadStatusBoth()
    3734:	0f 93       	push	r16
    3736:	1f 93       	push	r17
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    3738:	0e 94 b9 18 	call	0x3172	; 0x3172 <powerUpSPIIfDisabled()>
    373c:	98 2f       	mov	r25, r24

// Read from 16-bit big-endian register pair.
// The result has the first (lower-numbered) register in the most significant byte.
static uint16_t _RFM22ReadReg16Bit(const uint8_t addr)
{
  _RFM22_SELECT();
    373e:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    3740:	83 e0       	ldi	r24, 0x03	; 3
    3742:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3744:	0d b4       	in	r0, 0x2d	; 45
    3746:	07 fe       	sbrs	r0, 7
    3748:	fd cf       	rjmp	.-6      	; 0x3744 <RFM22ReadStatusBoth()+0x10>
  return(SPDR);
    374a:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    374c:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    374e:	0d b4       	in	r0, 0x2d	; 45
    3750:	07 fe       	sbrs	r0, 7
    3752:	fd cf       	rjmp	.-6      	; 0x374e <RFM22ReadStatusBoth()+0x1a>
  return(SPDR);
    3754:	0e b5       	in	r16, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    3756:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3758:	0d b4       	in	r0, 0x2d	; 45
    375a:	07 fe       	sbrs	r0, 7
    375c:	fd cf       	rjmp	.-6      	; 0x3758 <RFM22ReadStatusBoth()+0x24>
  return(SPDR);
    375e:	1e b5       	in	r17, 0x2e	; 46
{
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  uint16_t result = ((uint16_t)_RFM22_io(0)) << 8;
  result |= ((uint16_t)_RFM22_io(0));
  _RFM22_DESELECT();
    3760:	2a 9a       	sbi	0x05, 2	; 5
// Zero indicates no pending interrupts or other status flags set.
uint16_t RFM22ReadStatusBoth()
  {
  const bool neededEnable = powerUpSPIIfDisabled();
  const uint16_t result = _RFM22ReadReg16Bit(RFM22REG_INT_STATUS1);
  if(neededEnable) { powerDownSPI(); }
    3762:	99 23       	and	r25, r25
    3764:	11 f0       	breq	.+4      	; 0x376a <RFM22ReadStatusBoth()+0x36>
    3766:	0e 94 9f 18 	call	0x313e	; 0x313e <powerDownSPI()>
    376a:	90 2f       	mov	r25, r16
    376c:	80 e0       	ldi	r24, 0x00	; 0
    376e:	21 2f       	mov	r18, r17
    3770:	30 e0       	ldi	r19, 0x00	; 0
    3772:	28 2b       	or	r18, r24
    3774:	39 2b       	or	r19, r25
  return(result);
  }
    3776:	c9 01       	movw	r24, r18
    3778:	1f 91       	pop	r17
    377a:	0f 91       	pop	r16
    377c:	08 95       	ret

0000377e <RFM22ModeStandbyAndClearState()>:
// Enter standby mode (consume least possible power but retain register contents).
// FIFO state and pending interrupts are cleared.
// Typical consumption in standby 450nA (cf 15nA when shut down, 8.5mA TUNE, 18--80mA RX/TX).
void RFM22ModeStandbyAndClearState()
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    377e:	0e 94 b9 18 	call	0x3172	; 0x3172 <powerUpSPIIfDisabled()>
    3782:	98 2f       	mov	r25, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    3784:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3786:	87 e8       	ldi	r24, 0x87	; 135
    3788:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    378a:	0d b4       	in	r0, 0x2d	; 45
    378c:	07 fe       	sbrs	r0, 7
    378e:	fd cf       	rjmp	.-6      	; 0x378a <RFM22ModeStandbyAndClearState()+0xc>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3790:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3792:	0d b4       	in	r0, 0x2d	; 45
    3794:	07 fe       	sbrs	r0, 7
    3796:	fd cf       	rjmp	.-6      	; 0x3792 <RFM22ModeStandbyAndClearState()+0x14>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    3798:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    379a:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    379c:	88 e8       	ldi	r24, 0x88	; 136
    379e:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    37a0:	0d b4       	in	r0, 0x2d	; 45
    37a2:	07 fe       	sbrs	r0, 7
    37a4:	fd cf       	rjmp	.-6      	; 0x37a0 <RFM22ModeStandbyAndClearState()+0x22>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    37a6:	83 e0       	ldi	r24, 0x03	; 3
    37a8:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    37aa:	0d b4       	in	r0, 0x2d	; 45
    37ac:	07 fe       	sbrs	r0, 7
    37ae:	fd cf       	rjmp	.-6      	; 0x37aa <RFM22ModeStandbyAndClearState()+0x2c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    37b0:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    37b2:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    37b4:	88 e8       	ldi	r24, 0x88	; 136
    37b6:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    37b8:	0d b4       	in	r0, 0x2d	; 45
    37ba:	07 fe       	sbrs	r0, 7
    37bc:	fd cf       	rjmp	.-6      	; 0x37b8 <RFM22ModeStandbyAndClearState()+0x3a>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    37be:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    37c0:	0d b4       	in	r0, 0x2d	; 45
    37c2:	07 fe       	sbrs	r0, 7
    37c4:	fd cf       	rjmp	.-6      	; 0x37c0 <RFM22ModeStandbyAndClearState()+0x42>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    37c6:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    37c8:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    37ca:	85 e8       	ldi	r24, 0x85	; 133
    37cc:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    37ce:	0d b4       	in	r0, 0x2d	; 45
    37d0:	07 fe       	sbrs	r0, 7
    37d2:	fd cf       	rjmp	.-6      	; 0x37ce <RFM22ModeStandbyAndClearState()+0x50>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    37d4:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    37d6:	0d b4       	in	r0, 0x2d	; 45
    37d8:	07 fe       	sbrs	r0, 7
    37da:	fd cf       	rjmp	.-6      	; 0x37d6 <RFM22ModeStandbyAndClearState()+0x58>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    37dc:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    37de:	0d b4       	in	r0, 0x2d	; 45
    37e0:	07 fe       	sbrs	r0, 7
    37e2:	fd cf       	rjmp	.-6      	; 0x37de <RFM22ModeStandbyAndClearState()+0x60>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    37e4:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    37e6:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    37e8:	83 e8       	ldi	r24, 0x83	; 131
    37ea:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    37ec:	0d b4       	in	r0, 0x2d	; 45
    37ee:	07 fe       	sbrs	r0, 7
    37f0:	fd cf       	rjmp	.-6      	; 0x37ec <RFM22ModeStandbyAndClearState()+0x6e>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    37f2:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    37f4:	0d b4       	in	r0, 0x2d	; 45
    37f6:	07 fe       	sbrs	r0, 7
    37f8:	fd cf       	rjmp	.-6      	; 0x37f4 <RFM22ModeStandbyAndClearState()+0x76>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    37fa:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    37fc:	0d b4       	in	r0, 0x2d	; 45
    37fe:	07 fe       	sbrs	r0, 7
    3800:	fd cf       	rjmp	.-6      	; 0x37fc <RFM22ModeStandbyAndClearState()+0x7e>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    3802:	2a 9a       	sbi	0x05, 2	; 5
//  _RFM22WriteReg8Bit(RFM22REG_INT_ENABLE2, 0); // TODO: combine in burst write with previous...
  _RFM22WriteReg16Bit0(RFM22REG_INT_ENABLE1);
  // Clear any interrupts already/still pending...
  _RFM22ClearInterrupts();  
  //_RFM22WriteReg8Bit(0xd, 0x1f); // Drive GPIO2 to ground as output... (Move to general register settings.)
  if(neededEnable) { powerDownSPI(); }
    3804:	99 23       	and	r25, r25
    3806:	11 f0       	breq	.+4      	; 0x380c <RFM22ModeStandbyAndClearState()+0x8e>
    3808:	0e 94 9f 18 	call	0x313e	; 0x313e <powerDownSPI()>
    380c:	08 95       	ret

0000380e <RFM22TXFIFO()>:

// Transmit contents of on-chip TX FIFO: caller should revert to low-power standby mode (etc) if required.
// Returns true if packet apparently sent correctly/fully.
// Does not clear TX FIFO (so possible to re-send immediately).
// Note: Reliability possibly helped by early move to 'tune' mode to work other than with default (4MHz) lowish PICAXE clock speeds.
bool RFM22TXFIFO()
    380e:	ff 92       	push	r15
    3810:	0f 93       	push	r16
    3812:	1f 93       	push	r17
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    3814:	0e 94 b9 18 	call	0x3172	; 0x3172 <powerUpSPIIfDisabled()>
    3818:	f8 2e       	mov	r15, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    381a:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    381c:	85 e8       	ldi	r24, 0x85	; 133
    381e:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3820:	0d b4       	in	r0, 0x2d	; 45
    3822:	07 fe       	sbrs	r0, 7
    3824:	fd cf       	rjmp	.-6      	; 0x3820 <RFM22TXFIFO()+0x12>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3826:	84 e0       	ldi	r24, 0x04	; 4
    3828:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    382a:	0d b4       	in	r0, 0x2d	; 45
    382c:	07 fe       	sbrs	r0, 7
    382e:	fd cf       	rjmp	.-6      	; 0x382a <RFM22TXFIFO()+0x1c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    3830:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    3832:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3834:	86 e8       	ldi	r24, 0x86	; 134
    3836:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3838:	0d b4       	in	r0, 0x2d	; 45
    383a:	07 fe       	sbrs	r0, 7
    383c:	fd cf       	rjmp	.-6      	; 0x3838 <RFM22TXFIFO()+0x2a>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    383e:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3840:	0d b4       	in	r0, 0x2d	; 45
    3842:	07 fe       	sbrs	r0, 7
    3844:	fd cf       	rjmp	.-6      	; 0x3840 <RFM22TXFIFO()+0x32>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    3846:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    3848:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    384a:	83 e8       	ldi	r24, 0x83	; 131
    384c:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    384e:	0d b4       	in	r0, 0x2d	; 45
    3850:	07 fe       	sbrs	r0, 7
    3852:	fd cf       	rjmp	.-6      	; 0x384e <RFM22TXFIFO()+0x40>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3854:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3856:	0d b4       	in	r0, 0x2d	; 45
    3858:	07 fe       	sbrs	r0, 7
    385a:	fd cf       	rjmp	.-6      	; 0x3856 <RFM22TXFIFO()+0x48>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    385c:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    385e:	0d b4       	in	r0, 0x2d	; 45
    3860:	07 fe       	sbrs	r0, 7
    3862:	fd cf       	rjmp	.-6      	; 0x385e <RFM22TXFIFO()+0x50>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    3864:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    3866:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3868:	87 e8       	ldi	r24, 0x87	; 135
    386a:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    386c:	0d b4       	in	r0, 0x2d	; 45
    386e:	07 fe       	sbrs	r0, 7
    3870:	fd cf       	rjmp	.-6      	; 0x386c <RFM22TXFIFO()+0x5e>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3872:	89 e0       	ldi	r24, 0x09	; 9
    3874:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3876:	0d b4       	in	r0, 0x2d	; 45
    3878:	07 fe       	sbrs	r0, 7
    387a:	fd cf       	rjmp	.-6      	; 0x3876 <RFM22TXFIFO()+0x68>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    387c:	2a 9a       	sbi	0x05, 2	; 5
    387e:	18 e0       	ldi	r17, 0x08	; 8

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    3880:	03 e0       	ldi	r16, 0x03	; 3
    3882:	13 c0       	rjmp	.+38     	; 0x38aa <RFM22TXFIFO()+0x9c>
  // Repeately nap until packet sent, with upper bound of ~120ms on TX time in case there is a problem.
  // TX time is ~1.6ms per byte at 5000bps.
  bool result = false; // Usual case is success.
  for(int8_t i = 8; --i >= 0; )
    {
    nap(WDTO_15MS); // Sleep in low power mode for a short time waiting for bits to be sent...
    3884:	80 e0       	ldi	r24, 0x00	; 0
    3886:	0e 94 29 16 	call	0x2c52	; 0x2c52 <nap(signed char)>

// Read from 8-bit register on RFM22.
// SPI must already be configured and running.
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
    388a:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    388c:	0e bd       	out	0x2e, r16	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    388e:	0d b4       	in	r0, 0x2d	; 45
    3890:	07 fe       	sbrs	r0, 7
    3892:	fd cf       	rjmp	.-6      	; 0x388e <RFM22TXFIFO()+0x80>
  return(SPDR);
    3894:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    3896:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3898:	0d b4       	in	r0, 0x2d	; 45
    389a:	07 fe       	sbrs	r0, 7
    389c:	fd cf       	rjmp	.-6      	; 0x3898 <RFM22TXFIFO()+0x8a>
  return(SPDR);
    389e:	8e b5       	in	r24, 0x2e	; 46
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  const uint8_t result = _RFM22_io(0); // Dummy value...
  _RFM22_DESELECT();
    38a0:	2a 9a       	sbi	0x05, 2	; 5
  bool result = false; // Usual case is success.
  for(int8_t i = 8; --i >= 0; )
    {
    nap(WDTO_15MS); // Sleep in low power mode for a short time waiting for bits to be sent...
    const uint8_t status = _RFM22ReadReg8Bit(RFM22REG_INT_STATUS1); // TODO: could use nIRQ instead if available.
    if(status & 4) { result = true; break; } // Packet sent!
    38a2:	82 ff       	sbrs	r24, 2
    38a4:	02 c0       	rjmp	.+4      	; 0x38aa <RFM22TXFIFO()+0x9c>
    38a6:	11 e0       	ldi	r17, 0x01	; 1
    38a8:	03 c0       	rjmp	.+6      	; 0x38b0 <RFM22TXFIFO()+0xa2>
  _RFM22ModeTX(); // Enable TX mode and transmit TX FIFO contents.

  // Repeately nap until packet sent, with upper bound of ~120ms on TX time in case there is a problem.
  // TX time is ~1.6ms per byte at 5000bps.
  bool result = false; // Usual case is success.
  for(int8_t i = 8; --i >= 0; )
    38aa:	11 50       	subi	r17, 0x01	; 1
    38ac:	58 f7       	brcc	.-42     	; 0x3884 <RFM22TXFIFO()+0x76>
    38ae:	10 e0       	ldi	r17, 0x00	; 0
    nap(WDTO_15MS); // Sleep in low power mode for a short time waiting for bits to be sent...
    const uint8_t status = _RFM22ReadReg8Bit(RFM22REG_INT_STATUS1); // TODO: could use nIRQ instead if available.
    if(status & 4) { result = true; break; } // Packet sent!
    }

  if(neededEnable) { powerDownSPI(); }
    38b0:	ff 20       	and	r15, r15
    38b2:	11 f0       	breq	.+4      	; 0x38b8 <RFM22TXFIFO()+0xaa>
    38b4:	0e 94 9f 18 	call	0x313e	; 0x313e <powerDownSPI()>
  return(result);
  }
    38b8:	81 2f       	mov	r24, r17
    38ba:	1f 91       	pop	r17
    38bc:	0f 91       	pop	r16
    38be:	ff 90       	pop	r15
    38c0:	08 95       	ret

000038c2 <RFM22CheckConnected()>:
  _RFM22ModeStandby();
  if(neededEnable) { powerDownSPI(); }
  }

// Returns true iff RFM22 (or RFM23) appears to be correctly connected.
bool RFM22CheckConnected()
    38c2:	0f 93       	push	r16
    38c4:	1f 93       	push	r17
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    38c6:	0e 94 b9 18 	call	0x3172	; 0x3172 <powerUpSPIIfDisabled()>
    38ca:	08 2f       	mov	r16, r24

// Read from 8-bit register on RFM22.
// SPI must already be configured and running.
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
    38cc:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    38ce:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    38d0:	0d b4       	in	r0, 0x2d	; 45
    38d2:	07 fe       	sbrs	r0, 7
    38d4:	fd cf       	rjmp	.-6      	; 0x38d0 <RFM22CheckConnected()+0xe>
  return(SPDR);
    38d6:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    38d8:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    38da:	0d b4       	in	r0, 0x2d	; 45
    38dc:	07 fe       	sbrs	r0, 7
    38de:	fd cf       	rjmp	.-6      	; 0x38da <RFM22CheckConnected()+0x18>
  return(SPDR);
    38e0:	1e b5       	in	r17, 0x2e	; 46
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  const uint8_t result = _RFM22_io(0); // Dummy value...
  _RFM22_DESELECT();
    38e2:	2a 9a       	sbi	0x05, 2	; 5
bool RFM22CheckConnected()
  {
  const bool neededEnable = powerUpSPIIfDisabled();
  bool isOK = false;
  const uint8_t rType = _RFM22ReadReg8Bit(0); // May read as 0 if not connected at all.
  if(RFM22_SUPPORTED_DEVICE_TYPE == rType)
    38e4:	18 30       	cpi	r17, 0x08	; 8
    38e6:	a1 f4       	brne	.+40     	; 0x3910 <RFM22CheckConnected()+0x4e>

// Read from 8-bit register on RFM22.
// SPI must already be configured and running.
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
    38e8:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    38ea:	81 e0       	ldi	r24, 0x01	; 1
    38ec:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    38ee:	0d b4       	in	r0, 0x2d	; 45
    38f0:	07 fe       	sbrs	r0, 7
    38f2:	fd cf       	rjmp	.-6      	; 0x38ee <RFM22CheckConnected()+0x2c>
  return(SPDR);
    38f4:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    38f6:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    38f8:	0d b4       	in	r0, 0x2d	; 45
    38fa:	07 fe       	sbrs	r0, 7
    38fc:	fd cf       	rjmp	.-6      	; 0x38f8 <RFM22CheckConnected()+0x36>
  return(SPDR);
    38fe:	1e b5       	in	r17, 0x2e	; 46
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  const uint8_t result = _RFM22_io(0); // Dummy value...
  _RFM22_DESELECT();
    3900:	2a 9a       	sbi	0x05, 2	; 5
  bool isOK = false;
  const uint8_t rType = _RFM22ReadReg8Bit(0); // May read as 0 if not connected at all.
  if(RFM22_SUPPORTED_DEVICE_TYPE == rType)
    {
    const uint8_t rVersion = _RFM22ReadReg8Bit(1);
    if(RFM22_SUPPORTED_DEVICE_VERSION == rVersion)
    3902:	16 30       	cpi	r17, 0x06	; 6
    3904:	11 f4       	brne	.+4      	; 0x390a <RFM22CheckConnected()+0x48>
    3906:	11 e0       	ldi	r17, 0x01	; 1
    3908:	10 c0       	rjmp	.+32     	; 0x392a <RFM22CheckConnected()+0x68>
      { isOK = true; }
#if 1 && defined(DEBUG)
    else
      {
      DEBUG_SERIAL_PRINT_FLASHSTRING("RFM22 bad version: ");
    390a:	8e ee       	ldi	r24, 0xEE	; 238
    390c:	91 e0       	ldi	r25, 0x01	; 1
    390e:	02 c0       	rjmp	.+4      	; 0x3914 <RFM22CheckConnected()+0x52>
#endif
    }
#if 1 && defined(DEBUG)
  else
    {
    DEBUG_SERIAL_PRINT_FLASHSTRING("RFM22 bad type: ");
    3910:	8d ed       	ldi	r24, 0xDD	; 221
    3912:	91 e0       	ldi	r25, 0x01	; 1
    3914:	0e 94 3f 20 	call	0x407e	; 0x407e <serialPrintAndFlush(__FlashStringHelper const*)>
    DEBUG_SERIAL_PRINTFMT(rType, HEX);
    3918:	81 2f       	mov	r24, r17
    391a:	90 e0       	ldi	r25, 0x00	; 0
    391c:	60 e1       	ldi	r22, 0x10	; 16
    391e:	70 e0       	ldi	r23, 0x00	; 0
    3920:	0e 94 0d 20 	call	0x401a	; 0x401a <serialPrintAndFlush(int, int)>
    DEBUG_SERIAL_PRINTLN();
    3924:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <serialPrintlnAndFlush()>
    3928:	10 e0       	ldi	r17, 0x00	; 0
    }
#endif
  if(neededEnable) { powerDownSPI(); }
    392a:	00 23       	and	r16, r16
    392c:	11 f0       	breq	.+4      	; 0x3932 <RFM22CheckConnected()+0x70>
    392e:	0e 94 9f 18 	call	0x313e	; 0x313e <powerDownSPI()>
  return(isOK);
  }
    3932:	81 2f       	mov	r24, r17
    3934:	1f 91       	pop	r17
    3936:	0f 91       	pop	r16
    3938:	08 95       	ret

0000393a <eeprom_read_byte>:


/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
    393a:	9c 01       	movw	r18, r24
{
    do {} while (!eeprom_is_ready ());
    393c:	f9 99       	sbic	0x1f, 1	; 31
    393e:	fe cf       	rjmp	.-4      	; 0x393c <eeprom_read_byte+0x2>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    3940:	32 bd       	out	0x22, r19	; 34
    3942:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    3944:	f8 9a       	sbi	0x1f, 0	; 31
    3946:	80 b5       	in	r24, 0x20	; 32
    return __result;
}
    3948:	08 95       	ret

0000394a <eeprom_write_byte>:
}

/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
    394a:	9c 01       	movw	r18, r24
{
    do {} while (!eeprom_is_ready ());
    394c:	f9 99       	sbic	0x1f, 1	; 31
    394e:	fe cf       	rjmp	.-4      	; 0x394c <eeprom_write_byte+0x2>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    3950:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    3952:	32 bd       	out	0x22, r19	; 34
    3954:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
    3956:	60 bd       	out	0x20, r22	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    3958:	0f b6       	in	r0, 0x3f	; 63
    395a:	f8 94       	cli
    395c:	fa 9a       	sbi	0x1f, 2	; 31
    395e:	f9 9a       	sbi	0x1f, 1	; 31
    3960:	0f be       	out	0x3f, r0	; 63
}
    3962:	08 95       	ret

00003964 <getMinutesSinceMidnightLT()>:
// Preserves interrupt state.
#ifndef getMinutesSinceMidnightLT
uint_least16_t getMinutesSinceMidnightLT()
  {
  uint_least16_t result;
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    3964:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3966:	f8 94       	cli
    { result = _minutesSinceMidnightLT; }
    3968:	20 91 d1 01 	lds	r18, 0x01D1
    396c:	30 91 d2 01 	lds	r19, 0x01D2
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3970:	8f bf       	out	0x3f, r24	; 63
  return(result);
  }
    3972:	c9 01       	movw	r24, r18
    3974:	08 95       	ret

00003976 <getMinutesLT()>:
// Preserves interrupt state.
#ifndef getMinutesSinceMidnightLT
uint_least16_t getMinutesSinceMidnightLT()
  {
  uint_least16_t result;
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    3976:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3978:	f8 94       	cli
    { result = _minutesSinceMidnightLT; }
    397a:	80 91 d1 01 	lds	r24, 0x01D1
    397e:	90 91 d2 01 	lds	r25, 0x01D2
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3982:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    3984:	6c e3       	ldi	r22, 0x3C	; 60
    3986:	70 e0       	ldi	r23, 0x00	; 0
    3988:	0e 94 fb 38 	call	0x71f6	; 0x71f6 <__udivmodhi4>
  return(result);
  }
#endif

// Get local time minutes from RTC [0,59].
uint_least8_t getMinutesLT() { return(getMinutesSinceMidnightLT() % 60); }
    398c:	08 95       	ret

0000398e <getHoursLT()>:
// Preserves interrupt state.
#ifndef getMinutesSinceMidnightLT
uint_least16_t getMinutesSinceMidnightLT()
  {
  uint_least16_t result;
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    398e:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3990:	f8 94       	cli
    { result = _minutesSinceMidnightLT; }
    3992:	80 91 d1 01 	lds	r24, 0x01D1
    3996:	90 91 d2 01 	lds	r25, 0x01D2
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    399a:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    399c:	6c e3       	ldi	r22, 0x3C	; 60
    399e:	70 e0       	ldi	r23, 0x00	; 0
    39a0:	0e 94 fb 38 	call	0x71f6	; 0x71f6 <__udivmodhi4>
    39a4:	86 2f       	mov	r24, r22

// Get local time minutes from RTC [0,59].
uint_least8_t getMinutesLT() { return(getMinutesSinceMidnightLT() % 60); }

// Get local time hours from RTC [0,23].
uint_least8_t getHoursLT() { return(getMinutesSinceMidnightLT() / 60); }
    39a6:	08 95       	ret

000039a8 <restoreRTC()>:

// Restore software RTC information from non-volatile (EEPROM) store, if possible.
// Returns true if the persisted data seemed valid and was restored, in full or part.
// To void on average using 15/2 minutes at each reset/restart,
// this starts the internal time a little over half way into the restored 15-minute slot.
bool restoreRTC()
    39a8:	1f 93       	push	r17
  {
  uint8_t persistedValue;
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    39aa:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    39ac:	f8 94       	cli
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    39ae:	88 e0       	ldi	r24, 0x08	; 8
    39b0:	90 e0       	ldi	r25, 0x00	; 0
    39b2:	6d e9       	ldi	r22, 0x9D	; 157
    39b4:	7c e1       	ldi	r23, 0x1C	; 28
    39b6:	0e 94 4b 04 	call	0x896	; 0x896 <__eerd_word>
    {
    // Restore the persisted days, though ignore if apparently unset (all 1s).
    const uint16_t days = eeprom_read_word((uint16_t*)EE_START_RTC_DAY_PERSIST);
    if(days != (uint16_t)~0U) { _daysSince1999LT = days; }
    39ba:	2f ef       	ldi	r18, 0xFF	; 255
    39bc:	8f 3f       	cpi	r24, 0xFF	; 255
    39be:	92 07       	cpc	r25, r18
    39c0:	21 f0       	breq	.+8      	; 0x39ca <restoreRTC()+0x22>
    39c2:	90 93 d4 01 	sts	0x01D4, r25
    39c6:	80 93 d3 01 	sts	0x01D3, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    39ca:	f9 99       	sbic	0x1f, 1	; 31
    39cc:	fe cf       	rjmp	.-4      	; 0x39ca <restoreRTC()+0x22>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    39ce:	8a e0       	ldi	r24, 0x0A	; 10
    39d0:	90 e0       	ldi	r25, 0x00	; 0
    39d2:	92 bd       	out	0x22, r25	; 34
    39d4:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    39d6:	f8 9a       	sbi	0x1f, 0	; 31
    39d8:	60 b5       	in	r22, 0x20	; 32
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    39da:	1f bf       	out	0x3f, r17	; 63
    // Now recover persisted HH:MM value.
    persistedValue = eeprom_read_byte((uint8_t*)EE_START_RTC_HHMM_PERSIST);
    }

  // Abort if value clearly invalid, eg likely an unprogrammed (0xff) byte.
  if(persistedValue >= (24 << 3)) { return(false); }
    39dc:	60 3c       	cpi	r22, 0xC0	; 192
    39de:	90 f5       	brcc	.+100    	; 0x3a44 <restoreRTC()+0x9c>

  uint_least16_t minutesSinceMidnight = (persistedValue >> 3) * 60;
    39e0:	86 2f       	mov	r24, r22
    39e2:	90 e0       	ldi	r25, 0x00	; 0
    39e4:	23 e0       	ldi	r18, 0x03	; 3
    39e6:	95 95       	asr	r25
    39e8:	87 95       	ror	r24
    39ea:	2a 95       	dec	r18
    39ec:	e1 f7       	brne	.-8      	; 0x39e6 <restoreRTC()+0x3e>
    39ee:	2c e3       	ldi	r18, 0x3C	; 60
    39f0:	30 e0       	ldi	r19, 0x00	; 0
    39f2:	82 9f       	mul	r24, r18
    39f4:	a0 01       	movw	r20, r0
    39f6:	83 9f       	mul	r24, r19
    39f8:	50 0d       	add	r21, r0
    39fa:	92 9f       	mul	r25, r18
    39fc:	50 0d       	add	r21, r0
    39fe:	11 24       	eor	r1, r1
  minutesSinceMidnight += 8; // Start just over half-way into one quantum to minimise average time lost on restart.
    3a00:	9a 01       	movw	r18, r20
    3a02:	28 5f       	subi	r18, 0xF8	; 248
    3a04:	3f 4f       	sbci	r19, 0xFF	; 255
  const uint8_t lowBits = persistedValue & 7; // Extract quarter-hour bits.
  switch(lowBits)
    3a06:	86 2f       	mov	r24, r22
    3a08:	87 70       	andi	r24, 0x07	; 7
    3a0a:	81 30       	cpi	r24, 0x01	; 1
    3a0c:	59 f0       	breq	.+22     	; 0x3a24 <restoreRTC()+0x7c>
    3a0e:	81 30       	cpi	r24, 0x01	; 1
    3a10:	28 f0       	brcs	.+10     	; 0x3a1c <restoreRTC()+0x74>
    3a12:	83 30       	cpi	r24, 0x03	; 3
    3a14:	59 f0       	breq	.+22     	; 0x3a2c <restoreRTC()+0x84>
    3a16:	87 30       	cpi	r24, 0x07	; 7
    3a18:	a9 f4       	brne	.+42     	; 0x3a44 <restoreRTC()+0x9c>
    3a1a:	0b c0       	rjmp	.+22     	; 0x3a32 <restoreRTC()+0x8a>
    {
    case 0: minutesSinceMidnight += 45; break;
    3a1c:	9a 01       	movw	r18, r20
    3a1e:	2b 5c       	subi	r18, 0xCB	; 203
    3a20:	3f 4f       	sbci	r19, 0xFF	; 255
    3a22:	07 c0       	rjmp	.+14     	; 0x3a32 <restoreRTC()+0x8a>
    case 1: minutesSinceMidnight += 30; break;
    3a24:	9a 01       	movw	r18, r20
    3a26:	2a 5d       	subi	r18, 0xDA	; 218
    3a28:	3f 4f       	sbci	r19, 0xFF	; 255
    3a2a:	03 c0       	rjmp	.+6      	; 0x3a32 <restoreRTC()+0x8a>
    case 3: minutesSinceMidnight += 15; break;
    3a2c:	9a 01       	movw	r18, r20
    3a2e:	29 5e       	subi	r18, 0xE9	; 233
    3a30:	3f 4f       	sbci	r19, 0xFF	; 255
    default: return(false); // Invalid bit pattern: abort.
    }

  // Set the hours and minutes (atomically).
  // Deliberately leave the seconds unset to avoid units becoming too synchronised with one another, increasing TX collisions, etc.
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    3a32:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3a34:	f8 94       	cli
    { _minutesSinceMidnightLT = minutesSinceMidnight; }
    3a36:	30 93 d2 01 	sts	0x01D2, r19
    3a3a:	20 93 d1 01 	sts	0x01D1, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3a3e:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
    3a40:	81 e0       	ldi	r24, 0x01	; 1
    3a42:	01 c0       	rjmp	.+2      	; 0x3a46 <restoreRTC()+0x9e>

  return(true);
    3a44:	80 e0       	ldi	r24, 0x00	; 0
  }
    3a46:	1f 91       	pop	r17
    3a48:	08 95       	ret

00003a4a <persistRTC()>:
// but enough to help avoid the clock slipping too much during (say) a battery change.
// There is no point calling this more than (say) once per minute,
// though it will simply return relatively quickly from redundant calls.
// The RTC data is stored so as not to wear out AVR EEPROM for at least several years.
// IMPLEMENTATION OF THIS AND THE eeprom_smart_xxx_byte() ROUTINES IS CRITICAL TO PERFORMANCE AND LONGEVITY.
void persistRTC()
    3a4a:	1f 93       	push	r17
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    3a4c:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3a4e:	f8 94       	cli
    {
    uint8_t quarterHours = (_minutesSinceMidnightLT / 15);
    3a50:	80 91 d1 01 	lds	r24, 0x01D1
    3a54:	90 91 d2 01 	lds	r25, 0x01D2
    3a58:	6f e0       	ldi	r22, 0x0F	; 15
    3a5a:	70 e0       	ldi	r23, 0x00	; 0
    3a5c:	0e 94 fb 38 	call	0x71f6	; 0x71f6 <__udivmodhi4>
    uint8_t targetByte = (quarterHours << 1) & ~7U; // Bit pattern now hhhhh000 where hhhhh is whole hours [0,23].
    3a60:	46 2f       	mov	r20, r22
    3a62:	44 0f       	add	r20, r20
    3a64:	48 7f       	andi	r20, 0xF8	; 248
    switch(quarterHours & 3)
    3a66:	70 e0       	ldi	r23, 0x00	; 0
    3a68:	63 70       	andi	r22, 0x03	; 3
    3a6a:	70 70       	andi	r23, 0x00	; 0
    3a6c:	61 30       	cpi	r22, 0x01	; 1
    3a6e:	71 05       	cpc	r23, r1
    3a70:	39 f0       	breq	.+14     	; 0x3a80 <persistRTC()+0x36>
    3a72:	62 30       	cpi	r22, 0x02	; 2
    3a74:	71 05       	cpc	r23, r1
    3a76:	31 f0       	breq	.+12     	; 0x3a84 <persistRTC()+0x3a>
    3a78:	67 2b       	or	r22, r23
    3a7a:	29 f4       	brne	.+10     	; 0x3a86 <persistRTC()+0x3c>
      {
      case 0: targetByte |= 7; break;
    3a7c:	47 60       	ori	r20, 0x07	; 7
    3a7e:	03 c0       	rjmp	.+6      	; 0x3a86 <persistRTC()+0x3c>
      case 1: targetByte |= 3; break;
    3a80:	43 60       	ori	r20, 0x03	; 3
    3a82:	01 c0       	rjmp	.+2      	; 0x3a86 <persistRTC()+0x3c>
      case 2: targetByte |= 1; break;
    3a84:	41 60       	ori	r20, 0x01	; 1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    3a86:	f9 99       	sbic	0x1f, 1	; 31
    3a88:	fe cf       	rjmp	.-4      	; 0x3a86 <persistRTC()+0x3c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    3a8a:	8a e0       	ldi	r24, 0x0A	; 10
    3a8c:	90 e0       	ldi	r25, 0x00	; 0
    3a8e:	92 bd       	out	0x22, r25	; 34
    3a90:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    3a92:	f8 9a       	sbi	0x1f, 0	; 31
    3a94:	80 b5       	in	r24, 0x20	; 32
      }

    // Update if target HH:MM not already correct.
    const uint8_t persistedValue = eeprom_read_byte((uint8_t*)EE_START_RTC_HHMM_PERSIST);
    if(persistedValue != targetByte)
    3a96:	84 17       	cp	r24, r20
    3a98:	91 f1       	breq	.+100    	; 0x3afe <persistRTC()+0xb4>
      {
      // Where it is not possible to get the target value just by setting bits to 0,
      // eg for a new hour (ie completely different hour to that in EEPROM and on roll to new hour),
      // then do a full erase/write...
      //if((0 == quarterHours) || ((persistedValue & 0xf8) != (targetByte & 0xf8)))
      if(targetByte != (persistedValue & targetByte))
    3a9a:	24 2f       	mov	r18, r20
    3a9c:	30 e0       	ldi	r19, 0x00	; 0
    3a9e:	90 e0       	ldi	r25, 0x00	; 0
    3aa0:	82 23       	and	r24, r18
    3aa2:	93 23       	and	r25, r19
    3aa4:	28 17       	cp	r18, r24
    3aa6:	39 07       	cpc	r19, r25
    3aa8:	71 f0       	breq	.+28     	; 0x3ac6 <persistRTC()+0x7c>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    3aaa:	f9 99       	sbic	0x1f, 1	; 31
    3aac:	fe cf       	rjmp	.-4      	; 0x3aaa <persistRTC()+0x60>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    3aae:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    3ab0:	8a e0       	ldi	r24, 0x0A	; 10
    3ab2:	90 e0       	ldi	r25, 0x00	; 0
    3ab4:	92 bd       	out	0x22, r25	; 34
    3ab6:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    3ab8:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    3aba:	0f b6       	in	r0, 0x3f	; 63
    3abc:	f8 94       	cli
    3abe:	fa 9a       	sbi	0x1f, 2	; 31
    3ac0:	f9 9a       	sbi	0x1f, 1	; 31
    3ac2:	0f be       	out	0x3f, r0	; 63
    3ac4:	05 c0       	rjmp	.+10     	; 0x3ad0 <persistRTC()+0x86>
        { eeprom_write_byte((uint8_t*)EE_START_RTC_HHMM_PERSIST, targetByte); }
      // Else do a write without erase, typically clearing the quarter bits one at a time...
      else
        { eeprom_smart_clear_bits((uint8_t*)EE_START_RTC_HHMM_PERSIST, targetByte); }
    3ac6:	8a e0       	ldi	r24, 0x0A	; 10
    3ac8:	90 e0       	ldi	r25, 0x00	; 0
    3aca:	64 2f       	mov	r22, r20
    3acc:	0e 94 b4 0b 	call	0x1768	; 0x1768 <eeprom_smart_clear_bits(unsigned char*, unsigned char)>
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    3ad0:	88 e0       	ldi	r24, 0x08	; 8
    3ad2:	90 e0       	ldi	r25, 0x00	; 0
    3ad4:	6d e9       	ldi	r22, 0x9D	; 157
    3ad6:	7c e1       	ldi	r23, 0x1C	; 28
    3ad8:	0e 94 4b 04 	call	0x896	; 0x896 <__eerd_word>

      // Also persist the current days if not up to date.
      const uint16_t days = eeprom_read_word((uint16_t*)EE_START_RTC_DAY_PERSIST);
      if(days != _daysSince1999LT) { eeprom_write_word((uint16_t*)EE_START_RTC_DAY_PERSIST, _daysSince1999LT); }
    3adc:	20 91 d3 01 	lds	r18, 0x01D3
    3ae0:	30 91 d4 01 	lds	r19, 0x01D4
    3ae4:	82 17       	cp	r24, r18
    3ae6:	93 07       	cpc	r25, r19
    3ae8:	51 f0       	breq	.+20     	; 0x3afe <persistRTC()+0xb4>
    3aea:	60 91 d3 01 	lds	r22, 0x01D3
    3aee:	70 91 d4 01 	lds	r23, 0x01D4
    Write a word \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_word (uint16_t *__p, uint16_t __value)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    __eewr_word (__p, __value, eeprom_write_byte);
    3af2:	88 e0       	ldi	r24, 0x08	; 8
    3af4:	90 e0       	ldi	r25, 0x00	; 0
    3af6:	45 ea       	ldi	r20, 0xA5	; 165
    3af8:	5c e1       	ldi	r21, 0x1C	; 28
    3afa:	0e 94 61 04 	call	0x8c2	; 0x8c2 <__eewr_word>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3afe:	1f bf       	out	0x3f, r17	; 63
      }
    }
  }
    3b00:	1f 91       	pop	r17
    3b02:	08 95       	ret

00003b04 <setHoursMinutesLT(int, int)>:
// Will ignore attempts to set bad values and return false in that case.
// Returns true if all OK and the time has been set.
// Does not attempt to set seconds.
// Thread/interrupt safe, but do not call this from an ISR.
// Will persist time to survive reset as neceessary.
bool setHoursMinutesLT(int hours, int minutes)
    3b04:	1f 93       	push	r17
    3b06:	ac 01       	movw	r20, r24
  {
  if((hours < 0) || (hours > 23) || (minutes < 0) || (minutes > 59)) { return(false); } // Invalid time.
    3b08:	88 31       	cpi	r24, 0x18	; 24
    3b0a:	91 05       	cpc	r25, r1
    3b0c:	10 f5       	brcc	.+68     	; 0x3b52 <setHoursMinutesLT(int, int)+0x4e>
    3b0e:	77 fd       	sbrc	r23, 7
    3b10:	20 c0       	rjmp	.+64     	; 0x3b52 <setHoursMinutesLT(int, int)+0x4e>
    3b12:	6c 33       	cpi	r22, 0x3C	; 60
    3b14:	71 05       	cpc	r23, r1
    3b16:	ec f4       	brge	.+58     	; 0x3b52 <setHoursMinutesLT(int, int)+0x4e>
  const uint_least16_t computedMinutesSinceMidnightLT = (uint_least16_t) ((60 * hours) + minutes);
    3b18:	8c e3       	ldi	r24, 0x3C	; 60
    3b1a:	90 e0       	ldi	r25, 0x00	; 0
    3b1c:	48 9f       	mul	r20, r24
    3b1e:	90 01       	movw	r18, r0
    3b20:	49 9f       	mul	r20, r25
    3b22:	30 0d       	add	r19, r0
    3b24:	58 9f       	mul	r21, r24
    3b26:	30 0d       	add	r19, r0
    3b28:	11 24       	eor	r1, r1
    3b2a:	26 0f       	add	r18, r22
    3b2c:	37 1f       	adc	r19, r23
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    3b2e:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3b30:	f8 94       	cli
    {
    if(computedMinutesSinceMidnightLT != _minutesSinceMidnightLT)
    3b32:	80 91 d1 01 	lds	r24, 0x01D1
    3b36:	90 91 d2 01 	lds	r25, 0x01D2
    3b3a:	28 17       	cp	r18, r24
    3b3c:	39 07       	cpc	r19, r25
    3b3e:	31 f0       	breq	.+12     	; 0x3b4c <setHoursMinutesLT(int, int)+0x48>
      {
      // If time has changed then store it locally and persist it if need be.
      _minutesSinceMidnightLT = computedMinutesSinceMidnightLT;
    3b40:	30 93 d2 01 	sts	0x01D2, r19
    3b44:	20 93 d1 01 	sts	0x01D1, r18
      persistRTC();
    3b48:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <persistRTC()>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3b4c:	1f bf       	out	0x3f, r17	; 63
    __asm__ volatile ("" ::: "memory");
    3b4e:	81 e0       	ldi	r24, 0x01	; 1
    3b50:	01 c0       	rjmp	.+2      	; 0x3b54 <setHoursMinutesLT(int, int)+0x50>
      }
    }
  return(true); // Assume set and persisted OK.
    3b52:	80 e0       	ldi	r24, 0x00	; 0
  }
    3b54:	1f 91       	pop	r17
    3b56:	08 95       	ret

00003b58 <getSimpleScheduleOn(unsigned char)>:
// Will usually include a pre-warm time before the actual time set.
// Note that unprogrammed EEPROM value will result in invalid time, ie schedule not set.
//   * which  schedule number, counting from 0
uint_least16_t getSimpleScheduleOn(const uint8_t which)
  {
  if(which >= MAX_SIMPLE_SCHEDULES) { return(~0); } // Invalid schedule number.
    3b58:	82 30       	cpi	r24, 0x02	; 2
    3b5a:	d0 f4       	brcc	.+52     	; 0x3b90 <getSimpleScheduleOn(unsigned char)+0x38>
  uint8_t startMM;
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    3b5c:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3b5e:	f8 94       	cli
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    3b60:	f9 99       	sbic	0x1f, 1	; 31
    3b62:	fe cf       	rjmp	.-4      	; 0x3b60 <getSimpleScheduleOn(unsigned char)+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    3b64:	90 e0       	ldi	r25, 0x00	; 0
    3b66:	0c 96       	adiw	r24, 0x0c	; 12
    3b68:	92 bd       	out	0x22, r25	; 34
    3b6a:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    3b6c:	f8 9a       	sbi	0x1f, 0	; 31
    3b6e:	90 b5       	in	r25, 0x20	; 32
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3b70:	2f bf       	out	0x3f, r18	; 63
    { startMM = eeprom_read_byte((uint8_t*)(EE_START_SIMPLE_SCHEDULE0_ON + which)); }
  if(startMM > MAX_COMPRESSED_MINS_AFTER_MIDNIGHT) { return(~0); } // No schedule set.
    3b72:	90 3f       	cpi	r25, 0xF0	; 240
    3b74:	68 f4       	brcc	.+26     	; 0x3b90 <getSimpleScheduleOn(unsigned char)+0x38>
  // Compute start time from stored shedule value.
  uint_least16_t startTime = SIMPLE_SCHEDULE_GRANULARITY_MINS * startMM;
    3b76:	86 e0       	ldi	r24, 0x06	; 6
    3b78:	98 9f       	mul	r25, r24
    3b7a:	c0 01       	movw	r24, r0
    3b7c:	11 24       	eor	r1, r1
  const uint8_t windBackM = PREWARM_MINS; // Wind back start time by about 25% of full interval.
  if(windBackM > startTime) { startTime += MINS_PER_DAY; } // Allow for wrap-around at midnight.
    3b7e:	8f 30       	cpi	r24, 0x0F	; 15
    3b80:	91 05       	cpc	r25, r1
    3b82:	10 f4       	brcc	.+4      	; 0x3b88 <getSimpleScheduleOn(unsigned char)+0x30>
    3b84:	80 56       	subi	r24, 0x60	; 96
    3b86:	9a 4f       	sbci	r25, 0xFA	; 250
  startTime -= windBackM;
    3b88:	9c 01       	movw	r18, r24
    3b8a:	2f 50       	subi	r18, 0x0F	; 15
    3b8c:	30 40       	sbci	r19, 0x00	; 0
    3b8e:	02 c0       	rjmp	.+4      	; 0x3b94 <getSimpleScheduleOn(unsigned char)+0x3c>
  return(startTime);
    3b90:	2f ef       	ldi	r18, 0xFF	; 255
    3b92:	3f ef       	ldi	r19, 0xFF	; 255
  }
    3b94:	c9 01       	movw	r24, r18
    3b96:	08 95       	ret

00003b98 <clearSimpleSchedule(unsigned char)>:
  }

// Clear a simple schedule.
// There will be neither on nor off events from the selected simple schedule once this is called.
//   * which  schedule number, counting from 0
void clearSimpleSchedule(const uint8_t which)
    3b98:	1f 93       	push	r17
  {
  if(which >= MAX_SIMPLE_SCHEDULES) { return; } // Invalid schedule number.
    3b9a:	82 30       	cpi	r24, 0x02	; 2
    3b9c:	38 f4       	brcc	.+14     	; 0x3bac <clearSimpleSchedule(unsigned char)+0x14>
  // Clear the schedule back to 'unprogrammed' values, minimising wear.
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    3b9e:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3ba0:	f8 94       	cli
    { eeprom_smart_erase_byte((uint8_t*)(EE_START_SIMPLE_SCHEDULE0_ON + which)); }
    3ba2:	90 e0       	ldi	r25, 0x00	; 0
    3ba4:	0c 96       	adiw	r24, 0x0c	; 12
    3ba6:	0e 94 a0 0b 	call	0x1740	; 0x1740 <eeprom_smart_erase_byte(unsigned char*)>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3baa:	1f bf       	out	0x3f, r17	; 63
  }
    3bac:	1f 91       	pop	r17
    3bae:	08 95       	ret

00003bb0 <setSimpleSchedule(unsigned int, unsigned char)>:
//   * startMinutesSinceMidnightLT  is start/on time in minutes after midnight [0,1439]
//   * which  schedule number, counting from 0
// Invalid parameters will be ignored and false returned,
// else this will return true and isSimpleScheduleSet() will return true after this.
// NOTE: over-use of this routine can prematurely wear out the EEPROM.
bool setSimpleSchedule(const uint_least16_t startMinutesSinceMidnightLT, const uint8_t which)
    3bb0:	1f 93       	push	r17
  {
  if(which >= MAX_SIMPLE_SCHEDULES) { return(false); } // Invalid schedule number.
    3bb2:	62 30       	cpi	r22, 0x02	; 2
    3bb4:	98 f4       	brcc	.+38     	; 0x3bdc <setSimpleSchedule(unsigned int, unsigned char)+0x2c>
  if(startMinutesSinceMidnightLT >= MINS_PER_DAY) { return(false); } // Invalid time.
    3bb6:	25 e0       	ldi	r18, 0x05	; 5
    3bb8:	80 3a       	cpi	r24, 0xA0	; 160
    3bba:	92 07       	cpc	r25, r18
    3bbc:	78 f4       	brcc	.+30     	; 0x3bdc <setSimpleSchedule(unsigned int, unsigned char)+0x2c>

  // Set the schedule, minimising wear.
  const uint8_t startMM = startMinutesSinceMidnightLT / SIMPLE_SCHEDULE_GRANULARITY_MINS; // Round down...
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    3bbe:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3bc0:	f8 94       	cli
    { eeprom_smart_update_byte((uint8_t*)(EE_START_SIMPLE_SCHEDULE0_ON + which), startMM); }
    3bc2:	26 2f       	mov	r18, r22
    3bc4:	30 e0       	ldi	r19, 0x00	; 0
    3bc6:	66 e0       	ldi	r22, 0x06	; 6
    3bc8:	70 e0       	ldi	r23, 0x00	; 0
    3bca:	0e 94 fb 38 	call	0x71f6	; 0x71f6 <__udivmodhi4>
    3bce:	c9 01       	movw	r24, r18
    3bd0:	0c 96       	adiw	r24, 0x0c	; 12
    3bd2:	0e 94 ca 0b 	call	0x1794	; 0x1794 <eeprom_smart_update_byte(unsigned char*, unsigned char)>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3bd6:	1f bf       	out	0x3f, r17	; 63
    __asm__ volatile ("" ::: "memory");
    3bd8:	81 e0       	ldi	r24, 0x01	; 1
    3bda:	01 c0       	rjmp	.+2      	; 0x3bde <setSimpleSchedule(unsigned int, unsigned char)+0x2e>
  return(true); // Assume EEPROM programmed OK...
    3bdc:	80 e0       	ldi	r24, 0x00	; 0
  }
    3bde:	1f 91       	pop	r17
    3be0:	08 95       	ret

00003be2 <getSimpleScheduleOff(unsigned char)>:
  }

// Get the simple/primary schedule off time, as minutes after midnight [0,1439]; invalid (eg ~0) if none set.
// This is based on specifed start time and some element of the current eco/comfort bias.
//   * which  schedule number, counting from 0
uint_least16_t getSimpleScheduleOff(const uint8_t which)
    3be2:	cf 93       	push	r28
    3be4:	df 93       	push	r29
  {
  const uint_least16_t startMins = getSimpleScheduleOn(which);
    3be6:	0e 94 ac 1d 	call	0x3b58	; 0x3b58 <getSimpleScheduleOn(unsigned char)>
    3bea:	ec 01       	movw	r28, r24
  if(startMins == (uint_least16_t)~0) { return(~0); }
    3bec:	8f ef       	ldi	r24, 0xFF	; 255
    3bee:	cf 3f       	cpi	r28, 0xFF	; 255
    3bf0:	d8 07       	cpc	r29, r24
    3bf2:	19 f4       	brne	.+6      	; 0x3bfa <getSimpleScheduleOff(unsigned char)+0x18>
    3bf4:	2f ef       	ldi	r18, 0xFF	; 255
    3bf6:	3f ef       	ldi	r19, 0xFF	; 255
    3bf8:	16 c0       	rjmp	.+44     	; 0x3c26 <getSimpleScheduleOff(unsigned char)+0x44>
  {
//  // Simple and fast binary choice.
//  return(hasEcoBias() ? LEARNED_ON_PERIOD_M : LEARNED_ON_PERIOD_COMFORT_M);

  // Three-way split based on current WARM target temperature.
  const uint8_t wt = getWARMTargetC();
    3bfa:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <getWARMTargetC()>
  if(isEcoTemperature(wt)) { return(LEARNED_ON_PERIOD_M); }
    3bfe:	82 31       	cpi	r24, 0x12	; 18
    3c00:	10 f4       	brcc	.+4      	; 0x3c06 <getSimpleScheduleOff(unsigned char)+0x24>
    3c02:	8c e3       	ldi	r24, 0x3C	; 60
    3c04:	05 c0       	rjmp	.+10     	; 0x3c10 <getSimpleScheduleOff(unsigned char)+0x2e>
  else if(isComfortTemperature(wt)) { return(LEARNED_ON_PERIOD_COMFORT_M); }
    3c06:	87 31       	cpi	r24, 0x17	; 23
    3c08:	10 f4       	brcc	.+4      	; 0x3c0e <getSimpleScheduleOff(unsigned char)+0x2c>
    3c0a:	8a e5       	ldi	r24, 0x5A	; 90
    3c0c:	01 c0       	rjmp	.+2      	; 0x3c10 <getSimpleScheduleOff(unsigned char)+0x2e>
    3c0e:	88 e7       	ldi	r24, 0x78	; 120
uint_least16_t getSimpleScheduleOff(const uint8_t which)
  {
  const uint_least16_t startMins = getSimpleScheduleOn(which);
  if(startMins == (uint_least16_t)~0) { return(~0); }
  // Compute end from start, allowing for wrap-around at midnight.
  uint_least16_t endTime = startMins + PREWARM_MINS + onTime();
    3c10:	9e 01       	movw	r18, r28
    3c12:	21 5f       	subi	r18, 0xF1	; 241
    3c14:	3f 4f       	sbci	r19, 0xFF	; 255
    3c16:	28 0f       	add	r18, r24
    3c18:	31 1d       	adc	r19, r1
  if(endTime >= MINS_PER_DAY) { endTime -= MINS_PER_DAY; } // Allow for wrap-around at midnight.
    3c1a:	85 e0       	ldi	r24, 0x05	; 5
    3c1c:	20 3a       	cpi	r18, 0xA0	; 160
    3c1e:	38 07       	cpc	r19, r24
    3c20:	10 f0       	brcs	.+4      	; 0x3c26 <getSimpleScheduleOff(unsigned char)+0x44>
    3c22:	20 5a       	subi	r18, 0xA0	; 160
    3c24:	35 40       	sbci	r19, 0x05	; 5
  return(endTime);
  }
    3c26:	c9 01       	movw	r24, r18
    3c28:	df 91       	pop	r29
    3c2a:	cf 91       	pop	r28
    3c2c:	08 95       	ret

00003c2e <isAnyScheduleOnWARMNow()>:

// True iff any schedule is currently 'on'/'WARM' even when schedules overlap.
// May be relatively slow/expensive.
// Can be used to suppress all 'off' activity except for the final one.
// Can be used to suppress set-backs during on times.
bool isAnyScheduleOnWARMNow()
    3c2e:	0f 93       	push	r16
    3c30:	1f 93       	push	r17
    3c32:	cf 93       	push	r28
    3c34:	df 93       	push	r29
  {
  const uint_least16_t mm = getMinutesSinceMidnightLT();
    3c36:	0e 94 b2 1c 	call	0x3964	; 0x3964 <getMinutesSinceMidnightLT()>
    3c3a:	8c 01       	movw	r16, r24

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    3c3c:	80 e0       	ldi	r24, 0x00	; 0
    3c3e:	0e 94 ac 1d 	call	0x3b58	; 0x3b58 <getSimpleScheduleOn(unsigned char)>
    3c42:	ec 01       	movw	r28, r24
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    3c44:	08 17       	cp	r16, r24
    3c46:	19 07       	cpc	r17, r25
    3c48:	68 f0       	brcs	.+26     	; 0x3c64 <isAnyScheduleOnWARMNow()+0x36>
    uint_least16_t e = getSimpleScheduleOff(which);
    3c4a:	80 e0       	ldi	r24, 0x00	; 0
    3c4c:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <getSimpleScheduleOff(unsigned char)>
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    3c50:	8c 17       	cp	r24, r28
    3c52:	9d 07       	cpc	r25, r29
    3c54:	20 f0       	brcs	.+8      	; 0x3c5e <isAnyScheduleOnWARMNow()+0x30>
    if(mm < e) { return(true); }
    3c56:	08 17       	cp	r16, r24
    3c58:	19 07       	cpc	r17, r25
    3c5a:	20 f4       	brcc	.+8      	; 0x3c64 <isAnyScheduleOnWARMNow()+0x36>
    3c5c:	17 c0       	rjmp	.+46     	; 0x3c8c <isAnyScheduleOnWARMNow()+0x5e>
  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    uint_least16_t e = getSimpleScheduleOff(which);
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    3c5e:	80 56       	subi	r24, 0x60	; 96
    3c60:	9a 4f       	sbci	r25, 0xFA	; 250
    3c62:	f9 cf       	rjmp	.-14     	; 0x3c56 <isAnyScheduleOnWARMNow()+0x28>
  {
  const uint_least16_t mm = getMinutesSinceMidnightLT();

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    3c64:	81 e0       	ldi	r24, 0x01	; 1
    3c66:	0e 94 ac 1d 	call	0x3b58	; 0x3b58 <getSimpleScheduleOn(unsigned char)>
    3c6a:	ec 01       	movw	r28, r24
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    3c6c:	08 17       	cp	r16, r24
    3c6e:	19 07       	cpc	r17, r25
    3c70:	58 f0       	brcs	.+22     	; 0x3c88 <isAnyScheduleOnWARMNow()+0x5a>
    uint_least16_t e = getSimpleScheduleOff(which);
    3c72:	81 e0       	ldi	r24, 0x01	; 1
    3c74:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <getSimpleScheduleOff(unsigned char)>
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    3c78:	8c 17       	cp	r24, r28
    3c7a:	9d 07       	cpc	r25, r29
    3c7c:	10 f4       	brcc	.+4      	; 0x3c82 <isAnyScheduleOnWARMNow()+0x54>
    3c7e:	80 56       	subi	r24, 0x60	; 96
    3c80:	9a 4f       	sbci	r25, 0xFA	; 250
    if(mm < e) { return(true); }
    3c82:	08 17       	cp	r16, r24
    3c84:	19 07       	cpc	r17, r25
    3c86:	10 f0       	brcs	.+4      	; 0x3c8c <isAnyScheduleOnWARMNow()+0x5e>
    3c88:	80 e0       	ldi	r24, 0x00	; 0
    3c8a:	01 c0       	rjmp	.+2      	; 0x3c8e <isAnyScheduleOnWARMNow()+0x60>
// Can be used to suppress set-backs during on times.
bool isAnyScheduleOnWARMNow()
  {
  const uint_least16_t mm = getMinutesSinceMidnightLT();

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    3c8c:	81 e0       	ldi	r24, 0x01	; 1
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    if(mm < e) { return(true); }
    }

  return(false);
  }
    3c8e:	df 91       	pop	r29
    3c90:	cf 91       	pop	r28
    3c92:	1f 91       	pop	r17
    3c94:	0f 91       	pop	r16
    3c96:	08 95       	ret

00003c98 <getStatsTXLevel()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    3c98:	f9 99       	sbic	0x1f, 1	; 31
    3c9a:	fe cf       	rjmp	.-4      	; 0x3c98 <getStatsTXLevel()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    3c9c:	8c e1       	ldi	r24, 0x1C	; 28
    3c9e:	90 e0       	ldi	r25, 0x00	; 0
    3ca0:	92 bd       	out	0x22, r25	; 34
    3ca2:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    3ca4:	f8 9a       	sbi	0x1f, 0	; 31
    3ca6:	80 b5       	in	r24, 0x20	; 32
#include "Power_Management.h"


// Get the current stats transmission level (for data outbound from this node).
// May not exactly match enumerated levels; use inequalities.
stats_TX_level getStatsTXLevel() { return((stats_TX_level)eeprom_read_byte((uint8_t *)EE_START_STATS_TX_ENABLE)); }
    3ca8:	90 e0       	ldi	r25, 0x00	; 0
    3caa:	08 95       	ret

00003cac <addEntropyToPool(unsigned char, unsigned char)>:
//   * estBits estimated number of truely securely random bits in range [0,8].
// Not to be called from ISRs.
void addEntropyToPool(uint8_t data, uint8_t estBits)
  {
  // TODO: no real entropy pool yet.
  seedRNG8(data, cycleCountCPU(), getSubCycleTime());
    3cac:	66 b5       	in	r22, 0x26	; 38
    3cae:	40 91 b2 00 	lds	r20, 0x00B2
    3cb2:	0e 94 fd 19 	call	0x33fa	; 0x33fa <seedRNG8(unsigned char, unsigned char, unsigned char)>
  }
    3cb6:	08 95       	ret

00003cb8 <getSecureRandomByte()>:

// Generate 'secure' new random byte.
// This should be essentially all entropy and unguessable.
// Likely to be slow and may force some peripheral I/O.
// Runtime details are likely to be intimately dependent on hardware implementation.
uint8_t getSecureRandomByte()
    3cb8:	0f 93       	push	r16
    3cba:	1f 93       	push	r17
    3cbc:	df 93       	push	r29
    3cbe:	cf 93       	push	r28
    3cc0:	0f 92       	push	r0
    3cc2:	cd b7       	in	r28, 0x3d	; 61
    3cc4:	de b7       	in	r29, 0x3e	; 62
  {
  // Use various real noise sources and whiten with PRNG and other counters.
  // Mix the bits also to help ensure good distribution.
  uint8_t w1 = clockJitterEntropyByte(); // Real noise.
    3cc6:	0e 94 0a 18 	call	0x3014	; 0x3014 <clockJitterEntropyByte()>
  w1 ^= (w1 << 4); // Mix.
    3cca:	08 2f       	mov	r16, r24
    3ccc:	02 95       	swap	r16
    3cce:	00 7f       	andi	r16, 0xF0	; 240
    3cd0:	08 27       	eor	r16, r24
  w1 ^= noisyADCRead(); // Real noise.
    3cd2:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <noisyADCRead()>
    3cd6:	08 27       	eor	r16, r24
  w1 ^= (w1 >> 4); // Mix.
    3cd8:	10 2f       	mov	r17, r16
    3cda:	12 95       	swap	r17
    3cdc:	1f 70       	andi	r17, 0x0F	; 15
    3cde:	10 27       	eor	r17, r16
  const uint8_t v = w1;
    3ce0:	19 83       	std	Y+1, r17	; 0x01
  w1 ^= randRNG8(); // Whiten.
    3ce2:	0e 94 18 1a 	call	0x3430	; 0x3430 <randRNG8()>
    3ce6:	18 27       	eor	r17, r24
  w1 ^= (w1 << 3); // Mix.
    3ce8:	81 2f       	mov	r24, r17
    3cea:	88 0f       	add	r24, r24
    3cec:	88 0f       	add	r24, r24
    3cee:	88 0f       	add	r24, r24
    3cf0:	81 27       	eor	r24, r17
  w1 ^=  _crc_ibutton_update(cycleCountCPU() ^ (uint8_t)(intptr_t)&v, ++count8 - v); // Whiten.
    3cf2:	96 b5       	in	r25, 0x26	; 38
    3cf4:	40 91 d5 01 	lds	r20, 0x01D5
    3cf8:	4f 5f       	subi	r20, 0xFF	; 255
    3cfa:	40 93 d5 01 	sts	0x01D5, r20
		"	brtc	2f" "\n\t"
		"	eor	%0, %2" "\n\t"
		"2:	dec	%1" "\n\t"
		"	brne	1b" "\n\t"
		: "=r" (__crc), "=d" (__i), "=d" (__pattern)
		: "0" (__crc), "r" (__data));
    3cfe:	9e 01       	movw	r18, r28
    3d00:	2f 5f       	subi	r18, 0xFF	; 255
    3d02:	3f 4f       	sbci	r19, 0xFF	; 255
    3d04:	92 27       	eor	r25, r18
    3d06:	29 81       	ldd	r18, Y+1	; 0x01
    3d08:	42 1b       	sub	r20, r18
    3d0a:	94 27       	eor	r25, r20
    3d0c:	28 e0       	ldi	r18, 0x08	; 8
    3d0e:	3c e8       	ldi	r19, 0x8C	; 140
    3d10:	90 fb       	bst	r25, 0
    3d12:	96 95       	lsr	r25
    3d14:	0e f4       	brtc	.+2      	; 0x3d18 <getSecureRandomByte()+0x60>
    3d16:	93 27       	eor	r25, r19
    3d18:	2a 95       	dec	r18
    3d1a:	d1 f7       	brne	.-12     	; 0x3d10 <getSecureRandomByte()+0x58>
  return(w1);
  }
    3d1c:	89 27       	eor	r24, r25
    3d1e:	0f 90       	pop	r0
    3d20:	cf 91       	pop	r28
    3d22:	df 91       	pop	r29
    3d24:	1f 91       	pop	r17
    3d26:	0f 91       	pop	r16
    3d28:	08 95       	ret

00003d2a <SHT21_init()>:
// Set try once SHT21 is initialised.
static volatile bool initialised;

// Initialise/configure SHT21, once only generally.
// TWI must already be powered up.
static void SHT21_init()
    3d2a:	1f 93       	push	r17
  {
#if defined(SHT21_USE_REDUCED_PRECISION)
  // Soft reset in order to sample at reduced precision.
  Wire.beginTransmission(SHT21_I2C_ADDR);
    3d2c:	8a e3       	ldi	r24, 0x3A	; 58
    3d2e:	92 e0       	ldi	r25, 0x02	; 2
    3d30:	60 e4       	ldi	r22, 0x40	; 64
    3d32:	70 e0       	ldi	r23, 0x00	; 0
    3d34:	0e 94 89 2f 	call	0x5f12	; 0x5f12 <TwoWire::beginTransmission(int)>
  Wire.write((byte) SHT21_I2C_CMD_USERREG); // Select control register.
    3d38:	8a e3       	ldi	r24, 0x3A	; 58
    3d3a:	92 e0       	ldi	r25, 0x02	; 2
    3d3c:	67 ee       	ldi	r22, 0xE7	; 231
    3d3e:	0e 94 0b 30 	call	0x6016	; 0x6016 <TwoWire::write(unsigned char)>
  Wire.endTransmission();
    3d42:	8a e3       	ldi	r24, 0x3A	; 58
    3d44:	92 e0       	ldi	r25, 0x02	; 2
    3d46:	0e 94 4e 30 	call	0x609c	; 0x609c <TwoWire::endTransmission()>
  Wire.requestFrom(SHT21_I2C_ADDR, 1);
    3d4a:	8a e3       	ldi	r24, 0x3A	; 58
    3d4c:	92 e0       	ldi	r25, 0x02	; 2
    3d4e:	60 e4       	ldi	r22, 0x40	; 64
    3d50:	70 e0       	ldi	r23, 0x00	; 0
    3d52:	41 e0       	ldi	r20, 0x01	; 1
    3d54:	50 e0       	ldi	r21, 0x00	; 0
    3d56:	0e 94 5f 30 	call	0x60be	; 0x60be <TwoWire::requestFrom(int, int)>
    3d5a:	04 c0       	rjmp	.+8      	; 0x3d64 <SHT21_init()+0x3a>
  while(Wire.available() < 1)
    {
    // Wait for data, but avoid rolling over the end of a minor cycle...
    if(getSubCycleTime() >= GSCT_MAX)
    3d5c:	80 91 b2 00 	lds	r24, 0x00B2
    3d60:	8f 3f       	cpi	r24, 0xFF	; 255
    3d62:	29 f1       	breq	.+74     	; 0x3dae <SHT21_init()+0x84>
  // Soft reset in order to sample at reduced precision.
  Wire.beginTransmission(SHT21_I2C_ADDR);
  Wire.write((byte) SHT21_I2C_CMD_USERREG); // Select control register.
  Wire.endTransmission();
  Wire.requestFrom(SHT21_I2C_ADDR, 1);
  while(Wire.available() < 1)
    3d64:	8a e3       	ldi	r24, 0x3A	; 58
    3d66:	92 e0       	ldi	r25, 0x02	; 2
    3d68:	0e 94 93 2f 	call	0x5f26	; 0x5f26 <TwoWire::available()>
    3d6c:	18 16       	cp	r1, r24
    3d6e:	19 06       	cpc	r1, r25
    3d70:	ac f7       	brge	.-22     	; 0x3d5c <SHT21_init()+0x32>
    if(getSubCycleTime() >= GSCT_MAX)
      {
      return; // Failed, and not initialised.
      }
    }
  const uint8_t curUR = Wire.read();
    3d72:	8a e3       	ldi	r24, 0x3A	; 58
    3d74:	92 e0       	ldi	r25, 0x02	; 2
    3d76:	0e 94 9c 2f 	call	0x5f38	; 0x5f38 <TwoWire::read()>
    3d7a:	18 2f       	mov	r17, r24
//  DEBUG_SERIAL_PRINTFMT(curUR, HEX);
//  DEBUG_SERIAL_PRINTLN();

  // Preserve reserved bits (3, 4, 5) and sample 8-bit RH (for for 1%) and 12-bit temp (for 1/16C). 
  const uint8_t newUR = (curUR & 0x38) | 3;
  Wire.beginTransmission(SHT21_I2C_ADDR);
    3d7c:	8a e3       	ldi	r24, 0x3A	; 58
    3d7e:	92 e0       	ldi	r25, 0x02	; 2
    3d80:	60 e4       	ldi	r22, 0x40	; 64
    3d82:	70 e0       	ldi	r23, 0x00	; 0
    3d84:	0e 94 89 2f 	call	0x5f12	; 0x5f12 <TwoWire::beginTransmission(int)>
  Wire.write((byte) SHT21_I2C_CMD_USERREG); // Select control register.
    3d88:	8a e3       	ldi	r24, 0x3A	; 58
    3d8a:	92 e0       	ldi	r25, 0x02	; 2
    3d8c:	67 ee       	ldi	r22, 0xE7	; 231
    3d8e:	0e 94 0b 30 	call	0x6016	; 0x6016 <TwoWire::write(unsigned char)>
  Wire.write((byte) newUR);
    3d92:	18 73       	andi	r17, 0x38	; 56
    3d94:	13 60       	ori	r17, 0x03	; 3
    3d96:	8a e3       	ldi	r24, 0x3A	; 58
    3d98:	92 e0       	ldi	r25, 0x02	; 2
    3d9a:	61 2f       	mov	r22, r17
    3d9c:	0e 94 0b 30 	call	0x6016	; 0x6016 <TwoWire::write(unsigned char)>
  Wire.endTransmission();
    3da0:	8a e3       	ldi	r24, 0x3A	; 58
    3da2:	92 e0       	ldi	r25, 0x02	; 2
    3da4:	0e 94 4e 30 	call	0x609c	; 0x609c <TwoWire::endTransmission()>

#endif
  initialised = true;
    3da8:	81 e0       	ldi	r24, 0x01	; 1
    3daa:	80 93 d6 01 	sts	0x01D6, r24
  }
    3dae:	1f 91       	pop	r17
    3db0:	08 95       	ret

00003db2 <Sensor_SHT21_readRHpc()>:
// Measure and return the current relative humidity in %; range [0,100] and 255 for error.
// This may consume significant power and time.
// Probably no need to do this more than (say) once per minute.
// The first read will initialise the device as necessary and leave it in a low-power mode afterwards.
// Returns 255 (~0) in case of error.
uint8_t Sensor_SHT21_readRHpc()
    3db2:	ff 92       	push	r15
    3db4:	0f 93       	push	r16
    3db6:	1f 93       	push	r17
  {
  const bool neededPowerUp = powerUpTWIIfDisabled();
    3db8:	0e 94 0f 19 	call	0x321e	; 0x321e <powerUpTWIIfDisabled()>
    3dbc:	f8 2e       	mov	r15, r24

  // Initialise/config if necessary.
  if(!initialised) { SHT21_init(); }
    3dbe:	80 91 d6 01 	lds	r24, 0x01D6
    3dc2:	88 23       	and	r24, r24
    3dc4:	11 f4       	brne	.+4      	; 0x3dca <Sensor_SHT21_readRHpc()+0x18>
    3dc6:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <SHT21_init()>
  // Get RH%...
  // Max RH measurement time:
  //   * 12-bit: 29ms
  //   *  8-bit:  4ms
  // Use blocking data fetch for now.
  Wire.beginTransmission(SHT21_I2C_ADDR);
    3dca:	8a e3       	ldi	r24, 0x3A	; 58
    3dcc:	92 e0       	ldi	r25, 0x02	; 2
    3dce:	60 e4       	ldi	r22, 0x40	; 64
    3dd0:	70 e0       	ldi	r23, 0x00	; 0
    3dd2:	0e 94 89 2f 	call	0x5f12	; 0x5f12 <TwoWire::beginTransmission(int)>
  Wire.write((byte) SHT21_I2C_CMD_RH_HOLD); // Select control register.
    3dd6:	8a e3       	ldi	r24, 0x3A	; 58
    3dd8:	92 e0       	ldi	r25, 0x02	; 2
    3dda:	65 ee       	ldi	r22, 0xE5	; 229
    3ddc:	0e 94 0b 30 	call	0x6016	; 0x6016 <TwoWire::write(unsigned char)>
// This may be achieved in part by dynamically slowing the CPU clock if possible.
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed((((MIN_CPU_HZ * (ms)) + 2000) / 4000) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    3de0:	85 e2       	ldi	r24, 0x25	; 37
    3de2:	90 e0       	ldi	r25, 0x00	; 0
    3de4:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
#if defined(SHT21_USE_REDUCED_PRECISION)
  sleepLowPowerMs(5); // Should cover 8-bit conversion (4ms).
#else
  nap(WDTO_30MS); // Should cover even 12-bit conversion (29ms).
#endif
  Wire.endTransmission();
    3de8:	8a e3       	ldi	r24, 0x3A	; 58
    3dea:	92 e0       	ldi	r25, 0x02	; 2
    3dec:	0e 94 4e 30 	call	0x609c	; 0x609c <TwoWire::endTransmission()>
  Wire.requestFrom(SHT21_I2C_ADDR, 3);
    3df0:	8a e3       	ldi	r24, 0x3A	; 58
    3df2:	92 e0       	ldi	r25, 0x02	; 2
    3df4:	60 e4       	ldi	r22, 0x40	; 64
    3df6:	70 e0       	ldi	r23, 0x00	; 0
    3df8:	43 e0       	ldi	r20, 0x03	; 3
    3dfa:	50 e0       	ldi	r21, 0x00	; 0
    3dfc:	0e 94 5f 30 	call	0x60be	; 0x60be <TwoWire::requestFrom(int, int)>
    3e00:	06 c0       	rjmp	.+12     	; 0x3e0e <Sensor_SHT21_readRHpc()+0x5c>
  while(Wire.available() < 3)
    {
    // Wait for data, but avoid rolling over the end of a minor cycle...
    if(getSubCycleTime() >= GSCT_MAX)
    3e02:	80 91 b2 00 	lds	r24, 0x00B2
    3e06:	8f 3f       	cpi	r24, 0xFF	; 255
    3e08:	11 f4       	brne	.+4      	; 0x3e0e <Sensor_SHT21_readRHpc()+0x5c>
    3e0a:	0f ef       	ldi	r16, 0xFF	; 255
    3e0c:	29 c0       	rjmp	.+82     	; 0x3e60 <Sensor_SHT21_readRHpc()+0xae>
#else
  nap(WDTO_30MS); // Should cover even 12-bit conversion (29ms).
#endif
  Wire.endTransmission();
  Wire.requestFrom(SHT21_I2C_ADDR, 3);
  while(Wire.available() < 3)
    3e0e:	8a e3       	ldi	r24, 0x3A	; 58
    3e10:	92 e0       	ldi	r25, 0x02	; 2
    3e12:	0e 94 93 2f 	call	0x5f26	; 0x5f26 <TwoWire::available()>
    3e16:	03 97       	sbiw	r24, 0x03	; 3
    3e18:	a4 f3       	brlt	.-24     	; 0x3e02 <Sensor_SHT21_readRHpc()+0x50>
      {
//      DEBUG_SERIAL_PRINTLN_FLASHSTRING("giving up");
      return(~0);
      }
    }  
  uint16_t rawRH = (Wire.read() << 8);
    3e1a:	8a e3       	ldi	r24, 0x3A	; 58
    3e1c:	92 e0       	ldi	r25, 0x02	; 2
    3e1e:	0e 94 9c 2f 	call	0x5f38	; 0x5f38 <TwoWire::read()>
    3e22:	18 2f       	mov	r17, r24
    3e24:	00 e0       	ldi	r16, 0x00	; 0
  rawRH |= (Wire.read() & 0xfc); // Clear status ls bits.
    3e26:	8a e3       	ldi	r24, 0x3A	; 58
    3e28:	92 e0       	ldi	r25, 0x02	; 2
    3e2a:	0e 94 9c 2f 	call	0x5f38	; 0x5f38 <TwoWire::read()>
  const uint8_t rh = -6 + ((125L * rawRH) >> 16);
    3e2e:	8c 7f       	andi	r24, 0xFC	; 252
    3e30:	90 70       	andi	r25, 0x00	; 0
    3e32:	80 2b       	or	r24, r16
    3e34:	91 2b       	or	r25, r17
    3e36:	a0 e0       	ldi	r26, 0x00	; 0
    3e38:	b0 e0       	ldi	r27, 0x00	; 0
    3e3a:	bc 01       	movw	r22, r24
    3e3c:	cd 01       	movw	r24, r26
    3e3e:	2d e7       	ldi	r18, 0x7D	; 125
    3e40:	30 e0       	ldi	r19, 0x00	; 0
    3e42:	40 e0       	ldi	r20, 0x00	; 0
    3e44:	50 e0       	ldi	r21, 0x00	; 0
    3e46:	0e 94 dc 38 	call	0x71b8	; 0x71b8 <__mulsi3>
    3e4a:	bc 01       	movw	r22, r24
    3e4c:	99 27       	eor	r25, r25
    3e4e:	77 fd       	sbrc	r23, 7
    3e50:	90 95       	com	r25
    3e52:	89 2f       	mov	r24, r25
    3e54:	06 2f       	mov	r16, r22
    3e56:	06 50       	subi	r16, 0x06	; 6

  if(neededPowerUp) { powerDownTWI(); }
    3e58:	ff 20       	and	r15, r15
    3e5a:	11 f0       	breq	.+4      	; 0x3e60 <Sensor_SHT21_readRHpc()+0xae>
    3e5c:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <powerDownTWI()>

  return(rh);
  }
    3e60:	80 2f       	mov	r24, r16
    3e62:	1f 91       	pop	r17
    3e64:	0f 91       	pop	r16
    3e66:	ff 90       	pop	r15
    3e68:	08 95       	ret

00003e6a <Sensor_SHT21_readTemperatureC16()>:
// Measure and return the current ambient temperature in units of 1/16th C.
// This may contain up to 4 bits of information to the right of the fixed binary point.
// This may consume significant power and time.
// Probably no need to do this more than (say) once per minute.
// The first read will initialise the device as necessary and leave it in a low-power mode afterwards.
int Sensor_SHT21_readTemperatureC16()
    3e6a:	ff 92       	push	r15
    3e6c:	0f 93       	push	r16
    3e6e:	1f 93       	push	r17
    3e70:	cf 93       	push	r28
    3e72:	df 93       	push	r29
  {
  const bool neededPowerUp = powerUpTWIIfDisabled();
    3e74:	0e 94 0f 19 	call	0x321e	; 0x321e <powerUpTWIIfDisabled()>
    3e78:	f8 2e       	mov	r15, r24

  // Initialise/config if necessary.
  if(!initialised) { SHT21_init(); }
    3e7a:	80 91 d6 01 	lds	r24, 0x01D6
    3e7e:	88 23       	and	r24, r24
    3e80:	11 f4       	brne	.+4      	; 0x3e86 <Sensor_SHT21_readTemperatureC16()+0x1c>
    3e82:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <SHT21_init()>
  // Max RH measurement time:
  //   * 14-bit: 85ms
  //   * 12-bit: 22ms
  //   * 11-bit: 11ms
  // Use blocking data fetch for now.
  Wire.beginTransmission(SHT21_I2C_ADDR);
    3e86:	8a e3       	ldi	r24, 0x3A	; 58
    3e88:	92 e0       	ldi	r25, 0x02	; 2
    3e8a:	60 e4       	ldi	r22, 0x40	; 64
    3e8c:	70 e0       	ldi	r23, 0x00	; 0
    3e8e:	0e 94 89 2f 	call	0x5f12	; 0x5f12 <TwoWire::beginTransmission(int)>
  Wire.write((byte) SHT21_I2C_CMD_TEMP_HOLD); // Select control register.
    3e92:	8a e3       	ldi	r24, 0x3A	; 58
    3e94:	92 e0       	ldi	r25, 0x02	; 2
    3e96:	63 ee       	ldi	r22, 0xE3	; 227
    3e98:	0e 94 0b 30 	call	0x6016	; 0x6016 <TwoWire::write(unsigned char)>
#if defined(SHT21_USE_REDUCED_PRECISION)
  nap(WDTO_30MS); // Should cover 12-bit conversion (22ms).
    3e9c:	81 e0       	ldi	r24, 0x01	; 1
    3e9e:	0e 94 29 16 	call	0x2c52	; 0x2c52 <nap(signed char)>
#else
  sleepLowPowerMs(90); // Should be plenty for slowest (14-bit) conversion (85ms).
#endif
  //delay(100);
  Wire.endTransmission();
    3ea2:	8a e3       	ldi	r24, 0x3A	; 58
    3ea4:	92 e0       	ldi	r25, 0x02	; 2
    3ea6:	0e 94 4e 30 	call	0x609c	; 0x609c <TwoWire::endTransmission()>
  Wire.requestFrom(SHT21_I2C_ADDR, 3);
    3eaa:	8a e3       	ldi	r24, 0x3A	; 58
    3eac:	92 e0       	ldi	r25, 0x02	; 2
    3eae:	60 e4       	ldi	r22, 0x40	; 64
    3eb0:	70 e0       	ldi	r23, 0x00	; 0
    3eb2:	43 e0       	ldi	r20, 0x03	; 3
    3eb4:	50 e0       	ldi	r21, 0x00	; 0
    3eb6:	0e 94 5f 30 	call	0x60be	; 0x60be <TwoWire::requestFrom(int, int)>
    3eba:	07 c0       	rjmp	.+14     	; 0x3eca <Sensor_SHT21_readTemperatureC16()+0x60>
  while(Wire.available() < 3)
    {
    // Wait for data, but avoid rolling over the end of a minor cycle...
    if(getSubCycleTime() >= GSCT_MAX)
    3ebc:	80 91 b2 00 	lds	r24, 0x00B2
    3ec0:	8f 3f       	cpi	r24, 0xFF	; 255
    3ec2:	19 f4       	brne	.+6      	; 0x3eca <Sensor_SHT21_readTemperatureC16()+0x60>
    3ec4:	c0 e0       	ldi	r28, 0x00	; 0
    3ec6:	d0 e0       	ldi	r29, 0x00	; 0
    3ec8:	2c c0       	rjmp	.+88     	; 0x3f22 <Sensor_SHT21_readTemperatureC16()+0xb8>
  sleepLowPowerMs(90); // Should be plenty for slowest (14-bit) conversion (85ms).
#endif
  //delay(100);
  Wire.endTransmission();
  Wire.requestFrom(SHT21_I2C_ADDR, 3);
  while(Wire.available() < 3)
    3eca:	8a e3       	ldi	r24, 0x3A	; 58
    3ecc:	92 e0       	ldi	r25, 0x02	; 2
    3ece:	0e 94 93 2f 	call	0x5f26	; 0x5f26 <TwoWire::available()>
    3ed2:	03 97       	sbiw	r24, 0x03	; 3
    3ed4:	9c f3       	brlt	.-26     	; 0x3ebc <Sensor_SHT21_readTemperatureC16()+0x52>
    if(getSubCycleTime() >= GSCT_MAX)
      {
      return(0); // Failure value: may be able to to better.
      }
    }
  uint16_t rawTemp = (Wire.read() << 8);
    3ed6:	8a e3       	ldi	r24, 0x3A	; 58
    3ed8:	92 e0       	ldi	r25, 0x02	; 2
    3eda:	0e 94 9c 2f 	call	0x5f38	; 0x5f38 <TwoWire::read()>
    3ede:	18 2f       	mov	r17, r24
    3ee0:	00 e0       	ldi	r16, 0x00	; 0
  rawTemp |= (Wire.read() & 0xfc); // Clear status ls bits.
    3ee2:	8a e3       	ldi	r24, 0x3A	; 58
    3ee4:	92 e0       	ldi	r25, 0x02	; 2
    3ee6:	0e 94 9c 2f 	call	0x5f38	; 0x5f38 <TwoWire::read()>
  // Nominal formula: C = -46.85 + ((175.72*raw) / (1L << 16));
  const int c16 = -750 + ((5623L * rawTemp) >> 17); // FIXME: find a faster approximation...
    3eea:	8c 7f       	andi	r24, 0xFC	; 252
    3eec:	90 70       	andi	r25, 0x00	; 0
    3eee:	80 2b       	or	r24, r16
    3ef0:	91 2b       	or	r25, r17
    3ef2:	a0 e0       	ldi	r26, 0x00	; 0
    3ef4:	b0 e0       	ldi	r27, 0x00	; 0
    3ef6:	bc 01       	movw	r22, r24
    3ef8:	cd 01       	movw	r24, r26
    3efa:	27 ef       	ldi	r18, 0xF7	; 247
    3efc:	35 e1       	ldi	r19, 0x15	; 21
    3efe:	40 e0       	ldi	r20, 0x00	; 0
    3f00:	50 e0       	ldi	r21, 0x00	; 0
    3f02:	0e 94 dc 38 	call	0x71b8	; 0x71b8 <__mulsi3>
    3f06:	31 e1       	ldi	r19, 0x11	; 17
    3f08:	95 95       	asr	r25
    3f0a:	87 95       	ror	r24
    3f0c:	77 95       	ror	r23
    3f0e:	67 95       	ror	r22
    3f10:	3a 95       	dec	r19
    3f12:	d1 f7       	brne	.-12     	; 0x3f08 <Sensor_SHT21_readTemperatureC16()+0x9e>
    3f14:	eb 01       	movw	r28, r22
    3f16:	ce 5e       	subi	r28, 0xEE	; 238
    3f18:	d2 40       	sbci	r29, 0x02	; 2

  if(neededPowerUp) { powerDownTWI(); }
    3f1a:	ff 20       	and	r15, r15
    3f1c:	11 f0       	breq	.+4      	; 0x3f22 <Sensor_SHT21_readTemperatureC16()+0xb8>
    3f1e:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <powerDownTWI()>

  return(c16);
  }
    3f22:	ce 01       	movw	r24, r28
    3f24:	df 91       	pop	r29
    3f26:	cf 91       	pop	r28
    3f28:	1f 91       	pop	r17
    3f2a:	0f 91       	pop	r16
    3f2c:	ff 90       	pop	r15
    3f2e:	08 95       	ret

00003f30 <_debug_serial_timestamp()>:


#ifdef DEBUG // Don't emit debug-support code unless in DEBUG.

// Print timestamp with no newline in format: MinutesSinceMidnight:Seconds:SubCycleTime
void _debug_serial_timestamp()
    3f30:	ff 92       	push	r15
    3f32:	0f 93       	push	r16
    3f34:	1f 93       	push	r17
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    3f36:	0e 94 c4 19 	call	0x3388	; 0x3388 <powerUpSerialIfDisabled()>
    3f3a:	f8 2e       	mov	r15, r24
  // Grab time values ASAP, fastest-incrementing first.
  // TODO: could lock out interrupts to capture atomically.
  const uint8_t ss = getSubCycleTime();
    3f3c:	00 91 b2 00 	lds	r16, 0x00B2
  const uint8_t s = getSecondsLT();
    3f40:	10 91 d0 01 	lds	r17, 0x01D0
  const uint16_t m = getMinutesSinceMidnightLT();
    3f44:	0e 94 b2 1c 	call	0x3964	; 0x3964 <getMinutesSinceMidnightLT()>
    3f48:	bc 01       	movw	r22, r24
  Serial.print(m);
    3f4a:	8c e3       	ldi	r24, 0x3C	; 60
    3f4c:	93 e0       	ldi	r25, 0x03	; 3
    3f4e:	4a e0       	ldi	r20, 0x0A	; 10
    3f50:	50 e0       	ldi	r21, 0x00	; 0
    3f52:	0e 94 fe 36 	call	0x6dfc	; 0x6dfc <Print::print(unsigned int, int)>
  Serial.print(':'); Serial.print(s);
    3f56:	8c e3       	ldi	r24, 0x3C	; 60
    3f58:	93 e0       	ldi	r25, 0x03	; 3
    3f5a:	6a e3       	ldi	r22, 0x3A	; 58
    3f5c:	0e 94 33 36 	call	0x6c66	; 0x6c66 <Print::print(char)>
    3f60:	8c e3       	ldi	r24, 0x3C	; 60
    3f62:	93 e0       	ldi	r25, 0x03	; 3
    3f64:	61 2f       	mov	r22, r17
    3f66:	4a e0       	ldi	r20, 0x0A	; 10
    3f68:	50 e0       	ldi	r21, 0x00	; 0
    3f6a:	0e 94 0f 37 	call	0x6e1e	; 0x6e1e <Print::print(unsigned char, int)>
  Serial.print(':'); Serial.print(ss);
    3f6e:	8c e3       	ldi	r24, 0x3C	; 60
    3f70:	93 e0       	ldi	r25, 0x03	; 3
    3f72:	6a e3       	ldi	r22, 0x3A	; 58
    3f74:	0e 94 33 36 	call	0x6c66	; 0x6c66 <Print::print(char)>
    3f78:	8c e3       	ldi	r24, 0x3C	; 60
    3f7a:	93 e0       	ldi	r25, 0x03	; 3
    3f7c:	60 2f       	mov	r22, r16
    3f7e:	4a e0       	ldi	r20, 0x0A	; 10
    3f80:	50 e0       	ldi	r21, 0x00	; 0
    3f82:	0e 94 0f 37 	call	0x6e1e	; 0x6e1e <Print::print(unsigned char, int)>
  _flush();
    3f86:	0e 94 63 19 	call	0x32c6	; 0x32c6 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    3f8a:	ff 20       	and	r15, r15
    3f8c:	11 f0       	breq	.+4      	; 0x3f92 <_debug_serial_timestamp()+0x62>
    3f8e:	0e 94 27 19 	call	0x324e	; 0x324e <powerDownSerial()>
  }
    3f92:	1f 91       	pop	r17
    3f94:	0f 91       	pop	r16
    3f96:	ff 90       	pop	r15
    3f98:	08 95       	ret

00003f9a <serialPrintAndFlush(unsigned int, int)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) number to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(const unsigned u, const int fmt)
    3f9a:	df 92       	push	r13
    3f9c:	ef 92       	push	r14
    3f9e:	ff 92       	push	r15
    3fa0:	0f 93       	push	r16
    3fa2:	1f 93       	push	r17
    3fa4:	8c 01       	movw	r16, r24
    3fa6:	7b 01       	movw	r14, r22
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    3fa8:	0e 94 c4 19 	call	0x3388	; 0x3388 <powerUpSerialIfDisabled()>
    3fac:	d8 2e       	mov	r13, r24
  // Send the character.
  Serial.print(u, fmt);
    3fae:	8c e3       	ldi	r24, 0x3C	; 60
    3fb0:	93 e0       	ldi	r25, 0x03	; 3
    3fb2:	b8 01       	movw	r22, r16
    3fb4:	a7 01       	movw	r20, r14
    3fb6:	0e 94 fe 36 	call	0x6dfc	; 0x6dfc <Print::print(unsigned int, int)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    3fba:	0e 94 63 19 	call	0x32c6	; 0x32c6 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    3fbe:	dd 20       	and	r13, r13
    3fc0:	11 f0       	breq	.+4      	; 0x3fc6 <serialPrintAndFlush(unsigned int, int)+0x2c>
    3fc2:	0e 94 27 19 	call	0x324e	; 0x324e <powerDownSerial()>
  }
    3fc6:	1f 91       	pop	r17
    3fc8:	0f 91       	pop	r16
    3fca:	ff 90       	pop	r15
    3fcc:	ef 90       	pop	r14
    3fce:	df 90       	pop	r13
    3fd0:	08 95       	ret

00003fd2 <serialPrintAndFlush(char)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) character to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(const char c)
    3fd2:	0f 93       	push	r16
    3fd4:	1f 93       	push	r17
    3fd6:	18 2f       	mov	r17, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    3fd8:	0e 94 c4 19 	call	0x3388	; 0x3388 <powerUpSerialIfDisabled()>
    3fdc:	08 2f       	mov	r16, r24
  // Send the character.
  Serial.print(c);
    3fde:	8c e3       	ldi	r24, 0x3C	; 60
    3fe0:	93 e0       	ldi	r25, 0x03	; 3
    3fe2:	61 2f       	mov	r22, r17
    3fe4:	0e 94 33 36 	call	0x6c66	; 0x6c66 <Print::print(char)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    3fe8:	0e 94 63 19 	call	0x32c6	; 0x32c6 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    3fec:	00 23       	and	r16, r16
    3fee:	11 f0       	breq	.+4      	; 0x3ff4 <serialPrintAndFlush(char)+0x22>
    3ff0:	0e 94 27 19 	call	0x324e	; 0x324e <powerDownSerial()>
  }
    3ff4:	1f 91       	pop	r17
    3ff6:	0f 91       	pop	r16
    3ff8:	08 95       	ret

00003ffa <serialPrintlnAndFlush()>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write line-end to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintlnAndFlush()
    3ffa:	1f 93       	push	r17
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    3ffc:	0e 94 c4 19 	call	0x3388	; 0x3388 <powerUpSerialIfDisabled()>
    4000:	18 2f       	mov	r17, r24
  // Send the text.
  Serial.println();
    4002:	8c e3       	ldi	r24, 0x3C	; 60
    4004:	93 e0       	ldi	r25, 0x03	; 3
    4006:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <Print::println()>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    400a:	0e 94 63 19 	call	0x32c6	; 0x32c6 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    400e:	11 23       	and	r17, r17
    4010:	11 f0       	breq	.+4      	; 0x4016 <serialPrintlnAndFlush()+0x1c>
    4012:	0e 94 27 19 	call	0x324e	; 0x324e <powerDownSerial()>
  }
    4016:	1f 91       	pop	r17
    4018:	08 95       	ret

0000401a <serialPrintAndFlush(int, int)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) number to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(const int i, const int fmt)
    401a:	df 92       	push	r13
    401c:	ef 92       	push	r14
    401e:	ff 92       	push	r15
    4020:	0f 93       	push	r16
    4022:	1f 93       	push	r17
    4024:	8c 01       	movw	r16, r24
    4026:	7b 01       	movw	r14, r22
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    4028:	0e 94 c4 19 	call	0x3388	; 0x3388 <powerUpSerialIfDisabled()>
    402c:	d8 2e       	mov	r13, r24
  // Send the character.
  Serial.print(i, fmt);
    402e:	8c e3       	ldi	r24, 0x3C	; 60
    4030:	93 e0       	ldi	r25, 0x03	; 3
    4032:	b8 01       	movw	r22, r16
    4034:	a7 01       	movw	r20, r14
    4036:	0e 94 61 37 	call	0x6ec2	; 0x6ec2 <Print::print(int, int)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    403a:	0e 94 63 19 	call	0x32c6	; 0x32c6 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    403e:	dd 20       	and	r13, r13
    4040:	11 f0       	breq	.+4      	; 0x4046 <serialPrintAndFlush(int, int)+0x2c>
    4042:	0e 94 27 19 	call	0x324e	; 0x324e <powerDownSerial()>
  }
    4046:	1f 91       	pop	r17
    4048:	0f 91       	pop	r16
    404a:	ff 90       	pop	r15
    404c:	ef 90       	pop	r14
    404e:	df 90       	pop	r13
    4050:	08 95       	ret

00004052 <serialPrintAndFlush(char const*)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (read-only) string to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(const char * const text)
    4052:	ff 92       	push	r15
    4054:	0f 93       	push	r16
    4056:	1f 93       	push	r17
    4058:	8c 01       	movw	r16, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    405a:	0e 94 c4 19 	call	0x3388	; 0x3388 <powerUpSerialIfDisabled()>
    405e:	f8 2e       	mov	r15, r24
  // Send the text.
  Serial.print(text);
    4060:	8c e3       	ldi	r24, 0x3C	; 60
    4062:	93 e0       	ldi	r25, 0x03	; 3
    4064:	b8 01       	movw	r22, r16
    4066:	0e 94 74 37 	call	0x6ee8	; 0x6ee8 <Print::print(char const*)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    406a:	0e 94 63 19 	call	0x32c6	; 0x32c6 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    406e:	ff 20       	and	r15, r15
    4070:	11 f0       	breq	.+4      	; 0x4076 <serialPrintAndFlush(char const*)+0x24>
    4072:	0e 94 27 19 	call	0x324e	; 0x324e <powerDownSerial()>
  }
    4076:	1f 91       	pop	r17
    4078:	0f 91       	pop	r16
    407a:	ff 90       	pop	r15
    407c:	08 95       	ret

0000407e <serialPrintAndFlush(__FlashStringHelper const*)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) string to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(__FlashStringHelper const * const text)
    407e:	ff 92       	push	r15
    4080:	0f 93       	push	r16
    4082:	1f 93       	push	r17
    4084:	8c 01       	movw	r16, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    4086:	0e 94 c4 19 	call	0x3388	; 0x3388 <powerUpSerialIfDisabled()>
    408a:	f8 2e       	mov	r15, r24
  // Send the text.
  Serial.print(text);
    408c:	8c e3       	ldi	r24, 0x3C	; 60
    408e:	93 e0       	ldi	r25, 0x03	; 3
    4090:	b8 01       	movw	r22, r16
    4092:	0e 94 10 36 	call	0x6c20	; 0x6c20 <Print::print(__FlashStringHelper const*)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    4096:	0e 94 63 19 	call	0x32c6	; 0x32c6 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    409a:	ff 20       	and	r15, r15
    409c:	11 f0       	breq	.+4      	; 0x40a2 <serialPrintAndFlush(__FlashStringHelper const*)+0x24>
    409e:	0e 94 27 19 	call	0x324e	; 0x324e <powerDownSerial()>
  }
    40a2:	1f 91       	pop	r17
    40a4:	0f 91       	pop	r16
    40a6:	ff 90       	pop	r15
    40a8:	08 95       	ret

000040aa <serialPrintlnAndFlush(__FlashStringHelper const*)>:
// Flush to use for all serialPrintXXX() and DEBUG_PRINTXXX routines.
#define _flush() flushSerialSCTSensitive()

// Write a single (Flash-resident) string to serial followed by line-end and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintlnAndFlush(__FlashStringHelper const * const line)
    40aa:	ff 92       	push	r15
    40ac:	0f 93       	push	r16
    40ae:	1f 93       	push	r17
    40b0:	8c 01       	movw	r16, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    40b2:	0e 94 c4 19 	call	0x3388	; 0x3388 <powerUpSerialIfDisabled()>
    40b6:	f8 2e       	mov	r15, r24
  // Send the line of text followed by line end.
  Serial.println(line);
    40b8:	8c e3       	ldi	r24, 0x3C	; 60
    40ba:	93 e0       	ldi	r25, 0x03	; 3
    40bc:	b8 01       	movw	r22, r16
    40be:	0e 94 5b 36 	call	0x6cb6	; 0x6cb6 <Print::println(__FlashStringHelper const*)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    40c2:	0e 94 63 19 	call	0x32c6	; 0x32c6 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    40c6:	ff 20       	and	r15, r15
    40c8:	11 f0       	breq	.+4      	; 0x40ce <serialPrintlnAndFlush(__FlashStringHelper const*)+0x24>
    40ca:	0e 94 27 19 	call	0x324e	; 0x324e <powerDownSerial()>
  }
    40ce:	1f 91       	pop	r17
    40d0:	0f 91       	pop	r16
    40d2:	ff 90       	pop	r15
    40d4:	08 95       	ret

000040d6 <getTempPotReducedNoise()>:

// Get reduced-noise temperature pot user control value (previously read with readTempPot()) in range [0,255]; very fast.
// In particular this value should not jitter between readings even if the pot is sitting at an ADC boundary level.
uint8_t getTempPotReducedNoise() { return(tempPotReducedNoise); }
    40d6:	80 91 d9 01 	lds	r24, 0x01D9
    40da:	08 95       	ret

000040dc <readTempPot()>:

// Read the user 'temperature pot' setting in range [0,1023]; higher value implies higher target temperature.
// This may consume significant power and time.
int readTempPot()
    40dc:	cf 93       	push	r28
    40de:	df 93       	push	r29
  {
  power_intermittent_peripherals_enable(false); // No need to wait for anything to stablise as direct of IO_POWER_UP.
    40e0:	80 e0       	ldi	r24, 0x00	; 0
    40e2:	0e 94 00 19 	call	0x3200	; 0x3200 <power_intermittent_peripherals_enable(bool)>
  const int tpRaw = analogueNoiseReducedRead(TEMP_POT_AIN, DEFAULT); // Vcc reference.
    40e6:	81 e0       	ldi	r24, 0x01	; 1
    40e8:	90 e0       	ldi	r25, 0x00	; 0
    40ea:	61 e0       	ldi	r22, 0x01	; 1
    40ec:	0e 94 20 17 	call	0x2e40	; 0x2e40 <analogueNoiseReducedRead(int, unsigned char)>
    40f0:	ec 01       	movw	r28, r24
  power_intermittent_peripherals_disable();
    40f2:	0e 94 ce 18 	call	0x319c	; 0x319c <power_intermittent_peripherals_disable()>


  // TODO: capture entropy from changed LS bits esp if reduced-noise version doesn't change.

  // Store new value.
  tempPot = tp;
    40f6:	d0 93 d8 01 	sts	0x01D8, r29
    40fa:	c0 93 d7 01 	sts	0x01D7, r28

  // Capture reduced-noise value with a little hysteresis.
  const int shifted = tp >> 2; // Keep signed to avoid wrap-round confusion.
    40fe:	9e 01       	movw	r18, r28
    4100:	35 95       	asr	r19
    4102:	27 95       	ror	r18
    4104:	35 95       	asr	r19
    4106:	27 95       	ror	r18
  if(((shifted > tempPotReducedNoise) && (shifted - tempPotReducedNoise >= RN_HYST)) ||
    4108:	80 91 d9 01 	lds	r24, 0x01D9
    410c:	90 e0       	ldi	r25, 0x00	; 0
    410e:	82 17       	cp	r24, r18
    4110:	93 07       	cpc	r25, r19
    4112:	2c f4       	brge	.+10     	; 0x411e <readTempPot()+0x42>
    4114:	a9 01       	movw	r20, r18
    4116:	48 1b       	sub	r20, r24
    4118:	59 0b       	sbc	r21, r25
    411a:	ca 01       	movw	r24, r20
    411c:	05 c0       	rjmp	.+10     	; 0x4128 <readTempPot()+0x4c>
    411e:	28 17       	cp	r18, r24
    4120:	39 07       	cpc	r19, r25
    4122:	44 f4       	brge	.+16     	; 0x4134 <readTempPot()+0x58>
    4124:	82 1b       	sub	r24, r18
    4126:	93 0b       	sbc	r25, r19
    4128:	04 97       	sbiw	r24, 0x04	; 4
    412a:	24 f0       	brlt	.+8      	; 0x4134 <readTempPot()+0x58>
     ((shifted < tempPotReducedNoise) && (tempPotReducedNoise - shifted >= RN_HYST)))
    {
    tempPotReducedNoise = (uint8_t) shifted;
    412c:	20 93 d9 01 	sts	0x01D9, r18
    markUIControlUsed(); // Note user operation of pot.
    4130:	0e 94 4b 27 	call	0x4e96	; 0x4e96 <markUIControlUsed()>
  DEBUG_SERIAL_PRINT(tempPotReducedNoise);
  DEBUG_SERIAL_PRINTLN();
#endif

  return(tp);
  }
    4134:	ce 01       	movw	r24, r28
    4136:	df 91       	pop	r29
    4138:	cf 91       	pop	r28
    413a:	08 95       	ret

0000413c <getTemperatureC16()>:

  return(t16);
  }

// Return previously-read (with readTemperatureC16()) temperature; very fast.
int getTemperatureC16() { return(temp16); }
    413c:	80 91 da 01 	lds	r24, 0x01DA
    4140:	90 91 db 01 	lds	r25, 0x01DB
    4144:	08 95       	ret

00004146 <readTemperatureC16()>:
// Check for errors at certain critical places, not everywhere.
int readTemperatureC16()
  {
#ifdef SENSOR_SHT21_ENABLE
  // Use SHT21 if enabled.
  const int sht21 = Sensor_SHT21_readTemperatureC16();
    4146:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <Sensor_SHT21_readTemperatureC16()>
  // TODO: could fall back to try TMP112 if SHT21 not available/working.
  temp16 = sht21;
    414a:	80 93 da 01 	sts	0x01DA, r24
    414e:	90 93 db 01 	sts	0x01DB, r25
#endif

  if(neededPowerUp) { powerDownTWI(); }

  return(t16);
  }
    4152:	08 95       	ret

00004154 <inWarmModeDebounced()>:
// If true then is in WARM (or BAKE) mode; defaults to (starts as) false/FROST.
static bool isWarmMode;
// If true then is in WARM (or BAKE) mode, but 'debounced' to avoid accidental operation.
static bool isWarmModeDebounced;
// If true then the unit is in 'warm' (heating) mode, else 'frost' protection mode.
bool inWarmModeDebounced() { return(isWarmModeDebounced); }
    4154:	80 91 e6 01 	lds	r24, 0x01E6
    4158:	08 95       	ret

0000415a <inBakeModeDebounced()>:
static uint_least8_t bakeCountdownM;
// If true then the unit is in raw 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
static bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
// TODO: this is not fully 'debounced', ie could flip between WARM/BAKE with button held down.
bool inBakeModeDebounced() { return(isWarmModeDebounced && (0 != bakeCountdownM)); }
    415a:	80 91 e6 01 	lds	r24, 0x01E6
    415e:	88 23       	and	r24, r24
    4160:	21 f0       	breq	.+8      	; 0x416a <inBakeModeDebounced()+0x10>
    4162:	80 91 e8 01 	lds	r24, 0x01E8
    4166:	81 11       	cpse	r24, r1
    4168:	81 e0       	ldi	r24, 0x01	; 1
    416a:	08 95       	ret

0000416c <cancelBake()>:
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
    416c:	10 92 e8 01 	sts	0x01E8, r1
    4170:	08 95       	ret

00004172 <isCLIActive()>:

// Reset CLI active timer to the full whack before it goes inactive again (ie makes CLI active for a while).
static void resetCLIActiveTimer() { CLITimeoutM = CLI_DEFAULT_TIMEOUT_M; }

// Returns true if the CLI is active, at least intermittently.
bool isCLIActive() { return(0 != CLITimeoutM); }
    4172:	80 91 05 01 	lds	r24, 0x0105
    4176:	81 11       	cpse	r24, r1
    4178:	81 e0       	ldi	r24, 0x01	; 1
    417a:	08 95       	ret

0000417c <recentUIControlUse()>:
  // User operation of controls locally is strong indication of presence.
  markAsOccupied();
  }

// True if a manual UI control has been recently (seconds to minutes ago) operated.
bool recentUIControlUse()
    417c:	80 91 e9 01 	lds	r24, 0x01E9
    4180:	81 11       	cpse	r24, r1
    4182:	81 e0       	ldi	r24, 0x01	; 1
  {
  return(0 != uiTimeoutM);
  }
    4184:	08 95       	ret

00004186 <Serial_print_space()>:
    }
  }


// Prints a single space to Serial (which must be up and running).
static void Serial_print_space() { Serial.print(' '); }
    4186:	8c e3       	ldi	r24, 0x3C	; 60
    4188:	93 e0       	ldi	r25, 0x03	; 3
    418a:	60 e2       	ldi	r22, 0x20	; 32
    418c:	0e 94 33 36 	call	0x6c66	; 0x6c66 <Print::print(char)>
    4190:	08 95       	ret

00004192 <InvalidIgnored()>:
  Serial.println();
  }

// Prints warning to serial (that must be up and running) that invalid (CLI) input has been ignored.
// Probably should not be inlined, to avoid creating duplicate strings in Flash.
static void InvalidIgnored() { Serial.println(F("Invalid, ignored.")); }
    4192:	8c e3       	ldi	r24, 0x3C	; 60
    4194:	93 e0       	ldi	r25, 0x03	; 3
    4196:	62 e3       	ldi	r22, 0x32	; 50
    4198:	74 e0       	ldi	r23, 0x04	; 4
    419a:	0e 94 5b 36 	call	0x6cb6	; 0x6cb6 <Print::println(__FlashStringHelper const*)>
    419e:	08 95       	ret

000041a0 <printCLILine(unsigned char, char, __FlashStringHelper const*)>:
  for(int8_t padding = SYNTAX_COL_WIDTH - strlen_P((const char *)syntax); --padding >= 0; ) { Serial_print_space(); }
  Serial.println(description);
  }
// Efficiently print a single line given a single-char syntax element and the description, both non-null.
// NOTE: will skip the description if getting close to the end of the time deadline to avoid overrun.
static void printCLILine(const uint8_t deadline, const char syntax, __FlashStringHelper const *description)
    41a0:	1f 93       	push	r17
    41a2:	cf 93       	push	r28
    41a4:	df 93       	push	r29
    41a6:	18 2f       	mov	r17, r24
    41a8:	ea 01       	movw	r28, r20
  {
  Serial.print(syntax);
    41aa:	8c e3       	ldi	r24, 0x3C	; 60
    41ac:	93 e0       	ldi	r25, 0x03	; 3
    41ae:	0e 94 33 36 	call	0x6c66	; 0x6c66 <Print::print(char)>
  flushSerialProductive(); // Ensure all pending output is flushed before sampling current position in minor cycle.
    41b2:	0e 94 51 19 	call	0x32a2	; 0x32a2 <flushSerialProductive()>
  if(getSubCycleTime() >= deadline) { Serial.println(); return; }
    41b6:	80 91 b2 00 	lds	r24, 0x00B2
    41ba:	81 17       	cp	r24, r17
    41bc:	10 f4       	brcc	.+4      	; 0x41c2 <printCLILine(unsigned char, char, __FlashStringHelper const*)+0x22>
    41be:	19 e0       	ldi	r17, 0x09	; 9
    41c0:	07 c0       	rjmp	.+14     	; 0x41d0 <printCLILine(unsigned char, char, __FlashStringHelper const*)+0x30>
    41c2:	8c e3       	ldi	r24, 0x3C	; 60
    41c4:	93 e0       	ldi	r25, 0x03	; 3
    41c6:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <Print::println()>
    41ca:	09 c0       	rjmp	.+18     	; 0x41de <printCLILine(unsigned char, char, __FlashStringHelper const*)+0x3e>
  for(int8_t padding = SYNTAX_COL_WIDTH - 1; --padding >= 0; ) { Serial_print_space(); }
    41cc:	0e 94 c3 20 	call	0x4186	; 0x4186 <Serial_print_space()>
    41d0:	11 50       	subi	r17, 0x01	; 1
    41d2:	e0 f7       	brcc	.-8      	; 0x41cc <printCLILine(unsigned char, char, __FlashStringHelper const*)+0x2c>
  Serial.println(description);
    41d4:	8c e3       	ldi	r24, 0x3C	; 60
    41d6:	93 e0       	ldi	r25, 0x03	; 3
    41d8:	be 01       	movw	r22, r28
    41da:	0e 94 5b 36 	call	0x6cb6	; 0x6cb6 <Print::println(__FlashStringHelper const*)>
  }
    41de:	df 91       	pop	r29
    41e0:	cf 91       	pop	r28
    41e2:	1f 91       	pop	r17
    41e4:	08 95       	ret

000041e6 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)>:
#define CLI_PRINT_OH_SCT ((uint8_t)(GSCT_MAX/4))
// Deadline in minor cycle by which to stop printing description.
#define STOP_PRINTING_DESCRIPTION_AT ((uint8_t)(GSCT_MAX-CLI_PRINT_OH_SCT))
// Efficiently print a single line given the syntax element and the description, both non-null.
// NOTE: will skip the description if getting close to the end of the time deadline to avoid overrun.
static void printCLILine(const uint8_t deadline, __FlashStringHelper const *syntax, __FlashStringHelper const *description)
    41e6:	ef 92       	push	r14
    41e8:	ff 92       	push	r15
    41ea:	1f 93       	push	r17
    41ec:	cf 93       	push	r28
    41ee:	df 93       	push	r29
    41f0:	18 2f       	mov	r17, r24
    41f2:	eb 01       	movw	r28, r22
    41f4:	7a 01       	movw	r14, r20
  {
  Serial.print(syntax);
    41f6:	8c e3       	ldi	r24, 0x3C	; 60
    41f8:	93 e0       	ldi	r25, 0x03	; 3
    41fa:	0e 94 10 36 	call	0x6c20	; 0x6c20 <Print::print(__FlashStringHelper const*)>
  flushSerialProductive(); // Ensure all pending output is flushed before sampling current position in minor cycle.
    41fe:	0e 94 51 19 	call	0x32a2	; 0x32a2 <flushSerialProductive()>
  if(getSubCycleTime() >= deadline) { Serial.println(); return; }
    4202:	80 91 b2 00 	lds	r24, 0x00B2
    4206:	81 17       	cp	r24, r17
    4208:	28 f0       	brcs	.+10     	; 0x4214 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)+0x2e>
    420a:	8c e3       	ldi	r24, 0x3C	; 60
    420c:	93 e0       	ldi	r25, 0x03	; 3
    420e:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <Print::println()>
    4212:	10 c0       	rjmp	.+32     	; 0x4234 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)+0x4e>
  for(int8_t padding = SYNTAX_COL_WIDTH - strlen_P((const char *)syntax); --padding >= 0; ) { Serial_print_space(); }
    4214:	ce 01       	movw	r24, r28
    4216:	0e 94 09 04 	call	0x812	; 0x812 <strlen_P>
    421a:	1a e0       	ldi	r17, 0x0A	; 10
    421c:	18 1b       	sub	r17, r24
    421e:	02 c0       	rjmp	.+4      	; 0x4224 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)+0x3e>
    4220:	0e 94 c3 20 	call	0x4186	; 0x4186 <Serial_print_space()>
    4224:	11 50       	subi	r17, 0x01	; 1
    4226:	17 ff       	sbrs	r17, 7
    4228:	fb cf       	rjmp	.-10     	; 0x4220 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)+0x3a>
  Serial.println(description);
    422a:	8c e3       	ldi	r24, 0x3C	; 60
    422c:	93 e0       	ldi	r25, 0x03	; 3
    422e:	b7 01       	movw	r22, r14
    4230:	0e 94 5b 36 	call	0x6cb6	; 0x6cb6 <Print::println(__FlashStringHelper const*)>
  }
    4234:	df 91       	pop	r29
    4236:	cf 91       	pop	r28
    4238:	1f 91       	pop	r17
    423a:	ff 90       	pop	r15
    423c:	ef 90       	pop	r14
    423e:	08 95       	ret

00004240 <dumpCLIUsage(unsigned char)>:
  Serial.println(description);
  }

// Dump some brief CLI usage instructions to serial TX, which must be up and running.
// If this gets too big there is a risk of overrunning and missing the next tick...
static void dumpCLIUsage(const uint8_t stopBy)
    4240:	1f 93       	push	r17
    4242:	df 93       	push	r29
    4244:	cf 93       	push	r28
    4246:	00 d0       	rcall	.+0      	; 0x4248 <dumpCLIUsage(unsigned char)+0x8>
    4248:	00 d0       	rcall	.+0      	; 0x424a <dumpCLIUsage(unsigned char)+0xa>
    424a:	cd b7       	in	r28, 0x3d	; 61
    424c:	de b7       	in	r29, 0x3e	; 62
    424e:	8c 83       	std	Y+4, r24	; 0x04
  {
  const uint8_t deadline = fnmin((uint8_t)(stopBy - fnmin(stopBy,CLI_PRINT_OH_SCT)), STOP_PRINTING_DESCRIPTION_AT);
    4250:	98 2f       	mov	r25, r24
    4252:	8f e3       	ldi	r24, 0x3F	; 63
    4254:	89 83       	std	Y+1, r24	; 0x01
    4256:	89 2f       	mov	r24, r25
    4258:	90 34       	cpi	r25, 0x40	; 64
    425a:	08 f0       	brcs	.+2      	; 0x425e <dumpCLIUsage(unsigned char)+0x1e>
    425c:	8f e3       	ldi	r24, 0x3F	; 63
    425e:	98 1b       	sub	r25, r24
    4260:	9a 83       	std	Y+2, r25	; 0x02
    4262:	80 ec       	ldi	r24, 0xC0	; 192
    4264:	8b 83       	std	Y+3, r24	; 0x03
    4266:	19 2f       	mov	r17, r25
    4268:	91 3c       	cpi	r25, 0xC1	; 193
    426a:	08 f0       	brcs	.+2      	; 0x426e <dumpCLIUsage(unsigned char)+0x2e>
    426c:	10 ec       	ldi	r17, 0xC0	; 192
  Serial.println();
    426e:	8c e3       	ldi	r24, 0x3C	; 60
    4270:	93 e0       	ldi	r25, 0x03	; 3
    4272:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <Print::println()>
  //Serial.println(F("CLI usage:"));
  printCLILine(deadline, '?', F("this help"));
    4276:	81 2f       	mov	r24, r17
    4278:	6f e3       	ldi	r22, 0x3F	; 63
    427a:	48 e2       	ldi	r20, 0x28	; 40
    427c:	54 e0       	ldi	r21, 0x04	; 4
    427e:	0e 94 d0 20 	call	0x41a0	; 0x41a0 <printCLILine(unsigned char, char, __FlashStringHelper const*)>
#ifdef ENABLE_BOILER_HUB
  printCLILine(deadline, F("C M"), F("Central hub >=M mins on, 0 off"));
    4282:	81 2f       	mov	r24, r17
    4284:	64 e2       	ldi	r22, 0x24	; 36
    4286:	74 e0       	ldi	r23, 0x04	; 4
    4288:	45 e0       	ldi	r20, 0x05	; 5
    428a:	54 e0       	ldi	r21, 0x04	; 4
    428c:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)>
#endif
  printCLILine(deadline, F("D N"), F("Dump stats set N"));
    4290:	81 2f       	mov	r24, r17
    4292:	61 e0       	ldi	r22, 0x01	; 1
    4294:	74 e0       	ldi	r23, 0x04	; 4
    4296:	40 ef       	ldi	r20, 0xF0	; 240
    4298:	53 e0       	ldi	r21, 0x03	; 3
    429a:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine(deadline, 'E', F("Exit CLI"));
    429e:	81 2f       	mov	r24, r17
    42a0:	65 e4       	ldi	r22, 0x45	; 69
    42a2:	47 ee       	ldi	r20, 0xE7	; 231
    42a4:	53 e0       	ldi	r21, 0x03	; 3
    42a6:	0e 94 d0 20 	call	0x41a0	; 0x41a0 <printCLILine(unsigned char, char, __FlashStringHelper const*)>
  printCLILine(deadline, 'F', F("Frost"));
    42aa:	81 2f       	mov	r24, r17
    42ac:	66 e4       	ldi	r22, 0x46	; 70
    42ae:	41 ee       	ldi	r20, 0xE1	; 225
    42b0:	53 e0       	ldi	r21, 0x03	; 3
    42b2:	0e 94 d0 20 	call	0x41a0	; 0x41a0 <printCLILine(unsigned char, char, __FlashStringHelper const*)>
#if defined(SETTABLE_TARGET_TEMPERATURES) && !defined(TEMP_POT_AVAILABLE)
  printCLILine(deadline, F("F CC"), F("set Frost temp CC"));
#endif
#if defined(USE_MODULE_FHT8VSIMPLE) && defined(LOCAL_TRV)
  printCLILine(deadline, F("H H1 H2"), F("set FHT8V House codes 1&2"));
    42b6:	81 2f       	mov	r24, r17
    42b8:	69 ed       	ldi	r22, 0xD9	; 217
    42ba:	73 e0       	ldi	r23, 0x03	; 3
    42bc:	4f eb       	ldi	r20, 0xBF	; 191
    42be:	53 e0       	ldi	r21, 0x03	; 3
    42c0:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine(deadline, 'H', F("clear House codes"));
    42c4:	81 2f       	mov	r24, r17
    42c6:	68 e4       	ldi	r22, 0x48	; 72
    42c8:	4d ea       	ldi	r20, 0xAD	; 173
    42ca:	53 e0       	ldi	r21, 0x03	; 3
    42cc:	0e 94 d0 20 	call	0x41a0	; 0x41a0 <printCLILine(unsigned char, char, __FlashStringHelper const*)>
#endif
  printCLILine(deadline, 'I', F("set new ID"));
    42d0:	81 2f       	mov	r24, r17
    42d2:	69 e4       	ldi	r22, 0x49	; 73
    42d4:	42 ea       	ldi	r20, 0xA2	; 162
    42d6:	53 e0       	ldi	r21, 0x03	; 3
    42d8:	0e 94 d0 20 	call	0x41a0	; 0x41a0 <printCLILine(unsigned char, char, __FlashStringHelper const*)>
  //printCLILine(deadline, 'L', F("Learn to warm every 24h from now, clear if in frost mode, schedule 0"));
  printCLILine(deadline, F("L S"), F("Learn daily warm now, clear if in frost mode, schedule S"));
    42dc:	81 2f       	mov	r24, r17
    42de:	6e e9       	ldi	r22, 0x9E	; 158
    42e0:	73 e0       	ldi	r23, 0x03	; 3
    42e2:	45 e6       	ldi	r20, 0x65	; 101
    42e4:	53 e0       	ldi	r21, 0x03	; 3
    42e6:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)>
  //printCLILine(deadline, F("P HH MM"), F("Program: warm daily starting at HH MM schedule 0"));
  printCLILine(deadline, F("P HH MM S"), F("Program: warm daily starting at HH MM schedule S"));
    42ea:	81 2f       	mov	r24, r17
    42ec:	6b e5       	ldi	r22, 0x5B	; 91
    42ee:	73 e0       	ldi	r23, 0x03	; 3
    42f0:	4a e2       	ldi	r20, 0x2A	; 42
    42f2:	53 e0       	ldi	r21, 0x03	; 3
    42f4:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine(deadline, F("O PP"), F("min % for valve to be Open"));
    42f8:	81 2f       	mov	r24, r17
    42fa:	65 e2       	ldi	r22, 0x25	; 37
    42fc:	73 e0       	ldi	r23, 0x03	; 3
    42fe:	4a e0       	ldi	r20, 0x0A	; 10
    4300:	53 e0       	ldi	r21, 0x03	; 3
    4302:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine(deadline, 'O', F("reset Open %"));
    4306:	81 2f       	mov	r24, r17
    4308:	6f e4       	ldi	r22, 0x4F	; 79
    430a:	4d ef       	ldi	r20, 0xFD	; 253
    430c:	52 e0       	ldi	r21, 0x02	; 2
    430e:	0e 94 d0 20 	call	0x41a0	; 0x41a0 <printCLILine(unsigned char, char, __FlashStringHelper const*)>
#ifdef SUPPORT_BAKE
  printCLILine(deadline, 'Q', F("Quick Heat"));
    4312:	81 2f       	mov	r24, r17
    4314:	61 e5       	ldi	r22, 0x51	; 81
    4316:	42 ef       	ldi	r20, 0xF2	; 242
    4318:	52 e0       	ldi	r21, 0x02	; 2
    431a:	0e 94 d0 20 	call	0x41a0	; 0x41a0 <printCLILine(unsigned char, char, __FlashStringHelper const*)>
#endif
  printCLILine(deadline, F("R N"), F("dump Raw stats set N"));
    431e:	81 2f       	mov	r24, r17
    4320:	6e ee       	ldi	r22, 0xEE	; 238
    4322:	72 e0       	ldi	r23, 0x02	; 2
    4324:	49 ed       	ldi	r20, 0xD9	; 217
    4326:	52 e0       	ldi	r21, 0x02	; 2
    4328:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine(deadline, 'S', F("show Status and smart warming for next 24h"));
    432c:	81 2f       	mov	r24, r17
    432e:	63 e5       	ldi	r22, 0x53	; 83
    4330:	4e ea       	ldi	r20, 0xAE	; 174
    4332:	52 e0       	ldi	r21, 0x02	; 2
    4334:	0e 94 d0 20 	call	0x41a0	; 0x41a0 <printCLILine(unsigned char, char, __FlashStringHelper const*)>
  printCLILine(deadline, F("T HH MM"), F("set 24h Time"));
    4338:	81 2f       	mov	r24, r17
    433a:	66 ea       	ldi	r22, 0xA6	; 166
    433c:	72 e0       	ldi	r23, 0x02	; 2
    433e:	49 e9       	ldi	r20, 0x99	; 153
    4340:	52 e0       	ldi	r21, 0x02	; 2
    4342:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine(deadline, 'W', F("Warm"));
    4346:	81 2f       	mov	r24, r17
    4348:	67 e5       	ldi	r22, 0x57	; 87
    434a:	44 e9       	ldi	r20, 0x94	; 148
    434c:	52 e0       	ldi	r21, 0x02	; 2
    434e:	0e 94 d0 20 	call	0x41a0	; 0x41a0 <printCLILine(unsigned char, char, __FlashStringHelper const*)>
  printCLILine(deadline, 'V', F("code/board Version"));
    4352:	81 2f       	mov	r24, r17
    4354:	66 e5       	ldi	r22, 0x56	; 86
    4356:	41 e8       	ldi	r20, 0x81	; 129
    4358:	52 e0       	ldi	r21, 0x02	; 2
    435a:	0e 94 d0 20 	call	0x41a0	; 0x41a0 <printCLILine(unsigned char, char, __FlashStringHelper const*)>
#if defined(SETTABLE_TARGET_TEMPERATURES) && !defined(TEMP_POT_AVAILABLE)
  printCLILine(deadline, F("W CC"), F("set Warm temp CC"));
#endif
  printCLILine(deadline, 'X', F("Xmit security level; 0 always, 255 never"));
    435e:	81 2f       	mov	r24, r17
    4360:	68 e5       	ldi	r22, 0x58	; 88
    4362:	48 e5       	ldi	r20, 0x58	; 88
    4364:	52 e0       	ldi	r21, 0x02	; 2
    4366:	0e 94 d0 20 	call	0x41a0	; 0x41a0 <printCLILine(unsigned char, char, __FlashStringHelper const*)>
  printCLILine(deadline, 'Z', F("Zap stats"));
    436a:	81 2f       	mov	r24, r17
    436c:	6a e5       	ldi	r22, 0x5A	; 90
    436e:	4e e4       	ldi	r20, 0x4E	; 78
    4370:	52 e0       	ldi	r21, 0x02	; 2
    4372:	0e 94 d0 20 	call	0x41a0	; 0x41a0 <printCLILine(unsigned char, char, __FlashStringHelper const*)>
  Serial.println();
    4376:	8c e3       	ldi	r24, 0x3C	; 60
    4378:	93 e0       	ldi	r25, 0x03	; 3
    437a:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <Print::println()>
  }
    437e:	0f 90       	pop	r0
    4380:	0f 90       	pop	r0
    4382:	0f 90       	pop	r0
    4384:	0f 90       	pop	r0
    4386:	cf 91       	pop	r28
    4388:	df 91       	pop	r29
    438a:	1f 91       	pop	r17
    438c:	08 95       	ret

0000438e <handleLEARN(unsigned char)>:
#ifdef LEARN_BUTTON_AVAILABLE
// Handle learn button(s).
// First/primary button is 0, second is 1, etc.
// In simple mode: if in frost mode clear simple schedule else set repeat for every 24h from now.
// May be called from pushbutton or CLI UI components.
static void handleLEARN(const uint8_t which)
    438e:	1f 93       	push	r17
    4390:	18 2f       	mov	r17, r24
  {
  // Set simple schedule starting every 24h from a little before now and running for an hour or so.  
  if(isWarmModeDebounced) { setSimpleSchedule(getMinutesSinceMidnightLT(), which); }
    4392:	80 91 e6 01 	lds	r24, 0x01E6
    4396:	88 23       	and	r24, r24
    4398:	31 f0       	breq	.+12     	; 0x43a6 <handleLEARN(unsigned char)+0x18>
    439a:	0e 94 b2 1c 	call	0x3964	; 0x3964 <getMinutesSinceMidnightLT()>
    439e:	61 2f       	mov	r22, r17
    43a0:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <setSimpleSchedule(unsigned int, unsigned char)>
    43a4:	03 c0       	rjmp	.+6      	; 0x43ac <handleLEARN(unsigned char)+0x1e>
  // Clear simple schedule.
  else { clearSimpleSchedule(which); }
    43a6:	81 2f       	mov	r24, r17
    43a8:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <clearSimpleSchedule(unsigned char)>
  }
    43ac:	1f 91       	pop	r17
    43ae:	08 95       	ret

000043b0 <serialStatusReport()>:

'HC' introduces the optional FHT8V house codes section, if supported and codes are set.
eg 'HC99 99'
HChc1 hc2 are the house codes 1 and 2 for an FHT8V valve.
*/
void serialStatusReport()
    43b0:	df 92       	push	r13
    43b2:	ef 92       	push	r14
    43b4:	ff 92       	push	r15
    43b6:	0f 93       	push	r16
    43b8:	1f 93       	push	r17
    43ba:	cf 93       	push	r28
    43bc:	df 93       	push	r29
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    43be:	0e 94 c4 19 	call	0x3388	; 0x3388 <powerUpSerialIfDisabled()>
    43c2:	d8 2e       	mov	r13, r24

  // Aim to overlap CPU usage with characters being TXed for throughput determined primarily by output size and baud.

  // Stats line starts with distingushed marker character.
  // Initial '=' section with common essentials.
  Serial.print(LINE_START_CHAR_STATS);
    43c4:	8c e3       	ldi	r24, 0x3C	; 60
    43c6:	93 e0       	ldi	r25, 0x03	; 3
    43c8:	6d e3       	ldi	r22, 0x3D	; 61
    43ca:	0e 94 33 36 	call	0x6c66	; 0x6c66 <Print::print(char)>
#ifdef SUPPORT_BAKE
  Serial.print(inWarmModeDebounced() ? (inBakeModeDebounced() ? 'B' : 'W') : 'F');
    43ce:	80 91 e6 01 	lds	r24, 0x01E6
    43d2:	88 23       	and	r24, r24
    43d4:	11 f4       	brne	.+4      	; 0x43da <serialStatusReport()+0x2a>
    43d6:	66 e4       	ldi	r22, 0x46	; 70
    43d8:	07 c0       	rjmp	.+14     	; 0x43e8 <serialStatusReport()+0x38>
static uint_least8_t bakeCountdownM;
// If true then the unit is in raw 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
static bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
// TODO: this is not fully 'debounced', ie could flip between WARM/BAKE with button held down.
bool inBakeModeDebounced() { return(isWarmModeDebounced && (0 != bakeCountdownM)); }
    43da:	80 91 e8 01 	lds	r24, 0x01E8
    43de:	88 23       	and	r24, r24
    43e0:	11 f4       	brne	.+4      	; 0x43e6 <serialStatusReport()+0x36>
    43e2:	67 e5       	ldi	r22, 0x57	; 87
    43e4:	01 c0       	rjmp	.+2      	; 0x43e8 <serialStatusReport()+0x38>
    43e6:	62 e4       	ldi	r22, 0x42	; 66

  // Stats line starts with distingushed marker character.
  // Initial '=' section with common essentials.
  Serial.print(LINE_START_CHAR_STATS);
#ifdef SUPPORT_BAKE
  Serial.print(inWarmModeDebounced() ? (inBakeModeDebounced() ? 'B' : 'W') : 'F');
    43e8:	8c e3       	ldi	r24, 0x3C	; 60
    43ea:	93 e0       	ldi	r25, 0x03	; 3
    43ec:	0e 94 33 36 	call	0x6c66	; 0x6c66 <Print::print(char)>
#else
  Serial.print(inWarmModeDebounced() ? 'W' : 'F');
#endif
  Serial.print(getTRVPercentOpen()); Serial.print('%'); // Target valve position.
    43f0:	0e 94 9a 07 	call	0xf34	; 0xf34 <getTRVPercentOpen()>
    43f4:	68 2f       	mov	r22, r24
    43f6:	8c e3       	ldi	r24, 0x3C	; 60
    43f8:	93 e0       	ldi	r25, 0x03	; 3
    43fa:	4a e0       	ldi	r20, 0x0A	; 10
    43fc:	50 e0       	ldi	r21, 0x00	; 0
    43fe:	0e 94 0f 37 	call	0x6e1e	; 0x6e1e <Print::print(unsigned char, int)>
    4402:	8c e3       	ldi	r24, 0x3C	; 60
    4404:	93 e0       	ldi	r25, 0x03	; 3
    4406:	65 e2       	ldi	r22, 0x25	; 37
    4408:	0e 94 33 36 	call	0x6c66	; 0x6c66 <Print::print(char)>
  const int temp = getTemperatureC16();
    440c:	0e 94 9e 20 	call	0x413c	; 0x413c <getTemperatureC16()>
    4410:	8c 01       	movw	r16, r24
  Serial.print('@'); Serial.print(temp >> 4); Serial.print('C'); // Unrounded whole degrees C.
    4412:	8c e3       	ldi	r24, 0x3C	; 60
    4414:	93 e0       	ldi	r25, 0x03	; 3
    4416:	60 e4       	ldi	r22, 0x40	; 64
    4418:	0e 94 33 36 	call	0x6c66	; 0x6c66 <Print::print(char)>
    441c:	b8 01       	movw	r22, r16
    441e:	84 e0       	ldi	r24, 0x04	; 4
    4420:	75 95       	asr	r23
    4422:	67 95       	ror	r22
    4424:	8a 95       	dec	r24
    4426:	e1 f7       	brne	.-8      	; 0x4420 <serialStatusReport()+0x70>
    4428:	8c e3       	ldi	r24, 0x3C	; 60
    442a:	93 e0       	ldi	r25, 0x03	; 3
    442c:	4a e0       	ldi	r20, 0x0A	; 10
    442e:	50 e0       	ldi	r21, 0x00	; 0
    4430:	0e 94 61 37 	call	0x6ec2	; 0x6ec2 <Print::print(int, int)>
    4434:	8c e3       	ldi	r24, 0x3C	; 60
    4436:	93 e0       	ldi	r25, 0x03	; 3
    4438:	63 e4       	ldi	r22, 0x43	; 67
    443a:	0e 94 33 36 	call	0x6c66	; 0x6c66 <Print::print(char)>
      Serial.print(temp & 0xf, HEX); // Show 16ths in hex.
    443e:	0f 70       	andi	r16, 0x0F	; 15
    4440:	10 70       	andi	r17, 0x00	; 0
    4442:	8c e3       	ldi	r24, 0x3C	; 60
    4444:	93 e0       	ldi	r25, 0x03	; 3
    4446:	b8 01       	movw	r22, r16
    4448:	40 e1       	ldi	r20, 0x10	; 16
    444a:	50 e0       	ldi	r21, 0x00	; 0
    444c:	0e 94 61 37 	call	0x6ec2	; 0x6ec2 <Print::print(int, int)>

  // *I* ID section: show first two hex node ID bytes each in the range 80--FE.
  Serial.print(F(";I"));
    4450:	8c e3       	ldi	r24, 0x3C	; 60
    4452:	93 e0       	ldi	r25, 0x03	; 3
    4454:	60 e6       	ldi	r22, 0x60	; 96
    4456:	74 e0       	ldi	r23, 0x04	; 4
    4458:	0e 94 10 36 	call	0x6c20	; 0x6c20 <Print::print(__FlashStringHelper const*)>
    445c:	04 e1       	ldi	r16, 0x14	; 20
    445e:	10 e0       	ldi	r17, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    4460:	f9 99       	sbic	0x1f, 1	; 31
    4462:	fe cf       	rjmp	.-4      	; 0x4460 <serialStatusReport()+0xb0>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    4464:	12 bd       	out	0x22, r17	; 34
    4466:	01 bd       	out	0x21, r16	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    4468:	f8 9a       	sbi	0x1f, 0	; 31
    446a:	60 b5       	in	r22, 0x20	; 32
  for(uint8_t i = 0; i < min(2, EE_LEN_ID); ++i)
    { Serial.print(eeprom_read_byte(i + (uint8_t *)EE_START_ID), HEX); }
    446c:	8c e3       	ldi	r24, 0x3C	; 60
    446e:	93 e0       	ldi	r25, 0x03	; 3
    4470:	40 e1       	ldi	r20, 0x10	; 16
    4472:	50 e0       	ldi	r21, 0x00	; 0
    4474:	0e 94 0f 37 	call	0x6e1e	; 0x6e1e <Print::print(unsigned char, int)>
    4478:	0f 5f       	subi	r16, 0xFF	; 255
    447a:	1f 4f       	sbci	r17, 0xFF	; 255
  Serial.print('@'); Serial.print(temp >> 4); Serial.print('C'); // Unrounded whole degrees C.
      Serial.print(temp & 0xf, HEX); // Show 16ths in hex.

  // *I* ID section: show first two hex node ID bytes each in the range 80--FE.
  Serial.print(F(";I"));
  for(uint8_t i = 0; i < min(2, EE_LEN_ID); ++i)
    447c:	06 31       	cpi	r16, 0x16	; 22
    447e:	11 05       	cpc	r17, r1
    4480:	79 f7       	brne	.-34     	; 0x4460 <serialStatusReport()+0xb0>
    { Serial.print(eeprom_read_byte(i + (uint8_t *)EE_START_ID), HEX); }

  // *P* section: low power flag only shown iff (battery) low.
  if(isBatteryLow()) { Serial.print(F(";Plow")); }
    4482:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <isBatteryLow()>
    4486:	88 23       	and	r24, r24
    4488:	31 f0       	breq	.+12     	; 0x4496 <serialStatusReport()+0xe6>
    448a:	8c e3       	ldi	r24, 0x3C	; 60
    448c:	93 e0       	ldi	r25, 0x03	; 3
    448e:	6a e5       	ldi	r22, 0x5A	; 90
    4490:	74 e0       	ldi	r23, 0x04	; 4
    4492:	0e 94 10 36 	call	0x6c20	; 0x6c20 <Print::print(__FlashStringHelper const*)>

#ifdef DEBUG
  // Show battery/supply mV in debug mode. 
  Serial.print(F(";V"));
    4496:	8c e3       	ldi	r24, 0x3C	; 60
    4498:	93 e0       	ldi	r25, 0x03	; 3
    449a:	67 e5       	ldi	r22, 0x57	; 87
    449c:	74 e0       	ldi	r23, 0x04	; 4
    449e:	0e 94 10 36 	call	0x6c20	; 0x6c20 <Print::print(__FlashStringHelper const*)>
  Serial.print(getBatterymV());
    44a2:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <getBatterymV()>
    44a6:	bc 01       	movw	r22, r24
    44a8:	8c e3       	ldi	r24, 0x3C	; 60
    44aa:	93 e0       	ldi	r25, 0x03	; 3
    44ac:	4a e0       	ldi	r20, 0x0A	; 10
    44ae:	50 e0       	ldi	r21, 0x00	; 0
    44b0:	0e 94 fe 36 	call	0x6dfc	; 0x6dfc <Print::print(unsigned int, int)>
#endif

  // *X* section: Xmit security level shown only if some non-essential TX potentially allowed.
  const stats_TX_level xmitLevel = getStatsTXLevel();
    44b4:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <getStatsTXLevel()>
  if(xmitLevel < stTXnever) { Serial.print(F(";X")); Serial.print(xmitLevel); }
    44b8:	8c 01       	movw	r16, r24
    44ba:	8f 3f       	cpi	r24, 0xFF	; 255
    44bc:	91 05       	cpc	r25, r1
    44be:	6c f4       	brge	.+26     	; 0x44da <serialStatusReport()+0x12a>
    44c0:	8c e3       	ldi	r24, 0x3C	; 60
    44c2:	93 e0       	ldi	r25, 0x03	; 3
    44c4:	64 e5       	ldi	r22, 0x54	; 84
    44c6:	74 e0       	ldi	r23, 0x04	; 4
    44c8:	0e 94 10 36 	call	0x6c20	; 0x6c20 <Print::print(__FlashStringHelper const*)>
    44cc:	8c e3       	ldi	r24, 0x3C	; 60
    44ce:	93 e0       	ldi	r25, 0x03	; 3
    44d0:	b8 01       	movw	r22, r16
    44d2:	4a e0       	ldi	r20, 0x0A	; 10
    44d4:	50 e0       	ldi	r21, 0x00	; 0
    44d6:	0e 94 61 37 	call	0x6ec2	; 0x6ec2 <Print::print(int, int)>

#ifdef AMBIENT_LIGHT_SENSOR_H
  // *L* ambient light section; range [0,1023].
  Serial.print(F(";L"));
    44da:	8c e3       	ldi	r24, 0x3C	; 60
    44dc:	93 e0       	ldi	r25, 0x03	; 3
    44de:	61 e5       	ldi	r22, 0x51	; 81
    44e0:	74 e0       	ldi	r23, 0x04	; 4
    44e2:	0e 94 10 36 	call	0x6c20	; 0x6c20 <Print::print(__FlashStringHelper const*)>
  Serial.print(getAmbientLight());
    44e6:	0e 94 28 07 	call	0xe50	; 0xe50 <getAmbientLight()>
    44ea:	bc 01       	movw	r22, r24
    44ec:	8c e3       	ldi	r24, 0x3C	; 60
    44ee:	93 e0       	ldi	r25, 0x03	; 3
    44f0:	4a e0       	ldi	r20, 0x0A	; 10
    44f2:	50 e0       	ldi	r21, 0x00	; 0
    44f4:	0e 94 61 37 	call	0x6ec2	; 0x6ec2 <Print::print(int, int)>
#endif

#ifdef HUMIDITY_SENSOR_SUPPORT
  const uint8_t rh = getRHpc();
    44f8:	0e 94 45 12 	call	0x248a	; 0x248a <getRHpc()>
    44fc:	18 2f       	mov	r17, r24
  if(rh <= 100)
    44fe:	85 36       	cpi	r24, 0x65	; 101
    4500:	68 f4       	brcc	.+26     	; 0x451c <serialStatusReport()+0x16c>
    {
    // *R* relative humidity section; range [0,100].
    Serial.print(F(";R"));
    4502:	8c e3       	ldi	r24, 0x3C	; 60
    4504:	93 e0       	ldi	r25, 0x03	; 3
    4506:	6e e4       	ldi	r22, 0x4E	; 78
    4508:	74 e0       	ldi	r23, 0x04	; 4
    450a:	0e 94 10 36 	call	0x6c20	; 0x6c20 <Print::print(__FlashStringHelper const*)>
    Serial.print(rh);
    450e:	8c e3       	ldi	r24, 0x3C	; 60
    4510:	93 e0       	ldi	r25, 0x03	; 3
    4512:	61 2f       	mov	r22, r17
    4514:	4a e0       	ldi	r20, 0x0A	; 10
    4516:	50 e0       	ldi	r21, 0x00	; 0
    4518:	0e 94 0f 37 	call	0x6e1e	; 0x6e1e <Print::print(unsigned char, int)>
    }
#endif

  // *T* section: time and schedules.
  const uint_least8_t hh = getHoursLT();
    451c:	0e 94 c7 1c 	call	0x398e	; 0x398e <getHoursLT()>
    4520:	e8 2e       	mov	r14, r24
  const uint_least8_t mm = getMinutesLT();
    4522:	0e 94 bb 1c 	call	0x3976	; 0x3976 <getMinutesLT()>
    4526:	18 2f       	mov	r17, r24
  Serial.print(';'); // End previous section.
    4528:	8c e3       	ldi	r24, 0x3C	; 60
    452a:	93 e0       	ldi	r25, 0x03	; 3
    452c:	6b e3       	ldi	r22, 0x3B	; 59
    452e:	0e 94 33 36 	call	0x6c66	; 0x6c66 <Print::print(char)>
  Serial.print('T'); Serial.print(hh); Serial_print_space(); Serial.print(mm);
    4532:	8c e3       	ldi	r24, 0x3C	; 60
    4534:	93 e0       	ldi	r25, 0x03	; 3
    4536:	64 e5       	ldi	r22, 0x54	; 84
    4538:	0e 94 33 36 	call	0x6c66	; 0x6c66 <Print::print(char)>
    453c:	8c e3       	ldi	r24, 0x3C	; 60
    453e:	93 e0       	ldi	r25, 0x03	; 3
    4540:	6e 2d       	mov	r22, r14
    4542:	4a e0       	ldi	r20, 0x0A	; 10
    4544:	50 e0       	ldi	r21, 0x00	; 0
    4546:	0e 94 0f 37 	call	0x6e1e	; 0x6e1e <Print::print(unsigned char, int)>
    454a:	0e 94 c3 20 	call	0x4186	; 0x4186 <Serial_print_space()>
    454e:	8c e3       	ldi	r24, 0x3C	; 60
    4550:	93 e0       	ldi	r25, 0x03	; 3
    4552:	61 2f       	mov	r22, r17
    4554:	4a e0       	ldi	r20, 0x0A	; 10
    4556:	50 e0       	ldi	r21, 0x00	; 0
    4558:	0e 94 0f 37 	call	0x6e1e	; 0x6e1e <Print::print(unsigned char, int)>
    455c:	ff 24       	eor	r15, r15
  // Show all schedules set.
  for(uint8_t scheduleNumber = 0; scheduleNumber < MAX_SIMPLE_SCHEDULES; ++scheduleNumber)
    {
    Serial_print_space();
    455e:	0e 94 c3 20 	call	0x4186	; 0x4186 <Serial_print_space()>
    uint_least16_t startMinutesSinceMidnightLT = getSimpleScheduleOn(scheduleNumber);
    4562:	8f 2d       	mov	r24, r15
    4564:	0e 94 ac 1d 	call	0x3b58	; 0x3b58 <getSimpleScheduleOn(unsigned char)>
    4568:	fc 01       	movw	r30, r24
    const bool invalidStartTime = startMinutesSinceMidnightLT >= MINS_PER_DAY;
    const int startH = invalidStartTime ? 255 : (startMinutesSinceMidnightLT / 60);
    456a:	85 e0       	ldi	r24, 0x05	; 5
    456c:	e0 3a       	cpi	r30, 0xA0	; 160
    456e:	f8 07       	cpc	r31, r24
    4570:	28 f0       	brcs	.+10     	; 0x457c <serialStatusReport()+0x1cc>
    4572:	00 e0       	ldi	r16, 0x00	; 0
    4574:	10 e0       	ldi	r17, 0x00	; 0
    4576:	cf ef       	ldi	r28, 0xFF	; 255
    4578:	d0 e0       	ldi	r29, 0x00	; 0
    457a:	0c c0       	rjmp	.+24     	; 0x4594 <serialStatusReport()+0x1e4>
    457c:	cf 01       	movw	r24, r30
    457e:	6c e3       	ldi	r22, 0x3C	; 60
    4580:	70 e0       	ldi	r23, 0x00	; 0
    4582:	0e 94 fb 38 	call	0x71f6	; 0x71f6 <__udivmodhi4>
    4586:	eb 01       	movw	r28, r22
    const int startM = invalidStartTime ? 0 : (startMinutesSinceMidnightLT % 60);
    4588:	cf 01       	movw	r24, r30
    458a:	6c e3       	ldi	r22, 0x3C	; 60
    458c:	70 e0       	ldi	r23, 0x00	; 0
    458e:	0e 94 fb 38 	call	0x71f6	; 0x71f6 <__udivmodhi4>
    4592:	8c 01       	movw	r16, r24
    Serial.print('W'); Serial.print(startH); Serial_print_space(); Serial.print(startM);
    4594:	8c e3       	ldi	r24, 0x3C	; 60
    4596:	93 e0       	ldi	r25, 0x03	; 3
    4598:	67 e5       	ldi	r22, 0x57	; 87
    459a:	0e 94 33 36 	call	0x6c66	; 0x6c66 <Print::print(char)>
    459e:	8c e3       	ldi	r24, 0x3C	; 60
    45a0:	93 e0       	ldi	r25, 0x03	; 3
    45a2:	be 01       	movw	r22, r28
    45a4:	4a e0       	ldi	r20, 0x0A	; 10
    45a6:	50 e0       	ldi	r21, 0x00	; 0
    45a8:	0e 94 61 37 	call	0x6ec2	; 0x6ec2 <Print::print(int, int)>
    45ac:	0e 94 c3 20 	call	0x4186	; 0x4186 <Serial_print_space()>
    45b0:	8c e3       	ldi	r24, 0x3C	; 60
    45b2:	93 e0       	ldi	r25, 0x03	; 3
    45b4:	b8 01       	movw	r22, r16
    45b6:	4a e0       	ldi	r20, 0x0A	; 10
    45b8:	50 e0       	ldi	r21, 0x00	; 0
    45ba:	0e 94 61 37 	call	0x6ec2	; 0x6ec2 <Print::print(int, int)>
    Serial_print_space();
    45be:	0e 94 c3 20 	call	0x4186	; 0x4186 <Serial_print_space()>
    uint_least16_t endMinutesSinceMidnightLT = getSimpleScheduleOff(scheduleNumber);
    45c2:	8f 2d       	mov	r24, r15
    45c4:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <getSimpleScheduleOff(unsigned char)>
    45c8:	fc 01       	movw	r30, r24
    const bool invalidEndTime = endMinutesSinceMidnightLT >= MINS_PER_DAY;
    const int endH = invalidEndTime ? 255 : (endMinutesSinceMidnightLT / 60);
    45ca:	85 e0       	ldi	r24, 0x05	; 5
    45cc:	e0 3a       	cpi	r30, 0xA0	; 160
    45ce:	f8 07       	cpc	r31, r24
    45d0:	28 f0       	brcs	.+10     	; 0x45dc <serialStatusReport()+0x22c>
    45d2:	00 e0       	ldi	r16, 0x00	; 0
    45d4:	10 e0       	ldi	r17, 0x00	; 0
    45d6:	cf ef       	ldi	r28, 0xFF	; 255
    45d8:	d0 e0       	ldi	r29, 0x00	; 0
    45da:	0c c0       	rjmp	.+24     	; 0x45f4 <serialStatusReport()+0x244>
    45dc:	cf 01       	movw	r24, r30
    45de:	6c e3       	ldi	r22, 0x3C	; 60
    45e0:	70 e0       	ldi	r23, 0x00	; 0
    45e2:	0e 94 fb 38 	call	0x71f6	; 0x71f6 <__udivmodhi4>
    45e6:	eb 01       	movw	r28, r22
    const int endM = invalidEndTime ? 0 : (endMinutesSinceMidnightLT % 60);
    45e8:	cf 01       	movw	r24, r30
    45ea:	6c e3       	ldi	r22, 0x3C	; 60
    45ec:	70 e0       	ldi	r23, 0x00	; 0
    45ee:	0e 94 fb 38 	call	0x71f6	; 0x71f6 <__udivmodhi4>
    45f2:	8c 01       	movw	r16, r24
    Serial.print('F'); Serial.print(endH); Serial_print_space(); Serial.print(endM);
    45f4:	8c e3       	ldi	r24, 0x3C	; 60
    45f6:	93 e0       	ldi	r25, 0x03	; 3
    45f8:	66 e4       	ldi	r22, 0x46	; 70
    45fa:	0e 94 33 36 	call	0x6c66	; 0x6c66 <Print::print(char)>
    45fe:	8c e3       	ldi	r24, 0x3C	; 60
    4600:	93 e0       	ldi	r25, 0x03	; 3
    4602:	be 01       	movw	r22, r28
    4604:	4a e0       	ldi	r20, 0x0A	; 10
    4606:	50 e0       	ldi	r21, 0x00	; 0
    4608:	0e 94 61 37 	call	0x6ec2	; 0x6ec2 <Print::print(int, int)>
    460c:	0e 94 c3 20 	call	0x4186	; 0x4186 <Serial_print_space()>
    4610:	8c e3       	ldi	r24, 0x3C	; 60
    4612:	93 e0       	ldi	r25, 0x03	; 3
    4614:	b8 01       	movw	r22, r16
    4616:	4a e0       	ldi	r20, 0x0A	; 10
    4618:	50 e0       	ldi	r21, 0x00	; 0
    461a:	0e 94 61 37 	call	0x6ec2	; 0x6ec2 <Print::print(int, int)>
  const uint_least8_t hh = getHoursLT();
  const uint_least8_t mm = getMinutesLT();
  Serial.print(';'); // End previous section.
  Serial.print('T'); Serial.print(hh); Serial_print_space(); Serial.print(mm);
  // Show all schedules set.
  for(uint8_t scheduleNumber = 0; scheduleNumber < MAX_SIMPLE_SCHEDULES; ++scheduleNumber)
    461e:	f3 94       	inc	r15
    4620:	82 e0       	ldi	r24, 0x02	; 2
    4622:	f8 16       	cp	r15, r24
    4624:	09 f0       	breq	.+2      	; 0x4628 <serialStatusReport()+0x278>
    4626:	9b cf       	rjmp	.-202    	; 0x455e <serialStatusReport()+0x1ae>
    const bool invalidEndTime = endMinutesSinceMidnightLT >= MINS_PER_DAY;
    const int endH = invalidEndTime ? 255 : (endMinutesSinceMidnightLT / 60);
    const int endM = invalidEndTime ? 0 : (endMinutesSinceMidnightLT % 60);
    Serial.print('F'); Serial.print(endH); Serial_print_space(); Serial.print(endM);
    }
  if(isAnyScheduleOnWARMNow()) { Serial.print('*'); } // Indicate that at least one schedule is active now.
    4628:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <isAnyScheduleOnWARMNow()>
    462c:	88 23       	and	r24, r24
    462e:	29 f0       	breq	.+10     	; 0x463a <serialStatusReport()+0x28a>
    4630:	8c e3       	ldi	r24, 0x3C	; 60
    4632:	93 e0       	ldi	r25, 0x03	; 3
    4634:	6a e2       	ldi	r22, 0x2A	; 42
    4636:	0e 94 33 36 	call	0x6c66	; 0x6c66 <Print::print(char)>

  // *S* section: settable target/threshold temperatures, current target, and eco/smart/occupied flags.
#ifdef SETTABLE_TARGET_TEMPERATURES // Show thresholds and current target since no longer so easily deduced.
  Serial.print(';'); // Terminate previous section.
    463a:	8c e3       	ldi	r24, 0x3C	; 60
    463c:	93 e0       	ldi	r25, 0x03	; 3
    463e:	6b e3       	ldi	r22, 0x3B	; 59
    4640:	0e 94 33 36 	call	0x6c66	; 0x6c66 <Print::print(char)>
  Serial.print('S'); // Current settable temperature target, and FROST and WARM settings.
    4644:	8c e3       	ldi	r24, 0x3C	; 60
    4646:	93 e0       	ldi	r25, 0x03	; 3
    4648:	63 e5       	ldi	r22, 0x53	; 83
    464a:	0e 94 33 36 	call	0x6c66	; 0x6c66 <Print::print(char)>
  Serial.print(getTargetTempC());
    464e:	0e 94 9d 07 	call	0xf3a	; 0xf3a <getTargetTempC()>
    4652:	68 2f       	mov	r22, r24
    4654:	8c e3       	ldi	r24, 0x3C	; 60
    4656:	93 e0       	ldi	r25, 0x03	; 3
    4658:	4a e0       	ldi	r20, 0x0A	; 10
    465a:	50 e0       	ldi	r21, 0x00	; 0
    465c:	0e 94 0f 37 	call	0x6e1e	; 0x6e1e <Print::print(unsigned char, int)>
  Serial_print_space();
    4660:	0e 94 c3 20 	call	0x4186	; 0x4186 <Serial_print_space()>
  Serial.print(getFROSTTargetC());
    4664:	0e 94 75 0a 	call	0x14ea	; 0x14ea <getFROSTTargetC()>
    4668:	68 2f       	mov	r22, r24
    466a:	8c e3       	ldi	r24, 0x3C	; 60
    466c:	93 e0       	ldi	r25, 0x03	; 3
    466e:	4a e0       	ldi	r20, 0x0A	; 10
    4670:	50 e0       	ldi	r21, 0x00	; 0
    4672:	0e 94 0f 37 	call	0x6e1e	; 0x6e1e <Print::print(unsigned char, int)>
  Serial_print_space();
    4676:	0e 94 c3 20 	call	0x4186	; 0x4186 <Serial_print_space()>
  Serial.print(getWARMTargetC());
    467a:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <getWARMTargetC()>
    467e:	68 2f       	mov	r22, r24
    4680:	8c e3       	ldi	r24, 0x3C	; 60
    4682:	93 e0       	ldi	r25, 0x03	; 3
    4684:	4a e0       	ldi	r20, 0x0A	; 10
    4686:	50 e0       	ldi	r21, 0x00	; 0
    4688:	0e 94 0f 37 	call	0x6e1e	; 0x6e1e <Print::print(unsigned char, int)>
  Serial_print_space();
    468c:	0e 94 c3 20 	call	0x4186	; 0x4186 <Serial_print_space()>
  // Show bias.
  Serial.print(hasEcoBias() ? 'e' : 'c'); // Show eco/comfort bias.
    4690:	0e 94 dd 08 	call	0x11ba	; 0x11ba <hasEcoBias()>
    4694:	88 23       	and	r24, r24
    4696:	11 f4       	brne	.+4      	; 0x469c <serialStatusReport()+0x2ec>
    4698:	63 e6       	ldi	r22, 0x63	; 99
    469a:	01 c0       	rjmp	.+2      	; 0x469e <serialStatusReport()+0x2ee>
    469c:	65 e6       	ldi	r22, 0x65	; 101
    469e:	8c e3       	ldi	r24, 0x3C	; 60
    46a0:	93 e0       	ldi	r25, 0x03	; 3
    46a2:	0e 94 33 36 	call	0x6c66	; 0x6c66 <Print::print(char)>
  // Show warming predictions.
  Serial.print(shouldBeWarmedAtHour(hh) ? 'w' : 'f');
    46a6:	8e 2d       	mov	r24, r14
    46a8:	0e 94 ff 08 	call	0x11fe	; 0x11fe <shouldBeWarmedAtHour(unsigned char)>
    46ac:	88 23       	and	r24, r24
    46ae:	11 f4       	brne	.+4      	; 0x46b4 <serialStatusReport()+0x304>
    46b0:	66 e6       	ldi	r22, 0x66	; 102
    46b2:	01 c0       	rjmp	.+2      	; 0x46b6 <serialStatusReport()+0x306>
    46b4:	67 e7       	ldi	r22, 0x77	; 119
    46b6:	8c e3       	ldi	r24, 0x3C	; 60
    46b8:	93 e0       	ldi	r25, 0x03	; 3
    46ba:	0e 94 33 36 	call	0x6c66	; 0x6c66 <Print::print(char)>
  Serial.print(shouldBeWarmedAtHour(hh < 23 ? (hh+1) : 0) ? 'w' : 'f');
    46be:	86 e1       	ldi	r24, 0x16	; 22
    46c0:	8e 15       	cp	r24, r14
    46c2:	10 f4       	brcc	.+4      	; 0x46c8 <serialStatusReport()+0x318>
    46c4:	80 e0       	ldi	r24, 0x00	; 0
    46c6:	02 c0       	rjmp	.+4      	; 0x46cc <serialStatusReport()+0x31c>
    46c8:	8e 2d       	mov	r24, r14
    46ca:	8f 5f       	subi	r24, 0xFF	; 255
    46cc:	0e 94 ff 08 	call	0x11fe	; 0x11fe <shouldBeWarmedAtHour(unsigned char)>
    46d0:	88 23       	and	r24, r24
    46d2:	11 f4       	brne	.+4      	; 0x46d8 <serialStatusReport()+0x328>
    46d4:	66 e6       	ldi	r22, 0x66	; 102
    46d6:	01 c0       	rjmp	.+2      	; 0x46da <serialStatusReport()+0x32a>
    46d8:	67 e7       	ldi	r22, 0x77	; 119
    46da:	8c e3       	ldi	r24, 0x3C	; 60
    46dc:	93 e0       	ldi	r25, 0x03	; 3
    46de:	0e 94 33 36 	call	0x6c66	; 0x6c66 <Print::print(char)>
//  // Show occupancy if known.
//  if(isLikelyOccupied()) { Serial.print(isLikelyRecentlyOccupied() ? 'O' : 'o'); } // Show room occupied and how recently.
#endif

  // *O* section: occopancy level if known; only show if some level of occupancy detected.
  const uint8_t occupancy = twoBitOccupancyValue();
    46e2:	0e 94 aa 07 	call	0xf54	; 0xf54 <twoBitOccupancyValue()>
    46e6:	18 2f       	mov	r17, r24
  if(occupancy > 1) { Serial.print(F(";O")); Serial.print(occupancy); }
    46e8:	82 30       	cpi	r24, 0x02	; 2
    46ea:	68 f0       	brcs	.+26     	; 0x4706 <serialStatusReport()+0x356>
    46ec:	8c e3       	ldi	r24, 0x3C	; 60
    46ee:	93 e0       	ldi	r25, 0x03	; 3
    46f0:	6b e4       	ldi	r22, 0x4B	; 75
    46f2:	74 e0       	ldi	r23, 0x04	; 4
    46f4:	0e 94 10 36 	call	0x6c20	; 0x6c20 <Print::print(__FlashStringHelper const*)>
    46f8:	8c e3       	ldi	r24, 0x3C	; 60
    46fa:	93 e0       	ldi	r25, 0x03	; 3
    46fc:	61 2f       	mov	r22, r17
    46fe:	4a e0       	ldi	r20, 0x0A	; 10
    4700:	50 e0       	ldi	r21, 0x00	; 0
    4702:	0e 94 0f 37 	call	0x6e1e	; 0x6e1e <Print::print(unsigned char, int)>

  // *C* section: central hub values.
#if defined(ENABLE_BOILER_HUB)
  // Print optional hub boiler-on-time section if apparently set (non-zero) and thus in hub mode.
  const uint8_t boilerOnMinutes = getMinBoilerOnMinutes();
    4706:	0e 94 a0 07 	call	0xf40	; 0xf40 <getMinBoilerOnMinutes()>
    470a:	18 2f       	mov	r17, r24
  if(boilerOnMinutes != 0)
    470c:	88 23       	and	r24, r24
    470e:	89 f0       	breq	.+34     	; 0x4732 <serialStatusReport()+0x382>
    {
    Serial.print(';'); // Terminate previous section.
    4710:	8c e3       	ldi	r24, 0x3C	; 60
    4712:	93 e0       	ldi	r25, 0x03	; 3
    4714:	6b e3       	ldi	r22, 0x3B	; 59
    4716:	0e 94 33 36 	call	0x6c66	; 0x6c66 <Print::print(char)>
    Serial.print('C'); // Indicate central hub mode available.
    471a:	8c e3       	ldi	r24, 0x3C	; 60
    471c:	93 e0       	ldi	r25, 0x03	; 3
    471e:	63 e4       	ldi	r22, 0x43	; 67
    4720:	0e 94 33 36 	call	0x6c66	; 0x6c66 <Print::print(char)>
    Serial.print(boilerOnMinutes); // Show min 'on' time, or zero if disabled.
    4724:	8c e3       	ldi	r24, 0x3C	; 60
    4726:	93 e0       	ldi	r25, 0x03	; 3
    4728:	61 2f       	mov	r22, r17
    472a:	4a e0       	ldi	r20, 0x0A	; 10
    472c:	50 e0       	ldi	r21, 0x00	; 0
    472e:	0e 94 0f 37 	call	0x6e1e	; 0x6e1e <Print::print(unsigned char, int)>
#endif

  // *H* section: house codes for local FHT8V valve and if syncing, iff set.
#if defined(USE_MODULE_FHT8VSIMPLE)
  // Print optional house code section if codes set.
  const uint8_t hc1 = FHT8VGetHC1();
    4732:	0e 94 b4 0c 	call	0x1968	; 0x1968 <FHT8VGetHC1()>
    4736:	18 2f       	mov	r17, r24
  if(hc1 != 255)
    4738:	8f 3f       	cpi	r24, 0xFF	; 255
    473a:	19 f1       	breq	.+70     	; 0x4782 <serialStatusReport()+0x3d2>
    {
    Serial.print(F(";HC"));
    473c:	8c e3       	ldi	r24, 0x3C	; 60
    473e:	93 e0       	ldi	r25, 0x03	; 3
    4740:	67 e4       	ldi	r22, 0x47	; 71
    4742:	74 e0       	ldi	r23, 0x04	; 4
    4744:	0e 94 10 36 	call	0x6c20	; 0x6c20 <Print::print(__FlashStringHelper const*)>
    Serial.print(hc1);
    4748:	8c e3       	ldi	r24, 0x3C	; 60
    474a:	93 e0       	ldi	r25, 0x03	; 3
    474c:	61 2f       	mov	r22, r17
    474e:	4a e0       	ldi	r20, 0x0A	; 10
    4750:	50 e0       	ldi	r21, 0x00	; 0
    4752:	0e 94 0f 37 	call	0x6e1e	; 0x6e1e <Print::print(unsigned char, int)>
    Serial_print_space();
    4756:	0e 94 c3 20 	call	0x4186	; 0x4186 <Serial_print_space()>
    Serial.print(FHT8VGetHC2());
    475a:	0e 94 bd 0c 	call	0x197a	; 0x197a <FHT8VGetHC2()>
    475e:	68 2f       	mov	r22, r24
    4760:	8c e3       	ldi	r24, 0x3C	; 60
    4762:	93 e0       	ldi	r25, 0x03	; 3
    4764:	4a e0       	ldi	r20, 0x0A	; 10
    4766:	50 e0       	ldi	r21, 0x00	; 0
    4768:	0e 94 0f 37 	call	0x6e1e	; 0x6e1e <Print::print(unsigned char, int)>
    if(!isSyncedWithFHT8V())
    476c:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <isSyncedWithFHT8V()>
    4770:	88 23       	and	r24, r24
    4772:	39 f4       	brne	.+14     	; 0x4782 <serialStatusReport()+0x3d2>
      {
      Serial_print_space();
    4774:	0e 94 c3 20 	call	0x4186	; 0x4186 <Serial_print_space()>
      Serial.print('s'); // Indicate syncing with trailing lower-case 's' in field...
    4778:	8c e3       	ldi	r24, 0x3C	; 60
    477a:	93 e0       	ldi	r25, 0x03	; 3
    477c:	63 e7       	ldi	r22, 0x73	; 115
    477e:	0e 94 33 36 	call	0x6c66	; 0x6c66 <Print::print(char)>
      }
    }
#endif

  // *M* section: min-valve-percentage open section, iff not at default value.
  const uint8_t minValvePcOpen = getMinValvePcReallyOpen();
    4782:	0e 94 1c 08 	call	0x1038	; 0x1038 <getMinValvePcReallyOpen()>
    4786:	18 2f       	mov	r17, r24
  if(DEFAULT_MIN_VALVE_PC_REALLY_OPEN != minValvePcOpen) { Serial.print(F(";M")); Serial.print(minValvePcOpen); }
    4788:	8a 30       	cpi	r24, 0x0A	; 10
    478a:	69 f0       	breq	.+26     	; 0x47a6 <serialStatusReport()+0x3f6>
    478c:	8c e3       	ldi	r24, 0x3C	; 60
    478e:	93 e0       	ldi	r25, 0x03	; 3
    4790:	64 e4       	ldi	r22, 0x44	; 68
    4792:	74 e0       	ldi	r23, 0x04	; 4
    4794:	0e 94 10 36 	call	0x6c20	; 0x6c20 <Print::print(__FlashStringHelper const*)>
    4798:	8c e3       	ldi	r24, 0x3C	; 60
    479a:	93 e0       	ldi	r25, 0x03	; 3
    479c:	61 2f       	mov	r22, r17
    479e:	4a e0       	ldi	r20, 0x0A	; 10
    47a0:	50 e0       	ldi	r21, 0x00	; 0
    47a2:	0e 94 0f 37 	call	0x6e1e	; 0x6e1e <Print::print(unsigned char, int)>

  // Terminate line.
  Serial.println();
    47a6:	8c e3       	ldi	r24, 0x3C	; 60
    47a8:	93 e0       	ldi	r25, 0x03	; 3
    47aa:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <Print::println()>

  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  flushSerialSCTSensitive();
    47ae:	0e 94 63 19 	call	0x32c6	; 0x32c6 <flushSerialSCTSensitive()>

  if(neededWaking) { powerDownSerial(); }
    47b2:	dd 20       	and	r13, r13
    47b4:	11 f0       	breq	.+4      	; 0x47ba <serialStatusReport()+0x40a>
    47b6:	0e 94 27 19 	call	0x324e	; 0x324e <powerDownSerial()>
  }
    47ba:	df 91       	pop	r29
    47bc:	cf 91       	pop	r28
    47be:	1f 91       	pop	r17
    47c0:	0f 91       	pop	r16
    47c2:	ff 90       	pop	r15
    47c4:	ef 90       	pop	r14
    47c6:	df 90       	pop	r13
    47c8:	08 95       	ret

000047ca <pollCLI(unsigned char)>:
#endif
// Used to poll user side for CLI input until specified sub-cycle time.
// A period of less than (say) 500ms will be difficult for direct human response on a raw terminal.
// A period of less than (say) 100ms is not recommended to avoid possibility of overrun on long interactions.
// NOT RENTRANT (eg uses static state for speed and code space).
void pollCLI(const uint8_t maxSCT)
    47ca:	bf 92       	push	r11
    47cc:	cf 92       	push	r12
    47ce:	df 92       	push	r13
    47d0:	ef 92       	push	r14
    47d2:	ff 92       	push	r15
    47d4:	0f 93       	push	r16
    47d6:	1f 93       	push	r17
    47d8:	df 93       	push	r29
    47da:	cf 93       	push	r28
    47dc:	00 d0       	rcall	.+0      	; 0x47de <pollCLI(unsigned char)+0x14>
    47de:	00 d0       	rcall	.+0      	; 0x47e0 <pollCLI(unsigned char)+0x16>
    47e0:	00 d0       	rcall	.+0      	; 0x47e2 <pollCLI(unsigned char)+0x18>
    47e2:	cd b7       	in	r28, 0x3d	; 61
    47e4:	de b7       	in	r29, 0x3e	; 62
    47e6:	d8 2e       	mov	r13, r24
  {
  // Compute safe limit time given granularity of sleep and buffer fill.
  const uint8_t targetMaxSCT = (maxSCT <= MIN_POLL_SCT) ? ((uint8_t) 0) : ((uint8_t) (maxSCT - 1 - MIN_POLL_SCT));
    47e8:	22 e0       	ldi	r18, 0x02	; 2
    47ea:	28 17       	cp	r18, r24
    47ec:	10 f0       	brcs	.+4      	; 0x47f2 <pollCLI(unsigned char)+0x28>
    47ee:	00 e0       	ldi	r16, 0x00	; 0
    47f0:	02 c0       	rjmp	.+4      	; 0x47f6 <pollCLI(unsigned char)+0x2c>
    47f2:	08 2f       	mov	r16, r24
    47f4:	03 50       	subi	r16, 0x03	; 3
  if(getSubCycleTime() >= targetMaxSCT) { return; } // Too short to try.
    47f6:	80 91 b2 00 	lds	r24, 0x00B2
    47fa:	80 17       	cp	r24, r16
    47fc:	08 f0       	brcs	.+2      	; 0x4800 <pollCLI(unsigned char)+0x36>
    47fe:	02 c3       	rjmp	.+1540   	; 0x4e04 <pollCLI(unsigned char)+0x63a>

  const bool neededWaking = powerUpSerialIfDisabled();
    4800:	0e 94 c4 19 	call	0x3388	; 0x3388 <powerUpSerialIfDisabled()>
    4804:	b8 2e       	mov	r11, r24
    4806:	04 c0       	rjmp	.+8      	; 0x4810 <pollCLI(unsigned char)+0x46>

  // Purge any stray pending input, such as a trailing LF from previous input.
  while(Serial.available() > 0) { Serial.read(); }
    4808:	8c e3       	ldi	r24, 0x3C	; 60
    480a:	93 e0       	ldi	r25, 0x03	; 3
    480c:	0e 94 08 35 	call	0x6a10	; 0x6a10 <HardwareSerial::read()>
    4810:	8c e3       	ldi	r24, 0x3C	; 60
    4812:	93 e0       	ldi	r25, 0x03	; 3
    4814:	0e 94 d7 34 	call	0x69ae	; 0x69ae <HardwareSerial::available()>
    4818:	18 16       	cp	r1, r24
    481a:	19 06       	cpc	r1, r25
    481c:	ac f3       	brlt	.-22     	; 0x4808 <pollCLI(unsigned char)+0x3e>

  // Generate and flush prompt character to the user, after a CRLF to reduce ambiguity.
  // Do this AFTER flushing the input so that sending command immediately after prompt should work.
  Serial.println();
    481e:	8c e3       	ldi	r24, 0x3C	; 60
    4820:	93 e0       	ldi	r25, 0x03	; 3
    4822:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <Print::println()>
  Serial.print(CLIPromptChar);
    4826:	8c e3       	ldi	r24, 0x3C	; 60
    4828:	93 e0       	ldi	r25, 0x03	; 3
    482a:	6e e3       	ldi	r22, 0x3E	; 62
    482c:	0e 94 33 36 	call	0x6c66	; 0x6c66 <Print::print(char)>
  // Idle a short while to try to save energy, waiting for serial TX end and possible RX response start.
  flushSerialSCTSensitive();
    4830:	0e 94 63 19 	call	0x32c6	; 0x32c6 <flushSerialSCTSensitive()>
    4834:	10 e0       	ldi	r17, 0x00	; 0
    // Idle waiting for input, to save power, then/else do something useful with some CPU cycles...
#if CAN_IDLE_30MS
    // Minimise power consumption leaving CPU/UART clock running, if no danger of RX overrun.
    // Don't do this too close to end of target end time to avoid missing it.
    // Note: may get woken on timer0 interrupts as well as RX and watchdog.
    if(sct < targetMaxSCT-2) { idle15AndPoll(); continue; }
    4836:	e0 2e       	mov	r14, r16
    4838:	ff 24       	eor	r15, r15
    483a:	8e ef       	ldi	r24, 0xFE	; 254
    483c:	9f ef       	ldi	r25, 0xFF	; 255
    483e:	e8 0e       	add	r14, r24
    4840:	f9 1e       	adc	r15, r25
#ifdef ENABLE_AVR_IDLE_MODE
// Idle productively polling I/O, etc, across the system while spending time in low-power mode if possible.
// Typically sleeps for nominally up to 30ms; tries to allow ealier wakeup if interrupt is received, etc.
// (Will often be prematurely woken by timer0 with ~16ms interval.)
// True iff watchdog timer expired; false if something else woke the CPU.
static bool inline idle15AndPoll() { const bool wd = idleCPU(WDTO_15MS); pollIO(!wd); return(wd); }
    4842:	cc 24       	eor	r12, r12
    4844:	c3 94       	inc	r12
  //Serial.setTimeout(timeoutms); const int n = Serial.readBytesUntil('\r', buf, MAXIMUM_CLI_RESPONSE_CHARS);
  uint8_t n = 0;
  while(n < MAXIMUM_CLI_RESPONSE_CHARS)
    {
    // Read next character if immediately available.
    if(Serial.available() > 0)
    4846:	8c e3       	ldi	r24, 0x3C	; 60
    4848:	93 e0       	ldi	r25, 0x03	; 3
    484a:	0e 94 d7 34 	call	0x69ae	; 0x69ae <HardwareSerial::available()>
    484e:	18 16       	cp	r1, r24
    4850:	19 06       	cpc	r1, r25
    4852:	0c f0       	brlt	.+2      	; 0x4856 <pollCLI(unsigned char)+0x8c>
    4854:	43 c0       	rjmp	.+134    	; 0x48dc <pollCLI(unsigned char)+0x112>
      {
      int ic = Serial.read();
    4856:	8c e3       	ldi	r24, 0x3C	; 60
    4858:	93 e0       	ldi	r25, 0x03	; 3
    485a:	0e 94 08 35 	call	0x6a10	; 0x6a10 <HardwareSerial::read()>
    485e:	bc 01       	movw	r22, r24
      if(('\r' == ic) || ('\n' == ic)) { break; } // Stop at CR, eg from CRLF, or LF.
    4860:	8d 30       	cpi	r24, 0x0D	; 13
    4862:	91 05       	cpc	r25, r1
    4864:	09 f4       	brne	.+2      	; 0x4868 <pollCLI(unsigned char)+0x9e>
    4866:	50 c0       	rjmp	.+160    	; 0x4908 <pollCLI(unsigned char)+0x13e>
    4868:	8a 30       	cpi	r24, 0x0A	; 10
    486a:	91 05       	cpc	r25, r1
    486c:	09 f4       	brne	.+2      	; 0x4870 <pollCLI(unsigned char)+0xa6>
    486e:	4c c0       	rjmp	.+152    	; 0x4908 <pollCLI(unsigned char)+0x13e>
#ifdef CLI_INTERACTIVE_ECHO
      if(('\b' == ic) || (127 == ic))
    4870:	88 30       	cpi	r24, 0x08	; 8
    4872:	91 05       	cpc	r25, r1
    4874:	19 f0       	breq	.+6      	; 0x487c <pollCLI(unsigned char)+0xb2>
    4876:	8f 37       	cpi	r24, 0x7F	; 127
    4878:	91 05       	cpc	r25, r1
    487a:	99 f4       	brne	.+38     	; 0x48a2 <pollCLI(unsigned char)+0xd8>
        {
        // Handle backspace or delete as delete...
        if(n > 0) // Ignore unless something to delete...
    487c:	11 23       	and	r17, r17
    487e:	19 f3       	breq	.-58     	; 0x4846 <pollCLI(unsigned char)+0x7c>
          {
          Serial.print('\b');
    4880:	8c e3       	ldi	r24, 0x3C	; 60
    4882:	93 e0       	ldi	r25, 0x03	; 3
    4884:	68 e0       	ldi	r22, 0x08	; 8
    4886:	0e 94 33 36 	call	0x6c66	; 0x6c66 <Print::print(char)>
          Serial.print(' ');
    488a:	8c e3       	ldi	r24, 0x3C	; 60
    488c:	93 e0       	ldi	r25, 0x03	; 3
    488e:	60 e2       	ldi	r22, 0x20	; 32
    4890:	0e 94 33 36 	call	0x6c66	; 0x6c66 <Print::print(char)>
          Serial.print('\b');
    4894:	8c e3       	ldi	r24, 0x3C	; 60
    4896:	93 e0       	ldi	r25, 0x03	; 3
    4898:	68 e0       	ldi	r22, 0x08	; 8
    489a:	0e 94 33 36 	call	0x6c66	; 0x6c66 <Print::print(char)>
          --n;
    489e:	11 50       	subi	r17, 0x01	; 1
    48a0:	2f c0       	rjmp	.+94     	; 0x4900 <pollCLI(unsigned char)+0x136>
          }
        continue;
        }
#endif
      if((ic < 32) || (ic > 126)) { continue; } // Drop bogus characters.
    48a2:	80 97       	sbiw	r24, 0x20	; 32
    48a4:	8f 35       	cpi	r24, 0x5F	; 95
    48a6:	91 05       	cpc	r25, r1
    48a8:	58 f5       	brcc	.+86     	; 0x4900 <pollCLI(unsigned char)+0x136>
      // Ignore any leading char that is not a letter (or '?'),
      // and force leading (command) char to upper case.
      if(0 == n)
    48aa:	11 23       	and	r17, r17
    48ac:	61 f4       	brne	.+24     	; 0x48c6 <pollCLI(unsigned char)+0xfc>
        {
        ic = toupper(ic);
    48ae:	cb 01       	movw	r24, r22
    48b0:	0e 94 65 39 	call	0x72ca	; 0x72ca <toupper>
    48b4:	bc 01       	movw	r22, r24
        if(('?' != ic) && ((ic < 'A') || (ic > 'Z'))) { continue; }
    48b6:	8f 33       	cpi	r24, 0x3F	; 63
    48b8:	91 05       	cpc	r25, r1
    48ba:	29 f0       	breq	.+10     	; 0x48c6 <pollCLI(unsigned char)+0xfc>
    48bc:	81 54       	subi	r24, 0x41	; 65
    48be:	90 40       	sbci	r25, 0x00	; 0
    48c0:	4a 97       	sbiw	r24, 0x1a	; 26
    48c2:	08 f0       	brcs	.+2      	; 0x48c6 <pollCLI(unsigned char)+0xfc>
    48c4:	c0 cf       	rjmp	.-128    	; 0x4846 <pollCLI(unsigned char)+0x7c>
        }
      // Store the incoming char.
      buf[n++] = (char) ic;
    48c6:	e1 2f       	mov	r30, r17
    48c8:	f0 e0       	ldi	r31, 0x00	; 0
    48ca:	e4 52       	subi	r30, 0x24	; 36
    48cc:	fe 4f       	sbci	r31, 0xFE	; 254
    48ce:	60 83       	st	Z, r22
    48d0:	1f 5f       	subi	r17, 0xFF	; 255
#ifdef CLI_INTERACTIVE_ECHO
      Serial.print((char) ic); // Echo immediately.
    48d2:	8c e3       	ldi	r24, 0x3C	; 60
    48d4:	93 e0       	ldi	r25, 0x03	; 3
    48d6:	0e 94 33 36 	call	0x6c66	; 0x6c66 <Print::print(char)>
    48da:	12 c0       	rjmp	.+36     	; 0x4900 <pollCLI(unsigned char)+0x136>
#endif
      continue;
      }
    // Quit WITHOUT PROCESSING THE POSSIBLY-INCOMPLETE INPUT if time limit is hit (or very close).
    const uint8_t sct = getSubCycleTime();
    48dc:	80 91 b2 00 	lds	r24, 0x00B2
    if(sct >= targetMaxSCT)
    48e0:	80 17       	cp	r24, r16
    48e2:	08 f0       	brcs	.+2      	; 0x48e6 <pollCLI(unsigned char)+0x11c>
    48e4:	79 c2       	rjmp	.+1266   	; 0x4dd8 <pollCLI(unsigned char)+0x60e>
    // Idle waiting for input, to save power, then/else do something useful with some CPU cycles...
#if CAN_IDLE_30MS
    // Minimise power consumption leaving CPU/UART clock running, if no danger of RX overrun.
    // Don't do this too close to end of target end time to avoid missing it.
    // Note: may get woken on timer0 interrupts as well as RX and watchdog.
    if(sct < targetMaxSCT-2) { idle15AndPoll(); continue; }
    48e6:	90 e0       	ldi	r25, 0x00	; 0
    48e8:	8e 15       	cp	r24, r14
    48ea:	9f 05       	cpc	r25, r15
    48ec:	3c f4       	brge	.+14     	; 0x48fc <pollCLI(unsigned char)+0x132>
    48ee:	80 e0       	ldi	r24, 0x00	; 0
    48f0:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <idleCPU(signed char)>
    48f4:	8c 25       	eor	r24, r12
    48f6:	0e 94 7c 28 	call	0x50f8	; 0x50f8 <pollIO(bool)>
    48fa:	02 c0       	rjmp	.+4      	; 0x4900 <pollCLI(unsigned char)+0x136>
#endif
    burnHundredsOfCyclesProductivelyAndPoll(); // Use time time to poll for I/O, etc.
    48fc:	0e 94 41 19 	call	0x3282	; 0x3282 <burnHundredsOfCyclesProductivelyAndPoll()>
  // Read a line up to a terminating CR, either on its own or as part of CRLF.
  // (Note that command content and timing may be useful to fold into PRNG entropy pool.)
  static char buf[MAXIMUM_CLI_RESPONSE_CHARS+1]; // Note: static state, efficient for small command lines.  Space for terminating '\0'.
  //Serial.setTimeout(timeoutms); const int n = Serial.readBytesUntil('\r', buf, MAXIMUM_CLI_RESPONSE_CHARS);
  uint8_t n = 0;
  while(n < MAXIMUM_CLI_RESPONSE_CHARS)
    4900:	19 30       	cpi	r17, 0x09	; 9
    4902:	08 f4       	brcc	.+2      	; 0x4906 <pollCLI(unsigned char)+0x13c>
    4904:	a0 cf       	rjmp	.-192    	; 0x4846 <pollCLI(unsigned char)+0x7c>
    4906:	03 c0       	rjmp	.+6      	; 0x490e <pollCLI(unsigned char)+0x144>
    if(sct < targetMaxSCT-2) { idle15AndPoll(); continue; }
#endif
    burnHundredsOfCyclesProductivelyAndPoll(); // Use time time to poll for I/O, etc.
    }

  if(n > 0)
    4908:	11 23       	and	r17, r17
    490a:	09 f4       	brne	.+2      	; 0x490e <pollCLI(unsigned char)+0x144>
    490c:	65 c2       	rjmp	.+1226   	; 0x4dd8 <pollCLI(unsigned char)+0x60e>
    {
    // Restart the CLI timer on receipt of plausible (ASCII) input (cf noise from UART floating or starting up),
    // Else print a very brief low-CPU-cost help message and give up as efficiently and safely and quickly as possible.
    const char firstChar = buf[0];
    const bool plausibleCommand = ((firstChar >= '?') && (firstChar <= 'z'));
    if(plausibleCommand) { resetCLIActiveTimer(); }
    490e:	80 91 dc 01 	lds	r24, 0x01DC
    4912:	8f 53       	subi	r24, 0x3F	; 63
    4914:	8c 33       	cpi	r24, 0x3C	; 60
    4916:	08 f5       	brcc	.+66     	; 0x495a <pollCLI(unsigned char)+0x190>
// Starts up with full value to allow easy set of time, etc, without specially activating CLI.
#define CLI_DEFAULT_TIMEOUT_M 2
static uint8_t CLITimeoutM = CLI_DEFAULT_TIMEOUT_M;

// Reset CLI active timer to the full whack before it goes inactive again (ie makes CLI active for a while).
static void resetCLIActiveTimer() { CLITimeoutM = CLI_DEFAULT_TIMEOUT_M; }
    4918:	82 e0       	ldi	r24, 0x02	; 2
    491a:	80 93 05 01 	sts	0x0105, r24
      if(neededWaking) { powerDownSerial(); }
      return;
      }

    // Null-terminate the received command line.
    buf[n] = '\0';
    491e:	e1 2f       	mov	r30, r17
    4920:	f0 e0       	ldi	r31, 0x00	; 0
    4922:	e4 52       	subi	r30, 0x24	; 36
    4924:	fe 4f       	sbci	r31, 0xFE	; 254
    4926:	10 82       	st	Z, r1

    // strupr(buf); // Force to upper-case
#ifdef CLI_INTERACTIVE_ECHO
    Serial.println(); // ACK user's end-of-line.
    4928:	8c e3       	ldi	r24, 0x3C	; 60
    492a:	93 e0       	ldi	r25, 0x03	; 3
    492c:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <Print::println()>
    Serial.println(buf); // Echo the line received (asynchronously).
#endif

    // Process the input received, with action based on the first char...
    bool showStatus = true; // Default to showing status.
    switch(buf[0])
    4930:	80 91 dc 01 	lds	r24, 0x01DC
    4934:	99 27       	eor	r25, r25
    4936:	87 fd       	sbrc	r24, 7
    4938:	90 95       	com	r25
    493a:	a9 2f       	mov	r26, r25
    493c:	b9 2f       	mov	r27, r25
    493e:	fc 01       	movw	r30, r24
    4940:	e3 54       	subi	r30, 0x43	; 67
    4942:	f0 40       	sbci	r31, 0x00	; 0
    4944:	e8 31       	cpi	r30, 0x18	; 24
    4946:	f1 05       	cpc	r31, r1
    4948:	68 f4       	brcc	.+26     	; 0x4964 <pollCLI(unsigned char)+0x19a>
    494a:	ec 5c       	subi	r30, 0xCC	; 204
    494c:	ff 4f       	sbci	r31, 0xFF	; 255
    494e:	ee 0f       	add	r30, r30
    4950:	ff 1f       	adc	r31, r31
    4952:	05 90       	lpm	r0, Z+
    4954:	f4 91       	lpm	r31, Z+
    4956:	e0 2d       	mov	r30, r0
    4958:	09 94       	ijmp
    const char firstChar = buf[0];
    const bool plausibleCommand = ((firstChar >= '?') && (firstChar <= 'z'));
    if(plausibleCommand) { resetCLIActiveTimer(); }
    else
      {
      Serial.println(F("? for CLI help"));
    495a:	8c e3       	ldi	r24, 0x3C	; 60
    495c:	93 e0       	ldi	r25, 0x03	; 3
    495e:	6f e3       	ldi	r22, 0x3F	; 63
    4960:	72 e0       	ldi	r23, 0x02	; 2
    4962:	37 c2       	rjmp	.+1134   	; 0x4dd2 <pollCLI(unsigned char)+0x608>
    bool showStatus = true; // Default to showing status.
    switch(buf[0])
      {
      // Explicit request for help, or unrecognised first character.
      // Avoid showing status as may already be rather a lot of output.
      default: case '?': { dumpCLIUsage(maxSCT); showStatus = false; break; }
    4964:	8d 2d       	mov	r24, r13
    4966:	0e 94 20 21 	call	0x4240	; 0x4240 <dumpCLIUsage(unsigned char)>
    496a:	2f c2       	rjmp	.+1118   	; 0x4dca <pollCLI(unsigned char)+0x600>
      case 'C':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 3 character sequence makes sense and is safe to tokenise, eg "C 0".
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    496c:	13 30       	cpi	r17, 0x03	; 3
    496e:	08 f4       	brcc	.+2      	; 0x4972 <pollCLI(unsigned char)+0x1a8>
    4970:	46 c2       	rjmp	.+1164   	; 0x4dfe <pollCLI(unsigned char)+0x634>
    4972:	8e ed       	ldi	r24, 0xDE	; 222
    4974:	91 e0       	ldi	r25, 0x01	; 1
    4976:	60 e0       	ldi	r22, 0x00	; 0
    4978:	71 e0       	ldi	r23, 0x01	; 1
    497a:	ae 01       	movw	r20, r28
    497c:	4f 5f       	subi	r20, 0xFF	; 255
    497e:	5f 4f       	sbci	r21, 0xFF	; 255
    4980:	0e 94 19 04 	call	0x832	; 0x832 <strtok_r>
    4984:	00 97       	sbiw	r24, 0x00	; 0
    4986:	09 f4       	brne	.+2      	; 0x498a <pollCLI(unsigned char)+0x1c0>
    4988:	3a c2       	rjmp	.+1140   	; 0x4dfe <pollCLI(unsigned char)+0x634>
          {
          const uint8_t m = (uint8_t) atoi(tok1);
    498a:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <atoi>
          setMinBoilerOnMinutes(m);
    498e:	0e 94 d6 08 	call	0x11ac	; 0x11ac <setMinBoilerOnMinutes(unsigned char)>
    4992:	35 c2       	rjmp	.+1130   	; 0x4dfe <pollCLI(unsigned char)+0x634>
        break;
        }
#endif

      // Exit/deactivate CLI immediately.
      case 'E': { CLITimeoutM = 0; break; }
    4994:	10 92 05 01 	sts	0x0105, r1
    4998:	32 c2       	rjmp	.+1124   	; 0x4dfe <pollCLI(unsigned char)+0x634>
      case 'R':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 3 character sequence makes sense and is safe to tokenise, eg "R 0".
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    499a:	13 30       	cpi	r17, 0x03	; 3
    499c:	08 f4       	brcc	.+2      	; 0x49a0 <pollCLI(unsigned char)+0x1d6>
    499e:	2f c2       	rjmp	.+1118   	; 0x4dfe <pollCLI(unsigned char)+0x634>
    49a0:	8e ed       	ldi	r24, 0xDE	; 222
    49a2:	91 e0       	ldi	r25, 0x01	; 1
    49a4:	60 e0       	ldi	r22, 0x00	; 0
    49a6:	71 e0       	ldi	r23, 0x01	; 1
    49a8:	ae 01       	movw	r20, r28
    49aa:	4f 5f       	subi	r20, 0xFF	; 255
    49ac:	5f 4f       	sbci	r21, 0xFF	; 255
    49ae:	0e 94 19 04 	call	0x832	; 0x832 <strtok_r>
    49b2:	00 97       	sbiw	r24, 0x00	; 0
    49b4:	09 f4       	brne	.+2      	; 0x49b8 <pollCLI(unsigned char)+0x1ee>
    49b6:	23 c2       	rjmp	.+1094   	; 0x4dfe <pollCLI(unsigned char)+0x634>
          {
          const uint8_t setN = (uint8_t) atoi(tok1);
    49b8:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <atoi>
    49bc:	08 2f       	mov	r16, r24
    49be:	10 e0       	ldi	r17, 0x00	; 0
          for(uint8_t hh = 0; hh < 24; ++hh)
            { Serial.print(getByHourStat(hh, setN)); Serial_print_space(); }
    49c0:	81 2f       	mov	r24, r17
    49c2:	60 2f       	mov	r22, r16
    49c4:	0e 94 ba 07 	call	0xf74	; 0xf74 <getByHourStat(unsigned char, unsigned char)>
    49c8:	68 2f       	mov	r22, r24
    49ca:	8c e3       	ldi	r24, 0x3C	; 60
    49cc:	93 e0       	ldi	r25, 0x03	; 3
    49ce:	4a e0       	ldi	r20, 0x0A	; 10
    49d0:	50 e0       	ldi	r21, 0x00	; 0
    49d2:	0e 94 0f 37 	call	0x6e1e	; 0x6e1e <Print::print(unsigned char, int)>
    49d6:	0e 94 c3 20 	call	0x4186	; 0x4186 <Serial_print_space()>
        char *tok1;
        // Minimum 3 character sequence makes sense and is safe to tokenise, eg "R 0".
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
          {
          const uint8_t setN = (uint8_t) atoi(tok1);
          for(uint8_t hh = 0; hh < 24; ++hh)
    49da:	1f 5f       	subi	r17, 0xFF	; 255
    49dc:	18 31       	cpi	r17, 0x18	; 24
    49de:	81 f7       	brne	.-32     	; 0x49c0 <pollCLI(unsigned char)+0x1f6>
    49e0:	74 c1       	rjmp	.+744    	; 0x4cca <pollCLI(unsigned char)+0x500>
      case 'D':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 3 character sequence makes sense and is safe to tokenise, eg "D 0".
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    49e2:	13 30       	cpi	r17, 0x03	; 3
    49e4:	08 f4       	brcc	.+2      	; 0x49e8 <pollCLI(unsigned char)+0x21e>
    49e6:	f1 c1       	rjmp	.+994    	; 0x4dca <pollCLI(unsigned char)+0x600>
    49e8:	8e ed       	ldi	r24, 0xDE	; 222
    49ea:	91 e0       	ldi	r25, 0x01	; 1
    49ec:	60 e0       	ldi	r22, 0x00	; 0
    49ee:	71 e0       	ldi	r23, 0x01	; 1
    49f0:	ae 01       	movw	r20, r28
    49f2:	4f 5f       	subi	r20, 0xFF	; 255
    49f4:	5f 4f       	sbci	r21, 0xFF	; 255
    49f6:	0e 94 19 04 	call	0x832	; 0x832 <strtok_r>
    49fa:	00 97       	sbiw	r24, 0x00	; 0
    49fc:	09 f4       	brne	.+2      	; 0x4a00 <pollCLI(unsigned char)+0x236>
    49fe:	e5 c1       	rjmp	.+970    	; 0x4dca <pollCLI(unsigned char)+0x600>
          {
          const uint8_t setN = (uint8_t) atoi(tok1);
    4a00:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <atoi>
    4a04:	08 2f       	mov	r16, r24
          const uint8_t thisHH = getHoursLT();
    4a06:	0e 94 c7 1c 	call	0x398e	; 0x398e <getHoursLT()>
          const uint8_t lastHH = (thisHH > 0) ? (thisHH-1) : 23;
    4a0a:	88 23       	and	r24, r24
    4a0c:	19 f4       	brne	.+6      	; 0x4a14 <pollCLI(unsigned char)+0x24a>
    4a0e:	f7 e1       	ldi	r31, 0x17	; 23
    4a10:	ff 2e       	mov	r15, r31
    4a12:	02 c0       	rjmp	.+4      	; 0x4a18 <pollCLI(unsigned char)+0x24e>
    4a14:	f8 2e       	mov	r15, r24
    4a16:	fa 94       	dec	r15
    4a18:	10 e0       	ldi	r17, 0x00	; 0
          for(uint8_t hh = 0; hh < 24; ++hh)
            {
            const uint8_t statRaw = getByHourStat(hh, setN);
    4a1a:	81 2f       	mov	r24, r17
    4a1c:	60 2f       	mov	r22, r16
    4a1e:	0e 94 ba 07 	call	0xf74	; 0xf74 <getByHourStat(unsigned char, unsigned char)>
    4a22:	68 2f       	mov	r22, r24
            // For unset stat show '-'...
            if(STATS_UNSET_BYTE == statRaw) { Serial.print('-'); }
    4a24:	8f 3f       	cpi	r24, 0xFF	; 255
    4a26:	21 f4       	brne	.+8      	; 0x4a30 <pollCLI(unsigned char)+0x266>
    4a28:	8c e3       	ldi	r24, 0x3C	; 60
    4a2a:	93 e0       	ldi	r25, 0x03	; 3
    4a2c:	6d e2       	ldi	r22, 0x2D	; 45
    4a2e:	1b c0       	rjmp	.+54     	; 0x4a66 <pollCLI(unsigned char)+0x29c>
            // ...else print more human-friendly version of stat.
            else switch(setN) // Relationship between stats set and type should probably be centralised to avoid getting out of sync with usage.
    4a30:	04 30       	cpi	r16, 0x04	; 4
    4a32:	18 f4       	brcc	.+6      	; 0x4a3a <pollCLI(unsigned char)+0x270>
    4a34:	02 30       	cpi	r16, 0x02	; 2
    4a36:	d0 f4       	brcc	.+52     	; 0x4a6c <pollCLI(unsigned char)+0x2a2>
    4a38:	03 c0       	rjmp	.+6      	; 0x4a40 <pollCLI(unsigned char)+0x276>
    4a3a:	04 30       	cpi	r16, 0x04	; 4
    4a3c:	49 f5       	brne	.+82     	; 0x4a90 <pollCLI(unsigned char)+0x2c6>
    4a3e:	22 c0       	rjmp	.+68     	; 0x4a84 <pollCLI(unsigned char)+0x2ba>
              {
              case 0: case 1: { Serial.print((expandTempC16(statRaw)+8) >> 4); Serial.print('C'); break; } // Uncompanded temperature, rounded.
    4a40:	0e 94 f9 07 	call	0xff2	; 0xff2 <expandTempC16(unsigned char)>
    4a44:	bc 01       	movw	r22, r24
    4a46:	68 5f       	subi	r22, 0xF8	; 248
    4a48:	7f 4f       	sbci	r23, 0xFF	; 255
    4a4a:	e4 e0       	ldi	r30, 0x04	; 4
    4a4c:	75 95       	asr	r23
    4a4e:	67 95       	ror	r22
    4a50:	ea 95       	dec	r30
    4a52:	e1 f7       	brne	.-8      	; 0x4a4c <pollCLI(unsigned char)+0x282>
    4a54:	8c e3       	ldi	r24, 0x3C	; 60
    4a56:	93 e0       	ldi	r25, 0x03	; 3
    4a58:	4a e0       	ldi	r20, 0x0A	; 10
    4a5a:	50 e0       	ldi	r21, 0x00	; 0
    4a5c:	0e 94 61 37 	call	0x6ec2	; 0x6ec2 <Print::print(int, int)>
    4a60:	8c e3       	ldi	r24, 0x3C	; 60
    4a62:	93 e0       	ldi	r25, 0x03	; 3
    4a64:	63 e4       	ldi	r22, 0x43	; 67
    4a66:	0e 94 33 36 	call	0x6c66	; 0x6c66 <Print::print(char)>
    4a6a:	12 c0       	rjmp	.+36     	; 0x4a90 <pollCLI(unsigned char)+0x2c6>
              case 2: case 3: { Serial.print(((int)statRaw) << 2); break; } // Uncompressed ambient light level.
    4a6c:	70 e0       	ldi	r23, 0x00	; 0
    4a6e:	66 0f       	add	r22, r22
    4a70:	77 1f       	adc	r23, r23
    4a72:	66 0f       	add	r22, r22
    4a74:	77 1f       	adc	r23, r23
    4a76:	8c e3       	ldi	r24, 0x3C	; 60
    4a78:	93 e0       	ldi	r25, 0x03	; 3
    4a7a:	4a e0       	ldi	r20, 0x0A	; 10
    4a7c:	50 e0       	ldi	r21, 0x00	; 0
    4a7e:	0e 94 61 37 	call	0x6ec2	; 0x6ec2 <Print::print(int, int)>
    4a82:	06 c0       	rjmp	.+12     	; 0x4a90 <pollCLI(unsigned char)+0x2c6>
              case 4: { Serial.print(statRaw, HEX); break; } // Warm mode usage over week.
    4a84:	8c e3       	ldi	r24, 0x3C	; 60
    4a86:	93 e0       	ldi	r25, 0x03	; 3
    4a88:	40 e1       	ldi	r20, 0x10	; 16
    4a8a:	50 e0       	ldi	r21, 0x00	; 0
    4a8c:	0e 94 0f 37 	call	0x6e1e	; 0x6e1e <Print::print(unsigned char, int)>
              }
            if(hh == lastHH) { Serial.print('<'); } // Highlight most recent stat in this set.
    4a90:	1f 15       	cp	r17, r15
    4a92:	29 f4       	brne	.+10     	; 0x4a9e <pollCLI(unsigned char)+0x2d4>
    4a94:	8c e3       	ldi	r24, 0x3C	; 60
    4a96:	93 e0       	ldi	r25, 0x03	; 3
    4a98:	6c e3       	ldi	r22, 0x3C	; 60
    4a9a:	0e 94 33 36 	call	0x6c66	; 0x6c66 <Print::print(char)>
            Serial_print_space();
    4a9e:	0e 94 c3 20 	call	0x4186	; 0x4186 <Serial_print_space()>
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
          {
          const uint8_t setN = (uint8_t) atoi(tok1);
          const uint8_t thisHH = getHoursLT();
          const uint8_t lastHH = (thisHH > 0) ? (thisHH-1) : 23;
          for(uint8_t hh = 0; hh < 24; ++hh)
    4aa2:	1f 5f       	subi	r17, 0xFF	; 255
    4aa4:	18 31       	cpi	r17, 0x18	; 24
    4aa6:	09 f0       	breq	.+2      	; 0x4aaa <pollCLI(unsigned char)+0x2e0>
    4aa8:	b8 cf       	rjmp	.-144    	; 0x4a1a <pollCLI(unsigned char)+0x250>
              case 4: { Serial.print(statRaw, HEX); break; } // Warm mode usage over week.
              }
            if(hh == lastHH) { Serial.print('<'); } // Highlight most recent stat in this set.
            Serial_print_space();
            }
          Serial.println();
    4aaa:	8c e3       	ldi	r24, 0x3C	; 60
    4aac:	93 e0       	ldi	r25, 0x03	; 3
    4aae:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <Print::println()>
    4ab2:	8b c1       	rjmp	.+790    	; 0x4dca <pollCLI(unsigned char)+0x600>

// Has the effect of forcing the warm mode to the specified state immediately.
// If forcing to FROST mode then any pending BAKE time is cancelled.
static void setWarmMode(const bool warm)
  {
  isWarmMode = warm;
    4ab4:	10 92 e7 01 	sts	0x01E7, r1
  isWarmModeDebounced = warm;
    4ab8:	10 92 e6 01 	sts	0x01E6, r1
    4abc:	41 c1       	rjmp	.+642    	; 0x4d40 <pollCLI(unsigned char)+0x576>
      case 'H':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 5 character sequence makes sense and is safe to tokenise, eg "H 1 2".
        if((n >= 5) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    4abe:	15 30       	cpi	r17, 0x05	; 5
    4ac0:	08 f4       	brcc	.+2      	; 0x4ac4 <pollCLI(unsigned char)+0x2fa>
    4ac2:	95 c1       	rjmp	.+810    	; 0x4dee <pollCLI(unsigned char)+0x624>
    4ac4:	8e ed       	ldi	r24, 0xDE	; 222
    4ac6:	91 e0       	ldi	r25, 0x01	; 1
    4ac8:	60 e0       	ldi	r22, 0x00	; 0
    4aca:	71 e0       	ldi	r23, 0x01	; 1
    4acc:	6e 01       	movw	r12, r28
    4ace:	08 94       	sec
    4ad0:	c1 1c       	adc	r12, r1
    4ad2:	d1 1c       	adc	r13, r1
    4ad4:	a6 01       	movw	r20, r12
    4ad6:	0e 94 19 04 	call	0x832	; 0x832 <strtok_r>
    4ada:	7c 01       	movw	r14, r24
    4adc:	00 97       	sbiw	r24, 0x00	; 0
    4ade:	09 f4       	brne	.+2      	; 0x4ae2 <pollCLI(unsigned char)+0x318>
    4ae0:	86 c1       	rjmp	.+780    	; 0x4dee <pollCLI(unsigned char)+0x624>
          {
          char *tok2 = strtok_r(NULL, " ", &last);
    4ae2:	80 e0       	ldi	r24, 0x00	; 0
    4ae4:	90 e0       	ldi	r25, 0x00	; 0
    4ae6:	60 e0       	ldi	r22, 0x00	; 0
    4ae8:	71 e0       	ldi	r23, 0x01	; 1
    4aea:	a6 01       	movw	r20, r12
    4aec:	0e 94 19 04 	call	0x832	; 0x832 <strtok_r>
    4af0:	8c 01       	movw	r16, r24
          if(NULL != tok2)
    4af2:	00 97       	sbiw	r24, 0x00	; 0
    4af4:	09 f4       	brne	.+2      	; 0x4af8 <pollCLI(unsigned char)+0x32e>
    4af6:	83 c1       	rjmp	.+774    	; 0x4dfe <pollCLI(unsigned char)+0x634>
            {
            const int hc1 = atoi(tok1);
    4af8:	c7 01       	movw	r24, r14
    4afa:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <atoi>
    4afe:	7c 01       	movw	r14, r24
            const int hc2 = atoi(tok2);
    4b00:	c8 01       	movw	r24, r16
    4b02:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <atoi>
    4b06:	8c 01       	movw	r16, r24
            if((hc1 < 0) || (hc1 > 99) || (hc2 < 0) || (hc2 > 99)) { InvalidIgnored(); }
    4b08:	94 e6       	ldi	r25, 0x64	; 100
    4b0a:	e9 16       	cp	r14, r25
    4b0c:	f1 04       	cpc	r15, r1
    4b0e:	08 f0       	brcs	.+2      	; 0x4b12 <pollCLI(unsigned char)+0x348>
    4b10:	0c c1       	rjmp	.+536    	; 0x4d2a <pollCLI(unsigned char)+0x560>
    4b12:	17 fd       	sbrc	r17, 7
    4b14:	0a c1       	rjmp	.+532    	; 0x4d2a <pollCLI(unsigned char)+0x560>
    4b16:	04 36       	cpi	r16, 0x64	; 100
    4b18:	11 05       	cpc	r17, r1
    4b1a:	0c f0       	brlt	.+2      	; 0x4b1e <pollCLI(unsigned char)+0x354>
    4b1c:	06 c1       	rjmp	.+524    	; 0x4d2a <pollCLI(unsigned char)+0x560>
            else
              {
              FHT8VSetHC1(hc1);
    4b1e:	8e 2d       	mov	r24, r14
    4b20:	0e 94 26 10 	call	0x204c	; 0x204c <FHT8VSetHC1(unsigned char)>
              FHT8VSetHC2(hc2);
    4b24:	80 2f       	mov	r24, r16
    4b26:	0e 94 20 10 	call	0x2040	; 0x2040 <FHT8VSetHC2(unsigned char)>
    4b2a:	02 c0       	rjmp	.+4      	; 0x4b30 <pollCLI(unsigned char)+0x366>
              }
            }
          }
        else if(n < 2) // Just 'H', possibly with trailing whitespace.
          {
          FHT8VClearHC();
    4b2c:	0e 94 2c 10 	call	0x2058	; 0x2058 <FHT8VClearHC()>
          FHT8VSyncAndTXReset(); // Force into unsynchronized state.
    4b30:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <FHT8VSyncAndTXReset()>
    4b34:	64 c1       	rjmp	.+712    	; 0x4dfe <pollCLI(unsigned char)+0x634>

      // Set new random ID.
      // Should possibly restart afterwards.
      case 'I':
        {
        ensureIDCreated(true); // Force ID.
    4b36:	81 e0       	ldi	r24, 0x01	; 1
    4b38:	0e 94 c8 12 	call	0x2590	; 0x2590 <ensureIDCreated(bool)>
    4b3c:	60 c1       	rjmp	.+704    	; 0x4dfe <pollCLI(unsigned char)+0x634>
        int s = 0;
//#if MAX_SIMPLE_SCHEDULES > 1
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 3 character sequence makes sense and is safe to tokenise, eg "L 0".
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    4b3e:	13 30       	cpi	r17, 0x03	; 3
    4b40:	08 f4       	brcc	.+2      	; 0x4b44 <pollCLI(unsigned char)+0x37a>
    4b42:	58 c1       	rjmp	.+688    	; 0x4df4 <pollCLI(unsigned char)+0x62a>
    4b44:	8e ed       	ldi	r24, 0xDE	; 222
    4b46:	91 e0       	ldi	r25, 0x01	; 1
    4b48:	60 e0       	ldi	r22, 0x00	; 0
    4b4a:	71 e0       	ldi	r23, 0x01	; 1
    4b4c:	ae 01       	movw	r20, r28
    4b4e:	4f 5f       	subi	r20, 0xFF	; 255
    4b50:	5f 4f       	sbci	r21, 0xFF	; 255
    4b52:	0e 94 19 04 	call	0x832	; 0x832 <strtok_r>
    4b56:	00 97       	sbiw	r24, 0x00	; 0
    4b58:	09 f4       	brne	.+2      	; 0x4b5c <pollCLI(unsigned char)+0x392>
    4b5a:	4c c1       	rjmp	.+664    	; 0x4df4 <pollCLI(unsigned char)+0x62a>
          {
          s = atoi(tok1);
    4b5c:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <atoi>
          }
//#endif
        handleLEARN((uint8_t) s); break;
    4b60:	0e 94 c7 21 	call	0x438e	; 0x438e <handleLEARN(unsigned char)>
    4b64:	4c c1       	rjmp	.+664    	; 0x4dfe <pollCLI(unsigned char)+0x634>
      case 'O':
        {
        uint8_t minPcOpen = 0; // Will clear override and use default threshold.
        char *last; // Used by strtok_r().
        char *tok1;
        if((n > 1) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    4b66:	12 30       	cpi	r17, 0x02	; 2
    4b68:	08 f4       	brcc	.+2      	; 0x4b6c <pollCLI(unsigned char)+0x3a2>
    4b6a:	47 c1       	rjmp	.+654    	; 0x4dfa <pollCLI(unsigned char)+0x630>
    4b6c:	8e ed       	ldi	r24, 0xDE	; 222
    4b6e:	91 e0       	ldi	r25, 0x01	; 1
    4b70:	60 e0       	ldi	r22, 0x00	; 0
    4b72:	71 e0       	ldi	r23, 0x01	; 1
    4b74:	ae 01       	movw	r20, r28
    4b76:	4f 5f       	subi	r20, 0xFF	; 255
    4b78:	5f 4f       	sbci	r21, 0xFF	; 255
    4b7a:	0e 94 19 04 	call	0x832	; 0x832 <strtok_r>
    4b7e:	00 97       	sbiw	r24, 0x00	; 0
    4b80:	09 f4       	brne	.+2      	; 0x4b84 <pollCLI(unsigned char)+0x3ba>
    4b82:	3b c1       	rjmp	.+630    	; 0x4dfa <pollCLI(unsigned char)+0x630>
          { minPcOpen = (uint8_t) atoi(tok1); }
    4b84:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <atoi>
        setMinValvePcReallyOpen(minPcOpen);
    4b88:	0e 94 c6 08 	call	0x118c	; 0x118c <setMinValvePcReallyOpen(unsigned char)>
    4b8c:	38 c1       	rjmp	.+624    	; 0x4dfe <pollCLI(unsigned char)+0x634>
      case 'P':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 5 character sequence makes sense and is safe to tokenise, eg "P 1 2".
        if((n >= 5) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    4b8e:	15 30       	cpi	r17, 0x05	; 5
    4b90:	08 f4       	brcc	.+2      	; 0x4b94 <pollCLI(unsigned char)+0x3ca>
    4b92:	35 c1       	rjmp	.+618    	; 0x4dfe <pollCLI(unsigned char)+0x634>
    4b94:	8e ed       	ldi	r24, 0xDE	; 222
    4b96:	91 e0       	ldi	r25, 0x01	; 1
    4b98:	60 e0       	ldi	r22, 0x00	; 0
    4b9a:	71 e0       	ldi	r23, 0x01	; 1
    4b9c:	6e 01       	movw	r12, r28
    4b9e:	08 94       	sec
    4ba0:	c1 1c       	adc	r12, r1
    4ba2:	d1 1c       	adc	r13, r1
    4ba4:	a6 01       	movw	r20, r12
    4ba6:	0e 94 19 04 	call	0x832	; 0x832 <strtok_r>
    4baa:	7c 01       	movw	r14, r24
    4bac:	00 97       	sbiw	r24, 0x00	; 0
    4bae:	09 f4       	brne	.+2      	; 0x4bb2 <pollCLI(unsigned char)+0x3e8>
    4bb0:	26 c1       	rjmp	.+588    	; 0x4dfe <pollCLI(unsigned char)+0x634>
          {
          char *tok2 = strtok_r(NULL, " ", &last);
    4bb2:	80 e0       	ldi	r24, 0x00	; 0
    4bb4:	90 e0       	ldi	r25, 0x00	; 0
    4bb6:	60 e0       	ldi	r22, 0x00	; 0
    4bb8:	71 e0       	ldi	r23, 0x01	; 1
    4bba:	a6 01       	movw	r20, r12
    4bbc:	0e 94 19 04 	call	0x832	; 0x832 <strtok_r>
    4bc0:	8c 01       	movw	r16, r24
          if(NULL != tok2)
    4bc2:	00 97       	sbiw	r24, 0x00	; 0
    4bc4:	09 f4       	brne	.+2      	; 0x4bc8 <pollCLI(unsigned char)+0x3fe>
    4bc6:	1b c1       	rjmp	.+566    	; 0x4dfe <pollCLI(unsigned char)+0x634>
            {
            const int hh = atoi(tok1);
    4bc8:	c7 01       	movw	r24, r14
    4bca:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <atoi>
    4bce:	7c 01       	movw	r14, r24
            const int mm = atoi(tok2);
    4bd0:	c8 01       	movw	r24, r16
    4bd2:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <atoi>
    4bd6:	8c 01       	movw	r16, r24
            int s = 0;
//#if MAX_SIMPLE_SCHEDULES > 1         
            char *tok3 = strtok_r(NULL, " ", &last);
    4bd8:	80 e0       	ldi	r24, 0x00	; 0
    4bda:	90 e0       	ldi	r25, 0x00	; 0
    4bdc:	60 e0       	ldi	r22, 0x00	; 0
    4bde:	71 e0       	ldi	r23, 0x01	; 1
    4be0:	a6 01       	movw	r20, r12
    4be2:	0e 94 19 04 	call	0x832	; 0x832 <strtok_r>
            if(NULL != tok3)
    4be6:	00 97       	sbiw	r24, 0x00	; 0
    4be8:	19 f4       	brne	.+6      	; 0x4bf0 <pollCLI(unsigned char)+0x426>
    4bea:	60 e0       	ldi	r22, 0x00	; 0
    4bec:	70 e0       	ldi	r23, 0x00	; 0
    4bee:	03 c0       	rjmp	.+6      	; 0x4bf6 <pollCLI(unsigned char)+0x42c>
              {
              s = atoi(tok3);
    4bf0:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <atoi>
    4bf4:	bc 01       	movw	r22, r24
              }
//#endif
            // Does not fully validate user inputs (eg for -ve values), but cannot set impossible values.
            if(!setSimpleSchedule((uint_least16_t) ((60 * hh) + mm), (uint8_t)s)) { InvalidIgnored(); }
    4bf6:	8c e3       	ldi	r24, 0x3C	; 60
    4bf8:	90 e0       	ldi	r25, 0x00	; 0
    4bfa:	9c 01       	movw	r18, r24
    4bfc:	e2 9e       	mul	r14, r18
    4bfe:	c0 01       	movw	r24, r0
    4c00:	e3 9e       	mul	r14, r19
    4c02:	90 0d       	add	r25, r0
    4c04:	f2 9e       	mul	r15, r18
    4c06:	90 0d       	add	r25, r0
    4c08:	11 24       	eor	r1, r1
    4c0a:	80 0f       	add	r24, r16
    4c0c:	91 1f       	adc	r25, r17
    4c0e:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <setSimpleSchedule(unsigned int, unsigned char)>
    4c12:	88 c0       	rjmp	.+272    	; 0x4d24 <pollCLI(unsigned char)+0x55a>
// TODO: this is not fully 'debounced', ie could flip between WARM/BAKE with button held down.
bool inBakeModeDebounced() { return(isWarmModeDebounced && (0 != bakeCountdownM)); }
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
// Start/restart 'bake' mode and timeout.
void startBake() { isWarmMode = true; bakeCountdownM = BAKE_MAX_M; }
    4c14:	81 e0       	ldi	r24, 0x01	; 1
    4c16:	80 93 e7 01 	sts	0x01E7, r24
    4c1a:	8e e1       	ldi	r24, 0x1E	; 30
    4c1c:	80 93 e8 01 	sts	0x01E8, r24
    4c20:	ee c0       	rjmp	.+476    	; 0x4dfe <pollCLI(unsigned char)+0x634>
#endif

      // Status line and smart/scheduled warming prediction request.
      case 'S':
        {
        Serial.print(F("Resets: "));
    4c22:	8c e3       	ldi	r24, 0x3C	; 60
    4c24:	93 e0       	ldi	r25, 0x03	; 3
    4c26:	66 e3       	ldi	r22, 0x36	; 54
    4c28:	72 e0       	ldi	r23, 0x02	; 2
    4c2a:	0e 94 10 36 	call	0x6c20	; 0x6c20 <Print::print(__FlashStringHelper const*)>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    4c2e:	f9 99       	sbic	0x1f, 1	; 31
    4c30:	fe cf       	rjmp	.-4      	; 0x4c2e <pollCLI(unsigned char)+0x464>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    4c32:	86 e0       	ldi	r24, 0x06	; 6
    4c34:	90 e0       	ldi	r25, 0x00	; 0
    4c36:	92 bd       	out	0x22, r25	; 34
    4c38:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    4c3a:	f8 9a       	sbi	0x1f, 0	; 31
    4c3c:	60 b5       	in	r22, 0x20	; 32
        const uint8_t resetCount = eeprom_read_byte((uint8_t *)EE_START_RESET_COUNT);
        Serial.print(resetCount);
    4c3e:	8c e3       	ldi	r24, 0x3C	; 60
    4c40:	93 e0       	ldi	r25, 0x03	; 3
    4c42:	4a e0       	ldi	r20, 0x0A	; 10
    4c44:	50 e0       	ldi	r21, 0x00	; 0
    4c46:	0e 94 0f 37 	call	0x6e1e	; 0x6e1e <Print::print(unsigned char, int)>
        Serial.println();
    4c4a:	8c e3       	ldi	r24, 0x3C	; 60
    4c4c:	93 e0       	ldi	r25, 0x03	; 3
    4c4e:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <Print::println()>
        Serial.print(F("Overruns: "));
    4c52:	8c e3       	ldi	r24, 0x3C	; 60
    4c54:	93 e0       	ldi	r25, 0x03	; 3
    4c56:	6b e2       	ldi	r22, 0x2B	; 43
    4c58:	72 e0       	ldi	r23, 0x02	; 2
    4c5a:	0e 94 10 36 	call	0x6c20	; 0x6c20 <Print::print(__FlashStringHelper const*)>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    4c5e:	f9 99       	sbic	0x1f, 1	; 31
    4c60:	fe cf       	rjmp	.-4      	; 0x4c5e <pollCLI(unsigned char)+0x494>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    4c62:	8d e1       	ldi	r24, 0x1D	; 29
    4c64:	90 e0       	ldi	r25, 0x00	; 0
    4c66:	92 bd       	out	0x22, r25	; 34
    4c68:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    4c6a:	f8 9a       	sbi	0x1f, 0	; 31
    4c6c:	60 b5       	in	r22, 0x20	; 32
        const uint8_t overrunCount = (~eeprom_read_byte((uint8_t *)EE_START_OVERRUN_COUNTER)) & 0xff;
        Serial.print(overrunCount);
    4c6e:	60 95       	com	r22
    4c70:	8c e3       	ldi	r24, 0x3C	; 60
    4c72:	93 e0       	ldi	r25, 0x03	; 3
    4c74:	4a e0       	ldi	r20, 0x0A	; 10
    4c76:	50 e0       	ldi	r21, 0x00	; 0
    4c78:	0e 94 0f 37 	call	0x6e1e	; 0x6e1e <Print::print(unsigned char, int)>
        Serial.println();
    4c7c:	8c e3       	ldi	r24, 0x3C	; 60
    4c7e:	93 e0       	ldi	r25, 0x03	; 3
    4c80:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <Print::println()>
        uint_least8_t hh = getHoursLT();
    4c84:	0e 94 c7 1c 	call	0x398e	; 0x398e <getHoursLT()>
    4c88:	f8 2e       	mov	r15, r24
        Serial.print(F("Smart warming: "));
    4c8a:	8c e3       	ldi	r24, 0x3C	; 60
    4c8c:	93 e0       	ldi	r25, 0x03	; 3
    4c8e:	6b e1       	ldi	r22, 0x1B	; 27
    4c90:	72 e0       	ldi	r23, 0x02	; 2
    4c92:	0e 94 10 36 	call	0x6c20	; 0x6c20 <Print::print(__FlashStringHelper const*)>
    4c96:	08 e1       	ldi	r16, 0x18	; 24
    4c98:	10 e0       	ldi	r17, 0x00	; 0
    4c9a:	11 c0       	rjmp	.+34     	; 0x4cbe <pollCLI(unsigned char)+0x4f4>
        for(int i = 24; --i >= 0; )
          {
          Serial.print(shouldBeWarmedAtHour(hh) ? 'w' : 'f'); // TODO: show 'W' for scheduled WARM mode.
    4c9c:	8f 2d       	mov	r24, r15
    4c9e:	0e 94 ff 08 	call	0x11fe	; 0x11fe <shouldBeWarmedAtHour(unsigned char)>
    4ca2:	88 23       	and	r24, r24
    4ca4:	11 f4       	brne	.+4      	; 0x4caa <pollCLI(unsigned char)+0x4e0>
    4ca6:	66 e6       	ldi	r22, 0x66	; 102
    4ca8:	01 c0       	rjmp	.+2      	; 0x4cac <pollCLI(unsigned char)+0x4e2>
    4caa:	67 e7       	ldi	r22, 0x77	; 119
    4cac:	8c e3       	ldi	r24, 0x3C	; 60
    4cae:	93 e0       	ldi	r25, 0x03	; 3
    4cb0:	0e 94 33 36 	call	0x6c66	; 0x6c66 <Print::print(char)>
          if(++hh > 23) { hh = 0; }
    4cb4:	f3 94       	inc	r15
    4cb6:	37 e1       	ldi	r19, 0x17	; 23
    4cb8:	3f 15       	cp	r19, r15
    4cba:	08 f4       	brcc	.+2      	; 0x4cbe <pollCLI(unsigned char)+0x4f4>
    4cbc:	ff 24       	eor	r15, r15
        const uint8_t overrunCount = (~eeprom_read_byte((uint8_t *)EE_START_OVERRUN_COUNTER)) & 0xff;
        Serial.print(overrunCount);
        Serial.println();
        uint_least8_t hh = getHoursLT();
        Serial.print(F("Smart warming: "));
        for(int i = 24; --i >= 0; )
    4cbe:	01 50       	subi	r16, 0x01	; 1
    4cc0:	10 40       	sbci	r17, 0x00	; 0
    4cc2:	8f ef       	ldi	r24, 0xFF	; 255
    4cc4:	0f 3f       	cpi	r16, 0xFF	; 255
    4cc6:	18 07       	cpc	r17, r24
    4cc8:	49 f7       	brne	.-46     	; 0x4c9c <pollCLI(unsigned char)+0x4d2>
          {
          Serial.print(shouldBeWarmedAtHour(hh) ? 'w' : 'f'); // TODO: show 'W' for scheduled WARM mode.
          if(++hh > 23) { hh = 0; }
          }
        Serial.println();
    4cca:	8c e3       	ldi	r24, 0x3C	; 60
    4ccc:	93 e0       	ldi	r25, 0x03	; 3
    4cce:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <Print::println()>
    4cd2:	95 c0       	rjmp	.+298    	; 0x4dfe <pollCLI(unsigned char)+0x634>
      case 'T':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 5 character sequence makes sense and is safe to tokenise, eg "T 1 2".
        if((n >= 5) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    4cd4:	15 30       	cpi	r17, 0x05	; 5
    4cd6:	08 f4       	brcc	.+2      	; 0x4cda <pollCLI(unsigned char)+0x510>
    4cd8:	92 c0       	rjmp	.+292    	; 0x4dfe <pollCLI(unsigned char)+0x634>
    4cda:	8e ed       	ldi	r24, 0xDE	; 222
    4cdc:	91 e0       	ldi	r25, 0x01	; 1
    4cde:	60 e0       	ldi	r22, 0x00	; 0
    4ce0:	71 e0       	ldi	r23, 0x01	; 1
    4ce2:	7e 01       	movw	r14, r28
    4ce4:	08 94       	sec
    4ce6:	e1 1c       	adc	r14, r1
    4ce8:	f1 1c       	adc	r15, r1
    4cea:	a7 01       	movw	r20, r14
    4cec:	0e 94 19 04 	call	0x832	; 0x832 <strtok_r>
    4cf0:	8c 01       	movw	r16, r24
    4cf2:	00 97       	sbiw	r24, 0x00	; 0
    4cf4:	09 f4       	brne	.+2      	; 0x4cf8 <pollCLI(unsigned char)+0x52e>
    4cf6:	83 c0       	rjmp	.+262    	; 0x4dfe <pollCLI(unsigned char)+0x634>
          {
          char *tok2 = strtok_r(NULL, " ", &last);
    4cf8:	80 e0       	ldi	r24, 0x00	; 0
    4cfa:	90 e0       	ldi	r25, 0x00	; 0
    4cfc:	60 e0       	ldi	r22, 0x00	; 0
    4cfe:	71 e0       	ldi	r23, 0x01	; 1
    4d00:	a7 01       	movw	r20, r14
    4d02:	0e 94 19 04 	call	0x832	; 0x832 <strtok_r>
    4d06:	7c 01       	movw	r14, r24
          if(NULL != tok2)
    4d08:	00 97       	sbiw	r24, 0x00	; 0
    4d0a:	09 f4       	brne	.+2      	; 0x4d0e <pollCLI(unsigned char)+0x544>
    4d0c:	78 c0       	rjmp	.+240    	; 0x4dfe <pollCLI(unsigned char)+0x634>
            {
            const int hh = atoi(tok1);
    4d0e:	c8 01       	movw	r24, r16
    4d10:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <atoi>
    4d14:	8c 01       	movw	r16, r24
            const int mm = atoi(tok2);
    4d16:	c7 01       	movw	r24, r14
    4d18:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <atoi>
    4d1c:	bc 01       	movw	r22, r24
            // TODO: zap collected stats if time change too large (eg >> 1h).
            if(!setHoursMinutesLT(hh, mm)) { InvalidIgnored(); }
    4d1e:	c8 01       	movw	r24, r16
    4d20:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <setHoursMinutesLT(int, int)>
    4d24:	88 23       	and	r24, r24
    4d26:	09 f0       	breq	.+2      	; 0x4d2a <pollCLI(unsigned char)+0x560>
    4d28:	6a c0       	rjmp	.+212    	; 0x4dfe <pollCLI(unsigned char)+0x634>
    4d2a:	0e 94 c9 20 	call	0x4192	; 0x4192 <InvalidIgnored()>
    4d2e:	67 c0       	rjmp	.+206    	; 0x4dfe <pollCLI(unsigned char)+0x634>
        }

      // Version information printed as one line to serial, machine- and human- parseable.
      case 'V':
        {
        serialPrintlnBuildVersion();
    4d30:	0e 94 98 28 	call	0x5130	; 0x5130 <serialPrintlnBuildVersion()>
    4d34:	64 c0       	rjmp	.+200    	; 0x4dfe <pollCLI(unsigned char)+0x634>

// Has the effect of forcing the warm mode to the specified state immediately.
// If forcing to FROST mode then any pending BAKE time is cancelled.
static void setWarmMode(const bool warm)
  {
  isWarmMode = warm;
    4d36:	81 e0       	ldi	r24, 0x01	; 1
    4d38:	80 93 e7 01 	sts	0x01E7, r24
  isWarmModeDebounced = warm;
    4d3c:	80 93 e6 01 	sts	0x01E6, r24
static bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
// TODO: this is not fully 'debounced', ie could flip between WARM/BAKE with button held down.
bool inBakeModeDebounced() { return(isWarmModeDebounced && (0 != bakeCountdownM)); }
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
    4d40:	10 92 e8 01 	sts	0x01E8, r1
    4d44:	5c c0       	rjmp	.+184    	; 0x4dfe <pollCLI(unsigned char)+0x634>
      case 'X':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 3 character sequence makes sense and is safe to tokenise, eg "X 0".
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    4d46:	13 30       	cpi	r17, 0x03	; 3
    4d48:	08 f4       	brcc	.+2      	; 0x4d4c <pollCLI(unsigned char)+0x582>
    4d4a:	59 c0       	rjmp	.+178    	; 0x4dfe <pollCLI(unsigned char)+0x634>
    4d4c:	8e ed       	ldi	r24, 0xDE	; 222
    4d4e:	91 e0       	ldi	r25, 0x01	; 1
    4d50:	60 e0       	ldi	r22, 0x00	; 0
    4d52:	71 e0       	ldi	r23, 0x01	; 1
    4d54:	ae 01       	movw	r20, r28
    4d56:	4f 5f       	subi	r20, 0xFF	; 255
    4d58:	5f 4f       	sbci	r21, 0xFF	; 255
    4d5a:	0e 94 19 04 	call	0x832	; 0x832 <strtok_r>
    4d5e:	00 97       	sbiw	r24, 0x00	; 0
    4d60:	09 f4       	brne	.+2      	; 0x4d64 <pollCLI(unsigned char)+0x59a>
    4d62:	4d c0       	rjmp	.+154    	; 0x4dfe <pollCLI(unsigned char)+0x634>
          {
          const uint8_t nn = (uint8_t) atoi(tok1);
    4d64:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <atoi>
    4d68:	68 2f       	mov	r22, r24
          eeprom_smart_update_byte((uint8_t *)EE_START_STATS_TX_ENABLE, nn);
    4d6a:	8c e1       	ldi	r24, 0x1C	; 28
    4d6c:	90 e0       	ldi	r25, 0x00	; 0
    4d6e:	0e 94 ca 0b 	call	0x1794	; 0x1794 <eeprom_smart_update_byte(unsigned char*, unsigned char)>
    4d72:	45 c0       	rjmp	.+138    	; 0x4dfe <pollCLI(unsigned char)+0x634>

      // Zap/erase learned statistics.
      case 'Z':
        {
        // Try to avoid causing an overrun if near the end of the minor cycle (even allowing for the warning message if unfinished!).
        if(zapStats((uint16_t) fnmax(1, ((int)msRemainingThisBasicCycle()/2) - 20)))
    4d74:	81 e0       	ldi	r24, 0x01	; 1
    4d76:	90 e0       	ldi	r25, 0x00	; 0
    4d78:	9c 83       	std	Y+4, r25	; 0x04
    4d7a:	8b 83       	std	Y+3, r24	; 0x03
    4d7c:	80 91 b2 00 	lds	r24, 0x00B2
    4d80:	2f ef       	ldi	r18, 0xFF	; 255
    4d82:	30 e0       	ldi	r19, 0x00	; 0
    4d84:	28 1b       	sub	r18, r24
    4d86:	31 09       	sbc	r19, r1
    4d88:	c9 01       	movw	r24, r18
    4d8a:	43 e0       	ldi	r20, 0x03	; 3
    4d8c:	88 0f       	add	r24, r24
    4d8e:	99 1f       	adc	r25, r25
    4d90:	4a 95       	dec	r20
    4d92:	e1 f7       	brne	.-8      	; 0x4d8c <pollCLI(unsigned char)+0x5c2>
    4d94:	82 1b       	sub	r24, r18
    4d96:	93 0b       	sbc	r25, r19
    4d98:	95 95       	asr	r25
    4d9a:	87 95       	ror	r24
    4d9c:	44 97       	sbiw	r24, 0x14	; 20
    4d9e:	9e 83       	std	Y+6, r25	; 0x06
    4da0:	8d 83       	std	Y+5, r24	; 0x05
    4da2:	81 30       	cpi	r24, 0x01	; 1
    4da4:	91 05       	cpc	r25, r1
    4da6:	14 f4       	brge	.+4      	; 0x4dac <pollCLI(unsigned char)+0x5e2>
    4da8:	81 e0       	ldi	r24, 0x01	; 1
    4daa:	90 e0       	ldi	r25, 0x00	; 0
    4dac:	0e 94 aa 08 	call	0x1154	; 0x1154 <zapStats(unsigned int)>
    4db0:	88 23       	and	r24, r24
    4db2:	29 f0       	breq	.+10     	; 0x4dbe <pollCLI(unsigned char)+0x5f4>
          { Serial.println(F("Zapped.")); }
    4db4:	8c e3       	ldi	r24, 0x3C	; 60
    4db6:	93 e0       	ldi	r25, 0x03	; 3
    4db8:	63 e1       	ldi	r22, 0x13	; 19
    4dba:	72 e0       	ldi	r23, 0x02	; 2
    4dbc:	04 c0       	rjmp	.+8      	; 0x4dc6 <pollCLI(unsigned char)+0x5fc>
        else
          { Serial.println(F("Not finished.")); }
    4dbe:	8c e3       	ldi	r24, 0x3C	; 60
    4dc0:	93 e0       	ldi	r25, 0x03	; 3
    4dc2:	65 e0       	ldi	r22, 0x05	; 5
    4dc4:	72 e0       	ldi	r23, 0x02	; 2
    4dc6:	0e 94 5b 36 	call	0x6cb6	; 0x6cb6 <Print::println(__FlashStringHelper const*)>
      }

    // Almost always show status line afterwards as feedback of command received and new state.
    if(showStatus) { serialStatusReport(); }
    // Else show ack of command received.
    else { Serial.println(F("OK")); }
    4dca:	8c e3       	ldi	r24, 0x3C	; 60
    4dcc:	93 e0       	ldi	r25, 0x03	; 3
    4dce:	62 e0       	ldi	r22, 0x02	; 2
    4dd0:	72 e0       	ldi	r23, 0x02	; 2
    4dd2:	0e 94 5b 36 	call	0x6cb6	; 0x6cb6 <Print::println(__FlashStringHelper const*)>
    4dd6:	04 c0       	rjmp	.+8      	; 0x4de0 <pollCLI(unsigned char)+0x616>
    }
  else { Serial.println(); } // Terminate empty/partial CLI input line after timeout.
    4dd8:	8c e3       	ldi	r24, 0x3C	; 60
    4dda:	93 e0       	ldi	r25, 0x03	; 3
    4ddc:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <Print::println()>

  // Force any pending output before return / possible UART power-down.
  flushSerialSCTSensitive();
    4de0:	0e 94 63 19 	call	0x32c6	; 0x32c6 <flushSerialSCTSensitive()>

  if(neededWaking) { powerDownSerial(); }
    4de4:	bb 20       	and	r11, r11
    4de6:	71 f0       	breq	.+28     	; 0x4e04 <pollCLI(unsigned char)+0x63a>
    4de8:	0e 94 27 19 	call	0x324e	; 0x324e <powerDownSerial()>
    4dec:	0b c0       	rjmp	.+22     	; 0x4e04 <pollCLI(unsigned char)+0x63a>
              FHT8VSetHC2(hc2);
              FHT8VSyncAndTXReset(); // Force re-sync with FHT8V valve.
              }
            }
          }
        else if(n < 2) // Just 'H', possibly with trailing whitespace.
    4dee:	12 30       	cpi	r17, 0x02	; 2
    4df0:	30 f4       	brcc	.+12     	; 0x4dfe <pollCLI(unsigned char)+0x634>
    4df2:	9c ce       	rjmp	.-712    	; 0x4b2c <pollCLI(unsigned char)+0x362>
    4df4:	80 e0       	ldi	r24, 0x00	; 0
    4df6:	90 e0       	ldi	r25, 0x00	; 0
    4df8:	b3 ce       	rjmp	.-666    	; 0x4b60 <pollCLI(unsigned char)+0x396>
    4dfa:	80 e0       	ldi	r24, 0x00	; 0
    4dfc:	c5 ce       	rjmp	.-630    	; 0x4b88 <pollCLI(unsigned char)+0x3be>
        break;
        }
      }

    // Almost always show status line afterwards as feedback of command received and new state.
    if(showStatus) { serialStatusReport(); }
    4dfe:	0e 94 d8 21 	call	0x43b0	; 0x43b0 <serialStatusReport()>
    4e02:	ee cf       	rjmp	.-36     	; 0x4de0 <pollCLI(unsigned char)+0x616>

  // Force any pending output before return / possible UART power-down.
  flushSerialSCTSensitive();

  if(neededWaking) { powerDownSerial(); }
  }
    4e04:	26 96       	adiw	r28, 0x06	; 6
    4e06:	0f b6       	in	r0, 0x3f	; 63
    4e08:	f8 94       	cli
    4e0a:	de bf       	out	0x3e, r29	; 62
    4e0c:	0f be       	out	0x3f, r0	; 63
    4e0e:	cd bf       	out	0x3d, r28	; 61
    4e10:	cf 91       	pop	r28
    4e12:	df 91       	pop	r29
    4e14:	1f 91       	pop	r17
    4e16:	0f 91       	pop	r16
    4e18:	ff 90       	pop	r15
    4e1a:	ef 90       	pop	r14
    4e1c:	df 90       	pop	r13
    4e1e:	cf 90       	pop	r12
    4e20:	bf 90       	pop	r11
    4e22:	08 95       	ret

00004e24 <checkUserSchedule()>:
  return(statusChanged);
  }


// Check/apply the user's schedule, at least once each minute, and act on any timed events.
void checkUserSchedule()
    4e24:	0f 93       	push	r16
    4e26:	1f 93       	push	r17
    4e28:	cf 93       	push	r28
    4e2a:	df 93       	push	r29
  {
  // Get minutes since midnight local time [0,1439].
  const uint_least16_t msm = getMinutesSinceMidnightLT();
    4e2c:	0e 94 b2 1c 	call	0x3964	; 0x3964 <getMinutesSinceMidnightLT()>
    4e30:	ec 01       	movw	r28, r24
    4e32:	10 e0       	ldi	r17, 0x00	; 0

// Has the effect of forcing the warm mode to the specified state immediately.
// If forcing to FROST mode then any pending BAKE time is cancelled.
static void setWarmMode(const bool warm)
  {
  isWarmMode = warm;
    4e34:	01 e0       	ldi	r16, 0x01	; 1
  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    // Check if now is the simple scheduled off time, as minutes after midnight [0,1439]; invalid (eg ~0) if none set.
    // Programmed off/frost takes priority over on/warm if same to bias towards energy-saving.
    // Note that in the presence of multiple overlapping schedules only the last 'off' applies however.
    if(((MAX_SIMPLE_SCHEDULES < 1) || !isAnyScheduleOnWARMNow()) &&
    4e36:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <isAnyScheduleOnWARMNow()>
    4e3a:	88 23       	and	r24, r24
    4e3c:	c9 f4       	brne	.+50     	; 0x4e70 <checkUserSchedule()+0x4c>
    4e3e:	81 2f       	mov	r24, r17
    4e40:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <getSimpleScheduleOff(unsigned char)>
    4e44:	c8 17       	cp	r28, r24
    4e46:	d9 07       	cpc	r29, r25
    4e48:	99 f4       	brne	.+38     	; 0x4e70 <checkUserSchedule()+0x4c>

// Has the effect of forcing the warm mode to the specified state immediately.
// If forcing to FROST mode then any pending BAKE time is cancelled.
static void setWarmMode(const bool warm)
  {
  isWarmMode = warm;
    4e4a:	10 92 e7 01 	sts	0x01E7, r1
  isWarmModeDebounced = warm;
    4e4e:	10 92 e6 01 	sts	0x01E6, r1
static bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
// TODO: this is not fully 'debounced', ie could flip between WARM/BAKE with button held down.
bool inBakeModeDebounced() { return(isWarmModeDebounced && (0 != bakeCountdownM)); }
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
    4e52:	10 92 e8 01 	sts	0x01E8, r1
    4e56:	08 c0       	rjmp	.+16     	; 0x4e68 <checkUserSchedule()+0x44>

// Has the effect of forcing the warm mode to the specified state immediately.
// If forcing to FROST mode then any pending BAKE time is cancelled.
static void setWarmMode(const bool warm)
  {
  isWarmMode = warm;
    4e58:	00 93 e7 01 	sts	0x01E7, r16
  isWarmModeDebounced = warm;
    4e5c:	00 93 e6 01 	sts	0x01E6, r16
static bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
// TODO: this is not fully 'debounced', ie could flip between WARM/BAKE with button held down.
bool inBakeModeDebounced() { return(isWarmModeDebounced && (0 != bakeCountdownM)); }
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
    4e60:	10 92 e8 01 	sts	0x01E8, r1
    // Check if now is the simple scheduled on time.
    else if(msm == getSimpleScheduleOn(which))
      {
      setWarmMode(true);
      // In addition to forcing WARM mode, weakly inhibit any setbacks, etc, for a while.
      markAsPossiblyOccupied();
    4e64:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <markAsPossiblyOccupied()>
  // Get minutes since midnight local time [0,1439].
  const uint_least16_t msm = getMinutesSinceMidnightLT();

  // Check all available schedules.
  // FIXME: probably will NOT work as expected for overlapping schedules (ie will got to FROST at end of first one).
  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    4e68:	1f 5f       	subi	r17, 0xFF	; 255
    4e6a:	12 30       	cpi	r17, 0x02	; 2
    4e6c:	21 f7       	brne	.-56     	; 0x4e36 <checkUserSchedule()+0x12>
    4e6e:	07 c0       	rjmp	.+14     	; 0x4e7e <checkUserSchedule()+0x5a>
    // Note that in the presence of multiple overlapping schedules only the last 'off' applies however.
    if(((MAX_SIMPLE_SCHEDULES < 1) || !isAnyScheduleOnWARMNow()) &&
       (msm == getSimpleScheduleOff(which)))
      { setWarmMode(false); }
    // Check if now is the simple scheduled on time.
    else if(msm == getSimpleScheduleOn(which))
    4e70:	81 2f       	mov	r24, r17
    4e72:	0e 94 ac 1d 	call	0x3b58	; 0x3b58 <getSimpleScheduleOn(unsigned char)>
    4e76:	c8 17       	cp	r28, r24
    4e78:	d9 07       	cpc	r29, r25
    4e7a:	b1 f7       	brne	.-20     	; 0x4e68 <checkUserSchedule()+0x44>
    4e7c:	ed cf       	rjmp	.-38     	; 0x4e58 <checkUserSchedule()+0x34>
      setWarmMode(true);
      // In addition to forcing WARM mode, weakly inhibit any setbacks, etc, for a while.
      markAsPossiblyOccupied();
      }
    }
  }
    4e7e:	df 91       	pop	r29
    4e80:	cf 91       	pop	r28
    4e82:	1f 91       	pop	r17
    4e84:	0f 91       	pop	r16
    4e86:	08 95       	ret

00004e88 <offPause()>:
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define MEDIUM_PAUSE_MS 60
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
// Big low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define BIG_PAUSE_MS 120
static void inline bigPause() { nap(WDTO_120MS); } // 120ms vs 288ms nominal for PICAXE V0.09 impl.
    4e88:	83 e0       	ldi	r24, 0x03	; 3
    4e8a:	0e 94 29 16 	call	0x2c52	; 0x2c52 <nap(signed char)>

// Pause between flashes to allow them to be distinguished (>100ms); was mediumPause() for PICAXE V0.09 impl.
static void inline offPause()
  {
  bigPause(); // 120ms, was V0.09 144ms mediumPause() for PICAXE V0.09 impl.
  pollIO(); // Slip in an I/O poll.
    4e8e:	80 e0       	ldi	r24, 0x00	; 0
    4e90:	0e 94 7c 28 	call	0x50f8	; 0x50f8 <pollIO(bool)>
  }
    4e94:	08 95       	ret

00004e96 <markUIControlUsed()>:
bool isCLIActive() { return(0 != CLITimeoutM); }

// Record local manual operation of a local physical UI control, eg not remote or via CLI.
void markUIControlUsed()
  {
  statusChange = true; // Note user interaction with the system.
    4e96:	81 e0       	ldi	r24, 0x01	; 1
    4e98:	80 93 eb 01 	sts	0x01EB, r24
  uiTimeoutM = 2; // Ensure that UI controls are kept 'warm' for a little while.
    4e9c:	82 e0       	ldi	r24, 0x02	; 2
    4e9e:	80 93 e9 01 	sts	0x01E9, r24
// Starts up with full value to allow easy set of time, etc, without specially activating CLI.
#define CLI_DEFAULT_TIMEOUT_M 2
static uint8_t CLITimeoutM = CLI_DEFAULT_TIMEOUT_M;

// Reset CLI active timer to the full whack before it goes inactive again (ie makes CLI active for a while).
static void resetCLIActiveTimer() { CLITimeoutM = CLI_DEFAULT_TIMEOUT_M; }
    4ea2:	80 93 05 01 	sts	0x0105, r24
  statusChange = true; // Note user interaction with the system.
  uiTimeoutM = 2; // Ensure that UI controls are kept 'warm' for a little while.
  // Make CLI active for a while (at some slight possibly-significant energy cost).
  resetCLIActiveTimer();
  // User operation of controls locally is strong indication of presence.
  markAsOccupied();
    4ea6:	0e 94 b6 07 	call	0xf6c	; 0xf6c <markAsOccupied()>
  }
    4eaa:	08 95       	ret

00004eac <tickUI(unsigned char)>:
// Should never be skipped, so as to allow the UI to remain responsive.
// Runs in 350ms or less; usually takes only a few milliseconds or microseconds.
// Returns true iff the user interacted with the system, and maybe caused a status change.
// NOTE: since this is on the minimum idle-loop code path, minimise CPU cycles, esp in frost mode.
// Also re-activates CLI on main button push.
bool tickUI(const uint_fast8_t sec)
    4eac:	0f 93       	push	r16
    4eae:	1f 93       	push	r17
  {
  // Perform any once-per-minute operations.
  const bool sec0 = (0 == sec);
  if(sec0)
    4eb0:	88 23       	and	r24, r24
    4eb2:	a9 f4       	brne	.+42     	; 0x4ede <tickUI(unsigned char)+0x32>
    {
#ifdef SUPPORT_BAKE
    // Run down BAKE mode timer if need be, one tick per minute.
    if(bakeCountdownM > 0) { --bakeCountdownM; }
    4eb4:	80 91 e8 01 	lds	r24, 0x01E8
    4eb8:	88 23       	and	r24, r24
    4eba:	19 f0       	breq	.+6      	; 0x4ec2 <tickUI(unsigned char)+0x16>
    4ebc:	81 50       	subi	r24, 0x01	; 1
    4ebe:	80 93 e8 01 	sts	0x01E8, r24
#endif

    // Run down UI iteraction timer if need be, one tick per minute.
    if(uiTimeoutM > 0) { --uiTimeoutM; }
    4ec2:	80 91 e9 01 	lds	r24, 0x01E9
    4ec6:	88 23       	and	r24, r24
    4ec8:	19 f0       	breq	.+6      	; 0x4ed0 <tickUI(unsigned char)+0x24>
    4eca:	81 50       	subi	r24, 0x01	; 1
    4ecc:	80 93 e9 01 	sts	0x01E9, r24

    // Run down CLI timer if need be.
    if(CLITimeoutM > 0) { --CLITimeoutM; }
    4ed0:	80 91 05 01 	lds	r24, 0x0105
    4ed4:	88 23       	and	r24, r24
    4ed6:	19 f0       	breq	.+6      	; 0x4ede <tickUI(unsigned char)+0x32>
    4ed8:	81 50       	subi	r24, 0x01	; 1
    4eda:	80 93 05 01 	sts	0x0105, r24
    }

  // True on every 4th tick/call, ie about once every 8 seconds.
  const bool forthTick = !((++tickCount) & 3); // True on every 4th tick.
    4ede:	10 91 ea 01 	lds	r17, 0x01EA
    4ee2:	1f 5f       	subi	r17, 0xFF	; 255
    4ee4:	10 93 ea 01 	sts	0x01EA, r17
#ifdef TEMP_POT_AVAILABLE
//  const bool rUIcu = recentUIControlUse();
  //if(rUIcu || forthTick) // If recent UI activity, and periodically
    {
    // Force re-read of temp pot UI device.
    readTempPot();
    4ee8:	0e 94 6e 20 	call	0x40dc	; 0x40dc <readTempPot()>
    }
#endif

  if(fastDigitalRead(BUTTON_MODE_L) == LOW)
    4eec:	4d 99       	sbic	0x09, 5	; 9
    4eee:	21 c0       	rjmp	.+66     	; 0x4f32 <tickUI(unsigned char)+0x86>
    {
    // User is pressing the mode button: cycle through FROST | WARM [ | BAKE ].
    // Mark controls used and room as currently occupied given button press.
    markUIControlUsed();
    4ef0:	0e 94 4b 27 	call	0x4e96	; 0x4e96 <markUIControlUsed()>
    // LED on...
    LED_HEATCALL_ON();
    4ef4:	5c 98       	cbi	0x0b, 4	; 11
// Very tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define VERYTINY_PAUSE_MS 5
static void inline veryTinyPause() { sleepLowPowerMs(VERYTINY_PAUSE_MS); }
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define TINY_PAUSE_MS 15
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    4ef6:	80 e0       	ldi	r24, 0x00	; 0
    4ef8:	0e 94 29 16 	call	0x2c52	; 0x2c52 <nap(signed char)>
    tinyPause(); // Leading tiny pause...
    if(!isWarmMode) // Was in frost mode; moving to warm mode.
    4efc:	80 91 e7 01 	lds	r24, 0x01E7
    4f00:	88 23       	and	r24, r24
    4f02:	69 f4       	brne	.+26     	; 0x4f1e <tickUI(unsigned char)+0x72>

// Has the effect of forcing the warm mode to the specified state immediately.
// If forcing to FROST mode then any pending BAKE time is cancelled.
static void setWarmMode(const bool warm)
  {
  isWarmMode = warm;
    4f04:	81 e0       	ldi	r24, 0x01	; 1
    4f06:	80 93 e7 01 	sts	0x01E7, r24
  isWarmModeDebounced = warm;
    4f0a:	80 93 e6 01 	sts	0x01E6, r24
static bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
// TODO: this is not fully 'debounced', ie could flip between WARM/BAKE with button held down.
bool inBakeModeDebounced() { return(isWarmModeDebounced && (0 != bakeCountdownM)); }
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
    4f0e:	10 92 e8 01 	sts	0x01E8, r1
      setWarmMode(true);
#ifdef SUPPORT_BAKE
      cancelBake(); // Ensure no bake mode running.
#endif
      // 2 x flash 'heat call' to indicate now in WARM mode.
      LED_HEATCALL_OFF();
    4f12:	5c 9a       	sbi	0x0b, 4	; 11
      offPause();
    4f14:	0e 94 44 27 	call	0x4e88	; 0x4e88 <offPause()>
      LED_HEATCALL_ON();
    4f18:	5c 98       	cbi	0x0b, 4	; 11
    4f1a:	80 e0       	ldi	r24, 0x00	; 0
    4f1c:	d0 c0       	rjmp	.+416    	; 0x50be <tickUI(unsigned char)+0x212>

#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in raw 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
static bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
    4f1e:	80 91 e8 01 	lds	r24, 0x01E8
    4f22:	88 23       	and	r24, r24
    4f24:	09 f4       	brne	.+2      	; 0x4f28 <tickUI(unsigned char)+0x7c>
    4f26:	b8 c0       	rjmp	.+368    	; 0x5098 <tickUI(unsigned char)+0x1ec>

// Has the effect of forcing the warm mode to the specified state immediately.
// If forcing to FROST mode then any pending BAKE time is cancelled.
static void setWarmMode(const bool warm)
  {
  isWarmMode = warm;
    4f28:	10 92 e7 01 	sts	0x01E7, r1
  isWarmModeDebounced = warm;
    4f2c:	10 92 e6 01 	sts	0x01E6, r1
    4f30:	9d c0       	rjmp	.+314    	; 0x506c <tickUI(unsigned char)+0x1c0>
    // Run down CLI timer if need be.
    if(CLITimeoutM > 0) { --CLITimeoutM; }
    }

  // True on every 4th tick/call, ie about once every 8 seconds.
  const bool forthTick = !((++tickCount) & 3); // True on every 4th tick.
    4f32:	00 e0       	ldi	r16, 0x00	; 0
    4f34:	81 2f       	mov	r24, r17
    4f36:	90 e0       	ldi	r25, 0x00	; 0
    4f38:	83 70       	andi	r24, 0x03	; 3
    4f3a:	90 70       	andi	r25, 0x00	; 0
    4f3c:	89 2b       	or	r24, r25
    4f3e:	09 f4       	brne	.+2      	; 0x4f42 <tickUI(unsigned char)+0x96>
    4f40:	01 e0       	ldi	r16, 0x01	; 1
    }
  else
    {
    // Don't update the debounced WARM mode while button held down.
    // Will also capture programmatic changes to isWarmMode, eg from schedules.
    isWarmModeDebounced = isWarmMode;
    4f42:	80 91 e7 01 	lds	r24, 0x01E7
    4f46:	80 93 e6 01 	sts	0x01E6, r24

    // Mode button not pressed: indicate current mode with flash(es); more flashes if actually calling for heat.
    // Force display while UI controls are being used, eg to indicate temp pot position.
    if(isWarmModeDebounced || statusChange) // Generate flash(es) if in WARM mode or fiddling with UI other than Mode button.
    4f4a:	88 23       	and	r24, r24
    4f4c:	29 f4       	brne	.+10     	; 0x4f58 <tickUI(unsigned char)+0xac>
    4f4e:	80 91 eb 01 	lds	r24, 0x01EB
    4f52:	88 23       	and	r24, r24
    4f54:	09 f4       	brne	.+2      	; 0x4f58 <tickUI(unsigned char)+0xac>
    4f56:	5b c0       	rjmp	.+182    	; 0x500e <tickUI(unsigned char)+0x162>
      {
      // DHD20131223: do not flash if the room is dark so as to save energy and avoid disturbing sleep, etc.
      // In this case force resample of light level frequently in case user turns light on eg to operate unit.
      // Do show LED flash if user has recently operated controls (other than mode button) manually.
      if(!isRoomDark() || statusChange || (forthTick && (0 != readAmbientLight()) && !isRoomDark()))
    4f58:	0e 94 25 07 	call	0xe4a	; 0xe4a <isRoomLit()>
    4f5c:	88 23       	and	r24, r24
    4f5e:	89 f4       	brne	.+34     	; 0x4f82 <tickUI(unsigned char)+0xd6>
    4f60:	80 91 eb 01 	lds	r24, 0x01EB
    4f64:	88 23       	and	r24, r24
    4f66:	69 f4       	brne	.+26     	; 0x4f82 <tickUI(unsigned char)+0xd6>
    4f68:	00 23       	and	r16, r16
    4f6a:	09 f4       	brne	.+2      	; 0x4f6e <tickUI(unsigned char)+0xc2>
    4f6c:	6e c0       	rjmp	.+220    	; 0x504a <tickUI(unsigned char)+0x19e>
    4f6e:	0e 94 2d 07 	call	0xe5a	; 0xe5a <readAmbientLight()>
    4f72:	89 2b       	or	r24, r25
    4f74:	09 f4       	brne	.+2      	; 0x4f78 <tickUI(unsigned char)+0xcc>
    4f76:	69 c0       	rjmp	.+210    	; 0x504a <tickUI(unsigned char)+0x19e>
    4f78:	0e 94 25 07 	call	0xe4a	; 0xe4a <isRoomLit()>
    4f7c:	88 23       	and	r24, r24
    4f7e:	09 f4       	brne	.+2      	; 0x4f82 <tickUI(unsigned char)+0xd6>
    4f80:	64 c0       	rjmp	.+200    	; 0x504a <tickUI(unsigned char)+0x19e>
//#ifdef LEARN_BUTTON_AVAILABLE
//        if((!forthTick) || isSimpleScheduleSet()) // Omit every 4th set of flashes unless a schedule is set.
//#endif
          {
          // First flash to indicate WARM mode (or pot being twiddled).
          LED_HEATCALL_ON();
    4f82:	5c 98       	cbi	0x0b, 4	; 11
          // LED on stepwise proportional to temp pot setting.
          // Small number of steps (3) should help make positioning more obvious.
          const uint8_t wt = getWARMTargetC();
    4f84:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <getWARMTargetC()>
    4f88:	08 2f       	mov	r16, r24
          // Makes vtiny|tiny|medium flash for cool|OK|warm temperature target.
          if(isEcoTemperature(wt)) { veryTinyPause(); }
    4f8a:	82 31       	cpi	r24, 0x12	; 18
    4f8c:	28 f4       	brcc	.+10     	; 0x4f98 <tickUI(unsigned char)+0xec>
// This may be achieved in part by dynamically slowing the CPU clock if possible.
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed((((MIN_CPU_HZ * (ms)) + 2000) / 4000) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    4f8e:	85 e2       	ldi	r24, 0x25	; 37
    4f90:	90 e0       	ldi	r25, 0x00	; 0
    4f92:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
    4f96:	07 c0       	rjmp	.+14     	; 0x4fa6 <tickUI(unsigned char)+0xfa>
          else if(!isComfortTemperature(wt)) { tinyPause(); }
    4f98:	87 31       	cpi	r24, 0x17	; 23
    4f9a:	10 f4       	brcc	.+4      	; 0x4fa0 <tickUI(unsigned char)+0xf4>
// Very tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define VERYTINY_PAUSE_MS 5
static void inline veryTinyPause() { sleepLowPowerMs(VERYTINY_PAUSE_MS); }
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define TINY_PAUSE_MS 15
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    4f9c:	80 e0       	ldi	r24, 0x00	; 0
    4f9e:	01 c0       	rjmp	.+2      	; 0x4fa2 <tickUI(unsigned char)+0xf6>
// Small low-power sleep.
#define SMALL_PAUSE_MS 30
static void inline smallPause() { nap(WDTO_30MS); }
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define MEDIUM_PAUSE_MS 60
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
    4fa0:	82 e0       	ldi	r24, 0x02	; 2
    4fa2:	0e 94 29 16 	call	0x2c52	; 0x2c52 <nap(signed char)>
          else { mediumPause(); }
  
          // Second flash to indicate nominally calling for heat.
          // TODO: could consider using isControlledValveOpen() instead.
          if(getTRVPercentOpen() >= getMinValvePcReallyOpen())
    4fa6:	0e 94 9a 07 	call	0xf34	; 0xf34 <getTRVPercentOpen()>
    4faa:	18 2f       	mov	r17, r24
    4fac:	0e 94 1c 08 	call	0x1038	; 0x1038 <getMinValvePcReallyOpen()>
    4fb0:	18 17       	cp	r17, r24
    4fb2:	08 f4       	brcc	.+2      	; 0x4fb6 <tickUI(unsigned char)+0x10a>
    4fb4:	4a c0       	rjmp	.+148    	; 0x504a <tickUI(unsigned char)+0x19e>
            {
            LED_HEATCALL_OFF();
    4fb6:	5c 9a       	sbi	0x0b, 4	; 11
            offPause(); // V0.09 was mediumPause().
    4fb8:	0e 94 44 27 	call	0x4e88	; 0x4e88 <offPause()>
            LED_HEATCALL_ON(); // flash
    4fbc:	5c 98       	cbi	0x0b, 4	; 11
            if(isEcoTemperature(wt)) { veryTinyPause(); }
    4fbe:	02 31       	cpi	r16, 0x12	; 18
    4fc0:	18 f4       	brcc	.+6      	; 0x4fc8 <tickUI(unsigned char)+0x11c>
// This may be achieved in part by dynamically slowing the CPU clock if possible.
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed((((MIN_CPU_HZ * (ms)) + 2000) / 4000) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    4fc2:	85 e2       	ldi	r24, 0x25	; 37
    4fc4:	90 e0       	ldi	r25, 0x00	; 0
    4fc6:	04 c0       	rjmp	.+8      	; 0x4fd0 <tickUI(unsigned char)+0x124>
            else if(!isComfortTemperature(wt)) { sleepLowPowerMs((VERYTINY_PAUSE_MS + TINY_PAUSE_MS) / 2); }
    4fc8:	07 31       	cpi	r16, 0x17	; 23
    4fca:	28 f4       	brcc	.+10     	; 0x4fd6 <tickUI(unsigned char)+0x12a>
    4fcc:	8c e4       	ldi	r24, 0x4C	; 76
    4fce:	90 e0       	ldi	r25, 0x00	; 0
    4fd0:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
    4fd4:	03 c0       	rjmp	.+6      	; 0x4fdc <tickUI(unsigned char)+0x130>
// Very tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define VERYTINY_PAUSE_MS 5
static void inline veryTinyPause() { sleepLowPowerMs(VERYTINY_PAUSE_MS); }
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define TINY_PAUSE_MS 15
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    4fd6:	80 e0       	ldi	r24, 0x00	; 0
    4fd8:	0e 94 29 16 	call	0x2c52	; 0x2c52 <nap(signed char)>

#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in raw 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
static bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
    4fdc:	80 91 e7 01 	lds	r24, 0x01E7
    4fe0:	88 23       	and	r24, r24
    4fe2:	99 f1       	breq	.+102    	; 0x504a <tickUI(unsigned char)+0x19e>
    4fe4:	80 91 e8 01 	lds	r24, 0x01E8
    4fe8:	88 23       	and	r24, r24
    4fea:	79 f1       	breq	.+94     	; 0x504a <tickUI(unsigned char)+0x19e>

#ifdef SUPPORT_BAKE
            if(inBakeMode())
              {
              // Third (lengthened) flash to indicate BAKE mode.
              LED_HEATCALL_OFF();
    4fec:	5c 9a       	sbi	0x0b, 4	; 11
// Small low-power sleep.
#define SMALL_PAUSE_MS 30
static void inline smallPause() { nap(WDTO_30MS); }
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define MEDIUM_PAUSE_MS 60
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
    4fee:	82 e0       	ldi	r24, 0x02	; 2
    4ff0:	0e 94 29 16 	call	0x2c52	; 0x2c52 <nap(signed char)>
              mediumPause(); // Note different flash off time to try to distinguish this last flash.
              LED_HEATCALL_ON();
    4ff4:	5c 98       	cbi	0x0b, 4	; 11
              // Makes tiny|small|medium flash for eco|OK|comfort temperature target.
              if(isEcoTemperature(wt)) { tinyPause(); }
    4ff6:	02 31       	cpi	r16, 0x12	; 18
    4ff8:	10 f4       	brcc	.+4      	; 0x4ffe <tickUI(unsigned char)+0x152>
// Very tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define VERYTINY_PAUSE_MS 5
static void inline veryTinyPause() { sleepLowPowerMs(VERYTINY_PAUSE_MS); }
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define TINY_PAUSE_MS 15
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    4ffa:	80 e0       	ldi	r24, 0x00	; 0
    4ffc:	05 c0       	rjmp	.+10     	; 0x5008 <tickUI(unsigned char)+0x15c>
              else if(!isComfortTemperature(wt)) { smallPause(); }
    4ffe:	07 31       	cpi	r16, 0x17	; 23
    5000:	10 f4       	brcc	.+4      	; 0x5006 <tickUI(unsigned char)+0x15a>
// Small low-power sleep.
#define SMALL_PAUSE_MS 30
static void inline smallPause() { nap(WDTO_30MS); }
    5002:	81 e0       	ldi	r24, 0x01	; 1
    5004:	01 c0       	rjmp	.+2      	; 0x5008 <tickUI(unsigned char)+0x15c>
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define MEDIUM_PAUSE_MS 60
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
    5006:	82 e0       	ldi	r24, 0x02	; 2
    5008:	0e 94 29 16 	call	0x2c52	; 0x2c52 <nap(signed char)>
    500c:	1e c0       	rjmp	.+60     	; 0x504a <tickUI(unsigned char)+0x19e>
    // Even in FROST mode, and if actually calling for heat (eg opening the rad valve significantly, etc)
    // then emit a tiny double flash on every 4th tick.
    // This call for heat may be frost protection or pre-warming / anticipating demand.
    // DHD20130528: new 4th-tick flash in FROST mode...
    // DHD20131223: do not flash if the room is dark so as to save energy and avoid disturbing sleep, etc.
    else if(forthTick && !isRoomDark() && isControlledValveOpen() && (getTRVPercentOpen() >= getMinValvePcReallyOpen()))
    500e:	00 23       	and	r16, r16
    5010:	e1 f0       	breq	.+56     	; 0x504a <tickUI(unsigned char)+0x19e>
    5012:	0e 94 25 07 	call	0xe4a	; 0xe4a <isRoomLit()>
    5016:	88 23       	and	r24, r24
    5018:	c1 f0       	breq	.+48     	; 0x504a <tickUI(unsigned char)+0x19e>
    501a:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <isControlledValveOpen()>
    501e:	88 23       	and	r24, r24
    5020:	a1 f0       	breq	.+40     	; 0x504a <tickUI(unsigned char)+0x19e>
    5022:	0e 94 9a 07 	call	0xf34	; 0xf34 <getTRVPercentOpen()>
    5026:	18 2f       	mov	r17, r24
    5028:	0e 94 1c 08 	call	0x1038	; 0x1038 <getMinValvePcReallyOpen()>
    502c:	18 17       	cp	r17, r24
    502e:	68 f0       	brcs	.+26     	; 0x504a <tickUI(unsigned char)+0x19e>
      {
      // Double flash every 4th tick indicates call for heat while in FROST MODE (matches call for heat in WARM mode).
      LED_HEATCALL_ON(); // flash
    5030:	5c 98       	cbi	0x0b, 4	; 11
// This may be achieved in part by dynamically slowing the CPU clock if possible.
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed((((MIN_CPU_HZ * (ms)) + 2000) / 4000) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    5032:	85 e2       	ldi	r24, 0x25	; 37
    5034:	90 e0       	ldi	r25, 0x00	; 0
    5036:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
      veryTinyPause();
      LED_HEATCALL_OFF();
    503a:	5c 9a       	sbi	0x0b, 4	; 11
      offPause();
    503c:	0e 94 44 27 	call	0x4e88	; 0x4e88 <offPause()>
      LED_HEATCALL_ON(); // flash
    5040:	5c 98       	cbi	0x0b, 4	; 11
    5042:	85 e2       	ldi	r24, 0x25	; 37
    5044:	90 e0       	ldi	r25, 0x00	; 0
    5046:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
      veryTinyPause();
      }

    // Enforce any changes that may have been driven by other UI components (ie other than MODE button).
    // Eg adjustment of temp pot / eco bias changing scheduled state.
    if(statusChange)
    504a:	80 91 eb 01 	lds	r24, 0x01EB
    504e:	88 23       	and	r24, r24
    5050:	79 f0       	breq	.+30     	; 0x5070 <tickUI(unsigned char)+0x1c4>
      {
      static bool prevScheduleStatus;
      const bool currentScheduleStatus = isAnyScheduleOnWARMNow();
    5052:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <isAnyScheduleOnWARMNow()>
    5056:	98 2f       	mov	r25, r24
      if(currentScheduleStatus != prevScheduleStatus)
    5058:	80 91 ec 01 	lds	r24, 0x01EC
    505c:	98 17       	cp	r25, r24
    505e:	41 f0       	breq	.+16     	; 0x5070 <tickUI(unsigned char)+0x1c4>
        {
        prevScheduleStatus = currentScheduleStatus;
    5060:	90 93 ec 01 	sts	0x01EC, r25

// Has the effect of forcing the warm mode to the specified state immediately.
// If forcing to FROST mode then any pending BAKE time is cancelled.
static void setWarmMode(const bool warm)
  {
  isWarmMode = warm;
    5064:	90 93 e7 01 	sts	0x01E7, r25
  isWarmModeDebounced = warm;
    5068:	90 93 e6 01 	sts	0x01E6, r25
static bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
// TODO: this is not fully 'debounced', ie could flip between WARM/BAKE with button held down.
bool inBakeModeDebounced() { return(isWarmModeDebounced && (0 != bakeCountdownM)); }
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
    506c:	10 92 e8 01 	sts	0x01E8, r1
        }
      }
    }

  // Ensure LED forced off unconditionally at least once each cycle.
  LED_HEATCALL_OFF();
    5070:	5c 9a       	sbi	0x0b, 4	; 11

#ifdef LEARN_BUTTON_AVAILABLE
  // Handle learn button if supported and if is currently pressed.
  if(fastDigitalRead(BUTTON_LEARN_L) == LOW)
    5072:	18 99       	sbic	0x03, 0	; 3
    5074:	02 c0       	rjmp	.+4      	; 0x507a <tickUI(unsigned char)+0x1ce>
    {
    handleLEARN(0);
    5076:	80 e0       	ldi	r24, 0x00	; 0
    5078:	03 c0       	rjmp	.+6      	; 0x5080 <tickUI(unsigned char)+0x1d4>
    LED_HEATCALL_ON(); // Leave heatcall LED on while learn button held down.
    }

#if defined(BUTTON_LEARN2_L)
  // Handle second learn button if supported and currently pressed and primary learn button not pressed.
  else if(fastDigitalRead(BUTTON_LEARN2_L) == LOW)
    507a:	4b 99       	sbic	0x09, 3	; 9
    507c:	06 c0       	rjmp	.+12     	; 0x508a <tickUI(unsigned char)+0x1de>
    {
    handleLEARN(1);
    507e:	81 e0       	ldi	r24, 0x01	; 1
    5080:	0e 94 c7 21 	call	0x438e	; 0x438e <handleLEARN(unsigned char)>
    markUIControlUsed(); // Mark controls used and room as currently occupied given button press.
    5084:	0e 94 4b 27 	call	0x4e96	; 0x4e96 <markUIControlUsed()>
    LED_HEATCALL_ON(); // Leave heatcall LED on while learn button held down.
    5088:	5c 98       	cbi	0x0b, 4	; 11
    }
#endif
#endif

  const bool statusChanged = statusChange;
    508a:	80 91 eb 01 	lds	r24, 0x01EB
  statusChange = false; // Potential race.
    508e:	10 92 eb 01 	sts	0x01EB, r1
  return(statusChanged);
  }
    5092:	1f 91       	pop	r17
    5094:	0f 91       	pop	r16
    5096:	08 95       	ret
// TODO: this is not fully 'debounced', ie could flip between WARM/BAKE with button held down.
bool inBakeModeDebounced() { return(isWarmModeDebounced && (0 != bakeCountdownM)); }
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
// Start/restart 'bake' mode and timeout.
void startBake() { isWarmMode = true; bakeCountdownM = BAKE_MAX_M; }
    5098:	81 e0       	ldi	r24, 0x01	; 1
    509a:	80 93 e7 01 	sts	0x01E7, r24
    509e:	8e e1       	ldi	r24, 0x1E	; 30
    50a0:	80 93 e8 01 	sts	0x01E8, r24
#ifdef SUPPORT_BAKE
    else if(!inBakeMode()) // Was in WARM mode, move to BAKE (with full timeout to run).
      {
      startBake();
      // 2 x flash + one longer flash 'heat call' to indicate now in BAKE mode.
      LED_HEATCALL_OFF();
    50a4:	5c 9a       	sbi	0x0b, 4	; 11
      offPause();
    50a6:	0e 94 44 27 	call	0x4e88	; 0x4e88 <offPause()>
      LED_HEATCALL_ON();
    50aa:	5c 98       	cbi	0x0b, 4	; 11
// Very tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define VERYTINY_PAUSE_MS 5
static void inline veryTinyPause() { sleepLowPowerMs(VERYTINY_PAUSE_MS); }
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define TINY_PAUSE_MS 15
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    50ac:	80 e0       	ldi	r24, 0x00	; 0
    50ae:	0e 94 29 16 	call	0x2c52	; 0x2c52 <nap(signed char)>
      tinyPause();
      LED_HEATCALL_OFF();
    50b2:	5c 9a       	sbi	0x0b, 4	; 11
// Small low-power sleep.
#define SMALL_PAUSE_MS 30
static void inline smallPause() { nap(WDTO_30MS); }
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define MEDIUM_PAUSE_MS 60
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
    50b4:	82 e0       	ldi	r24, 0x02	; 2
    50b6:	0e 94 29 16 	call	0x2c52	; 0x2c52 <nap(signed char)>
      mediumPause(); // Note different flash on/off duty cycle to try to distinguish this last flash.
      LED_HEATCALL_ON();
    50ba:	5c 98       	cbi	0x0b, 4	; 11
    50bc:	82 e0       	ldi	r24, 0x02	; 2
    50be:	0e 94 29 16 	call	0x2c52	; 0x2c52 <nap(signed char)>
    50c2:	d6 cf       	rjmp	.-84     	; 0x5070 <tickUI(unsigned char)+0x1c4>

000050c4 <global constructors keyed to _Z5panicv>:
  '/',
  __DATE__[0], __DATE__[1], __DATE__[2],
  '/',
  __DATE__[4], __DATE__[5],
  '\0'
  };
    50c4:	22 e3       	ldi	r18, 0x32	; 50
    50c6:	20 93 06 01 	sts	0x0106, r18
    50ca:	90 e3       	ldi	r25, 0x30	; 48
    50cc:	90 93 07 01 	sts	0x0107, r25
    50d0:	81 e3       	ldi	r24, 0x31	; 49
    50d2:	80 93 08 01 	sts	0x0108, r24
    50d6:	84 e3       	ldi	r24, 0x34	; 52
    50d8:	80 93 09 01 	sts	0x0109, r24
    50dc:	8f e4       	ldi	r24, 0x4F	; 79
    50de:	80 93 0b 01 	sts	0x010B, r24
    50e2:	83 e6       	ldi	r24, 0x63	; 99
    50e4:	80 93 0c 01 	sts	0x010C, r24
    50e8:	84 e7       	ldi	r24, 0x74	; 116
    50ea:	80 93 0d 01 	sts	0x010D, r24
    50ee:	20 93 0f 01 	sts	0x010F, r18
    50f2:	90 93 10 01 	sts	0x0110, r25
  else if(getSubCycleTime() >= nearOverrunThreshold)
    {
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("?O"); // Near overrun.  Note 2ms/char to send...
    }
#endif
  }
    50f6:	08 95       	ret

000050f8 <pollIO(bool)>:
// Call this to do an I/O poll if needed; returns true if something useful happened.
// This call should typically take << 1ms at 1MHz CPU.
// Does not change CPU clock speeds, mess with interrupts (other than possible brief blocking), or sleep.
// Limits actual poll rate to something like once every 32ms, unless force is true.
//   * force if true then force full poll on every call (ie do not internally rate-limit)
bool pollIO(const bool force)
    50f8:	1f 93       	push	r17
    50fa:	18 2f       	mov	r17, r24
  {
#if defined(ENABLE_BOILER_HUB) && defined(USE_MODULE_FHT8VSIMPLE)
  if(inHubMode())
    50fc:	0e 94 a0 07 	call	0xf40	; 0xf40 <getMinBoilerOnMinutes()>
    5100:	88 23       	and	r24, r24
    5102:	99 f0       	breq	.+38     	; 0x512a <pollIO(bool)+0x32>
    {
    static volatile uint8_t _pO_lastPoll;

    // Poll RX at most about every ~32ms to help approx match spil rate when called in loop with 30ms nap.
    const uint8_t sct = getSubCycleTime();
    5104:	20 91 b2 00 	lds	r18, 0x00B2
    if(force || ((0 == (sct & 3)) && (sct != _pO_lastPoll)))
    5108:	11 23       	and	r17, r17
    510a:	51 f4       	brne	.+20     	; 0x5120 <pollIO(bool)+0x28>
    510c:	82 2f       	mov	r24, r18
    510e:	90 e0       	ldi	r25, 0x00	; 0
    5110:	83 70       	andi	r24, 0x03	; 3
    5112:	90 70       	andi	r25, 0x00	; 0
    5114:	89 2b       	or	r24, r25
    5116:	49 f4       	brne	.+18     	; 0x512a <pollIO(bool)+0x32>
    5118:	80 91 f3 01 	lds	r24, 0x01F3
    511c:	28 17       	cp	r18, r24
    511e:	29 f0       	breq	.+10     	; 0x512a <pollIO(bool)+0x32>
      {
      _pO_lastPoll = sct;
    5120:	20 93 f3 01 	sts	0x01F3, r18
      if(FHT8VCallForHeatPoll()) // Check if call-for-heat has been overheard.
    5124:	0e 94 56 0e 	call	0x1cac	; 0x1cac <FHT8VCallForHeatPoll()>
    5128:	01 c0       	rjmp	.+2      	; 0x512c <pollIO(bool)+0x34>
    512a:	80 e0       	ldi	r24, 0x00	; 0
        { return(true); }
      }
    }
#endif
  return(false);
  }
    512c:	1f 91       	pop	r17
    512e:	08 95       	ret

00005130 <serialPrintlnBuildVersion()>:
  };
// Version (code/board) information printed as one line to serial (with line-end, and flushed); machine- and human- parseable.
// Format: "board VXXXX REVY; code YYYY/Mmm/DD HH:MM:SS".
void serialPrintlnBuildVersion()
  {
  serialPrintAndFlush(F("board V0.2 REV"));
    5130:	86 e0       	ldi	r24, 0x06	; 6
    5132:	97 e0       	ldi	r25, 0x07	; 7
    5134:	0e 94 3f 20 	call	0x407e	; 0x407e <serialPrintAndFlush(__FlashStringHelper const*)>
  serialPrintAndFlush(V0p2_REV);
    5138:	84 e0       	ldi	r24, 0x04	; 4
    513a:	90 e0       	ldi	r25, 0x00	; 0
    513c:	6a e0       	ldi	r22, 0x0A	; 10
    513e:	70 e0       	ldi	r23, 0x00	; 0
    5140:	0e 94 0d 20 	call	0x401a	; 0x401a <serialPrintAndFlush(int, int)>
  serialPrintAndFlush(F("; code "));
    5144:	8e ef       	ldi	r24, 0xFE	; 254
    5146:	96 e0       	ldi	r25, 0x06	; 6
    5148:	0e 94 3f 20 	call	0x407e	; 0x407e <serialPrintAndFlush(__FlashStringHelper const*)>
  serialPrintAndFlush(_YYYYMmmDD);
    514c:	86 e0       	ldi	r24, 0x06	; 6
    514e:	91 e0       	ldi	r25, 0x01	; 1
    5150:	0e 94 29 20 	call	0x4052	; 0x4052 <serialPrintAndFlush(char const*)>
  serialPrintAndFlush(F(" " __TIME__));
    5154:	84 ef       	ldi	r24, 0xF4	; 244
    5156:	96 e0       	ldi	r25, 0x06	; 6
    5158:	0e 94 3f 20 	call	0x407e	; 0x407e <serialPrintAndFlush(__FlashStringHelper const*)>
  serialPrintlnAndFlush();
    515c:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <serialPrintlnAndFlush()>
  }
    5160:	08 95       	ret

00005162 <loop>:
static uint8_t boilerNoCallM;
#endif

// The main control loop routine runs forever.
// Note: exiting loop() and re-entering can take a little while, handling Arduino background tasks such as serial.
void loop()
    5162:	3f 92       	push	r3
    5164:	4f 92       	push	r4
    5166:	5f 92       	push	r5
    5168:	6f 92       	push	r6
    516a:	7f 92       	push	r7
    516c:	8f 92       	push	r8
    516e:	9f 92       	push	r9
    5170:	af 92       	push	r10
    5172:	bf 92       	push	r11
    5174:	cf 92       	push	r12
    5176:	df 92       	push	r13
    5178:	ef 92       	push	r14
    517a:	ff 92       	push	r15
    517c:	0f 93       	push	r16
    517e:	1f 93       	push	r17
    5180:	df 93       	push	r29
    5182:	cf 93       	push	r28
    5184:	cd b7       	in	r28, 0x3d	; 61
    5186:	de b7       	in	r29, 0x3e	; 62
    5188:	c0 55       	subi	r28, 0x50	; 80
    518a:	d0 40       	sbci	r29, 0x00	; 0
    518c:	0f b6       	in	r0, 0x3f	; 63
    518e:	f8 94       	cli
    5190:	de bf       	out	0x3e, r29	; 62
    5192:	0f be       	out	0x3f, r0	; 63
    5194:	cd bf       	out	0x3d, r28	; 61

  // Set up some variables before sleeping to minimise delay/jitter after the RTC tick.
  bool showStatus = false; // Show status at end of loop?

  // Use the zeroth second in each minute to force extra deep device sleeps/resets, etc.
  const bool second0 = (0 == TIME_LSD);
    5196:	dd 24       	eor	r13, r13
    5198:	80 91 ed 01 	lds	r24, 0x01ED
    519c:	88 23       	and	r24, r24
    519e:	11 f4       	brne	.+4      	; 0x51a4 <loop+0x42>
    51a0:	dd 24       	eor	r13, r13
    51a2:	d3 94       	inc	r13
  // Sensor readings are taken late in each minute (where they are taken)
  // and if possible noise and heat and light should be minimised in this part of each minute to improve readings.
//  const bool sensorReading30s = (TIME_LSD >= 30);
  // Sensor readings and (stats transmissions) are nominally on a 4-minute cycle.
  const uint8_t minuteFrom4 = (minuteCount & 3);
    51a4:	80 91 ee 01 	lds	r24, 0x01EE
    51a8:	83 70       	andi	r24, 0x03	; 3
  // The 0th minute in each group of four is always used for measuring where possible (possibly amongst others)
  // and where possible locally-generated noise and heat and light should be minimised in this minute to give the best possible readings.
  // This is the first (0th) minute in each group of four.
  const bool minute0From4ForSensors = (0 == minuteFrom4);
    51aa:	bb 24       	eor	r11, r11
    51ac:	88 23       	and	r24, r24
    51ae:	11 f4       	brne	.+4      	; 0x51b4 <loop+0x52>
    51b0:	bb 24       	eor	r11, r11
    51b2:	b3 94       	inc	r11
  // True the minute after all sensors should have been sampled.
  const bool minute1From4AfterSensors = (1 == minuteFrom4);
    51b4:	88 24       	eor	r8, r8
    51b6:	81 30       	cpi	r24, 0x01	; 1
    51b8:	11 f4       	brne	.+4      	; 0x51be <loop+0x5c>
    51ba:	88 24       	eor	r8, r8
    51bc:	83 94       	inc	r8

  // Note last-measured battery status.
  const bool batteryLow = isBatteryLow();
    51be:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <isBatteryLow()>
    51c2:	98 2e       	mov	r9, r24
    (batteryLow || !inWarmModeDebounced()) && // Don't spare the batteries unless low, or in FROST mode (which should be most of the time).
#if defined(ENABLE_BOILER_HUB)
    (0 == boilerCountdownTicks) && // Unless the boiler is off, stay responsive.
#endif
    (!isControlledValveOpen()) &&  // Run at full speed until the FHT8V valve should actually have shut and the boiler gone off.
    (0 == getTRVPercentOpen()); // Run at full speed until not nominally demanding heat, eg even during FROST mode or pre-heating.
    51c4:	88 23       	and	r24, r24
    51c6:	21 f4       	brne	.+8      	; 0x51d0 <loop+0x6e>
    51c8:	0e 94 aa 20 	call	0x4154	; 0x4154 <inWarmModeDebounced()>
    51cc:	88 23       	and	r24, r24
    51ce:	89 f4       	brne	.+34     	; 0x51f2 <loop+0x90>
    51d0:	80 91 ef 01 	lds	r24, 0x01EF
    51d4:	90 91 f0 01 	lds	r25, 0x01F0
    51d8:	89 2b       	or	r24, r25
    51da:	59 f4       	brne	.+22     	; 0x51f2 <loop+0x90>
    51dc:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <isControlledValveOpen()>
    51e0:	88 23       	and	r24, r24
    51e2:	39 f4       	brne	.+14     	; 0x51f2 <loop+0x90>
    51e4:	0e 94 9a 07 	call	0xf34	; 0xf34 <getTRVPercentOpen()>
    51e8:	88 23       	and	r24, r24
    51ea:	19 f4       	brne	.+6      	; 0x51f2 <loop+0x90>
    51ec:	aa 24       	eor	r10, r10
    51ee:	a3 94       	inc	r10
    51f0:	01 c0       	rjmp	.+2      	; 0x51f4 <loop+0x92>
    51f2:	aa 24       	eor	r10, r10
  // Conversely, if not true, should have time to savely log outputs, etc.
  const uint8_t nearOverrunThreshold = GSCT_MAX - 8; // ~64ms/~32 serial TX chars of grace time...
  bool tooNearOverrun = false; // Set flag that can be checked later.

  // Is this unit currently in central hub listener mode?
  const bool hubMode = inHubMode();
    51f4:	0e 94 a0 07 	call	0xf40	; 0xf40 <getMinBoilerOnMinutes()>
    51f8:	c8 2e       	mov	r12, r24
    51fa:	88 23       	and	r24, r24
    51fc:	11 f0       	breq	.+4      	; 0x5202 <loop+0xa0>
    51fe:	cc 24       	eor	r12, r12
    5200:	c3 94       	inc	r12
  // Check (early) for any remote stats arriving to dump.
  // This is designed to be easy to pick up by reading the serial output.
  // The output is terse to avoid taking too long and possibly delaying other stuff too far.
  // Avoid doing this at all if too near the end of the cycle and risking overrun,
  // leaving any message queued, hoping it does not get overwritten.
  if(getSubCycleTime() >= nearOverrunThreshold) { tooNearOverrun = true; }
    5202:	80 91 b2 00 	lds	r24, 0x00B2
    5206:	87 3f       	cpi	r24, 0xF7	; 247
    5208:	18 f0       	brcs	.+6      	; 0x5210 <loop+0xae>
    520a:	ee 24       	eor	r14, r14
    520c:	e3 94       	inc	r14
    520e:	60 c0       	rjmp	.+192    	; 0x52d0 <loop+0x16e>
  else
    {
    FullStatsMessageCore_t stats;
    getLastCoreStats(&stats);
    5210:	ce 01       	movw	r24, r28
    5212:	01 96       	adiw	r24, 0x01	; 1
    5214:	0e 94 4a 13 	call	0x2694	; 0x2694 <getLastCoreStats(FullStatsMessageCore*)>
    if(stats.containsID)
    5218:	89 81       	ldd	r24, Y+1	; 0x01
    521a:	80 ff       	sbrs	r24, 0
    521c:	58 c0       	rjmp	.+176    	; 0x52ce <loop+0x16c>
      {
      // Dump (remote) stats field '@<hexnodeID>;TnnCh[P;]'
      // where the T field shows temperature in C with a hex digit after the binary point indicated by C
      // and the optional P field indicates low power.
      serialPrintAndFlush(LINE_START_CHAR_RSTATS);
    521e:	80 e4       	ldi	r24, 0x40	; 64
    5220:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <serialPrintAndFlush(char)>
      serialPrintAndFlush((((uint16_t)stats.id0) << 8) | stats.id1, HEX);
    5224:	9a 81       	ldd	r25, Y+2	; 0x02
    5226:	80 e0       	ldi	r24, 0x00	; 0
    5228:	2b 81       	ldd	r18, Y+3	; 0x03
    522a:	30 e0       	ldi	r19, 0x00	; 0
    522c:	82 2b       	or	r24, r18
    522e:	93 2b       	or	r25, r19
    5230:	60 e1       	ldi	r22, 0x10	; 16
    5232:	70 e0       	ldi	r23, 0x00	; 0
    5234:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <serialPrintAndFlush(unsigned int, int)>
      if(stats.containsTempAndPower)
    5238:	89 81       	ldd	r24, Y+1	; 0x01
    523a:	81 ff       	sbrs	r24, 1
    523c:	2b c0       	rjmp	.+86     	; 0x5294 <loop+0x132>
        {
        serialPrintAndFlush(F(";T"));
    523e:	84 e3       	ldi	r24, 0x34	; 52
    5240:	95 e0       	ldi	r25, 0x05	; 5
    5242:	0e 94 3f 20 	call	0x407e	; 0x407e <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush(stats.tempAndPower.tempC16 >> 4, DEC);
    5246:	8c 81       	ldd	r24, Y+4	; 0x04
    5248:	2d 81       	ldd	r18, Y+5	; 0x05
    524a:	92 2f       	mov	r25, r18
    524c:	9f 77       	andi	r25, 0x7F	; 127
    524e:	88 0f       	add	r24, r24
    5250:	99 1f       	adc	r25, r25
    5252:	45 e0       	ldi	r20, 0x05	; 5
    5254:	95 95       	asr	r25
    5256:	87 95       	ror	r24
    5258:	4a 95       	dec	r20
    525a:	e1 f7       	brne	.-8      	; 0x5254 <loop+0xf2>
    525c:	6a e0       	ldi	r22, 0x0A	; 10
    525e:	70 e0       	ldi	r23, 0x00	; 0
    5260:	0e 94 0d 20 	call	0x401a	; 0x401a <serialPrintAndFlush(int, int)>
        serialPrintAndFlush('C');
    5264:	83 e4       	ldi	r24, 0x43	; 67
    5266:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <serialPrintAndFlush(char)>
        serialPrintAndFlush(stats.tempAndPower.tempC16 & 0xf, HEX);
    526a:	8c 81       	ldd	r24, Y+4	; 0x04
    526c:	2d 81       	ldd	r18, Y+5	; 0x05
    526e:	92 2f       	mov	r25, r18
    5270:	9f 77       	andi	r25, 0x7F	; 127
    5272:	88 0f       	add	r24, r24
    5274:	99 1f       	adc	r25, r25
    5276:	95 95       	asr	r25
    5278:	87 95       	ror	r24
    527a:	8f 70       	andi	r24, 0x0F	; 15
    527c:	90 70       	andi	r25, 0x00	; 0
    527e:	60 e1       	ldi	r22, 0x10	; 16
    5280:	70 e0       	ldi	r23, 0x00	; 0
    5282:	0e 94 0d 20 	call	0x401a	; 0x401a <serialPrintAndFlush(int, int)>
        if(stats.tempAndPower.powerLow) { serialPrintAndFlush(F(";P")); } // Insert power-low field if needed.
    5286:	8d 81       	ldd	r24, Y+5	; 0x05
    5288:	87 ff       	sbrs	r24, 7
    528a:	04 c0       	rjmp	.+8      	; 0x5294 <loop+0x132>
    528c:	81 e3       	ldi	r24, 0x31	; 49
    528e:	95 e0       	ldi	r25, 0x05	; 5
    5290:	0e 94 3f 20 	call	0x407e	; 0x407e <serialPrintAndFlush(__FlashStringHelper const*)>
        }
      if(stats.containsAmbL)
    5294:	89 81       	ldd	r24, Y+1	; 0x01
    5296:	82 ff       	sbrs	r24, 2
    5298:	0a c0       	rjmp	.+20     	; 0x52ae <loop+0x14c>
        {
        serialPrintAndFlush(F(";L"));
    529a:	8e e2       	ldi	r24, 0x2E	; 46
    529c:	95 e0       	ldi	r25, 0x05	; 5
    529e:	0e 94 3f 20 	call	0x407e	; 0x407e <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush(stats.ambL);
    52a2:	8e 81       	ldd	r24, Y+6	; 0x06
    52a4:	90 e0       	ldi	r25, 0x00	; 0
    52a6:	6a e0       	ldi	r22, 0x0A	; 10
    52a8:	70 e0       	ldi	r23, 0x00	; 0
    52aa:	0e 94 0d 20 	call	0x401a	; 0x401a <serialPrintAndFlush(int, int)>
        }
      if(0 != stats.occ)
    52ae:	8f 81       	ldd	r24, Y+7	; 0x07
    52b0:	83 70       	andi	r24, 0x03	; 3
    52b2:	59 f0       	breq	.+22     	; 0x52ca <loop+0x168>
        {
        serialPrintAndFlush(F(";O"));
    52b4:	8b e2       	ldi	r24, 0x2B	; 43
    52b6:	95 e0       	ldi	r25, 0x05	; 5
    52b8:	0e 94 3f 20 	call	0x407e	; 0x407e <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush(stats.occ);
    52bc:	8f 81       	ldd	r24, Y+7	; 0x07
    52be:	83 70       	andi	r24, 0x03	; 3
    52c0:	90 e0       	ldi	r25, 0x00	; 0
    52c2:	6a e0       	ldi	r22, 0x0A	; 10
    52c4:	70 e0       	ldi	r23, 0x00	; 0
    52c6:	0e 94 0d 20 	call	0x401a	; 0x401a <serialPrintAndFlush(int, int)>
        }
      serialPrintlnAndFlush();
    52ca:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <serialPrintlnAndFlush()>
    52ce:	ee 24       	eor	r14, r14
  // and could be disabled if no local valve is being run to provide better response to remote nodes.
  bool hubModeBoilerOn = false; // If true then remote call for heat is in progress.
#if defined(USE_MODULE_FHT8VSIMPLE)
  bool needsToEavesdrop = false; // By default assume no need to eavesdrop.
#endif
  if(hubMode)
    52d0:	cc 20       	and	r12, r12
    52d2:	11 f4       	brne	.+4      	; 0x52d8 <loop+0x176>
    52d4:	10 e0       	ldi	r17, 0x00	; 0
    52d6:	9c c0       	rjmp	.+312    	; 0x5410 <loop+0x2ae>
    {
#if defined(USE_MODULE_FHT8VSIMPLE)
    // Final poll to to cover up to end of previous minor loop.
    // Keep time from here to following SetupToEavesdropOnFHT8V() as short as possible to avoid missing remote calls.
    FHT8VCallForHeatPoll();
    52d8:	0e 94 56 0e 	call	0x1cac	; 0x1cac <FHT8VCallForHeatPoll()>

    // Fetch and clear current pending sample house code calling for heat.
    const uint16_t hcRequest = FHT8VCallForHeatHeardGetAndClear();
    52dc:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <FHT8VCallForHeatHeardGetAndClear()>
    52e0:	8c 01       	movw	r16, r24
    const bool heardIt = (hcRequest != ((uint16_t)~0));
    52e2:	ff 24       	eor	r15, r15
    52e4:	8f ef       	ldi	r24, 0xFF	; 255
    52e6:	0f 3f       	cpi	r16, 0xFF	; 255
    52e8:	18 07       	cpc	r17, r24
    52ea:	11 f0       	breq	.+4      	; 0x52f0 <loop+0x18e>
    52ec:	ff 24       	eor	r15, r15
    52ee:	f3 94       	inc	r15
    // Don't log call for hear if near overrun,
    // and leave any error queued for next time.
    if(getSubCycleTime() >= nearOverrunThreshold) { tooNearOverrun = true; }
    52f0:	80 91 b2 00 	lds	r24, 0x00B2
    52f4:	87 3f       	cpi	r24, 0xF7	; 247
    52f6:	78 f5       	brcc	.+94     	; 0x5356 <loop+0x1f4>
    else
      {
      if(heardIt)
    52f8:	ff 20       	and	r15, r15
    52fa:	d9 f0       	breq	.+54     	; 0x5332 <loop+0x1d0>
        {
        DEBUG_SERIAL_TIMESTAMP();
    52fc:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <_debug_serial_timestamp()>
        DEBUG_SERIAL_PRINT(' ');
    5300:	80 e2       	ldi	r24, 0x20	; 32
    5302:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <serialPrintAndFlush(char)>
        serialPrintAndFlush(F("CfH ")); // Call for heat from 
    5306:	86 e2       	ldi	r24, 0x26	; 38
    5308:	95 e0       	ldi	r25, 0x05	; 5
    530a:	0e 94 3f 20 	call	0x407e	; 0x407e <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush((hcRequest >> 8) & 0xff);
    530e:	81 2f       	mov	r24, r17
    5310:	90 e0       	ldi	r25, 0x00	; 0
    5312:	6a e0       	ldi	r22, 0x0A	; 10
    5314:	70 e0       	ldi	r23, 0x00	; 0
    5316:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <serialPrintAndFlush(unsigned int, int)>
        serialPrintAndFlush(' ');
    531a:	80 e2       	ldi	r24, 0x20	; 32
    531c:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <serialPrintAndFlush(char)>
        serialPrintAndFlush(hcRequest & 0xff);
    5320:	c8 01       	movw	r24, r16
    5322:	90 70       	andi	r25, 0x00	; 0
    5324:	6a e0       	ldi	r22, 0x0A	; 10
    5326:	70 e0       	ldi	r23, 0x00	; 0
    5328:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <serialPrintAndFlush(unsigned int, int)>
        serialPrintlnAndFlush();
    532c:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <serialPrintlnAndFlush()>
    5330:	16 c0       	rjmp	.+44     	; 0x535e <loop+0x1fc>
        }
      else
        {
        // Check for error if nothing received.
        const uint8_t err = FHT8VLastRXErrGetAndClear();
    5332:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <FHT8VLastRXErrGetAndClear()>
    5336:	18 2f       	mov	r17, r24
        if(0 != err)
    5338:	88 23       	and	r24, r24
    533a:	79 f1       	breq	.+94     	; 0x539a <loop+0x238>
          {
          serialPrintAndFlush(F("!RXerr F"));
    533c:	8d e1       	ldi	r24, 0x1D	; 29
    533e:	95 e0       	ldi	r25, 0x05	; 5
    5340:	0e 94 3f 20 	call	0x407e	; 0x407e <serialPrintAndFlush(__FlashStringHelper const*)>
          serialPrintAndFlush(err);
    5344:	81 2f       	mov	r24, r17
    5346:	90 e0       	ldi	r25, 0x00	; 0
    5348:	6a e0       	ldi	r22, 0x0A	; 10
    534a:	70 e0       	ldi	r23, 0x00	; 0
    534c:	0e 94 0d 20 	call	0x401a	; 0x401a <serialPrintAndFlush(int, int)>
          serialPrintlnAndFlush();
    5350:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <serialPrintlnAndFlush()>
    5354:	22 c0       	rjmp	.+68     	; 0x539a <loop+0x238>
    5356:	ee 24       	eor	r14, r14
    5358:	e3 94       	inc	r14
        }
      }

    // Record call for heat, both to start boiler-on cycle and to defer need to listen again. 
    // Optimisation: may be able to stop RX if boiler is on for local demand (can measure local temp better: less self-heating).
    if(heardIt)
    535a:	ff 20       	and	r15, r15
    535c:	f1 f0       	breq	.+60     	; 0x539a <loop+0x238>
      {
      if(0 == boilerCountdownTicks)
    535e:	80 91 ef 01 	lds	r24, 0x01EF
    5362:	90 91 f0 01 	lds	r25, 0x01F0
    5366:	89 2b       	or	r24, r25
    5368:	59 f4       	brne	.+22     	; 0x5380 <loop+0x21e>
        {
        if(getSubCycleTime() >= nearOverrunThreshold) { tooNearOverrun = true; }
    536a:	80 91 b2 00 	lds	r24, 0x00B2
    536e:	87 3f       	cpi	r24, 0xF7	; 247
    5370:	18 f0       	brcs	.+6      	; 0x5378 <loop+0x216>
    5372:	ee 24       	eor	r14, r14
    5374:	e3 94       	inc	r14
    5376:	04 c0       	rjmp	.+8      	; 0x5380 <loop+0x21e>
        else { serialPrintlnAndFlush(F("RCfH1")); } // Remote call for heat on.
    5378:	87 e1       	ldi	r24, 0x17	; 23
    537a:	95 e0       	ldi	r25, 0x05	; 5
    537c:	0e 94 55 20 	call	0x40aa	; 0x40aa <serialPrintlnAndFlush(__FlashStringHelper const*)>
        }
      boilerCountdownTicks = getMinBoilerOnMinutes() * (60/MAIN_TICK_S);
    5380:	0e 94 a0 07 	call	0xf40	; 0xf40 <getMinBoilerOnMinutes()>
    5384:	9e e1       	ldi	r25, 0x1E	; 30
    5386:	89 9f       	mul	r24, r25
    5388:	c0 01       	movw	r24, r0
    538a:	11 24       	eor	r1, r1
    538c:	90 93 f0 01 	sts	0x01F0, r25
    5390:	80 93 ef 01 	sts	0x01EF, r24
      boilerNoCallM = 0; // No time has passed since the last call.
    5394:	10 92 f1 01 	sts	0x01F1, r1
    5398:	22 c0       	rjmp	.+68     	; 0x53de <loop+0x27c>
      }
    // Else count down towards boiler off.
    else if(boilerCountdownTicks > 0)
    539a:	80 91 ef 01 	lds	r24, 0x01EF
    539e:	90 91 f0 01 	lds	r25, 0x01F0
    53a2:	00 97       	sbiw	r24, 0x00	; 0
    53a4:	99 f0       	breq	.+38     	; 0x53cc <loop+0x26a>
      {
      if(0 == --boilerCountdownTicks)
    53a6:	01 97       	sbiw	r24, 0x01	; 1
    53a8:	90 93 f0 01 	sts	0x01F0, r25
    53ac:	80 93 ef 01 	sts	0x01EF, r24
    53b0:	89 2b       	or	r24, r25
    53b2:	a9 f4       	brne	.+42     	; 0x53de <loop+0x27c>
        {
        if(getSubCycleTime() >= nearOverrunThreshold) { tooNearOverrun = true; }
    53b4:	80 91 b2 00 	lds	r24, 0x00B2
    53b8:	87 3f       	cpi	r24, 0xF7	; 247
    53ba:	18 f0       	brcs	.+6      	; 0x53c2 <loop+0x260>
    53bc:	ee 24       	eor	r14, r14
    53be:	e3 94       	inc	r14
    53c0:	0e c0       	rjmp	.+28     	; 0x53de <loop+0x27c>
        else { serialPrintlnAndFlush(F("RCfH0")); } // Remote call for heat off
    53c2:	81 e1       	ldi	r24, 0x11	; 17
    53c4:	95 e0       	ldi	r25, 0x05	; 5
    53c6:	0e 94 55 20 	call	0x40aa	; 0x40aa <serialPrintlnAndFlush(__FlashStringHelper const*)>
    53ca:	09 c0       	rjmp	.+18     	; 0x53de <loop+0x27c>
        }
      }
    // Else already off so count up quiet minutes...
    else if(second0 && (boilerNoCallM < (uint8_t)~0)) { ++boilerNoCallM; }         
    53cc:	dd 20       	and	r13, r13
    53ce:	39 f0       	breq	.+14     	; 0x53de <loop+0x27c>
    53d0:	80 91 f1 01 	lds	r24, 0x01F1
    53d4:	8f 3f       	cpi	r24, 0xFF	; 255
    53d6:	19 f0       	breq	.+6      	; 0x53de <loop+0x27c>
    53d8:	8f 5f       	subi	r24, 0xFF	; 255
    53da:	80 93 f1 01 	sts	0x01F1, r24

    // Turn boiler output on or off in response to calls for heat.
    hubModeBoilerOn = (boilerCountdownTicks > 0);
    53de:	10 e0       	ldi	r17, 0x00	; 0
    53e0:	80 91 ef 01 	lds	r24, 0x01EF
    53e4:	90 91 f0 01 	lds	r25, 0x01F0
    53e8:	89 2b       	or	r24, r25
    53ea:	09 f0       	breq	.+2      	; 0x53ee <loop+0x28c>
    53ec:	11 e0       	ldi	r17, 0x01	; 1

    // If not running a local TRV, and this without local temperature measurement problems from self-heating,
    // then just listen all the time for maximum simplicity and responsiveness at some cost in extra power consumption.
    // (At least as long as power is not running low for some reasons.)
    if(!localFHT8VTRVEnabled() && !batteryLow)
    53ee:	0e 94 c6 0c 	call	0x198c	; 0x198c <localFHT8VTRVEnabled()>
    53f2:	88 23       	and	r24, r24
    53f4:	09 f0       	breq	.+2      	; 0x53f8 <loop+0x296>
    53f6:	50 c2       	rjmp	.+1184   	; 0x5898 <loop+0x736>
    53f8:	99 20       	and	r9, r9
    53fa:	09 f0       	breq	.+2      	; 0x53fe <loop+0x29c>
    53fc:	4d c2       	rjmp	.+1178   	; 0x5898 <loop+0x736>
    53fe:	55 c2       	rjmp	.+1194   	; 0x58aa <loop+0x748>
    // Aim to listen in one stretch for greater than full FHT8V TX cycle of ~2m to avoid missing a call for heat.
    // MUST listen for all of final 2 mins of boiler-on to avoid missing TX (without forcing boiler over-run).
    else if((boilerCountdownTicks <= ((MAX_FHT8V_TX_CYCLE_HS+1)/(2*MAIN_TICK_S))) && // Don't miss a final TX that would keep the boiler on...
       (boilerCountdownTicks != 0)) // But don't force unit to listen/RX all the time if no recent call for heat.
      { needsToEavesdrop = true; }
    else if((!heardIt) &&
    5400:	ff 20       	and	r15, r15
    5402:	31 f4       	brne	.+12     	; 0x5410 <loop+0x2ae>
    5404:	bb 20       	and	r11, r11
    5406:	21 f4       	brne	.+8      	; 0x5410 <loop+0x2ae>
    5408:	29 55       	subi	r18, 0x59	; 89
    540a:	32 40       	sbci	r19, 0x02	; 2
    540c:	08 f4       	brcc	.+2      	; 0x5410 <loop+0x2ae>
    540e:	4d c2       	rjmp	.+1178   	; 0x58aa <loop+0x748>
#endif
    }
  else
    {
    // Power down and clear radio state (if currently eavesdropping).
    StopEavesdropOnFHT8V(second0);
    5410:	8d 2d       	mov	r24, r13
    5412:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <StopEavesdropOnFHT8V(bool)>
    // Clear any RX state so that nothing stale is carried forward.
    FHT8VCallForHeatHeardGetAndClear();
    5416:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <FHT8VCallForHeatHeardGetAndClear()>
    541a:	00 e0       	ldi	r16, 0x00	; 0
#endif


  // Set BOILER_OUT as appropriate for local and/or remote calls for heat.
  // FIXME: local valve-driven boiler on does not obey normal on/off run-time rules.
  fastDigitalWrite(OUT_HEATCALL, ((hubModeBoilerOn || isControlledValveOpen()) ? HIGH : LOW));
    541c:	11 23       	and	r17, r17
    541e:	31 f4       	brne	.+12     	; 0x542c <loop+0x2ca>
    5420:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <isControlledValveOpen()>
    5424:	88 23       	and	r24, r24
    5426:	11 f4       	brne	.+4      	; 0x542c <loop+0x2ca>
    5428:	60 e0       	ldi	r22, 0x00	; 0
    542a:	01 c0       	rjmp	.+2      	; 0x542e <loop+0x2cc>
    542c:	61 e0       	ldi	r22, 0x01	; 1
    542e:	86 e0       	ldi	r24, 0x06	; 6
    5430:	0e 94 15 33 	call	0x662a	; 0x662a <digitalWrite>
  // NOTE: sleep at the top of the loop to minimise timing jitter/delay from Arduino background activity after loop() returns.
  // DHD20130425: waking up from sleep and getting to start processing below this block may take >10ms.
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("*E"); // End-of-cycle sleep.
#endif
  powerDownSerial(); // Ensure that serial I/O is off.
    5434:	0e 94 27 19 	call	0x324e	; 0x324e <powerDownSerial()>
  // Power down most stuff (except radio for hub RX).
  minimisePowerWithoutSleep();
    5438:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <minimisePowerWithoutSleep()>
    543c:	11 c0       	rjmp	.+34     	; 0x5460 <loop+0x2fe>
  uint_fast8_t newTLSD;
  while(TIME_LSD == (newTLSD = getSecondsLT()))
    {
#if defined(ENABLE_BOILER_HUB) && defined(USE_MODULE_FHT8VSIMPLE) // Deal with FHT8V eavesdropping if needed.
    // Poll for RX of remote calls-for-heat if needed.
    if(needsToEavesdrop) { nap30AndPoll(); continue; }
    543e:	00 23       	and	r16, r16
    5440:	39 f0       	breq	.+14     	; 0x5450 <loop+0x2ee>
//   * force if true then force full poll on every call (ie do not internally rate-limit)
// NOTE: implementation may not be in power-management module.
bool pollIO(bool force = false);
// Nap productively polling I/O, etc, across the system while spending time in low-power mode if possible.
// Typically sleeps for about 30ms; tries to allow ealier wakeup if interrupt is received, etc.
static void inline nap30AndPoll() { nap(WDTO_30MS); pollIO(true); }
    5442:	81 e0       	ldi	r24, 0x01	; 1
    5444:	0e 94 29 16 	call	0x2c52	; 0x2c52 <nap(signed char)>
    5448:	81 e0       	ldi	r24, 0x01	; 1
    544a:	0e 94 7c 28 	call	0x50f8	; 0x50f8 <pollIO(bool)>
    544e:	08 c0       	rjmp	.+16     	; 0x5460 <loop+0x2fe>
#endif
#if defined(USE_MODULE_RFM22RADIOSIMPLE) // Force radio to power-saving standby state if appropriate.
    // Force radio to known-low-power state from time to time (not every time to avoid unnecessary SPI work, LED flicker, etc.)
    if(batteryLow || second0) { RFM22ModeStandbyAndClearState(); }
    5450:	99 20       	and	r9, r9
    5452:	11 f4       	brne	.+4      	; 0x5458 <loop+0x2f6>
    5454:	dd 20       	and	r13, r13
    5456:	11 f0       	breq	.+4      	; 0x545c <loop+0x2fa>
    5458:	0e 94 bf 1b 	call	0x377e	; 0x377e <RFM22ModeStandbyAndClearState()>
#endif
    sleepUntilInt(); // Normal long minimal-power sleep until wake-up interrupt.
    545c:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <sleepPwrSaveWithBODDisabled()>
#endif
  powerDownSerial(); // Ensure that serial I/O is off.
  // Power down most stuff (except radio for hub RX).
  minimisePowerWithoutSleep();
  uint_fast8_t newTLSD;
  while(TIME_LSD == (newTLSD = getSecondsLT()))
    5460:	90 91 d0 01 	lds	r25, 0x01D0
    5464:	80 91 ed 01 	lds	r24, 0x01ED
    5468:	89 17       	cp	r24, r25
    546a:	49 f3       	breq	.-46     	; 0x543e <loop+0x2dc>
    // Force radio to known-low-power state from time to time (not every time to avoid unnecessary SPI work, LED flicker, etc.)
    if(batteryLow || second0) { RFM22ModeStandbyAndClearState(); }
#endif
    sleepUntilInt(); // Normal long minimal-power sleep until wake-up interrupt.
    }
  TIME_LSD = newTLSD;
    546c:	90 93 ed 01 	sts	0x01ED, r25
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("*S"); // Start-of-cycle wake.
#endif

#if defined(ENABLE_BOILER_HUB) && defined(USE_MODULE_FHT8VSIMPLE) // Deal with FHT8V eavesdropping if needed.
  // Check RSSI...
  if(needsToEavesdrop)
    5470:	00 23       	and	r16, r16
    5472:	79 f0       	breq	.+30     	; 0x5492 <loop+0x330>
    {
    const uint8_t rssi = RFM22RSSI();
    5474:	0e 94 82 1b 	call	0x3704	; 0x3704 <RFM22RSSI()>
    5478:	98 2f       	mov	r25, r24
    static uint8_t lastRSSI;
    if((rssi > 0) && (lastRSSI != rssi))
    547a:	88 23       	and	r24, r24
    547c:	51 f0       	breq	.+20     	; 0x5492 <loop+0x330>
    547e:	80 91 f2 01 	lds	r24, 0x01F2
    5482:	89 17       	cp	r24, r25
    5484:	31 f0       	breq	.+12     	; 0x5492 <loop+0x330>
      {
      lastRSSI = rssi;
    5486:	90 93 f2 01 	sts	0x01F2, r25
      addEntropyToPool(rssi, 0); // Probably some real entropy but don't assume it.
    548a:	89 2f       	mov	r24, r25
    548c:	60 e0       	ldi	r22, 0x00	; 0
    548e:	0e 94 56 1e 	call	0x3cac	; 0x3cac <addEntropyToPool(unsigned char, unsigned char)>
  // START LOOP BODY
  // ===============


  // Warn if too near overrun before.
  if(tooNearOverrun) { serialPrintlnAndFlush(F("?near overrun")); }
    5492:	ee 20       	and	r14, r14
    5494:	21 f0       	breq	.+8      	; 0x549e <loop+0x33c>
    5496:	83 e0       	ldi	r24, 0x03	; 3
    5498:	95 e0       	ldi	r25, 0x05	; 5
    549a:	0e 94 55 20 	call	0x40aa	; 0x40aa <serialPrintlnAndFlush(__FlashStringHelper const*)>


#if defined(USE_MODULE_FHT8VSIMPLE)
  // FHT8V is highest priority and runs first.
  // ---------- HALF SECOND #0 -----------
  bool useExtraFHT8VTXSlots = localFHT8VTRVEnabled() && FHT8VPollSyncAndTX_First(!conserveBattery); // Time for extra TX before UI.
    549e:	0e 94 c6 0c 	call	0x198c	; 0x198c <localFHT8VTRVEnabled()>
    54a2:	88 23       	and	r24, r24
    54a4:	49 f0       	breq	.+18     	; 0x54b8 <loop+0x356>
    54a6:	81 e0       	ldi	r24, 0x01	; 1
    54a8:	8a 25       	eor	r24, r10
    54aa:	0e 94 07 12 	call	0x240e	; 0x240e <FHT8VPollSyncAndTX_First(bool)>
    54ae:	88 23       	and	r24, r24
    54b0:	19 f0       	breq	.+6      	; 0x54b8 <loop+0x356>
    54b2:	55 24       	eor	r5, r5
    54b4:	53 94       	inc	r5
    54b6:	01 c0       	rjmp	.+2      	; 0x54ba <loop+0x358>
    54b8:	55 24       	eor	r5, r5
  bool recompute = false; // Set true an extra recompute of target temperature should be done.
#if !defined(TWO_S_TICK_RTC_SUPPORT)
  if(0 == (TIME_LSD & 1))
#endif
    {
    if(tickUI(TIME_LSD))
    54ba:	80 91 ed 01 	lds	r24, 0x01ED
    54be:	0e 94 56 27 	call	0x4eac	; 0x4eac <tickUI(unsigned char)>
    54c2:	88 23       	and	r24, r24
    54c4:	19 f0       	breq	.+6      	; 0x54cc <loop+0x36a>
    54c6:	33 24       	eor	r3, r3
    54c8:	33 94       	inc	r3
    54ca:	07 c0       	rjmp	.+14     	; 0x54da <loop+0x378>
      recompute = true;
      }
    }
 
  
  if(recompute || recentUIControlUse())
    54cc:	0e 94 be 20 	call	0x417c	; 0x417c <recentUIControlUse()>
    54d0:	88 23       	and	r24, r24
    54d2:	11 f4       	brne	.+4      	; 0x54d8 <loop+0x376>
    54d4:	33 24       	eor	r3, r3
    54d6:	03 c0       	rjmp	.+6      	; 0x54de <loop+0x37c>
    54d8:	33 24       	eor	r3, r3
    {
    computeTargetTemperature(); // Force recompute of temperature for (UI) responsiveness.
    54da:	0e 94 81 0a 	call	0x1502	; 0x1502 <computeTargetTemperature()>
    }


#if defined(USE_MODULE_FHT8VSIMPLE)
  if(useExtraFHT8VTXSlots)
    54de:	55 20       	and	r5, r5
    54e0:	59 f0       	breq	.+22     	; 0x54f8 <loop+0x396>
    {
    // Time for extra TX before other actions, but don't bother if minimising power in frost mode.
    // ---------- HALF SECOND #1 -----------
    useExtraFHT8VTXSlots = localFHT8VTRVEnabled() && FHT8VPollSyncAndTX_Next(!conserveBattery); 
    54e2:	0e 94 c6 0c 	call	0x198c	; 0x198c <localFHT8VTRVEnabled()>
    54e6:	88 23       	and	r24, r24
    54e8:	31 f0       	breq	.+12     	; 0x54f6 <loop+0x394>
    54ea:	81 e0       	ldi	r24, 0x01	; 1
    54ec:	8a 25       	eor	r24, r10
    54ee:	0e 94 c1 11 	call	0x2382	; 0x2382 <FHT8VPollSyncAndTX_Next(bool)>
    54f2:	88 23       	and	r24, r24
    54f4:	09 f4       	brne	.+2      	; 0x54f8 <loop+0x396>
    54f6:	55 24       	eor	r5, r5
  // Once-per-minute tasks: all must take << 0.3s.
  // Run tasks spread throughout the minute to be as kind to batteries (etc) as possible.
  // Only when runAll is true run less-critical tasks that be skipped sometimes when particularly conserving energy.
  // TODO: coordinate temperature reading with time when radio and other heat-generating items are off for more accurate readings.
  // TODO: ensure only take ambient light reading at times when all LEDs are off.
  const bool runAll = (!conserveBattery) || minute0From4ForSensors;
    54f8:	44 24       	eor	r4, r4
    54fa:	43 94       	inc	r4
    54fc:	4a 24       	eor	r4, r10
    54fe:	11 f0       	breq	.+4      	; 0x5504 <loop+0x3a2>
    5500:	11 e0       	ldi	r17, 0x01	; 1
    5502:	01 c0       	rjmp	.+2      	; 0x5506 <loop+0x3a4>
    5504:	1b 2d       	mov	r17, r11

  switch(TIME_LSD) // With TWO_S_TICK_RTC_SUPPORT only even seconds are available.
    5506:	80 91 ed 01 	lds	r24, 0x01ED
    550a:	80 33       	cpi	r24, 0x30	; 48
    550c:	09 f4       	brne	.+2      	; 0x5510 <loop+0x3ae>
    550e:	14 c1       	rjmp	.+552    	; 0x5738 <loop+0x5d6>
    5510:	81 33       	cpi	r24, 0x31	; 49
    5512:	68 f4       	brcc	.+26     	; 0x552e <loop+0x3cc>
    5514:	82 30       	cpi	r24, 0x02	; 2
    5516:	41 f1       	breq	.+80     	; 0x5568 <loop+0x406>
    5518:	83 30       	cpi	r24, 0x03	; 3
    551a:	18 f4       	brcc	.+6      	; 0x5522 <loop+0x3c0>
    551c:	88 23       	and	r24, r24
    551e:	d1 f0       	breq	.+52     	; 0x5554 <loop+0x3f2>
    5520:	6a c1       	rjmp	.+724    	; 0x57f6 <loop+0x694>
    5522:	84 30       	cpi	r24, 0x04	; 4
    5524:	d1 f1       	breq	.+116    	; 0x559a <loop+0x438>
    5526:	8a 30       	cpi	r24, 0x0A	; 10
    5528:	09 f0       	breq	.+2      	; 0x552c <loop+0x3ca>
    552a:	65 c1       	rjmp	.+714    	; 0x57f6 <loop+0x694>
    552c:	3c c0       	rjmp	.+120    	; 0x55a6 <loop+0x444>
    552e:	86 33       	cpi	r24, 0x36	; 54
    5530:	09 f4       	brne	.+2      	; 0x5534 <loop+0x3d2>
    5532:	14 c1       	rjmp	.+552    	; 0x575c <loop+0x5fa>
    5534:	87 33       	cpi	r24, 0x37	; 55
    5536:	38 f4       	brcc	.+14     	; 0x5546 <loop+0x3e4>
    5538:	82 33       	cpi	r24, 0x32	; 50
    553a:	09 f4       	brne	.+2      	; 0x553e <loop+0x3dc>
    553c:	03 c1       	rjmp	.+518    	; 0x5744 <loop+0x5e2>
    553e:	84 33       	cpi	r24, 0x34	; 52
    5540:	09 f0       	breq	.+2      	; 0x5544 <loop+0x3e2>
    5542:	59 c1       	rjmp	.+690    	; 0x57f6 <loop+0x694>
    5544:	05 c1       	rjmp	.+522    	; 0x5750 <loop+0x5ee>
    5546:	88 33       	cpi	r24, 0x38	; 56
    5548:	09 f4       	brne	.+2      	; 0x554c <loop+0x3ea>
    554a:	11 c1       	rjmp	.+546    	; 0x576e <loop+0x60c>
    554c:	8a 33       	cpi	r24, 0x3A	; 58
    554e:	09 f0       	breq	.+2      	; 0x5552 <loop+0x3f0>
    5550:	52 c1       	rjmp	.+676    	; 0x57f6 <loop+0x694>
    5552:	3a c1       	rjmp	.+628    	; 0x57c8 <loop+0x666>
    {
    case 0:
      {
      // Tasks that must be run every minute.
      ++minuteCount;
    5554:	80 91 ee 01 	lds	r24, 0x01EE
    5558:	8f 5f       	subi	r24, 0xFF	; 255
    555a:	80 93 ee 01 	sts	0x01EE, r24
      checkUserSchedule(); // Force to user's programmed settings, if any, at the correct time.
    555e:	0e 94 12 27 	call	0x4e24	; 0x4e24 <checkUserSchedule()>
      // Ensure that the RTC has been persisted promptly when necessary.
      persistRTC();
    5562:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <persistRTC()>
    5566:	47 c1       	rjmp	.+654    	; 0x57f6 <loop+0x694>
      break;
      }

    // Churn/reseed PRNG(s) a little to improve unpredictability in use: should be lightweight.
    case 2: { if(runAll) { seedRNG8(minuteCount ^ cycleCountCPU() ^ (uint8_t)getBatterymV(), getSubCycleTime() ^ (uint8_t)getAmbientLight(), (uint8_t)getTemperatureC16()); } break; }
    5568:	11 23       	and	r17, r17
    556a:	09 f4       	brne	.+2      	; 0x556e <loop+0x40c>
    556c:	44 c1       	rjmp	.+648    	; 0x57f6 <loop+0x694>
    556e:	06 b5       	in	r16, 0x26	; 38
    5570:	80 91 ee 01 	lds	r24, 0x01EE
    5574:	08 27       	eor	r16, r24
    5576:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <getBatterymV()>
    557a:	e8 2e       	mov	r14, r24
    557c:	10 91 b2 00 	lds	r17, 0x00B2
    5580:	0e 94 28 07 	call	0xe50	; 0xe50 <getAmbientLight()>
    5584:	f8 2e       	mov	r15, r24
    5586:	0e 94 9e 20 	call	0x413c	; 0x413c <getTemperatureC16()>
    558a:	48 2f       	mov	r20, r24
    558c:	1f 25       	eor	r17, r15
    558e:	80 2f       	mov	r24, r16
    5590:	8e 25       	eor	r24, r14
    5592:	61 2f       	mov	r22, r17
    5594:	0e 94 fd 19 	call	0x33fa	; 0x33fa <seedRNG8(unsigned char, unsigned char, unsigned char)>
    5598:	2e c1       	rjmp	.+604    	; 0x57f6 <loop+0x694>
    // Force read of battery voltage; measure and recompute status less often when already thought to be low, eg when conserving.
    case 4: { if(runAll) { readBatterymV(); } break; }
    559a:	11 23       	and	r17, r17
    559c:	09 f4       	brne	.+2      	; 0x55a0 <loop+0x43e>
    559e:	2b c1       	rjmp	.+598    	; 0x57f6 <loop+0x694>
    55a0:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <readBatterymV()>
    55a4:	28 c1       	rjmp	.+592    	; 0x57f6 <loop+0x694>
#endif

    // Regular transmission of stats if NOT driving a local valve (and if not a hub ie not needing to stay in RX mode).
    case 10:
      {
      if(hubMode) { break; } // Hub can't allow random switch to TX mode.
    55a6:	cc 20       	and	r12, r12
    55a8:	09 f0       	breq	.+2      	; 0x55ac <loop+0x44a>
    55aa:	25 c1       	rjmp	.+586    	; 0x57f6 <loop+0x694>
      if(!enableTrailingMinimalStatsPayload()) { break; } // Not allowed to send stuff like this.
    55ac:	0e 94 7f 12 	call	0x24fe	; 0x24fe <enableTrailingMinimalStatsPayload()>
    55b0:	88 23       	and	r24, r24
    55b2:	09 f4       	brne	.+2      	; 0x55b6 <loop+0x454>
    55b4:	20 c1       	rjmp	.+576    	; 0x57f6 <loop+0x694>
      
#if defined(USE_MODULE_FHT8VSIMPLE)
      if(localFHT8VTRVEnabled()) { break; } // Do only piggy-back stats TXes if driving an FHT8V to save bandwidth/conflicts.
    55b6:	0e 94 c6 0c 	call	0x198c	; 0x198c <localFHT8VTRVEnabled()>
    55ba:	88 23       	and	r24, r24
    55bc:	09 f0       	breq	.+2      	; 0x55c0 <loop+0x45e>
    55be:	1b c1       	rjmp	.+566    	; 0x57f6 <loop+0x694>
#endif
      // Generally only attempt stats TX in the minute after all sensors should have been polled (so that readings are fresh).
      if(minute1From4AfterSensors ||
    55c0:	88 20       	and	r8, r8
    55c2:	41 f4       	brne	.+16     	; 0x55d4 <loop+0x472>
    55c4:	99 20       	and	r9, r9
    55c6:	09 f0       	breq	.+2      	; 0x55ca <loop+0x468>
    55c8:	16 c1       	rjmp	.+556    	; 0x57f6 <loop+0x694>
    55ca:	0e 94 18 1a 	call	0x3430	; 0x3430 <randRNG8()>
    55ce:	84 72       	andi	r24, 0x24	; 36
    55d0:	09 f0       	breq	.+2      	; 0x55d4 <loop+0x472>
    55d2:	11 c1       	rjmp	.+546    	; 0x57f6 <loop+0x694>
#else
        uint8_t buf[RFM22_PREAMBLE_BYTES + RFM22_SYNC_MIN_BYTES + MSG_JSON_MAX_LENGTH + 1 + 1];
          {
          uint8_t *bptr = buf;
          // Start with RFM23-friendly preamble which ends with with the aacccccc sync word.
          memset(bptr, RFM22_PREAMBLE_BYTE, RFM22_PREAMBLE_BYTES);
    55d4:	ce 01       	movw	r24, r28
    55d6:	08 96       	adiw	r24, 0x08	; 8
    55d8:	6a ea       	ldi	r22, 0xAA	; 170
    55da:	70 e0       	ldi	r23, 0x00	; 0
    55dc:	45 e0       	ldi	r20, 0x05	; 5
    55de:	50 e0       	ldi	r21, 0x00	; 0
    55e0:	0e 94 12 04 	call	0x824	; 0x824 <memset>
          bptr += RFM22_PREAMBLE_BYTES;
          memset(bptr, RFM22_SYNC_BYTE, RFM22_SYNC_MIN_BYTES);
    55e4:	ce 01       	movw	r24, r28
    55e6:	0d 96       	adiw	r24, 0x0d	; 13
    55e8:	6c ec       	ldi	r22, 0xCC	; 204
    55ea:	70 e0       	ldi	r23, 0x00	; 0
    55ec:	43 e0       	ldi	r20, 0x03	; 3
    55ee:	50 e0       	ldi	r21, 0x00	; 0
    55f0:	0e 94 12 04 	call	0x824	; 0x824 <memset>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    55f4:	f9 99       	sbic	0x1f, 1	; 31
    55f6:	fe cf       	rjmp	.-4      	; 0x55f4 <loop+0x492>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    55f8:	84 e1       	ldi	r24, 0x14	; 20
    55fa:	90 e0       	ldi	r25, 0x00	; 0
    55fc:	92 bd       	out	0x22, r25	; 34
    55fe:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    5600:	f8 9a       	sbi	0x1f, 0	; 31
    5602:	a0 b4       	in	r10, 0x20	; 32
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    5604:	f9 99       	sbic	0x1f, 1	; 31
    5606:	fe cf       	rjmp	.-4      	; 0x5604 <loop+0x4a2>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    5608:	85 e1       	ldi	r24, 0x15	; 21
    560a:	90 e0       	ldi	r25, 0x00	; 0
    560c:	92 bd       	out	0x22, r25	; 34
    560e:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    5610:	f8 9a       	sbi	0x1f, 0	; 31
    5612:	c0 b4       	in	r12, 0x20	; 32
                (unsigned char)eeprom_read_byte(1 + (uint8_t *)EE_START_ID),
            (int)readTemperatureC16(),
            (unsigned char)Sensor_SHT21_readRHpc(),
            (int)(readAmbientLight()/4),
            (unsigned char)twoBitOccupancyValue(),
            (int)(readBatterymV()/10));
    5614:	0e 94 a3 20 	call	0x4146	; 0x4146 <readTemperatureC16()>
    5618:	7c 01       	movw	r14, r24
    561a:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <Sensor_SHT21_readRHpc()>
    561e:	d8 2e       	mov	r13, r24
    5620:	0e 94 2d 07 	call	0xe5a	; 0xe5a <readAmbientLight()>
    5624:	8c 01       	movw	r16, r24
    5626:	0e 94 aa 07 	call	0xf54	; 0xf54 <twoBitOccupancyValue()>
    562a:	b8 2e       	mov	r11, r24
    562c:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <readBatterymV()>
    5630:	9c 01       	movw	r18, r24
    5632:	ad b7       	in	r26, 0x3d	; 61
    5634:	be b7       	in	r27, 0x3e	; 62
    5636:	52 97       	sbiw	r26, 0x12	; 18
    5638:	0f b6       	in	r0, 0x3f	; 63
    563a:	f8 94       	cli
    563c:	be bf       	out	0x3e, r27	; 62
    563e:	0f be       	out	0x3f, r0	; 63
    5640:	ad bf       	out	0x3d, r26	; 61
    5642:	ed b7       	in	r30, 0x3d	; 61
    5644:	fe b7       	in	r31, 0x3e	; 62
    5646:	31 96       	adiw	r30, 0x01	; 1
    5648:	88 e0       	ldi	r24, 0x08	; 8
    564a:	68 2e       	mov	r6, r24
    564c:	71 2c       	mov	r7, r1
    564e:	6c 0e       	add	r6, r28
    5650:	7d 1e       	adc	r7, r29
    5652:	78 e0       	ldi	r23, 0x08	; 8
    5654:	87 2e       	mov	r8, r23
    5656:	91 2c       	mov	r9, r1
    5658:	86 0c       	add	r8, r6
    565a:	97 1c       	adc	r9, r7
    565c:	12 96       	adiw	r26, 0x02	; 2
    565e:	9c 92       	st	X, r9
    5660:	8e 92       	st	-X, r8
    5662:	11 97       	sbiw	r26, 0x01	; 1
          bptr += RFM22_PREAMBLE_BYTES;
          memset(bptr, RFM22_SYNC_BYTE, RFM22_SYNC_MIN_BYTES);
          bptr += RFM22_SYNC_MIN_BYTES;
          // Now append JSON text and closing 0xff...
          const int8_t wrote = sprintfRawSimpleJSONMessage((char *)bptr,
            F("{\"id\":\"%0.2hhx%0.2hhx\",\"t|C16\":%d,\"RH|%%\":%hhd,\"l\":%d,\"o\":%hhd,\"b|cV\":%d}"),
    5664:	89 eb       	ldi	r24, 0xB9	; 185
    5666:	94 e0       	ldi	r25, 0x04	; 4
    5668:	93 83       	std	Z+3, r25	; 0x03
    566a:	82 83       	std	Z+2, r24	; 0x02
    566c:	a4 82       	std	Z+4, r10	; 0x04
    566e:	15 82       	std	Z+5, r1	; 0x05
    5670:	c6 82       	std	Z+6, r12	; 0x06
    5672:	17 82       	std	Z+7, r1	; 0x07
    5674:	f1 86       	std	Z+9, r15	; 0x09
    5676:	e0 86       	std	Z+8, r14	; 0x08
    5678:	d2 86       	std	Z+10, r13	; 0x0a
    567a:	13 86       	std	Z+11, r1	; 0x0b
    567c:	c8 01       	movw	r24, r16
    567e:	64 e0       	ldi	r22, 0x04	; 4
    5680:	70 e0       	ldi	r23, 0x00	; 0
    5682:	0e 94 0f 39 	call	0x721e	; 0x721e <__divmodhi4>
    5686:	75 87       	std	Z+13, r23	; 0x0d
    5688:	64 87       	std	Z+12, r22	; 0x0c
    568a:	b6 86       	std	Z+14, r11	; 0x0e
    568c:	17 86       	std	Z+15, r1	; 0x0f
    568e:	c9 01       	movw	r24, r18
    5690:	6a e0       	ldi	r22, 0x0A	; 10
    5692:	70 e0       	ldi	r23, 0x00	; 0
    5694:	0e 94 fb 38 	call	0x71f6	; 0x71f6 <__udivmodhi4>
    5698:	71 8b       	std	Z+17, r23	; 0x11
    569a:	60 8b       	std	Z+16, r22	; 0x10
    569c:	0e 94 8d 12 	call	0x251a	; 0x251a <sprintfRawSimpleJSONMessage(char*, __FlashStringHelper const*, ...)>
    56a0:	18 2f       	mov	r17, r24
            (int)readTemperatureC16(),
            (unsigned char)Sensor_SHT21_readRHpc(),
            (int)(readAmbientLight()/4),
            (unsigned char)twoBitOccupancyValue(),
            (int)(readBatterymV()/10));
          if(wrote < 0)
    56a2:	8d b7       	in	r24, 0x3d	; 61
    56a4:	9e b7       	in	r25, 0x3e	; 62
    56a6:	42 96       	adiw	r24, 0x12	; 18
    56a8:	0f b6       	in	r0, 0x3f	; 63
    56aa:	f8 94       	cli
    56ac:	9e bf       	out	0x3e, r25	; 62
    56ae:	0f be       	out	0x3f, r0	; 63
    56b0:	8d bf       	out	0x3d, r24	; 61
    56b2:	17 ff       	sbrs	r17, 7
    56b4:	03 c0       	rjmp	.+6      	; 0x56bc <loop+0x55a>
            {
DEBUG_SERIAL_PRINTLN_FLASHSTRING("Msg JSON gen err!");
    56b6:	87 ea       	ldi	r24, 0xA7	; 167
    56b8:	94 e0       	ldi	r25, 0x04	; 4
    56ba:	3b c0       	rjmp	.+118    	; 0x5732 <loop+0x5d0>
            break;
            }
#if 1 && defined(DEBUG)
          DEBUG_SERIAL_PRINT_FLASHSTRING("JSON sent: ");
    56bc:	8b e9       	ldi	r24, 0x9B	; 155
    56be:	94 e0       	ldi	r25, 0x04	; 4
    56c0:	0e 94 3f 20 	call	0x407e	; 0x407e <serialPrintAndFlush(__FlashStringHelper const*)>
          DEBUG_SERIAL_PRINT((const char *)bptr);
    56c4:	c4 01       	movw	r24, r8
    56c6:	0e 94 29 20 	call	0x4052	; 0x4052 <serialPrintAndFlush(char const*)>
          DEBUG_SERIAL_PRINTLN();
    56ca:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <serialPrintlnAndFlush()>
#endif
          bptr += wrote;
    56ce:	e1 2f       	mov	r30, r17
    56d0:	ff 27       	eor	r31, r31
    56d2:	e7 fd       	sbrc	r30, 7
    56d4:	f0 95       	com	r31
    56d6:	e8 0d       	add	r30, r8
    56d8:	f9 1d       	adc	r31, r9
          // Should consider use of 0x5B CRC for body up to 7 chars, 0x48 (CRC-7/G704) beyond that.
          *bptr++ = 0; // FIXME: Add 7-bit CRC for on-the-wire check.
    56da:	10 82       	st	Z, r1
          *bptr = 0xff; // Terminate message.
    56dc:	8f ef       	ldi	r24, 0xFF	; 255
    56de:	81 83       	std	Z+1, r24	; 0x01
          }
#endif

        pollIO(); // Deal with any pending I/O.
    56e0:	80 e0       	ldi	r24, 0x00	; 0
    56e2:	0e 94 7c 28 	call	0x50f8	; 0x50f8 <pollIO(bool)>
        sleepLowPowerLessThanMs(1 + (randRNG8() & 0x7f)); // Sleep randomly up to 128ms to spread transmissions and help avoid collisions.
    56e6:	0e 94 18 1a 	call	0x3430	; 0x3430 <randRNG8()>
// Should be good for values up to at least 1000, ie 1 second.
// Uses formulation likely to be quicker than sleepLowPowerMs() for non-constant argument values,
// and that results in a somewhat shorter sleep than sleepLowPowerMs(ms).
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerLessThanMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed(((MIN_CPU_HZ/4000) * (ms)) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    56ea:	90 e0       	ldi	r25, 0x00	; 0
    56ec:	8f 77       	andi	r24, 0x7F	; 127
    56ee:	90 70       	andi	r25, 0x00	; 0
    56f0:	01 96       	adiw	r24, 0x01	; 1
    56f2:	a0 e0       	ldi	r26, 0x00	; 0
    56f4:	b0 e0       	ldi	r27, 0x00	; 0
    56f6:	9c 01       	movw	r18, r24
    56f8:	ad 01       	movw	r20, r26
    56fa:	63 e0       	ldi	r22, 0x03	; 3
    56fc:	22 0f       	add	r18, r18
    56fe:	33 1f       	adc	r19, r19
    5700:	44 1f       	adc	r20, r20
    5702:	55 1f       	adc	r21, r21
    5704:	6a 95       	dec	r22
    5706:	d1 f7       	brne	.-12     	; 0x56fc <loop+0x59a>
    5708:	28 1b       	sub	r18, r24
    570a:	39 0b       	sbc	r19, r25
    570c:	4a 0b       	sbc	r20, r26
    570e:	5b 0b       	sbc	r21, r27
    5710:	22 50       	subi	r18, 0x02	; 2
    5712:	30 40       	sbci	r19, 0x00	; 0
    5714:	c9 01       	movw	r24, r18
    5716:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
        pollIO(); // Deal with any pending I/O.
    571a:	80 e0       	ldi	r24, 0x00	; 0
    571c:	0e 94 7c 28 	call	0x50f8	; 0x50f8 <pollIO(bool)>

        // TODO: put in listen before TX to reduce collisions (CSMA)
        // Send message!
        // Assume RFM22/23 support for now.
        RFM22QueueCmdToFF(buf);
    5720:	c3 01       	movw	r24, r6
    5722:	0e 94 0f 1b 	call	0x361e	; 0x361e <RFM22QueueCmdToFF(unsigned char*)>
        RFM22TXFIFO(); // Send it!  Approx 1.6ms/byte.     
    5726:	0e 94 07 1c 	call	0x380e	; 0x380e <RFM22TXFIFO()>
        RFM22ModeStandbyAndClearState(); // Go to standby to conserve energy.
    572a:	0e 94 bf 1b 	call	0x377e	; 0x377e <RFM22ModeStandbyAndClearState()>
DEBUG_SERIAL_PRINTLN_FLASHSTRING("Bare stats TX");
    572e:	8d e8       	ldi	r24, 0x8D	; 141
    5730:	94 e0       	ldi	r25, 0x04	; 4
    5732:	0e 94 55 20 	call	0x40aa	; 0x40aa <serialPrintlnAndFlush(__FlashStringHelper const*)>
    5736:	5f c0       	rjmp	.+190    	; 0x57f6 <loop+0x694>
      break;
      }

#ifdef TEMP_POT_AVAILABLE
    // Sample the user-selected WARM temperature target.
    case 48: { if(runAll) { readTempPot(); } break; }
    5738:	11 23       	and	r17, r17
    573a:	09 f4       	brne	.+2      	; 0x573e <loop+0x5dc>
    573c:	5c c0       	rjmp	.+184    	; 0x57f6 <loop+0x694>
    573e:	0e 94 6e 20 	call	0x40dc	; 0x40dc <readTempPot()>
    5742:	59 c0       	rjmp	.+178    	; 0x57f6 <loop+0x694>
#endif

    // Read all environmental inputs, late in the cycle.
#ifdef HUMIDITY_SENSOR_SUPPORT
    // Sample humidity.
    case 50: { if(runAll) { readRHpc(); } break; }
    5744:	11 23       	and	r17, r17
    5746:	09 f4       	brne	.+2      	; 0x574a <loop+0x5e8>
    5748:	56 c0       	rjmp	.+172    	; 0x57f6 <loop+0x694>
    574a:	0e 94 48 12 	call	0x2490	; 0x2490 <readRHpc()>
    574e:	53 c0       	rjmp	.+166    	; 0x57f6 <loop+0x694>
#endif
    // Sample ambient light levels.
    case 52: { if(runAll) { readAmbientLight(); } break; }
    5750:	11 23       	and	r17, r17
    5752:	09 f4       	brne	.+2      	; 0x5756 <loop+0x5f4>
    5754:	50 c0       	rjmp	.+160    	; 0x57f6 <loop+0x694>
    5756:	0e 94 2d 07 	call	0xe5a	; 0xe5a <readAmbientLight()>
    575a:	4d c0       	rjmp	.+154    	; 0x57f6 <loop+0x694>
    // At a hub, sample temperature as late as possible in (and only in the 'quiet') minute, to reduce valve hunting from self-heating.
    case 54: { if(hubMode ? minute0From4ForSensors : runAll) { readTemperatureC16(); } break; }
    575c:	cc 20       	and	r12, r12
    575e:	09 f4       	brne	.+2      	; 0x5762 <loop+0x600>
    5760:	b1 2e       	mov	r11, r17
    5762:	bb 20       	and	r11, r11
    5764:	09 f4       	brne	.+2      	; 0x5768 <loop+0x606>
    5766:	47 c0       	rjmp	.+142    	; 0x57f6 <loop+0x694>
    5768:	0e 94 a3 20 	call	0x4146	; 0x4146 <readTemperatureC16()>
    576c:	44 c0       	rjmp	.+136    	; 0x57f6 <loop+0x694>
      {
      static bool boilerOn; // Internal record of current boiler-out state.

      // Recompute target, valve position and call for heat, etc.
      // Should be called once per minute to work correctly.
      if(computeCallForHeat() ||
    576e:	0e 94 bd 0a 	call	0x157a	; 0x157a <computeCallForHeat()>
    5772:	88 23       	and	r24, r24
    5774:	31 f4       	brne	.+12     	; 0x5782 <loop+0x620>
    5776:	88 20       	and	r8, r8
    5778:	51 f0       	breq	.+20     	; 0x578e <loop+0x62c>
    577a:	0e 94 7f 12 	call	0x24fe	; 0x24fe <enableTrailingMinimalStatsPayload()>
    577e:	88 23       	and	r24, r24
    5780:	31 f0       	breq	.+12     	; 0x578e <loop+0x62c>
        // If there was a change in target valve position,
        // or periodically in a minute after all sensors should have been read,
        // precompute some or all of any outgoing frames/stats/etc ready for transmission.
#if defined(USE_MODULE_FHT8VSIMPLE)
        // Recompute FHT8V command to send if target valve setting has changed...
        if(localFHT8VTRVEnabled()) { FHT8VCreateValveSetCmdFrame(); }
    5782:	0e 94 c6 0c 	call	0x198c	; 0x198c <localFHT8VTRVEnabled()>
    5786:	88 23       	and	r24, r24
    5788:	11 f0       	breq	.+4      	; 0x578e <loop+0x62c>
    578a:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <FHT8VCreateValveSetCmdFrame()>
#endif
        }

#if defined(ENABLE_BOILER_HUB)
      // Track how long since remote call for heat last heard.
      if(hubMode)
    578e:	cc 20       	and	r12, r12
    5790:	b1 f0       	breq	.+44     	; 0x57be <loop+0x65c>
        {
        if(boilerCountdownTicks != 0)
    5792:	80 91 ef 01 	lds	r24, 0x01EF
    5796:	90 91 f0 01 	lds	r25, 0x01F0
    579a:	89 2b       	or	r24, r25
    579c:	81 f0       	breq	.+32     	; 0x57be <loop+0x65c>
          {
#if 1 && defined(DEBUG)
          DEBUG_SERIAL_PRINT_FLASHSTRING("Boiler on, s left: ");
    579e:	89 e7       	ldi	r24, 0x79	; 121
    57a0:	94 e0       	ldi	r25, 0x04	; 4
    57a2:	0e 94 3f 20 	call	0x407e	; 0x407e <serialPrintAndFlush(__FlashStringHelper const*)>
          DEBUG_SERIAL_PRINT(boilerCountdownTicks * MAIN_TICK_S);
    57a6:	80 91 ef 01 	lds	r24, 0x01EF
    57aa:	90 91 f0 01 	lds	r25, 0x01F0
    57ae:	88 0f       	add	r24, r24
    57b0:	99 1f       	adc	r25, r25
    57b2:	6a e0       	ldi	r22, 0x0A	; 10
    57b4:	70 e0       	ldi	r23, 0x00	; 0
    57b6:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <serialPrintAndFlush(unsigned int, int)>
          DEBUG_SERIAL_PRINTLN();
    57ba:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <serialPrintlnAndFlush()>
          }
        }
#endif

      // Show current status if appropriate.
      if(runAll) { showStatus = true; }
    57be:	11 23       	and	r17, r17
    57c0:	d1 f0       	breq	.+52     	; 0x57f6 <loop+0x694>
    57c2:	33 24       	eor	r3, r3
    57c4:	33 94       	inc	r3
    57c6:	17 c0       	rjmp	.+46     	; 0x57f6 <loop+0x694>
    // Stats samples; should never be missed.
    case 58:
      {
      // Take full stats sample as near the end of the hour as reasonably possible (without danger of overrun),
      // and with other optional non-full samples evenly spaced throughout the hour (if not low on battery).
      if(minute0From4ForSensors) // Hope to take lowest-noise samples on the special minute out of each 4.
    57c8:	bb 20       	and	r11, r11
    57ca:	a9 f0       	breq	.+42     	; 0x57f6 <loop+0x694>
        {
        const uint_least8_t mm = getMinutesLT();
    57cc:	0e 94 bb 1c 	call	0x3976	; 0x3976 <getMinutesLT()>
        switch(mm)
    57d0:	88 32       	cpi	r24, 0x28	; 40
    57d2:	30 f4       	brcc	.+12     	; 0x57e0 <loop+0x67e>
    57d4:	84 32       	cpi	r24, 0x24	; 36
    57d6:	40 f4       	brcc	.+16     	; 0x57e8 <loop+0x686>
    57d8:	80 51       	subi	r24, 0x10	; 16
    57da:	84 30       	cpi	r24, 0x04	; 4
    57dc:	60 f4       	brcc	.+24     	; 0x57f6 <loop+0x694>
    57de:	04 c0       	rjmp	.+8      	; 0x57e8 <loop+0x686>
    57e0:	88 53       	subi	r24, 0x38	; 56
    57e2:	84 30       	cpi	r24, 0x04	; 4
    57e4:	40 f4       	brcc	.+16     	; 0x57f6 <loop+0x694>
    57e6:	04 c0       	rjmp	.+8      	; 0x57f0 <loop+0x68e>
          {
          case 16: case 17: case 18: case 19:
          case 36: case 37: case 38: case 39:
            { if(!batteryLow) { sampleStats(false); } break; } // Skip sub-samples if short of juice.
    57e8:	99 20       	and	r9, r9
    57ea:	29 f4       	brne	.+10     	; 0x57f6 <loop+0x694>
    57ec:	80 e0       	ldi	r24, 0x00	; 0
    57ee:	01 c0       	rjmp	.+2      	; 0x57f2 <loop+0x690>
          case 56: case 57: case 58: case 59:
            { sampleStats(true); break; } // Always take the full sample at end of hour.
    57f0:	81 e0       	ldi	r24, 0x01	; 1
    57f2:	0e 94 97 09 	call	0x132e	; 0x132e <sampleStats(bool)>
      break;
      }
    }

#if defined(USE_MODULE_FHT8VSIMPLE) && defined(TWO_S_TICK_RTC_SUPPORT)
  if(useExtraFHT8VTXSlots)
    57f6:	55 20       	and	r5, r5
    57f8:	51 f0       	breq	.+20     	; 0x580e <loop+0x6ac>
    {
    // Time for extra TX before other actions, but don't bother if minimising power in frost mode.
    // ---------- HALF SECOND #2 -----------
    useExtraFHT8VTXSlots = localFHT8VTRVEnabled() && FHT8VPollSyncAndTX_Next(!conserveBattery); 
    57fa:	0e 94 c6 0c 	call	0x198c	; 0x198c <localFHT8VTRVEnabled()>
    57fe:	88 23       	and	r24, r24
    5800:	29 f0       	breq	.+10     	; 0x580c <loop+0x6aa>
    5802:	84 2d       	mov	r24, r4
    5804:	0e 94 c1 11 	call	0x2382	; 0x2382 <FHT8VPollSyncAndTX_Next(bool)>
    5808:	88 23       	and	r24, r24
    580a:	09 f4       	brne	.+2      	; 0x580e <loop+0x6ac>
    580c:	55 24       	eor	r5, r5
//    if(useExtraFHT8VTXSlots) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("ES@2"); }
    }
#endif

  // Generate periodic status reports.
  if(showStatus) { serialStatusReport(); }
    580e:	33 20       	and	r3, r3
    5810:	11 f0       	breq	.+4      	; 0x5816 <loop+0x6b4>
    5812:	0e 94 d8 21 	call	0x43b0	; 0x43b0 <serialStatusReport()>

#if defined(USE_MODULE_FHT8VSIMPLE) && defined(TWO_S_TICK_RTC_SUPPORT)
  if(useExtraFHT8VTXSlots)
    5816:	55 20       	and	r5, r5
    5818:	39 f0       	breq	.+14     	; 0x5828 <loop+0x6c6>
    {
    // ---------- HALF SECOND #3 -----------
    useExtraFHT8VTXSlots = localFHT8VTRVEnabled() && FHT8VPollSyncAndTX_Next(!conserveBattery); 
    581a:	0e 94 c6 0c 	call	0x198c	; 0x198c <localFHT8VTRVEnabled()>
    581e:	88 23       	and	r24, r24
    5820:	19 f0       	breq	.+6      	; 0x5828 <loop+0x6c6>
    5822:	84 2d       	mov	r24, r4
    5824:	0e 94 c1 11 	call	0x2382	; 0x2382 <FHT8VPollSyncAndTX_Next(bool)>
  // AND the CLI is / should be active OR a status line has just been output
  // then poll/prompt the user for input
  // using a timeout which should safely avoid missing the next basic tick
  // and which should also allow some energy-saving sleep.
#if 1 && defined(SUPPORT_CLI)
  const bool humanCLIUse = isCLIActive(); // Keeping CLI active for human interaction rather than for automated interaction.
    5828:	0e 94 b9 20 	call	0x4172	; 0x4172 <isCLIActive()>
    582c:	98 2f       	mov	r25, r24
  if(showStatus || humanCLIUse)
    582e:	33 20       	and	r3, r3
    5830:	11 f4       	brne	.+4      	; 0x5836 <loop+0x6d4>
    5832:	88 23       	and	r24, r24
    5834:	59 f0       	breq	.+22     	; 0x584c <loop+0x6ea>
    {
    const uint8_t sct = getSubCycleTime();
    5836:	80 91 b2 00 	lds	r24, 0x00B2
    const uint8_t listenTime = max(GSCT_MAX/16, CLI_POLL_MIN_SCT);
    if(sct < (GSCT_MAX - 2*listenTime))
    583a:	8d 3c       	cpi	r24, 0xCD	; 205
    583c:	38 f4       	brcc	.+14     	; 0x584c <loop+0x6ea>
      // Don't listen beyond the last 16th of the cycle,
      // or a minimal time if only prodding for interaction with automated front-end,
      // as listening for UART RX uses lots of power.
      { pollCLI(humanCLIUse ? (GSCT_MAX-listenTime) : (sct+CLI_POLL_MIN_SCT)); }
    583e:	99 23       	and	r25, r25
    5840:	11 f0       	breq	.+4      	; 0x5846 <loop+0x6e4>
    5842:	86 ee       	ldi	r24, 0xE6	; 230
    5844:	01 c0       	rjmp	.+2      	; 0x5848 <loop+0x6e6>
    5846:	87 5e       	subi	r24, 0xE7	; 231
    5848:	0e 94 e5 23 	call	0x47ca	; 0x47ca <pollCLI(unsigned char)>
    DEBUG_SERIAL_PRINTLN();
    }
#endif

  // Detect and handle (actual or near) overrun, if it happens, though it should not.
  if(TIME_LSD != getSecondsLT())
    584c:	90 91 d0 01 	lds	r25, 0x01D0
    5850:	80 91 ed 01 	lds	r24, 0x01ED
    5854:	89 17       	cp	r24, r25
    5856:	71 f1       	breq	.+92     	; 0x58b4 <loop+0x752>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    5858:	f9 99       	sbic	0x1f, 1	; 31
    585a:	fe cf       	rjmp	.-4      	; 0x5858 <loop+0x6f6>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    585c:	8d e1       	ldi	r24, 0x1D	; 29
    585e:	90 e0       	ldi	r25, 0x00	; 0
    5860:	92 bd       	out	0x22, r25	; 34
    5862:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    5864:	f8 9a       	sbi	0x1f, 0	; 31
    5866:	10 b5       	in	r17, 0x20	; 32
    {
    // Increment the overrun counter (stored inverted, so 0xff initialised => 0 overruns).
    const uint8_t orc = 1 + ~eeprom_read_byte((uint8_t *)EE_START_OVERRUN_COUNTER);
    5868:	11 95       	neg	r17
    eeprom_smart_update_byte((uint8_t *)EE_START_OVERRUN_COUNTER, ~orc);
    586a:	61 2f       	mov	r22, r17
    586c:	60 95       	com	r22
    586e:	0e 94 ca 0b 	call	0x1794	; 0x1794 <eeprom_smart_update_byte(unsigned char*, unsigned char)>
#if 1 && defined(DEBUG)
    DEBUG_SERIAL_PRINT_FLASHSTRING("!ERROR: loop overrun ");
    5872:	83 e6       	ldi	r24, 0x63	; 99
    5874:	94 e0       	ldi	r25, 0x04	; 4
    5876:	0e 94 3f 20 	call	0x407e	; 0x407e <serialPrintAndFlush(__FlashStringHelper const*)>
    DEBUG_SERIAL_PRINT(orc);
    587a:	81 2f       	mov	r24, r17
    587c:	90 e0       	ldi	r25, 0x00	; 0
    587e:	6a e0       	ldi	r22, 0x0A	; 10
    5880:	70 e0       	ldi	r23, 0x00	; 0
    5882:	0e 94 0d 20 	call	0x401a	; 0x401a <serialPrintAndFlush(int, int)>
    DEBUG_SERIAL_PRINTLN();
    5886:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <serialPrintlnAndFlush()>
#endif
#if defined(USE_MODULE_FHT8VSIMPLE)
    FHT8VSyncAndTXReset(); // Assume that sync with valve may have been lost, so re-sync.
    588a:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <FHT8VSyncAndTXReset()>
#endif
    TIME_LSD = getSecondsLT(); // Prepare to sleep until start of next full minor cycle.
    588e:	80 91 d0 01 	lds	r24, 0x01D0
    5892:	80 93 ed 01 	sts	0x01ED, r24
    5896:	0e c0       	rjmp	.+28     	; 0x58b4 <loop+0x752>
    // Optimisation: if just heard a call need not listen on this next cycle.
    // Optimisation: if boiler timeout is a long time away (>> one FHT8V TX cycle, ~2 minutes excl quiet minute), then can avoid listening for now.
    //    Longish period without any RX listening may allow hub unit to cool and get better sample of local temperature if marginal.
    // Aim to listen in one stretch for greater than full FHT8V TX cycle of ~2m to avoid missing a call for heat.
    // MUST listen for all of final 2 mins of boiler-on to avoid missing TX (without forcing boiler over-run).
    else if((boilerCountdownTicks <= ((MAX_FHT8V_TX_CYCLE_HS+1)/(2*MAIN_TICK_S))) && // Don't miss a final TX that would keep the boiler on...
    5898:	20 91 ef 01 	lds	r18, 0x01EF
    589c:	30 91 f0 01 	lds	r19, 0x01F0
    58a0:	c9 01       	movw	r24, r18
    58a2:	01 97       	sbiw	r24, 0x01	; 1
    58a4:	cb 97       	sbiw	r24, 0x3b	; 59
    58a6:	08 f0       	brcs	.+2      	; 0x58aa <loop+0x748>
    58a8:	ab cd       	rjmp	.-1194   	; 0x5400 <loop+0x29e>
#if defined(USE_MODULE_FHT8VSIMPLE)
  // Act on eavesdropping need, setting up or clearing down hooks as required.
  if(needsToEavesdrop)
    {
    // Ensure radio is in RX mode rather than standby, and possibly hook up interrupts if available (REV1 board).
    SetupToEavesdropOnFHT8V(second0); // Start listening (if not already so).
    58aa:	8d 2d       	mov	r24, r13
    58ac:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <SetupToEavesdropOnFHT8V(bool)>
    58b0:	01 e0       	ldi	r16, 0x01	; 1
    58b2:	b4 cd       	rjmp	.-1176   	; 0x541c <loop+0x2ba>
  else if(getSubCycleTime() >= nearOverrunThreshold)
    {
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("?O"); // Near overrun.  Note 2ms/char to send...
    }
#endif
  }
    58b4:	c0 5b       	subi	r28, 0xB0	; 176
    58b6:	df 4f       	sbci	r29, 0xFF	; 255
    58b8:	0f b6       	in	r0, 0x3f	; 63
    58ba:	f8 94       	cli
    58bc:	de bf       	out	0x3e, r29	; 62
    58be:	0f be       	out	0x3f, r0	; 63
    58c0:	cd bf       	out	0x3d, r28	; 61
    58c2:	cf 91       	pop	r28
    58c4:	df 91       	pop	r29
    58c6:	1f 91       	pop	r17
    58c8:	0f 91       	pop	r16
    58ca:	ff 90       	pop	r15
    58cc:	ef 90       	pop	r14
    58ce:	df 90       	pop	r13
    58d0:	cf 90       	pop	r12
    58d2:	bf 90       	pop	r11
    58d4:	af 90       	pop	r10
    58d6:	9f 90       	pop	r9
    58d8:	8f 90       	pop	r8
    58da:	7f 90       	pop	r7
    58dc:	6f 90       	pop	r6
    58de:	5f 90       	pop	r5
    58e0:	4f 90       	pop	r4
    58e2:	3f 90       	pop	r3
    58e4:	08 95       	ret

000058e6 <sleepLowPowerMs(unsigned int)>:
// This may be achieved in part by dynamically slowing the CPU clock if possible.
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed((((MIN_CPU_HZ * (ms)) + 2000) / 4000) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    58e6:	a0 e0       	ldi	r26, 0x00	; 0
    58e8:	b0 e0       	ldi	r27, 0x00	; 0
    58ea:	bc 01       	movw	r22, r24
    58ec:	cd 01       	movw	r24, r26
    58ee:	22 e1       	ldi	r18, 0x12	; 18
    58f0:	3a e7       	ldi	r19, 0x7A	; 122
    58f2:	40 e0       	ldi	r20, 0x00	; 0
    58f4:	50 e0       	ldi	r21, 0x00	; 0
    58f6:	0e 94 dc 38 	call	0x71b8	; 0x71b8 <__mulsi3>
    58fa:	60 53       	subi	r22, 0x30	; 48
    58fc:	78 4f       	sbci	r23, 0xF8	; 248
    58fe:	8f 4f       	sbci	r24, 0xFF	; 255
    5900:	9f 4f       	sbci	r25, 0xFF	; 255
    5902:	20 ea       	ldi	r18, 0xA0	; 160
    5904:	3f e0       	ldi	r19, 0x0F	; 15
    5906:	40 e0       	ldi	r20, 0x00	; 0
    5908:	50 e0       	ldi	r21, 0x00	; 0
    590a:	0e 94 44 39 	call	0x7288	; 0x7288 <__divmodsi4>
    590e:	da 01       	movw	r26, r20
    5910:	c9 01       	movw	r24, r18
    5912:	02 97       	sbiw	r24, 0x02	; 2
    5914:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
    5918:	08 95       	ret

0000591a <posPOST(unsigned char, __FlashStringHelper const*)>:
//   * Two quick flashes from the Arduino bootloader then the LED comes on.
//   * Each of the 5 main sections of Power On Self Test is 1 second LED on, 0.5 second off, n short flashes separated by 0.25s off, then 0.5s off, then 1s on.
//     The value of n is 1, 2, 3, 4, 5.
//   * The LED should then go off except for optional faint flickers as the radio is being driven if set up to do so.
#define PP_OFF_MS 250
static void posPOST(const uint8_t position, const __FlashStringHelper *s)
    591a:	ff 92       	push	r15
    591c:	0f 93       	push	r16
    591e:	1f 93       	push	r17
    5920:	cf 93       	push	r28
    5922:	df 93       	push	r29
    5924:	f8 2e       	mov	r15, r24
    5926:	8b 01       	movw	r16, r22
  {
  sleepLowPowerMs(1000);
    5928:	88 ee       	ldi	r24, 0xE8	; 232
    592a:	93 e0       	ldi	r25, 0x03	; 3
    592c:	0e 94 73 2c 	call	0x58e6	; 0x58e6 <sleepLowPowerMs(unsigned int)>
#ifdef DEBUG
  DEBUG_SERIAL_PRINT_FLASHSTRING("posPOST: "); // Can only be used once serial is set up.
    5930:	8a ee       	ldi	r24, 0xEA	; 234
    5932:	96 e0       	ldi	r25, 0x06	; 6
    5934:	0e 94 3f 20 	call	0x407e	; 0x407e <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(position);
    5938:	cf 2d       	mov	r28, r15
    593a:	d0 e0       	ldi	r29, 0x00	; 0
    593c:	ce 01       	movw	r24, r28
    593e:	6a e0       	ldi	r22, 0x0A	; 10
    5940:	70 e0       	ldi	r23, 0x00	; 0
    5942:	0e 94 0d 20 	call	0x401a	; 0x401a <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINT_FLASHSTRING(": ");
    5946:	87 ee       	ldi	r24, 0xE7	; 231
    5948:	96 e0       	ldi	r25, 0x06	; 6
    594a:	0e 94 3f 20 	call	0x407e	; 0x407e <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(s);
    594e:	c8 01       	movw	r24, r16
    5950:	0e 94 3f 20 	call	0x407e	; 0x407e <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINTLN();
    5954:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <serialPrintlnAndFlush()>
#else
  serialPrintlnAndFlush(s);
#endif
//  pinMode(LED_HEATCALL, OUTPUT);
  LED_HEATCALL_OFF();
    5958:	5c 9a       	sbi	0x0b, 4	; 11
  sleepLowPowerMs(2*PP_OFF_MS); // TODO: use this time to gather entropy.
    595a:	84 ef       	ldi	r24, 0xF4	; 244
    595c:	91 e0       	ldi	r25, 0x01	; 1
    595e:	07 c0       	rjmp	.+14     	; 0x596e <posPOST(unsigned char, __FlashStringHelper const*)+0x54>
  
  int i = position;
  while(--i >= 0)
    {
    LED_HEATCALL_ON();
    5960:	5c 98       	cbi	0x0b, 4	; 11
// Very tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define VERYTINY_PAUSE_MS 5
static void inline veryTinyPause() { sleepLowPowerMs(VERYTINY_PAUSE_MS); }
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define TINY_PAUSE_MS 15
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    5962:	80 e0       	ldi	r24, 0x00	; 0
    5964:	0e 94 29 16 	call	0x2c52	; 0x2c52 <nap(signed char)>
    tinyPause();
    LED_HEATCALL_OFF();
    5968:	5c 9a       	sbi	0x0b, 4	; 11
    sleepLowPowerMs(PP_OFF_MS); // TODO: use this time to gather entropy.
    596a:	8a ef       	ldi	r24, 0xFA	; 250
    596c:	90 e0       	ldi	r25, 0x00	; 0
    596e:	0e 94 73 2c 	call	0x58e6	; 0x58e6 <sleepLowPowerMs(unsigned int)>
//  pinMode(LED_HEATCALL, OUTPUT);
  LED_HEATCALL_OFF();
  sleepLowPowerMs(2*PP_OFF_MS); // TODO: use this time to gather entropy.
  
  int i = position;
  while(--i >= 0)
    5972:	21 97       	sbiw	r28, 0x01	; 1
    5974:	8f ef       	ldi	r24, 0xFF	; 255
    5976:	cf 3f       	cpi	r28, 0xFF	; 255
    5978:	d8 07       	cpc	r29, r24
    597a:	91 f7       	brne	.-28     	; 0x5960 <posPOST(unsigned char, __FlashStringHelper const*)+0x46>
    tinyPause();
    LED_HEATCALL_OFF();
    sleepLowPowerMs(PP_OFF_MS); // TODO: use this time to gather entropy.
    }

  sleepLowPowerMs(PP_OFF_MS); // TODO: use this time to gather entropy.
    597c:	8a ef       	ldi	r24, 0xFA	; 250
    597e:	90 e0       	ldi	r25, 0x00	; 0
    5980:	0e 94 73 2c 	call	0x58e6	; 0x58e6 <sleepLowPowerMs(unsigned int)>
  LED_HEATCALL_ON();
    5984:	5c 98       	cbi	0x0b, 4	; 11
  sleepLowPowerMs(1000); // TODO: use this time to gather entropy.
    5986:	88 ee       	ldi	r24, 0xE8	; 232
    5988:	93 e0       	ldi	r25, 0x03	; 3
    598a:	0e 94 73 2c 	call	0x58e6	; 0x58e6 <sleepLowPowerMs(unsigned int)>
  }
    598e:	df 91       	pop	r29
    5990:	cf 91       	pop	r28
    5992:	1f 91       	pop	r17
    5994:	0f 91       	pop	r16
    5996:	ff 90       	pop	r15
    5998:	08 95       	ret

0000599a <panic()>:
// Tries not to use lots of energy so as to keep distress beacon running for a while.
void panic()
  {
#ifdef USE_MODULE_RFM22RADIOSIMPLE
  // Reset radio and go into low-power mode.
  RFM22PowerOnInit();
    599a:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <RFM22PowerOnInit()>
#endif
  // Power down almost everything else...
  minimisePowerWithoutSleep();
    599e:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <minimisePowerWithoutSleep()>
#ifdef LED_HEATCALL
  pinMode(LED_HEATCALL, OUTPUT);
#else
  pinMode(LED_HEATCALL_L, OUTPUT);
    59a2:	84 e0       	ldi	r24, 0x04	; 4
    59a4:	61 e0       	ldi	r22, 0x01	; 1
    59a6:	0e 94 d6 32 	call	0x65ac	; 0x65ac <pinMode>
#endif
  for( ; ; )
    {
    LED_HEATCALL_ON();
    59aa:	5c 98       	cbi	0x0b, 4	; 11
    59ac:	80 e0       	ldi	r24, 0x00	; 0
    59ae:	0e 94 29 16 	call	0x2c52	; 0x2c52 <nap(signed char)>
    tinyPause();
    LED_HEATCALL_OFF();
    59b2:	5c 9a       	sbi	0x0b, 4	; 11
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define MEDIUM_PAUSE_MS 60
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
// Big low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define BIG_PAUSE_MS 120
static void inline bigPause() { nap(WDTO_120MS); } // 120ms vs 288ms nominal for PICAXE V0.09 impl.
    59b4:	83 e0       	ldi	r24, 0x03	; 3
    59b6:	0e 94 29 16 	call	0x2c52	; 0x2c52 <nap(signed char)>
    59ba:	f7 cf       	rjmp	.-18     	; 0x59aa <panic()+0x10>

000059bc <panic(__FlashStringHelper const*)>:
  }

// Panic with fixed message.
void panic(const __FlashStringHelper *s)
  {
  serialPrintlnAndFlush(s); // May fail.
    59bc:	0e 94 55 20 	call	0x40aa	; 0x40aa <serialPrintlnAndFlush(__FlashStringHelper const*)>
  panic();  
    59c0:	0e 94 cd 2c 	call	0x599a	; 0x599a <panic()>
  }
    59c4:	08 95       	ret

000059c6 <optionalPOST()>:
  serialPrintlnAndFlush();
  }

// Optional Power-On Self Test routines.
// Aborts with a call to panic() if a test fails.
void optionalPOST()
    59c6:	0f 93       	push	r16
    59c8:	1f 93       	push	r17
    59ca:	cf 93       	push	r28
    59cc:	df 93       	push	r29
  {
  // Capture early sub-cycle time to help ensure that the 32768Hz async clock is actually running.
  const uint8_t earlySCT = getSubCycleTime();
    59ce:	00 91 b2 00 	lds	r16, 0x00B2

//  posPOST(1, F("about to test radio module"));

#ifdef USE_MODULE_RFM22RADIOSIMPLE
#if !defined(RFM22_IS_ACTUALLY_RFM23) && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("(Using RFM22.)");
    59d2:	88 ed       	ldi	r24, 0xD8	; 216
    59d4:	96 e0       	ldi	r25, 0x06	; 6
    59d6:	0e 94 55 20 	call	0x40aa	; 0x40aa <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif
  // Initialise the radio, if configured, ASAP because it can suck a lot of power until properly initialised.
  RFM22PowerOnInit();
    59da:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <RFM22PowerOnInit()>
  // Check that the radio is correctly connected; panic if not...
  if(!RFM22CheckConnected()) { panic(); }
    59de:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <RFM22CheckConnected()>
    59e2:	88 23       	and	r24, r24
    59e4:	11 f4       	brne	.+4      	; 0x59ea <optionalPOST()+0x24>
    59e6:	0e 94 cd 2c 	call	0x599a	; 0x599a <panic()>
  // Configure the radio.
  RFM22RegisterBlockSetup(FHT8V_RFM22_Reg_Values);
    59ea:	88 e9       	ldi	r24, 0x98	; 152
    59ec:	90 e0       	ldi	r25, 0x00	; 0
    59ee:	0e 94 42 1b 	call	0x3684	; 0x3684 <RFM22RegisterBlockSetup(unsigned char const (*) [2])>
  // Put the radio in low-power standby mode.
  RFM22ModeStandbyAndClearState();
    59f2:	0e 94 bf 1b 	call	0x377e	; 0x377e <RFM22ModeStandbyAndClearState()>
#endif

  posPOST(1, F("Radio OK, checking buttons/sensors and xtal"));
    59f6:	81 e0       	ldi	r24, 0x01	; 1
    59f8:	6c ea       	ldi	r22, 0xAC	; 172
    59fa:	76 e0       	ldi	r23, 0x06	; 6
    59fc:	0e 94 8d 2c 	call	0x591a	; 0x591a <posPOST(unsigned char, __FlashStringHelper const*)>

  // Check buttons not stuck enabled.
  if(fastDigitalRead(BUTTON_MODE_L) == LOW) { panic(F("M stuck")); }
    5a00:	4d 99       	sbic	0x09, 5	; 9
    5a02:	04 c0       	rjmp	.+8      	; 0x5a0c <optionalPOST()+0x46>
    5a04:	84 ea       	ldi	r24, 0xA4	; 164
    5a06:	96 e0       	ldi	r25, 0x06	; 6
    5a08:	0e 94 de 2c 	call	0x59bc	; 0x59bc <panic(__FlashStringHelper const*)>
#if defined(BUTTON_LEARN_L)
  if(fastDigitalRead(BUTTON_LEARN_L) == LOW) { panic(F("L stuck")); }
    5a0c:	18 99       	sbic	0x03, 0	; 3
    5a0e:	04 c0       	rjmp	.+8      	; 0x5a18 <optionalPOST()+0x52>
    5a10:	8c e9       	ldi	r24, 0x9C	; 156
    5a12:	96 e0       	ldi	r25, 0x06	; 6
    5a14:	0e 94 de 2c 	call	0x59bc	; 0x59bc <panic(__FlashStringHelper const*)>
#endif
#if defined(BUTTON_LEARN2_L)
  if(fastDigitalRead(BUTTON_LEARN2_L) == LOW) { panic(F("L2 stuck")); }
    5a18:	4b 99       	sbic	0x09, 3	; 9
    5a1a:	04 c0       	rjmp	.+8      	; 0x5a24 <optionalPOST()+0x5e>
    5a1c:	83 e9       	ldi	r24, 0x93	; 147
    5a1e:	96 e0       	ldi	r25, 0x06	; 6
    5a20:	0e 94 de 2c 	call	0x59bc	; 0x59bc <panic(__FlashStringHelper const*)>
#endif

  // Check that the 32768Hz async clock is actually running having done significant CPU-intensive work.
  const uint8_t laterSCT = getSubCycleTime();
    5a24:	10 91 b2 00 	lds	r17, 0x00B2
  if(laterSCT == earlySCT)
    5a28:	10 17       	cp	r17, r16
    5a2a:	f1 f4       	brne	.+60     	; 0x5a68 <optionalPOST()+0xa2>
    {
#if defined(WAKEUP_32768HZ_XTAL)
    // Allow (an extra) 1s+ for 32768Hz crystal to start reliably, see: http://www.atmel.com/Images/doc1259.pdf
#if 1 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("Sleeping to let async 32768Hz clock start...");
    5a2c:	86 e6       	ldi	r24, 0x66	; 102
    5a2e:	96 e0       	ldi	r25, 0x06	; 6
    5a30:	0e 94 55 20 	call	0x40aa	; 0x40aa <serialPrintlnAndFlush(__FlashStringHelper const*)>
    5a34:	c4 e1       	ldi	r28, 0x14	; 20
    5a36:	d0 e0       	ldi	r29, 0x00	; 0
#endif
    // Time spent here should not be a whole multiple of basic cycle time to avoid spuriously stationary async clock reading!
    for(int i = 20; (--i >= 0) && (earlySCT == getSubCycleTime()); )
    5a38:	21 97       	sbiw	r28, 0x01	; 1
    5a3a:	8f ef       	ldi	r24, 0xFF	; 255
    5a3c:	cf 3f       	cpi	r28, 0xFF	; 255
    5a3e:	d8 07       	cpc	r29, r24
    5a40:	e9 f0       	breq	.+58     	; 0x5a7c <optionalPOST()+0xb6>
    5a42:	80 91 b2 00 	lds	r24, 0x00B2
    5a46:	18 17       	cp	r17, r24
    5a48:	c9 f4       	brne	.+50     	; 0x5a7c <optionalPOST()+0xb6>
      {
      sleepLowPowerMs(691);
    5a4a:	83 eb       	ldi	r24, 0xB3	; 179
    5a4c:	92 e0       	ldi	r25, 0x02	; 2
    5a4e:	0e 94 73 2c 	call	0x58e6	; 0x58e6 <sleepLowPowerMs(unsigned int)>
      captureEntropy1();
    5a52:	0e 94 91 18 	call	0x3122	; 0x3122 <captureEntropy1()>
    5a56:	f0 cf       	rjmp	.-32     	; 0x5a38 <optionalPOST()+0x72>
#endif
    const uint8_t latestSCT = getSubCycleTime();
    if(latestSCT == earlySCT)
      {
#if 1 && defined(DEBUG)
      DEBUG_SERIAL_PRINTLN_FLASHSTRING("Async 32768Hz clock may not be running!");
    5a58:	8e e3       	ldi	r24, 0x3E	; 62
    5a5a:	96 e0       	ldi	r25, 0x06	; 6
    5a5c:	0e 94 55 20 	call	0x40aa	; 0x40aa <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif
      panic(F("XTAL dead")); // Async clock not running.
    5a60:	84 e3       	ldi	r24, 0x34	; 52
    5a62:	96 e0       	ldi	r25, 0x06	; 6
    5a64:	0e 94 de 2c 	call	0x59bc	; 0x59bc <panic(__FlashStringHelper const*)>
      }
    }
  posPOST(2, F("slow RTC clock OK"));
    5a68:	82 e0       	ldi	r24, 0x02	; 2
    5a6a:	62 e2       	ldi	r22, 0x22	; 34
    5a6c:	76 e0       	ldi	r23, 0x06	; 6
    5a6e:	0e 94 8d 2c 	call	0x591a	; 0x591a <posPOST(unsigned char, __FlashStringHelper const*)>
  }
    5a72:	df 91       	pop	r29
    5a74:	cf 91       	pop	r28
    5a76:	1f 91       	pop	r17
    5a78:	0f 91       	pop	r16
    5a7a:	08 95       	ret
      {
      sleepLowPowerMs(691);
      captureEntropy1();
      }
#endif
    const uint8_t latestSCT = getSubCycleTime();
    5a7c:	80 91 b2 00 	lds	r24, 0x00B2
    if(latestSCT == earlySCT)
    5a80:	81 17       	cp	r24, r17
    5a82:	91 f7       	brne	.-28     	; 0x5a68 <optionalPOST()+0xa2>
    5a84:	e9 cf       	rjmp	.-46     	; 0x5a58 <optionalPOST()+0x92>

00005a86 <setup>:
  }


// Setup routine: runs once after reset.
// Does some limited board self-test and will panic() if anything is obviously broken.
void setup()
    5a86:	2f 92       	push	r2
    5a88:	3f 92       	push	r3
    5a8a:	4f 92       	push	r4
    5a8c:	5f 92       	push	r5
    5a8e:	6f 92       	push	r6
    5a90:	7f 92       	push	r7
    5a92:	8f 92       	push	r8
    5a94:	9f 92       	push	r9
    5a96:	af 92       	push	r10
    5a98:	bf 92       	push	r11
    5a9a:	cf 92       	push	r12
    5a9c:	df 92       	push	r13
    5a9e:	ef 92       	push	r14
    5aa0:	ff 92       	push	r15
    5aa2:	0f 93       	push	r16
    5aa4:	1f 93       	push	r17
    5aa6:	df 93       	push	r29
    5aa8:	cf 93       	push	r28
    5aaa:	00 d0       	rcall	.+0      	; 0x5aac <setup+0x26>
    5aac:	00 d0       	rcall	.+0      	; 0x5aae <setup+0x28>
    5aae:	00 d0       	rcall	.+0      	; 0x5ab0 <setup+0x2a>
    5ab0:	cd b7       	in	r28, 0x3d	; 61
    5ab2:	de b7       	in	r29, 0x3e	; 62
  {
  // Set appropriate low-power states, interrupts, etc, ASAP.
  powerSetup();
    5ab4:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <powerSetup()>
    5ab8:	0e e0       	ldi	r16, 0x0E	; 14
    5aba:	10 e0       	ldi	r17, 0x00	; 0
    5abc:	3f c0       	rjmp	.+126    	; 0x5b3c <setup+0xb6>
  {
  // Initialise all digital I/O to safe state ASAP and avoid floating lines where possible.
  // In absence of a specific alternative, drive low as an output to minimise consumption (eg from floating input).
  for(int i = 14; --i >= 0; ) // For all digital pins from 0 to 13 inclusive...
    {
    switch(i)
    5abe:	04 30       	cpi	r16, 0x04	; 4
    5ac0:	11 05       	cpc	r17, r1
    5ac2:	31 f1       	breq	.+76     	; 0x5b10 <setup+0x8a>
    5ac4:	05 30       	cpi	r16, 0x05	; 5
    5ac6:	11 05       	cpc	r17, r1
    5ac8:	4c f4       	brge	.+18     	; 0x5adc <setup+0x56>
    5aca:	02 30       	cpi	r16, 0x02	; 2
    5acc:	11 05       	cpc	r17, r1
    5ace:	79 f1       	breq	.+94     	; 0x5b2e <setup+0xa8>
    5ad0:	03 30       	cpi	r16, 0x03	; 3
    5ad2:	11 05       	cpc	r17, r1
    5ad4:	34 f5       	brge	.+76     	; 0x5b22 <setup+0x9c>
    5ad6:	17 ff       	sbrs	r17, 7
    5ad8:	24 c0       	rjmp	.+72     	; 0x5b22 <setup+0x9c>
    5ada:	13 c0       	rjmp	.+38     	; 0x5b02 <setup+0x7c>
    5adc:	09 30       	cpi	r16, 0x09	; 9
    5ade:	11 05       	cpc	r17, r1
    5ae0:	49 f1       	breq	.+82     	; 0x5b34 <setup+0xae>
    5ae2:	0a 30       	cpi	r16, 0x0A	; 10
    5ae4:	11 05       	cpc	r17, r1
    5ae6:	3c f4       	brge	.+14     	; 0x5af6 <setup+0x70>
    5ae8:	05 30       	cpi	r16, 0x05	; 5
    5aea:	11 05       	cpc	r17, r1
    5aec:	d1 f0       	breq	.+52     	; 0x5b22 <setup+0x9c>
    5aee:	08 30       	cpi	r16, 0x08	; 8
    5af0:	11 05       	cpc	r17, r1
    5af2:	39 f4       	brne	.+14     	; 0x5b02 <setup+0x7c>
    5af4:	16 c0       	rjmp	.+44     	; 0x5b22 <setup+0x9c>
    5af6:	0a 30       	cpi	r16, 0x0A	; 10
    5af8:	11 05       	cpc	r17, r1
    5afa:	a9 f0       	breq	.+42     	; 0x5b26 <setup+0xa0>
    5afc:	0c 30       	cpi	r16, 0x0C	; 12
    5afe:	11 05       	cpc	r17, r1
    5b00:	a1 f0       	breq	.+40     	; 0x5b2a <setup+0xa4>
      {
      // Low output is good low-power default.
      default: { digitalWrite(i, LOW); pinMode(i, OUTPUT); break; }
    5b02:	80 2f       	mov	r24, r16
    5b04:	60 e0       	ldi	r22, 0x00	; 0
    5b06:	0e 94 15 33 	call	0x662a	; 0x662a <digitalWrite>
    5b0a:	80 2f       	mov	r24, r16
    5b0c:	61 e0       	ldi	r22, 0x01	; 1
    5b0e:	14 c0       	rjmp	.+40     	; 0x5b38 <setup+0xb2>
      // Switch main UI LED on for the rest of initialisation...
#ifdef LED_HEATCALL
      case LED_HEATCALL: { pinMode(LED_HEATCALL, OUTPUT); digitalWrite(LED_HEATCALL, HIGH); break; }
#endif
#ifdef LED_HEATCALL_L
      case LED_HEATCALL_L: { pinMode(LED_HEATCALL_L, OUTPUT); digitalWrite(LED_HEATCALL_L, LOW); break; }
    5b10:	84 e0       	ldi	r24, 0x04	; 4
    5b12:	61 e0       	ldi	r22, 0x01	; 1
    5b14:	0e 94 d6 32 	call	0x65ac	; 0x65ac <pinMode>
    5b18:	84 e0       	ldi	r24, 0x04	; 4
    5b1a:	60 e0       	ldi	r22, 0x00	; 0
    5b1c:	0e 94 15 33 	call	0x662a	; 0x662a <digitalWrite>
    5b20:	0d c0       	rjmp	.+26     	; 0x5b3c <setup+0xb6>
      case BUTTON_LEARN_L: // Learn button is optional.
#endif
#ifdef BUTTON_LEARN2_L
      case BUTTON_LEARN2_L: // Learn button 2 is optional.
#endif
      case BUTTON_MODE_L: { pinMode(i, INPUT_PULLUP); break; }
    5b22:	80 2f       	mov	r24, r16
    5b24:	05 c0       	rjmp	.+10     	; 0x5b30 <setup+0xaa>

#ifdef PIN_SPI_nSS
      // Do not leave/set SPI nSS as low output (or floating) to avoid waking up SPI slave(s).
      case PIN_SPI_nSS: { pinMode(PIN_SPI_nSS, INPUT_PULLUP); break; }
    5b26:	8a e0       	ldi	r24, 0x0A	; 10
    5b28:	03 c0       	rjmp	.+6      	; 0x5b30 <setup+0xaa>
#endif
#ifdef PIN_SPI_MISO
      // Do not leave/set SPI MISO as (low) output (or floating).
      case PIN_SPI_MISO: { pinMode(PIN_SPI_MISO, INPUT_PULLUP); break; }
    5b2a:	8c e0       	ldi	r24, 0x0C	; 12
    5b2c:	01 c0       	rjmp	.+2      	; 0x5b30 <setup+0xaa>
#endif

#ifdef PIN_OW_DQ_DATA
      // Weak pull-up to avoid leakage current.
      case PIN_OW_DQ_DATA: { pinMode(PIN_OW_DQ_DATA, INPUT_PULLUP); break; }
    5b2e:	82 e0       	ldi	r24, 0x02	; 2
    5b30:	62 e0       	ldi	r22, 0x02	; 2
    5b32:	02 c0       	rjmp	.+4      	; 0x5b38 <setup+0xb2>
#endif

#ifdef PIN_RFM_NIRQ 
      // Set as input to avoid contention current.
      case PIN_RFM_NIRQ: { pinMode(PIN_RFM_NIRQ, INPUT); break; }
    5b34:	89 e0       	ldi	r24, 0x09	; 9
    5b36:	60 e0       	ldi	r22, 0x00	; 0
    5b38:	0e 94 d6 32 	call	0x65ac	; 0x65ac <pinMode>
// Call this ASAP in setup() to configure I/O safely for the board, avoid pins floating, etc.
static inline void IOSetup()
  {
  // Initialise all digital I/O to safe state ASAP and avoid floating lines where possible.
  // In absence of a specific alternative, drive low as an output to minimise consumption (eg from floating input).
  for(int i = 14; --i >= 0; ) // For all digital pins from 0 to 13 inclusive...
    5b3c:	01 50       	subi	r16, 0x01	; 1
    5b3e:	10 40       	sbci	r17, 0x00	; 0
    5b40:	17 ff       	sbrs	r17, 7
    5b42:	bd cf       	rjmp	.-134    	; 0x5abe <setup+0x38>

  // IO setup for safety, eg to avoid pins floating.
  IOSetup();

  // Restore previous RTC state if available.
  restoreRTC();
    5b44:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <restoreRTC()>
  // TODO: consider code to calibrate the internal RC oscillator against the xtal, eg to keep serial comms happy, eg http://www.avrfreaks.net/index.php?name=PNphpBB2&file=printview&t=36237&start=0

  serialPrintAndFlush(F("\r\nOpenTRV booting: ")); // Leading CRLF to clear leading junk, eg from bootloader.
    5b48:	8e e0       	ldi	r24, 0x0E	; 14
    5b4a:	96 e0       	ldi	r25, 0x06	; 6
    5b4c:	0e 94 3f 20 	call	0x407e	; 0x407e <serialPrintAndFlush(__FlashStringHelper const*)>
    serialPrintlnBuildVersion();
    5b50:	0e 94 98 28 	call	0x5130	; 0x5130 <serialPrintlnBuildVersion()>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    5b54:	f9 99       	sbic	0x1f, 1	; 31
    5b56:	fe cf       	rjmp	.-4      	; 0x5b54 <setup+0xce>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    5b58:	86 e0       	ldi	r24, 0x06	; 6
    5b5a:	90 e0       	ldi	r25, 0x00	; 0
    5b5c:	92 bd       	out	0x22, r25	; 34
    5b5e:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    5b60:	f8 9a       	sbi	0x1f, 0	; 31
    5b62:	f0 b4       	in	r15, 0x20	; 32
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    5b64:	f9 99       	sbic	0x1f, 1	; 31
    5b66:	fe cf       	rjmp	.-4      	; 0x5b64 <setup+0xde>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    5b68:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    5b6a:	86 e0       	ldi	r24, 0x06	; 6
    5b6c:	90 e0       	ldi	r25, 0x00	; 0
    5b6e:	92 bd       	out	0x22, r25	; 34
    5b70:	81 bd       	out	0x21, r24	; 33

  // Count resets to detect unexpected crashes/restarts.
  const uint8_t oldResetCount = eeprom_read_byte((uint8_t *)EE_START_RESET_COUNT);
  eeprom_write_byte((uint8_t *)EE_START_RESET_COUNT, 1 + oldResetCount);
    5b72:	f3 94       	inc	r15
#endif
    EEDR = __value;
    5b74:	f0 bc       	out	0x20, r15	; 32
    5b76:	fa 94       	dec	r15
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    5b78:	0f b6       	in	r0, 0x3f	; 63
    5b7a:	f8 94       	cli
    5b7c:	fa 9a       	sbi	0x1f, 2	; 31
    5b7e:	f9 9a       	sbi	0x1f, 1	; 31
    5b80:	0f be       	out	0x3f, r0	; 63

#ifdef DEBUG
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("DEBUG mode with serial logging");
    5b82:	8f ee       	ldi	r24, 0xEF	; 239
    5b84:	95 e0       	ldi	r25, 0x05	; 5
    5b86:	0e 94 55 20 	call	0x40aa	; 0x40aa <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif
#ifdef DEBUG
  DEBUG_SERIAL_PRINT_FLASHSTRING("Resets: ");
    5b8a:	86 ee       	ldi	r24, 0xE6	; 230
    5b8c:	95 e0       	ldi	r25, 0x05	; 5
    5b8e:	0e 94 3f 20 	call	0x407e	; 0x407e <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(oldResetCount);
    5b92:	8f 2d       	mov	r24, r15
    5b94:	90 e0       	ldi	r25, 0x00	; 0
    5b96:	6a e0       	ldi	r22, 0x0A	; 10
    5b98:	70 e0       	ldi	r23, 0x00	; 0
    5b9a:	0e 94 0d 20 	call	0x401a	; 0x401a <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    5b9e:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <serialPrintlnAndFlush()>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    5ba2:	f9 99       	sbic	0x1f, 1	; 31
    5ba4:	fe cf       	rjmp	.-4      	; 0x5ba2 <setup+0x11c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    5ba6:	8d e1       	ldi	r24, 0x1D	; 29
    5ba8:	90 e0       	ldi	r25, 0x00	; 0
    5baa:	92 bd       	out	0x22, r25	; 34
    5bac:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    5bae:	f8 9a       	sbi	0x1f, 0	; 31
    5bb0:	10 b5       	in	r17, 0x20	; 32
  const uint8_t overruns = (~eeprom_read_byte((uint8_t *)EE_START_OVERRUN_COUNTER)) & 0xff;
    5bb2:	10 95       	com	r17
  if(0 != overruns)
    5bb4:	61 f0       	breq	.+24     	; 0x5bce <setup+0x148>
    {
    DEBUG_SERIAL_PRINT_FLASHSTRING("Overruns: ");
    5bb6:	8b ed       	ldi	r24, 0xDB	; 219
    5bb8:	95 e0       	ldi	r25, 0x05	; 5
    5bba:	0e 94 3f 20 	call	0x407e	; 0x407e <serialPrintAndFlush(__FlashStringHelper const*)>
    DEBUG_SERIAL_PRINT(overruns);
    5bbe:	81 2f       	mov	r24, r17
    5bc0:	90 e0       	ldi	r25, 0x00	; 0
    5bc2:	6a e0       	ldi	r22, 0x0A	; 10
    5bc4:	70 e0       	ldi	r23, 0x00	; 0
    5bc6:	0e 94 0d 20 	call	0x401a	; 0x401a <serialPrintAndFlush(int, int)>
    DEBUG_SERIAL_PRINTLN();
    5bca:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <serialPrintlnAndFlush()>
    }
  // Compute approx free RAM: see http://jeelabs.org/2011/05/22/atmega-memory-use/
  DEBUG_SERIAL_PRINT_FLASHSTRING("Free RAM: ");
    5bce:	80 ed       	ldi	r24, 0xD0	; 208
    5bd0:	95 e0       	ldi	r25, 0x05	; 5
    5bd2:	0e 94 3f 20 	call	0x407e	; 0x407e <serialPrintAndFlush(__FlashStringHelper const*)>
  extern int __heap_start, *__brkval;
  int x;
  DEBUG_SERIAL_PRINT((int) &x - (__brkval == 0 ? (int) &__heap_start : (int) __brkval));
    5bd6:	80 91 67 03 	lds	r24, 0x0367
    5bda:	90 91 68 03 	lds	r25, 0x0368
    5bde:	00 97       	sbiw	r24, 0x00	; 0
    5be0:	11 f0       	breq	.+4      	; 0x5be6 <setup+0x160>
    5be2:	9c 01       	movw	r18, r24
    5be4:	02 c0       	rjmp	.+4      	; 0x5bea <setup+0x164>
    5be6:	2b e6       	ldi	r18, 0x6B	; 107
    5be8:	33 e0       	ldi	r19, 0x03	; 3
    5bea:	ce 01       	movw	r24, r28
    5bec:	01 96       	adiw	r24, 0x01	; 1
    5bee:	82 1b       	sub	r24, r18
    5bf0:	93 0b       	sbc	r25, r19
    5bf2:	6a e0       	ldi	r22, 0x0A	; 10
    5bf4:	70 e0       	ldi	r23, 0x00	; 0
    5bf6:	0e 94 0d 20 	call	0x401a	; 0x401a <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    5bfa:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <serialPrintlnAndFlush()>
// POST may take too long and do unwanted things,
// especially for non-standard hardware setup.
#if defined(ALT_MAIN_LOOP)
  altPOST(); // Do alternate POST and setup if required.
#else
  optionalPOST();
    5bfe:	0e 94 e3 2c 	call	0x59c6	; 0x59c6 <optionalPOST()>

  // No external sensors are *assumed* present if running alt main loop.
  // This may mean that the alt loop/POST will have to initialise them explicitly,
  // and the initial seed entropy may be marginally reduced also.
#if !defined(ALT_MAIN_LOOP)
  const int light = readAmbientLight();
    5c02:	0e 94 2d 07 	call	0xe5a	; 0xe5a <readAmbientLight()>
    5c06:	1c 01       	movw	r2, r24
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("light: ");
    5c08:	88 ec       	ldi	r24, 0xC8	; 200
    5c0a:	95 e0       	ldi	r25, 0x05	; 5
    5c0c:	0e 94 3f 20 	call	0x407e	; 0x407e <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(light);
    5c10:	c1 01       	movw	r24, r2
    5c12:	6a e0       	ldi	r22, 0x0A	; 10
    5c14:	70 e0       	ldi	r23, 0x00	; 0
    5c16:	0e 94 0d 20 	call	0x401a	; 0x401a <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    5c1a:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <serialPrintlnAndFlush()>
#endif
//  // Assume 0 or full-scale values unlikely.
//  if((0 == light) || (light >= 1023)) { panic(F("LDR fault")); }
  const int heat = readTemperatureC16();
    5c1e:	0e 94 a3 20 	call	0x4146	; 0x4146 <readTemperatureC16()>
    5c22:	2c 01       	movw	r4, r24
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("temp: ");
    5c24:	81 ec       	ldi	r24, 0xC1	; 193
    5c26:	95 e0       	ldi	r25, 0x05	; 5
    5c28:	0e 94 3f 20 	call	0x407e	; 0x407e <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(heat);
    5c2c:	c2 01       	movw	r24, r4
    5c2e:	6a e0       	ldi	r22, 0x0A	; 10
    5c30:	70 e0       	ldi	r23, 0x00	; 0
    5c32:	0e 94 0d 20 	call	0x401a	; 0x401a <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    5c36:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <serialPrintlnAndFlush()>
#endif
#ifdef HUMIDITY_SENSOR_SUPPORT
  const uint8_t rh = readRHpc();
    5c3a:	0e 94 48 12 	call	0x2490	; 0x2490 <readRHpc()>
    5c3e:	e8 2e       	mov	r14, r24
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("RH%: ");
    5c40:	8b eb       	ldi	r24, 0xBB	; 187
    5c42:	95 e0       	ldi	r25, 0x05	; 5
    5c44:	0e 94 3f 20 	call	0x407e	; 0x407e <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(rh);
    5c48:	8e 2d       	mov	r24, r14
    5c4a:	90 e0       	ldi	r25, 0x00	; 0
    5c4c:	6a e0       	ldi	r22, 0x0A	; 10
    5c4e:	70 e0       	ldi	r23, 0x00	; 0
    5c50:	0e 94 0d 20 	call	0x401a	; 0x401a <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    5c54:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <serialPrintlnAndFlush()>
#endif
#endif
#if defined(TEMP_POT_AVAILABLE)
  const int tempPot = readTempPot();
    5c58:	0e 94 6e 20 	call	0x40dc	; 0x40dc <readTempPot()>
    5c5c:	d8 2e       	mov	r13, r24
    5c5e:	c9 2e       	mov	r12, r25
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("temp pot: ");
    5c60:	80 eb       	ldi	r24, 0xB0	; 176
    5c62:	95 e0       	ldi	r25, 0x05	; 5
    5c64:	0e 94 3f 20 	call	0x407e	; 0x407e <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(tempPot);
    5c68:	8d 2d       	mov	r24, r13
    5c6a:	9c 2d       	mov	r25, r12
    5c6c:	6a e0       	ldi	r22, 0x0A	; 10
    5c6e:	70 e0       	ldi	r23, 0x00	; 0
    5c70:	0e 94 0d 20 	call	0x401a	; 0x401a <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    5c74:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <serialPrintlnAndFlush()>
#endif
#endif
#endif

  // Get current power supply voltage (internal sensor).
  const uint16_t Vcc = readBatterymV();
    5c78:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <readBatterymV()>
    5c7c:	9c 83       	std	Y+4, r25	; 0x04
    5c7e:	8b 83       	std	Y+3, r24	; 0x03
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("Vcc: ");
    5c80:	8a ea       	ldi	r24, 0xAA	; 170
    5c82:	95 e0       	ldi	r25, 0x05	; 5
    5c84:	0e 94 3f 20 	call	0x407e	; 0x407e <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(Vcc);
    5c88:	8b 81       	ldd	r24, Y+3	; 0x03
    5c8a:	9c 81       	ldd	r25, Y+4	; 0x04
    5c8c:	6a e0       	ldi	r22, 0x0A	; 10
    5c8e:	70 e0       	ldi	r23, 0x00	; 0
    5c90:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <serialPrintAndFlush(unsigned int, int)>
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("mV");
    5c94:	87 ea       	ldi	r24, 0xA7	; 167
    5c96:	95 e0       	ldi	r25, 0x05	; 5
    5c98:	0e 94 55 20 	call	0x40aa	; 0x40aa <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif
  // Get internal temperature measurement (internal sensor).
  const int intTempC16 = readInternalTemperatureC16();
    5c9c:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <readInternalTemperatureC16()>
    5ca0:	5c 01       	movw	r10, r24
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("Int temp: ");
    5ca2:	8c e9       	ldi	r24, 0x9C	; 156
    5ca4:	95 e0       	ldi	r25, 0x05	; 5
    5ca6:	0e 94 3f 20 	call	0x407e	; 0x407e <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT((intTempC16 + 8) >> 4);
    5caa:	c5 01       	movw	r24, r10
    5cac:	08 96       	adiw	r24, 0x08	; 8
    5cae:	44 e0       	ldi	r20, 0x04	; 4
    5cb0:	95 95       	asr	r25
    5cb2:	87 95       	ror	r24
    5cb4:	4a 95       	dec	r20
    5cb6:	e1 f7       	brne	.-8      	; 0x5cb0 <setup+0x22a>
    5cb8:	6a e0       	ldi	r22, 0x0A	; 10
    5cba:	70 e0       	ldi	r23, 0x00	; 0
    5cbc:	0e 94 0d 20 	call	0x401a	; 0x401a <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINT_FLASHSTRING("C / ");
    5cc0:	87 e9       	ldi	r24, 0x97	; 151
    5cc2:	95 e0       	ldi	r25, 0x05	; 5
    5cc4:	0e 94 3f 20 	call	0x407e	; 0x407e <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(intTempC16);
    5cc8:	c5 01       	movw	r24, r10
    5cca:	6a e0       	ldi	r22, 0x0A	; 10
    5ccc:	70 e0       	ldi	r23, 0x00	; 0
    5cce:	0e 94 0d 20 	call	0x401a	; 0x401a <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    5cd2:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <serialPrintlnAndFlush()>
    5cd6:	e0 e0       	ldi	r30, 0x00	; 0
    5cd8:	f1 e0       	ldi	r31, 0x01	; 1
    5cda:	66 24       	eor	r6, r6
    5cdc:	6a 94       	dec	r6
    5cde:	76 2c       	mov	r7, r6
        "eor    %A0,__tmp_reg__"

        : "=d" (__ret)
        : "r" (__data), "0" (__crc)
        : "r0"
    );
    5ce0:	81 91       	ld	r24, Z+
    5ce2:	93 01       	movw	r18, r6
    5ce4:	28 27       	eor	r18, r24
    5ce6:	02 2e       	mov	r0, r18
    5ce8:	22 95       	swap	r18
    5cea:	20 7f       	andi	r18, 0xF0	; 240
    5cec:	20 25       	eor	r18, r0
    5cee:	03 2e       	mov	r0, r19
    5cf0:	32 2f       	mov	r19, r18
    5cf2:	22 95       	swap	r18
    5cf4:	2f 70       	andi	r18, 0x0F	; 15
    5cf6:	02 26       	eor	r0, r18
    5cf8:	26 95       	lsr	r18
    5cfa:	32 27       	eor	r19, r18
    5cfc:	23 27       	eor	r18, r19
    5cfe:	22 0f       	add	r18, r18
    5d00:	22 0f       	add	r18, r18
    5d02:	22 0f       	add	r18, r18
    5d04:	20 25       	eor	r18, r0
    5d06:	39 01       	movw	r6, r18
#define RAMSTART (0x100)
#endif
static uint16_t sramCRC()
  {
  uint16_t result = ~0U;
  for(uint8_t *p = (uint8_t *)RAMSTART; p <= (uint8_t *)RAMEND; ++p)
    5d08:	39 e0       	ldi	r19, 0x09	; 9
    5d0a:	e0 30       	cpi	r30, 0x00	; 0
    5d0c:	f3 07       	cpc	r31, r19
    5d0e:	41 f7       	brne	.-48     	; 0x5ce0 <setup+0x25a>
    5d10:	20 e0       	ldi	r18, 0x00	; 0
    5d12:	30 e0       	ldi	r19, 0x00	; 0
    5d14:	88 24       	eor	r8, r8
    5d16:	8a 94       	dec	r8
    5d18:	98 2c       	mov	r9, r8
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    5d1a:	f9 99       	sbic	0x1f, 1	; 31
    5d1c:	fe cf       	rjmp	.-4      	; 0x5d1a <setup+0x294>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    5d1e:	32 bd       	out	0x22, r19	; 34
    5d20:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    5d22:	f8 9a       	sbi	0x1f, 0	; 31
    5d24:	80 b5       	in	r24, 0x20	; 32
    5d26:	a4 01       	movw	r20, r8
    5d28:	48 27       	eor	r20, r24
    5d2a:	04 2e       	mov	r0, r20
    5d2c:	42 95       	swap	r20
    5d2e:	40 7f       	andi	r20, 0xF0	; 240
    5d30:	40 25       	eor	r20, r0
    5d32:	05 2e       	mov	r0, r21
    5d34:	54 2f       	mov	r21, r20
    5d36:	42 95       	swap	r20
    5d38:	4f 70       	andi	r20, 0x0F	; 15
    5d3a:	04 26       	eor	r0, r20
    5d3c:	46 95       	lsr	r20
    5d3e:	54 27       	eor	r21, r20
    5d40:	45 27       	eor	r20, r21
    5d42:	44 0f       	add	r20, r20
    5d44:	44 0f       	add	r20, r20
    5d46:	44 0f       	add	r20, r20
    5d48:	40 25       	eor	r20, r0
    5d4a:	4a 01       	movw	r8, r20
  }
// Compute a CRC of all of EEPROM as a hash that may contain some entropy, particularly across restarts.
static uint16_t eeCRC()
  {
  uint16_t result = ~0U;
  for(uint8_t *p = (uint8_t *)0; p <= (uint8_t *)E2END; ++p)
    5d4c:	2f 5f       	subi	r18, 0xFF	; 255
    5d4e:	3f 4f       	sbci	r19, 0xFF	; 255
    5d50:	54 e0       	ldi	r21, 0x04	; 4
    5d52:	20 30       	cpi	r18, 0x00	; 0
    5d54:	35 07       	cpc	r19, r21
    5d56:	09 f7       	brne	.-62     	; 0x5d1a <setup+0x294>
#if defined(HUMIDITY_SENSOR_SUPPORT)
                       ((((uint16_t)rh) << 8) - rh) ^
#endif
#endif
                       (getMinutesSinceMidnightLT() << 5) ^
                       (((uint16_t)getSubCycleTime()) << 6);
    5d58:	0d 2d       	mov	r16, r13
    5d5a:	1c 2d       	mov	r17, r12
    5d5c:	8e 2d       	mov	r24, r14
    5d5e:	90 e0       	ldi	r25, 0x00	; 0
    5d60:	9e 83       	std	Y+6, r25	; 0x06
    5d62:	8d 83       	std	Y+5, r24	; 0x05
    5d64:	0e 94 b2 1c 	call	0x3964	; 0x3964 <getMinutesSinceMidnightLT()>
    5d68:	20 91 b2 00 	lds	r18, 0x00B2
    5d6c:	c2 2e       	mov	r12, r18
    5d6e:	dd 24       	eor	r13, r13
    5d70:	36 e0       	ldi	r19, 0x06	; 6
    5d72:	cc 0c       	add	r12, r12
    5d74:	dd 1c       	adc	r13, r13
    5d76:	3a 95       	dec	r19
    5d78:	e1 f7       	brne	.-8      	; 0x5d72 <setup+0x2ec>
    5d7a:	20 e3       	ldi	r18, 0x30	; 48
    5d7c:	30 e0       	ldi	r19, 0x00	; 0
    5d7e:	c2 2a       	or	r12, r18
    5d80:	d3 2a       	or	r13, r19
    5d82:	4b 81       	ldd	r20, Y+3	; 0x03
    5d84:	5c 81       	ldd	r21, Y+4	; 0x04
    5d86:	c4 26       	eor	r12, r20
    5d88:	d5 26       	eor	r13, r21
    5d8a:	aa 0c       	add	r10, r10
    5d8c:	bb 1c       	adc	r11, r11
    5d8e:	ca 24       	eor	r12, r10
    5d90:	db 24       	eor	r13, r11
    5d92:	44 0c       	add	r4, r4
    5d94:	55 1c       	adc	r5, r5
    5d96:	44 0c       	add	r4, r4
    5d98:	55 1c       	adc	r5, r5
    5d9a:	c4 24       	eor	r12, r4
    5d9c:	d5 24       	eor	r13, r5
    5d9e:	a4 e0       	ldi	r26, 0x04	; 4
    5da0:	22 0c       	add	r2, r2
    5da2:	33 1c       	adc	r3, r3
    5da4:	aa 95       	dec	r26
    5da6:	e1 f7       	brne	.-8      	; 0x5da0 <setup+0x31a>
    5da8:	c2 24       	eor	r12, r2
    5daa:	d3 24       	eor	r13, r3
    5dac:	98 01       	movw	r18, r16
    5dae:	f3 e0       	ldi	r31, 0x03	; 3
    5db0:	22 0f       	add	r18, r18
    5db2:	33 1f       	adc	r19, r19
    5db4:	fa 95       	dec	r31
    5db6:	e1 f7       	brne	.-8      	; 0x5db0 <setup+0x32a>
    5db8:	20 0f       	add	r18, r16
    5dba:	31 1f       	adc	r19, r17
    5dbc:	c2 26       	eor	r12, r18
    5dbe:	d3 26       	eor	r13, r19
    5dc0:	4d 81       	ldd	r20, Y+5	; 0x05
    5dc2:	5e 81       	ldd	r21, Y+6	; 0x06
    5dc4:	34 2f       	mov	r19, r20
    5dc6:	22 27       	eor	r18, r18
    5dc8:	24 1b       	sub	r18, r20
    5dca:	35 0b       	sbc	r19, r21
    5dcc:	c2 26       	eor	r12, r18
    5dce:	d3 26       	eor	r13, r19
    5dd0:	75 e0       	ldi	r23, 0x05	; 5
    5dd2:	88 0f       	add	r24, r24
    5dd4:	99 1f       	adc	r25, r25
    5dd6:	7a 95       	dec	r23
    5dd8:	e1 f7       	brne	.-8      	; 0x5dd2 <setup+0x34c>
    5dda:	c8 26       	eor	r12, r24
    5ddc:	d9 26       	eor	r13, r25

  //const long seed1 = ((((long) clockJitterRTC()) << 13) ^ (((long)clockJitterWDT()) << 21) ^ (((long)(srseed^eeseed)) << 16)) + s16;
  // Seed simple/fast/small built-in PRNG.  (Smaller and faster than srandom()/random().)
  const uint8_t nar1 = noisyADCRead();
    5dde:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <noisyADCRead()>
    5de2:	18 2f       	mov	r17, r24
  seedRNG8(nar1 ^ (uint8_t) s16, oldResetCount - (uint8_t)((s16+eeseed) >> 8), clockJitterWDT() ^ (uint8_t)srseed);
    5de4:	4c 2c       	mov	r4, r12
    5de6:	48 26       	eor	r4, r24
    5de8:	c6 01       	movw	r24, r12
    5dea:	88 0d       	add	r24, r8
    5dec:	99 1d       	adc	r25, r9
    5dee:	5f 2c       	mov	r5, r15
    5df0:	59 1a       	sub	r5, r25
    5df2:	0e 94 ef 17 	call	0x2fde	; 0x2fde <clockJitterWDT()>
    5df6:	e6 2c       	mov	r14, r6
    5df8:	48 2f       	mov	r20, r24
    5dfa:	46 25       	eor	r20, r6
    5dfc:	84 2d       	mov	r24, r4
    5dfe:	65 2d       	mov	r22, r5
    5e00:	0e 94 fd 19 	call	0x33fa	; 0x33fa <seedRNG8(unsigned char, unsigned char, unsigned char)>
  DEBUG_SERIAL_PRINTFMT(nar1, BIN);
  DEBUG_SERIAL_PRINTLN();
#endif
  // TODO: seed other/better PRNGs.
  // Feed in mainly persistent/nonvolatile state explicitly. 
  addEntropyToPool(oldResetCount ^ eeseed, 0);
    5e04:	78 2c       	mov	r7, r8
    5e06:	88 2d       	mov	r24, r8
    5e08:	8f 25       	eor	r24, r15
    5e0a:	60 e0       	ldi	r22, 0x00	; 0
    5e0c:	0e 94 56 1e 	call	0x3cac	; 0x3cac <addEntropyToPool(unsigned char, unsigned char)>
  addEntropyToPool((uint8_t)(eeseed >> 8) + nar1, 0);
    5e10:	a9 2c       	mov	r10, r9
    5e12:	bb 24       	eor	r11, r11
    5e14:	81 2f       	mov	r24, r17
    5e16:	8a 0d       	add	r24, r10
    5e18:	60 e0       	ldi	r22, 0x00	; 0
    5e1a:	0e 94 56 1e 	call	0x3cac	; 0x3cac <addEntropyToPool(unsigned char, unsigned char)>
  addEntropyToPool((uint8_t)s16 ^ (uint8_t)(s16 >> 8) , 0);
    5e1e:	8c 2d       	mov	r24, r12
    5e20:	8d 25       	eor	r24, r13
    5e22:	60 e0       	ldi	r22, 0x00	; 0
    5e24:	0e 94 56 1e 	call	0x3cac	; 0x3cac <addEntropyToPool(unsigned char, unsigned char)>
    5e28:	02 e0       	ldi	r16, 0x02	; 2
    5e2a:	10 e0       	ldi	r17, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    5e2c:	f9 99       	sbic	0x1f, 1	; 31
    5e2e:	fe cf       	rjmp	.-4      	; 0x5e2c <setup+0x3a6>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    5e30:	12 bd       	out	0x22, r17	; 34
    5e32:	01 bd       	out	0x21, r16	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    5e34:	f8 9a       	sbi	0x1f, 0	; 31
    5e36:	80 b5       	in	r24, 0x20	; 32
  for(uint8_t i = 0; i < EE_LEN_SEED; ++i)
    { addEntropyToPool(eeprom_read_byte((uint8_t *)(EE_START_SEED + i)), 0); }
    5e38:	60 e0       	ldi	r22, 0x00	; 0
    5e3a:	0e 94 56 1e 	call	0x3cac	; 0x3cac <addEntropyToPool(unsigned char, unsigned char)>
    5e3e:	0f 5f       	subi	r16, 0xFF	; 255
    5e40:	1f 4f       	sbci	r17, 0xFF	; 255
  // TODO: seed other/better PRNGs.
  // Feed in mainly persistent/nonvolatile state explicitly. 
  addEntropyToPool(oldResetCount ^ eeseed, 0);
  addEntropyToPool((uint8_t)(eeseed >> 8) + nar1, 0);
  addEntropyToPool((uint8_t)s16 ^ (uint8_t)(s16 >> 8) , 0);
  for(uint8_t i = 0; i < EE_LEN_SEED; ++i)
    5e42:	06 30       	cpi	r16, 0x06	; 6
    5e44:	11 05       	cpc	r17, r1
    5e46:	91 f7       	brne	.-28     	; 0x5e2c <setup+0x3a6>
    { addEntropyToPool(eeprom_read_byte((uint8_t *)(EE_START_SEED + i)), 0); }
  addEntropyToPool(noisyADCRead(), 4); // Conservative first push of noise into pool.
    5e48:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <noisyADCRead()>
    5e4c:	64 e0       	ldi	r22, 0x04	; 4
    5e4e:	0e 94 56 1e 	call	0x3cac	; 0x3cac <addEntropyToPool(unsigned char, unsigned char)>
  // Carry a few bits of entropy over a reset by picking one of the four designated EEPROM bytes at random;
  // if zero, erase to 0xff, else AND in part of the seed including some of the previous EEPROM hash (and write).
  // This amounts to about a quarter of an erase/write cycle per reset/restart per byte, or 400k restarts endurance!
  // These 4 bytes should be picked up as part of the hash/CRC of EEPROM above, next time,
  // essentially forming a longish-cycle (poor) PRNG even with little new real entropy each time.
  seedRNG8(nar1 ^ (uint8_t) s16, oldResetCount - (uint8_t)((s16+eeseed) >> 8), clockJitterWDT() ^ (uint8_t)srseed);
    5e52:	0e 94 ef 17 	call	0x2fde	; 0x2fde <clockJitterWDT()>
    5e56:	e8 26       	eor	r14, r24
    5e58:	84 2d       	mov	r24, r4
    5e5a:	65 2d       	mov	r22, r5
    5e5c:	4e 2d       	mov	r20, r14
    5e5e:	0e 94 fd 19 	call	0x33fa	; 0x33fa <seedRNG8(unsigned char, unsigned char, unsigned char)>
  uint8_t *const erp = (uint8_t *)(EE_START_SEED + (3&((s16)^((eeseed>>8)+(__TIME__[7]))))); // Use some new and some eeseed bits to choose which byte to updated.
    5e62:	c5 01       	movw	r24, r10
    5e64:	c3 96       	adiw	r24, 0x33	; 51
    5e66:	8c 25       	eor	r24, r12
    5e68:	9d 25       	eor	r25, r13
    5e6a:	83 70       	andi	r24, 0x03	; 3
    5e6c:	90 70       	andi	r25, 0x00	; 0
    5e6e:	02 96       	adiw	r24, 0x02	; 2
    5e70:	18 2f       	mov	r17, r24
    5e72:	09 2f       	mov	r16, r25
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    5e74:	f9 99       	sbic	0x1f, 1	; 31
    5e76:	fe cf       	rjmp	.-4      	; 0x5e74 <setup+0x3ee>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    5e78:	92 bd       	out	0x22, r25	; 34
    5e7a:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    5e7c:	f8 9a       	sbi	0x1f, 0	; 31
    5e7e:	80 b5       	in	r24, 0x20	; 32
  const uint8_t erv = eeprom_read_byte(erp);
  if(0 == erv) { eeprom_smart_erase_byte(erp); }
    5e80:	88 23       	and	r24, r24
    5e82:	29 f4       	brne	.+10     	; 0x5e8e <setup+0x408>
    5e84:	81 2f       	mov	r24, r17
    5e86:	90 2f       	mov	r25, r16
    5e88:	0e 94 a0 0b 	call	0x1740	; 0x1740 <eeprom_smart_erase_byte(unsigned char*)>
    5e8c:	08 c0       	rjmp	.+16     	; 0x5e9e <setup+0x418>
  else { eeprom_smart_clear_bits(erp, clockJitterEntropyByte() + ((uint8_t)eeseed)); } // Nominally include disjoint set of eeseed bits in choice of which to clear.
    5e8e:	0e 94 0a 18 	call	0x3014	; 0x3014 <clockJitterEntropyByte()>
    5e92:	78 0e       	add	r7, r24
    5e94:	81 2f       	mov	r24, r17
    5e96:	90 2f       	mov	r25, r16
    5e98:	67 2d       	mov	r22, r7
    5e9a:	0e 94 b4 0b 	call	0x1768	; 0x1768 <eeprom_smart_clear_bits(unsigned char*, unsigned char)>
#endif


#if !defined(ALT_MAIN_LOOP)
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("Computing initial target/demand...");
    5e9e:	84 e7       	ldi	r24, 0x74	; 116
    5ea0:	95 e0       	ldi	r25, 0x05	; 5
    5ea2:	0e 94 55 20 	call	0x40aa	; 0x40aa <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif
  // Update targets, output to TRV and boiler, etc, to be sensible before main loop starts.
  computeCallForHeat();
    5ea6:	0e 94 bd 0a 	call	0x157a	; 0x157a <computeCallForHeat()>
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("Creating initial FHT8V frame...");
#endif
  // Unconditionally ensure that a valid FHT8V TRV command frame has been computed and stored
  // in case this unit is actually controlling a local valve.
  FHT8VCreateValveSetCmdFrame();
    5eaa:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <FHT8VCreateValveSetCmdFrame()>


  // Ensure unique node ID set up (mainly on first use).
  // Have one attempt (don't want to bang already failign EEPROM) to force-reset if not good, then panic.
  // Needs to have had entropy gathered, etc.
  if(!ensureIDCreated())
    5eae:	80 e0       	ldi	r24, 0x00	; 0
    5eb0:	0e 94 c8 12 	call	0x2590	; 0x2590 <ensureIDCreated(bool)>
    5eb4:	88 23       	and	r24, r24
    5eb6:	49 f4       	brne	.+18     	; 0x5eca <setup+0x444>
    {
    if(!ensureIDCreated(true)) // Force reset.
    5eb8:	81 e0       	ldi	r24, 0x01	; 1
    5eba:	0e 94 c8 12 	call	0x2590	; 0x2590 <ensureIDCreated(bool)>
    5ebe:	88 23       	and	r24, r24
    5ec0:	21 f4       	brne	.+8      	; 0x5eca <setup+0x444>
      { panic(F("Invalid ID and cannot reset, sorry.")); }
    5ec2:	80 e5       	ldi	r24, 0x50	; 80
    5ec4:	95 e0       	ldi	r25, 0x05	; 5
    5ec6:	0e 94 de 2c 	call	0x59bc	; 0x59bc <panic(__FlashStringHelper const*)>
    }


  // Initialised: turn heatcall UI LED off.
//  pinMode(LED_HEATCALL, OUTPUT);
  LED_HEATCALL_OFF();
    5eca:	5c 9a       	sbi	0x0b, 4	; 11
  
#if defined(SUPPORT_CLI) && !defined(ALT_MAIN_LOOP)
  // Help user get to CLI.
  serialPrintlnAndFlush(F("? at CLI prompt for help"));
    5ecc:	87 e3       	ldi	r24, 0x37	; 55
    5ece:	95 e0       	ldi	r25, 0x05	; 5
    5ed0:	0e 94 55 20 	call	0x40aa	; 0x40aa <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif

#if !defined(ALT_MAIN_LOOP)
  // Report initial status.
  serialStatusReport();
    5ed4:	0e 94 d8 21 	call	0x43b0	; 0x43b0 <serialStatusReport()>
#endif

  // Set appropriate loop() values just before entering it.
  TIME_LSD = getSecondsLT();
    5ed8:	80 91 d0 01 	lds	r24, 0x01D0
    5edc:	80 93 ed 01 	sts	0x01ED, r24
  }
    5ee0:	26 96       	adiw	r28, 0x06	; 6
    5ee2:	0f b6       	in	r0, 0x3f	; 63
    5ee4:	f8 94       	cli
    5ee6:	de bf       	out	0x3e, r29	; 62
    5ee8:	0f be       	out	0x3f, r0	; 63
    5eea:	cd bf       	out	0x3d, r28	; 61
    5eec:	cf 91       	pop	r28
    5eee:	df 91       	pop	r29
    5ef0:	1f 91       	pop	r17
    5ef2:	0f 91       	pop	r16
    5ef4:	ff 90       	pop	r15
    5ef6:	ef 90       	pop	r14
    5ef8:	df 90       	pop	r13
    5efa:	cf 90       	pop	r12
    5efc:	bf 90       	pop	r11
    5efe:	af 90       	pop	r10
    5f00:	9f 90       	pop	r9
    5f02:	8f 90       	pop	r8
    5f04:	7f 90       	pop	r7
    5f06:	6f 90       	pop	r6
    5f08:	5f 90       	pop	r5
    5f0a:	4f 90       	pop	r4
    5f0c:	3f 90       	pop	r3
    5f0e:	2f 90       	pop	r2
    5f10:	08 95       	ret

00005f12 <TwoWire::beginTransmission(int)>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    5f12:	81 e0       	ldi	r24, 0x01	; 1
    5f14:	80 93 39 02 	sts	0x0239, r24
  // set address of targeted slave
  txAddress = address;
    5f18:	60 93 16 02 	sts	0x0216, r22
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    5f1c:	10 92 37 02 	sts	0x0237, r1
  txBufferLength = 0;
    5f20:	10 92 38 02 	sts	0x0238, r1
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
}
    5f24:	08 95       	ret

00005f26 <TwoWire::available()>:
}

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
    5f26:	20 91 15 02 	lds	r18, 0x0215
    5f2a:	30 e0       	ldi	r19, 0x00	; 0
    5f2c:	80 91 14 02 	lds	r24, 0x0214
    5f30:	28 1b       	sub	r18, r24
    5f32:	31 09       	sbc	r19, r1
{
  return rxBufferLength - rxBufferIndex;
}
    5f34:	c9 01       	movw	r24, r18
    5f36:	08 95       	ret

00005f38 <TwoWire::read()>:
int TwoWire::read(void)
{
  int value = -1;
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    5f38:	40 91 14 02 	lds	r20, 0x0214
    5f3c:	80 91 15 02 	lds	r24, 0x0215
    5f40:	48 17       	cp	r20, r24
    5f42:	18 f0       	brcs	.+6      	; 0x5f4a <TwoWire::read()+0x12>
    5f44:	2f ef       	ldi	r18, 0xFF	; 255
    5f46:	3f ef       	ldi	r19, 0xFF	; 255
    5f48:	0a c0       	rjmp	.+20     	; 0x5f5e <TwoWire::read()+0x26>
    value = rxBuffer[rxBufferIndex];
    5f4a:	e4 2f       	mov	r30, r20
    5f4c:	f0 e0       	ldi	r31, 0x00	; 0
    5f4e:	ec 50       	subi	r30, 0x0C	; 12
    5f50:	fe 4f       	sbci	r31, 0xFE	; 254
    5f52:	80 81       	ld	r24, Z
    5f54:	28 2f       	mov	r18, r24
    5f56:	30 e0       	ldi	r19, 0x00	; 0
    ++rxBufferIndex;
    5f58:	4f 5f       	subi	r20, 0xFF	; 255
    5f5a:	40 93 14 02 	sts	0x0214, r20
  }

  return value;
}
    5f5e:	c9 01       	movw	r24, r18
    5f60:	08 95       	ret

00005f62 <TwoWire::peek()>:
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
  
  if(rxBufferIndex < rxBufferLength){
    5f62:	e0 91 14 02 	lds	r30, 0x0214
    5f66:	80 91 15 02 	lds	r24, 0x0215
    5f6a:	e8 17       	cp	r30, r24
    5f6c:	18 f0       	brcs	.+6      	; 0x5f74 <TwoWire::peek()+0x12>
    5f6e:	ef ef       	ldi	r30, 0xFF	; 255
    5f70:	ff ef       	ldi	r31, 0xFF	; 255
    5f72:	06 c0       	rjmp	.+12     	; 0x5f80 <TwoWire::peek()+0x1e>
    value = rxBuffer[rxBufferIndex];
    5f74:	f0 e0       	ldi	r31, 0x00	; 0
    5f76:	ec 50       	subi	r30, 0x0C	; 12
    5f78:	fe 4f       	sbci	r31, 0xFE	; 254
    5f7a:	80 81       	ld	r24, Z
    5f7c:	e8 2f       	mov	r30, r24
    5f7e:	f0 e0       	ldi	r31, 0x00	; 0
  }

  return value;
}
    5f80:	cf 01       	movw	r24, r30
    5f82:	08 95       	ret

00005f84 <TwoWire::flush()>:

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
    5f84:	08 95       	ret

00005f86 <global constructors keyed to _ZN7TwoWire8rxBufferE>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    5f86:	10 92 3d 02 	sts	0x023D, r1
    5f8a:	10 92 3c 02 	sts	0x023C, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    5f8e:	88 ee       	ldi	r24, 0xE8	; 232
    5f90:	93 e0       	ldi	r25, 0x03	; 3
    5f92:	a0 e0       	ldi	r26, 0x00	; 0
    5f94:	b0 e0       	ldi	r27, 0x00	; 0
    5f96:	80 93 3e 02 	sts	0x023E, r24
    5f9a:	90 93 3f 02 	sts	0x023F, r25
    5f9e:	a0 93 40 02 	sts	0x0240, r26
    5fa2:	b0 93 41 02 	sts	0x0241, r27
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    5fa6:	86 e1       	ldi	r24, 0x16	; 22
    5fa8:	91 e0       	ldi	r25, 0x01	; 1
    5faa:	90 93 3b 02 	sts	0x023B, r25
    5fae:	80 93 3a 02 	sts	0x023A, r24
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    5fb2:	08 95       	ret

00005fb4 <TwoWire::write(unsigned char const*, unsigned int)>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
    5fb4:	cf 92       	push	r12
    5fb6:	df 92       	push	r13
    5fb8:	ef 92       	push	r14
    5fba:	ff 92       	push	r15
    5fbc:	0f 93       	push	r16
    5fbe:	1f 93       	push	r17
    5fc0:	cf 93       	push	r28
    5fc2:	df 93       	push	r29
    5fc4:	7c 01       	movw	r14, r24
    5fc6:	6b 01       	movw	r12, r22
    5fc8:	8a 01       	movw	r16, r20
{
  if(transmitting){
    5fca:	80 91 39 02 	lds	r24, 0x0239
    5fce:	88 23       	and	r24, r24
    5fd0:	a1 f0       	breq	.+40     	; 0x5ffa <TwoWire::write(unsigned char const*, unsigned int)+0x46>
    5fd2:	c0 e0       	ldi	r28, 0x00	; 0
    5fd4:	d0 e0       	ldi	r29, 0x00	; 0
    5fd6:	0d c0       	rjmp	.+26     	; 0x5ff2 <TwoWire::write(unsigned char const*, unsigned int)+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
      write(data[i]);
    5fd8:	d7 01       	movw	r26, r14
    5fda:	ed 91       	ld	r30, X+
    5fdc:	fc 91       	ld	r31, X
    5fde:	d6 01       	movw	r26, r12
    5fe0:	ac 0f       	add	r26, r28
    5fe2:	bd 1f       	adc	r27, r29
    5fe4:	01 90       	ld	r0, Z+
    5fe6:	f0 81       	ld	r31, Z
    5fe8:	e0 2d       	mov	r30, r0
    5fea:	c7 01       	movw	r24, r14
    5fec:	6c 91       	ld	r22, X
    5fee:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    5ff0:	21 96       	adiw	r28, 0x01	; 1
    5ff2:	c0 17       	cp	r28, r16
    5ff4:	d1 07       	cpc	r29, r17
    5ff6:	80 f3       	brcs	.-32     	; 0x5fd8 <TwoWire::write(unsigned char const*, unsigned int)+0x24>
    5ff8:	04 c0       	rjmp	.+8      	; 0x6002 <TwoWire::write(unsigned char const*, unsigned int)+0x4e>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    5ffa:	cb 01       	movw	r24, r22
    5ffc:	64 2f       	mov	r22, r20
    5ffe:	0e 94 0c 31 	call	0x6218	; 0x6218 <twi_transmit>
  }
  return quantity;
}
    6002:	c8 01       	movw	r24, r16
    6004:	df 91       	pop	r29
    6006:	cf 91       	pop	r28
    6008:	1f 91       	pop	r17
    600a:	0f 91       	pop	r16
    600c:	ff 90       	pop	r15
    600e:	ef 90       	pop	r14
    6010:	df 90       	pop	r13
    6012:	cf 90       	pop	r12
    6014:	08 95       	ret

00006016 <TwoWire::write(unsigned char)>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
    6016:	df 93       	push	r29
    6018:	cf 93       	push	r28
    601a:	0f 92       	push	r0
    601c:	cd b7       	in	r28, 0x3d	; 61
    601e:	de b7       	in	r29, 0x3e	; 62
    6020:	fc 01       	movw	r30, r24
    6022:	69 83       	std	Y+1, r22	; 0x01
{
  if(transmitting){
    6024:	80 91 39 02 	lds	r24, 0x0239
    6028:	88 23       	and	r24, r24
    602a:	c9 f0       	breq	.+50     	; 0x605e <TwoWire::write(unsigned char)+0x48>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    602c:	80 91 38 02 	lds	r24, 0x0238
    6030:	80 32       	cpi	r24, 0x20	; 32
    6032:	38 f0       	brcs	.+14     	; 0x6042 <TwoWire::write(unsigned char)+0x2c>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    6034:	81 e0       	ldi	r24, 0x01	; 1
    6036:	90 e0       	ldi	r25, 0x00	; 0
    6038:	93 83       	std	Z+3, r25	; 0x03
    603a:	82 83       	std	Z+2, r24	; 0x02
    603c:	20 e0       	ldi	r18, 0x00	; 0
    603e:	30 e0       	ldi	r19, 0x00	; 0
    6040:	15 c0       	rjmp	.+42     	; 0x606c <TwoWire::write(unsigned char)+0x56>
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    6042:	80 91 37 02 	lds	r24, 0x0237
    6046:	e8 2f       	mov	r30, r24
    6048:	f0 e0       	ldi	r31, 0x00	; 0
    604a:	e9 5e       	subi	r30, 0xE9	; 233
    604c:	fd 4f       	sbci	r31, 0xFD	; 253
    604e:	99 81       	ldd	r25, Y+1	; 0x01
    6050:	90 83       	st	Z, r25
    ++txBufferIndex;
    6052:	8f 5f       	subi	r24, 0xFF	; 255
    6054:	80 93 37 02 	sts	0x0237, r24
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    6058:	80 93 38 02 	sts	0x0238, r24
    605c:	05 c0       	rjmp	.+10     	; 0x6068 <TwoWire::write(unsigned char)+0x52>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    605e:	ce 01       	movw	r24, r28
    6060:	01 96       	adiw	r24, 0x01	; 1
    6062:	61 e0       	ldi	r22, 0x01	; 1
    6064:	0e 94 0c 31 	call	0x6218	; 0x6218 <twi_transmit>
    6068:	21 e0       	ldi	r18, 0x01	; 1
    606a:	30 e0       	ldi	r19, 0x00	; 0
  }
  return 1;
}
    606c:	c9 01       	movw	r24, r18
    606e:	0f 90       	pop	r0
    6070:	cf 91       	pop	r28
    6072:	df 91       	pop	r29
    6074:	08 95       	ret

00006076 <TwoWire::endTransmission(unsigned char)>:
//	the bus tenure has been properly ended with a STOP. It
//	is very possible to leave the bus in a hung state if
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
    6076:	0f 93       	push	r16
    6078:	06 2f       	mov	r16, r22
{
  // transmit buffer (blocking)
  int8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    607a:	80 91 16 02 	lds	r24, 0x0216
    607e:	67 e1       	ldi	r22, 0x17	; 23
    6080:	72 e0       	ldi	r23, 0x02	; 2
    6082:	40 91 38 02 	lds	r20, 0x0238
    6086:	21 e0       	ldi	r18, 0x01	; 1
    6088:	0e 94 b7 30 	call	0x616e	; 0x616e <twi_writeTo>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    608c:	10 92 37 02 	sts	0x0237, r1
  txBufferLength = 0;
    6090:	10 92 38 02 	sts	0x0238, r1
  // indicate that we are done transmitting
  transmitting = 0;
    6094:	10 92 39 02 	sts	0x0239, r1
  return ret;
}
    6098:	0f 91       	pop	r16
    609a:	08 95       	ret

0000609c <TwoWire::endTransmission()>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
    609c:	61 e0       	ldi	r22, 0x01	; 1
    609e:	0e 94 3b 30 	call	0x6076	; 0x6076 <TwoWire::endTransmission(unsigned char)>
}
    60a2:	08 95       	ret

000060a4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    quantity = BUFFER_LENGTH;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
    60a4:	41 32       	cpi	r20, 0x21	; 33
    60a6:	08 f0       	brcs	.+2      	; 0x60aa <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x6>
    60a8:	40 e2       	ldi	r20, 0x20	; 32
    60aa:	86 2f       	mov	r24, r22
    60ac:	64 ef       	ldi	r22, 0xF4	; 244
    60ae:	71 e0       	ldi	r23, 0x01	; 1
    60b0:	0e 94 6e 30 	call	0x60dc	; 0x60dc <twi_readFrom>
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    60b4:	10 92 14 02 	sts	0x0214, r1
  rxBufferLength = read;
    60b8:	80 93 15 02 	sts	0x0215, r24

  return read;
}
    60bc:	08 95       	ret

000060be <TwoWire::requestFrom(int, int)>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    60be:	21 e0       	ldi	r18, 0x01	; 1
    60c0:	0e 94 52 30 	call	0x60a4	; 0x60a4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
}
    60c4:	08 95       	ret

000060c6 <TwoWire::begin()>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    60c6:	10 92 14 02 	sts	0x0214, r1
  rxBufferLength = 0;
    60ca:	10 92 15 02 	sts	0x0215, r1

  txBufferIndex = 0;
    60ce:	10 92 37 02 	sts	0x0237, r1
  txBufferLength = 0;
    60d2:	10 92 38 02 	sts	0x0238, r1

  twi_init();
    60d6:	0e 94 b8 32 	call	0x6570	; 0x6570 <twi_init>
}
    60da:	08 95       	ret

000060dc <twi_readFrom>:
 *          length: number of bytes to read into array
 *          sendStop: Boolean indicating whether to send a stop at the end
 * Output   number of bytes read
 */
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
    60dc:	38 2f       	mov	r19, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    60de:	41 32       	cpi	r20, 0x21	; 33
    60e0:	10 f0       	brcs	.+4      	; 0x60e6 <twi_readFrom+0xa>
    60e2:	40 e0       	ldi	r20, 0x00	; 0
    60e4:	42 c0       	rjmp	.+132    	; 0x616a <twi_readFrom+0x8e>
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    60e6:	80 91 46 02 	lds	r24, 0x0246
    60ea:	88 23       	and	r24, r24
    60ec:	e1 f7       	brne	.-8      	; 0x60e6 <twi_readFrom+0xa>
    continue;
  }
  twi_state = TWI_MRX;
    60ee:	91 e0       	ldi	r25, 0x01	; 1
    60f0:	90 93 46 02 	sts	0x0246, r25
  twi_sendStop = sendStop;
    60f4:	20 93 48 02 	sts	0x0248, r18
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    60f8:	8f ef       	ldi	r24, 0xFF	; 255
    60fa:	80 93 b3 02 	sts	0x02B3, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    60fe:	10 92 6e 02 	sts	0x026E, r1
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    6102:	41 50       	subi	r20, 0x01	; 1
    6104:	40 93 6f 02 	sts	0x026F, r20
    6108:	4f 5f       	subi	r20, 0xFF	; 255
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    610a:	90 93 47 02 	sts	0x0247, r25
  twi_slarw |= address << 1;
    610e:	80 91 47 02 	lds	r24, 0x0247
    6112:	33 0f       	add	r19, r19
    6114:	83 2b       	or	r24, r19
    6116:	80 93 47 02 	sts	0x0247, r24

  if (true == twi_inRepStart) {
    611a:	80 91 49 02 	lds	r24, 0x0249
    611e:	81 30       	cpi	r24, 0x01	; 1
    6120:	41 f4       	brne	.+16     	; 0x6132 <twi_readFrom+0x56>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    6122:	10 92 49 02 	sts	0x0249, r1
    TWDR = twi_slarw;
    6126:	80 91 47 02 	lds	r24, 0x0247
    612a:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    612e:	85 ec       	ldi	r24, 0xC5	; 197
    6130:	01 c0       	rjmp	.+2      	; 0x6134 <twi_readFrom+0x58>
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    6132:	85 ee       	ldi	r24, 0xE5	; 229
    6134:	80 93 bc 00 	sts	0x00BC, r24

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    6138:	80 91 46 02 	lds	r24, 0x0246
    613c:	81 30       	cpi	r24, 0x01	; 1
    613e:	e1 f3       	breq	.-8      	; 0x6138 <twi_readFrom+0x5c>
    continue;
  }

  if (twi_masterBufferIndex < length)
    6140:	80 91 6e 02 	lds	r24, 0x026E
    6144:	84 17       	cp	r24, r20
    6146:	10 f4       	brcc	.+4      	; 0x614c <twi_readFrom+0x70>
    length = twi_masterBufferIndex;
    6148:	40 91 6e 02 	lds	r20, 0x026E
    614c:	20 e0       	ldi	r18, 0x00	; 0
    614e:	30 e0       	ldi	r19, 0x00	; 0
    6150:	0a c0       	rjmp	.+20     	; 0x6166 <twi_readFrom+0x8a>

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
    6152:	fb 01       	movw	r30, r22
    6154:	e2 0f       	add	r30, r18
    6156:	f3 1f       	adc	r31, r19
    6158:	d9 01       	movw	r26, r18
    615a:	a2 5b       	subi	r26, 0xB2	; 178
    615c:	bd 4f       	sbci	r27, 0xFD	; 253
    615e:	8c 91       	ld	r24, X
    6160:	80 83       	st	Z, r24
    6162:	2f 5f       	subi	r18, 0xFF	; 255
    6164:	3f 4f       	sbci	r19, 0xFF	; 255

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    6166:	24 17       	cp	r18, r20
    6168:	a0 f3       	brcs	.-24     	; 0x6152 <twi_readFrom+0x76>
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
}
    616a:	84 2f       	mov	r24, r20
    616c:	08 95       	ret

0000616e <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
    616e:	0f 93       	push	r16
    6170:	1f 93       	push	r17
    6172:	58 2f       	mov	r21, r24
    6174:	12 2f       	mov	r17, r18
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    6176:	41 32       	cpi	r20, 0x21	; 33
    6178:	10 f0       	brcs	.+4      	; 0x617e <twi_writeTo+0x10>
    617a:	81 e0       	ldi	r24, 0x01	; 1
    617c:	4a c0       	rjmp	.+148    	; 0x6212 <twi_writeTo+0xa4>
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    617e:	80 91 46 02 	lds	r24, 0x0246
    6182:	88 23       	and	r24, r24
    6184:	e1 f7       	brne	.-8      	; 0x617e <twi_writeTo+0x10>
    continue;
  }
  twi_state = TWI_MTX;
    6186:	82 e0       	ldi	r24, 0x02	; 2
    6188:	80 93 46 02 	sts	0x0246, r24
  twi_sendStop = sendStop;
    618c:	00 93 48 02 	sts	0x0248, r16
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    6190:	8f ef       	ldi	r24, 0xFF	; 255
    6192:	80 93 b3 02 	sts	0x02B3, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    6196:	10 92 6e 02 	sts	0x026E, r1
  twi_masterBufferLength = length;
    619a:	40 93 6f 02 	sts	0x026F, r20
    619e:	ae e4       	ldi	r26, 0x4E	; 78
    61a0:	b2 e0       	ldi	r27, 0x02	; 2
    61a2:	fb 01       	movw	r30, r22
    61a4:	02 c0       	rjmp	.+4      	; 0x61aa <twi_writeTo+0x3c>
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
    61a6:	81 91       	ld	r24, Z+
    61a8:	8d 93       	st	X+, r24
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    61aa:	8e 2f       	mov	r24, r30
    61ac:	86 1b       	sub	r24, r22
    61ae:	84 17       	cp	r24, r20
    61b0:	d0 f3       	brcs	.-12     	; 0x61a6 <twi_writeTo+0x38>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    61b2:	10 92 47 02 	sts	0x0247, r1
  twi_slarw |= address << 1;
    61b6:	80 91 47 02 	lds	r24, 0x0247
    61ba:	55 0f       	add	r21, r21
    61bc:	85 2b       	or	r24, r21
    61be:	80 93 47 02 	sts	0x0247, r24
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    61c2:	80 91 49 02 	lds	r24, 0x0249
    61c6:	81 30       	cpi	r24, 0x01	; 1
    61c8:	41 f4       	brne	.+16     	; 0x61da <twi_writeTo+0x6c>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    61ca:	10 92 49 02 	sts	0x0249, r1
    TWDR = twi_slarw;				
    61ce:	80 91 47 02 	lds	r24, 0x0247
    61d2:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    61d6:	85 ec       	ldi	r24, 0xC5	; 197
    61d8:	01 c0       	rjmp	.+2      	; 0x61dc <twi_writeTo+0x6e>
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
    61da:	85 ee       	ldi	r24, 0xE5	; 229
    61dc:	80 93 bc 00 	sts	0x00BC, r24

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    61e0:	11 23       	and	r17, r17
    61e2:	21 f0       	breq	.+8      	; 0x61ec <twi_writeTo+0x7e>
    61e4:	80 91 46 02 	lds	r24, 0x0246
    61e8:	82 30       	cpi	r24, 0x02	; 2
    61ea:	e1 f3       	breq	.-8      	; 0x61e4 <twi_writeTo+0x76>
    continue;
  }
  
  if (twi_error == 0xFF)
    61ec:	80 91 b3 02 	lds	r24, 0x02B3
    61f0:	8f 3f       	cpi	r24, 0xFF	; 255
    61f2:	11 f4       	brne	.+4      	; 0x61f8 <twi_writeTo+0x8a>
    61f4:	80 e0       	ldi	r24, 0x00	; 0
    61f6:	0d c0       	rjmp	.+26     	; 0x6212 <twi_writeTo+0xa4>
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    61f8:	80 91 b3 02 	lds	r24, 0x02B3
    61fc:	80 32       	cpi	r24, 0x20	; 32
    61fe:	11 f4       	brne	.+4      	; 0x6204 <twi_writeTo+0x96>
    6200:	82 e0       	ldi	r24, 0x02	; 2
    6202:	07 c0       	rjmp	.+14     	; 0x6212 <twi_writeTo+0xa4>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    6204:	80 91 b3 02 	lds	r24, 0x02B3
    6208:	80 33       	cpi	r24, 0x30	; 48
    620a:	11 f0       	breq	.+4      	; 0x6210 <twi_writeTo+0xa2>
    620c:	84 e0       	ldi	r24, 0x04	; 4
    620e:	01 c0       	rjmp	.+2      	; 0x6212 <twi_writeTo+0xa4>
    6210:	83 e0       	ldi	r24, 0x03	; 3
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
}
    6212:	1f 91       	pop	r17
    6214:	0f 91       	pop	r16
    6216:	08 95       	ret

00006218 <twi_transmit>:
 * Output   1 length too long for buffer
 *          2 not slave transmitter
 *          0 ok
 */
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
    6218:	48 2f       	mov	r20, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    621a:	61 32       	cpi	r22, 0x21	; 33
    621c:	10 f0       	brcs	.+4      	; 0x6222 <twi_transmit+0xa>
    621e:	81 e0       	ldi	r24, 0x01	; 1
    6220:	08 95       	ret
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    6222:	80 91 46 02 	lds	r24, 0x0246
    6226:	84 30       	cpi	r24, 0x04	; 4
    6228:	11 f0       	breq	.+4      	; 0x622e <twi_transmit+0x16>
    622a:	82 e0       	ldi	r24, 0x02	; 2
    622c:	08 95       	ret
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
    622e:	60 93 91 02 	sts	0x0291, r22
    6232:	a0 e7       	ldi	r26, 0x70	; 112
    6234:	b2 e0       	ldi	r27, 0x02	; 2
    6236:	84 2f       	mov	r24, r20
    6238:	9c 01       	movw	r18, r24
    623a:	f9 01       	movw	r30, r18
    623c:	02 c0       	rjmp	.+4      	; 0x6242 <twi_transmit+0x2a>
  for(i = 0; i < length; ++i){
    twi_txBuffer[i] = data[i];
    623e:	81 91       	ld	r24, Z+
    6240:	8d 93       	st	X+, r24
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
    6242:	8e 2f       	mov	r24, r30
    6244:	84 1b       	sub	r24, r20
    6246:	86 17       	cp	r24, r22
    6248:	d0 f3       	brcs	.-12     	; 0x623e <twi_transmit+0x26>
    624a:	80 e0       	ldi	r24, 0x00	; 0
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
}
    624c:	08 95       	ret

0000624e <__vector_24>:
  // update twi state
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
    624e:	1f 92       	push	r1
    6250:	0f 92       	push	r0
    6252:	0f b6       	in	r0, 0x3f	; 63
    6254:	0f 92       	push	r0
    6256:	11 24       	eor	r1, r1
    6258:	2f 93       	push	r18
    625a:	3f 93       	push	r19
    625c:	4f 93       	push	r20
    625e:	5f 93       	push	r21
    6260:	6f 93       	push	r22
    6262:	7f 93       	push	r23
    6264:	8f 93       	push	r24
    6266:	9f 93       	push	r25
    6268:	af 93       	push	r26
    626a:	bf 93       	push	r27
    626c:	ef 93       	push	r30
    626e:	ff 93       	push	r31
  switch(TW_STATUS){
    6270:	80 91 b9 00 	lds	r24, 0x00B9
    6274:	90 e0       	ldi	r25, 0x00	; 0
    6276:	88 7f       	andi	r24, 0xF8	; 248
    6278:	90 70       	andi	r25, 0x00	; 0
    627a:	80 36       	cpi	r24, 0x60	; 96
    627c:	91 05       	cpc	r25, r1
    627e:	09 f4       	brne	.+2      	; 0x6282 <__vector_24+0x34>
    6280:	f2 c0       	rjmp	.+484    	; 0x6466 <__vector_24+0x218>
    6282:	81 36       	cpi	r24, 0x61	; 97
    6284:	91 05       	cpc	r25, r1
    6286:	cc f5       	brge	.+114    	; 0x62fa <__vector_24+0xac>
    6288:	88 32       	cpi	r24, 0x28	; 40
    628a:	91 05       	cpc	r25, r1
    628c:	09 f4       	brne	.+2      	; 0x6290 <__vector_24+0x42>
    628e:	7b c0       	rjmp	.+246    	; 0x6386 <__vector_24+0x138>
    6290:	89 32       	cpi	r24, 0x29	; 41
    6292:	91 05       	cpc	r25, r1
    6294:	b4 f4       	brge	.+44     	; 0x62c2 <__vector_24+0x74>
    6296:	80 31       	cpi	r24, 0x10	; 16
    6298:	91 05       	cpc	r25, r1
    629a:	09 f4       	brne	.+2      	; 0x629e <__vector_24+0x50>
    629c:	6f c0       	rjmp	.+222    	; 0x637c <__vector_24+0x12e>
    629e:	81 31       	cpi	r24, 0x11	; 17
    62a0:	91 05       	cpc	r25, r1
    62a2:	3c f4       	brge	.+14     	; 0x62b2 <__vector_24+0x64>
    62a4:	00 97       	sbiw	r24, 0x00	; 0
    62a6:	09 f4       	brne	.+2      	; 0x62aa <__vector_24+0x5c>
    62a8:	47 c1       	rjmp	.+654    	; 0x6538 <__vector_24+0x2ea>
    62aa:	08 97       	sbiw	r24, 0x08	; 8
    62ac:	09 f0       	breq	.+2      	; 0x62b0 <__vector_24+0x62>
    62ae:	4f c1       	rjmp	.+670    	; 0x654e <__vector_24+0x300>
    62b0:	65 c0       	rjmp	.+202    	; 0x637c <__vector_24+0x12e>
    62b2:	88 31       	cpi	r24, 0x18	; 24
    62b4:	91 05       	cpc	r25, r1
    62b6:	09 f4       	brne	.+2      	; 0x62ba <__vector_24+0x6c>
    62b8:	66 c0       	rjmp	.+204    	; 0x6386 <__vector_24+0x138>
    62ba:	80 97       	sbiw	r24, 0x20	; 32
    62bc:	09 f0       	breq	.+2      	; 0x62c0 <__vector_24+0x72>
    62be:	47 c1       	rjmp	.+654    	; 0x654e <__vector_24+0x300>
    62c0:	82 c0       	rjmp	.+260    	; 0x63c6 <__vector_24+0x178>
    62c2:	80 34       	cpi	r24, 0x40	; 64
    62c4:	91 05       	cpc	r25, r1
    62c6:	09 f4       	brne	.+2      	; 0x62ca <__vector_24+0x7c>
    62c8:	a4 c0       	rjmp	.+328    	; 0x6412 <__vector_24+0x1c4>
    62ca:	81 34       	cpi	r24, 0x41	; 65
    62cc:	91 05       	cpc	r25, r1
    62ce:	44 f4       	brge	.+16     	; 0x62e0 <__vector_24+0x92>
    62d0:	80 33       	cpi	r24, 0x30	; 48
    62d2:	91 05       	cpc	r25, r1
    62d4:	09 f4       	brne	.+2      	; 0x62d8 <__vector_24+0x8a>
    62d6:	82 c0       	rjmp	.+260    	; 0x63dc <__vector_24+0x18e>
    62d8:	c8 97       	sbiw	r24, 0x38	; 56
    62da:	09 f0       	breq	.+2      	; 0x62de <__vector_24+0x90>
    62dc:	38 c1       	rjmp	.+624    	; 0x654e <__vector_24+0x300>
    62de:	89 c0       	rjmp	.+274    	; 0x63f2 <__vector_24+0x1a4>
    62e0:	80 35       	cpi	r24, 0x50	; 80
    62e2:	91 05       	cpc	r25, r1
    62e4:	09 f4       	brne	.+2      	; 0x62e8 <__vector_24+0x9a>
    62e6:	89 c0       	rjmp	.+274    	; 0x63fa <__vector_24+0x1ac>
    62e8:	88 35       	cpi	r24, 0x58	; 88
    62ea:	91 05       	cpc	r25, r1
    62ec:	09 f4       	brne	.+2      	; 0x62f0 <__vector_24+0xa2>
    62ee:	96 c0       	rjmp	.+300    	; 0x641c <__vector_24+0x1ce>
    62f0:	88 34       	cpi	r24, 0x48	; 72
    62f2:	91 05       	cpc	r25, r1
    62f4:	09 f0       	breq	.+2      	; 0x62f8 <__vector_24+0xaa>
    62f6:	2b c1       	rjmp	.+598    	; 0x654e <__vector_24+0x300>
    62f8:	ae c0       	rjmp	.+348    	; 0x6456 <__vector_24+0x208>
    62fa:	88 39       	cpi	r24, 0x98	; 152
    62fc:	91 05       	cpc	r25, r1
    62fe:	09 f4       	brne	.+2      	; 0x6302 <__vector_24+0xb4>
    6300:	13 c1       	rjmp	.+550    	; 0x6528 <__vector_24+0x2da>
    6302:	89 39       	cpi	r24, 0x99	; 153
    6304:	91 05       	cpc	r25, r1
    6306:	ec f4       	brge	.+58     	; 0x6342 <__vector_24+0xf4>
    6308:	88 37       	cpi	r24, 0x78	; 120
    630a:	91 05       	cpc	r25, r1
    630c:	09 f4       	brne	.+2      	; 0x6310 <__vector_24+0xc2>
    630e:	ab c0       	rjmp	.+342    	; 0x6466 <__vector_24+0x218>
    6310:	89 37       	cpi	r24, 0x79	; 121
    6312:	91 05       	cpc	r25, r1
    6314:	4c f4       	brge	.+18     	; 0x6328 <__vector_24+0xda>
    6316:	88 36       	cpi	r24, 0x68	; 104
    6318:	91 05       	cpc	r25, r1
    631a:	09 f4       	brne	.+2      	; 0x631e <__vector_24+0xd0>
    631c:	a4 c0       	rjmp	.+328    	; 0x6466 <__vector_24+0x218>
    631e:	80 37       	cpi	r24, 0x70	; 112
    6320:	91 05       	cpc	r25, r1
    6322:	09 f0       	breq	.+2      	; 0x6326 <__vector_24+0xd8>
    6324:	14 c1       	rjmp	.+552    	; 0x654e <__vector_24+0x300>
    6326:	9f c0       	rjmp	.+318    	; 0x6466 <__vector_24+0x218>
    6328:	88 38       	cpi	r24, 0x88	; 136
    632a:	91 05       	cpc	r25, r1
    632c:	09 f4       	brne	.+2      	; 0x6330 <__vector_24+0xe2>
    632e:	fc c0       	rjmp	.+504    	; 0x6528 <__vector_24+0x2da>
    6330:	80 39       	cpi	r24, 0x90	; 144
    6332:	91 05       	cpc	r25, r1
    6334:	09 f4       	brne	.+2      	; 0x6338 <__vector_24+0xea>
    6336:	9d c0       	rjmp	.+314    	; 0x6472 <__vector_24+0x224>
    6338:	80 38       	cpi	r24, 0x80	; 128
    633a:	91 05       	cpc	r25, r1
    633c:	09 f0       	breq	.+2      	; 0x6340 <__vector_24+0xf2>
    633e:	07 c1       	rjmp	.+526    	; 0x654e <__vector_24+0x300>
    6340:	98 c0       	rjmp	.+304    	; 0x6472 <__vector_24+0x224>
    6342:	80 3b       	cpi	r24, 0xB0	; 176
    6344:	91 05       	cpc	r25, r1
    6346:	09 f4       	brne	.+2      	; 0x634a <__vector_24+0xfc>
    6348:	c6 c0       	rjmp	.+396    	; 0x64d6 <__vector_24+0x288>
    634a:	81 3b       	cpi	r24, 0xB1	; 177
    634c:	91 05       	cpc	r25, r1
    634e:	4c f4       	brge	.+18     	; 0x6362 <__vector_24+0x114>
    6350:	80 3a       	cpi	r24, 0xA0	; 160
    6352:	91 05       	cpc	r25, r1
    6354:	09 f4       	brne	.+2      	; 0x6358 <__vector_24+0x10a>
    6356:	9f c0       	rjmp	.+318    	; 0x6496 <__vector_24+0x248>
    6358:	88 3a       	cpi	r24, 0xA8	; 168
    635a:	91 05       	cpc	r25, r1
    635c:	09 f0       	breq	.+2      	; 0x6360 <__vector_24+0x112>
    635e:	f7 c0       	rjmp	.+494    	; 0x654e <__vector_24+0x300>
    6360:	ba c0       	rjmp	.+372    	; 0x64d6 <__vector_24+0x288>
    6362:	80 3c       	cpi	r24, 0xC0	; 192
    6364:	91 05       	cpc	r25, r1
    6366:	09 f4       	brne	.+2      	; 0x636a <__vector_24+0x11c>
    6368:	e3 c0       	rjmp	.+454    	; 0x6530 <__vector_24+0x2e2>
    636a:	88 3c       	cpi	r24, 0xC8	; 200
    636c:	91 05       	cpc	r25, r1
    636e:	09 f4       	brne	.+2      	; 0x6372 <__vector_24+0x124>
    6370:	df c0       	rjmp	.+446    	; 0x6530 <__vector_24+0x2e2>
    6372:	88 3b       	cpi	r24, 0xB8	; 184
    6374:	91 05       	cpc	r25, r1
    6376:	09 f0       	breq	.+2      	; 0x637a <__vector_24+0x12c>
    6378:	ea c0       	rjmp	.+468    	; 0x654e <__vector_24+0x300>
    637a:	c2 c0       	rjmp	.+388    	; 0x6500 <__vector_24+0x2b2>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    637c:	80 91 47 02 	lds	r24, 0x0247
    6380:	80 93 bb 00 	sts	0x00BB, r24
    6384:	cf c0       	rjmp	.+414    	; 0x6524 <__vector_24+0x2d6>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    6386:	90 91 6e 02 	lds	r25, 0x026E
    638a:	80 91 6f 02 	lds	r24, 0x026F
    638e:	98 17       	cp	r25, r24
    6390:	68 f4       	brcc	.+26     	; 0x63ac <__vector_24+0x15e>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    6392:	90 91 6e 02 	lds	r25, 0x026E
    6396:	e9 2f       	mov	r30, r25
    6398:	f0 e0       	ldi	r31, 0x00	; 0
    639a:	e2 5b       	subi	r30, 0xB2	; 178
    639c:	fd 4f       	sbci	r31, 0xFD	; 253
    639e:	80 81       	ld	r24, Z
    63a0:	80 93 bb 00 	sts	0x00BB, r24
    63a4:	9f 5f       	subi	r25, 0xFF	; 255
    63a6:	90 93 6e 02 	sts	0x026E, r25
    63aa:	bc c0       	rjmp	.+376    	; 0x6524 <__vector_24+0x2d6>
        twi_reply(1);
      }else{
	if (twi_sendStop)
    63ac:	80 91 48 02 	lds	r24, 0x0248
    63b0:	88 23       	and	r24, r24
    63b2:	09 f4       	brne	.+2      	; 0x63b6 <__vector_24+0x168>
    63b4:	4b c0       	rjmp	.+150    	; 0x644c <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    63b6:	85 ed       	ldi	r24, 0xD5	; 213
    63b8:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    63bc:	80 91 bc 00 	lds	r24, 0x00BC
    63c0:	84 fd       	sbrc	r24, 4
    63c2:	fc cf       	rjmp	.-8      	; 0x63bc <__vector_24+0x16e>
    63c4:	c2 c0       	rjmp	.+388    	; 0x654a <__vector_24+0x2fc>
	  twi_state = TWI_READY;
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    63c6:	80 e2       	ldi	r24, 0x20	; 32
    63c8:	80 93 b3 02 	sts	0x02B3, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    63cc:	85 ed       	ldi	r24, 0xD5	; 213
    63ce:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    63d2:	80 91 bc 00 	lds	r24, 0x00BC
    63d6:	84 fd       	sbrc	r24, 4
    63d8:	fc cf       	rjmp	.-8      	; 0x63d2 <__vector_24+0x184>
    63da:	b7 c0       	rjmp	.+366    	; 0x654a <__vector_24+0x2fc>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    63dc:	80 e3       	ldi	r24, 0x30	; 48
    63de:	80 93 b3 02 	sts	0x02B3, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    63e2:	85 ed       	ldi	r24, 0xD5	; 213
    63e4:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    63e8:	80 91 bc 00 	lds	r24, 0x00BC
    63ec:	84 fd       	sbrc	r24, 4
    63ee:	fc cf       	rjmp	.-8      	; 0x63e8 <__vector_24+0x19a>
    63f0:	ac c0       	rjmp	.+344    	; 0x654a <__vector_24+0x2fc>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    63f2:	88 e3       	ldi	r24, 0x38	; 56
    63f4:	80 93 b3 02 	sts	0x02B3, r24
    63f8:	9b c0       	rjmp	.+310    	; 0x6530 <__vector_24+0x2e2>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    63fa:	80 91 6e 02 	lds	r24, 0x026E
    63fe:	90 91 bb 00 	lds	r25, 0x00BB
    6402:	e8 2f       	mov	r30, r24
    6404:	f0 e0       	ldi	r31, 0x00	; 0
    6406:	e2 5b       	subi	r30, 0xB2	; 178
    6408:	fd 4f       	sbci	r31, 0xFD	; 253
    640a:	90 83       	st	Z, r25
    640c:	8f 5f       	subi	r24, 0xFF	; 255
    640e:	80 93 6e 02 	sts	0x026E, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    6412:	90 91 6e 02 	lds	r25, 0x026E
    6416:	80 91 6f 02 	lds	r24, 0x026F
    641a:	82 c0       	rjmp	.+260    	; 0x6520 <__vector_24+0x2d2>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    641c:	80 91 6e 02 	lds	r24, 0x026E
    6420:	90 91 bb 00 	lds	r25, 0x00BB
    6424:	e8 2f       	mov	r30, r24
    6426:	f0 e0       	ldi	r31, 0x00	; 0
    6428:	e2 5b       	subi	r30, 0xB2	; 178
    642a:	fd 4f       	sbci	r31, 0xFD	; 253
    642c:	90 83       	st	Z, r25
    642e:	8f 5f       	subi	r24, 0xFF	; 255
    6430:	80 93 6e 02 	sts	0x026E, r24
	if (twi_sendStop)
    6434:	80 91 48 02 	lds	r24, 0x0248
    6438:	88 23       	and	r24, r24
    643a:	41 f0       	breq	.+16     	; 0x644c <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    643c:	85 ed       	ldi	r24, 0xD5	; 213
    643e:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    6442:	80 91 bc 00 	lds	r24, 0x00BC
    6446:	84 fd       	sbrc	r24, 4
    6448:	fc cf       	rjmp	.-8      	; 0x6442 <__vector_24+0x1f4>
    644a:	7f c0       	rjmp	.+254    	; 0x654a <__vector_24+0x2fc>
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    644c:	81 e0       	ldi	r24, 0x01	; 1
    644e:	80 93 49 02 	sts	0x0249, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    6452:	84 ea       	ldi	r24, 0xA4	; 164
    6454:	6e c0       	rjmp	.+220    	; 0x6532 <__vector_24+0x2e4>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    6456:	85 ed       	ldi	r24, 0xD5	; 213
    6458:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    645c:	80 91 bc 00 	lds	r24, 0x00BC
    6460:	84 fd       	sbrc	r24, 4
    6462:	fc cf       	rjmp	.-8      	; 0x645c <__vector_24+0x20e>
    6464:	72 c0       	rjmp	.+228    	; 0x654a <__vector_24+0x2fc>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    6466:	83 e0       	ldi	r24, 0x03	; 3
    6468:	80 93 46 02 	sts	0x0246, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    646c:	10 92 b2 02 	sts	0x02B2, r1
    6470:	59 c0       	rjmp	.+178    	; 0x6524 <__vector_24+0x2d6>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    6472:	80 91 b2 02 	lds	r24, 0x02B2
    6476:	80 32       	cpi	r24, 0x20	; 32
    6478:	08 f0       	brcs	.+2      	; 0x647c <__vector_24+0x22e>
    647a:	56 c0       	rjmp	.+172    	; 0x6528 <__vector_24+0x2da>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    647c:	80 91 b2 02 	lds	r24, 0x02B2
    6480:	90 91 bb 00 	lds	r25, 0x00BB
    6484:	e8 2f       	mov	r30, r24
    6486:	f0 e0       	ldi	r31, 0x00	; 0
    6488:	ee 56       	subi	r30, 0x6E	; 110
    648a:	fd 4f       	sbci	r31, 0xFD	; 253
    648c:	90 83       	st	Z, r25
    648e:	8f 5f       	subi	r24, 0xFF	; 255
    6490:	80 93 b2 02 	sts	0x02B2, r24
    6494:	47 c0       	rjmp	.+142    	; 0x6524 <__vector_24+0x2d6>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    6496:	80 91 b2 02 	lds	r24, 0x02B2
    649a:	80 32       	cpi	r24, 0x20	; 32
    649c:	30 f4       	brcc	.+12     	; 0x64aa <__vector_24+0x25c>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    649e:	e0 91 b2 02 	lds	r30, 0x02B2
    64a2:	f0 e0       	ldi	r31, 0x00	; 0
    64a4:	ee 56       	subi	r30, 0x6E	; 110
    64a6:	fd 4f       	sbci	r31, 0xFD	; 253
    64a8:	10 82       	st	Z, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    64aa:	85 ed       	ldi	r24, 0xD5	; 213
    64ac:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    64b0:	80 91 bc 00 	lds	r24, 0x00BC
    64b4:	84 fd       	sbrc	r24, 4
    64b6:	fc cf       	rjmp	.-8      	; 0x64b0 <__vector_24+0x262>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    64b8:	10 92 46 02 	sts	0x0246, r1
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    64bc:	60 91 b2 02 	lds	r22, 0x02B2
    64c0:	e0 91 4c 02 	lds	r30, 0x024C
    64c4:	f0 91 4d 02 	lds	r31, 0x024D
    64c8:	82 e9       	ldi	r24, 0x92	; 146
    64ca:	92 e0       	ldi	r25, 0x02	; 2
    64cc:	70 e0       	ldi	r23, 0x00	; 0
    64ce:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    64d0:	10 92 b2 02 	sts	0x02B2, r1
    64d4:	2d c0       	rjmp	.+90     	; 0x6530 <__vector_24+0x2e2>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    64d6:	84 e0       	ldi	r24, 0x04	; 4
    64d8:	80 93 46 02 	sts	0x0246, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    64dc:	10 92 90 02 	sts	0x0290, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    64e0:	10 92 91 02 	sts	0x0291, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    64e4:	e0 91 4a 02 	lds	r30, 0x024A
    64e8:	f0 91 4b 02 	lds	r31, 0x024B
    64ec:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    64ee:	80 91 91 02 	lds	r24, 0x0291
    64f2:	88 23       	and	r24, r24
    64f4:	29 f4       	brne	.+10     	; 0x6500 <__vector_24+0x2b2>
        twi_txBufferLength = 1;
    64f6:	81 e0       	ldi	r24, 0x01	; 1
    64f8:	80 93 91 02 	sts	0x0291, r24
        twi_txBuffer[0] = 0x00;
    64fc:	10 92 70 02 	sts	0x0270, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    6500:	90 91 90 02 	lds	r25, 0x0290
    6504:	e9 2f       	mov	r30, r25
    6506:	f0 e0       	ldi	r31, 0x00	; 0
    6508:	e0 59       	subi	r30, 0x90	; 144
    650a:	fd 4f       	sbci	r31, 0xFD	; 253
    650c:	80 81       	ld	r24, Z
    650e:	80 93 bb 00 	sts	0x00BB, r24
    6512:	9f 5f       	subi	r25, 0xFF	; 255
    6514:	90 93 90 02 	sts	0x0290, r25
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    6518:	90 91 90 02 	lds	r25, 0x0290
    651c:	80 91 91 02 	lds	r24, 0x0291
    6520:	98 17       	cp	r25, r24
    6522:	10 f4       	brcc	.+4      	; 0x6528 <__vector_24+0x2da>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    6524:	85 ec       	ldi	r24, 0xC5	; 197
    6526:	01 c0       	rjmp	.+2      	; 0x652a <__vector_24+0x2dc>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    6528:	85 e8       	ldi	r24, 0x85	; 133
    652a:	80 93 bc 00 	sts	0x00BC, r24
    652e:	0f c0       	rjmp	.+30     	; 0x654e <__vector_24+0x300>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    6530:	85 ec       	ldi	r24, 0xC5	; 197
    6532:	80 93 bc 00 	sts	0x00BC, r24
    6536:	09 c0       	rjmp	.+18     	; 0x654a <__vector_24+0x2fc>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    6538:	10 92 b3 02 	sts	0x02B3, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    653c:	85 ed       	ldi	r24, 0xD5	; 213
    653e:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    6542:	80 91 bc 00 	lds	r24, 0x00BC
    6546:	84 fd       	sbrc	r24, 4
    6548:	fc cf       	rjmp	.-8      	; 0x6542 <__vector_24+0x2f4>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    654a:	10 92 46 02 	sts	0x0246, r1
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    654e:	ff 91       	pop	r31
    6550:	ef 91       	pop	r30
    6552:	bf 91       	pop	r27
    6554:	af 91       	pop	r26
    6556:	9f 91       	pop	r25
    6558:	8f 91       	pop	r24
    655a:	7f 91       	pop	r23
    655c:	6f 91       	pop	r22
    655e:	5f 91       	pop	r21
    6560:	4f 91       	pop	r20
    6562:	3f 91       	pop	r19
    6564:	2f 91       	pop	r18
    6566:	0f 90       	pop	r0
    6568:	0f be       	out	0x3f, r0	; 63
    656a:	0f 90       	pop	r0
    656c:	1f 90       	pop	r1
    656e:	18 95       	reti

00006570 <twi_init>:
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
    6570:	10 92 46 02 	sts	0x0246, r1
  twi_sendStop = true;		// default value
    6574:	81 e0       	ldi	r24, 0x01	; 1
    6576:	80 93 48 02 	sts	0x0248, r24
  twi_inRepStart = false;
    657a:	10 92 49 02 	sts	0x0249, r1
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
    657e:	82 e1       	ldi	r24, 0x12	; 18
    6580:	61 e0       	ldi	r22, 0x01	; 1
    6582:	0e 94 15 33 	call	0x662a	; 0x662a <digitalWrite>
  digitalWrite(SCL, 1);
    6586:	83 e1       	ldi	r24, 0x13	; 19
    6588:	61 e0       	ldi	r22, 0x01	; 1
    658a:	0e 94 15 33 	call	0x662a	; 0x662a <digitalWrite>

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    658e:	e9 eb       	ldi	r30, 0xB9	; 185
    6590:	f0 e0       	ldi	r31, 0x00	; 0
    6592:	80 81       	ld	r24, Z
    6594:	8e 7f       	andi	r24, 0xFE	; 254
    6596:	80 83       	st	Z, r24
  cbi(TWSR, TWPS1);
    6598:	80 81       	ld	r24, Z
    659a:	8d 7f       	andi	r24, 0xFD	; 253
    659c:	80 83       	st	Z, r24
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
    659e:	8d ef       	ldi	r24, 0xFD	; 253
    65a0:	80 93 b8 00 	sts	0x00B8, r24
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    65a4:	85 e4       	ldi	r24, 0x45	; 69
    65a6:	80 93 bc 00 	sts	0x00BC, r24
}
    65aa:	08 95       	ret

000065ac <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    65ac:	cf 93       	push	r28
    65ae:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    65b0:	48 2f       	mov	r20, r24
    65b2:	50 e0       	ldi	r21, 0x00	; 0
    65b4:	ca 01       	movw	r24, r20
    65b6:	89 5b       	subi	r24, 0xB9	; 185
    65b8:	98 4f       	sbci	r25, 0xF8	; 248
    65ba:	fc 01       	movw	r30, r24
    65bc:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
    65be:	4d 5c       	subi	r20, 0xCD	; 205
    65c0:	58 4f       	sbci	r21, 0xF8	; 248
    65c2:	fa 01       	movw	r30, r20
    65c4:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    65c6:	88 23       	and	r24, r24
    65c8:	69 f1       	breq	.+90     	; 0x6624 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    65ca:	90 e0       	ldi	r25, 0x00	; 0
    65cc:	88 0f       	add	r24, r24
    65ce:	99 1f       	adc	r25, r25
    65d0:	fc 01       	movw	r30, r24
    65d2:	eb 5e       	subi	r30, 0xEB	; 235
    65d4:	f8 4f       	sbci	r31, 0xF8	; 248
    65d6:	a5 91       	lpm	r26, Z+
    65d8:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
    65da:	fc 01       	movw	r30, r24
    65dc:	e1 5e       	subi	r30, 0xE1	; 225
    65de:	f8 4f       	sbci	r31, 0xF8	; 248
    65e0:	c5 91       	lpm	r28, Z+
    65e2:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
    65e4:	66 23       	and	r22, r22
    65e6:	51 f4       	brne	.+20     	; 0x65fc <pinMode+0x50>
		uint8_t oldSREG = SREG;
    65e8:	2f b7       	in	r18, 0x3f	; 63
                cli();
    65ea:	f8 94       	cli
		*reg &= ~bit;
    65ec:	8c 91       	ld	r24, X
    65ee:	93 2f       	mov	r25, r19
    65f0:	90 95       	com	r25
    65f2:	89 23       	and	r24, r25
    65f4:	8c 93       	st	X, r24
		*out &= ~bit;
    65f6:	88 81       	ld	r24, Y
    65f8:	89 23       	and	r24, r25
    65fa:	0b c0       	rjmp	.+22     	; 0x6612 <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    65fc:	62 30       	cpi	r22, 0x02	; 2
    65fe:	61 f4       	brne	.+24     	; 0x6618 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    6600:	2f b7       	in	r18, 0x3f	; 63
                cli();
    6602:	f8 94       	cli
		*reg &= ~bit;
    6604:	8c 91       	ld	r24, X
    6606:	93 2f       	mov	r25, r19
    6608:	90 95       	com	r25
    660a:	89 23       	and	r24, r25
    660c:	8c 93       	st	X, r24
		*out |= bit;
    660e:	88 81       	ld	r24, Y
    6610:	83 2b       	or	r24, r19
    6612:	88 83       	st	Y, r24
		SREG = oldSREG;
    6614:	2f bf       	out	0x3f, r18	; 63
    6616:	06 c0       	rjmp	.+12     	; 0x6624 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    6618:	9f b7       	in	r25, 0x3f	; 63
                cli();
    661a:	f8 94       	cli
		*reg |= bit;
    661c:	8c 91       	ld	r24, X
    661e:	83 2b       	or	r24, r19
    6620:	8c 93       	st	X, r24
		SREG = oldSREG;
    6622:	9f bf       	out	0x3f, r25	; 63
	}
}
    6624:	df 91       	pop	r29
    6626:	cf 91       	pop	r28
    6628:	08 95       	ret

0000662a <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    662a:	48 2f       	mov	r20, r24
    662c:	50 e0       	ldi	r21, 0x00	; 0
    662e:	ca 01       	movw	r24, r20
    6630:	85 5a       	subi	r24, 0xA5	; 165
    6632:	98 4f       	sbci	r25, 0xF8	; 248
    6634:	fc 01       	movw	r30, r24
    6636:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    6638:	ca 01       	movw	r24, r20
    663a:	89 5b       	subi	r24, 0xB9	; 185
    663c:	98 4f       	sbci	r25, 0xF8	; 248
    663e:	fc 01       	movw	r30, r24
    6640:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    6642:	4d 5c       	subi	r20, 0xCD	; 205
    6644:	58 4f       	sbci	r21, 0xF8	; 248
    6646:	fa 01       	movw	r30, r20
    6648:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    664a:	33 23       	and	r19, r19
    664c:	09 f4       	brne	.+2      	; 0x6650 <digitalWrite+0x26>
    664e:	40 c0       	rjmp	.+128    	; 0x66d0 <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    6650:	22 23       	and	r18, r18
    6652:	51 f1       	breq	.+84     	; 0x66a8 <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    6654:	23 30       	cpi	r18, 0x03	; 3
    6656:	71 f0       	breq	.+28     	; 0x6674 <digitalWrite+0x4a>
    6658:	24 30       	cpi	r18, 0x04	; 4
    665a:	28 f4       	brcc	.+10     	; 0x6666 <digitalWrite+0x3c>
    665c:	21 30       	cpi	r18, 0x01	; 1
    665e:	a1 f0       	breq	.+40     	; 0x6688 <digitalWrite+0x5e>
    6660:	22 30       	cpi	r18, 0x02	; 2
    6662:	11 f5       	brne	.+68     	; 0x66a8 <digitalWrite+0x7e>
    6664:	14 c0       	rjmp	.+40     	; 0x668e <digitalWrite+0x64>
    6666:	26 30       	cpi	r18, 0x06	; 6
    6668:	b1 f0       	breq	.+44     	; 0x6696 <digitalWrite+0x6c>
    666a:	27 30       	cpi	r18, 0x07	; 7
    666c:	c1 f0       	breq	.+48     	; 0x669e <digitalWrite+0x74>
    666e:	24 30       	cpi	r18, 0x04	; 4
    6670:	d9 f4       	brne	.+54     	; 0x66a8 <digitalWrite+0x7e>
    6672:	04 c0       	rjmp	.+8      	; 0x667c <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    6674:	80 91 80 00 	lds	r24, 0x0080
    6678:	8f 77       	andi	r24, 0x7F	; 127
    667a:	03 c0       	rjmp	.+6      	; 0x6682 <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    667c:	80 91 80 00 	lds	r24, 0x0080
    6680:	8f 7d       	andi	r24, 0xDF	; 223
    6682:	80 93 80 00 	sts	0x0080, r24
    6686:	10 c0       	rjmp	.+32     	; 0x66a8 <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    6688:	84 b5       	in	r24, 0x24	; 36
    668a:	8f 77       	andi	r24, 0x7F	; 127
    668c:	02 c0       	rjmp	.+4      	; 0x6692 <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    668e:	84 b5       	in	r24, 0x24	; 36
    6690:	8f 7d       	andi	r24, 0xDF	; 223
    6692:	84 bd       	out	0x24, r24	; 36
    6694:	09 c0       	rjmp	.+18     	; 0x66a8 <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    6696:	80 91 b0 00 	lds	r24, 0x00B0
    669a:	8f 77       	andi	r24, 0x7F	; 127
    669c:	03 c0       	rjmp	.+6      	; 0x66a4 <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    669e:	80 91 b0 00 	lds	r24, 0x00B0
    66a2:	8f 7d       	andi	r24, 0xDF	; 223
    66a4:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    66a8:	e3 2f       	mov	r30, r19
    66aa:	f0 e0       	ldi	r31, 0x00	; 0
    66ac:	ee 0f       	add	r30, r30
    66ae:	ff 1f       	adc	r31, r31
    66b0:	e1 5e       	subi	r30, 0xE1	; 225
    66b2:	f8 4f       	sbci	r31, 0xF8	; 248
    66b4:	a5 91       	lpm	r26, Z+
    66b6:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    66b8:	2f b7       	in	r18, 0x3f	; 63
	cli();
    66ba:	f8 94       	cli

	if (val == LOW) {
    66bc:	66 23       	and	r22, r22
    66be:	21 f4       	brne	.+8      	; 0x66c8 <digitalWrite+0x9e>
		*out &= ~bit;
    66c0:	8c 91       	ld	r24, X
    66c2:	90 95       	com	r25
    66c4:	89 23       	and	r24, r25
    66c6:	02 c0       	rjmp	.+4      	; 0x66cc <digitalWrite+0xa2>
	} else {
		*out |= bit;
    66c8:	8c 91       	ld	r24, X
    66ca:	89 2b       	or	r24, r25
    66cc:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    66ce:	2f bf       	out	0x3f, r18	; 63
    66d0:	08 95       	ret

000066d2 <serialEvent()>:
#if !defined(USART_RX_vect) && !defined(USART0_RX_vect) && \
    !defined(USART_RXC_vect)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    66d2:	08 95       	ret

000066d4 <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  ISR(USART_RX_vect)
    66d4:	1f 92       	push	r1
    66d6:	0f 92       	push	r0
    66d8:	0f b6       	in	r0, 0x3f	; 63
    66da:	0f 92       	push	r0
    66dc:	11 24       	eor	r1, r1
    66de:	2f 93       	push	r18
    66e0:	3f 93       	push	r19
    66e2:	4f 93       	push	r20
    66e4:	8f 93       	push	r24
    66e6:	9f 93       	push	r25
    66e8:	ef 93       	push	r30
    66ea:	ff 93       	push	r31
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#endif
  {
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
    66ec:	80 91 c0 00 	lds	r24, 0x00C0
    66f0:	82 fd       	sbrc	r24, 2
    66f2:	1d c0       	rjmp	.+58     	; 0x672e <__vector_18+0x5a>
      unsigned char c = UDR0;
    66f4:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    66f8:	20 91 f4 02 	lds	r18, 0x02F4
    66fc:	30 91 f5 02 	lds	r19, 0x02F5

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    6700:	2f 5f       	subi	r18, 0xFF	; 255
    6702:	3f 4f       	sbci	r19, 0xFF	; 255
    6704:	2f 73       	andi	r18, 0x3F	; 63
    6706:	30 70       	andi	r19, 0x00	; 0
    6708:	80 91 f6 02 	lds	r24, 0x02F6
    670c:	90 91 f7 02 	lds	r25, 0x02F7
    6710:	28 17       	cp	r18, r24
    6712:	39 07       	cpc	r19, r25
    6714:	71 f0       	breq	.+28     	; 0x6732 <__vector_18+0x5e>
    buffer->buffer[buffer->head] = c;
    6716:	e0 91 f4 02 	lds	r30, 0x02F4
    671a:	f0 91 f5 02 	lds	r31, 0x02F5
    671e:	ec 54       	subi	r30, 0x4C	; 76
    6720:	fd 4f       	sbci	r31, 0xFD	; 253
    6722:	40 83       	st	Z, r20
    buffer->head = i;
    6724:	30 93 f5 02 	sts	0x02F5, r19
    6728:	20 93 f4 02 	sts	0x02F4, r18
    672c:	02 c0       	rjmp	.+4      	; 0x6732 <__vector_18+0x5e>
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
      unsigned char c = UDR0;
      store_char(c, &rx_buffer);
    } else {
      unsigned char c = UDR0;
    672e:	80 91 c6 00 	lds	r24, 0x00C6
      unsigned char c = UDR;
    };
  #else
    #error UDR not defined
  #endif
  }
    6732:	ff 91       	pop	r31
    6734:	ef 91       	pop	r30
    6736:	9f 91       	pop	r25
    6738:	8f 91       	pop	r24
    673a:	4f 91       	pop	r20
    673c:	3f 91       	pop	r19
    673e:	2f 91       	pop	r18
    6740:	0f 90       	pop	r0
    6742:	0f be       	out	0x3f, r0	; 63
    6744:	0f 90       	pop	r0
    6746:	1f 90       	pop	r1
    6748:	18 95       	reti

0000674a <serialEventRun()>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    674a:	e0 91 48 03 	lds	r30, 0x0348
    674e:	f0 91 49 03 	lds	r31, 0x0349
    6752:	e0 5c       	subi	r30, 0xC0	; 192
    6754:	ff 4f       	sbci	r31, 0xFF	; 255
    6756:	81 91       	ld	r24, Z+
    6758:	91 91       	ld	r25, Z+
    675a:	20 81       	ld	r18, Z
    675c:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    675e:	82 1b       	sub	r24, r18
    6760:	93 0b       	sbc	r25, r19
    6762:	8f 73       	andi	r24, 0x3F	; 63
    6764:	90 70       	andi	r25, 0x00	; 0
    6766:	89 2b       	or	r24, r25
    6768:	11 f0       	breq	.+4      	; 0x676e <serialEventRun()+0x24>
    676a:	0e 94 69 33 	call	0x66d2	; 0x66d2 <serialEvent()>
    676e:	08 95       	ret

00006770 <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
    6770:	1f 92       	push	r1
    6772:	0f 92       	push	r0
    6774:	0f b6       	in	r0, 0x3f	; 63
    6776:	0f 92       	push	r0
    6778:	11 24       	eor	r1, r1
    677a:	2f 93       	push	r18
    677c:	3f 93       	push	r19
    677e:	8f 93       	push	r24
    6780:	9f 93       	push	r25
    6782:	ef 93       	push	r30
    6784:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    6786:	20 91 38 03 	lds	r18, 0x0338
    678a:	30 91 39 03 	lds	r19, 0x0339
    678e:	80 91 3a 03 	lds	r24, 0x033A
    6792:	90 91 3b 03 	lds	r25, 0x033B
    6796:	28 17       	cp	r18, r24
    6798:	39 07       	cpc	r19, r25
    679a:	31 f4       	brne	.+12     	; 0x67a8 <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    679c:	80 91 c1 00 	lds	r24, 0x00C1
    67a0:	8f 7d       	andi	r24, 0xDF	; 223
    67a2:	80 93 c1 00 	sts	0x00C1, r24
    67a6:	14 c0       	rjmp	.+40     	; 0x67d0 <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    67a8:	e0 91 3a 03 	lds	r30, 0x033A
    67ac:	f0 91 3b 03 	lds	r31, 0x033B
    67b0:	e8 50       	subi	r30, 0x08	; 8
    67b2:	fd 4f       	sbci	r31, 0xFD	; 253
    67b4:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    67b6:	80 91 3a 03 	lds	r24, 0x033A
    67ba:	90 91 3b 03 	lds	r25, 0x033B
    67be:	01 96       	adiw	r24, 0x01	; 1
    67c0:	8f 73       	andi	r24, 0x3F	; 63
    67c2:	90 70       	andi	r25, 0x00	; 0
    67c4:	90 93 3b 03 	sts	0x033B, r25
    67c8:	80 93 3a 03 	sts	0x033A, r24
	
  #if defined(UDR0)
    UDR0 = c;
    67cc:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    67d0:	ff 91       	pop	r31
    67d2:	ef 91       	pop	r30
    67d4:	9f 91       	pop	r25
    67d6:	8f 91       	pop	r24
    67d8:	3f 91       	pop	r19
    67da:	2f 91       	pop	r18
    67dc:	0f 90       	pop	r0
    67de:	0f be       	out	0x3f, r0	; 63
    67e0:	0f 90       	pop	r0
    67e2:	1f 90       	pop	r1
    67e4:	18 95       	reti

000067e6 <HardwareSerial::begin(unsigned long)>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    67e6:	af 92       	push	r10
    67e8:	bf 92       	push	r11
    67ea:	df 92       	push	r13
    67ec:	ef 92       	push	r14
    67ee:	ff 92       	push	r15
    67f0:	0f 93       	push	r16
    67f2:	1f 93       	push	r17
    67f4:	cf 93       	push	r28
    67f6:	df 93       	push	r29
    67f8:	ec 01       	movw	r28, r24
    67fa:	7a 01       	movw	r14, r20
    67fc:	8b 01       	movw	r16, r22
    67fe:	dd 24       	eor	r13, r13
    6800:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    6802:	91 e0       	ldi	r25, 0x01	; 1
    6804:	a9 2e       	mov	r10, r25
    6806:	b1 2c       	mov	r11, r1
    6808:	ec 89       	ldd	r30, Y+20	; 0x14
    680a:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
    680c:	dd 20       	and	r13, r13
    680e:	69 f0       	breq	.+26     	; 0x682a <HardwareSerial::begin(unsigned long)+0x44>
    *_ucsra = 1 << _u2x;
    6810:	c5 01       	movw	r24, r10
    6812:	08 a0       	ldd	r0, Y+32	; 0x20
    6814:	02 c0       	rjmp	.+4      	; 0x681a <HardwareSerial::begin(unsigned long)+0x34>
    6816:	88 0f       	add	r24, r24
    6818:	99 1f       	adc	r25, r25
    681a:	0a 94       	dec	r0
    681c:	e2 f7       	brpl	.-8      	; 0x6816 <HardwareSerial::begin(unsigned long)+0x30>
    681e:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    6820:	60 e9       	ldi	r22, 0x90	; 144
    6822:	70 ed       	ldi	r23, 0xD0	; 208
    6824:	83 e0       	ldi	r24, 0x03	; 3
    6826:	90 e0       	ldi	r25, 0x00	; 0
    6828:	05 c0       	rjmp	.+10     	; 0x6834 <HardwareSerial::begin(unsigned long)+0x4e>
  } else {
    *_ucsra = 0;
    682a:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    682c:	68 e4       	ldi	r22, 0x48	; 72
    682e:	78 ee       	ldi	r23, 0xE8	; 232
    6830:	81 e0       	ldi	r24, 0x01	; 1
    6832:	90 e0       	ldi	r25, 0x00	; 0
    6834:	a8 01       	movw	r20, r16
    6836:	97 01       	movw	r18, r14
    6838:	0e 94 22 39 	call	0x7244	; 0x7244 <__udivmodsi4>
    683c:	21 50       	subi	r18, 0x01	; 1
    683e:	30 40       	sbci	r19, 0x00	; 0
    6840:	40 40       	sbci	r20, 0x00	; 0
    6842:	50 40       	sbci	r21, 0x00	; 0
    6844:	56 95       	lsr	r21
    6846:	47 95       	ror	r20
    6848:	37 95       	ror	r19
    684a:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    684c:	80 e1       	ldi	r24, 0x10	; 16
    684e:	20 30       	cpi	r18, 0x00	; 0
    6850:	38 07       	cpc	r19, r24
    6852:	20 f0       	brcs	.+8      	; 0x685c <HardwareSerial::begin(unsigned long)+0x76>
    6854:	dd 20       	and	r13, r13
    6856:	11 f0       	breq	.+4      	; 0x685c <HardwareSerial::begin(unsigned long)+0x76>
    6858:	dd 24       	eor	r13, r13
    685a:	d6 cf       	rjmp	.-84     	; 0x6808 <HardwareSerial::begin(unsigned long)+0x22>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    685c:	e8 89       	ldd	r30, Y+16	; 0x10
    685e:	f9 89       	ldd	r31, Y+17	; 0x11
    6860:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    6862:	ea 89       	ldd	r30, Y+18	; 0x12
    6864:	fb 89       	ldd	r31, Y+19	; 0x13
    6866:	20 83       	st	Z, r18

  transmitting = false;
    6868:	19 a2       	std	Y+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
    686a:	ee 89       	ldd	r30, Y+22	; 0x16
    686c:	ff 89       	ldd	r31, Y+23	; 0x17
    686e:	40 81       	ld	r20, Z
    6870:	21 e0       	ldi	r18, 0x01	; 1
    6872:	30 e0       	ldi	r19, 0x00	; 0
    6874:	c9 01       	movw	r24, r18
    6876:	0c 8c       	ldd	r0, Y+28	; 0x1c
    6878:	02 c0       	rjmp	.+4      	; 0x687e <HardwareSerial::begin(unsigned long)+0x98>
    687a:	88 0f       	add	r24, r24
    687c:	99 1f       	adc	r25, r25
    687e:	0a 94       	dec	r0
    6880:	e2 f7       	brpl	.-8      	; 0x687a <HardwareSerial::begin(unsigned long)+0x94>
    6882:	48 2b       	or	r20, r24
    6884:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    6886:	ee 89       	ldd	r30, Y+22	; 0x16
    6888:	ff 89       	ldd	r31, Y+23	; 0x17
    688a:	40 81       	ld	r20, Z
    688c:	c9 01       	movw	r24, r18
    688e:	0d 8c       	ldd	r0, Y+29	; 0x1d
    6890:	02 c0       	rjmp	.+4      	; 0x6896 <HardwareSerial::begin(unsigned long)+0xb0>
    6892:	88 0f       	add	r24, r24
    6894:	99 1f       	adc	r25, r25
    6896:	0a 94       	dec	r0
    6898:	e2 f7       	brpl	.-8      	; 0x6892 <HardwareSerial::begin(unsigned long)+0xac>
    689a:	48 2b       	or	r20, r24
    689c:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    689e:	ee 89       	ldd	r30, Y+22	; 0x16
    68a0:	ff 89       	ldd	r31, Y+23	; 0x17
    68a2:	40 81       	ld	r20, Z
    68a4:	c9 01       	movw	r24, r18
    68a6:	0e 8c       	ldd	r0, Y+30	; 0x1e
    68a8:	02 c0       	rjmp	.+4      	; 0x68ae <HardwareSerial::begin(unsigned long)+0xc8>
    68aa:	88 0f       	add	r24, r24
    68ac:	99 1f       	adc	r25, r25
    68ae:	0a 94       	dec	r0
    68b0:	e2 f7       	brpl	.-8      	; 0x68aa <HardwareSerial::begin(unsigned long)+0xc4>
    68b2:	48 2b       	or	r20, r24
    68b4:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    68b6:	ee 89       	ldd	r30, Y+22	; 0x16
    68b8:	ff 89       	ldd	r31, Y+23	; 0x17
    68ba:	80 81       	ld	r24, Z
    68bc:	0f 8c       	ldd	r0, Y+31	; 0x1f
    68be:	02 c0       	rjmp	.+4      	; 0x68c4 <HardwareSerial::begin(unsigned long)+0xde>
    68c0:	22 0f       	add	r18, r18
    68c2:	33 1f       	adc	r19, r19
    68c4:	0a 94       	dec	r0
    68c6:	e2 f7       	brpl	.-8      	; 0x68c0 <HardwareSerial::begin(unsigned long)+0xda>
    68c8:	20 95       	com	r18
    68ca:	28 23       	and	r18, r24
    68cc:	20 83       	st	Z, r18
}
    68ce:	df 91       	pop	r29
    68d0:	cf 91       	pop	r28
    68d2:	1f 91       	pop	r17
    68d4:	0f 91       	pop	r16
    68d6:	ff 90       	pop	r15
    68d8:	ef 90       	pop	r14
    68da:	df 90       	pop	r13
    68dc:	bf 90       	pop	r11
    68de:	af 90       	pop	r10
    68e0:	08 95       	ret

000068e2 <HardwareSerial::end()>:
  sbi(*_ucsrb, _txen);
  sbi(*_ucsrb, _rxcie);
  cbi(*_ucsrb, _udrie);
}

void HardwareSerial::end()
    68e2:	cf 93       	push	r28
    68e4:	df 93       	push	r29
    68e6:	dc 01       	movw	r26, r24
{
  // wait for transmission of outgoing data
  while (_tx_buffer->head != _tx_buffer->tail)
    68e8:	1e 96       	adiw	r26, 0x0e	; 14
    68ea:	8d 91       	ld	r24, X+
    68ec:	9c 91       	ld	r25, X
    68ee:	1f 97       	sbiw	r26, 0x0f	; 15
    68f0:	ec 01       	movw	r28, r24
    68f2:	c0 5c       	subi	r28, 0xC0	; 192
    68f4:	df 4f       	sbci	r29, 0xFF	; 255
    68f6:	fc 01       	movw	r30, r24
    68f8:	ee 5b       	subi	r30, 0xBE	; 190
    68fa:	ff 4f       	sbci	r31, 0xFF	; 255
    68fc:	28 81       	ld	r18, Y
    68fe:	39 81       	ldd	r19, Y+1	; 0x01
    6900:	80 81       	ld	r24, Z
    6902:	91 81       	ldd	r25, Z+1	; 0x01
    6904:	28 17       	cp	r18, r24
    6906:	39 07       	cpc	r19, r25
    6908:	c9 f7       	brne	.-14     	; 0x68fc <HardwareSerial::end()+0x1a>
    ;

  cbi(*_ucsrb, _rxen);
    690a:	56 96       	adiw	r26, 0x16	; 22
    690c:	ed 91       	ld	r30, X+
    690e:	fc 91       	ld	r31, X
    6910:	57 97       	sbiw	r26, 0x17	; 23
    6912:	40 81       	ld	r20, Z
    6914:	21 e0       	ldi	r18, 0x01	; 1
    6916:	30 e0       	ldi	r19, 0x00	; 0
    6918:	c9 01       	movw	r24, r18
    691a:	5c 96       	adiw	r26, 0x1c	; 28
    691c:	0c 90       	ld	r0, X
    691e:	5c 97       	sbiw	r26, 0x1c	; 28
    6920:	02 c0       	rjmp	.+4      	; 0x6926 <HardwareSerial::end()+0x44>
    6922:	88 0f       	add	r24, r24
    6924:	99 1f       	adc	r25, r25
    6926:	0a 94       	dec	r0
    6928:	e2 f7       	brpl	.-8      	; 0x6922 <HardwareSerial::end()+0x40>
    692a:	80 95       	com	r24
    692c:	84 23       	and	r24, r20
    692e:	80 83       	st	Z, r24
  cbi(*_ucsrb, _txen);
    6930:	56 96       	adiw	r26, 0x16	; 22
    6932:	ed 91       	ld	r30, X+
    6934:	fc 91       	ld	r31, X
    6936:	57 97       	sbiw	r26, 0x17	; 23
    6938:	40 81       	ld	r20, Z
    693a:	c9 01       	movw	r24, r18
    693c:	5d 96       	adiw	r26, 0x1d	; 29
    693e:	0c 90       	ld	r0, X
    6940:	5d 97       	sbiw	r26, 0x1d	; 29
    6942:	02 c0       	rjmp	.+4      	; 0x6948 <HardwareSerial::end()+0x66>
    6944:	88 0f       	add	r24, r24
    6946:	99 1f       	adc	r25, r25
    6948:	0a 94       	dec	r0
    694a:	e2 f7       	brpl	.-8      	; 0x6944 <HardwareSerial::end()+0x62>
    694c:	80 95       	com	r24
    694e:	84 23       	and	r24, r20
    6950:	80 83       	st	Z, r24
  cbi(*_ucsrb, _rxcie);  
    6952:	56 96       	adiw	r26, 0x16	; 22
    6954:	ed 91       	ld	r30, X+
    6956:	fc 91       	ld	r31, X
    6958:	57 97       	sbiw	r26, 0x17	; 23
    695a:	40 81       	ld	r20, Z
    695c:	c9 01       	movw	r24, r18
    695e:	5e 96       	adiw	r26, 0x1e	; 30
    6960:	0c 90       	ld	r0, X
    6962:	5e 97       	sbiw	r26, 0x1e	; 30
    6964:	02 c0       	rjmp	.+4      	; 0x696a <HardwareSerial::end()+0x88>
    6966:	88 0f       	add	r24, r24
    6968:	99 1f       	adc	r25, r25
    696a:	0a 94       	dec	r0
    696c:	e2 f7       	brpl	.-8      	; 0x6966 <HardwareSerial::end()+0x84>
    696e:	80 95       	com	r24
    6970:	84 23       	and	r24, r20
    6972:	80 83       	st	Z, r24
  cbi(*_ucsrb, _udrie);
    6974:	56 96       	adiw	r26, 0x16	; 22
    6976:	ed 91       	ld	r30, X+
    6978:	fc 91       	ld	r31, X
    697a:	57 97       	sbiw	r26, 0x17	; 23
    697c:	80 81       	ld	r24, Z
    697e:	5f 96       	adiw	r26, 0x1f	; 31
    6980:	0c 90       	ld	r0, X
    6982:	5f 97       	sbiw	r26, 0x1f	; 31
    6984:	02 c0       	rjmp	.+4      	; 0x698a <HardwareSerial::end()+0xa8>
    6986:	22 0f       	add	r18, r18
    6988:	33 1f       	adc	r19, r19
    698a:	0a 94       	dec	r0
    698c:	e2 f7       	brpl	.-8      	; 0x6986 <HardwareSerial::end()+0xa4>
    698e:	20 95       	com	r18
    6990:	28 23       	and	r18, r24
    6992:	20 83       	st	Z, r18
  
  // clear any received data
  _rx_buffer->head = _rx_buffer->tail;
    6994:	1c 96       	adiw	r26, 0x0c	; 12
    6996:	ed 91       	ld	r30, X+
    6998:	fc 91       	ld	r31, X
    699a:	1d 97       	sbiw	r26, 0x0d	; 13
    699c:	ee 5b       	subi	r30, 0xBE	; 190
    699e:	ff 4f       	sbci	r31, 0xFF	; 255
    69a0:	80 81       	ld	r24, Z
    69a2:	91 81       	ldd	r25, Z+1	; 0x01
    69a4:	92 93       	st	-Z, r25
    69a6:	82 93       	st	-Z, r24
}
    69a8:	df 91       	pop	r29
    69aa:	cf 91       	pop	r28
    69ac:	08 95       	ret

000069ae <HardwareSerial::available()>:

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    69ae:	dc 01       	movw	r26, r24
    69b0:	1c 96       	adiw	r26, 0x0c	; 12
    69b2:	ed 91       	ld	r30, X+
    69b4:	fc 91       	ld	r31, X
    69b6:	1d 97       	sbiw	r26, 0x0d	; 13
    69b8:	e0 5c       	subi	r30, 0xC0	; 192
    69ba:	ff 4f       	sbci	r31, 0xFF	; 255
    69bc:	21 91       	ld	r18, Z+
    69be:	31 91       	ld	r19, Z+
    69c0:	80 81       	ld	r24, Z
    69c2:	91 81       	ldd	r25, Z+1	; 0x01
    69c4:	28 1b       	sub	r18, r24
    69c6:	39 0b       	sbc	r19, r25
    69c8:	2f 73       	andi	r18, 0x3F	; 63
    69ca:	30 70       	andi	r19, 0x00	; 0
}
    69cc:	c9 01       	movw	r24, r18
    69ce:	08 95       	ret

000069d0 <HardwareSerial::peek()>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    69d0:	dc 01       	movw	r26, r24
    69d2:	1c 96       	adiw	r26, 0x0c	; 12
    69d4:	ed 91       	ld	r30, X+
    69d6:	fc 91       	ld	r31, X
    69d8:	1d 97       	sbiw	r26, 0x0d	; 13
    69da:	e0 5c       	subi	r30, 0xC0	; 192
    69dc:	ff 4f       	sbci	r31, 0xFF	; 255
    69de:	20 81       	ld	r18, Z
    69e0:	31 81       	ldd	r19, Z+1	; 0x01
    69e2:	e0 54       	subi	r30, 0x40	; 64
    69e4:	f0 40       	sbci	r31, 0x00	; 0
    69e6:	df 01       	movw	r26, r30
    69e8:	ae 5b       	subi	r26, 0xBE	; 190
    69ea:	bf 4f       	sbci	r27, 0xFF	; 255
    69ec:	8d 91       	ld	r24, X+
    69ee:	9c 91       	ld	r25, X
    69f0:	11 97       	sbiw	r26, 0x01	; 1
    69f2:	28 17       	cp	r18, r24
    69f4:	39 07       	cpc	r19, r25
    69f6:	19 f4       	brne	.+6      	; 0x69fe <HardwareSerial::peek()+0x2e>
    69f8:	2f ef       	ldi	r18, 0xFF	; 255
    69fa:	3f ef       	ldi	r19, 0xFF	; 255
    69fc:	07 c0       	rjmp	.+14     	; 0x6a0c <HardwareSerial::peek()+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    69fe:	8d 91       	ld	r24, X+
    6a00:	9c 91       	ld	r25, X
    6a02:	e8 0f       	add	r30, r24
    6a04:	f9 1f       	adc	r31, r25
    6a06:	80 81       	ld	r24, Z
    6a08:	28 2f       	mov	r18, r24
    6a0a:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    6a0c:	c9 01       	movw	r24, r18
    6a0e:	08 95       	ret

00006a10 <HardwareSerial::read()>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    6a10:	dc 01       	movw	r26, r24
    6a12:	1c 96       	adiw	r26, 0x0c	; 12
    6a14:	ed 91       	ld	r30, X+
    6a16:	fc 91       	ld	r31, X
    6a18:	1d 97       	sbiw	r26, 0x0d	; 13
    6a1a:	e0 5c       	subi	r30, 0xC0	; 192
    6a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    6a1e:	20 81       	ld	r18, Z
    6a20:	31 81       	ldd	r19, Z+1	; 0x01
    6a22:	e0 54       	subi	r30, 0x40	; 64
    6a24:	f0 40       	sbci	r31, 0x00	; 0
    6a26:	df 01       	movw	r26, r30
    6a28:	ae 5b       	subi	r26, 0xBE	; 190
    6a2a:	bf 4f       	sbci	r27, 0xFF	; 255
    6a2c:	8d 91       	ld	r24, X+
    6a2e:	9c 91       	ld	r25, X
    6a30:	11 97       	sbiw	r26, 0x01	; 1
    6a32:	28 17       	cp	r18, r24
    6a34:	39 07       	cpc	r19, r25
    6a36:	19 f4       	brne	.+6      	; 0x6a3e <HardwareSerial::read()+0x2e>
    6a38:	2f ef       	ldi	r18, 0xFF	; 255
    6a3a:	3f ef       	ldi	r19, 0xFF	; 255
    6a3c:	10 c0       	rjmp	.+32     	; 0x6a5e <HardwareSerial::read()+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    6a3e:	8d 91       	ld	r24, X+
    6a40:	9c 91       	ld	r25, X
    6a42:	11 97       	sbiw	r26, 0x01	; 1
    6a44:	e8 0f       	add	r30, r24
    6a46:	f9 1f       	adc	r31, r25
    6a48:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    6a4a:	8d 91       	ld	r24, X+
    6a4c:	9c 91       	ld	r25, X
    6a4e:	11 97       	sbiw	r26, 0x01	; 1
    6a50:	01 96       	adiw	r24, 0x01	; 1
    6a52:	8f 73       	andi	r24, 0x3F	; 63
    6a54:	90 70       	andi	r25, 0x00	; 0
    6a56:	11 96       	adiw	r26, 0x01	; 1
    6a58:	9c 93       	st	X, r25
    6a5a:	8e 93       	st	-X, r24
    return c;
    6a5c:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    6a5e:	c9 01       	movw	r24, r18
    6a60:	08 95       	ret

00006a62 <HardwareSerial::flush()>:

void HardwareSerial::flush()
    6a62:	dc 01       	movw	r26, r24
{
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
    6a64:	91 96       	adiw	r26, 0x21	; 33
    6a66:	8c 91       	ld	r24, X
    6a68:	91 97       	sbiw	r26, 0x21	; 33
    6a6a:	88 23       	and	r24, r24
    6a6c:	39 f0       	breq	.+14     	; 0x6a7c <HardwareSerial::flush()+0x1a>
    6a6e:	54 96       	adiw	r26, 0x14	; 20
    6a70:	ed 91       	ld	r30, X+
    6a72:	fc 91       	ld	r31, X
    6a74:	55 97       	sbiw	r26, 0x15	; 21
    6a76:	80 81       	ld	r24, Z
    6a78:	86 ff       	sbrs	r24, 6
    6a7a:	f9 cf       	rjmp	.-14     	; 0x6a6e <HardwareSerial::flush()+0xc>
  transmitting = false;
    6a7c:	91 96       	adiw	r26, 0x21	; 33
    6a7e:	1c 92       	st	X, r1
}
    6a80:	08 95       	ret

00006a82 <HardwareSerial::write(unsigned char)>:

size_t HardwareSerial::write(uint8_t c)
    6a82:	cf 93       	push	r28
    6a84:	df 93       	push	r29
    6a86:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    6a88:	ee 85       	ldd	r30, Y+14	; 0x0e
    6a8a:	ff 85       	ldd	r31, Y+15	; 0x0f
    6a8c:	e0 5c       	subi	r30, 0xC0	; 192
    6a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    6a90:	20 81       	ld	r18, Z
    6a92:	31 81       	ldd	r19, Z+1	; 0x01
    6a94:	e0 54       	subi	r30, 0x40	; 64
    6a96:	f0 40       	sbci	r31, 0x00	; 0
    6a98:	2f 5f       	subi	r18, 0xFF	; 255
    6a9a:	3f 4f       	sbci	r19, 0xFF	; 255
    6a9c:	2f 73       	andi	r18, 0x3F	; 63
    6a9e:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    6aa0:	df 01       	movw	r26, r30
    6aa2:	ae 5b       	subi	r26, 0xBE	; 190
    6aa4:	bf 4f       	sbci	r27, 0xFF	; 255
    6aa6:	8d 91       	ld	r24, X+
    6aa8:	9c 91       	ld	r25, X
    6aaa:	11 97       	sbiw	r26, 0x01	; 1
    6aac:	28 17       	cp	r18, r24
    6aae:	39 07       	cpc	r19, r25
    6ab0:	d1 f3       	breq	.-12     	; 0x6aa6 <HardwareSerial::write(unsigned char)+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    6ab2:	e0 5c       	subi	r30, 0xC0	; 192
    6ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    6ab6:	80 81       	ld	r24, Z
    6ab8:	91 81       	ldd	r25, Z+1	; 0x01
    6aba:	e0 54       	subi	r30, 0x40	; 64
    6abc:	f0 40       	sbci	r31, 0x00	; 0
    6abe:	e8 0f       	add	r30, r24
    6ac0:	f9 1f       	adc	r31, r25
    6ac2:	60 83       	st	Z, r22
  _tx_buffer->head = i;
    6ac4:	ee 85       	ldd	r30, Y+14	; 0x0e
    6ac6:	ff 85       	ldd	r31, Y+15	; 0x0f
    6ac8:	e0 5c       	subi	r30, 0xC0	; 192
    6aca:	ff 4f       	sbci	r31, 0xFF	; 255
    6acc:	31 83       	std	Z+1, r19	; 0x01
    6ace:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    6ad0:	ee 89       	ldd	r30, Y+22	; 0x16
    6ad2:	ff 89       	ldd	r31, Y+23	; 0x17
    6ad4:	20 81       	ld	r18, Z
    6ad6:	81 e0       	ldi	r24, 0x01	; 1
    6ad8:	90 e0       	ldi	r25, 0x00	; 0
    6ada:	0f 8c       	ldd	r0, Y+31	; 0x1f
    6adc:	02 c0       	rjmp	.+4      	; 0x6ae2 <HardwareSerial::write(unsigned char)+0x60>
    6ade:	88 0f       	add	r24, r24
    6ae0:	99 1f       	adc	r25, r25
    6ae2:	0a 94       	dec	r0
    6ae4:	e2 f7       	brpl	.-8      	; 0x6ade <HardwareSerial::write(unsigned char)+0x5c>
    6ae6:	28 2b       	or	r18, r24
    6ae8:	20 83       	st	Z, r18
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
    6aea:	81 e0       	ldi	r24, 0x01	; 1
    6aec:	89 a3       	std	Y+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
    6aee:	ec 89       	ldd	r30, Y+20	; 0x14
    6af0:	fd 89       	ldd	r31, Y+21	; 0x15
    6af2:	80 81       	ld	r24, Z
    6af4:	80 64       	ori	r24, 0x40	; 64
    6af6:	80 83       	st	Z, r24
  
  return 1;
}
    6af8:	81 e0       	ldi	r24, 0x01	; 1
    6afa:	90 e0       	ldi	r25, 0x00	; 0
    6afc:	df 91       	pop	r29
    6afe:	cf 91       	pop	r28
    6b00:	08 95       	ret

00006b02 <global constructors keyed to rx_buffer>:
  public:
    Print() : write_error(0) {}
    6b02:	10 92 3f 03 	sts	0x033F, r1
    6b06:	10 92 3e 03 	sts	0x033E, r1
    6b0a:	88 ee       	ldi	r24, 0xE8	; 232
    6b0c:	93 e0       	ldi	r25, 0x03	; 3
    6b0e:	a0 e0       	ldi	r26, 0x00	; 0
    6b10:	b0 e0       	ldi	r27, 0x00	; 0
    6b12:	80 93 40 03 	sts	0x0340, r24
    6b16:	90 93 41 03 	sts	0x0341, r25
    6b1a:	a0 93 42 03 	sts	0x0342, r26
    6b1e:	b0 93 43 03 	sts	0x0343, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    6b22:	86 e2       	ldi	r24, 0x26	; 38
    6b24:	91 e0       	ldi	r25, 0x01	; 1
    6b26:	90 93 3d 03 	sts	0x033D, r25
    6b2a:	80 93 3c 03 	sts	0x033C, r24
{
  _rx_buffer = rx_buffer;
    6b2e:	84 eb       	ldi	r24, 0xB4	; 180
    6b30:	92 e0       	ldi	r25, 0x02	; 2
    6b32:	90 93 49 03 	sts	0x0349, r25
    6b36:	80 93 48 03 	sts	0x0348, r24
  _tx_buffer = tx_buffer;
    6b3a:	88 ef       	ldi	r24, 0xF8	; 248
    6b3c:	92 e0       	ldi	r25, 0x02	; 2
    6b3e:	90 93 4b 03 	sts	0x034B, r25
    6b42:	80 93 4a 03 	sts	0x034A, r24
  _ubrrh = ubrrh;
    6b46:	85 ec       	ldi	r24, 0xC5	; 197
    6b48:	90 e0       	ldi	r25, 0x00	; 0
    6b4a:	90 93 4d 03 	sts	0x034D, r25
    6b4e:	80 93 4c 03 	sts	0x034C, r24
  _ubrrl = ubrrl;
    6b52:	84 ec       	ldi	r24, 0xC4	; 196
    6b54:	90 e0       	ldi	r25, 0x00	; 0
    6b56:	90 93 4f 03 	sts	0x034F, r25
    6b5a:	80 93 4e 03 	sts	0x034E, r24
  _ucsra = ucsra;
    6b5e:	80 ec       	ldi	r24, 0xC0	; 192
    6b60:	90 e0       	ldi	r25, 0x00	; 0
    6b62:	90 93 51 03 	sts	0x0351, r25
    6b66:	80 93 50 03 	sts	0x0350, r24
  _ucsrb = ucsrb;
    6b6a:	81 ec       	ldi	r24, 0xC1	; 193
    6b6c:	90 e0       	ldi	r25, 0x00	; 0
    6b6e:	90 93 53 03 	sts	0x0353, r25
    6b72:	80 93 52 03 	sts	0x0352, r24
  _ucsrc = ucsrc;
    6b76:	82 ec       	ldi	r24, 0xC2	; 194
    6b78:	90 e0       	ldi	r25, 0x00	; 0
    6b7a:	90 93 55 03 	sts	0x0355, r25
    6b7e:	80 93 54 03 	sts	0x0354, r24
  _udr = udr;
    6b82:	86 ec       	ldi	r24, 0xC6	; 198
    6b84:	90 e0       	ldi	r25, 0x00	; 0
    6b86:	90 93 57 03 	sts	0x0357, r25
    6b8a:	80 93 56 03 	sts	0x0356, r24
  _rxen = rxen;
    6b8e:	84 e0       	ldi	r24, 0x04	; 4
    6b90:	80 93 58 03 	sts	0x0358, r24
  _txen = txen;
    6b94:	83 e0       	ldi	r24, 0x03	; 3
    6b96:	80 93 59 03 	sts	0x0359, r24
  _rxcie = rxcie;
    6b9a:	87 e0       	ldi	r24, 0x07	; 7
    6b9c:	80 93 5a 03 	sts	0x035A, r24
  _udrie = udrie;
    6ba0:	85 e0       	ldi	r24, 0x05	; 5
    6ba2:	80 93 5b 03 	sts	0x035B, r24
  _u2x = u2x;
    6ba6:	81 e0       	ldi	r24, 0x01	; 1
    6ba8:	80 93 5c 03 	sts	0x035C, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    6bac:	08 95       	ret

00006bae <main>:
#include <Arduino.h>

int main(void)
    6bae:	cf 93       	push	r28
    6bb0:	df 93       	push	r29
{
	init();
    6bb2:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    6bb6:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    6bba:	c5 ea       	ldi	r28, 0xA5	; 165
    6bbc:	d3 e3       	ldi	r29, 0x33	; 51
#endif
	
	setup();
    
	for (;;) {
		loop();
    6bbe:	0e 94 b1 28 	call	0x5162	; 0x5162 <loop>
		if (serialEventRun) serialEventRun();
    6bc2:	20 97       	sbiw	r28, 0x00	; 0
    6bc4:	e1 f3       	breq	.-8      	; 0x6bbe <main+0x10>
    6bc6:	0e 94 a5 33 	call	0x674a	; 0x674a <serialEventRun()>
    6bca:	f9 cf       	rjmp	.-14     	; 0x6bbe <main+0x10>

00006bcc <Print::write(unsigned char const*, unsigned int)>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    6bcc:	cf 92       	push	r12
    6bce:	df 92       	push	r13
    6bd0:	ef 92       	push	r14
    6bd2:	ff 92       	push	r15
    6bd4:	0f 93       	push	r16
    6bd6:	1f 93       	push	r17
    6bd8:	cf 93       	push	r28
    6bda:	df 93       	push	r29
    6bdc:	7c 01       	movw	r14, r24
    6bde:	6b 01       	movw	r12, r22
    6be0:	8a 01       	movw	r16, r20
    6be2:	c0 e0       	ldi	r28, 0x00	; 0
    6be4:	d0 e0       	ldi	r29, 0x00	; 0
    6be6:	0f c0       	rjmp	.+30     	; 0x6c06 <Print::write(unsigned char const*, unsigned int)+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    6be8:	d6 01       	movw	r26, r12
    6bea:	6d 91       	ld	r22, X+
    6bec:	6d 01       	movw	r12, r26
    6bee:	d7 01       	movw	r26, r14
    6bf0:	ed 91       	ld	r30, X+
    6bf2:	fc 91       	ld	r31, X
    6bf4:	01 90       	ld	r0, Z+
    6bf6:	f0 81       	ld	r31, Z
    6bf8:	e0 2d       	mov	r30, r0
    6bfa:	c7 01       	movw	r24, r14
    6bfc:	09 95       	icall
    6bfe:	c8 0f       	add	r28, r24
    6c00:	d9 1f       	adc	r29, r25
    6c02:	01 50       	subi	r16, 0x01	; 1
    6c04:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    6c06:	01 15       	cp	r16, r1
    6c08:	11 05       	cpc	r17, r1
    6c0a:	71 f7       	brne	.-36     	; 0x6be8 <Print::write(unsigned char const*, unsigned int)+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    6c0c:	ce 01       	movw	r24, r28
    6c0e:	df 91       	pop	r29
    6c10:	cf 91       	pop	r28
    6c12:	1f 91       	pop	r17
    6c14:	0f 91       	pop	r16
    6c16:	ff 90       	pop	r15
    6c18:	ef 90       	pop	r14
    6c1a:	df 90       	pop	r13
    6c1c:	cf 90       	pop	r12
    6c1e:	08 95       	ret

00006c20 <Print::print(__FlashStringHelper const*)>:

size_t Print::print(const __FlashStringHelper *ifsh)
    6c20:	ef 92       	push	r14
    6c22:	ff 92       	push	r15
    6c24:	0f 93       	push	r16
    6c26:	1f 93       	push	r17
    6c28:	cf 93       	push	r28
    6c2a:	df 93       	push	r29
    6c2c:	7c 01       	movw	r14, r24
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
    6c2e:	8b 01       	movw	r16, r22
    6c30:	c0 e0       	ldi	r28, 0x00	; 0
    6c32:	d0 e0       	ldi	r29, 0x00	; 0
    6c34:	f8 01       	movw	r30, r16
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    6c36:	0f 5f       	subi	r16, 0xFF	; 255
    6c38:	1f 4f       	sbci	r17, 0xFF	; 255
    6c3a:	64 91       	lpm	r22, Z+
    if (c == 0) break;
    6c3c:	66 23       	and	r22, r22
    6c3e:	59 f0       	breq	.+22     	; 0x6c56 <Print::print(__FlashStringHelper const*)+0x36>
    n += write(c);
    6c40:	d7 01       	movw	r26, r14
    6c42:	ed 91       	ld	r30, X+
    6c44:	fc 91       	ld	r31, X
    6c46:	01 90       	ld	r0, Z+
    6c48:	f0 81       	ld	r31, Z
    6c4a:	e0 2d       	mov	r30, r0
    6c4c:	c7 01       	movw	r24, r14
    6c4e:	09 95       	icall
    6c50:	c8 0f       	add	r28, r24
    6c52:	d9 1f       	adc	r29, r25
    6c54:	ef cf       	rjmp	.-34     	; 0x6c34 <Print::print(__FlashStringHelper const*)+0x14>
  }
  return n;
}
    6c56:	ce 01       	movw	r24, r28
    6c58:	df 91       	pop	r29
    6c5a:	cf 91       	pop	r28
    6c5c:	1f 91       	pop	r17
    6c5e:	0f 91       	pop	r16
    6c60:	ff 90       	pop	r15
    6c62:	ef 90       	pop	r14
    6c64:	08 95       	ret

00006c66 <Print::print(char)>:
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
    6c66:	dc 01       	movw	r26, r24
{
  return write(c);
    6c68:	ed 91       	ld	r30, X+
    6c6a:	fc 91       	ld	r31, X
    6c6c:	01 90       	ld	r0, Z+
    6c6e:	f0 81       	ld	r31, Z
    6c70:	e0 2d       	mov	r30, r0
    6c72:	09 95       	icall
}
    6c74:	08 95       	ret

00006c76 <Print::println()>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
    6c76:	ef 92       	push	r14
    6c78:	ff 92       	push	r15
    6c7a:	0f 93       	push	r16
    6c7c:	1f 93       	push	r17
    6c7e:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    6c80:	dc 01       	movw	r26, r24
    6c82:	ed 91       	ld	r30, X+
    6c84:	fc 91       	ld	r31, X
    6c86:	01 90       	ld	r0, Z+
    6c88:	f0 81       	ld	r31, Z
    6c8a:	e0 2d       	mov	r30, r0
    6c8c:	6d e0       	ldi	r22, 0x0D	; 13
    6c8e:	09 95       	icall
    6c90:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    6c92:	d8 01       	movw	r26, r16
    6c94:	ed 91       	ld	r30, X+
    6c96:	fc 91       	ld	r31, X
    6c98:	01 90       	ld	r0, Z+
    6c9a:	f0 81       	ld	r31, Z
    6c9c:	e0 2d       	mov	r30, r0
    6c9e:	c8 01       	movw	r24, r16
    6ca0:	6a e0       	ldi	r22, 0x0A	; 10
    6ca2:	09 95       	icall
    6ca4:	9c 01       	movw	r18, r24
    6ca6:	2e 0d       	add	r18, r14
    6ca8:	3f 1d       	adc	r19, r15
    6caa:	c9 01       	movw	r24, r18
    6cac:	1f 91       	pop	r17
    6cae:	0f 91       	pop	r16
    6cb0:	ff 90       	pop	r15
    6cb2:	ef 90       	pop	r14
    6cb4:	08 95       	ret

00006cb6 <Print::println(__FlashStringHelper const*)>:
size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
    6cb6:	ef 92       	push	r14
    6cb8:	ff 92       	push	r15
    6cba:	0f 93       	push	r16
    6cbc:	1f 93       	push	r17
    6cbe:	7c 01       	movw	r14, r24
{
  size_t n = print(ifsh);
    6cc0:	0e 94 10 36 	call	0x6c20	; 0x6c20 <Print::print(__FlashStringHelper const*)>
    6cc4:	8c 01       	movw	r16, r24
  n += println();
    6cc6:	c7 01       	movw	r24, r14
    6cc8:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <Print::println()>
    6ccc:	9c 01       	movw	r18, r24
    6cce:	20 0f       	add	r18, r16
    6cd0:	31 1f       	adc	r19, r17
  return n;
}
    6cd2:	c9 01       	movw	r24, r18
    6cd4:	1f 91       	pop	r17
    6cd6:	0f 91       	pop	r16
    6cd8:	ff 90       	pop	r15
    6cda:	ef 90       	pop	r14
    6cdc:	08 95       	ret

00006cde <Print::write(char const*)>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    6cde:	cf 93       	push	r28
    6ce0:	df 93       	push	r29
    6ce2:	ec 01       	movw	r28, r24
      if (str == NULL) return 0;
    6ce4:	61 15       	cp	r22, r1
    6ce6:	71 05       	cpc	r23, r1
    6ce8:	19 f4       	brne	.+6      	; 0x6cf0 <Print::write(char const*)+0x12>
    6cea:	20 e0       	ldi	r18, 0x00	; 0
    6cec:	30 e0       	ldi	r19, 0x00	; 0
    6cee:	0f c0       	rjmp	.+30     	; 0x6d0e <Print::write(char const*)+0x30>
      return write((const uint8_t *)str, strlen(str));
    6cf0:	db 01       	movw	r26, r22
    6cf2:	0d 90       	ld	r0, X+
    6cf4:	00 20       	and	r0, r0
    6cf6:	e9 f7       	brne	.-6      	; 0x6cf2 <Print::write(char const*)+0x14>
    6cf8:	11 97       	sbiw	r26, 0x01	; 1
    6cfa:	a6 1b       	sub	r26, r22
    6cfc:	b7 0b       	sbc	r27, r23
    6cfe:	e8 81       	ld	r30, Y
    6d00:	f9 81       	ldd	r31, Y+1	; 0x01
    6d02:	02 80       	ldd	r0, Z+2	; 0x02
    6d04:	f3 81       	ldd	r31, Z+3	; 0x03
    6d06:	e0 2d       	mov	r30, r0
    6d08:	ad 01       	movw	r20, r26
    6d0a:	09 95       	icall
    6d0c:	9c 01       	movw	r18, r24
    }
    6d0e:	c9 01       	movw	r24, r18
    6d10:	df 91       	pop	r29
    6d12:	cf 91       	pop	r28
    6d14:	08 95       	ret

00006d16 <Print::printNumber(unsigned long, unsigned char)>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    6d16:	4f 92       	push	r4
    6d18:	5f 92       	push	r5
    6d1a:	7f 92       	push	r7
    6d1c:	8f 92       	push	r8
    6d1e:	9f 92       	push	r9
    6d20:	af 92       	push	r10
    6d22:	bf 92       	push	r11
    6d24:	cf 92       	push	r12
    6d26:	df 92       	push	r13
    6d28:	ef 92       	push	r14
    6d2a:	ff 92       	push	r15
    6d2c:	0f 93       	push	r16
    6d2e:	1f 93       	push	r17
    6d30:	df 93       	push	r29
    6d32:	cf 93       	push	r28
    6d34:	cd b7       	in	r28, 0x3d	; 61
    6d36:	de b7       	in	r29, 0x3e	; 62
    6d38:	a1 97       	sbiw	r28, 0x21	; 33
    6d3a:	0f b6       	in	r0, 0x3f	; 63
    6d3c:	f8 94       	cli
    6d3e:	de bf       	out	0x3e, r29	; 62
    6d40:	0f be       	out	0x3f, r0	; 63
    6d42:	cd bf       	out	0x3d, r28	; 61
    6d44:	2c 01       	movw	r4, r24
    6d46:	74 2e       	mov	r7, r20
    6d48:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    6d4a:	22 30       	cpi	r18, 0x02	; 2
    6d4c:	08 f4       	brcc	.+2      	; 0x6d50 <Print::printNumber(unsigned long, unsigned char)+0x3a>
    6d4e:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    6d50:	19 a2       	std	Y+33, r1	; 0x21
    6d52:	31 e2       	ldi	r19, 0x21	; 33
    6d54:	c3 2e       	mov	r12, r19
    6d56:	d1 2c       	mov	r13, r1
    6d58:	cc 0e       	add	r12, r28
    6d5a:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    6d5c:	82 2e       	mov	r8, r18
    6d5e:	99 24       	eor	r9, r9
    6d60:	aa 24       	eor	r10, r10
    6d62:	bb 24       	eor	r11, r11
    6d64:	67 2d       	mov	r22, r7
    6d66:	75 2f       	mov	r23, r21
    6d68:	a5 01       	movw	r20, r10
    6d6a:	94 01       	movw	r18, r8
    6d6c:	0e 94 22 39 	call	0x7244	; 0x7244 <__udivmodsi4>
    6d70:	79 01       	movw	r14, r18
    6d72:	8a 01       	movw	r16, r20
    char c = m - base * n;
    6d74:	c8 01       	movw	r24, r16
    6d76:	b7 01       	movw	r22, r14
    6d78:	a5 01       	movw	r20, r10
    6d7a:	94 01       	movw	r18, r8
    6d7c:	0e 94 dc 38 	call	0x71b8	; 0x71b8 <__mulsi3>
    6d80:	47 2d       	mov	r20, r7
    6d82:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    6d84:	08 94       	sec
    6d86:	c1 08       	sbc	r12, r1
    6d88:	d1 08       	sbc	r13, r1
    6d8a:	4a 30       	cpi	r20, 0x0A	; 10
    6d8c:	14 f4       	brge	.+4      	; 0x6d92 <Print::printNumber(unsigned long, unsigned char)+0x7c>
    6d8e:	40 5d       	subi	r20, 0xD0	; 208
    6d90:	01 c0       	rjmp	.+2      	; 0x6d94 <Print::printNumber(unsigned long, unsigned char)+0x7e>
    6d92:	49 5c       	subi	r20, 0xC9	; 201
    6d94:	f6 01       	movw	r30, r12
    6d96:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    6d98:	e1 14       	cp	r14, r1
    6d9a:	f1 04       	cpc	r15, r1
    6d9c:	01 05       	cpc	r16, r1
    6d9e:	11 05       	cpc	r17, r1
    6da0:	21 f0       	breq	.+8      	; 0x6daa <Print::printNumber(unsigned long, unsigned char)+0x94>
    6da2:	7e 2c       	mov	r7, r14
    6da4:	5f 2d       	mov	r21, r15
    6da6:	c8 01       	movw	r24, r16
    6da8:	dd cf       	rjmp	.-70     	; 0x6d64 <Print::printNumber(unsigned long, unsigned char)+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    6daa:	c2 01       	movw	r24, r4
    6dac:	b6 01       	movw	r22, r12
    6dae:	0e 94 6f 36 	call	0x6cde	; 0x6cde <Print::write(char const*)>
}
    6db2:	a1 96       	adiw	r28, 0x21	; 33
    6db4:	0f b6       	in	r0, 0x3f	; 63
    6db6:	f8 94       	cli
    6db8:	de bf       	out	0x3e, r29	; 62
    6dba:	0f be       	out	0x3f, r0	; 63
    6dbc:	cd bf       	out	0x3d, r28	; 61
    6dbe:	cf 91       	pop	r28
    6dc0:	df 91       	pop	r29
    6dc2:	1f 91       	pop	r17
    6dc4:	0f 91       	pop	r16
    6dc6:	ff 90       	pop	r15
    6dc8:	ef 90       	pop	r14
    6dca:	df 90       	pop	r13
    6dcc:	cf 90       	pop	r12
    6dce:	bf 90       	pop	r11
    6dd0:	af 90       	pop	r10
    6dd2:	9f 90       	pop	r9
    6dd4:	8f 90       	pop	r8
    6dd6:	7f 90       	pop	r7
    6dd8:	5f 90       	pop	r5
    6dda:	4f 90       	pop	r4
    6ddc:	08 95       	ret

00006dde <Print::print(unsigned long, int)>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
    6dde:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
    6de0:	21 15       	cp	r18, r1
    6de2:	31 05       	cpc	r19, r1
    6de4:	41 f4       	brne	.+16     	; 0x6df6 <Print::print(unsigned long, int)+0x18>
    6de6:	ed 91       	ld	r30, X+
    6de8:	fc 91       	ld	r31, X
    6dea:	01 90       	ld	r0, Z+
    6dec:	f0 81       	ld	r31, Z
    6dee:	e0 2d       	mov	r30, r0
    6df0:	64 2f       	mov	r22, r20
    6df2:	09 95       	icall
    6df4:	08 95       	ret
  else return printNumber(n, base);
    6df6:	0e 94 8b 36 	call	0x6d16	; 0x6d16 <Print::printNumber(unsigned long, unsigned char)>
}
    6dfa:	08 95       	ret

00006dfc <Print::print(unsigned int, int)>:
size_t Print::print(int n, int base)
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
    6dfc:	ef 92       	push	r14
    6dfe:	ff 92       	push	r15
    6e00:	0f 93       	push	r16
    6e02:	1f 93       	push	r17
    6e04:	9a 01       	movw	r18, r20
{
  return print((unsigned long) n, base);
    6e06:	7b 01       	movw	r14, r22
    6e08:	00 e0       	ldi	r16, 0x00	; 0
    6e0a:	10 e0       	ldi	r17, 0x00	; 0
    6e0c:	b8 01       	movw	r22, r16
    6e0e:	a7 01       	movw	r20, r14
    6e10:	0e 94 ef 36 	call	0x6dde	; 0x6dde <Print::print(unsigned long, int)>
}
    6e14:	1f 91       	pop	r17
    6e16:	0f 91       	pop	r16
    6e18:	ff 90       	pop	r15
    6e1a:	ef 90       	pop	r14
    6e1c:	08 95       	ret

00006e1e <Print::print(unsigned char, int)>:
size_t Print::print(char c)
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
    6e1e:	ef 92       	push	r14
    6e20:	ff 92       	push	r15
    6e22:	0f 93       	push	r16
    6e24:	1f 93       	push	r17
    6e26:	9a 01       	movw	r18, r20
{
  return print((unsigned long) b, base);
    6e28:	e6 2e       	mov	r14, r22
    6e2a:	ff 24       	eor	r15, r15
    6e2c:	00 e0       	ldi	r16, 0x00	; 0
    6e2e:	10 e0       	ldi	r17, 0x00	; 0
    6e30:	b8 01       	movw	r22, r16
    6e32:	a7 01       	movw	r20, r14
    6e34:	0e 94 ef 36 	call	0x6dde	; 0x6dde <Print::print(unsigned long, int)>
}
    6e38:	1f 91       	pop	r17
    6e3a:	0f 91       	pop	r16
    6e3c:	ff 90       	pop	r15
    6e3e:	ef 90       	pop	r14
    6e40:	08 95       	ret

00006e42 <Print::print(long, int)>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
    6e42:	cf 92       	push	r12
    6e44:	df 92       	push	r13
    6e46:	ef 92       	push	r14
    6e48:	ff 92       	push	r15
    6e4a:	0f 93       	push	r16
    6e4c:	1f 93       	push	r17
    6e4e:	cf 93       	push	r28
    6e50:	df 93       	push	r29
    6e52:	ec 01       	movw	r28, r24
    6e54:	6a 01       	movw	r12, r20
    6e56:	7b 01       	movw	r14, r22
{
  if (base == 0) {
    6e58:	21 15       	cp	r18, r1
    6e5a:	31 05       	cpc	r19, r1
    6e5c:	41 f4       	brne	.+16     	; 0x6e6e <Print::print(long, int)+0x2c>
    return write(n);
    6e5e:	e8 81       	ld	r30, Y
    6e60:	f9 81       	ldd	r31, Y+1	; 0x01
    6e62:	01 90       	ld	r0, Z+
    6e64:	f0 81       	ld	r31, Z
    6e66:	e0 2d       	mov	r30, r0
    6e68:	64 2f       	mov	r22, r20
    6e6a:	09 95       	icall
    6e6c:	1f c0       	rjmp	.+62     	; 0x6eac <Print::print(long, int)+0x6a>
  } else if (base == 10) {
    6e6e:	2a 30       	cpi	r18, 0x0A	; 10
    6e70:	31 05       	cpc	r19, r1
    6e72:	d1 f4       	brne	.+52     	; 0x6ea8 <Print::print(long, int)+0x66>
    if (n < 0) {
    6e74:	77 ff       	sbrs	r23, 7
    6e76:	17 c0       	rjmp	.+46     	; 0x6ea6 <Print::print(long, int)+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    6e78:	e8 81       	ld	r30, Y
    6e7a:	f9 81       	ldd	r31, Y+1	; 0x01
    6e7c:	01 90       	ld	r0, Z+
    6e7e:	f0 81       	ld	r31, Z
    6e80:	e0 2d       	mov	r30, r0
    6e82:	6d e2       	ldi	r22, 0x2D	; 45
    6e84:	09 95       	icall
    6e86:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    6e88:	44 27       	eor	r20, r20
    6e8a:	55 27       	eor	r21, r21
    6e8c:	ba 01       	movw	r22, r20
    6e8e:	4c 19       	sub	r20, r12
    6e90:	5d 09       	sbc	r21, r13
    6e92:	6e 09       	sbc	r22, r14
    6e94:	7f 09       	sbc	r23, r15
    6e96:	ce 01       	movw	r24, r28
    6e98:	2a e0       	ldi	r18, 0x0A	; 10
    6e9a:	0e 94 8b 36 	call	0x6d16	; 0x6d16 <Print::printNumber(unsigned long, unsigned char)>
    6e9e:	98 01       	movw	r18, r16
    6ea0:	28 0f       	add	r18, r24
    6ea2:	39 1f       	adc	r19, r25
    6ea4:	04 c0       	rjmp	.+8      	; 0x6eae <Print::print(long, int)+0x6c>
    }
    return printNumber(n, 10);
    6ea6:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    6ea8:	0e 94 8b 36 	call	0x6d16	; 0x6d16 <Print::printNumber(unsigned long, unsigned char)>
    6eac:	9c 01       	movw	r18, r24
  }
}
    6eae:	c9 01       	movw	r24, r18
    6eb0:	df 91       	pop	r29
    6eb2:	cf 91       	pop	r28
    6eb4:	1f 91       	pop	r17
    6eb6:	0f 91       	pop	r16
    6eb8:	ff 90       	pop	r15
    6eba:	ef 90       	pop	r14
    6ebc:	df 90       	pop	r13
    6ebe:	cf 90       	pop	r12
    6ec0:	08 95       	ret

00006ec2 <Print::print(int, int)>:
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
    6ec2:	ef 92       	push	r14
    6ec4:	ff 92       	push	r15
    6ec6:	0f 93       	push	r16
    6ec8:	1f 93       	push	r17
    6eca:	7b 01       	movw	r14, r22
    6ecc:	9a 01       	movw	r18, r20
{
  return print((long) n, base);
    6ece:	00 27       	eor	r16, r16
    6ed0:	f7 fc       	sbrc	r15, 7
    6ed2:	00 95       	com	r16
    6ed4:	10 2f       	mov	r17, r16
    6ed6:	b8 01       	movw	r22, r16
    6ed8:	a7 01       	movw	r20, r14
    6eda:	0e 94 21 37 	call	0x6e42	; 0x6e42 <Print::print(long, int)>
}
    6ede:	1f 91       	pop	r17
    6ee0:	0f 91       	pop	r16
    6ee2:	ff 90       	pop	r15
    6ee4:	ef 90       	pop	r14
    6ee6:	08 95       	ret

00006ee8 <Print::print(char const*)>:
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    6ee8:	0e 94 6f 36 	call	0x6cde	; 0x6cde <Print::write(char const*)>
}
    6eec:	08 95       	ret

00006eee <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    6eee:	1f 92       	push	r1
    6ef0:	0f 92       	push	r0
    6ef2:	0f b6       	in	r0, 0x3f	; 63
    6ef4:	0f 92       	push	r0
    6ef6:	11 24       	eor	r1, r1
    6ef8:	2f 93       	push	r18
    6efa:	3f 93       	push	r19
    6efc:	4f 93       	push	r20
    6efe:	5f 93       	push	r21
    6f00:	6f 93       	push	r22
    6f02:	7f 93       	push	r23
    6f04:	8f 93       	push	r24
    6f06:	9f 93       	push	r25
    6f08:	af 93       	push	r26
    6f0a:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    6f0c:	20 91 62 03 	lds	r18, 0x0362
    6f10:	30 91 63 03 	lds	r19, 0x0363
    6f14:	40 91 64 03 	lds	r20, 0x0364
    6f18:	50 91 65 03 	lds	r21, 0x0365
	unsigned char f = timer0_fract;
    6f1c:	70 91 66 03 	lds	r23, 0x0366

	m += MILLIS_INC;
    6f20:	da 01       	movw	r26, r20
    6f22:	c9 01       	movw	r24, r18
    6f24:	40 96       	adiw	r24, 0x10	; 16
    6f26:	a1 1d       	adc	r26, r1
    6f28:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    6f2a:	67 2f       	mov	r22, r23
    6f2c:	60 5d       	subi	r22, 0xD0	; 208
	if (f >= FRACT_MAX) {
    6f2e:	6d 37       	cpi	r22, 0x7D	; 125
    6f30:	30 f0       	brcs	.+12     	; 0x6f3e <__vector_16+0x50>
		f -= FRACT_MAX;
    6f32:	6d 57       	subi	r22, 0x7D	; 125
		m += 1;
    6f34:	da 01       	movw	r26, r20
    6f36:	c9 01       	movw	r24, r18
    6f38:	41 96       	adiw	r24, 0x11	; 17
    6f3a:	a1 1d       	adc	r26, r1
    6f3c:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    6f3e:	60 93 66 03 	sts	0x0366, r22
	timer0_millis = m;
    6f42:	80 93 62 03 	sts	0x0362, r24
    6f46:	90 93 63 03 	sts	0x0363, r25
    6f4a:	a0 93 64 03 	sts	0x0364, r26
    6f4e:	b0 93 65 03 	sts	0x0365, r27
	timer0_overflow_count++;
    6f52:	80 91 5e 03 	lds	r24, 0x035E
    6f56:	90 91 5f 03 	lds	r25, 0x035F
    6f5a:	a0 91 60 03 	lds	r26, 0x0360
    6f5e:	b0 91 61 03 	lds	r27, 0x0361
    6f62:	01 96       	adiw	r24, 0x01	; 1
    6f64:	a1 1d       	adc	r26, r1
    6f66:	b1 1d       	adc	r27, r1
    6f68:	80 93 5e 03 	sts	0x035E, r24
    6f6c:	90 93 5f 03 	sts	0x035F, r25
    6f70:	a0 93 60 03 	sts	0x0360, r26
    6f74:	b0 93 61 03 	sts	0x0361, r27
}
    6f78:	bf 91       	pop	r27
    6f7a:	af 91       	pop	r26
    6f7c:	9f 91       	pop	r25
    6f7e:	8f 91       	pop	r24
    6f80:	7f 91       	pop	r23
    6f82:	6f 91       	pop	r22
    6f84:	5f 91       	pop	r21
    6f86:	4f 91       	pop	r20
    6f88:	3f 91       	pop	r19
    6f8a:	2f 91       	pop	r18
    6f8c:	0f 90       	pop	r0
    6f8e:	0f be       	out	0x3f, r0	; 63
    6f90:	0f 90       	pop	r0
    6f92:	1f 90       	pop	r1
    6f94:	18 95       	reti

00006f96 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    6f96:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    6f98:	84 b5       	in	r24, 0x24	; 36
    6f9a:	82 60       	ori	r24, 0x02	; 2
    6f9c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    6f9e:	84 b5       	in	r24, 0x24	; 36
    6fa0:	81 60       	ori	r24, 0x01	; 1
    6fa2:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    6fa4:	85 b5       	in	r24, 0x25	; 37
    6fa6:	82 60       	ori	r24, 0x02	; 2
    6fa8:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    6faa:	85 b5       	in	r24, 0x25	; 37
    6fac:	81 60       	ori	r24, 0x01	; 1
    6fae:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    6fb0:	ee e6       	ldi	r30, 0x6E	; 110
    6fb2:	f0 e0       	ldi	r31, 0x00	; 0
    6fb4:	80 81       	ld	r24, Z
    6fb6:	81 60       	ori	r24, 0x01	; 1
    6fb8:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    6fba:	e1 e8       	ldi	r30, 0x81	; 129
    6fbc:	f0 e0       	ldi	r31, 0x00	; 0
    6fbe:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    6fc0:	80 81       	ld	r24, Z
    6fc2:	82 60       	ori	r24, 0x02	; 2
    6fc4:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    6fc6:	e0 e8       	ldi	r30, 0x80	; 128
    6fc8:	f0 e0       	ldi	r31, 0x00	; 0
    6fca:	80 81       	ld	r24, Z
    6fcc:	81 60       	ori	r24, 0x01	; 1
    6fce:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    6fd0:	e1 eb       	ldi	r30, 0xB1	; 177
    6fd2:	f0 e0       	ldi	r31, 0x00	; 0
    6fd4:	80 81       	ld	r24, Z
    6fd6:	84 60       	ori	r24, 0x04	; 4
    6fd8:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    6fda:	e0 eb       	ldi	r30, 0xB0	; 176
    6fdc:	f0 e0       	ldi	r31, 0x00	; 0
    6fde:	80 81       	ld	r24, Z
    6fe0:	81 60       	ori	r24, 0x01	; 1
    6fe2:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    6fe4:	ea e7       	ldi	r30, 0x7A	; 122
    6fe6:	f0 e0       	ldi	r31, 0x00	; 0
    6fe8:	80 81       	ld	r24, Z
    6fea:	84 60       	ori	r24, 0x04	; 4
    6fec:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    6fee:	80 81       	ld	r24, Z
    6ff0:	82 60       	ori	r24, 0x02	; 2
    6ff2:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    6ff4:	80 81       	ld	r24, Z
    6ff6:	81 60       	ori	r24, 0x01	; 1
    6ff8:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    6ffa:	80 81       	ld	r24, Z
    6ffc:	80 68       	ori	r24, 0x80	; 128
    6ffe:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    7000:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    7004:	08 95       	ret

00007006 <__fixunssfsi>:
    7006:	b3 d0       	rcall	.+358    	; 0x716e <__fp_splitA>
    7008:	88 f0       	brcs	.+34     	; 0x702c <__fixunssfsi+0x26>
    700a:	9f 57       	subi	r25, 0x7F	; 127
    700c:	90 f0       	brcs	.+36     	; 0x7032 <__fixunssfsi+0x2c>
    700e:	b9 2f       	mov	r27, r25
    7010:	99 27       	eor	r25, r25
    7012:	b7 51       	subi	r27, 0x17	; 23
    7014:	a0 f0       	brcs	.+40     	; 0x703e <__fixunssfsi+0x38>
    7016:	d1 f0       	breq	.+52     	; 0x704c <__fixunssfsi+0x46>
    7018:	66 0f       	add	r22, r22
    701a:	77 1f       	adc	r23, r23
    701c:	88 1f       	adc	r24, r24
    701e:	99 1f       	adc	r25, r25
    7020:	1a f0       	brmi	.+6      	; 0x7028 <__fixunssfsi+0x22>
    7022:	ba 95       	dec	r27
    7024:	c9 f7       	brne	.-14     	; 0x7018 <__fixunssfsi+0x12>
    7026:	12 c0       	rjmp	.+36     	; 0x704c <__fixunssfsi+0x46>
    7028:	b1 30       	cpi	r27, 0x01	; 1
    702a:	81 f0       	breq	.+32     	; 0x704c <__fixunssfsi+0x46>
    702c:	ba d0       	rcall	.+372    	; 0x71a2 <__fp_zero>
    702e:	b1 e0       	ldi	r27, 0x01	; 1
    7030:	08 95       	ret
    7032:	b7 c0       	rjmp	.+366    	; 0x71a2 <__fp_zero>
    7034:	67 2f       	mov	r22, r23
    7036:	78 2f       	mov	r23, r24
    7038:	88 27       	eor	r24, r24
    703a:	b8 5f       	subi	r27, 0xF8	; 248
    703c:	39 f0       	breq	.+14     	; 0x704c <__fixunssfsi+0x46>
    703e:	b9 3f       	cpi	r27, 0xF9	; 249
    7040:	cc f3       	brlt	.-14     	; 0x7034 <__fixunssfsi+0x2e>
    7042:	86 95       	lsr	r24
    7044:	77 95       	ror	r23
    7046:	67 95       	ror	r22
    7048:	b3 95       	inc	r27
    704a:	d9 f7       	brne	.-10     	; 0x7042 <__fixunssfsi+0x3c>
    704c:	3e f4       	brtc	.+14     	; 0x705c <__fixunssfsi+0x56>
    704e:	90 95       	com	r25
    7050:	80 95       	com	r24
    7052:	70 95       	com	r23
    7054:	61 95       	neg	r22
    7056:	7f 4f       	sbci	r23, 0xFF	; 255
    7058:	8f 4f       	sbci	r24, 0xFF	; 255
    705a:	9f 4f       	sbci	r25, 0xFF	; 255
    705c:	08 95       	ret

0000705e <__floatunsisf>:
    705e:	e8 94       	clt
    7060:	09 c0       	rjmp	.+18     	; 0x7074 <__floatsisf+0x12>

00007062 <__floatsisf>:
    7062:	97 fb       	bst	r25, 7
    7064:	3e f4       	brtc	.+14     	; 0x7074 <__floatsisf+0x12>
    7066:	90 95       	com	r25
    7068:	80 95       	com	r24
    706a:	70 95       	com	r23
    706c:	61 95       	neg	r22
    706e:	7f 4f       	sbci	r23, 0xFF	; 255
    7070:	8f 4f       	sbci	r24, 0xFF	; 255
    7072:	9f 4f       	sbci	r25, 0xFF	; 255
    7074:	99 23       	and	r25, r25
    7076:	a9 f0       	breq	.+42     	; 0x70a2 <__floatsisf+0x40>
    7078:	f9 2f       	mov	r31, r25
    707a:	96 e9       	ldi	r25, 0x96	; 150
    707c:	bb 27       	eor	r27, r27
    707e:	93 95       	inc	r25
    7080:	f6 95       	lsr	r31
    7082:	87 95       	ror	r24
    7084:	77 95       	ror	r23
    7086:	67 95       	ror	r22
    7088:	b7 95       	ror	r27
    708a:	f1 11       	cpse	r31, r1
    708c:	f8 cf       	rjmp	.-16     	; 0x707e <__floatsisf+0x1c>
    708e:	fa f4       	brpl	.+62     	; 0x70ce <__floatsisf+0x6c>
    7090:	bb 0f       	add	r27, r27
    7092:	11 f4       	brne	.+4      	; 0x7098 <__floatsisf+0x36>
    7094:	60 ff       	sbrs	r22, 0
    7096:	1b c0       	rjmp	.+54     	; 0x70ce <__floatsisf+0x6c>
    7098:	6f 5f       	subi	r22, 0xFF	; 255
    709a:	7f 4f       	sbci	r23, 0xFF	; 255
    709c:	8f 4f       	sbci	r24, 0xFF	; 255
    709e:	9f 4f       	sbci	r25, 0xFF	; 255
    70a0:	16 c0       	rjmp	.+44     	; 0x70ce <__floatsisf+0x6c>
    70a2:	88 23       	and	r24, r24
    70a4:	11 f0       	breq	.+4      	; 0x70aa <__floatsisf+0x48>
    70a6:	96 e9       	ldi	r25, 0x96	; 150
    70a8:	11 c0       	rjmp	.+34     	; 0x70cc <__floatsisf+0x6a>
    70aa:	77 23       	and	r23, r23
    70ac:	21 f0       	breq	.+8      	; 0x70b6 <__floatsisf+0x54>
    70ae:	9e e8       	ldi	r25, 0x8E	; 142
    70b0:	87 2f       	mov	r24, r23
    70b2:	76 2f       	mov	r23, r22
    70b4:	05 c0       	rjmp	.+10     	; 0x70c0 <__floatsisf+0x5e>
    70b6:	66 23       	and	r22, r22
    70b8:	71 f0       	breq	.+28     	; 0x70d6 <__floatsisf+0x74>
    70ba:	96 e8       	ldi	r25, 0x86	; 134
    70bc:	86 2f       	mov	r24, r22
    70be:	70 e0       	ldi	r23, 0x00	; 0
    70c0:	60 e0       	ldi	r22, 0x00	; 0
    70c2:	2a f0       	brmi	.+10     	; 0x70ce <__floatsisf+0x6c>
    70c4:	9a 95       	dec	r25
    70c6:	66 0f       	add	r22, r22
    70c8:	77 1f       	adc	r23, r23
    70ca:	88 1f       	adc	r24, r24
    70cc:	da f7       	brpl	.-10     	; 0x70c4 <__floatsisf+0x62>
    70ce:	88 0f       	add	r24, r24
    70d0:	96 95       	lsr	r25
    70d2:	87 95       	ror	r24
    70d4:	97 f9       	bld	r25, 7
    70d6:	08 95       	ret

000070d8 <fmax>:
    70d8:	99 0f       	add	r25, r25
    70da:	bb 0b       	sbc	r27, r27
    70dc:	55 0f       	add	r21, r21
    70de:	aa 0b       	sbc	r26, r26
    70e0:	e0 e8       	ldi	r30, 0x80	; 128
    70e2:	fe ef       	ldi	r31, 0xFE	; 254
    70e4:	16 16       	cp	r1, r22
    70e6:	17 06       	cpc	r1, r23
    70e8:	e8 07       	cpc	r30, r24
    70ea:	f9 07       	cpc	r31, r25
    70ec:	70 f0       	brcs	.+28     	; 0x710a <fmax+0x32>
    70ee:	12 16       	cp	r1, r18
    70f0:	13 06       	cpc	r1, r19
    70f2:	e4 07       	cpc	r30, r20
    70f4:	f5 07       	cpc	r31, r21
    70f6:	60 f0       	brcs	.+24     	; 0x7110 <fmax+0x38>
    70f8:	ba 17       	cp	r27, r26
    70fa:	3c f0       	brlt	.+14     	; 0x710a <fmax+0x32>
    70fc:	49 f4       	brne	.+18     	; 0x7110 <fmax+0x38>
    70fe:	62 17       	cp	r22, r18
    7100:	73 07       	cpc	r23, r19
    7102:	84 07       	cpc	r24, r20
    7104:	95 07       	cpc	r25, r21
    7106:	a7 95       	ror	r26
    7108:	1b f4       	brvc	.+6      	; 0x7110 <fmax+0x38>
    710a:	b9 01       	movw	r22, r18
    710c:	ca 01       	movw	r24, r20
    710e:	ba 2f       	mov	r27, r26
    7110:	b6 95       	lsr	r27
    7112:	97 95       	ror	r25
    7114:	08 95       	ret

00007116 <__fp_cmp>:
    7116:	99 0f       	add	r25, r25
    7118:	00 08       	sbc	r0, r0
    711a:	55 0f       	add	r21, r21
    711c:	aa 0b       	sbc	r26, r26
    711e:	e0 e8       	ldi	r30, 0x80	; 128
    7120:	fe ef       	ldi	r31, 0xFE	; 254
    7122:	16 16       	cp	r1, r22
    7124:	17 06       	cpc	r1, r23
    7126:	e8 07       	cpc	r30, r24
    7128:	f9 07       	cpc	r31, r25
    712a:	c0 f0       	brcs	.+48     	; 0x715c <__fp_cmp+0x46>
    712c:	12 16       	cp	r1, r18
    712e:	13 06       	cpc	r1, r19
    7130:	e4 07       	cpc	r30, r20
    7132:	f5 07       	cpc	r31, r21
    7134:	98 f0       	brcs	.+38     	; 0x715c <__fp_cmp+0x46>
    7136:	62 1b       	sub	r22, r18
    7138:	73 0b       	sbc	r23, r19
    713a:	84 0b       	sbc	r24, r20
    713c:	95 0b       	sbc	r25, r21
    713e:	39 f4       	brne	.+14     	; 0x714e <__fp_cmp+0x38>
    7140:	0a 26       	eor	r0, r26
    7142:	61 f0       	breq	.+24     	; 0x715c <__fp_cmp+0x46>
    7144:	23 2b       	or	r18, r19
    7146:	24 2b       	or	r18, r20
    7148:	25 2b       	or	r18, r21
    714a:	21 f4       	brne	.+8      	; 0x7154 <__fp_cmp+0x3e>
    714c:	08 95       	ret
    714e:	0a 26       	eor	r0, r26
    7150:	09 f4       	brne	.+2      	; 0x7154 <__fp_cmp+0x3e>
    7152:	a1 40       	sbci	r26, 0x01	; 1
    7154:	a6 95       	lsr	r26
    7156:	8f ef       	ldi	r24, 0xFF	; 255
    7158:	81 1d       	adc	r24, r1
    715a:	81 1d       	adc	r24, r1
    715c:	08 95       	ret

0000715e <__fp_split3>:
    715e:	57 fd       	sbrc	r21, 7
    7160:	90 58       	subi	r25, 0x80	; 128
    7162:	44 0f       	add	r20, r20
    7164:	55 1f       	adc	r21, r21
    7166:	59 f0       	breq	.+22     	; 0x717e <__fp_splitA+0x10>
    7168:	5f 3f       	cpi	r21, 0xFF	; 255
    716a:	71 f0       	breq	.+28     	; 0x7188 <__fp_splitA+0x1a>
    716c:	47 95       	ror	r20

0000716e <__fp_splitA>:
    716e:	88 0f       	add	r24, r24
    7170:	97 fb       	bst	r25, 7
    7172:	99 1f       	adc	r25, r25
    7174:	61 f0       	breq	.+24     	; 0x718e <__fp_splitA+0x20>
    7176:	9f 3f       	cpi	r25, 0xFF	; 255
    7178:	79 f0       	breq	.+30     	; 0x7198 <__fp_splitA+0x2a>
    717a:	87 95       	ror	r24
    717c:	08 95       	ret
    717e:	12 16       	cp	r1, r18
    7180:	13 06       	cpc	r1, r19
    7182:	14 06       	cpc	r1, r20
    7184:	55 1f       	adc	r21, r21
    7186:	f2 cf       	rjmp	.-28     	; 0x716c <__fp_split3+0xe>
    7188:	46 95       	lsr	r20
    718a:	f1 df       	rcall	.-30     	; 0x716e <__fp_splitA>
    718c:	08 c0       	rjmp	.+16     	; 0x719e <__fp_splitA+0x30>
    718e:	16 16       	cp	r1, r22
    7190:	17 06       	cpc	r1, r23
    7192:	18 06       	cpc	r1, r24
    7194:	99 1f       	adc	r25, r25
    7196:	f1 cf       	rjmp	.-30     	; 0x717a <__fp_splitA+0xc>
    7198:	86 95       	lsr	r24
    719a:	71 05       	cpc	r23, r1
    719c:	61 05       	cpc	r22, r1
    719e:	08 94       	sec
    71a0:	08 95       	ret

000071a2 <__fp_zero>:
    71a2:	e8 94       	clt

000071a4 <__fp_szero>:
    71a4:	bb 27       	eor	r27, r27
    71a6:	66 27       	eor	r22, r22
    71a8:	77 27       	eor	r23, r23
    71aa:	cb 01       	movw	r24, r22
    71ac:	97 f9       	bld	r25, 7
    71ae:	08 95       	ret

000071b0 <__gesf2>:
    71b0:	b2 df       	rcall	.-156    	; 0x7116 <__fp_cmp>
    71b2:	08 f4       	brcc	.+2      	; 0x71b6 <__gesf2+0x6>
    71b4:	8f ef       	ldi	r24, 0xFF	; 255
    71b6:	08 95       	ret

000071b8 <__mulsi3>:
    71b8:	62 9f       	mul	r22, r18
    71ba:	d0 01       	movw	r26, r0
    71bc:	73 9f       	mul	r23, r19
    71be:	f0 01       	movw	r30, r0
    71c0:	82 9f       	mul	r24, r18
    71c2:	e0 0d       	add	r30, r0
    71c4:	f1 1d       	adc	r31, r1
    71c6:	64 9f       	mul	r22, r20
    71c8:	e0 0d       	add	r30, r0
    71ca:	f1 1d       	adc	r31, r1
    71cc:	92 9f       	mul	r25, r18
    71ce:	f0 0d       	add	r31, r0
    71d0:	83 9f       	mul	r24, r19
    71d2:	f0 0d       	add	r31, r0
    71d4:	74 9f       	mul	r23, r20
    71d6:	f0 0d       	add	r31, r0
    71d8:	65 9f       	mul	r22, r21
    71da:	f0 0d       	add	r31, r0
    71dc:	99 27       	eor	r25, r25
    71de:	72 9f       	mul	r23, r18
    71e0:	b0 0d       	add	r27, r0
    71e2:	e1 1d       	adc	r30, r1
    71e4:	f9 1f       	adc	r31, r25
    71e6:	63 9f       	mul	r22, r19
    71e8:	b0 0d       	add	r27, r0
    71ea:	e1 1d       	adc	r30, r1
    71ec:	f9 1f       	adc	r31, r25
    71ee:	bd 01       	movw	r22, r26
    71f0:	cf 01       	movw	r24, r30
    71f2:	11 24       	eor	r1, r1
    71f4:	08 95       	ret

000071f6 <__udivmodhi4>:
    71f6:	aa 1b       	sub	r26, r26
    71f8:	bb 1b       	sub	r27, r27
    71fa:	51 e1       	ldi	r21, 0x11	; 17
    71fc:	07 c0       	rjmp	.+14     	; 0x720c <__udivmodhi4_ep>

000071fe <__udivmodhi4_loop>:
    71fe:	aa 1f       	adc	r26, r26
    7200:	bb 1f       	adc	r27, r27
    7202:	a6 17       	cp	r26, r22
    7204:	b7 07       	cpc	r27, r23
    7206:	10 f0       	brcs	.+4      	; 0x720c <__udivmodhi4_ep>
    7208:	a6 1b       	sub	r26, r22
    720a:	b7 0b       	sbc	r27, r23

0000720c <__udivmodhi4_ep>:
    720c:	88 1f       	adc	r24, r24
    720e:	99 1f       	adc	r25, r25
    7210:	5a 95       	dec	r21
    7212:	a9 f7       	brne	.-22     	; 0x71fe <__udivmodhi4_loop>
    7214:	80 95       	com	r24
    7216:	90 95       	com	r25
    7218:	bc 01       	movw	r22, r24
    721a:	cd 01       	movw	r24, r26
    721c:	08 95       	ret

0000721e <__divmodhi4>:
    721e:	97 fb       	bst	r25, 7
    7220:	09 2e       	mov	r0, r25
    7222:	07 26       	eor	r0, r23
    7224:	0a d0       	rcall	.+20     	; 0x723a <__divmodhi4_neg1>
    7226:	77 fd       	sbrc	r23, 7
    7228:	04 d0       	rcall	.+8      	; 0x7232 <__divmodhi4_neg2>
    722a:	e5 df       	rcall	.-54     	; 0x71f6 <__udivmodhi4>
    722c:	06 d0       	rcall	.+12     	; 0x723a <__divmodhi4_neg1>
    722e:	00 20       	and	r0, r0
    7230:	1a f4       	brpl	.+6      	; 0x7238 <__divmodhi4_exit>

00007232 <__divmodhi4_neg2>:
    7232:	70 95       	com	r23
    7234:	61 95       	neg	r22
    7236:	7f 4f       	sbci	r23, 0xFF	; 255

00007238 <__divmodhi4_exit>:
    7238:	08 95       	ret

0000723a <__divmodhi4_neg1>:
    723a:	f6 f7       	brtc	.-4      	; 0x7238 <__divmodhi4_exit>
    723c:	90 95       	com	r25
    723e:	81 95       	neg	r24
    7240:	9f 4f       	sbci	r25, 0xFF	; 255
    7242:	08 95       	ret

00007244 <__udivmodsi4>:
    7244:	a1 e2       	ldi	r26, 0x21	; 33
    7246:	1a 2e       	mov	r1, r26
    7248:	aa 1b       	sub	r26, r26
    724a:	bb 1b       	sub	r27, r27
    724c:	fd 01       	movw	r30, r26
    724e:	0d c0       	rjmp	.+26     	; 0x726a <__udivmodsi4_ep>

00007250 <__udivmodsi4_loop>:
    7250:	aa 1f       	adc	r26, r26
    7252:	bb 1f       	adc	r27, r27
    7254:	ee 1f       	adc	r30, r30
    7256:	ff 1f       	adc	r31, r31
    7258:	a2 17       	cp	r26, r18
    725a:	b3 07       	cpc	r27, r19
    725c:	e4 07       	cpc	r30, r20
    725e:	f5 07       	cpc	r31, r21
    7260:	20 f0       	brcs	.+8      	; 0x726a <__udivmodsi4_ep>
    7262:	a2 1b       	sub	r26, r18
    7264:	b3 0b       	sbc	r27, r19
    7266:	e4 0b       	sbc	r30, r20
    7268:	f5 0b       	sbc	r31, r21

0000726a <__udivmodsi4_ep>:
    726a:	66 1f       	adc	r22, r22
    726c:	77 1f       	adc	r23, r23
    726e:	88 1f       	adc	r24, r24
    7270:	99 1f       	adc	r25, r25
    7272:	1a 94       	dec	r1
    7274:	69 f7       	brne	.-38     	; 0x7250 <__udivmodsi4_loop>
    7276:	60 95       	com	r22
    7278:	70 95       	com	r23
    727a:	80 95       	com	r24
    727c:	90 95       	com	r25
    727e:	9b 01       	movw	r18, r22
    7280:	ac 01       	movw	r20, r24
    7282:	bd 01       	movw	r22, r26
    7284:	cf 01       	movw	r24, r30
    7286:	08 95       	ret

00007288 <__divmodsi4>:
    7288:	97 fb       	bst	r25, 7
    728a:	09 2e       	mov	r0, r25
    728c:	05 26       	eor	r0, r21
    728e:	0e d0       	rcall	.+28     	; 0x72ac <__divmodsi4_neg1>
    7290:	57 fd       	sbrc	r21, 7
    7292:	04 d0       	rcall	.+8      	; 0x729c <__divmodsi4_neg2>
    7294:	d7 df       	rcall	.-82     	; 0x7244 <__udivmodsi4>
    7296:	0a d0       	rcall	.+20     	; 0x72ac <__divmodsi4_neg1>
    7298:	00 1c       	adc	r0, r0
    729a:	38 f4       	brcc	.+14     	; 0x72aa <__divmodsi4_exit>

0000729c <__divmodsi4_neg2>:
    729c:	50 95       	com	r21
    729e:	40 95       	com	r20
    72a0:	30 95       	com	r19
    72a2:	21 95       	neg	r18
    72a4:	3f 4f       	sbci	r19, 0xFF	; 255
    72a6:	4f 4f       	sbci	r20, 0xFF	; 255
    72a8:	5f 4f       	sbci	r21, 0xFF	; 255

000072aa <__divmodsi4_exit>:
    72aa:	08 95       	ret

000072ac <__divmodsi4_neg1>:
    72ac:	f6 f7       	brtc	.-4      	; 0x72aa <__divmodsi4_exit>
    72ae:	90 95       	com	r25
    72b0:	80 95       	com	r24
    72b2:	70 95       	com	r23
    72b4:	61 95       	neg	r22
    72b6:	7f 4f       	sbci	r23, 0xFF	; 255
    72b8:	8f 4f       	sbci	r24, 0xFF	; 255
    72ba:	9f 4f       	sbci	r25, 0xFF	; 255
    72bc:	08 95       	ret

000072be <__tablejump2__>:
    72be:	ee 0f       	add	r30, r30
    72c0:	ff 1f       	adc	r31, r31

000072c2 <__tablejump__>:
    72c2:	05 90       	lpm	r0, Z+
    72c4:	f4 91       	lpm	r31, Z+
    72c6:	e0 2d       	mov	r30, r0
    72c8:	09 94       	ijmp

000072ca <toupper>:
    72ca:	91 11       	cpse	r25, r1
    72cc:	08 95       	ret
    72ce:	81 56       	subi	r24, 0x61	; 97
    72d0:	8a 51       	subi	r24, 0x1A	; 26
    72d2:	08 f4       	brcc	.+2      	; 0x72d6 <toupper+0xc>
    72d4:	80 52       	subi	r24, 0x20	; 32
    72d6:	85 58       	subi	r24, 0x85	; 133
    72d8:	08 95       	ret

000072da <__prologue_saves__>:
    72da:	2f 92       	push	r2
    72dc:	3f 92       	push	r3
    72de:	4f 92       	push	r4
    72e0:	5f 92       	push	r5
    72e2:	6f 92       	push	r6
    72e4:	7f 92       	push	r7
    72e6:	8f 92       	push	r8
    72e8:	9f 92       	push	r9
    72ea:	af 92       	push	r10
    72ec:	bf 92       	push	r11
    72ee:	cf 92       	push	r12
    72f0:	df 92       	push	r13
    72f2:	ef 92       	push	r14
    72f4:	ff 92       	push	r15
    72f6:	0f 93       	push	r16
    72f8:	1f 93       	push	r17
    72fa:	cf 93       	push	r28
    72fc:	df 93       	push	r29
    72fe:	cd b7       	in	r28, 0x3d	; 61
    7300:	de b7       	in	r29, 0x3e	; 62
    7302:	ca 1b       	sub	r28, r26
    7304:	db 0b       	sbc	r29, r27
    7306:	0f b6       	in	r0, 0x3f	; 63
    7308:	f8 94       	cli
    730a:	de bf       	out	0x3e, r29	; 62
    730c:	0f be       	out	0x3f, r0	; 63
    730e:	cd bf       	out	0x3d, r28	; 61
    7310:	09 94       	ijmp

00007312 <__epilogue_restores__>:
    7312:	2a 88       	ldd	r2, Y+18	; 0x12
    7314:	39 88       	ldd	r3, Y+17	; 0x11
    7316:	48 88       	ldd	r4, Y+16	; 0x10
    7318:	5f 84       	ldd	r5, Y+15	; 0x0f
    731a:	6e 84       	ldd	r6, Y+14	; 0x0e
    731c:	7d 84       	ldd	r7, Y+13	; 0x0d
    731e:	8c 84       	ldd	r8, Y+12	; 0x0c
    7320:	9b 84       	ldd	r9, Y+11	; 0x0b
    7322:	aa 84       	ldd	r10, Y+10	; 0x0a
    7324:	b9 84       	ldd	r11, Y+9	; 0x09
    7326:	c8 84       	ldd	r12, Y+8	; 0x08
    7328:	df 80       	ldd	r13, Y+7	; 0x07
    732a:	ee 80       	ldd	r14, Y+6	; 0x06
    732c:	fd 80       	ldd	r15, Y+5	; 0x05
    732e:	0c 81       	ldd	r16, Y+4	; 0x04
    7330:	1b 81       	ldd	r17, Y+3	; 0x03
    7332:	aa 81       	ldd	r26, Y+2	; 0x02
    7334:	b9 81       	ldd	r27, Y+1	; 0x01
    7336:	ce 0f       	add	r28, r30
    7338:	d1 1d       	adc	r29, r1
    733a:	0f b6       	in	r0, 0x3f	; 63
    733c:	f8 94       	cli
    733e:	de bf       	out	0x3e, r29	; 62
    7340:	0f be       	out	0x3f, r0	; 63
    7342:	cd bf       	out	0x3d, r28	; 61
    7344:	ed 01       	movw	r28, r26
    7346:	08 95       	ret

00007348 <_exit>:
    7348:	f8 94       	cli

0000734a <__stop_program>:
    734a:	ff cf       	rjmp	.-2      	; 0x734a <__stop_program>
