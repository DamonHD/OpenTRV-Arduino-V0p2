
/var/folders/km/s_tzntf16nzg5bdh5n6g6lz40000gn/T/build7039417699694643432.tmp/test.cpp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  00000cda  00000d6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cda  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b5  0080014a  0080014a  00000db8  2**0
                  ALLOC
  3 .debug_aranges 000005e0  00000000  00000000  00000db8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000f31  00000000  00000000  00001398  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000074f1  00000000  00000000  000022c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000155a  00000000  00000000  000097ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003eab  00000000  00000000  0000ad14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000a80  00000000  00000000  0000ebc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002641  00000000  00000000  0000f640  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003c95  00000000  00000000  00011c81  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 0001315b  00000000  00000000  00015916  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005a8  00000000  00000000  00028a71  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

            // Begin access to (initialise) this radio link if applicable and not already begun.
            // Returns true if it needed to be begun.
            // Allows logic to end() if required at the end of a block, etc.
            // Defaults to do nothing (and return false).
            virtual bool begin() { return(false); }
   0:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__ctors_end>
	timer0_millis = m;
	timer0_overflow_count++;
}

unsigned long millis()
{
   4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
   8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
   c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  40:	0c 94 d5 01 	jmp	0x3aa	; 0x3aa <__vector_16>
  44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  48:	0c 94 bb 02 	jmp	0x576	; 0x576 <__vector_18>
  4c:	0c 94 09 03 	jmp	0x612	; 0x612 <__vector_19>
  50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

00000068 <loop::__c>:
  68:	25 25 25 20 41 6c 6c 20 74 65 73 74 73 20 63 6f     %%% All tests co
  78:	6d 70 6c 65 74 65 64 20 4f 4b 2c 20 72 6f 75 6e     mpleted OK, roun
  88:	64 20 00                                            d .

0000008b <loop::__c>:
  8b:	54 65 73 74 73 20 73 74 61 72 74 69 6e 67 2e 2e     Tests starting..
  9b:	2e 20 00                                            . .

0000009e <error(int, int)::__c>:
  9e:	20 61 74 20 6c 69 6e 65 20 00                        at line .

000000a8 <error(int, int)::__c>:
  a8:	20 3d 30 78 00                                       =0x.

000000ad <error(int, int)::__c>:
  ad:	2a 2a 2a 54 65 73 74 20 46 41 49 4c 45 44 2a 2a     ***Test FAILED**
  bd:	2a 20 76 61 6c 3d 00                                * val=.

000000c4 <__ctors_start>:
  c4:	6c 04       	cpc	r6, r12

000000c6 <__ctors_end>:
  c6:	11 24       	eor	r1, r1
  c8:	1f be       	out	0x3f, r1	; 63
  ca:	cf ef       	ldi	r28, 0xFF	; 255
  cc:	d8 e0       	ldi	r29, 0x08	; 8
  ce:	de bf       	out	0x3e, r29	; 62
  d0:	cd bf       	out	0x3d, r28	; 61

000000d2 <__do_copy_data>:
  d2:	11 e0       	ldi	r17, 0x01	; 1
  d4:	a0 e0       	ldi	r26, 0x00	; 0
  d6:	b1 e0       	ldi	r27, 0x01	; 1
  d8:	ea ed       	ldi	r30, 0xDA	; 218
  da:	fc e0       	ldi	r31, 0x0C	; 12
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <.do_copy_data_start>

000000de <.do_copy_data_loop>:
  de:	05 90       	lpm	r0, Z+
  e0:	0d 92       	st	X+, r0

000000e2 <.do_copy_data_start>:
  e2:	aa 34       	cpi	r26, 0x4A	; 74
  e4:	b1 07       	cpc	r27, r17
  e6:	d9 f7       	brne	.-10     	; 0xde <.do_copy_data_loop>

000000e8 <__do_clear_bss>:
  e8:	11 e0       	ldi	r17, 0x01	; 1
  ea:	aa e4       	ldi	r26, 0x4A	; 74
  ec:	b1 e0       	ldi	r27, 0x01	; 1
  ee:	01 c0       	rjmp	.+2      	; 0xf2 <.do_clear_bss_start>

000000f0 <.do_clear_bss_loop>:
  f0:	1d 92       	st	X+, r1

000000f2 <.do_clear_bss_start>:
  f2:	af 3f       	cpi	r26, 0xFF	; 255
  f4:	b1 07       	cpc	r27, r17
  f6:	e1 f7       	brne	.-8      	; 0xf0 <.do_clear_bss_loop>

000000f8 <__do_global_ctors>:
  f8:	10 e0       	ldi	r17, 0x00	; 0
  fa:	c6 ec       	ldi	r28, 0xC6	; 198
  fc:	d0 e0       	ldi	r29, 0x00	; 0
  fe:	04 c0       	rjmp	.+8      	; 0x108 <.do_global_ctors_start>

00000100 <.do_global_ctors_loop>:
 100:	22 97       	sbiw	r28, 0x02	; 2
 102:	fe 01       	movw	r30, r28
 104:	0e 94 67 06 	call	0xcce	; 0xcce <__tablejump__>

00000108 <.do_global_ctors_start>:
 108:	c4 3c       	cpi	r28, 0xC4	; 196
 10a:	d1 07       	cpc	r29, r17
 10c:	c9 f7       	brne	.-14     	; 0x100 <.do_global_ctors_loop>
 10e:	0e 94 c2 04 	call	0x984	; 0x984 <main>
 112:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <_exit>

00000116 <__bad_interrupt>:
 116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <OTRadioLink::OTRadioLink::isAvailable() const>:

            // Returns true if this radio link is currently available.
            // True by default unless implementation overrides.
            // For those radios that need starting this will be false before begin().
            virtual bool isAvailable() const { return(true); }
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	08 95       	ret

0000011e <OTRadioLink::OTRadioLink::getRXRerr()>:

            // Returns the current receive error state; 0 indicates no error, +ve is the error value.
            // RX errors may be queued with depth greater than one,
            // or only the last RX error may be retained.
            // Higher-numbered error states may be more severe.
            virtual uint8_t getRXRerr() { return(0); }
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	08 95       	ret

00000122 <OTRFM23BLink::OTRFM23BLink<(unsigned char)10>::preinit(void const*)>:
        {
        private:
            // Internal routines to enable/disable RFM23B on the the SPI bus.
            // These depend only on the (constant) SPI_nSS_DigitalPin template parameter
            // so these should turn into single assembler instructions in principle.
            inline void _SELECT() { fastDigitalWrite(SPI_nSS_DigitalPin, LOW); } // Select/enable RFM23B.
 122:	2a 98       	cbi	0x05, 2	; 5
            inline uint8_t _io(const uint8_t data) { SPDR = data; while (!(SPSR & _BV(SPIF))) { } return(SPDR); }
            // Write one byte over SPI (ignoring the value read back).
            // SPI must already be configured and running.
            // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
            // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
            inline void _wr(const uint8_t data) { SPDR = data; while (!(SPSR & _BV(SPIF))) { } }
 124:	88 e8       	ldi	r24, 0x88	; 136
 126:	8e bd       	out	0x2e, r24	; 46
 128:	0d b4       	in	r0, 0x2d	; 45
 12a:	07 fe       	sbrs	r0, 7
 12c:	fd cf       	rjmp	.-6      	; 0x128 <OTRFM23BLink::OTRFM23BLink<(unsigned char)10>::preinit(void const*)+0x6>
        private:
            // Internal routines to enable/disable RFM23B on the the SPI bus.
            // These depend only on the (constant) SPI_nSS_DigitalPin template parameter
            // so these should turn into single assembler instructions in principle.
            inline void _SELECT() { fastDigitalWrite(SPI_nSS_DigitalPin, LOW); } // Select/enable RFM23B.
            inline void _DESELECT() { fastDigitalWrite(SPI_nSS_DigitalPin, HIGH); } // Deselect/disable RFM23B.
 12e:	83 e0       	ldi	r24, 0x03	; 3
 130:	8e bd       	out	0x2e, r24	; 46
 132:	0d b4       	in	r0, 0x2d	; 45
 134:	07 fe       	sbrs	r0, 7
 136:	fd cf       	rjmp	.-6      	; 0x132 <OTRFM23BLink::OTRFM23BLink<(unsigned char)10>::preinit(void const*)+0x10>
 138:	2a 9a       	sbi	0x05, 2	; 5
        {
        private:
            // Internal routines to enable/disable RFM23B on the the SPI bus.
            // These depend only on the (constant) SPI_nSS_DigitalPin template parameter
            // so these should turn into single assembler instructions in principle.
            inline void _SELECT() { fastDigitalWrite(SPI_nSS_DigitalPin, LOW); } // Select/enable RFM23B.
 13a:	2a 98       	cbi	0x05, 2	; 5
            inline uint8_t _io(const uint8_t data) { SPDR = data; while (!(SPSR & _BV(SPIF))) { } return(SPDR); }
            // Write one byte over SPI (ignoring the value read back).
            // SPI must already be configured and running.
            // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
            // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
            inline void _wr(const uint8_t data) { SPDR = data; while (!(SPSR & _BV(SPIF))) { } }
 13c:	88 e8       	ldi	r24, 0x88	; 136
 13e:	8e bd       	out	0x2e, r24	; 46
 140:	0d b4       	in	r0, 0x2d	; 45
 142:	07 fe       	sbrs	r0, 7
 144:	fd cf       	rjmp	.-6      	; 0x140 <OTRFM23BLink::OTRFM23BLink<(unsigned char)10>::preinit(void const*)+0x1e>
        private:
            // Internal routines to enable/disable RFM23B on the the SPI bus.
            // These depend only on the (constant) SPI_nSS_DigitalPin template parameter
            // so these should turn into single assembler instructions in principle.
            inline void _SELECT() { fastDigitalWrite(SPI_nSS_DigitalPin, LOW); } // Select/enable RFM23B.
            inline void _DESELECT() { fastDigitalWrite(SPI_nSS_DigitalPin, HIGH); } // Deselect/disable RFM23B.
 146:	1e bc       	out	0x2e, r1	; 46
 148:	0d b4       	in	r0, 0x2d	; 45
 14a:	07 fe       	sbrs	r0, 7
 14c:	fd cf       	rjmp	.-6      	; 0x148 <OTRFM23BLink::OTRFM23BLink<(unsigned char)10>::preinit(void const*)+0x26>
 14e:	2a 9a       	sbi	0x05, 2	; 5
            // may be mandatory for some radio types, else can be NULL.
            // This pre-configuration data depends entirely on the radio implementation,
            // but could for example be a minimal set of register number/values pairs in ROM.
            // This routine must not lock up if radio is not actually available/fitted.
            // Argument is ignored for this impl.
            virtual void preinit(const void *preconfig) { _modeStandbyAndClearState(); }
 150:	08 95       	ret

00000152 <OTRFM23BLink::OTRFM23BLink<(unsigned char)10>::_doconfig()>:
        protected:
            // Configure the hardware.
            // Called from configure() once nChannels and channelConfig is set.
            // Returns false if hardware not present or config is invalid.
            // Defaults to do nothing.
            virtual bool _doconfig() { return(false); } // FIXME
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	08 95       	ret

00000156 <OTRFM23BLink::OTRFM23BLink<(unsigned char)10>::_dolisten()>:

            // Switch listening on or off.
            // listenChannel will have been set when this is called.
            virtual void _dolisten() { } // FIXME
 156:	08 95       	ret

00000158 <OTRFM23BLink::OTRFM23BLink<(unsigned char)10>::begin()>:

            // Begin access to (initialise) this radio link if applicable and not already begun.
            // Returns true if it needed to be begun.
            // Allows logic to end() if required at the end of a block, etc.
            // Defaults to do nothing (and return false).
            virtual bool begin() { return(false); } // FIXME
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	08 95       	ret

0000015c <OTRFM23BLink::OTRFM23BLink<(unsigned char)10>::getCapacity(unsigned char&, unsigned char&, unsigned char&)>:

            // Fetches the current inbound RX queue capacity and maximum raw message size.
            static const int QueueRXMsgsMax = 1;
            static const int MaxRXMsgLen = 64;
            static const int MaxTXMsgLen = 64;
            virtual void getCapacity(uint8_t &queueRXMsgsMax, uint8_t &maxRXMsgLen, uint8_t &maxTXMsgLen)
 15c:	fb 01       	movw	r30, r22
 15e:	da 01       	movw	r26, r20
                { queueRXMsgsMax = QueueRXMsgsMax; maxRXMsgLen = MaxRXMsgLen; maxTXMsgLen = MaxTXMsgLen; }
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	80 83       	st	Z, r24
 164:	80 e4       	ldi	r24, 0x40	; 64
 166:	8c 93       	st	X, r24
 168:	f9 01       	movw	r30, r18
 16a:	80 83       	st	Z, r24
 16c:	08 95       	ret

0000016e <OTRFM23BLink::OTRFM23BLink<(unsigned char)10>::getRXMsgsQueued()>:

            // Fetches the current count of queued messages for RX.
            virtual uint8_t getRXMsgsQueued() { return(0); } // FIXME
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	08 95       	ret

00000172 <OTRFM23BLink::OTRFM23BLink<(unsigned char)10>::getRXMsg(unsigned char*, unsigned char)>:

            // Fetches the first (oldest) queued RX message, returning its length, or 0 if no message waiting.
            // If the waiting message is too long it is truncated to fit,
            // so allocating a buffer at least one longer than any valid message
            // should indicate an oversize inbound message.
            virtual uint8_t getRXMsg(uint8_t *buf, uint8_t buflen) { return(0); } // FIXME
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	08 95       	ret

00000176 <OTRFM23BLink::OTRFM23BLink<(unsigned char)10>::send(int, unsigned char const*, unsigned char, bool)>:
            // else usually power down the radio if not listening.
            // Can optionally be sent quietly (eg if the receiver is known to be close by)
            // to make better use of bandwidth; this hint may be ignored.
            // Returns true if the transmission was made, else false.
            // May block to transmit (eg to avoid copying the buffer).
            virtual bool send(int channel, const uint8_t *buf, uint8_t buflen, bool quiet = false) { return(false); } // FIXME
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	08 95       	ret

0000017a <OTRFM23BLink::OTRFM23BLink<(unsigned char)10>::poll()>:
            // Will only have any effect when listen(true, ...) is active.
            // Can be used safely in addition to handling inbound interrupts.
            // Where interrupts are not available should be called at least as often
            // and messages are expected to arrive to avoid radio receiver overrun.
            // Default is to do nothing.
            virtual void poll() { } // FIXME
 17a:	08 95       	ret

0000017c <OTRFM23BLink::OTRFM23BLink<(unsigned char)10>::handleInterruptSimple()>:
            // else another interrupt handler in the chain may be called
            // to attempt to clear the interrupt.
            // Loosely has the effect of calling poll(),
            // but may respond to and deal with things other than inbound messages.
            // By default does nothing (and returns false).
            virtual bool handleInterruptSimple() { } // FIXME
 17c:	08 95       	ret

0000017e <OTRFM23BLink::OTRFM23BLink<(unsigned char)10>::end()>:

            // End access to this radio link if applicable and not already ended.
            // Returns true if it needed to be ended.
            // Shuts down radio in safe low-power state.
            virtual bool end() { return(false); } // FIXME
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	08 95       	ret

00000182 <OTRFM23BLink::OTRFM23BLink<(unsigned char)10>::isAvailable()>:
            virtual bool begin() { return(false); } // FIXME

            // Returns true if this radio link is currently available.
            // True by default unless implementation overrides.
            // For those radios that need starting this will be false before begin().
            virtual bool isAvailable() { return(false); } // FIXME
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	08 95       	ret

00000186 <error(int, int)>:



// Error exit from failed unit test, one int parameter and the failing line number to print...
// Expects to terminate like panic() with flashing light can be detected by eye or in hardware if required.
static void error(int err, int line)
 186:	0f 93       	push	r16
 188:	1f 93       	push	r17
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	8c 01       	movw	r16, r24
 190:	eb 01       	movw	r28, r22
  {
  for( ; ; )
    {
    Serial.print(F("***Test FAILED*** val="));
 192:	8d ed       	ldi	r24, 0xDD	; 221
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	6d ea       	ldi	r22, 0xAD	; 173
 198:	70 e0       	ldi	r23, 0x00	; 0
 19a:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <Print::print(__FlashStringHelper const*)>
    Serial.print(err, DEC);
 19e:	8d ed       	ldi	r24, 0xDD	; 221
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	b8 01       	movw	r22, r16
 1a4:	4a e0       	ldi	r20, 0x0A	; 10
 1a6:	50 e0       	ldi	r21, 0x00	; 0
 1a8:	0e 94 fe 05 	call	0xbfc	; 0xbfc <Print::print(int, int)>
    Serial.print(F(" =0x"));
 1ac:	8d ed       	ldi	r24, 0xDD	; 221
 1ae:	91 e0       	ldi	r25, 0x01	; 1
 1b0:	68 ea       	ldi	r22, 0xA8	; 168
 1b2:	70 e0       	ldi	r23, 0x00	; 0
 1b4:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <Print::print(__FlashStringHelper const*)>
    Serial.print(err, HEX);
 1b8:	8d ed       	ldi	r24, 0xDD	; 221
 1ba:	91 e0       	ldi	r25, 0x01	; 1
 1bc:	b8 01       	movw	r22, r16
 1be:	40 e1       	ldi	r20, 0x10	; 16
 1c0:	50 e0       	ldi	r21, 0x00	; 0
 1c2:	0e 94 fe 05 	call	0xbfc	; 0xbfc <Print::print(int, int)>
    if(0 != line)
 1c6:	20 97       	sbiw	r28, 0x00	; 0
 1c8:	69 f0       	breq	.+26     	; 0x1e4 <error(int, int)+0x5e>
      {
      Serial.print(F(" at line "));
 1ca:	8d ed       	ldi	r24, 0xDD	; 221
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	6e e9       	ldi	r22, 0x9E	; 158
 1d0:	70 e0       	ldi	r23, 0x00	; 0
 1d2:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <Print::print(__FlashStringHelper const*)>
      Serial.print(line);
 1d6:	8d ed       	ldi	r24, 0xDD	; 221
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	be 01       	movw	r22, r28
 1dc:	4a e0       	ldi	r20, 0x0A	; 10
 1de:	50 e0       	ldi	r21, 0x00	; 0
 1e0:	0e 94 fe 05 	call	0xbfc	; 0xbfc <Print::print(int, int)>
      }
    Serial.println();
 1e4:	8d ed       	ldi	r24, 0xDD	; 221
 1e6:	91 e0       	ldi	r25, 0x01	; 1
 1e8:	0e 94 1e 05 	call	0xa3c	; 0xa3c <Print::println()>
//    LED_HEATCALL_ON();
//    tinyPause();
//    LED_HEATCALL_OFF();
//    sleepLowPowerMs(1000);
    delay(1000);
 1ec:	68 ee       	ldi	r22, 0xE8	; 232
 1ee:	73 e0       	ldi	r23, 0x03	; 3
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 29 02 	call	0x452	; 0x452 <delay>
 1f8:	cc cf       	rjmp	.-104    	; 0x192 <error(int, int)+0xc>

000001fa <loop>:



// To be called from loop() instead of main code when running unit tests.
// Tests generally flag an error and stop the test cycle with a call to panic() or error().
void loop()
 1fa:	0f 93       	push	r16
 1fc:	1f 93       	push	r17
 1fe:	df 93       	push	r29
 200:	cf 93       	push	r28
 202:	cd b7       	in	r28, 0x3d	; 61
 204:	de b7       	in	r29, 0x3e	; 62
 206:	28 97       	sbiw	r28, 0x08	; 8
 208:	0f b6       	in	r0, 0x3f	; 63
 20a:	f8 94       	cli
 20c:	de bf       	out	0x3e, r29	; 62
 20e:	0f be       	out	0x3f, r0	; 63
 210:	cd bf       	out	0x3d, r28	; 61
 212:	03 e0       	ldi	r16, 0x03	; 3
 214:	10 e0       	ldi	r17, 0x00	; 0
  static int loopCount = 0;

  // Allow the terminal console to be brought up.
  for(int i = 3; i > 0; --i)
    {
    Serial.print(F("Tests starting... "));
 216:	8d ed       	ldi	r24, 0xDD	; 221
 218:	91 e0       	ldi	r25, 0x01	; 1
 21a:	6b e8       	ldi	r22, 0x8B	; 139
 21c:	70 e0       	ldi	r23, 0x00	; 0
 21e:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <Print::print(__FlashStringHelper const*)>
    Serial.print(i);
 222:	8d ed       	ldi	r24, 0xDD	; 221
 224:	91 e0       	ldi	r25, 0x01	; 1
 226:	b8 01       	movw	r22, r16
 228:	4a e0       	ldi	r20, 0x0A	; 10
 22a:	50 e0       	ldi	r21, 0x00	; 0
 22c:	0e 94 fe 05 	call	0xbfc	; 0xbfc <Print::print(int, int)>
    Serial.println();
 230:	8d ed       	ldi	r24, 0xDD	; 221
 232:	91 e0       	ldi	r25, 0x01	; 1
 234:	0e 94 1e 05 	call	0xa3c	; 0xa3c <Print::println()>
    delay(1000);
 238:	68 ee       	ldi	r22, 0xE8	; 232
 23a:	73 e0       	ldi	r23, 0x03	; 3
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	0e 94 29 02 	call	0x452	; 0x452 <delay>
void loop()
  {
  static int loopCount = 0;

  // Allow the terminal console to be brought up.
  for(int i = 3; i > 0; --i)
 244:	01 50       	subi	r16, 0x01	; 1
 246:	10 40       	sbci	r17, 0x00	; 0
 248:	31 f7       	brne	.-52     	; 0x216 <loop+0x1c>
    Serial.print(F("Tests starting... "));
    Serial.print(i);
    Serial.println();
    delay(1000);
    }
  Serial.println();
 24a:	8d ed       	ldi	r24, 0xDD	; 221
 24c:	91 e0       	ldi	r25, 0x01	; 1
 24e:	0e 94 1e 05 	call	0xa3c	; 0xa3c <Print::println()>


// Check that correct version of library is under test.
static void testLibVersion()
  {
  Serial.println("LibVersion");
 252:	8d ed       	ldi	r24, 0xDD	; 221
 254:	91 e0       	ldi	r25, 0x01	; 1
 256:	60 e0       	ldi	r22, 0x00	; 0
 258:	71 e0       	ldi	r23, 0x01	; 1
 25a:	0e 94 11 06 	call	0xc22	; 0xc22 <Print::println(char const*)>


// Do some basic testing of CRC 7/5B routine.
static void testCRC7_5B()
  {
  Serial.println("CRC7_5B");
 25e:	8d ed       	ldi	r24, 0xDD	; 221
 260:	91 e0       	ldi	r25, 0x01	; 1
 262:	6b e0       	ldi	r22, 0x0B	; 11
 264:	71 e0       	ldi	r23, 0x01	; 1
 266:	0e 94 11 06 	call	0xc22	; 0xc22 <Print::println(char const*)>
  // Test the 7-bit CRC (0x5b) routine at a few points.
  const uint8_t crc0 = OTRadioLink::crc7_5B_update(0, 0); // Minimal stats payload with normal power and minimum temperature.
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	60 e0       	ldi	r22, 0x00	; 0
 26e:	0e 94 b1 01 	call	0x362	; 0x362 <OTRadioLink::crc7_5B_update(unsigned char, unsigned char)>
  AssertIsTrueWithErr((0 == crc0), crc0); 
 272:	88 23       	and	r24, r24
 274:	29 f0       	breq	.+10     	; 0x280 <loop+0x86>
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	6e e5       	ldi	r22, 0x5E	; 94
 27a:	70 e0       	ldi	r23, 0x00	; 0
 27c:	0e 94 c3 00 	call	0x186	; 0x186 <error(int, int)>
  const uint8_t crc1 = OTRadioLink::crc7_5B_update(0x40, 0); // Minimal stats payload with normal power and minimum temperature.
 280:	80 e4       	ldi	r24, 0x40	; 64
 282:	60 e0       	ldi	r22, 0x00	; 0
 284:	0e 94 b1 01 	call	0x362	; 0x362 <OTRadioLink::crc7_5B_update(unsigned char, unsigned char)>
  AssertIsTrueWithErr((0x1a == crc1), crc1); 
 288:	8a 31       	cpi	r24, 0x1A	; 26
 28a:	29 f0       	breq	.+10     	; 0x296 <loop+0x9c>
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	60 e6       	ldi	r22, 0x60	; 96
 290:	70 e0       	ldi	r23, 0x00	; 0
 292:	0e 94 c3 00 	call	0x186	; 0x186 <error(int, int)>
  const uint8_t crc2 = OTRadioLink::crc7_5B_update(0x50, 40); // Minimal stats payload with low power and 20C temperature.
 296:	80 e5       	ldi	r24, 0x50	; 80
 298:	68 e2       	ldi	r22, 0x28	; 40
 29a:	0e 94 b1 01 	call	0x362	; 0x362 <OTRadioLink::crc7_5B_update(unsigned char, unsigned char)>
  AssertIsTrueWithErr((0x7b == crc2), crc2); 
 29e:	8b 37       	cpi	r24, 0x7B	; 123
 2a0:	29 f0       	breq	.+10     	; 0x2ac <loop+0xb2>
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	62 e6       	ldi	r22, 0x62	; 98
 2a6:	70 e0       	ldi	r23, 0x00	; 0
 2a8:	0e 94 c3 00 	call	0x186	; 0x186 <error(int, int)>
#define PIN_SPI_nSS 10 // ATMega328P-PU PDIP pin 16, PB2.  Active low enable.

// Do some basic exercise of the RFM23B.
static void testRFM23B()
  {
  Serial.println("RFM23B");
 2ac:	8d ed       	ldi	r24, 0xDD	; 221
 2ae:	91 e0       	ldi	r25, 0x01	; 1
 2b0:	63 e1       	ldi	r22, 0x13	; 19
 2b2:	71 e0       	ldi	r23, 0x01	; 1
 2b4:	0e 94 11 06 	call	0xc22	; 0xc22 <Print::println(char const*)>
            // Switch listening on or off.
            // listenChannel will have been set when this is called.
            virtual void _dolisten() = 0;

        public:
            OTRadioLink() : listenChannel(-1), nChannels(0), channelConfig(NULL) { }
 2b8:	8f ef       	ldi	r24, 0xFF	; 255
 2ba:	9f ef       	ldi	r25, 0xFF	; 255
 2bc:	9c 83       	std	Y+4, r25	; 0x04
 2be:	8b 83       	std	Y+3, r24	; 0x03
 2c0:	1e 82       	std	Y+6, r1	; 0x06
 2c2:	1d 82       	std	Y+5, r1	; 0x05
 2c4:	18 86       	std	Y+8, r1	; 0x08
 2c6:	1f 82       	std	Y+7, r1	; 0x07
            // Switch listening on or off.
            // listenChannel will have been set when this is called.
            virtual void _dolisten() { } // FIXME

        public:
            OTRFM23BLink() { }
 2c8:	8e e1       	ldi	r24, 0x1E	; 30
 2ca:	91 e0       	ldi	r25, 0x01	; 1
 2cc:	9a 83       	std	Y+2, r25	; 0x02
 2ce:	89 83       	std	Y+1, r24	; 0x01
  OTRFM23BLink::OTRFM23BLink<PIN_SPI_nSS> l0;
  l0.preinit(NULL); // Must not break anything or stall!
 2d0:	ce 01       	movw	r24, r28
 2d2:	01 96       	adiw	r24, 0x01	; 1
 2d4:	60 e0       	ldi	r22, 0x00	; 0
 2d6:	70 e0       	ldi	r23, 0x00	; 0
 2d8:	0e 94 91 00 	call	0x122	; 0x122 <OTRFM23BLink::OTRFM23BLink<(unsigned char)10>::preinit(void const*)>




  // Announce successful loop completion and count.
  ++loopCount;
 2dc:	80 91 4a 01 	lds	r24, 0x014A
 2e0:	90 91 4b 01 	lds	r25, 0x014B
 2e4:	01 96       	adiw	r24, 0x01	; 1
 2e6:	90 93 4b 01 	sts	0x014B, r25
 2ea:	80 93 4a 01 	sts	0x014A, r24
  Serial.println();
 2ee:	8d ed       	ldi	r24, 0xDD	; 221
 2f0:	91 e0       	ldi	r25, 0x01	; 1
 2f2:	0e 94 1e 05 	call	0xa3c	; 0xa3c <Print::println()>
  Serial.print(F("%%% All tests completed OK, round "));
 2f6:	8d ed       	ldi	r24, 0xDD	; 221
 2f8:	91 e0       	ldi	r25, 0x01	; 1
 2fa:	68 e6       	ldi	r22, 0x68	; 104
 2fc:	70 e0       	ldi	r23, 0x00	; 0
 2fe:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <Print::print(__FlashStringHelper const*)>
  Serial.print(loopCount);
 302:	60 91 4a 01 	lds	r22, 0x014A
 306:	70 91 4b 01 	lds	r23, 0x014B
 30a:	8d ed       	ldi	r24, 0xDD	; 221
 30c:	91 e0       	ldi	r25, 0x01	; 1
 30e:	4a e0       	ldi	r20, 0x0A	; 10
 310:	50 e0       	ldi	r21, 0x00	; 0
 312:	0e 94 fe 05 	call	0xbfc	; 0xbfc <Print::print(int, int)>
  Serial.println();
 316:	8d ed       	ldi	r24, 0xDD	; 221
 318:	91 e0       	ldi	r25, 0x01	; 1
 31a:	0e 94 1e 05 	call	0xa3c	; 0xa3c <Print::println()>
  Serial.println();
 31e:	8d ed       	ldi	r24, 0xDD	; 221
 320:	91 e0       	ldi	r25, 0x01	; 1
 322:	0e 94 1e 05 	call	0xa3c	; 0xa3c <Print::println()>
  Serial.println();
 326:	8d ed       	ldi	r24, 0xDD	; 221
 328:	91 e0       	ldi	r25, 0x01	; 1
 32a:	0e 94 1e 05 	call	0xa3c	; 0xa3c <Print::println()>
  delay(2000);
 32e:	60 ed       	ldi	r22, 0xD0	; 208
 330:	77 e0       	ldi	r23, 0x07	; 7
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	0e 94 29 02 	call	0x452	; 0x452 <delay>
  }
 33a:	28 96       	adiw	r28, 0x08	; 8
 33c:	0f b6       	in	r0, 0x3f	; 63
 33e:	f8 94       	cli
 340:	de bf       	out	0x3e, r29	; 62
 342:	0f be       	out	0x3f, r0	; 63
 344:	cd bf       	out	0x3d, r28	; 61
 346:	cf 91       	pop	r28
 348:	df 91       	pop	r29
 34a:	1f 91       	pop	r17
 34c:	0f 91       	pop	r16
 34e:	08 95       	ret

00000350 <setup>:


void setup()
  {
  // initialize serial communications at 9600 bps for typical use with (eg) Arduino UNO.
  Serial.begin(9600); 
 350:	8d ed       	ldi	r24, 0xDD	; 221
 352:	91 e0       	ldi	r25, 0x01	; 1
 354:	40 e8       	ldi	r20, 0x80	; 128
 356:	55 e2       	ldi	r21, 0x25	; 37
 358:	60 e0       	ldi	r22, 0x00	; 0
 35a:	70 e0       	ldi	r23, 0x00	; 0
 35c:	0e 94 44 03 	call	0x688	; 0x688 <HardwareSerial::begin(unsigned long)>
  }
 360:	08 95       	ret

00000362 <OTRadioLink::crc7_5B_update(unsigned char, unsigned char)>:
     * For 2 or 3 byte payloads this should have a Hamming distance of 4 and be within a factor of 2 of optimal error detection.
     * <p>
     * TODO: provide table-driven optimised alternative,
     *     eg see http://www.tty1.net/pycrc/index_en.html
     */
    uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
 362:	38 2f       	mov	r19, r24
 364:	70 e8       	ldi	r23, 0x80	; 128
 366:	40 e0       	ldi	r20, 0x00	; 0
 368:	50 e0       	ldi	r21, 0x00	; 0
        {
        for(uint8_t i = 0x80; i != 0; i >>= 1)
            {
            bool bit = (0 != (crc & 0x40));
            if(0 != (datum & i)) { bit = !bit; }
 36a:	e6 2f       	mov	r30, r22
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	a1 e0       	ldi	r26, 0x01	; 1
            crc <<= 1;
            if(bit) { crc ^= 0x37; }
 370:	67 e3       	ldi	r22, 0x37	; 55
     */
    uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
        {
        for(uint8_t i = 0x80; i != 0; i >>= 1)
            {
            bool bit = (0 != (crc & 0x40));
 372:	83 2f       	mov	r24, r19
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	26 e0       	ldi	r18, 0x06	; 6
 378:	96 95       	lsr	r25
 37a:	87 95       	ror	r24
 37c:	2a 95       	dec	r18
 37e:	e1 f7       	brne	.-8      	; 0x378 <OTRadioLink::crc7_5B_update(unsigned char, unsigned char)+0x16>
 380:	28 2f       	mov	r18, r24
 382:	21 70       	andi	r18, 0x01	; 1
            if(0 != (datum & i)) { bit = !bit; }
 384:	87 2f       	mov	r24, r23
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	8e 23       	and	r24, r30
 38a:	9f 23       	and	r25, r31
 38c:	89 2b       	or	r24, r25
 38e:	09 f0       	breq	.+2      	; 0x392 <OTRadioLink::crc7_5B_update(unsigned char, unsigned char)+0x30>
 390:	2a 27       	eor	r18, r26
            crc <<= 1;
 392:	33 0f       	add	r19, r19
            if(bit) { crc ^= 0x37; }
 394:	21 11       	cpse	r18, r1
 396:	36 27       	eor	r19, r22
     * TODO: provide table-driven optimised alternative,
     *     eg see http://www.tty1.net/pycrc/index_en.html
     */
    uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
        {
        for(uint8_t i = 0x80; i != 0; i >>= 1)
 398:	76 95       	lsr	r23
 39a:	4f 5f       	subi	r20, 0xFF	; 255
 39c:	5f 4f       	sbci	r21, 0xFF	; 255
 39e:	48 30       	cpi	r20, 0x08	; 8
 3a0:	51 05       	cpc	r21, r1
 3a2:	39 f7       	brne	.-50     	; 0x372 <OTRadioLink::crc7_5B_update(unsigned char, unsigned char)+0x10>
            if(0 != (datum & i)) { bit = !bit; }
            crc <<= 1;
            if(bit) { crc ^= 0x37; }
            }
        return(crc & 0x7f);
        }
 3a4:	83 2f       	mov	r24, r19
 3a6:	8f 77       	andi	r24, 0x7F	; 127
 3a8:	08 95       	ret

000003aa <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 3aa:	1f 92       	push	r1
 3ac:	0f 92       	push	r0
 3ae:	0f b6       	in	r0, 0x3f	; 63
 3b0:	0f 92       	push	r0
 3b2:	11 24       	eor	r1, r1
 3b4:	2f 93       	push	r18
 3b6:	3f 93       	push	r19
 3b8:	4f 93       	push	r20
 3ba:	5f 93       	push	r21
 3bc:	6f 93       	push	r22
 3be:	7f 93       	push	r23
 3c0:	8f 93       	push	r24
 3c2:	9f 93       	push	r25
 3c4:	af 93       	push	r26
 3c6:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 3c8:	20 91 50 01 	lds	r18, 0x0150
 3cc:	30 91 51 01 	lds	r19, 0x0151
 3d0:	40 91 52 01 	lds	r20, 0x0152
 3d4:	50 91 53 01 	lds	r21, 0x0153
	unsigned char f = timer0_fract;
 3d8:	70 91 54 01 	lds	r23, 0x0154

	m += MILLIS_INC;
 3dc:	da 01       	movw	r26, r20
 3de:	c9 01       	movw	r24, r18
 3e0:	40 96       	adiw	r24, 0x10	; 16
 3e2:	a1 1d       	adc	r26, r1
 3e4:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
 3e6:	67 2f       	mov	r22, r23
 3e8:	60 5d       	subi	r22, 0xD0	; 208
	if (f >= FRACT_MAX) {
 3ea:	6d 37       	cpi	r22, 0x7D	; 125
 3ec:	30 f0       	brcs	.+12     	; 0x3fa <__vector_16+0x50>
		f -= FRACT_MAX;
 3ee:	6d 57       	subi	r22, 0x7D	; 125
		m += 1;
 3f0:	da 01       	movw	r26, r20
 3f2:	c9 01       	movw	r24, r18
 3f4:	41 96       	adiw	r24, 0x11	; 17
 3f6:	a1 1d       	adc	r26, r1
 3f8:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
 3fa:	60 93 54 01 	sts	0x0154, r22
	timer0_millis = m;
 3fe:	80 93 50 01 	sts	0x0150, r24
 402:	90 93 51 01 	sts	0x0151, r25
 406:	a0 93 52 01 	sts	0x0152, r26
 40a:	b0 93 53 01 	sts	0x0153, r27
	timer0_overflow_count++;
 40e:	80 91 4c 01 	lds	r24, 0x014C
 412:	90 91 4d 01 	lds	r25, 0x014D
 416:	a0 91 4e 01 	lds	r26, 0x014E
 41a:	b0 91 4f 01 	lds	r27, 0x014F
 41e:	01 96       	adiw	r24, 0x01	; 1
 420:	a1 1d       	adc	r26, r1
 422:	b1 1d       	adc	r27, r1
 424:	80 93 4c 01 	sts	0x014C, r24
 428:	90 93 4d 01 	sts	0x014D, r25
 42c:	a0 93 4e 01 	sts	0x014E, r26
 430:	b0 93 4f 01 	sts	0x014F, r27
}
 434:	bf 91       	pop	r27
 436:	af 91       	pop	r26
 438:	9f 91       	pop	r25
 43a:	8f 91       	pop	r24
 43c:	7f 91       	pop	r23
 43e:	6f 91       	pop	r22
 440:	5f 91       	pop	r21
 442:	4f 91       	pop	r20
 444:	3f 91       	pop	r19
 446:	2f 91       	pop	r18
 448:	0f 90       	pop	r0
 44a:	0f be       	out	0x3f, r0	; 63
 44c:	0f 90       	pop	r0
 44e:	1f 90       	pop	r1
 450:	18 95       	reti

00000452 <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
 452:	9b 01       	movw	r18, r22
 454:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 456:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
 458:	f8 94       	cli
	m = timer0_overflow_count;
 45a:	80 91 4c 01 	lds	r24, 0x014C
 45e:	90 91 4d 01 	lds	r25, 0x014D
 462:	a0 91 4e 01 	lds	r26, 0x014E
 466:	b0 91 4f 01 	lds	r27, 0x014F
#if defined(TCNT0)
	t = TCNT0;
 46a:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 46c:	a8 9b       	sbis	0x15, 0	; 21
 46e:	05 c0       	rjmp	.+10     	; 0x47a <delay+0x28>
 470:	6f 3f       	cpi	r22, 0xFF	; 255
 472:	19 f0       	breq	.+6      	; 0x47a <delay+0x28>
		m++;
 474:	01 96       	adiw	r24, 0x01	; 1
 476:	a1 1d       	adc	r26, r1
 478:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 47a:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
 47c:	ba 2f       	mov	r27, r26
 47e:	a9 2f       	mov	r26, r25
 480:	98 2f       	mov	r25, r24
 482:	88 27       	eor	r24, r24
 484:	86 0f       	add	r24, r22
 486:	91 1d       	adc	r25, r1
 488:	a1 1d       	adc	r26, r1
 48a:	b1 1d       	adc	r27, r1
 48c:	66 e0       	ldi	r22, 0x06	; 6
 48e:	88 0f       	add	r24, r24
 490:	99 1f       	adc	r25, r25
 492:	aa 1f       	adc	r26, r26
 494:	bb 1f       	adc	r27, r27
 496:	6a 95       	dec	r22
 498:	d1 f7       	brne	.-12     	; 0x48e <delay+0x3c>
 49a:	bc 01       	movw	r22, r24
 49c:	2d c0       	rjmp	.+90     	; 0x4f8 <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 49e:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
 4a0:	f8 94       	cli
	m = timer0_overflow_count;
 4a2:	80 91 4c 01 	lds	r24, 0x014C
 4a6:	90 91 4d 01 	lds	r25, 0x014D
 4aa:	a0 91 4e 01 	lds	r26, 0x014E
 4ae:	b0 91 4f 01 	lds	r27, 0x014F
#if defined(TCNT0)
	t = TCNT0;
 4b2:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 4b4:	a8 9b       	sbis	0x15, 0	; 21
 4b6:	05 c0       	rjmp	.+10     	; 0x4c2 <delay+0x70>
 4b8:	ef 3f       	cpi	r30, 0xFF	; 255
 4ba:	19 f0       	breq	.+6      	; 0x4c2 <delay+0x70>
		m++;
 4bc:	01 96       	adiw	r24, 0x01	; 1
 4be:	a1 1d       	adc	r26, r1
 4c0:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 4c2:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
 4c4:	ba 2f       	mov	r27, r26
 4c6:	a9 2f       	mov	r26, r25
 4c8:	98 2f       	mov	r25, r24
 4ca:	88 27       	eor	r24, r24
 4cc:	8e 0f       	add	r24, r30
 4ce:	91 1d       	adc	r25, r1
 4d0:	a1 1d       	adc	r26, r1
 4d2:	b1 1d       	adc	r27, r1
 4d4:	e6 e0       	ldi	r30, 0x06	; 6
 4d6:	88 0f       	add	r24, r24
 4d8:	99 1f       	adc	r25, r25
 4da:	aa 1f       	adc	r26, r26
 4dc:	bb 1f       	adc	r27, r27
 4de:	ea 95       	dec	r30
 4e0:	d1 f7       	brne	.-12     	; 0x4d6 <delay+0x84>
 4e2:	86 1b       	sub	r24, r22
 4e4:	97 0b       	sbc	r25, r23
 4e6:	88 5e       	subi	r24, 0xE8	; 232
 4e8:	93 40       	sbci	r25, 0x03	; 3
 4ea:	c8 f2       	brcs	.-78     	; 0x49e <delay+0x4c>
			ms--;
 4ec:	21 50       	subi	r18, 0x01	; 1
 4ee:	30 40       	sbci	r19, 0x00	; 0
 4f0:	40 40       	sbci	r20, 0x00	; 0
 4f2:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
 4f4:	68 51       	subi	r22, 0x18	; 24
 4f6:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
 4f8:	21 15       	cp	r18, r1
 4fa:	31 05       	cpc	r19, r1
 4fc:	41 05       	cpc	r20, r1
 4fe:	51 05       	cpc	r21, r1
 500:	71 f6       	brne	.-100    	; 0x49e <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
 502:	08 95       	ret

00000504 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 504:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 506:	84 b5       	in	r24, 0x24	; 36
 508:	82 60       	ori	r24, 0x02	; 2
 50a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 50c:	84 b5       	in	r24, 0x24	; 36
 50e:	81 60       	ori	r24, 0x01	; 1
 510:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 512:	85 b5       	in	r24, 0x25	; 37
 514:	82 60       	ori	r24, 0x02	; 2
 516:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 518:	85 b5       	in	r24, 0x25	; 37
 51a:	81 60       	ori	r24, 0x01	; 1
 51c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 51e:	ee e6       	ldi	r30, 0x6E	; 110
 520:	f0 e0       	ldi	r31, 0x00	; 0
 522:	80 81       	ld	r24, Z
 524:	81 60       	ori	r24, 0x01	; 1
 526:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 528:	e1 e8       	ldi	r30, 0x81	; 129
 52a:	f0 e0       	ldi	r31, 0x00	; 0
 52c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 52e:	80 81       	ld	r24, Z
 530:	82 60       	ori	r24, 0x02	; 2
 532:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 534:	e0 e8       	ldi	r30, 0x80	; 128
 536:	f0 e0       	ldi	r31, 0x00	; 0
 538:	80 81       	ld	r24, Z
 53a:	81 60       	ori	r24, 0x01	; 1
 53c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 53e:	e1 eb       	ldi	r30, 0xB1	; 177
 540:	f0 e0       	ldi	r31, 0x00	; 0
 542:	80 81       	ld	r24, Z
 544:	84 60       	ori	r24, 0x04	; 4
 546:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 548:	e0 eb       	ldi	r30, 0xB0	; 176
 54a:	f0 e0       	ldi	r31, 0x00	; 0
 54c:	80 81       	ld	r24, Z
 54e:	81 60       	ori	r24, 0x01	; 1
 550:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
 552:	ea e7       	ldi	r30, 0x7A	; 122
 554:	f0 e0       	ldi	r31, 0x00	; 0
 556:	80 81       	ld	r24, Z
 558:	84 60       	ori	r24, 0x04	; 4
 55a:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
 55c:	80 81       	ld	r24, Z
 55e:	82 60       	ori	r24, 0x02	; 2
 560:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
 562:	80 81       	ld	r24, Z
 564:	81 60       	ori	r24, 0x01	; 1
 566:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 568:	80 81       	ld	r24, Z
 56a:	80 68       	ori	r24, 0x80	; 128
 56c:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 56e:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
 572:	08 95       	ret

00000574 <serialEvent()>:
#if !defined(USART_RX_vect) && !defined(USART0_RX_vect) && \
    !defined(USART_RXC_vect)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
 574:	08 95       	ret

00000576 <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  ISR(USART_RX_vect)
 576:	1f 92       	push	r1
 578:	0f 92       	push	r0
 57a:	0f b6       	in	r0, 0x3f	; 63
 57c:	0f 92       	push	r0
 57e:	11 24       	eor	r1, r1
 580:	2f 93       	push	r18
 582:	3f 93       	push	r19
 584:	4f 93       	push	r20
 586:	8f 93       	push	r24
 588:	9f 93       	push	r25
 58a:	ef 93       	push	r30
 58c:	ff 93       	push	r31
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#endif
  {
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
 58e:	80 91 c0 00 	lds	r24, 0x00C0
 592:	82 fd       	sbrc	r24, 2
 594:	1d c0       	rjmp	.+58     	; 0x5d0 <__vector_18+0x5a>
      unsigned char c = UDR0;
 596:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
 59a:	20 91 95 01 	lds	r18, 0x0195
 59e:	30 91 96 01 	lds	r19, 0x0196

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
 5a2:	2f 5f       	subi	r18, 0xFF	; 255
 5a4:	3f 4f       	sbci	r19, 0xFF	; 255
 5a6:	2f 73       	andi	r18, 0x3F	; 63
 5a8:	30 70       	andi	r19, 0x00	; 0
 5aa:	80 91 97 01 	lds	r24, 0x0197
 5ae:	90 91 98 01 	lds	r25, 0x0198
 5b2:	28 17       	cp	r18, r24
 5b4:	39 07       	cpc	r19, r25
 5b6:	71 f0       	breq	.+28     	; 0x5d4 <__vector_18+0x5e>
    buffer->buffer[buffer->head] = c;
 5b8:	e0 91 95 01 	lds	r30, 0x0195
 5bc:	f0 91 96 01 	lds	r31, 0x0196
 5c0:	eb 5a       	subi	r30, 0xAB	; 171
 5c2:	fe 4f       	sbci	r31, 0xFE	; 254
 5c4:	40 83       	st	Z, r20
    buffer->head = i;
 5c6:	30 93 96 01 	sts	0x0196, r19
 5ca:	20 93 95 01 	sts	0x0195, r18
 5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <__vector_18+0x5e>
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
      unsigned char c = UDR0;
      store_char(c, &rx_buffer);
    } else {
      unsigned char c = UDR0;
 5d0:	80 91 c6 00 	lds	r24, 0x00C6
      unsigned char c = UDR;
    };
  #else
    #error UDR not defined
  #endif
  }
 5d4:	ff 91       	pop	r31
 5d6:	ef 91       	pop	r30
 5d8:	9f 91       	pop	r25
 5da:	8f 91       	pop	r24
 5dc:	4f 91       	pop	r20
 5de:	3f 91       	pop	r19
 5e0:	2f 91       	pop	r18
 5e2:	0f 90       	pop	r0
 5e4:	0f be       	out	0x3f, r0	; 63
 5e6:	0f 90       	pop	r0
 5e8:	1f 90       	pop	r1
 5ea:	18 95       	reti

000005ec <serialEventRun()>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
 5ec:	e0 91 e9 01 	lds	r30, 0x01E9
 5f0:	f0 91 ea 01 	lds	r31, 0x01EA
 5f4:	e0 5c       	subi	r30, 0xC0	; 192
 5f6:	ff 4f       	sbci	r31, 0xFF	; 255
 5f8:	81 91       	ld	r24, Z+
 5fa:	91 91       	ld	r25, Z+
 5fc:	20 81       	ld	r18, Z
 5fe:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
 600:	82 1b       	sub	r24, r18
 602:	93 0b       	sbc	r25, r19
 604:	8f 73       	andi	r24, 0x3F	; 63
 606:	90 70       	andi	r25, 0x00	; 0
 608:	89 2b       	or	r24, r25
 60a:	11 f0       	breq	.+4      	; 0x610 <serialEventRun()+0x24>
 60c:	0e 94 ba 02 	call	0x574	; 0x574 <serialEvent()>
 610:	08 95       	ret

00000612 <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
 612:	1f 92       	push	r1
 614:	0f 92       	push	r0
 616:	0f b6       	in	r0, 0x3f	; 63
 618:	0f 92       	push	r0
 61a:	11 24       	eor	r1, r1
 61c:	2f 93       	push	r18
 61e:	3f 93       	push	r19
 620:	8f 93       	push	r24
 622:	9f 93       	push	r25
 624:	ef 93       	push	r30
 626:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
 628:	20 91 d9 01 	lds	r18, 0x01D9
 62c:	30 91 da 01 	lds	r19, 0x01DA
 630:	80 91 db 01 	lds	r24, 0x01DB
 634:	90 91 dc 01 	lds	r25, 0x01DC
 638:	28 17       	cp	r18, r24
 63a:	39 07       	cpc	r19, r25
 63c:	31 f4       	brne	.+12     	; 0x64a <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
 63e:	80 91 c1 00 	lds	r24, 0x00C1
 642:	8f 7d       	andi	r24, 0xDF	; 223
 644:	80 93 c1 00 	sts	0x00C1, r24
 648:	14 c0       	rjmp	.+40     	; 0x672 <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 64a:	e0 91 db 01 	lds	r30, 0x01DB
 64e:	f0 91 dc 01 	lds	r31, 0x01DC
 652:	e7 56       	subi	r30, 0x67	; 103
 654:	fe 4f       	sbci	r31, 0xFE	; 254
 656:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
 658:	80 91 db 01 	lds	r24, 0x01DB
 65c:	90 91 dc 01 	lds	r25, 0x01DC
 660:	01 96       	adiw	r24, 0x01	; 1
 662:	8f 73       	andi	r24, 0x3F	; 63
 664:	90 70       	andi	r25, 0x00	; 0
 666:	90 93 dc 01 	sts	0x01DC, r25
 66a:	80 93 db 01 	sts	0x01DB, r24
	
  #if defined(UDR0)
    UDR0 = c;
 66e:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
 672:	ff 91       	pop	r31
 674:	ef 91       	pop	r30
 676:	9f 91       	pop	r25
 678:	8f 91       	pop	r24
 67a:	3f 91       	pop	r19
 67c:	2f 91       	pop	r18
 67e:	0f 90       	pop	r0
 680:	0f be       	out	0x3f, r0	; 63
 682:	0f 90       	pop	r0
 684:	1f 90       	pop	r1
 686:	18 95       	reti

00000688 <HardwareSerial::begin(unsigned long)>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
 688:	af 92       	push	r10
 68a:	bf 92       	push	r11
 68c:	df 92       	push	r13
 68e:	ef 92       	push	r14
 690:	ff 92       	push	r15
 692:	0f 93       	push	r16
 694:	1f 93       	push	r17
 696:	cf 93       	push	r28
 698:	df 93       	push	r29
 69a:	ec 01       	movw	r28, r24
 69c:	7a 01       	movw	r14, r20
 69e:	8b 01       	movw	r16, r22
 6a0:	dd 24       	eor	r13, r13
 6a2:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
 6a4:	91 e0       	ldi	r25, 0x01	; 1
 6a6:	a9 2e       	mov	r10, r25
 6a8:	b1 2c       	mov	r11, r1
 6aa:	ec 89       	ldd	r30, Y+20	; 0x14
 6ac:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
 6ae:	dd 20       	and	r13, r13
 6b0:	69 f0       	breq	.+26     	; 0x6cc <HardwareSerial::begin(unsigned long)+0x44>
    *_ucsra = 1 << _u2x;
 6b2:	c5 01       	movw	r24, r10
 6b4:	08 a0       	ldd	r0, Y+32	; 0x20
 6b6:	02 c0       	rjmp	.+4      	; 0x6bc <HardwareSerial::begin(unsigned long)+0x34>
 6b8:	88 0f       	add	r24, r24
 6ba:	99 1f       	adc	r25, r25
 6bc:	0a 94       	dec	r0
 6be:	e2 f7       	brpl	.-8      	; 0x6b8 <HardwareSerial::begin(unsigned long)+0x30>
 6c0:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
 6c2:	60 e9       	ldi	r22, 0x90	; 144
 6c4:	70 ed       	ldi	r23, 0xD0	; 208
 6c6:	83 e0       	ldi	r24, 0x03	; 3
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	05 c0       	rjmp	.+10     	; 0x6d6 <HardwareSerial::begin(unsigned long)+0x4e>
  } else {
    *_ucsra = 0;
 6cc:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 6ce:	68 e4       	ldi	r22, 0x48	; 72
 6d0:	78 ee       	ldi	r23, 0xE8	; 232
 6d2:	81 e0       	ldi	r24, 0x01	; 1
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	a8 01       	movw	r20, r16
 6d8:	97 01       	movw	r18, r14
 6da:	0e 94 43 06 	call	0xc86	; 0xc86 <__udivmodsi4>
 6de:	21 50       	subi	r18, 0x01	; 1
 6e0:	30 40       	sbci	r19, 0x00	; 0
 6e2:	40 40       	sbci	r20, 0x00	; 0
 6e4:	50 40       	sbci	r21, 0x00	; 0
 6e6:	56 95       	lsr	r21
 6e8:	47 95       	ror	r20
 6ea:	37 95       	ror	r19
 6ec:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
 6ee:	80 e1       	ldi	r24, 0x10	; 16
 6f0:	20 30       	cpi	r18, 0x00	; 0
 6f2:	38 07       	cpc	r19, r24
 6f4:	20 f0       	brcs	.+8      	; 0x6fe <HardwareSerial::begin(unsigned long)+0x76>
 6f6:	dd 20       	and	r13, r13
 6f8:	11 f0       	breq	.+4      	; 0x6fe <HardwareSerial::begin(unsigned long)+0x76>
 6fa:	dd 24       	eor	r13, r13
 6fc:	d6 cf       	rjmp	.-84     	; 0x6aa <HardwareSerial::begin(unsigned long)+0x22>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 6fe:	e8 89       	ldd	r30, Y+16	; 0x10
 700:	f9 89       	ldd	r31, Y+17	; 0x11
 702:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
 704:	ea 89       	ldd	r30, Y+18	; 0x12
 706:	fb 89       	ldd	r31, Y+19	; 0x13
 708:	20 83       	st	Z, r18

  transmitting = false;
 70a:	19 a2       	std	Y+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
 70c:	ee 89       	ldd	r30, Y+22	; 0x16
 70e:	ff 89       	ldd	r31, Y+23	; 0x17
 710:	40 81       	ld	r20, Z
 712:	21 e0       	ldi	r18, 0x01	; 1
 714:	30 e0       	ldi	r19, 0x00	; 0
 716:	c9 01       	movw	r24, r18
 718:	0c 8c       	ldd	r0, Y+28	; 0x1c
 71a:	02 c0       	rjmp	.+4      	; 0x720 <HardwareSerial::begin(unsigned long)+0x98>
 71c:	88 0f       	add	r24, r24
 71e:	99 1f       	adc	r25, r25
 720:	0a 94       	dec	r0
 722:	e2 f7       	brpl	.-8      	; 0x71c <HardwareSerial::begin(unsigned long)+0x94>
 724:	48 2b       	or	r20, r24
 726:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
 728:	ee 89       	ldd	r30, Y+22	; 0x16
 72a:	ff 89       	ldd	r31, Y+23	; 0x17
 72c:	40 81       	ld	r20, Z
 72e:	c9 01       	movw	r24, r18
 730:	0d 8c       	ldd	r0, Y+29	; 0x1d
 732:	02 c0       	rjmp	.+4      	; 0x738 <HardwareSerial::begin(unsigned long)+0xb0>
 734:	88 0f       	add	r24, r24
 736:	99 1f       	adc	r25, r25
 738:	0a 94       	dec	r0
 73a:	e2 f7       	brpl	.-8      	; 0x734 <HardwareSerial::begin(unsigned long)+0xac>
 73c:	48 2b       	or	r20, r24
 73e:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
 740:	ee 89       	ldd	r30, Y+22	; 0x16
 742:	ff 89       	ldd	r31, Y+23	; 0x17
 744:	40 81       	ld	r20, Z
 746:	c9 01       	movw	r24, r18
 748:	0e 8c       	ldd	r0, Y+30	; 0x1e
 74a:	02 c0       	rjmp	.+4      	; 0x750 <HardwareSerial::begin(unsigned long)+0xc8>
 74c:	88 0f       	add	r24, r24
 74e:	99 1f       	adc	r25, r25
 750:	0a 94       	dec	r0
 752:	e2 f7       	brpl	.-8      	; 0x74c <HardwareSerial::begin(unsigned long)+0xc4>
 754:	48 2b       	or	r20, r24
 756:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
 758:	ee 89       	ldd	r30, Y+22	; 0x16
 75a:	ff 89       	ldd	r31, Y+23	; 0x17
 75c:	80 81       	ld	r24, Z
 75e:	0f 8c       	ldd	r0, Y+31	; 0x1f
 760:	02 c0       	rjmp	.+4      	; 0x766 <HardwareSerial::begin(unsigned long)+0xde>
 762:	22 0f       	add	r18, r18
 764:	33 1f       	adc	r19, r19
 766:	0a 94       	dec	r0
 768:	e2 f7       	brpl	.-8      	; 0x762 <HardwareSerial::begin(unsigned long)+0xda>
 76a:	20 95       	com	r18
 76c:	28 23       	and	r18, r24
 76e:	20 83       	st	Z, r18
}
 770:	df 91       	pop	r29
 772:	cf 91       	pop	r28
 774:	1f 91       	pop	r17
 776:	0f 91       	pop	r16
 778:	ff 90       	pop	r15
 77a:	ef 90       	pop	r14
 77c:	df 90       	pop	r13
 77e:	bf 90       	pop	r11
 780:	af 90       	pop	r10
 782:	08 95       	ret

00000784 <HardwareSerial::available()>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
 784:	dc 01       	movw	r26, r24
 786:	1c 96       	adiw	r26, 0x0c	; 12
 788:	ed 91       	ld	r30, X+
 78a:	fc 91       	ld	r31, X
 78c:	1d 97       	sbiw	r26, 0x0d	; 13
 78e:	e0 5c       	subi	r30, 0xC0	; 192
 790:	ff 4f       	sbci	r31, 0xFF	; 255
 792:	21 91       	ld	r18, Z+
 794:	31 91       	ld	r19, Z+
 796:	80 81       	ld	r24, Z
 798:	91 81       	ldd	r25, Z+1	; 0x01
 79a:	28 1b       	sub	r18, r24
 79c:	39 0b       	sbc	r19, r25
 79e:	2f 73       	andi	r18, 0x3F	; 63
 7a0:	30 70       	andi	r19, 0x00	; 0
}
 7a2:	c9 01       	movw	r24, r18
 7a4:	08 95       	ret

000007a6 <HardwareSerial::peek()>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
 7a6:	dc 01       	movw	r26, r24
 7a8:	1c 96       	adiw	r26, 0x0c	; 12
 7aa:	ed 91       	ld	r30, X+
 7ac:	fc 91       	ld	r31, X
 7ae:	1d 97       	sbiw	r26, 0x0d	; 13
 7b0:	e0 5c       	subi	r30, 0xC0	; 192
 7b2:	ff 4f       	sbci	r31, 0xFF	; 255
 7b4:	20 81       	ld	r18, Z
 7b6:	31 81       	ldd	r19, Z+1	; 0x01
 7b8:	e0 54       	subi	r30, 0x40	; 64
 7ba:	f0 40       	sbci	r31, 0x00	; 0
 7bc:	df 01       	movw	r26, r30
 7be:	ae 5b       	subi	r26, 0xBE	; 190
 7c0:	bf 4f       	sbci	r27, 0xFF	; 255
 7c2:	8d 91       	ld	r24, X+
 7c4:	9c 91       	ld	r25, X
 7c6:	11 97       	sbiw	r26, 0x01	; 1
 7c8:	28 17       	cp	r18, r24
 7ca:	39 07       	cpc	r19, r25
 7cc:	19 f4       	brne	.+6      	; 0x7d4 <HardwareSerial::peek()+0x2e>
 7ce:	2f ef       	ldi	r18, 0xFF	; 255
 7d0:	3f ef       	ldi	r19, 0xFF	; 255
 7d2:	07 c0       	rjmp	.+14     	; 0x7e2 <HardwareSerial::peek()+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
 7d4:	8d 91       	ld	r24, X+
 7d6:	9c 91       	ld	r25, X
 7d8:	e8 0f       	add	r30, r24
 7da:	f9 1f       	adc	r31, r25
 7dc:	80 81       	ld	r24, Z
 7de:	28 2f       	mov	r18, r24
 7e0:	30 e0       	ldi	r19, 0x00	; 0
  }
}
 7e2:	c9 01       	movw	r24, r18
 7e4:	08 95       	ret

000007e6 <HardwareSerial::read()>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
 7e6:	dc 01       	movw	r26, r24
 7e8:	1c 96       	adiw	r26, 0x0c	; 12
 7ea:	ed 91       	ld	r30, X+
 7ec:	fc 91       	ld	r31, X
 7ee:	1d 97       	sbiw	r26, 0x0d	; 13
 7f0:	e0 5c       	subi	r30, 0xC0	; 192
 7f2:	ff 4f       	sbci	r31, 0xFF	; 255
 7f4:	20 81       	ld	r18, Z
 7f6:	31 81       	ldd	r19, Z+1	; 0x01
 7f8:	e0 54       	subi	r30, 0x40	; 64
 7fa:	f0 40       	sbci	r31, 0x00	; 0
 7fc:	df 01       	movw	r26, r30
 7fe:	ae 5b       	subi	r26, 0xBE	; 190
 800:	bf 4f       	sbci	r27, 0xFF	; 255
 802:	8d 91       	ld	r24, X+
 804:	9c 91       	ld	r25, X
 806:	11 97       	sbiw	r26, 0x01	; 1
 808:	28 17       	cp	r18, r24
 80a:	39 07       	cpc	r19, r25
 80c:	19 f4       	brne	.+6      	; 0x814 <HardwareSerial::read()+0x2e>
 80e:	2f ef       	ldi	r18, 0xFF	; 255
 810:	3f ef       	ldi	r19, 0xFF	; 255
 812:	10 c0       	rjmp	.+32     	; 0x834 <HardwareSerial::read()+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 814:	8d 91       	ld	r24, X+
 816:	9c 91       	ld	r25, X
 818:	11 97       	sbiw	r26, 0x01	; 1
 81a:	e8 0f       	add	r30, r24
 81c:	f9 1f       	adc	r31, r25
 81e:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
 820:	8d 91       	ld	r24, X+
 822:	9c 91       	ld	r25, X
 824:	11 97       	sbiw	r26, 0x01	; 1
 826:	01 96       	adiw	r24, 0x01	; 1
 828:	8f 73       	andi	r24, 0x3F	; 63
 82a:	90 70       	andi	r25, 0x00	; 0
 82c:	11 96       	adiw	r26, 0x01	; 1
 82e:	9c 93       	st	X, r25
 830:	8e 93       	st	-X, r24
    return c;
 832:	30 e0       	ldi	r19, 0x00	; 0
  }
}
 834:	c9 01       	movw	r24, r18
 836:	08 95       	ret

00000838 <HardwareSerial::flush()>:

void HardwareSerial::flush()
 838:	dc 01       	movw	r26, r24
{
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
 83a:	91 96       	adiw	r26, 0x21	; 33
 83c:	8c 91       	ld	r24, X
 83e:	91 97       	sbiw	r26, 0x21	; 33
 840:	88 23       	and	r24, r24
 842:	39 f0       	breq	.+14     	; 0x852 <HardwareSerial::flush()+0x1a>
 844:	54 96       	adiw	r26, 0x14	; 20
 846:	ed 91       	ld	r30, X+
 848:	fc 91       	ld	r31, X
 84a:	55 97       	sbiw	r26, 0x15	; 21
 84c:	80 81       	ld	r24, Z
 84e:	86 ff       	sbrs	r24, 6
 850:	f9 cf       	rjmp	.-14     	; 0x844 <HardwareSerial::flush()+0xc>
  transmitting = false;
 852:	91 96       	adiw	r26, 0x21	; 33
 854:	1c 92       	st	X, r1
}
 856:	08 95       	ret

00000858 <HardwareSerial::write(unsigned char)>:

size_t HardwareSerial::write(uint8_t c)
 858:	cf 93       	push	r28
 85a:	df 93       	push	r29
 85c:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
 85e:	ee 85       	ldd	r30, Y+14	; 0x0e
 860:	ff 85       	ldd	r31, Y+15	; 0x0f
 862:	e0 5c       	subi	r30, 0xC0	; 192
 864:	ff 4f       	sbci	r31, 0xFF	; 255
 866:	20 81       	ld	r18, Z
 868:	31 81       	ldd	r19, Z+1	; 0x01
 86a:	e0 54       	subi	r30, 0x40	; 64
 86c:	f0 40       	sbci	r31, 0x00	; 0
 86e:	2f 5f       	subi	r18, 0xFF	; 255
 870:	3f 4f       	sbci	r19, 0xFF	; 255
 872:	2f 73       	andi	r18, 0x3F	; 63
 874:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
 876:	df 01       	movw	r26, r30
 878:	ae 5b       	subi	r26, 0xBE	; 190
 87a:	bf 4f       	sbci	r27, 0xFF	; 255
 87c:	8d 91       	ld	r24, X+
 87e:	9c 91       	ld	r25, X
 880:	11 97       	sbiw	r26, 0x01	; 1
 882:	28 17       	cp	r18, r24
 884:	39 07       	cpc	r19, r25
 886:	d1 f3       	breq	.-12     	; 0x87c <HardwareSerial::write(unsigned char)+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
 888:	e0 5c       	subi	r30, 0xC0	; 192
 88a:	ff 4f       	sbci	r31, 0xFF	; 255
 88c:	80 81       	ld	r24, Z
 88e:	91 81       	ldd	r25, Z+1	; 0x01
 890:	e0 54       	subi	r30, 0x40	; 64
 892:	f0 40       	sbci	r31, 0x00	; 0
 894:	e8 0f       	add	r30, r24
 896:	f9 1f       	adc	r31, r25
 898:	60 83       	st	Z, r22
  _tx_buffer->head = i;
 89a:	ee 85       	ldd	r30, Y+14	; 0x0e
 89c:	ff 85       	ldd	r31, Y+15	; 0x0f
 89e:	e0 5c       	subi	r30, 0xC0	; 192
 8a0:	ff 4f       	sbci	r31, 0xFF	; 255
 8a2:	31 83       	std	Z+1, r19	; 0x01
 8a4:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
 8a6:	ee 89       	ldd	r30, Y+22	; 0x16
 8a8:	ff 89       	ldd	r31, Y+23	; 0x17
 8aa:	20 81       	ld	r18, Z
 8ac:	81 e0       	ldi	r24, 0x01	; 1
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	0f 8c       	ldd	r0, Y+31	; 0x1f
 8b2:	02 c0       	rjmp	.+4      	; 0x8b8 <HardwareSerial::write(unsigned char)+0x60>
 8b4:	88 0f       	add	r24, r24
 8b6:	99 1f       	adc	r25, r25
 8b8:	0a 94       	dec	r0
 8ba:	e2 f7       	brpl	.-8      	; 0x8b4 <HardwareSerial::write(unsigned char)+0x5c>
 8bc:	28 2b       	or	r18, r24
 8be:	20 83       	st	Z, r18
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
 8c0:	81 e0       	ldi	r24, 0x01	; 1
 8c2:	89 a3       	std	Y+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
 8c4:	ec 89       	ldd	r30, Y+20	; 0x14
 8c6:	fd 89       	ldd	r31, Y+21	; 0x15
 8c8:	80 81       	ld	r24, Z
 8ca:	80 64       	ori	r24, 0x40	; 64
 8cc:	80 83       	st	Z, r24
  
  return 1;
}
 8ce:	81 e0       	ldi	r24, 0x01	; 1
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	df 91       	pop	r29
 8d4:	cf 91       	pop	r28
 8d6:	08 95       	ret

000008d8 <global constructors keyed to rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 8d8:	10 92 e0 01 	sts	0x01E0, r1
 8dc:	10 92 df 01 	sts	0x01DF, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8e0:	88 ee       	ldi	r24, 0xE8	; 232
 8e2:	93 e0       	ldi	r25, 0x03	; 3
 8e4:	a0 e0       	ldi	r26, 0x00	; 0
 8e6:	b0 e0       	ldi	r27, 0x00	; 0
 8e8:	80 93 e1 01 	sts	0x01E1, r24
 8ec:	90 93 e2 01 	sts	0x01E2, r25
 8f0:	a0 93 e3 01 	sts	0x01E3, r26
 8f4:	b0 93 e4 01 	sts	0x01E4, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
 8f8:	8e e3       	ldi	r24, 0x3E	; 62
 8fa:	91 e0       	ldi	r25, 0x01	; 1
 8fc:	90 93 de 01 	sts	0x01DE, r25
 900:	80 93 dd 01 	sts	0x01DD, r24
{
  _rx_buffer = rx_buffer;
 904:	85 e5       	ldi	r24, 0x55	; 85
 906:	91 e0       	ldi	r25, 0x01	; 1
 908:	90 93 ea 01 	sts	0x01EA, r25
 90c:	80 93 e9 01 	sts	0x01E9, r24
  _tx_buffer = tx_buffer;
 910:	89 e9       	ldi	r24, 0x99	; 153
 912:	91 e0       	ldi	r25, 0x01	; 1
 914:	90 93 ec 01 	sts	0x01EC, r25
 918:	80 93 eb 01 	sts	0x01EB, r24
  _ubrrh = ubrrh;
 91c:	85 ec       	ldi	r24, 0xC5	; 197
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	90 93 ee 01 	sts	0x01EE, r25
 924:	80 93 ed 01 	sts	0x01ED, r24
  _ubrrl = ubrrl;
 928:	84 ec       	ldi	r24, 0xC4	; 196
 92a:	90 e0       	ldi	r25, 0x00	; 0
 92c:	90 93 f0 01 	sts	0x01F0, r25
 930:	80 93 ef 01 	sts	0x01EF, r24
  _ucsra = ucsra;
 934:	80 ec       	ldi	r24, 0xC0	; 192
 936:	90 e0       	ldi	r25, 0x00	; 0
 938:	90 93 f2 01 	sts	0x01F2, r25
 93c:	80 93 f1 01 	sts	0x01F1, r24
  _ucsrb = ucsrb;
 940:	81 ec       	ldi	r24, 0xC1	; 193
 942:	90 e0       	ldi	r25, 0x00	; 0
 944:	90 93 f4 01 	sts	0x01F4, r25
 948:	80 93 f3 01 	sts	0x01F3, r24
  _ucsrc = ucsrc;
 94c:	82 ec       	ldi	r24, 0xC2	; 194
 94e:	90 e0       	ldi	r25, 0x00	; 0
 950:	90 93 f6 01 	sts	0x01F6, r25
 954:	80 93 f5 01 	sts	0x01F5, r24
  _udr = udr;
 958:	86 ec       	ldi	r24, 0xC6	; 198
 95a:	90 e0       	ldi	r25, 0x00	; 0
 95c:	90 93 f8 01 	sts	0x01F8, r25
 960:	80 93 f7 01 	sts	0x01F7, r24
  _rxen = rxen;
 964:	84 e0       	ldi	r24, 0x04	; 4
 966:	80 93 f9 01 	sts	0x01F9, r24
  _txen = txen;
 96a:	83 e0       	ldi	r24, 0x03	; 3
 96c:	80 93 fa 01 	sts	0x01FA, r24
  _rxcie = rxcie;
 970:	87 e0       	ldi	r24, 0x07	; 7
 972:	80 93 fb 01 	sts	0x01FB, r24
  _udrie = udrie;
 976:	85 e0       	ldi	r24, 0x05	; 5
 978:	80 93 fc 01 	sts	0x01FC, r24
  _u2x = u2x;
 97c:	81 e0       	ldi	r24, 0x01	; 1
 97e:	80 93 fd 01 	sts	0x01FD, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
 982:	08 95       	ret

00000984 <main>:
#include <Arduino.h>

int main(void)
 984:	cf 93       	push	r28
 986:	df 93       	push	r29
{
	init();
 988:	0e 94 82 02 	call	0x504	; 0x504 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 98c:	0e 94 a8 01 	call	0x350	; 0x350 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 990:	c6 ef       	ldi	r28, 0xF6	; 246
 992:	d2 e0       	ldi	r29, 0x02	; 2
#endif
	
	setup();
    
	for (;;) {
		loop();
 994:	0e 94 fd 00 	call	0x1fa	; 0x1fa <loop>
		if (serialEventRun) serialEventRun();
 998:	20 97       	sbiw	r28, 0x00	; 0
 99a:	e1 f3       	breq	.-8      	; 0x994 <main+0x10>
 99c:	0e 94 f6 02 	call	0x5ec	; 0x5ec <serialEventRun()>
 9a0:	f9 cf       	rjmp	.-14     	; 0x994 <main+0x10>

000009a2 <Print::write(unsigned char const*, unsigned int)>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
 9a2:	cf 92       	push	r12
 9a4:	df 92       	push	r13
 9a6:	ef 92       	push	r14
 9a8:	ff 92       	push	r15
 9aa:	0f 93       	push	r16
 9ac:	1f 93       	push	r17
 9ae:	cf 93       	push	r28
 9b0:	df 93       	push	r29
 9b2:	7c 01       	movw	r14, r24
 9b4:	6b 01       	movw	r12, r22
 9b6:	8a 01       	movw	r16, r20
 9b8:	c0 e0       	ldi	r28, 0x00	; 0
 9ba:	d0 e0       	ldi	r29, 0x00	; 0
 9bc:	0f c0       	rjmp	.+30     	; 0x9dc <Print::write(unsigned char const*, unsigned int)+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
 9be:	d6 01       	movw	r26, r12
 9c0:	6d 91       	ld	r22, X+
 9c2:	6d 01       	movw	r12, r26
 9c4:	d7 01       	movw	r26, r14
 9c6:	ed 91       	ld	r30, X+
 9c8:	fc 91       	ld	r31, X
 9ca:	01 90       	ld	r0, Z+
 9cc:	f0 81       	ld	r31, Z
 9ce:	e0 2d       	mov	r30, r0
 9d0:	c7 01       	movw	r24, r14
 9d2:	09 95       	icall
 9d4:	c8 0f       	add	r28, r24
 9d6:	d9 1f       	adc	r29, r25
 9d8:	01 50       	subi	r16, 0x01	; 1
 9da:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 9dc:	01 15       	cp	r16, r1
 9de:	11 05       	cpc	r17, r1
 9e0:	71 f7       	brne	.-36     	; 0x9be <Print::write(unsigned char const*, unsigned int)+0x1c>
    n += write(*buffer++);
  }
  return n;
}
 9e2:	ce 01       	movw	r24, r28
 9e4:	df 91       	pop	r29
 9e6:	cf 91       	pop	r28
 9e8:	1f 91       	pop	r17
 9ea:	0f 91       	pop	r16
 9ec:	ff 90       	pop	r15
 9ee:	ef 90       	pop	r14
 9f0:	df 90       	pop	r13
 9f2:	cf 90       	pop	r12
 9f4:	08 95       	ret

000009f6 <Print::print(__FlashStringHelper const*)>:

size_t Print::print(const __FlashStringHelper *ifsh)
 9f6:	ef 92       	push	r14
 9f8:	ff 92       	push	r15
 9fa:	0f 93       	push	r16
 9fc:	1f 93       	push	r17
 9fe:	cf 93       	push	r28
 a00:	df 93       	push	r29
 a02:	7c 01       	movw	r14, r24
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
 a04:	8b 01       	movw	r16, r22
 a06:	c0 e0       	ldi	r28, 0x00	; 0
 a08:	d0 e0       	ldi	r29, 0x00	; 0
 a0a:	f8 01       	movw	r30, r16
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
 a0c:	0f 5f       	subi	r16, 0xFF	; 255
 a0e:	1f 4f       	sbci	r17, 0xFF	; 255
 a10:	64 91       	lpm	r22, Z+
    if (c == 0) break;
 a12:	66 23       	and	r22, r22
 a14:	59 f0       	breq	.+22     	; 0xa2c <Print::print(__FlashStringHelper const*)+0x36>
    n += write(c);
 a16:	d7 01       	movw	r26, r14
 a18:	ed 91       	ld	r30, X+
 a1a:	fc 91       	ld	r31, X
 a1c:	01 90       	ld	r0, Z+
 a1e:	f0 81       	ld	r31, Z
 a20:	e0 2d       	mov	r30, r0
 a22:	c7 01       	movw	r24, r14
 a24:	09 95       	icall
 a26:	c8 0f       	add	r28, r24
 a28:	d9 1f       	adc	r29, r25
 a2a:	ef cf       	rjmp	.-34     	; 0xa0a <Print::print(__FlashStringHelper const*)+0x14>
  }
  return n;
}
 a2c:	ce 01       	movw	r24, r28
 a2e:	df 91       	pop	r29
 a30:	cf 91       	pop	r28
 a32:	1f 91       	pop	r17
 a34:	0f 91       	pop	r16
 a36:	ff 90       	pop	r15
 a38:	ef 90       	pop	r14
 a3a:	08 95       	ret

00000a3c <Print::println()>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
 a3c:	ef 92       	push	r14
 a3e:	ff 92       	push	r15
 a40:	0f 93       	push	r16
 a42:	1f 93       	push	r17
 a44:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 a46:	dc 01       	movw	r26, r24
 a48:	ed 91       	ld	r30, X+
 a4a:	fc 91       	ld	r31, X
 a4c:	01 90       	ld	r0, Z+
 a4e:	f0 81       	ld	r31, Z
 a50:	e0 2d       	mov	r30, r0
 a52:	6d e0       	ldi	r22, 0x0D	; 13
 a54:	09 95       	icall
 a56:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
 a58:	d8 01       	movw	r26, r16
 a5a:	ed 91       	ld	r30, X+
 a5c:	fc 91       	ld	r31, X
 a5e:	01 90       	ld	r0, Z+
 a60:	f0 81       	ld	r31, Z
 a62:	e0 2d       	mov	r30, r0
 a64:	c8 01       	movw	r24, r16
 a66:	6a e0       	ldi	r22, 0x0A	; 10
 a68:	09 95       	icall
 a6a:	9c 01       	movw	r18, r24
 a6c:	2e 0d       	add	r18, r14
 a6e:	3f 1d       	adc	r19, r15
 a70:	c9 01       	movw	r24, r18
 a72:	1f 91       	pop	r17
 a74:	0f 91       	pop	r16
 a76:	ff 90       	pop	r15
 a78:	ef 90       	pop	r14
 a7a:	08 95       	ret

00000a7c <Print::write(char const*)>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 a7c:	cf 93       	push	r28
 a7e:	df 93       	push	r29
 a80:	ec 01       	movw	r28, r24
      if (str == NULL) return 0;
 a82:	61 15       	cp	r22, r1
 a84:	71 05       	cpc	r23, r1
 a86:	19 f4       	brne	.+6      	; 0xa8e <Print::write(char const*)+0x12>
 a88:	20 e0       	ldi	r18, 0x00	; 0
 a8a:	30 e0       	ldi	r19, 0x00	; 0
 a8c:	0f c0       	rjmp	.+30     	; 0xaac <Print::write(char const*)+0x30>
      return write((const uint8_t *)str, strlen(str));
 a8e:	db 01       	movw	r26, r22
 a90:	0d 90       	ld	r0, X+
 a92:	00 20       	and	r0, r0
 a94:	e9 f7       	brne	.-6      	; 0xa90 <Print::write(char const*)+0x14>
 a96:	11 97       	sbiw	r26, 0x01	; 1
 a98:	a6 1b       	sub	r26, r22
 a9a:	b7 0b       	sbc	r27, r23
 a9c:	e8 81       	ld	r30, Y
 a9e:	f9 81       	ldd	r31, Y+1	; 0x01
 aa0:	02 80       	ldd	r0, Z+2	; 0x02
 aa2:	f3 81       	ldd	r31, Z+3	; 0x03
 aa4:	e0 2d       	mov	r30, r0
 aa6:	ad 01       	movw	r20, r26
 aa8:	09 95       	icall
 aaa:	9c 01       	movw	r18, r24
    }
 aac:	c9 01       	movw	r24, r18
 aae:	df 91       	pop	r29
 ab0:	cf 91       	pop	r28
 ab2:	08 95       	ret

00000ab4 <Print::printNumber(unsigned long, unsigned char)>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 ab4:	4f 92       	push	r4
 ab6:	5f 92       	push	r5
 ab8:	7f 92       	push	r7
 aba:	8f 92       	push	r8
 abc:	9f 92       	push	r9
 abe:	af 92       	push	r10
 ac0:	bf 92       	push	r11
 ac2:	cf 92       	push	r12
 ac4:	df 92       	push	r13
 ac6:	ef 92       	push	r14
 ac8:	ff 92       	push	r15
 aca:	0f 93       	push	r16
 acc:	1f 93       	push	r17
 ace:	df 93       	push	r29
 ad0:	cf 93       	push	r28
 ad2:	cd b7       	in	r28, 0x3d	; 61
 ad4:	de b7       	in	r29, 0x3e	; 62
 ad6:	a1 97       	sbiw	r28, 0x21	; 33
 ad8:	0f b6       	in	r0, 0x3f	; 63
 ada:	f8 94       	cli
 adc:	de bf       	out	0x3e, r29	; 62
 ade:	0f be       	out	0x3f, r0	; 63
 ae0:	cd bf       	out	0x3d, r28	; 61
 ae2:	2c 01       	movw	r4, r24
 ae4:	74 2e       	mov	r7, r20
 ae6:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 ae8:	22 30       	cpi	r18, 0x02	; 2
 aea:	08 f4       	brcc	.+2      	; 0xaee <Print::printNumber(unsigned long, unsigned char)+0x3a>
 aec:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 aee:	19 a2       	std	Y+33, r1	; 0x21
 af0:	31 e2       	ldi	r19, 0x21	; 33
 af2:	c3 2e       	mov	r12, r19
 af4:	d1 2c       	mov	r13, r1
 af6:	cc 0e       	add	r12, r28
 af8:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 afa:	82 2e       	mov	r8, r18
 afc:	99 24       	eor	r9, r9
 afe:	aa 24       	eor	r10, r10
 b00:	bb 24       	eor	r11, r11
 b02:	67 2d       	mov	r22, r7
 b04:	75 2f       	mov	r23, r21
 b06:	a5 01       	movw	r20, r10
 b08:	94 01       	movw	r18, r8
 b0a:	0e 94 43 06 	call	0xc86	; 0xc86 <__udivmodsi4>
 b0e:	79 01       	movw	r14, r18
 b10:	8a 01       	movw	r16, r20
    char c = m - base * n;
 b12:	c8 01       	movw	r24, r16
 b14:	b7 01       	movw	r22, r14
 b16:	a5 01       	movw	r20, r10
 b18:	94 01       	movw	r18, r8
 b1a:	0e 94 24 06 	call	0xc48	; 0xc48 <__mulsi3>
 b1e:	47 2d       	mov	r20, r7
 b20:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 b22:	08 94       	sec
 b24:	c1 08       	sbc	r12, r1
 b26:	d1 08       	sbc	r13, r1
 b28:	4a 30       	cpi	r20, 0x0A	; 10
 b2a:	14 f4       	brge	.+4      	; 0xb30 <Print::printNumber(unsigned long, unsigned char)+0x7c>
 b2c:	40 5d       	subi	r20, 0xD0	; 208
 b2e:	01 c0       	rjmp	.+2      	; 0xb32 <Print::printNumber(unsigned long, unsigned char)+0x7e>
 b30:	49 5c       	subi	r20, 0xC9	; 201
 b32:	f6 01       	movw	r30, r12
 b34:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 b36:	e1 14       	cp	r14, r1
 b38:	f1 04       	cpc	r15, r1
 b3a:	01 05       	cpc	r16, r1
 b3c:	11 05       	cpc	r17, r1
 b3e:	21 f0       	breq	.+8      	; 0xb48 <Print::printNumber(unsigned long, unsigned char)+0x94>
 b40:	7e 2c       	mov	r7, r14
 b42:	5f 2d       	mov	r21, r15
 b44:	c8 01       	movw	r24, r16
 b46:	dd cf       	rjmp	.-70     	; 0xb02 <Print::printNumber(unsigned long, unsigned char)+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 b48:	c2 01       	movw	r24, r4
 b4a:	b6 01       	movw	r22, r12
 b4c:	0e 94 3e 05 	call	0xa7c	; 0xa7c <Print::write(char const*)>
}
 b50:	a1 96       	adiw	r28, 0x21	; 33
 b52:	0f b6       	in	r0, 0x3f	; 63
 b54:	f8 94       	cli
 b56:	de bf       	out	0x3e, r29	; 62
 b58:	0f be       	out	0x3f, r0	; 63
 b5a:	cd bf       	out	0x3d, r28	; 61
 b5c:	cf 91       	pop	r28
 b5e:	df 91       	pop	r29
 b60:	1f 91       	pop	r17
 b62:	0f 91       	pop	r16
 b64:	ff 90       	pop	r15
 b66:	ef 90       	pop	r14
 b68:	df 90       	pop	r13
 b6a:	cf 90       	pop	r12
 b6c:	bf 90       	pop	r11
 b6e:	af 90       	pop	r10
 b70:	9f 90       	pop	r9
 b72:	8f 90       	pop	r8
 b74:	7f 90       	pop	r7
 b76:	5f 90       	pop	r5
 b78:	4f 90       	pop	r4
 b7a:	08 95       	ret

00000b7c <Print::print(long, int)>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
 b7c:	cf 92       	push	r12
 b7e:	df 92       	push	r13
 b80:	ef 92       	push	r14
 b82:	ff 92       	push	r15
 b84:	0f 93       	push	r16
 b86:	1f 93       	push	r17
 b88:	cf 93       	push	r28
 b8a:	df 93       	push	r29
 b8c:	ec 01       	movw	r28, r24
 b8e:	6a 01       	movw	r12, r20
 b90:	7b 01       	movw	r14, r22
{
  if (base == 0) {
 b92:	21 15       	cp	r18, r1
 b94:	31 05       	cpc	r19, r1
 b96:	41 f4       	brne	.+16     	; 0xba8 <Print::print(long, int)+0x2c>
    return write(n);
 b98:	e8 81       	ld	r30, Y
 b9a:	f9 81       	ldd	r31, Y+1	; 0x01
 b9c:	01 90       	ld	r0, Z+
 b9e:	f0 81       	ld	r31, Z
 ba0:	e0 2d       	mov	r30, r0
 ba2:	64 2f       	mov	r22, r20
 ba4:	09 95       	icall
 ba6:	1f c0       	rjmp	.+62     	; 0xbe6 <Print::print(long, int)+0x6a>
  } else if (base == 10) {
 ba8:	2a 30       	cpi	r18, 0x0A	; 10
 baa:	31 05       	cpc	r19, r1
 bac:	d1 f4       	brne	.+52     	; 0xbe2 <Print::print(long, int)+0x66>
    if (n < 0) {
 bae:	77 ff       	sbrs	r23, 7
 bb0:	17 c0       	rjmp	.+46     	; 0xbe0 <Print::print(long, int)+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 bb2:	e8 81       	ld	r30, Y
 bb4:	f9 81       	ldd	r31, Y+1	; 0x01
 bb6:	01 90       	ld	r0, Z+
 bb8:	f0 81       	ld	r31, Z
 bba:	e0 2d       	mov	r30, r0
 bbc:	6d e2       	ldi	r22, 0x2D	; 45
 bbe:	09 95       	icall
 bc0:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
 bc2:	44 27       	eor	r20, r20
 bc4:	55 27       	eor	r21, r21
 bc6:	ba 01       	movw	r22, r20
 bc8:	4c 19       	sub	r20, r12
 bca:	5d 09       	sbc	r21, r13
 bcc:	6e 09       	sbc	r22, r14
 bce:	7f 09       	sbc	r23, r15
 bd0:	ce 01       	movw	r24, r28
 bd2:	2a e0       	ldi	r18, 0x0A	; 10
 bd4:	0e 94 5a 05 	call	0xab4	; 0xab4 <Print::printNumber(unsigned long, unsigned char)>
 bd8:	98 01       	movw	r18, r16
 bda:	28 0f       	add	r18, r24
 bdc:	39 1f       	adc	r19, r25
 bde:	04 c0       	rjmp	.+8      	; 0xbe8 <Print::print(long, int)+0x6c>
    }
    return printNumber(n, 10);
 be0:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
 be2:	0e 94 5a 05 	call	0xab4	; 0xab4 <Print::printNumber(unsigned long, unsigned char)>
 be6:	9c 01       	movw	r18, r24
  }
}
 be8:	c9 01       	movw	r24, r18
 bea:	df 91       	pop	r29
 bec:	cf 91       	pop	r28
 bee:	1f 91       	pop	r17
 bf0:	0f 91       	pop	r16
 bf2:	ff 90       	pop	r15
 bf4:	ef 90       	pop	r14
 bf6:	df 90       	pop	r13
 bf8:	cf 90       	pop	r12
 bfa:	08 95       	ret

00000bfc <Print::print(int, int)>:
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
 bfc:	ef 92       	push	r14
 bfe:	ff 92       	push	r15
 c00:	0f 93       	push	r16
 c02:	1f 93       	push	r17
 c04:	7b 01       	movw	r14, r22
 c06:	9a 01       	movw	r18, r20
{
  return print((long) n, base);
 c08:	00 27       	eor	r16, r16
 c0a:	f7 fc       	sbrc	r15, 7
 c0c:	00 95       	com	r16
 c0e:	10 2f       	mov	r17, r16
 c10:	b8 01       	movw	r22, r16
 c12:	a7 01       	movw	r20, r14
 c14:	0e 94 be 05 	call	0xb7c	; 0xb7c <Print::print(long, int)>
}
 c18:	1f 91       	pop	r17
 c1a:	0f 91       	pop	r16
 c1c:	ff 90       	pop	r15
 c1e:	ef 90       	pop	r14
 c20:	08 95       	ret

00000c22 <Print::println(char const*)>:
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
 c22:	ef 92       	push	r14
 c24:	ff 92       	push	r15
 c26:	0f 93       	push	r16
 c28:	1f 93       	push	r17
 c2a:	7c 01       	movw	r14, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 c2c:	0e 94 3e 05 	call	0xa7c	; 0xa7c <Print::write(char const*)>
 c30:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 c32:	c7 01       	movw	r24, r14
 c34:	0e 94 1e 05 	call	0xa3c	; 0xa3c <Print::println()>
 c38:	08 0f       	add	r16, r24
 c3a:	19 1f       	adc	r17, r25
  return n;
}
 c3c:	c8 01       	movw	r24, r16
 c3e:	1f 91       	pop	r17
 c40:	0f 91       	pop	r16
 c42:	ff 90       	pop	r15
 c44:	ef 90       	pop	r14
 c46:	08 95       	ret

00000c48 <__mulsi3>:
 c48:	62 9f       	mul	r22, r18
 c4a:	d0 01       	movw	r26, r0
 c4c:	73 9f       	mul	r23, r19
 c4e:	f0 01       	movw	r30, r0
 c50:	82 9f       	mul	r24, r18
 c52:	e0 0d       	add	r30, r0
 c54:	f1 1d       	adc	r31, r1
 c56:	64 9f       	mul	r22, r20
 c58:	e0 0d       	add	r30, r0
 c5a:	f1 1d       	adc	r31, r1
 c5c:	92 9f       	mul	r25, r18
 c5e:	f0 0d       	add	r31, r0
 c60:	83 9f       	mul	r24, r19
 c62:	f0 0d       	add	r31, r0
 c64:	74 9f       	mul	r23, r20
 c66:	f0 0d       	add	r31, r0
 c68:	65 9f       	mul	r22, r21
 c6a:	f0 0d       	add	r31, r0
 c6c:	99 27       	eor	r25, r25
 c6e:	72 9f       	mul	r23, r18
 c70:	b0 0d       	add	r27, r0
 c72:	e1 1d       	adc	r30, r1
 c74:	f9 1f       	adc	r31, r25
 c76:	63 9f       	mul	r22, r19
 c78:	b0 0d       	add	r27, r0
 c7a:	e1 1d       	adc	r30, r1
 c7c:	f9 1f       	adc	r31, r25
 c7e:	bd 01       	movw	r22, r26
 c80:	cf 01       	movw	r24, r30
 c82:	11 24       	eor	r1, r1
 c84:	08 95       	ret

00000c86 <__udivmodsi4>:
 c86:	a1 e2       	ldi	r26, 0x21	; 33
 c88:	1a 2e       	mov	r1, r26
 c8a:	aa 1b       	sub	r26, r26
 c8c:	bb 1b       	sub	r27, r27
 c8e:	fd 01       	movw	r30, r26
 c90:	0d c0       	rjmp	.+26     	; 0xcac <__udivmodsi4_ep>

00000c92 <__udivmodsi4_loop>:
 c92:	aa 1f       	adc	r26, r26
 c94:	bb 1f       	adc	r27, r27
 c96:	ee 1f       	adc	r30, r30
 c98:	ff 1f       	adc	r31, r31
 c9a:	a2 17       	cp	r26, r18
 c9c:	b3 07       	cpc	r27, r19
 c9e:	e4 07       	cpc	r30, r20
 ca0:	f5 07       	cpc	r31, r21
 ca2:	20 f0       	brcs	.+8      	; 0xcac <__udivmodsi4_ep>
 ca4:	a2 1b       	sub	r26, r18
 ca6:	b3 0b       	sbc	r27, r19
 ca8:	e4 0b       	sbc	r30, r20
 caa:	f5 0b       	sbc	r31, r21

00000cac <__udivmodsi4_ep>:
 cac:	66 1f       	adc	r22, r22
 cae:	77 1f       	adc	r23, r23
 cb0:	88 1f       	adc	r24, r24
 cb2:	99 1f       	adc	r25, r25
 cb4:	1a 94       	dec	r1
 cb6:	69 f7       	brne	.-38     	; 0xc92 <__udivmodsi4_loop>
 cb8:	60 95       	com	r22
 cba:	70 95       	com	r23
 cbc:	80 95       	com	r24
 cbe:	90 95       	com	r25
 cc0:	9b 01       	movw	r18, r22
 cc2:	ac 01       	movw	r20, r24
 cc4:	bd 01       	movw	r22, r26
 cc6:	cf 01       	movw	r24, r30
 cc8:	08 95       	ret

00000cca <__tablejump2__>:
 cca:	ee 0f       	add	r30, r30
 ccc:	ff 1f       	adc	r31, r31

00000cce <__tablejump__>:
 cce:	05 90       	lpm	r0, Z+
 cd0:	f4 91       	lpm	r31, Z+
 cd2:	e0 2d       	mov	r30, r0
 cd4:	09 94       	ijmp

00000cd6 <_exit>:
 cd6:	f8 94       	cli

00000cd8 <__stop_program>:
 cd8:	ff cf       	rjmp	.-2      	; 0xcd8 <__stop_program>
