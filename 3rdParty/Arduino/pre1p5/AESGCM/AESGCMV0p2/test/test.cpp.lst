
/var/folders/km/s_tzntf16nzg5bdh5n6g6lz40000gn/T/build6197327113182422462.tmp/test.cpp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  0000384a  000038de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000384a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b5  00800126  00800126  00003904  2**0
                  ALLOC
  3 .debug_aranges 00000618  00000000  00000000  00003904  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000cf8  00000000  00000000  00003f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000865a  00000000  00000000  00004c14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000017cb  00000000  00000000  0000d26e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000043db  00000000  00000000  0000ea39  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000a90  00000000  00000000  00012e14  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001c04  00000000  00000000  000138a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00005932  00000000  00000000  000154a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 00008959  00000000  00000000  0001adda  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005f8  00000000  00000000  00023733  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

int aes_gmac(
		void *aes, // DHD20150614
		const u8 *key, size_t key_len, const u8 *iv, size_t iv_len,
	    const u8 *aad, size_t aad_len, u8 *tag)
{
       0:	0c 94 e8 04 	jmp	0x9d0	; 0x9d0 <__ctors_end>
	timer0_millis = m;
	timer0_overflow_count++;
}

unsigned long millis()
{
       4:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
       8:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
       c:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
      10:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
      14:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
      18:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
      1c:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
      20:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
      24:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
      28:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
      2c:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
      30:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
      34:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
      38:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
      3c:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
      40:	0c 94 8d 17 	jmp	0x2f1a	; 0x2f1a <__vector_16>
      44:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
      48:	0c 94 6a 18 	jmp	0x30d4	; 0x30d4 <__vector_18>
      4c:	0c 94 b8 18 	jmp	0x3170	; 0x3170 <__vector_19>
      50:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
      54:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
      58:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
      5c:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
      60:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
      64:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>

00000068 <loop::__c>:
      68:	25 25 25 20 41 6c 6c 20 74 65 73 74 73 20 63 6f     %%% All tests co
      78:	6d 70 6c 65 74 65 64 20 4f 4b 2c 20 72 6f 75 6e     mpleted OK, roun
      88:	64 20 00                                            d .

0000008b <loop::__c>:
      8b:	54 65 73 74 73 20 73 74 61 72 74 69 6e 67 2e 2e     Tests starting..
      9b:	2e 20 00                                            . .

0000009e <error(int, int)::__c>:
      9e:	20 61 74 20 6c 69 6e 65 20 00                        at line .

000000a8 <error(int, int)::__c>:
      a8:	20 3d 30 78 00                                       =0x.

000000ad <error(int, int)::__c>:
      ad:	2a 2a 2a 54 65 73 74 20 46 41 49 4c 45 44 2a 2a     ***Test FAILED**
      bd:	2a 20 76 61 6c 3d 00                                * val=.

000000c4 <Te0>:
      c4:	a5 63 63 c6 84 7c 7c f8 99 77 77 ee 8d 7b 7b f6     .cc..||..ww..{{.
      d4:	0d f2 f2 ff bd 6b 6b d6 b1 6f 6f de 54 c5 c5 91     .....kk..oo.T...
      e4:	50 30 30 60 03 01 01 02 a9 67 67 ce 7d 2b 2b 56     P00`.....gg.}++V
      f4:	19 fe fe e7 62 d7 d7 b5 e6 ab ab 4d 9a 76 76 ec     ....b......M.vv.
     104:	45 ca ca 8f 9d 82 82 1f 40 c9 c9 89 87 7d 7d fa     E.......@....}}.
     114:	15 fa fa ef eb 59 59 b2 c9 47 47 8e 0b f0 f0 fb     .....YY..GG.....
     124:	ec ad ad 41 67 d4 d4 b3 fd a2 a2 5f ea af af 45     ...Ag......_...E
     134:	bf 9c 9c 23 f7 a4 a4 53 96 72 72 e4 5b c0 c0 9b     ...#...S.rr.[...
     144:	c2 b7 b7 75 1c fd fd e1 ae 93 93 3d 6a 26 26 4c     ...u.......=j&&L
     154:	5a 36 36 6c 41 3f 3f 7e 02 f7 f7 f5 4f cc cc 83     Z66lA??~....O...
     164:	5c 34 34 68 f4 a5 a5 51 34 e5 e5 d1 08 f1 f1 f9     \44h...Q4.......
     174:	93 71 71 e2 73 d8 d8 ab 53 31 31 62 3f 15 15 2a     .qq.s...S11b?..*
     184:	0c 04 04 08 52 c7 c7 95 65 23 23 46 5e c3 c3 9d     ....R...e##F^...
     194:	28 18 18 30 a1 96 96 37 0f 05 05 0a b5 9a 9a 2f     (..0...7......./
     1a4:	09 07 07 0e 36 12 12 24 9b 80 80 1b 3d e2 e2 df     ....6..$....=...
     1b4:	26 eb eb cd 69 27 27 4e cd b2 b2 7f 9f 75 75 ea     &...i''N.....uu.
     1c4:	1b 09 09 12 9e 83 83 1d 74 2c 2c 58 2e 1a 1a 34     ........t,,X...4
     1d4:	2d 1b 1b 36 b2 6e 6e dc ee 5a 5a b4 fb a0 a0 5b     -..6.nn..ZZ....[
     1e4:	f6 52 52 a4 4d 3b 3b 76 61 d6 d6 b7 ce b3 b3 7d     .RR.M;;va......}
     1f4:	7b 29 29 52 3e e3 e3 dd 71 2f 2f 5e 97 84 84 13     {))R>...q//^....
     204:	f5 53 53 a6 68 d1 d1 b9 00 00 00 00 2c ed ed c1     .SS.h.......,...
     214:	60 20 20 40 1f fc fc e3 c8 b1 b1 79 ed 5b 5b b6     `  @.......y.[[.
     224:	be 6a 6a d4 46 cb cb 8d d9 be be 67 4b 39 39 72     .jj.F......gK99r
     234:	de 4a 4a 94 d4 4c 4c 98 e8 58 58 b0 4a cf cf 85     .JJ..LL..XX.J...
     244:	6b d0 d0 bb 2a ef ef c5 e5 aa aa 4f 16 fb fb ed     k...*......O....
     254:	c5 43 43 86 d7 4d 4d 9a 55 33 33 66 94 85 85 11     .CC..MM.U33f....
     264:	cf 45 45 8a 10 f9 f9 e9 06 02 02 04 81 7f 7f fe     .EE.............
     274:	f0 50 50 a0 44 3c 3c 78 ba 9f 9f 25 e3 a8 a8 4b     .PP.D<<x...%...K
     284:	f3 51 51 a2 fe a3 a3 5d c0 40 40 80 8a 8f 8f 05     .QQ....].@@.....
     294:	ad 92 92 3f bc 9d 9d 21 48 38 38 70 04 f5 f5 f1     ...?...!H88p....
     2a4:	df bc bc 63 c1 b6 b6 77 75 da da af 63 21 21 42     ...c...wu...c!!B
     2b4:	30 10 10 20 1a ff ff e5 0e f3 f3 fd 6d d2 d2 bf     0.. ........m...
     2c4:	4c cd cd 81 14 0c 0c 18 35 13 13 26 2f ec ec c3     L.......5..&/...
     2d4:	e1 5f 5f be a2 97 97 35 cc 44 44 88 39 17 17 2e     .__....5.DD.9...
     2e4:	57 c4 c4 93 f2 a7 a7 55 82 7e 7e fc 47 3d 3d 7a     W......U.~~.G==z
     2f4:	ac 64 64 c8 e7 5d 5d ba 2b 19 19 32 95 73 73 e6     .dd..]].+..2.ss.
     304:	a0 60 60 c0 98 81 81 19 d1 4f 4f 9e 7f dc dc a3     .``......OO.....
     314:	66 22 22 44 7e 2a 2a 54 ab 90 90 3b 83 88 88 0b     f""D~**T...;....
     324:	ca 46 46 8c 29 ee ee c7 d3 b8 b8 6b 3c 14 14 28     .FF.)......k<..(
     334:	79 de de a7 e2 5e 5e bc 1d 0b 0b 16 76 db db ad     y....^^.....v...
     344:	3b e0 e0 db 56 32 32 64 4e 3a 3a 74 1e 0a 0a 14     ;...V22dN::t....
     354:	db 49 49 92 0a 06 06 0c 6c 24 24 48 e4 5c 5c b8     .II.....l$$H.\\.
     364:	5d c2 c2 9f 6e d3 d3 bd ef ac ac 43 a6 62 62 c4     ]...n......C.bb.
     374:	a8 91 91 39 a4 95 95 31 37 e4 e4 d3 8b 79 79 f2     ...9...17....yy.
     384:	32 e7 e7 d5 43 c8 c8 8b 59 37 37 6e b7 6d 6d da     2...C...Y77n.mm.
     394:	8c 8d 8d 01 64 d5 d5 b1 d2 4e 4e 9c e0 a9 a9 49     ....d....NN....I
     3a4:	b4 6c 6c d8 fa 56 56 ac 07 f4 f4 f3 25 ea ea cf     .ll..VV.....%...
     3b4:	af 65 65 ca 8e 7a 7a f4 e9 ae ae 47 18 08 08 10     .ee..zz....G....
     3c4:	d5 ba ba 6f 88 78 78 f0 6f 25 25 4a 72 2e 2e 5c     ...o.xx.o%%Jr..\
     3d4:	24 1c 1c 38 f1 a6 a6 57 c7 b4 b4 73 51 c6 c6 97     $..8...W...sQ...
     3e4:	23 e8 e8 cb 7c dd dd a1 9c 74 74 e8 21 1f 1f 3e     #...|....tt.!..>
     3f4:	dd 4b 4b 96 dc bd bd 61 86 8b 8b 0d 85 8a 8a 0f     .KK....a........
     404:	90 70 70 e0 42 3e 3e 7c c4 b5 b5 71 aa 66 66 cc     .pp.B>>|...q.ff.
     414:	d8 48 48 90 05 03 03 06 01 f6 f6 f7 12 0e 0e 1c     .HH.............
     424:	a3 61 61 c2 5f 35 35 6a f9 57 57 ae d0 b9 b9 69     .aa._55j.WW....i
     434:	91 86 86 17 58 c1 c1 99 27 1d 1d 3a b9 9e 9e 27     ....X...'..:...'
     444:	38 e1 e1 d9 13 f8 f8 eb b3 98 98 2b 33 11 11 22     8..........+3.."
     454:	bb 69 69 d2 70 d9 d9 a9 89 8e 8e 07 a7 94 94 33     .ii.p..........3
     464:	b6 9b 9b 2d 22 1e 1e 3c 92 87 87 15 20 e9 e9 c9     ...-"..<.... ...
     474:	49 ce ce 87 ff 55 55 aa 78 28 28 50 7a df df a5     I....UU.x((Pz...
     484:	8f 8c 8c 03 f8 a1 a1 59 80 89 89 09 17 0d 0d 1a     .......Y........
     494:	da bf bf 65 31 e6 e6 d7 c6 42 42 84 b8 68 68 d0     ...e1....BB..hh.
     4a4:	c3 41 41 82 b0 99 99 29 77 2d 2d 5a 11 0f 0f 1e     .AA....)w--Z....
     4b4:	cb b0 b0 7b fc 54 54 a8 d6 bb bb 6d 3a 16 16 2c     ...{.TT....m:..,

000004c4 <Td0>:
     4c4:	50 a7 f4 51 53 65 41 7e c3 a4 17 1a 96 5e 27 3a     P..QSeA~.....^':
     4d4:	cb 6b ab 3b f1 45 9d 1f ab 58 fa ac 93 03 e3 4b     .k.;.E...X.....K
     4e4:	55 fa 30 20 f6 6d 76 ad 91 76 cc 88 25 4c 02 f5     U.0 .mv..v..%L..
     4f4:	fc d7 e5 4f d7 cb 2a c5 80 44 35 26 8f a3 62 b5     ...O..*..D5&..b.
     504:	49 5a b1 de 67 1b ba 25 98 0e ea 45 e1 c0 fe 5d     IZ..g..%...E...]
     514:	02 75 2f c3 12 f0 4c 81 a3 97 46 8d c6 f9 d3 6b     .u/...L...F....k
     524:	e7 5f 8f 03 95 9c 92 15 eb 7a 6d bf da 59 52 95     ._.......zm..YR.
     534:	2d 83 be d4 d3 21 74 58 29 69 e0 49 44 c8 c9 8e     -....!tX)i.ID...
     544:	6a 89 c2 75 78 79 8e f4 6b 3e 58 99 dd 71 b9 27     j..uxy..k>X..q.'
     554:	b6 4f e1 be 17 ad 88 f0 66 ac 20 c9 b4 3a ce 7d     .O......f. ..:.}
     564:	18 4a df 63 82 31 1a e5 60 33 51 97 45 7f 53 62     .J.c.1..`3Q.E.Sb
     574:	e0 77 64 b1 84 ae 6b bb 1c a0 81 fe 94 2b 08 f9     .wd...k......+..
     584:	58 68 48 70 19 fd 45 8f 87 6c de 94 b7 f8 7b 52     XhHp..E..l....{R
     594:	23 d3 73 ab e2 02 4b 72 57 8f 1f e3 2a ab 55 66     #.s...KrW...*.Uf
     5a4:	07 28 eb b2 03 c2 b5 2f 9a 7b c5 86 a5 08 37 d3     .(...../.{....7.
     5b4:	f2 87 28 30 b2 a5 bf 23 ba 6a 03 02 5c 82 16 ed     ..(0...#.j..\...
     5c4:	2b 1c cf 8a 92 b4 79 a7 f0 f2 07 f3 a1 e2 69 4e     +.....y.......iN
     5d4:	cd f4 da 65 d5 be 05 06 1f 62 34 d1 8a fe a6 c4     ...e.....b4.....
     5e4:	9d 53 2e 34 a0 55 f3 a2 32 e1 8a 05 75 eb f6 a4     .S.4.U..2...u...
     5f4:	39 ec 83 0b aa ef 60 40 06 9f 71 5e 51 10 6e bd     9.....`@..q^Q.n.
     604:	f9 8a 21 3e 3d 06 dd 96 ae 05 3e dd 46 bd e6 4d     ..!>=.....>.F..M
     614:	b5 8d 54 91 05 5d c4 71 6f d4 06 04 ff 15 50 60     ..T..].qo.....P`
     624:	24 fb 98 19 97 e9 bd d6 cc 43 40 89 77 9e d9 67     $........C@.w..g
     634:	bd 42 e8 b0 88 8b 89 07 38 5b 19 e7 db ee c8 79     .B......8[.....y
     644:	47 0a 7c a1 e9 0f 42 7c c9 1e 84 f8 00 00 00 00     G.|...B|........
     654:	83 86 80 09 48 ed 2b 32 ac 70 11 1e 4e 72 5a 6c     ....H.+2.p..NrZl
     664:	fb ff 0e fd 56 38 85 0f 1e d5 ae 3d 27 39 2d 36     ....V8.....='9-6
     674:	64 d9 0f 0a 21 a6 5c 68 d1 54 5b 9b 3a 2e 36 24     d...!.\h.T[.:.6$
     684:	b1 67 0a 0c 0f e7 57 93 d2 96 ee b4 9e 91 9b 1b     .g....W.........
     694:	4f c5 c0 80 a2 20 dc 61 69 4b 77 5a 16 1a 12 1c     O.... .aiKwZ....
     6a4:	0a ba 93 e2 e5 2a a0 c0 43 e0 22 3c 1d 17 1b 12     .....*..C."<....
     6b4:	0b 0d 09 0e ad c7 8b f2 b9 a8 b6 2d c8 a9 1e 14     ...........-....
     6c4:	85 19 f1 57 4c 07 75 af bb dd 99 ee fd 60 7f a3     ...WL.u......`..
     6d4:	9f 26 01 f7 bc f5 72 5c c5 3b 66 44 34 7e fb 5b     .&....r\.;fD4~.[
     6e4:	76 29 43 8b dc c6 23 cb 68 fc ed b6 63 f1 e4 b8     v)C...#.h...c...
     6f4:	ca dc 31 d7 10 85 63 42 40 22 97 13 20 11 c6 84     ..1...cB@".. ...
     704:	7d 24 4a 85 f8 3d bb d2 11 32 f9 ae 6d a1 29 c7     }$J..=...2..m.).
     714:	4b 2f 9e 1d f3 30 b2 dc ec 52 86 0d d0 e3 c1 77     K/...0...R.....w
     724:	6c 16 b3 2b 99 b9 70 a9 fa 48 94 11 22 64 e9 47     l..+..p..H.."d.G
     734:	c4 8c fc a8 1a 3f f0 a0 d8 2c 7d 56 ef 90 33 22     .....?...,}V..3"
     744:	c7 4e 49 87 c1 d1 38 d9 fe a2 ca 8c 36 0b d4 98     .NI...8.....6...
     754:	cf 81 f5 a6 28 de 7a a5 26 8e b7 da a4 bf ad 3f     ....(.z.&......?
     764:	e4 9d 3a 2c 0d 92 78 50 9b cc 5f 6a 62 46 7e 54     ..:,..xP.._jbF~T
     774:	c2 13 8d f6 e8 b8 d8 90 5e f7 39 2e f5 af c3 82     ........^.9.....
     784:	be 80 5d 9f 7c 93 d0 69 a9 2d d5 6f b3 12 25 cf     ..].|..i.-.o..%.
     794:	3b 99 ac c8 a7 7d 18 10 6e 63 9c e8 7b bb 3b db     ;....}..nc..{.;.
     7a4:	09 78 26 cd f4 18 59 6e 01 b7 9a ec a8 9a 4f 83     .x&...Yn......O.
     7b4:	65 6e 95 e6 7e e6 ff aa 08 cf bc 21 e6 e8 15 ef     en..~......!....
     7c4:	d9 9b e7 ba ce 36 6f 4a d4 09 9f ea d6 7c b0 29     .....6oJ.....|.)
     7d4:	af b2 a4 31 31 23 3f 2a 30 94 a5 c6 c0 66 a2 35     ...11#?*0....f.5
     7e4:	37 bc 4e 74 a6 ca 82 fc b0 d0 90 e0 15 d8 a7 33     7.Nt...........3
     7f4:	4a 98 04 f1 f7 da ec 41 0e 50 cd 7f 2f f6 91 17     J......A.P../...
     804:	8d d6 4d 76 4d b0 ef 43 54 4d aa cc df 04 96 e4     ..MvM..CTM......
     814:	e3 b5 d1 9e 1b 88 6a 4c b8 1f 2c c1 7f 51 65 46     ......jL..,..QeF
     824:	04 ea 5e 9d 5d 35 8c 01 73 74 87 fa 2e 41 0b fb     ..^.]5..st...A..
     834:	5a 1d 67 b3 52 d2 db 92 33 56 10 e9 13 47 d6 6d     Z.g.R...3V...G.m
     844:	8c 61 d7 9a 7a 0c a1 37 8e 14 f8 59 89 3c 13 eb     .a..z..7...Y.<..
     854:	ee 27 a9 ce 35 c9 61 b7 ed e5 1c e1 3c b1 47 7a     .'..5.a.....<.Gz
     864:	59 df d2 9c 3f 73 f2 55 79 ce 14 18 bf 37 c7 73     Y...?s.Uy....7.s
     874:	ea cd f7 53 5b aa fd 5f 14 6f 3d df 86 db 44 78     ...S[.._.o=...Dx
     884:	81 f3 af ca 3e c4 68 b9 2c 34 24 38 5f 40 a3 c2     ....>.h.,4$8_@..
     894:	72 c3 1d 16 0c 25 e2 bc 8b 49 3c 28 41 95 0d ff     r....%...I<(A...
     8a4:	71 01 a8 39 de b3 0c 08 9c e4 b4 d8 90 c1 56 64     q..9..........Vd
     8b4:	61 84 cb 7b 70 b6 32 d5 74 5c 6c 48 42 57 b8 d0     a..{p.2.t\lHBW..

000008c4 <Td4s>:
     8c4:	52 09 6a d5 30 36 a5 38 bf 40 a3 9e 81 f3 d7 fb     R.j.06.8.@......
     8d4:	7c e3 39 82 9b 2f ff 87 34 8e 43 44 c4 de e9 cb     |.9../..4.CD....
     8e4:	54 7b 94 32 a6 c2 23 3d ee 4c 95 0b 42 fa c3 4e     T{.2..#=.L..B..N
     8f4:	08 2e a1 66 28 d9 24 b2 76 5b a2 49 6d 8b d1 25     ...f(.$.v[.Im..%
     904:	72 f8 f6 64 86 68 98 16 d4 a4 5c cc 5d 65 b6 92     r..d.h....\.]e..
     914:	6c 70 48 50 fd ed b9 da 5e 15 46 57 a7 8d 9d 84     lpHP....^.FW....
     924:	90 d8 ab 00 8c bc d3 0a f7 e4 58 05 b8 b3 45 06     ..........X...E.
     934:	d0 2c 1e 8f ca 3f 0f 02 c1 af bd 03 01 13 8a 6b     .,...?.........k
     944:	3a 91 11 41 4f 67 dc ea 97 f2 cf ce f0 b4 e6 73     :..AOg.........s
     954:	96 ac 74 22 e7 ad 35 85 e2 f9 37 e8 1c 75 df 6e     ..t"..5...7..u.n
     964:	47 f1 1a 71 1d 29 c5 89 6f b7 62 0e aa 18 be 1b     G..q.)..o.b.....
     974:	fc 56 3e 4b c6 d2 79 20 9a db c0 fe 78 cd 5a f4     .V>K..y ....x.Z.
     984:	1f dd a8 33 88 07 c7 31 b1 12 10 59 27 80 ec 5f     ...3...1...Y'.._
     994:	60 51 7f a9 19 b5 4a 0d 2d e5 7a 9f 93 c9 9c ef     `Q....J.-.z.....
     9a4:	a0 e0 3b 4d ae 2a f5 b0 c8 eb bb 3c 83 53 99 61     ..;M.*.....<.S.a
     9b4:	17 2b 04 7e ba 77 d6 26 e1 69 14 63 55 21 0c 7d     .+.~.w.&.i.cU!.}

000009c4 <rcons>:
     9c4:	01 02 04 08 10 20 40 80 1b 36                       ..... @..6

000009ce <__ctors_start>:
     9ce:	24 1a       	sub	r2, r20

000009d0 <__ctors_end>:
     9d0:	11 24       	eor	r1, r1
     9d2:	1f be       	out	0x3f, r1	; 63
     9d4:	cf ef       	ldi	r28, 0xFF	; 255
     9d6:	d8 e0       	ldi	r29, 0x08	; 8
     9d8:	de bf       	out	0x3e, r29	; 62
     9da:	cd bf       	out	0x3d, r28	; 61

000009dc <__do_copy_data>:
     9dc:	11 e0       	ldi	r17, 0x01	; 1
     9de:	a0 e0       	ldi	r26, 0x00	; 0
     9e0:	b1 e0       	ldi	r27, 0x01	; 1
     9e2:	ea e4       	ldi	r30, 0x4A	; 74
     9e4:	f8 e3       	ldi	r31, 0x38	; 56
     9e6:	02 c0       	rjmp	.+4      	; 0x9ec <.do_copy_data_start>

000009e8 <.do_copy_data_loop>:
     9e8:	05 90       	lpm	r0, Z+
     9ea:	0d 92       	st	X+, r0

000009ec <.do_copy_data_start>:
     9ec:	a6 32       	cpi	r26, 0x26	; 38
     9ee:	b1 07       	cpc	r27, r17
     9f0:	d9 f7       	brne	.-10     	; 0x9e8 <.do_copy_data_loop>

000009f2 <__do_clear_bss>:
     9f2:	11 e0       	ldi	r17, 0x01	; 1
     9f4:	a6 e2       	ldi	r26, 0x26	; 38
     9f6:	b1 e0       	ldi	r27, 0x01	; 1
     9f8:	01 c0       	rjmp	.+2      	; 0x9fc <.do_clear_bss_start>

000009fa <.do_clear_bss_loop>:
     9fa:	1d 92       	st	X+, r1

000009fc <.do_clear_bss_start>:
     9fc:	ab 3d       	cpi	r26, 0xDB	; 219
     9fe:	b1 07       	cpc	r27, r17
     a00:	e1 f7       	brne	.-8      	; 0x9fa <.do_clear_bss_loop>

00000a02 <__do_global_ctors>:
     a02:	19 e0       	ldi	r17, 0x09	; 9
     a04:	c0 ed       	ldi	r28, 0xD0	; 208
     a06:	d9 e0       	ldi	r29, 0x09	; 9
     a08:	04 c0       	rjmp	.+8      	; 0xa12 <.do_global_ctors_start>

00000a0a <.do_global_ctors_loop>:
     a0a:	22 97       	sbiw	r28, 0x02	; 2
     a0c:	fe 01       	movw	r30, r28
     a0e:	0e 94 1f 1c 	call	0x383e	; 0x383e <__tablejump__>

00000a12 <.do_global_ctors_start>:
     a12:	ce 3c       	cpi	r28, 0xCE	; 206
     a14:	d1 07       	cpc	r29, r17
     a16:	c9 f7       	brne	.-14     	; 0xa0a <.do_global_ctors_loop>
     a18:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <main>
     a1c:	0c 94 23 1c 	jmp	0x3846	; 0x3846 <_exit>

00000a20 <__bad_interrupt>:
     a20:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000a24 <memcmp>:
     a24:	fb 01       	movw	r30, r22
     a26:	dc 01       	movw	r26, r24
     a28:	04 c0       	rjmp	.+8      	; 0xa32 <memcmp+0xe>
     a2a:	8d 91       	ld	r24, X+
     a2c:	01 90       	ld	r0, Z+
     a2e:	80 19       	sub	r24, r0
     a30:	21 f4       	brne	.+8      	; 0xa3a <memcmp+0x16>
     a32:	41 50       	subi	r20, 0x01	; 1
     a34:	50 40       	sbci	r21, 0x00	; 0
     a36:	c8 f7       	brcc	.-14     	; 0xa2a <memcmp+0x6>
     a38:	88 1b       	sub	r24, r24
     a3a:	99 0b       	sbc	r25, r25
     a3c:	08 95       	ret

00000a3e <memcpy>:
     a3e:	fb 01       	movw	r30, r22
     a40:	dc 01       	movw	r26, r24
     a42:	02 c0       	rjmp	.+4      	; 0xa48 <memcpy+0xa>
     a44:	01 90       	ld	r0, Z+
     a46:	0d 92       	st	X+, r0
     a48:	41 50       	subi	r20, 0x01	; 1
     a4a:	50 40       	sbci	r21, 0x00	; 0
     a4c:	d8 f7       	brcc	.-10     	; 0xa44 <memcpy+0x6>
     a4e:	08 95       	ret

00000a50 <memset>:
     a50:	dc 01       	movw	r26, r24
     a52:	01 c0       	rjmp	.+2      	; 0xa56 <memset+0x6>
     a54:	6d 93       	st	X+, r22
     a56:	41 50       	subi	r20, 0x01	; 1
     a58:	50 40       	sbci	r21, 0x00	; 0
     a5a:	e0 f7       	brcc	.-8      	; 0xa54 <memset+0x4>
     a5c:	08 95       	ret

00000a5e <error(int, int)>:



// Error exit from failed unit test, one int parameter and the failing line number to print...
// Expects to terminate like panic() with flashing light can be detected by eye or in hardware if required.
static void error(int err, int line)
     a5e:	0f 93       	push	r16
     a60:	1f 93       	push	r17
     a62:	cf 93       	push	r28
     a64:	df 93       	push	r29
     a66:	8c 01       	movw	r16, r24
     a68:	eb 01       	movw	r28, r22
  {
  for( ; ; )
    {
    Serial.print(F("***Test FAILED*** val="));
     a6a:	89 eb       	ldi	r24, 0xB9	; 185
     a6c:	91 e0       	ldi	r25, 0x01	; 1
     a6e:	6d ea       	ldi	r22, 0xAD	; 173
     a70:	70 e0       	ldi	r23, 0x00	; 0
     a72:	0e 94 b3 1a 	call	0x3566	; 0x3566 <Print::print(__FlashStringHelper const*)>
    Serial.print(err, DEC);
     a76:	89 eb       	ldi	r24, 0xB9	; 185
     a78:	91 e0       	ldi	r25, 0x01	; 1
     a7a:	b8 01       	movw	r22, r16
     a7c:	4a e0       	ldi	r20, 0x0A	; 10
     a7e:	50 e0       	ldi	r21, 0x00	; 0
     a80:	0e 94 b6 1b 	call	0x376c	; 0x376c <Print::print(int, int)>
    Serial.print(F(" =0x"));
     a84:	89 eb       	ldi	r24, 0xB9	; 185
     a86:	91 e0       	ldi	r25, 0x01	; 1
     a88:	68 ea       	ldi	r22, 0xA8	; 168
     a8a:	70 e0       	ldi	r23, 0x00	; 0
     a8c:	0e 94 b3 1a 	call	0x3566	; 0x3566 <Print::print(__FlashStringHelper const*)>
    Serial.print(err, HEX);
     a90:	89 eb       	ldi	r24, 0xB9	; 185
     a92:	91 e0       	ldi	r25, 0x01	; 1
     a94:	b8 01       	movw	r22, r16
     a96:	40 e1       	ldi	r20, 0x10	; 16
     a98:	50 e0       	ldi	r21, 0x00	; 0
     a9a:	0e 94 b6 1b 	call	0x376c	; 0x376c <Print::print(int, int)>
    if(0 != line)
     a9e:	20 97       	sbiw	r28, 0x00	; 0
     aa0:	69 f0       	breq	.+26     	; 0xabc <error(int, int)+0x5e>
      {
      Serial.print(F(" at line "));
     aa2:	89 eb       	ldi	r24, 0xB9	; 185
     aa4:	91 e0       	ldi	r25, 0x01	; 1
     aa6:	6e e9       	ldi	r22, 0x9E	; 158
     aa8:	70 e0       	ldi	r23, 0x00	; 0
     aaa:	0e 94 b3 1a 	call	0x3566	; 0x3566 <Print::print(__FlashStringHelper const*)>
      Serial.print(line);
     aae:	89 eb       	ldi	r24, 0xB9	; 185
     ab0:	91 e0       	ldi	r25, 0x01	; 1
     ab2:	be 01       	movw	r22, r28
     ab4:	4a e0       	ldi	r20, 0x0A	; 10
     ab6:	50 e0       	ldi	r21, 0x00	; 0
     ab8:	0e 94 b6 1b 	call	0x376c	; 0x376c <Print::print(int, int)>
      }
    Serial.println();
     abc:	89 eb       	ldi	r24, 0xB9	; 185
     abe:	91 e0       	ldi	r25, 0x01	; 1
     ac0:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <Print::println()>
//    LED_HEATCALL_ON();
//    tinyPause();
//    LED_HEATCALL_OFF();
//    sleepLowPowerMs(1000);
    delay(1000);
     ac4:	68 ee       	ldi	r22, 0xE8	; 232
     ac6:	73 e0       	ldi	r23, 0x03	; 3
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	0e 94 d5 17 	call	0x2faa	; 0x2faa <delay>
     ad0:	cc cf       	rjmp	.-104    	; 0xa6a <error(int, int)+0xc>

00000ad2 <testAESGCMAll0()>:
//        // Check that the decryption result matches.
//        assertTrue((Arrays.equals(input, plainText)));
//        }

// Check that all zeros key, plaintext and ADATA gives the correct result.
static void testAESGCMAll0()
     ad2:	8f 92       	push	r8
     ad4:	9f 92       	push	r9
     ad6:	af 92       	push	r10
     ad8:	bf 92       	push	r11
     ada:	cf 92       	push	r12
     adc:	df 92       	push	r13
     ade:	ef 92       	push	r14
     ae0:	ff 92       	push	r15
     ae2:	0f 93       	push	r16
     ae4:	1f 93       	push	r17
     ae6:	df 93       	push	r29
     ae8:	cf 93       	push	r28
     aea:	cd b7       	in	r28, 0x3d	; 61
     aec:	de b7       	in	r29, 0x3e	; 62
     aee:	ce 57       	subi	r28, 0x7E	; 126
     af0:	d1 40       	sbci	r29, 0x01	; 1
     af2:	0f b6       	in	r0, 0x3f	; 63
     af4:	f8 94       	cli
     af6:	de bf       	out	0x3e, r29	; 62
     af8:	0f be       	out	0x3f, r0	; 63
     afa:	cd bf       	out	0x3d, r28	; 61
  {
  Serial.println("AESGCMAll0");
     afc:	89 eb       	ldi	r24, 0xB9	; 185
     afe:	91 e0       	ldi	r25, 0x01	; 1
     b00:	60 e0       	ldi	r22, 0x00	; 0
     b02:	71 e0       	ldi	r23, 0x01	; 1
     b04:	0e 94 c9 1b 	call	0x3792	; 0x3792 <Print::println(char const*)>
  // Inputs to encryption.
  uint8_t input[30]; // All-zeros input, typical input size.
  memset(input, 0, sizeof(input));
     b08:	f1 e3       	ldi	r31, 0x31	; 49
     b0a:	ef 2e       	mov	r14, r31
     b0c:	f1 2c       	mov	r15, r1
     b0e:	ec 0e       	add	r14, r28
     b10:	fd 1e       	adc	r15, r29
     b12:	8e e1       	ldi	r24, 0x1E	; 30
     b14:	f7 01       	movw	r30, r14
     b16:	11 92       	st	Z+, r1
     b18:	8a 95       	dec	r24
     b1a:	e9 f7       	brne	.-6      	; 0xb16 <testAESGCMAll0()+0x44>
  uint8_t key[AES_KEY_SIZE/8];
  memset(key, 0, sizeof(key)); // All-zeros key.
     b1c:	de 01       	movw	r26, r28
     b1e:	51 96       	adiw	r26, 0x11	; 17
     b20:	80 e1       	ldi	r24, 0x10	; 16
     b22:	fd 01       	movw	r30, r26
     b24:	11 92       	st	Z+, r1
     b26:	8a 95       	dec	r24
     b28:	e9 f7       	brne	.-6      	; 0xb24 <testAESGCMAll0()+0x52>
  uint8_t nonce[GCM_NONCE_LENGTH];
  memset(nonce, 0, sizeof(nonce)); // All-zeros nonce.
     b2a:	9e 01       	movw	r18, r28
     b2c:	2b 5f       	subi	r18, 0xFB	; 251
     b2e:	3f 4f       	sbci	r19, 0xFF	; 255
     b30:	8c e0       	ldi	r24, 0x0C	; 12
     b32:	f9 01       	movw	r30, r18
     b34:	11 92       	st	Z+, r1
     b36:	8a 95       	dec	r24
     b38:	e9 f7       	brne	.-6      	; 0xb34 <testAESGCMAll0()+0x62>
  uint8_t aad[4];
  memset(aad, 0, sizeof(aad)); // All-zeros ADATA.
     b3a:	19 82       	std	Y+1, r1	; 0x01
     b3c:	1a 82       	std	Y+2, r1	; 0x02
     b3e:	1b 82       	std	Y+3, r1	; 0x03
     b40:	1c 82       	std	Y+4, r1	; 0x04
  uint8_t tag[GCM_TAG_LENGTH]; // Space for tag.
  uint8_t cipherText[sizeof(input)]; // Space for encrypted text.
  // Instance to perform enc/dec.
  OpenTRV::AESGCM::AES128GCM16small eo;
  // Do encryption.
  AssertIsTrue(eo.encrypt(
     b42:	00 d0       	rcall	.+0      	; 0xb44 <testAESGCMAll0()+0x72>
     b44:	00 d0       	rcall	.+0      	; 0xb46 <testAESGCMAll0()+0x74>
     b46:	ce 01       	movw	r24, r28
     b48:	81 5b       	subi	r24, 0xB1	; 177
     b4a:	9f 4f       	sbci	r25, 0xFF	; 255
     b4c:	ed b7       	in	r30, 0x3d	; 61
     b4e:	fe b7       	in	r31, 0x3e	; 62
     b50:	92 83       	std	Z+2, r25	; 0x02
     b52:	81 83       	std	Z+1, r24	; 0x01
     b54:	ce 01       	movw	r24, r28
     b56:	81 96       	adiw	r24, 0x21	; 33
     b58:	94 83       	std	Z+4, r25	; 0x04
     b5a:	83 83       	std	Z+3, r24	; 0x03
     b5c:	ce 01       	movw	r24, r28
     b5e:	85 57       	subi	r24, 0x75	; 117
     b60:	9f 4f       	sbci	r25, 0xFF	; 255
     b62:	bd 01       	movw	r22, r26
     b64:	40 e1       	ldi	r20, 0x10	; 16
     b66:	50 e0       	ldi	r21, 0x00	; 0
     b68:	0c e0       	ldi	r16, 0x0C	; 12
     b6a:	10 e0       	ldi	r17, 0x00	; 0
     b6c:	ee e1       	ldi	r30, 0x1E	; 30
     b6e:	ce 2e       	mov	r12, r30
     b70:	d1 2c       	mov	r13, r1
     b72:	5e 01       	movw	r10, r28
     b74:	08 94       	sec
     b76:	a1 1c       	adc	r10, r1
     b78:	b1 1c       	adc	r11, r1
     b7a:	b4 e0       	ldi	r27, 0x04	; 4
     b7c:	8b 2e       	mov	r8, r27
     b7e:	91 2c       	mov	r9, r1
     b80:	0e 94 15 07 	call	0xe2a	; 0xe2a <OpenTRV::AESGCM::AES128GCM16small::encrypt(unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char*, unsigned char*)>
     b84:	0f 90       	pop	r0
     b86:	0f 90       	pop	r0
     b88:	0f 90       	pop	r0
     b8a:	0f 90       	pop	r0
     b8c:	88 23       	and	r24, r24
     b8e:	31 f4       	brne	.+12     	; 0xb9c <testAESGCMAll0()+0xca>
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	6e e8       	ldi	r22, 0x8E	; 142
     b96:	70 e0       	ldi	r23, 0x00	; 0
     b98:	0e 94 2f 05 	call	0xa5e	; 0xa5e <error(int, int)>
                input, sizeof(input),
                aad, sizeof(aad),
                cipherText, tag));
  // Check some of the cipher text and tag.
//            "0388DACE60B6A392F328C2B971B2FE78F795AAAB494B5923F7FD89FF948B614772C7929CD0DD681BD8A37A656F33" :
  AssertIsEqual(0x03, cipherText[0]);
     b9c:	fe 01       	movw	r30, r28
     b9e:	e1 5b       	subi	r30, 0xB1	; 177
     ba0:	ff 4f       	sbci	r31, 0xFF	; 255
     ba2:	80 81       	ld	r24, Z
     ba4:	90 e0       	ldi	r25, 0x00	; 0
    delay(1000);
    }
  }

// Deal with common equality test.
static inline void errorIfNotEqual(int expected, int actual, int line) { if(expected != actual) { error(actual, line); } }
     ba6:	83 30       	cpi	r24, 0x03	; 3
     ba8:	91 05       	cpc	r25, r1
     baa:	21 f0       	breq	.+8      	; 0xbb4 <testAESGCMAll0()+0xe2>
     bac:	61 e9       	ldi	r22, 0x91	; 145
     bae:	70 e0       	ldi	r23, 0x00	; 0
     bb0:	0e 94 2f 05 	call	0xa5e	; 0xa5e <error(int, int)>
                aad, sizeof(aad),
                cipherText, tag));
  // Check some of the cipher text and tag.
//            "0388DACE60B6A392F328C2B971B2FE78F795AAAB494B5923F7FD89FF948B614772C7929CD0DD681BD8A37A656F33" :
  AssertIsEqual(0x03, cipherText[0]);
  AssertIsEqual(0x88, cipherText[1]);
     bb4:	fe 01       	movw	r30, r28
     bb6:	e1 5b       	subi	r30, 0xB1	; 177
     bb8:	ff 4f       	sbci	r31, 0xFF	; 255
     bba:	81 81       	ldd	r24, Z+1	; 0x01
     bbc:	90 e0       	ldi	r25, 0x00	; 0
    delay(1000);
    }
  }

// Deal with common equality test.
static inline void errorIfNotEqual(int expected, int actual, int line) { if(expected != actual) { error(actual, line); } }
     bbe:	88 38       	cpi	r24, 0x88	; 136
     bc0:	91 05       	cpc	r25, r1
     bc2:	21 f0       	breq	.+8      	; 0xbcc <testAESGCMAll0()+0xfa>
     bc4:	62 e9       	ldi	r22, 0x92	; 146
     bc6:	70 e0       	ldi	r23, 0x00	; 0
     bc8:	0e 94 2f 05 	call	0xa5e	; 0xa5e <error(int, int)>
                cipherText, tag));
  // Check some of the cipher text and tag.
//            "0388DACE60B6A392F328C2B971B2FE78F795AAAB494B5923F7FD89FF948B614772C7929CD0DD681BD8A37A656F33" :
  AssertIsEqual(0x03, cipherText[0]);
  AssertIsEqual(0x88, cipherText[1]);
  AssertIsEqual(0x8b, cipherText[sizeof(cipherText)-1]);
     bcc:	fe 01       	movw	r30, r28
     bce:	e1 5b       	subi	r30, 0xB1	; 177
     bd0:	ff 4f       	sbci	r31, 0xFF	; 255
     bd2:	85 8d       	ldd	r24, Z+29	; 0x1d
     bd4:	90 e0       	ldi	r25, 0x00	; 0
    delay(1000);
    }
  }

// Deal with common equality test.
static inline void errorIfNotEqual(int expected, int actual, int line) { if(expected != actual) { error(actual, line); } }
     bd6:	8b 38       	cpi	r24, 0x8B	; 139
     bd8:	91 05       	cpc	r25, r1
     bda:	21 f0       	breq	.+8      	; 0xbe4 <testAESGCMAll0()+0x112>
     bdc:	63 e9       	ldi	r22, 0x93	; 147
     bde:	70 e0       	ldi	r23, 0x00	; 0
     be0:	0e 94 2f 05 	call	0xa5e	; 0xa5e <error(int, int)>
  // Check some of the cipher text and tag.
//            "0388DACE60B6A392F328C2B971B2FE78F795AAAB494B5923F7FD89FF948B614772C7929CD0DD681BD8A37A656F33" :
  AssertIsEqual(0x03, cipherText[0]);
  AssertIsEqual(0x88, cipherText[1]);
  AssertIsEqual(0x8b, cipherText[sizeof(cipherText)-1]);
  AssertIsEqual(0x61, tag[0]);
     be4:	89 a1       	ldd	r24, Y+33	; 0x21
     be6:	90 e0       	ldi	r25, 0x00	; 0
    delay(1000);
    }
  }

// Deal with common equality test.
static inline void errorIfNotEqual(int expected, int actual, int line) { if(expected != actual) { error(actual, line); } }
     be8:	81 36       	cpi	r24, 0x61	; 97
     bea:	91 05       	cpc	r25, r1
     bec:	21 f0       	breq	.+8      	; 0xbf6 <testAESGCMAll0()+0x124>
     bee:	64 e9       	ldi	r22, 0x94	; 148
     bf0:	70 e0       	ldi	r23, 0x00	; 0
     bf2:	0e 94 2f 05 	call	0xa5e	; 0xa5e <error(int, int)>
//            "0388DACE60B6A392F328C2B971B2FE78F795AAAB494B5923F7FD89FF948B614772C7929CD0DD681BD8A37A656F33" :
  AssertIsEqual(0x03, cipherText[0]);
  AssertIsEqual(0x88, cipherText[1]);
  AssertIsEqual(0x8b, cipherText[sizeof(cipherText)-1]);
  AssertIsEqual(0x61, tag[0]);
  AssertIsEqual(0x33, tag[15]);
     bf6:	88 a9       	ldd	r24, Y+48	; 0x30
     bf8:	90 e0       	ldi	r25, 0x00	; 0
    delay(1000);
    }
  }

// Deal with common equality test.
static inline void errorIfNotEqual(int expected, int actual, int line) { if(expected != actual) { error(actual, line); } }
     bfa:	83 33       	cpi	r24, 0x33	; 51
     bfc:	91 05       	cpc	r25, r1
     bfe:	21 f0       	breq	.+8      	; 0xc08 <testAESGCMAll0()+0x136>
     c00:	65 e9       	ldi	r22, 0x95	; 149
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	0e 94 2f 05 	call	0xa5e	; 0xa5e <error(int, int)>
  AssertIsEqual(0x61, tag[0]);
  AssertIsEqual(0x33, tag[15]);

  // Decrypt...
  uint8_t plain[sizeof(cipherText)]; // Space for decrypted text.
  AssertIsTrue(eo.decrypt(
     c08:	00 d0       	rcall	.+0      	; 0xc0a <testAESGCMAll0()+0x138>
     c0a:	00 d0       	rcall	.+0      	; 0xc0c <testAESGCMAll0()+0x13a>
     c0c:	ce 01       	movw	r24, r28
     c0e:	81 96       	adiw	r24, 0x21	; 33
     c10:	ed b7       	in	r30, 0x3d	; 61
     c12:	fe b7       	in	r31, 0x3e	; 62
     c14:	92 83       	std	Z+2, r25	; 0x02
     c16:	81 83       	std	Z+1, r24	; 0x01
     c18:	ce 01       	movw	r24, r28
     c1a:	83 59       	subi	r24, 0x93	; 147
     c1c:	9f 4f       	sbci	r25, 0xFF	; 255
     c1e:	94 83       	std	Z+4, r25	; 0x04
     c20:	83 83       	std	Z+3, r24	; 0x03
     c22:	ce 01       	movw	r24, r28
     c24:	85 57       	subi	r24, 0x75	; 117
     c26:	9f 4f       	sbci	r25, 0xFF	; 255
     c28:	be 01       	movw	r22, r28
     c2a:	6f 5e       	subi	r22, 0xEF	; 239
     c2c:	7f 4f       	sbci	r23, 0xFF	; 255
     c2e:	40 e1       	ldi	r20, 0x10	; 16
     c30:	50 e0       	ldi	r21, 0x00	; 0
     c32:	9e 01       	movw	r18, r28
     c34:	2b 5f       	subi	r18, 0xFB	; 251
     c36:	3f 4f       	sbci	r19, 0xFF	; 255
     c38:	0c e0       	ldi	r16, 0x0C	; 12
     c3a:	10 e0       	ldi	r17, 0x00	; 0
     c3c:	af e4       	ldi	r26, 0x4F	; 79
     c3e:	ea 2e       	mov	r14, r26
     c40:	f1 2c       	mov	r15, r1
     c42:	ec 0e       	add	r14, r28
     c44:	fd 1e       	adc	r15, r29
     c46:	fe e1       	ldi	r31, 0x1E	; 30
     c48:	cf 2e       	mov	r12, r31
     c4a:	d1 2c       	mov	r13, r1
     c4c:	5e 01       	movw	r10, r28
     c4e:	08 94       	sec
     c50:	a1 1c       	adc	r10, r1
     c52:	b1 1c       	adc	r11, r1
     c54:	e4 e0       	ldi	r30, 0x04	; 4
     c56:	8e 2e       	mov	r8, r30
     c58:	91 2c       	mov	r9, r1
     c5a:	0e 94 c2 06 	call	0xd84	; 0xd84 <OpenTRV::AESGCM::AES128GCM16small::decrypt(unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned char*)>
     c5e:	0f 90       	pop	r0
     c60:	0f 90       	pop	r0
     c62:	0f 90       	pop	r0
     c64:	0f 90       	pop	r0
     c66:	88 23       	and	r24, r24
     c68:	31 f4       	brne	.+12     	; 0xc76 <testAESGCMAll0()+0x1a4>
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	6e e9       	ldi	r22, 0x9E	; 158
     c70:	70 e0       	ldi	r23, 0x00	; 0
     c72:	0e 94 2f 05 	call	0xa5e	; 0xa5e <error(int, int)>
                key, (size_t) sizeof(key),
                nonce, sizeof(nonce),
		cipherText, sizeof(cipherText),
		aad, sizeof(aad), tag,
                plain));
  AssertIsEqual(0, memcmp(input, plain, sizeof(input))); // 0 indicates plain text recovered correctly.
     c76:	ce 01       	movw	r24, r28
     c78:	c1 96       	adiw	r24, 0x31	; 49
     c7a:	be 01       	movw	r22, r28
     c7c:	63 59       	subi	r22, 0x93	; 147
     c7e:	7f 4f       	sbci	r23, 0xFF	; 255
     c80:	4e e1       	ldi	r20, 0x1E	; 30
     c82:	50 e0       	ldi	r21, 0x00	; 0
     c84:	0e 94 12 05 	call	0xa24	; 0xa24 <memcmp>
    delay(1000);
    }
  }

// Deal with common equality test.
static inline void errorIfNotEqual(int expected, int actual, int line) { if(expected != actual) { error(actual, line); } }
     c88:	00 97       	sbiw	r24, 0x00	; 0
     c8a:	21 f0       	breq	.+8      	; 0xc94 <testAESGCMAll0()+0x1c2>
     c8c:	6f e9       	ldi	r22, 0x9F	; 159
     c8e:	70 e0       	ldi	r23, 0x00	; 0
     c90:	0e 94 2f 05 	call	0xa5e	; 0xa5e <error(int, int)>
                nonce, sizeof(nonce),
		cipherText, sizeof(cipherText),
		aad, sizeof(aad), tag,
                plain));
  AssertIsEqual(0, memcmp(input, plain, sizeof(input))); // 0 indicates plain text recovered correctly.
  }
     c94:	c2 58       	subi	r28, 0x82	; 130
     c96:	de 4f       	sbci	r29, 0xFE	; 254
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	f8 94       	cli
     c9c:	de bf       	out	0x3e, r29	; 62
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	cd bf       	out	0x3d, r28	; 61
     ca2:	cf 91       	pop	r28
     ca4:	df 91       	pop	r29
     ca6:	1f 91       	pop	r17
     ca8:	0f 91       	pop	r16
     caa:	ff 90       	pop	r15
     cac:	ef 90       	pop	r14
     cae:	df 90       	pop	r13
     cb0:	cf 90       	pop	r12
     cb2:	bf 90       	pop	r11
     cb4:	af 90       	pop	r10
     cb6:	9f 90       	pop	r9
     cb8:	8f 90       	pop	r8
     cba:	08 95       	ret

00000cbc <loop>:



// To be called from loop() instead of main code when running unit tests.
// Tests generally flag an error and stop the test cycle with a call to panic() or error().
void loop()
     cbc:	cf 93       	push	r28
     cbe:	df 93       	push	r29
     cc0:	c3 e0       	ldi	r28, 0x03	; 3
     cc2:	d0 e0       	ldi	r29, 0x00	; 0
  static int loopCount = 0;

  // Allow the terminal console to be brought up.
  for(int i = 3; i > 0; --i)
    {
    Serial.print(F("Tests starting... "));
     cc4:	89 eb       	ldi	r24, 0xB9	; 185
     cc6:	91 e0       	ldi	r25, 0x01	; 1
     cc8:	6b e8       	ldi	r22, 0x8B	; 139
     cca:	70 e0       	ldi	r23, 0x00	; 0
     ccc:	0e 94 b3 1a 	call	0x3566	; 0x3566 <Print::print(__FlashStringHelper const*)>
    Serial.print(i);
     cd0:	89 eb       	ldi	r24, 0xB9	; 185
     cd2:	91 e0       	ldi	r25, 0x01	; 1
     cd4:	be 01       	movw	r22, r28
     cd6:	4a e0       	ldi	r20, 0x0A	; 10
     cd8:	50 e0       	ldi	r21, 0x00	; 0
     cda:	0e 94 b6 1b 	call	0x376c	; 0x376c <Print::print(int, int)>
    Serial.println();
     cde:	89 eb       	ldi	r24, 0xB9	; 185
     ce0:	91 e0       	ldi	r25, 0x01	; 1
     ce2:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <Print::println()>
    delay(1000);
     ce6:	68 ee       	ldi	r22, 0xE8	; 232
     ce8:	73 e0       	ldi	r23, 0x03	; 3
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	0e 94 d5 17 	call	0x2faa	; 0x2faa <delay>
void loop()
  {
  static int loopCount = 0;

  // Allow the terminal console to be brought up.
  for(int i = 3; i > 0; --i)
     cf2:	21 97       	sbiw	r28, 0x01	; 1
     cf4:	39 f7       	brne	.-50     	; 0xcc4 <loop+0x8>
    Serial.print(F("Tests starting... "));
    Serial.print(i);
    Serial.println();
    delay(1000);
    }
  Serial.println();
     cf6:	89 eb       	ldi	r24, 0xB9	; 185
     cf8:	91 e0       	ldi	r25, 0x01	; 1
     cfa:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <Print::println()>


// Check that correct version of library is under test.
static void testLibVersion()
  {
  Serial.println("LibVersion");
     cfe:	89 eb       	ldi	r24, 0xB9	; 185
     d00:	91 e0       	ldi	r25, 0x01	; 1
     d02:	6b e0       	ldi	r22, 0x0B	; 11
     d04:	71 e0       	ldi	r23, 0x01	; 1
     d06:	0e 94 c9 1b 	call	0x3792	; 0x3792 <Print::println(char const*)>
  Serial.println();


  // Run the tests, fastest / newest / most-fragile / most-interesting first...
  testLibVersion();
  testAESGCMAll0();
     d0a:	0e 94 69 05 	call	0xad2	; 0xad2 <testAESGCMAll0()>




  // Announce successful loop completion and count.
  ++loopCount;
     d0e:	80 91 26 01 	lds	r24, 0x0126
     d12:	90 91 27 01 	lds	r25, 0x0127
     d16:	01 96       	adiw	r24, 0x01	; 1
     d18:	90 93 27 01 	sts	0x0127, r25
     d1c:	80 93 26 01 	sts	0x0126, r24
  Serial.println();
     d20:	89 eb       	ldi	r24, 0xB9	; 185
     d22:	91 e0       	ldi	r25, 0x01	; 1
     d24:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <Print::println()>
  Serial.print(F("%%% All tests completed OK, round "));
     d28:	89 eb       	ldi	r24, 0xB9	; 185
     d2a:	91 e0       	ldi	r25, 0x01	; 1
     d2c:	68 e6       	ldi	r22, 0x68	; 104
     d2e:	70 e0       	ldi	r23, 0x00	; 0
     d30:	0e 94 b3 1a 	call	0x3566	; 0x3566 <Print::print(__FlashStringHelper const*)>
  Serial.print(loopCount);
     d34:	60 91 26 01 	lds	r22, 0x0126
     d38:	70 91 27 01 	lds	r23, 0x0127
     d3c:	89 eb       	ldi	r24, 0xB9	; 185
     d3e:	91 e0       	ldi	r25, 0x01	; 1
     d40:	4a e0       	ldi	r20, 0x0A	; 10
     d42:	50 e0       	ldi	r21, 0x00	; 0
     d44:	0e 94 b6 1b 	call	0x376c	; 0x376c <Print::print(int, int)>
  Serial.println();
     d48:	89 eb       	ldi	r24, 0xB9	; 185
     d4a:	91 e0       	ldi	r25, 0x01	; 1
     d4c:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <Print::println()>
  Serial.println();
     d50:	89 eb       	ldi	r24, 0xB9	; 185
     d52:	91 e0       	ldi	r25, 0x01	; 1
     d54:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <Print::println()>
  Serial.println();
     d58:	89 eb       	ldi	r24, 0xB9	; 185
     d5a:	91 e0       	ldi	r25, 0x01	; 1
     d5c:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <Print::println()>
  delay(2000);
     d60:	60 ed       	ldi	r22, 0xD0	; 208
     d62:	77 e0       	ldi	r23, 0x07	; 7
     d64:	80 e0       	ldi	r24, 0x00	; 0
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	0e 94 d5 17 	call	0x2faa	; 0x2faa <delay>
  }
     d6c:	df 91       	pop	r29
     d6e:	cf 91       	pop	r28
     d70:	08 95       	ret

00000d72 <setup>:


void setup()
  {
  // initialize serial communications at 9600 bps.
  Serial.begin(9600); 
     d72:	89 eb       	ldi	r24, 0xB9	; 185
     d74:	91 e0       	ldi	r25, 0x01	; 1
     d76:	40 e8       	ldi	r20, 0x80	; 128
     d78:	55 e2       	ldi	r21, 0x25	; 37
     d7a:	60 e0       	ldi	r22, 0x00	; 0
     d7c:	70 e0       	ldi	r23, 0x00	; 0
     d7e:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <HardwareSerial::begin(unsigned long)>
  }
     d82:	08 95       	ret

00000d84 <OpenTRV::AESGCM::AES128GCM16small::decrypt(unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned char*)>:
bool OpenTRV::AESGCM::AES128GCM16small::decrypt(
                const uint8_t *const key, const size_t key_len,
                const uint8_t *const iv, const size_t iv_len,
                const uint8_t *const crypt, const size_t crypt_len,
                const uint8_t *const aad, const size_t aad_len, const uint8_t *const tag,
                uint8_t *const plain)
     d84:	6f 92       	push	r6
     d86:	7f 92       	push	r7
     d88:	8f 92       	push	r8
     d8a:	9f 92       	push	r9
     d8c:	af 92       	push	r10
     d8e:	bf 92       	push	r11
     d90:	cf 92       	push	r12
     d92:	df 92       	push	r13
     d94:	ef 92       	push	r14
     d96:	ff 92       	push	r15
     d98:	0f 93       	push	r16
     d9a:	1f 93       	push	r17
     d9c:	df 93       	push	r29
     d9e:	cf 93       	push	r28
     da0:	cd b7       	in	r28, 0x3d	; 61
     da2:	de b7       	in	r29, 0x3e	; 62
     da4:	69 88       	ldd	r6, Y+17	; 0x11
     da6:	7a 88       	ldd	r7, Y+18	; 0x12
     da8:	ab 89       	ldd	r26, Y+19	; 0x13
     daa:	bc 89       	ldd	r27, Y+20	; 0x14
  {
  // Some parameter validation.
  // Only expecting 16-byte (128-bit) key for AES-128.
  if((NULL == key) || (16 != key_len)) { return(false); }
     dac:	61 15       	cp	r22, r1
     dae:	71 05       	cpc	r23, r1
     db0:	59 f1       	breq	.+86     	; 0xe08 <OpenTRV::AESGCM::AES128GCM16small::decrypt(unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned char*)+0x84>
     db2:	40 31       	cpi	r20, 0x10	; 16
     db4:	51 05       	cpc	r21, r1
     db6:	41 f5       	brne	.+80     	; 0xe08 <OpenTRV::AESGCM::AES128GCM16small::decrypt(unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned char*)+0x84>
  // Only expecting 12-byte (96-bit) IV/nonce for AES-128.
  if((NULL == iv) || (12 != iv_len)) { return(false); }
     db8:	21 15       	cp	r18, r1
     dba:	31 05       	cpc	r19, r1
     dbc:	29 f1       	breq	.+74     	; 0xe08 <OpenTRV::AESGCM::AES128GCM16small::decrypt(unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned char*)+0x84>
     dbe:	0c 30       	cpi	r16, 0x0C	; 12
     dc0:	11 05       	cpc	r17, r1
     dc2:	11 f5       	brne	.+68     	; 0xe08 <OpenTRV::AESGCM::AES128GCM16small::decrypt(unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned char*)+0x84>
  // For now insist on both plain and ADATA parts, possibly length zero.
  if(NULL == crypt) { return(false); }
     dc4:	e1 14       	cp	r14, r1
     dc6:	f1 04       	cpc	r15, r1
     dc8:	f9 f0       	breq	.+62     	; 0xe08 <OpenTRV::AESGCM::AES128GCM16small::decrypt(unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned char*)+0x84>
  if(NULL == aad) { return(false); }
     dca:	a1 14       	cp	r10, r1
     dcc:	b1 04       	cpc	r11, r1
     dce:	e1 f0       	breq	.+56     	; 0xe08 <OpenTRV::AESGCM::AES128GCM16small::decrypt(unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned char*)+0x84>
  if(NULL == tag) { return(false); }
     dd0:	61 14       	cp	r6, r1
     dd2:	71 04       	cpc	r7, r1
     dd4:	c9 f0       	breq	.+50     	; 0xe08 <OpenTRV::AESGCM::AES128GCM16small::decrypt(unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned char*)+0x84>
  // Must have targets to write results to.
  if(NULL == plain) { return(false); }
     dd6:	10 97       	sbiw	r26, 0x00	; 0
     dd8:	b9 f0       	breq	.+46     	; 0xe08 <OpenTRV::AESGCM::AES128GCM16small::decrypt(unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned char*)+0x84>
  return(0 == aes_gcm_ad(context,
                         key, key_len,
                         iv, iv_len,
                         crypt, crypt_len,
                         aad, aad_len, tag,
                         plain));
     dda:	00 d0       	rcall	.+0      	; 0xddc <OpenTRV::AESGCM::AES128GCM16small::decrypt(unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned char*)+0x58>
     ddc:	00 d0       	rcall	.+0      	; 0xdde <OpenTRV::AESGCM::AES128GCM16small::decrypt(unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned char*)+0x5a>
     dde:	ed b7       	in	r30, 0x3d	; 61
     de0:	fe b7       	in	r31, 0x3e	; 62
     de2:	72 82       	std	Z+2, r7	; 0x02
     de4:	61 82       	std	Z+1, r6	; 0x01
     de6:	b4 83       	std	Z+4, r27	; 0x04
     de8:	a3 83       	std	Z+3, r26	; 0x03
     dea:	40 e1       	ldi	r20, 0x10	; 16
     dec:	50 e0       	ldi	r21, 0x00	; 0
     dee:	0c e0       	ldi	r16, 0x0C	; 12
     df0:	10 e0       	ldi	r17, 0x00	; 0
     df2:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <aes_gcm_ad>
     df6:	20 e0       	ldi	r18, 0x00	; 0
     df8:	0f 90       	pop	r0
     dfa:	0f 90       	pop	r0
     dfc:	0f 90       	pop	r0
     dfe:	0f 90       	pop	r0
     e00:	89 2b       	or	r24, r25
     e02:	19 f4       	brne	.+6      	; 0xe0a <OpenTRV::AESGCM::AES128GCM16small::decrypt(unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned char*)+0x86>
     e04:	21 e0       	ldi	r18, 0x01	; 1
     e06:	01 c0       	rjmp	.+2      	; 0xe0a <OpenTRV::AESGCM::AES128GCM16small::decrypt(unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned char*)+0x86>
     e08:	20 e0       	ldi	r18, 0x00	; 0
  }
     e0a:	82 2f       	mov	r24, r18
     e0c:	cf 91       	pop	r28
     e0e:	df 91       	pop	r29
     e10:	1f 91       	pop	r17
     e12:	0f 91       	pop	r16
     e14:	ff 90       	pop	r15
     e16:	ef 90       	pop	r14
     e18:	df 90       	pop	r13
     e1a:	cf 90       	pop	r12
     e1c:	bf 90       	pop	r11
     e1e:	af 90       	pop	r10
     e20:	9f 90       	pop	r9
     e22:	8f 90       	pop	r8
     e24:	7f 90       	pop	r7
     e26:	6f 90       	pop	r6
     e28:	08 95       	ret

00000e2a <OpenTRV::AESGCM::AES128GCM16small::encrypt(unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char*, unsigned char*)>:
                 const uint8_t *const key, const size_t key_len,
                 const uint8_t *const iv, const size_t iv_len,
                 const uint8_t *const plain, const size_t plain_len,
                 const uint8_t *const aad, const size_t aad_len,
                 uint8_t *const crypt,
                 uint8_t *const tag)
     e2a:	6f 92       	push	r6
     e2c:	7f 92       	push	r7
     e2e:	8f 92       	push	r8
     e30:	9f 92       	push	r9
     e32:	af 92       	push	r10
     e34:	bf 92       	push	r11
     e36:	cf 92       	push	r12
     e38:	df 92       	push	r13
     e3a:	ef 92       	push	r14
     e3c:	ff 92       	push	r15
     e3e:	0f 93       	push	r16
     e40:	1f 93       	push	r17
     e42:	df 93       	push	r29
     e44:	cf 93       	push	r28
     e46:	cd b7       	in	r28, 0x3d	; 61
     e48:	de b7       	in	r29, 0x3e	; 62
     e4a:	69 88       	ldd	r6, Y+17	; 0x11
     e4c:	7a 88       	ldd	r7, Y+18	; 0x12
     e4e:	ab 89       	ldd	r26, Y+19	; 0x13
     e50:	bc 89       	ldd	r27, Y+20	; 0x14
  {
  // Some parameter validation.
  // Only expecting 16-byte (128-bit) key for AES-128.
  if((NULL == key) || (16 != key_len)) { return(false); }
     e52:	61 15       	cp	r22, r1
     e54:	71 05       	cpc	r23, r1
     e56:	59 f1       	breq	.+86     	; 0xeae <OpenTRV::AESGCM::AES128GCM16small::encrypt(unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char*, unsigned char*)+0x84>
     e58:	40 31       	cpi	r20, 0x10	; 16
     e5a:	51 05       	cpc	r21, r1
     e5c:	41 f5       	brne	.+80     	; 0xeae <OpenTRV::AESGCM::AES128GCM16small::encrypt(unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char*, unsigned char*)+0x84>
  // Only expecting 12-byte (96-bit) IV/nonce for AES-128.
  if((NULL == iv) || (12 != iv_len)) { return(false); }
     e5e:	21 15       	cp	r18, r1
     e60:	31 05       	cpc	r19, r1
     e62:	29 f1       	breq	.+74     	; 0xeae <OpenTRV::AESGCM::AES128GCM16small::encrypt(unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char*, unsigned char*)+0x84>
     e64:	0c 30       	cpi	r16, 0x0C	; 12
     e66:	11 05       	cpc	r17, r1
     e68:	11 f5       	brne	.+68     	; 0xeae <OpenTRV::AESGCM::AES128GCM16small::encrypt(unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char*, unsigned char*)+0x84>
  // For now insist on both plai and ADATA parts, possibly length zero.
  if(NULL == plain) { return(false); }
     e6a:	e1 14       	cp	r14, r1
     e6c:	f1 04       	cpc	r15, r1
     e6e:	f9 f0       	breq	.+62     	; 0xeae <OpenTRV::AESGCM::AES128GCM16small::encrypt(unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char*, unsigned char*)+0x84>
  if(NULL == aad) { return(false); }
     e70:	a1 14       	cp	r10, r1
     e72:	b1 04       	cpc	r11, r1
     e74:	e1 f0       	breq	.+56     	; 0xeae <OpenTRV::AESGCM::AES128GCM16small::encrypt(unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char*, unsigned char*)+0x84>
  // Must have targets to write results to.
  if(NULL == crypt) { return(false); }
     e76:	61 14       	cp	r6, r1
     e78:	71 04       	cpc	r7, r1
     e7a:	c9 f0       	breq	.+50     	; 0xeae <OpenTRV::AESGCM::AES128GCM16small::encrypt(unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char*, unsigned char*)+0x84>
  if(NULL == tag) { return(false); }
     e7c:	10 97       	sbiw	r26, 0x00	; 0
     e7e:	b9 f0       	breq	.+46     	; 0xeae <OpenTRV::AESGCM::AES128GCM16small::encrypt(unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char*, unsigned char*)+0x84>
  return(0 == aes_gcm_ae(context,
                         key, key_len,
                         iv, iv_len,
                         plain, plain_len,
                         aad, aad_len,
                         crypt, tag));
     e80:	00 d0       	rcall	.+0      	; 0xe82 <OpenTRV::AESGCM::AES128GCM16small::encrypt(unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char*, unsigned char*)+0x58>
     e82:	00 d0       	rcall	.+0      	; 0xe84 <OpenTRV::AESGCM::AES128GCM16small::encrypt(unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char*, unsigned char*)+0x5a>
     e84:	ed b7       	in	r30, 0x3d	; 61
     e86:	fe b7       	in	r31, 0x3e	; 62
     e88:	72 82       	std	Z+2, r7	; 0x02
     e8a:	61 82       	std	Z+1, r6	; 0x01
     e8c:	b4 83       	std	Z+4, r27	; 0x04
     e8e:	a3 83       	std	Z+3, r26	; 0x03
     e90:	40 e1       	ldi	r20, 0x10	; 16
     e92:	50 e0       	ldi	r21, 0x00	; 0
     e94:	0c e0       	ldi	r16, 0x0C	; 12
     e96:	10 e0       	ldi	r17, 0x00	; 0
     e98:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <aes_gcm_ae>
     e9c:	20 e0       	ldi	r18, 0x00	; 0
     e9e:	0f 90       	pop	r0
     ea0:	0f 90       	pop	r0
     ea2:	0f 90       	pop	r0
     ea4:	0f 90       	pop	r0
     ea6:	89 2b       	or	r24, r25
     ea8:	19 f4       	brne	.+6      	; 0xeb0 <OpenTRV::AESGCM::AES128GCM16small::encrypt(unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char*, unsigned char*)+0x86>
     eaa:	21 e0       	ldi	r18, 0x01	; 1
     eac:	01 c0       	rjmp	.+2      	; 0xeb0 <OpenTRV::AESGCM::AES128GCM16small::encrypt(unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char*, unsigned char*)+0x86>
     eae:	20 e0       	ldi	r18, 0x00	; 0
  }
     eb0:	82 2f       	mov	r24, r18
     eb2:	cf 91       	pop	r28
     eb4:	df 91       	pop	r29
     eb6:	1f 91       	pop	r17
     eb8:	0f 91       	pop	r16
     eba:	ff 90       	pop	r15
     ebc:	ef 90       	pop	r14
     ebe:	df 90       	pop	r13
     ec0:	cf 90       	pop	r12
     ec2:	bf 90       	pop	r11
     ec4:	af 90       	pop	r10
     ec6:	9f 90       	pop	r9
     ec8:	8f 90       	pop	r8
     eca:	7f 90       	pop	r7
     ecc:	6f 90       	pop	r6
     ece:	08 95       	ret

00000ed0 <shift_right_block>:
	*d++ ^= *s++;
}


static void shift_right_block(u8 *v)
{
     ed0:	cf 93       	push	r28
     ed2:	df 93       	push	r29
     ed4:	ec 01       	movw	r28, r24
	u32 val;

	val = WPA_GET_BE32(v + 12);
     ed6:	fc 01       	movw	r30, r24
     ed8:	3c 96       	adiw	r30, 0x0c	; 12

/* Macros for handling unaligned memory accesses */

static inline u32 WPA_GET_BE32(const u8 *a)
{
  return ((u32)a[0] << 24) | ((u32)a[1] << 16) | ((u32)a[2] << 8) | a[3];
     eda:	83 81       	ldd	r24, Z+3	; 0x03
     edc:	28 2f       	mov	r18, r24
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	40 e0       	ldi	r20, 0x00	; 0
     ee2:	50 e0       	ldi	r21, 0x00	; 0
     ee4:	8c 85       	ldd	r24, Y+12	; 0x0c
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	a0 e0       	ldi	r26, 0x00	; 0
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	b8 2f       	mov	r27, r24
     eee:	aa 27       	eor	r26, r26
     ef0:	99 27       	eor	r25, r25
     ef2:	88 27       	eor	r24, r24
     ef4:	28 2b       	or	r18, r24
     ef6:	39 2b       	or	r19, r25
     ef8:	4a 2b       	or	r20, r26
     efa:	5b 2b       	or	r21, r27
     efc:	81 81       	ldd	r24, Z+1	; 0x01
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	a0 e0       	ldi	r26, 0x00	; 0
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	dc 01       	movw	r26, r24
     f06:	99 27       	eor	r25, r25
     f08:	88 27       	eor	r24, r24
     f0a:	28 2b       	or	r18, r24
     f0c:	39 2b       	or	r19, r25
     f0e:	4a 2b       	or	r20, r26
     f10:	5b 2b       	or	r21, r27
     f12:	82 81       	ldd	r24, Z+2	; 0x02
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	a0 e0       	ldi	r26, 0x00	; 0
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	ba 2f       	mov	r27, r26
     f1c:	a9 2f       	mov	r26, r25
     f1e:	98 2f       	mov	r25, r24
     f20:	88 27       	eor	r24, r24
     f22:	28 2b       	or	r18, r24
     f24:	39 2b       	or	r19, r25
     f26:	4a 2b       	or	r20, r26
     f28:	5b 2b       	or	r21, r27
	val >>= 1;
     f2a:	56 95       	lsr	r21
     f2c:	47 95       	ror	r20
     f2e:	37 95       	ror	r19
     f30:	27 95       	ror	r18
	if (v[11] & 0x01)
     f32:	8b 85       	ldd	r24, Y+11	; 0x0b
     f34:	80 fd       	sbrc	r24, 0
		val |= 0x80000000;
     f36:	50 68       	ori	r21, 0x80	; 128
	WPA_PUT_BE32(v + 12, val);
     f38:	fe 01       	movw	r30, r28
     f3a:	3c 96       	adiw	r30, 0x0c	; 12
}

static inline void WPA_PUT_BE32(u8 *a, u32 val)
{
  a[0] = (val >> 24) & 0xff;
     f3c:	85 2f       	mov	r24, r21
     f3e:	99 27       	eor	r25, r25
     f40:	aa 27       	eor	r26, r26
     f42:	bb 27       	eor	r27, r27
     f44:	8c 87       	std	Y+12, r24	; 0x0c
  a[1] = (val >> 16) & 0xff;
     f46:	ca 01       	movw	r24, r20
     f48:	aa 27       	eor	r26, r26
     f4a:	bb 27       	eor	r27, r27
     f4c:	81 83       	std	Z+1, r24	; 0x01
  a[2] = (val >> 8) & 0xff;
     f4e:	bb 27       	eor	r27, r27
     f50:	a5 2f       	mov	r26, r21
     f52:	94 2f       	mov	r25, r20
     f54:	83 2f       	mov	r24, r19
     f56:	82 83       	std	Z+2, r24	; 0x02
  a[3] = val & 0xff;
     f58:	23 83       	std	Z+3, r18	; 0x03

	val = WPA_GET_BE32(v + 8);
     f5a:	fe 01       	movw	r30, r28
     f5c:	38 96       	adiw	r30, 0x08	; 8

/* Macros for handling unaligned memory accesses */

static inline u32 WPA_GET_BE32(const u8 *a)
{
  return ((u32)a[0] << 24) | ((u32)a[1] << 16) | ((u32)a[2] << 8) | a[3];
     f5e:	83 81       	ldd	r24, Z+3	; 0x03
     f60:	28 2f       	mov	r18, r24
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	40 e0       	ldi	r20, 0x00	; 0
     f66:	50 e0       	ldi	r21, 0x00	; 0
     f68:	88 85       	ldd	r24, Y+8	; 0x08
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	a0 e0       	ldi	r26, 0x00	; 0
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	b8 2f       	mov	r27, r24
     f72:	aa 27       	eor	r26, r26
     f74:	99 27       	eor	r25, r25
     f76:	88 27       	eor	r24, r24
     f78:	28 2b       	or	r18, r24
     f7a:	39 2b       	or	r19, r25
     f7c:	4a 2b       	or	r20, r26
     f7e:	5b 2b       	or	r21, r27
     f80:	81 81       	ldd	r24, Z+1	; 0x01
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	a0 e0       	ldi	r26, 0x00	; 0
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	dc 01       	movw	r26, r24
     f8a:	99 27       	eor	r25, r25
     f8c:	88 27       	eor	r24, r24
     f8e:	28 2b       	or	r18, r24
     f90:	39 2b       	or	r19, r25
     f92:	4a 2b       	or	r20, r26
     f94:	5b 2b       	or	r21, r27
     f96:	82 81       	ldd	r24, Z+2	; 0x02
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	a0 e0       	ldi	r26, 0x00	; 0
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	ba 2f       	mov	r27, r26
     fa0:	a9 2f       	mov	r26, r25
     fa2:	98 2f       	mov	r25, r24
     fa4:	88 27       	eor	r24, r24
     fa6:	28 2b       	or	r18, r24
     fa8:	39 2b       	or	r19, r25
     faa:	4a 2b       	or	r20, r26
     fac:	5b 2b       	or	r21, r27
	val >>= 1;
     fae:	56 95       	lsr	r21
     fb0:	47 95       	ror	r20
     fb2:	37 95       	ror	r19
     fb4:	27 95       	ror	r18
	if (v[7] & 0x01)
     fb6:	8f 81       	ldd	r24, Y+7	; 0x07
     fb8:	80 fd       	sbrc	r24, 0
		val |= 0x80000000;
     fba:	50 68       	ori	r21, 0x80	; 128
	WPA_PUT_BE32(v + 8, val);
     fbc:	fe 01       	movw	r30, r28
     fbe:	38 96       	adiw	r30, 0x08	; 8
}

static inline void WPA_PUT_BE32(u8 *a, u32 val)
{
  a[0] = (val >> 24) & 0xff;
     fc0:	85 2f       	mov	r24, r21
     fc2:	99 27       	eor	r25, r25
     fc4:	aa 27       	eor	r26, r26
     fc6:	bb 27       	eor	r27, r27
     fc8:	88 87       	std	Y+8, r24	; 0x08
  a[1] = (val >> 16) & 0xff;
     fca:	ca 01       	movw	r24, r20
     fcc:	aa 27       	eor	r26, r26
     fce:	bb 27       	eor	r27, r27
     fd0:	81 83       	std	Z+1, r24	; 0x01
  a[2] = (val >> 8) & 0xff;
     fd2:	bb 27       	eor	r27, r27
     fd4:	a5 2f       	mov	r26, r21
     fd6:	94 2f       	mov	r25, r20
     fd8:	83 2f       	mov	r24, r19
     fda:	82 83       	std	Z+2, r24	; 0x02
  a[3] = val & 0xff;
     fdc:	2b 87       	std	Y+11, r18	; 0x0b

	val = WPA_GET_BE32(v + 4);
     fde:	fe 01       	movw	r30, r28
     fe0:	34 96       	adiw	r30, 0x04	; 4

/* Macros for handling unaligned memory accesses */

static inline u32 WPA_GET_BE32(const u8 *a)
{
  return ((u32)a[0] << 24) | ((u32)a[1] << 16) | ((u32)a[2] << 8) | a[3];
     fe2:	83 81       	ldd	r24, Z+3	; 0x03
     fe4:	28 2f       	mov	r18, r24
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	40 e0       	ldi	r20, 0x00	; 0
     fea:	50 e0       	ldi	r21, 0x00	; 0
     fec:	8c 81       	ldd	r24, Y+4	; 0x04
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	a0 e0       	ldi	r26, 0x00	; 0
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	b8 2f       	mov	r27, r24
     ff6:	aa 27       	eor	r26, r26
     ff8:	99 27       	eor	r25, r25
     ffa:	88 27       	eor	r24, r24
     ffc:	28 2b       	or	r18, r24
     ffe:	39 2b       	or	r19, r25
    1000:	4a 2b       	or	r20, r26
    1002:	5b 2b       	or	r21, r27
    1004:	81 81       	ldd	r24, Z+1	; 0x01
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	a0 e0       	ldi	r26, 0x00	; 0
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	dc 01       	movw	r26, r24
    100e:	99 27       	eor	r25, r25
    1010:	88 27       	eor	r24, r24
    1012:	28 2b       	or	r18, r24
    1014:	39 2b       	or	r19, r25
    1016:	4a 2b       	or	r20, r26
    1018:	5b 2b       	or	r21, r27
    101a:	82 81       	ldd	r24, Z+2	; 0x02
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	a0 e0       	ldi	r26, 0x00	; 0
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	ba 2f       	mov	r27, r26
    1024:	a9 2f       	mov	r26, r25
    1026:	98 2f       	mov	r25, r24
    1028:	88 27       	eor	r24, r24
    102a:	28 2b       	or	r18, r24
    102c:	39 2b       	or	r19, r25
    102e:	4a 2b       	or	r20, r26
    1030:	5b 2b       	or	r21, r27
	val >>= 1;
    1032:	56 95       	lsr	r21
    1034:	47 95       	ror	r20
    1036:	37 95       	ror	r19
    1038:	27 95       	ror	r18
	if (v[3] & 0x01)
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
    103c:	80 fd       	sbrc	r24, 0
		val |= 0x80000000;
    103e:	50 68       	ori	r21, 0x80	; 128
	WPA_PUT_BE32(v + 4, val);
    1040:	fe 01       	movw	r30, r28
    1042:	34 96       	adiw	r30, 0x04	; 4
}

static inline void WPA_PUT_BE32(u8 *a, u32 val)
{
  a[0] = (val >> 24) & 0xff;
    1044:	85 2f       	mov	r24, r21
    1046:	99 27       	eor	r25, r25
    1048:	aa 27       	eor	r26, r26
    104a:	bb 27       	eor	r27, r27
    104c:	8c 83       	std	Y+4, r24	; 0x04
  a[1] = (val >> 16) & 0xff;
    104e:	ca 01       	movw	r24, r20
    1050:	aa 27       	eor	r26, r26
    1052:	bb 27       	eor	r27, r27
    1054:	81 83       	std	Z+1, r24	; 0x01
  a[2] = (val >> 8) & 0xff;
    1056:	bb 27       	eor	r27, r27
    1058:	a5 2f       	mov	r26, r21
    105a:	94 2f       	mov	r25, r20
    105c:	83 2f       	mov	r24, r19
    105e:	82 83       	std	Z+2, r24	; 0x02
  a[3] = val & 0xff;
    1060:	2f 83       	std	Y+7, r18	; 0x07

/* Macros for handling unaligned memory accesses */

static inline u32 WPA_GET_BE32(const u8 *a)
{
  return ((u32)a[0] << 24) | ((u32)a[1] << 16) | ((u32)a[2] << 8) | a[3];
    1062:	2b 81       	ldd	r18, Y+3	; 0x03
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	40 e0       	ldi	r20, 0x00	; 0
    1068:	50 e0       	ldi	r21, 0x00	; 0
    106a:	88 81       	ld	r24, Y
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	a0 e0       	ldi	r26, 0x00	; 0
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	b8 2f       	mov	r27, r24
    1074:	aa 27       	eor	r26, r26
    1076:	99 27       	eor	r25, r25
    1078:	88 27       	eor	r24, r24
    107a:	28 2b       	or	r18, r24
    107c:	39 2b       	or	r19, r25
    107e:	4a 2b       	or	r20, r26
    1080:	5b 2b       	or	r21, r27
    1082:	89 81       	ldd	r24, Y+1	; 0x01
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	a0 e0       	ldi	r26, 0x00	; 0
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	dc 01       	movw	r26, r24
    108c:	99 27       	eor	r25, r25
    108e:	88 27       	eor	r24, r24
    1090:	28 2b       	or	r18, r24
    1092:	39 2b       	or	r19, r25
    1094:	4a 2b       	or	r20, r26
    1096:	5b 2b       	or	r21, r27
    1098:	8a 81       	ldd	r24, Y+2	; 0x02
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	a0 e0       	ldi	r26, 0x00	; 0
    109e:	b0 e0       	ldi	r27, 0x00	; 0
    10a0:	ba 2f       	mov	r27, r26
    10a2:	a9 2f       	mov	r26, r25
    10a4:	98 2f       	mov	r25, r24
    10a6:	88 27       	eor	r24, r24
    10a8:	28 2b       	or	r18, r24
    10aa:	39 2b       	or	r19, r25
    10ac:	4a 2b       	or	r20, r26
    10ae:	5b 2b       	or	r21, r27

	val = WPA_GET_BE32(v);
	val >>= 1;
    10b0:	56 95       	lsr	r21
    10b2:	47 95       	ror	r20
    10b4:	37 95       	ror	r19
    10b6:	27 95       	ror	r18
}

static inline void WPA_PUT_BE32(u8 *a, u32 val)
{
  a[0] = (val >> 24) & 0xff;
    10b8:	85 2f       	mov	r24, r21
    10ba:	99 27       	eor	r25, r25
    10bc:	aa 27       	eor	r26, r26
    10be:	bb 27       	eor	r27, r27
    10c0:	88 83       	st	Y, r24
  a[1] = (val >> 16) & 0xff;
    10c2:	ca 01       	movw	r24, r20
    10c4:	aa 27       	eor	r26, r26
    10c6:	bb 27       	eor	r27, r27
    10c8:	89 83       	std	Y+1, r24	; 0x01
  a[2] = (val >> 8) & 0xff;
    10ca:	bb 27       	eor	r27, r27
    10cc:	a5 2f       	mov	r26, r21
    10ce:	94 2f       	mov	r25, r20
    10d0:	83 2f       	mov	r24, r19
    10d2:	8a 83       	std	Y+2, r24	; 0x02
  a[3] = val & 0xff;
    10d4:	2b 83       	std	Y+3, r18	; 0x03
	WPA_PUT_BE32(v, val);
}
    10d6:	df 91       	pop	r29
    10d8:	cf 91       	pop	r28
    10da:	08 95       	ret

000010dc <aes_gcm_init_hash_subkey>:


static void aes_gcm_init_hash_subkey(
		void *aes, // DHD20150614
		const u8 *key, size_t key_len, u8 *H)
{
    10dc:	ef 92       	push	r14
    10de:	ff 92       	push	r15
    10e0:	0f 93       	push	r16
    10e2:	1f 93       	push	r17
    10e4:	7c 01       	movw	r14, r24
    10e6:	12 2f       	mov	r17, r18
    10e8:	03 2f       	mov	r16, r19
//	void *aes; // DHD20150614

	aes_encrypt_init(aes, key, key_len);
    10ea:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <aes_encrypt_init>
//	aes = aes_encrypt_init(key, key_len); // DHD20150614
//	if (aes == NULL) // DHD20150614
//		return NULL; // DHD20150614

	/* Generate hash subkey H = AES_K(0^128) */
	os_memset(H, 0, AES_BLOCK_SIZE);
    10ee:	e1 2f       	mov	r30, r17
    10f0:	f0 2f       	mov	r31, r16
    10f2:	80 e1       	ldi	r24, 0x10	; 16
    10f4:	df 01       	movw	r26, r30
    10f6:	1d 92       	st	X+, r1
    10f8:	8a 95       	dec	r24
    10fa:	e9 f7       	brne	.-6      	; 0x10f6 <aes_gcm_init_hash_subkey+0x1a>
	aes_encrypt(aes, H, H);
    10fc:	c7 01       	movw	r24, r14
    10fe:	61 2f       	mov	r22, r17
    1100:	70 2f       	mov	r23, r16
    1102:	41 2f       	mov	r20, r17
    1104:	50 2f       	mov	r21, r16
    1106:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <aes_encrypt>
	/* wpa_hexdump_key(MSG_EXCESSIVE, "Hash subkey H for GHASH",
			H, AES_BLOCK_SIZE); */
//	return aes; // DHD20150614
}
    110a:	1f 91       	pop	r17
    110c:	0f 91       	pop	r16
    110e:	ff 90       	pop	r15
    1110:	ef 90       	pop	r14
    1112:	08 95       	ret

00001114 <gf_mult>:
}


/* Multiplication in GF(2^128) */
static void gf_mult(const u8 *x, const u8 *y, u8 *z)
{
    1114:	2f 92       	push	r2
    1116:	3f 92       	push	r3
    1118:	4f 92       	push	r4
    111a:	5f 92       	push	r5
    111c:	6f 92       	push	r6
    111e:	7f 92       	push	r7
    1120:	8f 92       	push	r8
    1122:	9f 92       	push	r9
    1124:	af 92       	push	r10
    1126:	bf 92       	push	r11
    1128:	cf 92       	push	r12
    112a:	df 92       	push	r13
    112c:	ef 92       	push	r14
    112e:	ff 92       	push	r15
    1130:	0f 93       	push	r16
    1132:	1f 93       	push	r17
    1134:	df 93       	push	r29
    1136:	cf 93       	push	r28
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
    113c:	66 97       	sbiw	r28, 0x16	; 22
    113e:	0f b6       	in	r0, 0x3f	; 63
    1140:	f8 94       	cli
    1142:	de bf       	out	0x3e, r29	; 62
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	cd bf       	out	0x3d, r28	; 61
    1148:	3c 01       	movw	r6, r24
    114a:	2a 01       	movw	r4, r20
	u8 v[16];
	int i, j;

	os_memset(z, 0, 16); /* Z_0 = 0^128 */
    114c:	80 e1       	ldi	r24, 0x10	; 16
    114e:	da 01       	movw	r26, r20
    1150:	1d 92       	st	X+, r1
    1152:	8a 95       	dec	r24
    1154:	e9 f7       	brne	.-6      	; 0x1150 <gf_mult+0x3c>
	os_memcpy(v, y, 16); /* V_0 = Y */
    1156:	de 01       	movw	r26, r28
    1158:	11 96       	adiw	r26, 0x01	; 1
    115a:	fb 01       	movw	r30, r22
    115c:	80 e1       	ldi	r24, 0x10	; 16
    115e:	01 90       	ld	r0, Z+
    1160:	0d 92       	st	X+, r0
    1162:	81 50       	subi	r24, 0x01	; 1
    1164:	e1 f7       	brne	.-8      	; 0x115e <gf_mult+0x4a>
    1166:	ee 24       	eor	r14, r14
    1168:	ff 24       	eor	r15, r15


static void xor_block(u8 *dst, const u8 *src)
{
	u32 *d = (u32 *) dst;
	u32 *s = (u32 *) src;
    116a:	6e 01       	movw	r12, r28
    116c:	08 94       	sec
    116e:	c1 1c       	adc	r12, r1
    1170:	d1 1c       	adc	r13, r1
	*d++ ^= *s++;
    1172:	e5 e0       	ldi	r30, 0x05	; 5
    1174:	2e 2e       	mov	r2, r30
    1176:	31 2c       	mov	r3, r1
    1178:	2c 0e       	add	r2, r28
    117a:	3d 1e       	adc	r3, r29
	*d++ ^= *s++;
    117c:	79 e0       	ldi	r23, 0x09	; 9
    117e:	87 2e       	mov	r8, r23
    1180:	91 2c       	mov	r9, r1
    1182:	8c 0e       	add	r8, r28
    1184:	9d 1e       	adc	r9, r29
    1186:	84 c0       	rjmp	.+264    	; 0x1290 <gf_mult+0x17c>
	os_memset(z, 0, 16); /* Z_0 = 0^128 */
	os_memcpy(v, y, 16); /* V_0 = Y */

	for (i = 0; i < 16; i++) {
		for (j = 0; j < 8; j++) {
			if (x[i] & (1 << (7 - j))) {
    1188:	f5 01       	movw	r30, r10
    118a:	80 81       	ld	r24, Z
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	00 2e       	mov	r0, r16
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <gf_mult+0x82>
    1192:	95 95       	asr	r25
    1194:	87 95       	ror	r24
    1196:	0a 94       	dec	r0
    1198:	e2 f7       	brpl	.-8      	; 0x1192 <gf_mult+0x7e>
    119a:	80 ff       	sbrs	r24, 0
    119c:	5d c0       	rjmp	.+186    	; 0x1258 <gf_mult+0x144>
}


static void xor_block(u8 *dst, const u8 *src)
{
	u32 *d = (u32 *) dst;
    119e:	49 8a       	std	Y+17, r4	; 0x11
    11a0:	5a 8a       	std	Y+18, r5	; 0x12
	u32 *s = (u32 *) src;
	*d++ ^= *s++;
    11a2:	a9 89       	ldd	r26, Y+17	; 0x11
    11a4:	ba 89       	ldd	r27, Y+18	; 0x12
    11a6:	8d 91       	ld	r24, X+
    11a8:	9d 91       	ld	r25, X+
    11aa:	0d 90       	ld	r0, X+
    11ac:	bc 91       	ld	r27, X
    11ae:	a0 2d       	mov	r26, r0
    11b0:	f6 01       	movw	r30, r12
    11b2:	20 81       	ld	r18, Z
    11b4:	31 81       	ldd	r19, Z+1	; 0x01
    11b6:	42 81       	ldd	r20, Z+2	; 0x02
    11b8:	53 81       	ldd	r21, Z+3	; 0x03
    11ba:	82 27       	eor	r24, r18
    11bc:	93 27       	eor	r25, r19
    11be:	a4 27       	eor	r26, r20
    11c0:	b5 27       	eor	r27, r21
    11c2:	69 89       	ldd	r22, Y+17	; 0x11
    11c4:	7a 89       	ldd	r23, Y+18	; 0x12
    11c6:	fb 01       	movw	r30, r22
    11c8:	81 93       	st	Z+, r24
    11ca:	91 93       	st	Z+, r25
    11cc:	a1 93       	st	Z+, r26
    11ce:	b1 93       	st	Z+, r27
    11d0:	bf 01       	movw	r22, r30
	*d++ ^= *s++;
    11d2:	a9 89       	ldd	r26, Y+17	; 0x11
    11d4:	ba 89       	ldd	r27, Y+18	; 0x12
    11d6:	14 96       	adiw	r26, 0x04	; 4
    11d8:	8d 91       	ld	r24, X+
    11da:	9d 91       	ld	r25, X+
    11dc:	0d 90       	ld	r0, X+
    11de:	bc 91       	ld	r27, X
    11e0:	a0 2d       	mov	r26, r0
    11e2:	f1 01       	movw	r30, r2
    11e4:	20 81       	ld	r18, Z
    11e6:	31 81       	ldd	r19, Z+1	; 0x01
    11e8:	42 81       	ldd	r20, Z+2	; 0x02
    11ea:	53 81       	ldd	r21, Z+3	; 0x03
    11ec:	82 27       	eor	r24, r18
    11ee:	93 27       	eor	r25, r19
    11f0:	a4 27       	eor	r26, r20
    11f2:	b5 27       	eor	r27, r21
    11f4:	e9 89       	ldd	r30, Y+17	; 0x11
    11f6:	fa 89       	ldd	r31, Y+18	; 0x12
    11f8:	84 83       	std	Z+4, r24	; 0x04
    11fa:	95 83       	std	Z+5, r25	; 0x05
    11fc:	a6 83       	std	Z+6, r26	; 0x06
    11fe:	b7 83       	std	Z+7, r27	; 0x07
    1200:	cb 01       	movw	r24, r22
    1202:	04 96       	adiw	r24, 0x04	; 4
    1204:	9a 8b       	std	Y+18, r25	; 0x12
    1206:	89 8b       	std	Y+17, r24	; 0x11
	*d++ ^= *s++;
    1208:	fb 01       	movw	r30, r22
    120a:	84 81       	ldd	r24, Z+4	; 0x04
    120c:	95 81       	ldd	r25, Z+5	; 0x05
    120e:	a6 81       	ldd	r26, Z+6	; 0x06
    1210:	b7 81       	ldd	r27, Z+7	; 0x07
    1212:	f4 01       	movw	r30, r8
    1214:	20 81       	ld	r18, Z
    1216:	31 81       	ldd	r19, Z+1	; 0x01
    1218:	42 81       	ldd	r20, Z+2	; 0x02
    121a:	53 81       	ldd	r21, Z+3	; 0x03
    121c:	82 27       	eor	r24, r18
    121e:	93 27       	eor	r25, r19
    1220:	a4 27       	eor	r26, r20
    1222:	b5 27       	eor	r27, r21
    1224:	fb 01       	movw	r30, r22
    1226:	84 83       	std	Z+4, r24	; 0x04
    1228:	95 83       	std	Z+5, r25	; 0x05
    122a:	a6 83       	std	Z+6, r26	; 0x06
    122c:	b7 83       	std	Z+7, r27	; 0x07
	*d++ ^= *s++;
    122e:	e9 89       	ldd	r30, Y+17	; 0x11
    1230:	fa 89       	ldd	r31, Y+18	; 0x12
    1232:	84 81       	ldd	r24, Z+4	; 0x04
    1234:	95 81       	ldd	r25, Z+5	; 0x05
    1236:	a6 81       	ldd	r26, Z+6	; 0x06
    1238:	b7 81       	ldd	r27, Z+7	; 0x07
    123a:	f4 01       	movw	r30, r8
    123c:	24 81       	ldd	r18, Z+4	; 0x04
    123e:	35 81       	ldd	r19, Z+5	; 0x05
    1240:	46 81       	ldd	r20, Z+6	; 0x06
    1242:	57 81       	ldd	r21, Z+7	; 0x07
    1244:	82 27       	eor	r24, r18
    1246:	93 27       	eor	r25, r19
    1248:	a4 27       	eor	r26, r20
    124a:	b5 27       	eor	r27, r21
    124c:	e9 89       	ldd	r30, Y+17	; 0x11
    124e:	fa 89       	ldd	r31, Y+18	; 0x12
    1250:	84 83       	std	Z+4, r24	; 0x04
    1252:	95 83       	std	Z+5, r25	; 0x05
    1254:	a6 83       	std	Z+6, r26	; 0x06
    1256:	b7 83       	std	Z+7, r27	; 0x07
				xor_block(z, v);
			} else {
				/* Z_(i + 1) = Z_i */
			}

			if (v[15] & 0x01) {
    1258:	88 89       	ldd	r24, Y+16	; 0x10
    125a:	80 ff       	sbrs	r24, 0
    125c:	08 c0       	rjmp	.+16     	; 0x126e <gf_mult+0x15a>
				/* V_(i + 1) = (V_i >> 1) XOR R */
				shift_right_block(v);
    125e:	c6 01       	movw	r24, r12
    1260:	0e 94 68 07 	call	0xed0	; 0xed0 <shift_right_block>
				/* R = 11100001 || 0^120 */
				v[0] ^= 0xe1;
    1264:	89 81       	ldd	r24, Y+1	; 0x01
    1266:	f1 ee       	ldi	r31, 0xE1	; 225
    1268:	8f 27       	eor	r24, r31
    126a:	89 83       	std	Y+1, r24	; 0x01
    126c:	03 c0       	rjmp	.+6      	; 0x1274 <gf_mult+0x160>
			} else {
				/* V_(i + 1) = V_i >> 1 */
				shift_right_block(v);
    126e:	c6 01       	movw	r24, r12
    1270:	0e 94 68 07 	call	0xed0	; 0xed0 <shift_right_block>
    1274:	01 50       	subi	r16, 0x01	; 1
    1276:	10 40       	sbci	r17, 0x00	; 0

	os_memset(z, 0, 16); /* Z_0 = 0^128 */
	os_memcpy(v, y, 16); /* V_0 = Y */

	for (i = 0; i < 16; i++) {
		for (j = 0; j < 8; j++) {
    1278:	8f ef       	ldi	r24, 0xFF	; 255
    127a:	0f 3f       	cpi	r16, 0xFF	; 255
    127c:	18 07       	cpc	r17, r24
    127e:	09 f0       	breq	.+2      	; 0x1282 <gf_mult+0x16e>
    1280:	83 cf       	rjmp	.-250    	; 0x1188 <gf_mult+0x74>
	int i, j;

	os_memset(z, 0, 16); /* Z_0 = 0^128 */
	os_memcpy(v, y, 16); /* V_0 = Y */

	for (i = 0; i < 16; i++) {
    1282:	08 94       	sec
    1284:	e1 1c       	adc	r14, r1
    1286:	f1 1c       	adc	r15, r1
    1288:	90 e1       	ldi	r25, 0x10	; 16
    128a:	e9 16       	cp	r14, r25
    128c:	f1 04       	cpc	r15, r1
    128e:	31 f0       	breq	.+12     	; 0x129c <gf_mult+0x188>
    1290:	07 e0       	ldi	r16, 0x07	; 7
    1292:	10 e0       	ldi	r17, 0x00	; 0
		for (j = 0; j < 8; j++) {
			if (x[i] & (1 << (7 - j))) {
    1294:	53 01       	movw	r10, r6
    1296:	ae 0c       	add	r10, r14
    1298:	bf 1c       	adc	r11, r15
    129a:	76 cf       	rjmp	.-276    	; 0x1188 <gf_mult+0x74>
				/* V_(i + 1) = V_i >> 1 */
				shift_right_block(v);
			}
		}
	}
}
    129c:	66 96       	adiw	r28, 0x16	; 22
    129e:	0f b6       	in	r0, 0x3f	; 63
    12a0:	f8 94       	cli
    12a2:	de bf       	out	0x3e, r29	; 62
    12a4:	0f be       	out	0x3f, r0	; 63
    12a6:	cd bf       	out	0x3d, r28	; 61
    12a8:	cf 91       	pop	r28
    12aa:	df 91       	pop	r29
    12ac:	1f 91       	pop	r17
    12ae:	0f 91       	pop	r16
    12b0:	ff 90       	pop	r15
    12b2:	ef 90       	pop	r14
    12b4:	df 90       	pop	r13
    12b6:	cf 90       	pop	r12
    12b8:	bf 90       	pop	r11
    12ba:	af 90       	pop	r10
    12bc:	9f 90       	pop	r9
    12be:	8f 90       	pop	r8
    12c0:	7f 90       	pop	r7
    12c2:	6f 90       	pop	r6
    12c4:	5f 90       	pop	r5
    12c6:	4f 90       	pop	r4
    12c8:	3f 90       	pop	r3
    12ca:	2f 90       	pop	r2
    12cc:	08 95       	ret

000012ce <ghash>:
	os_memset(y, 0, 16);
}


static void ghash(const u8 *h, const u8 *x, size_t xlen, u8 *y)
{
    12ce:	2f 92       	push	r2
    12d0:	3f 92       	push	r3
    12d2:	4f 92       	push	r4
    12d4:	5f 92       	push	r5
    12d6:	6f 92       	push	r6
    12d8:	7f 92       	push	r7
    12da:	8f 92       	push	r8
    12dc:	9f 92       	push	r9
    12de:	af 92       	push	r10
    12e0:	bf 92       	push	r11
    12e2:	cf 92       	push	r12
    12e4:	df 92       	push	r13
    12e6:	ef 92       	push	r14
    12e8:	ff 92       	push	r15
    12ea:	0f 93       	push	r16
    12ec:	1f 93       	push	r17
    12ee:	df 93       	push	r29
    12f0:	cf 93       	push	r28
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
    12f6:	66 97       	sbiw	r28, 0x16	; 22
    12f8:	0f b6       	in	r0, 0x3f	; 63
    12fa:	f8 94       	cli
    12fc:	de bf       	out	0x3e, r29	; 62
    12fe:	0f be       	out	0x3f, r0	; 63
    1300:	cd bf       	out	0x3d, r28	; 61
    1302:	1c 01       	movw	r2, r24
    1304:	6b 01       	movw	r12, r22
    1306:	3a 01       	movw	r6, r20
    1308:	b2 2e       	mov	r11, r18
    130a:	a3 2e       	mov	r10, r19
	size_t m, i;
	const u8 *xpos = x;
	u8 tmp[16];

	m = xlen / 16;
    130c:	4a 01       	movw	r8, r20
    130e:	a4 e0       	ldi	r26, 0x04	; 4
    1310:	96 94       	lsr	r9
    1312:	87 94       	ror	r8
    1314:	aa 95       	dec	r26
    1316:	e1 f7       	brne	.-8      	; 0x1310 <ghash+0x42>
    1318:	8b 01       	movw	r16, r22
    131a:	ee 24       	eor	r14, r14
    131c:	ff 24       	eor	r15, r15
		xpos += 16;

		/* dot operation:
		 * multiplication operation for binary Galois (finite) field of
		 * 2^128 elements */
		gf_mult(y, h, tmp);
    131e:	2e 01       	movw	r4, r28
    1320:	08 94       	sec
    1322:	41 1c       	adc	r4, r1
    1324:	51 1c       	adc	r5, r1
    1326:	72 c0       	rjmp	.+228    	; 0x140c <ghash+0x13e>
}


static void xor_block(u8 *dst, const u8 *src)
{
	u32 *d = (u32 *) dst;
    1328:	b9 8a       	std	Y+17, r11	; 0x11
    132a:	aa 8a       	std	Y+18, r10	; 0x12
	u32 *s = (u32 *) src;
	*d++ ^= *s++;
    132c:	a9 89       	ldd	r26, Y+17	; 0x11
    132e:	ba 89       	ldd	r27, Y+18	; 0x12
    1330:	8d 91       	ld	r24, X+
    1332:	9d 91       	ld	r25, X+
    1334:	0d 90       	ld	r0, X+
    1336:	bc 91       	ld	r27, X
    1338:	a0 2d       	mov	r26, r0
    133a:	f8 01       	movw	r30, r16
    133c:	20 81       	ld	r18, Z
    133e:	31 81       	ldd	r19, Z+1	; 0x01
    1340:	42 81       	ldd	r20, Z+2	; 0x02
    1342:	53 81       	ldd	r21, Z+3	; 0x03
    1344:	82 27       	eor	r24, r18
    1346:	93 27       	eor	r25, r19
    1348:	a4 27       	eor	r26, r20
    134a:	b5 27       	eor	r27, r21
    134c:	69 89       	ldd	r22, Y+17	; 0x11
    134e:	7a 89       	ldd	r23, Y+18	; 0x12
    1350:	fb 01       	movw	r30, r22
    1352:	81 93       	st	Z+, r24
    1354:	91 93       	st	Z+, r25
    1356:	a1 93       	st	Z+, r26
    1358:	b1 93       	st	Z+, r27
    135a:	bf 01       	movw	r22, r30
	*d++ ^= *s++;
    135c:	a9 89       	ldd	r26, Y+17	; 0x11
    135e:	ba 89       	ldd	r27, Y+18	; 0x12
    1360:	14 96       	adiw	r26, 0x04	; 4
    1362:	8d 91       	ld	r24, X+
    1364:	9d 91       	ld	r25, X+
    1366:	0d 90       	ld	r0, X+
    1368:	bc 91       	ld	r27, X
    136a:	a0 2d       	mov	r26, r0
    136c:	f8 01       	movw	r30, r16
    136e:	24 81       	ldd	r18, Z+4	; 0x04
    1370:	35 81       	ldd	r19, Z+5	; 0x05
    1372:	46 81       	ldd	r20, Z+6	; 0x06
    1374:	57 81       	ldd	r21, Z+7	; 0x07
    1376:	82 27       	eor	r24, r18
    1378:	93 27       	eor	r25, r19
    137a:	a4 27       	eor	r26, r20
    137c:	b5 27       	eor	r27, r21
    137e:	e9 89       	ldd	r30, Y+17	; 0x11
    1380:	fa 89       	ldd	r31, Y+18	; 0x12
    1382:	84 83       	std	Z+4, r24	; 0x04
    1384:	95 83       	std	Z+5, r25	; 0x05
    1386:	a6 83       	std	Z+6, r26	; 0x06
    1388:	b7 83       	std	Z+7, r27	; 0x07
    138a:	cb 01       	movw	r24, r22
    138c:	04 96       	adiw	r24, 0x04	; 4
    138e:	9a 8b       	std	Y+18, r25	; 0x12
    1390:	89 8b       	std	Y+17, r24	; 0x11
	*d++ ^= *s++;
    1392:	fb 01       	movw	r30, r22
    1394:	84 81       	ldd	r24, Z+4	; 0x04
    1396:	95 81       	ldd	r25, Z+5	; 0x05
    1398:	a6 81       	ldd	r26, Z+6	; 0x06
    139a:	b7 81       	ldd	r27, Z+7	; 0x07
    139c:	f8 01       	movw	r30, r16
    139e:	20 85       	ldd	r18, Z+8	; 0x08
    13a0:	31 85       	ldd	r19, Z+9	; 0x09
    13a2:	42 85       	ldd	r20, Z+10	; 0x0a
    13a4:	53 85       	ldd	r21, Z+11	; 0x0b
    13a6:	82 27       	eor	r24, r18
    13a8:	93 27       	eor	r25, r19
    13aa:	a4 27       	eor	r26, r20
    13ac:	b5 27       	eor	r27, r21
    13ae:	fb 01       	movw	r30, r22
    13b0:	84 83       	std	Z+4, r24	; 0x04
    13b2:	95 83       	std	Z+5, r25	; 0x05
    13b4:	a6 83       	std	Z+6, r26	; 0x06
    13b6:	b7 83       	std	Z+7, r27	; 0x07
	*d++ ^= *s++;
    13b8:	e9 89       	ldd	r30, Y+17	; 0x11
    13ba:	fa 89       	ldd	r31, Y+18	; 0x12
    13bc:	84 81       	ldd	r24, Z+4	; 0x04
    13be:	95 81       	ldd	r25, Z+5	; 0x05
    13c0:	a6 81       	ldd	r26, Z+6	; 0x06
    13c2:	b7 81       	ldd	r27, Z+7	; 0x07
    13c4:	f8 01       	movw	r30, r16
    13c6:	24 85       	ldd	r18, Z+12	; 0x0c
    13c8:	35 85       	ldd	r19, Z+13	; 0x0d
    13ca:	46 85       	ldd	r20, Z+14	; 0x0e
    13cc:	57 85       	ldd	r21, Z+15	; 0x0f
    13ce:	82 27       	eor	r24, r18
    13d0:	93 27       	eor	r25, r19
    13d2:	a4 27       	eor	r26, r20
    13d4:	b5 27       	eor	r27, r21
    13d6:	e9 89       	ldd	r30, Y+17	; 0x11
    13d8:	fa 89       	ldd	r31, Y+18	; 0x12
    13da:	84 83       	std	Z+4, r24	; 0x04
    13dc:	95 83       	std	Z+5, r25	; 0x05
    13de:	a6 83       	std	Z+6, r26	; 0x06
    13e0:	b7 83       	std	Z+7, r27	; 0x07
	m = xlen / 16;

	for (i = 0; i < m; i++) {
		/* Y_i = (Y^(i-1) XOR X_i) dot H */
		xor_block(y, xpos);
		xpos += 16;
    13e2:	00 5f       	subi	r16, 0xF0	; 240
    13e4:	1f 4f       	sbci	r17, 0xFF	; 255

		/* dot operation:
		 * multiplication operation for binary Galois (finite) field of
		 * 2^128 elements */
		gf_mult(y, h, tmp);
    13e6:	8b 2d       	mov	r24, r11
    13e8:	9a 2d       	mov	r25, r10
    13ea:	b1 01       	movw	r22, r2
    13ec:	a2 01       	movw	r20, r4
    13ee:	0e 94 8a 08 	call	0x1114	; 0x1114 <gf_mult>
		os_memcpy(y, tmp, 16);
    13f2:	2b 2d       	mov	r18, r11
    13f4:	3a 2d       	mov	r19, r10
    13f6:	c9 01       	movw	r24, r18
    13f8:	dc 01       	movw	r26, r24
    13fa:	f2 01       	movw	r30, r4
    13fc:	80 e1       	ldi	r24, 0x10	; 16
    13fe:	01 90       	ld	r0, Z+
    1400:	0d 92       	st	X+, r0
    1402:	81 50       	subi	r24, 0x01	; 1
    1404:	e1 f7       	brne	.-8      	; 0x13fe <ghash+0x130>
	const u8 *xpos = x;
	u8 tmp[16];

	m = xlen / 16;

	for (i = 0; i < m; i++) {
    1406:	08 94       	sec
    1408:	e1 1c       	adc	r14, r1
    140a:	f1 1c       	adc	r15, r1
    140c:	e8 14       	cp	r14, r8
    140e:	f9 04       	cpc	r15, r9
    1410:	08 f4       	brcc	.+2      	; 0x1414 <ghash+0x146>
    1412:	8a cf       	rjmp	.-236    	; 0x1328 <ghash+0x5a>
    1414:	94 01       	movw	r18, r8
    1416:	f4 e0       	ldi	r31, 0x04	; 4
    1418:	22 0f       	add	r18, r18
    141a:	33 1f       	adc	r19, r19
    141c:	fa 95       	dec	r31
    141e:	e1 f7       	brne	.-8      	; 0x1418 <ghash+0x14a>
    1420:	2c 0d       	add	r18, r12
    1422:	3d 1d       	adc	r19, r13
		 * 2^128 elements */
		gf_mult(y, h, tmp);
		os_memcpy(y, tmp, 16);
	}

	if (x + xlen > xpos) {
    1424:	a6 01       	movw	r20, r12
    1426:	46 0d       	add	r20, r6
    1428:	57 1d       	adc	r21, r7
    142a:	24 17       	cp	r18, r20
    142c:	35 07       	cpc	r19, r21
    142e:	08 f0       	brcs	.+2      	; 0x1432 <ghash+0x164>
    1430:	73 c0       	rjmp	.+230    	; 0x1518 <ghash+0x24a>
		/* Add zero padded last block */
		size_t last = x + xlen - xpos;
    1432:	8a 01       	movw	r16, r20
    1434:	02 1b       	sub	r16, r18
    1436:	13 0b       	sbc	r17, r19
		os_memcpy(tmp, xpos, last);
    1438:	7e 01       	movw	r14, r28
    143a:	08 94       	sec
    143c:	e1 1c       	adc	r14, r1
    143e:	f1 1c       	adc	r15, r1
    1440:	c7 01       	movw	r24, r14
    1442:	b9 01       	movw	r22, r18
    1444:	a8 01       	movw	r20, r16
    1446:	0e 94 1f 05 	call	0xa3e	; 0xa3e <memcpy>
		os_memset(tmp + last, 0, sizeof(tmp) - last);
    144a:	e0 e1       	ldi	r30, 0x10	; 16
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	e0 1b       	sub	r30, r16
    1450:	f1 0b       	sbc	r31, r17
    1452:	97 01       	movw	r18, r14
    1454:	20 0f       	add	r18, r16
    1456:	31 1f       	adc	r19, r17
    1458:	c9 01       	movw	r24, r18
    145a:	60 e0       	ldi	r22, 0x00	; 0
    145c:	70 e0       	ldi	r23, 0x00	; 0
    145e:	af 01       	movw	r20, r30
    1460:	0e 94 28 05 	call	0xa50	; 0xa50 <memset>
}


static void xor_block(u8 *dst, const u8 *src)
{
	u32 *d = (u32 *) dst;
    1464:	eb 2d       	mov	r30, r11
    1466:	fa 2d       	mov	r31, r10
	u32 *s = (u32 *) src;
	*d++ ^= *s++;
    1468:	60 80       	ld	r6, Z
    146a:	71 80       	ldd	r7, Z+1	; 0x01
    146c:	82 80       	ldd	r8, Z+2	; 0x02
    146e:	93 80       	ldd	r9, Z+3	; 0x03
    1470:	29 81       	ldd	r18, Y+1	; 0x01
    1472:	3a 81       	ldd	r19, Y+2	; 0x02
    1474:	4b 81       	ldd	r20, Y+3	; 0x03
    1476:	5c 81       	ldd	r21, Y+4	; 0x04
    1478:	62 26       	eor	r6, r18
    147a:	73 26       	eor	r7, r19
    147c:	84 26       	eor	r8, r20
    147e:	95 26       	eor	r9, r21
    1480:	bf 01       	movw	r22, r30
    1482:	db 01       	movw	r26, r22
    1484:	6d 92       	st	X+, r6
    1486:	7d 92       	st	X+, r7
    1488:	8d 92       	st	X+, r8
    148a:	9d 92       	st	X+, r9
    148c:	bd 01       	movw	r22, r26
	*d++ ^= *s++;
    148e:	84 81       	ldd	r24, Z+4	; 0x04
    1490:	95 81       	ldd	r25, Z+5	; 0x05
    1492:	a6 81       	ldd	r26, Z+6	; 0x06
    1494:	b7 81       	ldd	r27, Z+7	; 0x07
    1496:	2d 81       	ldd	r18, Y+5	; 0x05
    1498:	3e 81       	ldd	r19, Y+6	; 0x06
    149a:	4f 81       	ldd	r20, Y+7	; 0x07
    149c:	58 85       	ldd	r21, Y+8	; 0x08
    149e:	82 27       	eor	r24, r18
    14a0:	93 27       	eor	r25, r19
    14a2:	a4 27       	eor	r26, r20
    14a4:	b5 27       	eor	r27, r21
    14a6:	84 83       	std	Z+4, r24	; 0x04
    14a8:	95 83       	std	Z+5, r25	; 0x05
    14aa:	a6 83       	std	Z+6, r26	; 0x06
    14ac:	b7 83       	std	Z+7, r27	; 0x07
    14ae:	8b 01       	movw	r16, r22
    14b0:	0c 5f       	subi	r16, 0xFC	; 252
    14b2:	1f 4f       	sbci	r17, 0xFF	; 255
	*d++ ^= *s++;
    14b4:	fb 01       	movw	r30, r22
    14b6:	84 81       	ldd	r24, Z+4	; 0x04
    14b8:	95 81       	ldd	r25, Z+5	; 0x05
    14ba:	a6 81       	ldd	r26, Z+6	; 0x06
    14bc:	b7 81       	ldd	r27, Z+7	; 0x07
    14be:	29 85       	ldd	r18, Y+9	; 0x09
    14c0:	3a 85       	ldd	r19, Y+10	; 0x0a
    14c2:	4b 85       	ldd	r20, Y+11	; 0x0b
    14c4:	5c 85       	ldd	r21, Y+12	; 0x0c
    14c6:	82 27       	eor	r24, r18
    14c8:	93 27       	eor	r25, r19
    14ca:	a4 27       	eor	r26, r20
    14cc:	b5 27       	eor	r27, r21
    14ce:	84 83       	std	Z+4, r24	; 0x04
    14d0:	95 83       	std	Z+5, r25	; 0x05
    14d2:	a6 83       	std	Z+6, r26	; 0x06
    14d4:	b7 83       	std	Z+7, r27	; 0x07
	*d++ ^= *s++;
    14d6:	f8 01       	movw	r30, r16
    14d8:	84 81       	ldd	r24, Z+4	; 0x04
    14da:	95 81       	ldd	r25, Z+5	; 0x05
    14dc:	a6 81       	ldd	r26, Z+6	; 0x06
    14de:	b7 81       	ldd	r27, Z+7	; 0x07
    14e0:	2d 85       	ldd	r18, Y+13	; 0x0d
    14e2:	3e 85       	ldd	r19, Y+14	; 0x0e
    14e4:	4f 85       	ldd	r20, Y+15	; 0x0f
    14e6:	58 89       	ldd	r21, Y+16	; 0x10
    14e8:	82 27       	eor	r24, r18
    14ea:	93 27       	eor	r25, r19
    14ec:	a4 27       	eor	r26, r20
    14ee:	b5 27       	eor	r27, r21
    14f0:	84 83       	std	Z+4, r24	; 0x04
    14f2:	95 83       	std	Z+5, r25	; 0x05
    14f4:	a6 83       	std	Z+6, r26	; 0x06
    14f6:	b7 83       	std	Z+7, r27	; 0x07
		xor_block(y, tmp);

		/* dot operation:
		 * multiplication operation for binary Galois (finite) field of
		 * 2^128 elements */
		gf_mult(y, h, tmp);
    14f8:	8b 2d       	mov	r24, r11
    14fa:	9a 2d       	mov	r25, r10
    14fc:	b1 01       	movw	r22, r2
    14fe:	a7 01       	movw	r20, r14
    1500:	0e 94 8a 08 	call	0x1114	; 0x1114 <gf_mult>
		os_memcpy(y, tmp, 16);
    1504:	2b 2d       	mov	r18, r11
    1506:	3a 2d       	mov	r19, r10
    1508:	c9 01       	movw	r24, r18
    150a:	dc 01       	movw	r26, r24
    150c:	f7 01       	movw	r30, r14
    150e:	80 e1       	ldi	r24, 0x10	; 16
    1510:	01 90       	ld	r0, Z+
    1512:	0d 92       	st	X+, r0
    1514:	81 50       	subi	r24, 0x01	; 1
    1516:	e1 f7       	brne	.-8      	; 0x1510 <ghash+0x242>
	}

	/* Return Y_m */
}
    1518:	66 96       	adiw	r28, 0x16	; 22
    151a:	0f b6       	in	r0, 0x3f	; 63
    151c:	f8 94       	cli
    151e:	de bf       	out	0x3e, r29	; 62
    1520:	0f be       	out	0x3f, r0	; 63
    1522:	cd bf       	out	0x3d, r28	; 61
    1524:	cf 91       	pop	r28
    1526:	df 91       	pop	r29
    1528:	1f 91       	pop	r17
    152a:	0f 91       	pop	r16
    152c:	ff 90       	pop	r15
    152e:	ef 90       	pop	r14
    1530:	df 90       	pop	r13
    1532:	cf 90       	pop	r12
    1534:	bf 90       	pop	r11
    1536:	af 90       	pop	r10
    1538:	9f 90       	pop	r9
    153a:	8f 90       	pop	r8
    153c:	7f 90       	pop	r7
    153e:	6f 90       	pop	r6
    1540:	5f 90       	pop	r5
    1542:	4f 90       	pop	r4
    1544:	3f 90       	pop	r3
    1546:	2f 90       	pop	r2
    1548:	08 95       	ret

0000154a <aes_gcm_ghash>:
}


static void aes_gcm_ghash(const u8 *H, const u8 *aad, size_t aad_len,
			  const u8 *crypt, size_t crypt_len, u8 *S)
{
    154a:	2f 92       	push	r2
    154c:	3f 92       	push	r3
    154e:	4f 92       	push	r4
    1550:	5f 92       	push	r5
    1552:	6f 92       	push	r6
    1554:	7f 92       	push	r7
    1556:	8f 92       	push	r8
    1558:	9f 92       	push	r9
    155a:	af 92       	push	r10
    155c:	bf 92       	push	r11
    155e:	cf 92       	push	r12
    1560:	df 92       	push	r13
    1562:	ef 92       	push	r14
    1564:	ff 92       	push	r15
    1566:	0f 93       	push	r16
    1568:	1f 93       	push	r17
    156a:	df 93       	push	r29
    156c:	cf 93       	push	r28
    156e:	cd b7       	in	r28, 0x3d	; 61
    1570:	de b7       	in	r29, 0x3e	; 62
    1572:	60 97       	sbiw	r28, 0x10	; 16
    1574:	0f b6       	in	r0, 0x3f	; 63
    1576:	f8 94       	cli
    1578:	de bf       	out	0x3e, r29	; 62
    157a:	0f be       	out	0x3f, r0	; 63
    157c:	cd bf       	out	0x3d, r28	; 61
    157e:	2c 01       	movw	r4, r24
    1580:	5a 01       	movw	r10, r20
    1582:	19 01       	movw	r2, r18
    1584:	38 01       	movw	r6, r16


static void ghash_start(u8 *y)
{
	/* Y_0 = 0^128 */
	os_memset(y, 0, 16);
    1586:	80 e1       	ldi	r24, 0x10	; 16
    1588:	d7 01       	movw	r26, r14
    158a:	1d 92       	st	X+, r1
    158c:	8a 95       	dec	r24
    158e:	e9 f7       	brne	.-6      	; 0x158a <aes_gcm_ghash+0x40>
	 * v = 128 * ceil[len(A)/128] - len(A)
	 * S = GHASH_H(A || 0^v || C || 0^u || [len(A)]64 || [len(C)]64)
	 * (i.e., zero padded to block size A || C and lengths of each in bits)
	 */
	ghash_start(S);
	ghash(H, aad, aad_len, S);
    1590:	c2 01       	movw	r24, r4
    1592:	97 01       	movw	r18, r14
    1594:	0e 94 67 09 	call	0x12ce	; 0x12ce <ghash>
	ghash(H, crypt, crypt_len, S);
    1598:	c2 01       	movw	r24, r4
    159a:	b1 01       	movw	r22, r2
    159c:	a8 01       	movw	r20, r16
    159e:	97 01       	movw	r18, r14
    15a0:	0e 94 67 09 	call	0x12ce	; 0x12ce <ghash>
  return ((u32)a[0] << 24) | ((u32)a[1] << 16) | ((u32)a[2] << 8) | a[3];
}

static inline void WPA_PUT_BE32(u8 *a, u32 val)
{
  a[0] = (val >> 24) & 0xff;
    15a4:	19 82       	std	Y+1, r1	; 0x01
  a[1] = (val >> 16) & 0xff;
    15a6:	1a 82       	std	Y+2, r1	; 0x02
  a[2] = (val >> 8) & 0xff;
    15a8:	1b 82       	std	Y+3, r1	; 0x03
  a[3] = val & 0xff;
    15aa:	1c 82       	std	Y+4, r1	; 0x04

	// AIDEN - Used to be: WPA_PUT_BE64(len_buf, aad_len * 8);
	WPA_PUT_BE32(len_buf, 0);
	WPA_PUT_BE32(len_buf + 4, aad_len * 8);
    15ac:	83 e0       	ldi	r24, 0x03	; 3
    15ae:	aa 0c       	add	r10, r10
    15b0:	bb 1c       	adc	r11, r11
    15b2:	8a 95       	dec	r24
    15b4:	e1 f7       	brne	.-8      	; 0x15ae <aes_gcm_ghash+0x64>
    15b6:	cc 24       	eor	r12, r12
    15b8:	dd 24       	eor	r13, r13
  return ((u32)a[0] << 24) | ((u32)a[1] << 16) | ((u32)a[2] << 8) | a[3];
}

static inline void WPA_PUT_BE32(u8 *a, u32 val)
{
  a[0] = (val >> 24) & 0xff;
    15ba:	1d 82       	std	Y+5, r1	; 0x05
  a[1] = (val >> 16) & 0xff;
    15bc:	1e 82       	std	Y+6, r1	; 0x06
  a[2] = (val >> 8) & 0xff;
    15be:	bb 27       	eor	r27, r27
    15c0:	ad 2d       	mov	r26, r13
    15c2:	9c 2d       	mov	r25, r12
    15c4:	8b 2d       	mov	r24, r11
    15c6:	8f 83       	std	Y+7, r24	; 0x07
  a[3] = val & 0xff;
    15c8:	a8 86       	std	Y+8, r10	; 0x08
  return ((u32)a[0] << 24) | ((u32)a[1] << 16) | ((u32)a[2] << 8) | a[3];
}

static inline void WPA_PUT_BE32(u8 *a, u32 val)
{
  a[0] = (val >> 24) & 0xff;
    15ca:	19 86       	std	Y+9, r1	; 0x09
  a[1] = (val >> 16) & 0xff;
    15cc:	1a 86       	std	Y+10, r1	; 0x0a
  a[2] = (val >> 8) & 0xff;
    15ce:	1b 86       	std	Y+11, r1	; 0x0b
  a[3] = val & 0xff;
    15d0:	1c 86       	std	Y+12, r1	; 0x0c

	// AIDEN - Used to be: WPA_PUT_BE64(len_buf + 8, crypt_len * 8);
	WPA_PUT_BE32(len_buf + 8, 0);
	WPA_PUT_BE32(len_buf + 12, crypt_len * 8);
    15d2:	13 e0       	ldi	r17, 0x03	; 3
    15d4:	66 0c       	add	r6, r6
    15d6:	77 1c       	adc	r7, r7
    15d8:	1a 95       	dec	r17
    15da:	e1 f7       	brne	.-8      	; 0x15d4 <aes_gcm_ghash+0x8a>
    15dc:	88 24       	eor	r8, r8
    15de:	99 24       	eor	r9, r9
  return ((u32)a[0] << 24) | ((u32)a[1] << 16) | ((u32)a[2] << 8) | a[3];
}

static inline void WPA_PUT_BE32(u8 *a, u32 val)
{
  a[0] = (val >> 24) & 0xff;
    15e0:	1d 86       	std	Y+13, r1	; 0x0d
  a[1] = (val >> 16) & 0xff;
    15e2:	1e 86       	std	Y+14, r1	; 0x0e
  a[2] = (val >> 8) & 0xff;
    15e4:	bb 27       	eor	r27, r27
    15e6:	a9 2d       	mov	r26, r9
    15e8:	98 2d       	mov	r25, r8
    15ea:	87 2d       	mov	r24, r7
    15ec:	8f 87       	std	Y+15, r24	; 0x0f
  a[3] = val & 0xff;
    15ee:	68 8a       	std	Y+16, r6	; 0x10

	ghash(H, len_buf, sizeof(len_buf), S);
    15f0:	c2 01       	movw	r24, r4
    15f2:	be 01       	movw	r22, r28
    15f4:	6f 5f       	subi	r22, 0xFF	; 255
    15f6:	7f 4f       	sbci	r23, 0xFF	; 255
    15f8:	40 e1       	ldi	r20, 0x10	; 16
    15fa:	50 e0       	ldi	r21, 0x00	; 0
    15fc:	97 01       	movw	r18, r14
    15fe:	0e 94 67 09 	call	0x12ce	; 0x12ce <ghash>

	/* wpa_hexdump_key(MSG_EXCESSIVE, "S = GHASH_H(...)", S, 16); */
}
    1602:	60 96       	adiw	r28, 0x10	; 16
    1604:	0f b6       	in	r0, 0x3f	; 63
    1606:	f8 94       	cli
    1608:	de bf       	out	0x3e, r29	; 62
    160a:	0f be       	out	0x3f, r0	; 63
    160c:	cd bf       	out	0x3d, r28	; 61
    160e:	cf 91       	pop	r28
    1610:	df 91       	pop	r29
    1612:	1f 91       	pop	r17
    1614:	0f 91       	pop	r16
    1616:	ff 90       	pop	r15
    1618:	ef 90       	pop	r14
    161a:	df 90       	pop	r13
    161c:	cf 90       	pop	r12
    161e:	bf 90       	pop	r11
    1620:	af 90       	pop	r10
    1622:	9f 90       	pop	r9
    1624:	8f 90       	pop	r8
    1626:	7f 90       	pop	r7
    1628:	6f 90       	pop	r6
    162a:	5f 90       	pop	r5
    162c:	4f 90       	pop	r4
    162e:	3f 90       	pop	r3
    1630:	2f 90       	pop	r2
    1632:	08 95       	ret

00001634 <aes_gcm_prepare_j0>:
//	return aes; // DHD20150614
}


static void aes_gcm_prepare_j0(const u8 *iv, size_t iv_len, const u8 *H, u8 *J0)
{
    1634:	cf 92       	push	r12
    1636:	df 92       	push	r13
    1638:	ef 92       	push	r14
    163a:	ff 92       	push	r15
    163c:	0f 93       	push	r16
    163e:	1f 93       	push	r17
    1640:	df 93       	push	r29
    1642:	cf 93       	push	r28
    1644:	cd b7       	in	r28, 0x3d	; 61
    1646:	de b7       	in	r29, 0x3e	; 62
    1648:	60 97       	sbiw	r28, 0x10	; 16
    164a:	0f b6       	in	r0, 0x3f	; 63
    164c:	f8 94       	cli
    164e:	de bf       	out	0x3e, r29	; 62
    1650:	0f be       	out	0x3f, r0	; 63
    1652:	cd bf       	out	0x3d, r28	; 61
    1654:	fc 01       	movw	r30, r24
    1656:	8b 01       	movw	r16, r22
    1658:	6a 01       	movw	r12, r20
    165a:	79 01       	movw	r14, r18
	u8 len_buf[16];

#ifndef OT_AESGCM_AES128_IV12_ONLY // DHD20150614
	if (iv_len == 12) {
    165c:	6c 30       	cpi	r22, 0x0C	; 12
    165e:	71 05       	cpc	r23, r1
    1660:	91 f4       	brne	.+36     	; 0x1686 <aes_gcm_prepare_j0+0x52>
#endif // DHD20150614
		/* Prepare block J_0 = IV || 0^31 || 1 [len(IV) = 96] */
		os_memcpy(J0, iv, iv_len);
    1662:	d9 01       	movw	r26, r18
    1664:	fc 01       	movw	r30, r24
    1666:	8c e0       	ldi	r24, 0x0C	; 12
    1668:	01 90       	ld	r0, Z+
    166a:	0d 92       	st	X+, r0
    166c:	81 50       	subi	r24, 0x01	; 1
    166e:	e1 f7       	brne	.-8      	; 0x1668 <aes_gcm_prepare_j0+0x34>
		os_memset(J0 + iv_len, 0, AES_BLOCK_SIZE - iv_len);
    1670:	d7 01       	movw	r26, r14
    1672:	1c 96       	adiw	r26, 0x0c	; 12
    1674:	1d 92       	st	X+, r1
    1676:	1d 92       	st	X+, r1
    1678:	1d 92       	st	X+, r1
    167a:	1c 92       	st	X, r1
    167c:	1f 97       	sbiw	r26, 0x0f	; 15
		J0[AES_BLOCK_SIZE - 1] = 0x01;
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	1f 96       	adiw	r26, 0x0f	; 15
    1682:	8c 93       	st	X, r24
    1684:	2f c0       	rjmp	.+94     	; 0x16e4 <aes_gcm_prepare_j0+0xb0>


static void ghash_start(u8 *y)
{
	/* Y_0 = 0^128 */
	os_memset(y, 0, 16);
    1686:	80 e1       	ldi	r24, 0x10	; 16
    1688:	d9 01       	movw	r26, r18
    168a:	1d 92       	st	X+, r1
    168c:	8a 95       	dec	r24
    168e:	e9 f7       	brne	.-6      	; 0x168a <aes_gcm_prepare_j0+0x56>
		/*
		 * s = 128 * ceil(len(IV)/128) - len(IV)
		 * J_0 = GHASH_H(IV || 0^(s+64) || [len(IV)]_64)
		 */
		ghash_start(J0);
		ghash(H, iv, iv_len, J0);
    1690:	ca 01       	movw	r24, r20
    1692:	bf 01       	movw	r22, r30
    1694:	a8 01       	movw	r20, r16
    1696:	0e 94 67 09 	call	0x12ce	; 0x12ce <ghash>
  return ((u32)a[0] << 24) | ((u32)a[1] << 16) | ((u32)a[2] << 8) | a[3];
}

static inline void WPA_PUT_BE32(u8 *a, u32 val)
{
  a[0] = (val >> 24) & 0xff;
    169a:	19 82       	std	Y+1, r1	; 0x01
  a[1] = (val >> 16) & 0xff;
    169c:	1a 82       	std	Y+2, r1	; 0x02
  a[2] = (val >> 8) & 0xff;
    169e:	1b 82       	std	Y+3, r1	; 0x03
  a[3] = val & 0xff;
    16a0:	1c 82       	std	Y+4, r1	; 0x04
  return ((u32)a[0] << 24) | ((u32)a[1] << 16) | ((u32)a[2] << 8) | a[3];
}

static inline void WPA_PUT_BE32(u8 *a, u32 val)
{
  a[0] = (val >> 24) & 0xff;
    16a2:	1d 82       	std	Y+5, r1	; 0x05
  a[1] = (val >> 16) & 0xff;
    16a4:	1e 82       	std	Y+6, r1	; 0x06
  a[2] = (val >> 8) & 0xff;
    16a6:	1f 82       	std	Y+7, r1	; 0x07
  a[3] = val & 0xff;
    16a8:	18 86       	std	Y+8, r1	; 0x08
  return ((u32)a[0] << 24) | ((u32)a[1] << 16) | ((u32)a[2] << 8) | a[3];
}

static inline void WPA_PUT_BE32(u8 *a, u32 val)
{
  a[0] = (val >> 24) & 0xff;
    16aa:	19 86       	std	Y+9, r1	; 0x09
  a[1] = (val >> 16) & 0xff;
    16ac:	1a 86       	std	Y+10, r1	; 0x0a
  a[2] = (val >> 8) & 0xff;
    16ae:	1b 86       	std	Y+11, r1	; 0x0b
  a[3] = val & 0xff;
    16b0:	1c 86       	std	Y+12, r1	; 0x0c
		WPA_PUT_BE32(len_buf, 0);
		WPA_PUT_BE32(len_buf + 4, 0);

		// AIDEN - Used to be: WPA_PUT_BE64(len_buf + 8, iv_len * 8);
		WPA_PUT_BE32(len_buf + 8, 0);
		WPA_PUT_BE32(len_buf + 12, iv_len * 8);
    16b2:	23 e0       	ldi	r18, 0x03	; 3
    16b4:	00 0f       	add	r16, r16
    16b6:	11 1f       	adc	r17, r17
    16b8:	2a 95       	dec	r18
    16ba:	e1 f7       	brne	.-8      	; 0x16b4 <aes_gcm_prepare_j0+0x80>
    16bc:	98 01       	movw	r18, r16
    16be:	40 e0       	ldi	r20, 0x00	; 0
    16c0:	50 e0       	ldi	r21, 0x00	; 0
  return ((u32)a[0] << 24) | ((u32)a[1] << 16) | ((u32)a[2] << 8) | a[3];
}

static inline void WPA_PUT_BE32(u8 *a, u32 val)
{
  a[0] = (val >> 24) & 0xff;
    16c2:	1d 86       	std	Y+13, r1	; 0x0d
  a[1] = (val >> 16) & 0xff;
    16c4:	1e 86       	std	Y+14, r1	; 0x0e
  a[2] = (val >> 8) & 0xff;
    16c6:	bb 27       	eor	r27, r27
    16c8:	a5 2f       	mov	r26, r21
    16ca:	94 2f       	mov	r25, r20
    16cc:	83 2f       	mov	r24, r19
    16ce:	8f 87       	std	Y+15, r24	; 0x0f
  a[3] = val & 0xff;
    16d0:	08 8b       	std	Y+16, r16	; 0x10

		ghash(H, len_buf, sizeof(len_buf), J0);
    16d2:	c6 01       	movw	r24, r12
    16d4:	be 01       	movw	r22, r28
    16d6:	6f 5f       	subi	r22, 0xFF	; 255
    16d8:	7f 4f       	sbci	r23, 0xFF	; 255
    16da:	40 e1       	ldi	r20, 0x10	; 16
    16dc:	50 e0       	ldi	r21, 0x00	; 0
    16de:	97 01       	movw	r18, r14
    16e0:	0e 94 67 09 	call	0x12ce	; 0x12ce <ghash>
	}
#endif // DHD20150614

}
    16e4:	60 96       	adiw	r28, 0x10	; 16
    16e6:	0f b6       	in	r0, 0x3f	; 63
    16e8:	f8 94       	cli
    16ea:	de bf       	out	0x3e, r29	; 62
    16ec:	0f be       	out	0x3f, r0	; 63
    16ee:	cd bf       	out	0x3d, r28	; 61
    16f0:	cf 91       	pop	r28
    16f2:	df 91       	pop	r29
    16f4:	1f 91       	pop	r17
    16f6:	0f 91       	pop	r16
    16f8:	ff 90       	pop	r15
    16fa:	ef 90       	pop	r14
    16fc:	df 90       	pop	r13
    16fe:	cf 90       	pop	r12
    1700:	08 95       	ret

00001702 <aes_gctr>:
	/* Return Y_m */
}


static void aes_gctr(void *aes, const u8 *icb, const u8 *x, size_t xlen, u8 *y)
{
    1702:	2f 92       	push	r2
    1704:	3f 92       	push	r3
    1706:	4f 92       	push	r4
    1708:	5f 92       	push	r5
    170a:	6f 92       	push	r6
    170c:	7f 92       	push	r7
    170e:	8f 92       	push	r8
    1710:	9f 92       	push	r9
    1712:	af 92       	push	r10
    1714:	bf 92       	push	r11
    1716:	cf 92       	push	r12
    1718:	df 92       	push	r13
    171a:	ef 92       	push	r14
    171c:	ff 92       	push	r15
    171e:	0f 93       	push	r16
    1720:	1f 93       	push	r17
    1722:	df 93       	push	r29
    1724:	cf 93       	push	r28
    1726:	cd b7       	in	r28, 0x3d	; 61
    1728:	de b7       	in	r29, 0x3e	; 62
    172a:	a0 97       	sbiw	r28, 0x20	; 32
    172c:	0f b6       	in	r0, 0x3f	; 63
    172e:	f8 94       	cli
    1730:	de bf       	out	0x3e, r29	; 62
    1732:	0f be       	out	0x3f, r0	; 63
    1734:	cd bf       	out	0x3d, r28	; 61
    1736:	1c 01       	movw	r2, r24
    1738:	2a 01       	movw	r4, r20
    173a:	49 01       	movw	r8, r18
    173c:	38 01       	movw	r6, r16
	size_t i, n, last;
	u8 cb[AES_BLOCK_SIZE], tmp[AES_BLOCK_SIZE];
	const u8 *xpos = x;
	u8 *ypos = y;

	if (xlen == 0)
    173e:	21 15       	cp	r18, r1
    1740:	31 05       	cpc	r19, r1
    1742:	09 f4       	brne	.+2      	; 0x1746 <aes_gctr+0x44>
    1744:	d3 c0       	rjmp	.+422    	; 0x18ec <aes_gctr+0x1ea>
		return;

	n = xlen / 16;
    1746:	59 01       	movw	r10, r18
    1748:	e4 e0       	ldi	r30, 0x04	; 4
    174a:	b6 94       	lsr	r11
    174c:	a7 94       	ror	r10
    174e:	ea 95       	dec	r30
    1750:	e1 f7       	brne	.-8      	; 0x174a <aes_gctr+0x48>

	os_memcpy(cb, icb, AES_BLOCK_SIZE);
    1752:	de 01       	movw	r26, r28
    1754:	11 96       	adiw	r26, 0x01	; 1
    1756:	fb 01       	movw	r30, r22
    1758:	80 e1       	ldi	r24, 0x10	; 16
    175a:	01 90       	ld	r0, Z+
    175c:	0d 92       	st	X+, r0
    175e:	81 50       	subi	r24, 0x01	; 1
    1760:	e1 f7       	brne	.-8      	; 0x175a <aes_gctr+0x58>
    1762:	72 01       	movw	r14, r4
    1764:	83 01       	movw	r16, r6
    1766:	cc 24       	eor	r12, r12
    1768:	dd 24       	eor	r13, r13
    176a:	93 c0       	rjmp	.+294    	; 0x1892 <aes_gctr+0x190>
	/* Full blocks */
	for (i = 0; i < n; i++) {
		aes_encrypt(aes, cb, ypos);
    176c:	c1 01       	movw	r24, r2
    176e:	be 01       	movw	r22, r28
    1770:	6f 5f       	subi	r22, 0xFF	; 255
    1772:	7f 4f       	sbci	r23, 0xFF	; 255
    1774:	a8 01       	movw	r20, r16
    1776:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <aes_encrypt>

static void xor_block(u8 *dst, const u8 *src)
{
	u32 *d = (u32 *) dst;
	u32 *s = (u32 *) src;
	*d++ ^= *s++;
    177a:	f8 01       	movw	r30, r16
    177c:	80 81       	ld	r24, Z
    177e:	91 81       	ldd	r25, Z+1	; 0x01
    1780:	a2 81       	ldd	r26, Z+2	; 0x02
    1782:	b3 81       	ldd	r27, Z+3	; 0x03
    1784:	f7 01       	movw	r30, r14
    1786:	20 81       	ld	r18, Z
    1788:	31 81       	ldd	r19, Z+1	; 0x01
    178a:	42 81       	ldd	r20, Z+2	; 0x02
    178c:	53 81       	ldd	r21, Z+3	; 0x03
    178e:	82 27       	eor	r24, r18
    1790:	93 27       	eor	r25, r19
    1792:	a4 27       	eor	r26, r20
    1794:	b5 27       	eor	r27, r21
    1796:	f8 01       	movw	r30, r16
    1798:	80 83       	st	Z, r24
    179a:	91 83       	std	Z+1, r25	; 0x01
    179c:	a2 83       	std	Z+2, r26	; 0x02
    179e:	b3 83       	std	Z+3, r27	; 0x03
	*d++ ^= *s++;
    17a0:	84 81       	ldd	r24, Z+4	; 0x04
    17a2:	95 81       	ldd	r25, Z+5	; 0x05
    17a4:	a6 81       	ldd	r26, Z+6	; 0x06
    17a6:	b7 81       	ldd	r27, Z+7	; 0x07
    17a8:	f7 01       	movw	r30, r14
    17aa:	24 81       	ldd	r18, Z+4	; 0x04
    17ac:	35 81       	ldd	r19, Z+5	; 0x05
    17ae:	46 81       	ldd	r20, Z+6	; 0x06
    17b0:	57 81       	ldd	r21, Z+7	; 0x07
    17b2:	82 27       	eor	r24, r18
    17b4:	93 27       	eor	r25, r19
    17b6:	a4 27       	eor	r26, r20
    17b8:	b5 27       	eor	r27, r21
    17ba:	f8 01       	movw	r30, r16
    17bc:	84 83       	std	Z+4, r24	; 0x04
    17be:	95 83       	std	Z+5, r25	; 0x05
    17c0:	a6 83       	std	Z+6, r26	; 0x06
    17c2:	b7 83       	std	Z+7, r27	; 0x07
	*d++ ^= *s++;
    17c4:	80 85       	ldd	r24, Z+8	; 0x08
    17c6:	91 85       	ldd	r25, Z+9	; 0x09
    17c8:	a2 85       	ldd	r26, Z+10	; 0x0a
    17ca:	b3 85       	ldd	r27, Z+11	; 0x0b
    17cc:	f7 01       	movw	r30, r14
    17ce:	20 85       	ldd	r18, Z+8	; 0x08
    17d0:	31 85       	ldd	r19, Z+9	; 0x09
    17d2:	42 85       	ldd	r20, Z+10	; 0x0a
    17d4:	53 85       	ldd	r21, Z+11	; 0x0b
    17d6:	82 27       	eor	r24, r18
    17d8:	93 27       	eor	r25, r19
    17da:	a4 27       	eor	r26, r20
    17dc:	b5 27       	eor	r27, r21
    17de:	f8 01       	movw	r30, r16
    17e0:	80 87       	std	Z+8, r24	; 0x08
    17e2:	91 87       	std	Z+9, r25	; 0x09
    17e4:	a2 87       	std	Z+10, r26	; 0x0a
    17e6:	b3 87       	std	Z+11, r27	; 0x0b
	*d++ ^= *s++;
    17e8:	84 85       	ldd	r24, Z+12	; 0x0c
    17ea:	95 85       	ldd	r25, Z+13	; 0x0d
    17ec:	a6 85       	ldd	r26, Z+14	; 0x0e
    17ee:	b7 85       	ldd	r27, Z+15	; 0x0f
    17f0:	f7 01       	movw	r30, r14
    17f2:	24 85       	ldd	r18, Z+12	; 0x0c
    17f4:	35 85       	ldd	r19, Z+13	; 0x0d
    17f6:	46 85       	ldd	r20, Z+14	; 0x0e
    17f8:	57 85       	ldd	r21, Z+15	; 0x0f
    17fa:	82 27       	eor	r24, r18
    17fc:	93 27       	eor	r25, r19
    17fe:	a4 27       	eor	r26, r20
    1800:	b5 27       	eor	r27, r21
    1802:	f8 01       	movw	r30, r16
    1804:	84 87       	std	Z+12, r24	; 0x0c
    1806:	95 87       	std	Z+13, r25	; 0x0d
    1808:	a6 87       	std	Z+14, r26	; 0x0e
    180a:	b7 87       	std	Z+15, r27	; 0x0f
	os_memcpy(cb, icb, AES_BLOCK_SIZE);
	/* Full blocks */
	for (i = 0; i < n; i++) {
		aes_encrypt(aes, cb, ypos);
		xor_block(ypos, xpos);
		xpos += AES_BLOCK_SIZE;
    180c:	80 e1       	ldi	r24, 0x10	; 16
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	e8 0e       	add	r14, r24
    1812:	f9 1e       	adc	r15, r25
		ypos += AES_BLOCK_SIZE;
    1814:	00 5f       	subi	r16, 0xF0	; 240
    1816:	1f 4f       	sbci	r17, 0xFF	; 255

/* Macros for handling unaligned memory accesses */

static inline u32 WPA_GET_BE32(const u8 *a)
{
  return ((u32)a[0] << 24) | ((u32)a[1] << 16) | ((u32)a[2] << 8) | a[3];
    1818:	2d 85       	ldd	r18, Y+13	; 0x0d
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	40 e0       	ldi	r20, 0x00	; 0
    181e:	50 e0       	ldi	r21, 0x00	; 0
    1820:	52 2f       	mov	r21, r18
    1822:	44 27       	eor	r20, r20
    1824:	33 27       	eor	r19, r19
    1826:	22 27       	eor	r18, r18
    1828:	8e 85       	ldd	r24, Y+14	; 0x0e
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	a0 e0       	ldi	r26, 0x00	; 0
    182e:	b0 e0       	ldi	r27, 0x00	; 0
    1830:	dc 01       	movw	r26, r24
    1832:	99 27       	eor	r25, r25
    1834:	88 27       	eor	r24, r24
    1836:	28 2b       	or	r18, r24
    1838:	39 2b       	or	r19, r25
    183a:	4a 2b       	or	r20, r26
    183c:	5b 2b       	or	r21, r27
    183e:	88 89       	ldd	r24, Y+16	; 0x10
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	a0 e0       	ldi	r26, 0x00	; 0
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	28 2b       	or	r18, r24
    1848:	39 2b       	or	r19, r25
    184a:	4a 2b       	or	r20, r26
    184c:	5b 2b       	or	r21, r27
    184e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	a0 e0       	ldi	r26, 0x00	; 0
    1854:	b0 e0       	ldi	r27, 0x00	; 0
    1856:	ba 2f       	mov	r27, r26
    1858:	a9 2f       	mov	r26, r25
    185a:	98 2f       	mov	r25, r24
    185c:	88 27       	eor	r24, r24
    185e:	28 2b       	or	r18, r24
    1860:	39 2b       	or	r19, r25
    1862:	4a 2b       	or	r20, r26
    1864:	5b 2b       	or	r21, r27

static void inc32(u8 *block)
{
	u32 val;
	val = WPA_GET_BE32(block + AES_BLOCK_SIZE - 4);
	val++;
    1866:	2f 5f       	subi	r18, 0xFF	; 255
    1868:	3f 4f       	sbci	r19, 0xFF	; 255
    186a:	4f 4f       	sbci	r20, 0xFF	; 255
    186c:	5f 4f       	sbci	r21, 0xFF	; 255
}

static inline void WPA_PUT_BE32(u8 *a, u32 val)
{
  a[0] = (val >> 24) & 0xff;
    186e:	85 2f       	mov	r24, r21
    1870:	99 27       	eor	r25, r25
    1872:	aa 27       	eor	r26, r26
    1874:	bb 27       	eor	r27, r27
    1876:	8d 87       	std	Y+13, r24	; 0x0d
  a[1] = (val >> 16) & 0xff;
    1878:	ca 01       	movw	r24, r20
    187a:	aa 27       	eor	r26, r26
    187c:	bb 27       	eor	r27, r27
    187e:	8e 87       	std	Y+14, r24	; 0x0e
  a[2] = (val >> 8) & 0xff;
    1880:	bb 27       	eor	r27, r27
    1882:	a5 2f       	mov	r26, r21
    1884:	94 2f       	mov	r25, r20
    1886:	83 2f       	mov	r24, r19
    1888:	8f 87       	std	Y+15, r24	; 0x0f
  a[3] = val & 0xff;
    188a:	28 8b       	std	Y+16, r18	; 0x10

	n = xlen / 16;

	os_memcpy(cb, icb, AES_BLOCK_SIZE);
	/* Full blocks */
	for (i = 0; i < n; i++) {
    188c:	08 94       	sec
    188e:	c1 1c       	adc	r12, r1
    1890:	d1 1c       	adc	r13, r1
    1892:	ca 14       	cp	r12, r10
    1894:	db 04       	cpc	r13, r11
    1896:	08 f4       	brcc	.+2      	; 0x189a <aes_gctr+0x198>
    1898:	69 cf       	rjmp	.-302    	; 0x176c <aes_gctr+0x6a>
	/* Return Y_m */
}


static void aes_gctr(void *aes, const u8 *icb, const u8 *x, size_t xlen, u8 *y)
{
    189a:	c5 01       	movw	r24, r10
    189c:	34 e0       	ldi	r19, 0x04	; 4
    189e:	88 0f       	add	r24, r24
    18a0:	99 1f       	adc	r25, r25
    18a2:	3a 95       	dec	r19
    18a4:	e1 f7       	brne	.-8      	; 0x189e <aes_gctr+0x19c>
    18a6:	53 01       	movw	r10, r6
    18a8:	a8 0e       	add	r10, r24
    18aa:	b9 1e       	adc	r11, r25
		xpos += AES_BLOCK_SIZE;
		ypos += AES_BLOCK_SIZE;
		inc32(cb);
	}

	last = x + xlen - xpos;
    18ac:	62 01       	movw	r12, r4
    18ae:	c8 0e       	add	r12, r24
    18b0:	d9 1e       	adc	r13, r25
    18b2:	74 01       	movw	r14, r8
    18b4:	e8 1a       	sub	r14, r24
    18b6:	f9 0a       	sbc	r15, r25
	if (last) {
    18b8:	c9 f0       	breq	.+50     	; 0x18ec <aes_gctr+0x1ea>
		/* Last, partial block */
		aes_encrypt(aes, cb, tmp);
    18ba:	8e 01       	movw	r16, r28
    18bc:	0f 5e       	subi	r16, 0xEF	; 239
    18be:	1f 4f       	sbci	r17, 0xFF	; 255
    18c0:	c1 01       	movw	r24, r2
    18c2:	be 01       	movw	r22, r28
    18c4:	6f 5f       	subi	r22, 0xFF	; 255
    18c6:	7f 4f       	sbci	r23, 0xFF	; 255
    18c8:	a8 01       	movw	r20, r16
    18ca:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <aes_encrypt>
    18ce:	f8 01       	movw	r30, r16
		for (i = 0; i < last; i++)
    18d0:	98 01       	movw	r18, r16
    18d2:	2e 0d       	add	r18, r14
    18d4:	3f 1d       	adc	r19, r15
			*ypos++ = *xpos++ ^ tmp[i];
    18d6:	81 91       	ld	r24, Z+
    18d8:	d6 01       	movw	r26, r12
    18da:	9d 91       	ld	r25, X+
    18dc:	6d 01       	movw	r12, r26
    18de:	89 27       	eor	r24, r25
    18e0:	d5 01       	movw	r26, r10
    18e2:	8d 93       	st	X+, r24
    18e4:	5d 01       	movw	r10, r26

	last = x + xlen - xpos;
	if (last) {
		/* Last, partial block */
		aes_encrypt(aes, cb, tmp);
		for (i = 0; i < last; i++)
    18e6:	e2 17       	cp	r30, r18
    18e8:	f3 07       	cpc	r31, r19
    18ea:	a9 f7       	brne	.-22     	; 0x18d6 <aes_gctr+0x1d4>
			*ypos++ = *xpos++ ^ tmp[i];
	}
}
    18ec:	a0 96       	adiw	r28, 0x20	; 32
    18ee:	0f b6       	in	r0, 0x3f	; 63
    18f0:	f8 94       	cli
    18f2:	de bf       	out	0x3e, r29	; 62
    18f4:	0f be       	out	0x3f, r0	; 63
    18f6:	cd bf       	out	0x3d, r28	; 61
    18f8:	cf 91       	pop	r28
    18fa:	df 91       	pop	r29
    18fc:	1f 91       	pop	r17
    18fe:	0f 91       	pop	r16
    1900:	ff 90       	pop	r15
    1902:	ef 90       	pop	r14
    1904:	df 90       	pop	r13
    1906:	cf 90       	pop	r12
    1908:	bf 90       	pop	r11
    190a:	af 90       	pop	r10
    190c:	9f 90       	pop	r9
    190e:	8f 90       	pop	r8
    1910:	7f 90       	pop	r7
    1912:	6f 90       	pop	r6
    1914:	5f 90       	pop	r5
    1916:	4f 90       	pop	r4
    1918:	3f 90       	pop	r3
    191a:	2f 90       	pop	r2
    191c:	08 95       	ret

0000191e <aes_gcm_gctr>:
}


static void aes_gcm_gctr(void *aes, const u8 *J0, const u8 *in, size_t len,
			 u8 *out)
{
    191e:	af 92       	push	r10
    1920:	bf 92       	push	r11
    1922:	cf 92       	push	r12
    1924:	df 92       	push	r13
    1926:	ef 92       	push	r14
    1928:	ff 92       	push	r15
    192a:	0f 93       	push	r16
    192c:	1f 93       	push	r17
    192e:	df 93       	push	r29
    1930:	cf 93       	push	r28
    1932:	cd b7       	in	r28, 0x3d	; 61
    1934:	de b7       	in	r29, 0x3e	; 62
    1936:	60 97       	sbiw	r28, 0x10	; 16
    1938:	0f b6       	in	r0, 0x3f	; 63
    193a:	f8 94       	cli
    193c:	de bf       	out	0x3e, r29	; 62
    193e:	0f be       	out	0x3f, r0	; 63
    1940:	cd bf       	out	0x3d, r28	; 61
    1942:	6c 01       	movw	r12, r24
    1944:	5a 01       	movw	r10, r20
    1946:	79 01       	movw	r14, r18
	u8 J0inc[AES_BLOCK_SIZE];

	if (len == 0)
    1948:	21 15       	cp	r18, r1
    194a:	31 05       	cpc	r19, r1
    194c:	09 f4       	brne	.+2      	; 0x1950 <aes_gcm_gctr+0x32>
    194e:	4a c0       	rjmp	.+148    	; 0x19e4 <aes_gcm_gctr+0xc6>
		return;

	os_memcpy(J0inc, J0, AES_BLOCK_SIZE);
    1950:	de 01       	movw	r26, r28
    1952:	11 96       	adiw	r26, 0x01	; 1
    1954:	fb 01       	movw	r30, r22
    1956:	80 e1       	ldi	r24, 0x10	; 16
    1958:	01 90       	ld	r0, Z+
    195a:	0d 92       	st	X+, r0
    195c:	81 50       	subi	r24, 0x01	; 1
    195e:	e1 f7       	brne	.-8      	; 0x1958 <aes_gcm_gctr+0x3a>

/* Macros for handling unaligned memory accesses */

static inline u32 WPA_GET_BE32(const u8 *a)
{
  return ((u32)a[0] << 24) | ((u32)a[1] << 16) | ((u32)a[2] << 8) | a[3];
    1960:	2d 85       	ldd	r18, Y+13	; 0x0d
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	40 e0       	ldi	r20, 0x00	; 0
    1966:	50 e0       	ldi	r21, 0x00	; 0
    1968:	52 2f       	mov	r21, r18
    196a:	44 27       	eor	r20, r20
    196c:	33 27       	eor	r19, r19
    196e:	22 27       	eor	r18, r18
    1970:	8e 85       	ldd	r24, Y+14	; 0x0e
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	a0 e0       	ldi	r26, 0x00	; 0
    1976:	b0 e0       	ldi	r27, 0x00	; 0
    1978:	dc 01       	movw	r26, r24
    197a:	99 27       	eor	r25, r25
    197c:	88 27       	eor	r24, r24
    197e:	28 2b       	or	r18, r24
    1980:	39 2b       	or	r19, r25
    1982:	4a 2b       	or	r20, r26
    1984:	5b 2b       	or	r21, r27
    1986:	88 89       	ldd	r24, Y+16	; 0x10
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	a0 e0       	ldi	r26, 0x00	; 0
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	28 2b       	or	r18, r24
    1990:	39 2b       	or	r19, r25
    1992:	4a 2b       	or	r20, r26
    1994:	5b 2b       	or	r21, r27
    1996:	8f 85       	ldd	r24, Y+15	; 0x0f
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	a0 e0       	ldi	r26, 0x00	; 0
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	ba 2f       	mov	r27, r26
    19a0:	a9 2f       	mov	r26, r25
    19a2:	98 2f       	mov	r25, r24
    19a4:	88 27       	eor	r24, r24
    19a6:	28 2b       	or	r18, r24
    19a8:	39 2b       	or	r19, r25
    19aa:	4a 2b       	or	r20, r26
    19ac:	5b 2b       	or	r21, r27

static void inc32(u8 *block)
{
	u32 val;
	val = WPA_GET_BE32(block + AES_BLOCK_SIZE - 4);
	val++;
    19ae:	2f 5f       	subi	r18, 0xFF	; 255
    19b0:	3f 4f       	sbci	r19, 0xFF	; 255
    19b2:	4f 4f       	sbci	r20, 0xFF	; 255
    19b4:	5f 4f       	sbci	r21, 0xFF	; 255
}

static inline void WPA_PUT_BE32(u8 *a, u32 val)
{
  a[0] = (val >> 24) & 0xff;
    19b6:	85 2f       	mov	r24, r21
    19b8:	99 27       	eor	r25, r25
    19ba:	aa 27       	eor	r26, r26
    19bc:	bb 27       	eor	r27, r27
    19be:	8d 87       	std	Y+13, r24	; 0x0d
  a[1] = (val >> 16) & 0xff;
    19c0:	ca 01       	movw	r24, r20
    19c2:	aa 27       	eor	r26, r26
    19c4:	bb 27       	eor	r27, r27
    19c6:	8e 87       	std	Y+14, r24	; 0x0e
  a[2] = (val >> 8) & 0xff;
    19c8:	bb 27       	eor	r27, r27
    19ca:	a5 2f       	mov	r26, r21
    19cc:	94 2f       	mov	r25, r20
    19ce:	83 2f       	mov	r24, r19
    19d0:	8f 87       	std	Y+15, r24	; 0x0f
  a[3] = val & 0xff;
    19d2:	28 8b       	std	Y+16, r18	; 0x10
	if (len == 0)
		return;

	os_memcpy(J0inc, J0, AES_BLOCK_SIZE);
	inc32(J0inc);
	aes_gctr(aes, J0inc, in, len, out);
    19d4:	c6 01       	movw	r24, r12
    19d6:	be 01       	movw	r22, r28
    19d8:	6f 5f       	subi	r22, 0xFF	; 255
    19da:	7f 4f       	sbci	r23, 0xFF	; 255
    19dc:	a5 01       	movw	r20, r10
    19de:	97 01       	movw	r18, r14
    19e0:	0e 94 81 0b 	call	0x1702	; 0x1702 <aes_gctr>
}
    19e4:	60 96       	adiw	r28, 0x10	; 16
    19e6:	0f b6       	in	r0, 0x3f	; 63
    19e8:	f8 94       	cli
    19ea:	de bf       	out	0x3e, r29	; 62
    19ec:	0f be       	out	0x3f, r0	; 63
    19ee:	cd bf       	out	0x3d, r28	; 61
    19f0:	cf 91       	pop	r28
    19f2:	df 91       	pop	r29
    19f4:	1f 91       	pop	r17
    19f6:	0f 91       	pop	r16
    19f8:	ff 90       	pop	r15
    19fa:	ef 90       	pop	r14
    19fc:	df 90       	pop	r13
    19fe:	cf 90       	pop	r12
    1a00:	bf 90       	pop	r11
    1a02:	af 90       	pop	r10
    1a04:	08 95       	ret

00001a06 <aes_gcm_ad>:
int aes_gcm_ad(
		   void *aes, // DHD20150614
		   const u8 *key, size_t key_len, const u8 *iv, size_t iv_len,
	       const u8 *crypt, size_t crypt_len,
	       const u8 *aad, size_t aad_len, const u8 *tag, u8 *plain)
{
    1a06:	2f 92       	push	r2
    1a08:	3f 92       	push	r3
    1a0a:	4f 92       	push	r4
    1a0c:	5f 92       	push	r5
    1a0e:	6f 92       	push	r6
    1a10:	7f 92       	push	r7
    1a12:	8f 92       	push	r8
    1a14:	9f 92       	push	r9
    1a16:	af 92       	push	r10
    1a18:	bf 92       	push	r11
    1a1a:	cf 92       	push	r12
    1a1c:	df 92       	push	r13
    1a1e:	ef 92       	push	r14
    1a20:	ff 92       	push	r15
    1a22:	0f 93       	push	r16
    1a24:	1f 93       	push	r17
    1a26:	df 93       	push	r29
    1a28:	cf 93       	push	r28
    1a2a:	cd b7       	in	r28, 0x3d	; 61
    1a2c:	de b7       	in	r29, 0x3e	; 62
    1a2e:	c2 54       	subi	r28, 0x42	; 66
    1a30:	d0 40       	sbci	r29, 0x00	; 0
    1a32:	0f b6       	in	r0, 0x3f	; 63
    1a34:	f8 94       	cli
    1a36:	de bf       	out	0x3e, r29	; 62
    1a38:	0f be       	out	0x3f, r0	; 63
    1a3a:	cd bf       	out	0x3d, r28	; 61
    1a3c:	23 96       	adiw	r28, 0x03	; 3
    1a3e:	9f af       	std	Y+63, r25	; 0x3f
    1a40:	8e af       	std	Y+62, r24	; 0x3e
    1a42:	23 97       	sbiw	r28, 0x03	; 3
    1a44:	19 01       	movw	r2, r18
	u8 J0[AES_BLOCK_SIZE];
	u8 S[16], T[16];
//	void *aes;

//	aes =
	aes_gcm_init_hash_subkey(
    1a46:	3e 01       	movw	r6, r28
    1a48:	08 94       	sec
    1a4a:	61 1c       	adc	r6, r1
    1a4c:	71 1c       	adc	r7, r1
    1a4e:	93 01       	movw	r18, r6
    1a50:	0e 94 6e 08 	call	0x10dc	; 0x10dc <aes_gcm_init_hash_subkey>
			aes, // DHD20150614
			key, key_len, H);
//	if (aes == NULL)
//		return -1;

	aes_gcm_prepare_j0(iv, iv_len, H, J0);
    1a54:	b1 e1       	ldi	r27, 0x11	; 17
    1a56:	4b 2e       	mov	r4, r27
    1a58:	51 2c       	mov	r5, r1
    1a5a:	4c 0e       	add	r4, r28
    1a5c:	5d 1e       	adc	r5, r29
    1a5e:	c1 01       	movw	r24, r2
    1a60:	b8 01       	movw	r22, r16
    1a62:	a3 01       	movw	r20, r6
    1a64:	92 01       	movw	r18, r4
    1a66:	0e 94 1a 0b 	call	0x1634	; 0x1634 <aes_gcm_prepare_j0>

	/* P = GCTR_K(inc_32(J_0), C) */
	aes_gcm_gctr(aes, J0, crypt, crypt_len, plain);
    1a6a:	23 96       	adiw	r28, 0x03	; 3
    1a6c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a6e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a70:	23 97       	sbiw	r28, 0x03	; 3
    1a72:	b2 01       	movw	r22, r4
    1a74:	a7 01       	movw	r20, r14
    1a76:	96 01       	movw	r18, r12
    1a78:	6b 96       	adiw	r28, 0x1b	; 27
    1a7a:	0e ad       	ldd	r16, Y+62	; 0x3e
    1a7c:	1f ad       	ldd	r17, Y+63	; 0x3f
    1a7e:	6b 97       	sbiw	r28, 0x1b	; 27
    1a80:	0e 94 8f 0c 	call	0x191e	; 0x191e <aes_gcm_gctr>

	aes_gcm_ghash(H, aad, aad_len, crypt, crypt_len, S);
    1a84:	a1 e2       	ldi	r26, 0x21	; 33
    1a86:	2a 2e       	mov	r2, r26
    1a88:	31 2c       	mov	r3, r1
    1a8a:	2c 0e       	add	r2, r28
    1a8c:	3d 1e       	adc	r3, r29
    1a8e:	c3 01       	movw	r24, r6
    1a90:	b5 01       	movw	r22, r10
    1a92:	a4 01       	movw	r20, r8
    1a94:	97 01       	movw	r18, r14
    1a96:	86 01       	movw	r16, r12
    1a98:	71 01       	movw	r14, r2
    1a9a:	0e 94 a5 0a 	call	0x154a	; 0x154a <aes_gcm_ghash>

	/* T' = MSB_t(GCTR_K(J_0, S)) */
	aes_gctr(aes, J0, S, sizeof(S), T);
    1a9e:	f1 e3       	ldi	r31, 0x31	; 49
    1aa0:	ef 2e       	mov	r14, r31
    1aa2:	f1 2c       	mov	r15, r1
    1aa4:	ec 0e       	add	r14, r28
    1aa6:	fd 1e       	adc	r15, r29
    1aa8:	23 96       	adiw	r28, 0x03	; 3
    1aaa:	8e ad       	ldd	r24, Y+62	; 0x3e
    1aac:	9f ad       	ldd	r25, Y+63	; 0x3f
    1aae:	23 97       	sbiw	r28, 0x03	; 3
    1ab0:	b2 01       	movw	r22, r4
    1ab2:	a1 01       	movw	r20, r2
    1ab4:	20 e1       	ldi	r18, 0x10	; 16
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	87 01       	movw	r16, r14
    1aba:	0e 94 81 0b 	call	0x1702	; 0x1702 <aes_gctr>

	aes_encrypt_deinit(aes);
    1abe:	23 96       	adiw	r28, 0x03	; 3
    1ac0:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ac2:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ac4:	23 97       	sbiw	r28, 0x03	; 3
    1ac6:	0e 94 65 17 	call	0x2eca	; 0x2eca <aes_encrypt_deinit>

	if (os_memcmp_const(tag, T, 16) != 0) {
    1aca:	69 96       	adiw	r28, 0x19	; 25
    1acc:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ace:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ad0:	69 97       	sbiw	r28, 0x19	; 25
    1ad2:	b7 01       	movw	r22, r14
    1ad4:	40 e1       	ldi	r20, 0x10	; 16
    1ad6:	50 e0       	ldi	r21, 0x00	; 0
    1ad8:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <os_memcmp_const>
    1adc:	89 2b       	or	r24, r25
    1ade:	19 f4       	brne	.+6      	; 0x1ae6 <aes_gcm_ad+0xe0>
    1ae0:	20 e0       	ldi	r18, 0x00	; 0
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	02 c0       	rjmp	.+4      	; 0x1aea <aes_gcm_ad+0xe4>
    1ae6:	2f ef       	ldi	r18, 0xFF	; 255
    1ae8:	3f ef       	ldi	r19, 0xFF	; 255
		/* printf("GCM: Tag mismatch\n"); */
		return -1;
	}

	return 0;
}
    1aea:	c9 01       	movw	r24, r18
    1aec:	ce 5b       	subi	r28, 0xBE	; 190
    1aee:	df 4f       	sbci	r29, 0xFF	; 255
    1af0:	0f b6       	in	r0, 0x3f	; 63
    1af2:	f8 94       	cli
    1af4:	de bf       	out	0x3e, r29	; 62
    1af6:	0f be       	out	0x3f, r0	; 63
    1af8:	cd bf       	out	0x3d, r28	; 61
    1afa:	cf 91       	pop	r28
    1afc:	df 91       	pop	r29
    1afe:	1f 91       	pop	r17
    1b00:	0f 91       	pop	r16
    1b02:	ff 90       	pop	r15
    1b04:	ef 90       	pop	r14
    1b06:	df 90       	pop	r13
    1b08:	cf 90       	pop	r12
    1b0a:	bf 90       	pop	r11
    1b0c:	af 90       	pop	r10
    1b0e:	9f 90       	pop	r9
    1b10:	8f 90       	pop	r8
    1b12:	7f 90       	pop	r7
    1b14:	6f 90       	pop	r6
    1b16:	5f 90       	pop	r5
    1b18:	4f 90       	pop	r4
    1b1a:	3f 90       	pop	r3
    1b1c:	2f 90       	pop	r2
    1b1e:	08 95       	ret

00001b20 <aes_gcm_ae>:
int aes_gcm_ae(
           void *aes, // DHD20150614
           const u8 *key, size_t key_len, const u8 *iv, size_t iv_len,
	       const u8 *plain, size_t plain_len,
	       const u8 *aad, size_t aad_len, u8 *crypt, u8 *tag)
{
    1b20:	2f 92       	push	r2
    1b22:	3f 92       	push	r3
    1b24:	4f 92       	push	r4
    1b26:	5f 92       	push	r5
    1b28:	6f 92       	push	r6
    1b2a:	7f 92       	push	r7
    1b2c:	8f 92       	push	r8
    1b2e:	9f 92       	push	r9
    1b30:	af 92       	push	r10
    1b32:	bf 92       	push	r11
    1b34:	cf 92       	push	r12
    1b36:	df 92       	push	r13
    1b38:	ef 92       	push	r14
    1b3a:	ff 92       	push	r15
    1b3c:	0f 93       	push	r16
    1b3e:	1f 93       	push	r17
    1b40:	df 93       	push	r29
    1b42:	cf 93       	push	r28
    1b44:	cd b7       	in	r28, 0x3d	; 61
    1b46:	de b7       	in	r29, 0x3e	; 62
    1b48:	e2 97       	sbiw	r28, 0x32	; 50
    1b4a:	0f b6       	in	r0, 0x3f	; 63
    1b4c:	f8 94       	cli
    1b4e:	de bf       	out	0x3e, r29	; 62
    1b50:	0f be       	out	0x3f, r0	; 63
    1b52:	cd bf       	out	0x3d, r28	; 61
    1b54:	9a ab       	std	Y+50, r25	; 0x32
    1b56:	89 ab       	std	Y+49, r24	; 0x31
    1b58:	19 01       	movw	r2, r18
	u8 J0[AES_BLOCK_SIZE];
	u8 S[16];
//	void *aes;

//	aes =
	aes_gcm_init_hash_subkey(
    1b5a:	3e 01       	movw	r6, r28
    1b5c:	08 94       	sec
    1b5e:	61 1c       	adc	r6, r1
    1b60:	71 1c       	adc	r7, r1
    1b62:	93 01       	movw	r18, r6
    1b64:	0e 94 6e 08 	call	0x10dc	; 0x10dc <aes_gcm_init_hash_subkey>
			aes, // DHD20150614
			key, key_len, H);
//	if (aes == NULL)
//		return -1;

	aes_gcm_prepare_j0(iv, iv_len, H, J0);
    1b68:	81 e1       	ldi	r24, 0x11	; 17
    1b6a:	48 2e       	mov	r4, r24
    1b6c:	51 2c       	mov	r5, r1
    1b6e:	4c 0e       	add	r4, r28
    1b70:	5d 1e       	adc	r5, r29
    1b72:	c1 01       	movw	r24, r2
    1b74:	b8 01       	movw	r22, r16
    1b76:	a3 01       	movw	r20, r6
    1b78:	92 01       	movw	r18, r4
    1b7a:	0e 94 1a 0b 	call	0x1634	; 0x1634 <aes_gcm_prepare_j0>

	/* C = GCTR_K(inc_32(J_0), P) */
	aes_gcm_gctr(aes, J0, plain, plain_len, crypt);
    1b7e:	89 a9       	ldd	r24, Y+49	; 0x31
    1b80:	9a a9       	ldd	r25, Y+50	; 0x32
    1b82:	b2 01       	movw	r22, r4
    1b84:	a7 01       	movw	r20, r14
    1b86:	96 01       	movw	r18, r12
    1b88:	29 96       	adiw	r28, 0x09	; 9
    1b8a:	0e ad       	ldd	r16, Y+62	; 0x3e
    1b8c:	1f ad       	ldd	r17, Y+63	; 0x3f
    1b8e:	29 97       	sbiw	r28, 0x09	; 9
    1b90:	0e 94 8f 0c 	call	0x191e	; 0x191e <aes_gcm_gctr>

	aes_gcm_ghash(H, aad, aad_len, crypt, plain_len, S);
    1b94:	11 e2       	ldi	r17, 0x21	; 33
    1b96:	21 2e       	mov	r2, r17
    1b98:	31 2c       	mov	r3, r1
    1b9a:	2c 0e       	add	r2, r28
    1b9c:	3d 1e       	adc	r3, r29
    1b9e:	c3 01       	movw	r24, r6
    1ba0:	b5 01       	movw	r22, r10
    1ba2:	a4 01       	movw	r20, r8
    1ba4:	29 96       	adiw	r28, 0x09	; 9
    1ba6:	2e ad       	ldd	r18, Y+62	; 0x3e
    1ba8:	3f ad       	ldd	r19, Y+63	; 0x3f
    1baa:	29 97       	sbiw	r28, 0x09	; 9
    1bac:	86 01       	movw	r16, r12
    1bae:	71 01       	movw	r14, r2
    1bb0:	0e 94 a5 0a 	call	0x154a	; 0x154a <aes_gcm_ghash>

	/* T = MSB_t(GCTR_K(J_0, S)) */
	aes_gctr(aes, J0, S, sizeof(S), tag);
    1bb4:	89 a9       	ldd	r24, Y+49	; 0x31
    1bb6:	9a a9       	ldd	r25, Y+50	; 0x32
    1bb8:	b2 01       	movw	r22, r4
    1bba:	a1 01       	movw	r20, r2
    1bbc:	20 e1       	ldi	r18, 0x10	; 16
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	2b 96       	adiw	r28, 0x0b	; 11
    1bc2:	0e ad       	ldd	r16, Y+62	; 0x3e
    1bc4:	1f ad       	ldd	r17, Y+63	; 0x3f
    1bc6:	2b 97       	sbiw	r28, 0x0b	; 11
    1bc8:	0e 94 81 0b 	call	0x1702	; 0x1702 <aes_gctr>

	/* Return (C, T) */

	aes_encrypt_deinit(aes);
    1bcc:	89 a9       	ldd	r24, Y+49	; 0x31
    1bce:	9a a9       	ldd	r25, Y+50	; 0x32
    1bd0:	0e 94 65 17 	call	0x2eca	; 0x2eca <aes_encrypt_deinit>

	return 0;
}
    1bd4:	80 e0       	ldi	r24, 0x00	; 0
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	e2 96       	adiw	r28, 0x32	; 50
    1bda:	0f b6       	in	r0, 0x3f	; 63
    1bdc:	f8 94       	cli
    1bde:	de bf       	out	0x3e, r29	; 62
    1be0:	0f be       	out	0x3f, r0	; 63
    1be2:	cd bf       	out	0x3d, r28	; 61
    1be4:	cf 91       	pop	r28
    1be6:	df 91       	pop	r29
    1be8:	1f 91       	pop	r17
    1bea:	0f 91       	pop	r16
    1bec:	ff 90       	pop	r15
    1bee:	ef 90       	pop	r14
    1bf0:	df 90       	pop	r13
    1bf2:	cf 90       	pop	r12
    1bf4:	bf 90       	pop	r11
    1bf6:	af 90       	pop	r10
    1bf8:	9f 90       	pop	r9
    1bfa:	8f 90       	pop	r8
    1bfc:	7f 90       	pop	r7
    1bfe:	6f 90       	pop	r6
    1c00:	5f 90       	pop	r5
    1c02:	4f 90       	pop	r4
    1c04:	3f 90       	pop	r3
    1c06:	2f 90       	pop	r2
    1c08:	08 95       	ret

00001c0a <rijndaelKeySetupEnc>:
 * Expand the cipher key into the encryption key schedule.
 *
 * @return	the number of rounds for the given cipher key size.
 */
int rijndaelKeySetupEnc(u32 rk[], const u8 cipherKey[], int keyBits)
{
    1c0a:	2f 92       	push	r2
    1c0c:	3f 92       	push	r3
    1c0e:	4f 92       	push	r4
    1c10:	5f 92       	push	r5
    1c12:	6f 92       	push	r6
    1c14:	7f 92       	push	r7
    1c16:	8f 92       	push	r8
    1c18:	9f 92       	push	r9
    1c1a:	af 92       	push	r10
    1c1c:	bf 92       	push	r11
    1c1e:	cf 92       	push	r12
    1c20:	df 92       	push	r13
    1c22:	ef 92       	push	r14
    1c24:	ff 92       	push	r15
    1c26:	0f 93       	push	r16
    1c28:	1f 93       	push	r17
    1c2a:	df 93       	push	r29
    1c2c:	cf 93       	push	r28
    1c2e:	00 d0       	rcall	.+0      	; 0x1c30 <rijndaelKeySetupEnc+0x26>
    1c30:	00 d0       	rcall	.+0      	; 0x1c32 <rijndaelKeySetupEnc+0x28>
    1c32:	00 d0       	rcall	.+0      	; 0x1c34 <rijndaelKeySetupEnc+0x2a>
    1c34:	cd b7       	in	r28, 0x3d	; 61
    1c36:	de b7       	in	r29, 0x3e	; 62
    1c38:	7c 01       	movw	r14, r24
    1c3a:	fb 01       	movw	r30, r22
	int i;
	u32 temp;

	rk[0] = GETU32(cipherKey     );
    1c3c:	03 81       	ldd	r16, Z+3	; 0x03
    1c3e:	10 e0       	ldi	r17, 0x00	; 0
    1c40:	20 e0       	ldi	r18, 0x00	; 0
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	80 81       	ld	r24, Z
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	a0 e0       	ldi	r26, 0x00	; 0
    1c4a:	b0 e0       	ldi	r27, 0x00	; 0
    1c4c:	b8 2f       	mov	r27, r24
    1c4e:	aa 27       	eor	r26, r26
    1c50:	99 27       	eor	r25, r25
    1c52:	88 27       	eor	r24, r24
    1c54:	08 27       	eor	r16, r24
    1c56:	19 27       	eor	r17, r25
    1c58:	2a 27       	eor	r18, r26
    1c5a:	3b 27       	eor	r19, r27
    1c5c:	81 81       	ldd	r24, Z+1	; 0x01
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	a0 e0       	ldi	r26, 0x00	; 0
    1c62:	b0 e0       	ldi	r27, 0x00	; 0
    1c64:	dc 01       	movw	r26, r24
    1c66:	99 27       	eor	r25, r25
    1c68:	88 27       	eor	r24, r24
    1c6a:	08 27       	eor	r16, r24
    1c6c:	19 27       	eor	r17, r25
    1c6e:	2a 27       	eor	r18, r26
    1c70:	3b 27       	eor	r19, r27
    1c72:	82 81       	ldd	r24, Z+2	; 0x02
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	a0 e0       	ldi	r26, 0x00	; 0
    1c78:	b0 e0       	ldi	r27, 0x00	; 0
    1c7a:	ba 2f       	mov	r27, r26
    1c7c:	a9 2f       	mov	r26, r25
    1c7e:	98 2f       	mov	r25, r24
    1c80:	88 27       	eor	r24, r24
    1c82:	08 27       	eor	r16, r24
    1c84:	19 27       	eor	r17, r25
    1c86:	2a 27       	eor	r18, r26
    1c88:	3b 27       	eor	r19, r27
    1c8a:	d7 01       	movw	r26, r14
    1c8c:	0d 93       	st	X+, r16
    1c8e:	1d 93       	st	X+, r17
    1c90:	2d 93       	st	X+, r18
    1c92:	3c 93       	st	X, r19
    1c94:	13 97       	sbiw	r26, 0x03	; 3
	rk[1] = GETU32(cipherKey +  4);
    1c96:	04 81       	ldd	r16, Z+4	; 0x04
    1c98:	10 e0       	ldi	r17, 0x00	; 0
    1c9a:	20 e0       	ldi	r18, 0x00	; 0
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	30 2f       	mov	r19, r16
    1ca0:	22 27       	eor	r18, r18
    1ca2:	11 27       	eor	r17, r17
    1ca4:	00 27       	eor	r16, r16
    1ca6:	85 81       	ldd	r24, Z+5	; 0x05
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	a0 e0       	ldi	r26, 0x00	; 0
    1cac:	b0 e0       	ldi	r27, 0x00	; 0
    1cae:	dc 01       	movw	r26, r24
    1cb0:	99 27       	eor	r25, r25
    1cb2:	88 27       	eor	r24, r24
    1cb4:	08 27       	eor	r16, r24
    1cb6:	19 27       	eor	r17, r25
    1cb8:	2a 27       	eor	r18, r26
    1cba:	3b 27       	eor	r19, r27
    1cbc:	87 81       	ldd	r24, Z+7	; 0x07
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	a0 e0       	ldi	r26, 0x00	; 0
    1cc2:	b0 e0       	ldi	r27, 0x00	; 0
    1cc4:	08 27       	eor	r16, r24
    1cc6:	19 27       	eor	r17, r25
    1cc8:	2a 27       	eor	r18, r26
    1cca:	3b 27       	eor	r19, r27
    1ccc:	86 81       	ldd	r24, Z+6	; 0x06
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	a0 e0       	ldi	r26, 0x00	; 0
    1cd2:	b0 e0       	ldi	r27, 0x00	; 0
    1cd4:	ba 2f       	mov	r27, r26
    1cd6:	a9 2f       	mov	r26, r25
    1cd8:	98 2f       	mov	r25, r24
    1cda:	88 27       	eor	r24, r24
    1cdc:	08 27       	eor	r16, r24
    1cde:	19 27       	eor	r17, r25
    1ce0:	2a 27       	eor	r18, r26
    1ce2:	3b 27       	eor	r19, r27
    1ce4:	d7 01       	movw	r26, r14
    1ce6:	14 96       	adiw	r26, 0x04	; 4
    1ce8:	0d 93       	st	X+, r16
    1cea:	1d 93       	st	X+, r17
    1cec:	2d 93       	st	X+, r18
    1cee:	3c 93       	st	X, r19
    1cf0:	17 97       	sbiw	r26, 0x07	; 7
	rk[2] = GETU32(cipherKey +  8);
    1cf2:	00 85       	ldd	r16, Z+8	; 0x08
    1cf4:	10 e0       	ldi	r17, 0x00	; 0
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	30 2f       	mov	r19, r16
    1cfc:	22 27       	eor	r18, r18
    1cfe:	11 27       	eor	r17, r17
    1d00:	00 27       	eor	r16, r16
    1d02:	81 85       	ldd	r24, Z+9	; 0x09
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	a0 e0       	ldi	r26, 0x00	; 0
    1d08:	b0 e0       	ldi	r27, 0x00	; 0
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	99 27       	eor	r25, r25
    1d0e:	88 27       	eor	r24, r24
    1d10:	08 27       	eor	r16, r24
    1d12:	19 27       	eor	r17, r25
    1d14:	2a 27       	eor	r18, r26
    1d16:	3b 27       	eor	r19, r27
    1d18:	83 85       	ldd	r24, Z+11	; 0x0b
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	a0 e0       	ldi	r26, 0x00	; 0
    1d1e:	b0 e0       	ldi	r27, 0x00	; 0
    1d20:	08 27       	eor	r16, r24
    1d22:	19 27       	eor	r17, r25
    1d24:	2a 27       	eor	r18, r26
    1d26:	3b 27       	eor	r19, r27
    1d28:	82 85       	ldd	r24, Z+10	; 0x0a
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	a0 e0       	ldi	r26, 0x00	; 0
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	ba 2f       	mov	r27, r26
    1d32:	a9 2f       	mov	r26, r25
    1d34:	98 2f       	mov	r25, r24
    1d36:	88 27       	eor	r24, r24
    1d38:	08 27       	eor	r16, r24
    1d3a:	19 27       	eor	r17, r25
    1d3c:	2a 27       	eor	r18, r26
    1d3e:	3b 27       	eor	r19, r27
    1d40:	d7 01       	movw	r26, r14
    1d42:	18 96       	adiw	r26, 0x08	; 8
    1d44:	0d 93       	st	X+, r16
    1d46:	1d 93       	st	X+, r17
    1d48:	2d 93       	st	X+, r18
    1d4a:	3c 93       	st	X, r19
    1d4c:	1b 97       	sbiw	r26, 0x0b	; 11
	rk[3] = GETU32(cipherKey + 12);
    1d4e:	04 85       	ldd	r16, Z+12	; 0x0c
    1d50:	10 e0       	ldi	r17, 0x00	; 0
    1d52:	20 e0       	ldi	r18, 0x00	; 0
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	30 2f       	mov	r19, r16
    1d58:	22 27       	eor	r18, r18
    1d5a:	11 27       	eor	r17, r17
    1d5c:	00 27       	eor	r16, r16
    1d5e:	85 85       	ldd	r24, Z+13	; 0x0d
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	a0 e0       	ldi	r26, 0x00	; 0
    1d64:	b0 e0       	ldi	r27, 0x00	; 0
    1d66:	dc 01       	movw	r26, r24
    1d68:	99 27       	eor	r25, r25
    1d6a:	88 27       	eor	r24, r24
    1d6c:	08 27       	eor	r16, r24
    1d6e:	19 27       	eor	r17, r25
    1d70:	2a 27       	eor	r18, r26
    1d72:	3b 27       	eor	r19, r27
    1d74:	87 85       	ldd	r24, Z+15	; 0x0f
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	a0 e0       	ldi	r26, 0x00	; 0
    1d7a:	b0 e0       	ldi	r27, 0x00	; 0
    1d7c:	08 27       	eor	r16, r24
    1d7e:	19 27       	eor	r17, r25
    1d80:	2a 27       	eor	r18, r26
    1d82:	3b 27       	eor	r19, r27
    1d84:	86 85       	ldd	r24, Z+14	; 0x0e
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	a0 e0       	ldi	r26, 0x00	; 0
    1d8a:	b0 e0       	ldi	r27, 0x00	; 0
    1d8c:	ba 2f       	mov	r27, r26
    1d8e:	a9 2f       	mov	r26, r25
    1d90:	98 2f       	mov	r25, r24
    1d92:	88 27       	eor	r24, r24
    1d94:	08 27       	eor	r16, r24
    1d96:	19 27       	eor	r17, r25
    1d98:	2a 27       	eor	r18, r26
    1d9a:	3b 27       	eor	r19, r27
    1d9c:	f7 01       	movw	r30, r14
    1d9e:	04 87       	std	Z+12, r16	; 0x0c
    1da0:	15 87       	std	Z+13, r17	; 0x0d
    1da2:	26 87       	std	Z+14, r18	; 0x0e
    1da4:	37 87       	std	Z+15, r19	; 0x0f

	if (keyBits == 128) {
    1da6:	40 38       	cpi	r20, 0x80	; 128
    1da8:	51 05       	cpc	r21, r1
    1daa:	19 f0       	breq	.+6      	; 0x1db2 <rijndaelKeySetupEnc+0x1a8>
    1dac:	2f ef       	ldi	r18, 0xFF	; 255
    1dae:	3f ef       	ldi	r19, 0xFF	; 255
    1db0:	bf c0       	rjmp	.+382    	; 0x1f30 <rijndaelKeySetupEnc+0x326>
    1db2:	fe 82       	std	Y+6, r15	; 0x06
    1db4:	ed 82       	std	Y+5, r14	; 0x05
    1db6:	64 ec       	ldi	r22, 0xC4	; 196
    1db8:	79 e0       	ldi	r23, 0x09	; 9
		for (i = 0; i < 10; i++) {
			temp  = rk[3];
    1dba:	ad 81       	ldd	r26, Y+5	; 0x05
    1dbc:	be 81       	ldd	r27, Y+6	; 0x06
    1dbe:	1c 96       	adiw	r26, 0x0c	; 12
    1dc0:	2d 90       	ld	r2, X+
    1dc2:	3d 90       	ld	r3, X+
    1dc4:	4d 90       	ld	r4, X+
    1dc6:	5c 90       	ld	r5, X
    1dc8:	1f 97       	sbiw	r26, 0x0f	; 15
			rk[4] = rk[0] ^ TE421(temp) ^ TE432(temp) ^
    1dca:	c2 01       	movw	r24, r4
    1dcc:	aa 27       	eor	r26, r26
    1dce:	bb 27       	eor	r27, r27
    1dd0:	fc 01       	movw	r30, r24
    1dd2:	f0 70       	andi	r31, 0x00	; 0
    1dd4:	ee 0f       	add	r30, r30
    1dd6:	ff 1f       	adc	r31, r31
    1dd8:	ee 0f       	add	r30, r30
    1dda:	ff 1f       	adc	r31, r31
    1ddc:	ec 53       	subi	r30, 0x3C	; 60
    1dde:	ff 4f       	sbci	r31, 0xFF	; 255
    1de0:	65 90       	lpm	r6, Z+
    1de2:	75 90       	lpm	r7, Z+
    1de4:	85 90       	lpm	r8, Z+
    1de6:	94 90       	lpm	r9, Z+
    1de8:	bb 27       	eor	r27, r27
    1dea:	a5 2d       	mov	r26, r5
    1dec:	94 2d       	mov	r25, r4
    1dee:	83 2d       	mov	r24, r3
    1df0:	fc 01       	movw	r30, r24
    1df2:	f0 70       	andi	r31, 0x00	; 0
    1df4:	ee 0f       	add	r30, r30
    1df6:	ff 1f       	adc	r31, r31
    1df8:	ee 0f       	add	r30, r30
    1dfa:	ff 1f       	adc	r31, r31
    1dfc:	ec 53       	subi	r30, 0x3C	; 60
    1dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1e00:	e5 90       	lpm	r14, Z+
    1e02:	f5 90       	lpm	r15, Z+
    1e04:	05 91       	lpm	r16, Z+
    1e06:	14 91       	lpm	r17, Z+
				TE443(temp) ^ TE414(temp) ^ RCON(i);
    1e08:	f1 01       	movw	r30, r2
    1e0a:	f0 70       	andi	r31, 0x00	; 0
    1e0c:	ee 0f       	add	r30, r30
    1e0e:	ff 1f       	adc	r31, r31
    1e10:	ee 0f       	add	r30, r30
    1e12:	ff 1f       	adc	r31, r31
    1e14:	ec 53       	subi	r30, 0x3C	; 60
    1e16:	ff 4f       	sbci	r31, 0xFF	; 255
    1e18:	a5 90       	lpm	r10, Z+
    1e1a:	b5 90       	lpm	r11, Z+
    1e1c:	c5 90       	lpm	r12, Z+
    1e1e:	d4 90       	lpm	r13, Z+
    1e20:	85 2d       	mov	r24, r5
    1e22:	99 27       	eor	r25, r25
    1e24:	aa 27       	eor	r26, r26
    1e26:	bb 27       	eor	r27, r27
    1e28:	9c 01       	movw	r18, r24
    1e2a:	22 0f       	add	r18, r18
    1e2c:	33 1f       	adc	r19, r19
    1e2e:	22 0f       	add	r18, r18
    1e30:	33 1f       	adc	r19, r19
    1e32:	2c 53       	subi	r18, 0x3C	; 60
    1e34:	3f 4f       	sbci	r19, 0xFF	; 255
    1e36:	f9 01       	movw	r30, r18
    1e38:	85 91       	lpm	r24, Z+
    1e3a:	95 91       	lpm	r25, Z+
    1e3c:	a5 91       	lpm	r26, Z+
    1e3e:	b4 91       	lpm	r27, Z+
    1e40:	89 83       	std	Y+1, r24	; 0x01
    1e42:	9a 83       	std	Y+2, r25	; 0x02
    1e44:	ab 83       	std	Y+3, r26	; 0x03
    1e46:	bc 83       	std	Y+4, r27	; 0x04
    1e48:	fb 01       	movw	r30, r22
    1e4a:	25 91       	lpm	r18, Z+
    1e4c:	35 91       	lpm	r19, Z+
    1e4e:	45 91       	lpm	r20, Z+
    1e50:	54 91       	lpm	r21, Z+
	rk[3] = GETU32(cipherKey + 12);

	if (keyBits == 128) {
		for (i = 0; i < 10; i++) {
			temp  = rk[3];
			rk[4] = rk[0] ^ TE421(temp) ^ TE432(temp) ^
    1e52:	80 e0       	ldi	r24, 0x00	; 0
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	af ef       	ldi	r26, 0xFF	; 255
    1e58:	b0 e0       	ldi	r27, 0x00	; 0
    1e5a:	e8 22       	and	r14, r24
    1e5c:	f9 22       	and	r15, r25
    1e5e:	0a 23       	and	r16, r26
    1e60:	1b 23       	and	r17, r27
    1e62:	80 e0       	ldi	r24, 0x00	; 0
    1e64:	9f ef       	ldi	r25, 0xFF	; 255
    1e66:	a0 e0       	ldi	r26, 0x00	; 0
    1e68:	b0 e0       	ldi	r27, 0x00	; 0
    1e6a:	a8 22       	and	r10, r24
    1e6c:	b9 22       	and	r11, r25
    1e6e:	ca 22       	and	r12, r26
    1e70:	db 22       	and	r13, r27
    1e72:	ea 24       	eor	r14, r10
    1e74:	fb 24       	eor	r15, r11
    1e76:	0c 25       	eor	r16, r12
    1e78:	1d 25       	eor	r17, r13
    1e7a:	ed 81       	ldd	r30, Y+5	; 0x05
    1e7c:	fe 81       	ldd	r31, Y+6	; 0x06
    1e7e:	80 81       	ld	r24, Z
    1e80:	91 81       	ldd	r25, Z+1	; 0x01
    1e82:	a2 81       	ldd	r26, Z+2	; 0x02
    1e84:	b3 81       	ldd	r27, Z+3	; 0x03
    1e86:	e8 26       	eor	r14, r24
    1e88:	f9 26       	eor	r15, r25
    1e8a:	0a 27       	eor	r16, r26
    1e8c:	1b 27       	eor	r17, r27
    1e8e:	52 2f       	mov	r21, r18
    1e90:	44 27       	eor	r20, r20
    1e92:	33 27       	eor	r19, r19
    1e94:	22 27       	eor	r18, r18
    1e96:	e2 26       	eor	r14, r18
    1e98:	f3 26       	eor	r15, r19
    1e9a:	04 27       	eor	r16, r20
    1e9c:	15 27       	eor	r17, r21
    1e9e:	98 2c       	mov	r9, r8
    1ea0:	87 2c       	mov	r8, r7
    1ea2:	76 2c       	mov	r7, r6
    1ea4:	66 24       	eor	r6, r6
    1ea6:	80 e0       	ldi	r24, 0x00	; 0
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	a0 e0       	ldi	r26, 0x00	; 0
    1eac:	bf ef       	ldi	r27, 0xFF	; 255
    1eae:	68 22       	and	r6, r24
    1eb0:	79 22       	and	r7, r25
    1eb2:	8a 22       	and	r8, r26
    1eb4:	9b 22       	and	r9, r27
    1eb6:	e6 24       	eor	r14, r6
    1eb8:	f7 24       	eor	r15, r7
    1eba:	08 25       	eor	r16, r8
    1ebc:	19 25       	eor	r17, r9
    1ebe:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec0:	29 2f       	mov	r18, r25
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	40 e0       	ldi	r20, 0x00	; 0
    1ec6:	50 e0       	ldi	r21, 0x00	; 0
    1ec8:	e2 26       	eor	r14, r18
    1eca:	f3 26       	eor	r15, r19
    1ecc:	04 27       	eor	r16, r20
    1ece:	15 27       	eor	r17, r21
    1ed0:	e0 8a       	std	Z+16, r14	; 0x10
    1ed2:	f1 8a       	std	Z+17, r15	; 0x11
    1ed4:	02 8b       	std	Z+18, r16	; 0x12
    1ed6:	13 8b       	std	Z+19, r17	; 0x13
				TE443(temp) ^ TE414(temp) ^ RCON(i);
			rk[5] = rk[1] ^ rk[4];
    1ed8:	24 81       	ldd	r18, Z+4	; 0x04
    1eda:	35 81       	ldd	r19, Z+5	; 0x05
    1edc:	46 81       	ldd	r20, Z+6	; 0x06
    1ede:	57 81       	ldd	r21, Z+7	; 0x07
    1ee0:	2e 25       	eor	r18, r14
    1ee2:	3f 25       	eor	r19, r15
    1ee4:	40 27       	eor	r20, r16
    1ee6:	51 27       	eor	r21, r17
    1ee8:	24 8b       	std	Z+20, r18	; 0x14
    1eea:	35 8b       	std	Z+21, r19	; 0x15
    1eec:	46 8b       	std	Z+22, r20	; 0x16
    1eee:	57 8b       	std	Z+23, r21	; 0x17
			rk[6] = rk[2] ^ rk[5];
    1ef0:	80 85       	ldd	r24, Z+8	; 0x08
    1ef2:	91 85       	ldd	r25, Z+9	; 0x09
    1ef4:	a2 85       	ldd	r26, Z+10	; 0x0a
    1ef6:	b3 85       	ldd	r27, Z+11	; 0x0b
    1ef8:	82 27       	eor	r24, r18
    1efa:	93 27       	eor	r25, r19
    1efc:	a4 27       	eor	r26, r20
    1efe:	b5 27       	eor	r27, r21
    1f00:	80 8f       	std	Z+24, r24	; 0x18
    1f02:	91 8f       	std	Z+25, r25	; 0x19
    1f04:	a2 8f       	std	Z+26, r26	; 0x1a
    1f06:	b3 8f       	std	Z+27, r27	; 0x1b
			rk[7] = rk[3] ^ rk[6];
    1f08:	82 25       	eor	r24, r2
    1f0a:	93 25       	eor	r25, r3
    1f0c:	a4 25       	eor	r26, r4
    1f0e:	b5 25       	eor	r27, r5
    1f10:	84 8f       	std	Z+28, r24	; 0x1c
    1f12:	95 8f       	std	Z+29, r25	; 0x1d
    1f14:	a6 8f       	std	Z+30, r26	; 0x1e
    1f16:	b7 8f       	std	Z+31, r27	; 0x1f
    1f18:	70 96       	adiw	r30, 0x10	; 16
    1f1a:	fe 83       	std	Y+6, r31	; 0x06
    1f1c:	ed 83       	std	Y+5, r30	; 0x05
    1f1e:	6f 5f       	subi	r22, 0xFF	; 255
    1f20:	7f 4f       	sbci	r23, 0xFF	; 255
	rk[1] = GETU32(cipherKey +  4);
	rk[2] = GETU32(cipherKey +  8);
	rk[3] = GETU32(cipherKey + 12);

	if (keyBits == 128) {
		for (i = 0; i < 10; i++) {
    1f22:	f9 e0       	ldi	r31, 0x09	; 9
    1f24:	6e 3c       	cpi	r22, 0xCE	; 206
    1f26:	7f 07       	cpc	r23, r31
    1f28:	09 f0       	breq	.+2      	; 0x1f2c <rijndaelKeySetupEnc+0x322>
    1f2a:	47 cf       	rjmp	.-370    	; 0x1dba <rijndaelKeySetupEnc+0x1b0>
    1f2c:	2a e0       	ldi	r18, 0x0A	; 10
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
	}

#endif // DHD20150614

	return -1;
}
    1f30:	c9 01       	movw	r24, r18
    1f32:	26 96       	adiw	r28, 0x06	; 6
    1f34:	0f b6       	in	r0, 0x3f	; 63
    1f36:	f8 94       	cli
    1f38:	de bf       	out	0x3e, r29	; 62
    1f3a:	0f be       	out	0x3f, r0	; 63
    1f3c:	cd bf       	out	0x3d, r28	; 61
    1f3e:	cf 91       	pop	r28
    1f40:	df 91       	pop	r29
    1f42:	1f 91       	pop	r17
    1f44:	0f 91       	pop	r16
    1f46:	ff 90       	pop	r15
    1f48:	ef 90       	pop	r14
    1f4a:	df 90       	pop	r13
    1f4c:	cf 90       	pop	r12
    1f4e:	bf 90       	pop	r11
    1f50:	af 90       	pop	r10
    1f52:	9f 90       	pop	r9
    1f54:	8f 90       	pop	r8
    1f56:	7f 90       	pop	r7
    1f58:	6f 90       	pop	r6
    1f5a:	5f 90       	pop	r5
    1f5c:	4f 90       	pop	r4
    1f5e:	3f 90       	pop	r3
    1f60:	2f 90       	pop	r2
    1f62:	08 95       	ret

00001f64 <aes_encrypt_init>:
}


void aes_encrypt_init(void *aes, // DHD20150614
		const u8 *key, size_t len)
{
    1f64:	0f 93       	push	r16
    1f66:	1f 93       	push	r17
    u32 *rk = (u32*) aes; // DHD20150614
    1f68:	8c 01       	movw	r16, r24
    int res;
//    rk = os_malloc(AES_PRIV_SIZE); // DHD20150614
//    if (rk == NULL) // DHD20150614
//        return NULL; // DHD20150614
    res = rijndaelKeySetupEnc(rk, key, len * 8);
    1f6a:	e3 e0       	ldi	r30, 0x03	; 3
    1f6c:	44 0f       	add	r20, r20
    1f6e:	55 1f       	adc	r21, r21
    1f70:	ea 95       	dec	r30
    1f72:	e1 f7       	brne	.-8      	; 0x1f6c <aes_encrypt_init+0x8>
    1f74:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <rijndaelKeySetupEnc>
//    if (res < 0) { // DHD20150614
//        os_free(rk); // DHD20150614
//        return NULL; // DHD20150614: FIXME: may be throwing away some sanity-checking here.
//    } // DHD20150614
    rk[AES_PRIV_NR_POS] = res;
    1f78:	00 51       	subi	r16, 0x10	; 16
    1f7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f7c:	aa 27       	eor	r26, r26
    1f7e:	97 fd       	sbrc	r25, 7
    1f80:	a0 95       	com	r26
    1f82:	ba 2f       	mov	r27, r26
    1f84:	f8 01       	movw	r30, r16
    1f86:	80 83       	st	Z, r24
    1f88:	91 83       	std	Z+1, r25	; 0x01
    1f8a:	a2 83       	std	Z+2, r26	; 0x02
    1f8c:	b3 83       	std	Z+3, r27	; 0x03
//    return rk; // DHD20150614
}
    1f8e:	1f 91       	pop	r17
    1f90:	0f 91       	pop	r16
    1f92:	08 95       	ret

00001f94 <aes_encrypt>:


void aes_encrypt(void *ctx, const u8 *plain, u8 *crypt)
{
    1f94:	2f 92       	push	r2
    1f96:	3f 92       	push	r3
    1f98:	4f 92       	push	r4
    1f9a:	5f 92       	push	r5
    1f9c:	6f 92       	push	r6
    1f9e:	7f 92       	push	r7
    1fa0:	8f 92       	push	r8
    1fa2:	9f 92       	push	r9
    1fa4:	af 92       	push	r10
    1fa6:	bf 92       	push	r11
    1fa8:	cf 92       	push	r12
    1faa:	df 92       	push	r13
    1fac:	ef 92       	push	r14
    1fae:	ff 92       	push	r15
    1fb0:	0f 93       	push	r16
    1fb2:	1f 93       	push	r17
    1fb4:	df 93       	push	r29
    1fb6:	cf 93       	push	r28
    1fb8:	cd b7       	in	r28, 0x3d	; 61
    1fba:	de b7       	in	r29, 0x3e	; 62
    1fbc:	ce 54       	subi	r28, 0x4E	; 78
    1fbe:	d0 40       	sbci	r29, 0x00	; 0
    1fc0:	0f b6       	in	r0, 0x3f	; 63
    1fc2:	f8 94       	cli
    1fc4:	de bf       	out	0x3e, r29	; 62
    1fc6:	0f be       	out	0x3f, r0	; 63
    1fc8:	cd bf       	out	0x3d, r28	; 61
    1fca:	9e 8f       	std	Y+30, r25	; 0x1e
    1fcc:	8d 8f       	std	Y+29, r24	; 0x1d
    1fce:	2b 96       	adiw	r28, 0x0b	; 11
    1fd0:	5f af       	std	Y+63, r21	; 0x3f
    1fd2:	4e af       	std	Y+62, r20	; 0x3e
    1fd4:	2b 97       	sbiw	r28, 0x0b	; 11

    /*
     * map byte array block to cipher state
     * and add initial round key:
     */
    s0 = GETU32(pt     ) ^ rk[0];
    1fd6:	db 01       	movw	r26, r22
    1fd8:	8c 91       	ld	r24, X
    1fda:	a8 2e       	mov	r10, r24
    1fdc:	bb 24       	eor	r11, r11
    1fde:	cc 24       	eor	r12, r12
    1fe0:	dd 24       	eor	r13, r13
    1fe2:	5a 2c       	mov	r5, r10
    1fe4:	44 24       	eor	r4, r4
    1fe6:	33 24       	eor	r3, r3
    1fe8:	22 24       	eor	r2, r2
    1fea:	13 96       	adiw	r26, 0x03	; 3
    1fec:	8c 91       	ld	r24, X
    1fee:	a8 2e       	mov	r10, r24
    1ff0:	bb 24       	eor	r11, r11
    1ff2:	cc 24       	eor	r12, r12
    1ff4:	dd 24       	eor	r13, r13
    1ff6:	2a 24       	eor	r2, r10
    1ff8:	3b 24       	eor	r3, r11
    1ffa:	4c 24       	eor	r4, r12
    1ffc:	5d 24       	eor	r5, r13
    1ffe:	ad 8d       	ldd	r26, Y+29	; 0x1d
    2000:	be 8d       	ldd	r27, Y+30	; 0x1e
    2002:	2d 91       	ld	r18, X+
    2004:	3d 91       	ld	r19, X+
    2006:	4d 91       	ld	r20, X+
    2008:	5c 91       	ld	r21, X
    200a:	22 26       	eor	r2, r18
    200c:	33 26       	eor	r3, r19
    200e:	44 26       	eor	r4, r20
    2010:	55 26       	eor	r5, r21
    2012:	fb 01       	movw	r30, r22
    2014:	81 81       	ldd	r24, Z+1	; 0x01
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	a0 e0       	ldi	r26, 0x00	; 0
    201a:	b0 e0       	ldi	r27, 0x00	; 0
    201c:	dc 01       	movw	r26, r24
    201e:	99 27       	eor	r25, r25
    2020:	88 27       	eor	r24, r24
    2022:	28 26       	eor	r2, r24
    2024:	39 26       	eor	r3, r25
    2026:	4a 26       	eor	r4, r26
    2028:	5b 26       	eor	r5, r27
    202a:	82 81       	ldd	r24, Z+2	; 0x02
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	a0 e0       	ldi	r26, 0x00	; 0
    2030:	b0 e0       	ldi	r27, 0x00	; 0
    2032:	ba 2f       	mov	r27, r26
    2034:	a9 2f       	mov	r26, r25
    2036:	98 2f       	mov	r25, r24
    2038:	88 27       	eor	r24, r24
    203a:	28 26       	eor	r2, r24
    203c:	39 26       	eor	r3, r25
    203e:	4a 26       	eor	r4, r26
    2040:	5b 26       	eor	r5, r27
    2042:	2d 82       	std	Y+5, r2	; 0x05
    2044:	3e 82       	std	Y+6, r3	; 0x06
    2046:	4f 82       	std	Y+7, r4	; 0x07
    2048:	58 86       	std	Y+8, r5	; 0x08
    s1 = GETU32(pt +  4) ^ rk[1];
    204a:	87 81       	ldd	r24, Z+7	; 0x07
    204c:	28 2e       	mov	r2, r24
    204e:	33 24       	eor	r3, r3
    2050:	44 24       	eor	r4, r4
    2052:	55 24       	eor	r5, r5
    2054:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2056:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2058:	84 81       	ldd	r24, Z+4	; 0x04
    205a:	95 81       	ldd	r25, Z+5	; 0x05
    205c:	a6 81       	ldd	r26, Z+6	; 0x06
    205e:	b7 81       	ldd	r27, Z+7	; 0x07
    2060:	28 26       	eor	r2, r24
    2062:	39 26       	eor	r3, r25
    2064:	4a 26       	eor	r4, r26
    2066:	5b 26       	eor	r5, r27
    2068:	db 01       	movw	r26, r22
    206a:	14 96       	adiw	r26, 0x04	; 4
    206c:	8c 91       	ld	r24, X
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	a0 e0       	ldi	r26, 0x00	; 0
    2072:	b0 e0       	ldi	r27, 0x00	; 0
    2074:	b8 2f       	mov	r27, r24
    2076:	aa 27       	eor	r26, r26
    2078:	99 27       	eor	r25, r25
    207a:	88 27       	eor	r24, r24
    207c:	28 26       	eor	r2, r24
    207e:	39 26       	eor	r3, r25
    2080:	4a 26       	eor	r4, r26
    2082:	5b 26       	eor	r5, r27
    2084:	fb 01       	movw	r30, r22
    2086:	85 81       	ldd	r24, Z+5	; 0x05
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	a0 e0       	ldi	r26, 0x00	; 0
    208c:	b0 e0       	ldi	r27, 0x00	; 0
    208e:	dc 01       	movw	r26, r24
    2090:	99 27       	eor	r25, r25
    2092:	88 27       	eor	r24, r24
    2094:	28 26       	eor	r2, r24
    2096:	39 26       	eor	r3, r25
    2098:	4a 26       	eor	r4, r26
    209a:	5b 26       	eor	r5, r27
    209c:	86 81       	ldd	r24, Z+6	; 0x06
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	a0 e0       	ldi	r26, 0x00	; 0
    20a2:	b0 e0       	ldi	r27, 0x00	; 0
    20a4:	ba 2f       	mov	r27, r26
    20a6:	a9 2f       	mov	r26, r25
    20a8:	98 2f       	mov	r25, r24
    20aa:	88 27       	eor	r24, r24
    20ac:	28 26       	eor	r2, r24
    20ae:	39 26       	eor	r3, r25
    20b0:	4a 26       	eor	r4, r26
    20b2:	5b 26       	eor	r5, r27
    20b4:	29 86       	std	Y+9, r2	; 0x09
    20b6:	3a 86       	std	Y+10, r3	; 0x0a
    20b8:	4b 86       	std	Y+11, r4	; 0x0b
    20ba:	5c 86       	std	Y+12, r5	; 0x0c
    s2 = GETU32(pt +  8) ^ rk[2];
    20bc:	83 85       	ldd	r24, Z+11	; 0x0b
    20be:	28 2e       	mov	r2, r24
    20c0:	33 24       	eor	r3, r3
    20c2:	44 24       	eor	r4, r4
    20c4:	55 24       	eor	r5, r5
    20c6:	ed 8d       	ldd	r30, Y+29	; 0x1d
    20c8:	fe 8d       	ldd	r31, Y+30	; 0x1e
    20ca:	80 85       	ldd	r24, Z+8	; 0x08
    20cc:	91 85       	ldd	r25, Z+9	; 0x09
    20ce:	a2 85       	ldd	r26, Z+10	; 0x0a
    20d0:	b3 85       	ldd	r27, Z+11	; 0x0b
    20d2:	28 26       	eor	r2, r24
    20d4:	39 26       	eor	r3, r25
    20d6:	4a 26       	eor	r4, r26
    20d8:	5b 26       	eor	r5, r27
    20da:	db 01       	movw	r26, r22
    20dc:	18 96       	adiw	r26, 0x08	; 8
    20de:	8c 91       	ld	r24, X
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	a0 e0       	ldi	r26, 0x00	; 0
    20e4:	b0 e0       	ldi	r27, 0x00	; 0
    20e6:	b8 2f       	mov	r27, r24
    20e8:	aa 27       	eor	r26, r26
    20ea:	99 27       	eor	r25, r25
    20ec:	88 27       	eor	r24, r24
    20ee:	28 26       	eor	r2, r24
    20f0:	39 26       	eor	r3, r25
    20f2:	4a 26       	eor	r4, r26
    20f4:	5b 26       	eor	r5, r27
    20f6:	fb 01       	movw	r30, r22
    20f8:	81 85       	ldd	r24, Z+9	; 0x09
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	a0 e0       	ldi	r26, 0x00	; 0
    20fe:	b0 e0       	ldi	r27, 0x00	; 0
    2100:	dc 01       	movw	r26, r24
    2102:	99 27       	eor	r25, r25
    2104:	88 27       	eor	r24, r24
    2106:	28 26       	eor	r2, r24
    2108:	39 26       	eor	r3, r25
    210a:	4a 26       	eor	r4, r26
    210c:	5b 26       	eor	r5, r27
    210e:	82 85       	ldd	r24, Z+10	; 0x0a
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	a0 e0       	ldi	r26, 0x00	; 0
    2114:	b0 e0       	ldi	r27, 0x00	; 0
    2116:	ba 2f       	mov	r27, r26
    2118:	a9 2f       	mov	r26, r25
    211a:	98 2f       	mov	r25, r24
    211c:	88 27       	eor	r24, r24
    211e:	28 26       	eor	r2, r24
    2120:	39 26       	eor	r3, r25
    2122:	4a 26       	eor	r4, r26
    2124:	5b 26       	eor	r5, r27
    2126:	2d 86       	std	Y+13, r2	; 0x0d
    2128:	3e 86       	std	Y+14, r3	; 0x0e
    212a:	4f 86       	std	Y+15, r4	; 0x0f
    212c:	58 8a       	std	Y+16, r5	; 0x10
    s3 = GETU32(pt + 12) ^ rk[3];
    212e:	87 85       	ldd	r24, Z+15	; 0x0f
    2130:	68 2e       	mov	r6, r24
    2132:	77 24       	eor	r7, r7
    2134:	88 24       	eor	r8, r8
    2136:	99 24       	eor	r9, r9
    2138:	ed 8d       	ldd	r30, Y+29	; 0x1d
    213a:	fe 8d       	ldd	r31, Y+30	; 0x1e
    213c:	84 85       	ldd	r24, Z+12	; 0x0c
    213e:	95 85       	ldd	r25, Z+13	; 0x0d
    2140:	a6 85       	ldd	r26, Z+14	; 0x0e
    2142:	b7 85       	ldd	r27, Z+15	; 0x0f
    2144:	68 26       	eor	r6, r24
    2146:	79 26       	eor	r7, r25
    2148:	8a 26       	eor	r8, r26
    214a:	9b 26       	eor	r9, r27
    214c:	db 01       	movw	r26, r22
    214e:	1c 96       	adiw	r26, 0x0c	; 12
    2150:	8c 91       	ld	r24, X
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	a0 e0       	ldi	r26, 0x00	; 0
    2156:	b0 e0       	ldi	r27, 0x00	; 0
    2158:	b8 2f       	mov	r27, r24
    215a:	aa 27       	eor	r26, r26
    215c:	99 27       	eor	r25, r25
    215e:	88 27       	eor	r24, r24
    2160:	68 26       	eor	r6, r24
    2162:	79 26       	eor	r7, r25
    2164:	8a 26       	eor	r8, r26
    2166:	9b 26       	eor	r9, r27
    2168:	fb 01       	movw	r30, r22
    216a:	85 85       	ldd	r24, Z+13	; 0x0d
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	a0 e0       	ldi	r26, 0x00	; 0
    2170:	b0 e0       	ldi	r27, 0x00	; 0
    2172:	dc 01       	movw	r26, r24
    2174:	99 27       	eor	r25, r25
    2176:	88 27       	eor	r24, r24
    2178:	68 26       	eor	r6, r24
    217a:	79 26       	eor	r7, r25
    217c:	8a 26       	eor	r8, r26
    217e:	9b 26       	eor	r9, r27
    2180:	86 85       	ldd	r24, Z+14	; 0x0e
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	a0 e0       	ldi	r26, 0x00	; 0
    2186:	b0 e0       	ldi	r27, 0x00	; 0
    2188:	ba 2f       	mov	r27, r26
    218a:	a9 2f       	mov	r26, r25
    218c:	98 2f       	mov	r25, r24
    218e:	88 27       	eor	r24, r24
    2190:	68 26       	eor	r6, r24
    2192:	79 26       	eor	r7, r25
    2194:	8a 26       	eor	r8, r26
    2196:	9b 26       	eor	r9, r27
    rk += Nr << 2;

#else  /* !FULL_UNROLL */

    /* Nr - 1 full rounds: */
    r = Nr >> 1;
    2198:	0d 8d       	ldd	r16, Y+29	; 0x1d
    219a:	1e 8d       	ldd	r17, Y+30	; 0x1e
    219c:	00 51       	subi	r16, 0x10	; 16
    219e:	1f 4f       	sbci	r17, 0xFF	; 255
    21a0:	d8 01       	movw	r26, r16
    21a2:	8d 91       	ld	r24, X+
    21a4:	9c 91       	ld	r25, X
    21a6:	11 97       	sbiw	r26, 0x01	; 1
    21a8:	a0 5f       	subi	r26, 0xF0	; 240
    21aa:	b0 40       	sbci	r27, 0x00	; 0
    21ac:	be 8f       	std	Y+30, r27	; 0x1e
    21ae:	ad 8f       	std	Y+29, r26	; 0x1d
    21b0:	95 95       	asr	r25
    21b2:	87 95       	ror	r24
    21b4:	1c 01       	movw	r2, r24
    21b6:	44 24       	eor	r4, r4
    21b8:	37 fc       	sbrc	r3, 7
    21ba:	40 94       	com	r4
    21bc:	54 2c       	mov	r5, r4
    21be:	29 8e       	std	Y+25, r2	; 0x19
    21c0:	3a 8e       	std	Y+26, r3	; 0x1a
    21c2:	4b 8e       	std	Y+27, r4	; 0x1b
    21c4:	5c 8e       	std	Y+28, r5	; 0x1c
    21c6:	29 82       	std	Y+1, r2	; 0x01
    21c8:	3a 82       	std	Y+2, r3	; 0x02
    21ca:	4b 82       	std	Y+3, r4	; 0x03
    21cc:	5c 82       	std	Y+4, r5	; 0x04
    21ce:	bd 01       	movw	r22, r26
    for (;;) {
        ROUND(1,t,s);
    21d0:	ad 80       	ldd	r10, Y+5	; 0x05
    21d2:	be 80       	ldd	r11, Y+6	; 0x06
    21d4:	cf 80       	ldd	r12, Y+7	; 0x07
    21d6:	d8 84       	ldd	r13, Y+8	; 0x08
    21d8:	8d 2d       	mov	r24, r13
    21da:	99 27       	eor	r25, r25
    21dc:	aa 27       	eor	r26, r26
    21de:	bb 27       	eor	r27, r27
    21e0:	9c 01       	movw	r18, r24
    21e2:	22 0f       	add	r18, r18
    21e4:	33 1f       	adc	r19, r19
    21e6:	22 0f       	add	r18, r18
    21e8:	33 1f       	adc	r19, r19
    21ea:	2c 53       	subi	r18, 0x3C	; 60
    21ec:	3f 4f       	sbci	r19, 0xFF	; 255
    21ee:	f9 01       	movw	r30, r18
    21f0:	c5 90       	lpm	r12, Z+
    21f2:	d5 90       	lpm	r13, Z+
    21f4:	e5 90       	lpm	r14, Z+
    21f6:	f4 90       	lpm	r15, Z+
    21f8:	c9 8a       	std	Y+17, r12	; 0x11
    21fa:	da 8a       	std	Y+18, r13	; 0x12
    21fc:	eb 8a       	std	Y+19, r14	; 0x13
    21fe:	fc 8a       	std	Y+20, r15	; 0x14
    2200:	29 84       	ldd	r2, Y+9	; 0x09
    2202:	3a 84       	ldd	r3, Y+10	; 0x0a
    2204:	4b 84       	ldd	r4, Y+11	; 0x0b
    2206:	5c 84       	ldd	r5, Y+12	; 0x0c
    2208:	c2 01       	movw	r24, r4
    220a:	aa 27       	eor	r26, r26
    220c:	bb 27       	eor	r27, r27
    220e:	fc 01       	movw	r30, r24
    2210:	f0 70       	andi	r31, 0x00	; 0
    2212:	ee 0f       	add	r30, r30
    2214:	ff 1f       	adc	r31, r31
    2216:	ee 0f       	add	r30, r30
    2218:	ff 1f       	adc	r31, r31
    221a:	ec 53       	subi	r30, 0x3C	; 60
    221c:	ff 4f       	sbci	r31, 0xFF	; 255
    221e:	a5 90       	lpm	r10, Z+
    2220:	b5 90       	lpm	r11, Z+
    2222:	c5 90       	lpm	r12, Z+
    2224:	d4 90       	lpm	r13, Z+
    2226:	ed 84       	ldd	r14, Y+13	; 0x0d
    2228:	fe 84       	ldd	r15, Y+14	; 0x0e
    222a:	0f 85       	ldd	r16, Y+15	; 0x0f
    222c:	18 89       	ldd	r17, Y+16	; 0x10
    222e:	bb 27       	eor	r27, r27
    2230:	a1 2f       	mov	r26, r17
    2232:	90 2f       	mov	r25, r16
    2234:	8f 2d       	mov	r24, r15
    2236:	fc 01       	movw	r30, r24
    2238:	f0 70       	andi	r31, 0x00	; 0
    223a:	ee 0f       	add	r30, r30
    223c:	ff 1f       	adc	r31, r31
    223e:	ee 0f       	add	r30, r30
    2240:	ff 1f       	adc	r31, r31
    2242:	ec 53       	subi	r30, 0x3C	; 60
    2244:	ff 4f       	sbci	r31, 0xFF	; 255
    2246:	25 91       	lpm	r18, Z+
    2248:	35 91       	lpm	r19, Z+
    224a:	45 91       	lpm	r20, Z+
    224c:	54 91       	lpm	r21, Z+
    224e:	f3 01       	movw	r30, r6
    2250:	f0 70       	andi	r31, 0x00	; 0
    2252:	ee 0f       	add	r30, r30
    2254:	ff 1f       	adc	r31, r31
    2256:	ee 0f       	add	r30, r30
    2258:	ff 1f       	adc	r31, r31
    225a:	ec 53       	subi	r30, 0x3C	; 60
    225c:	ff 4f       	sbci	r31, 0xFF	; 255
    225e:	e5 90       	lpm	r14, Z+
    2260:	f5 90       	lpm	r15, Z+
    2262:	05 91       	lpm	r16, Z+
    2264:	14 91       	lpm	r17, Z+
    2266:	fb 01       	movw	r30, r22
    2268:	80 89       	ldd	r24, Z+16	; 0x10
    226a:	91 89       	ldd	r25, Z+17	; 0x11
    226c:	a2 89       	ldd	r26, Z+18	; 0x12
    226e:	b3 89       	ldd	r27, Z+19	; 0x13
    2270:	29 88       	ldd	r2, Y+17	; 0x11
    2272:	3a 88       	ldd	r3, Y+18	; 0x12
    2274:	4b 88       	ldd	r4, Y+19	; 0x13
    2276:	5c 88       	ldd	r5, Y+20	; 0x14
    2278:	28 26       	eor	r2, r24
    227a:	39 26       	eor	r3, r25
    227c:	4a 26       	eor	r4, r26
    227e:	5b 26       	eor	r5, r27
    2280:	bb 27       	eor	r27, r27
    2282:	ad 2d       	mov	r26, r13
    2284:	9c 2d       	mov	r25, r12
    2286:	8b 2d       	mov	r24, r11
    2288:	da 2c       	mov	r13, r10
    228a:	cc 24       	eor	r12, r12
    228c:	bb 24       	eor	r11, r11
    228e:	aa 24       	eor	r10, r10
    2290:	8a 29       	or	r24, r10
    2292:	9b 29       	or	r25, r11
    2294:	ac 29       	or	r26, r12
    2296:	bd 29       	or	r27, r13
    2298:	28 26       	eor	r2, r24
    229a:	39 26       	eor	r3, r25
    229c:	4a 26       	eor	r4, r26
    229e:	5b 26       	eor	r5, r27
    22a0:	ca 01       	movw	r24, r20
    22a2:	aa 27       	eor	r26, r26
    22a4:	bb 27       	eor	r27, r27
    22a6:	a9 01       	movw	r20, r18
    22a8:	33 27       	eor	r19, r19
    22aa:	22 27       	eor	r18, r18
    22ac:	82 2b       	or	r24, r18
    22ae:	93 2b       	or	r25, r19
    22b0:	a4 2b       	or	r26, r20
    22b2:	b5 2b       	or	r27, r21
    22b4:	28 26       	eor	r2, r24
    22b6:	39 26       	eor	r3, r25
    22b8:	4a 26       	eor	r4, r26
    22ba:	5b 26       	eor	r5, r27
    22bc:	81 2f       	mov	r24, r17
    22be:	99 27       	eor	r25, r25
    22c0:	aa 27       	eor	r26, r26
    22c2:	bb 27       	eor	r27, r27
    22c4:	10 2f       	mov	r17, r16
    22c6:	0f 2d       	mov	r16, r15
    22c8:	fe 2c       	mov	r15, r14
    22ca:	ee 24       	eor	r14, r14
    22cc:	8e 29       	or	r24, r14
    22ce:	9f 29       	or	r25, r15
    22d0:	a0 2b       	or	r26, r16
    22d2:	b1 2b       	or	r27, r17
    22d4:	28 26       	eor	r2, r24
    22d6:	39 26       	eor	r3, r25
    22d8:	4a 26       	eor	r4, r26
    22da:	5b 26       	eor	r5, r27
    22dc:	29 8a       	std	Y+17, r2	; 0x11
    22de:	3a 8a       	std	Y+18, r3	; 0x12
    22e0:	4b 8a       	std	Y+19, r4	; 0x13
    22e2:	5c 8a       	std	Y+20, r5	; 0x14
    22e4:	a9 84       	ldd	r10, Y+9	; 0x09
    22e6:	ba 84       	ldd	r11, Y+10	; 0x0a
    22e8:	cb 84       	ldd	r12, Y+11	; 0x0b
    22ea:	dc 84       	ldd	r13, Y+12	; 0x0c
    22ec:	8d 2d       	mov	r24, r13
    22ee:	99 27       	eor	r25, r25
    22f0:	aa 27       	eor	r26, r26
    22f2:	bb 27       	eor	r27, r27
    22f4:	9c 01       	movw	r18, r24
    22f6:	22 0f       	add	r18, r18
    22f8:	33 1f       	adc	r19, r19
    22fa:	22 0f       	add	r18, r18
    22fc:	33 1f       	adc	r19, r19
    22fe:	2c 53       	subi	r18, 0x3C	; 60
    2300:	3f 4f       	sbci	r19, 0xFF	; 255
    2302:	f9 01       	movw	r30, r18
    2304:	c5 90       	lpm	r12, Z+
    2306:	d5 90       	lpm	r13, Z+
    2308:	e5 90       	lpm	r14, Z+
    230a:	f4 90       	lpm	r15, Z+
    230c:	cd 8a       	std	Y+21, r12	; 0x15
    230e:	de 8a       	std	Y+22, r13	; 0x16
    2310:	ef 8a       	std	Y+23, r14	; 0x17
    2312:	f8 8e       	std	Y+24, r15	; 0x18
    2314:	2d 84       	ldd	r2, Y+13	; 0x0d
    2316:	3e 84       	ldd	r3, Y+14	; 0x0e
    2318:	4f 84       	ldd	r4, Y+15	; 0x0f
    231a:	58 88       	ldd	r5, Y+16	; 0x10
    231c:	c2 01       	movw	r24, r4
    231e:	aa 27       	eor	r26, r26
    2320:	bb 27       	eor	r27, r27
    2322:	fc 01       	movw	r30, r24
    2324:	f0 70       	andi	r31, 0x00	; 0
    2326:	ee 0f       	add	r30, r30
    2328:	ff 1f       	adc	r31, r31
    232a:	ee 0f       	add	r30, r30
    232c:	ff 1f       	adc	r31, r31
    232e:	ec 53       	subi	r30, 0x3C	; 60
    2330:	ff 4f       	sbci	r31, 0xFF	; 255
    2332:	a5 90       	lpm	r10, Z+
    2334:	b5 90       	lpm	r11, Z+
    2336:	c5 90       	lpm	r12, Z+
    2338:	d4 90       	lpm	r13, Z+
    233a:	bb 27       	eor	r27, r27
    233c:	a9 2d       	mov	r26, r9
    233e:	98 2d       	mov	r25, r8
    2340:	87 2d       	mov	r24, r7
    2342:	fc 01       	movw	r30, r24
    2344:	f0 70       	andi	r31, 0x00	; 0
    2346:	ee 0f       	add	r30, r30
    2348:	ff 1f       	adc	r31, r31
    234a:	ee 0f       	add	r30, r30
    234c:	ff 1f       	adc	r31, r31
    234e:	ec 53       	subi	r30, 0x3C	; 60
    2350:	ff 4f       	sbci	r31, 0xFF	; 255
    2352:	25 91       	lpm	r18, Z+
    2354:	35 91       	lpm	r19, Z+
    2356:	45 91       	lpm	r20, Z+
    2358:	54 91       	lpm	r21, Z+
    235a:	8d 81       	ldd	r24, Y+5	; 0x05
    235c:	9e 81       	ldd	r25, Y+6	; 0x06
    235e:	90 70       	andi	r25, 0x00	; 0
    2360:	88 0f       	add	r24, r24
    2362:	99 1f       	adc	r25, r25
    2364:	88 0f       	add	r24, r24
    2366:	99 1f       	adc	r25, r25
    2368:	8c 53       	subi	r24, 0x3C	; 60
    236a:	9f 4f       	sbci	r25, 0xFF	; 255
    236c:	fc 01       	movw	r30, r24
    236e:	e5 90       	lpm	r14, Z+
    2370:	f5 90       	lpm	r15, Z+
    2372:	05 91       	lpm	r16, Z+
    2374:	14 91       	lpm	r17, Z+
    2376:	fb 01       	movw	r30, r22
    2378:	84 89       	ldd	r24, Z+20	; 0x14
    237a:	95 89       	ldd	r25, Z+21	; 0x15
    237c:	a6 89       	ldd	r26, Z+22	; 0x16
    237e:	b7 89       	ldd	r27, Z+23	; 0x17
    2380:	2d 88       	ldd	r2, Y+21	; 0x15
    2382:	3e 88       	ldd	r3, Y+22	; 0x16
    2384:	4f 88       	ldd	r4, Y+23	; 0x17
    2386:	58 8c       	ldd	r5, Y+24	; 0x18
    2388:	28 26       	eor	r2, r24
    238a:	39 26       	eor	r3, r25
    238c:	4a 26       	eor	r4, r26
    238e:	5b 26       	eor	r5, r27
    2390:	bb 27       	eor	r27, r27
    2392:	ad 2d       	mov	r26, r13
    2394:	9c 2d       	mov	r25, r12
    2396:	8b 2d       	mov	r24, r11
    2398:	da 2c       	mov	r13, r10
    239a:	cc 24       	eor	r12, r12
    239c:	bb 24       	eor	r11, r11
    239e:	aa 24       	eor	r10, r10
    23a0:	8a 29       	or	r24, r10
    23a2:	9b 29       	or	r25, r11
    23a4:	ac 29       	or	r26, r12
    23a6:	bd 29       	or	r27, r13
    23a8:	28 26       	eor	r2, r24
    23aa:	39 26       	eor	r3, r25
    23ac:	4a 26       	eor	r4, r26
    23ae:	5b 26       	eor	r5, r27
    23b0:	ca 01       	movw	r24, r20
    23b2:	aa 27       	eor	r26, r26
    23b4:	bb 27       	eor	r27, r27
    23b6:	a9 01       	movw	r20, r18
    23b8:	33 27       	eor	r19, r19
    23ba:	22 27       	eor	r18, r18
    23bc:	82 2b       	or	r24, r18
    23be:	93 2b       	or	r25, r19
    23c0:	a4 2b       	or	r26, r20
    23c2:	b5 2b       	or	r27, r21
    23c4:	28 26       	eor	r2, r24
    23c6:	39 26       	eor	r3, r25
    23c8:	4a 26       	eor	r4, r26
    23ca:	5b 26       	eor	r5, r27
    23cc:	81 2f       	mov	r24, r17
    23ce:	99 27       	eor	r25, r25
    23d0:	aa 27       	eor	r26, r26
    23d2:	bb 27       	eor	r27, r27
    23d4:	10 2f       	mov	r17, r16
    23d6:	0f 2d       	mov	r16, r15
    23d8:	fe 2c       	mov	r15, r14
    23da:	ee 24       	eor	r14, r14
    23dc:	8e 29       	or	r24, r14
    23de:	9f 29       	or	r25, r15
    23e0:	a0 2b       	or	r26, r16
    23e2:	b1 2b       	or	r27, r17
    23e4:	28 26       	eor	r2, r24
    23e6:	39 26       	eor	r3, r25
    23e8:	4a 26       	eor	r4, r26
    23ea:	5b 26       	eor	r5, r27
    23ec:	2d 8a       	std	Y+21, r2	; 0x15
    23ee:	3e 8a       	std	Y+22, r3	; 0x16
    23f0:	4f 8a       	std	Y+23, r4	; 0x17
    23f2:	58 8e       	std	Y+24, r5	; 0x18
    23f4:	ad 84       	ldd	r10, Y+13	; 0x0d
    23f6:	be 84       	ldd	r11, Y+14	; 0x0e
    23f8:	cf 84       	ldd	r12, Y+15	; 0x0f
    23fa:	d8 88       	ldd	r13, Y+16	; 0x10
    23fc:	8d 2d       	mov	r24, r13
    23fe:	99 27       	eor	r25, r25
    2400:	aa 27       	eor	r26, r26
    2402:	bb 27       	eor	r27, r27
    2404:	fc 01       	movw	r30, r24
    2406:	ee 0f       	add	r30, r30
    2408:	ff 1f       	adc	r31, r31
    240a:	ee 0f       	add	r30, r30
    240c:	ff 1f       	adc	r31, r31
    240e:	ec 53       	subi	r30, 0x3C	; 60
    2410:	ff 4f       	sbci	r31, 0xFF	; 255
    2412:	25 90       	lpm	r2, Z+
    2414:	35 90       	lpm	r3, Z+
    2416:	45 90       	lpm	r4, Z+
    2418:	54 90       	lpm	r5, Z+
    241a:	c4 01       	movw	r24, r8
    241c:	aa 27       	eor	r26, r26
    241e:	bb 27       	eor	r27, r27
    2420:	fc 01       	movw	r30, r24
    2422:	f0 70       	andi	r31, 0x00	; 0
    2424:	ee 0f       	add	r30, r30
    2426:	ff 1f       	adc	r31, r31
    2428:	ee 0f       	add	r30, r30
    242a:	ff 1f       	adc	r31, r31
    242c:	ec 53       	subi	r30, 0x3C	; 60
    242e:	ff 4f       	sbci	r31, 0xFF	; 255
    2430:	a5 90       	lpm	r10, Z+
    2432:	b5 90       	lpm	r11, Z+
    2434:	c5 90       	lpm	r12, Z+
    2436:	d4 90       	lpm	r13, Z+
    2438:	ed 80       	ldd	r14, Y+5	; 0x05
    243a:	fe 80       	ldd	r15, Y+6	; 0x06
    243c:	0f 81       	ldd	r16, Y+7	; 0x07
    243e:	18 85       	ldd	r17, Y+8	; 0x08
    2440:	bb 27       	eor	r27, r27
    2442:	a1 2f       	mov	r26, r17
    2444:	90 2f       	mov	r25, r16
    2446:	8f 2d       	mov	r24, r15
    2448:	fc 01       	movw	r30, r24
    244a:	f0 70       	andi	r31, 0x00	; 0
    244c:	ee 0f       	add	r30, r30
    244e:	ff 1f       	adc	r31, r31
    2450:	ee 0f       	add	r30, r30
    2452:	ff 1f       	adc	r31, r31
    2454:	ec 53       	subi	r30, 0x3C	; 60
    2456:	ff 4f       	sbci	r31, 0xFF	; 255
    2458:	25 91       	lpm	r18, Z+
    245a:	35 91       	lpm	r19, Z+
    245c:	45 91       	lpm	r20, Z+
    245e:	54 91       	lpm	r21, Z+
    2460:	89 85       	ldd	r24, Y+9	; 0x09
    2462:	9a 85       	ldd	r25, Y+10	; 0x0a
    2464:	90 70       	andi	r25, 0x00	; 0
    2466:	88 0f       	add	r24, r24
    2468:	99 1f       	adc	r25, r25
    246a:	88 0f       	add	r24, r24
    246c:	99 1f       	adc	r25, r25
    246e:	8c 53       	subi	r24, 0x3C	; 60
    2470:	9f 4f       	sbci	r25, 0xFF	; 255
    2472:	fc 01       	movw	r30, r24
    2474:	e5 90       	lpm	r14, Z+
    2476:	f5 90       	lpm	r15, Z+
    2478:	05 91       	lpm	r16, Z+
    247a:	14 91       	lpm	r17, Z+
    247c:	fb 01       	movw	r30, r22
    247e:	80 8d       	ldd	r24, Z+24	; 0x18
    2480:	91 8d       	ldd	r25, Z+25	; 0x19
    2482:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2484:	b3 8d       	ldd	r27, Z+27	; 0x1b
    2486:	28 26       	eor	r2, r24
    2488:	39 26       	eor	r3, r25
    248a:	4a 26       	eor	r4, r26
    248c:	5b 26       	eor	r5, r27
    248e:	bb 27       	eor	r27, r27
    2490:	ad 2d       	mov	r26, r13
    2492:	9c 2d       	mov	r25, r12
    2494:	8b 2d       	mov	r24, r11
    2496:	da 2c       	mov	r13, r10
    2498:	cc 24       	eor	r12, r12
    249a:	bb 24       	eor	r11, r11
    249c:	aa 24       	eor	r10, r10
    249e:	8a 29       	or	r24, r10
    24a0:	9b 29       	or	r25, r11
    24a2:	ac 29       	or	r26, r12
    24a4:	bd 29       	or	r27, r13
    24a6:	28 26       	eor	r2, r24
    24a8:	39 26       	eor	r3, r25
    24aa:	4a 26       	eor	r4, r26
    24ac:	5b 26       	eor	r5, r27
    24ae:	ca 01       	movw	r24, r20
    24b0:	aa 27       	eor	r26, r26
    24b2:	bb 27       	eor	r27, r27
    24b4:	a9 01       	movw	r20, r18
    24b6:	33 27       	eor	r19, r19
    24b8:	22 27       	eor	r18, r18
    24ba:	82 2b       	or	r24, r18
    24bc:	93 2b       	or	r25, r19
    24be:	a4 2b       	or	r26, r20
    24c0:	b5 2b       	or	r27, r21
    24c2:	28 26       	eor	r2, r24
    24c4:	39 26       	eor	r3, r25
    24c6:	4a 26       	eor	r4, r26
    24c8:	5b 26       	eor	r5, r27
    24ca:	81 2f       	mov	r24, r17
    24cc:	99 27       	eor	r25, r25
    24ce:	aa 27       	eor	r26, r26
    24d0:	bb 27       	eor	r27, r27
    24d2:	10 2f       	mov	r17, r16
    24d4:	0f 2d       	mov	r16, r15
    24d6:	fe 2c       	mov	r15, r14
    24d8:	ee 24       	eor	r14, r14
    24da:	8e 29       	or	r24, r14
    24dc:	9f 29       	or	r25, r15
    24de:	a0 2b       	or	r26, r16
    24e0:	b1 2b       	or	r27, r17
    24e2:	28 26       	eor	r2, r24
    24e4:	39 26       	eor	r3, r25
    24e6:	4a 26       	eor	r4, r26
    24e8:	5b 26       	eor	r5, r27
    24ea:	89 2d       	mov	r24, r9
    24ec:	99 27       	eor	r25, r25
    24ee:	aa 27       	eor	r26, r26
    24f0:	bb 27       	eor	r27, r27
    24f2:	fc 01       	movw	r30, r24
    24f4:	ee 0f       	add	r30, r30
    24f6:	ff 1f       	adc	r31, r31
    24f8:	ee 0f       	add	r30, r30
    24fa:	ff 1f       	adc	r31, r31
    24fc:	ec 53       	subi	r30, 0x3C	; 60
    24fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2500:	25 91       	lpm	r18, Z+
    2502:	35 91       	lpm	r19, Z+
    2504:	45 91       	lpm	r20, Z+
    2506:	54 91       	lpm	r21, Z+
    2508:	6d 80       	ldd	r6, Y+5	; 0x05
    250a:	7e 80       	ldd	r7, Y+6	; 0x06
    250c:	8f 80       	ldd	r8, Y+7	; 0x07
    250e:	98 84       	ldd	r9, Y+8	; 0x08
    2510:	c4 01       	movw	r24, r8
    2512:	aa 27       	eor	r26, r26
    2514:	bb 27       	eor	r27, r27
    2516:	fc 01       	movw	r30, r24
    2518:	f0 70       	andi	r31, 0x00	; 0
    251a:	ee 0f       	add	r30, r30
    251c:	ff 1f       	adc	r31, r31
    251e:	ee 0f       	add	r30, r30
    2520:	ff 1f       	adc	r31, r31
    2522:	ec 53       	subi	r30, 0x3C	; 60
    2524:	ff 4f       	sbci	r31, 0xFF	; 255
    2526:	65 90       	lpm	r6, Z+
    2528:	75 90       	lpm	r7, Z+
    252a:	85 90       	lpm	r8, Z+
    252c:	94 90       	lpm	r9, Z+
    252e:	a9 84       	ldd	r10, Y+9	; 0x09
    2530:	ba 84       	ldd	r11, Y+10	; 0x0a
    2532:	cb 84       	ldd	r12, Y+11	; 0x0b
    2534:	dc 84       	ldd	r13, Y+12	; 0x0c
    2536:	bb 27       	eor	r27, r27
    2538:	ad 2d       	mov	r26, r13
    253a:	9c 2d       	mov	r25, r12
    253c:	8b 2d       	mov	r24, r11
    253e:	fc 01       	movw	r30, r24
    2540:	f0 70       	andi	r31, 0x00	; 0
    2542:	ee 0f       	add	r30, r30
    2544:	ff 1f       	adc	r31, r31
    2546:	ee 0f       	add	r30, r30
    2548:	ff 1f       	adc	r31, r31
    254a:	ec 53       	subi	r30, 0x3C	; 60
    254c:	ff 4f       	sbci	r31, 0xFF	; 255
    254e:	e5 90       	lpm	r14, Z+
    2550:	f5 90       	lpm	r15, Z+
    2552:	05 91       	lpm	r16, Z+
    2554:	14 91       	lpm	r17, Z+
    2556:	8d 85       	ldd	r24, Y+13	; 0x0d
    2558:	9e 85       	ldd	r25, Y+14	; 0x0e
    255a:	90 70       	andi	r25, 0x00	; 0
    255c:	88 0f       	add	r24, r24
    255e:	99 1f       	adc	r25, r25
    2560:	88 0f       	add	r24, r24
    2562:	99 1f       	adc	r25, r25
    2564:	8c 53       	subi	r24, 0x3C	; 60
    2566:	9f 4f       	sbci	r25, 0xFF	; 255
    2568:	fc 01       	movw	r30, r24
    256a:	a5 90       	lpm	r10, Z+
    256c:	b5 90       	lpm	r11, Z+
    256e:	c5 90       	lpm	r12, Z+
    2570:	d4 90       	lpm	r13, Z+
    2572:	fb 01       	movw	r30, r22
    2574:	84 8d       	ldd	r24, Z+28	; 0x1c
    2576:	95 8d       	ldd	r25, Z+29	; 0x1d
    2578:	a6 8d       	ldd	r26, Z+30	; 0x1e
    257a:	b7 8d       	ldd	r27, Z+31	; 0x1f
    257c:	28 27       	eor	r18, r24
    257e:	39 27       	eor	r19, r25
    2580:	4a 27       	eor	r20, r26
    2582:	5b 27       	eor	r21, r27
    2584:	bb 27       	eor	r27, r27
    2586:	a9 2d       	mov	r26, r9
    2588:	98 2d       	mov	r25, r8
    258a:	87 2d       	mov	r24, r7
    258c:	96 2c       	mov	r9, r6
    258e:	88 24       	eor	r8, r8
    2590:	77 24       	eor	r7, r7
    2592:	66 24       	eor	r6, r6
    2594:	86 29       	or	r24, r6
    2596:	97 29       	or	r25, r7
    2598:	a8 29       	or	r26, r8
    259a:	b9 29       	or	r27, r9
    259c:	28 27       	eor	r18, r24
    259e:	39 27       	eor	r19, r25
    25a0:	4a 27       	eor	r20, r26
    25a2:	5b 27       	eor	r21, r27
    25a4:	c8 01       	movw	r24, r16
    25a6:	aa 27       	eor	r26, r26
    25a8:	bb 27       	eor	r27, r27
    25aa:	87 01       	movw	r16, r14
    25ac:	ff 24       	eor	r15, r15
    25ae:	ee 24       	eor	r14, r14
    25b0:	8e 29       	or	r24, r14
    25b2:	9f 29       	or	r25, r15
    25b4:	a0 2b       	or	r26, r16
    25b6:	b1 2b       	or	r27, r17
    25b8:	28 27       	eor	r18, r24
    25ba:	39 27       	eor	r19, r25
    25bc:	4a 27       	eor	r20, r26
    25be:	5b 27       	eor	r21, r27
    25c0:	8d 2d       	mov	r24, r13
    25c2:	99 27       	eor	r25, r25
    25c4:	aa 27       	eor	r26, r26
    25c6:	bb 27       	eor	r27, r27
    25c8:	dc 2c       	mov	r13, r12
    25ca:	cb 2c       	mov	r12, r11
    25cc:	ba 2c       	mov	r11, r10
    25ce:	aa 24       	eor	r10, r10
    25d0:	8a 29       	or	r24, r10
    25d2:	9b 29       	or	r25, r11
    25d4:	ac 29       	or	r26, r12
    25d6:	bd 29       	or	r27, r13
    25d8:	28 27       	eor	r18, r24
    25da:	39 27       	eor	r19, r25
    25dc:	4a 27       	eor	r20, r26
    25de:	5b 27       	eor	r21, r27
        rk += 8;
    25e0:	60 5e       	subi	r22, 0xE0	; 224
    25e2:	7f 4f       	sbci	r23, 0xFF	; 255
        if (--r == 0)
    25e4:	89 81       	ldd	r24, Y+1	; 0x01
    25e6:	9a 81       	ldd	r25, Y+2	; 0x02
    25e8:	ab 81       	ldd	r26, Y+3	; 0x03
    25ea:	bc 81       	ldd	r27, Y+4	; 0x04
    25ec:	01 97       	sbiw	r24, 0x01	; 1
    25ee:	a1 09       	sbc	r26, r1
    25f0:	b1 09       	sbc	r27, r1
    25f2:	89 83       	std	Y+1, r24	; 0x01
    25f4:	9a 83       	std	Y+2, r25	; 0x02
    25f6:	ab 83       	std	Y+3, r26	; 0x03
    25f8:	bc 83       	std	Y+4, r27	; 0x04
    25fa:	89 88       	ldd	r8, Y+17	; 0x11
    25fc:	9a 88       	ldd	r9, Y+18	; 0x12
    25fe:	ab 88       	ldd	r10, Y+19	; 0x13
    2600:	bc 88       	ldd	r11, Y+20	; 0x14
    2602:	6b 2c       	mov	r6, r11
    2604:	77 24       	eor	r7, r7
    2606:	88 24       	eor	r8, r8
    2608:	99 24       	eor	r9, r9
    260a:	2f 96       	adiw	r28, 0x0f	; 15
    260c:	6c ae       	std	Y+60, r6	; 0x3c
    260e:	7d ae       	std	Y+61, r7	; 0x3d
    2610:	8e ae       	std	Y+62, r8	; 0x3e
    2612:	9f ae       	std	Y+63, r9	; 0x3f
    2614:	2f 97       	sbiw	r28, 0x0f	; 15
    2616:	ad 88       	ldd	r10, Y+21	; 0x15
    2618:	be 88       	ldd	r11, Y+22	; 0x16
    261a:	cf 88       	ldd	r12, Y+23	; 0x17
    261c:	d8 8c       	ldd	r13, Y+24	; 0x18
    261e:	36 01       	movw	r6, r12
    2620:	88 24       	eor	r8, r8
    2622:	99 24       	eor	r9, r9
    2624:	dd 24       	eor	r13, r13
    2626:	c5 2c       	mov	r12, r5
    2628:	b4 2c       	mov	r11, r4
    262a:	a3 2c       	mov	r10, r3
    262c:	89 01       	movw	r16, r18
    262e:	10 70       	andi	r17, 0x00	; 0
    2630:	18 a3       	std	Y+32, r17	; 0x20
    2632:	0f 8f       	std	Y+31, r16	; 0x1f
    2634:	8d 89       	ldd	r24, Y+21	; 0x15
    2636:	9e 89       	ldd	r25, Y+22	; 0x16
    2638:	af 89       	ldd	r26, Y+23	; 0x17
    263a:	b8 8d       	ldd	r27, Y+24	; 0x18
    263c:	8b 2f       	mov	r24, r27
    263e:	99 27       	eor	r25, r25
    2640:	aa 27       	eor	r26, r26
    2642:	bb 27       	eor	r27, r27
    2644:	89 a3       	std	Y+33, r24	; 0x21
    2646:	9a a3       	std	Y+34, r25	; 0x22
    2648:	ab a3       	std	Y+35, r26	; 0x23
    264a:	bc a3       	std	Y+36, r27	; 0x24
    264c:	72 01       	movw	r14, r4
    264e:	00 27       	eor	r16, r16
    2650:	11 27       	eor	r17, r17
    2652:	ed a2       	std	Y+37, r14	; 0x25
    2654:	fe a2       	std	Y+38, r15	; 0x26
    2656:	0f a3       	std	Y+39, r16	; 0x27
    2658:	18 a7       	std	Y+40, r17	; 0x28
    265a:	bb 27       	eor	r27, r27
    265c:	a5 2f       	mov	r26, r21
    265e:	94 2f       	mov	r25, r20
    2660:	83 2f       	mov	r24, r19
    2662:	89 a7       	std	Y+41, r24	; 0x29
    2664:	9a a7       	std	Y+42, r25	; 0x2a
    2666:	ab a7       	std	Y+43, r26	; 0x2b
    2668:	bc a7       	std	Y+44, r27	; 0x2c
    266a:	a9 89       	ldd	r26, Y+17	; 0x11
    266c:	ba 89       	ldd	r27, Y+18	; 0x12
    266e:	b0 70       	andi	r27, 0x00	; 0
    2670:	be a7       	std	Y+46, r27	; 0x2e
    2672:	ad a7       	std	Y+45, r26	; 0x2d
    2674:	e5 2c       	mov	r14, r5
    2676:	ff 24       	eor	r15, r15
    2678:	00 27       	eor	r16, r16
    267a:	11 27       	eor	r17, r17
    267c:	ef a6       	std	Y+47, r14	; 0x2f
    267e:	f8 aa       	std	Y+48, r15	; 0x30
    2680:	09 ab       	std	Y+49, r16	; 0x31
    2682:	1a ab       	std	Y+50, r17	; 0x32
    2684:	ca 01       	movw	r24, r20
    2686:	aa 27       	eor	r26, r26
    2688:	bb 27       	eor	r27, r27
    268a:	8b ab       	std	Y+51, r24	; 0x33
    268c:	9c ab       	std	Y+52, r25	; 0x34
    268e:	ad ab       	std	Y+53, r26	; 0x35
    2690:	be ab       	std	Y+54, r27	; 0x36
    2692:	e9 88       	ldd	r14, Y+17	; 0x11
    2694:	fa 88       	ldd	r15, Y+18	; 0x12
    2696:	0b 89       	ldd	r16, Y+19	; 0x13
    2698:	1c 89       	ldd	r17, Y+20	; 0x14
    269a:	ef 2c       	mov	r14, r15
    269c:	f0 2e       	mov	r15, r16
    269e:	01 2f       	mov	r16, r17
    26a0:	11 27       	eor	r17, r17
    26a2:	ef aa       	std	Y+55, r14	; 0x37
    26a4:	f8 ae       	std	Y+56, r15	; 0x38
    26a6:	09 af       	std	Y+57, r16	; 0x39
    26a8:	1a af       	std	Y+58, r17	; 0x3a
    26aa:	4d 88       	ldd	r4, Y+21	; 0x15
    26ac:	5e 88       	ldd	r5, Y+22	; 0x16
    26ae:	0f ef       	ldi	r16, 0xFF	; 255
    26b0:	40 22       	and	r4, r16
    26b2:	55 24       	eor	r5, r5
    26b4:	85 2f       	mov	r24, r21
    26b6:	99 27       	eor	r25, r25
    26b8:	aa 27       	eor	r26, r26
    26ba:	bb 27       	eor	r27, r27
    26bc:	8b af       	std	Y+59, r24	; 0x3b
    26be:	9c af       	std	Y+60, r25	; 0x3c
    26c0:	ad af       	std	Y+61, r26	; 0x3d
    26c2:	be af       	std	Y+62, r27	; 0x3e
    26c4:	09 89       	ldd	r16, Y+17	; 0x11
    26c6:	1a 89       	ldd	r17, Y+18	; 0x12
    26c8:	2b 89       	ldd	r18, Y+19	; 0x13
    26ca:	3c 89       	ldd	r19, Y+20	; 0x14
    26cc:	79 01       	movw	r14, r18
    26ce:	00 27       	eor	r16, r16
    26d0:	11 27       	eor	r17, r17
    26d2:	23 96       	adiw	r28, 0x03	; 3
    26d4:	ec ae       	std	Y+60, r14	; 0x3c
    26d6:	fd ae       	std	Y+61, r15	; 0x3d
    26d8:	0e af       	std	Y+62, r16	; 0x3e
    26da:	1f af       	std	Y+63, r17	; 0x3f
    26dc:	23 97       	sbiw	r28, 0x03	; 3
    26de:	2d 89       	ldd	r18, Y+21	; 0x15
    26e0:	3e 89       	ldd	r19, Y+22	; 0x16
    26e2:	4f 89       	ldd	r20, Y+23	; 0x17
    26e4:	58 8d       	ldd	r21, Y+24	; 0x18
    26e6:	23 2f       	mov	r18, r19
    26e8:	34 2f       	mov	r19, r20
    26ea:	45 2f       	mov	r20, r21
    26ec:	55 27       	eor	r21, r21
    26ee:	27 96       	adiw	r28, 0x07	; 7
    26f0:	2c af       	std	Y+60, r18	; 0x3c
    26f2:	3d af       	std	Y+61, r19	; 0x3d
    26f4:	4e af       	std	Y+62, r20	; 0x3e
    26f6:	5f af       	std	Y+63, r21	; 0x3f
    26f8:	27 97       	sbiw	r28, 0x07	; 7
    26fa:	3f ef       	ldi	r19, 0xFF	; 255
    26fc:	23 22       	and	r2, r19
    26fe:	33 24       	eor	r3, r3
    2700:	89 81       	ldd	r24, Y+1	; 0x01
    2702:	9a 81       	ldd	r25, Y+2	; 0x02
    2704:	ab 81       	ldd	r26, Y+3	; 0x03
    2706:	bc 81       	ldd	r27, Y+4	; 0x04
    2708:	00 97       	sbiw	r24, 0x00	; 0
    270a:	a1 05       	cpc	r26, r1
    270c:	b1 05       	cpc	r27, r1
    270e:	09 f4       	brne	.+2      	; 0x2712 <aes_encrypt+0x77e>
    2710:	d3 c1       	rjmp	.+934    	; 0x2ab8 <aes_encrypt+0xb24>
            break;
        ROUND(0,s,t);
    2712:	2d 96       	adiw	r28, 0x0d	; 13
    2714:	2e ad       	ldd	r18, Y+62	; 0x3e
    2716:	3f ad       	ldd	r19, Y+63	; 0x3f
    2718:	2d 97       	sbiw	r28, 0x0d	; 13
    271a:	22 0f       	add	r18, r18
    271c:	33 1f       	adc	r19, r19
    271e:	22 0f       	add	r18, r18
    2720:	33 1f       	adc	r19, r19
    2722:	2c 53       	subi	r18, 0x3C	; 60
    2724:	3f 4f       	sbci	r19, 0xFF	; 255
    2726:	f9 01       	movw	r30, r18
    2728:	e5 90       	lpm	r14, Z+
    272a:	f5 90       	lpm	r15, Z+
    272c:	05 91       	lpm	r16, Z+
    272e:	14 91       	lpm	r17, Z+
    2730:	ed 82       	std	Y+5, r14	; 0x05
    2732:	fe 82       	std	Y+6, r15	; 0x06
    2734:	0f 83       	std	Y+7, r16	; 0x07
    2736:	18 87       	std	Y+8, r17	; 0x08
    2738:	f3 01       	movw	r30, r6
    273a:	f0 70       	andi	r31, 0x00	; 0
    273c:	ee 0f       	add	r30, r30
    273e:	ff 1f       	adc	r31, r31
    2740:	ee 0f       	add	r30, r30
    2742:	ff 1f       	adc	r31, r31
    2744:	ec 53       	subi	r30, 0x3C	; 60
    2746:	ff 4f       	sbci	r31, 0xFF	; 255
    2748:	25 91       	lpm	r18, Z+
    274a:	35 91       	lpm	r19, Z+
    274c:	45 91       	lpm	r20, Z+
    274e:	54 91       	lpm	r21, Z+
    2750:	f5 01       	movw	r30, r10
    2752:	f0 70       	andi	r31, 0x00	; 0
    2754:	ee 0f       	add	r30, r30
    2756:	ff 1f       	adc	r31, r31
    2758:	ee 0f       	add	r30, r30
    275a:	ff 1f       	adc	r31, r31
    275c:	ec 53       	subi	r30, 0x3C	; 60
    275e:	ff 4f       	sbci	r31, 0xFF	; 255
    2760:	e5 90       	lpm	r14, Z+
    2762:	f5 90       	lpm	r15, Z+
    2764:	05 91       	lpm	r16, Z+
    2766:	14 91       	lpm	r17, Z+
    2768:	ef 8d       	ldd	r30, Y+31	; 0x1f
    276a:	f8 a1       	ldd	r31, Y+32	; 0x20
    276c:	ee 0f       	add	r30, r30
    276e:	ff 1f       	adc	r31, r31
    2770:	ee 0f       	add	r30, r30
    2772:	ff 1f       	adc	r31, r31
    2774:	ec 53       	subi	r30, 0x3C	; 60
    2776:	ff 4f       	sbci	r31, 0xFF	; 255
    2778:	a5 90       	lpm	r10, Z+
    277a:	b5 90       	lpm	r11, Z+
    277c:	c5 90       	lpm	r12, Z+
    277e:	d4 90       	lpm	r13, Z+
    2780:	fb 01       	movw	r30, r22
    2782:	80 81       	ld	r24, Z
    2784:	91 81       	ldd	r25, Z+1	; 0x01
    2786:	a2 81       	ldd	r26, Z+2	; 0x02
    2788:	b3 81       	ldd	r27, Z+3	; 0x03
    278a:	6d 80       	ldd	r6, Y+5	; 0x05
    278c:	7e 80       	ldd	r7, Y+6	; 0x06
    278e:	8f 80       	ldd	r8, Y+7	; 0x07
    2790:	98 84       	ldd	r9, Y+8	; 0x08
    2792:	68 26       	eor	r6, r24
    2794:	79 26       	eor	r7, r25
    2796:	8a 26       	eor	r8, r26
    2798:	9b 26       	eor	r9, r27
    279a:	bb 27       	eor	r27, r27
    279c:	a5 2f       	mov	r26, r21
    279e:	94 2f       	mov	r25, r20
    27a0:	83 2f       	mov	r24, r19
    27a2:	52 2f       	mov	r21, r18
    27a4:	44 27       	eor	r20, r20
    27a6:	33 27       	eor	r19, r19
    27a8:	22 27       	eor	r18, r18
    27aa:	82 2b       	or	r24, r18
    27ac:	93 2b       	or	r25, r19
    27ae:	a4 2b       	or	r26, r20
    27b0:	b5 2b       	or	r27, r21
    27b2:	68 26       	eor	r6, r24
    27b4:	79 26       	eor	r7, r25
    27b6:	8a 26       	eor	r8, r26
    27b8:	9b 26       	eor	r9, r27
    27ba:	c8 01       	movw	r24, r16
    27bc:	aa 27       	eor	r26, r26
    27be:	bb 27       	eor	r27, r27
    27c0:	87 01       	movw	r16, r14
    27c2:	ff 24       	eor	r15, r15
    27c4:	ee 24       	eor	r14, r14
    27c6:	8e 29       	or	r24, r14
    27c8:	9f 29       	or	r25, r15
    27ca:	a0 2b       	or	r26, r16
    27cc:	b1 2b       	or	r27, r17
    27ce:	68 26       	eor	r6, r24
    27d0:	79 26       	eor	r7, r25
    27d2:	8a 26       	eor	r8, r26
    27d4:	9b 26       	eor	r9, r27
    27d6:	8d 2d       	mov	r24, r13
    27d8:	99 27       	eor	r25, r25
    27da:	aa 27       	eor	r26, r26
    27dc:	bb 27       	eor	r27, r27
    27de:	dc 2c       	mov	r13, r12
    27e0:	cb 2c       	mov	r12, r11
    27e2:	ba 2c       	mov	r11, r10
    27e4:	aa 24       	eor	r10, r10
    27e6:	8a 29       	or	r24, r10
    27e8:	9b 29       	or	r25, r11
    27ea:	ac 29       	or	r26, r12
    27ec:	bd 29       	or	r27, r13
    27ee:	68 26       	eor	r6, r24
    27f0:	79 26       	eor	r7, r25
    27f2:	8a 26       	eor	r8, r26
    27f4:	9b 26       	eor	r9, r27
    27f6:	6d 82       	std	Y+5, r6	; 0x05
    27f8:	7e 82       	std	Y+6, r7	; 0x06
    27fa:	8f 82       	std	Y+7, r8	; 0x07
    27fc:	98 86       	std	Y+8, r9	; 0x08
    27fe:	29 a1       	ldd	r18, Y+33	; 0x21
    2800:	3a a1       	ldd	r19, Y+34	; 0x22
    2802:	22 0f       	add	r18, r18
    2804:	33 1f       	adc	r19, r19
    2806:	22 0f       	add	r18, r18
    2808:	33 1f       	adc	r19, r19
    280a:	2c 53       	subi	r18, 0x3C	; 60
    280c:	3f 4f       	sbci	r19, 0xFF	; 255
    280e:	f9 01       	movw	r30, r18
    2810:	85 90       	lpm	r8, Z+
    2812:	95 90       	lpm	r9, Z+
    2814:	a5 90       	lpm	r10, Z+
    2816:	b4 90       	lpm	r11, Z+
    2818:	89 86       	std	Y+9, r8	; 0x09
    281a:	9a 86       	std	Y+10, r9	; 0x0a
    281c:	ab 86       	std	Y+11, r10	; 0x0b
    281e:	bc 86       	std	Y+12, r11	; 0x0c
    2820:	8d a1       	ldd	r24, Y+37	; 0x25
    2822:	9e a1       	ldd	r25, Y+38	; 0x26
    2824:	90 70       	andi	r25, 0x00	; 0
    2826:	88 0f       	add	r24, r24
    2828:	99 1f       	adc	r25, r25
    282a:	88 0f       	add	r24, r24
    282c:	99 1f       	adc	r25, r25
    282e:	8c 53       	subi	r24, 0x3C	; 60
    2830:	9f 4f       	sbci	r25, 0xFF	; 255
    2832:	fc 01       	movw	r30, r24
    2834:	25 91       	lpm	r18, Z+
    2836:	35 91       	lpm	r19, Z+
    2838:	45 91       	lpm	r20, Z+
    283a:	54 91       	lpm	r21, Z+
    283c:	89 a5       	ldd	r24, Y+41	; 0x29
    283e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2840:	90 70       	andi	r25, 0x00	; 0
    2842:	88 0f       	add	r24, r24
    2844:	99 1f       	adc	r25, r25
    2846:	88 0f       	add	r24, r24
    2848:	99 1f       	adc	r25, r25
    284a:	8c 53       	subi	r24, 0x3C	; 60
    284c:	9f 4f       	sbci	r25, 0xFF	; 255
    284e:	fc 01       	movw	r30, r24
    2850:	e5 90       	lpm	r14, Z+
    2852:	f5 90       	lpm	r15, Z+
    2854:	05 91       	lpm	r16, Z+
    2856:	14 91       	lpm	r17, Z+
    2858:	ed a5       	ldd	r30, Y+45	; 0x2d
    285a:	fe a5       	ldd	r31, Y+46	; 0x2e
    285c:	ee 0f       	add	r30, r30
    285e:	ff 1f       	adc	r31, r31
    2860:	ee 0f       	add	r30, r30
    2862:	ff 1f       	adc	r31, r31
    2864:	ec 53       	subi	r30, 0x3C	; 60
    2866:	ff 4f       	sbci	r31, 0xFF	; 255
    2868:	a5 90       	lpm	r10, Z+
    286a:	b5 90       	lpm	r11, Z+
    286c:	c5 90       	lpm	r12, Z+
    286e:	d4 90       	lpm	r13, Z+
    2870:	fb 01       	movw	r30, r22
    2872:	84 81       	ldd	r24, Z+4	; 0x04
    2874:	95 81       	ldd	r25, Z+5	; 0x05
    2876:	a6 81       	ldd	r26, Z+6	; 0x06
    2878:	b7 81       	ldd	r27, Z+7	; 0x07
    287a:	69 84       	ldd	r6, Y+9	; 0x09
    287c:	7a 84       	ldd	r7, Y+10	; 0x0a
    287e:	8b 84       	ldd	r8, Y+11	; 0x0b
    2880:	9c 84       	ldd	r9, Y+12	; 0x0c
    2882:	68 26       	eor	r6, r24
    2884:	79 26       	eor	r7, r25
    2886:	8a 26       	eor	r8, r26
    2888:	9b 26       	eor	r9, r27
    288a:	bb 27       	eor	r27, r27
    288c:	a5 2f       	mov	r26, r21
    288e:	94 2f       	mov	r25, r20
    2890:	83 2f       	mov	r24, r19
    2892:	52 2f       	mov	r21, r18
    2894:	44 27       	eor	r20, r20
    2896:	33 27       	eor	r19, r19
    2898:	22 27       	eor	r18, r18
    289a:	82 2b       	or	r24, r18
    289c:	93 2b       	or	r25, r19
    289e:	a4 2b       	or	r26, r20
    28a0:	b5 2b       	or	r27, r21
    28a2:	68 26       	eor	r6, r24
    28a4:	79 26       	eor	r7, r25
    28a6:	8a 26       	eor	r8, r26
    28a8:	9b 26       	eor	r9, r27
    28aa:	c8 01       	movw	r24, r16
    28ac:	aa 27       	eor	r26, r26
    28ae:	bb 27       	eor	r27, r27
    28b0:	87 01       	movw	r16, r14
    28b2:	ff 24       	eor	r15, r15
    28b4:	ee 24       	eor	r14, r14
    28b6:	8e 29       	or	r24, r14
    28b8:	9f 29       	or	r25, r15
    28ba:	a0 2b       	or	r26, r16
    28bc:	b1 2b       	or	r27, r17
    28be:	68 26       	eor	r6, r24
    28c0:	79 26       	eor	r7, r25
    28c2:	8a 26       	eor	r8, r26
    28c4:	9b 26       	eor	r9, r27
    28c6:	8d 2d       	mov	r24, r13
    28c8:	99 27       	eor	r25, r25
    28ca:	aa 27       	eor	r26, r26
    28cc:	bb 27       	eor	r27, r27
    28ce:	dc 2c       	mov	r13, r12
    28d0:	cb 2c       	mov	r12, r11
    28d2:	ba 2c       	mov	r11, r10
    28d4:	aa 24       	eor	r10, r10
    28d6:	8a 29       	or	r24, r10
    28d8:	9b 29       	or	r25, r11
    28da:	ac 29       	or	r26, r12
    28dc:	bd 29       	or	r27, r13
    28de:	68 26       	eor	r6, r24
    28e0:	79 26       	eor	r7, r25
    28e2:	8a 26       	eor	r8, r26
    28e4:	9b 26       	eor	r9, r27
    28e6:	69 86       	std	Y+9, r6	; 0x09
    28e8:	7a 86       	std	Y+10, r7	; 0x0a
    28ea:	8b 86       	std	Y+11, r8	; 0x0b
    28ec:	9c 86       	std	Y+12, r9	; 0x0c
    28ee:	2f a5       	ldd	r18, Y+47	; 0x2f
    28f0:	38 a9       	ldd	r19, Y+48	; 0x30
    28f2:	22 0f       	add	r18, r18
    28f4:	33 1f       	adc	r19, r19
    28f6:	22 0f       	add	r18, r18
    28f8:	33 1f       	adc	r19, r19
    28fa:	2c 53       	subi	r18, 0x3C	; 60
    28fc:	3f 4f       	sbci	r19, 0xFF	; 255
    28fe:	f9 01       	movw	r30, r18
    2900:	85 90       	lpm	r8, Z+
    2902:	95 90       	lpm	r9, Z+
    2904:	a5 90       	lpm	r10, Z+
    2906:	b4 90       	lpm	r11, Z+
    2908:	8d 86       	std	Y+13, r8	; 0x0d
    290a:	9e 86       	std	Y+14, r9	; 0x0e
    290c:	af 86       	std	Y+15, r10	; 0x0f
    290e:	b8 8a       	std	Y+16, r11	; 0x10
    2910:	8b a9       	ldd	r24, Y+51	; 0x33
    2912:	9c a9       	ldd	r25, Y+52	; 0x34
    2914:	90 70       	andi	r25, 0x00	; 0
    2916:	88 0f       	add	r24, r24
    2918:	99 1f       	adc	r25, r25
    291a:	88 0f       	add	r24, r24
    291c:	99 1f       	adc	r25, r25
    291e:	8c 53       	subi	r24, 0x3C	; 60
    2920:	9f 4f       	sbci	r25, 0xFF	; 255
    2922:	fc 01       	movw	r30, r24
    2924:	25 91       	lpm	r18, Z+
    2926:	35 91       	lpm	r19, Z+
    2928:	45 91       	lpm	r20, Z+
    292a:	54 91       	lpm	r21, Z+
    292c:	8f a9       	ldd	r24, Y+55	; 0x37
    292e:	98 ad       	ldd	r25, Y+56	; 0x38
    2930:	90 70       	andi	r25, 0x00	; 0
    2932:	88 0f       	add	r24, r24
    2934:	99 1f       	adc	r25, r25
    2936:	88 0f       	add	r24, r24
    2938:	99 1f       	adc	r25, r25
    293a:	8c 53       	subi	r24, 0x3C	; 60
    293c:	9f 4f       	sbci	r25, 0xFF	; 255
    293e:	fc 01       	movw	r30, r24
    2940:	e5 90       	lpm	r14, Z+
    2942:	f5 90       	lpm	r15, Z+
    2944:	05 91       	lpm	r16, Z+
    2946:	14 91       	lpm	r17, Z+
    2948:	f2 01       	movw	r30, r4
    294a:	ee 0f       	add	r30, r30
    294c:	ff 1f       	adc	r31, r31
    294e:	ee 0f       	add	r30, r30
    2950:	ff 1f       	adc	r31, r31
    2952:	ec 53       	subi	r30, 0x3C	; 60
    2954:	ff 4f       	sbci	r31, 0xFF	; 255
    2956:	a5 90       	lpm	r10, Z+
    2958:	b5 90       	lpm	r11, Z+
    295a:	c5 90       	lpm	r12, Z+
    295c:	d4 90       	lpm	r13, Z+
    295e:	fb 01       	movw	r30, r22
    2960:	80 85       	ldd	r24, Z+8	; 0x08
    2962:	91 85       	ldd	r25, Z+9	; 0x09
    2964:	a2 85       	ldd	r26, Z+10	; 0x0a
    2966:	b3 85       	ldd	r27, Z+11	; 0x0b
    2968:	4d 84       	ldd	r4, Y+13	; 0x0d
    296a:	5e 84       	ldd	r5, Y+14	; 0x0e
    296c:	6f 84       	ldd	r6, Y+15	; 0x0f
    296e:	78 88       	ldd	r7, Y+16	; 0x10
    2970:	48 26       	eor	r4, r24
    2972:	59 26       	eor	r5, r25
    2974:	6a 26       	eor	r6, r26
    2976:	7b 26       	eor	r7, r27
    2978:	bb 27       	eor	r27, r27
    297a:	a5 2f       	mov	r26, r21
    297c:	94 2f       	mov	r25, r20
    297e:	83 2f       	mov	r24, r19
    2980:	52 2f       	mov	r21, r18
    2982:	44 27       	eor	r20, r20
    2984:	33 27       	eor	r19, r19
    2986:	22 27       	eor	r18, r18
    2988:	82 2b       	or	r24, r18
    298a:	93 2b       	or	r25, r19
    298c:	a4 2b       	or	r26, r20
    298e:	b5 2b       	or	r27, r21
    2990:	48 26       	eor	r4, r24
    2992:	59 26       	eor	r5, r25
    2994:	6a 26       	eor	r6, r26
    2996:	7b 26       	eor	r7, r27
    2998:	c8 01       	movw	r24, r16
    299a:	aa 27       	eor	r26, r26
    299c:	bb 27       	eor	r27, r27
    299e:	87 01       	movw	r16, r14
    29a0:	ff 24       	eor	r15, r15
    29a2:	ee 24       	eor	r14, r14
    29a4:	8e 29       	or	r24, r14
    29a6:	9f 29       	or	r25, r15
    29a8:	a0 2b       	or	r26, r16
    29aa:	b1 2b       	or	r27, r17
    29ac:	48 26       	eor	r4, r24
    29ae:	59 26       	eor	r5, r25
    29b0:	6a 26       	eor	r6, r26
    29b2:	7b 26       	eor	r7, r27
    29b4:	8d 2d       	mov	r24, r13
    29b6:	99 27       	eor	r25, r25
    29b8:	aa 27       	eor	r26, r26
    29ba:	bb 27       	eor	r27, r27
    29bc:	dc 2c       	mov	r13, r12
    29be:	cb 2c       	mov	r12, r11
    29c0:	ba 2c       	mov	r11, r10
    29c2:	aa 24       	eor	r10, r10
    29c4:	8a 29       	or	r24, r10
    29c6:	9b 29       	or	r25, r11
    29c8:	ac 29       	or	r26, r12
    29ca:	bd 29       	or	r27, r13
    29cc:	48 26       	eor	r4, r24
    29ce:	59 26       	eor	r5, r25
    29d0:	6a 26       	eor	r6, r26
    29d2:	7b 26       	eor	r7, r27
    29d4:	4d 86       	std	Y+13, r4	; 0x0d
    29d6:	5e 86       	std	Y+14, r5	; 0x0e
    29d8:	6f 86       	std	Y+15, r6	; 0x0f
    29da:	78 8a       	std	Y+16, r7	; 0x10
    29dc:	8b ad       	ldd	r24, Y+59	; 0x3b
    29de:	9c ad       	ldd	r25, Y+60	; 0x3c
    29e0:	88 0f       	add	r24, r24
    29e2:	99 1f       	adc	r25, r25
    29e4:	88 0f       	add	r24, r24
    29e6:	99 1f       	adc	r25, r25
    29e8:	8c 53       	subi	r24, 0x3C	; 60
    29ea:	9f 4f       	sbci	r25, 0xFF	; 255
    29ec:	fc 01       	movw	r30, r24
    29ee:	65 90       	lpm	r6, Z+
    29f0:	75 90       	lpm	r7, Z+
    29f2:	85 90       	lpm	r8, Z+
    29f4:	94 90       	lpm	r9, Z+
    29f6:	21 96       	adiw	r28, 0x01	; 1
    29f8:	ee ad       	ldd	r30, Y+62	; 0x3e
    29fa:	ff ad       	ldd	r31, Y+63	; 0x3f
    29fc:	21 97       	sbiw	r28, 0x01	; 1
    29fe:	f0 70       	andi	r31, 0x00	; 0
    2a00:	ee 0f       	add	r30, r30
    2a02:	ff 1f       	adc	r31, r31
    2a04:	ee 0f       	add	r30, r30
    2a06:	ff 1f       	adc	r31, r31
    2a08:	ec 53       	subi	r30, 0x3C	; 60
    2a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0c:	25 91       	lpm	r18, Z+
    2a0e:	35 91       	lpm	r19, Z+
    2a10:	45 91       	lpm	r20, Z+
    2a12:	54 91       	lpm	r21, Z+
    2a14:	25 96       	adiw	r28, 0x05	; 5
    2a16:	ee ad       	ldd	r30, Y+62	; 0x3e
    2a18:	ff ad       	ldd	r31, Y+63	; 0x3f
    2a1a:	25 97       	sbiw	r28, 0x05	; 5
    2a1c:	f0 70       	andi	r31, 0x00	; 0
    2a1e:	ee 0f       	add	r30, r30
    2a20:	ff 1f       	adc	r31, r31
    2a22:	ee 0f       	add	r30, r30
    2a24:	ff 1f       	adc	r31, r31
    2a26:	ec 53       	subi	r30, 0x3C	; 60
    2a28:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2a:	e5 90       	lpm	r14, Z+
    2a2c:	f5 90       	lpm	r15, Z+
    2a2e:	05 91       	lpm	r16, Z+
    2a30:	14 91       	lpm	r17, Z+
    2a32:	f1 01       	movw	r30, r2
    2a34:	ee 0f       	add	r30, r30
    2a36:	ff 1f       	adc	r31, r31
    2a38:	ee 0f       	add	r30, r30
    2a3a:	ff 1f       	adc	r31, r31
    2a3c:	ec 53       	subi	r30, 0x3C	; 60
    2a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a40:	a5 90       	lpm	r10, Z+
    2a42:	b5 90       	lpm	r11, Z+
    2a44:	c5 90       	lpm	r12, Z+
    2a46:	d4 90       	lpm	r13, Z+
    2a48:	fb 01       	movw	r30, r22
    2a4a:	84 85       	ldd	r24, Z+12	; 0x0c
    2a4c:	95 85       	ldd	r25, Z+13	; 0x0d
    2a4e:	a6 85       	ldd	r26, Z+14	; 0x0e
    2a50:	b7 85       	ldd	r27, Z+15	; 0x0f
    2a52:	68 26       	eor	r6, r24
    2a54:	79 26       	eor	r7, r25
    2a56:	8a 26       	eor	r8, r26
    2a58:	9b 26       	eor	r9, r27
    2a5a:	bb 27       	eor	r27, r27
    2a5c:	a5 2f       	mov	r26, r21
    2a5e:	94 2f       	mov	r25, r20
    2a60:	83 2f       	mov	r24, r19
    2a62:	52 2f       	mov	r21, r18
    2a64:	44 27       	eor	r20, r20
    2a66:	33 27       	eor	r19, r19
    2a68:	22 27       	eor	r18, r18
    2a6a:	82 2b       	or	r24, r18
    2a6c:	93 2b       	or	r25, r19
    2a6e:	a4 2b       	or	r26, r20
    2a70:	b5 2b       	or	r27, r21
    2a72:	68 26       	eor	r6, r24
    2a74:	79 26       	eor	r7, r25
    2a76:	8a 26       	eor	r8, r26
    2a78:	9b 26       	eor	r9, r27
    2a7a:	c8 01       	movw	r24, r16
    2a7c:	aa 27       	eor	r26, r26
    2a7e:	bb 27       	eor	r27, r27
    2a80:	87 01       	movw	r16, r14
    2a82:	ff 24       	eor	r15, r15
    2a84:	ee 24       	eor	r14, r14
    2a86:	8e 29       	or	r24, r14
    2a88:	9f 29       	or	r25, r15
    2a8a:	a0 2b       	or	r26, r16
    2a8c:	b1 2b       	or	r27, r17
    2a8e:	68 26       	eor	r6, r24
    2a90:	79 26       	eor	r7, r25
    2a92:	8a 26       	eor	r8, r26
    2a94:	9b 26       	eor	r9, r27
    2a96:	8d 2d       	mov	r24, r13
    2a98:	99 27       	eor	r25, r25
    2a9a:	aa 27       	eor	r26, r26
    2a9c:	bb 27       	eor	r27, r27
    2a9e:	dc 2c       	mov	r13, r12
    2aa0:	cb 2c       	mov	r12, r11
    2aa2:	ba 2c       	mov	r11, r10
    2aa4:	aa 24       	eor	r10, r10
    2aa6:	8a 29       	or	r24, r10
    2aa8:	9b 29       	or	r25, r11
    2aaa:	ac 29       	or	r26, r12
    2aac:	bd 29       	or	r27, r13
    2aae:	68 26       	eor	r6, r24
    2ab0:	79 26       	eor	r7, r25
    2ab2:	8a 26       	eor	r8, r26
    2ab4:	9b 26       	eor	r9, r27
    2ab6:	8c cb       	rjmp	.-2280   	; 0x21d0 <aes_encrypt+0x23c>
    2ab8:	09 8d       	ldd	r16, Y+25	; 0x19
    2aba:	1a 8d       	ldd	r17, Y+26	; 0x1a
    2abc:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2abe:	3c 8d       	ldd	r19, Y+28	; 0x1c
    2ac0:	01 50       	subi	r16, 0x01	; 1
    2ac2:	10 40       	sbci	r17, 0x00	; 0
    2ac4:	20 40       	sbci	r18, 0x00	; 0
    2ac6:	30 40       	sbci	r19, 0x00	; 0
    2ac8:	0f 5f       	subi	r16, 0xFF	; 255
    2aca:	1f 4f       	sbci	r17, 0xFF	; 255
    2acc:	85 e0       	ldi	r24, 0x05	; 5
    2ace:	00 0f       	add	r16, r16
    2ad0:	11 1f       	adc	r17, r17
    2ad2:	8a 95       	dec	r24
    2ad4:	e1 f7       	brne	.-8      	; 0x2ace <aes_encrypt+0xb3a>
    2ad6:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2ad8:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2ada:	02 0f       	add	r16, r18
    2adc:	13 1f       	adc	r17, r19
    2ade:	29 96       	adiw	r28, 0x09	; 9
    2ae0:	1f af       	std	Y+63, r17	; 0x3f
    2ae2:	0e af       	std	Y+62, r16	; 0x3e
    2ae4:	29 97       	sbiw	r28, 0x09	; 9

    /*
     * apply last round and
     * map cipher state to byte array block:
     */
    s0 = TE41(t0) ^ TE42(t1) ^ TE43(t2) ^ TE44(t3) ^ rk[0];
    2ae6:	2d 96       	adiw	r28, 0x0d	; 13
    2ae8:	8e ad       	ldd	r24, Y+62	; 0x3e
    2aea:	9f ad       	ldd	r25, Y+63	; 0x3f
    2aec:	2d 97       	sbiw	r28, 0x0d	; 13
    2aee:	88 0f       	add	r24, r24
    2af0:	99 1f       	adc	r25, r25
    2af2:	88 0f       	add	r24, r24
    2af4:	99 1f       	adc	r25, r25
    2af6:	8c 53       	subi	r24, 0x3C	; 60
    2af8:	9f 4f       	sbci	r25, 0xFF	; 255
    2afa:	fc 01       	movw	r30, r24
    2afc:	e5 90       	lpm	r14, Z+
    2afe:	f5 90       	lpm	r15, Z+
    2b00:	05 91       	lpm	r16, Z+
    2b02:	14 91       	lpm	r17, Z+
    2b04:	c3 01       	movw	r24, r6
    2b06:	90 70       	andi	r25, 0x00	; 0
    2b08:	88 0f       	add	r24, r24
    2b0a:	99 1f       	adc	r25, r25
    2b0c:	88 0f       	add	r24, r24
    2b0e:	99 1f       	adc	r25, r25
    2b10:	8c 53       	subi	r24, 0x3C	; 60
    2b12:	9f 4f       	sbci	r25, 0xFF	; 255
    2b14:	fc 01       	movw	r30, r24
    2b16:	25 91       	lpm	r18, Z+
    2b18:	35 91       	lpm	r19, Z+
    2b1a:	45 91       	lpm	r20, Z+
    2b1c:	54 91       	lpm	r21, Z+
    2b1e:	b5 01       	movw	r22, r10
    2b20:	70 70       	andi	r23, 0x00	; 0
    2b22:	66 0f       	add	r22, r22
    2b24:	77 1f       	adc	r23, r23
    2b26:	66 0f       	add	r22, r22
    2b28:	77 1f       	adc	r23, r23
    2b2a:	6c 53       	subi	r22, 0x3C	; 60
    2b2c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b2e:	fb 01       	movw	r30, r22
    2b30:	85 91       	lpm	r24, Z+
    2b32:	95 91       	lpm	r25, Z+
    2b34:	a5 91       	lpm	r26, Z+
    2b36:	b4 91       	lpm	r27, Z+
    2b38:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2b3a:	78 a1       	ldd	r23, Y+32	; 0x20
    2b3c:	66 0f       	add	r22, r22
    2b3e:	77 1f       	adc	r23, r23
    2b40:	66 0f       	add	r22, r22
    2b42:	77 1f       	adc	r23, r23
    2b44:	6c 53       	subi	r22, 0x3C	; 60
    2b46:	7f 4f       	sbci	r23, 0xFF	; 255
    2b48:	fb 01       	movw	r30, r22
    2b4a:	a5 90       	lpm	r10, Z+
    2b4c:	b5 90       	lpm	r11, Z+
    2b4e:	c5 90       	lpm	r12, Z+
    2b50:	d4 90       	lpm	r13, Z+
    2b52:	20 70       	andi	r18, 0x00	; 0
    2b54:	30 70       	andi	r19, 0x00	; 0
    2b56:	50 70       	andi	r21, 0x00	; 0
    2b58:	80 70       	andi	r24, 0x00	; 0
    2b5a:	a0 70       	andi	r26, 0x00	; 0
    2b5c:	b0 70       	andi	r27, 0x00	; 0
    2b5e:	28 27       	eor	r18, r24
    2b60:	39 27       	eor	r19, r25
    2b62:	4a 27       	eor	r20, r26
    2b64:	5b 27       	eor	r21, r27
    2b66:	29 96       	adiw	r28, 0x09	; 9
    2b68:	ee ad       	ldd	r30, Y+62	; 0x3e
    2b6a:	ff ad       	ldd	r31, Y+63	; 0x3f
    2b6c:	29 97       	sbiw	r28, 0x09	; 9
    2b6e:	80 81       	ld	r24, Z
    2b70:	91 81       	ldd	r25, Z+1	; 0x01
    2b72:	a2 81       	ldd	r26, Z+2	; 0x02
    2b74:	b3 81       	ldd	r27, Z+3	; 0x03
    2b76:	28 27       	eor	r18, r24
    2b78:	39 27       	eor	r19, r25
    2b7a:	4a 27       	eor	r20, r26
    2b7c:	5b 27       	eor	r21, r27
    2b7e:	10 2f       	mov	r17, r16
    2b80:	0f 2d       	mov	r16, r15
    2b82:	fe 2c       	mov	r15, r14
    2b84:	ee 24       	eor	r14, r14
    2b86:	61 2c       	mov	r6, r1
    2b88:	71 2c       	mov	r7, r1
    2b8a:	81 2c       	mov	r8, r1
    2b8c:	9f ef       	ldi	r25, 0xFF	; 255
    2b8e:	99 2e       	mov	r9, r25
    2b90:	e6 20       	and	r14, r6
    2b92:	f7 20       	and	r15, r7
    2b94:	08 21       	and	r16, r8
    2b96:	19 21       	and	r17, r9
    2b98:	2e 25       	eor	r18, r14
    2b9a:	3f 25       	eor	r19, r15
    2b9c:	40 27       	eor	r20, r16
    2b9e:	51 27       	eor	r21, r17
    2ba0:	8b 2d       	mov	r24, r11
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	a0 e0       	ldi	r26, 0x00	; 0
    2ba6:	b0 e0       	ldi	r27, 0x00	; 0
    2ba8:	28 27       	eor	r18, r24
    2baa:	39 27       	eor	r19, r25
    2bac:	4a 27       	eor	r20, r26
    2bae:	5b 27       	eor	r21, r27
    PUTU32(ct     , s0);
    2bb0:	85 2f       	mov	r24, r21
    2bb2:	99 27       	eor	r25, r25
    2bb4:	aa 27       	eor	r26, r26
    2bb6:	bb 27       	eor	r27, r27
    2bb8:	2b 96       	adiw	r28, 0x0b	; 11
    2bba:	ee ad       	ldd	r30, Y+62	; 0x3e
    2bbc:	ff ad       	ldd	r31, Y+63	; 0x3f
    2bbe:	2b 97       	sbiw	r28, 0x0b	; 11
    2bc0:	80 83       	st	Z, r24
    2bc2:	ca 01       	movw	r24, r20
    2bc4:	aa 27       	eor	r26, r26
    2bc6:	bb 27       	eor	r27, r27
    2bc8:	81 83       	std	Z+1, r24	; 0x01
    2bca:	bb 27       	eor	r27, r27
    2bcc:	a5 2f       	mov	r26, r21
    2bce:	94 2f       	mov	r25, r20
    2bd0:	83 2f       	mov	r24, r19
    2bd2:	82 83       	std	Z+2, r24	; 0x02
    2bd4:	23 83       	std	Z+3, r18	; 0x03
    s1 = TE41(t1) ^ TE42(t2) ^ TE43(t3) ^ TE44(t0) ^ rk[1];
    2bd6:	89 a1       	ldd	r24, Y+33	; 0x21
    2bd8:	9a a1       	ldd	r25, Y+34	; 0x22
    2bda:	88 0f       	add	r24, r24
    2bdc:	99 1f       	adc	r25, r25
    2bde:	88 0f       	add	r24, r24
    2be0:	99 1f       	adc	r25, r25
    2be2:	8c 53       	subi	r24, 0x3C	; 60
    2be4:	9f 4f       	sbci	r25, 0xFF	; 255
    2be6:	fc 01       	movw	r30, r24
    2be8:	e5 90       	lpm	r14, Z+
    2bea:	f5 90       	lpm	r15, Z+
    2bec:	05 91       	lpm	r16, Z+
    2bee:	14 91       	lpm	r17, Z+
    2bf0:	8d a1       	ldd	r24, Y+37	; 0x25
    2bf2:	9e a1       	ldd	r25, Y+38	; 0x26
    2bf4:	90 70       	andi	r25, 0x00	; 0
    2bf6:	88 0f       	add	r24, r24
    2bf8:	99 1f       	adc	r25, r25
    2bfa:	88 0f       	add	r24, r24
    2bfc:	99 1f       	adc	r25, r25
    2bfe:	8c 53       	subi	r24, 0x3C	; 60
    2c00:	9f 4f       	sbci	r25, 0xFF	; 255
    2c02:	fc 01       	movw	r30, r24
    2c04:	25 91       	lpm	r18, Z+
    2c06:	35 91       	lpm	r19, Z+
    2c08:	45 91       	lpm	r20, Z+
    2c0a:	54 91       	lpm	r21, Z+
    2c0c:	69 a5       	ldd	r22, Y+41	; 0x29
    2c0e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2c10:	70 70       	andi	r23, 0x00	; 0
    2c12:	66 0f       	add	r22, r22
    2c14:	77 1f       	adc	r23, r23
    2c16:	66 0f       	add	r22, r22
    2c18:	77 1f       	adc	r23, r23
    2c1a:	6c 53       	subi	r22, 0x3C	; 60
    2c1c:	7f 4f       	sbci	r23, 0xFF	; 255
    2c1e:	fb 01       	movw	r30, r22
    2c20:	85 91       	lpm	r24, Z+
    2c22:	95 91       	lpm	r25, Z+
    2c24:	a5 91       	lpm	r26, Z+
    2c26:	b4 91       	lpm	r27, Z+
    2c28:	6d a5       	ldd	r22, Y+45	; 0x2d
    2c2a:	7e a5       	ldd	r23, Y+46	; 0x2e
    2c2c:	66 0f       	add	r22, r22
    2c2e:	77 1f       	adc	r23, r23
    2c30:	66 0f       	add	r22, r22
    2c32:	77 1f       	adc	r23, r23
    2c34:	6c 53       	subi	r22, 0x3C	; 60
    2c36:	7f 4f       	sbci	r23, 0xFF	; 255
    2c38:	fb 01       	movw	r30, r22
    2c3a:	a5 90       	lpm	r10, Z+
    2c3c:	b5 90       	lpm	r11, Z+
    2c3e:	c5 90       	lpm	r12, Z+
    2c40:	d4 90       	lpm	r13, Z+
    2c42:	20 70       	andi	r18, 0x00	; 0
    2c44:	30 70       	andi	r19, 0x00	; 0
    2c46:	50 70       	andi	r21, 0x00	; 0
    2c48:	80 70       	andi	r24, 0x00	; 0
    2c4a:	a0 70       	andi	r26, 0x00	; 0
    2c4c:	b0 70       	andi	r27, 0x00	; 0
    2c4e:	28 27       	eor	r18, r24
    2c50:	39 27       	eor	r19, r25
    2c52:	4a 27       	eor	r20, r26
    2c54:	5b 27       	eor	r21, r27
    2c56:	29 96       	adiw	r28, 0x09	; 9
    2c58:	ee ad       	ldd	r30, Y+62	; 0x3e
    2c5a:	ff ad       	ldd	r31, Y+63	; 0x3f
    2c5c:	29 97       	sbiw	r28, 0x09	; 9
    2c5e:	84 81       	ldd	r24, Z+4	; 0x04
    2c60:	95 81       	ldd	r25, Z+5	; 0x05
    2c62:	a6 81       	ldd	r26, Z+6	; 0x06
    2c64:	b7 81       	ldd	r27, Z+7	; 0x07
    2c66:	28 27       	eor	r18, r24
    2c68:	39 27       	eor	r19, r25
    2c6a:	4a 27       	eor	r20, r26
    2c6c:	5b 27       	eor	r21, r27
    2c6e:	10 2f       	mov	r17, r16
    2c70:	0f 2d       	mov	r16, r15
    2c72:	fe 2c       	mov	r15, r14
    2c74:	ee 24       	eor	r14, r14
    2c76:	e6 20       	and	r14, r6
    2c78:	f7 20       	and	r15, r7
    2c7a:	08 21       	and	r16, r8
    2c7c:	19 21       	and	r17, r9
    2c7e:	2e 25       	eor	r18, r14
    2c80:	3f 25       	eor	r19, r15
    2c82:	40 27       	eor	r20, r16
    2c84:	51 27       	eor	r21, r17
    2c86:	8b 2d       	mov	r24, r11
    2c88:	90 e0       	ldi	r25, 0x00	; 0
    2c8a:	a0 e0       	ldi	r26, 0x00	; 0
    2c8c:	b0 e0       	ldi	r27, 0x00	; 0
    2c8e:	28 27       	eor	r18, r24
    2c90:	39 27       	eor	r19, r25
    2c92:	4a 27       	eor	r20, r26
    2c94:	5b 27       	eor	r21, r27
    PUTU32(ct +  4, s1);
    2c96:	85 2f       	mov	r24, r21
    2c98:	99 27       	eor	r25, r25
    2c9a:	aa 27       	eor	r26, r26
    2c9c:	bb 27       	eor	r27, r27
    2c9e:	2b 96       	adiw	r28, 0x0b	; 11
    2ca0:	ee ad       	ldd	r30, Y+62	; 0x3e
    2ca2:	ff ad       	ldd	r31, Y+63	; 0x3f
    2ca4:	2b 97       	sbiw	r28, 0x0b	; 11
    2ca6:	84 83       	std	Z+4, r24	; 0x04
    2ca8:	ca 01       	movw	r24, r20
    2caa:	aa 27       	eor	r26, r26
    2cac:	bb 27       	eor	r27, r27
    2cae:	85 83       	std	Z+5, r24	; 0x05
    2cb0:	bb 27       	eor	r27, r27
    2cb2:	a5 2f       	mov	r26, r21
    2cb4:	94 2f       	mov	r25, r20
    2cb6:	83 2f       	mov	r24, r19
    2cb8:	86 83       	std	Z+6, r24	; 0x06
    2cba:	27 83       	std	Z+7, r18	; 0x07
    s2 = TE41(t2) ^ TE42(t3) ^ TE43(t0) ^ TE44(t1) ^ rk[2];
    2cbc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cbe:	98 a9       	ldd	r25, Y+48	; 0x30
    2cc0:	88 0f       	add	r24, r24
    2cc2:	99 1f       	adc	r25, r25
    2cc4:	88 0f       	add	r24, r24
    2cc6:	99 1f       	adc	r25, r25
    2cc8:	8c 53       	subi	r24, 0x3C	; 60
    2cca:	9f 4f       	sbci	r25, 0xFF	; 255
    2ccc:	fc 01       	movw	r30, r24
    2cce:	e5 90       	lpm	r14, Z+
    2cd0:	f5 90       	lpm	r15, Z+
    2cd2:	05 91       	lpm	r16, Z+
    2cd4:	14 91       	lpm	r17, Z+
    2cd6:	8b a9       	ldd	r24, Y+51	; 0x33
    2cd8:	9c a9       	ldd	r25, Y+52	; 0x34
    2cda:	90 70       	andi	r25, 0x00	; 0
    2cdc:	88 0f       	add	r24, r24
    2cde:	99 1f       	adc	r25, r25
    2ce0:	88 0f       	add	r24, r24
    2ce2:	99 1f       	adc	r25, r25
    2ce4:	8c 53       	subi	r24, 0x3C	; 60
    2ce6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ce8:	fc 01       	movw	r30, r24
    2cea:	25 91       	lpm	r18, Z+
    2cec:	35 91       	lpm	r19, Z+
    2cee:	45 91       	lpm	r20, Z+
    2cf0:	54 91       	lpm	r21, Z+
    2cf2:	6f a9       	ldd	r22, Y+55	; 0x37
    2cf4:	78 ad       	ldd	r23, Y+56	; 0x38
    2cf6:	70 70       	andi	r23, 0x00	; 0
    2cf8:	66 0f       	add	r22, r22
    2cfa:	77 1f       	adc	r23, r23
    2cfc:	66 0f       	add	r22, r22
    2cfe:	77 1f       	adc	r23, r23
    2d00:	6c 53       	subi	r22, 0x3C	; 60
    2d02:	7f 4f       	sbci	r23, 0xFF	; 255
    2d04:	fb 01       	movw	r30, r22
    2d06:	85 91       	lpm	r24, Z+
    2d08:	95 91       	lpm	r25, Z+
    2d0a:	a5 91       	lpm	r26, Z+
    2d0c:	b4 91       	lpm	r27, Z+
    2d0e:	b2 01       	movw	r22, r4
    2d10:	66 0f       	add	r22, r22
    2d12:	77 1f       	adc	r23, r23
    2d14:	66 0f       	add	r22, r22
    2d16:	77 1f       	adc	r23, r23
    2d18:	6c 53       	subi	r22, 0x3C	; 60
    2d1a:	7f 4f       	sbci	r23, 0xFF	; 255
    2d1c:	fb 01       	movw	r30, r22
    2d1e:	a5 90       	lpm	r10, Z+
    2d20:	b5 90       	lpm	r11, Z+
    2d22:	c5 90       	lpm	r12, Z+
    2d24:	d4 90       	lpm	r13, Z+
    2d26:	20 70       	andi	r18, 0x00	; 0
    2d28:	30 70       	andi	r19, 0x00	; 0
    2d2a:	50 70       	andi	r21, 0x00	; 0
    2d2c:	80 70       	andi	r24, 0x00	; 0
    2d2e:	a0 70       	andi	r26, 0x00	; 0
    2d30:	b0 70       	andi	r27, 0x00	; 0
    2d32:	28 27       	eor	r18, r24
    2d34:	39 27       	eor	r19, r25
    2d36:	4a 27       	eor	r20, r26
    2d38:	5b 27       	eor	r21, r27
    2d3a:	29 96       	adiw	r28, 0x09	; 9
    2d3c:	ee ad       	ldd	r30, Y+62	; 0x3e
    2d3e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2d40:	29 97       	sbiw	r28, 0x09	; 9
    2d42:	80 85       	ldd	r24, Z+8	; 0x08
    2d44:	91 85       	ldd	r25, Z+9	; 0x09
    2d46:	a2 85       	ldd	r26, Z+10	; 0x0a
    2d48:	b3 85       	ldd	r27, Z+11	; 0x0b
    2d4a:	28 27       	eor	r18, r24
    2d4c:	39 27       	eor	r19, r25
    2d4e:	4a 27       	eor	r20, r26
    2d50:	5b 27       	eor	r21, r27
    2d52:	10 2f       	mov	r17, r16
    2d54:	0f 2d       	mov	r16, r15
    2d56:	fe 2c       	mov	r15, r14
    2d58:	ee 24       	eor	r14, r14
    2d5a:	e6 20       	and	r14, r6
    2d5c:	f7 20       	and	r15, r7
    2d5e:	08 21       	and	r16, r8
    2d60:	19 21       	and	r17, r9
    2d62:	2e 25       	eor	r18, r14
    2d64:	3f 25       	eor	r19, r15
    2d66:	40 27       	eor	r20, r16
    2d68:	51 27       	eor	r21, r17
    2d6a:	8b 2d       	mov	r24, r11
    2d6c:	90 e0       	ldi	r25, 0x00	; 0
    2d6e:	a0 e0       	ldi	r26, 0x00	; 0
    2d70:	b0 e0       	ldi	r27, 0x00	; 0
    2d72:	28 27       	eor	r18, r24
    2d74:	39 27       	eor	r19, r25
    2d76:	4a 27       	eor	r20, r26
    2d78:	5b 27       	eor	r21, r27
    PUTU32(ct +  8, s2);
    2d7a:	85 2f       	mov	r24, r21
    2d7c:	99 27       	eor	r25, r25
    2d7e:	aa 27       	eor	r26, r26
    2d80:	bb 27       	eor	r27, r27
    2d82:	2b 96       	adiw	r28, 0x0b	; 11
    2d84:	ee ad       	ldd	r30, Y+62	; 0x3e
    2d86:	ff ad       	ldd	r31, Y+63	; 0x3f
    2d88:	2b 97       	sbiw	r28, 0x0b	; 11
    2d8a:	80 87       	std	Z+8, r24	; 0x08
    2d8c:	ca 01       	movw	r24, r20
    2d8e:	aa 27       	eor	r26, r26
    2d90:	bb 27       	eor	r27, r27
    2d92:	81 87       	std	Z+9, r24	; 0x09
    2d94:	bb 27       	eor	r27, r27
    2d96:	a5 2f       	mov	r26, r21
    2d98:	94 2f       	mov	r25, r20
    2d9a:	83 2f       	mov	r24, r19
    2d9c:	82 87       	std	Z+10, r24	; 0x0a
    2d9e:	23 87       	std	Z+11, r18	; 0x0b
    s3 = TE41(t3) ^ TE42(t0) ^ TE43(t1) ^ TE44(t2) ^ rk[3];
    2da0:	8b ad       	ldd	r24, Y+59	; 0x3b
    2da2:	9c ad       	ldd	r25, Y+60	; 0x3c
    2da4:	88 0f       	add	r24, r24
    2da6:	99 1f       	adc	r25, r25
    2da8:	88 0f       	add	r24, r24
    2daa:	99 1f       	adc	r25, r25
    2dac:	8c 53       	subi	r24, 0x3C	; 60
    2dae:	9f 4f       	sbci	r25, 0xFF	; 255
    2db0:	fc 01       	movw	r30, r24
    2db2:	e5 90       	lpm	r14, Z+
    2db4:	f5 90       	lpm	r15, Z+
    2db6:	05 91       	lpm	r16, Z+
    2db8:	14 91       	lpm	r17, Z+
    2dba:	21 96       	adiw	r28, 0x01	; 1
    2dbc:	8e ad       	ldd	r24, Y+62	; 0x3e
    2dbe:	9f ad       	ldd	r25, Y+63	; 0x3f
    2dc0:	21 97       	sbiw	r28, 0x01	; 1
    2dc2:	90 70       	andi	r25, 0x00	; 0
    2dc4:	88 0f       	add	r24, r24
    2dc6:	99 1f       	adc	r25, r25
    2dc8:	88 0f       	add	r24, r24
    2dca:	99 1f       	adc	r25, r25
    2dcc:	8c 53       	subi	r24, 0x3C	; 60
    2dce:	9f 4f       	sbci	r25, 0xFF	; 255
    2dd0:	fc 01       	movw	r30, r24
    2dd2:	25 91       	lpm	r18, Z+
    2dd4:	35 91       	lpm	r19, Z+
    2dd6:	45 91       	lpm	r20, Z+
    2dd8:	54 91       	lpm	r21, Z+
    2dda:	25 96       	adiw	r28, 0x05	; 5
    2ddc:	6e ad       	ldd	r22, Y+62	; 0x3e
    2dde:	7f ad       	ldd	r23, Y+63	; 0x3f
    2de0:	25 97       	sbiw	r28, 0x05	; 5
    2de2:	70 70       	andi	r23, 0x00	; 0
    2de4:	66 0f       	add	r22, r22
    2de6:	77 1f       	adc	r23, r23
    2de8:	66 0f       	add	r22, r22
    2dea:	77 1f       	adc	r23, r23
    2dec:	6c 53       	subi	r22, 0x3C	; 60
    2dee:	7f 4f       	sbci	r23, 0xFF	; 255
    2df0:	fb 01       	movw	r30, r22
    2df2:	85 91       	lpm	r24, Z+
    2df4:	95 91       	lpm	r25, Z+
    2df6:	a5 91       	lpm	r26, Z+
    2df8:	b4 91       	lpm	r27, Z+
    2dfa:	b1 01       	movw	r22, r2
    2dfc:	66 0f       	add	r22, r22
    2dfe:	77 1f       	adc	r23, r23
    2e00:	66 0f       	add	r22, r22
    2e02:	77 1f       	adc	r23, r23
    2e04:	6c 53       	subi	r22, 0x3C	; 60
    2e06:	7f 4f       	sbci	r23, 0xFF	; 255
    2e08:	fb 01       	movw	r30, r22
    2e0a:	a5 90       	lpm	r10, Z+
    2e0c:	b5 90       	lpm	r11, Z+
    2e0e:	c5 90       	lpm	r12, Z+
    2e10:	d4 90       	lpm	r13, Z+
    2e12:	20 70       	andi	r18, 0x00	; 0
    2e14:	30 70       	andi	r19, 0x00	; 0
    2e16:	50 70       	andi	r21, 0x00	; 0
    2e18:	80 70       	andi	r24, 0x00	; 0
    2e1a:	a0 70       	andi	r26, 0x00	; 0
    2e1c:	b0 70       	andi	r27, 0x00	; 0
    2e1e:	28 27       	eor	r18, r24
    2e20:	39 27       	eor	r19, r25
    2e22:	4a 27       	eor	r20, r26
    2e24:	5b 27       	eor	r21, r27
    2e26:	29 96       	adiw	r28, 0x09	; 9
    2e28:	ee ad       	ldd	r30, Y+62	; 0x3e
    2e2a:	ff ad       	ldd	r31, Y+63	; 0x3f
    2e2c:	29 97       	sbiw	r28, 0x09	; 9
    2e2e:	84 85       	ldd	r24, Z+12	; 0x0c
    2e30:	95 85       	ldd	r25, Z+13	; 0x0d
    2e32:	a6 85       	ldd	r26, Z+14	; 0x0e
    2e34:	b7 85       	ldd	r27, Z+15	; 0x0f
    2e36:	28 27       	eor	r18, r24
    2e38:	39 27       	eor	r19, r25
    2e3a:	4a 27       	eor	r20, r26
    2e3c:	5b 27       	eor	r21, r27
    2e3e:	10 2f       	mov	r17, r16
    2e40:	0f 2d       	mov	r16, r15
    2e42:	fe 2c       	mov	r15, r14
    2e44:	ee 24       	eor	r14, r14
    2e46:	21 2c       	mov	r2, r1
    2e48:	31 2c       	mov	r3, r1
    2e4a:	41 2c       	mov	r4, r1
    2e4c:	8f ef       	ldi	r24, 0xFF	; 255
    2e4e:	58 2e       	mov	r5, r24
    2e50:	e2 20       	and	r14, r2
    2e52:	f3 20       	and	r15, r3
    2e54:	04 21       	and	r16, r4
    2e56:	15 21       	and	r17, r5
    2e58:	2e 25       	eor	r18, r14
    2e5a:	3f 25       	eor	r19, r15
    2e5c:	40 27       	eor	r20, r16
    2e5e:	51 27       	eor	r21, r17
    2e60:	8b 2d       	mov	r24, r11
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	a0 e0       	ldi	r26, 0x00	; 0
    2e66:	b0 e0       	ldi	r27, 0x00	; 0
    2e68:	28 27       	eor	r18, r24
    2e6a:	39 27       	eor	r19, r25
    2e6c:	4a 27       	eor	r20, r26
    2e6e:	5b 27       	eor	r21, r27
    PUTU32(ct + 12, s3);
    2e70:	85 2f       	mov	r24, r21
    2e72:	99 27       	eor	r25, r25
    2e74:	aa 27       	eor	r26, r26
    2e76:	bb 27       	eor	r27, r27
    2e78:	2b 96       	adiw	r28, 0x0b	; 11
    2e7a:	ee ad       	ldd	r30, Y+62	; 0x3e
    2e7c:	ff ad       	ldd	r31, Y+63	; 0x3f
    2e7e:	2b 97       	sbiw	r28, 0x0b	; 11
    2e80:	84 87       	std	Z+12, r24	; 0x0c
    2e82:	ca 01       	movw	r24, r20
    2e84:	aa 27       	eor	r26, r26
    2e86:	bb 27       	eor	r27, r27
    2e88:	85 87       	std	Z+13, r24	; 0x0d
    2e8a:	bb 27       	eor	r27, r27
    2e8c:	a5 2f       	mov	r26, r21
    2e8e:	94 2f       	mov	r25, r20
    2e90:	83 2f       	mov	r24, r19
    2e92:	86 87       	std	Z+14, r24	; 0x0e
    2e94:	27 87       	std	Z+15, r18	; 0x0f

void aes_encrypt(void *ctx, const u8 *plain, u8 *crypt)
{
    u32 *rk = ctx;
    rijndaelEncrypt(ctx, rk[AES_PRIV_NR_POS], plain, crypt);
}
    2e96:	c2 5b       	subi	r28, 0xB2	; 178
    2e98:	df 4f       	sbci	r29, 0xFF	; 255
    2e9a:	0f b6       	in	r0, 0x3f	; 63
    2e9c:	f8 94       	cli
    2e9e:	de bf       	out	0x3e, r29	; 62
    2ea0:	0f be       	out	0x3f, r0	; 63
    2ea2:	cd bf       	out	0x3d, r28	; 61
    2ea4:	cf 91       	pop	r28
    2ea6:	df 91       	pop	r29
    2ea8:	1f 91       	pop	r17
    2eaa:	0f 91       	pop	r16
    2eac:	ff 90       	pop	r15
    2eae:	ef 90       	pop	r14
    2eb0:	df 90       	pop	r13
    2eb2:	cf 90       	pop	r12
    2eb4:	bf 90       	pop	r11
    2eb6:	af 90       	pop	r10
    2eb8:	9f 90       	pop	r9
    2eba:	8f 90       	pop	r8
    2ebc:	7f 90       	pop	r7
    2ebe:	6f 90       	pop	r6
    2ec0:	5f 90       	pop	r5
    2ec2:	4f 90       	pop	r4
    2ec4:	3f 90       	pop	r3
    2ec6:	2f 90       	pop	r2
    2ec8:	08 95       	ret

00002eca <aes_encrypt_deinit>:


void aes_encrypt_deinit(void *ctx)
{
    os_memset(ctx, 0, AES_PRIV_SIZE);
    2eca:	fc 01       	movw	r30, r24
    2ecc:	84 ef       	ldi	r24, 0xF4	; 244
    2ece:	df 01       	movw	r26, r30
    2ed0:	1d 92       	st	X+, r1
    2ed2:	8a 95       	dec	r24
    2ed4:	e9 f7       	brne	.-6      	; 0x2ed0 <aes_encrypt_deinit+0x6>
//    os_free(ctx); // DHD20150614
}
    2ed6:	08 95       	ret

00002ed8 <os_memcmp_const>:

//#include "aes_gcm/includes.h"
#include "includes.h" // DHD20150613

int os_memcmp_const(const void *a, const void *b, size_t len)
{
    2ed8:	0f 93       	push	r16
    2eda:	1f 93       	push	r17
    2edc:	cf 93       	push	r28
    2ede:	df 93       	push	r29
    2ee0:	8c 01       	movw	r16, r24
    2ee2:	eb 01       	movw	r28, r22
    2ee4:	ba 01       	movw	r22, r20
    2ee6:	20 e0       	ldi	r18, 0x00	; 0
    2ee8:	30 e0       	ldi	r19, 0x00	; 0
    2eea:	40 e0       	ldi	r20, 0x00	; 0
    2eec:	0c c0       	rjmp	.+24     	; 0x2f06 <os_memcmp_const+0x2e>
	const u8 *bb = b;
	size_t i;
	u8 res;

	for (res = 0, i = 0; i < len; i++)
		res |= aa[i] ^ bb[i];
    2eee:	fe 01       	movw	r30, r28
    2ef0:	e2 0f       	add	r30, r18
    2ef2:	f3 1f       	adc	r31, r19
    2ef4:	d8 01       	movw	r26, r16
    2ef6:	a2 0f       	add	r26, r18
    2ef8:	b3 1f       	adc	r27, r19
    2efa:	80 81       	ld	r24, Z
    2efc:	9c 91       	ld	r25, X
    2efe:	89 27       	eor	r24, r25
    2f00:	48 2b       	or	r20, r24
	const u8 *aa = a;
	const u8 *bb = b;
	size_t i;
	u8 res;

	for (res = 0, i = 0; i < len; i++)
    2f02:	2f 5f       	subi	r18, 0xFF	; 255
    2f04:	3f 4f       	sbci	r19, 0xFF	; 255
    2f06:	26 17       	cp	r18, r22
    2f08:	37 07       	cpc	r19, r23
    2f0a:	88 f3       	brcs	.-30     	; 0x2eee <os_memcmp_const+0x16>
		res |= aa[i] ^ bb[i];

	return res;
}
    2f0c:	84 2f       	mov	r24, r20
    2f0e:	90 e0       	ldi	r25, 0x00	; 0
    2f10:	df 91       	pop	r29
    2f12:	cf 91       	pop	r28
    2f14:	1f 91       	pop	r17
    2f16:	0f 91       	pop	r16
    2f18:	08 95       	ret

00002f1a <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    2f1a:	1f 92       	push	r1
    2f1c:	0f 92       	push	r0
    2f1e:	0f b6       	in	r0, 0x3f	; 63
    2f20:	0f 92       	push	r0
    2f22:	11 24       	eor	r1, r1
    2f24:	2f 93       	push	r18
    2f26:	3f 93       	push	r19
    2f28:	8f 93       	push	r24
    2f2a:	9f 93       	push	r25
    2f2c:	af 93       	push	r26
    2f2e:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    2f30:	80 91 2c 01 	lds	r24, 0x012C
    2f34:	90 91 2d 01 	lds	r25, 0x012D
    2f38:	a0 91 2e 01 	lds	r26, 0x012E
    2f3c:	b0 91 2f 01 	lds	r27, 0x012F
	unsigned char f = timer0_fract;
    2f40:	30 91 30 01 	lds	r19, 0x0130

	m += MILLIS_INC;
    2f44:	01 96       	adiw	r24, 0x01	; 1
    2f46:	a1 1d       	adc	r26, r1
    2f48:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    2f4a:	23 2f       	mov	r18, r19
    2f4c:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    2f4e:	2d 37       	cpi	r18, 0x7D	; 125
    2f50:	20 f0       	brcs	.+8      	; 0x2f5a <__vector_16+0x40>
		f -= FRACT_MAX;
    2f52:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    2f54:	01 96       	adiw	r24, 0x01	; 1
    2f56:	a1 1d       	adc	r26, r1
    2f58:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    2f5a:	20 93 30 01 	sts	0x0130, r18
	timer0_millis = m;
    2f5e:	80 93 2c 01 	sts	0x012C, r24
    2f62:	90 93 2d 01 	sts	0x012D, r25
    2f66:	a0 93 2e 01 	sts	0x012E, r26
    2f6a:	b0 93 2f 01 	sts	0x012F, r27
	timer0_overflow_count++;
    2f6e:	80 91 28 01 	lds	r24, 0x0128
    2f72:	90 91 29 01 	lds	r25, 0x0129
    2f76:	a0 91 2a 01 	lds	r26, 0x012A
    2f7a:	b0 91 2b 01 	lds	r27, 0x012B
    2f7e:	01 96       	adiw	r24, 0x01	; 1
    2f80:	a1 1d       	adc	r26, r1
    2f82:	b1 1d       	adc	r27, r1
    2f84:	80 93 28 01 	sts	0x0128, r24
    2f88:	90 93 29 01 	sts	0x0129, r25
    2f8c:	a0 93 2a 01 	sts	0x012A, r26
    2f90:	b0 93 2b 01 	sts	0x012B, r27
}
    2f94:	bf 91       	pop	r27
    2f96:	af 91       	pop	r26
    2f98:	9f 91       	pop	r25
    2f9a:	8f 91       	pop	r24
    2f9c:	3f 91       	pop	r19
    2f9e:	2f 91       	pop	r18
    2fa0:	0f 90       	pop	r0
    2fa2:	0f be       	out	0x3f, r0	; 63
    2fa4:	0f 90       	pop	r0
    2fa6:	1f 90       	pop	r1
    2fa8:	18 95       	reti

00002faa <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
    2faa:	9b 01       	movw	r18, r22
    2fac:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    2fae:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
    2fb0:	f8 94       	cli
	m = timer0_overflow_count;
    2fb2:	80 91 28 01 	lds	r24, 0x0128
    2fb6:	90 91 29 01 	lds	r25, 0x0129
    2fba:	a0 91 2a 01 	lds	r26, 0x012A
    2fbe:	b0 91 2b 01 	lds	r27, 0x012B
#if defined(TCNT0)
	t = TCNT0;
    2fc2:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    2fc4:	a8 9b       	sbis	0x15, 0	; 21
    2fc6:	05 c0       	rjmp	.+10     	; 0x2fd2 <delay+0x28>
    2fc8:	6f 3f       	cpi	r22, 0xFF	; 255
    2fca:	19 f0       	breq	.+6      	; 0x2fd2 <delay+0x28>
		m++;
    2fcc:	01 96       	adiw	r24, 0x01	; 1
    2fce:	a1 1d       	adc	r26, r1
    2fd0:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2fd2:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
    2fd4:	ba 2f       	mov	r27, r26
    2fd6:	a9 2f       	mov	r26, r25
    2fd8:	98 2f       	mov	r25, r24
    2fda:	88 27       	eor	r24, r24
    2fdc:	86 0f       	add	r24, r22
    2fde:	91 1d       	adc	r25, r1
    2fe0:	a1 1d       	adc	r26, r1
    2fe2:	b1 1d       	adc	r27, r1
    2fe4:	62 e0       	ldi	r22, 0x02	; 2
    2fe6:	88 0f       	add	r24, r24
    2fe8:	99 1f       	adc	r25, r25
    2fea:	aa 1f       	adc	r26, r26
    2fec:	bb 1f       	adc	r27, r27
    2fee:	6a 95       	dec	r22
    2ff0:	d1 f7       	brne	.-12     	; 0x2fe6 <delay+0x3c>
    2ff2:	bc 01       	movw	r22, r24
    2ff4:	2d c0       	rjmp	.+90     	; 0x3050 <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    2ff6:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
    2ff8:	f8 94       	cli
	m = timer0_overflow_count;
    2ffa:	80 91 28 01 	lds	r24, 0x0128
    2ffe:	90 91 29 01 	lds	r25, 0x0129
    3002:	a0 91 2a 01 	lds	r26, 0x012A
    3006:	b0 91 2b 01 	lds	r27, 0x012B
#if defined(TCNT0)
	t = TCNT0;
    300a:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    300c:	a8 9b       	sbis	0x15, 0	; 21
    300e:	05 c0       	rjmp	.+10     	; 0x301a <delay+0x70>
    3010:	ef 3f       	cpi	r30, 0xFF	; 255
    3012:	19 f0       	breq	.+6      	; 0x301a <delay+0x70>
		m++;
    3014:	01 96       	adiw	r24, 0x01	; 1
    3016:	a1 1d       	adc	r26, r1
    3018:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    301a:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    301c:	ba 2f       	mov	r27, r26
    301e:	a9 2f       	mov	r26, r25
    3020:	98 2f       	mov	r25, r24
    3022:	88 27       	eor	r24, r24
    3024:	8e 0f       	add	r24, r30
    3026:	91 1d       	adc	r25, r1
    3028:	a1 1d       	adc	r26, r1
    302a:	b1 1d       	adc	r27, r1
    302c:	e2 e0       	ldi	r30, 0x02	; 2
    302e:	88 0f       	add	r24, r24
    3030:	99 1f       	adc	r25, r25
    3032:	aa 1f       	adc	r26, r26
    3034:	bb 1f       	adc	r27, r27
    3036:	ea 95       	dec	r30
    3038:	d1 f7       	brne	.-12     	; 0x302e <delay+0x84>
    303a:	86 1b       	sub	r24, r22
    303c:	97 0b       	sbc	r25, r23
    303e:	88 5e       	subi	r24, 0xE8	; 232
    3040:	93 40       	sbci	r25, 0x03	; 3
    3042:	c8 f2       	brcs	.-78     	; 0x2ff6 <delay+0x4c>
			ms--;
    3044:	21 50       	subi	r18, 0x01	; 1
    3046:	30 40       	sbci	r19, 0x00	; 0
    3048:	40 40       	sbci	r20, 0x00	; 0
    304a:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
    304c:	68 51       	subi	r22, 0x18	; 24
    304e:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    3050:	21 15       	cp	r18, r1
    3052:	31 05       	cpc	r19, r1
    3054:	41 05       	cpc	r20, r1
    3056:	51 05       	cpc	r21, r1
    3058:	71 f6       	brne	.-100    	; 0x2ff6 <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    305a:	08 95       	ret

0000305c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    305c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    305e:	84 b5       	in	r24, 0x24	; 36
    3060:	82 60       	ori	r24, 0x02	; 2
    3062:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    3064:	84 b5       	in	r24, 0x24	; 36
    3066:	81 60       	ori	r24, 0x01	; 1
    3068:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    306a:	85 b5       	in	r24, 0x25	; 37
    306c:	82 60       	ori	r24, 0x02	; 2
    306e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    3070:	85 b5       	in	r24, 0x25	; 37
    3072:	81 60       	ori	r24, 0x01	; 1
    3074:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    3076:	ee e6       	ldi	r30, 0x6E	; 110
    3078:	f0 e0       	ldi	r31, 0x00	; 0
    307a:	80 81       	ld	r24, Z
    307c:	81 60       	ori	r24, 0x01	; 1
    307e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    3080:	e1 e8       	ldi	r30, 0x81	; 129
    3082:	f0 e0       	ldi	r31, 0x00	; 0
    3084:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    3086:	80 81       	ld	r24, Z
    3088:	82 60       	ori	r24, 0x02	; 2
    308a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    308c:	80 81       	ld	r24, Z
    308e:	81 60       	ori	r24, 0x01	; 1
    3090:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    3092:	e0 e8       	ldi	r30, 0x80	; 128
    3094:	f0 e0       	ldi	r31, 0x00	; 0
    3096:	80 81       	ld	r24, Z
    3098:	81 60       	ori	r24, 0x01	; 1
    309a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    309c:	e1 eb       	ldi	r30, 0xB1	; 177
    309e:	f0 e0       	ldi	r31, 0x00	; 0
    30a0:	80 81       	ld	r24, Z
    30a2:	84 60       	ori	r24, 0x04	; 4
    30a4:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    30a6:	e0 eb       	ldi	r30, 0xB0	; 176
    30a8:	f0 e0       	ldi	r31, 0x00	; 0
    30aa:	80 81       	ld	r24, Z
    30ac:	81 60       	ori	r24, 0x01	; 1
    30ae:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    30b0:	ea e7       	ldi	r30, 0x7A	; 122
    30b2:	f0 e0       	ldi	r31, 0x00	; 0
    30b4:	80 81       	ld	r24, Z
    30b6:	84 60       	ori	r24, 0x04	; 4
    30b8:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    30ba:	80 81       	ld	r24, Z
    30bc:	82 60       	ori	r24, 0x02	; 2
    30be:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    30c0:	80 81       	ld	r24, Z
    30c2:	81 60       	ori	r24, 0x01	; 1
    30c4:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    30c6:	80 81       	ld	r24, Z
    30c8:	80 68       	ori	r24, 0x80	; 128
    30ca:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    30cc:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    30d0:	08 95       	ret

000030d2 <serialEvent()>:
#if !defined(USART_RX_vect) && !defined(USART0_RX_vect) && \
    !defined(USART_RXC_vect)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    30d2:	08 95       	ret

000030d4 <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  ISR(USART_RX_vect)
    30d4:	1f 92       	push	r1
    30d6:	0f 92       	push	r0
    30d8:	0f b6       	in	r0, 0x3f	; 63
    30da:	0f 92       	push	r0
    30dc:	11 24       	eor	r1, r1
    30de:	2f 93       	push	r18
    30e0:	3f 93       	push	r19
    30e2:	4f 93       	push	r20
    30e4:	8f 93       	push	r24
    30e6:	9f 93       	push	r25
    30e8:	ef 93       	push	r30
    30ea:	ff 93       	push	r31
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#endif
  {
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
    30ec:	80 91 c0 00 	lds	r24, 0x00C0
    30f0:	82 fd       	sbrc	r24, 2
    30f2:	1d c0       	rjmp	.+58     	; 0x312e <__vector_18+0x5a>
      unsigned char c = UDR0;
    30f4:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    30f8:	20 91 71 01 	lds	r18, 0x0171
    30fc:	30 91 72 01 	lds	r19, 0x0172

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    3100:	2f 5f       	subi	r18, 0xFF	; 255
    3102:	3f 4f       	sbci	r19, 0xFF	; 255
    3104:	2f 73       	andi	r18, 0x3F	; 63
    3106:	30 70       	andi	r19, 0x00	; 0
    3108:	80 91 73 01 	lds	r24, 0x0173
    310c:	90 91 74 01 	lds	r25, 0x0174
    3110:	28 17       	cp	r18, r24
    3112:	39 07       	cpc	r19, r25
    3114:	71 f0       	breq	.+28     	; 0x3132 <__vector_18+0x5e>
    buffer->buffer[buffer->head] = c;
    3116:	e0 91 71 01 	lds	r30, 0x0171
    311a:	f0 91 72 01 	lds	r31, 0x0172
    311e:	ef 5c       	subi	r30, 0xCF	; 207
    3120:	fe 4f       	sbci	r31, 0xFE	; 254
    3122:	40 83       	st	Z, r20
    buffer->head = i;
    3124:	30 93 72 01 	sts	0x0172, r19
    3128:	20 93 71 01 	sts	0x0171, r18
    312c:	02 c0       	rjmp	.+4      	; 0x3132 <__vector_18+0x5e>
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
      unsigned char c = UDR0;
      store_char(c, &rx_buffer);
    } else {
      unsigned char c = UDR0;
    312e:	80 91 c6 00 	lds	r24, 0x00C6
      unsigned char c = UDR;
    };
  #else
    #error UDR not defined
  #endif
  }
    3132:	ff 91       	pop	r31
    3134:	ef 91       	pop	r30
    3136:	9f 91       	pop	r25
    3138:	8f 91       	pop	r24
    313a:	4f 91       	pop	r20
    313c:	3f 91       	pop	r19
    313e:	2f 91       	pop	r18
    3140:	0f 90       	pop	r0
    3142:	0f be       	out	0x3f, r0	; 63
    3144:	0f 90       	pop	r0
    3146:	1f 90       	pop	r1
    3148:	18 95       	reti

0000314a <serialEventRun()>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    314a:	e0 91 c5 01 	lds	r30, 0x01C5
    314e:	f0 91 c6 01 	lds	r31, 0x01C6
    3152:	e0 5c       	subi	r30, 0xC0	; 192
    3154:	ff 4f       	sbci	r31, 0xFF	; 255
    3156:	81 91       	ld	r24, Z+
    3158:	91 91       	ld	r25, Z+
    315a:	20 81       	ld	r18, Z
    315c:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    315e:	82 1b       	sub	r24, r18
    3160:	93 0b       	sbc	r25, r19
    3162:	8f 73       	andi	r24, 0x3F	; 63
    3164:	90 70       	andi	r25, 0x00	; 0
    3166:	89 2b       	or	r24, r25
    3168:	11 f0       	breq	.+4      	; 0x316e <serialEventRun()+0x24>
    316a:	0e 94 69 18 	call	0x30d2	; 0x30d2 <serialEvent()>
    316e:	08 95       	ret

00003170 <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
    3170:	1f 92       	push	r1
    3172:	0f 92       	push	r0
    3174:	0f b6       	in	r0, 0x3f	; 63
    3176:	0f 92       	push	r0
    3178:	11 24       	eor	r1, r1
    317a:	2f 93       	push	r18
    317c:	3f 93       	push	r19
    317e:	8f 93       	push	r24
    3180:	9f 93       	push	r25
    3182:	ef 93       	push	r30
    3184:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    3186:	20 91 b5 01 	lds	r18, 0x01B5
    318a:	30 91 b6 01 	lds	r19, 0x01B6
    318e:	80 91 b7 01 	lds	r24, 0x01B7
    3192:	90 91 b8 01 	lds	r25, 0x01B8
    3196:	28 17       	cp	r18, r24
    3198:	39 07       	cpc	r19, r25
    319a:	31 f4       	brne	.+12     	; 0x31a8 <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    319c:	80 91 c1 00 	lds	r24, 0x00C1
    31a0:	8f 7d       	andi	r24, 0xDF	; 223
    31a2:	80 93 c1 00 	sts	0x00C1, r24
    31a6:	14 c0       	rjmp	.+40     	; 0x31d0 <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    31a8:	e0 91 b7 01 	lds	r30, 0x01B7
    31ac:	f0 91 b8 01 	lds	r31, 0x01B8
    31b0:	eb 58       	subi	r30, 0x8B	; 139
    31b2:	fe 4f       	sbci	r31, 0xFE	; 254
    31b4:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    31b6:	80 91 b7 01 	lds	r24, 0x01B7
    31ba:	90 91 b8 01 	lds	r25, 0x01B8
    31be:	01 96       	adiw	r24, 0x01	; 1
    31c0:	8f 73       	andi	r24, 0x3F	; 63
    31c2:	90 70       	andi	r25, 0x00	; 0
    31c4:	90 93 b8 01 	sts	0x01B8, r25
    31c8:	80 93 b7 01 	sts	0x01B7, r24
	
  #if defined(UDR0)
    UDR0 = c;
    31cc:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    31d0:	ff 91       	pop	r31
    31d2:	ef 91       	pop	r30
    31d4:	9f 91       	pop	r25
    31d6:	8f 91       	pop	r24
    31d8:	3f 91       	pop	r19
    31da:	2f 91       	pop	r18
    31dc:	0f 90       	pop	r0
    31de:	0f be       	out	0x3f, r0	; 63
    31e0:	0f 90       	pop	r0
    31e2:	1f 90       	pop	r1
    31e4:	18 95       	reti

000031e6 <HardwareSerial::begin(unsigned long)>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    31e6:	af 92       	push	r10
    31e8:	bf 92       	push	r11
    31ea:	df 92       	push	r13
    31ec:	ef 92       	push	r14
    31ee:	ff 92       	push	r15
    31f0:	0f 93       	push	r16
    31f2:	1f 93       	push	r17
    31f4:	cf 93       	push	r28
    31f6:	df 93       	push	r29
    31f8:	ec 01       	movw	r28, r24
    31fa:	7a 01       	movw	r14, r20
    31fc:	8b 01       	movw	r16, r22
    31fe:	dd 24       	eor	r13, r13
    3200:	40 30       	cpi	r20, 0x00	; 0
    3202:	81 ee       	ldi	r24, 0xE1	; 225
    3204:	58 07       	cpc	r21, r24
    3206:	80 e0       	ldi	r24, 0x00	; 0
    3208:	68 07       	cpc	r22, r24
    320a:	80 e0       	ldi	r24, 0x00	; 0
    320c:	78 07       	cpc	r23, r24
    320e:	11 f0       	breq	.+4      	; 0x3214 <HardwareSerial::begin(unsigned long)+0x2e>
    3210:	dd 24       	eor	r13, r13
    3212:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    3214:	91 e0       	ldi	r25, 0x01	; 1
    3216:	a9 2e       	mov	r10, r25
    3218:	b1 2c       	mov	r11, r1
    321a:	ec 89       	ldd	r30, Y+20	; 0x14
    321c:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
    321e:	dd 20       	and	r13, r13
    3220:	69 f0       	breq	.+26     	; 0x323c <HardwareSerial::begin(unsigned long)+0x56>
    *_ucsra = 1 << _u2x;
    3222:	c5 01       	movw	r24, r10
    3224:	08 a0       	ldd	r0, Y+32	; 0x20
    3226:	02 c0       	rjmp	.+4      	; 0x322c <HardwareSerial::begin(unsigned long)+0x46>
    3228:	88 0f       	add	r24, r24
    322a:	99 1f       	adc	r25, r25
    322c:	0a 94       	dec	r0
    322e:	e2 f7       	brpl	.-8      	; 0x3228 <HardwareSerial::begin(unsigned long)+0x42>
    3230:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    3232:	60 e0       	ldi	r22, 0x00	; 0
    3234:	79 e0       	ldi	r23, 0x09	; 9
    3236:	8d e3       	ldi	r24, 0x3D	; 61
    3238:	90 e0       	ldi	r25, 0x00	; 0
    323a:	05 c0       	rjmp	.+10     	; 0x3246 <HardwareSerial::begin(unsigned long)+0x60>
  } else {
    *_ucsra = 0;
    323c:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    323e:	60 e8       	ldi	r22, 0x80	; 128
    3240:	74 e8       	ldi	r23, 0x84	; 132
    3242:	8e e1       	ldi	r24, 0x1E	; 30
    3244:	90 e0       	ldi	r25, 0x00	; 0
    3246:	a8 01       	movw	r20, r16
    3248:	97 01       	movw	r18, r14
    324a:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <__udivmodsi4>
    324e:	21 50       	subi	r18, 0x01	; 1
    3250:	30 40       	sbci	r19, 0x00	; 0
    3252:	40 40       	sbci	r20, 0x00	; 0
    3254:	50 40       	sbci	r21, 0x00	; 0
    3256:	56 95       	lsr	r21
    3258:	47 95       	ror	r20
    325a:	37 95       	ror	r19
    325c:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    325e:	80 e1       	ldi	r24, 0x10	; 16
    3260:	20 30       	cpi	r18, 0x00	; 0
    3262:	38 07       	cpc	r19, r24
    3264:	20 f0       	brcs	.+8      	; 0x326e <HardwareSerial::begin(unsigned long)+0x88>
    3266:	dd 20       	and	r13, r13
    3268:	11 f0       	breq	.+4      	; 0x326e <HardwareSerial::begin(unsigned long)+0x88>
    326a:	dd 24       	eor	r13, r13
    326c:	d6 cf       	rjmp	.-84     	; 0x321a <HardwareSerial::begin(unsigned long)+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    326e:	e8 89       	ldd	r30, Y+16	; 0x10
    3270:	f9 89       	ldd	r31, Y+17	; 0x11
    3272:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    3274:	ea 89       	ldd	r30, Y+18	; 0x12
    3276:	fb 89       	ldd	r31, Y+19	; 0x13
    3278:	20 83       	st	Z, r18

  transmitting = false;
    327a:	19 a2       	std	Y+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
    327c:	ee 89       	ldd	r30, Y+22	; 0x16
    327e:	ff 89       	ldd	r31, Y+23	; 0x17
    3280:	40 81       	ld	r20, Z
    3282:	21 e0       	ldi	r18, 0x01	; 1
    3284:	30 e0       	ldi	r19, 0x00	; 0
    3286:	c9 01       	movw	r24, r18
    3288:	0c 8c       	ldd	r0, Y+28	; 0x1c
    328a:	02 c0       	rjmp	.+4      	; 0x3290 <HardwareSerial::begin(unsigned long)+0xaa>
    328c:	88 0f       	add	r24, r24
    328e:	99 1f       	adc	r25, r25
    3290:	0a 94       	dec	r0
    3292:	e2 f7       	brpl	.-8      	; 0x328c <HardwareSerial::begin(unsigned long)+0xa6>
    3294:	48 2b       	or	r20, r24
    3296:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    3298:	ee 89       	ldd	r30, Y+22	; 0x16
    329a:	ff 89       	ldd	r31, Y+23	; 0x17
    329c:	40 81       	ld	r20, Z
    329e:	c9 01       	movw	r24, r18
    32a0:	0d 8c       	ldd	r0, Y+29	; 0x1d
    32a2:	02 c0       	rjmp	.+4      	; 0x32a8 <HardwareSerial::begin(unsigned long)+0xc2>
    32a4:	88 0f       	add	r24, r24
    32a6:	99 1f       	adc	r25, r25
    32a8:	0a 94       	dec	r0
    32aa:	e2 f7       	brpl	.-8      	; 0x32a4 <HardwareSerial::begin(unsigned long)+0xbe>
    32ac:	48 2b       	or	r20, r24
    32ae:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    32b0:	ee 89       	ldd	r30, Y+22	; 0x16
    32b2:	ff 89       	ldd	r31, Y+23	; 0x17
    32b4:	40 81       	ld	r20, Z
    32b6:	c9 01       	movw	r24, r18
    32b8:	0e 8c       	ldd	r0, Y+30	; 0x1e
    32ba:	02 c0       	rjmp	.+4      	; 0x32c0 <HardwareSerial::begin(unsigned long)+0xda>
    32bc:	88 0f       	add	r24, r24
    32be:	99 1f       	adc	r25, r25
    32c0:	0a 94       	dec	r0
    32c2:	e2 f7       	brpl	.-8      	; 0x32bc <HardwareSerial::begin(unsigned long)+0xd6>
    32c4:	48 2b       	or	r20, r24
    32c6:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    32c8:	ee 89       	ldd	r30, Y+22	; 0x16
    32ca:	ff 89       	ldd	r31, Y+23	; 0x17
    32cc:	80 81       	ld	r24, Z
    32ce:	0f 8c       	ldd	r0, Y+31	; 0x1f
    32d0:	02 c0       	rjmp	.+4      	; 0x32d6 <HardwareSerial::begin(unsigned long)+0xf0>
    32d2:	22 0f       	add	r18, r18
    32d4:	33 1f       	adc	r19, r19
    32d6:	0a 94       	dec	r0
    32d8:	e2 f7       	brpl	.-8      	; 0x32d2 <HardwareSerial::begin(unsigned long)+0xec>
    32da:	20 95       	com	r18
    32dc:	28 23       	and	r18, r24
    32de:	20 83       	st	Z, r18
}
    32e0:	df 91       	pop	r29
    32e2:	cf 91       	pop	r28
    32e4:	1f 91       	pop	r17
    32e6:	0f 91       	pop	r16
    32e8:	ff 90       	pop	r15
    32ea:	ef 90       	pop	r14
    32ec:	df 90       	pop	r13
    32ee:	bf 90       	pop	r11
    32f0:	af 90       	pop	r10
    32f2:	08 95       	ret

000032f4 <HardwareSerial::available()>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    32f4:	dc 01       	movw	r26, r24
    32f6:	1c 96       	adiw	r26, 0x0c	; 12
    32f8:	ed 91       	ld	r30, X+
    32fa:	fc 91       	ld	r31, X
    32fc:	1d 97       	sbiw	r26, 0x0d	; 13
    32fe:	e0 5c       	subi	r30, 0xC0	; 192
    3300:	ff 4f       	sbci	r31, 0xFF	; 255
    3302:	21 91       	ld	r18, Z+
    3304:	31 91       	ld	r19, Z+
    3306:	80 81       	ld	r24, Z
    3308:	91 81       	ldd	r25, Z+1	; 0x01
    330a:	28 1b       	sub	r18, r24
    330c:	39 0b       	sbc	r19, r25
    330e:	2f 73       	andi	r18, 0x3F	; 63
    3310:	30 70       	andi	r19, 0x00	; 0
}
    3312:	c9 01       	movw	r24, r18
    3314:	08 95       	ret

00003316 <HardwareSerial::peek()>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    3316:	dc 01       	movw	r26, r24
    3318:	1c 96       	adiw	r26, 0x0c	; 12
    331a:	ed 91       	ld	r30, X+
    331c:	fc 91       	ld	r31, X
    331e:	1d 97       	sbiw	r26, 0x0d	; 13
    3320:	e0 5c       	subi	r30, 0xC0	; 192
    3322:	ff 4f       	sbci	r31, 0xFF	; 255
    3324:	20 81       	ld	r18, Z
    3326:	31 81       	ldd	r19, Z+1	; 0x01
    3328:	e0 54       	subi	r30, 0x40	; 64
    332a:	f0 40       	sbci	r31, 0x00	; 0
    332c:	df 01       	movw	r26, r30
    332e:	ae 5b       	subi	r26, 0xBE	; 190
    3330:	bf 4f       	sbci	r27, 0xFF	; 255
    3332:	8d 91       	ld	r24, X+
    3334:	9c 91       	ld	r25, X
    3336:	11 97       	sbiw	r26, 0x01	; 1
    3338:	28 17       	cp	r18, r24
    333a:	39 07       	cpc	r19, r25
    333c:	19 f4       	brne	.+6      	; 0x3344 <HardwareSerial::peek()+0x2e>
    333e:	2f ef       	ldi	r18, 0xFF	; 255
    3340:	3f ef       	ldi	r19, 0xFF	; 255
    3342:	07 c0       	rjmp	.+14     	; 0x3352 <HardwareSerial::peek()+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    3344:	8d 91       	ld	r24, X+
    3346:	9c 91       	ld	r25, X
    3348:	e8 0f       	add	r30, r24
    334a:	f9 1f       	adc	r31, r25
    334c:	80 81       	ld	r24, Z
    334e:	28 2f       	mov	r18, r24
    3350:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    3352:	c9 01       	movw	r24, r18
    3354:	08 95       	ret

00003356 <HardwareSerial::read()>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    3356:	dc 01       	movw	r26, r24
    3358:	1c 96       	adiw	r26, 0x0c	; 12
    335a:	ed 91       	ld	r30, X+
    335c:	fc 91       	ld	r31, X
    335e:	1d 97       	sbiw	r26, 0x0d	; 13
    3360:	e0 5c       	subi	r30, 0xC0	; 192
    3362:	ff 4f       	sbci	r31, 0xFF	; 255
    3364:	20 81       	ld	r18, Z
    3366:	31 81       	ldd	r19, Z+1	; 0x01
    3368:	e0 54       	subi	r30, 0x40	; 64
    336a:	f0 40       	sbci	r31, 0x00	; 0
    336c:	df 01       	movw	r26, r30
    336e:	ae 5b       	subi	r26, 0xBE	; 190
    3370:	bf 4f       	sbci	r27, 0xFF	; 255
    3372:	8d 91       	ld	r24, X+
    3374:	9c 91       	ld	r25, X
    3376:	11 97       	sbiw	r26, 0x01	; 1
    3378:	28 17       	cp	r18, r24
    337a:	39 07       	cpc	r19, r25
    337c:	19 f4       	brne	.+6      	; 0x3384 <HardwareSerial::read()+0x2e>
    337e:	2f ef       	ldi	r18, 0xFF	; 255
    3380:	3f ef       	ldi	r19, 0xFF	; 255
    3382:	10 c0       	rjmp	.+32     	; 0x33a4 <HardwareSerial::read()+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    3384:	8d 91       	ld	r24, X+
    3386:	9c 91       	ld	r25, X
    3388:	11 97       	sbiw	r26, 0x01	; 1
    338a:	e8 0f       	add	r30, r24
    338c:	f9 1f       	adc	r31, r25
    338e:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    3390:	8d 91       	ld	r24, X+
    3392:	9c 91       	ld	r25, X
    3394:	11 97       	sbiw	r26, 0x01	; 1
    3396:	01 96       	adiw	r24, 0x01	; 1
    3398:	8f 73       	andi	r24, 0x3F	; 63
    339a:	90 70       	andi	r25, 0x00	; 0
    339c:	11 96       	adiw	r26, 0x01	; 1
    339e:	9c 93       	st	X, r25
    33a0:	8e 93       	st	-X, r24
    return c;
    33a2:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    33a4:	c9 01       	movw	r24, r18
    33a6:	08 95       	ret

000033a8 <HardwareSerial::flush()>:

void HardwareSerial::flush()
    33a8:	dc 01       	movw	r26, r24
{
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
    33aa:	91 96       	adiw	r26, 0x21	; 33
    33ac:	8c 91       	ld	r24, X
    33ae:	91 97       	sbiw	r26, 0x21	; 33
    33b0:	88 23       	and	r24, r24
    33b2:	39 f0       	breq	.+14     	; 0x33c2 <HardwareSerial::flush()+0x1a>
    33b4:	54 96       	adiw	r26, 0x14	; 20
    33b6:	ed 91       	ld	r30, X+
    33b8:	fc 91       	ld	r31, X
    33ba:	55 97       	sbiw	r26, 0x15	; 21
    33bc:	80 81       	ld	r24, Z
    33be:	86 ff       	sbrs	r24, 6
    33c0:	f9 cf       	rjmp	.-14     	; 0x33b4 <HardwareSerial::flush()+0xc>
  transmitting = false;
    33c2:	91 96       	adiw	r26, 0x21	; 33
    33c4:	1c 92       	st	X, r1
}
    33c6:	08 95       	ret

000033c8 <HardwareSerial::write(unsigned char)>:

size_t HardwareSerial::write(uint8_t c)
    33c8:	cf 93       	push	r28
    33ca:	df 93       	push	r29
    33cc:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    33ce:	ee 85       	ldd	r30, Y+14	; 0x0e
    33d0:	ff 85       	ldd	r31, Y+15	; 0x0f
    33d2:	e0 5c       	subi	r30, 0xC0	; 192
    33d4:	ff 4f       	sbci	r31, 0xFF	; 255
    33d6:	20 81       	ld	r18, Z
    33d8:	31 81       	ldd	r19, Z+1	; 0x01
    33da:	e0 54       	subi	r30, 0x40	; 64
    33dc:	f0 40       	sbci	r31, 0x00	; 0
    33de:	2f 5f       	subi	r18, 0xFF	; 255
    33e0:	3f 4f       	sbci	r19, 0xFF	; 255
    33e2:	2f 73       	andi	r18, 0x3F	; 63
    33e4:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    33e6:	df 01       	movw	r26, r30
    33e8:	ae 5b       	subi	r26, 0xBE	; 190
    33ea:	bf 4f       	sbci	r27, 0xFF	; 255
    33ec:	8d 91       	ld	r24, X+
    33ee:	9c 91       	ld	r25, X
    33f0:	11 97       	sbiw	r26, 0x01	; 1
    33f2:	28 17       	cp	r18, r24
    33f4:	39 07       	cpc	r19, r25
    33f6:	d1 f3       	breq	.-12     	; 0x33ec <HardwareSerial::write(unsigned char)+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    33f8:	e0 5c       	subi	r30, 0xC0	; 192
    33fa:	ff 4f       	sbci	r31, 0xFF	; 255
    33fc:	80 81       	ld	r24, Z
    33fe:	91 81       	ldd	r25, Z+1	; 0x01
    3400:	e0 54       	subi	r30, 0x40	; 64
    3402:	f0 40       	sbci	r31, 0x00	; 0
    3404:	e8 0f       	add	r30, r24
    3406:	f9 1f       	adc	r31, r25
    3408:	60 83       	st	Z, r22
  _tx_buffer->head = i;
    340a:	ee 85       	ldd	r30, Y+14	; 0x0e
    340c:	ff 85       	ldd	r31, Y+15	; 0x0f
    340e:	e0 5c       	subi	r30, 0xC0	; 192
    3410:	ff 4f       	sbci	r31, 0xFF	; 255
    3412:	31 83       	std	Z+1, r19	; 0x01
    3414:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    3416:	ee 89       	ldd	r30, Y+22	; 0x16
    3418:	ff 89       	ldd	r31, Y+23	; 0x17
    341a:	20 81       	ld	r18, Z
    341c:	81 e0       	ldi	r24, 0x01	; 1
    341e:	90 e0       	ldi	r25, 0x00	; 0
    3420:	0f 8c       	ldd	r0, Y+31	; 0x1f
    3422:	02 c0       	rjmp	.+4      	; 0x3428 <HardwareSerial::write(unsigned char)+0x60>
    3424:	88 0f       	add	r24, r24
    3426:	99 1f       	adc	r25, r25
    3428:	0a 94       	dec	r0
    342a:	e2 f7       	brpl	.-8      	; 0x3424 <HardwareSerial::write(unsigned char)+0x5c>
    342c:	28 2b       	or	r18, r24
    342e:	20 83       	st	Z, r18
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
    3430:	81 e0       	ldi	r24, 0x01	; 1
    3432:	89 a3       	std	Y+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
    3434:	ec 89       	ldd	r30, Y+20	; 0x14
    3436:	fd 89       	ldd	r31, Y+21	; 0x15
    3438:	80 81       	ld	r24, Z
    343a:	80 64       	ori	r24, 0x40	; 64
    343c:	80 83       	st	Z, r24
  
  return 1;
}
    343e:	81 e0       	ldi	r24, 0x01	; 1
    3440:	90 e0       	ldi	r25, 0x00	; 0
    3442:	df 91       	pop	r29
    3444:	cf 91       	pop	r28
    3446:	08 95       	ret

00003448 <global constructors keyed to rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    3448:	10 92 bc 01 	sts	0x01BC, r1
    344c:	10 92 bb 01 	sts	0x01BB, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    3450:	88 ee       	ldi	r24, 0xE8	; 232
    3452:	93 e0       	ldi	r25, 0x03	; 3
    3454:	a0 e0       	ldi	r26, 0x00	; 0
    3456:	b0 e0       	ldi	r27, 0x00	; 0
    3458:	80 93 bd 01 	sts	0x01BD, r24
    345c:	90 93 be 01 	sts	0x01BE, r25
    3460:	a0 93 bf 01 	sts	0x01BF, r26
    3464:	b0 93 c0 01 	sts	0x01C0, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    3468:	8a e1       	ldi	r24, 0x1A	; 26
    346a:	91 e0       	ldi	r25, 0x01	; 1
    346c:	90 93 ba 01 	sts	0x01BA, r25
    3470:	80 93 b9 01 	sts	0x01B9, r24
{
  _rx_buffer = rx_buffer;
    3474:	81 e3       	ldi	r24, 0x31	; 49
    3476:	91 e0       	ldi	r25, 0x01	; 1
    3478:	90 93 c6 01 	sts	0x01C6, r25
    347c:	80 93 c5 01 	sts	0x01C5, r24
  _tx_buffer = tx_buffer;
    3480:	85 e7       	ldi	r24, 0x75	; 117
    3482:	91 e0       	ldi	r25, 0x01	; 1
    3484:	90 93 c8 01 	sts	0x01C8, r25
    3488:	80 93 c7 01 	sts	0x01C7, r24
  _ubrrh = ubrrh;
    348c:	85 ec       	ldi	r24, 0xC5	; 197
    348e:	90 e0       	ldi	r25, 0x00	; 0
    3490:	90 93 ca 01 	sts	0x01CA, r25
    3494:	80 93 c9 01 	sts	0x01C9, r24
  _ubrrl = ubrrl;
    3498:	84 ec       	ldi	r24, 0xC4	; 196
    349a:	90 e0       	ldi	r25, 0x00	; 0
    349c:	90 93 cc 01 	sts	0x01CC, r25
    34a0:	80 93 cb 01 	sts	0x01CB, r24
  _ucsra = ucsra;
    34a4:	80 ec       	ldi	r24, 0xC0	; 192
    34a6:	90 e0       	ldi	r25, 0x00	; 0
    34a8:	90 93 ce 01 	sts	0x01CE, r25
    34ac:	80 93 cd 01 	sts	0x01CD, r24
  _ucsrb = ucsrb;
    34b0:	81 ec       	ldi	r24, 0xC1	; 193
    34b2:	90 e0       	ldi	r25, 0x00	; 0
    34b4:	90 93 d0 01 	sts	0x01D0, r25
    34b8:	80 93 cf 01 	sts	0x01CF, r24
  _ucsrc = ucsrc;
    34bc:	82 ec       	ldi	r24, 0xC2	; 194
    34be:	90 e0       	ldi	r25, 0x00	; 0
    34c0:	90 93 d2 01 	sts	0x01D2, r25
    34c4:	80 93 d1 01 	sts	0x01D1, r24
  _udr = udr;
    34c8:	86 ec       	ldi	r24, 0xC6	; 198
    34ca:	90 e0       	ldi	r25, 0x00	; 0
    34cc:	90 93 d4 01 	sts	0x01D4, r25
    34d0:	80 93 d3 01 	sts	0x01D3, r24
  _rxen = rxen;
    34d4:	84 e0       	ldi	r24, 0x04	; 4
    34d6:	80 93 d5 01 	sts	0x01D5, r24
  _txen = txen;
    34da:	83 e0       	ldi	r24, 0x03	; 3
    34dc:	80 93 d6 01 	sts	0x01D6, r24
  _rxcie = rxcie;
    34e0:	87 e0       	ldi	r24, 0x07	; 7
    34e2:	80 93 d7 01 	sts	0x01D7, r24
  _udrie = udrie;
    34e6:	85 e0       	ldi	r24, 0x05	; 5
    34e8:	80 93 d8 01 	sts	0x01D8, r24
  _u2x = u2x;
    34ec:	81 e0       	ldi	r24, 0x01	; 1
    34ee:	80 93 d9 01 	sts	0x01D9, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    34f2:	08 95       	ret

000034f4 <main>:
#include <Arduino.h>

int main(void)
    34f4:	cf 93       	push	r28
    34f6:	df 93       	push	r29
{
	init();
    34f8:	0e 94 2e 18 	call	0x305c	; 0x305c <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    34fc:	0e 94 b9 06 	call	0xd72	; 0xd72 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    3500:	c5 ea       	ldi	r28, 0xA5	; 165
    3502:	d8 e1       	ldi	r29, 0x18	; 24
#endif
	
	setup();
    
	for (;;) {
		loop();
    3504:	0e 94 5e 06 	call	0xcbc	; 0xcbc <loop>
		if (serialEventRun) serialEventRun();
    3508:	20 97       	sbiw	r28, 0x00	; 0
    350a:	e1 f3       	breq	.-8      	; 0x3504 <main+0x10>
    350c:	0e 94 a5 18 	call	0x314a	; 0x314a <serialEventRun()>
    3510:	f9 cf       	rjmp	.-14     	; 0x3504 <main+0x10>

00003512 <Print::write(unsigned char const*, unsigned int)>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    3512:	cf 92       	push	r12
    3514:	df 92       	push	r13
    3516:	ef 92       	push	r14
    3518:	ff 92       	push	r15
    351a:	0f 93       	push	r16
    351c:	1f 93       	push	r17
    351e:	cf 93       	push	r28
    3520:	df 93       	push	r29
    3522:	7c 01       	movw	r14, r24
    3524:	6b 01       	movw	r12, r22
    3526:	8a 01       	movw	r16, r20
    3528:	c0 e0       	ldi	r28, 0x00	; 0
    352a:	d0 e0       	ldi	r29, 0x00	; 0
    352c:	0f c0       	rjmp	.+30     	; 0x354c <Print::write(unsigned char const*, unsigned int)+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    352e:	d6 01       	movw	r26, r12
    3530:	6d 91       	ld	r22, X+
    3532:	6d 01       	movw	r12, r26
    3534:	d7 01       	movw	r26, r14
    3536:	ed 91       	ld	r30, X+
    3538:	fc 91       	ld	r31, X
    353a:	01 90       	ld	r0, Z+
    353c:	f0 81       	ld	r31, Z
    353e:	e0 2d       	mov	r30, r0
    3540:	c7 01       	movw	r24, r14
    3542:	09 95       	icall
    3544:	c8 0f       	add	r28, r24
    3546:	d9 1f       	adc	r29, r25
    3548:	01 50       	subi	r16, 0x01	; 1
    354a:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    354c:	01 15       	cp	r16, r1
    354e:	11 05       	cpc	r17, r1
    3550:	71 f7       	brne	.-36     	; 0x352e <Print::write(unsigned char const*, unsigned int)+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    3552:	ce 01       	movw	r24, r28
    3554:	df 91       	pop	r29
    3556:	cf 91       	pop	r28
    3558:	1f 91       	pop	r17
    355a:	0f 91       	pop	r16
    355c:	ff 90       	pop	r15
    355e:	ef 90       	pop	r14
    3560:	df 90       	pop	r13
    3562:	cf 90       	pop	r12
    3564:	08 95       	ret

00003566 <Print::print(__FlashStringHelper const*)>:

size_t Print::print(const __FlashStringHelper *ifsh)
    3566:	ef 92       	push	r14
    3568:	ff 92       	push	r15
    356a:	0f 93       	push	r16
    356c:	1f 93       	push	r17
    356e:	cf 93       	push	r28
    3570:	df 93       	push	r29
    3572:	7c 01       	movw	r14, r24
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
    3574:	8b 01       	movw	r16, r22
    3576:	c0 e0       	ldi	r28, 0x00	; 0
    3578:	d0 e0       	ldi	r29, 0x00	; 0
    357a:	f8 01       	movw	r30, r16
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    357c:	0f 5f       	subi	r16, 0xFF	; 255
    357e:	1f 4f       	sbci	r17, 0xFF	; 255
    3580:	64 91       	lpm	r22, Z+
    if (c == 0) break;
    3582:	66 23       	and	r22, r22
    3584:	59 f0       	breq	.+22     	; 0x359c <Print::print(__FlashStringHelper const*)+0x36>
    n += write(c);
    3586:	d7 01       	movw	r26, r14
    3588:	ed 91       	ld	r30, X+
    358a:	fc 91       	ld	r31, X
    358c:	01 90       	ld	r0, Z+
    358e:	f0 81       	ld	r31, Z
    3590:	e0 2d       	mov	r30, r0
    3592:	c7 01       	movw	r24, r14
    3594:	09 95       	icall
    3596:	c8 0f       	add	r28, r24
    3598:	d9 1f       	adc	r29, r25
    359a:	ef cf       	rjmp	.-34     	; 0x357a <Print::print(__FlashStringHelper const*)+0x14>
  }
  return n;
}
    359c:	ce 01       	movw	r24, r28
    359e:	df 91       	pop	r29
    35a0:	cf 91       	pop	r28
    35a2:	1f 91       	pop	r17
    35a4:	0f 91       	pop	r16
    35a6:	ff 90       	pop	r15
    35a8:	ef 90       	pop	r14
    35aa:	08 95       	ret

000035ac <Print::println()>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
    35ac:	ef 92       	push	r14
    35ae:	ff 92       	push	r15
    35b0:	0f 93       	push	r16
    35b2:	1f 93       	push	r17
    35b4:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    35b6:	dc 01       	movw	r26, r24
    35b8:	ed 91       	ld	r30, X+
    35ba:	fc 91       	ld	r31, X
    35bc:	01 90       	ld	r0, Z+
    35be:	f0 81       	ld	r31, Z
    35c0:	e0 2d       	mov	r30, r0
    35c2:	6d e0       	ldi	r22, 0x0D	; 13
    35c4:	09 95       	icall
    35c6:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    35c8:	d8 01       	movw	r26, r16
    35ca:	ed 91       	ld	r30, X+
    35cc:	fc 91       	ld	r31, X
    35ce:	01 90       	ld	r0, Z+
    35d0:	f0 81       	ld	r31, Z
    35d2:	e0 2d       	mov	r30, r0
    35d4:	c8 01       	movw	r24, r16
    35d6:	6a e0       	ldi	r22, 0x0A	; 10
    35d8:	09 95       	icall
    35da:	9c 01       	movw	r18, r24
    35dc:	2e 0d       	add	r18, r14
    35de:	3f 1d       	adc	r19, r15
    35e0:	c9 01       	movw	r24, r18
    35e2:	1f 91       	pop	r17
    35e4:	0f 91       	pop	r16
    35e6:	ff 90       	pop	r15
    35e8:	ef 90       	pop	r14
    35ea:	08 95       	ret

000035ec <Print::write(char const*)>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    35ec:	cf 93       	push	r28
    35ee:	df 93       	push	r29
    35f0:	ec 01       	movw	r28, r24
      if (str == NULL) return 0;
    35f2:	61 15       	cp	r22, r1
    35f4:	71 05       	cpc	r23, r1
    35f6:	19 f4       	brne	.+6      	; 0x35fe <Print::write(char const*)+0x12>
    35f8:	20 e0       	ldi	r18, 0x00	; 0
    35fa:	30 e0       	ldi	r19, 0x00	; 0
    35fc:	0f c0       	rjmp	.+30     	; 0x361c <Print::write(char const*)+0x30>
      return write((const uint8_t *)str, strlen(str));
    35fe:	db 01       	movw	r26, r22
    3600:	0d 90       	ld	r0, X+
    3602:	00 20       	and	r0, r0
    3604:	e9 f7       	brne	.-6      	; 0x3600 <Print::write(char const*)+0x14>
    3606:	11 97       	sbiw	r26, 0x01	; 1
    3608:	a6 1b       	sub	r26, r22
    360a:	b7 0b       	sbc	r27, r23
    360c:	e8 81       	ld	r30, Y
    360e:	f9 81       	ldd	r31, Y+1	; 0x01
    3610:	02 80       	ldd	r0, Z+2	; 0x02
    3612:	f3 81       	ldd	r31, Z+3	; 0x03
    3614:	e0 2d       	mov	r30, r0
    3616:	ad 01       	movw	r20, r26
    3618:	09 95       	icall
    361a:	9c 01       	movw	r18, r24
    }
    361c:	c9 01       	movw	r24, r18
    361e:	df 91       	pop	r29
    3620:	cf 91       	pop	r28
    3622:	08 95       	ret

00003624 <Print::printNumber(unsigned long, unsigned char)>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    3624:	4f 92       	push	r4
    3626:	5f 92       	push	r5
    3628:	7f 92       	push	r7
    362a:	8f 92       	push	r8
    362c:	9f 92       	push	r9
    362e:	af 92       	push	r10
    3630:	bf 92       	push	r11
    3632:	cf 92       	push	r12
    3634:	df 92       	push	r13
    3636:	ef 92       	push	r14
    3638:	ff 92       	push	r15
    363a:	0f 93       	push	r16
    363c:	1f 93       	push	r17
    363e:	df 93       	push	r29
    3640:	cf 93       	push	r28
    3642:	cd b7       	in	r28, 0x3d	; 61
    3644:	de b7       	in	r29, 0x3e	; 62
    3646:	a1 97       	sbiw	r28, 0x21	; 33
    3648:	0f b6       	in	r0, 0x3f	; 63
    364a:	f8 94       	cli
    364c:	de bf       	out	0x3e, r29	; 62
    364e:	0f be       	out	0x3f, r0	; 63
    3650:	cd bf       	out	0x3d, r28	; 61
    3652:	2c 01       	movw	r4, r24
    3654:	74 2e       	mov	r7, r20
    3656:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    3658:	22 30       	cpi	r18, 0x02	; 2
    365a:	08 f4       	brcc	.+2      	; 0x365e <Print::printNumber(unsigned long, unsigned char)+0x3a>
    365c:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    365e:	19 a2       	std	Y+33, r1	; 0x21
    3660:	31 e2       	ldi	r19, 0x21	; 33
    3662:	c3 2e       	mov	r12, r19
    3664:	d1 2c       	mov	r13, r1
    3666:	cc 0e       	add	r12, r28
    3668:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    366a:	82 2e       	mov	r8, r18
    366c:	99 24       	eor	r9, r9
    366e:	aa 24       	eor	r10, r10
    3670:	bb 24       	eor	r11, r11
    3672:	67 2d       	mov	r22, r7
    3674:	75 2f       	mov	r23, r21
    3676:	a5 01       	movw	r20, r10
    3678:	94 01       	movw	r18, r8
    367a:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <__udivmodsi4>
    367e:	79 01       	movw	r14, r18
    3680:	8a 01       	movw	r16, r20
    char c = m - base * n;
    3682:	c8 01       	movw	r24, r16
    3684:	b7 01       	movw	r22, r14
    3686:	a5 01       	movw	r20, r10
    3688:	94 01       	movw	r18, r8
    368a:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <__mulsi3>
    368e:	47 2d       	mov	r20, r7
    3690:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    3692:	08 94       	sec
    3694:	c1 08       	sbc	r12, r1
    3696:	d1 08       	sbc	r13, r1
    3698:	4a 30       	cpi	r20, 0x0A	; 10
    369a:	14 f4       	brge	.+4      	; 0x36a0 <Print::printNumber(unsigned long, unsigned char)+0x7c>
    369c:	40 5d       	subi	r20, 0xD0	; 208
    369e:	01 c0       	rjmp	.+2      	; 0x36a2 <Print::printNumber(unsigned long, unsigned char)+0x7e>
    36a0:	49 5c       	subi	r20, 0xC9	; 201
    36a2:	f6 01       	movw	r30, r12
    36a4:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    36a6:	e1 14       	cp	r14, r1
    36a8:	f1 04       	cpc	r15, r1
    36aa:	01 05       	cpc	r16, r1
    36ac:	11 05       	cpc	r17, r1
    36ae:	21 f0       	breq	.+8      	; 0x36b8 <Print::printNumber(unsigned long, unsigned char)+0x94>
    36b0:	7e 2c       	mov	r7, r14
    36b2:	5f 2d       	mov	r21, r15
    36b4:	c8 01       	movw	r24, r16
    36b6:	dd cf       	rjmp	.-70     	; 0x3672 <Print::printNumber(unsigned long, unsigned char)+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    36b8:	c2 01       	movw	r24, r4
    36ba:	b6 01       	movw	r22, r12
    36bc:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <Print::write(char const*)>
}
    36c0:	a1 96       	adiw	r28, 0x21	; 33
    36c2:	0f b6       	in	r0, 0x3f	; 63
    36c4:	f8 94       	cli
    36c6:	de bf       	out	0x3e, r29	; 62
    36c8:	0f be       	out	0x3f, r0	; 63
    36ca:	cd bf       	out	0x3d, r28	; 61
    36cc:	cf 91       	pop	r28
    36ce:	df 91       	pop	r29
    36d0:	1f 91       	pop	r17
    36d2:	0f 91       	pop	r16
    36d4:	ff 90       	pop	r15
    36d6:	ef 90       	pop	r14
    36d8:	df 90       	pop	r13
    36da:	cf 90       	pop	r12
    36dc:	bf 90       	pop	r11
    36de:	af 90       	pop	r10
    36e0:	9f 90       	pop	r9
    36e2:	8f 90       	pop	r8
    36e4:	7f 90       	pop	r7
    36e6:	5f 90       	pop	r5
    36e8:	4f 90       	pop	r4
    36ea:	08 95       	ret

000036ec <Print::print(long, int)>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
    36ec:	cf 92       	push	r12
    36ee:	df 92       	push	r13
    36f0:	ef 92       	push	r14
    36f2:	ff 92       	push	r15
    36f4:	0f 93       	push	r16
    36f6:	1f 93       	push	r17
    36f8:	cf 93       	push	r28
    36fa:	df 93       	push	r29
    36fc:	ec 01       	movw	r28, r24
    36fe:	6a 01       	movw	r12, r20
    3700:	7b 01       	movw	r14, r22
{
  if (base == 0) {
    3702:	21 15       	cp	r18, r1
    3704:	31 05       	cpc	r19, r1
    3706:	41 f4       	brne	.+16     	; 0x3718 <Print::print(long, int)+0x2c>
    return write(n);
    3708:	e8 81       	ld	r30, Y
    370a:	f9 81       	ldd	r31, Y+1	; 0x01
    370c:	01 90       	ld	r0, Z+
    370e:	f0 81       	ld	r31, Z
    3710:	e0 2d       	mov	r30, r0
    3712:	64 2f       	mov	r22, r20
    3714:	09 95       	icall
    3716:	1f c0       	rjmp	.+62     	; 0x3756 <Print::print(long, int)+0x6a>
  } else if (base == 10) {
    3718:	2a 30       	cpi	r18, 0x0A	; 10
    371a:	31 05       	cpc	r19, r1
    371c:	d1 f4       	brne	.+52     	; 0x3752 <Print::print(long, int)+0x66>
    if (n < 0) {
    371e:	77 ff       	sbrs	r23, 7
    3720:	17 c0       	rjmp	.+46     	; 0x3750 <Print::print(long, int)+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    3722:	e8 81       	ld	r30, Y
    3724:	f9 81       	ldd	r31, Y+1	; 0x01
    3726:	01 90       	ld	r0, Z+
    3728:	f0 81       	ld	r31, Z
    372a:	e0 2d       	mov	r30, r0
    372c:	6d e2       	ldi	r22, 0x2D	; 45
    372e:	09 95       	icall
    3730:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    3732:	44 27       	eor	r20, r20
    3734:	55 27       	eor	r21, r21
    3736:	ba 01       	movw	r22, r20
    3738:	4c 19       	sub	r20, r12
    373a:	5d 09       	sbc	r21, r13
    373c:	6e 09       	sbc	r22, r14
    373e:	7f 09       	sbc	r23, r15
    3740:	ce 01       	movw	r24, r28
    3742:	2a e0       	ldi	r18, 0x0A	; 10
    3744:	0e 94 12 1b 	call	0x3624	; 0x3624 <Print::printNumber(unsigned long, unsigned char)>
    3748:	98 01       	movw	r18, r16
    374a:	28 0f       	add	r18, r24
    374c:	39 1f       	adc	r19, r25
    374e:	04 c0       	rjmp	.+8      	; 0x3758 <Print::print(long, int)+0x6c>
    }
    return printNumber(n, 10);
    3750:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    3752:	0e 94 12 1b 	call	0x3624	; 0x3624 <Print::printNumber(unsigned long, unsigned char)>
    3756:	9c 01       	movw	r18, r24
  }
}
    3758:	c9 01       	movw	r24, r18
    375a:	df 91       	pop	r29
    375c:	cf 91       	pop	r28
    375e:	1f 91       	pop	r17
    3760:	0f 91       	pop	r16
    3762:	ff 90       	pop	r15
    3764:	ef 90       	pop	r14
    3766:	df 90       	pop	r13
    3768:	cf 90       	pop	r12
    376a:	08 95       	ret

0000376c <Print::print(int, int)>:
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
    376c:	ef 92       	push	r14
    376e:	ff 92       	push	r15
    3770:	0f 93       	push	r16
    3772:	1f 93       	push	r17
    3774:	7b 01       	movw	r14, r22
    3776:	9a 01       	movw	r18, r20
{
  return print((long) n, base);
    3778:	00 27       	eor	r16, r16
    377a:	f7 fc       	sbrc	r15, 7
    377c:	00 95       	com	r16
    377e:	10 2f       	mov	r17, r16
    3780:	b8 01       	movw	r22, r16
    3782:	a7 01       	movw	r20, r14
    3784:	0e 94 76 1b 	call	0x36ec	; 0x36ec <Print::print(long, int)>
}
    3788:	1f 91       	pop	r17
    378a:	0f 91       	pop	r16
    378c:	ff 90       	pop	r15
    378e:	ef 90       	pop	r14
    3790:	08 95       	ret

00003792 <Print::println(char const*)>:
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
    3792:	ef 92       	push	r14
    3794:	ff 92       	push	r15
    3796:	0f 93       	push	r16
    3798:	1f 93       	push	r17
    379a:	7c 01       	movw	r14, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    379c:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <Print::write(char const*)>
    37a0:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    37a2:	c7 01       	movw	r24, r14
    37a4:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <Print::println()>
    37a8:	08 0f       	add	r16, r24
    37aa:	19 1f       	adc	r17, r25
  return n;
}
    37ac:	c8 01       	movw	r24, r16
    37ae:	1f 91       	pop	r17
    37b0:	0f 91       	pop	r16
    37b2:	ff 90       	pop	r15
    37b4:	ef 90       	pop	r14
    37b6:	08 95       	ret

000037b8 <__mulsi3>:
    37b8:	62 9f       	mul	r22, r18
    37ba:	d0 01       	movw	r26, r0
    37bc:	73 9f       	mul	r23, r19
    37be:	f0 01       	movw	r30, r0
    37c0:	82 9f       	mul	r24, r18
    37c2:	e0 0d       	add	r30, r0
    37c4:	f1 1d       	adc	r31, r1
    37c6:	64 9f       	mul	r22, r20
    37c8:	e0 0d       	add	r30, r0
    37ca:	f1 1d       	adc	r31, r1
    37cc:	92 9f       	mul	r25, r18
    37ce:	f0 0d       	add	r31, r0
    37d0:	83 9f       	mul	r24, r19
    37d2:	f0 0d       	add	r31, r0
    37d4:	74 9f       	mul	r23, r20
    37d6:	f0 0d       	add	r31, r0
    37d8:	65 9f       	mul	r22, r21
    37da:	f0 0d       	add	r31, r0
    37dc:	99 27       	eor	r25, r25
    37de:	72 9f       	mul	r23, r18
    37e0:	b0 0d       	add	r27, r0
    37e2:	e1 1d       	adc	r30, r1
    37e4:	f9 1f       	adc	r31, r25
    37e6:	63 9f       	mul	r22, r19
    37e8:	b0 0d       	add	r27, r0
    37ea:	e1 1d       	adc	r30, r1
    37ec:	f9 1f       	adc	r31, r25
    37ee:	bd 01       	movw	r22, r26
    37f0:	cf 01       	movw	r24, r30
    37f2:	11 24       	eor	r1, r1
    37f4:	08 95       	ret

000037f6 <__udivmodsi4>:
    37f6:	a1 e2       	ldi	r26, 0x21	; 33
    37f8:	1a 2e       	mov	r1, r26
    37fa:	aa 1b       	sub	r26, r26
    37fc:	bb 1b       	sub	r27, r27
    37fe:	fd 01       	movw	r30, r26
    3800:	0d c0       	rjmp	.+26     	; 0x381c <__udivmodsi4_ep>

00003802 <__udivmodsi4_loop>:
    3802:	aa 1f       	adc	r26, r26
    3804:	bb 1f       	adc	r27, r27
    3806:	ee 1f       	adc	r30, r30
    3808:	ff 1f       	adc	r31, r31
    380a:	a2 17       	cp	r26, r18
    380c:	b3 07       	cpc	r27, r19
    380e:	e4 07       	cpc	r30, r20
    3810:	f5 07       	cpc	r31, r21
    3812:	20 f0       	brcs	.+8      	; 0x381c <__udivmodsi4_ep>
    3814:	a2 1b       	sub	r26, r18
    3816:	b3 0b       	sbc	r27, r19
    3818:	e4 0b       	sbc	r30, r20
    381a:	f5 0b       	sbc	r31, r21

0000381c <__udivmodsi4_ep>:
    381c:	66 1f       	adc	r22, r22
    381e:	77 1f       	adc	r23, r23
    3820:	88 1f       	adc	r24, r24
    3822:	99 1f       	adc	r25, r25
    3824:	1a 94       	dec	r1
    3826:	69 f7       	brne	.-38     	; 0x3802 <__udivmodsi4_loop>
    3828:	60 95       	com	r22
    382a:	70 95       	com	r23
    382c:	80 95       	com	r24
    382e:	90 95       	com	r25
    3830:	9b 01       	movw	r18, r22
    3832:	ac 01       	movw	r20, r24
    3834:	bd 01       	movw	r22, r26
    3836:	cf 01       	movw	r24, r30
    3838:	08 95       	ret

0000383a <__tablejump2__>:
    383a:	ee 0f       	add	r30, r30
    383c:	ff 1f       	adc	r31, r31

0000383e <__tablejump__>:
    383e:	05 90       	lpm	r0, Z+
    3840:	f4 91       	lpm	r31, Z+
    3842:	e0 2d       	mov	r30, r0
    3844:	09 94       	ijmp

00003846 <_exit>:
    3846:	f8 94       	cli

00003848 <__stop_program>:
    3848:	ff cf       	rjmp	.-2      	; 0x3848 <__stop_program>
