
/var/folders/km/s_tzntf16nzg5bdh5n6g6lz40000gn/T/build6763744114461649109.tmp/V0p2_Main.cpp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000112  00800100  00007c80  00007d14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007c80  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000334  00800212  00800212  00007e26  2**0
                  ALLOC
  3 .debug_aranges 000010a0  00000000  00000000  00007e26  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00002d1d  00000000  00000000  00008ec6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0001859a  00000000  00000000  0000bbe3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00004d7e  00000000  00000000  0002417d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0001162f  00000000  00000000  00028efb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001dc0  00000000  00000000  0003a52c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000700e  00000000  00000000  0003c2ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000a390  00000000  00000000  000432fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 000ab3ce  00000000  00000000  0004d68a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001330  00000000  00000000  000f8a58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
    virtual bool isValid(const uint8_t value) const { return(value <= 100); }

    // Returns true if (re)calibrating/(re)initialising/(re)syncing.
    // The target valve position is not lost while this is true.
    // By default there is no recalibration step.
    virtual bool isRecalibrating() const { return(false); }
       0:	0c 94 9e 02 	jmp	0x53c	; 0x53c <__ctors_end>
#endif


// True if FHT8V valve is believed to be open under instruction from this system; false if not in sync.
static bool FHT8V_isValveOpen;
bool getFHT8V_isValveOpen() { return(syncedWithFHT8V && FHT8V_isValveOpen); }
       4:	0c 94 c6 02 	jmp	0x58c	; 0x58c <__bad_interrupt>
bool verifyHeaderAndCRCForTrailingMinimalStatsPayload(uint8_t const *const buf)
  {
  return((MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MSBS == ((buf[0]) & MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MASK)) && // Plausible header.
         (0 == (buf[1] & 0x80)) && // Top bit is clear on this byte also.
         (buf[2] == crc7_5B_update(buf[0], buf[1]))); // CRC validates, top bit implicitly zero.
  }
       8:	0c 94 c6 02 	jmp	0x58c	; 0x58c <__bad_interrupt>
// For comparator use examples see:
//   * http://forum.arduino.cc/index.php?topic=165744.0
//   * http://forum.arduino.cc/index.php?topic=17450.0
//   * http://www.avr-tutorials.com/comparator/utilizing-avr-analog-comparator-aco
//   * http://winavr.scienceprog.com/avr-gcc-tutorial/avr-comparator-c-programming-example.html
bool analogueVsBandgapRead(const int aiNumber, const bool napToSettle)
       c:	0c 94 c6 02 	jmp	0x58c	; 0x58c <__bad_interrupt>
uint_least8_t getHoursLT() { return(getMinutesSinceMidnightLT() / 60); }

// Get whole days since the start of 2000/01/01 (ie the midnight between 1999 and 2000), local time.
// This will roll in about 2179, by which time I will not care.
// Thread-safe and ISR-safe.
uint_least16_t getDaysSince1999LT()
      10:	0c 94 c6 02 	jmp	0x58c	; 0x58c <__bad_interrupt>
  }

// Returns true if any simple schedule is set, false otherwise.
// This implementation just checks for any valid schedule 'on' time.
// In unit-test override mode is true for soon/now, false for off.
bool isAnySimpleScheduleSet()
      14:	0c 94 f7 07 	jmp	0xfee	; 0xfee <__vector_5>
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) number to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(const unsigned long u, const int fmt)
      18:	0c 94 68 1d 	jmp	0x3ad0	; 0x3ad0 <__vector_6>
    // True if successful, false otherwise (eg capacity already reached).
    bool put(SimpleStatsKey key, int newValue);

    // Create/update value for the given sensor.
    // True if successful, false otherwise (eg capacity already reached).
    template <class T> bool put(const Sensor<T> &s) { return(put(s.tag(), s.get())); }
      1c:	0c 94 c6 02 	jmp	0x58c	; 0x58c <__bad_interrupt>
  public:
    // Return last value fetched by read(); undefined before first read().
    // Usually fast.
    // Often likely to be thread-safe or usable within ISRs (Interrupt Service Routines),
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual uint8_t get() const { return(value); }
      20:	0c 94 c6 02 	jmp	0x58c	; 0x58c <__bad_interrupt>
  // set address of targeted slave
  txAddress = address;
  // reset tx buffer iterator vars
  txBufferIndex = 0;
  txBufferLength = 0;
}
      24:	0c 94 38 1d 	jmp	0x3a70	; 0x3a70 <__vector_9>
 */
void twi_setAddress(uint8_t address)
{
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
}
      28:	0c 94 c6 02 	jmp	0x58c	; 0x58c <__bad_interrupt>

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
      2c:	0c 94 c6 02 	jmp	0x58c	; 0x58c <__bad_interrupt>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
      30:	0c 94 c6 02 	jmp	0x58c	; 0x58c <__bad_interrupt>
  free(ptr);
}

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
void __cxa_guard_abort (__guard *) {}; 
      34:	0c 94 c6 02 	jmp	0x58c	; 0x58c <__bad_interrupt>
  size_t n = print(ifsh);
  n += println();
  return n;
}

size_t Print::print(const Printable& x)
      38:	0c 94 c6 02 	jmp	0x58c	; 0x58c <__bad_interrupt>
	timer0_millis = m;
	timer0_overflow_count++;
}

unsigned long millis()
{
      3c:	0c 94 c6 02 	jmp	0x58c	; 0x58c <__bad_interrupt>
      40:	0c 94 9d 3c 	jmp	0x793a	; 0x793a <__vector_16>
      44:	0c 94 c6 02 	jmp	0x58c	; 0x58c <__bad_interrupt>
      48:	0c 94 82 38 	jmp	0x7104	; 0x7104 <__vector_18>
      4c:	0c 94 d0 38 	jmp	0x71a0	; 0x71a0 <__vector_19>
      50:	0c 94 c6 02 	jmp	0x58c	; 0x58c <__bad_interrupt>
      54:	0c 94 21 1e 	jmp	0x3c42	; 0x3c42 <__vector_21>
      58:	0c 94 c6 02 	jmp	0x58c	; 0x58c <__bad_interrupt>
      5c:	0c 94 c6 02 	jmp	0x58c	; 0x58c <__bad_interrupt>
      60:	0c 94 3f 36 	jmp	0x6c7e	; 0x6c7e <__vector_24>
      64:	0c 94 c6 02 	jmp	0x58c	; 0x58c <__bad_interrupt>

00000068 <loopOpenTRV()::__c>:
      68:	21 45 52 52 4f 52 3a 20 6c 6f 6f 70 20 6f 76 65     !ERROR: loop ove
      78:	72 72 75 6e 00                                      rrun.

0000007d <loopOpenTRV()::__c>:
      7d:	42 6f 69 6c 65 72 20 6f 6e 2c 20 73 3a 20 00        Boiler on, s: .

0000008c <loopOpenTRV()::__c>:
      8c:	3f 6e 65 61 72 20 6f 76 65 72 72 75 6e 00           ?near overrun.

0000009a <loopOpenTRV()::__c>:
      9a:	3f 44 52 4f 50 50 45 44 20 73 74 61 74 73 3a 20     ?DROPPED stats: 
	...

000000ab <loopOpenTRV()::__c>:
      ab:	52 43 66 48 30 00                                   RCfH0.

000000b1 <loopOpenTRV()::__c>:
      b1:	52 43 66 48 31 00                                   RCfH1.

000000b7 <loopOpenTRV()::__c>:
      b7:	21 52 58 65 72 72 20 46 00                          !RXerr F.

000000c0 <loopOpenTRV()::__c>:
      c0:	43 66 48 20 00                                      CfH .

000000c5 <loopOpenTRV()::__c>:
      c5:	3b 4f 00                                            ;O.

000000c8 <loopOpenTRV()::__c>:
      c8:	3b 4c 00                                            ;L.

000000cb <loopOpenTRV()::__c>:
      cb:	3b 50 00                                            ;P.

000000ce <loopOpenTRV()::__c>:
      ce:	3b 54 00                                            ;T.

000000d1 <bareStatsTX(bool, bool, bool)::__c>:
      d1:	4a 53 4f 4e 20 67 65 6e 20 65 72 72 21 00           JSON gen err!.

000000df <FHT8V_RFM22_Reg_Values>:
      df:	06 00 08 00 30 00 33 06 34 08 35 10 36 aa 37 cc     ....0.3.4.5.6.7.
      ef:	38 cc 39 cc 6d 0b 6e 28 6f f5 70 20 71 21 72 20     8.9.m.n(o.p q!r 
      ff:	73 00 74 00 75 73 76 64 77 00 79 23 7a 01 1c c1     s.t.usvdw.y#z...
     10f:	1d 40 1e 0a 1f 03 20 96 21 00 22 da 23 74 24 00     .@.... .!.".#t$.
     11f:	25 dc 2a 24 2c 28 2d fa 2e 29 69 60 ff ff           %.*$,(-..)i`..

0000012d <FHT8VPollSyncAndTX_Next(bool)::__c>:
     12d:	46 48 54 38 56 20 54 58 00                          FHT8V TX.

00000136 <doSync(bool)::__c>:
     136:	46 48 54 38 56 20 53 59 4e 43 20 46 49 4e 41 4c     FHT8V SYNC FINAL
	...

00000147 <doSync(bool)::__c>:
     147:	46 48 54 38 56 20 53 59 4e 43 2e 2e 2e 00           FHT8V SYNC....

00000155 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)::__c>:
     155:	22 2b 22 3a 00                                      "+":.

0000015a <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)::__c>:
     15a:	22 40 22 3a 22 00                                   "@":".

00000160 <SimpleStatsRotationBase::put(char const*, int)::__c>:
     160:	54 6f 6f 20 6d 61 6e 79 20 6b 65 79 73 3a 20 00     Too many keys: .

00000170 <ensureIDCreated(bool)::__c>:
     170:	20 2e 2e 2e 20 00                                    ... .

00000176 <ensureIDCreated(bool)::__c>:
     176:	49 6e 76 61 6c 69 64 20 49 44 20 62 79 74 65 20     Invalid ID byte 
	...

00000187 <ensureIDCreated(bool)::__c>:
     187:	20 2e 2e 2e 20 00                                    ... .

0000018d <ensureIDCreated(bool)::__c>:
     18d:	53 65 74 74 69 6e 67 20 49 44 20 62 79 74 65 20     Setting ID byte 
	...

0000019e <RFM22CheckConnected()::__c>:
     19e:	52 46 4d 32 32 20 62 61 64 00                       RFM22 bad.

000001a8 <pollCLI(unsigned char)::__c>:
     1a8:	4f 4b 00                                            OK.

000001ab <pollCLI(unsigned char)::__c>:
     1ab:	4e 6f 74 20 66 69 6e 69 73 68 65 64 2e 00           Not finished..

000001b9 <pollCLI(unsigned char)::__c>:
     1b9:	5a 61 70 70 65 64 2e 00                             Zapped..

000001c1 <pollCLI(unsigned char)::__c>:
     1c1:	4f 76 65 72 72 75 6e 73 3a 20 00                    Overruns: .

000001cc <pollCLI(unsigned char)::__c>:
     1cc:	52 65 73 65 74 73 3a 20 00                          Resets: .

000001d5 <pollCLI(unsigned char)::__c>:
     1d5:	68 6f 6c 73 00                                      hols.

000001da <pollCLI(unsigned char)::__c>:
     1da:	6c 61 73 74 00                                      last.

000001df <pollCLI(unsigned char)::__c>:
     1df:	73 6d 6f 6f 74 68 65 64 00                          smoothed.

000001e8 <pollCLI(unsigned char)::__c>:
     1e8:	52 48 25 00                                         RH%.

000001ec <pollCLI(unsigned char)::__c>:
     1ec:	6f 63 63 25 00                                      occ%.

000001f1 <pollCLI(unsigned char)::__c>:
     1f1:	61 6d 62 6c 00                                      ambl.

000001f6 <pollCLI(unsigned char)::__c>:
     1f6:	3f 20 66 6f 72 20 43 4c 49 20 68 65 6c 70 00        ? for CLI help.

00000205 <dumpCLIUsage(unsigned char)::__c>:
     205:	5a 61 70 20 73 74 61 74 73 00                       Zap stats.

0000020f <dumpCLIUsage(unsigned char)::__c>:
     20f:	58 6d 69 74 20 73 65 63 75 72 69 74 79 20 6c 65     Xmit security le
     21f:	76 65 6c 3b 20 30 20 61 6c 77 61 79 73 2c 20 32     vel; 0 always, 2
     22f:	35 35 20 6e 65 76 65 72 00                          55 never.

00000238 <dumpCLIUsage(unsigned char)::__c>:
     238:	73 79 73 20 56 65 72 73 69 6f 6e 00                 sys Version.

00000244 <dumpCLIUsage(unsigned char)::__c>:
     244:	57 61 72 6d 00                                      Warm.

00000249 <dumpCLIUsage(unsigned char)::__c>:
     249:	73 65 74 20 32 34 68 20 54 69 6d 65 00              set 24h Time.

00000256 <dumpCLIUsage(unsigned char)::__c>:
     256:	54 20 48 48 20 4d 4d 00                             T HH MM.

0000025e <dumpCLIUsage(unsigned char)::__c>:
     25e:	73 68 6f 77 20 53 74 61 74 75 73 00                 show Status.

0000026a <dumpCLIUsage(unsigned char)::__c>:
     26a:	51 75 69 63 6b 20 48 65 61 74 00                    Quick Heat.

00000275 <dumpCLIUsage(unsigned char)::__c>:
     275:	72 65 73 65 74 20 4f 70 65 6e 20 25 00              reset Open %.

00000282 <dumpCLIUsage(unsigned char)::__c>:
     282:	6d 69 6e 20 25 20 66 6f 72 20 76 61 6c 76 65 20     min % for valve 
     292:	74 6f 20 62 65 20 4f 70 65 6e 00                    to be Open.

0000029d <dumpCLIUsage(unsigned char)::__c>:
     29d:	4f 20 50 50 00                                      O PP.

000002a2 <dumpCLIUsage(unsigned char)::__c>:
     2a2:	50 72 6f 67 72 61 6d 3a 20 77 61 72 6d 20 64 61     Program: warm da
     2b2:	69 6c 79 20 73 74 61 72 74 69 6e 67 20 61 74 20     ily starting at 
     2c2:	48 48 20 4d 4d 20 73 63 68 65 64 75 6c 65 20 53     HH MM schedule S
	...

000002d3 <dumpCLIUsage(unsigned char)::__c>:
     2d3:	50 20 48 48 20 4d 4d 20 53 00                       P HH MM S.

000002dd <dumpCLIUsage(unsigned char)::__c>:
     2dd:	4c 65 61 72 6e 20 64 61 69 6c 79 20 77 61 72 6d     Learn daily warm
     2ed:	20 6e 6f 77 2c 20 63 6c 65 61 72 20 69 66 20 69      now, clear if i
     2fd:	6e 20 66 72 6f 73 74 20 6d 6f 64 65 2c 20 73 63     n frost mode, sc
     30d:	68 65 64 75 6c 65 20 53 00                          hedule S.

00000316 <dumpCLIUsage(unsigned char)::__c>:
     316:	4c 20 53 00                                         L S.

0000031a <dumpCLIUsage(unsigned char)::__c>:
     31a:	6e 65 77 20 49 44 00                                new ID.

00000321 <dumpCLIUsage(unsigned char)::__c>:
     321:	63 6c 65 61 72 20 48 6f 75 73 65 20 63 6f 64 65     clear House code
     331:	73 00                                               s.

00000333 <dumpCLIUsage(unsigned char)::__c>:
     333:	73 65 74 20 46 48 54 38 56 20 48 6f 75 73 65 20     set FHT8V House 
     343:	63 6f 64 65 73 20 31 26 32 00                       codes 1&2.

0000034d <dumpCLIUsage(unsigned char)::__c>:
     34d:	48 20 48 31 20 48 32 00                             H H1 H2.

00000355 <dumpCLIUsage(unsigned char)::__c>:
     355:	46 72 6f 73 74 00                                   Frost.

0000035b <dumpCLIUsage(unsigned char)::__c>:
     35b:	45 78 69 74 20 43 4c 49 00                          Exit CLI.

00000364 <dumpCLIUsage(unsigned char)::__c>:
     364:	44 75 6d 70 20 73 74 61 74 73 20 73 65 74 20 4e     Dump stats set N
	...

00000375 <dumpCLIUsage(unsigned char)::__c>:
     375:	44 20 4e 00                                         D N.

00000379 <dumpCLIUsage(unsigned char)::__c>:
     379:	43 65 6e 74 72 61 6c 20 68 75 62 20 3e 3d 4d 20     Central hub >=M 
     389:	6d 69 6e 73 20 6f 6e 2c 20 30 20 6f 66 66 00        mins on, 0 off.

00000398 <dumpCLIUsage(unsigned char)::__c>:
     398:	43 20 4d 00                                         C M.

0000039c <dumpCLIUsage(unsigned char)::__c>:
     39c:	74 68 69 73 20 68 65 6c 70 00                       this help.

000003a6 <InvalidIgnored()::__c>:
     3a6:	49 6e 76 61 6c 69 64 2c 20 69 67 6e 6f 72 65 64     Invalid, ignored
     3b6:	2e 00                                               ..

000003b8 <serialStatusReport()::__c>:
     3b8:	3b 4d 00                                            ;M.

000003bb <serialStatusReport()::__c>:
     3bb:	3b 48 43 00                                         ;HC.

000003bf <serialStatusReport()::__c>:
     3bf:	3b 58 00                                            ;X.

000003c2 <setup::__c>:
     3c2:	3f 20 61 74 20 43 4c 49 20 70 72 6f 6d 70 74 20     ? at CLI prompt 
     3d2:	66 6f 72 20 68 65 6c 70 00                          for help.

000003db <setup::__c>:
     3db:	42 61 64 20 49 44 20 61 6e 64 20 63 61 6e 6e 6f     Bad ID and canno
     3eb:	74 20 72 65 73 65 74 2e 00                          t reset..

000003f4 <setup::__c>:
     3f4:	6d 56 00                                            mV.

000003f7 <setup::__c>:
     3f7:	56 63 63 3a 20 00                                   Vcc: .

000003fd <setup::__c>:
     3fd:	54 3a 20 00                                         T: .

00000401 <setup::__c>:
     401:	46 72 65 65 20 52 41 4d 3a 20 00                    Free RAM: .

0000040c <setup::__c>:
     40c:	4f 76 65 72 72 75 6e 73 3a 20 00                    Overruns: .

00000417 <setup::__c>:
     417:	52 65 73 65 74 73 3a 20 00                          Resets: .

00000420 <setup::__c>:
     420:	44 45 42 55 47 20 62 75 69 6c 64 00                 DEBUG build.

0000042c <setup::__c>:
     42c:	0d 0a 4f 70 65 6e 54 52 56 20 62 6f 6f 74 69 6e     ..OpenTRV bootin
     43c:	67 3a 20 00                                         g: .

00000440 <optionalPOST()::__c>:
     440:	52 61 64 69 6f 2c 20 78 74 61 6c 2c 20 62 75 74     Radio, xtal, but
     450:	74 6f 6e 73 20 4f 4b 00                             tons OK.

00000458 <optionalPOST()::__c>:
     458:	58 74 61 6c 20 64 65 61 64 00                       Xtal dead.

00000462 <optionalPOST()::__c>:
     462:	62 75 74 74 6f 6e 20 73 74 75 63 6b 00              button stuck.

0000046f <posPOST(unsigned char, __FlashStringHelper const*)::__c>:
     46f:	3a 20 00                                            : .

00000472 <posPOST(unsigned char, __FlashStringHelper const*)::__c>:
     472:	70 6f 73 50 4f 53 54 3a 20 00                       posPOST: .

0000047c <serialPrintlnBuildVersion()::__c>:
     47c:	20 30 39 3a 33 39 3a 35 39 00                        09:39:59.

00000486 <serialPrintlnBuildVersion()::__c>:
     486:	3b 20 63 6f 64 65 20 24 49 64 3a 20 56 30 70 32     ; code $Id: V0p2
     496:	5f 4d 61 69 6e 2e 69 6e 6f 20 33 38 36 34 20 32     _Main.ino 3864 2
     4a6:	30 31 34 2d 31 32 2d 31 30 20 32 31 3a 30 31 3a     014-12-10 21:01:
     4b6:	35 34 5a 20 64 61 6d 6f 6e 68 64 20 24 20 00        54Z damonhd $ .

000004c5 <serialPrintlnBuildVersion()::__c>:
     4c5:	62 6f 61 72 64 20 56 30 2e 32 20 52 45 56 00        board V0.2 REV.

000004d4 <port_to_mode_PGM>:
     4d4:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000004de <port_to_output_PGM>:
     4de:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000004e8 <port_to_input_PGM>:
     4e8:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000004f2 <digital_pin_to_port_PGM>:
     4f2:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     502:	03 03 03 03                                         ....

00000506 <digital_pin_to_bit_mask_PGM>:
     506:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     516:	04 08 10 20                                         ... 

0000051a <digital_pin_to_timer_PGM>:
     51a:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     52a:	00 00 00 00                                         ....

0000052e <__ctors_start>:
     52e:	da 06       	cpc	r13, r26
     530:	2a 20       	and	r2, r10
     532:	d1 21       	and	r29, r1
     534:	48 2f       	mov	r20, r24
     536:	5d 32       	cpi	r21, 0x2D	; 45
     538:	db 34       	cpi	r29, 0x4B	; 75
     53a:	99 3a       	cpi	r25, 0xA9	; 169

0000053c <__ctors_end>:
     53c:	11 24       	eor	r1, r1
     53e:	1f be       	out	0x3f, r1	; 63
     540:	cf ef       	ldi	r28, 0xFF	; 255
     542:	d8 e0       	ldi	r29, 0x08	; 8
     544:	de bf       	out	0x3e, r29	; 62
     546:	cd bf       	out	0x3d, r28	; 61

00000548 <__do_copy_data>:
     548:	12 e0       	ldi	r17, 0x02	; 2
     54a:	a0 e0       	ldi	r26, 0x00	; 0
     54c:	b1 e0       	ldi	r27, 0x01	; 1
     54e:	e0 e8       	ldi	r30, 0x80	; 128
     550:	fc e7       	ldi	r31, 0x7C	; 124
     552:	02 c0       	rjmp	.+4      	; 0x558 <.do_copy_data_start>

00000554 <.do_copy_data_loop>:
     554:	05 90       	lpm	r0, Z+
     556:	0d 92       	st	X+, r0

00000558 <.do_copy_data_start>:
     558:	a2 31       	cpi	r26, 0x12	; 18
     55a:	b1 07       	cpc	r27, r17
     55c:	d9 f7       	brne	.-10     	; 0x554 <.do_copy_data_loop>

0000055e <__do_clear_bss>:
     55e:	15 e0       	ldi	r17, 0x05	; 5
     560:	a2 e1       	ldi	r26, 0x12	; 18
     562:	b2 e0       	ldi	r27, 0x02	; 2
     564:	01 c0       	rjmp	.+2      	; 0x568 <.do_clear_bss_start>

00000566 <.do_clear_bss_loop>:
     566:	1d 92       	st	X+, r1

00000568 <.do_clear_bss_start>:
     568:	a6 34       	cpi	r26, 0x46	; 70
     56a:	b1 07       	cpc	r27, r17
     56c:	e1 f7       	brne	.-8      	; 0x566 <.do_clear_bss_loop>

0000056e <__do_global_ctors>:
     56e:	15 e0       	ldi	r17, 0x05	; 5
     570:	cc e3       	ldi	r28, 0x3C	; 60
     572:	d5 e0       	ldi	r29, 0x05	; 5
     574:	04 c0       	rjmp	.+8      	; 0x57e <.do_global_ctors_start>

00000576 <.do_global_ctors_loop>:
     576:	22 97       	sbiw	r28, 0x02	; 2
     578:	fe 01       	movw	r30, r28
     57a:	0e 94 32 3e 	call	0x7c64	; 0x7c64 <__tablejump__>

0000057e <.do_global_ctors_start>:
     57e:	ce 32       	cpi	r28, 0x2E	; 46
     580:	d1 07       	cpc	r29, r17
     582:	c9 f7       	brne	.-14     	; 0x576 <.do_global_ctors_loop>
     584:	0e 94 ef 3a 	call	0x75de	; 0x75de <main>
     588:	0c 94 3e 3e 	jmp	0x7c7c	; 0x7c7c <_exit>

0000058c <__bad_interrupt>:
     58c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000590 <abort>:
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	f8 94       	cli
     596:	0c 94 3e 3e 	jmp	0x7c7c	; 0x7c7c <_exit>

0000059a <atoi>:
     59a:	fc 01       	movw	r30, r24
     59c:	88 27       	eor	r24, r24
     59e:	99 27       	eor	r25, r25
     5a0:	e8 94       	clt
     5a2:	21 91       	ld	r18, Z+
     5a4:	20 32       	cpi	r18, 0x20	; 32
     5a6:	e9 f3       	breq	.-6      	; 0x5a2 <atoi+0x8>
     5a8:	29 30       	cpi	r18, 0x09	; 9
     5aa:	10 f0       	brcs	.+4      	; 0x5b0 <atoi+0x16>
     5ac:	2e 30       	cpi	r18, 0x0E	; 14
     5ae:	c8 f3       	brcs	.-14     	; 0x5a2 <atoi+0x8>
     5b0:	2b 32       	cpi	r18, 0x2B	; 43
     5b2:	41 f0       	breq	.+16     	; 0x5c4 <atoi+0x2a>
     5b4:	2d 32       	cpi	r18, 0x2D	; 45
     5b6:	39 f4       	brne	.+14     	; 0x5c6 <atoi+0x2c>
     5b8:	68 94       	set
     5ba:	04 c0       	rjmp	.+8      	; 0x5c4 <atoi+0x2a>
     5bc:	0e 94 77 03 	call	0x6ee	; 0x6ee <__mulhi_const_10>
     5c0:	82 0f       	add	r24, r18
     5c2:	91 1d       	adc	r25, r1
     5c4:	21 91       	ld	r18, Z+
     5c6:	20 53       	subi	r18, 0x30	; 48
     5c8:	2a 30       	cpi	r18, 0x0A	; 10
     5ca:	c0 f3       	brcs	.-16     	; 0x5bc <atoi+0x22>
     5cc:	1e f4       	brtc	.+6      	; 0x5d4 <atoi+0x3a>
     5ce:	90 95       	com	r25
     5d0:	81 95       	neg	r24
     5d2:	9f 4f       	sbci	r25, 0xFF	; 255
     5d4:	08 95       	ret

000005d6 <strlen_P>:
     5d6:	fc 01       	movw	r30, r24
     5d8:	05 90       	lpm	r0, Z+
     5da:	00 20       	and	r0, r0
     5dc:	e9 f7       	brne	.-6      	; 0x5d8 <strlen_P+0x2>
     5de:	80 95       	com	r24
     5e0:	90 95       	com	r25
     5e2:	8e 0f       	add	r24, r30
     5e4:	9f 1f       	adc	r25, r31
     5e6:	08 95       	ret

000005e8 <memset>:
     5e8:	dc 01       	movw	r26, r24
     5ea:	01 c0       	rjmp	.+2      	; 0x5ee <memset+0x6>
     5ec:	6d 93       	st	X+, r22
     5ee:	41 50       	subi	r20, 0x01	; 1
     5f0:	50 40       	sbci	r21, 0x00	; 0
     5f2:	e0 f7       	brcc	.-8      	; 0x5ec <memset+0x4>
     5f4:	08 95       	ret

000005f6 <strcmp>:
     5f6:	fb 01       	movw	r30, r22
     5f8:	dc 01       	movw	r26, r24
     5fa:	8d 91       	ld	r24, X+
     5fc:	01 90       	ld	r0, Z+
     5fe:	80 19       	sub	r24, r0
     600:	01 10       	cpse	r0, r1
     602:	d9 f3       	breq	.-10     	; 0x5fa <strcmp+0x4>
     604:	99 0b       	sbc	r25, r25
     606:	08 95       	ret

00000608 <strcpy>:
     608:	fb 01       	movw	r30, r22
     60a:	dc 01       	movw	r26, r24
     60c:	01 90       	ld	r0, Z+
     60e:	0d 92       	st	X+, r0
     610:	00 20       	and	r0, r0
     612:	e1 f7       	brne	.-8      	; 0x60c <strcpy+0x4>
     614:	08 95       	ret

00000616 <strncpy>:
     616:	fb 01       	movw	r30, r22
     618:	dc 01       	movw	r26, r24
     61a:	41 50       	subi	r20, 0x01	; 1
     61c:	50 40       	sbci	r21, 0x00	; 0
     61e:	48 f0       	brcs	.+18     	; 0x632 <strncpy+0x1c>
     620:	01 90       	ld	r0, Z+
     622:	0d 92       	st	X+, r0
     624:	00 20       	and	r0, r0
     626:	c9 f7       	brne	.-14     	; 0x61a <strncpy+0x4>
     628:	01 c0       	rjmp	.+2      	; 0x62c <strncpy+0x16>
     62a:	1d 92       	st	X+, r1
     62c:	41 50       	subi	r20, 0x01	; 1
     62e:	50 40       	sbci	r21, 0x00	; 0
     630:	e0 f7       	brcc	.-8      	; 0x62a <strncpy+0x14>
     632:	08 95       	ret

00000634 <strtok_r>:
     634:	00 97       	sbiw	r24, 0x00	; 0
     636:	31 f4       	brne	.+12     	; 0x644 <strtok_r+0x10>
     638:	da 01       	movw	r26, r20
     63a:	8d 91       	ld	r24, X+
     63c:	9c 91       	ld	r25, X
     63e:	00 97       	sbiw	r24, 0x00	; 0
     640:	09 f4       	brne	.+2      	; 0x644 <strtok_r+0x10>
     642:	0e c0       	rjmp	.+28     	; 0x660 <strtok_r+0x2c>
     644:	dc 01       	movw	r26, r24
     646:	fb 01       	movw	r30, r22
     648:	3d 91       	ld	r19, X+
     64a:	21 91       	ld	r18, Z+
     64c:	22 23       	and	r18, r18
     64e:	19 f0       	breq	.+6      	; 0x656 <strtok_r+0x22>
     650:	32 17       	cp	r19, r18
     652:	c9 f3       	breq	.-14     	; 0x646 <strtok_r+0x12>
     654:	fa cf       	rjmp	.-12     	; 0x64a <strtok_r+0x16>
     656:	33 23       	and	r19, r19
     658:	31 f4       	brne	.+12     	; 0x666 <strtok_r+0x32>
     65a:	da 01       	movw	r26, r20
     65c:	1d 92       	st	X+, r1
     65e:	1c 92       	st	X, r1
     660:	88 27       	eor	r24, r24
     662:	99 27       	eor	r25, r25
     664:	08 95       	ret
     666:	11 97       	sbiw	r26, 0x01	; 1
     668:	af 93       	push	r26
     66a:	bf 93       	push	r27
     66c:	fb 01       	movw	r30, r22
     66e:	3d 91       	ld	r19, X+
     670:	21 91       	ld	r18, Z+
     672:	32 17       	cp	r19, r18
     674:	71 f4       	brne	.+28     	; 0x692 <strtok_r+0x5e>
     676:	33 23       	and	r19, r19
     678:	21 f4       	brne	.+8      	; 0x682 <strtok_r+0x4e>
     67a:	88 27       	eor	r24, r24
     67c:	99 27       	eor	r25, r25
     67e:	11 97       	sbiw	r26, 0x01	; 1
     680:	02 c0       	rjmp	.+4      	; 0x686 <strtok_r+0x52>
     682:	1e 92       	st	-X, r1
     684:	11 96       	adiw	r26, 0x01	; 1
     686:	fa 01       	movw	r30, r20
     688:	a1 93       	st	Z+, r26
     68a:	b0 83       	st	Z, r27
     68c:	9f 91       	pop	r25
     68e:	8f 91       	pop	r24
     690:	08 95       	ret
     692:	22 23       	and	r18, r18
     694:	69 f7       	brne	.-38     	; 0x670 <strtok_r+0x3c>
     696:	ea cf       	rjmp	.-44     	; 0x66c <strtok_r+0x38>

00000698 <__eerd_word>:
     698:	df 92       	push	r13
     69a:	ef 92       	push	r14
     69c:	ff 92       	push	r15
     69e:	0f 93       	push	r16
     6a0:	1f 93       	push	r17
     6a2:	7b 01       	movw	r14, r22
     6a4:	8c 01       	movw	r16, r24
     6a6:	fb 01       	movw	r30, r22
     6a8:	09 95       	icall
     6aa:	d8 2e       	mov	r13, r24
     6ac:	c8 01       	movw	r24, r16
     6ae:	01 96       	adiw	r24, 0x01	; 1
     6b0:	f7 01       	movw	r30, r14
     6b2:	09 95       	icall
     6b4:	98 2f       	mov	r25, r24
     6b6:	8d 2d       	mov	r24, r13
     6b8:	1f 91       	pop	r17
     6ba:	0f 91       	pop	r16
     6bc:	ff 90       	pop	r15
     6be:	ef 90       	pop	r14
     6c0:	df 90       	pop	r13
     6c2:	08 95       	ret

000006c4 <__eewr_word>:
     6c4:	df 92       	push	r13
     6c6:	ef 92       	push	r14
     6c8:	ff 92       	push	r15
     6ca:	0f 93       	push	r16
     6cc:	1f 93       	push	r17
     6ce:	d7 2e       	mov	r13, r23
     6d0:	7a 01       	movw	r14, r20
     6d2:	8c 01       	movw	r16, r24
     6d4:	fa 01       	movw	r30, r20
     6d6:	09 95       	icall
     6d8:	c8 01       	movw	r24, r16
     6da:	01 96       	adiw	r24, 0x01	; 1
     6dc:	6d 2d       	mov	r22, r13
     6de:	f7 01       	movw	r30, r14
     6e0:	09 95       	icall
     6e2:	1f 91       	pop	r17
     6e4:	0f 91       	pop	r16
     6e6:	ff 90       	pop	r15
     6e8:	ef 90       	pop	r14
     6ea:	df 90       	pop	r13
     6ec:	08 95       	ret

000006ee <__mulhi_const_10>:
     6ee:	7a e0       	ldi	r23, 0x0A	; 10
     6f0:	97 9f       	mul	r25, r23
     6f2:	90 2d       	mov	r25, r0
     6f4:	87 9f       	mul	r24, r23
     6f6:	80 2d       	mov	r24, r0
     6f8:	91 0d       	add	r25, r1
     6fa:	11 24       	eor	r1, r1
     6fc:	08 95       	ret

000006fe <SimpleTSUint8Sensor::get() const>:
     6fe:	fc 01       	movw	r30, r24
     700:	82 81       	ldd	r24, Z+2	; 0x02
     702:	08 95       	ret

00000704 <SimpleTSUint8Actuator::get() const>:
  public:
    // Return last value fetched by read(); undefined before first read().
    // Usually fast.
    // Often likely to be thread-safe or usable within ISRs (Interrupt Service Routines),
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual uint8_t get() const { return(value); }
     704:	fc 01       	movw	r30, r24
     706:	82 81       	ldd	r24, Z+2	; 0x02
     708:	08 95       	ret

0000070a <AbstractRadValve::isValid(unsigned char) const>:
// Implementations may require poll() called at a fixed rate.
class AbstractRadValve : public SimpleTSUint8Actuator
  {
  public:
    // Returns true if this sensor reading value passed is valid, eg in range [0,100].
    virtual bool isValid(const uint8_t value) const { return(value <= 100); }
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	65 36       	cpi	r22, 0x65	; 101
     70e:	08 f4       	brcc	.+2      	; 0x712 <AbstractRadValve::isValid(unsigned char) const+0x8>
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	08 95       	ret

00000714 <ModelledRadValve::preferredPollInterval_s() const>:
    // Potentially expensive/slow.
    virtual uint8_t read() { computeCallForHeat(); return(value); }

    // Returns preferred poll interval (in seconds); non-zero.
    // Must be polled at near constant rate, about once per minute.
    virtual uint8_t preferredPollInterval_s() const { return(60); }
     714:	8c e3       	ldi	r24, 0x3C	; 60
     716:	08 95       	ret

00000718 <ModelledRadValve::tag() const>:

    // Returns a suggested (JSON) tag/field/key name including units of get(); NULL means no recommended tag.
    // The lifetime of the pointed-to text must be at least that of the Sensor instance.
    virtual const char *tag() const { return("v|%"); }
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	91 e0       	ldi	r25, 0x01	; 1
     71c:	08 95       	ret

0000071e <ModelledRadValve::getMinPercentOpen() const>:
// At the boiler hub this is also the threshold percentage-open on eavesdropped requests that will call for heat.
// If no override is set then DEFAULT_MIN_VALVE_PC_REALLY_OPEN is used.
// NOTE: raising this value temporarily (and shutting down the boiler immediately if possible) is one way to implement dynamic demand.
uint8_t ModelledRadValve::getMinValvePcReallyOpen()
  {
  if(0 != mVPRO_cache) { return(mVPRO_cache); } // Return cached value if possible.
     71e:	90 91 3b 02 	lds	r25, 0x023B
     722:	99 23       	and	r25, r25
     724:	79 f4       	brne	.+30     	; 0x744 <ModelledRadValve::getMinPercentOpen() const+0x26>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     726:	f9 99       	sbic	0x1f, 1	; 31
     728:	fe cf       	rjmp	.-4      	; 0x726 <ModelledRadValve::getMinPercentOpen() const+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     72a:	83 e1       	ldi	r24, 0x13	; 19
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	92 bd       	out	0x22, r25	; 34
     730:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     732:	f8 9a       	sbi	0x1f, 0	; 31
     734:	90 b5       	in	r25, 0x20	; 32
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_MIN_VALVE_PC_REALLY_OPEN);
  const uint8_t result = ((stored > 0) && (stored <= 100)) ? stored : DEFAULT_MIN_VALVE_PC_REALLY_OPEN;
     736:	89 2f       	mov	r24, r25
     738:	81 50       	subi	r24, 0x01	; 1
     73a:	84 36       	cpi	r24, 0x64	; 100
     73c:	08 f0       	brcs	.+2      	; 0x740 <ModelledRadValve::getMinPercentOpen() const+0x22>
     73e:	9a e0       	ldi	r25, 0x0A	; 10
  mVPRO_cache = result; // Cache it.
     740:	90 93 3b 02 	sts	0x023B, r25
    // then this should return true if any of the valves are (significantly) open.
    virtual bool isControlledValveReallyOpen() const;

    // Get estimated minimum percentage open for significant flow [1,99] for this device.
    // Return global node value.
    virtual uint8_t getMinPercentOpen() const { return(getMinValvePcReallyOpen()); }
     744:	89 2f       	mov	r24, r25
     746:	08 95       	ret

00000748 <OccupancyTracker::isValid(unsigned char) const>:
    // Poll at a fixed rate.
    virtual uint8_t read();

    // Returns true if this sensor reading value passed is potentially valid, eg in-range.
    // True if in range [0,100].
    virtual bool isValid(uint8_t value) const { return(value <= 100); }
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	65 36       	cpi	r22, 0x65	; 101
     74c:	08 f4       	brcc	.+2      	; 0x750 <OccupancyTracker::isValid(unsigned char) const+0x8>
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	08 95       	ret

00000752 <OccupancyTracker::preferredPollInterval_s() const>:

    // This routine should be called once per minute.
    virtual uint8_t preferredPollInterval_s() const { return(60); }
     752:	8c e3       	ldi	r24, 0x3C	; 60
     754:	08 95       	ret

00000756 <OccupancyTracker::tag() const>:

    // Recommended JSON tag for full value; not NULL.
    virtual const char *tag() const { return("occ|%"); }
     756:	84 e0       	ldi	r24, 0x04	; 4
     758:	91 e0       	ldi	r25, 0x01	; 1
     75a:	08 95       	ret

0000075c <inWarmMode()>:
// If true then is in WARM (or BAKE) mode; defaults to (starts as) false/FROST.
// Should be only be set when 'debounced'.
// Defaults to (starts as) false/FROST.
static bool isWarmMode;
// If true then the unit is in 'warm' (heating) mode, else 'frost' protection mode.
bool inWarmMode() { return(isWarmMode); }
     75c:	80 91 9c 02 	lds	r24, 0x029C
     760:	08 95       	ret

00000762 <setWarmModeDebounced(bool)>:
  DEBUG_SERIAL_PRINT_FLASHSTRING("Call to setWarmModeDebounced(");
  DEBUG_SERIAL_PRINT(warm);
  DEBUG_SERIAL_PRINT_FLASHSTRING(")");
  DEBUG_SERIAL_PRINTLN();
#endif
  isWarmMode = warm;
     762:	80 93 9c 02 	sts	0x029C, r24
#ifdef SUPPORT_BAKE
  if(!warm) { cancelBakeDebounced(); }
     766:	88 23       	and	r24, r24
     768:	11 f4       	brne	.+4      	; 0x76e <setWarmModeDebounced(bool)+0xc>
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// Should be only be called once 'debounced' if coming from a button press for example.
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBakeDebounced() { bakeCountdownM = 0; }
     76a:	10 92 99 02 	sts	0x0299, r1
     76e:	08 95       	ret

00000770 <inBakeMode()>:

#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
     770:	80 91 9c 02 	lds	r24, 0x029C
     774:	88 23       	and	r24, r24
     776:	21 f0       	breq	.+8      	; 0x780 <inBakeMode()+0x10>
     778:	80 91 99 02 	lds	r24, 0x0299
     77c:	81 11       	cpse	r24, r1
     77e:	81 e0       	ldi	r24, 0x01	; 1
     780:	08 95       	ret

00000782 <cancelBakeDebounced()>:
// Should be only be called once 'debounced' if coming from a button press for example.
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBakeDebounced() { bakeCountdownM = 0; }
     782:	10 92 99 02 	sts	0x0299, r1
     786:	08 95       	ret

00000788 <startBakeDebounced()>:
// Start/restart 'BAKE' mode and timeout.
// Should be only be called once 'debounced' if coming from a button press for example.
void startBakeDebounced() { isWarmMode = true; bakeCountdownM = BAKE_MAX_M; }
     788:	81 e0       	ldi	r24, 0x01	; 1
     78a:	80 93 9c 02 	sts	0x029C, r24
     78e:	8e e1       	ldi	r24, 0x1E	; 30
     790:	80 93 99 02 	sts	0x0299, r24
     794:	08 95       	ret

00000796 <getWARMTargetC()>:
     796:	20 91 c9 03 	lds	r18, 0x03C9
  // Cached input and result values; initially zero.
  static uint8_t potLast;
  static uint8_t resultLast;
  // Force recomputation if pot value changed
  // or apparently no calc done yet (unlikely/impossible zero cached result).
  if((potLast != pot) || (0 == resultLast))
     79a:	80 91 9b 02 	lds	r24, 0x029B
     79e:	82 17       	cp	r24, r18
     7a0:	21 f4       	brne	.+8      	; 0x7aa <getWARMTargetC()+0x14>
     7a2:	80 91 9a 02 	lds	r24, 0x029A
     7a6:	88 23       	and	r24, r24
     7a8:	99 f4       	brne	.+38     	; 0x7d0 <getWARMTargetC()+0x3a>
  const uint8_t range = TEMP_SCALE_MAX - TEMP_SCALE_MIN + 1;
  const uint8_t band = 256 / range; // Width of band for each degree C...

  // If there are is relatively small number of distinct temperature values
  // then compute result iteratively...
  if(pot >= 256 - band) { return(TEMP_SCALE_MAX); } // At top... (optimisation / robustness)
     7aa:	2c 3d       	cpi	r18, 0xDC	; 220
     7ac:	10 f0       	brcs	.+4      	; 0x7b2 <getWARMTargetC()+0x1c>
     7ae:	86 e1       	ldi	r24, 0x16	; 22
     7b0:	0b c0       	rjmp	.+22     	; 0x7c8 <getWARMTargetC()+0x32>
  if(pot < band) { return(TEMP_SCALE_MIN); } // At bottom... (optimisation / robustness)
     7b2:	24 32       	cpi	r18, 0x24	; 36
     7b4:	10 f4       	brcc	.+4      	; 0x7ba <getWARMTargetC()+0x24>
     7b6:	80 e1       	ldi	r24, 0x10	; 16
     7b8:	07 c0       	rjmp	.+14     	; 0x7c8 <getWARMTargetC()+0x32>
     7ba:	98 e4       	ldi	r25, 0x48	; 72
     7bc:	81 e1       	ldi	r24, 0x11	; 17
     7be:	02 c0       	rjmp	.+4      	; 0x7c4 <getWARMTargetC()+0x2e>
  if(range < 10)
    {
    uint8_t result = TEMP_SCALE_MIN+1;
    for(uint8_t ppot = band<<1; ppot < pot; ++result) { ppot += band; }
     7c0:	9c 5d       	subi	r25, 0xDC	; 220
     7c2:	8f 5f       	subi	r24, 0xFF	; 255
     7c4:	92 17       	cp	r25, r18
     7c6:	e0 f3       	brcs	.-8      	; 0x7c0 <getWARMTargetC()+0x2a>
  // or apparently no calc done yet (unlikely/impossible zero cached result).
  if((potLast != pot) || (0 == resultLast))
    {
    const uint8_t result = computeWARMTargetC(pot);
    // Cache input/result.
    resultLast = result;
     7c8:	80 93 9a 02 	sts	0x029A, r24
    potLast = pot;
     7cc:	20 93 9b 02 	sts	0x029B, r18
    return(result);
    }

  // Return cached result.
  return(resultLast);
  }
     7d0:	08 95       	ret

000007d2 <hasEcoBias()>:
//// Optimisiation/simplication: true if temp pot less than about half way.
//bool hasEcoBias() { return(TempPot.get() <= 128); }
//#else
// True if WARM temperature at/below halfway mark between eco and comfort levels.
// Midpoint should be just eco to provide a system bias toward eco.
bool hasEcoBias() { return(getWARMTargetC() <= TEMP_SCALE_MID); }
     7d2:	0e 94 cb 03 	call	0x796	; 0x796 <getWARMTargetC()>
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	84 31       	cpi	r24, 0x14	; 20
     7da:	08 f4       	brcc	.+2      	; 0x7de <hasEcoBias()+0xc>
     7dc:	91 e0       	ldi	r25, 0x01	; 1
     7de:	89 2f       	mov	r24, r25
     7e0:	08 95       	ret

000007e2 <getFROSTTargetC()>:
#if defined(TEMP_POT_AVAILABLE)
// Derived from temperature pot position.
uint8_t getFROSTTargetC()
  {
  // Prevent falling to lowest frost temperature if relative humidity is high (eg to avoid mould).
  const uint8_t result = (!hasEcoBias() || (RelHumidity.isAvailable() && RelHumidity.isRHHighWithHyst())) ? BIASCOM_FROST : BIASECO_FROST;
     7e2:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <hasEcoBias()>
     7e6:	88 23       	and	r24, r24
     7e8:	31 f0       	breq	.+12     	; 0x7f6 <getFROSTTargetC()+0x14>
    // Thread-safe and usable within ISRs (Interrupt Service Routines).
    bool isRHHigh() { return(get() > (HUMIDTY_HIGH_RHPC+HUMIDITY_EPSILON_RHPC)); }

    // True if RH% high with a hysteresis band of 2 * HUMIDITY_EPSILON_RHPC.
    // Thread-safe and usable within ISRs (Interrupt Service Routines).
    bool isRHHighWithHyst() { return(highWithHyst); }
     7ea:	80 91 c2 03 	lds	r24, 0x03C2
     7ee:	88 23       	and	r24, r24
     7f0:	11 f4       	brne	.+4      	; 0x7f6 <getFROSTTargetC()+0x14>
     7f2:	27 e0       	ldi	r18, 0x07	; 7
     7f4:	01 c0       	rjmp	.+2      	; 0x7f8 <getFROSTTargetC()+0x16>
     7f6:	2c e0       	ldi	r18, 0x0C	; 12
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     7f8:	f9 99       	sbic	0x1f, 1	; 31
     7fa:	fe cf       	rjmp	.-4      	; 0x7f8 <getFROSTTargetC()+0x16>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     7fc:	8e e0       	ldi	r24, 0x0E	; 14
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	92 bd       	out	0x22, r25	; 34
     802:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     804:	f8 9a       	sbi	0x1f, 0	; 31
     806:	90 b5       	in	r25, 0x20	; 32
#if defined(SETTABLE_TARGET_TEMPERATURES)
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_FROST_C);
  // If stored value is set and in bounds and higher than computed value then use stored value instead.
  if((stored >= MIN_TARGET_C) && (stored <= MAX_TARGET_C) && (stored > result)) { return(stored); }
     808:	89 2f       	mov	r24, r25
     80a:	85 50       	subi	r24, 0x05	; 5
     80c:	8b 35       	cpi	r24, 0x5B	; 91
     80e:	10 f0       	brcs	.+4      	; 0x814 <getFROSTTargetC()+0x32>
     810:	82 2f       	mov	r24, r18
     812:	08 95       	ret
     814:	89 2f       	mov	r24, r25
     816:	92 17       	cp	r25, r18
     818:	08 f4       	brcc	.+2      	; 0x81c <getFROSTTargetC()+0x3a>
     81a:	82 2f       	mov	r24, r18
#endif
  return(result);
  }
     81c:	08 95       	ret

0000081e <getMinBoilerOnMinutes()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     81e:	f9 99       	sbic	0x1f, 1	; 31
     820:	fe cf       	rjmp	.-4      	; 0x81e <getMinBoilerOnMinutes()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     822:	82 e1       	ldi	r24, 0x12	; 18
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	92 bd       	out	0x22, r25	; 34
     828:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     82a:	f8 9a       	sbi	0x1f, 0	; 31
     82c:	80 b5       	in	r24, 0x20	; 32
#endif


#ifndef getMinBoilerOnMinutes
// Get minimum on (and off) time for pointer (minutes); zero if not in hub mode.
uint8_t getMinBoilerOnMinutes() { return(~eeprom_read_byte((uint8_t *)EE_START_MIN_BOILER_ON_MINS_INV)); }
     82e:	80 95       	com	r24
     830:	08 95       	ret

00000832 <OccupancyTracker::read()>:
#elif OCCUPATION_TIMEOUT_M <= 100
#define OCCCP_SHIFT 0
#endif

// Update notion of occupancy confidence.
uint8_t OccupancyTracker::read()
     832:	df 93       	push	r29
     834:	cf 93       	push	r28
     836:	00 d0       	rcall	.+0      	; 0x838 <OccupancyTracker::read()+0x6>
     838:	cd b7       	in	r28, 0x3d	; 61
     83a:	de b7       	in	r29, 0x3e	; 62
     83c:	fc 01       	movw	r30, r24
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
     83e:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     840:	f8 94       	cli
    {
    // Compute as percentage.
    const uint8_t newValue = (0 == occupationCountdownM) ? 0 :
        fnmin((uint8_t)((uint8_t)100 - (uint8_t)((((uint8_t)OCCUPATION_TIMEOUT_M) - occupationCountdownM) << OCCCP_SHIFT)), (uint8_t)100);
     842:	83 81       	ldd	r24, Z+3	; 0x03
     844:	88 23       	and	r24, r24
     846:	11 f4       	brne	.+4      	; 0x84c <OccupancyTracker::read()+0x1a>
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	0d c0       	rjmp	.+26     	; 0x866 <OccupancyTracker::read()+0x34>
     84c:	83 81       	ldd	r24, Z+3	; 0x03
     84e:	92 e3       	ldi	r25, 0x32	; 50
     850:	98 1b       	sub	r25, r24
     852:	99 0f       	add	r25, r25
     854:	84 e6       	ldi	r24, 0x64	; 100
     856:	38 2f       	mov	r19, r24
     858:	39 1b       	sub	r19, r25
     85a:	93 2f       	mov	r25, r19
     85c:	39 83       	std	Y+1, r19	; 0x01
     85e:	8a 83       	std	Y+2, r24	; 0x02




// Templated function versions of min/max that do not evaluate the arguments twice.
template <class T> const T& fnmin(const T& a, const T& b) { return((a>b)?b:a); }
     860:	35 36       	cpi	r19, 0x65	; 101
     862:	08 f0       	brcs	.+2      	; 0x866 <OccupancyTracker::read()+0x34>
     864:	94 e6       	ldi	r25, 0x64	; 100
    value = newValue;
     866:	92 83       	std	Z+2, r25	; 0x02
    // Run down occupation timer (or run up vacancy time) if need be.
    if(occupationCountdownM > 0) { --occupationCountdownM; vacancyM = 0; vacancyH = 0; }
     868:	83 81       	ldd	r24, Z+3	; 0x03
     86a:	88 23       	and	r24, r24
     86c:	31 f0       	breq	.+12     	; 0x87a <OccupancyTracker::read()+0x48>
     86e:	83 81       	ldd	r24, Z+3	; 0x03
     870:	81 50       	subi	r24, 0x01	; 1
     872:	83 83       	std	Z+3, r24	; 0x03
     874:	16 82       	std	Z+6, r1	; 0x06
     876:	15 82       	std	Z+5, r1	; 0x05
     878:	0b c0       	rjmp	.+22     	; 0x890 <OccupancyTracker::read()+0x5e>
    else if(vacancyH < 0xffU) { if(++vacancyM >= 60) { vacancyM = 0; ++vacancyH; } }
     87a:	95 81       	ldd	r25, Z+5	; 0x05
     87c:	9f 3f       	cpi	r25, 0xFF	; 255
     87e:	41 f0       	breq	.+16     	; 0x890 <OccupancyTracker::read()+0x5e>
     880:	86 81       	ldd	r24, Z+6	; 0x06
     882:	8f 5f       	subi	r24, 0xFF	; 255
     884:	86 83       	std	Z+6, r24	; 0x06
     886:	8c 33       	cpi	r24, 0x3C	; 60
     888:	18 f0       	brcs	.+6      	; 0x890 <OccupancyTracker::read()+0x5e>
     88a:	16 82       	std	Z+6, r1	; 0x06
     88c:	9f 5f       	subi	r25, 0xFF	; 255
     88e:	95 83       	std	Z+5, r25	; 0x05
    // Run down 'recent activity' timer.
    if(activityCountdownM > 0) { --activityCountdownM; }
     890:	84 81       	ldd	r24, Z+4	; 0x04
     892:	88 23       	and	r24, r24
     894:	19 f0       	breq	.+6      	; 0x89c <OccupancyTracker::read()+0x6a>
     896:	84 81       	ldd	r24, Z+4	; 0x04
     898:	81 50       	subi	r24, 0x01	; 1
     89a:	84 83       	std	Z+4, r24	; 0x04
    return(value);
     89c:	82 81       	ldd	r24, Z+2	; 0x02
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     89e:	2f bf       	out	0x3f, r18	; 63
    }
  }
     8a0:	0f 90       	pop	r0
     8a2:	0f 90       	pop	r0
     8a4:	cf 91       	pop	r28
     8a6:	df 91       	pop	r29
     8a8:	08 95       	ret

000008aa <OccupancyTracker::markAsPossiblyOccupied()>:

// Call when some/weak evidence of room occupation, such as a light being turned on.
// Do not call based on internal/synthetic events.
// Doesn't force the room to appear recently occupied.
// Thread-safe.
void OccupancyTracker::markAsPossiblyOccupied()
     8aa:	df 93       	push	r29
     8ac:	cf 93       	push	r28
     8ae:	00 d0       	rcall	.+0      	; 0x8b0 <OccupancyTracker::markAsPossiblyOccupied()+0x6>
     8b0:	cd b7       	in	r28, 0x3d	; 61
     8b2:	de b7       	in	r29, 0x3e	; 62
     8b4:	fc 01       	movw	r30, r24
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
     8b6:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     8b8:	f8 94       	cli
    {
    occupationCountdownM = fnmax((uint8_t)occupationCountdownM, (uint8_t)(OCCUPATION_TIMEOUT_1_M));
     8ba:	93 81       	ldd	r25, Z+3	; 0x03
template <class T> const T& fnmax(const T& a, const T& b) { return((a<b)?b:a); }
     8bc:	91 32       	cpi	r25, 0x21	; 33
     8be:	10 f4       	brcc	.+4      	; 0x8c4 <OccupancyTracker::markAsPossiblyOccupied()+0x1a>
     8c0:	81 e2       	ldi	r24, 0x21	; 33
     8c2:	01 c0       	rjmp	.+2      	; 0x8c6 <OccupancyTracker::markAsPossiblyOccupied()+0x1c>
     8c4:	89 2f       	mov	r24, r25
     8c6:	83 83       	std	Z+3, r24	; 0x03
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     8c8:	2f bf       	out	0x3f, r18	; 63
     8ca:	81 e2       	ldi	r24, 0x21	; 33
     8cc:	8a 83       	std	Y+2, r24	; 0x02
     8ce:	99 83       	std	Y+1, r25	; 0x01
    }
  activityCountdownM = 2;
     8d0:	82 e0       	ldi	r24, 0x02	; 2
     8d2:	84 83       	std	Z+4, r24	; 0x04
  }
     8d4:	0f 90       	pop	r0
     8d6:	0f 90       	pop	r0
     8d8:	cf 91       	pop	r28
     8da:	df 91       	pop	r29
     8dc:	08 95       	ret

000008de <ModelledRadValve::getMinValvePcReallyOpen()>:
// At the boiler hub this is also the threshold percentage-open on eavesdropped requests that will call for heat.
// If no override is set then DEFAULT_MIN_VALVE_PC_REALLY_OPEN is used.
// NOTE: raising this value temporarily (and shutting down the boiler immediately if possible) is one way to implement dynamic demand.
uint8_t ModelledRadValve::getMinValvePcReallyOpen()
  {
  if(0 != mVPRO_cache) { return(mVPRO_cache); } // Return cached value if possible.
     8de:	80 91 3b 02 	lds	r24, 0x023B
     8e2:	88 23       	and	r24, r24
     8e4:	89 f4       	brne	.+34     	; 0x908 <__stack+0x9>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     8e6:	f9 99       	sbic	0x1f, 1	; 31
     8e8:	fe cf       	rjmp	.-4      	; 0x8e6 <ModelledRadValve::getMinValvePcReallyOpen()+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     8ea:	83 e1       	ldi	r24, 0x13	; 19
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	92 bd       	out	0x22, r25	; 34
     8f0:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     8f2:	f8 9a       	sbi	0x1f, 0	; 31
     8f4:	90 b5       	in	r25, 0x20	; 32
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_MIN_VALVE_PC_REALLY_OPEN);
  const uint8_t result = ((stored > 0) && (stored <= 100)) ? stored : DEFAULT_MIN_VALVE_PC_REALLY_OPEN;
     8f6:	89 2f       	mov	r24, r25
     8f8:	81 50       	subi	r24, 0x01	; 1
     8fa:	84 36       	cpi	r24, 0x64	; 100
     8fc:	10 f0       	brcs	.+4      	; 0x902 <__stack+0x3>
     8fe:	8a e0       	ldi	r24, 0x0A	; 10
     900:	01 c0       	rjmp	.+2      	; 0x904 <__stack+0x5>
     902:	89 2f       	mov	r24, r25
  mVPRO_cache = result; // Cache it.
     904:	80 93 3b 02 	sts	0x023B, r24
  return(result);
  }
     908:	08 95       	ret

0000090a <ModelledRadValveState::getSmoothedRecent()>:
  inputState.setReferenceTemperatures(TemperatureC16.get());
  callingForHeat = (newTarget >= (inputState.refTempC16 >> 4));
  }

// Get smoothed raw/unadjusted temperature from the most recent samples.
int ModelledRadValveState::getSmoothedRecent()
     90a:	fc 01       	movw	r30, r24
template<size_t N> int smallIntMean(const int data[N])
  {
  // Extract mean.
  // Assume values and sum will be nowhere near the limits.
  int sum = 0;
  for(int8_t i = N; --i >= 0; ) { sum += data[i]; }
     90c:	83 85       	ldd	r24, Z+11	; 0x0b
     90e:	94 85       	ldd	r25, Z+12	; 0x0c
     910:	25 85       	ldd	r18, Z+13	; 0x0d
     912:	36 85       	ldd	r19, Z+14	; 0x0e
     914:	82 0f       	add	r24, r18
     916:	93 1f       	adc	r25, r19
     918:	21 85       	ldd	r18, Z+9	; 0x09
     91a:	32 85       	ldd	r19, Z+10	; 0x0a
     91c:	82 0f       	add	r24, r18
     91e:	93 1f       	adc	r25, r19
     920:	27 81       	ldd	r18, Z+7	; 0x07
     922:	30 85       	ldd	r19, Z+8	; 0x08
     924:	82 0f       	add	r24, r18
     926:	93 1f       	adc	r25, r19
     928:	02 96       	adiw	r24, 0x02	; 2
     92a:	64 e0       	ldi	r22, 0x04	; 4
     92c:	70 e0       	ldi	r23, 0x00	; 0
     92e:	0e 94 e0 3d 	call	0x7bc0	; 0x7bc0 <__divmodhi4>
     932:	cb 01       	movw	r24, r22
  { return(smallIntMean<filterLength/2>(prevRawTempC16)); }
     934:	08 95       	ret

00000936 <ModelledRadValveState::getVelocityC16PerTick()>:

// Compute an estimate of rate/velocity of temperature change in C/16 per minute/tick.
// A positive value indicates that temperature is rising.
// Based on comparing the most recent smoothed value with an older smoothed value.
int ModelledRadValveState::getVelocityC16PerTick()
     936:	cf 93       	push	r28
     938:	df 93       	push	r29
     93a:	ac 01       	movw	r20, r24
     93c:	fc 01       	movw	r30, r24
     93e:	3f 96       	adiw	r30, 0x0f	; 15
     940:	24 e0       	ldi	r18, 0x04	; 4
     942:	c0 e0       	ldi	r28, 0x00	; 0
     944:	d0 e0       	ldi	r29, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <ModelledRadValveState::getVelocityC16PerTick()+0x1a>
     948:	80 85       	ldd	r24, Z+8	; 0x08
     94a:	91 85       	ldd	r25, Z+9	; 0x09
     94c:	c8 0f       	add	r28, r24
     94e:	d9 1f       	adc	r29, r25
     950:	21 50       	subi	r18, 0x01	; 1
     952:	32 97       	sbiw	r30, 0x02	; 2
     954:	2f 3f       	cpi	r18, 0xFF	; 255
     956:	c1 f7       	brne	.-16     	; 0x948 <ModelledRadValveState::getVelocityC16PerTick()+0x12>
  {
  const int oldSmoothed = smallIntMean<filterLength/2>(prevRawTempC16 + (filterLength/2));
  const int newSmoothed = getSmoothedRecent();
     958:	ca 01       	movw	r24, r20
     95a:	0e 94 85 04 	call	0x90a	; 0x90a <ModelledRadValveState::getSmoothedRecent()>
     95e:	9c 01       	movw	r18, r24
     960:	2e 5f       	subi	r18, 0xFE	; 254
     962:	3f 4f       	sbci	r19, 0xFF	; 255
     964:	ce 01       	movw	r24, r28
     966:	02 96       	adiw	r24, 0x02	; 2
     968:	64 e0       	ldi	r22, 0x04	; 4
     96a:	70 e0       	ldi	r23, 0x00	; 0
     96c:	0e 94 e0 3d 	call	0x7bc0	; 0x7bc0 <__divmodhi4>
     970:	c9 01       	movw	r24, r18
     972:	86 1b       	sub	r24, r22
     974:	97 0b       	sbc	r25, r23
     976:	64 e0       	ldi	r22, 0x04	; 4
     978:	70 e0       	ldi	r23, 0x00	; 0
     97a:	0e 94 e0 3d 	call	0x7bc0	; 0x7bc0 <__divmodhi4>
     97e:	cb 01       	movw	r24, r22
//DEBUG_SERIAL_PRINT(newSmoothed);
//DEBUG_SERIAL_PRINT(',');
//DEBUG_SERIAL_PRINT(velocity);
//DEBUG_SERIAL_PRINTLN();
  return(velocity);
  }
     980:	df 91       	pop	r29
     982:	cf 91       	pop	r28
     984:	08 95       	ret

00000986 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)>:
// Is always willing to turn off quickly, but on slowly (AKA "slow start" algorithm),
// and tries to eliminate unnecessary 'hunting' which makes noise and uses actuator energy.
// Nominally called at a regular rate, once per minute.
// All inputState values should be set to sensible values before starting.
// Usually called by tick() which does required state updates afterwards.
uint8_t ModelledRadValve::computeRequiredTRVPercentOpen(const uint8_t valvePCOpen, const struct ModelledRadValveInputState &inputState, struct ModelledRadValveState &retainedState)
     986:	df 92       	push	r13
     988:	ef 92       	push	r14
     98a:	ff 92       	push	r15
     98c:	0f 93       	push	r16
     98e:	1f 93       	push	r17
     990:	cf 93       	push	r28
     992:	df 93       	push	r29
     994:	f8 2e       	mov	r15, r24
     996:	eb 01       	movw	r28, r22
     998:	8a 01       	movw	r16, r20
DEBUG_SERIAL_PRINT(inputState.refTempC);
DEBUG_SERIAL_PRINTLN();
#endif

  // Possibly-adjusted and.or smoothed temperature to use for targetting.
  const int adjustedTempC16 = retainedState.isFiltering ? (retainedState.getSmoothedRecent() + refTempOffsetC16) : inputState.refTempC16;
     99a:	fa 01       	movw	r30, r20
     99c:	81 81       	ldd	r24, Z+1	; 0x01
     99e:	88 23       	and	r24, r24
     9a0:	39 f0       	breq	.+14     	; 0x9b0 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x2a>
     9a2:	ca 01       	movw	r24, r20
     9a4:	0e 94 85 04 	call	0x90a	; 0x90a <ModelledRadValveState::getSmoothedRecent()>
     9a8:	9c 01       	movw	r18, r24
     9aa:	28 5f       	subi	r18, 0xF8	; 248
     9ac:	3f 4f       	sbci	r19, 0xFF	; 255
     9ae:	02 c0       	rjmp	.+4      	; 0x9b4 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x2e>
     9b0:	2c 81       	ldd	r18, Y+4	; 0x04
     9b2:	3d 81       	ldd	r19, Y+5	; 0x05
  const int8_t adjustedTempC = (adjustedTempC16 >> 4);

  // (Well) under temp target: open valve up.
  if(adjustedTempC < inputState.targetTempC)
     9b4:	c9 01       	movw	r24, r18
     9b6:	34 e0       	ldi	r19, 0x04	; 4
     9b8:	95 95       	asr	r25
     9ba:	87 95       	ror	r24
     9bc:	3a 95       	dec	r19
     9be:	e1 f7       	brne	.-8      	; 0x9b8 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x32>
     9c0:	48 2f       	mov	r20, r24
     9c2:	55 27       	eor	r21, r21
     9c4:	47 fd       	sbrc	r20, 7
     9c6:	50 95       	com	r21
     9c8:	88 81       	ld	r24, Y
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	48 17       	cp	r20, r24
     9ce:	59 07       	cpc	r21, r25
     9d0:	1c f5       	brge	.+70     	; 0xa18 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x92>
//DEBUG_SERIAL_PRINTLN_FLASHSTRING("well under temp");
    // Limit valve open slew to help minimise overshoot and actuator noise.
    // This should also reduce nugatory setting changes when occupancy (etc) is fluctuating.
    // Thus it may take several minutes to turn the radiator fully on,
    // though probably opening the first ~33% will allow near-maximum heat output in practice.
    if(valvePCOpen < inputState.maxPCOpen)
     9d2:	9a 81       	ldd	r25, Y+2	; 0x02
     9d4:	f9 16       	cp	r15, r25
     9d6:	08 f0       	brcs	.+2      	; 0x9da <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x54>
     9d8:	b2 c0       	rjmp	.+356    	; 0xb3e <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x1b8>
      {
#if defined(SUPPORT_BAKE)
      // If room is well below target and in BAKE mode then immediately open to maximum.
      // Need debounced bake mode value to avoid spurious slamming open of the valve as the user cycles through modes.
      if(inputState.inBakeMode) { return(inputState.maxPCOpen); }
     9da:	2b 81       	ldd	r18, Y+3	; 0x03
     9dc:	23 fd       	sbrc	r18, 3
     9de:	af c0       	rjmp	.+350    	; 0xb3e <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x1b8>
#endif

      // Reduce valve hunting: defer re-opening if recently closed.
      if(retainedState.dontTurnup()) { return(valvePCOpen); }
     9e0:	f8 01       	movw	r30, r16
     9e2:	85 81       	ldd	r24, Z+5	; 0x05
     9e4:	88 23       	and	r24, r24
     9e6:	09 f0       	breq	.+2      	; 0x9ea <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x64>
     9e8:	a7 c0       	rjmp	.+334    	; 0xb38 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x1b2>
// or if there is a huge range of temperatures in recent history.
// Note that pseudo overshoots may be seen as the target temperature steps down.
static bool glacialOn(const struct ModelledRadValveInputState &inputState, struct ModelledRadValveState &retainedState)
  {
  // True if in glacial mode.
  if(inputState.glacial) { return(true); }
     9ea:	21 ff       	sbrs	r18, 1
     9ec:	b1 c0       	rjmp	.+354    	; 0xb50 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x1ca>
     9ee:	9b c0       	rjmp	.+310    	; 0xb26 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x1a0>
      if(beGlacial) { return(valvePCOpen + 1); }

      // Ensure open quickly from cold for acceptable response.
      // Less fast in eco mode (to reduce overshoot risk) and even less fast if also already moderately open.
      const uint8_t slewRate = ((!inputState.hasEcoBias) ? TRV_SLEW_PC_PER_MIN_VFAST :
          ((valvePCOpen >= DEFAULT_VALVE_PC_MODERATELY_OPEN) ? TRV_MAX_SLEW_PC_PER_MIN : TRV_SLEW_PC_PER_MIN_FAST));
     9f0:	f0 e2       	ldi	r31, 0x20	; 32
     9f2:	ff 15       	cp	r31, r15
     9f4:	10 f0       	brcs	.+4      	; 0x9fa <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x74>
     9f6:	2a e0       	ldi	r18, 0x0A	; 10
     9f8:	01 c0       	rjmp	.+2      	; 0x9fc <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x76>
     9fa:	25 e0       	ldi	r18, 0x05	; 5
     9fc:	69 81       	ldd	r22, Y+1	; 0x01
     9fe:	42 2f       	mov	r20, r18
     a00:	26 17       	cp	r18, r22
     a02:	08 f4       	brcc	.+2      	; 0xa06 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x80>
     a04:	46 2f       	mov	r20, r22
      const uint8_t minOpenFromCold = fnmax(slewRate, inputState.minPCOpen);
      // Open to 'minimum' likely open state immediately if less open currently.
      if(valvePCOpen < minOpenFromCold) { return(minOpenFromCold); }
     a06:	f4 16       	cp	r15, r20
     a08:	08 f4       	brcc	.+2      	; 0xa0c <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x86>
     a0a:	98 c0       	rjmp	.+304    	; 0xb3c <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x1b6>
      // Slew open relatively gently...
      return(fnmin((uint8_t)(valvePCOpen + slewRate), inputState.maxPCOpen)); // Capped at maximum.
     a0c:	2f 0d       	add	r18, r15
     a0e:	29 17       	cp	r18, r25
     a10:	08 f0       	brcs	.+2      	; 0xa14 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x8e>
     a12:	95 c0       	rjmp	.+298    	; 0xb3e <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x1b8>
     a14:	92 2f       	mov	r25, r18
     a16:	93 c0       	rjmp	.+294    	; 0xb3e <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x1b8>
    // Keep open at maximum allowed.
    return(inputState.maxPCOpen);
    }

  // (Well) over temp target: close valve down.
  if(adjustedTempC > inputState.targetTempC)
     a18:	84 17       	cp	r24, r20
     a1a:	95 07       	cpc	r25, r21
     a1c:	c4 f5       	brge	.+112    	; 0xa8e <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x108>
//    // Note that spurious overshoots may be triggered seen
//    // if the target temperature drops while is still calling for heat.
//    if((adjustedTempC > inputState.targetTempC + 1) && (0 != valvePCOpen) && (!inputState.inBakeMode))
//      { retainedState.noteOvershoot(); }

    if(0 != valvePCOpen)
     a1e:	ff 20       	and	r15, r15
     a20:	09 f4       	brne	.+2      	; 0xa24 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x9e>
     a22:	8a c0       	rjmp	.+276    	; 0xb38 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x1b2>
      {
      // Reduce valve hunting: defer re-closing if recently opened.
      if(retainedState.dontTurndown()) { return(valvePCOpen); }
     a24:	f8 01       	movw	r30, r16
     a26:	86 81       	ldd	r24, Z+6	; 0x06
     a28:	88 23       	and	r24, r24
     a2a:	09 f0       	breq	.+2      	; 0xa2e <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0xa8>
     a2c:	85 c0       	rjmp	.+266    	; 0xb38 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x1b2>

      // Continue shutting valve as not yet closed.
      // TODO-117: allow very slow final turn off to help systems with poor bypass, ~1% per minute.
      // Special slow-turn-off rules for final part of travel at/below DEFAULT_MIN_VALVE_PC_REALLY_OPEN floor.
      const uint8_t minReallyOpen = inputState.minPCOpen;
     a2e:	89 81       	ldd	r24, Y+1	; 0x01
      const uint8_t lingerThreshold = (minReallyOpen > 0) ? (minReallyOpen-1) : 0;
     a30:	88 23       	and	r24, r24
     a32:	99 f0       	breq	.+38     	; 0xa5a <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0xd4>
//      const uint8_t lingerThreshold = DEFAULT_MIN_VALVE_PC_REALLY_OPEN - 1; // Should be below 'call for heat' threshold.
      if(valvePCOpen < minReallyOpen)
     a34:	f8 16       	cp	r15, r24
     a36:	18 f0       	brcs	.+6      	; 0xa3e <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0xb8>

      // Continue shutting valve as not yet closed.
      // TODO-117: allow very slow final turn off to help systems with poor bypass, ~1% per minute.
      // Special slow-turn-off rules for final part of travel at/below DEFAULT_MIN_VALVE_PC_REALLY_OPEN floor.
      const uint8_t minReallyOpen = inputState.minPCOpen;
      const uint8_t lingerThreshold = (minReallyOpen > 0) ? (minReallyOpen-1) : 0;
     a38:	48 2f       	mov	r20, r24
     a3a:	41 50       	subi	r20, 0x01	; 1
     a3c:	0f c0       	rjmp	.+30     	; 0xa5c <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0xd6>
//      const uint8_t lingerThreshold = DEFAULT_MIN_VALVE_PC_REALLY_OPEN - 1; // Should be below 'call for heat' threshold.
      if(valvePCOpen < minReallyOpen)
        {
        // If lingered long enough then do final chunk in one burst to help avoid valve hiss and temperature overshoot.
        if((DEFAULT_MAX_RUN_ON_TIME_M < minReallyOpen) && (valvePCOpen < minReallyOpen - DEFAULT_MAX_RUN_ON_TIME_M))
     a3e:	86 30       	cpi	r24, 0x06	; 6
     a40:	48 f0       	brcs	.+18     	; 0xa54 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0xce>
     a42:	2f 2d       	mov	r18, r15
     a44:	30 e0       	ldi	r19, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	05 97       	sbiw	r24, 0x05	; 5
     a4a:	28 17       	cp	r18, r24
     a4c:	39 07       	cpc	r19, r25
     a4e:	14 f4       	brge	.+4      	; 0xa54 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0xce>
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	75 c0       	rjmp	.+234    	; 0xb3e <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x1b8>
          { return(0); } // Shut right off.
        return(valvePCOpen - 1); // Turn down as slowly as reasonably possible to help boiler cool.
     a54:	9f 2d       	mov	r25, r15
     a56:	91 50       	subi	r25, 0x01	; 1
     a58:	72 c0       	rjmp	.+228    	; 0xb3e <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x1b8>
     a5a:	40 e0       	ldi	r20, 0x00	; 0
        }

      // TODO-109: with comfort bias (FIXME: or at hub because of self-heating temp errors or if temperatures are jittery)
      // then slew to off relatively slowly to reduce wasted effort from minor overshoots.
      if(((!inputState.hasEcoBias) /* || inHubMode() || TemperatureC16.isFilteringOn() */ ) &&
     a5c:	8b 81       	ldd	r24, Y+3	; 0x03
     a5e:	82 fd       	sbrc	r24, 2
     a60:	6d c0       	rjmp	.+218    	; 0xb3c <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x1b6>
     a62:	24 2f       	mov	r18, r20
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	8a 81       	ldd	r24, Y+2	; 0x02
     a68:	68 2f       	mov	r22, r24
     a6a:	70 e0       	ldi	r23, 0x00	; 0
     a6c:	c9 01       	movw	r24, r18
     a6e:	43 96       	adiw	r24, 0x13	; 19
     a70:	86 17       	cp	r24, r22
     a72:	97 07       	cpc	r25, r23
     a74:	1c f4       	brge	.+6      	; 0xa7c <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0xf6>
     a76:	b9 01       	movw	r22, r18
     a78:	6c 5e       	subi	r22, 0xEC	; 236
     a7a:	7f 4f       	sbci	r23, 0xFF	; 255
     a7c:	8f 2d       	mov	r24, r15
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	68 17       	cp	r22, r24
     a82:	79 07       	cpc	r23, r25
     a84:	0c f0       	brlt	.+2      	; 0xa88 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x102>
     a86:	5a c0       	rjmp	.+180    	; 0xb3c <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x1b6>
         (valvePCOpen > constrain(((int)lingerThreshold) + TRV_SLEW_PC_PER_MIN_VFAST, TRV_SLEW_PC_PER_MIN_VFAST, inputState.maxPCOpen)))
        { return(valvePCOpen - TRV_SLEW_PC_PER_MIN_VFAST); }
     a88:	9f 2d       	mov	r25, r15
     a8a:	94 51       	subi	r25, 0x14	; 20
     a8c:	58 c0       	rjmp	.+176    	; 0xb3e <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x1b8>

  // Close to (or at) temp target: set valve partly open to try to tightly regulate.
  //
  // Use currentTempC16 lsbits to set valve percentage for proportional feedback
  // to provide more efficient and quieter TRV drive and probably more stable room temperature.
  const uint8_t lsbits = (uint8_t) (adjustedTempC16 & 0xf); // LSbits of temperature above base of proportional adjustment range.
     a8e:	8f e0       	ldi	r24, 0x0F	; 15
     a90:	d8 2e       	mov	r13, r24
     a92:	d2 22       	and	r13, r18
//    uint8_t tmp = (uint8_t) (refTempC16 & 0xf); // Only interested in lsbits.
  const uint8_t tmp = 16 - lsbits; // Now in range 1 (at warmest end of 'correct' temperature) to 16 (coolest).
  const uint8_t ulpStep = 6;
  // Get to nominal range 6 to 96, eg valve nearly shut just below top of 'correct' temperature window.
  const uint8_t targetPORaw = tmp * ulpStep;
     a94:	80 e1       	ldi	r24, 0x10	; 16
     a96:	8d 19       	sub	r24, r13
     a98:	96 e0       	ldi	r25, 0x06	; 6
     a9a:	89 9f       	mul	r24, r25
     a9c:	e0 2c       	mov	r14, r0
     a9e:	11 24       	eor	r1, r1
  // If target would be over DEFAULT_VALVE_PC_MODERATELY_OPEN but velocity (rate of rise of) temperature is high
  // (high enough that it might not be possible to turn it down quickly enough to avoid a significant overshoot)
  // then further constrain it.
  const bool risingToofast = ((targetPORaw > DEFAULT_VALVE_PC_MODERATELY_OPEN) && (retainedState.getVelocityC16PerTick() > max(1,16/TURN_DOWN_RESPONSE_TIME_M)));
     aa0:	f1 e2       	ldi	r31, 0x21	; 33
     aa2:	fe 15       	cp	r31, r14
     aa4:	08 f0       	brcs	.+2      	; 0xaa8 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x122>
     aa6:	58 c0       	rjmp	.+176    	; 0xb58 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x1d2>
     aa8:	c8 01       	movw	r24, r16
     aaa:	0e 94 9b 04 	call	0x936	; 0x936 <ModelledRadValveState::getVelocityC16PerTick()>
     aae:	03 97       	sbiw	r24, 0x03	; 3
     ab0:	0c f4       	brge	.+2      	; 0xab4 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x12e>
     ab2:	52 c0       	rjmp	.+164    	; 0xb58 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x1d2>
     ab4:	81 e2       	ldi	r24, 0x21	; 33
  const uint8_t targetCapped = risingToofast ? DEFAULT_VALVE_PC_MODERATELY_OPEN : targetPORaw;
  // Constrain from below to likely minimum-open value, in part to deal with TODO-117 'linger open' in lieu of boiler bypass.
  // Constrain from above by maximum percentage open allowed, eg for pay-by-volume systems.
  const uint8_t targetPO = constrain(targetCapped, inputState.minPCOpen, inputState.maxPCOpen);
     ab6:	99 81       	ldd	r25, Y+1	; 0x01
     ab8:	89 17       	cp	r24, r25
     aba:	28 f0       	brcs	.+10     	; 0xac6 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x140>
     abc:	2a 81       	ldd	r18, Y+2	; 0x02
     abe:	98 2f       	mov	r25, r24
     ac0:	28 17       	cp	r18, r24
     ac2:	08 f4       	brcc	.+2      	; 0xac6 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x140>
     ac4:	92 2f       	mov	r25, r18

  // Reduce spurious valve/boiler adjustment by avoiding movement at all unless current temperature error is significant.
  if(targetPO != valvePCOpen)
     ac6:	9f 15       	cp	r25, r15
     ac8:	b9 f1       	breq	.+110    	; 0xb38 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x1b2>
    // Increase this significantly if permitted to reduce the total number and size of adjustments and thus reduce noise (and battery drain).
// FIXME //    if(inputState.widenDeadband && !tooHot && (0 != (XXXgetMinutesSinceMidnightLT() & 3))) { return(inputState.currentPCOpen); } // Suppress some movement in wider deadband.
    // Also increase effective deadband if temperature resolution is lower than 1/16th, eg 8ths => 1+2*ulpStep minimum.
// FIXME //    const uint8_t realMinUlp = 1 + (TemperatureC16.isLowPrecision() ? 2*ulpStep : ulpStep); // Assume precision no coarser than 1/8C.
    const uint8_t realMinUlp = 1 + ulpStep;
    const uint8_t minAbsSlew = fnmax(realMinUlp, (uint8_t)(inputState.widenDeadband ? max(min(DEFAULT_VALVE_PC_MODERATELY_OPEN/2,max(TRV_MAX_SLEW_PC_PER_MIN,2*TRV_MIN_SLEW_PC)), 2+TRV_MIN_SLEW_PC) : TRV_MIN_SLEW_PC));
     aca:	8b 81       	ldd	r24, Y+3	; 0x03
     acc:	80 fd       	sbrc	r24, 0
     ace:	02 c0       	rjmp	.+4      	; 0xad4 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x14e>
     ad0:	27 e0       	ldi	r18, 0x07	; 7
     ad2:	01 c0       	rjmp	.+2      	; 0xad6 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x150>
     ad4:	2e e0       	ldi	r18, 0x0E	; 14
    if(tooHot) // Currently open more than required, ie above target temperature.
     ad6:	9f 15       	cp	r25, r15
     ad8:	68 f4       	brcc	.+26     	; 0xaf4 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x16e>
      {
//DEBUG_SERIAL_PRINTLN_FLASHSTRING("slightly over temp");
      // Reduce valve hunting: defer re-closing if recently opened.
      if(retainedState.dontTurndown()) { return(valvePCOpen); }
     ada:	f8 01       	movw	r30, r16
     adc:	86 81       	ldd	r24, Z+6	; 0x06
     ade:	88 23       	and	r24, r24
     ae0:	59 f5       	brne	.+86     	; 0xb38 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x1b2>

      const uint8_t slew = valvePCOpen - targetPO;
     ae2:	8f 2d       	mov	r24, r15
     ae4:	89 1b       	sub	r24, r25
      // Ensure no hunting for ~1ulp temperature wobble.
      if(slew < minAbsSlew) { return(valvePCOpen); }
     ae6:	82 17       	cp	r24, r18
     ae8:	38 f1       	brcs	.+78     	; 0xb38 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x1b2>
      
      if(slew > TRV_SLEW_PC_PER_MIN_FAST)
     aea:	8b 30       	cpi	r24, 0x0B	; 11
     aec:	40 f1       	brcs	.+80     	; 0xb3e <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x1b8>
          { return(valvePCOpen - TRV_SLEW_PC_PER_MIN_FAST); } // Cap slew rate.
     aee:	9f 2d       	mov	r25, r15
     af0:	9a 50       	subi	r25, 0x0A	; 10
     af2:	25 c0       	rjmp	.+74     	; 0xb3e <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x1b8>
    // if(targetPO > TRVPercentOpen) // Currently open less than required, ie below target temperature.
//DEBUG_SERIAL_PRINTLN_FLASHSTRING("slightly under temp");
#if defined(SUPPORT_BAKE)
    // If room is well below target and in BAKE mode then immediately open to maximum.
    // Need debounced bake mode value to avoid spurious slamming open of the valve as the user cycles through modes.
    if(inputState.inBakeMode) { return(inputState.maxPCOpen); }
     af4:	8b 81       	ldd	r24, Y+3	; 0x03
     af6:	83 ff       	sbrs	r24, 3
     af8:	02 c0       	rjmp	.+4      	; 0xafe <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x178>
     afa:	9a 81       	ldd	r25, Y+2	; 0x02
     afc:	20 c0       	rjmp	.+64     	; 0xb3e <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x1b8>
#endif

    // Reduce valve hunting: defer re-opening if recently closed.
    if(retainedState.dontTurnup()) { return(valvePCOpen); }
     afe:	f8 01       	movw	r30, r16
     b00:	85 81       	ldd	r24, Z+5	; 0x05
     b02:	88 23       	and	r24, r24
     b04:	c9 f4       	brne	.+50     	; 0xb38 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x1b2>

    const uint8_t slew = targetPO - valvePCOpen;
     b06:	89 2f       	mov	r24, r25
     b08:	8f 19       	sub	r24, r15
    // To to avoid hunting around boundaries of a ~1ulp temperature step.
    if(slew < minAbsSlew) { return(valvePCOpen); }
     b0a:	82 17       	cp	r24, r18
     b0c:	a8 f0       	brcs	.+42     	; 0xb38 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x1b2>

    // Open glacially if explicitly requested or if temperature overshoot has happened or is a danger.
    // Note that pseudo overshoots may be seen after a step down in target temperature.
    // This assumes that most valves more than about 1/3rd open can deliver significant power, esp if not statically balanced.
    const bool beGlacial = (lsbits >= 8) || ((lsbits >= 4) && (valvePCOpen >= DEFAULT_VALVE_PC_MODERATELY_OPEN)) || glacialOn(inputState, retainedState);
     b0e:	f7 e0       	ldi	r31, 0x07	; 7
     b10:	fd 15       	cp	r31, r13
     b12:	48 f0       	brcs	.+18     	; 0xb26 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x1a0>
     b14:	23 e0       	ldi	r18, 0x03	; 3
     b16:	2d 15       	cp	r18, r13
     b18:	18 f4       	brcc	.+6      	; 0xb20 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x19a>
     b1a:	e0 e2       	ldi	r30, 0x20	; 32
     b1c:	ef 15       	cp	r30, r15
     b1e:	18 f0       	brcs	.+6      	; 0xb26 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x1a0>
// or if there is a huge range of temperatures in recent history.
// Note that pseudo overshoots may be seen as the target temperature steps down.
static bool glacialOn(const struct ModelledRadValveInputState &inputState, struct ModelledRadValveState &retainedState)
  {
  // True if in glacial mode.
  if(inputState.glacial) { return(true); }
     b20:	6b 81       	ldd	r22, Y+3	; 0x03
     b22:	61 ff       	sbrs	r22, 1
     b24:	1b c0       	rjmp	.+54     	; 0xb5c <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x1d6>

    // Open glacially if explicitly requested or if temperature overshoot has happened or is a danger.
    // Note that pseudo overshoots may be seen after a step down in target temperature.
    // This assumes that most valves more than about 1/3rd open can deliver significant power, esp if not statically balanced.
    const bool beGlacial = (lsbits >= 8) || ((lsbits >= 4) && (valvePCOpen >= DEFAULT_VALVE_PC_MODERATELY_OPEN)) || glacialOn(inputState, retainedState);
    if(beGlacial) { return(valvePCOpen + 1); }
     b26:	9f 2d       	mov	r25, r15
     b28:	9f 5f       	subi	r25, 0xFF	; 255
     b2a:	09 c0       	rjmp	.+18     	; 0xb3e <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x1b8>

    // Slew open faster with comfort bias.
    const uint8_t maxSlew = (!inputState.hasEcoBias) ? TRV_SLEW_PC_PER_MIN_FAST : TRV_MAX_SLEW_PC_PER_MIN;
    if(slew > maxSlew)
     b2c:	8b 30       	cpi	r24, 0x0B	; 11
     b2e:	38 f0       	brcs	.+14     	; 0xb3e <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x1b8>
     b30:	8a e0       	ldi	r24, 0x0A	; 10
        { return(valvePCOpen + maxSlew); } // Cap slew rate open.
     b32:	98 2f       	mov	r25, r24
     b34:	9f 0d       	add	r25, r15
     b36:	03 c0       	rjmp	.+6      	; 0xb3e <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x1b8>
     b38:	9f 2d       	mov	r25, r15
     b3a:	01 c0       	rjmp	.+2      	; 0xb3e <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x1b8>
     b3c:	94 2f       	mov	r25, r20
    return(targetPO);
    }

  // Leave value position as was...
  return(valvePCOpen);
  }
     b3e:	89 2f       	mov	r24, r25
     b40:	df 91       	pop	r29
     b42:	cf 91       	pop	r28
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	ff 90       	pop	r15
     b4a:	ef 90       	pop	r14
     b4c:	df 90       	pop	r13
     b4e:	08 95       	ret
      if(beGlacial) { return(valvePCOpen + 1); }

      // Ensure open quickly from cold for acceptable response.
      // Less fast in eco mode (to reduce overshoot risk) and even less fast if also already moderately open.
      const uint8_t slewRate = ((!inputState.hasEcoBias) ? TRV_SLEW_PC_PER_MIN_VFAST :
          ((valvePCOpen >= DEFAULT_VALVE_PC_MODERATELY_OPEN) ? TRV_MAX_SLEW_PC_PER_MIN : TRV_SLEW_PC_PER_MIN_FAST));
     b50:	22 fd       	sbrc	r18, 2
     b52:	4e cf       	rjmp	.-356    	; 0x9f0 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x6a>
     b54:	24 e1       	ldi	r18, 0x14	; 20
     b56:	52 cf       	rjmp	.-348    	; 0x9fc <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x76>
     b58:	8e 2d       	mov	r24, r14
     b5a:	ad cf       	rjmp	.-166    	; 0xab6 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x130>
    // This assumes that most valves more than about 1/3rd open can deliver significant power, esp if not statically balanced.
    const bool beGlacial = (lsbits >= 8) || ((lsbits >= 4) && (valvePCOpen >= DEFAULT_VALVE_PC_MODERATELY_OPEN)) || glacialOn(inputState, retainedState);
    if(beGlacial) { return(valvePCOpen + 1); }

    // Slew open faster with comfort bias.
    const uint8_t maxSlew = (!inputState.hasEcoBias) ? TRV_SLEW_PC_PER_MIN_FAST : TRV_MAX_SLEW_PC_PER_MIN;
     b5c:	62 ff       	sbrs	r22, 2
     b5e:	e6 cf       	rjmp	.-52     	; 0xb2c <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x1a6>
     b60:	85 e0       	ldi	r24, 0x05	; 5
     b62:	e7 cf       	rjmp	.-50     	; 0xb32 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x1ac>

00000b64 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)>:

// Perform per-minute tasks such as counter and filter updates then recompute valve position.
// The input state must be complete including target and reference temperatures
// before calling this including the first time whereupon some further lazy initialisation is done.
//   * valvePCOpenRef  current valve position UPDATED BY THIS ROUTINE, in range [0,100]
void ModelledRadValveState::tick(volatile uint8_t &valvePCOpenRef, const ModelledRadValveInputState &inputState)
     b64:	af 92       	push	r10
     b66:	bf 92       	push	r11
     b68:	cf 92       	push	r12
     b6a:	df 92       	push	r13
     b6c:	ef 92       	push	r14
     b6e:	ff 92       	push	r15
     b70:	0f 93       	push	r16
     b72:	1f 93       	push	r17
     b74:	cf 93       	push	r28
     b76:	df 93       	push	r29
     b78:	ec 01       	movw	r28, r24
     b7a:	6b 01       	movw	r12, r22
     b7c:	5a 01       	movw	r10, r20
  {
  const int rawTempC16 = inputState.refTempC16 - refTempOffsetC16; // Remove adjustment for target centre.
     b7e:	fa 01       	movw	r30, r20
     b80:	04 81       	ldd	r16, Z+4	; 0x04
     b82:	15 81       	ldd	r17, Z+5	; 0x05
     b84:	08 50       	subi	r16, 0x08	; 8
     b86:	10 40       	sbci	r17, 0x00	; 0
  if(!initialised)
     b88:	88 81       	ld	r24, Y
     b8a:	88 23       	and	r24, r24
     b8c:	71 f4       	brne	.+28     	; 0xbaa <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0x46>
     b8e:	fe 01       	movw	r30, r28
     b90:	88 e0       	ldi	r24, 0x08	; 8
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	02 c0       	rjmp	.+4      	; 0xb9a <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0x36>
    {
    // Fill the filter memory with the current room temperature.
    for(int i = filterLength; --i >= 0; ) { prevRawTempC16[i] = rawTempC16; }
     b96:	10 8f       	std	Z+24, r17	; 0x18
     b98:	07 8b       	std	Z+23, r16	; 0x17
     b9a:	01 97       	sbiw	r24, 0x01	; 1
     b9c:	32 97       	sbiw	r30, 0x02	; 2
     b9e:	2f ef       	ldi	r18, 0xFF	; 255
     ba0:	8f 3f       	cpi	r24, 0xFF	; 255
     ba2:	92 07       	cpc	r25, r18
     ba4:	c1 f7       	brne	.-16     	; 0xb96 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0x32>
    initialised = true;
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	88 83       	st	Y, r24
     baa:	7e 01       	movw	r14, r28
     bac:	fe 01       	movw	r30, r28
     bae:	28 e0       	ldi	r18, 0x08	; 8
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	04 c0       	rjmp	.+8      	; 0xbbc <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0x58>
    }

  // Shift in the latest (raw) temperature.
  for(int i = filterLength; --i > 0; ) { prevRawTempC16[i] = prevRawTempC16[i-1]; }
     bb4:	85 89       	ldd	r24, Z+21	; 0x15
     bb6:	96 89       	ldd	r25, Z+22	; 0x16
     bb8:	90 8f       	std	Z+24, r25	; 0x18
     bba:	87 8b       	std	Z+23, r24	; 0x17
     bbc:	21 50       	subi	r18, 0x01	; 1
     bbe:	30 40       	sbci	r19, 0x00	; 0
     bc0:	32 97       	sbiw	r30, 0x02	; 2
     bc2:	21 15       	cp	r18, r1
     bc4:	31 05       	cpc	r19, r1
     bc6:	b1 f7       	brne	.-20     	; 0xbb4 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0x50>
  prevRawTempC16[0] = rawTempC16;
     bc8:	18 87       	std	Y+8, r17	; 0x08
     bca:	0f 83       	std	Y+7, r16	; 0x07

  // Disable/enable filtering.
  // Allow possible exit from filtering for next time
  // if the raw value is close enough to the current filtered value
  // so that reverting to unfiltered will not of itself cause a big jump.
  if(isFiltering)
     bcc:	89 81       	ldd	r24, Y+1	; 0x01
     bce:	88 23       	and	r24, r24
     bd0:	c9 f0       	breq	.+50     	; 0xc04 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0xa0>
    {
    if(abs(getSmoothedRecent() - rawTempC16) <= MAX_TEMP_JUMP_C16) { isFiltering = false; }  
     bd2:	ce 01       	movw	r24, r28
     bd4:	0e 94 85 04 	call	0x90a	; 0x90a <ModelledRadValveState::getSmoothedRecent()>
     bd8:	80 1b       	sub	r24, r16
     bda:	91 0b       	sbc	r25, r17
     bdc:	18 16       	cp	r1, r24
     bde:	19 06       	cpc	r1, r25
     be0:	44 f4       	brge	.+16     	; 0xbf2 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0x8e>
     be2:	ce 01       	movw	r24, r28
     be4:	0e 94 85 04 	call	0x90a	; 0x90a <ModelledRadValveState::getSmoothedRecent()>
     be8:	80 1b       	sub	r24, r16
     bea:	91 0b       	sbc	r25, r17
     bec:	05 97       	sbiw	r24, 0x05	; 5
     bee:	54 f4       	brge	.+20     	; 0xc04 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0xa0>
     bf0:	08 c0       	rjmp	.+16     	; 0xc02 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0x9e>
     bf2:	ce 01       	movw	r24, r28
     bf4:	0e 94 85 04 	call	0x90a	; 0x90a <ModelledRadValveState::getSmoothedRecent()>
     bf8:	08 1b       	sub	r16, r24
     bfa:	19 0b       	sbc	r17, r25
     bfc:	05 30       	cpi	r16, 0x05	; 5
     bfe:	11 05       	cpc	r17, r1
     c00:	0c f4       	brge	.+2      	; 0xc04 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0xa0>
     c02:	19 82       	std	Y+1, r1	; 0x01
    }
  // Force filtering (back) on if any adjacent past readings are wildly different.
  if(!isFiltering)
     c04:	89 81       	ldd	r24, Y+1	; 0x01
     c06:	88 23       	and	r24, r24
     c08:	e9 f4       	brne	.+58     	; 0xc44 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0xe0>
     c0a:	41 e0       	ldi	r20, 0x01	; 1
     c0c:	50 e0       	ldi	r21, 0x00	; 0
    {
    for(int i = 1; i < filterLength; ++i) { if(abs(prevRawTempC16[i] - prevRawTempC16[i-1]) > MAX_TEMP_JUMP_C16) { isFiltering = true; break; } }
     c0e:	f7 01       	movw	r30, r14
     c10:	21 85       	ldd	r18, Z+9	; 0x09
     c12:	32 85       	ldd	r19, Z+10	; 0x0a
     c14:	87 81       	ldd	r24, Z+7	; 0x07
     c16:	90 85       	ldd	r25, Z+8	; 0x08
     c18:	28 1b       	sub	r18, r24
     c1a:	39 0b       	sbc	r19, r25
     c1c:	37 ff       	sbrs	r19, 7
     c1e:	03 c0       	rjmp	.+6      	; 0xc26 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0xc2>
     c20:	30 95       	com	r19
     c22:	21 95       	neg	r18
     c24:	3f 4f       	sbci	r19, 0xFF	; 255
     c26:	82 e0       	ldi	r24, 0x02	; 2
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	e8 0e       	add	r14, r24
     c2c:	f9 1e       	adc	r15, r25
     c2e:	25 30       	cpi	r18, 0x05	; 5
     c30:	31 05       	cpc	r19, r1
     c32:	1c f0       	brlt	.+6      	; 0xc3a <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0xd6>
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	89 83       	std	Y+1, r24	; 0x01
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0xe0>
     c3a:	4f 5f       	subi	r20, 0xFF	; 255
     c3c:	5f 4f       	sbci	r21, 0xFF	; 255
     c3e:	48 30       	cpi	r20, 0x08	; 8
     c40:	51 05       	cpc	r21, r1
     c42:	29 f7       	brne	.-54     	; 0xc0e <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0xaa>
    }

  // Tick count down timers.
  if(valveTurndownCountdownM > 0) { --valveTurndownCountdownM; }
     c44:	8d 81       	ldd	r24, Y+5	; 0x05
     c46:	88 23       	and	r24, r24
     c48:	11 f0       	breq	.+4      	; 0xc4e <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0xea>
     c4a:	81 50       	subi	r24, 0x01	; 1
     c4c:	8d 83       	std	Y+5, r24	; 0x05
  if(valveTurnupCountdownM > 0) { --valveTurnupCountdownM; }
     c4e:	8e 81       	ldd	r24, Y+6	; 0x06
     c50:	88 23       	and	r24, r24
     c52:	11 f0       	breq	.+4      	; 0xc58 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0xf4>
     c54:	81 50       	subi	r24, 0x01	; 1
     c56:	8e 83       	std	Y+6, r24	; 0x06
//  if(tempOvershootCountdownM > 0) { --tempOvershootCountdownM; }

  // Update the modelled state including the valve position passed by reference.
  const uint8_t newValvePC = ModelledRadValve::computeRequiredTRVPercentOpen(valvePCOpenRef, inputState, *this);
     c58:	f6 01       	movw	r30, r12
     c5a:	80 81       	ld	r24, Z
     c5c:	b5 01       	movw	r22, r10
     c5e:	ae 01       	movw	r20, r28
     c60:	0e 94 c3 04 	call	0x986	; 0x986 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)>
     c64:	68 2f       	mov	r22, r24
  const bool changed = (newValvePC != valvePCOpenRef);
     c66:	f6 01       	movw	r30, r12
     c68:	80 81       	ld	r24, Z
     c6a:	70 e0       	ldi	r23, 0x00	; 0
     c6c:	68 17       	cp	r22, r24
     c6e:	29 f1       	breq	.+74     	; 0xcba <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0x156>
     c70:	71 e0       	ldi	r23, 0x01	; 1
  if(changed)
    {
    if(newValvePC > valvePCOpenRef)
     c72:	80 81       	ld	r24, Z
     c74:	3c 81       	ldd	r19, Y+4	; 0x04
     c76:	46 2f       	mov	r20, r22
     c78:	50 e0       	ldi	r21, 0x00	; 0
     c7a:	86 17       	cp	r24, r22
     c7c:	58 f4       	brcc	.+22     	; 0xc94 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0x130>
  // causing measured temperatures to veer up and down.
  // This attempts to reduce excessive valve noise and energy use
  // and help to avoid boiler short-cycling.
  uint8_t valveTurnupCountdownM;
  // Mark flow as having been increased.
  void valveTurnup() { valveTurnupCountdownM = ANTISEEK_VALVE_RECLOSE_DELAY_M; }
     c7e:	83 e0       	ldi	r24, 0x03	; 3
     c80:	8e 83       	std	Y+6, r24	; 0x06
      {
      // Defer reclosing valve to avoid excessive hunting.
      valveTurnup();
      cumulativeMovementPC += (newValvePC - valvePCOpenRef);
     c82:	20 81       	ld	r18, Z
     c84:	8b 81       	ldd	r24, Y+3	; 0x03
     c86:	93 2f       	mov	r25, r19
     c88:	9f 70       	andi	r25, 0x0F	; 15
     c8a:	82 1b       	sub	r24, r18
     c8c:	91 09       	sbc	r25, r1
     c8e:	84 0f       	add	r24, r20
     c90:	95 1f       	adc	r25, r21
     c92:	0b c0       	rjmp	.+22     	; 0xcaa <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0x146>
  // causing measured temperatures to veer up and down.
  // This attempts to reduce excessive valve noise and energy use
  // and help to avoid boiler short-cycling.
  uint8_t valveTurndownCountdownM;
  // Mark flow as having been reduced.
  void valveTurndown() { valveTurndownCountdownM = ANTISEEK_VALVE_REOPEN_DELAY_M; }
     c94:	89 e0       	ldi	r24, 0x09	; 9
     c96:	8d 83       	std	Y+5, r24	; 0x05
      }
    else
      {
      // Defer opening valve to avoid excessive hunting.
      valveTurndown();
      cumulativeMovementPC += (valvePCOpenRef - newValvePC);
     c98:	f6 01       	movw	r30, r12
     c9a:	20 81       	ld	r18, Z
     c9c:	8b 81       	ldd	r24, Y+3	; 0x03
     c9e:	93 2f       	mov	r25, r19
     ca0:	9f 70       	andi	r25, 0x0F	; 15
     ca2:	82 0f       	add	r24, r18
     ca4:	91 1d       	adc	r25, r1
     ca6:	84 1b       	sub	r24, r20
     ca8:	95 0b       	sbc	r25, r21
     caa:	8b 83       	std	Y+3, r24	; 0x03
     cac:	89 2f       	mov	r24, r25
     cae:	8f 70       	andi	r24, 0x0F	; 15
     cb0:	30 7f       	andi	r19, 0xF0	; 240
     cb2:	38 2b       	or	r19, r24
     cb4:	3c 83       	std	Y+4, r19	; 0x04
      }
    valvePCOpenRef = newValvePC;
     cb6:	f6 01       	movw	r30, r12
     cb8:	60 83       	st	Z, r22
    }
  valveMoved = changed;
     cba:	7a 83       	std	Y+2, r23	; 0x02
  }
     cbc:	df 91       	pop	r29
     cbe:	cf 91       	pop	r28
     cc0:	1f 91       	pop	r17
     cc2:	0f 91       	pop	r16
     cc4:	ff 90       	pop	r15
     cc6:	ef 90       	pop	r14
     cc8:	df 90       	pop	r13
     cca:	cf 90       	pop	r12
     ccc:	bf 90       	pop	r11
     cce:	af 90       	pop	r10
     cd0:	08 95       	ret

00000cd2 <getByHourStat(unsigned char, unsigned char)>:
// Get raw stats value for hour HH [0,23] from stats set N from non-volatile (EEPROM) store.
// A value of 0xff (255) means unset (or out of range); other values depend on which stats set is being used.
// The stats set is determined by the order in memory.
uint8_t getByHourStat(uint8_t hh, uint8_t statsSet)
  {
  if(statsSet > (EE_END_STATS - EE_START_STATS) / EE_STATS_SET_SIZE) { return((uint8_t) 0xff); } // Invalid set.
     cd2:	6b 30       	cpi	r22, 0x0B	; 11
     cd4:	98 f4       	brcc	.+38     	; 0xcfc <getByHourStat(unsigned char, unsigned char)+0x2a>
  if(hh > 23) { return((uint8_t) 0xff); } // Invalid hour.
     cd6:	88 31       	cpi	r24, 0x18	; 24
     cd8:	88 f4       	brcc	.+34     	; 0xcfc <getByHourStat(unsigned char, unsigned char)+0x2a>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     cda:	f9 99       	sbic	0x1f, 1	; 31
     cdc:	fe cf       	rjmp	.-4      	; 0xcda <getByHourStat(unsigned char, unsigned char)+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     cde:	28 2f       	mov	r18, r24
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	20 50       	subi	r18, 0x00	; 0
     ce4:	3f 4f       	sbci	r19, 0xFF	; 255
     ce6:	88 e1       	ldi	r24, 0x18	; 24
     ce8:	68 9f       	mul	r22, r24
     cea:	c0 01       	movw	r24, r0
     cec:	11 24       	eor	r1, r1
     cee:	28 0f       	add	r18, r24
     cf0:	39 1f       	adc	r19, r25
     cf2:	32 bd       	out	0x22, r19	; 34
     cf4:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     cf6:	f8 9a       	sbi	0x1f, 0	; 31
     cf8:	80 b5       	in	r24, 0x20	; 32
     cfa:	08 95       	ret
  return(eeprom_read_byte((uint8_t *)(EE_START_STATS + (statsSet * (int)EE_STATS_SET_SIZE) + (int)hh)));
     cfc:	8f ef       	ldi	r24, 0xFF	; 255
  }
     cfe:	08 95       	ret

00000d00 <compressTempC16(int)>:
#define COMPRESSION_C16_HIGH_THR_AFTER (COMPRESSION_C16_LOW_THR_AFTER + ((COMPRESSION_C16_HIGH_THRESHOLD-COMPRESSION_C16_LOW_THRESHOLD)>>1)) // High threshold after compression.
#define COMPRESSION_C16_CEIL_VAL (100<<4) // Ceiling input value to compression.
#define COMPRESSION_C16_CEIL_VAL_AFTER (COMPRESSION_C16_HIGH_THR_AFTER + ((COMPRESSION_C16_CEIL_VAL-COMPRESSION_C16_HIGH_THRESHOLD) >> 3)) // Ceiling input value after compression.
uint8_t compressTempC16(int tempC16)
  {
  if(tempC16 <= 0) { return(0); } // Clamp negative values to zero.
     d00:	18 16       	cp	r1, r24
     d02:	19 06       	cpc	r1, r25
     d04:	14 f0       	brlt	.+4      	; 0xd0a <compressTempC16(int)+0xa>
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	08 95       	ret
  if(tempC16 < COMPRESSION_C16_LOW_THRESHOLD) { return(tempC16 >> 3); } // Preserve 1 bit after the binary point (0.5C precision).
     d0a:	8f 3f       	cpi	r24, 0xFF	; 255
     d0c:	91 05       	cpc	r25, r1
     d0e:	09 f0       	breq	.+2      	; 0xd12 <compressTempC16(int)+0x12>
     d10:	34 f4       	brge	.+12     	; 0xd1e <compressTempC16(int)+0x1e>
     d12:	63 e0       	ldi	r22, 0x03	; 3
     d14:	95 95       	asr	r25
     d16:	87 95       	ror	r24
     d18:	6a 95       	dec	r22
     d1a:	e1 f7       	brne	.-8      	; 0xd14 <compressTempC16(int)+0x14>
     d1c:	08 95       	ret
  if(tempC16 < COMPRESSION_C16_HIGH_THRESHOLD)
     d1e:	21 e0       	ldi	r18, 0x01	; 1
     d20:	80 38       	cpi	r24, 0x80	; 128
     d22:	92 07       	cpc	r25, r18
     d24:	34 f4       	brge	.+12     	; 0xd32 <compressTempC16(int)+0x32>
    { return(((tempC16 - COMPRESSION_C16_LOW_THRESHOLD) >> 1) + COMPRESSION_C16_LOW_THR_AFTER); }
     d26:	80 50       	subi	r24, 0x00	; 0
     d28:	91 40       	sbci	r25, 0x01	; 1
     d2a:	95 95       	asr	r25
     d2c:	87 95       	ror	r24
     d2e:	80 5e       	subi	r24, 0xE0	; 224
     d30:	08 95       	ret
  if(tempC16 < COMPRESSION_C16_CEIL_VAL)
     d32:	26 e0       	ldi	r18, 0x06	; 6
     d34:	80 34       	cpi	r24, 0x40	; 64
     d36:	92 07       	cpc	r25, r18
     d38:	14 f0       	brlt	.+4      	; 0xd3e <compressTempC16(int)+0x3e>
     d3a:	88 ef       	ldi	r24, 0xF8	; 248
     d3c:	08 95       	ret
    { return(((tempC16 - COMPRESSION_C16_HIGH_THRESHOLD) >> 3) + COMPRESSION_C16_HIGH_THR_AFTER); }
     d3e:	80 58       	subi	r24, 0x80	; 128
     d40:	91 40       	sbci	r25, 0x01	; 1
     d42:	43 e0       	ldi	r20, 0x03	; 3
     d44:	95 95       	asr	r25
     d46:	87 95       	ror	r24
     d48:	4a 95       	dec	r20
     d4a:	e1 f7       	brne	.-8      	; 0xd44 <compressTempC16(int)+0x44>
     d4c:	80 5a       	subi	r24, 0xA0	; 160
  return(COMPRESSION_C16_CEIL_VAL_AFTER);
  }
     d4e:	08 95       	ret

00000d50 <expandTempC16(unsigned char)>:

// Reverses range compression done by compressTempC16(); results in range [0,100], with varying precision based on original value.
// 0xff (or other invalid) input results in STATS_UNSET_INT. 
int expandTempC16(uint8_t cTemp)
  {
  if(cTemp < COMPRESSION_C16_LOW_THR_AFTER) { return(cTemp << 3); }
     d50:	80 32       	cpi	r24, 0x20	; 32
     d52:	40 f4       	brcc	.+16     	; 0xd64 <expandTempC16(unsigned char)+0x14>
     d54:	28 2f       	mov	r18, r24
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	f3 e0       	ldi	r31, 0x03	; 3
     d5a:	22 0f       	add	r18, r18
     d5c:	33 1f       	adc	r19, r19
     d5e:	fa 95       	dec	r31
     d60:	e1 f7       	brne	.-8      	; 0xd5a <expandTempC16(unsigned char)+0xa>
     d62:	17 c0       	rjmp	.+46     	; 0xd92 <expandTempC16(unsigned char)+0x42>
  if(cTemp < COMPRESSION_C16_HIGH_THR_AFTER)
     d64:	80 36       	cpi	r24, 0x60	; 96
     d66:	38 f4       	brcc	.+14     	; 0xd76 <expandTempC16(unsigned char)+0x26>
    { return(((cTemp - COMPRESSION_C16_LOW_THR_AFTER) << 1) + COMPRESSION_C16_LOW_THRESHOLD); }
     d68:	28 2f       	mov	r18, r24
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	22 0f       	add	r18, r18
     d6e:	33 1f       	adc	r19, r19
     d70:	20 54       	subi	r18, 0x40	; 64
     d72:	3f 4f       	sbci	r19, 0xFF	; 255
     d74:	0e c0       	rjmp	.+28     	; 0xd92 <expandTempC16(unsigned char)+0x42>
  if(cTemp <= COMPRESSION_C16_CEIL_VAL_AFTER)
     d76:	89 3f       	cpi	r24, 0xF9	; 249
     d78:	18 f0       	brcs	.+6      	; 0xd80 <expandTempC16(unsigned char)+0x30>
     d7a:	2f ef       	ldi	r18, 0xFF	; 255
     d7c:	3f e7       	ldi	r19, 0x7F	; 127
     d7e:	09 c0       	rjmp	.+18     	; 0xd92 <expandTempC16(unsigned char)+0x42>
    { return(((cTemp - COMPRESSION_C16_HIGH_THR_AFTER) << 3) + COMPRESSION_C16_HIGH_THRESHOLD); }
     d80:	28 2f       	mov	r18, r24
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	73 e0       	ldi	r23, 0x03	; 3
     d86:	22 0f       	add	r18, r18
     d88:	33 1f       	adc	r19, r19
     d8a:	7a 95       	dec	r23
     d8c:	e1 f7       	brne	.-8      	; 0xd86 <expandTempC16(unsigned char)+0x36>
     d8e:	20 58       	subi	r18, 0x80	; 128
     d90:	31 40       	sbci	r19, 0x01	; 1
  return(STATS_UNSET_INT); // Invalid/unset input.
  }
     d92:	c9 01       	movw	r24, r18
     d94:	08 95       	ret

00000d96 <Sensor<unsigned char>::isAvailable() const>:
    virtual bool begin() { return(false); }

    // Returns true if this sensor is currently available.
    // True by default unless implementation overrides.
    // For those sensors that need starting this will be false before begin().
    virtual bool isAvailable() const { return(true); }
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	08 95       	ret

00000d9a <Sensor<unsigned char>::tag() const>:
    // only as required to fetch new values from the underlying sensor.
    virtual uint8_t preferredPollInterval_s() const { return(0); }

    // Returns a suggested (JSON) tag/field/key name including units of get(); NULL means no recommended tag.
    // The lifetime of the pointed-to text must be at least that of the Sensor instance.
    virtual const char *tag() const { return(NULL); }
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	08 95       	ret

00000da0 <Sensor<unsigned char>::handleInterruptSimple()>:
    // Must be fast and ISR (Interrupt Service Routine) safe.
    // Returns true if interrupt was successfully handled and cleared
    // else another interrupt handler in the chain may be called
    // to attempt to clear the interrupt.
    // By default does nothing (and returns false).
    virtual bool handleInterruptSimple() { return(false); }
     da0:	80 e0       	ldi	r24, 0x00	; 0
     da2:	08 95       	ret

00000da4 <Sensor<unsigned char>::begin()>:

    // Begin access to this sensor if applicable and not already begun.
    // Returns true if it needed to be begun.
    // Allows logic to end() if required at the end of a block, etc.
    // Defaults to do nothing (and return false).
    virtual bool begin() { return(false); }
     da4:	80 e0       	ldi	r24, 0x00	; 0
     da6:	08 95       	ret

00000da8 <Sensor<unsigned char>::end()>:
    virtual bool isAvailable() const { return(true); }

    // End access to this sensor if applicable and not already ended.
    // Returns true if it needed to be ended.
    // Defaults to do nothing (and return false).
    virtual bool end() { return(false); }
     da8:	80 e0       	ldi	r24, 0x00	; 0
     daa:	08 95       	ret

00000dac <Sensor<unsigned char>::preferredPollInterval_s() const>:
 
    // Returns non-zero if this implementation requires a regular call to read() to operate correctly.
    // Preferred poll interval (in seconds) or 0 if no regular poll() call required.
    // Default returns 0 indicating regular call to read() not required,
    // only as required to fetch new values from the underlying sensor.
    virtual uint8_t preferredPollInterval_s() const { return(0); }
     dac:	80 e0       	ldi	r24, 0x00	; 0
     dae:	08 95       	ret

00000db0 <Sensor<unsigned char>::isValid(unsigned char) const>:
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual T get() const = 0;

    // Returns true if this sensor reading value passed is potentially valid, eg in-range.
    // Default is to always return true, ie all values potentially valid.
    virtual bool isValid(T value) const { return(true); }
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	08 95       	ret

00000db4 <global constructors keyed to _Z10inWarmModev>:
  {
  protected:
      volatile uint8_t value;

      // By default initialise the value to zero.
      SimpleTSUint8Sensor() : value(0) { }
     db4:	10 92 14 02 	sts	0x0214, r1
    // Hours and minutes since room became vacant (doesn't roll back to zero from max hours); zero when room occupied.
    uint8_t vacancyH;
    uint8_t vacancyM;

  public:
    OccupancyTracker() : occupationCountdownM(0), activityCountdownM(0), vacancyH(0), vacancyM(0) { }
     db8:	8a e6       	ldi	r24, 0x6A	; 106
     dba:	91 e0       	ldi	r25, 0x01	; 1
     dbc:	90 93 13 02 	sts	0x0213, r25
     dc0:	80 93 12 02 	sts	0x0212, r24
     dc4:	10 92 15 02 	sts	0x0215, r1
     dc8:	10 92 16 02 	sts	0x0216, r1
     dcc:	10 92 17 02 	sts	0x0217, r1
     dd0:	10 92 18 02 	sts	0x0218, r1
  protected:
    // Requested acuator value/position.
    volatile uint8_t value;

    // By default initialise the value to zero.
    SimpleTSUint8Actuator() : value(0) { }
     dd4:	10 92 1b 02 	sts	0x021B, r1
      : inputState(0),
        callingForHeat(false),
#if defined(TRV_SLEW_GLACIAL)
        glacial(true)
#else
        glacial(false)
     dd8:	8c e4       	ldi	r24, 0x4C	; 76
     dda:	91 e0       	ldi	r25, 0x01	; 1
     ddc:	90 93 1a 02 	sts	0x021A, r25
     de0:	80 93 19 02 	sts	0x0219, r24
struct ModelledRadValveInputState
  {
  ModelledRadValveInputState(const int realTempC16) :
    targetTempC(FROST), 
    minPCOpen(DEFAULT_MIN_VALVE_PC_REALLY_OPEN), maxPCOpen(100),
    widenDeadband(false), glacial(false), hasEcoBias(false), inBakeMode(false), softSetback(false)
     de4:	87 e0       	ldi	r24, 0x07	; 7
     de6:	80 93 1c 02 	sts	0x021C, r24
     dea:	8a e0       	ldi	r24, 0x0A	; 10
     dec:	80 93 1d 02 	sts	0x021D, r24
     df0:	84 e6       	ldi	r24, 0x64	; 100
     df2:	80 93 1e 02 	sts	0x021E, r24
     df6:	80 91 1f 02 	lds	r24, 0x021F
     dfa:	80 7e       	andi	r24, 0xE0	; 224
     dfc:	80 93 1f 02 	sts	0x021F, r24
// and which may save a little energy if users target the specified temperatures.
// Suggestion c/o GG ~2014/10 code, and generally less misleading anyway!
void ModelledRadValveInputState::setReferenceTemperatures(const int currentTempC16)
  {
  const int referenceTempC16 = currentTempC16 + refTempOffsetC16; // TODO-386: push targeted temperature down by 0.5C to middle of degree.
  refTempC16 = referenceTempC16;
     e00:	88 e0       	ldi	r24, 0x08	; 8
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	90 93 21 02 	sts	0x0221, r25
     e08:	80 93 20 02 	sts	0x0220, r24
  ModelledRadValveState() :
    initialised(false),
    isFiltering(false),
    valveMoved(false),
    cumulativeMovementPC(0),
    valveTurndownCountdownM(0), valveTurnupCountdownM(0)
     e0c:	10 92 22 02 	sts	0x0222, r1
     e10:	10 92 23 02 	sts	0x0223, r1
     e14:	10 92 24 02 	sts	0x0224, r1
     e18:	10 92 25 02 	sts	0x0225, r1
     e1c:	80 91 26 02 	lds	r24, 0x0226
     e20:	80 7f       	andi	r24, 0xF0	; 240
     e22:	80 93 26 02 	sts	0x0226, r24
     e26:	10 92 27 02 	sts	0x0227, r1
     e2a:	10 92 28 02 	sts	0x0228, r1
      : inputState(0),
        callingForHeat(false),
#if defined(TRV_SLEW_GLACIAL)
        glacial(true)
#else
        glacial(false)
     e2e:	10 92 39 02 	sts	0x0239, r1
     e32:	10 92 3a 02 	sts	0x023A, r1
  else if(getSubCycleTime() >= nearOverrunThreshold)
    {
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("?O"); // Near overrun.  Note 2ms/char to send...
    }
#endif
  }
     e36:	08 95       	ret

00000e38 <pollIO(bool)>:
// Call this to do an I/O poll if needed; returns true if something useful happened.
// This call should typically take << 1ms at 1MHz CPU.
// Does not change CPU clock speeds, mess with interrupts (other than possible brief blocking), or sleep.
// Limits actual poll rate to something like once every 32ms, unless force is true.
//   * force if true then force full poll on every call (ie do not internally rate-limit)
bool pollIO(const bool force)
     e38:	38 2f       	mov	r19, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     e3a:	f9 99       	sbic	0x1f, 1	; 31
     e3c:	fe cf       	rjmp	.-4      	; 0xe3a <pollIO(bool)+0x2>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     e3e:	82 e1       	ldi	r24, 0x12	; 18
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	92 bd       	out	0x22, r25	; 34
     e44:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     e46:	f8 9a       	sbi	0x1f, 0	; 31
     e48:	80 b5       	in	r24, 0x20	; 32
  {
#if defined(ENABLE_BOILER_HUB) && defined(USE_MODULE_FHT8VSIMPLE)
  if(inHubMode())
     e4a:	8f 3f       	cpi	r24, 0xFF	; 255
     e4c:	99 f0       	breq	.+38     	; 0xe74 <pollIO(bool)+0x3c>
    {
    static volatile uint8_t _pO_lastPoll;

    // Poll RX at most about every ~32ms to help approx match spil rate when called in loop with 30ms nap.
    const uint8_t sct = getSubCycleTime();
     e4e:	20 91 b2 00 	lds	r18, 0x00B2
    if(force || ((0 == (sct & 3)) && (sct != _pO_lastPoll)))
     e52:	33 23       	and	r19, r19
     e54:	51 f4       	brne	.+20     	; 0xe6a <pollIO(bool)+0x32>
     e56:	82 2f       	mov	r24, r18
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	83 70       	andi	r24, 0x03	; 3
     e5c:	90 70       	andi	r25, 0x00	; 0
     e5e:	89 2b       	or	r24, r25
     e60:	49 f4       	brne	.+18     	; 0xe74 <pollIO(bool)+0x3c>
     e62:	80 91 8f 02 	lds	r24, 0x028F
     e66:	28 17       	cp	r18, r24
     e68:	29 f0       	breq	.+10     	; 0xe74 <pollIO(bool)+0x3c>
      {
      _pO_lastPoll = sct;
     e6a:	20 93 8f 02 	sts	0x028F, r18
      if(FHT8VCallForHeatPoll()) // Check if call-for-heat has been overheard.
     e6e:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <FHT8VCallForHeatPoll()>
     e72:	08 95       	ret
     e74:	80 e0       	ldi	r24, 0x00	; 0
        { return(true); }
      }
    }
#endif
  return(false);
  }
     e76:	08 95       	ret

00000e78 <smoothStatsValue(unsigned char, unsigned char)>:

// Compute new linearly-smoothed value given old smoothed value and new value.
// Guaranteed not to produce a value higher than the max of the old smoothed value and the new value.
// Uses stochastic rounding to nearest to allow nominally sub-lsb values to have an effect over time.
// Usually only made public for unit testing.
uint8_t smoothStatsValue(const uint8_t oldSmoothed, const uint8_t newValue)
     e78:	0f 93       	push	r16
     e7a:	1f 93       	push	r17
     e7c:	18 2f       	mov	r17, r24
     e7e:	06 2f       	mov	r16, r22
  {
  if(oldSmoothed == newValue) { return(oldSmoothed); } // Optimisation: smoothed value is unchanged if new value is the same as extant.
     e80:	86 17       	cp	r24, r22
     e82:	b9 f0       	breq	.+46     	; 0xeb2 <smoothStatsValue(unsigned char, unsigned char)+0x3a>
  // Compute and update with new stochastically-rounded exponentially-smoothed ("Brown's simple exponential smoothing") value.
  // Stochastic rounding allows sub-lsb values to have an effect over time.
  const uint8_t stocAdd = randRNG8() & ((1 << STATS_SMOOTH_SHIFT) - 1); // Allows sub-lsb values to have an effect over time.
     e84:	0e 94 b9 21 	call	0x4372	; 0x4372 <randRNG8()>
  DEBUG_SERIAL_PRINT_FLASHSTRING("stocAdd=");
  DEBUG_SERIAL_PRINT(stocAdd);
  DEBUG_SERIAL_PRINTLN();
#endif
  // Do arithmetic in 16 bits to avoid over-/under- flows.
  return((uint8_t) (((((uint16_t) oldSmoothed) << STATS_SMOOTH_SHIFT) - ((uint16_t)oldSmoothed) + ((uint16_t)newValue) + stocAdd) >> STATS_SMOOTH_SHIFT));
     e88:	21 2f       	mov	r18, r17
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	a9 01       	movw	r20, r18
     e8e:	b3 e0       	ldi	r27, 0x03	; 3
     e90:	44 0f       	add	r20, r20
     e92:	55 1f       	adc	r21, r21
     e94:	ba 95       	dec	r27
     e96:	e1 f7       	brne	.-8      	; 0xe90 <smoothStatsValue(unsigned char, unsigned char)+0x18>
     e98:	42 1b       	sub	r20, r18
     e9a:	53 0b       	sbc	r21, r19
     e9c:	87 70       	andi	r24, 0x07	; 7
     e9e:	48 0f       	add	r20, r24
     ea0:	51 1d       	adc	r21, r1
     ea2:	40 0f       	add	r20, r16
     ea4:	51 1d       	adc	r21, r1
     ea6:	a3 e0       	ldi	r26, 0x03	; 3
     ea8:	56 95       	lsr	r21
     eaa:	47 95       	ror	r20
     eac:	aa 95       	dec	r26
     eae:	e1 f7       	brne	.-8      	; 0xea8 <smoothStatsValue(unsigned char, unsigned char)+0x30>
     eb0:	14 2f       	mov	r17, r20
  }
     eb2:	81 2f       	mov	r24, r17
     eb4:	1f 91       	pop	r17
     eb6:	0f 91       	pop	r16
     eb8:	08 95       	ret

00000eba <simpleUpdateStatsPair(unsigned char, unsigned char, unsigned char)>:
  }
// Get some constant calculation done at compile time,
//   * lastSetN  is the set number for the 'last' values, with 'smoothed' assumed to be the next set.
//   * hh  hour for these stats [0,23].
//   * value  new stats value in range [0,254].
static inline void simpleUpdateStatsPair(const uint8_t lastSetN, const uint8_t hh, const uint8_t value)
     eba:	ff 92       	push	r15
     ebc:	0f 93       	push	r16
     ebe:	1f 93       	push	r17
     ec0:	f4 2e       	mov	r15, r20
    DEBUG_SERIAL_PRINT(hh);
    DEBUG_SERIAL_PRINT_FLASHSTRING("h = ");
    DEBUG_SERIAL_PRINT(value);
    DEBUG_SERIAL_PRINTLN();
#endif
  simpleUpdateStatsPair_((uint8_t *)(EE_STATS_START_ADDR(lastSetN) + (hh)), (value));
     ec2:	98 e1       	ldi	r25, 0x18	; 24
     ec4:	89 9f       	mul	r24, r25
     ec6:	80 01       	movw	r16, r0
     ec8:	11 24       	eor	r1, r1
     eca:	06 0f       	add	r16, r22
     ecc:	11 1d       	adc	r17, r1
     ece:	00 50       	subi	r16, 0x00	; 0
     ed0:	1f 4f       	sbci	r17, 0xFF	; 255
#if 0 && defined(DEBUG) // Extra arg validation during dev.
  if((((int)lastEEPtr) < EE_START_STATS) || (((int)lastEEPtr)+24 > EE_END_STATS)) { panic(); }
  if(0xff == value) { panic(); }
#endif
  // Update the last-sample slot using the mean samples value.
  eeprom_smart_update_byte(lastEEPtr, value);
     ed2:	c8 01       	movw	r24, r16
     ed4:	64 2f       	mov	r22, r20
     ed6:	0e 94 5e 10 	call	0x20bc	; 0x20bc <eeprom_smart_update_byte(unsigned char*, unsigned char)>
  // If existing smoothed value unset or invalid, use new one as is, else fold in.
  uint8_t * const pS = lastEEPtr + 24;
     eda:	08 5e       	subi	r16, 0xE8	; 232
     edc:	1f 4f       	sbci	r17, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     ede:	f9 99       	sbic	0x1f, 1	; 31
     ee0:	fe cf       	rjmp	.-4      	; 0xede <simpleUpdateStatsPair(unsigned char, unsigned char, unsigned char)+0x24>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     ee2:	12 bd       	out	0x22, r17	; 34
     ee4:	01 bd       	out	0x21, r16	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     ee6:	f8 9a       	sbi	0x1f, 0	; 31
     ee8:	80 b5       	in	r24, 0x20	; 32
  const uint8_t smoothed = eeprom_read_byte(pS);
  if(0xff == smoothed) { eeprom_smart_update_byte(pS, value); }
     eea:	8f 3f       	cpi	r24, 0xFF	; 255
     eec:	19 f4       	brne	.+6      	; 0xef4 <simpleUpdateStatsPair(unsigned char, unsigned char, unsigned char)+0x3a>
     eee:	c8 01       	movw	r24, r16
     ef0:	6f 2d       	mov	r22, r15
     ef2:	05 c0       	rjmp	.+10     	; 0xefe <simpleUpdateStatsPair(unsigned char, unsigned char, unsigned char)+0x44>
  else { eeprom_smart_update_byte(pS, smoothStatsValue(smoothed, value)); }
     ef4:	6f 2d       	mov	r22, r15
     ef6:	0e 94 3c 07 	call	0xe78	; 0xe78 <smoothStatsValue(unsigned char, unsigned char)>
     efa:	68 2f       	mov	r22, r24
     efc:	c8 01       	movw	r24, r16
     efe:	0e 94 5e 10 	call	0x20bc	; 0x20bc <eeprom_smart_update_byte(unsigned char*, unsigned char)>
    DEBUG_SERIAL_PRINT_FLASHSTRING("h = ");
    DEBUG_SERIAL_PRINT(value);
    DEBUG_SERIAL_PRINTLN();
#endif
  simpleUpdateStatsPair_((uint8_t *)(EE_STATS_START_ADDR(lastSetN) + (hh)), (value));
  }
     f02:	1f 91       	pop	r17
     f04:	0f 91       	pop	r16
     f06:	ff 90       	pop	r15
     f08:	08 95       	ret

00000f0a <setMinBoilerOnMinutes(unsigned char)>:
#endif

#ifndef setMinBoilerOnMinutes
// Set minimum on (and off) time for pointer (minutes); zero to disable hub mode.
// Suggested minimum of 4 minutes for gas combi; much longer for heat pumps for example.
void setMinBoilerOnMinutes(uint8_t mins) { eeprom_smart_update_byte((uint8_t *)EE_START_MIN_BOILER_ON_MINS_INV, ~(mins)); }
     f0a:	68 2f       	mov	r22, r24
     f0c:	60 95       	com	r22
     f0e:	82 e1       	ldi	r24, 0x12	; 18
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	0e 94 5e 10 	call	0x20bc	; 0x20bc <eeprom_smart_update_byte(unsigned char*, unsigned char)>
     f16:	08 95       	ret

00000f18 <setFROSTTargetC(unsigned char)>:

#if defined(SETTABLE_TARGET_TEMPERATURES)
// Set (non-volatile) 'FROST' protection target in C; no higher than getWARMTargetC() returns, strictly positive, in range [MIN_TARGET_C,MAX_TARGET_C].
// Can also be used, even when a temperature pot is present, to set a floor setback temperature.
// Returns false if not set, eg because outside range [MIN_TARGET_C,MAX_TARGET_C], else returns true.
bool setFROSTTargetC(uint8_t tempC)
     f18:	1f 93       	push	r17
     f1a:	18 2f       	mov	r17, r24
  {
  if((tempC < MIN_TARGET_C) || (tempC > MAX_TARGET_C)) { return(false); } // Invalid temperature.
     f1c:	85 50       	subi	r24, 0x05	; 5
     f1e:	8b 35       	cpi	r24, 0x5B	; 91
     f20:	58 f4       	brcc	.+22     	; 0xf38 <setFROSTTargetC(unsigned char)+0x20>
  if(tempC > getWARMTargetC()) { return(false); } // Cannot set above WARM target.
     f22:	0e 94 cb 03 	call	0x796	; 0x796 <getWARMTargetC()>
     f26:	81 17       	cp	r24, r17
     f28:	38 f0       	brcs	.+14     	; 0xf38 <setFROSTTargetC(unsigned char)+0x20>
  eeprom_smart_update_byte((uint8_t *)EE_START_FROST_C, tempC); // Update in EEPROM if necessary.
     f2a:	8e e0       	ldi	r24, 0x0E	; 14
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	61 2f       	mov	r22, r17
     f30:	0e 94 5e 10 	call	0x20bc	; 0x20bc <eeprom_smart_update_byte(unsigned char*, unsigned char)>
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	01 c0       	rjmp	.+2      	; 0xf3a <setFROSTTargetC(unsigned char)+0x22>
  return(true); // Assume value correctly written.
     f38:	80 e0       	ldi	r24, 0x00	; 0
  }
     f3a:	1f 91       	pop	r17
     f3c:	08 95       	ret

00000f3e <ModelledRadValve::recalibrate()>:
// If possible exercise the valve to avoid pin sticking and recalibrate valve travel.
// Default does nothing.
void ModelledRadValve::recalibrate()
  {
#ifdef USE_MODULE_FHT8VSIMPLE
  FHT8VSyncAndTXReset(); // Should this be decalcinate instead/also/first?
     f3e:	0e 94 80 11 	call	0x2300	; 0x2300 <FHT8VSyncAndTXReset()>
#endif
  }
     f42:	08 95       	ret

00000f44 <bool SimpleStatsRotationBase::put<unsigned char>(Sensor<unsigned char> const&)>:
     f44:	cf 92       	push	r12
     f46:	df 92       	push	r13
     f48:	ef 92       	push	r14
     f4a:	ff 92       	push	r15
     f4c:	0f 93       	push	r16
     f4e:	1f 93       	push	r17
     f50:	6c 01       	movw	r12, r24
     f52:	8b 01       	movw	r16, r22
     f54:	db 01       	movw	r26, r22
     f56:	ed 91       	ld	r30, X+
     f58:	fc 91       	ld	r31, X
     f5a:	00 84       	ldd	r0, Z+8	; 0x08
     f5c:	f1 85       	ldd	r31, Z+9	; 0x09
     f5e:	e0 2d       	mov	r30, r0
     f60:	cb 01       	movw	r24, r22
     f62:	09 95       	icall
     f64:	7c 01       	movw	r14, r24
     f66:	d8 01       	movw	r26, r16
     f68:	ed 91       	ld	r30, X+
     f6a:	fc 91       	ld	r31, X
     f6c:	02 80       	ldd	r0, Z+2	; 0x02
     f6e:	f3 81       	ldd	r31, Z+3	; 0x03
     f70:	e0 2d       	mov	r30, r0
     f72:	c8 01       	movw	r24, r16
     f74:	09 95       	icall
     f76:	48 2f       	mov	r20, r24
     f78:	c6 01       	movw	r24, r12
     f7a:	b7 01       	movw	r22, r14
     f7c:	50 e0       	ldi	r21, 0x00	; 0
     f7e:	0e 94 ed 19 	call	0x33da	; 0x33da <SimpleStatsRotationBase::put(char const*, int)>
     f82:	1f 91       	pop	r17
     f84:	0f 91       	pop	r16
     f86:	ff 90       	pop	r15
     f88:	ef 90       	pop	r14
     f8a:	df 90       	pop	r13
     f8c:	cf 90       	pop	r12
     f8e:	08 95       	ret

00000f90 <rawStatsTX(bool, unsigned char*, bool, bool)>:
//       the unit will resume RX after sending the stats
//   * doubleTX  double TX to increase chance of successful reception
// This will use whichever transmission medium/carrier/etc is available.
#define STATS_MSG_START_OFFSET (RFM22_PREAMBLE_BYTES + RFM22_SYNC_MIN_BYTES)
#define STATS_MSG_MAX_LEN (64 - STATS_MSG_START_OFFSET)
static void rawStatsTX(const bool isBinary, uint8_t * const buf, const bool resumeRX, const bool doubleTX)
     f90:	ef 92       	push	r14
     f92:	ff 92       	push	r15
     f94:	0f 93       	push	r16
     f96:	1f 93       	push	r17
     f98:	8b 01       	movw	r16, r22
     f9a:	e4 2e       	mov	r14, r20
     f9c:	f2 2e       	mov	r15, r18
  {
  // Write in the preamble/sync bytes.
  uint8_t *bptr = buf;
  // Start with RFM23-friendly preamble which ends with with the aacccccc sync word.
  memset(bptr, RFM22_PREAMBLE_BYTE, RFM22_PREAMBLE_BYTES);
     f9e:	cb 01       	movw	r24, r22
     fa0:	6a ea       	ldi	r22, 0xAA	; 170
     fa2:	70 e0       	ldi	r23, 0x00	; 0
     fa4:	45 e0       	ldi	r20, 0x05	; 5
     fa6:	50 e0       	ldi	r21, 0x00	; 0
     fa8:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <memset>
  bptr += RFM22_PREAMBLE_BYTES;
  memset(bptr, RFM22_SYNC_BYTE, RFM22_SYNC_MIN_BYTES);
     fac:	c8 01       	movw	r24, r16
     fae:	05 96       	adiw	r24, 0x05	; 5
     fb0:	6c ec       	ldi	r22, 0xCC	; 204
     fb2:	70 e0       	ldi	r23, 0x00	; 0
     fb4:	43 e0       	ldi	r20, 0x03	; 3
     fb6:	50 e0       	ldi	r21, 0x00	; 0
     fb8:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <memset>
  bptr += RFM22_SYNC_MIN_BYTES;

  // TODO: put in listen before TX to reduce collisions (CSMA).
  // Send message starting will preamble.
  // Assume RFM22/23 support for now.
  RFM22QueueCmdToFF(buf);
     fbc:	c8 01       	movw	r24, r16
     fbe:	0e 94 b0 22 	call	0x4560	; 0x4560 <RFM22QueueCmdToFF(unsigned char*)>
  RFM22TXFIFO(); // Send it!  Approx 1.6ms/byte.     
     fc2:	0e 94 a8 23 	call	0x4750	; 0x4750 <RFM22TXFIFO()>
  if(doubleTX)
     fc6:	ff 20       	and	r15, r15
     fc8:	29 f0       	breq	.+10     	; 0xfd4 <rawStatsTX(bool, unsigned char*, bool, bool)+0x44>
    {
    nap(WDTO_15MS);
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <nap(signed char)>
    RFM22TXFIFO(); // Re-send it!
     fd0:	0e 94 a8 23 	call	0x4750	; 0x4750 <RFM22TXFIFO()>
    }

  // Resume appropriate behaviour after TX.
#if defined(ENABLE_BOILER_HUB)
  if(resumeRX)
     fd4:	ee 20       	and	r14, r14
     fd6:	21 f0       	breq	.+8      	; 0xfe0 <rawStatsTX(bool, unsigned char*, bool, bool)+0x50>
    { SetupToEavesdropOnFHT8V(); } // Revert to hub listening...
     fd8:	80 e0       	ldi	r24, 0x00	; 0
     fda:	0e 94 b3 11 	call	0x2366	; 0x2366 <SetupToEavesdropOnFHT8V(bool)>
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <rawStatsTX(bool, unsigned char*, bool, bool)+0x54>
  else
#endif
    { RFM22ModeStandbyAndClearState(); } // Go to standby to conserve energy.
     fe0:	0e 94 60 23 	call	0x46c0	; 0x46c0 <RFM22ModeStandbyAndClearState()>
  }
     fe4:	1f 91       	pop	r17
     fe6:	0f 91       	pop	r16
     fe8:	ff 90       	pop	r15
     fea:	ef 90       	pop	r14
     fec:	08 95       	ret

00000fee <__vector_5>:

#if !defined(ALT_MAIN_LOOP) // Do not define handlers here when alt main is in use.
// Previous state of port D pins to help detect changes.
static volatile uint8_t prevStatePD;
// Interrupt service routine for PD I/O port transition changes (including RX).
ISR(PCINT2_vect)
     fee:	1f 92       	push	r1
     ff0:	0f 92       	push	r0
     ff2:	0f b6       	in	r0, 0x3f	; 63
     ff4:	0f 92       	push	r0
     ff6:	11 24       	eor	r1, r1
     ff8:	2f 93       	push	r18
     ffa:	3f 93       	push	r19
     ffc:	4f 93       	push	r20
     ffe:	5f 93       	push	r21
    1000:	6f 93       	push	r22
    1002:	7f 93       	push	r23
    1004:	8f 93       	push	r24
    1006:	9f 93       	push	r25
    1008:	af 93       	push	r26
    100a:	bf 93       	push	r27
    100c:	ef 93       	push	r30
    100e:	ff 93       	push	r31
  {
  const uint8_t pins = PIND;
    1010:	89 b1       	in	r24, 0x09	; 9
  const uint8_t changes = pins ^ prevStatePD;
    1012:	90 91 8e 02 	lds	r25, 0x028E
  prevStatePD = pins;
    1016:	80 93 8e 02 	sts	0x028E, r24
  // If an interrupt arrived from no other masked source then wake the CLI.
  // The will ensure that the CLI is active, eg from RX activity,
  // eg it is possible to wake the CLI subsystem with an extra CR or LF.
  // It is OK to trigger this from other things such as button presses.
  // FIXME: ensure that resetCLIActiveTimer() is inlineable to minimise ISR prologue/epilogue time and space.
  if(!(changes & MASK_PD & ~1)) { resetCLIActiveTimer(); }
    101a:	0e 94 3e 27 	call	0x4e7c	; 0x4e7c <resetCLIActiveTimer()>
  }
    101e:	ff 91       	pop	r31
    1020:	ef 91       	pop	r30
    1022:	bf 91       	pop	r27
    1024:	af 91       	pop	r26
    1026:	9f 91       	pop	r25
    1028:	8f 91       	pop	r24
    102a:	7f 91       	pop	r23
    102c:	6f 91       	pop	r22
    102e:	5f 91       	pop	r21
    1030:	4f 91       	pop	r20
    1032:	3f 91       	pop	r19
    1034:	2f 91       	pop	r18
    1036:	0f 90       	pop	r0
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	0f 90       	pop	r0
    103c:	1f 90       	pop	r1
    103e:	18 95       	reti

00001040 <populateCoreStats(FullStatsMessageCore*)>:


// Clear and populate core stats structure with information from this node.
// Exactly what gets filled in will depend on sensors on the node,
// and may depend on stats TX security level (eg if collecting some sensitive items is also expensive).
void populateCoreStats(FullStatsMessageCore_t *const content)
    1040:	cf 93       	push	r28
    1042:	df 93       	push	r29
    1044:	ec 01       	movw	r28, r24
#define FullStatsMessageCore_MAX_BYTES_ON_WIRE 8
// Minimum size on wire including trailing CRC of core of FullStatsMessage.  TX message buffer should be one larger for trailing 0xff.
#define FullStatsMessageCore_MIN_BYTES_ON_WIRE 3

// Clear a FullStatsMessageCore_t, also indicating no optional fields present.
static inline void clearFullStatsMessageCore(FullStatsMessageCore_t *const p) { memset(p, 0, sizeof(FullStatsMessageCore_t)); }
    1046:	87 e0       	ldi	r24, 0x07	; 7
    1048:	fe 01       	movw	r30, r28
    104a:	11 92       	st	Z+, r1
    104c:	8a 95       	dec	r24
    104e:	e9 f7       	brne	.-6      	; 0x104a <populateCoreStats(FullStatsMessageCore*)+0xa>
  {
  clearFullStatsMessageCore(content); // Defensive programming: all fields should be set explicitly below.
  if(localFHT8VTRVEnabled())
    1050:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <localFHT8VTRVEnabled()>
    1054:	88 23       	and	r24, r24
    1056:	31 f0       	breq	.+12     	; 0x1064 <populateCoreStats(FullStatsMessageCore*)+0x24>
    {
    // Use FHT8V house codes if available.
    content->id0 = FHT8VGetHC1();
    1058:	0e 94 48 11 	call	0x2290	; 0x2290 <FHT8VGetHC1()>
    105c:	89 83       	std	Y+1, r24	; 0x01
    content->id1 = FHT8VGetHC2();
    105e:	0e 94 51 11 	call	0x22a2	; 0x22a2 <FHT8VGetHC2()>
    1062:	11 c0       	rjmp	.+34     	; 0x1086 <populateCoreStats(FullStatsMessageCore*)+0x46>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1064:	f9 99       	sbic	0x1f, 1	; 31
    1066:	fe cf       	rjmp	.-4      	; 0x1064 <populateCoreStats(FullStatsMessageCore*)+0x24>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1068:	84 e1       	ldi	r24, 0x14	; 20
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	92 bd       	out	0x22, r25	; 34
    106e:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1070:	f8 9a       	sbi	0x1f, 0	; 31
    1072:	80 b5       	in	r24, 0x20	; 32
    }
  else
    {
    // Use OpenTRV unique ID if no other higher-priority ID.
    content->id0 = eeprom_read_byte(0 + (uint8_t *)EE_START_ID);
    1074:	89 83       	std	Y+1, r24	; 0x01
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1076:	f9 99       	sbic	0x1f, 1	; 31
    1078:	fe cf       	rjmp	.-4      	; 0x1076 <populateCoreStats(FullStatsMessageCore*)+0x36>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    107a:	85 e1       	ldi	r24, 0x15	; 21
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	92 bd       	out	0x22, r25	; 34
    1080:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1082:	f8 9a       	sbi	0x1f, 0	; 31
    1084:	80 b5       	in	r24, 0x20	; 32
    content->id1 = eeprom_read_byte(1 + (uint8_t *)EE_START_ID);
    1086:	8a 83       	std	Y+2, r24	; 0x02
    }
  content->containsID = true;
    1088:	28 81       	ld	r18, Y
    108a:	82 2f       	mov	r24, r18
    108c:	81 60       	ori	r24, 0x01	; 1
    108e:	88 83       	st	Y, r24
  content->tempAndPower.tempC16 = TemperatureC16.get();
    1090:	80 91 c5 03 	lds	r24, 0x03C5
    1094:	8b 83       	std	Y+3, r24	; 0x03
    1096:	90 91 c6 03 	lds	r25, 0x03C6
    109a:	9f 77       	andi	r25, 0x7F	; 127
    109c:	8c 81       	ldd	r24, Y+4	; 0x04
    109e:	80 78       	andi	r24, 0x80	; 128
    10a0:	89 2b       	or	r24, r25
    10a2:	8c 83       	std	Y+4, r24	; 0x04
  content->tempAndPower.powerLow = Supply_mV.isSupplyVoltageLow();
    10a4:	90 91 65 03 	lds	r25, 0x0365
    10a8:	97 95       	ror	r25
    10aa:	99 27       	eor	r25, r25
    10ac:	97 95       	ror	r25
    10ae:	8f 77       	andi	r24, 0x7F	; 127
    10b0:	89 2b       	or	r24, r25
    10b2:	8c 83       	std	Y+4, r24	; 0x04
  content->containsTempAndPower = true;
    10b4:	23 60       	ori	r18, 0x03	; 3
    10b6:	28 83       	st	Y, r18
  public:
    // Return last value fetched by read(); undefined before first read().
    // Usually fast.
    // Often likely to be thread-safe or usable within ISRs (Interrupt Service Routines),
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual uint8_t get() const { return(value); }
    10b8:	80 91 bb 03 	lds	r24, 0x03BB
  content->ambL = fnmax((uint8_t)1, fnmin((uint8_t)254, (uint8_t)(AmbLight.get() >> 2))); // Coerce to allowed value in range [1,254]. Bug-fix c/o Gary Gladman!
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	95 95       	asr	r25
    10c0:	87 95       	ror	r24
    10c2:	95 95       	asr	r25
    10c4:	87 95       	ror	r24
    10c6:	8d 83       	std	Y+5, r24	; 0x05
    10c8:	98 2f       	mov	r25, r24
    10ca:	88 23       	and	r24, r24
    10cc:	09 f4       	brne	.+2      	; 0x10d0 <populateCoreStats(FullStatsMessageCore*)+0x90>
    10ce:	91 e0       	ldi	r25, 0x01	; 1
    10d0:	9d 83       	std	Y+5, r25	; 0x05
  content->containsAmbL = true;
    10d2:	88 81       	ld	r24, Y
    10d4:	84 60       	ori	r24, 0x04	; 4
    10d6:	88 83       	st	Y, r24
    // Returns true if the room appears to be likely occupied (with active users) recently.
    // This uses the same timer as isOccupied() (restarted by markAsOccupied())
    // but returns to false somewhat sooner for example to allow ramping up more costly occupancy detection methods
    // and to allow some simple graduated occupancy responses.
    // Thread-safe.
    bool isLikelyRecentlyOccupied() { return(occupationCountdownM > OCCUPATION_TIMEOUT_1_M); }
    10d8:	80 91 15 02 	lds	r24, 0x0215
    void markAsPossiblyOccupied();

    // Two-bit occupancy: (00 not disclosed,) 1 not occupied, 2 possibly occupied, 3 probably occupied.
    // 0 is not returned by this implementation.
    // Thread-safe.
    uint8_t twoBitOccupancyValue() { return(isLikelyRecentlyOccupied() ? 3 : (isLikelyOccupied() ? 2 : 1)); }
    10dc:	82 32       	cpi	r24, 0x22	; 34
    10de:	10 f0       	brcs	.+4      	; 0x10e4 <populateCoreStats(FullStatsMessageCore*)+0xa4>
    10e0:	93 e0       	ldi	r25, 0x03	; 3
    10e2:	07 c0       	rjmp	.+14     	; 0x10f2 <populateCoreStats(FullStatsMessageCore*)+0xb2>

    // Returns true if the room appears to be likely occupied (with active users) now.
    // Operates on a timeout; calling markAsOccupied() restarts the timer.
    // Defaults to false (and API still exists) when OCCUPANCY_SUPPORT not defined.
    // Thread-safe.
    bool isLikelyOccupied() { return(0 != occupationCountdownM); }
    10e4:	80 91 15 02 	lds	r24, 0x0215
    void markAsPossiblyOccupied();

    // Two-bit occupancy: (00 not disclosed,) 1 not occupied, 2 possibly occupied, 3 probably occupied.
    // 0 is not returned by this implementation.
    // Thread-safe.
    uint8_t twoBitOccupancyValue() { return(isLikelyRecentlyOccupied() ? 3 : (isLikelyOccupied() ? 2 : 1)); }
    10e8:	88 23       	and	r24, r24
    10ea:	11 f4       	brne	.+4      	; 0x10f0 <populateCoreStats(FullStatsMessageCore*)+0xb0>
    10ec:	91 e0       	ldi	r25, 0x01	; 1
    10ee:	01 c0       	rjmp	.+2      	; 0x10f2 <populateCoreStats(FullStatsMessageCore*)+0xb2>
    10f0:	92 e0       	ldi	r25, 0x02	; 2
  // OC1/OC2 = Occupancy: 00 not disclosed, 01 not occupied, 10 possibly occupied, 11 probably occupied.
  // The encodeFullStatsMessageCore() route should omit data not appopriate for security reasons.
  content->occ = Occupancy.twoBitOccupancyValue();
    10f2:	8e 81       	ldd	r24, Y+6	; 0x06
    10f4:	8c 7f       	andi	r24, 0xFC	; 252
    10f6:	89 2b       	or	r24, r25
    10f8:	8e 83       	std	Y+6, r24	; 0x06
  }
    10fa:	df 91       	pop	r29
    10fc:	cf 91       	pop	r28
    10fe:	08 95       	ret

00001100 <bareStatsTX(bool, bool, bool)>:
// This may be binary or JSON format.
//   * resumeRX  if true and unit capable of running in hub/RX mode,
//       the unit will resume RX after sending the stats
//   * allowDoubleTX  allow double TX to increase chance of successful reception
//   * doBinary  send binary form, else JSON form if supported
static void bareStatsTX(const bool resumeRX, const bool allowDoubleTX, const bool doBinary)   {
    1100:	8f 92       	push	r8
    1102:	9f 92       	push	r9
    1104:	af 92       	push	r10
    1106:	bf 92       	push	r11
    1108:	cf 92       	push	r12
    110a:	df 92       	push	r13
    110c:	ef 92       	push	r14
    110e:	ff 92       	push	r15
    1110:	0f 93       	push	r16
    1112:	1f 93       	push	r17
    1114:	df 93       	push	r29
    1116:	cf 93       	push	r28
    1118:	cd b7       	in	r28, 0x3d	; 61
    111a:	de b7       	in	r29, 0x3e	; 62
    111c:	c8 54       	subi	r28, 0x48	; 72
    111e:	d0 40       	sbci	r29, 0x00	; 0
    1120:	0f b6       	in	r0, 0x3f	; 63
    1122:	f8 94       	cli
    1124:	de bf       	out	0x3e, r29	; 62
    1126:	0f be       	out	0x3f, r0	; 63
    1128:	cd bf       	out	0x3d, r28	; 61
    112a:	98 2e       	mov	r9, r24
    112c:	86 2e       	mov	r8, r22
  //   * max binary length, or max JSON length + 1 for CRC + 1 to allow detection of oversize message
  //   * terminating 0xff
  uint8_t buf[STATS_MSG_START_OFFSET + max(FullStatsMessageCore_MAX_BYTES_ON_WIRE,  MSG_JSON_MAX_LENGTH+1) + 1];

#if defined(ALLOW_JSON_OUTPUT)
  if(doBinary)
    112e:	44 23       	and	r20, r20
    1130:	01 f1       	breq	.+64     	; 0x1172 <bareStatsTX(bool, bool, bool)+0x72>
#endif
    {
    // Send binary message first.
    // Gather core stats.
    FullStatsMessageCore_t content;
    populateCoreStats(&content);
    1132:	6e 01       	movw	r12, r28
    1134:	08 94       	sec
    1136:	c1 1c       	adc	r12, r1
    1138:	d1 1c       	adc	r13, r1
    113a:	c6 01       	movw	r24, r12
    113c:	0e 94 20 08 	call	0x1040	; 0x1040 <populateCoreStats(FullStatsMessageCore*)>
    const uint8_t *msg1 = encodeFullStatsMessageCore(buf + STATS_MSG_START_OFFSET, sizeof(buf) - STATS_MSG_START_OFFSET, getStatsTXLevel(), false, &content);
    1140:	0e 94 22 26 	call	0x4c44	; 0x4c44 <getStatsTXLevel()>
    1144:	ac 01       	movw	r20, r24
    1146:	68 e0       	ldi	r22, 0x08	; 8
    1148:	e6 2e       	mov	r14, r22
    114a:	f1 2c       	mov	r15, r1
    114c:	ec 0e       	add	r14, r28
    114e:	fd 1e       	adc	r15, r29
    1150:	c7 01       	movw	r24, r14
    1152:	08 96       	adiw	r24, 0x08	; 8
    1154:	69 e3       	ldi	r22, 0x39	; 57
    1156:	20 e0       	ldi	r18, 0x00	; 0
    1158:	86 01       	movw	r16, r12
    115a:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)>
    if(NULL == msg1)
    115e:	89 2b       	or	r24, r25
    1160:	09 f4       	brne	.+2      	; 0x1164 <bareStatsTX(bool, bool, bool)+0x64>
    1162:	0e c1       	rjmp	.+540    	; 0x1380 <bareStatsTX(bool, bool, bool)+0x280>
DEBUG_SERIAL_PRINTLN_FLASHSTRING("Bin gen err!");
#endif
      return;
      }
    // Record stats as if remote, and treat channel as secure.
    recordCoreStats(true, &content);
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	b6 01       	movw	r22, r12
    1168:	0e 94 12 1b 	call	0x3624	; 0x3624 <recordCoreStats(bool, FullStatsMessageCore const*)>
    // Send it!
    rawStatsTX(true, buf, resumeRX, allowDoubleTX);
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	b7 01       	movw	r22, r14
    1170:	e6 c0       	rjmp	.+460    	; 0x133e <bareStatsTX(bool, bool, bool)+0x23e>
    // Now append JSON text and closing 0xff...
    // Use letters that correspond to the values in ParsedRemoteStatsRecord and when displaying/parsing @ status records.
    int8_t wrote;

    // Managed JSON stats.
    static SimpleStatsRotation<8> ss1; // Configured for maximum different stats.
    1172:	80 91 44 02 	lds	r24, 0x0244
    1176:	88 23       	and	r24, r24
    1178:	a9 f5       	brne	.+106    	; 0x11e4 <bareStatsTX(bool, bool, bool)+0xe4>
    117a:	84 e4       	ldi	r24, 0x44	; 68
    117c:	92 e0       	ldi	r25, 0x02	; 2
    117e:	0e 94 fe 3a 	call	0x75fc	; 0x75fc <__cxa_guard_acquire>
    1182:	89 2b       	or	r24, r25
    1184:	79 f1       	breq	.+94     	; 0x11e4 <bareStatsTX(bool, bool, bool)+0xe4>

    // Initialise base with appropriate storage (non-null) and capacity knowledge.
    SimpleStatsRotationBase(DescValueTuple *_stats, const uint8_t _capacity)
      : capacity(_capacity), stats(_stats), nStats(0),
        lastTXed(~0), lastTXedLoPri(~0), lastTXedHiPri(~0), // Show the first item on the first pass...
        id(NULL)
    1186:	88 e0       	ldi	r24, 0x08	; 8
    1188:	80 93 4c 02 	sts	0x024C, r24
    118c:	26 e5       	ldi	r18, 0x56	; 86
    118e:	32 e0       	ldi	r19, 0x02	; 2
    1190:	30 93 4e 02 	sts	0x024E, r19
    1194:	20 93 4d 02 	sts	0x024D, r18
    1198:	10 92 4f 02 	sts	0x024F, r1
    119c:	8f ef       	ldi	r24, 0xFF	; 255
    119e:	80 93 50 02 	sts	0x0250, r24
    11a2:	80 93 51 02 	sts	0x0251, r24
    11a6:	80 93 52 02 	sts	0x0252, r24
    11aa:	10 92 54 02 	sts	0x0254, r1
    11ae:	10 92 53 02 	sts	0x0253, r1
    // is displayed immediately after the @/ID field when enabled,
    // and missing count values suggest a lost transmission somewhere.
    // Takes minimal space (1 byte).
    struct WriteCount
      {
      WriteCount() : enabled(0), count(0) { }
    11b2:	80 91 55 02 	lds	r24, 0x0255
    11b6:	80 7f       	andi	r24, 0xF0	; 240
    11b8:	80 93 55 02 	sts	0x0255, r24
    11bc:	f9 01       	movw	r30, r18
    // The default sensitivity is set to forbid transmission at all but minimum (0) leaf TX security settings.
    // By default the stat is normal priority.
    GenericStatsDescriptor(const char * const statKey,
                           const uint8_t statSensitivity = 1,
                           const bool statHighPriority = false)
      : key(statKey), sensitivity(statSensitivity), highPriority(statHighPriority)
    11be:	91 e0       	ldi	r25, 0x01	; 1
    11c0:	11 82       	std	Z+1, r1	; 0x01
    11c2:	10 82       	st	Z, r1
    11c4:	92 83       	std	Z+2, r25	; 0x02
    11c6:	13 82       	std	Z+3, r1	; 0x03
#endif

  protected:
    struct DescValueTuple
      {
      DescValueTuple() : descriptor(NULL), value(0) { }
    11c8:	15 82       	std	Z+5, r1	; 0x05
    11ca:	14 82       	std	Z+4, r1	; 0x04
      int value;

      // Various run-time flags.
      struct Flags
        {
        Flags() : changed(false) { }
    11cc:	86 81       	ldd	r24, Z+6	; 0x06
    11ce:	8e 7f       	andi	r24, 0xFE	; 254
    11d0:	86 83       	std	Z+6, r24	; 0x06
    11d2:	37 96       	adiw	r30, 0x07	; 7
    // Stats to be tracked and sent; mandatory/priority items must be first.
    // A copy is taken of the user-supplied set of descriptions, preserving order.
    DescValueTuple stats[MaxStats];

  public:
    SimpleStatsRotation() : SimpleStatsRotationBase(stats, MaxStats) { }
    11d4:	22 e0       	ldi	r18, 0x02	; 2
    11d6:	ee 38       	cpi	r30, 0x8E	; 142
    11d8:	f2 07       	cpc	r31, r18
    11da:	91 f7       	brne	.-28     	; 0x11c0 <bareStatsTX(bool, bool, bool)+0xc0>
    11dc:	84 e4       	ldi	r24, 0x44	; 68
    11de:	92 e0       	ldi	r25, 0x02	; 2
    11e0:	0e 94 08 3b 	call	0x7610	; 0x7610 <__cxa_guard_release>
    const bool maximise = true; // Make best use of available bandwidth...
    if(ss1.isEmpty())
    11e4:	80 91 4f 02 	lds	r24, 0x024F
    11e8:	88 23       	and	r24, r24
    11ea:	29 f4       	brne	.+10     	; 0x11f6 <bareStatsTX(bool, bool, bool)+0xf6>
    bool isEmpty() { return(0 == nStats); }

    // Iff true enable the count ("+") field and display immediately after the "@"/ID field.
    // The unsigned count increments as a successful write() operation completes,
    // and wraps after 63 (to limit space), potentially allowing easy detection of lost stats/transmissions.
    void enableCount(bool enable) { c.enabled = enable; }
    11ec:	80 91 55 02 	lds	r24, 0x0255
    11f0:	81 60       	ori	r24, 0x01	; 1
    11f2:	80 93 55 02 	sts	0x0255, r24
    // True if successful, false otherwise (eg capacity already reached).
    bool put(SimpleStatsKey key, int newValue);

    // Create/update value for the given sensor.
    // True if successful, false otherwise (eg capacity already reached).
    template <class T> bool put(const Sensor<T> &s) { return(put(s.tag(), s.get())); }
    11f6:	e0 91 c3 03 	lds	r30, 0x03C3
    11fa:	f0 91 c4 03 	lds	r31, 0x03C4
    11fe:	00 84       	ldd	r0, Z+8	; 0x08
    1200:	f1 85       	ldd	r31, Z+9	; 0x09
    1202:	e0 2d       	mov	r30, r0
    1204:	83 ec       	ldi	r24, 0xC3	; 195
    1206:	93 e0       	ldi	r25, 0x03	; 3
    1208:	09 95       	icall
    120a:	8c 01       	movw	r16, r24
    120c:	e0 91 c3 03 	lds	r30, 0x03C3
    1210:	f0 91 c4 03 	lds	r31, 0x03C4
    1214:	02 80       	ldd	r0, Z+2	; 0x02
    1216:	f3 81       	ldd	r31, Z+3	; 0x03
    1218:	e0 2d       	mov	r30, r0
    121a:	83 ec       	ldi	r24, 0xC3	; 195
    121c:	93 e0       	ldi	r25, 0x03	; 3
    121e:	09 95       	icall
    1220:	ac 01       	movw	r20, r24
    1222:	8c e4       	ldi	r24, 0x4C	; 76
    1224:	92 e0       	ldi	r25, 0x02	; 2
    1226:	b8 01       	movw	r22, r16
    1228:	0e 94 ed 19 	call	0x33da	; 0x33da <SimpleStatsRotationBase::put(char const*, int)>
//      // Try and get as much out on the first TX as possible.
//      maximise = true;
      }
    ss1.put(TemperatureC16);
#if defined(HUMIDITY_SENSOR_SUPPORT)
    ss1.put(RelHumidity);
    122c:	8c e4       	ldi	r24, 0x4C	; 76
    122e:	92 e0       	ldi	r25, 0x02	; 2
    1230:	6f eb       	ldi	r22, 0xBF	; 191
    1232:	73 e0       	ldi	r23, 0x03	; 3
    1234:	0e 94 a2 07 	call	0xf44	; 0xf44 <bool SimpleStatsRotationBase::put<unsigned char>(Sensor<unsigned char> const&)>
    // Returns true if the room appears to be likely occupied (with active users) recently.
    // This uses the same timer as isOccupied() (restarted by markAsOccupied())
    // but returns to false somewhat sooner for example to allow ramping up more costly occupancy detection methods
    // and to allow some simple graduated occupancy responses.
    // Thread-safe.
    bool isLikelyRecentlyOccupied() { return(occupationCountdownM > OCCUPATION_TIMEOUT_1_M); }
    1238:	80 91 15 02 	lds	r24, 0x0215
    void markAsPossiblyOccupied();

    // Two-bit occupancy: (00 not disclosed,) 1 not occupied, 2 possibly occupied, 3 probably occupied.
    // 0 is not returned by this implementation.
    // Thread-safe.
    uint8_t twoBitOccupancyValue() { return(isLikelyRecentlyOccupied() ? 3 : (isLikelyOccupied() ? 2 : 1)); }
    123c:	82 32       	cpi	r24, 0x22	; 34
    123e:	10 f0       	brcs	.+4      	; 0x1244 <bareStatsTX(bool, bool, bool)+0x144>
    1240:	43 e0       	ldi	r20, 0x03	; 3
    1242:	07 c0       	rjmp	.+14     	; 0x1252 <bareStatsTX(bool, bool, bool)+0x152>

    // Returns true if the room appears to be likely occupied (with active users) now.
    // Operates on a timeout; calling markAsOccupied() restarts the timer.
    // Defaults to false (and API still exists) when OCCUPANCY_SUPPORT not defined.
    // Thread-safe.
    bool isLikelyOccupied() { return(0 != occupationCountdownM); }
    1244:	80 91 15 02 	lds	r24, 0x0215
    void markAsPossiblyOccupied();

    // Two-bit occupancy: (00 not disclosed,) 1 not occupied, 2 possibly occupied, 3 probably occupied.
    // 0 is not returned by this implementation.
    // Thread-safe.
    uint8_t twoBitOccupancyValue() { return(isLikelyRecentlyOccupied() ? 3 : (isLikelyOccupied() ? 2 : 1)); }
    1248:	88 23       	and	r24, r24
    124a:	11 f4       	brne	.+4      	; 0x1250 <bareStatsTX(bool, bool, bool)+0x150>
    124c:	41 e0       	ldi	r20, 0x01	; 1
    124e:	01 c0       	rjmp	.+2      	; 0x1252 <bareStatsTX(bool, bool, bool)+0x152>
    1250:	42 e0       	ldi	r20, 0x02	; 2
#endif
#if defined(OCCUPANCY_SUPPORT)
    ss1.put(Occupancy.twoBitTag(), Occupancy.twoBitOccupancyValue()); // Reduce spurious TX cf percentage.
    1252:	8c e4       	ldi	r24, 0x4C	; 76
    1254:	92 e0       	ldi	r25, 0x02	; 2
    1256:	6a e0       	ldi	r22, 0x0A	; 10
    1258:	71 e0       	ldi	r23, 0x01	; 1
    125a:	50 e0       	ldi	r21, 0x00	; 0
    125c:	0e 94 ed 19 	call	0x33da	; 0x33da <SimpleStatsRotationBase::put(char const*, int)>
    // At other times more relaxed checking (eg lower power) can be used.
    bool increaseCheckForOccupancy() { return(!isLikelyRecentlyOccupied() && isLikelyOccupied() && !reportedRecently()); }

    // Get number of hours room vacant, zero when room occupied; does not wrap.
    // If forced to zero as soon as occupancy is detected.
    uint16_t getVacancyH() { return((value != 0) ? 0 : vacancyH); }
    1260:	80 91 14 02 	lds	r24, 0x0214
    1264:	88 23       	and	r24, r24
    1266:	19 f0       	breq	.+6      	; 0x126e <bareStatsTX(bool, bool, bool)+0x16e>
    1268:	40 e0       	ldi	r20, 0x00	; 0
    126a:	50 e0       	ldi	r21, 0x00	; 0
    126c:	04 c0       	rjmp	.+8      	; 0x1276 <bareStatsTX(bool, bool, bool)+0x176>
    126e:	80 91 17 02 	lds	r24, 0x0217
    1272:	48 2f       	mov	r20, r24
    1274:	50 e0       	ldi	r21, 0x00	; 0
    ss1.put(Occupancy.vacHTag(), Occupancy.getVacancyH()); // EXPERIMENTAL
    1276:	8c e4       	ldi	r24, 0x4C	; 76
    1278:	92 e0       	ldi	r25, 0x02	; 2
    127a:	6c e0       	ldi	r22, 0x0C	; 12
    127c:	71 e0       	ldi	r23, 0x01	; 1
    127e:	0e 94 ed 19 	call	0x33da	; 0x33da <SimpleStatsRotationBase::put(char const*, int)>
    // This depends on the AVR and other hardware components (eg sensors) in use.
    bool isSupplyVoltageLow() const { return(isLow); }

    // Returns true if the supply appears to be something like mains, that does not need monitoring.
    // This assumes that anything at/above 3V is mains or at least a long way from needing monitoring.
    bool isMains() const { return(!isLow && (mV >= 3000)); }
    1282:	80 91 65 03 	lds	r24, 0x0365
    1286:	88 23       	and	r24, r24
    1288:	09 f0       	breq	.+2      	; 0x128c <bareStatsTX(bool, bool, bool)+0x18c>
    128a:	5e c0       	rjmp	.+188    	; 0x1348 <bareStatsTX(bool, bool, bool)+0x248>
    128c:	80 91 63 03 	lds	r24, 0x0363
    1290:	90 91 64 03 	lds	r25, 0x0364
    1294:	88 5b       	subi	r24, 0xB8	; 184
    1296:	9b 40       	sbci	r25, 0x0B	; 11
    1298:	08 f4       	brcc	.+2      	; 0x129c <bareStatsTX(bool, bool, bool)+0x19c>
    129a:	56 c0       	rjmp	.+172    	; 0x1348 <bareStatsTX(bool, bool, bool)+0x248>
#endif
    // OPTIONAL items
    // Only TX supply voltage for units apparently not mains powered.
    if(!Supply_mV.isMains()) { ss1.put(Supply_mV); } else { ss1.remove(Supply_mV.tag()); }
    129c:	8c e4       	ldi	r24, 0x4C	; 76
    129e:	92 e0       	ldi	r25, 0x02	; 2
    12a0:	62 e1       	ldi	r22, 0x12	; 18
    12a2:	71 e0       	ldi	r23, 0x01	; 1
    12a4:	0e 94 46 1a 	call	0x348c	; 0x348c <SimpleStatsRotationBase::remove(char const*)>
#if !defined(LOCAL_TRV) // Deploying as sensor unit, not TRV controller, so show all sensors and no TRV stuff.
    // Only show ambient light levels for non-TRV pure-sensor units.
    ss1.put(AmbLight);
#else
    ss1.put(NominalRadValve);
    12a8:	8c e4       	ldi	r24, 0x4C	; 76
    12aa:	92 e0       	ldi	r25, 0x02	; 2
    12ac:	69 e1       	ldi	r22, 0x19	; 25
    12ae:	72 e0       	ldi	r23, 0x02	; 2
    12b0:	0e 94 a2 07 	call	0xf44	; 0xf44 <bool SimpleStatsRotationBase::put<unsigned char>(Sensor<unsigned char> const&)>
    ss1.put(NominalRadValve.tagTTC(), NominalRadValve.getTargetTempC());
    12b4:	40 91 1c 02 	lds	r20, 0x021C
    12b8:	8c e4       	ldi	r24, 0x4C	; 76
    12ba:	92 e0       	ldi	r25, 0x02	; 2
    12bc:	67 e1       	ldi	r22, 0x17	; 23
    12be:	71 e0       	ldi	r23, 0x01	; 1
    12c0:	50 e0       	ldi	r21, 0x00	; 0
    12c2:	0e 94 ed 19 	call	0x33da	; 0x33da <SimpleStatsRotationBase::put(char const*, int)>
#if 1
    ss1.put(NominalRadValve.tagCMPC(), NominalRadValve.getCumulativeMovementPC()); // EXPERIMENTAL
    12c6:	40 91 25 02 	lds	r20, 0x0225
    12ca:	50 91 26 02 	lds	r21, 0x0226
    12ce:	5f 70       	andi	r21, 0x0F	; 15
    12d0:	8c e4       	ldi	r24, 0x4C	; 76
    12d2:	92 e0       	ldi	r25, 0x02	; 2
    12d4:	6c e1       	ldi	r22, 0x1C	; 28
    12d6:	71 e0       	ldi	r23, 0x01	; 1
    12d8:	0e 94 ed 19 	call	0x33da	; 0x33da <SimpleStatsRotationBase::put(char const*, int)>
#endif
#endif
    // If not doing a doubleTX then consider sometimes suppressing the change-flag clearing for this send
    // to reduce the chance of important changes being missed by the receiver.
    wrote = ss1.writeJSON(bptr, sizeof(buf) - (bptr-buf), getStatsTXLevel(), maximise); // , !allowDoubleTX && randRNG8NextBoolean());
    12dc:	0e 94 22 26 	call	0x4c44	; 0x4c44 <getStatsTXLevel()>
    12e0:	28 2f       	mov	r18, r24
    12e2:	48 e0       	ldi	r20, 0x08	; 8
    12e4:	a4 2e       	mov	r10, r20
    12e6:	b1 2c       	mov	r11, r1
    12e8:	ac 0e       	add	r10, r28
    12ea:	bd 1e       	adc	r11, r29
    12ec:	38 e0       	ldi	r19, 0x08	; 8
    12ee:	c3 2e       	mov	r12, r19
    12f0:	d1 2c       	mov	r13, r1
    12f2:	ca 0c       	add	r12, r10
    12f4:	db 1c       	adc	r13, r11
    12f6:	8c e4       	ldi	r24, 0x4C	; 76
    12f8:	92 e0       	ldi	r25, 0x02	; 2
    12fa:	b6 01       	movw	r22, r12
    12fc:	49 e3       	ldi	r20, 0x39	; 57
    12fe:	01 e0       	ldi	r16, 0x01	; 1
    1300:	ee 24       	eor	r14, r14
    1302:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)>
    1306:	18 2f       	mov	r17, r24
    if(0 == wrote)
    1308:	88 23       	and	r24, r24
    130a:	29 f4       	brne	.+10     	; 0x1316 <bareStatsTX(bool, bool, bool)+0x216>
      {
DEBUG_SERIAL_PRINTLN_FLASHSTRING("JSON gen err!");
    130c:	81 ed       	ldi	r24, 0xD1	; 209
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	0e 94 28 27 	call	0x4e50	; 0x4e50 <serialPrintlnAndFlush(__FlashStringHelper const*)>
    1314:	35 c0       	rjmp	.+106    	; 0x1380 <bareStatsTX(bool, bool, bool)+0x280>
      return;
      }

    // Record stats as if local, and treat channel as secure.
    recordJSONStats(true, (const char *)bptr);
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	b6 01       	movw	r22, r12
    131a:	0e 94 42 1b 	call	0x3684	; 0x3684 <recordJSONStats(bool, char const*)>
    DEBUG_SERIAL_PRINT((const char *)bptr);
    DEBUG_SERIAL_PRINTLN();
#endif
    // Adjust JSON message for reliable transmission.
    // (Set high-bit on final '}' to make it unique, and compute and append (non-0xff) CRC.)
    const uint8_t crc = adjustJSONMsgForTXAndComputeCRC((char *)bptr);
    131e:	c6 01       	movw	r24, r12
    1320:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <adjustJSONMsgForTXAndComputeCRC(char*)>
    if(0xff == crc)
    1324:	8f 3f       	cpi	r24, 0xFF	; 255
    1326:	61 f1       	breq	.+88     	; 0x1380 <bareStatsTX(bool, bool, bool)+0x280>
      {
  //DEBUG_SERIAL_PRINTLN_FLASHSTRING("JSON msg bad!");
      return;
      }
    bptr += wrote;
    1328:	e1 2f       	mov	r30, r17
    132a:	ff 27       	eor	r31, r31
    132c:	e7 fd       	sbrc	r30, 7
    132e:	f0 95       	com	r31
    1330:	ec 0d       	add	r30, r12
    1332:	fd 1d       	adc	r31, r13
    *bptr++ = crc; // Add 7-bit CRC for on-the-wire check.
    1334:	80 83       	st	Z, r24
    *bptr = 0xff; // Terminate message for TX.
    1336:	8f ef       	ldi	r24, 0xFF	; 255
    1338:	81 83       	std	Z+1, r24	; 0x01
      return;
      }
#endif
    // TODO: put in listen before TX to reduce collisions (CSMA).
    // Send it!
    rawStatsTX(false, buf, resumeRX, allowDoubleTX);
    133a:	80 e0       	ldi	r24, 0x00	; 0
    133c:	b5 01       	movw	r22, r10
    133e:	49 2d       	mov	r20, r9
    1340:	28 2d       	mov	r18, r8
    1342:	0e 94 c8 07 	call	0xf90	; 0xf90 <rawStatsTX(bool, unsigned char*, bool, bool)>
    1346:	1c c0       	rjmp	.+56     	; 0x1380 <bareStatsTX(bool, bool, bool)+0x280>
    1348:	e0 91 5f 03 	lds	r30, 0x035F
    134c:	f0 91 60 03 	lds	r31, 0x0360
    1350:	00 84       	ldd	r0, Z+8	; 0x08
    1352:	f1 85       	ldd	r31, Z+9	; 0x09
    1354:	e0 2d       	mov	r30, r0
    1356:	8f e5       	ldi	r24, 0x5F	; 95
    1358:	93 e0       	ldi	r25, 0x03	; 3
    135a:	09 95       	icall
    135c:	8c 01       	movw	r16, r24
    135e:	e0 91 5f 03 	lds	r30, 0x035F
    1362:	f0 91 60 03 	lds	r31, 0x0360
    1366:	02 80       	ldd	r0, Z+2	; 0x02
    1368:	f3 81       	ldd	r31, Z+3	; 0x03
    136a:	e0 2d       	mov	r30, r0
    136c:	8f e5       	ldi	r24, 0x5F	; 95
    136e:	93 e0       	ldi	r25, 0x03	; 3
    1370:	09 95       	icall
    1372:	ac 01       	movw	r20, r24
    1374:	8c e4       	ldi	r24, 0x4C	; 76
    1376:	92 e0       	ldi	r25, 0x02	; 2
    1378:	b8 01       	movw	r22, r16
    137a:	0e 94 ed 19 	call	0x33da	; 0x33da <SimpleStatsRotationBase::put(char const*, int)>
    137e:	94 cf       	rjmp	.-216    	; 0x12a8 <bareStatsTX(bool, bool, bool)+0x1a8>
    }

#endif // defined(ALLOW_JSON_OUTPUT)

//DEBUG_SERIAL_PRINTLN_FLASHSTRING("Stats TX");
  }
    1380:	c8 5b       	subi	r28, 0xB8	; 184
    1382:	df 4f       	sbci	r29, 0xFF	; 255
    1384:	0f b6       	in	r0, 0x3f	; 63
    1386:	f8 94       	cli
    1388:	de bf       	out	0x3e, r29	; 62
    138a:	0f be       	out	0x3f, r0	; 63
    138c:	cd bf       	out	0x3d, r28	; 61
    138e:	cf 91       	pop	r28
    1390:	df 91       	pop	r29
    1392:	1f 91       	pop	r17
    1394:	0f 91       	pop	r16
    1396:	ff 90       	pop	r15
    1398:	ef 90       	pop	r14
    139a:	df 90       	pop	r13
    139c:	cf 90       	pop	r12
    139e:	bf 90       	pop	r11
    13a0:	af 90       	pop	r10
    13a2:	9f 90       	pop	r9
    13a4:	8f 90       	pop	r8
    13a6:	08 95       	ret

000013a8 <setupOpenTRV()>:
#endif

void setupOpenTRV()
  {
  // Set up async edge interrupts.
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    13a8:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    13aa:	f8 94       	cli
    {
    //PCICR = 0x05;
    //PCMSK0 = 0b00000011; // PB; PCINT  0--7    (LEARN1 and Radio)
    //PCMSK1 = 0b00000000; // PC; PCINT  8--15
    //PCMSK2 = 0b00101001; // PD; PCINT 16--24   (LEARN2 and MODE, RX)
    PCICR = 0x4; // 0x4 enables PD/PCMSK2.
    13ac:	84 e0       	ldi	r24, 0x04	; 4
    13ae:	80 93 68 00 	sts	0x0068, r24
    PCMSK2 = MASK_PD; // PD; PCINT 16--24 (0b1 is PCINT16/RX)
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	80 93 6d 00 	sts	0x006D, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    13b8:	9f bf       	out	0x3f, r25	; 63
  // Do early 'wake-up' stats transmission if possible
  // when everything else is set up and ready.
  // Attempt to maximise chance of reception with  double TX.
  // Assume not in hub mode yet.
  // Send all possible formats.
  bareStatsTX(false, true, true);
    13ba:	80 e0       	ldi	r24, 0x00	; 0
    13bc:	61 e0       	ldi	r22, 0x01	; 1
    13be:	41 e0       	ldi	r20, 0x01	; 1
    13c0:	0e 94 80 08 	call	0x1100	; 0x1100 <bareStatsTX(bool, bool, bool)>
  nap(WDTO_120MS); // Sleep long enough for receiver to have a chance to process binary format first.
    13c4:	83 e0       	ldi	r24, 0x03	; 3
    13c6:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <nap(signed char)>
  bareStatsTX(false, true, false);
    13ca:	80 e0       	ldi	r24, 0x00	; 0
    13cc:	61 e0       	ldi	r22, 0x01	; 1
    13ce:	40 e0       	ldi	r20, 0x00	; 0
    13d0:	0e 94 80 08 	call	0x1100	; 0x1100 <bareStatsTX(bool, bool, bool)>

  // Set appropriate loop() values just before entering it.
  TIME_LSD = getSecondsLT();
    13d4:	80 91 6d 03 	lds	r24, 0x036D
    13d8:	80 93 3c 02 	sts	0x023C, r24
  }
    13dc:	08 95       	ret

000013de <zapStats(unsigned int)>:

// Clear all collected statistics, eg when moving device to a new room or at a major time change.
// Requires 1.8ms per byte for each byte that actually needs erasing.
//   * maxBytesToErase limit the number of bytes erased to this; strictly positive, else 0 to allow 65536
// Returns true if finished with all bytes erased.
bool zapStats(uint16_t maxBytesToErase)
    13de:	0f 93       	push	r16
    13e0:	1f 93       	push	r17
    13e2:	cf 93       	push	r28
    13e4:	df 93       	push	r29
    13e6:	8c 01       	movw	r16, r24
    13e8:	c0 e0       	ldi	r28, 0x00	; 0
    13ea:	d1 e0       	ldi	r29, 0x01	; 1
  {
  for(uint8_t *p = (uint8_t *)EE_START_STATS; p <= (uint8_t *)EE_END_STATS; ++p)
    { if(eeprom_smart_erase_byte(p)) { if(--maxBytesToErase == 0) { return(false); } } } // Stop if out of time...
    13ec:	ce 01       	movw	r24, r28
    13ee:	0e 94 34 10 	call	0x2068	; 0x2068 <eeprom_smart_erase_byte(unsigned char*)>
    13f2:	88 23       	and	r24, r24
    13f4:	29 f0       	breq	.+10     	; 0x1400 <zapStats(unsigned int)+0x22>
    13f6:	01 50       	subi	r16, 0x01	; 1
    13f8:	10 40       	sbci	r17, 0x00	; 0
    13fa:	11 f4       	brne	.+4      	; 0x1400 <zapStats(unsigned int)+0x22>
    13fc:	80 e0       	ldi	r24, 0x00	; 0
    13fe:	06 c0       	rjmp	.+12     	; 0x140c <zapStats(unsigned int)+0x2e>
// Requires 1.8ms per byte for each byte that actually needs erasing.
//   * maxBytesToErase limit the number of bytes erased to this; strictly positive, else 0 to allow 65536
// Returns true if finished with all bytes erased.
bool zapStats(uint16_t maxBytesToErase)
  {
  for(uint8_t *p = (uint8_t *)EE_START_STATS; p <= (uint8_t *)EE_END_STATS; ++p)
    1400:	21 96       	adiw	r28, 0x01	; 1
    1402:	82 e0       	ldi	r24, 0x02	; 2
    1404:	c8 30       	cpi	r28, 0x08	; 8
    1406:	d8 07       	cpc	r29, r24
    1408:	89 f7       	brne	.-30     	; 0x13ec <zapStats(unsigned int)+0xe>
    140a:	81 e0       	ldi	r24, 0x01	; 1
    { if(eeprom_smart_erase_byte(p)) { if(--maxBytesToErase == 0) { return(false); } } } // Stop if out of time...
  return(true); // All done.
  }
    140c:	df 91       	pop	r29
    140e:	cf 91       	pop	r28
    1410:	1f 91       	pop	r17
    1412:	0f 91       	pop	r16
    1414:	08 95       	ret

00001416 <ModelledRadValve::setMinValvePcReallyOpen(unsigned char)>:
  }

// Set and cache minimum valve percentage open to be considered really open.
// Applies to local valve and, at hub, to calls for remote calls for heat.
// Any out-of-range value (eg >100) clears the override and DEFAULT_MIN_VALVE_PC_REALLY_OPEN will be used.
void ModelledRadValve::setMinValvePcReallyOpen(const uint8_t percent)
    1416:	1f 93       	push	r17
    1418:	18 2f       	mov	r17, r24
  {
  if((percent > 100) || (percent == 0) || (percent == DEFAULT_MIN_VALVE_PC_REALLY_OPEN))
    141a:	81 50       	subi	r24, 0x01	; 1
    141c:	84 36       	cpi	r24, 0x64	; 100
    141e:	10 f4       	brcc	.+4      	; 0x1424 <ModelledRadValve::setMinValvePcReallyOpen(unsigned char)+0xe>
    1420:	1a 30       	cpi	r17, 0x0A	; 10
    1422:	41 f4       	brne	.+16     	; 0x1434 <ModelledRadValve::setMinValvePcReallyOpen(unsigned char)+0x1e>
    {
    // Bad / out-of-range / default value so erase stored value if not already so.
    eeprom_smart_erase_byte((uint8_t *)EE_START_MIN_VALVE_PC_REALLY_OPEN);
    1424:	83 e1       	ldi	r24, 0x13	; 19
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	0e 94 34 10 	call	0x2068	; 0x2068 <eeprom_smart_erase_byte(unsigned char*)>
    // Cache logical default value.
    mVPRO_cache = DEFAULT_MIN_VALVE_PC_REALLY_OPEN;
    142c:	8a e0       	ldi	r24, 0x0A	; 10
    142e:	80 93 3b 02 	sts	0x023B, r24
    1432:	07 c0       	rjmp	.+14     	; 0x1442 <ModelledRadValve::setMinValvePcReallyOpen(unsigned char)+0x2c>
    return;
    }
  // Store specified value with as low wear as possible.
  eeprom_smart_update_byte((uint8_t *)EE_START_MIN_VALVE_PC_REALLY_OPEN, percent);
    1434:	83 e1       	ldi	r24, 0x13	; 19
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	61 2f       	mov	r22, r17
    143a:	0e 94 5e 10 	call	0x20bc	; 0x20bc <eeprom_smart_update_byte(unsigned char*, unsigned char)>
  // Cache it.
  mVPRO_cache = percent;
    143e:	10 93 3b 02 	sts	0x023B, r17
  }
    1442:	1f 91       	pop	r17
    1444:	08 95       	ret

00001446 <sampleStats(bool)>:
// Call this once per hour with fullSample==true, as near the end of the hour as possible;
// this will update the non-volatile stats record for the current hour.
// Optionally call this at a small (2--10) even number of evenly-spaced number of other times thoughout the hour
// with fullSample=false to sub-sample (and these may receive lower weighting or be ignored).
// (EEPROM wear should not be an issue at this update rate in normal use.)
void sampleStats(const bool fullSample)
    1446:	0f 93       	push	r16
    1448:	1f 93       	push	r17
    144a:	58 2f       	mov	r21, r24
  {
  // (Sub-)sample processing.
  // In general, keep running total of sub-samples in a way that should not overflow
  // and use the mean to update the non-volatile EEPROM values on the fullSample call.
  static uint8_t sampleCount_; // General sub-sample count; initially zero after boot, and zeroed after each full sample.
  const bool firstSample = (0 == sampleCount_++);
    144c:	60 91 98 02 	lds	r22, 0x0298
    1450:	40 e0       	ldi	r20, 0x00	; 0
    1452:	66 23       	and	r22, r22
    1454:	09 f4       	brne	.+2      	; 0x1458 <sampleStats(bool)+0x12>
    1456:	41 e0       	ldi	r20, 0x01	; 1
    1458:	16 2f       	mov	r17, r22
    145a:	1f 5f       	subi	r17, 0xFF	; 255
    145c:	10 93 98 02 	sts	0x0298, r17
    1460:	80 91 bb 03 	lds	r24, 0x03BB




// Templated function versions of min/max that do not evaluate the arguments twice.
template <class T> const T& fnmin(const T& a, const T& b) { return((a>b)?b:a); }
    1464:	8f 3f       	cpi	r24, 0xFF	; 255
    1466:	09 f4       	brne	.+2      	; 0x146a <sampleStats(bool)+0x24>
    1468:	8e ef       	ldi	r24, 0xFE	; 254
  // WARM mode count.
  static int8_t warmCount; // Sub-sample WARM count; initially zero, and zeroed after each full sample.
  if(inWarmMode()) { ++warmCount; } else { --warmCount; }
#endif
  // Ambient light.
  const uint16_t ambLight = fnmin(AmbLight.get(), (uint8_t)MAX_STATS_AMBLIGHT); // Constrain value at top end to avoid 'not set' value.
    146a:	28 2f       	mov	r18, r24
    146c:	30 e0       	ldi	r19, 0x00	; 0
  static uint16_t ambLightTotal;
  ambLightTotal = firstSample ? ambLight : (ambLightTotal + ambLight);
    146e:	44 23       	and	r20, r20
    1470:	31 f4       	brne	.+12     	; 0x147e <sampleStats(bool)+0x38>
    1472:	80 91 96 02 	lds	r24, 0x0296
    1476:	90 91 97 02 	lds	r25, 0x0297
    147a:	28 0f       	add	r18, r24
    147c:	39 1f       	adc	r19, r25
    147e:	30 93 97 02 	sts	0x0297, r19
    1482:	20 93 96 02 	sts	0x0296, r18
    virtual uint8_t preferredPollInterval_s() const { return(60); }

    // Return last value fetched by read(); undefined before first read().
    // Fast.
    // Not thread-safe nor usable within ISRs (Interrupt Service Routines).
    virtual int get() const { return(value); }
    1486:	20 91 c5 03 	lds	r18, 0x03C5
    148a:	30 91 c6 03 	lds	r19, 0x03C6
  const int tempC16 = TemperatureC16.get();
  static int tempC16Total;
  tempC16Total = firstSample ? tempC16 : (tempC16Total + tempC16);
    148e:	44 23       	and	r20, r20
    1490:	31 f4       	brne	.+12     	; 0x149e <sampleStats(bool)+0x58>
    1492:	80 91 94 02 	lds	r24, 0x0294
    1496:	90 91 95 02 	lds	r25, 0x0295
    149a:	28 0f       	add	r18, r24
    149c:	39 1f       	adc	r19, r25
    149e:	30 93 95 02 	sts	0x0295, r19
    14a2:	20 93 94 02 	sts	0x0294, r18
    14a6:	80 91 14 02 	lds	r24, 0x0214
#ifdef OCCUPANCY_SUPPORT
  const uint16_t occpc = Occupancy.get();
    14aa:	28 2f       	mov	r18, r24
    14ac:	30 e0       	ldi	r19, 0x00	; 0
  static uint16_t occpcTotal;
  occpcTotal = firstSample ? occpc : (occpcTotal + occpc);
    14ae:	44 23       	and	r20, r20
    14b0:	31 f4       	brne	.+12     	; 0x14be <sampleStats(bool)+0x78>
    14b2:	80 91 92 02 	lds	r24, 0x0292
    14b6:	90 91 93 02 	lds	r25, 0x0293
    14ba:	28 0f       	add	r18, r24
    14bc:	39 1f       	adc	r19, r25
    14be:	30 93 93 02 	sts	0x0293, r19
    14c2:	20 93 92 02 	sts	0x0292, r18
    14c6:	80 91 c1 03 	lds	r24, 0x03C1
#endif
#if defined(HUMIDITY_SENSOR_SUPPORT)
  // Assume for now RH% always available (compile-time determined) or not; not intermittent.
  // TODO: allow this to work with at least start-up-time availability detection.
  const uint16_t rhpc = fnmin(RelHumidity.get(), (uint8_t)100); // Fail safe.
    14ca:	85 36       	cpi	r24, 0x65	; 101
    14cc:	08 f0       	brcs	.+2      	; 0x14d0 <sampleStats(bool)+0x8a>
    14ce:	84 e6       	ldi	r24, 0x64	; 100
    14d0:	28 2f       	mov	r18, r24
    14d2:	30 e0       	ldi	r19, 0x00	; 0
  static uint16_t rhpcTotal;
  rhpcTotal = firstSample ? rhpc : (rhpcTotal + rhpc);
    14d4:	44 23       	and	r20, r20
    14d6:	31 f4       	brne	.+12     	; 0x14e4 <sampleStats(bool)+0x9e>
    14d8:	80 91 90 02 	lds	r24, 0x0290
    14dc:	90 91 91 02 	lds	r25, 0x0291
    14e0:	28 0f       	add	r18, r24
    14e2:	39 1f       	adc	r19, r25
    14e4:	30 93 91 02 	sts	0x0291, r19
    14e8:	20 93 90 02 	sts	0x0290, r18
#endif
  if(!fullSample) { return; } // Only accumulate values cached until a full sample.
    14ec:	55 23       	and	r21, r21
    14ee:	09 f4       	brne	.+2      	; 0x14f2 <sampleStats(bool)+0xac>
    14f0:	76 c0       	rjmp	.+236    	; 0x15de <sampleStats(bool)+0x198>
  // Catpure sample count to use below.
  const uint8_t sc = sampleCount_; 
  // Reset generic sub-sample count to initial state after fill sample.
  sampleCount_ = 0;
    14f2:	10 92 98 02 	sts	0x0298, r1

  // Get the current local-time hour...
  const uint_least8_t hh = getHoursLT(); 
    14f6:	0e 94 5d 24 	call	0x48ba	; 0x48ba <getHoursLT()>
    14fa:	08 2f       	mov	r16, r24

  // Scale and constrain last-read temperature to valid range for stats.
  const int tempCTotal = (1==sc)?tempC16Total:
                         ((2==sc)?((tempC16Total+1)>>1):
                                  ((tempC16Total + (sc>>1)) / sc));
    14fc:	11 30       	cpi	r17, 0x01	; 1
    14fe:	29 f4       	brne	.+10     	; 0x150a <sampleStats(bool)+0xc4>
    1500:	80 91 94 02 	lds	r24, 0x0294
    1504:	90 91 95 02 	lds	r25, 0x0295
    1508:	15 c0       	rjmp	.+42     	; 0x1534 <sampleStats(bool)+0xee>
    150a:	20 91 94 02 	lds	r18, 0x0294
    150e:	30 91 95 02 	lds	r19, 0x0295
    1512:	12 30       	cpi	r17, 0x02	; 2
    1514:	29 f4       	brne	.+10     	; 0x1520 <sampleStats(bool)+0xda>
    1516:	c9 01       	movw	r24, r18
    1518:	01 96       	adiw	r24, 0x01	; 1
    151a:	95 95       	asr	r25
    151c:	87 95       	ror	r24
    151e:	0a c0       	rjmp	.+20     	; 0x1534 <sampleStats(bool)+0xee>
    1520:	61 2f       	mov	r22, r17
    1522:	70 e0       	ldi	r23, 0x00	; 0
    1524:	cb 01       	movw	r24, r22
    1526:	95 95       	asr	r25
    1528:	87 95       	ror	r24
    152a:	82 0f       	add	r24, r18
    152c:	93 1f       	adc	r25, r19
    152e:	0e 94 e0 3d 	call	0x7bc0	; 0x7bc0 <__divmodhi4>
    1532:	cb 01       	movw	r24, r22
  const uint8_t temp = compressTempC16(tempCTotal);
    1534:	0e 94 80 06 	call	0xd00	; 0xd00 <compressTempC16(int)>
    1538:	48 2f       	mov	r20, r24
  DEBUG_SERIAL_PRINT_FLASHSTRING(", expanded=");
  DEBUG_SERIAL_PRINT(expandTempC16(temp));
  DEBUG_SERIAL_PRINTLN();
#endif
//  const uint8_t temp = compressTempC16(smartDivToU8(tempC16Total, sc));
  simpleUpdateStatsPair(EE_STATS_SET_TEMP_BY_HOUR, hh, temp);
    153a:	80 e0       	ldi	r24, 0x00	; 0
    153c:	60 2f       	mov	r22, r16
    153e:	0e 94 5d 07 	call	0xeba	; 0xeba <simpleUpdateStatsPair(unsigned char, unsigned char, unsigned char)>
//  const uint8_t tempSmoothed = eeprom_read_byte(phT);
//  if(tempSmoothed > MAX_STATS_TEMP) { eeprom_smart_update_byte(phT, temp); }
//  else { eeprom_smart_update_byte(phT, smoothStatsValue(tempSmoothed, temp)); }

  // Ambient light; last and smoothed data sets,
  simpleUpdateStatsPair(EE_STATS_SET_AMBLIGHT_BY_HOUR, hh, smartDivToU8(ambLightTotal, sc));
    1542:	40 91 96 02 	lds	r20, 0x0296
    1546:	50 91 97 02 	lds	r21, 0x0297
static uint8_t smartDivToU8(const uint16_t total, const uint8_t sampleCount)
  {
#if 0 && defined(DEBUG) // Extra arg validation during dev.
  if(0 == sampleCount) { panic(); }
#endif
  if(1 == sampleCount) { return((uint8_t) total); } // No division required.
    154a:	11 30       	cpi	r17, 0x01	; 1
    154c:	81 f0       	breq	.+32     	; 0x156e <sampleStats(bool)+0x128>
  if(2 == sampleCount) { return((uint8_t) (total >> 1)); } // Fast shift instead of slow divide.
    154e:	12 30       	cpi	r17, 0x02	; 2
    1550:	19 f4       	brne	.+6      	; 0x1558 <sampleStats(bool)+0x112>
    1552:	56 95       	lsr	r21
    1554:	47 95       	ror	r20
    1556:	0b c0       	rjmp	.+22     	; 0x156e <sampleStats(bool)+0x128>
  return((uint8_t) ((total + (sampleCount>>1)) / sampleCount)); // Generic divide (slow).
    1558:	81 2f       	mov	r24, r17
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	95 95       	asr	r25
    155e:	87 95       	ror	r24
    1560:	84 0f       	add	r24, r20
    1562:	95 1f       	adc	r25, r21
    1564:	61 2f       	mov	r22, r17
    1566:	70 e0       	ldi	r23, 0x00	; 0
    1568:	0e 94 cc 3d 	call	0x7b98	; 0x7b98 <__udivmodhi4>
    156c:	46 2f       	mov	r20, r22
//  const uint8_t tempSmoothed = eeprom_read_byte(phT);
//  if(tempSmoothed > MAX_STATS_TEMP) { eeprom_smart_update_byte(phT, temp); }
//  else { eeprom_smart_update_byte(phT, smoothStatsValue(tempSmoothed, temp)); }

  // Ambient light; last and smoothed data sets,
  simpleUpdateStatsPair(EE_STATS_SET_AMBLIGHT_BY_HOUR, hh, smartDivToU8(ambLightTotal, sc));
    156e:	82 e0       	ldi	r24, 0x02	; 2
    1570:	60 2f       	mov	r22, r16
    1572:	0e 94 5d 07 	call	0xeba	; 0xeba <simpleUpdateStatsPair(unsigned char, unsigned char, unsigned char)>

#ifdef OCCUPANCY_SUPPORT
  // Occupancy confidence percent, if supported; last and smoothed data sets,
  simpleUpdateStatsPair(EE_STATS_SET_OCCPC_BY_HOUR, hh, smartDivToU8(occpcTotal, sc));
    1576:	40 91 92 02 	lds	r20, 0x0292
    157a:	50 91 93 02 	lds	r21, 0x0293
static uint8_t smartDivToU8(const uint16_t total, const uint8_t sampleCount)
  {
#if 0 && defined(DEBUG) // Extra arg validation during dev.
  if(0 == sampleCount) { panic(); }
#endif
  if(1 == sampleCount) { return((uint8_t) total); } // No division required.
    157e:	11 30       	cpi	r17, 0x01	; 1
    1580:	81 f0       	breq	.+32     	; 0x15a2 <sampleStats(bool)+0x15c>
  if(2 == sampleCount) { return((uint8_t) (total >> 1)); } // Fast shift instead of slow divide.
    1582:	12 30       	cpi	r17, 0x02	; 2
    1584:	19 f4       	brne	.+6      	; 0x158c <sampleStats(bool)+0x146>
    1586:	56 95       	lsr	r21
    1588:	47 95       	ror	r20
    158a:	0b c0       	rjmp	.+22     	; 0x15a2 <sampleStats(bool)+0x15c>
  return((uint8_t) ((total + (sampleCount>>1)) / sampleCount)); // Generic divide (slow).
    158c:	81 2f       	mov	r24, r17
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	95 95       	asr	r25
    1592:	87 95       	ror	r24
    1594:	84 0f       	add	r24, r20
    1596:	95 1f       	adc	r25, r21
    1598:	61 2f       	mov	r22, r17
    159a:	70 e0       	ldi	r23, 0x00	; 0
    159c:	0e 94 cc 3d 	call	0x7b98	; 0x7b98 <__udivmodhi4>
    15a0:	46 2f       	mov	r20, r22
  // Ambient light; last and smoothed data sets,
  simpleUpdateStatsPair(EE_STATS_SET_AMBLIGHT_BY_HOUR, hh, smartDivToU8(ambLightTotal, sc));

#ifdef OCCUPANCY_SUPPORT
  // Occupancy confidence percent, if supported; last and smoothed data sets,
  simpleUpdateStatsPair(EE_STATS_SET_OCCPC_BY_HOUR, hh, smartDivToU8(occpcTotal, sc));
    15a2:	84 e0       	ldi	r24, 0x04	; 4
    15a4:	60 2f       	mov	r22, r16
    15a6:	0e 94 5d 07 	call	0xeba	; 0xeba <simpleUpdateStatsPair(unsigned char, unsigned char, unsigned char)>
#endif 

#if defined(HUMIDITY_SENSOR_SUPPORT)
  // Relative humidity percent, if supported; last and smoothed data sets,
  simpleUpdateStatsPair(EE_STATS_SET_RHPC_BY_HOUR, hh, smartDivToU8(rhpcTotal, sc));
    15aa:	40 91 90 02 	lds	r20, 0x0290
    15ae:	50 91 91 02 	lds	r21, 0x0291
static uint8_t smartDivToU8(const uint16_t total, const uint8_t sampleCount)
  {
#if 0 && defined(DEBUG) // Extra arg validation during dev.
  if(0 == sampleCount) { panic(); }
#endif
  if(1 == sampleCount) { return((uint8_t) total); } // No division required.
    15b2:	11 30       	cpi	r17, 0x01	; 1
    15b4:	81 f0       	breq	.+32     	; 0x15d6 <sampleStats(bool)+0x190>
  if(2 == sampleCount) { return((uint8_t) (total >> 1)); } // Fast shift instead of slow divide.
    15b6:	12 30       	cpi	r17, 0x02	; 2
    15b8:	19 f4       	brne	.+6      	; 0x15c0 <sampleStats(bool)+0x17a>
    15ba:	56 95       	lsr	r21
    15bc:	47 95       	ror	r20
    15be:	0b c0       	rjmp	.+22     	; 0x15d6 <sampleStats(bool)+0x190>
  return((uint8_t) ((total + (sampleCount>>1)) / sampleCount)); // Generic divide (slow).
    15c0:	81 2f       	mov	r24, r17
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	95 95       	asr	r25
    15c6:	87 95       	ror	r24
    15c8:	84 0f       	add	r24, r20
    15ca:	95 1f       	adc	r25, r21
    15cc:	61 2f       	mov	r22, r17
    15ce:	70 e0       	ldi	r23, 0x00	; 0
    15d0:	0e 94 cc 3d 	call	0x7b98	; 0x7b98 <__udivmodhi4>
    15d4:	46 2f       	mov	r20, r22
  simpleUpdateStatsPair(EE_STATS_SET_OCCPC_BY_HOUR, hh, smartDivToU8(occpcTotal, sc));
#endif 

#if defined(HUMIDITY_SENSOR_SUPPORT)
  // Relative humidity percent, if supported; last and smoothed data sets,
  simpleUpdateStatsPair(EE_STATS_SET_RHPC_BY_HOUR, hh, smartDivToU8(rhpcTotal, sc));
    15d6:	86 e0       	ldi	r24, 0x06	; 6
    15d8:	60 2f       	mov	r22, r16
    15da:	0e 94 5d 07 	call	0xeba	; 0xeba <simpleUpdateStatsPair(unsigned char, unsigned char, unsigned char)>
  // Reset WARM sub-sample count after full sample.
  warmCount = 0;
#endif

  // TODO: other stats measures...
  }
    15de:	1f 91       	pop	r17
    15e0:	0f 91       	pop	r16
    15e2:	08 95       	ret

000015e4 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)>:
// Returns false if a full set of stats not available, eg including the specified hour.
// Always returns false if all samples are the same.
//   * inTop  test for membership of the top quartile if true, bottom quartile if false
//   * statsSet  stats set number to use.
//   * hour  hour of day to use or ~0 for current hour.
bool inOutlierQuartile(const uint8_t inTop, const uint8_t statsSet, const uint8_t hour)
    15e4:	0f 93       	push	r16
    15e6:	1f 93       	push	r17
    15e8:	08 2f       	mov	r16, r24
    15ea:	16 2f       	mov	r17, r22
  {
  if(statsSet >= EE_STATS_SETS) { return(false); } // Bad stats set number, ie unsafe.
    15ec:	6a 30       	cpi	r22, 0x0A	; 10
    15ee:	08 f0       	brcs	.+2      	; 0x15f2 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0xe>
    15f0:	40 c0       	rjmp	.+128    	; 0x1672 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x8e>
  const uint8_t hh = (hour > 23) ? getHoursLT() : hour;
    15f2:	48 31       	cpi	r20, 0x18	; 24
    15f4:	18 f0       	brcs	.+6      	; 0x15fc <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x18>
    15f6:	0e 94 5d 24 	call	0x48ba	; 0x48ba <getHoursLT()>
    15fa:	48 2f       	mov	r20, r24
  const uint8_t *ss = (uint8_t *)(EE_STATS_START_ADDR(statsSet));
    15fc:	88 e1       	ldi	r24, 0x18	; 24
    15fe:	18 9f       	mul	r17, r24
    1600:	b0 01       	movw	r22, r0
    1602:	11 24       	eor	r1, r1
    1604:	9b 01       	movw	r18, r22
    1606:	20 50       	subi	r18, 0x00	; 0
    1608:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    160a:	f9 99       	sbic	0x1f, 1	; 31
    160c:	fe cf       	rjmp	.-4      	; 0x160a <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x26>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    160e:	c9 01       	movw	r24, r18
    1610:	84 0f       	add	r24, r20
    1612:	91 1d       	adc	r25, r1
    1614:	92 bd       	out	0x22, r25	; 34
    1616:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1618:	f8 9a       	sbi	0x1f, 0	; 31
    161a:	40 b5       	in	r20, 0x20	; 32
  const uint8_t sample = eeprom_read_byte(ss + hh);
  if(STATS_UNSET_INT == sample) { return(false); }
  if(inTop) { return(inTopQuartile(ss, sample)); }
    161c:	00 23       	and	r16, r16
    161e:	21 f4       	brne	.+8      	; 0x1628 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x44>
    1620:	90 e0       	ldi	r25, 0x00	; 0
//   * s is start of (24) sample set in EEPROM
//   * sample to be tested for being in lower quartile
bool inBottomQuartile(const uint8_t *sE, const uint8_t sample)
  {
  uint8_t valuesHigher = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
    1622:	68 5e       	subi	r22, 0xE8	; 232
    1624:	7e 4f       	sbci	r23, 0xFE	; 254
    1626:	22 c0       	rjmp	.+68     	; 0x166c <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x88>
  if(statsSet >= EE_STATS_SETS) { return(false); } // Bad stats set number, ie unsafe.
  const uint8_t hh = (hour > 23) ? getHoursLT() : hour;
  const uint8_t *ss = (uint8_t *)(EE_STATS_START_ADDR(statsSet));
  const uint8_t sample = eeprom_read_byte(ss + hh);
  if(STATS_UNSET_INT == sample) { return(false); }
  if(inTop) { return(inTopQuartile(ss, sample)); }
    1628:	90 e0       	ldi	r25, 0x00	; 0
//   * s is start of (24) sample set in EEPROM
//   * sample to be tested for being in lower quartile
bool inTopQuartile(const uint8_t *sE, const uint8_t sample)
  {
  uint8_t valuesLower = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
    162a:	68 5e       	subi	r22, 0xE8	; 232
    162c:	7e 4f       	sbci	r23, 0xFE	; 254
    162e:	0d c0       	rjmp	.+26     	; 0x164a <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x66>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1630:	f9 99       	sbic	0x1f, 1	; 31
    1632:	fe cf       	rjmp	.-4      	; 0x1630 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x4c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1634:	32 bd       	out	0x22, r19	; 34
    1636:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1638:	f8 9a       	sbi	0x1f, 0	; 31
    163a:	80 b5       	in	r24, 0x20	; 32
    {
    const uint8_t v = eeprom_read_byte(sE); 
    if(STATS_UNSET_INT == v) { return(false); } // Abort if not a full set of stats (eg at least one full day's worth). 
    if(v < sample) { if(++valuesLower >= 18) { return(true); } } // Stop as soon as known to be in upper quartile.
    163c:	84 17       	cp	r24, r20
    163e:	18 f4       	brcc	.+6      	; 0x1646 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x62>
    1640:	9f 5f       	subi	r25, 0xFF	; 255
    1642:	92 31       	cpi	r25, 0x12	; 18
    1644:	c0 f4       	brcc	.+48     	; 0x1676 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x92>
//   * s is start of (24) sample set in EEPROM
//   * sample to be tested for being in lower quartile
bool inTopQuartile(const uint8_t *sE, const uint8_t sample)
  {
  uint8_t valuesLower = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
    1646:	2f 5f       	subi	r18, 0xFF	; 255
    1648:	3f 4f       	sbci	r19, 0xFF	; 255
    164a:	26 17       	cp	r18, r22
    164c:	37 07       	cpc	r19, r23
    164e:	81 f7       	brne	.-32     	; 0x1630 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x4c>
    1650:	10 c0       	rjmp	.+32     	; 0x1672 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x8e>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1652:	f9 99       	sbic	0x1f, 1	; 31
    1654:	fe cf       	rjmp	.-4      	; 0x1652 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x6e>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1656:	32 bd       	out	0x22, r19	; 34
    1658:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    165a:	f8 9a       	sbi	0x1f, 0	; 31
    165c:	80 b5       	in	r24, 0x20	; 32
  uint8_t valuesHigher = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
    {
    const uint8_t v = eeprom_read_byte(sE); 
    if(STATS_UNSET_INT == v) { return(false); } // Abort if not a full set of stats (eg at least one full day's worth). 
    if(v > sample) { if(++valuesHigher >= 18) { return(true); } } // Stop as soon as known to be in lower quartile.
    165e:	48 17       	cp	r20, r24
    1660:	18 f4       	brcc	.+6      	; 0x1668 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x84>
    1662:	9f 5f       	subi	r25, 0xFF	; 255
    1664:	92 31       	cpi	r25, 0x12	; 18
    1666:	38 f4       	brcc	.+14     	; 0x1676 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x92>
//   * s is start of (24) sample set in EEPROM
//   * sample to be tested for being in lower quartile
bool inBottomQuartile(const uint8_t *sE, const uint8_t sample)
  {
  uint8_t valuesHigher = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
    1668:	2f 5f       	subi	r18, 0xFF	; 255
    166a:	3f 4f       	sbci	r19, 0xFF	; 255
    166c:	26 17       	cp	r18, r22
    166e:	37 07       	cpc	r19, r23
    1670:	81 f7       	brne	.-32     	; 0x1652 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x6e>
    1672:	80 e0       	ldi	r24, 0x00	; 0
    1674:	01 c0       	rjmp	.+2      	; 0x1678 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x94>
    1676:	81 e0       	ldi	r24, 0x01	; 1
  const uint8_t *ss = (uint8_t *)(EE_STATS_START_ADDR(statsSet));
  const uint8_t sample = eeprom_read_byte(ss + hh);
  if(STATS_UNSET_INT == sample) { return(false); }
  if(inTop) { return(inTopQuartile(ss, sample)); }
  return(inBottomQuartile(ss, sample));
  }
    1678:	1f 91       	pop	r17
    167a:	0f 91       	pop	r16
    167c:	08 95       	ret

0000167e <ModelledRadValve::computeTargetTemp()>:
// Will be called by computeCallForHeat().
// One aim is to allow reasonable energy savings (10--30%)
// even if the device is left in WARM mode all the time,
// using occupancy/light/etc to determine when temperature can be set back
// without annoying users.
uint8_t ModelledRadValve::computeTargetTemp()
    167e:	ef 92       	push	r14
    1680:	ff 92       	push	r15
    1682:	0f 93       	push	r16
    1684:	1f 93       	push	r17
  {
  // In FROST mode.
  if(!inWarmMode())
    1686:	80 91 9c 02 	lds	r24, 0x029C
    168a:	88 23       	and	r24, r24
    168c:	81 f5       	brne	.+96     	; 0x16ee <ModelledRadValve::computeTargetTemp()+0x70>
    {
    const uint8_t frostC = getFROSTTargetC();
    168e:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <getFROSTTargetC()>
    1692:	08 2f       	mov	r16, r24
    1694:	80 91 14 02 	lds	r24, 0x0214
    1698:	88 23       	and	r24, r24
    169a:	29 f4       	brne	.+10     	; 0x16a6 <ModelledRadValve::computeTargetTemp()+0x28>
    // to give room a chance to hit the target, and for furniture and surfaces to be warm, etc.
    // Don't do this if the room has been vacant for a long time (eg so as to avoid pre-warm being higher than WARM ever).
    // HINT OF SMARTNESS/ANTICIPATION HERE...
    // Only do this if the target WARM temperature is not an 'eco' temperature (ie near the bottom of the scale)
    // unless the current hour seems to be in the top quartile of occupancy.
    if(!Occupancy.longVacant() && isAnyScheduleOnWARMSoon())
    169c:	80 91 17 02 	lds	r24, 0x0217
    16a0:	89 31       	cpi	r24, 0x19	; 25
    16a2:	08 f0       	brcs	.+2      	; 0x16a6 <ModelledRadValve::computeTargetTemp()+0x28>
    16a4:	8e c0       	rjmp	.+284    	; 0x17c2 <ModelledRadValve::computeTargetTemp()+0x144>
    16a6:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <isAnyScheduleOnWARMSoon()>
    16aa:	88 23       	and	r24, r24
    16ac:	09 f4       	brne	.+2      	; 0x16b0 <ModelledRadValve::computeTargetTemp()+0x32>
    16ae:	89 c0       	rjmp	.+274    	; 0x17c2 <ModelledRadValve::computeTargetTemp()+0x144>
      {
      const uint8_t warmTarget = getWARMTargetC();
    16b0:	0e 94 cb 03 	call	0x796	; 0x796 <getWARMTargetC()>
    16b4:	f8 2e       	mov	r15, r24
      // Compute putative pre-warm temperature...
      const uint8_t preWarmTempC = fnmax((uint8_t)(warmTarget - (hasEcoBias() ? SETBACK_ECO : SETBACK_DEFAULT)), frostC);
    16b6:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <hasEcoBias()>
    16ba:	88 23       	and	r24, r24
    16bc:	11 f4       	brne	.+4      	; 0x16c2 <ModelledRadValve::computeTargetTemp()+0x44>
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	01 c0       	rjmp	.+2      	; 0x16c4 <ModelledRadValve::computeTargetTemp()+0x46>
    16c2:	82 e0       	ldi	r24, 0x02	; 2
    16c4:	1f 2d       	mov	r17, r15
    16c6:	18 1b       	sub	r17, r24
template <class T> const T& fnmax(const T& a, const T& b) { return((a<b)?b:a); }
    16c8:	10 17       	cp	r17, r16
    16ca:	08 f4       	brcc	.+2      	; 0x16ce <ModelledRadValve::computeTargetTemp()+0x50>
    16cc:	7a c0       	rjmp	.+244    	; 0x17c2 <ModelledRadValve::computeTargetTemp()+0x144>
      if((frostC < preWarmTempC) &&
    16ce:	01 17       	cp	r16, r17
    16d0:	08 f0       	brcs	.+2      	; 0x16d4 <ModelledRadValve::computeTargetTemp()+0x56>
    16d2:	77 c0       	rjmp	.+238    	; 0x17c2 <ModelledRadValve::computeTargetTemp()+0x144>
    16d4:	81 e1       	ldi	r24, 0x11	; 17
    16d6:	8f 15       	cp	r24, r15
    16d8:	08 f4       	brcc	.+2      	; 0x16dc <ModelledRadValve::computeTargetTemp()+0x5e>
    16da:	76 c0       	rjmp	.+236    	; 0x17c8 <ModelledRadValve::computeTargetTemp()+0x14a>
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	65 e0       	ldi	r22, 0x05	; 5
    16e0:	4f ef       	ldi	r20, 0xFF	; 255
    16e2:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)>
    16e6:	88 23       	and	r24, r24
    16e8:	09 f0       	breq	.+2      	; 0x16ec <ModelledRadValve::computeTargetTemp()+0x6e>
    16ea:	6e c0       	rjmp	.+220    	; 0x17c8 <ModelledRadValve::computeTargetTemp()+0x14a>
    16ec:	6a c0       	rjmp	.+212    	; 0x17c2 <ModelledRadValve::computeTargetTemp()+0x144>

#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
    16ee:	80 91 99 02 	lds	r24, 0x0299
    16f2:	88 23       	and	r24, r24
    16f4:	09 f4       	brne	.+2      	; 0x16f8 <ModelledRadValve::computeTargetTemp()+0x7a>
    16f6:	6e c0       	rjmp	.+220    	; 0x17d4 <ModelledRadValve::computeTargetTemp()+0x156>
    }

#ifdef SUPPORT_BAKE
  else if(inBakeMode()) // If in BAKE mode then use elevated target.
    {
    return(fnmin((uint8_t)(getWARMTargetC() + BAKE_UPLIFT), (uint8_t)MAX_TARGET_C)); // No setbacks apply in BAKE mode.
    16f8:	0e 94 cb 03 	call	0x796	; 0x796 <getWARMTargetC()>
    16fc:	18 2f       	mov	r17, r24
    16fe:	1b 5f       	subi	r17, 0xFB	; 251
    1700:	10 36       	cpi	r17, 0x60	; 96
    1702:	08 f4       	brcc	.+2      	; 0x1706 <ModelledRadValve::computeTargetTemp()+0x88>
    1704:	61 c0       	rjmp	.+194    	; 0x17c8 <ModelledRadValve::computeTargetTemp()+0x14a>
    1706:	1f e5       	ldi	r17, 0x5F	; 95
    1708:	5f c0       	rjmp	.+190    	; 0x17c8 <ModelledRadValve::computeTargetTemp()+0x14a>
    170a:	80 91 17 02 	lds	r24, 0x0217
    170e:	90 e0       	ldi	r25, 0x00	; 0
    bool longVacant() { return(getVacancyH() > longVacantHThrH); }

    // Returns true if room appears to have been vacant for much longer than longVacant().
    // For a home or an office no sign of activity for this long suggests a long weekend or a holiday for example.
    // Longer than longVacant() but much less than 3 days to try to capture some weekend-absence savings.
    bool longLongVacant() { return(getVacancyH() > longLongVacantHThrH); }
    1710:	ff 24       	eor	r15, r15
    1712:	88 97       	sbiw	r24, 0x28	; 40
    1714:	28 f0       	brcs	.+10     	; 0x1720 <ModelledRadValve::computeTargetTemp()+0xa2>
    1716:	ff 24       	eor	r15, r15
    1718:	f3 94       	inc	r15
    // Note that this mainly has to work in domestic settings in winter (with ~8h of daylight)
    // but should also work in artificially-lit offices (maybe ~12h continuous lighting).
    // No 'lights-on' signal for a whole day may be a fairly strong indication that the heat can be turned down!
    // TODO: consider bottom quartile of amblient light as alternative setback trigger for near-continuously-lit spaces (aiming to spot daylight signature).
    const bool longLongVacant = Occupancy.longLongVacant();
    const bool longVacant = longLongVacant || Occupancy.longVacant();
    171a:	01 e0       	ldi	r16, 0x01	; 1
    171c:	11 e0       	ldi	r17, 0x01	; 1
    171e:	25 c0       	rjmp	.+74     	; 0x176a <ModelledRadValve::computeTargetTemp()+0xec>
    // At other times more relaxed checking (eg lower power) can be used.
    bool increaseCheckForOccupancy() { return(!isLikelyRecentlyOccupied() && isLikelyOccupied() && !reportedRecently()); }

    // Get number of hours room vacant, zero when room occupied; does not wrap.
    // If forced to zero as soon as occupancy is detected.
    uint16_t getVacancyH() { return((value != 0) ? 0 : vacancyH); }
    1720:	80 91 14 02 	lds	r24, 0x0214
    1724:	88 23       	and	r24, r24
    1726:	11 f0       	breq	.+4      	; 0x172c <ModelledRadValve::computeTargetTemp()+0xae>
    1728:	10 e0       	ldi	r17, 0x00	; 0
    172a:	06 c0       	rjmp	.+12     	; 0x1738 <ModelledRadValve::computeTargetTemp()+0xba>
    172c:	10 e0       	ldi	r17, 0x00	; 0
    172e:	80 91 17 02 	lds	r24, 0x0217
    1732:	89 31       	cpi	r24, 0x19	; 25
    1734:	08 f0       	brcs	.+2      	; 0x1738 <ModelledRadValve::computeTargetTemp()+0xba>
    1736:	11 e0       	ldi	r17, 0x01	; 1

    // Returns true if the room appears to be likely occupied (with active users) now.
    // Operates on a timeout; calling markAsOccupied() restarts the timer.
    // Defaults to false (and API still exists) when OCCUPANCY_SUPPORT not defined.
    // Thread-safe.
    bool isLikelyOccupied() { return(0 != occupationCountdownM); }
    1738:	80 91 15 02 	lds	r24, 0x0215
    const bool notLikelyOccupiedSoon = longLongVacant || (Occupancy.isLikelyUnoccupied() && inOutlierQuartile(false, EE_STATS_SET_OCCPC_BY_HOUR_SMOOTHED));
    173c:	88 23       	and	r24, r24
    173e:	41 f4       	brne	.+16     	; 0x1750 <ModelledRadValve::computeTargetTemp()+0xd2>
    1740:	65 e0       	ldi	r22, 0x05	; 5
    1742:	4f ef       	ldi	r20, 0xFF	; 255
    1744:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)>
    1748:	88 23       	and	r24, r24
    174a:	11 f0       	breq	.+4      	; 0x1750 <ModelledRadValve::computeTargetTemp()+0xd2>
    174c:	01 e0       	ldi	r16, 0x01	; 1
    174e:	01 c0       	rjmp	.+2      	; 0x1752 <ModelledRadValve::computeTargetTemp()+0xd4>
    1750:	00 e0       	ldi	r16, 0x00	; 0
    if(longVacant ||
    1752:	11 23       	and	r17, r17
    1754:	51 f4       	brne	.+20     	; 0x176a <ModelledRadValve::computeTargetTemp()+0xec>
    bool isRoomLit() const { return(isRoomLitFlag); }

    // Returns true if room is light enough for someone to be active.
    // False if unknown.
    // Thread-safe and usable within ISRs (Interrupt Service Routines).
    bool isRoomDark() const { return(!isRoomLitFlag); }
    1756:	80 91 be 03 	lds	r24, 0x03BE
    175a:	88 23       	and	r24, r24
    175c:	11 f0       	breq	.+4      	; 0x1762 <ModelledRadValve::computeTargetTemp()+0xe4>
    175e:	00 23       	and	r16, r16
    1760:	91 f1       	breq	.+100    	; 0x17c6 <ModelledRadValve::computeTargetTemp()+0x148>
    1762:	0e 94 ed 25 	call	0x4bda	; 0x4bda <isAnyScheduleOnWARMNow()>
    1766:	88 23       	and	r24, r24
    1768:	71 f5       	brne	.+92     	; 0x17c6 <ModelledRadValve::computeTargetTemp()+0x148>
                               (!longLongVacant && AmbLight.isRoomLit()) ||
                               (!longLongVacant && inOutlierQuartile(true, EE_STATS_SET_OCCPC_BY_HOUR_SMOOTHED)) ||
                               (!longVacant && isAnyScheduleOnWARMSoon())) ?
              SETBACK_DEFAULT :
          ((longLongVacant || notLikelyOccupiedSoon) ?
              SETBACK_FULL : SETBACK_ECO);
    176a:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <hasEcoBias()>
    176e:	88 23       	and	r24, r24
    1770:	e9 f0       	breq	.+58     	; 0x17ac <ModelledRadValve::computeTargetTemp()+0x12e>
    1772:	80 91 15 02 	lds	r24, 0x0215
    1776:	88 23       	and	r24, r24
    1778:	c9 f4       	brne	.+50     	; 0x17ac <ModelledRadValve::computeTargetTemp()+0x12e>
    177a:	ff 20       	and	r15, r15
    177c:	59 f4       	brne	.+22     	; 0x1794 <ModelledRadValve::computeTargetTemp()+0x116>
    uint16_t getRaw() { return(rawValue); }

    // Returns true if room is lit enough for someone to be active.
    // False if unknown.
    // Thread-safe and usable within ISRs (Interrupt Service Routines).
    bool isRoomLit() const { return(isRoomLitFlag); }
    177e:	80 91 be 03 	lds	r24, 0x03BE
    1782:	88 23       	and	r24, r24
    1784:	99 f4       	brne	.+38     	; 0x17ac <ModelledRadValve::computeTargetTemp()+0x12e>
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	65 e0       	ldi	r22, 0x05	; 5
    178a:	4f ef       	ldi	r20, 0xFF	; 255
    178c:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)>
    1790:	88 23       	and	r24, r24
    1792:	61 f4       	brne	.+24     	; 0x17ac <ModelledRadValve::computeTargetTemp()+0x12e>
    1794:	11 23       	and	r17, r17
    1796:	21 f4       	brne	.+8      	; 0x17a0 <ModelledRadValve::computeTargetTemp()+0x122>
    1798:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <isAnyScheduleOnWARMSoon()>
    179c:	88 23       	and	r24, r24
    179e:	31 f4       	brne	.+12     	; 0x17ac <ModelledRadValve::computeTargetTemp()+0x12e>
    17a0:	ff 20       	and	r15, r15
    17a2:	31 f4       	brne	.+12     	; 0x17b0 <ModelledRadValve::computeTargetTemp()+0x132>
    17a4:	00 23       	and	r16, r16
    17a6:	21 f4       	brne	.+8      	; 0x17b0 <ModelledRadValve::computeTargetTemp()+0x132>
    17a8:	12 e0       	ldi	r17, 0x02	; 2
    17aa:	03 c0       	rjmp	.+6      	; 0x17b2 <ModelledRadValve::computeTargetTemp()+0x134>
    17ac:	11 e0       	ldi	r17, 0x01	; 1
    17ae:	01 c0       	rjmp	.+2      	; 0x17b2 <ModelledRadValve::computeTargetTemp()+0x134>
    17b0:	13 e0       	ldi	r17, 0x03	; 3

      return(fnmax((uint8_t)(wt - setback), getFROSTTargetC())); // Target must never be set low enough to create a frost/freeze hazard.
    17b2:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <getFROSTTargetC()>
    17b6:	e1 1a       	sub	r14, r17
    17b8:	1e 2d       	mov	r17, r14
    17ba:	e8 16       	cp	r14, r24
    17bc:	28 f4       	brcc	.+10     	; 0x17c8 <ModelledRadValve::computeTargetTemp()+0x14a>
    17be:	18 2f       	mov	r17, r24
    17c0:	03 c0       	rjmp	.+6      	; 0x17c8 <ModelledRadValve::computeTargetTemp()+0x14a>
    17c2:	10 2f       	mov	r17, r16
    17c4:	01 c0       	rjmp	.+2      	; 0x17c8 <ModelledRadValve::computeTargetTemp()+0x14a>
    17c6:	1e 2d       	mov	r17, r14
      }
    // Else use WARM target as-is.
    return(wt);
    }
  }
    17c8:	81 2f       	mov	r24, r17
    17ca:	1f 91       	pop	r17
    17cc:	0f 91       	pop	r16
    17ce:	ff 90       	pop	r15
    17d0:	ef 90       	pop	r14
    17d2:	08 95       	ret
    }
#endif

  else // In 'WARM' mode with possible setback.
    {
    const uint8_t wt = getWARMTargetC();
    17d4:	0e 94 cb 03 	call	0x796	; 0x796 <getWARMTargetC()>
    17d8:	e8 2e       	mov	r14, r24
    // At other times more relaxed checking (eg lower power) can be used.
    bool increaseCheckForOccupancy() { return(!isLikelyRecentlyOccupied() && isLikelyOccupied() && !reportedRecently()); }

    // Get number of hours room vacant, zero when room occupied; does not wrap.
    // If forced to zero as soon as occupancy is detected.
    uint16_t getVacancyH() { return((value != 0) ? 0 : vacancyH); }
    17da:	80 91 14 02 	lds	r24, 0x0214
    17de:	88 23       	and	r24, r24
    17e0:	09 f4       	brne	.+2      	; 0x17e4 <ModelledRadValve::computeTargetTemp()+0x166>
    17e2:	93 cf       	rjmp	.-218    	; 0x170a <ModelledRadValve::computeTargetTemp()+0x8c>
    17e4:	80 e0       	ldi	r24, 0x00	; 0
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	93 cf       	rjmp	.-218    	; 0x1710 <ModelledRadValve::computeTargetTemp()+0x92>

000017ea <ModelledRadValve::computeTargetTemperature()>:
  // Leave value position as was...
  return(valvePCOpen);
  }

// Compute/update target temperature and set up state for tick()/computeRequiredTRVPercentOpen().
void ModelledRadValve::computeTargetTemperature()
    17ea:	0f 93       	push	r16
    17ec:	1f 93       	push	r17
    17ee:	cf 93       	push	r28
    17f0:	df 93       	push	r29
    17f2:	ec 01       	movw	r28, r24
  {
  // Compute target temperature.
  const uint8_t newTarget = computeTargetTemp();
    17f4:	0e 94 3f 0b 	call	0x167e	; 0x167e <ModelledRadValve::computeTargetTemp()>
    17f8:	08 2f       	mov	r16, r24

  // Set up state for computeRequiredTRVPercentOpen().
  inputState.targetTempC = newTarget;
    17fa:	8b 83       	std	Y+3, r24	; 0x03
  inputState.minPCOpen = getMinPercentOpen();
    17fc:	e8 81       	ld	r30, Y
    17fe:	f9 81       	ldd	r31, Y+1	; 0x01
    1800:	00 8c       	ldd	r0, Z+24	; 0x18
    1802:	f1 8d       	ldd	r31, Z+25	; 0x19
    1804:	e0 2d       	mov	r30, r0
    1806:	ce 01       	movw	r24, r28
    1808:	09 95       	icall
    180a:	8c 83       	std	Y+4, r24	; 0x04
  inputState.maxPCOpen = getMaxPercentageOpenAllowed();
    180c:	84 e6       	ldi	r24, 0x64	; 100
    180e:	8d 83       	std	Y+5, r24	; 0x05
  inputState.glacial = glacial;
    1810:	99 a1       	ldd	r25, Y+33	; 0x21
    1812:	91 70       	andi	r25, 0x01	; 1
    1814:	99 0f       	add	r25, r25
    1816:	8e 81       	ldd	r24, Y+6	; 0x06
    1818:	8d 7f       	andi	r24, 0xFD	; 253
    181a:	89 2b       	or	r24, r25
    181c:	8e 83       	std	Y+6, r24	; 0x06

#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
    181e:	10 91 9c 02 	lds	r17, 0x029C
    1822:	11 23       	and	r17, r17
    1824:	11 f4       	brne	.+4      	; 0x182a <ModelledRadValve::computeTargetTemperature()+0x40>
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	05 c0       	rjmp	.+10     	; 0x1834 <ModelledRadValve::computeTargetTemperature()+0x4a>
    182a:	80 91 99 02 	lds	r24, 0x0299
    182e:	81 11       	cpse	r24, r1
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	98 2f       	mov	r25, r24
  // Set up state for computeRequiredTRVPercentOpen().
  inputState.targetTempC = newTarget;
  inputState.minPCOpen = getMinPercentOpen();
  inputState.maxPCOpen = getMaxPercentageOpenAllowed();
  inputState.glacial = glacial;
  inputState.inBakeMode = inBakeMode();
    1834:	91 70       	andi	r25, 0x01	; 1
    1836:	99 0f       	add	r25, r25
    1838:	99 0f       	add	r25, r25
    183a:	99 0f       	add	r25, r25
    183c:	8e 81       	ldd	r24, Y+6	; 0x06
    183e:	87 7f       	andi	r24, 0xF7	; 247
    1840:	89 2b       	or	r24, r25
    1842:	8e 83       	std	Y+6, r24	; 0x06
  inputState.hasEcoBias = hasEcoBias();
    1844:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <hasEcoBias()>
    1848:	81 70       	andi	r24, 0x01	; 1
    184a:	88 0f       	add	r24, r24
    184c:	88 0f       	add	r24, r24
    184e:	9e 81       	ldd	r25, Y+6	; 0x06
    1850:	9b 7f       	andi	r25, 0xFB	; 251
    1852:	98 2b       	or	r25, r24
    1854:	9e 83       	std	Y+6, r25	; 0x06

    // Returns true if room is light enough for someone to be active.
    // False if unknown.
    // Thread-safe and usable within ISRs (Interrupt Service Routines).
    bool isRoomDark() const { return(!isRoomLitFlag); }
    1856:	80 91 be 03 	lds	r24, 0x03BE
  // Widen the allowed deadband significantly in a dark/quiet/vacant room
  // (or in FROST mode, or if temperature is jittery ie filtering has been engaged)
  // to attempt to reduce the total number and size of adjustments and thus reduce noise (and battery drain).
  // The wider deadband (less good temperature regulation) might be noticeable/annoying to sensitive occupants.
  // FIXME: With a wider deadband also simply suppress any movement/noise on some/most minutes while close to target temperature.
  inputState.widenDeadband = AmbLight.isRoomDark() || Occupancy.longVacant() || (!inWarmMode()) || retainedState.isFiltering;
    185a:	88 23       	and	r24, r24
    185c:	61 f0       	breq	.+24     	; 0x1876 <ModelledRadValve::computeTargetTemperature()+0x8c>
    185e:	80 91 14 02 	lds	r24, 0x0214
    1862:	88 23       	and	r24, r24
    1864:	21 f4       	brne	.+8      	; 0x186e <ModelledRadValve::computeTargetTemperature()+0x84>
    1866:	80 91 17 02 	lds	r24, 0x0217
    186a:	89 31       	cpi	r24, 0x19	; 25
    186c:	20 f4       	brcc	.+8      	; 0x1876 <ModelledRadValve::computeTargetTemperature()+0x8c>
    186e:	11 23       	and	r17, r17
    1870:	11 f0       	breq	.+4      	; 0x1876 <ModelledRadValve::computeTargetTemperature()+0x8c>
    1872:	9a 85       	ldd	r25, Y+10	; 0x0a
    1874:	01 c0       	rjmp	.+2      	; 0x1878 <ModelledRadValve::computeTargetTemperature()+0x8e>
    1876:	91 e0       	ldi	r25, 0x01	; 1
    1878:	91 70       	andi	r25, 0x01	; 1
    187a:	8e 81       	ldd	r24, Y+6	; 0x06
    187c:	8e 7f       	andi	r24, 0xFE	; 254
    187e:	89 2b       	or	r24, r25
    1880:	8e 83       	std	Y+6, r24	; 0x06
// ie to the middle of the specified degree, which is more intuitive,
// and which may save a little energy if users target the specified temperatures.
// Suggestion c/o GG ~2014/10 code, and generally less misleading anyway!
void ModelledRadValveInputState::setReferenceTemperatures(const int currentTempC16)
  {
  const int referenceTempC16 = currentTempC16 + refTempOffsetC16; // TODO-386: push targeted temperature down by 0.5C to middle of degree.
    1882:	80 91 c5 03 	lds	r24, 0x03C5
    1886:	90 91 c6 03 	lds	r25, 0x03C6
    188a:	08 96       	adiw	r24, 0x08	; 8
  refTempC16 = referenceTempC16;
    188c:	98 87       	std	Y+8, r25	; 0x08
    188e:	8f 83       	std	Y+7, r24	; 0x07
  // FIXME: With a wider deadband also simply suppress any movement/noise on some/most minutes while close to target temperature.
  inputState.widenDeadband = AmbLight.isRoomDark() || Occupancy.longVacant() || (!inWarmMode()) || retainedState.isFiltering;
  // Capture adjusted reference/room temperatures
  // and set callingForHeat flag also using same outline logic as computeRequiredTRVPercentOpen() will use.
  inputState.setReferenceTemperatures(TemperatureC16.get());
  callingForHeat = (newTarget >= (inputState.refTempC16 >> 4));
    1890:	40 e0       	ldi	r20, 0x00	; 0
    1892:	20 2f       	mov	r18, r16
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	64 e0       	ldi	r22, 0x04	; 4
    1898:	95 95       	asr	r25
    189a:	87 95       	ror	r24
    189c:	6a 95       	dec	r22
    189e:	e1 f7       	brne	.-8      	; 0x1898 <ModelledRadValve::computeTargetTemperature()+0xae>
    18a0:	28 17       	cp	r18, r24
    18a2:	39 07       	cpc	r19, r25
    18a4:	0c f0       	brlt	.+2      	; 0x18a8 <ModelledRadValve::computeTargetTemperature()+0xbe>
    18a6:	41 e0       	ldi	r20, 0x01	; 1
    18a8:	48 a3       	std	Y+32, r20	; 0x20
  }
    18aa:	df 91       	pop	r29
    18ac:	cf 91       	pop	r28
    18ae:	1f 91       	pop	r17
    18b0:	0f 91       	pop	r16
    18b2:	08 95       	ret

000018b4 <ModelledRadValve::computeCallForHeat()>:
// The inputs must be valid (and recent).
// Values set are targetTempC, value (TRVPercentOpen).
// This may also prepare data such as TX command sequences for the TRV, boiler, etc.
// This routine may take significant CPU time; no I/O is done, only internal state is updated.
// Returns true if valve target changed and thus messages may need to be recomputed/sent/etc.
void ModelledRadValve::computeCallForHeat()
    18b4:	cf 93       	push	r28
    18b6:	df 93       	push	r29
    18b8:	ec 01       	movw	r28, r24
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    18ba:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    18bc:	f8 94       	cli
    {
#ifdef SUPPORT_BAKE
    // Cancel any BAKE mode once temperature target has been hit.
    if(!callingForHeat) { bakeCountdownM = 0; }
    18be:	88 a1       	ldd	r24, Y+32	; 0x20
    18c0:	88 23       	and	r24, r24
    18c2:	19 f4       	brne	.+6      	; 0x18ca <ModelledRadValve::computeCallForHeat()+0x16>
    18c4:	10 92 99 02 	sts	0x0299, r1
    18c8:	07 c0       	rjmp	.+14     	; 0x18d8 <ModelledRadValve::computeCallForHeat()+0x24>
    // Run down BAKE mode timer if need be, one tick per minute.
    else if(bakeCountdownM > 0) { --bakeCountdownM; }
    18ca:	80 91 99 02 	lds	r24, 0x0299
    18ce:	88 23       	and	r24, r24
    18d0:	19 f0       	breq	.+6      	; 0x18d8 <ModelledRadValve::computeCallForHeat()+0x24>
    18d2:	81 50       	subi	r24, 0x01	; 1
    18d4:	80 93 99 02 	sts	0x0299, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    18d8:	9f bf       	out	0x3f, r25	; 63
#endif
    }

  // Compute target and ensure that required input state is set for computeRequiredTRVPercentOpen().
  computeTargetTemperature();
    18da:	ce 01       	movw	r24, r28
    18dc:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <ModelledRadValve::computeTargetTemperature()>
  retainedState.tick(value, inputState);
    18e0:	ae 01       	movw	r20, r28
    18e2:	4d 5f       	subi	r20, 0xFD	; 253
    18e4:	5f 4f       	sbci	r21, 0xFF	; 255
    18e6:	ce 01       	movw	r24, r28
    18e8:	09 96       	adiw	r24, 0x09	; 9
    18ea:	22 96       	adiw	r28, 0x02	; 2
    18ec:	be 01       	movw	r22, r28
    18ee:	0e 94 b2 05 	call	0xb64	; 0xb64 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)>
  }
    18f2:	df 91       	pop	r29
    18f4:	cf 91       	pop	r28
    18f6:	08 95       	ret

000018f8 <ModelledRadValve::read()>:

    // Force a read/poll/recomputation of the target position and call for heat.
    // Sets/clears changed flag if computed valve position changed.
    // Call at a fixed rate (1/60s).
    // Potentially expensive/slow.
    virtual uint8_t read() { computeCallForHeat(); return(value); }
    18f8:	0f 93       	push	r16
    18fa:	1f 93       	push	r17
    18fc:	8c 01       	movw	r16, r24
    18fe:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <ModelledRadValve::computeCallForHeat()>
    1902:	f8 01       	movw	r30, r16
    1904:	82 81       	ldd	r24, Z+2	; 0x02
    1906:	1f 91       	pop	r17
    1908:	0f 91       	pop	r16
    190a:	08 95       	ret

0000190c <ModelledRadValve::isRecalibrating() const>:
// The target valve position is not lost while this is true.
// By default there is no recalibration step.
bool ModelledRadValve::isRecalibrating() const
  {
#ifdef USE_MODULE_FHT8VSIMPLE
  if(!isSyncedWithFHT8V()) { return(true); }
    190c:	0e 94 74 11 	call	0x22e8	; 0x22e8 <isSyncedWithFHT8V()>
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	88 23       	and	r24, r24
    1914:	09 f4       	brne	.+2      	; 0x1918 <ModelledRadValve::isRecalibrating() const+0xc>
    1916:	91 e0       	ldi	r25, 0x01	; 1
#endif
  return(false);
  }
    1918:	89 2f       	mov	r24, r25
    191a:	08 95       	ret

0000191c <ModelledRadValve::isControlledValveReallyOpen() const>:
// True if the controlled physical valve is thought to be at least partially open right now.
// If multiple valves are controlled then is this true only if all are at least partially open.
// Used to help avoid running boiler pump against closed valves.
// The default is to use the check the current computed position
// against the minimum open percentage.
bool ModelledRadValve::isControlledValveReallyOpen() const
    191c:	1f 93       	push	r17
    191e:	cf 93       	push	r28
    1920:	df 93       	push	r29
    1922:	ec 01       	movw	r28, r24
  {
  if(isRecalibrating()) { return(false); }
    1924:	e8 81       	ld	r30, Y
    1926:	f9 81       	ldd	r31, Y+1	; 0x01
    1928:	02 88       	ldd	r0, Z+18	; 0x12
    192a:	f3 89       	ldd	r31, Z+19	; 0x13
    192c:	e0 2d       	mov	r30, r0
    192e:	09 95       	icall
    1930:	88 23       	and	r24, r24
    1932:	89 f4       	brne	.+34     	; 0x1956 <ModelledRadValve::isControlledValveReallyOpen() const+0x3a>
#ifdef USE_MODULE_FHT8VSIMPLE
  if(!FHT8VisControlledValveOpen()) { return(false); }
    1934:	0e 94 77 11 	call	0x22ee	; 0x22ee <FHT8VisControlledValveOpen()>
    1938:	88 23       	and	r24, r24
    193a:	69 f0       	breq	.+26     	; 0x1956 <ModelledRadValve::isControlledValveReallyOpen() const+0x3a>
#endif
  return(value >= getMinPercentOpen());
    193c:	1a 81       	ldd	r17, Y+2	; 0x02
    193e:	e8 81       	ld	r30, Y
    1940:	f9 81       	ldd	r31, Y+1	; 0x01
    1942:	00 8c       	ldd	r0, Z+24	; 0x18
    1944:	f1 8d       	ldd	r31, Z+25	; 0x19
    1946:	e0 2d       	mov	r30, r0
    1948:	ce 01       	movw	r24, r28
    194a:	09 95       	icall
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	18 17       	cp	r17, r24
    1950:	18 f0       	brcs	.+6      	; 0x1958 <ModelledRadValve::isControlledValveReallyOpen() const+0x3c>
    1952:	91 e0       	ldi	r25, 0x01	; 1
    1954:	01 c0       	rjmp	.+2      	; 0x1958 <ModelledRadValve::isControlledValveReallyOpen() const+0x3c>
    1956:	90 e0       	ldi	r25, 0x00	; 0
  }
    1958:	89 2f       	mov	r24, r25
    195a:	df 91       	pop	r29
    195c:	cf 91       	pop	r28
    195e:	1f 91       	pop	r17
    1960:	08 95       	ret

00001962 <loopOpenTRV()>:



// Main loop for OpenTRV radiator control.
// Note: exiting and re-entering can take a little while, handling Arduino background tasks such as serial.
void loopOpenTRV()
    1962:	7f 92       	push	r7
    1964:	8f 92       	push	r8
    1966:	9f 92       	push	r9
    1968:	af 92       	push	r10
    196a:	bf 92       	push	r11
    196c:	cf 92       	push	r12
    196e:	df 92       	push	r13
    1970:	ef 92       	push	r14
    1972:	ff 92       	push	r15
    1974:	0f 93       	push	r16
    1976:	1f 93       	push	r17
    1978:	df 93       	push	r29
    197a:	cf 93       	push	r28
    197c:	cd b7       	in	r28, 0x3d	; 61
    197e:	de b7       	in	r29, 0x3e	; 62
    1980:	ef 97       	sbiw	r28, 0x3f	; 63
    1982:	0f b6       	in	r0, 0x3f	; 63
    1984:	f8 94       	cli
    1986:	de bf       	out	0x3e, r29	; 62
    1988:	0f be       	out	0x3f, r0	; 63
    198a:	cd bf       	out	0x3d, r28	; 61

  // Set up some variables before sleeping to minimise delay/jitter after the RTC tick.
  bool showStatus = false; // Show status at end of loop?

  // Use the zeroth second in each minute to force extra deep device sleeps/resets, etc.
  const bool second0 = (0 == TIME_LSD);
    198c:	bb 24       	eor	r11, r11
    198e:	80 91 3c 02 	lds	r24, 0x023C
    1992:	88 23       	and	r24, r24
    1994:	11 f4       	brne	.+4      	; 0x199a <loopOpenTRV()+0x38>
    1996:	bb 24       	eor	r11, r11
    1998:	b3 94       	inc	r11
  // Sensor readings are taken late in each minute (where they are taken)
  // and if possible noise and heat and light should be minimised in this part of each minute to improve readings.
//  const bool sensorReading30s = (TIME_LSD >= 30);
  // Sensor readings and (stats transmissions) are nominally on a 4-minute cycle.
  const uint8_t minuteFrom4 = (minuteCount & 3);
    199a:	80 91 3d 02 	lds	r24, 0x023D
    199e:	83 70       	andi	r24, 0x03	; 3
  // The 0th minute in each group of four is always used for measuring where possible (possibly amongst others)
  // and where possible locally-generated noise and heat and light should be minimised in this minute to give the best possible readings.
  // This is the first (0th) minute in each group of four.
  const bool minute0From4ForSensors = (0 == minuteFrom4);
    19a0:	99 24       	eor	r9, r9
    19a2:	88 23       	and	r24, r24
    19a4:	11 f4       	brne	.+4      	; 0x19aa <loopOpenTRV()+0x48>
    19a6:	99 24       	eor	r9, r9
    19a8:	93 94       	inc	r9
  // True the minute after all sensors should have been sampled.
  const bool minute1From4AfterSensors = (1 == minuteFrom4);
    19aa:	77 24       	eor	r7, r7
    19ac:	81 30       	cpi	r24, 0x01	; 1
    19ae:	11 f4       	brne	.+4      	; 0x19b4 <loopOpenTRV()+0x52>
    19b0:	77 24       	eor	r7, r7
    19b2:	73 94       	inc	r7
    // Get internal bandgap (1.1V nominal, 1.0--1.2V) as fraction of Vcc.
    uint16_t getRawInv() const { return(rawInv); }

    // Returns true if the supply voltage is low/marginal.
    // This depends on the AVR and other hardware components (eg sensors) in use.
    bool isSupplyVoltageLow() const { return(isLow); }
    19b4:	a0 90 65 03 	lds	r10, 0x0365
    (batteryLow || !inWarmMode() || Occupancy.longVacant()) &&
#if defined(ENABLE_BOILER_HUB)
    (0 == boilerCountdownTicks) && // Unless the boiler is off, stay responsive.
#endif
    (!NominalRadValve.isControlledValveReallyOpen()) &&  // Run at full speed until valve(s) should actually have shut and the boiler gone off.
    (!NominalRadValve.isCallingForHeat()); // Run at full speed until not nominally demanding heat, eg even during FROST mode or pre-heating.
    19b8:	aa 20       	and	r10, r10
    19ba:	61 f4       	brne	.+24     	; 0x19d4 <loopOpenTRV()+0x72>
    19bc:	80 91 9c 02 	lds	r24, 0x029C
    19c0:	88 23       	and	r24, r24
    19c2:	41 f0       	breq	.+16     	; 0x19d4 <loopOpenTRV()+0x72>
    // At other times more relaxed checking (eg lower power) can be used.
    bool increaseCheckForOccupancy() { return(!isLikelyRecentlyOccupied() && isLikelyOccupied() && !reportedRecently()); }

    // Get number of hours room vacant, zero when room occupied; does not wrap.
    // If forced to zero as soon as occupancy is detected.
    uint16_t getVacancyH() { return((value != 0) ? 0 : vacancyH); }
    19c4:	80 91 14 02 	lds	r24, 0x0214
    19c8:	88 23       	and	r24, r24
    19ca:	b9 f4       	brne	.+46     	; 0x19fa <loopOpenTRV()+0x98>
    19cc:	80 91 17 02 	lds	r24, 0x0217
    19d0:	89 31       	cpi	r24, 0x19	; 25
    19d2:	98 f0       	brcs	.+38     	; 0x19fa <loopOpenTRV()+0x98>
    19d4:	80 91 3e 02 	lds	r24, 0x023E
    19d8:	90 91 3f 02 	lds	r25, 0x023F
    19dc:	89 2b       	or	r24, r25
    19de:	69 f4       	brne	.+26     	; 0x19fa <loopOpenTRV()+0x98>
    19e0:	89 e1       	ldi	r24, 0x19	; 25
    19e2:	92 e0       	ldi	r25, 0x02	; 2
    19e4:	0e 94 8e 0c 	call	0x191c	; 0x191c <ModelledRadValve::isControlledValveReallyOpen() const>
    19e8:	88 23       	and	r24, r24
    19ea:	39 f4       	brne	.+14     	; 0x19fa <loopOpenTRV()+0x98>
    // Can be used to trigger rebuild of messages, force updates to actuators, etc.
    bool isValveMoved() const { return(retainedState.valveMoved); }

    // True if this unit is nominally calling for heat (temperature is under target).
    // Thread-safe and ISR safe.
    bool isCallingForHeat() const { return(callingForHeat); }
    19ec:	80 91 39 02 	lds	r24, 0x0239
    19f0:	88 23       	and	r24, r24
    19f2:	19 f4       	brne	.+6      	; 0x19fa <loopOpenTRV()+0x98>
    19f4:	88 24       	eor	r8, r8
    19f6:	83 94       	inc	r8
    19f8:	01 c0       	rjmp	.+2      	; 0x19fc <loopOpenTRV()+0x9a>
    19fa:	88 24       	eor	r8, r8
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    19fc:	f9 99       	sbic	0x1f, 1	; 31
    19fe:	fe cf       	rjmp	.-4      	; 0x19fc <loopOpenTRV()+0x9a>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1a00:	82 e1       	ldi	r24, 0x12	; 18
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	92 bd       	out	0x22, r25	; 34
    1a06:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1a08:	f8 9a       	sbi	0x1f, 0	; 31
    1a0a:	c0 b4       	in	r12, 0x20	; 32
  // Conversely, if not true, should have time to savely log outputs, etc.
  const uint8_t nearOverrunThreshold = GSCT_MAX - 8; // ~64ms/~32 serial TX chars of grace time...
  bool tooNearOverrun = false; // Set flag that can be checked later.

  // Is this unit currently in central hub listener mode?
  const bool hubMode = inHubMode();
    1a0c:	c0 94       	com	r12
    1a0e:	11 f0       	breq	.+4      	; 0x1a14 <loopOpenTRV()+0xb2>
    1a10:	cc 24       	eor	r12, r12
    1a12:	c3 94       	inc	r12
  // The output is terse to avoid taking too long and possibly delaying other stuff too far.
  // Avoid doing this at all if too near the end of the cycle and risking overrun,
  // leaving any message queued, hoping it does not get overwritten.
  // TODO: safely process more than one pending message if present.
  // TODO: move to process in a batch periodically, eg when CLI is due.
  if(getSubCycleTime() >= nearOverrunThreshold) { tooNearOverrun = true; }
    1a14:	80 91 b2 00 	lds	r24, 0x00B2
    1a18:	87 3f       	cpi	r24, 0xF7	; 247
    1a1a:	18 f0       	brcs	.+6      	; 0x1a22 <loopOpenTRV()+0xc0>
    1a1c:	ee 24       	eor	r14, r14
    1a1e:	e3 94       	inc	r14
    1a20:	6d c0       	rjmp	.+218    	; 0x1afc <loopOpenTRV()+0x19a>
  else
    {
    // Look for binary-format message.
    FullStatsMessageCore_t stats;
    getLastCoreStats(&stats);
    1a22:	ce 01       	movw	r24, r28
    1a24:	01 96       	adiw	r24, 0x01	; 1
    1a26:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <getLastCoreStats(FullStatsMessageCore*)>
    if(stats.containsID)
    1a2a:	89 81       	ldd	r24, Y+1	; 0x01
    1a2c:	80 ff       	sbrs	r24, 0
    1a2e:	57 c0       	rjmp	.+174    	; 0x1ade <loopOpenTRV()+0x17c>
      {
      // Dump (remote) stats field '@<hexnodeID>;TnnCh[P;]'
      // where the T field shows temperature in C with a hex digit after the binary point indicated by C
      // and the optional P field indicates low power.
      serialPrintAndFlush(LINE_START_CHAR_RSTATS);
    1a30:	80 e4       	ldi	r24, 0x40	; 64
    1a32:	0e 94 bc 26 	call	0x4d78	; 0x4d78 <serialPrintAndFlush(char)>
      serialPrintAndFlush((((uint16_t)stats.id0) << 8) | stats.id1, HEX);
    1a36:	9a 81       	ldd	r25, Y+2	; 0x02
    1a38:	80 e0       	ldi	r24, 0x00	; 0
    1a3a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	82 2b       	or	r24, r18
    1a40:	93 2b       	or	r25, r19
    1a42:	60 e1       	ldi	r22, 0x10	; 16
    1a44:	70 e0       	ldi	r23, 0x00	; 0
    1a46:	0e 94 a0 26 	call	0x4d40	; 0x4d40 <serialPrintAndFlush(unsigned int, int)>
      if(stats.containsTempAndPower)
    1a4a:	89 81       	ldd	r24, Y+1	; 0x01
    1a4c:	81 ff       	sbrs	r24, 1
    1a4e:	2b c0       	rjmp	.+86     	; 0x1aa6 <loopOpenTRV()+0x144>
        {
        serialPrintAndFlush(F(";T"));
    1a50:	8e ec       	ldi	r24, 0xCE	; 206
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	0e 94 12 27 	call	0x4e24	; 0x4e24 <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush(stats.tempAndPower.tempC16 >> 4, DEC);
    1a58:	8c 81       	ldd	r24, Y+4	; 0x04
    1a5a:	2d 81       	ldd	r18, Y+5	; 0x05
    1a5c:	92 2f       	mov	r25, r18
    1a5e:	9f 77       	andi	r25, 0x7F	; 127
    1a60:	88 0f       	add	r24, r24
    1a62:	99 1f       	adc	r25, r25
    1a64:	b5 e0       	ldi	r27, 0x05	; 5
    1a66:	95 95       	asr	r25
    1a68:	87 95       	ror	r24
    1a6a:	ba 95       	dec	r27
    1a6c:	e1 f7       	brne	.-8      	; 0x1a66 <loopOpenTRV()+0x104>
    1a6e:	6a e0       	ldi	r22, 0x0A	; 10
    1a70:	70 e0       	ldi	r23, 0x00	; 0
    1a72:	0e 94 e0 26 	call	0x4dc0	; 0x4dc0 <serialPrintAndFlush(int, int)>
        serialPrintAndFlush('C');
    1a76:	83 e4       	ldi	r24, 0x43	; 67
    1a78:	0e 94 bc 26 	call	0x4d78	; 0x4d78 <serialPrintAndFlush(char)>
        serialPrintAndFlush(stats.tempAndPower.tempC16 & 0xf, HEX);
    1a7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a7e:	2d 81       	ldd	r18, Y+5	; 0x05
    1a80:	92 2f       	mov	r25, r18
    1a82:	9f 77       	andi	r25, 0x7F	; 127
    1a84:	88 0f       	add	r24, r24
    1a86:	99 1f       	adc	r25, r25
    1a88:	95 95       	asr	r25
    1a8a:	87 95       	ror	r24
    1a8c:	8f 70       	andi	r24, 0x0F	; 15
    1a8e:	90 70       	andi	r25, 0x00	; 0
    1a90:	60 e1       	ldi	r22, 0x10	; 16
    1a92:	70 e0       	ldi	r23, 0x00	; 0
    1a94:	0e 94 e0 26 	call	0x4dc0	; 0x4dc0 <serialPrintAndFlush(int, int)>
        if(stats.tempAndPower.powerLow) { serialPrintAndFlush(F(";P")); } // Insert power-low field if needed.
    1a98:	8d 81       	ldd	r24, Y+5	; 0x05
    1a9a:	87 ff       	sbrs	r24, 7
    1a9c:	04 c0       	rjmp	.+8      	; 0x1aa6 <loopOpenTRV()+0x144>
    1a9e:	8b ec       	ldi	r24, 0xCB	; 203
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	0e 94 12 27 	call	0x4e24	; 0x4e24 <serialPrintAndFlush(__FlashStringHelper const*)>
        }
      if(stats.containsAmbL)
    1aa6:	89 81       	ldd	r24, Y+1	; 0x01
    1aa8:	82 ff       	sbrs	r24, 2
    1aaa:	0a c0       	rjmp	.+20     	; 0x1ac0 <loopOpenTRV()+0x15e>
        {
        serialPrintAndFlush(F(";L"));
    1aac:	88 ec       	ldi	r24, 0xC8	; 200
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	0e 94 12 27 	call	0x4e24	; 0x4e24 <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush(stats.ambL);
    1ab4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	6a e0       	ldi	r22, 0x0A	; 10
    1aba:	70 e0       	ldi	r23, 0x00	; 0
    1abc:	0e 94 e0 26 	call	0x4dc0	; 0x4dc0 <serialPrintAndFlush(int, int)>
        }
      if(0 != stats.occ)
    1ac0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ac2:	83 70       	andi	r24, 0x03	; 3
    1ac4:	c1 f0       	breq	.+48     	; 0x1af6 <loopOpenTRV()+0x194>
        {
        serialPrintAndFlush(F(";O"));
    1ac6:	85 ec       	ldi	r24, 0xC5	; 197
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	0e 94 12 27 	call	0x4e24	; 0x4e24 <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush(stats.occ);
    1ace:	8f 81       	ldd	r24, Y+7	; 0x07
    1ad0:	83 70       	andi	r24, 0x03	; 3
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	6a e0       	ldi	r22, 0x0A	; 10
    1ad6:	70 e0       	ldi	r23, 0x00	; 0
    1ad8:	0e 94 e0 26 	call	0x4dc0	; 0x4dc0 <serialPrintAndFlush(int, int)>
    1adc:	0c c0       	rjmp	.+24     	; 0x1af6 <loopOpenTRV()+0x194>
      }
    // Check for JSON/text-format message if no binary message waiting.
    else
      {
      char buf[MSG_JSON_MAX_LENGTH+1];
      getLastJSONStats(buf);
    1ade:	8e 01       	movw	r16, r28
    1ae0:	08 5f       	subi	r16, 0xF8	; 248
    1ae2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ae4:	c8 01       	movw	r24, r16
    1ae6:	0e 94 2e 1b 	call	0x365c	; 0x365c <getLastJSONStats(char*)>
      if('\0' != *buf)
    1aea:	88 85       	ldd	r24, Y+8	; 0x08
    1aec:	88 23       	and	r24, r24
    1aee:	29 f0       	breq	.+10     	; 0x1afa <loopOpenTRV()+0x198>
        {
        // Dump contained JSON message as-is at start of line.
        serialPrintAndFlush(buf);
    1af0:	c8 01       	movw	r24, r16
    1af2:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <serialPrintAndFlush(char const*)>
        serialPrintlnAndFlush();
    1af6:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <serialPrintlnAndFlush()>
    1afa:	ee 24       	eor	r14, r14
  // and could be disabled if no local valve is being run to provide better response to remote nodes.
  bool hubModeBoilerOn = false; // If true then remote call for heat is in progress.
#if defined(USE_MODULE_FHT8VSIMPLE)
  bool needsToEavesdrop = false; // By default assume no need to eavesdrop.
#endif
  if(hubMode)
    1afc:	cc 20       	and	r12, r12
    1afe:	11 f4       	brne	.+4      	; 0x1b04 <loopOpenTRV()+0x1a2>
    1b00:	ff 24       	eor	r15, r15
    1b02:	a4 c0       	rjmp	.+328    	; 0x1c4c <loopOpenTRV()+0x2ea>
    {
#if defined(USE_MODULE_FHT8VSIMPLE)
    // Final poll to to cover up to end of previous minor loop.
    // Keep time from here to following SetupToEavesdropOnFHT8V() as short as possible to avoid missing remote calls.
    FHT8VCallForHeatPoll();
    1b04:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <FHT8VCallForHeatPoll()>

    // Fetch and clear current pending sample house code calling for heat.
    const uint16_t hcRequest = FHT8VCallForHeatHeardGetAndClear();
    1b08:	0e 94 89 11 	call	0x2312	; 0x2312 <FHT8VCallForHeatHeardGetAndClear()>
    1b0c:	8c 01       	movw	r16, r24
    const bool heardIt = (hcRequest != ((uint16_t)~0));
    1b0e:	dd 24       	eor	r13, r13
    1b10:	8f ef       	ldi	r24, 0xFF	; 255
    1b12:	0f 3f       	cpi	r16, 0xFF	; 255
    1b14:	18 07       	cpc	r17, r24
    1b16:	11 f0       	breq	.+4      	; 0x1b1c <loopOpenTRV()+0x1ba>
    1b18:	dd 24       	eor	r13, r13
    1b1a:	d3 94       	inc	r13
    // Don't log call for hear if near overrun,
    // and leave any error queued for next time.
    if(getSubCycleTime() >= nearOverrunThreshold) { tooNearOverrun = true; }
    1b1c:	80 91 b2 00 	lds	r24, 0x00B2
    1b20:	87 3f       	cpi	r24, 0xF7	; 247
    1b22:	78 f5       	brcc	.+94     	; 0x1b82 <loopOpenTRV()+0x220>
    else
      {
      if(heardIt)
    1b24:	dd 20       	and	r13, r13
    1b26:	d9 f0       	breq	.+54     	; 0x1b5e <loopOpenTRV()+0x1fc>
        {
        DEBUG_SERIAL_TIMESTAMP();
    1b28:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <_debug_serial_timestamp()>
        DEBUG_SERIAL_PRINT(' ');
    1b2c:	80 e2       	ldi	r24, 0x20	; 32
    1b2e:	0e 94 bc 26 	call	0x4d78	; 0x4d78 <serialPrintAndFlush(char)>
        serialPrintAndFlush(F("CfH ")); // Call for heat from 
    1b32:	80 ec       	ldi	r24, 0xC0	; 192
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	0e 94 12 27 	call	0x4e24	; 0x4e24 <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush((hcRequest >> 8) & 0xff);
    1b3a:	81 2f       	mov	r24, r17
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	6a e0       	ldi	r22, 0x0A	; 10
    1b40:	70 e0       	ldi	r23, 0x00	; 0
    1b42:	0e 94 a0 26 	call	0x4d40	; 0x4d40 <serialPrintAndFlush(unsigned int, int)>
        serialPrintAndFlush(' ');
    1b46:	80 e2       	ldi	r24, 0x20	; 32
    1b48:	0e 94 bc 26 	call	0x4d78	; 0x4d78 <serialPrintAndFlush(char)>
        serialPrintAndFlush(hcRequest & 0xff);
    1b4c:	c8 01       	movw	r24, r16
    1b4e:	90 70       	andi	r25, 0x00	; 0
    1b50:	6a e0       	ldi	r22, 0x0A	; 10
    1b52:	70 e0       	ldi	r23, 0x00	; 0
    1b54:	0e 94 a0 26 	call	0x4d40	; 0x4d40 <serialPrintAndFlush(unsigned int, int)>
        serialPrintlnAndFlush();
    1b58:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <serialPrintlnAndFlush()>
    1b5c:	16 c0       	rjmp	.+44     	; 0x1b8a <loopOpenTRV()+0x228>
        }
      else
        {
        // Check for error if nothing received.
        const uint8_t err = FHT8VLastRXErrGetAndClear();
    1b5e:	0e 94 98 11 	call	0x2330	; 0x2330 <FHT8VLastRXErrGetAndClear()>
    1b62:	18 2f       	mov	r17, r24
        if(0 != err)
    1b64:	88 23       	and	r24, r24
    1b66:	b1 f1       	breq	.+108    	; 0x1bd4 <loopOpenTRV()+0x272>
          {
          serialPrintAndFlush(F("!RXerr F"));
    1b68:	87 eb       	ldi	r24, 0xB7	; 183
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	0e 94 12 27 	call	0x4e24	; 0x4e24 <serialPrintAndFlush(__FlashStringHelper const*)>
          serialPrintAndFlush(err);
    1b70:	81 2f       	mov	r24, r17
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	6a e0       	ldi	r22, 0x0A	; 10
    1b76:	70 e0       	ldi	r23, 0x00	; 0
    1b78:	0e 94 e0 26 	call	0x4dc0	; 0x4dc0 <serialPrintAndFlush(int, int)>
          serialPrintlnAndFlush();
    1b7c:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <serialPrintlnAndFlush()>
    1b80:	29 c0       	rjmp	.+82     	; 0x1bd4 <loopOpenTRV()+0x272>
    1b82:	ee 24       	eor	r14, r14
    1b84:	e3 94       	inc	r14
        }
      }

    // Record call for heat, both to start boiler-on cycle and to defer need to listen again. 
    // Optimisation: may be able to stop RX if boiler is on for local demand (can measure local temp better: less self-heating).
    if(heardIt)
    1b86:	dd 20       	and	r13, r13
    1b88:	29 f1       	breq	.+74     	; 0x1bd4 <loopOpenTRV()+0x272>
      {
      if(0 == boilerCountdownTicks)
    1b8a:	80 91 3e 02 	lds	r24, 0x023E
    1b8e:	90 91 3f 02 	lds	r25, 0x023F
    1b92:	89 2b       	or	r24, r25
    1b94:	59 f4       	brne	.+22     	; 0x1bac <loopOpenTRV()+0x24a>
        {
        if(getSubCycleTime() >= nearOverrunThreshold) { tooNearOverrun = true; }
    1b96:	80 91 b2 00 	lds	r24, 0x00B2
    1b9a:	87 3f       	cpi	r24, 0xF7	; 247
    1b9c:	18 f0       	brcs	.+6      	; 0x1ba4 <loopOpenTRV()+0x242>
    1b9e:	ee 24       	eor	r14, r14
    1ba0:	e3 94       	inc	r14
    1ba2:	04 c0       	rjmp	.+8      	; 0x1bac <loopOpenTRV()+0x24a>
        else { serialPrintlnAndFlush(F("RCfH1")); } // Remote call for heat on.
    1ba4:	81 eb       	ldi	r24, 0xB1	; 177
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	0e 94 28 27 	call	0x4e50	; 0x4e50 <serialPrintlnAndFlush(__FlashStringHelper const*)>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1bac:	f9 99       	sbic	0x1f, 1	; 31
    1bae:	fe cf       	rjmp	.-4      	; 0x1bac <loopOpenTRV()+0x24a>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1bb0:	82 e1       	ldi	r24, 0x12	; 18
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	92 bd       	out	0x22, r25	; 34
    1bb6:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1bb8:	f8 9a       	sbi	0x1f, 0	; 31
    1bba:	80 b5       	in	r24, 0x20	; 32
        }
      boilerCountdownTicks = getMinBoilerOnMinutes() * (60/MAIN_TICK_S);
    1bbc:	80 95       	com	r24
    1bbe:	2e e1       	ldi	r18, 0x1E	; 30
    1bc0:	82 9f       	mul	r24, r18
    1bc2:	c0 01       	movw	r24, r0
    1bc4:	11 24       	eor	r1, r1
    1bc6:	90 93 3f 02 	sts	0x023F, r25
    1bca:	80 93 3e 02 	sts	0x023E, r24
      boilerNoCallM = 0; // No time has passed since the last call.
    1bce:	10 92 40 02 	sts	0x0240, r1
    1bd2:	22 c0       	rjmp	.+68     	; 0x1c18 <loopOpenTRV()+0x2b6>
      }
    // Else count down towards boiler off.
    else if(boilerCountdownTicks > 0)
    1bd4:	80 91 3e 02 	lds	r24, 0x023E
    1bd8:	90 91 3f 02 	lds	r25, 0x023F
    1bdc:	00 97       	sbiw	r24, 0x00	; 0
    1bde:	99 f0       	breq	.+38     	; 0x1c06 <loopOpenTRV()+0x2a4>
      {
      if(0 == --boilerCountdownTicks)
    1be0:	01 97       	sbiw	r24, 0x01	; 1
    1be2:	90 93 3f 02 	sts	0x023F, r25
    1be6:	80 93 3e 02 	sts	0x023E, r24
    1bea:	89 2b       	or	r24, r25
    1bec:	a9 f4       	brne	.+42     	; 0x1c18 <loopOpenTRV()+0x2b6>
        {
        if(getSubCycleTime() >= nearOverrunThreshold) { tooNearOverrun = true; }
    1bee:	80 91 b2 00 	lds	r24, 0x00B2
    1bf2:	87 3f       	cpi	r24, 0xF7	; 247
    1bf4:	18 f0       	brcs	.+6      	; 0x1bfc <loopOpenTRV()+0x29a>
    1bf6:	ee 24       	eor	r14, r14
    1bf8:	e3 94       	inc	r14
    1bfa:	0e c0       	rjmp	.+28     	; 0x1c18 <loopOpenTRV()+0x2b6>
        else { serialPrintlnAndFlush(F("RCfH0")); } // Remote call for heat off
    1bfc:	8b ea       	ldi	r24, 0xAB	; 171
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	0e 94 28 27 	call	0x4e50	; 0x4e50 <serialPrintlnAndFlush(__FlashStringHelper const*)>
    1c04:	09 c0       	rjmp	.+18     	; 0x1c18 <loopOpenTRV()+0x2b6>
        }
      }
    // Else already off so count up quiet minutes...
    else if(second0 && (boilerNoCallM < (uint8_t)~0)) { ++boilerNoCallM; }         
    1c06:	bb 20       	and	r11, r11
    1c08:	39 f0       	breq	.+14     	; 0x1c18 <loopOpenTRV()+0x2b6>
    1c0a:	80 91 40 02 	lds	r24, 0x0240
    1c0e:	8f 3f       	cpi	r24, 0xFF	; 255
    1c10:	19 f0       	breq	.+6      	; 0x1c18 <loopOpenTRV()+0x2b6>
    1c12:	8f 5f       	subi	r24, 0xFF	; 255
    1c14:	80 93 40 02 	sts	0x0240, r24

    // Turn boiler output on or off in response to calls for heat.
    hubModeBoilerOn = (boilerCountdownTicks > 0);
    1c18:	ff 24       	eor	r15, r15
    1c1a:	80 91 3e 02 	lds	r24, 0x023E
    1c1e:	90 91 3f 02 	lds	r25, 0x023F
    1c22:	89 2b       	or	r24, r25
    1c24:	11 f0       	breq	.+4      	; 0x1c2a <loopOpenTRV()+0x2c8>
    1c26:	ff 24       	eor	r15, r15
    1c28:	f3 94       	inc	r15

    // If not running a local TRV, and thus without local temperature measurement problems from self-heating,
    // then just listen all the time for maximum simplicity and responsiveness at some cost in extra power consumption.
    // (At least as long as power is not running low for some reason.)
    if(!localFHT8VTRVEnabled() && !batteryLow)
    1c2a:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <localFHT8VTRVEnabled()>
    1c2e:	88 23       	and	r24, r24
    1c30:	09 f0       	breq	.+2      	; 0x1c34 <loopOpenTRV()+0x2d2>
    1c32:	ea c1       	rjmp	.+980    	; 0x2008 <loopOpenTRV()+0x6a6>
    1c34:	aa 20       	and	r10, r10
    1c36:	09 f0       	breq	.+2      	; 0x1c3a <loopOpenTRV()+0x2d8>
    1c38:	e7 c1       	rjmp	.+974    	; 0x2008 <loopOpenTRV()+0x6a6>
    1c3a:	ef c1       	rjmp	.+990    	; 0x201a <loopOpenTRV()+0x6b8>
    // Aim to listen in one stretch for greater than full FHT8V TX cycle of ~2m to avoid missing a call for heat.
    // MUST listen for all of final 2 mins of boiler-on to avoid missing TX (without forcing boiler over-run).
    else if((boilerCountdownTicks <= ((MAX_FHT8V_TX_CYCLE_HS+1)/(2*MAIN_TICK_S))) && // Don't miss a final TX that would keep the boiler on...
       (boilerCountdownTicks != 0)) // But don't force unit to listen/RX all the time if no recent call for heat.
      { needsToEavesdrop = true; }
    else if((!heardIt) &&
    1c3c:	dd 20       	and	r13, r13
    1c3e:	31 f4       	brne	.+12     	; 0x1c4c <loopOpenTRV()+0x2ea>
    1c40:	99 20       	and	r9, r9
    1c42:	21 f4       	brne	.+8      	; 0x1c4c <loopOpenTRV()+0x2ea>
    1c44:	29 55       	subi	r18, 0x59	; 89
    1c46:	32 40       	sbci	r19, 0x02	; 2
    1c48:	08 f4       	brcc	.+2      	; 0x1c4c <loopOpenTRV()+0x2ea>
    1c4a:	e7 c1       	rjmp	.+974    	; 0x201a <loopOpenTRV()+0x6b8>
#endif
    }
  else
    {
    // Power down and clear radio state (if currently eavesdropping).
    StopEavesdropOnFHT8V(second0);
    1c4c:	8b 2d       	mov	r24, r11
    1c4e:	0e 94 a0 11 	call	0x2340	; 0x2340 <StopEavesdropOnFHT8V(bool)>
    // Clear any RX state so that nothing stale is carried forward.
    FHT8VCallForHeatHeardGetAndClear();
    1c52:	0e 94 89 11 	call	0x2312	; 0x2312 <FHT8VCallForHeatHeardGetAndClear()>
    1c56:	10 e0       	ldi	r17, 0x00	; 0
    1c58:	10 c0       	rjmp	.+32     	; 0x1c7a <loopOpenTRV()+0x318>
#if 1 && defined(DEBUG)
    const uint16_t dropped = getInboundStatsQueueOverrun();
    static uint16_t oldDropped;
    if(dropped != oldDropped)
      {
      DEBUG_SERIAL_PRINT_FLASHSTRING("?DROPPED stats: ");
    1c5a:	8a e9       	ldi	r24, 0x9A	; 154
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	0e 94 12 27 	call	0x4e24	; 0x4e24 <serialPrintAndFlush(__FlashStringHelper const*)>
      DEBUG_SERIAL_PRINT(dropped);
    1c62:	c8 01       	movw	r24, r16
    1c64:	6a e0       	ldi	r22, 0x0A	; 10
    1c66:	70 e0       	ldi	r23, 0x00	; 0
    1c68:	0e 94 a0 26 	call	0x4d40	; 0x4d40 <serialPrintAndFlush(unsigned int, int)>
      DEBUG_SERIAL_PRINTLN();
    1c6c:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <serialPrintlnAndFlush()>
      oldDropped = dropped;
    1c70:	10 93 43 02 	sts	0x0243, r17
    1c74:	00 93 42 02 	sts	0x0242, r16
    1c78:	11 e0       	ldi	r17, 0x01	; 1


  // Set BOILER_OUT as appropriate for local and/or remote calls for heat.
  // FIXME: local valve-driven boiler on does not obey normal on/off run-time rules.
#if defined(ENABLE_BOILER_HUB)
  fastDigitalWrite(OUT_HEATCALL, ((hubModeBoilerOn || NominalRadValve.isControlledValveReallyOpen()) ? HIGH : LOW));
    1c7a:	ff 20       	and	r15, r15
    1c7c:	41 f4       	brne	.+16     	; 0x1c8e <loopOpenTRV()+0x32c>
    1c7e:	89 e1       	ldi	r24, 0x19	; 25
    1c80:	92 e0       	ldi	r25, 0x02	; 2
    1c82:	0e 94 8e 0c 	call	0x191c	; 0x191c <ModelledRadValve::isControlledValveReallyOpen() const>
    1c86:	88 23       	and	r24, r24
    1c88:	11 f4       	brne	.+4      	; 0x1c8e <loopOpenTRV()+0x32c>
    1c8a:	60 e0       	ldi	r22, 0x00	; 0
    1c8c:	01 c0       	rjmp	.+2      	; 0x1c90 <loopOpenTRV()+0x32e>
    1c8e:	61 e0       	ldi	r22, 0x01	; 1
    1c90:	86 e0       	ldi	r24, 0x06	; 6
    1c92:	0e 94 2d 38 	call	0x705a	; 0x705a <digitalWrite>
  // DHD20130425: waking up from sleep and getting to start processing below this block may take >10ms.
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("*E"); // End-of-cycle sleep.
#endif
  // Ensure that serial I/O is off.
  powerDownSerial();
    1c96:	0e 94 ce 20 	call	0x419c	; 0x419c <powerDownSerial()>
  // Power down most stuff (except radio for hub RX).
  minimisePowerWithoutSleep();
    1c9a:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <minimisePowerWithoutSleep()>
    1c9e:	11 c0       	rjmp	.+34     	; 0x1cc2 <loopOpenTRV()+0x360>
  uint_fast8_t newTLSD;
  while(TIME_LSD == (newTLSD = getSecondsLT()))
    {
#if defined(ENABLE_BOILER_HUB) && defined(USE_MODULE_FHT8VSIMPLE) // Deal with FHT8V eavesdropping if needed.
    // Poll for RX of remote calls-for-heat if needed.
    if(needsToEavesdrop) { nap30AndPoll(); continue; }
    1ca0:	11 23       	and	r17, r17
    1ca2:	39 f0       	breq	.+14     	; 0x1cb2 <loopOpenTRV()+0x350>
//   * force if true then force full poll on every call (ie do not internally rate-limit)
// NOTE: implementation may not be in power-management module.
bool pollIO(bool force = false);
// Nap productively polling I/O, etc, across the system while spending time in low-power mode if possible.
// Typically sleeps for about 30ms; tries to allow ealier wakeup if interrupt is received, etc.
static void inline nap30AndPoll() { nap(WDTO_30MS); pollIO(true); }
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <nap(signed char)>
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	0e 94 1c 07 	call	0xe38	; 0xe38 <pollIO(bool)>
    1cb0:	08 c0       	rjmp	.+16     	; 0x1cc2 <loopOpenTRV()+0x360>
#endif
#if defined(USE_MODULE_RFM22RADIOSIMPLE) // Force radio to power-saving standby state if appropriate.
    // Force radio to known-low-power state from time to time (not every time to avoid unnecessary SPI work, LED flicker, etc.)
    if(batteryLow || second0) { RFM22ModeStandbyAndClearState(); }
    1cb2:	aa 20       	and	r10, r10
    1cb4:	11 f4       	brne	.+4      	; 0x1cba <loopOpenTRV()+0x358>
    1cb6:	bb 20       	and	r11, r11
    1cb8:	11 f0       	breq	.+4      	; 0x1cbe <loopOpenTRV()+0x35c>
    1cba:	0e 94 60 23 	call	0x46c0	; 0x46c0 <RFM22ModeStandbyAndClearState()>
#endif
    sleepUntilInt(); // Normal long minimal-power sleep until wake-up interrupt.
    1cbe:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <sleepPwrSaveWithBODDisabled()>
  // Ensure that serial I/O is off.
  powerDownSerial();
  // Power down most stuff (except radio for hub RX).
  minimisePowerWithoutSleep();
  uint_fast8_t newTLSD;
  while(TIME_LSD == (newTLSD = getSecondsLT()))
    1cc2:	90 91 6d 03 	lds	r25, 0x036D
    1cc6:	80 91 3c 02 	lds	r24, 0x023C
    1cca:	89 17       	cp	r24, r25
    1ccc:	49 f3       	breq	.-46     	; 0x1ca0 <loopOpenTRV()+0x33e>
    // Force radio to known-low-power state from time to time (not every time to avoid unnecessary SPI work, LED flicker, etc.)
    if(batteryLow || second0) { RFM22ModeStandbyAndClearState(); }
#endif
    sleepUntilInt(); // Normal long minimal-power sleep until wake-up interrupt.
    }
  TIME_LSD = newTLSD;
    1cce:	90 93 3c 02 	sts	0x023C, r25
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("*S"); // Start-of-cycle wake.
#endif

#if defined(ENABLE_BOILER_HUB) && defined(USE_MODULE_FHT8VSIMPLE) // Deal with FHT8V eavesdropping if needed.
  // Check RSSI...
  if(needsToEavesdrop)
    1cd2:	11 23       	and	r17, r17
    1cd4:	79 f0       	breq	.+30     	; 0x1cf4 <loopOpenTRV()+0x392>
    {
    const uint8_t rssi = RFM22RSSI();
    1cd6:	0e 94 23 23 	call	0x4646	; 0x4646 <RFM22RSSI()>
    1cda:	98 2f       	mov	r25, r24
    static uint8_t lastRSSI;
    if((rssi > 0) && (lastRSSI != rssi))
    1cdc:	88 23       	and	r24, r24
    1cde:	51 f0       	breq	.+20     	; 0x1cf4 <loopOpenTRV()+0x392>
    1ce0:	80 91 41 02 	lds	r24, 0x0241
    1ce4:	89 17       	cp	r24, r25
    1ce6:	31 f0       	breq	.+12     	; 0x1cf4 <loopOpenTRV()+0x392>
      {
      lastRSSI = rssi;
    1ce8:	90 93 41 02 	sts	0x0241, r25
      addEntropyToPool(rssi, 0); // Probably some real entropy but don't assume it.
    1cec:	89 2f       	mov	r24, r25
    1cee:	60 e0       	ldi	r22, 0x00	; 0
    1cf0:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <addEntropyToPool(unsigned char, unsigned char)>
  // START LOOP BODY
  // ===============


  // Warn if too near overrun before.
  if(tooNearOverrun) { serialPrintlnAndFlush(F("?near overrun")); }
    1cf4:	ee 20       	and	r14, r14
    1cf6:	21 f0       	breq	.+8      	; 0x1d00 <loopOpenTRV()+0x39e>
    1cf8:	8c e8       	ldi	r24, 0x8C	; 140
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	0e 94 28 27 	call	0x4e50	; 0x4e50 <serialPrintlnAndFlush(__FlashStringHelper const*)>
  // Try for double TX for more robust conversation with valve unless:
  //   * battery is low
  //   * the valve is not required to be wide open (ie a reasonable temperature is currently being maintained).
  //   * this is a hub and has to listen as much as possible
  // to conserve battery and bandwidth.
  const bool doubleTXForFTH8V = !conserveBattery && !hubMode && (NominalRadValve.get() >= 75);
    1d00:	88 20       	and	r8, r8
    1d02:	51 f4       	brne	.+20     	; 0x1d18 <loopOpenTRV()+0x3b6>
    1d04:	cc 20       	and	r12, r12
    1d06:	41 f4       	brne	.+16     	; 0x1d18 <loopOpenTRV()+0x3b6>
  public:
    // Return last value fetched by read(); undefined before first read().
    // Usually fast.
    // Often likely to be thread-safe or usable within ISRs (Interrupt Service Routines),
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual uint8_t get() const { return(value); }
    1d08:	80 91 1b 02 	lds	r24, 0x021B
    1d0c:	ff 24       	eor	r15, r15
    1d0e:	8b 34       	cpi	r24, 0x4B	; 75
    1d10:	20 f0       	brcs	.+8      	; 0x1d1a <loopOpenTRV()+0x3b8>
    1d12:	ff 24       	eor	r15, r15
    1d14:	f3 94       	inc	r15
    1d16:	01 c0       	rjmp	.+2      	; 0x1d1a <loopOpenTRV()+0x3b8>
    1d18:	ff 24       	eor	r15, r15
  // FHT8V is highest priority and runs first.
  // ---------- HALF SECOND #0 -----------
  bool useExtraFHT8VTXSlots = localFHT8VTRVEnabled() && FHT8VPollSyncAndTX_First(doubleTXForFTH8V); // Time for extra TX before UI.
    1d1a:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <localFHT8VTRVEnabled()>
    1d1e:	88 23       	and	r24, r24
    1d20:	39 f0       	breq	.+14     	; 0x1d30 <loopOpenTRV()+0x3ce>
    1d22:	8f 2d       	mov	r24, r15
    1d24:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <FHT8VPollSyncAndTX_First(bool)>
    1d28:	88 23       	and	r24, r24
    1d2a:	11 f0       	breq	.+4      	; 0x1d30 <loopOpenTRV()+0x3ce>
    1d2c:	01 e0       	ldi	r16, 0x01	; 1
    1d2e:	01 c0       	rjmp	.+2      	; 0x1d32 <loopOpenTRV()+0x3d0>
    1d30:	00 e0       	ldi	r16, 0x00	; 0
  bool recompute = false; // Set true an extra recompute of target temperature should be done.
#if !defined(TWO_S_TICK_RTC_SUPPORT)
  if(0 == (TIME_LSD & 1))
#endif
    {
    if(tickUI(TIME_LSD))
    1d32:	80 91 3c 02 	lds	r24, 0x023C
    1d36:	0e 94 fb 2d 	call	0x5bf6	; 0x5bf6 <tickUI(unsigned char)>
    1d3a:	88 23       	and	r24, r24
    1d3c:	19 f0       	breq	.+6      	; 0x1d44 <loopOpenTRV()+0x3e2>
    1d3e:	ee 24       	eor	r14, r14
    1d40:	e3 94       	inc	r14
    1d42:	07 c0       	rjmp	.+14     	; 0x1d52 <loopOpenTRV()+0x3f0>
      showStatus = true;
      recompute = true;
      }
    }

  if(recompute || recentUIControlUse())
    1d44:	0e 94 58 27 	call	0x4eb0	; 0x4eb0 <recentUIControlUse()>
    1d48:	88 23       	and	r24, r24
    1d4a:	11 f4       	brne	.+4      	; 0x1d50 <loopOpenTRV()+0x3ee>
    1d4c:	ee 24       	eor	r14, r14
    1d4e:	05 c0       	rjmp	.+10     	; 0x1d5a <loopOpenTRV()+0x3f8>
    1d50:	ee 24       	eor	r14, r14
    {
    // Force immediate recompute of target temperature for (UI) responsiveness.
    NominalRadValve.computeTargetTemperature();
    1d52:	89 e1       	ldi	r24, 0x19	; 25
    1d54:	92 e0       	ldi	r25, 0x02	; 2
    1d56:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <ModelledRadValve::computeTargetTemperature()>
    }


#if defined(USE_MODULE_FHT8VSIMPLE)
  if(useExtraFHT8VTXSlots)
    1d5a:	00 23       	and	r16, r16
    1d5c:	51 f0       	breq	.+20     	; 0x1d72 <loopOpenTRV()+0x410>
    {
    // Time for extra TX before other actions, but don't bother if minimising power in frost mode.
    // ---------- HALF SECOND #1 -----------
    useExtraFHT8VTXSlots = localFHT8VTRVEnabled() && FHT8VPollSyncAndTX_Next(doubleTXForFTH8V); 
    1d5e:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <localFHT8VTRVEnabled()>
    1d62:	88 23       	and	r24, r24
    1d64:	29 f0       	breq	.+10     	; 0x1d70 <loopOpenTRV()+0x40e>
    1d66:	8f 2d       	mov	r24, r15
    1d68:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <FHT8VPollSyncAndTX_Next(bool)>
    1d6c:	88 23       	and	r24, r24
    1d6e:	09 f4       	brne	.+2      	; 0x1d72 <loopOpenTRV()+0x410>
    1d70:	00 e0       	ldi	r16, 0x00	; 0
  // Once-per-minute tasks: all must take << 0.3s.
  // Run tasks spread throughout the minute to be as kind to batteries (etc) as possible.
  // Only when runAll is true run less-critical tasks that be skipped sometimes when particularly conserving energy.
  // TODO: coordinate temperature reading with time when radio and other heat-generating items are off for more accurate readings.
  // TODO: ensure only take ambient light reading at times when all LEDs are off.
  const bool runAll = (!conserveBattery) || minute0From4ForSensors;
    1d72:	88 20       	and	r8, r8
    1d74:	11 f0       	breq	.+4      	; 0x1d7a <loopOpenTRV()+0x418>
    1d76:	19 2d       	mov	r17, r9
    1d78:	01 c0       	rjmp	.+2      	; 0x1d7c <loopOpenTRV()+0x41a>
    1d7a:	11 e0       	ldi	r17, 0x01	; 1

  switch(TIME_LSD) // With TWO_S_TICK_RTC_SUPPORT only even seconds are available.
    1d7c:	80 91 3c 02 	lds	r24, 0x023C
    1d80:	80 33       	cpi	r24, 0x30	; 48
    1d82:	09 f4       	brne	.+2      	; 0x1d86 <loopOpenTRV()+0x424>
    1d84:	97 c0       	rjmp	.+302    	; 0x1eb4 <loopOpenTRV()+0x552>
    1d86:	81 33       	cpi	r24, 0x31	; 49
    1d88:	68 f4       	brcc	.+26     	; 0x1da4 <loopOpenTRV()+0x442>
    1d8a:	82 30       	cpi	r24, 0x02	; 2
    1d8c:	41 f1       	breq	.+80     	; 0x1dde <loopOpenTRV()+0x47c>
    1d8e:	83 30       	cpi	r24, 0x03	; 3
    1d90:	18 f4       	brcc	.+6      	; 0x1d98 <loopOpenTRV()+0x436>
    1d92:	88 23       	and	r24, r24
    1d94:	d1 f0       	breq	.+52     	; 0x1dca <loopOpenTRV()+0x468>
    1d96:	ef c0       	rjmp	.+478    	; 0x1f76 <loopOpenTRV()+0x614>
    1d98:	84 30       	cpi	r24, 0x04	; 4
    1d9a:	a9 f1       	breq	.+106    	; 0x1e06 <loopOpenTRV()+0x4a4>
    1d9c:	8a 30       	cpi	r24, 0x0A	; 10
    1d9e:	09 f0       	breq	.+2      	; 0x1da2 <loopOpenTRV()+0x440>
    1da0:	ea c0       	rjmp	.+468    	; 0x1f76 <loopOpenTRV()+0x614>
    1da2:	39 c0       	rjmp	.+114    	; 0x1e16 <loopOpenTRV()+0x4b4>
    1da4:	86 33       	cpi	r24, 0x36	; 54
    1da6:	09 f4       	brne	.+2      	; 0x1daa <loopOpenTRV()+0x448>
    1da8:	97 c0       	rjmp	.+302    	; 0x1ed8 <loopOpenTRV()+0x576>
    1daa:	87 33       	cpi	r24, 0x37	; 55
    1dac:	38 f4       	brcc	.+14     	; 0x1dbc <loopOpenTRV()+0x45a>
    1dae:	82 33       	cpi	r24, 0x32	; 50
    1db0:	09 f4       	brne	.+2      	; 0x1db4 <loopOpenTRV()+0x452>
    1db2:	85 c0       	rjmp	.+266    	; 0x1ebe <loopOpenTRV()+0x55c>
    1db4:	84 33       	cpi	r24, 0x34	; 52
    1db6:	09 f0       	breq	.+2      	; 0x1dba <loopOpenTRV()+0x458>
    1db8:	de c0       	rjmp	.+444    	; 0x1f76 <loopOpenTRV()+0x614>
    1dba:	89 c0       	rjmp	.+274    	; 0x1ece <loopOpenTRV()+0x56c>
    1dbc:	88 33       	cpi	r24, 0x38	; 56
    1dbe:	09 f4       	brne	.+2      	; 0x1dc2 <loopOpenTRV()+0x460>
    1dc0:	90 c0       	rjmp	.+288    	; 0x1ee2 <loopOpenTRV()+0x580>
    1dc2:	8a 33       	cpi	r24, 0x3A	; 58
    1dc4:	09 f0       	breq	.+2      	; 0x1dc8 <loopOpenTRV()+0x466>
    1dc6:	d7 c0       	rjmp	.+430    	; 0x1f76 <loopOpenTRV()+0x614>
    1dc8:	c3 c0       	rjmp	.+390    	; 0x1f50 <loopOpenTRV()+0x5ee>
    {
    case 0:
      {
      // Tasks that must be run every minute.
      ++minuteCount;
    1dca:	80 91 3d 02 	lds	r24, 0x023D
    1dce:	8f 5f       	subi	r24, 0xFF	; 255
    1dd0:	80 93 3d 02 	sts	0x023D, r24
      checkUserSchedule(); // Force to user's programmed settings, if any, at the correct time.
    1dd4:	0e 94 6b 28 	call	0x50d6	; 0x50d6 <checkUserSchedule()>
      // Ensure that the RTC has been persisted promptly when necessary.
      persistRTC();
    1dd8:	0e 94 bb 24 	call	0x4976	; 0x4976 <persistRTC()>
    1ddc:	cc c0       	rjmp	.+408    	; 0x1f76 <loopOpenTRV()+0x614>
      break;
      }

    // Churn/reseed PRNG(s) a little to improve unpredictability in use: should be lightweight.
    case 2: { if(runAll) { seedRNG8(minuteCount ^ cycleCountCPU() ^ (uint8_t)Supply_mV.get(), getSubCycleTime() ^ (uint8_t)AmbLight.get(), (uint8_t)TemperatureC16.get()); } break; }
    1dde:	11 23       	and	r17, r17
    1de0:	09 f4       	brne	.+2      	; 0x1de4 <loopOpenTRV()+0x482>
    1de2:	c9 c0       	rjmp	.+402    	; 0x1f76 <loopOpenTRV()+0x614>
    1de4:	86 b5       	in	r24, 0x26	; 38
    1de6:	20 91 b2 00 	lds	r18, 0x00B2
    1dea:	60 91 bb 03 	lds	r22, 0x03BB
    1dee:	90 91 3d 02 	lds	r25, 0x023D
    1df2:	89 27       	eor	r24, r25
    1df4:	90 91 63 03 	lds	r25, 0x0363
    1df8:	62 27       	eor	r22, r18
    1dfa:	89 27       	eor	r24, r25
    1dfc:	40 91 c5 03 	lds	r20, 0x03C5
    1e00:	0e 94 9e 21 	call	0x433c	; 0x433c <seedRNG8(unsigned char, unsigned char, unsigned char)>
    1e04:	b8 c0       	rjmp	.+368    	; 0x1f76 <loopOpenTRV()+0x614>
    // Force read of supply/battery voltage; measure and recompute status (etc) less often when already thought to be low, eg when conserving.
    case 4: { if(runAll) { Supply_mV.read(); } break; }
    1e06:	11 23       	and	r17, r17
    1e08:	09 f4       	brne	.+2      	; 0x1e0c <loopOpenTRV()+0x4aa>
    1e0a:	b5 c0       	rjmp	.+362    	; 0x1f76 <loopOpenTRV()+0x614>
    1e0c:	8f e5       	ldi	r24, 0x5F	; 95
    1e0e:	93 e0       	ldi	r25, 0x03	; 3
    1e10:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <SupplyVoltageMilliVolts::read()>
    1e14:	b0 c0       	rjmp	.+352    	; 0x1f76 <loopOpenTRV()+0x614>

    // Regular transmission of stats if NOT driving a local valve (else stats can be piggybacked onto that).
    case 10:
      {
      if(!enableTrailingStatsPayload()) { break; } // Not allowed to send stuff like this.
    1e16:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <enableTrailingStatsPayload()>
    1e1a:	88 23       	and	r24, r24
    1e1c:	09 f4       	brne	.+2      	; 0x1e20 <loopOpenTRV()+0x4be>
    1e1e:	ab c0       	rjmp	.+342    	; 0x1f76 <loopOpenTRV()+0x614>
#if defined(USE_MODULE_FHT8VSIMPLE)
      // Avoid transmit conflict with FS20; just drop the slot.
      // We should possibly choose between this and piggybacking stats to avoid busting duty-cycle rules.
      if(localFHT8VTRVEnabled() && useExtraFHT8VTXSlots) { break; }
    1e20:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <localFHT8VTRVEnabled()>
    1e24:	88 23       	and	r24, r24
    1e26:	09 f4       	brne	.+2      	; 0x1e2a <loopOpenTRV()+0x4c8>
    1e28:	07 c1       	rjmp	.+526    	; 0x2038 <loopOpenTRV()+0x6d6>
    1e2a:	00 23       	and	r16, r16
    1e2c:	09 f4       	brne	.+2      	; 0x1e30 <loopOpenTRV()+0x4ce>
    1e2e:	04 c1       	rjmp	.+520    	; 0x2038 <loopOpenTRV()+0x6d6>
    1e30:	a4 c0       	rjmp	.+328    	; 0x1f7a <loopOpenTRV()+0x618>
#endif

      // Generally only attempt stats TX in the minute after all sensors should have been polled (so that readings are fresh).
      if(minute1From4AfterSensors ||
    1e32:	aa 20       	and	r10, r10
    1e34:	09 f0       	breq	.+2      	; 0x1e38 <loopOpenTRV()+0x4d6>
    1e36:	9f c0       	rjmp	.+318    	; 0x1f76 <loopOpenTRV()+0x614>
    1e38:	0e 94 b9 21 	call	0x4372	; 0x4372 <randRNG8()>
    1e3c:	84 72       	andi	r24, 0x24	; 36
    1e3e:	09 f0       	breq	.+2      	; 0x1e42 <loopOpenTRV()+0x4e0>
    1e40:	9a c0       	rjmp	.+308    	; 0x1f76 <loopOpenTRV()+0x614>
        (!batteryLow && (0 == (0x24 & randRNG8())))) // Occasional additional TX when not conserving power.
        {
        pollIO(); // Deal with any pending I/O.
    1e42:	80 e0       	ldi	r24, 0x00	; 0
    1e44:	0e 94 1c 07 	call	0xe38	; 0xe38 <pollIO(bool)>
        // Sleep randomly up to 128ms to spread transmissions and thus help avoid collisions.
        sleepLowPowerLessThanMs(1 + (randRNG8() & 0x7f));
    1e48:	0e 94 b9 21 	call	0x4372	; 0x4372 <randRNG8()>
// Should be good for values up to at least 1000, ie 1 second.
// Uses formulation likely to be quicker than sleepLowPowerMs() for non-constant argument values,
// and that results in a somewhat shorter sleep than sleepLowPowerMs(ms).
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerLessThanMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed(((MIN_CPU_HZ/4000) * (ms)) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	8f 77       	andi	r24, 0x7F	; 127
    1e50:	90 70       	andi	r25, 0x00	; 0
    1e52:	01 96       	adiw	r24, 0x01	; 1
    1e54:	a0 e0       	ldi	r26, 0x00	; 0
    1e56:	b0 e0       	ldi	r27, 0x00	; 0
    1e58:	9c 01       	movw	r18, r24
    1e5a:	ad 01       	movw	r20, r26
    1e5c:	e3 e0       	ldi	r30, 0x03	; 3
    1e5e:	22 0f       	add	r18, r18
    1e60:	33 1f       	adc	r19, r19
    1e62:	44 1f       	adc	r20, r20
    1e64:	55 1f       	adc	r21, r21
    1e66:	ea 95       	dec	r30
    1e68:	d1 f7       	brne	.-12     	; 0x1e5e <loopOpenTRV()+0x4fc>
    1e6a:	28 1b       	sub	r18, r24
    1e6c:	39 0b       	sbc	r19, r25
    1e6e:	4a 0b       	sbc	r20, r26
    1e70:	5b 0b       	sbc	r21, r27
    1e72:	22 50       	subi	r18, 0x02	; 2
    1e74:	30 40       	sbci	r19, 0x00	; 0
    1e76:	c9 01       	movw	r24, r18
    1e78:	0e 94 8b 1d 	call	0x3b16	; 0x3b16 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
        pollIO(); // Deal with any pending I/O.
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	0e 94 1c 07 	call	0xe38	; 0xe38 <pollIO(bool)>
        //   * battery is low
        //   * this node is a hub so needs to listen as much as possible
        // This doesn't generally/always need to send binary/both formats
        // if this is controlling a local FHT8V on which the binary stats can be piggybacked.
        // Ie, if doesn't have a local TRV then it must send binary some of the time.
        const bool doBinary = !localFHT8VTRVEnabled() && randRNG8NextBoolean();
    1e82:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <localFHT8VTRVEnabled()>
    1e86:	88 23       	and	r24, r24
    1e88:	31 f4       	brne	.+12     	; 0x1e96 <loopOpenTRV()+0x534>
void resetRNG8();
#endif

// Get a boolean from RNG8.
// Avoids suspect low-order bit(s).
static inline bool randRNG8NextBoolean() { return(0 != (0x8 & randRNG8())); }
    1e8a:	0e 94 b9 21 	call	0x4372	; 0x4372 <randRNG8()>
    1e8e:	83 ff       	sbrs	r24, 3
    1e90:	02 c0       	rjmp	.+4      	; 0x1e96 <loopOpenTRV()+0x534>
    1e92:	41 e0       	ldi	r20, 0x01	; 1
    1e94:	01 c0       	rjmp	.+2      	; 0x1e98 <loopOpenTRV()+0x536>
    1e96:	40 e0       	ldi	r20, 0x00	; 0
        bareStatsTX(hubMode, minute1From4AfterSensors && !batteryLow && !hubMode, doBinary);
    1e98:	77 20       	and	r7, r7
    1e9a:	39 f0       	breq	.+14     	; 0x1eaa <loopOpenTRV()+0x548>
    1e9c:	aa 20       	and	r10, r10
    1e9e:	29 f4       	brne	.+10     	; 0x1eaa <loopOpenTRV()+0x548>
    1ea0:	60 e0       	ldi	r22, 0x00	; 0
    1ea2:	cc 20       	and	r12, r12
    1ea4:	19 f4       	brne	.+6      	; 0x1eac <loopOpenTRV()+0x54a>
    1ea6:	61 e0       	ldi	r22, 0x01	; 1
    1ea8:	01 c0       	rjmp	.+2      	; 0x1eac <loopOpenTRV()+0x54a>
    1eaa:	60 e0       	ldi	r22, 0x00	; 0
    1eac:	8c 2d       	mov	r24, r12
    1eae:	0e 94 80 08 	call	0x1100	; 0x1100 <bareStatsTX(bool, bool, bool)>
    1eb2:	61 c0       	rjmp	.+194    	; 0x1f76 <loopOpenTRV()+0x614>
#endif

#ifdef TEMP_POT_AVAILABLE
    // Sample the user-selected WARM temperature target at a fixed rate.
    // This allows the unit to stay reasonably responsive to adjusting the temperature dial.
    case 48: { TempPot.read(); break; }
    1eb4:	87 ec       	ldi	r24, 0xC7	; 199
    1eb6:	93 e0       	ldi	r25, 0x03	; 3
    1eb8:	0e 94 87 32 	call	0x650e	; 0x650e <TemperaturePot::read()>
    1ebc:	5c c0       	rjmp	.+184    	; 0x1f76 <loopOpenTRV()+0x614>
#endif

    // Read all environmental inputs, late in the cycle.
#ifdef HUMIDITY_SENSOR_SUPPORT
    // Sample humidity.
    case 50: { if(runAll) { RelHumidity.read(); } break; }
    1ebe:	11 23       	and	r17, r17
    1ec0:	09 f4       	brne	.+2      	; 0x1ec4 <loopOpenTRV()+0x562>
    1ec2:	59 c0       	rjmp	.+178    	; 0x1f76 <loopOpenTRV()+0x614>
    1ec4:	8f eb       	ldi	r24, 0xBF	; 191
    1ec6:	93 e0       	ldi	r25, 0x03	; 3
    1ec8:	0e 94 7c 33 	call	0x66f8	; 0x66f8 <HumiditySensorSHT21::read()>
    1ecc:	54 c0       	rjmp	.+168    	; 0x1f76 <loopOpenTRV()+0x614>
#endif

    // Poll ambient light level at a fixed rate.
    // This allows the unit to respond consistently to (eg) switching lights on (eg TODO-388).
    case 52: { AmbLight.read(); break; }
    1ece:	89 eb       	ldi	r24, 0xB9	; 185
    1ed0:	93 e0       	ldi	r25, 0x03	; 3
    1ed2:	0e 94 f0 33 	call	0x67e0	; 0x67e0 <AmbientLight::read()>
    1ed6:	4f c0       	rjmp	.+158    	; 0x1f76 <loopOpenTRV()+0x614>

    // At a hub, sample temperature regularly as late as possible in the minute just before recomputing valve position.
    // Force a regular read to make stats such as rate-of-change simple and to minimise lag.
    // TODO: optimise to reduce power consumption when not calling for heat.
    // TODO: optimise to reduce self-heating jitter when in hub/listen/RX mode.
    case 54: { TemperatureC16.read(); break; }
    1ed8:	83 ec       	ldi	r24, 0xC3	; 195
    1eda:	93 e0       	ldi	r25, 0x03	; 3
    1edc:	0e 94 14 33 	call	0x6628	; 0x6628 <RoomTemperatureC16::read()>
    1ee0:	4a c0       	rjmp	.+148    	; 0x1f76 <loopOpenTRV()+0x614>
    // This should happen as soon after the latest readings as possible (temperature especially).
    case 56:
      {
#ifdef OCCUPANCY_SUPPORT
      // Update occupancy status (fresh for target recomputation) at a fixed rate.
      Occupancy.read();
    1ee2:	82 e1       	ldi	r24, 0x12	; 18
    1ee4:	92 e0       	ldi	r25, 0x02	; 2
    1ee6:	0e 94 19 04 	call	0x832	; 0x832 <OccupancyTracker::read()>

    // Force a read/poll/recomputation of the target position and call for heat.
    // Sets/clears changed flag if computed valve position changed.
    // Call at a fixed rate (1/60s).
    // Potentially expensive/slow.
    virtual uint8_t read() { computeCallForHeat(); return(value); }
    1eea:	89 e1       	ldi	r24, 0x19	; 25
    1eec:	92 e0       	ldi	r25, 0x02	; 2
    1eee:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <ModelledRadValve::computeCallForHeat()>
    1ef2:	80 91 1b 02 	lds	r24, 0x021B

#if defined(USE_MODULE_FHT8VSIMPLE)
      // If there was a change in target valve position,
      // or periodically in the minute after all sensors should have been read,
      // precompute some or all of any outgoing frame/stats/etc ready for the next transmission.
      if(NominalRadValve.isValveMoved() ||
    1ef6:	80 91 24 02 	lds	r24, 0x0224
    1efa:	88 23       	and	r24, r24
    1efc:	31 f4       	brne	.+12     	; 0x1f0a <loopOpenTRV()+0x5a8>
    1efe:	77 20       	and	r7, r7
    1f00:	51 f0       	breq	.+20     	; 0x1f16 <loopOpenTRV()+0x5b4>
    1f02:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <enableTrailingStatsPayload()>
    1f06:	88 23       	and	r24, r24
    1f08:	31 f0       	breq	.+12     	; 0x1f16 <loopOpenTRV()+0x5b4>
         (minute1From4AfterSensors && enableTrailingStatsPayload()))
        {
        if(localFHT8VTRVEnabled()) { FHT8VCreateValveSetCmdFrame(); }
    1f0a:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <localFHT8VTRVEnabled()>
    1f0e:	88 23       	and	r24, r24
    1f10:	11 f0       	breq	.+4      	; 0x1f16 <loopOpenTRV()+0x5b4>
    1f12:	0e 94 29 15 	call	0x2a52	; 0x2a52 <FHT8VCreateValveSetCmdFrame()>
        }
#endif

#if defined(ENABLE_BOILER_HUB)
      // Track how long since remote call for heat last heard.
      if(hubMode)
    1f16:	cc 20       	and	r12, r12
    1f18:	b1 f0       	breq	.+44     	; 0x1f46 <loopOpenTRV()+0x5e4>
        {
        if(boilerCountdownTicks != 0)
    1f1a:	80 91 3e 02 	lds	r24, 0x023E
    1f1e:	90 91 3f 02 	lds	r25, 0x023F
    1f22:	89 2b       	or	r24, r25
    1f24:	81 f0       	breq	.+32     	; 0x1f46 <loopOpenTRV()+0x5e4>
          {
#if 1 && defined(DEBUG)
          DEBUG_SERIAL_PRINT_FLASHSTRING("Boiler on, s: ");
    1f26:	8d e7       	ldi	r24, 0x7D	; 125
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	0e 94 12 27 	call	0x4e24	; 0x4e24 <serialPrintAndFlush(__FlashStringHelper const*)>
          DEBUG_SERIAL_PRINT(boilerCountdownTicks * MAIN_TICK_S);
    1f2e:	80 91 3e 02 	lds	r24, 0x023E
    1f32:	90 91 3f 02 	lds	r25, 0x023F
    1f36:	88 0f       	add	r24, r24
    1f38:	99 1f       	adc	r25, r25
    1f3a:	6a e0       	ldi	r22, 0x0A	; 10
    1f3c:	70 e0       	ldi	r23, 0x00	; 0
    1f3e:	0e 94 a0 26 	call	0x4d40	; 0x4d40 <serialPrintAndFlush(unsigned int, int)>
          DEBUG_SERIAL_PRINTLN();
    1f42:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <serialPrintlnAndFlush()>
          }
        }
#endif

      // Show current status if appropriate.
      if(runAll) { showStatus = true; }
    1f46:	11 23       	and	r17, r17
    1f48:	b1 f0       	breq	.+44     	; 0x1f76 <loopOpenTRV()+0x614>
    1f4a:	ee 24       	eor	r14, r14
    1f4c:	e3 94       	inc	r14
    1f4e:	13 c0       	rjmp	.+38     	; 0x1f76 <loopOpenTRV()+0x614>
    case 58:
      {
      // Take full stats sample as near the end of the hour as reasonably possible (without danger of overrun),
      // and with other optional non-full samples evenly spaced throughout the hour (if not low on battery).
      // A small even number of samples (or 1 sample) is probably most efficient.
      if(minute0From4ForSensors) // Use lowest-noise samples just taken in the special 0 minute out of each 4.
    1f50:	99 20       	and	r9, r9
    1f52:	89 f0       	breq	.+34     	; 0x1f76 <loopOpenTRV()+0x614>
        {
        const uint_least8_t mm = getMinutesLT();
    1f54:	0e 94 51 24 	call	0x48a2	; 0x48a2 <getMinutesLT()>
        switch(mm)
    1f58:	8a 31       	cpi	r24, 0x1A	; 26
    1f5a:	68 f0       	brcs	.+26     	; 0x1f76 <loopOpenTRV()+0x614>
    1f5c:	8e 31       	cpi	r24, 0x1E	; 30
    1f5e:	20 f0       	brcs	.+8      	; 0x1f68 <loopOpenTRV()+0x606>
    1f60:	88 53       	subi	r24, 0x38	; 56
    1f62:	84 30       	cpi	r24, 0x04	; 4
    1f64:	40 f4       	brcc	.+16     	; 0x1f76 <loopOpenTRV()+0x614>
    1f66:	04 c0       	rjmp	.+8      	; 0x1f70 <loopOpenTRV()+0x60e>
          {
          case 26: case 27: case 28: case 29:
            { if(!batteryLow) { sampleStats(false); } break; } // Skip sub-samples if short of energy.
    1f68:	aa 20       	and	r10, r10
    1f6a:	29 f4       	brne	.+10     	; 0x1f76 <loopOpenTRV()+0x614>
    1f6c:	80 e0       	ldi	r24, 0x00	; 0
    1f6e:	01 c0       	rjmp	.+2      	; 0x1f72 <loopOpenTRV()+0x610>
          case 56: case 57: case 58: case 59:
            { sampleStats(true); break; } // Always take the full sample at the end of each hour.
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	0e 94 23 0a 	call	0x1446	; 0x1446 <sampleStats(bool)>
      break;
      }
    }

#if defined(USE_MODULE_FHT8VSIMPLE) && defined(TWO_S_TICK_RTC_SUPPORT)
  if(useExtraFHT8VTXSlots)
    1f76:	00 23       	and	r16, r16
    1f78:	61 f0       	breq	.+24     	; 0x1f92 <loopOpenTRV()+0x630>
    {
    // ---------- HALF SECOND #2 -----------
    useExtraFHT8VTXSlots = localFHT8VTRVEnabled() && FHT8VPollSyncAndTX_Next(doubleTXForFTH8V); 
    1f7a:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <localFHT8VTRVEnabled()>
    1f7e:	88 23       	and	r24, r24
    1f80:	39 f0       	breq	.+14     	; 0x1f90 <loopOpenTRV()+0x62e>
    1f82:	8f 2d       	mov	r24, r15
    1f84:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <FHT8VPollSyncAndTX_Next(bool)>
    1f88:	88 23       	and	r24, r24
    1f8a:	11 f0       	breq	.+4      	; 0x1f90 <loopOpenTRV()+0x62e>
    1f8c:	01 e0       	ldi	r16, 0x01	; 1
    1f8e:	01 c0       	rjmp	.+2      	; 0x1f92 <loopOpenTRV()+0x630>
    1f90:	00 e0       	ldi	r16, 0x00	; 0
//    if(useExtraFHT8VTXSlots) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("ES@2"); }
    }
#endif

  // Generate periodic status reports.
  if(showStatus) { serialStatusReport(); }
    1f92:	ee 20       	and	r14, r14
    1f94:	11 f0       	breq	.+4      	; 0x1f9a <loopOpenTRV()+0x638>
    1f96:	0e 94 90 28 	call	0x5120	; 0x5120 <serialStatusReport()>

#if defined(USE_MODULE_FHT8VSIMPLE) && defined(TWO_S_TICK_RTC_SUPPORT)
  if(useExtraFHT8VTXSlots)
    1f9a:	00 23       	and	r16, r16
    1f9c:	39 f0       	breq	.+14     	; 0x1fac <loopOpenTRV()+0x64a>
    {
    // ---------- HALF SECOND #3 -----------
    useExtraFHT8VTXSlots = localFHT8VTRVEnabled() && FHT8VPollSyncAndTX_Next(doubleTXForFTH8V); 
    1f9e:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <localFHT8VTRVEnabled()>
    1fa2:	88 23       	and	r24, r24
    1fa4:	19 f0       	breq	.+6      	; 0x1fac <loopOpenTRV()+0x64a>
    1fa6:	8f 2d       	mov	r24, r15
    1fa8:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <FHT8VPollSyncAndTX_Next(bool)>
  // AND the CLI is / should be active OR a status line has just been output
  // then poll/prompt the user for input
  // using a timeout which should safely avoid overrun, ie missing the next basic tick,
  // and which should also allow some energy-saving sleep.
#if 1 && defined(SUPPORT_CLI)
  const bool humanCLIUse = isCLIActive(); // Keeping CLI active for human interaction rather than for automated interaction.
    1fac:	0e 94 42 27 	call	0x4e84	; 0x4e84 <isCLIActive()>
    1fb0:	98 2f       	mov	r25, r24
  if(showStatus || humanCLIUse)
    1fb2:	ee 20       	and	r14, r14
    1fb4:	11 f4       	brne	.+4      	; 0x1fba <loopOpenTRV()+0x658>
    1fb6:	88 23       	and	r24, r24
    1fb8:	59 f0       	breq	.+22     	; 0x1fd0 <loopOpenTRV()+0x66e>
    {
    const uint8_t sct = getSubCycleTime();
    1fba:	80 91 b2 00 	lds	r24, 0x00B2
    const uint8_t listenTime = max(GSCT_MAX/16, CLI_POLL_MIN_SCT);
    if(sct < (GSCT_MAX - 2*listenTime))
    1fbe:	8d 3c       	cpi	r24, 0xCD	; 205
    1fc0:	38 f4       	brcc	.+14     	; 0x1fd0 <loopOpenTRV()+0x66e>
      // Don't listen beyond the last 16th of the cycle,
      // or a minimal time if only prodding for interaction with automated front-end,
      // as listening for UART RX uses lots of power.
      { pollCLI(humanCLIUse ? (GSCT_MAX-listenTime) : (sct+CLI_POLL_MIN_SCT)); }
    1fc2:	99 23       	and	r25, r25
    1fc4:	11 f0       	breq	.+4      	; 0x1fca <loopOpenTRV()+0x668>
    1fc6:	86 ee       	ldi	r24, 0xE6	; 230
    1fc8:	01 c0       	rjmp	.+2      	; 0x1fcc <loopOpenTRV()+0x66a>
    1fca:	87 5e       	subi	r24, 0xE7	; 231
    1fcc:	0e 94 ac 2a 	call	0x5558	; 0x5558 <pollCLI(unsigned char)>
    DEBUG_SERIAL_PRINTLN();
    }
#endif

  // Detect and handle (actual or near) overrun, if it happens, though it should not.
  if(TIME_LSD != getSecondsLT())
    1fd0:	90 91 6d 03 	lds	r25, 0x036D
    1fd4:	80 91 3c 02 	lds	r24, 0x023C
    1fd8:	89 17       	cp	r24, r25
    1fda:	91 f1       	breq	.+100    	; 0x2040 <loopOpenTRV()+0x6de>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1fdc:	f9 99       	sbic	0x1f, 1	; 31
    1fde:	fe cf       	rjmp	.-4      	; 0x1fdc <loopOpenTRV()+0x67a>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1fe0:	8d e1       	ldi	r24, 0x1D	; 29
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	92 bd       	out	0x22, r25	; 34
    1fe6:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1fe8:	f8 9a       	sbi	0x1f, 0	; 31
    1fea:	60 b5       	in	r22, 0x20	; 32
    {
    // Increment the overrun counter (stored inverted, so 0xff initialised => 0 overruns).
    const uint8_t orc = 1 + ~eeprom_read_byte((uint8_t *)EE_START_OVERRUN_COUNTER);
    eeprom_smart_update_byte((uint8_t *)EE_START_OVERRUN_COUNTER, ~orc);
    1fec:	61 50       	subi	r22, 0x01	; 1
    1fee:	0e 94 5e 10 	call	0x20bc	; 0x20bc <eeprom_smart_update_byte(unsigned char*, unsigned char)>
#if 1 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("!ERROR: loop overrun");
    1ff2:	88 e6       	ldi	r24, 0x68	; 104
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	0e 94 28 27 	call	0x4e50	; 0x4e50 <serialPrintlnAndFlush(__FlashStringHelper const*)>
//    DEBUG_SERIAL_PRINT(orc);
//    DEBUG_SERIAL_PRINTLN();
#endif
#if defined(USE_MODULE_FHT8VSIMPLE)
    FHT8VSyncAndTXReset(); // Assume that sync with valve may have been lost, so re-sync.
    1ffa:	0e 94 80 11 	call	0x2300	; 0x2300 <FHT8VSyncAndTXReset()>
#endif
    TIME_LSD = getSecondsLT(); // Prepare to sleep until start of next full minor cycle.
    1ffe:	80 91 6d 03 	lds	r24, 0x036D
    2002:	80 93 3c 02 	sts	0x023C, r24
    2006:	1c c0       	rjmp	.+56     	; 0x2040 <loopOpenTRV()+0x6de>
    // Optimisation: if just heard a call need not listen on this next cycle.
    // Optimisation: if boiler timeout is a long time away (>> one FHT8V TX cycle, ~2 minutes excl quiet minute), then can avoid listening for now.
    //    Longish period without any RX listening may allow hub unit to cool and get better sample of local temperature if marginal.
    // Aim to listen in one stretch for greater than full FHT8V TX cycle of ~2m to avoid missing a call for heat.
    // MUST listen for all of final 2 mins of boiler-on to avoid missing TX (without forcing boiler over-run).
    else if((boilerCountdownTicks <= ((MAX_FHT8V_TX_CYCLE_HS+1)/(2*MAIN_TICK_S))) && // Don't miss a final TX that would keep the boiler on...
    2008:	20 91 3e 02 	lds	r18, 0x023E
    200c:	30 91 3f 02 	lds	r19, 0x023F
    2010:	c9 01       	movw	r24, r18
    2012:	01 97       	sbiw	r24, 0x01	; 1
    2014:	cb 97       	sbiw	r24, 0x3b	; 59
    2016:	08 f0       	brcs	.+2      	; 0x201a <loopOpenTRV()+0x6b8>
    2018:	11 ce       	rjmp	.-990    	; 0x1c3c <loopOpenTRV()+0x2da>
#if defined(USE_MODULE_FHT8VSIMPLE)
  // Act on eavesdropping need, setting up or clearing down hooks as required.
  if(needsToEavesdrop)
    {
    // Ensure radio is in RX mode rather than standby, and possibly hook up interrupts if available (REV1 board).
    const bool startedRX = SetupToEavesdropOnFHT8V(second0); // Start listening (if not already so).
    201a:	8b 2d       	mov	r24, r11
    201c:	0e 94 b3 11 	call	0x2366	; 0x2366 <SetupToEavesdropOnFHT8V(bool)>
#if 0 && defined(DEBUG)
    if(startedRX) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("STARTED eavesdropping"); }
#endif
#if 1 && defined(DEBUG)
    const uint16_t dropped = getInboundStatsQueueOverrun();
    2020:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <getInboundStatsQueueOverrun()>
    2024:	8c 01       	movw	r16, r24
    static uint16_t oldDropped;
    if(dropped != oldDropped)
    2026:	80 91 42 02 	lds	r24, 0x0242
    202a:	90 91 43 02 	lds	r25, 0x0243
    202e:	08 17       	cp	r16, r24
    2030:	19 07       	cpc	r17, r25
    2032:	09 f0       	breq	.+2      	; 0x2036 <loopOpenTRV()+0x6d4>
    2034:	12 ce       	rjmp	.-988    	; 0x1c5a <loopOpenTRV()+0x2f8>
    2036:	20 ce       	rjmp	.-960    	; 0x1c78 <loopOpenTRV()+0x316>
      // We should possibly choose between this and piggybacking stats to avoid busting duty-cycle rules.
      if(localFHT8VTRVEnabled() && useExtraFHT8VTXSlots) { break; }
#endif

      // Generally only attempt stats TX in the minute after all sensors should have been polled (so that readings are fresh).
      if(minute1From4AfterSensors ||
    2038:	77 20       	and	r7, r7
    203a:	09 f0       	breq	.+2      	; 0x203e <loopOpenTRV()+0x6dc>
    203c:	02 cf       	rjmp	.-508    	; 0x1e42 <loopOpenTRV()+0x4e0>
    203e:	f9 ce       	rjmp	.-526    	; 0x1e32 <loopOpenTRV()+0x4d0>
  else if(getSubCycleTime() >= nearOverrunThreshold)
    {
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("?O"); // Near overrun.  Note 2ms/char to send...
    }
#endif
  }
    2040:	ef 96       	adiw	r28, 0x3f	; 63
    2042:	0f b6       	in	r0, 0x3f	; 63
    2044:	f8 94       	cli
    2046:	de bf       	out	0x3e, r29	; 62
    2048:	0f be       	out	0x3f, r0	; 63
    204a:	cd bf       	out	0x3d, r28	; 61
    204c:	cf 91       	pop	r28
    204e:	df 91       	pop	r29
    2050:	1f 91       	pop	r17
    2052:	0f 91       	pop	r16
    2054:	ff 90       	pop	r15
    2056:	ef 90       	pop	r14
    2058:	df 90       	pop	r13
    205a:	cf 90       	pop	r12
    205c:	bf 90       	pop	r11
    205e:	af 90       	pop	r10
    2060:	9f 90       	pop	r9
    2062:	8f 90       	pop	r8
    2064:	7f 90       	pop	r7
    2066:	08 95       	ret

00002068 <eeprom_smart_erase_byte(unsigned char*)>:
// If the target byte is already 0xff then this does nothing at all beyond an initial read.
// This saves a bit of time and power and possibly a little EEPROM cell wear also.
// Without split erase/write this degenerates to a specialised eeprom_update_byte().
// As with the AVR eeprom_XXX_byte() macros, not safe to use outside and within ISRs as-is.
// Returns true iff an erase was performed.
bool eeprom_smart_erase_byte(uint8_t *p)
    2068:	9c 01       	movw	r18, r24
  eeprom_write_byte(p, 0xff); // Set to 0xff.
  return(true); // Performed an erase (and probably a write, too).
#else

  // Wait until EEPROM is idle/ready.
  eeprom_busy_wait();
    206a:	f9 99       	sbic	0x1f, 1	; 31
    206c:	fe cf       	rjmp	.-4      	; 0x206a <eeprom_smart_erase_byte(unsigned char*)+0x2>
  //     if((uint8_t) 0xff == eeprom_read_byte(p)) { return; }
  // but leaves EEAR[L] set up appropriately for any erase or write.
#if E2END <= 0xFF
  EEARL = (uint8_t)p;
#else
  EEAR = (uint16_t)p;
    206e:	32 bd       	out	0x22, r19	; 34
    2070:	21 bd       	out	0x21, r18	; 33
#endif
  // Ignore problems that some AVRs have with EECR and STS instructions (ATmega64 errata).
  EECR = _BV(EERE); // Start EEPROM read operation.
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	8f bb       	out	0x1f, r24	; 31
  const uint8_t oldValue = EEDR; // Get old EEPROM value.
    2076:	80 b5       	in	r24, 0x20	; 32
  if((uint8_t) 0xff != oldValue) // Needs erase...
    2078:	8f 3f       	cpi	r24, 0xFF	; 255
    207a:	11 f4       	brne	.+4      	; 0x2080 <eeprom_smart_erase_byte(unsigned char*)+0x18>
    207c:	80 e0       	ldi	r24, 0x00	; 0
    207e:	08 95       	ret
    {
    ATOMIC_BLOCK (ATOMIC_RESTORESTATE) // Avoid timing problems from interrupts.
    2080:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2082:	f8 94       	cli
      {
      // Erase to 0xff; no write needed.
      EECR = _BV(EEMPE) | _BV(EEPM0); // Set master write-enable bit and erase-only mode.
    2084:	84 e1       	ldi	r24, 0x14	; 20
    2086:	8f bb       	out	0x1f, r24	; 31
      EECR |= _BV(EEPE);  // Start erase-only operation.
    2088:	f9 9a       	sbi	0x1f, 1	; 31
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    208a:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    208c:	81 e0       	ldi	r24, 0x01	; 1
      }
    return(true); // Performed the erase.
    }
  return(false);
#endif
  }
    208e:	08 95       	ret

00002090 <eeprom_smart_clear_bits(unsigned char*, unsigned char)>:
// If ANDing in the mask has no effect then this does nothing at all beyond an initial read.
// This saves a bit of time and power and possibly a little EEPROM cell wear also.
// Without split erase/write this degenerates to a specialised eeprom_smart_update_byte().
// As with the AVR eeprom_XXX_byte() macros, not safe to use outside and within ISRs as-is.
// Returns true iff a write was performed.
bool eeprom_smart_clear_bits(uint8_t *p, uint8_t mask)
    2090:	9c 01       	movw	r18, r24
  eeprom_write_byte(p, newValue); // Set to masked value.
  return(true); // Performed a write (and probably an erase, too).
#else

  // Wait until EEPROM is idle/ready.
  eeprom_busy_wait();
    2092:	f9 99       	sbic	0x1f, 1	; 31
    2094:	fe cf       	rjmp	.-4      	; 0x2092 <eeprom_smart_clear_bits(unsigned char*, unsigned char)+0x2>
  //     oldValue = eeprom_read_byte(p);
  // and leaves EEAR[L] set up appropriately for any erase or write.
#if E2END <= 0xFF
  EEARL = (uint8_t)p;
#else
  EEAR = (uint16_t)p;
    2096:	32 bd       	out	0x22, r19	; 34
    2098:	21 bd       	out	0x21, r18	; 33
#endif
  // Ignore problems that some AVRs have with EECR and STS instructions (ATmega64 errata).
  EECR = _BV(EERE); // Start EEPROM read operation.
    209a:	81 e0       	ldi	r24, 0x01	; 1
    209c:	8f bb       	out	0x1f, r24	; 31
  const uint8_t oldValue = EEDR; // Get old EEPROM value.
    209e:	80 b5       	in	r24, 0x20	; 32
  const uint8_t newValue = oldValue & mask;
    20a0:	68 23       	and	r22, r24
  if(oldValue != newValue) // Write is needed...
    20a2:	86 17       	cp	r24, r22
    20a4:	11 f4       	brne	.+4      	; 0x20aa <eeprom_smart_clear_bits(unsigned char*, unsigned char)+0x1a>
    20a6:	80 e0       	ldi	r24, 0x00	; 0
    20a8:	08 95       	ret
    {
    // Do the write: no erase is needed.
    EEDR = newValue; // Set EEPROM data register to required new value.
    20aa:	60 bd       	out	0x20, r22	; 32
    ATOMIC_BLOCK (ATOMIC_RESTORESTATE) // Avoid timing problems from interrupts.
    20ac:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    20ae:	f8 94       	cli
      {
      EECR = _BV(EEMPE) | _BV(EEPM1); // Set master write-enable bit and write-only mode.
    20b0:	84 e2       	ldi	r24, 0x24	; 36
    20b2:	8f bb       	out	0x1f, r24	; 31
      EECR |= _BV(EEPE);  // Start write-only operation.
    20b4:	f9 9a       	sbi	0x1f, 1	; 31
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    20b6:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    20b8:	81 e0       	ldi	r24, 0x01	; 1
      }
    return(true); // Performed the write.
    }
  return(false);
#endif
  }
    20ba:	08 95       	ret

000020bc <eeprom_smart_update_byte(unsigned char*, unsigned char)>:
// Updates an EEEPROM byte iff not currently at the specified target value.
// May be able to selectively erase or write (ie reduce wear) to reach the desired value.
// As with the AVR eeprom_XXX_byte() macros, not safe to use outside and within ISRs as-is.
// Returns true iff an erase and/or write was performed.
// TODO: make smarter, eg don't wait/read twice...
bool eeprom_smart_update_byte(uint8_t *p, uint8_t value)
    20bc:	78 2f       	mov	r23, r24
    20be:	e9 2f       	mov	r30, r25
  {
  // If target byte is 0xff then attempt smart erase rather than more generic write or erase+write.
  if((uint8_t) 0xff == value) { return(eeprom_smart_erase_byte(p)); }
    20c0:	6f 3f       	cpi	r22, 0xFF	; 255
    20c2:	19 f4       	brne	.+6      	; 0x20ca <eeprom_smart_update_byte(unsigned char*, unsigned char)+0xe>
    20c4:	0e 94 34 10 	call	0x2068	; 0x2068 <eeprom_smart_erase_byte(unsigned char*)>
    20c8:	08 95       	ret
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    20ca:	f9 99       	sbic	0x1f, 1	; 31
    20cc:	fe cf       	rjmp	.-4      	; 0x20ca <eeprom_smart_update_byte(unsigned char*, unsigned char)+0xe>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    20ce:	47 2f       	mov	r20, r23
    20d0:	5e 2f       	mov	r21, r30
    20d2:	52 bd       	out	0x22, r21	; 34
    20d4:	41 bd       	out	0x21, r20	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    20d6:	f8 9a       	sbi	0x1f, 0	; 31
    20d8:	80 b5       	in	r24, 0x20	; 32
  // More than an erase might be required...
  const uint8_t oldValue = eeprom_read_byte(p);
  if(value == oldValue) { return(false); } // No change needed.
    20da:	68 17       	cp	r22, r24
    20dc:	11 f4       	brne	.+4      	; 0x20e2 <eeprom_smart_update_byte(unsigned char*, unsigned char)+0x26>
    20de:	80 e0       	ldi	r24, 0x00	; 0
    20e0:	08 95       	ret
#ifdef EEPROM_SPLIT_ERASE_WRITE // Can do selective write.
  if(value == (value & oldValue)) { return(eeprom_smart_clear_bits(p, value)); } // Can use pure write to clear bits to zero.
    20e2:	26 2f       	mov	r18, r22
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	82 23       	and	r24, r18
    20ea:	93 23       	and	r25, r19
    20ec:	28 17       	cp	r18, r24
    20ee:	39 07       	cpc	r19, r25
    20f0:	29 f4       	brne	.+10     	; 0x20fc <eeprom_smart_update_byte(unsigned char*, unsigned char)+0x40>
    20f2:	87 2f       	mov	r24, r23
    20f4:	9e 2f       	mov	r25, r30
    20f6:	0e 94 48 10 	call	0x2090	; 0x2090 <eeprom_smart_clear_bits(unsigned char*, unsigned char)>
    20fa:	08 95       	ret
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    20fc:	f9 99       	sbic	0x1f, 1	; 31
    20fe:	fe cf       	rjmp	.-4      	; 0x20fc <eeprom_smart_update_byte(unsigned char*, unsigned char)+0x40>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    2100:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2102:	52 bd       	out	0x22, r21	; 34
    2104:	41 bd       	out	0x21, r20	; 33
#endif
    EEDR = __value;
    2106:	60 bd       	out	0x20, r22	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    2108:	0f b6       	in	r0, 0x3f	; 63
    210a:	f8 94       	cli
    210c:	fa 9a       	sbi	0x1f, 2	; 31
    210e:	f9 9a       	sbi	0x1f, 1	; 31
    2110:	0f be       	out	0x3f, r0	; 63
    2112:	81 e0       	ldi	r24, 0x01	; 1
#endif
  eeprom_write_byte(p, value); // Needs to set some (but not all) bits to 1, so needs erase and write.
  return(true); // Performed an update.
  }
    2114:	08 95       	ret

00002116 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>:
// bptr must be pointing at the current byte to update on entry which must start off as 0xff;
// this will write the byte and increment bptr (and write 0xff to the new location) if one is filled up.
// Partial byte can only have even number of bits present, ie be in one of 4 states.
// Two least significant bits used to indicate how many bit pairs are still to be filled,
// so initial 0xff value (which is never a valid complete filled byte) indicates 'empty'.
static uint8_t *_FHT8VCreate200usAppendEncBit(uint8_t *bptr, const bool is1)
    2116:	fc 01       	movw	r30, r24
  {
  const uint8_t bitPairsLeft = (*bptr) & 3; // Find out how many bit pairs are left to fill in the current byte.
    2118:	80 81       	ld	r24, Z
    211a:	98 2f       	mov	r25, r24
    211c:	93 70       	andi	r25, 0x03	; 3
  if(!is1) // Appending 1100.
    211e:	66 23       	and	r22, r22
    2120:	b1 f4       	brne	.+44     	; 0x214e <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x38>
    {
    switch(bitPairsLeft)
    2122:	92 30       	cpi	r25, 0x02	; 2
    2124:	51 f0       	breq	.+20     	; 0x213a <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x24>
    2126:	93 30       	cpi	r25, 0x03	; 3
    2128:	31 f0       	breq	.+12     	; 0x2136 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x20>
    212a:	9f 01       	movw	r18, r30
    212c:	2f 5f       	subi	r18, 0xFF	; 255
    212e:	3f 4f       	sbci	r19, 0xFF	; 255
    2130:	91 30       	cpi	r25, 0x01	; 1
    2132:	59 f4       	brne	.+22     	; 0x214a <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x34>
    2134:	05 c0       	rjmp	.+10     	; 0x2140 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x2a>
      {
      case 3: // Empty target byte (should be 0xff currently).
        *bptr = 0xcd; // %11001101 Write back partial byte (msbits now 1100 and two bit pairs remain free).
    2136:	8d ec       	ldi	r24, 0xCD	; 205
    2138:	25 c0       	rjmp	.+74     	; 0x2184 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      case 2: // Top bit pair already filled.
        *bptr = (*bptr & 0xc0) | 0x30; // Preserve existing ms bit-pair, set middle four bits 1100, one bit pair remains free.
    213a:	80 7c       	andi	r24, 0xC0	; 192
    213c:	80 63       	ori	r24, 0x30	; 48
    213e:	22 c0       	rjmp	.+68     	; 0x2184 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      case 1: // Top two bit pairs already filled.
        *bptr = (*bptr & 0xf0) | 0xc; // Preserve existing ms (2) bit-pairs, set bottom four bits 1100, write back full byte.
    2140:	80 7f       	andi	r24, 0xF0	; 240
    2142:	8c 60       	ori	r24, 0x0C	; 12
    2144:	80 83       	st	Z, r24
        *++bptr = (uint8_t) ~0U; // Initialise next byte for next incremental update.
    2146:	f9 01       	movw	r30, r18
    2148:	11 c0       	rjmp	.+34     	; 0x216c <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x56>
        break;
      default: // Top three bit pairs already filled.
        *bptr |= 3; // Preserve existing ms (3) bit-pairs, OR in leading 11 bits, write back full byte.
    214a:	83 60       	ori	r24, 0x03	; 3
    214c:	13 c0       	rjmp	.+38     	; 0x2174 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x5e>
        break;
      }
    }
  else // Appending 111000.
    {
    switch(bitPairsLeft)
    214e:	92 30       	cpi	r25, 0x02	; 2
    2150:	51 f0       	breq	.+20     	; 0x2166 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x50>
    2152:	93 30       	cpi	r25, 0x03	; 3
    2154:	31 f0       	breq	.+12     	; 0x2162 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x4c>
    2156:	9f 01       	movw	r18, r30
    2158:	2f 5f       	subi	r18, 0xFF	; 255
    215a:	3f 4f       	sbci	r19, 0xFF	; 255
    215c:	91 30       	cpi	r25, 0x01	; 1
    215e:	71 f4       	brne	.+28     	; 0x217c <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x66>
    2160:	07 c0       	rjmp	.+14     	; 0x2170 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x5a>
      {
      case 3: // Empty target byte (should be 0xff currently).
        *bptr = 0xe0; // %11100000 Write back partial byte (msbits now 111000 and one bit pair remains free).
    2162:	80 ee       	ldi	r24, 0xE0	; 224
    2164:	0f c0       	rjmp	.+30     	; 0x2184 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      case 2: // Top bit pair already filled.
        *bptr = (*bptr & 0xc0) | 0x38; // Preserve existing ms bit-pair, set lsbits to 111000, write back full byte.
    2166:	80 7c       	andi	r24, 0xC0	; 192
    2168:	88 63       	ori	r24, 0x38	; 56
    216a:	81 93       	st	Z+, r24
        *++bptr = (uint8_t) ~0U; // Initialise next byte for next incremental update.
    216c:	8f ef       	ldi	r24, 0xFF	; 255
    216e:	0a c0       	rjmp	.+20     	; 0x2184 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      case 1: // Top two bit pairs already filled.
        *bptr = (*bptr & 0xf0) | 0xe; // Preserve existing (2) ms bit-pairs, set bottom four bits to 1110, write back full byte.
    2170:	80 7f       	andi	r24, 0xF0	; 240
    2172:	8e 60       	ori	r24, 0x0E	; 14
    2174:	80 83       	st	Z, r24
        *++bptr = 0x3e; // %00111110 Write trailing 00 bits to next byte and indicate 3 bit-pairs free for next incremental update.
    2176:	f9 01       	movw	r30, r18
    2178:	8e e3       	ldi	r24, 0x3E	; 62
    217a:	04 c0       	rjmp	.+8      	; 0x2184 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      default: // Top three bit pairs already filled.
        *bptr |= 3; // Preserve existing ms (3) bit-pairs, OR in leading 11 bits, write back full byte.
    217c:	83 60       	ori	r24, 0x03	; 3
    217e:	80 83       	st	Z, r24
        *++bptr = 0x8d; // Write trailing 1000 bits to next byte and indicate 2 bit-pairs free for next incremental update.
    2180:	f9 01       	movw	r30, r18
    2182:	8d e8       	ldi	r24, 0x8D	; 141
    2184:	80 83       	st	Z, r24
        break;
      }
    }
  return(bptr);
  }
    2186:	cf 01       	movw	r24, r30
    2188:	08 95       	ret

0000218a <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>:

// Appends encoded byte in b msbit first plus trailing even parity bit (9 bits total)
// to the byte stream being created by FHT8VCreate200usBitStreamBptr.
static uint8_t *_FHT8VCreate200usAppendByteEP(uint8_t *bptr, const uint8_t b)
    218a:	ef 92       	push	r14
    218c:	ff 92       	push	r15
    218e:	0f 93       	push	r16
    2190:	1f 93       	push	r17
    2192:	cf 93       	push	r28
    2194:	df 93       	push	r29
    2196:	9c 01       	movw	r18, r24
    2198:	16 2f       	mov	r17, r22
    219a:	00 e8       	ldi	r16, 0x80	; 128
    219c:	c0 e0       	ldi	r28, 0x00	; 0
    219e:	d0 e0       	ldi	r29, 0x00	; 0
  {
  for(uint8_t mask = 0x80; mask != 0; mask >>= 1)
    { bptr = _FHT8VCreate200usAppendEncBit(bptr, 0 != (b & mask)); }
    21a0:	e6 2e       	mov	r14, r22
    21a2:	ff 24       	eor	r15, r15
    21a4:	60 e0       	ldi	r22, 0x00	; 0
    21a6:	80 2f       	mov	r24, r16
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	8e 21       	and	r24, r14
    21ac:	9f 21       	and	r25, r15
    21ae:	89 2b       	or	r24, r25
    21b0:	09 f0       	breq	.+2      	; 0x21b4 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)+0x2a>
    21b2:	61 e0       	ldi	r22, 0x01	; 1
    21b4:	c9 01       	movw	r24, r18
    21b6:	0e 94 8b 10 	call	0x2116	; 0x2116 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
    21ba:	9c 01       	movw	r18, r24

// Appends encoded byte in b msbit first plus trailing even parity bit (9 bits total)
// to the byte stream being created by FHT8VCreate200usBitStreamBptr.
static uint8_t *_FHT8VCreate200usAppendByteEP(uint8_t *bptr, const uint8_t b)
  {
  for(uint8_t mask = 0x80; mask != 0; mask >>= 1)
    21bc:	06 95       	lsr	r16
    21be:	21 96       	adiw	r28, 0x01	; 1
    21c0:	c8 30       	cpi	r28, 0x08	; 8
    21c2:	d1 05       	cpc	r29, r1
    21c4:	79 f7       	brne	.-34     	; 0x21a4 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)+0x1a>
    { bptr = _FHT8VCreate200usAppendEncBit(bptr, 0 != (b & mask)); }
  return(_FHT8VCreate200usAppendEncBit(bptr, (bool) parity_even_bit(b))); // Append even parity bit.
    21c6:	01 2e       	mov	r0, r17
    21c8:	12 95       	swap	r17
    21ca:	10 25       	eor	r17, r0
    21cc:	01 2e       	mov	r0, r17
    21ce:	16 95       	lsr	r17
    21d0:	16 95       	lsr	r17
    21d2:	10 25       	eor	r17, r0
    21d4:	61 2f       	mov	r22, r17
    21d6:	70 e0       	ldi	r23, 0x00	; 0
    21d8:	6f 5f       	subi	r22, 0xFF	; 255
    21da:	7f 4f       	sbci	r23, 0xFF	; 255
    21dc:	76 95       	lsr	r23
    21de:	67 95       	ror	r22
    21e0:	61 70       	andi	r22, 0x01	; 1
    21e2:	c9 01       	movw	r24, r18
    21e4:	0e 94 8b 10 	call	0x2116	; 0x2116 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
  }
    21e8:	df 91       	pop	r29
    21ea:	cf 91       	pop	r28
    21ec:	1f 91       	pop	r17
    21ee:	0f 91       	pop	r16
    21f0:	ff 90       	pop	r15
    21f2:	ef 90       	pop	r14
    21f4:	08 95       	ret

000021f6 <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>:
// On entry the populated FHT8V command struct is passed by pointer.
// On exit, the memory block starting at buffer contains the low-byte, msbit-first bit, 0xff-terminated TX sequence.
// The maximum and minimum possible encoded message sizes are 35 (all zero bytes) and 45 (all 0xff bytes) bytes long.
// Note that a buffer space of at least 46 bytes is needed to accommodate the longest-possible encoded message and terminator.
// Returns pointer to the terminating 0xff on exit.
uint8_t *FHT8VCreate200usBitStreamBptr(uint8_t *bptr, const fht8v_msg_t *command)
    21f6:	ff 92       	push	r15
    21f8:	0f 93       	push	r16
    21fa:	1f 93       	push	r17
    21fc:	dc 01       	movw	r26, r24
    21fe:	8b 01       	movw	r16, r22
  {
  // Generate FHT8V preamble.
  // First 12 x 0 bits of preamble, pre-encoded as 6 x 0xcc bytes.
  *bptr++ = 0xcc;
    2200:	8c ec       	ldi	r24, 0xCC	; 204
    2202:	fd 01       	movw	r30, r26
    2204:	81 93       	st	Z+, r24
  *bptr++ = 0xcc;
    2206:	11 96       	adiw	r26, 0x01	; 1
    2208:	8c 93       	st	X, r24
    220a:	df 01       	movw	r26, r30
    220c:	11 96       	adiw	r26, 0x01	; 1
  *bptr++ = 0xcc;
    220e:	81 83       	std	Z+1, r24	; 0x01
    2210:	fd 01       	movw	r30, r26
    2212:	31 96       	adiw	r30, 0x01	; 1
  *bptr++ = 0xcc;
    2214:	11 96       	adiw	r26, 0x01	; 1
    2216:	8c 93       	st	X, r24
    2218:	df 01       	movw	r26, r30
    221a:	11 96       	adiw	r26, 0x01	; 1
  *bptr++ = 0xcc;
    221c:	81 83       	std	Z+1, r24	; 0x01
    221e:	fd 01       	movw	r30, r26
    2220:	31 96       	adiw	r30, 0x01	; 1
  *bptr++ = 0xcc;
    2222:	11 96       	adiw	r26, 0x01	; 1
    2224:	8c 93       	st	X, r24
  *bptr = (uint8_t) ~0U; // Initialise for _FHT8VCreate200usAppendEncBit routine.
    2226:	ff 24       	eor	r15, r15
    2228:	fa 94       	dec	r15
    222a:	f1 82       	std	Z+1, r15	; 0x01
  // Push remaining 1 of preamble.
  bptr = _FHT8VCreate200usAppendEncBit(bptr, true); // Encode 1.
    222c:	cf 01       	movw	r24, r30
    222e:	01 96       	adiw	r24, 0x01	; 1
    2230:	61 e0       	ldi	r22, 0x01	; 1
    2232:	0e 94 8b 10 	call	0x2116	; 0x2116 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>

  // Generate body.
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->hc1);
    2236:	f8 01       	movw	r30, r16
    2238:	60 81       	ld	r22, Z
    223a:	0e 94 c5 10 	call	0x218a	; 0x218a <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->hc2);
    223e:	f8 01       	movw	r30, r16
    2240:	61 81       	ldd	r22, Z+1	; 0x01
    2242:	0e 94 c5 10 	call	0x218a	; 0x218a <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
#ifdef FHT8V_ADR_USED
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->address);
#else
  bptr = _FHT8VCreate200usAppendByteEP(bptr, 0); // Default/broadcast.  TODO: could possibly be further optimised to send 0 value more efficiently.
    2246:	60 e0       	ldi	r22, 0x00	; 0
    2248:	0e 94 c5 10 	call	0x218a	; 0x218a <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
#endif
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->command);
    224c:	f8 01       	movw	r30, r16
    224e:	62 81       	ldd	r22, Z+2	; 0x02
    2250:	0e 94 c5 10 	call	0x218a	; 0x218a <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->extension);
    2254:	f8 01       	movw	r30, r16
    2256:	63 81       	ldd	r22, Z+3	; 0x03
    2258:	0e 94 c5 10 	call	0x218a	; 0x218a <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
#ifdef FHT8V_ADR_USED
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + command->address + command->command + command->extension;
#else
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + command->command + command->extension;
#endif
  bptr = _FHT8VCreate200usAppendByteEP(bptr, checksum);
    225c:	f8 01       	movw	r30, r16
    225e:	60 81       	ld	r22, Z
    2260:	21 81       	ldd	r18, Z+1	; 0x01
    2262:	62 0f       	add	r22, r18
    2264:	64 5f       	subi	r22, 0xF4	; 244
    2266:	22 81       	ldd	r18, Z+2	; 0x02
    2268:	62 0f       	add	r22, r18
    226a:	23 81       	ldd	r18, Z+3	; 0x03
    226c:	62 0f       	add	r22, r18
    226e:	0e 94 c5 10 	call	0x218a	; 0x218a <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>

  // Generate trailer.
  // Append 0 bit for trailer.
  bptr = _FHT8VCreate200usAppendEncBit(bptr, false);
    2272:	60 e0       	ldi	r22, 0x00	; 0
    2274:	0e 94 8b 10 	call	0x2116	; 0x2116 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
  // Append extra 0 bits to ensure that final required bits are flushed out.
  bptr = _FHT8VCreate200usAppendEncBit(bptr, false);
    2278:	60 e0       	ldi	r22, 0x00	; 0
    227a:	0e 94 8b 10 	call	0x2116	; 0x2116 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
  bptr = _FHT8VCreate200usAppendEncBit(bptr, false);
    227e:	60 e0       	ldi	r22, 0x00	; 0
    2280:	0e 94 8b 10 	call	0x2116	; 0x2116 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
    2284:	fc 01       	movw	r30, r24
  *bptr = (uint8_t)0xff; // Terminate TX bytes.
    2286:	f0 82       	st	Z, r15
  return(bptr);
  }
    2288:	1f 91       	pop	r17
    228a:	0f 91       	pop	r16
    228c:	ff 90       	pop	r15
    228e:	08 95       	ret

00002290 <FHT8VGetHC1()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2290:	f9 99       	sbic	0x1f, 1	; 31
    2292:	fe cf       	rjmp	.-4      	; 0x2290 <FHT8VGetHC1()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2294:	80 e1       	ldi	r24, 0x10	; 16
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	92 bd       	out	0x22, r25	; 34
    229a:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    229c:	f8 9a       	sbi	0x1f, 0	; 31
    229e:	80 b5       	in	r24, 0x20	; 32
// Set (non-volatile) HC1 and HC2 for single/primary FHT8V wireless valve under control.
void FHT8VSetHC1(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC1, hc); }
void FHT8VSetHC2(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC2, hc); }

// Get (non-volatile) HC1 and HC2 for single/primary FHT8V wireless valve under control (will be 0xff until set).
uint8_t FHT8VGetHC1() { return(eeprom_read_byte((uint8_t*)EE_START_FHT8V_HC1)); }
    22a0:	08 95       	ret

000022a2 <FHT8VGetHC2()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    22a2:	f9 99       	sbic	0x1f, 1	; 31
    22a4:	fe cf       	rjmp	.-4      	; 0x22a2 <FHT8VGetHC2()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    22a6:	81 e1       	ldi	r24, 0x11	; 17
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	92 bd       	out	0x22, r25	; 34
    22ac:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    22ae:	f8 9a       	sbi	0x1f, 0	; 31
    22b0:	80 b5       	in	r24, 0x20	; 32
uint8_t FHT8VGetHC2() { return(eeprom_read_byte((uint8_t*)EE_START_FHT8V_HC2)); }
    22b2:	08 95       	ret

000022b4 <localFHT8VTRVEnabled()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    22b4:	f9 99       	sbic	0x1f, 1	; 31
    22b6:	fe cf       	rjmp	.-4      	; 0x22b4 <localFHT8VTRVEnabled()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    22b8:	80 e1       	ldi	r24, 0x10	; 16
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	92 bd       	out	0x22, r25	; 34
    22be:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    22c0:	f8 9a       	sbi	0x1f, 0	; 31
    22c2:	80 b5       	in	r24, 0x20	; 32

#ifndef localFHT8VTRVEnabled
// Returns TRV if valve/radiator is to be controlled by this unit.
// Usually the case, but may not be for (a) a hub or (b) a not-yet-configured unit.
// Returns false if house code parts are set to invalid or uninitialised values (>99).
bool localFHT8VTRVEnabled() { return(((FHT8VGetHC1() <= 99) && (FHT8VGetHC2() <= 99))); }
    22c4:	84 36       	cpi	r24, 0x64	; 100
    22c6:	10 f0       	brcs	.+4      	; 0x22cc <localFHT8VTRVEnabled()+0x18>
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	0c c0       	rjmp	.+24     	; 0x22e4 <localFHT8VTRVEnabled()+0x30>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    22cc:	f9 99       	sbic	0x1f, 1	; 31
    22ce:	fe cf       	rjmp	.-4      	; 0x22cc <localFHT8VTRVEnabled()+0x18>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    22d0:	81 e1       	ldi	r24, 0x11	; 17
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	92 bd       	out	0x22, r25	; 34
    22d6:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    22d8:	f8 9a       	sbi	0x1f, 0	; 31
    22da:	80 b5       	in	r24, 0x20	; 32
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	84 36       	cpi	r24, 0x64	; 100
    22e0:	08 f4       	brcc	.+2      	; 0x22e4 <localFHT8VTRVEnabled()+0x30>
    22e2:	91 e0       	ldi	r25, 0x01	; 1
    22e4:	89 2f       	mov	r24, r25
    22e6:	08 95       	ret

000022e8 <isSyncedWithFHT8V()>:
  }

// True once/while this node is synced with and controlling the target FHT8V valve; initially false.
static bool syncedWithFHT8V;
#ifndef IGNORE_FHT_SYNC
bool isSyncedWithFHT8V() { return(syncedWithFHT8V); }
    22e8:	80 91 de 02 	lds	r24, 0x02DE
    22ec:	08 95       	ret

000022ee <FHT8VisControlledValveOpen()>:
#endif


// True if FHT8V valve is believed to be open under instruction from this system; false if not in sync.
static bool FHT8V_isValveOpen;
bool getFHT8V_isValveOpen() { return(syncedWithFHT8V && FHT8V_isValveOpen); }
    22ee:	80 91 de 02 	lds	r24, 0x02DE
    22f2:	88 23       	and	r24, r24
    22f4:	21 f0       	breq	.+8      	; 0x22fe <FHT8VisControlledValveOpen()+0x10>
    22f6:	80 91 1d 03 	lds	r24, 0x031D
    22fa:	81 11       	cpse	r24, r1
    22fc:	81 e0       	ldi	r24, 0x01	; 1


// GLOBAL NOTION OF CONTROLLED FHT8V VALVE STATE PROVIDED HERE
// True iff the FHT8V valve(s) (if any) controlled by this unit are really open.
// This waits until at least the command to open the FHT8Vhas been sent.
bool FHT8VisControlledValveOpen() { return(getFHT8V_isValveOpen()); }
    22fe:	08 95       	ret

00002300 <FHT8VSyncAndTXReset()>:
//   FHT8V_isValveOpen (bit, true if this node has last sent command to open valve)
//   syncStateFHT8V (byte, internal)
//   halfSecondsToNextFHT8VTX (byte).
void FHT8VSyncAndTXReset()
  {
  syncedWithFHT8V = false;
    2300:	10 92 de 02 	sts	0x02DE, r1
  syncStateFHT8V = 0;
    2304:	10 92 e0 02 	sts	0x02E0, r1
  halfSecondsToNextFHT8VTX = 0;
    2308:	10 92 df 02 	sts	0x02DF, r1
  FHT8V_isValveOpen = false;
    230c:	10 92 1d 03 	sts	0x031D, r1
  }
    2310:	08 95       	ret

00002312 <FHT8VCallForHeatHeardGetAndClear()>:
  }

// Atomically returns and clears one housecode calling for heat heard since last call, or ~0 if none.
uint16_t FHT8VCallForHeatHeardGetAndClear()
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    2312:	4f b7       	in	r20, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2314:	f8 94       	cli
    {
    const uint16_t result = lastCallForHeatHC;
    2316:	20 91 39 01 	lds	r18, 0x0139
    231a:	30 91 3a 01 	lds	r19, 0x013A
    lastCallForHeatHC = ~0;
    231e:	8f ef       	ldi	r24, 0xFF	; 255
    2320:	9f ef       	ldi	r25, 0xFF	; 255
    2322:	90 93 3a 01 	sts	0x013A, r25
    2326:	80 93 39 01 	sts	0x0139, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    232a:	4f bf       	out	0x3f, r20	; 63
    return(result);
    }
    return(~0); // Not reachable.
  }
    232c:	c9 01       	movw	r24, r18
    232e:	08 95       	ret

00002330 <FHT8VLastRXErrGetAndClear()>:

// Atomically returns and clears last (FHT8V) RX error code, or 0 if none.
uint8_t FHT8VLastRXErrGetAndClear()
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    2330:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2332:	f8 94       	cli
    {
    const uint8_t result = lastRXerrno;
    2334:	80 91 9d 02 	lds	r24, 0x029D
    lastRXerrno = 0;
    2338:	10 92 9d 02 	sts	0x029D, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    233c:	9f bf       	out	0x3f, r25	; 63
    return(result);
    }
  return(0); // Not reachable.
  }
    233e:	08 95       	ret

00002340 <StopEavesdropOnFHT8V(bool)>:
// Stop listening out for remote TRVs calling for heat iff currently eavesdropping, else does nothing.
// Puts radio in standby mode.
// DOES NOT clear flags which indicate that a call for heat has been heard.
void StopEavesdropOnFHT8V(bool force)
  {
  if(!force && !eavesdropping) { return; }
    2340:	88 23       	and	r24, r24
    2342:	21 f4       	brne	.+8      	; 0x234c <StopEavesdropOnFHT8V(bool)+0xc>
    2344:	80 91 9e 02 	lds	r24, 0x029E
    2348:	88 23       	and	r24, r24
    234a:	21 f0       	breq	.+8      	; 0x2354 <StopEavesdropOnFHT8V(bool)+0x14>
  eavesdropping = false;
    234c:	10 92 9e 02 	sts	0x029E, r1
  RFM22ModeStandbyAndClearState();
    2350:	0e 94 60 23 	call	0x46c0	; 0x46c0 <RFM22ModeStandbyAndClearState()>
    2354:	08 95       	ret

00002356 <_SetupRFM22ToEavesdropOnFHT8V()>:
static void setLastRXErr(const uint8_t err) { ATOMIC_BLOCK (ATOMIC_RESTORESTATE) { lastRXerrno = err; } }


static void _SetupRFM22ToEavesdropOnFHT8V()
  {
  RFM22ModeStandbyAndClearState();
    2356:	0e 94 60 23 	call	0x46c0	; 0x46c0 <RFM22ModeStandbyAndClearState()>
  RFM22SetUpRX(MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE, true, true); // Set to RX longest-possible valid FS20 encoded frame.
    235a:	8e e2       	ldi	r24, 0x2E	; 46
    235c:	61 e0       	ldi	r22, 0x01	; 1
    235e:	41 e0       	ldi	r20, 0x01	; 1
    2360:	0e 94 3e 22 	call	0x447c	; 0x447c <RFM22SetUpRX(unsigned char, bool, bool)>
#error Board revision not defined.
#endif
#if V0p2_REV > 0
// TODO: hook into interrupts?
#endif
  }
    2364:	08 95       	ret

00002366 <SetupToEavesdropOnFHT8V(bool)>:

// Set up radio to listen for remote TRV nodes calling for heat iff not already eavesdropping, else does nothing.
// Only done if in central hub mode.
// May set up interrupts/handlers.
// Does NOT clear flags indicating receipt of call for heat for example.
bool SetupToEavesdropOnFHT8V(const bool force)
    2366:	0f 93       	push	r16
    2368:	1f 93       	push	r17
  {
  if(!force && eavesdropping) { return(false); } // Already eavesdropping.
    236a:	88 23       	and	r24, r24
    236c:	41 f4       	brne	.+16     	; 0x237e <SetupToEavesdropOnFHT8V(bool)+0x18>
    236e:	80 91 9e 02 	lds	r24, 0x029E
    2372:	88 23       	and	r24, r24
    2374:	21 f0       	breq	.+8      	; 0x237e <SetupToEavesdropOnFHT8V(bool)+0x18>
    2376:	80 e0       	ldi	r24, 0x00	; 0
  _SetupRFM22ToEavesdropOnFHT8V();
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("RX start");
#endif
  return(!wasEavesdropping);
  }
    2378:	1f 91       	pop	r17
    237a:	0f 91       	pop	r16
    237c:	08 95       	ret
// May set up interrupts/handlers.
// Does NOT clear flags indicating receipt of call for heat for example.
bool SetupToEavesdropOnFHT8V(const bool force)
  {
  if(!force && eavesdropping) { return(false); } // Already eavesdropping.
  const bool wasEavesdropping = eavesdropping;
    237e:	00 91 9e 02 	lds	r16, 0x029E
  eavesdropping = true;
    2382:	11 e0       	ldi	r17, 0x01	; 1
    2384:	10 93 9e 02 	sts	0x029E, r17
  _SetupRFM22ToEavesdropOnFHT8V();
    2388:	0e 94 ab 11 	call	0x2356	; 0x2356 <_SetupRFM22ToEavesdropOnFHT8V()>
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("RX start");
#endif
  return(!wasEavesdropping);
    238c:	80 2f       	mov	r24, r16
    238e:	81 27       	eor	r24, r17
    2390:	f3 cf       	rjmp	.-26     	; 0x2378 <SetupToEavesdropOnFHT8V(bool)+0x12>

00002392 <readOneBit(decode_state_t*)>:
  } decode_state_t;

// Decode bit pattern 1100 as 0, 111000 as 1.
// Returns 1 or 0 for the bit decoded, else marks the state as failed.
// Reads two bits at a time, MSB to LSB, advancing the byte pointer if necessary.
static uint8_t readOneBit(decode_state_t *const state)
    2392:	cf 93       	push	r28
    2394:	df 93       	push	r29
    2396:	ec 01       	movw	r28, r24
  {
  if(state->bitStream > state->lastByte) { state->failed = true; } // Stop if off the buffer end.
    2398:	28 81       	ld	r18, Y
    239a:	39 81       	ldd	r19, Y+1	; 0x01
    239c:	8a 81       	ldd	r24, Y+2	; 0x02
    239e:	9b 81       	ldd	r25, Y+3	; 0x03
    23a0:	82 17       	cp	r24, r18
    23a2:	93 07       	cpc	r25, r19
    23a4:	10 f4       	brcc	.+4      	; 0x23aa <readOneBit(decode_state_t*)+0x18>
    23a6:	81 e0       	ldi	r24, 0x01	; 1
    23a8:	8d 83       	std	Y+5, r24	; 0x05
  if(state->failed) { return(0); } // Refuse to do anything further once decoding has failed.
    23aa:	8d 81       	ldd	r24, Y+5	; 0x05
    23ac:	88 23       	and	r24, r24
    23ae:	09 f0       	breq	.+2      	; 0x23b2 <readOneBit(decode_state_t*)+0x20>
    23b0:	7e c0       	rjmp	.+252    	; 0x24ae <readOneBit(decode_state_t*)+0x11c>

  if(0 == state->mask) { state->mask = 0xc0; } // Special treatment of 0 as equivalent to 0xc0 on entry.
    23b2:	8c 81       	ldd	r24, Y+4	; 0x04
    23b4:	88 23       	and	r24, r24
    23b6:	11 f4       	brne	.+4      	; 0x23bc <readOneBit(decode_state_t*)+0x2a>
    23b8:	80 ec       	ldi	r24, 0xC0	; 192
    23ba:	8c 83       	std	Y+4, r24	; 0x04
#if defined(DEBUG)
  if((state->mask != 0xc0) && (state->mask != 0x30) && (state->mask != 0xc) && (state->mask != 3)) { panic(); }
    23bc:	8c 81       	ldd	r24, Y+4	; 0x04
    23be:	80 3c       	cpi	r24, 0xC0	; 192
    23c0:	41 f0       	breq	.+16     	; 0x23d2 <readOneBit(decode_state_t*)+0x40>
    23c2:	80 33       	cpi	r24, 0x30	; 48
    23c4:	31 f0       	breq	.+12     	; 0x23d2 <readOneBit(decode_state_t*)+0x40>
    23c6:	8c 30       	cpi	r24, 0x0C	; 12
    23c8:	21 f0       	breq	.+8      	; 0x23d2 <readOneBit(decode_state_t*)+0x40>
    23ca:	83 30       	cpi	r24, 0x03	; 3
    23cc:	11 f0       	breq	.+4      	; 0x23d2 <readOneBit(decode_state_t*)+0x40>
    23ce:	0e 94 db 2f 	call	0x5fb6	; 0x5fb6 <panic()>
#endif

  // First two bits read must be 11.
  if(state->mask != (state->mask & *(state->bitStream)))
    23d2:	8c 81       	ldd	r24, Y+4	; 0x04
    23d4:	28 2f       	mov	r18, r24
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	e8 81       	ld	r30, Y
    23da:	f9 81       	ldd	r31, Y+1	; 0x01
    23dc:	80 81       	ld	r24, Z
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	82 23       	and	r24, r18
    23e2:	93 23       	and	r25, r19
    23e4:	28 17       	cp	r18, r24
    23e6:	39 07       	cpc	r19, r25
    23e8:	09 f0       	breq	.+2      	; 0x23ec <readOneBit(decode_state_t*)+0x5a>
    23ea:	51 c0       	rjmp	.+162    	; 0x248e <readOneBit(decode_state_t*)+0xfc>
#endif
    state->failed = true; return(0);
    }

  // Advance the mask; if the mask becomes 0 (then 0xc0 again) then advance the byte pointer.
  if(0 == ((state->mask) >>= 2))
    23ec:	c9 01       	movw	r24, r18
    23ee:	95 95       	asr	r25
    23f0:	87 95       	ror	r24
    23f2:	95 95       	asr	r25
    23f4:	87 95       	ror	r24
    23f6:	8c 83       	std	Y+4, r24	; 0x04
    23f8:	88 23       	and	r24, r24
    23fa:	61 f4       	brne	.+24     	; 0x2414 <readOneBit(decode_state_t*)+0x82>
    {
    state->mask = 0xc0;
    23fc:	80 ec       	ldi	r24, 0xC0	; 192
    23fe:	8c 83       	std	Y+4, r24	; 0x04
    // If end of stream is encountered this is an error since more bits need to be read.
    if(++(state->bitStream) > state->lastByte) { state->failed = true; return(0); }
    2400:	9f 01       	movw	r18, r30
    2402:	2f 5f       	subi	r18, 0xFF	; 255
    2404:	3f 4f       	sbci	r19, 0xFF	; 255
    2406:	39 83       	std	Y+1, r19	; 0x01
    2408:	28 83       	st	Y, r18
    240a:	8a 81       	ldd	r24, Y+2	; 0x02
    240c:	9b 81       	ldd	r25, Y+3	; 0x03
    240e:	82 17       	cp	r24, r18
    2410:	93 07       	cpc	r25, r19
    2412:	e8 f1       	brcs	.+122    	; 0x248e <readOneBit(decode_state_t*)+0xfc>
    }

  // Next two bits can be 00 to decode a zero,
  // or 10 (followed by 00) to decode a one.
  const uint8_t secondPair = (state->mask & *(state->bitStream));
    2414:	8c 81       	ldd	r24, Y+4	; 0x04
  switch(secondPair)
    2416:	e8 81       	ld	r30, Y
    2418:	f9 81       	ldd	r31, Y+1	; 0x01
    241a:	20 81       	ld	r18, Z
    241c:	28 23       	and	r18, r24
    241e:	28 30       	cpi	r18, 0x08	; 8
    2420:	c1 f0       	breq	.+48     	; 0x2452 <readOneBit(decode_state_t*)+0xc0>
    2422:	29 30       	cpi	r18, 0x09	; 9
    2424:	28 f4       	brcc	.+10     	; 0x2430 <readOneBit(decode_state_t*)+0x9e>
    2426:	22 23       	and	r18, r18
    2428:	41 f0       	breq	.+16     	; 0x243a <readOneBit(decode_state_t*)+0xa8>
    242a:	22 30       	cpi	r18, 0x02	; 2
    242c:	81 f5       	brne	.+96     	; 0x248e <readOneBit(decode_state_t*)+0xfc>
    242e:	11 c0       	rjmp	.+34     	; 0x2452 <readOneBit(decode_state_t*)+0xc0>
    2430:	20 32       	cpi	r18, 0x20	; 32
    2432:	79 f0       	breq	.+30     	; 0x2452 <readOneBit(decode_state_t*)+0xc0>
    2434:	20 38       	cpi	r18, 0x80	; 128
    2436:	59 f5       	brne	.+86     	; 0x248e <readOneBit(decode_state_t*)+0xfc>
    2438:	0c c0       	rjmp	.+24     	; 0x2452 <readOneBit(decode_state_t*)+0xc0>
      {
#if 0 && defined(DEBUG)
      DEBUG_SERIAL_PRINTLN_FLASHSTRING("decoded 0");
#endif
      // Advance the mask; if the mask becomes 0 then advance the byte pointer.
      if(0 == ((state->mask) >>= 2)) { ++(state->bitStream); }
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	95 95       	asr	r25
    243e:	87 95       	ror	r24
    2440:	95 95       	asr	r25
    2442:	87 95       	ror	r24
    2444:	8c 83       	std	Y+4, r24	; 0x04
    2446:	88 23       	and	r24, r24
    2448:	91 f5       	brne	.+100    	; 0x24ae <readOneBit(decode_state_t*)+0x11c>
    244a:	31 96       	adiw	r30, 0x01	; 1
    244c:	f9 83       	std	Y+1, r31	; 0x01
    244e:	e8 83       	st	Y, r30
    2450:	2f c0       	rjmp	.+94     	; 0x24b0 <readOneBit(decode_state_t*)+0x11e>
      state->failed = true; return(0);
      }
    }

  // Advance the mask; if the mask becomes 0 (then 0xc0 again) then advance the byte pointer.
  if(0 == ((state->mask) >>= 2))
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	95 95       	asr	r25
    2456:	87 95       	ror	r24
    2458:	95 95       	asr	r25
    245a:	87 95       	ror	r24
    245c:	8c 83       	std	Y+4, r24	; 0x04
    245e:	88 23       	and	r24, r24
    2460:	61 f4       	brne	.+24     	; 0x247a <readOneBit(decode_state_t*)+0xe8>
    {
    state->mask = 0xc0;
    2462:	80 ec       	ldi	r24, 0xC0	; 192
    2464:	8c 83       	std	Y+4, r24	; 0x04
    // If end of stream is encountered this is an error since more bits need to be read.
    if(++(state->bitStream) > state->lastByte) { state->failed = true; return(0); }
    2466:	88 81       	ld	r24, Y
    2468:	99 81       	ldd	r25, Y+1	; 0x01
    246a:	01 96       	adiw	r24, 0x01	; 1
    246c:	99 83       	std	Y+1, r25	; 0x01
    246e:	88 83       	st	Y, r24
    2470:	2a 81       	ldd	r18, Y+2	; 0x02
    2472:	3b 81       	ldd	r19, Y+3	; 0x03
    2474:	28 17       	cp	r18, r24
    2476:	39 07       	cpc	r19, r25
    2478:	50 f0       	brcs	.+20     	; 0x248e <readOneBit(decode_state_t*)+0xfc>
    }

  // Third pair of bits must be 00.
  if(0 != (state->mask & *(state->bitStream)))
    247a:	2c 81       	ldd	r18, Y+4	; 0x04
    247c:	e8 81       	ld	r30, Y
    247e:	f9 81       	ldd	r31, Y+1	; 0x01
    2480:	80 81       	ld	r24, Z
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	82 23       	and	r24, r18
    2488:	93 23       	and	r25, r19
    248a:	89 2b       	or	r24, r25
    248c:	19 f0       	breq	.+6      	; 0x2494 <readOneBit(decode_state_t*)+0x102>
     {
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("trailing 00 corrupt");
#endif
    state->failed = true; return(0);
    248e:	81 e0       	ldi	r24, 0x01	; 1
    2490:	8d 83       	std	Y+5, r24	; 0x05
    2492:	0d c0       	rjmp	.+26     	; 0x24ae <readOneBit(decode_state_t*)+0x11c>
    }    

  // Advance the mask; if the mask becomes 0 then advance the byte pointer.
  if(0 == ((state->mask) >>= 2)) { ++(state->bitStream); }
    2494:	c9 01       	movw	r24, r18
    2496:	95 95       	asr	r25
    2498:	87 95       	ror	r24
    249a:	95 95       	asr	r25
    249c:	87 95       	ror	r24
    249e:	8c 83       	std	Y+4, r24	; 0x04
    24a0:	88 23       	and	r24, r24
    24a2:	19 f4       	brne	.+6      	; 0x24aa <readOneBit(decode_state_t*)+0x118>
    24a4:	31 96       	adiw	r30, 0x01	; 1
    24a6:	f9 83       	std	Y+1, r31	; 0x01
    24a8:	e8 83       	st	Y, r30
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	01 c0       	rjmp	.+2      	; 0x24b0 <readOneBit(decode_state_t*)+0x11e>
    24ae:	80 e0       	ldi	r24, 0x00	; 0
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("decoded 1");
#endif
  return(1); // Decoded a 1.
  }
    24b0:	df 91       	pop	r29
    24b2:	cf 91       	pop	r28
    24b4:	08 95       	ret

000024b6 <readOneByteWithParity(decode_state_t*)>:

// Decodes a series of encoded bits plus parity (and checks the parity, failing if wrong).
// Returns the byte decoded, else marks the state as failed.
static uint8_t readOneByteWithParity(decode_state_t *const state)
    24b6:	ef 92       	push	r14
    24b8:	ff 92       	push	r15
    24ba:	0f 93       	push	r16
    24bc:	1f 93       	push	r17
    24be:	cf 93       	push	r28
    24c0:	df 93       	push	r29
    24c2:	7c 01       	movw	r14, r24
  {
  if(state->failed) { return(0); } // Refuse to do anything further once decoding has failed.
    24c4:	fc 01       	movw	r30, r24
    24c6:	85 81       	ldd	r24, Z+5	; 0x05
    24c8:	88 23       	and	r24, r24
    24ca:	11 f0       	breq	.+4      	; 0x24d0 <readOneByteWithParity(decode_state_t*)+0x1a>
    24cc:	10 e0       	ldi	r17, 0x00	; 0
    24ce:	1b c0       	rjmp	.+54     	; 0x2506 <readOneByteWithParity(decode_state_t*)+0x50>

  // Read first bit specially...
  const uint8_t b7 = readOneBit(state); 
    24d0:	c7 01       	movw	r24, r14
    24d2:	0e 94 c9 11 	call	0x2392	; 0x2392 <readOneBit(decode_state_t*)>
    24d6:	18 2f       	mov	r17, r24
    24d8:	08 2f       	mov	r16, r24
    24da:	c7 e0       	ldi	r28, 0x07	; 7
    24dc:	d0 e0       	ldi	r29, 0x00	; 0
    24de:	06 c0       	rjmp	.+12     	; 0x24ec <readOneByteWithParity(decode_state_t*)+0x36>
  uint8_t result = b7;
  uint8_t parity = b7;
  // Then remaining 7 bits...
  for(int i = 7; --i >= 0; )
    {
    const uint8_t bit = readOneBit(state);
    24e0:	c7 01       	movw	r24, r14
    24e2:	0e 94 c9 11 	call	0x2392	; 0x2392 <readOneBit(decode_state_t*)>
    parity ^= bit;
    24e6:	08 27       	eor	r16, r24
    result = (result << 1) | bit;
    24e8:	11 0f       	add	r17, r17
    24ea:	18 2b       	or	r17, r24
  // Read first bit specially...
  const uint8_t b7 = readOneBit(state); 
  uint8_t result = b7;
  uint8_t parity = b7;
  // Then remaining 7 bits...
  for(int i = 7; --i >= 0; )
    24ec:	21 97       	sbiw	r28, 0x01	; 1
    24ee:	ff ef       	ldi	r31, 0xFF	; 255
    24f0:	cf 3f       	cpi	r28, 0xFF	; 255
    24f2:	df 07       	cpc	r29, r31
    24f4:	a9 f7       	brne	.-22     	; 0x24e0 <readOneByteWithParity(decode_state_t*)+0x2a>
    const uint8_t bit = readOneBit(state);
    parity ^= bit;
    result = (result << 1) | bit;
    }
  // Then get parity bit and check.
  if(parity != readOneBit(state))
    24f6:	c7 01       	movw	r24, r14
    24f8:	0e 94 c9 11 	call	0x2392	; 0x2392 <readOneBit(decode_state_t*)>
    24fc:	08 17       	cp	r16, r24
    24fe:	19 f0       	breq	.+6      	; 0x2506 <readOneByteWithParity(decode_state_t*)+0x50>
    {
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("bad parity");
#endif
    state->failed = true;
    2500:	81 e0       	ldi	r24, 0x01	; 1
    2502:	f7 01       	movw	r30, r14
    2504:	85 83       	std	Z+5, r24	; 0x05
    }
  return(result);
  }
    2506:	81 2f       	mov	r24, r17
    2508:	df 91       	pop	r29
    250a:	cf 91       	pop	r28
    250c:	1f 91       	pop	r17
    250e:	0f 91       	pop	r16
    2510:	ff 90       	pop	r15
    2512:	ef 90       	pop	r14
    2514:	08 95       	ret

00002516 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)>:

// Decode raw bitstream into non-null command structure passed in; returns true if successful.
// Will return true if OK, else false if anything obviously invalid is detected such as failing parity or checksum.
// Finds and discards leading encoded 1 and trailing 0.
// Returns NULL on failure, else pointer to next full byte after last decoded.
uint8_t const *FHT8VDecodeBitStream(uint8_t const *bitStream, uint8_t const *lastByte, fht8v_msg_t *command)
    2516:	df 92       	push	r13
    2518:	ef 92       	push	r14
    251a:	ff 92       	push	r15
    251c:	0f 93       	push	r16
    251e:	1f 93       	push	r17
    2520:	df 93       	push	r29
    2522:	cf 93       	push	r28
    2524:	00 d0       	rcall	.+0      	; 0x2526 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x10>
    2526:	00 d0       	rcall	.+0      	; 0x2528 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x12>
    2528:	00 d0       	rcall	.+0      	; 0x252a <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x14>
    252a:	cd b7       	in	r28, 0x3d	; 61
    252c:	de b7       	in	r29, 0x3e	; 62
    252e:	8a 01       	movw	r16, r20
  {
  decode_state_t state;
  state.bitStream = bitStream;
    2530:	9a 83       	std	Y+2, r25	; 0x02
    2532:	89 83       	std	Y+1, r24	; 0x01
  state.lastByte = lastByte;
    2534:	7c 83       	std	Y+4, r23	; 0x04
    2536:	6b 83       	std	Y+3, r22	; 0x03
  state.mask = 0;
    2538:	1d 82       	std	Y+5, r1	; 0x05
  state.failed = false;
    253a:	1e 82       	std	Y+6, r1	; 0x06
      }
  DEBUG_SERIAL_PRINTLN();
#endif

  // Find and absorb the leading encoded '1', else quit if not found by end of stream.
  while(0 == readOneBit(&state)) { if(state.failed) { return(NULL); } }
    253c:	7e 01       	movw	r14, r28
    253e:	08 94       	sec
    2540:	e1 1c       	adc	r14, r1
    2542:	f1 1c       	adc	r15, r1
    2544:	03 c0       	rjmp	.+6      	; 0x254c <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x36>
    2546:	8e 81       	ldd	r24, Y+6	; 0x06
    2548:	88 23       	and	r24, r24
    254a:	e9 f5       	brne	.+122    	; 0x25c6 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb0>
    254c:	c7 01       	movw	r24, r14
    254e:	0e 94 c9 11 	call	0x2392	; 0x2392 <readOneBit(decode_state_t*)>
    2552:	88 23       	and	r24, r24
    2554:	c1 f3       	breq	.-16     	; 0x2546 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x30>
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("Read leading 1");
#endif

  command->hc1 = readOneByteWithParity(&state);
    2556:	c7 01       	movw	r24, r14
    2558:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <readOneByteWithParity(decode_state_t*)>
    255c:	f8 01       	movw	r30, r16
    255e:	80 83       	st	Z, r24
  command->hc2 = readOneByteWithParity(&state);
    2560:	c7 01       	movw	r24, r14
    2562:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <readOneByteWithParity(decode_state_t*)>
    2566:	f8 01       	movw	r30, r16
    2568:	81 83       	std	Z+1, r24	; 0x01
#ifdef FHT8V_ADR_USED
  command->address = readOneByteWithParity(&state);
#else
  const uint8_t address = readOneByteWithParity(&state);
    256a:	c7 01       	movw	r24, r14
    256c:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <readOneByteWithParity(decode_state_t*)>
    2570:	d8 2e       	mov	r13, r24
#endif
  command->command = readOneByteWithParity(&state);
    2572:	c7 01       	movw	r24, r14
    2574:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <readOneByteWithParity(decode_state_t*)>
    2578:	f8 01       	movw	r30, r16
    257a:	82 83       	std	Z+2, r24	; 0x02
  command->extension = readOneByteWithParity(&state);
    257c:	c7 01       	movw	r24, r14
    257e:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <readOneByteWithParity(decode_state_t*)>
    2582:	f8 01       	movw	r30, r16
    2584:	83 83       	std	Z+3, r24	; 0x03
  const uint8_t checksumRead = readOneByteWithParity(&state);
    2586:	c7 01       	movw	r24, r14
    2588:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <readOneByteWithParity(decode_state_t*)>
    258c:	28 2f       	mov	r18, r24
  if(state.failed)
    258e:	8e 81       	ldd	r24, Y+6	; 0x06
    2590:	88 23       	and	r24, r24
    2592:	c9 f4       	brne	.+50     	; 0x25c6 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb0>
#ifdef FHT8V_ADR_USED
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + command->address + command->command + command->extension;
#else
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + address + command->command + command->extension;
#endif
  if(checksum != checksumRead)
    2594:	f8 01       	movw	r30, r16
    2596:	80 81       	ld	r24, Z
    2598:	91 81       	ldd	r25, Z+1	; 0x01
    259a:	89 0f       	add	r24, r25
    259c:	84 5f       	subi	r24, 0xF4	; 244
    259e:	92 81       	ldd	r25, Z+2	; 0x02
    25a0:	89 0f       	add	r24, r25
    25a2:	93 81       	ldd	r25, Z+3	; 0x03
    25a4:	89 0f       	add	r24, r25
    25a6:	8d 0d       	add	r24, r13
    25a8:	82 17       	cp	r24, r18
    25aa:	69 f4       	brne	.+26     	; 0x25c6 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb0>
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("Checksum OK");
    }
#endif

  // Check the trailing encoded '0'.
  if(0 != readOneBit(&state))
    25ac:	c7 01       	movw	r24, r14
    25ae:	0e 94 c9 11 	call	0x2392	; 0x2392 <readOneBit(decode_state_t*)>
    25b2:	88 23       	and	r24, r24
    25b4:	41 f4       	brne	.+16     	; 0x25c6 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb0>
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("Read of trailing 0 failed");
#endif
    state.failed = true; return(NULL);
    }
  if(state.failed) { return(NULL); }
    25b6:	8e 81       	ldd	r24, Y+6	; 0x06
    25b8:	88 23       	and	r24, r24
    25ba:	29 f4       	brne	.+10     	; 0x25c6 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb0>
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("Read entire message");
#endif
  // Return pointer to where any trailing data may be
  // in next byte beyond end of FHT8V frame.
  return(state.bitStream + 1);
    25bc:	29 81       	ldd	r18, Y+1	; 0x01
    25be:	3a 81       	ldd	r19, Y+2	; 0x02
    25c0:	2f 5f       	subi	r18, 0xFF	; 255
    25c2:	3f 4f       	sbci	r19, 0xFF	; 255
    25c4:	02 c0       	rjmp	.+4      	; 0x25ca <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb4>
    25c6:	20 e0       	ldi	r18, 0x00	; 0
    25c8:	30 e0       	ldi	r19, 0x00	; 0
  }
    25ca:	c9 01       	movw	r24, r18
    25cc:	26 96       	adiw	r28, 0x06	; 6
    25ce:	0f b6       	in	r0, 0x3f	; 63
    25d0:	f8 94       	cli
    25d2:	de bf       	out	0x3e, r29	; 62
    25d4:	0f be       	out	0x3f, r0	; 63
    25d6:	cd bf       	out	0x3d, r28	; 61
    25d8:	cf 91       	pop	r28
    25da:	df 91       	pop	r29
    25dc:	1f 91       	pop	r17
    25de:	0f 91       	pop	r16
    25e0:	ff 90       	pop	r15
    25e2:	ef 90       	pop	r14
    25e4:	df 90       	pop	r13
    25e6:	08 95       	ret

000025e8 <FHT8VCallForHeatPoll()>:
// If used instead of an interrupt then should probably called at least about once every 100ms.
// Returns true if any useful activity/progress was detected by this call (not necessarily a full valid call-for-heat).
// Upon receipt of a valid call-for-heat this comes out of eavesdropping mode to save energy.
// If a problem is encountered this restarts the eavesdropping process.
// Does not block nor take significant time.
bool FHT8VCallForHeatPoll()
    25e8:	ef 92       	push	r14
    25ea:	ff 92       	push	r15
    25ec:	0f 93       	push	r16
    25ee:	1f 93       	push	r17
    25f0:	df 93       	push	r29
    25f2:	cf 93       	push	r28
    25f4:	cd b7       	in	r28, 0x3d	; 61
    25f6:	de b7       	in	r29, 0x3e	; 62
    25f8:	2b 97       	sbiw	r28, 0x0b	; 11
    25fa:	0f b6       	in	r0, 0x3f	; 63
    25fc:	f8 94       	cli
    25fe:	de bf       	out	0x3e, r29	; 62
    2600:	0f be       	out	0x3f, r0	; 63
    2602:	cd bf       	out	0x3d, r28	; 61
  {
  // Do nothing unless already in eavesdropping mode.
  if(!eavesdropping) { return(false); }
    2604:	80 91 9e 02 	lds	r24, 0x029E
    2608:	88 23       	and	r24, r24
    260a:	09 f4       	brne	.+2      	; 0x260e <FHT8VCallForHeatPoll()+0x26>
    260c:	d7 c0       	rjmp	.+430    	; 0x27bc <FHT8VCallForHeatPoll()+0x1d4>
//  if(FHT8VCallForHeatHeard()) { return(false); }
//#endif

#if defined(PIN_RFM_NIRQ)
  // If nIRQ line is available then abort if it is not active (and thus spare the SPI bus).
  if(fastDigitalRead(PIN_RFM_NIRQ) != LOW) { return(false); }
    260e:	19 99       	sbic	0x03, 1	; 3
    2610:	d5 c0       	rjmp	.+426    	; 0x27bc <FHT8VCallForHeatPoll()+0x1d4>
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("RX IRQ");
#endif
#endif

  const uint16_t status = RFM22ReadStatusBoth(); // reg1:reg2, on V0.08 PICAXE tempB2:SPI_DATAB.
    2612:	0e 94 3b 23 	call	0x4676	; 0x4676 <RFM22ReadStatusBoth()>
    2616:	8c 01       	movw	r16, r24

  if(status & 0x1000) // Received frame.
    2618:	94 ff       	sbrs	r25, 4
    261a:	ba c0       	rjmp	.+372    	; 0x2790 <FHT8VCallForHeatPoll()+0x1a8>
    {
// Ensure that data from a previous frame is not trivially re-read by clearing the buffer explicitly.
//    for(uint8_t *p = FHT8VRXHubArea + FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE; --p >= FHT8VRXHubArea; )
//      { *p = 0; }
    memset(FHT8VRXHubArea, 0xff, sizeof(FHT8VRXHubArea));
    261c:	8f e9       	ldi	r24, 0x9F	; 159
    261e:	92 e0       	ldi	r25, 0x02	; 2
    2620:	6f ef       	ldi	r22, 0xFF	; 255
    2622:	70 e0       	ldi	r23, 0x00	; 0
    2624:	4e e3       	ldi	r20, 0x3E	; 62
    2626:	50 e0       	ldi	r21, 0x00	; 0
    2628:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <memset>
    // Attempt to read the entire frame.
    RFM22RXFIFO(FHT8VRXHubArea, sizeof(FHT8VRXHubArea));
    262c:	8f e9       	ldi	r24, 0x9F	; 159
    262e:	92 e0       	ldi	r25, 0x02	; 2
    2630:	6e e3       	ldi	r22, 0x3E	; 62
    2632:	0e 94 d6 21 	call	0x43ac	; 0x43ac <RFM22RXFIFO(unsigned char*, unsigned char)>
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	82 2f       	mov	r24, r18
    uint8_t pos; // Current byte position in RX buffer...
    // Validate FHT8V premable (zeros encoded as up to 6x 0xcc bytes), else abort/restart.
    // Insist on at least a couple of bytes of valid preamble being present.
    for(pos = 0; pos < 6; ++pos)
      {
      const uint8_t b = FHT8VRXHubArea[pos];
    263c:	f9 01       	movw	r30, r18
    263e:	e1 56       	subi	r30, 0x61	; 97
    2640:	fd 4f       	sbci	r31, 0xFD	; 253
    2642:	e0 81       	ld	r30, Z
      if(0xcc != b)
    2644:	ec 3c       	cpi	r30, 0xCC	; 204
    2646:	09 f4       	brne	.+2      	; 0x264a <FHT8VCallForHeatPoll()+0x62>
    2648:	44 c0       	rjmp	.+136    	; 0x26d2 <FHT8VCallForHeatPoll()+0xea>
        {
        if(MSG_JSON_LEADING_CHAR == b)
    264a:	eb 37       	cpi	r30, 0x7B	; 123
    264c:	a1 f4       	brne	.+40     	; 0x2676 <FHT8VCallForHeatPoll()+0x8e>
          {
          if(adjustJSONMsgForRXAndCheckCRC((char *)(FHT8VRXHubArea + pos), sizeof(FHT8VRXHubArea)-pos) > 0)
    264e:	02 2f       	mov	r16, r18
    2650:	10 e0       	ldi	r17, 0x00	; 0
    2652:	01 56       	subi	r16, 0x61	; 97
    2654:	1d 4f       	sbci	r17, 0xFD	; 253
    2656:	6e e3       	ldi	r22, 0x3E	; 62
    2658:	62 1b       	sub	r22, r18
    265a:	c8 01       	movw	r24, r16
    265c:	0e 94 01 17 	call	0x2e02	; 0x2e02 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)>
    2660:	18 16       	cp	r1, r24
    2662:	2c f4       	brge	.+10     	; 0x266e <FHT8VCallForHeatPoll()+0x86>
            {
            recordJSONStats(false, (const char *)(FHT8VRXHubArea + pos));
    2664:	80 e0       	ldi	r24, 0x00	; 0
    2666:	b8 01       	movw	r22, r16
    2668:	0e 94 42 1b 	call	0x3684	; 0x3684 <recordJSONStats(bool, char const*)>
    266c:	8a c0       	rjmp	.+276    	; 0x2782 <FHT8VCallForHeatPoll()+0x19a>
// Useful to assess the noise enviromentment.
static volatile uint8_t lastRXerrno;

// Atomically returns and clears last (FHT8V) RX error code, or 0 if none.
// Set with such codes as FHT8VRXErr_GENERIC; never set to zero.
static void setLastRXErr(const uint8_t err) { ATOMIC_BLOCK (ATOMIC_RESTORESTATE) { lastRXerrno = err; } }
    266e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2670:	f8 94       	cli
    2672:	85 e0       	ldi	r24, 0x05	; 5
    2674:	9e c0       	rjmp	.+316    	; 0x27b2 <FHT8VCallForHeatPoll()+0x1ca>
#endif
          setLastRXErr(FHT8VRXErr_BAD_RX_STATSFRAME);
          _SetupRFM22ToEavesdropOnFHT8V(); // Reset/restart RX.
          return(false); // Didn't look like valid JSON.
          }
        else if(MESSAGING_FULL_STATS_FLAGS_HEADER_MSBS == (b & MESSAGING_FULL_STATS_FLAGS_HEADER_MASK))
    2676:	e0 7e       	andi	r30, 0xE0	; 224
    2678:	e0 36       	cpi	r30, 0x60	; 96
    267a:	d1 f4       	brne	.+52     	; 0x26b0 <FHT8VCallForHeatPoll()+0xc8>
          {
          // May be binary stats frame, so attempt to decode...
          FullStatsMessageCore_t content;
          // (TODO: should reject non-secure messages when expecting secure ones...)
          const uint8_t *msg = decodeFullStatsMessageCore(FHT8VRXHubArea, sizeof(FHT8VRXHubArea)-pos, stTXalwaysAll, false, &content);
    267c:	6e e3       	ldi	r22, 0x3E	; 62
    267e:	62 1b       	sub	r22, r18
    2680:	75 e0       	ldi	r23, 0x05	; 5
    2682:	e7 2e       	mov	r14, r23
    2684:	f1 2c       	mov	r15, r1
    2686:	ec 0e       	add	r14, r28
    2688:	fd 1e       	adc	r15, r29
    268a:	8f e9       	ldi	r24, 0x9F	; 159
    268c:	92 e0       	ldi	r25, 0x02	; 2
    268e:	40 e0       	ldi	r20, 0x00	; 0
    2690:	50 e0       	ldi	r21, 0x00	; 0
    2692:	20 e0       	ldi	r18, 0x00	; 0
    2694:	87 01       	movw	r16, r14
    2696:	0e 94 90 1b 	call	0x3720	; 0x3720 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)>
          if(NULL != msg)
    269a:	89 2b       	or	r24, r25
    269c:	09 f4       	brne	.+2      	; 0x26a0 <FHT8VCallForHeatPoll()+0xb8>
    269e:	8c c0       	rjmp	.+280    	; 0x27b8 <FHT8VCallForHeatPoll()+0x1d0>
             {
             if(content.containsID)
    26a0:	8d 81       	ldd	r24, Y+5	; 0x05
    26a2:	80 ff       	sbrs	r24, 0
    26a4:	6e c0       	rjmp	.+220    	; 0x2782 <FHT8VCallForHeatPoll()+0x19a>
               DEBUG_SERIAL_PRINTFMT(content.id0, HEX);
               DEBUG_SERIAL_PRINT(' ');
               DEBUG_SERIAL_PRINTFMT(content.id1, HEX);
               DEBUG_SERIAL_PRINTLN();
#endif
               recordCoreStats(false, &content);
    26a6:	80 e0       	ldi	r24, 0x00	; 0
    26a8:	b7 01       	movw	r22, r14
    26aa:	0e 94 12 1b 	call	0x3624	; 0x3624 <recordCoreStats(bool, FullStatsMessageCore const*)>
    26ae:	69 c0       	rjmp	.+210    	; 0x2782 <FHT8VCallForHeatPoll()+0x19a>

          _SetupRFM22ToEavesdropOnFHT8V(); // Reset/restart RX.
          return(false); // Nothing valid received.
          }

        if(pos < 2)
    26b0:	22 30       	cpi	r18, 0x02	; 2
    26b2:	b0 f4       	brcc	.+44     	; 0x26e0 <FHT8VCallForHeatPoll()+0xf8>
// Useful to assess the noise enviromentment.
static volatile uint8_t lastRXerrno;

// Atomically returns and clears last (FHT8V) RX error code, or 0 if none.
// Set with such codes as FHT8VRXErr_GENERIC; never set to zero.
static void setLastRXErr(const uint8_t err) { ATOMIC_BLOCK (ATOMIC_RESTORESTATE) { lastRXerrno = err; } }
    26b4:	9f b7       	in	r25, 0x3f	; 63
    26b6:	f8 94       	cli
    26b8:	82 e0       	ldi	r24, 0x02	; 2
    26ba:	80 93 9d 02 	sts	0x029D, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    26be:	9f bf       	out	0x3f, r25	; 63
            DEBUG_SERIAL_PRINT_FLASHSTRING(" 0x");
            DEBUG_SERIAL_PRINTFMT(FHT8VRXHubArea[p], HEX);
            }
          DEBUG_SERIAL_PRINTLN();
#endif
          seedRNG8(FHT8VRXHubArea[pos], FHT8VRXHubArea[pos+2], FHT8VRXHubArea[pos+5]); // Attempt to gather some entropy from RX noise. (TODO-302).
    26c0:	f9 01       	movw	r30, r18
    26c2:	e1 56       	subi	r30, 0x61	; 97
    26c4:	fd 4f       	sbci	r31, 0xFD	; 253
    26c6:	80 81       	ld	r24, Z
    26c8:	62 81       	ldd	r22, Z+2	; 0x02
    26ca:	45 81       	ldd	r20, Z+5	; 0x05
    26cc:	0e 94 9e 21 	call	0x433c	; 0x433c <seedRNG8(unsigned char, unsigned char, unsigned char)>
    26d0:	73 c0       	rjmp	.+230    	; 0x27b8 <FHT8VCallForHeatPoll()+0x1d0>
          _SetupRFM22ToEavesdropOnFHT8V(); // Reset/restart RX.
          return(false);
    26d2:	8f 5f       	subi	r24, 0xFF	; 255
    26d4:	2f 5f       	subi	r18, 0xFF	; 255
    26d6:	3f 4f       	sbci	r19, 0xFF	; 255
    // Attempt to read the entire frame.
    RFM22RXFIFO(FHT8VRXHubArea, sizeof(FHT8VRXHubArea));
    uint8_t pos; // Current byte position in RX buffer...
    // Validate FHT8V premable (zeros encoded as up to 6x 0xcc bytes), else abort/restart.
    // Insist on at least a couple of bytes of valid preamble being present.
    for(pos = 0; pos < 6; ++pos)
    26d8:	26 30       	cpi	r18, 0x06	; 6
    26da:	31 05       	cpc	r19, r1
    26dc:	09 f0       	breq	.+2      	; 0x26e0 <FHT8VCallForHeatPoll()+0xf8>
    26de:	ad cf       	rjmp	.-166    	; 0x263a <FHT8VCallForHeatPoll()+0x52>
        break; // If enough preamble has been seen, move on to the body.
        }
      }
    fht8v_msg_t command;
    uint8_t const *lastByte = FHT8VRXHubArea + FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE - 1;
    uint8_t const *trailer = FHT8VDecodeBitStream(FHT8VRXHubArea + pos, lastByte, &command);
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	0a ed       	ldi	r16, 0xDA	; 218
    26e4:	12 e0       	ldi	r17, 0x02	; 2
    26e6:	81 56       	subi	r24, 0x61	; 97
    26e8:	9d 4f       	sbci	r25, 0xFD	; 253
    26ea:	b8 01       	movw	r22, r16
    26ec:	ae 01       	movw	r20, r28
    26ee:	4f 5f       	subi	r20, 0xFF	; 255
    26f0:	5f 4f       	sbci	r21, 0xFF	; 255
    26f2:	0e 94 8b 12 	call	0x2516	; 0x2516 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)>
    26f6:	fc 01       	movw	r30, r24
    if(NULL != trailer)
    26f8:	00 97       	sbiw	r24, 0x00	; 0
    26fa:	09 f4       	brne	.+2      	; 0x26fe <FHT8VCallForHeatPoll()+0x116>
    26fc:	45 c0       	rjmp	.+138    	; 0x2788 <FHT8VCallForHeatPoll()+0x1a0>

#if defined(ALLOW_STATS_RX) // Only look for the trailer if supported.
      // If whole FHT8V frame was OK then check if there is a valid stats trailer.

      // Check for 'core' stats trailer.
      if((trailer + FullStatsMessageCore_MAX_BYTES_ON_WIRE <= lastByte) && // Enough space for minimum-stats trailer.
    26fe:	08 96       	adiw	r24, 0x08	; 8
    2700:	08 17       	cp	r16, r24
    2702:	19 07       	cpc	r17, r25
    2704:	48 f1       	brcs	.+82     	; 0x2758 <FHT8VCallForHeatPoll()+0x170>
    2706:	80 81       	ld	r24, Z
    2708:	80 7e       	andi	r24, 0xE0	; 224
    270a:	80 36       	cpi	r24, 0x60	; 96
    270c:	29 f5       	brne	.+74     	; 0x2758 <FHT8VCallForHeatPoll()+0x170>
         (MESSAGING_FULL_STATS_FLAGS_HEADER_MSBS == (trailer[0] & MESSAGING_FULL_STATS_FLAGS_HEADER_MASK)))
        {
        FullStatsMessageCore_t content;
        const uint8_t *tail = decodeFullStatsMessageCore(trailer, lastByte - trailer, stTXalwaysAll, false, &content);
    270e:	60 2f       	mov	r22, r16
    2710:	6e 1b       	sub	r22, r30
    2712:	cf 01       	movw	r24, r30
    2714:	40 e0       	ldi	r20, 0x00	; 0
    2716:	50 e0       	ldi	r21, 0x00	; 0
    2718:	20 e0       	ldi	r18, 0x00	; 0
    271a:	8e 01       	movw	r16, r28
    271c:	0b 5f       	subi	r16, 0xFB	; 251
    271e:	1f 4f       	sbci	r17, 0xFF	; 255
    2720:	0e 94 90 1b 	call	0x3720	; 0x3720 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)>
        if(NULL != tail)
    2724:	89 2b       	or	r24, r25
    2726:	c1 f0       	breq	.+48     	; 0x2758 <FHT8VCallForHeatPoll()+0x170>
          // Received trailing stats frame!
 
          // If ID is present then make sure it matches that implied by the FHT8V frame (else reject this trailer)
          // else file it in from the FHT8C frame.
          bool allGood = true;
          if(content.containsID)
    2728:	9d 81       	ldd	r25, Y+5	; 0x05
    272a:	29 81       	ldd	r18, Y+1	; 0x01
    272c:	90 ff       	sbrs	r25, 0
    272e:	08 c0       	rjmp	.+16     	; 0x2740 <FHT8VCallForHeatPoll()+0x158>
            {
            if((content.id0 != command.hc1) || (content.id1 != command.hc2))
    2730:	8e 81       	ldd	r24, Y+6	; 0x06
    2732:	82 17       	cp	r24, r18
    2734:	59 f4       	brne	.+22     	; 0x274c <FHT8VCallForHeatPoll()+0x164>
    2736:	9f 81       	ldd	r25, Y+7	; 0x07
    2738:	8a 81       	ldd	r24, Y+2	; 0x02
    273a:	98 17       	cp	r25, r24
    273c:	39 f4       	brne	.+14     	; 0x274c <FHT8VCallForHeatPoll()+0x164>
    273e:	4c c0       	rjmp	.+152    	; 0x27d8 <FHT8VCallForHeatPoll()+0x1f0>
              { allGood = false; }
            }
          else
            {
            content.id0 = command.hc1;
    2740:	2e 83       	std	Y+6, r18	; 0x06
            content.id1 = command.hc2;
    2742:	8a 81       	ldd	r24, Y+2	; 0x02
    2744:	8f 83       	std	Y+7, r24	; 0x07
            content.containsID = true;
    2746:	91 60       	ori	r25, 0x01	; 1
    2748:	9d 83       	std	Y+5, r25	; 0x05
    274a:	46 c0       	rjmp	.+140    	; 0x27d8 <FHT8VCallForHeatPoll()+0x1f0>
// Useful to assess the noise enviromentment.
static volatile uint8_t lastRXerrno;

// Atomically returns and clears last (FHT8V) RX error code, or 0 if none.
// Set with such codes as FHT8VRXErr_GENERIC; never set to zero.
static void setLastRXErr(const uint8_t err) { ATOMIC_BLOCK (ATOMIC_RESTORESTATE) { lastRXerrno = err; } }
    274c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    274e:	f8 94       	cli
    2750:	84 e0       	ldi	r24, 0x04	; 4
    2752:	80 93 9d 02 	sts	0x029D, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2756:	9f bf       	out	0x3f, r25	; 63
        }
#endif
#endif

      // Potentially accept as call for heat only if command is 0x26 (38) and value open enough as used by OpenTRV to TX.
      if((0x26 == command.command) && (command.extension >= NominalRadValve.getMinValvePcReallyOpen()))
    2758:	8b 81       	ldd	r24, Y+3	; 0x03
    275a:	86 32       	cpi	r24, 0x26	; 38
    275c:	91 f4       	brne	.+36     	; 0x2782 <FHT8VCallForHeatPoll()+0x19a>
    275e:	1c 81       	ldd	r17, Y+4	; 0x04
    2760:	0e 94 6f 04 	call	0x8de	; 0x8de <ModelledRadValve::getMinValvePcReallyOpen()>
    2764:	18 17       	cp	r17, r24
    2766:	68 f0       	brcs	.+26     	; 0x2782 <FHT8VCallForHeatPoll()+0x19a>
        {
        if(FHT8VHubAcceptedHouseCode(command.hc1, command.hc2))
          {
          // Accept if house code not filtered out.
          const uint16_t compoundHC = (command.hc1 << 8) | command.hc2;
    2768:	99 81       	ldd	r25, Y+1	; 0x01
    276a:	80 e0       	ldi	r24, 0x00	; 0
    276c:	2a 81       	ldd	r18, Y+2	; 0x02
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	82 2b       	or	r24, r18
    2772:	93 2b       	or	r25, r19
          ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    2774:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2776:	f8 94       	cli
            { lastCallForHeatHC = compoundHC; } // Update atomically.
    2778:	90 93 3a 01 	sts	0x013A, r25
    277c:	80 93 39 01 	sts	0x0139, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2780:	2f bf       	out	0x3f, r18	; 63
//#if defined(SAVE_RX_ENERGY)
//          StopEavesdropOnFHT8V(); // Need not eavesdrop for a while.
//#endif
          }
        }
      _SetupRFM22ToEavesdropOnFHT8V(); // Reset/restart RX.
    2782:	0e 94 ab 11 	call	0x2356	; 0x2356 <_SetupRFM22ToEavesdropOnFHT8V()>
    2786:	0e c0       	rjmp	.+28     	; 0x27a4 <FHT8VCallForHeatPoll()+0x1bc>
// Useful to assess the noise enviromentment.
static volatile uint8_t lastRXerrno;

// Atomically returns and clears last (FHT8V) RX error code, or 0 if none.
// Set with such codes as FHT8VRXErr_GENERIC; never set to zero.
static void setLastRXErr(const uint8_t err) { ATOMIC_BLOCK (ATOMIC_RESTORESTATE) { lastRXerrno = err; } }
    2788:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    278a:	f8 94       	cli
    278c:	83 e0       	ldi	r24, 0x03	; 3
    278e:	11 c0       	rjmp	.+34     	; 0x27b2 <FHT8VCallForHeatPoll()+0x1ca>

    // Ensure that RX is re-enabled to avoid missing anything.
    _SetupRFM22ToEavesdropOnFHT8V(); // Reset/restart RX.
    return(false); // Nothing valid received.
    }
  else if(status & 0x80) // Got sync from incoming FHT8V message.
    2790:	87 ff       	sbrs	r24, 7
    2792:	0a c0       	rjmp	.+20     	; 0x27a8 <FHT8VCallForHeatPoll()+0x1c0>
    {
    // Capture some entropy from RSSI and timing...
    const uint8_t rssi = RFM22RSSI();
    2794:	0e 94 23 23 	call	0x4646	; 0x4646 <RFM22RSSI()>
    // TODO adjust output power down a little if RX very loud.
    addEntropyToPool(rssi ^ (uint8_t)(status ^ (status >> 8)), 1); // Maybe ~1 real bit of entropy.
    2798:	91 2f       	mov	r25, r17
    279a:	90 27       	eor	r25, r16
    279c:	89 27       	eor	r24, r25
    279e:	61 e0       	ldi	r22, 0x01	; 1
    27a0:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <addEntropyToPool(unsigned char, unsigned char)>
    27a4:	81 e0       	ldi	r24, 0x01	; 1
    27a6:	0b c0       	rjmp	.+22     	; 0x27be <FHT8VCallForHeatPoll()+0x1d6>
      }
#endif 
//    syncSeen = true;
    return(true);
    }
  else if(status & 0x8000) // RX FIFO overflow/underflow: give up and restart...
    27a8:	97 ff       	sbrs	r25, 7
    27aa:	08 c0       	rjmp	.+16     	; 0x27bc <FHT8VCallForHeatPoll()+0x1d4>
// Useful to assess the noise enviromentment.
static volatile uint8_t lastRXerrno;

// Atomically returns and clears last (FHT8V) RX error code, or 0 if none.
// Set with such codes as FHT8VRXErr_GENERIC; never set to zero.
static void setLastRXErr(const uint8_t err) { ATOMIC_BLOCK (ATOMIC_RESTORESTATE) { lastRXerrno = err; } }
    27ac:	9f b7       	in	r25, 0x3f	; 63
    27ae:	f8 94       	cli
    27b0:	81 e0       	ldi	r24, 0x01	; 1
    27b2:	80 93 9d 02 	sts	0x029D, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    27b6:	9f bf       	out	0x3f, r25	; 63
    {
    setLastRXErr(FHT8VRXErr_GENERIC);
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("RX FIFO problem");
#endif
    _SetupRFM22ToEavesdropOnFHT8V(); // Reset/restart RX.
    27b8:	0e 94 ab 11 	call	0x2356	; 0x2356 <_SetupRFM22ToEavesdropOnFHT8V()>
    return(false);
    27bc:	80 e0       	ldi	r24, 0x00	; 0
    }

  return(false);
  }
    27be:	2b 96       	adiw	r28, 0x0b	; 11
    27c0:	0f b6       	in	r0, 0x3f	; 63
    27c2:	f8 94       	cli
    27c4:	de bf       	out	0x3e, r29	; 62
    27c6:	0f be       	out	0x3f, r0	; 63
    27c8:	cd bf       	out	0x3d, r28	; 61
    27ca:	cf 91       	pop	r28
    27cc:	df 91       	pop	r29
    27ce:	1f 91       	pop	r17
    27d0:	0f 91       	pop	r16
    27d2:	ff 90       	pop	r15
    27d4:	ef 90       	pop	r14
    27d6:	08 95       	ret
            content.id1 = command.hc2;
            content.containsID = true;
            }
 
          // If frame looks good then capture it.
          if(allGood) { recordCoreStats(false, &content); }
    27d8:	80 e0       	ldi	r24, 0x00	; 0
    27da:	be 01       	movw	r22, r28
    27dc:	6b 5f       	subi	r22, 0xFB	; 251
    27de:	7f 4f       	sbci	r23, 0xFF	; 255
    27e0:	0e 94 12 1b 	call	0x3624	; 0x3624 <recordCoreStats(bool, FullStatsMessageCore const*)>
    27e4:	b9 cf       	rjmp	.-142    	; 0x2758 <FHT8VCallForHeatPoll()+0x170>

000027e6 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)>:
//
// Returns immediately without transmitting if the command buffer starts with 0xff (ie is empty).
// (If doubleTX is true, sends the bitstream twice, with a short (~8ms) pause between transmissions, to help ensure reliable delivery.)
//
// Note: single transmission time is up to about 80ms (without extra trailers), double up to about 170ms.
static void FHT8VTXFHTQueueAndSendCmd(uint8_t *bptr, const bool doubleTX)
    27e6:	0f 93       	push	r16
    27e8:	1f 93       	push	r17
    27ea:	cf 93       	push	r28
    27ec:	df 93       	push	r29
    27ee:	ec 01       	movw	r28, r24
    27f0:	06 2f       	mov	r16, r22
  {
  if(((uint8_t)0xff) == *bptr) { return; }
    27f2:	88 81       	ld	r24, Y
    27f4:	8f 3f       	cpi	r24, 0xFF	; 255
    27f6:	01 f1       	breq	.+64     	; 0x2838 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x52>
#if 0 && defined(DEBUG)
  if(0 == *bptr) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("FHT8V frame not initialised"); panic(); }
#endif

#if defined(ENABLE_BOILER_HUB)
  const bool hubMode = inHubMode();
    27f8:	0e 94 0f 04 	call	0x81e	; 0x81e <getMinBoilerOnMinutes()>
    27fc:	18 2f       	mov	r17, r24
    27fe:	88 23       	and	r24, r24
    2800:	19 f0       	breq	.+6      	; 0x2808 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x22>
    2802:	11 e0       	ldi	r17, 0x01	; 1
  // Do a final poll for any call for heat that just arrived before doing TX.
  if(hubMode) { FHT8VCallForHeatPoll(); }
    2804:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <FHT8VCallForHeatPoll()>
  StopEavesdropOnFHT8V(); // Unconditional cleardown of eavesdrop.
    2808:	80 e0       	ldi	r24, 0x00	; 0
    280a:	0e 94 a0 11 	call	0x2340	; 0x2340 <StopEavesdropOnFHT8V(bool)>
#endif

  RFM22QueueCmdToFF(bptr);
    280e:	ce 01       	movw	r24, r28
    2810:	0e 94 b0 22 	call	0x4560	; 0x4560 <RFM22QueueCmdToFF(unsigned char*)>
  RFM22TXFIFO(); // Send it!  Approx 1.6ms/byte and < 80ms max.
    2814:	0e 94 a8 23 	call	0x4750	; 0x4750 <RFM22TXFIFO()>

  if(doubleTX)
    2818:	00 23       	and	r16, r16
    281a:	31 f0       	breq	.+12     	; 0x2828 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x42>
// This may be achieved in part by dynamically slowing the CPU clock if possible.
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed((((MIN_CPU_HZ * (ms)) + 2000) / 4000) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    281c:	8d e3       	ldi	r24, 0x3D	; 61
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	0e 94 8b 1d 	call	0x3b16	; 0x3b16 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
    {
    // Should nominally pause about 8--9ms or similar before retransmission...
    sleepLowPowerMs(8);
    RFM22TXFIFO(); // Re-send it!
    2824:	0e 94 a8 23 	call	0x4750	; 0x4750 <RFM22TXFIFO()>
    }

#if defined(ENABLE_BOILER_HUB)
  if(hubMode)
    2828:	11 23       	and	r17, r17
    282a:	21 f0       	breq	.+8      	; 0x2834 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x4e>
    { SetupToEavesdropOnFHT8V(); } // Revert to hub listening...
    282c:	80 e0       	ldi	r24, 0x00	; 0
    282e:	0e 94 b3 11 	call	0x2366	; 0x2366 <SetupToEavesdropOnFHT8V(bool)>
    2832:	02 c0       	rjmp	.+4      	; 0x2838 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x52>
  else
#endif
    { RFM22ModeStandbyAndClearState(); } // Go to standby to conserve energy.
    2834:	0e 94 60 23 	call	0x46c0	; 0x46c0 <RFM22ModeStandbyAndClearState()>
  }
    2838:	df 91       	pop	r29
    283a:	cf 91       	pop	r28
    283c:	1f 91       	pop	r17
    283e:	0f 91       	pop	r16
    2840:	08 95       	ret

00002842 <valveSettingTX(bool)>:

// Send current (assumed valve-setting) command and adjust FHT8V_isValveOpen as appropriate.
// Only appropriate when the command is going to be heard by the FHT8V valve itself, not just the hub.
static void valveSettingTX(const bool allowDoubleTX)
    2842:	1f 93       	push	r17
    2844:	68 2f       	mov	r22, r24
  {
  // Transmit correct valve-setting command that should already be in the buffer...
  FHT8VTXFHTQueueAndSendCmd(FHT8VTXCommandArea, allowDoubleTX);
    2846:	81 ee       	ldi	r24, 0xE1	; 225
    2848:	92 e0       	ldi	r25, 0x02	; 2
    284a:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)>
    284e:	10 91 1b 02 	lds	r17, 0x021B

// Call just after TX of valve-setting command which is assumed to reflect current TRVPercentOpen state.
// This helps avoiding calling for heat from a central boiler until the valve is really open,
// eg to avoid excess load on (or energy wasting by) the circulation pump.
static void setFHT8V_isValveOpen()
  { FHT8V_isValveOpen = (NominalRadValve.get() >= NominalRadValve.getMinValvePcReallyOpen()); }
    2852:	0e 94 6f 04 	call	0x8de	; 0x8de <ModelledRadValve::getMinValvePcReallyOpen()>
    2856:	10 92 1d 03 	sts	0x031D, r1
    285a:	18 17       	cp	r17, r24
    285c:	18 f0       	brcs	.+6      	; 0x2864 <valveSettingTX(bool)+0x22>
    285e:	81 e0       	ldi	r24, 0x01	; 1
    2860:	80 93 1d 03 	sts	0x031D, r24
  {
  // Transmit correct valve-setting command that should already be in the buffer...
  FHT8VTXFHTQueueAndSendCmd(FHT8VTXCommandArea, allowDoubleTX);
  // Indicate state that valve should now actually be in (or physically moving to)...
  setFHT8V_isValveOpen();
  }
    2864:	1f 91       	pop	r17
    2866:	08 95       	ret

00002868 <sleepUntilSubCycleTimeOptionalRX(unsigned char)>:
// Returns true if OK, false if specified time already passed or significantly missed (eg by more than one tick).
// May use a combination of techniques to hit the required time.
// Requesting a sleep until at or near the end of the cycle risks overrun and may be unwise.
// Using this to sleep less then 2 ticks may prove unreliable as the RTC rolls on underneath...
// This is NOT intended to be used to sleep over the end of a minor cycle. 
static void sleepUntilSubCycleTimeOptionalRX(const uint8_t sleepUntil)
    2868:	8f 92       	push	r8
    286a:	9f 92       	push	r9
    286c:	af 92       	push	r10
    286e:	bf 92       	push	r11
    2870:	cf 92       	push	r12
    2872:	df 92       	push	r13
    2874:	ef 92       	push	r14
    2876:	ff 92       	push	r15
    2878:	0f 93       	push	r16
    287a:	1f 93       	push	r17
    287c:	98 2e       	mov	r9, r24
    {
#if defined(ENABLE_BOILER_HUB)
    const bool hubMode = inHubMode();
    287e:	0e 94 0f 04 	call	0x81e	; 0x81e <getMinBoilerOnMinutes()>
    2882:	88 2e       	mov	r8, r24
    2884:	88 23       	and	r24, r24
    2886:	a9 f1       	breq	.+106    	; 0x28f2 <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x8a>
    2888:	88 24       	eor	r8, r8
    288a:	83 94       	inc	r8
      {
#if 0 && defined(DEBUG)
      DEBUG_SERIAL_PRINT_FLASHSTRING("TXwait");
#endif
      // Only do nap+poll if lots of time left.
      while(sleepUntil > fmax(getSubCycleTime() + (50/SUBCYCLE_TICK_MS_RD), GSCT_MAX))
    288c:	89 2d       	mov	r24, r9
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	5c 01       	movw	r10, r24
    2892:	cc 24       	eor	r12, r12
    2894:	b7 fc       	sbrc	r11, 7
    2896:	c0 94       	com	r12
    2898:	dc 2c       	mov	r13, r12
    289a:	06 c0       	rjmp	.+12     	; 0x28a8 <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x40>
//   * force if true then force full poll on every call (ie do not internally rate-limit)
// NOTE: implementation may not be in power-management module.
bool pollIO(bool force = false);
// Nap productively polling I/O, etc, across the system while spending time in low-power mode if possible.
// Typically sleeps for about 30ms; tries to allow ealier wakeup if interrupt is received, etc.
static void inline nap30AndPoll() { nap(WDTO_30MS); pollIO(true); }
    289c:	81 e0       	ldi	r24, 0x01	; 1
    289e:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <nap(signed char)>
    28a2:	81 e0       	ldi	r24, 0x01	; 1
    28a4:	0e 94 1c 07 	call	0xe38	; 0xe38 <pollIO(bool)>
    28a8:	60 91 b2 00 	lds	r22, 0x00B2
    28ac:	70 e0       	ldi	r23, 0x00	; 0
    28ae:	69 5f       	subi	r22, 0xF9	; 249
    28b0:	7f 4f       	sbci	r23, 0xFF	; 255
    28b2:	88 27       	eor	r24, r24
    28b4:	77 fd       	sbrc	r23, 7
    28b6:	80 95       	com	r24
    28b8:	98 2f       	mov	r25, r24
    28ba:	0e 94 2b 3d 	call	0x7a56	; 0x7a56 <__floatsisf>
    28be:	20 e0       	ldi	r18, 0x00	; 0
    28c0:	30 e0       	ldi	r19, 0x00	; 0
    28c2:	4f e7       	ldi	r20, 0x7F	; 127
    28c4:	53 e4       	ldi	r21, 0x43	; 67
    28c6:	0e 94 66 3d 	call	0x7acc	; 0x7acc <fmax>
    28ca:	7b 01       	movw	r14, r22
    28cc:	8c 01       	movw	r16, r24
    28ce:	c6 01       	movw	r24, r12
    28d0:	b5 01       	movw	r22, r10
    28d2:	0e 94 2b 3d 	call	0x7a56	; 0x7a56 <__floatsisf>
    28d6:	a8 01       	movw	r20, r16
    28d8:	97 01       	movw	r18, r14
    28da:	0e 94 a9 3d 	call	0x7b52	; 0x7b52 <__gesf2>
    28de:	18 16       	cp	r1, r24
    28e0:	ec f2       	brlt	.-70     	; 0x289c <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x34>
    28e2:	03 c0       	rjmp	.+6      	; 0x28ea <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x82>
        { nap30AndPoll(); } // Assumed ~30ms sleep max.
      // Poll in remaining time without nap.
      while(sleepUntil > getSubCycleTime())
        { pollIO(); }
    28e4:	80 e0       	ldi	r24, 0x00	; 0
    28e6:	0e 94 1c 07 	call	0xe38	; 0xe38 <pollIO(bool)>
#endif
      // Only do nap+poll if lots of time left.
      while(sleepUntil > fmax(getSubCycleTime() + (50/SUBCYCLE_TICK_MS_RD), GSCT_MAX))
        { nap30AndPoll(); } // Assumed ~30ms sleep max.
      // Poll in remaining time without nap.
      while(sleepUntil > getSubCycleTime())
    28ea:	80 91 b2 00 	lds	r24, 0x00B2
    28ee:	89 15       	cp	r24, r9
    28f0:	c8 f3       	brcs	.-14     	; 0x28e4 <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x7c>
#endif
      }
#endif

    // Sleep until exactly the right time.
    sleepUntilSubCycleTime(sleepUntil);
    28f2:	89 2d       	mov	r24, r9
    28f4:	0e 94 2e 21 	call	0x425c	; 0x425c <sleepUntilSubCycleTime(unsigned char)>

#if defined(ENABLE_BOILER_HUB)
    // Final quick poll for RX activity.
    if(hubMode) { FHT8VCallForHeatPoll(); }
    28f8:	88 20       	and	r8, r8
    28fa:	11 f0       	breq	.+4      	; 0x2900 <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x98>
    28fc:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <FHT8VCallForHeatPoll()>
#endif
    }
    2900:	1f 91       	pop	r17
    2902:	0f 91       	pop	r16
    2904:	ff 90       	pop	r15
    2906:	ef 90       	pop	r14
    2908:	df 90       	pop	r13
    290a:	cf 90       	pop	r12
    290c:	bf 90       	pop	r11
    290e:	af 90       	pop	r10
    2910:	9f 90       	pop	r9
    2912:	8f 90       	pop	r8
    2914:	08 95       	ret

00002916 <FHT8VSetHC2(unsigned char)>:
  eeprom_smart_erase_byte((uint8_t*)EE_START_FHT8V_HC2);
  }

// Set (non-volatile) HC1 and HC2 for single/primary FHT8V wireless valve under control.
void FHT8VSetHC1(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC1, hc); }
void FHT8VSetHC2(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC2, hc); }
    2916:	68 2f       	mov	r22, r24
    2918:	81 e1       	ldi	r24, 0x11	; 17
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	0e 94 5e 10 	call	0x20bc	; 0x20bc <eeprom_smart_update_byte(unsigned char*, unsigned char)>
    2920:	08 95       	ret

00002922 <FHT8VSetHC1(unsigned char)>:
  eeprom_smart_erase_byte((uint8_t*)EE_START_FHT8V_HC1);
  eeprom_smart_erase_byte((uint8_t*)EE_START_FHT8V_HC2);
  }

// Set (non-volatile) HC1 and HC2 for single/primary FHT8V wireless valve under control.
void FHT8VSetHC1(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC1, hc); }
    2922:	68 2f       	mov	r22, r24
    2924:	80 e1       	ldi	r24, 0x10	; 16
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	0e 94 5e 10 	call	0x20bc	; 0x20bc <eeprom_smart_update_byte(unsigned char*, unsigned char)>
    292c:	08 95       	ret

0000292e <FHT8VClearHC()>:
  }

// Clear both housecode parts (and thus disable local valve).
void FHT8VClearHC()
  {
  eeprom_smart_erase_byte((uint8_t*)EE_START_FHT8V_HC1);
    292e:	80 e1       	ldi	r24, 0x10	; 16
    2930:	90 e0       	ldi	r25, 0x00	; 0
    2932:	0e 94 34 10 	call	0x2068	; 0x2068 <eeprom_smart_erase_byte(unsigned char*)>
  eeprom_smart_erase_byte((uint8_t*)EE_START_FHT8V_HC2);
    2936:	81 e1       	ldi	r24, 0x11	; 17
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	0e 94 34 10 	call	0x2068	; 0x2068 <eeprom_smart_erase_byte(unsigned char*)>
  }
    293e:	08 95       	ret

00002940 <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)>:
//   * trailer  if not null then a stats trailer is appended, built from that info plus a CRC
//   * command  on entry hc1, hc2 (and addresss if used) must be set correctly, this sets the command and extension; never NULL
// The generated command frame can be resent indefinitely.
// The output buffer used must be (at least) FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE bytes.
// Returns pointer to the terminating 0xff on exit.
uint8_t *FHT8VCreateValveSetCmdFrameHT_r(uint8_t *const bptrInitial, const bool doHeader, fht8v_msg_t *const command, const uint8_t TRVPercentOpen, const FullStatsMessageCore_t *trailer)
    2940:	cf 92       	push	r12
    2942:	df 92       	push	r13
    2944:	ef 92       	push	r14
    2946:	ff 92       	push	r15
    2948:	0f 93       	push	r16
    294a:	1f 93       	push	r17
    294c:	cf 93       	push	r28
    294e:	df 93       	push	r29
    2950:	7c 01       	movw	r14, r24
    2952:	36 2f       	mov	r19, r22
    2954:	ea 01       	movw	r28, r20
  {
  uint8_t *bptr = bptrInitial;

  command->command = 0x26;
    2956:	86 e2       	ldi	r24, 0x26	; 38
    2958:	8a 83       	std	Y+2, r24	; 0x02
  command->extension = (TRVPercentOpen * 255) / 100;
    295a:	8f ef       	ldi	r24, 0xFF	; 255
    295c:	28 9f       	mul	r18, r24
    295e:	c0 01       	movw	r24, r0
    2960:	11 24       	eor	r1, r1
    2962:	64 e6       	ldi	r22, 0x64	; 100
    2964:	70 e0       	ldi	r23, 0x00	; 0
    2966:	0e 94 e0 3d 	call	0x7bc0	; 0x7bc0 <__divmodhi4>
    296a:	6b 83       	std	Y+3, r22	; 0x03

  // Add RFM22/32-friendly pre-preamble if requested, eg when calling for heat from the boiler (TRV actually open).
  // NOTE: this requires more buffer space.
  if(doHeader)
    296c:	33 23       	and	r19, r19
    296e:	11 f4       	brne	.+4      	; 0x2974 <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)+0x34>
    2970:	c7 01       	movw	r24, r14
    2972:	09 c0       	rjmp	.+18     	; 0x2986 <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)+0x46>
    {
    memset(bptr, RFM22_PREAMBLE_BYTE, RFM22_PREAMBLE_BYTES);
    2974:	c7 01       	movw	r24, r14
    2976:	6a ea       	ldi	r22, 0xAA	; 170
    2978:	70 e0       	ldi	r23, 0x00	; 0
    297a:	45 e0       	ldi	r20, 0x05	; 5
    297c:	50 e0       	ldi	r21, 0x00	; 0
    297e:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <memset>
    bptr += RFM22_PREAMBLE_BYTES;
    2982:	c7 01       	movw	r24, r14
    2984:	05 96       	adiw	r24, 0x05	; 5
    }

  bptr = FHT8VCreate200usBitStreamBptr(bptr, command);
    2986:	be 01       	movw	r22, r28
    2988:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>
    298c:	d8 2e       	mov	r13, r24
    298e:	c9 2e       	mov	r12, r25

#if defined(ALLOW_STATS_TX)
  if(NULL != trailer)
    2990:	01 15       	cp	r16, r1
    2992:	11 05       	cpc	r17, r1
    2994:	79 f0       	breq	.+30     	; 0x29b4 <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)+0x74>
      }
    else
#endif
      {
      // Assume enough space in buffer for largest possible stats message.
      uint8_t * const tail = encodeFullStatsMessageCore(bptr, FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE - (bptr - bptrInitial), getStatsTXLevel(), false, trailer);
    2996:	0e 94 22 26 	call	0x4c44	; 0x4c44 <getStatsTXLevel()>
    299a:	ac 01       	movw	r20, r24
    299c:	6e 2d       	mov	r22, r14
    299e:	64 5c       	subi	r22, 0xC4	; 196
    29a0:	6d 19       	sub	r22, r13
    29a2:	8d 2d       	mov	r24, r13
    29a4:	9c 2d       	mov	r25, r12
    29a6:	20 e0       	ldi	r18, 0x00	; 0
    29a8:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)>
      if(NULL != tail) { bptr = tail; } // Encoding should not actually fail, but this copes gracefully if so!
    29ac:	00 97       	sbiw	r24, 0x00	; 0
    29ae:	11 f0       	breq	.+4      	; 0x29b4 <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)+0x74>
    29b0:	d8 2e       	mov	r13, r24
    29b2:	c9 2e       	mov	r12, r25
  // Check that the buffer end was not overrun.
  if(bptr - bptrInitial >= FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE) { panic(F("TX gen too large")); }
#endif

  return(bptr);
  }
    29b4:	8d 2d       	mov	r24, r13
    29b6:	9c 2d       	mov	r25, r12
    29b8:	df 91       	pop	r29
    29ba:	cf 91       	pop	r28
    29bc:	1f 91       	pop	r17
    29be:	0f 91       	pop	r16
    29c0:	ff 90       	pop	r15
    29c2:	ef 90       	pop	r14
    29c4:	df 90       	pop	r13
    29c6:	cf 90       	pop	r12
    29c8:	08 95       	ret

000029ca <FHT8VCreateValveSetCmdFrame_r(unsigned char*, fht8v_msg_t*, unsigned char)>:
//
// Implicitly decides whether to add optional header and trailer components.
//
// NOTE: with SUPPORT_TEMP_TX defined will also insert trailing stats payload where appropriate.
// Also reports local stats as if remote.
uint8_t *FHT8VCreateValveSetCmdFrame_r(uint8_t *const bptr, fht8v_msg_t *command, const uint8_t TRVPercentOpen)
    29ca:	bf 92       	push	r11
    29cc:	cf 92       	push	r12
    29ce:	df 92       	push	r13
    29d0:	ef 92       	push	r14
    29d2:	ff 92       	push	r15
    29d4:	0f 93       	push	r16
    29d6:	1f 93       	push	r17
    29d8:	df 93       	push	r29
    29da:	cf 93       	push	r28
    29dc:	cd b7       	in	r28, 0x3d	; 61
    29de:	de b7       	in	r29, 0x3e	; 62
    29e0:	27 97       	sbiw	r28, 0x07	; 7
    29e2:	0f b6       	in	r0, 0x3f	; 63
    29e4:	f8 94       	cli
    29e6:	de bf       	out	0x3e, r29	; 62
    29e8:	0f be       	out	0x3f, r0	; 63
    29ea:	cd bf       	out	0x3d, r28	; 61
    29ec:	7c 01       	movw	r14, r24
    29ee:	6b 01       	movw	r12, r22
    29f0:	b4 2e       	mov	r11, r20
  {
  const bool etmsp = enableTrailingStatsPayload();
    29f2:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <enableTrailingStatsPayload()>
  // OR if adding a trailer that the hub should see.
  // NOTE: this requires more buffer space.
  const bool doHeader = etmsp
#if defined(RFM22_SYNC_BCFH)
  // NOTE: the percentage-open threshold to call for heat from the boiler is set to allow the valve to open significantly, etc.
      || (TRVPercentOpen >= NominalRadValve.getMinValvePcReallyOpen())
    29f6:	88 23       	and	r24, r24
    29f8:	49 f4       	brne	.+18     	; 0x2a0c <FHT8VCreateValveSetCmdFrame_r(unsigned char*, fht8v_msg_t*, unsigned char)+0x42>
    29fa:	0e 94 6f 04 	call	0x8de	; 0x8de <ModelledRadValve::getMinValvePcReallyOpen()>
    29fe:	60 e0       	ldi	r22, 0x00	; 0
    2a00:	b8 16       	cp	r11, r24
    2a02:	08 f0       	brcs	.+2      	; 0x2a06 <FHT8VCreateValveSetCmdFrame_r(unsigned char*, fht8v_msg_t*, unsigned char)+0x3c>
    2a04:	61 e0       	ldi	r22, 0x01	; 1
    2a06:	00 e0       	ldi	r16, 0x00	; 0
    2a08:	10 e0       	ldi	r17, 0x00	; 0
    2a0a:	0e c0       	rjmp	.+28     	; 0x2a28 <FHT8VCreateValveSetCmdFrame_r(unsigned char*, fht8v_msg_t*, unsigned char)+0x5e>
//    trailer.tempC16 = getTemperatureC16(); // Use last value read.
//    }
  FullStatsMessageCore_t trailer;
  if(doTrailer)
    {
    populateCoreStats(&trailer);
    2a0c:	8e 01       	movw	r16, r28
    2a0e:	0f 5f       	subi	r16, 0xFF	; 255
    2a10:	1f 4f       	sbci	r17, 0xFF	; 255
    2a12:	c8 01       	movw	r24, r16
    2a14:	0e 94 20 08 	call	0x1040	; 0x1040 <populateCoreStats(FullStatsMessageCore*)>
    // Record stats as if remote, but secure, and with ID.
    recordCoreStats(true, &trailer);
    2a18:	81 e0       	ldi	r24, 0x01	; 1
    2a1a:	b8 01       	movw	r22, r16
    2a1c:	0e 94 12 1b 	call	0x3624	; 0x3624 <recordCoreStats(bool, FullStatsMessageCore const*)>
    // Ensure that no ID is encoded in the message sent on the air since it would be a repeat from the FHT8V frame.
    trailer.containsID = false;
    2a20:	89 81       	ldd	r24, Y+1	; 0x01
    2a22:	8e 7f       	andi	r24, 0xFE	; 254
    2a24:	89 83       	std	Y+1, r24	; 0x01
    2a26:	61 e0       	ldi	r22, 0x01	; 1
    }

  return(FHT8VCreateValveSetCmdFrameHT_r(bptr, doHeader, command, TRVPercentOpen, (doTrailer ? &trailer : NULL)));
    2a28:	c7 01       	movw	r24, r14
    2a2a:	a6 01       	movw	r20, r12
    2a2c:	2b 2d       	mov	r18, r11
    2a2e:	0e 94 a0 14 	call	0x2940	; 0x2940 <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)>
  }
    2a32:	27 96       	adiw	r28, 0x07	; 7
    2a34:	0f b6       	in	r0, 0x3f	; 63
    2a36:	f8 94       	cli
    2a38:	de bf       	out	0x3e, r29	; 62
    2a3a:	0f be       	out	0x3f, r0	; 63
    2a3c:	cd bf       	out	0x3d, r28	; 61
    2a3e:	cf 91       	pop	r28
    2a40:	df 91       	pop	r29
    2a42:	1f 91       	pop	r17
    2a44:	0f 91       	pop	r16
    2a46:	ff 90       	pop	r15
    2a48:	ef 90       	pop	r14
    2a4a:	df 90       	pop	r13
    2a4c:	cf 90       	pop	r12
    2a4e:	bf 90       	pop	r11
    2a50:	08 95       	ret

00002a52 <FHT8VCreateValveSetCmdFrame()>:
// Create FHT8V TRV outgoing valve-setting command frame (terminated with 0xff) in the shared TX buffer.
// The getTRVPercentOpen() result is used to generate the frame.
// HC1 and HC2 are fetched with the FHT8VGetHC1() and FHT8VGetHC2() calls, and address is always 0.
// The generated command frame can be resent indefinitely.
// If no valve is set up then this may simply terminate an empty buffer with 0xff.
void FHT8VCreateValveSetCmdFrame()
    2a52:	df 93       	push	r29
    2a54:	cf 93       	push	r28
    2a56:	00 d0       	rcall	.+0      	; 0x2a58 <FHT8VCreateValveSetCmdFrame()+0x6>
    2a58:	00 d0       	rcall	.+0      	; 0x2a5a <FHT8VCreateValveSetCmdFrame()+0x8>
    2a5a:	cd b7       	in	r28, 0x3d	; 61
    2a5c:	de b7       	in	r29, 0x3e	; 62
  {
  if(!localFHT8VTRVEnabled())
    2a5e:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <localFHT8VTRVEnabled()>
    2a62:	88 23       	and	r24, r24
    2a64:	21 f4       	brne	.+8      	; 0x2a6e <FHT8VCreateValveSetCmdFrame()+0x1c>
    {
    // Ensure that buffer is terminated, though empty.
    FHT8VTXCommandArea[0] = 0xff;
    2a66:	8f ef       	ldi	r24, 0xFF	; 255
    2a68:	80 93 e1 02 	sts	0x02E1, r24
    2a6c:	1b c0       	rjmp	.+54     	; 0x2aa4 <FHT8VCreateValveSetCmdFrame()+0x52>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2a6e:	f9 99       	sbic	0x1f, 1	; 31
    2a70:	fe cf       	rjmp	.-4      	; 0x2a6e <FHT8VCreateValveSetCmdFrame()+0x1c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2a72:	80 e1       	ldi	r24, 0x10	; 16
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	92 bd       	out	0x22, r25	; 34
    2a78:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2a7a:	f8 9a       	sbi	0x1f, 0	; 31
    2a7c:	20 b5       	in	r18, 0x20	; 32
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2a7e:	f9 99       	sbic	0x1f, 1	; 31
    2a80:	fe cf       	rjmp	.-4      	; 0x2a7e <FHT8VCreateValveSetCmdFrame()+0x2c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2a82:	81 e1       	ldi	r24, 0x11	; 17
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	92 bd       	out	0x22, r25	; 34
    2a88:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2a8a:	f8 9a       	sbi	0x1f, 0	; 31
    2a8c:	80 b5       	in	r24, 0x20	; 32
    return;
    }

  fht8v_msg_t command;
  command.hc1 = FHT8VGetHC1();
  command.hc2 = FHT8VGetHC2();
    2a8e:	8a 83       	std	Y+2, r24	; 0x02
    2a90:	40 91 1b 02 	lds	r20, 0x021B
    FHT8VTXCommandArea[0] = 0xff;
    return;
    }

  fht8v_msg_t command;
  command.hc1 = FHT8VGetHC1();
    2a94:	29 83       	std	Y+1, r18	; 0x01
  command.hc2 = FHT8VGetHC2();
#ifdef FHT8V_ADR_USED
  command.address = 0;
#endif

  FHT8VCreateValveSetCmdFrame_r(FHT8VTXCommandArea, &command, NominalRadValve.get());
    2a96:	81 ee       	ldi	r24, 0xE1	; 225
    2a98:	92 e0       	ldi	r25, 0x02	; 2
    2a9a:	be 01       	movw	r22, r28
    2a9c:	6f 5f       	subi	r22, 0xFF	; 255
    2a9e:	7f 4f       	sbci	r23, 0xFF	; 255
    2aa0:	0e 94 e5 14 	call	0x29ca	; 0x29ca <FHT8VCreateValveSetCmdFrame_r(unsigned char*, fht8v_msg_t*, unsigned char)>
  }
    2aa4:	0f 90       	pop	r0
    2aa6:	0f 90       	pop	r0
    2aa8:	0f 90       	pop	r0
    2aaa:	0f 90       	pop	r0
    2aac:	cf 91       	pop	r28
    2aae:	df 91       	pop	r29
    2ab0:	08 95       	ret

00002ab2 <doSync(bool)>:
    }

// Run the algorithm to get in sync with the receiver.
// Uses halfSecondCount.
// Iff this returns true then a(nother) call FHT8VPollSyncAndTX_Next() at or before each 0.5s from the cycle start should be made.
static bool doSync(const bool allowDoubleTX)
    2ab2:	1f 93       	push	r17
    2ab4:	df 93       	push	r29
    2ab6:	cf 93       	push	r28
    2ab8:	00 d0       	rcall	.+0      	; 0x2aba <doSync(bool)+0x8>
    2aba:	00 d0       	rcall	.+0      	; 0x2abc <doSync(bool)+0xa>
    2abc:	cd b7       	in	r28, 0x3d	; 61
    2abe:	de b7       	in	r29, 0x3e	; 62
    2ac0:	18 2f       	mov	r17, r24
  {
  // Do not attempt sync at all (and thus do not attempt any other TX) if local FHT8V valve disabled.
  if(!localFHT8VTRVEnabled())
    2ac2:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <localFHT8VTRVEnabled()>
    2ac6:	88 23       	and	r24, r24
    2ac8:	19 f4       	brne	.+6      	; 0x2ad0 <doSync(bool)+0x1e>
    { syncedWithFHT8V = false; return(false); }
    2aca:	10 92 de 02 	sts	0x02DE, r1
    2ace:	9e c0       	rjmp	.+316    	; 0x2c0c <doSync(bool)+0x15a>

  if(0 == syncStateFHT8V)
    2ad0:	80 91 e0 02 	lds	r24, 0x02E0
    2ad4:	88 23       	and	r24, r24
    2ad6:	39 f4       	brne	.+14     	; 0x2ae6 <doSync(bool)+0x34>
    {
    // Starting sync process.
    syncStateFHT8V = 241;
    2ad8:	81 ef       	ldi	r24, 0xF1	; 241
    2ada:	80 93 e0 02 	sts	0x02E0, r24
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_TIMESTAMP();
    DEBUG_SERIAL_PRINT(' ');
    //DEBUG_SERIAL_PRINTLN_FLASHSTRING("FHT8V syncing...");
#endif
    serialPrintlnAndFlush(F("FHT8V SYNC..."));
    2ade:	87 e4       	ldi	r24, 0x47	; 71
    2ae0:	91 e0       	ldi	r25, 0x01	; 1
    2ae2:	0e 94 28 27 	call	0x4e50	; 0x4e50 <serialPrintlnAndFlush(__FlashStringHelper const*)>
    }

  if(syncStateFHT8V >= 2)
    2ae6:	20 91 e0 02 	lds	r18, 0x02E0
    2aea:	22 30       	cpi	r18, 0x02	; 2
    2aec:	08 f4       	brcc	.+2      	; 0x2af0 <doSync(bool)+0x3e>
    2aee:	45 c0       	rjmp	.+138    	; 0x2b7a <doSync(bool)+0xc8>
    {
    // Generate and send sync (command 12) message immediately for odd-numbered ticks, ie once per second.
    if(syncStateFHT8V & 1)
    2af0:	20 ff       	sbrs	r18, 0
    2af2:	2b c0       	rjmp	.+86     	; 0x2b4a <doSync(bool)+0x98>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2af4:	f9 99       	sbic	0x1f, 1	; 31
    2af6:	fe cf       	rjmp	.-4      	; 0x2af4 <doSync(bool)+0x42>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2af8:	80 e1       	ldi	r24, 0x10	; 16
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	92 bd       	out	0x22, r25	; 34
    2afe:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2b00:	f8 9a       	sbi	0x1f, 0	; 31
    2b02:	30 b5       	in	r19, 0x20	; 32
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2b04:	f9 99       	sbic	0x1f, 1	; 31
    2b06:	fe cf       	rjmp	.-4      	; 0x2b04 <doSync(bool)+0x52>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2b08:	81 e1       	ldi	r24, 0x11	; 17
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	92 bd       	out	0x22, r25	; 34
    2b0e:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2b10:	f8 9a       	sbi	0x1f, 0	; 31
    2b12:	80 b5       	in	r24, 0x20	; 32
      {
      fht8v_msg_t command;
      command.hc1 = FHT8VGetHC1();
      command.hc2 = FHT8VGetHC2();
    2b14:	8a 83       	std	Y+2, r24	; 0x02
      command.command = 0x2c; // Command 12, extension byte present.
    2b16:	8c e2       	ldi	r24, 0x2C	; 44
    2b18:	8b 83       	std	Y+3, r24	; 0x03
      command.extension = syncStateFHT8V;
    2b1a:	2c 83       	std	Y+4, r18	; 0x04
    {
    // Generate and send sync (command 12) message immediately for odd-numbered ticks, ie once per second.
    if(syncStateFHT8V & 1)
      {
      fht8v_msg_t command;
      command.hc1 = FHT8VGetHC1();
    2b1c:	39 83       	std	Y+1, r19	; 0x01
      command.hc2 = FHT8VGetHC2();
      command.command = 0x2c; // Command 12, extension byte present.
      command.extension = syncStateFHT8V;
      FHT8VCreate200usBitStreamBptr(FHT8VTXCommandArea, &command);
    2b1e:	81 ee       	ldi	r24, 0xE1	; 225
    2b20:	92 e0       	ldi	r25, 0x02	; 2
    2b22:	be 01       	movw	r22, r28
    2b24:	6f 5f       	subi	r22, 0xFF	; 255
    2b26:	7f 4f       	sbci	r23, 0xFF	; 255
    2b28:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>
      if(halfSecondCount > 0)
    2b2c:	80 91 dd 02 	lds	r24, 0x02DD
    2b30:	88 23       	and	r24, r24
    2b32:	31 f0       	breq	.+12     	; 0x2b40 <doSync(bool)+0x8e>
        { sleepUntilSubCycleTimeOptionalRX((SUB_CYCLE_TICKS_PER_S/2) * halfSecondCount); }
    2b34:	82 95       	swap	r24
    2b36:	88 0f       	add	r24, r24
    2b38:	88 0f       	add	r24, r24
    2b3a:	80 7c       	andi	r24, 0xC0	; 192
    2b3c:	0e 94 34 14 	call	0x2868	; 0x2868 <sleepUntilSubCycleTimeOptionalRX(unsigned char)>
      FHT8VTXFHTQueueAndSendCmd(FHT8VTXCommandArea, allowDoubleTX); // SEND SYNC
    2b40:	81 ee       	ldi	r24, 0xE1	; 225
    2b42:	92 e0       	ldi	r25, 0x02	; 2
    2b44:	61 2f       	mov	r22, r17
    2b46:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)>
      DEBUG_SERIAL_PRINTLN();
#endif
      }

    // After penultimate sync TX set up time to sending of final sync command.
    if(1 == --syncStateFHT8V)
    2b4a:	80 91 e0 02 	lds	r24, 0x02E0
    2b4e:	81 50       	subi	r24, 0x01	; 1
    2b50:	80 93 e0 02 	sts	0x02E0, r24
    2b54:	81 30       	cpi	r24, 0x01	; 1
    2b56:	09 f0       	breq	.+2      	; 0x2b5a <doSync(bool)+0xa8>
    2b58:	58 c0       	rjmp	.+176    	; 0x2c0a <doSync(bool)+0x158>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2b5a:	f9 99       	sbic	0x1f, 1	; 31
    2b5c:	fe cf       	rjmp	.-4      	; 0x2b5a <doSync(bool)+0xa8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2b5e:	81 e1       	ldi	r24, 0x11	; 17
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	92 bd       	out	0x22, r25	; 34
    2b64:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2b66:	f8 9a       	sbi	0x1f, 0	; 31
    2b68:	90 b5       	in	r25, 0x20	; 32
      {
      // Set up timer to sent sync final (0) command
      // with formula: t = 0.5 * (HC2 & 7) + 4 seconds.
      halfSecondsToNextFHT8VTX = (FHT8VGetHC2() & 7) + 8; // Note units of half-seconds for this counter.
      halfSecondsToNextFHT8VTX -= (MAX_HSC - halfSecondCount);
    2b6a:	80 91 dd 02 	lds	r24, 0x02DD
    2b6e:	8b 5f       	subi	r24, 0xFB	; 251
    2b70:	97 70       	andi	r25, 0x07	; 7
    2b72:	89 0f       	add	r24, r25
    2b74:	80 93 df 02 	sts	0x02DF, r24
    2b78:	46 c0       	rjmp	.+140    	; 0x2c06 <doSync(bool)+0x154>
      }
    }

  else // syncStateFHT8V == 1 so waiting to send sync final (0) command...
    {
    if(--halfSecondsToNextFHT8VTX == 0)
    2b7a:	80 91 df 02 	lds	r24, 0x02DF
    2b7e:	81 50       	subi	r24, 0x01	; 1
    2b80:	80 93 df 02 	sts	0x02DF, r24
    2b84:	88 23       	and	r24, r24
    2b86:	09 f0       	breq	.+2      	; 0x2b8a <doSync(bool)+0xd8>
    2b88:	40 c0       	rjmp	.+128    	; 0x2c0a <doSync(bool)+0x158>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2b8a:	f9 99       	sbic	0x1f, 1	; 31
    2b8c:	fe cf       	rjmp	.-4      	; 0x2b8a <doSync(bool)+0xd8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2b8e:	80 e1       	ldi	r24, 0x10	; 16
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	92 bd       	out	0x22, r25	; 34
    2b94:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2b96:	f8 9a       	sbi	0x1f, 0	; 31
    2b98:	20 b5       	in	r18, 0x20	; 32
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2b9a:	f9 99       	sbic	0x1f, 1	; 31
    2b9c:	fe cf       	rjmp	.-4      	; 0x2b9a <doSync(bool)+0xe8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2b9e:	81 e1       	ldi	r24, 0x11	; 17
    2ba0:	90 e0       	ldi	r25, 0x00	; 0
    2ba2:	92 bd       	out	0x22, r25	; 34
    2ba4:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2ba6:	f8 9a       	sbi	0x1f, 0	; 31
    2ba8:	80 b5       	in	r24, 0x20	; 32
      {
      // Send sync final command.
      fht8v_msg_t command;
      command.hc1 = FHT8VGetHC1();
      command.hc2 = FHT8VGetHC2();
    2baa:	8a 83       	std	Y+2, r24	; 0x02
      command.command = 0x20; // Command 0, extension byte present.
    2bac:	80 e2       	ldi	r24, 0x20	; 32
    2bae:	8b 83       	std	Y+3, r24	; 0x03
      command.extension = 0; // DHD20130324: could set to TRVPercentOpen, but anything other than zero seems to lock up FHT8V-3 units.
    2bb0:	1c 82       	std	Y+4, r1	; 0x04
      FHT8V_isValveOpen = false; // Note that valve will be closed (0%) upon receipt.
    2bb2:	10 92 1d 03 	sts	0x031D, r1
    {
    if(--halfSecondsToNextFHT8VTX == 0)
      {
      // Send sync final command.
      fht8v_msg_t command;
      command.hc1 = FHT8VGetHC1();
    2bb6:	29 83       	std	Y+1, r18	; 0x01
      command.hc2 = FHT8VGetHC2();
      command.command = 0x20; // Command 0, extension byte present.
      command.extension = 0; // DHD20130324: could set to TRVPercentOpen, but anything other than zero seems to lock up FHT8V-3 units.
      FHT8V_isValveOpen = false; // Note that valve will be closed (0%) upon receipt.
      FHT8VCreate200usBitStreamBptr(FHT8VTXCommandArea, &command);      
    2bb8:	81 ee       	ldi	r24, 0xE1	; 225
    2bba:	92 e0       	ldi	r25, 0x02	; 2
    2bbc:	be 01       	movw	r22, r28
    2bbe:	6f 5f       	subi	r22, 0xFF	; 255
    2bc0:	7f 4f       	sbci	r23, 0xFF	; 255
    2bc2:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>
      if(halfSecondCount > 0) { sleepUntilSubCycleTimeOptionalRX((SUB_CYCLE_TICKS_PER_S/2) * halfSecondCount); }
    2bc6:	80 91 dd 02 	lds	r24, 0x02DD
    2bca:	88 23       	and	r24, r24
    2bcc:	31 f0       	breq	.+12     	; 0x2bda <doSync(bool)+0x128>
    2bce:	82 95       	swap	r24
    2bd0:	88 0f       	add	r24, r24
    2bd2:	88 0f       	add	r24, r24
    2bd4:	80 7c       	andi	r24, 0xC0	; 192
    2bd6:	0e 94 34 14 	call	0x2868	; 0x2868 <sleepUntilSubCycleTimeOptionalRX(unsigned char)>
      FHT8VTXFHTQueueAndSendCmd(FHT8VTXCommandArea, allowDoubleTX); // SEND SYNC FINAL
    2bda:	81 ee       	ldi	r24, 0xE1	; 225
    2bdc:	92 e0       	ldi	r25, 0x02	; 2
    2bde:	61 2f       	mov	r22, r17
    2be0:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)>
#if 0 && defined(DEBUG)
      DEBUG_SERIAL_TIMESTAMP();
      DEBUG_SERIAL_PRINT(' ');
      //DEBUG_SERIAL_PRINTLN_FLASHSTRING(" FHT8V SYNC FINAL");
#endif
      serialPrintlnAndFlush(F("FHT8V SYNC FINAL"));
    2be4:	86 e3       	ldi	r24, 0x36	; 54
    2be6:	91 e0       	ldi	r25, 0x01	; 1
    2be8:	0e 94 28 27 	call	0x4e50	; 0x4e50 <serialPrintlnAndFlush(__FlashStringHelper const*)>

      // Assume now in sync...
      syncedWithFHT8V = true;
    2bec:	81 e0       	ldi	r24, 0x01	; 1
    2bee:	80 93 de 02 	sts	0x02DE, r24
      // On PICAXE there was no time to recompute valve-setting command immediately after SYNC FINAL SEND...
      // Mark buffer as empty to get it filled with the real TRV valve-setting command ASAP.
      //*FHT8VTXCommandArea = 0xff;

      // On ATmega there is plenty of CPU heft to fill command buffer immediately with valve-setting command.
      FHT8VCreateValveSetCmdFrame();
    2bf2:	0e 94 29 15 	call	0x2a52	; 0x2a52 <FHT8VCreateValveSetCmdFrame()>

      // Set up correct delay to next TX; no more this minor cycle...
      halfSecondsToNextFHT8VTX = FHT8VTXGapHalfSeconds(command.hc2, halfSecondCount);
    2bf6:	90 91 dd 02 	lds	r25, 0x02DD
    2bfa:	9d 51       	subi	r25, 0x1D	; 29
    2bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bfe:	87 70       	andi	r24, 0x07	; 7
    2c00:	98 0f       	add	r25, r24
    2c02:	90 93 df 02 	sts	0x02DF, r25
    2c06:	80 e0       	ldi	r24, 0x00	; 0
    2c08:	01 c0       	rjmp	.+2      	; 0x2c0c <doSync(bool)+0x15a>
      return(false);
    2c0a:	81 e0       	ldi	r24, 0x01	; 1
    }

  // For simplicity, insist on being called every half-second during sync.
  // TODO: avoid forcing most of these calls to save some CPU/energy and improve responsiveness.
  return(true);
  }
    2c0c:	0f 90       	pop	r0
    2c0e:	0f 90       	pop	r0
    2c10:	0f 90       	pop	r0
    2c12:	0f 90       	pop	r0
    2c14:	cf 91       	pop	r28
    2c16:	df 91       	pop	r29
    2c18:	1f 91       	pop	r17
    2c1a:	08 95       	ret

00002c1c <FHT8VPollSyncAndTX_Next(bool)>:
//
// ALSO MANAGES RX FROM OTHER NODES WHEN ENABLED IN HUB MODE.
//
// Iff this returns false then no further TX slots will be needed
// (and thus this routine need not be called again) on this minor cycle
bool FHT8VPollSyncAndTX_Next(const bool allowDoubleTX)
    2c1c:	1f 93       	push	r17
    2c1e:	18 2f       	mov	r17, r24
  {
  ++halfSecondCount; // Reflects count of calls since _First(), ie how many 
    2c20:	90 91 dd 02 	lds	r25, 0x02DD
    2c24:	9f 5f       	subi	r25, 0xFF	; 255
    2c26:	90 93 dd 02 	sts	0x02DD, r25
#else

  // Give priority to getting in sync over all other tasks, though pass control to them afterwards...
  // NOTE: startup state, or state to force resync is: syncedWithFHT8V = 0 AND syncStateFHT8V = 0
  // Always make maximum effort to be heard by valve when syncing (ie do double TX).
  if(!syncedWithFHT8V) { return(doSync(true)); }
    2c2a:	80 91 de 02 	lds	r24, 0x02DE
    2c2e:	88 23       	and	r24, r24
    2c30:	21 f4       	brne	.+8      	; 0x2c3a <FHT8VPollSyncAndTX_Next(bool)+0x1e>
    2c32:	81 e0       	ldi	r24, 0x01	; 1
    2c34:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <doSync(bool)>
    2c38:	27 c0       	rjmp	.+78     	; 0x2c88 <FHT8VPollSyncAndTX_Next(bool)+0x6c>

  // TX is due this slot so do it (and no more will be needed this minor cycle).
  if(0 == --halfSecondsToNextFHT8VTX)
    2c3a:	80 91 df 02 	lds	r24, 0x02DF
    2c3e:	81 50       	subi	r24, 0x01	; 1
    2c40:	80 93 df 02 	sts	0x02DF, r24
    2c44:	88 23       	and	r24, r24
    2c46:	11 f0       	breq	.+4      	; 0x2c4c <FHT8VPollSyncAndTX_Next(bool)+0x30>
    2c48:	81 e0       	ldi	r24, 0x01	; 1
    2c4a:	1e c0       	rjmp	.+60     	; 0x2c88 <FHT8VPollSyncAndTX_Next(bool)+0x6c>
    {
    sleepUntilSubCycleTimeOptionalRX((SUB_CYCLE_TICKS_PER_S/2) * halfSecondCount); // Sleep.
    2c4c:	89 2f       	mov	r24, r25
    2c4e:	82 95       	swap	r24
    2c50:	88 0f       	add	r24, r24
    2c52:	88 0f       	add	r24, r24
    2c54:	80 7c       	andi	r24, 0xC0	; 192
    2c56:	0e 94 34 14 	call	0x2868	; 0x2868 <sleepUntilSubCycleTimeOptionalRX(unsigned char)>
    valveSettingTX(allowDoubleTX); // Should be heard by valve.
    2c5a:	81 2f       	mov	r24, r17
    2c5c:	0e 94 21 14 	call	0x2842	; 0x2842 <valveSettingTX(bool)>
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_TIMESTAMP();
    DEBUG_SERIAL_PRINT(' ');
    // DEBUG_SERIAL_PRINTLN_FLASHSTRING(" FHT8V TX");
#endif
    serialPrintlnAndFlush(F("FHT8V TX"));
    2c60:	8d e2       	ldi	r24, 0x2D	; 45
    2c62:	91 e0       	ldi	r25, 0x01	; 1
    2c64:	0e 94 28 27 	call	0x4e50	; 0x4e50 <serialPrintlnAndFlush(__FlashStringHelper const*)>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2c68:	f9 99       	sbic	0x1f, 1	; 31
    2c6a:	fe cf       	rjmp	.-4      	; 0x2c68 <FHT8VPollSyncAndTX_Next(bool)+0x4c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2c6c:	81 e1       	ldi	r24, 0x11	; 17
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	92 bd       	out	0x22, r25	; 34
    2c72:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2c74:	f8 9a       	sbi	0x1f, 0	; 31
    2c76:	90 b5       	in	r25, 0x20	; 32

    // Set up correct delay to next TX.
    halfSecondsToNextFHT8VTX = FHT8VTXGapHalfSeconds(FHT8VGetHC2(), halfSecondCount);
    2c78:	80 91 dd 02 	lds	r24, 0x02DD
    2c7c:	8d 51       	subi	r24, 0x1D	; 29
    2c7e:	97 70       	andi	r25, 0x07	; 7
    2c80:	89 0f       	add	r24, r25
    2c82:	80 93 df 02 	sts	0x02DF, r24
    2c86:	80 e0       	ldi	r24, 0x00	; 0
    }

  // Will need to TX in a following slot in this minor cycle...
  return(true);
#endif
  }
    2c88:	1f 91       	pop	r17
    2c8a:	08 95       	ret

00002c8c <FHT8VPollSyncAndTX_First(bool)>:
//
// Iff this returns true then call FHT8VPollSyncAndTX_Next() at or before each 0.5s from the cycle start
// to allow for possible transmissions.
//
// See https://sourceforge.net/p/opentrv/wiki/FHT%20Protocol/ for the underlying protocol.
bool FHT8VPollSyncAndTX_First(const bool allowDoubleTX)
    2c8c:	98 2f       	mov	r25, r24
  {
  halfSecondCount = 0;
    2c8e:	10 92 dd 02 	sts	0x02DD, r1
#else

  // Give priority to getting in sync over all other tasks, though pass control to them afterwards...
  // NOTE: startup state, or state to force resync is: syncedWithFHT8V = 0 AND syncStateFHT8V = 0
  // Always make maximum effort to be heard by valve when syncing (ie do double TX).
  if(!syncedWithFHT8V) { return(doSync(true)); }
    2c92:	80 91 de 02 	lds	r24, 0x02DE
    2c96:	88 23       	and	r24, r24
    2c98:	21 f4       	brne	.+8      	; 0x2ca2 <FHT8VPollSyncAndTX_First(bool)+0x16>
    2c9a:	81 e0       	ldi	r24, 0x01	; 1
    2c9c:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <doSync(bool)>
    2ca0:	08 95       	ret
#if 0 && defined(DEBUG)
   if(0 == halfSecondsToNextFHT8VTX) { panic(F("FHT8V hs count 0 too soon")); }
#endif

  // If no TX required in this minor cycle then can return false quickly (having decremented ticks-to-next-TX value suitably).
  if(halfSecondsToNextFHT8VTX > MAX_HSC+1)
    2ca2:	80 91 df 02 	lds	r24, 0x02DF
    2ca6:	85 30       	cpi	r24, 0x05	; 5
    2ca8:	28 f0       	brcs	.+10     	; 0x2cb4 <FHT8VPollSyncAndTX_First(bool)+0x28>
    {
    halfSecondsToNextFHT8VTX -= (MAX_HSC+1);
    2caa:	84 50       	subi	r24, 0x04	; 4
    2cac:	80 93 df 02 	sts	0x02DF, r24
    2cb0:	80 e0       	ldi	r24, 0x00	; 0
    2cb2:	08 95       	ret
    return(false); // No TX this minor cycle.
    }

  // TX is due this (first) slot so do it (and no more will be needed this minor cycle).
  if(0 == --halfSecondsToNextFHT8VTX)
    2cb4:	81 50       	subi	r24, 0x01	; 1
    2cb6:	80 93 df 02 	sts	0x02DF, r24
    2cba:	88 23       	and	r24, r24
    2cbc:	11 f0       	breq	.+4      	; 0x2cc2 <FHT8VPollSyncAndTX_First(bool)+0x36>
    2cbe:	81 e0       	ldi	r24, 0x01	; 1
    2cc0:	08 95       	ret
    {
    valveSettingTX(allowDoubleTX); // Should be heard by valve.
    2cc2:	89 2f       	mov	r24, r25
    2cc4:	0e 94 21 14 	call	0x2842	; 0x2842 <valveSettingTX(bool)>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2cc8:	f9 99       	sbic	0x1f, 1	; 31
    2cca:	fe cf       	rjmp	.-4      	; 0x2cc8 <FHT8VPollSyncAndTX_First(bool)+0x3c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2ccc:	81 e1       	ldi	r24, 0x11	; 17
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	92 bd       	out	0x22, r25	; 34
    2cd2:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2cd4:	f8 9a       	sbi	0x1f, 0	; 31
    2cd6:	80 b5       	in	r24, 0x20	; 32
    DEBUG_SERIAL_PRINT(' ');
    // DEBUG_SERIAL_PRINTLN_FLASHSTRING(" FHT8V TX");
    serialPrintlnAndFlush(F("FHT8V TX"));
#endif
    // Set up correct delay to next TX.
    halfSecondsToNextFHT8VTX = FHT8VTXGapHalfSeconds(FHT8VGetHC2(), 0);
    2cd8:	87 70       	andi	r24, 0x07	; 7
    2cda:	8d 51       	subi	r24, 0x1D	; 29
    2cdc:	80 93 df 02 	sts	0x02DF, r24
    2ce0:	80 e0       	ldi	r24, 0x00	; 0
    }

  // Will need to TX in a following slot in this minor cycle...
  return(true);
#endif
  }
    2ce2:	08 95       	ret

00002ce4 <getInboundStatsQueueOverrun()>:
static uint16_t inboundStatsQueueOverrun = 0;

// Get count of dropped inbound stats messages due to insufficient queue space.
uint16_t getInboundStatsQueueOverrun()
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    2ce4:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2ce6:	f8 94       	cli
    { return(inboundStatsQueueOverrun); }
    2ce8:	80 91 25 03 	lds	r24, 0x0325
    2cec:	90 91 26 03 	lds	r25, 0x0326
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2cf0:	2f bf       	out	0x3f, r18	; 63
  }
    2cf2:	08 95       	ret

00002cf4 <enableTrailingStatsPayload()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2cf4:	f9 99       	sbic	0x1f, 1	; 31
    2cf6:	fe cf       	rjmp	.-4      	; 0x2cf4 <enableTrailingStatsPayload()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2cf8:	8c e1       	ldi	r24, 0x1C	; 28
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	92 bd       	out	0x22, r25	; 34
    2cfe:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2d00:	f8 9a       	sbi	0x1f, 0	; 31
    2d02:	80 b5       	in	r24, 0x20	; 32
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	81 38       	cpi	r24, 0x81	; 129
    2d08:	08 f4       	brcc	.+2      	; 0x2d0c <enableTrailingStatsPayload()+0x18>
    2d0a:	91 e0       	ldi	r25, 0x01	; 1
#if !defined(enableTrailingStatsPayload)
// Returns true if an unencrypted minimal trailing static payload and similar (eg bare stats transmission) is permitted.
// True if the TX_ENABLE value is no higher than stTXmostUnsec.
// Some filtering may be required even if this is true.
// TODO: allow cacheing in RAM for speed.
bool enableTrailingStatsPayload() { return(eeprom_read_byte((uint8_t *)EE_START_STATS_TX_ENABLE) <= stTXmostUnsec); }
    2d0c:	89 2f       	mov	r24, r25
    2d0e:	08 95       	ret

00002d10 <quickValidateRawSimpleJSONMessage(char const*)>:
// Returns true unless the buffer clearly does not contain a possible valid raw JSON message.
// This message is expected to be one object wrapped in '{' and '}'
// and containing only ASCII printable/non-control characters in the range [32,126].
// The message must be no longer than MSG_JSON_MAX_LENGTH excluding trailing null.
// This only does a quick validation for egregious errors.
bool quickValidateRawSimpleJSONMessage(const char * const buf)
    2d10:	fc 01       	movw	r30, r24
  {
  if('{' != buf[0]) { return(false); }
    2d12:	80 81       	ld	r24, Z
    2d14:	8b 37       	cpi	r24, 0x7B	; 123
    2d16:	a9 f4       	brne	.+42     	; 0x2d42 <quickValidateRawSimpleJSONMessage(char const*)+0x32>
  // Scan up to maximum length for terminating '}'.
  const char *p = buf + 1;
  for(int i = 1; i < MSG_JSON_MAX_LENGTH; ++i)
    2d18:	9f 01       	movw	r18, r30
    2d1a:	2a 5c       	subi	r18, 0xCA	; 202
    2d1c:	3f 4f       	sbci	r19, 0xFF	; 255
    {
    const char c = *p++;
    2d1e:	91 81       	ldd	r25, Z+1	; 0x01
    // With a terminating '}' (followed by '\0') the message is superficially valid.
    if(('}' == c) && ('\0' == *p)) { return(true); }
    2d20:	9d 37       	cpi	r25, 0x7D	; 125
    2d22:	29 f4       	brne	.+10     	; 0x2d2e <quickValidateRawSimpleJSONMessage(char const*)+0x1e>
    2d24:	82 81       	ldd	r24, Z+2	; 0x02
    2d26:	88 23       	and	r24, r24
    2d28:	11 f4       	brne	.+4      	; 0x2d2e <quickValidateRawSimpleJSONMessage(char const*)+0x1e>
    2d2a:	81 e0       	ldi	r24, 0x01	; 1
    2d2c:	08 95       	ret
    // Non-printable/control character makes the message invalid.
    if((c < 32) || (c > 126)) { return(false); }
    2d2e:	89 2f       	mov	r24, r25
    2d30:	80 52       	subi	r24, 0x20	; 32
    2d32:	8f 35       	cpi	r24, 0x5F	; 95
    2d34:	30 f4       	brcc	.+12     	; 0x2d42 <quickValidateRawSimpleJSONMessage(char const*)+0x32>
    // Premature end of message renders it invalid.
    if('\0' == c) { return(false); }
    2d36:	99 23       	and	r25, r25
    2d38:	21 f0       	breq	.+8      	; 0x2d42 <quickValidateRawSimpleJSONMessage(char const*)+0x32>
    2d3a:	31 96       	adiw	r30, 0x01	; 1
bool quickValidateRawSimpleJSONMessage(const char * const buf)
  {
  if('{' != buf[0]) { return(false); }
  // Scan up to maximum length for terminating '}'.
  const char *p = buf + 1;
  for(int i = 1; i < MSG_JSON_MAX_LENGTH; ++i)
    2d3c:	e2 17       	cp	r30, r18
    2d3e:	f3 07       	cpc	r31, r19
    2d40:	71 f7       	brne	.-36     	; 0x2d1e <quickValidateRawSimpleJSONMessage(char const*)+0xe>
    2d42:	80 e0       	ldi	r24, 0x00	; 0
    if((c < 32) || (c > 126)) { return(false); }
    // Premature end of message renders it invalid.
    if('\0' == c) { return(false); }
    }
  return(false); // Bad (unterminated) message.
  }
    2d44:	08 95       	ret

00002d46 <adjustJSONMsgForTXAndComputeCRC(char*)>:
// Computes and returns 0x5B 7-bit CRC in range [0,127]
// or 0xff if the JSON message obviously invalid and should not be TXed.
// The CRC is initialised with the initial '{' character.
// NOTE: adjusts content in place.
#define adjustJSONMsgForTXAndComputeCRC_ERR 0xff // Error return value.
uint8_t adjustJSONMsgForTXAndComputeCRC(char * const bptr)
    2d46:	0f 93       	push	r16
    2d48:	1f 93       	push	r17
    2d4a:	18 2f       	mov	r17, r24
    2d4c:	09 2f       	mov	r16, r25
  {
  // Do initial quick validation before computing CRC, etc,
  if(!quickValidateRawSimpleJSONMessage(bptr)) { return(adjustJSONMsgForTXAndComputeCRC_ERR); }
    2d4e:	0e 94 88 16 	call	0x2d10	; 0x2d10 <quickValidateRawSimpleJSONMessage(char const*)>
    2d52:	88 23       	and	r24, r24
    2d54:	09 f4       	brne	.+2      	; 0x2d58 <adjustJSONMsgForTXAndComputeCRC(char*)+0x12>
    2d56:	51 c0       	rjmp	.+162    	; 0x2dfa <adjustJSONMsgForTXAndComputeCRC(char*)+0xb4>
    2d58:	81 2f       	mov	r24, r17
    2d5a:	90 2f       	mov	r25, r16
    2d5c:	9c 01       	movw	r18, r24
    2d5e:	f9 01       	movw	r30, r18
    2d60:	6b e7       	ldi	r22, 0x7B	; 123
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    2d62:	11 e0       	ldi	r17, 0x01	; 1
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
    2d64:	77 e3       	ldi	r23, 0x37	; 55
    2d66:	44 c0       	rjmp	.+136    	; 0x2df0 <adjustJSONMsgForTXAndComputeCRC(char*)+0xaa>
  uint8_t crc = '{';
  for(char *p = bptr; *++p; ) // Skip first char ('{'); loop until '\0'.
    {
    const char c = *p;
//    if(c & 0x80) { return(adjustJSONMsgForTXAndComputeCRC_ERR); } // No high-bits should be set!
    if(('}' == c) && ('\0' == *(p+1)))
    2d68:	9d 37       	cpi	r25, 0x7D	; 125
    2d6a:	19 f5       	brne	.+70     	; 0x2db2 <adjustJSONMsgForTXAndComputeCRC(char*)+0x6c>
    2d6c:	81 81       	ldd	r24, Z+1	; 0x01
    2d6e:	88 23       	and	r24, r24
    2d70:	01 f5       	brne	.+64     	; 0x2db2 <adjustJSONMsgForTXAndComputeCRC(char*)+0x6c>
      {
      seenTrailingClosingBrace = true;
      const char newC = c | 0x80;
      *p = newC; // Set high bit.
    2d72:	8d ef       	ldi	r24, 0xFD	; 253
    2d74:	80 83       	st	Z, r24
    2d76:	40 e8       	ldi	r20, 0x80	; 128
    2d78:	20 e0       	ldi	r18, 0x00	; 0
    2d7a:	30 e0       	ldi	r19, 0x00	; 0
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    2d7c:	71 e0       	ldi	r23, 0x01	; 1
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
    2d7e:	57 e3       	ldi	r21, 0x37	; 55
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
    2d80:	86 2f       	mov	r24, r22
    2d82:	90 e0       	ldi	r25, 0x00	; 0
    2d84:	e6 e0       	ldi	r30, 0x06	; 6
    2d86:	96 95       	lsr	r25
    2d88:	87 95       	ror	r24
    2d8a:	ea 95       	dec	r30
    2d8c:	e1 f7       	brne	.-8      	; 0x2d86 <adjustJSONMsgForTXAndComputeCRC(char*)+0x40>
    2d8e:	98 2f       	mov	r25, r24
    2d90:	91 70       	andi	r25, 0x01	; 1
        if(0 != (datum & i)) { bit = !bit; }
    2d92:	84 2f       	mov	r24, r20
    2d94:	8d 7f       	andi	r24, 0xFD	; 253
    2d96:	09 f0       	breq	.+2      	; 0x2d9a <adjustJSONMsgForTXAndComputeCRC(char*)+0x54>
    2d98:	97 27       	eor	r25, r23
        crc <<= 1;
    2d9a:	66 0f       	add	r22, r22
        if(bit) { crc ^= 0x37; }
    2d9c:	91 11       	cpse	r25, r1
    2d9e:	65 27       	eor	r22, r21
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
    2da0:	46 95       	lsr	r20
    2da2:	2f 5f       	subi	r18, 0xFF	; 255
    2da4:	3f 4f       	sbci	r19, 0xFF	; 255
    2da6:	28 30       	cpi	r18, 0x08	; 8
    2da8:	31 05       	cpc	r19, r1
    2daa:	51 f7       	brne	.-44     	; 0x2d80 <adjustJSONMsgForTXAndComputeCRC(char*)+0x3a>
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
        }
    return(crc & 0x7f);
    2dac:	86 2f       	mov	r24, r22
    2dae:	8f 77       	andi	r24, 0x7F	; 127
    2db0:	25 c0       	rjmp	.+74     	; 0x2dfc <adjustJSONMsgForTXAndComputeCRC(char*)+0xb6>
      const char newC = c | 0x80;
      *p = newC; // Set high bit.
      crc = crc7_5B_update(crc, (uint8_t)newC); // Update CRC.
      return(crc);
      }
    crc = crc7_5B_update(crc, (uint8_t)c); // Update CRC.
    2db2:	30 e8       	ldi	r19, 0x80	; 128
    2db4:	40 e0       	ldi	r20, 0x00	; 0
    2db6:	50 e0       	ldi	r21, 0x00	; 0
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    2db8:	a9 2f       	mov	r26, r25
    2dba:	b0 e0       	ldi	r27, 0x00	; 0
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
    2dbc:	86 2f       	mov	r24, r22
    2dbe:	90 e0       	ldi	r25, 0x00	; 0
    2dc0:	06 e0       	ldi	r16, 0x06	; 6
    2dc2:	96 95       	lsr	r25
    2dc4:	87 95       	ror	r24
    2dc6:	0a 95       	dec	r16
    2dc8:	e1 f7       	brne	.-8      	; 0x2dc2 <adjustJSONMsgForTXAndComputeCRC(char*)+0x7c>
    2dca:	28 2f       	mov	r18, r24
    2dcc:	21 70       	andi	r18, 0x01	; 1
        if(0 != (datum & i)) { bit = !bit; }
    2dce:	83 2f       	mov	r24, r19
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	8a 23       	and	r24, r26
    2dd4:	9b 23       	and	r25, r27
    2dd6:	89 2b       	or	r24, r25
    2dd8:	09 f0       	breq	.+2      	; 0x2ddc <adjustJSONMsgForTXAndComputeCRC(char*)+0x96>
    2dda:	21 27       	eor	r18, r17
        crc <<= 1;
    2ddc:	66 0f       	add	r22, r22
        if(bit) { crc ^= 0x37; }
    2dde:	21 11       	cpse	r18, r1
    2de0:	67 27       	eor	r22, r23
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
    2de2:	36 95       	lsr	r19
    2de4:	4f 5f       	subi	r20, 0xFF	; 255
    2de6:	5f 4f       	sbci	r21, 0xFF	; 255
    2de8:	48 30       	cpi	r20, 0x08	; 8
    2dea:	51 05       	cpc	r21, r1
    2dec:	39 f7       	brne	.-50     	; 0x2dbc <adjustJSONMsgForTXAndComputeCRC(char*)+0x76>
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
        }
    return(crc & 0x7f);
    2dee:	6f 77       	andi	r22, 0x7F	; 127
  // Do initial quick validation before computing CRC, etc,
  if(!quickValidateRawSimpleJSONMessage(bptr)) { return(adjustJSONMsgForTXAndComputeCRC_ERR); }
//  if('{' != *bptr) { return(adjustJSONMsgForTXAndComputeCRC_ERR); }
  bool seenTrailingClosingBrace = false;
  uint8_t crc = '{';
  for(char *p = bptr; *++p; ) // Skip first char ('{'); loop until '\0'.
    2df0:	31 96       	adiw	r30, 0x01	; 1
    2df2:	90 81       	ld	r25, Z
    2df4:	99 23       	and	r25, r25
    2df6:	09 f0       	breq	.+2      	; 0x2dfa <adjustJSONMsgForTXAndComputeCRC(char*)+0xb4>
    2df8:	b7 cf       	rjmp	.-146    	; 0x2d68 <adjustJSONMsgForTXAndComputeCRC(char*)+0x22>
    2dfa:	8f ef       	ldi	r24, 0xFF	; 255
      }
    crc = crc7_5B_update(crc, (uint8_t)c); // Update CRC.
    }
  if(!seenTrailingClosingBrace) { return(adjustJSONMsgForTXAndComputeCRC_ERR); } // Missing ending '}'.
  return(crc);
  }
    2dfc:	1f 91       	pop	r17
    2dfe:	0f 91       	pop	r16
    2e00:	08 95       	ret

00002e02 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)>:
// to allow easy handling with string functions.
//  * bptr  pointer to first byte/char (which must be '{')
//  * bufLen  remaining bytes in buffer starting at bptr
// NOTE: adjusts content in place iff the message appears to be valid JSON.
#define adjustJSONMsgForRXAndCheckCRC_ERR -1
int8_t adjustJSONMsgForRXAndCheckCRC(char * const bptr, const uint8_t bufLen)
    2e02:	cf 92       	push	r12
    2e04:	df 92       	push	r13
    2e06:	ef 92       	push	r14
    2e08:	ff 92       	push	r15
    2e0a:	0f 93       	push	r16
    2e0c:	1f 93       	push	r17
    2e0e:	cf 93       	push	r28
    2e10:	df 93       	push	r29
    2e12:	fc 01       	movw	r30, r24
  {
  if('{' != *bptr) { return(adjustJSONMsgForRXAndCheckCRC_ERR); }
    2e14:	80 81       	ld	r24, Z
    2e16:	8b 37       	cpi	r24, 0x7B	; 123
    2e18:	09 f0       	breq	.+2      	; 0x2e1c <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x1a>
    2e1a:	43 c0       	rjmp	.+134    	; 0x2ea2 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0xa0>
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("adjustJSONMsgForRXAndCheckCRC()... {");
#endif
  uint8_t crc = '{';
  // Scan up to maximum length for terminating '}'-with-high-bit.
  const uint8_t ml = min(MSG_JSON_MAX_LENGTH, bufLen);
    2e1c:	68 33       	cpi	r22, 0x38	; 56
    2e1e:	08 f0       	brcs	.+2      	; 0x2e22 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x20>
    2e20:	67 e3       	ldi	r22, 0x37	; 55
  char *p = bptr + 1;
    2e22:	ef 01       	movw	r28, r30
    2e24:	21 96       	adiw	r28, 0x01	; 1
    2e26:	3b e7       	ldi	r19, 0x7B	; 123
    2e28:	a1 e0       	ldi	r26, 0x01	; 1
    2e2a:	b0 e0       	ldi	r27, 0x00	; 0
  for(int i = 1; i < ml; ++i)
    2e2c:	e6 2e       	mov	r14, r22
    2e2e:	ff 24       	eor	r15, r15
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    2e30:	cc 24       	eor	r12, r12
    2e32:	c3 94       	inc	r12
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
    2e34:	47 e3       	ldi	r20, 0x37	; 55
    2e36:	d4 2e       	mov	r13, r20
    2e38:	31 c0       	rjmp	.+98     	; 0x2e9c <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x9a>
  // Scan up to maximum length for terminating '}'-with-high-bit.
  const uint8_t ml = min(MSG_JSON_MAX_LENGTH, bufLen);
  char *p = bptr + 1;
  for(int i = 1; i < ml; ++i)
    {
    const char c = *p++;
    2e3a:	fe 01       	movw	r30, r28
    2e3c:	71 91       	ld	r23, Z+
    crc = crc7_5B_update(crc, (uint8_t)c); // Update CRC.
    2e3e:	60 e8       	ldi	r22, 0x80	; 128
    2e40:	40 e0       	ldi	r20, 0x00	; 0
    2e42:	50 e0       	ldi	r21, 0x00	; 0
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    2e44:	07 2f       	mov	r16, r23
    2e46:	10 e0       	ldi	r17, 0x00	; 0
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
    2e48:	83 2f       	mov	r24, r19
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	26 e0       	ldi	r18, 0x06	; 6
    2e4e:	96 95       	lsr	r25
    2e50:	87 95       	ror	r24
    2e52:	2a 95       	dec	r18
    2e54:	e1 f7       	brne	.-8      	; 0x2e4e <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x4c>
    2e56:	28 2f       	mov	r18, r24
    2e58:	21 70       	andi	r18, 0x01	; 1
        if(0 != (datum & i)) { bit = !bit; }
    2e5a:	86 2f       	mov	r24, r22
    2e5c:	90 e0       	ldi	r25, 0x00	; 0
    2e5e:	80 23       	and	r24, r16
    2e60:	91 23       	and	r25, r17
    2e62:	89 2b       	or	r24, r25
    2e64:	09 f0       	breq	.+2      	; 0x2e68 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x66>
    2e66:	2c 25       	eor	r18, r12
        crc <<= 1;
    2e68:	33 0f       	add	r19, r19
        if(bit) { crc ^= 0x37; }
    2e6a:	21 11       	cpse	r18, r1
    2e6c:	3d 25       	eor	r19, r13
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
    2e6e:	66 95       	lsr	r22
    2e70:	4f 5f       	subi	r20, 0xFF	; 255
    2e72:	5f 4f       	sbci	r21, 0xFF	; 255
    2e74:	48 30       	cpi	r20, 0x08	; 8
    2e76:	51 05       	cpc	r21, r1
    2e78:	39 f7       	brne	.-50     	; 0x2e48 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x46>
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
        }
    return(crc & 0x7f);
    2e7a:	3f 77       	andi	r19, 0x7F	; 127
#endif
      return(i+1);
      }
#endif
    // With a terminating '}' (followed by '\0') the message is superficially valid.
    if((((char)('}' | 0x80)) == c) && (crc == (uint8_t)*p))
    2e7c:	7d 3f       	cpi	r23, 0xFD	; 253
    2e7e:	49 f4       	brne	.+18     	; 0x2e92 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x90>
    2e80:	80 81       	ld	r24, Z
    2e82:	38 17       	cp	r19, r24
    2e84:	31 f4       	brne	.+12     	; 0x2e92 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x90>
      {
      *(p - 1) = '}';
    2e86:	8d e7       	ldi	r24, 0x7D	; 125
    2e88:	88 83       	st	Y, r24
      *p = '\0'; // Null terminate for use as a text string.
    2e8a:	10 82       	st	Z, r1
#if 0 && defined(DEBUG)
      DEBUG_SERIAL_PRINTLN_FLASHSTRING("} OK with CRC");
#endif
      return(i+1);
    2e8c:	8a 2f       	mov	r24, r26
    2e8e:	8f 5f       	subi	r24, 0xFF	; 255
    2e90:	09 c0       	rjmp	.+18     	; 0x2ea4 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0xa2>
      }
    // Non-printable/control character makes the message invalid.
    if((c < 32) || (c > 126))
    2e92:	70 52       	subi	r23, 0x20	; 32
    2e94:	7f 35       	cpi	r23, 0x5F	; 95
    2e96:	28 f4       	brcc	.+10     	; 0x2ea2 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0xa0>
#endif
  uint8_t crc = '{';
  // Scan up to maximum length for terminating '}'-with-high-bit.
  const uint8_t ml = min(MSG_JSON_MAX_LENGTH, bufLen);
  char *p = bptr + 1;
  for(int i = 1; i < ml; ++i)
    2e98:	11 96       	adiw	r26, 0x01	; 1
    2e9a:	ef 01       	movw	r28, r30
    2e9c:	ae 15       	cp	r26, r14
    2e9e:	bf 05       	cpc	r27, r15
    2ea0:	64 f2       	brlt	.-104    	; 0x2e3a <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x38>
    2ea2:	8f ef       	ldi	r24, 0xFF	; 255
    }
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING(" bad: unterminated");
#endif
  return(adjustJSONMsgForRXAndCheckCRC_ERR); // Bad (unterminated) message.
  }
    2ea4:	df 91       	pop	r29
    2ea6:	cf 91       	pop	r28
    2ea8:	1f 91       	pop	r17
    2eaa:	0f 91       	pop	r16
    2eac:	ff 90       	pop	r15
    2eae:	ef 90       	pop	r14
    2eb0:	df 90       	pop	r13
    2eb2:	cf 90       	pop	r12
    2eb4:	08 95       	ret

00002eb6 <BufPrint::write(unsigned char)>:


// Print a single char to a bounded buffer; returns 1 if successful, else 0 if full.
size_t BufPrint::write(const uint8_t c)
    2eb6:	dc 01       	movw	r26, r24
  {
  if(size < capacity) { b[size++] = c; b[size] = '\0'; return(1); }
    2eb8:	17 96       	adiw	r26, 0x07	; 7
    2eba:	9c 91       	ld	r25, X
    2ebc:	17 97       	sbiw	r26, 0x07	; 7
    2ebe:	16 96       	adiw	r26, 0x06	; 6
    2ec0:	8c 91       	ld	r24, X
    2ec2:	16 97       	sbiw	r26, 0x06	; 6
    2ec4:	98 17       	cp	r25, r24
    2ec6:	18 f0       	brcs	.+6      	; 0x2ece <BufPrint::write(unsigned char)+0x18>
    2ec8:	20 e0       	ldi	r18, 0x00	; 0
    2eca:	30 e0       	ldi	r19, 0x00	; 0
    2ecc:	15 c0       	rjmp	.+42     	; 0x2ef8 <BufPrint::write(unsigned char)+0x42>
    2ece:	14 96       	adiw	r26, 0x04	; 4
    2ed0:	ed 91       	ld	r30, X+
    2ed2:	fc 91       	ld	r31, X
    2ed4:	15 97       	sbiw	r26, 0x05	; 5
    2ed6:	e9 0f       	add	r30, r25
    2ed8:	f1 1d       	adc	r31, r1
    2eda:	60 83       	st	Z, r22
    2edc:	89 2f       	mov	r24, r25
    2ede:	8f 5f       	subi	r24, 0xFF	; 255
    2ee0:	17 96       	adiw	r26, 0x07	; 7
    2ee2:	8c 93       	st	X, r24
    2ee4:	17 97       	sbiw	r26, 0x07	; 7
    2ee6:	14 96       	adiw	r26, 0x04	; 4
    2ee8:	ed 91       	ld	r30, X+
    2eea:	fc 91       	ld	r31, X
    2eec:	15 97       	sbiw	r26, 0x05	; 5
    2eee:	e8 0f       	add	r30, r24
    2ef0:	f1 1d       	adc	r31, r1
    2ef2:	10 82       	st	Z, r1
    2ef4:	21 e0       	ldi	r18, 0x01	; 1
    2ef6:	30 e0       	ldi	r19, 0x00	; 0
  return(0);
  }
    2ef8:	c9 01       	movw	r24, r18
    2efa:	08 95       	ret

00002efc <SimpleStatsRotationBase::print(BufPrint&, SimpleStatsRotationBase::DescValueTuple const&, bool&) const>:
  return(false); // FAILED: full.
  }

#if defined(ALLOW_JSON_OUTPUT)
// Print an object field "name":value to the given buffer.
size_t SimpleStatsRotationBase::print(BufPrint &bp, const SimpleStatsRotationBase::DescValueTuple &s, bool &commaPending) const
    2efc:	4f 92       	push	r4
    2efe:	5f 92       	push	r5
    2f00:	6f 92       	push	r6
    2f02:	7f 92       	push	r7
    2f04:	8f 92       	push	r8
    2f06:	9f 92       	push	r9
    2f08:	af 92       	push	r10
    2f0a:	bf 92       	push	r11
    2f0c:	cf 92       	push	r12
    2f0e:	df 92       	push	r13
    2f10:	ef 92       	push	r14
    2f12:	ff 92       	push	r15
    2f14:	0f 93       	push	r16
    2f16:	1f 93       	push	r17
    2f18:	cf 93       	push	r28
    2f1a:	df 93       	push	r29
    2f1c:	96 2e       	mov	r9, r22
    2f1e:	87 2e       	mov	r8, r23
    2f20:	3a 01       	movw	r6, r20
    2f22:	29 01       	movw	r4, r18
  {
  size_t w = 0;
  if(commaPending) { w += bp.print(','); }
    2f24:	f9 01       	movw	r30, r18
    2f26:	80 81       	ld	r24, Z
    2f28:	88 23       	and	r24, r24
    2f2a:	19 f4       	brne	.+6      	; 0x2f32 <SimpleStatsRotationBase::print(BufPrint&, SimpleStatsRotationBase::DescValueTuple const&, bool&) const+0x36>
    2f2c:	c0 e0       	ldi	r28, 0x00	; 0
    2f2e:	d0 e0       	ldi	r29, 0x00	; 0
    2f30:	06 c0       	rjmp	.+12     	; 0x2f3e <SimpleStatsRotationBase::print(BufPrint&, SimpleStatsRotationBase::DescValueTuple const&, bool&) const+0x42>
    2f32:	86 2f       	mov	r24, r22
    2f34:	97 2f       	mov	r25, r23
    2f36:	6c e2       	ldi	r22, 0x2C	; 44
    2f38:	0e 94 59 3b 	call	0x76b2	; 0x76b2 <Print::print(char)>
    2f3c:	ec 01       	movw	r28, r24
  w += bp.print('"');
    2f3e:	89 2d       	mov	r24, r9
    2f40:	98 2d       	mov	r25, r8
    2f42:	62 e2       	ldi	r22, 0x22	; 34
    2f44:	0e 94 59 3b 	call	0x76b2	; 0x76b2 <Print::print(char)>
    2f48:	8c 01       	movw	r16, r24
  w += bp.print(s.descriptor.key); // Assumed not to need escaping in any way.
    2f4a:	f3 01       	movw	r30, r6
    2f4c:	60 81       	ld	r22, Z
    2f4e:	71 81       	ldd	r23, Z+1	; 0x01
    2f50:	89 2d       	mov	r24, r9
    2f52:	98 2d       	mov	r25, r8
    2f54:	0e 94 9a 3c 	call	0x7934	; 0x7934 <Print::print(char const*)>
    2f58:	5c 01       	movw	r10, r24
  w += bp.print('"');
    2f5a:	89 2d       	mov	r24, r9
    2f5c:	98 2d       	mov	r25, r8
    2f5e:	62 e2       	ldi	r22, 0x22	; 34
    2f60:	0e 94 59 3b 	call	0x76b2	; 0x76b2 <Print::print(char)>
    2f64:	6c 01       	movw	r12, r24
  w += bp.print(':');
    2f66:	89 2d       	mov	r24, r9
    2f68:	98 2d       	mov	r25, r8
    2f6a:	6a e3       	ldi	r22, 0x3A	; 58
    2f6c:	0e 94 59 3b 	call	0x76b2	; 0x76b2 <Print::print(char)>
    2f70:	7c 01       	movw	r14, r24
  w += bp.print(s.value);
    2f72:	f3 01       	movw	r30, r6
    2f74:	64 81       	ldd	r22, Z+4	; 0x04
    2f76:	75 81       	ldd	r23, Z+5	; 0x05
    2f78:	89 2d       	mov	r24, r9
    2f7a:	98 2d       	mov	r25, r8
    2f7c:	4a e0       	ldi	r20, 0x0A	; 10
    2f7e:	50 e0       	ldi	r21, 0x00	; 0
    2f80:	0e 94 87 3c 	call	0x790e	; 0x790e <Print::print(int, int)>
// Print an object field "name":value to the given buffer.
size_t SimpleStatsRotationBase::print(BufPrint &bp, const SimpleStatsRotationBase::DescValueTuple &s, bool &commaPending) const
  {
  size_t w = 0;
  if(commaPending) { w += bp.print(','); }
  w += bp.print('"');
    2f84:	0c 0f       	add	r16, r28
    2f86:	1d 1f       	adc	r17, r29
  w += bp.print(s.descriptor.key); // Assumed not to need escaping in any way.
    2f88:	0a 0d       	add	r16, r10
    2f8a:	1b 1d       	adc	r17, r11
  w += bp.print('"');
    2f8c:	0c 0d       	add	r16, r12
    2f8e:	1d 1d       	adc	r17, r13
  w += bp.print(':');
    2f90:	0e 0d       	add	r16, r14
    2f92:	1f 1d       	adc	r17, r15
  w += bp.print(s.value);
  commaPending = true;
    2f94:	21 e0       	ldi	r18, 0x01	; 1
    2f96:	f2 01       	movw	r30, r4
    2f98:	20 83       	st	Z, r18
    2f9a:	08 0f       	add	r16, r24
    2f9c:	19 1f       	adc	r17, r25
  return(w);
  }
    2f9e:	c8 01       	movw	r24, r16
    2fa0:	df 91       	pop	r29
    2fa2:	cf 91       	pop	r28
    2fa4:	1f 91       	pop	r17
    2fa6:	0f 91       	pop	r16
    2fa8:	ff 90       	pop	r15
    2faa:	ef 90       	pop	r14
    2fac:	df 90       	pop	r13
    2fae:	cf 90       	pop	r12
    2fb0:	bf 90       	pop	r11
    2fb2:	af 90       	pop	r10
    2fb4:	9f 90       	pop	r9
    2fb6:	8f 90       	pop	r8
    2fb8:	7f 90       	pop	r7
    2fba:	6f 90       	pop	r6
    2fbc:	5f 90       	pop	r5
    2fbe:	4f 90       	pop	r4
    2fc0:	08 95       	ret

00002fc2 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)>:
//   * maximise  if true attempt to maximise the number of stats squeezed into each frame,
//       potentially at the cost of signficant CPU time
//   * suppressClearChanged  if true then 'changed' flag for included fields is not cleared by this
//       allowing them to continue to be treated as higher priority
uint8_t SimpleStatsRotationBase::writeJSON(uint8_t *const buf, const uint8_t bufSize, const uint8_t sensitivity,
                                           const bool maximise, const bool suppressClearChanged)
    2fc2:	2f 92       	push	r2
    2fc4:	3f 92       	push	r3
    2fc6:	4f 92       	push	r4
    2fc8:	5f 92       	push	r5
    2fca:	6f 92       	push	r6
    2fcc:	7f 92       	push	r7
    2fce:	8f 92       	push	r8
    2fd0:	9f 92       	push	r9
    2fd2:	af 92       	push	r10
    2fd4:	bf 92       	push	r11
    2fd6:	cf 92       	push	r12
    2fd8:	df 92       	push	r13
    2fda:	ef 92       	push	r14
    2fdc:	ff 92       	push	r15
    2fde:	0f 93       	push	r16
    2fe0:	1f 93       	push	r17
    2fe2:	df 93       	push	r29
    2fe4:	cf 93       	push	r28
    2fe6:	cd b7       	in	r28, 0x3d	; 61
    2fe8:	de b7       	in	r29, 0x3e	; 62
    2fea:	2d 97       	sbiw	r28, 0x0d	; 13
    2fec:	0f b6       	in	r0, 0x3f	; 63
    2fee:	f8 94       	cli
    2ff0:	de bf       	out	0x3e, r29	; 62
    2ff2:	0f be       	out	0x3f, r0	; 63
    2ff4:	cd bf       	out	0x3d, r28	; 61
    2ff6:	6c 01       	movw	r12, r24
    2ff8:	1b 01       	movw	r2, r22
    2ffa:	f4 2e       	mov	r15, r20
    2ffc:	2b 87       	std	Y+11, r18	; 0x0b
    2ffe:	0c 87       	std	Y+12, r16	; 0x0c
    3000:	ed 86       	std	Y+13, r14	; 0x0d
  {
#ifdef DEBUG
  if(NULL == buf) { panic(0); } // Should never happen.
    3002:	61 15       	cp	r22, r1
    3004:	71 05       	cpc	r23, r1
    3006:	21 f4       	brne	.+8      	; 0x3010 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x4e>
    3008:	80 e0       	ldi	r24, 0x00	; 0
    300a:	90 e0       	ldi	r25, 0x00	; 0
    300c:	0e 94 ec 2f 	call	0x5fd8	; 0x5fd8 <panic(__FlashStringHelper const*)>
#endif
  // Minimum size is for {"@":""} plus null plus extra padding char/byte to check for overrun.
  if(bufSize < 10) { return(0); } // Failed.
    3010:	39 e0       	ldi	r19, 0x09	; 9
    3012:	3f 15       	cp	r19, r15
    3014:	08 f0       	brcs	.+2      	; 0x3018 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x56>
    3016:	80 c1       	rjmp	.+768    	; 0x3318 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x356>
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    3018:	1d 82       	std	Y+5, r1	; 0x05
    301a:	1c 82       	std	Y+4, r1	; 0x04
    uint8_t mark;
  public:
    // Wrap around a buffer of size bufSize-1 chars and a trailing '\0'.
    // The buffer must be of at least size 1.
    // A buffer of size n can accommodate n-1 characters.
    BufPrint(char *buf, uint8_t bufSize) : b(buf), capacity(bufSize-1), size(0), mark(0) { buf[0] = '\0'; }
    301c:	80 e8       	ldi	r24, 0x80	; 128
    301e:	91 e0       	ldi	r25, 0x01	; 1
    3020:	9b 83       	std	Y+3, r25	; 0x03
    3022:	8a 83       	std	Y+2, r24	; 0x02
    3024:	3f 82       	std	Y+7, r3	; 0x07
    3026:	2e 82       	std	Y+6, r2	; 0x06
    3028:	fa 94       	dec	r15
    302a:	f8 86       	std	Y+8, r15	; 0x08
    302c:	f3 94       	inc	r15
    302e:	19 86       	std	Y+9, r1	; 0x09
    3030:	1a 86       	std	Y+10, r1	; 0x0a
    3032:	d1 01       	movw	r26, r2
    3034:	1c 92       	st	X, r1

  // Write/print to buffer passed in.
  BufPrint bp((char *)buf, bufSize);
  // True if field has been written and will need a ',' if another field is written.
  bool commaPending = false;
    3036:	19 82       	std	Y+1, r1	; 0x01

  // Start object.
  bp.print('{');
    3038:	8e 01       	movw	r16, r28
    303a:	0e 5f       	subi	r16, 0xFE	; 254
    303c:	1f 4f       	sbci	r17, 0xFF	; 255
    303e:	c8 01       	movw	r24, r16
    3040:	6b e7       	ldi	r22, 0x7B	; 123
    3042:	0e 94 59 3b 	call	0x76b2	; 0x76b2 <Print::print(char)>

  // Write ID first.
  // If an explicit ID is supplied then use it
  // else compute it taking the housecode by preference if it is set.
  bp.print(F("\"@\":\""));
    3046:	c8 01       	movw	r24, r16
    3048:	6a e5       	ldi	r22, 0x5A	; 90
    304a:	71 e0       	ldi	r23, 0x01	; 1
    304c:	0e 94 36 3b 	call	0x766c	; 0x766c <Print::print(__FlashStringHelper const*)>

#ifdef USE_MODULE_FHT8VSIMPLE
  if(NULL != id) { bp.print(id); } // Value has to be 'safe' (eg no " nor \ in it).
    3050:	f6 01       	movw	r30, r12
    3052:	67 81       	ldd	r22, Z+7	; 0x07
    3054:	70 85       	ldd	r23, Z+8	; 0x08
    3056:	61 15       	cp	r22, r1
    3058:	71 05       	cpc	r23, r1
    305a:	21 f0       	breq	.+8      	; 0x3064 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0xa2>
    305c:	c8 01       	movw	r24, r16
    305e:	0e 94 9a 3c 	call	0x7934	; 0x7934 <Print::print(char const*)>
    3062:	55 c0       	rjmp	.+170    	; 0x310e <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x14c>
  else
    {
    if(localFHT8VTRVEnabled())
    3064:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <localFHT8VTRVEnabled()>
    3068:	88 23       	and	r24, r24
    306a:	39 f0       	breq	.+14     	; 0x307a <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0xb8>
      {
      const uint8_t hc1 = FHT8VGetHC1();
    306c:	0e 94 48 11 	call	0x2290	; 0x2290 <FHT8VGetHC1()>
    3070:	18 2f       	mov	r17, r24
      const uint8_t hc2 = FHT8VGetHC2();
    3072:	0e 94 51 11 	call	0x22a2	; 0x22a2 <FHT8VGetHC2()>
    3076:	08 2f       	mov	r16, r24
    3078:	10 c0       	rjmp	.+32     	; 0x309a <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0xd8>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    307a:	f9 99       	sbic	0x1f, 1	; 31
    307c:	fe cf       	rjmp	.-4      	; 0x307a <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0xb8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    307e:	84 e1       	ldi	r24, 0x14	; 20
    3080:	90 e0       	ldi	r25, 0x00	; 0
    3082:	92 bd       	out	0x22, r25	; 34
    3084:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    3086:	f8 9a       	sbi	0x1f, 0	; 31
    3088:	10 b5       	in	r17, 0x20	; 32
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    308a:	f9 99       	sbic	0x1f, 1	; 31
    308c:	fe cf       	rjmp	.-4      	; 0x308a <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0xc8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    308e:	85 e1       	ldi	r24, 0x15	; 21
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	92 bd       	out	0x22, r25	; 34
    3094:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    3096:	f8 9a       	sbi	0x1f, 0	; 31
    3098:	00 b5       	in	r16, 0x20	; 32


// Extract ASCII hex digit in range [0-9][a-f] (ie lowercase) from bottom 4 bits of argument.
// Eg, passing in 0xa (10) returns 'a'.
// The top 4 bits are ignored.
static inline char hexDigit(const uint8_t value) { const uint8_t v = 0xf&value; if(v<10) { return('0'+v); } return('a'+(v-10)); }
    309a:	81 2f       	mov	r24, r17
    309c:	90 e0       	ldi	r25, 0x00	; 0
    309e:	74 e0       	ldi	r23, 0x04	; 4
    30a0:	95 95       	asr	r25
    30a2:	87 95       	ror	r24
    30a4:	7a 95       	dec	r23
    30a6:	e1 f7       	brne	.-8      	; 0x30a0 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0xde>
    30a8:	68 2f       	mov	r22, r24
    30aa:	6f 70       	andi	r22, 0x0F	; 15
    30ac:	6a 30       	cpi	r22, 0x0A	; 10
    30ae:	10 f4       	brcc	.+4      	; 0x30b4 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0xf2>
    30b0:	60 5d       	subi	r22, 0xD0	; 208
    30b2:	01 c0       	rjmp	.+2      	; 0x30b6 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0xf4>
    30b4:	69 5a       	subi	r22, 0xA9	; 169
    else
#endif
      {
      const uint8_t id1 = eeprom_read_byte(0 + (uint8_t *)EE_START_ID);
      const uint8_t id2 = eeprom_read_byte(1 + (uint8_t *)EE_START_ID);
      bp.print(hexDigit(id1 >> 4));
    30b6:	ce 01       	movw	r24, r28
    30b8:	02 96       	adiw	r24, 0x02	; 2
    30ba:	0e 94 59 3b 	call	0x76b2	; 0x76b2 <Print::print(char)>
    30be:	61 2f       	mov	r22, r17
    30c0:	6f 70       	andi	r22, 0x0F	; 15
    30c2:	6a 30       	cpi	r22, 0x0A	; 10
    30c4:	10 f4       	brcc	.+4      	; 0x30ca <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x108>
    30c6:	60 5d       	subi	r22, 0xD0	; 208
    30c8:	01 c0       	rjmp	.+2      	; 0x30cc <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x10a>
    30ca:	69 5a       	subi	r22, 0xA9	; 169
      bp.print(hexDigit(id1));
    30cc:	ce 01       	movw	r24, r28
    30ce:	02 96       	adiw	r24, 0x02	; 2
    30d0:	0e 94 59 3b 	call	0x76b2	; 0x76b2 <Print::print(char)>
    30d4:	80 2f       	mov	r24, r16
    30d6:	90 e0       	ldi	r25, 0x00	; 0
    30d8:	64 e0       	ldi	r22, 0x04	; 4
    30da:	95 95       	asr	r25
    30dc:	87 95       	ror	r24
    30de:	6a 95       	dec	r22
    30e0:	e1 f7       	brne	.-8      	; 0x30da <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x118>
    30e2:	68 2f       	mov	r22, r24
    30e4:	6f 70       	andi	r22, 0x0F	; 15
    30e6:	6a 30       	cpi	r22, 0x0A	; 10
    30e8:	10 f4       	brcc	.+4      	; 0x30ee <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x12c>
    30ea:	60 5d       	subi	r22, 0xD0	; 208
    30ec:	01 c0       	rjmp	.+2      	; 0x30f0 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x12e>
    30ee:	69 5a       	subi	r22, 0xA9	; 169
      bp.print(hexDigit(id2 >> 4));
    30f0:	ce 01       	movw	r24, r28
    30f2:	02 96       	adiw	r24, 0x02	; 2
    30f4:	0e 94 59 3b 	call	0x76b2	; 0x76b2 <Print::print(char)>
    30f8:	60 2f       	mov	r22, r16
    30fa:	6f 70       	andi	r22, 0x0F	; 15
    30fc:	6a 30       	cpi	r22, 0x0A	; 10
    30fe:	10 f4       	brcc	.+4      	; 0x3104 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x142>
    3100:	60 5d       	subi	r22, 0xD0	; 208
    3102:	01 c0       	rjmp	.+2      	; 0x3106 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x144>
    3104:	69 5a       	subi	r22, 0xA9	; 169
      bp.print(hexDigit(id2));
    3106:	ce 01       	movw	r24, r28
    3108:	02 96       	adiw	r24, 0x02	; 2
    310a:	0e 94 59 3b 	call	0x76b2	; 0x76b2 <Print::print(char)>
      }
    }

  bp.print('"');
    310e:	8e 01       	movw	r16, r28
    3110:	0e 5f       	subi	r16, 0xFE	; 254
    3112:	1f 4f       	sbci	r17, 0xFF	; 255
    3114:	c8 01       	movw	r24, r16
    3116:	62 e2       	ldi	r22, 0x22	; 34
    3118:	0e 94 59 3b 	call	0x76b2	; 0x76b2 <Print::print(char)>
  commaPending = true;
    311c:	bb 24       	eor	r11, r11
    311e:	b3 94       	inc	r11
    3120:	b9 82       	std	Y+1, r11	; 0x01

  // Write count next iff enabled.
  if(c.enabled)
    3122:	d6 01       	movw	r26, r12
    3124:	19 96       	adiw	r26, 0x09	; 9
    3126:	8c 91       	ld	r24, X
    3128:	80 ff       	sbrs	r24, 0
    312a:	14 c0       	rjmp	.+40     	; 0x3154 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x192>
    {
    if(commaPending) { bp.print(','); commaPending = false; }
    312c:	c8 01       	movw	r24, r16
    312e:	6c e2       	ldi	r22, 0x2C	; 44
    3130:	0e 94 59 3b 	call	0x76b2	; 0x76b2 <Print::print(char)>
    3134:	19 82       	std	Y+1, r1	; 0x01
    bp.print(F("\"+\":"));
    3136:	c8 01       	movw	r24, r16
    3138:	65 e5       	ldi	r22, 0x55	; 85
    313a:	71 e0       	ldi	r23, 0x01	; 1
    313c:	0e 94 36 3b 	call	0x766c	; 0x766c <Print::print(__FlashStringHelper const*)>
    bp.print(c.count);
    3140:	f6 01       	movw	r30, r12
    3142:	61 85       	ldd	r22, Z+9	; 0x09
    3144:	66 95       	lsr	r22
    3146:	67 70       	andi	r22, 0x07	; 7
    3148:	c8 01       	movw	r24, r16
    314a:	4a e0       	ldi	r20, 0x0A	; 10
    314c:	50 e0       	ldi	r21, 0x00	; 0
    314e:	0e 94 35 3c 	call	0x786a	; 0x786a <Print::print(unsigned char, int)>
    commaPending = true;
    3152:	b9 82       	std	Y+1, r11	; 0x01
    // True if buffer is completely full.
    bool isFull() const { return(size == capacity); }
    // Get size/chars already in the buffer, not including trailing '\0'.
    uint8_t getSize() const { return(size); }
    // Set to record good place to rewind to if necessary.
    void setMark() { mark = size; }
    3154:	89 85       	ldd	r24, Y+9	; 0x09
    3156:	8a 87       	std	Y+10, r24	; 0x0a

  bool gotHiPri = false;
  uint8_t hiPriIndex = 0;
  bool gotLoPri = false;
  uint8_t loPriIndex = 0;
  if(nStats != 0)
    3158:	d6 01       	movw	r26, r12
    315a:	13 96       	adiw	r26, 0x03	; 3
    315c:	6c 91       	ld	r22, X
    315e:	13 97       	sbiw	r26, 0x03	; 3
    3160:	66 23       	and	r22, r22
    3162:	09 f4       	brne	.+2      	; 0x3166 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x1a4>
    3164:	ce c0       	rjmp	.+412    	; 0x3302 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x340>
    {
    // High-pri/changed stats.
    // Only do this on a portion of runs to let 'normal' stats get a look-in.
    // This happens on even-numbered runs (eg including the first, typically).
    // Write at most one high-priority item.
    if(0 == (c.count & 1))
    3166:	19 96       	adiw	r26, 0x09	; 9
    3168:	8c 91       	ld	r24, X
    316a:	19 97       	sbiw	r26, 0x09	; 9
    316c:	86 95       	lsr	r24
    316e:	87 70       	andi	r24, 0x07	; 7
    3170:	80 fd       	sbrc	r24, 0
    3172:	5a c0       	rjmp	.+180    	; 0x3228 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x266>
      {
      uint8_t next = lastTXedHiPri;
    3174:	16 96       	adiw	r26, 0x06	; 6
    3176:	1c 91       	ld	r17, X
    3178:	40 e0       	ldi	r20, 0x00	; 0
    317a:	50 e0       	ldi	r21, 0x00	; 0
      for(int i = nStats; --i >= 0; )
    317c:	26 2f       	mov	r18, r22
    317e:	30 e0       	ldi	r19, 0x00	; 0
    3180:	21 50       	subi	r18, 0x01	; 1
    3182:	30 40       	sbci	r19, 0x00	; 0
        {
        // Wrap around the end of the stats.
        if(++next >= nStats) { next = 0; }
        // Skip stat if too sensitive to include in this output.
        DescValueTuple &s = stats[next];
    3184:	77 e0       	ldi	r23, 0x07	; 7
    3186:	49 c0       	rjmp	.+146    	; 0x321a <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x258>
      {
      uint8_t next = lastTXedHiPri;
      for(int i = nStats; --i >= 0; )
        {
        // Wrap around the end of the stats.
        if(++next >= nStats) { next = 0; }
    3188:	1f 5f       	subi	r17, 0xFF	; 255
    318a:	16 17       	cp	r17, r22
    318c:	08 f0       	brcs	.+2      	; 0x3190 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x1ce>
    318e:	10 e0       	ldi	r17, 0x00	; 0
        // Skip stat if too sensitive to include in this output.
        DescValueTuple &s = stats[next];
    3190:	17 9f       	mul	r17, r23
    3192:	50 01       	movw	r10, r0
    3194:	11 24       	eor	r1, r1
    3196:	d6 01       	movw	r26, r12
    3198:	11 96       	adiw	r26, 0x01	; 1
    319a:	ed 91       	ld	r30, X+
    319c:	fc 91       	ld	r31, X
    319e:	12 97       	sbiw	r26, 0x02	; 2
    31a0:	ea 0d       	add	r30, r10
    31a2:	fb 1d       	adc	r31, r11
        if(sensitivity > s.descriptor.sensitivity) { continue; }
    31a4:	82 81       	ldd	r24, Z+2	; 0x02
    31a6:	bb 85       	ldd	r27, Y+11	; 0x0b
    31a8:	8b 17       	cp	r24, r27
    31aa:	a8 f1       	brcs	.+106    	; 0x3216 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x254>
        // Skip stat if neither changed nor high-priority.
        if(!s.descriptor.highPriority && !s.flags.changed) { continue; }
    31ac:	83 81       	ldd	r24, Z+3	; 0x03
    31ae:	88 23       	and	r24, r24
    31b0:	19 f4       	brne	.+6      	; 0x31b8 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x1f6>
    31b2:	86 81       	ldd	r24, Z+6	; 0x06
    31b4:	80 ff       	sbrs	r24, 0
    31b6:	2f c0       	rjmp	.+94     	; 0x3216 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x254>
        // Found suitable stat to include in output.
        hiPriIndex = next;
        gotHiPri = true;
        // Add to JSON output.
        print(bp, s, commaPending);
    31b8:	c6 01       	movw	r24, r12
    31ba:	be 01       	movw	r22, r28
    31bc:	6e 5f       	subi	r22, 0xFE	; 254
    31be:	7f 4f       	sbci	r23, 0xFF	; 255
    31c0:	af 01       	movw	r20, r30
    31c2:	9e 01       	movw	r18, r28
    31c4:	2f 5f       	subi	r18, 0xFF	; 255
    31c6:	3f 4f       	sbci	r19, 0xFF	; 255
    31c8:	0e 94 7e 17 	call	0x2efc	; 0x2efc <SimpleStatsRotationBase::print(BufPrint&, SimpleStatsRotationBase::DescValueTuple const&, bool&) const>
    BufPrint(char *buf, uint8_t bufSize) : b(buf), capacity(bufSize-1), size(0), mark(0) { buf[0] = '\0'; }
    virtual size_t write(uint8_t c);
    // True if buffer is completely full.
    bool isFull() const { return(size == capacity); }
    // Get size/chars already in the buffer, not including trailing '\0'.
    uint8_t getSize() const { return(size); }
    31cc:	49 85       	ldd	r20, Y+9	; 0x09
        // If successful, ie still space for the closing "}\0" without running over-length
        // then mark this as a fall-back, else rewind and discard this item.
        if(bp.getSize() > bufSize - 3) { bp.rewind(); break; }
    31ce:	8f 2d       	mov	r24, r15
    31d0:	90 e0       	ldi	r25, 0x00	; 0
    31d2:	02 97       	sbiw	r24, 0x02	; 2
    31d4:	24 2f       	mov	r18, r20
    31d6:	30 e0       	ldi	r19, 0x00	; 0
    31d8:	28 17       	cp	r18, r24
    31da:	39 07       	cpc	r19, r25
    31dc:	44 f0       	brlt	.+16     	; 0x31ee <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x22c>
    // Set to record good place to rewind to if necessary.
    void setMark() { mark = size; }
    // Rewind to previous good position, clearing newer text.
    void rewind() { size = mark; b[size] = '\0'; }
    31de:	8a 85       	ldd	r24, Y+10	; 0x0a
    31e0:	89 87       	std	Y+9, r24	; 0x09
    31e2:	ee 81       	ldd	r30, Y+6	; 0x06
    31e4:	ff 81       	ldd	r31, Y+7	; 0x07
    31e6:	e8 0f       	add	r30, r24
    31e8:	f1 1d       	adc	r31, r1
    31ea:	10 82       	st	Z, r1
    31ec:	11 c0       	rjmp	.+34     	; 0x3210 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x24e>
    // True if buffer is completely full.
    bool isFull() const { return(size == capacity); }
    // Get size/chars already in the buffer, not including trailing '\0'.
    uint8_t getSize() const { return(size); }
    // Set to record good place to rewind to if necessary.
    void setMark() { mark = size; }
    31ee:	4a 87       	std	Y+10, r20	; 0x0a
        else
          {
          bp.setMark();
          lastTXed = lastTXedHiPri = hiPriIndex;
    31f0:	f6 01       	movw	r30, r12
    31f2:	16 83       	std	Z+6, r17	; 0x06
    31f4:	14 83       	std	Z+4, r17	; 0x04
          if(!suppressClearChanged) { stats[hiPriIndex].flags.changed = false; }
    31f6:	fd 85       	ldd	r31, Y+13	; 0x0d
    31f8:	ff 23       	and	r31, r31
    31fa:	51 f4       	brne	.+20     	; 0x3210 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x24e>
    31fc:	d6 01       	movw	r26, r12
    31fe:	11 96       	adiw	r26, 0x01	; 1
    3200:	ed 91       	ld	r30, X+
    3202:	fc 91       	ld	r31, X
    3204:	12 97       	sbiw	r26, 0x02	; 2
    3206:	ea 0d       	add	r30, r10
    3208:	fb 1d       	adc	r31, r11
    320a:	86 81       	ldd	r24, Z+6	; 0x06
    320c:	8e 7f       	andi	r24, 0xFE	; 254
    320e:	86 83       	std	Z+6, r24	; 0x06
    3210:	51 2e       	mov	r5, r17
    3212:	01 e0       	ldi	r16, 0x01	; 1
    3214:	0b c0       	rjmp	.+22     	; 0x322c <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x26a>
    3216:	4f 5f       	subi	r20, 0xFF	; 255
    3218:	5f 4f       	sbci	r21, 0xFF	; 255
    // This happens on even-numbered runs (eg including the first, typically).
    // Write at most one high-priority item.
    if(0 == (c.count & 1))
      {
      uint8_t next = lastTXedHiPri;
      for(int i = nStats; --i >= 0; )
    321a:	c9 01       	movw	r24, r18
    321c:	84 1b       	sub	r24, r20
    321e:	95 0b       	sbc	r25, r21
    3220:	8f 5f       	subi	r24, 0xFF	; 255
    3222:	9f 4f       	sbci	r25, 0xFF	; 255
    3224:	09 f0       	breq	.+2      	; 0x3228 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x266>
    3226:	b0 cf       	rjmp	.-160    	; 0x3188 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x1c6>
    3228:	00 e0       	ldi	r16, 0x00	; 0
    322a:	55 24       	eor	r5, r5
    // Rotate through all eligible stats round-robin,
    // adding one to the end of the current message if possible,
    // checking first the item indexed after the previous one sent.
//    if(!gotHiPri)
      {
      uint8_t next = lastTXedLoPri;
    322c:	f6 01       	movw	r30, r12
    322e:	25 81       	ldd	r18, Z+5	; 0x05
      for(int i = nStats; --i >= 0; )
    3230:	83 81       	ldd	r24, Z+3	; 0x03
    3232:	88 24       	eor	r8, r8
    3234:	99 24       	eor	r9, r9
    3236:	a8 2e       	mov	r10, r24
    3238:	bb 24       	eor	r11, r11
    323a:	08 94       	sec
    323c:	a1 08       	sbc	r10, r1
    323e:	b1 08       	sbc	r11, r1
        // Avoid re-transmitting the very last thing TXed unless there in only one item!
        if((lastTXed == next) && (nStats > 1)) { continue; }
        // Avoid transmitting the hi-pri item just sent if any.
        if(gotHiPri && (hiPriIndex == next)) { continue; }
        // Skip stat if too sensitive to include in this output.
        DescValueTuple &s = stats[next];
    3240:	57 e0       	ldi	r21, 0x07	; 7
    3242:	45 2e       	mov	r4, r21
        // Add to JSON output.
        print(bp, s, commaPending);
        // If successful then mark this as a fall-back, else rewind and discard this item.
        // If successful, ie still space for the closing "}\0" without running over-length
        // then mark this as a fall-back, else rewind and discard this item.
        if(bp.getSize() > bufSize - 3) { bp.rewind(); break; }
    3244:	ef 2c       	mov	r14, r15
    3246:	ff 24       	eor	r15, r15
    3248:	8e ef       	ldi	r24, 0xFE	; 254
    324a:	9f ef       	ldi	r25, 0xFF	; 255
    324c:	e8 0e       	add	r14, r24
    324e:	f9 1e       	adc	r15, r25
    3250:	51 c0       	rjmp	.+162    	; 0x32f4 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x332>
      {
      uint8_t next = lastTXedLoPri;
      for(int i = nStats; --i >= 0; )
        {
        // Wrap around the end of the stats.
        if(++next >= nStats) { next = 0; }
    3252:	12 2f       	mov	r17, r18
    3254:	1f 5f       	subi	r17, 0xFF	; 255
    3256:	d6 01       	movw	r26, r12
    3258:	13 96       	adiw	r26, 0x03	; 3
    325a:	8c 91       	ld	r24, X
    325c:	18 17       	cp	r17, r24
    325e:	08 f0       	brcs	.+2      	; 0x3262 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x2a0>
    3260:	10 e0       	ldi	r17, 0x00	; 0
        // Avoid re-transmitting the very last thing TXed unless there in only one item!
        if((lastTXed == next) && (nStats > 1)) { continue; }
    3262:	f6 01       	movw	r30, r12
    3264:	24 81       	ldd	r18, Z+4	; 0x04
    3266:	21 17       	cp	r18, r17
    3268:	19 f4       	brne	.+6      	; 0x3270 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x2ae>
    326a:	82 30       	cpi	r24, 0x02	; 2
    326c:	08 f0       	brcs	.+2      	; 0x3270 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x2ae>
    326e:	3f c0       	rjmp	.+126    	; 0x32ee <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x32c>
        // Avoid transmitting the hi-pri item just sent if any.
        if(gotHiPri && (hiPriIndex == next)) { continue; }
    3270:	00 23       	and	r16, r16
    3272:	11 f0       	breq	.+4      	; 0x3278 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x2b6>
    3274:	51 16       	cp	r5, r17
    3276:	d1 f1       	breq	.+116    	; 0x32ec <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x32a>
        // Skip stat if too sensitive to include in this output.
        DescValueTuple &s = stats[next];
    3278:	14 9d       	mul	r17, r4
    327a:	30 01       	movw	r6, r0
    327c:	11 24       	eor	r1, r1
    327e:	d6 01       	movw	r26, r12
    3280:	11 96       	adiw	r26, 0x01	; 1
    3282:	ed 91       	ld	r30, X+
    3284:	fc 91       	ld	r31, X
    3286:	12 97       	sbiw	r26, 0x02	; 2
    3288:	e6 0d       	add	r30, r6
    328a:	f7 1d       	adc	r31, r7
        if(sensitivity > s.descriptor.sensitivity) { continue; }
    328c:	82 81       	ldd	r24, Z+2	; 0x02
    328e:	bb 85       	ldd	r27, Y+11	; 0x0b
    3290:	8b 17       	cp	r24, r27
    3292:	60 f1       	brcs	.+88     	; 0x32ec <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x32a>
        // Found suitable stat to include in output.
        loPriIndex = next;
        gotLoPri = true;
        // Add to JSON output.
        print(bp, s, commaPending);
    3294:	c6 01       	movw	r24, r12
    3296:	be 01       	movw	r22, r28
    3298:	6e 5f       	subi	r22, 0xFE	; 254
    329a:	7f 4f       	sbci	r23, 0xFF	; 255
    329c:	af 01       	movw	r20, r30
    329e:	9e 01       	movw	r18, r28
    32a0:	2f 5f       	subi	r18, 0xFF	; 255
    32a2:	3f 4f       	sbci	r19, 0xFF	; 255
    32a4:	0e 94 7e 17 	call	0x2efc	; 0x2efc <SimpleStatsRotationBase::print(BufPrint&, SimpleStatsRotationBase::DescValueTuple const&, bool&) const>
    BufPrint(char *buf, uint8_t bufSize) : b(buf), capacity(bufSize-1), size(0), mark(0) { buf[0] = '\0'; }
    virtual size_t write(uint8_t c);
    // True if buffer is completely full.
    bool isFull() const { return(size == capacity); }
    // Get size/chars already in the buffer, not including trailing '\0'.
    uint8_t getSize() const { return(size); }
    32a8:	29 85       	ldd	r18, Y+9	; 0x09
        // If successful then mark this as a fall-back, else rewind and discard this item.
        // If successful, ie still space for the closing "}\0" without running over-length
        // then mark this as a fall-back, else rewind and discard this item.
        if(bp.getSize() > bufSize - 3) { bp.rewind(); break; }
    32aa:	82 2f       	mov	r24, r18
    32ac:	90 e0       	ldi	r25, 0x00	; 0
    32ae:	8e 15       	cp	r24, r14
    32b0:	9f 05       	cpc	r25, r15
    32b2:	44 f0       	brlt	.+16     	; 0x32c4 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x302>
    // Set to record good place to rewind to if necessary.
    void setMark() { mark = size; }
    // Rewind to previous good position, clearing newer text.
    void rewind() { size = mark; b[size] = '\0'; }
    32b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    32b6:	89 87       	std	Y+9, r24	; 0x09
    32b8:	ee 81       	ldd	r30, Y+6	; 0x06
    32ba:	ff 81       	ldd	r31, Y+7	; 0x07
    32bc:	e8 0f       	add	r30, r24
    32be:	f1 1d       	adc	r31, r1
    32c0:	10 82       	st	Z, r1
    32c2:	1f c0       	rjmp	.+62     	; 0x3302 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x340>
    // True if buffer is completely full.
    bool isFull() const { return(size == capacity); }
    // Get size/chars already in the buffer, not including trailing '\0'.
    uint8_t getSize() const { return(size); }
    // Set to record good place to rewind to if necessary.
    void setMark() { mark = size; }
    32c4:	2a 87       	std	Y+10, r18	; 0x0a
        else
          {
          bp.setMark();
          lastTXed = lastTXedLoPri = loPriIndex;
    32c6:	f6 01       	movw	r30, r12
    32c8:	15 83       	std	Z+5, r17	; 0x05
    32ca:	14 83       	std	Z+4, r17	; 0x04
          if(!suppressClearChanged) { stats[loPriIndex].flags.changed = false; }
    32cc:	fd 85       	ldd	r31, Y+13	; 0x0d
    32ce:	ff 23       	and	r31, r31
    32d0:	51 f4       	brne	.+20     	; 0x32e6 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x324>
    32d2:	d6 01       	movw	r26, r12
    32d4:	11 96       	adiw	r26, 0x01	; 1
    32d6:	ed 91       	ld	r30, X+
    32d8:	fc 91       	ld	r31, X
    32da:	12 97       	sbiw	r26, 0x02	; 2
    32dc:	e6 0d       	add	r30, r6
    32de:	f7 1d       	adc	r31, r7
    32e0:	86 81       	ldd	r24, Z+6	; 0x06
    32e2:	8e 7f       	andi	r24, 0xFE	; 254
    32e4:	86 83       	std	Z+6, r24	; 0x06
          }
        if(!maximise) { break; }
    32e6:	bc 85       	ldd	r27, Y+12	; 0x0c
    32e8:	bb 23       	and	r27, r27
    32ea:	59 f0       	breq	.+22     	; 0x3302 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x340>
    32ec:	21 2f       	mov	r18, r17
    32ee:	08 94       	sec
    32f0:	81 1c       	adc	r8, r1
    32f2:	91 1c       	adc	r9, r1
    // adding one to the end of the current message if possible,
    // checking first the item indexed after the previous one sent.
//    if(!gotHiPri)
      {
      uint8_t next = lastTXedLoPri;
      for(int i = nStats; --i >= 0; )
    32f4:	c5 01       	movw	r24, r10
    32f6:	88 19       	sub	r24, r8
    32f8:	99 09       	sbc	r25, r9
    32fa:	8f 5f       	subi	r24, 0xFF	; 255
    32fc:	9f 4f       	sbci	r25, 0xFF	; 255
    32fe:	09 f0       	breq	.+2      	; 0x3302 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x340>
    3300:	a8 cf       	rjmp	.-176    	; 0x3252 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x290>
    }

  // TODO: maximise.

  // Terminate object.
  bp.print('}');
    3302:	ce 01       	movw	r24, r28
    3304:	02 96       	adiw	r24, 0x02	; 2
    3306:	6d e7       	ldi	r22, 0x7D	; 125
    3308:	0e 94 59 3b 	call	0x76b2	; 0x76b2 <Print::print(char)>
    // The buffer must be of at least size 1.
    // A buffer of size n can accommodate n-1 characters.
    BufPrint(char *buf, uint8_t bufSize) : b(buf), capacity(bufSize-1), size(0), mark(0) { buf[0] = '\0'; }
    virtual size_t write(uint8_t c);
    // True if buffer is completely full.
    bool isFull() const { return(size == capacity); }
    330c:	29 85       	ldd	r18, Y+9	; 0x09
  DEBUG_SERIAL_PRINT_FLASHSTRING("JSON: ");
  DEBUG_SERIAL_PRINT((char *)buf);
  DEBUG_SERIAL_PRINTLN();
#endif
//  if(w >= (size_t)(bufSize-1))
  if(bp.isFull())
    330e:	88 85       	ldd	r24, Y+8	; 0x08
    3310:	28 17       	cp	r18, r24
    3312:	21 f4       	brne	.+8      	; 0x331c <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x35a>
    {
    // Overrun, so failed/aborted.
    // Shouldn't really be possible unless buffer far far too small.
    *buf = '\0';
    3314:	d1 01       	movw	r26, r2
    3316:	1c 92       	st	X, r1
    3318:	20 e0       	ldi	r18, 0x00	; 0
    331a:	0a c0       	rjmp	.+20     	; 0x3330 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)+0x36e>
    return(0);
    }

  // On successfully creating output, update some internal state including success count.
  ++c.count;
    331c:	f6 01       	movw	r30, r12
    331e:	91 85       	ldd	r25, Z+9	; 0x09
    3320:	89 2f       	mov	r24, r25
    3322:	86 95       	lsr	r24
    3324:	8f 5f       	subi	r24, 0xFF	; 255
    3326:	87 70       	andi	r24, 0x07	; 7
    3328:	88 0f       	add	r24, r24
    332a:	91 7f       	andi	r25, 0xF1	; 241
    332c:	98 2b       	or	r25, r24
    332e:	91 87       	std	Z+9, r25	; 0x09

  return(bp.getSize()); // Success!
  }
    3330:	82 2f       	mov	r24, r18
    3332:	2d 96       	adiw	r28, 0x0d	; 13
    3334:	0f b6       	in	r0, 0x3f	; 63
    3336:	f8 94       	cli
    3338:	de bf       	out	0x3e, r29	; 62
    333a:	0f be       	out	0x3f, r0	; 63
    333c:	cd bf       	out	0x3d, r28	; 61
    333e:	cf 91       	pop	r28
    3340:	df 91       	pop	r29
    3342:	1f 91       	pop	r17
    3344:	0f 91       	pop	r16
    3346:	ff 90       	pop	r15
    3348:	ef 90       	pop	r14
    334a:	df 90       	pop	r13
    334c:	cf 90       	pop	r12
    334e:	bf 90       	pop	r11
    3350:	af 90       	pop	r10
    3352:	9f 90       	pop	r9
    3354:	8f 90       	pop	r8
    3356:	7f 90       	pop	r7
    3358:	6f 90       	pop	r6
    335a:	5f 90       	pop	r5
    335c:	4f 90       	pop	r4
    335e:	3f 90       	pop	r3
    3360:	2f 90       	pop	r2
    3362:	08 95       	ret

00003364 <SimpleStatsRotationBase::findByKey(char const*) const>:
  return(true);
  }

// Returns pointer to stats tuple with given (non-NULL) key if present, else NULL.
// Does a simple linear search.
SimpleStatsRotationBase::DescValueTuple * SimpleStatsRotationBase::findByKey(const SimpleStatsKey key) const
    3364:	8f 92       	push	r8
    3366:	9f 92       	push	r9
    3368:	af 92       	push	r10
    336a:	bf 92       	push	r11
    336c:	cf 92       	push	r12
    336e:	df 92       	push	r13
    3370:	ef 92       	push	r14
    3372:	ff 92       	push	r15
    3374:	0f 93       	push	r16
    3376:	1f 93       	push	r17
    3378:	cf 93       	push	r28
    337a:	df 93       	push	r29
    337c:	6c 01       	movw	r12, r24
    337e:	4b 01       	movw	r8, r22
  {
  for(int i = 0; i < nStats; ++i)
    3380:	fc 01       	movw	r30, r24
    3382:	83 81       	ldd	r24, Z+3	; 0x03
    3384:	a8 2e       	mov	r10, r24
    3386:	bb 24       	eor	r11, r11
    3388:	ee 24       	eor	r14, r14
    338a:	ff 24       	eor	r15, r15
    338c:	00 e0       	ldi	r16, 0x00	; 0
    338e:	10 e0       	ldi	r17, 0x00	; 0
    3390:	11 c0       	rjmp	.+34     	; 0x33b4 <SimpleStatsRotationBase::findByKey(char const*) const+0x50>
    {
    DescValueTuple * const p = stats + i;
    3392:	f6 01       	movw	r30, r12
    3394:	c1 81       	ldd	r28, Z+1	; 0x01
    3396:	d2 81       	ldd	r29, Z+2	; 0x02
    3398:	c0 0f       	add	r28, r16
    339a:	d1 1f       	adc	r29, r17
    if(0 == strcmp(p->descriptor.key, key)) { return(p); }
    339c:	88 81       	ld	r24, Y
    339e:	99 81       	ldd	r25, Y+1	; 0x01
    33a0:	b4 01       	movw	r22, r8
    33a2:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <strcmp>
    33a6:	09 5f       	subi	r16, 0xF9	; 249
    33a8:	1f 4f       	sbci	r17, 0xFF	; 255
    33aa:	00 97       	sbiw	r24, 0x00	; 0
    33ac:	41 f0       	breq	.+16     	; 0x33be <SimpleStatsRotationBase::findByKey(char const*) const+0x5a>

// Returns pointer to stats tuple with given (non-NULL) key if present, else NULL.
// Does a simple linear search.
SimpleStatsRotationBase::DescValueTuple * SimpleStatsRotationBase::findByKey(const SimpleStatsKey key) const
  {
  for(int i = 0; i < nStats; ++i)
    33ae:	08 94       	sec
    33b0:	e1 1c       	adc	r14, r1
    33b2:	f1 1c       	adc	r15, r1
    33b4:	ea 14       	cp	r14, r10
    33b6:	fb 04       	cpc	r15, r11
    33b8:	64 f3       	brlt	.-40     	; 0x3392 <SimpleStatsRotationBase::findByKey(char const*) const+0x2e>
    33ba:	c0 e0       	ldi	r28, 0x00	; 0
    33bc:	d0 e0       	ldi	r29, 0x00	; 0
    {
    DescValueTuple * const p = stats + i;
    if(0 == strcmp(p->descriptor.key, key)) { return(p); }
    }
  return(NULL); // Not found.
  }
    33be:	ce 01       	movw	r24, r28
    33c0:	df 91       	pop	r29
    33c2:	cf 91       	pop	r28
    33c4:	1f 91       	pop	r17
    33c6:	0f 91       	pop	r16
    33c8:	ff 90       	pop	r15
    33ca:	ef 90       	pop	r14
    33cc:	df 90       	pop	r13
    33ce:	cf 90       	pop	r12
    33d0:	bf 90       	pop	r11
    33d2:	af 90       	pop	r10
    33d4:	9f 90       	pop	r9
    33d6:	8f 90       	pop	r8
    33d8:	08 95       	ret

000033da <SimpleStatsRotationBase::put(char const*, int)>:
    
// Create/update value for given stat/key.
// If properties not already set and not supplied then stat will get defaults.
// If descriptor is supplied then its key must match (and the descriptor will be copied).
// True if successful, false otherwise (eg capacity already reached).
bool SimpleStatsRotationBase::put(const SimpleStatsKey key, const int newValue)
    33da:	ef 92       	push	r14
    33dc:	ff 92       	push	r15
    33de:	0f 93       	push	r16
    33e0:	1f 93       	push	r17
    33e2:	cf 93       	push	r28
    33e4:	df 93       	push	r29
    33e6:	ec 01       	movw	r28, r24
    33e8:	8b 01       	movw	r16, r22
    33ea:	7a 01       	movw	r14, r20
// Returns true iff if a valid key for our subset of JSON.
// Rejects keys containing " or \ or any chars outside the range [32,126]
// to avoid having to escape anything.
bool isValidKey(const SimpleStatsKey key)
  {
  if(NULL == key) { return(false); } 
    33ec:	61 15       	cp	r22, r1
    33ee:	71 05       	cpc	r23, r1
    33f0:	e9 f1       	breq	.+122    	; 0x346c <SimpleStatsRotationBase::put(char const*, int)+0x92>
    33f2:	fb 01       	movw	r30, r22
    33f4:	09 c0       	rjmp	.+18     	; 0x3408 <SimpleStatsRotationBase::put(char const*, int)+0x2e>
  for(const char *s = key; '\0' != *s; ++s)
    {
    const char c = *s;
    if((c < 32) || (c > 126) || ('"' == c) || ('\\' == c)) { return(false); }
    33f6:	89 2f       	mov	r24, r25
    33f8:	80 52       	subi	r24, 0x20	; 32
    33fa:	8f 35       	cpi	r24, 0x5F	; 95
    33fc:	b8 f5       	brcc	.+110    	; 0x346c <SimpleStatsRotationBase::put(char const*, int)+0x92>
    33fe:	92 32       	cpi	r25, 0x22	; 34
    3400:	a9 f1       	breq	.+106    	; 0x346c <SimpleStatsRotationBase::put(char const*, int)+0x92>
    3402:	9c 35       	cpi	r25, 0x5C	; 92
    3404:	99 f1       	breq	.+102    	; 0x346c <SimpleStatsRotationBase::put(char const*, int)+0x92>
// Rejects keys containing " or \ or any chars outside the range [32,126]
// to avoid having to escape anything.
bool isValidKey(const SimpleStatsKey key)
  {
  if(NULL == key) { return(false); } 
  for(const char *s = key; '\0' != *s; ++s)
    3406:	31 96       	adiw	r30, 0x01	; 1
    3408:	90 81       	ld	r25, Z
    340a:	99 23       	and	r25, r25
    340c:	a1 f7       	brne	.-24     	; 0x33f6 <SimpleStatsRotationBase::put(char const*, int)+0x1c>
    340e:	36 c0       	rjmp	.+108    	; 0x347c <SimpleStatsRotationBase::put(char const*, int)+0xa2>
  DescValueTuple *p = findByKey(key);
  // If item already exists, update it.
  if(NULL != p)
    {
    // Update the value and mark as changed if changed.
    if(p->value != newValue)
    3410:	84 81       	ldd	r24, Z+4	; 0x04
    3412:	95 81       	ldd	r25, Z+5	; 0x05
    3414:	8e 15       	cp	r24, r14
    3416:	9f 05       	cpc	r25, r15
    3418:	29 f0       	breq	.+10     	; 0x3424 <SimpleStatsRotationBase::put(char const*, int)+0x4a>
      {
      p->value = newValue;
    341a:	f5 82       	std	Z+5, r15	; 0x05
    341c:	e4 82       	std	Z+4, r14	; 0x04
      p->flags.changed = true;
    341e:	86 81       	ldd	r24, Z+6	; 0x06
    3420:	81 60       	ori	r24, 0x01	; 1
    3422:	86 83       	std	Z+6, r24	; 0x06
    3424:	81 e0       	ldi	r24, 0x01	; 1
    3426:	23 c0       	rjmp	.+70     	; 0x346e <SimpleStatsRotationBase::put(char const*, int)+0x94>
    return(true);
    }

  // If not yet at capacity then add this new item at the end.
  // Mark it as changed to prioritise seeing it in the JSON output.
  if(nStats < capacity)
    3428:	2b 81       	ldd	r18, Y+3	; 0x03
    342a:	88 81       	ld	r24, Y
    342c:	28 17       	cp	r18, r24
    342e:	a8 f4       	brcc	.+42     	; 0x345a <SimpleStatsRotationBase::put(char const*, int)+0x80>
    {
    p = stats + (nStats++);
    3430:	87 e0       	ldi	r24, 0x07	; 7
    3432:	28 9f       	mul	r18, r24
    3434:	c0 01       	movw	r24, r0
    3436:	11 24       	eor	r1, r1
    3438:	e9 81       	ldd	r30, Y+1	; 0x01
    343a:	fa 81       	ldd	r31, Y+2	; 0x02
    343c:	e8 0f       	add	r30, r24
    343e:	f9 1f       	adc	r31, r25
    3440:	2f 5f       	subi	r18, 0xFF	; 255
    3442:	2b 83       	std	Y+3, r18	; 0x03
    *p = DescValueTuple();
    p->value = newValue;
    3444:	f5 82       	std	Z+5, r15	; 0x05
    3446:	e4 82       	std	Z+4, r14	; 0x04
    p->flags.changed = true;
    3448:	86 81       	ldd	r24, Z+6	; 0x06
    344a:	81 60       	ori	r24, 0x01	; 1
    344c:	86 83       	std	Z+6, r24	; 0x06
    // Copy descriptor .
    p->descriptor = GenericStatsDescriptor(key);
    344e:	13 82       	std	Z+3, r1	; 0x03
    3450:	81 e0       	ldi	r24, 0x01	; 1
    3452:	82 83       	std	Z+2, r24	; 0x02
    3454:	11 83       	std	Z+1, r17	; 0x01
    3456:	00 83       	st	Z, r16
    3458:	0a c0       	rjmp	.+20     	; 0x346e <SimpleStatsRotationBase::put(char const*, int)+0x94>
    // Addition of new field done!
    return(true);
    }

#if 1 && defined(DEBUG)
DEBUG_SERIAL_PRINT_FLASHSTRING("Too many keys: ");
    345a:	80 e6       	ldi	r24, 0x60	; 96
    345c:	91 e0       	ldi	r25, 0x01	; 1
    345e:	0e 94 12 27 	call	0x4e24	; 0x4e24 <serialPrintAndFlush(__FlashStringHelper const*)>
DEBUG_SERIAL_PRINT(key);
    3462:	c8 01       	movw	r24, r16
    3464:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <serialPrintAndFlush(char const*)>
DEBUG_SERIAL_PRINTLN();
    3468:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <serialPrintlnAndFlush()>
#endif
  return(false); // FAILED: full.
    346c:	80 e0       	ldi	r24, 0x00	; 0
  }
    346e:	df 91       	pop	r29
    3470:	cf 91       	pop	r28
    3472:	1f 91       	pop	r17
    3474:	0f 91       	pop	r16
    3476:	ff 90       	pop	r15
    3478:	ef 90       	pop	r14
    347a:	08 95       	ret
DEBUG_SERIAL_PRINTLN();
#endif
    return(false);
    }

  DescValueTuple *p = findByKey(key);
    347c:	ce 01       	movw	r24, r28
    347e:	b8 01       	movw	r22, r16
    3480:	0e 94 b2 19 	call	0x3364	; 0x3364 <SimpleStatsRotationBase::findByKey(char const*) const>
    3484:	fc 01       	movw	r30, r24
  // If item already exists, update it.
  if(NULL != p)
    3486:	00 97       	sbiw	r24, 0x00	; 0
    3488:	19 f6       	brne	.-122    	; 0x3410 <SimpleStatsRotationBase::put(char const*, int)+0x36>
    348a:	ce cf       	rjmp	.-100    	; 0x3428 <SimpleStatsRotationBase::put(char const*, int)+0x4e>

0000348c <SimpleStatsRotationBase::remove(char const*)>:
  return(NULL); // Not found.
  }

// Remove given stat and properties.
// True iff the item existed and was removed.
bool SimpleStatsRotationBase::remove(const SimpleStatsKey key)
    348c:	cf 93       	push	r28
    348e:	df 93       	push	r29
    3490:	ec 01       	movw	r28, r24
  {
  DescValueTuple *p = findByKey(key);
    3492:	0e 94 b2 19 	call	0x3364	; 0x3364 <SimpleStatsRotationBase::findByKey(char const*) const>
    3496:	bc 01       	movw	r22, r24
  if(NULL == p) { return(false); }
    3498:	00 97       	sbiw	r24, 0x00	; 0
    349a:	11 f4       	brne	.+4      	; 0x34a0 <SimpleStatsRotationBase::remove(char const*)+0x14>
    349c:	80 e0       	ldi	r24, 0x00	; 0
    349e:	2b c0       	rjmp	.+86     	; 0x34f6 <SimpleStatsRotationBase::remove(char const*)+0x6a>
  // If it needs to be removed and is not the last item
  // then move the last item down into its slot.
  const bool lastItem = ((p - stats) == (nStats - 1));
    34a0:	a9 81       	ldd	r26, Y+1	; 0x01
    34a2:	ba 81       	ldd	r27, Y+2	; 0x02
    34a4:	4b 81       	ldd	r20, Y+3	; 0x03
  if(!lastItem) { *p = stats[nStats-1]; }
    34a6:	9c 01       	movw	r18, r24
    34a8:	2a 1b       	sub	r18, r26
    34aa:	3b 0b       	sbc	r19, r27
    34ac:	87 eb       	ldi	r24, 0xB7	; 183
    34ae:	9d e6       	ldi	r25, 0x6D	; 109
    34b0:	f9 01       	movw	r30, r18
    34b2:	e8 9f       	mul	r30, r24
    34b4:	90 01       	movw	r18, r0
    34b6:	e9 9f       	mul	r30, r25
    34b8:	30 0d       	add	r19, r0
    34ba:	f8 9f       	mul	r31, r24
    34bc:	30 0d       	add	r19, r0
    34be:	11 24       	eor	r1, r1
    34c0:	50 e0       	ldi	r21, 0x00	; 0
    34c2:	ca 01       	movw	r24, r20
    34c4:	01 97       	sbiw	r24, 0x01	; 1
    34c6:	28 17       	cp	r18, r24
    34c8:	39 07       	cpc	r19, r25
    34ca:	89 f0       	breq	.+34     	; 0x34ee <SimpleStatsRotationBase::remove(char const*)+0x62>
    34cc:	fa 01       	movw	r30, r20
    34ce:	83 e0       	ldi	r24, 0x03	; 3
    34d0:	ee 0f       	add	r30, r30
    34d2:	ff 1f       	adc	r31, r31
    34d4:	8a 95       	dec	r24
    34d6:	e1 f7       	brne	.-8      	; 0x34d0 <SimpleStatsRotationBase::remove(char const*)+0x44>
    34d8:	e4 1b       	sub	r30, r20
    34da:	f5 0b       	sbc	r31, r21
    34dc:	ea 0f       	add	r30, r26
    34de:	fb 1f       	adc	r31, r27
    34e0:	db 01       	movw	r26, r22
    34e2:	37 97       	sbiw	r30, 0x07	; 7
    34e4:	87 e0       	ldi	r24, 0x07	; 7
    34e6:	01 90       	ld	r0, Z+
    34e8:	0d 92       	st	X+, r0
    34ea:	81 50       	subi	r24, 0x01	; 1
    34ec:	e1 f7       	brne	.-8      	; 0x34e6 <SimpleStatsRotationBase::remove(char const*)+0x5a>
  // We got rid of one!
  // TODO: possibly explicitly destroy/overwrite the removed one at the end.
  --nStats;
    34ee:	8b 81       	ldd	r24, Y+3	; 0x03
    34f0:	81 50       	subi	r24, 0x01	; 1
    34f2:	8b 83       	std	Y+3, r24	; 0x03
    34f4:	81 e0       	ldi	r24, 0x01	; 1
  return(true);
  }
    34f6:	df 91       	pop	r29
    34f8:	cf 91       	pop	r28
    34fa:	08 95       	ret

000034fc <ensureIDCreated(bool)>:
// Coerce any ID bytes to valid values if unset (0xff) or if forced,
// by filling with valid values (0x80--0xfe) from decent entropy gathered on the fly.
// Will moan about invalid values and return false but not attempt to reset,
// eg in case underlying EEPROM cell is worn/failing.
// Returns true iff all values good.
bool ensureIDCreated(const bool force)
    34fc:	af 92       	push	r10
    34fe:	bf 92       	push	r11
    3500:	cf 92       	push	r12
    3502:	df 92       	push	r13
    3504:	ef 92       	push	r14
    3506:	ff 92       	push	r15
    3508:	0f 93       	push	r16
    350a:	1f 93       	push	r17
    350c:	cf 93       	push	r28
    350e:	df 93       	push	r29
    3510:	a8 2e       	mov	r10, r24
    3512:	bb 24       	eor	r11, r11
    3514:	b3 94       	inc	r11
    3516:	ee 24       	eor	r14, r14
    3518:	ff 24       	eor	r15, r15
    351a:	c4 e1       	ldi	r28, 0x14	; 20
    351c:	d0 e0       	ldi	r29, 0x00	; 0
    351e:	dc 2e       	mov	r13, r28
    3520:	cd 2e       	mov	r12, r29
  {
  bool allGood = true;
  for(uint8_t i = 0; i < EE_LEN_ID; ++i)
    {
    uint8_t * const loc = i + (uint8_t *)EE_START_ID;
    if(force || (0xff == eeprom_read_byte(loc))) // Byte is unset or change is being forced.
    3522:	aa 20       	and	r10, r10
    3524:	41 f4       	brne	.+16     	; 0x3536 <ensureIDCreated(bool)+0x3a>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    3526:	f9 99       	sbic	0x1f, 1	; 31
    3528:	fe cf       	rjmp	.-4      	; 0x3526 <ensureIDCreated(bool)+0x2a>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    352a:	d2 bd       	out	0x22, r29	; 34
    352c:	c1 bd       	out	0x21, r28	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    352e:	f8 9a       	sbi	0x1f, 0	; 31
    3530:	80 b5       	in	r24, 0x20	; 32
    3532:	8f 3f       	cpi	r24, 0xFF	; 255
    3534:	41 f5       	brne	.+80     	; 0x3586 <ensureIDCreated(bool)+0x8a>
        {
        serialPrintAndFlush(F("Setting ID byte "));
    3536:	8d e8       	ldi	r24, 0x8D	; 141
    3538:	91 e0       	ldi	r25, 0x01	; 1
    353a:	0e 94 12 27 	call	0x4e24	; 0x4e24 <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush(i);
    353e:	c7 01       	movw	r24, r14
    3540:	6a e0       	ldi	r22, 0x0A	; 10
    3542:	70 e0       	ldi	r23, 0x00	; 0
    3544:	0e 94 e0 26 	call	0x4dc0	; 0x4dc0 <serialPrintAndFlush(int, int)>
        serialPrintAndFlush(F(" ... "));
    3548:	87 e8       	ldi	r24, 0x87	; 135
    354a:	91 e0       	ldi	r25, 0x01	; 1
    354c:	0e 94 12 27 	call	0x4e24	; 0x4e24 <serialPrintAndFlush(__FlashStringHelper const*)>
        const uint8_t envNoise = ((i & 1) ? TemperatureC16.get() : AmbLight.get());
    3550:	e0 fe       	sbrs	r14, 0
    3552:	03 c0       	rjmp	.+6      	; 0x355a <ensureIDCreated(bool)+0x5e>
    3554:	00 91 c5 03 	lds	r16, 0x03C5
    3558:	02 c0       	rjmp	.+4      	; 0x355e <ensureIDCreated(bool)+0x62>
    355a:	00 91 bb 03 	lds	r16, 0x03BB
        for( ; ; )
          {
          // Try to make decently-randomised 'unique-ish' ID with mixture of sources.
          // Is not confidential, and will be transmitted in the clear.
          // System will typically not have been running long when this is invoked.
          const uint8_t newValue = 0x80 | (getSecureRandomByte() ^ envNoise);
    355e:	0e 94 32 26 	call	0x4c64	; 0x4c64 <getSecureRandomByte()>
    3562:	18 2f       	mov	r17, r24
    3564:	10 27       	eor	r17, r16
    3566:	10 68       	ori	r17, 0x80	; 128
          if(0xff == newValue) { continue; } // Reject unusable value.
    3568:	1f 3f       	cpi	r17, 0xFF	; 255
    356a:	c9 f3       	breq	.-14     	; 0x355e <ensureIDCreated(bool)+0x62>
          eeprom_smart_update_byte(loc, newValue);
    356c:	8d 2d       	mov	r24, r13
    356e:	9c 2d       	mov	r25, r12
    3570:	61 2f       	mov	r22, r17
    3572:	0e 94 5e 10 	call	0x20bc	; 0x20bc <eeprom_smart_update_byte(unsigned char*, unsigned char)>
          serialPrintAndFlush(newValue, HEX);
    3576:	81 2f       	mov	r24, r17
    3578:	90 e0       	ldi	r25, 0x00	; 0
    357a:	60 e1       	ldi	r22, 0x10	; 16
    357c:	70 e0       	ldi	r23, 0x00	; 0
    357e:	0e 94 e0 26 	call	0x4dc0	; 0x4dc0 <serialPrintAndFlush(int, int)>
          break;
          }
        serialPrintlnAndFlush();
    3582:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <serialPrintlnAndFlush()>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    3586:	f9 99       	sbic	0x1f, 1	; 31
    3588:	fe cf       	rjmp	.-4      	; 0x3586 <ensureIDCreated(bool)+0x8a>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    358a:	d2 bd       	out	0x22, r29	; 34
    358c:	c1 bd       	out	0x21, r28	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    358e:	f8 9a       	sbi	0x1f, 0	; 31
    3590:	10 b5       	in	r17, 0x20	; 32
        }
    // Validate.
    const uint8_t v2 = eeprom_read_byte(loc);
    if(!validIDByte(v2))
    3592:	81 2f       	mov	r24, r17
    3594:	80 58       	subi	r24, 0x80	; 128
    3596:	8f 37       	cpi	r24, 0x7F	; 127
    3598:	b0 f0       	brcs	.+44     	; 0x35c6 <ensureIDCreated(bool)+0xca>
        {
        allGood = false;
        serialPrintAndFlush(F("Invalid ID byte "));
    359a:	86 e7       	ldi	r24, 0x76	; 118
    359c:	91 e0       	ldi	r25, 0x01	; 1
    359e:	0e 94 12 27 	call	0x4e24	; 0x4e24 <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush(i);
    35a2:	c7 01       	movw	r24, r14
    35a4:	6a e0       	ldi	r22, 0x0A	; 10
    35a6:	70 e0       	ldi	r23, 0x00	; 0
    35a8:	0e 94 e0 26 	call	0x4dc0	; 0x4dc0 <serialPrintAndFlush(int, int)>
        serialPrintAndFlush(F(" ... "));
    35ac:	80 e7       	ldi	r24, 0x70	; 112
    35ae:	91 e0       	ldi	r25, 0x01	; 1
    35b0:	0e 94 12 27 	call	0x4e24	; 0x4e24 <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush(v2, HEX);
    35b4:	81 2f       	mov	r24, r17
    35b6:	90 e0       	ldi	r25, 0x00	; 0
    35b8:	60 e1       	ldi	r22, 0x10	; 16
    35ba:	70 e0       	ldi	r23, 0x00	; 0
    35bc:	0e 94 e0 26 	call	0x4dc0	; 0x4dc0 <serialPrintAndFlush(int, int)>
        serialPrintlnAndFlush();
    35c0:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <serialPrintlnAndFlush()>
    35c4:	bb 24       	eor	r11, r11
    35c6:	08 94       	sec
    35c8:	e1 1c       	adc	r14, r1
    35ca:	f1 1c       	adc	r15, r1
    35cc:	21 96       	adiw	r28, 0x01	; 1
// eg in case underlying EEPROM cell is worn/failing.
// Returns true iff all values good.
bool ensureIDCreated(const bool force)
  {
  bool allGood = true;
  for(uint8_t i = 0; i < EE_LEN_ID; ++i)
    35ce:	88 e0       	ldi	r24, 0x08	; 8
    35d0:	e8 16       	cp	r14, r24
    35d2:	f1 04       	cpc	r15, r1
    35d4:	09 f0       	breq	.+2      	; 0x35d8 <ensureIDCreated(bool)+0xdc>
    35d6:	a3 cf       	rjmp	.-186    	; 0x351e <ensureIDCreated(bool)+0x22>
        serialPrintAndFlush(v2, HEX);
        serialPrintlnAndFlush();
        }
     }
  return(allGood);
  }
    35d8:	8b 2d       	mov	r24, r11
    35da:	df 91       	pop	r29
    35dc:	cf 91       	pop	r28
    35de:	1f 91       	pop	r17
    35e0:	0f 91       	pop	r16
    35e2:	ff 90       	pop	r15
    35e4:	ef 90       	pop	r14
    35e6:	df 90       	pop	r13
    35e8:	cf 90       	pop	r12
    35ea:	bf 90       	pop	r11
    35ec:	af 90       	pop	r10
    35ee:	08 95       	ret

000035f0 <getLastCoreStats(FullStatsMessageCore*)>:

// Gets (and clears) the last core stats record received, if any, returning true and filling in the stats struct.
// If no minimal stats record has been received since the last call then the ID will be absent and the rest undefined.
#if defined(ALLOW_STATS_RX)
#ifndef getLastCoreStats
void getLastCoreStats(FullStatsMessageCore_t *stats)
    35f0:	fc 01       	movw	r30, r24
  {
#if 0 && defined(DEBUG)
  if(NULL == stats) { panic(); }
#endif
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    35f2:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    35f4:	f8 94       	cli
    {
    if(!coreStats.containsID)
    35f6:	80 91 1e 03 	lds	r24, 0x031E
    35fa:	80 fd       	sbrc	r24, 0
    35fc:	04 c0       	rjmp	.+8      	; 0x3606 <getLastCoreStats(FullStatsMessageCore*)+0x16>
      { stats->containsID = false; } // Nothing there; just clear containsID field in response for speed.
    35fe:	80 81       	ld	r24, Z
    3600:	8e 7f       	andi	r24, 0xFE	; 254
    3602:	80 83       	st	Z, r24
    3604:	0d c0       	rjmp	.+26     	; 0x3620 <getLastCoreStats(FullStatsMessageCore*)+0x30>
    else
      {
      // Copy everything.
      memcpy(stats, (void *)&coreStats, sizeof(*stats));
    3606:	df 01       	movw	r26, r30
    3608:	ee e1       	ldi	r30, 0x1E	; 30
    360a:	f3 e0       	ldi	r31, 0x03	; 3
    360c:	87 e0       	ldi	r24, 0x07	; 7
    360e:	01 90       	ld	r0, Z+
    3610:	0d 92       	st	X+, r0
    3612:	81 50       	subi	r24, 0x01	; 1
    3614:	e1 f7       	brne	.-8      	; 0x360e <getLastCoreStats(FullStatsMessageCore*)+0x1e>
      coreStats.containsID = false; // Mark stats as read.
    3616:	80 91 1e 03 	lds	r24, 0x031E
    361a:	8e 7f       	andi	r24, 0xFE	; 254
    361c:	80 93 1e 03 	sts	0x031E, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3620:	9f bf       	out	0x3f, r25	; 63
      }
    }
  }
    3622:	08 95       	ret

00003624 <recordCoreStats(bool, FullStatsMessageCore const*)>:
// Record core incoming stats; ID must be set as a minimum.
// Is thread/ISR-safe and fast.
// May be backed by a finite-depth queue, even zero-length (ie discarding); usually holds just one item.
#if defined(ALLOW_STATS_RX)
#ifndef recordCoreStats
void recordCoreStats(const bool secure, const FullStatsMessageCore_t * const stats)
    3624:	fb 01       	movw	r30, r22
  {
#if 0 && defined(DEBUG)
  if(NULL == payload) { panic(); }
#endif  // TODO
   if(!stats->containsID) { return; } // Ignore if no ID.
    3626:	80 81       	ld	r24, Z
    3628:	80 ff       	sbrs	r24, 0
    362a:	17 c0       	rjmp	.+46     	; 0x365a <recordCoreStats(bool, FullStatsMessageCore const*)+0x36>
   ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    362c:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    362e:	f8 94       	cli
    {
    if(coreStats.containsID) { ++inboundStatsQueueOverrun; } // Dropped a frame.
    3630:	80 91 1e 03 	lds	r24, 0x031E
    3634:	80 ff       	sbrs	r24, 0
    3636:	09 c0       	rjmp	.+18     	; 0x364a <recordCoreStats(bool, FullStatsMessageCore const*)+0x26>
    3638:	80 91 25 03 	lds	r24, 0x0325
    363c:	90 91 26 03 	lds	r25, 0x0326
    3640:	01 96       	adiw	r24, 0x01	; 1
    3642:	90 93 26 03 	sts	0x0326, r25
    3646:	80 93 25 03 	sts	0x0325, r24
    memcpy((void *)&coreStats, stats, sizeof(coreStats));
    364a:	ae e1       	ldi	r26, 0x1E	; 30
    364c:	b3 e0       	ldi	r27, 0x03	; 3
    364e:	87 e0       	ldi	r24, 0x07	; 7
    3650:	01 90       	ld	r0, Z+
    3652:	0d 92       	st	X+, r0
    3654:	81 50       	subi	r24, 0x01	; 1
    3656:	e1 f7       	brne	.-8      	; 0x3650 <recordCoreStats(bool, FullStatsMessageCore const*)+0x2c>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3658:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    365a:	08 95       	ret

0000365c <getLastJSONStats(char*)>:
// filling in the supplied buffer
// else leaving it starting with '\0' if none available.
// The buffer must be at least MSG_JSON_MAX_LENGTH+1 chars.
#if defined(ALLOW_STATS_RX)
#ifndef getLastJSONStats
void getLastJSONStats(char *buf)
    365c:	1f 93       	push	r17
    365e:	fc 01       	movw	r30, r24
  {
#if 0 && defined(DEBUG)
  if(NULL == buf) { panic(); }
#endif
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    3660:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3662:	f8 94       	cli
    {
    if('\0' == *jsonStats)
    3664:	80 91 27 03 	lds	r24, 0x0327
    3668:	88 23       	and	r24, r24
    366a:	11 f4       	brne	.+4      	; 0x3670 <getLastJSONStats(char*)+0x14>
      { *buf = '\0'; } // No message available.
    366c:	10 82       	st	Z, r1
    366e:	07 c0       	rjmp	.+14     	; 0x367e <getLastJSONStats(char*)+0x22>
    else
      {
      // Copy the message to the receiver.
      strcpy(buf, jsonStats);
    3670:	cf 01       	movw	r24, r30
    3672:	67 e2       	ldi	r22, 0x27	; 39
    3674:	73 e0       	ldi	r23, 0x03	; 3
    3676:	0e 94 04 03 	call	0x608	; 0x608 <strcpy>
      // Clear the buffer.
      *jsonStats = '\0';
    367a:	10 92 27 03 	sts	0x0327, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    367e:	1f bf       	out	0x3f, r17	; 63
      }
    }
  }
    3680:	1f 91       	pop	r17
    3682:	08 95       	ret

00003684 <recordJSONStats(bool, char const*)>:
// The supplied JSON should already have been somewhat validated.
// Is thread/ISR-safe and moderately fast (though will require a data copy).
// May be backed by a finite-depth queue, even zero-length (ie discarding); usually holds just one item.
#if defined(ALLOW_STATS_RX)
#ifndef recordJSONStats
void recordJSONStats(bool secure, const char *json)
    3684:	1f 93       	push	r17
  {
#if 0 && defined(DEBUG)
  if(NULL == json) { panic(); }
  if('\0' == *json) { panic(); }
#endif
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    3686:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3688:	f8 94       	cli
    {
    if('\0' != *jsonStats) { ++inboundStatsQueueOverrun; } // Dropped a frame.
    368a:	80 91 27 03 	lds	r24, 0x0327
    368e:	88 23       	and	r24, r24
    3690:	49 f0       	breq	.+18     	; 0x36a4 <recordJSONStats(bool, char const*)+0x20>
    3692:	80 91 25 03 	lds	r24, 0x0325
    3696:	90 91 26 03 	lds	r25, 0x0326
    369a:	01 96       	adiw	r24, 0x01	; 1
    369c:	90 93 26 03 	sts	0x0326, r25
    36a0:	80 93 25 03 	sts	0x0325, r24
    // Atomically overwrite existing buffer with new non-empty stats message.
    strncpy(jsonStats, json, MSG_JSON_MAX_LENGTH+1);
    36a4:	87 e2       	ldi	r24, 0x27	; 39
    36a6:	93 e0       	ldi	r25, 0x03	; 3
    36a8:	48 e3       	ldi	r20, 0x38	; 56
    36aa:	50 e0       	ldi	r21, 0x00	; 0
    36ac:	0e 94 0b 03 	call	0x616	; 0x616 <strncpy>
    // Drop over-length message,
    if('\0' != jsonStats[sizeof(jsonStats) - 1]) { *jsonStats = '\0'; }
    36b0:	80 91 5e 03 	lds	r24, 0x035E
    36b4:	88 23       	and	r24, r24
    36b6:	11 f0       	breq	.+4      	; 0x36bc <recordJSONStats(bool, char const*)+0x38>
    36b8:	10 92 27 03 	sts	0x0327, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    36bc:	1f bf       	out	0x3f, r17	; 63
    }
  }
    36be:	1f 91       	pop	r17
    36c0:	08 95       	ret

000036c2 <extractTrailingMinimalStatsPayload(unsigned char const*, trailingMinimalStatsPayload*)>:
#endif
  }

// Extract payload from valid (3-byte) header+payload+CRC into payload struct; only 2 bytes are actually read.
// Input bytes (eg header and check value) must already have been validated.
void extractTrailingMinimalStatsPayload(const uint8_t *const buf, trailingMinimalStatsPayload_t *const payload)
    36c2:	0f 93       	push	r16
    36c4:	1f 93       	push	r17
    36c6:	cf 93       	push	r28
    36c8:	df 93       	push	r29
    36ca:	ec 01       	movw	r28, r24
    36cc:	8b 01       	movw	r16, r22
  {
#ifdef DEBUG
  if(NULL == payload) { panic(); }
    36ce:	61 15       	cp	r22, r1
    36d0:	71 05       	cpc	r23, r1
    36d2:	11 f4       	brne	.+4      	; 0x36d8 <extractTrailingMinimalStatsPayload(unsigned char const*, trailingMinimalStatsPayload*)+0x16>
    36d4:	0e 94 db 2f 	call	0x5fb6	; 0x5fb6 <panic()>
#endif
  payload->powerLow = (0 != (buf[0] & 0x10));
    36d8:	88 81       	ld	r24, Y
    36da:	88 0f       	add	r24, r24
    36dc:	88 0f       	add	r24, r24
    36de:	88 0f       	add	r24, r24
    36e0:	80 78       	andi	r24, 0x80	; 128
    36e2:	f8 01       	movw	r30, r16
    36e4:	41 81       	ldd	r20, Z+1	; 0x01
    36e6:	4f 77       	andi	r20, 0x7F	; 127
    36e8:	48 2b       	or	r20, r24
    36ea:	41 83       	std	Z+1, r20	; 0x01
  payload->tempC16 = ((((int16_t) buf[1]) << 4) | (buf[0] & 0xf)) + MESSAGING_TRAILING_MINIMAL_STATS_TEMP_BIAS;
    36ec:	29 81       	ldd	r18, Y+1	; 0x01
    36ee:	30 e0       	ldi	r19, 0x00	; 0
    36f0:	94 e0       	ldi	r25, 0x04	; 4
    36f2:	22 0f       	add	r18, r18
    36f4:	33 1f       	adc	r19, r19
    36f6:	9a 95       	dec	r25
    36f8:	e1 f7       	brne	.-8      	; 0x36f2 <extractTrailingMinimalStatsPayload(unsigned char const*, trailingMinimalStatsPayload*)+0x30>
    36fa:	88 81       	ld	r24, Y
    36fc:	90 e0       	ldi	r25, 0x00	; 0
    36fe:	8f 70       	andi	r24, 0x0F	; 15
    3700:	90 70       	andi	r25, 0x00	; 0
    3702:	28 2b       	or	r18, r24
    3704:	39 2b       	or	r19, r25
    3706:	20 54       	subi	r18, 0x40	; 64
    3708:	31 40       	sbci	r19, 0x01	; 1
    370a:	20 83       	st	Z, r18
    370c:	83 2f       	mov	r24, r19
    370e:	8f 77       	andi	r24, 0x7F	; 127
    3710:	40 78       	andi	r20, 0x80	; 128
    3712:	48 2b       	or	r20, r24
    3714:	41 83       	std	Z+1, r20	; 0x01
  }
    3716:	df 91       	pop	r29
    3718:	cf 91       	pop	r28
    371a:	1f 91       	pop	r17
    371c:	0f 91       	pop	r16
    371e:	08 95       	ret

00003720 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)>:
// If successful returns pointer to next byte of message, ie just after full stats message decoded.
// Returns null if failed (eg because of corrupt message data) and state of 'content' result is undefined.
// This will avoid copying into the result data (possibly tainted) that has arrived at an inappropriate security level.
//   * content will contain data decoded from the message; must be non-null
const uint8_t *decodeFullStatsMessageCore(const uint8_t * const buf, const uint8_t buflen, const stats_TX_level secLevel, const bool secureChannel,
    FullStatsMessageCore_t * const content)
    3720:	ef 92       	push	r14
    3722:	ff 92       	push	r15
    3724:	0f 93       	push	r16
    3726:	1f 93       	push	r17
    3728:	cf 93       	push	r28
    372a:	df 93       	push	r29
    372c:	7c 01       	movw	r14, r24
  {
  if(NULL == buf) { return(NULL); } // Could be an assert/panic instead at a pinch.
    372e:	00 97       	sbiw	r24, 0x00	; 0
    3730:	09 f4       	brne	.+2      	; 0x3734 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x14>
    3732:	8f c0       	rjmp	.+286    	; 0x3852 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  if(NULL == content) { return(NULL); } // Could be an assert/panic instead at a pinch.
    3734:	01 15       	cp	r16, r1
    3736:	11 05       	cpc	r17, r1
    3738:	09 f4       	brne	.+2      	; 0x373c <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x1c>
    373a:	8b c0       	rjmp	.+278    	; 0x3852 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  if(buflen < FullStatsMessageCore_MIN_BYTES_ON_WIRE)
    373c:	63 30       	cpi	r22, 0x03	; 3
    373e:	08 f4       	brcc	.+2      	; 0x3742 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x22>
    3740:	88 c0       	rjmp	.+272    	; 0x3852 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
#define FullStatsMessageCore_MAX_BYTES_ON_WIRE 8
// Minimum size on wire including trailing CRC of core of FullStatsMessage.  TX message buffer should be one larger for trailing 0xff.
#define FullStatsMessageCore_MIN_BYTES_ON_WIRE 3

// Clear a FullStatsMessageCore_t, also indicating no optional fields present.
static inline void clearFullStatsMessageCore(FullStatsMessageCore_t *const p) { memset(p, 0, sizeof(FullStatsMessageCore_t)); }
    3742:	87 e0       	ldi	r24, 0x07	; 7
    3744:	f8 01       	movw	r30, r16
    3746:	11 92       	st	Z+, r1
    3748:	8a 95       	dec	r24
    374a:	e9 f7       	brne	.-6      	; 0x3746 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x26>
//#define MESSAGING_FULL_STATS_HEADER_MSBS 0x70
//#define MESSAGING_FULL_STATS_HEADER_MASK 0xf0
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_PRESENT 4
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_HIGH 2
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_SECURE 1
  if(MESSAGING_FULL_STATS_HEADER_MSBS != (header & MESSAGING_FULL_STATS_HEADER_MASK)) { return(NULL); } // Bad header.
    374c:	f7 01       	movw	r30, r14
    374e:	80 81       	ld	r24, Z
    3750:	28 2f       	mov	r18, r24
    3752:	30 e0       	ldi	r19, 0x00	; 0
    3754:	c9 01       	movw	r24, r18
    3756:	80 7f       	andi	r24, 0xF0	; 240
    3758:	90 70       	andi	r25, 0x00	; 0
    375a:	80 37       	cpi	r24, 0x70	; 112
    375c:	91 05       	cpc	r25, r1
    375e:	09 f0       	breq	.+2      	; 0x3762 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x42>
    3760:	78 c0       	rjmp	.+240    	; 0x3852 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  if(0 != (header & MESSAGING_FULL_STATS_HEADER_BITS_ID_SECURE)) { return(NULL); } // TODO: cannot do secure messages yet.
    3762:	20 fd       	sbrc	r18, 0
    3764:	76 c0       	rjmp	.+236    	; 0x3852 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  // READ THE MESSAGE!
  // Pointer to next byte to read in message.
  register const uint8_t *b = buf;

  // Validate the message header and start to fill in structure.
  const uint8_t header = *b++;
    3766:	e7 01       	movw	r28, r14
    3768:	21 96       	adiw	r28, 0x01	; 1
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_SECURE 1
  if(MESSAGING_FULL_STATS_HEADER_MSBS != (header & MESSAGING_FULL_STATS_HEADER_MASK)) { return(NULL); } // Bad header.
  if(0 != (header & MESSAGING_FULL_STATS_HEADER_BITS_ID_SECURE)) { return(NULL); } // TODO: cannot do secure messages yet.
  // Extract ID if present.
  const bool containsID = (0 != (header & MESSAGING_FULL_STATS_HEADER_BITS_ID_PRESENT));
  if(containsID)
    376a:	22 ff       	sbrs	r18, 2
    376c:	12 c0       	rjmp	.+36     	; 0x3792 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x72>
    {
    content->containsID = true;
    376e:	f8 01       	movw	r30, r16
    3770:	80 81       	ld	r24, Z
    3772:	81 60       	ori	r24, 0x01	; 1
    3774:	80 83       	st	Z, r24
    const uint8_t idHigh = ((0 != (header & MESSAGING_FULL_STATS_HEADER_BITS_ID_HIGH)) ? 0x80 : 0);
    3776:	21 fd       	sbrc	r18, 1
    3778:	02 c0       	rjmp	.+4      	; 0x377e <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x5e>
    377a:	90 e0       	ldi	r25, 0x00	; 0
    377c:	01 c0       	rjmp	.+2      	; 0x3780 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x60>
    377e:	90 e8       	ldi	r25, 0x80	; 128
    content->id0 = *b++ | idHigh;
    3780:	f7 01       	movw	r30, r14
    3782:	81 81       	ldd	r24, Z+1	; 0x01
    3784:	89 2b       	or	r24, r25
    3786:	f8 01       	movw	r30, r16
    3788:	81 83       	std	Z+1, r24	; 0x01
    content->id1 = *b++ | idHigh;
    378a:	89 81       	ldd	r24, Y+1	; 0x01
    378c:	98 2b       	or	r25, r24
    378e:	92 83       	std	Z+2, r25	; 0x02
    3790:	22 96       	adiw	r28, 0x02	; 2
    }

  // If next header is temp/power then extract it, else must be the flags header.
  if(MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MSBS == (*b & MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MASK))
    3792:	88 81       	ld	r24, Y
    3794:	80 7e       	andi	r24, 0xE0	; 224
    3796:	80 34       	cpi	r24, 0x40	; 64
    3798:	71 f4       	brne	.+28     	; 0x37b6 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x96>
    {
    if(0 != (0x80 & b[1])) { return(NULL); } // Following byte does not have msb correctly cleared.
    379a:	89 81       	ldd	r24, Y+1	; 0x01
    379c:	87 fd       	sbrc	r24, 7
    379e:	59 c0       	rjmp	.+178    	; 0x3852 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
    extractTrailingMinimalStatsPayload(b, &(content->tempAndPower));
    37a0:	b8 01       	movw	r22, r16
    37a2:	6d 5f       	subi	r22, 0xFD	; 253
    37a4:	7f 4f       	sbci	r23, 0xFF	; 255
    37a6:	ce 01       	movw	r24, r28
    37a8:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <extractTrailingMinimalStatsPayload(unsigned char const*, trailingMinimalStatsPayload*)>
    b += 2;
    37ac:	22 96       	adiw	r28, 0x02	; 2
    content->containsTempAndPower = true;
    37ae:	f8 01       	movw	r30, r16
    37b0:	80 81       	ld	r24, Z
    37b2:	82 60       	ori	r24, 0x02	; 2
    37b4:	80 83       	st	Z, r24
    }

  // If next header is flags then extract it.
  // FIXME: risk of misinterpretting CRC.
  if(MESSAGING_FULL_STATS_FLAGS_HEADER_MSBS != (*b & MESSAGING_FULL_STATS_FLAGS_HEADER_MASK)) { return(NULL); } // Corrupt message.
    37b6:	28 81       	ld	r18, Y
    37b8:	42 2f       	mov	r20, r18
    37ba:	50 e0       	ldi	r21, 0x00	; 0
    37bc:	ca 01       	movw	r24, r20
    37be:	80 7e       	andi	r24, 0xE0	; 224
    37c0:	90 70       	andi	r25, 0x00	; 0
    37c2:	80 36       	cpi	r24, 0x60	; 96
    37c4:	91 05       	cpc	r25, r1
    37c6:	09 f0       	breq	.+2      	; 0x37ca <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0xaa>
    37c8:	44 c0       	rjmp	.+136    	; 0x3852 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  const uint8_t flagsHeader = *b++;
    37ca:	de 01       	movw	r26, r28
    37cc:	11 96       	adiw	r26, 0x01	; 1
  content->occ = flagsHeader & 3;
    37ce:	23 70       	andi	r18, 0x03	; 3
    37d0:	f8 01       	movw	r30, r16
    37d2:	86 81       	ldd	r24, Z+6	; 0x06
    37d4:	8c 7f       	andi	r24, 0xFC	; 252
    37d6:	82 2b       	or	r24, r18
    37d8:	86 83       	std	Z+6, r24	; 0x06
  const bool containsAmbL = (0 != (flagsHeader & MESSAGING_FULL_STATS_FLAGS_HEADER_AMBL));
  if(containsAmbL)
    37da:	43 ff       	sbrs	r20, 3
    37dc:	0a c0       	rjmp	.+20     	; 0x37f2 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0xd2>
    {
    const uint8_t ambL = *b++;
    37de:	99 81       	ldd	r25, Y+1	; 0x01
    if((0 == ambL) || (ambL == (uint8_t)0xff)) { return(NULL); } // Illegal value.
    37e0:	89 2f       	mov	r24, r25
    37e2:	81 50       	subi	r24, 0x01	; 1
    37e4:	8e 3f       	cpi	r24, 0xFE	; 254
    37e6:	a8 f5       	brcc	.+106    	; 0x3852 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  const uint8_t flagsHeader = *b++;
  content->occ = flagsHeader & 3;
  const bool containsAmbL = (0 != (flagsHeader & MESSAGING_FULL_STATS_FLAGS_HEADER_AMBL));
  if(containsAmbL)
    {
    const uint8_t ambL = *b++;
    37e8:	11 96       	adiw	r26, 0x01	; 1
    if((0 == ambL) || (ambL == (uint8_t)0xff)) { return(NULL); } // Illegal value.
    content->ambL = ambL;
    37ea:	95 83       	std	Z+5, r25	; 0x05
    content->containsAmbL = true;
    37ec:	80 81       	ld	r24, Z
    37ee:	84 60       	ori	r24, 0x04	; 4
    37f0:	80 83       	st	Z, r24
    37f2:	f7 01       	movw	r30, r14
    37f4:	3f e7       	ldi	r19, 0x7F	; 127
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    37f6:	11 e0       	ldi	r17, 0x01	; 1
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
    37f8:	77 e3       	ldi	r23, 0x37	; 55
    37fa:	21 c0       	rjmp	.+66     	; 0x383e <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x11e>
    }

  // Finish off by computing and checking the CRC (and return pointer to just after CRC).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    37fc:	80 81       	ld	r24, Z
    37fe:	60 e8       	ldi	r22, 0x80	; 128
    3800:	40 e0       	ldi	r20, 0x00	; 0
    3802:	50 e0       	ldi	r21, 0x00	; 0
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    3804:	c8 2f       	mov	r28, r24
    3806:	d0 e0       	ldi	r29, 0x00	; 0
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
    3808:	83 2f       	mov	r24, r19
    380a:	90 e0       	ldi	r25, 0x00	; 0
    380c:	26 e0       	ldi	r18, 0x06	; 6
    380e:	96 95       	lsr	r25
    3810:	87 95       	ror	r24
    3812:	2a 95       	dec	r18
    3814:	e1 f7       	brne	.-8      	; 0x380e <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0xee>
    3816:	28 2f       	mov	r18, r24
    3818:	21 70       	andi	r18, 0x01	; 1
        if(0 != (datum & i)) { bit = !bit; }
    381a:	86 2f       	mov	r24, r22
    381c:	90 e0       	ldi	r25, 0x00	; 0
    381e:	8c 23       	and	r24, r28
    3820:	9d 23       	and	r25, r29
    3822:	89 2b       	or	r24, r25
    3824:	09 f0       	breq	.+2      	; 0x3828 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x108>
    3826:	21 27       	eor	r18, r17
        crc <<= 1;
    3828:	33 0f       	add	r19, r19
        if(bit) { crc ^= 0x37; }
    382a:	21 11       	cpse	r18, r1
    382c:	37 27       	eor	r19, r23
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
    382e:	66 95       	lsr	r22
    3830:	4f 5f       	subi	r20, 0xFF	; 255
    3832:	5f 4f       	sbci	r21, 0xFF	; 255
    3834:	48 30       	cpi	r20, 0x08	; 8
    3836:	51 05       	cpc	r21, r1
    3838:	39 f7       	brne	.-50     	; 0x3808 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0xe8>
    }

  // Finish off by computing and checking the CRC (and return pointer to just after CRC).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    383a:	31 96       	adiw	r30, 0x01	; 1
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
        }
    return(crc & 0x7f);
    383c:	3f 77       	andi	r19, 0x7F	; 127
    }

  // Finish off by computing and checking the CRC (and return pointer to just after CRC).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    383e:	ea 17       	cp	r30, r26
    3840:	fb 07       	cpc	r31, r27
    3842:	e0 f2       	brcs	.-72     	; 0x37fc <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0xdc>
  if(crc != *b++) { return(NULL); } // Bad CRC.
    3844:	8c 91       	ld	r24, X
    3846:	38 17       	cp	r19, r24
    3848:	21 f4       	brne	.+8      	; 0x3852 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
    384a:	9d 01       	movw	r18, r26
    384c:	2f 5f       	subi	r18, 0xFF	; 255
    384e:	3f 4f       	sbci	r19, 0xFF	; 255
    3850:	02 c0       	rjmp	.+4      	; 0x3856 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x136>

  return(b); // Point to just after CRC.
    3852:	20 e0       	ldi	r18, 0x00	; 0
    3854:	30 e0       	ldi	r19, 0x00	; 0
  }
    3856:	c9 01       	movw	r24, r18
    3858:	df 91       	pop	r29
    385a:	cf 91       	pop	r28
    385c:	1f 91       	pop	r17
    385e:	0f 91       	pop	r16
    3860:	ff 90       	pop	r15
    3862:	ef 90       	pop	r14
    3864:	08 95       	ret

00003866 <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)>:
  }

// Store minimal stats payload into (2-byte) buffer from payload struct (without CRC); values are coerced to fit as necessary..
//   * payload  must be non-null
// Used for minimal and full packet forms,
void writeTrailingMinimalStatsPayloadBody(uint8_t *buf, const trailingMinimalStatsPayload_t *payload)
    3866:	0f 93       	push	r16
    3868:	1f 93       	push	r17
    386a:	cf 93       	push	r28
    386c:	df 93       	push	r29
    386e:	8c 01       	movw	r16, r24
    3870:	eb 01       	movw	r28, r22
  {
#ifdef DEBUG
  if(NULL == payload) { panic(); }
    3872:	61 15       	cp	r22, r1
    3874:	71 05       	cpc	r23, r1
    3876:	11 f4       	brne	.+4      	; 0x387c <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x16>
    3878:	0e 94 db 2f 	call	0x5fb6	; 0x5fb6 <panic()>
  DEBUG_SERIAL_PRINTFMT(minTempRepresentable, DEC);
  DEBUG_SERIAL_PRINT_FLASHSTRING(" max=");
  DEBUG_SERIAL_PRINTFMT(maxTempRepresentable, DEC);
  DEBUG_SERIAL_PRINTLN();
#endif
  int16_t temp16Cbiased = payload->tempC16;
    387c:	88 81       	ld	r24, Y
    387e:	29 81       	ldd	r18, Y+1	; 0x01
    3880:	92 2f       	mov	r25, r18
    3882:	9f 77       	andi	r25, 0x7F	; 127
    3884:	88 0f       	add	r24, r24
    3886:	99 1f       	adc	r25, r25
    3888:	95 95       	asr	r25
    388a:	87 95       	ror	r24
    388c:	26 e0       	ldi	r18, 0x06	; 6
    388e:	80 3c       	cpi	r24, 0xC0	; 192
    3890:	92 07       	cpc	r25, r18
    3892:	14 f0       	brlt	.+4      	; 0x3898 <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x32>
    3894:	8f eb       	ldi	r24, 0xBF	; 191
    3896:	96 e0       	ldi	r25, 0x06	; 6
    3898:	ee ef       	ldi	r30, 0xFE	; 254
    389a:	80 3c       	cpi	r24, 0xC0	; 192
    389c:	9e 07       	cpc	r25, r30
    389e:	14 f4       	brge	.+4      	; 0x38a4 <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x3e>
    38a0:	80 ec       	ldi	r24, 0xC0	; 192
    38a2:	9e ef       	ldi	r25, 0xFE	; 254
  if(temp16Cbiased < minTempRepresentable) { temp16Cbiased = minTempRepresentable; }
  else if(temp16Cbiased > maxTempRepresentable) { temp16Cbiased = maxTempRepresentable; }
  temp16Cbiased -= MESSAGING_TRAILING_MINIMAL_STATS_TEMP_BIAS; // Should now be strictly positive.
    38a4:	9c 01       	movw	r18, r24
    38a6:	20 5c       	subi	r18, 0xC0	; 192
    38a8:	3e 4f       	sbci	r19, 0xFE	; 254
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("temp16Cbiased: ");
  DEBUG_SERIAL_PRINTFMT(temp16Cbiased, DEC);
  DEBUG_SERIAL_PRINTLN();
#endif
  const uint8_t byte0 = MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MSBS | (payload->powerLow ? 0x10 : 0) | (temp16Cbiased & 0xf);
    38aa:	89 81       	ldd	r24, Y+1	; 0x01
    38ac:	87 fd       	sbrc	r24, 7
    38ae:	02 c0       	rjmp	.+4      	; 0x38b4 <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x4e>
    38b0:	90 e4       	ldi	r25, 0x40	; 64
    38b2:	01 c0       	rjmp	.+2      	; 0x38b6 <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x50>
    38b4:	90 e5       	ldi	r25, 0x50	; 80
  const uint8_t byte1 = (uint8_t) (temp16Cbiased >> 4);
  buf[0] = byte0;
    38b6:	82 2f       	mov	r24, r18
    38b8:	8f 70       	andi	r24, 0x0F	; 15
    38ba:	98 2b       	or	r25, r24
    38bc:	f8 01       	movw	r30, r16
    38be:	90 83       	st	Z, r25
  buf[1] = byte1;
    38c0:	44 e0       	ldi	r20, 0x04	; 4
    38c2:	35 95       	asr	r19
    38c4:	27 95       	ror	r18
    38c6:	4a 95       	dec	r20
    38c8:	e1 f7       	brne	.-8      	; 0x38c2 <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x5c>
    38ca:	21 83       	std	Z+1, r18	; 0x01
#if 0 && defined(DEBUG)
  for(uint8_t i = 0; i < 2; ++i) { if(0 != (buf[i] & 0x80)) { panic(); } } // MSBits should be clear.
#endif
  }
    38cc:	df 91       	pop	r29
    38ce:	cf 91       	pop	r28
    38d0:	1f 91       	pop	r17
    38d2:	0f 91       	pop	r16
    38d4:	08 95       	ret

000038d6 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)>:
// Note that up to 7 bytes of payload is optimal for the CRC used.
// If successful, returns pointer to terminating 0xff at end of message.
// Returns null if failed (eg because of bad inputs or insufficient buffer space);
// part of the message may have have been written in this case and in particular the previous terminating 0xff may have been overwritten.
uint8_t *encodeFullStatsMessageCore(uint8_t * const buf, const uint8_t buflen, const stats_TX_level secLevel, const bool secureChannel,
    const FullStatsMessageCore_t * const content)
    38d6:	cf 92       	push	r12
    38d8:	df 92       	push	r13
    38da:	ef 92       	push	r14
    38dc:	ff 92       	push	r15
    38de:	0f 93       	push	r16
    38e0:	1f 93       	push	r17
    38e2:	cf 93       	push	r28
    38e4:	df 93       	push	r29
    38e6:	7c 01       	movw	r14, r24
    38e8:	6a 01       	movw	r12, r20
  {
  if(NULL == buf) { return(NULL); } // Could be an assert/panic instead at a pinch.
    38ea:	00 97       	sbiw	r24, 0x00	; 0
    38ec:	09 f4       	brne	.+2      	; 0x38f0 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x1a>
    38ee:	ad c0       	rjmp	.+346    	; 0x3a4a <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x174>
  if(NULL == content) { return(NULL); } // Could be an assert/panic instead at a pinch.
    38f0:	01 15       	cp	r16, r1
    38f2:	11 05       	cpc	r17, r1
    38f4:	09 f4       	brne	.+2      	; 0x38f8 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x22>
    38f6:	a9 c0       	rjmp	.+338    	; 0x3a4a <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x174>
  if(secureChannel) { return(NULL); } // TODO: cannot create secure message yet.
    38f8:	22 23       	and	r18, r18
    38fa:	09 f0       	breq	.+2      	; 0x38fe <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x28>
    38fc:	a6 c0       	rjmp	.+332    	; 0x3a4a <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x174>
  const uint8_t payloadLength =
      1 + // Initial header.
      (content->containsID ? 2 : 0) +
      (content->containsTempAndPower ? 2 : 0) +
      1 + // Flags header.
      (content->containsAmbL ? 1 : 0);
    38fe:	f8 01       	movw	r30, r16
    3900:	80 81       	ld	r24, Z
    3902:	58 2f       	mov	r21, r24
    3904:	51 70       	andi	r21, 0x01	; 1
    3906:	80 fd       	sbrc	r24, 0
    3908:	02 c0       	rjmp	.+4      	; 0x390e <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x38>
    390a:	21 e0       	ldi	r18, 0x01	; 1
    390c:	01 c0       	rjmp	.+2      	; 0x3910 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x3a>
    390e:	23 e0       	ldi	r18, 0x03	; 3
    3910:	f8 01       	movw	r30, r16
    3912:	80 81       	ld	r24, Z
    3914:	81 fd       	sbrc	r24, 1
    3916:	02 c0       	rjmp	.+4      	; 0x391c <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x46>
    3918:	90 e0       	ldi	r25, 0x00	; 0
    391a:	01 c0       	rjmp	.+2      	; 0x391e <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x48>
    391c:	92 e0       	ldi	r25, 0x02	; 2
    391e:	f8 01       	movw	r30, r16
    3920:	40 81       	ld	r20, Z
    3922:	46 95       	lsr	r20
    3924:	46 95       	lsr	r20
    3926:	41 70       	andi	r20, 0x01	; 1
  if(buflen < payloadLength + 2)  { return(NULL); }
    3928:	84 2f       	mov	r24, r20
    392a:	8f 5f       	subi	r24, 0xFF	; 255
    392c:	82 0f       	add	r24, r18
    392e:	89 0f       	add	r24, r25
    3930:	90 e0       	ldi	r25, 0x00	; 0
    3932:	01 96       	adiw	r24, 0x01	; 1
    3934:	26 2f       	mov	r18, r22
    3936:	30 e0       	ldi	r19, 0x00	; 0
    3938:	82 17       	cp	r24, r18
    393a:	93 07       	cpc	r25, r19
    393c:	0c f0       	brlt	.+2      	; 0x3940 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x6a>
    393e:	85 c0       	rjmp	.+266    	; 0x3a4a <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x174>

  // Validate some more detail.
  // ID
  if(content->containsID)
    3940:	55 23       	and	r21, r21
    3942:	59 f0       	breq	.+22     	; 0x395a <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x84>
    {
    if((content->id0 == (uint8_t)0xff) || (content->id1 == (uint8_t)0xff)) { return(NULL); } // ID bytes cannot be 0xff.
    3944:	91 81       	ldd	r25, Z+1	; 0x01
    3946:	9f 3f       	cpi	r25, 0xFF	; 255
    3948:	09 f4       	brne	.+2      	; 0x394c <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x76>
    394a:	7f c0       	rjmp	.+254    	; 0x3a4a <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x174>
    394c:	82 81       	ldd	r24, Z+2	; 0x02
    394e:	8f 3f       	cpi	r24, 0xFF	; 255
    3950:	09 f4       	brne	.+2      	; 0x3954 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x7e>
    3952:	7b c0       	rjmp	.+246    	; 0x3a4a <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x174>
    if((content->id0 & 0x80) != (content->id1 & 0x80)) { return(NULL); } // ID top bits don't match.
    3954:	89 27       	eor	r24, r25
    3956:	87 fd       	sbrc	r24, 7
    3958:	78 c0       	rjmp	.+240    	; 0x3a4a <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x174>
    }
  // Ambient light.
  if(content->containsAmbL)
    395a:	44 23       	and	r20, r20
    395c:	31 f0       	breq	.+12     	; 0x396a <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x94>
    {
    if((content->ambL == 0) || (content->ambL == (uint8_t)0xff)) { return(NULL); } // Forbidden values.
    395e:	f8 01       	movw	r30, r16
    3960:	85 81       	ldd	r24, Z+5	; 0x05
    3962:	81 50       	subi	r24, 0x01	; 1
    3964:	8e 3f       	cpi	r24, 0xFE	; 254
    3966:	08 f0       	brcs	.+2      	; 0x396a <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x94>
    3968:	70 c0       	rjmp	.+224    	; 0x3a4a <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x174>
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_HIGH 2
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_SECURE 1
  const uint8_t header = MESSAGING_FULL_STATS_HEADER_MSBS |
      (content->containsID ? MESSAGING_FULL_STATS_HEADER_BITS_ID_PRESENT : 0) |
      ((content->containsID && (0 != (content->id0 & 0x80))) ? MESSAGING_FULL_STATS_HEADER_BITS_ID_HIGH : 0) |
      0; // TODO: cannot do secure messages yet.
    396a:	55 23       	and	r21, r21
    396c:	11 f4       	brne	.+4      	; 0x3972 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x9c>
    396e:	80 e7       	ldi	r24, 0x70	; 112
    3970:	08 c0       	rjmp	.+16     	; 0x3982 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xac>
    3972:	f8 01       	movw	r30, r16
    3974:	81 81       	ldd	r24, Z+1	; 0x01
    3976:	87 ff       	sbrs	r24, 7
    3978:	03 c0       	rjmp	.+6      	; 0x3980 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xaa>
    397a:	92 e0       	ldi	r25, 0x02	; 2
    397c:	84 e7       	ldi	r24, 0x74	; 116
    397e:	02 c0       	rjmp	.+4      	; 0x3984 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xae>
    3980:	84 e7       	ldi	r24, 0x74	; 116
    3982:	90 e0       	ldi	r25, 0x00	; 0
  *b++ = header;
    3984:	89 2b       	or	r24, r25
    3986:	e7 01       	movw	r28, r14
    3988:	89 93       	st	Y+, r24
 
  // Insert ID if requested.
  if(content->containsID)
    398a:	f8 01       	movw	r30, r16
    398c:	80 81       	ld	r24, Z
    398e:	80 ff       	sbrs	r24, 0
    3990:	09 c0       	rjmp	.+18     	; 0x39a4 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xce>
    {
    *b++ = content->id0 & 0x7f;
    3992:	81 81       	ldd	r24, Z+1	; 0x01
    3994:	8f 77       	andi	r24, 0x7F	; 127
    3996:	f7 01       	movw	r30, r14
    3998:	81 83       	std	Z+1, r24	; 0x01
    *b++ = content->id1 & 0x7f;
    399a:	f8 01       	movw	r30, r16
    399c:	82 81       	ldd	r24, Z+2	; 0x02
    399e:	8f 77       	andi	r24, 0x7F	; 127
    39a0:	89 83       	std	Y+1, r24	; 0x01
    39a2:	22 96       	adiw	r28, 0x02	; 2
    }

  // Insert basic temperature and power status if requested.
  if(content->containsTempAndPower)
    39a4:	f8 01       	movw	r30, r16
    39a6:	80 81       	ld	r24, Z
    39a8:	81 ff       	sbrs	r24, 1
    39aa:	07 c0       	rjmp	.+14     	; 0x39ba <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xe4>
    {
    writeTrailingMinimalStatsPayloadBody(b, &(content->tempAndPower));
    39ac:	b8 01       	movw	r22, r16
    39ae:	6d 5f       	subi	r22, 0xFD	; 253
    39b0:	7f 4f       	sbci	r23, 0xFF	; 255
    39b2:	ce 01       	movw	r24, r28
    39b4:	0e 94 33 1c 	call	0x3866	; 0x3866 <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)>
    b += 2;
    39b8:	22 96       	adiw	r28, 0x02	; 2
//#define MESSAGING_FULL_STATS_FLAGS_HEADER_AMBL 8
//#define MESSAGING_FULL_STATS_FLAGS_HEADER_RHP 4
  // Omit occupancy data unless encoding for a secure channel or at a very permissive stats TX security level.
  const uint8_t flagsHeader = MESSAGING_FULL_STATS_FLAGS_HEADER_MSBS |
    (content->containsAmbL ? MESSAGING_FULL_STATS_FLAGS_HEADER_AMBL : 0) |
    ((secureChannel || (secLevel <= stTXalwaysAll)) ? (content->occ & 3) : 0);
    39ba:	f8 01       	movw	r30, r16
    39bc:	80 81       	ld	r24, Z
    39be:	82 fd       	sbrc	r24, 2
    39c0:	02 c0       	rjmp	.+4      	; 0x39c6 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xf0>
    39c2:	90 e6       	ldi	r25, 0x60	; 96
    39c4:	01 c0       	rjmp	.+2      	; 0x39c8 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xf2>
    39c6:	98 e6       	ldi	r25, 0x68	; 104
    39c8:	1c 14       	cp	r1, r12
    39ca:	1d 04       	cpc	r1, r13
    39cc:	14 f4       	brge	.+4      	; 0x39d2 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xfc>
    39ce:	80 e0       	ldi	r24, 0x00	; 0
    39d0:	03 c0       	rjmp	.+6      	; 0x39d8 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x102>
    39d2:	f8 01       	movw	r30, r16
    39d4:	86 81       	ldd	r24, Z+6	; 0x06
    39d6:	83 70       	andi	r24, 0x03	; 3
  *b++ = flagsHeader;
    39d8:	89 2b       	or	r24, r25
    39da:	de 01       	movw	r26, r28
    39dc:	8d 93       	st	X+, r24
  // Now insert extra fields as flagged.
  if(content->containsAmbL)
    39de:	f8 01       	movw	r30, r16
    39e0:	80 81       	ld	r24, Z
    39e2:	82 ff       	sbrs	r24, 2
    39e4:	03 c0       	rjmp	.+6      	; 0x39ec <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x116>
    { *b++ = content->ambL; }
    39e6:	85 81       	ldd	r24, Z+5	; 0x05
    39e8:	89 83       	std	Y+1, r24	; 0x01
    39ea:	11 96       	adiw	r26, 0x01	; 1
    39ec:	f7 01       	movw	r30, r14
    39ee:	3f e7       	ldi	r19, 0x7F	; 127
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    39f0:	11 e0       	ldi	r17, 0x01	; 1
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
    39f2:	77 e3       	ldi	r23, 0x37	; 55
    39f4:	21 c0       	rjmp	.+66     	; 0x3a38 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x162>
  // TODO: RH% etc

  // Finish off message by computing and appending the CRC and then terminating 0xff (and return pointer to 0xff).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    39f6:	80 81       	ld	r24, Z
    39f8:	60 e8       	ldi	r22, 0x80	; 128
    39fa:	40 e0       	ldi	r20, 0x00	; 0
    39fc:	50 e0       	ldi	r21, 0x00	; 0
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    39fe:	c8 2f       	mov	r28, r24
    3a00:	d0 e0       	ldi	r29, 0x00	; 0
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
    3a02:	83 2f       	mov	r24, r19
    3a04:	90 e0       	ldi	r25, 0x00	; 0
    3a06:	06 e0       	ldi	r16, 0x06	; 6
    3a08:	96 95       	lsr	r25
    3a0a:	87 95       	ror	r24
    3a0c:	0a 95       	dec	r16
    3a0e:	e1 f7       	brne	.-8      	; 0x3a08 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x132>
    3a10:	28 2f       	mov	r18, r24
    3a12:	21 70       	andi	r18, 0x01	; 1
        if(0 != (datum & i)) { bit = !bit; }
    3a14:	86 2f       	mov	r24, r22
    3a16:	90 e0       	ldi	r25, 0x00	; 0
    3a18:	8c 23       	and	r24, r28
    3a1a:	9d 23       	and	r25, r29
    3a1c:	89 2b       	or	r24, r25
    3a1e:	09 f0       	breq	.+2      	; 0x3a22 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x14c>
    3a20:	21 27       	eor	r18, r17
        crc <<= 1;
    3a22:	33 0f       	add	r19, r19
        if(bit) { crc ^= 0x37; }
    3a24:	21 11       	cpse	r18, r1
    3a26:	37 27       	eor	r19, r23
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
    3a28:	66 95       	lsr	r22
    3a2a:	4f 5f       	subi	r20, 0xFF	; 255
    3a2c:	5f 4f       	sbci	r21, 0xFF	; 255
    3a2e:	48 30       	cpi	r20, 0x08	; 8
    3a30:	51 05       	cpc	r21, r1
    3a32:	39 f7       	brne	.-50     	; 0x3a02 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x12c>
  // TODO: RH% etc

  // Finish off message by computing and appending the CRC and then terminating 0xff (and return pointer to 0xff).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    3a34:	31 96       	adiw	r30, 0x01	; 1
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
        }
    return(crc & 0x7f);
    3a36:	3f 77       	andi	r19, 0x7F	; 127
  // TODO: RH% etc

  // Finish off message by computing and appending the CRC and then terminating 0xff (and return pointer to 0xff).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    3a38:	ea 17       	cp	r30, r26
    3a3a:	fb 07       	cpc	r31, r27
    3a3c:	e0 f2       	brcs	.-72     	; 0x39f6 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x120>
  *b++ = crc;
    3a3e:	fd 01       	movw	r30, r26
    3a40:	31 93       	st	Z+, r19
  *b = 0xff;
    3a42:	8f ef       	ldi	r24, 0xFF	; 255
    3a44:	11 96       	adiw	r26, 0x01	; 1
    3a46:	8c 93       	st	X, r24
    3a48:	02 c0       	rjmp	.+4      	; 0x3a4e <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x178>
#if 0 && defined(DEBUG)
  if(b - buf != payloadLength + 1) { panic(F("msg gen err")); }
#endif
  return(b);
    3a4a:	e0 e0       	ldi	r30, 0x00	; 0
    3a4c:	f0 e0       	ldi	r31, 0x00	; 0
  }
    3a4e:	cf 01       	movw	r24, r30
    3a50:	df 91       	pop	r29
    3a52:	cf 91       	pop	r28
    3a54:	1f 91       	pop	r17
    3a56:	0f 91       	pop	r16
    3a58:	ff 90       	pop	r15
    3a5a:	ef 90       	pop	r14
    3a5c:	df 90       	pop	r13
    3a5e:	cf 90       	pop	r12
    3a60:	08 95       	ret

00003a62 <SupplyVoltageMilliVolts::get() const>:
    virtual uint16_t read();

    // Return last value fetched by read(); undefined before first read()).
    // Fast.
    // NOT thread-safe nor usable within ISRs (Interrupt Service Routines).
    virtual uint16_t get() const { return(mV); }
    3a62:	fc 01       	movw	r30, r24
    3a64:	84 81       	ldd	r24, Z+4	; 0x04
    3a66:	95 81       	ldd	r25, Z+5	; 0x05
    3a68:	08 95       	ret

00003a6a <SupplyVoltageMilliVolts::tag() const>:

    // Returns a suggested (JSON) tag/field/key name including units of get(); NULL means no recommended tag.
    // The lifetime of the pointed-to text must be at least that of the Sensor instance.
    virtual const char *tag() const { return("B|mV"); }
    3a6a:	81 e2       	ldi	r24, 0x21	; 33
    3a6c:	91 e0       	ldi	r25, 0x01	; 1
    3a6e:	08 95       	ret

00003a70 <__vector_9>:
  timer2XtalIntSetup();
#endif
  }

#ifdef WAKEUP_32768HZ_XTAL
ISR(TIMER2_OVF_vect)
    3a70:	1f 92       	push	r1
    3a72:	0f 92       	push	r0
    3a74:	0f b6       	in	r0, 0x3f	; 63
    3a76:	0f 92       	push	r0
    3a78:	11 24       	eor	r1, r1
    3a7a:	2f 93       	push	r18
    3a7c:	8f 93       	push	r24
    3a7e:	9f 93       	push	r25
// must not enable interrupts, and must leave interrupt state as was on entry.
// If not being called from an ISR then locking round this call that works with the getXXX() functions should be considered.
static inline void tickSecondISR()
#endif
  {
  register uint_fast8_t sTemp = _secondsLT; // Avoid some redundant memory accesses.
    3a80:	80 91 6d 03 	lds	r24, 0x036D
  sTemp += MAIN_TICK_S;
    3a84:	8e 5f       	subi	r24, 0xFE	; 254
  if(sTemp > 59)
    3a86:	8c 33       	cpi	r24, 0x3C	; 60
    3a88:	c8 f0       	brcs	.+50     	; 0x3abc <__vector_9+0x4c>
    {
    sTemp = 0; // Seconds roll.
    register uint_least16_t mTemp = _minutesSinceMidnightLT + 1; // Avoid some redundant memory accesses.
    3a8a:	80 91 6e 03 	lds	r24, 0x036E
    3a8e:	90 91 6f 03 	lds	r25, 0x036F
    3a92:	01 96       	adiw	r24, 0x01	; 1
    if(mTemp > 1439)
    3a94:	25 e0       	ldi	r18, 0x05	; 5
    3a96:	80 3a       	cpi	r24, 0xA0	; 160
    3a98:	92 07       	cpc	r25, r18
    3a9a:	58 f0       	brcs	.+22     	; 0x3ab2 <__vector_9+0x42>
      {
      mTemp = 0; // Minutes/hours roll.
      // Increment the day.
      ++_daysSince1999LT; // Don't currently prevent roll.
    3a9c:	80 91 70 03 	lds	r24, 0x0370
    3aa0:	90 91 71 03 	lds	r25, 0x0371
    3aa4:	01 96       	adiw	r24, 0x01	; 1
    3aa6:	90 93 71 03 	sts	0x0371, r25
    3aaa:	80 93 70 03 	sts	0x0370, r24
    3aae:	80 e0       	ldi	r24, 0x00	; 0
    3ab0:	90 e0       	ldi	r25, 0x00	; 0
      }
    _minutesSinceMidnightLT = mTemp;
    3ab2:	90 93 6f 03 	sts	0x036F, r25
    3ab6:	80 93 6e 03 	sts	0x036E, r24
    3aba:	80 e0       	ldi	r24, 0x00	; 0
    }
  _secondsLT = sTemp;
    3abc:	80 93 6d 03 	sts	0x036D, r24
#if defined(TWO_S_TICK_RTC_SUPPORT)
  tickDoubleSecondISR();
#else
  tickSecondISR();
#endif
  }
    3ac0:	9f 91       	pop	r25
    3ac2:	8f 91       	pop	r24
    3ac4:	2f 91       	pop	r18
    3ac6:	0f 90       	pop	r0
    3ac8:	0f be       	out	0x3f, r0	; 63
    3aca:	0f 90       	pop	r0
    3acc:	1f 90       	pop	r1
    3ace:	18 95       	reti

00003ad0 <__vector_6>:
// May contain a little entropy concentrated in the least-significant bits, in part from WDT-vs-CPU-clock jitter, especially if not sleeping.
static volatile uint8_t _watchdogFired;

// Catch watchdog timer interrupt to automatically clear WDIE and WDIF.
// This allows use of watchdog for low-power timed sleep.
ISR(WDT_vect)
    3ad0:	1f 92       	push	r1
    3ad2:	0f 92       	push	r0
    3ad4:	0f b6       	in	r0, 0x3f	; 63
    3ad6:	0f 92       	push	r0
    3ad8:	11 24       	eor	r1, r1
    3ada:	8f 93       	push	r24
    3adc:	9f 93       	push	r25
    3ade:	df 93       	push	r29
    3ae0:	cf 93       	push	r28
    3ae2:	0f 92       	push	r0
    3ae4:	cd b7       	in	r28, 0x3d	; 61
    3ae6:	de b7       	in	r29, 0x3e	; 62
  {
  // WDIE and WDIF are cleared in hardware upon entering this ISR.
  wdt_disable();
    3ae8:	88 e1       	ldi	r24, 0x18	; 24
    3aea:	0f b6       	in	r0, 0x3f	; 63
    3aec:	f8 94       	cli
    3aee:	80 93 60 00 	sts	0x0060, r24
    3af2:	10 92 60 00 	sts	0x0060, r1
    3af6:	0f be       	out	0x3f, r0	; 63
  // Note: be careful of what is accessed from this ISR.
  // Capture some marginal entropy from the stack position.
  // 
  uint8_t x;
  _watchdogFired = ((uint8_t) 0x80) | ((uint8_t) (int) &x); // Ensure non-zero, retaining any entropy in ls bits.
    3af8:	ce 01       	movw	r24, r28
    3afa:	01 96       	adiw	r24, 0x01	; 1
    3afc:	80 68       	ori	r24, 0x80	; 128
    3afe:	80 93 66 03 	sts	0x0366, r24
  }
    3b02:	0f 90       	pop	r0
    3b04:	cf 91       	pop	r28
    3b06:	df 91       	pop	r29
    3b08:	9f 91       	pop	r25
    3b0a:	8f 91       	pop	r24
    3b0c:	0f 90       	pop	r0
    3b0e:	0f be       	out	0x3f, r0	; 63
    3b10:	0f 90       	pop	r0
    3b12:	1f 90       	pop	r1
    3b14:	18 95       	reti

00003b16 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>:
// Note: inlining is prevented so as to avoid migrating anything into the section where the CPU is running slowly.
//
// Note: may be dubious to run CPU clock less than 4x 32768Hz crystal speed,
// eg at 31250Hz for 8MHz RC clock and max prescale.
// Don't access timer 2 regs at low CPU speed, eg in ISRs.
__attribute__ ((noinline)) void sleepLowPowerLoopsMinCPUSpeed(uint16_t loops)
    3b16:	fc 01       	movw	r30, r24
  {
  const clock_div_t prescale = clock_prescale_get(); // Capture current prescale value.
    3b18:	80 91 61 00 	lds	r24, 0x0061
  clock_prescale_set(MAX_CPU_PRESCALE); // Reduce clock speed (increase prescale) as far as possible.
    3b1c:	28 e0       	ldi	r18, 0x08	; 8
    3b1e:	30 e0       	ldi	r19, 0x00	; 0
    3b20:	40 e8       	ldi	r20, 0x80	; 128
    3b22:	0f b6       	in	r0, 0x3f	; 63
    3b24:	f8 94       	cli
    3b26:	40 93 61 00 	sts	0x0061, r20
    3b2a:	20 93 61 00 	sts	0x0061, r18
    3b2e:	0f be       	out	0x3f, r0	; 63
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    3b30:	31 97       	sbiw	r30, 0x01	; 1
    3b32:	f1 f7       	brne	.-4      	; 0x3b30 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)+0x1a>
  _delay_loop_2(loops); // Burn cycles...
  clock_prescale_set(prescale); // Restore clock prescale.
    3b34:	90 e0       	ldi	r25, 0x00	; 0
    3b36:	8f 70       	andi	r24, 0x0F	; 15
    3b38:	90 70       	andi	r25, 0x00	; 0
    3b3a:	20 e8       	ldi	r18, 0x80	; 128
    3b3c:	0f b6       	in	r0, 0x3f	; 63
    3b3e:	f8 94       	cli
    3b40:	20 93 61 00 	sts	0x0061, r18
    3b44:	80 93 61 00 	sts	0x0061, r24
    3b48:	0f be       	out	0x3f, r0	; 63
  }
    3b4a:	08 95       	ret

00003b4c <sleepPwrSaveWithBODDisabled()>:
#endif

// Sleep with BOD disabled in power-save mode; will wake on any interrupt.
void sleepPwrSaveWithBODDisabled()
  {
  set_sleep_mode(SLEEP_MODE_PWR_SAVE); // Stop all but timer 2 and watchdog when sleeping.
    3b4c:	83 b7       	in	r24, 0x33	; 51
    3b4e:	81 7f       	andi	r24, 0xF1	; 241
    3b50:	86 60       	ori	r24, 0x06	; 6
    3b52:	83 bf       	out	0x33, r24	; 51
  cli();
    3b54:	f8 94       	cli
  sleep_enable();
    3b56:	83 b7       	in	r24, 0x33	; 51
    3b58:	81 60       	ori	r24, 0x01	; 1
    3b5a:	83 bf       	out	0x33, r24	; 51
  sleep_bod_disable();
    3b5c:	85 b7       	in	r24, 0x35	; 53
    3b5e:	80 66       	ori	r24, 0x60	; 96
    3b60:	85 bf       	out	0x35, r24	; 53
    3b62:	8f 7d       	andi	r24, 0xDF	; 223
    3b64:	85 bf       	out	0x35, r24	; 53
  sei();
    3b66:	78 94       	sei
  sleep_cpu();
    3b68:	88 95       	sleep
  sleep_disable();
    3b6a:	83 b7       	in	r24, 0x33	; 51
    3b6c:	8e 7f       	andi	r24, 0xFE	; 254
    3b6e:	83 bf       	out	0x33, r24	; 51
  sei();
    3b70:	78 94       	sei
  }
    3b72:	08 95       	ret

00003b74 <nap(signed char)>:
//   * watchdogSleep is one of the WDTO_XX values from <avr/wdt.h>
// May be useful to call minimsePowerWithoutSleep() first, when not needing any modules left on.
void nap(int_fast8_t watchdogSleep)
  {
  // Watchdog should (already) be disabled on entry.
  _watchdogFired = 0;
    3b74:	10 92 66 03 	sts	0x0366, r1

  wdt_enable(watchdogSleep);
    3b78:	83 fd       	sbrc	r24, 3
    3b7a:	02 c0       	rjmp	.+4      	; 0x3b80 <nap(signed char)+0xc>
    3b7c:	28 e0       	ldi	r18, 0x08	; 8
    3b7e:	01 c0       	rjmp	.+2      	; 0x3b82 <nap(signed char)+0xe>
    3b80:	28 e2       	ldi	r18, 0x28	; 40
    3b82:	87 70       	andi	r24, 0x07	; 7
    3b84:	28 2b       	or	r18, r24
    3b86:	88 e1       	ldi	r24, 0x18	; 24
    3b88:	90 e0       	ldi	r25, 0x00	; 0
    3b8a:	0f b6       	in	r0, 0x3f	; 63
    3b8c:	f8 94       	cli
    3b8e:	a8 95       	wdr
    3b90:	80 93 60 00 	sts	0x0060, r24
    3b94:	0f be       	out	0x3f, r0	; 63
    3b96:	20 93 60 00 	sts	0x0060, r18
  WDTCSR |= (1 << WDIE);
    3b9a:	80 91 60 00 	lds	r24, 0x0060
    3b9e:	80 64       	ori	r24, 0x40	; 64
    3ba0:	80 93 60 00 	sts	0x0060, r24
#endif

// Sleep with BOD disabled in power-save mode; will wake on any interrupt.
void sleepPwrSaveWithBODDisabled()
  {
  set_sleep_mode(SLEEP_MODE_PWR_SAVE); // Stop all but timer 2 and watchdog when sleeping.
    3ba4:	83 b7       	in	r24, 0x33	; 51
    3ba6:	81 7f       	andi	r24, 0xF1	; 241
    3ba8:	86 60       	ori	r24, 0x06	; 6
    3baa:	83 bf       	out	0x33, r24	; 51
  cli();
    3bac:	f8 94       	cli
  sleep_enable();
    3bae:	83 b7       	in	r24, 0x33	; 51
    3bb0:	81 60       	ori	r24, 0x01	; 1
    3bb2:	83 bf       	out	0x33, r24	; 51
  sleep_bod_disable();
    3bb4:	85 b7       	in	r24, 0x35	; 53
    3bb6:	80 66       	ori	r24, 0x60	; 96
    3bb8:	85 bf       	out	0x35, r24	; 53
    3bba:	8f 7d       	andi	r24, 0xDF	; 223
    3bbc:	85 bf       	out	0x35, r24	; 53
  sei();
    3bbe:	78 94       	sei
  sleep_cpu();
    3bc0:	88 95       	sleep
  sleep_disable();
    3bc2:	83 b7       	in	r24, 0x33	; 51
    3bc4:	8e 7f       	andi	r24, 0xFE	; 254
    3bc6:	83 bf       	out	0x33, r24	; 51
  sei();
    3bc8:	78 94       	sei

  // Keep sleeping until watchdog actually fires.
  for( ; ; )
    {
    sleepPwrSaveWithBODDisabled();
    if(0 != _watchdogFired)
    3bca:	80 91 66 03 	lds	r24, 0x0366
    3bce:	88 23       	and	r24, r24
    3bd0:	49 f3       	breq	.-46     	; 0x3ba4 <nap(signed char)+0x30>
      {
      wdt_disable(); // Avoid spurious wakeup later.
    3bd2:	88 e1       	ldi	r24, 0x18	; 24
    3bd4:	0f b6       	in	r0, 0x3f	; 63
    3bd6:	f8 94       	cli
    3bd8:	80 93 60 00 	sts	0x0060, r24
    3bdc:	10 92 60 00 	sts	0x0060, r1
    3be0:	0f be       	out	0x3f, r0	; 63
      return; // All done!
      }
    }
 }
    3be2:	08 95       	ret

00003be4 <idleCPU(signed char)>:
// Should reduce power consumption vs spinning the CPU >> 3x, though not nearly as much as nap().
// True iff watchdog timer expired; false if something else woke the CPU.
bool idleCPU(const int_fast8_t watchdogSleep)
  {
  // Watchdog should (already) be disabled on entry.
  _watchdogFired = 0;
    3be4:	10 92 66 03 	sts	0x0366, r1
  wdt_enable(watchdogSleep);
    3be8:	83 fd       	sbrc	r24, 3
    3bea:	02 c0       	rjmp	.+4      	; 0x3bf0 <idleCPU(signed char)+0xc>
    3bec:	28 e0       	ldi	r18, 0x08	; 8
    3bee:	01 c0       	rjmp	.+2      	; 0x3bf2 <idleCPU(signed char)+0xe>
    3bf0:	28 e2       	ldi	r18, 0x28	; 40
    3bf2:	87 70       	andi	r24, 0x07	; 7
    3bf4:	28 2b       	or	r18, r24
    3bf6:	88 e1       	ldi	r24, 0x18	; 24
    3bf8:	90 e0       	ldi	r25, 0x00	; 0
    3bfa:	0f b6       	in	r0, 0x3f	; 63
    3bfc:	f8 94       	cli
    3bfe:	a8 95       	wdr
    3c00:	80 93 60 00 	sts	0x0060, r24
    3c04:	0f be       	out	0x3f, r0	; 63
    3c06:	20 93 60 00 	sts	0x0060, r18
  WDTCSR |= (1 << WDIE);
    3c0a:	80 91 60 00 	lds	r24, 0x0060
    3c0e:	80 64       	ori	r24, 0x40	; 64
    3c10:	80 93 60 00 	sts	0x0060, r24
  set_sleep_mode(SLEEP_MODE_IDLE); // Leave everything running but the CPU...
    3c14:	83 b7       	in	r24, 0x33	; 51
    3c16:	81 7f       	andi	r24, 0xF1	; 241
    3c18:	83 bf       	out	0x33, r24	; 51
  sleep_mode();
    3c1a:	83 b7       	in	r24, 0x33	; 51
    3c1c:	81 60       	ori	r24, 0x01	; 1
    3c1e:	83 bf       	out	0x33, r24	; 51
    3c20:	88 95       	sleep
    3c22:	83 b7       	in	r24, 0x33	; 51
    3c24:	8e 7f       	andi	r24, 0xFE	; 254
    3c26:	83 bf       	out	0x33, r24	; 51
  //sleep_disable();
  wdt_disable();
    3c28:	88 e1       	ldi	r24, 0x18	; 24
    3c2a:	0f b6       	in	r0, 0x3f	; 63
    3c2c:	f8 94       	cli
    3c2e:	80 93 60 00 	sts	0x0060, r24
    3c32:	10 92 60 00 	sts	0x0060, r1
    3c36:	0f be       	out	0x3f, r0	; 63
  return(0 != _watchdogFired);
    3c38:	80 91 66 03 	lds	r24, 0x0366
    3c3c:	81 11       	cpse	r24, r1
    3c3e:	81 e0       	ldi	r24, 0x01	; 1
  }
    3c40:	08 95       	ret

00003c42 <__vector_21>:
  }


// Allow wake from (lower-power) sleep while ADC is running.
static volatile bool ADC_complete;
ISR(ADC_vect) { ADC_complete = true; }
    3c42:	1f 92       	push	r1
    3c44:	0f 92       	push	r0
    3c46:	0f b6       	in	r0, 0x3f	; 63
    3c48:	0f 92       	push	r0
    3c4a:	11 24       	eor	r1, r1
    3c4c:	8f 93       	push	r24
    3c4e:	81 e0       	ldi	r24, 0x01	; 1
    3c50:	80 93 68 03 	sts	0x0368, r24
    3c54:	8f 91       	pop	r24
    3c56:	0f 90       	pop	r0
    3c58:	0f be       	out	0x3f, r0	; 63
    3c5a:	0f 90       	pop	r0
    3c5c:	1f 90       	pop	r1
    3c5e:	18 95       	reti

00003c60 <_analogueNoiseReducedReadM(unsigned char, signed char)>:

// Read ADC/analogue input with reduced noise if possible, in range [0,1023].
//   * admux  is the value to set ADMUX to
//   * samples  maximum number of samples to take (if one, nap() before); strictly positive
// Sets sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
static uint16_t _analogueNoiseReducedReadM(const uint8_t admux, int8_t samples = 3)
    3c60:	0f 93       	push	r16
    3c62:	1f 93       	push	r17
    3c64:	98 2f       	mov	r25, r24
    3c66:	16 2f       	mov	r17, r22
// If already powered up then do nothing other than return false.
// This does not power up the analogue comparator; this needs to be manually enabled if required.
// If this returns true then a matching powerDownADC() may be advisable.
bool powerUpADCIfDisabled()
  {
  if(!(PRR & _BV(PRADC))) { return(false); }
    3c68:	80 91 64 00 	lds	r24, 0x0064
    3c6c:	80 fd       	sbrc	r24, 0
    3c6e:	02 c0       	rjmp	.+4      	; 0x3c74 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x14>
    3c70:	00 e0       	ldi	r16, 0x00	; 0
    3c72:	0b c0       	rjmp	.+22     	; 0x3c8a <_analogueNoiseReducedReadM(unsigned char, signed char)+0x2a>
  PRR &= ~_BV(PRADC); // Enable the ADC.
    3c74:	80 91 64 00 	lds	r24, 0x0064
    3c78:	8e 7f       	andi	r24, 0xFE	; 254
    3c7a:	80 93 64 00 	sts	0x0064, r24
  ADCSRA |= _BV(ADEN);
    3c7e:	80 91 7a 00 	lds	r24, 0x007A
    3c82:	80 68       	ori	r24, 0x80	; 128
    3c84:	80 93 7a 00 	sts	0x007A, r24
    3c88:	01 e0       	ldi	r16, 0x01	; 1
//   * samples  maximum number of samples to take (if one, nap() before); strictly positive
// Sets sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
static uint16_t _analogueNoiseReducedReadM(const uint8_t admux, int8_t samples = 3)
  {
  const bool neededEnable = powerUpADCIfDisabled();
  ACSR |= _BV(ACD); // Disable the analogue comparator.
    3c8a:	80 b7       	in	r24, 0x30	; 48
    3c8c:	80 68       	ori	r24, 0x80	; 128
    3c8e:	80 bf       	out	0x30, r24	; 48
  ADMUX = admux;
    3c90:	90 93 7c 00 	sts	0x007C, r25
  if(samples < 2) { nap(WDTO_15MS); } // Allow plenty of time for things to settle if not taking multiple samples.
    3c94:	12 30       	cpi	r17, 0x02	; 2
    3c96:	1c f4       	brge	.+6      	; 0x3c9e <_analogueNoiseReducedReadM(unsigned char, signed char)+0x3e>
    3c98:	80 e0       	ldi	r24, 0x00	; 0
    3c9a:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <nap(signed char)>
  set_sleep_mode(SLEEP_MODE_ADC);
    3c9e:	83 b7       	in	r24, 0x33	; 51
    3ca0:	81 7f       	andi	r24, 0xF1	; 241
    3ca2:	82 60       	ori	r24, 0x02	; 2
    3ca4:	83 bf       	out	0x33, r24	; 51
  ADCSRB = 0; // Enable free-running mode.
    3ca6:	10 92 7b 00 	sts	0x007B, r1
  bitWrite(ADCSRA, ADATE, (samples>1)); // Enable ADC auto-trigger iff wanting multiple samples.
    3caa:	12 30       	cpi	r17, 0x02	; 2
    3cac:	24 f0       	brlt	.+8      	; 0x3cb6 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x56>
    3cae:	80 91 7a 00 	lds	r24, 0x007A
    3cb2:	80 62       	ori	r24, 0x20	; 32
    3cb4:	03 c0       	rjmp	.+6      	; 0x3cbc <_analogueNoiseReducedReadM(unsigned char, signed char)+0x5c>
    3cb6:	80 91 7a 00 	lds	r24, 0x007A
    3cba:	8f 7d       	andi	r24, 0xDF	; 223
    3cbc:	80 93 7a 00 	sts	0x007A, r24
  bitSet(ADCSRA, ADIE); // Turn on ADC interrupt.
    3cc0:	80 91 7a 00 	lds	r24, 0x007A
    3cc4:	88 60       	ori	r24, 0x08	; 8
    3cc6:	80 93 7a 00 	sts	0x007A, r24
  bitSet(ADCSRA, ADSC); // Start conversion(s).
    3cca:	80 91 7a 00 	lds	r24, 0x007A
    3cce:	80 64       	ori	r24, 0x40	; 64
    3cd0:	80 93 7a 00 	sts	0x007A, r24
    3cd4:	4f ef       	ldi	r20, 0xFF	; 255
    3cd6:	9f ef       	ldi	r25, 0xFF	; 255
    3cd8:	21 c0       	rjmp	.+66     	; 0x3d1c <_analogueNoiseReducedReadM(unsigned char, signed char)+0xbc>
  uint8_t oldADCL = 0xff;
  uint8_t oldADCH = 0xff; // Ensure that a second sample will get taken if multiple samples have been requested.
  // Usually take several readings to improve accuracy.  Discard all but the last...
  while(--samples >= 0)
      {
      ADC_complete = false;
    3cda:	10 92 68 03 	sts	0x0368, r1
    3cde:	07 c0       	rjmp	.+14     	; 0x3cee <_analogueNoiseReducedReadM(unsigned char, signed char)+0x8e>
      while(!ADC_complete) { sleep_mode(); }
    3ce0:	83 b7       	in	r24, 0x33	; 51
    3ce2:	81 60       	ori	r24, 0x01	; 1
    3ce4:	83 bf       	out	0x33, r24	; 51
    3ce6:	88 95       	sleep
    3ce8:	83 b7       	in	r24, 0x33	; 51
    3cea:	8e 7f       	andi	r24, 0xFE	; 254
    3cec:	83 bf       	out	0x33, r24	; 51
    3cee:	80 91 68 03 	lds	r24, 0x0368
    3cf2:	88 23       	and	r24, r24
    3cf4:	a9 f3       	breq	.-22     	; 0x3ce0 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x80>
      const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
    3cf6:	30 91 78 00 	lds	r19, 0x0078
      const uint8_t h = ADCH; // Capture the high byte.
    3cfa:	20 91 79 00 	lds	r18, 0x0079
      if((h == oldADCH) && (l == oldADCL)) { break; } // Stop now if result seems to have settled.
    3cfe:	29 17       	cp	r18, r25
    3d00:	11 f4       	brne	.+4      	; 0x3d06 <_analogueNoiseReducedReadM(unsigned char, signed char)+0xa6>
    3d02:	34 17       	cp	r19, r20
    3d04:	71 f0       	breq	.+28     	; 0x3d22 <_analogueNoiseReducedReadM(unsigned char, signed char)+0xc2>
      oldADCL = l;
      oldADCH = h;
      _adcNoise = (_adcNoise >> 1) + (l ^ h) + (__TIME__[7] & 0xf); // Capture a little entropy.
    3d06:	90 91 67 03 	lds	r25, 0x0367
    3d0a:	82 2f       	mov	r24, r18
    3d0c:	83 27       	eor	r24, r19
    3d0e:	88 5f       	subi	r24, 0xF8	; 248
    3d10:	96 95       	lsr	r25
    3d12:	98 0f       	add	r25, r24
    3d14:	90 93 67 03 	sts	0x0367, r25
    3d18:	92 2f       	mov	r25, r18
    3d1a:	43 2f       	mov	r20, r19
  bitSet(ADCSRA, ADIE); // Turn on ADC interrupt.
  bitSet(ADCSRA, ADSC); // Start conversion(s).
  uint8_t oldADCL = 0xff;
  uint8_t oldADCH = 0xff; // Ensure that a second sample will get taken if multiple samples have been requested.
  // Usually take several readings to improve accuracy.  Discard all but the last...
  while(--samples >= 0)
    3d1c:	11 50       	subi	r17, 0x01	; 1
    3d1e:	17 ff       	sbrs	r17, 7
    3d20:	dc cf       	rjmp	.-72     	; 0x3cda <_analogueNoiseReducedReadM(unsigned char, signed char)+0x7a>
      if((h == oldADCH) && (l == oldADCL)) { break; } // Stop now if result seems to have settled.
      oldADCL = l;
      oldADCH = h;
      _adcNoise = (_adcNoise >> 1) + (l ^ h) + (__TIME__[7] & 0xf); // Capture a little entropy.
      }
  bitClear(ADCSRA, ADIE); // Turn off ADC interrupt.
    3d22:	80 91 7a 00 	lds	r24, 0x007A
    3d26:	87 7f       	andi	r24, 0xF7	; 247
    3d28:	80 93 7a 00 	sts	0x007A, r24
  bitClear(ADCSRA, ADATE); // Turn off ADC auto-trigger.
    3d2c:	80 91 7a 00 	lds	r24, 0x007A
    3d30:	8f 7d       	andi	r24, 0xDF	; 223
    3d32:	80 93 7a 00 	sts	0x007A, r24
  //sleep_disable();
  const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
    3d36:	20 91 78 00 	lds	r18, 0x0078
  const uint8_t h = ADCH; // Capture the high byte.
    3d3a:	40 91 79 00 	lds	r20, 0x0079
  if(neededEnable) { powerDownADC(); }
    3d3e:	00 23       	and	r16, r16
    3d40:	51 f0       	breq	.+20     	; 0x3d56 <_analogueNoiseReducedReadM(unsigned char, signed char)+0xf6>
  }
    
// Power ADC down.
void powerDownADC()
  {
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
    3d42:	80 91 7a 00 	lds	r24, 0x007A
    3d46:	8f 77       	andi	r24, 0x7F	; 127
    3d48:	80 93 7a 00 	sts	0x007A, r24
  PRR |= _BV(PRADC); // Disable the ADC.
    3d4c:	80 91 64 00 	lds	r24, 0x0064
    3d50:	81 60       	ori	r24, 0x01	; 1
    3d52:	80 93 64 00 	sts	0x0064, r24
    3d56:	94 2f       	mov	r25, r20
    3d58:	80 e0       	ldi	r24, 0x00	; 0
    3d5a:	30 e0       	ldi	r19, 0x00	; 0
    3d5c:	28 2b       	or	r18, r24
    3d5e:	39 2b       	or	r19, r25
  //sleep_disable();
  const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
  const uint8_t h = ADCH; // Capture the high byte.
  if(neededEnable) { powerDownADC(); }
  return((h << 8) | l);
  }
    3d60:	c9 01       	movw	r24, r18
    3d62:	1f 91       	pop	r17
    3d64:	0f 91       	pop	r16
    3d66:	08 95       	ret

00003d68 <analogueNoiseReducedRead(int, unsigned char)>:
//   * aiNumber is the analogue input number [0,7] for ATMega328P
//   * mode  is the analogue reference, eg DEFAULT (Vcc).
// May set sleep mode to SLEEP_MODE_ADC, and disable sleep on exit.
// Nominally equivalent to analogReference(mode); return(analogRead(pinNumber));
uint16_t analogueNoiseReducedRead(int aiNumber, uint8_t mode)
  { return(_analogueNoiseReducedReadM((mode << 6) | (aiNumber & 7))); }
    3d68:	62 95       	swap	r22
    3d6a:	66 0f       	add	r22, r22
    3d6c:	66 0f       	add	r22, r22
    3d6e:	60 7c       	andi	r22, 0xC0	; 192
    3d70:	87 70       	andi	r24, 0x07	; 7
    3d72:	86 2b       	or	r24, r22
    3d74:	63 e0       	ldi	r22, 0x03	; 3
    3d76:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <_analogueNoiseReducedReadM(unsigned char, signed char)>
    3d7a:	08 95       	ret

00003d7c <SupplyVoltageMilliVolts::read()>:


// Force a read/poll of the supply voltage and return the value sensed.
// Expensive/slow.
// NOT thread-safe nor usable within ISRs (Interrupt Service Routines).
uint16_t SupplyVoltageMilliVolts::read()
    3d7c:	cf 93       	push	r28
    3d7e:	df 93       	push	r29
    3d80:	ec 01       	movw	r28, r24
  return(result);
  }


// Measure internal bandgap (1.1V nominal, 1.0--1.2V) as fraction of Vcc [0,1023].
static uint16_t read1V1wrtBattery() { return(_analogueNoiseReducedReadM(_BV(REFS0) | 14)); }
    3d82:	8e e4       	ldi	r24, 0x4E	; 78
    3d84:	63 e0       	ldi	r22, 0x03	; 3
    3d86:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <_analogueNoiseReducedReadM(unsigned char, signed char)>
    3d8a:	9c 01       	movw	r18, r24
  {
  // Measure internal bandgap (1.1V nominal, 1.0--1.2V) as fraction of Vcc.
  const uint16_t raw = read1V1wrtBattery();
  // If Vcc was 1.1V ADC would give 1023.
  // If Vcc was 2.2V ADC would give 511.
  const uint16_t result = ((1023U<<6) / raw) * (1100U>>6);
    3d8c:	80 ec       	ldi	r24, 0xC0	; 192
    3d8e:	9f ef       	ldi	r25, 0xFF	; 255
    3d90:	b9 01       	movw	r22, r18
    3d92:	0e 94 cc 3d 	call	0x7b98	; 0x7b98 <__udivmodhi4>
    3d96:	ab 01       	movw	r20, r22
    3d98:	e4 e0       	ldi	r30, 0x04	; 4
    3d9a:	44 0f       	add	r20, r20
    3d9c:	55 1f       	adc	r21, r21
    3d9e:	ea 95       	dec	r30
    3da0:	e1 f7       	brne	.-8      	; 0x3d9a <SupplyVoltageMilliVolts::read()+0x1e>
    3da2:	46 0f       	add	r20, r22
    3da4:	57 1f       	adc	r21, r23
  rawInv = raw;
    3da6:	3b 83       	std	Y+3, r19	; 0x03
    3da8:	2a 83       	std	Y+2, r18	; 0x02
  mV = result;
    3daa:	5d 83       	std	Y+5, r21	; 0x05
    3dac:	4c 83       	std	Y+4, r20	; 0x04
  isLow = (result < BATTERY_LOW_MV);
    3dae:	1e 82       	std	Y+6, r1	; 0x06
    3db0:	88 e0       	ldi	r24, 0x08	; 8
    3db2:	47 39       	cpi	r20, 0x97	; 151
    3db4:	58 07       	cpc	r21, r24
    3db6:	10 f4       	brcc	.+4      	; 0x3dbc <SupplyVoltageMilliVolts::read()+0x40>
    3db8:	81 e0       	ldi	r24, 0x01	; 1
    3dba:	8e 83       	std	Y+6, r24	; 0x06
  DEBUG_SERIAL_PRINT(raw);
  if(batteryLow) { DEBUG_SERIAL_PRINT_FLASHSTRING(" LOW"); }
  DEBUG_SERIAL_PRINTLN();
#endif
  return(result);
  }
    3dbc:	ca 01       	movw	r24, r20
    3dbe:	df 91       	pop	r29
    3dc0:	cf 91       	pop	r28
    3dc2:	08 95       	ret

00003dc4 <noisyADCRead()>:
// If already powered up then do nothing other than return false.
// This does not power up the analogue comparator; this needs to be manually enabled if required.
// If this returns true then a matching powerDownADC() may be advisable.
bool powerUpADCIfDisabled()
  {
  if(!(PRR & _BV(PRADC))) { return(false); }
    3dc4:	80 91 64 00 	lds	r24, 0x0064
    3dc8:	80 fd       	sbrc	r24, 0
    3dca:	02 c0       	rjmp	.+4      	; 0x3dd0 <noisyADCRead()+0xc>
    3dcc:	40 e0       	ldi	r20, 0x00	; 0
    3dce:	0b c0       	rjmp	.+22     	; 0x3de6 <noisyADCRead()+0x22>
  PRR &= ~_BV(PRADC); // Enable the ADC.
    3dd0:	80 91 64 00 	lds	r24, 0x0064
    3dd4:	8e 7f       	andi	r24, 0xFE	; 254
    3dd6:	80 93 64 00 	sts	0x0064, r24
  ADCSRA |= _BV(ADEN);
    3dda:	80 91 7a 00 	lds	r24, 0x007A
    3dde:	80 68       	ori	r24, 0x80	; 128
    3de0:	80 93 7a 00 	sts	0x007A, r24
    3de4:	41 e0       	ldi	r20, 0x01	; 1
// If defined, update _adcNoise value to make noisyADCRead() output at least a poor PRNG if called in a loop, though might disguise underlying problems.
//#define CATCH_OTHER_NOISE_DURING_NAR // May hide underlying weakness if defined.
uint8_t noisyADCRead()
  {
  const bool neededEnable = powerUpADCIfDisabled();
  ADMUX = _BV(REFS0) | 14; // Bandgap vs Vcc.
    3de6:	8e e4       	ldi	r24, 0x4E	; 78
    3de8:	80 93 7c 00 	sts	0x007C, r24
  ADCSRB = 0; // Enable free-running mode.
    3dec:	10 92 7b 00 	sts	0x007B, r1
  bitWrite(ADCSRA, ADATE, 1); // Multiple samples required.
    3df0:	80 91 7a 00 	lds	r24, 0x007A
    3df4:	80 62       	ori	r24, 0x20	; 32
    3df6:	80 93 7a 00 	sts	0x007A, r24
  ADC_complete = false;
    3dfa:	10 92 68 03 	sts	0x0368, r1
  bitSet(ADCSRA, ADIE); // Turn on ADC interrupt.
    3dfe:	80 91 7a 00 	lds	r24, 0x007A
    3e02:	88 60       	ori	r24, 0x08	; 8
    3e04:	80 93 7a 00 	sts	0x007A, r24
  bitSet(ADCSRA, ADSC); // Start conversion.
    3e08:	80 91 7a 00 	lds	r24, 0x007A
    3e0c:	80 64       	ori	r24, 0x40	; 64
    3e0e:	80 93 7a 00 	sts	0x007A, r24
    3e12:	90 e0       	ldi	r25, 0x00	; 0
    3e14:	01 c0       	rjmp	.+2      	; 0x3e18 <noisyADCRead()+0x54>
  uint8_t count = 0;
  while(!ADC_complete) { ++count; } // Busy wait while 'timing' the ADC conversion.
    3e16:	9f 5f       	subi	r25, 0xFF	; 255
    3e18:	80 91 68 03 	lds	r24, 0x0368
    3e1c:	88 23       	and	r24, r24
    3e1e:	d9 f3       	breq	.-10     	; 0x3e16 <noisyADCRead()+0x52>
  const uint8_t l1 = ADCL; // Capture the low byte and latch the high byte.
    3e20:	50 91 78 00 	lds	r21, 0x0078
  const uint8_t h1 = ADCH; // Capture the high byte.
    3e24:	20 91 79 00 	lds	r18, 0x0079
#if defined(CATCH_OTHER_NOISE_DURING_NAR)
  uint8_t result = _crc_ibutton_update(_adcNoise++, h1 ^ count);
#else
  uint8_t result = (h1 << 5) + count;
    3e28:	22 95       	swap	r18
    3e2a:	22 0f       	add	r18, r18
    3e2c:	20 7e       	andi	r18, 0xE0	; 224
    3e2e:	29 0f       	add	r18, r25
#endif
  set_sleep_mode(SLEEP_MODE_ADC); // Take further samples in more energy-efficient mode.
    3e30:	83 b7       	in	r24, 0x33	; 51
    3e32:	81 7f       	andi	r24, 0xF1	; 241
    3e34:	82 60       	ori	r24, 0x02	; 2
    3e36:	83 bf       	out	0x33, r24	; 51
    3e38:	30 e0       	ldi	r19, 0x00	; 0
  // Sample all possible ADC inputs relative to Vcc, whatever the inputs may be connected to.
  // Assumed never to do any harm, eg physical damage or to disturb I/O setup.
  for(uint8_t i = 0; i < 8; ++i)
    {
    ADMUX = (i & 7) | (DEFAULT << 6); // Switching MUX after sample has started, which may add further noise.
    3e3a:	83 2f       	mov	r24, r19
    3e3c:	87 70       	andi	r24, 0x07	; 7
    3e3e:	80 64       	ori	r24, 0x40	; 64
    3e40:	80 93 7c 00 	sts	0x007C, r24
    ADC_complete = false;
    3e44:	10 92 68 03 	sts	0x0368, r1
    3e48:	07 c0       	rjmp	.+14     	; 0x3e58 <noisyADCRead()+0x94>
    while(!ADC_complete)
      {
#if defined(CATCH_OTHER_NOISE_DURING_NAR)       
      result -= 37; /* prime; may capture unrelated interrupt wakeups... */
#endif
      sleep_mode();
    3e4a:	83 b7       	in	r24, 0x33	; 51
    3e4c:	81 60       	ori	r24, 0x01	; 1
    3e4e:	83 bf       	out	0x33, r24	; 51
    3e50:	88 95       	sleep
    3e52:	83 b7       	in	r24, 0x33	; 51
    3e54:	8e 7f       	andi	r24, 0xFE	; 254
    3e56:	83 bf       	out	0x33, r24	; 51
  // Assumed never to do any harm, eg physical damage or to disturb I/O setup.
  for(uint8_t i = 0; i < 8; ++i)
    {
    ADMUX = (i & 7) | (DEFAULT << 6); // Switching MUX after sample has started, which may add further noise.
    ADC_complete = false;
    while(!ADC_complete)
    3e58:	80 91 68 03 	lds	r24, 0x0368
    3e5c:	88 23       	and	r24, r24
    3e5e:	a9 f3       	breq	.-22     	; 0x3e4a <noisyADCRead()+0x86>
#if defined(CATCH_OTHER_NOISE_DURING_NAR)       
      result -= 37; /* prime; may capture unrelated interrupt wakeups... */
#endif
      sleep_mode();
      }
    const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
    3e60:	90 91 78 00 	lds	r25, 0x0078
    const uint8_t h = ADCH; // Capture the high byte.
    3e64:	80 91 79 00 	lds	r24, 0x0079
		"	brtc	2f" "\n\t"
		"	eor	%0, %2" "\n\t"
		"2:	dec	%1" "\n\t"
		"	brne	1b" "\n\t"
		: "=r" (__crc), "=d" (__i), "=d" (__pattern)
		: "0" (__crc), "r" (__data));
    3e68:	89 27       	eor	r24, r25
    3e6a:	28 27       	eor	r18, r24
    3e6c:	88 e0       	ldi	r24, 0x08	; 8
    3e6e:	9c e8       	ldi	r25, 0x8C	; 140
    3e70:	20 fb       	bst	r18, 0
    3e72:	26 95       	lsr	r18
    3e74:	0e f4       	brtc	.+2      	; 0x3e78 <noisyADCRead()+0xb4>
    3e76:	29 27       	eor	r18, r25
    3e78:	8a 95       	dec	r24
    3e7a:	d1 f7       	brne	.-12     	; 0x3e70 <noisyADCRead()+0xac>
  uint8_t result = (h1 << 5) + count;
#endif
  set_sleep_mode(SLEEP_MODE_ADC); // Take further samples in more energy-efficient mode.
  // Sample all possible ADC inputs relative to Vcc, whatever the inputs may be connected to.
  // Assumed never to do any harm, eg physical damage or to disturb I/O setup.
  for(uint8_t i = 0; i < 8; ++i)
    3e7c:	3f 5f       	subi	r19, 0xFF	; 255
    3e7e:	38 30       	cpi	r19, 0x08	; 8
    3e80:	e1 f6       	brne	.-72     	; 0x3e3a <noisyADCRead()+0x76>
      }
    const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
    const uint8_t h = ADCH; // Capture the high byte.
    result = _crc_ibutton_update(result, l ^ h); // A thorough hash.
    }
  bitClear(ADCSRA, ADIE); // Turn off ADC interrupt.
    3e82:	80 91 7a 00 	lds	r24, 0x007A
    3e86:	87 7f       	andi	r24, 0xF7	; 247
    3e88:	80 93 7a 00 	sts	0x007A, r24
  bitClear(ADCSRA, ADATE); // Turn off ADC auto-trigger.
    3e8c:	80 91 7a 00 	lds	r24, 0x007A
    3e90:	8f 7d       	andi	r24, 0xDF	; 223
    3e92:	80 93 7a 00 	sts	0x007A, r24
  if(neededEnable) { powerDownADC(); }
    3e96:	44 23       	and	r20, r20
    3e98:	51 f0       	breq	.+20     	; 0x3eae <noisyADCRead()+0xea>
  }
    
// Power ADC down.
void powerDownADC()
  {
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
    3e9a:	80 91 7a 00 	lds	r24, 0x007A
    3e9e:	8f 77       	andi	r24, 0x7F	; 127
    3ea0:	80 93 7a 00 	sts	0x007A, r24
  PRR |= _BV(PRADC); // Disable the ADC.
    3ea4:	80 91 64 00 	lds	r24, 0x0064
    3ea8:	81 60       	ori	r24, 0x01	; 1
    3eaa:	80 93 64 00 	sts	0x0064, r24
  bitClear(ADCSRA, ADIE); // Turn off ADC interrupt.
  bitClear(ADCSRA, ADATE); // Turn off ADC auto-trigger.
  if(neededEnable) { powerDownADC(); }
  result ^= l1; // Ensure that the actual Vcc raw lsbs do get folded in to the final result.
  return(result); // Use all the bits collected.
  }
    3eae:	82 2f       	mov	r24, r18
    3eb0:	85 27       	eor	r24, r21
    3eb2:	08 95       	ret

00003eb4 <readInternalTemperatureC16()>:
// May set sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
int readInternalTemperatureC16()
  {
  // Measure internal temperature sensor against internal voltage source.
  // Response is ~1mv/C with 0C at ~289mV according to the data sheet.
  const uint16_t raw = _analogueNoiseReducedReadM(_BV(REFS1) | _BV(REFS0) | _BV(MUX3), 1);
    3eb4:	88 ec       	ldi	r24, 0xC8	; 200
    3eb6:	61 e0       	ldi	r22, 0x01	; 1
    3eb8:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <_analogueNoiseReducedReadM(unsigned char, signed char)>
    3ebc:	84 54       	subi	r24, 0x44	; 68
    3ebe:	91 40       	sbci	r25, 0x01	; 1
    3ec0:	22 ed       	ldi	r18, 0xD2	; 210
    3ec2:	30 e0       	ldi	r19, 0x00	; 0
    3ec4:	a9 01       	movw	r20, r18
    3ec6:	84 9f       	mul	r24, r20
    3ec8:	90 01       	movw	r18, r0
    3eca:	85 9f       	mul	r24, r21
    3ecc:	30 0d       	add	r19, r0
    3ece:	94 9f       	mul	r25, r20
    3ed0:	30 0d       	add	r19, r0
    3ed2:	11 24       	eor	r1, r1
    3ed4:	f4 e0       	ldi	r31, 0x04	; 4
    3ed6:	35 95       	asr	r19
    3ed8:	27 95       	ror	r18
    3eda:	fa 95       	dec	r31
    3edc:	e1 f7       	brne	.-8      	; 0x3ed6 <readInternalTemperatureC16()+0x22>
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("");
#endif
  //const int degC = (raw - 328) ; // Crude fast adjustment for one sensor at ~20C (DHD20130429).
  const int degC = ((((int)raw) - 324) * 210) >> 4; // Slightly less crude adjustment, see http://playground.arduino.cc//Main/InternalTemperatureSensor
  return(degC);
  }
    3ede:	c9 01       	movw	r24, r18
    3ee0:	08 95       	ret

00003ee2 <powerDownTWI()>:
  }

// Power down TWI (I2C).
void powerDownTWI()
  {
  TWCR &= ~_BV(TWEN); // Disable TWI.
    3ee2:	ec eb       	ldi	r30, 0xBC	; 188
    3ee4:	f0 e0       	ldi	r31, 0x00	; 0
    3ee6:	80 81       	ld	r24, Z
    3ee8:	8b 7f       	andi	r24, 0xFB	; 251
    3eea:	80 83       	st	Z, r24
  PRR |= _BV(PRTWI); // Disable TWI power.
    3eec:	e4 e6       	ldi	r30, 0x64	; 100
    3eee:	f0 e0       	ldi	r31, 0x00	; 0
    3ef0:	80 81       	ld	r24, Z
    3ef2:	80 68       	ori	r24, 0x80	; 128
    3ef4:	80 83       	st	Z, r24
  //digitalWrite(SCL, 0);

  // Convert to hi-Z inputs.
  //pinMode(SDA, INPUT);
  //pinMode(SCL, INPUT);
  }
    3ef6:	08 95       	ret

00003ef8 <clockJitterWDT()>:
// Expensive in terms of CPU time and thus energy.
// TODO: may be able to reduce clock speed to lower energy cost while still detecting useful jitter.
uint_fast8_t clockJitterWDT()
  {
  // Watchdog should be (already) be disabled on entry.
  _watchdogFired = false;
    3ef8:	10 92 66 03 	sts	0x0366, r1
  wdt_enable(WDTO_15MS); // Set watchdog for minimum time.
    3efc:	88 e0       	ldi	r24, 0x08	; 8
    3efe:	28 e1       	ldi	r18, 0x18	; 24
    3f00:	30 e0       	ldi	r19, 0x00	; 0
    3f02:	0f b6       	in	r0, 0x3f	; 63
    3f04:	f8 94       	cli
    3f06:	a8 95       	wdr
    3f08:	20 93 60 00 	sts	0x0060, r18
    3f0c:	0f be       	out	0x3f, r0	; 63
    3f0e:	80 93 60 00 	sts	0x0060, r24
  WDTCSR |= (1 << WDIE);
    3f12:	80 91 60 00 	lds	r24, 0x0060
    3f16:	80 64       	ori	r24, 0x40	; 64
    3f18:	80 93 60 00 	sts	0x0060, r24
    3f1c:	90 e0       	ldi	r25, 0x00	; 0
    3f1e:	01 c0       	rjmp	.+2      	; 0x3f22 <clockJitterWDT()+0x2a>
  uint_fast8_t count = 0;
  while(!_watchdogFired) { ++count; } // Effectively count CPU cycles until WDT fires.
    3f20:	9f 5f       	subi	r25, 0xFF	; 255
    3f22:	80 91 66 03 	lds	r24, 0x0366
    3f26:	88 23       	and	r24, r24
    3f28:	d9 f3       	breq	.-10     	; 0x3f20 <clockJitterWDT()+0x28>
  return(count);
  }
    3f2a:	89 2f       	mov	r24, r25
    3f2c:	08 95       	ret

00003f2e <clockJitterEntropyByte()>:
// Expensive in terms of CPU time and thus energy, though possibly more efficient than basic clockJitterXXX() routines.
// Internally this uses a CRC as a relatively fast and hopefully effective hash over intermediate values.
// Note the that rejection of repeat values will be less effective with two interleaved gathering mechanisms
// as the interaction while not necessarily adding genuine entropy, will make counts differ between runs.
// DHD20130519: measured as taking ~63ms to run, ie ~8ms per bit gathered.
uint_fast8_t clockJitterEntropyByte()
    3f2e:	1f 93       	push	r17

  uint_fast8_t result = 0;
  uint_fast8_t countR = 0, lastCountR = 0;
  uint_fast8_t countW = 0, lastCountW = 0;

  const uint8_t t0 = TCNT2; // Wait for sub-cycle timer to roll.
    3f30:	90 91 b2 00 	lds	r25, 0x00B2
    3f34:	40 e0       	ldi	r20, 0x00	; 0
    3f36:	50 e0       	ldi	r21, 0x00	; 0
    3f38:	02 c0       	rjmp	.+4      	; 0x3f3e <clockJitterEntropyByte()+0x10>
  while(t0 == TCNT2) { ++hash; } // Possibly capture some entropy from recent program activity/timing.
    3f3a:	4f 5f       	subi	r20, 0xFF	; 255
    3f3c:	5f 4f       	sbci	r21, 0xFF	; 255
    3f3e:	80 91 b2 00 	lds	r24, 0x00B2
    3f42:	98 17       	cp	r25, r24
    3f44:	d1 f3       	breq	.-12     	; 0x3f3a <clockJitterEntropyByte()+0xc>
  uint8_t t1 = TCNT2;
    3f46:	f0 91 b2 00 	lds	r31, 0x00B2

  _watchdogFired = 0;
    3f4a:	10 92 66 03 	sts	0x0366, r1
  wdt_enable(WDTO_15MS); // Start watchdog, with minimum timeout.
    3f4e:	88 e0       	ldi	r24, 0x08	; 8
    3f50:	28 e1       	ldi	r18, 0x18	; 24
    3f52:	30 e0       	ldi	r19, 0x00	; 0
    3f54:	0f b6       	in	r0, 0x3f	; 63
    3f56:	f8 94       	cli
    3f58:	a8 95       	wdr
    3f5a:	20 93 60 00 	sts	0x0060, r18
    3f5e:	0f be       	out	0x3f, r0	; 63
    3f60:	80 93 60 00 	sts	0x0060, r24
  WDTCSR |= (1 << WDIE);
    3f64:	80 91 60 00 	lds	r24, 0x0060
    3f68:	80 64       	ori	r24, 0x40	; 64
    3f6a:	80 93 60 00 	sts	0x0060, r24
    3f6e:	90 e0       	ldi	r25, 0x00	; 0
    3f70:	60 e0       	ldi	r22, 0x00	; 0
    3f72:	e0 e0       	ldi	r30, 0x00	; 0
    3f74:	20 e0       	ldi	r18, 0x00	; 0
    3f76:	70 e0       	ldi	r23, 0x00	; 0
    3f78:	38 e0       	ldi	r19, 0x08	; 8
        if(--bitsLeft <= 0) { break; } // Got enough bits; stop now.
        lastCountW = countW;
        }
      countW = 0;
      _watchdogFired = 0;
      wdt_enable(WDTO_15MS); // Restart watchdog, with minimum timeout.
    3f7a:	a8 e1       	ldi	r26, 0x18	; 24
    3f7c:	b0 e0       	ldi	r27, 0x00	; 0
    3f7e:	18 e0       	ldi	r17, 0x08	; 8
  WDTCSR |= (1 << WDIE);
  int_fast8_t bitsLeft = 8; // Decrement when a bit is harvested...
  for( ; ; )
    {
    // Extract watchdog jitter vs CPU.
    if(!_watchdogFired) { ++countW; }
    3f80:	80 91 66 03 	lds	r24, 0x0366
    3f84:	88 23       	and	r24, r24
    3f86:	11 f4       	brne	.+4      	; 0x3f8c <clockJitterEntropyByte()+0x5e>
    3f88:	2f 5f       	subi	r18, 0xFF	; 255
    3f8a:	2a c0       	rjmp	.+84     	; 0x3fe0 <clockJitterEntropyByte()+0xb2>
    else // Watchdog fired.
      {
      if(countW != lastCountW) // Got a different value from last; assume one bit of entropy.
    3f8c:	27 17       	cp	r18, r23
    3f8e:	c1 f0       	breq	.+48     	; 0x3fc0 <clockJitterEntropyByte()+0x92>
        "eor    %A0,__tmp_reg__"

        : "=d" (__ret)
        : "r" (__data), "0" (__crc)
        : "r0"
    );
    3f90:	42 27       	eor	r20, r18
    3f92:	04 2e       	mov	r0, r20
    3f94:	42 95       	swap	r20
    3f96:	40 7f       	andi	r20, 0xF0	; 240
    3f98:	40 25       	eor	r20, r0
    3f9a:	05 2e       	mov	r0, r21
    3f9c:	54 2f       	mov	r21, r20
    3f9e:	42 95       	swap	r20
    3fa0:	4f 70       	andi	r20, 0x0F	; 15
    3fa2:	04 26       	eor	r0, r20
    3fa4:	46 95       	lsr	r20
    3fa6:	54 27       	eor	r21, r20
    3fa8:	45 27       	eor	r20, r21
    3faa:	44 0f       	add	r20, r20
    3fac:	44 0f       	add	r20, r20
    3fae:	44 0f       	add	r20, r20
    3fb0:	40 25       	eor	r20, r0
        {
        hash = _crc_ccitt_update(hash, countW);
        result = (result << 1) ^ ((uint_fast8_t)hash); // Nominally capturing (at least) lsb of hash.
    3fb2:	99 0f       	add	r25, r25
    3fb4:	94 27       	eor	r25, r20
        if(--bitsLeft <= 0) { break; } // Got enough bits; stop now.
    3fb6:	31 50       	subi	r19, 0x01	; 1
    3fb8:	13 16       	cp	r1, r19
    3fba:	0c f0       	brlt	.+2      	; 0x3fbe <clockJitterEntropyByte()+0x90>
    3fbc:	34 c0       	rjmp	.+104    	; 0x4026 <clockJitterEntropyByte()+0xf8>
    3fbe:	72 2f       	mov	r23, r18
        lastCountW = countW;
        }
      countW = 0;
      _watchdogFired = 0;
    3fc0:	10 92 66 03 	sts	0x0366, r1
      wdt_enable(WDTO_15MS); // Restart watchdog, with minimum timeout.
    3fc4:	0f b6       	in	r0, 0x3f	; 63
    3fc6:	f8 94       	cli
    3fc8:	a8 95       	wdr
    3fca:	a0 93 60 00 	sts	0x0060, r26
    3fce:	0f be       	out	0x3f, r0	; 63
    3fd0:	10 93 60 00 	sts	0x0060, r17
      WDTCSR |= (1 << WDIE);
    3fd4:	80 91 60 00 	lds	r24, 0x0060
    3fd8:	80 64       	ori	r24, 0x40	; 64
    3fda:	80 93 60 00 	sts	0x0060, r24
    3fde:	20 e0       	ldi	r18, 0x00	; 0
      }

    // Extract RTC jitter vs CPU.
    if(t1 == TCNT2) { --countR; }
    3fe0:	80 91 b2 00 	lds	r24, 0x00B2
    3fe4:	f8 17       	cp	r31, r24
    3fe6:	11 f4       	brne	.+4      	; 0x3fec <clockJitterEntropyByte()+0xbe>
    3fe8:	61 50       	subi	r22, 0x01	; 1
    3fea:	ca cf       	rjmp	.-108    	; 0x3f80 <clockJitterEntropyByte()+0x52>
    else // Sub-cycle timer rolled.
      {
      if(countR != lastCountR) // Got a different value from last; assume one bit of entropy.
    3fec:	6e 17       	cp	r22, r30
    3fee:	b9 f0       	breq	.+46     	; 0x401e <clockJitterEntropyByte()+0xf0>
    3ff0:	46 27       	eor	r20, r22
    3ff2:	04 2e       	mov	r0, r20
    3ff4:	42 95       	swap	r20
    3ff6:	40 7f       	andi	r20, 0xF0	; 240
    3ff8:	40 25       	eor	r20, r0
    3ffa:	05 2e       	mov	r0, r21
    3ffc:	54 2f       	mov	r21, r20
    3ffe:	42 95       	swap	r20
    4000:	4f 70       	andi	r20, 0x0F	; 15
    4002:	04 26       	eor	r0, r20
    4004:	46 95       	lsr	r20
    4006:	54 27       	eor	r21, r20
    4008:	45 27       	eor	r20, r21
    400a:	44 0f       	add	r20, r20
    400c:	44 0f       	add	r20, r20
    400e:	44 0f       	add	r20, r20
    4010:	40 25       	eor	r20, r0
        {
        hash = _crc_ccitt_update(hash, countR);
        result = (result << 1) ^ ((uint_fast8_t)hash); // Nominally capturing (at least) lsb of hash.
    4012:	99 0f       	add	r25, r25
    4014:	94 27       	eor	r25, r20
        if(--bitsLeft <= 0) { break; } // Got enough bits; stop now.
    4016:	31 50       	subi	r19, 0x01	; 1
    4018:	13 16       	cp	r1, r19
    401a:	2c f4       	brge	.+10     	; 0x4026 <clockJitterEntropyByte()+0xf8>
    401c:	e6 2f       	mov	r30, r22
        lastCountR = countR;
        }
      countR = 0;
      t1 = TCNT2; // Set to look for next roll.
    401e:	f0 91 b2 00 	lds	r31, 0x00B2
    4022:	60 e0       	ldi	r22, 0x00	; 0
    4024:	ad cf       	rjmp	.-166    	; 0x3f80 <clockJitterEntropyByte()+0x52>
      }
    }

  wdt_disable(); // Ensure no spurious WDT wakeup pending.
    4026:	88 e1       	ldi	r24, 0x18	; 24
    4028:	0f b6       	in	r0, 0x3f	; 63
    402a:	f8 94       	cli
    402c:	80 93 60 00 	sts	0x0060, r24
    4030:	10 92 60 00 	sts	0x0060, r1
    4034:	0f be       	out	0x3f, r0	; 63
  return(result);
  }
    4036:	89 2f       	mov	r24, r25
    4038:	1f 91       	pop	r17
    403a:	08 95       	ret

0000403c <Sensor<unsigned int>::isValid(unsigned int) const>:
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual T get() const = 0;

    // Returns true if this sensor reading value passed is potentially valid, eg in-range.
    // Default is to always return true, ie all values potentially valid.
    virtual bool isValid(T value) const { return(true); }
    403c:	81 e0       	ldi	r24, 0x01	; 1
    403e:	08 95       	ret

00004040 <Sensor<unsigned int>::preferredPollInterval_s() const>:
 
    // Returns non-zero if this implementation requires a regular call to read() to operate correctly.
    // Preferred poll interval (in seconds) or 0 if no regular poll() call required.
    // Default returns 0 indicating regular call to read() not required,
    // only as required to fetch new values from the underlying sensor.
    virtual uint8_t preferredPollInterval_s() const { return(0); }
    4040:	80 e0       	ldi	r24, 0x00	; 0
    4042:	08 95       	ret

00004044 <Sensor<unsigned int>::handleInterruptSimple()>:
    // Must be fast and ISR (Interrupt Service Routine) safe.
    // Returns true if interrupt was successfully handled and cleared
    // else another interrupt handler in the chain may be called
    // to attempt to clear the interrupt.
    // By default does nothing (and returns false).
    virtual bool handleInterruptSimple() { return(false); }
    4044:	80 e0       	ldi	r24, 0x00	; 0
    4046:	08 95       	ret

00004048 <Sensor<unsigned int>::begin()>:

    // Begin access to this sensor if applicable and not already begun.
    // Returns true if it needed to be begun.
    // Allows logic to end() if required at the end of a block, etc.
    // Defaults to do nothing (and return false).
    virtual bool begin() { return(false); }
    4048:	80 e0       	ldi	r24, 0x00	; 0
    404a:	08 95       	ret

0000404c <Sensor<unsigned int>::isAvailable() const>:

    // Returns true if this sensor is currently available.
    // True by default unless implementation overrides.
    // For those sensors that need starting this will be false before begin().
    virtual bool isAvailable() const { return(true); }
    404c:	81 e0       	ldi	r24, 0x01	; 1
    404e:	08 95       	ret

00004050 <Sensor<unsigned int>::end()>:

    // End access to this sensor if applicable and not already ended.
    // Returns true if it needed to be ended.
    // Defaults to do nothing (and return false).
    virtual bool end() { return(false); }
    4050:	80 e0       	ldi	r24, 0x00	; 0
    4052:	08 95       	ret

00004054 <global constructors keyed to _Z25minimisePowerWithoutSleepv>:
    // True if last-measured voltage was low.
    bool isLow;
 
  public:
    // Initialise to cautious values.
    SupplyVoltageMilliVolts() : mV(0), isLow(true) { }
    4054:	88 e8       	ldi	r24, 0x88	; 136
    4056:	91 e0       	ldi	r25, 0x01	; 1
    4058:	90 93 60 03 	sts	0x0360, r25
    405c:	80 93 5f 03 	sts	0x035F, r24
    4060:	10 92 64 03 	sts	0x0364, r1
    4064:	10 92 63 03 	sts	0x0363, r1
    4068:	81 e0       	ldi	r24, 0x01	; 1
    406a:	80 93 65 03 	sts	0x0365, r24
    406e:	08 95       	ret

00004070 <captureEntropy1()>:
// Capture a little system entropy.
// This call should typically take << 1ms at 1MHz CPU.
// Does not change CPU clock speeds, mess with interrupts (other than possible brief blocking), or do I/O, or sleep.
// Should inject some noise into secure (TBD) and non-secure (RNG8) PRNGs.
void captureEntropy1()
  { seedRNG8(getSubCycleTime() ^ _adcNoise, cycleCountCPU() ^ Supply_mV.get(), _watchdogFired); }
    4070:	20 91 b2 00 	lds	r18, 0x00B2
    4074:	80 91 67 03 	lds	r24, 0x0367
    4078:	66 b5       	in	r22, 0x26	; 38
    407a:	40 91 66 03 	lds	r20, 0x0366
    407e:	90 91 63 03 	lds	r25, 0x0363
    4082:	69 27       	eor	r22, r25
    4084:	82 27       	eor	r24, r18
    4086:	0e 94 9e 21 	call	0x433c	; 0x433c <seedRNG8(unsigned char, unsigned char, unsigned char)>
    408a:	08 95       	ret

0000408c <powerDownSPI()>:
  }

// Power down SPI.
void powerDownSPI()
  {
  SPCR &= ~_BV(SPE); // Disable SPI.
    408c:	8c b5       	in	r24, 0x2c	; 44
    408e:	8f 7b       	andi	r24, 0xBF	; 191
    4090:	8c bd       	out	0x2c, r24	; 44
  PRR |= _BV(PRSPI); // Power down...
    4092:	e4 e6       	ldi	r30, 0x64	; 100
    4094:	f0 e0       	ldi	r31, 0x00	; 0
    4096:	80 81       	ld	r24, Z
    4098:	84 60       	ori	r24, 0x04	; 4
    409a:	80 83       	st	Z, r24

  pinMode(PIN_SPI_nSS, OUTPUT); // Ensure that nSS is an output to avoid forcing SPI to slave mode by accident.
    409c:	8a e0       	ldi	r24, 0x0A	; 10
    409e:	61 e0       	ldi	r22, 0x01	; 1
    40a0:	0e 94 ee 37 	call	0x6fdc	; 0x6fdc <pinMode>
  fastDigitalWrite(PIN_SPI_nSS, HIGH); // Ensure that nSS is HIGH and thus any slave deselected when powering up SPI.
    40a4:	2a 9a       	sbi	0x05, 2	; 5

  // Avoid pins from floating when SPI is disabled.
  // Try to preserve general I/O direction and restore previous output values for outputs.
  pinMode(PIN_SPI_SCK, OUTPUT);
    40a6:	8d e0       	ldi	r24, 0x0D	; 13
    40a8:	61 e0       	ldi	r22, 0x01	; 1
    40aa:	0e 94 ee 37 	call	0x6fdc	; 0x6fdc <pinMode>
  pinMode(PIN_SPI_MOSI, OUTPUT);
    40ae:	8b e0       	ldi	r24, 0x0B	; 11
    40b0:	61 e0       	ldi	r22, 0x01	; 1
    40b2:	0e 94 ee 37 	call	0x6fdc	; 0x6fdc <pinMode>
  pinMode(PIN_SPI_MISO, INPUT_PULLUP);
    40b6:	8c e0       	ldi	r24, 0x0C	; 12
    40b8:	62 e0       	ldi	r22, 0x02	; 2
    40ba:	0e 94 ee 37 	call	0x6fdc	; 0x6fdc <pinMode>

  // If sharing SPI SCK with LED indicator then return this pin to being an output (retaining previous value).
  //if(LED_HEATCALL == PIN_SPI_SCK) { pinMode(LED_HEATCALL, OUTPUT); }
  }
    40be:	08 95       	ret

000040c0 <powerUpSPIIfDisabled()>:
// If SPI was disabled, power it up, enable it as master and with a sensible clock speed, etc, and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownSPI() may be advisable.
bool powerUpSPIIfDisabled()
  {
  if(!(PRR & _BV(PRSPI))) { return(false); }
    40c0:	80 91 64 00 	lds	r24, 0x0064
    40c4:	82 fd       	sbrc	r24, 2
    40c6:	02 c0       	rjmp	.+4      	; 0x40cc <powerUpSPIIfDisabled()+0xc>
    40c8:	80 e0       	ldi	r24, 0x00	; 0
    40ca:	08 95       	ret

  pinMode(PIN_SPI_nSS, OUTPUT); // Ensure that nSS is an output to avoid forcing SPI to slave mode by accident.
    40cc:	8a e0       	ldi	r24, 0x0A	; 10
    40ce:	61 e0       	ldi	r22, 0x01	; 1
    40d0:	0e 94 ee 37 	call	0x6fdc	; 0x6fdc <pinMode>
  fastDigitalWrite(PIN_SPI_nSS, HIGH); // Ensure that nSS is HIGH and thus any slave deselected when powering up SPI.
    40d4:	2a 9a       	sbi	0x05, 2	; 5

  PRR &= ~_BV(PRSPI); // Enable SPI power.
    40d6:	80 91 64 00 	lds	r24, 0x0064
    40da:	8b 7f       	andi	r24, 0xFB	; 251
    40dc:	80 93 64 00 	sts	0x0064, r24
  // Configure raw SPI to match better how it was used in PICAXE V0.09 code.
  // CPOL = 0, CPHA = 0
  // Enable SPI, set master mode, set speed.
  const uint8_t ENABLE_MASTER =  _BV(SPE) | _BV(MSTR);
#if F_CPU <= 2000000 // Needs minimum prescale (x2) with slow (<=2MHz) CPU clock.
  SPCR = ENABLE_MASTER; // 2x clock prescale for <=1MHz SPI clock from <=2MHz CPU clock (500kHz SPI @ 1MHz CPU).
    40e0:	80 e5       	ldi	r24, 0x50	; 80
    40e2:	8c bd       	out	0x2c, r24	; 44
  SPSR = _BV(SPI2X);
    40e4:	81 e0       	ldi	r24, 0x01	; 1
    40e6:	8d bd       	out	0x2d, r24	; 45
#else // Needs setting for fast (~16MHz) CPU clock.
  SPCR = _BV(SPR0) | ENABLE_MASTER; // 8x clock prescale for ~2MHz SPI clock from nominal ~16MHz CPU clock.
  SPSR = _BV(SPI2X);
#endif
  return(true);
  }
    40e8:	08 95       	ret

000040ea <power_intermittent_peripherals_disable()>:
// Disable/remove power to intermittent peripherals.
// Switches the digital line to input with no pull-up (ie high-Z).
// There should be some sort of load to stop this floating.
void power_intermittent_peripherals_disable()
  {
  pinMode(IO_POWER_UP, INPUT);
    40ea:	87 e0       	ldi	r24, 0x07	; 7
    40ec:	60 e0       	ldi	r22, 0x00	; 0
    40ee:	0e 94 ee 37 	call	0x6fdc	; 0x6fdc <pinMode>
  }
    40f2:	08 95       	ret

000040f4 <minimisePowerWithoutSleep()>:
// to ensure that nothing power-hungry is accidentally left on.
// Any module that may need to run all the time should not be turned off here.
// May be called from panic(), so do not be too clever.
// Does NOT attempt to power down the radio, eg in case that needs to be left in RX mode.
// Does NOT attempt to power down the UART/serial.
void minimisePowerWithoutSleep()
    40f4:	0f 93       	push	r16
    40f6:	1f 93       	push	r17
  {
  // Disable the watchdog timer.
  wdt_disable();
    40f8:	88 e1       	ldi	r24, 0x18	; 24
    40fa:	0f b6       	in	r0, 0x3f	; 63
    40fc:	f8 94       	cli
    40fe:	80 93 60 00 	sts	0x0060, r24
    4102:	10 92 60 00 	sts	0x0060, r1
    4106:	0f be       	out	0x3f, r0	; 63
  
  // Ensure that external peripherals are powered down.
  power_intermittent_peripherals_disable();
    4108:	0e 94 75 20 	call	0x40ea	; 0x40ea <power_intermittent_peripherals_disable()>

  // Turn off analogue stuff that eats power.
  ADCSRA = 0; // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
    410c:	10 92 7a 00 	sts	0x007A, r1
  ACSR = (1<<ACD); // Disable the analog comparator.
    4110:	80 e8       	ldi	r24, 0x80	; 128
    4112:	80 bf       	out	0x30, r24	; 48
  DIDR0 = 0x3F; // Disable digital input buffers on all ADC0-ADC5 pins.
    4114:	8f e3       	ldi	r24, 0x3F	; 63
    4116:	80 93 7e 00 	sts	0x007E, r24
    //#endif
    //#if defined(LDR_SENSOR_AIN)
    //    | (1 << LDR_SENSOR_AIN)
    //#endif
    //    ;
  DIDR1 = (1<<AIN1D)|(1<<AIN0D); // Disable digital input buffer on AIN1/0.
    411a:	83 e0       	ldi	r24, 0x03	; 3
    411c:	80 93 7f 00 	sts	0x007F, r24
  power_adc_disable();
    4120:	04 e6       	ldi	r16, 0x64	; 100
    4122:	10 e0       	ldi	r17, 0x00	; 0
    4124:	f8 01       	movw	r30, r16
    4126:	80 81       	ld	r24, Z
    4128:	81 60       	ori	r24, 0x01	; 1
    412a:	80 83       	st	Z, r24

  // Ensure that SPI is powered down.
  powerDownSPI();
    412c:	0e 94 46 20 	call	0x408c	; 0x408c <powerDownSPI()>
  }

// Power down TWI (I2C).
void powerDownTWI()
  {
  TWCR &= ~_BV(TWEN); // Disable TWI.
    4130:	ec eb       	ldi	r30, 0xBC	; 188
    4132:	f0 e0       	ldi	r31, 0x00	; 0
    4134:	80 81       	ld	r24, Z
    4136:	8b 7f       	andi	r24, 0xFB	; 251
    4138:	80 83       	st	Z, r24
  PRR |= _BV(PRTWI); // Disable TWI power.
    413a:	f8 01       	movw	r30, r16
    413c:	80 81       	ld	r24, Z
    413e:	80 68       	ori	r24, 0x80	; 128
    4140:	80 83       	st	Z, r24

#if defined(DONT_USE_TIMER0)
  power_timer0_disable();
#endif

  power_timer1_disable();
    4142:	80 81       	ld	r24, Z
    4144:	88 60       	ori	r24, 0x08	; 8
    4146:	80 83       	st	Z, r24

#ifndef WAKEUP_32768HZ_XTAL
  power_timer2_disable();
#endif
  }
    4148:	1f 91       	pop	r17
    414a:	0f 91       	pop	r16
    414c:	08 95       	ret

0000414e <power_intermittent_peripherals_enable(bool)>:
// items powered direct from IO_POWER_UP may need no such wait.
//
// Switches the digital line to high then output (to avoid ever *discharging* the output cap).
// Note that with 100nF cap, and 330R (or lower) resistor from the output pin,
// then 1ms delay should be plenty for the voltage on the cap to settle.
void power_intermittent_peripherals_enable(bool waitUntilStable)
    414e:	1f 93       	push	r17
    4150:	18 2f       	mov	r17, r24
  {
  fastDigitalWrite(IO_POWER_UP, HIGH);
    4152:	5f 9a       	sbi	0x0b, 7	; 11
  pinMode(IO_POWER_UP, OUTPUT);
    4154:	87 e0       	ldi	r24, 0x07	; 7
    4156:	61 e0       	ldi	r22, 0x01	; 1
    4158:	0e 94 ee 37 	call	0x6fdc	; 0x6fdc <pinMode>
  // If requested, wait long enough that I/O peripheral power should be stable.
  // Wait in a relatively low-power way...
  if(waitUntilStable) { sleepLowPowerMs(1); }
    415c:	11 23       	and	r17, r17
    415e:	21 f0       	breq	.+8      	; 0x4168 <power_intermittent_peripherals_enable(bool)+0x1a>
// This may be achieved in part by dynamically slowing the CPU clock if possible.
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed((((MIN_CPU_HZ * (ms)) + 2000) / 4000) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    4160:	86 e0       	ldi	r24, 0x06	; 6
    4162:	90 e0       	ldi	r25, 0x00	; 0
    4164:	0e 94 8b 1d 	call	0x3b16	; 0x3b16 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
  }
    4168:	1f 91       	pop	r17
    416a:	08 95       	ret

0000416c <powerUpTWIIfDisabled()>:
// If TWI (I2C) was disabled, power it up, do Wire.begin(), and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownRWI() may be advisable.
bool powerUpTWIIfDisabled()
  {
  if(!(PRR & _BV(PRTWI))) { return(false); }
    416c:	80 91 64 00 	lds	r24, 0x0064
    4170:	87 fd       	sbrc	r24, 7
    4172:	02 c0       	rjmp	.+4      	; 0x4178 <powerUpTWIIfDisabled()+0xc>
    4174:	80 e0       	ldi	r24, 0x00	; 0
    4176:	08 95       	ret

  PRR &= ~_BV(PRTWI); // Enable TWI power.
    4178:	80 91 64 00 	lds	r24, 0x0064
    417c:	8f 77       	andi	r24, 0x7F	; 127
    417e:	80 93 64 00 	sts	0x0064, r24
  TWCR |= _BV(TWEN); // Enable TWI.
    4182:	80 91 bc 00 	lds	r24, 0x00BC
    4186:	84 60       	ori	r24, 0x04	; 4
    4188:	80 93 bc 00 	sts	0x00BC, r24
  Wire.begin(); // Set it going.
    418c:	85 e1       	ldi	r24, 0x15	; 21
    418e:	94 e0       	ldi	r25, 0x04	; 4
    4190:	0e 94 7b 35 	call	0x6af6	; 0x6af6 <TwoWire::begin()>
  // TODO: reset TWBR and prescaler for our low CPU frequency     (TWBR = ((F_CPU / TWI_FREQ) - 16) / 2 gives -3!)
#if F_CPU <= 1000000
  TWBR = 0; // Implies SCL freq of F_CPU / (16 + 2 * TBWR * PRESC) = 62.5kHz @ F_CPU==1MHz and PRESC==1 (from Wire/TWI code).
    4194:	10 92 b8 00 	sts	0x00B8, r1
    4198:	81 e0       	ldi	r24, 0x01	; 1
#endif
  return(true);
  }
    419a:	08 95       	ret

0000419c <powerDownSerial()>:
  PRR |= _BV(PRADC); // Disable the ADC.
  }


// Check if serial is (already) powered up.
static bool _serialIsPoweredUp() { return(!(PRR & _BV(PRUSART0))); }
    419c:	80 91 64 00 	lds	r24, 0x0064


// Flush any pending serial output and power it down if up.
void powerDownSerial()
  {
  if(_serialIsPoweredUp())
    41a0:	81 fd       	sbrc	r24, 1
    41a2:	08 c0       	rjmp	.+16     	; 0x41b4 <powerDownSerial()+0x18>
    {
    // Flush serial output and shut down if apparently active.
    Serial.flush();
    41a4:	87 e1       	ldi	r24, 0x17	; 23
    41a6:	95 e0       	ldi	r25, 0x05	; 5
    41a8:	0e 94 49 3a 	call	0x7492	; 0x7492 <HardwareSerial::flush()>
    //flushSerialHW();
    Serial.end();
    41ac:	87 e1       	ldi	r24, 0x17	; 23
    41ae:	95 e0       	ldi	r25, 0x05	; 5
    41b0:	0e 94 89 39 	call	0x7312	; 0x7312 <HardwareSerial::end()>
    }
  pinMode(PIN_SERIAL_RX, INPUT_PULLUP);
    41b4:	80 e0       	ldi	r24, 0x00	; 0
    41b6:	62 e0       	ldi	r22, 0x02	; 2
    41b8:	0e 94 ee 37 	call	0x6fdc	; 0x6fdc <pinMode>
  pinMode(PIN_SERIAL_TX, INPUT_PULLUP);
    41bc:	81 e0       	ldi	r24, 0x01	; 1
    41be:	62 e0       	ldi	r22, 0x02	; 2
    41c0:	0e 94 ee 37 	call	0x6fdc	; 0x6fdc <pinMode>
  PRR |= _BV(PRUSART0); // Disable the UART module.
    41c4:	80 91 64 00 	lds	r24, 0x0064
    41c8:	82 60       	ori	r24, 0x02	; 2
    41ca:	80 93 64 00 	sts	0x0064, r24
  }
    41ce:	08 95       	ret

000041d0 <burnHundredsOfCyclesProductivelyAndPoll()>:
// This call should typically take << 1ms at 1MHz CPU.
// Does not change CPU clock speeds, mess with interrupts (other than possible brief blocking), or sleep.
// May capture some entropy in secure and non-secure PRNGs.
void burnHundredsOfCyclesProductivelyAndPoll()
  {
  if(pollIO()) { seedRNG8(cycleCountCPU(), _watchdogFired, getSubCycleTime()); }
    41d0:	80 e0       	ldi	r24, 0x00	; 0
    41d2:	0e 94 1c 07 	call	0xe38	; 0xe38 <pollIO(bool)>
    41d6:	88 23       	and	r24, r24
    41d8:	41 f0       	breq	.+16     	; 0x41ea <burnHundredsOfCyclesProductivelyAndPoll()+0x1a>
    41da:	86 b5       	in	r24, 0x26	; 38
    41dc:	60 91 66 03 	lds	r22, 0x0366
    41e0:	40 91 b2 00 	lds	r20, 0x00B2
    41e4:	0e 94 9e 21 	call	0x433c	; 0x433c <seedRNG8(unsigned char, unsigned char, unsigned char)>
    41e8:	08 95       	ret
  else { captureEntropy1(); }
    41ea:	0e 94 38 20 	call	0x4070	; 0x4070 <captureEntropy1()>
    41ee:	08 95       	ret

000041f0 <flushSerialProductive()>:

#ifndef flushSerialProductive
// Does a Serial.flush() attempting to do some useful work (eg I/O polling) while waiting for output to drain.
// Assumes hundreds of CPU cycles available for each character queued for TX.
// Does not change CPU clock speed or disable or mess with USART0, though may poll it.
void flushSerialProductive()
    41f0:	02 c0       	rjmp	.+4      	; 0x41f6 <flushSerialProductive()+0x6>
#if 0 && defined(DEBUG)
  if(!_serialIsPoweredUp()) { panic(); } // Trying to operate serial without it powered up.
#endif
  // Can productively spin here churning PRNGs or the like before the flush(), checking for the UART TX buffer to empty...
  // An occasional premature exit to flush() due to Serial interrupt handler interaction is benign, and indeed more grist to the mill.
  while(serialTXInProgress()) { burnHundredsOfCyclesProductivelyAndPoll(); }
    41f2:	0e 94 e8 20 	call	0x41d0	; 0x41d0 <burnHundredsOfCyclesProductivelyAndPoll()>
    41f6:	80 91 c0 00 	lds	r24, 0x00C0
    41fa:	85 ff       	sbrs	r24, 5
    41fc:	fa cf       	rjmp	.-12     	; 0x41f2 <flushSerialProductive()+0x2>
  Serial.flush(); // Wait for all output to have been sent.
    41fe:	87 e1       	ldi	r24, 0x17	; 23
    4200:	95 e0       	ldi	r25, 0x05	; 5
    4202:	0e 94 49 3a 	call	0x7492	; 0x7492 <HardwareSerial::flush()>
  }
    4206:	08 95       	ret

00004208 <flushSerialSCTSensitive()>:
// Does not change CPU clock speed or disable or mess with USART0, though may poll it.
// Sleeps in IDLE mode for ~15ms at a time (backtopped by watchdog) waking on any interrupt
// so that the caller must be sure RX overrun (etc) will not be an issue.
// Switches to flushSerialProductive() behaviour
// if in danger of overrunning a minor cycle while idling.
void flushSerialSCTSensitive()
    4208:	1f 93       	push	r17
#ifdef ENABLE_AVR_IDLE_MODE
// Idle productively polling I/O, etc, across the system while spending time in low-power mode if possible.
// Typically sleeps for nominally up to 30ms; tries to allow ealier wakeup if interrupt is received, etc.
// (Will often be prematurely woken by timer0 with ~16ms interval.)
// True iff watchdog timer expired; false if something else woke the CPU.
static bool inline idle15AndPoll() { const bool wd = idleCPU(WDTO_15MS); pollIO(!wd); return(wd); }
    420a:	11 e0       	ldi	r17, 0x01	; 1
  {
#if 0 && defined(DEBUG)
  if(!_serialIsPoweredUp()) { panic(); } // Trying to operate serial without it powered up.
#endif
#ifdef ENABLE_AVR_IDLE_MODE
  while(serialTXInProgress() && (getSubCycleTime() < GSCT_MAX - 2 - (20/SUBCYCLE_TICK_MS_RD)))
    420c:	80 91 c0 00 	lds	r24, 0x00C0
    4210:	85 fd       	sbrc	r24, 5
    4212:	0b c0       	rjmp	.+22     	; 0x422a <flushSerialSCTSensitive()+0x22>
    4214:	80 91 b2 00 	lds	r24, 0x00B2
    4218:	8b 3f       	cpi	r24, 0xFB	; 251
    421a:	38 f4       	brcc	.+14     	; 0x422a <flushSerialSCTSensitive()+0x22>
    421c:	80 e0       	ldi	r24, 0x00	; 0
    421e:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <idleCPU(signed char)>
    4222:	81 27       	eor	r24, r17
    4224:	0e 94 1c 07 	call	0xe38	; 0xe38 <pollIO(bool)>
    4228:	f1 cf       	rjmp	.-30     	; 0x420c <flushSerialSCTSensitive()+0x4>
    { idle15AndPoll(); } // Save much power by idling CPU, though everything else runs.
#endif
  flushSerialProductive();
    422a:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <flushSerialProductive()>
  }
    422e:	1f 91       	pop	r17
    4230:	08 95       	ret

00004232 <powerUpSerialIfDisabled()>:
  PRR |= _BV(PRADC); // Disable the ADC.
  }


// Check if serial is (already) powered up.
static bool _serialIsPoweredUp() { return(!(PRR & _BV(PRUSART0))); }
    4232:	80 91 64 00 	lds	r24, 0x0064
// If serial was disabled, power it up, do Serial.begin(), and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownSerial() may be advisable.
bool powerUpSerialIfDisabled()
  {
  if(_serialIsPoweredUp()) { return(false); }
    4236:	81 fd       	sbrc	r24, 1
    4238:	02 c0       	rjmp	.+4      	; 0x423e <powerUpSerialIfDisabled()+0xc>
    423a:	80 e0       	ldi	r24, 0x00	; 0
    423c:	08 95       	ret
  PRR &= ~_BV(PRUSART0); // Enable the UART.
    423e:	80 91 64 00 	lds	r24, 0x0064
    4242:	8d 7f       	andi	r24, 0xFD	; 253
    4244:	80 93 64 00 	sts	0x0064, r24
  Serial.begin(BAUD); // Set it going.
    4248:	87 e1       	ldi	r24, 0x17	; 23
    424a:	95 e0       	ldi	r25, 0x05	; 5
    424c:	40 ec       	ldi	r20, 0xC0	; 192
    424e:	52 e1       	ldi	r21, 0x12	; 18
    4250:	60 e0       	ldi	r22, 0x00	; 0
    4252:	70 e0       	ldi	r23, 0x00	; 0
    4254:	0e 94 0b 39 	call	0x7216	; 0x7216 <HardwareSerial::begin(unsigned long)>
    4258:	81 e0       	ldi	r24, 0x01	; 1
  return(true);
  }
    425a:	08 95       	ret

0000425c <sleepUntilSubCycleTime(unsigned char)>:
// May use a combination of techniques to hit the required time.
// Requesting a sleep until at or near the end of the cycle risks overrun and may be unwise.
// Using this to sleep less then 2 ticks may prove unreliable as the RTC rolls on underneath...
// This is NOT intended to be used to sleep over the end of a minor cycle.
// May poll I/O.
bool sleepUntilSubCycleTime(const uint8_t sleepUntil)
    425c:	0f 93       	push	r16
    425e:	1f 93       	push	r17
    4260:	cf 93       	push	r28
    4262:	df 93       	push	r29
    4264:	18 2f       	mov	r17, r24
      sleepLowPowerLessThanMs(max(SUBCYCLE_TICK_MS_RD / 2, 1)); // Assumed to be a constant expression.
      continue;
      }

    // Compute remaining time in milliseconds, rounded down...
    const uint16_t msLeft = ((uint16_t)SUBCYCLE_TICK_MS_RD) * ticksLeft;
    4266:	07 e0       	ldi	r16, 0x07	; 7
// May poll I/O.
bool sleepUntilSubCycleTime(const uint8_t sleepUntil)
  {
  for( ; ; )
    {
    const uint8_t now = getSubCycleTime();
    4268:	80 91 b2 00 	lds	r24, 0x00B2
    if(now == sleepUntil) { return(true); } // Done it!
    426c:	81 17       	cp	r24, r17
    426e:	e1 f1       	breq	.+120    	; 0x42e8 <sleepUntilSubCycleTime(unsigned char)+0x8c>
    if(now > sleepUntil) { return(false); } // Too late...
    4270:	18 17       	cp	r17, r24
    4272:	10 f4       	brcc	.+4      	; 0x4278 <sleepUntilSubCycleTime(unsigned char)+0x1c>
    4274:	80 e0       	ldi	r24, 0x00	; 0
    4276:	39 c0       	rjmp	.+114    	; 0x42ea <sleepUntilSubCycleTime(unsigned char)+0x8e>

    // Compute time left to sleep.
    // It is easy to sleep a bit more later if necessary, but oversleeping is bad.
    const uint8_t ticksLeft = sleepUntil - now;
    4278:	21 2f       	mov	r18, r17
    427a:	28 1b       	sub	r18, r24
    // Deal with shortest sleep specially to avoid missing target from overheads...
    if(1 == ticksLeft)
    427c:	21 30       	cpi	r18, 0x01	; 1
    427e:	19 f4       	brne	.+6      	; 0x4286 <sleepUntilSubCycleTime(unsigned char)+0x2a>
// Should be good for values up to at least 1000, ie 1 second.
// Uses formulation likely to be quicker than sleepLowPowerMs() for non-constant argument values,
// and that results in a somewhat shorter sleep than sleepLowPowerMs(ms).
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerLessThanMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed(((MIN_CPU_HZ/4000) * (ms)) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    4280:	83 e1       	ldi	r24, 0x13	; 19
    4282:	90 e0       	ldi	r25, 0x00	; 0
    4284:	2e c0       	rjmp	.+92     	; 0x42e2 <sleepUntilSubCycleTime(unsigned char)+0x86>
      sleepLowPowerLessThanMs(max(SUBCYCLE_TICK_MS_RD / 2, 1)); // Assumed to be a constant expression.
      continue;
      }

    // Compute remaining time in milliseconds, rounded down...
    const uint16_t msLeft = ((uint16_t)SUBCYCLE_TICK_MS_RD) * ticksLeft;
    4286:	20 9f       	mul	r18, r16
    4288:	e0 01       	movw	r28, r0
    428a:	11 24       	eor	r1, r1

    // If comfortably in the area of nap()s then use one of them for improved energy savings.
    // Allow for nap() to overrun a little as its timing can vary with temperature and supply voltage,
    // and the bulk of energy savings should still be available without pushing the timing to the wire.
    // Note that during nap() timer0 should be stopped and thus not cause premature wakeup (from overflow interrupt).
    if(msLeft >= 20)
    428c:	c4 31       	cpi	r28, 0x14	; 20
    428e:	d1 05       	cpc	r29, r1
    4290:	70 f0       	brcs	.+28     	; 0x42ae <sleepUntilSubCycleTime(unsigned char)+0x52>
      {
      if(msLeft >= 80)
    4292:	c0 35       	cpi	r28, 0x50	; 80
    4294:	d1 05       	cpc	r29, r1
    4296:	38 f0       	brcs	.+14     	; 0x42a6 <sleepUntilSubCycleTime(unsigned char)+0x4a>
        {
        if(msLeft >= 333)
    4298:	cd 54       	subi	r28, 0x4D	; 77
    429a:	d1 40       	sbci	r29, 0x01	; 1
    429c:	10 f0       	brcs	.+4      	; 0x42a2 <sleepUntilSubCycleTime(unsigned char)+0x46>
          {
          nap(WDTO_250MS); // Nominal 250ms sleep.
    429e:	84 e0       	ldi	r24, 0x04	; 4
    42a0:	03 c0       	rjmp	.+6      	; 0x42a8 <sleepUntilSubCycleTime(unsigned char)+0x4c>
          continue;
          }
        nap(WDTO_60MS); // Nominal 60ms sleep.
    42a2:	82 e0       	ldi	r24, 0x02	; 2
    42a4:	01 c0       	rjmp	.+2      	; 0x42a8 <sleepUntilSubCycleTime(unsigned char)+0x4c>
        continue;
        }
      nap(WDTO_15MS); // Nominal 15ms sleep.
    42a6:	80 e0       	ldi	r24, 0x00	; 0
    42a8:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <nap(signed char)>
    42ac:	dd cf       	rjmp	.-70     	; 0x4268 <sleepUntilSubCycleTime(unsigned char)+0xc>
    // Use low-power CPU sleep for residual time, but being very careful not to oversleep.
    // Aim to sleep somewhat under residual time, eg to allow for overheads, interrupts, and other slippages.
    // Assumed to be > 1 else would have been special-cased above.
    // Assumed to be << 1s else a nap() would have been used above.
#ifdef DEBUG
    if((msLeft < 2) || (msLeft > 1000)) { panic(); }
    42ae:	ce 01       	movw	r24, r28
    42b0:	02 97       	sbiw	r24, 0x02	; 2
    42b2:	87 5e       	subi	r24, 0xE7	; 231
    42b4:	93 40       	sbci	r25, 0x03	; 3
    42b6:	10 f0       	brcs	.+4      	; 0x42bc <sleepUntilSubCycleTime(unsigned char)+0x60>
    42b8:	0e 94 db 2f 	call	0x5fb6	; 0x5fb6 <panic()>
    42bc:	9e 01       	movw	r18, r28
    42be:	21 50       	subi	r18, 0x01	; 1
    42c0:	30 40       	sbci	r19, 0x00	; 0
    42c2:	40 e0       	ldi	r20, 0x00	; 0
    42c4:	50 e0       	ldi	r21, 0x00	; 0
    42c6:	da 01       	movw	r26, r20
    42c8:	c9 01       	movw	r24, r18
    42ca:	63 e0       	ldi	r22, 0x03	; 3
    42cc:	88 0f       	add	r24, r24
    42ce:	99 1f       	adc	r25, r25
    42d0:	aa 1f       	adc	r26, r26
    42d2:	bb 1f       	adc	r27, r27
    42d4:	6a 95       	dec	r22
    42d6:	d1 f7       	brne	.-12     	; 0x42cc <sleepUntilSubCycleTime(unsigned char)+0x70>
    42d8:	82 1b       	sub	r24, r18
    42da:	93 0b       	sbc	r25, r19
    42dc:	a4 0b       	sbc	r26, r20
    42de:	b5 0b       	sbc	r27, r21
    42e0:	02 97       	sbiw	r24, 0x02	; 2
    42e2:	0e 94 8b 1d 	call	0x3b16	; 0x3b16 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
    42e6:	c0 cf       	rjmp	.-128    	; 0x4268 <sleepUntilSubCycleTime(unsigned char)+0xc>
    42e8:	81 e0       	ldi	r24, 0x01	; 1
#endif
    sleepLowPowerLessThanMs(msLeft - 1);
    }
  }
    42ea:	df 91       	pop	r29
    42ec:	cf 91       	pop	r28
    42ee:	1f 91       	pop	r17
    42f0:	0f 91       	pop	r16
    42f2:	08 95       	ret

000042f4 <powerSetup()>:
// Call from setup() to turn off unused modules, set up timers and interrupts, etc.
// I/O pin setting is not done here.
void powerSetup()
  {
#ifdef DEBUG
  assert(DEFAULT_CPU_PRESCALE == clock_prescale_get()); // Verify that CPU prescaling is as expected.
    42f4:	80 91 61 00 	lds	r24, 0x0061
    42f8:	8f 70       	andi	r24, 0x0F	; 15
    42fa:	83 30       	cpi	r24, 0x03	; 3
    42fc:	11 f0       	breq	.+4      	; 0x4302 <powerSetup()+0xe>
    42fe:	0e 94 c8 02 	call	0x590	; 0x590 <abort>
#endif

  // Do normal gentle switch off, including analogue module/control in correct order.
  minimisePowerWithoutSleep();
    4302:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <minimisePowerWithoutSleep()>

  // Brutally force off all modules, then re-enable explicitly below any still needed.
  power_all_disable(); 
    4306:	80 91 64 00 	lds	r24, 0x0064
    430a:	8f 6e       	ori	r24, 0xEF	; 239
    430c:	80 93 64 00 	sts	0x0064, r24

#if !defined(DONT_USE_TIMER0)
  power_timer0_enable(); // Turning timer 0 off messes up some standard Arduino support such as delay() and millis().
    4310:	80 91 64 00 	lds	r24, 0x0064
    4314:	8f 7d       	andi	r24, 0xDF	; 223
    4316:	80 93 64 00 	sts	0x0064, r24
#endif
  
#if defined(WAKEUP_32768HZ_XTAL)
  power_timer2_enable();
    431a:	80 91 64 00 	lds	r24, 0x0064
    431e:	8f 7b       	andi	r24, 0xBF	; 191
    4320:	80 93 64 00 	sts	0x0064, r24
#ifdef WAKEUP_32768HZ_XTAL
static void timer2XtalIntSetup()
 {
  // Set up TIMER2 to wake CPU out of sleep regularly using external 32768Hz crystal.
  // See http://www.atmel.com/Images/doc2505.pdf
  TCCR2A = 0x00;
    4324:	10 92 b0 00 	sts	0x00B0, r1

#if defined(HALF_SECOND_RTC_SUPPORT)
  TCCR2B = (1<<CS22); // Set CLK/64 for overflow interrupt every 0.5s.
#elif defined(TWO_S_TICK_RTC_SUPPORT)
  TCCR2B = (1<<CS22)|(1<<CS21); // Set CLK/128 for overflow interrupt every 2s.
    4328:	86 e0       	ldi	r24, 0x06	; 6
    432a:	80 93 b1 00 	sts	0x00B1, r24
#else
  TCCR2B = (1<<CS22)|(1<<CS20); // Set CLK/128 for overflow interrupt every 1s.
#endif
  //TCCR2B = (1<<CS22)|(1<<CS21)|(1<<CS20); // Set CLK/1024 for overflow interrupt every 8s (slowest possible).

  ASSR = (1<<AS2); // Enable asynchronous operation.
    432e:	80 e2       	ldi	r24, 0x20	; 32
    4330:	80 93 b6 00 	sts	0x00B6, r24
  TIMSK2 = (1<<TOIE2); // Enable the timer 2 interrupt.
    4334:	81 e0       	ldi	r24, 0x01	; 1
    4336:	80 93 70 00 	sts	0x0070, r24
  
#if defined(WAKEUP_32768HZ_XTAL)
  power_timer2_enable();
  timer2XtalIntSetup();
#endif
  }
    433a:	08 95       	ret

0000433c <seedRNG8(unsigned char, unsigned char, unsigned char)>:
//2 ADDs, one bit shift right , and one increment. Difficult or slow operations like multiply, etc 
//were avoided for maximum speed on ultra low power devices.
void seedRNG8(uint8_t s1, uint8_t s2, uint8_t s3) // Originally init_rng(s1,s2,s3) //Can also be used to seed the rng with more entropy during use.
  {
  //XOR new entropy into key state
  a ^=s1;
    433c:	20 91 6b 03 	lds	r18, 0x036B
  b ^=s2;
    4340:	90 91 6c 03 	lds	r25, 0x036C
    4344:	69 27       	eor	r22, r25
  c ^=s3;
    4346:	90 91 69 03 	lds	r25, 0x0369
    434a:	49 27       	eor	r20, r25
  x++;
    434c:	90 91 6a 03 	lds	r25, 0x036A
    4350:	9f 5f       	subi	r25, 0xFF	; 255
    4352:	90 93 6a 03 	sts	0x036A, r25
  a = (a^c^x);
    4356:	28 27       	eor	r18, r24
    4358:	24 27       	eor	r18, r20
    435a:	29 27       	eor	r18, r25
    435c:	20 93 6b 03 	sts	0x036B, r18
  b = (b+a);
    4360:	62 0f       	add	r22, r18
    4362:	60 93 6c 03 	sts	0x036C, r22
  c = ((c+(b>>1))^a);
    4366:	66 95       	lsr	r22
    4368:	64 0f       	add	r22, r20
    436a:	62 27       	eor	r22, r18
    436c:	60 93 69 03 	sts	0x0369, r22
  }
    4370:	08 95       	ret

00004372 <randRNG8()>:
//
uint8_t randRNG8() // Originally unsigned char randomize().
  {
  x++;               //x is incremented every round and is not affected by any other variable
    4372:	80 91 6a 03 	lds	r24, 0x036A
    4376:	8f 5f       	subi	r24, 0xFF	; 255
    4378:	80 93 6a 03 	sts	0x036A, r24
  a = (a^c^x);       //note the mix of addition and XOR
    437c:	20 91 69 03 	lds	r18, 0x0369
    4380:	90 91 6b 03 	lds	r25, 0x036B
    4384:	92 27       	eor	r25, r18
    4386:	98 27       	eor	r25, r24
    4388:	90 93 6b 03 	sts	0x036B, r25
  b = (b+a);         //And the use of very few instructions
    438c:	80 91 6c 03 	lds	r24, 0x036C
    4390:	89 0f       	add	r24, r25
    4392:	80 93 6c 03 	sts	0x036C, r24
  c = ((c+(b>>1))^a);  //the right shift is to ensure that high-order bits from b can affect  
    4396:	86 95       	lsr	r24
    4398:	82 0f       	add	r24, r18
    439a:	89 27       	eor	r24, r25
    439c:	80 93 69 03 	sts	0x0369, r24
  return(c);         //low order bits of other variables
  }
    43a0:	08 95       	ret

000043a2 <global constructors keyed to _Z8seedRNG8hhh>:
uint8_t randRNG8(); // Originally called 'randomize()'.
// RNG8 working state.
static uint8_t a, b, c;
// DHD20130603: avoid the hidden counter always starting at zero c/o some per-build state.
// Derived from linker-driven pointer base plus hash of compilation timestamp, with little run-time cost.
static uint8_t x = (uint8_t)(intptr_t) ((&c) + (uint8_t)((__TIME__[7] * 17) ^ (__TIME__[6]) ^ (__TIME__[4] << 11)));
    43a2:	86 ef       	ldi	r24, 0xF6	; 246
    43a4:	93 e0       	ldi	r25, 0x03	; 3
    43a6:	80 93 6a 03 	sts	0x036A, r24
  x++;               //x is incremented every round and is not affected by any other variable
  a = (a^c^x);       //note the mix of addition and XOR
  b = (b+a);         //And the use of very few instructions
  c = ((c+(b>>1))^a);  //the right shift is to ensure that high-order bits from b can affect  
  return(c);         //low order bits of other variables
  }
    43aa:	08 95       	ret

000043ac <RFM22RXFIFO(unsigned char*, unsigned char)>:


// Put RFM22 into standby, attempt to read specified number of bytes from FIFO to buffer.
// Leaves RFM22 in low-power standby mode.
// Trailing bytes (more than were actually sent) undefined.
void RFM22RXFIFO(uint8_t *buf, const uint8_t bufSize)
    43ac:	ff 92       	push	r15
    43ae:	0f 93       	push	r16
    43b0:	1f 93       	push	r17
    43b2:	18 2f       	mov	r17, r24
    43b4:	09 2f       	mov	r16, r25
    43b6:	f6 2e       	mov	r15, r22
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    43b8:	0e 94 60 20 	call	0x40c0	; 0x40c0 <powerUpSPIIfDisabled()>
    43bc:	48 2f       	mov	r20, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    43be:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    43c0:	87 e8       	ldi	r24, 0x87	; 135
    43c2:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    43c4:	0d b4       	in	r0, 0x2d	; 45
    43c6:	07 fe       	sbrs	r0, 7
    43c8:	fd cf       	rjmp	.-6      	; 0x43c4 <RFM22RXFIFO(unsigned char*, unsigned char)+0x18>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    43ca:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    43cc:	0d b4       	in	r0, 0x2d	; 45
    43ce:	07 fe       	sbrs	r0, 7
    43d0:	fd cf       	rjmp	.-6      	; 0x43cc <RFM22RXFIFO(unsigned char*, unsigned char)+0x20>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    43d2:	2a 9a       	sbi	0x05, 2	; 5
  {
  const bool neededEnable = powerUpSPIIfDisabled();

  _RFM22ModeStandby();

  _RFM22_SELECT();
    43d4:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    43d6:	8f e7       	ldi	r24, 0x7F	; 127
    43d8:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    43da:	0d b4       	in	r0, 0x2d	; 45
    43dc:	07 fe       	sbrs	r0, 7
    43de:	fd cf       	rjmp	.-6      	; 0x43da <RFM22RXFIFO(unsigned char*, unsigned char)+0x2e>
  return(SPDR);
    43e0:	8e b5       	in	r24, 0x2e	; 46
    43e2:	81 2f       	mov	r24, r17
    43e4:	90 2f       	mov	r25, r16
    43e6:	9c 01       	movw	r18, r24
    43e8:	f9 01       	movw	r30, r18
    43ea:	90 e0       	ldi	r25, 0x00	; 0
    43ec:	07 c0       	rjmp	.+14     	; 0x43fc <RFM22RXFIFO(unsigned char*, unsigned char)+0x50>

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    43ee:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    43f0:	0d b4       	in	r0, 0x2d	; 45
    43f2:	07 fe       	sbrs	r0, 7
    43f4:	fd cf       	rjmp	.-6      	; 0x43f0 <RFM22RXFIFO(unsigned char*, unsigned char)+0x44>
  return(SPDR);
    43f6:	8e b5       	in	r24, 0x2e	; 46

  _RFM22_SELECT();
  _RFM22_io(RFM22REG_FIFO & 0x7F); // Start burst read from RX FIFO.
//  uint8_t val;
  for(uint8_t i = 0; i < bufSize; ++i)
    { buf[i] = _RFM22_io(0);  }
    43f8:	81 93       	st	Z+, r24
  _RFM22ModeStandby();

  _RFM22_SELECT();
  _RFM22_io(RFM22REG_FIFO & 0x7F); // Start burst read from RX FIFO.
//  uint8_t val;
  for(uint8_t i = 0; i < bufSize; ++i)
    43fa:	9f 5f       	subi	r25, 0xFF	; 255
    43fc:	9f 15       	cp	r25, r15
    43fe:	b8 f3       	brcs	.-18     	; 0x43ee <RFM22RXFIFO(unsigned char*, unsigned char)+0x42>
    { buf[i] = _RFM22_io(0);  }
  _RFM22_DESELECT();
    4400:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    4402:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4404:	88 e8       	ldi	r24, 0x88	; 136
    4406:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4408:	0d b4       	in	r0, 0x2d	; 45
    440a:	07 fe       	sbrs	r0, 7
    440c:	fd cf       	rjmp	.-6      	; 0x4408 <RFM22RXFIFO(unsigned char*, unsigned char)+0x5c>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    440e:	83 e0       	ldi	r24, 0x03	; 3
    4410:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4412:	0d b4       	in	r0, 0x2d	; 45
    4414:	07 fe       	sbrs	r0, 7
    4416:	fd cf       	rjmp	.-6      	; 0x4412 <RFM22RXFIFO(unsigned char*, unsigned char)+0x66>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    4418:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    441a:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    441c:	88 e8       	ldi	r24, 0x88	; 136
    441e:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4420:	0d b4       	in	r0, 0x2d	; 45
    4422:	07 fe       	sbrs	r0, 7
    4424:	fd cf       	rjmp	.-6      	; 0x4420 <RFM22RXFIFO(unsigned char*, unsigned char)+0x74>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4426:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4428:	0d b4       	in	r0, 0x2d	; 45
    442a:	07 fe       	sbrs	r0, 7
    442c:	fd cf       	rjmp	.-6      	; 0x4428 <RFM22RXFIFO(unsigned char*, unsigned char)+0x7c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    442e:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    4430:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4432:	85 e8       	ldi	r24, 0x85	; 133
    4434:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4436:	0d b4       	in	r0, 0x2d	; 45
    4438:	07 fe       	sbrs	r0, 7
    443a:	fd cf       	rjmp	.-6      	; 0x4436 <RFM22RXFIFO(unsigned char*, unsigned char)+0x8a>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    443c:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    443e:	0d b4       	in	r0, 0x2d	; 45
    4440:	07 fe       	sbrs	r0, 7
    4442:	fd cf       	rjmp	.-6      	; 0x443e <RFM22RXFIFO(unsigned char*, unsigned char)+0x92>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4444:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4446:	0d b4       	in	r0, 0x2d	; 45
    4448:	07 fe       	sbrs	r0, 7
    444a:	fd cf       	rjmp	.-6      	; 0x4446 <RFM22RXFIFO(unsigned char*, unsigned char)+0x9a>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    444c:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    444e:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4450:	83 e8       	ldi	r24, 0x83	; 131
    4452:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4454:	0d b4       	in	r0, 0x2d	; 45
    4456:	07 fe       	sbrs	r0, 7
    4458:	fd cf       	rjmp	.-6      	; 0x4454 <RFM22RXFIFO(unsigned char*, unsigned char)+0xa8>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    445a:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    445c:	0d b4       	in	r0, 0x2d	; 45
    445e:	07 fe       	sbrs	r0, 7
    4460:	fd cf       	rjmp	.-6      	; 0x445c <RFM22RXFIFO(unsigned char*, unsigned char)+0xb0>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4462:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4464:	0d b4       	in	r0, 0x2d	; 45
    4466:	07 fe       	sbrs	r0, 7
    4468:	fd cf       	rjmp	.-6      	; 0x4464 <RFM22RXFIFO(unsigned char*, unsigned char)+0xb8>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    446a:	2a 9a       	sbi	0x05, 2	; 5
  _RFM22WriteReg16Bit0(RFM22REG_INT_ENABLE1);
  // Clear any interrupts already/still pending...
  _RFM22ClearInterrupts();  
  //_RFM22WriteReg8Bit(0xd, 0x1f); // Drive GPIO2 to ground as output... (Move to general register settings.)

  if(neededEnable) { powerDownSPI(); }
    446c:	44 23       	and	r20, r20
    446e:	11 f0       	breq	.+4      	; 0x4474 <RFM22RXFIFO(unsigned char*, unsigned char)+0xc8>
    4470:	0e 94 46 20 	call	0x408c	; 0x408c <powerDownSPI()>
  }
    4474:	1f 91       	pop	r17
    4476:	0f 91       	pop	r16
    4478:	ff 90       	pop	r15
    447a:	08 95       	ret

0000447c <RFM22SetUpRX(unsigned char, bool, bool)>:
  _RFM22_DESELECT();
  if(neededEnable) { powerDownSPI(); }
  }

// Put RFM22 into RX mode with given RX FIFO 'nearly-full' threshold and optional interrupts enabled.
void RFM22SetUpRX(const uint8_t nearlyFullThreshold, const bool syncInt, const bool dataInt)
    447c:	ff 92       	push	r15
    447e:	0f 93       	push	r16
    4480:	1f 93       	push	r17
    4482:	18 2f       	mov	r17, r24
    4484:	f6 2e       	mov	r15, r22
    4486:	04 2f       	mov	r16, r20
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    4488:	0e 94 60 20 	call	0x40c0	; 0x40c0 <powerUpSPIIfDisabled()>
    448c:	28 2f       	mov	r18, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    448e:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4490:	88 e8       	ldi	r24, 0x88	; 136
    4492:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4494:	0d b4       	in	r0, 0x2d	; 45
    4496:	07 fe       	sbrs	r0, 7
    4498:	fd cf       	rjmp	.-6      	; 0x4494 <RFM22SetUpRX(unsigned char, bool, bool)+0x18>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    449a:	83 e0       	ldi	r24, 0x03	; 3
    449c:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    449e:	0d b4       	in	r0, 0x2d	; 45
    44a0:	07 fe       	sbrs	r0, 7
    44a2:	fd cf       	rjmp	.-6      	; 0x449e <RFM22SetUpRX(unsigned char, bool, bool)+0x22>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    44a4:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    44a6:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    44a8:	88 e8       	ldi	r24, 0x88	; 136
    44aa:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    44ac:	0d b4       	in	r0, 0x2d	; 45
    44ae:	07 fe       	sbrs	r0, 7
    44b0:	fd cf       	rjmp	.-6      	; 0x44ac <RFM22SetUpRX(unsigned char, bool, bool)+0x30>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    44b2:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    44b4:	0d b4       	in	r0, 0x2d	; 45
    44b6:	07 fe       	sbrs	r0, 7
    44b8:	fd cf       	rjmp	.-6      	; 0x44b4 <RFM22SetUpRX(unsigned char, bool, bool)+0x38>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    44ba:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    44bc:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    44be:	8e ef       	ldi	r24, 0xFE	; 254
    44c0:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    44c2:	0d b4       	in	r0, 0x2d	; 45
    44c4:	07 fe       	sbrs	r0, 7
    44c6:	fd cf       	rjmp	.-6      	; 0x44c2 <RFM22SetUpRX(unsigned char, bool, bool)+0x46>
  // Clear RX and TX FIFOs.
  _RFM22WriteReg8Bit(RFM22REG_OP_CTRL2, 3); // FFCLRTX | FFCLRTX
  _RFM22WriteReg8Bit(RFM22REG_OP_CTRL2, 0);

  // Set FIFO RX almost-full threshold as specified.
  _RFM22WriteReg8Bit(RFM22REG_RX_FIFO_CTRL, min(nearlyFullThreshold, 63));
    44c8:	81 2f       	mov	r24, r17
    44ca:	10 34       	cpi	r17, 0x40	; 64
    44cc:	08 f0       	brcs	.+2      	; 0x44d0 <RFM22SetUpRX(unsigned char, bool, bool)+0x54>
    44ce:	8f e3       	ldi	r24, 0x3F	; 63

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    44d0:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    44d2:	0d b4       	in	r0, 0x2d	; 45
    44d4:	07 fe       	sbrs	r0, 7
    44d6:	fd cf       	rjmp	.-6      	; 0x44d2 <RFM22SetUpRX(unsigned char, bool, bool)+0x56>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    44d8:	2a 9a       	sbi	0x05, 2	; 5

  // Set FIFO RX almost-full threshold as specified.
  _RFM22WriteReg8Bit(RFM22REG_RX_FIFO_CTRL, min(nearlyFullThreshold, 63));

  // Enable requested RX-related interrupts.
  _RFM22WriteReg8Bit(RFM22REG_INT_ENABLE1, (dataInt?0x10:0)); // enrxffafull: Enable RX FIFO Almost Full.
    44da:	00 23       	and	r16, r16
    44dc:	11 f4       	brne	.+4      	; 0x44e2 <RFM22SetUpRX(unsigned char, bool, bool)+0x66>
    44de:	90 e0       	ldi	r25, 0x00	; 0
    44e0:	01 c0       	rjmp	.+2      	; 0x44e4 <RFM22SetUpRX(unsigned char, bool, bool)+0x68>
    44e2:	90 e1       	ldi	r25, 0x10	; 16

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    44e4:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    44e6:	85 e8       	ldi	r24, 0x85	; 133
    44e8:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    44ea:	0d b4       	in	r0, 0x2d	; 45
    44ec:	07 fe       	sbrs	r0, 7
    44ee:	fd cf       	rjmp	.-6      	; 0x44ea <RFM22SetUpRX(unsigned char, bool, bool)+0x6e>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    44f0:	9e bd       	out	0x2e, r25	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    44f2:	0d b4       	in	r0, 0x2d	; 45
    44f4:	07 fe       	sbrs	r0, 7
    44f6:	fd cf       	rjmp	.-6      	; 0x44f2 <RFM22SetUpRX(unsigned char, bool, bool)+0x76>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    44f8:	2a 9a       	sbi	0x05, 2	; 5
  // Set FIFO RX almost-full threshold as specified.
  _RFM22WriteReg8Bit(RFM22REG_RX_FIFO_CTRL, min(nearlyFullThreshold, 63));

  // Enable requested RX-related interrupts.
  _RFM22WriteReg8Bit(RFM22REG_INT_ENABLE1, (dataInt?0x10:0)); // enrxffafull: Enable RX FIFO Almost Full.
  _RFM22WriteReg8Bit(RFM22REG_INT_ENABLE2, (syncInt?0x80:0)); // enswdet: Enable Sync Word Detected.
    44fa:	ff 20       	and	r15, r15
    44fc:	11 f4       	brne	.+4      	; 0x4502 <RFM22SetUpRX(unsigned char, bool, bool)+0x86>
    44fe:	90 e0       	ldi	r25, 0x00	; 0
    4500:	01 c0       	rjmp	.+2      	; 0x4504 <RFM22SetUpRX(unsigned char, bool, bool)+0x88>
    4502:	90 e8       	ldi	r25, 0x80	; 128

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    4504:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4506:	86 e8       	ldi	r24, 0x86	; 134
    4508:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    450a:	0d b4       	in	r0, 0x2d	; 45
    450c:	07 fe       	sbrs	r0, 7
    450e:	fd cf       	rjmp	.-6      	; 0x450a <RFM22SetUpRX(unsigned char, bool, bool)+0x8e>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4510:	9e bd       	out	0x2e, r25	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4512:	0d b4       	in	r0, 0x2d	; 45
    4514:	07 fe       	sbrs	r0, 7
    4516:	fd cf       	rjmp	.-6      	; 0x4512 <RFM22SetUpRX(unsigned char, bool, bool)+0x96>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    4518:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    451a:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    451c:	83 e8       	ldi	r24, 0x83	; 131
    451e:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4520:	0d b4       	in	r0, 0x2d	; 45
    4522:	07 fe       	sbrs	r0, 7
    4524:	fd cf       	rjmp	.-6      	; 0x4520 <RFM22SetUpRX(unsigned char, bool, bool)+0xa4>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4526:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4528:	0d b4       	in	r0, 0x2d	; 45
    452a:	07 fe       	sbrs	r0, 7
    452c:	fd cf       	rjmp	.-6      	; 0x4528 <RFM22SetUpRX(unsigned char, bool, bool)+0xac>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    452e:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4530:	0d b4       	in	r0, 0x2d	; 45
    4532:	07 fe       	sbrs	r0, 7
    4534:	fd cf       	rjmp	.-6      	; 0x4530 <RFM22SetUpRX(unsigned char, bool, bool)+0xb4>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    4536:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    4538:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    453a:	87 e8       	ldi	r24, 0x87	; 135
    453c:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    453e:	0d b4       	in	r0, 0x2d	; 45
    4540:	07 fe       	sbrs	r0, 7
    4542:	fd cf       	rjmp	.-6      	; 0x453e <RFM22SetUpRX(unsigned char, bool, bool)+0xc2>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4544:	85 e0       	ldi	r24, 0x05	; 5
    4546:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4548:	0d b4       	in	r0, 0x2d	; 45
    454a:	07 fe       	sbrs	r0, 7
    454c:	fd cf       	rjmp	.-6      	; 0x4548 <RFM22SetUpRX(unsigned char, bool, bool)+0xcc>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    454e:	2a 9a       	sbi	0x05, 2	; 5
  _RFM22ClearInterrupts();

  // Start listening.
  _RFM22ModeRX();
  
  if(neededEnable) { powerDownSPI(); }
    4550:	22 23       	and	r18, r18
    4552:	11 f0       	breq	.+4      	; 0x4558 <RFM22SetUpRX(unsigned char, bool, bool)+0xdc>
    4554:	0e 94 46 20 	call	0x408c	; 0x408c <powerDownSPI()>
  }
    4558:	1f 91       	pop	r17
    455a:	0f 91       	pop	r16
    455c:	ff 90       	pop	r15
    455e:	08 95       	ret

00004560 <RFM22QueueCmdToFF(unsigned char*)>:

// Clears the RFM22 TX FIFO and queues up ready to send via the TXFIFO the 0xff-terminated bytes starting at bptr.
// This routine does not change the command area.
// This uses an efficient burst write.
// For DEBUG can abort after (over-)filling the 64-byte FIFO at no extra cost with a check before spinning waiting for SPI byte to be sent.
void RFM22QueueCmdToFF(uint8_t *bptr)
    4560:	cf 93       	push	r28
    4562:	df 93       	push	r29
    4564:	ec 01       	movw	r28, r24
  {
#if 0 && defined(DEBUG)
  if(0 == *bptr) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22QueueCmdToFF: buffer uninitialised"); panic(); } 
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
    4566:	0e 94 60 20 	call	0x40c0	; 0x40c0 <powerUpSPIIfDisabled()>
    456a:	98 2f       	mov	r25, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    456c:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    456e:	88 e8       	ldi	r24, 0x88	; 136
    4570:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4572:	0d b4       	in	r0, 0x2d	; 45
    4574:	07 fe       	sbrs	r0, 7
    4576:	fd cf       	rjmp	.-6      	; 0x4572 <RFM22QueueCmdToFF(unsigned char*)+0x12>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4578:	81 e0       	ldi	r24, 0x01	; 1
    457a:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    457c:	0d b4       	in	r0, 0x2d	; 45
    457e:	07 fe       	sbrs	r0, 7
    4580:	fd cf       	rjmp	.-6      	; 0x457c <RFM22QueueCmdToFF(unsigned char*)+0x1c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    4582:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    4584:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4586:	88 e8       	ldi	r24, 0x88	; 136
    4588:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    458a:	0d b4       	in	r0, 0x2d	; 45
    458c:	07 fe       	sbrs	r0, 7
    458e:	fd cf       	rjmp	.-6      	; 0x458a <RFM22QueueCmdToFF(unsigned char*)+0x2a>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4590:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4592:	0d b4       	in	r0, 0x2d	; 45
    4594:	07 fe       	sbrs	r0, 7
    4596:	fd cf       	rjmp	.-6      	; 0x4592 <RFM22QueueCmdToFF(unsigned char*)+0x32>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    4598:	2a 9a       	sbi	0x05, 2	; 5
  if(0 == *bptr) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22QueueCmdToFF: buffer uninitialised"); panic(); } 
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
  // Clear the TX FIFO.
  _RFM22ClearTXFIFO();
  _RFM22_SELECT();
    459a:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    459c:	8f ef       	ldi	r24, 0xFF	; 255
    459e:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    45a0:	0d b4       	in	r0, 0x2d	; 45
    45a2:	07 fe       	sbrs	r0, 7
    45a4:	fd cf       	rjmp	.-6      	; 0x45a0 <RFM22QueueCmdToFF(unsigned char*)+0x40>
    45a6:	04 c0       	rjmp	.+8      	; 0x45b0 <RFM22QueueCmdToFF(unsigned char*)+0x50>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    45a8:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    45aa:	0d b4       	in	r0, 0x2d	; 45
    45ac:	07 fe       	sbrs	r0, 7
    45ae:	fd cf       	rjmp	.-6      	; 0x45aa <RFM22QueueCmdToFF(unsigned char*)+0x4a>
    SPDR = val;
    if(--i < 0) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22QueueCmdToFF: buffer unterminated"); panic(); }
    while (!(SPSR & _BV(SPIF))) { }
    }
#else
  while((uint8_t)0xff != (val = *bptr++)) { _RFM22_wr(val); }
    45b0:	89 91       	ld	r24, Y+
    45b2:	8f 3f       	cpi	r24, 0xFF	; 255
    45b4:	c9 f7       	brne	.-14     	; 0x45a8 <RFM22QueueCmdToFF(unsigned char*)+0x48>
#endif
  _RFM22_DESELECT();
    45b6:	2a 9a       	sbi	0x05, 2	; 5
  if(neededEnable) { powerDownSPI(); }
    45b8:	99 23       	and	r25, r25
    45ba:	11 f0       	breq	.+4      	; 0x45c0 <RFM22QueueCmdToFF(unsigned char*)+0x60>
    45bc:	0e 94 46 20 	call	0x408c	; 0x408c <powerDownSPI()>
  }
    45c0:	df 91       	pop	r29
    45c2:	cf 91       	pop	r28
    45c4:	08 95       	ret

000045c6 <RFM22RegisterBlockSetup(unsigned char const (*) [2])>:


// Configure the radio from a list of register/value pairs in readonly PROGMEM/Flash, terminating with an 0xff register value.
// NOTE: argument is not a pointer into SRAM, it is into PROGMEM!
// Could optimise case where multiple values are for successive RFM22 registers by using burst write.
void RFM22RegisterBlockSetup(const uint8_t registerValues[][2])
    45c6:	cf 93       	push	r28
    45c8:	df 93       	push	r29
    45ca:	ec 01       	movw	r28, r24
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    45cc:	0e 94 60 20 	call	0x40c0	; 0x40c0 <powerUpSPIIfDisabled()>
  for( ; ; )
    {
    const uint8_t reg = pgm_read_byte(&(registerValues[0][0]));
    45d0:	fe 01       	movw	r30, r28
    45d2:	94 91       	lpm	r25, Z+
    const uint8_t val = pgm_read_byte(&(registerValues[0][1]));
    45d4:	21 96       	adiw	r28, 0x01	; 1
    45d6:	fe 01       	movw	r30, r28
    45d8:	24 91       	lpm	r18, Z+
    45da:	21 97       	sbiw	r28, 0x01	; 1
    if(0xff == reg) { break; }
    45dc:	9f 3f       	cpi	r25, 0xFF	; 255
    45de:	69 f0       	breq	.+26     	; 0x45fa <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x34>

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    45e0:	2a 98       	cbi	0x05, 2	; 5
  _RFM22_wr(addr | 0x80); // Force to write.
    45e2:	90 68       	ori	r25, 0x80	; 128

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    45e4:	9e bd       	out	0x2e, r25	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    45e6:	0d b4       	in	r0, 0x2d	; 45
    45e8:	07 fe       	sbrs	r0, 7
    45ea:	fd cf       	rjmp	.-6      	; 0x45e6 <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x20>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    45ec:	2e bd       	out	0x2e, r18	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    45ee:	0d b4       	in	r0, 0x2d	; 45
    45f0:	07 fe       	sbrs	r0, 7
    45f2:	fd cf       	rjmp	.-6      	; 0x45ee <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x28>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    45f4:	2a 9a       	sbi	0x05, 2	; 5
    DEBUG_SERIAL_PRINT_FLASHSTRING(" = 0x");
    DEBUG_SERIAL_PRINTFMT(val, HEX);
    DEBUG_SERIAL_PRINTLN();
#endif
    _RFM22WriteReg8Bit(reg, val);
    ++registerValues;
    45f6:	22 96       	adiw	r28, 0x02	; 2
    45f8:	eb cf       	rjmp	.-42     	; 0x45d0 <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0xa>
    }
  if(neededEnable) { powerDownSPI(); }
    45fa:	88 23       	and	r24, r24
    45fc:	11 f0       	breq	.+4      	; 0x4602 <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x3c>
    45fe:	0e 94 46 20 	call	0x408c	; 0x408c <powerDownSPI()>
  }
    4602:	df 91       	pop	r29
    4604:	cf 91       	pop	r28
    4606:	08 95       	ret

00004608 <RFM22PowerOnInit()>:
void RFM22PowerOnInit()
  {
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22 reset...");
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
    4608:	0e 94 60 20 	call	0x40c0	; 0x40c0 <powerUpSPIIfDisabled()>
    460c:	98 2f       	mov	r25, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    460e:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4610:	87 e8       	ldi	r24, 0x87	; 135
    4612:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4614:	0d b4       	in	r0, 0x2d	; 45
    4616:	07 fe       	sbrs	r0, 7
    4618:	fd cf       	rjmp	.-6      	; 0x4614 <RFM22PowerOnInit()+0xc>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    461a:	80 e8       	ldi	r24, 0x80	; 128
    461c:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    461e:	0d b4       	in	r0, 0x2d	; 45
    4620:	07 fe       	sbrs	r0, 7
    4622:	fd cf       	rjmp	.-6      	; 0x461e <RFM22PowerOnInit()+0x16>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    4624:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    4626:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4628:	87 e8       	ldi	r24, 0x87	; 135
    462a:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    462c:	0d b4       	in	r0, 0x2d	; 45
    462e:	07 fe       	sbrs	r0, 7
    4630:	fd cf       	rjmp	.-6      	; 0x462c <RFM22PowerOnInit()+0x24>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4632:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4634:	0d b4       	in	r0, 0x2d	; 45
    4636:	07 fe       	sbrs	r0, 7
    4638:	fd cf       	rjmp	.-6      	; 0x4634 <RFM22PowerOnInit()+0x2c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    463a:	2a 9a       	sbi	0x05, 2	; 5
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22 reset...");
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
  _RFM22WriteReg8Bit(RFM22REG_OP_CTRL1, RFM22REG_OP_CTRL1_SWRES);
  _RFM22ModeStandby();
  if(neededEnable) { powerDownSPI(); }
    463c:	99 23       	and	r25, r25
    463e:	11 f0       	breq	.+4      	; 0x4644 <RFM22PowerOnInit()+0x3c>
    4640:	0e 94 46 20 	call	0x408c	; 0x408c <powerDownSPI()>
    4644:	08 95       	ret

00004646 <RFM22RSSI()>:
  return(result);
  }

// Get current RSSI.
// Only valid when in RX mode.
uint8_t RFM22RSSI() 
    4646:	1f 93       	push	r17
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    4648:	0e 94 60 20 	call	0x40c0	; 0x40c0 <powerUpSPIIfDisabled()>
    464c:	98 2f       	mov	r25, r24

// Read from 8-bit register on RFM22.
// SPI must already be configured and running.
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
    464e:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    4650:	86 e2       	ldi	r24, 0x26	; 38
    4652:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4654:	0d b4       	in	r0, 0x2d	; 45
    4656:	07 fe       	sbrs	r0, 7
    4658:	fd cf       	rjmp	.-6      	; 0x4654 <RFM22RSSI()+0xe>
  return(SPDR);
    465a:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    465c:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    465e:	0d b4       	in	r0, 0x2d	; 45
    4660:	07 fe       	sbrs	r0, 7
    4662:	fd cf       	rjmp	.-6      	; 0x465e <RFM22RSSI()+0x18>
  return(SPDR);
    4664:	1e b5       	in	r17, 0x2e	; 46
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  const uint8_t result = _RFM22_io(0); // Dummy value...
  _RFM22_DESELECT();
    4666:	2a 9a       	sbi	0x05, 2	; 5
// Only valid when in RX mode.
uint8_t RFM22RSSI() 
  {
  const bool neededEnable = powerUpSPIIfDisabled();
  const uint8_t rssi = _RFM22ReadReg8Bit(RFM22REG_RSSI);
  if(neededEnable) { powerDownSPI(); }
    4668:	99 23       	and	r25, r25
    466a:	11 f0       	breq	.+4      	; 0x4670 <RFM22RSSI()+0x2a>
    466c:	0e 94 46 20 	call	0x408c	; 0x408c <powerDownSPI()>
  return(rssi);
  }
    4670:	81 2f       	mov	r24, r17
    4672:	1f 91       	pop	r17
    4674:	08 95       	ret

00004676 <RFM22ReadStatusBoth()>:
  }

// Read status (both registers) and clear interrupts.
// Status register 1 is returned in the top 8 bits, register 2 in the bottom 8 bits.
// Zero indicates no pending interrupts or other status flags set.
uint16_t RFM22ReadStatusBoth()
    4676:	0f 93       	push	r16
    4678:	1f 93       	push	r17
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    467a:	0e 94 60 20 	call	0x40c0	; 0x40c0 <powerUpSPIIfDisabled()>
    467e:	98 2f       	mov	r25, r24

// Read from 16-bit big-endian register pair.
// The result has the first (lower-numbered) register in the most significant byte.
static uint16_t _RFM22ReadReg16Bit(const uint8_t addr)
{
  _RFM22_SELECT();
    4680:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    4682:	83 e0       	ldi	r24, 0x03	; 3
    4684:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4686:	0d b4       	in	r0, 0x2d	; 45
    4688:	07 fe       	sbrs	r0, 7
    468a:	fd cf       	rjmp	.-6      	; 0x4686 <RFM22ReadStatusBoth()+0x10>
  return(SPDR);
    468c:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    468e:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4690:	0d b4       	in	r0, 0x2d	; 45
    4692:	07 fe       	sbrs	r0, 7
    4694:	fd cf       	rjmp	.-6      	; 0x4690 <RFM22ReadStatusBoth()+0x1a>
  return(SPDR);
    4696:	0e b5       	in	r16, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    4698:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    469a:	0d b4       	in	r0, 0x2d	; 45
    469c:	07 fe       	sbrs	r0, 7
    469e:	fd cf       	rjmp	.-6      	; 0x469a <RFM22ReadStatusBoth()+0x24>
  return(SPDR);
    46a0:	1e b5       	in	r17, 0x2e	; 46
{
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  uint16_t result = ((uint16_t)_RFM22_io(0)) << 8;
  result |= ((uint16_t)_RFM22_io(0));
  _RFM22_DESELECT();
    46a2:	2a 9a       	sbi	0x05, 2	; 5
// Zero indicates no pending interrupts or other status flags set.
uint16_t RFM22ReadStatusBoth()
  {
  const bool neededEnable = powerUpSPIIfDisabled();
  const uint16_t result = _RFM22ReadReg16Bit(RFM22REG_INT_STATUS1);
  if(neededEnable) { powerDownSPI(); }
    46a4:	99 23       	and	r25, r25
    46a6:	11 f0       	breq	.+4      	; 0x46ac <RFM22ReadStatusBoth()+0x36>
    46a8:	0e 94 46 20 	call	0x408c	; 0x408c <powerDownSPI()>
    46ac:	90 2f       	mov	r25, r16
    46ae:	80 e0       	ldi	r24, 0x00	; 0
    46b0:	21 2f       	mov	r18, r17
    46b2:	30 e0       	ldi	r19, 0x00	; 0
    46b4:	28 2b       	or	r18, r24
    46b6:	39 2b       	or	r19, r25
  return(result);
  }
    46b8:	c9 01       	movw	r24, r18
    46ba:	1f 91       	pop	r17
    46bc:	0f 91       	pop	r16
    46be:	08 95       	ret

000046c0 <RFM22ModeStandbyAndClearState()>:
// Enter standby mode (consume least possible power but retain register contents).
// FIFO state and pending interrupts are cleared.
// Typical consumption in standby 450nA (cf 15nA when shut down, 8.5mA TUNE, 18--80mA RX/TX).
void RFM22ModeStandbyAndClearState()
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    46c0:	0e 94 60 20 	call	0x40c0	; 0x40c0 <powerUpSPIIfDisabled()>
    46c4:	98 2f       	mov	r25, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    46c6:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    46c8:	87 e8       	ldi	r24, 0x87	; 135
    46ca:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    46cc:	0d b4       	in	r0, 0x2d	; 45
    46ce:	07 fe       	sbrs	r0, 7
    46d0:	fd cf       	rjmp	.-6      	; 0x46cc <RFM22ModeStandbyAndClearState()+0xc>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    46d2:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    46d4:	0d b4       	in	r0, 0x2d	; 45
    46d6:	07 fe       	sbrs	r0, 7
    46d8:	fd cf       	rjmp	.-6      	; 0x46d4 <RFM22ModeStandbyAndClearState()+0x14>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    46da:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    46dc:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    46de:	88 e8       	ldi	r24, 0x88	; 136
    46e0:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    46e2:	0d b4       	in	r0, 0x2d	; 45
    46e4:	07 fe       	sbrs	r0, 7
    46e6:	fd cf       	rjmp	.-6      	; 0x46e2 <RFM22ModeStandbyAndClearState()+0x22>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    46e8:	83 e0       	ldi	r24, 0x03	; 3
    46ea:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    46ec:	0d b4       	in	r0, 0x2d	; 45
    46ee:	07 fe       	sbrs	r0, 7
    46f0:	fd cf       	rjmp	.-6      	; 0x46ec <RFM22ModeStandbyAndClearState()+0x2c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    46f2:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    46f4:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    46f6:	88 e8       	ldi	r24, 0x88	; 136
    46f8:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    46fa:	0d b4       	in	r0, 0x2d	; 45
    46fc:	07 fe       	sbrs	r0, 7
    46fe:	fd cf       	rjmp	.-6      	; 0x46fa <RFM22ModeStandbyAndClearState()+0x3a>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4700:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4702:	0d b4       	in	r0, 0x2d	; 45
    4704:	07 fe       	sbrs	r0, 7
    4706:	fd cf       	rjmp	.-6      	; 0x4702 <RFM22ModeStandbyAndClearState()+0x42>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    4708:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    470a:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    470c:	85 e8       	ldi	r24, 0x85	; 133
    470e:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4710:	0d b4       	in	r0, 0x2d	; 45
    4712:	07 fe       	sbrs	r0, 7
    4714:	fd cf       	rjmp	.-6      	; 0x4710 <RFM22ModeStandbyAndClearState()+0x50>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4716:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4718:	0d b4       	in	r0, 0x2d	; 45
    471a:	07 fe       	sbrs	r0, 7
    471c:	fd cf       	rjmp	.-6      	; 0x4718 <RFM22ModeStandbyAndClearState()+0x58>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    471e:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4720:	0d b4       	in	r0, 0x2d	; 45
    4722:	07 fe       	sbrs	r0, 7
    4724:	fd cf       	rjmp	.-6      	; 0x4720 <RFM22ModeStandbyAndClearState()+0x60>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    4726:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    4728:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    472a:	83 e8       	ldi	r24, 0x83	; 131
    472c:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    472e:	0d b4       	in	r0, 0x2d	; 45
    4730:	07 fe       	sbrs	r0, 7
    4732:	fd cf       	rjmp	.-6      	; 0x472e <RFM22ModeStandbyAndClearState()+0x6e>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4734:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4736:	0d b4       	in	r0, 0x2d	; 45
    4738:	07 fe       	sbrs	r0, 7
    473a:	fd cf       	rjmp	.-6      	; 0x4736 <RFM22ModeStandbyAndClearState()+0x76>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    473c:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    473e:	0d b4       	in	r0, 0x2d	; 45
    4740:	07 fe       	sbrs	r0, 7
    4742:	fd cf       	rjmp	.-6      	; 0x473e <RFM22ModeStandbyAndClearState()+0x7e>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    4744:	2a 9a       	sbi	0x05, 2	; 5
//  _RFM22WriteReg8Bit(RFM22REG_INT_ENABLE2, 0); // TODO: combine in burst write with previous...
  _RFM22WriteReg16Bit0(RFM22REG_INT_ENABLE1);
  // Clear any interrupts already/still pending...
  _RFM22ClearInterrupts();  
  //_RFM22WriteReg8Bit(0xd, 0x1f); // Drive GPIO2 to ground as output... (Move to general register settings.)
  if(neededEnable) { powerDownSPI(); }
    4746:	99 23       	and	r25, r25
    4748:	11 f0       	breq	.+4      	; 0x474e <RFM22ModeStandbyAndClearState()+0x8e>
    474a:	0e 94 46 20 	call	0x408c	; 0x408c <powerDownSPI()>
    474e:	08 95       	ret

00004750 <RFM22TXFIFO()>:

// Transmit contents of on-chip TX FIFO: caller should revert to low-power standby mode (etc) if required.
// Returns true if packet apparently sent correctly/fully.
// Does not clear TX FIFO (so possible to re-send immediately).
// Note: Reliability possibly helped by early move to 'tune' mode to work other than with default (4MHz) lowish PICAXE clock speeds.
bool RFM22TXFIFO()
    4750:	ff 92       	push	r15
    4752:	0f 93       	push	r16
    4754:	1f 93       	push	r17
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    4756:	0e 94 60 20 	call	0x40c0	; 0x40c0 <powerUpSPIIfDisabled()>
    475a:	f8 2e       	mov	r15, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    475c:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    475e:	85 e8       	ldi	r24, 0x85	; 133
    4760:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4762:	0d b4       	in	r0, 0x2d	; 45
    4764:	07 fe       	sbrs	r0, 7
    4766:	fd cf       	rjmp	.-6      	; 0x4762 <RFM22TXFIFO()+0x12>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4768:	84 e0       	ldi	r24, 0x04	; 4
    476a:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    476c:	0d b4       	in	r0, 0x2d	; 45
    476e:	07 fe       	sbrs	r0, 7
    4770:	fd cf       	rjmp	.-6      	; 0x476c <RFM22TXFIFO()+0x1c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    4772:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    4774:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4776:	86 e8       	ldi	r24, 0x86	; 134
    4778:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    477a:	0d b4       	in	r0, 0x2d	; 45
    477c:	07 fe       	sbrs	r0, 7
    477e:	fd cf       	rjmp	.-6      	; 0x477a <RFM22TXFIFO()+0x2a>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4780:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4782:	0d b4       	in	r0, 0x2d	; 45
    4784:	07 fe       	sbrs	r0, 7
    4786:	fd cf       	rjmp	.-6      	; 0x4782 <RFM22TXFIFO()+0x32>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    4788:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    478a:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    478c:	83 e8       	ldi	r24, 0x83	; 131
    478e:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4790:	0d b4       	in	r0, 0x2d	; 45
    4792:	07 fe       	sbrs	r0, 7
    4794:	fd cf       	rjmp	.-6      	; 0x4790 <RFM22TXFIFO()+0x40>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4796:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4798:	0d b4       	in	r0, 0x2d	; 45
    479a:	07 fe       	sbrs	r0, 7
    479c:	fd cf       	rjmp	.-6      	; 0x4798 <RFM22TXFIFO()+0x48>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    479e:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    47a0:	0d b4       	in	r0, 0x2d	; 45
    47a2:	07 fe       	sbrs	r0, 7
    47a4:	fd cf       	rjmp	.-6      	; 0x47a0 <RFM22TXFIFO()+0x50>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    47a6:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    47a8:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    47aa:	87 e8       	ldi	r24, 0x87	; 135
    47ac:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    47ae:	0d b4       	in	r0, 0x2d	; 45
    47b0:	07 fe       	sbrs	r0, 7
    47b2:	fd cf       	rjmp	.-6      	; 0x47ae <RFM22TXFIFO()+0x5e>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    47b4:	89 e0       	ldi	r24, 0x09	; 9
    47b6:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    47b8:	0d b4       	in	r0, 0x2d	; 45
    47ba:	07 fe       	sbrs	r0, 7
    47bc:	fd cf       	rjmp	.-6      	; 0x47b8 <RFM22TXFIFO()+0x68>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    47be:	2a 9a       	sbi	0x05, 2	; 5
    47c0:	18 e0       	ldi	r17, 0x08	; 8

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    47c2:	03 e0       	ldi	r16, 0x03	; 3
    47c4:	13 c0       	rjmp	.+38     	; 0x47ec <RFM22TXFIFO()+0x9c>
  // Repeately nap until packet sent, with upper bound of ~120ms on TX time in case there is a problem.
  // TX time is ~1.6ms per byte at 5000bps.
  bool result = false; // Usual case is success.
  for(int8_t i = 8; --i >= 0; )
    {
    nap(WDTO_15MS); // Sleep in low power mode for a short time waiting for bits to be sent...
    47c6:	80 e0       	ldi	r24, 0x00	; 0
    47c8:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <nap(signed char)>

// Read from 8-bit register on RFM22.
// SPI must already be configured and running.
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
    47cc:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    47ce:	0e bd       	out	0x2e, r16	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    47d0:	0d b4       	in	r0, 0x2d	; 45
    47d2:	07 fe       	sbrs	r0, 7
    47d4:	fd cf       	rjmp	.-6      	; 0x47d0 <RFM22TXFIFO()+0x80>
  return(SPDR);
    47d6:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    47d8:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    47da:	0d b4       	in	r0, 0x2d	; 45
    47dc:	07 fe       	sbrs	r0, 7
    47de:	fd cf       	rjmp	.-6      	; 0x47da <RFM22TXFIFO()+0x8a>
  return(SPDR);
    47e0:	8e b5       	in	r24, 0x2e	; 46
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  const uint8_t result = _RFM22_io(0); // Dummy value...
  _RFM22_DESELECT();
    47e2:	2a 9a       	sbi	0x05, 2	; 5
  bool result = false; // Usual case is success.
  for(int8_t i = 8; --i >= 0; )
    {
    nap(WDTO_15MS); // Sleep in low power mode for a short time waiting for bits to be sent...
    const uint8_t status = _RFM22ReadReg8Bit(RFM22REG_INT_STATUS1); // TODO: could use nIRQ instead if available.
    if(status & 4) { result = true; break; } // Packet sent!
    47e4:	82 ff       	sbrs	r24, 2
    47e6:	02 c0       	rjmp	.+4      	; 0x47ec <RFM22TXFIFO()+0x9c>
    47e8:	11 e0       	ldi	r17, 0x01	; 1
    47ea:	03 c0       	rjmp	.+6      	; 0x47f2 <RFM22TXFIFO()+0xa2>
  _RFM22ModeTX(); // Enable TX mode and transmit TX FIFO contents.

  // Repeately nap until packet sent, with upper bound of ~120ms on TX time in case there is a problem.
  // TX time is ~1.6ms per byte at 5000bps.
  bool result = false; // Usual case is success.
  for(int8_t i = 8; --i >= 0; )
    47ec:	11 50       	subi	r17, 0x01	; 1
    47ee:	58 f7       	brcc	.-42     	; 0x47c6 <RFM22TXFIFO()+0x76>
    47f0:	10 e0       	ldi	r17, 0x00	; 0
    nap(WDTO_15MS); // Sleep in low power mode for a short time waiting for bits to be sent...
    const uint8_t status = _RFM22ReadReg8Bit(RFM22REG_INT_STATUS1); // TODO: could use nIRQ instead if available.
    if(status & 4) { result = true; break; } // Packet sent!
    }

  if(neededEnable) { powerDownSPI(); }
    47f2:	ff 20       	and	r15, r15
    47f4:	11 f0       	breq	.+4      	; 0x47fa <RFM22TXFIFO()+0xaa>
    47f6:	0e 94 46 20 	call	0x408c	; 0x408c <powerDownSPI()>
  return(result);
  }
    47fa:	81 2f       	mov	r24, r17
    47fc:	1f 91       	pop	r17
    47fe:	0f 91       	pop	r16
    4800:	ff 90       	pop	r15
    4802:	08 95       	ret

00004804 <RFM22CheckConnected()>:
  _RFM22ModeStandby();
  if(neededEnable) { powerDownSPI(); }
  }

// Returns true iff RFM22 (or RFM23) appears to be correctly connected.
bool RFM22CheckConnected()
    4804:	0f 93       	push	r16
    4806:	1f 93       	push	r17
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    4808:	0e 94 60 20 	call	0x40c0	; 0x40c0 <powerUpSPIIfDisabled()>
    480c:	08 2f       	mov	r16, r24

// Read from 8-bit register on RFM22.
// SPI must already be configured and running.
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
    480e:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    4810:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4812:	0d b4       	in	r0, 0x2d	; 45
    4814:	07 fe       	sbrs	r0, 7
    4816:	fd cf       	rjmp	.-6      	; 0x4812 <RFM22CheckConnected()+0xe>
  return(SPDR);
    4818:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    481a:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    481c:	0d b4       	in	r0, 0x2d	; 45
    481e:	07 fe       	sbrs	r0, 7
    4820:	fd cf       	rjmp	.-6      	; 0x481c <RFM22CheckConnected()+0x18>
  return(SPDR);
    4822:	8e b5       	in	r24, 0x2e	; 46
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  const uint8_t result = _RFM22_io(0); // Dummy value...
  _RFM22_DESELECT();
    4824:	2a 9a       	sbi	0x05, 2	; 5
bool RFM22CheckConnected()
  {
  const bool neededEnable = powerUpSPIIfDisabled();
  bool isOK = false;
  const uint8_t rType = _RFM22ReadReg8Bit(0); // May read as 0 if not connected at all.
  if(RFM22_SUPPORTED_DEVICE_TYPE == rType)
    4826:	88 30       	cpi	r24, 0x08	; 8
    4828:	89 f4       	brne	.+34     	; 0x484c <RFM22CheckConnected()+0x48>

// Read from 8-bit register on RFM22.
// SPI must already be configured and running.
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
    482a:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    482c:	81 e0       	ldi	r24, 0x01	; 1
    482e:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4830:	0d b4       	in	r0, 0x2d	; 45
    4832:	07 fe       	sbrs	r0, 7
    4834:	fd cf       	rjmp	.-6      	; 0x4830 <RFM22CheckConnected()+0x2c>
  return(SPDR);
    4836:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    4838:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    483a:	0d b4       	in	r0, 0x2d	; 45
    483c:	07 fe       	sbrs	r0, 7
    483e:	fd cf       	rjmp	.-6      	; 0x483a <RFM22CheckConnected()+0x36>
  return(SPDR);
    4840:	8e b5       	in	r24, 0x2e	; 46
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  const uint8_t result = _RFM22_io(0); // Dummy value...
  _RFM22_DESELECT();
    4842:	2a 9a       	sbi	0x05, 2	; 5
  bool isOK = false;
  const uint8_t rType = _RFM22ReadReg8Bit(0); // May read as 0 if not connected at all.
  if(RFM22_SUPPORTED_DEVICE_TYPE == rType)
    {
    const uint8_t rVersion = _RFM22ReadReg8Bit(1);
    if(RFM22_SUPPORTED_DEVICE_VERSION == rVersion)
    4844:	86 30       	cpi	r24, 0x06	; 6
    4846:	11 f4       	brne	.+4      	; 0x484c <RFM22CheckConnected()+0x48>
    4848:	11 e0       	ldi	r17, 0x01	; 1
    484a:	05 c0       	rjmp	.+10     	; 0x4856 <RFM22CheckConnected()+0x52>
    DEBUG_SERIAL_PRINTFMT(rType, HEX);
    DEBUG_SERIAL_PRINTLN();
    }
#endif
#if 1 && defined(DEBUG)
  if(!isOK) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22 bad"); }
    484c:	8e e9       	ldi	r24, 0x9E	; 158
    484e:	91 e0       	ldi	r25, 0x01	; 1
    4850:	0e 94 28 27 	call	0x4e50	; 0x4e50 <serialPrintlnAndFlush(__FlashStringHelper const*)>
    4854:	10 e0       	ldi	r17, 0x00	; 0
#endif
  if(neededEnable) { powerDownSPI(); }
    4856:	00 23       	and	r16, r16
    4858:	11 f0       	breq	.+4      	; 0x485e <RFM22CheckConnected()+0x5a>
    485a:	0e 94 46 20 	call	0x408c	; 0x408c <powerDownSPI()>
  return(isOK);
  }
    485e:	81 2f       	mov	r24, r17
    4860:	1f 91       	pop	r17
    4862:	0f 91       	pop	r16
    4864:	08 95       	ret

00004866 <eeprom_read_byte>:


/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
    4866:	9c 01       	movw	r18, r24
{
    do {} while (!eeprom_is_ready ());
    4868:	f9 99       	sbic	0x1f, 1	; 31
    486a:	fe cf       	rjmp	.-4      	; 0x4868 <eeprom_read_byte+0x2>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    486c:	32 bd       	out	0x22, r19	; 34
    486e:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    4870:	f8 9a       	sbi	0x1f, 0	; 31
    4872:	80 b5       	in	r24, 0x20	; 32
    return __result;
}
    4874:	08 95       	ret

00004876 <eeprom_write_byte>:
}

/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
    4876:	9c 01       	movw	r18, r24
{
    do {} while (!eeprom_is_ready ());
    4878:	f9 99       	sbic	0x1f, 1	; 31
    487a:	fe cf       	rjmp	.-4      	; 0x4878 <eeprom_write_byte+0x2>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    487c:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    487e:	32 bd       	out	0x22, r19	; 34
    4880:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
    4882:	60 bd       	out	0x20, r22	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    4884:	0f b6       	in	r0, 0x3f	; 63
    4886:	f8 94       	cli
    4888:	fa 9a       	sbi	0x1f, 2	; 31
    488a:	f9 9a       	sbi	0x1f, 1	; 31
    488c:	0f be       	out	0x3f, r0	; 63
}
    488e:	08 95       	ret

00004890 <getMinutesSinceMidnightLT()>:
// Thread-safe and ISR-safe.
#ifndef getMinutesSinceMidnightLT
uint_least16_t getMinutesSinceMidnightLT()
  {
  uint_least16_t result;
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    4890:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4892:	f8 94       	cli
    { result = _minutesSinceMidnightLT; }
    4894:	20 91 6e 03 	lds	r18, 0x036E
    4898:	30 91 6f 03 	lds	r19, 0x036F
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    489c:	8f bf       	out	0x3f, r24	; 63
  return(result);
  }
    489e:	c9 01       	movw	r24, r18
    48a0:	08 95       	ret

000048a2 <getMinutesLT()>:
// Thread-safe and ISR-safe.
#ifndef getMinutesSinceMidnightLT
uint_least16_t getMinutesSinceMidnightLT()
  {
  uint_least16_t result;
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    48a2:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    48a4:	f8 94       	cli
    { result = _minutesSinceMidnightLT; }
    48a6:	80 91 6e 03 	lds	r24, 0x036E
    48aa:	90 91 6f 03 	lds	r25, 0x036F
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    48ae:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    48b0:	6c e3       	ldi	r22, 0x3C	; 60
    48b2:	70 e0       	ldi	r23, 0x00	; 0
    48b4:	0e 94 cc 3d 	call	0x7b98	; 0x7b98 <__udivmodhi4>
#endif

// Get local time minutes from RTC [0,59].
// Relatively slow.
// Thread-safe and ISR-safe.
uint_least8_t getMinutesLT() { return(getMinutesSinceMidnightLT() % 60); }
    48b8:	08 95       	ret

000048ba <getHoursLT()>:
// Thread-safe and ISR-safe.
#ifndef getMinutesSinceMidnightLT
uint_least16_t getMinutesSinceMidnightLT()
  {
  uint_least16_t result;
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    48ba:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    48bc:	f8 94       	cli
    { result = _minutesSinceMidnightLT; }
    48be:	80 91 6e 03 	lds	r24, 0x036E
    48c2:	90 91 6f 03 	lds	r25, 0x036F
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    48c6:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    48c8:	6c e3       	ldi	r22, 0x3C	; 60
    48ca:	70 e0       	ldi	r23, 0x00	; 0
    48cc:	0e 94 cc 3d 	call	0x7b98	; 0x7b98 <__udivmodhi4>
    48d0:	86 2f       	mov	r24, r22
uint_least8_t getMinutesLT() { return(getMinutesSinceMidnightLT() % 60); }

// Get local time hours from RTC [0,23].
// Relatively slow.
// Thread-safe and ISR-safe.
uint_least8_t getHoursLT() { return(getMinutesSinceMidnightLT() / 60); }
    48d2:	08 95       	ret

000048d4 <restoreRTC()>:

// Restore software RTC information from non-volatile (EEPROM) store, if possible.
// Returns true if the persisted data seemed valid and was restored, in full or part.
// To void on average using 15/2 minutes at each reset/restart,
// this starts the internal time a little over half way into the restored 15-minute slot.
bool restoreRTC()
    48d4:	1f 93       	push	r17
  {
  uint8_t persistedValue;
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    48d6:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    48d8:	f8 94       	cli
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    48da:	88 e0       	ldi	r24, 0x08	; 8
    48dc:	90 e0       	ldi	r25, 0x00	; 0
    48de:	63 e3       	ldi	r22, 0x33	; 51
    48e0:	74 e2       	ldi	r23, 0x24	; 36
    48e2:	0e 94 4c 03 	call	0x698	; 0x698 <__eerd_word>
    {
    // Restore the persisted days, though ignore if apparently unset (all 1s).
    const uint16_t days = eeprom_read_word((uint16_t*)EE_START_RTC_DAY_PERSIST);
    if(days != (uint16_t)~0U) { _daysSince1999LT = days; }
    48e6:	2f ef       	ldi	r18, 0xFF	; 255
    48e8:	8f 3f       	cpi	r24, 0xFF	; 255
    48ea:	92 07       	cpc	r25, r18
    48ec:	21 f0       	breq	.+8      	; 0x48f6 <restoreRTC()+0x22>
    48ee:	90 93 71 03 	sts	0x0371, r25
    48f2:	80 93 70 03 	sts	0x0370, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    48f6:	f9 99       	sbic	0x1f, 1	; 31
    48f8:	fe cf       	rjmp	.-4      	; 0x48f6 <restoreRTC()+0x22>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    48fa:	8a e0       	ldi	r24, 0x0A	; 10
    48fc:	90 e0       	ldi	r25, 0x00	; 0
    48fe:	92 bd       	out	0x22, r25	; 34
    4900:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    4902:	f8 9a       	sbi	0x1f, 0	; 31
    4904:	60 b5       	in	r22, 0x20	; 32
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4906:	1f bf       	out	0x3f, r17	; 63
    // Now recover persisted HH:MM value.
    persistedValue = eeprom_read_byte((uint8_t*)EE_START_RTC_HHMM_PERSIST);
    }

  // Abort if value clearly invalid, eg likely an unprogrammed (0xff) byte.
  if(persistedValue >= (24 << 3)) { return(false); }
    4908:	60 3c       	cpi	r22, 0xC0	; 192
    490a:	90 f5       	brcc	.+100    	; 0x4970 <restoreRTC()+0x9c>

  uint_least16_t minutesSinceMidnight = (persistedValue >> 3) * 60;
    490c:	86 2f       	mov	r24, r22
    490e:	90 e0       	ldi	r25, 0x00	; 0
    4910:	23 e0       	ldi	r18, 0x03	; 3
    4912:	95 95       	asr	r25
    4914:	87 95       	ror	r24
    4916:	2a 95       	dec	r18
    4918:	e1 f7       	brne	.-8      	; 0x4912 <restoreRTC()+0x3e>
    491a:	2c e3       	ldi	r18, 0x3C	; 60
    491c:	30 e0       	ldi	r19, 0x00	; 0
    491e:	82 9f       	mul	r24, r18
    4920:	a0 01       	movw	r20, r0
    4922:	83 9f       	mul	r24, r19
    4924:	50 0d       	add	r21, r0
    4926:	92 9f       	mul	r25, r18
    4928:	50 0d       	add	r21, r0
    492a:	11 24       	eor	r1, r1
  minutesSinceMidnight += 8; // Start just over half-way into one quantum to minimise average time lost on restart.
    492c:	9a 01       	movw	r18, r20
    492e:	28 5f       	subi	r18, 0xF8	; 248
    4930:	3f 4f       	sbci	r19, 0xFF	; 255
  const uint8_t lowBits = persistedValue & 7; // Extract quarter-hour bits.
  switch(lowBits)
    4932:	86 2f       	mov	r24, r22
    4934:	87 70       	andi	r24, 0x07	; 7
    4936:	81 30       	cpi	r24, 0x01	; 1
    4938:	59 f0       	breq	.+22     	; 0x4950 <restoreRTC()+0x7c>
    493a:	81 30       	cpi	r24, 0x01	; 1
    493c:	28 f0       	brcs	.+10     	; 0x4948 <restoreRTC()+0x74>
    493e:	83 30       	cpi	r24, 0x03	; 3
    4940:	59 f0       	breq	.+22     	; 0x4958 <restoreRTC()+0x84>
    4942:	87 30       	cpi	r24, 0x07	; 7
    4944:	a9 f4       	brne	.+42     	; 0x4970 <restoreRTC()+0x9c>
    4946:	0b c0       	rjmp	.+22     	; 0x495e <restoreRTC()+0x8a>
    {
    case 0: minutesSinceMidnight += 45; break;
    4948:	9a 01       	movw	r18, r20
    494a:	2b 5c       	subi	r18, 0xCB	; 203
    494c:	3f 4f       	sbci	r19, 0xFF	; 255
    494e:	07 c0       	rjmp	.+14     	; 0x495e <restoreRTC()+0x8a>
    case 1: minutesSinceMidnight += 30; break;
    4950:	9a 01       	movw	r18, r20
    4952:	2a 5d       	subi	r18, 0xDA	; 218
    4954:	3f 4f       	sbci	r19, 0xFF	; 255
    4956:	03 c0       	rjmp	.+6      	; 0x495e <restoreRTC()+0x8a>
    case 3: minutesSinceMidnight += 15; break;
    4958:	9a 01       	movw	r18, r20
    495a:	29 5e       	subi	r18, 0xE9	; 233
    495c:	3f 4f       	sbci	r19, 0xFF	; 255
    default: return(false); // Invalid bit pattern: abort.
    }

  // Set the hours and minutes (atomically).
  // Deliberately leave the seconds unset to avoid units becoming too synchronised with one another, increasing TX collisions, etc.
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    495e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4960:	f8 94       	cli
    { _minutesSinceMidnightLT = minutesSinceMidnight; }
    4962:	30 93 6f 03 	sts	0x036F, r19
    4966:	20 93 6e 03 	sts	0x036E, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    496a:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
    496c:	81 e0       	ldi	r24, 0x01	; 1
    496e:	01 c0       	rjmp	.+2      	; 0x4972 <restoreRTC()+0x9e>

  return(true);
    4970:	80 e0       	ldi	r24, 0x00	; 0
  }
    4972:	1f 91       	pop	r17
    4974:	08 95       	ret

00004976 <persistRTC()>:
// but enough to help avoid the clock slipping too much during (say) a battery change.
// There is no point calling this more than (say) once per minute,
// though it will simply return relatively quickly from redundant calls.
// The RTC data is stored so as not to wear out AVR EEPROM for at least several years.
// IMPLEMENTATION OF THIS AND THE eeprom_smart_xxx_byte() ROUTINES IS CRITICAL TO PERFORMANCE AND LONGEVITY.
void persistRTC()
    4976:	1f 93       	push	r17
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    4978:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    497a:	f8 94       	cli
    {
    uint8_t quarterHours = (_minutesSinceMidnightLT / 15);
    497c:	80 91 6e 03 	lds	r24, 0x036E
    4980:	90 91 6f 03 	lds	r25, 0x036F
    4984:	6f e0       	ldi	r22, 0x0F	; 15
    4986:	70 e0       	ldi	r23, 0x00	; 0
    4988:	0e 94 cc 3d 	call	0x7b98	; 0x7b98 <__udivmodhi4>
    uint8_t targetByte = (quarterHours << 1) & ~7U; // Bit pattern now hhhhh000 where hhhhh is whole hours [0,23].
    498c:	46 2f       	mov	r20, r22
    498e:	44 0f       	add	r20, r20
    4990:	48 7f       	andi	r20, 0xF8	; 248
    switch(quarterHours & 3)
    4992:	70 e0       	ldi	r23, 0x00	; 0
    4994:	63 70       	andi	r22, 0x03	; 3
    4996:	70 70       	andi	r23, 0x00	; 0
    4998:	61 30       	cpi	r22, 0x01	; 1
    499a:	71 05       	cpc	r23, r1
    499c:	39 f0       	breq	.+14     	; 0x49ac <persistRTC()+0x36>
    499e:	62 30       	cpi	r22, 0x02	; 2
    49a0:	71 05       	cpc	r23, r1
    49a2:	31 f0       	breq	.+12     	; 0x49b0 <persistRTC()+0x3a>
    49a4:	67 2b       	or	r22, r23
    49a6:	29 f4       	brne	.+10     	; 0x49b2 <persistRTC()+0x3c>
      {
      case 0: targetByte |= 7; break;
    49a8:	47 60       	ori	r20, 0x07	; 7
    49aa:	03 c0       	rjmp	.+6      	; 0x49b2 <persistRTC()+0x3c>
      case 1: targetByte |= 3; break;
    49ac:	43 60       	ori	r20, 0x03	; 3
    49ae:	01 c0       	rjmp	.+2      	; 0x49b2 <persistRTC()+0x3c>
      case 2: targetByte |= 1; break;
    49b0:	41 60       	ori	r20, 0x01	; 1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    49b2:	f9 99       	sbic	0x1f, 1	; 31
    49b4:	fe cf       	rjmp	.-4      	; 0x49b2 <persistRTC()+0x3c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    49b6:	8a e0       	ldi	r24, 0x0A	; 10
    49b8:	90 e0       	ldi	r25, 0x00	; 0
    49ba:	92 bd       	out	0x22, r25	; 34
    49bc:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    49be:	f8 9a       	sbi	0x1f, 0	; 31
    49c0:	80 b5       	in	r24, 0x20	; 32
      }

    // Update if target HH:MM not already correct.
    const uint8_t persistedValue = eeprom_read_byte((uint8_t*)EE_START_RTC_HHMM_PERSIST);
    if(persistedValue != targetByte)
    49c2:	84 17       	cp	r24, r20
    49c4:	91 f1       	breq	.+100    	; 0x4a2a <persistRTC()+0xb4>
      {
      // Where it is not possible to get the target value just by setting bits to 0,
      // eg for a new hour (ie completely different hour to that in EEPROM and on roll to new hour),
      // then do a full erase/write...
      //if((0 == quarterHours) || ((persistedValue & 0xf8) != (targetByte & 0xf8)))
      if(targetByte != (persistedValue & targetByte))
    49c6:	24 2f       	mov	r18, r20
    49c8:	30 e0       	ldi	r19, 0x00	; 0
    49ca:	90 e0       	ldi	r25, 0x00	; 0
    49cc:	82 23       	and	r24, r18
    49ce:	93 23       	and	r25, r19
    49d0:	28 17       	cp	r18, r24
    49d2:	39 07       	cpc	r19, r25
    49d4:	71 f0       	breq	.+28     	; 0x49f2 <persistRTC()+0x7c>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    49d6:	f9 99       	sbic	0x1f, 1	; 31
    49d8:	fe cf       	rjmp	.-4      	; 0x49d6 <persistRTC()+0x60>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    49da:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    49dc:	8a e0       	ldi	r24, 0x0A	; 10
    49de:	90 e0       	ldi	r25, 0x00	; 0
    49e0:	92 bd       	out	0x22, r25	; 34
    49e2:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    49e4:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    49e6:	0f b6       	in	r0, 0x3f	; 63
    49e8:	f8 94       	cli
    49ea:	fa 9a       	sbi	0x1f, 2	; 31
    49ec:	f9 9a       	sbi	0x1f, 1	; 31
    49ee:	0f be       	out	0x3f, r0	; 63
    49f0:	05 c0       	rjmp	.+10     	; 0x49fc <persistRTC()+0x86>
        { eeprom_write_byte((uint8_t*)EE_START_RTC_HHMM_PERSIST, targetByte); }
      // Else do a write without erase, typically clearing the quarter bits one at a time...
      else
        { eeprom_smart_clear_bits((uint8_t*)EE_START_RTC_HHMM_PERSIST, targetByte); }
    49f2:	8a e0       	ldi	r24, 0x0A	; 10
    49f4:	90 e0       	ldi	r25, 0x00	; 0
    49f6:	64 2f       	mov	r22, r20
    49f8:	0e 94 48 10 	call	0x2090	; 0x2090 <eeprom_smart_clear_bits(unsigned char*, unsigned char)>
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    49fc:	88 e0       	ldi	r24, 0x08	; 8
    49fe:	90 e0       	ldi	r25, 0x00	; 0
    4a00:	63 e3       	ldi	r22, 0x33	; 51
    4a02:	74 e2       	ldi	r23, 0x24	; 36
    4a04:	0e 94 4c 03 	call	0x698	; 0x698 <__eerd_word>

      // Also persist the current days if not up to date.
      const uint16_t days = eeprom_read_word((uint16_t*)EE_START_RTC_DAY_PERSIST);
      if(days != _daysSince1999LT) { eeprom_write_word((uint16_t*)EE_START_RTC_DAY_PERSIST, _daysSince1999LT); }
    4a08:	20 91 70 03 	lds	r18, 0x0370
    4a0c:	30 91 71 03 	lds	r19, 0x0371
    4a10:	82 17       	cp	r24, r18
    4a12:	93 07       	cpc	r25, r19
    4a14:	51 f0       	breq	.+20     	; 0x4a2a <persistRTC()+0xb4>
    4a16:	60 91 70 03 	lds	r22, 0x0370
    4a1a:	70 91 71 03 	lds	r23, 0x0371
    Write a word \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_word (uint16_t *__p, uint16_t __value)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    __eewr_word (__p, __value, eeprom_write_byte);
    4a1e:	88 e0       	ldi	r24, 0x08	; 8
    4a20:	90 e0       	ldi	r25, 0x00	; 0
    4a22:	4b e3       	ldi	r20, 0x3B	; 59
    4a24:	54 e2       	ldi	r21, 0x24	; 36
    4a26:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__eewr_word>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4a2a:	1f bf       	out	0x3f, r17	; 63
      }
    }
  }
    4a2c:	1f 91       	pop	r17
    4a2e:	08 95       	ret

00004a30 <setHoursMinutesLT(int, int)>:
// Will ignore attempts to set bad values and return false in that case.
// Returns true if all OK and the time has been set.
// Does not attempt to set seconds.
// Thread/interrupt safe, but do not call this from an ISR.
// Will persist time to survive reset as neceessary.
bool setHoursMinutesLT(int hours, int minutes)
    4a30:	1f 93       	push	r17
    4a32:	ac 01       	movw	r20, r24
  {
  if((hours < 0) || (hours > 23) || (minutes < 0) || (minutes > 59)) { return(false); } // Invalid time.
    4a34:	88 31       	cpi	r24, 0x18	; 24
    4a36:	91 05       	cpc	r25, r1
    4a38:	10 f5       	brcc	.+68     	; 0x4a7e <setHoursMinutesLT(int, int)+0x4e>
    4a3a:	77 fd       	sbrc	r23, 7
    4a3c:	20 c0       	rjmp	.+64     	; 0x4a7e <setHoursMinutesLT(int, int)+0x4e>
    4a3e:	6c 33       	cpi	r22, 0x3C	; 60
    4a40:	71 05       	cpc	r23, r1
    4a42:	ec f4       	brge	.+58     	; 0x4a7e <setHoursMinutesLT(int, int)+0x4e>
  const uint_least16_t computedMinutesSinceMidnightLT = (uint_least16_t) ((60 * hours) + minutes);
    4a44:	8c e3       	ldi	r24, 0x3C	; 60
    4a46:	90 e0       	ldi	r25, 0x00	; 0
    4a48:	48 9f       	mul	r20, r24
    4a4a:	90 01       	movw	r18, r0
    4a4c:	49 9f       	mul	r20, r25
    4a4e:	30 0d       	add	r19, r0
    4a50:	58 9f       	mul	r21, r24
    4a52:	30 0d       	add	r19, r0
    4a54:	11 24       	eor	r1, r1
    4a56:	26 0f       	add	r18, r22
    4a58:	37 1f       	adc	r19, r23
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    4a5a:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4a5c:	f8 94       	cli
    {
    if(computedMinutesSinceMidnightLT != _minutesSinceMidnightLT)
    4a5e:	80 91 6e 03 	lds	r24, 0x036E
    4a62:	90 91 6f 03 	lds	r25, 0x036F
    4a66:	28 17       	cp	r18, r24
    4a68:	39 07       	cpc	r19, r25
    4a6a:	31 f0       	breq	.+12     	; 0x4a78 <setHoursMinutesLT(int, int)+0x48>
      {
      // If time has changed then store it locally and persist it if need be.
      _minutesSinceMidnightLT = computedMinutesSinceMidnightLT;
    4a6c:	30 93 6f 03 	sts	0x036F, r19
    4a70:	20 93 6e 03 	sts	0x036E, r18
      persistRTC();
    4a74:	0e 94 bb 24 	call	0x4976	; 0x4976 <persistRTC()>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4a78:	1f bf       	out	0x3f, r17	; 63
    __asm__ volatile ("" ::: "memory");
    4a7a:	81 e0       	ldi	r24, 0x01	; 1
    4a7c:	01 c0       	rjmp	.+2      	; 0x4a80 <setHoursMinutesLT(int, int)+0x50>
      }
    }
  return(true); // Assume set and persisted OK.
    4a7e:	80 e0       	ldi	r24, 0x00	; 0
  }
    4a80:	1f 91       	pop	r17
    4a82:	08 95       	ret

00004a84 <getSimpleScheduleOn(unsigned char)>:
// Will usually include a pre-warm time before the actual time set.
// Note that unprogrammed EEPROM value will result in invalid time, ie schedule not set.
//   * which  schedule number, counting from 0
uint_least16_t getSimpleScheduleOn(const uint8_t which)
  {
  if(which >= MAX_SIMPLE_SCHEDULES) { return(~0); } // Invalid schedule number.
    4a84:	82 30       	cpi	r24, 0x02	; 2
    4a86:	d0 f4       	brcc	.+52     	; 0x4abc <getSimpleScheduleOn(unsigned char)+0x38>
  uint8_t startMM;
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    4a88:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4a8a:	f8 94       	cli
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    4a8c:	f9 99       	sbic	0x1f, 1	; 31
    4a8e:	fe cf       	rjmp	.-4      	; 0x4a8c <getSimpleScheduleOn(unsigned char)+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    4a90:	90 e0       	ldi	r25, 0x00	; 0
    4a92:	0c 96       	adiw	r24, 0x0c	; 12
    4a94:	92 bd       	out	0x22, r25	; 34
    4a96:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    4a98:	f8 9a       	sbi	0x1f, 0	; 31
    4a9a:	90 b5       	in	r25, 0x20	; 32
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4a9c:	2f bf       	out	0x3f, r18	; 63
    { startMM = eeprom_read_byte((uint8_t*)(EE_START_SIMPLE_SCHEDULE0_ON + which)); }
  if(startMM > MAX_COMPRESSED_MINS_AFTER_MIDNIGHT) { return(~0); } // No schedule set.
    4a9e:	90 3f       	cpi	r25, 0xF0	; 240
    4aa0:	68 f4       	brcc	.+26     	; 0x4abc <getSimpleScheduleOn(unsigned char)+0x38>
  // Compute start time from stored shedule value.
  uint_least16_t startTime = SIMPLE_SCHEDULE_GRANULARITY_MINS * startMM;
    4aa2:	86 e0       	ldi	r24, 0x06	; 6
    4aa4:	98 9f       	mul	r25, r24
    4aa6:	c0 01       	movw	r24, r0
    4aa8:	11 24       	eor	r1, r1
  const uint8_t windBackM = PREWARM_MINS; // Wind back start time by about 25% of full interval.
  if(windBackM > startTime) { startTime += MINS_PER_DAY; } // Allow for wrap-around at midnight.
    4aaa:	8f 30       	cpi	r24, 0x0F	; 15
    4aac:	91 05       	cpc	r25, r1
    4aae:	10 f4       	brcc	.+4      	; 0x4ab4 <getSimpleScheduleOn(unsigned char)+0x30>
    4ab0:	80 56       	subi	r24, 0x60	; 96
    4ab2:	9a 4f       	sbci	r25, 0xFA	; 250
  startTime -= windBackM;
    4ab4:	9c 01       	movw	r18, r24
    4ab6:	2f 50       	subi	r18, 0x0F	; 15
    4ab8:	30 40       	sbci	r19, 0x00	; 0
    4aba:	02 c0       	rjmp	.+4      	; 0x4ac0 <getSimpleScheduleOn(unsigned char)+0x3c>
  return(startTime);
    4abc:	2f ef       	ldi	r18, 0xFF	; 255
    4abe:	3f ef       	ldi	r19, 0xFF	; 255
  }
    4ac0:	c9 01       	movw	r24, r18
    4ac2:	08 95       	ret

00004ac4 <clearSimpleSchedule(unsigned char)>:
  }

// Clear a simple schedule.
// There will be neither on nor off events from the selected simple schedule once this is called.
//   * which  schedule number, counting from 0
void clearSimpleSchedule(const uint8_t which)
    4ac4:	1f 93       	push	r17
  {
  if(which >= MAX_SIMPLE_SCHEDULES) { return; } // Invalid schedule number.
    4ac6:	82 30       	cpi	r24, 0x02	; 2
    4ac8:	38 f4       	brcc	.+14     	; 0x4ad8 <clearSimpleSchedule(unsigned char)+0x14>
  // Clear the schedule back to 'unprogrammed' values, minimising wear.
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    4aca:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4acc:	f8 94       	cli
    { eeprom_smart_erase_byte((uint8_t*)(EE_START_SIMPLE_SCHEDULE0_ON + which)); }
    4ace:	90 e0       	ldi	r25, 0x00	; 0
    4ad0:	0c 96       	adiw	r24, 0x0c	; 12
    4ad2:	0e 94 34 10 	call	0x2068	; 0x2068 <eeprom_smart_erase_byte(unsigned char*)>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4ad6:	1f bf       	out	0x3f, r17	; 63
  }
    4ad8:	1f 91       	pop	r17
    4ada:	08 95       	ret

00004adc <setSimpleSchedule(unsigned int, unsigned char)>:
//   * startMinutesSinceMidnightLT  is start/on time in minutes after midnight [0,1439]
//   * which  schedule number, counting from 0
// Invalid parameters will be ignored and false returned,
// else this will return true and isSimpleScheduleSet() will return true after this.
// NOTE: over-use of this routine can prematurely wear out the EEPROM.
bool setSimpleSchedule(const uint_least16_t startMinutesSinceMidnightLT, const uint8_t which)
    4adc:	1f 93       	push	r17
  {
  if(which >= MAX_SIMPLE_SCHEDULES) { return(false); } // Invalid schedule number.
    4ade:	62 30       	cpi	r22, 0x02	; 2
    4ae0:	98 f4       	brcc	.+38     	; 0x4b08 <setSimpleSchedule(unsigned int, unsigned char)+0x2c>
  if(startMinutesSinceMidnightLT >= MINS_PER_DAY) { return(false); } // Invalid time.
    4ae2:	25 e0       	ldi	r18, 0x05	; 5
    4ae4:	80 3a       	cpi	r24, 0xA0	; 160
    4ae6:	92 07       	cpc	r25, r18
    4ae8:	78 f4       	brcc	.+30     	; 0x4b08 <setSimpleSchedule(unsigned int, unsigned char)+0x2c>

  // Set the schedule, minimising wear.
  const uint8_t startMM = startMinutesSinceMidnightLT / SIMPLE_SCHEDULE_GRANULARITY_MINS; // Round down...
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    4aea:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4aec:	f8 94       	cli
    { eeprom_smart_update_byte((uint8_t*)(EE_START_SIMPLE_SCHEDULE0_ON + which), startMM); }
    4aee:	26 2f       	mov	r18, r22
    4af0:	30 e0       	ldi	r19, 0x00	; 0
    4af2:	66 e0       	ldi	r22, 0x06	; 6
    4af4:	70 e0       	ldi	r23, 0x00	; 0
    4af6:	0e 94 cc 3d 	call	0x7b98	; 0x7b98 <__udivmodhi4>
    4afa:	c9 01       	movw	r24, r18
    4afc:	0c 96       	adiw	r24, 0x0c	; 12
    4afe:	0e 94 5e 10 	call	0x20bc	; 0x20bc <eeprom_smart_update_byte(unsigned char*, unsigned char)>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4b02:	1f bf       	out	0x3f, r17	; 63
    __asm__ volatile ("" ::: "memory");
    4b04:	81 e0       	ldi	r24, 0x01	; 1
    4b06:	01 c0       	rjmp	.+2      	; 0x4b0a <setSimpleSchedule(unsigned int, unsigned char)+0x2e>
  return(true); // Assume EEPROM programmed OK...
    4b08:	80 e0       	ldi	r24, 0x00	; 0
  }
    4b0a:	1f 91       	pop	r17
    4b0c:	08 95       	ret

00004b0e <getSimpleScheduleOff(unsigned char)>:
  }

// Get the simple/primary schedule off time, as minutes after midnight [0,1439]; invalid (eg ~0) if none set.
// This is based on specifed start time and some element of the current eco/comfort bias.
//   * which  schedule number, counting from 0
uint_least16_t getSimpleScheduleOff(const uint8_t which)
    4b0e:	cf 93       	push	r28
    4b10:	df 93       	push	r29
  {
  const uint_least16_t startMins = getSimpleScheduleOn(which);
    4b12:	0e 94 42 25 	call	0x4a84	; 0x4a84 <getSimpleScheduleOn(unsigned char)>
    4b16:	ec 01       	movw	r28, r24
  if(startMins == (uint_least16_t)~0) { return(~0); }
    4b18:	8f ef       	ldi	r24, 0xFF	; 255
    4b1a:	cf 3f       	cpi	r28, 0xFF	; 255
    4b1c:	d8 07       	cpc	r29, r24
    4b1e:	19 f4       	brne	.+6      	; 0x4b26 <getSimpleScheduleOff(unsigned char)+0x18>
    4b20:	2f ef       	ldi	r18, 0xFF	; 255
    4b22:	3f ef       	ldi	r19, 0xFF	; 255
    4b24:	16 c0       	rjmp	.+44     	; 0x4b52 <getSimpleScheduleOff(unsigned char)+0x44>
  {
//  // Simple and fast binary choice.
//  return(hasEcoBias() ? LEARNED_ON_PERIOD_M : LEARNED_ON_PERIOD_COMFORT_M);

  // Three-way split based on current WARM target temperature.
  const uint8_t wt = getWARMTargetC();
    4b26:	0e 94 cb 03 	call	0x796	; 0x796 <getWARMTargetC()>
  if(isEcoTemperature(wt)) { return(LEARNED_ON_PERIOD_M); }
    4b2a:	82 31       	cpi	r24, 0x12	; 18
    4b2c:	10 f4       	brcc	.+4      	; 0x4b32 <getSimpleScheduleOff(unsigned char)+0x24>
    4b2e:	8c e3       	ldi	r24, 0x3C	; 60
    4b30:	05 c0       	rjmp	.+10     	; 0x4b3c <getSimpleScheduleOff(unsigned char)+0x2e>
  else if(isComfortTemperature(wt)) { return(LEARNED_ON_PERIOD_COMFORT_M); }
    4b32:	85 31       	cpi	r24, 0x15	; 21
    4b34:	10 f4       	brcc	.+4      	; 0x4b3a <getSimpleScheduleOff(unsigned char)+0x2c>
    4b36:	8a e5       	ldi	r24, 0x5A	; 90
    4b38:	01 c0       	rjmp	.+2      	; 0x4b3c <getSimpleScheduleOff(unsigned char)+0x2e>
    4b3a:	88 e7       	ldi	r24, 0x78	; 120
uint_least16_t getSimpleScheduleOff(const uint8_t which)
  {
  const uint_least16_t startMins = getSimpleScheduleOn(which);
  if(startMins == (uint_least16_t)~0) { return(~0); }
  // Compute end from start, allowing for wrap-around at midnight.
  uint_least16_t endTime = startMins + PREWARM_MINS + onTime();
    4b3c:	9e 01       	movw	r18, r28
    4b3e:	21 5f       	subi	r18, 0xF1	; 241
    4b40:	3f 4f       	sbci	r19, 0xFF	; 255
    4b42:	28 0f       	add	r18, r24
    4b44:	31 1d       	adc	r19, r1
  if(endTime >= MINS_PER_DAY) { endTime -= MINS_PER_DAY; } // Allow for wrap-around at midnight.
    4b46:	85 e0       	ldi	r24, 0x05	; 5
    4b48:	20 3a       	cpi	r18, 0xA0	; 160
    4b4a:	38 07       	cpc	r19, r24
    4b4c:	10 f0       	brcs	.+4      	; 0x4b52 <getSimpleScheduleOff(unsigned char)+0x44>
    4b4e:	20 5a       	subi	r18, 0xA0	; 160
    4b50:	35 40       	sbci	r19, 0x05	; 5
  return(endTime);
  }
    4b52:	c9 01       	movw	r24, r18
    4b54:	df 91       	pop	r29
    4b56:	cf 91       	pop	r28
    4b58:	08 95       	ret

00004b5a <isAnyScheduleOnWARMSoon()>:
// True iff any schedule is due 'on'/'WARM' soon even when schedules overlap.
// May be relatively slow/expensive.
// Can be used to allow room to be brought up to at least a set-back temperature
// if very cold when a WARM period is due soon (to help ensure that WARM target is met on time).
// In unit-test override mode is true for soon, false for now/off.
bool isAnyScheduleOnWARMSoon()
    4b5a:	0f 93       	push	r16
    4b5c:	1f 93       	push	r17
    4b5e:	cf 93       	push	r28
    4b60:	df 93       	push	r29
    case _soUT_soon: return(true);
    case _soUT_now: return(false);
    }
#endif

  const uint_least16_t mm0 = getMinutesSinceMidnightLT() + PREPREWARM_MINS; // Look forward...
    4b62:	0e 94 48 24 	call	0x4890	; 0x4890 <getMinutesSinceMidnightLT()>
    4b66:	9c 01       	movw	r18, r24
    4b68:	23 5d       	subi	r18, 0xD3	; 211
    4b6a:	3f 4f       	sbci	r19, 0xFF	; 255
  const uint_least16_t mm = (mm0 >= MINS_PER_DAY) ? (mm0 - MINS_PER_DAY) : mm0;
    4b6c:	45 e0       	ldi	r20, 0x05	; 5
    4b6e:	20 3a       	cpi	r18, 0xA0	; 160
    4b70:	34 07       	cpc	r19, r20
    4b72:	10 f4       	brcc	.+4      	; 0x4b78 <isAnyScheduleOnWARMSoon()+0x1e>
    4b74:	89 01       	movw	r16, r18
    4b76:	03 c0       	rjmp	.+6      	; 0x4b7e <isAnyScheduleOnWARMSoon()+0x24>
    4b78:	8c 01       	movw	r16, r24
    4b7a:	03 57       	subi	r16, 0x73	; 115
    4b7c:	15 40       	sbci	r17, 0x05	; 5

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    4b7e:	80 e0       	ldi	r24, 0x00	; 0
    4b80:	0e 94 42 25 	call	0x4a84	; 0x4a84 <getSimpleScheduleOn(unsigned char)>
    4b84:	ec 01       	movw	r28, r24
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    4b86:	08 17       	cp	r16, r24
    4b88:	19 07       	cpc	r17, r25
    4b8a:	68 f0       	brcs	.+26     	; 0x4ba6 <isAnyScheduleOnWARMSoon()+0x4c>
    uint_least16_t e = getSimpleScheduleOff(which);
    4b8c:	80 e0       	ldi	r24, 0x00	; 0
    4b8e:	0e 94 87 25 	call	0x4b0e	; 0x4b0e <getSimpleScheduleOff(unsigned char)>
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    4b92:	8c 17       	cp	r24, r28
    4b94:	9d 07       	cpc	r25, r29
    4b96:	20 f0       	brcs	.+8      	; 0x4ba0 <isAnyScheduleOnWARMSoon()+0x46>
    if(mm < e) { return(true); }
    4b98:	08 17       	cp	r16, r24
    4b9a:	19 07       	cpc	r17, r25
    4b9c:	20 f4       	brcc	.+8      	; 0x4ba6 <isAnyScheduleOnWARMSoon()+0x4c>
    4b9e:	17 c0       	rjmp	.+46     	; 0x4bce <isAnyScheduleOnWARMSoon()+0x74>
  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    uint_least16_t e = getSimpleScheduleOff(which);
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    4ba0:	80 56       	subi	r24, 0x60	; 96
    4ba2:	9a 4f       	sbci	r25, 0xFA	; 250
    4ba4:	f9 cf       	rjmp	.-14     	; 0x4b98 <isAnyScheduleOnWARMSoon()+0x3e>
  const uint_least16_t mm0 = getMinutesSinceMidnightLT() + PREPREWARM_MINS; // Look forward...
  const uint_least16_t mm = (mm0 >= MINS_PER_DAY) ? (mm0 - MINS_PER_DAY) : mm0;

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    4ba6:	81 e0       	ldi	r24, 0x01	; 1
    4ba8:	0e 94 42 25 	call	0x4a84	; 0x4a84 <getSimpleScheduleOn(unsigned char)>
    4bac:	ec 01       	movw	r28, r24
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    4bae:	08 17       	cp	r16, r24
    4bb0:	19 07       	cpc	r17, r25
    4bb2:	58 f0       	brcs	.+22     	; 0x4bca <isAnyScheduleOnWARMSoon()+0x70>
    uint_least16_t e = getSimpleScheduleOff(which);
    4bb4:	81 e0       	ldi	r24, 0x01	; 1
    4bb6:	0e 94 87 25 	call	0x4b0e	; 0x4b0e <getSimpleScheduleOff(unsigned char)>
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    4bba:	8c 17       	cp	r24, r28
    4bbc:	9d 07       	cpc	r25, r29
    4bbe:	10 f4       	brcc	.+4      	; 0x4bc4 <isAnyScheduleOnWARMSoon()+0x6a>
    4bc0:	80 56       	subi	r24, 0x60	; 96
    4bc2:	9a 4f       	sbci	r25, 0xFA	; 250
    if(mm < e) { return(true); }
    4bc4:	08 17       	cp	r16, r24
    4bc6:	19 07       	cpc	r17, r25
    4bc8:	10 f0       	brcs	.+4      	; 0x4bce <isAnyScheduleOnWARMSoon()+0x74>
    4bca:	80 e0       	ldi	r24, 0x00	; 0
    4bcc:	01 c0       	rjmp	.+2      	; 0x4bd0 <isAnyScheduleOnWARMSoon()+0x76>
#endif

  const uint_least16_t mm0 = getMinutesSinceMidnightLT() + PREPREWARM_MINS; // Look forward...
  const uint_least16_t mm = (mm0 >= MINS_PER_DAY) ? (mm0 - MINS_PER_DAY) : mm0;

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    4bce:	81 e0       	ldi	r24, 0x01	; 1
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    if(mm < e) { return(true); }
    }

  return(false);
  }
    4bd0:	df 91       	pop	r29
    4bd2:	cf 91       	pop	r28
    4bd4:	1f 91       	pop	r17
    4bd6:	0f 91       	pop	r16
    4bd8:	08 95       	ret

00004bda <isAnyScheduleOnWARMNow()>:
// True iff any schedule is currently 'on'/'WARM' even when schedules overlap.
// May be relatively slow/expensive.
// Can be used to suppress all 'off' activity except for the final one.
// Can be used to suppress set-backs during on times.
// In unit-test override mode is true for now, false for soon/off.
bool isAnyScheduleOnWARMNow()
    4bda:	0f 93       	push	r16
    4bdc:	1f 93       	push	r17
    4bde:	cf 93       	push	r28
    4be0:	df 93       	push	r29
    case _soUT_soon: return(false);
    case _soUT_now: return(true);
    }
#endif

  const uint_least16_t mm = getMinutesSinceMidnightLT();
    4be2:	0e 94 48 24 	call	0x4890	; 0x4890 <getMinutesSinceMidnightLT()>
    4be6:	8c 01       	movw	r16, r24

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    4be8:	80 e0       	ldi	r24, 0x00	; 0
    4bea:	0e 94 42 25 	call	0x4a84	; 0x4a84 <getSimpleScheduleOn(unsigned char)>
    4bee:	ec 01       	movw	r28, r24
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    4bf0:	08 17       	cp	r16, r24
    4bf2:	19 07       	cpc	r17, r25
    4bf4:	68 f0       	brcs	.+26     	; 0x4c10 <isAnyScheduleOnWARMNow()+0x36>
    uint_least16_t e = getSimpleScheduleOff(which);
    4bf6:	80 e0       	ldi	r24, 0x00	; 0
    4bf8:	0e 94 87 25 	call	0x4b0e	; 0x4b0e <getSimpleScheduleOff(unsigned char)>
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    4bfc:	8c 17       	cp	r24, r28
    4bfe:	9d 07       	cpc	r25, r29
    4c00:	20 f0       	brcs	.+8      	; 0x4c0a <isAnyScheduleOnWARMNow()+0x30>
    if(mm < e) { return(true); }
    4c02:	08 17       	cp	r16, r24
    4c04:	19 07       	cpc	r17, r25
    4c06:	20 f4       	brcc	.+8      	; 0x4c10 <isAnyScheduleOnWARMNow()+0x36>
    4c08:	17 c0       	rjmp	.+46     	; 0x4c38 <isAnyScheduleOnWARMNow()+0x5e>
  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    uint_least16_t e = getSimpleScheduleOff(which);
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    4c0a:	80 56       	subi	r24, 0x60	; 96
    4c0c:	9a 4f       	sbci	r25, 0xFA	; 250
    4c0e:	f9 cf       	rjmp	.-14     	; 0x4c02 <isAnyScheduleOnWARMNow()+0x28>

  const uint_least16_t mm = getMinutesSinceMidnightLT();

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    4c10:	81 e0       	ldi	r24, 0x01	; 1
    4c12:	0e 94 42 25 	call	0x4a84	; 0x4a84 <getSimpleScheduleOn(unsigned char)>
    4c16:	ec 01       	movw	r28, r24
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    4c18:	08 17       	cp	r16, r24
    4c1a:	19 07       	cpc	r17, r25
    4c1c:	58 f0       	brcs	.+22     	; 0x4c34 <isAnyScheduleOnWARMNow()+0x5a>
    uint_least16_t e = getSimpleScheduleOff(which);
    4c1e:	81 e0       	ldi	r24, 0x01	; 1
    4c20:	0e 94 87 25 	call	0x4b0e	; 0x4b0e <getSimpleScheduleOff(unsigned char)>
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    4c24:	8c 17       	cp	r24, r28
    4c26:	9d 07       	cpc	r25, r29
    4c28:	10 f4       	brcc	.+4      	; 0x4c2e <isAnyScheduleOnWARMNow()+0x54>
    4c2a:	80 56       	subi	r24, 0x60	; 96
    4c2c:	9a 4f       	sbci	r25, 0xFA	; 250
    if(mm < e) { return(true); }
    4c2e:	08 17       	cp	r16, r24
    4c30:	19 07       	cpc	r17, r25
    4c32:	10 f0       	brcs	.+4      	; 0x4c38 <isAnyScheduleOnWARMNow()+0x5e>
    4c34:	80 e0       	ldi	r24, 0x00	; 0
    4c36:	01 c0       	rjmp	.+2      	; 0x4c3a <isAnyScheduleOnWARMNow()+0x60>
    }
#endif

  const uint_least16_t mm = getMinutesSinceMidnightLT();

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    4c38:	81 e0       	ldi	r24, 0x01	; 1
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    if(mm < e) { return(true); }
    }

  return(false);
  }
    4c3a:	df 91       	pop	r29
    4c3c:	cf 91       	pop	r28
    4c3e:	1f 91       	pop	r17
    4c40:	0f 91       	pop	r16
    4c42:	08 95       	ret

00004c44 <getStatsTXLevel()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    4c44:	f9 99       	sbic	0x1f, 1	; 31
    4c46:	fe cf       	rjmp	.-4      	; 0x4c44 <getStatsTXLevel()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    4c48:	8c e1       	ldi	r24, 0x1C	; 28
    4c4a:	90 e0       	ldi	r25, 0x00	; 0
    4c4c:	92 bd       	out	0x22, r25	; 34
    4c4e:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    4c50:	f8 9a       	sbi	0x1f, 0	; 31
    4c52:	80 b5       	in	r24, 0x20	; 32


// Get the current stats transmission level (for data outbound from this node).
// May not exactly match enumerated levels; use inequalities.
// Not thread-/ISR- safe.
stats_TX_level getStatsTXLevel() { return((stats_TX_level)eeprom_read_byte((uint8_t *)EE_START_STATS_TX_ENABLE)); }
    4c54:	90 e0       	ldi	r25, 0x00	; 0
    4c56:	08 95       	ret

00004c58 <addEntropyToPool(unsigned char, unsigned char)>:
//   * estBits estimated number of truely securely random bits in range [0,8].
// Not thread-/ISR- safe.
void addEntropyToPool(uint8_t data, uint8_t estBits)
  {
  // TODO: no real entropy pool yet.
  seedRNG8(data, cycleCountCPU(), getSubCycleTime());
    4c58:	66 b5       	in	r22, 0x26	; 38
    4c5a:	40 91 b2 00 	lds	r20, 0x00B2
    4c5e:	0e 94 9e 21 	call	0x433c	; 0x433c <seedRNG8(unsigned char, unsigned char, unsigned char)>
  }
    4c62:	08 95       	ret

00004c64 <getSecureRandomByte()>:
// Generate 'secure' new random byte.
// This should be essentially all entropy and unguessable.
// Likely to be slow and may force some peripheral I/O.
// Runtime details are likely to be intimately dependent on hardware implementation.
// Not thread-/ISR- safe.
uint8_t getSecureRandomByte()
    4c64:	0f 93       	push	r16
    4c66:	1f 93       	push	r17
    4c68:	df 93       	push	r29
    4c6a:	cf 93       	push	r28
    4c6c:	0f 92       	push	r0
    4c6e:	cd b7       	in	r28, 0x3d	; 61
    4c70:	de b7       	in	r29, 0x3e	; 62
  {
  // Use various real noise sources and whiten with PRNG and other counters.
  // Mix the bits also to help ensure good distribution.
  uint8_t w1 = clockJitterEntropyByte(); // Real noise.
    4c72:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <clockJitterEntropyByte()>
  w1 ^= (w1 << 4); // Mix.
    4c76:	08 2f       	mov	r16, r24
    4c78:	02 95       	swap	r16
    4c7a:	00 7f       	andi	r16, 0xF0	; 240
    4c7c:	08 27       	eor	r16, r24
  w1 ^= noisyADCRead(); // Real noise.
    4c7e:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <noisyADCRead()>
    4c82:	08 27       	eor	r16, r24
  w1 ^= (w1 >> 4); // Mix.
    4c84:	10 2f       	mov	r17, r16
    4c86:	12 95       	swap	r17
    4c88:	1f 70       	andi	r17, 0x0F	; 15
    4c8a:	10 27       	eor	r17, r16
  const uint8_t v = w1;
    4c8c:	19 83       	std	Y+1, r17	; 0x01
  w1 ^= randRNG8(); // Whiten.
    4c8e:	0e 94 b9 21 	call	0x4372	; 0x4372 <randRNG8()>
    4c92:	18 27       	eor	r17, r24
  w1 ^= (w1 << 3); // Mix.
    4c94:	81 2f       	mov	r24, r17
    4c96:	88 0f       	add	r24, r24
    4c98:	88 0f       	add	r24, r24
    4c9a:	88 0f       	add	r24, r24
    4c9c:	81 27       	eor	r24, r17
  w1 ^=  _crc_ibutton_update(cycleCountCPU() ^ (uint8_t)(intptr_t)&v, ++count8 - v); // Whiten.
    4c9e:	96 b5       	in	r25, 0x26	; 38
    4ca0:	40 91 72 03 	lds	r20, 0x0372
    4ca4:	4f 5f       	subi	r20, 0xFF	; 255
    4ca6:	40 93 72 03 	sts	0x0372, r20
		"	brtc	2f" "\n\t"
		"	eor	%0, %2" "\n\t"
		"2:	dec	%1" "\n\t"
		"	brne	1b" "\n\t"
		: "=r" (__crc), "=d" (__i), "=d" (__pattern)
		: "0" (__crc), "r" (__data));
    4caa:	9e 01       	movw	r18, r28
    4cac:	2f 5f       	subi	r18, 0xFF	; 255
    4cae:	3f 4f       	sbci	r19, 0xFF	; 255
    4cb0:	92 27       	eor	r25, r18
    4cb2:	29 81       	ldd	r18, Y+1	; 0x01
    4cb4:	42 1b       	sub	r20, r18
    4cb6:	94 27       	eor	r25, r20
    4cb8:	28 e0       	ldi	r18, 0x08	; 8
    4cba:	3c e8       	ldi	r19, 0x8C	; 140
    4cbc:	90 fb       	bst	r25, 0
    4cbe:	96 95       	lsr	r25
    4cc0:	0e f4       	brtc	.+2      	; 0x4cc4 <getSecureRandomByte()+0x60>
    4cc2:	93 27       	eor	r25, r19
    4cc4:	2a 95       	dec	r18
    4cc6:	d1 f7       	brne	.-12     	; 0x4cbc <getSecureRandomByte()+0x58>
  return(w1);
  }
    4cc8:	89 27       	eor	r24, r25
    4cca:	0f 90       	pop	r0
    4ccc:	cf 91       	pop	r28
    4cce:	df 91       	pop	r29
    4cd0:	1f 91       	pop	r17
    4cd2:	0f 91       	pop	r16
    4cd4:	08 95       	ret

00004cd6 <_debug_serial_timestamp()>:


#ifdef DEBUG // Don't emit debug-support code unless in DEBUG.

// Print timestamp with no newline in format: MinutesSinceMidnight:Seconds:SubCycleTime
void _debug_serial_timestamp()
    4cd6:	ff 92       	push	r15
    4cd8:	0f 93       	push	r16
    4cda:	1f 93       	push	r17
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    4cdc:	0e 94 19 21 	call	0x4232	; 0x4232 <powerUpSerialIfDisabled()>
    4ce0:	f8 2e       	mov	r15, r24
  // Grab time values ASAP, fastest-incrementing first.
  // TODO: could lock out interrupts to capture atomically.
  const uint8_t ss = getSubCycleTime();
    4ce2:	00 91 b2 00 	lds	r16, 0x00B2
  const uint8_t s = getSecondsLT();
    4ce6:	10 91 6d 03 	lds	r17, 0x036D
  const uint16_t m = getMinutesSinceMidnightLT();
    4cea:	0e 94 48 24 	call	0x4890	; 0x4890 <getMinutesSinceMidnightLT()>
    4cee:	bc 01       	movw	r22, r24
  Serial.print(m);
    4cf0:	87 e1       	ldi	r24, 0x17	; 23
    4cf2:	95 e0       	ldi	r25, 0x05	; 5
    4cf4:	4a e0       	ldi	r20, 0x0A	; 10
    4cf6:	50 e0       	ldi	r21, 0x00	; 0
    4cf8:	0e 94 24 3c 	call	0x7848	; 0x7848 <Print::print(unsigned int, int)>
  Serial.print(':'); Serial.print(s);
    4cfc:	87 e1       	ldi	r24, 0x17	; 23
    4cfe:	95 e0       	ldi	r25, 0x05	; 5
    4d00:	6a e3       	ldi	r22, 0x3A	; 58
    4d02:	0e 94 59 3b 	call	0x76b2	; 0x76b2 <Print::print(char)>
    4d06:	87 e1       	ldi	r24, 0x17	; 23
    4d08:	95 e0       	ldi	r25, 0x05	; 5
    4d0a:	61 2f       	mov	r22, r17
    4d0c:	4a e0       	ldi	r20, 0x0A	; 10
    4d0e:	50 e0       	ldi	r21, 0x00	; 0
    4d10:	0e 94 35 3c 	call	0x786a	; 0x786a <Print::print(unsigned char, int)>
  Serial.print(':'); Serial.print(ss);
    4d14:	87 e1       	ldi	r24, 0x17	; 23
    4d16:	95 e0       	ldi	r25, 0x05	; 5
    4d18:	6a e3       	ldi	r22, 0x3A	; 58
    4d1a:	0e 94 59 3b 	call	0x76b2	; 0x76b2 <Print::print(char)>
    4d1e:	87 e1       	ldi	r24, 0x17	; 23
    4d20:	95 e0       	ldi	r25, 0x05	; 5
    4d22:	60 2f       	mov	r22, r16
    4d24:	4a e0       	ldi	r20, 0x0A	; 10
    4d26:	50 e0       	ldi	r21, 0x00	; 0
    4d28:	0e 94 35 3c 	call	0x786a	; 0x786a <Print::print(unsigned char, int)>
  _flush();
    4d2c:	0e 94 04 21 	call	0x4208	; 0x4208 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    4d30:	ff 20       	and	r15, r15
    4d32:	11 f0       	breq	.+4      	; 0x4d38 <_debug_serial_timestamp()+0x62>
    4d34:	0e 94 ce 20 	call	0x419c	; 0x419c <powerDownSerial()>
  }
    4d38:	1f 91       	pop	r17
    4d3a:	0f 91       	pop	r16
    4d3c:	ff 90       	pop	r15
    4d3e:	08 95       	ret

00004d40 <serialPrintAndFlush(unsigned int, int)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) number to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(const unsigned u, const int fmt)
    4d40:	df 92       	push	r13
    4d42:	ef 92       	push	r14
    4d44:	ff 92       	push	r15
    4d46:	0f 93       	push	r16
    4d48:	1f 93       	push	r17
    4d4a:	8c 01       	movw	r16, r24
    4d4c:	7b 01       	movw	r14, r22
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    4d4e:	0e 94 19 21 	call	0x4232	; 0x4232 <powerUpSerialIfDisabled()>
    4d52:	d8 2e       	mov	r13, r24
  // Send the character.
  Serial.print(u, fmt);
    4d54:	87 e1       	ldi	r24, 0x17	; 23
    4d56:	95 e0       	ldi	r25, 0x05	; 5
    4d58:	b8 01       	movw	r22, r16
    4d5a:	a7 01       	movw	r20, r14
    4d5c:	0e 94 24 3c 	call	0x7848	; 0x7848 <Print::print(unsigned int, int)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    4d60:	0e 94 04 21 	call	0x4208	; 0x4208 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    4d64:	dd 20       	and	r13, r13
    4d66:	11 f0       	breq	.+4      	; 0x4d6c <serialPrintAndFlush(unsigned int, int)+0x2c>
    4d68:	0e 94 ce 20 	call	0x419c	; 0x419c <powerDownSerial()>
  }
    4d6c:	1f 91       	pop	r17
    4d6e:	0f 91       	pop	r16
    4d70:	ff 90       	pop	r15
    4d72:	ef 90       	pop	r14
    4d74:	df 90       	pop	r13
    4d76:	08 95       	ret

00004d78 <serialPrintAndFlush(char)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) character to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(const char c)
    4d78:	0f 93       	push	r16
    4d7a:	1f 93       	push	r17
    4d7c:	18 2f       	mov	r17, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    4d7e:	0e 94 19 21 	call	0x4232	; 0x4232 <powerUpSerialIfDisabled()>
    4d82:	08 2f       	mov	r16, r24
  // Send the character.
  Serial.print(c);
    4d84:	87 e1       	ldi	r24, 0x17	; 23
    4d86:	95 e0       	ldi	r25, 0x05	; 5
    4d88:	61 2f       	mov	r22, r17
    4d8a:	0e 94 59 3b 	call	0x76b2	; 0x76b2 <Print::print(char)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    4d8e:	0e 94 04 21 	call	0x4208	; 0x4208 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    4d92:	00 23       	and	r16, r16
    4d94:	11 f0       	breq	.+4      	; 0x4d9a <serialPrintAndFlush(char)+0x22>
    4d96:	0e 94 ce 20 	call	0x419c	; 0x419c <powerDownSerial()>
  }
    4d9a:	1f 91       	pop	r17
    4d9c:	0f 91       	pop	r16
    4d9e:	08 95       	ret

00004da0 <serialPrintlnAndFlush()>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write line-end to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintlnAndFlush()
    4da0:	1f 93       	push	r17
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    4da2:	0e 94 19 21 	call	0x4232	; 0x4232 <powerUpSerialIfDisabled()>
    4da6:	18 2f       	mov	r17, r24
  // Send the text.
  Serial.println();
    4da8:	87 e1       	ldi	r24, 0x17	; 23
    4daa:	95 e0       	ldi	r25, 0x05	; 5
    4dac:	0e 94 61 3b 	call	0x76c2	; 0x76c2 <Print::println()>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    4db0:	0e 94 04 21 	call	0x4208	; 0x4208 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    4db4:	11 23       	and	r17, r17
    4db6:	11 f0       	breq	.+4      	; 0x4dbc <serialPrintlnAndFlush()+0x1c>
    4db8:	0e 94 ce 20 	call	0x419c	; 0x419c <powerDownSerial()>
  }
    4dbc:	1f 91       	pop	r17
    4dbe:	08 95       	ret

00004dc0 <serialPrintAndFlush(int, int)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) number to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(const int i, const int fmt)
    4dc0:	df 92       	push	r13
    4dc2:	ef 92       	push	r14
    4dc4:	ff 92       	push	r15
    4dc6:	0f 93       	push	r16
    4dc8:	1f 93       	push	r17
    4dca:	8c 01       	movw	r16, r24
    4dcc:	7b 01       	movw	r14, r22
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    4dce:	0e 94 19 21 	call	0x4232	; 0x4232 <powerUpSerialIfDisabled()>
    4dd2:	d8 2e       	mov	r13, r24
  // Send the character.
  Serial.print(i, fmt);
    4dd4:	87 e1       	ldi	r24, 0x17	; 23
    4dd6:	95 e0       	ldi	r25, 0x05	; 5
    4dd8:	b8 01       	movw	r22, r16
    4dda:	a7 01       	movw	r20, r14
    4ddc:	0e 94 87 3c 	call	0x790e	; 0x790e <Print::print(int, int)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    4de0:	0e 94 04 21 	call	0x4208	; 0x4208 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    4de4:	dd 20       	and	r13, r13
    4de6:	11 f0       	breq	.+4      	; 0x4dec <serialPrintAndFlush(int, int)+0x2c>
    4de8:	0e 94 ce 20 	call	0x419c	; 0x419c <powerDownSerial()>
  }
    4dec:	1f 91       	pop	r17
    4dee:	0f 91       	pop	r16
    4df0:	ff 90       	pop	r15
    4df2:	ef 90       	pop	r14
    4df4:	df 90       	pop	r13
    4df6:	08 95       	ret

00004df8 <serialPrintAndFlush(char const*)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (read-only) string to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(const char * const text)
    4df8:	ff 92       	push	r15
    4dfa:	0f 93       	push	r16
    4dfc:	1f 93       	push	r17
    4dfe:	8c 01       	movw	r16, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    4e00:	0e 94 19 21 	call	0x4232	; 0x4232 <powerUpSerialIfDisabled()>
    4e04:	f8 2e       	mov	r15, r24
  // Send the text.
  Serial.print(text);
    4e06:	87 e1       	ldi	r24, 0x17	; 23
    4e08:	95 e0       	ldi	r25, 0x05	; 5
    4e0a:	b8 01       	movw	r22, r16
    4e0c:	0e 94 9a 3c 	call	0x7934	; 0x7934 <Print::print(char const*)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    4e10:	0e 94 04 21 	call	0x4208	; 0x4208 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    4e14:	ff 20       	and	r15, r15
    4e16:	11 f0       	breq	.+4      	; 0x4e1c <serialPrintAndFlush(char const*)+0x24>
    4e18:	0e 94 ce 20 	call	0x419c	; 0x419c <powerDownSerial()>
  }
    4e1c:	1f 91       	pop	r17
    4e1e:	0f 91       	pop	r16
    4e20:	ff 90       	pop	r15
    4e22:	08 95       	ret

00004e24 <serialPrintAndFlush(__FlashStringHelper const*)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) string to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(__FlashStringHelper const * const text)
    4e24:	ff 92       	push	r15
    4e26:	0f 93       	push	r16
    4e28:	1f 93       	push	r17
    4e2a:	8c 01       	movw	r16, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    4e2c:	0e 94 19 21 	call	0x4232	; 0x4232 <powerUpSerialIfDisabled()>
    4e30:	f8 2e       	mov	r15, r24
  // Send the text.
  Serial.print(text);
    4e32:	87 e1       	ldi	r24, 0x17	; 23
    4e34:	95 e0       	ldi	r25, 0x05	; 5
    4e36:	b8 01       	movw	r22, r16
    4e38:	0e 94 36 3b 	call	0x766c	; 0x766c <Print::print(__FlashStringHelper const*)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    4e3c:	0e 94 04 21 	call	0x4208	; 0x4208 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    4e40:	ff 20       	and	r15, r15
    4e42:	11 f0       	breq	.+4      	; 0x4e48 <serialPrintAndFlush(__FlashStringHelper const*)+0x24>
    4e44:	0e 94 ce 20 	call	0x419c	; 0x419c <powerDownSerial()>
  }
    4e48:	1f 91       	pop	r17
    4e4a:	0f 91       	pop	r16
    4e4c:	ff 90       	pop	r15
    4e4e:	08 95       	ret

00004e50 <serialPrintlnAndFlush(__FlashStringHelper const*)>:
// Flush to use for all serialPrintXXX() and DEBUG_PRINTXXX routines.
#define _flush() flushSerialSCTSensitive()

// Write a single (Flash-resident) string to serial followed by line-end and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintlnAndFlush(__FlashStringHelper const * const line)
    4e50:	ff 92       	push	r15
    4e52:	0f 93       	push	r16
    4e54:	1f 93       	push	r17
    4e56:	8c 01       	movw	r16, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    4e58:	0e 94 19 21 	call	0x4232	; 0x4232 <powerUpSerialIfDisabled()>
    4e5c:	f8 2e       	mov	r15, r24
  // Send the line of text followed by line end.
  Serial.println(line);
    4e5e:	87 e1       	ldi	r24, 0x17	; 23
    4e60:	95 e0       	ldi	r25, 0x05	; 5
    4e62:	b8 01       	movw	r22, r16
    4e64:	0e 94 81 3b 	call	0x7702	; 0x7702 <Print::println(__FlashStringHelper const*)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    4e68:	0e 94 04 21 	call	0x4208	; 0x4208 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    4e6c:	ff 20       	and	r15, r15
    4e6e:	11 f0       	breq	.+4      	; 0x4e74 <serialPrintlnAndFlush(__FlashStringHelper const*)+0x24>
    4e70:	0e 94 ce 20 	call	0x419c	; 0x419c <powerDownSerial()>
  }
    4e74:	1f 91       	pop	r17
    4e76:	0f 91       	pop	r16
    4e78:	ff 90       	pop	r15
    4e7a:	08 95       	ret

00004e7c <resetCLIActiveTimer()>:
#define CLI_DEFAULT_TIMEOUT_M 2
static volatile uint8_t CLITimeoutM = CLI_DEFAULT_TIMEOUT_M;

// Reset CLI active timer to the full whack before it goes inactive again (ie makes CLI active for a while).
// Thread-safe.
void resetCLIActiveTimer() { CLITimeoutM = CLI_DEFAULT_TIMEOUT_M; }
    4e7c:	82 e0       	ldi	r24, 0x02	; 2
    4e7e:	80 93 3b 01 	sts	0x013B, r24
    4e82:	08 95       	ret

00004e84 <isCLIActive()>:

// Returns true if the CLI is active, at least intermittently.
// Thread-safe.
bool isCLIActive() { return(0 != CLITimeoutM); }
    4e84:	80 91 3b 01 	lds	r24, 0x013B
    4e88:	81 11       	cpse	r24, r1
    4e8a:	81 e0       	ldi	r24, 0x01	; 1
    4e8c:	08 95       	ret

00004e8e <markUIControlUsed()>:
// Record local manual operation of a local physical UI control, eg not remote or via CLI.
// To be thread-safe, everything that this touches or calls must be.
// Thread-safe.
void markUIControlUsed()
  {
  statusChange = true; // Note user interaction with the system.
    4e8e:	81 e0       	ldi	r24, 0x01	; 1
    4e90:	80 93 b4 03 	sts	0x03B4, r24
  uiTimeoutM = UI_DEFAULT_TIMEOUT_M; // Ensure that UI controls are kept 'warm' for a little while.
    4e94:	92 e0       	ldi	r25, 0x02	; 2
    4e96:	90 93 b2 03 	sts	0x03B2, r25
#define CLI_DEFAULT_TIMEOUT_M 2
static volatile uint8_t CLITimeoutM = CLI_DEFAULT_TIMEOUT_M;

// Reset CLI active timer to the full whack before it goes inactive again (ie makes CLI active for a while).
// Thread-safe.
void resetCLIActiveTimer() { CLITimeoutM = CLI_DEFAULT_TIMEOUT_M; }
    4e9a:	90 93 3b 01 	sts	0x013B, r25
    // Do not call based on internal/synthetic events.
    // Such evidence may include operation of buttons (etc) on the unit or PIR.
    // Do not call from (for example) 'on' schedule change.
    // Makes occupation immediately visible.
    // Thread-safe and ISR-safe.
    void markAsOccupied() { value = 100; occupationCountdownM = OCCUPATION_TIMEOUT_M; activityCountdownM = 2; }
    4e9e:	84 e6       	ldi	r24, 0x64	; 100
    4ea0:	80 93 14 02 	sts	0x0214, r24
    4ea4:	82 e3       	ldi	r24, 0x32	; 50
    4ea6:	80 93 15 02 	sts	0x0215, r24
    4eaa:	90 93 16 02 	sts	0x0216, r25
  uiTimeoutM = UI_DEFAULT_TIMEOUT_M; // Ensure that UI controls are kept 'warm' for a little while.
  // Make CLI active for a while (at some slight possibly-significant energy cost).
  resetCLIActiveTimer(); // Thread-safe.
  // User operation of controls locally is strong indication of presence.
  Occupancy.markAsOccupied(); // Thread-safe.
  }
    4eae:	08 95       	ret

00004eb0 <recentUIControlUse()>:

// True if a manual UI control has been recently (seconds to minutes ago) operated.
// Thread-safe.
bool recentUIControlUse() { return(0 != uiTimeoutM); }
    4eb0:	80 91 b2 03 	lds	r24, 0x03B2
    4eb4:	81 11       	cpse	r24, r1
    4eb6:	81 e0       	ldi	r24, 0x01	; 1
    4eb8:	08 95       	ret

00004eba <Serial_print_space()>:
    }
  }


// Prints a single space to Serial (which must be up and running).
static void Serial_print_space() { Serial.print(' '); }
    4eba:	87 e1       	ldi	r24, 0x17	; 23
    4ebc:	95 e0       	ldi	r25, 0x05	; 5
    4ebe:	60 e2       	ldi	r22, 0x20	; 32
    4ec0:	0e 94 59 3b 	call	0x76b2	; 0x76b2 <Print::print(char)>
    4ec4:	08 95       	ret

00004ec6 <InvalidIgnored()>:
  Serial.println();
  }

// Prints warning to serial (that must be up and running) that invalid (CLI) input has been ignored.
// Probably should not be inlined, to avoid creating duplicate strings in Flash.
static void InvalidIgnored() { Serial.println(F("Invalid, ignored.")); }
    4ec6:	87 e1       	ldi	r24, 0x17	; 23
    4ec8:	95 e0       	ldi	r25, 0x05	; 5
    4eca:	66 ea       	ldi	r22, 0xA6	; 166
    4ecc:	73 e0       	ldi	r23, 0x03	; 3
    4ece:	0e 94 81 3b 	call	0x7702	; 0x7702 <Print::println(__FlashStringHelper const*)>
    4ed2:	08 95       	ret

00004ed4 <printCLILine(unsigned char, char, __FlashStringHelper const*)>:
  for(int8_t padding = SYNTAX_COL_WIDTH - strlen_P((const char *)syntax); --padding >= 0; ) { Serial_print_space(); }
  Serial.println(description);
  }
// Efficiently print a single line given a single-char syntax element and the description, both non-null.
// NOTE: will skip the description if getting close to the end of the time deadline to avoid overrun.
static void printCLILine(const uint8_t deadline, const char syntax, __FlashStringHelper const *description)
    4ed4:	1f 93       	push	r17
    4ed6:	cf 93       	push	r28
    4ed8:	df 93       	push	r29
    4eda:	18 2f       	mov	r17, r24
    4edc:	ea 01       	movw	r28, r20
  {
  Serial.print(syntax);
    4ede:	87 e1       	ldi	r24, 0x17	; 23
    4ee0:	95 e0       	ldi	r25, 0x05	; 5
    4ee2:	0e 94 59 3b 	call	0x76b2	; 0x76b2 <Print::print(char)>
  flushSerialProductive(); // Ensure all pending output is flushed before sampling current position in minor cycle.
    4ee6:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <flushSerialProductive()>
  if(getSubCycleTime() >= deadline) { Serial.println(); return; }
    4eea:	80 91 b2 00 	lds	r24, 0x00B2
    4eee:	81 17       	cp	r24, r17
    4ef0:	10 f4       	brcc	.+4      	; 0x4ef6 <printCLILine(unsigned char, char, __FlashStringHelper const*)+0x22>
    4ef2:	19 e0       	ldi	r17, 0x09	; 9
    4ef4:	07 c0       	rjmp	.+14     	; 0x4f04 <printCLILine(unsigned char, char, __FlashStringHelper const*)+0x30>
    4ef6:	87 e1       	ldi	r24, 0x17	; 23
    4ef8:	95 e0       	ldi	r25, 0x05	; 5
    4efa:	0e 94 61 3b 	call	0x76c2	; 0x76c2 <Print::println()>
    4efe:	09 c0       	rjmp	.+18     	; 0x4f12 <printCLILine(unsigned char, char, __FlashStringHelper const*)+0x3e>
  for(int8_t padding = SYNTAX_COL_WIDTH - 1; --padding >= 0; ) { Serial_print_space(); }
    4f00:	0e 94 5d 27 	call	0x4eba	; 0x4eba <Serial_print_space()>
    4f04:	11 50       	subi	r17, 0x01	; 1
    4f06:	e0 f7       	brcc	.-8      	; 0x4f00 <printCLILine(unsigned char, char, __FlashStringHelper const*)+0x2c>
  Serial.println(description);
    4f08:	87 e1       	ldi	r24, 0x17	; 23
    4f0a:	95 e0       	ldi	r25, 0x05	; 5
    4f0c:	be 01       	movw	r22, r28
    4f0e:	0e 94 81 3b 	call	0x7702	; 0x7702 <Print::println(__FlashStringHelper const*)>
  }
    4f12:	df 91       	pop	r29
    4f14:	cf 91       	pop	r28
    4f16:	1f 91       	pop	r17
    4f18:	08 95       	ret

00004f1a <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)>:
#define CLI_PRINT_OH_SCT ((uint8_t)(GSCT_MAX/4))
// Deadline in minor cycle by which to stop printing description.
#define STOP_PRINTING_DESCRIPTION_AT ((uint8_t)(GSCT_MAX-CLI_PRINT_OH_SCT))
// Efficiently print a single line given the syntax element and the description, both non-null.
// NOTE: will skip the description if getting close to the end of the time deadline to avoid overrun.
static void printCLILine(const uint8_t deadline, __FlashStringHelper const *syntax, __FlashStringHelper const *description)
    4f1a:	ef 92       	push	r14
    4f1c:	ff 92       	push	r15
    4f1e:	1f 93       	push	r17
    4f20:	cf 93       	push	r28
    4f22:	df 93       	push	r29
    4f24:	18 2f       	mov	r17, r24
    4f26:	eb 01       	movw	r28, r22
    4f28:	7a 01       	movw	r14, r20
  {
  Serial.print(syntax);
    4f2a:	87 e1       	ldi	r24, 0x17	; 23
    4f2c:	95 e0       	ldi	r25, 0x05	; 5
    4f2e:	0e 94 36 3b 	call	0x766c	; 0x766c <Print::print(__FlashStringHelper const*)>
  flushSerialProductive(); // Ensure all pending output is flushed before sampling current position in minor cycle.
    4f32:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <flushSerialProductive()>
  if(getSubCycleTime() >= deadline) { Serial.println(); return; }
    4f36:	80 91 b2 00 	lds	r24, 0x00B2
    4f3a:	81 17       	cp	r24, r17
    4f3c:	28 f0       	brcs	.+10     	; 0x4f48 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)+0x2e>
    4f3e:	87 e1       	ldi	r24, 0x17	; 23
    4f40:	95 e0       	ldi	r25, 0x05	; 5
    4f42:	0e 94 61 3b 	call	0x76c2	; 0x76c2 <Print::println()>
    4f46:	10 c0       	rjmp	.+32     	; 0x4f68 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)+0x4e>
  for(int8_t padding = SYNTAX_COL_WIDTH - strlen_P((const char *)syntax); --padding >= 0; ) { Serial_print_space(); }
    4f48:	ce 01       	movw	r24, r28
    4f4a:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <strlen_P>
    4f4e:	1a e0       	ldi	r17, 0x0A	; 10
    4f50:	18 1b       	sub	r17, r24
    4f52:	02 c0       	rjmp	.+4      	; 0x4f58 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)+0x3e>
    4f54:	0e 94 5d 27 	call	0x4eba	; 0x4eba <Serial_print_space()>
    4f58:	11 50       	subi	r17, 0x01	; 1
    4f5a:	17 ff       	sbrs	r17, 7
    4f5c:	fb cf       	rjmp	.-10     	; 0x4f54 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)+0x3a>
  Serial.println(description);
    4f5e:	87 e1       	ldi	r24, 0x17	; 23
    4f60:	95 e0       	ldi	r25, 0x05	; 5
    4f62:	b7 01       	movw	r22, r14
    4f64:	0e 94 81 3b 	call	0x7702	; 0x7702 <Print::println(__FlashStringHelper const*)>
  }
    4f68:	df 91       	pop	r29
    4f6a:	cf 91       	pop	r28
    4f6c:	1f 91       	pop	r17
    4f6e:	ff 90       	pop	r15
    4f70:	ef 90       	pop	r14
    4f72:	08 95       	ret

00004f74 <dumpCLIUsage(unsigned char)>:
  Serial.println(description);
  }

// Dump some brief CLI usage instructions to serial TX, which must be up and running.
// If this gets too big there is a risk of overrunning and missing the next tick...
static void dumpCLIUsage(const uint8_t stopBy)
    4f74:	1f 93       	push	r17
    4f76:	df 93       	push	r29
    4f78:	cf 93       	push	r28
    4f7a:	00 d0       	rcall	.+0      	; 0x4f7c <dumpCLIUsage(unsigned char)+0x8>
    4f7c:	00 d0       	rcall	.+0      	; 0x4f7e <dumpCLIUsage(unsigned char)+0xa>
    4f7e:	cd b7       	in	r28, 0x3d	; 61
    4f80:	de b7       	in	r29, 0x3e	; 62
    4f82:	8c 83       	std	Y+4, r24	; 0x04
  {
  const uint8_t deadline = fnmin((uint8_t)(stopBy - fnmin(stopBy,CLI_PRINT_OH_SCT)), STOP_PRINTING_DESCRIPTION_AT);
    4f84:	98 2f       	mov	r25, r24
    4f86:	8f e3       	ldi	r24, 0x3F	; 63
    4f88:	89 83       	std	Y+1, r24	; 0x01
    4f8a:	89 2f       	mov	r24, r25
    4f8c:	90 34       	cpi	r25, 0x40	; 64
    4f8e:	08 f0       	brcs	.+2      	; 0x4f92 <dumpCLIUsage(unsigned char)+0x1e>
    4f90:	8f e3       	ldi	r24, 0x3F	; 63
    4f92:	98 1b       	sub	r25, r24
    4f94:	9a 83       	std	Y+2, r25	; 0x02
    4f96:	80 ec       	ldi	r24, 0xC0	; 192
    4f98:	8b 83       	std	Y+3, r24	; 0x03
    4f9a:	19 2f       	mov	r17, r25
    4f9c:	91 3c       	cpi	r25, 0xC1	; 193
    4f9e:	08 f0       	brcs	.+2      	; 0x4fa2 <dumpCLIUsage(unsigned char)+0x2e>
    4fa0:	10 ec       	ldi	r17, 0xC0	; 192
  Serial.println();
    4fa2:	87 e1       	ldi	r24, 0x17	; 23
    4fa4:	95 e0       	ldi	r25, 0x05	; 5
    4fa6:	0e 94 61 3b 	call	0x76c2	; 0x76c2 <Print::println()>
  //Serial.println(F("CLI usage:"));
  printCLILine(deadline, '?', F("this help"));
    4faa:	81 2f       	mov	r24, r17
    4fac:	6f e3       	ldi	r22, 0x3F	; 63
    4fae:	4c e9       	ldi	r20, 0x9C	; 156
    4fb0:	53 e0       	ldi	r21, 0x03	; 3
    4fb2:	0e 94 6a 27 	call	0x4ed4	; 0x4ed4 <printCLILine(unsigned char, char, __FlashStringHelper const*)>
#ifdef ENABLE_BOILER_HUB
  printCLILine(deadline, F("C M"), F("Central hub >=M mins on, 0 off"));
    4fb6:	81 2f       	mov	r24, r17
    4fb8:	68 e9       	ldi	r22, 0x98	; 152
    4fba:	73 e0       	ldi	r23, 0x03	; 3
    4fbc:	49 e7       	ldi	r20, 0x79	; 121
    4fbe:	53 e0       	ldi	r21, 0x03	; 3
    4fc0:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)>
#endif
  printCLILine(deadline, F("D N"), F("Dump stats set N"));
    4fc4:	81 2f       	mov	r24, r17
    4fc6:	65 e7       	ldi	r22, 0x75	; 117
    4fc8:	73 e0       	ldi	r23, 0x03	; 3
    4fca:	44 e6       	ldi	r20, 0x64	; 100
    4fcc:	53 e0       	ldi	r21, 0x03	; 3
    4fce:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine(deadline, 'E', F("Exit CLI"));
    4fd2:	81 2f       	mov	r24, r17
    4fd4:	65 e4       	ldi	r22, 0x45	; 69
    4fd6:	4b e5       	ldi	r20, 0x5B	; 91
    4fd8:	53 e0       	ldi	r21, 0x03	; 3
    4fda:	0e 94 6a 27 	call	0x4ed4	; 0x4ed4 <printCLILine(unsigned char, char, __FlashStringHelper const*)>
  printCLILine(deadline, 'F', F("Frost"));
    4fde:	81 2f       	mov	r24, r17
    4fe0:	66 e4       	ldi	r22, 0x46	; 70
    4fe2:	45 e5       	ldi	r20, 0x55	; 85
    4fe4:	53 e0       	ldi	r21, 0x03	; 3
    4fe6:	0e 94 6a 27 	call	0x4ed4	; 0x4ed4 <printCLILine(unsigned char, char, __FlashStringHelper const*)>
#if defined(SETTABLE_TARGET_TEMPERATURES) && !defined(TEMP_POT_AVAILABLE)
  printCLILine(deadline, F("F CC"), F("set Frost/setback temp CC"));
#endif
#if defined(USE_MODULE_FHT8VSIMPLE) && defined(LOCAL_TRV)
  printCLILine(deadline, F("H H1 H2"), F("set FHT8V House codes 1&2"));
    4fea:	81 2f       	mov	r24, r17
    4fec:	6d e4       	ldi	r22, 0x4D	; 77
    4fee:	73 e0       	ldi	r23, 0x03	; 3
    4ff0:	43 e3       	ldi	r20, 0x33	; 51
    4ff2:	53 e0       	ldi	r21, 0x03	; 3
    4ff4:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine(deadline, 'H', F("clear House codes"));
    4ff8:	81 2f       	mov	r24, r17
    4ffa:	68 e4       	ldi	r22, 0x48	; 72
    4ffc:	41 e2       	ldi	r20, 0x21	; 33
    4ffe:	53 e0       	ldi	r21, 0x03	; 3
    5000:	0e 94 6a 27 	call	0x4ed4	; 0x4ed4 <printCLILine(unsigned char, char, __FlashStringHelper const*)>
#endif
  printCLILine(deadline, 'I', F("new ID"));
    5004:	81 2f       	mov	r24, r17
    5006:	69 e4       	ldi	r22, 0x49	; 73
    5008:	4a e1       	ldi	r20, 0x1A	; 26
    500a:	53 e0       	ldi	r21, 0x03	; 3
    500c:	0e 94 6a 27 	call	0x4ed4	; 0x4ed4 <printCLILine(unsigned char, char, __FlashStringHelper const*)>
  //printCLILine(deadline, 'L', F("Learn to warm every 24h from now, clear if in frost mode, schedule 0"));
  printCLILine(deadline, F("L S"), F("Learn daily warm now, clear if in frost mode, schedule S"));
    5010:	81 2f       	mov	r24, r17
    5012:	66 e1       	ldi	r22, 0x16	; 22
    5014:	73 e0       	ldi	r23, 0x03	; 3
    5016:	4d ed       	ldi	r20, 0xDD	; 221
    5018:	52 e0       	ldi	r21, 0x02	; 2
    501a:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)>
  //printCLILine(deadline, F("P HH MM"), F("Program: warm daily starting at HH MM schedule 0"));
  printCLILine(deadline, F("P HH MM S"), F("Program: warm daily starting at HH MM schedule S"));
    501e:	81 2f       	mov	r24, r17
    5020:	63 ed       	ldi	r22, 0xD3	; 211
    5022:	72 e0       	ldi	r23, 0x02	; 2
    5024:	42 ea       	ldi	r20, 0xA2	; 162
    5026:	52 e0       	ldi	r21, 0x02	; 2
    5028:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine(deadline, F("O PP"), F("min % for valve to be Open"));
    502c:	81 2f       	mov	r24, r17
    502e:	6d e9       	ldi	r22, 0x9D	; 157
    5030:	72 e0       	ldi	r23, 0x02	; 2
    5032:	42 e8       	ldi	r20, 0x82	; 130
    5034:	52 e0       	ldi	r21, 0x02	; 2
    5036:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine(deadline, 'O', F("reset Open %"));
    503a:	81 2f       	mov	r24, r17
    503c:	6f e4       	ldi	r22, 0x4F	; 79
    503e:	45 e7       	ldi	r20, 0x75	; 117
    5040:	52 e0       	ldi	r21, 0x02	; 2
    5042:	0e 94 6a 27 	call	0x4ed4	; 0x4ed4 <printCLILine(unsigned char, char, __FlashStringHelper const*)>
#ifdef SUPPORT_BAKE
  printCLILine(deadline, 'Q', F("Quick Heat"));
    5046:	81 2f       	mov	r24, r17
    5048:	61 e5       	ldi	r22, 0x51	; 81
    504a:	4a e6       	ldi	r20, 0x6A	; 106
    504c:	52 e0       	ldi	r21, 0x02	; 2
    504e:	0e 94 6a 27 	call	0x4ed4	; 0x4ed4 <printCLILine(unsigned char, char, __FlashStringHelper const*)>
#endif
//  printCLILine(deadline, F("R N"), F("dump Raw stats set N"));
  printCLILine(deadline, 'S', F("show Status"));
    5052:	81 2f       	mov	r24, r17
    5054:	63 e5       	ldi	r22, 0x53	; 83
    5056:	4e e5       	ldi	r20, 0x5E	; 94
    5058:	52 e0       	ldi	r21, 0x02	; 2
    505a:	0e 94 6a 27 	call	0x4ed4	; 0x4ed4 <printCLILine(unsigned char, char, __FlashStringHelper const*)>
  printCLILine(deadline, F("T HH MM"), F("set 24h Time"));
    505e:	81 2f       	mov	r24, r17
    5060:	66 e5       	ldi	r22, 0x56	; 86
    5062:	72 e0       	ldi	r23, 0x02	; 2
    5064:	49 e4       	ldi	r20, 0x49	; 73
    5066:	52 e0       	ldi	r21, 0x02	; 2
    5068:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine(deadline, 'W', F("Warm"));
    506c:	81 2f       	mov	r24, r17
    506e:	67 e5       	ldi	r22, 0x57	; 87
    5070:	44 e4       	ldi	r20, 0x44	; 68
    5072:	52 e0       	ldi	r21, 0x02	; 2
    5074:	0e 94 6a 27 	call	0x4ed4	; 0x4ed4 <printCLILine(unsigned char, char, __FlashStringHelper const*)>
  printCLILine(deadline, 'V', F("sys Version"));
    5078:	81 2f       	mov	r24, r17
    507a:	66 e5       	ldi	r22, 0x56	; 86
    507c:	48 e3       	ldi	r20, 0x38	; 56
    507e:	52 e0       	ldi	r21, 0x02	; 2
    5080:	0e 94 6a 27 	call	0x4ed4	; 0x4ed4 <printCLILine(unsigned char, char, __FlashStringHelper const*)>
#if defined(SETTABLE_TARGET_TEMPERATURES) && !defined(TEMP_POT_AVAILABLE)
  printCLILine(deadline, F("W CC"), F("set Warm temp CC"));
#endif
  printCLILine(deadline, 'X', F("Xmit security level; 0 always, 255 never"));
    5084:	81 2f       	mov	r24, r17
    5086:	68 e5       	ldi	r22, 0x58	; 88
    5088:	4f e0       	ldi	r20, 0x0F	; 15
    508a:	52 e0       	ldi	r21, 0x02	; 2
    508c:	0e 94 6a 27 	call	0x4ed4	; 0x4ed4 <printCLILine(unsigned char, char, __FlashStringHelper const*)>
  printCLILine(deadline, 'Z', F("Zap stats"));
    5090:	81 2f       	mov	r24, r17
    5092:	6a e5       	ldi	r22, 0x5A	; 90
    5094:	45 e0       	ldi	r20, 0x05	; 5
    5096:	52 e0       	ldi	r21, 0x02	; 2
    5098:	0e 94 6a 27 	call	0x4ed4	; 0x4ed4 <printCLILine(unsigned char, char, __FlashStringHelper const*)>
  Serial.println();
    509c:	87 e1       	ldi	r24, 0x17	; 23
    509e:	95 e0       	ldi	r25, 0x05	; 5
    50a0:	0e 94 61 3b 	call	0x76c2	; 0x76c2 <Print::println()>
  }
    50a4:	0f 90       	pop	r0
    50a6:	0f 90       	pop	r0
    50a8:	0f 90       	pop	r0
    50aa:	0f 90       	pop	r0
    50ac:	cf 91       	pop	r28
    50ae:	df 91       	pop	r29
    50b0:	1f 91       	pop	r17
    50b2:	08 95       	ret

000050b4 <handleLEARN(unsigned char)>:
#ifdef LEARN_BUTTON_AVAILABLE
// Handle learn button(s).
// First/primary button is 0, second is 1, etc.
// In simple mode: if in frost mode clear simple schedule else set repeat for every 24h from now.
// May be called from pushbutton or CLI UI components.
static void handleLEARN(const uint8_t which)
    50b4:	1f 93       	push	r17
    50b6:	18 2f       	mov	r17, r24
  {
  // Set simple schedule starting every 24h from a little before now and running for an hour or so.  
  if(inWarmMode()) { setSimpleSchedule(getMinutesSinceMidnightLT(), which); }
    50b8:	0e 94 ae 03 	call	0x75c	; 0x75c <inWarmMode()>
    50bc:	88 23       	and	r24, r24
    50be:	31 f0       	breq	.+12     	; 0x50cc <handleLEARN(unsigned char)+0x18>
    50c0:	0e 94 48 24 	call	0x4890	; 0x4890 <getMinutesSinceMidnightLT()>
    50c4:	61 2f       	mov	r22, r17
    50c6:	0e 94 6e 25 	call	0x4adc	; 0x4adc <setSimpleSchedule(unsigned int, unsigned char)>
    50ca:	03 c0       	rjmp	.+6      	; 0x50d2 <handleLEARN(unsigned char)+0x1e>
  // Clear simple schedule.
  else { clearSimpleSchedule(which); }
    50cc:	81 2f       	mov	r24, r17
    50ce:	0e 94 62 25 	call	0x4ac4	; 0x4ac4 <clearSimpleSchedule(unsigned char)>
  }
    50d2:	1f 91       	pop	r17
    50d4:	08 95       	ret

000050d6 <checkUserSchedule()>:
  return(statusChanged);
  }


// Check/apply the user's schedule, at least once each minute, and act on any timed events.
void checkUserSchedule()
    50d6:	1f 93       	push	r17
    50d8:	cf 93       	push	r28
    50da:	df 93       	push	r29
  {
  // Get minutes since midnight local time [0,1439].
  const uint_least16_t msm = getMinutesSinceMidnightLT();
    50dc:	0e 94 48 24 	call	0x4890	; 0x4890 <getMinutesSinceMidnightLT()>
    50e0:	ec 01       	movw	r28, r24
    50e2:	10 e0       	ldi	r17, 0x00	; 0
  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    // Check if now is the simple scheduled off time, as minutes after midnight [0,1439]; invalid (eg ~0) if none set.
    // Programmed off/frost takes priority over on/warm if same to bias towards energy-saving.
    // Note that in the presence of multiple overlapping schedules only the last 'off' applies however.
    if(((MAX_SIMPLE_SCHEDULES < 1) || !isAnyScheduleOnWARMNow()) &&
    50e4:	0e 94 ed 25 	call	0x4bda	; 0x4bda <isAnyScheduleOnWARMNow()>
    50e8:	88 23       	and	r24, r24
    50ea:	79 f4       	brne	.+30     	; 0x510a <checkUserSchedule()+0x34>
    50ec:	81 2f       	mov	r24, r17
    50ee:	0e 94 87 25 	call	0x4b0e	; 0x4b0e <getSimpleScheduleOff(unsigned char)>
    50f2:	c8 17       	cp	r28, r24
    50f4:	d9 07       	cpc	r29, r25
    50f6:	49 f4       	brne	.+18     	; 0x510a <checkUserSchedule()+0x34>
       (msm == getSimpleScheduleOff(which)))
      { setWarmModeDebounced(false); }
    50f8:	80 e0       	ldi	r24, 0x00	; 0
    50fa:	01 c0       	rjmp	.+2      	; 0x50fe <checkUserSchedule()+0x28>
    // Check if now is the simple scheduled on time.
    else if(msm == getSimpleScheduleOn(which))
      { setWarmModeDebounced(true); }
    50fc:	81 e0       	ldi	r24, 0x01	; 1
    50fe:	0e 94 b1 03 	call	0x762	; 0x762 <setWarmModeDebounced(bool)>
  // Get minutes since midnight local time [0,1439].
  const uint_least16_t msm = getMinutesSinceMidnightLT();

  // Check all available schedules.
  // FIXME: probably will NOT work as expected for overlapping schedules (ie will got to FROST at end of first one).
  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    5102:	1f 5f       	subi	r17, 0xFF	; 255
    5104:	12 30       	cpi	r17, 0x02	; 2
    5106:	71 f7       	brne	.-36     	; 0x50e4 <checkUserSchedule()+0xe>
    5108:	07 c0       	rjmp	.+14     	; 0x5118 <checkUserSchedule()+0x42>
    // Note that in the presence of multiple overlapping schedules only the last 'off' applies however.
    if(((MAX_SIMPLE_SCHEDULES < 1) || !isAnyScheduleOnWARMNow()) &&
       (msm == getSimpleScheduleOff(which)))
      { setWarmModeDebounced(false); }
    // Check if now is the simple scheduled on time.
    else if(msm == getSimpleScheduleOn(which))
    510a:	81 2f       	mov	r24, r17
    510c:	0e 94 42 25 	call	0x4a84	; 0x4a84 <getSimpleScheduleOn(unsigned char)>
    5110:	c8 17       	cp	r28, r24
    5112:	d9 07       	cpc	r29, r25
    5114:	b1 f7       	brne	.-20     	; 0x5102 <checkUserSchedule()+0x2c>
    5116:	f2 cf       	rjmp	.-28     	; 0x50fc <checkUserSchedule()+0x26>
      { setWarmModeDebounced(true); }
    }
  }
    5118:	df 91       	pop	r29
    511a:	cf 91       	pop	r28
    511c:	1f 91       	pop	r17
    511e:	08 95       	ret

00005120 <serialStatusReport()>:

'HC' introduces the optional FHT8V house codes section, if supported and codes are set.
eg 'HC99 99'
HChc1 hc2 are the house codes 1 and 2 for an FHT8V valve.
*/
void serialStatusReport()
    5120:	bf 92       	push	r11
    5122:	cf 92       	push	r12
    5124:	df 92       	push	r13
    5126:	ef 92       	push	r14
    5128:	ff 92       	push	r15
    512a:	0f 93       	push	r16
    512c:	1f 93       	push	r17
    512e:	df 93       	push	r29
    5130:	cf 93       	push	r28
    5132:	cd b7       	in	r28, 0x3d	; 61
    5134:	de b7       	in	r29, 0x3e	; 62
    5136:	c0 55       	subi	r28, 0x50	; 80
    5138:	d0 40       	sbci	r29, 0x00	; 0
    513a:	0f b6       	in	r0, 0x3f	; 63
    513c:	f8 94       	cli
    513e:	de bf       	out	0x3e, r29	; 62
    5140:	0f be       	out	0x3f, r0	; 63
    5142:	cd bf       	out	0x3d, r28	; 61
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    5144:	0e 94 19 21 	call	0x4232	; 0x4232 <powerUpSerialIfDisabled()>
    5148:	b8 2e       	mov	r11, r24

  // Aim to overlap CPU usage with characters being TXed for throughput determined primarily by output size and baud.

  // Stats line starts with distingushed marker character.
  // Initial '=' section with common essentials.
  Serial.print(LINE_START_CHAR_STATS);
    514a:	87 e1       	ldi	r24, 0x17	; 23
    514c:	95 e0       	ldi	r25, 0x05	; 5
    514e:	6d e3       	ldi	r22, 0x3D	; 61
    5150:	0e 94 59 3b 	call	0x76b2	; 0x76b2 <Print::print(char)>
#ifdef SUPPORT_BAKE
  Serial.print(inWarmMode() ? (inBakeMode() ? 'B' : 'W') : 'F');
    5154:	0e 94 ae 03 	call	0x75c	; 0x75c <inWarmMode()>
    5158:	88 23       	and	r24, r24
    515a:	11 f4       	brne	.+4      	; 0x5160 <serialStatusReport()+0x40>
    515c:	66 e4       	ldi	r22, 0x46	; 70
    515e:	07 c0       	rjmp	.+14     	; 0x516e <serialStatusReport()+0x4e>
    5160:	0e 94 b8 03 	call	0x770	; 0x770 <inBakeMode()>
    5164:	88 23       	and	r24, r24
    5166:	11 f4       	brne	.+4      	; 0x516c <serialStatusReport()+0x4c>
    5168:	67 e5       	ldi	r22, 0x57	; 87
    516a:	01 c0       	rjmp	.+2      	; 0x516e <serialStatusReport()+0x4e>
    516c:	62 e4       	ldi	r22, 0x42	; 66
    516e:	87 e1       	ldi	r24, 0x17	; 23
    5170:	95 e0       	ldi	r25, 0x05	; 5
    5172:	0e 94 59 3b 	call	0x76b2	; 0x76b2 <Print::print(char)>
    5176:	60 91 1b 02 	lds	r22, 0x021B
#else
  Serial.print(inWarmMode() ? 'W' : 'F');
#endif
  Serial.print(NominalRadValve.get()); Serial.print('%'); // Target valve position.
    517a:	87 e1       	ldi	r24, 0x17	; 23
    517c:	95 e0       	ldi	r25, 0x05	; 5
    517e:	4a e0       	ldi	r20, 0x0A	; 10
    5180:	50 e0       	ldi	r21, 0x00	; 0
    5182:	0e 94 35 3c 	call	0x786a	; 0x786a <Print::print(unsigned char, int)>
    5186:	87 e1       	ldi	r24, 0x17	; 23
    5188:	95 e0       	ldi	r25, 0x05	; 5
    518a:	65 e2       	ldi	r22, 0x25	; 37
    518c:	0e 94 59 3b 	call	0x76b2	; 0x76b2 <Print::print(char)>
    virtual uint8_t preferredPollInterval_s() const { return(60); }

    // Return last value fetched by read(); undefined before first read().
    // Fast.
    // Not thread-safe nor usable within ISRs (Interrupt Service Routines).
    virtual int get() const { return(value); }
    5190:	00 91 c5 03 	lds	r16, 0x03C5
    5194:	10 91 c6 03 	lds	r17, 0x03C6
  const int temp = TemperatureC16.get();
  Serial.print('@'); Serial.print(temp >> 4); Serial.print('C'); // Unrounded whole degrees C.
    5198:	87 e1       	ldi	r24, 0x17	; 23
    519a:	95 e0       	ldi	r25, 0x05	; 5
    519c:	60 e4       	ldi	r22, 0x40	; 64
    519e:	0e 94 59 3b 	call	0x76b2	; 0x76b2 <Print::print(char)>
    51a2:	b8 01       	movw	r22, r16
    51a4:	24 e0       	ldi	r18, 0x04	; 4
    51a6:	75 95       	asr	r23
    51a8:	67 95       	ror	r22
    51aa:	2a 95       	dec	r18
    51ac:	e1 f7       	brne	.-8      	; 0x51a6 <serialStatusReport()+0x86>
    51ae:	87 e1       	ldi	r24, 0x17	; 23
    51b0:	95 e0       	ldi	r25, 0x05	; 5
    51b2:	4a e0       	ldi	r20, 0x0A	; 10
    51b4:	50 e0       	ldi	r21, 0x00	; 0
    51b6:	0e 94 87 3c 	call	0x790e	; 0x790e <Print::print(int, int)>
    51ba:	87 e1       	ldi	r24, 0x17	; 23
    51bc:	95 e0       	ldi	r25, 0x05	; 5
    51be:	63 e4       	ldi	r22, 0x43	; 67
    51c0:	0e 94 59 3b 	call	0x76b2	; 0x76b2 <Print::print(char)>
      Serial.print(temp & 0xf, HEX); // Show 16ths in hex.
    51c4:	0f 70       	andi	r16, 0x0F	; 15
    51c6:	10 70       	andi	r17, 0x00	; 0
    51c8:	87 e1       	ldi	r24, 0x17	; 23
    51ca:	95 e0       	ldi	r25, 0x05	; 5
    51cc:	b8 01       	movw	r22, r16
    51ce:	40 e1       	ldi	r20, 0x10	; 16
    51d0:	50 e0       	ldi	r21, 0x00	; 0
    51d2:	0e 94 87 3c 	call	0x790e	; 0x790e <Print::print(int, int)>
//  if(Supply_mV.isSupplyVoltageLow()) { Serial.print(F(";Plow")); }
//#endif

#if 1
  // *X* section: Xmit security level shown only if some non-essential TX potentially allowed.
  const stats_TX_level xmitLevel = getStatsTXLevel();
    51d6:	0e 94 22 26 	call	0x4c44	; 0x4c44 <getStatsTXLevel()>
  if(xmitLevel < stTXnever) { Serial.print(F(";X")); Serial.print(xmitLevel); }
    51da:	8c 01       	movw	r16, r24
    51dc:	8f 3f       	cpi	r24, 0xFF	; 255
    51de:	91 05       	cpc	r25, r1
    51e0:	6c f4       	brge	.+26     	; 0x51fc <serialStatusReport()+0xdc>
    51e2:	87 e1       	ldi	r24, 0x17	; 23
    51e4:	95 e0       	ldi	r25, 0x05	; 5
    51e6:	6f eb       	ldi	r22, 0xBF	; 191
    51e8:	73 e0       	ldi	r23, 0x03	; 3
    51ea:	0e 94 36 3b 	call	0x766c	; 0x766c <Print::print(__FlashStringHelper const*)>
    51ee:	87 e1       	ldi	r24, 0x17	; 23
    51f0:	95 e0       	ldi	r25, 0x05	; 5
    51f2:	b8 01       	movw	r22, r16
    51f4:	4a e0       	ldi	r20, 0x0A	; 10
    51f6:	50 e0       	ldi	r21, 0x00	; 0
    51f8:	0e 94 87 3c 	call	0x790e	; 0x790e <Print::print(int, int)>
#endif

  // *T* section: time and schedules.
  const uint_least8_t hh = getHoursLT();
    51fc:	0e 94 5d 24 	call	0x48ba	; 0x48ba <getHoursLT()>
    5200:	18 2f       	mov	r17, r24
  const uint_least8_t mm = getMinutesLT();
    5202:	0e 94 51 24 	call	0x48a2	; 0x48a2 <getMinutesLT()>
    5206:	08 2f       	mov	r16, r24
  Serial.print(';'); // End previous section.
    5208:	87 e1       	ldi	r24, 0x17	; 23
    520a:	95 e0       	ldi	r25, 0x05	; 5
    520c:	6b e3       	ldi	r22, 0x3B	; 59
    520e:	0e 94 59 3b 	call	0x76b2	; 0x76b2 <Print::print(char)>
  Serial.print('T'); Serial.print(hh); Serial_print_space(); Serial.print(mm);
    5212:	87 e1       	ldi	r24, 0x17	; 23
    5214:	95 e0       	ldi	r25, 0x05	; 5
    5216:	64 e5       	ldi	r22, 0x54	; 84
    5218:	0e 94 59 3b 	call	0x76b2	; 0x76b2 <Print::print(char)>
    521c:	87 e1       	ldi	r24, 0x17	; 23
    521e:	95 e0       	ldi	r25, 0x05	; 5
    5220:	61 2f       	mov	r22, r17
    5222:	4a e0       	ldi	r20, 0x0A	; 10
    5224:	50 e0       	ldi	r21, 0x00	; 0
    5226:	0e 94 35 3c 	call	0x786a	; 0x786a <Print::print(unsigned char, int)>
    522a:	0e 94 5d 27 	call	0x4eba	; 0x4eba <Serial_print_space()>
    522e:	87 e1       	ldi	r24, 0x17	; 23
    5230:	95 e0       	ldi	r25, 0x05	; 5
    5232:	60 2f       	mov	r22, r16
    5234:	4a e0       	ldi	r20, 0x0A	; 10
    5236:	50 e0       	ldi	r21, 0x00	; 0
    5238:	0e 94 35 3c 	call	0x786a	; 0x786a <Print::print(unsigned char, int)>
    523c:	dd 24       	eor	r13, r13
  // Show all schedules set.
  for(uint8_t scheduleNumber = 0; scheduleNumber < MAX_SIMPLE_SCHEDULES; ++scheduleNumber)
    {
    Serial_print_space();
    523e:	0e 94 5d 27 	call	0x4eba	; 0x4eba <Serial_print_space()>
    uint_least16_t startMinutesSinceMidnightLT = getSimpleScheduleOn(scheduleNumber);
    5242:	8d 2d       	mov	r24, r13
    5244:	0e 94 42 25 	call	0x4a84	; 0x4a84 <getSimpleScheduleOn(unsigned char)>
    5248:	fc 01       	movw	r30, r24
    const bool invalidStartTime = startMinutesSinceMidnightLT >= MINS_PER_DAY;
    const int startH = invalidStartTime ? 255 : (startMinutesSinceMidnightLT / 60);
    524a:	85 e0       	ldi	r24, 0x05	; 5
    524c:	e0 3a       	cpi	r30, 0xA0	; 160
    524e:	f8 07       	cpc	r31, r24
    5250:	30 f0       	brcs	.+12     	; 0x525e <serialStatusReport()+0x13e>
    5252:	00 e0       	ldi	r16, 0x00	; 0
    5254:	10 e0       	ldi	r17, 0x00	; 0
    5256:	9f ef       	ldi	r25, 0xFF	; 255
    5258:	e9 2e       	mov	r14, r25
    525a:	f1 2c       	mov	r15, r1
    525c:	0c c0       	rjmp	.+24     	; 0x5276 <serialStatusReport()+0x156>
    525e:	cf 01       	movw	r24, r30
    5260:	6c e3       	ldi	r22, 0x3C	; 60
    5262:	70 e0       	ldi	r23, 0x00	; 0
    5264:	0e 94 cc 3d 	call	0x7b98	; 0x7b98 <__udivmodhi4>
    5268:	7b 01       	movw	r14, r22
    const int startM = invalidStartTime ? 0 : (startMinutesSinceMidnightLT % 60);
    526a:	cf 01       	movw	r24, r30
    526c:	6c e3       	ldi	r22, 0x3C	; 60
    526e:	70 e0       	ldi	r23, 0x00	; 0
    5270:	0e 94 cc 3d 	call	0x7b98	; 0x7b98 <__udivmodhi4>
    5274:	8c 01       	movw	r16, r24
    Serial.print('W'); Serial.print(startH); Serial_print_space(); Serial.print(startM);
    5276:	87 e1       	ldi	r24, 0x17	; 23
    5278:	95 e0       	ldi	r25, 0x05	; 5
    527a:	67 e5       	ldi	r22, 0x57	; 87
    527c:	0e 94 59 3b 	call	0x76b2	; 0x76b2 <Print::print(char)>
    5280:	87 e1       	ldi	r24, 0x17	; 23
    5282:	95 e0       	ldi	r25, 0x05	; 5
    5284:	b7 01       	movw	r22, r14
    5286:	4a e0       	ldi	r20, 0x0A	; 10
    5288:	50 e0       	ldi	r21, 0x00	; 0
    528a:	0e 94 87 3c 	call	0x790e	; 0x790e <Print::print(int, int)>
    528e:	0e 94 5d 27 	call	0x4eba	; 0x4eba <Serial_print_space()>
    5292:	87 e1       	ldi	r24, 0x17	; 23
    5294:	95 e0       	ldi	r25, 0x05	; 5
    5296:	b8 01       	movw	r22, r16
    5298:	4a e0       	ldi	r20, 0x0A	; 10
    529a:	50 e0       	ldi	r21, 0x00	; 0
    529c:	0e 94 87 3c 	call	0x790e	; 0x790e <Print::print(int, int)>
    Serial_print_space();
    52a0:	0e 94 5d 27 	call	0x4eba	; 0x4eba <Serial_print_space()>
    uint_least16_t endMinutesSinceMidnightLT = getSimpleScheduleOff(scheduleNumber);
    52a4:	8d 2d       	mov	r24, r13
    52a6:	0e 94 87 25 	call	0x4b0e	; 0x4b0e <getSimpleScheduleOff(unsigned char)>
    52aa:	fc 01       	movw	r30, r24
    const bool invalidEndTime = endMinutesSinceMidnightLT >= MINS_PER_DAY;
    const int endH = invalidEndTime ? 255 : (endMinutesSinceMidnightLT / 60);
    52ac:	85 e0       	ldi	r24, 0x05	; 5
    52ae:	e0 3a       	cpi	r30, 0xA0	; 160
    52b0:	f8 07       	cpc	r31, r24
    52b2:	30 f0       	brcs	.+12     	; 0x52c0 <serialStatusReport()+0x1a0>
    52b4:	00 e0       	ldi	r16, 0x00	; 0
    52b6:	10 e0       	ldi	r17, 0x00	; 0
    52b8:	8f ef       	ldi	r24, 0xFF	; 255
    52ba:	e8 2e       	mov	r14, r24
    52bc:	f1 2c       	mov	r15, r1
    52be:	0c c0       	rjmp	.+24     	; 0x52d8 <serialStatusReport()+0x1b8>
    52c0:	cf 01       	movw	r24, r30
    52c2:	6c e3       	ldi	r22, 0x3C	; 60
    52c4:	70 e0       	ldi	r23, 0x00	; 0
    52c6:	0e 94 cc 3d 	call	0x7b98	; 0x7b98 <__udivmodhi4>
    52ca:	7b 01       	movw	r14, r22
    const int endM = invalidEndTime ? 0 : (endMinutesSinceMidnightLT % 60);
    52cc:	cf 01       	movw	r24, r30
    52ce:	6c e3       	ldi	r22, 0x3C	; 60
    52d0:	70 e0       	ldi	r23, 0x00	; 0
    52d2:	0e 94 cc 3d 	call	0x7b98	; 0x7b98 <__udivmodhi4>
    52d6:	8c 01       	movw	r16, r24
    Serial.print('F'); Serial.print(endH); Serial_print_space(); Serial.print(endM);
    52d8:	87 e1       	ldi	r24, 0x17	; 23
    52da:	95 e0       	ldi	r25, 0x05	; 5
    52dc:	66 e4       	ldi	r22, 0x46	; 70
    52de:	0e 94 59 3b 	call	0x76b2	; 0x76b2 <Print::print(char)>
    52e2:	87 e1       	ldi	r24, 0x17	; 23
    52e4:	95 e0       	ldi	r25, 0x05	; 5
    52e6:	b7 01       	movw	r22, r14
    52e8:	4a e0       	ldi	r20, 0x0A	; 10
    52ea:	50 e0       	ldi	r21, 0x00	; 0
    52ec:	0e 94 87 3c 	call	0x790e	; 0x790e <Print::print(int, int)>
    52f0:	0e 94 5d 27 	call	0x4eba	; 0x4eba <Serial_print_space()>
    52f4:	87 e1       	ldi	r24, 0x17	; 23
    52f6:	95 e0       	ldi	r25, 0x05	; 5
    52f8:	b8 01       	movw	r22, r16
    52fa:	4a e0       	ldi	r20, 0x0A	; 10
    52fc:	50 e0       	ldi	r21, 0x00	; 0
    52fe:	0e 94 87 3c 	call	0x790e	; 0x790e <Print::print(int, int)>
  const uint_least8_t hh = getHoursLT();
  const uint_least8_t mm = getMinutesLT();
  Serial.print(';'); // End previous section.
  Serial.print('T'); Serial.print(hh); Serial_print_space(); Serial.print(mm);
  // Show all schedules set.
  for(uint8_t scheduleNumber = 0; scheduleNumber < MAX_SIMPLE_SCHEDULES; ++scheduleNumber)
    5302:	d3 94       	inc	r13
    5304:	82 e0       	ldi	r24, 0x02	; 2
    5306:	d8 16       	cp	r13, r24
    5308:	09 f0       	breq	.+2      	; 0x530c <serialStatusReport()+0x1ec>
    530a:	99 cf       	rjmp	.-206    	; 0x523e <serialStatusReport()+0x11e>
    const bool invalidEndTime = endMinutesSinceMidnightLT >= MINS_PER_DAY;
    const int endH = invalidEndTime ? 255 : (endMinutesSinceMidnightLT / 60);
    const int endM = invalidEndTime ? 0 : (endMinutesSinceMidnightLT % 60);
    Serial.print('F'); Serial.print(endH); Serial_print_space(); Serial.print(endM);
    }
  if(isAnyScheduleOnWARMNow()) { Serial.print('*'); } // Indicate that at least one schedule is active now.
    530c:	0e 94 ed 25 	call	0x4bda	; 0x4bda <isAnyScheduleOnWARMNow()>
    5310:	88 23       	and	r24, r24
    5312:	29 f0       	breq	.+10     	; 0x531e <serialStatusReport()+0x1fe>
    5314:	87 e1       	ldi	r24, 0x17	; 23
    5316:	95 e0       	ldi	r25, 0x05	; 5
    5318:	6a e2       	ldi	r22, 0x2A	; 42
    531a:	0e 94 59 3b 	call	0x76b2	; 0x76b2 <Print::print(char)>

  // *S* section: settable target/threshold temperatures, current target, and eco/smart/occupied flags.
#ifdef SETTABLE_TARGET_TEMPERATURES // Show thresholds and current target since no longer so easily deduced.
  Serial.print(';'); // Terminate previous section.
    531e:	87 e1       	ldi	r24, 0x17	; 23
    5320:	95 e0       	ldi	r25, 0x05	; 5
    5322:	6b e3       	ldi	r22, 0x3B	; 59
    5324:	0e 94 59 3b 	call	0x76b2	; 0x76b2 <Print::print(char)>
  Serial.print('S'); // Current settable temperature target, and FROST and WARM settings.
    5328:	87 e1       	ldi	r24, 0x17	; 23
    532a:	95 e0       	ldi	r25, 0x05	; 5
    532c:	63 e5       	ldi	r22, 0x53	; 83
    532e:	0e 94 59 3b 	call	0x76b2	; 0x76b2 <Print::print(char)>
  Serial.print(NominalRadValve.getTargetTempC());
    5332:	87 e1       	ldi	r24, 0x17	; 23
    5334:	95 e0       	ldi	r25, 0x05	; 5
    5336:	60 91 1c 02 	lds	r22, 0x021C
    533a:	4a e0       	ldi	r20, 0x0A	; 10
    533c:	50 e0       	ldi	r21, 0x00	; 0
    533e:	0e 94 35 3c 	call	0x786a	; 0x786a <Print::print(unsigned char, int)>
  Serial_print_space();
    5342:	0e 94 5d 27 	call	0x4eba	; 0x4eba <Serial_print_space()>
  Serial.print(getFROSTTargetC());
    5346:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <getFROSTTargetC()>
    534a:	68 2f       	mov	r22, r24
    534c:	87 e1       	ldi	r24, 0x17	; 23
    534e:	95 e0       	ldi	r25, 0x05	; 5
    5350:	4a e0       	ldi	r20, 0x0A	; 10
    5352:	50 e0       	ldi	r21, 0x00	; 0
    5354:	0e 94 35 3c 	call	0x786a	; 0x786a <Print::print(unsigned char, int)>
  Serial_print_space();
    5358:	0e 94 5d 27 	call	0x4eba	; 0x4eba <Serial_print_space()>
  Serial.print(getWARMTargetC());
    535c:	0e 94 cb 03 	call	0x796	; 0x796 <getWARMTargetC()>
    5360:	68 2f       	mov	r22, r24
    5362:	87 e1       	ldi	r24, 0x17	; 23
    5364:	95 e0       	ldi	r25, 0x05	; 5
    5366:	4a e0       	ldi	r20, 0x0A	; 10
    5368:	50 e0       	ldi	r21, 0x00	; 0
    536a:	0e 94 35 3c 	call	0x786a	; 0x786a <Print::print(unsigned char, int)>
#endif

  // *C* section: central hub values.
#if defined(ENABLE_BOILER_HUB)
  // Print optional hub boiler-on-time section if apparently set (non-zero) and thus in hub mode.
  const uint8_t boilerOnMinutes = getMinBoilerOnMinutes();
    536e:	0e 94 0f 04 	call	0x81e	; 0x81e <getMinBoilerOnMinutes()>
    5372:	18 2f       	mov	r17, r24
  if(boilerOnMinutes != 0)
    5374:	88 23       	and	r24, r24
    5376:	89 f0       	breq	.+34     	; 0x539a <serialStatusReport()+0x27a>
    {
    Serial.print(';'); // Terminate previous section.
    5378:	87 e1       	ldi	r24, 0x17	; 23
    537a:	95 e0       	ldi	r25, 0x05	; 5
    537c:	6b e3       	ldi	r22, 0x3B	; 59
    537e:	0e 94 59 3b 	call	0x76b2	; 0x76b2 <Print::print(char)>
    Serial.print('C'); // Indicate central hub mode available.
    5382:	87 e1       	ldi	r24, 0x17	; 23
    5384:	95 e0       	ldi	r25, 0x05	; 5
    5386:	63 e4       	ldi	r22, 0x43	; 67
    5388:	0e 94 59 3b 	call	0x76b2	; 0x76b2 <Print::print(char)>
    Serial.print(boilerOnMinutes); // Show min 'on' time, or zero if disabled.
    538c:	87 e1       	ldi	r24, 0x17	; 23
    538e:	95 e0       	ldi	r25, 0x05	; 5
    5390:	61 2f       	mov	r22, r17
    5392:	4a e0       	ldi	r20, 0x0A	; 10
    5394:	50 e0       	ldi	r21, 0x00	; 0
    5396:	0e 94 35 3c 	call	0x786a	; 0x786a <Print::print(unsigned char, int)>
#endif

  // *H* section: house codes for local FHT8V valve and if syncing, iff set.
#if defined(USE_MODULE_FHT8VSIMPLE)
  // Print optional house code section if codes set.
  const uint8_t hc1 = FHT8VGetHC1();
    539a:	0e 94 48 11 	call	0x2290	; 0x2290 <FHT8VGetHC1()>
    539e:	18 2f       	mov	r17, r24
  if(hc1 != 255)
    53a0:	8f 3f       	cpi	r24, 0xFF	; 255
    53a2:	19 f1       	breq	.+70     	; 0x53ea <serialStatusReport()+0x2ca>
    {
    Serial.print(F(";HC"));
    53a4:	87 e1       	ldi	r24, 0x17	; 23
    53a6:	95 e0       	ldi	r25, 0x05	; 5
    53a8:	6b eb       	ldi	r22, 0xBB	; 187
    53aa:	73 e0       	ldi	r23, 0x03	; 3
    53ac:	0e 94 36 3b 	call	0x766c	; 0x766c <Print::print(__FlashStringHelper const*)>
    Serial.print(hc1);
    53b0:	87 e1       	ldi	r24, 0x17	; 23
    53b2:	95 e0       	ldi	r25, 0x05	; 5
    53b4:	61 2f       	mov	r22, r17
    53b6:	4a e0       	ldi	r20, 0x0A	; 10
    53b8:	50 e0       	ldi	r21, 0x00	; 0
    53ba:	0e 94 35 3c 	call	0x786a	; 0x786a <Print::print(unsigned char, int)>
    Serial_print_space();
    53be:	0e 94 5d 27 	call	0x4eba	; 0x4eba <Serial_print_space()>
    Serial.print(FHT8VGetHC2());
    53c2:	0e 94 51 11 	call	0x22a2	; 0x22a2 <FHT8VGetHC2()>
    53c6:	68 2f       	mov	r22, r24
    53c8:	87 e1       	ldi	r24, 0x17	; 23
    53ca:	95 e0       	ldi	r25, 0x05	; 5
    53cc:	4a e0       	ldi	r20, 0x0A	; 10
    53ce:	50 e0       	ldi	r21, 0x00	; 0
    53d0:	0e 94 35 3c 	call	0x786a	; 0x786a <Print::print(unsigned char, int)>
    if(!isSyncedWithFHT8V())
    53d4:	0e 94 74 11 	call	0x22e8	; 0x22e8 <isSyncedWithFHT8V()>
    53d8:	88 23       	and	r24, r24
    53da:	39 f4       	brne	.+14     	; 0x53ea <serialStatusReport()+0x2ca>
      {
      Serial_print_space();
    53dc:	0e 94 5d 27 	call	0x4eba	; 0x4eba <Serial_print_space()>
      Serial.print('s'); // Indicate syncing with trailing lower-case 's' in field...
    53e0:	87 e1       	ldi	r24, 0x17	; 23
    53e2:	95 e0       	ldi	r25, 0x05	; 5
    53e4:	63 e7       	ldi	r22, 0x73	; 115
    53e6:	0e 94 59 3b 	call	0x76b2	; 0x76b2 <Print::print(char)>
    }
#endif

#if 1
  // *M* section: min-valve-percentage open section, iff not at default value.
  const uint8_t minValvePcOpen = NominalRadValve.getMinValvePcReallyOpen();
    53ea:	0e 94 6f 04 	call	0x8de	; 0x8de <ModelledRadValve::getMinValvePcReallyOpen()>
    53ee:	18 2f       	mov	r17, r24
  if(DEFAULT_MIN_VALVE_PC_REALLY_OPEN != minValvePcOpen) { Serial.print(F(";M")); Serial.print(minValvePcOpen); }
    53f0:	8a 30       	cpi	r24, 0x0A	; 10
    53f2:	69 f0       	breq	.+26     	; 0x540e <serialStatusReport()+0x2ee>
    53f4:	87 e1       	ldi	r24, 0x17	; 23
    53f6:	95 e0       	ldi	r25, 0x05	; 5
    53f8:	68 eb       	ldi	r22, 0xB8	; 184
    53fa:	73 e0       	ldi	r23, 0x03	; 3
    53fc:	0e 94 36 3b 	call	0x766c	; 0x766c <Print::print(__FlashStringHelper const*)>
    5400:	87 e1       	ldi	r24, 0x17	; 23
    5402:	95 e0       	ldi	r25, 0x05	; 5
    5404:	61 2f       	mov	r22, r17
    5406:	4a e0       	ldi	r20, 0x0A	; 10
    5408:	50 e0       	ldi	r21, 0x00	; 0
    540a:	0e 94 35 3c 	call	0x786a	; 0x786a <Print::print(unsigned char, int)>
#endif

#if 1 && defined(ALLOW_JSON_OUTPUT)
  Serial.print(';'); // Terminate previous section.
    540e:	87 e1       	ldi	r24, 0x17	; 23
    5410:	95 e0       	ldi	r25, 0x05	; 5
    5412:	6b e3       	ldi	r22, 0x3B	; 59
    5414:	0e 94 59 3b 	call	0x76b2	; 0x76b2 <Print::print(char)>
  char buf[80];
  static SimpleStatsRotation<5> ss1; // Configured for maximum different stats.
    5418:	80 91 7d 03 	lds	r24, 0x037D
    541c:	88 23       	and	r24, r24
    541e:	a9 f5       	brne	.+106    	; 0x548a <serialStatusReport()+0x36a>
    5420:	8d e7       	ldi	r24, 0x7D	; 125
    5422:	93 e0       	ldi	r25, 0x03	; 3
    5424:	0e 94 fe 3a 	call	0x75fc	; 0x75fc <__cxa_guard_acquire>
    5428:	89 2b       	or	r24, r25
    542a:	79 f1       	breq	.+94     	; 0x548a <serialStatusReport()+0x36a>

    // Initialise base with appropriate storage (non-null) and capacity knowledge.
    SimpleStatsRotationBase(DescValueTuple *_stats, const uint8_t _capacity)
      : capacity(_capacity), stats(_stats), nStats(0),
        lastTXed(~0), lastTXedLoPri(~0), lastTXedHiPri(~0), // Show the first item on the first pass...
        id(NULL)
    542c:	85 e0       	ldi	r24, 0x05	; 5
    542e:	80 93 85 03 	sts	0x0385, r24
    5432:	2f e8       	ldi	r18, 0x8F	; 143
    5434:	33 e0       	ldi	r19, 0x03	; 3
    5436:	30 93 87 03 	sts	0x0387, r19
    543a:	20 93 86 03 	sts	0x0386, r18
    543e:	10 92 88 03 	sts	0x0388, r1
    5442:	8f ef       	ldi	r24, 0xFF	; 255
    5444:	80 93 89 03 	sts	0x0389, r24
    5448:	80 93 8a 03 	sts	0x038A, r24
    544c:	80 93 8b 03 	sts	0x038B, r24
    5450:	10 92 8d 03 	sts	0x038D, r1
    5454:	10 92 8c 03 	sts	0x038C, r1
    // is displayed immediately after the @/ID field when enabled,
    // and missing count values suggest a lost transmission somewhere.
    // Takes minimal space (1 byte).
    struct WriteCount
      {
      WriteCount() : enabled(0), count(0) { }
    5458:	80 91 8e 03 	lds	r24, 0x038E
    545c:	80 7f       	andi	r24, 0xF0	; 240
    545e:	80 93 8e 03 	sts	0x038E, r24
    5462:	f9 01       	movw	r30, r18
    // The default sensitivity is set to forbid transmission at all but minimum (0) leaf TX security settings.
    // By default the stat is normal priority.
    GenericStatsDescriptor(const char * const statKey,
                           const uint8_t statSensitivity = 1,
                           const bool statHighPriority = false)
      : key(statKey), sensitivity(statSensitivity), highPriority(statHighPriority)
    5464:	91 e0       	ldi	r25, 0x01	; 1
    5466:	11 82       	std	Z+1, r1	; 0x01
    5468:	10 82       	st	Z, r1
    546a:	92 83       	std	Z+2, r25	; 0x02
    546c:	13 82       	std	Z+3, r1	; 0x03
#endif

  protected:
    struct DescValueTuple
      {
      DescValueTuple() : descriptor(NULL), value(0) { }
    546e:	15 82       	std	Z+5, r1	; 0x05
    5470:	14 82       	std	Z+4, r1	; 0x04
      int value;

      // Various run-time flags.
      struct Flags
        {
        Flags() : changed(false) { }
    5472:	86 81       	ldd	r24, Z+6	; 0x06
    5474:	8e 7f       	andi	r24, 0xFE	; 254
    5476:	86 83       	std	Z+6, r24	; 0x06
    5478:	37 96       	adiw	r30, 0x07	; 7
    // Stats to be tracked and sent; mandatory/priority items must be first.
    // A copy is taken of the user-supplied set of descriptions, preserving order.
    DescValueTuple stats[MaxStats];

  public:
    SimpleStatsRotation() : SimpleStatsRotationBase(stats, MaxStats) { }
    547a:	83 e0       	ldi	r24, 0x03	; 3
    547c:	e2 3b       	cpi	r30, 0xB2	; 178
    547e:	f8 07       	cpc	r31, r24
    5480:	91 f7       	brne	.-28     	; 0x5466 <serialStatusReport()+0x346>
    5482:	8d e7       	ldi	r24, 0x7D	; 125
    5484:	93 e0       	ldi	r25, 0x03	; 3
    5486:	0e 94 08 3b 	call	0x7610	; 0x7610 <__cxa_guard_release>
//  ss1.put(TemperatureC16);
#if defined(HUMIDITY_SENSOR_SUPPORT)
  ss1.put(RelHumidity);
    548a:	85 e8       	ldi	r24, 0x85	; 133
    548c:	93 e0       	ldi	r25, 0x03	; 3
    548e:	6f eb       	ldi	r22, 0xBF	; 191
    5490:	73 e0       	ldi	r23, 0x03	; 3
    5492:	0e 94 a2 07 	call	0xf44	; 0xf44 <bool SimpleStatsRotationBase::put<unsigned char>(Sensor<unsigned char> const&)>
#endif
  ss1.put(AmbLight);
    5496:	85 e8       	ldi	r24, 0x85	; 133
    5498:	93 e0       	ldi	r25, 0x03	; 3
    549a:	69 eb       	ldi	r22, 0xB9	; 185
    549c:	73 e0       	ldi	r23, 0x03	; 3
    549e:	0e 94 a2 07 	call	0xf44	; 0xf44 <bool SimpleStatsRotationBase::put<unsigned char>(Sensor<unsigned char> const&)>
    // True if successful, false otherwise (eg capacity already reached).
    bool put(SimpleStatsKey key, int newValue);

    // Create/update value for the given sensor.
    // True if successful, false otherwise (eg capacity already reached).
    template <class T> bool put(const Sensor<T> &s) { return(put(s.tag(), s.get())); }
    54a2:	e0 91 5f 03 	lds	r30, 0x035F
    54a6:	f0 91 60 03 	lds	r31, 0x0360
    54aa:	00 84       	ldd	r0, Z+8	; 0x08
    54ac:	f1 85       	ldd	r31, Z+9	; 0x09
    54ae:	e0 2d       	mov	r30, r0
    54b0:	8f e5       	ldi	r24, 0x5F	; 95
    54b2:	93 e0       	ldi	r25, 0x03	; 3
    54b4:	09 95       	icall
    54b6:	8c 01       	movw	r16, r24
    54b8:	e0 91 5f 03 	lds	r30, 0x035F
    54bc:	f0 91 60 03 	lds	r31, 0x0360
    54c0:	02 80       	ldd	r0, Z+2	; 0x02
    54c2:	f3 81       	ldd	r31, Z+3	; 0x03
    54c4:	e0 2d       	mov	r30, r0
    54c6:	8f e5       	ldi	r24, 0x5F	; 95
    54c8:	93 e0       	ldi	r25, 0x03	; 3
    54ca:	09 95       	icall
    54cc:	ac 01       	movw	r20, r24
    54ce:	85 e8       	ldi	r24, 0x85	; 133
    54d0:	93 e0       	ldi	r25, 0x03	; 3
    54d2:	b8 01       	movw	r22, r16
    54d4:	0e 94 ed 19 	call	0x33da	; 0x33da <SimpleStatsRotationBase::put(char const*, int)>
  ss1.put(Supply_mV);
#if defined(OCCUPANCY_SUPPORT)
  ss1.put(Occupancy);
    54d8:	85 e8       	ldi	r24, 0x85	; 133
    54da:	93 e0       	ldi	r25, 0x03	; 3
    54dc:	62 e1       	ldi	r22, 0x12	; 18
    54de:	72 e0       	ldi	r23, 0x02	; 2
    54e0:	0e 94 a2 07 	call	0xf44	; 0xf44 <bool SimpleStatsRotationBase::put<unsigned char>(Sensor<unsigned char> const&)>
//  ss1.put(Occupancy.vacHTag(), Occupancy.getVacancyH()); // EXPERIMENTAL
#endif
#if 1 && defined(DEBUG)
    ss1.put(NominalRadValve.tagCMPC(), NominalRadValve.getCumulativeMovementPC()); // EXPERIMENTAL
    54e4:	40 91 25 02 	lds	r20, 0x0225
    54e8:	50 91 26 02 	lds	r21, 0x0226
    54ec:	5f 70       	andi	r21, 0x0F	; 15
    54ee:	85 e8       	ldi	r24, 0x85	; 133
    54f0:	93 e0       	ldi	r25, 0x03	; 3
    54f2:	66 e2       	ldi	r22, 0x26	; 38
    54f4:	71 e0       	ldi	r23, 0x01	; 1
    54f6:	0e 94 ed 19 	call	0x33da	; 0x33da <SimpleStatsRotationBase::put(char const*, int)>
#endif
  const uint8_t wrote = ss1.writeJSON((uint8_t *)buf, sizeof(buf), 0, true);
    54fa:	85 e8       	ldi	r24, 0x85	; 133
    54fc:	93 e0       	ldi	r25, 0x03	; 3
    54fe:	6e 01       	movw	r12, r28
    5500:	08 94       	sec
    5502:	c1 1c       	adc	r12, r1
    5504:	d1 1c       	adc	r13, r1
    5506:	b6 01       	movw	r22, r12
    5508:	40 e5       	ldi	r20, 0x50	; 80
    550a:	20 e0       	ldi	r18, 0x00	; 0
    550c:	01 e0       	ldi	r16, 0x01	; 1
    550e:	ee 24       	eor	r14, r14
    5510:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)>
  if(0 != wrote) { Serial.print(buf); }
    5514:	88 23       	and	r24, r24
    5516:	29 f0       	breq	.+10     	; 0x5522 <serialStatusReport()+0x402>
    5518:	87 e1       	ldi	r24, 0x17	; 23
    551a:	95 e0       	ldi	r25, 0x05	; 5
    551c:	b6 01       	movw	r22, r12
    551e:	0e 94 9a 3c 	call	0x7934	; 0x7934 <Print::print(char const*)>
#endif

  // Terminate line.
  Serial.println();
    5522:	87 e1       	ldi	r24, 0x17	; 23
    5524:	95 e0       	ldi	r25, 0x05	; 5
    5526:	0e 94 61 3b 	call	0x76c2	; 0x76c2 <Print::println()>

  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  flushSerialSCTSensitive();
    552a:	0e 94 04 21 	call	0x4208	; 0x4208 <flushSerialSCTSensitive()>

  if(neededWaking) { powerDownSerial(); }
    552e:	bb 20       	and	r11, r11
    5530:	11 f0       	breq	.+4      	; 0x5536 <serialStatusReport()+0x416>
    5532:	0e 94 ce 20 	call	0x419c	; 0x419c <powerDownSerial()>
  }
    5536:	c0 5b       	subi	r28, 0xB0	; 176
    5538:	df 4f       	sbci	r29, 0xFF	; 255
    553a:	0f b6       	in	r0, 0x3f	; 63
    553c:	f8 94       	cli
    553e:	de bf       	out	0x3e, r29	; 62
    5540:	0f be       	out	0x3f, r0	; 63
    5542:	cd bf       	out	0x3d, r28	; 61
    5544:	cf 91       	pop	r28
    5546:	df 91       	pop	r29
    5548:	1f 91       	pop	r17
    554a:	0f 91       	pop	r16
    554c:	ff 90       	pop	r15
    554e:	ef 90       	pop	r14
    5550:	df 90       	pop	r13
    5552:	cf 90       	pop	r12
    5554:	bf 90       	pop	r11
    5556:	08 95       	ret

00005558 <pollCLI(unsigned char)>:
// Used to poll user side for CLI input until specified sub-cycle time.
// Commands should be sent terminated by CR *or* LF; both may prevent 'E' (exit) from working properly.
// A period of less than (say) 500ms will be difficult for direct human response on a raw terminal.
// A period of less than (say) 100ms is not recommended to avoid possibility of overrun on long interactions.
// NOT RENTRANT (eg uses static state for speed and code space).
void pollCLI(const uint8_t maxSCT)
    5558:	bf 92       	push	r11
    555a:	cf 92       	push	r12
    555c:	df 92       	push	r13
    555e:	ef 92       	push	r14
    5560:	ff 92       	push	r15
    5562:	0f 93       	push	r16
    5564:	1f 93       	push	r17
    5566:	df 93       	push	r29
    5568:	cf 93       	push	r28
    556a:	00 d0       	rcall	.+0      	; 0x556c <pollCLI(unsigned char)+0x14>
    556c:	00 d0       	rcall	.+0      	; 0x556e <pollCLI(unsigned char)+0x16>
    556e:	00 d0       	rcall	.+0      	; 0x5570 <pollCLI(unsigned char)+0x18>
    5570:	cd b7       	in	r28, 0x3d	; 61
    5572:	de b7       	in	r29, 0x3e	; 62
    5574:	d8 2e       	mov	r13, r24
  {
  // Compute safe limit time given granularity of sleep and buffer fill.
  const uint8_t targetMaxSCT = (maxSCT <= MIN_POLL_SCT) ? ((uint8_t) 0) : ((uint8_t) (maxSCT - 1 - MIN_POLL_SCT));
    5576:	22 e0       	ldi	r18, 0x02	; 2
    5578:	28 17       	cp	r18, r24
    557a:	10 f0       	brcs	.+4      	; 0x5580 <pollCLI(unsigned char)+0x28>
    557c:	00 e0       	ldi	r16, 0x00	; 0
    557e:	02 c0       	rjmp	.+4      	; 0x5584 <pollCLI(unsigned char)+0x2c>
    5580:	08 2f       	mov	r16, r24
    5582:	03 50       	subi	r16, 0x03	; 3
  if(getSubCycleTime() >= targetMaxSCT) { return; } // Too short to try.
    5584:	80 91 b2 00 	lds	r24, 0x00B2
    5588:	80 17       	cp	r24, r16
    558a:	08 f0       	brcs	.+2      	; 0x558e <pollCLI(unsigned char)+0x36>
    558c:	1d c3       	rjmp	.+1594   	; 0x5bc8 <pollCLI(unsigned char)+0x670>

  const bool neededWaking = powerUpSerialIfDisabled();
    558e:	0e 94 19 21 	call	0x4232	; 0x4232 <powerUpSerialIfDisabled()>
    5592:	b8 2e       	mov	r11, r24
    5594:	04 c0       	rjmp	.+8      	; 0x559e <pollCLI(unsigned char)+0x46>

  // Purge any stray pending input, such as a trailing LF from previous input.
  while(Serial.available() > 0) { Serial.read(); }
    5596:	87 e1       	ldi	r24, 0x17	; 23
    5598:	95 e0       	ldi	r25, 0x05	; 5
    559a:	0e 94 20 3a 	call	0x7440	; 0x7440 <HardwareSerial::read()>
    559e:	87 e1       	ldi	r24, 0x17	; 23
    55a0:	95 e0       	ldi	r25, 0x05	; 5
    55a2:	0e 94 ef 39 	call	0x73de	; 0x73de <HardwareSerial::available()>
    55a6:	18 16       	cp	r1, r24
    55a8:	19 06       	cpc	r1, r25
    55aa:	ac f3       	brlt	.-22     	; 0x5596 <pollCLI(unsigned char)+0x3e>

  // Generate and flush prompt character to the user, after a CRLF to reduce ambiguity.
  // Do this AFTER flushing the input so that sending command immediately after prompt should work.
  Serial.println();
    55ac:	87 e1       	ldi	r24, 0x17	; 23
    55ae:	95 e0       	ldi	r25, 0x05	; 5
    55b0:	0e 94 61 3b 	call	0x76c2	; 0x76c2 <Print::println()>
  Serial.print(CLIPromptChar);
    55b4:	87 e1       	ldi	r24, 0x17	; 23
    55b6:	95 e0       	ldi	r25, 0x05	; 5
    55b8:	6e e3       	ldi	r22, 0x3E	; 62
    55ba:	0e 94 59 3b 	call	0x76b2	; 0x76b2 <Print::print(char)>
  // Idle a short while to try to save energy, waiting for serial TX end and possible RX response start.
  flushSerialSCTSensitive();
    55be:	0e 94 04 21 	call	0x4208	; 0x4208 <flushSerialSCTSensitive()>
    55c2:	10 e0       	ldi	r17, 0x00	; 0
    // Idle waiting for input, to save power, then/else do something useful with some CPU cycles...
#if CAN_IDLE_30MS
    // Minimise power consumption leaving CPU/UART clock running, if no danger of RX overrun.
    // Don't do this too close to end of target end time to avoid missing it.
    // Note: may get woken on timer0 interrupts as well as RX and watchdog.
    if(sct < targetMaxSCT-2) { idle15AndPoll(); continue; }
    55c4:	e0 2e       	mov	r14, r16
    55c6:	ff 24       	eor	r15, r15
    55c8:	8e ef       	ldi	r24, 0xFE	; 254
    55ca:	9f ef       	ldi	r25, 0xFF	; 255
    55cc:	e8 0e       	add	r14, r24
    55ce:	f9 1e       	adc	r15, r25
#ifdef ENABLE_AVR_IDLE_MODE
// Idle productively polling I/O, etc, across the system while spending time in low-power mode if possible.
// Typically sleeps for nominally up to 30ms; tries to allow ealier wakeup if interrupt is received, etc.
// (Will often be prematurely woken by timer0 with ~16ms interval.)
// True iff watchdog timer expired; false if something else woke the CPU.
static bool inline idle15AndPoll() { const bool wd = idleCPU(WDTO_15MS); pollIO(!wd); return(wd); }
    55d0:	cc 24       	eor	r12, r12
    55d2:	c3 94       	inc	r12
  //Serial.setTimeout(timeoutms); const int n = Serial.readBytesUntil('\r', buf, MAXIMUM_CLI_RESPONSE_CHARS);
  uint8_t n = 0;
  while(n < MAXIMUM_CLI_RESPONSE_CHARS)
    {
    // Read next character if immediately available.
    if(Serial.available() > 0)
    55d4:	87 e1       	ldi	r24, 0x17	; 23
    55d6:	95 e0       	ldi	r25, 0x05	; 5
    55d8:	0e 94 ef 39 	call	0x73de	; 0x73de <HardwareSerial::available()>
    55dc:	18 16       	cp	r1, r24
    55de:	19 06       	cpc	r1, r25
    55e0:	0c f0       	brlt	.+2      	; 0x55e4 <pollCLI(unsigned char)+0x8c>
    55e2:	43 c0       	rjmp	.+134    	; 0x566a <pollCLI(unsigned char)+0x112>
      {
      int ic = Serial.read();
    55e4:	87 e1       	ldi	r24, 0x17	; 23
    55e6:	95 e0       	ldi	r25, 0x05	; 5
    55e8:	0e 94 20 3a 	call	0x7440	; 0x7440 <HardwareSerial::read()>
    55ec:	bc 01       	movw	r22, r24
      if(('\r' == ic) || ('\n' == ic)) { break; } // Stop at CR, eg from CRLF, or LF.
    55ee:	8d 30       	cpi	r24, 0x0D	; 13
    55f0:	91 05       	cpc	r25, r1
    55f2:	09 f4       	brne	.+2      	; 0x55f6 <pollCLI(unsigned char)+0x9e>
    55f4:	50 c0       	rjmp	.+160    	; 0x5696 <pollCLI(unsigned char)+0x13e>
    55f6:	8a 30       	cpi	r24, 0x0A	; 10
    55f8:	91 05       	cpc	r25, r1
    55fa:	09 f4       	brne	.+2      	; 0x55fe <pollCLI(unsigned char)+0xa6>
    55fc:	4c c0       	rjmp	.+152    	; 0x5696 <pollCLI(unsigned char)+0x13e>
#ifdef CLI_INTERACTIVE_ECHO
      if(('\b' == ic) || (127 == ic))
    55fe:	88 30       	cpi	r24, 0x08	; 8
    5600:	91 05       	cpc	r25, r1
    5602:	19 f0       	breq	.+6      	; 0x560a <pollCLI(unsigned char)+0xb2>
    5604:	8f 37       	cpi	r24, 0x7F	; 127
    5606:	91 05       	cpc	r25, r1
    5608:	99 f4       	brne	.+38     	; 0x5630 <pollCLI(unsigned char)+0xd8>
        {
        // Handle backspace or delete as delete...
        if(n > 0) // Ignore unless something to delete...
    560a:	11 23       	and	r17, r17
    560c:	19 f3       	breq	.-58     	; 0x55d4 <pollCLI(unsigned char)+0x7c>
          {
          Serial.print('\b');
    560e:	87 e1       	ldi	r24, 0x17	; 23
    5610:	95 e0       	ldi	r25, 0x05	; 5
    5612:	68 e0       	ldi	r22, 0x08	; 8
    5614:	0e 94 59 3b 	call	0x76b2	; 0x76b2 <Print::print(char)>
          Serial.print(' ');
    5618:	87 e1       	ldi	r24, 0x17	; 23
    561a:	95 e0       	ldi	r25, 0x05	; 5
    561c:	60 e2       	ldi	r22, 0x20	; 32
    561e:	0e 94 59 3b 	call	0x76b2	; 0x76b2 <Print::print(char)>
          Serial.print('\b');
    5622:	87 e1       	ldi	r24, 0x17	; 23
    5624:	95 e0       	ldi	r25, 0x05	; 5
    5626:	68 e0       	ldi	r22, 0x08	; 8
    5628:	0e 94 59 3b 	call	0x76b2	; 0x76b2 <Print::print(char)>
          --n;
    562c:	11 50       	subi	r17, 0x01	; 1
    562e:	2f c0       	rjmp	.+94     	; 0x568e <pollCLI(unsigned char)+0x136>
          }
        continue;
        }
#endif
      if((ic < 32) || (ic > 126)) { continue; } // Drop bogus characters.
    5630:	80 97       	sbiw	r24, 0x20	; 32
    5632:	8f 35       	cpi	r24, 0x5F	; 95
    5634:	91 05       	cpc	r25, r1
    5636:	58 f5       	brcc	.+86     	; 0x568e <pollCLI(unsigned char)+0x136>
      // Ignore any leading char that is not a letter (or '?'),
      // and force leading (command) char to upper case.
      if(0 == n)
    5638:	11 23       	and	r17, r17
    563a:	61 f4       	brne	.+24     	; 0x5654 <pollCLI(unsigned char)+0xfc>
        {
        ic = toupper(ic);
    563c:	cb 01       	movw	r24, r22
    563e:	0e 94 36 3e 	call	0x7c6c	; 0x7c6c <toupper>
    5642:	bc 01       	movw	r22, r24
        if(('?' != ic) && ((ic < 'A') || (ic > 'Z'))) { continue; }
    5644:	8f 33       	cpi	r24, 0x3F	; 63
    5646:	91 05       	cpc	r25, r1
    5648:	29 f0       	breq	.+10     	; 0x5654 <pollCLI(unsigned char)+0xfc>
    564a:	81 54       	subi	r24, 0x41	; 65
    564c:	90 40       	sbci	r25, 0x00	; 0
    564e:	4a 97       	sbiw	r24, 0x1a	; 26
    5650:	08 f0       	brcs	.+2      	; 0x5654 <pollCLI(unsigned char)+0xfc>
    5652:	c0 cf       	rjmp	.-128    	; 0x55d4 <pollCLI(unsigned char)+0x7c>
        }
      // Store the incoming char.
      buf[n++] = (char) ic;
    5654:	e1 2f       	mov	r30, r17
    5656:	f0 e0       	ldi	r31, 0x00	; 0
    5658:	ed 58       	subi	r30, 0x8D	; 141
    565a:	fc 4f       	sbci	r31, 0xFC	; 252
    565c:	60 83       	st	Z, r22
    565e:	1f 5f       	subi	r17, 0xFF	; 255
#ifdef CLI_INTERACTIVE_ECHO
      Serial.print((char) ic); // Echo immediately.
    5660:	87 e1       	ldi	r24, 0x17	; 23
    5662:	95 e0       	ldi	r25, 0x05	; 5
    5664:	0e 94 59 3b 	call	0x76b2	; 0x76b2 <Print::print(char)>
    5668:	12 c0       	rjmp	.+36     	; 0x568e <pollCLI(unsigned char)+0x136>
#endif
      continue;
      }
    // Quit WITHOUT PROCESSING THE POSSIBLY-INCOMPLETE INPUT if time limit is hit (or very close).
    const uint8_t sct = getSubCycleTime();
    566a:	80 91 b2 00 	lds	r24, 0x00B2
    if(sct >= targetMaxSCT)
    566e:	80 17       	cp	r24, r16
    5670:	08 f0       	brcs	.+2      	; 0x5674 <pollCLI(unsigned char)+0x11c>
    5672:	90 c2       	rjmp	.+1312   	; 0x5b94 <pollCLI(unsigned char)+0x63c>
    // Idle waiting for input, to save power, then/else do something useful with some CPU cycles...
#if CAN_IDLE_30MS
    // Minimise power consumption leaving CPU/UART clock running, if no danger of RX overrun.
    // Don't do this too close to end of target end time to avoid missing it.
    // Note: may get woken on timer0 interrupts as well as RX and watchdog.
    if(sct < targetMaxSCT-2) { idle15AndPoll(); continue; }
    5674:	90 e0       	ldi	r25, 0x00	; 0
    5676:	8e 15       	cp	r24, r14
    5678:	9f 05       	cpc	r25, r15
    567a:	3c f4       	brge	.+14     	; 0x568a <pollCLI(unsigned char)+0x132>
    567c:	80 e0       	ldi	r24, 0x00	; 0
    567e:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <idleCPU(signed char)>
    5682:	8c 25       	eor	r24, r12
    5684:	0e 94 1c 07 	call	0xe38	; 0xe38 <pollIO(bool)>
    5688:	02 c0       	rjmp	.+4      	; 0x568e <pollCLI(unsigned char)+0x136>
#endif
    burnHundredsOfCyclesProductivelyAndPoll(); // Use time time to poll for I/O, etc.
    568a:	0e 94 e8 20 	call	0x41d0	; 0x41d0 <burnHundredsOfCyclesProductivelyAndPoll()>
  // Read a line up to a terminating CR, either on its own or as part of CRLF.
  // (Note that command content and timing may be useful to fold into PRNG entropy pool.)
  static char buf[MAXIMUM_CLI_RESPONSE_CHARS+1]; // Note: static state, efficient for small command lines.  Space for terminating '\0'.
  //Serial.setTimeout(timeoutms); const int n = Serial.readBytesUntil('\r', buf, MAXIMUM_CLI_RESPONSE_CHARS);
  uint8_t n = 0;
  while(n < MAXIMUM_CLI_RESPONSE_CHARS)
    568e:	19 30       	cpi	r17, 0x09	; 9
    5690:	08 f4       	brcc	.+2      	; 0x5694 <pollCLI(unsigned char)+0x13c>
    5692:	a0 cf       	rjmp	.-192    	; 0x55d4 <pollCLI(unsigned char)+0x7c>
    5694:	03 c0       	rjmp	.+6      	; 0x569c <pollCLI(unsigned char)+0x144>
    if(sct < targetMaxSCT-2) { idle15AndPoll(); continue; }
#endif
    burnHundredsOfCyclesProductivelyAndPoll(); // Use time time to poll for I/O, etc.
    }

  if(n > 0)
    5696:	11 23       	and	r17, r17
    5698:	09 f4       	brne	.+2      	; 0x569c <pollCLI(unsigned char)+0x144>
    569a:	7c c2       	rjmp	.+1272   	; 0x5b94 <pollCLI(unsigned char)+0x63c>
    {
    // Restart the CLI timer on receipt of plausible (ASCII) input (cf noise from UART floating or starting up),
    // Else print a very brief low-CPU-cost help message and give up as efficiently and safely and quickly as possible.
    const char firstChar = buf[0];
    const bool plausibleCommand = ((firstChar >= '?') && (firstChar <= 'z'));
    if(plausibleCommand) { resetCLIActiveTimer(); }
    569c:	80 91 73 03 	lds	r24, 0x0373
    56a0:	8f 53       	subi	r24, 0x3F	; 63
    56a2:	8c 33       	cpi	r24, 0x3C	; 60
    56a4:	08 f0       	brcs	.+2      	; 0x56a8 <pollCLI(unsigned char)+0x150>
    56a6:	46 c0       	rjmp	.+140    	; 0x5734 <pollCLI(unsigned char)+0x1dc>
#define CLI_DEFAULT_TIMEOUT_M 2
static volatile uint8_t CLITimeoutM = CLI_DEFAULT_TIMEOUT_M;

// Reset CLI active timer to the full whack before it goes inactive again (ie makes CLI active for a while).
// Thread-safe.
void resetCLIActiveTimer() { CLITimeoutM = CLI_DEFAULT_TIMEOUT_M; }
    56a8:	82 e0       	ldi	r24, 0x02	; 2
    56aa:	80 93 3b 01 	sts	0x013B, r24
      if(neededWaking) { powerDownSerial(); }
      return;
      }

    // Null-terminate the received command line.
    buf[n] = '\0';
    56ae:	e1 2f       	mov	r30, r17
    56b0:	f0 e0       	ldi	r31, 0x00	; 0
    56b2:	ed 58       	subi	r30, 0x8D	; 141
    56b4:	fc 4f       	sbci	r31, 0xFC	; 252
    56b6:	10 82       	st	Z, r1

    // strupr(buf); // Force to upper-case
#ifdef CLI_INTERACTIVE_ECHO
    Serial.println(); // ACK user's end-of-line.
    56b8:	87 e1       	ldi	r24, 0x17	; 23
    56ba:	95 e0       	ldi	r25, 0x05	; 5
    56bc:	0e 94 61 3b 	call	0x76c2	; 0x76c2 <Print::println()>
    Serial.println(buf); // Echo the line received (asynchronously).
#endif

    // Process the input received, with action based on the first char...
    bool showStatus = true; // Default to showing status.
    switch(buf[0])
    56c0:	80 91 73 03 	lds	r24, 0x0373
    56c4:	8f 34       	cpi	r24, 0x4F	; 79
    56c6:	09 f4       	brne	.+2      	; 0x56ca <pollCLI(unsigned char)+0x172>
    56c8:	5a c1       	rjmp	.+692    	; 0x597e <pollCLI(unsigned char)+0x426>
    56ca:	80 35       	cpi	r24, 0x50	; 80
    56cc:	bc f4       	brge	.+46     	; 0x56fc <pollCLI(unsigned char)+0x1a4>
    56ce:	86 34       	cpi	r24, 0x46	; 70
    56d0:	09 f4       	brne	.+2      	; 0x56d4 <pollCLI(unsigned char)+0x17c>
    56d2:	d7 c0       	rjmp	.+430    	; 0x5882 <pollCLI(unsigned char)+0x32a>
    56d4:	87 34       	cpi	r24, 0x47	; 71
    56d6:	4c f4       	brge	.+18     	; 0x56ea <pollCLI(unsigned char)+0x192>
    56d8:	84 34       	cpi	r24, 0x44	; 68
    56da:	09 f4       	brne	.+2      	; 0x56de <pollCLI(unsigned char)+0x186>
    56dc:	4b c0       	rjmp	.+150    	; 0x5774 <pollCLI(unsigned char)+0x21c>
    56de:	85 34       	cpi	r24, 0x45	; 69
    56e0:	0c f0       	brlt	.+2      	; 0x56e4 <pollCLI(unsigned char)+0x18c>
    56e2:	45 c0       	rjmp	.+138    	; 0x576e <pollCLI(unsigned char)+0x216>
    56e4:	83 34       	cpi	r24, 0x43	; 67
    56e6:	59 f5       	brne	.+86     	; 0x573e <pollCLI(unsigned char)+0x1e6>
    56e8:	2e c0       	rjmp	.+92     	; 0x5746 <pollCLI(unsigned char)+0x1ee>
    56ea:	89 34       	cpi	r24, 0x49	; 73
    56ec:	09 f4       	brne	.+2      	; 0x56f0 <pollCLI(unsigned char)+0x198>
    56ee:	2f c1       	rjmp	.+606    	; 0x594e <pollCLI(unsigned char)+0x3f6>
    56f0:	8c 34       	cpi	r24, 0x4C	; 76
    56f2:	09 f4       	brne	.+2      	; 0x56f6 <pollCLI(unsigned char)+0x19e>
    56f4:	30 c1       	rjmp	.+608    	; 0x5956 <pollCLI(unsigned char)+0x3fe>
    56f6:	88 34       	cpi	r24, 0x48	; 72
    56f8:	11 f5       	brne	.+68     	; 0x573e <pollCLI(unsigned char)+0x1e6>
    56fa:	ed c0       	rjmp	.+474    	; 0x58d6 <pollCLI(unsigned char)+0x37e>
    56fc:	84 35       	cpi	r24, 0x54	; 84
    56fe:	09 f4       	brne	.+2      	; 0x5702 <pollCLI(unsigned char)+0x1aa>
    5700:	cb c1       	rjmp	.+918    	; 0x5a98 <pollCLI(unsigned char)+0x540>
    5702:	85 35       	cpi	r24, 0x55	; 85
    5704:	4c f4       	brge	.+18     	; 0x5718 <pollCLI(unsigned char)+0x1c0>
    5706:	81 35       	cpi	r24, 0x51	; 81
    5708:	09 f4       	brne	.+2      	; 0x570c <pollCLI(unsigned char)+0x1b4>
    570a:	91 c1       	rjmp	.+802    	; 0x5a2e <pollCLI(unsigned char)+0x4d6>
    570c:	81 35       	cpi	r24, 0x51	; 81
    570e:	0c f4       	brge	.+2      	; 0x5712 <pollCLI(unsigned char)+0x1ba>
    5710:	4a c1       	rjmp	.+660    	; 0x59a6 <pollCLI(unsigned char)+0x44e>
    5712:	83 35       	cpi	r24, 0x53	; 83
    5714:	a1 f4       	brne	.+40     	; 0x573e <pollCLI(unsigned char)+0x1e6>
    5716:	8e c1       	rjmp	.+796    	; 0x5a34 <pollCLI(unsigned char)+0x4dc>
    5718:	87 35       	cpi	r24, 0x57	; 87
    571a:	09 f4       	brne	.+2      	; 0x571e <pollCLI(unsigned char)+0x1c6>
    571c:	ee c1       	rjmp	.+988    	; 0x5afa <pollCLI(unsigned char)+0x5a2>
    571e:	88 35       	cpi	r24, 0x58	; 88
    5720:	1c f4       	brge	.+6      	; 0x5728 <pollCLI(unsigned char)+0x1d0>
    5722:	86 35       	cpi	r24, 0x56	; 86
    5724:	61 f4       	brne	.+24     	; 0x573e <pollCLI(unsigned char)+0x1e6>
    5726:	e6 c1       	rjmp	.+972    	; 0x5af4 <pollCLI(unsigned char)+0x59c>
    5728:	88 35       	cpi	r24, 0x58	; 88
    572a:	09 f4       	brne	.+2      	; 0x572e <pollCLI(unsigned char)+0x1d6>
    572c:	ea c1       	rjmp	.+980    	; 0x5b02 <pollCLI(unsigned char)+0x5aa>
    572e:	8a 35       	cpi	r24, 0x5A	; 90
    5730:	31 f4       	brne	.+12     	; 0x573e <pollCLI(unsigned char)+0x1e6>
    5732:	fe c1       	rjmp	.+1020   	; 0x5b30 <pollCLI(unsigned char)+0x5d8>
    const char firstChar = buf[0];
    const bool plausibleCommand = ((firstChar >= '?') && (firstChar <= 'z'));
    if(plausibleCommand) { resetCLIActiveTimer(); }
    else
      {
      Serial.println(F("? for CLI help"));
    5734:	87 e1       	ldi	r24, 0x17	; 23
    5736:	95 e0       	ldi	r25, 0x05	; 5
    5738:	66 ef       	ldi	r22, 0xF6	; 246
    573a:	71 e0       	ldi	r23, 0x01	; 1
    573c:	28 c2       	rjmp	.+1104   	; 0x5b8e <pollCLI(unsigned char)+0x636>
    bool showStatus = true; // Default to showing status.
    switch(buf[0])
      {
      // Explicit request for help, or unrecognised first character.
      // Avoid showing status as may already be rather a lot of output.
      default: case '?': { dumpCLIUsage(maxSCT); showStatus = false; break; }
    573e:	8d 2d       	mov	r24, r13
    5740:	0e 94 ba 27 	call	0x4f74	; 0x4f74 <dumpCLIUsage(unsigned char)>
    5744:	20 c2       	rjmp	.+1088   	; 0x5b86 <pollCLI(unsigned char)+0x62e>
      case 'C':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 3 character sequence makes sense and is safe to tokenise, eg "C 0".
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    5746:	13 30       	cpi	r17, 0x03	; 3
    5748:	08 f4       	brcc	.+2      	; 0x574c <pollCLI(unsigned char)+0x1f4>
    574a:	3b c2       	rjmp	.+1142   	; 0x5bc2 <pollCLI(unsigned char)+0x66a>
    574c:	85 e7       	ldi	r24, 0x75	; 117
    574e:	93 e0       	ldi	r25, 0x03	; 3
    5750:	6b e2       	ldi	r22, 0x2B	; 43
    5752:	71 e0       	ldi	r23, 0x01	; 1
    5754:	ae 01       	movw	r20, r28
    5756:	4f 5f       	subi	r20, 0xFF	; 255
    5758:	5f 4f       	sbci	r21, 0xFF	; 255
    575a:	0e 94 1a 03 	call	0x634	; 0x634 <strtok_r>
    575e:	00 97       	sbiw	r24, 0x00	; 0
    5760:	09 f4       	brne	.+2      	; 0x5764 <pollCLI(unsigned char)+0x20c>
    5762:	2f c2       	rjmp	.+1118   	; 0x5bc2 <pollCLI(unsigned char)+0x66a>
          {
          const uint8_t m = (uint8_t) atoi(tok1);
    5764:	0e 94 cd 02 	call	0x59a	; 0x59a <atoi>
          setMinBoilerOnMinutes(m);
    5768:	0e 94 85 07 	call	0xf0a	; 0xf0a <setMinBoilerOnMinutes(unsigned char)>
    576c:	2a c2       	rjmp	.+1108   	; 0x5bc2 <pollCLI(unsigned char)+0x66a>
#endif

      // Exit/deactivate CLI immediately.
      // This should be followed by JUST CR ('\r') OR LF ('\b')
      // else the second will wake the CLI up again.
      case 'E': { CLITimeoutM = 0; break; }
    576e:	10 92 3b 01 	sts	0x013B, r1
    5772:	27 c2       	rjmp	.+1102   	; 0x5bc2 <pollCLI(unsigned char)+0x66a>
          }
#endif
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 3 character sequence makes sense and is safe to tokenise, eg "D 0".
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    5774:	13 30       	cpi	r17, 0x03	; 3
    5776:	08 f4       	brcc	.+2      	; 0x577a <pollCLI(unsigned char)+0x222>
    5778:	06 c2       	rjmp	.+1036   	; 0x5b86 <pollCLI(unsigned char)+0x62e>
    577a:	85 e7       	ldi	r24, 0x75	; 117
    577c:	93 e0       	ldi	r25, 0x03	; 3
    577e:	6b e2       	ldi	r22, 0x2B	; 43
    5780:	71 e0       	ldi	r23, 0x01	; 1
    5782:	ae 01       	movw	r20, r28
    5784:	4f 5f       	subi	r20, 0xFF	; 255
    5786:	5f 4f       	sbci	r21, 0xFF	; 255
    5788:	0e 94 1a 03 	call	0x634	; 0x634 <strtok_r>
    578c:	00 97       	sbiw	r24, 0x00	; 0
    578e:	09 f4       	brne	.+2      	; 0x5792 <pollCLI(unsigned char)+0x23a>
    5790:	fa c1       	rjmp	.+1012   	; 0x5b86 <pollCLI(unsigned char)+0x62e>
          {
          const uint8_t setN = (uint8_t) atoi(tok1);
    5792:	0e 94 cd 02 	call	0x59a	; 0x59a <atoi>
    5796:	08 2f       	mov	r16, r24
          const uint8_t thisHH = getHoursLT();
    5798:	0e 94 5d 24 	call	0x48ba	; 0x48ba <getHoursLT()>
    579c:	f8 2e       	mov	r15, r24
//          const uint8_t lastHH = (thisHH > 0) ? (thisHH-1) : 23;
          // Print label.
          switch(setN)
    579e:	06 30       	cpi	r16, 0x06	; 6
    57a0:	28 f4       	brcc	.+10     	; 0x57ac <pollCLI(unsigned char)+0x254>
    57a2:	04 30       	cpi	r16, 0x04	; 4
    57a4:	a0 f4       	brcc	.+40     	; 0x57ce <pollCLI(unsigned char)+0x276>
    57a6:	02 30       	cpi	r16, 0x02	; 2
    57a8:	48 f0       	brcs	.+18     	; 0x57bc <pollCLI(unsigned char)+0x264>
    57aa:	0c c0       	rjmp	.+24     	; 0x57c4 <pollCLI(unsigned char)+0x26c>
    57ac:	08 30       	cpi	r16, 0x08	; 8
    57ae:	a0 f0       	brcs	.+40     	; 0x57d8 <pollCLI(unsigned char)+0x280>
    57b0:	0a 30       	cpi	r16, 0x0A	; 10
    57b2:	c8 f0       	brcs	.+50     	; 0x57e6 <pollCLI(unsigned char)+0x28e>
            {
            default: { Serial.print('?'); break; }
    57b4:	87 e1       	ldi	r24, 0x17	; 23
    57b6:	95 e0       	ldi	r25, 0x05	; 5
    57b8:	6f e3       	ldi	r22, 0x3F	; 63
    57ba:	18 c0       	rjmp	.+48     	; 0x57ec <pollCLI(unsigned char)+0x294>
            case EE_STATS_SET_TEMP_BY_HOUR: case EE_STATS_SET_TEMP_BY_HOUR_SMOOTHED: { Serial.print('C'); break; }
    57bc:	87 e1       	ldi	r24, 0x17	; 23
    57be:	95 e0       	ldi	r25, 0x05	; 5
    57c0:	63 e4       	ldi	r22, 0x43	; 67
    57c2:	14 c0       	rjmp	.+40     	; 0x57ec <pollCLI(unsigned char)+0x294>
            case EE_STATS_SET_AMBLIGHT_BY_HOUR: case EE_STATS_SET_AMBLIGHT_BY_HOUR_SMOOTHED: { Serial.print(F("ambl")); break; }
    57c4:	87 e1       	ldi	r24, 0x17	; 23
    57c6:	95 e0       	ldi	r25, 0x05	; 5
    57c8:	61 ef       	ldi	r22, 0xF1	; 241
    57ca:	71 e0       	ldi	r23, 0x01	; 1
    57cc:	09 c0       	rjmp	.+18     	; 0x57e0 <pollCLI(unsigned char)+0x288>
            case EE_STATS_SET_OCCPC_BY_HOUR: case EE_STATS_SET_OCCPC_BY_HOUR_SMOOTHED: { Serial.print(F("occ%")); break; }
    57ce:	87 e1       	ldi	r24, 0x17	; 23
    57d0:	95 e0       	ldi	r25, 0x05	; 5
    57d2:	6c ee       	ldi	r22, 0xEC	; 236
    57d4:	71 e0       	ldi	r23, 0x01	; 1
    57d6:	04 c0       	rjmp	.+8      	; 0x57e0 <pollCLI(unsigned char)+0x288>
            case EE_STATS_SET_RHPC_BY_HOUR: case EE_STATS_SET_RHPC_BY_HOUR_SMOOTHED: { Serial.print(F("RH%")); break; }
    57d8:	87 e1       	ldi	r24, 0x17	; 23
    57da:	95 e0       	ldi	r25, 0x05	; 5
    57dc:	68 ee       	ldi	r22, 0xE8	; 232
    57de:	71 e0       	ldi	r23, 0x01	; 1
    57e0:	0e 94 36 3b 	call	0x766c	; 0x766c <Print::print(__FlashStringHelper const*)>
    57e4:	05 c0       	rjmp	.+10     	; 0x57f0 <pollCLI(unsigned char)+0x298>
            case EE_STATS_SET_USER1_BY_HOUR: case EE_STATS_SET_USER1_BY_HOUR_SMOOTHED: { Serial.print('u'); break; }
    57e6:	87 e1       	ldi	r24, 0x17	; 23
    57e8:	95 e0       	ldi	r25, 0x05	; 5
    57ea:	65 e7       	ldi	r22, 0x75	; 117
    57ec:	0e 94 59 3b 	call	0x76b2	; 0x76b2 <Print::print(char)>
#if defined(EE_STATS_SET_WARMMODE_BY_HOUR_OF_WK)
            case EE_STATS_SET_WARMMODE_BY_HOUR_OF_WK: { Serial.print('W'); break; }
#endif
            }
          Serial_print_space();
    57f0:	0e 94 5d 27 	call	0x4eba	; 0x4eba <Serial_print_space()>
          if(setN & 1) { Serial.print(F("smoothed")); } else { Serial.print(F("last")); }
    57f4:	00 ff       	sbrs	r16, 0
    57f6:	05 c0       	rjmp	.+10     	; 0x5802 <pollCLI(unsigned char)+0x2aa>
    57f8:	87 e1       	ldi	r24, 0x17	; 23
    57fa:	95 e0       	ldi	r25, 0x05	; 5
    57fc:	6f ed       	ldi	r22, 0xDF	; 223
    57fe:	71 e0       	ldi	r23, 0x01	; 1
    5800:	04 c0       	rjmp	.+8      	; 0x580a <pollCLI(unsigned char)+0x2b2>
    5802:	87 e1       	ldi	r24, 0x17	; 23
    5804:	95 e0       	ldi	r25, 0x05	; 5
    5806:	6a ed       	ldi	r22, 0xDA	; 218
    5808:	71 e0       	ldi	r23, 0x01	; 1
    580a:	0e 94 36 3b 	call	0x766c	; 0x766c <Print::print(__FlashStringHelper const*)>
          Serial_print_space();
    580e:	0e 94 5d 27 	call	0x4eba	; 0x4eba <Serial_print_space()>
    5812:	10 e0       	ldi	r17, 0x00	; 0
          // Now print values.
          for(uint8_t hh = 0; hh < 24; ++hh)
            {
            const uint8_t statRaw = getByHourStat(hh, setN);
    5814:	81 2f       	mov	r24, r17
    5816:	60 2f       	mov	r22, r16
    5818:	0e 94 69 06 	call	0xcd2	; 0xcd2 <getByHourStat(unsigned char, unsigned char)>
    581c:	68 2f       	mov	r22, r24
            // For unset stat show '-'...
            if(STATS_UNSET_BYTE == statRaw) { Serial.print('-'); }
    581e:	8f 3f       	cpi	r24, 0xFF	; 255
    5820:	31 f4       	brne	.+12     	; 0x582e <pollCLI(unsigned char)+0x2d6>
    5822:	87 e1       	ldi	r24, 0x17	; 23
    5824:	95 e0       	ldi	r25, 0x05	; 5
    5826:	6d e2       	ldi	r22, 0x2D	; 45
    5828:	0e 94 59 3b 	call	0x76b2	; 0x76b2 <Print::print(char)>
    582c:	19 c0       	rjmp	.+50     	; 0x5860 <pollCLI(unsigned char)+0x308>
            // ...else print more human-friendly version of stat.
            else switch(setN)
    582e:	02 30       	cpi	r16, 0x02	; 2
    5830:	38 f0       	brcs	.+14     	; 0x5840 <pollCLI(unsigned char)+0x2e8>
              {
              default: { Serial.print(statRaw); break; } // Generic decimal stats.
    5832:	87 e1       	ldi	r24, 0x17	; 23
    5834:	95 e0       	ldi	r25, 0x05	; 5
    5836:	4a e0       	ldi	r20, 0x0A	; 10
    5838:	50 e0       	ldi	r21, 0x00	; 0
    583a:	0e 94 35 3c 	call	0x786a	; 0x786a <Print::print(unsigned char, int)>
    583e:	10 c0       	rjmp	.+32     	; 0x5860 <pollCLI(unsigned char)+0x308>

              // Special formatting cases.
              case EE_STATS_SET_TEMP_BY_HOUR: case EE_STATS_SET_TEMP_BY_HOUR_SMOOTHED:
                // Uncompanded temperature, rounded.
                { Serial.print((expandTempC16(statRaw)+8) >> 4); break; }
    5840:	0e 94 a8 06 	call	0xd50	; 0xd50 <expandTempC16(unsigned char)>
    5844:	bc 01       	movw	r22, r24
    5846:	68 5f       	subi	r22, 0xF8	; 248
    5848:	7f 4f       	sbci	r23, 0xFF	; 255
    584a:	54 e0       	ldi	r21, 0x04	; 4
    584c:	75 95       	asr	r23
    584e:	67 95       	ror	r22
    5850:	5a 95       	dec	r21
    5852:	e1 f7       	brne	.-8      	; 0x584c <pollCLI(unsigned char)+0x2f4>
    5854:	87 e1       	ldi	r24, 0x17	; 23
    5856:	95 e0       	ldi	r25, 0x05	; 5
    5858:	4a e0       	ldi	r20, 0x0A	; 10
    585a:	50 e0       	ldi	r21, 0x00	; 0
    585c:	0e 94 87 3c 	call	0x790e	; 0x790e <Print::print(int, int)>
              case EE_STATS_SET_WARMMODE_BY_HOUR_OF_WK:
                // Warm mode usage bitmap by hour over week.
                { Serial.print(statRaw, HEX); break; }
#endif
              }
            if(hh == thisHH) { Serial.print('<'); } // Highlight current stat in this set.
    5860:	1f 15       	cp	r17, r15
    5862:	29 f4       	brne	.+10     	; 0x586e <pollCLI(unsigned char)+0x316>
    5864:	87 e1       	ldi	r24, 0x17	; 23
    5866:	95 e0       	ldi	r25, 0x05	; 5
    5868:	6c e3       	ldi	r22, 0x3C	; 60
    586a:	0e 94 59 3b 	call	0x76b2	; 0x76b2 <Print::print(char)>
#if 0 && defined(DEBUG)
            if(inOutlierQuartile(false, setN, hh)) { Serial.print('B'); } // In bottom quartile.
            if(inOutlierQuartile(true, setN, hh)) { Serial.print('T'); } // In top quartile.
#endif
            Serial_print_space();
    586e:	0e 94 5d 27 	call	0x4eba	; 0x4eba <Serial_print_space()>
            }
          Serial_print_space();
          if(setN & 1) { Serial.print(F("smoothed")); } else { Serial.print(F("last")); }
          Serial_print_space();
          // Now print values.
          for(uint8_t hh = 0; hh < 24; ++hh)
    5872:	1f 5f       	subi	r17, 0xFF	; 255
    5874:	18 31       	cpi	r17, 0x18	; 24
    5876:	71 f6       	brne	.-100    	; 0x5814 <pollCLI(unsigned char)+0x2bc>
            if(inOutlierQuartile(false, setN, hh)) { Serial.print('B'); } // In bottom quartile.
            if(inOutlierQuartile(true, setN, hh)) { Serial.print('T'); } // In top quartile.
#endif
            Serial_print_space();
            }
          Serial.println();
    5878:	87 e1       	ldi	r24, 0x17	; 23
    587a:	95 e0       	ldi	r25, 0x05	; 5
    587c:	0e 94 61 3b 	call	0x76c2	; 0x76c2 <Print::println()>
    5880:	82 c1       	rjmp	.+772    	; 0x5b86 <pollCLI(unsigned char)+0x62e>

      // Switch to FROST mode OR set FROST/setback temperature (even with temp pot available).
      // With F! force to frost and holiday (long-vacant) mode.  Useful for testing and for remote CLI use.
      case 'F':
        {
        if(n == 2)
    5882:	12 30       	cpi	r17, 0x02	; 2
    5884:	a1 f4       	brne	.+40     	; 0x58ae <pollCLI(unsigned char)+0x356>
          {
          if('!' == buf[1]) { Serial.println(F("hols")); }
    5886:	80 91 74 03 	lds	r24, 0x0374
    588a:	81 32       	cpi	r24, 0x21	; 33
    588c:	31 f4       	brne	.+12     	; 0x589a <pollCLI(unsigned char)+0x342>
    588e:	87 e1       	ldi	r24, 0x17	; 23
    5890:	95 e0       	ldi	r25, 0x05	; 5
    5892:	65 ed       	ldi	r22, 0xD5	; 213
    5894:	71 e0       	ldi	r23, 0x01	; 1
    5896:	0e 94 81 3b 	call	0x7702	; 0x7702 <Print::println(__FlashStringHelper const*)>

    // Put directly into energy-conserving 'holiday mode' by making room appear to be 'long vacant'.
    // Be careful of retriggering presence immediately if this is set locally.
    // Set apparent vacancy to maximum to make setting obvious and to hide further vacancy from snooping.
    // Code elsewhere may wish to put the system in FROST mode also.
    void setHolidayMode() { activityCountdownM = 0; value = 0; occupationCountdownM = 0; vacancyH = 255U; }
    589a:	10 92 16 02 	sts	0x0216, r1
    589e:	10 92 14 02 	sts	0x0214, r1
    58a2:	10 92 15 02 	sts	0x0215, r1
    58a6:	8f ef       	ldi	r24, 0xFF	; 255
    58a8:	80 93 17 02 	sts	0x0217, r24
    58ac:	7e c1       	rjmp	.+764    	; 0x5baa <pollCLI(unsigned char)+0x652>
          break;
          }
#if defined(SETTABLE_TARGET_TEMPERATURES)
        char *last; // Used by strtok_r().
        char *tok1;
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    58ae:	13 30       	cpi	r17, 0x03	; 3
    58b0:	08 f4       	brcc	.+2      	; 0x58b4 <pollCLI(unsigned char)+0x35c>
    58b2:	7b c1       	rjmp	.+758    	; 0x5baa <pollCLI(unsigned char)+0x652>
    58b4:	85 e7       	ldi	r24, 0x75	; 117
    58b6:	93 e0       	ldi	r25, 0x03	; 3
    58b8:	6b e2       	ldi	r22, 0x2B	; 43
    58ba:	71 e0       	ldi	r23, 0x01	; 1
    58bc:	ae 01       	movw	r20, r28
    58be:	4f 5f       	subi	r20, 0xFF	; 255
    58c0:	5f 4f       	sbci	r21, 0xFF	; 255
    58c2:	0e 94 1a 03 	call	0x634	; 0x634 <strtok_r>
    58c6:	00 97       	sbiw	r24, 0x00	; 0
    58c8:	09 f4       	brne	.+2      	; 0x58cc <pollCLI(unsigned char)+0x374>
    58ca:	6f c1       	rjmp	.+734    	; 0x5baa <pollCLI(unsigned char)+0x652>
          {
          const uint8_t tempC = (uint8_t) atoi(tok1);
    58cc:	0e 94 cd 02 	call	0x59a	; 0x59a <atoi>
          if(!setFROSTTargetC(tempC)) { InvalidIgnored(); }
    58d0:	0e 94 8c 07 	call	0xf18	; 0xf18 <setFROSTTargetC(unsigned char)>
    58d4:	09 c1       	rjmp	.+530    	; 0x5ae8 <pollCLI(unsigned char)+0x590>
      case 'H':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 5 character sequence makes sense and is safe to tokenise, eg "H 1 2".
        if((n >= 5) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    58d6:	15 30       	cpi	r17, 0x05	; 5
    58d8:	08 f4       	brcc	.+2      	; 0x58dc <pollCLI(unsigned char)+0x384>
    58da:	6b c1       	rjmp	.+726    	; 0x5bb2 <pollCLI(unsigned char)+0x65a>
    58dc:	85 e7       	ldi	r24, 0x75	; 117
    58de:	93 e0       	ldi	r25, 0x03	; 3
    58e0:	6b e2       	ldi	r22, 0x2B	; 43
    58e2:	71 e0       	ldi	r23, 0x01	; 1
    58e4:	ae 01       	movw	r20, r28
    58e6:	4f 5f       	subi	r20, 0xFF	; 255
    58e8:	5f 4f       	sbci	r21, 0xFF	; 255
    58ea:	0e 94 1a 03 	call	0x634	; 0x634 <strtok_r>
    58ee:	7c 01       	movw	r14, r24
    58f0:	00 97       	sbiw	r24, 0x00	; 0
    58f2:	09 f4       	brne	.+2      	; 0x58f6 <pollCLI(unsigned char)+0x39e>
    58f4:	5e c1       	rjmp	.+700    	; 0x5bb2 <pollCLI(unsigned char)+0x65a>
          {
          char *tok2 = strtok_r(NULL, " ", &last);
    58f6:	80 e0       	ldi	r24, 0x00	; 0
    58f8:	90 e0       	ldi	r25, 0x00	; 0
    58fa:	6b e2       	ldi	r22, 0x2B	; 43
    58fc:	71 e0       	ldi	r23, 0x01	; 1
    58fe:	ae 01       	movw	r20, r28
    5900:	4f 5f       	subi	r20, 0xFF	; 255
    5902:	5f 4f       	sbci	r21, 0xFF	; 255
    5904:	0e 94 1a 03 	call	0x634	; 0x634 <strtok_r>
    5908:	8c 01       	movw	r16, r24
          if(NULL != tok2)
    590a:	00 97       	sbiw	r24, 0x00	; 0
    590c:	09 f4       	brne	.+2      	; 0x5910 <pollCLI(unsigned char)+0x3b8>
    590e:	59 c1       	rjmp	.+690    	; 0x5bc2 <pollCLI(unsigned char)+0x66a>
            {
            const int hc1 = atoi(tok1);
    5910:	c7 01       	movw	r24, r14
    5912:	0e 94 cd 02 	call	0x59a	; 0x59a <atoi>
    5916:	7c 01       	movw	r14, r24
            const int hc2 = atoi(tok2);
    5918:	c8 01       	movw	r24, r16
    591a:	0e 94 cd 02 	call	0x59a	; 0x59a <atoi>
    591e:	8c 01       	movw	r16, r24
            if((hc1 < 0) || (hc1 > 99) || (hc2 < 0) || (hc2 > 99)) { InvalidIgnored(); }
    5920:	94 e6       	ldi	r25, 0x64	; 100
    5922:	e9 16       	cp	r14, r25
    5924:	f1 04       	cpc	r15, r1
    5926:	08 f0       	brcs	.+2      	; 0x592a <pollCLI(unsigned char)+0x3d2>
    5928:	e2 c0       	rjmp	.+452    	; 0x5aee <pollCLI(unsigned char)+0x596>
    592a:	17 fd       	sbrc	r17, 7
    592c:	e0 c0       	rjmp	.+448    	; 0x5aee <pollCLI(unsigned char)+0x596>
    592e:	04 36       	cpi	r16, 0x64	; 100
    5930:	11 05       	cpc	r17, r1
    5932:	0c f0       	brlt	.+2      	; 0x5936 <pollCLI(unsigned char)+0x3de>
    5934:	dc c0       	rjmp	.+440    	; 0x5aee <pollCLI(unsigned char)+0x596>
            else
              {
              FHT8VSetHC1(hc1);
    5936:	8e 2d       	mov	r24, r14
    5938:	0e 94 91 14 	call	0x2922	; 0x2922 <FHT8VSetHC1(unsigned char)>
              FHT8VSetHC2(hc2);
    593c:	80 2f       	mov	r24, r16
    593e:	0e 94 8b 14 	call	0x2916	; 0x2916 <FHT8VSetHC2(unsigned char)>
    5942:	02 c0       	rjmp	.+4      	; 0x5948 <pollCLI(unsigned char)+0x3f0>
              }
            }
          }
        else if(n < 2) // Just 'H', possibly with trailing whitespace.
          {
          FHT8VClearHC();
    5944:	0e 94 97 14 	call	0x292e	; 0x292e <FHT8VClearHC()>
          FHT8VSyncAndTXReset(); // Force into unsynchronized state.
    5948:	0e 94 80 11 	call	0x2300	; 0x2300 <FHT8VSyncAndTXReset()>
    594c:	3a c1       	rjmp	.+628    	; 0x5bc2 <pollCLI(unsigned char)+0x66a>

      // Set new random ID.
      // Should possibly restart afterwards.
      case 'I':
        {
        ensureIDCreated(true); // Force ID.
    594e:	81 e0       	ldi	r24, 0x01	; 1
    5950:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <ensureIDCreated(bool)>
    5954:	36 c1       	rjmp	.+620    	; 0x5bc2 <pollCLI(unsigned char)+0x66a>
        int s = 0;
//#if MAX_SIMPLE_SCHEDULES > 1
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 3 character sequence makes sense and is safe to tokenise, eg "L 0".
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    5956:	13 30       	cpi	r17, 0x03	; 3
    5958:	08 f4       	brcc	.+2      	; 0x595c <pollCLI(unsigned char)+0x404>
    595a:	2e c1       	rjmp	.+604    	; 0x5bb8 <pollCLI(unsigned char)+0x660>
    595c:	85 e7       	ldi	r24, 0x75	; 117
    595e:	93 e0       	ldi	r25, 0x03	; 3
    5960:	6b e2       	ldi	r22, 0x2B	; 43
    5962:	71 e0       	ldi	r23, 0x01	; 1
    5964:	ae 01       	movw	r20, r28
    5966:	4f 5f       	subi	r20, 0xFF	; 255
    5968:	5f 4f       	sbci	r21, 0xFF	; 255
    596a:	0e 94 1a 03 	call	0x634	; 0x634 <strtok_r>
    596e:	00 97       	sbiw	r24, 0x00	; 0
    5970:	09 f4       	brne	.+2      	; 0x5974 <pollCLI(unsigned char)+0x41c>
    5972:	22 c1       	rjmp	.+580    	; 0x5bb8 <pollCLI(unsigned char)+0x660>
          {
          s = atoi(tok1);
    5974:	0e 94 cd 02 	call	0x59a	; 0x59a <atoi>
          }
//#endif
        handleLEARN((uint8_t) s); break;
    5978:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <handleLEARN(unsigned char)>
    597c:	22 c1       	rjmp	.+580    	; 0x5bc2 <pollCLI(unsigned char)+0x66a>
      case 'O':
        {
        uint8_t minPcOpen = 0; // Will clear override and use default threshold.
        char *last; // Used by strtok_r().
        char *tok1;
        if((n > 1) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    597e:	12 30       	cpi	r17, 0x02	; 2
    5980:	08 f4       	brcc	.+2      	; 0x5984 <pollCLI(unsigned char)+0x42c>
    5982:	1d c1       	rjmp	.+570    	; 0x5bbe <pollCLI(unsigned char)+0x666>
    5984:	85 e7       	ldi	r24, 0x75	; 117
    5986:	93 e0       	ldi	r25, 0x03	; 3
    5988:	6b e2       	ldi	r22, 0x2B	; 43
    598a:	71 e0       	ldi	r23, 0x01	; 1
    598c:	ae 01       	movw	r20, r28
    598e:	4f 5f       	subi	r20, 0xFF	; 255
    5990:	5f 4f       	sbci	r21, 0xFF	; 255
    5992:	0e 94 1a 03 	call	0x634	; 0x634 <strtok_r>
    5996:	00 97       	sbiw	r24, 0x00	; 0
    5998:	09 f4       	brne	.+2      	; 0x599c <pollCLI(unsigned char)+0x444>
    599a:	11 c1       	rjmp	.+546    	; 0x5bbe <pollCLI(unsigned char)+0x666>
          { minPcOpen = (uint8_t) atoi(tok1); }
    599c:	0e 94 cd 02 	call	0x59a	; 0x59a <atoi>
        NominalRadValve.setMinValvePcReallyOpen(minPcOpen);
    59a0:	0e 94 0b 0a 	call	0x1416	; 0x1416 <ModelledRadValve::setMinValvePcReallyOpen(unsigned char)>
    59a4:	0e c1       	rjmp	.+540    	; 0x5bc2 <pollCLI(unsigned char)+0x66a>
      case 'P':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 5 character sequence makes sense and is safe to tokenise, eg "P 1 2".
        if((n >= 5) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    59a6:	15 30       	cpi	r17, 0x05	; 5
    59a8:	08 f4       	brcc	.+2      	; 0x59ac <pollCLI(unsigned char)+0x454>
    59aa:	0b c1       	rjmp	.+534    	; 0x5bc2 <pollCLI(unsigned char)+0x66a>
    59ac:	85 e7       	ldi	r24, 0x75	; 117
    59ae:	93 e0       	ldi	r25, 0x03	; 3
    59b0:	6b e2       	ldi	r22, 0x2B	; 43
    59b2:	71 e0       	ldi	r23, 0x01	; 1
    59b4:	8e 01       	movw	r16, r28
    59b6:	0f 5f       	subi	r16, 0xFF	; 255
    59b8:	1f 4f       	sbci	r17, 0xFF	; 255
    59ba:	a8 01       	movw	r20, r16
    59bc:	0e 94 1a 03 	call	0x634	; 0x634 <strtok_r>
    59c0:	7c 01       	movw	r14, r24
    59c2:	00 97       	sbiw	r24, 0x00	; 0
    59c4:	09 f4       	brne	.+2      	; 0x59c8 <pollCLI(unsigned char)+0x470>
    59c6:	fd c0       	rjmp	.+506    	; 0x5bc2 <pollCLI(unsigned char)+0x66a>
          {
          char *tok2 = strtok_r(NULL, " ", &last);
    59c8:	80 e0       	ldi	r24, 0x00	; 0
    59ca:	90 e0       	ldi	r25, 0x00	; 0
    59cc:	6b e2       	ldi	r22, 0x2B	; 43
    59ce:	71 e0       	ldi	r23, 0x01	; 1
    59d0:	a8 01       	movw	r20, r16
    59d2:	0e 94 1a 03 	call	0x634	; 0x634 <strtok_r>
    59d6:	8c 01       	movw	r16, r24
          if(NULL != tok2)
    59d8:	00 97       	sbiw	r24, 0x00	; 0
    59da:	09 f4       	brne	.+2      	; 0x59de <pollCLI(unsigned char)+0x486>
    59dc:	f2 c0       	rjmp	.+484    	; 0x5bc2 <pollCLI(unsigned char)+0x66a>
            {
            const int hh = atoi(tok1);
    59de:	c7 01       	movw	r24, r14
    59e0:	0e 94 cd 02 	call	0x59a	; 0x59a <atoi>
    59e4:	7c 01       	movw	r14, r24
            const int mm = atoi(tok2);
    59e6:	c8 01       	movw	r24, r16
    59e8:	0e 94 cd 02 	call	0x59a	; 0x59a <atoi>
    59ec:	8c 01       	movw	r16, r24
            int s = 0;
//#if MAX_SIMPLE_SCHEDULES > 1         
            char *tok3 = strtok_r(NULL, " ", &last);
    59ee:	80 e0       	ldi	r24, 0x00	; 0
    59f0:	90 e0       	ldi	r25, 0x00	; 0
    59f2:	6b e2       	ldi	r22, 0x2B	; 43
    59f4:	71 e0       	ldi	r23, 0x01	; 1
    59f6:	ae 01       	movw	r20, r28
    59f8:	4f 5f       	subi	r20, 0xFF	; 255
    59fa:	5f 4f       	sbci	r21, 0xFF	; 255
    59fc:	0e 94 1a 03 	call	0x634	; 0x634 <strtok_r>
            if(NULL != tok3)
    5a00:	00 97       	sbiw	r24, 0x00	; 0
    5a02:	19 f4       	brne	.+6      	; 0x5a0a <pollCLI(unsigned char)+0x4b2>
    5a04:	60 e0       	ldi	r22, 0x00	; 0
    5a06:	70 e0       	ldi	r23, 0x00	; 0
    5a08:	03 c0       	rjmp	.+6      	; 0x5a10 <pollCLI(unsigned char)+0x4b8>
              {
              s = atoi(tok3);
    5a0a:	0e 94 cd 02 	call	0x59a	; 0x59a <atoi>
    5a0e:	bc 01       	movw	r22, r24
              }
//#endif
            // Does not fully validate user inputs (eg for -ve values), but cannot set impossible values.
            if(!setSimpleSchedule((uint_least16_t) ((60 * hh) + mm), (uint8_t)s)) { InvalidIgnored(); }
    5a10:	8c e3       	ldi	r24, 0x3C	; 60
    5a12:	90 e0       	ldi	r25, 0x00	; 0
    5a14:	9c 01       	movw	r18, r24
    5a16:	e2 9e       	mul	r14, r18
    5a18:	c0 01       	movw	r24, r0
    5a1a:	e3 9e       	mul	r14, r19
    5a1c:	90 0d       	add	r25, r0
    5a1e:	f2 9e       	mul	r15, r18
    5a20:	90 0d       	add	r25, r0
    5a22:	11 24       	eor	r1, r1
    5a24:	80 0f       	add	r24, r16
    5a26:	91 1f       	adc	r25, r17
    5a28:	0e 94 6e 25 	call	0x4adc	; 0x4adc <setSimpleSchedule(unsigned int, unsigned char)>
    5a2c:	5d c0       	rjmp	.+186    	; 0x5ae8 <pollCLI(unsigned char)+0x590>
        break;
        }

#ifdef SUPPORT_BAKE
      // Switch to (or restart) BAKE (Quick Heat) mode: Q
      case 'Q': { startBakeDebounced(); break; }
    5a2e:	0e 94 c4 03 	call	0x788	; 0x788 <startBakeDebounced()>
    5a32:	c7 c0       	rjmp	.+398    	; 0x5bc2 <pollCLI(unsigned char)+0x66a>
#endif

      // Status line and optional smart/scheduled warming prediction request.
      case 'S':
        {
        Serial.print(F("Resets: "));
    5a34:	87 e1       	ldi	r24, 0x17	; 23
    5a36:	95 e0       	ldi	r25, 0x05	; 5
    5a38:	6c ec       	ldi	r22, 0xCC	; 204
    5a3a:	71 e0       	ldi	r23, 0x01	; 1
    5a3c:	0e 94 36 3b 	call	0x766c	; 0x766c <Print::print(__FlashStringHelper const*)>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    5a40:	f9 99       	sbic	0x1f, 1	; 31
    5a42:	fe cf       	rjmp	.-4      	; 0x5a40 <pollCLI(unsigned char)+0x4e8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    5a44:	86 e0       	ldi	r24, 0x06	; 6
    5a46:	90 e0       	ldi	r25, 0x00	; 0
    5a48:	92 bd       	out	0x22, r25	; 34
    5a4a:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    5a4c:	f8 9a       	sbi	0x1f, 0	; 31
    5a4e:	60 b5       	in	r22, 0x20	; 32
        const uint8_t resetCount = eeprom_read_byte((uint8_t *)EE_START_RESET_COUNT);
        Serial.print(resetCount);
    5a50:	87 e1       	ldi	r24, 0x17	; 23
    5a52:	95 e0       	ldi	r25, 0x05	; 5
    5a54:	4a e0       	ldi	r20, 0x0A	; 10
    5a56:	50 e0       	ldi	r21, 0x00	; 0
    5a58:	0e 94 35 3c 	call	0x786a	; 0x786a <Print::print(unsigned char, int)>
        Serial.println();
    5a5c:	87 e1       	ldi	r24, 0x17	; 23
    5a5e:	95 e0       	ldi	r25, 0x05	; 5
    5a60:	0e 94 61 3b 	call	0x76c2	; 0x76c2 <Print::println()>
        Serial.print(F("Overruns: "));
    5a64:	87 e1       	ldi	r24, 0x17	; 23
    5a66:	95 e0       	ldi	r25, 0x05	; 5
    5a68:	61 ec       	ldi	r22, 0xC1	; 193
    5a6a:	71 e0       	ldi	r23, 0x01	; 1
    5a6c:	0e 94 36 3b 	call	0x766c	; 0x766c <Print::print(__FlashStringHelper const*)>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    5a70:	f9 99       	sbic	0x1f, 1	; 31
    5a72:	fe cf       	rjmp	.-4      	; 0x5a70 <pollCLI(unsigned char)+0x518>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    5a74:	8d e1       	ldi	r24, 0x1D	; 29
    5a76:	90 e0       	ldi	r25, 0x00	; 0
    5a78:	92 bd       	out	0x22, r25	; 34
    5a7a:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    5a7c:	f8 9a       	sbi	0x1f, 0	; 31
    5a7e:	60 b5       	in	r22, 0x20	; 32
        const uint8_t overrunCount = (~eeprom_read_byte((uint8_t *)EE_START_OVERRUN_COUNTER)) & 0xff;
        Serial.print(overrunCount);
    5a80:	60 95       	com	r22
    5a82:	87 e1       	ldi	r24, 0x17	; 23
    5a84:	95 e0       	ldi	r25, 0x05	; 5
    5a86:	4a e0       	ldi	r20, 0x0A	; 10
    5a88:	50 e0       	ldi	r21, 0x00	; 0
    5a8a:	0e 94 35 3c 	call	0x786a	; 0x786a <Print::print(unsigned char, int)>
        Serial.println();
    5a8e:	87 e1       	ldi	r24, 0x17	; 23
    5a90:	95 e0       	ldi	r25, 0x05	; 5
    5a92:	0e 94 61 3b 	call	0x76c2	; 0x76c2 <Print::println()>
    5a96:	95 c0       	rjmp	.+298    	; 0x5bc2 <pollCLI(unsigned char)+0x66a>
      case 'T':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 5 character sequence makes sense and is safe to tokenise, eg "T 1 2".
        if((n >= 5) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    5a98:	15 30       	cpi	r17, 0x05	; 5
    5a9a:	08 f4       	brcc	.+2      	; 0x5a9e <pollCLI(unsigned char)+0x546>
    5a9c:	92 c0       	rjmp	.+292    	; 0x5bc2 <pollCLI(unsigned char)+0x66a>
    5a9e:	85 e7       	ldi	r24, 0x75	; 117
    5aa0:	93 e0       	ldi	r25, 0x03	; 3
    5aa2:	6b e2       	ldi	r22, 0x2B	; 43
    5aa4:	71 e0       	ldi	r23, 0x01	; 1
    5aa6:	7e 01       	movw	r14, r28
    5aa8:	08 94       	sec
    5aaa:	e1 1c       	adc	r14, r1
    5aac:	f1 1c       	adc	r15, r1
    5aae:	a7 01       	movw	r20, r14
    5ab0:	0e 94 1a 03 	call	0x634	; 0x634 <strtok_r>
    5ab4:	8c 01       	movw	r16, r24
    5ab6:	00 97       	sbiw	r24, 0x00	; 0
    5ab8:	09 f4       	brne	.+2      	; 0x5abc <pollCLI(unsigned char)+0x564>
    5aba:	83 c0       	rjmp	.+262    	; 0x5bc2 <pollCLI(unsigned char)+0x66a>
          {
          char *tok2 = strtok_r(NULL, " ", &last);
    5abc:	80 e0       	ldi	r24, 0x00	; 0
    5abe:	90 e0       	ldi	r25, 0x00	; 0
    5ac0:	6b e2       	ldi	r22, 0x2B	; 43
    5ac2:	71 e0       	ldi	r23, 0x01	; 1
    5ac4:	a7 01       	movw	r20, r14
    5ac6:	0e 94 1a 03 	call	0x634	; 0x634 <strtok_r>
    5aca:	7c 01       	movw	r14, r24
          if(NULL != tok2)
    5acc:	00 97       	sbiw	r24, 0x00	; 0
    5ace:	09 f4       	brne	.+2      	; 0x5ad2 <pollCLI(unsigned char)+0x57a>
    5ad0:	78 c0       	rjmp	.+240    	; 0x5bc2 <pollCLI(unsigned char)+0x66a>
            {
            const int hh = atoi(tok1);
    5ad2:	c8 01       	movw	r24, r16
    5ad4:	0e 94 cd 02 	call	0x59a	; 0x59a <atoi>
    5ad8:	8c 01       	movw	r16, r24
            const int mm = atoi(tok2);
    5ada:	c7 01       	movw	r24, r14
    5adc:	0e 94 cd 02 	call	0x59a	; 0x59a <atoi>
    5ae0:	bc 01       	movw	r22, r24
            // TODO: zap collected stats if time change too large (eg >> 1h).
            if(!setHoursMinutesLT(hh, mm)) { InvalidIgnored(); }
    5ae2:	c8 01       	movw	r24, r16
    5ae4:	0e 94 18 25 	call	0x4a30	; 0x4a30 <setHoursMinutesLT(int, int)>
    5ae8:	88 23       	and	r24, r24
    5aea:	09 f0       	breq	.+2      	; 0x5aee <pollCLI(unsigned char)+0x596>
    5aec:	6a c0       	rjmp	.+212    	; 0x5bc2 <pollCLI(unsigned char)+0x66a>
    5aee:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <InvalidIgnored()>
    5af2:	67 c0       	rjmp	.+206    	; 0x5bc2 <pollCLI(unsigned char)+0x66a>
        }

      // Version information printed as one line to serial, machine- and human- parseable.
      case 'V':
        {
        serialPrintlnBuildVersion();
    5af4:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <serialPrintlnBuildVersion()>
    5af8:	64 c0       	rjmp	.+200    	; 0x5bc2 <pollCLI(unsigned char)+0x66a>
          }
        else
#endif
          {
#ifdef SUPPORT_BAKE
          cancelBakeDebounced(); // Ensure BAKE mode not entered.
    5afa:	0e 94 c1 03 	call	0x782	; 0x782 <cancelBakeDebounced()>
#endif
          setWarmModeDebounced(true); // No parameter supplied; switch to WARM mode.
    5afe:	81 e0       	ldi	r24, 0x01	; 1
    5b00:	55 c0       	rjmp	.+170    	; 0x5bac <pollCLI(unsigned char)+0x654>
      case 'X':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 3 character sequence makes sense and is safe to tokenise, eg "X 0".
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    5b02:	13 30       	cpi	r17, 0x03	; 3
    5b04:	08 f4       	brcc	.+2      	; 0x5b08 <pollCLI(unsigned char)+0x5b0>
    5b06:	5d c0       	rjmp	.+186    	; 0x5bc2 <pollCLI(unsigned char)+0x66a>
    5b08:	85 e7       	ldi	r24, 0x75	; 117
    5b0a:	93 e0       	ldi	r25, 0x03	; 3
    5b0c:	6b e2       	ldi	r22, 0x2B	; 43
    5b0e:	71 e0       	ldi	r23, 0x01	; 1
    5b10:	ae 01       	movw	r20, r28
    5b12:	4f 5f       	subi	r20, 0xFF	; 255
    5b14:	5f 4f       	sbci	r21, 0xFF	; 255
    5b16:	0e 94 1a 03 	call	0x634	; 0x634 <strtok_r>
    5b1a:	00 97       	sbiw	r24, 0x00	; 0
    5b1c:	09 f4       	brne	.+2      	; 0x5b20 <pollCLI(unsigned char)+0x5c8>
    5b1e:	51 c0       	rjmp	.+162    	; 0x5bc2 <pollCLI(unsigned char)+0x66a>
          {
          const uint8_t nn = (uint8_t) atoi(tok1);
    5b20:	0e 94 cd 02 	call	0x59a	; 0x59a <atoi>
    5b24:	68 2f       	mov	r22, r24
          eeprom_smart_update_byte((uint8_t *)EE_START_STATS_TX_ENABLE, nn);
    5b26:	8c e1       	ldi	r24, 0x1C	; 28
    5b28:	90 e0       	ldi	r25, 0x00	; 0
    5b2a:	0e 94 5e 10 	call	0x20bc	; 0x20bc <eeprom_smart_update_byte(unsigned char*, unsigned char)>
    5b2e:	49 c0       	rjmp	.+146    	; 0x5bc2 <pollCLI(unsigned char)+0x66a>

      // Zap/erase learned statistics.
      case 'Z':
        {
        // Try to avoid causing an overrun if near the end of the minor cycle (even allowing for the warning message if unfinished!).
        if(zapStats((uint16_t) fnmax(1, ((int)msRemainingThisBasicCycle()/2) - 20)))
    5b30:	81 e0       	ldi	r24, 0x01	; 1
    5b32:	90 e0       	ldi	r25, 0x00	; 0
    5b34:	9c 83       	std	Y+4, r25	; 0x04
    5b36:	8b 83       	std	Y+3, r24	; 0x03
    5b38:	80 91 b2 00 	lds	r24, 0x00B2
    5b3c:	2f ef       	ldi	r18, 0xFF	; 255
    5b3e:	30 e0       	ldi	r19, 0x00	; 0
    5b40:	28 1b       	sub	r18, r24
    5b42:	31 09       	sbc	r19, r1
    5b44:	c9 01       	movw	r24, r18
    5b46:	43 e0       	ldi	r20, 0x03	; 3
    5b48:	88 0f       	add	r24, r24
    5b4a:	99 1f       	adc	r25, r25
    5b4c:	4a 95       	dec	r20
    5b4e:	e1 f7       	brne	.-8      	; 0x5b48 <pollCLI(unsigned char)+0x5f0>
    5b50:	82 1b       	sub	r24, r18
    5b52:	93 0b       	sbc	r25, r19
    5b54:	95 95       	asr	r25
    5b56:	87 95       	ror	r24
    5b58:	44 97       	sbiw	r24, 0x14	; 20
    5b5a:	9e 83       	std	Y+6, r25	; 0x06
    5b5c:	8d 83       	std	Y+5, r24	; 0x05
    5b5e:	81 30       	cpi	r24, 0x01	; 1
    5b60:	91 05       	cpc	r25, r1
    5b62:	14 f4       	brge	.+4      	; 0x5b68 <pollCLI(unsigned char)+0x610>
    5b64:	81 e0       	ldi	r24, 0x01	; 1
    5b66:	90 e0       	ldi	r25, 0x00	; 0
    5b68:	0e 94 ef 09 	call	0x13de	; 0x13de <zapStats(unsigned int)>
    5b6c:	88 23       	and	r24, r24
    5b6e:	29 f0       	breq	.+10     	; 0x5b7a <pollCLI(unsigned char)+0x622>
          { Serial.println(F("Zapped.")); }
    5b70:	87 e1       	ldi	r24, 0x17	; 23
    5b72:	95 e0       	ldi	r25, 0x05	; 5
    5b74:	69 eb       	ldi	r22, 0xB9	; 185
    5b76:	71 e0       	ldi	r23, 0x01	; 1
    5b78:	04 c0       	rjmp	.+8      	; 0x5b82 <pollCLI(unsigned char)+0x62a>
        else
          { Serial.println(F("Not finished.")); }
    5b7a:	87 e1       	ldi	r24, 0x17	; 23
    5b7c:	95 e0       	ldi	r25, 0x05	; 5
    5b7e:	6b ea       	ldi	r22, 0xAB	; 171
    5b80:	71 e0       	ldi	r23, 0x01	; 1
    5b82:	0e 94 81 3b 	call	0x7702	; 0x7702 <Print::println(__FlashStringHelper const*)>
      }

    // Almost always show status line afterwards as feedback of command received and new state.
    if(showStatus) { serialStatusReport(); }
    // Else show ack of command received.
    else { Serial.println(F("OK")); }
    5b86:	87 e1       	ldi	r24, 0x17	; 23
    5b88:	95 e0       	ldi	r25, 0x05	; 5
    5b8a:	68 ea       	ldi	r22, 0xA8	; 168
    5b8c:	71 e0       	ldi	r23, 0x01	; 1
    5b8e:	0e 94 81 3b 	call	0x7702	; 0x7702 <Print::println(__FlashStringHelper const*)>
    5b92:	04 c0       	rjmp	.+8      	; 0x5b9c <pollCLI(unsigned char)+0x644>
    }
  else { Serial.println(); } // Terminate empty/partial CLI input line after timeout.
    5b94:	87 e1       	ldi	r24, 0x17	; 23
    5b96:	95 e0       	ldi	r25, 0x05	; 5
    5b98:	0e 94 61 3b 	call	0x76c2	; 0x76c2 <Print::println()>

  // Force any pending output before return / possible UART power-down.
  flushSerialSCTSensitive();
    5b9c:	0e 94 04 21 	call	0x4208	; 0x4208 <flushSerialSCTSensitive()>

  if(neededWaking) { powerDownSerial(); }
    5ba0:	bb 20       	and	r11, r11
    5ba2:	91 f0       	breq	.+36     	; 0x5bc8 <pollCLI(unsigned char)+0x670>
    5ba4:	0e 94 ce 20 	call	0x419c	; 0x419c <powerDownSerial()>
    5ba8:	0f c0       	rjmp	.+30     	; 0x5bc8 <pollCLI(unsigned char)+0x670>
          const uint8_t tempC = (uint8_t) atoi(tok1);
          if(!setFROSTTargetC(tempC)) { InvalidIgnored(); }
          }
        else
#endif
          { setWarmModeDebounced(false); } // No parameter supplied; switch to FROST mode.
    5baa:	80 e0       	ldi	r24, 0x00	; 0
    5bac:	0e 94 b1 03 	call	0x762	; 0x762 <setWarmModeDebounced(bool)>
    5bb0:	08 c0       	rjmp	.+16     	; 0x5bc2 <pollCLI(unsigned char)+0x66a>
              FHT8VSetHC2(hc2);
              FHT8VSyncAndTXReset(); // Force re-sync with FHT8V valve.
              }
            }
          }
        else if(n < 2) // Just 'H', possibly with trailing whitespace.
    5bb2:	12 30       	cpi	r17, 0x02	; 2
    5bb4:	30 f4       	brcc	.+12     	; 0x5bc2 <pollCLI(unsigned char)+0x66a>
    5bb6:	c6 ce       	rjmp	.-628    	; 0x5944 <pollCLI(unsigned char)+0x3ec>
    5bb8:	80 e0       	ldi	r24, 0x00	; 0
    5bba:	90 e0       	ldi	r25, 0x00	; 0
    5bbc:	dd ce       	rjmp	.-582    	; 0x5978 <pollCLI(unsigned char)+0x420>
    5bbe:	80 e0       	ldi	r24, 0x00	; 0
    5bc0:	ef ce       	rjmp	.-546    	; 0x59a0 <pollCLI(unsigned char)+0x448>
        break;
        }
      }

    // Almost always show status line afterwards as feedback of command received and new state.
    if(showStatus) { serialStatusReport(); }
    5bc2:	0e 94 90 28 	call	0x5120	; 0x5120 <serialStatusReport()>
    5bc6:	ea cf       	rjmp	.-44     	; 0x5b9c <pollCLI(unsigned char)+0x644>

  // Force any pending output before return / possible UART power-down.
  flushSerialSCTSensitive();

  if(neededWaking) { powerDownSerial(); }
  }
    5bc8:	26 96       	adiw	r28, 0x06	; 6
    5bca:	0f b6       	in	r0, 0x3f	; 63
    5bcc:	f8 94       	cli
    5bce:	de bf       	out	0x3e, r29	; 62
    5bd0:	0f be       	out	0x3f, r0	; 63
    5bd2:	cd bf       	out	0x3d, r28	; 61
    5bd4:	cf 91       	pop	r28
    5bd6:	df 91       	pop	r29
    5bd8:	1f 91       	pop	r17
    5bda:	0f 91       	pop	r16
    5bdc:	ff 90       	pop	r15
    5bde:	ef 90       	pop	r14
    5be0:	df 90       	pop	r13
    5be2:	cf 90       	pop	r12
    5be4:	bf 90       	pop	r11
    5be6:	08 95       	ret

00005be8 <offPause()>:
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define MEDIUM_PAUSE_MS 60
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
// Big low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define BIG_PAUSE_MS 120
static void inline bigPause() { nap(WDTO_120MS); } // 120ms vs 288ms nominal for PICAXE V0.09 impl.
    5be8:	83 e0       	ldi	r24, 0x03	; 3
    5bea:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <nap(signed char)>

// Pause between flashes to allow them to be distinguished (>100ms); was mediumPause() for PICAXE V0.09 impl.
static void inline offPause()
  {
  bigPause(); // 120ms, was V0.09 144ms mediumPause() for PICAXE V0.09 impl.
  pollIO(); // Slip in an I/O poll.
    5bee:	80 e0       	ldi	r24, 0x00	; 0
    5bf0:	0e 94 1c 07 	call	0xe38	; 0xe38 <pollIO(bool)>
  }
    5bf4:	08 95       	ret

00005bf6 <tickUI(unsigned char)>:
// Should never be skipped, so as to allow the UI to remain responsive.
// Runs in 350ms or less; usually takes only a few milliseconds or microseconds.
// Returns true iff the user interacted with the system, and maybe caused a status change.
// NOTE: since this is on the minimum idle-loop code path, minimise CPU cycles, esp in frost mode.
// Also re-activates CLI on main button push.
bool tickUI(const uint_fast8_t sec)
    5bf6:	1f 93       	push	r17
  {
  // Perform any once-per-minute operations.
  const bool sec0 = (0 == sec);
  if(sec0)
    5bf8:	88 23       	and	r24, r24
    5bfa:	a9 f4       	brne	.+42     	; 0x5c26 <tickUI(unsigned char)+0x30>
    {
    ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    5bfc:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5bfe:	f8 94       	cli
      {
      // Run down UI iteraction timer if need be, one tick per minute.
      if(uiTimeoutM > 0) { --uiTimeoutM; }
    5c00:	80 91 b2 03 	lds	r24, 0x03B2
    5c04:	88 23       	and	r24, r24
    5c06:	29 f0       	breq	.+10     	; 0x5c12 <tickUI(unsigned char)+0x1c>
    5c08:	80 91 b2 03 	lds	r24, 0x03B2
    5c0c:	81 50       	subi	r24, 0x01	; 1
    5c0e:	80 93 b2 03 	sts	0x03B2, r24
      // Run down CLI timer if need be.
      if(CLITimeoutM > 0) { --CLITimeoutM; }
    5c12:	80 91 3b 01 	lds	r24, 0x013B
    5c16:	88 23       	and	r24, r24
    5c18:	29 f0       	breq	.+10     	; 0x5c24 <tickUI(unsigned char)+0x2e>
    5c1a:	80 91 3b 01 	lds	r24, 0x013B
    5c1e:	81 50       	subi	r24, 0x01	; 1
    5c20:	80 93 3b 01 	sts	0x013B, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5c24:	9f bf       	out	0x3f, r25	; 63
      }
    }

  // True on every 4th tick/call, ie about once every 8 seconds.
  const bool forthTick = !((++tickCount) & 3); // True on every 4th tick.
    5c26:	80 91 b3 03 	lds	r24, 0x03B3
    5c2a:	8f 5f       	subi	r24, 0xFF	; 255
    5c2c:	80 93 b3 03 	sts	0x03B3, r24
    5c30:	10 e0       	ldi	r17, 0x00	; 0
    5c32:	90 e0       	ldi	r25, 0x00	; 0
    5c34:	83 70       	andi	r24, 0x03	; 3
    5c36:	90 70       	andi	r25, 0x00	; 0
    5c38:	89 2b       	or	r24, r25
    5c3a:	09 f4       	brne	.+2      	; 0x5c3e <tickUI(unsigned char)+0x48>
    5c3c:	11 e0       	ldi	r17, 0x01	; 1
  Occupancy.markAsOccupied(); // Thread-safe.
  }

// True if a manual UI control has been recently (seconds to minutes ago) operated.
// Thread-safe.
bool recentUIControlUse() { return(0 != uiTimeoutM); }
    5c3e:	80 91 b2 03 	lds	r24, 0x03B2
  // True on every 4th tick/call, ie about once every 8 seconds.
  const bool forthTick = !((++tickCount) & 3); // True on every 4th tick.

#ifdef TEMP_POT_AVAILABLE
  const bool rUIcu = recentUIControlUse();
  if(rUIcu || forthTick) // If recent UI activity, and periodically.
    5c42:	88 23       	and	r24, r24
    5c44:	11 f4       	brne	.+4      	; 0x5c4a <tickUI(unsigned char)+0x54>
    5c46:	11 23       	and	r17, r17
    5c48:	21 f0       	breq	.+8      	; 0x5c52 <tickUI(unsigned char)+0x5c>
    {
    // Force relatively-frequent re-read of temp pot UI device.
    TempPot.read();
    5c4a:	87 ec       	ldi	r24, 0xC7	; 199
    5c4c:	93 e0       	ldi	r25, 0x03	; 3
    5c4e:	0e 94 87 32 	call	0x650e	; 0x650e <TemperaturePot::read()>
    5c52:	80 91 b6 03 	lds	r24, 0x03B6
#ifdef SUPPORT_BAKE
  static bool isBakeModePutative;
#endif

  static bool modeButtonWasPressed;
  if(fastDigitalRead(BUTTON_MODE_L) == LOW)
    5c56:	4d 99       	sbic	0x09, 5	; 9
    5c58:	4a c0       	rjmp	.+148    	; 0x5cee <tickUI(unsigned char)+0xf8>
    {
    if(!modeButtonWasPressed)
    5c5a:	88 23       	and	r24, r24
    5c5c:	59 f4       	brne	.+22     	; 0x5c74 <tickUI(unsigned char)+0x7e>
      {
      // Capture real mode variable as button is pressed.
      isWarmModePutative = inWarmMode();
    5c5e:	0e 94 ae 03 	call	0x75c	; 0x75c <inWarmMode()>
    5c62:	80 93 b8 03 	sts	0x03B8, r24
#ifdef SUPPORT_BAKE
      isBakeModePutative = inBakeMode();
    5c66:	0e 94 b8 03 	call	0x770	; 0x770 <inBakeMode()>
    5c6a:	80 93 b7 03 	sts	0x03B7, r24
#endif      
      modeButtonWasPressed = true;
    5c6e:	81 e0       	ldi	r24, 0x01	; 1
    5c70:	80 93 b6 03 	sts	0x03B6, r24
// Record local manual operation of a local physical UI control, eg not remote or via CLI.
// To be thread-safe, everything that this touches or calls must be.
// Thread-safe.
void markUIControlUsed()
  {
  statusChange = true; // Note user interaction with the system.
    5c74:	11 e0       	ldi	r17, 0x01	; 1
    5c76:	10 93 b4 03 	sts	0x03B4, r17
  uiTimeoutM = UI_DEFAULT_TIMEOUT_M; // Ensure that UI controls are kept 'warm' for a little while.
    5c7a:	92 e0       	ldi	r25, 0x02	; 2
    5c7c:	90 93 b2 03 	sts	0x03B2, r25
#define CLI_DEFAULT_TIMEOUT_M 2
static volatile uint8_t CLITimeoutM = CLI_DEFAULT_TIMEOUT_M;

// Reset CLI active timer to the full whack before it goes inactive again (ie makes CLI active for a while).
// Thread-safe.
void resetCLIActiveTimer() { CLITimeoutM = CLI_DEFAULT_TIMEOUT_M; }
    5c80:	90 93 3b 01 	sts	0x013B, r25
    // Do not call based on internal/synthetic events.
    // Such evidence may include operation of buttons (etc) on the unit or PIR.
    // Do not call from (for example) 'on' schedule change.
    // Makes occupation immediately visible.
    // Thread-safe and ISR-safe.
    void markAsOccupied() { value = 100; occupationCountdownM = OCCUPATION_TIMEOUT_M; activityCountdownM = 2; }
    5c84:	84 e6       	ldi	r24, 0x64	; 100
    5c86:	80 93 14 02 	sts	0x0214, r24
    5c8a:	82 e3       	ldi	r24, 0x32	; 50
    5c8c:	80 93 15 02 	sts	0x0215, r24
    5c90:	90 93 16 02 	sts	0x0216, r25

    // User is pressing the mode button: cycle through FROST | WARM [ | BAKE ].
    // Mark controls used and room as currently occupied given button press.
    markUIControlUsed();
    // LED on...
    LED_HEATCALL_ON();
    5c94:	5c 98       	cbi	0x0b, 4	; 11
// Very tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define VERYTINY_PAUSE_MS 5
static void inline veryTinyPause() { sleepLowPowerMs(VERYTINY_PAUSE_MS); }
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define TINY_PAUSE_MS 15
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    5c96:	80 e0       	ldi	r24, 0x00	; 0
    5c98:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <nap(signed char)>
    tinyPause(); // Leading tiny pause...
    if(!isWarmModePutative) // Was in FROST mode; moving to WARM mode.
    5c9c:	80 91 b8 03 	lds	r24, 0x03B8
    5ca0:	88 23       	and	r24, r24
    5ca2:	51 f4       	brne	.+20     	; 0x5cb8 <tickUI(unsigned char)+0xc2>
      {
      isWarmModePutative = true;
    5ca4:	10 93 b8 03 	sts	0x03B8, r17
#ifdef SUPPORT_BAKE
      isBakeModePutative = false;
    5ca8:	10 92 b7 03 	sts	0x03B7, r1
#endif
      // 2 x flash 'heat call' to indicate now in WARM mode.
      LED_HEATCALL_OFF();
    5cac:	5c 9a       	sbi	0x0b, 4	; 11
      offPause();
    5cae:	0e 94 f4 2d 	call	0x5be8	; 0x5be8 <offPause()>
      LED_HEATCALL_ON();
    5cb2:	5c 98       	cbi	0x0b, 4	; 11
    5cb4:	80 e0       	ldi	r24, 0x00	; 0
    5cb6:	13 c0       	rjmp	.+38     	; 0x5cde <tickUI(unsigned char)+0xe8>
      tinyPause();
      }
#ifdef SUPPORT_BAKE
    else if(!isBakeModePutative) // Was in WARM mode, move to BAKE (with full timeout to run).
    5cb8:	80 91 b7 03 	lds	r24, 0x03B7
    5cbc:	88 23       	and	r24, r24
    5cbe:	91 f4       	brne	.+36     	; 0x5ce4 <tickUI(unsigned char)+0xee>
      {
      isBakeModePutative = true;
    5cc0:	10 93 b7 03 	sts	0x03B7, r17
      // 2 x flash + one longer flash 'heat call' to indicate now in BAKE mode.
      LED_HEATCALL_OFF();
    5cc4:	5c 9a       	sbi	0x0b, 4	; 11
      offPause();
    5cc6:	0e 94 f4 2d 	call	0x5be8	; 0x5be8 <offPause()>
      LED_HEATCALL_ON();
    5cca:	5c 98       	cbi	0x0b, 4	; 11
    5ccc:	80 e0       	ldi	r24, 0x00	; 0
    5cce:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <nap(signed char)>
      tinyPause();
      LED_HEATCALL_OFF();
    5cd2:	5c 9a       	sbi	0x0b, 4	; 11
// Small low-power sleep.
#define SMALL_PAUSE_MS 30
static void inline smallPause() { nap(WDTO_30MS); }
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define MEDIUM_PAUSE_MS 60
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
    5cd4:	82 e0       	ldi	r24, 0x02	; 2
    5cd6:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <nap(signed char)>
      mediumPause(); // Note different flash on/off duty cycle to try to distinguish this last flash.
      LED_HEATCALL_ON();
    5cda:	5c 98       	cbi	0x0b, 4	; 11
    5cdc:	82 e0       	ldi	r24, 0x02	; 2
    5cde:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <nap(signed char)>
    5ce2:	ad c0       	rjmp	.+346    	; 0x5e3e <tickUI(unsigned char)+0x248>
      mediumPause();
      }
#endif
    else // Was in BAKE (if supported, else was in WARM), move to FROST.
      {
      isWarmModePutative = false;
    5ce4:	10 92 b8 03 	sts	0x03B8, r1
#ifdef SUPPORT_BAKE
      isBakeModePutative = false;
    5ce8:	10 92 b7 03 	sts	0x03B7, r1
    5cec:	a8 c0       	rjmp	.+336    	; 0x5e3e <tickUI(unsigned char)+0x248>
      }
    }
  else
    {
    // Update real control variables for mode when button is released.
    if(modeButtonWasPressed)
    5cee:	88 23       	and	r24, r24
    5cf0:	f9 f0       	breq	.+62     	; 0x5d30 <tickUI(unsigned char)+0x13a>
      {
      // Don't update the debounced WARM mode while button held down.
      // Will also capture programmatic changes to isWarmMode, eg from schedules.
      const bool isWarmModeDebounced = isWarmModePutative;
      setWarmModeDebounced(isWarmModeDebounced);
    5cf2:	80 91 b8 03 	lds	r24, 0x03B8
    5cf6:	0e 94 b1 03 	call	0x762	; 0x762 <setWarmModeDebounced(bool)>
#ifdef SUPPORT_BAKE
      if(isBakeModePutative) { startBakeDebounced(); } else { cancelBakeDebounced(); }
    5cfa:	80 91 b7 03 	lds	r24, 0x03B7
    5cfe:	88 23       	and	r24, r24
    5d00:	19 f0       	breq	.+6      	; 0x5d08 <tickUI(unsigned char)+0x112>
    5d02:	0e 94 c4 03 	call	0x788	; 0x788 <startBakeDebounced()>
    5d06:	02 c0       	rjmp	.+4      	; 0x5d0c <tickUI(unsigned char)+0x116>
    5d08:	0e 94 c1 03 	call	0x782	; 0x782 <cancelBakeDebounced()>
// Record local manual operation of a local physical UI control, eg not remote or via CLI.
// To be thread-safe, everything that this touches or calls must be.
// Thread-safe.
void markUIControlUsed()
  {
  statusChange = true; // Note user interaction with the system.
    5d0c:	81 e0       	ldi	r24, 0x01	; 1
    5d0e:	80 93 b4 03 	sts	0x03B4, r24
  uiTimeoutM = UI_DEFAULT_TIMEOUT_M; // Ensure that UI controls are kept 'warm' for a little while.
    5d12:	92 e0       	ldi	r25, 0x02	; 2
    5d14:	90 93 b2 03 	sts	0x03B2, r25
#define CLI_DEFAULT_TIMEOUT_M 2
static volatile uint8_t CLITimeoutM = CLI_DEFAULT_TIMEOUT_M;

// Reset CLI active timer to the full whack before it goes inactive again (ie makes CLI active for a while).
// Thread-safe.
void resetCLIActiveTimer() { CLITimeoutM = CLI_DEFAULT_TIMEOUT_M; }
    5d18:	90 93 3b 01 	sts	0x013B, r25
    5d1c:	84 e6       	ldi	r24, 0x64	; 100
    5d1e:	80 93 14 02 	sts	0x0214, r24
    5d22:	82 e3       	ldi	r24, 0x32	; 50
    5d24:	80 93 15 02 	sts	0x0215, r24
    5d28:	90 93 16 02 	sts	0x0216, r25
#ifdef SUPPORT_BAKE
      if(isBakeModePutative) { startBakeDebounced(); } else { cancelBakeDebounced(); }
#endif

      markUIControlUsed(); // Note activity on release of MODE button...
      modeButtonWasPressed = false;
    5d2c:	10 92 b6 03 	sts	0x03B6, r1
      }

    // Keep reporting UI status if the user has just touched the unit in some way.
    // (Or if occupancy/activity was just detected, to give the use some feedback for indirectly interacting.)
    const bool justTouched = statusChange || recentUIControlUse() || Occupancy.reportedRecently();
    5d30:	80 91 b4 03 	lds	r24, 0x03B4
    5d34:	88 23       	and	r24, r24
    5d36:	c9 f4       	brne	.+50     	; 0x5d6a <tickUI(unsigned char)+0x174>
  Occupancy.markAsOccupied(); // Thread-safe.
  }

// True if a manual UI control has been recently (seconds to minutes ago) operated.
// Thread-safe.
bool recentUIControlUse() { return(0 != uiTimeoutM); }
    5d38:	80 91 b2 03 	lds	r24, 0x03B2
      modeButtonWasPressed = false;
      }

    // Keep reporting UI status if the user has just touched the unit in some way.
    // (Or if occupancy/activity was just detected, to give the use some feedback for indirectly interacting.)
    const bool justTouched = statusChange || recentUIControlUse() || Occupancy.reportedRecently();
    5d3c:	88 23       	and	r24, r24
    5d3e:	a9 f4       	brne	.+42     	; 0x5d6a <tickUI(unsigned char)+0x174>
    virtual const char *tag() const { return("occ|%"); }

    // True if activity/occupancy recently reported (within last couple of minutes).
    // Includes weak and strong reports.
    // Thread-safe.
    bool reportedRecently() { return(0 != activityCountdownM); }
    5d40:	80 91 16 02 	lds	r24, 0x0216
    5d44:	88 23       	and	r24, r24
    5d46:	89 f4       	brne	.+34     	; 0x5d6a <tickUI(unsigned char)+0x174>
    5d48:	9b c0       	rjmp	.+310    	; 0x5e80 <tickUI(unsigned char)+0x28a>
      // DHD20131223: do not flash if the room is dark so as to save energy and avoid disturbing sleep, etc.
      // In this case force resample of light level frequently in case user turns light on eg to operate unit.
      // Do show LED flash if user has recently operated controls (other than mode button) manually.
      // Flash infrequently if no recently operated controls and not in BAKE mode and not actually calling for heat;
      // this is to conserve batteries for those people who leave the valves in WARM mode all the time.
      if(justTouched ||
    5d4a:	11 23       	and	r17, r17
    5d4c:	49 f4       	brne	.+18     	; 0x5d60 <tickUI(unsigned char)+0x16a>
    // Can be used to trigger rebuild of messages, force updates to actuators, etc.
    bool isValveMoved() const { return(retainedState.valveMoved); }

    // True if this unit is nominally calling for heat (temperature is under target).
    // Thread-safe and ISR safe.
    bool isCallingForHeat() const { return(callingForHeat); }
    5d4e:	80 91 39 02 	lds	r24, 0x0239
    5d52:	88 23       	and	r24, r24
    5d54:	29 f4       	brne	.+10     	; 0x5d60 <tickUI(unsigned char)+0x16a>
    5d56:	0e 94 b8 03 	call	0x770	; 0x770 <inBakeMode()>
    5d5a:	88 23       	and	r24, r24
    5d5c:	09 f4       	brne	.+2      	; 0x5d60 <tickUI(unsigned char)+0x16a>
    5d5e:	5f c0       	rjmp	.+190    	; 0x5e1e <tickUI(unsigned char)+0x228>
    bool isRoomLit() const { return(isRoomLitFlag); }

    // Returns true if room is light enough for someone to be active.
    // False if unknown.
    // Thread-safe and usable within ISRs (Interrupt Service Routines).
    bool isRoomDark() const { return(!isRoomLitFlag); }
    5d60:	80 91 be 03 	lds	r24, 0x03BE
    5d64:	88 23       	and	r24, r24
    5d66:	09 f4       	brne	.+2      	; 0x5d6a <tickUI(unsigned char)+0x174>
    5d68:	5a c0       	rjmp	.+180    	; 0x5e1e <tickUI(unsigned char)+0x228>
         ((forthTick || NominalRadValve.isCallingForHeat() || inBakeMode()) && !AmbLight.isRoomDark()))
        {
        // First flash to indicate WARM mode (or pot being twiddled).
        LED_HEATCALL_ON();
    5d6a:	5c 98       	cbi	0x0b, 4	; 11
        // LED on stepwise proportional to temp pot setting.
        // Small number of steps (3) should help make positioning more obvious.
        const uint8_t wt = getWARMTargetC();
    5d6c:	0e 94 cb 03 	call	0x796	; 0x796 <getWARMTargetC()>
    5d70:	18 2f       	mov	r17, r24
        // Makes vtiny|tiny|medium flash for cool|OK|warm temperature target.
        if(isEcoTemperature(wt)) { veryTinyPause(); }
    5d72:	82 31       	cpi	r24, 0x12	; 18
    5d74:	28 f4       	brcc	.+10     	; 0x5d80 <tickUI(unsigned char)+0x18a>
// This may be achieved in part by dynamically slowing the CPU clock if possible.
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed((((MIN_CPU_HZ * (ms)) + 2000) / 4000) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    5d76:	85 e2       	ldi	r24, 0x25	; 37
    5d78:	90 e0       	ldi	r25, 0x00	; 0
    5d7a:	0e 94 8b 1d 	call	0x3b16	; 0x3b16 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
    5d7e:	07 c0       	rjmp	.+14     	; 0x5d8e <tickUI(unsigned char)+0x198>
        else if(!isComfortTemperature(wt)) { tinyPause(); }
    5d80:	85 31       	cpi	r24, 0x15	; 21
    5d82:	10 f4       	brcc	.+4      	; 0x5d88 <tickUI(unsigned char)+0x192>
// Very tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define VERYTINY_PAUSE_MS 5
static void inline veryTinyPause() { sleepLowPowerMs(VERYTINY_PAUSE_MS); }
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define TINY_PAUSE_MS 15
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    5d84:	80 e0       	ldi	r24, 0x00	; 0
    5d86:	01 c0       	rjmp	.+2      	; 0x5d8a <tickUI(unsigned char)+0x194>
// Small low-power sleep.
#define SMALL_PAUSE_MS 30
static void inline smallPause() { nap(WDTO_30MS); }
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define MEDIUM_PAUSE_MS 60
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
    5d88:	82 e0       	ldi	r24, 0x02	; 2
    5d8a:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <nap(signed char)>
    5d8e:	80 91 39 02 	lds	r24, 0x0239
        else { mediumPause(); }

        // Second flash to indicate actually calling for heat.
        if(NominalRadValve.isCallingForHeat())
    5d92:	88 23       	and	r24, r24
    5d94:	09 f4       	brne	.+2      	; 0x5d98 <tickUI(unsigned char)+0x1a2>
    5d96:	43 c0       	rjmp	.+134    	; 0x5e1e <tickUI(unsigned char)+0x228>
          {
          LED_HEATCALL_OFF();
    5d98:	5c 9a       	sbi	0x0b, 4	; 11
          offPause(); // V0.09 was mediumPause().
    5d9a:	0e 94 f4 2d 	call	0x5be8	; 0x5be8 <offPause()>
          LED_HEATCALL_ON(); // flash
    5d9e:	5c 98       	cbi	0x0b, 4	; 11
          if(isEcoTemperature(wt)) { veryTinyPause(); }
    5da0:	12 31       	cpi	r17, 0x12	; 18
    5da2:	18 f4       	brcc	.+6      	; 0x5daa <tickUI(unsigned char)+0x1b4>
// This may be achieved in part by dynamically slowing the CPU clock if possible.
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed((((MIN_CPU_HZ * (ms)) + 2000) / 4000) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    5da4:	85 e2       	ldi	r24, 0x25	; 37
    5da6:	90 e0       	ldi	r25, 0x00	; 0
    5da8:	04 c0       	rjmp	.+8      	; 0x5db2 <tickUI(unsigned char)+0x1bc>
          else if(!isComfortTemperature(wt)) { sleepLowPowerMs((VERYTINY_PAUSE_MS + TINY_PAUSE_MS) / 2); }
    5daa:	15 31       	cpi	r17, 0x15	; 21
    5dac:	28 f4       	brcc	.+10     	; 0x5db8 <tickUI(unsigned char)+0x1c2>
    5dae:	8c e4       	ldi	r24, 0x4C	; 76
    5db0:	90 e0       	ldi	r25, 0x00	; 0
    5db2:	0e 94 8b 1d 	call	0x3b16	; 0x3b16 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
    5db6:	03 c0       	rjmp	.+6      	; 0x5dbe <tickUI(unsigned char)+0x1c8>
// Very tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define VERYTINY_PAUSE_MS 5
static void inline veryTinyPause() { sleepLowPowerMs(VERYTINY_PAUSE_MS); }
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define TINY_PAUSE_MS 15
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    5db8:	80 e0       	ldi	r24, 0x00	; 0
    5dba:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <nap(signed char)>
          else { tinyPause(); }

#ifdef SUPPORT_BAKE
          if(inBakeMode())
    5dbe:	0e 94 b8 03 	call	0x770	; 0x770 <inBakeMode()>
    5dc2:	88 23       	and	r24, r24
    5dc4:	61 f1       	breq	.+88     	; 0x5e1e <tickUI(unsigned char)+0x228>
            {
            // Third (lengthened) flash to indicate BAKE mode.
            LED_HEATCALL_OFF();
    5dc6:	5c 9a       	sbi	0x0b, 4	; 11
// Small low-power sleep.
#define SMALL_PAUSE_MS 30
static void inline smallPause() { nap(WDTO_30MS); }
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define MEDIUM_PAUSE_MS 60
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
    5dc8:	82 e0       	ldi	r24, 0x02	; 2
    5dca:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <nap(signed char)>
            mediumPause(); // Note different flash off time to try to distinguish this last flash.
            LED_HEATCALL_ON();
    5dce:	5c 98       	cbi	0x0b, 4	; 11
            // Makes tiny|small|medium flash for eco|OK|comfort temperature target.
            if(isEcoTemperature(wt)) { tinyPause(); }
    5dd0:	12 31       	cpi	r17, 0x12	; 18
    5dd2:	10 f4       	brcc	.+4      	; 0x5dd8 <tickUI(unsigned char)+0x1e2>
// Very tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define VERYTINY_PAUSE_MS 5
static void inline veryTinyPause() { sleepLowPowerMs(VERYTINY_PAUSE_MS); }
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define TINY_PAUSE_MS 15
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    5dd4:	80 e0       	ldi	r24, 0x00	; 0
    5dd6:	05 c0       	rjmp	.+10     	; 0x5de2 <tickUI(unsigned char)+0x1ec>
            else if(!isComfortTemperature(wt)) { smallPause(); }
    5dd8:	15 31       	cpi	r17, 0x15	; 21
    5dda:	10 f4       	brcc	.+4      	; 0x5de0 <tickUI(unsigned char)+0x1ea>
// Small low-power sleep.
#define SMALL_PAUSE_MS 30
static void inline smallPause() { nap(WDTO_30MS); }
    5ddc:	81 e0       	ldi	r24, 0x01	; 1
    5dde:	01 c0       	rjmp	.+2      	; 0x5de2 <tickUI(unsigned char)+0x1ec>
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define MEDIUM_PAUSE_MS 60
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
    5de0:	82 e0       	ldi	r24, 0x02	; 2
    5de2:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <nap(signed char)>
    5de6:	1b c0       	rjmp	.+54     	; 0x5e1e <tickUI(unsigned char)+0x228>
    5de8:	80 91 be 03 	lds	r24, 0x03BE
    // Even in FROST mode, and if actually calling for heat (eg opening the rad valve significantly, etc)
    // then emit a tiny double flash on every 4th tick.
    // This call for heat may be frost protection or pre-warming / anticipating demand.
    // DHD20130528: new 4th-tick flash in FROST mode...
    // DHD20131223: do not flash if the room is dark so as to save energy and avoid disturbing sleep, etc.
    else if(forthTick &&
    5dec:	88 23       	and	r24, r24
    5dee:	b9 f0       	breq	.+46     	; 0x5e1e <tickUI(unsigned char)+0x228>
    5df0:	80 91 39 02 	lds	r24, 0x0239
    5df4:	88 23       	and	r24, r24
    5df6:	99 f0       	breq	.+38     	; 0x5e1e <tickUI(unsigned char)+0x228>
    5df8:	89 e1       	ldi	r24, 0x19	; 25
    5dfa:	92 e0       	ldi	r25, 0x02	; 2
    5dfc:	0e 94 8e 0c 	call	0x191c	; 0x191c <ModelledRadValve::isControlledValveReallyOpen() const>
    5e00:	88 23       	and	r24, r24
    5e02:	69 f0       	breq	.+26     	; 0x5e1e <tickUI(unsigned char)+0x228>
            !AmbLight.isRoomDark() &&
            NominalRadValve.isCallingForHeat() &&
            NominalRadValve.isControlledValveReallyOpen())
      {
      // Double flash every 4th tick indicates call for heat while in FROST MODE (matches call for heat in WARM mode).
      LED_HEATCALL_ON(); // flash
    5e04:	5c 98       	cbi	0x0b, 4	; 11
// This may be achieved in part by dynamically slowing the CPU clock if possible.
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed((((MIN_CPU_HZ * (ms)) + 2000) / 4000) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    5e06:	85 e2       	ldi	r24, 0x25	; 37
    5e08:	90 e0       	ldi	r25, 0x00	; 0
    5e0a:	0e 94 8b 1d 	call	0x3b16	; 0x3b16 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
      veryTinyPause();
      LED_HEATCALL_OFF();
    5e0e:	5c 9a       	sbi	0x0b, 4	; 11
      offPause();
    5e10:	0e 94 f4 2d 	call	0x5be8	; 0x5be8 <offPause()>
      LED_HEATCALL_ON(); // flash
    5e14:	5c 98       	cbi	0x0b, 4	; 11
    5e16:	85 e2       	ldi	r24, 0x25	; 37
    5e18:	90 e0       	ldi	r25, 0x00	; 0
    5e1a:	0e 94 8b 1d 	call	0x3b16	; 0x3b16 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
      veryTinyPause();
      }

    // Enforce any changes that may have been driven by other UI components (ie other than MODE button).
    // Eg adjustment of temp pot / eco bias changing scheduled state.
    if(statusChange)
    5e1e:	80 91 b4 03 	lds	r24, 0x03B4
    5e22:	88 23       	and	r24, r24
    5e24:	61 f0       	breq	.+24     	; 0x5e3e <tickUI(unsigned char)+0x248>
      {
      static bool prevScheduleStatus;
      const bool currentScheduleStatus = isAnyScheduleOnWARMNow();
    5e26:	0e 94 ed 25 	call	0x4bda	; 0x4bda <isAnyScheduleOnWARMNow()>
    5e2a:	98 2f       	mov	r25, r24
      if(currentScheduleStatus != prevScheduleStatus)
    5e2c:	80 91 b5 03 	lds	r24, 0x03B5
    5e30:	98 17       	cp	r25, r24
    5e32:	29 f0       	breq	.+10     	; 0x5e3e <tickUI(unsigned char)+0x248>
        {
        prevScheduleStatus = currentScheduleStatus;
    5e34:	90 93 b5 03 	sts	0x03B5, r25
        setWarmModeDebounced(currentScheduleStatus);
    5e38:	89 2f       	mov	r24, r25
    5e3a:	0e 94 b1 03 	call	0x762	; 0x762 <setWarmModeDebounced(bool)>
        }
      }
    }

  // Ensure LED forced off unconditionally at least once each cycle.
  LED_HEATCALL_OFF();
    5e3e:	5c 9a       	sbi	0x0b, 4	; 11

#ifdef LEARN_BUTTON_AVAILABLE
  // Handle learn button if supported and if is currently pressed.
  if(fastDigitalRead(BUTTON_LEARN_L) == LOW)
    5e40:	18 99       	sbic	0x03, 0	; 3
    5e42:	02 c0       	rjmp	.+4      	; 0x5e48 <tickUI(unsigned char)+0x252>
    {
    handleLEARN(0);
    5e44:	80 e0       	ldi	r24, 0x00	; 0
    5e46:	03 c0       	rjmp	.+6      	; 0x5e4e <tickUI(unsigned char)+0x258>
    LED_HEATCALL_ON(); // Leave heatcall LED on while learn button held down.
    }

#if defined(BUTTON_LEARN2_L)
  // Handle second learn button if supported and currently pressed and primary learn button not pressed.
  else if(fastDigitalRead(BUTTON_LEARN2_L) == LOW)
    5e48:	4b 99       	sbic	0x09, 3	; 9
    5e4a:	14 c0       	rjmp	.+40     	; 0x5e74 <tickUI(unsigned char)+0x27e>
    {
    handleLEARN(1);
    5e4c:	81 e0       	ldi	r24, 0x01	; 1
    5e4e:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <handleLEARN(unsigned char)>
// Record local manual operation of a local physical UI control, eg not remote or via CLI.
// To be thread-safe, everything that this touches or calls must be.
// Thread-safe.
void markUIControlUsed()
  {
  statusChange = true; // Note user interaction with the system.
    5e52:	81 e0       	ldi	r24, 0x01	; 1
    5e54:	80 93 b4 03 	sts	0x03B4, r24
  uiTimeoutM = UI_DEFAULT_TIMEOUT_M; // Ensure that UI controls are kept 'warm' for a little while.
    5e58:	92 e0       	ldi	r25, 0x02	; 2
    5e5a:	90 93 b2 03 	sts	0x03B2, r25
#define CLI_DEFAULT_TIMEOUT_M 2
static volatile uint8_t CLITimeoutM = CLI_DEFAULT_TIMEOUT_M;

// Reset CLI active timer to the full whack before it goes inactive again (ie makes CLI active for a while).
// Thread-safe.
void resetCLIActiveTimer() { CLITimeoutM = CLI_DEFAULT_TIMEOUT_M; }
    5e5e:	90 93 3b 01 	sts	0x013B, r25
    // Do not call based on internal/synthetic events.
    // Such evidence may include operation of buttons (etc) on the unit or PIR.
    // Do not call from (for example) 'on' schedule change.
    // Makes occupation immediately visible.
    // Thread-safe and ISR-safe.
    void markAsOccupied() { value = 100; occupationCountdownM = OCCUPATION_TIMEOUT_M; activityCountdownM = 2; }
    5e62:	84 e6       	ldi	r24, 0x64	; 100
    5e64:	80 93 14 02 	sts	0x0214, r24
    5e68:	82 e3       	ldi	r24, 0x32	; 50
    5e6a:	80 93 15 02 	sts	0x0215, r24
    5e6e:	90 93 16 02 	sts	0x0216, r25
  // Handle second learn button if supported and currently pressed and primary learn button not pressed.
  else if(fastDigitalRead(BUTTON_LEARN2_L) == LOW)
    {
    handleLEARN(1);
    markUIControlUsed(); // Mark controls used and room as currently occupied given button press.
    LED_HEATCALL_ON(); // Leave heatcall LED on while learn button held down.
    5e72:	5c 98       	cbi	0x0b, 4	; 11
    }
#endif
#endif

  const bool statusChanged = statusChange;
    5e74:	80 91 b4 03 	lds	r24, 0x03B4
  statusChange = false; // Potential race.
    5e78:	10 92 b4 03 	sts	0x03B4, r1
  return(statusChanged);
  }
    5e7c:	1f 91       	pop	r17
    5e7e:	08 95       	ret
    // (Or if occupancy/activity was just detected, to give the use some feedback for indirectly interacting.)
    const bool justTouched = statusChange || recentUIControlUse() || Occupancy.reportedRecently();

    // Mode button not pressed: indicate current mode with flash(es); more flashes if actually calling for heat.
    // Force display while UI controls are being used, eg to indicate temp pot position.
    if(justTouched || inWarmMode()) // Generate flash(es) if in WARM mode or fiddling with UI other than Mode button.
    5e80:	0e 94 ae 03 	call	0x75c	; 0x75c <inWarmMode()>
    5e84:	88 23       	and	r24, r24
    5e86:	09 f0       	breq	.+2      	; 0x5e8a <tickUI(unsigned char)+0x294>
    5e88:	60 cf       	rjmp	.-320    	; 0x5d4a <tickUI(unsigned char)+0x154>
    // Even in FROST mode, and if actually calling for heat (eg opening the rad valve significantly, etc)
    // then emit a tiny double flash on every 4th tick.
    // This call for heat may be frost protection or pre-warming / anticipating demand.
    // DHD20130528: new 4th-tick flash in FROST mode...
    // DHD20131223: do not flash if the room is dark so as to save energy and avoid disturbing sleep, etc.
    else if(forthTick &&
    5e8a:	11 23       	and	r17, r17
    5e8c:	41 f2       	breq	.-112    	; 0x5e1e <tickUI(unsigned char)+0x228>
    5e8e:	ac cf       	rjmp	.-168    	; 0x5de8 <tickUI(unsigned char)+0x1f2>

00005e90 <global constructors keyed to _Z5panicv>:
  '/',
  __DATE__[0], __DATE__[1], __DATE__[2],
  '/',
  __DATE__[4], __DATE__[5],
  '\0'
  };
    5e90:	82 e3       	ldi	r24, 0x32	; 50
    5e92:	80 93 3c 01 	sts	0x013C, r24
    5e96:	80 e3       	ldi	r24, 0x30	; 48
    5e98:	80 93 3d 01 	sts	0x013D, r24
    5e9c:	91 e3       	ldi	r25, 0x31	; 49
    5e9e:	90 93 3e 01 	sts	0x013E, r25
    5ea2:	84 e3       	ldi	r24, 0x34	; 52
    5ea4:	80 93 3f 01 	sts	0x013F, r24
    5ea8:	84 e4       	ldi	r24, 0x44	; 68
    5eaa:	80 93 41 01 	sts	0x0141, r24
    5eae:	85 e6       	ldi	r24, 0x65	; 101
    5eb0:	80 93 42 01 	sts	0x0142, r24
    5eb4:	83 e6       	ldi	r24, 0x63	; 99
    5eb6:	80 93 43 01 	sts	0x0143, r24
    5eba:	83 e3       	ldi	r24, 0x33	; 51
    5ebc:	80 93 45 01 	sts	0x0145, r24
    5ec0:	90 93 46 01 	sts	0x0146, r25
//us apparent: 1408
//us apparent: 3776
//us apparent: 2816
#endif
#endif
  }
    5ec4:	08 95       	ret

00005ec6 <loop>:
#if defined(ALT_MAIN_LOOP) // Run alternative main loop.
  loopAlt();
#elif defined(UNIT_TESTS) // Run unit tests *instead* of normal loop() code. 
  loopUnitTest();
#else // Normal OpenTRV usage.
  loopOpenTRV();
    5ec6:	0e 94 b1 0c 	call	0x1962	; 0x1962 <loopOpenTRV()>
//us apparent: 1408
//us apparent: 3776
//us apparent: 2816
#endif
#endif
  }
    5eca:	08 95       	ret

00005ecc <sleepLowPowerMs(unsigned int)>:
    5ecc:	a0 e0       	ldi	r26, 0x00	; 0
    5ece:	b0 e0       	ldi	r27, 0x00	; 0
    5ed0:	bc 01       	movw	r22, r24
    5ed2:	cd 01       	movw	r24, r26
    5ed4:	22 e1       	ldi	r18, 0x12	; 18
    5ed6:	3a e7       	ldi	r19, 0x7A	; 122
    5ed8:	40 e0       	ldi	r20, 0x00	; 0
    5eda:	50 e0       	ldi	r21, 0x00	; 0
    5edc:	0e 94 ad 3d 	call	0x7b5a	; 0x7b5a <__mulsi3>
    5ee0:	60 53       	subi	r22, 0x30	; 48
    5ee2:	78 4f       	sbci	r23, 0xF8	; 248
    5ee4:	8f 4f       	sbci	r24, 0xFF	; 255
    5ee6:	9f 4f       	sbci	r25, 0xFF	; 255
    5ee8:	20 ea       	ldi	r18, 0xA0	; 160
    5eea:	3f e0       	ldi	r19, 0x0F	; 15
    5eec:	40 e0       	ldi	r20, 0x00	; 0
    5eee:	50 e0       	ldi	r21, 0x00	; 0
    5ef0:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <__divmodsi4>
    5ef4:	da 01       	movw	r26, r20
    5ef6:	c9 01       	movw	r24, r18
    5ef8:	02 97       	sbiw	r24, 0x02	; 2
    5efa:	0e 94 8b 1d 	call	0x3b16	; 0x3b16 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
    5efe:	08 95       	ret

00005f00 <posPOST(unsigned char, __FlashStringHelper const*)>:
//   * Two quick flashes from the Arduino bootloader then the LED comes on.
//   * Each of the 5 main sections of Power On Self Test is 1 second LED on, 0.5 second off, n short flashes separated by 0.25s off, then 0.5s off, then 1s on.
//     The value of n is 1, 2, 3, 4, 5.
//   * The LED should then go off except for optional faint flickers as the radio is being driven if set up to do so.
#define PP_OFF_MS 250
static void posPOST(const uint8_t position, const __FlashStringHelper *s)
    5f00:	ff 92       	push	r15
    5f02:	0f 93       	push	r16
    5f04:	1f 93       	push	r17
    5f06:	cf 93       	push	r28
    5f08:	df 93       	push	r29
    5f0a:	f8 2e       	mov	r15, r24
    5f0c:	8b 01       	movw	r16, r22
  {
  sleepLowPowerMs(1000);
    5f0e:	88 ee       	ldi	r24, 0xE8	; 232
    5f10:	93 e0       	ldi	r25, 0x03	; 3
    5f12:	0e 94 66 2f 	call	0x5ecc	; 0x5ecc <sleepLowPowerMs(unsigned int)>
#ifdef DEBUG
  DEBUG_SERIAL_PRINT_FLASHSTRING("posPOST: "); // Can only be used once serial is set up.
    5f16:	82 e7       	ldi	r24, 0x72	; 114
    5f18:	94 e0       	ldi	r25, 0x04	; 4
    5f1a:	0e 94 12 27 	call	0x4e24	; 0x4e24 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(position);
    5f1e:	cf 2d       	mov	r28, r15
    5f20:	d0 e0       	ldi	r29, 0x00	; 0
    5f22:	ce 01       	movw	r24, r28
    5f24:	6a e0       	ldi	r22, 0x0A	; 10
    5f26:	70 e0       	ldi	r23, 0x00	; 0
    5f28:	0e 94 e0 26 	call	0x4dc0	; 0x4dc0 <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINT_FLASHSTRING(": ");
    5f2c:	8f e6       	ldi	r24, 0x6F	; 111
    5f2e:	94 e0       	ldi	r25, 0x04	; 4
    5f30:	0e 94 12 27 	call	0x4e24	; 0x4e24 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(s);
    5f34:	c8 01       	movw	r24, r16
    5f36:	0e 94 12 27 	call	0x4e24	; 0x4e24 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINTLN();
    5f3a:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <serialPrintlnAndFlush()>
#else
  serialPrintlnAndFlush(s);
#endif
//  pinMode(LED_HEATCALL, OUTPUT);
  LED_HEATCALL_OFF();
    5f3e:	5c 9a       	sbi	0x0b, 4	; 11

  // Skip much of lightshow if '0'/end/none position.
  if(position > 0)
    5f40:	ff 20       	and	r15, r15
    5f42:	89 f0       	breq	.+34     	; 0x5f66 <posPOST(unsigned char, __FlashStringHelper const*)+0x66>
    {
    sleepLowPowerMs(2*PP_OFF_MS); // TODO: use this time to gather entropy.
    5f44:	84 ef       	ldi	r24, 0xF4	; 244
    5f46:	91 e0       	ldi	r25, 0x01	; 1
    5f48:	07 c0       	rjmp	.+14     	; 0x5f58 <posPOST(unsigned char, __FlashStringHelper const*)+0x58>
    for(int i = position; --i >= 0; )
      {
      LED_HEATCALL_ON();
    5f4a:	5c 98       	cbi	0x0b, 4	; 11
// Very tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define VERYTINY_PAUSE_MS 5
static void inline veryTinyPause() { sleepLowPowerMs(VERYTINY_PAUSE_MS); }
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define TINY_PAUSE_MS 15
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    5f4c:	80 e0       	ldi	r24, 0x00	; 0
    5f4e:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <nap(signed char)>
      tinyPause();
      LED_HEATCALL_OFF();
    5f52:	5c 9a       	sbi	0x0b, 4	; 11
      sleepLowPowerMs(PP_OFF_MS); // TODO: use this time to gather entropy.
    5f54:	8a ef       	ldi	r24, 0xFA	; 250
    5f56:	90 e0       	ldi	r25, 0x00	; 0
    5f58:	0e 94 66 2f 	call	0x5ecc	; 0x5ecc <sleepLowPowerMs(unsigned int)>

  // Skip much of lightshow if '0'/end/none position.
  if(position > 0)
    {
    sleepLowPowerMs(2*PP_OFF_MS); // TODO: use this time to gather entropy.
    for(int i = position; --i >= 0; )
    5f5c:	21 97       	sbiw	r28, 0x01	; 1
    5f5e:	8f ef       	ldi	r24, 0xFF	; 255
    5f60:	cf 3f       	cpi	r28, 0xFF	; 255
    5f62:	d8 07       	cpc	r29, r24
    5f64:	91 f7       	brne	.-28     	; 0x5f4a <posPOST(unsigned char, __FlashStringHelper const*)+0x4a>
      LED_HEATCALL_OFF();
      sleepLowPowerMs(PP_OFF_MS); // TODO: use this time to gather entropy.
      }
    }

  sleepLowPowerMs(PP_OFF_MS); // TODO: use this time to gather entropy.
    5f66:	8a ef       	ldi	r24, 0xFA	; 250
    5f68:	90 e0       	ldi	r25, 0x00	; 0
    5f6a:	0e 94 66 2f 	call	0x5ecc	; 0x5ecc <sleepLowPowerMs(unsigned int)>
  LED_HEATCALL_ON();
    5f6e:	5c 98       	cbi	0x0b, 4	; 11
  sleepLowPowerMs(1000); // TODO: use this time to gather entropy.
    5f70:	88 ee       	ldi	r24, 0xE8	; 232
    5f72:	93 e0       	ldi	r25, 0x03	; 3
    5f74:	0e 94 66 2f 	call	0x5ecc	; 0x5ecc <sleepLowPowerMs(unsigned int)>
  }
    5f78:	df 91       	pop	r29
    5f7a:	cf 91       	pop	r28
    5f7c:	1f 91       	pop	r17
    5f7e:	0f 91       	pop	r16
    5f80:	ff 90       	pop	r15
    5f82:	08 95       	ret

00005f84 <serialPrintlnBuildVersion()>:
  };
// Version (code/board) information printed as one line to serial (with line-end, and flushed); machine- and human- parseable.
// Format: "board VXXXX REVY; code YYYY/Mmm/DD HH:MM:SS".
void serialPrintlnBuildVersion()
  {
  serialPrintAndFlush(F("board V0.2 REV"));
    5f84:	85 ec       	ldi	r24, 0xC5	; 197
    5f86:	94 e0       	ldi	r25, 0x04	; 4
    5f88:	0e 94 12 27 	call	0x4e24	; 0x4e24 <serialPrintAndFlush(__FlashStringHelper const*)>
  serialPrintAndFlush(V0p2_REV);
    5f8c:	84 e0       	ldi	r24, 0x04	; 4
    5f8e:	90 e0       	ldi	r25, 0x00	; 0
    5f90:	6a e0       	ldi	r22, 0x0A	; 10
    5f92:	70 e0       	ldi	r23, 0x00	; 0
    5f94:	0e 94 e0 26 	call	0x4dc0	; 0x4dc0 <serialPrintAndFlush(int, int)>
  serialPrintAndFlush(F("; code $Id: V0p2_Main.ino 3864 2014-12-10 21:01:54Z damonhd $ ")); // Expect SVN to substitute the Id keyword here with svn:keywords property set.
    5f98:	86 e8       	ldi	r24, 0x86	; 134
    5f9a:	94 e0       	ldi	r25, 0x04	; 4
    5f9c:	0e 94 12 27 	call	0x4e24	; 0x4e24 <serialPrintAndFlush(__FlashStringHelper const*)>
  serialPrintAndFlush(_YYYYMmmDD);
    5fa0:	8c e3       	ldi	r24, 0x3C	; 60
    5fa2:	91 e0       	ldi	r25, 0x01	; 1
    5fa4:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <serialPrintAndFlush(char const*)>
  serialPrintAndFlush(F(" " __TIME__));
    5fa8:	8c e7       	ldi	r24, 0x7C	; 124
    5faa:	94 e0       	ldi	r25, 0x04	; 4
    5fac:	0e 94 12 27 	call	0x4e24	; 0x4e24 <serialPrintAndFlush(__FlashStringHelper const*)>
  serialPrintlnAndFlush();
    5fb0:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <serialPrintlnAndFlush()>
  }
    5fb4:	08 95       	ret

00005fb6 <panic()>:
// Tries not to use lots of energy so as to keep distress beacon running for a while.
void panic()
  {
#ifdef USE_MODULE_RFM22RADIOSIMPLE
  // Reset radio and go into low-power mode.
  RFM22PowerOnInit();
    5fb6:	0e 94 04 23 	call	0x4608	; 0x4608 <RFM22PowerOnInit()>
#endif
  // Power down almost everything else...
  minimisePowerWithoutSleep();
    5fba:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <minimisePowerWithoutSleep()>
#ifdef LED_HEATCALL
  pinMode(LED_HEATCALL, OUTPUT);
#else
  pinMode(LED_HEATCALL_L, OUTPUT);
    5fbe:	84 e0       	ldi	r24, 0x04	; 4
    5fc0:	61 e0       	ldi	r22, 0x01	; 1
    5fc2:	0e 94 ee 37 	call	0x6fdc	; 0x6fdc <pinMode>
#endif
  for( ; ; )
    {
    LED_HEATCALL_ON();
    5fc6:	5c 98       	cbi	0x0b, 4	; 11
    5fc8:	80 e0       	ldi	r24, 0x00	; 0
    5fca:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <nap(signed char)>
    tinyPause();
    LED_HEATCALL_OFF();
    5fce:	5c 9a       	sbi	0x0b, 4	; 11
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define MEDIUM_PAUSE_MS 60
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
// Big low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define BIG_PAUSE_MS 120
static void inline bigPause() { nap(WDTO_120MS); } // 120ms vs 288ms nominal for PICAXE V0.09 impl.
    5fd0:	83 e0       	ldi	r24, 0x03	; 3
    5fd2:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <nap(signed char)>
    5fd6:	f7 cf       	rjmp	.-18     	; 0x5fc6 <panic()+0x10>

00005fd8 <panic(__FlashStringHelper const*)>:
  }

// Panic with fixed message.
void panic(const __FlashStringHelper *s)
  {
  serialPrintlnAndFlush(s); // May fail.
    5fd8:	0e 94 28 27 	call	0x4e50	; 0x4e50 <serialPrintlnAndFlush(__FlashStringHelper const*)>
  panic();  
    5fdc:	0e 94 db 2f 	call	0x5fb6	; 0x5fb6 <panic()>
  }
    5fe0:	08 95       	ret

00005fe2 <optionalPOST()>:
  serialPrintlnAndFlush();
  }

// Optional Power-On Self Test routines.
// Aborts with a call to panic() if a test fails.
void optionalPOST()
    5fe2:	0f 93       	push	r16
    5fe4:	1f 93       	push	r17
    5fe6:	cf 93       	push	r28
    5fe8:	df 93       	push	r29
  {
  // Capture early sub-cycle time to help ensure that the 32768Hz async clock is actually running.
  const uint8_t earlySCT = getSubCycleTime();
    5fea:	00 91 b2 00 	lds	r16, 0x00B2
#ifdef USE_MODULE_RFM22RADIOSIMPLE
#if !defined(RFM22_IS_ACTUALLY_RFM23) && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("(Using RFM22.)");
#endif
  // Initialise the radio, if configured, ASAP because it can suck a lot of power until properly initialised.
  RFM22PowerOnInit();
    5fee:	0e 94 04 23 	call	0x4608	; 0x4608 <RFM22PowerOnInit()>
  // Check that the radio is correctly connected; panic if not...
  if(!RFM22CheckConnected()) { panic(); }
    5ff2:	0e 94 02 24 	call	0x4804	; 0x4804 <RFM22CheckConnected()>
    5ff6:	88 23       	and	r24, r24
    5ff8:	11 f4       	brne	.+4      	; 0x5ffe <optionalPOST()+0x1c>
    5ffa:	0e 94 db 2f 	call	0x5fb6	; 0x5fb6 <panic()>
  // Configure the radio.
  RFM22RegisterBlockSetup(FHT8V_RFM22_Reg_Values);
    5ffe:	8f ed       	ldi	r24, 0xDF	; 223
    6000:	90 e0       	ldi	r25, 0x00	; 0
    6002:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <RFM22RegisterBlockSetup(unsigned char const (*) [2])>
  // Put the radio in low-power standby mode.
  RFM22ModeStandbyAndClearState();
    6006:	0e 94 60 23 	call	0x46c0	; 0x46c0 <RFM22ModeStandbyAndClearState()>
#endif

//  posPOST(1, F("Radio OK, checking buttons/sensors and xtal"));

  // Check buttons not stuck in the activated position.
  if((fastDigitalRead(BUTTON_MODE_L) == LOW)
    600a:	4d 9b       	sbis	0x09, 5	; 9
    600c:	04 c0       	rjmp	.+8      	; 0x6016 <optionalPOST()+0x34>
    600e:	18 9b       	sbis	0x03, 0	; 3
    6010:	02 c0       	rjmp	.+4      	; 0x6016 <optionalPOST()+0x34>
    6012:	4b 99       	sbic	0x09, 3	; 9
    6014:	04 c0       	rjmp	.+8      	; 0x601e <optionalPOST()+0x3c>
#endif
#if defined(BUTTON_LEARN2_L)
     || (fastDigitalRead(BUTTON_LEARN2_L) == LOW)
#endif
    )
    { panic(F("button stuck")); }
    6016:	82 e6       	ldi	r24, 0x62	; 98
    6018:	94 e0       	ldi	r25, 0x04	; 4
    601a:	0e 94 ec 2f 	call	0x5fd8	; 0x5fd8 <panic(__FlashStringHelper const*)>

  // Check that the 32768Hz async clock is actually running having done significant CPU-intensive work.
  const uint8_t laterSCT = getSubCycleTime();
    601e:	10 91 b2 00 	lds	r17, 0x00B2
  if(laterSCT == earlySCT)
    6022:	10 17       	cp	r17, r16
    6024:	b1 f4       	brne	.+44     	; 0x6052 <optionalPOST()+0x70>
    6026:	c4 e1       	ldi	r28, 0x14	; 20
    6028:	d0 e0       	ldi	r29, 0x00	; 0
    // Allow (an extra) 1s+ for 32768Hz crystal to start reliably, see: http://www.atmel.com/Images/doc1259.pdf
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("Sleeping to let 32768Hz clock start...");
#endif
    // Time spent here should not be a whole multiple of basic cycle time to avoid a spuriously-stationary async clock reading!
    for(int i = 20; (--i >= 0) && (earlySCT == getSubCycleTime()); )
    602a:	21 97       	sbiw	r28, 0x01	; 1
    602c:	8f ef       	ldi	r24, 0xFF	; 255
    602e:	cf 3f       	cpi	r28, 0xFF	; 255
    6030:	d8 07       	cpc	r29, r24
    6032:	c9 f0       	breq	.+50     	; 0x6066 <optionalPOST()+0x84>
    6034:	80 91 b2 00 	lds	r24, 0x00B2
    6038:	18 17       	cp	r17, r24
    603a:	a9 f4       	brne	.+42     	; 0x6066 <optionalPOST()+0x84>
      {
      sleepLowPowerMs(691);
    603c:	83 eb       	ldi	r24, 0xB3	; 179
    603e:	92 e0       	ldi	r25, 0x02	; 2
    6040:	0e 94 66 2f 	call	0x5ecc	; 0x5ecc <sleepLowPowerMs(unsigned int)>
      captureEntropy1();
    6044:	0e 94 38 20 	call	0x4070	; 0x4070 <captureEntropy1()>
    6048:	f0 cf       	rjmp	.-32     	; 0x602a <optionalPOST()+0x48>
    if(latestSCT == earlySCT)
      {
#if 0 && defined(DEBUG)
      DEBUG_SERIAL_PRINTLN_FLASHSTRING("32768Hz clock may not be running!");
#endif
      panic(F("Xtal dead")); // Async clock not running.
    604a:	88 e5       	ldi	r24, 0x58	; 88
    604c:	94 e0       	ldi	r25, 0x04	; 4
    604e:	0e 94 ec 2f 	call	0x5fd8	; 0x5fd8 <panic(__FlashStringHelper const*)>
      }
    }
//  posPOST(2, F("slow RTC clock OK"));

  // Single POST checkpoint for speed.
  posPOST(0, F("Radio, xtal, buttons OK"));
    6052:	80 e0       	ldi	r24, 0x00	; 0
    6054:	60 e4       	ldi	r22, 0x40	; 64
    6056:	74 e0       	ldi	r23, 0x04	; 4
    6058:	0e 94 80 2f 	call	0x5f00	; 0x5f00 <posPOST(unsigned char, __FlashStringHelper const*)>
  }
    605c:	df 91       	pop	r29
    605e:	cf 91       	pop	r28
    6060:	1f 91       	pop	r17
    6062:	0f 91       	pop	r16
    6064:	08 95       	ret
      {
      sleepLowPowerMs(691);
      captureEntropy1();
      }
#endif
    const uint8_t latestSCT = getSubCycleTime();
    6066:	80 91 b2 00 	lds	r24, 0x00B2
    if(latestSCT == earlySCT)
    606a:	81 17       	cp	r24, r17
    606c:	91 f7       	brne	.-28     	; 0x6052 <optionalPOST()+0x70>
    606e:	ed cf       	rjmp	.-38     	; 0x604a <optionalPOST()+0x68>

00006070 <setup>:
  }


// Setup routine: runs once after reset.
// Does some limited board self-test and will panic() if anything is obviously broken.
void setup()
    6070:	2f 92       	push	r2
    6072:	3f 92       	push	r3
    6074:	4f 92       	push	r4
    6076:	5f 92       	push	r5
    6078:	6f 92       	push	r6
    607a:	7f 92       	push	r7
    607c:	8f 92       	push	r8
    607e:	9f 92       	push	r9
    6080:	af 92       	push	r10
    6082:	bf 92       	push	r11
    6084:	cf 92       	push	r12
    6086:	df 92       	push	r13
    6088:	ef 92       	push	r14
    608a:	ff 92       	push	r15
    608c:	0f 93       	push	r16
    608e:	1f 93       	push	r17
    6090:	df 93       	push	r29
    6092:	cf 93       	push	r28
    6094:	00 d0       	rcall	.+0      	; 0x6096 <setup+0x26>
    6096:	00 d0       	rcall	.+0      	; 0x6098 <setup+0x28>
    6098:	cd b7       	in	r28, 0x3d	; 61
    609a:	de b7       	in	r29, 0x3e	; 62
  {
  // Set appropriate low-power states, interrupts, etc, ASAP.
  powerSetup();
    609c:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <powerSetup()>
    60a0:	0e e0       	ldi	r16, 0x0E	; 14
    60a2:	10 e0       	ldi	r17, 0x00	; 0
    60a4:	33 c0       	rjmp	.+102    	; 0x610c <setup+0x9c>
  {
  // Initialise all digital I/O to safe state ASAP and avoid floating lines where possible.
  // In absence of a specific alternative, drive low as an output to minimise consumption (eg from floating input).
  for(int i = 14; --i >= 0; ) // For all digital pins from 0 to 13 inclusive...
    {
    switch(i)
    60a6:	05 30       	cpi	r16, 0x05	; 5
    60a8:	11 05       	cpc	r17, r1
    60aa:	61 f1       	breq	.+88     	; 0x6104 <setup+0x94>
    60ac:	06 30       	cpi	r16, 0x06	; 6
    60ae:	11 05       	cpc	r17, r1
    60b0:	34 f4       	brge	.+12     	; 0x60be <setup+0x4e>
    60b2:	17 fd       	sbrc	r17, 7
    60b4:	14 c0       	rjmp	.+40     	; 0x60de <setup+0x6e>
    60b6:	04 30       	cpi	r16, 0x04	; 4
    60b8:	11 05       	cpc	r17, r1
    60ba:	24 f1       	brlt	.+72     	; 0x6104 <setup+0x94>
    60bc:	17 c0       	rjmp	.+46     	; 0x60ec <setup+0x7c>
    60be:	09 30       	cpi	r16, 0x09	; 9
    60c0:	11 05       	cpc	r17, r1
    60c2:	e9 f0       	breq	.+58     	; 0x60fe <setup+0x8e>
    60c4:	0a 30       	cpi	r16, 0x0A	; 10
    60c6:	11 05       	cpc	r17, r1
    60c8:	24 f4       	brge	.+8      	; 0x60d2 <setup+0x62>
    60ca:	08 30       	cpi	r16, 0x08	; 8
    60cc:	11 05       	cpc	r17, r1
    60ce:	39 f4       	brne	.+14     	; 0x60de <setup+0x6e>
    60d0:	19 c0       	rjmp	.+50     	; 0x6104 <setup+0x94>
    60d2:	0a 30       	cpi	r16, 0x0A	; 10
    60d4:	11 05       	cpc	r17, r1
    60d6:	b1 f0       	breq	.+44     	; 0x6104 <setup+0x94>
    60d8:	0c 30       	cpi	r16, 0x0C	; 12
    60da:	11 05       	cpc	r17, r1
    60dc:	99 f0       	breq	.+38     	; 0x6104 <setup+0x94>
      {
      // Low output is good safe low-power default.
      default: { digitalWrite(i, LOW); pinMode(i, OUTPUT); break; }
    60de:	80 2f       	mov	r24, r16
    60e0:	60 e0       	ldi	r22, 0x00	; 0
    60e2:	0e 94 2d 38 	call	0x705a	; 0x705a <digitalWrite>
    60e6:	80 2f       	mov	r24, r16
    60e8:	61 e0       	ldi	r22, 0x01	; 1
    60ea:	0e c0       	rjmp	.+28     	; 0x6108 <setup+0x98>
      // Switch main UI LED on for the rest of initialisation...
#ifdef LED_HEATCALL
      case LED_HEATCALL: { pinMode(LED_HEATCALL, OUTPUT); digitalWrite(LED_HEATCALL, HIGH); break; }
#endif
#ifdef LED_HEATCALL_L
      case LED_HEATCALL_L: { pinMode(LED_HEATCALL_L, OUTPUT); digitalWrite(LED_HEATCALL_L, LOW); break; }
    60ec:	84 e0       	ldi	r24, 0x04	; 4
    60ee:	61 e0       	ldi	r22, 0x01	; 1
    60f0:	0e 94 ee 37 	call	0x6fdc	; 0x6fdc <pinMode>
    60f4:	84 e0       	ldi	r24, 0x04	; 4
    60f6:	60 e0       	ldi	r22, 0x00	; 0
    60f8:	0e 94 2d 38 	call	0x705a	; 0x705a <digitalWrite>
    60fc:	07 c0       	rjmp	.+14     	; 0x610c <setup+0x9c>
#endif

#ifdef PIN_RFM_NIRQ 
      // Set as input to avoid contention current.
      case PIN_RFM_NIRQ: { pinMode(PIN_RFM_NIRQ, INPUT); break; }
    60fe:	89 e0       	ldi	r24, 0x09	; 9
    6100:	60 e0       	ldi	r22, 0x00	; 0
    6102:	02 c0       	rjmp	.+4      	; 0x6108 <setup+0x98>
#ifdef PIN_SERIAL_RX
      // Weak TX and RX pull-up empirically found to produce lowest leakage current
      // when 2xAA NiMH battery powered and connected to TTL-232R-3V3 USB lead.
      case PIN_SERIAL_RX: case PIN_SERIAL_TX:
#endif
        { pinMode(i, INPUT_PULLUP); break; }
    6104:	80 2f       	mov	r24, r16
    6106:	62 e0       	ldi	r22, 0x02	; 2
    6108:	0e 94 ee 37 	call	0x6fdc	; 0x6fdc <pinMode>
// Call this ASAP in setup() to configure I/O safely for the board, avoid pins floating, etc.
static inline void IOSetup()
  {
  // Initialise all digital I/O to safe state ASAP and avoid floating lines where possible.
  // In absence of a specific alternative, drive low as an output to minimise consumption (eg from floating input).
  for(int i = 14; --i >= 0; ) // For all digital pins from 0 to 13 inclusive...
    610c:	01 50       	subi	r16, 0x01	; 1
    610e:	10 40       	sbci	r17, 0x00	; 0
    6110:	17 ff       	sbrs	r17, 7
    6112:	c9 cf       	rjmp	.-110    	; 0x60a6 <setup+0x36>
    }

#ifdef MOTOR_DRIVE_ML
  // Weakly pull up both motor REV7 H-bridge driver lines by default.
  // Safe for all boards and may reduce parasitic floating power consumption on non-REV7 boards.
  pinMode(MOTOR_DRIVE_ML, INPUT_PULLUP);
    6114:	80 e1       	ldi	r24, 0x10	; 16
    6116:	62 e0       	ldi	r22, 0x02	; 2
    6118:	0e 94 ee 37 	call	0x6fdc	; 0x6fdc <pinMode>
  pinMode(MOTOR_DRIVE_MR, INPUT_PULLUP);
    611c:	81 e1       	ldi	r24, 0x11	; 17
    611e:	62 e0       	ldi	r22, 0x02	; 2
    6120:	0e 94 ee 37 	call	0x6fdc	; 0x6fdc <pinMode>

  // IO setup for safety, eg to avoid pins floating.
  IOSetup();

  // Restore previous RTC state if available.
  restoreRTC();
    6124:	0e 94 6a 24 	call	0x48d4	; 0x48d4 <restoreRTC()>
  // TODO: consider code to calibrate the internal RC oscillator against the xtal, eg to keep serial comms happy, eg http://www.avrfreaks.net/index.php?name=PNphpBB2&file=printview&t=36237&start=0

  serialPrintAndFlush(F("\r\nOpenTRV booting: ")); // Leading CRLF to clear leading junk, eg from bootloader.
    6128:	8c e2       	ldi	r24, 0x2C	; 44
    612a:	94 e0       	ldi	r25, 0x04	; 4
    612c:	0e 94 12 27 	call	0x4e24	; 0x4e24 <serialPrintAndFlush(__FlashStringHelper const*)>
    serialPrintlnBuildVersion();
    6130:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <serialPrintlnBuildVersion()>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    6134:	f9 99       	sbic	0x1f, 1	; 31
    6136:	fe cf       	rjmp	.-4      	; 0x6134 <setup+0xc4>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    6138:	86 e0       	ldi	r24, 0x06	; 6
    613a:	90 e0       	ldi	r25, 0x00	; 0
    613c:	92 bd       	out	0x22, r25	; 34
    613e:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    6140:	f8 9a       	sbi	0x1f, 0	; 31
    6142:	30 b4       	in	r3, 0x20	; 32
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    6144:	f9 99       	sbic	0x1f, 1	; 31
    6146:	fe cf       	rjmp	.-4      	; 0x6144 <setup+0xd4>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    6148:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    614a:	86 e0       	ldi	r24, 0x06	; 6
    614c:	90 e0       	ldi	r25, 0x00	; 0
    614e:	92 bd       	out	0x22, r25	; 34
    6150:	81 bd       	out	0x21, r24	; 33

  // Count resets to detect unexpected crashes/restarts.
  const uint8_t oldResetCount = eeprom_read_byte((uint8_t *)EE_START_RESET_COUNT);
  eeprom_write_byte((uint8_t *)EE_START_RESET_COUNT, 1 + oldResetCount);
    6152:	33 94       	inc	r3
#endif
    EEDR = __value;
    6154:	30 bc       	out	0x20, r3	; 32
    6156:	3a 94       	dec	r3
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    6158:	0f b6       	in	r0, 0x3f	; 63
    615a:	f8 94       	cli
    615c:	fa 9a       	sbi	0x1f, 2	; 31
    615e:	f9 9a       	sbi	0x1f, 1	; 31
    6160:	0f be       	out	0x3f, r0	; 63

#if defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("DEBUG build");
    6162:	80 e2       	ldi	r24, 0x20	; 32
    6164:	94 e0       	ldi	r25, 0x04	; 4
    6166:	0e 94 28 27 	call	0x4e50	; 0x4e50 <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif
#if defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("Resets: ");
    616a:	87 e1       	ldi	r24, 0x17	; 23
    616c:	94 e0       	ldi	r25, 0x04	; 4
    616e:	0e 94 12 27 	call	0x4e24	; 0x4e24 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(oldResetCount);
    6172:	83 2d       	mov	r24, r3
    6174:	90 e0       	ldi	r25, 0x00	; 0
    6176:	6a e0       	ldi	r22, 0x0A	; 10
    6178:	70 e0       	ldi	r23, 0x00	; 0
    617a:	0e 94 e0 26 	call	0x4dc0	; 0x4dc0 <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    617e:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <serialPrintlnAndFlush()>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    6182:	f9 99       	sbic	0x1f, 1	; 31
    6184:	fe cf       	rjmp	.-4      	; 0x6182 <setup+0x112>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    6186:	8d e1       	ldi	r24, 0x1D	; 29
    6188:	90 e0       	ldi	r25, 0x00	; 0
    618a:	92 bd       	out	0x22, r25	; 34
    618c:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    618e:	f8 9a       	sbi	0x1f, 0	; 31
    6190:	10 b5       	in	r17, 0x20	; 32
#if !defined(ALT_MAIN_LOOP) && !defined(UNIT_TESTS)
  const uint8_t overruns = (~eeprom_read_byte((uint8_t *)EE_START_OVERRUN_COUNTER)) & 0xff;
    6192:	10 95       	com	r17
  if(0 != overruns)
    6194:	61 f0       	breq	.+24     	; 0x61ae <setup+0x13e>
    {
    DEBUG_SERIAL_PRINT_FLASHSTRING("Overruns: ");
    6196:	8c e0       	ldi	r24, 0x0C	; 12
    6198:	94 e0       	ldi	r25, 0x04	; 4
    619a:	0e 94 12 27 	call	0x4e24	; 0x4e24 <serialPrintAndFlush(__FlashStringHelper const*)>
    DEBUG_SERIAL_PRINT(overruns);
    619e:	81 2f       	mov	r24, r17
    61a0:	90 e0       	ldi	r25, 0x00	; 0
    61a2:	6a e0       	ldi	r22, 0x0A	; 10
    61a4:	70 e0       	ldi	r23, 0x00	; 0
    61a6:	0e 94 e0 26 	call	0x4dc0	; 0x4dc0 <serialPrintAndFlush(int, int)>
    DEBUG_SERIAL_PRINTLN();
    61aa:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <serialPrintlnAndFlush()>
    }
#endif
#if defined(DEBUG)
  // Compute approx free RAM: see http://jeelabs.org/2011/05/22/atmega-memory-use/
  DEBUG_SERIAL_PRINT_FLASHSTRING("Free RAM: ");
    61ae:	81 e0       	ldi	r24, 0x01	; 1
    61b0:	94 e0       	ldi	r25, 0x04	; 4
    61b2:	0e 94 12 27 	call	0x4e24	; 0x4e24 <serialPrintAndFlush(__FlashStringHelper const*)>
  extern int __heap_start, *__brkval;
  int x;
  DEBUG_SERIAL_PRINT((int) &x - (__brkval == 0 ? (int) &__heap_start : (int) __brkval));
    61b6:	80 91 42 05 	lds	r24, 0x0542
    61ba:	90 91 43 05 	lds	r25, 0x0543
    61be:	00 97       	sbiw	r24, 0x00	; 0
    61c0:	11 f0       	breq	.+4      	; 0x61c6 <setup+0x156>
    61c2:	9c 01       	movw	r18, r24
    61c4:	02 c0       	rjmp	.+4      	; 0x61ca <setup+0x15a>
    61c6:	26 e4       	ldi	r18, 0x46	; 70
    61c8:	35 e0       	ldi	r19, 0x05	; 5
    61ca:	ce 01       	movw	r24, r28
    61cc:	01 96       	adiw	r24, 0x01	; 1
    61ce:	82 1b       	sub	r24, r18
    61d0:	93 0b       	sbc	r25, r19
    61d2:	6a e0       	ldi	r22, 0x0A	; 10
    61d4:	70 e0       	ldi	r23, 0x00	; 0
    61d6:	0e 94 e0 26 	call	0x4dc0	; 0x4dc0 <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    61da:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <serialPrintlnAndFlush()>
// POST may take too long and do unwanted things,
// especially for non-standard hardware setup.
#if defined(ALT_MAIN_LOOP)
  POSTalt(); // Do alternate POST and setup if required.
#else
  optionalPOST();
    61de:	0e 94 f1 2f 	call	0x5fe2	; 0x5fe2 <optionalPOST()>

  // No external sensors are *assumed* present if running alt main loop.
  // This may mean that the alt loop/POST will have to initialise them explicitly,
  // and the initial seed entropy may be marginally reduced also.
#if !defined(ALT_MAIN_LOOP) && !defined(UNIT_TESTS)
  const int light = AmbLight.read();
    61e2:	89 eb       	ldi	r24, 0xB9	; 185
    61e4:	93 e0       	ldi	r25, 0x03	; 3
    61e6:	0e 94 f0 33 	call	0x67e0	; 0x67e0 <AmbientLight::read()>
    61ea:	28 2e       	mov	r2, r24
  DEBUG_SERIAL_PRINT(light);
  DEBUG_SERIAL_PRINTLN();
#endif
//  // Assume 0 or full-scale values unlikely.
//  if((0 == light) || (light >= 1023)) { panic(F("LDR fault")); }
  const int heat = TemperatureC16.read();
    61ec:	83 ec       	ldi	r24, 0xC3	; 195
    61ee:	93 e0       	ldi	r25, 0x03	; 3
    61f0:	0e 94 14 33 	call	0x6628	; 0x6628 <RoomTemperatureC16::read()>
    61f4:	3c 01       	movw	r6, r24
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("T: ");
    61f6:	8d ef       	ldi	r24, 0xFD	; 253
    61f8:	93 e0       	ldi	r25, 0x03	; 3
    61fa:	0e 94 12 27 	call	0x4e24	; 0x4e24 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(heat);
    61fe:	c3 01       	movw	r24, r6
    6200:	6a e0       	ldi	r22, 0x0A	; 10
    6202:	70 e0       	ldi	r23, 0x00	; 0
    6204:	0e 94 e0 26 	call	0x4dc0	; 0x4dc0 <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    6208:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <serialPrintlnAndFlush()>
#endif
#ifdef HUMIDITY_SENSOR_SUPPORT
  const uint8_t rh = RelHumidity.read();
    620c:	8f eb       	ldi	r24, 0xBF	; 191
    620e:	93 e0       	ldi	r25, 0x03	; 3
    6210:	0e 94 7c 33 	call	0x66f8	; 0x66f8 <HumiditySensorSHT21::read()>
    6214:	08 2f       	mov	r16, r24
  DEBUG_SERIAL_PRINT(rh);
  DEBUG_SERIAL_PRINTLN();
#endif
#endif
#if defined(TEMP_POT_AVAILABLE)
  const int tempPot = TempPot.read();
    6216:	87 ec       	ldi	r24, 0xC7	; 199
    6218:	93 e0       	ldi	r25, 0x03	; 3
    621a:	0e 94 87 32 	call	0x650e	; 0x650e <TemperaturePot::read()>
    621e:	e8 2e       	mov	r14, r24
#endif


#if !defined(ALT_MAIN_LOOP) && !defined(UNIT_TESTS)
  // Get current power supply voltage (internal sensor).
  const uint16_t Vcc = Supply_mV.read();
    6220:	8f e5       	ldi	r24, 0x5F	; 95
    6222:	93 e0       	ldi	r25, 0x03	; 3
    6224:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <SupplyVoltageMilliVolts::read()>
    6228:	9c 83       	std	Y+4, r25	; 0x04
    622a:	8b 83       	std	Y+3, r24	; 0x03
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("Vcc: ");
    622c:	87 ef       	ldi	r24, 0xF7	; 247
    622e:	93 e0       	ldi	r25, 0x03	; 3
    6230:	0e 94 12 27 	call	0x4e24	; 0x4e24 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(Vcc);
    6234:	8b 81       	ldd	r24, Y+3	; 0x03
    6236:	9c 81       	ldd	r25, Y+4	; 0x04
    6238:	6a e0       	ldi	r22, 0x0A	; 10
    623a:	70 e0       	ldi	r23, 0x00	; 0
    623c:	0e 94 a0 26 	call	0x4d40	; 0x4d40 <serialPrintAndFlush(unsigned int, int)>
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("mV");
    6240:	84 ef       	ldi	r24, 0xF4	; 244
    6242:	93 e0       	ldi	r25, 0x03	; 3
    6244:	0e 94 28 27 	call	0x4e50	; 0x4e50 <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif
  // Get internal temperature measurement (internal sensor).
  const int intTempC16 = readInternalTemperatureC16();
    6248:	0e 94 5a 1f 	call	0x3eb4	; 0x3eb4 <readInternalTemperatureC16()>
    624c:	5c 01       	movw	r10, r24
    624e:	e0 e0       	ldi	r30, 0x00	; 0
    6250:	f1 e0       	ldi	r31, 0x01	; 1
    6252:	44 24       	eor	r4, r4
    6254:	4a 94       	dec	r4
    6256:	54 2c       	mov	r5, r4
        "eor    %A0,__tmp_reg__"

        : "=d" (__ret)
        : "r" (__data), "0" (__crc)
        : "r0"
    );
    6258:	81 91       	ld	r24, Z+
    625a:	92 01       	movw	r18, r4
    625c:	28 27       	eor	r18, r24
    625e:	02 2e       	mov	r0, r18
    6260:	22 95       	swap	r18
    6262:	20 7f       	andi	r18, 0xF0	; 240
    6264:	20 25       	eor	r18, r0
    6266:	03 2e       	mov	r0, r19
    6268:	32 2f       	mov	r19, r18
    626a:	22 95       	swap	r18
    626c:	2f 70       	andi	r18, 0x0F	; 15
    626e:	02 26       	eor	r0, r18
    6270:	26 95       	lsr	r18
    6272:	32 27       	eor	r19, r18
    6274:	23 27       	eor	r18, r19
    6276:	22 0f       	add	r18, r18
    6278:	22 0f       	add	r18, r18
    627a:	22 0f       	add	r18, r18
    627c:	20 25       	eor	r18, r0
    627e:	29 01       	movw	r4, r18
#define RAMSTART (0x100)
#endif
static uint16_t sramCRC()
  {
  uint16_t result = ~0U;
  for(uint8_t *p = (uint8_t *)RAMSTART; p <= (uint8_t *)RAMEND; ++p)
    6280:	39 e0       	ldi	r19, 0x09	; 9
    6282:	e0 30       	cpi	r30, 0x00	; 0
    6284:	f3 07       	cpc	r31, r19
    6286:	41 f7       	brne	.-48     	; 0x6258 <setup+0x1e8>
    6288:	20 e0       	ldi	r18, 0x00	; 0
    628a:	30 e0       	ldi	r19, 0x00	; 0
    628c:	88 24       	eor	r8, r8
    628e:	8a 94       	dec	r8
    6290:	98 2c       	mov	r9, r8
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    6292:	f9 99       	sbic	0x1f, 1	; 31
    6294:	fe cf       	rjmp	.-4      	; 0x6292 <setup+0x222>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    6296:	32 bd       	out	0x22, r19	; 34
    6298:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    629a:	f8 9a       	sbi	0x1f, 0	; 31
    629c:	80 b5       	in	r24, 0x20	; 32
    629e:	a4 01       	movw	r20, r8
    62a0:	48 27       	eor	r20, r24
    62a2:	04 2e       	mov	r0, r20
    62a4:	42 95       	swap	r20
    62a6:	40 7f       	andi	r20, 0xF0	; 240
    62a8:	40 25       	eor	r20, r0
    62aa:	05 2e       	mov	r0, r21
    62ac:	54 2f       	mov	r21, r20
    62ae:	42 95       	swap	r20
    62b0:	4f 70       	andi	r20, 0x0F	; 15
    62b2:	04 26       	eor	r0, r20
    62b4:	46 95       	lsr	r20
    62b6:	54 27       	eor	r21, r20
    62b8:	45 27       	eor	r20, r21
    62ba:	44 0f       	add	r20, r20
    62bc:	44 0f       	add	r20, r20
    62be:	44 0f       	add	r20, r20
    62c0:	40 25       	eor	r20, r0
    62c2:	4a 01       	movw	r8, r20
  }
// Compute a CRC of all of EEPROM as a hash that may contain some entropy, particularly across restarts.
static uint16_t eeCRC()
  {
  uint16_t result = ~0U;
  for(uint8_t *p = (uint8_t *)0; p <= (uint8_t *)E2END; ++p)
    62c4:	2f 5f       	subi	r18, 0xFF	; 255
    62c6:	3f 4f       	sbci	r19, 0xFF	; 255
    62c8:	54 e0       	ldi	r21, 0x04	; 4
    62ca:	20 30       	cpi	r18, 0x00	; 0
    62cc:	35 07       	cpc	r19, r21
    62ce:	09 f7       	brne	.-62     	; 0x6292 <setup+0x222>
#if defined(HUMIDITY_SENSOR_SUPPORT)
                       ((((uint16_t)rh) << 8) - rh) ^
#endif
#endif
                       (getMinutesSinceMidnightLT() << 5) ^
                       (((uint16_t)getSubCycleTime()) << 6);
    62d0:	ff 24       	eor	r15, r15
    62d2:	10 e0       	ldi	r17, 0x00	; 0
    62d4:	0e 94 48 24 	call	0x4890	; 0x4890 <getMinutesSinceMidnightLT()>
    62d8:	20 91 b2 00 	lds	r18, 0x00B2
    62dc:	c2 2e       	mov	r12, r18
    62de:	dd 24       	eor	r13, r13
    62e0:	f6 e0       	ldi	r31, 0x06	; 6
    62e2:	cc 0c       	add	r12, r12
    62e4:	dd 1c       	adc	r13, r13
    62e6:	fa 95       	dec	r31
    62e8:	e1 f7       	brne	.-8      	; 0x62e2 <setup+0x272>
    62ea:	21 e3       	ldi	r18, 0x31	; 49
    62ec:	30 e0       	ldi	r19, 0x00	; 0
    62ee:	c2 2a       	or	r12, r18
    62f0:	d3 2a       	or	r13, r19
    62f2:	4b 81       	ldd	r20, Y+3	; 0x03
    62f4:	5c 81       	ldd	r21, Y+4	; 0x04
    62f6:	c4 26       	eor	r12, r20
    62f8:	d5 26       	eor	r13, r21
    62fa:	aa 0c       	add	r10, r10
    62fc:	bb 1c       	adc	r11, r11
    62fe:	ca 24       	eor	r12, r10
    6300:	db 24       	eor	r13, r11
    6302:	66 0c       	add	r6, r6
    6304:	77 1c       	adc	r7, r7
    6306:	66 0c       	add	r6, r6
    6308:	77 1c       	adc	r7, r7
    630a:	c6 24       	eor	r12, r6
    630c:	d7 24       	eor	r13, r7
    630e:	22 2d       	mov	r18, r2
    6310:	30 e0       	ldi	r19, 0x00	; 0
    6312:	64 e0       	ldi	r22, 0x04	; 4
    6314:	22 0f       	add	r18, r18
    6316:	33 1f       	adc	r19, r19
    6318:	6a 95       	dec	r22
    631a:	e1 f7       	brne	.-8      	; 0x6314 <setup+0x2a4>
    631c:	c2 26       	eor	r12, r18
    631e:	d3 26       	eor	r13, r19
    6320:	30 2f       	mov	r19, r16
    6322:	22 27       	eor	r18, r18
    6324:	20 1b       	sub	r18, r16
    6326:	31 0b       	sbc	r19, r17
    6328:	c2 26       	eor	r12, r18
    632a:	d3 26       	eor	r13, r19
    632c:	97 01       	movw	r18, r14
    632e:	43 e0       	ldi	r20, 0x03	; 3
    6330:	22 0f       	add	r18, r18
    6332:	33 1f       	adc	r19, r19
    6334:	4a 95       	dec	r20
    6336:	e1 f7       	brne	.-8      	; 0x6330 <setup+0x2c0>
    6338:	2e 0d       	add	r18, r14
    633a:	3f 1d       	adc	r19, r15
    633c:	c2 26       	eor	r12, r18
    633e:	d3 26       	eor	r13, r19
    6340:	25 e0       	ldi	r18, 0x05	; 5
    6342:	88 0f       	add	r24, r24
    6344:	99 1f       	adc	r25, r25
    6346:	2a 95       	dec	r18
    6348:	e1 f7       	brne	.-8      	; 0x6342 <setup+0x2d2>
    634a:	c8 26       	eor	r12, r24
    634c:	d9 26       	eor	r13, r25
  //const long seed1 = ((((long) clockJitterRTC()) << 13) ^ (((long)clockJitterWDT()) << 21) ^ (((long)(srseed^eeseed)) << 16)) + s16;
  // Seed simple/fast/small built-in PRNG.  (Smaller and faster than srandom()/random().)
  const uint8_t nar1 = noisyADCRead();
    634e:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <noisyADCRead()>
    6352:	18 2f       	mov	r17, r24
  seedRNG8(nar1 ^ (uint8_t) s16, oldResetCount - (uint8_t)((s16+eeseed) >> 8), clockJitterWDT() ^ (uint8_t)srseed);
    6354:	fc 2c       	mov	r15, r12
    6356:	f8 26       	eor	r15, r24
    6358:	c6 01       	movw	r24, r12
    635a:	88 0d       	add	r24, r8
    635c:	99 1d       	adc	r25, r9
    635e:	63 2c       	mov	r6, r3
    6360:	69 1a       	sub	r6, r25
    6362:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <clockJitterWDT()>
    6366:	e4 2c       	mov	r14, r4
    6368:	48 2f       	mov	r20, r24
    636a:	44 25       	eor	r20, r4
    636c:	8f 2d       	mov	r24, r15
    636e:	66 2d       	mov	r22, r6
    6370:	0e 94 9e 21 	call	0x433c	; 0x433c <seedRNG8(unsigned char, unsigned char, unsigned char)>
  DEBUG_SERIAL_PRINTFMT(nar1, BIN);
  DEBUG_SERIAL_PRINTLN();
#endif
  // TODO: seed other/better PRNGs.
  // Feed in mainly persistent/nonvolatile state explicitly. 
  addEntropyToPool(oldResetCount ^ eeseed, 0);
    6374:	78 2c       	mov	r7, r8
    6376:	88 2d       	mov	r24, r8
    6378:	83 25       	eor	r24, r3
    637a:	60 e0       	ldi	r22, 0x00	; 0
    637c:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <addEntropyToPool(unsigned char, unsigned char)>
  addEntropyToPool((uint8_t)(eeseed >> 8) + nar1, 0);
    6380:	a9 2c       	mov	r10, r9
    6382:	bb 24       	eor	r11, r11
    6384:	81 2f       	mov	r24, r17
    6386:	8a 0d       	add	r24, r10
    6388:	60 e0       	ldi	r22, 0x00	; 0
    638a:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <addEntropyToPool(unsigned char, unsigned char)>
  addEntropyToPool((uint8_t)s16 ^ (uint8_t)(s16 >> 8) , 0);
    638e:	8c 2d       	mov	r24, r12
    6390:	8d 25       	eor	r24, r13
    6392:	60 e0       	ldi	r22, 0x00	; 0
    6394:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <addEntropyToPool(unsigned char, unsigned char)>
    6398:	02 e0       	ldi	r16, 0x02	; 2
    639a:	10 e0       	ldi	r17, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    639c:	f9 99       	sbic	0x1f, 1	; 31
    639e:	fe cf       	rjmp	.-4      	; 0x639c <setup+0x32c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    63a0:	12 bd       	out	0x22, r17	; 34
    63a2:	01 bd       	out	0x21, r16	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    63a4:	f8 9a       	sbi	0x1f, 0	; 31
    63a6:	80 b5       	in	r24, 0x20	; 32
  for(uint8_t i = 0; i < EE_LEN_SEED; ++i)
    { addEntropyToPool(eeprom_read_byte((uint8_t *)(EE_START_SEED + i)), 0); }
    63a8:	60 e0       	ldi	r22, 0x00	; 0
    63aa:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <addEntropyToPool(unsigned char, unsigned char)>
    63ae:	0f 5f       	subi	r16, 0xFF	; 255
    63b0:	1f 4f       	sbci	r17, 0xFF	; 255
  // TODO: seed other/better PRNGs.
  // Feed in mainly persistent/nonvolatile state explicitly. 
  addEntropyToPool(oldResetCount ^ eeseed, 0);
  addEntropyToPool((uint8_t)(eeseed >> 8) + nar1, 0);
  addEntropyToPool((uint8_t)s16 ^ (uint8_t)(s16 >> 8) , 0);
  for(uint8_t i = 0; i < EE_LEN_SEED; ++i)
    63b2:	06 30       	cpi	r16, 0x06	; 6
    63b4:	11 05       	cpc	r17, r1
    63b6:	91 f7       	brne	.-28     	; 0x639c <setup+0x32c>
    { addEntropyToPool(eeprom_read_byte((uint8_t *)(EE_START_SEED + i)), 0); }
  addEntropyToPool(noisyADCRead(), 4); // Conservative first push of noise into pool.
    63b8:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <noisyADCRead()>
    63bc:	64 e0       	ldi	r22, 0x04	; 4
    63be:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <addEntropyToPool(unsigned char, unsigned char)>
  // Carry a few bits of entropy over a reset by picking one of the four designated EEPROM bytes at random;
  // if zero, erase to 0xff, else AND in part of the seed including some of the previous EEPROM hash (and write).
  // This amounts to about a quarter of an erase/write cycle per reset/restart per byte, or 400k restarts endurance!
  // These 4 bytes should be picked up as part of the hash/CRC of EEPROM above, next time,
  // essentially forming a longish-cycle (poor) PRNG even with little new real entropy each time.
  seedRNG8(nar1 ^ (uint8_t) s16, oldResetCount - (uint8_t)((s16+eeseed) >> 8), clockJitterWDT() ^ (uint8_t)srseed);
    63c2:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <clockJitterWDT()>
    63c6:	e8 26       	eor	r14, r24
    63c8:	8f 2d       	mov	r24, r15
    63ca:	66 2d       	mov	r22, r6
    63cc:	4e 2d       	mov	r20, r14
    63ce:	0e 94 9e 21 	call	0x433c	; 0x433c <seedRNG8(unsigned char, unsigned char, unsigned char)>
  uint8_t *const erp = (uint8_t *)(EE_START_SEED + (3&((s16)^((eeseed>>8)+(__TIME__[7]))))); // Use some new and some eeseed bits to choose which byte to updated.
    63d2:	c5 01       	movw	r24, r10
    63d4:	c9 96       	adiw	r24, 0x39	; 57
    63d6:	8c 25       	eor	r24, r12
    63d8:	9d 25       	eor	r25, r13
    63da:	83 70       	andi	r24, 0x03	; 3
    63dc:	90 70       	andi	r25, 0x00	; 0
    63de:	02 96       	adiw	r24, 0x02	; 2
    63e0:	18 2f       	mov	r17, r24
    63e2:	09 2f       	mov	r16, r25
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    63e4:	f9 99       	sbic	0x1f, 1	; 31
    63e6:	fe cf       	rjmp	.-4      	; 0x63e4 <setup+0x374>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    63e8:	92 bd       	out	0x22, r25	; 34
    63ea:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    63ec:	f8 9a       	sbi	0x1f, 0	; 31
    63ee:	80 b5       	in	r24, 0x20	; 32
  const uint8_t erv = eeprom_read_byte(erp);
  if(0 == erv) { eeprom_smart_erase_byte(erp); }
    63f0:	88 23       	and	r24, r24
    63f2:	29 f4       	brne	.+10     	; 0x63fe <setup+0x38e>
    63f4:	81 2f       	mov	r24, r17
    63f6:	90 2f       	mov	r25, r16
    63f8:	0e 94 34 10 	call	0x2068	; 0x2068 <eeprom_smart_erase_byte(unsigned char*)>
    63fc:	08 c0       	rjmp	.+16     	; 0x640e <setup+0x39e>
  else { eeprom_smart_clear_bits(erp, clockJitterEntropyByte() + ((uint8_t)eeseed)); } // Nominally include disjoint set of eeseed bits in choice of which to clear.
    63fe:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <clockJitterEntropyByte()>
    6402:	78 0e       	add	r7, r24
    6404:	81 2f       	mov	r24, r17
    6406:	90 2f       	mov	r25, r16
    6408:	67 2d       	mov	r22, r7
    640a:	0e 94 48 10 	call	0x2090	; 0x2090 <eeprom_smart_clear_bits(unsigned char*, unsigned char)>

    // Force a read/poll/recomputation of the target position and call for heat.
    // Sets/clears changed flag if computed valve position changed.
    // Call at a fixed rate (1/60s).
    // Potentially expensive/slow.
    virtual uint8_t read() { computeCallForHeat(); return(value); }
    640e:	89 e1       	ldi	r24, 0x19	; 25
    6410:	92 e0       	ldi	r25, 0x02	; 2
    6412:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <ModelledRadValve::computeCallForHeat()>
    6416:	80 91 1b 02 	lds	r24, 0x021B
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("Creating initial FHT8V frame...");
#endif
  // Unconditionally ensure that a valid FHT8V TRV command frame has been computed and stored
  // in case this unit is actually controlling a local valve.
  FHT8VCreateValveSetCmdFrame();
    641a:	0e 94 29 15 	call	0x2a52	; 0x2a52 <FHT8VCreateValveSetCmdFrame()>


  // Ensure that the unique node ID is set up (mainly on first use).
  // Have one attempt (don't want to stress an already failing EEPROM) to force-reset if not good, then panic.
  // Needs to have had entropy gathered, etc.
  if(!ensureIDCreated())
    641e:	80 e0       	ldi	r24, 0x00	; 0
    6420:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <ensureIDCreated(bool)>
    6424:	88 23       	and	r24, r24
    6426:	49 f4       	brne	.+18     	; 0x643a <setup+0x3ca>
    {
    if(!ensureIDCreated(true)) // Force reset.
    6428:	81 e0       	ldi	r24, 0x01	; 1
    642a:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <ensureIDCreated(bool)>
    642e:	88 23       	and	r24, r24
    6430:	21 f4       	brne	.+8      	; 0x643a <setup+0x3ca>
      { panic(F("Bad ID and cannot reset.")); }
    6432:	8b ed       	ldi	r24, 0xDB	; 219
    6434:	93 e0       	ldi	r25, 0x03	; 3
    6436:	0e 94 ec 2f 	call	0x5fd8	; 0x5fd8 <panic(__FlashStringHelper const*)>
    }


  // Initialised: turn heatcall UI LED off.
//  pinMode(LED_HEATCALL, OUTPUT);
  LED_HEATCALL_OFF();
    643a:	5c 9a       	sbi	0x0b, 4	; 11
  
#if defined(SUPPORT_CLI) && !defined(ALT_MAIN_LOOP) && !defined(UNIT_TESTS)
  // Help user get to CLI.
  serialPrintlnAndFlush(F("? at CLI prompt for help"));
    643c:	82 ec       	ldi	r24, 0xC2	; 194
    643e:	93 e0       	ldi	r25, 0x03	; 3
    6440:	0e 94 28 27 	call	0x4e50	; 0x4e50 <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif

#if !defined(ALT_MAIN_LOOP) && !defined(UNIT_TESTS)
  // Report initial status.
  serialStatusReport();
    6444:	0e 94 90 28 	call	0x5120	; 0x5120 <serialStatusReport()>
  // Do OpenTRV-specific (late) setup.
  setupOpenTRV();
    6448:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <setupOpenTRV()>
#endif
  }
    644c:	0f 90       	pop	r0
    644e:	0f 90       	pop	r0
    6450:	0f 90       	pop	r0
    6452:	0f 90       	pop	r0
    6454:	cf 91       	pop	r28
    6456:	df 91       	pop	r29
    6458:	1f 91       	pop	r17
    645a:	0f 91       	pop	r16
    645c:	ff 90       	pop	r15
    645e:	ef 90       	pop	r14
    6460:	df 90       	pop	r13
    6462:	cf 90       	pop	r12
    6464:	bf 90       	pop	r11
    6466:	af 90       	pop	r10
    6468:	9f 90       	pop	r9
    646a:	8f 90       	pop	r8
    646c:	7f 90       	pop	r7
    646e:	6f 90       	pop	r6
    6470:	5f 90       	pop	r5
    6472:	4f 90       	pop	r4
    6474:	3f 90       	pop	r3
    6476:	2f 90       	pop	r2
    6478:	08 95       	ret

0000647a <AmbientLight::preferredPollInterval_s() const>:
    // Potentially expensive/slow.
    // Not thread-safe nor usable within ISRs (Interrupt Service Routines).
    virtual uint8_t read();

    // Preferred poll interval (in seconds); should bve called at constant rate, usually 1/60s.
    virtual uint8_t preferredPollInterval_s() const { return(60); }
    647a:	8c e3       	ldi	r24, 0x3C	; 60
    647c:	08 95       	ret

0000647e <AmbientLight::tag() const>:

    // Returns a suggested (JSON) tag/field/key name including units of get(); NULL means no recommended tag.
    // The lifetime of the pointed-to text must be at least that of the Sensor instance.
    virtual const char *tag() const { return("L"); }
    647e:	8d e2       	ldi	r24, 0x2D	; 45
    6480:	91 e0       	ldi	r25, 0x01	; 1
    6482:	08 95       	ret

00006484 <RoomTemperatureC16::preferredPollInterval_s() const>:
    // Not thread-safe nor usable within ISRs (Interrupt Service Routines).
    virtual int read();

    // Preferred poll interval (in seconds).
    // This should be called at a regular rate, usually 1/60, so make stats such as velocity measurement easier.
    virtual uint8_t preferredPollInterval_s() const { return(60); }
    6484:	8c e3       	ldi	r24, 0x3C	; 60
    6486:	08 95       	ret

00006488 <RoomTemperatureC16::get() const>:

    // Return last value fetched by read(); undefined before first read().
    // Fast.
    // Not thread-safe nor usable within ISRs (Interrupt Service Routines).
    virtual int get() const { return(value); }
    6488:	fc 01       	movw	r30, r24
    648a:	82 81       	ldd	r24, Z+2	; 0x02
    648c:	93 81       	ldd	r25, Z+3	; 0x03
    648e:	08 95       	ret

00006490 <RoomTemperatureC16::tag() const>:

    // Returns a suggested (JSON) tag/field/key name including units of get(); NULL means no recommended tag.
    // The lifetime of the pointed-to text must be at least that of the Sensor instance.
    virtual const char *tag() const { return("T|C16"); }
    6490:	8f e2       	ldi	r24, 0x2F	; 47
    6492:	91 e0       	ldi	r25, 0x01	; 1
    6494:	08 95       	ret

00006496 <HumiditySensorSHT21::isValid(unsigned char) const>:
    // Potentially expensive/slow.
    // Not thread-safe nor usable within ISRs (Interrupt Service Routines).
    virtual uint8_t read();

    // Returns true if the sensor reading value passed is potentially valid, ie in range [0,100].
    virtual bool isValid(const uint8_t value) const { return(value <= 100); }
    6496:	80 e0       	ldi	r24, 0x00	; 0
    6498:	65 36       	cpi	r22, 0x65	; 101
    649a:	08 f4       	brcc	.+2      	; 0x649e <HumiditySensorSHT21::isValid(unsigned char) const+0x8>
    649c:	81 e0       	ldi	r24, 0x01	; 1
    649e:	08 95       	ret

000064a0 <HumiditySensorSHT21::tag() const>:

    // Returns a suggested (JSON) tag/field/key name including units of get(); NULL means no recommended tag.
    // The lifetime of the pointed-to text must be at least that of the Sensor instance.
    virtual const char *tag() const { return("H|%"); }
    64a0:	85 e3       	ldi	r24, 0x35	; 53
    64a2:	91 e0       	ldi	r25, 0x01	; 1
    64a4:	08 95       	ret

000064a6 <Sensor<int>::isValid(int) const>:
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual T get() const = 0;

    // Returns true if this sensor reading value passed is potentially valid, eg in-range.
    // Default is to always return true, ie all values potentially valid.
    virtual bool isValid(T value) const { return(true); }
    64a6:	81 e0       	ldi	r24, 0x01	; 1
    64a8:	08 95       	ret

000064aa <Sensor<int>::handleInterruptSimple()>:
    // Must be fast and ISR (Interrupt Service Routine) safe.
    // Returns true if interrupt was successfully handled and cleared
    // else another interrupt handler in the chain may be called
    // to attempt to clear the interrupt.
    // By default does nothing (and returns false).
    virtual bool handleInterruptSimple() { return(false); }
    64aa:	80 e0       	ldi	r24, 0x00	; 0
    64ac:	08 95       	ret

000064ae <Sensor<int>::begin()>:

    // Begin access to this sensor if applicable and not already begun.
    // Returns true if it needed to be begun.
    // Allows logic to end() if required at the end of a block, etc.
    // Defaults to do nothing (and return false).
    virtual bool begin() { return(false); }
    64ae:	80 e0       	ldi	r24, 0x00	; 0
    64b0:	08 95       	ret

000064b2 <Sensor<int>::isAvailable() const>:

    // Returns true if this sensor is currently available.
    // True by default unless implementation overrides.
    // For those sensors that need starting this will be false before begin().
    virtual bool isAvailable() const { return(true); }
    64b2:	81 e0       	ldi	r24, 0x01	; 1
    64b4:	08 95       	ret

000064b6 <Sensor<int>::end()>:

    // End access to this sensor if applicable and not already ended.
    // Returns true if it needed to be ended.
    // Defaults to do nothing (and return false).
    virtual bool end() { return(false); }
    64b6:	80 e0       	ldi	r24, 0x00	; 0
    64b8:	08 95       	ret

000064ba <global constructors keyed to _ZN12AmbientLight4readEv>:
  {
  protected:
      volatile uint8_t value;

      // By default initialise the value to zero.
      SimpleTSUint8Sensor() : value(0) { }
    64ba:	10 92 bb 03 	sts	0x03BB, r1
// http://www.vishay.com/docs/84154/appnotesensors.pdf

#ifndef OMIT_MODULE_LDROCCUPANCYDETECTION
// Sensor for ambient light level; 0 is dark, 255 is bright.
class AmbientLight : public SimpleTSUint8Sensor
  {
    64be:	80 ee       	ldi	r24, 0xE0	; 224
    64c0:	91 e0       	ldi	r25, 0x01	; 1
    64c2:	90 93 ba 03 	sts	0x03BA, r25
    64c6:	80 93 b9 03 	sts	0x03B9, r24
      // Can initialise to a chosen value.
      SimpleTSUint8Sensor(const uint8_t v) : value(v) { }
    64ca:	8f ef       	ldi	r24, 0xFF	; 255
    64cc:	80 93 c1 03 	sts	0x03C1, r24
    // True if RH% is high, with hysteresis.
    // Marked volatile for thread-safe lock-free access.
    volatile bool highWithHyst;

  public:
    HumiditySensorSHT21() : SimpleTSUint8Sensor(255), highWithHyst(false) { }
    64d0:	8a ec       	ldi	r24, 0xCA	; 202
    64d2:	91 e0       	ldi	r25, 0x01	; 1
    64d4:	90 93 c0 03 	sts	0x03C0, r25
    64d8:	80 93 bf 03 	sts	0x03BF, r24
    64dc:	10 92 c2 03 	sts	0x03C2, r1
  private:
    // Room temperature in 16*C, eg 1 is 1/16 C, 32 is 2C, -64 is -4C.
    int value;

  public:
    RoomTemperatureC16() : value(0) { }
    64e0:	84 eb       	ldi	r24, 0xB4	; 180
    64e2:	91 e0       	ldi	r25, 0x01	; 1
    64e4:	90 93 c4 03 	sts	0x03C4, r25
    64e8:	80 93 c3 03 	sts	0x03C3, r24
    64ec:	10 92 c6 03 	sts	0x03C6, r1
    64f0:	10 92 c5 03 	sts	0x03C5, r1
  {
  protected:
      volatile uint8_t value;

      // By default initialise the value to zero.
      SimpleTSUint8Sensor() : value(0) { }
    64f4:	10 92 c9 03 	sts	0x03C9, r1
    // Raw pot value [0,1023] if extra precision is required.
    uint16_t raw;

  public:
    // Initialise to cautious values.
    TemperaturePot() : raw(0) { }
    64f8:	8e e9       	ldi	r24, 0x9E	; 158
    64fa:	91 e0       	ldi	r25, 0x01	; 1
    64fc:	90 93 c8 03 	sts	0x03C8, r25
    6500:	80 93 c7 03 	sts	0x03C7, r24
    6504:	10 92 cb 03 	sts	0x03CB, r1
    6508:	10 92 ca 03 	sts	0x03CA, r1

  return(value);
  }

// Singleton implementation/instance.
TemperaturePot TempPot;
    650c:	08 95       	ret

0000650e <TemperaturePot::read()>:

// Force a read/poll of the temperature pot and return the value sensed [0,255] (cold to hot).
// Potentially expensive/slow.
// This value has some hysteresis applied to reduce noise.
// Not thread-safe nor usable within ISRs (Interrupt Service Routines).
uint8_t TemperaturePot::read()
    650e:	0f 93       	push	r16
    6510:	1f 93       	push	r17
    6512:	cf 93       	push	r28
    6514:	df 93       	push	r29
    6516:	ec 01       	movw	r28, r24
  {
  // No need to wait for voltage to stablise as pot top end directly driven by IO_POWER_UP.
  power_intermittent_peripherals_enable(false);
    6518:	80 e0       	ldi	r24, 0x00	; 0
    651a:	0e 94 a7 20 	call	0x414e	; 0x414e <power_intermittent_peripherals_enable(bool)>
  const uint16_t tpRaw = analogueNoiseReducedRead(TEMP_POT_AIN, DEFAULT); // Vcc reference.
    651e:	81 e0       	ldi	r24, 0x01	; 1
    6520:	90 e0       	ldi	r25, 0x00	; 0
    6522:	61 e0       	ldi	r22, 0x01	; 1
    6524:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <analogueNoiseReducedRead(int, unsigned char)>
    6528:	8c 01       	movw	r16, r24
  power_intermittent_peripherals_disable();
    652a:	0e 94 75 20 	call	0x40ea	; 0x40ea <power_intermittent_peripherals_disable()>

#if defined(TEMP_POT_REVERSE)
  const uint16_t tp = TEMP_POT_RAW_MAX - tpRaw; // Travel is in opposite direction to natural!
    652e:	8f ef       	ldi	r24, 0xFF	; 255
    6530:	93 e0       	ldi	r25, 0x03	; 3
    6532:	80 1b       	sub	r24, r16
    6534:	91 0b       	sbc	r25, r17
#endif

  // TODO: capture entropy from changed LS bits esp if reduced-noise version doesn't change.

  // Store new raw value.
  raw = tp;
    6536:	9c 83       	std	Y+4, r25	; 0x04
    6538:	8b 83       	std	Y+3, r24	; 0x03

  // Capture reduced-noise value with a little hysteresis.
  const uint8_t oldValue = value;
    653a:	3a 81       	ldd	r19, Y+2	; 0x02
  const uint8_t shifted = tp >> 2; // Keep signed to avoid wrap-round confusion.
    653c:	96 95       	lsr	r25
    653e:	87 95       	ror	r24
    6540:	96 95       	lsr	r25
    6542:	87 95       	ror	r24
    6544:	28 2f       	mov	r18, r24
  if(((shifted > oldValue) && (shifted - oldValue >= RN_HYST)) ||
    6546:	38 17       	cp	r19, r24
    6548:	20 f4       	brcc	.+8      	; 0x6552 <TemperaturePot::read()+0x44>
    654a:	90 e0       	ldi	r25, 0x00	; 0
    654c:	83 1b       	sub	r24, r19
    654e:	91 09       	sbc	r25, r1
    6550:	06 c0       	rjmp	.+12     	; 0x655e <TemperaturePot::read()+0x50>
    6552:	83 17       	cp	r24, r19
    6554:	f8 f4       	brcc	.+62     	; 0x6594 <TemperaturePot::read()+0x86>
    6556:	83 2f       	mov	r24, r19
    6558:	90 e0       	ldi	r25, 0x00	; 0
    655a:	82 1b       	sub	r24, r18
    655c:	91 09       	sbc	r25, r1
    655e:	04 97       	sbiw	r24, 0x04	; 4
    6560:	cc f0       	brlt	.+50     	; 0x6594 <TemperaturePot::read()+0x86>
     ((shifted < oldValue) && (oldValue - shifted >= RN_HYST)))
    {
    const uint8_t rn = (uint8_t) shifted;
    // Atomically store reduced-noise normalised value.
    value = rn;
    6562:	2a 83       	std	Y+2, r18	; 0x02
    // Possible to get reasonable functionality without using MODE button.
    //
    // NOTE: without ignoredFirst this will also respond to the initial position of the pot
    //   as the first reading is taken, ie may force to WARM or BAKE.
    static bool ignoredFirst;
    if(!ignoredFirst) { ignoredFirst = true; }
    6564:	80 91 cc 03 	lds	r24, 0x03CC
    6568:	88 23       	and	r24, r24
    656a:	21 f4       	brne	.+8      	; 0x6574 <TemperaturePot::read()+0x66>
    656c:	81 e0       	ldi	r24, 0x01	; 1
    656e:	80 93 cc 03 	sts	0x03CC, r24
    6572:	10 c0       	rjmp	.+32     	; 0x6594 <TemperaturePot::read()+0x86>
    else
      {
      // Force FROST mode when right at bottom of dial.
      if(rn < RN_FRBO) { setWarmModeDebounced(false); }
    6574:	28 30       	cpi	r18, 0x08	; 8
    6576:	10 f4       	brcc	.+4      	; 0x657c <TemperaturePot::read()+0x6e>
    6578:	80 e0       	ldi	r24, 0x00	; 0
    657a:	08 c0       	rjmp	.+16     	; 0x658c <TemperaturePot::read()+0x7e>
#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
      // Start BAKE mode when dial turned up to top.
      else if(rn > (255-RN_FRBO)) { startBakeDebounced(); }
    657c:	28 3f       	cpi	r18, 0xF8	; 248
    657e:	18 f0       	brcs	.+6      	; 0x6586 <TemperaturePot::read()+0x78>
    6580:	0e 94 c4 03 	call	0x788	; 0x788 <startBakeDebounced()>
    6584:	05 c0       	rjmp	.+10     	; 0x6590 <TemperaturePot::read()+0x82>
#endif
      // Force WARM mode if pot/temperature turned up.
      else if(rn > oldValue) { setWarmModeDebounced(true); }
    6586:	32 17       	cp	r19, r18
    6588:	18 f4       	brcc	.+6      	; 0x6590 <TemperaturePot::read()+0x82>
    658a:	81 e0       	ldi	r24, 0x01	; 1
    658c:	0e 94 b1 03 	call	0x762	; 0x762 <setWarmModeDebounced(bool)>

      // Note user operation of pot.
      markUIControlUsed(); 
    6590:	0e 94 47 27 	call	0x4e8e	; 0x4e8e <markUIControlUsed()>
  DEBUG_SERIAL_PRINT_FLASHSTRING(", rn: ");
  DEBUG_SERIAL_PRINT(tempPotReducedNoise);
  DEBUG_SERIAL_PRINTLN();
#endif

  return(value);
    6594:	8a 81       	ldd	r24, Y+2	; 0x02
  }
    6596:	df 91       	pop	r29
    6598:	cf 91       	pop	r28
    659a:	1f 91       	pop	r17
    659c:	0f 91       	pop	r16
    659e:	08 95       	ret

000065a0 <SHT21_init()>:
// Set true once SHT21 has been initialised.
static volatile bool SHT21_initialised;

// Initialise/configure SHT21, once only generally.
// TWI must already be powered up.
static void SHT21_init()
    65a0:	1f 93       	push	r17
  {
#if defined(SHT21_USE_REDUCED_PRECISION)
  // Soft reset in order to sample at reduced precision.
  Wire.beginTransmission(SHT21_I2C_ADDR);
    65a2:	85 e1       	ldi	r24, 0x15	; 21
    65a4:	94 e0       	ldi	r25, 0x04	; 4
    65a6:	60 e4       	ldi	r22, 0x40	; 64
    65a8:	70 e0       	ldi	r23, 0x00	; 0
    65aa:	0e 94 a1 34 	call	0x6942	; 0x6942 <TwoWire::beginTransmission(int)>
  Wire.write((byte) SHT21_I2C_CMD_USERREG); // Select control register.
    65ae:	85 e1       	ldi	r24, 0x15	; 21
    65b0:	94 e0       	ldi	r25, 0x04	; 4
    65b2:	67 ee       	ldi	r22, 0xE7	; 231
    65b4:	0e 94 23 35 	call	0x6a46	; 0x6a46 <TwoWire::write(unsigned char)>
  Wire.endTransmission();
    65b8:	85 e1       	ldi	r24, 0x15	; 21
    65ba:	94 e0       	ldi	r25, 0x04	; 4
    65bc:	0e 94 66 35 	call	0x6acc	; 0x6acc <TwoWire::endTransmission()>
  Wire.requestFrom(SHT21_I2C_ADDR, 1);
    65c0:	85 e1       	ldi	r24, 0x15	; 21
    65c2:	94 e0       	ldi	r25, 0x04	; 4
    65c4:	60 e4       	ldi	r22, 0x40	; 64
    65c6:	70 e0       	ldi	r23, 0x00	; 0
    65c8:	41 e0       	ldi	r20, 0x01	; 1
    65ca:	50 e0       	ldi	r21, 0x00	; 0
    65cc:	0e 94 77 35 	call	0x6aee	; 0x6aee <TwoWire::requestFrom(int, int)>
    65d0:	04 c0       	rjmp	.+8      	; 0x65da <SHT21_init()+0x3a>
  while(Wire.available() < 1)
    {
    // Wait for data, but avoid rolling over the end of a minor cycle...
    if(getSubCycleTime() >= GSCT_MAX-2)
    65d2:	80 91 b2 00 	lds	r24, 0x00B2
    65d6:	8d 3f       	cpi	r24, 0xFD	; 253
    65d8:	28 f5       	brcc	.+74     	; 0x6624 <SHT21_init()+0x84>
  // Soft reset in order to sample at reduced precision.
  Wire.beginTransmission(SHT21_I2C_ADDR);
  Wire.write((byte) SHT21_I2C_CMD_USERREG); // Select control register.
  Wire.endTransmission();
  Wire.requestFrom(SHT21_I2C_ADDR, 1);
  while(Wire.available() < 1)
    65da:	85 e1       	ldi	r24, 0x15	; 21
    65dc:	94 e0       	ldi	r25, 0x04	; 4
    65de:	0e 94 ab 34 	call	0x6956	; 0x6956 <TwoWire::available()>
    65e2:	18 16       	cp	r1, r24
    65e4:	19 06       	cpc	r1, r25
    65e6:	ac f7       	brge	.-22     	; 0x65d2 <SHT21_init()+0x32>
    if(getSubCycleTime() >= GSCT_MAX-2)
      {
      return; // Failed, and not initialised.
      }
    }
  const uint8_t curUR = Wire.read();
    65e8:	85 e1       	ldi	r24, 0x15	; 21
    65ea:	94 e0       	ldi	r25, 0x04	; 4
    65ec:	0e 94 b4 34 	call	0x6968	; 0x6968 <TwoWire::read()>
    65f0:	18 2f       	mov	r17, r24
//  DEBUG_SERIAL_PRINTFMT(curUR, HEX);
//  DEBUG_SERIAL_PRINTLN();

  // Preserve reserved bits (3, 4, 5) and sample 8-bit RH (for for 1%) and 12-bit temp (for 1/16C).
  const uint8_t newUR = (curUR & 0x38) | 3;
  Wire.beginTransmission(SHT21_I2C_ADDR);
    65f2:	85 e1       	ldi	r24, 0x15	; 21
    65f4:	94 e0       	ldi	r25, 0x04	; 4
    65f6:	60 e4       	ldi	r22, 0x40	; 64
    65f8:	70 e0       	ldi	r23, 0x00	; 0
    65fa:	0e 94 a1 34 	call	0x6942	; 0x6942 <TwoWire::beginTransmission(int)>
  Wire.write((byte) SHT21_I2C_CMD_USERREG); // Select control register.
    65fe:	85 e1       	ldi	r24, 0x15	; 21
    6600:	94 e0       	ldi	r25, 0x04	; 4
    6602:	67 ee       	ldi	r22, 0xE7	; 231
    6604:	0e 94 23 35 	call	0x6a46	; 0x6a46 <TwoWire::write(unsigned char)>
  Wire.write((byte) newUR);
    6608:	18 73       	andi	r17, 0x38	; 56
    660a:	13 60       	ori	r17, 0x03	; 3
    660c:	85 e1       	ldi	r24, 0x15	; 21
    660e:	94 e0       	ldi	r25, 0x04	; 4
    6610:	61 2f       	mov	r22, r17
    6612:	0e 94 23 35 	call	0x6a46	; 0x6a46 <TwoWire::write(unsigned char)>
  Wire.endTransmission();
    6616:	85 e1       	ldi	r24, 0x15	; 21
    6618:	94 e0       	ldi	r25, 0x04	; 4
    661a:	0e 94 66 35 	call	0x6acc	; 0x6acc <TwoWire::endTransmission()>

#endif
  SHT21_initialised = true;
    661e:	81 e0       	ldi	r24, 0x01	; 1
    6620:	80 93 cd 03 	sts	0x03CD, r24
  }
    6624:	1f 91       	pop	r17
    6626:	08 95       	ret

00006628 <RoomTemperatureC16::read()>:

// Singleton implementation/instance.
RoomTemperatureC16 TemperatureC16;

// Temperature read uses/selects one of the implementations/sensors.
int RoomTemperatureC16::read()
    6628:	ef 92       	push	r14
    662a:	ff 92       	push	r15
    662c:	0f 93       	push	r16
    662e:	1f 93       	push	r17
    6630:	cf 93       	push	r28
    6632:	df 93       	push	r29
    6634:	7c 01       	movw	r14, r24
// This may consume significant power and time.
// Probably no need to do this more than (say) once per minute.
// The first read will initialise the device as necessary and leave it in a low-power mode afterwards.
static int Sensor_SHT21_readTemperatureC16()
  {
  const bool neededPowerUp = powerUpTWIIfDisabled();
    6636:	0e 94 b6 20 	call	0x416c	; 0x416c <powerUpTWIIfDisabled()>
    663a:	08 2f       	mov	r16, r24

  // Initialise/config if necessary.
  if(!SHT21_initialised) { SHT21_init(); }
    663c:	80 91 cd 03 	lds	r24, 0x03CD
    6640:	88 23       	and	r24, r24
    6642:	11 f4       	brne	.+4      	; 0x6648 <RoomTemperatureC16::read()+0x20>
    6644:	0e 94 d0 32 	call	0x65a0	; 0x65a0 <SHT21_init()>
  // Max RH measurement time:
  //   * 14-bit: 85ms
  //   * 12-bit: 22ms
  //   * 11-bit: 11ms
  // Use blocking data fetch for now.
  Wire.beginTransmission(SHT21_I2C_ADDR);
    6648:	85 e1       	ldi	r24, 0x15	; 21
    664a:	94 e0       	ldi	r25, 0x04	; 4
    664c:	60 e4       	ldi	r22, 0x40	; 64
    664e:	70 e0       	ldi	r23, 0x00	; 0
    6650:	0e 94 a1 34 	call	0x6942	; 0x6942 <TwoWire::beginTransmission(int)>
  Wire.write((byte) SHT21_I2C_CMD_TEMP_HOLD); // Select control register.
    6654:	85 e1       	ldi	r24, 0x15	; 21
    6656:	94 e0       	ldi	r25, 0x04	; 4
    6658:	63 ee       	ldi	r22, 0xE3	; 227
    665a:	0e 94 23 35 	call	0x6a46	; 0x6a46 <TwoWire::write(unsigned char)>
#if defined(SHT21_USE_REDUCED_PRECISION)
  nap(WDTO_30MS); // Should cover 12-bit conversion (22ms).
    665e:	81 e0       	ldi	r24, 0x01	; 1
    6660:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <nap(signed char)>
#else
  sleepLowPowerMs(90); // Should be plenty for slowest (14-bit) conversion (85ms).
#endif
  //delay(100);
  Wire.endTransmission();
    6664:	85 e1       	ldi	r24, 0x15	; 21
    6666:	94 e0       	ldi	r25, 0x04	; 4
    6668:	0e 94 66 35 	call	0x6acc	; 0x6acc <TwoWire::endTransmission()>
  Wire.requestFrom(SHT21_I2C_ADDR, 3);
    666c:	85 e1       	ldi	r24, 0x15	; 21
    666e:	94 e0       	ldi	r25, 0x04	; 4
    6670:	60 e4       	ldi	r22, 0x40	; 64
    6672:	70 e0       	ldi	r23, 0x00	; 0
    6674:	43 e0       	ldi	r20, 0x03	; 3
    6676:	50 e0       	ldi	r21, 0x00	; 0
    6678:	0e 94 77 35 	call	0x6aee	; 0x6aee <TwoWire::requestFrom(int, int)>
    667c:	07 c0       	rjmp	.+14     	; 0x668c <RoomTemperatureC16::read()+0x64>
  while(Wire.available() < 3)
    {
    // Wait for data, but avoid rolling over the end of a minor cycle...
    if(getSubCycleTime() >= GSCT_MAX-2)
    667e:	80 91 b2 00 	lds	r24, 0x00B2
    6682:	8d 3f       	cpi	r24, 0xFD	; 253
    6684:	18 f0       	brcs	.+6      	; 0x668c <RoomTemperatureC16::read()+0x64>
    6686:	60 e0       	ldi	r22, 0x00	; 0
    6688:	70 e0       	ldi	r23, 0x00	; 0
    668a:	2b c0       	rjmp	.+86     	; 0x66e2 <RoomTemperatureC16::read()+0xba>
  sleepLowPowerMs(90); // Should be plenty for slowest (14-bit) conversion (85ms).
#endif
  //delay(100);
  Wire.endTransmission();
  Wire.requestFrom(SHT21_I2C_ADDR, 3);
  while(Wire.available() < 3)
    668c:	85 e1       	ldi	r24, 0x15	; 21
    668e:	94 e0       	ldi	r25, 0x04	; 4
    6690:	0e 94 ab 34 	call	0x6956	; 0x6956 <TwoWire::available()>
    6694:	03 97       	sbiw	r24, 0x03	; 3
    6696:	9c f3       	brlt	.-26     	; 0x667e <RoomTemperatureC16::read()+0x56>
    if(getSubCycleTime() >= GSCT_MAX-2)
      {
      return(0); // Failure value: may be able to to better.
      }
    }
  uint16_t rawTemp = (Wire.read() << 8);
    6698:	85 e1       	ldi	r24, 0x15	; 21
    669a:	94 e0       	ldi	r25, 0x04	; 4
    669c:	0e 94 b4 34 	call	0x6968	; 0x6968 <TwoWire::read()>
    66a0:	18 2f       	mov	r17, r24
  rawTemp |= (Wire.read() & 0xfc); // Clear status ls bits.
    66a2:	85 e1       	ldi	r24, 0x15	; 21
    66a4:	94 e0       	ldi	r25, 0x04	; 4
    66a6:	0e 94 b4 34 	call	0x6968	; 0x6968 <TwoWire::read()>
    66aa:	ec 01       	movw	r28, r24

  // Power down TWI ASAP.
  if(neededPowerUp) { powerDownTWI(); }
    66ac:	00 23       	and	r16, r16
    66ae:	11 f0       	breq	.+4      	; 0x66b4 <RoomTemperatureC16::read()+0x8c>
    66b0:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <powerDownTWI()>
    if(getSubCycleTime() >= GSCT_MAX-2)
      {
      return(0); // Failure value: may be able to to better.
      }
    }
  uint16_t rawTemp = (Wire.read() << 8);
    66b4:	71 2f       	mov	r23, r17
    66b6:	60 e0       	ldi	r22, 0x00	; 0
  if(neededPowerUp) { powerDownTWI(); }

  // TODO: capture entropy if (transformed) value has changed.

  // Nominal formula: C = -46.85 + ((175.72*raw) / (1L << 16));
  const int c16 = -750 + ((5623L * rawTemp) >> 17); // FIXME: find a faster approximation...
    66b8:	cc 7f       	andi	r28, 0xFC	; 252
    66ba:	d0 70       	andi	r29, 0x00	; 0
    66bc:	6c 2b       	or	r22, r28
    66be:	7d 2b       	or	r23, r29
    66c0:	80 e0       	ldi	r24, 0x00	; 0
    66c2:	90 e0       	ldi	r25, 0x00	; 0
    66c4:	27 ef       	ldi	r18, 0xF7	; 247
    66c6:	35 e1       	ldi	r19, 0x15	; 21
    66c8:	40 e0       	ldi	r20, 0x00	; 0
    66ca:	50 e0       	ldi	r21, 0x00	; 0
    66cc:	0e 94 ad 3d 	call	0x7b5a	; 0x7b5a <__mulsi3>
    66d0:	31 e1       	ldi	r19, 0x11	; 17
    66d2:	95 95       	asr	r25
    66d4:	87 95       	ror	r24
    66d6:	77 95       	ror	r23
    66d8:	67 95       	ror	r22
    66da:	3a 95       	dec	r19
    66dc:	d1 f7       	brne	.-12     	; 0x66d2 <RoomTemperatureC16::read()+0xaa>
    66de:	6e 5e       	subi	r22, 0xEE	; 238
    66e0:	72 40       	sbci	r23, 0x02	; 2
  const int raw = Sensor_SHT21_readTemperatureC16();
#else
  const int raw = TMP112_readTemperatureC16();
#endif

  value = raw;
    66e2:	f7 01       	movw	r30, r14
    66e4:	73 83       	std	Z+3, r23	; 0x03
    66e6:	62 83       	std	Z+2, r22	; 0x02
  return(value);
  }
    66e8:	cb 01       	movw	r24, r22
    66ea:	df 91       	pop	r29
    66ec:	cf 91       	pop	r28
    66ee:	1f 91       	pop	r17
    66f0:	0f 91       	pop	r16
    66f2:	ff 90       	pop	r15
    66f4:	ef 90       	pop	r14
    66f6:	08 95       	ret

000066f8 <HumiditySensorSHT21::read()>:
// Measure and return the current relative humidity in %; range [0,100] and 255 for error.
// This may consume significant power and time.
// Probably no need to do this more than (say) once per minute.
// The first read will initialise the device as necessary and leave it in a low-power mode afterwards.
// Returns 255 (~0) in case of error.
uint8_t HumiditySensorSHT21::read()
    66f8:	ff 92       	push	r15
    66fa:	0f 93       	push	r16
    66fc:	1f 93       	push	r17
    66fe:	cf 93       	push	r28
    6700:	df 93       	push	r29
    6702:	ec 01       	movw	r28, r24
  {
  const bool neededPowerUp = powerUpTWIIfDisabled();
    6704:	0e 94 b6 20 	call	0x416c	; 0x416c <powerUpTWIIfDisabled()>
    6708:	18 2f       	mov	r17, r24

  // Initialise/config if necessary.
  if(!SHT21_initialised) { SHT21_init(); }
    670a:	80 91 cd 03 	lds	r24, 0x03CD
    670e:	88 23       	and	r24, r24
    6710:	11 f4       	brne	.+4      	; 0x6716 <HumiditySensorSHT21::read()+0x1e>
    6712:	0e 94 d0 32 	call	0x65a0	; 0x65a0 <SHT21_init()>
  // Get RH%...
  // Max RH measurement time:
  //   * 12-bit: 29ms
  //   *  8-bit:  4ms
  // Use blocking data fetch for now.
  Wire.beginTransmission(SHT21_I2C_ADDR);
    6716:	85 e1       	ldi	r24, 0x15	; 21
    6718:	94 e0       	ldi	r25, 0x04	; 4
    671a:	60 e4       	ldi	r22, 0x40	; 64
    671c:	70 e0       	ldi	r23, 0x00	; 0
    671e:	0e 94 a1 34 	call	0x6942	; 0x6942 <TwoWire::beginTransmission(int)>
  Wire.write((byte) SHT21_I2C_CMD_RH_HOLD); // Select control register.
    6722:	85 e1       	ldi	r24, 0x15	; 21
    6724:	94 e0       	ldi	r25, 0x04	; 4
    6726:	65 ee       	ldi	r22, 0xE5	; 229
    6728:	0e 94 23 35 	call	0x6a46	; 0x6a46 <TwoWire::write(unsigned char)>
// This may be achieved in part by dynamically slowing the CPU clock if possible.
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed((((MIN_CPU_HZ * (ms)) + 2000) / 4000) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    672c:	85 e2       	ldi	r24, 0x25	; 37
    672e:	90 e0       	ldi	r25, 0x00	; 0
    6730:	0e 94 8b 1d 	call	0x3b16	; 0x3b16 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
#if defined(SHT21_USE_REDUCED_PRECISION)
  sleepLowPowerMs(5); // Should cover 8-bit conversion (4ms).
#else
  nap(WDTO_30MS); // Should cover even 12-bit conversion (29ms).
#endif
  Wire.endTransmission();
    6734:	85 e1       	ldi	r24, 0x15	; 21
    6736:	94 e0       	ldi	r25, 0x04	; 4
    6738:	0e 94 66 35 	call	0x6acc	; 0x6acc <TwoWire::endTransmission()>
  Wire.requestFrom(SHT21_I2C_ADDR, 3);
    673c:	85 e1       	ldi	r24, 0x15	; 21
    673e:	94 e0       	ldi	r25, 0x04	; 4
    6740:	60 e4       	ldi	r22, 0x40	; 64
    6742:	70 e0       	ldi	r23, 0x00	; 0
    6744:	43 e0       	ldi	r20, 0x03	; 3
    6746:	50 e0       	ldi	r21, 0x00	; 0
    6748:	0e 94 77 35 	call	0x6aee	; 0x6aee <TwoWire::requestFrom(int, int)>
    674c:	06 c0       	rjmp	.+12     	; 0x675a <HumiditySensorSHT21::read()+0x62>
  while(Wire.available() < 3)
    {
    // Wait for data, but avoid rolling over the end of a minor cycle...
    if(getSubCycleTime() >= GSCT_MAX)
    674e:	80 91 b2 00 	lds	r24, 0x00B2
    6752:	8f 3f       	cpi	r24, 0xFF	; 255
    6754:	11 f4       	brne	.+4      	; 0x675a <HumiditySensorSHT21::read()+0x62>
    6756:	1f ef       	ldi	r17, 0xFF	; 255
    6758:	3c c0       	rjmp	.+120    	; 0x67d2 <HumiditySensorSHT21::read()+0xda>
#else
  nap(WDTO_30MS); // Should cover even 12-bit conversion (29ms).
#endif
  Wire.endTransmission();
  Wire.requestFrom(SHT21_I2C_ADDR, 3);
  while(Wire.available() < 3)
    675a:	85 e1       	ldi	r24, 0x15	; 21
    675c:	94 e0       	ldi	r25, 0x04	; 4
    675e:	0e 94 ab 34 	call	0x6956	; 0x6956 <TwoWire::available()>
    6762:	03 97       	sbiw	r24, 0x03	; 3
    6764:	a4 f3       	brlt	.-24     	; 0x674e <HumiditySensorSHT21::read()+0x56>
      {
//      DEBUG_SERIAL_PRINTLN_FLASHSTRING("giving up");
      return(~0);
      }
    }
  const uint8_t rawRH = Wire.read();
    6766:	85 e1       	ldi	r24, 0x15	; 21
    6768:	94 e0       	ldi	r25, 0x04	; 4
    676a:	0e 94 b4 34 	call	0x6968	; 0x6968 <TwoWire::read()>
    676e:	f8 2e       	mov	r15, r24
  const uint8_t rawRL = Wire.read();
    6770:	85 e1       	ldi	r24, 0x15	; 21
    6772:	94 e0       	ldi	r25, 0x04	; 4
    6774:	0e 94 b4 34 	call	0x6968	; 0x6968 <TwoWire::read()>
    6778:	08 2f       	mov	r16, r24

  // Power down TWI ASAP.
  if(neededPowerUp) { powerDownTWI(); }
    677a:	11 23       	and	r17, r17
    677c:	11 f0       	breq	.+4      	; 0x6782 <HumiditySensorSHT21::read()+0x8a>
    677e:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <powerDownTWI()>

  const uint16_t raw = (((uint16_t)rawRH) << 8) | (rawRL & 0xfc); // Clear status ls bits.
  const uint8_t result = -6 + ((125L * raw) >> 16);
    6782:	60 2f       	mov	r22, r16
    6784:	70 e0       	ldi	r23, 0x00	; 0
    6786:	6c 7f       	andi	r22, 0xFC	; 252
    6788:	70 70       	andi	r23, 0x00	; 0
    678a:	3f 2d       	mov	r19, r15
    678c:	20 e0       	ldi	r18, 0x00	; 0
    678e:	62 2b       	or	r22, r18
    6790:	73 2b       	or	r23, r19
    6792:	80 e0       	ldi	r24, 0x00	; 0
    6794:	90 e0       	ldi	r25, 0x00	; 0
    6796:	2d e7       	ldi	r18, 0x7D	; 125
    6798:	30 e0       	ldi	r19, 0x00	; 0
    679a:	40 e0       	ldi	r20, 0x00	; 0
    679c:	50 e0       	ldi	r21, 0x00	; 0
    679e:	0e 94 ad 3d 	call	0x7b5a	; 0x7b5a <__mulsi3>
    67a2:	bc 01       	movw	r22, r24
    67a4:	99 27       	eor	r25, r25
    67a6:	77 fd       	sbrc	r23, 7
    67a8:	90 95       	com	r25
    67aa:	89 2f       	mov	r24, r25
    67ac:	16 2f       	mov	r17, r22
    67ae:	16 50       	subi	r17, 0x06	; 6

  // Capture entropy from raw status bits
  // iff (transformed) reading has changed.
  if(value != result) { addEntropyToPool(rawRL ^ rawRH, 1); }
    67b0:	8a 81       	ldd	r24, Y+2	; 0x02
    67b2:	81 17       	cp	r24, r17
    67b4:	29 f0       	breq	.+10     	; 0x67c0 <HumiditySensorSHT21::read()+0xc8>
    67b6:	80 2f       	mov	r24, r16
    67b8:	8f 25       	eor	r24, r15
    67ba:	61 e0       	ldi	r22, 0x01	; 1
    67bc:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <addEntropyToPool(unsigned char, unsigned char)>

  value = result;
    67c0:	1a 83       	std	Y+2, r17	; 0x02
  if(result > (HUMIDTY_HIGH_RHPC+HUMIDITY_EPSILON_RHPC)) { highWithHyst = true; }
    67c2:	1c 34       	cpi	r17, 0x4C	; 76
    67c4:	18 f0       	brcs	.+6      	; 0x67cc <HumiditySensorSHT21::read()+0xd4>
    67c6:	81 e0       	ldi	r24, 0x01	; 1
    67c8:	8b 83       	std	Y+3, r24	; 0x03
    67ca:	03 c0       	rjmp	.+6      	; 0x67d2 <HumiditySensorSHT21::read()+0xda>
  else if(result < (HUMIDTY_HIGH_RHPC-HUMIDITY_EPSILON_RHPC)) { highWithHyst = false; }
    67cc:	11 34       	cpi	r17, 0x41	; 65
    67ce:	08 f4       	brcc	.+2      	; 0x67d2 <HumiditySensorSHT21::read()+0xda>
    67d0:	1b 82       	std	Y+3, r1	; 0x03
  return(result);
  }
    67d2:	81 2f       	mov	r24, r17
    67d4:	df 91       	pop	r29
    67d6:	cf 91       	pop	r28
    67d8:	1f 91       	pop	r17
    67da:	0f 91       	pop	r16
    67dc:	ff 90       	pop	r15
    67de:	08 95       	ret

000067e0 <AmbientLight::read()>:
// Measure/store/return the current room ambient light levels in range [0,1023].
// This may consume significant power and time.
// Probably no need to do this more than (say) once per minute.
// This implementation expects LDR (1M dark resistance) from IO_POWER_UP to LDR_SENSOR_AIN and 100k to ground.
// (Not intended to be called from ISR.)
uint8_t AmbientLight::read()
    67e0:	ef 92       	push	r14
    67e2:	ff 92       	push	r15
    67e4:	0f 93       	push	r16
    67e6:	1f 93       	push	r17
    67e8:	df 93       	push	r29
    67ea:	cf 93       	push	r28
    67ec:	cd b7       	in	r28, 0x3d	; 61
    67ee:	de b7       	in	r29, 0x3e	; 62
    67f0:	28 97       	sbiw	r28, 0x08	; 8
    67f2:	0f b6       	in	r0, 0x3f	; 63
    67f4:	f8 94       	cli
    67f6:	de bf       	out	0x3e, r29	; 62
    67f8:	0f be       	out	0x3f, r0	; 63
    67fa:	cd bf       	out	0x3d, r28	; 61
    67fc:	7c 01       	movw	r14, r24
  {
  power_intermittent_peripherals_enable(false); // No need to wait for anything to stablise as direct of IO_POWER_UP.
    67fe:	80 e0       	ldi	r24, 0x00	; 0
    6800:	0e 94 a7 20 	call	0x414e	; 0x414e <power_intermittent_peripherals_enable(bool)>
  const uint16_t al0 = analogueNoiseReducedRead(LDR_SENSOR_AIN, ALREFERENCE);
    6804:	80 e0       	ldi	r24, 0x00	; 0
    6806:	90 e0       	ldi	r25, 0x00	; 0
    6808:	63 e0       	ldi	r22, 0x03	; 3
    680a:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <analogueNoiseReducedRead(int, unsigned char)>
#if defined(ADAPTIVE_THRESHOLD)
  uint16_t al;
  if(al0 >= ADAPTIVE_THRESHOLD)
    680e:	23 e0       	ldi	r18, 0x03	; 3
    6810:	80 38       	cpi	r24, 0x80	; 128
    6812:	92 07       	cpc	r25, r18
    6814:	10 f4       	brcc	.+4      	; 0x681a <AmbientLight::read()+0x3a>
    6816:	8c 01       	movw	r16, r24
    6818:	37 c0       	rjmp	.+110    	; 0x6888 <AmbientLight::read()+0xa8>
    {
    const uint16_t al1 = analogueNoiseReducedRead(LDR_SENSOR_AIN, DEFAULT); // Vsupply reference.
    681a:	80 e0       	ldi	r24, 0x00	; 0
    681c:	90 e0       	ldi	r25, 0x00	; 0
    681e:	61 e0       	ldi	r22, 0x01	; 1
    6820:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <analogueNoiseReducedRead(int, unsigned char)>
    6824:	8c 01       	movw	r16, r24
    Supply_mV.read();
    6826:	8f e5       	ldi	r24, 0x5F	; 95
    6828:	93 e0       	ldi	r25, 0x03	; 3
    682a:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <SupplyVoltageMilliVolts::read()>
    const uint16_t vbg = Supply_mV.getRawInv(); // Vbandgap wrt Vsupply.
    // Compute value in extended range up to ~1024 * Vsupply/Vbandgap.
    const uint16_t ale = ((al1 << 5) / ((vbg+16) >> 5)); // Faster int-only approximation to (int)((al1 * 1024L) / vbg)).
    682e:	60 91 61 03 	lds	r22, 0x0361
    6832:	70 91 62 03 	lds	r23, 0x0362
    6836:	60 5f       	subi	r22, 0xF0	; 240
    6838:	7f 4f       	sbci	r23, 0xFF	; 255
    683a:	f5 e0       	ldi	r31, 0x05	; 5
    683c:	76 95       	lsr	r23
    683e:	67 95       	ror	r22
    6840:	fa 95       	dec	r31
    6842:	e1 f7       	brne	.-8      	; 0x683c <AmbientLight::read()+0x5c>
    6844:	c8 01       	movw	r24, r16
    6846:	e5 e0       	ldi	r30, 0x05	; 5
    6848:	88 0f       	add	r24, r24
    684a:	99 1f       	adc	r25, r25
    684c:	ea 95       	dec	r30
    684e:	e1 f7       	brne	.-8      	; 0x6848 <AmbientLight::read()+0x68>
    6850:	0e 94 cc 3d 	call	0x7b98	; 0x7b98 <__udivmodhi4>
    6854:	cb 01       	movw	r24, r22
    // Ensure that scale stays monotonic in face of calculation lumpiness, etc...
    // Scale all remaining space above threshold to new top value into remaining space.
    // TODO: ensure scaleFactor is a power of two for speed.
    const uint16_t scaleFactor = (2048 - ADAPTIVE_THRESHOLD) / (1024 - ADAPTIVE_THRESHOLD);
    al = fnmin(1023U,
        ADAPTIVE_THRESHOLD + fnmax(0U, ((ale - ADAPTIVE_THRESHOLD) / scaleFactor)));
    6856:	2f ef       	ldi	r18, 0xFF	; 255
    6858:	33 e0       	ldi	r19, 0x03	; 3
    685a:	3e 83       	std	Y+6, r19	; 0x06
    685c:	2d 83       	std	Y+5, r18	; 0x05
    685e:	1a 82       	std	Y+2, r1	; 0x02
    6860:	19 82       	std	Y+1, r1	; 0x01
    6862:	80 58       	subi	r24, 0x80	; 128
    6864:	93 40       	sbci	r25, 0x03	; 3
    6866:	69 e0       	ldi	r22, 0x09	; 9
    6868:	70 e0       	ldi	r23, 0x00	; 0
    686a:	0e 94 cc 3d 	call	0x7b98	; 0x7b98 <__udivmodhi4>
    686e:	7c 83       	std	Y+4, r23	; 0x04
    6870:	6b 83       	std	Y+3, r22	; 0x03
    6872:	8b 01       	movw	r16, r22
    6874:	00 58       	subi	r16, 0x80	; 128
    6876:	1c 4f       	sbci	r17, 0xFC	; 252
    6878:	18 87       	std	Y+8, r17	; 0x08
    687a:	0f 83       	std	Y+7, r16	; 0x07




// Templated function versions of min/max that do not evaluate the arguments twice.
template <class T> const T& fnmin(const T& a, const T& b) { return((a>b)?b:a); }
    687c:	43 e0       	ldi	r20, 0x03	; 3
    687e:	0f 3f       	cpi	r16, 0xFF	; 255
    6880:	14 07       	cpc	r17, r20
    6882:	10 f0       	brcs	.+4      	; 0x6888 <AmbientLight::read()+0xa8>
    6884:	0f ef       	ldi	r16, 0xFF	; 255
    6886:	13 e0       	ldi	r17, 0x03	; 3
    }
  else { al = al0; }
#else
  const uint16_t al = al0;
#endif
  power_intermittent_peripherals_disable();
    6888:	0e 94 75 20 	call	0x40ea	; 0x40ea <power_intermittent_peripherals_disable()>

  // Capture entropy from changed LS bits.
  if((uint8_t)al != (uint8_t)rawValue) { addEntropyToPool((uint8_t)al ^ (uint8_t)rawValue, 0); } // Claim zero entropy as may be forced by Eve.
    688c:	80 2f       	mov	r24, r16
    688e:	f7 01       	movw	r30, r14
    6890:	93 81       	ldd	r25, Z+3	; 0x03
    6892:	09 17       	cp	r16, r25
    6894:	21 f0       	breq	.+8      	; 0x689e <AmbientLight::read()+0xbe>
    6896:	89 27       	eor	r24, r25
    6898:	60 e0       	ldi	r22, 0x00	; 0
    689a:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <addEntropyToPool(unsigned char, unsigned char)>

  // Adjust room-lit flag, with hysteresis.
  if(al <= LDR_THR_LOW)
    689e:	f1 e0       	ldi	r31, 0x01	; 1
    68a0:	0f 30       	cpi	r16, 0x0F	; 15
    68a2:	1f 07       	cpc	r17, r31
    68a4:	18 f4       	brcc	.+6      	; 0x68ac <AmbientLight::read()+0xcc>
    { isRoomLitFlag = false; }
    68a6:	f7 01       	movw	r30, r14
    68a8:	15 82       	std	Z+5, r1	; 0x05
    68aa:	1c c0       	rjmp	.+56     	; 0x68e4 <AmbientLight::read()+0x104>
  else if(al > LDR_THR_HIGH)
    68ac:	f1 e0       	ldi	r31, 0x01	; 1
    68ae:	01 39       	cpi	r16, 0x91	; 145
    68b0:	1f 07       	cpc	r17, r31
    68b2:	c0 f0       	brcs	.+48     	; 0x68e4 <AmbientLight::read()+0x104>
    {
    // Treat a sharp transition from dark to light as a possible/weak indication of occupancy, eg light flicked on.
    // Ignore trigger at start-up.
    static bool ignoreFirst;
    if(!ignoreFirst) { ignoreFirst = true; }
    68b4:	80 91 ce 03 	lds	r24, 0x03CE
    68b8:	88 23       	and	r24, r24
    68ba:	21 f4       	brne	.+8      	; 0x68c4 <AmbientLight::read()+0xe4>
    68bc:	81 e0       	ldi	r24, 0x01	; 1
    68be:	80 93 ce 03 	sts	0x03CE, r24
    68c2:	0d c0       	rjmp	.+26     	; 0x68de <AmbientLight::read()+0xfe>
    else if((!isRoomLitFlag) && (rawValue < LDR_THR_LOW)) { Occupancy.markAsPossiblyOccupied(); }
    68c4:	f7 01       	movw	r30, r14
    68c6:	85 81       	ldd	r24, Z+5	; 0x05
    68c8:	88 23       	and	r24, r24
    68ca:	49 f4       	brne	.+18     	; 0x68de <AmbientLight::read()+0xfe>
    68cc:	83 81       	ldd	r24, Z+3	; 0x03
    68ce:	94 81       	ldd	r25, Z+4	; 0x04
    68d0:	8e 50       	subi	r24, 0x0E	; 14
    68d2:	91 40       	sbci	r25, 0x01	; 1
    68d4:	20 f4       	brcc	.+8      	; 0x68de <AmbientLight::read()+0xfe>
    68d6:	82 e1       	ldi	r24, 0x12	; 18
    68d8:	92 e0       	ldi	r25, 0x02	; 2
    68da:	0e 94 55 04 	call	0x8aa	; 0x8aa <OccupancyTracker::markAsPossiblyOccupied()>
    isRoomLitFlag = true;
    68de:	81 e0       	ldi	r24, 0x01	; 1
    68e0:	f7 01       	movw	r30, r14
    68e2:	85 83       	std	Z+5, r24	; 0x05
    }

  // Store new value, raw and normalised.
  // Unconditionbally store raw value.
  rawValue = al;
    68e4:	f7 01       	movw	r30, r14
    68e6:	14 83       	std	Z+4, r17	; 0x04
    68e8:	03 83       	std	Z+3, r16	; 0x03
  // Apply a little bit of noise reduction (hysteresis) to the normalised version.
  const uint8_t newValue = (uint8_t)(al >> 2);
    68ea:	c8 01       	movw	r24, r16
    68ec:	96 95       	lsr	r25
    68ee:	87 95       	ror	r24
    68f0:	96 95       	lsr	r25
    68f2:	87 95       	ror	r24
    68f4:	28 2f       	mov	r18, r24
  if(newValue != value)
    68f6:	82 81       	ldd	r24, Z+2	; 0x02
    68f8:	28 17       	cp	r18, r24
    68fa:	a1 f0       	breq	.+40     	; 0x6924 <AmbientLight::read()+0x144>
    {
    const uint16_t oldRawImplied = ((uint16_t)value) << 2;
    68fc:	82 81       	ldd	r24, Z+2	; 0x02
    68fe:	90 e0       	ldi	r25, 0x00	; 0
    6900:	88 0f       	add	r24, r24
    6902:	99 1f       	adc	r25, r25
    6904:	88 0f       	add	r24, r24
    6906:	99 1f       	adc	r25, r25
    const uint16_t absDiff = (oldRawImplied > al) ? (oldRawImplied - al) : (al - oldRawImplied);
    6908:	08 17       	cp	r16, r24
    690a:	19 07       	cpc	r17, r25
    690c:	18 f4       	brcc	.+6      	; 0x6914 <AmbientLight::read()+0x134>
    690e:	80 1b       	sub	r24, r16
    6910:	91 0b       	sbc	r25, r17
    6912:	04 c0       	rjmp	.+8      	; 0x691c <AmbientLight::read()+0x13c>
    6914:	a8 01       	movw	r20, r16
    6916:	48 1b       	sub	r20, r24
    6918:	59 0b       	sbc	r21, r25
    691a:	ca 01       	movw	r24, r20
    if(absDiff > 2) { value = newValue; }
    691c:	03 97       	sbiw	r24, 0x03	; 3
    691e:	10 f0       	brcs	.+4      	; 0x6924 <AmbientLight::read()+0x144>
    6920:	f7 01       	movw	r30, r14
    6922:	22 83       	std	Z+2, r18	; 0x02
  DEBUG_SERIAL_PRINT_FLASHSTRING("isRoomLit: ");
  DEBUG_SERIAL_PRINT(isRoomLitFlag);
  DEBUG_SERIAL_PRINTLN();
#endif

  return(value);
    6924:	f7 01       	movw	r30, r14
    6926:	82 81       	ldd	r24, Z+2	; 0x02
  }
    6928:	28 96       	adiw	r28, 0x08	; 8
    692a:	0f b6       	in	r0, 0x3f	; 63
    692c:	f8 94       	cli
    692e:	de bf       	out	0x3e, r29	; 62
    6930:	0f be       	out	0x3f, r0	; 63
    6932:	cd bf       	out	0x3d, r28	; 61
    6934:	cf 91       	pop	r28
    6936:	df 91       	pop	r29
    6938:	1f 91       	pop	r17
    693a:	0f 91       	pop	r16
    693c:	ff 90       	pop	r15
    693e:	ef 90       	pop	r14
    6940:	08 95       	ret

00006942 <TwoWire::beginTransmission(int)>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    6942:	81 e0       	ldi	r24, 0x01	; 1
    6944:	80 93 14 04 	sts	0x0414, r24
  // set address of targeted slave
  txAddress = address;
    6948:	60 93 f1 03 	sts	0x03F1, r22
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    694c:	10 92 12 04 	sts	0x0412, r1
  txBufferLength = 0;
    6950:	10 92 13 04 	sts	0x0413, r1
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
}
    6954:	08 95       	ret

00006956 <TwoWire::available()>:
}

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
    6956:	20 91 f0 03 	lds	r18, 0x03F0
    695a:	30 e0       	ldi	r19, 0x00	; 0
    695c:	80 91 ef 03 	lds	r24, 0x03EF
    6960:	28 1b       	sub	r18, r24
    6962:	31 09       	sbc	r19, r1
{
  return rxBufferLength - rxBufferIndex;
}
    6964:	c9 01       	movw	r24, r18
    6966:	08 95       	ret

00006968 <TwoWire::read()>:
int TwoWire::read(void)
{
  int value = -1;
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    6968:	40 91 ef 03 	lds	r20, 0x03EF
    696c:	80 91 f0 03 	lds	r24, 0x03F0
    6970:	48 17       	cp	r20, r24
    6972:	18 f0       	brcs	.+6      	; 0x697a <TwoWire::read()+0x12>
    6974:	2f ef       	ldi	r18, 0xFF	; 255
    6976:	3f ef       	ldi	r19, 0xFF	; 255
    6978:	0a c0       	rjmp	.+20     	; 0x698e <TwoWire::read()+0x26>
    value = rxBuffer[rxBufferIndex];
    697a:	e4 2f       	mov	r30, r20
    697c:	f0 e0       	ldi	r31, 0x00	; 0
    697e:	e1 53       	subi	r30, 0x31	; 49
    6980:	fc 4f       	sbci	r31, 0xFC	; 252
    6982:	80 81       	ld	r24, Z
    6984:	28 2f       	mov	r18, r24
    6986:	30 e0       	ldi	r19, 0x00	; 0
    ++rxBufferIndex;
    6988:	4f 5f       	subi	r20, 0xFF	; 255
    698a:	40 93 ef 03 	sts	0x03EF, r20
  }

  return value;
}
    698e:	c9 01       	movw	r24, r18
    6990:	08 95       	ret

00006992 <TwoWire::peek()>:
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
  
  if(rxBufferIndex < rxBufferLength){
    6992:	e0 91 ef 03 	lds	r30, 0x03EF
    6996:	80 91 f0 03 	lds	r24, 0x03F0
    699a:	e8 17       	cp	r30, r24
    699c:	18 f0       	brcs	.+6      	; 0x69a4 <TwoWire::peek()+0x12>
    699e:	ef ef       	ldi	r30, 0xFF	; 255
    69a0:	ff ef       	ldi	r31, 0xFF	; 255
    69a2:	06 c0       	rjmp	.+12     	; 0x69b0 <TwoWire::peek()+0x1e>
    value = rxBuffer[rxBufferIndex];
    69a4:	f0 e0       	ldi	r31, 0x00	; 0
    69a6:	e1 53       	subi	r30, 0x31	; 49
    69a8:	fc 4f       	sbci	r31, 0xFC	; 252
    69aa:	80 81       	ld	r24, Z
    69ac:	e8 2f       	mov	r30, r24
    69ae:	f0 e0       	ldi	r31, 0x00	; 0
  }

  return value;
}
    69b0:	cf 01       	movw	r24, r30
    69b2:	08 95       	ret

000069b4 <TwoWire::flush()>:

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
    69b4:	08 95       	ret

000069b6 <global constructors keyed to _ZN7TwoWire8rxBufferE>:
    69b6:	10 92 18 04 	sts	0x0418, r1
    69ba:	10 92 17 04 	sts	0x0417, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    69be:	88 ee       	ldi	r24, 0xE8	; 232
    69c0:	93 e0       	ldi	r25, 0x03	; 3
    69c2:	a0 e0       	ldi	r26, 0x00	; 0
    69c4:	b0 e0       	ldi	r27, 0x00	; 0
    69c6:	80 93 19 04 	sts	0x0419, r24
    69ca:	90 93 1a 04 	sts	0x041A, r25
    69ce:	a0 93 1b 04 	sts	0x041B, r26
    69d2:	b0 93 1c 04 	sts	0x041C, r27
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    69d6:	86 ef       	ldi	r24, 0xF6	; 246
    69d8:	91 e0       	ldi	r25, 0x01	; 1
    69da:	90 93 16 04 	sts	0x0416, r25
    69de:	80 93 15 04 	sts	0x0415, r24
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    69e2:	08 95       	ret

000069e4 <TwoWire::write(unsigned char const*, unsigned int)>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
    69e4:	cf 92       	push	r12
    69e6:	df 92       	push	r13
    69e8:	ef 92       	push	r14
    69ea:	ff 92       	push	r15
    69ec:	0f 93       	push	r16
    69ee:	1f 93       	push	r17
    69f0:	cf 93       	push	r28
    69f2:	df 93       	push	r29
    69f4:	7c 01       	movw	r14, r24
    69f6:	6b 01       	movw	r12, r22
    69f8:	8a 01       	movw	r16, r20
{
  if(transmitting){
    69fa:	80 91 14 04 	lds	r24, 0x0414
    69fe:	88 23       	and	r24, r24
    6a00:	a1 f0       	breq	.+40     	; 0x6a2a <TwoWire::write(unsigned char const*, unsigned int)+0x46>
    6a02:	c0 e0       	ldi	r28, 0x00	; 0
    6a04:	d0 e0       	ldi	r29, 0x00	; 0
    6a06:	0d c0       	rjmp	.+26     	; 0x6a22 <TwoWire::write(unsigned char const*, unsigned int)+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
      write(data[i]);
    6a08:	d7 01       	movw	r26, r14
    6a0a:	ed 91       	ld	r30, X+
    6a0c:	fc 91       	ld	r31, X
    6a0e:	d6 01       	movw	r26, r12
    6a10:	ac 0f       	add	r26, r28
    6a12:	bd 1f       	adc	r27, r29
    6a14:	01 90       	ld	r0, Z+
    6a16:	f0 81       	ld	r31, Z
    6a18:	e0 2d       	mov	r30, r0
    6a1a:	c7 01       	movw	r24, r14
    6a1c:	6c 91       	ld	r22, X
    6a1e:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    6a20:	21 96       	adiw	r28, 0x01	; 1
    6a22:	c0 17       	cp	r28, r16
    6a24:	d1 07       	cpc	r29, r17
    6a26:	80 f3       	brcs	.-32     	; 0x6a08 <TwoWire::write(unsigned char const*, unsigned int)+0x24>
    6a28:	04 c0       	rjmp	.+8      	; 0x6a32 <TwoWire::write(unsigned char const*, unsigned int)+0x4e>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    6a2a:	cb 01       	movw	r24, r22
    6a2c:	64 2f       	mov	r22, r20
    6a2e:	0e 94 24 36 	call	0x6c48	; 0x6c48 <twi_transmit>
  }
  return quantity;
}
    6a32:	c8 01       	movw	r24, r16
    6a34:	df 91       	pop	r29
    6a36:	cf 91       	pop	r28
    6a38:	1f 91       	pop	r17
    6a3a:	0f 91       	pop	r16
    6a3c:	ff 90       	pop	r15
    6a3e:	ef 90       	pop	r14
    6a40:	df 90       	pop	r13
    6a42:	cf 90       	pop	r12
    6a44:	08 95       	ret

00006a46 <TwoWire::write(unsigned char)>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
    6a46:	df 93       	push	r29
    6a48:	cf 93       	push	r28
    6a4a:	0f 92       	push	r0
    6a4c:	cd b7       	in	r28, 0x3d	; 61
    6a4e:	de b7       	in	r29, 0x3e	; 62
    6a50:	fc 01       	movw	r30, r24
    6a52:	69 83       	std	Y+1, r22	; 0x01
{
  if(transmitting){
    6a54:	80 91 14 04 	lds	r24, 0x0414
    6a58:	88 23       	and	r24, r24
    6a5a:	c9 f0       	breq	.+50     	; 0x6a8e <TwoWire::write(unsigned char)+0x48>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    6a5c:	80 91 13 04 	lds	r24, 0x0413
    6a60:	80 32       	cpi	r24, 0x20	; 32
    6a62:	38 f0       	brcs	.+14     	; 0x6a72 <TwoWire::write(unsigned char)+0x2c>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    6a64:	81 e0       	ldi	r24, 0x01	; 1
    6a66:	90 e0       	ldi	r25, 0x00	; 0
    6a68:	93 83       	std	Z+3, r25	; 0x03
    6a6a:	82 83       	std	Z+2, r24	; 0x02
    6a6c:	20 e0       	ldi	r18, 0x00	; 0
    6a6e:	30 e0       	ldi	r19, 0x00	; 0
    6a70:	15 c0       	rjmp	.+42     	; 0x6a9c <TwoWire::write(unsigned char)+0x56>
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    6a72:	80 91 12 04 	lds	r24, 0x0412
    6a76:	e8 2f       	mov	r30, r24
    6a78:	f0 e0       	ldi	r31, 0x00	; 0
    6a7a:	ee 50       	subi	r30, 0x0E	; 14
    6a7c:	fc 4f       	sbci	r31, 0xFC	; 252
    6a7e:	99 81       	ldd	r25, Y+1	; 0x01
    6a80:	90 83       	st	Z, r25
    ++txBufferIndex;
    6a82:	8f 5f       	subi	r24, 0xFF	; 255
    6a84:	80 93 12 04 	sts	0x0412, r24
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    6a88:	80 93 13 04 	sts	0x0413, r24
    6a8c:	05 c0       	rjmp	.+10     	; 0x6a98 <TwoWire::write(unsigned char)+0x52>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    6a8e:	ce 01       	movw	r24, r28
    6a90:	01 96       	adiw	r24, 0x01	; 1
    6a92:	61 e0       	ldi	r22, 0x01	; 1
    6a94:	0e 94 24 36 	call	0x6c48	; 0x6c48 <twi_transmit>
    6a98:	21 e0       	ldi	r18, 0x01	; 1
    6a9a:	30 e0       	ldi	r19, 0x00	; 0
  }
  return 1;
}
    6a9c:	c9 01       	movw	r24, r18
    6a9e:	0f 90       	pop	r0
    6aa0:	cf 91       	pop	r28
    6aa2:	df 91       	pop	r29
    6aa4:	08 95       	ret

00006aa6 <TwoWire::endTransmission(unsigned char)>:
//	the bus tenure has been properly ended with a STOP. It
//	is very possible to leave the bus in a hung state if
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
    6aa6:	0f 93       	push	r16
    6aa8:	06 2f       	mov	r16, r22
{
  // transmit buffer (blocking)
  int8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    6aaa:	80 91 f1 03 	lds	r24, 0x03F1
    6aae:	62 ef       	ldi	r22, 0xF2	; 242
    6ab0:	73 e0       	ldi	r23, 0x03	; 3
    6ab2:	40 91 13 04 	lds	r20, 0x0413
    6ab6:	21 e0       	ldi	r18, 0x01	; 1
    6ab8:	0e 94 cf 35 	call	0x6b9e	; 0x6b9e <twi_writeTo>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    6abc:	10 92 12 04 	sts	0x0412, r1
  txBufferLength = 0;
    6ac0:	10 92 13 04 	sts	0x0413, r1
  // indicate that we are done transmitting
  transmitting = 0;
    6ac4:	10 92 14 04 	sts	0x0414, r1
  return ret;
}
    6ac8:	0f 91       	pop	r16
    6aca:	08 95       	ret

00006acc <TwoWire::endTransmission()>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
    6acc:	61 e0       	ldi	r22, 0x01	; 1
    6ace:	0e 94 53 35 	call	0x6aa6	; 0x6aa6 <TwoWire::endTransmission(unsigned char)>
}
    6ad2:	08 95       	ret

00006ad4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    quantity = BUFFER_LENGTH;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
    6ad4:	41 32       	cpi	r20, 0x21	; 33
    6ad6:	08 f0       	brcs	.+2      	; 0x6ada <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x6>
    6ad8:	40 e2       	ldi	r20, 0x20	; 32
    6ada:	86 2f       	mov	r24, r22
    6adc:	6f ec       	ldi	r22, 0xCF	; 207
    6ade:	73 e0       	ldi	r23, 0x03	; 3
    6ae0:	0e 94 86 35 	call	0x6b0c	; 0x6b0c <twi_readFrom>
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    6ae4:	10 92 ef 03 	sts	0x03EF, r1
  rxBufferLength = read;
    6ae8:	80 93 f0 03 	sts	0x03F0, r24

  return read;
}
    6aec:	08 95       	ret

00006aee <TwoWire::requestFrom(int, int)>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    6aee:	21 e0       	ldi	r18, 0x01	; 1
    6af0:	0e 94 6a 35 	call	0x6ad4	; 0x6ad4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
}
    6af4:	08 95       	ret

00006af6 <TwoWire::begin()>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    6af6:	10 92 ef 03 	sts	0x03EF, r1
  rxBufferLength = 0;
    6afa:	10 92 f0 03 	sts	0x03F0, r1

  txBufferIndex = 0;
    6afe:	10 92 12 04 	sts	0x0412, r1
  txBufferLength = 0;
    6b02:	10 92 13 04 	sts	0x0413, r1

  twi_init();
    6b06:	0e 94 d0 37 	call	0x6fa0	; 0x6fa0 <twi_init>
}
    6b0a:	08 95       	ret

00006b0c <twi_readFrom>:
 *          length: number of bytes to read into array
 *          sendStop: Boolean indicating whether to send a stop at the end
 * Output   number of bytes read
 */
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
    6b0c:	38 2f       	mov	r19, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    6b0e:	41 32       	cpi	r20, 0x21	; 33
    6b10:	10 f0       	brcs	.+4      	; 0x6b16 <twi_readFrom+0xa>
    6b12:	40 e0       	ldi	r20, 0x00	; 0
    6b14:	42 c0       	rjmp	.+132    	; 0x6b9a <twi_readFrom+0x8e>
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    6b16:	80 91 21 04 	lds	r24, 0x0421
    6b1a:	88 23       	and	r24, r24
    6b1c:	e1 f7       	brne	.-8      	; 0x6b16 <twi_readFrom+0xa>
    continue;
  }
  twi_state = TWI_MRX;
    6b1e:	91 e0       	ldi	r25, 0x01	; 1
    6b20:	90 93 21 04 	sts	0x0421, r25
  twi_sendStop = sendStop;
    6b24:	20 93 23 04 	sts	0x0423, r18
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    6b28:	8f ef       	ldi	r24, 0xFF	; 255
    6b2a:	80 93 8e 04 	sts	0x048E, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    6b2e:	10 92 49 04 	sts	0x0449, r1
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    6b32:	41 50       	subi	r20, 0x01	; 1
    6b34:	40 93 4a 04 	sts	0x044A, r20
    6b38:	4f 5f       	subi	r20, 0xFF	; 255
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    6b3a:	90 93 22 04 	sts	0x0422, r25
  twi_slarw |= address << 1;
    6b3e:	80 91 22 04 	lds	r24, 0x0422
    6b42:	33 0f       	add	r19, r19
    6b44:	83 2b       	or	r24, r19
    6b46:	80 93 22 04 	sts	0x0422, r24

  if (true == twi_inRepStart) {
    6b4a:	80 91 24 04 	lds	r24, 0x0424
    6b4e:	81 30       	cpi	r24, 0x01	; 1
    6b50:	41 f4       	brne	.+16     	; 0x6b62 <twi_readFrom+0x56>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    6b52:	10 92 24 04 	sts	0x0424, r1
    TWDR = twi_slarw;
    6b56:	80 91 22 04 	lds	r24, 0x0422
    6b5a:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    6b5e:	85 ec       	ldi	r24, 0xC5	; 197
    6b60:	01 c0       	rjmp	.+2      	; 0x6b64 <twi_readFrom+0x58>
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    6b62:	85 ee       	ldi	r24, 0xE5	; 229
    6b64:	80 93 bc 00 	sts	0x00BC, r24

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    6b68:	80 91 21 04 	lds	r24, 0x0421
    6b6c:	81 30       	cpi	r24, 0x01	; 1
    6b6e:	e1 f3       	breq	.-8      	; 0x6b68 <twi_readFrom+0x5c>
    continue;
  }

  if (twi_masterBufferIndex < length)
    6b70:	80 91 49 04 	lds	r24, 0x0449
    6b74:	84 17       	cp	r24, r20
    6b76:	10 f4       	brcc	.+4      	; 0x6b7c <twi_readFrom+0x70>
    length = twi_masterBufferIndex;
    6b78:	40 91 49 04 	lds	r20, 0x0449
    6b7c:	20 e0       	ldi	r18, 0x00	; 0
    6b7e:	30 e0       	ldi	r19, 0x00	; 0
    6b80:	0a c0       	rjmp	.+20     	; 0x6b96 <twi_readFrom+0x8a>

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
    6b82:	fb 01       	movw	r30, r22
    6b84:	e2 0f       	add	r30, r18
    6b86:	f3 1f       	adc	r31, r19
    6b88:	d9 01       	movw	r26, r18
    6b8a:	a7 5d       	subi	r26, 0xD7	; 215
    6b8c:	bb 4f       	sbci	r27, 0xFB	; 251
    6b8e:	8c 91       	ld	r24, X
    6b90:	80 83       	st	Z, r24
    6b92:	2f 5f       	subi	r18, 0xFF	; 255
    6b94:	3f 4f       	sbci	r19, 0xFF	; 255

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    6b96:	24 17       	cp	r18, r20
    6b98:	a0 f3       	brcs	.-24     	; 0x6b82 <twi_readFrom+0x76>
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
}
    6b9a:	84 2f       	mov	r24, r20
    6b9c:	08 95       	ret

00006b9e <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
    6b9e:	0f 93       	push	r16
    6ba0:	1f 93       	push	r17
    6ba2:	58 2f       	mov	r21, r24
    6ba4:	12 2f       	mov	r17, r18
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    6ba6:	41 32       	cpi	r20, 0x21	; 33
    6ba8:	10 f0       	brcs	.+4      	; 0x6bae <twi_writeTo+0x10>
    6baa:	81 e0       	ldi	r24, 0x01	; 1
    6bac:	4a c0       	rjmp	.+148    	; 0x6c42 <twi_writeTo+0xa4>
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    6bae:	80 91 21 04 	lds	r24, 0x0421
    6bb2:	88 23       	and	r24, r24
    6bb4:	e1 f7       	brne	.-8      	; 0x6bae <twi_writeTo+0x10>
    continue;
  }
  twi_state = TWI_MTX;
    6bb6:	82 e0       	ldi	r24, 0x02	; 2
    6bb8:	80 93 21 04 	sts	0x0421, r24
  twi_sendStop = sendStop;
    6bbc:	00 93 23 04 	sts	0x0423, r16
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    6bc0:	8f ef       	ldi	r24, 0xFF	; 255
    6bc2:	80 93 8e 04 	sts	0x048E, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    6bc6:	10 92 49 04 	sts	0x0449, r1
  twi_masterBufferLength = length;
    6bca:	40 93 4a 04 	sts	0x044A, r20
    6bce:	a9 e2       	ldi	r26, 0x29	; 41
    6bd0:	b4 e0       	ldi	r27, 0x04	; 4
    6bd2:	fb 01       	movw	r30, r22
    6bd4:	02 c0       	rjmp	.+4      	; 0x6bda <twi_writeTo+0x3c>
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
    6bd6:	81 91       	ld	r24, Z+
    6bd8:	8d 93       	st	X+, r24
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    6bda:	8e 2f       	mov	r24, r30
    6bdc:	86 1b       	sub	r24, r22
    6bde:	84 17       	cp	r24, r20
    6be0:	d0 f3       	brcs	.-12     	; 0x6bd6 <twi_writeTo+0x38>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    6be2:	10 92 22 04 	sts	0x0422, r1
  twi_slarw |= address << 1;
    6be6:	80 91 22 04 	lds	r24, 0x0422
    6bea:	55 0f       	add	r21, r21
    6bec:	85 2b       	or	r24, r21
    6bee:	80 93 22 04 	sts	0x0422, r24
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    6bf2:	80 91 24 04 	lds	r24, 0x0424
    6bf6:	81 30       	cpi	r24, 0x01	; 1
    6bf8:	41 f4       	brne	.+16     	; 0x6c0a <twi_writeTo+0x6c>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    6bfa:	10 92 24 04 	sts	0x0424, r1
    TWDR = twi_slarw;				
    6bfe:	80 91 22 04 	lds	r24, 0x0422
    6c02:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    6c06:	85 ec       	ldi	r24, 0xC5	; 197
    6c08:	01 c0       	rjmp	.+2      	; 0x6c0c <twi_writeTo+0x6e>
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
    6c0a:	85 ee       	ldi	r24, 0xE5	; 229
    6c0c:	80 93 bc 00 	sts	0x00BC, r24

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    6c10:	11 23       	and	r17, r17
    6c12:	21 f0       	breq	.+8      	; 0x6c1c <twi_writeTo+0x7e>
    6c14:	80 91 21 04 	lds	r24, 0x0421
    6c18:	82 30       	cpi	r24, 0x02	; 2
    6c1a:	e1 f3       	breq	.-8      	; 0x6c14 <twi_writeTo+0x76>
    continue;
  }
  
  if (twi_error == 0xFF)
    6c1c:	80 91 8e 04 	lds	r24, 0x048E
    6c20:	8f 3f       	cpi	r24, 0xFF	; 255
    6c22:	11 f4       	brne	.+4      	; 0x6c28 <twi_writeTo+0x8a>
    6c24:	80 e0       	ldi	r24, 0x00	; 0
    6c26:	0d c0       	rjmp	.+26     	; 0x6c42 <twi_writeTo+0xa4>
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    6c28:	80 91 8e 04 	lds	r24, 0x048E
    6c2c:	80 32       	cpi	r24, 0x20	; 32
    6c2e:	11 f4       	brne	.+4      	; 0x6c34 <twi_writeTo+0x96>
    6c30:	82 e0       	ldi	r24, 0x02	; 2
    6c32:	07 c0       	rjmp	.+14     	; 0x6c42 <twi_writeTo+0xa4>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    6c34:	80 91 8e 04 	lds	r24, 0x048E
    6c38:	80 33       	cpi	r24, 0x30	; 48
    6c3a:	11 f0       	breq	.+4      	; 0x6c40 <twi_writeTo+0xa2>
    6c3c:	84 e0       	ldi	r24, 0x04	; 4
    6c3e:	01 c0       	rjmp	.+2      	; 0x6c42 <twi_writeTo+0xa4>
    6c40:	83 e0       	ldi	r24, 0x03	; 3
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
}
    6c42:	1f 91       	pop	r17
    6c44:	0f 91       	pop	r16
    6c46:	08 95       	ret

00006c48 <twi_transmit>:
 * Output   1 length too long for buffer
 *          2 not slave transmitter
 *          0 ok
 */
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
    6c48:	48 2f       	mov	r20, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    6c4a:	61 32       	cpi	r22, 0x21	; 33
    6c4c:	10 f0       	brcs	.+4      	; 0x6c52 <twi_transmit+0xa>
    6c4e:	81 e0       	ldi	r24, 0x01	; 1
    6c50:	08 95       	ret
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    6c52:	80 91 21 04 	lds	r24, 0x0421
    6c56:	84 30       	cpi	r24, 0x04	; 4
    6c58:	11 f0       	breq	.+4      	; 0x6c5e <twi_transmit+0x16>
    6c5a:	82 e0       	ldi	r24, 0x02	; 2
    6c5c:	08 95       	ret
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
    6c5e:	60 93 6c 04 	sts	0x046C, r22
    6c62:	ab e4       	ldi	r26, 0x4B	; 75
    6c64:	b4 e0       	ldi	r27, 0x04	; 4
    6c66:	84 2f       	mov	r24, r20
    6c68:	9c 01       	movw	r18, r24
    6c6a:	f9 01       	movw	r30, r18
    6c6c:	02 c0       	rjmp	.+4      	; 0x6c72 <twi_transmit+0x2a>
  for(i = 0; i < length; ++i){
    twi_txBuffer[i] = data[i];
    6c6e:	81 91       	ld	r24, Z+
    6c70:	8d 93       	st	X+, r24
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
    6c72:	8e 2f       	mov	r24, r30
    6c74:	84 1b       	sub	r24, r20
    6c76:	86 17       	cp	r24, r22
    6c78:	d0 f3       	brcs	.-12     	; 0x6c6e <twi_transmit+0x26>
    6c7a:	80 e0       	ldi	r24, 0x00	; 0
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
}
    6c7c:	08 95       	ret

00006c7e <__vector_24>:
  // update twi state
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
    6c7e:	1f 92       	push	r1
    6c80:	0f 92       	push	r0
    6c82:	0f b6       	in	r0, 0x3f	; 63
    6c84:	0f 92       	push	r0
    6c86:	11 24       	eor	r1, r1
    6c88:	2f 93       	push	r18
    6c8a:	3f 93       	push	r19
    6c8c:	4f 93       	push	r20
    6c8e:	5f 93       	push	r21
    6c90:	6f 93       	push	r22
    6c92:	7f 93       	push	r23
    6c94:	8f 93       	push	r24
    6c96:	9f 93       	push	r25
    6c98:	af 93       	push	r26
    6c9a:	bf 93       	push	r27
    6c9c:	ef 93       	push	r30
    6c9e:	ff 93       	push	r31
  switch(TW_STATUS){
    6ca0:	80 91 b9 00 	lds	r24, 0x00B9
    6ca4:	90 e0       	ldi	r25, 0x00	; 0
    6ca6:	88 7f       	andi	r24, 0xF8	; 248
    6ca8:	90 70       	andi	r25, 0x00	; 0
    6caa:	80 36       	cpi	r24, 0x60	; 96
    6cac:	91 05       	cpc	r25, r1
    6cae:	09 f4       	brne	.+2      	; 0x6cb2 <__vector_24+0x34>
    6cb0:	f2 c0       	rjmp	.+484    	; 0x6e96 <__vector_24+0x218>
    6cb2:	81 36       	cpi	r24, 0x61	; 97
    6cb4:	91 05       	cpc	r25, r1
    6cb6:	cc f5       	brge	.+114    	; 0x6d2a <__vector_24+0xac>
    6cb8:	88 32       	cpi	r24, 0x28	; 40
    6cba:	91 05       	cpc	r25, r1
    6cbc:	09 f4       	brne	.+2      	; 0x6cc0 <__vector_24+0x42>
    6cbe:	7b c0       	rjmp	.+246    	; 0x6db6 <__vector_24+0x138>
    6cc0:	89 32       	cpi	r24, 0x29	; 41
    6cc2:	91 05       	cpc	r25, r1
    6cc4:	b4 f4       	brge	.+44     	; 0x6cf2 <__vector_24+0x74>
    6cc6:	80 31       	cpi	r24, 0x10	; 16
    6cc8:	91 05       	cpc	r25, r1
    6cca:	09 f4       	brne	.+2      	; 0x6cce <__vector_24+0x50>
    6ccc:	6f c0       	rjmp	.+222    	; 0x6dac <__vector_24+0x12e>
    6cce:	81 31       	cpi	r24, 0x11	; 17
    6cd0:	91 05       	cpc	r25, r1
    6cd2:	3c f4       	brge	.+14     	; 0x6ce2 <__vector_24+0x64>
    6cd4:	00 97       	sbiw	r24, 0x00	; 0
    6cd6:	09 f4       	brne	.+2      	; 0x6cda <__vector_24+0x5c>
    6cd8:	47 c1       	rjmp	.+654    	; 0x6f68 <__vector_24+0x2ea>
    6cda:	08 97       	sbiw	r24, 0x08	; 8
    6cdc:	09 f0       	breq	.+2      	; 0x6ce0 <__vector_24+0x62>
    6cde:	4f c1       	rjmp	.+670    	; 0x6f7e <__vector_24+0x300>
    6ce0:	65 c0       	rjmp	.+202    	; 0x6dac <__vector_24+0x12e>
    6ce2:	88 31       	cpi	r24, 0x18	; 24
    6ce4:	91 05       	cpc	r25, r1
    6ce6:	09 f4       	brne	.+2      	; 0x6cea <__vector_24+0x6c>
    6ce8:	66 c0       	rjmp	.+204    	; 0x6db6 <__vector_24+0x138>
    6cea:	80 97       	sbiw	r24, 0x20	; 32
    6cec:	09 f0       	breq	.+2      	; 0x6cf0 <__vector_24+0x72>
    6cee:	47 c1       	rjmp	.+654    	; 0x6f7e <__vector_24+0x300>
    6cf0:	82 c0       	rjmp	.+260    	; 0x6df6 <__vector_24+0x178>
    6cf2:	80 34       	cpi	r24, 0x40	; 64
    6cf4:	91 05       	cpc	r25, r1
    6cf6:	09 f4       	brne	.+2      	; 0x6cfa <__vector_24+0x7c>
    6cf8:	a4 c0       	rjmp	.+328    	; 0x6e42 <__vector_24+0x1c4>
    6cfa:	81 34       	cpi	r24, 0x41	; 65
    6cfc:	91 05       	cpc	r25, r1
    6cfe:	44 f4       	brge	.+16     	; 0x6d10 <__vector_24+0x92>
    6d00:	80 33       	cpi	r24, 0x30	; 48
    6d02:	91 05       	cpc	r25, r1
    6d04:	09 f4       	brne	.+2      	; 0x6d08 <__vector_24+0x8a>
    6d06:	82 c0       	rjmp	.+260    	; 0x6e0c <__vector_24+0x18e>
    6d08:	c8 97       	sbiw	r24, 0x38	; 56
    6d0a:	09 f0       	breq	.+2      	; 0x6d0e <__vector_24+0x90>
    6d0c:	38 c1       	rjmp	.+624    	; 0x6f7e <__vector_24+0x300>
    6d0e:	89 c0       	rjmp	.+274    	; 0x6e22 <__vector_24+0x1a4>
    6d10:	80 35       	cpi	r24, 0x50	; 80
    6d12:	91 05       	cpc	r25, r1
    6d14:	09 f4       	brne	.+2      	; 0x6d18 <__vector_24+0x9a>
    6d16:	89 c0       	rjmp	.+274    	; 0x6e2a <__vector_24+0x1ac>
    6d18:	88 35       	cpi	r24, 0x58	; 88
    6d1a:	91 05       	cpc	r25, r1
    6d1c:	09 f4       	brne	.+2      	; 0x6d20 <__vector_24+0xa2>
    6d1e:	96 c0       	rjmp	.+300    	; 0x6e4c <__vector_24+0x1ce>
    6d20:	88 34       	cpi	r24, 0x48	; 72
    6d22:	91 05       	cpc	r25, r1
    6d24:	09 f0       	breq	.+2      	; 0x6d28 <__vector_24+0xaa>
    6d26:	2b c1       	rjmp	.+598    	; 0x6f7e <__vector_24+0x300>
    6d28:	ae c0       	rjmp	.+348    	; 0x6e86 <__vector_24+0x208>
    6d2a:	88 39       	cpi	r24, 0x98	; 152
    6d2c:	91 05       	cpc	r25, r1
    6d2e:	09 f4       	brne	.+2      	; 0x6d32 <__vector_24+0xb4>
    6d30:	13 c1       	rjmp	.+550    	; 0x6f58 <__vector_24+0x2da>
    6d32:	89 39       	cpi	r24, 0x99	; 153
    6d34:	91 05       	cpc	r25, r1
    6d36:	ec f4       	brge	.+58     	; 0x6d72 <__vector_24+0xf4>
    6d38:	88 37       	cpi	r24, 0x78	; 120
    6d3a:	91 05       	cpc	r25, r1
    6d3c:	09 f4       	brne	.+2      	; 0x6d40 <__vector_24+0xc2>
    6d3e:	ab c0       	rjmp	.+342    	; 0x6e96 <__vector_24+0x218>
    6d40:	89 37       	cpi	r24, 0x79	; 121
    6d42:	91 05       	cpc	r25, r1
    6d44:	4c f4       	brge	.+18     	; 0x6d58 <__vector_24+0xda>
    6d46:	88 36       	cpi	r24, 0x68	; 104
    6d48:	91 05       	cpc	r25, r1
    6d4a:	09 f4       	brne	.+2      	; 0x6d4e <__vector_24+0xd0>
    6d4c:	a4 c0       	rjmp	.+328    	; 0x6e96 <__vector_24+0x218>
    6d4e:	80 37       	cpi	r24, 0x70	; 112
    6d50:	91 05       	cpc	r25, r1
    6d52:	09 f0       	breq	.+2      	; 0x6d56 <__vector_24+0xd8>
    6d54:	14 c1       	rjmp	.+552    	; 0x6f7e <__vector_24+0x300>
    6d56:	9f c0       	rjmp	.+318    	; 0x6e96 <__vector_24+0x218>
    6d58:	88 38       	cpi	r24, 0x88	; 136
    6d5a:	91 05       	cpc	r25, r1
    6d5c:	09 f4       	brne	.+2      	; 0x6d60 <__vector_24+0xe2>
    6d5e:	fc c0       	rjmp	.+504    	; 0x6f58 <__vector_24+0x2da>
    6d60:	80 39       	cpi	r24, 0x90	; 144
    6d62:	91 05       	cpc	r25, r1
    6d64:	09 f4       	brne	.+2      	; 0x6d68 <__vector_24+0xea>
    6d66:	9d c0       	rjmp	.+314    	; 0x6ea2 <__vector_24+0x224>
    6d68:	80 38       	cpi	r24, 0x80	; 128
    6d6a:	91 05       	cpc	r25, r1
    6d6c:	09 f0       	breq	.+2      	; 0x6d70 <__vector_24+0xf2>
    6d6e:	07 c1       	rjmp	.+526    	; 0x6f7e <__vector_24+0x300>
    6d70:	98 c0       	rjmp	.+304    	; 0x6ea2 <__vector_24+0x224>
    6d72:	80 3b       	cpi	r24, 0xB0	; 176
    6d74:	91 05       	cpc	r25, r1
    6d76:	09 f4       	brne	.+2      	; 0x6d7a <__vector_24+0xfc>
    6d78:	c6 c0       	rjmp	.+396    	; 0x6f06 <__vector_24+0x288>
    6d7a:	81 3b       	cpi	r24, 0xB1	; 177
    6d7c:	91 05       	cpc	r25, r1
    6d7e:	4c f4       	brge	.+18     	; 0x6d92 <__vector_24+0x114>
    6d80:	80 3a       	cpi	r24, 0xA0	; 160
    6d82:	91 05       	cpc	r25, r1
    6d84:	09 f4       	brne	.+2      	; 0x6d88 <__vector_24+0x10a>
    6d86:	9f c0       	rjmp	.+318    	; 0x6ec6 <__vector_24+0x248>
    6d88:	88 3a       	cpi	r24, 0xA8	; 168
    6d8a:	91 05       	cpc	r25, r1
    6d8c:	09 f0       	breq	.+2      	; 0x6d90 <__vector_24+0x112>
    6d8e:	f7 c0       	rjmp	.+494    	; 0x6f7e <__vector_24+0x300>
    6d90:	ba c0       	rjmp	.+372    	; 0x6f06 <__vector_24+0x288>
    6d92:	80 3c       	cpi	r24, 0xC0	; 192
    6d94:	91 05       	cpc	r25, r1
    6d96:	09 f4       	brne	.+2      	; 0x6d9a <__vector_24+0x11c>
    6d98:	e3 c0       	rjmp	.+454    	; 0x6f60 <__vector_24+0x2e2>
    6d9a:	88 3c       	cpi	r24, 0xC8	; 200
    6d9c:	91 05       	cpc	r25, r1
    6d9e:	09 f4       	brne	.+2      	; 0x6da2 <__vector_24+0x124>
    6da0:	df c0       	rjmp	.+446    	; 0x6f60 <__vector_24+0x2e2>
    6da2:	88 3b       	cpi	r24, 0xB8	; 184
    6da4:	91 05       	cpc	r25, r1
    6da6:	09 f0       	breq	.+2      	; 0x6daa <__vector_24+0x12c>
    6da8:	ea c0       	rjmp	.+468    	; 0x6f7e <__vector_24+0x300>
    6daa:	c2 c0       	rjmp	.+388    	; 0x6f30 <__vector_24+0x2b2>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    6dac:	80 91 22 04 	lds	r24, 0x0422
    6db0:	80 93 bb 00 	sts	0x00BB, r24
    6db4:	cf c0       	rjmp	.+414    	; 0x6f54 <__vector_24+0x2d6>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    6db6:	90 91 49 04 	lds	r25, 0x0449
    6dba:	80 91 4a 04 	lds	r24, 0x044A
    6dbe:	98 17       	cp	r25, r24
    6dc0:	68 f4       	brcc	.+26     	; 0x6ddc <__vector_24+0x15e>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    6dc2:	90 91 49 04 	lds	r25, 0x0449
    6dc6:	e9 2f       	mov	r30, r25
    6dc8:	f0 e0       	ldi	r31, 0x00	; 0
    6dca:	e7 5d       	subi	r30, 0xD7	; 215
    6dcc:	fb 4f       	sbci	r31, 0xFB	; 251
    6dce:	80 81       	ld	r24, Z
    6dd0:	80 93 bb 00 	sts	0x00BB, r24
    6dd4:	9f 5f       	subi	r25, 0xFF	; 255
    6dd6:	90 93 49 04 	sts	0x0449, r25
    6dda:	bc c0       	rjmp	.+376    	; 0x6f54 <__vector_24+0x2d6>
        twi_reply(1);
      }else{
	if (twi_sendStop)
    6ddc:	80 91 23 04 	lds	r24, 0x0423
    6de0:	88 23       	and	r24, r24
    6de2:	09 f4       	brne	.+2      	; 0x6de6 <__vector_24+0x168>
    6de4:	4b c0       	rjmp	.+150    	; 0x6e7c <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    6de6:	85 ed       	ldi	r24, 0xD5	; 213
    6de8:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    6dec:	80 91 bc 00 	lds	r24, 0x00BC
    6df0:	84 fd       	sbrc	r24, 4
    6df2:	fc cf       	rjmp	.-8      	; 0x6dec <__vector_24+0x16e>
    6df4:	c2 c0       	rjmp	.+388    	; 0x6f7a <__vector_24+0x2fc>
	  twi_state = TWI_READY;
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    6df6:	80 e2       	ldi	r24, 0x20	; 32
    6df8:	80 93 8e 04 	sts	0x048E, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    6dfc:	85 ed       	ldi	r24, 0xD5	; 213
    6dfe:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    6e02:	80 91 bc 00 	lds	r24, 0x00BC
    6e06:	84 fd       	sbrc	r24, 4
    6e08:	fc cf       	rjmp	.-8      	; 0x6e02 <__vector_24+0x184>
    6e0a:	b7 c0       	rjmp	.+366    	; 0x6f7a <__vector_24+0x2fc>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    6e0c:	80 e3       	ldi	r24, 0x30	; 48
    6e0e:	80 93 8e 04 	sts	0x048E, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    6e12:	85 ed       	ldi	r24, 0xD5	; 213
    6e14:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    6e18:	80 91 bc 00 	lds	r24, 0x00BC
    6e1c:	84 fd       	sbrc	r24, 4
    6e1e:	fc cf       	rjmp	.-8      	; 0x6e18 <__vector_24+0x19a>
    6e20:	ac c0       	rjmp	.+344    	; 0x6f7a <__vector_24+0x2fc>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    6e22:	88 e3       	ldi	r24, 0x38	; 56
    6e24:	80 93 8e 04 	sts	0x048E, r24
    6e28:	9b c0       	rjmp	.+310    	; 0x6f60 <__vector_24+0x2e2>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    6e2a:	80 91 49 04 	lds	r24, 0x0449
    6e2e:	90 91 bb 00 	lds	r25, 0x00BB
    6e32:	e8 2f       	mov	r30, r24
    6e34:	f0 e0       	ldi	r31, 0x00	; 0
    6e36:	e7 5d       	subi	r30, 0xD7	; 215
    6e38:	fb 4f       	sbci	r31, 0xFB	; 251
    6e3a:	90 83       	st	Z, r25
    6e3c:	8f 5f       	subi	r24, 0xFF	; 255
    6e3e:	80 93 49 04 	sts	0x0449, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    6e42:	90 91 49 04 	lds	r25, 0x0449
    6e46:	80 91 4a 04 	lds	r24, 0x044A
    6e4a:	82 c0       	rjmp	.+260    	; 0x6f50 <__vector_24+0x2d2>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    6e4c:	80 91 49 04 	lds	r24, 0x0449
    6e50:	90 91 bb 00 	lds	r25, 0x00BB
    6e54:	e8 2f       	mov	r30, r24
    6e56:	f0 e0       	ldi	r31, 0x00	; 0
    6e58:	e7 5d       	subi	r30, 0xD7	; 215
    6e5a:	fb 4f       	sbci	r31, 0xFB	; 251
    6e5c:	90 83       	st	Z, r25
    6e5e:	8f 5f       	subi	r24, 0xFF	; 255
    6e60:	80 93 49 04 	sts	0x0449, r24
	if (twi_sendStop)
    6e64:	80 91 23 04 	lds	r24, 0x0423
    6e68:	88 23       	and	r24, r24
    6e6a:	41 f0       	breq	.+16     	; 0x6e7c <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    6e6c:	85 ed       	ldi	r24, 0xD5	; 213
    6e6e:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    6e72:	80 91 bc 00 	lds	r24, 0x00BC
    6e76:	84 fd       	sbrc	r24, 4
    6e78:	fc cf       	rjmp	.-8      	; 0x6e72 <__vector_24+0x1f4>
    6e7a:	7f c0       	rjmp	.+254    	; 0x6f7a <__vector_24+0x2fc>
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    6e7c:	81 e0       	ldi	r24, 0x01	; 1
    6e7e:	80 93 24 04 	sts	0x0424, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    6e82:	84 ea       	ldi	r24, 0xA4	; 164
    6e84:	6e c0       	rjmp	.+220    	; 0x6f62 <__vector_24+0x2e4>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    6e86:	85 ed       	ldi	r24, 0xD5	; 213
    6e88:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    6e8c:	80 91 bc 00 	lds	r24, 0x00BC
    6e90:	84 fd       	sbrc	r24, 4
    6e92:	fc cf       	rjmp	.-8      	; 0x6e8c <__vector_24+0x20e>
    6e94:	72 c0       	rjmp	.+228    	; 0x6f7a <__vector_24+0x2fc>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    6e96:	83 e0       	ldi	r24, 0x03	; 3
    6e98:	80 93 21 04 	sts	0x0421, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    6e9c:	10 92 8d 04 	sts	0x048D, r1
    6ea0:	59 c0       	rjmp	.+178    	; 0x6f54 <__vector_24+0x2d6>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    6ea2:	80 91 8d 04 	lds	r24, 0x048D
    6ea6:	80 32       	cpi	r24, 0x20	; 32
    6ea8:	08 f0       	brcs	.+2      	; 0x6eac <__vector_24+0x22e>
    6eaa:	56 c0       	rjmp	.+172    	; 0x6f58 <__vector_24+0x2da>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    6eac:	80 91 8d 04 	lds	r24, 0x048D
    6eb0:	90 91 bb 00 	lds	r25, 0x00BB
    6eb4:	e8 2f       	mov	r30, r24
    6eb6:	f0 e0       	ldi	r31, 0x00	; 0
    6eb8:	e3 59       	subi	r30, 0x93	; 147
    6eba:	fb 4f       	sbci	r31, 0xFB	; 251
    6ebc:	90 83       	st	Z, r25
    6ebe:	8f 5f       	subi	r24, 0xFF	; 255
    6ec0:	80 93 8d 04 	sts	0x048D, r24
    6ec4:	47 c0       	rjmp	.+142    	; 0x6f54 <__vector_24+0x2d6>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    6ec6:	80 91 8d 04 	lds	r24, 0x048D
    6eca:	80 32       	cpi	r24, 0x20	; 32
    6ecc:	30 f4       	brcc	.+12     	; 0x6eda <__vector_24+0x25c>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    6ece:	e0 91 8d 04 	lds	r30, 0x048D
    6ed2:	f0 e0       	ldi	r31, 0x00	; 0
    6ed4:	e3 59       	subi	r30, 0x93	; 147
    6ed6:	fb 4f       	sbci	r31, 0xFB	; 251
    6ed8:	10 82       	st	Z, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    6eda:	85 ed       	ldi	r24, 0xD5	; 213
    6edc:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    6ee0:	80 91 bc 00 	lds	r24, 0x00BC
    6ee4:	84 fd       	sbrc	r24, 4
    6ee6:	fc cf       	rjmp	.-8      	; 0x6ee0 <__vector_24+0x262>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    6ee8:	10 92 21 04 	sts	0x0421, r1
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    6eec:	60 91 8d 04 	lds	r22, 0x048D
    6ef0:	e0 91 27 04 	lds	r30, 0x0427
    6ef4:	f0 91 28 04 	lds	r31, 0x0428
    6ef8:	8d e6       	ldi	r24, 0x6D	; 109
    6efa:	94 e0       	ldi	r25, 0x04	; 4
    6efc:	70 e0       	ldi	r23, 0x00	; 0
    6efe:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    6f00:	10 92 8d 04 	sts	0x048D, r1
    6f04:	2d c0       	rjmp	.+90     	; 0x6f60 <__vector_24+0x2e2>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    6f06:	84 e0       	ldi	r24, 0x04	; 4
    6f08:	80 93 21 04 	sts	0x0421, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    6f0c:	10 92 6b 04 	sts	0x046B, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    6f10:	10 92 6c 04 	sts	0x046C, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    6f14:	e0 91 25 04 	lds	r30, 0x0425
    6f18:	f0 91 26 04 	lds	r31, 0x0426
    6f1c:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    6f1e:	80 91 6c 04 	lds	r24, 0x046C
    6f22:	88 23       	and	r24, r24
    6f24:	29 f4       	brne	.+10     	; 0x6f30 <__vector_24+0x2b2>
        twi_txBufferLength = 1;
    6f26:	81 e0       	ldi	r24, 0x01	; 1
    6f28:	80 93 6c 04 	sts	0x046C, r24
        twi_txBuffer[0] = 0x00;
    6f2c:	10 92 4b 04 	sts	0x044B, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    6f30:	90 91 6b 04 	lds	r25, 0x046B
    6f34:	e9 2f       	mov	r30, r25
    6f36:	f0 e0       	ldi	r31, 0x00	; 0
    6f38:	e5 5b       	subi	r30, 0xB5	; 181
    6f3a:	fb 4f       	sbci	r31, 0xFB	; 251
    6f3c:	80 81       	ld	r24, Z
    6f3e:	80 93 bb 00 	sts	0x00BB, r24
    6f42:	9f 5f       	subi	r25, 0xFF	; 255
    6f44:	90 93 6b 04 	sts	0x046B, r25
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    6f48:	90 91 6b 04 	lds	r25, 0x046B
    6f4c:	80 91 6c 04 	lds	r24, 0x046C
    6f50:	98 17       	cp	r25, r24
    6f52:	10 f4       	brcc	.+4      	; 0x6f58 <__vector_24+0x2da>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    6f54:	85 ec       	ldi	r24, 0xC5	; 197
    6f56:	01 c0       	rjmp	.+2      	; 0x6f5a <__vector_24+0x2dc>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    6f58:	85 e8       	ldi	r24, 0x85	; 133
    6f5a:	80 93 bc 00 	sts	0x00BC, r24
    6f5e:	0f c0       	rjmp	.+30     	; 0x6f7e <__vector_24+0x300>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    6f60:	85 ec       	ldi	r24, 0xC5	; 197
    6f62:	80 93 bc 00 	sts	0x00BC, r24
    6f66:	09 c0       	rjmp	.+18     	; 0x6f7a <__vector_24+0x2fc>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    6f68:	10 92 8e 04 	sts	0x048E, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    6f6c:	85 ed       	ldi	r24, 0xD5	; 213
    6f6e:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    6f72:	80 91 bc 00 	lds	r24, 0x00BC
    6f76:	84 fd       	sbrc	r24, 4
    6f78:	fc cf       	rjmp	.-8      	; 0x6f72 <__vector_24+0x2f4>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    6f7a:	10 92 21 04 	sts	0x0421, r1
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    6f7e:	ff 91       	pop	r31
    6f80:	ef 91       	pop	r30
    6f82:	bf 91       	pop	r27
    6f84:	af 91       	pop	r26
    6f86:	9f 91       	pop	r25
    6f88:	8f 91       	pop	r24
    6f8a:	7f 91       	pop	r23
    6f8c:	6f 91       	pop	r22
    6f8e:	5f 91       	pop	r21
    6f90:	4f 91       	pop	r20
    6f92:	3f 91       	pop	r19
    6f94:	2f 91       	pop	r18
    6f96:	0f 90       	pop	r0
    6f98:	0f be       	out	0x3f, r0	; 63
    6f9a:	0f 90       	pop	r0
    6f9c:	1f 90       	pop	r1
    6f9e:	18 95       	reti

00006fa0 <twi_init>:
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
    6fa0:	10 92 21 04 	sts	0x0421, r1
  twi_sendStop = true;		// default value
    6fa4:	81 e0       	ldi	r24, 0x01	; 1
    6fa6:	80 93 23 04 	sts	0x0423, r24
  twi_inRepStart = false;
    6faa:	10 92 24 04 	sts	0x0424, r1
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
    6fae:	82 e1       	ldi	r24, 0x12	; 18
    6fb0:	61 e0       	ldi	r22, 0x01	; 1
    6fb2:	0e 94 2d 38 	call	0x705a	; 0x705a <digitalWrite>
  digitalWrite(SCL, 1);
    6fb6:	83 e1       	ldi	r24, 0x13	; 19
    6fb8:	61 e0       	ldi	r22, 0x01	; 1
    6fba:	0e 94 2d 38 	call	0x705a	; 0x705a <digitalWrite>

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    6fbe:	e9 eb       	ldi	r30, 0xB9	; 185
    6fc0:	f0 e0       	ldi	r31, 0x00	; 0
    6fc2:	80 81       	ld	r24, Z
    6fc4:	8e 7f       	andi	r24, 0xFE	; 254
    6fc6:	80 83       	st	Z, r24
  cbi(TWSR, TWPS1);
    6fc8:	80 81       	ld	r24, Z
    6fca:	8d 7f       	andi	r24, 0xFD	; 253
    6fcc:	80 83       	st	Z, r24
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
    6fce:	8d ef       	ldi	r24, 0xFD	; 253
    6fd0:	80 93 b8 00 	sts	0x00B8, r24
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    6fd4:	85 e4       	ldi	r24, 0x45	; 69
    6fd6:	80 93 bc 00 	sts	0x00BC, r24
}
    6fda:	08 95       	ret

00006fdc <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    6fdc:	cf 93       	push	r28
    6fde:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    6fe0:	48 2f       	mov	r20, r24
    6fe2:	50 e0       	ldi	r21, 0x00	; 0
    6fe4:	ca 01       	movw	r24, r20
    6fe6:	8a 5f       	subi	r24, 0xFA	; 250
    6fe8:	9a 4f       	sbci	r25, 0xFA	; 250
    6fea:	fc 01       	movw	r30, r24
    6fec:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
    6fee:	4e 50       	subi	r20, 0x0E	; 14
    6ff0:	5b 4f       	sbci	r21, 0xFB	; 251
    6ff2:	fa 01       	movw	r30, r20
    6ff4:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    6ff6:	88 23       	and	r24, r24
    6ff8:	69 f1       	breq	.+90     	; 0x7054 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    6ffa:	90 e0       	ldi	r25, 0x00	; 0
    6ffc:	88 0f       	add	r24, r24
    6ffe:	99 1f       	adc	r25, r25
    7000:	fc 01       	movw	r30, r24
    7002:	ec 52       	subi	r30, 0x2C	; 44
    7004:	fb 4f       	sbci	r31, 0xFB	; 251
    7006:	a5 91       	lpm	r26, Z+
    7008:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
    700a:	fc 01       	movw	r30, r24
    700c:	e2 52       	subi	r30, 0x22	; 34
    700e:	fb 4f       	sbci	r31, 0xFB	; 251
    7010:	c5 91       	lpm	r28, Z+
    7012:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
    7014:	66 23       	and	r22, r22
    7016:	51 f4       	brne	.+20     	; 0x702c <pinMode+0x50>
		uint8_t oldSREG = SREG;
    7018:	2f b7       	in	r18, 0x3f	; 63
                cli();
    701a:	f8 94       	cli
		*reg &= ~bit;
    701c:	8c 91       	ld	r24, X
    701e:	93 2f       	mov	r25, r19
    7020:	90 95       	com	r25
    7022:	89 23       	and	r24, r25
    7024:	8c 93       	st	X, r24
		*out &= ~bit;
    7026:	88 81       	ld	r24, Y
    7028:	89 23       	and	r24, r25
    702a:	0b c0       	rjmp	.+22     	; 0x7042 <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    702c:	62 30       	cpi	r22, 0x02	; 2
    702e:	61 f4       	brne	.+24     	; 0x7048 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    7030:	2f b7       	in	r18, 0x3f	; 63
                cli();
    7032:	f8 94       	cli
		*reg &= ~bit;
    7034:	8c 91       	ld	r24, X
    7036:	93 2f       	mov	r25, r19
    7038:	90 95       	com	r25
    703a:	89 23       	and	r24, r25
    703c:	8c 93       	st	X, r24
		*out |= bit;
    703e:	88 81       	ld	r24, Y
    7040:	83 2b       	or	r24, r19
    7042:	88 83       	st	Y, r24
		SREG = oldSREG;
    7044:	2f bf       	out	0x3f, r18	; 63
    7046:	06 c0       	rjmp	.+12     	; 0x7054 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    7048:	9f b7       	in	r25, 0x3f	; 63
                cli();
    704a:	f8 94       	cli
		*reg |= bit;
    704c:	8c 91       	ld	r24, X
    704e:	83 2b       	or	r24, r19
    7050:	8c 93       	st	X, r24
		SREG = oldSREG;
    7052:	9f bf       	out	0x3f, r25	; 63
	}
}
    7054:	df 91       	pop	r29
    7056:	cf 91       	pop	r28
    7058:	08 95       	ret

0000705a <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    705a:	48 2f       	mov	r20, r24
    705c:	50 e0       	ldi	r21, 0x00	; 0
    705e:	ca 01       	movw	r24, r20
    7060:	86 5e       	subi	r24, 0xE6	; 230
    7062:	9a 4f       	sbci	r25, 0xFA	; 250
    7064:	fc 01       	movw	r30, r24
    7066:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    7068:	ca 01       	movw	r24, r20
    706a:	8a 5f       	subi	r24, 0xFA	; 250
    706c:	9a 4f       	sbci	r25, 0xFA	; 250
    706e:	fc 01       	movw	r30, r24
    7070:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    7072:	4e 50       	subi	r20, 0x0E	; 14
    7074:	5b 4f       	sbci	r21, 0xFB	; 251
    7076:	fa 01       	movw	r30, r20
    7078:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    707a:	33 23       	and	r19, r19
    707c:	09 f4       	brne	.+2      	; 0x7080 <digitalWrite+0x26>
    707e:	40 c0       	rjmp	.+128    	; 0x7100 <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    7080:	22 23       	and	r18, r18
    7082:	51 f1       	breq	.+84     	; 0x70d8 <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    7084:	23 30       	cpi	r18, 0x03	; 3
    7086:	71 f0       	breq	.+28     	; 0x70a4 <digitalWrite+0x4a>
    7088:	24 30       	cpi	r18, 0x04	; 4
    708a:	28 f4       	brcc	.+10     	; 0x7096 <digitalWrite+0x3c>
    708c:	21 30       	cpi	r18, 0x01	; 1
    708e:	a1 f0       	breq	.+40     	; 0x70b8 <digitalWrite+0x5e>
    7090:	22 30       	cpi	r18, 0x02	; 2
    7092:	11 f5       	brne	.+68     	; 0x70d8 <digitalWrite+0x7e>
    7094:	14 c0       	rjmp	.+40     	; 0x70be <digitalWrite+0x64>
    7096:	26 30       	cpi	r18, 0x06	; 6
    7098:	b1 f0       	breq	.+44     	; 0x70c6 <digitalWrite+0x6c>
    709a:	27 30       	cpi	r18, 0x07	; 7
    709c:	c1 f0       	breq	.+48     	; 0x70ce <digitalWrite+0x74>
    709e:	24 30       	cpi	r18, 0x04	; 4
    70a0:	d9 f4       	brne	.+54     	; 0x70d8 <digitalWrite+0x7e>
    70a2:	04 c0       	rjmp	.+8      	; 0x70ac <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    70a4:	80 91 80 00 	lds	r24, 0x0080
    70a8:	8f 77       	andi	r24, 0x7F	; 127
    70aa:	03 c0       	rjmp	.+6      	; 0x70b2 <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    70ac:	80 91 80 00 	lds	r24, 0x0080
    70b0:	8f 7d       	andi	r24, 0xDF	; 223
    70b2:	80 93 80 00 	sts	0x0080, r24
    70b6:	10 c0       	rjmp	.+32     	; 0x70d8 <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    70b8:	84 b5       	in	r24, 0x24	; 36
    70ba:	8f 77       	andi	r24, 0x7F	; 127
    70bc:	02 c0       	rjmp	.+4      	; 0x70c2 <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    70be:	84 b5       	in	r24, 0x24	; 36
    70c0:	8f 7d       	andi	r24, 0xDF	; 223
    70c2:	84 bd       	out	0x24, r24	; 36
    70c4:	09 c0       	rjmp	.+18     	; 0x70d8 <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    70c6:	80 91 b0 00 	lds	r24, 0x00B0
    70ca:	8f 77       	andi	r24, 0x7F	; 127
    70cc:	03 c0       	rjmp	.+6      	; 0x70d4 <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    70ce:	80 91 b0 00 	lds	r24, 0x00B0
    70d2:	8f 7d       	andi	r24, 0xDF	; 223
    70d4:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    70d8:	e3 2f       	mov	r30, r19
    70da:	f0 e0       	ldi	r31, 0x00	; 0
    70dc:	ee 0f       	add	r30, r30
    70de:	ff 1f       	adc	r31, r31
    70e0:	e2 52       	subi	r30, 0x22	; 34
    70e2:	fb 4f       	sbci	r31, 0xFB	; 251
    70e4:	a5 91       	lpm	r26, Z+
    70e6:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    70e8:	2f b7       	in	r18, 0x3f	; 63
	cli();
    70ea:	f8 94       	cli

	if (val == LOW) {
    70ec:	66 23       	and	r22, r22
    70ee:	21 f4       	brne	.+8      	; 0x70f8 <digitalWrite+0x9e>
		*out &= ~bit;
    70f0:	8c 91       	ld	r24, X
    70f2:	90 95       	com	r25
    70f4:	89 23       	and	r24, r25
    70f6:	02 c0       	rjmp	.+4      	; 0x70fc <digitalWrite+0xa2>
	} else {
		*out |= bit;
    70f8:	8c 91       	ld	r24, X
    70fa:	89 2b       	or	r24, r25
    70fc:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    70fe:	2f bf       	out	0x3f, r18	; 63
    7100:	08 95       	ret

00007102 <serialEvent()>:
#if !defined(USART_RX_vect) && !defined(USART0_RX_vect) && \
    !defined(USART_RXC_vect)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    7102:	08 95       	ret

00007104 <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  ISR(USART_RX_vect)
    7104:	1f 92       	push	r1
    7106:	0f 92       	push	r0
    7108:	0f b6       	in	r0, 0x3f	; 63
    710a:	0f 92       	push	r0
    710c:	11 24       	eor	r1, r1
    710e:	2f 93       	push	r18
    7110:	3f 93       	push	r19
    7112:	4f 93       	push	r20
    7114:	8f 93       	push	r24
    7116:	9f 93       	push	r25
    7118:	ef 93       	push	r30
    711a:	ff 93       	push	r31
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#endif
  {
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
    711c:	80 91 c0 00 	lds	r24, 0x00C0
    7120:	82 fd       	sbrc	r24, 2
    7122:	1d c0       	rjmp	.+58     	; 0x715e <__vector_18+0x5a>
      unsigned char c = UDR0;
    7124:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    7128:	20 91 cf 04 	lds	r18, 0x04CF
    712c:	30 91 d0 04 	lds	r19, 0x04D0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    7130:	2f 5f       	subi	r18, 0xFF	; 255
    7132:	3f 4f       	sbci	r19, 0xFF	; 255
    7134:	2f 73       	andi	r18, 0x3F	; 63
    7136:	30 70       	andi	r19, 0x00	; 0
    7138:	80 91 d1 04 	lds	r24, 0x04D1
    713c:	90 91 d2 04 	lds	r25, 0x04D2
    7140:	28 17       	cp	r18, r24
    7142:	39 07       	cpc	r19, r25
    7144:	71 f0       	breq	.+28     	; 0x7162 <__vector_18+0x5e>
    buffer->buffer[buffer->head] = c;
    7146:	e0 91 cf 04 	lds	r30, 0x04CF
    714a:	f0 91 d0 04 	lds	r31, 0x04D0
    714e:	e1 57       	subi	r30, 0x71	; 113
    7150:	fb 4f       	sbci	r31, 0xFB	; 251
    7152:	40 83       	st	Z, r20
    buffer->head = i;
    7154:	30 93 d0 04 	sts	0x04D0, r19
    7158:	20 93 cf 04 	sts	0x04CF, r18
    715c:	02 c0       	rjmp	.+4      	; 0x7162 <__vector_18+0x5e>
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
      unsigned char c = UDR0;
      store_char(c, &rx_buffer);
    } else {
      unsigned char c = UDR0;
    715e:	80 91 c6 00 	lds	r24, 0x00C6
      unsigned char c = UDR;
    };
  #else
    #error UDR not defined
  #endif
  }
    7162:	ff 91       	pop	r31
    7164:	ef 91       	pop	r30
    7166:	9f 91       	pop	r25
    7168:	8f 91       	pop	r24
    716a:	4f 91       	pop	r20
    716c:	3f 91       	pop	r19
    716e:	2f 91       	pop	r18
    7170:	0f 90       	pop	r0
    7172:	0f be       	out	0x3f, r0	; 63
    7174:	0f 90       	pop	r0
    7176:	1f 90       	pop	r1
    7178:	18 95       	reti

0000717a <serialEventRun()>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    717a:	e0 91 23 05 	lds	r30, 0x0523
    717e:	f0 91 24 05 	lds	r31, 0x0524
    7182:	e0 5c       	subi	r30, 0xC0	; 192
    7184:	ff 4f       	sbci	r31, 0xFF	; 255
    7186:	81 91       	ld	r24, Z+
    7188:	91 91       	ld	r25, Z+
    718a:	20 81       	ld	r18, Z
    718c:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    718e:	82 1b       	sub	r24, r18
    7190:	93 0b       	sbc	r25, r19
    7192:	8f 73       	andi	r24, 0x3F	; 63
    7194:	90 70       	andi	r25, 0x00	; 0
    7196:	89 2b       	or	r24, r25
    7198:	11 f0       	breq	.+4      	; 0x719e <serialEventRun()+0x24>
    719a:	0e 94 81 38 	call	0x7102	; 0x7102 <serialEvent()>
    719e:	08 95       	ret

000071a0 <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
    71a0:	1f 92       	push	r1
    71a2:	0f 92       	push	r0
    71a4:	0f b6       	in	r0, 0x3f	; 63
    71a6:	0f 92       	push	r0
    71a8:	11 24       	eor	r1, r1
    71aa:	2f 93       	push	r18
    71ac:	3f 93       	push	r19
    71ae:	8f 93       	push	r24
    71b0:	9f 93       	push	r25
    71b2:	ef 93       	push	r30
    71b4:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    71b6:	20 91 13 05 	lds	r18, 0x0513
    71ba:	30 91 14 05 	lds	r19, 0x0514
    71be:	80 91 15 05 	lds	r24, 0x0515
    71c2:	90 91 16 05 	lds	r25, 0x0516
    71c6:	28 17       	cp	r18, r24
    71c8:	39 07       	cpc	r19, r25
    71ca:	31 f4       	brne	.+12     	; 0x71d8 <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    71cc:	80 91 c1 00 	lds	r24, 0x00C1
    71d0:	8f 7d       	andi	r24, 0xDF	; 223
    71d2:	80 93 c1 00 	sts	0x00C1, r24
    71d6:	14 c0       	rjmp	.+40     	; 0x7200 <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    71d8:	e0 91 15 05 	lds	r30, 0x0515
    71dc:	f0 91 16 05 	lds	r31, 0x0516
    71e0:	ed 52       	subi	r30, 0x2D	; 45
    71e2:	fb 4f       	sbci	r31, 0xFB	; 251
    71e4:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    71e6:	80 91 15 05 	lds	r24, 0x0515
    71ea:	90 91 16 05 	lds	r25, 0x0516
    71ee:	01 96       	adiw	r24, 0x01	; 1
    71f0:	8f 73       	andi	r24, 0x3F	; 63
    71f2:	90 70       	andi	r25, 0x00	; 0
    71f4:	90 93 16 05 	sts	0x0516, r25
    71f8:	80 93 15 05 	sts	0x0515, r24
	
  #if defined(UDR0)
    UDR0 = c;
    71fc:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    7200:	ff 91       	pop	r31
    7202:	ef 91       	pop	r30
    7204:	9f 91       	pop	r25
    7206:	8f 91       	pop	r24
    7208:	3f 91       	pop	r19
    720a:	2f 91       	pop	r18
    720c:	0f 90       	pop	r0
    720e:	0f be       	out	0x3f, r0	; 63
    7210:	0f 90       	pop	r0
    7212:	1f 90       	pop	r1
    7214:	18 95       	reti

00007216 <HardwareSerial::begin(unsigned long)>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    7216:	af 92       	push	r10
    7218:	bf 92       	push	r11
    721a:	df 92       	push	r13
    721c:	ef 92       	push	r14
    721e:	ff 92       	push	r15
    7220:	0f 93       	push	r16
    7222:	1f 93       	push	r17
    7224:	cf 93       	push	r28
    7226:	df 93       	push	r29
    7228:	ec 01       	movw	r28, r24
    722a:	7a 01       	movw	r14, r20
    722c:	8b 01       	movw	r16, r22
    722e:	dd 24       	eor	r13, r13
    7230:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    7232:	91 e0       	ldi	r25, 0x01	; 1
    7234:	a9 2e       	mov	r10, r25
    7236:	b1 2c       	mov	r11, r1
    7238:	ec 89       	ldd	r30, Y+20	; 0x14
    723a:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
    723c:	dd 20       	and	r13, r13
    723e:	69 f0       	breq	.+26     	; 0x725a <HardwareSerial::begin(unsigned long)+0x44>
    *_ucsra = 1 << _u2x;
    7240:	c5 01       	movw	r24, r10
    7242:	08 a0       	ldd	r0, Y+32	; 0x20
    7244:	02 c0       	rjmp	.+4      	; 0x724a <HardwareSerial::begin(unsigned long)+0x34>
    7246:	88 0f       	add	r24, r24
    7248:	99 1f       	adc	r25, r25
    724a:	0a 94       	dec	r0
    724c:	e2 f7       	brpl	.-8      	; 0x7246 <HardwareSerial::begin(unsigned long)+0x30>
    724e:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    7250:	60 e9       	ldi	r22, 0x90	; 144
    7252:	70 ed       	ldi	r23, 0xD0	; 208
    7254:	83 e0       	ldi	r24, 0x03	; 3
    7256:	90 e0       	ldi	r25, 0x00	; 0
    7258:	05 c0       	rjmp	.+10     	; 0x7264 <HardwareSerial::begin(unsigned long)+0x4e>
  } else {
    *_ucsra = 0;
    725a:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    725c:	68 e4       	ldi	r22, 0x48	; 72
    725e:	78 ee       	ldi	r23, 0xE8	; 232
    7260:	81 e0       	ldi	r24, 0x01	; 1
    7262:	90 e0       	ldi	r25, 0x00	; 0
    7264:	a8 01       	movw	r20, r16
    7266:	97 01       	movw	r18, r14
    7268:	0e 94 f3 3d 	call	0x7be6	; 0x7be6 <__udivmodsi4>
    726c:	21 50       	subi	r18, 0x01	; 1
    726e:	30 40       	sbci	r19, 0x00	; 0
    7270:	40 40       	sbci	r20, 0x00	; 0
    7272:	50 40       	sbci	r21, 0x00	; 0
    7274:	56 95       	lsr	r21
    7276:	47 95       	ror	r20
    7278:	37 95       	ror	r19
    727a:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    727c:	80 e1       	ldi	r24, 0x10	; 16
    727e:	20 30       	cpi	r18, 0x00	; 0
    7280:	38 07       	cpc	r19, r24
    7282:	20 f0       	brcs	.+8      	; 0x728c <HardwareSerial::begin(unsigned long)+0x76>
    7284:	dd 20       	and	r13, r13
    7286:	11 f0       	breq	.+4      	; 0x728c <HardwareSerial::begin(unsigned long)+0x76>
    7288:	dd 24       	eor	r13, r13
    728a:	d6 cf       	rjmp	.-84     	; 0x7238 <HardwareSerial::begin(unsigned long)+0x22>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    728c:	e8 89       	ldd	r30, Y+16	; 0x10
    728e:	f9 89       	ldd	r31, Y+17	; 0x11
    7290:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    7292:	ea 89       	ldd	r30, Y+18	; 0x12
    7294:	fb 89       	ldd	r31, Y+19	; 0x13
    7296:	20 83       	st	Z, r18

  transmitting = false;
    7298:	19 a2       	std	Y+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
    729a:	ee 89       	ldd	r30, Y+22	; 0x16
    729c:	ff 89       	ldd	r31, Y+23	; 0x17
    729e:	40 81       	ld	r20, Z
    72a0:	21 e0       	ldi	r18, 0x01	; 1
    72a2:	30 e0       	ldi	r19, 0x00	; 0
    72a4:	c9 01       	movw	r24, r18
    72a6:	0c 8c       	ldd	r0, Y+28	; 0x1c
    72a8:	02 c0       	rjmp	.+4      	; 0x72ae <HardwareSerial::begin(unsigned long)+0x98>
    72aa:	88 0f       	add	r24, r24
    72ac:	99 1f       	adc	r25, r25
    72ae:	0a 94       	dec	r0
    72b0:	e2 f7       	brpl	.-8      	; 0x72aa <HardwareSerial::begin(unsigned long)+0x94>
    72b2:	48 2b       	or	r20, r24
    72b4:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    72b6:	ee 89       	ldd	r30, Y+22	; 0x16
    72b8:	ff 89       	ldd	r31, Y+23	; 0x17
    72ba:	40 81       	ld	r20, Z
    72bc:	c9 01       	movw	r24, r18
    72be:	0d 8c       	ldd	r0, Y+29	; 0x1d
    72c0:	02 c0       	rjmp	.+4      	; 0x72c6 <HardwareSerial::begin(unsigned long)+0xb0>
    72c2:	88 0f       	add	r24, r24
    72c4:	99 1f       	adc	r25, r25
    72c6:	0a 94       	dec	r0
    72c8:	e2 f7       	brpl	.-8      	; 0x72c2 <HardwareSerial::begin(unsigned long)+0xac>
    72ca:	48 2b       	or	r20, r24
    72cc:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    72ce:	ee 89       	ldd	r30, Y+22	; 0x16
    72d0:	ff 89       	ldd	r31, Y+23	; 0x17
    72d2:	40 81       	ld	r20, Z
    72d4:	c9 01       	movw	r24, r18
    72d6:	0e 8c       	ldd	r0, Y+30	; 0x1e
    72d8:	02 c0       	rjmp	.+4      	; 0x72de <HardwareSerial::begin(unsigned long)+0xc8>
    72da:	88 0f       	add	r24, r24
    72dc:	99 1f       	adc	r25, r25
    72de:	0a 94       	dec	r0
    72e0:	e2 f7       	brpl	.-8      	; 0x72da <HardwareSerial::begin(unsigned long)+0xc4>
    72e2:	48 2b       	or	r20, r24
    72e4:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    72e6:	ee 89       	ldd	r30, Y+22	; 0x16
    72e8:	ff 89       	ldd	r31, Y+23	; 0x17
    72ea:	80 81       	ld	r24, Z
    72ec:	0f 8c       	ldd	r0, Y+31	; 0x1f
    72ee:	02 c0       	rjmp	.+4      	; 0x72f4 <HardwareSerial::begin(unsigned long)+0xde>
    72f0:	22 0f       	add	r18, r18
    72f2:	33 1f       	adc	r19, r19
    72f4:	0a 94       	dec	r0
    72f6:	e2 f7       	brpl	.-8      	; 0x72f0 <HardwareSerial::begin(unsigned long)+0xda>
    72f8:	20 95       	com	r18
    72fa:	28 23       	and	r18, r24
    72fc:	20 83       	st	Z, r18
}
    72fe:	df 91       	pop	r29
    7300:	cf 91       	pop	r28
    7302:	1f 91       	pop	r17
    7304:	0f 91       	pop	r16
    7306:	ff 90       	pop	r15
    7308:	ef 90       	pop	r14
    730a:	df 90       	pop	r13
    730c:	bf 90       	pop	r11
    730e:	af 90       	pop	r10
    7310:	08 95       	ret

00007312 <HardwareSerial::end()>:
  sbi(*_ucsrb, _txen);
  sbi(*_ucsrb, _rxcie);
  cbi(*_ucsrb, _udrie);
}

void HardwareSerial::end()
    7312:	cf 93       	push	r28
    7314:	df 93       	push	r29
    7316:	dc 01       	movw	r26, r24
{
  // wait for transmission of outgoing data
  while (_tx_buffer->head != _tx_buffer->tail)
    7318:	1e 96       	adiw	r26, 0x0e	; 14
    731a:	8d 91       	ld	r24, X+
    731c:	9c 91       	ld	r25, X
    731e:	1f 97       	sbiw	r26, 0x0f	; 15
    7320:	ec 01       	movw	r28, r24
    7322:	c0 5c       	subi	r28, 0xC0	; 192
    7324:	df 4f       	sbci	r29, 0xFF	; 255
    7326:	fc 01       	movw	r30, r24
    7328:	ee 5b       	subi	r30, 0xBE	; 190
    732a:	ff 4f       	sbci	r31, 0xFF	; 255
    732c:	28 81       	ld	r18, Y
    732e:	39 81       	ldd	r19, Y+1	; 0x01
    7330:	80 81       	ld	r24, Z
    7332:	91 81       	ldd	r25, Z+1	; 0x01
    7334:	28 17       	cp	r18, r24
    7336:	39 07       	cpc	r19, r25
    7338:	c9 f7       	brne	.-14     	; 0x732c <HardwareSerial::end()+0x1a>
    ;

  cbi(*_ucsrb, _rxen);
    733a:	56 96       	adiw	r26, 0x16	; 22
    733c:	ed 91       	ld	r30, X+
    733e:	fc 91       	ld	r31, X
    7340:	57 97       	sbiw	r26, 0x17	; 23
    7342:	40 81       	ld	r20, Z
    7344:	21 e0       	ldi	r18, 0x01	; 1
    7346:	30 e0       	ldi	r19, 0x00	; 0
    7348:	c9 01       	movw	r24, r18
    734a:	5c 96       	adiw	r26, 0x1c	; 28
    734c:	0c 90       	ld	r0, X
    734e:	5c 97       	sbiw	r26, 0x1c	; 28
    7350:	02 c0       	rjmp	.+4      	; 0x7356 <HardwareSerial::end()+0x44>
    7352:	88 0f       	add	r24, r24
    7354:	99 1f       	adc	r25, r25
    7356:	0a 94       	dec	r0
    7358:	e2 f7       	brpl	.-8      	; 0x7352 <HardwareSerial::end()+0x40>
    735a:	80 95       	com	r24
    735c:	84 23       	and	r24, r20
    735e:	80 83       	st	Z, r24
  cbi(*_ucsrb, _txen);
    7360:	56 96       	adiw	r26, 0x16	; 22
    7362:	ed 91       	ld	r30, X+
    7364:	fc 91       	ld	r31, X
    7366:	57 97       	sbiw	r26, 0x17	; 23
    7368:	40 81       	ld	r20, Z
    736a:	c9 01       	movw	r24, r18
    736c:	5d 96       	adiw	r26, 0x1d	; 29
    736e:	0c 90       	ld	r0, X
    7370:	5d 97       	sbiw	r26, 0x1d	; 29
    7372:	02 c0       	rjmp	.+4      	; 0x7378 <HardwareSerial::end()+0x66>
    7374:	88 0f       	add	r24, r24
    7376:	99 1f       	adc	r25, r25
    7378:	0a 94       	dec	r0
    737a:	e2 f7       	brpl	.-8      	; 0x7374 <HardwareSerial::end()+0x62>
    737c:	80 95       	com	r24
    737e:	84 23       	and	r24, r20
    7380:	80 83       	st	Z, r24
  cbi(*_ucsrb, _rxcie);  
    7382:	56 96       	adiw	r26, 0x16	; 22
    7384:	ed 91       	ld	r30, X+
    7386:	fc 91       	ld	r31, X
    7388:	57 97       	sbiw	r26, 0x17	; 23
    738a:	40 81       	ld	r20, Z
    738c:	c9 01       	movw	r24, r18
    738e:	5e 96       	adiw	r26, 0x1e	; 30
    7390:	0c 90       	ld	r0, X
    7392:	5e 97       	sbiw	r26, 0x1e	; 30
    7394:	02 c0       	rjmp	.+4      	; 0x739a <HardwareSerial::end()+0x88>
    7396:	88 0f       	add	r24, r24
    7398:	99 1f       	adc	r25, r25
    739a:	0a 94       	dec	r0
    739c:	e2 f7       	brpl	.-8      	; 0x7396 <HardwareSerial::end()+0x84>
    739e:	80 95       	com	r24
    73a0:	84 23       	and	r24, r20
    73a2:	80 83       	st	Z, r24
  cbi(*_ucsrb, _udrie);
    73a4:	56 96       	adiw	r26, 0x16	; 22
    73a6:	ed 91       	ld	r30, X+
    73a8:	fc 91       	ld	r31, X
    73aa:	57 97       	sbiw	r26, 0x17	; 23
    73ac:	80 81       	ld	r24, Z
    73ae:	5f 96       	adiw	r26, 0x1f	; 31
    73b0:	0c 90       	ld	r0, X
    73b2:	5f 97       	sbiw	r26, 0x1f	; 31
    73b4:	02 c0       	rjmp	.+4      	; 0x73ba <HardwareSerial::end()+0xa8>
    73b6:	22 0f       	add	r18, r18
    73b8:	33 1f       	adc	r19, r19
    73ba:	0a 94       	dec	r0
    73bc:	e2 f7       	brpl	.-8      	; 0x73b6 <HardwareSerial::end()+0xa4>
    73be:	20 95       	com	r18
    73c0:	28 23       	and	r18, r24
    73c2:	20 83       	st	Z, r18
  
  // clear any received data
  _rx_buffer->head = _rx_buffer->tail;
    73c4:	1c 96       	adiw	r26, 0x0c	; 12
    73c6:	ed 91       	ld	r30, X+
    73c8:	fc 91       	ld	r31, X
    73ca:	1d 97       	sbiw	r26, 0x0d	; 13
    73cc:	ee 5b       	subi	r30, 0xBE	; 190
    73ce:	ff 4f       	sbci	r31, 0xFF	; 255
    73d0:	80 81       	ld	r24, Z
    73d2:	91 81       	ldd	r25, Z+1	; 0x01
    73d4:	92 93       	st	-Z, r25
    73d6:	82 93       	st	-Z, r24
}
    73d8:	df 91       	pop	r29
    73da:	cf 91       	pop	r28
    73dc:	08 95       	ret

000073de <HardwareSerial::available()>:

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    73de:	dc 01       	movw	r26, r24
    73e0:	1c 96       	adiw	r26, 0x0c	; 12
    73e2:	ed 91       	ld	r30, X+
    73e4:	fc 91       	ld	r31, X
    73e6:	1d 97       	sbiw	r26, 0x0d	; 13
    73e8:	e0 5c       	subi	r30, 0xC0	; 192
    73ea:	ff 4f       	sbci	r31, 0xFF	; 255
    73ec:	21 91       	ld	r18, Z+
    73ee:	31 91       	ld	r19, Z+
    73f0:	80 81       	ld	r24, Z
    73f2:	91 81       	ldd	r25, Z+1	; 0x01
    73f4:	28 1b       	sub	r18, r24
    73f6:	39 0b       	sbc	r19, r25
    73f8:	2f 73       	andi	r18, 0x3F	; 63
    73fa:	30 70       	andi	r19, 0x00	; 0
}
    73fc:	c9 01       	movw	r24, r18
    73fe:	08 95       	ret

00007400 <HardwareSerial::peek()>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    7400:	dc 01       	movw	r26, r24
    7402:	1c 96       	adiw	r26, 0x0c	; 12
    7404:	ed 91       	ld	r30, X+
    7406:	fc 91       	ld	r31, X
    7408:	1d 97       	sbiw	r26, 0x0d	; 13
    740a:	e0 5c       	subi	r30, 0xC0	; 192
    740c:	ff 4f       	sbci	r31, 0xFF	; 255
    740e:	20 81       	ld	r18, Z
    7410:	31 81       	ldd	r19, Z+1	; 0x01
    7412:	e0 54       	subi	r30, 0x40	; 64
    7414:	f0 40       	sbci	r31, 0x00	; 0
    7416:	df 01       	movw	r26, r30
    7418:	ae 5b       	subi	r26, 0xBE	; 190
    741a:	bf 4f       	sbci	r27, 0xFF	; 255
    741c:	8d 91       	ld	r24, X+
    741e:	9c 91       	ld	r25, X
    7420:	11 97       	sbiw	r26, 0x01	; 1
    7422:	28 17       	cp	r18, r24
    7424:	39 07       	cpc	r19, r25
    7426:	19 f4       	brne	.+6      	; 0x742e <HardwareSerial::peek()+0x2e>
    7428:	2f ef       	ldi	r18, 0xFF	; 255
    742a:	3f ef       	ldi	r19, 0xFF	; 255
    742c:	07 c0       	rjmp	.+14     	; 0x743c <HardwareSerial::peek()+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    742e:	8d 91       	ld	r24, X+
    7430:	9c 91       	ld	r25, X
    7432:	e8 0f       	add	r30, r24
    7434:	f9 1f       	adc	r31, r25
    7436:	80 81       	ld	r24, Z
    7438:	28 2f       	mov	r18, r24
    743a:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    743c:	c9 01       	movw	r24, r18
    743e:	08 95       	ret

00007440 <HardwareSerial::read()>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    7440:	dc 01       	movw	r26, r24
    7442:	1c 96       	adiw	r26, 0x0c	; 12
    7444:	ed 91       	ld	r30, X+
    7446:	fc 91       	ld	r31, X
    7448:	1d 97       	sbiw	r26, 0x0d	; 13
    744a:	e0 5c       	subi	r30, 0xC0	; 192
    744c:	ff 4f       	sbci	r31, 0xFF	; 255
    744e:	20 81       	ld	r18, Z
    7450:	31 81       	ldd	r19, Z+1	; 0x01
    7452:	e0 54       	subi	r30, 0x40	; 64
    7454:	f0 40       	sbci	r31, 0x00	; 0
    7456:	df 01       	movw	r26, r30
    7458:	ae 5b       	subi	r26, 0xBE	; 190
    745a:	bf 4f       	sbci	r27, 0xFF	; 255
    745c:	8d 91       	ld	r24, X+
    745e:	9c 91       	ld	r25, X
    7460:	11 97       	sbiw	r26, 0x01	; 1
    7462:	28 17       	cp	r18, r24
    7464:	39 07       	cpc	r19, r25
    7466:	19 f4       	brne	.+6      	; 0x746e <HardwareSerial::read()+0x2e>
    7468:	2f ef       	ldi	r18, 0xFF	; 255
    746a:	3f ef       	ldi	r19, 0xFF	; 255
    746c:	10 c0       	rjmp	.+32     	; 0x748e <HardwareSerial::read()+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    746e:	8d 91       	ld	r24, X+
    7470:	9c 91       	ld	r25, X
    7472:	11 97       	sbiw	r26, 0x01	; 1
    7474:	e8 0f       	add	r30, r24
    7476:	f9 1f       	adc	r31, r25
    7478:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    747a:	8d 91       	ld	r24, X+
    747c:	9c 91       	ld	r25, X
    747e:	11 97       	sbiw	r26, 0x01	; 1
    7480:	01 96       	adiw	r24, 0x01	; 1
    7482:	8f 73       	andi	r24, 0x3F	; 63
    7484:	90 70       	andi	r25, 0x00	; 0
    7486:	11 96       	adiw	r26, 0x01	; 1
    7488:	9c 93       	st	X, r25
    748a:	8e 93       	st	-X, r24
    return c;
    748c:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    748e:	c9 01       	movw	r24, r18
    7490:	08 95       	ret

00007492 <HardwareSerial::flush()>:

void HardwareSerial::flush()
    7492:	dc 01       	movw	r26, r24
{
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
    7494:	91 96       	adiw	r26, 0x21	; 33
    7496:	8c 91       	ld	r24, X
    7498:	91 97       	sbiw	r26, 0x21	; 33
    749a:	88 23       	and	r24, r24
    749c:	39 f0       	breq	.+14     	; 0x74ac <HardwareSerial::flush()+0x1a>
    749e:	54 96       	adiw	r26, 0x14	; 20
    74a0:	ed 91       	ld	r30, X+
    74a2:	fc 91       	ld	r31, X
    74a4:	55 97       	sbiw	r26, 0x15	; 21
    74a6:	80 81       	ld	r24, Z
    74a8:	86 ff       	sbrs	r24, 6
    74aa:	f9 cf       	rjmp	.-14     	; 0x749e <HardwareSerial::flush()+0xc>
  transmitting = false;
    74ac:	91 96       	adiw	r26, 0x21	; 33
    74ae:	1c 92       	st	X, r1
}
    74b0:	08 95       	ret

000074b2 <HardwareSerial::write(unsigned char)>:

size_t HardwareSerial::write(uint8_t c)
    74b2:	cf 93       	push	r28
    74b4:	df 93       	push	r29
    74b6:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    74b8:	ee 85       	ldd	r30, Y+14	; 0x0e
    74ba:	ff 85       	ldd	r31, Y+15	; 0x0f
    74bc:	e0 5c       	subi	r30, 0xC0	; 192
    74be:	ff 4f       	sbci	r31, 0xFF	; 255
    74c0:	20 81       	ld	r18, Z
    74c2:	31 81       	ldd	r19, Z+1	; 0x01
    74c4:	e0 54       	subi	r30, 0x40	; 64
    74c6:	f0 40       	sbci	r31, 0x00	; 0
    74c8:	2f 5f       	subi	r18, 0xFF	; 255
    74ca:	3f 4f       	sbci	r19, 0xFF	; 255
    74cc:	2f 73       	andi	r18, 0x3F	; 63
    74ce:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    74d0:	df 01       	movw	r26, r30
    74d2:	ae 5b       	subi	r26, 0xBE	; 190
    74d4:	bf 4f       	sbci	r27, 0xFF	; 255
    74d6:	8d 91       	ld	r24, X+
    74d8:	9c 91       	ld	r25, X
    74da:	11 97       	sbiw	r26, 0x01	; 1
    74dc:	28 17       	cp	r18, r24
    74de:	39 07       	cpc	r19, r25
    74e0:	d1 f3       	breq	.-12     	; 0x74d6 <HardwareSerial::write(unsigned char)+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    74e2:	e0 5c       	subi	r30, 0xC0	; 192
    74e4:	ff 4f       	sbci	r31, 0xFF	; 255
    74e6:	80 81       	ld	r24, Z
    74e8:	91 81       	ldd	r25, Z+1	; 0x01
    74ea:	e0 54       	subi	r30, 0x40	; 64
    74ec:	f0 40       	sbci	r31, 0x00	; 0
    74ee:	e8 0f       	add	r30, r24
    74f0:	f9 1f       	adc	r31, r25
    74f2:	60 83       	st	Z, r22
  _tx_buffer->head = i;
    74f4:	ee 85       	ldd	r30, Y+14	; 0x0e
    74f6:	ff 85       	ldd	r31, Y+15	; 0x0f
    74f8:	e0 5c       	subi	r30, 0xC0	; 192
    74fa:	ff 4f       	sbci	r31, 0xFF	; 255
    74fc:	31 83       	std	Z+1, r19	; 0x01
    74fe:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    7500:	ee 89       	ldd	r30, Y+22	; 0x16
    7502:	ff 89       	ldd	r31, Y+23	; 0x17
    7504:	20 81       	ld	r18, Z
    7506:	81 e0       	ldi	r24, 0x01	; 1
    7508:	90 e0       	ldi	r25, 0x00	; 0
    750a:	0f 8c       	ldd	r0, Y+31	; 0x1f
    750c:	02 c0       	rjmp	.+4      	; 0x7512 <HardwareSerial::write(unsigned char)+0x60>
    750e:	88 0f       	add	r24, r24
    7510:	99 1f       	adc	r25, r25
    7512:	0a 94       	dec	r0
    7514:	e2 f7       	brpl	.-8      	; 0x750e <HardwareSerial::write(unsigned char)+0x5c>
    7516:	28 2b       	or	r18, r24
    7518:	20 83       	st	Z, r18
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
    751a:	81 e0       	ldi	r24, 0x01	; 1
    751c:	89 a3       	std	Y+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
    751e:	ec 89       	ldd	r30, Y+20	; 0x14
    7520:	fd 89       	ldd	r31, Y+21	; 0x15
    7522:	80 81       	ld	r24, Z
    7524:	80 64       	ori	r24, 0x40	; 64
    7526:	80 83       	st	Z, r24
  
  return 1;
}
    7528:	81 e0       	ldi	r24, 0x01	; 1
    752a:	90 e0       	ldi	r25, 0x00	; 0
    752c:	df 91       	pop	r29
    752e:	cf 91       	pop	r28
    7530:	08 95       	ret

00007532 <global constructors keyed to rx_buffer>:
  public:
    Print() : write_error(0) {}
    7532:	10 92 1a 05 	sts	0x051A, r1
    7536:	10 92 19 05 	sts	0x0519, r1
    753a:	88 ee       	ldi	r24, 0xE8	; 232
    753c:	93 e0       	ldi	r25, 0x03	; 3
    753e:	a0 e0       	ldi	r26, 0x00	; 0
    7540:	b0 e0       	ldi	r27, 0x00	; 0
    7542:	80 93 1b 05 	sts	0x051B, r24
    7546:	90 93 1c 05 	sts	0x051C, r25
    754a:	a0 93 1d 05 	sts	0x051D, r26
    754e:	b0 93 1e 05 	sts	0x051E, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    7552:	86 e0       	ldi	r24, 0x06	; 6
    7554:	92 e0       	ldi	r25, 0x02	; 2
    7556:	90 93 18 05 	sts	0x0518, r25
    755a:	80 93 17 05 	sts	0x0517, r24
{
  _rx_buffer = rx_buffer;
    755e:	8f e8       	ldi	r24, 0x8F	; 143
    7560:	94 e0       	ldi	r25, 0x04	; 4
    7562:	90 93 24 05 	sts	0x0524, r25
    7566:	80 93 23 05 	sts	0x0523, r24
  _tx_buffer = tx_buffer;
    756a:	83 ed       	ldi	r24, 0xD3	; 211
    756c:	94 e0       	ldi	r25, 0x04	; 4
    756e:	90 93 26 05 	sts	0x0526, r25
    7572:	80 93 25 05 	sts	0x0525, r24
  _ubrrh = ubrrh;
    7576:	85 ec       	ldi	r24, 0xC5	; 197
    7578:	90 e0       	ldi	r25, 0x00	; 0
    757a:	90 93 28 05 	sts	0x0528, r25
    757e:	80 93 27 05 	sts	0x0527, r24
  _ubrrl = ubrrl;
    7582:	84 ec       	ldi	r24, 0xC4	; 196
    7584:	90 e0       	ldi	r25, 0x00	; 0
    7586:	90 93 2a 05 	sts	0x052A, r25
    758a:	80 93 29 05 	sts	0x0529, r24
  _ucsra = ucsra;
    758e:	80 ec       	ldi	r24, 0xC0	; 192
    7590:	90 e0       	ldi	r25, 0x00	; 0
    7592:	90 93 2c 05 	sts	0x052C, r25
    7596:	80 93 2b 05 	sts	0x052B, r24
  _ucsrb = ucsrb;
    759a:	81 ec       	ldi	r24, 0xC1	; 193
    759c:	90 e0       	ldi	r25, 0x00	; 0
    759e:	90 93 2e 05 	sts	0x052E, r25
    75a2:	80 93 2d 05 	sts	0x052D, r24
  _ucsrc = ucsrc;
    75a6:	82 ec       	ldi	r24, 0xC2	; 194
    75a8:	90 e0       	ldi	r25, 0x00	; 0
    75aa:	90 93 30 05 	sts	0x0530, r25
    75ae:	80 93 2f 05 	sts	0x052F, r24
  _udr = udr;
    75b2:	86 ec       	ldi	r24, 0xC6	; 198
    75b4:	90 e0       	ldi	r25, 0x00	; 0
    75b6:	90 93 32 05 	sts	0x0532, r25
    75ba:	80 93 31 05 	sts	0x0531, r24
  _rxen = rxen;
    75be:	84 e0       	ldi	r24, 0x04	; 4
    75c0:	80 93 33 05 	sts	0x0533, r24
  _txen = txen;
    75c4:	83 e0       	ldi	r24, 0x03	; 3
    75c6:	80 93 34 05 	sts	0x0534, r24
  _rxcie = rxcie;
    75ca:	87 e0       	ldi	r24, 0x07	; 7
    75cc:	80 93 35 05 	sts	0x0535, r24
  _udrie = udrie;
    75d0:	85 e0       	ldi	r24, 0x05	; 5
    75d2:	80 93 36 05 	sts	0x0536, r24
  _u2x = u2x;
    75d6:	81 e0       	ldi	r24, 0x01	; 1
    75d8:	80 93 37 05 	sts	0x0537, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    75dc:	08 95       	ret

000075de <main>:
#include <Arduino.h>

int main(void)
    75de:	cf 93       	push	r28
    75e0:	df 93       	push	r29
{
	init();
    75e2:	0e 94 f1 3c 	call	0x79e2	; 0x79e2 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    75e6:	0e 94 38 30 	call	0x6070	; 0x6070 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    75ea:	cd eb       	ldi	r28, 0xBD	; 189
    75ec:	d8 e3       	ldi	r29, 0x38	; 56
#endif
	
	setup();
    
	for (;;) {
		loop();
    75ee:	0e 94 63 2f 	call	0x5ec6	; 0x5ec6 <loop>
		if (serialEventRun) serialEventRun();
    75f2:	20 97       	sbiw	r28, 0x00	; 0
    75f4:	e1 f3       	breq	.-8      	; 0x75ee <main+0x10>
    75f6:	0e 94 bd 38 	call	0x717a	; 0x717a <serialEventRun()>
    75fa:	f9 cf       	rjmp	.-14     	; 0x75ee <main+0x10>

000075fc <__cxa_guard_acquire>:
void operator delete[](void * ptr)
{
  free(ptr);
}

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
    75fc:	fc 01       	movw	r30, r24
    75fe:	20 e0       	ldi	r18, 0x00	; 0
    7600:	30 e0       	ldi	r19, 0x00	; 0
    7602:	80 81       	ld	r24, Z
    7604:	88 23       	and	r24, r24
    7606:	11 f4       	brne	.+4      	; 0x760c <__cxa_guard_acquire+0x10>
    7608:	21 e0       	ldi	r18, 0x01	; 1
    760a:	30 e0       	ldi	r19, 0x00	; 0
    760c:	c9 01       	movw	r24, r18
    760e:	08 95       	ret

00007610 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
    7610:	fc 01       	movw	r30, r24
    7612:	81 e0       	ldi	r24, 0x01	; 1
    7614:	80 83       	st	Z, r24
    7616:	08 95       	ret

00007618 <Print::write(unsigned char const*, unsigned int)>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    7618:	cf 92       	push	r12
    761a:	df 92       	push	r13
    761c:	ef 92       	push	r14
    761e:	ff 92       	push	r15
    7620:	0f 93       	push	r16
    7622:	1f 93       	push	r17
    7624:	cf 93       	push	r28
    7626:	df 93       	push	r29
    7628:	7c 01       	movw	r14, r24
    762a:	6b 01       	movw	r12, r22
    762c:	8a 01       	movw	r16, r20
    762e:	c0 e0       	ldi	r28, 0x00	; 0
    7630:	d0 e0       	ldi	r29, 0x00	; 0
    7632:	0f c0       	rjmp	.+30     	; 0x7652 <Print::write(unsigned char const*, unsigned int)+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    7634:	d6 01       	movw	r26, r12
    7636:	6d 91       	ld	r22, X+
    7638:	6d 01       	movw	r12, r26
    763a:	d7 01       	movw	r26, r14
    763c:	ed 91       	ld	r30, X+
    763e:	fc 91       	ld	r31, X
    7640:	01 90       	ld	r0, Z+
    7642:	f0 81       	ld	r31, Z
    7644:	e0 2d       	mov	r30, r0
    7646:	c7 01       	movw	r24, r14
    7648:	09 95       	icall
    764a:	c8 0f       	add	r28, r24
    764c:	d9 1f       	adc	r29, r25
    764e:	01 50       	subi	r16, 0x01	; 1
    7650:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    7652:	01 15       	cp	r16, r1
    7654:	11 05       	cpc	r17, r1
    7656:	71 f7       	brne	.-36     	; 0x7634 <Print::write(unsigned char const*, unsigned int)+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    7658:	ce 01       	movw	r24, r28
    765a:	df 91       	pop	r29
    765c:	cf 91       	pop	r28
    765e:	1f 91       	pop	r17
    7660:	0f 91       	pop	r16
    7662:	ff 90       	pop	r15
    7664:	ef 90       	pop	r14
    7666:	df 90       	pop	r13
    7668:	cf 90       	pop	r12
    766a:	08 95       	ret

0000766c <Print::print(__FlashStringHelper const*)>:

size_t Print::print(const __FlashStringHelper *ifsh)
    766c:	ef 92       	push	r14
    766e:	ff 92       	push	r15
    7670:	0f 93       	push	r16
    7672:	1f 93       	push	r17
    7674:	cf 93       	push	r28
    7676:	df 93       	push	r29
    7678:	7c 01       	movw	r14, r24
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
    767a:	8b 01       	movw	r16, r22
    767c:	c0 e0       	ldi	r28, 0x00	; 0
    767e:	d0 e0       	ldi	r29, 0x00	; 0
    7680:	f8 01       	movw	r30, r16
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    7682:	0f 5f       	subi	r16, 0xFF	; 255
    7684:	1f 4f       	sbci	r17, 0xFF	; 255
    7686:	64 91       	lpm	r22, Z+
    if (c == 0) break;
    7688:	66 23       	and	r22, r22
    768a:	59 f0       	breq	.+22     	; 0x76a2 <Print::print(__FlashStringHelper const*)+0x36>
    n += write(c);
    768c:	d7 01       	movw	r26, r14
    768e:	ed 91       	ld	r30, X+
    7690:	fc 91       	ld	r31, X
    7692:	01 90       	ld	r0, Z+
    7694:	f0 81       	ld	r31, Z
    7696:	e0 2d       	mov	r30, r0
    7698:	c7 01       	movw	r24, r14
    769a:	09 95       	icall
    769c:	c8 0f       	add	r28, r24
    769e:	d9 1f       	adc	r29, r25
    76a0:	ef cf       	rjmp	.-34     	; 0x7680 <Print::print(__FlashStringHelper const*)+0x14>
  }
  return n;
}
    76a2:	ce 01       	movw	r24, r28
    76a4:	df 91       	pop	r29
    76a6:	cf 91       	pop	r28
    76a8:	1f 91       	pop	r17
    76aa:	0f 91       	pop	r16
    76ac:	ff 90       	pop	r15
    76ae:	ef 90       	pop	r14
    76b0:	08 95       	ret

000076b2 <Print::print(char)>:
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
    76b2:	dc 01       	movw	r26, r24
{
  return write(c);
    76b4:	ed 91       	ld	r30, X+
    76b6:	fc 91       	ld	r31, X
    76b8:	01 90       	ld	r0, Z+
    76ba:	f0 81       	ld	r31, Z
    76bc:	e0 2d       	mov	r30, r0
    76be:	09 95       	icall
}
    76c0:	08 95       	ret

000076c2 <Print::println()>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
    76c2:	ef 92       	push	r14
    76c4:	ff 92       	push	r15
    76c6:	0f 93       	push	r16
    76c8:	1f 93       	push	r17
    76ca:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    76cc:	dc 01       	movw	r26, r24
    76ce:	ed 91       	ld	r30, X+
    76d0:	fc 91       	ld	r31, X
    76d2:	01 90       	ld	r0, Z+
    76d4:	f0 81       	ld	r31, Z
    76d6:	e0 2d       	mov	r30, r0
    76d8:	6d e0       	ldi	r22, 0x0D	; 13
    76da:	09 95       	icall
    76dc:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    76de:	d8 01       	movw	r26, r16
    76e0:	ed 91       	ld	r30, X+
    76e2:	fc 91       	ld	r31, X
    76e4:	01 90       	ld	r0, Z+
    76e6:	f0 81       	ld	r31, Z
    76e8:	e0 2d       	mov	r30, r0
    76ea:	c8 01       	movw	r24, r16
    76ec:	6a e0       	ldi	r22, 0x0A	; 10
    76ee:	09 95       	icall
    76f0:	9c 01       	movw	r18, r24
    76f2:	2e 0d       	add	r18, r14
    76f4:	3f 1d       	adc	r19, r15
    76f6:	c9 01       	movw	r24, r18
    76f8:	1f 91       	pop	r17
    76fa:	0f 91       	pop	r16
    76fc:	ff 90       	pop	r15
    76fe:	ef 90       	pop	r14
    7700:	08 95       	ret

00007702 <Print::println(__FlashStringHelper const*)>:
size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
    7702:	ef 92       	push	r14
    7704:	ff 92       	push	r15
    7706:	0f 93       	push	r16
    7708:	1f 93       	push	r17
    770a:	7c 01       	movw	r14, r24
{
  size_t n = print(ifsh);
    770c:	0e 94 36 3b 	call	0x766c	; 0x766c <Print::print(__FlashStringHelper const*)>
    7710:	8c 01       	movw	r16, r24
  n += println();
    7712:	c7 01       	movw	r24, r14
    7714:	0e 94 61 3b 	call	0x76c2	; 0x76c2 <Print::println()>
    7718:	9c 01       	movw	r18, r24
    771a:	20 0f       	add	r18, r16
    771c:	31 1f       	adc	r19, r17
  return n;
}
    771e:	c9 01       	movw	r24, r18
    7720:	1f 91       	pop	r17
    7722:	0f 91       	pop	r16
    7724:	ff 90       	pop	r15
    7726:	ef 90       	pop	r14
    7728:	08 95       	ret

0000772a <Print::write(char const*)>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    772a:	cf 93       	push	r28
    772c:	df 93       	push	r29
    772e:	ec 01       	movw	r28, r24
      if (str == NULL) return 0;
    7730:	61 15       	cp	r22, r1
    7732:	71 05       	cpc	r23, r1
    7734:	19 f4       	brne	.+6      	; 0x773c <Print::write(char const*)+0x12>
    7736:	20 e0       	ldi	r18, 0x00	; 0
    7738:	30 e0       	ldi	r19, 0x00	; 0
    773a:	0f c0       	rjmp	.+30     	; 0x775a <Print::write(char const*)+0x30>
      return write((const uint8_t *)str, strlen(str));
    773c:	db 01       	movw	r26, r22
    773e:	0d 90       	ld	r0, X+
    7740:	00 20       	and	r0, r0
    7742:	e9 f7       	brne	.-6      	; 0x773e <Print::write(char const*)+0x14>
    7744:	11 97       	sbiw	r26, 0x01	; 1
    7746:	a6 1b       	sub	r26, r22
    7748:	b7 0b       	sbc	r27, r23
    774a:	e8 81       	ld	r30, Y
    774c:	f9 81       	ldd	r31, Y+1	; 0x01
    774e:	02 80       	ldd	r0, Z+2	; 0x02
    7750:	f3 81       	ldd	r31, Z+3	; 0x03
    7752:	e0 2d       	mov	r30, r0
    7754:	ad 01       	movw	r20, r26
    7756:	09 95       	icall
    7758:	9c 01       	movw	r18, r24
    }
    775a:	c9 01       	movw	r24, r18
    775c:	df 91       	pop	r29
    775e:	cf 91       	pop	r28
    7760:	08 95       	ret

00007762 <Print::printNumber(unsigned long, unsigned char)>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    7762:	4f 92       	push	r4
    7764:	5f 92       	push	r5
    7766:	7f 92       	push	r7
    7768:	8f 92       	push	r8
    776a:	9f 92       	push	r9
    776c:	af 92       	push	r10
    776e:	bf 92       	push	r11
    7770:	cf 92       	push	r12
    7772:	df 92       	push	r13
    7774:	ef 92       	push	r14
    7776:	ff 92       	push	r15
    7778:	0f 93       	push	r16
    777a:	1f 93       	push	r17
    777c:	df 93       	push	r29
    777e:	cf 93       	push	r28
    7780:	cd b7       	in	r28, 0x3d	; 61
    7782:	de b7       	in	r29, 0x3e	; 62
    7784:	a1 97       	sbiw	r28, 0x21	; 33
    7786:	0f b6       	in	r0, 0x3f	; 63
    7788:	f8 94       	cli
    778a:	de bf       	out	0x3e, r29	; 62
    778c:	0f be       	out	0x3f, r0	; 63
    778e:	cd bf       	out	0x3d, r28	; 61
    7790:	2c 01       	movw	r4, r24
    7792:	74 2e       	mov	r7, r20
    7794:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    7796:	22 30       	cpi	r18, 0x02	; 2
    7798:	08 f4       	brcc	.+2      	; 0x779c <Print::printNumber(unsigned long, unsigned char)+0x3a>
    779a:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    779c:	19 a2       	std	Y+33, r1	; 0x21
    779e:	31 e2       	ldi	r19, 0x21	; 33
    77a0:	c3 2e       	mov	r12, r19
    77a2:	d1 2c       	mov	r13, r1
    77a4:	cc 0e       	add	r12, r28
    77a6:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    77a8:	82 2e       	mov	r8, r18
    77aa:	99 24       	eor	r9, r9
    77ac:	aa 24       	eor	r10, r10
    77ae:	bb 24       	eor	r11, r11
    77b0:	67 2d       	mov	r22, r7
    77b2:	75 2f       	mov	r23, r21
    77b4:	a5 01       	movw	r20, r10
    77b6:	94 01       	movw	r18, r8
    77b8:	0e 94 f3 3d 	call	0x7be6	; 0x7be6 <__udivmodsi4>
    77bc:	79 01       	movw	r14, r18
    77be:	8a 01       	movw	r16, r20
    char c = m - base * n;
    77c0:	c8 01       	movw	r24, r16
    77c2:	b7 01       	movw	r22, r14
    77c4:	a5 01       	movw	r20, r10
    77c6:	94 01       	movw	r18, r8
    77c8:	0e 94 ad 3d 	call	0x7b5a	; 0x7b5a <__mulsi3>
    77cc:	47 2d       	mov	r20, r7
    77ce:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    77d0:	08 94       	sec
    77d2:	c1 08       	sbc	r12, r1
    77d4:	d1 08       	sbc	r13, r1
    77d6:	4a 30       	cpi	r20, 0x0A	; 10
    77d8:	14 f4       	brge	.+4      	; 0x77de <Print::printNumber(unsigned long, unsigned char)+0x7c>
    77da:	40 5d       	subi	r20, 0xD0	; 208
    77dc:	01 c0       	rjmp	.+2      	; 0x77e0 <Print::printNumber(unsigned long, unsigned char)+0x7e>
    77de:	49 5c       	subi	r20, 0xC9	; 201
    77e0:	f6 01       	movw	r30, r12
    77e2:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    77e4:	e1 14       	cp	r14, r1
    77e6:	f1 04       	cpc	r15, r1
    77e8:	01 05       	cpc	r16, r1
    77ea:	11 05       	cpc	r17, r1
    77ec:	21 f0       	breq	.+8      	; 0x77f6 <Print::printNumber(unsigned long, unsigned char)+0x94>
    77ee:	7e 2c       	mov	r7, r14
    77f0:	5f 2d       	mov	r21, r15
    77f2:	c8 01       	movw	r24, r16
    77f4:	dd cf       	rjmp	.-70     	; 0x77b0 <Print::printNumber(unsigned long, unsigned char)+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    77f6:	c2 01       	movw	r24, r4
    77f8:	b6 01       	movw	r22, r12
    77fa:	0e 94 95 3b 	call	0x772a	; 0x772a <Print::write(char const*)>
}
    77fe:	a1 96       	adiw	r28, 0x21	; 33
    7800:	0f b6       	in	r0, 0x3f	; 63
    7802:	f8 94       	cli
    7804:	de bf       	out	0x3e, r29	; 62
    7806:	0f be       	out	0x3f, r0	; 63
    7808:	cd bf       	out	0x3d, r28	; 61
    780a:	cf 91       	pop	r28
    780c:	df 91       	pop	r29
    780e:	1f 91       	pop	r17
    7810:	0f 91       	pop	r16
    7812:	ff 90       	pop	r15
    7814:	ef 90       	pop	r14
    7816:	df 90       	pop	r13
    7818:	cf 90       	pop	r12
    781a:	bf 90       	pop	r11
    781c:	af 90       	pop	r10
    781e:	9f 90       	pop	r9
    7820:	8f 90       	pop	r8
    7822:	7f 90       	pop	r7
    7824:	5f 90       	pop	r5
    7826:	4f 90       	pop	r4
    7828:	08 95       	ret

0000782a <Print::print(unsigned long, int)>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
    782a:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
    782c:	21 15       	cp	r18, r1
    782e:	31 05       	cpc	r19, r1
    7830:	41 f4       	brne	.+16     	; 0x7842 <Print::print(unsigned long, int)+0x18>
    7832:	ed 91       	ld	r30, X+
    7834:	fc 91       	ld	r31, X
    7836:	01 90       	ld	r0, Z+
    7838:	f0 81       	ld	r31, Z
    783a:	e0 2d       	mov	r30, r0
    783c:	64 2f       	mov	r22, r20
    783e:	09 95       	icall
    7840:	08 95       	ret
  else return printNumber(n, base);
    7842:	0e 94 b1 3b 	call	0x7762	; 0x7762 <Print::printNumber(unsigned long, unsigned char)>
}
    7846:	08 95       	ret

00007848 <Print::print(unsigned int, int)>:
size_t Print::print(int n, int base)
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
    7848:	ef 92       	push	r14
    784a:	ff 92       	push	r15
    784c:	0f 93       	push	r16
    784e:	1f 93       	push	r17
    7850:	9a 01       	movw	r18, r20
{
  return print((unsigned long) n, base);
    7852:	7b 01       	movw	r14, r22
    7854:	00 e0       	ldi	r16, 0x00	; 0
    7856:	10 e0       	ldi	r17, 0x00	; 0
    7858:	b8 01       	movw	r22, r16
    785a:	a7 01       	movw	r20, r14
    785c:	0e 94 15 3c 	call	0x782a	; 0x782a <Print::print(unsigned long, int)>
}
    7860:	1f 91       	pop	r17
    7862:	0f 91       	pop	r16
    7864:	ff 90       	pop	r15
    7866:	ef 90       	pop	r14
    7868:	08 95       	ret

0000786a <Print::print(unsigned char, int)>:
size_t Print::print(char c)
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
    786a:	ef 92       	push	r14
    786c:	ff 92       	push	r15
    786e:	0f 93       	push	r16
    7870:	1f 93       	push	r17
    7872:	9a 01       	movw	r18, r20
{
  return print((unsigned long) b, base);
    7874:	e6 2e       	mov	r14, r22
    7876:	ff 24       	eor	r15, r15
    7878:	00 e0       	ldi	r16, 0x00	; 0
    787a:	10 e0       	ldi	r17, 0x00	; 0
    787c:	b8 01       	movw	r22, r16
    787e:	a7 01       	movw	r20, r14
    7880:	0e 94 15 3c 	call	0x782a	; 0x782a <Print::print(unsigned long, int)>
}
    7884:	1f 91       	pop	r17
    7886:	0f 91       	pop	r16
    7888:	ff 90       	pop	r15
    788a:	ef 90       	pop	r14
    788c:	08 95       	ret

0000788e <Print::print(long, int)>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
    788e:	cf 92       	push	r12
    7890:	df 92       	push	r13
    7892:	ef 92       	push	r14
    7894:	ff 92       	push	r15
    7896:	0f 93       	push	r16
    7898:	1f 93       	push	r17
    789a:	cf 93       	push	r28
    789c:	df 93       	push	r29
    789e:	ec 01       	movw	r28, r24
    78a0:	6a 01       	movw	r12, r20
    78a2:	7b 01       	movw	r14, r22
{
  if (base == 0) {
    78a4:	21 15       	cp	r18, r1
    78a6:	31 05       	cpc	r19, r1
    78a8:	41 f4       	brne	.+16     	; 0x78ba <Print::print(long, int)+0x2c>
    return write(n);
    78aa:	e8 81       	ld	r30, Y
    78ac:	f9 81       	ldd	r31, Y+1	; 0x01
    78ae:	01 90       	ld	r0, Z+
    78b0:	f0 81       	ld	r31, Z
    78b2:	e0 2d       	mov	r30, r0
    78b4:	64 2f       	mov	r22, r20
    78b6:	09 95       	icall
    78b8:	1f c0       	rjmp	.+62     	; 0x78f8 <Print::print(long, int)+0x6a>
  } else if (base == 10) {
    78ba:	2a 30       	cpi	r18, 0x0A	; 10
    78bc:	31 05       	cpc	r19, r1
    78be:	d1 f4       	brne	.+52     	; 0x78f4 <Print::print(long, int)+0x66>
    if (n < 0) {
    78c0:	77 ff       	sbrs	r23, 7
    78c2:	17 c0       	rjmp	.+46     	; 0x78f2 <Print::print(long, int)+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    78c4:	e8 81       	ld	r30, Y
    78c6:	f9 81       	ldd	r31, Y+1	; 0x01
    78c8:	01 90       	ld	r0, Z+
    78ca:	f0 81       	ld	r31, Z
    78cc:	e0 2d       	mov	r30, r0
    78ce:	6d e2       	ldi	r22, 0x2D	; 45
    78d0:	09 95       	icall
    78d2:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    78d4:	44 27       	eor	r20, r20
    78d6:	55 27       	eor	r21, r21
    78d8:	ba 01       	movw	r22, r20
    78da:	4c 19       	sub	r20, r12
    78dc:	5d 09       	sbc	r21, r13
    78de:	6e 09       	sbc	r22, r14
    78e0:	7f 09       	sbc	r23, r15
    78e2:	ce 01       	movw	r24, r28
    78e4:	2a e0       	ldi	r18, 0x0A	; 10
    78e6:	0e 94 b1 3b 	call	0x7762	; 0x7762 <Print::printNumber(unsigned long, unsigned char)>
    78ea:	98 01       	movw	r18, r16
    78ec:	28 0f       	add	r18, r24
    78ee:	39 1f       	adc	r19, r25
    78f0:	04 c0       	rjmp	.+8      	; 0x78fa <Print::print(long, int)+0x6c>
    }
    return printNumber(n, 10);
    78f2:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    78f4:	0e 94 b1 3b 	call	0x7762	; 0x7762 <Print::printNumber(unsigned long, unsigned char)>
    78f8:	9c 01       	movw	r18, r24
  }
}
    78fa:	c9 01       	movw	r24, r18
    78fc:	df 91       	pop	r29
    78fe:	cf 91       	pop	r28
    7900:	1f 91       	pop	r17
    7902:	0f 91       	pop	r16
    7904:	ff 90       	pop	r15
    7906:	ef 90       	pop	r14
    7908:	df 90       	pop	r13
    790a:	cf 90       	pop	r12
    790c:	08 95       	ret

0000790e <Print::print(int, int)>:
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
    790e:	ef 92       	push	r14
    7910:	ff 92       	push	r15
    7912:	0f 93       	push	r16
    7914:	1f 93       	push	r17
    7916:	7b 01       	movw	r14, r22
    7918:	9a 01       	movw	r18, r20
{
  return print((long) n, base);
    791a:	00 27       	eor	r16, r16
    791c:	f7 fc       	sbrc	r15, 7
    791e:	00 95       	com	r16
    7920:	10 2f       	mov	r17, r16
    7922:	b8 01       	movw	r22, r16
    7924:	a7 01       	movw	r20, r14
    7926:	0e 94 47 3c 	call	0x788e	; 0x788e <Print::print(long, int)>
}
    792a:	1f 91       	pop	r17
    792c:	0f 91       	pop	r16
    792e:	ff 90       	pop	r15
    7930:	ef 90       	pop	r14
    7932:	08 95       	ret

00007934 <Print::print(char const*)>:
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    7934:	0e 94 95 3b 	call	0x772a	; 0x772a <Print::write(char const*)>
}
    7938:	08 95       	ret

0000793a <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    793a:	1f 92       	push	r1
    793c:	0f 92       	push	r0
    793e:	0f b6       	in	r0, 0x3f	; 63
    7940:	0f 92       	push	r0
    7942:	11 24       	eor	r1, r1
    7944:	2f 93       	push	r18
    7946:	3f 93       	push	r19
    7948:	4f 93       	push	r20
    794a:	5f 93       	push	r21
    794c:	6f 93       	push	r22
    794e:	7f 93       	push	r23
    7950:	8f 93       	push	r24
    7952:	9f 93       	push	r25
    7954:	af 93       	push	r26
    7956:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    7958:	20 91 3d 05 	lds	r18, 0x053D
    795c:	30 91 3e 05 	lds	r19, 0x053E
    7960:	40 91 3f 05 	lds	r20, 0x053F
    7964:	50 91 40 05 	lds	r21, 0x0540
	unsigned char f = timer0_fract;
    7968:	70 91 41 05 	lds	r23, 0x0541

	m += MILLIS_INC;
    796c:	da 01       	movw	r26, r20
    796e:	c9 01       	movw	r24, r18
    7970:	40 96       	adiw	r24, 0x10	; 16
    7972:	a1 1d       	adc	r26, r1
    7974:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    7976:	67 2f       	mov	r22, r23
    7978:	60 5d       	subi	r22, 0xD0	; 208
	if (f >= FRACT_MAX) {
    797a:	6d 37       	cpi	r22, 0x7D	; 125
    797c:	30 f0       	brcs	.+12     	; 0x798a <__vector_16+0x50>
		f -= FRACT_MAX;
    797e:	6d 57       	subi	r22, 0x7D	; 125
		m += 1;
    7980:	da 01       	movw	r26, r20
    7982:	c9 01       	movw	r24, r18
    7984:	41 96       	adiw	r24, 0x11	; 17
    7986:	a1 1d       	adc	r26, r1
    7988:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    798a:	60 93 41 05 	sts	0x0541, r22
	timer0_millis = m;
    798e:	80 93 3d 05 	sts	0x053D, r24
    7992:	90 93 3e 05 	sts	0x053E, r25
    7996:	a0 93 3f 05 	sts	0x053F, r26
    799a:	b0 93 40 05 	sts	0x0540, r27
	timer0_overflow_count++;
    799e:	80 91 39 05 	lds	r24, 0x0539
    79a2:	90 91 3a 05 	lds	r25, 0x053A
    79a6:	a0 91 3b 05 	lds	r26, 0x053B
    79aa:	b0 91 3c 05 	lds	r27, 0x053C
    79ae:	01 96       	adiw	r24, 0x01	; 1
    79b0:	a1 1d       	adc	r26, r1
    79b2:	b1 1d       	adc	r27, r1
    79b4:	80 93 39 05 	sts	0x0539, r24
    79b8:	90 93 3a 05 	sts	0x053A, r25
    79bc:	a0 93 3b 05 	sts	0x053B, r26
    79c0:	b0 93 3c 05 	sts	0x053C, r27
}
    79c4:	bf 91       	pop	r27
    79c6:	af 91       	pop	r26
    79c8:	9f 91       	pop	r25
    79ca:	8f 91       	pop	r24
    79cc:	7f 91       	pop	r23
    79ce:	6f 91       	pop	r22
    79d0:	5f 91       	pop	r21
    79d2:	4f 91       	pop	r20
    79d4:	3f 91       	pop	r19
    79d6:	2f 91       	pop	r18
    79d8:	0f 90       	pop	r0
    79da:	0f be       	out	0x3f, r0	; 63
    79dc:	0f 90       	pop	r0
    79de:	1f 90       	pop	r1
    79e0:	18 95       	reti

000079e2 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    79e2:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    79e4:	84 b5       	in	r24, 0x24	; 36
    79e6:	82 60       	ori	r24, 0x02	; 2
    79e8:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    79ea:	84 b5       	in	r24, 0x24	; 36
    79ec:	81 60       	ori	r24, 0x01	; 1
    79ee:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    79f0:	85 b5       	in	r24, 0x25	; 37
    79f2:	82 60       	ori	r24, 0x02	; 2
    79f4:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    79f6:	85 b5       	in	r24, 0x25	; 37
    79f8:	81 60       	ori	r24, 0x01	; 1
    79fa:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    79fc:	ee e6       	ldi	r30, 0x6E	; 110
    79fe:	f0 e0       	ldi	r31, 0x00	; 0
    7a00:	80 81       	ld	r24, Z
    7a02:	81 60       	ori	r24, 0x01	; 1
    7a04:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    7a06:	e1 e8       	ldi	r30, 0x81	; 129
    7a08:	f0 e0       	ldi	r31, 0x00	; 0
    7a0a:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    7a0c:	80 81       	ld	r24, Z
    7a0e:	82 60       	ori	r24, 0x02	; 2
    7a10:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    7a12:	e0 e8       	ldi	r30, 0x80	; 128
    7a14:	f0 e0       	ldi	r31, 0x00	; 0
    7a16:	80 81       	ld	r24, Z
    7a18:	81 60       	ori	r24, 0x01	; 1
    7a1a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    7a1c:	e1 eb       	ldi	r30, 0xB1	; 177
    7a1e:	f0 e0       	ldi	r31, 0x00	; 0
    7a20:	80 81       	ld	r24, Z
    7a22:	84 60       	ori	r24, 0x04	; 4
    7a24:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    7a26:	e0 eb       	ldi	r30, 0xB0	; 176
    7a28:	f0 e0       	ldi	r31, 0x00	; 0
    7a2a:	80 81       	ld	r24, Z
    7a2c:	81 60       	ori	r24, 0x01	; 1
    7a2e:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    7a30:	ea e7       	ldi	r30, 0x7A	; 122
    7a32:	f0 e0       	ldi	r31, 0x00	; 0
    7a34:	80 81       	ld	r24, Z
    7a36:	84 60       	ori	r24, 0x04	; 4
    7a38:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    7a3a:	80 81       	ld	r24, Z
    7a3c:	82 60       	ori	r24, 0x02	; 2
    7a3e:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    7a40:	80 81       	ld	r24, Z
    7a42:	81 60       	ori	r24, 0x01	; 1
    7a44:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    7a46:	80 81       	ld	r24, Z
    7a48:	80 68       	ori	r24, 0x80	; 128
    7a4a:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    7a4c:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    7a50:	08 95       	ret

00007a52 <__floatunsisf>:
    7a52:	e8 94       	clt
    7a54:	09 c0       	rjmp	.+18     	; 0x7a68 <__floatsisf+0x12>

00007a56 <__floatsisf>:
    7a56:	97 fb       	bst	r25, 7
    7a58:	3e f4       	brtc	.+14     	; 0x7a68 <__floatsisf+0x12>
    7a5a:	90 95       	com	r25
    7a5c:	80 95       	com	r24
    7a5e:	70 95       	com	r23
    7a60:	61 95       	neg	r22
    7a62:	7f 4f       	sbci	r23, 0xFF	; 255
    7a64:	8f 4f       	sbci	r24, 0xFF	; 255
    7a66:	9f 4f       	sbci	r25, 0xFF	; 255
    7a68:	99 23       	and	r25, r25
    7a6a:	a9 f0       	breq	.+42     	; 0x7a96 <__floatsisf+0x40>
    7a6c:	f9 2f       	mov	r31, r25
    7a6e:	96 e9       	ldi	r25, 0x96	; 150
    7a70:	bb 27       	eor	r27, r27
    7a72:	93 95       	inc	r25
    7a74:	f6 95       	lsr	r31
    7a76:	87 95       	ror	r24
    7a78:	77 95       	ror	r23
    7a7a:	67 95       	ror	r22
    7a7c:	b7 95       	ror	r27
    7a7e:	f1 11       	cpse	r31, r1
    7a80:	f8 cf       	rjmp	.-16     	; 0x7a72 <__floatsisf+0x1c>
    7a82:	fa f4       	brpl	.+62     	; 0x7ac2 <__floatsisf+0x6c>
    7a84:	bb 0f       	add	r27, r27
    7a86:	11 f4       	brne	.+4      	; 0x7a8c <__floatsisf+0x36>
    7a88:	60 ff       	sbrs	r22, 0
    7a8a:	1b c0       	rjmp	.+54     	; 0x7ac2 <__floatsisf+0x6c>
    7a8c:	6f 5f       	subi	r22, 0xFF	; 255
    7a8e:	7f 4f       	sbci	r23, 0xFF	; 255
    7a90:	8f 4f       	sbci	r24, 0xFF	; 255
    7a92:	9f 4f       	sbci	r25, 0xFF	; 255
    7a94:	16 c0       	rjmp	.+44     	; 0x7ac2 <__floatsisf+0x6c>
    7a96:	88 23       	and	r24, r24
    7a98:	11 f0       	breq	.+4      	; 0x7a9e <__floatsisf+0x48>
    7a9a:	96 e9       	ldi	r25, 0x96	; 150
    7a9c:	11 c0       	rjmp	.+34     	; 0x7ac0 <__floatsisf+0x6a>
    7a9e:	77 23       	and	r23, r23
    7aa0:	21 f0       	breq	.+8      	; 0x7aaa <__floatsisf+0x54>
    7aa2:	9e e8       	ldi	r25, 0x8E	; 142
    7aa4:	87 2f       	mov	r24, r23
    7aa6:	76 2f       	mov	r23, r22
    7aa8:	05 c0       	rjmp	.+10     	; 0x7ab4 <__floatsisf+0x5e>
    7aaa:	66 23       	and	r22, r22
    7aac:	71 f0       	breq	.+28     	; 0x7aca <__floatsisf+0x74>
    7aae:	96 e8       	ldi	r25, 0x86	; 134
    7ab0:	86 2f       	mov	r24, r22
    7ab2:	70 e0       	ldi	r23, 0x00	; 0
    7ab4:	60 e0       	ldi	r22, 0x00	; 0
    7ab6:	2a f0       	brmi	.+10     	; 0x7ac2 <__floatsisf+0x6c>
    7ab8:	9a 95       	dec	r25
    7aba:	66 0f       	add	r22, r22
    7abc:	77 1f       	adc	r23, r23
    7abe:	88 1f       	adc	r24, r24
    7ac0:	da f7       	brpl	.-10     	; 0x7ab8 <__floatsisf+0x62>
    7ac2:	88 0f       	add	r24, r24
    7ac4:	96 95       	lsr	r25
    7ac6:	87 95       	ror	r24
    7ac8:	97 f9       	bld	r25, 7
    7aca:	08 95       	ret

00007acc <fmax>:
    7acc:	99 0f       	add	r25, r25
    7ace:	bb 0b       	sbc	r27, r27
    7ad0:	55 0f       	add	r21, r21
    7ad2:	aa 0b       	sbc	r26, r26
    7ad4:	e0 e8       	ldi	r30, 0x80	; 128
    7ad6:	fe ef       	ldi	r31, 0xFE	; 254
    7ad8:	16 16       	cp	r1, r22
    7ada:	17 06       	cpc	r1, r23
    7adc:	e8 07       	cpc	r30, r24
    7ade:	f9 07       	cpc	r31, r25
    7ae0:	70 f0       	brcs	.+28     	; 0x7afe <fmax+0x32>
    7ae2:	12 16       	cp	r1, r18
    7ae4:	13 06       	cpc	r1, r19
    7ae6:	e4 07       	cpc	r30, r20
    7ae8:	f5 07       	cpc	r31, r21
    7aea:	60 f0       	brcs	.+24     	; 0x7b04 <fmax+0x38>
    7aec:	ba 17       	cp	r27, r26
    7aee:	3c f0       	brlt	.+14     	; 0x7afe <fmax+0x32>
    7af0:	49 f4       	brne	.+18     	; 0x7b04 <fmax+0x38>
    7af2:	62 17       	cp	r22, r18
    7af4:	73 07       	cpc	r23, r19
    7af6:	84 07       	cpc	r24, r20
    7af8:	95 07       	cpc	r25, r21
    7afa:	a7 95       	ror	r26
    7afc:	1b f4       	brvc	.+6      	; 0x7b04 <fmax+0x38>
    7afe:	b9 01       	movw	r22, r18
    7b00:	ca 01       	movw	r24, r20
    7b02:	ba 2f       	mov	r27, r26
    7b04:	b6 95       	lsr	r27
    7b06:	97 95       	ror	r25
    7b08:	08 95       	ret

00007b0a <__fp_cmp>:
    7b0a:	99 0f       	add	r25, r25
    7b0c:	00 08       	sbc	r0, r0
    7b0e:	55 0f       	add	r21, r21
    7b10:	aa 0b       	sbc	r26, r26
    7b12:	e0 e8       	ldi	r30, 0x80	; 128
    7b14:	fe ef       	ldi	r31, 0xFE	; 254
    7b16:	16 16       	cp	r1, r22
    7b18:	17 06       	cpc	r1, r23
    7b1a:	e8 07       	cpc	r30, r24
    7b1c:	f9 07       	cpc	r31, r25
    7b1e:	c0 f0       	brcs	.+48     	; 0x7b50 <__fp_cmp+0x46>
    7b20:	12 16       	cp	r1, r18
    7b22:	13 06       	cpc	r1, r19
    7b24:	e4 07       	cpc	r30, r20
    7b26:	f5 07       	cpc	r31, r21
    7b28:	98 f0       	brcs	.+38     	; 0x7b50 <__fp_cmp+0x46>
    7b2a:	62 1b       	sub	r22, r18
    7b2c:	73 0b       	sbc	r23, r19
    7b2e:	84 0b       	sbc	r24, r20
    7b30:	95 0b       	sbc	r25, r21
    7b32:	39 f4       	brne	.+14     	; 0x7b42 <__fp_cmp+0x38>
    7b34:	0a 26       	eor	r0, r26
    7b36:	61 f0       	breq	.+24     	; 0x7b50 <__fp_cmp+0x46>
    7b38:	23 2b       	or	r18, r19
    7b3a:	24 2b       	or	r18, r20
    7b3c:	25 2b       	or	r18, r21
    7b3e:	21 f4       	brne	.+8      	; 0x7b48 <__fp_cmp+0x3e>
    7b40:	08 95       	ret
    7b42:	0a 26       	eor	r0, r26
    7b44:	09 f4       	brne	.+2      	; 0x7b48 <__fp_cmp+0x3e>
    7b46:	a1 40       	sbci	r26, 0x01	; 1
    7b48:	a6 95       	lsr	r26
    7b4a:	8f ef       	ldi	r24, 0xFF	; 255
    7b4c:	81 1d       	adc	r24, r1
    7b4e:	81 1d       	adc	r24, r1
    7b50:	08 95       	ret

00007b52 <__gesf2>:
    7b52:	db df       	rcall	.-74     	; 0x7b0a <__fp_cmp>
    7b54:	08 f4       	brcc	.+2      	; 0x7b58 <__gesf2+0x6>
    7b56:	8f ef       	ldi	r24, 0xFF	; 255
    7b58:	08 95       	ret

00007b5a <__mulsi3>:
    7b5a:	62 9f       	mul	r22, r18
    7b5c:	d0 01       	movw	r26, r0
    7b5e:	73 9f       	mul	r23, r19
    7b60:	f0 01       	movw	r30, r0
    7b62:	82 9f       	mul	r24, r18
    7b64:	e0 0d       	add	r30, r0
    7b66:	f1 1d       	adc	r31, r1
    7b68:	64 9f       	mul	r22, r20
    7b6a:	e0 0d       	add	r30, r0
    7b6c:	f1 1d       	adc	r31, r1
    7b6e:	92 9f       	mul	r25, r18
    7b70:	f0 0d       	add	r31, r0
    7b72:	83 9f       	mul	r24, r19
    7b74:	f0 0d       	add	r31, r0
    7b76:	74 9f       	mul	r23, r20
    7b78:	f0 0d       	add	r31, r0
    7b7a:	65 9f       	mul	r22, r21
    7b7c:	f0 0d       	add	r31, r0
    7b7e:	99 27       	eor	r25, r25
    7b80:	72 9f       	mul	r23, r18
    7b82:	b0 0d       	add	r27, r0
    7b84:	e1 1d       	adc	r30, r1
    7b86:	f9 1f       	adc	r31, r25
    7b88:	63 9f       	mul	r22, r19
    7b8a:	b0 0d       	add	r27, r0
    7b8c:	e1 1d       	adc	r30, r1
    7b8e:	f9 1f       	adc	r31, r25
    7b90:	bd 01       	movw	r22, r26
    7b92:	cf 01       	movw	r24, r30
    7b94:	11 24       	eor	r1, r1
    7b96:	08 95       	ret

00007b98 <__udivmodhi4>:
    7b98:	aa 1b       	sub	r26, r26
    7b9a:	bb 1b       	sub	r27, r27
    7b9c:	51 e1       	ldi	r21, 0x11	; 17
    7b9e:	07 c0       	rjmp	.+14     	; 0x7bae <__udivmodhi4_ep>

00007ba0 <__udivmodhi4_loop>:
    7ba0:	aa 1f       	adc	r26, r26
    7ba2:	bb 1f       	adc	r27, r27
    7ba4:	a6 17       	cp	r26, r22
    7ba6:	b7 07       	cpc	r27, r23
    7ba8:	10 f0       	brcs	.+4      	; 0x7bae <__udivmodhi4_ep>
    7baa:	a6 1b       	sub	r26, r22
    7bac:	b7 0b       	sbc	r27, r23

00007bae <__udivmodhi4_ep>:
    7bae:	88 1f       	adc	r24, r24
    7bb0:	99 1f       	adc	r25, r25
    7bb2:	5a 95       	dec	r21
    7bb4:	a9 f7       	brne	.-22     	; 0x7ba0 <__udivmodhi4_loop>
    7bb6:	80 95       	com	r24
    7bb8:	90 95       	com	r25
    7bba:	bc 01       	movw	r22, r24
    7bbc:	cd 01       	movw	r24, r26
    7bbe:	08 95       	ret

00007bc0 <__divmodhi4>:
    7bc0:	97 fb       	bst	r25, 7
    7bc2:	09 2e       	mov	r0, r25
    7bc4:	07 26       	eor	r0, r23
    7bc6:	0a d0       	rcall	.+20     	; 0x7bdc <__divmodhi4_neg1>
    7bc8:	77 fd       	sbrc	r23, 7
    7bca:	04 d0       	rcall	.+8      	; 0x7bd4 <__divmodhi4_neg2>
    7bcc:	e5 df       	rcall	.-54     	; 0x7b98 <__udivmodhi4>
    7bce:	06 d0       	rcall	.+12     	; 0x7bdc <__divmodhi4_neg1>
    7bd0:	00 20       	and	r0, r0
    7bd2:	1a f4       	brpl	.+6      	; 0x7bda <__divmodhi4_exit>

00007bd4 <__divmodhi4_neg2>:
    7bd4:	70 95       	com	r23
    7bd6:	61 95       	neg	r22
    7bd8:	7f 4f       	sbci	r23, 0xFF	; 255

00007bda <__divmodhi4_exit>:
    7bda:	08 95       	ret

00007bdc <__divmodhi4_neg1>:
    7bdc:	f6 f7       	brtc	.-4      	; 0x7bda <__divmodhi4_exit>
    7bde:	90 95       	com	r25
    7be0:	81 95       	neg	r24
    7be2:	9f 4f       	sbci	r25, 0xFF	; 255
    7be4:	08 95       	ret

00007be6 <__udivmodsi4>:
    7be6:	a1 e2       	ldi	r26, 0x21	; 33
    7be8:	1a 2e       	mov	r1, r26
    7bea:	aa 1b       	sub	r26, r26
    7bec:	bb 1b       	sub	r27, r27
    7bee:	fd 01       	movw	r30, r26
    7bf0:	0d c0       	rjmp	.+26     	; 0x7c0c <__udivmodsi4_ep>

00007bf2 <__udivmodsi4_loop>:
    7bf2:	aa 1f       	adc	r26, r26
    7bf4:	bb 1f       	adc	r27, r27
    7bf6:	ee 1f       	adc	r30, r30
    7bf8:	ff 1f       	adc	r31, r31
    7bfa:	a2 17       	cp	r26, r18
    7bfc:	b3 07       	cpc	r27, r19
    7bfe:	e4 07       	cpc	r30, r20
    7c00:	f5 07       	cpc	r31, r21
    7c02:	20 f0       	brcs	.+8      	; 0x7c0c <__udivmodsi4_ep>
    7c04:	a2 1b       	sub	r26, r18
    7c06:	b3 0b       	sbc	r27, r19
    7c08:	e4 0b       	sbc	r30, r20
    7c0a:	f5 0b       	sbc	r31, r21

00007c0c <__udivmodsi4_ep>:
    7c0c:	66 1f       	adc	r22, r22
    7c0e:	77 1f       	adc	r23, r23
    7c10:	88 1f       	adc	r24, r24
    7c12:	99 1f       	adc	r25, r25
    7c14:	1a 94       	dec	r1
    7c16:	69 f7       	brne	.-38     	; 0x7bf2 <__udivmodsi4_loop>
    7c18:	60 95       	com	r22
    7c1a:	70 95       	com	r23
    7c1c:	80 95       	com	r24
    7c1e:	90 95       	com	r25
    7c20:	9b 01       	movw	r18, r22
    7c22:	ac 01       	movw	r20, r24
    7c24:	bd 01       	movw	r22, r26
    7c26:	cf 01       	movw	r24, r30
    7c28:	08 95       	ret

00007c2a <__divmodsi4>:
    7c2a:	97 fb       	bst	r25, 7
    7c2c:	09 2e       	mov	r0, r25
    7c2e:	05 26       	eor	r0, r21
    7c30:	0e d0       	rcall	.+28     	; 0x7c4e <__divmodsi4_neg1>
    7c32:	57 fd       	sbrc	r21, 7
    7c34:	04 d0       	rcall	.+8      	; 0x7c3e <__divmodsi4_neg2>
    7c36:	d7 df       	rcall	.-82     	; 0x7be6 <__udivmodsi4>
    7c38:	0a d0       	rcall	.+20     	; 0x7c4e <__divmodsi4_neg1>
    7c3a:	00 1c       	adc	r0, r0
    7c3c:	38 f4       	brcc	.+14     	; 0x7c4c <__divmodsi4_exit>

00007c3e <__divmodsi4_neg2>:
    7c3e:	50 95       	com	r21
    7c40:	40 95       	com	r20
    7c42:	30 95       	com	r19
    7c44:	21 95       	neg	r18
    7c46:	3f 4f       	sbci	r19, 0xFF	; 255
    7c48:	4f 4f       	sbci	r20, 0xFF	; 255
    7c4a:	5f 4f       	sbci	r21, 0xFF	; 255

00007c4c <__divmodsi4_exit>:
    7c4c:	08 95       	ret

00007c4e <__divmodsi4_neg1>:
    7c4e:	f6 f7       	brtc	.-4      	; 0x7c4c <__divmodsi4_exit>
    7c50:	90 95       	com	r25
    7c52:	80 95       	com	r24
    7c54:	70 95       	com	r23
    7c56:	61 95       	neg	r22
    7c58:	7f 4f       	sbci	r23, 0xFF	; 255
    7c5a:	8f 4f       	sbci	r24, 0xFF	; 255
    7c5c:	9f 4f       	sbci	r25, 0xFF	; 255
    7c5e:	08 95       	ret

00007c60 <__tablejump2__>:
    7c60:	ee 0f       	add	r30, r30
    7c62:	ff 1f       	adc	r31, r31

00007c64 <__tablejump__>:
    7c64:	05 90       	lpm	r0, Z+
    7c66:	f4 91       	lpm	r31, Z+
    7c68:	e0 2d       	mov	r30, r0
    7c6a:	09 94       	ijmp

00007c6c <toupper>:
    7c6c:	91 11       	cpse	r25, r1
    7c6e:	08 95       	ret
    7c70:	81 56       	subi	r24, 0x61	; 97
    7c72:	8a 51       	subi	r24, 0x1A	; 26
    7c74:	08 f4       	brcc	.+2      	; 0x7c78 <toupper+0xc>
    7c76:	80 52       	subi	r24, 0x20	; 32
    7c78:	85 58       	subi	r24, 0x85	; 133
    7c7a:	08 95       	ret

00007c7c <_exit>:
    7c7c:	f8 94       	cli

00007c7e <__stop_program>:
    7c7e:	ff cf       	rjmp	.-2      	; 0x7c7e <__stop_program>
