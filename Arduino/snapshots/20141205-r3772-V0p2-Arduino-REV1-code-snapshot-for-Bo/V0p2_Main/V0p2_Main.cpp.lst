
/var/folders/km/s_tzntf16nzg5bdh5n6g6lz40000gn/T/build3556650168864343767.tmp/V0p2_Main.cpp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fe  00800100  00007d9a  00007e2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007d9a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002f7  008001fe  008001fe  00007f2c  2**0
                  ALLOC
  3 .debug_aranges 000011d8  00000000  00000000  00007f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00003349  00000000  00000000  00009104  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0001b13d  00000000  00000000  0000c44d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000056e0  00000000  00000000  0002758a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0001352a  00000000  00000000  0002cc6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001fb0  00000000  00000000  00040194  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000082aa  00000000  00000000  00042144  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000b235  00000000  00000000  0004a3ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 000a98ec  00000000  00000000  00055623  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001560  00000000  00000000  000fef0f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
    virtual bool isValid(const uint8_t value) const { return(value <= 100); }

    // Returns true if (re)calibrating/(re)initialising/(re)syncing.
    // The target valve position is not lost while this is true.
    // By default there is no recalibration step.
    virtual bool isRecalibrating() const { return(false); }
       0:	0c 94 4a 03 	jmp	0x694	; 0x694 <__ctors_end>
#endif


// True if FHT8V valve is believed to be open under instruction from this system; false if not in sync.
static bool FHT8V_isValveOpen;
bool getFHT8V_isValveOpen() { return(syncedWithFHT8V && FHT8V_isValveOpen); }
       4:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
        if(0 != (datum & i)) { bit = !bit; }
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
        }
    return(crc & 0x7f);
    }
       8:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>


// If ADC was disabled, power it up, do Serial.begin(), and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownSerial() may be advisable.
bool powerUpADCIfDisabled()
       c:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
uint_least8_t getHoursLT() { return(getMinutesSinceMidnightLT() / 60); }

// Get whole days since the start of 2000/01/01 (ie the midnight between 1999 and 2000), local time.
// This will roll in about 2179, by which time I will not care.
// Thread-safe and ISR-safe.
uint_least16_t getDaysSince1999LT()
      10:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
    { eeprom_smart_erase_byte((uint8_t*)(EE_START_SIMPLE_SCHEDULE0_ON + which)); }
  }

// Returns true if any simple schedule is set, false otherwise.
// This implementation just checks for any valid schedule 'on' time.
bool isAnySimpleScheduleSet()
      14:	0c 94 f9 06 	jmp	0xdf2	; 0xdf2 <__vector_5>
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) number to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(const unsigned long u, const int fmt)
      18:	0c 94 59 1c 	jmp	0x38b2	; 0x38b2 <__vector_6>
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual T get() const = 0;

    // Returns true if this sensor reading value passed is potentially valid, eg in-range.
    // Default is to always return true, ie all values potentially valid.
    virtual bool isValid(T value) const { return(true); }
      1c:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
  // set address of targeted slave
  txAddress = address;
  // reset tx buffer iterator vars
  txBufferIndex = 0;
  txBufferLength = 0;
}
      20:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
 */
void twi_setAddress(uint8_t address)
{
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
}
      24:	0c 94 29 1c 	jmp	0x3852	; 0x3852 <__vector_9>
    }

    n += p.write(']');

    return n;
}
      28:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
      2c:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
      30:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
  free(ptr);
}

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
void __cxa_guard_abort (__guard *) {}; 
      34:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
  size_t n = print(ifsh);
  n += println();
  return n;
}

size_t Print::print(const Printable& x)
      38:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
	timer0_millis = m;
	timer0_overflow_count++;
}

unsigned long millis()
{
      3c:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
      40:	0c 94 2a 3d 	jmp	0x7a54	; 0x7a54 <__vector_16>
      44:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
      48:	0c 94 0f 39 	jmp	0x721e	; 0x721e <__vector_18>
      4c:	0c 94 5d 39 	jmp	0x72ba	; 0x72ba <__vector_19>
      50:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
      54:	0c 94 12 1d 	jmp	0x3a24	; 0x3a24 <__vector_21>
      58:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
      5c:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
      60:	0c 94 31 35 	jmp	0x6a62	; 0x6a62 <__vector_24>
      64:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
      68:	0e 2a       	or	r0, r30
      6a:	49 2a       	or	r4, r25
      6c:	22 2a       	or	r2, r18
      6e:	f9 2a       	or	r15, r25
      70:	0a 2a       	or	r0, r26
      72:	0d 2b       	or	r16, r29
      74:	49 2b       	or	r20, r25
      76:	0a 2a       	or	r0, r26
      78:	0a 2a       	or	r0, r26
      7a:	4d 2b       	or	r20, r29
      7c:	0a 2a       	or	r0, r26
      7e:	0a 2a       	or	r0, r26
      80:	61 2b       	or	r22, r17
      82:	75 2b       	or	r23, r21
      84:	b8 2b       	or	r27, r24
      86:	25 2a       	or	r2, r21
      88:	bb 2b       	or	r27, r27
      8a:	ed 2b       	or	r30, r29
      8c:	0a 2a       	or	r0, r26
      8e:	1b 2c       	mov	r1, r11
      90:	1e 2c       	mov	r1, r14
      92:	22 2c       	mov	r2, r2
      94:	0a 2a       	or	r0, r26
      96:	39 2c       	mov	r3, r9

00000098 <loopOpenTRV()::__c>:
      98:	21 45 52 52 4f 52 3a 20 6c 6f 6f 70 20 6f 76 65     !ERROR: loop ove
      a8:	72 72 75 6e 20 00                                   rrun .

000000ae <loopOpenTRV()::__c>:
      ae:	42 6f 69 6c 65 72 20 6f 6e 2c 20 73 20 6c 65 66     Boiler on, s lef
      be:	74 3a 20 00                                         t: .

000000c2 <loopOpenTRV()::__c>:
      c2:	3f 6e 65 61 72 20 6f 76 65 72 72 75 6e 00           ?near overrun.

000000d0 <loopOpenTRV()::__c>:
      d0:	3f 44 52 4f 50 50 45 44 20 73 74 61 74 73 3a 20     ?DROPPED stats: 
	...

000000e1 <loopOpenTRV()::__c>:
      e1:	52 43 66 48 30 00                                   RCfH0.

000000e7 <loopOpenTRV()::__c>:
      e7:	52 43 66 48 31 00                                   RCfH1.

000000ed <loopOpenTRV()::__c>:
      ed:	21 52 58 65 72 72 20 46 00                          !RXerr F.

000000f6 <loopOpenTRV()::__c>:
      f6:	43 66 48 20 00                                      CfH .

000000fb <loopOpenTRV()::__c>:
      fb:	3b 4f 00                                            ;O.

000000fe <loopOpenTRV()::__c>:
      fe:	3b 4c 00                                            ;L.

00000101 <loopOpenTRV()::__c>:
     101:	3b 50 00                                            ;P.

00000104 <loopOpenTRV()::__c>:
     104:	3b 54 00                                            ;T.

00000107 <FHT8V_RFM22_Reg_Values>:
     107:	06 00 08 00 30 00 33 06 34 08 35 10 36 aa 37 cc     ....0.3.4.5.6.7.
     117:	38 cc 39 cc 6d 0b 6e 28 6f f5 70 20 71 21 72 20     8.9.m.n(o.p q!r 
     127:	73 00 74 00 75 73 76 64 77 00 79 23 7a 01 1c c1     s.t.usvdw.y#z...
     137:	1d 40 1e 0a 1f 03 20 96 21 00 22 da 23 74 24 00     .@.... .!.".#t$.
     147:	25 dc 2a 24 2c 28 2d fa 2e 29 69 60 ff ff           %.*$,(-..)i`..

00000155 <FHT8VPollSyncAndTX_Next(bool)::__c>:
     155:	46 48 54 38 56 20 54 58 00                          FHT8V TX.

0000015e <doSync(bool)::__c>:
     15e:	46 48 54 38 56 20 53 59 4e 43 20 46 49 4e 41 4c     FHT8V SYNC FINAL
	...

0000016f <doSync(bool)::__c>:
     16f:	46 48 54 38 56 20 53 59 4e 43 2e 2e 2e 00           FHT8V SYNC....

0000017d <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)::__c>:
     17d:	46 48 54 38 56 20 66 72 61 6d 65 20 6e 6f 74 20     FHT8V frame not 
     18d:	69 6e 69 74 69 61 6c 69 73 65 64 00                 initialised.

00000199 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)::__c>:
     199:	6d 73 67 20 67 65 6e 20 65 72 72 00                 msg gen err.

000001a5 <ensureIDCreated(bool)::__c>:
     1a5:	20 2e 2e 2e 20 00                                    ... .

000001ab <ensureIDCreated(bool)::__c>:
     1ab:	49 6e 76 61 6c 69 64 20 49 44 20 62 79 74 65 20     Invalid ID byte 
	...

000001bc <ensureIDCreated(bool)::__c>:
     1bc:	20 2e 2e 2e 20 00                                    ... .

000001c2 <ensureIDCreated(bool)::__c>:
     1c2:	53 65 74 74 69 6e 67 20 49 44 20 62 79 74 65 20     Setting ID byte 
	...

000001d3 <RFM22CheckConnected()::__c>:
     1d3:	52 46 4d 32 32 20 62 61 64 20 74 79 70 65 3a 20     RFM22 bad type: 
	...

000001e4 <RFM22CheckConnected()::__c>:
     1e4:	52 46 4d 32 32 20 62 61 64 20 76 65 72 73 69 6f     RFM22 bad versio
     1f4:	6e 3a 20 00                                         n: .

000001f8 <pollCLI(unsigned char)::__c>:
     1f8:	4f 4b 00                                            OK.

000001fb <pollCLI(unsigned char)::__c>:
     1fb:	4e 6f 74 20 66 69 6e 69 73 68 65 64 2e 00           Not finished..

00000209 <pollCLI(unsigned char)::__c>:
     209:	5a 61 70 70 65 64 2e 00                             Zapped..

00000211 <pollCLI(unsigned char)::__c>:
     211:	4f 76 65 72 72 75 6e 73 3a 20 00                    Overruns: .

0000021c <pollCLI(unsigned char)::__c>:
     21c:	52 65 73 65 74 73 3a 20 00                          Resets: .

00000225 <pollCLI(unsigned char)::__c>:
     225:	6c 61 73 74 00                                      last.

0000022a <pollCLI(unsigned char)::__c>:
     22a:	73 6d 6f 6f 74 68 65 64 00                          smoothed.

00000233 <pollCLI(unsigned char)::__c>:
     233:	52 48 25 00                                         RH%.

00000237 <pollCLI(unsigned char)::__c>:
     237:	6f 63 63 25 00                                      occ%.

0000023c <pollCLI(unsigned char)::__c>:
     23c:	61 6d 62 6c 00                                      ambl.

00000241 <pollCLI(unsigned char)::__c>:
     241:	46 75 6c 6c 20 73 61 6d 70 6c 65 00                 Full sample.

0000024d <pollCLI(unsigned char)::__c>:
     24d:	50 61 72 74 20 73 61 6d 70 6c 65 00                 Part sample.

00000259 <pollCLI(unsigned char)::__c>:
     259:	3f 20 66 6f 72 20 43 4c 49 20 68 65 6c 70 00        ? for CLI help.

00000268 <dumpCLIUsage(unsigned char)::__c>:
     268:	5a 61 70 20 73 74 61 74 73 00                       Zap stats.

00000272 <dumpCLIUsage(unsigned char)::__c>:
     272:	58 6d 69 74 20 73 65 63 75 72 69 74 79 20 6c 65     Xmit security le
     282:	76 65 6c 3b 20 30 20 61 6c 77 61 79 73 2c 20 32     vel; 0 always, 2
     292:	35 35 20 6e 65 76 65 72 00                          55 never.

0000029b <dumpCLIUsage(unsigned char)::__c>:
     29b:	63 6f 64 65 2f 62 6f 61 72 64 20 56 65 72 73 69     code/board Versi
     2ab:	6f 6e 00                                            on.

000002ae <dumpCLIUsage(unsigned char)::__c>:
     2ae:	57 61 72 6d 00                                      Warm.

000002b3 <dumpCLIUsage(unsigned char)::__c>:
     2b3:	73 65 74 20 32 34 68 20 54 69 6d 65 00              set 24h Time.

000002c0 <dumpCLIUsage(unsigned char)::__c>:
     2c0:	54 20 48 48 20 4d 4d 00                             T HH MM.

000002c8 <dumpCLIUsage(unsigned char)::__c>:
     2c8:	73 68 6f 77 20 53 74 61 74 75 73 00                 show Status.

000002d4 <dumpCLIUsage(unsigned char)::__c>:
     2d4:	64 75 6d 70 20 52 61 77 20 73 74 61 74 73 20 73     dump Raw stats s
     2e4:	65 74 20 4e 00                                      et N.

000002e9 <dumpCLIUsage(unsigned char)::__c>:
     2e9:	52 20 4e 00                                         R N.

000002ed <dumpCLIUsage(unsigned char)::__c>:
     2ed:	51 75 69 63 6b 20 48 65 61 74 00                    Quick Heat.

000002f8 <dumpCLIUsage(unsigned char)::__c>:
     2f8:	72 65 73 65 74 20 4f 70 65 6e 20 25 00              reset Open %.

00000305 <dumpCLIUsage(unsigned char)::__c>:
     305:	6d 69 6e 20 25 20 66 6f 72 20 76 61 6c 76 65 20     min % for valve 
     315:	74 6f 20 62 65 20 4f 70 65 6e 00                    to be Open.

00000320 <dumpCLIUsage(unsigned char)::__c>:
     320:	4f 20 50 50 00                                      O PP.

00000325 <dumpCLIUsage(unsigned char)::__c>:
     325:	50 72 6f 67 72 61 6d 3a 20 77 61 72 6d 20 64 61     Program: warm da
     335:	69 6c 79 20 73 74 61 72 74 69 6e 67 20 61 74 20     ily starting at 
     345:	48 48 20 4d 4d 20 73 63 68 65 64 75 6c 65 20 53     HH MM schedule S
	...

00000356 <dumpCLIUsage(unsigned char)::__c>:
     356:	50 20 48 48 20 4d 4d 20 53 00                       P HH MM S.

00000360 <dumpCLIUsage(unsigned char)::__c>:
     360:	4c 65 61 72 6e 20 64 61 69 6c 79 20 77 61 72 6d     Learn daily warm
     370:	20 6e 6f 77 2c 20 63 6c 65 61 72 20 69 66 20 69      now, clear if i
     380:	6e 20 66 72 6f 73 74 20 6d 6f 64 65 2c 20 73 63     n frost mode, sc
     390:	68 65 64 75 6c 65 20 53 00                          hedule S.

00000399 <dumpCLIUsage(unsigned char)::__c>:
     399:	4c 20 53 00                                         L S.

0000039d <dumpCLIUsage(unsigned char)::__c>:
     39d:	73 65 74 20 6e 65 77 20 49 44 00                    set new ID.

000003a8 <dumpCLIUsage(unsigned char)::__c>:
     3a8:	63 6c 65 61 72 20 48 6f 75 73 65 20 63 6f 64 65     clear House code
     3b8:	73 00                                               s.

000003ba <dumpCLIUsage(unsigned char)::__c>:
     3ba:	73 65 74 20 46 48 54 38 56 20 48 6f 75 73 65 20     set FHT8V House 
     3ca:	63 6f 64 65 73 20 31 26 32 00                       codes 1&2.

000003d4 <dumpCLIUsage(unsigned char)::__c>:
     3d4:	48 20 48 31 20 48 32 00                             H H1 H2.

000003dc <dumpCLIUsage(unsigned char)::__c>:
     3dc:	46 72 6f 73 74 00                                   Frost.

000003e2 <dumpCLIUsage(unsigned char)::__c>:
     3e2:	45 78 69 74 20 43 4c 49 00                          Exit CLI.

000003eb <dumpCLIUsage(unsigned char)::__c>:
     3eb:	44 75 6d 70 20 73 74 61 74 73 20 73 65 74 20 4e     Dump stats set N
	...

000003fc <dumpCLIUsage(unsigned char)::__c>:
     3fc:	44 20 4e 00                                         D N.

00000400 <dumpCLIUsage(unsigned char)::__c>:
     400:	43 65 6e 74 72 61 6c 20 68 75 62 20 3e 3d 4d 20     Central hub >=M 
     410:	6d 69 6e 73 20 6f 6e 2c 20 30 20 6f 66 66 00        mins on, 0 off.

0000041f <dumpCLIUsage(unsigned char)::__c>:
     41f:	43 20 4d 00                                         C M.

00000423 <dumpCLIUsage(unsigned char)::__c>:
     423:	74 68 69 73 20 68 65 6c 70 00                       this help.

0000042d <InvalidIgnored()::__c>:
     42d:	49 6e 76 61 6c 69 64 2c 20 69 67 6e 6f 72 65 64     Invalid, ignored
     43d:	2e 00                                               ..

0000043f <serialStatusReport()::__c>:
     43f:	3b 48 43 00                                         ;HC.

00000443 <setup::__c>:
     443:	3f 20 61 74 20 43 4c 49 20 70 72 6f 6d 70 74 20     ? at CLI prompt 
     453:	66 6f 72 20 68 65 6c 70 00                          for help.

0000045c <setup::__c>:
     45c:	49 6e 76 61 6c 69 64 20 49 44 20 61 6e 64 20 63     Invalid ID and c
     46c:	61 6e 6e 6f 74 20 72 65 73 65 74 2c 20 73 6f 72     annot reset, sor
     47c:	72 79 2e 00                                         ry..

00000480 <setup::__c>:
     480:	43 6f 6d 70 75 74 69 6e 67 20 69 6e 69 74 69 61     Computing initia
     490:	6c 20 74 61 72 67 65 74 2f 64 65 6d 61 6e 64 2e     l target/demand.
     4a0:	2e 2e 00                                            ...

000004a3 <setup::__c>:
     4a3:	43 20 2f 20 00                                      C / .

000004a8 <setup::__c>:
     4a8:	49 6e 74 20 74 65 6d 70 3a 20 00                    Int temp: .

000004b3 <setup::__c>:
     4b3:	6d 56 00                                            mV.

000004b6 <setup::__c>:
     4b6:	56 63 63 3a 20 00                                   Vcc: .

000004bc <setup::__c>:
     4bc:	74 65 6d 70 20 70 6f 74 3a 20 00                    temp pot: .

000004c7 <setup::__c>:
     4c7:	52 48 25 3a 20 00                                   RH%: .

000004cd <setup::__c>:
     4cd:	74 65 6d 70 3a 20 00                                temp: .

000004d4 <setup::__c>:
     4d4:	6c 69 67 68 74 3a 20 00                             light: .

000004dc <setup::__c>:
     4dc:	46 72 65 65 20 52 41 4d 3a 20 00                    Free RAM: .

000004e7 <setup::__c>:
     4e7:	4f 76 65 72 72 75 6e 73 3a 20 00                    Overruns: .

000004f2 <setup::__c>:
     4f2:	52 65 73 65 74 73 3a 20 00                          Resets: .

000004fb <setup::__c>:
     4fb:	44 45 42 55 47 20 6d 6f 64 65 20 77 69 74 68 20     DEBUG mode with 
     50b:	73 65 72 69 61 6c 20 6c 6f 67 67 69 6e 67 00        serial logging.

0000051a <setup::__c>:
     51a:	0d 0a 4f 70 65 6e 54 52 56 20 62 6f 6f 74 69 6e     ..OpenTRV bootin
     52a:	67 3a 20 00                                         g: .

0000052e <optionalPOST()::__c>:
     52e:	52 61 64 69 6f 2c 20 78 74 61 6c 2c 20 62 75 74     Radio, xtal, but
     53e:	74 6f 6e 73 2f 73 65 6e 73 6f 72 73 20 4f 4b 00     tons/sensors OK.

0000054e <optionalPOST()::__c>:
     54e:	58 74 61 6c 20 64 65 61 64 00                       Xtal dead.

00000558 <optionalPOST()::__c>:
     558:	41 73 79 6e 63 20 33 32 37 36 38 48 7a 20 63 6c     Async 32768Hz cl
     568:	6f 63 6b 20 6d 61 79 20 6e 6f 74 20 62 65 20 72     ock may not be r
     578:	75 6e 6e 69 6e 67 21 00                             unning!.

00000580 <optionalPOST()::__c>:
     580:	53 6c 65 65 70 69 6e 67 20 74 6f 20 6c 65 74 20     Sleeping to let 
     590:	61 73 79 6e 63 20 33 32 37 36 38 48 7a 20 63 6c     async 32768Hz cl
     5a0:	6f 63 6b 20 73 74 61 72 74 2e 2e 2e 00              ock start....

000005ad <optionalPOST()::__c>:
     5ad:	4c 32 20 73 74 75 63 6b 00                          L2 stuck.

000005b6 <optionalPOST()::__c>:
     5b6:	4c 20 73 74 75 63 6b 00                             L stuck.

000005be <optionalPOST()::__c>:
     5be:	4d 20 73 74 75 63 6b 00                             M stuck.

000005c6 <posPOST(unsigned char, __FlashStringHelper const*)::__c>:
     5c6:	3a 20 00                                            : .

000005c9 <posPOST(unsigned char, __FlashStringHelper const*)::__c>:
     5c9:	70 6f 73 50 4f 53 54 3a 20 00                       posPOST: .

000005d3 <serialPrintlnBuildVersion()::__c>:
     5d3:	20 30 33 3a 30 33 3a 35 35 00                        03:03:55.

000005dd <serialPrintlnBuildVersion()::__c>:
     5dd:	3b 20 63 6f 64 65 20 24 49 64 3a 20 56 30 70 32     ; code $Id: V0p2
     5ed:	5f 4d 61 69 6e 2e 69 6e 6f 20 33 36 35 39 20 32     _Main.ino 3659 2
     5fd:	30 31 34 2d 31 31 2d 32 32 20 31 37 3a 32 33 3a     014-11-22 17:23:
     60d:	31 33 5a 20 64 61 6d 6f 6e 68 64 20 24 20 00        13Z damonhd $ .

0000061c <serialPrintlnBuildVersion()::__c>:
     61c:	62 6f 61 72 64 20 56 30 2e 32 20 52 45 56 00        board V0.2 REV.

0000062b <port_to_mode_PGM>:
     62b:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000635 <port_to_output_PGM>:
     635:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000063f <port_to_input_PGM>:
     63f:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000649 <digital_pin_to_port_PGM>:
     649:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     659:	03 03 03 03                                         ....

0000065d <digital_pin_to_bit_mask_PGM>:
     65d:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     66d:	04 08 10 20                                         ... 

00000671 <digital_pin_to_timer_PGM>:
     671:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     681:	00 00 00 00 00                                      .....

00000686 <__ctors_start>:
     686:	4f 06       	cpc	r4, r31
     688:	16 1f       	adc	r17, r22
     68a:	c3 20       	and	r12, r3
     68c:	03 2e       	mov	r0, r19
     68e:	6c 31       	cpi	r22, 0x1C	; 28
     690:	cd 33       	cpi	r28, 0x3D	; 61
     692:	26 3b       	cpi	r18, 0xB6	; 182

00000694 <__ctors_end>:
     694:	11 24       	eor	r1, r1
     696:	1f be       	out	0x3f, r1	; 63
     698:	cf ef       	ldi	r28, 0xFF	; 255
     69a:	d8 e0       	ldi	r29, 0x08	; 8
     69c:	de bf       	out	0x3e, r29	; 62
     69e:	cd bf       	out	0x3d, r28	; 61

000006a0 <__do_copy_data>:
     6a0:	11 e0       	ldi	r17, 0x01	; 1
     6a2:	a0 e0       	ldi	r26, 0x00	; 0
     6a4:	b1 e0       	ldi	r27, 0x01	; 1
     6a6:	ea e9       	ldi	r30, 0x9A	; 154
     6a8:	fd e7       	ldi	r31, 0x7D	; 125
     6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <.do_copy_data_start>

000006ac <.do_copy_data_loop>:
     6ac:	05 90       	lpm	r0, Z+
     6ae:	0d 92       	st	X+, r0

000006b0 <.do_copy_data_start>:
     6b0:	ae 3f       	cpi	r26, 0xFE	; 254
     6b2:	b1 07       	cpc	r27, r17
     6b4:	d9 f7       	brne	.-10     	; 0x6ac <.do_copy_data_loop>

000006b6 <__do_clear_bss>:
     6b6:	14 e0       	ldi	r17, 0x04	; 4
     6b8:	ae ef       	ldi	r26, 0xFE	; 254
     6ba:	b1 e0       	ldi	r27, 0x01	; 1
     6bc:	01 c0       	rjmp	.+2      	; 0x6c0 <.do_clear_bss_start>

000006be <.do_clear_bss_loop>:
     6be:	1d 92       	st	X+, r1

000006c0 <.do_clear_bss_start>:
     6c0:	a5 3f       	cpi	r26, 0xF5	; 245
     6c2:	b1 07       	cpc	r27, r17
     6c4:	e1 f7       	brne	.-8      	; 0x6be <.do_clear_bss_loop>

000006c6 <__do_global_ctors>:
     6c6:	16 e0       	ldi	r17, 0x06	; 6
     6c8:	c4 e9       	ldi	r28, 0x94	; 148
     6ca:	d6 e0       	ldi	r29, 0x06	; 6
     6cc:	04 c0       	rjmp	.+8      	; 0x6d6 <.do_global_ctors_start>

000006ce <.do_global_ctors_loop>:
     6ce:	22 97       	sbiw	r28, 0x02	; 2
     6d0:	fe 01       	movw	r30, r28
     6d2:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <__tablejump__>

000006d6 <.do_global_ctors_start>:
     6d6:	c6 38       	cpi	r28, 0x86	; 134
     6d8:	d1 07       	cpc	r29, r17
     6da:	c9 f7       	brne	.-14     	; 0x6ce <.do_global_ctors_loop>
     6dc:	0e 94 7c 3b 	call	0x76f8	; 0x76f8 <main>
     6e0:	0c 94 cb 3e 	jmp	0x7d96	; 0x7d96 <_exit>

000006e4 <__bad_interrupt>:
     6e4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006e8 <abort>:
     6e8:	81 e0       	ldi	r24, 0x01	; 1
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	f8 94       	cli
     6ee:	0c 94 cb 3e 	jmp	0x7d96	; 0x7d96 <_exit>

000006f2 <atoi>:
     6f2:	fc 01       	movw	r30, r24
     6f4:	88 27       	eor	r24, r24
     6f6:	99 27       	eor	r25, r25
     6f8:	e8 94       	clt
     6fa:	21 91       	ld	r18, Z+
     6fc:	20 32       	cpi	r18, 0x20	; 32
     6fe:	e9 f3       	breq	.-6      	; 0x6fa <atoi+0x8>
     700:	29 30       	cpi	r18, 0x09	; 9
     702:	10 f0       	brcs	.+4      	; 0x708 <atoi+0x16>
     704:	2e 30       	cpi	r18, 0x0E	; 14
     706:	c8 f3       	brcs	.-14     	; 0x6fa <atoi+0x8>
     708:	2b 32       	cpi	r18, 0x2B	; 43
     70a:	41 f0       	breq	.+16     	; 0x71c <atoi+0x2a>
     70c:	2d 32       	cpi	r18, 0x2D	; 45
     70e:	39 f4       	brne	.+14     	; 0x71e <atoi+0x2c>
     710:	68 94       	set
     712:	04 c0       	rjmp	.+8      	; 0x71c <atoi+0x2a>
     714:	0e 94 23 04 	call	0x846	; 0x846 <__mulhi_const_10>
     718:	82 0f       	add	r24, r18
     71a:	91 1d       	adc	r25, r1
     71c:	21 91       	ld	r18, Z+
     71e:	20 53       	subi	r18, 0x30	; 48
     720:	2a 30       	cpi	r18, 0x0A	; 10
     722:	c0 f3       	brcs	.-16     	; 0x714 <atoi+0x22>
     724:	1e f4       	brtc	.+6      	; 0x72c <atoi+0x3a>
     726:	90 95       	com	r25
     728:	81 95       	neg	r24
     72a:	9f 4f       	sbci	r25, 0xFF	; 255
     72c:	08 95       	ret

0000072e <strlen_P>:
     72e:	fc 01       	movw	r30, r24
     730:	05 90       	lpm	r0, Z+
     732:	00 20       	and	r0, r0
     734:	e9 f7       	brne	.-6      	; 0x730 <strlen_P+0x2>
     736:	80 95       	com	r24
     738:	90 95       	com	r25
     73a:	8e 0f       	add	r24, r30
     73c:	9f 1f       	adc	r25, r31
     73e:	08 95       	ret

00000740 <memset>:
     740:	dc 01       	movw	r26, r24
     742:	01 c0       	rjmp	.+2      	; 0x746 <memset+0x6>
     744:	6d 93       	st	X+, r22
     746:	41 50       	subi	r20, 0x01	; 1
     748:	50 40       	sbci	r21, 0x00	; 0
     74a:	e0 f7       	brcc	.-8      	; 0x744 <memset+0x4>
     74c:	08 95       	ret

0000074e <strcmp>:
     74e:	fb 01       	movw	r30, r22
     750:	dc 01       	movw	r26, r24
     752:	8d 91       	ld	r24, X+
     754:	01 90       	ld	r0, Z+
     756:	80 19       	sub	r24, r0
     758:	01 10       	cpse	r0, r1
     75a:	d9 f3       	breq	.-10     	; 0x752 <strcmp+0x4>
     75c:	99 0b       	sbc	r25, r25
     75e:	08 95       	ret

00000760 <strcpy>:
     760:	fb 01       	movw	r30, r22
     762:	dc 01       	movw	r26, r24
     764:	01 90       	ld	r0, Z+
     766:	0d 92       	st	X+, r0
     768:	00 20       	and	r0, r0
     76a:	e1 f7       	brne	.-8      	; 0x764 <strcpy+0x4>
     76c:	08 95       	ret

0000076e <strncpy>:
     76e:	fb 01       	movw	r30, r22
     770:	dc 01       	movw	r26, r24
     772:	41 50       	subi	r20, 0x01	; 1
     774:	50 40       	sbci	r21, 0x00	; 0
     776:	48 f0       	brcs	.+18     	; 0x78a <strncpy+0x1c>
     778:	01 90       	ld	r0, Z+
     77a:	0d 92       	st	X+, r0
     77c:	00 20       	and	r0, r0
     77e:	c9 f7       	brne	.-14     	; 0x772 <strncpy+0x4>
     780:	01 c0       	rjmp	.+2      	; 0x784 <strncpy+0x16>
     782:	1d 92       	st	X+, r1
     784:	41 50       	subi	r20, 0x01	; 1
     786:	50 40       	sbci	r21, 0x00	; 0
     788:	e0 f7       	brcc	.-8      	; 0x782 <strncpy+0x14>
     78a:	08 95       	ret

0000078c <strtok_r>:
     78c:	00 97       	sbiw	r24, 0x00	; 0
     78e:	31 f4       	brne	.+12     	; 0x79c <strtok_r+0x10>
     790:	da 01       	movw	r26, r20
     792:	8d 91       	ld	r24, X+
     794:	9c 91       	ld	r25, X
     796:	00 97       	sbiw	r24, 0x00	; 0
     798:	09 f4       	brne	.+2      	; 0x79c <strtok_r+0x10>
     79a:	0e c0       	rjmp	.+28     	; 0x7b8 <strtok_r+0x2c>
     79c:	dc 01       	movw	r26, r24
     79e:	fb 01       	movw	r30, r22
     7a0:	3d 91       	ld	r19, X+
     7a2:	21 91       	ld	r18, Z+
     7a4:	22 23       	and	r18, r18
     7a6:	19 f0       	breq	.+6      	; 0x7ae <strtok_r+0x22>
     7a8:	32 17       	cp	r19, r18
     7aa:	c9 f3       	breq	.-14     	; 0x79e <strtok_r+0x12>
     7ac:	fa cf       	rjmp	.-12     	; 0x7a2 <strtok_r+0x16>
     7ae:	33 23       	and	r19, r19
     7b0:	31 f4       	brne	.+12     	; 0x7be <strtok_r+0x32>
     7b2:	da 01       	movw	r26, r20
     7b4:	1d 92       	st	X+, r1
     7b6:	1c 92       	st	X, r1
     7b8:	88 27       	eor	r24, r24
     7ba:	99 27       	eor	r25, r25
     7bc:	08 95       	ret
     7be:	11 97       	sbiw	r26, 0x01	; 1
     7c0:	af 93       	push	r26
     7c2:	bf 93       	push	r27
     7c4:	fb 01       	movw	r30, r22
     7c6:	3d 91       	ld	r19, X+
     7c8:	21 91       	ld	r18, Z+
     7ca:	32 17       	cp	r19, r18
     7cc:	71 f4       	brne	.+28     	; 0x7ea <strtok_r+0x5e>
     7ce:	33 23       	and	r19, r19
     7d0:	21 f4       	brne	.+8      	; 0x7da <strtok_r+0x4e>
     7d2:	88 27       	eor	r24, r24
     7d4:	99 27       	eor	r25, r25
     7d6:	11 97       	sbiw	r26, 0x01	; 1
     7d8:	02 c0       	rjmp	.+4      	; 0x7de <strtok_r+0x52>
     7da:	1e 92       	st	-X, r1
     7dc:	11 96       	adiw	r26, 0x01	; 1
     7de:	fa 01       	movw	r30, r20
     7e0:	a1 93       	st	Z+, r26
     7e2:	b0 83       	st	Z, r27
     7e4:	9f 91       	pop	r25
     7e6:	8f 91       	pop	r24
     7e8:	08 95       	ret
     7ea:	22 23       	and	r18, r18
     7ec:	69 f7       	brne	.-38     	; 0x7c8 <strtok_r+0x3c>
     7ee:	ea cf       	rjmp	.-44     	; 0x7c4 <strtok_r+0x38>

000007f0 <__eerd_word>:
     7f0:	df 92       	push	r13
     7f2:	ef 92       	push	r14
     7f4:	ff 92       	push	r15
     7f6:	0f 93       	push	r16
     7f8:	1f 93       	push	r17
     7fa:	7b 01       	movw	r14, r22
     7fc:	8c 01       	movw	r16, r24
     7fe:	fb 01       	movw	r30, r22
     800:	09 95       	icall
     802:	d8 2e       	mov	r13, r24
     804:	c8 01       	movw	r24, r16
     806:	01 96       	adiw	r24, 0x01	; 1
     808:	f7 01       	movw	r30, r14
     80a:	09 95       	icall
     80c:	98 2f       	mov	r25, r24
     80e:	8d 2d       	mov	r24, r13
     810:	1f 91       	pop	r17
     812:	0f 91       	pop	r16
     814:	ff 90       	pop	r15
     816:	ef 90       	pop	r14
     818:	df 90       	pop	r13
     81a:	08 95       	ret

0000081c <__eewr_word>:
     81c:	df 92       	push	r13
     81e:	ef 92       	push	r14
     820:	ff 92       	push	r15
     822:	0f 93       	push	r16
     824:	1f 93       	push	r17
     826:	d7 2e       	mov	r13, r23
     828:	7a 01       	movw	r14, r20
     82a:	8c 01       	movw	r16, r24
     82c:	fa 01       	movw	r30, r20
     82e:	09 95       	icall
     830:	c8 01       	movw	r24, r16
     832:	01 96       	adiw	r24, 0x01	; 1
     834:	6d 2d       	mov	r22, r13
     836:	f7 01       	movw	r30, r14
     838:	09 95       	icall
     83a:	1f 91       	pop	r17
     83c:	0f 91       	pop	r16
     83e:	ff 90       	pop	r15
     840:	ef 90       	pop	r14
     842:	df 90       	pop	r13
     844:	08 95       	ret

00000846 <__mulhi_const_10>:
     846:	7a e0       	ldi	r23, 0x0A	; 10
     848:	97 9f       	mul	r25, r23
     84a:	90 2d       	mov	r25, r0
     84c:	87 9f       	mul	r24, r23
     84e:	80 2d       	mov	r24, r0
     850:	91 0d       	add	r25, r1
     852:	11 24       	eor	r1, r1
     854:	08 95       	ret

00000856 <SimpleTSUint8Actuator::get() const>:
  public:
    // Return last value fetched by read(); undefined before first read().
    // Usually fast.
    // Often likely to be thread-safe or usable within ISRs (Interrupt Service Routines),
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual uint8_t get() const { return(value); }
     856:	fc 01       	movw	r30, r24
     858:	82 81       	ldd	r24, Z+2	; 0x02
     85a:	08 95       	ret

0000085c <AbstractRadValve::isValid(unsigned char) const>:
// Implementations may require poll() called at a fixed rate.
class AbstractRadValve : public SimpleTSUint8Actuator
  {
  public:
    // Returns true if this sensor reading value passed is valid, eg in range [0,100].
    virtual bool isValid(const uint8_t value) const { return(value <= 100); }
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	65 36       	cpi	r22, 0x65	; 101
     860:	08 f4       	brcc	.+2      	; 0x864 <AbstractRadValve::isValid(unsigned char) const+0x8>
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	08 95       	ret

00000866 <AbstractRadValve::setGlacialMode(bool)>:
    virtual bool isControlledValveReallyOpen() const { return((!isRecalibrating()) && (value >= getMinPercentOpen())); }

    // Enable/disable 'glacial' mode for heat-pump, district-heating
    // and similar slow-reponse and pay-by-volume environments.
    // Most useful at the abstract model level; ignored by default.
    virtual void setGlacialMode(bool glacial) { }
     866:	08 95       	ret

00000868 <AbstractRadValve::inGlacialMode() const>:

    // Returns true if this valve control is in glacial mode.
    // Default is to return false.
    virtual bool inGlacialMode() const { return(false); }
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	08 95       	ret

0000086c <ModelledRadValve::preferredPollInterval_s() const>:
    // Potentially expensive/slow.
    virtual uint8_t read() { valveMoved = computeCallForHeat(); return(value); }

    // Returns preferred poll interval (in seconds); non-zero.
    // Must be polled at near constant rate, about once per minute.
    virtual uint8_t preferredPollInterval_s() const { return(60); }
     86c:	8c e3       	ldi	r24, 0x3C	; 60
     86e:	08 95       	ret

00000870 <ModelledRadValve::getMinPercentOpen() const>:
// At the boiler hub this is also the threshold percentage-open on eavesdropped requests that will call for heat.
// If no override is set then DEFAULT_MIN_VALVE_PC_REALLY_OPEN is used.
// NOTE: raising this value temporarily (and shutting down the boiler immediately if possible) is one way to implement dynamic demand.
uint8_t ModelledRadValve::getMinValvePcReallyOpen()
  {
  if(0 != mVPRO_cache) { return(mVPRO_cache); } // Return cached value if possible.
     870:	90 91 04 02 	lds	r25, 0x0204
     874:	99 23       	and	r25, r25
     876:	79 f4       	brne	.+30     	; 0x896 <ModelledRadValve::getMinPercentOpen() const+0x26>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     878:	f9 99       	sbic	0x1f, 1	; 31
     87a:	fe cf       	rjmp	.-4      	; 0x878 <ModelledRadValve::getMinPercentOpen() const+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     87c:	83 e1       	ldi	r24, 0x13	; 19
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	92 bd       	out	0x22, r25	; 34
     882:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     884:	f8 9a       	sbi	0x1f, 0	; 31
     886:	90 b5       	in	r25, 0x20	; 32
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_MIN_VALVE_PC_REALLY_OPEN);
  const uint8_t result = ((stored > 0) && (stored <= 100)) ? stored : DEFAULT_MIN_VALVE_PC_REALLY_OPEN;
     888:	89 2f       	mov	r24, r25
     88a:	81 50       	subi	r24, 0x01	; 1
     88c:	84 36       	cpi	r24, 0x64	; 100
     88e:	08 f0       	brcs	.+2      	; 0x892 <ModelledRadValve::getMinPercentOpen() const+0x22>
     890:	9a e0       	ldi	r25, 0x0A	; 10
  mVPRO_cache = result; // Cache it.
     892:	90 93 04 02 	sts	0x0204, r25
    // then this should return true if any of the valves are (significantly) open.
    virtual bool isControlledValveReallyOpen() const;

    // Get estimated minimum percentage open for significant flow [1,99] for this device.
    // Return global node value.
    virtual uint8_t getMinPercentOpen() const { return(getMinValvePcReallyOpen()); }
     896:	89 2f       	mov	r24, r25
     898:	08 95       	ret

0000089a <inWarmMode()>:
// If true then is in WARM (or BAKE) mode; defaults to (starts as) false/FROST.
// Should be only be set when 'debounced'.
// Defaults to (starts as) false/FROST.
static bool isWarmMode;
// If true then the unit is in 'warm' (heating) mode, else 'frost' protection mode.
bool inWarmMode() { return(isWarmMode); }
     89a:	80 91 4a 02 	lds	r24, 0x024A
     89e:	08 95       	ret

000008a0 <setWarmModeDebounced(bool)>:
  DEBUG_SERIAL_PRINT_FLASHSTRING("Call to setWarmModeDebounced(");
  DEBUG_SERIAL_PRINT(warm);
  DEBUG_SERIAL_PRINT_FLASHSTRING(")");
  DEBUG_SERIAL_PRINTLN();
#endif
  isWarmMode = warm;
     8a0:	80 93 4a 02 	sts	0x024A, r24
#ifdef SUPPORT_BAKE
  if(!warm) { cancelBakeDebounced(); }
     8a4:	88 23       	and	r24, r24
     8a6:	11 f4       	brne	.+4      	; 0x8ac <setWarmModeDebounced(bool)+0xc>
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// Should be only be called once 'debounced' if coming from a button press for example.
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBakeDebounced() { bakeCountdownM = 0; }
     8a8:	10 92 46 02 	sts	0x0246, r1
     8ac:	08 95       	ret

000008ae <inBakeMode()>:

#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
     8ae:	80 91 4a 02 	lds	r24, 0x024A
     8b2:	88 23       	and	r24, r24
     8b4:	21 f0       	breq	.+8      	; 0x8be <inBakeMode()+0x10>
     8b6:	80 91 46 02 	lds	r24, 0x0246
     8ba:	81 11       	cpse	r24, r1
     8bc:	81 e0       	ldi	r24, 0x01	; 1
     8be:	08 95       	ret

000008c0 <cancelBakeDebounced()>:
// Should be only be called once 'debounced' if coming from a button press for example.
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBakeDebounced() { bakeCountdownM = 0; }
     8c0:	10 92 46 02 	sts	0x0246, r1
     8c4:	08 95       	ret

000008c6 <startBakeDebounced()>:
// Start/restart 'BAKE' mode and timeout.
// Should be only be called once 'debounced' if coming from a button press for example.
void startBakeDebounced() { isWarmMode = true; bakeCountdownM = BAKE_MAX_M; }
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	80 93 4a 02 	sts	0x024A, r24
     8cc:	8e e1       	ldi	r24, 0x1E	; 30
     8ce:	80 93 46 02 	sts	0x0246, r24
     8d2:	08 95       	ret

000008d4 <getFROSTTargetC()>:
  public:
    // Return last value fetched by read(); undefined before first read().
    // Usually fast.
    // Often likely to be thread-safe or usable within ISRs (Interrupt Service Routines),
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual uint8_t get() const { return(value); }
     8d4:	80 91 73 03 	lds	r24, 0x0373
uint8_t getFROSTTargetC()
  {
  // Crudely select between eco/comfort FROST levels at the half-way mark.
  // Should not be critical enough to worry over.
  // Prevent falling to lowest frost temperature if relative humidity is high (eg to avoid mould).
  const uint8_t result = (!hasEcoBias() || (RelHumidity.isAvailable() && RelHumidity.isRHHighWithHyst())) ? BIASCOM_FROST : BIASECO_FROST;
     8d8:	87 fd       	sbrc	r24, 7
     8da:	06 c0       	rjmp	.+12     	; 0x8e8 <getFROSTTargetC()+0x14>
    // Thread-safe and usable within ISRs (Interrupt Service Routines).
    bool isRHHigh() { return(get() > (HUMIDTY_HIGH_RHPC+HUMIDITY_EPSILON_RHPC)); }

    // True if RH% high with a hysteresis band of 2 * HUMIDITY_EPSILON_RHPC.
    // Thread-safe and usable within ISRs (Interrupt Service Routines).
    bool isRHHighWithHyst() { return(highWithHyst); }
     8dc:	80 91 6c 03 	lds	r24, 0x036C
     8e0:	88 23       	and	r24, r24
     8e2:	11 f4       	brne	.+4      	; 0x8e8 <getFROSTTargetC()+0x14>
     8e4:	27 e0       	ldi	r18, 0x07	; 7
     8e6:	01 c0       	rjmp	.+2      	; 0x8ea <getFROSTTargetC()+0x16>
     8e8:	2c e0       	ldi	r18, 0x0C	; 12
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     8ea:	f9 99       	sbic	0x1f, 1	; 31
     8ec:	fe cf       	rjmp	.-4      	; 0x8ea <getFROSTTargetC()+0x16>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     8ee:	8e e0       	ldi	r24, 0x0E	; 14
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	92 bd       	out	0x22, r25	; 34
     8f4:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     8f6:	f8 9a       	sbi	0x1f, 0	; 31
     8f8:	90 b5       	in	r25, 0x20	; 32
#if defined(SETTABLE_TARGET_TEMPERATURES)
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_FROST_C);
  // If stored value is set and in bounds and higher than computed value then use stored value instead.
  if((stored >= MIN_TARGET_C) && (stored <= MAX_TARGET_C) && (stored > result)) { return(stored); }
     8fa:	89 2f       	mov	r24, r25
     8fc:	85 50       	subi	r24, 0x05	; 5
     8fe:	8b 35       	cpi	r24, 0x5B	; 91
     900:	10 f0       	brcs	.+4      	; 0x906 <__stack+0x7>
     902:	82 2f       	mov	r24, r18
     904:	08 95       	ret
     906:	89 2f       	mov	r24, r25
     908:	92 17       	cp	r25, r18
     90a:	08 f4       	brcc	.+2      	; 0x90e <__stack+0xf>
     90c:	82 2f       	mov	r24, r18
#endif
  return(result);
  }
     90e:	08 95       	ret

00000910 <getWARMTargetC()>:
     910:	20 91 73 03 	lds	r18, 0x0373
  // Cached input and result values; initially zero.
  static uint8_t potLast;
  static uint8_t resultLast;
  // Force recompuation if pot value changed
  // or apparently no calc done yet (unlikely/impossible zero cached result).
  if((potLast != pot) || (0 == resultLast))
     914:	80 91 49 02 	lds	r24, 0x0249
     918:	82 17       	cp	r24, r18
     91a:	21 f4       	brne	.+8      	; 0x924 <getWARMTargetC()+0x14>
     91c:	80 91 48 02 	lds	r24, 0x0248
     920:	88 23       	and	r24, r24
     922:	79 f4       	brne	.+30     	; 0x942 <getWARMTargetC()+0x32>
  const uint8_t high = (BIASCOM_WARM+1);
  const uint8_t range = high - low + 1;
  const uint8_t band = 256 / range; // Width of band for each degree C...

  // If relatively small number of distinct temperature values...
  if(pot >= 256 - band) { return(high); } // At top... (optimisation / robustness)
     924:	24 3e       	cpi	r18, 0xE4	; 228
     926:	10 f0       	brcs	.+4      	; 0x92c <getWARMTargetC()+0x1c>
     928:	88 e1       	ldi	r24, 0x18	; 24
     92a:	07 c0       	rjmp	.+14     	; 0x93a <getWARMTargetC()+0x2a>
     92c:	9c e1       	ldi	r25, 0x1C	; 28
     92e:	80 e1       	ldi	r24, 0x10	; 16
     930:	02 c0       	rjmp	.+4      	; 0x936 <getWARMTargetC()+0x26>
  if(range < 10)
    {
    uint8_t result = low;
    for(uint8_t ppot = band; ppot < pot; ++result) { ppot += band; }
     932:	94 5e       	subi	r25, 0xE4	; 228
     934:	8f 5f       	subi	r24, 0xFF	; 255
     936:	92 17       	cp	r25, r18
     938:	e0 f3       	brcs	.-8      	; 0x932 <getWARMTargetC()+0x22>
  // or apparently no calc done yet (unlikely/impossible zero cached result).
  if((potLast != pot) || (0 == resultLast))
    {
    const uint8_t result = computeWARMTargetC(pot);
    // Cache input/result.
    resultLast = result;
     93a:	80 93 48 02 	sts	0x0248, r24
    potLast = pot;
     93e:	20 93 49 02 	sts	0x0249, r18
    return(result);
    }

  // Return cached result.
  return(resultLast);
  }
     942:	08 95       	ret

00000944 <getMinBoilerOnMinutes()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     944:	f9 99       	sbic	0x1f, 1	; 31
     946:	fe cf       	rjmp	.-4      	; 0x944 <getMinBoilerOnMinutes()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     948:	82 e1       	ldi	r24, 0x12	; 18
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	92 bd       	out	0x22, r25	; 34
     94e:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     950:	f8 9a       	sbi	0x1f, 0	; 31
     952:	80 b5       	in	r24, 0x20	; 32
#endif


#ifndef getMinBoilerOnMinutes
// Get minimum on (and off) time for pointer (minutes); zero if not in hub mode.
uint8_t getMinBoilerOnMinutes() { return(~eeprom_read_byte((uint8_t *)EE_START_MIN_BOILER_ON_MINS_INV)); }
     954:	80 95       	com	r24
     956:	08 95       	ret

00000958 <markAsOccupied()>:

// Call when some strong evidence of room occupation has occurred.
// Such evidence may include operation of buttons (etc) on the unit or PIR.
// Do not call from (for example) 'on' schedule change.
// Thread-safe and ISR-safe.
void markAsOccupied() { occupationCountdownM = OCCUPATION_TIMEOUT_M; }
     958:	8d e2       	ldi	r24, 0x2D	; 45
     95a:	80 93 47 02 	sts	0x0247, r24
     95e:	08 95       	ret

00000960 <markAsPossiblyOccupied()>:
// Call when some/weak evidence of room occupation, such as light going on.
// Also use to simulate demand on behalf of user, eg for some part of schedule.
// In this implementation sets the timeout to half the usual time (unless already higher),
// which shouldn't force the room to appear recently occupied.
// Thread-safe.
void markAsPossiblyOccupied()
     960:	df 93       	push	r29
     962:	cf 93       	push	r28
     964:	00 d0       	rcall	.+0      	; 0x966 <markAsPossiblyOccupied()+0x6>
     966:	cd b7       	in	r28, 0x3d	; 61
     968:	de b7       	in	r29, 0x3e	; 62
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
     96a:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     96c:	f8 94       	cli
    {
    occupationCountdownM = fnmax((uint8_t)occupationCountdownM, (uint8_t)(OCCUPATION_TIMEOUT_M/2));
     96e:	90 91 47 02 	lds	r25, 0x0247



// Templated function versions of min/max that do not evaluate the arguments twice.
template <class T> const T& fnmin(const T& a, const T& b) { return((a>b)?b:a); }
template <class T> const T& fnmax(const T& a, const T& b) { return((a<b)?b:a); }
     972:	96 31       	cpi	r25, 0x16	; 22
     974:	10 f4       	brcc	.+4      	; 0x97a <markAsPossiblyOccupied()+0x1a>
     976:	86 e1       	ldi	r24, 0x16	; 22
     978:	01 c0       	rjmp	.+2      	; 0x97c <markAsPossiblyOccupied()+0x1c>
     97a:	89 2f       	mov	r24, r25
     97c:	80 93 47 02 	sts	0x0247, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     980:	2f bf       	out	0x3f, r18	; 63
     982:	86 e1       	ldi	r24, 0x16	; 22
     984:	8a 83       	std	Y+2, r24	; 0x02
     986:	99 83       	std	Y+1, r25	; 0x01
    }
  }
     988:	0f 90       	pop	r0
     98a:	0f 90       	pop	r0
     98c:	cf 91       	pop	r28
     98e:	df 91       	pop	r29
     990:	08 95       	ret

00000992 <ModelledRadValve::getMinValvePcReallyOpen()>:
// At the boiler hub this is also the threshold percentage-open on eavesdropped requests that will call for heat.
// If no override is set then DEFAULT_MIN_VALVE_PC_REALLY_OPEN is used.
// NOTE: raising this value temporarily (and shutting down the boiler immediately if possible) is one way to implement dynamic demand.
uint8_t ModelledRadValve::getMinValvePcReallyOpen()
  {
  if(0 != mVPRO_cache) { return(mVPRO_cache); } // Return cached value if possible.
     992:	80 91 04 02 	lds	r24, 0x0204
     996:	88 23       	and	r24, r24
     998:	89 f4       	brne	.+34     	; 0x9bc <ModelledRadValve::getMinValvePcReallyOpen()+0x2a>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     99a:	f9 99       	sbic	0x1f, 1	; 31
     99c:	fe cf       	rjmp	.-4      	; 0x99a <ModelledRadValve::getMinValvePcReallyOpen()+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     99e:	83 e1       	ldi	r24, 0x13	; 19
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	92 bd       	out	0x22, r25	; 34
     9a4:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     9a6:	f8 9a       	sbi	0x1f, 0	; 31
     9a8:	90 b5       	in	r25, 0x20	; 32
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_MIN_VALVE_PC_REALLY_OPEN);
  const uint8_t result = ((stored > 0) && (stored <= 100)) ? stored : DEFAULT_MIN_VALVE_PC_REALLY_OPEN;
     9aa:	89 2f       	mov	r24, r25
     9ac:	81 50       	subi	r24, 0x01	; 1
     9ae:	84 36       	cpi	r24, 0x64	; 100
     9b0:	10 f0       	brcs	.+4      	; 0x9b6 <ModelledRadValve::getMinValvePcReallyOpen()+0x24>
     9b2:	8a e0       	ldi	r24, 0x0A	; 10
     9b4:	01 c0       	rjmp	.+2      	; 0x9b8 <ModelledRadValve::getMinValvePcReallyOpen()+0x26>
     9b6:	89 2f       	mov	r24, r25
  mVPRO_cache = result; // Cache it.
     9b8:	80 93 04 02 	sts	0x0204, r24
  return(result);
  }
     9bc:	08 95       	ret

000009be <ModelledRadValve::computeRequiredTRVPercentOpen()>:


// Set heat demand with some hysteresis and a hint of proportional control.
// Always be willing to turn off quickly, but on slowly (AKA "slow start" algorithm),
// and try to eliminate unnecessary 'hunting' which makes noise and uses actuator energy.
bool ModelledRadValve::computeRequiredTRVPercentOpen()
     9be:	fc 01       	movw	r30, r24
    virtual int read();

    // Return last value fetched by read(); undefined before first read().
    // Fast.
    // Not thread-safe nor usable within ISRs (Interrupt Service Routines).
    virtual int get() const { return(value); }
     9c0:	40 91 6f 03 	lds	r20, 0x036F
     9c4:	50 91 70 03 	lds	r21, 0x0370
  {
  bool changed = false;

  const int currentTempC16 = TemperatureC16.get();
  const uint8_t currentTempC = (uint8_t)(currentTempC16 >> 4);
     9c8:	ca 01       	movw	r24, r20
     9ca:	24 e0       	ldi	r18, 0x04	; 4
     9cc:	95 95       	asr	r25
     9ce:	87 95       	ror	r24
     9d0:	2a 95       	dec	r18
     9d2:	e1 f7       	brne	.-8      	; 0x9cc <ModelledRadValve::computeRequiredTRVPercentOpen()+0xe>

  if(currentTempC < targetTempC) // (Well) under temp target: open valve.
     9d4:	23 81       	ldd	r18, Z+3	; 0x03
     9d6:	82 17       	cp	r24, r18
     9d8:	b0 f5       	brcc	.+108    	; 0xa46 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x88>
    {
    // Limit valve open slew to help minimise overshoot and actuator noise.
    // This should also reduce nugatory setting changes when occupancy (etc) is fluctuating.
    // Thus it may take several minutes to turn the radiator fully on,
    // though probably opening the first 30% will allow near-maximum heat output in practice.
    if(value != 100)
     9da:	82 81       	ldd	r24, Z+2	; 0x02
     9dc:	84 36       	cpi	r24, 0x64	; 100
     9de:	09 f4       	brne	.+2      	; 0x9e2 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x24>
     9e0:	dc c0       	rjmp	.+440    	; 0xb9a <ModelledRadValve::computeRequiredTRVPercentOpen()+0x1dc>

#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
     9e2:	80 91 4a 02 	lds	r24, 0x024A
     9e6:	88 23       	and	r24, r24
     9e8:	09 f4       	brne	.+2      	; 0x9ec <ModelledRadValve::computeRequiredTRVPercentOpen()+0x2e>
     9ea:	d9 c0       	rjmp	.+434    	; 0xb9e <ModelledRadValve::computeRequiredTRVPercentOpen()+0x1e0>
     9ec:	80 91 46 02 	lds	r24, 0x0246
     9f0:	88 23       	and	r24, r24
     9f2:	09 f4       	brne	.+2      	; 0x9f6 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x38>
     9f4:	d4 c0       	rjmp	.+424    	; 0xb9e <ModelledRadValve::computeRequiredTRVPercentOpen()+0x1e0>
     9f6:	20 c0       	rjmp	.+64     	; 0xa38 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x7a>
    if(value != 100)
      {
#if defined(SUPPORT_BAKE) && !defined(TRV_SLEW_GLACIAL)
      // If room is well below target and in BAKE mode then immediately open to 100%, unless always glacial.
      // Need debounced bake mode value to avoid spurious slamming open of the valve if user cycles through modes.
      if(inBakeMode()) { value = 100; }
     9f8:	2a e0       	ldi	r18, 0x0A	; 10
// At the boiler hub this is also the threshold percentage-open on eavesdropped requests that will call for heat.
// If no override is set then DEFAULT_MIN_VALVE_PC_REALLY_OPEN is used.
// NOTE: raising this value temporarily (and shutting down the boiler immediately if possible) is one way to implement dynamic demand.
uint8_t ModelledRadValve::getMinValvePcReallyOpen()
  {
  if(0 != mVPRO_cache) { return(mVPRO_cache); } // Return cached value if possible.
     9fa:	90 91 04 02 	lds	r25, 0x0204
     9fe:	99 23       	and	r25, r25
     a00:	79 f4       	brne	.+30     	; 0xa20 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x62>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     a02:	f9 99       	sbic	0x1f, 1	; 31
     a04:	fe cf       	rjmp	.-4      	; 0xa02 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x44>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     a06:	83 e1       	ldi	r24, 0x13	; 19
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	92 bd       	out	0x22, r25	; 34
     a0c:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     a0e:	f8 9a       	sbi	0x1f, 0	; 31
     a10:	90 b5       	in	r25, 0x20	; 32
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_MIN_VALVE_PC_REALLY_OPEN);
  const uint8_t result = ((stored > 0) && (stored <= 100)) ? stored : DEFAULT_MIN_VALVE_PC_REALLY_OPEN;
     a12:	89 2f       	mov	r24, r25
     a14:	81 50       	subi	r24, 0x01	; 1
     a16:	84 36       	cpi	r24, 0x64	; 100
     a18:	08 f0       	brcs	.+2      	; 0xa1c <ModelledRadValve::computeRequiredTRVPercentOpen()+0x5e>
     a1a:	9a e0       	ldi	r25, 0x0A	; 10
  mVPRO_cache = result; // Cache it.
     a1c:	90 93 04 02 	sts	0x0204, r25
     a20:	92 17       	cp	r25, r18
     a22:	08 f4       	brcc	.+2      	; 0xa26 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x68>
     a24:	92 2f       	mov	r25, r18
        {
#if !defined(TRV_SLEW_GLACIAL)
        // Ensure open quickly from cold (unless glacial) for decent response.
        const uint8_t slewRate = ((!hasEcoBias()) ? TRV_SLEW_PC_PER_MIN_VFAST : TRV_SLEW_PC_PER_MIN_FAST);
        const uint8_t minOpenFromCold = fnmax(slewRate, NominalRadValve.getMinPercentOpen());
        if(value < minOpenFromCold) { value = minOpenFromCold; }
     a26:	82 81       	ldd	r24, Z+2	; 0x02
     a28:	89 17       	cp	r24, r25
     a2a:	10 f4       	brcc	.+4      	; 0xa30 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x72>
     a2c:	92 83       	std	Z+2, r25	; 0x02
     a2e:	c1 c0       	rjmp	.+386    	; 0xbb2 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x1f4>
        // Slew open relatively gently...
        else
#endif
          {
#if !defined(TRV_SLEW_GLACIAL) // Unless glacial, open faster than usual even with eco bias, and even faster with comfort.
          const uint8_t tmp = value + slewRate;
     a30:	82 81       	ldd	r24, Z+2	; 0x02
     a32:	82 0f       	add	r24, r18
#else
          const uint8_t tmp = value + TRV_MAX_SLEW_PC_PER_MIN;
#endif
          if(tmp > 100) { value = 100; } // Capped at 100%.
     a34:	85 36       	cpi	r24, 0x65	; 101
     a36:	10 f0       	brcs	.+4      	; 0xa3c <ModelledRadValve::computeRequiredTRVPercentOpen()+0x7e>
     a38:	84 e6       	ldi	r24, 0x64	; 100
     a3a:	59 c0       	rjmp	.+178    	; 0xaee <ModelledRadValve::computeRequiredTRVPercentOpen()+0x130>
          else
            {
#if defined(VALVE_TURN_OFF_LINGER) && (DEFAULT_MIN_VALVE_PC_REALLY_OPEN > TRV_MAX_SLEW_PC_PER_MIN)
            // Ensure valve will be immediately significantly opened (and that linger can work properly).
            if(tmp < DEFAULT_MIN_VALVE_PC_REALLY_OPEN) { value = DEFAULT_MIN_VALVE_PC_REALLY_OPEN; }
     a3c:	8a 30       	cpi	r24, 0x0A	; 10
     a3e:	08 f0       	brcs	.+2      	; 0xa42 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x84>
     a40:	56 c0       	rjmp	.+172    	; 0xaee <ModelledRadValve::computeRequiredTRVPercentOpen()+0x130>
     a42:	8a e0       	ldi	r24, 0x0A	; 10
     a44:	54 c0       	rjmp	.+168    	; 0xaee <ModelledRadValve::computeRequiredTRVPercentOpen()+0x130>
          }
        }
      changed = true; // TRV setting has been changed.
      }
    }
  else if(currentTempC > targetTempC) // (Well) over temp target: close valve if not yet closed.
     a46:	28 17       	cp	r18, r24
     a48:	08 f0       	brcs	.+2      	; 0xa4c <ModelledRadValve::computeRequiredTRVPercentOpen()+0x8e>
     a4a:	53 c0       	rjmp	.+166    	; 0xaf2 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x134>
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// Should be only be called once 'debounced' if coming from a button press for example.
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBakeDebounced() { bakeCountdownM = 0; }
     a4c:	10 92 46 02 	sts	0x0246, r1
      }
    }
  else if(currentTempC > targetTempC) // (Well) over temp target: close valve if not yet closed.
    {
    cancelBakeDebounced(); // Ensure BAKE mode cancelled immediately if over target (eg when target is BAKE).
    if(value != 0)
     a50:	82 81       	ldd	r24, Z+2	; 0x02
     a52:	88 23       	and	r24, r24
     a54:	09 f4       	brne	.+2      	; 0xa58 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x9a>
     a56:	a1 c0       	rjmp	.+322    	; 0xb9a <ModelledRadValve::computeRequiredTRVPercentOpen()+0x1dc>
// At the boiler hub this is also the threshold percentage-open on eavesdropped requests that will call for heat.
// If no override is set then DEFAULT_MIN_VALVE_PC_REALLY_OPEN is used.
// NOTE: raising this value temporarily (and shutting down the boiler immediately if possible) is one way to implement dynamic demand.
uint8_t ModelledRadValve::getMinValvePcReallyOpen()
  {
  if(0 != mVPRO_cache) { return(mVPRO_cache); } // Return cached value if possible.
     a58:	90 91 04 02 	lds	r25, 0x0204
     a5c:	99 23       	and	r25, r25
     a5e:	99 f4       	brne	.+38     	; 0xa86 <ModelledRadValve::computeRequiredTRVPercentOpen()+0xc8>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     a60:	f9 99       	sbic	0x1f, 1	; 31
     a62:	fe cf       	rjmp	.-4      	; 0xa60 <ModelledRadValve::computeRequiredTRVPercentOpen()+0xa2>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     a64:	83 e1       	ldi	r24, 0x13	; 19
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	92 bd       	out	0x22, r25	; 34
     a6a:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     a6c:	f8 9a       	sbi	0x1f, 0	; 31
     a6e:	90 b5       	in	r25, 0x20	; 32
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_MIN_VALVE_PC_REALLY_OPEN);
  const uint8_t result = ((stored > 0) && (stored <= 100)) ? stored : DEFAULT_MIN_VALVE_PC_REALLY_OPEN;
     a70:	89 2f       	mov	r24, r25
     a72:	81 50       	subi	r24, 0x01	; 1
     a74:	84 36       	cpi	r24, 0x64	; 100
     a76:	08 f0       	brcs	.+2      	; 0xa7a <ModelledRadValve::computeRequiredTRVPercentOpen()+0xbc>
     a78:	9a e0       	ldi	r25, 0x0A	; 10
  mVPRO_cache = result; // Cache it.
     a7a:	90 93 04 02 	sts	0x0204, r25
      // Continue shutting valve as not yet closed.
#if defined(VALVE_TURN_OFF_LINGER) // && (DEFAULT_MIN_VALVE_PC_REALLY_OPEN > 0)
      // TODO-117: allow very slow final turn off to help systems with poor bypass, ~1% per minute.
      // Special slow-turn-off rules for final part of travel at/below DEFAULT_MIN_VALVE_PC_REALLY_OPEN floor.
      const uint8_t minReallyOpen = NominalRadValve.getMinPercentOpen();
      const uint8_t lingerThreshold = (minReallyOpen > 0) ? (minReallyOpen-1) : 0;
     a7e:	99 23       	and	r25, r25
     a80:	11 f4       	brne	.+4      	; 0xa86 <ModelledRadValve::computeRequiredTRVPercentOpen()+0xc8>
     a82:	40 e0       	ldi	r20, 0x00	; 0
     a84:	02 c0       	rjmp	.+4      	; 0xa8a <ModelledRadValve::computeRequiredTRVPercentOpen()+0xcc>
     a86:	49 2f       	mov	r20, r25
     a88:	41 50       	subi	r20, 0x01	; 1
//      const uint8_t lingerThreshold = DEFAULT_MIN_VALVE_PC_REALLY_OPEN - 1; // Should be below 'call for heat' threshold.
      if(value < minReallyOpen)
     a8a:	82 81       	ldd	r24, Z+2	; 0x02
     a8c:	89 17       	cp	r24, r25
     a8e:	70 f4       	brcc	.+28     	; 0xaac <ModelledRadValve::computeRequiredTRVPercentOpen()+0xee>
        {
        // If lingered long enough then do final chunk in one burst to help avoid valve hiss and temperature overshoot.
        if((DEFAULT_MAX_RUN_ON_TIME_M < minReallyOpen) && (value < minReallyOpen - DEFAULT_MAX_RUN_ON_TIME_M))
     a90:	96 30       	cpi	r25, 0x06	; 6
     a92:	08 f4       	brcc	.+2      	; 0xa96 <ModelledRadValve::computeRequiredTRVPercentOpen()+0xd8>
     a94:	8a c0       	rjmp	.+276    	; 0xbaa <ModelledRadValve::computeRequiredTRVPercentOpen()+0x1ec>
     a96:	22 81       	ldd	r18, Z+2	; 0x02
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	89 2f       	mov	r24, r25
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	05 97       	sbiw	r24, 0x05	; 5
     aa0:	28 17       	cp	r18, r24
     aa2:	39 07       	cpc	r19, r25
     aa4:	0c f0       	brlt	.+2      	; 0xaa8 <ModelledRadValve::computeRequiredTRVPercentOpen()+0xea>
     aa6:	81 c0       	rjmp	.+258    	; 0xbaa <ModelledRadValve::computeRequiredTRVPercentOpen()+0x1ec>
          { value = 0; } // Shut right off.
     aa8:	12 82       	std	Z+2, r1	; 0x02
     aaa:	83 c0       	rjmp	.+262    	; 0xbb2 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x1f4>
     aac:	80 91 73 03 	lds	r24, 0x0373
#else
      // No special linger threshold.
      const uint8_t lingerThreshold = 0; // Fully off.
#endif
      // TODO-109: with comfort bias (or at hub because of self-heating temp errors) slew to off relatively slowly.
      if(((!hasEcoBias()) || inHubMode()) && (value > constrain(((int)lingerThreshold) + TRV_SLEW_PC_PER_MIN_VFAST, TRV_SLEW_PC_PER_MIN_VFAST, 100))) { value -= TRV_SLEW_PC_PER_MIN_VFAST; }
     ab0:	87 fd       	sbrc	r24, 7
     ab2:	0b c0       	rjmp	.+22     	; 0xaca <ModelledRadValve::computeRequiredTRVPercentOpen()+0x10c>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     ab4:	f9 99       	sbic	0x1f, 1	; 31
     ab6:	fe cf       	rjmp	.-4      	; 0xab4 <ModelledRadValve::computeRequiredTRVPercentOpen()+0xf6>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     ab8:	82 e1       	ldi	r24, 0x12	; 18
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	92 bd       	out	0x22, r25	; 34
     abe:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     ac0:	f8 9a       	sbi	0x1f, 0	; 31
     ac2:	80 b5       	in	r24, 0x20	; 32
     ac4:	8f 3f       	cpi	r24, 0xFF	; 255
     ac6:	09 f4       	brne	.+2      	; 0xaca <ModelledRadValve::computeRequiredTRVPercentOpen()+0x10c>
     ac8:	73 c0       	rjmp	.+230    	; 0xbb0 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x1f2>
     aca:	82 81       	ldd	r24, Z+2	; 0x02
     acc:	24 2f       	mov	r18, r20
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	21 35       	cpi	r18, 0x51	; 81
     ad2:	31 05       	cpc	r19, r1
     ad4:	1c f0       	brlt	.+6      	; 0xadc <ModelledRadValve::computeRequiredTRVPercentOpen()+0x11e>
     ad6:	24 e6       	ldi	r18, 0x64	; 100
     ad8:	30 e0       	ldi	r19, 0x00	; 0
     ada:	02 c0       	rjmp	.+4      	; 0xae0 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x122>
     adc:	2c 5e       	subi	r18, 0xEC	; 236
     ade:	3f 4f       	sbci	r19, 0xFF	; 255
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	28 17       	cp	r18, r24
     ae4:	39 07       	cpc	r19, r25
     ae6:	0c f0       	brlt	.+2      	; 0xaea <ModelledRadValve::computeRequiredTRVPercentOpen()+0x12c>
     ae8:	63 c0       	rjmp	.+198    	; 0xbb0 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x1f2>
     aea:	82 81       	ldd	r24, Z+2	; 0x02
     aec:	84 51       	subi	r24, 0x14	; 20
     aee:	82 83       	std	Z+2, r24	; 0x02
     af0:	60 c0       	rjmp	.+192    	; 0xbb2 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x1f4>
// At the boiler hub this is also the threshold percentage-open on eavesdropped requests that will call for heat.
// If no override is set then DEFAULT_MIN_VALVE_PC_REALLY_OPEN is used.
// NOTE: raising this value temporarily (and shutting down the boiler immediately if possible) is one way to implement dynamic demand.
uint8_t ModelledRadValve::getMinValvePcReallyOpen()
  {
  if(0 != mVPRO_cache) { return(mVPRO_cache); } // Return cached value if possible.
     af2:	20 91 04 02 	lds	r18, 0x0204
     af6:	22 23       	and	r18, r18
     af8:	79 f4       	brne	.+30     	; 0xb18 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x15a>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     afa:	f9 99       	sbic	0x1f, 1	; 31
     afc:	fe cf       	rjmp	.-4      	; 0xafa <ModelledRadValve::computeRequiredTRVPercentOpen()+0x13c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     afe:	83 e1       	ldi	r24, 0x13	; 19
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	92 bd       	out	0x22, r25	; 34
     b04:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     b06:	f8 9a       	sbi	0x1f, 0	; 31
     b08:	20 b5       	in	r18, 0x20	; 32
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_MIN_VALVE_PC_REALLY_OPEN);
  const uint8_t result = ((stored > 0) && (stored <= 100)) ? stored : DEFAULT_MIN_VALVE_PC_REALLY_OPEN;
     b0a:	82 2f       	mov	r24, r18
     b0c:	81 50       	subi	r24, 0x01	; 1
     b0e:	84 36       	cpi	r24, 0x64	; 100
     b10:	08 f0       	brcs	.+2      	; 0xb14 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x156>
     b12:	2a e0       	ldi	r18, 0x0A	; 10
  mVPRO_cache = result; // Cache it.
     b14:	20 93 04 02 	sts	0x0204, r18
    }
  else // Close to (or at) temp target: set valve partly open to try to tightly regulate.
    {
    // Use currentTempC16 lsbits to set valve percentage for proportional feedback
    // to provide more efficient and quieter TRV drive and probably more stable room temperature.
    uint8_t tmp = (uint8_t) (currentTempC16 & 0xf); // Only interested in lsbits.
     b18:	84 2f       	mov	r24, r20
     b1a:	8f 70       	andi	r24, 0x0F	; 15
     b1c:	90 e1       	ldi	r25, 0x10	; 16
     b1e:	98 1b       	sub	r25, r24
     b20:	86 e0       	ldi	r24, 0x06	; 6
     b22:	98 9f       	mul	r25, r24
     b24:	c0 01       	movw	r24, r0
     b26:	11 24       	eor	r1, r1
     b28:	32 2f       	mov	r19, r18
     b2a:	28 17       	cp	r18, r24
     b2c:	08 f4       	brcc	.+2      	; 0xb30 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x172>
     b2e:	38 2f       	mov	r19, r24
#else
    // Use as-is.
    const uint8_t targetPO = targetPORaw;
#endif
    // Reduce spurious valve/boiler adjustment by avoiding movement at all unless current error is significant.
    if(targetPO != value)
     b30:	82 81       	ldd	r24, Z+2	; 0x02
     b32:	38 17       	cp	r19, r24
     b34:	91 f1       	breq	.+100    	; 0xb9a <ModelledRadValve::computeRequiredTRVPercentOpen()+0x1dc>
    bool isRoomLit() const { return(isRoomLitFlag); }

    // Returns true if room is light enough for someone to be active.
    // False if unknown.
    // Thread-safe and usable within ISRs (Interrupt Service Routines).
    bool isRoomDark() const { return(!isRoomLitFlag); }
     b36:	80 91 68 03 	lds	r24, 0x0368
      {
      // Compute the minimum/epsilon slew adjustment allowed.
      // Raise this minimum in dark/quiet/unoccupied room to minimise disturbance and battery use.
      const bool minimiseSlew = AmbLight.isRoomDark() || isLikelyUnoccupied();
     b3a:	88 23       	and	r24, r24
     b3c:	39 f0       	breq	.+14     	; 0xb4c <ModelledRadValve::computeRequiredTRVPercentOpen()+0x18e>

// Returns true if the room appears to be likely occupied (with active users) now.
// Operates on a timeout; calling markAsOccupied() restarts the timer.
// Defaults to false (and API still exists) when OCCUPANCY_SUPPORT not defined.
// Thread-safe.
bool isLikelyOccupied() { return(0 != occupationCountdownM); }
     b3e:	80 91 47 02 	lds	r24, 0x0247
    // Reduce spurious valve/boiler adjustment by avoiding movement at all unless current error is significant.
    if(targetPO != value)
      {
      // Compute the minimum/epsilon slew adjustment allowed.
      // Raise this minimum in dark/quiet/unoccupied room to minimise disturbance and battery use.
      const bool minimiseSlew = AmbLight.isRoomDark() || isLikelyUnoccupied();
     b42:	88 23       	and	r24, r24
     b44:	19 f0       	breq	.+6      	; 0xb4c <ModelledRadValve::computeRequiredTRVPercentOpen()+0x18e>
     b46:	87 e0       	ldi	r24, 0x07	; 7
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	02 c0       	rjmp	.+4      	; 0xb50 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x192>
     b4c:	8e e0       	ldi	r24, 0x0E	; 14
     b4e:	90 e0       	ldi	r25, 0x00	; 0
      const uint8_t minAbsSlew = fnmax((1+ulpStep), minimiseSlew ? (2*TRV_MIN_SLEW_PC) : TRV_MIN_SLEW_PC);
     b50:	98 2f       	mov	r25, r24
      if(targetPO < value) // Currently open more than required.
     b52:	82 81       	ldd	r24, Z+2	; 0x02
     b54:	38 17       	cp	r19, r24
     b56:	38 f4       	brcc	.+14     	; 0xb66 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x1a8>
        {
        const uint8_t slew = value - targetPO;
     b58:	82 81       	ldd	r24, Z+2	; 0x02
        if(slew >= minAbsSlew) // Ensure no hunting for 1ulp temperature wobble.
     b5a:	83 1b       	sub	r24, r19
     b5c:	89 17       	cp	r24, r25
     b5e:	e8 f0       	brcs	.+58     	; 0xb9a <ModelledRadValve::computeRequiredTRVPercentOpen()+0x1dc>
          {
          if(slew > TRV_MAX_SLEW_PC_PER_MIN)
              { value -= TRV_MAX_SLEW_PC_PER_MIN; } // Cap slew rate.
     b60:	82 81       	ldd	r24, Z+2	; 0x02
     b62:	85 50       	subi	r24, 0x05	; 5
     b64:	c4 cf       	rjmp	.-120    	; 0xaee <ModelledRadValve::computeRequiredTRVPercentOpen()+0x130>
          changed = true; // TRV setting has been changed.
          }
        }
      else // if(targetPO > TRVPercentOpen) // Currently open less than required.
        {
        const uint8_t slew = targetPO - value;
     b66:	82 81       	ldd	r24, Z+2	; 0x02
     b68:	43 2f       	mov	r20, r19
     b6a:	48 1b       	sub	r20, r24
        if(slew >= minAbsSlew) // Ensure no hunting for 1ulp temperature wobble.
     b6c:	49 17       	cp	r20, r25
     b6e:	a8 f0       	brcs	.+42     	; 0xb9a <ModelledRadValve::computeRequiredTRVPercentOpen()+0x1dc>

#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
     b70:	80 91 4a 02 	lds	r24, 0x024A
     b74:	88 23       	and	r24, r24
     b76:	f9 f0       	breq	.+62     	; 0xbb6 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x1f8>
     b78:	80 91 46 02 	lds	r24, 0x0246
     b7c:	88 23       	and	r24, r24
     b7e:	d9 f0       	breq	.+54     	; 0xbb6 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x1f8>
          const uint8_t maxSlew = (inBakeMode() || !hasEcoBias()) ?
              TRV_SLEW_PC_PER_MIN_FAST : TRV_MAX_SLEW_PC_PER_MIN;
#else
          const uint8_t maxSlew = TRV_MIN_SLEW_PC_PER_MIN;
#endif
          if(slew > maxSlew)
     b80:	4b 30       	cpi	r20, 0x0B	; 11
     b82:	48 f0       	brcs	.+18     	; 0xb96 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x1d8>
     b84:	9a e0       	ldi	r25, 0x0A	; 10
              {
              value += maxSlew; // Cap slew rate open.
     b86:	82 81       	ldd	r24, Z+2	; 0x02
     b88:	98 0f       	add	r25, r24
     b8a:	92 83       	std	Z+2, r25	; 0x02
#if !defined(TRV_SLEW_GLACIAL)
              if(value < minReallyOpen) { value = minReallyOpen; } // Force to minimum anyway.
     b8c:	82 81       	ldd	r24, Z+2	; 0x02
     b8e:	82 17       	cp	r24, r18
     b90:	80 f4       	brcc	.+32     	; 0xbb2 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x1f4>
     b92:	22 83       	std	Z+2, r18	; 0x02
     b94:	0e c0       	rjmp	.+28     	; 0xbb2 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x1f4>
#endif
              }
          else
              { value = targetPO; } // Adjust directly to target.
     b96:	32 83       	std	Z+2, r19	; 0x02
     b98:	0c c0       	rjmp	.+24     	; 0xbb2 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x1f4>
     b9a:	80 e0       	ldi	r24, 0x00	; 0
        }
      }
    }

  return(changed);
  }
     b9c:	08 95       	ret
     b9e:	80 91 73 03 	lds	r24, 0x0373
      else
#endif
        {
#if !defined(TRV_SLEW_GLACIAL)
        // Ensure open quickly from cold (unless glacial) for decent response.
        const uint8_t slewRate = ((!hasEcoBias()) ? TRV_SLEW_PC_PER_MIN_VFAST : TRV_SLEW_PC_PER_MIN_FAST);
     ba2:	87 ff       	sbrs	r24, 7
     ba4:	29 cf       	rjmp	.-430    	; 0x9f8 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x3a>
     ba6:	24 e1       	ldi	r18, 0x14	; 20
     ba8:	28 cf       	rjmp	.-432    	; 0x9fa <ModelledRadValve::computeRequiredTRVPercentOpen()+0x3c>
        {
        // If lingered long enough then do final chunk in one burst to help avoid valve hiss and temperature overshoot.
        if((DEFAULT_MAX_RUN_ON_TIME_M < minReallyOpen) && (value < minReallyOpen - DEFAULT_MAX_RUN_ON_TIME_M))
          { value = 0; } // Shut right off.
        else
          { --value; } // Turn down as slowly as reasonably possible to help boiler cool.
     baa:	82 81       	ldd	r24, Z+2	; 0x02
     bac:	81 50       	subi	r24, 0x01	; 1
     bae:	9f cf       	rjmp	.-194    	; 0xaee <ModelledRadValve::computeRequiredTRVPercentOpen()+0x130>
#endif
      // TODO-109: with comfort bias (or at hub because of self-heating temp errors) slew to off relatively slowly.
      if(((!hasEcoBias()) || inHubMode()) && (value > constrain(((int)lingerThreshold) + TRV_SLEW_PC_PER_MIN_VFAST, TRV_SLEW_PC_PER_MIN_VFAST, 100))) { value -= TRV_SLEW_PC_PER_MIN_VFAST; }
      // Else (by default) force to (nearly) off immediately when requested, ie eagerly stop heating to conserve energy.
      // In any case percentage open should now be low enough to stop calling for heat immediately.
      else { value = lingerThreshold; }
     bb0:	42 83       	std	Z+2, r20	; 0x02
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	08 95       	ret
     bb6:	80 91 73 03 	lds	r24, 0x0373
          // Slew open faster in BAKE mode or with comfort bias,
          // or when below probable minimum 'really open' percentage to avoid delaying heat unnecessarily
          // (unless always glacial when opening).
#if !defined(TRV_SLEW_GLACIAL)
          const uint8_t maxSlew = (inBakeMode() || !hasEcoBias()) ?
              TRV_SLEW_PC_PER_MIN_FAST : TRV_MAX_SLEW_PC_PER_MIN;
     bba:	87 fd       	sbrc	r24, 7
     bbc:	e1 cf       	rjmp	.-62     	; 0xb80 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x1c2>
     bbe:	95 e0       	ldi	r25, 0x05	; 5
     bc0:	e2 cf       	rjmp	.-60     	; 0xb86 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x1c8>

00000bc2 <getByHourStat(unsigned char, unsigned char)>:
// Get raw stats value for hour HH [0,23] from stats set N from non-volatile (EEPROM) store.
// A value of 0xff (255) means unset (or out of range); other values depend on which stats set is being used.
// The stats set is determined by the order in memory.
uint8_t getByHourStat(uint8_t hh, uint8_t statsSet)
  {
  if(statsSet > (EE_END_STATS - EE_START_STATS) / EE_STATS_SET_SIZE) { return((uint8_t) 0xff); } // Invalid set.
     bc2:	6c 30       	cpi	r22, 0x0C	; 12
     bc4:	98 f4       	brcc	.+38     	; 0xbec <getByHourStat(unsigned char, unsigned char)+0x2a>
  if(hh > 23) { return((uint8_t) 0xff); } // Invalid hour.
     bc6:	88 31       	cpi	r24, 0x18	; 24
     bc8:	88 f4       	brcc	.+34     	; 0xbec <getByHourStat(unsigned char, unsigned char)+0x2a>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     bca:	f9 99       	sbic	0x1f, 1	; 31
     bcc:	fe cf       	rjmp	.-4      	; 0xbca <getByHourStat(unsigned char, unsigned char)+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     bce:	28 2f       	mov	r18, r24
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	20 50       	subi	r18, 0x00	; 0
     bd4:	3f 4f       	sbci	r19, 0xFF	; 255
     bd6:	88 e1       	ldi	r24, 0x18	; 24
     bd8:	68 9f       	mul	r22, r24
     bda:	c0 01       	movw	r24, r0
     bdc:	11 24       	eor	r1, r1
     bde:	28 0f       	add	r18, r24
     be0:	39 1f       	adc	r19, r25
     be2:	32 bd       	out	0x22, r19	; 34
     be4:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     be6:	f8 9a       	sbi	0x1f, 0	; 31
     be8:	80 b5       	in	r24, 0x20	; 32
     bea:	08 95       	ret
  return(eeprom_read_byte((uint8_t *)(EE_START_STATS + (statsSet * (int)EE_STATS_SET_SIZE) + (int)hh)));
     bec:	8f ef       	ldi	r24, 0xFF	; 255
  }
     bee:	08 95       	ret

00000bf0 <compressTempC16(int)>:
#define COMPRESSION_C16_HIGH_THR_AFTER (COMPRESSION_C16_LOW_THR_AFTER + ((COMPRESSION_C16_HIGH_THRESHOLD-COMPRESSION_C16_LOW_THRESHOLD)>>1)) // High threshold after compression.
#define COMPRESSION_C16_CEIL_VAL (100<<4) // Ceiling input value to compression.
#define COMPRESSION_C16_CEIL_VAL_AFTER (COMPRESSION_C16_HIGH_THR_AFTER + ((COMPRESSION_C16_CEIL_VAL-COMPRESSION_C16_HIGH_THRESHOLD) >> 3)) // Ceiling input value after compression.
uint8_t compressTempC16(int tempC16)
  {
  if(tempC16 <= 0) { return(0); } // Clamp negative values to zero.
     bf0:	18 16       	cp	r1, r24
     bf2:	19 06       	cpc	r1, r25
     bf4:	14 f0       	brlt	.+4      	; 0xbfa <compressTempC16(int)+0xa>
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	08 95       	ret
  if(tempC16 < COMPRESSION_C16_LOW_THRESHOLD) { return(tempC16 >> 3); } // Preserve 1 bit after the binary point (0.5C precision).
     bfa:	8f 3f       	cpi	r24, 0xFF	; 255
     bfc:	91 05       	cpc	r25, r1
     bfe:	09 f0       	breq	.+2      	; 0xc02 <compressTempC16(int)+0x12>
     c00:	34 f4       	brge	.+12     	; 0xc0e <compressTempC16(int)+0x1e>
     c02:	53 e0       	ldi	r21, 0x03	; 3
     c04:	95 95       	asr	r25
     c06:	87 95       	ror	r24
     c08:	5a 95       	dec	r21
     c0a:	e1 f7       	brne	.-8      	; 0xc04 <compressTempC16(int)+0x14>
     c0c:	08 95       	ret
  if(tempC16 < COMPRESSION_C16_HIGH_THRESHOLD)
     c0e:	21 e0       	ldi	r18, 0x01	; 1
     c10:	80 38       	cpi	r24, 0x80	; 128
     c12:	92 07       	cpc	r25, r18
     c14:	34 f4       	brge	.+12     	; 0xc22 <compressTempC16(int)+0x32>
    { return(((tempC16 - COMPRESSION_C16_LOW_THRESHOLD) >> 1) + COMPRESSION_C16_LOW_THR_AFTER); }
     c16:	80 50       	subi	r24, 0x00	; 0
     c18:	91 40       	sbci	r25, 0x01	; 1
     c1a:	95 95       	asr	r25
     c1c:	87 95       	ror	r24
     c1e:	80 5e       	subi	r24, 0xE0	; 224
     c20:	08 95       	ret
  if(tempC16 < COMPRESSION_C16_CEIL_VAL)
     c22:	26 e0       	ldi	r18, 0x06	; 6
     c24:	80 34       	cpi	r24, 0x40	; 64
     c26:	92 07       	cpc	r25, r18
     c28:	14 f0       	brlt	.+4      	; 0xc2e <compressTempC16(int)+0x3e>
     c2a:	88 ef       	ldi	r24, 0xF8	; 248
     c2c:	08 95       	ret
    { return(((tempC16 - COMPRESSION_C16_HIGH_THRESHOLD) >> 3) + COMPRESSION_C16_HIGH_THR_AFTER); }
     c2e:	80 58       	subi	r24, 0x80	; 128
     c30:	91 40       	sbci	r25, 0x01	; 1
     c32:	33 e0       	ldi	r19, 0x03	; 3
     c34:	95 95       	asr	r25
     c36:	87 95       	ror	r24
     c38:	3a 95       	dec	r19
     c3a:	e1 f7       	brne	.-8      	; 0xc34 <compressTempC16(int)+0x44>
     c3c:	80 5a       	subi	r24, 0xA0	; 160
  return(COMPRESSION_C16_CEIL_VAL_AFTER);
  }
     c3e:	08 95       	ret

00000c40 <expandTempC16(unsigned char)>:

// Reverses range compression done by compressTempC16(); results in range [0,100], with varying precision based on original value.
// 0xff (or other invalid) input results in STATS_UNSET_INT. 
int expandTempC16(uint8_t cTemp)
  {
  if(cTemp < COMPRESSION_C16_LOW_THR_AFTER) { return(cTemp << 3); }
     c40:	80 32       	cpi	r24, 0x20	; 32
     c42:	40 f4       	brcc	.+16     	; 0xc54 <expandTempC16(unsigned char)+0x14>
     c44:	28 2f       	mov	r18, r24
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	e3 e0       	ldi	r30, 0x03	; 3
     c4a:	22 0f       	add	r18, r18
     c4c:	33 1f       	adc	r19, r19
     c4e:	ea 95       	dec	r30
     c50:	e1 f7       	brne	.-8      	; 0xc4a <expandTempC16(unsigned char)+0xa>
     c52:	17 c0       	rjmp	.+46     	; 0xc82 <expandTempC16(unsigned char)+0x42>
  if(cTemp < COMPRESSION_C16_HIGH_THR_AFTER)
     c54:	80 36       	cpi	r24, 0x60	; 96
     c56:	38 f4       	brcc	.+14     	; 0xc66 <expandTempC16(unsigned char)+0x26>
    { return(((cTemp - COMPRESSION_C16_LOW_THR_AFTER) << 1) + COMPRESSION_C16_LOW_THRESHOLD); }
     c58:	28 2f       	mov	r18, r24
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	22 0f       	add	r18, r18
     c5e:	33 1f       	adc	r19, r19
     c60:	20 54       	subi	r18, 0x40	; 64
     c62:	3f 4f       	sbci	r19, 0xFF	; 255
     c64:	0e c0       	rjmp	.+28     	; 0xc82 <expandTempC16(unsigned char)+0x42>
  if(cTemp <= COMPRESSION_C16_CEIL_VAL_AFTER)
     c66:	89 3f       	cpi	r24, 0xF9	; 249
     c68:	18 f0       	brcs	.+6      	; 0xc70 <expandTempC16(unsigned char)+0x30>
     c6a:	2f ef       	ldi	r18, 0xFF	; 255
     c6c:	3f e7       	ldi	r19, 0x7F	; 127
     c6e:	09 c0       	rjmp	.+18     	; 0xc82 <expandTempC16(unsigned char)+0x42>
    { return(((cTemp - COMPRESSION_C16_HIGH_THR_AFTER) << 3) + COMPRESSION_C16_HIGH_THRESHOLD); }
     c70:	28 2f       	mov	r18, r24
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	63 e0       	ldi	r22, 0x03	; 3
     c76:	22 0f       	add	r18, r18
     c78:	33 1f       	adc	r19, r19
     c7a:	6a 95       	dec	r22
     c7c:	e1 f7       	brne	.-8      	; 0xc76 <expandTempC16(unsigned char)+0x36>
     c7e:	20 58       	subi	r18, 0x80	; 128
     c80:	31 40       	sbci	r19, 0x01	; 1
  return(STATS_UNSET_INT); // Invalid/unset input.
  }
     c82:	c9 01       	movw	r24, r18
     c84:	08 95       	ret

00000c86 <Sensor<unsigned char>::isAvailable() const>:
    virtual bool begin() { return(false); }

    // Returns true if this sensor is currently available.
    // True by default unless implementation overrides.
    // For those sensors that need starting this will be false before begin().
    virtual bool isAvailable() const { return(true); }
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	08 95       	ret

00000c8a <Sensor<unsigned char>::handleInterruptSimple()>:
    // Must be fast and ISR (Interrupt Service Routine) safe.
    // Returns true if interrupt was successfully handled and cleared
    // else another interrupt handler in the chain may be called
    // to attempt to clear the interrupt.
    // By default does nothing (and returns false).
    virtual bool handleInterruptSimple() { return(false); }
     c8a:	80 e0       	ldi	r24, 0x00	; 0
     c8c:	08 95       	ret

00000c8e <Sensor<unsigned char>::begin()>:

    // Begin access to this sensor if applicable and not already begun.
    // Returns true if it needed to be begun.
    // Allows logic to end() if required at the end of a block, etc.
    // Defaults to do nothing (and return false).
    virtual bool begin() { return(false); }
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	08 95       	ret

00000c92 <Sensor<unsigned char>::end()>:
    virtual bool isAvailable() const { return(true); }

    // End access to this sensor if applicable and not already ended.
    // Returns true if it needed to be ended.
    // Defaults to do nothing (and return false).
    virtual bool end() { return(false); }
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	08 95       	ret

00000c96 <Sensor<unsigned char>::isValid(unsigned char) const>:
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual T get() const = 0;

    // Returns true if this sensor reading value passed is potentially valid, eg in-range.
    // Default is to always return true, ie all values potentially valid.
    virtual bool isValid(T value) const { return(true); }
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	08 95       	ret

00000c9a <Sensor<unsigned char>::preferredPollInterval_s() const>:
 
    // Returns non-zero if this implementation requires a regular call to read() to operate correctly.
    // Preferred poll interval (in seconds) or 0 if no regular poll() call required.
    // Default returns 0 indicating regular call to read() not required,
    // only as required to fetch new values from the underlying sensor.
    virtual uint8_t preferredPollInterval_s() const { return(0); }
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	08 95       	ret

00000c9e <global constructors keyed to _Z10inWarmModev>:
  protected:
    // Requested acuator value/position.
    volatile uint8_t value;

    // By default initialise the value to zero.
    SimpleTSUint8Actuator() : value(0) { }
     c9e:	10 92 00 02 	sts	0x0200, r1



// Internal model of radidator valve position, embodying control logic.
class ModelledRadValve : public AbstractRadValve
  {
     ca2:	8f e4       	ldi	r24, 0x4F	; 79
     ca4:	91 e0       	ldi	r25, 0x01	; 1
     ca6:	90 93 ff 01 	sts	0x01FF, r25
     caa:	80 93 fe 01 	sts	0x01FE, r24
  else if(getSubCycleTime() >= nearOverrunThreshold)
    {
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("?O"); // Near overrun.  Note 2ms/char to send...
    }
#endif
  }
     cae:	08 95       	ret

00000cb0 <pollIO(bool)>:
// Call this to do an I/O poll if needed; returns true if something useful happened.
// This call should typically take << 1ms at 1MHz CPU.
// Does not change CPU clock speeds, mess with interrupts (other than possible brief blocking), or sleep.
// Limits actual poll rate to something like once every 32ms, unless force is true.
//   * force if true then force full poll on every call (ie do not internally rate-limit)
bool pollIO(const bool force)
     cb0:	38 2f       	mov	r19, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     cb2:	f9 99       	sbic	0x1f, 1	; 31
     cb4:	fe cf       	rjmp	.-4      	; 0xcb2 <pollIO(bool)+0x2>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     cb6:	82 e1       	ldi	r24, 0x12	; 18
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	92 bd       	out	0x22, r25	; 34
     cbc:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     cbe:	f8 9a       	sbi	0x1f, 0	; 31
     cc0:	80 b5       	in	r24, 0x20	; 32
  {
#if defined(ENABLE_BOILER_HUB) && defined(USE_MODULE_FHT8VSIMPLE)
  if(inHubMode())
     cc2:	8f 3f       	cpi	r24, 0xFF	; 255
     cc4:	99 f0       	breq	.+38     	; 0xcec <pollIO(bool)+0x3c>
    {
    static volatile uint8_t _pO_lastPoll;

    // Poll RX at most about every ~32ms to help approx match spil rate when called in loop with 30ms nap.
    const uint8_t sct = getSubCycleTime();
     cc6:	20 91 b2 00 	lds	r18, 0x00B2
    if(force || ((0 == (sct & 3)) && (sct != _pO_lastPoll)))
     cca:	33 23       	and	r19, r19
     ccc:	51 f4       	brne	.+20     	; 0xce2 <pollIO(bool)+0x32>
     cce:	82 2f       	mov	r24, r18
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	83 70       	andi	r24, 0x03	; 3
     cd4:	90 70       	andi	r25, 0x00	; 0
     cd6:	89 2b       	or	r24, r25
     cd8:	49 f4       	brne	.+18     	; 0xcec <pollIO(bool)+0x3c>
     cda:	80 91 3b 02 	lds	r24, 0x023B
     cde:	28 17       	cp	r18, r24
     ce0:	29 f0       	breq	.+10     	; 0xcec <pollIO(bool)+0x3c>
      {
      _pO_lastPoll = sct;
     ce2:	20 93 3b 02 	sts	0x023B, r18
      if(FHT8VCallForHeatPoll()) // Check if call-for-heat has been overheard.
     ce6:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <FHT8VCallForHeatPoll()>
     cea:	08 95       	ret
     cec:	80 e0       	ldi	r24, 0x00	; 0
        { return(true); }
      }
    }
#endif
  return(false);
  }
     cee:	08 95       	ret

00000cf0 <smoothStatsValue(unsigned char, unsigned char)>:

// Compute new linearly-smoothed value given old smoothed value and new value.
// Guaranteed not to produce a value higher than the max of the old smoothed value and the new value.
// Uses stochastic rounding to nearest to allow nominally sub-lsb values to have an effect over time.
// Usually only made public for unit testing.
uint8_t smoothStatsValue(const uint8_t oldSmoothed, const uint8_t newValue)
     cf0:	0f 93       	push	r16
     cf2:	1f 93       	push	r17
     cf4:	18 2f       	mov	r17, r24
     cf6:	06 2f       	mov	r16, r22
  {
  if(oldSmoothed == newValue) { return(oldSmoothed); } // Optimisation: smoothed value is unchanged if new value is the same as extant.
     cf8:	86 17       	cp	r24, r22
     cfa:	b9 f0       	breq	.+46     	; 0xd2a <smoothStatsValue(unsigned char, unsigned char)+0x3a>
  // Compute and update with new stochastically-rounded exponentially-smoothed ("Brown's simple exponential smoothing") value.
  // Stochastic rounding allows sub-lsb values to have an effect over time.
  const uint8_t stocAdd = randRNG8() & ((1 << STATS_SMOOTH_SHIFT) - 1); // Allows sub-lsb values to have an effect over time.
     cfc:	0e 94 ab 20 	call	0x4156	; 0x4156 <randRNG8()>
  DEBUG_SERIAL_PRINT_FLASHSTRING("stocAdd=");
  DEBUG_SERIAL_PRINT(stocAdd);
  DEBUG_SERIAL_PRINTLN();
#endif
  // Do arithmetic in 16 bits to avoid over-/under- flows.
  return((uint8_t) (((((uint16_t) oldSmoothed) << STATS_SMOOTH_SHIFT) - ((uint16_t)oldSmoothed) + ((uint16_t)newValue) + stocAdd) >> STATS_SMOOTH_SHIFT));
     d00:	21 2f       	mov	r18, r17
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	a9 01       	movw	r20, r18
     d06:	a3 e0       	ldi	r26, 0x03	; 3
     d08:	44 0f       	add	r20, r20
     d0a:	55 1f       	adc	r21, r21
     d0c:	aa 95       	dec	r26
     d0e:	e1 f7       	brne	.-8      	; 0xd08 <smoothStatsValue(unsigned char, unsigned char)+0x18>
     d10:	42 1b       	sub	r20, r18
     d12:	53 0b       	sbc	r21, r19
     d14:	87 70       	andi	r24, 0x07	; 7
     d16:	48 0f       	add	r20, r24
     d18:	51 1d       	adc	r21, r1
     d1a:	40 0f       	add	r20, r16
     d1c:	51 1d       	adc	r21, r1
     d1e:	f3 e0       	ldi	r31, 0x03	; 3
     d20:	56 95       	lsr	r21
     d22:	47 95       	ror	r20
     d24:	fa 95       	dec	r31
     d26:	e1 f7       	brne	.-8      	; 0xd20 <smoothStatsValue(unsigned char, unsigned char)+0x30>
     d28:	14 2f       	mov	r17, r20
  }
     d2a:	81 2f       	mov	r24, r17
     d2c:	1f 91       	pop	r17
     d2e:	0f 91       	pop	r16
     d30:	08 95       	ret

00000d32 <setMinBoilerOnMinutes(unsigned char)>:
#endif

#ifndef setMinBoilerOnMinutes
// Set minimum on (and off) time for pointer (minutes); zero to disable hub mode.
// Suggested minimum of 4 minutes for gas combi; much longer for heat pumps for example.
void setMinBoilerOnMinutes(uint8_t mins) { eeprom_smart_update_byte((uint8_t *)EE_START_MIN_BOILER_ON_MINS_INV, ~(mins)); }
     d32:	68 2f       	mov	r22, r24
     d34:	60 95       	com	r22
     d36:	82 e1       	ldi	r24, 0x12	; 18
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <eeprom_smart_update_byte(unsigned char*, unsigned char)>
     d3e:	08 95       	ret

00000d40 <setFROSTTargetC(unsigned char)>:

#if defined(SETTABLE_TARGET_TEMPERATURES)
// Set (non-volatile) 'FROST' protection target in C; no higher than getWARMTargetC() returns, strictly positive, in range [MIN_TARGET_C,MAX_TARGET_C].
// Can also be used, even when a temperature pot is present, to set a floor setback temperature.
// Returns false if not set, eg because outside range [MIN_TARGET_C,MAX_TARGET_C], else returns true.
bool setFROSTTargetC(uint8_t tempC)
     d40:	68 2f       	mov	r22, r24
  {
  if((tempC < MIN_TARGET_C) || (tempC > MAX_TARGET_C)) { return(false); } // Invalid temperature.
     d42:	85 50       	subi	r24, 0x05	; 5
     d44:	8b 35       	cpi	r24, 0x5B	; 91
     d46:	08 f5       	brcc	.+66     	; 0xd8a <setFROSTTargetC(unsigned char)+0x4a>
  public:
    // Return last value fetched by read(); undefined before first read().
    // Usually fast.
    // Often likely to be thread-safe or usable within ISRs (Interrupt Service Routines),
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual uint8_t get() const { return(value); }
     d48:	20 91 73 03 	lds	r18, 0x0373
  // Cached input and result values; initially zero.
  static uint8_t potLast;
  static uint8_t resultLast;
  // Force recompuation if pot value changed
  // or apparently no calc done yet (unlikely/impossible zero cached result).
  if((potLast != pot) || (0 == resultLast))
     d4c:	80 91 49 02 	lds	r24, 0x0249
     d50:	82 17       	cp	r24, r18
     d52:	21 f4       	brne	.+8      	; 0xd5c <setFROSTTargetC(unsigned char)+0x1c>
     d54:	80 91 48 02 	lds	r24, 0x0248
     d58:	88 23       	and	r24, r24
     d5a:	79 f4       	brne	.+30     	; 0xd7a <setFROSTTargetC(unsigned char)+0x3a>
  const uint8_t high = (BIASCOM_WARM+1);
  const uint8_t range = high - low + 1;
  const uint8_t band = 256 / range; // Width of band for each degree C...

  // If relatively small number of distinct temperature values...
  if(pot >= 256 - band) { return(high); } // At top... (optimisation / robustness)
     d5c:	24 3e       	cpi	r18, 0xE4	; 228
     d5e:	10 f0       	brcs	.+4      	; 0xd64 <setFROSTTargetC(unsigned char)+0x24>
     d60:	88 e1       	ldi	r24, 0x18	; 24
     d62:	07 c0       	rjmp	.+14     	; 0xd72 <setFROSTTargetC(unsigned char)+0x32>
     d64:	80 e1       	ldi	r24, 0x10	; 16
     d66:	9c e1       	ldi	r25, 0x1C	; 28
     d68:	02 c0       	rjmp	.+4      	; 0xd6e <setFROSTTargetC(unsigned char)+0x2e>
  if(range < 10)
    {
    uint8_t result = low;
    for(uint8_t ppot = band; ppot < pot; ++result) { ppot += band; }
     d6a:	94 5e       	subi	r25, 0xE4	; 228
     d6c:	8f 5f       	subi	r24, 0xFF	; 255
     d6e:	92 17       	cp	r25, r18
     d70:	e0 f3       	brcs	.-8      	; 0xd6a <setFROSTTargetC(unsigned char)+0x2a>
  // or apparently no calc done yet (unlikely/impossible zero cached result).
  if((potLast != pot) || (0 == resultLast))
    {
    const uint8_t result = computeWARMTargetC(pot);
    // Cache input/result.
    resultLast = result;
     d72:	80 93 48 02 	sts	0x0248, r24
    potLast = pot;
     d76:	20 93 49 02 	sts	0x0249, r18
// Can also be used, even when a temperature pot is present, to set a floor setback temperature.
// Returns false if not set, eg because outside range [MIN_TARGET_C,MAX_TARGET_C], else returns true.
bool setFROSTTargetC(uint8_t tempC)
  {
  if((tempC < MIN_TARGET_C) || (tempC > MAX_TARGET_C)) { return(false); } // Invalid temperature.
  if(tempC > getWARMTargetC()) { return(false); } // Cannot set above WARM target.
     d7a:	86 17       	cp	r24, r22
     d7c:	30 f0       	brcs	.+12     	; 0xd8a <setFROSTTargetC(unsigned char)+0x4a>
  eeprom_smart_update_byte((uint8_t *)EE_START_FROST_C, tempC); // Update in EEPROM if necessary.
     d7e:	8e e0       	ldi	r24, 0x0E	; 14
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <eeprom_smart_update_byte(unsigned char*, unsigned char)>
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	08 95       	ret
  return(true); // Assume value correctly written.
     d8a:	80 e0       	ldi	r24, 0x00	; 0
  }
     d8c:	08 95       	ret

00000d8e <ModelledRadValve::recalibrate()>:
// If possible exercise the valve to avoid pin sticking and recalibrate valve travel.
// Default does nothing.
void ModelledRadValve::recalibrate()
  {
#ifdef USE_MODULE_FHT8VSIMPLE
  FHT8VSyncAndTXReset();
     d8e:	0e 94 6f 10 	call	0x20de	; 0x20de <FHT8VSyncAndTXReset()>
#endif
  }
     d92:	08 95       	ret

00000d94 <rawStatsTX(bool, unsigned char*, bool, bool)>:
//       the unit will resume RX after sending the stats
//   * doubleTX  double TX to increase chance of successful reception
// This will use whichever transmission medium/carrier/etc is available.
#define STATS_MSG_START_OFFSET (RFM22_PREAMBLE_BYTES + RFM22_SYNC_MIN_BYTES)
#define STATS_MSG_MAX_LEN (64 - STATS_MSG_START_OFFSET)
static void rawStatsTX(const bool isBinary, uint8_t * const buf, const bool resumeRX, const bool doubleTX)
     d94:	ef 92       	push	r14
     d96:	ff 92       	push	r15
     d98:	0f 93       	push	r16
     d9a:	1f 93       	push	r17
     d9c:	8b 01       	movw	r16, r22
     d9e:	e4 2e       	mov	r14, r20
     da0:	f2 2e       	mov	r15, r18
  {
  // Write in the preamble/sync bytes.
  uint8_t *bptr = buf;
  // Start with RFM23-friendly preamble which ends with with the aacccccc sync word.
  memset(bptr, RFM22_PREAMBLE_BYTE, RFM22_PREAMBLE_BYTES);
     da2:	cb 01       	movw	r24, r22
     da4:	6a ea       	ldi	r22, 0xAA	; 170
     da6:	70 e0       	ldi	r23, 0x00	; 0
     da8:	45 e0       	ldi	r20, 0x05	; 5
     daa:	50 e0       	ldi	r21, 0x00	; 0
     dac:	0e 94 a0 03 	call	0x740	; 0x740 <memset>
  bptr += RFM22_PREAMBLE_BYTES;
  memset(bptr, RFM22_SYNC_BYTE, RFM22_SYNC_MIN_BYTES);
     db0:	c8 01       	movw	r24, r16
     db2:	05 96       	adiw	r24, 0x05	; 5
     db4:	6c ec       	ldi	r22, 0xCC	; 204
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	43 e0       	ldi	r20, 0x03	; 3
     dba:	50 e0       	ldi	r21, 0x00	; 0
     dbc:	0e 94 a0 03 	call	0x740	; 0x740 <memset>
  bptr += RFM22_SYNC_MIN_BYTES;

  // TODO: put in listen before TX to reduce collisions (CSMA).
  // Send message starting will preamble.
  // Assume RFM22/23 support for now.
  RFM22QueueCmdToFF(buf);
     dc0:	c8 01       	movw	r24, r16
     dc2:	0e 94 a2 21 	call	0x4344	; 0x4344 <RFM22QueueCmdToFF(unsigned char*)>
  RFM22TXFIFO(); // Send it!  Approx 1.6ms/byte.     
     dc6:	0e 94 9a 22 	call	0x4534	; 0x4534 <RFM22TXFIFO()>
  if(doubleTX)
     dca:	ff 20       	and	r15, r15
     dcc:	29 f0       	breq	.+10     	; 0xdd8 <rawStatsTX(bool, unsigned char*, bool, bool)+0x44>
    {
    nap(WDTO_15MS);
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	0e 94 ab 1c 	call	0x3956	; 0x3956 <nap(signed char)>
    RFM22TXFIFO(); // Re-send it!
     dd4:	0e 94 9a 22 	call	0x4534	; 0x4534 <RFM22TXFIFO()>
    }

  // Resume appropriate behaviour after TX.
#if defined(ENABLE_BOILER_HUB)
  if(resumeRX)
     dd8:	ee 20       	and	r14, r14
     dda:	21 f0       	breq	.+8      	; 0xde4 <rawStatsTX(bool, unsigned char*, bool, bool)+0x50>
    { SetupToEavesdropOnFHT8V(); } // Revert to hub listening...
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	0e 94 a2 10 	call	0x2144	; 0x2144 <SetupToEavesdropOnFHT8V(bool)>
     de2:	02 c0       	rjmp	.+4      	; 0xde8 <rawStatsTX(bool, unsigned char*, bool, bool)+0x54>
  else
#endif
    { RFM22ModeStandbyAndClearState(); } // Go to standby to conserve energy.
     de4:	0e 94 52 22 	call	0x44a4	; 0x44a4 <RFM22ModeStandbyAndClearState()>
  }
     de8:	1f 91       	pop	r17
     dea:	0f 91       	pop	r16
     dec:	ff 90       	pop	r15
     dee:	ef 90       	pop	r14
     df0:	08 95       	ret

00000df2 <__vector_5>:

#if !defined(ALT_MAIN_LOOP) // Do not define handlers here when alt main is in use.
// Previous state of port D pins to help detect changes.
static volatile uint8_t prevStatePD;
// Interrupt service routine for PD I/O port transition changes (including RX).
ISR(PCINT2_vect)
     df2:	1f 92       	push	r1
     df4:	0f 92       	push	r0
     df6:	0f b6       	in	r0, 0x3f	; 63
     df8:	0f 92       	push	r0
     dfa:	11 24       	eor	r1, r1
     dfc:	2f 93       	push	r18
     dfe:	3f 93       	push	r19
     e00:	4f 93       	push	r20
     e02:	5f 93       	push	r21
     e04:	6f 93       	push	r22
     e06:	7f 93       	push	r23
     e08:	8f 93       	push	r24
     e0a:	9f 93       	push	r25
     e0c:	af 93       	push	r26
     e0e:	bf 93       	push	r27
     e10:	ef 93       	push	r30
     e12:	ff 93       	push	r31
  {
  const uint8_t pins = PIND;
     e14:	89 b1       	in	r24, 0x09	; 9
  const uint8_t changes = pins ^ prevStatePD;
     e16:	90 91 3a 02 	lds	r25, 0x023A
  prevStatePD = pins;
     e1a:	80 93 3a 02 	sts	0x023A, r24
  // If an interrupt arrived from no other masked source then wake the CLI.
  // The will ensure that the CLI is active, eg from RX activity,
  // eg it is possible to wake the CLI subsystem with an extra CR or LF.
  // It is OK to trigger this from other things such as button presses.
  // FIXME: ensure that resetCLIActiveTimer() is inlineable to minimise ISR prologue/epilogue time and space.
  if(!(changes & MASK_PD & ~1)) { resetCLIActiveTimer(); }
     e1e:	0e 94 3b 26 	call	0x4c76	; 0x4c76 <resetCLIActiveTimer()>
  }
     e22:	ff 91       	pop	r31
     e24:	ef 91       	pop	r30
     e26:	bf 91       	pop	r27
     e28:	af 91       	pop	r26
     e2a:	9f 91       	pop	r25
     e2c:	8f 91       	pop	r24
     e2e:	7f 91       	pop	r23
     e30:	6f 91       	pop	r22
     e32:	5f 91       	pop	r21
     e34:	4f 91       	pop	r20
     e36:	3f 91       	pop	r19
     e38:	2f 91       	pop	r18
     e3a:	0f 90       	pop	r0
     e3c:	0f be       	out	0x3f, r0	; 63
     e3e:	0f 90       	pop	r0
     e40:	1f 90       	pop	r1
     e42:	18 95       	reti

00000e44 <populateCoreStats(FullStatsMessageCore*)>:


// Clear and populate core stats structure with information from this node.
// Exactly what gets filled in will depend on sensors on the node,
// and may depend on stats TX security level (eg if collecting some sensitive items is also expensive).
void populateCoreStats(FullStatsMessageCore_t *const content)
     e44:	cf 93       	push	r28
     e46:	df 93       	push	r29
     e48:	ec 01       	movw	r28, r24
#define FullStatsMessageCore_MAX_BYTES_ON_WIRE 8
// Minimum size on wire including trailing CRC of core of FullStatsMessage.  TX message buffer should be one larger for trailing 0xff.
#define FullStatsMessageCore_MIN_BYTES_ON_WIRE 3

// Clear a FullStatsMessageCore_t, also indicating no optional fields present.
static inline void clearFullStatsMessageCore(FullStatsMessageCore_t *const p) { memset(p, 0, sizeof(FullStatsMessageCore_t)); }
     e4a:	87 e0       	ldi	r24, 0x07	; 7
     e4c:	fe 01       	movw	r30, r28
     e4e:	11 92       	st	Z+, r1
     e50:	8a 95       	dec	r24
     e52:	e9 f7       	brne	.-6      	; 0xe4e <populateCoreStats(FullStatsMessageCore*)+0xa>
  {
  clearFullStatsMessageCore(content); // Defensive programming: all fields should be set explicitly below.
  if(localFHT8VTRVEnabled())
     e54:	0e 94 49 10 	call	0x2092	; 0x2092 <localFHT8VTRVEnabled()>
     e58:	88 23       	and	r24, r24
     e5a:	31 f0       	breq	.+12     	; 0xe68 <populateCoreStats(FullStatsMessageCore*)+0x24>
    {
    // Use FHT8V house codes if available.
    content->id0 = FHT8VGetHC1();
     e5c:	0e 94 37 10 	call	0x206e	; 0x206e <FHT8VGetHC1()>
     e60:	89 83       	std	Y+1, r24	; 0x01
    content->id1 = FHT8VGetHC2();
     e62:	0e 94 40 10 	call	0x2080	; 0x2080 <FHT8VGetHC2()>
     e66:	11 c0       	rjmp	.+34     	; 0xe8a <populateCoreStats(FullStatsMessageCore*)+0x46>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     e68:	f9 99       	sbic	0x1f, 1	; 31
     e6a:	fe cf       	rjmp	.-4      	; 0xe68 <populateCoreStats(FullStatsMessageCore*)+0x24>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     e6c:	84 e1       	ldi	r24, 0x14	; 20
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	92 bd       	out	0x22, r25	; 34
     e72:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     e74:	f8 9a       	sbi	0x1f, 0	; 31
     e76:	80 b5       	in	r24, 0x20	; 32
    }
  else
    {
    // Use OpenTRV unique ID if no other higher-priority ID.
    content->id0 = eeprom_read_byte(0 + (uint8_t *)EE_START_ID);
     e78:	89 83       	std	Y+1, r24	; 0x01
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     e7a:	f9 99       	sbic	0x1f, 1	; 31
     e7c:	fe cf       	rjmp	.-4      	; 0xe7a <populateCoreStats(FullStatsMessageCore*)+0x36>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     e7e:	85 e1       	ldi	r24, 0x15	; 21
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	92 bd       	out	0x22, r25	; 34
     e84:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     e86:	f8 9a       	sbi	0x1f, 0	; 31
     e88:	80 b5       	in	r24, 0x20	; 32
    content->id1 = eeprom_read_byte(1 + (uint8_t *)EE_START_ID);
     e8a:	8a 83       	std	Y+2, r24	; 0x02
    }
  content->containsID = true;
     e8c:	28 81       	ld	r18, Y
     e8e:	82 2f       	mov	r24, r18
     e90:	81 60       	ori	r24, 0x01	; 1
     e92:	88 83       	st	Y, r24
  content->tempAndPower.tempC16 = TemperatureC16.get();
     e94:	80 91 6f 03 	lds	r24, 0x036F
     e98:	8b 83       	std	Y+3, r24	; 0x03
     e9a:	90 91 70 03 	lds	r25, 0x0370
     e9e:	9f 77       	andi	r25, 0x7F	; 127
     ea0:	8c 81       	ldd	r24, Y+4	; 0x04
     ea2:	80 78       	andi	r24, 0x80	; 128
     ea4:	89 2b       	or	r24, r25
     ea6:	8c 83       	std	Y+4, r24	; 0x04
  content->tempAndPower.powerLow = Supply_mV.isSupplyVoltageLow();
     ea8:	90 91 18 03 	lds	r25, 0x0318
     eac:	97 95       	ror	r25
     eae:	99 27       	eor	r25, r25
     eb0:	97 95       	ror	r25
     eb2:	8f 77       	andi	r24, 0x7F	; 127
     eb4:	89 2b       	or	r24, r25
     eb6:	8c 83       	std	Y+4, r24	; 0x04
  content->containsTempAndPower = true;
     eb8:	23 60       	ori	r18, 0x03	; 3
     eba:	28 83       	st	Y, r18
  content->ambL = fnmax((uint8_t)1, fnmin((uint8_t)254, (uint8_t)(AmbLight.get() >> 2))); // Coerce to allowed value in range [1,254]. Bug-fix c/o Gary Gladman!
     ebc:	80 91 66 03 	lds	r24, 0x0366
     ec0:	90 91 67 03 	lds	r25, 0x0367
     ec4:	96 95       	lsr	r25
     ec6:	87 95       	ror	r24
     ec8:	96 95       	lsr	r25
     eca:	87 95       	ror	r24




// Templated function versions of min/max that do not evaluate the arguments twice.
template <class T> const T& fnmin(const T& a, const T& b) { return((a>b)?b:a); }
     ecc:	8e 3f       	cpi	r24, 0xFE	; 254
     ece:	10 f0       	brcs	.+4      	; 0xed4 <populateCoreStats(FullStatsMessageCore*)+0x90>
     ed0:	2e ef       	ldi	r18, 0xFE	; 254
     ed2:	04 c0       	rjmp	.+8      	; 0xedc <populateCoreStats(FullStatsMessageCore*)+0x98>
     ed4:	28 2f       	mov	r18, r24
     ed6:	88 23       	and	r24, r24
     ed8:	09 f4       	brne	.+2      	; 0xedc <populateCoreStats(FullStatsMessageCore*)+0x98>
     eda:	21 e0       	ldi	r18, 0x01	; 1
     edc:	2d 83       	std	Y+5, r18	; 0x05
  content->containsAmbL = true;
     ede:	88 81       	ld	r24, Y
     ee0:	84 60       	ori	r24, 0x04	; 4
     ee2:	88 83       	st	Y, r24
// Returns true if the room appears to be likely occupied (with active users) recently.
// This uses the same timer as isOccupied() (restarted by markAsOccupied())
// but returns to false somewhat sooner for example to allow ramping up more costly occupancy detection methods
// and to allow some simple graduated occupancy responses.
// Thread-safe.
bool isLikelyRecentlyOccupied() { return(occupationCountdownM > OCCUPATION_TIMEOUT_M/2); }
     ee4:	80 91 47 02 	lds	r24, 0x0247

// Two-bit occupancy: (00 not disclosed,) 1 not occupied, 2 possibly occupied, 3 probably occupied.
// 0 is not returned by this implementation.
// Thread-safe.
uint8_t twoBitOccupancyValue() { return(isLikelyRecentlyOccupied() ? 3 : (isLikelyOccupied() ? 2 : 1)); }
     ee8:	87 31       	cpi	r24, 0x17	; 23
     eea:	10 f0       	brcs	.+4      	; 0xef0 <populateCoreStats(FullStatsMessageCore*)+0xac>
     eec:	93 e0       	ldi	r25, 0x03	; 3
     eee:	07 c0       	rjmp	.+14     	; 0xefe <populateCoreStats(FullStatsMessageCore*)+0xba>

// Returns true if the room appears to be likely occupied (with active users) now.
// Operates on a timeout; calling markAsOccupied() restarts the timer.
// Defaults to false (and API still exists) when OCCUPANCY_SUPPORT not defined.
// Thread-safe.
bool isLikelyOccupied() { return(0 != occupationCountdownM); }
     ef0:	80 91 47 02 	lds	r24, 0x0247
bool isLikelyRecentlyOccupied() { return(occupationCountdownM > OCCUPATION_TIMEOUT_M/2); }

// Two-bit occupancy: (00 not disclosed,) 1 not occupied, 2 possibly occupied, 3 probably occupied.
// 0 is not returned by this implementation.
// Thread-safe.
uint8_t twoBitOccupancyValue() { return(isLikelyRecentlyOccupied() ? 3 : (isLikelyOccupied() ? 2 : 1)); }
     ef4:	88 23       	and	r24, r24
     ef6:	11 f4       	brne	.+4      	; 0xefc <populateCoreStats(FullStatsMessageCore*)+0xb8>
     ef8:	91 e0       	ldi	r25, 0x01	; 1
     efa:	01 c0       	rjmp	.+2      	; 0xefe <populateCoreStats(FullStatsMessageCore*)+0xba>
     efc:	92 e0       	ldi	r25, 0x02	; 2
  content->containsTempAndPower = true;
  content->ambL = fnmax((uint8_t)1, fnmin((uint8_t)254, (uint8_t)(AmbLight.get() >> 2))); // Coerce to allowed value in range [1,254]. Bug-fix c/o Gary Gladman!
  content->containsAmbL = true;
  // OC1/OC2 = Occupancy: 00 not disclosed, 01 not occupied, 10 possibly occupied, 11 probably occupied.
  // The encodeFullStatsMessageCore() route should omit data not appopriate for security reasons.
  content->occ = twoBitOccupancyValue();
     efe:	8e 81       	ldd	r24, Y+6	; 0x06
     f00:	8c 7f       	andi	r24, 0xFC	; 252
     f02:	89 2b       	or	r24, r25
     f04:	8e 83       	std	Y+6, r24	; 0x06
  }
     f06:	df 91       	pop	r29
     f08:	cf 91       	pop	r28
     f0a:	08 95       	ret

00000f0c <bareStatsTX(bool, bool, bool)>:
// This may be binary or JSON format.
//   * resumeRX  if true and unit capable of running in hub/RX mode,
//       the unit will resume RX after sending the stats
//   * allowDoubleTX  allow double TX to increase chance of successful reception
//   * doBoth  send binary form as well as JSON form even if latter is supported
static void bareStatsTX(const bool resumeRX, const bool allowDoubleTX, const bool doBoth)
     f0c:	7f 92       	push	r7
     f0e:	8f 92       	push	r8
     f10:	9f 92       	push	r9
     f12:	af 92       	push	r10
     f14:	bf 92       	push	r11
     f16:	cf 92       	push	r12
     f18:	df 92       	push	r13
     f1a:	ef 92       	push	r14
     f1c:	ff 92       	push	r15
     f1e:	0f 93       	push	r16
     f20:	1f 93       	push	r17
     f22:	df 93       	push	r29
     f24:	cf 93       	push	r28
     f26:	cd b7       	in	r28, 0x3d	; 61
     f28:	de b7       	in	r29, 0x3e	; 62
     f2a:	c0 58       	subi	r28, 0x80	; 128
     f2c:	d0 40       	sbci	r29, 0x00	; 0
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	f8 94       	cli
     f32:	de bf       	out	0x3e, r29	; 62
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	cd bf       	out	0x3d, r28	; 61
     f38:	78 2e       	mov	r7, r24
     f3a:	d6 2e       	mov	r13, r22
  //   * max binary length, or max JSON length + 1 for CRC + 1 to allow detection of oversize message
  //   * terminating 0xff
  uint8_t buf[STATS_MSG_START_OFFSET + max(FullStatsMessageCore_MAX_BYTES_ON_WIRE,  MSG_JSON_MAX_LENGTH+1) + 1];

#if defined(ALLOW_JSON_OUTPUT)
  if(doBoth)
     f3c:	44 23       	and	r20, r20
     f3e:	31 f1       	breq	.+76     	; 0xf8c <bareStatsTX(bool, bool, bool)+0x80>
#endif
    {
    // Send binary message first.
    // Gather core stats.
    FullStatsMessageCore_t content;
    populateCoreStats(&content);
     f40:	5e 01       	movw	r10, r28
     f42:	08 94       	sec
     f44:	a1 1c       	adc	r10, r1
     f46:	b1 1c       	adc	r11, r1
     f48:	c5 01       	movw	r24, r10
     f4a:	0e 94 22 07 	call	0xe44	; 0xe44 <populateCoreStats(FullStatsMessageCore*)>
    const uint8_t *msg1 = encodeFullStatsMessageCore(buf + STATS_MSG_START_OFFSET, sizeof(buf) - STATS_MSG_START_OFFSET, getStatsTXLevel(), false, &content);
     f4e:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <getStatsTXLevel()>
     f52:	ac 01       	movw	r20, r24
     f54:	30 e4       	ldi	r19, 0x40	; 64
     f56:	e3 2e       	mov	r14, r19
     f58:	f1 2c       	mov	r15, r1
     f5a:	ec 0e       	add	r14, r28
     f5c:	fd 1e       	adc	r15, r29
     f5e:	c7 01       	movw	r24, r14
     f60:	08 96       	adiw	r24, 0x08	; 8
     f62:	69 e3       	ldi	r22, 0x39	; 57
     f64:	20 e0       	ldi	r18, 0x00	; 0
     f66:	85 01       	movw	r16, r10
     f68:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)>
    if(NULL == msg1)
     f6c:	89 2b       	or	r24, r25
     f6e:	09 f4       	brne	.+2      	; 0xf72 <bareStatsTX(bool, bool, bool)+0x66>
     f70:	c5 c0       	rjmp	.+394    	; 0x10fc <bareStatsTX(bool, bool, bool)+0x1f0>
DEBUG_SERIAL_PRINTLN_FLASHSTRING("Bin gen err!");
#endif
      return;
      }
    // Record stats as if remote, and treat channel as secure.
    recordCoreStats(true, &content);
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	b5 01       	movw	r22, r10
     f76:	0e 94 8c 1b 	call	0x3718	; 0x3718 <recordCoreStats(bool, FullStatsMessageCore const*)>
    // Send it!
    rawStatsTX(true, buf, resumeRX, allowDoubleTX);
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	b7 01       	movw	r22, r14
     f7e:	47 2d       	mov	r20, r7
     f80:	2d 2d       	mov	r18, r13
     f82:	0e 94 ca 06 	call	0xd94	; 0xd94 <rawStatsTX(bool, unsigned char*, bool, bool)>
    }

#if 1 && defined(ALLOW_JSON_OUTPUT)
  // Be quiet for a moment after binary stats send.
  if(doBoth) { nap(WDTO_15MS); }
     f86:	80 e0       	ldi	r24, 0x00	; 0
     f88:	0e 94 ab 1c 	call	0x3956	; 0x3956 <nap(signed char)>




  // Managed JSON stats.
  static SimpleStatsRotation<4> ss1; // Configured for maximum different stats.
     f8c:	80 91 0d 02 	lds	r24, 0x020D
     f90:	88 23       	and	r24, r24
     f92:	99 f5       	brne	.+102    	; 0xffa <bareStatsTX(bool, bool, bool)+0xee>
     f94:	8d e0       	ldi	r24, 0x0D	; 13
     f96:	92 e0       	ldi	r25, 0x02	; 2
     f98:	0e 94 8b 3b 	call	0x7716	; 0x7716 <__cxa_guard_acquire>
     f9c:	89 2b       	or	r24, r25
     f9e:	69 f1       	breq	.+90     	; 0xffa <bareStatsTX(bool, bool, bool)+0xee>

    // Initialise base with appropriate storage (non-null) and capacity knowledge.
    SimpleStatsRotationBase(DescValueTuple *_stats, const uint8_t _capacity)
      : capacity(_capacity), stats(_stats), nStats(0),
        lastTXed(~0), lastTXedHiPri(~0), // Show the first item on the first pass...
        id(NULL)
     fa0:	84 e0       	ldi	r24, 0x04	; 4
     fa2:	80 93 15 02 	sts	0x0215, r24
     fa6:	2e e1       	ldi	r18, 0x1E	; 30
     fa8:	32 e0       	ldi	r19, 0x02	; 2
     faa:	30 93 17 02 	sts	0x0217, r19
     fae:	20 93 16 02 	sts	0x0216, r18
     fb2:	10 92 18 02 	sts	0x0218, r1
     fb6:	8f ef       	ldi	r24, 0xFF	; 255
     fb8:	80 93 19 02 	sts	0x0219, r24
     fbc:	80 93 1a 02 	sts	0x021A, r24
     fc0:	10 92 1c 02 	sts	0x021C, r1
     fc4:	10 92 1b 02 	sts	0x021B, r1
    // is displayed immediately after the @/ID field when enabled,
    // and missing count values suggest a lost transmission somewhere.
    // Takes minimal space (1 byte).
    struct WriteCount
      {
      WriteCount() : enabled(0), count(0) { }
     fc8:	80 91 1d 02 	lds	r24, 0x021D
     fcc:	80 78       	andi	r24, 0x80	; 128
     fce:	80 93 1d 02 	sts	0x021D, r24
     fd2:	f9 01       	movw	r30, r18
    // The default sensitivity is set to just forbid transmission at default (255) leaf settings.
    // Byt default the stat is normal priority.
    GenericStatsDescriptor(const char * const statKey,
                           const uint8_t statSensitivity = stTXsecOnly,
                           const bool statHighPriority = false)
      : key(statKey), sensitivity(statSensitivity), highPriority(statHighPriority)
     fd4:	9e ef       	ldi	r25, 0xFE	; 254
     fd6:	11 82       	std	Z+1, r1	; 0x01
     fd8:	10 82       	st	Z, r1
     fda:	92 83       	std	Z+2, r25	; 0x02
     fdc:	13 82       	std	Z+3, r1	; 0x03
    void enableCount(bool enable) { c.enabled = enable; }

  protected:
    struct DescValueTuple
      {
      DescValueTuple() : descriptor(NULL), value(0) { }
     fde:	15 82       	std	Z+5, r1	; 0x05
     fe0:	14 82       	std	Z+4, r1	; 0x04
      int value;

      // Various run-time flags.
      struct Flags
        {
        Flags() : changed(false) { }
     fe2:	86 81       	ldd	r24, Z+6	; 0x06
     fe4:	8e 7f       	andi	r24, 0xFE	; 254
     fe6:	86 83       	std	Z+6, r24	; 0x06
     fe8:	37 96       	adiw	r30, 0x07	; 7
    // Stats to be tracked and sent; mandatory/priority items must be first.
    // A copy is taken of the user-supplied set of descriptions, preserving order.
    DescValueTuple stats[MaxStats];

  public:
    SimpleStatsRotation() : SimpleStatsRotationBase(stats, MaxStats) { }
     fea:	82 e0       	ldi	r24, 0x02	; 2
     fec:	ea 33       	cpi	r30, 0x3A	; 58
     fee:	f8 07       	cpc	r31, r24
     ff0:	91 f7       	brne	.-28     	; 0xfd6 <bareStatsTX(bool, bool, bool)+0xca>
     ff2:	8d e0       	ldi	r24, 0x0D	; 13
     ff4:	92 e0       	ldi	r25, 0x02	; 2
     ff6:	0e 94 95 3b 	call	0x772a	; 0x772a <__cxa_guard_release>
  bool maximise = false;
  if(ss1.isEmpty())
     ffa:	80 91 18 02 	lds	r24, 0x0218
     ffe:	88 23       	and	r24, r24
    1000:	11 f0       	breq	.+4      	; 0x1006 <bareStatsTX(bool, bool, bool)+0xfa>
    1002:	10 e0       	ldi	r17, 0x00	; 0
    1004:	06 c0       	rjmp	.+12     	; 0x1012 <bareStatsTX(bool, bool, bool)+0x106>
    bool isEmpty() { return(0 == nStats); }

    // Iff true enable the count ("+") field and display immediately after the "@"/ID field.
    // The unsigned count increments as a successful write() operation completes,
    // and wraps after 63 (to limit space), potentially allowing easy detection of lost stats/transmissions.
    void enableCount(bool enable) { c.enabled = enable; }
    1006:	80 91 1d 02 	lds	r24, 0x021D
    100a:	81 60       	ori	r24, 0x01	; 1
    100c:	80 93 1d 02 	sts	0x021D, r24
    1010:	11 e0       	ldi	r17, 0x01	; 1
    ss1.enableCount(true); // For diagnostic purposes.
#endif
    // Try and get as much out on the first TX as possible.
    maximise = true;
    }
  ss1.put("T|C16", TemperatureC16.get());
    1012:	40 91 6f 03 	lds	r20, 0x036F
    1016:	50 91 70 03 	lds	r21, 0x0370
    101a:	85 e1       	ldi	r24, 0x15	; 21
    101c:	92 e0       	ldi	r25, 0x02	; 2
    101e:	60 e0       	ldi	r22, 0x00	; 0
    1020:	71 e0       	ldi	r23, 0x01	; 1
    1022:	0e 94 1a 1a 	call	0x3434	; 0x3434 <SimpleStatsRotationBase::put(char const*, int)>
    1026:	40 91 6b 03 	lds	r20, 0x036B
#if defined(HUMIDITY_SENSOR_SUPPORT)
  ss1.put("H|%", RelHumidity.get());
    102a:	85 e1       	ldi	r24, 0x15	; 21
    102c:	92 e0       	ldi	r25, 0x02	; 2
    102e:	66 e0       	ldi	r22, 0x06	; 6
    1030:	71 e0       	ldi	r23, 0x01	; 1
    1032:	50 e0       	ldi	r21, 0x00	; 0
    1034:	0e 94 1a 1a 	call	0x3434	; 0x3434 <SimpleStatsRotationBase::put(char const*, int)>
#endif
  ss1.put("L", AmbLight.get()/4);
    1038:	40 91 66 03 	lds	r20, 0x0366
    103c:	50 91 67 03 	lds	r21, 0x0367
    1040:	56 95       	lsr	r21
    1042:	47 95       	ror	r20
    1044:	56 95       	lsr	r21
    1046:	47 95       	ror	r20
    1048:	85 e1       	ldi	r24, 0x15	; 21
    104a:	92 e0       	ldi	r25, 0x02	; 2
    104c:	6a e0       	ldi	r22, 0x0A	; 10
    104e:	71 e0       	ldi	r23, 0x01	; 1
    1050:	0e 94 1a 1a 	call	0x3434	; 0x3434 <SimpleStatsRotationBase::put(char const*, int)>
  ss1.put("B|cV", Supply_mV.get()/10);
    1054:	80 91 16 03 	lds	r24, 0x0316
    1058:	90 91 17 03 	lds	r25, 0x0317
    105c:	6a e0       	ldi	r22, 0x0A	; 10
    105e:	70 e0       	ldi	r23, 0x00	; 0
    1060:	0e 94 59 3e 	call	0x7cb2	; 0x7cb2 <__udivmodhi4>
    1064:	ab 01       	movw	r20, r22
    1066:	85 e1       	ldi	r24, 0x15	; 21
    1068:	92 e0       	ldi	r25, 0x02	; 2
    106a:	6c e0       	ldi	r22, 0x0C	; 12
    106c:	71 e0       	ldi	r23, 0x01	; 1
    106e:	0e 94 1a 1a 	call	0x3434	; 0x3434 <SimpleStatsRotationBase::put(char const*, int)>
  // If not doing a doubleTX then suppress the change-flag clearing for this send
  wrote = ss1.writeJSON(bptr, sizeof(buf) - (bptr-buf), getStatsTXLevel(), maximise, !allowDoubleTX);
    1072:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <getStatsTXLevel()>
    1076:	08 2f       	mov	r16, r24
                JsonKey     key;
                JsonValue   value;
            };

            JsonObjectBase(KeyValuePair* items, int capacity)
                : _items(items), _capacity(capacity), _count(0)
    1078:	be 01       	movw	r22, r28
    107a:	68 5f       	subi	r22, 0xF8	; 248
    107c:	7f 4f       	sbci	r23, 0xFF	; 255
    107e:	68 5f       	subi	r22, 0xF8	; 248
    1080:	7f 4f       	sbci	r23, 0xFF	; 255
    1082:	7b 87       	std	Y+11, r23	; 0x0b
    1084:	6a 87       	std	Y+10, r22	; 0x0a
    1086:	68 50       	subi	r22, 0x08	; 8
    1088:	70 40       	sbci	r23, 0x00	; 0
    108a:	86 e0       	ldi	r24, 0x06	; 6
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	9d 87       	std	Y+13, r25	; 0x0d
    1090:	8c 87       	std	Y+12, r24	; 0x0c
    1092:	1f 86       	std	Y+15, r1	; 0x0f
    1094:	1e 86       	std	Y+14, r1	; 0x0e
        template <int N>
        class JsonObject : public JsonObjectBase
        {
        public:
            JsonObject()
                : JsonObjectBase(_items, N)
    1096:	8f e6       	ldi	r24, 0x6F	; 111
    1098:	91 e0       	ldi	r25, 0x01	; 1
    109a:	99 87       	std	Y+9, r25	; 0x09
    109c:	88 87       	std	Y+8, r24	; 0x08
    uint8_t writeJSON(uint8_t * const buf, const uint8_t bufSize, const uint8_t sensitivity,
                      const bool maximise = false, const bool suppressClearChanged = true)
      {
      // Create temporary instance for @/ID plus optional count plus remaining stats...
      ArduinoJson::Generator::JsonObject<MaxStats+2> jo;
      return(_writeJSON(jo, buf, bufSize, sensitivity, maximise, suppressClearChanged));
    109e:	90 e4       	ldi	r25, 0x40	; 64
    10a0:	89 2e       	mov	r8, r25
    10a2:	91 2c       	mov	r9, r1
    10a4:	8c 0e       	add	r8, r28
    10a6:	9d 1e       	adc	r9, r29
    10a8:	88 e0       	ldi	r24, 0x08	; 8
    10aa:	a8 2e       	mov	r10, r24
    10ac:	b1 2c       	mov	r11, r1
    10ae:	a8 0c       	add	r10, r8
    10b0:	b9 1c       	adc	r11, r9
    10b2:	31 e0       	ldi	r19, 0x01	; 1
    10b4:	3d 25       	eor	r19, r13
    10b6:	85 e1       	ldi	r24, 0x15	; 21
    10b8:	92 e0       	ldi	r25, 0x02	; 2
    10ba:	a5 01       	movw	r20, r10
    10bc:	29 e3       	ldi	r18, 0x39	; 57
    10be:	e1 2e       	mov	r14, r17
    10c0:	c3 2e       	mov	r12, r19
    10c2:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)>
    10c6:	18 2f       	mov	r17, r24
  if(0 == wrote)
    10c8:	88 23       	and	r24, r24
    10ca:	c1 f0       	breq	.+48     	; 0x10fc <bareStatsTX(bool, bool, bool)+0x1f0>
//DEBUG_SERIAL_PRINTLN_FLASHSTRING("JSON gen err!");
    return;
    }
    
  // Record stats as if local, and treat channel as secure.
  recordJSONStats(true, (const char *)bptr);
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	b5 01       	movw	r22, r10
    10d0:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <recordJSONStats(bool, char const*)>
  DEBUG_SERIAL_PRINT((const char *)bptr);
  DEBUG_SERIAL_PRINTLN();
#endif
  // Adjust JSON message for reliable transmission.
  // (Set high-bit on final '}' to make it unique, and compute and append (non-0xff) CRC.)
  const uint8_t crc = adjustJSONMsgForTXAndComputeCRC((char *)bptr);
    10d4:	c5 01       	movw	r24, r10
    10d6:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <adjustJSONMsgForTXAndComputeCRC(char*)>
  if(0xff == crc)
    10da:	8f 3f       	cpi	r24, 0xFF	; 255
    10dc:	79 f0       	breq	.+30     	; 0x10fc <bareStatsTX(bool, bool, bool)+0x1f0>
    {
//DEBUG_SERIAL_PRINTLN_FLASHSTRING("JSON msg bad!");
    return;
    }
  bptr += wrote;
    10de:	e1 2f       	mov	r30, r17
    10e0:	ff 27       	eor	r31, r31
    10e2:	e7 fd       	sbrc	r30, 7
    10e4:	f0 95       	com	r31
    10e6:	ea 0d       	add	r30, r10
    10e8:	fb 1d       	adc	r31, r11
  *bptr++ = crc; // Add 7-bit CRC for on-the-wire check.
    10ea:	80 83       	st	Z, r24
  *bptr = 0xff; // Terminate message for TX.
    10ec:	8f ef       	ldi	r24, 0xFF	; 255
    10ee:	81 83       	std	Z+1, r24	; 0x01
    return;
    }
#endif
  // TODO: put in listen before TX to reduce collisions (CSMA).
  // Send it!
  rawStatsTX(false, buf, resumeRX, allowDoubleTX);
    10f0:	80 e0       	ldi	r24, 0x00	; 0
    10f2:	b4 01       	movw	r22, r8
    10f4:	47 2d       	mov	r20, r7
    10f6:	2d 2d       	mov	r18, r13
    10f8:	0e 94 ca 06 	call	0xd94	; 0xd94 <rawStatsTX(bool, unsigned char*, bool, bool)>

#endif // defined(ALLOW_JSON_OUTPUT)

//DEBUG_SERIAL_PRINTLN_FLASHSTRING("Stats TX");
  }
    10fc:	c0 58       	subi	r28, 0x80	; 128
    10fe:	df 4f       	sbci	r29, 0xFF	; 255
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	f8 94       	cli
    1104:	de bf       	out	0x3e, r29	; 62
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	cd bf       	out	0x3d, r28	; 61
    110a:	cf 91       	pop	r28
    110c:	df 91       	pop	r29
    110e:	1f 91       	pop	r17
    1110:	0f 91       	pop	r16
    1112:	ff 90       	pop	r15
    1114:	ef 90       	pop	r14
    1116:	df 90       	pop	r13
    1118:	cf 90       	pop	r12
    111a:	bf 90       	pop	r11
    111c:	af 90       	pop	r10
    111e:	9f 90       	pop	r9
    1120:	8f 90       	pop	r8
    1122:	7f 90       	pop	r7
    1124:	08 95       	ret

00001126 <setupOpenTRV()>:
#endif

void setupOpenTRV()
  {
  // Set up async edge interrupts.
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    1126:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1128:	f8 94       	cli
    {
    //PCICR = 0x05;
    //PCMSK0 = 0b00000011; // PB; PCINT  0--7    (LEARN1 and Radio)
    //PCMSK1 = 0b00000000; // PC; PCINT  8--15
    //PCMSK2 = 0b00101001; // PD; PCINT 16--24   (LEARN2 and MODE, RX)
    PCICR = 0x4; // 0x4 enables PD/PCMSK2.
    112a:	84 e0       	ldi	r24, 0x04	; 4
    112c:	80 93 68 00 	sts	0x0068, r24
    PCMSK2 = MASK_PD; // PD; PCINT 16--24 (0b1 is PCINT16/RX)
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	80 93 6d 00 	sts	0x006D, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1136:	9f bf       	out	0x3f, r25	; 63
  // Do early 'wake-up' stats transmission if possible
  // when everything else is set up and ready.
  // Attempt to maximise chance of reception with  double TX.
  // Assume not in hub mode yet.
  // Send all possible formats.
  bareStatsTX(false, true, true);
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	61 e0       	ldi	r22, 0x01	; 1
    113c:	41 e0       	ldi	r20, 0x01	; 1
    113e:	0e 94 86 07 	call	0xf0c	; 0xf0c <bareStatsTX(bool, bool, bool)>

  // Set appropriate loop() values just before entering it.
  TIME_LSD = getSecondsLT();
    1142:	80 91 20 03 	lds	r24, 0x0320
    1146:	80 93 05 02 	sts	0x0205, r24
  }
    114a:	08 95       	ret

0000114c <zapStats(unsigned int)>:

// Clear all collected statistics, eg when moving device to a new room or at a major time change.
// Requires 1.8ms per byte for each byte that actually needs erasing.
//   * maxBytesToErase limit the number of bytes erased to this; strictly positive, else 0 to allow 65536
// Returns true if finished with all bytes erased.
bool zapStats(uint16_t maxBytesToErase)
    114c:	0f 93       	push	r16
    114e:	1f 93       	push	r17
    1150:	cf 93       	push	r28
    1152:	df 93       	push	r29
    1154:	8c 01       	movw	r16, r24
    1156:	c0 e0       	ldi	r28, 0x00	; 0
    1158:	d1 e0       	ldi	r29, 0x01	; 1
  {
  for(uint8_t *p = (uint8_t *)EE_START_STATS; p <= (uint8_t *)EE_END_STATS; ++p)
    { if(eeprom_smart_erase_byte(p)) { if(--maxBytesToErase == 0) { return(false); } } } // Stop if out of time...
    115a:	ce 01       	movw	r24, r28
    115c:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <eeprom_smart_erase_byte(unsigned char*)>
    1160:	88 23       	and	r24, r24
    1162:	29 f0       	breq	.+10     	; 0x116e <zapStats(unsigned int)+0x22>
    1164:	01 50       	subi	r16, 0x01	; 1
    1166:	10 40       	sbci	r17, 0x00	; 0
    1168:	11 f4       	brne	.+4      	; 0x116e <zapStats(unsigned int)+0x22>
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	06 c0       	rjmp	.+12     	; 0x117a <zapStats(unsigned int)+0x2e>
// Requires 1.8ms per byte for each byte that actually needs erasing.
//   * maxBytesToErase limit the number of bytes erased to this; strictly positive, else 0 to allow 65536
// Returns true if finished with all bytes erased.
bool zapStats(uint16_t maxBytesToErase)
  {
  for(uint8_t *p = (uint8_t *)EE_START_STATS; p <= (uint8_t *)EE_END_STATS; ++p)
    116e:	21 96       	adiw	r28, 0x01	; 1
    1170:	82 e0       	ldi	r24, 0x02	; 2
    1172:	c0 32       	cpi	r28, 0x20	; 32
    1174:	d8 07       	cpc	r29, r24
    1176:	89 f7       	brne	.-30     	; 0x115a <zapStats(unsigned int)+0xe>
    1178:	81 e0       	ldi	r24, 0x01	; 1
    { if(eeprom_smart_erase_byte(p)) { if(--maxBytesToErase == 0) { return(false); } } } // Stop if out of time...
  return(true); // All done.
  }
    117a:	df 91       	pop	r29
    117c:	cf 91       	pop	r28
    117e:	1f 91       	pop	r17
    1180:	0f 91       	pop	r16
    1182:	08 95       	ret

00001184 <ModelledRadValve::setMinValvePcReallyOpen(unsigned char)>:
  }

// Set and cache minimum valve percentage open to be considered really open.
// Applies to local valve and, at hub, to calls for remote calls for heat.
// Any out-of-range value (eg >100) clears the override and DEFAULT_MIN_VALVE_PC_REALLY_OPEN will be used.
void ModelledRadValve::setMinValvePcReallyOpen(const uint8_t percent)
    1184:	1f 93       	push	r17
    1186:	18 2f       	mov	r17, r24
  {
  if((percent > 100) || (percent == 0) || (percent == DEFAULT_MIN_VALVE_PC_REALLY_OPEN))
    1188:	81 50       	subi	r24, 0x01	; 1
    118a:	84 36       	cpi	r24, 0x64	; 100
    118c:	10 f4       	brcc	.+4      	; 0x1192 <ModelledRadValve::setMinValvePcReallyOpen(unsigned char)+0xe>
    118e:	1a 30       	cpi	r17, 0x0A	; 10
    1190:	41 f4       	brne	.+16     	; 0x11a2 <ModelledRadValve::setMinValvePcReallyOpen(unsigned char)+0x1e>
    {
    // Bad / out-of-range / default value so erase stored value if not already so.
    eeprom_smart_erase_byte((uint8_t *)EE_START_MIN_VALVE_PC_REALLY_OPEN);
    1192:	83 e1       	ldi	r24, 0x13	; 19
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <eeprom_smart_erase_byte(unsigned char*)>
    // Cache logical default value.
    mVPRO_cache = DEFAULT_MIN_VALVE_PC_REALLY_OPEN;
    119a:	8a e0       	ldi	r24, 0x0A	; 10
    119c:	80 93 04 02 	sts	0x0204, r24
    11a0:	07 c0       	rjmp	.+14     	; 0x11b0 <ModelledRadValve::setMinValvePcReallyOpen(unsigned char)+0x2c>
    return;
    }
  // Store specified value with as low wear as possible.
  eeprom_smart_update_byte((uint8_t *)EE_START_MIN_VALVE_PC_REALLY_OPEN, percent);
    11a2:	83 e1       	ldi	r24, 0x13	; 19
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	61 2f       	mov	r22, r17
    11a8:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <eeprom_smart_update_byte(unsigned char*, unsigned char)>
  // Cache it.
  mVPRO_cache = percent;
    11ac:	10 93 04 02 	sts	0x0204, r17
  }
    11b0:	1f 91       	pop	r17
    11b2:	08 95       	ret

000011b4 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)>:
// Returns false if a full set of stats not available, eg including the specified hour.
// Always returns false if all samples are the same.
//   * inTop  test for membership of the top quartile if true, bottom quartile if false
//   * statsSet  stats set number to use.
//   * hour  hour of day to use or ~0 for current hour.
bool inOutlierQuartile(const uint8_t inTop, const uint8_t statsSet, const uint8_t hour)
    11b4:	0f 93       	push	r16
    11b6:	1f 93       	push	r17
    11b8:	08 2f       	mov	r16, r24
    11ba:	16 2f       	mov	r17, r22
  {
  if(statsSet >= EE_STATS_SETS) { return(false); } // Bad stats set number, ie unsafe.
    11bc:	6b 30       	cpi	r22, 0x0B	; 11
    11be:	08 f0       	brcs	.+2      	; 0x11c2 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0xe>
    11c0:	3f c0       	rjmp	.+126    	; 0x1240 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x8c>
  const uint8_t hh = (hour > 23) ? getHoursLT() : hour;
    11c2:	48 31       	cpi	r20, 0x18	; 24
    11c4:	18 f0       	brcs	.+6      	; 0x11cc <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x18>
    11c6:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <getHoursLT()>
    11ca:	48 2f       	mov	r20, r24
  const uint8_t *ss = (uint8_t *)(EE_STATS_START_ADDR(statsSet) + hh);
    11cc:	88 e1       	ldi	r24, 0x18	; 24
    11ce:	18 9f       	mul	r17, r24
    11d0:	b0 01       	movw	r22, r0
    11d2:	11 24       	eor	r1, r1
    11d4:	60 50       	subi	r22, 0x00	; 0
    11d6:	7f 4f       	sbci	r23, 0xFF	; 255
    11d8:	64 0f       	add	r22, r20
    11da:	71 1d       	adc	r23, r1
    11dc:	9b 01       	movw	r18, r22
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    11de:	f9 99       	sbic	0x1f, 1	; 31
    11e0:	fe cf       	rjmp	.-4      	; 0x11de <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x2a>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    11e2:	72 bd       	out	0x22, r23	; 34
    11e4:	61 bd       	out	0x21, r22	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    11e6:	f8 9a       	sbi	0x1f, 0	; 31
    11e8:	40 b5       	in	r20, 0x20	; 32
  const uint8_t sample = eeprom_read_byte(ss);
  if(STATS_UNSET_INT == sample) { return(false); }
  if(inTop) { return(inTopQuartile(ss, sample)); }
    11ea:	00 23       	and	r16, r16
    11ec:	21 f4       	brne	.+8      	; 0x11f6 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x42>
    11ee:	90 e0       	ldi	r25, 0x00	; 0
//   * s is start of (24) sample set in EEPROM
//   * sample to be tested for being in lower quartile
static bool inBottomQuartile(const uint8_t *sE, const uint8_t sample)
  {
  uint8_t valuesHigher = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
    11f0:	68 5e       	subi	r22, 0xE8	; 232
    11f2:	7f 4f       	sbci	r23, 0xFF	; 255
    11f4:	22 c0       	rjmp	.+68     	; 0x123a <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x86>
  if(statsSet >= EE_STATS_SETS) { return(false); } // Bad stats set number, ie unsafe.
  const uint8_t hh = (hour > 23) ? getHoursLT() : hour;
  const uint8_t *ss = (uint8_t *)(EE_STATS_START_ADDR(statsSet) + hh);
  const uint8_t sample = eeprom_read_byte(ss);
  if(STATS_UNSET_INT == sample) { return(false); }
  if(inTop) { return(inTopQuartile(ss, sample)); }
    11f6:	90 e0       	ldi	r25, 0x00	; 0
//   * s is start of (24) sample set in EEPROM
//   * sample to be tested for being in lower quartile
static bool inTopQuartile(const uint8_t *sE, const uint8_t sample)
  {
  uint8_t valuesLower = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
    11f8:	68 5e       	subi	r22, 0xE8	; 232
    11fa:	7f 4f       	sbci	r23, 0xFF	; 255
    11fc:	0d c0       	rjmp	.+26     	; 0x1218 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x64>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    11fe:	f9 99       	sbic	0x1f, 1	; 31
    1200:	fe cf       	rjmp	.-4      	; 0x11fe <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x4a>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1202:	32 bd       	out	0x22, r19	; 34
    1204:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1206:	f8 9a       	sbi	0x1f, 0	; 31
    1208:	80 b5       	in	r24, 0x20	; 32
    {
    const uint8_t v = eeprom_read_byte(sE); 
    if(STATS_UNSET_INT == v) { return(false); } // Abort if not a full set of stats (eg at least one full day's worth). 
    if(v < sample) { if(++valuesLower >= 18) { return(true); } } // Stop as soon as known to be in upper quartile.
    120a:	84 17       	cp	r24, r20
    120c:	18 f4       	brcc	.+6      	; 0x1214 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x60>
    120e:	9f 5f       	subi	r25, 0xFF	; 255
    1210:	92 31       	cpi	r25, 0x12	; 18
    1212:	c0 f4       	brcc	.+48     	; 0x1244 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x90>
//   * s is start of (24) sample set in EEPROM
//   * sample to be tested for being in lower quartile
static bool inTopQuartile(const uint8_t *sE, const uint8_t sample)
  {
  uint8_t valuesLower = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
    1214:	2f 5f       	subi	r18, 0xFF	; 255
    1216:	3f 4f       	sbci	r19, 0xFF	; 255
    1218:	26 17       	cp	r18, r22
    121a:	37 07       	cpc	r19, r23
    121c:	81 f7       	brne	.-32     	; 0x11fe <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x4a>
    121e:	10 c0       	rjmp	.+32     	; 0x1240 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x8c>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1220:	f9 99       	sbic	0x1f, 1	; 31
    1222:	fe cf       	rjmp	.-4      	; 0x1220 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x6c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1224:	32 bd       	out	0x22, r19	; 34
    1226:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1228:	f8 9a       	sbi	0x1f, 0	; 31
    122a:	80 b5       	in	r24, 0x20	; 32
  uint8_t valuesHigher = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
    {
    const uint8_t v = eeprom_read_byte(sE); 
    if(STATS_UNSET_INT == v) { return(false); } // Abort if not a full set of stats (eg at least one full day's worth). 
    if(v > sample) { if(++valuesHigher >= 18) { return(true); } } // Stop as soon as known to be in lower quartile.
    122c:	48 17       	cp	r20, r24
    122e:	18 f4       	brcc	.+6      	; 0x1236 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x82>
    1230:	9f 5f       	subi	r25, 0xFF	; 255
    1232:	92 31       	cpi	r25, 0x12	; 18
    1234:	38 f4       	brcc	.+14     	; 0x1244 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x90>
//   * s is start of (24) sample set in EEPROM
//   * sample to be tested for being in lower quartile
static bool inBottomQuartile(const uint8_t *sE, const uint8_t sample)
  {
  uint8_t valuesHigher = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
    1236:	2f 5f       	subi	r18, 0xFF	; 255
    1238:	3f 4f       	sbci	r19, 0xFF	; 255
    123a:	26 17       	cp	r18, r22
    123c:	37 07       	cpc	r19, r23
    123e:	81 f7       	brne	.-32     	; 0x1220 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x6c>
    1240:	80 e0       	ldi	r24, 0x00	; 0
    1242:	01 c0       	rjmp	.+2      	; 0x1246 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x92>
    1244:	81 e0       	ldi	r24, 0x01	; 1
  const uint8_t *ss = (uint8_t *)(EE_STATS_START_ADDR(statsSet) + hh);
  const uint8_t sample = eeprom_read_byte(ss);
  if(STATS_UNSET_INT == sample) { return(false); }
  if(inTop) { return(inTopQuartile(ss, sample)); }
  return(inBottomQuartile(ss, sample));
  }
    1246:	1f 91       	pop	r17
    1248:	0f 91       	pop	r16
    124a:	08 95       	ret

0000124c <simpleUpdateStatsPair_(unsigned char*, unsigned char)>:
// Do simple update of last and smoothed stats numeric values.
// This assumes that the 'last' set is followed by the smoothed set.
// This autodetects unset values in the smoothed set and replaces them completely.
//   * lastSetPtr  is the offset in EEPROM of the 'last' value, with 'smoothed' assumed to be 24 bytes later.
//   * value  new stats value in range [0,254]
static void simpleUpdateStatsPair_(uint8_t * const lastEEPtr, const uint8_t value)
    124c:	1f 93       	push	r17
    124e:	cf 93       	push	r28
    1250:	df 93       	push	r29
    1252:	ec 01       	movw	r28, r24
    1254:	16 2f       	mov	r17, r22
  {
#if 9 && defined(DEBUG) // Extra arg validation during dev.
  if((((int)lastEEPtr) < EE_START_STATS) || (((int)lastEEPtr)+24 > EE_END_STATS)) { panic(); }
    1256:	8f 3f       	cpi	r24, 0xFF	; 255
    1258:	91 05       	cpc	r25, r1
    125a:	29 f0       	breq	.+10     	; 0x1266 <simpleUpdateStatsPair_(unsigned char*, unsigned char)+0x1a>
    125c:	24 f0       	brlt	.+8      	; 0x1266 <simpleUpdateStatsPair_(unsigned char*, unsigned char)+0x1a>
    125e:	48 96       	adiw	r24, 0x18	; 24
    1260:	80 52       	subi	r24, 0x20	; 32
    1262:	92 40       	sbci	r25, 0x02	; 2
    1264:	14 f0       	brlt	.+4      	; 0x126a <simpleUpdateStatsPair_(unsigned char*, unsigned char)+0x1e>
    1266:	0e 94 97 2e 	call	0x5d2e	; 0x5d2e <panic()>
  if(0xff == value) { panic(); }
    126a:	1f 3f       	cpi	r17, 0xFF	; 255
    126c:	11 f4       	brne	.+4      	; 0x1272 <simpleUpdateStatsPair_(unsigned char*, unsigned char)+0x26>
    126e:	0e 94 97 2e 	call	0x5d2e	; 0x5d2e <panic()>
#endif
  // Update the last-sample slot using the mean samples value.
  eeprom_smart_update_byte(lastEEPtr, value);
    1272:	ce 01       	movw	r24, r28
    1274:	61 2f       	mov	r22, r17
    1276:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <eeprom_smart_update_byte(unsigned char*, unsigned char)>
  // If existing smoothed value unset or invalid, use new one as is, else fold in.
  uint8_t * const pS = lastEEPtr + 24;
    127a:	68 96       	adiw	r28, 0x18	; 24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    127c:	f9 99       	sbic	0x1f, 1	; 31
    127e:	fe cf       	rjmp	.-4      	; 0x127c <simpleUpdateStatsPair_(unsigned char*, unsigned char)+0x30>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1280:	d2 bd       	out	0x22, r29	; 34
    1282:	c1 bd       	out	0x21, r28	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1284:	f8 9a       	sbi	0x1f, 0	; 31
    1286:	80 b5       	in	r24, 0x20	; 32
  const uint8_t smoothed = eeprom_read_byte(pS);
  if(0xff == smoothed) { eeprom_smart_update_byte(pS, value); }
    1288:	8f 3f       	cpi	r24, 0xFF	; 255
    128a:	19 f4       	brne	.+6      	; 0x1292 <simpleUpdateStatsPair_(unsigned char*, unsigned char)+0x46>
    128c:	ce 01       	movw	r24, r28
    128e:	61 2f       	mov	r22, r17
    1290:	05 c0       	rjmp	.+10     	; 0x129c <simpleUpdateStatsPair_(unsigned char*, unsigned char)+0x50>
  else { eeprom_smart_update_byte(pS, smoothStatsValue(smoothed, value)); }
    1292:	61 2f       	mov	r22, r17
    1294:	0e 94 78 06 	call	0xcf0	; 0xcf0 <smoothStatsValue(unsigned char, unsigned char)>
    1298:	68 2f       	mov	r22, r24
    129a:	ce 01       	movw	r24, r28
    129c:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <eeprom_smart_update_byte(unsigned char*, unsigned char)>
  }
    12a0:	df 91       	pop	r29
    12a2:	cf 91       	pop	r28
    12a4:	1f 91       	pop	r17
    12a6:	08 95       	ret

000012a8 <sampleStats(bool)>:
// Call this once per hour with fullSample==true, as near the end of the hour as possible;
// this will update the non-volatile stats record for the current hour.
// Optionally call this at a small (2--10) even number of evenly-spaced number of other times thoughout the hour
// with fullSample=false to sub-sample (and these may receive lower weighting or be ignored).
// (EEPROM wear should not be an issue at this update rate in normal use.)
void sampleStats(const bool fullSample)
    12a8:	df 92       	push	r13
    12aa:	ef 92       	push	r14
    12ac:	ff 92       	push	r15
    12ae:	0f 93       	push	r16
    12b0:	1f 93       	push	r17
    12b2:	df 93       	push	r29
    12b4:	cf 93       	push	r28
    12b6:	00 d0       	rcall	.+0      	; 0x12b8 <sampleStats(bool)+0x10>
    12b8:	cd b7       	in	r28, 0x3d	; 61
    12ba:	de b7       	in	r29, 0x3e	; 62
    12bc:	58 2f       	mov	r21, r24
  {
  // (Sub-)sample processing.
  // In general, keep running total of sub-samples in a way that should not overflow
  // and use the mean to update the non-volatile EEPROM values on the fullSample call.
  static uint8_t sampleCount_; // General sub-sample count; initially zero after boot, and zeroed after each full sample.
  const bool firstSample = (0 == sampleCount_++);
    12be:	60 91 45 02 	lds	r22, 0x0245
    12c2:	40 e0       	ldi	r20, 0x00	; 0
    12c4:	66 23       	and	r22, r22
    12c6:	09 f4       	brne	.+2      	; 0x12ca <sampleStats(bool)+0x22>
    12c8:	41 e0       	ldi	r20, 0x01	; 1
    12ca:	d6 2e       	mov	r13, r22
    12cc:	d3 94       	inc	r13
    12ce:	d0 92 45 02 	sts	0x0245, r13
  // WARM mode count.
  static int8_t warmCount; // Sub-sample WARM count; initially zero, and zeroed after each full sample.
  if(inWarmMode()) { ++warmCount; } else { --warmCount; }
    12d2:	80 91 4a 02 	lds	r24, 0x024A
    12d6:	90 91 44 02 	lds	r25, 0x0244
    12da:	88 23       	and	r24, r24
    12dc:	11 f0       	breq	.+4      	; 0x12e2 <sampleStats(bool)+0x3a>
    12de:	9f 5f       	subi	r25, 0xFF	; 255
    12e0:	01 c0       	rjmp	.+2      	; 0x12e4 <sampleStats(bool)+0x3c>
    12e2:	91 50       	subi	r25, 0x01	; 1
    12e4:	90 93 44 02 	sts	0x0244, r25
    virtual uint8_t preferredPollInterval_s() const { return(60); }

    // Return last value fetched by read(); undefined before first read().
    // Fast.
    // Thread-safe and usable within ISRs (Interrupt Service Routines).
    virtual uint16_t get() const { return(value); }
    12e8:	20 91 66 03 	lds	r18, 0x0366
    12ec:	30 91 67 03 	lds	r19, 0x0367
  // Ambient light.
  const int ambLight = AmbLight.get();
  static uint16_t ambLightTotal;
  ambLightTotal = firstSample ? ambLight : (ambLightTotal + ambLight);
    12f0:	44 23       	and	r20, r20
    12f2:	31 f4       	brne	.+12     	; 0x1300 <sampleStats(bool)+0x58>
    12f4:	80 91 42 02 	lds	r24, 0x0242
    12f8:	90 91 43 02 	lds	r25, 0x0243
    12fc:	28 0f       	add	r18, r24
    12fe:	39 1f       	adc	r19, r25
    1300:	30 93 43 02 	sts	0x0243, r19
    1304:	20 93 42 02 	sts	0x0242, r18
    virtual int read();

    // Return last value fetched by read(); undefined before first read().
    // Fast.
    // Not thread-safe nor usable within ISRs (Interrupt Service Routines).
    virtual int get() const { return(value); }
    1308:	20 91 6f 03 	lds	r18, 0x036F
    130c:	30 91 70 03 	lds	r19, 0x0370
  const int tempC16 = TemperatureC16.get();
  static int tempC16Total;
  tempC16Total = firstSample ? tempC16 : (tempC16Total + tempC16);
    1310:	44 23       	and	r20, r20
    1312:	31 f4       	brne	.+12     	; 0x1320 <sampleStats(bool)+0x78>
    1314:	80 91 40 02 	lds	r24, 0x0240
    1318:	90 91 41 02 	lds	r25, 0x0241
    131c:	28 0f       	add	r18, r24
    131e:	39 1f       	adc	r19, r25
    1320:	30 93 41 02 	sts	0x0241, r19
    1324:	20 93 40 02 	sts	0x0240, r18
// Confidence drops linearly from 100% over time since last marked as occupied,
// and is >= 50% when markAsPossiblyOccupied() called or isLikelyRecentlyOccupied() just true.
// Thread-safe.
uint8_t occupancyConfidencePercent()
  {
  if(0 == occupationCountdownM) { return(0); }
    1328:	80 91 47 02 	lds	r24, 0x0247
    132c:	88 23       	and	r24, r24
    132e:	11 f4       	brne	.+4      	; 0x1334 <sampleStats(bool)+0x8c>
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	0e c0       	rjmp	.+28     	; 0x1350 <sampleStats(bool)+0xa8>
  return(fnmin((uint8_t)((uint8_t)100 - (uint8_t)((((uint8_t)OCCUPATION_TIMEOUT_M) - occupationCountdownM) << OCCCP_SHIFT)), (uint8_t)100));
    1334:	80 91 47 02 	lds	r24, 0x0247
    1338:	9d e2       	ldi	r25, 0x2D	; 45
    133a:	98 1b       	sub	r25, r24
    133c:	99 0f       	add	r25, r25
    133e:	84 e6       	ldi	r24, 0x64	; 100
    1340:	28 2f       	mov	r18, r24
    1342:	29 1b       	sub	r18, r25
    1344:	92 2f       	mov	r25, r18
    1346:	29 83       	std	Y+1, r18	; 0x01
    1348:	8a 83       	std	Y+2, r24	; 0x02
    134a:	25 36       	cpi	r18, 0x65	; 101
    134c:	08 f0       	brcs	.+2      	; 0x1350 <sampleStats(bool)+0xa8>
    134e:	94 e6       	ldi	r25, 0x64	; 100
  ambLightTotal = firstSample ? ambLight : (ambLightTotal + ambLight);
  const int tempC16 = TemperatureC16.get();
  static int tempC16Total;
  tempC16Total = firstSample ? tempC16 : (tempC16Total + tempC16);
#ifdef OCCUPANCY_SUPPORT
  const uint16_t occpc = occupancyConfidencePercent();
    1350:	29 2f       	mov	r18, r25
    1352:	30 e0       	ldi	r19, 0x00	; 0
  static uint16_t occpcTotal;
  occpcTotal = firstSample ? occpc : (occpcTotal + occpc);
    1354:	44 23       	and	r20, r20
    1356:	31 f4       	brne	.+12     	; 0x1364 <sampleStats(bool)+0xbc>
    1358:	80 91 3e 02 	lds	r24, 0x023E
    135c:	90 91 3f 02 	lds	r25, 0x023F
    1360:	28 0f       	add	r18, r24
    1362:	39 1f       	adc	r19, r25
    1364:	30 93 3f 02 	sts	0x023F, r19
    1368:	20 93 3e 02 	sts	0x023E, r18
    136c:	80 91 6b 03 	lds	r24, 0x036B
#endif
#if defined(HUMIDITY_SENSOR_SUPPORT)
  // Assume for now RH% always available (compile-time determined) or not; not intermittent.
  // TODO: allow this to work with at least start-up-time availability detection.
  uint16_t rhpc = RelHumidity.get();
    1370:	28 2f       	mov	r18, r24
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	c9 01       	movw	r24, r18
    1376:	9c 01       	movw	r18, r24
    1378:	85 36       	cpi	r24, 0x65	; 101
    137a:	91 05       	cpc	r25, r1
    137c:	10 f0       	brcs	.+4      	; 0x1382 <sampleStats(bool)+0xda>
    137e:	24 e6       	ldi	r18, 0x64	; 100
    1380:	30 e0       	ldi	r19, 0x00	; 0
  if(rhpc > 100) { rhpc = 100; } // Fail safe.
  static uint16_t rhpcTotal;
  rhpcTotal = firstSample ? rhpc : (rhpcTotal + rhpc);
    1382:	44 23       	and	r20, r20
    1384:	31 f4       	brne	.+12     	; 0x1392 <sampleStats(bool)+0xea>
    1386:	80 91 3c 02 	lds	r24, 0x023C
    138a:	90 91 3d 02 	lds	r25, 0x023D
    138e:	28 0f       	add	r18, r24
    1390:	39 1f       	adc	r19, r25
    1392:	30 93 3d 02 	sts	0x023D, r19
    1396:	20 93 3c 02 	sts	0x023C, r18
#endif
  if(!fullSample) { return; } // Only accumulate values cached until a full sample.
    139a:	55 23       	and	r21, r21
    139c:	09 f4       	brne	.+2      	; 0x13a0 <sampleStats(bool)+0xf8>
    139e:	a3 c0       	rjmp	.+326    	; 0x14e6 <sampleStats(bool)+0x23e>
  // Catpure sample count to use below.
  const uint8_t sc = sampleCount_; 
  // Reset generic sub-sample count to initial state after fill sample.
  sampleCount_ = 0;
    13a0:	10 92 45 02 	sts	0x0245, r1

  // Get the current local-time hour...
  const uint_least8_t hh = getHoursLT(); 
    13a4:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <getHoursLT()>
    13a8:	18 2f       	mov	r17, r24

  // Scale and constrain last-read temperature to valid range for stats.
  const int tempCTotal = (1==sc)?tempC16Total:
                         ((2==sc)?((tempC16Total+1)>>1):
                                  ((tempC16Total + (sc>>1)) / sc));
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	d8 16       	cp	r13, r24
    13ae:	29 f4       	brne	.+10     	; 0x13ba <sampleStats(bool)+0x112>
    13b0:	80 91 40 02 	lds	r24, 0x0240
    13b4:	90 91 41 02 	lds	r25, 0x0241
    13b8:	16 c0       	rjmp	.+44     	; 0x13e6 <sampleStats(bool)+0x13e>
    13ba:	20 91 40 02 	lds	r18, 0x0240
    13be:	30 91 41 02 	lds	r19, 0x0241
    13c2:	82 e0       	ldi	r24, 0x02	; 2
    13c4:	d8 16       	cp	r13, r24
    13c6:	29 f4       	brne	.+10     	; 0x13d2 <sampleStats(bool)+0x12a>
    13c8:	c9 01       	movw	r24, r18
    13ca:	01 96       	adiw	r24, 0x01	; 1
    13cc:	95 95       	asr	r25
    13ce:	87 95       	ror	r24
    13d0:	0a c0       	rjmp	.+20     	; 0x13e6 <sampleStats(bool)+0x13e>
    13d2:	6d 2d       	mov	r22, r13
    13d4:	70 e0       	ldi	r23, 0x00	; 0
    13d6:	cb 01       	movw	r24, r22
    13d8:	95 95       	asr	r25
    13da:	87 95       	ror	r24
    13dc:	82 0f       	add	r24, r18
    13de:	93 1f       	adc	r25, r19
    13e0:	0e 94 6d 3e 	call	0x7cda	; 0x7cda <__divmodhi4>
    13e4:	cb 01       	movw	r24, r22
  const uint8_t temp = compressTempC16(tempCTotal);
    13e6:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <compressTempC16(int)>
    13ea:	68 2f       	mov	r22, r24
    DEBUG_SERIAL_PRINT(hh);
    DEBUG_SERIAL_PRINT_FLASHSTRING("h = ");
    DEBUG_SERIAL_PRINT(value);
    DEBUG_SERIAL_PRINTLN();
#endif
  simpleUpdateStatsPair_((uint8_t *)(EE_STATS_START_ADDR(lastSetN) + (hh)), (value));
    13ec:	e1 2e       	mov	r14, r17
    13ee:	ff 24       	eor	r15, r15
    13f0:	c7 01       	movw	r24, r14
    13f2:	80 50       	subi	r24, 0x00	; 0
    13f4:	9f 4f       	sbci	r25, 0xFF	; 255
    13f6:	0e 94 26 09 	call	0x124c	; 0x124c <simpleUpdateStatsPair_(unsigned char*, unsigned char)>
//  const uint8_t tempSmoothed = eeprom_read_byte(phT);
//  if(tempSmoothed > MAX_STATS_TEMP) { eeprom_smart_update_byte(phT, temp); }
//  else { eeprom_smart_update_byte(phT, smoothStatsValue(tempSmoothed, temp)); }

  // Scale and constrain mean ambient-light value to valid range for stats; very top of range is compressed to retain maximum gamut.
  const uint8_t ambLShifted = (uint8_t) ((ambLightTotal + (sc<<1)) / (sc<<2));
    13fa:	0d 2d       	mov	r16, r13
    13fc:	10 e0       	ldi	r17, 0x00	; 0
    DEBUG_SERIAL_PRINT(hh);
    DEBUG_SERIAL_PRINT_FLASHSTRING("h = ");
    DEBUG_SERIAL_PRINT(value);
    DEBUG_SERIAL_PRINTLN();
#endif
  simpleUpdateStatsPair_((uint8_t *)(EE_STATS_START_ADDR(lastSetN) + (hh)), (value));
    13fe:	f7 01       	movw	r30, r14
    1400:	e0 5d       	subi	r30, 0xD0	; 208
    1402:	fe 4f       	sbci	r31, 0xFE	; 254
    1404:	c8 01       	movw	r24, r16
    1406:	88 0f       	add	r24, r24
    1408:	99 1f       	adc	r25, r25
    140a:	20 91 42 02 	lds	r18, 0x0242
    140e:	30 91 43 02 	lds	r19, 0x0243
    1412:	b8 01       	movw	r22, r16
    1414:	66 0f       	add	r22, r22
    1416:	77 1f       	adc	r23, r23
    1418:	66 0f       	add	r22, r22
    141a:	77 1f       	adc	r23, r23
    141c:	82 0f       	add	r24, r18
    141e:	93 1f       	adc	r25, r19
    1420:	0e 94 59 3e 	call	0x7cb2	; 0x7cb2 <__udivmodhi4>
    1424:	6f 3f       	cpi	r22, 0xFF	; 255
    1426:	08 f0       	brcs	.+2      	; 0x142a <sampleStats(bool)+0x182>
    1428:	6e ef       	ldi	r22, 0xFE	; 254
    142a:	cf 01       	movw	r24, r30
    142c:	0e 94 26 09 	call	0x124c	; 0x124c <simpleUpdateStatsPair_(unsigned char*, unsigned char)>
//  if(ambLSmoothed > MAX_STATS_AMBLIGHT) { eeprom_smart_update_byte(phA, ambL); }
//  else { eeprom_smart_update_byte(phA, smoothStatsValue(ambLSmoothed, ambL)); }

#ifdef OCCUPANCY_SUPPORT
  // Occupancy confidence percent, if supported; last and smoothed data sets,
  simpleUpdateStatsPair(EE_STATS_SET_OCCPC_BY_HOUR, hh, smartDivToU8(occpcTotal, sc));
    1430:	60 91 3e 02 	lds	r22, 0x023E
    1434:	70 91 3f 02 	lds	r23, 0x023F
static uint8_t smartDivToU8(const uint16_t total, const uint8_t sampleCount)
  {
#if 0 && defined(DEBUG) // Extra arg validation during dev.
  if(0 == sampleCount) { panic(); }
#endif
  if(1 == sampleCount) { return((uint8_t) total); } // No division required.
    1438:	21 e0       	ldi	r18, 0x01	; 1
    143a:	d2 16       	cp	r13, r18
    143c:	79 f0       	breq	.+30     	; 0x145c <sampleStats(bool)+0x1b4>
  if(2 == sampleCount) { return((uint8_t) (total >> 1)); } // Fast shift instead of slow divide.
    143e:	82 e0       	ldi	r24, 0x02	; 2
    1440:	d8 16       	cp	r13, r24
    1442:	19 f4       	brne	.+6      	; 0x144a <sampleStats(bool)+0x1a2>
    1444:	76 95       	lsr	r23
    1446:	67 95       	ror	r22
    1448:	09 c0       	rjmp	.+18     	; 0x145c <sampleStats(bool)+0x1b4>
  return((uint8_t) ((total + (sampleCount>>1)) / sampleCount)); // Generic divide (slow).
    144a:	c8 01       	movw	r24, r16
    144c:	95 95       	asr	r25
    144e:	87 95       	ror	r24
    1450:	86 0f       	add	r24, r22
    1452:	97 1f       	adc	r25, r23
    1454:	6d 2d       	mov	r22, r13
    1456:	70 e0       	ldi	r23, 0x00	; 0
    1458:	0e 94 59 3e 	call	0x7cb2	; 0x7cb2 <__udivmodhi4>
    DEBUG_SERIAL_PRINT(hh);
    DEBUG_SERIAL_PRINT_FLASHSTRING("h = ");
    DEBUG_SERIAL_PRINT(value);
    DEBUG_SERIAL_PRINTLN();
#endif
  simpleUpdateStatsPair_((uint8_t *)(EE_STATS_START_ADDR(lastSetN) + (hh)), (value));
    145c:	c7 01       	movw	r24, r14
    145e:	80 5a       	subi	r24, 0xA0	; 160
    1460:	9e 4f       	sbci	r25, 0xFE	; 254
    1462:	0e 94 26 09 	call	0x124c	; 0x124c <simpleUpdateStatsPair_(unsigned char*, unsigned char)>
  simpleUpdateStatsPair(EE_STATS_SET_OCCPC_BY_HOUR, hh, smartDivToU8(occpcTotal, sc));
#endif 

#if defined(HUMIDITY_SENSOR_SUPPORT)
  // Relative humidity percent, if supported; last and smoothed data sets,
  simpleUpdateStatsPair(EE_STATS_SET_RHPC_BY_HOUR, hh, smartDivToU8(rhpcTotal, sc));
    1466:	60 91 3c 02 	lds	r22, 0x023C
    146a:	70 91 3d 02 	lds	r23, 0x023D
static uint8_t smartDivToU8(const uint16_t total, const uint8_t sampleCount)
  {
#if 0 && defined(DEBUG) // Extra arg validation during dev.
  if(0 == sampleCount) { panic(); }
#endif
  if(1 == sampleCount) { return((uint8_t) total); } // No division required.
    146e:	21 e0       	ldi	r18, 0x01	; 1
    1470:	d2 16       	cp	r13, r18
    1472:	79 f0       	breq	.+30     	; 0x1492 <sampleStats(bool)+0x1ea>
  if(2 == sampleCount) { return((uint8_t) (total >> 1)); } // Fast shift instead of slow divide.
    1474:	82 e0       	ldi	r24, 0x02	; 2
    1476:	d8 16       	cp	r13, r24
    1478:	19 f4       	brne	.+6      	; 0x1480 <sampleStats(bool)+0x1d8>
    147a:	76 95       	lsr	r23
    147c:	67 95       	ror	r22
    147e:	09 c0       	rjmp	.+18     	; 0x1492 <sampleStats(bool)+0x1ea>
  return((uint8_t) ((total + (sampleCount>>1)) / sampleCount)); // Generic divide (slow).
    1480:	15 95       	asr	r17
    1482:	07 95       	ror	r16
    1484:	c8 01       	movw	r24, r16
    1486:	86 0f       	add	r24, r22
    1488:	97 1f       	adc	r25, r23
    148a:	6d 2d       	mov	r22, r13
    148c:	70 e0       	ldi	r23, 0x00	; 0
    148e:	0e 94 59 3e 	call	0x7cb2	; 0x7cb2 <__udivmodhi4>
    DEBUG_SERIAL_PRINT(hh);
    DEBUG_SERIAL_PRINT_FLASHSTRING("h = ");
    DEBUG_SERIAL_PRINT(value);
    DEBUG_SERIAL_PRINTLN();
#endif
  simpleUpdateStatsPair_((uint8_t *)(EE_STATS_START_ADDR(lastSetN) + (hh)), (value));
    1492:	c7 01       	movw	r24, r14
    1494:	80 57       	subi	r24, 0x70	; 112
    1496:	9e 4f       	sbci	r25, 0xFE	; 254
    1498:	0e 94 26 09 	call	0x124c	; 0x124c <simpleUpdateStatsPair_(unsigned char*, unsigned char)>
  // Bit 6 is 1 if most recent day's sample was in WARM (or BAKE) mode, 0 if in FROST mode.
  // At each new sampling, bits 6--1 are shifted down and the new bit 6 set as above.
  // Designed to enable low-wear no-write or selective erase/write use much of the time;
  // periods which are always the same mode will achieve a steady-state value (eliminating most EEPROM wear)
  // while even some of the rest (while switching over from all-WARM to all-FROST) will only need pure writes (no erase).
  uint8_t *const phW = (uint8_t *)(EE_STATS_START_ADDR(EE_STATS_SET_WARMMODE_BY_HOUR_OF_WK) + hh);
    149c:	97 01       	movw	r18, r14
    149e:	20 51       	subi	r18, 0x10	; 16
    14a0:	3e 4f       	sbci	r19, 0xFE	; 254
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    14a2:	f9 99       	sbic	0x1f, 1	; 31
    14a4:	fe cf       	rjmp	.-4      	; 0x14a2 <sampleStats(bool)+0x1fa>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    14a6:	32 bd       	out	0x22, r19	; 34
    14a8:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    14aa:	f8 9a       	sbi	0x1f, 0	; 31
    14ac:	80 b5       	in	r24, 0x20	; 32
  const uint8_t warmHistory = eeprom_read_byte(phW);
  if(warmHistory & 0x80) { eeprom_smart_clear_bits(phW, inWarmMode() ? 0x7f : 0); } // First use sets all history bits to current sample value.
    14ae:	87 ff       	sbrs	r24, 7
    14b0:	0b c0       	rjmp	.+22     	; 0x14c8 <sampleStats(bool)+0x220>
    14b2:	80 91 4a 02 	lds	r24, 0x024A
    14b6:	88 23       	and	r24, r24
    14b8:	11 f4       	brne	.+4      	; 0x14be <sampleStats(bool)+0x216>
    14ba:	60 e0       	ldi	r22, 0x00	; 0
    14bc:	01 c0       	rjmp	.+2      	; 0x14c0 <sampleStats(bool)+0x218>
    14be:	6f e7       	ldi	r22, 0x7F	; 127
    14c0:	c9 01       	movw	r24, r18
    14c2:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <eeprom_smart_clear_bits(unsigned char*, unsigned char)>
    14c6:	0d c0       	rjmp	.+26     	; 0x14e2 <sampleStats(bool)+0x23a>
  else // Shift in today's sample bit value for this hour at bit 6...
    {
    uint8_t newWarmHistory = (warmHistory >> 1) & 0x3f;
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	95 95       	asr	r25
    14cc:	87 95       	ror	r24
    14ce:	68 2f       	mov	r22, r24
    14d0:	6f 73       	andi	r22, 0x3F	; 63
    if(warmCount > 0) { newWarmHistory |= 0x40; } // Treat as warm iff more WARM than FROST (sub-)samples.
    14d2:	80 91 44 02 	lds	r24, 0x0244
    14d6:	18 16       	cp	r1, r24
    14d8:	0c f4       	brge	.+2      	; 0x14dc <sampleStats(bool)+0x234>
    14da:	60 64       	ori	r22, 0x40	; 64
    eeprom_smart_update_byte(phW, newWarmHistory);
    14dc:	c9 01       	movw	r24, r18
    14de:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <eeprom_smart_update_byte(unsigned char*, unsigned char)>
    }
  // Reset WARM sub-sample count after full sample.
  warmCount = 0;
    14e2:	10 92 44 02 	sts	0x0244, r1

  // TODO: other stats measures...



  }
    14e6:	0f 90       	pop	r0
    14e8:	0f 90       	pop	r0
    14ea:	cf 91       	pop	r28
    14ec:	df 91       	pop	r29
    14ee:	1f 91       	pop	r17
    14f0:	0f 91       	pop	r16
    14f2:	ff 90       	pop	r15
    14f4:	ef 90       	pop	r14
    14f6:	df 90       	pop	r13
    14f8:	08 95       	ret

000014fa <ModelledRadValve::computeTargetTemperature()>:
// Will be called by computeCallForHeat().
// One aim is to allow reasonable energy savings (10--30%)
// even if the device is left in WARM mode all the time,
// using occupancy/light/etc to determine when temperature can be set back
// without annoying users.
void ModelledRadValve::computeTargetTemperature()
    14fa:	ef 92       	push	r14
    14fc:	ff 92       	push	r15
    14fe:	1f 93       	push	r17
    1500:	df 93       	push	r29
    1502:	cf 93       	push	r28
    1504:	00 d0       	rcall	.+0      	; 0x1506 <ModelledRadValve::computeTargetTemperature()+0xc>
    1506:	cd b7       	in	r28, 0x3d	; 61
    1508:	de b7       	in	r29, 0x3e	; 62
    150a:	7c 01       	movw	r14, r24
  {
#if defined(TEMP_POT_AVAILABLE)
  // Force up-to-date reading of temperature pot.
  TempPot.read();
    150c:	81 e7       	ldi	r24, 0x71	; 113
    150e:	93 e0       	ldi	r25, 0x03	; 3
    1510:	0e 94 98 31 	call	0x6330	; 0x6330 <TemperaturePot::read()>
#endif

  if(!inWarmMode()) // In FROST mode.
    1514:	80 91 4a 02 	lds	r24, 0x024A
    1518:	88 23       	and	r24, r24
    151a:	c1 f5       	brne	.+112    	; 0x158c <ModelledRadValve::computeTargetTemperature()+0x92>
    {
    const uint8_t frostC = getFROSTTargetC();
    151c:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <getFROSTTargetC()>
    1520:	38 2f       	mov	r19, r24
    // Apply FROST safety target temperature by default in FROST mode; no setbacks apply.
    targetTempC = frostC;
    1522:	f7 01       	movw	r30, r14
    1524:	83 83       	std	Z+3, r24	; 0x03
    1526:	20 91 73 03 	lds	r18, 0x0373
  // Cached input and result values; initially zero.
  static uint8_t potLast;
  static uint8_t resultLast;
  // Force recompuation if pot value changed
  // or apparently no calc done yet (unlikely/impossible zero cached result).
  if((potLast != pot) || (0 == resultLast))
    152a:	80 91 49 02 	lds	r24, 0x0249
    152e:	82 17       	cp	r24, r18
    1530:	21 f4       	brne	.+8      	; 0x153a <ModelledRadValve::computeTargetTemperature()+0x40>
    1532:	80 91 48 02 	lds	r24, 0x0248
    1536:	88 23       	and	r24, r24
    1538:	79 f4       	brne	.+30     	; 0x1558 <ModelledRadValve::computeTargetTemperature()+0x5e>
  const uint8_t high = (BIASCOM_WARM+1);
  const uint8_t range = high - low + 1;
  const uint8_t band = 256 / range; // Width of band for each degree C...

  // If relatively small number of distinct temperature values...
  if(pot >= 256 - band) { return(high); } // At top... (optimisation / robustness)
    153a:	24 3e       	cpi	r18, 0xE4	; 228
    153c:	10 f0       	brcs	.+4      	; 0x1542 <ModelledRadValve::computeTargetTemperature()+0x48>
    153e:	88 e1       	ldi	r24, 0x18	; 24
    1540:	07 c0       	rjmp	.+14     	; 0x1550 <ModelledRadValve::computeTargetTemperature()+0x56>
    1542:	80 e1       	ldi	r24, 0x10	; 16
    1544:	9c e1       	ldi	r25, 0x1C	; 28
    1546:	02 c0       	rjmp	.+4      	; 0x154c <ModelledRadValve::computeTargetTemperature()+0x52>
  if(range < 10)
    {
    uint8_t result = low;
    for(uint8_t ppot = band; ppot < pot; ++result) { ppot += band; }
    1548:	94 5e       	subi	r25, 0xE4	; 228
    154a:	8f 5f       	subi	r24, 0xFF	; 255
    154c:	92 17       	cp	r25, r18
    154e:	e0 f3       	brcs	.-8      	; 0x1548 <ModelledRadValve::computeTargetTemperature()+0x4e>
  // or apparently no calc done yet (unlikely/impossible zero cached result).
  if((potLast != pot) || (0 == resultLast))
    {
    const uint8_t result = computeWARMTargetC(pot);
    // Cache input/result.
    resultLast = result;
    1550:	80 93 48 02 	sts	0x0248, r24
    potLast = pot;
    1554:	20 93 49 02 	sts	0x0249, r18
    // to give room a chance to hit the target, and for furniture and surfaces to be warm, etc.
    // HINT OF SMARTNESS/ANTICIPATION HERE...
    // Only do this if the target WARM temperature is not an 'eco' temperature (ie near the bottom of the scale)
    // unless the current hour seems to be in the top quartile of occupancy.
    const uint8_t warmTarget = getWARMTargetC();
    const uint8_t preWarmTempC = fnmax((uint8_t)(warmTarget - SETBACK_FULL), frostC); // Putative pre-warm temperature...
    1558:	18 2f       	mov	r17, r24
    155a:	13 50       	subi	r17, 0x03	; 3
template <class T> const T& fnmax(const T& a, const T& b) { return((a<b)?b:a); }
    155c:	13 17       	cp	r17, r19
    155e:	08 f4       	brcc	.+2      	; 0x1562 <ModelledRadValve::computeTargetTemperature()+0x68>
    1560:	71 c0       	rjmp	.+226    	; 0x1644 <ModelledRadValve::computeTargetTemperature()+0x14a>
    if((targetTempC < preWarmTempC) &&
    1562:	31 17       	cp	r19, r17
    1564:	08 f0       	brcs	.+2      	; 0x1568 <ModelledRadValve::computeTargetTemperature()+0x6e>
    1566:	6e c0       	rjmp	.+220    	; 0x1644 <ModelledRadValve::computeTargetTemperature()+0x14a>
  TempPot.read();
#endif

  if(!inWarmMode()) // In FROST mode.
    {
    const uint8_t frostC = getFROSTTargetC();
    1568:	39 83       	std	Y+1, r19	; 0x01
    // to give room a chance to hit the target, and for furniture and surfaces to be warm, etc.
    // HINT OF SMARTNESS/ANTICIPATION HERE...
    // Only do this if the target WARM temperature is not an 'eco' temperature (ie near the bottom of the scale)
    // unless the current hour seems to be in the top quartile of occupancy.
    const uint8_t warmTarget = getWARMTargetC();
    const uint8_t preWarmTempC = fnmax((uint8_t)(warmTarget - SETBACK_FULL), frostC); // Putative pre-warm temperature...
    156a:	1a 83       	std	Y+2, r17	; 0x02
    if((targetTempC < preWarmTempC) &&
    156c:	82 31       	cpi	r24, 0x12	; 18
    156e:	40 f4       	brcc	.+16     	; 0x1580 <ModelledRadValve::computeTargetTemperature()+0x86>
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	65 e0       	ldi	r22, 0x05	; 5
    1574:	4f ef       	ldi	r20, 0xFF	; 255
    1576:	0e 94 da 08 	call	0x11b4	; 0x11b4 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)>
    157a:	88 23       	and	r24, r24
    157c:	09 f4       	brne	.+2      	; 0x1580 <ModelledRadValve::computeTargetTemperature()+0x86>
    157e:	62 c0       	rjmp	.+196    	; 0x1644 <ModelledRadValve::computeTargetTemperature()+0x14a>
    1580:	0e 94 aa 24 	call	0x4954	; 0x4954 <isAnyScheduleOnWARMSoon()>
    1584:	88 23       	and	r24, r24
    1586:	09 f4       	brne	.+2      	; 0x158a <ModelledRadValve::computeTargetTemperature()+0x90>
    1588:	5d c0       	rjmp	.+186    	; 0x1644 <ModelledRadValve::computeTargetTemperature()+0x14a>
    158a:	7b c0       	rjmp	.+246    	; 0x1682 <ModelledRadValve::computeTargetTemperature()+0x188>

#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
    158c:	80 91 46 02 	lds	r24, 0x0246
    1590:	30 91 49 02 	lds	r19, 0x0249
    1594:	88 23       	and	r24, r24
    1596:	09 f4       	brne	.+2      	; 0x159a <ModelledRadValve::computeTargetTemperature()+0xa0>
    1598:	6e c0       	rjmp	.+220    	; 0x1676 <ModelledRadValve::computeTargetTemperature()+0x17c>
    159a:	20 91 73 03 	lds	r18, 0x0373
  // Cached input and result values; initially zero.
  static uint8_t potLast;
  static uint8_t resultLast;
  // Force recompuation if pot value changed
  // or apparently no calc done yet (unlikely/impossible zero cached result).
  if((potLast != pot) || (0 == resultLast))
    159e:	32 17       	cp	r19, r18
    15a0:	21 f4       	brne	.+8      	; 0x15aa <ModelledRadValve::computeTargetTemperature()+0xb0>
    15a2:	80 91 48 02 	lds	r24, 0x0248
    15a6:	88 23       	and	r24, r24
    15a8:	79 f4       	brne	.+30     	; 0x15c8 <ModelledRadValve::computeTargetTemperature()+0xce>
  const uint8_t high = (BIASCOM_WARM+1);
  const uint8_t range = high - low + 1;
  const uint8_t band = 256 / range; // Width of band for each degree C...

  // If relatively small number of distinct temperature values...
  if(pot >= 256 - band) { return(high); } // At top... (optimisation / robustness)
    15aa:	24 3e       	cpi	r18, 0xE4	; 228
    15ac:	10 f0       	brcs	.+4      	; 0x15b2 <ModelledRadValve::computeTargetTemperature()+0xb8>
    15ae:	88 e1       	ldi	r24, 0x18	; 24
    15b0:	07 c0       	rjmp	.+14     	; 0x15c0 <ModelledRadValve::computeTargetTemperature()+0xc6>
    15b2:	80 e1       	ldi	r24, 0x10	; 16
    15b4:	9c e1       	ldi	r25, 0x1C	; 28
    15b6:	02 c0       	rjmp	.+4      	; 0x15bc <ModelledRadValve::computeTargetTemperature()+0xc2>
  if(range < 10)
    {
    uint8_t result = low;
    for(uint8_t ppot = band; ppot < pot; ++result) { ppot += band; }
    15b8:	94 5e       	subi	r25, 0xE4	; 228
    15ba:	8f 5f       	subi	r24, 0xFF	; 255
    15bc:	92 17       	cp	r25, r18
    15be:	e0 f3       	brcs	.-8      	; 0x15b8 <ModelledRadValve::computeTargetTemperature()+0xbe>
  // or apparently no calc done yet (unlikely/impossible zero cached result).
  if((potLast != pot) || (0 == resultLast))
    {
    const uint8_t result = computeWARMTargetC(pot);
    // Cache input/result.
    resultLast = result;
    15c0:	80 93 48 02 	sts	0x0248, r24
    potLast = pot;
    15c4:	20 93 49 02 	sts	0x0249, r18

#ifdef SUPPORT_BAKE
  else if(inBakeMode()) // If in BAKE mode then use elevated target.
    {
    // dec bakeCountdownM // Moved management of counter to UI code.
    targetTempC = fnmin((uint8_t)(getWARMTargetC() + BAKE_UPLIFT), (uint8_t)MAX_TARGET_C); // No setbacks apply in BAKE mode.
    15c8:	8b 5f       	subi	r24, 0xFB	; 251
    15ca:	80 36       	cpi	r24, 0x60	; 96
    15cc:	c8 f1       	brcs	.+114    	; 0x1640 <ModelledRadValve::computeTargetTemperature()+0x146>
    15ce:	8f e5       	ldi	r24, 0x5F	; 95
    15d0:	37 c0       	rjmp	.+110    	; 0x1640 <ModelledRadValve::computeTargetTemperature()+0x146>
  // Cached input and result values; initially zero.
  static uint8_t potLast;
  static uint8_t resultLast;
  // Force recompuation if pot value changed
  // or apparently no calc done yet (unlikely/impossible zero cached result).
  if((potLast != pot) || (0 == resultLast))
    15d2:	10 91 48 02 	lds	r17, 0x0248
    15d6:	11 23       	and	r17, r17
    15d8:	79 f4       	brne	.+30     	; 0x15f8 <ModelledRadValve::computeTargetTemperature()+0xfe>
  const uint8_t high = (BIASCOM_WARM+1);
  const uint8_t range = high - low + 1;
  const uint8_t band = 256 / range; // Width of band for each degree C...

  // If relatively small number of distinct temperature values...
  if(pot >= 256 - band) { return(high); } // At top... (optimisation / robustness)
    15da:	94 3e       	cpi	r25, 0xE4	; 228
    15dc:	10 f0       	brcs	.+4      	; 0x15e2 <ModelledRadValve::computeTargetTemperature()+0xe8>
    15de:	18 e1       	ldi	r17, 0x18	; 24
    15e0:	07 c0       	rjmp	.+14     	; 0x15f0 <ModelledRadValve::computeTargetTemperature()+0xf6>
    15e2:	10 e1       	ldi	r17, 0x10	; 16
    15e4:	8c e1       	ldi	r24, 0x1C	; 28
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <ModelledRadValve::computeTargetTemperature()+0xf2>
  if(range < 10)
    {
    uint8_t result = low;
    for(uint8_t ppot = band; ppot < pot; ++result) { ppot += band; }
    15e8:	84 5e       	subi	r24, 0xE4	; 228
    15ea:	1f 5f       	subi	r17, 0xFF	; 255
    15ec:	89 17       	cp	r24, r25
    15ee:	e0 f3       	brcs	.-8      	; 0x15e8 <ModelledRadValve::computeTargetTemperature()+0xee>
  // or apparently no calc done yet (unlikely/impossible zero cached result).
  if((potLast != pot) || (0 == resultLast))
    {
    const uint8_t result = computeWARMTargetC(pot);
    // Cache input/result.
    resultLast = result;
    15f0:	10 93 48 02 	sts	0x0248, r17
    potLast = pot;
    15f4:	90 93 49 02 	sts	0x0249, r25

// Returns true if the room appears to be likely occupied (with active users) now.
// Operates on a timeout; calling markAsOccupied() restarts the timer.
// Defaults to false (and API still exists) when OCCUPANCY_SUPPORT not defined.
// Thread-safe.
bool isLikelyOccupied() { return(0 != occupationCountdownM); }
    15f8:	80 91 47 02 	lds	r24, 0x0247
    const uint8_t wt = getWARMTargetC();
    // TODO: If no schedule set and no occupancy detected for over 1 day, then invoke full setback assuming people are away, eg on holiday.

    // Set back target temperature a little if the room seems to be unoccupied or dark
    // AND no WARM schedule is active at the moment (TODO-111).
    if((isLikelyUnoccupied() || AmbLight.isRoomDark()) && // Only set back if apparently unoccupied or dark.
    15fc:	88 23       	and	r24, r24
    15fe:	21 f0       	breq	.+8      	; 0x1608 <ModelledRadValve::computeTargetTemperature()+0x10e>
    bool isRoomLit() const { return(isRoomLitFlag); }

    // Returns true if room is light enough for someone to be active.
    // False if unknown.
    // Thread-safe and usable within ISRs (Interrupt Service Routines).
    bool isRoomDark() const { return(!isRoomLitFlag); }
    1600:	80 91 68 03 	lds	r24, 0x0368
    1604:	88 23       	and	r24, r24
    1606:	e9 f5       	brne	.+122    	; 0x1682 <ModelledRadValve::computeTargetTemperature()+0x188>
    1608:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <isAnyScheduleOnWARMNow()>
    160c:	88 23       	and	r24, r24
    160e:	c9 f5       	brne	.+114    	; 0x1682 <ModelledRadValve::computeTargetTemperature()+0x188>
    1610:	80 91 73 03 	lds	r24, 0x0373
      {
      // Use a small non-annoying setback if in comfort mode or the room is light,
      // bigger if neither,
      // biggest if the room is likely to be unoccupied at this time of day.
      const uint8_t setback = (!hasEcoBias() || AmbLight.isRoomLit()) ? SETBACK_DEFAULT :
          (inOutlierQuartile(false, EE_STATS_SET_OCCPC_BY_HOUR_SMOOTHED) ? SETBACK_FULL : SETBACK_ECO);
    1614:	87 fd       	sbrc	r24, 7
    1616:	0e c0       	rjmp	.+28     	; 0x1634 <ModelledRadValve::computeTargetTemperature()+0x13a>
    virtual bool isValid(const uint16_t value) const { return(value < 1024); }

    // Returns true if room is lit enough for someone to be active.
    // False if unknown.
    // Thread-safe and usable within ISRs (Interrupt Service Routines).
    bool isRoomLit() const { return(isRoomLitFlag); }
    1618:	80 91 68 03 	lds	r24, 0x0368
    161c:	88 23       	and	r24, r24
    161e:	51 f4       	brne	.+20     	; 0x1634 <ModelledRadValve::computeTargetTemperature()+0x13a>
    1620:	65 e0       	ldi	r22, 0x05	; 5
    1622:	4f ef       	ldi	r20, 0xFF	; 255
    1624:	0e 94 da 08 	call	0x11b4	; 0x11b4 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)>
    1628:	88 23       	and	r24, r24
    162a:	11 f4       	brne	.+4      	; 0x1630 <ModelledRadValve::computeTargetTemperature()+0x136>
    162c:	82 e0       	ldi	r24, 0x02	; 2
    162e:	03 c0       	rjmp	.+6      	; 0x1636 <ModelledRadValve::computeTargetTemperature()+0x13c>
    1630:	83 e0       	ldi	r24, 0x03	; 3
    1632:	01 c0       	rjmp	.+2      	; 0x1636 <ModelledRadValve::computeTargetTemperature()+0x13c>
    1634:	81 e0       	ldi	r24, 0x01	; 1
      // Set a 'smarter' setback target temperature based on predicted occupancy, etc, even if not explicitly in 'smart' mode.
      const uint_least8_t hh = getHoursLT();
      const uint8_t sba = shouldBeWarmedAtHour(hh) ? setback : SETBACK_FULL; 
      targetTempC = fnmax((uint8_t)(wt - sba), getFROSTTargetC());
#else // Lighter-weight code, eg for PICAXE.
      targetTempC = fnmax((uint8_t)(wt - setback), (uint8_t)MIN_TARGET_C); // Target must never be set low enough to create a frost/freeze hazard.
    1636:	18 1b       	sub	r17, r24
    1638:	81 2f       	mov	r24, r17
    163a:	15 30       	cpi	r17, 0x05	; 5
    163c:	08 f4       	brcc	.+2      	; 0x1640 <ModelledRadValve::computeTargetTemperature()+0x146>
    163e:	85 e0       	ldi	r24, 0x05	; 5
    1640:	f7 01       	movw	r30, r14
    1642:	83 83       	std	Z+3, r24	; 0x03
    }

  // Use a calculation that mirrors how computeRequiredTRVPercentOpen() will set the valve...
  const int currentTempC16 = TemperatureC16.get();
  const uint8_t currentTempC = (uint8_t)(currentTempC16 >> 4);
  callingForHeat = (targetTempC >= currentTempC);
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	80 91 6f 03 	lds	r24, 0x036F
    164a:	90 91 70 03 	lds	r25, 0x0370
    164e:	64 e0       	ldi	r22, 0x04	; 4
    1650:	95 95       	asr	r25
    1652:	87 95       	ror	r24
    1654:	6a 95       	dec	r22
    1656:	e1 f7       	brne	.-8      	; 0x1650 <ModelledRadValve::computeTargetTemperature()+0x156>
    1658:	f7 01       	movw	r30, r14
    165a:	23 81       	ldd	r18, Z+3	; 0x03
    165c:	28 17       	cp	r18, r24
    165e:	08 f0       	brcs	.+2      	; 0x1662 <ModelledRadValve::computeTargetTemperature()+0x168>
    1660:	31 e0       	ldi	r19, 0x01	; 1
    1662:	f7 01       	movw	r30, r14
    1664:	34 83       	std	Z+4, r19	; 0x04
  }
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	1f 91       	pop	r17
    1670:	ff 90       	pop	r15
    1672:	ef 90       	pop	r14
    1674:	08 95       	ret
    1676:	90 91 73 03 	lds	r25, 0x0373
  // Cached input and result values; initially zero.
  static uint8_t potLast;
  static uint8_t resultLast;
  // Force recompuation if pot value changed
  // or apparently no calc done yet (unlikely/impossible zero cached result).
  if((potLast != pot) || (0 == resultLast))
    167a:	39 17       	cp	r19, r25
    167c:	09 f0       	breq	.+2      	; 0x1680 <ModelledRadValve::computeTargetTemperature()+0x186>
    167e:	ad cf       	rjmp	.-166    	; 0x15da <ModelledRadValve::computeTargetTemperature()+0xe0>
    1680:	a8 cf       	rjmp	.-176    	; 0x15d2 <ModelledRadValve::computeTargetTemperature()+0xd8>
      targetTempC = fnmax((uint8_t)(wt - setback), (uint8_t)MIN_TARGET_C); // Target must never be set low enough to create a frost/freeze hazard.
#endif
      }
    // Else use WARM target as-is.
    else
      { targetTempC = wt; }
    1682:	f7 01       	movw	r30, r14
    1684:	13 83       	std	Z+3, r17	; 0x03
    1686:	de cf       	rjmp	.-68     	; 0x1644 <ModelledRadValve::computeTargetTemperature()+0x14a>

00001688 <ModelledRadValve::computeCallForHeat()>:
// The inputs must be valid (and recent).
// Values set are targetTempC, value (TRVPercentOpen).
// This may also prepare data such as TX command sequences for the TRV, boiler, etc.
// This routine may take significant CPU time; no I/O is done, only internal state is updated.
// Returns true if valve target changed and thus messages may need to be recomputed/sent/etc.
bool ModelledRadValve::computeCallForHeat()
    1688:	cf 93       	push	r28
    168a:	df 93       	push	r29
    168c:	ec 01       	movw	r28, r24
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    168e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1690:	f8 94       	cli
    {
#ifdef SUPPORT_BAKE
    // Run down BAKE mode timer if need be, one tick per minute.
    // FIXME: move elsewhere...
    if(bakeCountdownM > 0) { --bakeCountdownM; }
    1692:	80 91 46 02 	lds	r24, 0x0246
    1696:	88 23       	and	r24, r24
    1698:	19 f0       	breq	.+6      	; 0x16a0 <ModelledRadValve::computeCallForHeat()+0x18>
    169a:	81 50       	subi	r24, 0x01	; 1
    169c:	80 93 46 02 	sts	0x0246, r24
#endif
    // Run down occupation timer if need be.
    // FIXME: move to occupation instance read().
    if(occupationCountdownM > 0) { --occupationCountdownM; }
    16a0:	80 91 47 02 	lds	r24, 0x0247
    16a4:	88 23       	and	r24, r24
    16a6:	29 f0       	breq	.+10     	; 0x16b2 <ModelledRadValve::computeCallForHeat()+0x2a>
    16a8:	80 91 47 02 	lds	r24, 0x0247
    16ac:	81 50       	subi	r24, 0x01	; 1
    16ae:	80 93 47 02 	sts	0x0247, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    16b2:	9f bf       	out	0x3f, r25	; 63
    }

  computeTargetTemperature();
    16b4:	ce 01       	movw	r24, r28
    16b6:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <ModelledRadValve::computeTargetTemperature()>
  return(computeRequiredTRVPercentOpen());
    16ba:	ce 01       	movw	r24, r28
    16bc:	0e 94 df 04 	call	0x9be	; 0x9be <ModelledRadValve::computeRequiredTRVPercentOpen()>
  }
    16c0:	df 91       	pop	r29
    16c2:	cf 91       	pop	r28
    16c4:	08 95       	ret

000016c6 <ModelledRadValve::read()>:
  public:
    // Force a read/poll/recomputation of the target position and call for heat.
    // Sets/clears changed flag if computed valve position changed.
    // Call at a fixed rate (1/60s).
    // Potentially expensive/slow.
    virtual uint8_t read() { valveMoved = computeCallForHeat(); return(value); }
    16c6:	0f 93       	push	r16
    16c8:	1f 93       	push	r17
    16ca:	8c 01       	movw	r16, r24
    16cc:	0e 94 44 0b 	call	0x1688	; 0x1688 <ModelledRadValve::computeCallForHeat()>
    16d0:	f8 01       	movw	r30, r16
    16d2:	85 83       	std	Z+5, r24	; 0x05
    16d4:	82 81       	ldd	r24, Z+2	; 0x02
    16d6:	1f 91       	pop	r17
    16d8:	0f 91       	pop	r16
    16da:	08 95       	ret

000016dc <ModelledRadValve::isRecalibrating() const>:
// The target valve position is not lost while this is true.
// By default there is no recalibration step.
bool ModelledRadValve::isRecalibrating() const
  {
#ifdef USE_MODULE_FHT8VSIMPLE
  if(!isSyncedWithFHT8V()) { return(true); }
    16dc:	0e 94 63 10 	call	0x20c6	; 0x20c6 <isSyncedWithFHT8V()>
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	88 23       	and	r24, r24
    16e4:	09 f4       	brne	.+2      	; 0x16e8 <ModelledRadValve::isRecalibrating() const+0xc>
    16e6:	91 e0       	ldi	r25, 0x01	; 1
#endif
  return(false);
  }
    16e8:	89 2f       	mov	r24, r25
    16ea:	08 95       	ret

000016ec <ModelledRadValve::isControlledValveReallyOpen() const>:
// True if the controlled physical valve is thought to be at least partially open right now.
// If multiple valves are controlled then is this true only if all are at least partially open.
// Used to help avoid running boiler pump against closed valves.
// The default is to use the check the current computed position
// against the minimum open percentage.
bool ModelledRadValve::isControlledValveReallyOpen() const
    16ec:	1f 93       	push	r17
    16ee:	cf 93       	push	r28
    16f0:	df 93       	push	r29
    16f2:	ec 01       	movw	r28, r24
  {
  if(isRecalibrating()) { return(false); }
    16f4:	e8 81       	ld	r30, Y
    16f6:	f9 81       	ldd	r31, Y+1	; 0x01
    16f8:	00 88       	ldd	r0, Z+16	; 0x10
    16fa:	f1 89       	ldd	r31, Z+17	; 0x11
    16fc:	e0 2d       	mov	r30, r0
    16fe:	09 95       	icall
    1700:	88 23       	and	r24, r24
    1702:	89 f4       	brne	.+34     	; 0x1726 <ModelledRadValve::isControlledValveReallyOpen() const+0x3a>
#ifdef USE_MODULE_FHT8VSIMPLE
  if(!FHT8VisControlledValveOpen()) { return(false); }
    1704:	0e 94 66 10 	call	0x20cc	; 0x20cc <FHT8VisControlledValveOpen()>
    1708:	88 23       	and	r24, r24
    170a:	69 f0       	breq	.+26     	; 0x1726 <ModelledRadValve::isControlledValveReallyOpen() const+0x3a>
#endif
  return(value >= getMinPercentOpen());
    170c:	1a 81       	ldd	r17, Y+2	; 0x02
    170e:	e8 81       	ld	r30, Y
    1710:	f9 81       	ldd	r31, Y+1	; 0x01
    1712:	02 8c       	ldd	r0, Z+26	; 0x1a
    1714:	f3 8d       	ldd	r31, Z+27	; 0x1b
    1716:	e0 2d       	mov	r30, r0
    1718:	ce 01       	movw	r24, r28
    171a:	09 95       	icall
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	18 17       	cp	r17, r24
    1720:	18 f0       	brcs	.+6      	; 0x1728 <ModelledRadValve::isControlledValveReallyOpen() const+0x3c>
    1722:	91 e0       	ldi	r25, 0x01	; 1
    1724:	01 c0       	rjmp	.+2      	; 0x1728 <ModelledRadValve::isControlledValveReallyOpen() const+0x3c>
    1726:	90 e0       	ldi	r25, 0x00	; 0
  }
    1728:	89 2f       	mov	r24, r25
    172a:	df 91       	pop	r29
    172c:	cf 91       	pop	r28
    172e:	1f 91       	pop	r17
    1730:	08 95       	ret

00001732 <loopOpenTRV()>:



// Main loop for OpenTRV radiator control.
// Note: exiting and re-entering can take a little while, handling Arduino background tasks such as serial.
void loopOpenTRV()
    1732:	7f 92       	push	r7
    1734:	8f 92       	push	r8
    1736:	9f 92       	push	r9
    1738:	af 92       	push	r10
    173a:	bf 92       	push	r11
    173c:	cf 92       	push	r12
    173e:	df 92       	push	r13
    1740:	ef 92       	push	r14
    1742:	ff 92       	push	r15
    1744:	0f 93       	push	r16
    1746:	1f 93       	push	r17
    1748:	df 93       	push	r29
    174a:	cf 93       	push	r28
    174c:	cd b7       	in	r28, 0x3d	; 61
    174e:	de b7       	in	r29, 0x3e	; 62
    1750:	ef 97       	sbiw	r28, 0x3f	; 63
    1752:	0f b6       	in	r0, 0x3f	; 63
    1754:	f8 94       	cli
    1756:	de bf       	out	0x3e, r29	; 62
    1758:	0f be       	out	0x3f, r0	; 63
    175a:	cd bf       	out	0x3d, r28	; 61

  // Set up some variables before sleeping to minimise delay/jitter after the RTC tick.
  bool showStatus = false; // Show status at end of loop?

  // Use the zeroth second in each minute to force extra deep device sleeps/resets, etc.
  const bool second0 = (0 == TIME_LSD);
    175c:	bb 24       	eor	r11, r11
    175e:	80 91 05 02 	lds	r24, 0x0205
    1762:	88 23       	and	r24, r24
    1764:	11 f4       	brne	.+4      	; 0x176a <loopOpenTRV()+0x38>
    1766:	bb 24       	eor	r11, r11
    1768:	b3 94       	inc	r11
  // Sensor readings are taken late in each minute (where they are taken)
  // and if possible noise and heat and light should be minimised in this part of each minute to improve readings.
//  const bool sensorReading30s = (TIME_LSD >= 30);
  // Sensor readings and (stats transmissions) are nominally on a 4-minute cycle.
  const uint8_t minuteFrom4 = (minuteCount & 3);
    176a:	80 91 06 02 	lds	r24, 0x0206
    176e:	83 70       	andi	r24, 0x03	; 3
  // The 0th minute in each group of four is always used for measuring where possible (possibly amongst others)
  // and where possible locally-generated noise and heat and light should be minimised in this minute to give the best possible readings.
  // This is the first (0th) minute in each group of four.
  const bool minute0From4ForSensors = (0 == minuteFrom4);
    1770:	aa 24       	eor	r10, r10
    1772:	88 23       	and	r24, r24
    1774:	11 f4       	brne	.+4      	; 0x177a <loopOpenTRV()+0x48>
    1776:	aa 24       	eor	r10, r10
    1778:	a3 94       	inc	r10
  // True the minute after all sensors should have been sampled.
  const bool minute1From4AfterSensors = (1 == minuteFrom4);
    177a:	77 24       	eor	r7, r7
    177c:	81 30       	cpi	r24, 0x01	; 1
    177e:	11 f4       	brne	.+4      	; 0x1784 <loopOpenTRV()+0x52>
    1780:	77 24       	eor	r7, r7
    1782:	73 94       	inc	r7
    // Get internal bandgap (1.1V nominal, 1.0--1.2V) as fraction of Vcc.
    uint16_t getRawInv() const { return(rawInv); }

    // Returns true if the supply voltage is low/marginal.
    // This depends on the AVR and other hardware components (eg sensors) in use.
    bool isSupplyVoltageLow() const { return(isLow); }
    1784:	90 90 18 03 	lds	r9, 0x0318
    (batteryLow || !inWarmMode()) && // Don't spare the batteries unless low, or in FROST mode (which should be most of the time).
#if defined(ENABLE_BOILER_HUB)
    (0 == boilerCountdownTicks) && // Unless the boiler is off, stay responsive.
#endif
    (!NominalRadValve.isControlledValveReallyOpen()) &&  // Run at full speed until valve(s) should actually have shut and the boiler gone off.
    (!NominalRadValve.isCallingForHeat()); // Run at full speed until not nominally demanding heat, eg even during FROST mode or pre-heating.
    1788:	99 20       	and	r9, r9
    178a:	21 f4       	brne	.+8      	; 0x1794 <loopOpenTRV()+0x62>
    178c:	80 91 4a 02 	lds	r24, 0x024A
    1790:	88 23       	and	r24, r24
    1792:	99 f4       	brne	.+38     	; 0x17ba <loopOpenTRV()+0x88>
    1794:	80 91 07 02 	lds	r24, 0x0207
    1798:	90 91 08 02 	lds	r25, 0x0208
    179c:	89 2b       	or	r24, r25
    179e:	69 f4       	brne	.+26     	; 0x17ba <loopOpenTRV()+0x88>
    17a0:	8e ef       	ldi	r24, 0xFE	; 254
    17a2:	91 e0       	ldi	r25, 0x01	; 1
    17a4:	0e 94 76 0b 	call	0x16ec	; 0x16ec <ModelledRadValve::isControlledValveReallyOpen() const>
    17a8:	88 23       	and	r24, r24
    17aa:	39 f4       	brne	.+14     	; 0x17ba <loopOpenTRV()+0x88>
    // Can be used to trigger rebuild of messages, force updates to actuators, etc.
    bool isValveMoved() const { return(valveMoved); }

    // True if this unit is nominally calling for heat (temperature is under target).
    // Thread-safe and ISR safe.
    bool isCallingForHeat() const { return(callingForHeat); }
    17ac:	80 91 02 02 	lds	r24, 0x0202
    17b0:	88 23       	and	r24, r24
    17b2:	19 f4       	brne	.+6      	; 0x17ba <loopOpenTRV()+0x88>
    17b4:	88 24       	eor	r8, r8
    17b6:	83 94       	inc	r8
    17b8:	01 c0       	rjmp	.+2      	; 0x17bc <loopOpenTRV()+0x8a>
    17ba:	88 24       	eor	r8, r8
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    17bc:	f9 99       	sbic	0x1f, 1	; 31
    17be:	fe cf       	rjmp	.-4      	; 0x17bc <loopOpenTRV()+0x8a>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    17c0:	82 e1       	ldi	r24, 0x12	; 18
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	92 bd       	out	0x22, r25	; 34
    17c6:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    17c8:	f8 9a       	sbi	0x1f, 0	; 31
    17ca:	c0 b4       	in	r12, 0x20	; 32
  // Conversely, if not true, should have time to savely log outputs, etc.
  const uint8_t nearOverrunThreshold = GSCT_MAX - 8; // ~64ms/~32 serial TX chars of grace time...
  bool tooNearOverrun = false; // Set flag that can be checked later.

  // Is this unit currently in central hub listener mode?
  const bool hubMode = inHubMode();
    17cc:	c0 94       	com	r12
    17ce:	11 f0       	breq	.+4      	; 0x17d4 <loopOpenTRV()+0xa2>
    17d0:	cc 24       	eor	r12, r12
    17d2:	c3 94       	inc	r12
  // The output is terse to avoid taking too long and possibly delaying other stuff too far.
  // Avoid doing this at all if too near the end of the cycle and risking overrun,
  // leaving any message queued, hoping it does not get overwritten.
  // TODO: safely process more than one pending message if present.
  // TODO: move to process in a batch periodically, eg when CLI is due.
  if(getSubCycleTime() >= nearOverrunThreshold) { tooNearOverrun = true; }
    17d4:	80 91 b2 00 	lds	r24, 0x00B2
    17d8:	87 3f       	cpi	r24, 0xF7	; 247
    17da:	18 f0       	brcs	.+6      	; 0x17e2 <loopOpenTRV()+0xb0>
    17dc:	ee 24       	eor	r14, r14
    17de:	e3 94       	inc	r14
    17e0:	6d c0       	rjmp	.+218    	; 0x18bc <loopOpenTRV()+0x18a>
  else
    {
    // Look for binary-format message.
    FullStatsMessageCore_t stats;
    getLastCoreStats(&stats);
    17e2:	ce 01       	movw	r24, r28
    17e4:	01 96       	adiw	r24, 0x01	; 1
    17e6:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <getLastCoreStats(FullStatsMessageCore*)>
    if(stats.containsID)
    17ea:	89 81       	ldd	r24, Y+1	; 0x01
    17ec:	80 ff       	sbrs	r24, 0
    17ee:	57 c0       	rjmp	.+174    	; 0x189e <loopOpenTRV()+0x16c>
      {
      // Dump (remote) stats field '@<hexnodeID>;TnnCh[P;]'
      // where the T field shows temperature in C with a hex digit after the binary point indicated by C
      // and the optional P field indicates low power.
      serialPrintAndFlush(LINE_START_CHAR_RSTATS);
    17f0:	80 e4       	ldi	r24, 0x40	; 64
    17f2:	0e 94 b9 25 	call	0x4b72	; 0x4b72 <serialPrintAndFlush(char)>
      serialPrintAndFlush((((uint16_t)stats.id0) << 8) | stats.id1, HEX);
    17f6:	9a 81       	ldd	r25, Y+2	; 0x02
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	2b 81       	ldd	r18, Y+3	; 0x03
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	82 2b       	or	r24, r18
    1800:	93 2b       	or	r25, r19
    1802:	60 e1       	ldi	r22, 0x10	; 16
    1804:	70 e0       	ldi	r23, 0x00	; 0
    1806:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <serialPrintAndFlush(unsigned int, int)>
      if(stats.containsTempAndPower)
    180a:	89 81       	ldd	r24, Y+1	; 0x01
    180c:	81 ff       	sbrs	r24, 1
    180e:	2b c0       	rjmp	.+86     	; 0x1866 <loopOpenTRV()+0x134>
        {
        serialPrintAndFlush(F(";T"));
    1810:	84 e0       	ldi	r24, 0x04	; 4
    1812:	91 e0       	ldi	r25, 0x01	; 1
    1814:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush(stats.tempAndPower.tempC16 >> 4, DEC);
    1818:	8c 81       	ldd	r24, Y+4	; 0x04
    181a:	2d 81       	ldd	r18, Y+5	; 0x05
    181c:	92 2f       	mov	r25, r18
    181e:	9f 77       	andi	r25, 0x7F	; 127
    1820:	88 0f       	add	r24, r24
    1822:	99 1f       	adc	r25, r25
    1824:	b5 e0       	ldi	r27, 0x05	; 5
    1826:	95 95       	asr	r25
    1828:	87 95       	ror	r24
    182a:	ba 95       	dec	r27
    182c:	e1 f7       	brne	.-8      	; 0x1826 <loopOpenTRV()+0xf4>
    182e:	6a e0       	ldi	r22, 0x0A	; 10
    1830:	70 e0       	ldi	r23, 0x00	; 0
    1832:	0e 94 dd 25 	call	0x4bba	; 0x4bba <serialPrintAndFlush(int, int)>
        serialPrintAndFlush('C');
    1836:	83 e4       	ldi	r24, 0x43	; 67
    1838:	0e 94 b9 25 	call	0x4b72	; 0x4b72 <serialPrintAndFlush(char)>
        serialPrintAndFlush(stats.tempAndPower.tempC16 & 0xf, HEX);
    183c:	8c 81       	ldd	r24, Y+4	; 0x04
    183e:	2d 81       	ldd	r18, Y+5	; 0x05
    1840:	92 2f       	mov	r25, r18
    1842:	9f 77       	andi	r25, 0x7F	; 127
    1844:	88 0f       	add	r24, r24
    1846:	99 1f       	adc	r25, r25
    1848:	95 95       	asr	r25
    184a:	87 95       	ror	r24
    184c:	8f 70       	andi	r24, 0x0F	; 15
    184e:	90 70       	andi	r25, 0x00	; 0
    1850:	60 e1       	ldi	r22, 0x10	; 16
    1852:	70 e0       	ldi	r23, 0x00	; 0
    1854:	0e 94 dd 25 	call	0x4bba	; 0x4bba <serialPrintAndFlush(int, int)>
        if(stats.tempAndPower.powerLow) { serialPrintAndFlush(F(";P")); } // Insert power-low field if needed.
    1858:	8d 81       	ldd	r24, Y+5	; 0x05
    185a:	87 ff       	sbrs	r24, 7
    185c:	04 c0       	rjmp	.+8      	; 0x1866 <loopOpenTRV()+0x134>
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	91 e0       	ldi	r25, 0x01	; 1
    1862:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <serialPrintAndFlush(__FlashStringHelper const*)>
        }
      if(stats.containsAmbL)
    1866:	89 81       	ldd	r24, Y+1	; 0x01
    1868:	82 ff       	sbrs	r24, 2
    186a:	0a c0       	rjmp	.+20     	; 0x1880 <loopOpenTRV()+0x14e>
        {
        serialPrintAndFlush(F(";L"));
    186c:	8e ef       	ldi	r24, 0xFE	; 254
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush(stats.ambL);
    1874:	8e 81       	ldd	r24, Y+6	; 0x06
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	6a e0       	ldi	r22, 0x0A	; 10
    187a:	70 e0       	ldi	r23, 0x00	; 0
    187c:	0e 94 dd 25 	call	0x4bba	; 0x4bba <serialPrintAndFlush(int, int)>
        }
      if(0 != stats.occ)
    1880:	8f 81       	ldd	r24, Y+7	; 0x07
    1882:	83 70       	andi	r24, 0x03	; 3
    1884:	c1 f0       	breq	.+48     	; 0x18b6 <loopOpenTRV()+0x184>
        {
        serialPrintAndFlush(F(";O"));
    1886:	8b ef       	ldi	r24, 0xFB	; 251
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush(stats.occ);
    188e:	8f 81       	ldd	r24, Y+7	; 0x07
    1890:	83 70       	andi	r24, 0x03	; 3
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	6a e0       	ldi	r22, 0x0A	; 10
    1896:	70 e0       	ldi	r23, 0x00	; 0
    1898:	0e 94 dd 25 	call	0x4bba	; 0x4bba <serialPrintAndFlush(int, int)>
    189c:	0c c0       	rjmp	.+24     	; 0x18b6 <loopOpenTRV()+0x184>
      }
    // Check for JSON/text-format message if no binary message waiting.
    else
      {
      char buf[MSG_JSON_MAX_LENGTH+1];
      getLastJSONStats(buf);
    189e:	8e 01       	movw	r16, r28
    18a0:	08 5f       	subi	r16, 0xF8	; 248
    18a2:	1f 4f       	sbci	r17, 0xFF	; 255
    18a4:	c8 01       	movw	r24, r16
    18a6:	0e 94 d8 1b 	call	0x37b0	; 0x37b0 <getLastJSONStats(char*)>
      if('\0' != *buf)
    18aa:	88 85       	ldd	r24, Y+8	; 0x08
    18ac:	88 23       	and	r24, r24
    18ae:	29 f0       	breq	.+10     	; 0x18ba <loopOpenTRV()+0x188>
        {
        // Dump contained JSON message as-is at start of line.
        serialPrintAndFlush(buf);
    18b0:	c8 01       	movw	r24, r16
    18b2:	0e 94 f9 25 	call	0x4bf2	; 0x4bf2 <serialPrintAndFlush(char const*)>
        serialPrintlnAndFlush();
    18b6:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <serialPrintlnAndFlush()>
    18ba:	ee 24       	eor	r14, r14
  // and could be disabled if no local valve is being run to provide better response to remote nodes.
  bool hubModeBoilerOn = false; // If true then remote call for heat is in progress.
#if defined(USE_MODULE_FHT8VSIMPLE)
  bool needsToEavesdrop = false; // By default assume no need to eavesdrop.
#endif
  if(hubMode)
    18bc:	cc 20       	and	r12, r12
    18be:	11 f4       	brne	.+4      	; 0x18c4 <loopOpenTRV()+0x192>
    18c0:	ff 24       	eor	r15, r15
    18c2:	a4 c0       	rjmp	.+328    	; 0x1a0c <loopOpenTRV()+0x2da>
    {
#if defined(USE_MODULE_FHT8VSIMPLE)
    // Final poll to to cover up to end of previous minor loop.
    // Keep time from here to following SetupToEavesdropOnFHT8V() as short as possible to avoid missing remote calls.
    FHT8VCallForHeatPoll();
    18c4:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <FHT8VCallForHeatPoll()>

    // Fetch and clear current pending sample house code calling for heat.
    const uint16_t hcRequest = FHT8VCallForHeatHeardGetAndClear();
    18c8:	0e 94 78 10 	call	0x20f0	; 0x20f0 <FHT8VCallForHeatHeardGetAndClear()>
    18cc:	8c 01       	movw	r16, r24
    const bool heardIt = (hcRequest != ((uint16_t)~0));
    18ce:	dd 24       	eor	r13, r13
    18d0:	8f ef       	ldi	r24, 0xFF	; 255
    18d2:	0f 3f       	cpi	r16, 0xFF	; 255
    18d4:	18 07       	cpc	r17, r24
    18d6:	11 f0       	breq	.+4      	; 0x18dc <loopOpenTRV()+0x1aa>
    18d8:	dd 24       	eor	r13, r13
    18da:	d3 94       	inc	r13
    // Don't log call for hear if near overrun,
    // and leave any error queued for next time.
    if(getSubCycleTime() >= nearOverrunThreshold) { tooNearOverrun = true; }
    18dc:	80 91 b2 00 	lds	r24, 0x00B2
    18e0:	87 3f       	cpi	r24, 0xF7	; 247
    18e2:	78 f5       	brcc	.+94     	; 0x1942 <loopOpenTRV()+0x210>
    else
      {
      if(heardIt)
    18e4:	dd 20       	and	r13, r13
    18e6:	d9 f0       	breq	.+54     	; 0x191e <loopOpenTRV()+0x1ec>
        {
        DEBUG_SERIAL_TIMESTAMP();
    18e8:	0e 94 68 25 	call	0x4ad0	; 0x4ad0 <_debug_serial_timestamp()>
        DEBUG_SERIAL_PRINT(' ');
    18ec:	80 e2       	ldi	r24, 0x20	; 32
    18ee:	0e 94 b9 25 	call	0x4b72	; 0x4b72 <serialPrintAndFlush(char)>
        serialPrintAndFlush(F("CfH ")); // Call for heat from 
    18f2:	86 ef       	ldi	r24, 0xF6	; 246
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush((hcRequest >> 8) & 0xff);
    18fa:	81 2f       	mov	r24, r17
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	6a e0       	ldi	r22, 0x0A	; 10
    1900:	70 e0       	ldi	r23, 0x00	; 0
    1902:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <serialPrintAndFlush(unsigned int, int)>
        serialPrintAndFlush(' ');
    1906:	80 e2       	ldi	r24, 0x20	; 32
    1908:	0e 94 b9 25 	call	0x4b72	; 0x4b72 <serialPrintAndFlush(char)>
        serialPrintAndFlush(hcRequest & 0xff);
    190c:	c8 01       	movw	r24, r16
    190e:	90 70       	andi	r25, 0x00	; 0
    1910:	6a e0       	ldi	r22, 0x0A	; 10
    1912:	70 e0       	ldi	r23, 0x00	; 0
    1914:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <serialPrintAndFlush(unsigned int, int)>
        serialPrintlnAndFlush();
    1918:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <serialPrintlnAndFlush()>
    191c:	16 c0       	rjmp	.+44     	; 0x194a <loopOpenTRV()+0x218>
        }
      else
        {
        // Check for error if nothing received.
        const uint8_t err = FHT8VLastRXErrGetAndClear();
    191e:	0e 94 87 10 	call	0x210e	; 0x210e <FHT8VLastRXErrGetAndClear()>
    1922:	18 2f       	mov	r17, r24
        if(0 != err)
    1924:	88 23       	and	r24, r24
    1926:	b1 f1       	breq	.+108    	; 0x1994 <loopOpenTRV()+0x262>
          {
          serialPrintAndFlush(F("!RXerr F"));
    1928:	8d ee       	ldi	r24, 0xED	; 237
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <serialPrintAndFlush(__FlashStringHelper const*)>
          serialPrintAndFlush(err);
    1930:	81 2f       	mov	r24, r17
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	6a e0       	ldi	r22, 0x0A	; 10
    1936:	70 e0       	ldi	r23, 0x00	; 0
    1938:	0e 94 dd 25 	call	0x4bba	; 0x4bba <serialPrintAndFlush(int, int)>
          serialPrintlnAndFlush();
    193c:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <serialPrintlnAndFlush()>
    1940:	29 c0       	rjmp	.+82     	; 0x1994 <loopOpenTRV()+0x262>
    1942:	ee 24       	eor	r14, r14
    1944:	e3 94       	inc	r14
        }
      }

    // Record call for heat, both to start boiler-on cycle and to defer need to listen again. 
    // Optimisation: may be able to stop RX if boiler is on for local demand (can measure local temp better: less self-heating).
    if(heardIt)
    1946:	dd 20       	and	r13, r13
    1948:	29 f1       	breq	.+74     	; 0x1994 <loopOpenTRV()+0x262>
      {
      if(0 == boilerCountdownTicks)
    194a:	80 91 07 02 	lds	r24, 0x0207
    194e:	90 91 08 02 	lds	r25, 0x0208
    1952:	89 2b       	or	r24, r25
    1954:	59 f4       	brne	.+22     	; 0x196c <loopOpenTRV()+0x23a>
        {
        if(getSubCycleTime() >= nearOverrunThreshold) { tooNearOverrun = true; }
    1956:	80 91 b2 00 	lds	r24, 0x00B2
    195a:	87 3f       	cpi	r24, 0xF7	; 247
    195c:	18 f0       	brcs	.+6      	; 0x1964 <loopOpenTRV()+0x232>
    195e:	ee 24       	eor	r14, r14
    1960:	e3 94       	inc	r14
    1962:	04 c0       	rjmp	.+8      	; 0x196c <loopOpenTRV()+0x23a>
        else { serialPrintlnAndFlush(F("RCfH1")); } // Remote call for heat on.
    1964:	87 ee       	ldi	r24, 0xE7	; 231
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <serialPrintlnAndFlush(__FlashStringHelper const*)>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    196c:	f9 99       	sbic	0x1f, 1	; 31
    196e:	fe cf       	rjmp	.-4      	; 0x196c <loopOpenTRV()+0x23a>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1970:	82 e1       	ldi	r24, 0x12	; 18
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	92 bd       	out	0x22, r25	; 34
    1976:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1978:	f8 9a       	sbi	0x1f, 0	; 31
    197a:	80 b5       	in	r24, 0x20	; 32
        }
      boilerCountdownTicks = getMinBoilerOnMinutes() * (60/MAIN_TICK_S);
    197c:	80 95       	com	r24
    197e:	2e e1       	ldi	r18, 0x1E	; 30
    1980:	82 9f       	mul	r24, r18
    1982:	c0 01       	movw	r24, r0
    1984:	11 24       	eor	r1, r1
    1986:	90 93 08 02 	sts	0x0208, r25
    198a:	80 93 07 02 	sts	0x0207, r24
      boilerNoCallM = 0; // No time has passed since the last call.
    198e:	10 92 09 02 	sts	0x0209, r1
    1992:	22 c0       	rjmp	.+68     	; 0x19d8 <loopOpenTRV()+0x2a6>
      }
    // Else count down towards boiler off.
    else if(boilerCountdownTicks > 0)
    1994:	80 91 07 02 	lds	r24, 0x0207
    1998:	90 91 08 02 	lds	r25, 0x0208
    199c:	00 97       	sbiw	r24, 0x00	; 0
    199e:	99 f0       	breq	.+38     	; 0x19c6 <loopOpenTRV()+0x294>
      {
      if(0 == --boilerCountdownTicks)
    19a0:	01 97       	sbiw	r24, 0x01	; 1
    19a2:	90 93 08 02 	sts	0x0208, r25
    19a6:	80 93 07 02 	sts	0x0207, r24
    19aa:	89 2b       	or	r24, r25
    19ac:	a9 f4       	brne	.+42     	; 0x19d8 <loopOpenTRV()+0x2a6>
        {
        if(getSubCycleTime() >= nearOverrunThreshold) { tooNearOverrun = true; }
    19ae:	80 91 b2 00 	lds	r24, 0x00B2
    19b2:	87 3f       	cpi	r24, 0xF7	; 247
    19b4:	18 f0       	brcs	.+6      	; 0x19bc <loopOpenTRV()+0x28a>
    19b6:	ee 24       	eor	r14, r14
    19b8:	e3 94       	inc	r14
    19ba:	0e c0       	rjmp	.+28     	; 0x19d8 <loopOpenTRV()+0x2a6>
        else { serialPrintlnAndFlush(F("RCfH0")); } // Remote call for heat off
    19bc:	81 ee       	ldi	r24, 0xE1	; 225
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <serialPrintlnAndFlush(__FlashStringHelper const*)>
    19c4:	09 c0       	rjmp	.+18     	; 0x19d8 <loopOpenTRV()+0x2a6>
        }
      }
    // Else already off so count up quiet minutes...
    else if(second0 && (boilerNoCallM < (uint8_t)~0)) { ++boilerNoCallM; }         
    19c6:	bb 20       	and	r11, r11
    19c8:	39 f0       	breq	.+14     	; 0x19d8 <loopOpenTRV()+0x2a6>
    19ca:	80 91 09 02 	lds	r24, 0x0209
    19ce:	8f 3f       	cpi	r24, 0xFF	; 255
    19d0:	19 f0       	breq	.+6      	; 0x19d8 <loopOpenTRV()+0x2a6>
    19d2:	8f 5f       	subi	r24, 0xFF	; 255
    19d4:	80 93 09 02 	sts	0x0209, r24

    // Turn boiler output on or off in response to calls for heat.
    hubModeBoilerOn = (boilerCountdownTicks > 0);
    19d8:	ff 24       	eor	r15, r15
    19da:	80 91 07 02 	lds	r24, 0x0207
    19de:	90 91 08 02 	lds	r25, 0x0208
    19e2:	89 2b       	or	r24, r25
    19e4:	11 f0       	breq	.+4      	; 0x19ea <loopOpenTRV()+0x2b8>
    19e6:	ff 24       	eor	r15, r15
    19e8:	f3 94       	inc	r15

    // If not running a local TRV, and thus without local temperature measurement problems from self-heating,
    // then just listen all the time for maximum simplicity and responsiveness at some cost in extra power consumption.
    // (At least as long as power is not running low for some reason.)
    if(!localFHT8VTRVEnabled() && !batteryLow)
    19ea:	0e 94 49 10 	call	0x2092	; 0x2092 <localFHT8VTRVEnabled()>
    19ee:	88 23       	and	r24, r24
    19f0:	09 f0       	breq	.+2      	; 0x19f4 <loopOpenTRV()+0x2c2>
    19f2:	f9 c1       	rjmp	.+1010   	; 0x1de6 <loopOpenTRV()+0x6b4>
    19f4:	99 20       	and	r9, r9
    19f6:	09 f0       	breq	.+2      	; 0x19fa <loopOpenTRV()+0x2c8>
    19f8:	f6 c1       	rjmp	.+1004   	; 0x1de6 <loopOpenTRV()+0x6b4>
    19fa:	fe c1       	rjmp	.+1020   	; 0x1df8 <loopOpenTRV()+0x6c6>
    // Aim to listen in one stretch for greater than full FHT8V TX cycle of ~2m to avoid missing a call for heat.
    // MUST listen for all of final 2 mins of boiler-on to avoid missing TX (without forcing boiler over-run).
    else if((boilerCountdownTicks <= ((MAX_FHT8V_TX_CYCLE_HS+1)/(2*MAIN_TICK_S))) && // Don't miss a final TX that would keep the boiler on...
       (boilerCountdownTicks != 0)) // But don't force unit to listen/RX all the time if no recent call for heat.
      { needsToEavesdrop = true; }
    else if((!heardIt) &&
    19fc:	dd 20       	and	r13, r13
    19fe:	31 f4       	brne	.+12     	; 0x1a0c <loopOpenTRV()+0x2da>
    1a00:	aa 20       	and	r10, r10
    1a02:	21 f4       	brne	.+8      	; 0x1a0c <loopOpenTRV()+0x2da>
    1a04:	29 55       	subi	r18, 0x59	; 89
    1a06:	32 40       	sbci	r19, 0x02	; 2
    1a08:	08 f4       	brcc	.+2      	; 0x1a0c <loopOpenTRV()+0x2da>
    1a0a:	f6 c1       	rjmp	.+1004   	; 0x1df8 <loopOpenTRV()+0x6c6>
#endif
    }
  else
    {
    // Power down and clear radio state (if currently eavesdropping).
    StopEavesdropOnFHT8V(second0);
    1a0c:	8b 2d       	mov	r24, r11
    1a0e:	0e 94 8f 10 	call	0x211e	; 0x211e <StopEavesdropOnFHT8V(bool)>
    // Clear any RX state so that nothing stale is carried forward.
    FHT8VCallForHeatHeardGetAndClear();
    1a12:	0e 94 78 10 	call	0x20f0	; 0x20f0 <FHT8VCallForHeatHeardGetAndClear()>
    1a16:	10 e0       	ldi	r17, 0x00	; 0
    1a18:	10 c0       	rjmp	.+32     	; 0x1a3a <loopOpenTRV()+0x308>
#if 1 && defined(DEBUG)
    const uint16_t dropped = getInboundStatsQueueOverrun();
    static uint16_t oldDropped;
    if(dropped != oldDropped)
      {
      DEBUG_SERIAL_PRINT_FLASHSTRING("?DROPPED stats: ");
    1a1a:	80 ed       	ldi	r24, 0xD0	; 208
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <serialPrintAndFlush(__FlashStringHelper const*)>
      DEBUG_SERIAL_PRINT(dropped);
    1a22:	c8 01       	movw	r24, r16
    1a24:	6a e0       	ldi	r22, 0x0A	; 10
    1a26:	70 e0       	ldi	r23, 0x00	; 0
    1a28:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <serialPrintAndFlush(unsigned int, int)>
      DEBUG_SERIAL_PRINTLN();
    1a2c:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <serialPrintlnAndFlush()>
      oldDropped = dropped;
    1a30:	10 93 0c 02 	sts	0x020C, r17
    1a34:	00 93 0b 02 	sts	0x020B, r16
    1a38:	11 e0       	ldi	r17, 0x01	; 1


  // Set BOILER_OUT as appropriate for local and/or remote calls for heat.
  // FIXME: local valve-driven boiler on does not obey normal on/off run-time rules.
#if defined(ENABLE_BOILER_HUB)
  fastDigitalWrite(OUT_HEATCALL, ((hubModeBoilerOn || NominalRadValve.isControlledValveReallyOpen()) ? HIGH : LOW));
    1a3a:	ff 20       	and	r15, r15
    1a3c:	41 f4       	brne	.+16     	; 0x1a4e <loopOpenTRV()+0x31c>
    1a3e:	8e ef       	ldi	r24, 0xFE	; 254
    1a40:	91 e0       	ldi	r25, 0x01	; 1
    1a42:	0e 94 76 0b 	call	0x16ec	; 0x16ec <ModelledRadValve::isControlledValveReallyOpen() const>
    1a46:	88 23       	and	r24, r24
    1a48:	11 f4       	brne	.+4      	; 0x1a4e <loopOpenTRV()+0x31c>
    1a4a:	60 e0       	ldi	r22, 0x00	; 0
    1a4c:	01 c0       	rjmp	.+2      	; 0x1a50 <loopOpenTRV()+0x31e>
    1a4e:	61 e0       	ldi	r22, 0x01	; 1
    1a50:	86 e0       	ldi	r24, 0x06	; 6
    1a52:	0e 94 ba 38 	call	0x7174	; 0x7174 <digitalWrite>
  // DHD20130425: waking up from sleep and getting to start processing below this block may take >10ms.
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("*E"); // End-of-cycle sleep.
#endif
  // Ensure that serial I/O is off.
  powerDownSerial();
    1a56:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <powerDownSerial()>
  // Power down most stuff (except radio for hub RX).
  minimisePowerWithoutSleep();
    1a5a:	0e 94 66 1f 	call	0x3ecc	; 0x3ecc <minimisePowerWithoutSleep()>
    1a5e:	11 c0       	rjmp	.+34     	; 0x1a82 <loopOpenTRV()+0x350>
  uint_fast8_t newTLSD;
  while(TIME_LSD == (newTLSD = getSecondsLT()))
    {
#if defined(ENABLE_BOILER_HUB) && defined(USE_MODULE_FHT8VSIMPLE) // Deal with FHT8V eavesdropping if needed.
    // Poll for RX of remote calls-for-heat if needed.
    if(needsToEavesdrop) { nap30AndPoll(); continue; }
    1a60:	11 23       	and	r17, r17
    1a62:	39 f0       	breq	.+14     	; 0x1a72 <loopOpenTRV()+0x340>
//   * force if true then force full poll on every call (ie do not internally rate-limit)
// NOTE: implementation may not be in power-management module.
bool pollIO(bool force = false);
// Nap productively polling I/O, etc, across the system while spending time in low-power mode if possible.
// Typically sleeps for about 30ms; tries to allow ealier wakeup if interrupt is received, etc.
static void inline nap30AndPoll() { nap(WDTO_30MS); pollIO(true); }
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	0e 94 ab 1c 	call	0x3956	; 0x3956 <nap(signed char)>
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	0e 94 58 06 	call	0xcb0	; 0xcb0 <pollIO(bool)>
    1a70:	08 c0       	rjmp	.+16     	; 0x1a82 <loopOpenTRV()+0x350>
#endif
#if defined(USE_MODULE_RFM22RADIOSIMPLE) // Force radio to power-saving standby state if appropriate.
    // Force radio to known-low-power state from time to time (not every time to avoid unnecessary SPI work, LED flicker, etc.)
    if(batteryLow || second0) { RFM22ModeStandbyAndClearState(); }
    1a72:	99 20       	and	r9, r9
    1a74:	11 f4       	brne	.+4      	; 0x1a7a <loopOpenTRV()+0x348>
    1a76:	bb 20       	and	r11, r11
    1a78:	11 f0       	breq	.+4      	; 0x1a7e <loopOpenTRV()+0x34c>
    1a7a:	0e 94 52 22 	call	0x44a4	; 0x44a4 <RFM22ModeStandbyAndClearState()>
#endif
    sleepUntilInt(); // Normal long minimal-power sleep until wake-up interrupt.
    1a7e:	0e 94 97 1c 	call	0x392e	; 0x392e <sleepPwrSaveWithBODDisabled()>
  // Ensure that serial I/O is off.
  powerDownSerial();
  // Power down most stuff (except radio for hub RX).
  minimisePowerWithoutSleep();
  uint_fast8_t newTLSD;
  while(TIME_LSD == (newTLSD = getSecondsLT()))
    1a82:	90 91 20 03 	lds	r25, 0x0320
    1a86:	80 91 05 02 	lds	r24, 0x0205
    1a8a:	89 17       	cp	r24, r25
    1a8c:	49 f3       	breq	.-46     	; 0x1a60 <loopOpenTRV()+0x32e>
    // Force radio to known-low-power state from time to time (not every time to avoid unnecessary SPI work, LED flicker, etc.)
    if(batteryLow || second0) { RFM22ModeStandbyAndClearState(); }
#endif
    sleepUntilInt(); // Normal long minimal-power sleep until wake-up interrupt.
    }
  TIME_LSD = newTLSD;
    1a8e:	90 93 05 02 	sts	0x0205, r25
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("*S"); // Start-of-cycle wake.
#endif

#if defined(ENABLE_BOILER_HUB) && defined(USE_MODULE_FHT8VSIMPLE) // Deal with FHT8V eavesdropping if needed.
  // Check RSSI...
  if(needsToEavesdrop)
    1a92:	11 23       	and	r17, r17
    1a94:	79 f0       	breq	.+30     	; 0x1ab4 <loopOpenTRV()+0x382>
    {
    const uint8_t rssi = RFM22RSSI();
    1a96:	0e 94 15 22 	call	0x442a	; 0x442a <RFM22RSSI()>
    1a9a:	98 2f       	mov	r25, r24
    static uint8_t lastRSSI;
    if((rssi > 0) && (lastRSSI != rssi))
    1a9c:	88 23       	and	r24, r24
    1a9e:	51 f0       	breq	.+20     	; 0x1ab4 <loopOpenTRV()+0x382>
    1aa0:	80 91 0a 02 	lds	r24, 0x020A
    1aa4:	89 17       	cp	r24, r25
    1aa6:	31 f0       	breq	.+12     	; 0x1ab4 <loopOpenTRV()+0x382>
      {
      lastRSSI = rssi;
    1aa8:	90 93 0a 02 	sts	0x020A, r25
      addEntropyToPool(rssi, 0); // Probably some real entropy but don't assume it.
    1aac:	89 2f       	mov	r24, r25
    1aae:	60 e0       	ldi	r22, 0x00	; 0
    1ab0:	0e 94 29 25 	call	0x4a52	; 0x4a52 <addEntropyToPool(unsigned char, unsigned char)>
  // START LOOP BODY
  // ===============


  // Warn if too near overrun before.
  if(tooNearOverrun) { serialPrintlnAndFlush(F("?near overrun")); }
    1ab4:	ee 20       	and	r14, r14
    1ab6:	21 f0       	breq	.+8      	; 0x1ac0 <loopOpenTRV()+0x38e>
    1ab8:	82 ec       	ldi	r24, 0xC2	; 194
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <serialPrintlnAndFlush(__FlashStringHelper const*)>
  // Try for double TX for more robust conversation with valve unless:
  //   * battery is low
  //   * the valve is not required to be wide open (ie a reasonable temperature is currently being maintained).
  //   * this is a hub and has to listen as much as possible
  // to conserve battery and bandwidth.
  const bool doubleTXForFTH8V = !conserveBattery && !hubMode && (NominalRadValve.get() >= 75);
    1ac0:	88 20       	and	r8, r8
    1ac2:	51 f4       	brne	.+20     	; 0x1ad8 <loopOpenTRV()+0x3a6>
    1ac4:	cc 20       	and	r12, r12
    1ac6:	41 f4       	brne	.+16     	; 0x1ad8 <loopOpenTRV()+0x3a6>
  public:
    // Return last value fetched by read(); undefined before first read().
    // Usually fast.
    // Often likely to be thread-safe or usable within ISRs (Interrupt Service Routines),
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual uint8_t get() const { return(value); }
    1ac8:	80 91 00 02 	lds	r24, 0x0200
    1acc:	ff 24       	eor	r15, r15
    1ace:	8b 34       	cpi	r24, 0x4B	; 75
    1ad0:	20 f0       	brcs	.+8      	; 0x1ada <loopOpenTRV()+0x3a8>
    1ad2:	ff 24       	eor	r15, r15
    1ad4:	f3 94       	inc	r15
    1ad6:	01 c0       	rjmp	.+2      	; 0x1ada <loopOpenTRV()+0x3a8>
    1ad8:	ff 24       	eor	r15, r15
  // FHT8V is highest priority and runs first.
  // ---------- HALF SECOND #0 -----------
  bool useExtraFHT8VTXSlots = localFHT8VTRVEnabled() && FHT8VPollSyncAndTX_First(doubleTXForFTH8V); // Time for extra TX before UI.
    1ada:	0e 94 49 10 	call	0x2092	; 0x2092 <localFHT8VTRVEnabled()>
    1ade:	88 23       	and	r24, r24
    1ae0:	39 f0       	breq	.+14     	; 0x1af0 <loopOpenTRV()+0x3be>
    1ae2:	8f 2d       	mov	r24, r15
    1ae4:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <FHT8VPollSyncAndTX_First(bool)>
    1ae8:	88 23       	and	r24, r24
    1aea:	11 f0       	breq	.+4      	; 0x1af0 <loopOpenTRV()+0x3be>
    1aec:	01 e0       	ldi	r16, 0x01	; 1
    1aee:	01 c0       	rjmp	.+2      	; 0x1af2 <loopOpenTRV()+0x3c0>
    1af0:	00 e0       	ldi	r16, 0x00	; 0
  bool recompute = false; // Set true an extra recompute of target temperature should be done.
#if !defined(TWO_S_TICK_RTC_SUPPORT)
  if(0 == (TIME_LSD & 1))
#endif
    {
    if(tickUI(TIME_LSD))
    1af2:	80 91 05 02 	lds	r24, 0x0205
    1af6:	0e 94 e2 2c 	call	0x59c4	; 0x59c4 <tickUI(unsigned char)>
    1afa:	88 23       	and	r24, r24
    1afc:	19 f0       	breq	.+6      	; 0x1b04 <loopOpenTRV()+0x3d2>
    1afe:	ee 24       	eor	r14, r14
    1b00:	e3 94       	inc	r14
    1b02:	07 c0       	rjmp	.+14     	; 0x1b12 <loopOpenTRV()+0x3e0>
      showStatus = true;
      recompute = true;
      }
    }

  if(recompute || recentUIControlUse())
    1b04:	0e 94 44 26 	call	0x4c88	; 0x4c88 <recentUIControlUse()>
    1b08:	88 23       	and	r24, r24
    1b0a:	11 f4       	brne	.+4      	; 0x1b10 <loopOpenTRV()+0x3de>
    1b0c:	ee 24       	eor	r14, r14
    1b0e:	05 c0       	rjmp	.+10     	; 0x1b1a <loopOpenTRV()+0x3e8>
    1b10:	ee 24       	eor	r14, r14
    {
    NominalRadValve.computeTargetTemperature(); // Force immrecompute of temperature for (UI) responsiveness.
    1b12:	8e ef       	ldi	r24, 0xFE	; 254
    1b14:	91 e0       	ldi	r25, 0x01	; 1
    1b16:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <ModelledRadValve::computeTargetTemperature()>
    }


#if defined(USE_MODULE_FHT8VSIMPLE)
  if(useExtraFHT8VTXSlots)
    1b1a:	00 23       	and	r16, r16
    1b1c:	51 f0       	breq	.+20     	; 0x1b32 <loopOpenTRV()+0x400>
    {
    // Time for extra TX before other actions, but don't bother if minimising power in frost mode.
    // ---------- HALF SECOND #1 -----------
    useExtraFHT8VTXSlots = localFHT8VTRVEnabled() && FHT8VPollSyncAndTX_Next(doubleTXForFTH8V); 
    1b1e:	0e 94 49 10 	call	0x2092	; 0x2092 <localFHT8VTRVEnabled()>
    1b22:	88 23       	and	r24, r24
    1b24:	29 f0       	breq	.+10     	; 0x1b30 <loopOpenTRV()+0x3fe>
    1b26:	8f 2d       	mov	r24, r15
    1b28:	0e 94 43 15 	call	0x2a86	; 0x2a86 <FHT8VPollSyncAndTX_Next(bool)>
    1b2c:	88 23       	and	r24, r24
    1b2e:	09 f4       	brne	.+2      	; 0x1b32 <loopOpenTRV()+0x400>
    1b30:	00 e0       	ldi	r16, 0x00	; 0
  // Once-per-minute tasks: all must take << 0.3s.
  // Run tasks spread throughout the minute to be as kind to batteries (etc) as possible.
  // Only when runAll is true run less-critical tasks that be skipped sometimes when particularly conserving energy.
  // TODO: coordinate temperature reading with time when radio and other heat-generating items are off for more accurate readings.
  // TODO: ensure only take ambient light reading at times when all LEDs are off.
  const bool runAll = (!conserveBattery) || minute0From4ForSensors;
    1b32:	88 20       	and	r8, r8
    1b34:	11 f0       	breq	.+4      	; 0x1b3a <loopOpenTRV()+0x408>
    1b36:	1a 2d       	mov	r17, r10
    1b38:	01 c0       	rjmp	.+2      	; 0x1b3c <loopOpenTRV()+0x40a>
    1b3a:	11 e0       	ldi	r17, 0x01	; 1

  switch(TIME_LSD) // With TWO_S_TICK_RTC_SUPPORT only even seconds are available.
    1b3c:	80 91 05 02 	lds	r24, 0x0205
    1b40:	80 33       	cpi	r24, 0x30	; 48
    1b42:	09 f4       	brne	.+2      	; 0x1b46 <loopOpenTRV()+0x414>
    1b44:	98 c0       	rjmp	.+304    	; 0x1c76 <loopOpenTRV()+0x544>
    1b46:	81 33       	cpi	r24, 0x31	; 49
    1b48:	68 f4       	brcc	.+26     	; 0x1b64 <loopOpenTRV()+0x432>
    1b4a:	82 30       	cpi	r24, 0x02	; 2
    1b4c:	41 f1       	breq	.+80     	; 0x1b9e <loopOpenTRV()+0x46c>
    1b4e:	83 30       	cpi	r24, 0x03	; 3
    1b50:	18 f4       	brcc	.+6      	; 0x1b58 <loopOpenTRV()+0x426>
    1b52:	88 23       	and	r24, r24
    1b54:	d1 f0       	breq	.+52     	; 0x1b8a <loopOpenTRV()+0x458>
    1b56:	f3 c0       	rjmp	.+486    	; 0x1d3e <loopOpenTRV()+0x60c>
    1b58:	84 30       	cpi	r24, 0x04	; 4
    1b5a:	a9 f1       	breq	.+106    	; 0x1bc6 <loopOpenTRV()+0x494>
    1b5c:	8a 30       	cpi	r24, 0x0A	; 10
    1b5e:	09 f0       	breq	.+2      	; 0x1b62 <loopOpenTRV()+0x430>
    1b60:	ee c0       	rjmp	.+476    	; 0x1d3e <loopOpenTRV()+0x60c>
    1b62:	39 c0       	rjmp	.+114    	; 0x1bd6 <loopOpenTRV()+0x4a4>
    1b64:	86 33       	cpi	r24, 0x36	; 54
    1b66:	09 f4       	brne	.+2      	; 0x1b6a <loopOpenTRV()+0x438>
    1b68:	9b c0       	rjmp	.+310    	; 0x1ca0 <loopOpenTRV()+0x56e>
    1b6a:	87 33       	cpi	r24, 0x37	; 55
    1b6c:	38 f4       	brcc	.+14     	; 0x1b7c <loopOpenTRV()+0x44a>
    1b6e:	82 33       	cpi	r24, 0x32	; 50
    1b70:	09 f4       	brne	.+2      	; 0x1b74 <loopOpenTRV()+0x442>
    1b72:	89 c0       	rjmp	.+274    	; 0x1c86 <loopOpenTRV()+0x554>
    1b74:	84 33       	cpi	r24, 0x34	; 52
    1b76:	09 f0       	breq	.+2      	; 0x1b7a <loopOpenTRV()+0x448>
    1b78:	e2 c0       	rjmp	.+452    	; 0x1d3e <loopOpenTRV()+0x60c>
    1b7a:	8d c0       	rjmp	.+282    	; 0x1c96 <loopOpenTRV()+0x564>
    1b7c:	88 33       	cpi	r24, 0x38	; 56
    1b7e:	09 f4       	brne	.+2      	; 0x1b82 <loopOpenTRV()+0x450>
    1b80:	9a c0       	rjmp	.+308    	; 0x1cb6 <loopOpenTRV()+0x584>
    1b82:	8a 33       	cpi	r24, 0x3A	; 58
    1b84:	09 f0       	breq	.+2      	; 0x1b88 <loopOpenTRV()+0x456>
    1b86:	db c0       	rjmp	.+438    	; 0x1d3e <loopOpenTRV()+0x60c>
    1b88:	c7 c0       	rjmp	.+398    	; 0x1d18 <loopOpenTRV()+0x5e6>
    {
    case 0:
      {
      // Tasks that must be run every minute.
      ++minuteCount;
    1b8a:	80 91 06 02 	lds	r24, 0x0206
    1b8e:	8f 5f       	subi	r24, 0xFF	; 255
    1b90:	80 93 06 02 	sts	0x0206, r24
      checkUserSchedule(); // Force to user's programmed settings, if any, at the correct time.
    1b94:	0e 94 95 2c 	call	0x592a	; 0x592a <checkUserSchedule()>
      // Ensure that the RTC has been persisted promptly when necessary.
      persistRTC();
    1b98:	0e 94 b8 23 	call	0x4770	; 0x4770 <persistRTC()>
    1b9c:	d0 c0       	rjmp	.+416    	; 0x1d3e <loopOpenTRV()+0x60c>
      break;
      }

    // Churn/reseed PRNG(s) a little to improve unpredictability in use: should be lightweight.
    case 2: { if(runAll) { seedRNG8(minuteCount ^ cycleCountCPU() ^ (uint8_t)Supply_mV.get(), getSubCycleTime() ^ (uint8_t)AmbLight.get(), (uint8_t)TemperatureC16.get()); } break; }
    1b9e:	11 23       	and	r17, r17
    1ba0:	09 f4       	brne	.+2      	; 0x1ba4 <loopOpenTRV()+0x472>
    1ba2:	cd c0       	rjmp	.+410    	; 0x1d3e <loopOpenTRV()+0x60c>
    1ba4:	86 b5       	in	r24, 0x26	; 38
    1ba6:	60 91 b2 00 	lds	r22, 0x00B2
    1baa:	90 91 06 02 	lds	r25, 0x0206
    1bae:	89 27       	eor	r24, r25
    1bb0:	20 91 16 03 	lds	r18, 0x0316
    1bb4:	90 91 66 03 	lds	r25, 0x0366
    1bb8:	69 27       	eor	r22, r25
    1bba:	82 27       	eor	r24, r18
    1bbc:	40 91 6f 03 	lds	r20, 0x036F
    1bc0:	0e 94 90 20 	call	0x4120	; 0x4120 <seedRNG8(unsigned char, unsigned char, unsigned char)>
    1bc4:	bc c0       	rjmp	.+376    	; 0x1d3e <loopOpenTRV()+0x60c>
    // Force read of supply/battery voltage; measure and recompute status (etc) less often when already thought to be low, eg when conserving.
    case 4: { if(runAll) { Supply_mV.read(); } break; }
    1bc6:	11 23       	and	r17, r17
    1bc8:	09 f4       	brne	.+2      	; 0x1bcc <loopOpenTRV()+0x49a>
    1bca:	b9 c0       	rjmp	.+370    	; 0x1d3e <loopOpenTRV()+0x60c>
    1bcc:	82 e1       	ldi	r24, 0x12	; 18
    1bce:	93 e0       	ldi	r25, 0x03	; 3
    1bd0:	0e 94 ac 1d 	call	0x3b58	; 0x3b58 <SupplyVoltageMilliVolts::read()>
    1bd4:	b4 c0       	rjmp	.+360    	; 0x1d3e <loopOpenTRV()+0x60c>

    // Regular transmission of stats if NOT driving a local valve (else stats can be piggybacked onto that).
    case 10:
      {
      if(!enableTrailingMinimalStatsPayload()) { break; } // Not allowed to send stuff like this.
    1bd6:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <enableTrailingMinimalStatsPayload()>
    1bda:	88 23       	and	r24, r24
    1bdc:	09 f4       	brne	.+2      	; 0x1be0 <loopOpenTRV()+0x4ae>
    1bde:	af c0       	rjmp	.+350    	; 0x1d3e <loopOpenTRV()+0x60c>
#if defined(USE_MODULE_FHT8VSIMPLE)
      // Avoid transmit conflict with FS20; just drop the slot.
      // We should possibly choose between this and piggybacking stats to avoid busting duty-cycle rules.
      if(localFHT8VTRVEnabled() && useExtraFHT8VTXSlots) { break; }
    1be0:	0e 94 49 10 	call	0x2092	; 0x2092 <localFHT8VTRVEnabled()>
    1be4:	88 23       	and	r24, r24
    1be6:	09 f4       	brne	.+2      	; 0x1bea <loopOpenTRV()+0x4b8>
    1be8:	16 c1       	rjmp	.+556    	; 0x1e16 <loopOpenTRV()+0x6e4>
    1bea:	00 23       	and	r16, r16
    1bec:	09 f4       	brne	.+2      	; 0x1bf0 <loopOpenTRV()+0x4be>
    1bee:	13 c1       	rjmp	.+550    	; 0x1e16 <loopOpenTRV()+0x6e4>
    1bf0:	a8 c0       	rjmp	.+336    	; 0x1d42 <loopOpenTRV()+0x610>
#endif

      // Generally only attempt stats TX in the minute after all sensors should have been polled (so that readings are fresh).
      if(minute1From4AfterSensors ||
    1bf2:	99 20       	and	r9, r9
    1bf4:	09 f0       	breq	.+2      	; 0x1bf8 <loopOpenTRV()+0x4c6>
    1bf6:	a3 c0       	rjmp	.+326    	; 0x1d3e <loopOpenTRV()+0x60c>
    1bf8:	0e 94 ab 20 	call	0x4156	; 0x4156 <randRNG8()>
    1bfc:	84 72       	andi	r24, 0x24	; 36
    1bfe:	09 f0       	breq	.+2      	; 0x1c02 <loopOpenTRV()+0x4d0>
    1c00:	9e c0       	rjmp	.+316    	; 0x1d3e <loopOpenTRV()+0x60c>
        (!batteryLow && (0 == (0x24 & randRNG8())))) // Occasional additional TX when not conserving power.
        {
        pollIO(); // Deal with any pending I/O.
    1c02:	80 e0       	ldi	r24, 0x00	; 0
    1c04:	0e 94 58 06 	call	0xcb0	; 0xcb0 <pollIO(bool)>
        // Sleep randomly up to 128ms to spread transmissions and thus help avoid collisions.
        sleepLowPowerLessThanMs(1 + (randRNG8() & 0x7f));
    1c08:	0e 94 ab 20 	call	0x4156	; 0x4156 <randRNG8()>
// Should be good for values up to at least 1000, ie 1 second.
// Uses formulation likely to be quicker than sleepLowPowerMs() for non-constant argument values,
// and that results in a somewhat shorter sleep than sleepLowPowerMs(ms).
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerLessThanMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed(((MIN_CPU_HZ/4000) * (ms)) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	8f 77       	andi	r24, 0x7F	; 127
    1c10:	90 70       	andi	r25, 0x00	; 0
    1c12:	01 96       	adiw	r24, 0x01	; 1
    1c14:	a0 e0       	ldi	r26, 0x00	; 0
    1c16:	b0 e0       	ldi	r27, 0x00	; 0
    1c18:	9c 01       	movw	r18, r24
    1c1a:	ad 01       	movw	r20, r26
    1c1c:	e3 e0       	ldi	r30, 0x03	; 3
    1c1e:	22 0f       	add	r18, r18
    1c20:	33 1f       	adc	r19, r19
    1c22:	44 1f       	adc	r20, r20
    1c24:	55 1f       	adc	r21, r21
    1c26:	ea 95       	dec	r30
    1c28:	d1 f7       	brne	.-12     	; 0x1c1e <loopOpenTRV()+0x4ec>
    1c2a:	28 1b       	sub	r18, r24
    1c2c:	39 0b       	sbc	r19, r25
    1c2e:	4a 0b       	sbc	r20, r26
    1c30:	5b 0b       	sbc	r21, r27
    1c32:	22 50       	subi	r18, 0x02	; 2
    1c34:	30 40       	sbci	r19, 0x00	; 0
    1c36:	c9 01       	movw	r24, r18
    1c38:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
        pollIO(); // Deal with any pending I/O.
    1c3c:	80 e0       	ldi	r24, 0x00	; 0
    1c3e:	0e 94 58 06 	call	0xcb0	; 0xcb0 <pollIO(bool)>
        //   * this is a speculative 'extra' TX
        //   * battery is low
        //   * this node is a hub so needs to listen as much as possible
        // This doesn't generally/always need to send binary/both formats
        // if this is controlling a local FHT8V on which the binary stats can be piggybacked...
        bareStatsTX(hubMode, minute1From4AfterSensors && !batteryLow && !hubMode, !localFHT8VTRVEnabled() || (0 == (0x82 & randRNG8())));
    1c42:	77 20       	and	r7, r7
    1c44:	39 f0       	breq	.+14     	; 0x1c54 <loopOpenTRV()+0x522>
    1c46:	99 20       	and	r9, r9
    1c48:	29 f4       	brne	.+10     	; 0x1c54 <loopOpenTRV()+0x522>
    1c4a:	10 e0       	ldi	r17, 0x00	; 0
    1c4c:	cc 20       	and	r12, r12
    1c4e:	19 f4       	brne	.+6      	; 0x1c56 <loopOpenTRV()+0x524>
    1c50:	11 e0       	ldi	r17, 0x01	; 1
    1c52:	01 c0       	rjmp	.+2      	; 0x1c56 <loopOpenTRV()+0x524>
    1c54:	10 e0       	ldi	r17, 0x00	; 0
    1c56:	0e 94 49 10 	call	0x2092	; 0x2092 <localFHT8VTRVEnabled()>
    1c5a:	88 23       	and	r24, r24
    1c5c:	31 f0       	breq	.+12     	; 0x1c6a <loopOpenTRV()+0x538>
    1c5e:	0e 94 ab 20 	call	0x4156	; 0x4156 <randRNG8()>
    1c62:	82 78       	andi	r24, 0x82	; 130
    1c64:	11 f0       	breq	.+4      	; 0x1c6a <loopOpenTRV()+0x538>
    1c66:	40 e0       	ldi	r20, 0x00	; 0
    1c68:	01 c0       	rjmp	.+2      	; 0x1c6c <loopOpenTRV()+0x53a>
    1c6a:	41 e0       	ldi	r20, 0x01	; 1
    1c6c:	8c 2d       	mov	r24, r12
    1c6e:	61 2f       	mov	r22, r17
    1c70:	0e 94 86 07 	call	0xf0c	; 0xf0c <bareStatsTX(bool, bool, bool)>
    1c74:	64 c0       	rjmp	.+200    	; 0x1d3e <loopOpenTRV()+0x60c>
    case 46: { Voice.read(); break; }
#endif

#ifdef TEMP_POT_AVAILABLE
    // Sample the user-selected WARM temperature target.
    case 48: { if(runAll) { TempPot.read(); } break; }
    1c76:	11 23       	and	r17, r17
    1c78:	09 f4       	brne	.+2      	; 0x1c7c <loopOpenTRV()+0x54a>
    1c7a:	61 c0       	rjmp	.+194    	; 0x1d3e <loopOpenTRV()+0x60c>
    1c7c:	81 e7       	ldi	r24, 0x71	; 113
    1c7e:	93 e0       	ldi	r25, 0x03	; 3
    1c80:	0e 94 98 31 	call	0x6330	; 0x6330 <TemperaturePot::read()>
    1c84:	5c c0       	rjmp	.+184    	; 0x1d3e <loopOpenTRV()+0x60c>
#endif

    // Read all environmental inputs, late in the cycle.
#ifdef HUMIDITY_SENSOR_SUPPORT
    // Sample humidity.
    case 50: { if(runAll) { RelHumidity.read(); } break; }
    1c86:	11 23       	and	r17, r17
    1c88:	09 f4       	brne	.+2      	; 0x1c8c <loopOpenTRV()+0x55a>
    1c8a:	59 c0       	rjmp	.+178    	; 0x1d3e <loopOpenTRV()+0x60c>
    1c8c:	89 e6       	ldi	r24, 0x69	; 105
    1c8e:	93 e0       	ldi	r25, 0x03	; 3
    1c90:	0e 94 94 32 	call	0x6528	; 0x6528 <HumiditySensorSHT21::read()>
    1c94:	54 c0       	rjmp	.+168    	; 0x1d3e <loopOpenTRV()+0x60c>
#endif
    // Poll ambient light level at a fixed rate.
    case 52: { AmbLight.read(); break; }
    1c96:	84 e6       	ldi	r24, 0x64	; 100
    1c98:	93 e0       	ldi	r25, 0x03	; 3
    1c9a:	0e 94 08 33 	call	0x6610	; 0x6610 <AmbientLight::read()>
    1c9e:	4f c0       	rjmp	.+158    	; 0x1d3e <loopOpenTRV()+0x60c>
    // At a hub, sample temperature as late as possible in (and only in the 'quiet') minute, to reduce valve hunting from self-heating.
    case 54: { if(hubMode ? minute0From4ForSensors : runAll) { TemperatureC16.read(); } break; }
    1ca0:	cc 20       	and	r12, r12
    1ca2:	09 f4       	brne	.+2      	; 0x1ca6 <loopOpenTRV()+0x574>
    1ca4:	a1 2e       	mov	r10, r17
    1ca6:	aa 20       	and	r10, r10
    1ca8:	09 f4       	brne	.+2      	; 0x1cac <loopOpenTRV()+0x57a>
    1caa:	49 c0       	rjmp	.+146    	; 0x1d3e <loopOpenTRV()+0x60c>
    1cac:	8d e6       	ldi	r24, 0x6D	; 109
    1cae:	93 e0       	ldi	r25, 0x03	; 3
    1cb0:	0e 94 2c 32 	call	0x6458	; 0x6458 <RoomTemperatureC16::read()>
    1cb4:	44 c0       	rjmp	.+136    	; 0x1d3e <loopOpenTRV()+0x60c>
      {
//      static bool boilerOn; // Internal record of current boiler-out state.

      // Recompute target, valve position and call for heat, etc.
      // Should be called once per minute to work correctly.
      NominalRadValve.read();
    1cb6:	8e ef       	ldi	r24, 0xFE	; 254
    1cb8:	91 e0       	ldi	r25, 0x01	; 1
    1cba:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <ModelledRadValve::read()>
      if(NominalRadValve.isValveMoved() ||
    1cbe:	80 91 03 02 	lds	r24, 0x0203
    1cc2:	88 23       	and	r24, r24
    1cc4:	31 f4       	brne	.+12     	; 0x1cd2 <loopOpenTRV()+0x5a0>
    1cc6:	77 20       	and	r7, r7
    1cc8:	51 f0       	breq	.+20     	; 0x1cde <loopOpenTRV()+0x5ac>
    1cca:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <enableTrailingMinimalStatsPayload()>
    1cce:	88 23       	and	r24, r24
    1cd0:	31 f0       	breq	.+12     	; 0x1cde <loopOpenTRV()+0x5ac>
        // If there was a change in target valve position,
        // or periodically in a minute after all sensors should have been read,
        // precompute some or all of any outgoing frames/stats/etc ready for transmission.
#if defined(USE_MODULE_FHT8VSIMPLE)
        // Recompute FHT8V command to send if target valve setting has changed...
        if(localFHT8VTRVEnabled()) { FHT8VCreateValveSetCmdFrame(); }
    1cd2:	0e 94 49 10 	call	0x2092	; 0x2092 <localFHT8VTRVEnabled()>
    1cd6:	88 23       	and	r24, r24
    1cd8:	11 f0       	breq	.+4      	; 0x1cde <loopOpenTRV()+0x5ac>
    1cda:	0e 94 5e 14 	call	0x28bc	; 0x28bc <FHT8VCreateValveSetCmdFrame()>
#endif
        }

#if defined(ENABLE_BOILER_HUB)
      // Track how long since remote call for heat last heard.
      if(hubMode)
    1cde:	cc 20       	and	r12, r12
    1ce0:	b1 f0       	breq	.+44     	; 0x1d0e <loopOpenTRV()+0x5dc>
        {
        if(boilerCountdownTicks != 0)
    1ce2:	80 91 07 02 	lds	r24, 0x0207
    1ce6:	90 91 08 02 	lds	r25, 0x0208
    1cea:	89 2b       	or	r24, r25
    1cec:	81 f0       	breq	.+32     	; 0x1d0e <loopOpenTRV()+0x5dc>
          {
#if 1 && defined(DEBUG)
          DEBUG_SERIAL_PRINT_FLASHSTRING("Boiler on, s left: ");
    1cee:	8e ea       	ldi	r24, 0xAE	; 174
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <serialPrintAndFlush(__FlashStringHelper const*)>
          DEBUG_SERIAL_PRINT(boilerCountdownTicks * MAIN_TICK_S);
    1cf6:	80 91 07 02 	lds	r24, 0x0207
    1cfa:	90 91 08 02 	lds	r25, 0x0208
    1cfe:	88 0f       	add	r24, r24
    1d00:	99 1f       	adc	r25, r25
    1d02:	6a e0       	ldi	r22, 0x0A	; 10
    1d04:	70 e0       	ldi	r23, 0x00	; 0
    1d06:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <serialPrintAndFlush(unsigned int, int)>
          DEBUG_SERIAL_PRINTLN();
    1d0a:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <serialPrintlnAndFlush()>
          }
        }
#endif

      // Show current status if appropriate.
      if(runAll) { showStatus = true; }
    1d0e:	11 23       	and	r17, r17
    1d10:	b1 f0       	breq	.+44     	; 0x1d3e <loopOpenTRV()+0x60c>
    1d12:	ee 24       	eor	r14, r14
    1d14:	e3 94       	inc	r14
    1d16:	13 c0       	rjmp	.+38     	; 0x1d3e <loopOpenTRV()+0x60c>
    case 58:
      {
      // Take full stats sample as near the end of the hour as reasonably possible (without danger of overrun),
      // and with other optional non-full samples evenly spaced throughout the hour (if not low on battery).
      // A small even number of samples (or 1 sample) is probably most efficient.
      if(minute0From4ForSensors) // Use lowest-noise samples just taken in the special 0 minute out of each 4.
    1d18:	aa 20       	and	r10, r10
    1d1a:	89 f0       	breq	.+34     	; 0x1d3e <loopOpenTRV()+0x60c>
        {
        const uint_least8_t mm = getMinutesLT();
    1d1c:	0e 94 4e 23 	call	0x469c	; 0x469c <getMinutesLT()>
        switch(mm)
    1d20:	8a 31       	cpi	r24, 0x1A	; 26
    1d22:	68 f0       	brcs	.+26     	; 0x1d3e <loopOpenTRV()+0x60c>
    1d24:	8e 31       	cpi	r24, 0x1E	; 30
    1d26:	20 f0       	brcs	.+8      	; 0x1d30 <loopOpenTRV()+0x5fe>
    1d28:	88 53       	subi	r24, 0x38	; 56
    1d2a:	84 30       	cpi	r24, 0x04	; 4
    1d2c:	40 f4       	brcc	.+16     	; 0x1d3e <loopOpenTRV()+0x60c>
    1d2e:	04 c0       	rjmp	.+8      	; 0x1d38 <loopOpenTRV()+0x606>
          {
          case 26: case 27: case 28: case 29:
            { if(!batteryLow) { sampleStats(false); } break; } // Skip sub-samples if short of energy.
    1d30:	99 20       	and	r9, r9
    1d32:	29 f4       	brne	.+10     	; 0x1d3e <loopOpenTRV()+0x60c>
    1d34:	80 e0       	ldi	r24, 0x00	; 0
    1d36:	01 c0       	rjmp	.+2      	; 0x1d3a <loopOpenTRV()+0x608>
          case 56: case 57: case 58: case 59:
            { sampleStats(true); break; } // Always take the full sample at the end of each hour.
    1d38:	81 e0       	ldi	r24, 0x01	; 1
    1d3a:	0e 94 54 09 	call	0x12a8	; 0x12a8 <sampleStats(bool)>
      break;
      }
    }

#if defined(USE_MODULE_FHT8VSIMPLE) && defined(TWO_S_TICK_RTC_SUPPORT)
  if(useExtraFHT8VTXSlots)
    1d3e:	00 23       	and	r16, r16
    1d40:	61 f0       	breq	.+24     	; 0x1d5a <loopOpenTRV()+0x628>
    {
    // ---------- HALF SECOND #2 -----------
    useExtraFHT8VTXSlots = localFHT8VTRVEnabled() && FHT8VPollSyncAndTX_Next(doubleTXForFTH8V); 
    1d42:	0e 94 49 10 	call	0x2092	; 0x2092 <localFHT8VTRVEnabled()>
    1d46:	88 23       	and	r24, r24
    1d48:	39 f0       	breq	.+14     	; 0x1d58 <loopOpenTRV()+0x626>
    1d4a:	8f 2d       	mov	r24, r15
    1d4c:	0e 94 43 15 	call	0x2a86	; 0x2a86 <FHT8VPollSyncAndTX_Next(bool)>
    1d50:	88 23       	and	r24, r24
    1d52:	11 f0       	breq	.+4      	; 0x1d58 <loopOpenTRV()+0x626>
    1d54:	01 e0       	ldi	r16, 0x01	; 1
    1d56:	01 c0       	rjmp	.+2      	; 0x1d5a <loopOpenTRV()+0x628>
    1d58:	00 e0       	ldi	r16, 0x00	; 0
//    if(useExtraFHT8VTXSlots) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("ES@2"); }
    }
#endif

  // Generate periodic status reports.
  if(showStatus) { serialStatusReport(); }
    1d5a:	ee 20       	and	r14, r14
    1d5c:	11 f0       	breq	.+4      	; 0x1d62 <loopOpenTRV()+0x630>
    1d5e:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <serialStatusReport()>

#if defined(USE_MODULE_FHT8VSIMPLE) && defined(TWO_S_TICK_RTC_SUPPORT)
  if(useExtraFHT8VTXSlots)
    1d62:	00 23       	and	r16, r16
    1d64:	39 f0       	breq	.+14     	; 0x1d74 <loopOpenTRV()+0x642>
    {
    // ---------- HALF SECOND #3 -----------
    useExtraFHT8VTXSlots = localFHT8VTRVEnabled() && FHT8VPollSyncAndTX_Next(doubleTXForFTH8V); 
    1d66:	0e 94 49 10 	call	0x2092	; 0x2092 <localFHT8VTRVEnabled()>
    1d6a:	88 23       	and	r24, r24
    1d6c:	19 f0       	breq	.+6      	; 0x1d74 <loopOpenTRV()+0x642>
    1d6e:	8f 2d       	mov	r24, r15
    1d70:	0e 94 43 15 	call	0x2a86	; 0x2a86 <FHT8VPollSyncAndTX_Next(bool)>
  // AND the CLI is / should be active OR a status line has just been output
  // then poll/prompt the user for input
  // using a timeout which should safely avoid overrun, ie missing the next basic tick,
  // and which should also allow some energy-saving sleep.
#if 1 && defined(SUPPORT_CLI)
  const bool humanCLIUse = isCLIActive(); // Keeping CLI active for human interaction rather than for automated interaction.
    1d74:	0e 94 3f 26 	call	0x4c7e	; 0x4c7e <isCLIActive()>
    1d78:	98 2f       	mov	r25, r24
  if(showStatus || humanCLIUse)
    1d7a:	ee 20       	and	r14, r14
    1d7c:	11 f4       	brne	.+4      	; 0x1d82 <loopOpenTRV()+0x650>
    1d7e:	88 23       	and	r24, r24
    1d80:	59 f0       	breq	.+22     	; 0x1d98 <loopOpenTRV()+0x666>
    {
    const uint8_t sct = getSubCycleTime();
    1d82:	80 91 b2 00 	lds	r24, 0x00B2
    const uint8_t listenTime = max(GSCT_MAX/16, CLI_POLL_MIN_SCT);
    if(sct < (GSCT_MAX - 2*listenTime))
    1d86:	8d 3c       	cpi	r24, 0xCD	; 205
    1d88:	38 f4       	brcc	.+14     	; 0x1d98 <loopOpenTRV()+0x666>
      // Don't listen beyond the last 16th of the cycle,
      // or a minimal time if only prodding for interaction with automated front-end,
      // as listening for UART RX uses lots of power.
      { pollCLI(humanCLIUse ? (GSCT_MAX-listenTime) : (sct+CLI_POLL_MIN_SCT)); }
    1d8a:	99 23       	and	r25, r25
    1d8c:	11 f0       	breq	.+4      	; 0x1d92 <loopOpenTRV()+0x660>
    1d8e:	86 ee       	ldi	r24, 0xE6	; 230
    1d90:	01 c0       	rjmp	.+2      	; 0x1d94 <loopOpenTRV()+0x662>
    1d92:	87 5e       	subi	r24, 0xE7	; 231
    1d94:	0e 94 3d 29 	call	0x527a	; 0x527a <pollCLI(unsigned char)>
    DEBUG_SERIAL_PRINTLN();
    }
#endif

  // Detect and handle (actual or near) overrun, if it happens, though it should not.
  if(TIME_LSD != getSecondsLT())
    1d98:	90 91 20 03 	lds	r25, 0x0320
    1d9c:	80 91 05 02 	lds	r24, 0x0205
    1da0:	89 17       	cp	r24, r25
    1da2:	09 f4       	brne	.+2      	; 0x1da6 <loopOpenTRV()+0x674>
    1da4:	3c c0       	rjmp	.+120    	; 0x1e1e <loopOpenTRV()+0x6ec>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1da6:	f9 99       	sbic	0x1f, 1	; 31
    1da8:	fe cf       	rjmp	.-4      	; 0x1da6 <loopOpenTRV()+0x674>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1daa:	8d e1       	ldi	r24, 0x1D	; 29
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	92 bd       	out	0x22, r25	; 34
    1db0:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1db2:	f8 9a       	sbi	0x1f, 0	; 31
    1db4:	10 b5       	in	r17, 0x20	; 32
    {
    // Increment the overrun counter (stored inverted, so 0xff initialised => 0 overruns).
    const uint8_t orc = 1 + ~eeprom_read_byte((uint8_t *)EE_START_OVERRUN_COUNTER);
    1db6:	11 95       	neg	r17
    eeprom_smart_update_byte((uint8_t *)EE_START_OVERRUN_COUNTER, ~orc);
    1db8:	61 2f       	mov	r22, r17
    1dba:	60 95       	com	r22
    1dbc:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <eeprom_smart_update_byte(unsigned char*, unsigned char)>
#if 1 && defined(DEBUG)
    DEBUG_SERIAL_PRINT_FLASHSTRING("!ERROR: loop overrun ");
    1dc0:	88 e9       	ldi	r24, 0x98	; 152
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <serialPrintAndFlush(__FlashStringHelper const*)>
    DEBUG_SERIAL_PRINT(orc);
    1dc8:	81 2f       	mov	r24, r17
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	6a e0       	ldi	r22, 0x0A	; 10
    1dce:	70 e0       	ldi	r23, 0x00	; 0
    1dd0:	0e 94 dd 25 	call	0x4bba	; 0x4bba <serialPrintAndFlush(int, int)>
    DEBUG_SERIAL_PRINTLN();
    1dd4:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <serialPrintlnAndFlush()>
#endif
#if defined(USE_MODULE_FHT8VSIMPLE)
    FHT8VSyncAndTXReset(); // Assume that sync with valve may have been lost, so re-sync.
    1dd8:	0e 94 6f 10 	call	0x20de	; 0x20de <FHT8VSyncAndTXReset()>
#endif
    TIME_LSD = getSecondsLT(); // Prepare to sleep until start of next full minor cycle.
    1ddc:	80 91 20 03 	lds	r24, 0x0320
    1de0:	80 93 05 02 	sts	0x0205, r24
    1de4:	1c c0       	rjmp	.+56     	; 0x1e1e <loopOpenTRV()+0x6ec>
    // Optimisation: if just heard a call need not listen on this next cycle.
    // Optimisation: if boiler timeout is a long time away (>> one FHT8V TX cycle, ~2 minutes excl quiet minute), then can avoid listening for now.
    //    Longish period without any RX listening may allow hub unit to cool and get better sample of local temperature if marginal.
    // Aim to listen in one stretch for greater than full FHT8V TX cycle of ~2m to avoid missing a call for heat.
    // MUST listen for all of final 2 mins of boiler-on to avoid missing TX (without forcing boiler over-run).
    else if((boilerCountdownTicks <= ((MAX_FHT8V_TX_CYCLE_HS+1)/(2*MAIN_TICK_S))) && // Don't miss a final TX that would keep the boiler on...
    1de6:	20 91 07 02 	lds	r18, 0x0207
    1dea:	30 91 08 02 	lds	r19, 0x0208
    1dee:	c9 01       	movw	r24, r18
    1df0:	01 97       	sbiw	r24, 0x01	; 1
    1df2:	cb 97       	sbiw	r24, 0x3b	; 59
    1df4:	08 f0       	brcs	.+2      	; 0x1df8 <loopOpenTRV()+0x6c6>
    1df6:	02 ce       	rjmp	.-1020   	; 0x19fc <loopOpenTRV()+0x2ca>
#if defined(USE_MODULE_FHT8VSIMPLE)
  // Act on eavesdropping need, setting up or clearing down hooks as required.
  if(needsToEavesdrop)
    {
    // Ensure radio is in RX mode rather than standby, and possibly hook up interrupts if available (REV1 board).
    const bool startedRX = SetupToEavesdropOnFHT8V(second0); // Start listening (if not already so).
    1df8:	8b 2d       	mov	r24, r11
    1dfa:	0e 94 a2 10 	call	0x2144	; 0x2144 <SetupToEavesdropOnFHT8V(bool)>
#if 0 && defined(DEBUG)
    if(startedRX) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("STARTED eavesdropping"); }
#endif
#if 1 && defined(DEBUG)
    const uint16_t dropped = getInboundStatsQueueOverrun();
    1dfe:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <getInboundStatsQueueOverrun()>
    1e02:	8c 01       	movw	r16, r24
    static uint16_t oldDropped;
    if(dropped != oldDropped)
    1e04:	80 91 0b 02 	lds	r24, 0x020B
    1e08:	90 91 0c 02 	lds	r25, 0x020C
    1e0c:	08 17       	cp	r16, r24
    1e0e:	19 07       	cpc	r17, r25
    1e10:	09 f0       	breq	.+2      	; 0x1e14 <loopOpenTRV()+0x6e2>
    1e12:	03 ce       	rjmp	.-1018   	; 0x1a1a <loopOpenTRV()+0x2e8>
    1e14:	11 ce       	rjmp	.-990    	; 0x1a38 <loopOpenTRV()+0x306>
      // We should possibly choose between this and piggybacking stats to avoid busting duty-cycle rules.
      if(localFHT8VTRVEnabled() && useExtraFHT8VTXSlots) { break; }
#endif

      // Generally only attempt stats TX in the minute after all sensors should have been polled (so that readings are fresh).
      if(minute1From4AfterSensors ||
    1e16:	77 20       	and	r7, r7
    1e18:	09 f0       	breq	.+2      	; 0x1e1c <loopOpenTRV()+0x6ea>
    1e1a:	f3 ce       	rjmp	.-538    	; 0x1c02 <loopOpenTRV()+0x4d0>
    1e1c:	ea ce       	rjmp	.-556    	; 0x1bf2 <loopOpenTRV()+0x4c0>
  else if(getSubCycleTime() >= nearOverrunThreshold)
    {
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("?O"); // Near overrun.  Note 2ms/char to send...
    }
#endif
  }
    1e1e:	ef 96       	adiw	r28, 0x3f	; 63
    1e20:	0f b6       	in	r0, 0x3f	; 63
    1e22:	f8 94       	cli
    1e24:	de bf       	out	0x3e, r29	; 62
    1e26:	0f be       	out	0x3f, r0	; 63
    1e28:	cd bf       	out	0x3d, r28	; 61
    1e2a:	cf 91       	pop	r28
    1e2c:	df 91       	pop	r29
    1e2e:	1f 91       	pop	r17
    1e30:	0f 91       	pop	r16
    1e32:	ff 90       	pop	r15
    1e34:	ef 90       	pop	r14
    1e36:	df 90       	pop	r13
    1e38:	cf 90       	pop	r12
    1e3a:	bf 90       	pop	r11
    1e3c:	af 90       	pop	r10
    1e3e:	9f 90       	pop	r9
    1e40:	8f 90       	pop	r8
    1e42:	7f 90       	pop	r7
    1e44:	08 95       	ret

00001e46 <eeprom_smart_erase_byte(unsigned char*)>:
// If the target byte is already 0xff then this does nothing at all beyond an initial read.
// This saves a bit of time and power and possibly a little EEPROM cell wear also.
// Without split erase/write this degenerates to a specialised eeprom_update_byte().
// As with the AVR eeprom_XXX_byte() macros, not safe to use outside and within ISRs as-is.
// Returns true iff an erase was performed.
bool eeprom_smart_erase_byte(uint8_t *p)
    1e46:	9c 01       	movw	r18, r24
  eeprom_write_byte(p, 0xff); // Set to 0xff.
  return(true); // Performed an erase (and probably a write, too).
#else

  // Wait until EEPROM is idle/ready.
  eeprom_busy_wait();
    1e48:	f9 99       	sbic	0x1f, 1	; 31
    1e4a:	fe cf       	rjmp	.-4      	; 0x1e48 <eeprom_smart_erase_byte(unsigned char*)+0x2>
  //     if((uint8_t) 0xff == eeprom_read_byte(p)) { return; }
  // but leaves EEAR[L] set up appropriately for any erase or write.
#if E2END <= 0xFF
  EEARL = (uint8_t)p;
#else
  EEAR = (uint16_t)p;
    1e4c:	32 bd       	out	0x22, r19	; 34
    1e4e:	21 bd       	out	0x21, r18	; 33
#endif
  // Ignore problems that some AVRs have with EECR and STS instructions (ATmega64 errata).
  EECR = _BV(EERE); // Start EEPROM read operation.
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	8f bb       	out	0x1f, r24	; 31
  const uint8_t oldValue = EEDR; // Get old EEPROM value.
    1e54:	80 b5       	in	r24, 0x20	; 32
  if((uint8_t) 0xff != oldValue) // Needs erase...
    1e56:	8f 3f       	cpi	r24, 0xFF	; 255
    1e58:	11 f4       	brne	.+4      	; 0x1e5e <eeprom_smart_erase_byte(unsigned char*)+0x18>
    1e5a:	80 e0       	ldi	r24, 0x00	; 0
    1e5c:	08 95       	ret
    {
    ATOMIC_BLOCK (ATOMIC_RESTORESTATE) // Avoid timing problems from interrupts.
    1e5e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1e60:	f8 94       	cli
      {
      // Erase to 0xff; no write needed.
      EECR = _BV(EEMPE) | _BV(EEPM0); // Set master write-enable bit and erase-only mode.
    1e62:	84 e1       	ldi	r24, 0x14	; 20
    1e64:	8f bb       	out	0x1f, r24	; 31
      EECR |= _BV(EEPE);  // Start erase-only operation.
    1e66:	f9 9a       	sbi	0x1f, 1	; 31
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1e68:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
      }
    return(true); // Performed the erase.
    }
  return(false);
#endif
  }
    1e6c:	08 95       	ret

00001e6e <eeprom_smart_clear_bits(unsigned char*, unsigned char)>:
// If ANDing in the mask has no effect then this does nothing at all beyond an initial read.
// This saves a bit of time and power and possibly a little EEPROM cell wear also.
// Without split erase/write this degenerates to a specialised eeprom_smart_update_byte().
// As with the AVR eeprom_XXX_byte() macros, not safe to use outside and within ISRs as-is.
// Returns true iff a write was performed.
bool eeprom_smart_clear_bits(uint8_t *p, uint8_t mask)
    1e6e:	9c 01       	movw	r18, r24
  eeprom_write_byte(p, newValue); // Set to masked value.
  return(true); // Performed a write (and probably an erase, too).
#else

  // Wait until EEPROM is idle/ready.
  eeprom_busy_wait();
    1e70:	f9 99       	sbic	0x1f, 1	; 31
    1e72:	fe cf       	rjmp	.-4      	; 0x1e70 <eeprom_smart_clear_bits(unsigned char*, unsigned char)+0x2>
  //     oldValue = eeprom_read_byte(p);
  // and leaves EEAR[L] set up appropriately for any erase or write.
#if E2END <= 0xFF
  EEARL = (uint8_t)p;
#else
  EEAR = (uint16_t)p;
    1e74:	32 bd       	out	0x22, r19	; 34
    1e76:	21 bd       	out	0x21, r18	; 33
#endif
  // Ignore problems that some AVRs have with EECR and STS instructions (ATmega64 errata).
  EECR = _BV(EERE); // Start EEPROM read operation.
    1e78:	81 e0       	ldi	r24, 0x01	; 1
    1e7a:	8f bb       	out	0x1f, r24	; 31
  const uint8_t oldValue = EEDR; // Get old EEPROM value.
    1e7c:	80 b5       	in	r24, 0x20	; 32
  const uint8_t newValue = oldValue & mask;
    1e7e:	68 23       	and	r22, r24
  if(oldValue != newValue) // Write is needed...
    1e80:	86 17       	cp	r24, r22
    1e82:	11 f4       	brne	.+4      	; 0x1e88 <eeprom_smart_clear_bits(unsigned char*, unsigned char)+0x1a>
    1e84:	80 e0       	ldi	r24, 0x00	; 0
    1e86:	08 95       	ret
    {
    // Do the write: no erase is needed.
    EEDR = newValue; // Set EEPROM data register to required new value.
    1e88:	60 bd       	out	0x20, r22	; 32
    ATOMIC_BLOCK (ATOMIC_RESTORESTATE) // Avoid timing problems from interrupts.
    1e8a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1e8c:	f8 94       	cli
      {
      EECR = _BV(EEMPE) | _BV(EEPM1); // Set master write-enable bit and write-only mode.
    1e8e:	84 e2       	ldi	r24, 0x24	; 36
    1e90:	8f bb       	out	0x1f, r24	; 31
      EECR |= _BV(EEPE);  // Start write-only operation.
    1e92:	f9 9a       	sbi	0x1f, 1	; 31
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1e94:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    1e96:	81 e0       	ldi	r24, 0x01	; 1
      }
    return(true); // Performed the write.
    }
  return(false);
#endif
  }
    1e98:	08 95       	ret

00001e9a <eeprom_smart_update_byte(unsigned char*, unsigned char)>:
// Updates an EEEPROM byte iff not currently at the specified target value.
// May be able to selectively erase or write (ie reduce wear) to reach the desired value.
// As with the AVR eeprom_XXX_byte() macros, not safe to use outside and within ISRs as-is.
// Returns true iff an erase and/or write was performed.
// TODO: make smarter, eg don't wait/read twice...
bool eeprom_smart_update_byte(uint8_t *p, uint8_t value)
    1e9a:	78 2f       	mov	r23, r24
    1e9c:	e9 2f       	mov	r30, r25
  {
  // If target byte is 0xff then attempt smart erase rather than more generic write or erase+write.
  if((uint8_t) 0xff == value) { return(eeprom_smart_erase_byte(p)); }
    1e9e:	6f 3f       	cpi	r22, 0xFF	; 255
    1ea0:	19 f4       	brne	.+6      	; 0x1ea8 <eeprom_smart_update_byte(unsigned char*, unsigned char)+0xe>
    1ea2:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <eeprom_smart_erase_byte(unsigned char*)>
    1ea6:	08 95       	ret
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1ea8:	f9 99       	sbic	0x1f, 1	; 31
    1eaa:	fe cf       	rjmp	.-4      	; 0x1ea8 <eeprom_smart_update_byte(unsigned char*, unsigned char)+0xe>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1eac:	47 2f       	mov	r20, r23
    1eae:	5e 2f       	mov	r21, r30
    1eb0:	52 bd       	out	0x22, r21	; 34
    1eb2:	41 bd       	out	0x21, r20	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1eb4:	f8 9a       	sbi	0x1f, 0	; 31
    1eb6:	80 b5       	in	r24, 0x20	; 32
  // More than an erase might be required...
  const uint8_t oldValue = eeprom_read_byte(p);
  if(value == oldValue) { return(false); } // No change needed.
    1eb8:	68 17       	cp	r22, r24
    1eba:	11 f4       	brne	.+4      	; 0x1ec0 <eeprom_smart_update_byte(unsigned char*, unsigned char)+0x26>
    1ebc:	80 e0       	ldi	r24, 0x00	; 0
    1ebe:	08 95       	ret
#ifdef EEPROM_SPLIT_ERASE_WRITE // Can do selective write.
  if(value == (value & oldValue)) { return(eeprom_smart_clear_bits(p, value)); } // Can use pure write to clear bits to zero.
    1ec0:	26 2f       	mov	r18, r22
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	82 23       	and	r24, r18
    1ec8:	93 23       	and	r25, r19
    1eca:	28 17       	cp	r18, r24
    1ecc:	39 07       	cpc	r19, r25
    1ece:	29 f4       	brne	.+10     	; 0x1eda <eeprom_smart_update_byte(unsigned char*, unsigned char)+0x40>
    1ed0:	87 2f       	mov	r24, r23
    1ed2:	9e 2f       	mov	r25, r30
    1ed4:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <eeprom_smart_clear_bits(unsigned char*, unsigned char)>
    1ed8:	08 95       	ret
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    1eda:	f9 99       	sbic	0x1f, 1	; 31
    1edc:	fe cf       	rjmp	.-4      	; 0x1eda <eeprom_smart_update_byte(unsigned char*, unsigned char)+0x40>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    1ede:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1ee0:	52 bd       	out	0x22, r21	; 34
    1ee2:	41 bd       	out	0x21, r20	; 33
#endif
    EEDR = __value;
    1ee4:	60 bd       	out	0x20, r22	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    1ee6:	0f b6       	in	r0, 0x3f	; 63
    1ee8:	f8 94       	cli
    1eea:	fa 9a       	sbi	0x1f, 2	; 31
    1eec:	f9 9a       	sbi	0x1f, 1	; 31
    1eee:	0f be       	out	0x3f, r0	; 63
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
#endif
  eeprom_write_byte(p, value); // Needs to set some (but not all) bits to 1, so needs erase and write.
  return(true); // Performed an update.
  }
    1ef2:	08 95       	ret

00001ef4 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>:
// bptr must be pointing at the current byte to update on entry which must start off as 0xff;
// this will write the byte and increment bptr (and write 0xff to the new location) if one is filled up.
// Partial byte can only have even number of bits present, ie be in one of 4 states.
// Two least significant bits used to indicate how many bit pairs are still to be filled,
// so initial 0xff value (which is never a valid complete filled byte) indicates 'empty'.
static uint8_t *_FHT8VCreate200usAppendEncBit(uint8_t *bptr, const bool is1)
    1ef4:	fc 01       	movw	r30, r24
  {
  const uint8_t bitPairsLeft = (*bptr) & 3; // Find out how many bit pairs are left to fill in the current byte.
    1ef6:	80 81       	ld	r24, Z
    1ef8:	98 2f       	mov	r25, r24
    1efa:	93 70       	andi	r25, 0x03	; 3
  if(!is1) // Appending 1100.
    1efc:	66 23       	and	r22, r22
    1efe:	b1 f4       	brne	.+44     	; 0x1f2c <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x38>
    {
    switch(bitPairsLeft)
    1f00:	92 30       	cpi	r25, 0x02	; 2
    1f02:	51 f0       	breq	.+20     	; 0x1f18 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x24>
    1f04:	93 30       	cpi	r25, 0x03	; 3
    1f06:	31 f0       	breq	.+12     	; 0x1f14 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x20>
    1f08:	9f 01       	movw	r18, r30
    1f0a:	2f 5f       	subi	r18, 0xFF	; 255
    1f0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f0e:	91 30       	cpi	r25, 0x01	; 1
    1f10:	59 f4       	brne	.+22     	; 0x1f28 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x34>
    1f12:	05 c0       	rjmp	.+10     	; 0x1f1e <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x2a>
      {
      case 3: // Empty target byte (should be 0xff currently).
        *bptr = 0xcd; // %11001101 Write back partial byte (msbits now 1100 and two bit pairs remain free).
    1f14:	8d ec       	ldi	r24, 0xCD	; 205
    1f16:	25 c0       	rjmp	.+74     	; 0x1f62 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      case 2: // Top bit pair already filled.
        *bptr = (*bptr & 0xc0) | 0x30; // Preserve existing ms bit-pair, set middle four bits 1100, one bit pair remains free.
    1f18:	80 7c       	andi	r24, 0xC0	; 192
    1f1a:	80 63       	ori	r24, 0x30	; 48
    1f1c:	22 c0       	rjmp	.+68     	; 0x1f62 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      case 1: // Top two bit pairs already filled.
        *bptr = (*bptr & 0xf0) | 0xc; // Preserve existing ms (2) bit-pairs, set bottom four bits 1100, write back full byte.
    1f1e:	80 7f       	andi	r24, 0xF0	; 240
    1f20:	8c 60       	ori	r24, 0x0C	; 12
    1f22:	80 83       	st	Z, r24
        *++bptr = (uint8_t) ~0U; // Initialise next byte for next incremental update.
    1f24:	f9 01       	movw	r30, r18
    1f26:	11 c0       	rjmp	.+34     	; 0x1f4a <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x56>
        break;
      default: // Top three bit pairs already filled.
        *bptr |= 3; // Preserve existing ms (3) bit-pairs, OR in leading 11 bits, write back full byte.
    1f28:	83 60       	ori	r24, 0x03	; 3
    1f2a:	13 c0       	rjmp	.+38     	; 0x1f52 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x5e>
        break;
      }
    }
  else // Appending 111000.
    {
    switch(bitPairsLeft)
    1f2c:	92 30       	cpi	r25, 0x02	; 2
    1f2e:	51 f0       	breq	.+20     	; 0x1f44 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x50>
    1f30:	93 30       	cpi	r25, 0x03	; 3
    1f32:	31 f0       	breq	.+12     	; 0x1f40 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x4c>
    1f34:	9f 01       	movw	r18, r30
    1f36:	2f 5f       	subi	r18, 0xFF	; 255
    1f38:	3f 4f       	sbci	r19, 0xFF	; 255
    1f3a:	91 30       	cpi	r25, 0x01	; 1
    1f3c:	71 f4       	brne	.+28     	; 0x1f5a <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x66>
    1f3e:	07 c0       	rjmp	.+14     	; 0x1f4e <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x5a>
      {
      case 3: // Empty target byte (should be 0xff currently).
        *bptr = 0xe0; // %11100000 Write back partial byte (msbits now 111000 and one bit pair remains free).
    1f40:	80 ee       	ldi	r24, 0xE0	; 224
    1f42:	0f c0       	rjmp	.+30     	; 0x1f62 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      case 2: // Top bit pair already filled.
        *bptr = (*bptr & 0xc0) | 0x38; // Preserve existing ms bit-pair, set lsbits to 111000, write back full byte.
    1f44:	80 7c       	andi	r24, 0xC0	; 192
    1f46:	88 63       	ori	r24, 0x38	; 56
    1f48:	81 93       	st	Z+, r24
        *++bptr = (uint8_t) ~0U; // Initialise next byte for next incremental update.
    1f4a:	8f ef       	ldi	r24, 0xFF	; 255
    1f4c:	0a c0       	rjmp	.+20     	; 0x1f62 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      case 1: // Top two bit pairs already filled.
        *bptr = (*bptr & 0xf0) | 0xe; // Preserve existing (2) ms bit-pairs, set bottom four bits to 1110, write back full byte.
    1f4e:	80 7f       	andi	r24, 0xF0	; 240
    1f50:	8e 60       	ori	r24, 0x0E	; 14
    1f52:	80 83       	st	Z, r24
        *++bptr = 0x3e; // %00111110 Write trailing 00 bits to next byte and indicate 3 bit-pairs free for next incremental update.
    1f54:	f9 01       	movw	r30, r18
    1f56:	8e e3       	ldi	r24, 0x3E	; 62
    1f58:	04 c0       	rjmp	.+8      	; 0x1f62 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      default: // Top three bit pairs already filled.
        *bptr |= 3; // Preserve existing ms (3) bit-pairs, OR in leading 11 bits, write back full byte.
    1f5a:	83 60       	ori	r24, 0x03	; 3
    1f5c:	80 83       	st	Z, r24
        *++bptr = 0x8d; // Write trailing 1000 bits to next byte and indicate 2 bit-pairs free for next incremental update.
    1f5e:	f9 01       	movw	r30, r18
    1f60:	8d e8       	ldi	r24, 0x8D	; 141
    1f62:	80 83       	st	Z, r24
        break;
      }
    }
  return(bptr);
  }
    1f64:	cf 01       	movw	r24, r30
    1f66:	08 95       	ret

00001f68 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>:

// Appends encoded byte in b msbit first plus trailing even parity bit (9 bits total)
// to the byte stream being created by FHT8VCreate200usBitStreamBptr.
static uint8_t *_FHT8VCreate200usAppendByteEP(uint8_t *bptr, const uint8_t b)
    1f68:	ef 92       	push	r14
    1f6a:	ff 92       	push	r15
    1f6c:	0f 93       	push	r16
    1f6e:	1f 93       	push	r17
    1f70:	cf 93       	push	r28
    1f72:	df 93       	push	r29
    1f74:	9c 01       	movw	r18, r24
    1f76:	16 2f       	mov	r17, r22
    1f78:	00 e8       	ldi	r16, 0x80	; 128
    1f7a:	c0 e0       	ldi	r28, 0x00	; 0
    1f7c:	d0 e0       	ldi	r29, 0x00	; 0
  {
  for(uint8_t mask = 0x80; mask != 0; mask >>= 1)
    { bptr = _FHT8VCreate200usAppendEncBit(bptr, 0 != (b & mask)); }
    1f7e:	e6 2e       	mov	r14, r22
    1f80:	ff 24       	eor	r15, r15
    1f82:	60 e0       	ldi	r22, 0x00	; 0
    1f84:	80 2f       	mov	r24, r16
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	8e 21       	and	r24, r14
    1f8a:	9f 21       	and	r25, r15
    1f8c:	89 2b       	or	r24, r25
    1f8e:	09 f0       	breq	.+2      	; 0x1f92 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)+0x2a>
    1f90:	61 e0       	ldi	r22, 0x01	; 1
    1f92:	c9 01       	movw	r24, r18
    1f94:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
    1f98:	9c 01       	movw	r18, r24

// Appends encoded byte in b msbit first plus trailing even parity bit (9 bits total)
// to the byte stream being created by FHT8VCreate200usBitStreamBptr.
static uint8_t *_FHT8VCreate200usAppendByteEP(uint8_t *bptr, const uint8_t b)
  {
  for(uint8_t mask = 0x80; mask != 0; mask >>= 1)
    1f9a:	06 95       	lsr	r16
    1f9c:	21 96       	adiw	r28, 0x01	; 1
    1f9e:	c8 30       	cpi	r28, 0x08	; 8
    1fa0:	d1 05       	cpc	r29, r1
    1fa2:	79 f7       	brne	.-34     	; 0x1f82 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)+0x1a>
    { bptr = _FHT8VCreate200usAppendEncBit(bptr, 0 != (b & mask)); }
  return(_FHT8VCreate200usAppendEncBit(bptr, (bool) parity_even_bit(b))); // Append even parity bit.
    1fa4:	01 2e       	mov	r0, r17
    1fa6:	12 95       	swap	r17
    1fa8:	10 25       	eor	r17, r0
    1faa:	01 2e       	mov	r0, r17
    1fac:	16 95       	lsr	r17
    1fae:	16 95       	lsr	r17
    1fb0:	10 25       	eor	r17, r0
    1fb2:	61 2f       	mov	r22, r17
    1fb4:	70 e0       	ldi	r23, 0x00	; 0
    1fb6:	6f 5f       	subi	r22, 0xFF	; 255
    1fb8:	7f 4f       	sbci	r23, 0xFF	; 255
    1fba:	76 95       	lsr	r23
    1fbc:	67 95       	ror	r22
    1fbe:	61 70       	andi	r22, 0x01	; 1
    1fc0:	c9 01       	movw	r24, r18
    1fc2:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
  }
    1fc6:	df 91       	pop	r29
    1fc8:	cf 91       	pop	r28
    1fca:	1f 91       	pop	r17
    1fcc:	0f 91       	pop	r16
    1fce:	ff 90       	pop	r15
    1fd0:	ef 90       	pop	r14
    1fd2:	08 95       	ret

00001fd4 <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>:
// On entry the populated FHT8V command struct is passed by pointer.
// On exit, the memory block starting at buffer contains the low-byte, msbit-first bit, 0xff-terminated TX sequence.
// The maximum and minimum possible encoded message sizes are 35 (all zero bytes) and 45 (all 0xff bytes) bytes long.
// Note that a buffer space of at least 46 bytes is needed to accommodate the longest-possible encoded message and terminator.
// Returns pointer to the terminating 0xff on exit.
uint8_t *FHT8VCreate200usBitStreamBptr(uint8_t *bptr, const fht8v_msg_t *command)
    1fd4:	ff 92       	push	r15
    1fd6:	0f 93       	push	r16
    1fd8:	1f 93       	push	r17
    1fda:	dc 01       	movw	r26, r24
    1fdc:	8b 01       	movw	r16, r22
  {
  // Generate FHT8V preamble.
  // First 12 x 0 bits of preamble, pre-encoded as 6 x 0xcc bytes.
  *bptr++ = 0xcc;
    1fde:	8c ec       	ldi	r24, 0xCC	; 204
    1fe0:	fd 01       	movw	r30, r26
    1fe2:	81 93       	st	Z+, r24
  *bptr++ = 0xcc;
    1fe4:	11 96       	adiw	r26, 0x01	; 1
    1fe6:	8c 93       	st	X, r24
    1fe8:	df 01       	movw	r26, r30
    1fea:	11 96       	adiw	r26, 0x01	; 1
  *bptr++ = 0xcc;
    1fec:	81 83       	std	Z+1, r24	; 0x01
    1fee:	fd 01       	movw	r30, r26
    1ff0:	31 96       	adiw	r30, 0x01	; 1
  *bptr++ = 0xcc;
    1ff2:	11 96       	adiw	r26, 0x01	; 1
    1ff4:	8c 93       	st	X, r24
    1ff6:	df 01       	movw	r26, r30
    1ff8:	11 96       	adiw	r26, 0x01	; 1
  *bptr++ = 0xcc;
    1ffa:	81 83       	std	Z+1, r24	; 0x01
    1ffc:	fd 01       	movw	r30, r26
    1ffe:	31 96       	adiw	r30, 0x01	; 1
  *bptr++ = 0xcc;
    2000:	11 96       	adiw	r26, 0x01	; 1
    2002:	8c 93       	st	X, r24
  *bptr = (uint8_t) ~0U; // Initialise for _FHT8VCreate200usAppendEncBit routine.
    2004:	ff 24       	eor	r15, r15
    2006:	fa 94       	dec	r15
    2008:	f1 82       	std	Z+1, r15	; 0x01
  // Push remaining 1 of preamble.
  bptr = _FHT8VCreate200usAppendEncBit(bptr, true); // Encode 1.
    200a:	cf 01       	movw	r24, r30
    200c:	01 96       	adiw	r24, 0x01	; 1
    200e:	61 e0       	ldi	r22, 0x01	; 1
    2010:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>

  // Generate body.
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->hc1);
    2014:	f8 01       	movw	r30, r16
    2016:	60 81       	ld	r22, Z
    2018:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->hc2);
    201c:	f8 01       	movw	r30, r16
    201e:	61 81       	ldd	r22, Z+1	; 0x01
    2020:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
#ifdef FHT8V_ADR_USED
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->address);
#else
  bptr = _FHT8VCreate200usAppendByteEP(bptr, 0); // Default/broadcast.  TODO: could possibly be further optimised to send 0 value more efficiently.
    2024:	60 e0       	ldi	r22, 0x00	; 0
    2026:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
#endif
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->command);
    202a:	f8 01       	movw	r30, r16
    202c:	62 81       	ldd	r22, Z+2	; 0x02
    202e:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->extension);
    2032:	f8 01       	movw	r30, r16
    2034:	63 81       	ldd	r22, Z+3	; 0x03
    2036:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
#ifdef FHT8V_ADR_USED
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + command->address + command->command + command->extension;
#else
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + command->command + command->extension;
#endif
  bptr = _FHT8VCreate200usAppendByteEP(bptr, checksum);
    203a:	f8 01       	movw	r30, r16
    203c:	60 81       	ld	r22, Z
    203e:	21 81       	ldd	r18, Z+1	; 0x01
    2040:	62 0f       	add	r22, r18
    2042:	64 5f       	subi	r22, 0xF4	; 244
    2044:	22 81       	ldd	r18, Z+2	; 0x02
    2046:	62 0f       	add	r22, r18
    2048:	23 81       	ldd	r18, Z+3	; 0x03
    204a:	62 0f       	add	r22, r18
    204c:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>

  // Generate trailer.
  // Append 0 bit for trailer.
  bptr = _FHT8VCreate200usAppendEncBit(bptr, false);
    2050:	60 e0       	ldi	r22, 0x00	; 0
    2052:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
  // Append extra 0 bits to ensure that final required bits are flushed out.
  bptr = _FHT8VCreate200usAppendEncBit(bptr, false);
    2056:	60 e0       	ldi	r22, 0x00	; 0
    2058:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
  bptr = _FHT8VCreate200usAppendEncBit(bptr, false);
    205c:	60 e0       	ldi	r22, 0x00	; 0
    205e:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
    2062:	fc 01       	movw	r30, r24
  *bptr = (uint8_t)0xff; // Terminate TX bytes.
    2064:	f0 82       	st	Z, r15
  return(bptr);
  }
    2066:	1f 91       	pop	r17
    2068:	0f 91       	pop	r16
    206a:	ff 90       	pop	r15
    206c:	08 95       	ret

0000206e <FHT8VGetHC1()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    206e:	f9 99       	sbic	0x1f, 1	; 31
    2070:	fe cf       	rjmp	.-4      	; 0x206e <FHT8VGetHC1()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2072:	80 e1       	ldi	r24, 0x10	; 16
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	92 bd       	out	0x22, r25	; 34
    2078:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    207a:	f8 9a       	sbi	0x1f, 0	; 31
    207c:	80 b5       	in	r24, 0x20	; 32
// Set (non-volatile) HC1 and HC2 for single/primary FHT8V wireless valve under control.
void FHT8VSetHC1(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC1, hc); }
void FHT8VSetHC2(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC2, hc); }

// Get (non-volatile) HC1 and HC2 for single/primary FHT8V wireless valve under control (will be 0xff until set).
uint8_t FHT8VGetHC1() { return(eeprom_read_byte((uint8_t*)EE_START_FHT8V_HC1)); }
    207e:	08 95       	ret

00002080 <FHT8VGetHC2()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2080:	f9 99       	sbic	0x1f, 1	; 31
    2082:	fe cf       	rjmp	.-4      	; 0x2080 <FHT8VGetHC2()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2084:	81 e1       	ldi	r24, 0x11	; 17
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	92 bd       	out	0x22, r25	; 34
    208a:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    208c:	f8 9a       	sbi	0x1f, 0	; 31
    208e:	80 b5       	in	r24, 0x20	; 32
uint8_t FHT8VGetHC2() { return(eeprom_read_byte((uint8_t*)EE_START_FHT8V_HC2)); }
    2090:	08 95       	ret

00002092 <localFHT8VTRVEnabled()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2092:	f9 99       	sbic	0x1f, 1	; 31
    2094:	fe cf       	rjmp	.-4      	; 0x2092 <localFHT8VTRVEnabled()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2096:	80 e1       	ldi	r24, 0x10	; 16
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	92 bd       	out	0x22, r25	; 34
    209c:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    209e:	f8 9a       	sbi	0x1f, 0	; 31
    20a0:	80 b5       	in	r24, 0x20	; 32

#ifndef localFHT8VTRVEnabled
// Returns TRV if valve/radiator is to be controlled by this unit.
// Usually the case, but may not be for (a) a hub or (b) a not-yet-configured unit.
// Returns false if house code parts are set to invalid or uninitialised values (>99).
bool localFHT8VTRVEnabled() { return(((FHT8VGetHC1() <= 99) && (FHT8VGetHC2() <= 99))); }
    20a2:	84 36       	cpi	r24, 0x64	; 100
    20a4:	10 f0       	brcs	.+4      	; 0x20aa <localFHT8VTRVEnabled()+0x18>
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	0c c0       	rjmp	.+24     	; 0x20c2 <localFHT8VTRVEnabled()+0x30>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    20aa:	f9 99       	sbic	0x1f, 1	; 31
    20ac:	fe cf       	rjmp	.-4      	; 0x20aa <localFHT8VTRVEnabled()+0x18>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    20ae:	81 e1       	ldi	r24, 0x11	; 17
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	92 bd       	out	0x22, r25	; 34
    20b4:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    20b6:	f8 9a       	sbi	0x1f, 0	; 31
    20b8:	80 b5       	in	r24, 0x20	; 32
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	84 36       	cpi	r24, 0x64	; 100
    20be:	08 f4       	brcc	.+2      	; 0x20c2 <localFHT8VTRVEnabled()+0x30>
    20c0:	91 e0       	ldi	r25, 0x01	; 1
    20c2:	89 2f       	mov	r24, r25
    20c4:	08 95       	ret

000020c6 <isSyncedWithFHT8V()>:
  }

// True once/while this node is synced with and controlling the target FHT8V valve; initially false.
static bool syncedWithFHT8V;
#ifndef IGNORE_FHT_SYNC
bool isSyncedWithFHT8V() { return(syncedWithFHT8V); }
    20c6:	80 91 8c 02 	lds	r24, 0x028C
    20ca:	08 95       	ret

000020cc <FHT8VisControlledValveOpen()>:
#endif


// True if FHT8V valve is believed to be open under instruction from this system; false if not in sync.
static bool FHT8V_isValveOpen;
bool getFHT8V_isValveOpen() { return(syncedWithFHT8V && FHT8V_isValveOpen); }
    20cc:	80 91 8c 02 	lds	r24, 0x028C
    20d0:	88 23       	and	r24, r24
    20d2:	21 f0       	breq	.+8      	; 0x20dc <FHT8VisControlledValveOpen()+0x10>
    20d4:	80 91 cb 02 	lds	r24, 0x02CB
    20d8:	81 11       	cpse	r24, r1
    20da:	81 e0       	ldi	r24, 0x01	; 1


// GLOBAL NOTION OF CONTROLLED FHT8V VALVE STATE PROVIDED HERE
// True iff the FHT8V valve(s) (if any) controlled by this unit are really open.
// This waits until at least the command to open the FHT8Vhas been sent.
bool FHT8VisControlledValveOpen() { return(getFHT8V_isValveOpen()); }
    20dc:	08 95       	ret

000020de <FHT8VSyncAndTXReset()>:
//   FHT8V_isValveOpen (bit, true if this node has last sent command to open valve)
//   syncStateFHT8V (byte, internal)
//   halfSecondsToNextFHT8VTX (byte).
void FHT8VSyncAndTXReset()
  {
  syncedWithFHT8V = false;
    20de:	10 92 8c 02 	sts	0x028C, r1
  syncStateFHT8V = 0;
    20e2:	10 92 8e 02 	sts	0x028E, r1
  halfSecondsToNextFHT8VTX = 0;
    20e6:	10 92 8d 02 	sts	0x028D, r1
  FHT8V_isValveOpen = false;
    20ea:	10 92 cb 02 	sts	0x02CB, r1
  }
    20ee:	08 95       	ret

000020f0 <FHT8VCallForHeatHeardGetAndClear()>:
  }

// Atomically returns and clears one housecode calling for heat heard since last call, or ~0 if none.
uint16_t FHT8VCallForHeatHeardGetAndClear()
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    20f0:	4f b7       	in	r20, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    20f2:	f8 94       	cli
    {
    const uint16_t result = lastCallForHeatHC;
    20f4:	20 91 3c 01 	lds	r18, 0x013C
    20f8:	30 91 3d 01 	lds	r19, 0x013D
    lastCallForHeatHC = ~0;
    20fc:	8f ef       	ldi	r24, 0xFF	; 255
    20fe:	9f ef       	ldi	r25, 0xFF	; 255
    2100:	90 93 3d 01 	sts	0x013D, r25
    2104:	80 93 3c 01 	sts	0x013C, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2108:	4f bf       	out	0x3f, r20	; 63
    return(result);
    }
  }
    210a:	c9 01       	movw	r24, r18
    210c:	08 95       	ret

0000210e <FHT8VLastRXErrGetAndClear()>:

// Atomically returns and clears last (FHT8V) RX error code, or 0 if none.
uint8_t FHT8VLastRXErrGetAndClear()
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    210e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2110:	f8 94       	cli
    {
    const uint8_t result = lastRXerrno;
    2112:	80 91 4b 02 	lds	r24, 0x024B
    lastRXerrno = 0;
    2116:	10 92 4b 02 	sts	0x024B, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    211a:	9f bf       	out	0x3f, r25	; 63
    return(result);
    }
  }
    211c:	08 95       	ret

0000211e <StopEavesdropOnFHT8V(bool)>:
// Stop listening out for remote TRVs calling for heat iff currently eavesdropping, else does nothing.
// Puts radio in standby mode.
// DOES NOT clear flags which indicate that a call for heat has been heard.
void StopEavesdropOnFHT8V(bool force)
  {
  if(!force && !eavesdropping) { return; }
    211e:	88 23       	and	r24, r24
    2120:	21 f4       	brne	.+8      	; 0x212a <StopEavesdropOnFHT8V(bool)+0xc>
    2122:	80 91 4c 02 	lds	r24, 0x024C
    2126:	88 23       	and	r24, r24
    2128:	21 f0       	breq	.+8      	; 0x2132 <StopEavesdropOnFHT8V(bool)+0x14>
  eavesdropping = false;
    212a:	10 92 4c 02 	sts	0x024C, r1
  RFM22ModeStandbyAndClearState();
    212e:	0e 94 52 22 	call	0x44a4	; 0x44a4 <RFM22ModeStandbyAndClearState()>
    2132:	08 95       	ret

00002134 <_SetupRFM22ToEavesdropOnFHT8V()>:
static void setLastRXErr(const uint8_t err) { ATOMIC_BLOCK (ATOMIC_RESTORESTATE) { lastRXerrno = err; } }


static void _SetupRFM22ToEavesdropOnFHT8V()
  {
  RFM22ModeStandbyAndClearState();
    2134:	0e 94 52 22 	call	0x44a4	; 0x44a4 <RFM22ModeStandbyAndClearState()>
  RFM22SetUpRX(MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE, true, true); // Set to RX longest-possible valid FS20 encoded frame.
    2138:	8e e2       	ldi	r24, 0x2E	; 46
    213a:	61 e0       	ldi	r22, 0x01	; 1
    213c:	41 e0       	ldi	r20, 0x01	; 1
    213e:	0e 94 30 21 	call	0x4260	; 0x4260 <RFM22SetUpRX(unsigned char, bool, bool)>
#error Board revision not defined.
#endif
#if V0p2_REV > 0
// TODO: hook into interrupts?
#endif
  }
    2142:	08 95       	ret

00002144 <SetupToEavesdropOnFHT8V(bool)>:

// Set up radio to listen for remote TRV nodes calling for heat iff not already eavesdropping, else does nothing.
// Only done if in central hub mode.
// May set up interrupts/handlers.
// Does NOT clear flags indicating receipt of call for heat for example.
bool SetupToEavesdropOnFHT8V(const bool force)
    2144:	0f 93       	push	r16
    2146:	1f 93       	push	r17
  {
  if(!force && eavesdropping) { return(false); } // Already eavesdropping.
    2148:	88 23       	and	r24, r24
    214a:	41 f4       	brne	.+16     	; 0x215c <SetupToEavesdropOnFHT8V(bool)+0x18>
    214c:	80 91 4c 02 	lds	r24, 0x024C
    2150:	88 23       	and	r24, r24
    2152:	21 f0       	breq	.+8      	; 0x215c <SetupToEavesdropOnFHT8V(bool)+0x18>
    2154:	80 e0       	ldi	r24, 0x00	; 0
  _SetupRFM22ToEavesdropOnFHT8V();
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("RX start");
#endif
  return(!wasEavesdropping);
  }
    2156:	1f 91       	pop	r17
    2158:	0f 91       	pop	r16
    215a:	08 95       	ret
// May set up interrupts/handlers.
// Does NOT clear flags indicating receipt of call for heat for example.
bool SetupToEavesdropOnFHT8V(const bool force)
  {
  if(!force && eavesdropping) { return(false); } // Already eavesdropping.
  const bool wasEavesdropping = eavesdropping;
    215c:	00 91 4c 02 	lds	r16, 0x024C
  eavesdropping = true;
    2160:	11 e0       	ldi	r17, 0x01	; 1
    2162:	10 93 4c 02 	sts	0x024C, r17
  _SetupRFM22ToEavesdropOnFHT8V();
    2166:	0e 94 9a 10 	call	0x2134	; 0x2134 <_SetupRFM22ToEavesdropOnFHT8V()>
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("RX start");
#endif
  return(!wasEavesdropping);
    216a:	80 2f       	mov	r24, r16
    216c:	81 27       	eor	r24, r17
    216e:	f3 cf       	rjmp	.-26     	; 0x2156 <SetupToEavesdropOnFHT8V(bool)+0x12>

00002170 <readOneBit(decode_state_t*)>:
  } decode_state_t;

// Decode bit pattern 1100 as 0, 111000 as 1.
// Returns 1 or 0 for the bit decoded, else marks the state as failed.
// Reads two bits at a time, MSB to LSB, advancing the byte pointer if necessary.
static uint8_t readOneBit(decode_state_t *const state)
    2170:	cf 93       	push	r28
    2172:	df 93       	push	r29
    2174:	ec 01       	movw	r28, r24
  {
  if(state->bitStream > state->lastByte) { state->failed = true; } // Stop if off the buffer end.
    2176:	28 81       	ld	r18, Y
    2178:	39 81       	ldd	r19, Y+1	; 0x01
    217a:	8a 81       	ldd	r24, Y+2	; 0x02
    217c:	9b 81       	ldd	r25, Y+3	; 0x03
    217e:	82 17       	cp	r24, r18
    2180:	93 07       	cpc	r25, r19
    2182:	10 f4       	brcc	.+4      	; 0x2188 <readOneBit(decode_state_t*)+0x18>
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	8d 83       	std	Y+5, r24	; 0x05
  if(state->failed) { return(0); } // Refuse to do anything further once decoding has failed.
    2188:	8d 81       	ldd	r24, Y+5	; 0x05
    218a:	88 23       	and	r24, r24
    218c:	09 f0       	breq	.+2      	; 0x2190 <readOneBit(decode_state_t*)+0x20>
    218e:	7e c0       	rjmp	.+252    	; 0x228c <readOneBit(decode_state_t*)+0x11c>

  if(0 == state->mask) { state->mask = 0xc0; } // Special treatment of 0 as equivalent to 0xc0 on entry.
    2190:	8c 81       	ldd	r24, Y+4	; 0x04
    2192:	88 23       	and	r24, r24
    2194:	11 f4       	brne	.+4      	; 0x219a <readOneBit(decode_state_t*)+0x2a>
    2196:	80 ec       	ldi	r24, 0xC0	; 192
    2198:	8c 83       	std	Y+4, r24	; 0x04
#if defined(DEBUG)
  if((state->mask != 0xc0) && (state->mask != 0x30) && (state->mask != 0xc) && (state->mask != 3)) { panic(); }
    219a:	8c 81       	ldd	r24, Y+4	; 0x04
    219c:	80 3c       	cpi	r24, 0xC0	; 192
    219e:	41 f0       	breq	.+16     	; 0x21b0 <readOneBit(decode_state_t*)+0x40>
    21a0:	80 33       	cpi	r24, 0x30	; 48
    21a2:	31 f0       	breq	.+12     	; 0x21b0 <readOneBit(decode_state_t*)+0x40>
    21a4:	8c 30       	cpi	r24, 0x0C	; 12
    21a6:	21 f0       	breq	.+8      	; 0x21b0 <readOneBit(decode_state_t*)+0x40>
    21a8:	83 30       	cpi	r24, 0x03	; 3
    21aa:	11 f0       	breq	.+4      	; 0x21b0 <readOneBit(decode_state_t*)+0x40>
    21ac:	0e 94 97 2e 	call	0x5d2e	; 0x5d2e <panic()>
#endif

  // First two bits read must be 11.
  if(state->mask != (state->mask & *(state->bitStream)))
    21b0:	8c 81       	ldd	r24, Y+4	; 0x04
    21b2:	28 2f       	mov	r18, r24
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	e8 81       	ld	r30, Y
    21b8:	f9 81       	ldd	r31, Y+1	; 0x01
    21ba:	80 81       	ld	r24, Z
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	82 23       	and	r24, r18
    21c0:	93 23       	and	r25, r19
    21c2:	28 17       	cp	r18, r24
    21c4:	39 07       	cpc	r19, r25
    21c6:	09 f0       	breq	.+2      	; 0x21ca <readOneBit(decode_state_t*)+0x5a>
    21c8:	51 c0       	rjmp	.+162    	; 0x226c <readOneBit(decode_state_t*)+0xfc>
#endif
    state->failed = true; return(0);
    }

  // Advance the mask; if the mask becomes 0 (then 0xc0 again) then advance the byte pointer.
  if(0 == ((state->mask) >>= 2))
    21ca:	c9 01       	movw	r24, r18
    21cc:	95 95       	asr	r25
    21ce:	87 95       	ror	r24
    21d0:	95 95       	asr	r25
    21d2:	87 95       	ror	r24
    21d4:	8c 83       	std	Y+4, r24	; 0x04
    21d6:	88 23       	and	r24, r24
    21d8:	61 f4       	brne	.+24     	; 0x21f2 <readOneBit(decode_state_t*)+0x82>
    {
    state->mask = 0xc0;
    21da:	80 ec       	ldi	r24, 0xC0	; 192
    21dc:	8c 83       	std	Y+4, r24	; 0x04
    // If end of stream is encountered this is an error since more bits need to be read.
    if(++(state->bitStream) > state->lastByte) { state->failed = true; return(0); }
    21de:	9f 01       	movw	r18, r30
    21e0:	2f 5f       	subi	r18, 0xFF	; 255
    21e2:	3f 4f       	sbci	r19, 0xFF	; 255
    21e4:	39 83       	std	Y+1, r19	; 0x01
    21e6:	28 83       	st	Y, r18
    21e8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ea:	9b 81       	ldd	r25, Y+3	; 0x03
    21ec:	82 17       	cp	r24, r18
    21ee:	93 07       	cpc	r25, r19
    21f0:	e8 f1       	brcs	.+122    	; 0x226c <readOneBit(decode_state_t*)+0xfc>
    }

  // Next two bits can be 00 to decode a zero,
  // or 10 (followed by 00) to decode a one.
  const uint8_t secondPair = (state->mask & *(state->bitStream));
    21f2:	8c 81       	ldd	r24, Y+4	; 0x04
  switch(secondPair)
    21f4:	e8 81       	ld	r30, Y
    21f6:	f9 81       	ldd	r31, Y+1	; 0x01
    21f8:	20 81       	ld	r18, Z
    21fa:	28 23       	and	r18, r24
    21fc:	28 30       	cpi	r18, 0x08	; 8
    21fe:	c1 f0       	breq	.+48     	; 0x2230 <readOneBit(decode_state_t*)+0xc0>
    2200:	29 30       	cpi	r18, 0x09	; 9
    2202:	28 f4       	brcc	.+10     	; 0x220e <readOneBit(decode_state_t*)+0x9e>
    2204:	22 23       	and	r18, r18
    2206:	41 f0       	breq	.+16     	; 0x2218 <readOneBit(decode_state_t*)+0xa8>
    2208:	22 30       	cpi	r18, 0x02	; 2
    220a:	81 f5       	brne	.+96     	; 0x226c <readOneBit(decode_state_t*)+0xfc>
    220c:	11 c0       	rjmp	.+34     	; 0x2230 <readOneBit(decode_state_t*)+0xc0>
    220e:	20 32       	cpi	r18, 0x20	; 32
    2210:	79 f0       	breq	.+30     	; 0x2230 <readOneBit(decode_state_t*)+0xc0>
    2212:	20 38       	cpi	r18, 0x80	; 128
    2214:	59 f5       	brne	.+86     	; 0x226c <readOneBit(decode_state_t*)+0xfc>
    2216:	0c c0       	rjmp	.+24     	; 0x2230 <readOneBit(decode_state_t*)+0xc0>
      {
#if 0 && defined(DEBUG)
      DEBUG_SERIAL_PRINTLN_FLASHSTRING("decoded 0");
#endif
      // Advance the mask; if the mask becomes 0 then advance the byte pointer.
      if(0 == ((state->mask) >>= 2)) { ++(state->bitStream); }
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	95 95       	asr	r25
    221c:	87 95       	ror	r24
    221e:	95 95       	asr	r25
    2220:	87 95       	ror	r24
    2222:	8c 83       	std	Y+4, r24	; 0x04
    2224:	88 23       	and	r24, r24
    2226:	91 f5       	brne	.+100    	; 0x228c <readOneBit(decode_state_t*)+0x11c>
    2228:	31 96       	adiw	r30, 0x01	; 1
    222a:	f9 83       	std	Y+1, r31	; 0x01
    222c:	e8 83       	st	Y, r30
    222e:	2f c0       	rjmp	.+94     	; 0x228e <readOneBit(decode_state_t*)+0x11e>
      state->failed = true; return(0);
      }
    }

  // Advance the mask; if the mask becomes 0 (then 0xc0 again) then advance the byte pointer.
  if(0 == ((state->mask) >>= 2))
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	95 95       	asr	r25
    2234:	87 95       	ror	r24
    2236:	95 95       	asr	r25
    2238:	87 95       	ror	r24
    223a:	8c 83       	std	Y+4, r24	; 0x04
    223c:	88 23       	and	r24, r24
    223e:	61 f4       	brne	.+24     	; 0x2258 <readOneBit(decode_state_t*)+0xe8>
    {
    state->mask = 0xc0;
    2240:	80 ec       	ldi	r24, 0xC0	; 192
    2242:	8c 83       	std	Y+4, r24	; 0x04
    // If end of stream is encountered this is an error since more bits need to be read.
    if(++(state->bitStream) > state->lastByte) { state->failed = true; return(0); }
    2244:	88 81       	ld	r24, Y
    2246:	99 81       	ldd	r25, Y+1	; 0x01
    2248:	01 96       	adiw	r24, 0x01	; 1
    224a:	99 83       	std	Y+1, r25	; 0x01
    224c:	88 83       	st	Y, r24
    224e:	2a 81       	ldd	r18, Y+2	; 0x02
    2250:	3b 81       	ldd	r19, Y+3	; 0x03
    2252:	28 17       	cp	r18, r24
    2254:	39 07       	cpc	r19, r25
    2256:	50 f0       	brcs	.+20     	; 0x226c <readOneBit(decode_state_t*)+0xfc>
    }

  // Third pair of bits must be 00.
  if(0 != (state->mask & *(state->bitStream)))
    2258:	2c 81       	ldd	r18, Y+4	; 0x04
    225a:	e8 81       	ld	r30, Y
    225c:	f9 81       	ldd	r31, Y+1	; 0x01
    225e:	80 81       	ld	r24, Z
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	82 23       	and	r24, r18
    2266:	93 23       	and	r25, r19
    2268:	89 2b       	or	r24, r25
    226a:	19 f0       	breq	.+6      	; 0x2272 <readOneBit(decode_state_t*)+0x102>
     {
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("trailing 00 corrupt");
#endif
    state->failed = true; return(0);
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	8d 83       	std	Y+5, r24	; 0x05
    2270:	0d c0       	rjmp	.+26     	; 0x228c <readOneBit(decode_state_t*)+0x11c>
    }    

  // Advance the mask; if the mask becomes 0 then advance the byte pointer.
  if(0 == ((state->mask) >>= 2)) { ++(state->bitStream); }
    2272:	c9 01       	movw	r24, r18
    2274:	95 95       	asr	r25
    2276:	87 95       	ror	r24
    2278:	95 95       	asr	r25
    227a:	87 95       	ror	r24
    227c:	8c 83       	std	Y+4, r24	; 0x04
    227e:	88 23       	and	r24, r24
    2280:	19 f4       	brne	.+6      	; 0x2288 <readOneBit(decode_state_t*)+0x118>
    2282:	31 96       	adiw	r30, 0x01	; 1
    2284:	f9 83       	std	Y+1, r31	; 0x01
    2286:	e8 83       	st	Y, r30
    2288:	81 e0       	ldi	r24, 0x01	; 1
    228a:	01 c0       	rjmp	.+2      	; 0x228e <readOneBit(decode_state_t*)+0x11e>
    228c:	80 e0       	ldi	r24, 0x00	; 0
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("decoded 1");
#endif
  return(1); // Decoded a 1.
  }
    228e:	df 91       	pop	r29
    2290:	cf 91       	pop	r28
    2292:	08 95       	ret

00002294 <readOneByteWithParity(decode_state_t*)>:

// Decodes a series of encoded bits plus parity (and checks the parity, failing if wrong).
// Returns the byte decoded, else marks the state as failed.
static uint8_t readOneByteWithParity(decode_state_t *const state)
    2294:	ef 92       	push	r14
    2296:	ff 92       	push	r15
    2298:	0f 93       	push	r16
    229a:	1f 93       	push	r17
    229c:	cf 93       	push	r28
    229e:	df 93       	push	r29
    22a0:	7c 01       	movw	r14, r24
  {
  if(state->failed) { return(0); } // Refuse to do anything further once decoding has failed.
    22a2:	fc 01       	movw	r30, r24
    22a4:	85 81       	ldd	r24, Z+5	; 0x05
    22a6:	88 23       	and	r24, r24
    22a8:	11 f0       	breq	.+4      	; 0x22ae <readOneByteWithParity(decode_state_t*)+0x1a>
    22aa:	10 e0       	ldi	r17, 0x00	; 0
    22ac:	1b c0       	rjmp	.+54     	; 0x22e4 <readOneByteWithParity(decode_state_t*)+0x50>

  // Read first bit specially...
  const uint8_t b7 = readOneBit(state); 
    22ae:	c7 01       	movw	r24, r14
    22b0:	0e 94 b8 10 	call	0x2170	; 0x2170 <readOneBit(decode_state_t*)>
    22b4:	18 2f       	mov	r17, r24
    22b6:	08 2f       	mov	r16, r24
    22b8:	c7 e0       	ldi	r28, 0x07	; 7
    22ba:	d0 e0       	ldi	r29, 0x00	; 0
    22bc:	06 c0       	rjmp	.+12     	; 0x22ca <readOneByteWithParity(decode_state_t*)+0x36>
  uint8_t result = b7;
  uint8_t parity = b7;
  // Then remaining 7 bits...
  for(int i = 7; --i >= 0; )
    {
    const uint8_t bit = readOneBit(state);
    22be:	c7 01       	movw	r24, r14
    22c0:	0e 94 b8 10 	call	0x2170	; 0x2170 <readOneBit(decode_state_t*)>
    parity ^= bit;
    22c4:	08 27       	eor	r16, r24
    result = (result << 1) | bit;
    22c6:	11 0f       	add	r17, r17
    22c8:	18 2b       	or	r17, r24
  // Read first bit specially...
  const uint8_t b7 = readOneBit(state); 
  uint8_t result = b7;
  uint8_t parity = b7;
  // Then remaining 7 bits...
  for(int i = 7; --i >= 0; )
    22ca:	21 97       	sbiw	r28, 0x01	; 1
    22cc:	ff ef       	ldi	r31, 0xFF	; 255
    22ce:	cf 3f       	cpi	r28, 0xFF	; 255
    22d0:	df 07       	cpc	r29, r31
    22d2:	a9 f7       	brne	.-22     	; 0x22be <readOneByteWithParity(decode_state_t*)+0x2a>
    const uint8_t bit = readOneBit(state);
    parity ^= bit;
    result = (result << 1) | bit;
    }
  // Then get parity bit and check.
  if(parity != readOneBit(state))
    22d4:	c7 01       	movw	r24, r14
    22d6:	0e 94 b8 10 	call	0x2170	; 0x2170 <readOneBit(decode_state_t*)>
    22da:	08 17       	cp	r16, r24
    22dc:	19 f0       	breq	.+6      	; 0x22e4 <readOneByteWithParity(decode_state_t*)+0x50>
    {
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("bad parity");
#endif
    state->failed = true;
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	f7 01       	movw	r30, r14
    22e2:	85 83       	std	Z+5, r24	; 0x05
    }
  return(result);
  }
    22e4:	81 2f       	mov	r24, r17
    22e6:	df 91       	pop	r29
    22e8:	cf 91       	pop	r28
    22ea:	1f 91       	pop	r17
    22ec:	0f 91       	pop	r16
    22ee:	ff 90       	pop	r15
    22f0:	ef 90       	pop	r14
    22f2:	08 95       	ret

000022f4 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)>:

// Decode raw bitstream into non-null command structure passed in; returns true if successful.
// Will return true if OK, else false if anything obviously invalid is detected such as failing parity or checksum.
// Finds and discards leading encoded 1 and trailing 0.
// Returns NULL on failure, else pointer to next full byte after last decoded.
uint8_t const *FHT8VDecodeBitStream(uint8_t const *bitStream, uint8_t const *lastByte, fht8v_msg_t *command)
    22f4:	df 92       	push	r13
    22f6:	ef 92       	push	r14
    22f8:	ff 92       	push	r15
    22fa:	0f 93       	push	r16
    22fc:	1f 93       	push	r17
    22fe:	df 93       	push	r29
    2300:	cf 93       	push	r28
    2302:	00 d0       	rcall	.+0      	; 0x2304 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x10>
    2304:	00 d0       	rcall	.+0      	; 0x2306 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x12>
    2306:	00 d0       	rcall	.+0      	; 0x2308 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x14>
    2308:	cd b7       	in	r28, 0x3d	; 61
    230a:	de b7       	in	r29, 0x3e	; 62
    230c:	8a 01       	movw	r16, r20
  {
  decode_state_t state;
  state.bitStream = bitStream;
    230e:	9a 83       	std	Y+2, r25	; 0x02
    2310:	89 83       	std	Y+1, r24	; 0x01
  state.lastByte = lastByte;
    2312:	7c 83       	std	Y+4, r23	; 0x04
    2314:	6b 83       	std	Y+3, r22	; 0x03
  state.mask = 0;
    2316:	1d 82       	std	Y+5, r1	; 0x05
  state.failed = false;
    2318:	1e 82       	std	Y+6, r1	; 0x06
      }
  DEBUG_SERIAL_PRINTLN();
#endif

  // Find and absorb the leading encoded '1', else quit if not found by end of stream.
  while(0 == readOneBit(&state)) { if(state.failed) { return(NULL); } }
    231a:	7e 01       	movw	r14, r28
    231c:	08 94       	sec
    231e:	e1 1c       	adc	r14, r1
    2320:	f1 1c       	adc	r15, r1
    2322:	03 c0       	rjmp	.+6      	; 0x232a <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x36>
    2324:	8e 81       	ldd	r24, Y+6	; 0x06
    2326:	88 23       	and	r24, r24
    2328:	e9 f5       	brne	.+122    	; 0x23a4 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb0>
    232a:	c7 01       	movw	r24, r14
    232c:	0e 94 b8 10 	call	0x2170	; 0x2170 <readOneBit(decode_state_t*)>
    2330:	88 23       	and	r24, r24
    2332:	c1 f3       	breq	.-16     	; 0x2324 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x30>
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("Read leading 1");
#endif

  command->hc1 = readOneByteWithParity(&state);
    2334:	c7 01       	movw	r24, r14
    2336:	0e 94 4a 11 	call	0x2294	; 0x2294 <readOneByteWithParity(decode_state_t*)>
    233a:	f8 01       	movw	r30, r16
    233c:	80 83       	st	Z, r24
  command->hc2 = readOneByteWithParity(&state);
    233e:	c7 01       	movw	r24, r14
    2340:	0e 94 4a 11 	call	0x2294	; 0x2294 <readOneByteWithParity(decode_state_t*)>
    2344:	f8 01       	movw	r30, r16
    2346:	81 83       	std	Z+1, r24	; 0x01
#ifdef FHT8V_ADR_USED
  command->address = readOneByteWithParity(&state);
#else
  const uint8_t address = readOneByteWithParity(&state);
    2348:	c7 01       	movw	r24, r14
    234a:	0e 94 4a 11 	call	0x2294	; 0x2294 <readOneByteWithParity(decode_state_t*)>
    234e:	d8 2e       	mov	r13, r24
#endif
  command->command = readOneByteWithParity(&state);
    2350:	c7 01       	movw	r24, r14
    2352:	0e 94 4a 11 	call	0x2294	; 0x2294 <readOneByteWithParity(decode_state_t*)>
    2356:	f8 01       	movw	r30, r16
    2358:	82 83       	std	Z+2, r24	; 0x02
  command->extension = readOneByteWithParity(&state);
    235a:	c7 01       	movw	r24, r14
    235c:	0e 94 4a 11 	call	0x2294	; 0x2294 <readOneByteWithParity(decode_state_t*)>
    2360:	f8 01       	movw	r30, r16
    2362:	83 83       	std	Z+3, r24	; 0x03
  const uint8_t checksumRead = readOneByteWithParity(&state);
    2364:	c7 01       	movw	r24, r14
    2366:	0e 94 4a 11 	call	0x2294	; 0x2294 <readOneByteWithParity(decode_state_t*)>
    236a:	28 2f       	mov	r18, r24
  if(state.failed)
    236c:	8e 81       	ldd	r24, Y+6	; 0x06
    236e:	88 23       	and	r24, r24
    2370:	c9 f4       	brne	.+50     	; 0x23a4 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb0>
#ifdef FHT8V_ADR_USED
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + command->address + command->command + command->extension;
#else
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + address + command->command + command->extension;
#endif
  if(checksum != checksumRead)
    2372:	f8 01       	movw	r30, r16
    2374:	80 81       	ld	r24, Z
    2376:	91 81       	ldd	r25, Z+1	; 0x01
    2378:	89 0f       	add	r24, r25
    237a:	84 5f       	subi	r24, 0xF4	; 244
    237c:	92 81       	ldd	r25, Z+2	; 0x02
    237e:	89 0f       	add	r24, r25
    2380:	93 81       	ldd	r25, Z+3	; 0x03
    2382:	89 0f       	add	r24, r25
    2384:	8d 0d       	add	r24, r13
    2386:	82 17       	cp	r24, r18
    2388:	69 f4       	brne	.+26     	; 0x23a4 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb0>
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("Checksum OK");
    }
#endif

  // Check the trailing encoded '0'.
  if(0 != readOneBit(&state))
    238a:	c7 01       	movw	r24, r14
    238c:	0e 94 b8 10 	call	0x2170	; 0x2170 <readOneBit(decode_state_t*)>
    2390:	88 23       	and	r24, r24
    2392:	41 f4       	brne	.+16     	; 0x23a4 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb0>
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("Read of trailing 0 failed");
#endif
    state.failed = true; return(NULL);
    }
  if(state.failed) { return(NULL); }
    2394:	8e 81       	ldd	r24, Y+6	; 0x06
    2396:	88 23       	and	r24, r24
    2398:	29 f4       	brne	.+10     	; 0x23a4 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb0>
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("Read entire message");
#endif
  // Return pointer to where any trailing data may be
  // in next byte beyond end of FHT8V frame.
  return(state.bitStream + 1);
    239a:	29 81       	ldd	r18, Y+1	; 0x01
    239c:	3a 81       	ldd	r19, Y+2	; 0x02
    239e:	2f 5f       	subi	r18, 0xFF	; 255
    23a0:	3f 4f       	sbci	r19, 0xFF	; 255
    23a2:	02 c0       	rjmp	.+4      	; 0x23a8 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb4>
    23a4:	20 e0       	ldi	r18, 0x00	; 0
    23a6:	30 e0       	ldi	r19, 0x00	; 0
  }
    23a8:	c9 01       	movw	r24, r18
    23aa:	26 96       	adiw	r28, 0x06	; 6
    23ac:	0f b6       	in	r0, 0x3f	; 63
    23ae:	f8 94       	cli
    23b0:	de bf       	out	0x3e, r29	; 62
    23b2:	0f be       	out	0x3f, r0	; 63
    23b4:	cd bf       	out	0x3d, r28	; 61
    23b6:	cf 91       	pop	r28
    23b8:	df 91       	pop	r29
    23ba:	1f 91       	pop	r17
    23bc:	0f 91       	pop	r16
    23be:	ff 90       	pop	r15
    23c0:	ef 90       	pop	r14
    23c2:	df 90       	pop	r13
    23c4:	08 95       	ret

000023c6 <FHT8VCallForHeatPoll()>:
// If used instead of an interrupt then should probably called at least about once every 100ms.
// Returns true if any useful activity/progress was detected by this call (not necessarily a full valid call-for-heat).
// Upon receipt of a valid call-for-heat this comes out of eavesdropping mode to save energy.
// If a problem is encountered this restarts the eavesdropping process.
// Does not block nor take significant time.
bool FHT8VCallForHeatPoll()
    23c6:	ef 92       	push	r14
    23c8:	ff 92       	push	r15
    23ca:	0f 93       	push	r16
    23cc:	1f 93       	push	r17
    23ce:	df 93       	push	r29
    23d0:	cf 93       	push	r28
    23d2:	cd b7       	in	r28, 0x3d	; 61
    23d4:	de b7       	in	r29, 0x3e	; 62
    23d6:	2d 97       	sbiw	r28, 0x0d	; 13
    23d8:	0f b6       	in	r0, 0x3f	; 63
    23da:	f8 94       	cli
    23dc:	de bf       	out	0x3e, r29	; 62
    23de:	0f be       	out	0x3f, r0	; 63
    23e0:	cd bf       	out	0x3d, r28	; 61
  {
  // Do nothing unless already in eavesdropping mode.
  if(!eavesdropping) { return(false); }
    23e2:	80 91 4c 02 	lds	r24, 0x024C
    23e6:	88 23       	and	r24, r24
    23e8:	09 f4       	brne	.+2      	; 0x23ec <FHT8VCallForHeatPoll()+0x26>
    23ea:	0b c1       	rjmp	.+534    	; 0x2602 <FHT8VCallForHeatPoll()+0x23c>
//  if(FHT8VCallForHeatHeard()) { return(false); }
//#endif

#if defined(PIN_RFM_NIRQ)
  // If nIRQ line is available then abort if it is not active (and thus spare the SPI bus).
  if(fastDigitalRead(PIN_RFM_NIRQ) != LOW) { return(false); }
    23ec:	19 99       	sbic	0x03, 1	; 3
    23ee:	09 c1       	rjmp	.+530    	; 0x2602 <FHT8VCallForHeatPoll()+0x23c>
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("RX IRQ");
#endif
#endif

  const uint16_t status = RFM22ReadStatusBoth(); // reg1:reg2, on V0.08 PICAXE tempB2:SPI_DATAB.
    23f0:	0e 94 2d 22 	call	0x445a	; 0x445a <RFM22ReadStatusBoth()>
    23f4:	8c 01       	movw	r16, r24

  if(status & 0x1000) // Received frame.
    23f6:	94 ff       	sbrs	r25, 4
    23f8:	ee c0       	rjmp	.+476    	; 0x25d6 <FHT8VCallForHeatPoll()+0x210>
    {
// Ensure that data from a previous frame is not trivially re-read by clearing the buffer explicitly.
//    for(uint8_t *p = FHT8VRXHubArea + FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE; --p >= FHT8VRXHubArea; )
//      { *p = 0; }
    memset(FHT8VRXHubArea, 0xff, sizeof(FHT8VRXHubArea));
    23fa:	8d e4       	ldi	r24, 0x4D	; 77
    23fc:	92 e0       	ldi	r25, 0x02	; 2
    23fe:	6f ef       	ldi	r22, 0xFF	; 255
    2400:	70 e0       	ldi	r23, 0x00	; 0
    2402:	4e e3       	ldi	r20, 0x3E	; 62
    2404:	50 e0       	ldi	r21, 0x00	; 0
    2406:	0e 94 a0 03 	call	0x740	; 0x740 <memset>
    // Attempt to read the entire frame.
    RFM22RXFIFO(FHT8VRXHubArea, sizeof(FHT8VRXHubArea));
    240a:	8d e4       	ldi	r24, 0x4D	; 77
    240c:	92 e0       	ldi	r25, 0x02	; 2
    240e:	6e e3       	ldi	r22, 0x3E	; 62
    2410:	0e 94 c8 20 	call	0x4190	; 0x4190 <RFM22RXFIFO(unsigned char*, unsigned char)>
    2414:	20 e0       	ldi	r18, 0x00	; 0
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	82 2f       	mov	r24, r18
    uint8_t pos; // Current byte position in RX buffer...
    // Validate FHT8V premable (zeros encoded as up to 6x 0xcc bytes), else abort/restart.
    // Insist on at least a couple of bytes of valid preamble being present.
    for(pos = 0; pos < 6; ++pos)
      {
      const uint8_t b = FHT8VRXHubArea[pos];
    241a:	f9 01       	movw	r30, r18
    241c:	e3 5b       	subi	r30, 0xB3	; 179
    241e:	fd 4f       	sbci	r31, 0xFD	; 253
    2420:	e0 81       	ld	r30, Z
      if(0xcc != b)
    2422:	ec 3c       	cpi	r30, 0xCC	; 204
    2424:	09 f4       	brne	.+2      	; 0x2428 <FHT8VCallForHeatPoll()+0x62>
    2426:	44 c0       	rjmp	.+136    	; 0x24b0 <FHT8VCallForHeatPoll()+0xea>
        {
        if(MSG_JSON_LEADING_CHAR == b)
    2428:	eb 37       	cpi	r30, 0x7B	; 123
    242a:	a1 f4       	brne	.+40     	; 0x2454 <FHT8VCallForHeatPoll()+0x8e>
          {
          if(adjustJSONMsgForRXAndCheckCRC((char *)(FHT8VRXHubArea + pos), sizeof(FHT8VRXHubArea)-pos) > 0)
    242c:	02 2f       	mov	r16, r18
    242e:	10 e0       	ldi	r17, 0x00	; 0
    2430:	03 5b       	subi	r16, 0xB3	; 179
    2432:	1d 4f       	sbci	r17, 0xFD	; 253
    2434:	6e e3       	ldi	r22, 0x3E	; 62
    2436:	62 1b       	sub	r22, r18
    2438:	c8 01       	movw	r24, r16
    243a:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)>
    243e:	18 16       	cp	r1, r24
    2440:	2c f4       	brge	.+10     	; 0x244c <FHT8VCallForHeatPoll()+0x86>
            {
            recordJSONStats(false, (const char *)(FHT8VRXHubArea + pos));
    2442:	80 e0       	ldi	r24, 0x00	; 0
    2444:	b8 01       	movw	r22, r16
    2446:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <recordJSONStats(bool, char const*)>
    244a:	be c0       	rjmp	.+380    	; 0x25c8 <FHT8VCallForHeatPoll()+0x202>
// Useful to assess the noise enviromentment.
static volatile uint8_t lastRXerrno;

// Atomically returns and clears last (FHT8V) RX error code, or 0 if none.
// Set with such codes as FHT8VRXErr_GENERIC; never set to zero.
static void setLastRXErr(const uint8_t err) { ATOMIC_BLOCK (ATOMIC_RESTORESTATE) { lastRXerrno = err; } }
    244c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    244e:	f8 94       	cli
    2450:	85 e0       	ldi	r24, 0x05	; 5
    2452:	d2 c0       	rjmp	.+420    	; 0x25f8 <FHT8VCallForHeatPoll()+0x232>
#endif
          setLastRXErr(FHT8VRXErr_BAD_RX_STATSFRAME);
          _SetupRFM22ToEavesdropOnFHT8V(); // Reset/restart RX.
          return(false); // Didn't look like valid JSON.
          }
        else if(MESSAGING_FULL_STATS_FLAGS_HEADER_MSBS == (b & MESSAGING_FULL_STATS_FLAGS_HEADER_MASK))
    2454:	e0 7e       	andi	r30, 0xE0	; 224
    2456:	e0 36       	cpi	r30, 0x60	; 96
    2458:	d1 f4       	brne	.+52     	; 0x248e <FHT8VCallForHeatPoll()+0xc8>
          {
          // May be binary stats frame, so attempt to decode...
          FullStatsMessageCore_t content;
          // (TODO: should reject non-secure messages when expecting secure ones...)
          const uint8_t *msg = decodeFullStatsMessageCore(FHT8VRXHubArea, sizeof(FHT8VRXHubArea)-pos, stTXalwaysAll, false, &content);
    245a:	6e e3       	ldi	r22, 0x3E	; 62
    245c:	62 1b       	sub	r22, r18
    245e:	77 e0       	ldi	r23, 0x07	; 7
    2460:	e7 2e       	mov	r14, r23
    2462:	f1 2c       	mov	r15, r1
    2464:	ec 0e       	add	r14, r28
    2466:	fd 1e       	adc	r15, r29
    2468:	8d e4       	ldi	r24, 0x4D	; 77
    246a:	92 e0       	ldi	r25, 0x02	; 2
    246c:	40 e0       	ldi	r20, 0x00	; 0
    246e:	50 e0       	ldi	r21, 0x00	; 0
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	87 01       	movw	r16, r14
    2474:	0e 94 55 1a 	call	0x34aa	; 0x34aa <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)>
          if(NULL != msg)
    2478:	89 2b       	or	r24, r25
    247a:	09 f4       	brne	.+2      	; 0x247e <FHT8VCallForHeatPoll()+0xb8>
    247c:	c0 c0       	rjmp	.+384    	; 0x25fe <FHT8VCallForHeatPoll()+0x238>
             {
             if(content.containsID)
    247e:	8f 81       	ldd	r24, Y+7	; 0x07
    2480:	80 ff       	sbrs	r24, 0
    2482:	a2 c0       	rjmp	.+324    	; 0x25c8 <FHT8VCallForHeatPoll()+0x202>
               DEBUG_SERIAL_PRINTFMT(content.id0, HEX);
               DEBUG_SERIAL_PRINT(' ');
               DEBUG_SERIAL_PRINTFMT(content.id1, HEX);
               DEBUG_SERIAL_PRINTLN();
#endif
               recordCoreStats(false, &content);
    2484:	80 e0       	ldi	r24, 0x00	; 0
    2486:	b7 01       	movw	r22, r14
    2488:	0e 94 8c 1b 	call	0x3718	; 0x3718 <recordCoreStats(bool, FullStatsMessageCore const*)>
    248c:	9d c0       	rjmp	.+314    	; 0x25c8 <FHT8VCallForHeatPoll()+0x202>

          _SetupRFM22ToEavesdropOnFHT8V(); // Reset/restart RX.
          return(false); // Nothing valid received.
          }

        if(pos < 2)
    248e:	22 30       	cpi	r18, 0x02	; 2
    2490:	b0 f4       	brcc	.+44     	; 0x24be <FHT8VCallForHeatPoll()+0xf8>
// Useful to assess the noise enviromentment.
static volatile uint8_t lastRXerrno;

// Atomically returns and clears last (FHT8V) RX error code, or 0 if none.
// Set with such codes as FHT8VRXErr_GENERIC; never set to zero.
static void setLastRXErr(const uint8_t err) { ATOMIC_BLOCK (ATOMIC_RESTORESTATE) { lastRXerrno = err; } }
    2492:	9f b7       	in	r25, 0x3f	; 63
    2494:	f8 94       	cli
    2496:	82 e0       	ldi	r24, 0x02	; 2
    2498:	80 93 4b 02 	sts	0x024B, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    249c:	9f bf       	out	0x3f, r25	; 63
            DEBUG_SERIAL_PRINT_FLASHSTRING(" 0x");
            DEBUG_SERIAL_PRINTFMT(FHT8VRXHubArea[p], HEX);
            }
          DEBUG_SERIAL_PRINTLN();
#endif
          seedRNG8(FHT8VRXHubArea[pos], FHT8VRXHubArea[pos+2], FHT8VRXHubArea[pos+5]); // Attempt to gather some entropy from RX noise. (TODO-302).
    249e:	f9 01       	movw	r30, r18
    24a0:	e3 5b       	subi	r30, 0xB3	; 179
    24a2:	fd 4f       	sbci	r31, 0xFD	; 253
    24a4:	80 81       	ld	r24, Z
    24a6:	62 81       	ldd	r22, Z+2	; 0x02
    24a8:	45 81       	ldd	r20, Z+5	; 0x05
    24aa:	0e 94 90 20 	call	0x4120	; 0x4120 <seedRNG8(unsigned char, unsigned char, unsigned char)>
    24ae:	a7 c0       	rjmp	.+334    	; 0x25fe <FHT8VCallForHeatPoll()+0x238>
          _SetupRFM22ToEavesdropOnFHT8V(); // Reset/restart RX.
          return(false);
    24b0:	8f 5f       	subi	r24, 0xFF	; 255
    24b2:	2f 5f       	subi	r18, 0xFF	; 255
    24b4:	3f 4f       	sbci	r19, 0xFF	; 255
    // Attempt to read the entire frame.
    RFM22RXFIFO(FHT8VRXHubArea, sizeof(FHT8VRXHubArea));
    uint8_t pos; // Current byte position in RX buffer...
    // Validate FHT8V premable (zeros encoded as up to 6x 0xcc bytes), else abort/restart.
    // Insist on at least a couple of bytes of valid preamble being present.
    for(pos = 0; pos < 6; ++pos)
    24b6:	26 30       	cpi	r18, 0x06	; 6
    24b8:	31 05       	cpc	r19, r1
    24ba:	09 f0       	breq	.+2      	; 0x24be <FHT8VCallForHeatPoll()+0xf8>
    24bc:	ad cf       	rjmp	.-166    	; 0x2418 <FHT8VCallForHeatPoll()+0x52>
        break; // If enough preamble has been seen, move on to the body.
        }
      }
    fht8v_msg_t command;
    uint8_t const *lastByte = FHT8VRXHubArea + FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE - 1;
    uint8_t const *trailer = FHT8VDecodeBitStream(FHT8VRXHubArea + pos, lastByte, &command);
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	68 e8       	ldi	r22, 0x88	; 136
    24c2:	e6 2e       	mov	r14, r22
    24c4:	62 e0       	ldi	r22, 0x02	; 2
    24c6:	f6 2e       	mov	r15, r22
    24c8:	83 5b       	subi	r24, 0xB3	; 179
    24ca:	9d 4f       	sbci	r25, 0xFD	; 253
    24cc:	b7 01       	movw	r22, r14
    24ce:	ae 01       	movw	r20, r28
    24d0:	4d 5f       	subi	r20, 0xFD	; 253
    24d2:	5f 4f       	sbci	r21, 0xFF	; 255
    24d4:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)>
    24d8:	8c 01       	movw	r16, r24
    if(NULL != trailer)
    24da:	00 97       	sbiw	r24, 0x00	; 0
    24dc:	09 f4       	brne	.+2      	; 0x24e0 <FHT8VCallForHeatPoll()+0x11a>
    24de:	77 c0       	rjmp	.+238    	; 0x25ce <FHT8VCallForHeatPoll()+0x208>

#if defined(SUPPORT_TEMP_TX) // Only look for the trailer if supported.
      // If whole FHT8V frame was OK then check if there is a valid stats trailer.
      
      // Check for 'core' stats trailer.
      if((trailer + FullStatsMessageCore_MAX_BYTES_ON_WIRE <= lastByte) && // Enough space for minimum-stats trailer.
    24e0:	08 96       	adiw	r24, 0x08	; 8
    24e2:	e8 16       	cp	r14, r24
    24e4:	f9 06       	cpc	r15, r25
    24e6:	60 f1       	brcs	.+88     	; 0x2540 <FHT8VCallForHeatPoll()+0x17a>
    24e8:	f8 01       	movw	r30, r16
    24ea:	80 81       	ld	r24, Z
    24ec:	80 7e       	andi	r24, 0xE0	; 224
    24ee:	80 36       	cpi	r24, 0x60	; 96
    24f0:	39 f5       	brne	.+78     	; 0x2540 <FHT8VCallForHeatPoll()+0x17a>
         (MESSAGING_FULL_STATS_FLAGS_HEADER_MSBS == (trailer[0] & MESSAGING_FULL_STATS_FLAGS_HEADER_MASK)))
        {
        FullStatsMessageCore_t content;
        const uint8_t *tail = decodeFullStatsMessageCore(trailer, lastByte - trailer, stTXalwaysAll, false, &content);
    24f2:	6e 2d       	mov	r22, r14
    24f4:	60 1b       	sub	r22, r16
    24f6:	c8 01       	movw	r24, r16
    24f8:	40 e0       	ldi	r20, 0x00	; 0
    24fa:	50 e0       	ldi	r21, 0x00	; 0
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	8e 01       	movw	r16, r28
    2500:	09 5f       	subi	r16, 0xF9	; 249
    2502:	1f 4f       	sbci	r17, 0xFF	; 255
    2504:	0e 94 55 1a 	call	0x34aa	; 0x34aa <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)>
        if(NULL != tail)
    2508:	89 2b       	or	r24, r25
    250a:	09 f4       	brne	.+2      	; 0x250e <FHT8VCallForHeatPoll()+0x148>
    250c:	48 c0       	rjmp	.+144    	; 0x259e <FHT8VCallForHeatPoll()+0x1d8>
          // Received trailing stats frame!
 
          // If ID is present then make sure it matches that implied by the FHT8V frame (else reject this trailer)
          // else file it in from the FHT8C frame.
          bool allGood = true;
          if(content.containsID)
    250e:	9f 81       	ldd	r25, Y+7	; 0x07
    2510:	2b 81       	ldd	r18, Y+3	; 0x03
    2512:	90 ff       	sbrs	r25, 0
    2514:	08 c0       	rjmp	.+16     	; 0x2526 <FHT8VCallForHeatPoll()+0x160>
            {
            if((content.id0 != command.hc1) || (content.id1 != command.hc2))
    2516:	88 85       	ldd	r24, Y+8	; 0x08
    2518:	82 17       	cp	r24, r18
    251a:	59 f4       	brne	.+22     	; 0x2532 <FHT8VCallForHeatPoll()+0x16c>
    251c:	99 85       	ldd	r25, Y+9	; 0x09
    251e:	8c 81       	ldd	r24, Y+4	; 0x04
    2520:	98 17       	cp	r25, r24
    2522:	39 f4       	brne	.+14     	; 0x2532 <FHT8VCallForHeatPoll()+0x16c>
    2524:	7c c0       	rjmp	.+248    	; 0x261e <FHT8VCallForHeatPoll()+0x258>
              { allGood = false; }
            }
          else
            {
            content.id0 = command.hc1;
    2526:	28 87       	std	Y+8, r18	; 0x08
            content.id1 = command.hc2;
    2528:	8c 81       	ldd	r24, Y+4	; 0x04
    252a:	89 87       	std	Y+9, r24	; 0x09
            content.containsID = true;
    252c:	91 60       	ori	r25, 0x01	; 1
    252e:	9f 83       	std	Y+7, r25	; 0x07
    2530:	76 c0       	rjmp	.+236    	; 0x261e <FHT8VCallForHeatPoll()+0x258>
// Useful to assess the noise enviromentment.
static volatile uint8_t lastRXerrno;

// Atomically returns and clears last (FHT8V) RX error code, or 0 if none.
// Set with such codes as FHT8VRXErr_GENERIC; never set to zero.
static void setLastRXErr(const uint8_t err) { ATOMIC_BLOCK (ATOMIC_RESTORESTATE) { lastRXerrno = err; } }
    2532:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2534:	f8 94       	cli
    2536:	84 e0       	ldi	r24, 0x04	; 4
    2538:	80 93 4b 02 	sts	0x024B, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    253c:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    253e:	2f c0       	rjmp	.+94     	; 0x259e <FHT8VCallForHeatPoll()+0x1d8>
          // TODO: record error with mismatched ID.
          }
        // TODO: maybe scrape some entropy from damaged frame.
        }
      // Check for minimum stats trailer.
      else if((trailer + MESSAGING_TRAILING_MINIMAL_STATS_PAYLOAD_BYTES <= lastByte) && // Enough space for minimum-stats trailer.
    2540:	c8 01       	movw	r24, r16
    2542:	03 96       	adiw	r24, 0x03	; 3
    2544:	88 58       	subi	r24, 0x88	; 136
    2546:	92 40       	sbci	r25, 0x02	; 2
    2548:	09 f0       	breq	.+2      	; 0x254c <FHT8VCallForHeatPoll()+0x186>
    254a:	48 f5       	brcc	.+82     	; 0x259e <FHT8VCallForHeatPoll()+0x1d8>
    254c:	f8 01       	movw	r30, r16
    254e:	80 81       	ld	r24, Z
    2550:	80 7e       	andi	r24, 0xE0	; 224
    2552:	80 34       	cpi	r24, 0x40	; 64
    2554:	21 f5       	brne	.+72     	; 0x259e <FHT8VCallForHeatPoll()+0x1d8>
         (MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MSBS == (trailer[0] & MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MASK)))
        {
        if(verifyHeaderAndCRCForTrailingMinimalStatsPayload(trailer)) // Valid header and CRC.
    2556:	c8 01       	movw	r24, r16
    2558:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <verifyHeaderAndCRCForTrailingMinimalStatsPayload(unsigned char const*)>
    255c:	88 23       	and	r24, r24
    255e:	71 f0       	breq	.+28     	; 0x257c <FHT8VCallForHeatPoll()+0x1b6>
          {
          trailingMinimalStatsPayload_t payload;
          extractTrailingMinimalStatsPayload(trailer, &payload);
    2560:	c8 01       	movw	r24, r16
    2562:	8e 01       	movw	r16, r28
    2564:	0f 5f       	subi	r16, 0xFF	; 255
    2566:	1f 4f       	sbci	r17, 0xFF	; 255
    2568:	b8 01       	movw	r22, r16
    256a:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <extractTrailingMinimalStatsPayload(unsigned char const*, trailingMinimalStatsPayload*)>
          recordMinimalStats(true, command.hc1, command.hc2, &payload); // Record stats; local loopback is secure.
    256e:	81 e0       	ldi	r24, 0x01	; 1
    2570:	6b 81       	ldd	r22, Y+3	; 0x03
    2572:	4c 81       	ldd	r20, Y+4	; 0x04
    2574:	98 01       	movw	r18, r16
    2576:	0e 94 a8 1b 	call	0x3750	; 0x3750 <recordMinimalStats(bool, unsigned char, unsigned char, trailingMinimalStatsPayload const*)>
    257a:	11 c0       	rjmp	.+34     	; 0x259e <FHT8VCallForHeatPoll()+0x1d8>
#endif
          }
#if 1 // Optional extra tracking of error rate/type/location.
        else // Failed to verify; deduce bad frame if header looks OK.
          {
          if(MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MSBS == (trailer[0] & MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MASK))
    257c:	f8 01       	movw	r30, r16
    257e:	80 81       	ld	r24, Z
    2580:	80 7e       	andi	r24, 0xE0	; 224
    2582:	80 34       	cpi	r24, 0x40	; 64
    2584:	61 f4       	brne	.+24     	; 0x259e <FHT8VCallForHeatPoll()+0x1d8>
// Useful to assess the noise enviromentment.
static volatile uint8_t lastRXerrno;

// Atomically returns and clears last (FHT8V) RX error code, or 0 if none.
// Set with such codes as FHT8VRXErr_GENERIC; never set to zero.
static void setLastRXErr(const uint8_t err) { ATOMIC_BLOCK (ATOMIC_RESTORESTATE) { lastRXerrno = err; } }
    2586:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2588:	f8 94       	cli
    258a:	84 e0       	ldi	r24, 0x04	; 4
    258c:	80 93 4b 02 	sts	0x024B, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2590:	9f bf       	out	0x3f, r25	; 63
        else // Failed to verify; deduce bad frame if header looks OK.
          {
          if(MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MSBS == (trailer[0] & MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MASK))
            {
            setLastRXErr(FHT8VRXErr_BAD_RX_SUBFRAME);
            seedRNG8(trailer[0], trailer[1], trailer[2]); // Attempt to gather some entropy from the RX noise. (TODO-302).
    2592:	f8 01       	movw	r30, r16
    2594:	80 81       	ld	r24, Z
    2596:	61 81       	ldd	r22, Z+1	; 0x01
    2598:	42 81       	ldd	r20, Z+2	; 0x02
    259a:	0e 94 90 20 	call	0x4120	; 0x4120 <seedRNG8(unsigned char, unsigned char, unsigned char)>
#endif
        }
#endif

      // Potentially accept as call for heat only if command is 0x26 (38) and value open enough as used by OpenTRV to TX.
      if((0x26 == command.command) && (command.extension >= NominalRadValve.getMinValvePcReallyOpen()))
    259e:	8d 81       	ldd	r24, Y+5	; 0x05
    25a0:	86 32       	cpi	r24, 0x26	; 38
    25a2:	91 f4       	brne	.+36     	; 0x25c8 <FHT8VCallForHeatPoll()+0x202>
    25a4:	1e 81       	ldd	r17, Y+6	; 0x06
    25a6:	0e 94 c9 04 	call	0x992	; 0x992 <ModelledRadValve::getMinValvePcReallyOpen()>
    25aa:	18 17       	cp	r17, r24
    25ac:	68 f0       	brcs	.+26     	; 0x25c8 <FHT8VCallForHeatPoll()+0x202>
        {
        if(FHT8VHubAcceptedHouseCode(command.hc1, command.hc2))
          {
          // Accept if house code not filtered out.
          const uint16_t compoundHC = (command.hc1 << 8) | command.hc2;
    25ae:	9b 81       	ldd	r25, Y+3	; 0x03
    25b0:	80 e0       	ldi	r24, 0x00	; 0
    25b2:	2c 81       	ldd	r18, Y+4	; 0x04
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	82 2b       	or	r24, r18
    25b8:	93 2b       	or	r25, r19
          ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    25ba:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    25bc:	f8 94       	cli
            { lastCallForHeatHC = compoundHC; } // Update atomically.
    25be:	90 93 3d 01 	sts	0x013D, r25
    25c2:	80 93 3c 01 	sts	0x013C, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    25c6:	2f bf       	out	0x3f, r18	; 63
//#if defined(SAVE_RX_ENERGY)
//          StopEavesdropOnFHT8V(); // Need not eavesdrop for a while.
//#endif
          }
        }
      _SetupRFM22ToEavesdropOnFHT8V(); // Reset/restart RX.
    25c8:	0e 94 9a 10 	call	0x2134	; 0x2134 <_SetupRFM22ToEavesdropOnFHT8V()>
    25cc:	0e c0       	rjmp	.+28     	; 0x25ea <FHT8VCallForHeatPoll()+0x224>
// Useful to assess the noise enviromentment.
static volatile uint8_t lastRXerrno;

// Atomically returns and clears last (FHT8V) RX error code, or 0 if none.
// Set with such codes as FHT8VRXErr_GENERIC; never set to zero.
static void setLastRXErr(const uint8_t err) { ATOMIC_BLOCK (ATOMIC_RESTORESTATE) { lastRXerrno = err; } }
    25ce:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    25d0:	f8 94       	cli
    25d2:	83 e0       	ldi	r24, 0x03	; 3
    25d4:	11 c0       	rjmp	.+34     	; 0x25f8 <FHT8VCallForHeatPoll()+0x232>

    // Ensure that RX is re-enabled to avoid missing anything.
    _SetupRFM22ToEavesdropOnFHT8V(); // Reset/restart RX.
    return(false); // Nothing valid received.
    }
  else if(status & 0x80) // Got sync from incoming FHT8V message.
    25d6:	87 ff       	sbrs	r24, 7
    25d8:	0a c0       	rjmp	.+20     	; 0x25ee <FHT8VCallForHeatPoll()+0x228>
    {
    // Capture some entropy from RSSI and timing...
    const uint8_t rssi = RFM22RSSI();
    25da:	0e 94 15 22 	call	0x442a	; 0x442a <RFM22RSSI()>
    // TODO adjust output power down a little if RX very loud.
    addEntropyToPool(rssi ^ (uint8_t)(status ^ (status >> 8)), 1); // Maybe ~1 real bit of entropy.
    25de:	91 2f       	mov	r25, r17
    25e0:	90 27       	eor	r25, r16
    25e2:	89 27       	eor	r24, r25
    25e4:	61 e0       	ldi	r22, 0x01	; 1
    25e6:	0e 94 29 25 	call	0x4a52	; 0x4a52 <addEntropyToPool(unsigned char, unsigned char)>
    25ea:	81 e0       	ldi	r24, 0x01	; 1
    25ec:	0b c0       	rjmp	.+22     	; 0x2604 <FHT8VCallForHeatPoll()+0x23e>
      }
#endif 
//    syncSeen = true;
    return(true);
    }
  else if(status & 0x8000) // RX FIFO overflow/underflow: give up and restart...
    25ee:	97 ff       	sbrs	r25, 7
    25f0:	08 c0       	rjmp	.+16     	; 0x2602 <FHT8VCallForHeatPoll()+0x23c>
// Useful to assess the noise enviromentment.
static volatile uint8_t lastRXerrno;

// Atomically returns and clears last (FHT8V) RX error code, or 0 if none.
// Set with such codes as FHT8VRXErr_GENERIC; never set to zero.
static void setLastRXErr(const uint8_t err) { ATOMIC_BLOCK (ATOMIC_RESTORESTATE) { lastRXerrno = err; } }
    25f2:	9f b7       	in	r25, 0x3f	; 63
    25f4:	f8 94       	cli
    25f6:	81 e0       	ldi	r24, 0x01	; 1
    25f8:	80 93 4b 02 	sts	0x024B, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    25fc:	9f bf       	out	0x3f, r25	; 63
    {
    setLastRXErr(FHT8VRXErr_GENERIC);
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("RX FIFO problem");
#endif
    _SetupRFM22ToEavesdropOnFHT8V(); // Reset/restart RX.
    25fe:	0e 94 9a 10 	call	0x2134	; 0x2134 <_SetupRFM22ToEavesdropOnFHT8V()>
    return(false);
    2602:	80 e0       	ldi	r24, 0x00	; 0
    }

  return(false);
  }
    2604:	2d 96       	adiw	r28, 0x0d	; 13
    2606:	0f b6       	in	r0, 0x3f	; 63
    2608:	f8 94       	cli
    260a:	de bf       	out	0x3e, r29	; 62
    260c:	0f be       	out	0x3f, r0	; 63
    260e:	cd bf       	out	0x3d, r28	; 61
    2610:	cf 91       	pop	r28
    2612:	df 91       	pop	r29
    2614:	1f 91       	pop	r17
    2616:	0f 91       	pop	r16
    2618:	ff 90       	pop	r15
    261a:	ef 90       	pop	r14
    261c:	08 95       	ret
            content.id1 = command.hc2;
            content.containsID = true;
            }
 
          // If frame looks good then capture it.
          if(allGood) { recordCoreStats(false, &content); }
    261e:	80 e0       	ldi	r24, 0x00	; 0
    2620:	be 01       	movw	r22, r28
    2622:	69 5f       	subi	r22, 0xF9	; 249
    2624:	7f 4f       	sbci	r23, 0xFF	; 255
    2626:	0e 94 8c 1b 	call	0x3718	; 0x3718 <recordCoreStats(bool, FullStatsMessageCore const*)>
    262a:	b9 cf       	rjmp	.-142    	; 0x259e <FHT8VCallForHeatPoll()+0x1d8>

0000262c <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)>:
//
// Returns immediately without transmitting if the command buffer starts with 0xff (ie is empty).
// (If doubleTX is true, sends the bitstream twice, with a short (~8ms) pause between transmissions, to help ensure reliable delivery.)
//
// Note: single transmission time is up to about 80ms (without extra trailers), double up to about 170ms.
static void FHT8VTXFHTQueueAndSendCmd(uint8_t *bptr, const bool doubleTX)
    262c:	0f 93       	push	r16
    262e:	1f 93       	push	r17
    2630:	cf 93       	push	r28
    2632:	df 93       	push	r29
    2634:	ec 01       	movw	r28, r24
    2636:	06 2f       	mov	r16, r22
  {
  if(((uint8_t)0xff) == *bptr) { return; }
    2638:	88 81       	ld	r24, Y
    263a:	8f 3f       	cpi	r24, 0xFF	; 255
    263c:	41 f1       	breq	.+80     	; 0x268e <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x62>
#ifdef DEBUG
  if(0 == *bptr) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("FHT8V frame not initialised"); panic(); }
    263e:	88 23       	and	r24, r24
    2640:	31 f4       	brne	.+12     	; 0x264e <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x22>
    2642:	8d e7       	ldi	r24, 0x7D	; 125
    2644:	91 e0       	ldi	r25, 0x01	; 1
    2646:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <serialPrintlnAndFlush(__FlashStringHelper const*)>
    264a:	0e 94 97 2e 	call	0x5d2e	; 0x5d2e <panic()>
#endif

#if defined(ENABLE_BOILER_HUB)
  const bool hubMode = inHubMode();
    264e:	0e 94 a2 04 	call	0x944	; 0x944 <getMinBoilerOnMinutes()>
    2652:	18 2f       	mov	r17, r24
    2654:	88 23       	and	r24, r24
    2656:	19 f0       	breq	.+6      	; 0x265e <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x32>
    2658:	11 e0       	ldi	r17, 0x01	; 1
  // Do a final poll for any call for heat that just arrived before doing TX.
  if(hubMode) { FHT8VCallForHeatPoll(); }
    265a:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <FHT8VCallForHeatPoll()>
  StopEavesdropOnFHT8V(); // Unconditional cleardown of eavesdrop.
    265e:	80 e0       	ldi	r24, 0x00	; 0
    2660:	0e 94 8f 10 	call	0x211e	; 0x211e <StopEavesdropOnFHT8V(bool)>
#endif

  RFM22QueueCmdToFF(bptr);
    2664:	ce 01       	movw	r24, r28
    2666:	0e 94 a2 21 	call	0x4344	; 0x4344 <RFM22QueueCmdToFF(unsigned char*)>
  RFM22TXFIFO(); // Send it!  Approx 1.6ms/byte and < 80ms max.
    266a:	0e 94 9a 22 	call	0x4534	; 0x4534 <RFM22TXFIFO()>

  if(doubleTX)
    266e:	00 23       	and	r16, r16
    2670:	31 f0       	breq	.+12     	; 0x267e <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x52>
// This may be achieved in part by dynamically slowing the CPU clock if possible.
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed((((MIN_CPU_HZ * (ms)) + 2000) / 4000) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    2672:	8d e3       	ldi	r24, 0x3D	; 61
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
    {
    // Should nominally pause about 8--9ms or similar before retransmission...
    sleepLowPowerMs(8);
    RFM22TXFIFO(); // Re-send it!
    267a:	0e 94 9a 22 	call	0x4534	; 0x4534 <RFM22TXFIFO()>
    }

#if defined(ENABLE_BOILER_HUB)
  if(hubMode)
    267e:	11 23       	and	r17, r17
    2680:	21 f0       	breq	.+8      	; 0x268a <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x5e>
    { SetupToEavesdropOnFHT8V(); } // Revert to hub listening...
    2682:	80 e0       	ldi	r24, 0x00	; 0
    2684:	0e 94 a2 10 	call	0x2144	; 0x2144 <SetupToEavesdropOnFHT8V(bool)>
    2688:	02 c0       	rjmp	.+4      	; 0x268e <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x62>
  else
#endif
    { RFM22ModeStandbyAndClearState(); } // Go to standby to conserve energy.
    268a:	0e 94 52 22 	call	0x44a4	; 0x44a4 <RFM22ModeStandbyAndClearState()>
  }
    268e:	df 91       	pop	r29
    2690:	cf 91       	pop	r28
    2692:	1f 91       	pop	r17
    2694:	0f 91       	pop	r16
    2696:	08 95       	ret

00002698 <valveSettingTX(bool)>:

// Send current (assumed valve-setting) command and adjust FHT8V_isValveOpen as appropriate.
// Only appropriate when the command is going to be heard by the FHT8V valve itself, not just the hub.
static void valveSettingTX(const bool allowDoubleTX)
    2698:	1f 93       	push	r17
    269a:	68 2f       	mov	r22, r24
  {
  // Transmit correct valve-setting command that should already be in the buffer...
  FHT8VTXFHTQueueAndSendCmd(FHT8VTXCommandArea, allowDoubleTX);
    269c:	8f e8       	ldi	r24, 0x8F	; 143
    269e:	92 e0       	ldi	r25, 0x02	; 2
    26a0:	0e 94 16 13 	call	0x262c	; 0x262c <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)>
    26a4:	10 91 00 02 	lds	r17, 0x0200

// Call just after TX of valve-setting command which is assumed to reflect current TRVPercentOpen state.
// This helps avoiding calling for heat from a central boiler until the valve is really open,
// eg to avoid excess load on (or power wasting in) the circulation pump.
static void setFHT8V_isValveOpen()
  { FHT8V_isValveOpen = (NominalRadValve.get() >= NominalRadValve.getMinValvePcReallyOpen()); }
    26a8:	0e 94 c9 04 	call	0x992	; 0x992 <ModelledRadValve::getMinValvePcReallyOpen()>
    26ac:	10 92 cb 02 	sts	0x02CB, r1
    26b0:	18 17       	cp	r17, r24
    26b2:	18 f0       	brcs	.+6      	; 0x26ba <valveSettingTX(bool)+0x22>
    26b4:	81 e0       	ldi	r24, 0x01	; 1
    26b6:	80 93 cb 02 	sts	0x02CB, r24
  {
  // Transmit correct valve-setting command that should already be in the buffer...
  FHT8VTXFHTQueueAndSendCmd(FHT8VTXCommandArea, allowDoubleTX);
  // Indicate state that valve should now actually be in (or physically moving to)...
  setFHT8V_isValveOpen();
  }
    26ba:	1f 91       	pop	r17
    26bc:	08 95       	ret

000026be <sleepUntilSubCycleTimeOptionalRX(unsigned char)>:
// Returns true if OK, false if specified time already passed or significantly missed (eg by more than one tick).
// May use a combination of techniques to hit the required time.
// Requesting a sleep until at or near the end of the cycle risks overrun and may be unwise.
// Using this to sleep less then 2 ticks may prove unreliable as the RTC rolls on underneath...
// This is NOT intended to be used to sleep over the end of a minor cycle. 
static void sleepUntilSubCycleTimeOptionalRX(const uint8_t sleepUntil)
    26be:	8f 92       	push	r8
    26c0:	9f 92       	push	r9
    26c2:	af 92       	push	r10
    26c4:	bf 92       	push	r11
    26c6:	cf 92       	push	r12
    26c8:	df 92       	push	r13
    26ca:	ef 92       	push	r14
    26cc:	ff 92       	push	r15
    26ce:	0f 93       	push	r16
    26d0:	1f 93       	push	r17
    26d2:	98 2e       	mov	r9, r24
    {
#if defined(ENABLE_BOILER_HUB)
    const bool hubMode = inHubMode();
    26d4:	0e 94 a2 04 	call	0x944	; 0x944 <getMinBoilerOnMinutes()>
    26d8:	88 2e       	mov	r8, r24
    26da:	88 23       	and	r24, r24
    26dc:	a9 f1       	breq	.+106    	; 0x2748 <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x8a>
    26de:	88 24       	eor	r8, r8
    26e0:	83 94       	inc	r8
      {
#if 0 && defined(DEBUG)
      DEBUG_SERIAL_PRINT_FLASHSTRING("TXwait");
#endif
      // Only do nap+poll if lots of time left.
      while(sleepUntil > fmax(getSubCycleTime() + (50/SUBCYCLE_TICK_MS_RD), GSCT_MAX))
    26e2:	89 2d       	mov	r24, r9
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	5c 01       	movw	r10, r24
    26e8:	cc 24       	eor	r12, r12
    26ea:	b7 fc       	sbrc	r11, 7
    26ec:	c0 94       	com	r12
    26ee:	dc 2c       	mov	r13, r12
    26f0:	06 c0       	rjmp	.+12     	; 0x26fe <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x40>
//   * force if true then force full poll on every call (ie do not internally rate-limit)
// NOTE: implementation may not be in power-management module.
bool pollIO(bool force = false);
// Nap productively polling I/O, etc, across the system while spending time in low-power mode if possible.
// Typically sleeps for about 30ms; tries to allow ealier wakeup if interrupt is received, etc.
static void inline nap30AndPoll() { nap(WDTO_30MS); pollIO(true); }
    26f2:	81 e0       	ldi	r24, 0x01	; 1
    26f4:	0e 94 ab 1c 	call	0x3956	; 0x3956 <nap(signed char)>
    26f8:	81 e0       	ldi	r24, 0x01	; 1
    26fa:	0e 94 58 06 	call	0xcb0	; 0xcb0 <pollIO(bool)>
    26fe:	60 91 b2 00 	lds	r22, 0x00B2
    2702:	70 e0       	ldi	r23, 0x00	; 0
    2704:	69 5f       	subi	r22, 0xF9	; 249
    2706:	7f 4f       	sbci	r23, 0xFF	; 255
    2708:	88 27       	eor	r24, r24
    270a:	77 fd       	sbrc	r23, 7
    270c:	80 95       	com	r24
    270e:	98 2f       	mov	r25, r24
    2710:	0e 94 b8 3d 	call	0x7b70	; 0x7b70 <__floatsisf>
    2714:	20 e0       	ldi	r18, 0x00	; 0
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	4f e7       	ldi	r20, 0x7F	; 127
    271a:	53 e4       	ldi	r21, 0x43	; 67
    271c:	0e 94 f3 3d 	call	0x7be6	; 0x7be6 <fmax>
    2720:	7b 01       	movw	r14, r22
    2722:	8c 01       	movw	r16, r24
    2724:	c6 01       	movw	r24, r12
    2726:	b5 01       	movw	r22, r10
    2728:	0e 94 b8 3d 	call	0x7b70	; 0x7b70 <__floatsisf>
    272c:	a8 01       	movw	r20, r16
    272e:	97 01       	movw	r18, r14
    2730:	0e 94 36 3e 	call	0x7c6c	; 0x7c6c <__gesf2>
    2734:	18 16       	cp	r1, r24
    2736:	ec f2       	brlt	.-70     	; 0x26f2 <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x34>
    2738:	03 c0       	rjmp	.+6      	; 0x2740 <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x82>
        { nap30AndPoll(); } // Assumed ~30ms sleep max.
      // Poll in remaining time without nap.
      while(sleepUntil > getSubCycleTime())
        { pollIO(); }
    273a:	80 e0       	ldi	r24, 0x00	; 0
    273c:	0e 94 58 06 	call	0xcb0	; 0xcb0 <pollIO(bool)>
#endif
      // Only do nap+poll if lots of time left.
      while(sleepUntil > fmax(getSubCycleTime() + (50/SUBCYCLE_TICK_MS_RD), GSCT_MAX))
        { nap30AndPoll(); } // Assumed ~30ms sleep max.
      // Poll in remaining time without nap.
      while(sleepUntil > getSubCycleTime())
    2740:	80 91 b2 00 	lds	r24, 0x00B2
    2744:	89 15       	cp	r24, r9
    2746:	c8 f3       	brcs	.-14     	; 0x273a <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x7c>
#endif
      }
#endif

    // Sleep until exactly the right time.
    sleepUntilSubCycleTime(sleepUntil);
    2748:	89 2d       	mov	r24, r9
    274a:	0e 94 0b 20 	call	0x4016	; 0x4016 <sleepUntilSubCycleTime(unsigned char)>

#if defined(ENABLE_BOILER_HUB)
    // Final quick poll for RX activity.
    if(hubMode) { FHT8VCallForHeatPoll(); }
    274e:	88 20       	and	r8, r8
    2750:	11 f0       	breq	.+4      	; 0x2756 <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x98>
    2752:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <FHT8VCallForHeatPoll()>
#endif
    }
    2756:	1f 91       	pop	r17
    2758:	0f 91       	pop	r16
    275a:	ff 90       	pop	r15
    275c:	ef 90       	pop	r14
    275e:	df 90       	pop	r13
    2760:	cf 90       	pop	r12
    2762:	bf 90       	pop	r11
    2764:	af 90       	pop	r10
    2766:	9f 90       	pop	r9
    2768:	8f 90       	pop	r8
    276a:	08 95       	ret

0000276c <FHT8VSetHC2(unsigned char)>:
  eeprom_smart_erase_byte((uint8_t*)EE_START_FHT8V_HC2);
  }

// Set (non-volatile) HC1 and HC2 for single/primary FHT8V wireless valve under control.
void FHT8VSetHC1(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC1, hc); }
void FHT8VSetHC2(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC2, hc); }
    276c:	68 2f       	mov	r22, r24
    276e:	81 e1       	ldi	r24, 0x11	; 17
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <eeprom_smart_update_byte(unsigned char*, unsigned char)>
    2776:	08 95       	ret

00002778 <FHT8VSetHC1(unsigned char)>:
  eeprom_smart_erase_byte((uint8_t*)EE_START_FHT8V_HC1);
  eeprom_smart_erase_byte((uint8_t*)EE_START_FHT8V_HC2);
  }

// Set (non-volatile) HC1 and HC2 for single/primary FHT8V wireless valve under control.
void FHT8VSetHC1(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC1, hc); }
    2778:	68 2f       	mov	r22, r24
    277a:	80 e1       	ldi	r24, 0x10	; 16
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <eeprom_smart_update_byte(unsigned char*, unsigned char)>
    2782:	08 95       	ret

00002784 <FHT8VClearHC()>:
  }

// Clear both housecode parts (and thus disable local valve).
void FHT8VClearHC()
  {
  eeprom_smart_erase_byte((uint8_t*)EE_START_FHT8V_HC1);
    2784:	80 e1       	ldi	r24, 0x10	; 16
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <eeprom_smart_erase_byte(unsigned char*)>
  eeprom_smart_erase_byte((uint8_t*)EE_START_FHT8V_HC2);
    278c:	81 e1       	ldi	r24, 0x11	; 17
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <eeprom_smart_erase_byte(unsigned char*)>
  }
    2794:	08 95       	ret

00002796 <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)>:
//   * trailer  if not null then a stats trailer is appended, built from that info plus a CRC
//   * command  on entry hc1, hc2 (and addresss if used) must be set correctly, this sets the command and extension; never NULL
// The generated command frame can be resent indefinitely.
// The output buffer used must be (at least) FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE bytes.
// Returns pointer to the terminating 0xff on exit.
uint8_t *FHT8VCreateValveSetCmdFrameHT_r(uint8_t *const bptrInitial, const bool doHeader, fht8v_msg_t *const command, const uint8_t TRVPercentOpen, const FullStatsMessageCore_t *trailer)
    2796:	ef 92       	push	r14
    2798:	ff 92       	push	r15
    279a:	0f 93       	push	r16
    279c:	1f 93       	push	r17
    279e:	cf 93       	push	r28
    27a0:	df 93       	push	r29
    27a2:	7c 01       	movw	r14, r24
    27a4:	36 2f       	mov	r19, r22
    27a6:	ea 01       	movw	r28, r20
  {
  uint8_t *bptr = bptrInitial;

  command->command = 0x26;
    27a8:	86 e2       	ldi	r24, 0x26	; 38
    27aa:	8a 83       	std	Y+2, r24	; 0x02
  command->extension = (TRVPercentOpen * 255) / 100;
    27ac:	8f ef       	ldi	r24, 0xFF	; 255
    27ae:	28 9f       	mul	r18, r24
    27b0:	c0 01       	movw	r24, r0
    27b2:	11 24       	eor	r1, r1
    27b4:	64 e6       	ldi	r22, 0x64	; 100
    27b6:	70 e0       	ldi	r23, 0x00	; 0
    27b8:	0e 94 6d 3e 	call	0x7cda	; 0x7cda <__divmodhi4>
    27bc:	6b 83       	std	Y+3, r22	; 0x03

  // Add RFM22/32-friendly pre-preamble if requested, eg when calling for heat from the boiler (TRV actually open).
  // NOTE: this requires more buffer space.
  if(doHeader)
    27be:	33 23       	and	r19, r19
    27c0:	11 f4       	brne	.+4      	; 0x27c6 <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)+0x30>
    27c2:	c7 01       	movw	r24, r14
    27c4:	09 c0       	rjmp	.+18     	; 0x27d8 <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)+0x42>
    {
    memset(bptr, RFM22_PREAMBLE_BYTE, RFM22_PREAMBLE_BYTES);
    27c6:	c7 01       	movw	r24, r14
    27c8:	6a ea       	ldi	r22, 0xAA	; 170
    27ca:	70 e0       	ldi	r23, 0x00	; 0
    27cc:	45 e0       	ldi	r20, 0x05	; 5
    27ce:	50 e0       	ldi	r21, 0x00	; 0
    27d0:	0e 94 a0 03 	call	0x740	; 0x740 <memset>
    bptr += RFM22_PREAMBLE_BYTES;
    27d4:	c7 01       	movw	r24, r14
    27d6:	05 96       	adiw	r24, 0x05	; 5
    }

  bptr = FHT8VCreate200usBitStreamBptr(bptr, command);
    27d8:	be 01       	movw	r22, r28
    27da:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>
    27de:	ec 01       	movw	r28, r24

  if(NULL != trailer)
    27e0:	01 15       	cp	r16, r1
    27e2:	11 05       	cpc	r17, r1
    27e4:	f9 f0       	breq	.+62     	; 0x2824 <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)+0x8e>
    {
    // As bandwidth optimisation just write minimal trailer if only temp&power available.
    if(trailer->containsTempAndPower && 
    27e6:	f8 01       	movw	r30, r16
    27e8:	80 81       	ld	r24, Z
    27ea:	81 ff       	sbrs	r24, 1
    27ec:	0e c0       	rjmp	.+28     	; 0x280a <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)+0x74>
    27ee:	80 fd       	sbrc	r24, 0
    27f0:	0c c0       	rjmp	.+24     	; 0x280a <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)+0x74>
    27f2:	82 fd       	sbrc	r24, 2
    27f4:	0a c0       	rjmp	.+20     	; 0x280a <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)+0x74>
       !trailer->containsID && !trailer->containsAmbL)
      {
      writeTrailingMinimalStatsPayload(bptr, &(trailer->tempAndPower));
    27f6:	0d 5f       	subi	r16, 0xFD	; 253
    27f8:	1f 4f       	sbci	r17, 0xFF	; 255
    27fa:	ce 01       	movw	r24, r28
    27fc:	b8 01       	movw	r22, r16
    27fe:	0e 94 ae 19 	call	0x335c	; 0x335c <writeTrailingMinimalStatsPayload(unsigned char*, trailingMinimalStatsPayload const*)>
      bptr += 3;
    2802:	23 96       	adiw	r28, 0x03	; 3
      *bptr = (uint8_t)0xff; // Terminate TX bytes.
    2804:	8f ef       	ldi	r24, 0xFF	; 255
    2806:	88 83       	st	Y, r24
    2808:	0d c0       	rjmp	.+26     	; 0x2824 <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)+0x8e>
      }
    else
      {
      // Assume enough space in buffer for largest possible stats message.
      uint8_t * const tail = encodeFullStatsMessageCore(bptr, FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE - (bptr - bptrInitial), getStatsTXLevel(), false, trailer);
    280a:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <getStatsTXLevel()>
    280e:	ac 01       	movw	r20, r24
    2810:	6e 2d       	mov	r22, r14
    2812:	64 5c       	subi	r22, 0xC4	; 196
    2814:	6c 1b       	sub	r22, r28
    2816:	ce 01       	movw	r24, r28
    2818:	20 e0       	ldi	r18, 0x00	; 0
    281a:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)>
      if(NULL != tail) { bptr = tail; } // Encoding should not actually fail, but this copes gracefully if so!
    281e:	00 97       	sbiw	r24, 0x00	; 0
    2820:	09 f0       	breq	.+2      	; 0x2824 <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)+0x8e>
    2822:	ec 01       	movw	r28, r24
  // Check that the buffer end was not overrun.
  if(bptr - bptrInitial >= FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE) { panic(F("TX gen too large")); }
#endif

  return(bptr);
  }
    2824:	ce 01       	movw	r24, r28
    2826:	df 91       	pop	r29
    2828:	cf 91       	pop	r28
    282a:	1f 91       	pop	r17
    282c:	0f 91       	pop	r16
    282e:	ff 90       	pop	r15
    2830:	ef 90       	pop	r14
    2832:	08 95       	ret

00002834 <FHT8VCreateValveSetCmdFrame_r(unsigned char*, fht8v_msg_t*, unsigned char)>:
//
// Implicitly decides whether to add optional header and trailer components.
//
// NOTE: with SUPPORT_TEMP_TX defined will also insert trailing stats payload where appropriate.
// Also reports local stats as if remote.
uint8_t *FHT8VCreateValveSetCmdFrame_r(uint8_t *const bptr, fht8v_msg_t *command, const uint8_t TRVPercentOpen)
    2834:	bf 92       	push	r11
    2836:	cf 92       	push	r12
    2838:	df 92       	push	r13
    283a:	ef 92       	push	r14
    283c:	ff 92       	push	r15
    283e:	0f 93       	push	r16
    2840:	1f 93       	push	r17
    2842:	df 93       	push	r29
    2844:	cf 93       	push	r28
    2846:	cd b7       	in	r28, 0x3d	; 61
    2848:	de b7       	in	r29, 0x3e	; 62
    284a:	27 97       	sbiw	r28, 0x07	; 7
    284c:	0f b6       	in	r0, 0x3f	; 63
    284e:	f8 94       	cli
    2850:	de bf       	out	0x3e, r29	; 62
    2852:	0f be       	out	0x3f, r0	; 63
    2854:	cd bf       	out	0x3d, r28	; 61
    2856:	7c 01       	movw	r14, r24
    2858:	6b 01       	movw	r12, r22
    285a:	b4 2e       	mov	r11, r20
  {
  const bool etmsp = enableTrailingMinimalStatsPayload();
    285c:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <enableTrailingMinimalStatsPayload()>
  // OR if adding a trailer that the hub should see.
  // NOTE: this requires more buffer space.
  const bool doHeader = etmsp
#if defined(RFM22_SYNC_BCFH)
  // NOTE: the percentage-open threshold to call for heat from the boiler is set to allow the valve to open significantly, etc.
      || (TRVPercentOpen >= NominalRadValve.getMinValvePcReallyOpen())
    2860:	88 23       	and	r24, r24
    2862:	49 f4       	brne	.+18     	; 0x2876 <FHT8VCreateValveSetCmdFrame_r(unsigned char*, fht8v_msg_t*, unsigned char)+0x42>
    2864:	0e 94 c9 04 	call	0x992	; 0x992 <ModelledRadValve::getMinValvePcReallyOpen()>
    2868:	60 e0       	ldi	r22, 0x00	; 0
    286a:	b8 16       	cp	r11, r24
    286c:	08 f0       	brcs	.+2      	; 0x2870 <FHT8VCreateValveSetCmdFrame_r(unsigned char*, fht8v_msg_t*, unsigned char)+0x3c>
    286e:	61 e0       	ldi	r22, 0x01	; 1
    2870:	00 e0       	ldi	r16, 0x00	; 0
    2872:	10 e0       	ldi	r17, 0x00	; 0
    2874:	0e c0       	rjmp	.+28     	; 0x2892 <FHT8VCreateValveSetCmdFrame_r(unsigned char*, fht8v_msg_t*, unsigned char)+0x5e>
//    trailer.tempC16 = getTemperatureC16(); // Use last value read.
//    }
  FullStatsMessageCore_t trailer;
  if(doTrailer)
    {
    populateCoreStats(&trailer);
    2876:	8e 01       	movw	r16, r28
    2878:	0f 5f       	subi	r16, 0xFF	; 255
    287a:	1f 4f       	sbci	r17, 0xFF	; 255
    287c:	c8 01       	movw	r24, r16
    287e:	0e 94 22 07 	call	0xe44	; 0xe44 <populateCoreStats(FullStatsMessageCore*)>
    // Record stats as if remote, but secure, and with ID.
    recordCoreStats(true, &trailer);
    2882:	81 e0       	ldi	r24, 0x01	; 1
    2884:	b8 01       	movw	r22, r16
    2886:	0e 94 8c 1b 	call	0x3718	; 0x3718 <recordCoreStats(bool, FullStatsMessageCore const*)>
    // Ensure that no ID is encoded in the message sent on the air since it would be a repeat from the FHT8V frame.
    trailer.containsID = false;
    288a:	89 81       	ldd	r24, Y+1	; 0x01
    288c:	8e 7f       	andi	r24, 0xFE	; 254
    288e:	89 83       	std	Y+1, r24	; 0x01
    2890:	61 e0       	ldi	r22, 0x01	; 1
    }

  return(FHT8VCreateValveSetCmdFrameHT_r(bptr, doHeader, command, TRVPercentOpen, (doTrailer ? &trailer : NULL)));
    2892:	c7 01       	movw	r24, r14
    2894:	a6 01       	movw	r20, r12
    2896:	2b 2d       	mov	r18, r11
    2898:	0e 94 cb 13 	call	0x2796	; 0x2796 <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)>
  }
    289c:	27 96       	adiw	r28, 0x07	; 7
    289e:	0f b6       	in	r0, 0x3f	; 63
    28a0:	f8 94       	cli
    28a2:	de bf       	out	0x3e, r29	; 62
    28a4:	0f be       	out	0x3f, r0	; 63
    28a6:	cd bf       	out	0x3d, r28	; 61
    28a8:	cf 91       	pop	r28
    28aa:	df 91       	pop	r29
    28ac:	1f 91       	pop	r17
    28ae:	0f 91       	pop	r16
    28b0:	ff 90       	pop	r15
    28b2:	ef 90       	pop	r14
    28b4:	df 90       	pop	r13
    28b6:	cf 90       	pop	r12
    28b8:	bf 90       	pop	r11
    28ba:	08 95       	ret

000028bc <FHT8VCreateValveSetCmdFrame()>:
// Create FHT8V TRV outgoing valve-setting command frame (terminated with 0xff) in the shared TX buffer.
// The getTRVPercentOpen() result is used to generate the frame.
// HC1 and HC2 are fetched with the FHT8VGetHC1() and FHT8VGetHC2() calls, and address is always 0.
// The generated command frame can be resent indefinitely.
// If no valve is set up then this may simply terminate an empty buffer with 0xff.
void FHT8VCreateValveSetCmdFrame()
    28bc:	df 93       	push	r29
    28be:	cf 93       	push	r28
    28c0:	00 d0       	rcall	.+0      	; 0x28c2 <FHT8VCreateValveSetCmdFrame()+0x6>
    28c2:	00 d0       	rcall	.+0      	; 0x28c4 <FHT8VCreateValveSetCmdFrame()+0x8>
    28c4:	cd b7       	in	r28, 0x3d	; 61
    28c6:	de b7       	in	r29, 0x3e	; 62
  {
  if(!localFHT8VTRVEnabled())
    28c8:	0e 94 49 10 	call	0x2092	; 0x2092 <localFHT8VTRVEnabled()>
    28cc:	88 23       	and	r24, r24
    28ce:	21 f4       	brne	.+8      	; 0x28d8 <FHT8VCreateValveSetCmdFrame()+0x1c>
    {
    // Ensure that buffer is terminated, though empty.
    FHT8VTXCommandArea[0] = 0xff;
    28d0:	8f ef       	ldi	r24, 0xFF	; 255
    28d2:	80 93 8f 02 	sts	0x028F, r24
    28d6:	1b c0       	rjmp	.+54     	; 0x290e <FHT8VCreateValveSetCmdFrame()+0x52>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    28d8:	f9 99       	sbic	0x1f, 1	; 31
    28da:	fe cf       	rjmp	.-4      	; 0x28d8 <FHT8VCreateValveSetCmdFrame()+0x1c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    28dc:	80 e1       	ldi	r24, 0x10	; 16
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	92 bd       	out	0x22, r25	; 34
    28e2:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    28e4:	f8 9a       	sbi	0x1f, 0	; 31
    28e6:	20 b5       	in	r18, 0x20	; 32
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    28e8:	f9 99       	sbic	0x1f, 1	; 31
    28ea:	fe cf       	rjmp	.-4      	; 0x28e8 <FHT8VCreateValveSetCmdFrame()+0x2c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    28ec:	81 e1       	ldi	r24, 0x11	; 17
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	92 bd       	out	0x22, r25	; 34
    28f2:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    28f4:	f8 9a       	sbi	0x1f, 0	; 31
    28f6:	80 b5       	in	r24, 0x20	; 32
    return;
    }

  fht8v_msg_t command;
  command.hc1 = FHT8VGetHC1();
  command.hc2 = FHT8VGetHC2();
    28f8:	8a 83       	std	Y+2, r24	; 0x02
    28fa:	40 91 00 02 	lds	r20, 0x0200
    FHT8VTXCommandArea[0] = 0xff;
    return;
    }

  fht8v_msg_t command;
  command.hc1 = FHT8VGetHC1();
    28fe:	29 83       	std	Y+1, r18	; 0x01
  command.hc2 = FHT8VGetHC2();
#ifdef FHT8V_ADR_USED
  command.address = 0;
#endif

  FHT8VCreateValveSetCmdFrame_r(FHT8VTXCommandArea, &command, NominalRadValve.get());
    2900:	8f e8       	ldi	r24, 0x8F	; 143
    2902:	92 e0       	ldi	r25, 0x02	; 2
    2904:	be 01       	movw	r22, r28
    2906:	6f 5f       	subi	r22, 0xFF	; 255
    2908:	7f 4f       	sbci	r23, 0xFF	; 255
    290a:	0e 94 1a 14 	call	0x2834	; 0x2834 <FHT8VCreateValveSetCmdFrame_r(unsigned char*, fht8v_msg_t*, unsigned char)>
  }
    290e:	0f 90       	pop	r0
    2910:	0f 90       	pop	r0
    2912:	0f 90       	pop	r0
    2914:	0f 90       	pop	r0
    2916:	cf 91       	pop	r28
    2918:	df 91       	pop	r29
    291a:	08 95       	ret

0000291c <doSync(bool)>:
    }

// Run the algorithm to get in sync with the receiver.
// Uses halfSecondCount.
// Iff this returns true then a(nother) call FHT8VPollSyncAndTX_Next() at or before each 0.5s from the cycle start should be made.
static bool doSync(const bool allowDoubleTX)
    291c:	1f 93       	push	r17
    291e:	df 93       	push	r29
    2920:	cf 93       	push	r28
    2922:	00 d0       	rcall	.+0      	; 0x2924 <doSync(bool)+0x8>
    2924:	00 d0       	rcall	.+0      	; 0x2926 <doSync(bool)+0xa>
    2926:	cd b7       	in	r28, 0x3d	; 61
    2928:	de b7       	in	r29, 0x3e	; 62
    292a:	18 2f       	mov	r17, r24
  {
  // Do not attempt sync at all (and thus do not attempt any other TX) if local FHT8V valve disabled.
  if(!localFHT8VTRVEnabled())
    292c:	0e 94 49 10 	call	0x2092	; 0x2092 <localFHT8VTRVEnabled()>
    2930:	88 23       	and	r24, r24
    2932:	19 f4       	brne	.+6      	; 0x293a <doSync(bool)+0x1e>
    { syncedWithFHT8V = false; return(false); }
    2934:	10 92 8c 02 	sts	0x028C, r1
    2938:	9e c0       	rjmp	.+316    	; 0x2a76 <doSync(bool)+0x15a>

  if(0 == syncStateFHT8V)
    293a:	80 91 8e 02 	lds	r24, 0x028E
    293e:	88 23       	and	r24, r24
    2940:	39 f4       	brne	.+14     	; 0x2950 <doSync(bool)+0x34>
    {
    // Starting sync process.
    syncStateFHT8V = 241;
    2942:	81 ef       	ldi	r24, 0xF1	; 241
    2944:	80 93 8e 02 	sts	0x028E, r24
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_TIMESTAMP();
    DEBUG_SERIAL_PRINT(' ');
    //DEBUG_SERIAL_PRINTLN_FLASHSTRING("FHT8V syncing...");
#endif
    serialPrintlnAndFlush(F("FHT8V SYNC..."));
    2948:	8f e6       	ldi	r24, 0x6F	; 111
    294a:	91 e0       	ldi	r25, 0x01	; 1
    294c:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <serialPrintlnAndFlush(__FlashStringHelper const*)>
    }

  if(syncStateFHT8V >= 2)
    2950:	20 91 8e 02 	lds	r18, 0x028E
    2954:	22 30       	cpi	r18, 0x02	; 2
    2956:	08 f4       	brcc	.+2      	; 0x295a <doSync(bool)+0x3e>
    2958:	45 c0       	rjmp	.+138    	; 0x29e4 <doSync(bool)+0xc8>
    {
    // Generate and send sync (command 12) message immediately for odd-numbered ticks, ie once per second.
    if(syncStateFHT8V & 1)
    295a:	20 ff       	sbrs	r18, 0
    295c:	2b c0       	rjmp	.+86     	; 0x29b4 <doSync(bool)+0x98>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    295e:	f9 99       	sbic	0x1f, 1	; 31
    2960:	fe cf       	rjmp	.-4      	; 0x295e <doSync(bool)+0x42>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2962:	80 e1       	ldi	r24, 0x10	; 16
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	92 bd       	out	0x22, r25	; 34
    2968:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    296a:	f8 9a       	sbi	0x1f, 0	; 31
    296c:	30 b5       	in	r19, 0x20	; 32
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    296e:	f9 99       	sbic	0x1f, 1	; 31
    2970:	fe cf       	rjmp	.-4      	; 0x296e <doSync(bool)+0x52>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2972:	81 e1       	ldi	r24, 0x11	; 17
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	92 bd       	out	0x22, r25	; 34
    2978:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    297a:	f8 9a       	sbi	0x1f, 0	; 31
    297c:	80 b5       	in	r24, 0x20	; 32
      {
      fht8v_msg_t command;
      command.hc1 = FHT8VGetHC1();
      command.hc2 = FHT8VGetHC2();
    297e:	8a 83       	std	Y+2, r24	; 0x02
      command.command = 0x2c; // Command 12, extension byte present.
    2980:	8c e2       	ldi	r24, 0x2C	; 44
    2982:	8b 83       	std	Y+3, r24	; 0x03
      command.extension = syncStateFHT8V;
    2984:	2c 83       	std	Y+4, r18	; 0x04
    {
    // Generate and send sync (command 12) message immediately for odd-numbered ticks, ie once per second.
    if(syncStateFHT8V & 1)
      {
      fht8v_msg_t command;
      command.hc1 = FHT8VGetHC1();
    2986:	39 83       	std	Y+1, r19	; 0x01
      command.hc2 = FHT8VGetHC2();
      command.command = 0x2c; // Command 12, extension byte present.
      command.extension = syncStateFHT8V;
      FHT8VCreate200usBitStreamBptr(FHT8VTXCommandArea, &command);
    2988:	8f e8       	ldi	r24, 0x8F	; 143
    298a:	92 e0       	ldi	r25, 0x02	; 2
    298c:	be 01       	movw	r22, r28
    298e:	6f 5f       	subi	r22, 0xFF	; 255
    2990:	7f 4f       	sbci	r23, 0xFF	; 255
    2992:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>
      if(halfSecondCount > 0)
    2996:	80 91 8b 02 	lds	r24, 0x028B
    299a:	88 23       	and	r24, r24
    299c:	31 f0       	breq	.+12     	; 0x29aa <doSync(bool)+0x8e>
        { sleepUntilSubCycleTimeOptionalRX((SUB_CYCLE_TICKS_PER_S/2) * halfSecondCount); }
    299e:	82 95       	swap	r24
    29a0:	88 0f       	add	r24, r24
    29a2:	88 0f       	add	r24, r24
    29a4:	80 7c       	andi	r24, 0xC0	; 192
    29a6:	0e 94 5f 13 	call	0x26be	; 0x26be <sleepUntilSubCycleTimeOptionalRX(unsigned char)>
      FHT8VTXFHTQueueAndSendCmd(FHT8VTXCommandArea, allowDoubleTX); // SEND SYNC
    29aa:	8f e8       	ldi	r24, 0x8F	; 143
    29ac:	92 e0       	ldi	r25, 0x02	; 2
    29ae:	61 2f       	mov	r22, r17
    29b0:	0e 94 16 13 	call	0x262c	; 0x262c <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)>
      DEBUG_SERIAL_PRINTLN();
#endif
      }

    // After penultimate sync TX set up time to sending of final sync command.
    if(1 == --syncStateFHT8V)
    29b4:	80 91 8e 02 	lds	r24, 0x028E
    29b8:	81 50       	subi	r24, 0x01	; 1
    29ba:	80 93 8e 02 	sts	0x028E, r24
    29be:	81 30       	cpi	r24, 0x01	; 1
    29c0:	09 f0       	breq	.+2      	; 0x29c4 <doSync(bool)+0xa8>
    29c2:	58 c0       	rjmp	.+176    	; 0x2a74 <doSync(bool)+0x158>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    29c4:	f9 99       	sbic	0x1f, 1	; 31
    29c6:	fe cf       	rjmp	.-4      	; 0x29c4 <doSync(bool)+0xa8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    29c8:	81 e1       	ldi	r24, 0x11	; 17
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	92 bd       	out	0x22, r25	; 34
    29ce:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    29d0:	f8 9a       	sbi	0x1f, 0	; 31
    29d2:	90 b5       	in	r25, 0x20	; 32
      {
      // Set up timer to sent sync final (0) command
      // with formula: t = 0.5 * (HC2 & 7) + 4 seconds.
      halfSecondsToNextFHT8VTX = (FHT8VGetHC2() & 7) + 8; // Note units of half-seconds for this counter.
      halfSecondsToNextFHT8VTX -= (MAX_HSC - halfSecondCount);
    29d4:	80 91 8b 02 	lds	r24, 0x028B
    29d8:	8b 5f       	subi	r24, 0xFB	; 251
    29da:	97 70       	andi	r25, 0x07	; 7
    29dc:	89 0f       	add	r24, r25
    29de:	80 93 8d 02 	sts	0x028D, r24
    29e2:	46 c0       	rjmp	.+140    	; 0x2a70 <doSync(bool)+0x154>
      }
    }

  else // syncStateFHT8V == 1 so waiting to send sync final (0) command...
    {
    if(--halfSecondsToNextFHT8VTX == 0)
    29e4:	80 91 8d 02 	lds	r24, 0x028D
    29e8:	81 50       	subi	r24, 0x01	; 1
    29ea:	80 93 8d 02 	sts	0x028D, r24
    29ee:	88 23       	and	r24, r24
    29f0:	09 f0       	breq	.+2      	; 0x29f4 <doSync(bool)+0xd8>
    29f2:	40 c0       	rjmp	.+128    	; 0x2a74 <doSync(bool)+0x158>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    29f4:	f9 99       	sbic	0x1f, 1	; 31
    29f6:	fe cf       	rjmp	.-4      	; 0x29f4 <doSync(bool)+0xd8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    29f8:	80 e1       	ldi	r24, 0x10	; 16
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	92 bd       	out	0x22, r25	; 34
    29fe:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2a00:	f8 9a       	sbi	0x1f, 0	; 31
    2a02:	20 b5       	in	r18, 0x20	; 32
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2a04:	f9 99       	sbic	0x1f, 1	; 31
    2a06:	fe cf       	rjmp	.-4      	; 0x2a04 <doSync(bool)+0xe8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2a08:	81 e1       	ldi	r24, 0x11	; 17
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	92 bd       	out	0x22, r25	; 34
    2a0e:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2a10:	f8 9a       	sbi	0x1f, 0	; 31
    2a12:	80 b5       	in	r24, 0x20	; 32
      {
      // Send sync final command.
      fht8v_msg_t command;
      command.hc1 = FHT8VGetHC1();
      command.hc2 = FHT8VGetHC2();
    2a14:	8a 83       	std	Y+2, r24	; 0x02
      command.command = 0x20; // Command 0, extension byte present.
    2a16:	80 e2       	ldi	r24, 0x20	; 32
    2a18:	8b 83       	std	Y+3, r24	; 0x03
      command.extension = 0; // DHD20130324: could set to TRVPercentOpen, but anything other than zero seems to lock up FHT8V-3 units.
    2a1a:	1c 82       	std	Y+4, r1	; 0x04
      FHT8V_isValveOpen = false; // Note that valve will be closed (0%) upon receipt.
    2a1c:	10 92 cb 02 	sts	0x02CB, r1
    {
    if(--halfSecondsToNextFHT8VTX == 0)
      {
      // Send sync final command.
      fht8v_msg_t command;
      command.hc1 = FHT8VGetHC1();
    2a20:	29 83       	std	Y+1, r18	; 0x01
      command.hc2 = FHT8VGetHC2();
      command.command = 0x20; // Command 0, extension byte present.
      command.extension = 0; // DHD20130324: could set to TRVPercentOpen, but anything other than zero seems to lock up FHT8V-3 units.
      FHT8V_isValveOpen = false; // Note that valve will be closed (0%) upon receipt.
      FHT8VCreate200usBitStreamBptr(FHT8VTXCommandArea, &command);      
    2a22:	8f e8       	ldi	r24, 0x8F	; 143
    2a24:	92 e0       	ldi	r25, 0x02	; 2
    2a26:	be 01       	movw	r22, r28
    2a28:	6f 5f       	subi	r22, 0xFF	; 255
    2a2a:	7f 4f       	sbci	r23, 0xFF	; 255
    2a2c:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>
      if(halfSecondCount > 0) { sleepUntilSubCycleTimeOptionalRX((SUB_CYCLE_TICKS_PER_S/2) * halfSecondCount); }
    2a30:	80 91 8b 02 	lds	r24, 0x028B
    2a34:	88 23       	and	r24, r24
    2a36:	31 f0       	breq	.+12     	; 0x2a44 <doSync(bool)+0x128>
    2a38:	82 95       	swap	r24
    2a3a:	88 0f       	add	r24, r24
    2a3c:	88 0f       	add	r24, r24
    2a3e:	80 7c       	andi	r24, 0xC0	; 192
    2a40:	0e 94 5f 13 	call	0x26be	; 0x26be <sleepUntilSubCycleTimeOptionalRX(unsigned char)>
      FHT8VTXFHTQueueAndSendCmd(FHT8VTXCommandArea, allowDoubleTX); // SEND SYNC FINAL
    2a44:	8f e8       	ldi	r24, 0x8F	; 143
    2a46:	92 e0       	ldi	r25, 0x02	; 2
    2a48:	61 2f       	mov	r22, r17
    2a4a:	0e 94 16 13 	call	0x262c	; 0x262c <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)>
#if 0 && defined(DEBUG)
      DEBUG_SERIAL_TIMESTAMP();
      DEBUG_SERIAL_PRINT(' ');
      //DEBUG_SERIAL_PRINTLN_FLASHSTRING(" FHT8V SYNC FINAL");
#endif
      serialPrintlnAndFlush(F("FHT8V SYNC FINAL"));
    2a4e:	8e e5       	ldi	r24, 0x5E	; 94
    2a50:	91 e0       	ldi	r25, 0x01	; 1
    2a52:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <serialPrintlnAndFlush(__FlashStringHelper const*)>

      // Assume now in sync...
      syncedWithFHT8V = true;
    2a56:	81 e0       	ldi	r24, 0x01	; 1
    2a58:	80 93 8c 02 	sts	0x028C, r24
      // On PICAXE there was no time to recompute valve-setting command immediately after SYNC FINAL SEND...
      // Mark buffer as empty to get it filled with the real TRV valve-setting command ASAP.
      //*FHT8VTXCommandArea = 0xff;

      // On ATmega there is plenty of CPU heft to fill command buffer immediately with valve-setting command.
      FHT8VCreateValveSetCmdFrame();
    2a5c:	0e 94 5e 14 	call	0x28bc	; 0x28bc <FHT8VCreateValveSetCmdFrame()>

      // Set up correct delay to next TX; no more this minor cycle...
      halfSecondsToNextFHT8VTX = FHT8VTXGapHalfSeconds(command.hc2, halfSecondCount);
    2a60:	90 91 8b 02 	lds	r25, 0x028B
    2a64:	9d 51       	subi	r25, 0x1D	; 29
    2a66:	8a 81       	ldd	r24, Y+2	; 0x02
    2a68:	87 70       	andi	r24, 0x07	; 7
    2a6a:	98 0f       	add	r25, r24
    2a6c:	90 93 8d 02 	sts	0x028D, r25
    2a70:	80 e0       	ldi	r24, 0x00	; 0
    2a72:	01 c0       	rjmp	.+2      	; 0x2a76 <doSync(bool)+0x15a>
      return(false);
    2a74:	81 e0       	ldi	r24, 0x01	; 1
    }

  // For simplicity, insist on being called every half-second during sync.
  // TODO: avoid forcing most of these calls to save some CPU/energy and improve responsiveness.
  return(true);
  }
    2a76:	0f 90       	pop	r0
    2a78:	0f 90       	pop	r0
    2a7a:	0f 90       	pop	r0
    2a7c:	0f 90       	pop	r0
    2a7e:	cf 91       	pop	r28
    2a80:	df 91       	pop	r29
    2a82:	1f 91       	pop	r17
    2a84:	08 95       	ret

00002a86 <FHT8VPollSyncAndTX_Next(bool)>:
//
// ALSO MANAGES RX FROM OTHER NODES WHEN ENABLED IN HUB MODE.
//
// Iff this returns false then no further TX slots will be needed
// (and thus this routine need not be called again) on this minor cycle
bool FHT8VPollSyncAndTX_Next(const bool allowDoubleTX)
    2a86:	1f 93       	push	r17
    2a88:	18 2f       	mov	r17, r24
  {
  ++halfSecondCount; // Reflects count of calls since _First(), ie how many 
    2a8a:	90 91 8b 02 	lds	r25, 0x028B
    2a8e:	9f 5f       	subi	r25, 0xFF	; 255
    2a90:	90 93 8b 02 	sts	0x028B, r25
#else

  // Give priority to getting in sync over all other tasks, though pass control to them afterwards...
  // NOTE: startup state, or state to force resync is: syncedWithFHT8V = 0 AND syncStateFHT8V = 0
  // Always make maximum effort to be heard by valve when syncing (ie do double TX).
  if(!syncedWithFHT8V) { return(doSync(true)); }
    2a94:	80 91 8c 02 	lds	r24, 0x028C
    2a98:	88 23       	and	r24, r24
    2a9a:	21 f4       	brne	.+8      	; 0x2aa4 <FHT8VPollSyncAndTX_Next(bool)+0x1e>
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	0e 94 8e 14 	call	0x291c	; 0x291c <doSync(bool)>
    2aa2:	27 c0       	rjmp	.+78     	; 0x2af2 <FHT8VPollSyncAndTX_Next(bool)+0x6c>

  // TX is due this slot so do it (and no more will be needed this minor cycle).
  if(0 == --halfSecondsToNextFHT8VTX)
    2aa4:	80 91 8d 02 	lds	r24, 0x028D
    2aa8:	81 50       	subi	r24, 0x01	; 1
    2aaa:	80 93 8d 02 	sts	0x028D, r24
    2aae:	88 23       	and	r24, r24
    2ab0:	11 f0       	breq	.+4      	; 0x2ab6 <FHT8VPollSyncAndTX_Next(bool)+0x30>
    2ab2:	81 e0       	ldi	r24, 0x01	; 1
    2ab4:	1e c0       	rjmp	.+60     	; 0x2af2 <FHT8VPollSyncAndTX_Next(bool)+0x6c>
    {
    sleepUntilSubCycleTimeOptionalRX((SUB_CYCLE_TICKS_PER_S/2) * halfSecondCount); // Sleep.
    2ab6:	89 2f       	mov	r24, r25
    2ab8:	82 95       	swap	r24
    2aba:	88 0f       	add	r24, r24
    2abc:	88 0f       	add	r24, r24
    2abe:	80 7c       	andi	r24, 0xC0	; 192
    2ac0:	0e 94 5f 13 	call	0x26be	; 0x26be <sleepUntilSubCycleTimeOptionalRX(unsigned char)>
    valveSettingTX(allowDoubleTX); // Should be heard by valve.
    2ac4:	81 2f       	mov	r24, r17
    2ac6:	0e 94 4c 13 	call	0x2698	; 0x2698 <valveSettingTX(bool)>
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_TIMESTAMP();
    DEBUG_SERIAL_PRINT(' ');
    // DEBUG_SERIAL_PRINTLN_FLASHSTRING(" FHT8V TX");
#endif
    serialPrintlnAndFlush(F("FHT8V TX"));
    2aca:	85 e5       	ldi	r24, 0x55	; 85
    2acc:	91 e0       	ldi	r25, 0x01	; 1
    2ace:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <serialPrintlnAndFlush(__FlashStringHelper const*)>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2ad2:	f9 99       	sbic	0x1f, 1	; 31
    2ad4:	fe cf       	rjmp	.-4      	; 0x2ad2 <FHT8VPollSyncAndTX_Next(bool)+0x4c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2ad6:	81 e1       	ldi	r24, 0x11	; 17
    2ad8:	90 e0       	ldi	r25, 0x00	; 0
    2ada:	92 bd       	out	0x22, r25	; 34
    2adc:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2ade:	f8 9a       	sbi	0x1f, 0	; 31
    2ae0:	90 b5       	in	r25, 0x20	; 32

    // Set up correct delay to next TX.
    halfSecondsToNextFHT8VTX = FHT8VTXGapHalfSeconds(FHT8VGetHC2(), halfSecondCount);
    2ae2:	80 91 8b 02 	lds	r24, 0x028B
    2ae6:	8d 51       	subi	r24, 0x1D	; 29
    2ae8:	97 70       	andi	r25, 0x07	; 7
    2aea:	89 0f       	add	r24, r25
    2aec:	80 93 8d 02 	sts	0x028D, r24
    2af0:	80 e0       	ldi	r24, 0x00	; 0
    }

  // Will need to TX in a following slot in this minor cycle...
  return(true);
#endif
  }
    2af2:	1f 91       	pop	r17
    2af4:	08 95       	ret

00002af6 <FHT8VPollSyncAndTX_First(bool)>:
//
// Iff this returns true then call FHT8VPollSyncAndTX_Next() at or before each 0.5s from the cycle start
// to allow for possible transmissions.
//
// See https://sourceforge.net/p/opentrv/wiki/FHT%20Protocol/ for the underlying protocol.
bool FHT8VPollSyncAndTX_First(const bool allowDoubleTX)
    2af6:	98 2f       	mov	r25, r24
  {
  halfSecondCount = 0;
    2af8:	10 92 8b 02 	sts	0x028B, r1
#else

  // Give priority to getting in sync over all other tasks, though pass control to them afterwards...
  // NOTE: startup state, or state to force resync is: syncedWithFHT8V = 0 AND syncStateFHT8V = 0
  // Always make maximum effort to be heard by valve when syncing (ie do double TX).
  if(!syncedWithFHT8V) { return(doSync(true)); }
    2afc:	80 91 8c 02 	lds	r24, 0x028C
    2b00:	88 23       	and	r24, r24
    2b02:	21 f4       	brne	.+8      	; 0x2b0c <FHT8VPollSyncAndTX_First(bool)+0x16>
    2b04:	81 e0       	ldi	r24, 0x01	; 1
    2b06:	0e 94 8e 14 	call	0x291c	; 0x291c <doSync(bool)>
    2b0a:	08 95       	ret
#if 0 && defined(DEBUG)
   if(0 == halfSecondsToNextFHT8VTX) { panic(F("FHT8V hs count 0 too soon")); }
#endif

  // If no TX required in this minor cycle then can return false quickly (having decremented ticks-to-next-TX value suitably).
  if(halfSecondsToNextFHT8VTX > MAX_HSC+1)
    2b0c:	80 91 8d 02 	lds	r24, 0x028D
    2b10:	85 30       	cpi	r24, 0x05	; 5
    2b12:	28 f0       	brcs	.+10     	; 0x2b1e <FHT8VPollSyncAndTX_First(bool)+0x28>
    {
    halfSecondsToNextFHT8VTX -= (MAX_HSC+1);
    2b14:	84 50       	subi	r24, 0x04	; 4
    2b16:	80 93 8d 02 	sts	0x028D, r24
    2b1a:	80 e0       	ldi	r24, 0x00	; 0
    2b1c:	08 95       	ret
    return(false); // No TX this minor cycle.
    }

  // TX is due this (first) slot so do it (and no more will be needed this minor cycle).
  if(0 == --halfSecondsToNextFHT8VTX)
    2b1e:	81 50       	subi	r24, 0x01	; 1
    2b20:	80 93 8d 02 	sts	0x028D, r24
    2b24:	88 23       	and	r24, r24
    2b26:	11 f0       	breq	.+4      	; 0x2b2c <FHT8VPollSyncAndTX_First(bool)+0x36>
    2b28:	81 e0       	ldi	r24, 0x01	; 1
    2b2a:	08 95       	ret
    {
    valveSettingTX(allowDoubleTX); // Should be heard by valve.
    2b2c:	89 2f       	mov	r24, r25
    2b2e:	0e 94 4c 13 	call	0x2698	; 0x2698 <valveSettingTX(bool)>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2b32:	f9 99       	sbic	0x1f, 1	; 31
    2b34:	fe cf       	rjmp	.-4      	; 0x2b32 <FHT8VPollSyncAndTX_First(bool)+0x3c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2b36:	81 e1       	ldi	r24, 0x11	; 17
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	92 bd       	out	0x22, r25	; 34
    2b3c:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2b3e:	f8 9a       	sbi	0x1f, 0	; 31
    2b40:	80 b5       	in	r24, 0x20	; 32
    DEBUG_SERIAL_PRINT(' ');
    // DEBUG_SERIAL_PRINTLN_FLASHSTRING(" FHT8V TX");
    serialPrintlnAndFlush(F("FHT8V TX"));
#endif
    // Set up correct delay to next TX.
    halfSecondsToNextFHT8VTX = FHT8VTXGapHalfSeconds(FHT8VGetHC2(), 0);
    2b42:	87 70       	andi	r24, 0x07	; 7
    2b44:	8d 51       	subi	r24, 0x1D	; 29
    2b46:	80 93 8d 02 	sts	0x028D, r24
    2b4a:	80 e0       	ldi	r24, 0x00	; 0
    }

  // Will need to TX in a following slot in this minor cycle...
  return(true);
#endif
  }
    2b4c:	08 95       	ret

00002b4e <verifyHeaderAndCRCForTrailingMinimalStatsPayload(unsigned char const*)>:




// Return true if header/structure and CRC looks valid for (3-byte) buffered stats payload.
bool verifyHeaderAndCRCForTrailingMinimalStatsPayload(uint8_t const *const buf)
    2b4e:	fc 01       	movw	r30, r24
  {
  return((MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MSBS == ((buf[0]) & MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MASK)) && // Plausible header.
         (0 == (buf[1] & 0x80)) && // Top bit is clear on this byte also.
         (buf[2] == crc7_5B_update(buf[0], buf[1]))); // CRC validates, top bit implicitly zero.
    2b50:	30 81       	ld	r19, Z
    2b52:	83 2f       	mov	r24, r19
    2b54:	80 7e       	andi	r24, 0xE0	; 224
    2b56:	80 34       	cpi	r24, 0x40	; 64
    2b58:	51 f5       	brne	.+84     	; 0x2bae <verifyHeaderAndCRCForTrailingMinimalStatsPayload(unsigned char const*)+0x60>
    2b5a:	81 81       	ldd	r24, Z+1	; 0x01
    2b5c:	87 fd       	sbrc	r24, 7
    2b5e:	27 c0       	rjmp	.+78     	; 0x2bae <verifyHeaderAndCRCForTrailingMinimalStatsPayload(unsigned char const*)+0x60>
    2b60:	72 81       	ldd	r23, Z+2	; 0x02
    2b62:	60 e8       	ldi	r22, 0x80	; 128
    2b64:	40 e0       	ldi	r20, 0x00	; 0
    2b66:	50 e0       	ldi	r21, 0x00	; 0
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    2b68:	e8 2f       	mov	r30, r24
    2b6a:	f0 e0       	ldi	r31, 0x00	; 0
    2b6c:	b1 e0       	ldi	r27, 0x01	; 1
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
    2b6e:	a7 e3       	ldi	r26, 0x37	; 55
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
    2b70:	83 2f       	mov	r24, r19
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	26 e0       	ldi	r18, 0x06	; 6
    2b76:	96 95       	lsr	r25
    2b78:	87 95       	ror	r24
    2b7a:	2a 95       	dec	r18
    2b7c:	e1 f7       	brne	.-8      	; 0x2b76 <verifyHeaderAndCRCForTrailingMinimalStatsPayload(unsigned char const*)+0x28>
    2b7e:	28 2f       	mov	r18, r24
    2b80:	21 70       	andi	r18, 0x01	; 1
        if(0 != (datum & i)) { bit = !bit; }
    2b82:	86 2f       	mov	r24, r22
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	8e 23       	and	r24, r30
    2b88:	9f 23       	and	r25, r31
    2b8a:	89 2b       	or	r24, r25
    2b8c:	09 f0       	breq	.+2      	; 0x2b90 <verifyHeaderAndCRCForTrailingMinimalStatsPayload(unsigned char const*)+0x42>
    2b8e:	2b 27       	eor	r18, r27
        crc <<= 1;
    2b90:	33 0f       	add	r19, r19
        if(bit) { crc ^= 0x37; }
    2b92:	21 11       	cpse	r18, r1
    2b94:	3a 27       	eor	r19, r26
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
    2b96:	66 95       	lsr	r22
    2b98:	4f 5f       	subi	r20, 0xFF	; 255
    2b9a:	5f 4f       	sbci	r21, 0xFF	; 255
    2b9c:	48 30       	cpi	r20, 0x08	; 8
    2b9e:	51 05       	cpc	r21, r1
    2ba0:	39 f7       	brne	.-50     	; 0x2b70 <verifyHeaderAndCRCForTrailingMinimalStatsPayload(unsigned char const*)+0x22>
    2ba2:	80 e0       	ldi	r24, 0x00	; 0
    2ba4:	3f 77       	andi	r19, 0x7F	; 127
    2ba6:	73 17       	cp	r23, r19
    2ba8:	19 f4       	brne	.+6      	; 0x2bb0 <verifyHeaderAndCRCForTrailingMinimalStatsPayload(unsigned char const*)+0x62>
    2baa:	81 e0       	ldi	r24, 0x01	; 1
    2bac:	08 95       	ret
// Return true if header/structure and CRC looks valid for (3-byte) buffered stats payload.
bool verifyHeaderAndCRCForTrailingMinimalStatsPayload(uint8_t const *const buf)
  {
  return((MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MSBS == ((buf[0]) & MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MASK)) && // Plausible header.
         (0 == (buf[1] & 0x80)) && // Top bit is clear on this byte also.
         (buf[2] == crc7_5B_update(buf[0], buf[1]))); // CRC validates, top bit implicitly zero.
    2bae:	80 e0       	ldi	r24, 0x00	; 0
  }
    2bb0:	08 95       	ret

00002bb2 <getInboundStatsQueueOverrun()>:
static uint16_t inboundStatsQueueOverrun = 0;

// Get count of dropped inbound stats messages due to insufficient queue space.
uint16_t getInboundStatsQueueOverrun()
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    2bb2:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2bb4:	f8 94       	cli
    { return(inboundStatsQueueOverrun); }
    2bb6:	80 91 d8 02 	lds	r24, 0x02D8
    2bba:	90 91 d9 02 	lds	r25, 0x02D9
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2bbe:	2f bf       	out	0x3f, r18	; 63
  }
    2bc0:	08 95       	ret

00002bc2 <enableTrailingMinimalStatsPayload()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2bc2:	f9 99       	sbic	0x1f, 1	; 31
    2bc4:	fe cf       	rjmp	.-4      	; 0x2bc2 <enableTrailingMinimalStatsPayload()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2bc6:	8c e1       	ldi	r24, 0x1C	; 28
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	92 bd       	out	0x22, r25	; 34
    2bcc:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2bce:	f8 9a       	sbi	0x1f, 0	; 31
    2bd0:	80 b5       	in	r24, 0x20	; 32
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	82 30       	cpi	r24, 0x02	; 2
    2bd6:	08 f4       	brcc	.+2      	; 0x2bda <enableTrailingMinimalStatsPayload()+0x18>
    2bd8:	91 e0       	ldi	r25, 0x01	; 1
#if !defined(enableTrailingMinimalStatsPayload)
// Returns true if an unencrypted minimal trailing static payload and similar (eg bare stats transmission) is permitted.
// True if the TX_ENABLE value is no higher than stTXmostUnsec.
// Some filtering may be required even if this is true.
// TODO: allow cacheing in RAM for speed.
bool enableTrailingMinimalStatsPayload() { return(eeprom_read_byte((uint8_t *)EE_START_STATS_TX_ENABLE) <= stTXmostUnsec); }
    2bda:	89 2f       	mov	r24, r25
    2bdc:	08 95       	ret

00002bde <quickValidateRawSimpleJSONMessage(char const*)>:
// Returns true unless the buffer clearly does not contain a possible valid raw JSON message.
// This message is expected to be one object wrapped in '{' and '}'
// and containing only ASCII printable/non-control characters in the range [32,126].
// The message must be no longer than MSG_JSON_MAX_LENGTH excluding trailing null.
// This only does a quick validation for egregious errors.
bool quickValidateRawSimpleJSONMessage(const char * const buf)
    2bde:	fc 01       	movw	r30, r24
  {
  if('{' != buf[0]) { return(false); }
    2be0:	80 81       	ld	r24, Z
    2be2:	8b 37       	cpi	r24, 0x7B	; 123
    2be4:	a9 f4       	brne	.+42     	; 0x2c10 <quickValidateRawSimpleJSONMessage(char const*)+0x32>
  // Scan up to maximum length for terminating '}'.
  const char *p = buf + 1;
  for(int i = 1; i < MSG_JSON_MAX_LENGTH; ++i)
    2be6:	9f 01       	movw	r18, r30
    2be8:	2a 5c       	subi	r18, 0xCA	; 202
    2bea:	3f 4f       	sbci	r19, 0xFF	; 255
    {
    const char c = *p++;
    2bec:	91 81       	ldd	r25, Z+1	; 0x01
    // With a terminating '}' (followed by '\0') the message is superficially valid.
    if(('}' == c) && ('\0' == *p)) { return(true); }
    2bee:	9d 37       	cpi	r25, 0x7D	; 125
    2bf0:	29 f4       	brne	.+10     	; 0x2bfc <quickValidateRawSimpleJSONMessage(char const*)+0x1e>
    2bf2:	82 81       	ldd	r24, Z+2	; 0x02
    2bf4:	88 23       	and	r24, r24
    2bf6:	11 f4       	brne	.+4      	; 0x2bfc <quickValidateRawSimpleJSONMessage(char const*)+0x1e>
    2bf8:	81 e0       	ldi	r24, 0x01	; 1
    2bfa:	08 95       	ret
    // Non-printable/control character makes the message invalid.
    if((c < 32) || (c > 126)) { return(false); }
    2bfc:	89 2f       	mov	r24, r25
    2bfe:	80 52       	subi	r24, 0x20	; 32
    2c00:	8f 35       	cpi	r24, 0x5F	; 95
    2c02:	30 f4       	brcc	.+12     	; 0x2c10 <quickValidateRawSimpleJSONMessage(char const*)+0x32>
    // Premature end of message renders it invalid.
    if('\0' == c) { return(false); }
    2c04:	99 23       	and	r25, r25
    2c06:	21 f0       	breq	.+8      	; 0x2c10 <quickValidateRawSimpleJSONMessage(char const*)+0x32>
    2c08:	31 96       	adiw	r30, 0x01	; 1
bool quickValidateRawSimpleJSONMessage(const char * const buf)
  {
  if('{' != buf[0]) { return(false); }
  // Scan up to maximum length for terminating '}'.
  const char *p = buf + 1;
  for(int i = 1; i < MSG_JSON_MAX_LENGTH; ++i)
    2c0a:	e2 17       	cp	r30, r18
    2c0c:	f3 07       	cpc	r31, r19
    2c0e:	71 f7       	brne	.-36     	; 0x2bec <quickValidateRawSimpleJSONMessage(char const*)+0xe>
    2c10:	80 e0       	ldi	r24, 0x00	; 0
    if((c < 32) || (c > 126)) { return(false); }
    // Premature end of message renders it invalid.
    if('\0' == c) { return(false); }
    }
  return(false); // Bad (unterminated) message.
  }
    2c12:	08 95       	ret

00002c14 <adjustJSONMsgForTXAndComputeCRC(char*)>:
// Computes and returns 0x5B 7-bit CRC in range [0,127]
// or 0xff if the JSON message obviously invalid and should not be TXed.
// The CRC is initialised with the initial '{' character.
// NOTE: adjusts content in place.
#define adjustJSONMsgForTXAndComputeCRC_ERR 0xff // Error return value.
uint8_t adjustJSONMsgForTXAndComputeCRC(char * const bptr)
    2c14:	0f 93       	push	r16
    2c16:	1f 93       	push	r17
    2c18:	18 2f       	mov	r17, r24
    2c1a:	09 2f       	mov	r16, r25
  {
  // Do initial quick validation before computing CRC, etc,
  if(!quickValidateRawSimpleJSONMessage(bptr)) { return(adjustJSONMsgForTXAndComputeCRC_ERR); }
    2c1c:	0e 94 ef 15 	call	0x2bde	; 0x2bde <quickValidateRawSimpleJSONMessage(char const*)>
    2c20:	88 23       	and	r24, r24
    2c22:	09 f4       	brne	.+2      	; 0x2c26 <adjustJSONMsgForTXAndComputeCRC(char*)+0x12>
    2c24:	51 c0       	rjmp	.+162    	; 0x2cc8 <adjustJSONMsgForTXAndComputeCRC(char*)+0xb4>
    2c26:	81 2f       	mov	r24, r17
    2c28:	90 2f       	mov	r25, r16
    2c2a:	9c 01       	movw	r18, r24
    2c2c:	f9 01       	movw	r30, r18
    2c2e:	6b e7       	ldi	r22, 0x7B	; 123
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    2c30:	11 e0       	ldi	r17, 0x01	; 1
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
    2c32:	77 e3       	ldi	r23, 0x37	; 55
    2c34:	44 c0       	rjmp	.+136    	; 0x2cbe <adjustJSONMsgForTXAndComputeCRC(char*)+0xaa>
  uint8_t crc = '{';
  for(char *p = bptr; *++p; ) // Skip first char ('{'); loop until '\0'.
    {
    const char c = *p;
//    if(c & 0x80) { return(adjustJSONMsgForTXAndComputeCRC_ERR); } // No high-bits should be set!
    if(('}' == c) && ('\0' == *(p+1)))
    2c36:	9d 37       	cpi	r25, 0x7D	; 125
    2c38:	19 f5       	brne	.+70     	; 0x2c80 <adjustJSONMsgForTXAndComputeCRC(char*)+0x6c>
    2c3a:	81 81       	ldd	r24, Z+1	; 0x01
    2c3c:	88 23       	and	r24, r24
    2c3e:	01 f5       	brne	.+64     	; 0x2c80 <adjustJSONMsgForTXAndComputeCRC(char*)+0x6c>
      {
      seenTrailingClosingBrace = true;
      const char newC = c | 0x80;
      *p = newC; // Set high bit.
    2c40:	8d ef       	ldi	r24, 0xFD	; 253
    2c42:	80 83       	st	Z, r24
    2c44:	40 e8       	ldi	r20, 0x80	; 128
    2c46:	20 e0       	ldi	r18, 0x00	; 0
    2c48:	30 e0       	ldi	r19, 0x00	; 0
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    2c4a:	71 e0       	ldi	r23, 0x01	; 1
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
    2c4c:	57 e3       	ldi	r21, 0x37	; 55
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
    2c4e:	86 2f       	mov	r24, r22
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	e6 e0       	ldi	r30, 0x06	; 6
    2c54:	96 95       	lsr	r25
    2c56:	87 95       	ror	r24
    2c58:	ea 95       	dec	r30
    2c5a:	e1 f7       	brne	.-8      	; 0x2c54 <adjustJSONMsgForTXAndComputeCRC(char*)+0x40>
    2c5c:	98 2f       	mov	r25, r24
    2c5e:	91 70       	andi	r25, 0x01	; 1
        if(0 != (datum & i)) { bit = !bit; }
    2c60:	84 2f       	mov	r24, r20
    2c62:	8d 7f       	andi	r24, 0xFD	; 253
    2c64:	09 f0       	breq	.+2      	; 0x2c68 <adjustJSONMsgForTXAndComputeCRC(char*)+0x54>
    2c66:	97 27       	eor	r25, r23
        crc <<= 1;
    2c68:	66 0f       	add	r22, r22
        if(bit) { crc ^= 0x37; }
    2c6a:	91 11       	cpse	r25, r1
    2c6c:	65 27       	eor	r22, r21
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
    2c6e:	46 95       	lsr	r20
    2c70:	2f 5f       	subi	r18, 0xFF	; 255
    2c72:	3f 4f       	sbci	r19, 0xFF	; 255
    2c74:	28 30       	cpi	r18, 0x08	; 8
    2c76:	31 05       	cpc	r19, r1
    2c78:	51 f7       	brne	.-44     	; 0x2c4e <adjustJSONMsgForTXAndComputeCRC(char*)+0x3a>
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
        }
    return(crc & 0x7f);
    2c7a:	86 2f       	mov	r24, r22
    2c7c:	8f 77       	andi	r24, 0x7F	; 127
    2c7e:	25 c0       	rjmp	.+74     	; 0x2cca <adjustJSONMsgForTXAndComputeCRC(char*)+0xb6>
      const char newC = c | 0x80;
      *p = newC; // Set high bit.
      crc = crc7_5B_update(crc, (uint8_t)newC); // Update CRC.
      return(crc);
      }
    crc = crc7_5B_update(crc, (uint8_t)c); // Update CRC.
    2c80:	30 e8       	ldi	r19, 0x80	; 128
    2c82:	40 e0       	ldi	r20, 0x00	; 0
    2c84:	50 e0       	ldi	r21, 0x00	; 0
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    2c86:	a9 2f       	mov	r26, r25
    2c88:	b0 e0       	ldi	r27, 0x00	; 0
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
    2c8a:	86 2f       	mov	r24, r22
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	06 e0       	ldi	r16, 0x06	; 6
    2c90:	96 95       	lsr	r25
    2c92:	87 95       	ror	r24
    2c94:	0a 95       	dec	r16
    2c96:	e1 f7       	brne	.-8      	; 0x2c90 <adjustJSONMsgForTXAndComputeCRC(char*)+0x7c>
    2c98:	28 2f       	mov	r18, r24
    2c9a:	21 70       	andi	r18, 0x01	; 1
        if(0 != (datum & i)) { bit = !bit; }
    2c9c:	83 2f       	mov	r24, r19
    2c9e:	90 e0       	ldi	r25, 0x00	; 0
    2ca0:	8a 23       	and	r24, r26
    2ca2:	9b 23       	and	r25, r27
    2ca4:	89 2b       	or	r24, r25
    2ca6:	09 f0       	breq	.+2      	; 0x2caa <adjustJSONMsgForTXAndComputeCRC(char*)+0x96>
    2ca8:	21 27       	eor	r18, r17
        crc <<= 1;
    2caa:	66 0f       	add	r22, r22
        if(bit) { crc ^= 0x37; }
    2cac:	21 11       	cpse	r18, r1
    2cae:	67 27       	eor	r22, r23
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
    2cb0:	36 95       	lsr	r19
    2cb2:	4f 5f       	subi	r20, 0xFF	; 255
    2cb4:	5f 4f       	sbci	r21, 0xFF	; 255
    2cb6:	48 30       	cpi	r20, 0x08	; 8
    2cb8:	51 05       	cpc	r21, r1
    2cba:	39 f7       	brne	.-50     	; 0x2c8a <adjustJSONMsgForTXAndComputeCRC(char*)+0x76>
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
        }
    return(crc & 0x7f);
    2cbc:	6f 77       	andi	r22, 0x7F	; 127
  // Do initial quick validation before computing CRC, etc,
  if(!quickValidateRawSimpleJSONMessage(bptr)) { return(adjustJSONMsgForTXAndComputeCRC_ERR); }
//  if('{' != *bptr) { return(adjustJSONMsgForTXAndComputeCRC_ERR); }
  bool seenTrailingClosingBrace = false;
  uint8_t crc = '{';
  for(char *p = bptr; *++p; ) // Skip first char ('{'); loop until '\0'.
    2cbe:	31 96       	adiw	r30, 0x01	; 1
    2cc0:	90 81       	ld	r25, Z
    2cc2:	99 23       	and	r25, r25
    2cc4:	09 f0       	breq	.+2      	; 0x2cc8 <adjustJSONMsgForTXAndComputeCRC(char*)+0xb4>
    2cc6:	b7 cf       	rjmp	.-146    	; 0x2c36 <adjustJSONMsgForTXAndComputeCRC(char*)+0x22>
    2cc8:	8f ef       	ldi	r24, 0xFF	; 255
      }
    crc = crc7_5B_update(crc, (uint8_t)c); // Update CRC.
    }
  if(!seenTrailingClosingBrace) { return(adjustJSONMsgForTXAndComputeCRC_ERR); } // Missing ending '}'.
  return(crc);
  }
    2cca:	1f 91       	pop	r17
    2ccc:	0f 91       	pop	r16
    2cce:	08 95       	ret

00002cd0 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)>:
// to allow easy handling with string functions.
//  * bptr  pointer to first byte/char (which must be '{')
//  * bufLen  remaining bytes in buffer starting at bptr
// NOTE: adjusts content in place iff the message appears to be valid JSON.
#define adjustJSONMsgForRXAndCheckCRC_ERR -1
int8_t adjustJSONMsgForRXAndCheckCRC(char * const bptr, const uint8_t bufLen)
    2cd0:	cf 92       	push	r12
    2cd2:	df 92       	push	r13
    2cd4:	ef 92       	push	r14
    2cd6:	ff 92       	push	r15
    2cd8:	0f 93       	push	r16
    2cda:	1f 93       	push	r17
    2cdc:	cf 93       	push	r28
    2cde:	df 93       	push	r29
    2ce0:	fc 01       	movw	r30, r24
  {
  if('{' != *bptr) { return(adjustJSONMsgForRXAndCheckCRC_ERR); }
    2ce2:	80 81       	ld	r24, Z
    2ce4:	8b 37       	cpi	r24, 0x7B	; 123
    2ce6:	09 f0       	breq	.+2      	; 0x2cea <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x1a>
    2ce8:	43 c0       	rjmp	.+134    	; 0x2d70 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0xa0>
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("adjustJSONMsgForRXAndCheckCRC()... {");
#endif
  uint8_t crc = '{';
  // Scan up to maximum length for terminating '}'-with-high-bit.
  const uint8_t ml = min(MSG_JSON_MAX_LENGTH, bufLen);
    2cea:	68 33       	cpi	r22, 0x38	; 56
    2cec:	08 f0       	brcs	.+2      	; 0x2cf0 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x20>
    2cee:	67 e3       	ldi	r22, 0x37	; 55
  char *p = bptr + 1;
    2cf0:	ef 01       	movw	r28, r30
    2cf2:	21 96       	adiw	r28, 0x01	; 1
    2cf4:	3b e7       	ldi	r19, 0x7B	; 123
    2cf6:	a1 e0       	ldi	r26, 0x01	; 1
    2cf8:	b0 e0       	ldi	r27, 0x00	; 0
  for(int i = 1; i < ml; ++i)
    2cfa:	e6 2e       	mov	r14, r22
    2cfc:	ff 24       	eor	r15, r15
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    2cfe:	cc 24       	eor	r12, r12
    2d00:	c3 94       	inc	r12
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
    2d02:	47 e3       	ldi	r20, 0x37	; 55
    2d04:	d4 2e       	mov	r13, r20
    2d06:	31 c0       	rjmp	.+98     	; 0x2d6a <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x9a>
  // Scan up to maximum length for terminating '}'-with-high-bit.
  const uint8_t ml = min(MSG_JSON_MAX_LENGTH, bufLen);
  char *p = bptr + 1;
  for(int i = 1; i < ml; ++i)
    {
    const char c = *p++;
    2d08:	fe 01       	movw	r30, r28
    2d0a:	71 91       	ld	r23, Z+
    crc = crc7_5B_update(crc, (uint8_t)c); // Update CRC.
    2d0c:	60 e8       	ldi	r22, 0x80	; 128
    2d0e:	40 e0       	ldi	r20, 0x00	; 0
    2d10:	50 e0       	ldi	r21, 0x00	; 0
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    2d12:	07 2f       	mov	r16, r23
    2d14:	10 e0       	ldi	r17, 0x00	; 0
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
    2d16:	83 2f       	mov	r24, r19
    2d18:	90 e0       	ldi	r25, 0x00	; 0
    2d1a:	26 e0       	ldi	r18, 0x06	; 6
    2d1c:	96 95       	lsr	r25
    2d1e:	87 95       	ror	r24
    2d20:	2a 95       	dec	r18
    2d22:	e1 f7       	brne	.-8      	; 0x2d1c <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x4c>
    2d24:	28 2f       	mov	r18, r24
    2d26:	21 70       	andi	r18, 0x01	; 1
        if(0 != (datum & i)) { bit = !bit; }
    2d28:	86 2f       	mov	r24, r22
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	80 23       	and	r24, r16
    2d2e:	91 23       	and	r25, r17
    2d30:	89 2b       	or	r24, r25
    2d32:	09 f0       	breq	.+2      	; 0x2d36 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x66>
    2d34:	2c 25       	eor	r18, r12
        crc <<= 1;
    2d36:	33 0f       	add	r19, r19
        if(bit) { crc ^= 0x37; }
    2d38:	21 11       	cpse	r18, r1
    2d3a:	3d 25       	eor	r19, r13
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
    2d3c:	66 95       	lsr	r22
    2d3e:	4f 5f       	subi	r20, 0xFF	; 255
    2d40:	5f 4f       	sbci	r21, 0xFF	; 255
    2d42:	48 30       	cpi	r20, 0x08	; 8
    2d44:	51 05       	cpc	r21, r1
    2d46:	39 f7       	brne	.-50     	; 0x2d16 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x46>
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
        }
    return(crc & 0x7f);
    2d48:	3f 77       	andi	r19, 0x7F	; 127
#endif
      return(i+1);
      }
#endif
    // With a terminating '}' (followed by '\0') the message is superficially valid.
    if((((char)('}' | 0x80)) == c) && (crc == (uint8_t)*p))
    2d4a:	7d 3f       	cpi	r23, 0xFD	; 253
    2d4c:	49 f4       	brne	.+18     	; 0x2d60 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x90>
    2d4e:	80 81       	ld	r24, Z
    2d50:	38 17       	cp	r19, r24
    2d52:	31 f4       	brne	.+12     	; 0x2d60 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x90>
      {
      *(p - 1) = '}';
    2d54:	8d e7       	ldi	r24, 0x7D	; 125
    2d56:	88 83       	st	Y, r24
      *p = '\0'; // Null terminate for use as a text string.
    2d58:	10 82       	st	Z, r1
#if 0 && defined(DEBUG)
      DEBUG_SERIAL_PRINTLN_FLASHSTRING("} OK with CRC");
#endif
      return(i+1);
    2d5a:	8a 2f       	mov	r24, r26
    2d5c:	8f 5f       	subi	r24, 0xFF	; 255
    2d5e:	09 c0       	rjmp	.+18     	; 0x2d72 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0xa2>
      }
    // Non-printable/control character makes the message invalid.
    if((c < 32) || (c > 126))
    2d60:	70 52       	subi	r23, 0x20	; 32
    2d62:	7f 35       	cpi	r23, 0x5F	; 95
    2d64:	28 f4       	brcc	.+10     	; 0x2d70 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0xa0>
#endif
  uint8_t crc = '{';
  // Scan up to maximum length for terminating '}'-with-high-bit.
  const uint8_t ml = min(MSG_JSON_MAX_LENGTH, bufLen);
  char *p = bptr + 1;
  for(int i = 1; i < ml; ++i)
    2d66:	11 96       	adiw	r26, 0x01	; 1
    2d68:	ef 01       	movw	r28, r30
    2d6a:	ae 15       	cp	r26, r14
    2d6c:	bf 05       	cpc	r27, r15
    2d6e:	64 f2       	brlt	.-104    	; 0x2d08 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x38>
    2d70:	8f ef       	ldi	r24, 0xFF	; 255
    }
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING(" bad: unterminated");
#endif
  return(adjustJSONMsgForRXAndCheckCRC_ERR); // Bad (unterminated) message.
  }
    2d72:	df 91       	pop	r29
    2d74:	cf 91       	pop	r28
    2d76:	1f 91       	pop	r17
    2d78:	0f 91       	pop	r16
    2d7a:	ff 90       	pop	r15
    2d7c:	ef 90       	pop	r14
    2d7e:	df 90       	pop	r13
    2d80:	cf 90       	pop	r12
    2d82:	08 95       	ret

00002d84 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)>:
    //       potentially at the cost of signficant CPU time
    //   * suppressClearChanged  if true then 'changed' flag for included fields is not cleared by this
    //       allowing them to continue to be treated as higher priority
uint8_t SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase &job,
                                            uint8_t *const buf, const uint8_t bufSize, const uint8_t sensitivity,
                                            const bool maximise, const bool suppressClearChanged)
    2d84:	7f 92       	push	r7
    2d86:	8f 92       	push	r8
    2d88:	9f 92       	push	r9
    2d8a:	af 92       	push	r10
    2d8c:	bf 92       	push	r11
    2d8e:	cf 92       	push	r12
    2d90:	df 92       	push	r13
    2d92:	ef 92       	push	r14
    2d94:	ff 92       	push	r15
    2d96:	0f 93       	push	r16
    2d98:	1f 93       	push	r17
    2d9a:	cf 93       	push	r28
    2d9c:	df 93       	push	r29
    2d9e:	7c 01       	movw	r14, r24
    2da0:	5b 01       	movw	r10, r22
    2da2:	4a 01       	movw	r8, r20
    2da4:	72 2e       	mov	r7, r18
  {
#ifdef DEBUG
  if(NULL == buf) { panic(0); } // Should never happen.
    2da6:	41 15       	cp	r20, r1
    2da8:	51 05       	cpc	r21, r1
    2daa:	21 f4       	brne	.+8      	; 0x2db4 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x30>
    2dac:	80 e0       	ldi	r24, 0x00	; 0
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	0e 94 a8 2e 	call	0x5d50	; 0x5d50 <panic(__FlashStringHelper const*)>
#endif
  // Minimum size is for {"@":""} plus null plus extra padding char/byte to check for overrun.
  if(bufSize < 10) { return(0); } // Failed.
    2db4:	89 e0       	ldi	r24, 0x09	; 9
    2db6:	87 15       	cp	r24, r7
    2db8:	08 f0       	brcs	.+2      	; 0x2dbc <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x38>
    2dba:	3d c1       	rjmp	.+634    	; 0x3036 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x2b2>

  // Write ID first.
  // If an explicit ID is supplied then use it
  // else compute it taking the housecode by preference if it is set.
  if(NULL != id) { job["@"] = id; }
    2dbc:	d7 01       	movw	r26, r14
    2dbe:	16 96       	adiw	r26, 0x06	; 6
    2dc0:	8d 91       	ld	r24, X+
    2dc2:	9c 91       	ld	r25, X
    2dc4:	17 97       	sbiw	r26, 0x07	; 7
    2dc6:	89 2b       	or	r24, r25
    2dc8:	91 f0       	breq	.+36     	; 0x2dee <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x6a>
    2dca:	c5 01       	movw	r24, r10
    2dcc:	61 e1       	ldi	r22, 0x11	; 17
    2dce:	71 e0       	ldi	r23, 0x01	; 1
    2dd0:	0e 94 42 38 	call	0x7084	; 0x7084 <ArduinoJson::Generator::JsonObjectBase::operator[](char const*)>
    2dd4:	fc 01       	movw	r30, r24
    2dd6:	d7 01       	movw	r26, r14
    2dd8:	16 96       	adiw	r26, 0x06	; 6
    2dda:	2d 91       	ld	r18, X+
    2ddc:	3c 91       	ld	r19, X
    2dde:	17 97       	sbiw	r26, 0x07	; 7
                _content.asPrintable = &value;
            }

            void operator=(const char* value)
            {
                _printToImpl = &printStringTo;
    2de0:	88 e9       	ldi	r24, 0x98	; 152
    2de2:	97 e3       	ldi	r25, 0x37	; 55
    2de4:	95 83       	std	Z+5, r25	; 0x05
    2de6:	84 83       	std	Z+4, r24	; 0x04
                _content.asString = value;
    2de8:	31 83       	std	Z+1, r19	; 0x01
    2dea:	20 83       	st	Z, r18
    2dec:	74 c0       	rjmp	.+232    	; 0x2ed6 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x152>
    {
    // Maintain a static buffer to avoid lifetime issues.
    // Could create a Printable to do this instead.
    static char bufID[5];
#ifdef USE_MODULE_FHT8VSIMPLE
    const uint8_t hc1 = FHT8VGetHC1();
    2dee:	0e 94 37 10 	call	0x206e	; 0x206e <FHT8VGetHC1()>
    if(localFHT8VTRVEnabled())
    2df2:	0e 94 49 10 	call	0x2092	; 0x2092 <localFHT8VTRVEnabled()>
    2df6:	88 23       	and	r24, r24
    2df8:	f1 f0       	breq	.+60     	; 0x2e36 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0xb2>
      {
      hexDigits(FHT8VGetHC1(), bufID+0);
    2dfa:	0e 94 37 10 	call	0x206e	; 0x206e <FHT8VGetHC1()>
    2dfe:	28 2f       	mov	r18, r24


// Extract ASCII hex digit in range [0-9][a-f] (ie lowercase) from bottom 4 bits of argument.
// Eg, passing in 0xa (10) returns 'a'.
// The top 4 bits are ignored.
static inline char hexDigit(const uint8_t value) { const uint8_t v = 0xf&value; if(v<10) { return('0'+v); } return('a'+(v-10)); }
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	f4 e0       	ldi	r31, 0x04	; 4
    2e04:	95 95       	asr	r25
    2e06:	87 95       	ror	r24
    2e08:	fa 95       	dec	r31
    2e0a:	e1 f7       	brne	.-8      	; 0x2e04 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x80>
    2e0c:	8f 70       	andi	r24, 0x0F	; 15
    2e0e:	8a 30       	cpi	r24, 0x0A	; 10
    2e10:	10 f4       	brcc	.+4      	; 0x2e16 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x92>
    2e12:	80 5d       	subi	r24, 0xD0	; 208
    2e14:	01 c0       	rjmp	.+2      	; 0x2e18 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x94>
    2e16:	89 5a       	subi	r24, 0xA9	; 169
//static inline char hexDigit(const uint8_t value) { const uint8_t v = *("0123456789abcdef" + (0xf&value)); }
// Fill in the first two bytes of buf with the ASCII hex digits of the value passed.
// Eg, passing in a value 0x4e sets buf[0] to '4' and buf[1] to 'e'.
static inline void hexDigits(const uint8_t value, char * const buf) { buf[0] = hexDigit(value>>4); buf[1] = hexDigit(value); }
    2e18:	80 93 cc 02 	sts	0x02CC, r24


// Extract ASCII hex digit in range [0-9][a-f] (ie lowercase) from bottom 4 bits of argument.
// Eg, passing in 0xa (10) returns 'a'.
// The top 4 bits are ignored.
static inline char hexDigit(const uint8_t value) { const uint8_t v = 0xf&value; if(v<10) { return('0'+v); } return('a'+(v-10)); }
    2e1c:	82 2f       	mov	r24, r18
    2e1e:	8f 70       	andi	r24, 0x0F	; 15
    2e20:	8a 30       	cpi	r24, 0x0A	; 10
    2e22:	10 f4       	brcc	.+4      	; 0x2e28 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0xa4>
    2e24:	80 5d       	subi	r24, 0xD0	; 208
    2e26:	01 c0       	rjmp	.+2      	; 0x2e2a <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0xa6>
    2e28:	89 5a       	subi	r24, 0xA9	; 169
//static inline char hexDigit(const uint8_t value) { const uint8_t v = *("0123456789abcdef" + (0xf&value)); }
// Fill in the first two bytes of buf with the ASCII hex digits of the value passed.
// Eg, passing in a value 0x4e sets buf[0] to '4' and buf[1] to 'e'.
static inline void hexDigits(const uint8_t value, char * const buf) { buf[0] = hexDigit(value>>4); buf[1] = hexDigit(value); }
    2e2a:	80 93 cd 02 	sts	0x02CD, r24
      hexDigits(FHT8VGetHC2(), bufID+2);
    2e2e:	0e 94 40 10 	call	0x2080	; 0x2080 <FHT8VGetHC2()>
    2e32:	28 2f       	mov	r18, r24
    2e34:	28 c0       	rjmp	.+80     	; 0x2e86 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x102>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2e36:	f9 99       	sbic	0x1f, 1	; 31
    2e38:	fe cf       	rjmp	.-4      	; 0x2e36 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0xb2>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2e3a:	84 e1       	ldi	r24, 0x14	; 20
    2e3c:	90 e0       	ldi	r25, 0x00	; 0
    2e3e:	92 bd       	out	0x22, r25	; 34
    2e40:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2e42:	f8 9a       	sbi	0x1f, 0	; 31
    2e44:	20 b5       	in	r18, 0x20	; 32


// Extract ASCII hex digit in range [0-9][a-f] (ie lowercase) from bottom 4 bits of argument.
// Eg, passing in 0xa (10) returns 'a'.
// The top 4 bits are ignored.
static inline char hexDigit(const uint8_t value) { const uint8_t v = 0xf&value; if(v<10) { return('0'+v); } return('a'+(v-10)); }
    2e46:	82 2f       	mov	r24, r18
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	e4 e0       	ldi	r30, 0x04	; 4
    2e4c:	95 95       	asr	r25
    2e4e:	87 95       	ror	r24
    2e50:	ea 95       	dec	r30
    2e52:	e1 f7       	brne	.-8      	; 0x2e4c <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0xc8>
    2e54:	8f 70       	andi	r24, 0x0F	; 15
    2e56:	8a 30       	cpi	r24, 0x0A	; 10
    2e58:	10 f4       	brcc	.+4      	; 0x2e5e <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0xda>
    2e5a:	80 5d       	subi	r24, 0xD0	; 208
    2e5c:	01 c0       	rjmp	.+2      	; 0x2e60 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0xdc>
    2e5e:	89 5a       	subi	r24, 0xA9	; 169
//static inline char hexDigit(const uint8_t value) { const uint8_t v = *("0123456789abcdef" + (0xf&value)); }
// Fill in the first two bytes of buf with the ASCII hex digits of the value passed.
// Eg, passing in a value 0x4e sets buf[0] to '4' and buf[1] to 'e'.
static inline void hexDigits(const uint8_t value, char * const buf) { buf[0] = hexDigit(value>>4); buf[1] = hexDigit(value); }
    2e60:	80 93 cc 02 	sts	0x02CC, r24


// Extract ASCII hex digit in range [0-9][a-f] (ie lowercase) from bottom 4 bits of argument.
// Eg, passing in 0xa (10) returns 'a'.
// The top 4 bits are ignored.
static inline char hexDigit(const uint8_t value) { const uint8_t v = 0xf&value; if(v<10) { return('0'+v); } return('a'+(v-10)); }
    2e64:	82 2f       	mov	r24, r18
    2e66:	8f 70       	andi	r24, 0x0F	; 15
    2e68:	8a 30       	cpi	r24, 0x0A	; 10
    2e6a:	10 f4       	brcc	.+4      	; 0x2e70 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0xec>
    2e6c:	80 5d       	subi	r24, 0xD0	; 208
    2e6e:	01 c0       	rjmp	.+2      	; 0x2e72 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0xee>
    2e70:	89 5a       	subi	r24, 0xA9	; 169
//static inline char hexDigit(const uint8_t value) { const uint8_t v = *("0123456789abcdef" + (0xf&value)); }
// Fill in the first two bytes of buf with the ASCII hex digits of the value passed.
// Eg, passing in a value 0x4e sets buf[0] to '4' and buf[1] to 'e'.
static inline void hexDigits(const uint8_t value, char * const buf) { buf[0] = hexDigit(value>>4); buf[1] = hexDigit(value); }
    2e72:	80 93 cd 02 	sts	0x02CD, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2e76:	f9 99       	sbic	0x1f, 1	; 31
    2e78:	fe cf       	rjmp	.-4      	; 0x2e76 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0xf2>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2e7a:	85 e1       	ldi	r24, 0x15	; 21
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	92 bd       	out	0x22, r25	; 34
    2e80:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2e82:	f8 9a       	sbi	0x1f, 0	; 31
    2e84:	20 b5       	in	r18, 0x20	; 32


// Extract ASCII hex digit in range [0-9][a-f] (ie lowercase) from bottom 4 bits of argument.
// Eg, passing in 0xa (10) returns 'a'.
// The top 4 bits are ignored.
static inline char hexDigit(const uint8_t value) { const uint8_t v = 0xf&value; if(v<10) { return('0'+v); } return('a'+(v-10)); }
    2e86:	82 2f       	mov	r24, r18
    2e88:	90 e0       	ldi	r25, 0x00	; 0
    2e8a:	74 e0       	ldi	r23, 0x04	; 4
    2e8c:	95 95       	asr	r25
    2e8e:	87 95       	ror	r24
    2e90:	7a 95       	dec	r23
    2e92:	e1 f7       	brne	.-8      	; 0x2e8c <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x108>
    2e94:	8f 70       	andi	r24, 0x0F	; 15
    2e96:	8a 30       	cpi	r24, 0x0A	; 10
    2e98:	10 f4       	brcc	.+4      	; 0x2e9e <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x11a>
    2e9a:	80 5d       	subi	r24, 0xD0	; 208
    2e9c:	01 c0       	rjmp	.+2      	; 0x2ea0 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x11c>
    2e9e:	89 5a       	subi	r24, 0xA9	; 169
//static inline char hexDigit(const uint8_t value) { const uint8_t v = *("0123456789abcdef" + (0xf&value)); }
// Fill in the first two bytes of buf with the ASCII hex digits of the value passed.
// Eg, passing in a value 0x4e sets buf[0] to '4' and buf[1] to 'e'.
static inline void hexDigits(const uint8_t value, char * const buf) { buf[0] = hexDigit(value>>4); buf[1] = hexDigit(value); }
    2ea0:	80 93 ce 02 	sts	0x02CE, r24


// Extract ASCII hex digit in range [0-9][a-f] (ie lowercase) from bottom 4 bits of argument.
// Eg, passing in 0xa (10) returns 'a'.
// The top 4 bits are ignored.
static inline char hexDigit(const uint8_t value) { const uint8_t v = 0xf&value; if(v<10) { return('0'+v); } return('a'+(v-10)); }
    2ea4:	82 2f       	mov	r24, r18
    2ea6:	8f 70       	andi	r24, 0x0F	; 15
    2ea8:	8a 30       	cpi	r24, 0x0A	; 10
    2eaa:	10 f4       	brcc	.+4      	; 0x2eb0 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x12c>
    2eac:	80 5d       	subi	r24, 0xD0	; 208
    2eae:	01 c0       	rjmp	.+2      	; 0x2eb2 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x12e>
    2eb0:	89 5a       	subi	r24, 0xA9	; 169
//static inline char hexDigit(const uint8_t value) { const uint8_t v = *("0123456789abcdef" + (0xf&value)); }
// Fill in the first two bytes of buf with the ASCII hex digits of the value passed.
// Eg, passing in a value 0x4e sets buf[0] to '4' and buf[1] to 'e'.
static inline void hexDigits(const uint8_t value, char * const buf) { buf[0] = hexDigit(value>>4); buf[1] = hexDigit(value); }
    2eb2:	80 93 cf 02 	sts	0x02CF, r24
#endif
      {
      hexDigits(eeprom_read_byte(0 + (uint8_t *)EE_START_ID), bufID+0);
      hexDigits(eeprom_read_byte(1 + (uint8_t *)EE_START_ID), bufID+2);
      }
    bufID[4] = '\0';
    2eb6:	10 92 d0 02 	sts	0x02D0, r1
    job["@"] = bufID;
    2eba:	c5 01       	movw	r24, r10
    2ebc:	61 e1       	ldi	r22, 0x11	; 17
    2ebe:	71 e0       	ldi	r23, 0x01	; 1
    2ec0:	0e 94 42 38 	call	0x7084	; 0x7084 <ArduinoJson::Generator::JsonObjectBase::operator[](char const*)>
    2ec4:	fc 01       	movw	r30, r24
                _content.asPrintable = &value;
            }

            void operator=(const char* value)
            {
                _printToImpl = &printStringTo;
    2ec6:	88 e9       	ldi	r24, 0x98	; 152
    2ec8:	97 e3       	ldi	r25, 0x37	; 55
    2eca:	95 83       	std	Z+5, r25	; 0x05
    2ecc:	84 83       	std	Z+4, r24	; 0x04
                _content.asString = value;
    2ece:	8c ec       	ldi	r24, 0xCC	; 204
    2ed0:	92 e0       	ldi	r25, 0x02	; 2
    2ed2:	91 83       	std	Z+1, r25	; 0x01
    2ed4:	80 83       	st	Z, r24
    }

  // Write count next iff enabled.
  if(c.enabled) { job["+"] = c.count; }
    2ed6:	f7 01       	movw	r30, r14
    2ed8:	80 85       	ldd	r24, Z+8	; 0x08
    2eda:	80 ff       	sbrs	r24, 0
    2edc:	18 c0       	rjmp	.+48     	; 0x2f0e <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x18a>
    2ede:	c5 01       	movw	r24, r10
    2ee0:	63 e1       	ldi	r22, 0x13	; 19
    2ee2:	71 e0       	ldi	r23, 0x01	; 1
    2ee4:	0e 94 42 38 	call	0x7084	; 0x7084 <ArduinoJson::Generator::JsonObjectBase::operator[](char const*)>
    2ee8:	fc 01       	movw	r30, r24
    2eea:	d7 01       	movw	r26, r14
    2eec:	18 96       	adiw	r26, 0x08	; 8
    2eee:	8c 91       	ld	r24, X
    2ef0:	86 95       	lsr	r24
    2ef2:	8f 73       	andi	r24, 0x3F	; 63
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
                _content.asLong = value;
            }

            void operator=(int value)
            {
                _printToImpl = &printLongTo;
    2ef6:	23 e1       	ldi	r18, 0x13	; 19
    2ef8:	38 e3       	ldi	r19, 0x38	; 56
    2efa:	35 83       	std	Z+5, r19	; 0x05
    2efc:	24 83       	std	Z+4, r18	; 0x04
                _content.asLong = value;
    2efe:	aa 27       	eor	r26, r26
    2f00:	97 fd       	sbrc	r25, 7
    2f02:	a0 95       	com	r26
    2f04:	ba 2f       	mov	r27, r26
    2f06:	80 83       	st	Z, r24
    2f08:	91 83       	std	Z+1, r25	; 0x01
    2f0a:	a2 83       	std	Z+2, r26	; 0x02
    2f0c:	b3 83       	std	Z+3, r27	; 0x03

  bool gotHiPri = false;
  uint8_t hiPriIndex;
  bool gotLoPri = false;
  uint8_t loPriIndex;
  if(nStats != 0)
    2f0e:	f7 01       	movw	r30, r14
    2f10:	63 81       	ldd	r22, Z+3	; 0x03
    2f12:	66 23       	and	r22, r22
    2f14:	09 f4       	brne	.+2      	; 0x2f18 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x194>
    2f16:	7e c0       	rjmp	.+252    	; 0x3014 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x290>
//    for(int i = nStats; --i >= 0; ) { stats[i].flags.thisRun = false; }

    // High-pri/changed stats.
    // Only do this on a portion of runs to let 'normal' stats get a look-in.
    // This happens on even-numbered runs (eg including the first, typically).
    if(0 == (c.count & 1))
    2f18:	80 85       	ldd	r24, Z+8	; 0x08
    2f1a:	86 95       	lsr	r24
    2f1c:	8f 73       	andi	r24, 0x3F	; 63
    2f1e:	80 fd       	sbrc	r24, 0
    2f20:	3f c0       	rjmp	.+126    	; 0x2fa0 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x21c>
      {
      uint8_t next = lastTXedHiPri;
    2f22:	15 81       	ldd	r17, Z+5	; 0x05
    2f24:	40 e0       	ldi	r20, 0x00	; 0
    2f26:	50 e0       	ldi	r21, 0x00	; 0
      for(int i = nStats; --i >= 0; )
    2f28:	26 2f       	mov	r18, r22
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	21 50       	subi	r18, 0x01	; 1
    2f2e:	30 40       	sbci	r19, 0x00	; 0
        {
        // Wrap around the end of the stats.
        if(++next >= nStats) { next = 0; }
        // Skip stat if too sensitive to include in this output.
        DescValueTuple &s = stats[next];
    2f30:	77 e0       	ldi	r23, 0x07	; 7
    2f32:	30 c0       	rjmp	.+96     	; 0x2f94 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x210>
      {
      uint8_t next = lastTXedHiPri;
      for(int i = nStats; --i >= 0; )
        {
        // Wrap around the end of the stats.
        if(++next >= nStats) { next = 0; }
    2f34:	1f 5f       	subi	r17, 0xFF	; 255
    2f36:	16 17       	cp	r17, r22
    2f38:	08 f0       	brcs	.+2      	; 0x2f3c <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x1b8>
    2f3a:	10 e0       	ldi	r17, 0x00	; 0
        // Skip stat if too sensitive to include in this output.
        DescValueTuple &s = stats[next];
    2f3c:	17 9f       	mul	r17, r23
    2f3e:	c0 01       	movw	r24, r0
    2f40:	11 24       	eor	r1, r1
    2f42:	d7 01       	movw	r26, r14
    2f44:	11 96       	adiw	r26, 0x01	; 1
    2f46:	cd 91       	ld	r28, X+
    2f48:	dc 91       	ld	r29, X
    2f4a:	12 97       	sbiw	r26, 0x02	; 2
    2f4c:	c8 0f       	add	r28, r24
    2f4e:	d9 1f       	adc	r29, r25
        if(sensitivity > s.descriptor.sensitivity) { continue; }
    2f50:	8a 81       	ldd	r24, Y+2	; 0x02
    2f52:	80 17       	cp	r24, r16
    2f54:	e8 f0       	brcs	.+58     	; 0x2f90 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x20c>
        // Skip stat if not changed or high-priority.
        if(!s.descriptor.highPriority && !s.flags.changed) { continue; }
    2f56:	8b 81       	ldd	r24, Y+3	; 0x03
    2f58:	88 23       	and	r24, r24
    2f5a:	19 f4       	brne	.+6      	; 0x2f62 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x1de>
    2f5c:	8e 81       	ldd	r24, Y+6	; 0x06
    2f5e:	80 ff       	sbrs	r24, 0
    2f60:	17 c0       	rjmp	.+46     	; 0x2f90 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x20c>
        // Found suitable stat to include in output.
        hiPriIndex = next;
        gotHiPri = true;
        // Add to JSON output.
        job[s.descriptor.key] = s.value;
    2f62:	68 81       	ld	r22, Y
    2f64:	79 81       	ldd	r23, Y+1	; 0x01
    2f66:	c5 01       	movw	r24, r10
    2f68:	0e 94 42 38 	call	0x7084	; 0x7084 <ArduinoJson::Generator::JsonObjectBase::operator[](char const*)>
    2f6c:	fc 01       	movw	r30, r24
    2f6e:	8c 81       	ldd	r24, Y+4	; 0x04
    2f70:	9d 81       	ldd	r25, Y+5	; 0x05
                _content.asLong = value;
            }

            void operator=(int value)
            {
                _printToImpl = &printLongTo;
    2f72:	23 e1       	ldi	r18, 0x13	; 19
    2f74:	38 e3       	ldi	r19, 0x38	; 56
    2f76:	35 83       	std	Z+5, r19	; 0x05
    2f78:	24 83       	std	Z+4, r18	; 0x04
                _content.asLong = value;
    2f7a:	aa 27       	eor	r26, r26
    2f7c:	97 fd       	sbrc	r25, 7
    2f7e:	a0 95       	com	r26
    2f80:	ba 2f       	mov	r27, r26
    2f82:	80 83       	st	Z, r24
    2f84:	91 83       	std	Z+1, r25	; 0x01
    2f86:	a2 83       	std	Z+2, r26	; 0x02
    2f88:	b3 83       	std	Z+3, r27	; 0x03
    2f8a:	d1 2e       	mov	r13, r17
    2f8c:	11 e0       	ldi	r17, 0x01	; 1
    2f8e:	43 c0       	rjmp	.+134    	; 0x3016 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x292>
    2f90:	4f 5f       	subi	r20, 0xFF	; 255
    2f92:	5f 4f       	sbci	r21, 0xFF	; 255
    // Only do this on a portion of runs to let 'normal' stats get a look-in.
    // This happens on even-numbered runs (eg including the first, typically).
    if(0 == (c.count & 1))
      {
      uint8_t next = lastTXedHiPri;
      for(int i = nStats; --i >= 0; )
    2f94:	c9 01       	movw	r24, r18
    2f96:	84 1b       	sub	r24, r20
    2f98:	95 0b       	sbc	r25, r21
    2f9a:	8f 5f       	subi	r24, 0xFF	; 255
    2f9c:	9f 4f       	sbci	r25, 0xFF	; 255
    2f9e:	51 f6       	brne	.-108    	; 0x2f34 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x1b0>
    // Rotate through all eligible stats round-robin,
    // adding one to the end of the current message if possible,
    // checking first the item indexed after the previous one sent.
    if(!gotHiPri)
      {
      uint8_t next = lastTXed;
    2fa0:	f7 01       	movw	r30, r14
    2fa2:	14 81       	ldd	r17, Z+4	; 0x04
    2fa4:	40 e0       	ldi	r20, 0x00	; 0
    2fa6:	50 e0       	ldi	r21, 0x00	; 0
      for(int i = nStats; --i >= 0; )
    2fa8:	26 2f       	mov	r18, r22
    2faa:	30 e0       	ldi	r19, 0x00	; 0
    2fac:	21 50       	subi	r18, 0x01	; 1
    2fae:	30 40       	sbci	r19, 0x00	; 0
        {
        // Wrap around the end of the stats.
        if(++next >= nStats) { next = 0; }
        // Skip stat if too sensitive to include in this output.
        DescValueTuple &s = stats[next];
    2fb0:	77 e0       	ldi	r23, 0x07	; 7
    2fb2:	2b c0       	rjmp	.+86     	; 0x300a <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x286>
      {
      uint8_t next = lastTXed;
      for(int i = nStats; --i >= 0; )
        {
        // Wrap around the end of the stats.
        if(++next >= nStats) { next = 0; }
    2fb4:	1f 5f       	subi	r17, 0xFF	; 255
    2fb6:	16 17       	cp	r17, r22
    2fb8:	08 f0       	brcs	.+2      	; 0x2fbc <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x238>
    2fba:	10 e0       	ldi	r17, 0x00	; 0
        // Skip stat if too sensitive to include in this output.
        DescValueTuple &s = stats[next];
    2fbc:	17 9f       	mul	r17, r23
    2fbe:	c0 01       	movw	r24, r0
    2fc0:	11 24       	eor	r1, r1
    2fc2:	d7 01       	movw	r26, r14
    2fc4:	11 96       	adiw	r26, 0x01	; 1
    2fc6:	cd 91       	ld	r28, X+
    2fc8:	dc 91       	ld	r29, X
    2fca:	12 97       	sbiw	r26, 0x02	; 2
    2fcc:	c8 0f       	add	r28, r24
    2fce:	d9 1f       	adc	r29, r25
    2fd0:	4f 5f       	subi	r20, 0xFF	; 255
    2fd2:	5f 4f       	sbci	r21, 0xFF	; 255
        if(sensitivity > s.descriptor.sensitivity) { continue; }
    2fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd6:	80 17       	cp	r24, r16
    2fd8:	c0 f0       	brcs	.+48     	; 0x300a <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x286>
        // Found suitable stat to include in output.
        loPriIndex = next;
        gotLoPri = true;
        // Add to JSON output.
        job[s.descriptor.key] = s.value;
    2fda:	68 81       	ld	r22, Y
    2fdc:	79 81       	ldd	r23, Y+1	; 0x01
    2fde:	c5 01       	movw	r24, r10
    2fe0:	0e 94 42 38 	call	0x7084	; 0x7084 <ArduinoJson::Generator::JsonObjectBase::operator[](char const*)>
    2fe4:	fc 01       	movw	r30, r24
    2fe6:	8c 81       	ldd	r24, Y+4	; 0x04
    2fe8:	9d 81       	ldd	r25, Y+5	; 0x05
                _content.asLong = value;
            }

            void operator=(int value)
            {
                _printToImpl = &printLongTo;
    2fea:	23 e1       	ldi	r18, 0x13	; 19
    2fec:	38 e3       	ldi	r19, 0x38	; 56
    2fee:	35 83       	std	Z+5, r19	; 0x05
    2ff0:	24 83       	std	Z+4, r18	; 0x04
                _content.asLong = value;
    2ff2:	aa 27       	eor	r26, r26
    2ff4:	97 fd       	sbrc	r25, 7
    2ff6:	a0 95       	com	r26
    2ff8:	ba 2f       	mov	r27, r26
    2ffa:	80 83       	st	Z, r24
    2ffc:	91 83       	std	Z+1, r25	; 0x01
    2ffe:	a2 83       	std	Z+2, r26	; 0x02
    3000:	b3 83       	std	Z+3, r27	; 0x03
    3002:	d1 2e       	mov	r13, r17
    3004:	10 e0       	ldi	r17, 0x00	; 0
    3006:	01 e0       	ldi	r16, 0x01	; 1
    3008:	07 c0       	rjmp	.+14     	; 0x3018 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x294>
    // adding one to the end of the current message if possible,
    // checking first the item indexed after the previous one sent.
    if(!gotHiPri)
      {
      uint8_t next = lastTXed;
      for(int i = nStats; --i >= 0; )
    300a:	c9 01       	movw	r24, r18
    300c:	84 1b       	sub	r24, r20
    300e:	95 0b       	sbc	r25, r21
    3010:	97 ff       	sbrs	r25, 7
    3012:	d0 cf       	rjmp	.-96     	; 0x2fb4 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x230>
    3014:	10 e0       	ldi	r17, 0x00	; 0
    3016:	00 e0       	ldi	r16, 0x00	; 0
    }

  // TODO: maximise.

  // Write to output buffer, checking for overrun.
  const size_t w = job.printTo((char *)buf, bufSize);
    3018:	c5 01       	movw	r24, r10
    301a:	b4 01       	movw	r22, r8
    301c:	47 2d       	mov	r20, r7
    301e:	50 e0       	ldi	r21, 0x00	; 0
    3020:	0e 94 e0 36 	call	0x6dc0	; 0x6dc0 <ArduinoJson::Generator::JsonPrintable::printTo(char*, unsigned int) const>
    3024:	ac 01       	movw	r20, r24
  if(w >= bufSize-1)
    3026:	87 2d       	mov	r24, r7
    3028:	90 e0       	ldi	r25, 0x00	; 0
    302a:	01 97       	sbiw	r24, 0x01	; 1
    302c:	48 17       	cp	r20, r24
    302e:	59 07       	cpc	r21, r25
    3030:	20 f0       	brcs	.+8      	; 0x303a <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x2b6>
    {
    // Overrun, so failed/aborted.
    *buf = '\0';
    3032:	f4 01       	movw	r30, r8
    3034:	10 82       	st	Z, r1
    3036:	80 e0       	ldi	r24, 0x00	; 0
    3038:	41 c0       	rjmp	.+130    	; 0x30bc <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x338>
    return(0);
    }
 
  // On successfully creating output, update some internal state including success count.
  ++c.count;
    303a:	d7 01       	movw	r26, r14
    303c:	18 96       	adiw	r26, 0x08	; 8
    303e:	9c 91       	ld	r25, X
    3040:	18 97       	sbiw	r26, 0x08	; 8
    3042:	89 2f       	mov	r24, r25
    3044:	86 95       	lsr	r24
    3046:	8f 5f       	subi	r24, 0xFF	; 255
    3048:	8f 73       	andi	r24, 0x3F	; 63
    304a:	88 0f       	add	r24, r24
    304c:	91 78       	andi	r25, 0x81	; 129
    304e:	98 2b       	or	r25, r24
    3050:	18 96       	adiw	r26, 0x08	; 8
    3052:	9c 93       	st	X, r25
    3054:	18 97       	sbiw	r26, 0x08	; 8
  // Remember which hi-pri/changed stat (if any) was just included in the output
  // and note it as no longer changed since last sent.
  if(gotHiPri)
    3056:	11 23       	and	r17, r17
    3058:	c1 f0       	breq	.+48     	; 0x308a <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x306>
    {
    lastTXedHiPri = hiPriIndex;
    305a:	15 96       	adiw	r26, 0x05	; 5
    305c:	dc 92       	st	X, r13
    305e:	15 97       	sbiw	r26, 0x05	; 5
    if(!suppressClearChanged) { stats[hiPriIndex].flags.changed = false; }
    3060:	cc 20       	and	r12, r12
    3062:	99 f4       	brne	.+38     	; 0x308a <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x306>
    3064:	2d 2d       	mov	r18, r13
    3066:	30 e0       	ldi	r19, 0x00	; 0
    3068:	c9 01       	movw	r24, r18
    306a:	63 e0       	ldi	r22, 0x03	; 3
    306c:	88 0f       	add	r24, r24
    306e:	99 1f       	adc	r25, r25
    3070:	6a 95       	dec	r22
    3072:	e1 f7       	brne	.-8      	; 0x306c <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x2e8>
    3074:	82 1b       	sub	r24, r18
    3076:	93 0b       	sbc	r25, r19
    3078:	11 96       	adiw	r26, 0x01	; 1
    307a:	ed 91       	ld	r30, X+
    307c:	fc 91       	ld	r31, X
    307e:	12 97       	sbiw	r26, 0x02	; 2
    3080:	e8 0f       	add	r30, r24
    3082:	f9 1f       	adc	r31, r25
    3084:	86 81       	ldd	r24, Z+6	; 0x06
    3086:	8e 7f       	andi	r24, 0xFE	; 254
    3088:	86 83       	std	Z+6, r24	; 0x06
    }
  // Remember which normal stat (if any) was just included in the output
  // and note it as no longer changed since last sent.
  if(gotLoPri)
    308a:	00 23       	and	r16, r16
    308c:	b1 f0       	breq	.+44     	; 0x30ba <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x336>
    {
    lastTXed = loPriIndex;
    308e:	f7 01       	movw	r30, r14
    3090:	d4 82       	std	Z+4, r13	; 0x04
    if(!suppressClearChanged) { stats[loPriIndex].flags.changed = false; }
    3092:	cc 20       	and	r12, r12
    3094:	91 f4       	brne	.+36     	; 0x30ba <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x336>
    3096:	2d 2d       	mov	r18, r13
    3098:	30 e0       	ldi	r19, 0x00	; 0
    309a:	c9 01       	movw	r24, r18
    309c:	53 e0       	ldi	r21, 0x03	; 3
    309e:	88 0f       	add	r24, r24
    30a0:	99 1f       	adc	r25, r25
    30a2:	5a 95       	dec	r21
    30a4:	e1 f7       	brne	.-8      	; 0x309e <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x31a>
    30a6:	82 1b       	sub	r24, r18
    30a8:	93 0b       	sbc	r25, r19
    30aa:	01 80       	ldd	r0, Z+1	; 0x01
    30ac:	f2 81       	ldd	r31, Z+2	; 0x02
    30ae:	e0 2d       	mov	r30, r0
    30b0:	e8 0f       	add	r30, r24
    30b2:	f9 1f       	adc	r31, r25
    30b4:	86 81       	ldd	r24, Z+6	; 0x06
    30b6:	8e 7f       	andi	r24, 0xFE	; 254
    30b8:	86 83       	std	Z+6, r24	; 0x06
    }

  return(w); // Success!
    30ba:	84 2f       	mov	r24, r20
  }
    30bc:	df 91       	pop	r29
    30be:	cf 91       	pop	r28
    30c0:	1f 91       	pop	r17
    30c2:	0f 91       	pop	r16
    30c4:	ff 90       	pop	r15
    30c6:	ef 90       	pop	r14
    30c8:	df 90       	pop	r13
    30ca:	cf 90       	pop	r12
    30cc:	bf 90       	pop	r11
    30ce:	af 90       	pop	r10
    30d0:	9f 90       	pop	r9
    30d2:	8f 90       	pop	r8
    30d4:	7f 90       	pop	r7
    30d6:	08 95       	ret

000030d8 <extractTrailingMinimalStatsPayload(unsigned char const*, trailingMinimalStatsPayload*)>:
#endif
  }

// Extract payload from valid (3-byte) header+payload+CRC into payload struct; only 2 bytes are actually read.
// Input bytes (eg header and check value) must already have been validated.
void extractTrailingMinimalStatsPayload(const uint8_t *const buf, trailingMinimalStatsPayload_t *const payload)
    30d8:	0f 93       	push	r16
    30da:	1f 93       	push	r17
    30dc:	cf 93       	push	r28
    30de:	df 93       	push	r29
    30e0:	ec 01       	movw	r28, r24
    30e2:	8b 01       	movw	r16, r22
  {
#ifdef DEBUG
  if(NULL == payload) { panic(); }
    30e4:	61 15       	cp	r22, r1
    30e6:	71 05       	cpc	r23, r1
    30e8:	11 f4       	brne	.+4      	; 0x30ee <extractTrailingMinimalStatsPayload(unsigned char const*, trailingMinimalStatsPayload*)+0x16>
    30ea:	0e 94 97 2e 	call	0x5d2e	; 0x5d2e <panic()>
#endif
  payload->powerLow = (0 != (buf[0] & 0x10));
    30ee:	88 81       	ld	r24, Y
    30f0:	88 0f       	add	r24, r24
    30f2:	88 0f       	add	r24, r24
    30f4:	88 0f       	add	r24, r24
    30f6:	80 78       	andi	r24, 0x80	; 128
    30f8:	f8 01       	movw	r30, r16
    30fa:	41 81       	ldd	r20, Z+1	; 0x01
    30fc:	4f 77       	andi	r20, 0x7F	; 127
    30fe:	48 2b       	or	r20, r24
    3100:	41 83       	std	Z+1, r20	; 0x01
  payload->tempC16 = ((((int16_t) buf[1]) << 4) | (buf[0] & 0xf)) + MESSAGING_TRAILING_MINIMAL_STATS_TEMP_BIAS;
    3102:	29 81       	ldd	r18, Y+1	; 0x01
    3104:	30 e0       	ldi	r19, 0x00	; 0
    3106:	a4 e0       	ldi	r26, 0x04	; 4
    3108:	22 0f       	add	r18, r18
    310a:	33 1f       	adc	r19, r19
    310c:	aa 95       	dec	r26
    310e:	e1 f7       	brne	.-8      	; 0x3108 <extractTrailingMinimalStatsPayload(unsigned char const*, trailingMinimalStatsPayload*)+0x30>
    3110:	88 81       	ld	r24, Y
    3112:	90 e0       	ldi	r25, 0x00	; 0
    3114:	8f 70       	andi	r24, 0x0F	; 15
    3116:	90 70       	andi	r25, 0x00	; 0
    3118:	28 2b       	or	r18, r24
    311a:	39 2b       	or	r19, r25
    311c:	20 54       	subi	r18, 0x40	; 64
    311e:	31 40       	sbci	r19, 0x01	; 1
    3120:	20 83       	st	Z, r18
    3122:	83 2f       	mov	r24, r19
    3124:	8f 77       	andi	r24, 0x7F	; 127
    3126:	40 78       	andi	r20, 0x80	; 128
    3128:	48 2b       	or	r20, r24
    312a:	41 83       	std	Z+1, r20	; 0x01
  }
    312c:	df 91       	pop	r29
    312e:	cf 91       	pop	r28
    3130:	1f 91       	pop	r17
    3132:	0f 91       	pop	r16
    3134:	08 95       	ret

00003136 <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)>:
  }

// Store minimal stats payload into (2-byte) buffer from payload struct (without CRC); values are coerced to fit as necessary..
//   * payload  must be non-null
// Used for minimal and full packet forms,
void writeTrailingMinimalStatsPayloadBody(uint8_t *buf, const trailingMinimalStatsPayload_t *payload)
    3136:	0f 93       	push	r16
    3138:	1f 93       	push	r17
    313a:	cf 93       	push	r28
    313c:	df 93       	push	r29
    313e:	8c 01       	movw	r16, r24
    3140:	eb 01       	movw	r28, r22
  {
#ifdef DEBUG
  if(NULL == payload) { panic(); }
    3142:	61 15       	cp	r22, r1
    3144:	71 05       	cpc	r23, r1
    3146:	11 f4       	brne	.+4      	; 0x314c <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x16>
    3148:	0e 94 97 2e 	call	0x5d2e	; 0x5d2e <panic()>
  DEBUG_SERIAL_PRINTFMT(minTempRepresentable, DEC);
  DEBUG_SERIAL_PRINT_FLASHSTRING(" max=");
  DEBUG_SERIAL_PRINTFMT(maxTempRepresentable, DEC);
  DEBUG_SERIAL_PRINTLN();
#endif
  int16_t temp16Cbiased = payload->tempC16;
    314c:	88 81       	ld	r24, Y
    314e:	29 81       	ldd	r18, Y+1	; 0x01
    3150:	92 2f       	mov	r25, r18
    3152:	9f 77       	andi	r25, 0x7F	; 127
    3154:	88 0f       	add	r24, r24
    3156:	99 1f       	adc	r25, r25
    3158:	95 95       	asr	r25
    315a:	87 95       	ror	r24
    315c:	26 e0       	ldi	r18, 0x06	; 6
    315e:	80 3c       	cpi	r24, 0xC0	; 192
    3160:	92 07       	cpc	r25, r18
    3162:	14 f0       	brlt	.+4      	; 0x3168 <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x32>
    3164:	8f eb       	ldi	r24, 0xBF	; 191
    3166:	96 e0       	ldi	r25, 0x06	; 6
    3168:	ee ef       	ldi	r30, 0xFE	; 254
    316a:	80 3c       	cpi	r24, 0xC0	; 192
    316c:	9e 07       	cpc	r25, r30
    316e:	14 f4       	brge	.+4      	; 0x3174 <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x3e>
    3170:	80 ec       	ldi	r24, 0xC0	; 192
    3172:	9e ef       	ldi	r25, 0xFE	; 254
  if(temp16Cbiased < minTempRepresentable) { temp16Cbiased = minTempRepresentable; }
  else if(temp16Cbiased > maxTempRepresentable) { temp16Cbiased = maxTempRepresentable; }
  temp16Cbiased -= MESSAGING_TRAILING_MINIMAL_STATS_TEMP_BIAS; // Should now be strictly positive.
    3174:	9c 01       	movw	r18, r24
    3176:	20 5c       	subi	r18, 0xC0	; 192
    3178:	3e 4f       	sbci	r19, 0xFE	; 254
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("temp16Cbiased: ");
  DEBUG_SERIAL_PRINTFMT(temp16Cbiased, DEC);
  DEBUG_SERIAL_PRINTLN();
#endif
  const uint8_t byte0 = MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MSBS | (payload->powerLow ? 0x10 : 0) | (temp16Cbiased & 0xf);
    317a:	89 81       	ldd	r24, Y+1	; 0x01
    317c:	87 fd       	sbrc	r24, 7
    317e:	02 c0       	rjmp	.+4      	; 0x3184 <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x4e>
    3180:	90 e4       	ldi	r25, 0x40	; 64
    3182:	01 c0       	rjmp	.+2      	; 0x3186 <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x50>
    3184:	90 e5       	ldi	r25, 0x50	; 80
  const uint8_t byte1 = (uint8_t) (temp16Cbiased >> 4);
  buf[0] = byte0;
    3186:	82 2f       	mov	r24, r18
    3188:	8f 70       	andi	r24, 0x0F	; 15
    318a:	98 2b       	or	r25, r24
    318c:	f8 01       	movw	r30, r16
    318e:	90 83       	st	Z, r25
  buf[1] = byte1;
    3190:	b4 e0       	ldi	r27, 0x04	; 4
    3192:	35 95       	asr	r19
    3194:	27 95       	ror	r18
    3196:	ba 95       	dec	r27
    3198:	e1 f7       	brne	.-8      	; 0x3192 <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x5c>
    319a:	21 83       	std	Z+1, r18	; 0x01
#if 0 && defined(DEBUG)
  for(uint8_t i = 0; i < 2; ++i) { if(0 != (buf[i] & 0x80)) { panic(); } } // MSBits should be clear.
#endif
  }
    319c:	df 91       	pop	r29
    319e:	cf 91       	pop	r28
    31a0:	1f 91       	pop	r17
    31a2:	0f 91       	pop	r16
    31a4:	08 95       	ret

000031a6 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)>:
// Note that up to 7 bytes of payload is optimal for the CRC used.
// If successful, returns pointer to terminating 0xff at end of message.
// Returns null if failed (eg because of bad inputs or insufficient buffer space);
// part of the message may have have been written in this case and in particular the previous terminating 0xff may have been overwritten.
uint8_t *encodeFullStatsMessageCore(uint8_t * const buf, const uint8_t buflen, const stats_TX_level secLevel, const bool secureChannel,
    const FullStatsMessageCore_t * const content)
    31a6:	af 92       	push	r10
    31a8:	bf 92       	push	r11
    31aa:	cf 92       	push	r12
    31ac:	df 92       	push	r13
    31ae:	ef 92       	push	r14
    31b0:	ff 92       	push	r15
    31b2:	0f 93       	push	r16
    31b4:	1f 93       	push	r17
    31b6:	cf 93       	push	r28
    31b8:	df 93       	push	r29
    31ba:	6c 01       	movw	r12, r24
    31bc:	5a 01       	movw	r10, r20
  {
  if(NULL == buf) { return(NULL); } // Could be an assert/panic instead at a pinch.
    31be:	00 97       	sbiw	r24, 0x00	; 0
    31c0:	09 f4       	brne	.+2      	; 0x31c4 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x1e>
    31c2:	be c0       	rjmp	.+380    	; 0x3340 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x19a>
  if(NULL == content) { return(NULL); } // Could be an assert/panic instead at a pinch.
    31c4:	01 15       	cp	r16, r1
    31c6:	11 05       	cpc	r17, r1
    31c8:	09 f4       	brne	.+2      	; 0x31cc <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x26>
    31ca:	ba c0       	rjmp	.+372    	; 0x3340 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x19a>
  if(secureChannel) { return(NULL); } // TODO: cannot create secure message yet.
    31cc:	22 23       	and	r18, r18
    31ce:	09 f0       	breq	.+2      	; 0x31d2 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x2c>
    31d0:	b7 c0       	rjmp	.+366    	; 0x3340 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x19a>
  const uint8_t payloadLength =
      1 + // Initial header.
      (content->containsID ? 2 : 0) +
      (content->containsTempAndPower ? 2 : 0) +
      1 + // Flags header.
      (content->containsAmbL ? 1 : 0);
    31d2:	d8 01       	movw	r26, r16
    31d4:	8c 91       	ld	r24, X
    31d6:	58 2f       	mov	r21, r24
    31d8:	51 70       	andi	r21, 0x01	; 1
    31da:	80 fd       	sbrc	r24, 0
    31dc:	02 c0       	rjmp	.+4      	; 0x31e2 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x3c>
    31de:	41 e0       	ldi	r20, 0x01	; 1
    31e0:	01 c0       	rjmp	.+2      	; 0x31e4 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x3e>
    31e2:	43 e0       	ldi	r20, 0x03	; 3
    31e4:	f8 01       	movw	r30, r16
    31e6:	80 81       	ld	r24, Z
    31e8:	81 fd       	sbrc	r24, 1
    31ea:	02 c0       	rjmp	.+4      	; 0x31f0 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x4a>
    31ec:	30 e0       	ldi	r19, 0x00	; 0
    31ee:	01 c0       	rjmp	.+2      	; 0x31f2 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x4c>
    31f0:	32 e0       	ldi	r19, 0x02	; 2
    31f2:	d8 01       	movw	r26, r16
    31f4:	2c 91       	ld	r18, X
    31f6:	26 95       	lsr	r18
    31f8:	26 95       	lsr	r18
    31fa:	21 70       	andi	r18, 0x01	; 1
  if(buflen < payloadLength + 2)  { return(NULL); }
    31fc:	82 2f       	mov	r24, r18
    31fe:	8f 5f       	subi	r24, 0xFF	; 255
    3200:	84 0f       	add	r24, r20
    3202:	83 0f       	add	r24, r19
    3204:	e8 2e       	mov	r14, r24
    3206:	ff 24       	eor	r15, r15
    3208:	08 94       	sec
    320a:	e1 1c       	adc	r14, r1
    320c:	f1 1c       	adc	r15, r1
    320e:	86 2f       	mov	r24, r22
    3210:	90 e0       	ldi	r25, 0x00	; 0
    3212:	e8 16       	cp	r14, r24
    3214:	f9 06       	cpc	r15, r25
    3216:	0c f0       	brlt	.+2      	; 0x321a <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x74>
    3218:	93 c0       	rjmp	.+294    	; 0x3340 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x19a>

  // Validate some more detail.
  // ID
  if(content->containsID)
    321a:	55 23       	and	r21, r21
    321c:	71 f0       	breq	.+28     	; 0x323a <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x94>
    {
    if((content->id0 == (uint8_t)0xff) || (content->id1 == (uint8_t)0xff)) { return(NULL); } // ID bytes cannot be 0xff.
    321e:	11 96       	adiw	r26, 0x01	; 1
    3220:	9c 91       	ld	r25, X
    3222:	11 97       	sbiw	r26, 0x01	; 1
    3224:	9f 3f       	cpi	r25, 0xFF	; 255
    3226:	09 f4       	brne	.+2      	; 0x322a <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x84>
    3228:	8b c0       	rjmp	.+278    	; 0x3340 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x19a>
    322a:	12 96       	adiw	r26, 0x02	; 2
    322c:	8c 91       	ld	r24, X
    322e:	8f 3f       	cpi	r24, 0xFF	; 255
    3230:	09 f4       	brne	.+2      	; 0x3234 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x8e>
    3232:	86 c0       	rjmp	.+268    	; 0x3340 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x19a>
    if((content->id0 & 0x80) != (content->id1 & 0x80)) { return(NULL); } // ID top bits don't match.
    3234:	89 27       	eor	r24, r25
    3236:	87 fd       	sbrc	r24, 7
    3238:	83 c0       	rjmp	.+262    	; 0x3340 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x19a>
    }
  // Ambient light.
  if(content->containsAmbL)
    323a:	22 23       	and	r18, r18
    323c:	31 f0       	breq	.+12     	; 0x324a <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xa4>
    {
    if((content->ambL == 0) || (content->ambL == (uint8_t)0xff)) { return(NULL); } // Forbidden values.
    323e:	f8 01       	movw	r30, r16
    3240:	85 81       	ldd	r24, Z+5	; 0x05
    3242:	81 50       	subi	r24, 0x01	; 1
    3244:	8e 3f       	cpi	r24, 0xFE	; 254
    3246:	08 f0       	brcs	.+2      	; 0x324a <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xa4>
    3248:	7b c0       	rjmp	.+246    	; 0x3340 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x19a>
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_HIGH 2
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_SECURE 1
  const uint8_t header = MESSAGING_FULL_STATS_HEADER_MSBS |
      (content->containsID ? MESSAGING_FULL_STATS_HEADER_BITS_ID_PRESENT : 0) |
      ((content->containsID && (0 != (content->id0 & 0x80))) ? MESSAGING_FULL_STATS_HEADER_BITS_ID_HIGH : 0) |
      0; // TODO: cannot do secure messages yet.
    324a:	55 23       	and	r21, r21
    324c:	11 f4       	brne	.+4      	; 0x3252 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xac>
    324e:	80 e7       	ldi	r24, 0x70	; 112
    3250:	09 c0       	rjmp	.+18     	; 0x3264 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xbe>
    3252:	d8 01       	movw	r26, r16
    3254:	11 96       	adiw	r26, 0x01	; 1
    3256:	8c 91       	ld	r24, X
    3258:	87 ff       	sbrs	r24, 7
    325a:	03 c0       	rjmp	.+6      	; 0x3262 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xbc>
    325c:	92 e0       	ldi	r25, 0x02	; 2
    325e:	84 e7       	ldi	r24, 0x74	; 116
    3260:	02 c0       	rjmp	.+4      	; 0x3266 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xc0>
    3262:	84 e7       	ldi	r24, 0x74	; 116
    3264:	90 e0       	ldi	r25, 0x00	; 0
  *b++ = header;
    3266:	89 2b       	or	r24, r25
    3268:	e6 01       	movw	r28, r12
    326a:	89 93       	st	Y+, r24
 
  // Insert ID if requested.
  if(content->containsID)
    326c:	f8 01       	movw	r30, r16
    326e:	80 81       	ld	r24, Z
    3270:	80 ff       	sbrs	r24, 0
    3272:	09 c0       	rjmp	.+18     	; 0x3286 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xe0>
    {
    *b++ = content->id0 & 0x7f;
    3274:	81 81       	ldd	r24, Z+1	; 0x01
    3276:	8f 77       	andi	r24, 0x7F	; 127
    3278:	d6 01       	movw	r26, r12
    327a:	11 96       	adiw	r26, 0x01	; 1
    327c:	8c 93       	st	X, r24
    *b++ = content->id1 & 0x7f;
    327e:	82 81       	ldd	r24, Z+2	; 0x02
    3280:	8f 77       	andi	r24, 0x7F	; 127
    3282:	89 83       	std	Y+1, r24	; 0x01
    3284:	22 96       	adiw	r28, 0x02	; 2
    }

  // Insert basic temperature and power status if requested.
  if(content->containsTempAndPower)
    3286:	f8 01       	movw	r30, r16
    3288:	80 81       	ld	r24, Z
    328a:	81 ff       	sbrs	r24, 1
    328c:	07 c0       	rjmp	.+14     	; 0x329c <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xf6>
    {
    writeTrailingMinimalStatsPayloadBody(b, &(content->tempAndPower));
    328e:	b8 01       	movw	r22, r16
    3290:	6d 5f       	subi	r22, 0xFD	; 253
    3292:	7f 4f       	sbci	r23, 0xFF	; 255
    3294:	ce 01       	movw	r24, r28
    3296:	0e 94 9b 18 	call	0x3136	; 0x3136 <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)>
    b += 2;
    329a:	22 96       	adiw	r28, 0x02	; 2
//#define MESSAGING_FULL_STATS_FLAGS_HEADER_AMBL 8
//#define MESSAGING_FULL_STATS_FLAGS_HEADER_RHP 4
  // Omit occupancy data unless encoding for a secure channel or at a very permissive stats TX security level.
  const uint8_t flagsHeader = MESSAGING_FULL_STATS_FLAGS_HEADER_MSBS |
    (content->containsAmbL ? MESSAGING_FULL_STATS_FLAGS_HEADER_AMBL : 0) |
    ((secureChannel || (secLevel <= stTXalwaysAll)) ? (content->occ & 3) : 0);
    329c:	d8 01       	movw	r26, r16
    329e:	8c 91       	ld	r24, X
    32a0:	82 fd       	sbrc	r24, 2
    32a2:	02 c0       	rjmp	.+4      	; 0x32a8 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x102>
    32a4:	90 e6       	ldi	r25, 0x60	; 96
    32a6:	01 c0       	rjmp	.+2      	; 0x32aa <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x104>
    32a8:	98 e6       	ldi	r25, 0x68	; 104
    32aa:	1a 14       	cp	r1, r10
    32ac:	1b 04       	cpc	r1, r11
    32ae:	14 f4       	brge	.+4      	; 0x32b4 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x10e>
    32b0:	80 e0       	ldi	r24, 0x00	; 0
    32b2:	03 c0       	rjmp	.+6      	; 0x32ba <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x114>
    32b4:	f8 01       	movw	r30, r16
    32b6:	86 81       	ldd	r24, Z+6	; 0x06
    32b8:	83 70       	andi	r24, 0x03	; 3
  *b++ = flagsHeader;
    32ba:	89 2b       	or	r24, r25
    32bc:	fe 01       	movw	r30, r28
    32be:	81 93       	st	Z+, r24
  // Now insert extra fields as flagged.
  if(content->containsAmbL)
    32c0:	d8 01       	movw	r26, r16
    32c2:	8c 91       	ld	r24, X
    32c4:	82 ff       	sbrs	r24, 2
    32c6:	04 c0       	rjmp	.+8      	; 0x32d0 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x12a>
    { *b++ = content->ambL; }
    32c8:	15 96       	adiw	r26, 0x05	; 5
    32ca:	8c 91       	ld	r24, X
    32cc:	89 83       	std	Y+1, r24	; 0x01
    32ce:	31 96       	adiw	r30, 0x01	; 1
    32d0:	d6 01       	movw	r26, r12
    32d2:	3f e7       	ldi	r19, 0x7F	; 127
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    32d4:	11 e0       	ldi	r17, 0x01	; 1
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
    32d6:	77 e3       	ldi	r23, 0x37	; 55
    32d8:	21 c0       	rjmp	.+66     	; 0x331c <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x176>
  // TODO: RH% etc

  // Finish off message by computing and appending the CRC and then terminating 0xff (and return pointer to 0xff).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    32da:	8c 91       	ld	r24, X
    32dc:	60 e8       	ldi	r22, 0x80	; 128
    32de:	40 e0       	ldi	r20, 0x00	; 0
    32e0:	50 e0       	ldi	r21, 0x00	; 0
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    32e2:	c8 2f       	mov	r28, r24
    32e4:	d0 e0       	ldi	r29, 0x00	; 0
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
    32e6:	83 2f       	mov	r24, r19
    32e8:	90 e0       	ldi	r25, 0x00	; 0
    32ea:	06 e0       	ldi	r16, 0x06	; 6
    32ec:	96 95       	lsr	r25
    32ee:	87 95       	ror	r24
    32f0:	0a 95       	dec	r16
    32f2:	e1 f7       	brne	.-8      	; 0x32ec <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x146>
    32f4:	28 2f       	mov	r18, r24
    32f6:	21 70       	andi	r18, 0x01	; 1
        if(0 != (datum & i)) { bit = !bit; }
    32f8:	86 2f       	mov	r24, r22
    32fa:	90 e0       	ldi	r25, 0x00	; 0
    32fc:	8c 23       	and	r24, r28
    32fe:	9d 23       	and	r25, r29
    3300:	89 2b       	or	r24, r25
    3302:	09 f0       	breq	.+2      	; 0x3306 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x160>
    3304:	21 27       	eor	r18, r17
        crc <<= 1;
    3306:	33 0f       	add	r19, r19
        if(bit) { crc ^= 0x37; }
    3308:	21 11       	cpse	r18, r1
    330a:	37 27       	eor	r19, r23
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
    330c:	66 95       	lsr	r22
    330e:	4f 5f       	subi	r20, 0xFF	; 255
    3310:	5f 4f       	sbci	r21, 0xFF	; 255
    3312:	48 30       	cpi	r20, 0x08	; 8
    3314:	51 05       	cpc	r21, r1
    3316:	39 f7       	brne	.-50     	; 0x32e6 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x140>
  // TODO: RH% etc

  // Finish off message by computing and appending the CRC and then terminating 0xff (and return pointer to 0xff).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    3318:	11 96       	adiw	r26, 0x01	; 1
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
        }
    return(crc & 0x7f);
    331a:	3f 77       	andi	r19, 0x7F	; 127
  // TODO: RH% etc

  // Finish off message by computing and appending the CRC and then terminating 0xff (and return pointer to 0xff).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    331c:	ae 17       	cp	r26, r30
    331e:	bf 07       	cpc	r27, r31
    3320:	e0 f2       	brcs	.-72     	; 0x32da <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x134>
  *b++ = crc;
    3322:	ef 01       	movw	r28, r30
    3324:	39 93       	st	Y+, r19
  *b = 0xff;
    3326:	8f ef       	ldi	r24, 0xFF	; 255
    3328:	81 83       	std	Z+1, r24	; 0x01
#if 1 && defined(DEBUG)
  if(b - buf != payloadLength + 1) { panic(F("msg gen err")); }
    332a:	ce 01       	movw	r24, r28
    332c:	8c 19       	sub	r24, r12
    332e:	9d 09       	sbc	r25, r13
    3330:	8e 15       	cp	r24, r14
    3332:	9f 05       	cpc	r25, r15
    3334:	39 f0       	breq	.+14     	; 0x3344 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x19e>
    3336:	89 e9       	ldi	r24, 0x99	; 153
    3338:	91 e0       	ldi	r25, 0x01	; 1
    333a:	0e 94 a8 2e 	call	0x5d50	; 0x5d50 <panic(__FlashStringHelper const*)>
    333e:	02 c0       	rjmp	.+4      	; 0x3344 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x19e>
    3340:	c0 e0       	ldi	r28, 0x00	; 0
    3342:	d0 e0       	ldi	r29, 0x00	; 0
#endif
  return(b);
  }
    3344:	ce 01       	movw	r24, r28
    3346:	df 91       	pop	r29
    3348:	cf 91       	pop	r28
    334a:	1f 91       	pop	r17
    334c:	0f 91       	pop	r16
    334e:	ff 90       	pop	r15
    3350:	ef 90       	pop	r14
    3352:	df 90       	pop	r13
    3354:	cf 90       	pop	r12
    3356:	bf 90       	pop	r11
    3358:	af 90       	pop	r10
    335a:	08 95       	ret

0000335c <writeTrailingMinimalStatsPayload(unsigned char*, trailingMinimalStatsPayload const*)>:
#endif
  }

// Store minimal stats payload into (3-byte) buffer from payload struct and append CRC; values are coerced to fit as necessary..
//   * payload  must be non-null
void writeTrailingMinimalStatsPayload(uint8_t *buf, const trailingMinimalStatsPayload_t *payload)
    335c:	cf 93       	push	r28
    335e:	df 93       	push	r29
    3360:	ec 01       	movw	r28, r24
  {
  writeTrailingMinimalStatsPayloadBody(buf, payload);
    3362:	0e 94 9b 18 	call	0x3136	; 0x3136 <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)>
  buf[2] = crc7_5B_update(buf[0], buf[1]);
    3366:	28 81       	ld	r18, Y
    3368:	89 81       	ldd	r24, Y+1	; 0x01
    336a:	60 e8       	ldi	r22, 0x80	; 128
    336c:	40 e0       	ldi	r20, 0x00	; 0
    336e:	50 e0       	ldi	r21, 0x00	; 0
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    3370:	e8 2f       	mov	r30, r24
    3372:	f0 e0       	ldi	r31, 0x00	; 0
    3374:	a1 e0       	ldi	r26, 0x01	; 1
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
    3376:	77 e3       	ldi	r23, 0x37	; 55
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
    3378:	82 2f       	mov	r24, r18
    337a:	90 e0       	ldi	r25, 0x00	; 0
    337c:	36 e0       	ldi	r19, 0x06	; 6
    337e:	96 95       	lsr	r25
    3380:	87 95       	ror	r24
    3382:	3a 95       	dec	r19
    3384:	e1 f7       	brne	.-8      	; 0x337e <writeTrailingMinimalStatsPayload(unsigned char*, trailingMinimalStatsPayload const*)+0x22>
    3386:	38 2f       	mov	r19, r24
    3388:	31 70       	andi	r19, 0x01	; 1
        if(0 != (datum & i)) { bit = !bit; }
    338a:	86 2f       	mov	r24, r22
    338c:	90 e0       	ldi	r25, 0x00	; 0
    338e:	8e 23       	and	r24, r30
    3390:	9f 23       	and	r25, r31
    3392:	89 2b       	or	r24, r25
    3394:	09 f0       	breq	.+2      	; 0x3398 <writeTrailingMinimalStatsPayload(unsigned char*, trailingMinimalStatsPayload const*)+0x3c>
    3396:	3a 27       	eor	r19, r26
        crc <<= 1;
    3398:	22 0f       	add	r18, r18
        if(bit) { crc ^= 0x37; }
    339a:	31 11       	cpse	r19, r1
    339c:	27 27       	eor	r18, r23
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
    339e:	66 95       	lsr	r22
    33a0:	4f 5f       	subi	r20, 0xFF	; 255
    33a2:	5f 4f       	sbci	r21, 0xFF	; 255
    33a4:	48 30       	cpi	r20, 0x08	; 8
    33a6:	51 05       	cpc	r21, r1
    33a8:	39 f7       	brne	.-50     	; 0x3378 <writeTrailingMinimalStatsPayload(unsigned char*, trailingMinimalStatsPayload const*)+0x1c>
// Store minimal stats payload into (3-byte) buffer from payload struct and append CRC; values are coerced to fit as necessary..
//   * payload  must be non-null
void writeTrailingMinimalStatsPayload(uint8_t *buf, const trailingMinimalStatsPayload_t *payload)
  {
  writeTrailingMinimalStatsPayloadBody(buf, payload);
  buf[2] = crc7_5B_update(buf[0], buf[1]);
    33aa:	2f 77       	andi	r18, 0x7F	; 127
    33ac:	2a 83       	std	Y+2, r18	; 0x02
#if 0 && defined(DEBUG)
  for(uint8_t i = 0; i < 3; ++i) { if(0 != (buf[i] & 0x80)) { panic(); } } // MSBits should be clear.
#endif
  }
    33ae:	df 91       	pop	r29
    33b0:	cf 91       	pop	r28
    33b2:	08 95       	ret

000033b4 <SimpleStatsRotationBase::findByKey(char const*) const>:



// Returns pointer to stats tuple with given (non-NULL) key if present, else NULL.
// Does a simple linear search.
SimpleStatsRotationBase::DescValueTuple * SimpleStatsRotationBase::findByKey(const SimpleStatsKey key) const
    33b4:	8f 92       	push	r8
    33b6:	9f 92       	push	r9
    33b8:	af 92       	push	r10
    33ba:	bf 92       	push	r11
    33bc:	cf 92       	push	r12
    33be:	df 92       	push	r13
    33c0:	ef 92       	push	r14
    33c2:	ff 92       	push	r15
    33c4:	0f 93       	push	r16
    33c6:	1f 93       	push	r17
    33c8:	cf 93       	push	r28
    33ca:	df 93       	push	r29
    33cc:	5c 01       	movw	r10, r24
    33ce:	6b 01       	movw	r12, r22
  {
#ifdef DEBUG
  if(NULL == key) { panic(); } 
    33d0:	61 15       	cp	r22, r1
    33d2:	71 05       	cpc	r23, r1
    33d4:	11 f4       	brne	.+4      	; 0x33da <SimpleStatsRotationBase::findByKey(char const*) const+0x26>
    33d6:	0e 94 97 2e 	call	0x5d2e	; 0x5d2e <panic()>
#endif
  for(int i = 0; i < nStats; ++i)
    33da:	f5 01       	movw	r30, r10
    33dc:	83 81       	ldd	r24, Z+3	; 0x03
    33de:	88 2e       	mov	r8, r24
    33e0:	99 24       	eor	r9, r9
    33e2:	ee 24       	eor	r14, r14
    33e4:	ff 24       	eor	r15, r15
    33e6:	00 e0       	ldi	r16, 0x00	; 0
    33e8:	10 e0       	ldi	r17, 0x00	; 0
    33ea:	11 c0       	rjmp	.+34     	; 0x340e <SimpleStatsRotationBase::findByKey(char const*) const+0x5a>
    {
    DescValueTuple * const p = stats + i;
    33ec:	f5 01       	movw	r30, r10
    33ee:	c1 81       	ldd	r28, Z+1	; 0x01
    33f0:	d2 81       	ldd	r29, Z+2	; 0x02
    33f2:	c0 0f       	add	r28, r16
    33f4:	d1 1f       	adc	r29, r17
    if(0 == strcmp(p->descriptor.key, key)) { return(p); }
    33f6:	88 81       	ld	r24, Y
    33f8:	99 81       	ldd	r25, Y+1	; 0x01
    33fa:	b6 01       	movw	r22, r12
    33fc:	0e 94 a7 03 	call	0x74e	; 0x74e <strcmp>
    3400:	09 5f       	subi	r16, 0xF9	; 249
    3402:	1f 4f       	sbci	r17, 0xFF	; 255
    3404:	00 97       	sbiw	r24, 0x00	; 0
    3406:	41 f0       	breq	.+16     	; 0x3418 <SimpleStatsRotationBase::findByKey(char const*) const+0x64>
SimpleStatsRotationBase::DescValueTuple * SimpleStatsRotationBase::findByKey(const SimpleStatsKey key) const
  {
#ifdef DEBUG
  if(NULL == key) { panic(); } 
#endif
  for(int i = 0; i < nStats; ++i)
    3408:	08 94       	sec
    340a:	e1 1c       	adc	r14, r1
    340c:	f1 1c       	adc	r15, r1
    340e:	e8 14       	cp	r14, r8
    3410:	f9 04       	cpc	r15, r9
    3412:	64 f3       	brlt	.-40     	; 0x33ec <SimpleStatsRotationBase::findByKey(char const*) const+0x38>
    3414:	c0 e0       	ldi	r28, 0x00	; 0
    3416:	d0 e0       	ldi	r29, 0x00	; 0
    {
    DescValueTuple * const p = stats + i;
    if(0 == strcmp(p->descriptor.key, key)) { return(p); }
    }
  return(NULL); // Not found.
  }
    3418:	ce 01       	movw	r24, r28
    341a:	df 91       	pop	r29
    341c:	cf 91       	pop	r28
    341e:	1f 91       	pop	r17
    3420:	0f 91       	pop	r16
    3422:	ff 90       	pop	r15
    3424:	ef 90       	pop	r14
    3426:	df 90       	pop	r13
    3428:	cf 90       	pop	r12
    342a:	bf 90       	pop	r11
    342c:	af 90       	pop	r10
    342e:	9f 90       	pop	r9
    3430:	8f 90       	pop	r8
    3432:	08 95       	ret

00003434 <SimpleStatsRotationBase::put(char const*, int)>:

// Create/update value for given stat/key with optional descriptor/properties.
// If properties not already set and not supplied then stat will get defaults.
// If descriptor is supplied then its key must match (and the descriptor will be copied).
// True if successful, false otherwise (eg capacity already reached).
bool SimpleStatsRotationBase::put(const SimpleStatsKey key, const int newValue) // , GenericStatsDescriptor * const descriptor)
    3434:	ef 92       	push	r14
    3436:	ff 92       	push	r15
    3438:	0f 93       	push	r16
    343a:	1f 93       	push	r17
    343c:	cf 93       	push	r28
    343e:	df 93       	push	r29
    3440:	ec 01       	movw	r28, r24
    3442:	7b 01       	movw	r14, r22
    3444:	8a 01       	movw	r16, r20
  {
  DescValueTuple *p = findByKey(key);
    3446:	0e 94 da 19 	call	0x33b4	; 0x33b4 <SimpleStatsRotationBase::findByKey(char const*) const>
    344a:	fc 01       	movw	r30, r24
//       ((NULL != p) && (0 != strcmp(p->descriptor.key, descriptor->key))))
//        { return(false); }
//    }

  // If item already exists, update it.
  if(NULL != p)
    344c:	00 97       	sbiw	r24, 0x00	; 0
    344e:	59 f0       	breq	.+22     	; 0x3466 <SimpleStatsRotationBase::put(char const*, int)+0x32>
    {
//    // If descriptor is supplied then copy it for future use.
//    if(NULL != descriptor) { p->descriptor = *descriptor; }
    // Update the value and mark as changed if changed.
    if(p->value != newValue)
    3450:	84 81       	ldd	r24, Z+4	; 0x04
    3452:	95 81       	ldd	r25, Z+5	; 0x05
    3454:	80 17       	cp	r24, r16
    3456:	91 07       	cpc	r25, r17
    3458:	01 f1       	breq	.+64     	; 0x349a <SimpleStatsRotationBase::put(char const*, int)+0x66>
      {
      p->value = newValue;
    345a:	15 83       	std	Z+5, r17	; 0x05
    345c:	04 83       	std	Z+4, r16	; 0x04
      p->flags.changed = true;
    345e:	86 81       	ldd	r24, Z+6	; 0x06
    3460:	81 60       	ori	r24, 0x01	; 1
    3462:	86 83       	std	Z+6, r24	; 0x06
    3464:	1a c0       	rjmp	.+52     	; 0x349a <SimpleStatsRotationBase::put(char const*, int)+0x66>
    return(true);
    }

  // If not yet at capacity then add this new item at the end.
  // Mark it as changed to prioritise seeing it in the JSON output.
  if(nStats < capacity)
    3466:	2b 81       	ldd	r18, Y+3	; 0x03
    3468:	88 81       	ld	r24, Y
    346a:	28 17       	cp	r18, r24
    346c:	10 f0       	brcs	.+4      	; 0x3472 <SimpleStatsRotationBase::put(char const*, int)+0x3e>
    346e:	80 e0       	ldi	r24, 0x00	; 0
    3470:	15 c0       	rjmp	.+42     	; 0x349c <SimpleStatsRotationBase::put(char const*, int)+0x68>
    {
    p = stats + (nStats++);
    3472:	87 e0       	ldi	r24, 0x07	; 7
    3474:	28 9f       	mul	r18, r24
    3476:	c0 01       	movw	r24, r0
    3478:	11 24       	eor	r1, r1
    347a:	e9 81       	ldd	r30, Y+1	; 0x01
    347c:	fa 81       	ldd	r31, Y+2	; 0x02
    347e:	e8 0f       	add	r30, r24
    3480:	f9 1f       	adc	r31, r25
    3482:	2f 5f       	subi	r18, 0xFF	; 255
    3484:	2b 83       	std	Y+3, r18	; 0x03
    *p = DescValueTuple();
    p->value = newValue;
    3486:	15 83       	std	Z+5, r17	; 0x05
    3488:	04 83       	std	Z+4, r16	; 0x04
    p->flags.changed = true;
    348a:	86 81       	ldd	r24, Z+6	; 0x06
    348c:	81 60       	ori	r24, 0x01	; 1
    348e:	86 83       	std	Z+6, r24	; 0x06
    // Copy descriptor if supplied else use defaults.
//    if(NULL != descriptor) { p->descriptor = *descriptor; }
//    else
       { p->descriptor = GenericStatsDescriptor(key); }
    3490:	13 82       	std	Z+3, r1	; 0x03
    3492:	8e ef       	ldi	r24, 0xFE	; 254
    3494:	82 83       	std	Z+2, r24	; 0x02
    3496:	f1 82       	std	Z+1, r15	; 0x01
    3498:	e0 82       	st	Z, r14
    349a:	81 e0       	ldi	r24, 0x01	; 1
    // Addition of new field done!
    return(true);
    }

  return(false); // FAILED: full.
  }
    349c:	df 91       	pop	r29
    349e:	cf 91       	pop	r28
    34a0:	1f 91       	pop	r17
    34a2:	0f 91       	pop	r16
    34a4:	ff 90       	pop	r15
    34a6:	ef 90       	pop	r14
    34a8:	08 95       	ret

000034aa <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)>:
// Decode core/common 'full' stats message.
//   * content will contains data decoded from the message; must be non-null
// If successful returns pointer to nexte byte of message, ie just after full stats message decoded.
// Returns null if failed (eg because of corrupt message data) and state of 'content' result is undefined.
const uint8_t *decodeFullStatsMessageCore(const uint8_t * const buf, const uint8_t buflen, const stats_TX_level secLevel, const bool secureChannel,
    FullStatsMessageCore_t * const content)
    34aa:	ef 92       	push	r14
    34ac:	ff 92       	push	r15
    34ae:	0f 93       	push	r16
    34b0:	1f 93       	push	r17
    34b2:	cf 93       	push	r28
    34b4:	df 93       	push	r29
    34b6:	7c 01       	movw	r14, r24
  {
  if(NULL == buf) { return(NULL); } // Could be an assert/panic instead at a pinch.
    34b8:	00 97       	sbiw	r24, 0x00	; 0
    34ba:	09 f4       	brne	.+2      	; 0x34be <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x14>
    34bc:	8f c0       	rjmp	.+286    	; 0x35dc <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  if(NULL == content) { return(NULL); } // Could be an assert/panic instead at a pinch.
    34be:	01 15       	cp	r16, r1
    34c0:	11 05       	cpc	r17, r1
    34c2:	09 f4       	brne	.+2      	; 0x34c6 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x1c>
    34c4:	8b c0       	rjmp	.+278    	; 0x35dc <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  if(buflen < FullStatsMessageCore_MIN_BYTES_ON_WIRE) { return(NULL); } // Must be at least minimal message.
    34c6:	63 30       	cpi	r22, 0x03	; 3
    34c8:	08 f4       	brcc	.+2      	; 0x34cc <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x22>
    34ca:	88 c0       	rjmp	.+272    	; 0x35dc <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
#define FullStatsMessageCore_MAX_BYTES_ON_WIRE 8
// Minimum size on wire including trailing CRC of core of FullStatsMessage.  TX message buffer should be one larger for trailing 0xff.
#define FullStatsMessageCore_MIN_BYTES_ON_WIRE 3

// Clear a FullStatsMessageCore_t, also indicating no optional fields present.
static inline void clearFullStatsMessageCore(FullStatsMessageCore_t *const p) { memset(p, 0, sizeof(FullStatsMessageCore_t)); }
    34cc:	87 e0       	ldi	r24, 0x07	; 7
    34ce:	f8 01       	movw	r30, r16
    34d0:	11 92       	st	Z+, r1
    34d2:	8a 95       	dec	r24
    34d4:	e9 f7       	brne	.-6      	; 0x34d0 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x26>
//#define MESSAGING_FULL_STATS_HEADER_MSBS 0x70
//#define MESSAGING_FULL_STATS_HEADER_MASK 0xf0
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_PRESENT 4
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_HIGH 2
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_SECURE 1
  if(MESSAGING_FULL_STATS_HEADER_MSBS != (header & MESSAGING_FULL_STATS_HEADER_MASK)) { return(NULL); } // Bad header.
    34d6:	f7 01       	movw	r30, r14
    34d8:	80 81       	ld	r24, Z
    34da:	28 2f       	mov	r18, r24
    34dc:	30 e0       	ldi	r19, 0x00	; 0
    34de:	c9 01       	movw	r24, r18
    34e0:	80 7f       	andi	r24, 0xF0	; 240
    34e2:	90 70       	andi	r25, 0x00	; 0
    34e4:	80 37       	cpi	r24, 0x70	; 112
    34e6:	91 05       	cpc	r25, r1
    34e8:	09 f0       	breq	.+2      	; 0x34ec <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x42>
    34ea:	78 c0       	rjmp	.+240    	; 0x35dc <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  if(0 != (header & MESSAGING_FULL_STATS_HEADER_BITS_ID_SECURE)) { return(NULL); } // TODO: cannot do secure messages yet.
    34ec:	20 fd       	sbrc	r18, 0
    34ee:	76 c0       	rjmp	.+236    	; 0x35dc <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  // READ THE MESSAGE!
  // Pointer to next byte to read in message.
  register const uint8_t *b = buf;

  // Validate the message header and start to fill in structure.
  const uint8_t header = *b++;
    34f0:	e7 01       	movw	r28, r14
    34f2:	21 96       	adiw	r28, 0x01	; 1
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_SECURE 1
  if(MESSAGING_FULL_STATS_HEADER_MSBS != (header & MESSAGING_FULL_STATS_HEADER_MASK)) { return(NULL); } // Bad header.
  if(0 != (header & MESSAGING_FULL_STATS_HEADER_BITS_ID_SECURE)) { return(NULL); } // TODO: cannot do secure messages yet.
  // Extract ID if present.
  const bool containsID = (0 != (header & MESSAGING_FULL_STATS_HEADER_BITS_ID_PRESENT));
  if(containsID)
    34f4:	22 ff       	sbrs	r18, 2
    34f6:	12 c0       	rjmp	.+36     	; 0x351c <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x72>
    {
    content->containsID = true;
    34f8:	f8 01       	movw	r30, r16
    34fa:	80 81       	ld	r24, Z
    34fc:	81 60       	ori	r24, 0x01	; 1
    34fe:	80 83       	st	Z, r24
    const uint8_t idHigh = ((0 != (header & MESSAGING_FULL_STATS_HEADER_BITS_ID_HIGH)) ? 0x80 : 0);
    3500:	21 fd       	sbrc	r18, 1
    3502:	02 c0       	rjmp	.+4      	; 0x3508 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x5e>
    3504:	90 e0       	ldi	r25, 0x00	; 0
    3506:	01 c0       	rjmp	.+2      	; 0x350a <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x60>
    3508:	90 e8       	ldi	r25, 0x80	; 128
    content->id0 = *b++ | idHigh;
    350a:	f7 01       	movw	r30, r14
    350c:	81 81       	ldd	r24, Z+1	; 0x01
    350e:	89 2b       	or	r24, r25
    3510:	f8 01       	movw	r30, r16
    3512:	81 83       	std	Z+1, r24	; 0x01
    content->id1 = *b++ | idHigh;
    3514:	89 81       	ldd	r24, Y+1	; 0x01
    3516:	98 2b       	or	r25, r24
    3518:	92 83       	std	Z+2, r25	; 0x02
    351a:	22 96       	adiw	r28, 0x02	; 2
    }

  // If next header is temp/power then extract it, else must be the flags header.
  if(MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MSBS == (*b & MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MASK))
    351c:	88 81       	ld	r24, Y
    351e:	80 7e       	andi	r24, 0xE0	; 224
    3520:	80 34       	cpi	r24, 0x40	; 64
    3522:	71 f4       	brne	.+28     	; 0x3540 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x96>
    {
    if(0 != (0x80 & b[1])) { return(NULL); } // Following byte does not have msb correctly cleared.
    3524:	89 81       	ldd	r24, Y+1	; 0x01
    3526:	87 fd       	sbrc	r24, 7
    3528:	59 c0       	rjmp	.+178    	; 0x35dc <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
    extractTrailingMinimalStatsPayload(b, &(content->tempAndPower));
    352a:	b8 01       	movw	r22, r16
    352c:	6d 5f       	subi	r22, 0xFD	; 253
    352e:	7f 4f       	sbci	r23, 0xFF	; 255
    3530:	ce 01       	movw	r24, r28
    3532:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <extractTrailingMinimalStatsPayload(unsigned char const*, trailingMinimalStatsPayload*)>
    b += 2;
    3536:	22 96       	adiw	r28, 0x02	; 2
    content->containsTempAndPower = true;
    3538:	f8 01       	movw	r30, r16
    353a:	80 81       	ld	r24, Z
    353c:	82 60       	ori	r24, 0x02	; 2
    353e:	80 83       	st	Z, r24
    }

  // If next header is flags then extract it.
  // FIXME: risk of misinterpretting CRC.
  if(MESSAGING_FULL_STATS_FLAGS_HEADER_MSBS != (*b & MESSAGING_FULL_STATS_FLAGS_HEADER_MASK)) { return(NULL); } // Corrupt message.
    3540:	28 81       	ld	r18, Y
    3542:	42 2f       	mov	r20, r18
    3544:	50 e0       	ldi	r21, 0x00	; 0
    3546:	ca 01       	movw	r24, r20
    3548:	80 7e       	andi	r24, 0xE0	; 224
    354a:	90 70       	andi	r25, 0x00	; 0
    354c:	80 36       	cpi	r24, 0x60	; 96
    354e:	91 05       	cpc	r25, r1
    3550:	09 f0       	breq	.+2      	; 0x3554 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0xaa>
    3552:	44 c0       	rjmp	.+136    	; 0x35dc <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  const uint8_t flagsHeader = *b++;
    3554:	de 01       	movw	r26, r28
    3556:	11 96       	adiw	r26, 0x01	; 1
  content->occ = flagsHeader & 3;
    3558:	23 70       	andi	r18, 0x03	; 3
    355a:	f8 01       	movw	r30, r16
    355c:	86 81       	ldd	r24, Z+6	; 0x06
    355e:	8c 7f       	andi	r24, 0xFC	; 252
    3560:	82 2b       	or	r24, r18
    3562:	86 83       	std	Z+6, r24	; 0x06
  const bool containsAmbL = (0 != (flagsHeader & MESSAGING_FULL_STATS_FLAGS_HEADER_AMBL));
  if(containsAmbL)
    3564:	43 ff       	sbrs	r20, 3
    3566:	0a c0       	rjmp	.+20     	; 0x357c <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0xd2>
    {
    const uint8_t ambL = *b++;
    3568:	99 81       	ldd	r25, Y+1	; 0x01
    if((0 == ambL) || (ambL == (uint8_t)0xff)) { return(NULL); } // Illegal value.
    356a:	89 2f       	mov	r24, r25
    356c:	81 50       	subi	r24, 0x01	; 1
    356e:	8e 3f       	cpi	r24, 0xFE	; 254
    3570:	a8 f5       	brcc	.+106    	; 0x35dc <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  const uint8_t flagsHeader = *b++;
  content->occ = flagsHeader & 3;
  const bool containsAmbL = (0 != (flagsHeader & MESSAGING_FULL_STATS_FLAGS_HEADER_AMBL));
  if(containsAmbL)
    {
    const uint8_t ambL = *b++;
    3572:	11 96       	adiw	r26, 0x01	; 1
    if((0 == ambL) || (ambL == (uint8_t)0xff)) { return(NULL); } // Illegal value.
    content->ambL = ambL;
    3574:	95 83       	std	Z+5, r25	; 0x05
    content->containsAmbL = true;
    3576:	80 81       	ld	r24, Z
    3578:	84 60       	ori	r24, 0x04	; 4
    357a:	80 83       	st	Z, r24
    357c:	f7 01       	movw	r30, r14
    357e:	3f e7       	ldi	r19, 0x7F	; 127
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    3580:	11 e0       	ldi	r17, 0x01	; 1
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
    3582:	77 e3       	ldi	r23, 0x37	; 55
    3584:	21 c0       	rjmp	.+66     	; 0x35c8 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x11e>
    }

  // Finish off by computing and checking the CRC (and return pointer to just after CRC).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    3586:	80 81       	ld	r24, Z
    3588:	60 e8       	ldi	r22, 0x80	; 128
    358a:	40 e0       	ldi	r20, 0x00	; 0
    358c:	50 e0       	ldi	r21, 0x00	; 0
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    358e:	c8 2f       	mov	r28, r24
    3590:	d0 e0       	ldi	r29, 0x00	; 0
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
    3592:	83 2f       	mov	r24, r19
    3594:	90 e0       	ldi	r25, 0x00	; 0
    3596:	26 e0       	ldi	r18, 0x06	; 6
    3598:	96 95       	lsr	r25
    359a:	87 95       	ror	r24
    359c:	2a 95       	dec	r18
    359e:	e1 f7       	brne	.-8      	; 0x3598 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0xee>
    35a0:	28 2f       	mov	r18, r24
    35a2:	21 70       	andi	r18, 0x01	; 1
        if(0 != (datum & i)) { bit = !bit; }
    35a4:	86 2f       	mov	r24, r22
    35a6:	90 e0       	ldi	r25, 0x00	; 0
    35a8:	8c 23       	and	r24, r28
    35aa:	9d 23       	and	r25, r29
    35ac:	89 2b       	or	r24, r25
    35ae:	09 f0       	breq	.+2      	; 0x35b2 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x108>
    35b0:	21 27       	eor	r18, r17
        crc <<= 1;
    35b2:	33 0f       	add	r19, r19
        if(bit) { crc ^= 0x37; }
    35b4:	21 11       	cpse	r18, r1
    35b6:	37 27       	eor	r19, r23
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
    35b8:	66 95       	lsr	r22
    35ba:	4f 5f       	subi	r20, 0xFF	; 255
    35bc:	5f 4f       	sbci	r21, 0xFF	; 255
    35be:	48 30       	cpi	r20, 0x08	; 8
    35c0:	51 05       	cpc	r21, r1
    35c2:	39 f7       	brne	.-50     	; 0x3592 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0xe8>
    }

  // Finish off by computing and checking the CRC (and return pointer to just after CRC).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    35c4:	31 96       	adiw	r30, 0x01	; 1
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
        }
    return(crc & 0x7f);
    35c6:	3f 77       	andi	r19, 0x7F	; 127
    }

  // Finish off by computing and checking the CRC (and return pointer to just after CRC).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    35c8:	ea 17       	cp	r30, r26
    35ca:	fb 07       	cpc	r31, r27
    35cc:	e0 f2       	brcs	.-72     	; 0x3586 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0xdc>
  if(crc != *b++) { return(NULL); } // Bad CRC.
    35ce:	8c 91       	ld	r24, X
    35d0:	38 17       	cp	r19, r24
    35d2:	21 f4       	brne	.+8      	; 0x35dc <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
    35d4:	9d 01       	movw	r18, r26
    35d6:	2f 5f       	subi	r18, 0xFF	; 255
    35d8:	3f 4f       	sbci	r19, 0xFF	; 255
    35da:	02 c0       	rjmp	.+4      	; 0x35e0 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x136>

  return(b); // Point to just after CRC.
    35dc:	20 e0       	ldi	r18, 0x00	; 0
    35de:	30 e0       	ldi	r19, 0x00	; 0
  }
    35e0:	c9 01       	movw	r24, r18
    35e2:	df 91       	pop	r29
    35e4:	cf 91       	pop	r28
    35e6:	1f 91       	pop	r17
    35e8:	0f 91       	pop	r16
    35ea:	ff 90       	pop	r15
    35ec:	ef 90       	pop	r14
    35ee:	08 95       	ret

000035f0 <ensureIDCreated(bool)>:
// Coerce any ID bytes to valid values if unset (0xff) or if forced,
// by filling with valid values (0x80--0xfe) from decent entropy gathered on the fly.
// Will moan about invalid values and return false but not attempt to reset,
// eg in case underlying EEPROM cell is worn/failing.
// Returns true iff all values good.
bool ensureIDCreated(const bool force)
    35f0:	af 92       	push	r10
    35f2:	bf 92       	push	r11
    35f4:	cf 92       	push	r12
    35f6:	df 92       	push	r13
    35f8:	ef 92       	push	r14
    35fa:	ff 92       	push	r15
    35fc:	0f 93       	push	r16
    35fe:	1f 93       	push	r17
    3600:	cf 93       	push	r28
    3602:	df 93       	push	r29
    3604:	a8 2e       	mov	r10, r24
    3606:	bb 24       	eor	r11, r11
    3608:	b3 94       	inc	r11
    360a:	ee 24       	eor	r14, r14
    360c:	ff 24       	eor	r15, r15
    360e:	c4 e1       	ldi	r28, 0x14	; 20
    3610:	d0 e0       	ldi	r29, 0x00	; 0
    3612:	dc 2e       	mov	r13, r28
    3614:	cd 2e       	mov	r12, r29
  {
  bool allGood = true;
  for(uint8_t i = 0; i < EE_LEN_ID; ++i)
    {
    uint8_t * const loc = i + (uint8_t *)EE_START_ID;
    if(force || (0xff == eeprom_read_byte(loc))) // Byte is unset or change is being forced.
    3616:	aa 20       	and	r10, r10
    3618:	41 f4       	brne	.+16     	; 0x362a <ensureIDCreated(bool)+0x3a>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    361a:	f9 99       	sbic	0x1f, 1	; 31
    361c:	fe cf       	rjmp	.-4      	; 0x361a <ensureIDCreated(bool)+0x2a>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    361e:	d2 bd       	out	0x22, r29	; 34
    3620:	c1 bd       	out	0x21, r28	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    3622:	f8 9a       	sbi	0x1f, 0	; 31
    3624:	80 b5       	in	r24, 0x20	; 32
    3626:	8f 3f       	cpi	r24, 0xFF	; 255
    3628:	41 f5       	brne	.+80     	; 0x367a <ensureIDCreated(bool)+0x8a>
        {
        serialPrintAndFlush(F("Setting ID byte "));
    362a:	82 ec       	ldi	r24, 0xC2	; 194
    362c:	91 e0       	ldi	r25, 0x01	; 1
    362e:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush(i);
    3632:	c7 01       	movw	r24, r14
    3634:	6a e0       	ldi	r22, 0x0A	; 10
    3636:	70 e0       	ldi	r23, 0x00	; 0
    3638:	0e 94 dd 25 	call	0x4bba	; 0x4bba <serialPrintAndFlush(int, int)>
        serialPrintAndFlush(F(" ... "));
    363c:	8c eb       	ldi	r24, 0xBC	; 188
    363e:	91 e0       	ldi	r25, 0x01	; 1
    3640:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <serialPrintAndFlush(__FlashStringHelper const*)>
        const uint8_t envNoise = ((i & 1) ? TemperatureC16.get() : AmbLight.get());
    3644:	e0 fe       	sbrs	r14, 0
    3646:	03 c0       	rjmp	.+6      	; 0x364e <ensureIDCreated(bool)+0x5e>
    3648:	00 91 6f 03 	lds	r16, 0x036F
    364c:	02 c0       	rjmp	.+4      	; 0x3652 <ensureIDCreated(bool)+0x62>
    364e:	00 91 66 03 	lds	r16, 0x0366
        for( ; ; )
          {
          // Try to make decently-randomised 'unique-ish' ID with mixture of sources.
          // Is not confidential, and will be transmitted in the clear.
          // System will typically not have been running long when this is invoked.
          const uint8_t newValue = 0x80 | (getSecureRandomByte() ^ envNoise);
    3652:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <getSecureRandomByte()>
    3656:	18 2f       	mov	r17, r24
    3658:	10 27       	eor	r17, r16
    365a:	10 68       	ori	r17, 0x80	; 128
          if(0xff == newValue) { continue; } // Reject unusable value.
    365c:	1f 3f       	cpi	r17, 0xFF	; 255
    365e:	c9 f3       	breq	.-14     	; 0x3652 <ensureIDCreated(bool)+0x62>
          eeprom_smart_update_byte(loc, newValue);
    3660:	8d 2d       	mov	r24, r13
    3662:	9c 2d       	mov	r25, r12
    3664:	61 2f       	mov	r22, r17
    3666:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <eeprom_smart_update_byte(unsigned char*, unsigned char)>
          serialPrintAndFlush(newValue, HEX);
    366a:	81 2f       	mov	r24, r17
    366c:	90 e0       	ldi	r25, 0x00	; 0
    366e:	60 e1       	ldi	r22, 0x10	; 16
    3670:	70 e0       	ldi	r23, 0x00	; 0
    3672:	0e 94 dd 25 	call	0x4bba	; 0x4bba <serialPrintAndFlush(int, int)>
          break;
          }
        serialPrintlnAndFlush();
    3676:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <serialPrintlnAndFlush()>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    367a:	f9 99       	sbic	0x1f, 1	; 31
    367c:	fe cf       	rjmp	.-4      	; 0x367a <ensureIDCreated(bool)+0x8a>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    367e:	d2 bd       	out	0x22, r29	; 34
    3680:	c1 bd       	out	0x21, r28	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    3682:	f8 9a       	sbi	0x1f, 0	; 31
    3684:	10 b5       	in	r17, 0x20	; 32
        }
    // Validate.
    const uint8_t v2 = eeprom_read_byte(loc);
    if(!validIDByte(v2))
    3686:	81 2f       	mov	r24, r17
    3688:	80 58       	subi	r24, 0x80	; 128
    368a:	8f 37       	cpi	r24, 0x7F	; 127
    368c:	b0 f0       	brcs	.+44     	; 0x36ba <ensureIDCreated(bool)+0xca>
        {
        allGood = false;
        serialPrintAndFlush(F("Invalid ID byte "));
    368e:	8b ea       	ldi	r24, 0xAB	; 171
    3690:	91 e0       	ldi	r25, 0x01	; 1
    3692:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush(i);
    3696:	c7 01       	movw	r24, r14
    3698:	6a e0       	ldi	r22, 0x0A	; 10
    369a:	70 e0       	ldi	r23, 0x00	; 0
    369c:	0e 94 dd 25 	call	0x4bba	; 0x4bba <serialPrintAndFlush(int, int)>
        serialPrintAndFlush(F(" ... "));
    36a0:	85 ea       	ldi	r24, 0xA5	; 165
    36a2:	91 e0       	ldi	r25, 0x01	; 1
    36a4:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush(v2, HEX);
    36a8:	81 2f       	mov	r24, r17
    36aa:	90 e0       	ldi	r25, 0x00	; 0
    36ac:	60 e1       	ldi	r22, 0x10	; 16
    36ae:	70 e0       	ldi	r23, 0x00	; 0
    36b0:	0e 94 dd 25 	call	0x4bba	; 0x4bba <serialPrintAndFlush(int, int)>
        serialPrintlnAndFlush();
    36b4:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <serialPrintlnAndFlush()>
    36b8:	bb 24       	eor	r11, r11
    36ba:	08 94       	sec
    36bc:	e1 1c       	adc	r14, r1
    36be:	f1 1c       	adc	r15, r1
    36c0:	21 96       	adiw	r28, 0x01	; 1
// eg in case underlying EEPROM cell is worn/failing.
// Returns true iff all values good.
bool ensureIDCreated(const bool force)
  {
  bool allGood = true;
  for(uint8_t i = 0; i < EE_LEN_ID; ++i)
    36c2:	88 e0       	ldi	r24, 0x08	; 8
    36c4:	e8 16       	cp	r14, r24
    36c6:	f1 04       	cpc	r15, r1
    36c8:	09 f0       	breq	.+2      	; 0x36cc <ensureIDCreated(bool)+0xdc>
    36ca:	a3 cf       	rjmp	.-186    	; 0x3612 <ensureIDCreated(bool)+0x22>
        serialPrintAndFlush(v2, HEX);
        serialPrintlnAndFlush();
        }
     }
  return(allGood);
  }
    36cc:	8b 2d       	mov	r24, r11
    36ce:	df 91       	pop	r29
    36d0:	cf 91       	pop	r28
    36d2:	1f 91       	pop	r17
    36d4:	0f 91       	pop	r16
    36d6:	ff 90       	pop	r15
    36d8:	ef 90       	pop	r14
    36da:	df 90       	pop	r13
    36dc:	cf 90       	pop	r12
    36de:	bf 90       	pop	r11
    36e0:	af 90       	pop	r10
    36e2:	08 95       	ret

000036e4 <getLastCoreStats(FullStatsMessageCore*)>:
    }
  }

// Gets (and clears) the last core stats record received, if any, returning true and filling in the stats struct.
// If no minimal stats record has been received since the last call then the ID will be absent and the rest undefined.
void getLastCoreStats(FullStatsMessageCore_t *stats)
    36e4:	fc 01       	movw	r30, r24
  {
#if 0 && defined(DEBUG)
  if(NULL == stats) { panic(); }
#endif
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    36e6:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    36e8:	f8 94       	cli
    {
    if(!coreStats.containsID)
    36ea:	80 91 d1 02 	lds	r24, 0x02D1
    36ee:	80 fd       	sbrc	r24, 0
    36f0:	04 c0       	rjmp	.+8      	; 0x36fa <getLastCoreStats(FullStatsMessageCore*)+0x16>
      { stats->containsID = false; } // Nothing there; just clear containsID field in response for speed.
    36f2:	80 81       	ld	r24, Z
    36f4:	8e 7f       	andi	r24, 0xFE	; 254
    36f6:	80 83       	st	Z, r24
    36f8:	0d c0       	rjmp	.+26     	; 0x3714 <getLastCoreStats(FullStatsMessageCore*)+0x30>
    else
      {
      // Copy everything.
      memcpy(stats, (void *)&coreStats, sizeof(*stats));
    36fa:	df 01       	movw	r26, r30
    36fc:	e1 ed       	ldi	r30, 0xD1	; 209
    36fe:	f2 e0       	ldi	r31, 0x02	; 2
    3700:	87 e0       	ldi	r24, 0x07	; 7
    3702:	01 90       	ld	r0, Z+
    3704:	0d 92       	st	X+, r0
    3706:	81 50       	subi	r24, 0x01	; 1
    3708:	e1 f7       	brne	.-8      	; 0x3702 <getLastCoreStats(FullStatsMessageCore*)+0x1e>
      coreStats.containsID = false; // Mark stats as read.
    370a:	80 91 d1 02 	lds	r24, 0x02D1
    370e:	8e 7f       	andi	r24, 0xFE	; 254
    3710:	80 93 d1 02 	sts	0x02D1, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3714:	9f bf       	out	0x3f, r25	; 63
      }
    }
  }
    3716:	08 95       	ret

00003718 <recordCoreStats(bool, FullStatsMessageCore const*)>:
  }

// Record core incoming stats; ID must be set as a minimum.
// Is thread/ISR-safe and fast.
// May be backed by a finite-depth queue, even zero-length (ie discarding); usually holds just one item.
void recordCoreStats(const bool secure, const FullStatsMessageCore_t * const stats)
    3718:	fb 01       	movw	r30, r22
  {
#if 0 && defined(DEBUG)
  if(NULL == payload) { panic(); }
#endif  // TODO
   if(!stats->containsID) { return; } // Ignore if no ID.
    371a:	80 81       	ld	r24, Z
    371c:	80 ff       	sbrs	r24, 0
    371e:	17 c0       	rjmp	.+46     	; 0x374e <recordCoreStats(bool, FullStatsMessageCore const*)+0x36>
   ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    3720:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3722:	f8 94       	cli
    {
    if(coreStats.containsID) { ++inboundStatsQueueOverrun; } // Dropped a frame.
    3724:	80 91 d1 02 	lds	r24, 0x02D1
    3728:	80 ff       	sbrs	r24, 0
    372a:	09 c0       	rjmp	.+18     	; 0x373e <recordCoreStats(bool, FullStatsMessageCore const*)+0x26>
    372c:	80 91 d8 02 	lds	r24, 0x02D8
    3730:	90 91 d9 02 	lds	r25, 0x02D9
    3734:	01 96       	adiw	r24, 0x01	; 1
    3736:	90 93 d9 02 	sts	0x02D9, r25
    373a:	80 93 d8 02 	sts	0x02D8, r24
    memcpy((void *)&coreStats, stats, sizeof(coreStats));
    373e:	a1 ed       	ldi	r26, 0xD1	; 209
    3740:	b2 e0       	ldi	r27, 0x02	; 2
    3742:	87 e0       	ldi	r24, 0x07	; 7
    3744:	01 90       	ld	r0, Z+
    3746:	0d 92       	st	X+, r0
    3748:	81 50       	subi	r24, 0x01	; 1
    374a:	e1 f7       	brne	.-8      	; 0x3744 <recordCoreStats(bool, FullStatsMessageCore const*)+0x2c>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    374c:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    374e:	08 95       	ret

00003750 <recordMinimalStats(bool, unsigned char, unsigned char, trailingMinimalStatsPayload const*)>:
static /* volatile */ FullStatsMessageCore_t coreStats; // Start up showing no record set.

// Record minimal incoming stats from given ID (if each byte < 100, then may be FHT8V-compatible house code).
// Is thread/ISR-safe and fast.
// May be backed by a finite-depth queue, even zero-length (ie discarding); usually holds just one item.
void recordMinimalStats(const bool secure, const uint8_t id0, const uint8_t id1, const trailingMinimalStatsPayload_t * const payload)
    3750:	cf 93       	push	r28
    3752:	df 93       	push	r29
    3754:	d9 01       	movw	r26, r18
  {
#if 0 && defined(DEBUG)
  if(NULL == payload) { panic(); }
#endif
   ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    3756:	3f b7       	in	r19, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3758:	f8 94       	cli
    {
    if(coreStats.containsID) { ++inboundStatsQueueOverrun; } // Dropped a frame.
    375a:	80 91 d1 02 	lds	r24, 0x02D1
    375e:	80 ff       	sbrs	r24, 0
    3760:	09 c0       	rjmp	.+18     	; 0x3774 <recordMinimalStats(bool, unsigned char, unsigned char, trailingMinimalStatsPayload const*)+0x24>
    3762:	80 91 d8 02 	lds	r24, 0x02D8
    3766:	90 91 d9 02 	lds	r25, 0x02D9
    376a:	01 96       	adiw	r24, 0x01	; 1
    376c:	90 93 d9 02 	sts	0x02D9, r25
    3770:	80 93 d8 02 	sts	0x02D8, r24
    3774:	87 e0       	ldi	r24, 0x07	; 7
    3776:	e1 ed       	ldi	r30, 0xD1	; 209
    3778:	f2 e0       	ldi	r31, 0x02	; 2
    377a:	ef 01       	movw	r28, r30
    377c:	19 92       	st	Y+, r1
    377e:	8a 95       	dec	r24
    3780:	e9 f7       	brne	.-6      	; 0x377c <recordMinimalStats(bool, unsigned char, unsigned char, trailingMinimalStatsPayload const*)+0x2c>
    clearFullStatsMessageCore(&coreStats);
    coreStats.id0 = id0;
    3782:	60 93 d2 02 	sts	0x02D2, r22
    coreStats.id1 = id1;
    3786:	40 93 d3 02 	sts	0x02D3, r20
    coreStats.containsID = true;
    378a:	20 91 d1 02 	lds	r18, 0x02D1
    378e:	82 2f       	mov	r24, r18
    3790:	81 60       	ori	r24, 0x01	; 1
    3792:	80 93 d1 02 	sts	0x02D1, r24
    memcpy((void *)&coreStats.tempAndPower, payload, sizeof(coreStats.tempAndPower));
    3796:	8d 91       	ld	r24, X+
    3798:	9c 91       	ld	r25, X
    379a:	90 93 d5 02 	sts	0x02D5, r25
    379e:	80 93 d4 02 	sts	0x02D4, r24
    coreStats.containsTempAndPower = true;
    37a2:	23 60       	ori	r18, 0x03	; 3
    37a4:	20 93 d1 02 	sts	0x02D1, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    37a8:	3f bf       	out	0x3f, r19	; 63
    }
  }
    37aa:	df 91       	pop	r29
    37ac:	cf 91       	pop	r28
    37ae:	08 95       	ret

000037b0 <getLastJSONStats(char*)>:

// Gets (and clears) the last JSON record received, if any,
// filling in the supplied buffer
// else leaving it starting with '\0' if none available.
// The buffer must be at least MSG_JSON_MAX_LENGTH+1 chars.
void getLastJSONStats(char *buf)
    37b0:	1f 93       	push	r17
    37b2:	cf 93       	push	r28
    37b4:	df 93       	push	r29
    37b6:	ec 01       	movw	r28, r24
  {
#if 1 && defined(DEBUG)
  if(NULL == buf) { panic(); }
    37b8:	00 97       	sbiw	r24, 0x00	; 0
    37ba:	11 f4       	brne	.+4      	; 0x37c0 <getLastJSONStats(char*)+0x10>
    37bc:	0e 94 97 2e 	call	0x5d2e	; 0x5d2e <panic()>
#endif
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    37c0:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    37c2:	f8 94       	cli
    {
    if('\0' == *jsonStats)
    37c4:	80 91 da 02 	lds	r24, 0x02DA
    37c8:	88 23       	and	r24, r24
    37ca:	11 f4       	brne	.+4      	; 0x37d0 <getLastJSONStats(char*)+0x20>
      { *buf = '\0'; } // No message available.
    37cc:	18 82       	st	Y, r1
    37ce:	07 c0       	rjmp	.+14     	; 0x37de <getLastJSONStats(char*)+0x2e>
    else
      {
      // Copy the message to the receiver.
      strcpy(buf, jsonStats);
    37d0:	ce 01       	movw	r24, r28
    37d2:	6a ed       	ldi	r22, 0xDA	; 218
    37d4:	72 e0       	ldi	r23, 0x02	; 2
    37d6:	0e 94 b0 03 	call	0x760	; 0x760 <strcpy>
      // Clear the buffer.
      *jsonStats = '\0';
    37da:	10 92 da 02 	sts	0x02DA, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    37de:	1f bf       	out	0x3f, r17	; 63
      }
    }
  }
    37e0:	df 91       	pop	r29
    37e2:	cf 91       	pop	r28
    37e4:	1f 91       	pop	r17
    37e6:	08 95       	ret

000037e8 <recordJSONStats(bool, char const*)>:
// If secure is true then this message arrived over a secure channel.
// The supplied buffer's content is not altered.
// The supplied JSON should already have been somewhat validated.
// Is thread/ISR-safe and moderately fast (though will require a data copy).
// May be backed by a finite-depth queue, even zero-length (ie discarding); usually holds just one item.
void recordJSONStats(bool secure, const char *json)
    37e8:	1f 93       	push	r17
    37ea:	cf 93       	push	r28
    37ec:	df 93       	push	r29
    37ee:	eb 01       	movw	r28, r22
  {
#if 1 && defined(DEBUG)
  if(NULL == json) { panic(); }
    37f0:	61 15       	cp	r22, r1
    37f2:	71 05       	cpc	r23, r1
    37f4:	11 f4       	brne	.+4      	; 0x37fa <recordJSONStats(bool, char const*)+0x12>
    37f6:	0e 94 97 2e 	call	0x5d2e	; 0x5d2e <panic()>
  if('\0' == *json) { panic(); }
    37fa:	88 81       	ld	r24, Y
    37fc:	88 23       	and	r24, r24
    37fe:	11 f4       	brne	.+4      	; 0x3804 <recordJSONStats(bool, char const*)+0x1c>
    3800:	0e 94 97 2e 	call	0x5d2e	; 0x5d2e <panic()>
#endif
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    3804:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3806:	f8 94       	cli
    {
    if('\0' != *jsonStats) { ++inboundStatsQueueOverrun; } // Dropped a frame.
    3808:	80 91 da 02 	lds	r24, 0x02DA
    380c:	88 23       	and	r24, r24
    380e:	49 f0       	breq	.+18     	; 0x3822 <recordJSONStats(bool, char const*)+0x3a>
    3810:	80 91 d8 02 	lds	r24, 0x02D8
    3814:	90 91 d9 02 	lds	r25, 0x02D9
    3818:	01 96       	adiw	r24, 0x01	; 1
    381a:	90 93 d9 02 	sts	0x02D9, r25
    381e:	80 93 d8 02 	sts	0x02D8, r24
    // Atomically overwrite existing buffer with new non-empty stats message.
    strncpy(jsonStats, json, MSG_JSON_MAX_LENGTH+1);
    3822:	8a ed       	ldi	r24, 0xDA	; 218
    3824:	92 e0       	ldi	r25, 0x02	; 2
    3826:	be 01       	movw	r22, r28
    3828:	48 e3       	ldi	r20, 0x38	; 56
    382a:	50 e0       	ldi	r21, 0x00	; 0
    382c:	0e 94 b7 03 	call	0x76e	; 0x76e <strncpy>
    // Drop over-length message,
    if('\0' != jsonStats[sizeof(jsonStats) - 1]) { *jsonStats = '\0'; }
    3830:	80 91 11 03 	lds	r24, 0x0311
    3834:	88 23       	and	r24, r24
    3836:	11 f0       	breq	.+4      	; 0x383c <recordJSONStats(bool, char const*)+0x54>
    3838:	10 92 da 02 	sts	0x02DA, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    383c:	1f bf       	out	0x3f, r17	; 63
    }
  }
    383e:	df 91       	pop	r29
    3840:	cf 91       	pop	r28
    3842:	1f 91       	pop	r17
    3844:	08 95       	ret

00003846 <SupplyVoltageMilliVolts::get() const>:
    virtual uint16_t read();

    // Return last value fetched by read(); undefined before first read()).
    // Fast.
    // NOT thread-safe nor usable within ISRs (Interrupt Service Routines).
    virtual uint16_t get() const { return(mV); }
    3846:	fc 01       	movw	r30, r24
    3848:	84 81       	ldd	r24, Z+4	; 0x04
    384a:	95 81       	ldd	r25, Z+5	; 0x05
    384c:	08 95       	ret

0000384e <SupplyVoltageMilliVolts::isValid(unsigned int) const>:

    // Returns true if the sensor reading value passed is potentially valid, eg in-range.
    // Anything computed by by read() is potentially valid; always true.
    virtual bool isValid(const uint16_t value) const { return(true); }
    384e:	81 e0       	ldi	r24, 0x01	; 1
    3850:	08 95       	ret

00003852 <__vector_9>:
  timer2XtalIntSetup();
#endif
  }

#ifdef WAKEUP_32768HZ_XTAL
ISR(TIMER2_OVF_vect)
    3852:	1f 92       	push	r1
    3854:	0f 92       	push	r0
    3856:	0f b6       	in	r0, 0x3f	; 63
    3858:	0f 92       	push	r0
    385a:	11 24       	eor	r1, r1
    385c:	2f 93       	push	r18
    385e:	8f 93       	push	r24
    3860:	9f 93       	push	r25
// must not enable interrupts, and must leave interrupt state as was on entry.
// If not being called from an ISR then locking round this call that works with the getXXX() functions should be considered.
static inline void tickSecondISR()
#endif
  {
  register uint_fast8_t sTemp = _secondsLT; // Avoid some redundant memory accesses.
    3862:	80 91 20 03 	lds	r24, 0x0320
  sTemp += MAIN_TICK_S;
    3866:	8e 5f       	subi	r24, 0xFE	; 254
  if(sTemp > 59)
    3868:	8c 33       	cpi	r24, 0x3C	; 60
    386a:	c8 f0       	brcs	.+50     	; 0x389e <__vector_9+0x4c>
    {
    sTemp = 0; // Seconds roll.
    register uint_least16_t mTemp = _minutesSinceMidnightLT + 1; // Avoid some redundant memory accesses.
    386c:	80 91 21 03 	lds	r24, 0x0321
    3870:	90 91 22 03 	lds	r25, 0x0322
    3874:	01 96       	adiw	r24, 0x01	; 1
    if(mTemp > 1439)
    3876:	25 e0       	ldi	r18, 0x05	; 5
    3878:	80 3a       	cpi	r24, 0xA0	; 160
    387a:	92 07       	cpc	r25, r18
    387c:	58 f0       	brcs	.+22     	; 0x3894 <__vector_9+0x42>
      {
      mTemp = 0; // Minutes/hours roll.
      // Increment the day.
      ++_daysSince1999LT; // Don't currently prevent roll.
    387e:	80 91 23 03 	lds	r24, 0x0323
    3882:	90 91 24 03 	lds	r25, 0x0324
    3886:	01 96       	adiw	r24, 0x01	; 1
    3888:	90 93 24 03 	sts	0x0324, r25
    388c:	80 93 23 03 	sts	0x0323, r24
    3890:	80 e0       	ldi	r24, 0x00	; 0
    3892:	90 e0       	ldi	r25, 0x00	; 0
      }
    _minutesSinceMidnightLT = mTemp;
    3894:	90 93 22 03 	sts	0x0322, r25
    3898:	80 93 21 03 	sts	0x0321, r24
    389c:	80 e0       	ldi	r24, 0x00	; 0
    }
  _secondsLT = sTemp;
    389e:	80 93 20 03 	sts	0x0320, r24
#if defined(TWO_S_TICK_RTC_SUPPORT)
  tickDoubleSecondISR();
#else
  tickSecondISR();
#endif
  }
    38a2:	9f 91       	pop	r25
    38a4:	8f 91       	pop	r24
    38a6:	2f 91       	pop	r18
    38a8:	0f 90       	pop	r0
    38aa:	0f be       	out	0x3f, r0	; 63
    38ac:	0f 90       	pop	r0
    38ae:	1f 90       	pop	r1
    38b0:	18 95       	reti

000038b2 <__vector_6>:
// May contain a little entropy concentrated in the least-significant bits, in part from WDT-vs-CPU-clock jitter, especially if not sleeping.
static volatile uint8_t _watchdogFired;

// Catch watchdog timer interrupt to automatically clear WDIE and WDIF.
// This allows use of watchdog for low-power timed sleep.
ISR(WDT_vect)
    38b2:	1f 92       	push	r1
    38b4:	0f 92       	push	r0
    38b6:	0f b6       	in	r0, 0x3f	; 63
    38b8:	0f 92       	push	r0
    38ba:	11 24       	eor	r1, r1
    38bc:	8f 93       	push	r24
    38be:	9f 93       	push	r25
    38c0:	df 93       	push	r29
    38c2:	cf 93       	push	r28
    38c4:	0f 92       	push	r0
    38c6:	cd b7       	in	r28, 0x3d	; 61
    38c8:	de b7       	in	r29, 0x3e	; 62
  {
  // WDIE and WDIF are cleared in hardware upon entering this ISR.
  wdt_disable();
    38ca:	88 e1       	ldi	r24, 0x18	; 24
    38cc:	0f b6       	in	r0, 0x3f	; 63
    38ce:	f8 94       	cli
    38d0:	80 93 60 00 	sts	0x0060, r24
    38d4:	10 92 60 00 	sts	0x0060, r1
    38d8:	0f be       	out	0x3f, r0	; 63
  // Note: be careful of what is accessed from this ISR.
  // Capture some marginal entropy from the stack position.
  // 
  uint8_t x;
  _watchdogFired = ((uint8_t) 0x80) | ((uint8_t) (int) &x); // Ensure non-zero, retaining any entropy in ls bits.
    38da:	ce 01       	movw	r24, r28
    38dc:	01 96       	adiw	r24, 0x01	; 1
    38de:	80 68       	ori	r24, 0x80	; 128
    38e0:	80 93 19 03 	sts	0x0319, r24
  }
    38e4:	0f 90       	pop	r0
    38e6:	cf 91       	pop	r28
    38e8:	df 91       	pop	r29
    38ea:	9f 91       	pop	r25
    38ec:	8f 91       	pop	r24
    38ee:	0f 90       	pop	r0
    38f0:	0f be       	out	0x3f, r0	; 63
    38f2:	0f 90       	pop	r0
    38f4:	1f 90       	pop	r1
    38f6:	18 95       	reti

000038f8 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>:
// Note: inlining is prevented so as to avoid migrating anything into the section where the CPU is running slowly.
//
// Note: may be dubious to run CPU clock less than 4x 32768Hz crystal speed,
// eg at 31250Hz for 8MHz RC clock and max prescale.
// Don't access timer 2 regs at low CPU speed, eg in ISRs.
__attribute__ ((noinline)) void sleepLowPowerLoopsMinCPUSpeed(uint16_t loops)
    38f8:	fc 01       	movw	r30, r24
  {
  const clock_div_t prescale = clock_prescale_get(); // Capture current prescale value.
    38fa:	80 91 61 00 	lds	r24, 0x0061
  clock_prescale_set(MAX_CPU_PRESCALE); // Reduce clock speed (increase prescale) as far as possible.
    38fe:	28 e0       	ldi	r18, 0x08	; 8
    3900:	30 e0       	ldi	r19, 0x00	; 0
    3902:	40 e8       	ldi	r20, 0x80	; 128
    3904:	0f b6       	in	r0, 0x3f	; 63
    3906:	f8 94       	cli
    3908:	40 93 61 00 	sts	0x0061, r20
    390c:	20 93 61 00 	sts	0x0061, r18
    3910:	0f be       	out	0x3f, r0	; 63
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    3912:	31 97       	sbiw	r30, 0x01	; 1
    3914:	f1 f7       	brne	.-4      	; 0x3912 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)+0x1a>
  _delay_loop_2(loops); // Burn cycles...
  clock_prescale_set(prescale); // Restore clock prescale.
    3916:	90 e0       	ldi	r25, 0x00	; 0
    3918:	8f 70       	andi	r24, 0x0F	; 15
    391a:	90 70       	andi	r25, 0x00	; 0
    391c:	20 e8       	ldi	r18, 0x80	; 128
    391e:	0f b6       	in	r0, 0x3f	; 63
    3920:	f8 94       	cli
    3922:	20 93 61 00 	sts	0x0061, r18
    3926:	80 93 61 00 	sts	0x0061, r24
    392a:	0f be       	out	0x3f, r0	; 63
  }
    392c:	08 95       	ret

0000392e <sleepPwrSaveWithBODDisabled()>:
#endif

// Sleep with BOD disabled in power-save mode; will wake on any interrupt.
void sleepPwrSaveWithBODDisabled()
  {
  set_sleep_mode(SLEEP_MODE_PWR_SAVE); // Stop all but timer 2 and watchdog when sleeping.
    392e:	83 b7       	in	r24, 0x33	; 51
    3930:	81 7f       	andi	r24, 0xF1	; 241
    3932:	86 60       	ori	r24, 0x06	; 6
    3934:	83 bf       	out	0x33, r24	; 51
  cli();
    3936:	f8 94       	cli
  sleep_enable();
    3938:	83 b7       	in	r24, 0x33	; 51
    393a:	81 60       	ori	r24, 0x01	; 1
    393c:	83 bf       	out	0x33, r24	; 51
  sleep_bod_disable();
    393e:	85 b7       	in	r24, 0x35	; 53
    3940:	80 66       	ori	r24, 0x60	; 96
    3942:	85 bf       	out	0x35, r24	; 53
    3944:	8f 7d       	andi	r24, 0xDF	; 223
    3946:	85 bf       	out	0x35, r24	; 53
  sei();
    3948:	78 94       	sei
  sleep_cpu();
    394a:	88 95       	sleep
  sleep_disable();
    394c:	83 b7       	in	r24, 0x33	; 51
    394e:	8e 7f       	andi	r24, 0xFE	; 254
    3950:	83 bf       	out	0x33, r24	; 51
  sei();
    3952:	78 94       	sei
  }
    3954:	08 95       	ret

00003956 <nap(signed char)>:
//   * watchdogSleep is one of the WDTO_XX values from <avr/wdt.h>
// May be useful to call minimsePowerWithoutSleep() first, when not needing any modules left on.
void nap(int_fast8_t watchdogSleep)
  {
  // Watchdog should (already) be disabled on entry.
  _watchdogFired = 0;
    3956:	10 92 19 03 	sts	0x0319, r1

  wdt_enable(watchdogSleep);
    395a:	83 fd       	sbrc	r24, 3
    395c:	02 c0       	rjmp	.+4      	; 0x3962 <nap(signed char)+0xc>
    395e:	28 e0       	ldi	r18, 0x08	; 8
    3960:	01 c0       	rjmp	.+2      	; 0x3964 <nap(signed char)+0xe>
    3962:	28 e2       	ldi	r18, 0x28	; 40
    3964:	87 70       	andi	r24, 0x07	; 7
    3966:	28 2b       	or	r18, r24
    3968:	88 e1       	ldi	r24, 0x18	; 24
    396a:	90 e0       	ldi	r25, 0x00	; 0
    396c:	0f b6       	in	r0, 0x3f	; 63
    396e:	f8 94       	cli
    3970:	a8 95       	wdr
    3972:	80 93 60 00 	sts	0x0060, r24
    3976:	0f be       	out	0x3f, r0	; 63
    3978:	20 93 60 00 	sts	0x0060, r18
  WDTCSR |= (1 << WDIE);
    397c:	80 91 60 00 	lds	r24, 0x0060
    3980:	80 64       	ori	r24, 0x40	; 64
    3982:	80 93 60 00 	sts	0x0060, r24
#endif

// Sleep with BOD disabled in power-save mode; will wake on any interrupt.
void sleepPwrSaveWithBODDisabled()
  {
  set_sleep_mode(SLEEP_MODE_PWR_SAVE); // Stop all but timer 2 and watchdog when sleeping.
    3986:	83 b7       	in	r24, 0x33	; 51
    3988:	81 7f       	andi	r24, 0xF1	; 241
    398a:	86 60       	ori	r24, 0x06	; 6
    398c:	83 bf       	out	0x33, r24	; 51
  cli();
    398e:	f8 94       	cli
  sleep_enable();
    3990:	83 b7       	in	r24, 0x33	; 51
    3992:	81 60       	ori	r24, 0x01	; 1
    3994:	83 bf       	out	0x33, r24	; 51
  sleep_bod_disable();
    3996:	85 b7       	in	r24, 0x35	; 53
    3998:	80 66       	ori	r24, 0x60	; 96
    399a:	85 bf       	out	0x35, r24	; 53
    399c:	8f 7d       	andi	r24, 0xDF	; 223
    399e:	85 bf       	out	0x35, r24	; 53
  sei();
    39a0:	78 94       	sei
  sleep_cpu();
    39a2:	88 95       	sleep
  sleep_disable();
    39a4:	83 b7       	in	r24, 0x33	; 51
    39a6:	8e 7f       	andi	r24, 0xFE	; 254
    39a8:	83 bf       	out	0x33, r24	; 51
  sei();
    39aa:	78 94       	sei

  // Keep sleeping until watchdog actually fires.
  for( ; ; )
    {
    sleepPwrSaveWithBODDisabled();
    if(0 != _watchdogFired)
    39ac:	80 91 19 03 	lds	r24, 0x0319
    39b0:	88 23       	and	r24, r24
    39b2:	49 f3       	breq	.-46     	; 0x3986 <nap(signed char)+0x30>
      {
      wdt_disable(); // Avoid spurious wakeup later.
    39b4:	88 e1       	ldi	r24, 0x18	; 24
    39b6:	0f b6       	in	r0, 0x3f	; 63
    39b8:	f8 94       	cli
    39ba:	80 93 60 00 	sts	0x0060, r24
    39be:	10 92 60 00 	sts	0x0060, r1
    39c2:	0f be       	out	0x3f, r0	; 63
      return; // All done!
      }
    }
 }
    39c4:	08 95       	ret

000039c6 <idleCPU(signed char)>:
// Should reduce power consumption vs spinning the CPU >> 3x, though not nearly as much as nap().
// True iff watchdog timer expired; false if something else woke the CPU.
bool idleCPU(const int_fast8_t watchdogSleep)
  {
  // Watchdog should (already) be disabled on entry.
  _watchdogFired = 0;
    39c6:	10 92 19 03 	sts	0x0319, r1
  wdt_enable(watchdogSleep);
    39ca:	83 fd       	sbrc	r24, 3
    39cc:	02 c0       	rjmp	.+4      	; 0x39d2 <idleCPU(signed char)+0xc>
    39ce:	28 e0       	ldi	r18, 0x08	; 8
    39d0:	01 c0       	rjmp	.+2      	; 0x39d4 <idleCPU(signed char)+0xe>
    39d2:	28 e2       	ldi	r18, 0x28	; 40
    39d4:	87 70       	andi	r24, 0x07	; 7
    39d6:	28 2b       	or	r18, r24
    39d8:	88 e1       	ldi	r24, 0x18	; 24
    39da:	90 e0       	ldi	r25, 0x00	; 0
    39dc:	0f b6       	in	r0, 0x3f	; 63
    39de:	f8 94       	cli
    39e0:	a8 95       	wdr
    39e2:	80 93 60 00 	sts	0x0060, r24
    39e6:	0f be       	out	0x3f, r0	; 63
    39e8:	20 93 60 00 	sts	0x0060, r18
  WDTCSR |= (1 << WDIE);
    39ec:	80 91 60 00 	lds	r24, 0x0060
    39f0:	80 64       	ori	r24, 0x40	; 64
    39f2:	80 93 60 00 	sts	0x0060, r24
  set_sleep_mode(SLEEP_MODE_IDLE); // Leave everything running but the CPU...
    39f6:	83 b7       	in	r24, 0x33	; 51
    39f8:	81 7f       	andi	r24, 0xF1	; 241
    39fa:	83 bf       	out	0x33, r24	; 51
  sleep_mode();
    39fc:	83 b7       	in	r24, 0x33	; 51
    39fe:	81 60       	ori	r24, 0x01	; 1
    3a00:	83 bf       	out	0x33, r24	; 51
    3a02:	88 95       	sleep
    3a04:	83 b7       	in	r24, 0x33	; 51
    3a06:	8e 7f       	andi	r24, 0xFE	; 254
    3a08:	83 bf       	out	0x33, r24	; 51
  //sleep_disable();
  wdt_disable();
    3a0a:	88 e1       	ldi	r24, 0x18	; 24
    3a0c:	0f b6       	in	r0, 0x3f	; 63
    3a0e:	f8 94       	cli
    3a10:	80 93 60 00 	sts	0x0060, r24
    3a14:	10 92 60 00 	sts	0x0060, r1
    3a18:	0f be       	out	0x3f, r0	; 63
  return(0 != _watchdogFired);
    3a1a:	80 91 19 03 	lds	r24, 0x0319
    3a1e:	81 11       	cpse	r24, r1
    3a20:	81 e0       	ldi	r24, 0x01	; 1
  }
    3a22:	08 95       	ret

00003a24 <__vector_21>:
  }


// Allow wake from (lower-power) sleep while ADC is running.
static volatile bool ADC_complete;
ISR(ADC_vect) { ADC_complete = true; }
    3a24:	1f 92       	push	r1
    3a26:	0f 92       	push	r0
    3a28:	0f b6       	in	r0, 0x3f	; 63
    3a2a:	0f 92       	push	r0
    3a2c:	11 24       	eor	r1, r1
    3a2e:	8f 93       	push	r24
    3a30:	81 e0       	ldi	r24, 0x01	; 1
    3a32:	80 93 1b 03 	sts	0x031B, r24
    3a36:	8f 91       	pop	r24
    3a38:	0f 90       	pop	r0
    3a3a:	0f be       	out	0x3f, r0	; 63
    3a3c:	0f 90       	pop	r0
    3a3e:	1f 90       	pop	r1
    3a40:	18 95       	reti

00003a42 <_analogueNoiseReducedReadM(unsigned char, signed char)>:

// Read ADC/analogue input with reduced noise if possible, in range [0,1023].
//   * admux  is the value to set ADMUX to
//   * samples  maximum number of samples to take (if one, nap() before); strictly positive
// Sets sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
static uint16_t _analogueNoiseReducedReadM(uint8_t admux, int8_t samples = 3)
    3a42:	0f 93       	push	r16
    3a44:	1f 93       	push	r17
    3a46:	98 2f       	mov	r25, r24
    3a48:	16 2f       	mov	r17, r22
// If ADC was disabled, power it up, do Serial.begin(), and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownSerial() may be advisable.
bool powerUpADCIfDisabled()
  {
  if(!(PRR & _BV(PRADC))) { return(false); }
    3a4a:	80 91 64 00 	lds	r24, 0x0064
    3a4e:	80 fd       	sbrc	r24, 0
    3a50:	02 c0       	rjmp	.+4      	; 0x3a56 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x14>
    3a52:	00 e0       	ldi	r16, 0x00	; 0
    3a54:	0b c0       	rjmp	.+22     	; 0x3a6c <_analogueNoiseReducedReadM(unsigned char, signed char)+0x2a>
  PRR &= ~_BV(PRADC); // Enable the ADC.
    3a56:	80 91 64 00 	lds	r24, 0x0064
    3a5a:	8e 7f       	andi	r24, 0xFE	; 254
    3a5c:	80 93 64 00 	sts	0x0064, r24
  ADCSRA |= _BV(ADEN);
    3a60:	80 91 7a 00 	lds	r24, 0x007A
    3a64:	80 68       	ori	r24, 0x80	; 128
    3a66:	80 93 7a 00 	sts	0x007A, r24
    3a6a:	01 e0       	ldi	r16, 0x01	; 1
//   * samples  maximum number of samples to take (if one, nap() before); strictly positive
// Sets sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
static uint16_t _analogueNoiseReducedReadM(uint8_t admux, int8_t samples = 3)
  {
  const bool neededEnable = powerUpADCIfDisabled();
  ADMUX = admux;
    3a6c:	90 93 7c 00 	sts	0x007C, r25
  if(samples < 2) { nap(WDTO_15MS); } // Allow plenty of time for things to settle if not taking multiple samples.
    3a70:	12 30       	cpi	r17, 0x02	; 2
    3a72:	1c f4       	brge	.+6      	; 0x3a7a <_analogueNoiseReducedReadM(unsigned char, signed char)+0x38>
    3a74:	80 e0       	ldi	r24, 0x00	; 0
    3a76:	0e 94 ab 1c 	call	0x3956	; 0x3956 <nap(signed char)>
  set_sleep_mode(SLEEP_MODE_ADC);
    3a7a:	83 b7       	in	r24, 0x33	; 51
    3a7c:	81 7f       	andi	r24, 0xF1	; 241
    3a7e:	82 60       	ori	r24, 0x02	; 2
    3a80:	83 bf       	out	0x33, r24	; 51
  ADCSRB = 0; // Enable free-running mode.
    3a82:	10 92 7b 00 	sts	0x007B, r1
  bitWrite(ADCSRA, ADATE, (samples>1)); // Enable ADC auto-trigger iff wanting multiple samples.
    3a86:	12 30       	cpi	r17, 0x02	; 2
    3a88:	24 f0       	brlt	.+8      	; 0x3a92 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x50>
    3a8a:	80 91 7a 00 	lds	r24, 0x007A
    3a8e:	80 62       	ori	r24, 0x20	; 32
    3a90:	03 c0       	rjmp	.+6      	; 0x3a98 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x56>
    3a92:	80 91 7a 00 	lds	r24, 0x007A
    3a96:	8f 7d       	andi	r24, 0xDF	; 223
    3a98:	80 93 7a 00 	sts	0x007A, r24
  bitSet(ADCSRA, ADIE); // Turn on ADC interrupt.
    3a9c:	80 91 7a 00 	lds	r24, 0x007A
    3aa0:	88 60       	ori	r24, 0x08	; 8
    3aa2:	80 93 7a 00 	sts	0x007A, r24
  bitSet(ADCSRA, ADSC); // Start conversion(s).
    3aa6:	80 91 7a 00 	lds	r24, 0x007A
    3aaa:	80 64       	ori	r24, 0x40	; 64
    3aac:	80 93 7a 00 	sts	0x007A, r24
    3ab0:	4f ef       	ldi	r20, 0xFF	; 255
    3ab2:	9f ef       	ldi	r25, 0xFF	; 255
    3ab4:	21 c0       	rjmp	.+66     	; 0x3af8 <_analogueNoiseReducedReadM(unsigned char, signed char)+0xb6>
  uint8_t oldADCL = 0xff;
  uint8_t oldADCH = 0xff; // Ensure that a second sample will get taken if multiple samples have been requested.
  // Usually take several readings to improve accuracy.  Discard all but the last...
  while(--samples >= 0)
      {
      ADC_complete = false;
    3ab6:	10 92 1b 03 	sts	0x031B, r1
    3aba:	07 c0       	rjmp	.+14     	; 0x3aca <_analogueNoiseReducedReadM(unsigned char, signed char)+0x88>
      while(!ADC_complete) { sleep_mode(); }
    3abc:	83 b7       	in	r24, 0x33	; 51
    3abe:	81 60       	ori	r24, 0x01	; 1
    3ac0:	83 bf       	out	0x33, r24	; 51
    3ac2:	88 95       	sleep
    3ac4:	83 b7       	in	r24, 0x33	; 51
    3ac6:	8e 7f       	andi	r24, 0xFE	; 254
    3ac8:	83 bf       	out	0x33, r24	; 51
    3aca:	80 91 1b 03 	lds	r24, 0x031B
    3ace:	88 23       	and	r24, r24
    3ad0:	a9 f3       	breq	.-22     	; 0x3abc <_analogueNoiseReducedReadM(unsigned char, signed char)+0x7a>
      const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
    3ad2:	30 91 78 00 	lds	r19, 0x0078
      const uint8_t h = ADCH; // Capture the high byte.
    3ad6:	20 91 79 00 	lds	r18, 0x0079
      if((h == oldADCH) && (l == oldADCL)) { break; } // Stop now if result seems to have settled.
    3ada:	29 17       	cp	r18, r25
    3adc:	11 f4       	brne	.+4      	; 0x3ae2 <_analogueNoiseReducedReadM(unsigned char, signed char)+0xa0>
    3ade:	34 17       	cp	r19, r20
    3ae0:	71 f0       	breq	.+28     	; 0x3afe <_analogueNoiseReducedReadM(unsigned char, signed char)+0xbc>
      oldADCL = l;
      oldADCH = h;
      _adcNoise = (_adcNoise >> 1) + (l ^ h) + (__TIME__[7] & 0xf); // Capture a little entropy.
    3ae2:	90 91 1a 03 	lds	r25, 0x031A
    3ae6:	82 2f       	mov	r24, r18
    3ae8:	83 27       	eor	r24, r19
    3aea:	8c 5f       	subi	r24, 0xFC	; 252
    3aec:	96 95       	lsr	r25
    3aee:	98 0f       	add	r25, r24
    3af0:	90 93 1a 03 	sts	0x031A, r25
    3af4:	92 2f       	mov	r25, r18
    3af6:	43 2f       	mov	r20, r19
  bitSet(ADCSRA, ADIE); // Turn on ADC interrupt.
  bitSet(ADCSRA, ADSC); // Start conversion(s).
  uint8_t oldADCL = 0xff;
  uint8_t oldADCH = 0xff; // Ensure that a second sample will get taken if multiple samples have been requested.
  // Usually take several readings to improve accuracy.  Discard all but the last...
  while(--samples >= 0)
    3af8:	11 50       	subi	r17, 0x01	; 1
    3afa:	17 ff       	sbrs	r17, 7
    3afc:	dc cf       	rjmp	.-72     	; 0x3ab6 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x74>
      if((h == oldADCH) && (l == oldADCL)) { break; } // Stop now if result seems to have settled.
      oldADCL = l;
      oldADCH = h;
      _adcNoise = (_adcNoise >> 1) + (l ^ h) + (__TIME__[7] & 0xf); // Capture a little entropy.
      }
  bitClear(ADCSRA, ADIE); // Turn off ADC interrupt.
    3afe:	80 91 7a 00 	lds	r24, 0x007A
    3b02:	87 7f       	andi	r24, 0xF7	; 247
    3b04:	80 93 7a 00 	sts	0x007A, r24
  bitClear(ADCSRA, ADATE); // Turn off ADC auto-trigger.
    3b08:	80 91 7a 00 	lds	r24, 0x007A
    3b0c:	8f 7d       	andi	r24, 0xDF	; 223
    3b0e:	80 93 7a 00 	sts	0x007A, r24
  //sleep_disable();
  const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
    3b12:	20 91 78 00 	lds	r18, 0x0078
  const uint8_t h = ADCH; // Capture the high byte.
    3b16:	40 91 79 00 	lds	r20, 0x0079
  if(neededEnable) { powerDownADC(); }
    3b1a:	00 23       	and	r16, r16
    3b1c:	51 f0       	breq	.+20     	; 0x3b32 <_analogueNoiseReducedReadM(unsigned char, signed char)+0xf0>
  }
    
// Power ADC down.
void powerDownADC()
  {
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
    3b1e:	80 91 7a 00 	lds	r24, 0x007A
    3b22:	8f 77       	andi	r24, 0x7F	; 127
    3b24:	80 93 7a 00 	sts	0x007A, r24
  PRR |= _BV(PRADC); // Disable the ADC.
    3b28:	80 91 64 00 	lds	r24, 0x0064
    3b2c:	81 60       	ori	r24, 0x01	; 1
    3b2e:	80 93 64 00 	sts	0x0064, r24
    3b32:	94 2f       	mov	r25, r20
    3b34:	80 e0       	ldi	r24, 0x00	; 0
    3b36:	30 e0       	ldi	r19, 0x00	; 0
    3b38:	28 2b       	or	r18, r24
    3b3a:	39 2b       	or	r19, r25
  //sleep_disable();
  const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
  const uint8_t h = ADCH; // Capture the high byte.
  if(neededEnable) { powerDownADC(); }
  return((h << 8) | l);
  }
    3b3c:	c9 01       	movw	r24, r18
    3b3e:	1f 91       	pop	r17
    3b40:	0f 91       	pop	r16
    3b42:	08 95       	ret

00003b44 <analogueNoiseReducedRead(int, unsigned char)>:
// Read ADC/analogue input with reduced noise if possible, in range [0,1023].
//   * mode  is the analogue reference, eg DEFAULT (Vcc).
// May set sleep mode to SLEEP_MODE_ADC, and disable sleep on exit.
// Nominally equivalent to analogReference(mode); return(analogRead(pinNumber));
uint16_t analogueNoiseReducedRead(int pinNumber, uint8_t mode)
  { return(_analogueNoiseReducedReadM((mode << 6) | (pinNumber & 7))); }
    3b44:	62 95       	swap	r22
    3b46:	66 0f       	add	r22, r22
    3b48:	66 0f       	add	r22, r22
    3b4a:	60 7c       	andi	r22, 0xC0	; 192
    3b4c:	87 70       	andi	r24, 0x07	; 7
    3b4e:	86 2b       	or	r24, r22
    3b50:	63 e0       	ldi	r22, 0x03	; 3
    3b52:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <_analogueNoiseReducedReadM(unsigned char, signed char)>
    3b56:	08 95       	ret

00003b58 <SupplyVoltageMilliVolts::read()>:


// Force a read/poll of the supply voltage and return the value sensed.
// Expensive/slow.
// NOT thread-safe nor usable within ISRs (Interrupt Service Routines).
uint16_t SupplyVoltageMilliVolts::read()
    3b58:	cf 93       	push	r28
    3b5a:	df 93       	push	r29
    3b5c:	ec 01       	movw	r28, r24




// Measure internal bandgap (1.1V nominal, 1.0--1.2V) as fraction of Vcc [0,1023].
static uint16_t read1V1wrtBattery() { return(_analogueNoiseReducedReadM(_BV(REFS0) | 14)); }
    3b5e:	8e e4       	ldi	r24, 0x4E	; 78
    3b60:	63 e0       	ldi	r22, 0x03	; 3
    3b62:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <_analogueNoiseReducedReadM(unsigned char, signed char)>
    3b66:	9c 01       	movw	r18, r24
  {
  // Measure internal bandgap (1.1V nominal, 1.0--1.2V) as fraction of Vcc.
  const uint16_t raw = read1V1wrtBattery();
  // If Vcc was 1.1V ADC would give 1023.
  // If Vcc was 2.2V ADC would give 511.
  const uint16_t result = ((1023U<<6) / raw) * (1100U>>6);
    3b68:	80 ec       	ldi	r24, 0xC0	; 192
    3b6a:	9f ef       	ldi	r25, 0xFF	; 255
    3b6c:	b9 01       	movw	r22, r18
    3b6e:	0e 94 59 3e 	call	0x7cb2	; 0x7cb2 <__udivmodhi4>
    3b72:	ab 01       	movw	r20, r22
    3b74:	84 e0       	ldi	r24, 0x04	; 4
    3b76:	44 0f       	add	r20, r20
    3b78:	55 1f       	adc	r21, r21
    3b7a:	8a 95       	dec	r24
    3b7c:	e1 f7       	brne	.-8      	; 0x3b76 <SupplyVoltageMilliVolts::read()+0x1e>
    3b7e:	46 0f       	add	r20, r22
    3b80:	57 1f       	adc	r21, r23
  rawInv = raw;
    3b82:	3b 83       	std	Y+3, r19	; 0x03
    3b84:	2a 83       	std	Y+2, r18	; 0x02
  mV = result;
    3b86:	5d 83       	std	Y+5, r21	; 0x05
    3b88:	4c 83       	std	Y+4, r20	; 0x04
  isLow = (result < BATTERY_LOW_MV);
    3b8a:	1e 82       	std	Y+6, r1	; 0x06
    3b8c:	88 e0       	ldi	r24, 0x08	; 8
    3b8e:	47 39       	cpi	r20, 0x97	; 151
    3b90:	58 07       	cpc	r21, r24
    3b92:	10 f4       	brcc	.+4      	; 0x3b98 <SupplyVoltageMilliVolts::read()+0x40>
    3b94:	81 e0       	ldi	r24, 0x01	; 1
    3b96:	8e 83       	std	Y+6, r24	; 0x06
  DEBUG_SERIAL_PRINT(raw);
  if(batteryLow) { DEBUG_SERIAL_PRINT_FLASHSTRING(" LOW"); }
  DEBUG_SERIAL_PRINTLN();
#endif
  return(result);
  }
    3b98:	ca 01       	movw	r24, r20
    3b9a:	df 91       	pop	r29
    3b9c:	cf 91       	pop	r28
    3b9e:	08 95       	ret

00003ba0 <noisyADCRead()>:
// If ADC was disabled, power it up, do Serial.begin(), and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownSerial() may be advisable.
bool powerUpADCIfDisabled()
  {
  if(!(PRR & _BV(PRADC))) { return(false); }
    3ba0:	80 91 64 00 	lds	r24, 0x0064
    3ba4:	80 fd       	sbrc	r24, 0
    3ba6:	02 c0       	rjmp	.+4      	; 0x3bac <noisyADCRead()+0xc>
    3ba8:	40 e0       	ldi	r20, 0x00	; 0
    3baa:	0b c0       	rjmp	.+22     	; 0x3bc2 <noisyADCRead()+0x22>
  PRR &= ~_BV(PRADC); // Enable the ADC.
    3bac:	80 91 64 00 	lds	r24, 0x0064
    3bb0:	8e 7f       	andi	r24, 0xFE	; 254
    3bb2:	80 93 64 00 	sts	0x0064, r24
  ADCSRA |= _BV(ADEN);
    3bb6:	80 91 7a 00 	lds	r24, 0x007A
    3bba:	80 68       	ori	r24, 0x80	; 128
    3bbc:	80 93 7a 00 	sts	0x007A, r24
    3bc0:	41 e0       	ldi	r20, 0x01	; 1
// If defined, update _adcNoise value to make noisyADCRead() output at least a poor PRNG if called in a loop, though might disguise underlying problems.
//#define CATCH_OTHER_NOISE_DURING_NAR // May hide underlying weakness if defined.
uint8_t noisyADCRead()
  {
  const bool neededEnable = powerUpADCIfDisabled();
  ADMUX = _BV(REFS0) | 14; // Bandgap vs Vcc.
    3bc2:	8e e4       	ldi	r24, 0x4E	; 78
    3bc4:	80 93 7c 00 	sts	0x007C, r24
  ADCSRB = 0; // Enable free-running mode.
    3bc8:	10 92 7b 00 	sts	0x007B, r1
  bitWrite(ADCSRA, ADATE, 1); // Multiple samples required.
    3bcc:	80 91 7a 00 	lds	r24, 0x007A
    3bd0:	80 62       	ori	r24, 0x20	; 32
    3bd2:	80 93 7a 00 	sts	0x007A, r24
  ADC_complete = false;
    3bd6:	10 92 1b 03 	sts	0x031B, r1
  bitSet(ADCSRA, ADIE); // Turn on ADC interrupt.
    3bda:	80 91 7a 00 	lds	r24, 0x007A
    3bde:	88 60       	ori	r24, 0x08	; 8
    3be0:	80 93 7a 00 	sts	0x007A, r24
  bitSet(ADCSRA, ADSC); // Start conversion.
    3be4:	80 91 7a 00 	lds	r24, 0x007A
    3be8:	80 64       	ori	r24, 0x40	; 64
    3bea:	80 93 7a 00 	sts	0x007A, r24
    3bee:	90 e0       	ldi	r25, 0x00	; 0
    3bf0:	01 c0       	rjmp	.+2      	; 0x3bf4 <noisyADCRead()+0x54>
  uint8_t count = 0;
  while(!ADC_complete) { ++count; } // Busy wait while 'timing' the ADC conversion.
    3bf2:	9f 5f       	subi	r25, 0xFF	; 255
    3bf4:	80 91 1b 03 	lds	r24, 0x031B
    3bf8:	88 23       	and	r24, r24
    3bfa:	d9 f3       	breq	.-10     	; 0x3bf2 <noisyADCRead()+0x52>
  const uint8_t l1 = ADCL; // Capture the low byte and latch the high byte.
    3bfc:	50 91 78 00 	lds	r21, 0x0078
  const uint8_t h1 = ADCH; // Capture the high byte.
    3c00:	20 91 79 00 	lds	r18, 0x0079
#if defined(CATCH_OTHER_NOISE_DURING_NAR)
  uint8_t result = _crc_ibutton_update(_adcNoise++, h1 ^ count);
#else
  uint8_t result = (h1 << 5) + count;
    3c04:	22 95       	swap	r18
    3c06:	22 0f       	add	r18, r18
    3c08:	20 7e       	andi	r18, 0xE0	; 224
    3c0a:	29 0f       	add	r18, r25
#endif
  set_sleep_mode(SLEEP_MODE_ADC); // Take further samples in more energy-efficient mode.
    3c0c:	83 b7       	in	r24, 0x33	; 51
    3c0e:	81 7f       	andi	r24, 0xF1	; 241
    3c10:	82 60       	ori	r24, 0x02	; 2
    3c12:	83 bf       	out	0x33, r24	; 51
    3c14:	30 e0       	ldi	r19, 0x00	; 0
  // Sample all possible ADC inputs relative to Vcc, whatever the inputs may be connected to.
  // Assumed never to do any harm, eg physical damage or to disturb I/O setup.
  for(uint8_t i = 0; i < 8; ++i)
    {
    ADMUX = (i & 7) | (DEFAULT << 6); // Switching MUX after sample has started, which may add further noise.
    3c16:	83 2f       	mov	r24, r19
    3c18:	87 70       	andi	r24, 0x07	; 7
    3c1a:	80 64       	ori	r24, 0x40	; 64
    3c1c:	80 93 7c 00 	sts	0x007C, r24
    ADC_complete = false;
    3c20:	10 92 1b 03 	sts	0x031B, r1
    3c24:	07 c0       	rjmp	.+14     	; 0x3c34 <noisyADCRead()+0x94>
    while(!ADC_complete)
      {
#if defined(CATCH_OTHER_NOISE_DURING_NAR)       
      result -= 37; /* prime; may capture unrelated interrupt wakeups... */
#endif
      sleep_mode();
    3c26:	83 b7       	in	r24, 0x33	; 51
    3c28:	81 60       	ori	r24, 0x01	; 1
    3c2a:	83 bf       	out	0x33, r24	; 51
    3c2c:	88 95       	sleep
    3c2e:	83 b7       	in	r24, 0x33	; 51
    3c30:	8e 7f       	andi	r24, 0xFE	; 254
    3c32:	83 bf       	out	0x33, r24	; 51
  // Assumed never to do any harm, eg physical damage or to disturb I/O setup.
  for(uint8_t i = 0; i < 8; ++i)
    {
    ADMUX = (i & 7) | (DEFAULT << 6); // Switching MUX after sample has started, which may add further noise.
    ADC_complete = false;
    while(!ADC_complete)
    3c34:	80 91 1b 03 	lds	r24, 0x031B
    3c38:	88 23       	and	r24, r24
    3c3a:	a9 f3       	breq	.-22     	; 0x3c26 <noisyADCRead()+0x86>
#if defined(CATCH_OTHER_NOISE_DURING_NAR)       
      result -= 37; /* prime; may capture unrelated interrupt wakeups... */
#endif
      sleep_mode();
      }
    const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
    3c3c:	90 91 78 00 	lds	r25, 0x0078
    const uint8_t h = ADCH; // Capture the high byte.
    3c40:	80 91 79 00 	lds	r24, 0x0079
		"	brtc	2f" "\n\t"
		"	eor	%0, %2" "\n\t"
		"2:	dec	%1" "\n\t"
		"	brne	1b" "\n\t"
		: "=r" (__crc), "=d" (__i), "=d" (__pattern)
		: "0" (__crc), "r" (__data));
    3c44:	89 27       	eor	r24, r25
    3c46:	28 27       	eor	r18, r24
    3c48:	88 e0       	ldi	r24, 0x08	; 8
    3c4a:	9c e8       	ldi	r25, 0x8C	; 140
    3c4c:	20 fb       	bst	r18, 0
    3c4e:	26 95       	lsr	r18
    3c50:	0e f4       	brtc	.+2      	; 0x3c54 <noisyADCRead()+0xb4>
    3c52:	29 27       	eor	r18, r25
    3c54:	8a 95       	dec	r24
    3c56:	d1 f7       	brne	.-12     	; 0x3c4c <noisyADCRead()+0xac>
  uint8_t result = (h1 << 5) + count;
#endif
  set_sleep_mode(SLEEP_MODE_ADC); // Take further samples in more energy-efficient mode.
  // Sample all possible ADC inputs relative to Vcc, whatever the inputs may be connected to.
  // Assumed never to do any harm, eg physical damage or to disturb I/O setup.
  for(uint8_t i = 0; i < 8; ++i)
    3c58:	3f 5f       	subi	r19, 0xFF	; 255
    3c5a:	38 30       	cpi	r19, 0x08	; 8
    3c5c:	e1 f6       	brne	.-72     	; 0x3c16 <noisyADCRead()+0x76>
      }
    const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
    const uint8_t h = ADCH; // Capture the high byte.
    result = _crc_ibutton_update(result, l ^ h); // A thorough hash.
    }
  bitClear(ADCSRA, ADIE); // Turn off ADC interrupt.
    3c5e:	80 91 7a 00 	lds	r24, 0x007A
    3c62:	87 7f       	andi	r24, 0xF7	; 247
    3c64:	80 93 7a 00 	sts	0x007A, r24
  bitClear(ADCSRA, ADATE); // Turn off ADC auto-trigger.
    3c68:	80 91 7a 00 	lds	r24, 0x007A
    3c6c:	8f 7d       	andi	r24, 0xDF	; 223
    3c6e:	80 93 7a 00 	sts	0x007A, r24
  if(neededEnable) { powerDownADC(); }
    3c72:	44 23       	and	r20, r20
    3c74:	51 f0       	breq	.+20     	; 0x3c8a <noisyADCRead()+0xea>
  }
    
// Power ADC down.
void powerDownADC()
  {
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
    3c76:	80 91 7a 00 	lds	r24, 0x007A
    3c7a:	8f 77       	andi	r24, 0x7F	; 127
    3c7c:	80 93 7a 00 	sts	0x007A, r24
  PRR |= _BV(PRADC); // Disable the ADC.
    3c80:	80 91 64 00 	lds	r24, 0x0064
    3c84:	81 60       	ori	r24, 0x01	; 1
    3c86:	80 93 64 00 	sts	0x0064, r24
  bitClear(ADCSRA, ADIE); // Turn off ADC interrupt.
  bitClear(ADCSRA, ADATE); // Turn off ADC auto-trigger.
  if(neededEnable) { powerDownADC(); }
  result ^= l1; // Ensure that the actual Vcc raw lsbs do get folded in to the final result.
  return(result); // Use all the bits collected.
  }
    3c8a:	82 2f       	mov	r24, r18
    3c8c:	85 27       	eor	r24, r21
    3c8e:	08 95       	ret

00003c90 <readInternalTemperatureC16()>:
// May set sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
int readInternalTemperatureC16()
  {
  // Measure internal temperature sensor against internal voltage source.
  // Response is ~1mv/C with 0C at ~289mV according to the data sheet.
  const uint16_t raw = _analogueNoiseReducedReadM(_BV(REFS1) | _BV(REFS0) | _BV(MUX3), 1);
    3c90:	88 ec       	ldi	r24, 0xC8	; 200
    3c92:	61 e0       	ldi	r22, 0x01	; 1
    3c94:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <_analogueNoiseReducedReadM(unsigned char, signed char)>
    3c98:	84 54       	subi	r24, 0x44	; 68
    3c9a:	91 40       	sbci	r25, 0x01	; 1
    3c9c:	22 ed       	ldi	r18, 0xD2	; 210
    3c9e:	30 e0       	ldi	r19, 0x00	; 0
    3ca0:	a9 01       	movw	r20, r18
    3ca2:	84 9f       	mul	r24, r20
    3ca4:	90 01       	movw	r18, r0
    3ca6:	85 9f       	mul	r24, r21
    3ca8:	30 0d       	add	r19, r0
    3caa:	94 9f       	mul	r25, r20
    3cac:	30 0d       	add	r19, r0
    3cae:	11 24       	eor	r1, r1
    3cb0:	94 e0       	ldi	r25, 0x04	; 4
    3cb2:	35 95       	asr	r19
    3cb4:	27 95       	ror	r18
    3cb6:	9a 95       	dec	r25
    3cb8:	e1 f7       	brne	.-8      	; 0x3cb2 <readInternalTemperatureC16()+0x22>
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("");
#endif
  //const int degC = (raw - 328) ; // Crude fast adjustment for one sensor at ~20C (DHD20130429).
  const int degC = ((((int)raw) - 324) * 210) >> 4; // Slightly less crude adjustment, see http://playground.arduino.cc//Main/InternalTemperatureSensor
  return(degC);
  }
    3cba:	c9 01       	movw	r24, r18
    3cbc:	08 95       	ret

00003cbe <powerDownTWI()>:
  }

// Power down TWI (I2C).
void powerDownTWI()
  {
  TWCR &= ~_BV(TWEN); // Disable TWI.
    3cbe:	ec eb       	ldi	r30, 0xBC	; 188
    3cc0:	f0 e0       	ldi	r31, 0x00	; 0
    3cc2:	80 81       	ld	r24, Z
    3cc4:	8b 7f       	andi	r24, 0xFB	; 251
    3cc6:	80 83       	st	Z, r24
  PRR |= _BV(PRTWI); // Disable TWI power.
    3cc8:	e4 e6       	ldi	r30, 0x64	; 100
    3cca:	f0 e0       	ldi	r31, 0x00	; 0
    3ccc:	80 81       	ld	r24, Z
    3cce:	80 68       	ori	r24, 0x80	; 128
    3cd0:	80 83       	st	Z, r24
  //digitalWrite(SCL, 0);

  // Convert to hi-Z inputs.
  //pinMode(SDA, INPUT);
  //pinMode(SCL, INPUT);
  }
    3cd2:	08 95       	ret

00003cd4 <clockJitterWDT()>:
// Expensive in terms of CPU time and thus energy.
// TODO: may be able to reduce clock speed to lower energy cost while still detecting useful jitter.
uint_fast8_t clockJitterWDT()
  {
  // Watchdog should be (already) be disabled on entry.
  _watchdogFired = false;
    3cd4:	10 92 19 03 	sts	0x0319, r1
  wdt_enable(WDTO_15MS); // Set watchdog for minimum time.
    3cd8:	88 e0       	ldi	r24, 0x08	; 8
    3cda:	28 e1       	ldi	r18, 0x18	; 24
    3cdc:	30 e0       	ldi	r19, 0x00	; 0
    3cde:	0f b6       	in	r0, 0x3f	; 63
    3ce0:	f8 94       	cli
    3ce2:	a8 95       	wdr
    3ce4:	20 93 60 00 	sts	0x0060, r18
    3ce8:	0f be       	out	0x3f, r0	; 63
    3cea:	80 93 60 00 	sts	0x0060, r24
  WDTCSR |= (1 << WDIE);
    3cee:	80 91 60 00 	lds	r24, 0x0060
    3cf2:	80 64       	ori	r24, 0x40	; 64
    3cf4:	80 93 60 00 	sts	0x0060, r24
    3cf8:	90 e0       	ldi	r25, 0x00	; 0
    3cfa:	01 c0       	rjmp	.+2      	; 0x3cfe <clockJitterWDT()+0x2a>
  uint_fast8_t count = 0;
  while(!_watchdogFired) { ++count; } // Effectively count CPU cycles until WDT fires.
    3cfc:	9f 5f       	subi	r25, 0xFF	; 255
    3cfe:	80 91 19 03 	lds	r24, 0x0319
    3d02:	88 23       	and	r24, r24
    3d04:	d9 f3       	breq	.-10     	; 0x3cfc <clockJitterWDT()+0x28>
  return(count);
  }
    3d06:	89 2f       	mov	r24, r25
    3d08:	08 95       	ret

00003d0a <clockJitterEntropyByte()>:
// Expensive in terms of CPU time and thus energy, though possibly more efficient than basic clockJitterXXX() routines.
// Internally this uses a CRC as a relatively fast and hopefully effective hash over intermediate values.
// Note the that rejection of repeat values will be less effective with two interleaved gathering mechanisms
// as the interaction while not necessarily adding genuine entropy, will make counts differ between runs.
// DHD20130519: measured as taking ~63ms to run, ie ~8ms per bit gathered.
uint_fast8_t clockJitterEntropyByte()
    3d0a:	1f 93       	push	r17

  uint_fast8_t result = 0;
  uint_fast8_t countR = 0, lastCountR = 0;
  uint_fast8_t countW = 0, lastCountW = 0;

  const uint8_t t0 = TCNT2; // Wait for sub-cycle timer to roll.
    3d0c:	90 91 b2 00 	lds	r25, 0x00B2
    3d10:	40 e0       	ldi	r20, 0x00	; 0
    3d12:	50 e0       	ldi	r21, 0x00	; 0
    3d14:	02 c0       	rjmp	.+4      	; 0x3d1a <clockJitterEntropyByte()+0x10>
  while(t0 == TCNT2) { ++hash; } // Possibly capture some entropy from recent program activity/timing.
    3d16:	4f 5f       	subi	r20, 0xFF	; 255
    3d18:	5f 4f       	sbci	r21, 0xFF	; 255
    3d1a:	80 91 b2 00 	lds	r24, 0x00B2
    3d1e:	98 17       	cp	r25, r24
    3d20:	d1 f3       	breq	.-12     	; 0x3d16 <clockJitterEntropyByte()+0xc>
  uint8_t t1 = TCNT2;
    3d22:	f0 91 b2 00 	lds	r31, 0x00B2

  _watchdogFired = 0;
    3d26:	10 92 19 03 	sts	0x0319, r1
  wdt_enable(WDTO_15MS); // Start watchdog, with minimum timeout.
    3d2a:	88 e0       	ldi	r24, 0x08	; 8
    3d2c:	28 e1       	ldi	r18, 0x18	; 24
    3d2e:	30 e0       	ldi	r19, 0x00	; 0
    3d30:	0f b6       	in	r0, 0x3f	; 63
    3d32:	f8 94       	cli
    3d34:	a8 95       	wdr
    3d36:	20 93 60 00 	sts	0x0060, r18
    3d3a:	0f be       	out	0x3f, r0	; 63
    3d3c:	80 93 60 00 	sts	0x0060, r24
  WDTCSR |= (1 << WDIE);
    3d40:	80 91 60 00 	lds	r24, 0x0060
    3d44:	80 64       	ori	r24, 0x40	; 64
    3d46:	80 93 60 00 	sts	0x0060, r24
    3d4a:	68 e0       	ldi	r22, 0x08	; 8
    3d4c:	90 e0       	ldi	r25, 0x00	; 0
    3d4e:	30 e0       	ldi	r19, 0x00	; 0
    3d50:	e0 e0       	ldi	r30, 0x00	; 0
    3d52:	20 e0       	ldi	r18, 0x00	; 0
    3d54:	70 e0       	ldi	r23, 0x00	; 0
        if(--bitsLeft <= 0) { break; } // Got enough bits; stop now.
        lastCountW = countW;
        }
      countW = 0;
      _watchdogFired = 0;
      wdt_enable(WDTO_15MS); // Restart watchdog, with minimum timeout.
    3d56:	a8 e1       	ldi	r26, 0x18	; 24
    3d58:	b0 e0       	ldi	r27, 0x00	; 0
    3d5a:	18 e0       	ldi	r17, 0x08	; 8
  WDTCSR |= (1 << WDIE);
  int_fast8_t bitsLeft = 8; // Decrement when a bit is harvested...
  for( ; ; )
    {
    // Extract watchdog jitter vs CPU.
    if(!_watchdogFired) { ++countW; }
    3d5c:	80 91 19 03 	lds	r24, 0x0319
    3d60:	88 23       	and	r24, r24
    3d62:	11 f4       	brne	.+4      	; 0x3d68 <clockJitterEntropyByte()+0x5e>
    3d64:	2f 5f       	subi	r18, 0xFF	; 255
    3d66:	2a c0       	rjmp	.+84     	; 0x3dbc <clockJitterEntropyByte()+0xb2>
    else // Watchdog fired.
      {
      if(countW != lastCountW) // Got a different value from last; assume one bit of entropy.
    3d68:	27 17       	cp	r18, r23
    3d6a:	c1 f0       	breq	.+48     	; 0x3d9c <clockJitterEntropyByte()+0x92>
        "eor    %A0,__tmp_reg__"

        : "=d" (__ret)
        : "r" (__data), "0" (__crc)
        : "r0"
    );
    3d6c:	42 27       	eor	r20, r18
    3d6e:	04 2e       	mov	r0, r20
    3d70:	42 95       	swap	r20
    3d72:	40 7f       	andi	r20, 0xF0	; 240
    3d74:	40 25       	eor	r20, r0
    3d76:	05 2e       	mov	r0, r21
    3d78:	54 2f       	mov	r21, r20
    3d7a:	42 95       	swap	r20
    3d7c:	4f 70       	andi	r20, 0x0F	; 15
    3d7e:	04 26       	eor	r0, r20
    3d80:	46 95       	lsr	r20
    3d82:	54 27       	eor	r21, r20
    3d84:	45 27       	eor	r20, r21
    3d86:	44 0f       	add	r20, r20
    3d88:	44 0f       	add	r20, r20
    3d8a:	44 0f       	add	r20, r20
    3d8c:	40 25       	eor	r20, r0
        {
        hash = _crc_ccitt_update(hash, countW);
        result = (result << 1) ^ ((uint_fast8_t)hash); // Nominally capturing (at least) lsb of hash.
    3d8e:	99 0f       	add	r25, r25
    3d90:	94 27       	eor	r25, r20
        if(--bitsLeft <= 0) { break; } // Got enough bits; stop now.
    3d92:	61 50       	subi	r22, 0x01	; 1
    3d94:	16 16       	cp	r1, r22
    3d96:	0c f0       	brlt	.+2      	; 0x3d9a <clockJitterEntropyByte()+0x90>
    3d98:	34 c0       	rjmp	.+104    	; 0x3e02 <clockJitterEntropyByte()+0xf8>
    3d9a:	72 2f       	mov	r23, r18
        lastCountW = countW;
        }
      countW = 0;
      _watchdogFired = 0;
    3d9c:	10 92 19 03 	sts	0x0319, r1
      wdt_enable(WDTO_15MS); // Restart watchdog, with minimum timeout.
    3da0:	0f b6       	in	r0, 0x3f	; 63
    3da2:	f8 94       	cli
    3da4:	a8 95       	wdr
    3da6:	a0 93 60 00 	sts	0x0060, r26
    3daa:	0f be       	out	0x3f, r0	; 63
    3dac:	10 93 60 00 	sts	0x0060, r17
      WDTCSR |= (1 << WDIE);
    3db0:	80 91 60 00 	lds	r24, 0x0060
    3db4:	80 64       	ori	r24, 0x40	; 64
    3db6:	80 93 60 00 	sts	0x0060, r24
    3dba:	20 e0       	ldi	r18, 0x00	; 0
      }

    // Extract RTC jitter vs CPU.
    if(t1 == TCNT2) { --countR; }
    3dbc:	80 91 b2 00 	lds	r24, 0x00B2
    3dc0:	f8 17       	cp	r31, r24
    3dc2:	11 f4       	brne	.+4      	; 0x3dc8 <clockJitterEntropyByte()+0xbe>
    3dc4:	31 50       	subi	r19, 0x01	; 1
    3dc6:	ca cf       	rjmp	.-108    	; 0x3d5c <clockJitterEntropyByte()+0x52>
    else // Sub-cycle timer rolled.
      {
      if(countR != lastCountR) // Got a different value from last; assume one bit of entropy.
    3dc8:	3e 17       	cp	r19, r30
    3dca:	b9 f0       	breq	.+46     	; 0x3dfa <clockJitterEntropyByte()+0xf0>
    3dcc:	43 27       	eor	r20, r19
    3dce:	04 2e       	mov	r0, r20
    3dd0:	42 95       	swap	r20
    3dd2:	40 7f       	andi	r20, 0xF0	; 240
    3dd4:	40 25       	eor	r20, r0
    3dd6:	05 2e       	mov	r0, r21
    3dd8:	54 2f       	mov	r21, r20
    3dda:	42 95       	swap	r20
    3ddc:	4f 70       	andi	r20, 0x0F	; 15
    3dde:	04 26       	eor	r0, r20
    3de0:	46 95       	lsr	r20
    3de2:	54 27       	eor	r21, r20
    3de4:	45 27       	eor	r20, r21
    3de6:	44 0f       	add	r20, r20
    3de8:	44 0f       	add	r20, r20
    3dea:	44 0f       	add	r20, r20
    3dec:	40 25       	eor	r20, r0
        {
        hash = _crc_ccitt_update(hash, countR);
        result = (result << 1) ^ ((uint_fast8_t)hash); // Nominally capturing (at least) lsb of hash.
    3dee:	99 0f       	add	r25, r25
    3df0:	94 27       	eor	r25, r20
        if(--bitsLeft <= 0) { break; } // Got enough bits; stop now.
    3df2:	61 50       	subi	r22, 0x01	; 1
    3df4:	16 16       	cp	r1, r22
    3df6:	2c f4       	brge	.+10     	; 0x3e02 <clockJitterEntropyByte()+0xf8>
    3df8:	e3 2f       	mov	r30, r19
        lastCountR = countR;
        }
      countR = 0;
      t1 = TCNT2; // Set to look for next roll.
    3dfa:	f0 91 b2 00 	lds	r31, 0x00B2
    3dfe:	30 e0       	ldi	r19, 0x00	; 0
    3e00:	ad cf       	rjmp	.-166    	; 0x3d5c <clockJitterEntropyByte()+0x52>
      }
    }

  wdt_disable(); // Ensure no spurious WDT wakeup pending.
    3e02:	88 e1       	ldi	r24, 0x18	; 24
    3e04:	0f b6       	in	r0, 0x3f	; 63
    3e06:	f8 94       	cli
    3e08:	80 93 60 00 	sts	0x0060, r24
    3e0c:	10 92 60 00 	sts	0x0060, r1
    3e10:	0f be       	out	0x3f, r0	; 63
  return(result);
  }
    3e12:	89 2f       	mov	r24, r25
    3e14:	1f 91       	pop	r17
    3e16:	08 95       	ret

00003e18 <Sensor<unsigned int>::preferredPollInterval_s() const>:
 
    // Returns non-zero if this implementation requires a regular call to read() to operate correctly.
    // Preferred poll interval (in seconds) or 0 if no regular poll() call required.
    // Default returns 0 indicating regular call to read() not required,
    // only as required to fetch new values from the underlying sensor.
    virtual uint8_t preferredPollInterval_s() const { return(0); }
    3e18:	80 e0       	ldi	r24, 0x00	; 0
    3e1a:	08 95       	ret

00003e1c <Sensor<unsigned int>::handleInterruptSimple()>:
    // Must be fast and ISR (Interrupt Service Routine) safe.
    // Returns true if interrupt was successfully handled and cleared
    // else another interrupt handler in the chain may be called
    // to attempt to clear the interrupt.
    // By default does nothing (and returns false).
    virtual bool handleInterruptSimple() { return(false); }
    3e1c:	80 e0       	ldi	r24, 0x00	; 0
    3e1e:	08 95       	ret

00003e20 <Sensor<unsigned int>::begin()>:

    // Begin access to this sensor if applicable and not already begun.
    // Returns true if it needed to be begun.
    // Allows logic to end() if required at the end of a block, etc.
    // Defaults to do nothing (and return false).
    virtual bool begin() { return(false); }
    3e20:	80 e0       	ldi	r24, 0x00	; 0
    3e22:	08 95       	ret

00003e24 <Sensor<unsigned int>::isAvailable() const>:

    // Returns true if this sensor is currently available.
    // True by default unless implementation overrides.
    // For those sensors that need starting this will be false before begin().
    virtual bool isAvailable() const { return(true); }
    3e24:	81 e0       	ldi	r24, 0x01	; 1
    3e26:	08 95       	ret

00003e28 <Sensor<unsigned int>::end()>:

    // End access to this sensor if applicable and not already ended.
    // Returns true if it needed to be ended.
    // Defaults to do nothing (and return false).
    virtual bool end() { return(false); }
    3e28:	80 e0       	ldi	r24, 0x00	; 0
    3e2a:	08 95       	ret

00003e2c <global constructors keyed to _Z25minimisePowerWithoutSleepv>:
    // True if last-measured voltage was low.
    bool isLow;
 
  public:
    // Initialise to cautious values.
    SupplyVoltageMilliVolts() : mV(0), isLow(true) { }
    3e2c:	85 e7       	ldi	r24, 0x75	; 117
    3e2e:	91 e0       	ldi	r25, 0x01	; 1
    3e30:	90 93 13 03 	sts	0x0313, r25
    3e34:	80 93 12 03 	sts	0x0312, r24
    3e38:	10 92 17 03 	sts	0x0317, r1
    3e3c:	10 92 16 03 	sts	0x0316, r1
    3e40:	81 e0       	ldi	r24, 0x01	; 1
    3e42:	80 93 18 03 	sts	0x0318, r24
    3e46:	08 95       	ret

00003e48 <captureEntropy1()>:
// Capture a little system entropy.
// This call should typically take << 1ms at 1MHz CPU.
// Does not change CPU clock speeds, mess with interrupts (other than possible brief blocking), or do I/O, or sleep.
// Should inject some noise into secure (TBD) and non-secure (RNG8) PRNGs.
void captureEntropy1()
  { seedRNG8(getSubCycleTime() ^ _adcNoise, cycleCountCPU() ^ Supply_mV.get(), _watchdogFired); }
    3e48:	20 91 b2 00 	lds	r18, 0x00B2
    3e4c:	80 91 1a 03 	lds	r24, 0x031A
    3e50:	66 b5       	in	r22, 0x26	; 38
    3e52:	40 91 19 03 	lds	r20, 0x0319
    3e56:	90 91 16 03 	lds	r25, 0x0316
    3e5a:	69 27       	eor	r22, r25
    3e5c:	82 27       	eor	r24, r18
    3e5e:	0e 94 90 20 	call	0x4120	; 0x4120 <seedRNG8(unsigned char, unsigned char, unsigned char)>
    3e62:	08 95       	ret

00003e64 <powerDownSPI()>:
  }

// Power down SPI.
void powerDownSPI()
  {
  SPCR &= ~_BV(SPE); // Disable SPI.
    3e64:	8c b5       	in	r24, 0x2c	; 44
    3e66:	8f 7b       	andi	r24, 0xBF	; 191
    3e68:	8c bd       	out	0x2c, r24	; 44
  PRR |= _BV(PRSPI); // Power down...
    3e6a:	e4 e6       	ldi	r30, 0x64	; 100
    3e6c:	f0 e0       	ldi	r31, 0x00	; 0
    3e6e:	80 81       	ld	r24, Z
    3e70:	84 60       	ori	r24, 0x04	; 4
    3e72:	80 83       	st	Z, r24

  pinMode(PIN_SPI_nSS, OUTPUT); // Ensure that nSS is an output to avoid forcing SPI to slave mode by accident.
    3e74:	8a e0       	ldi	r24, 0x0A	; 10
    3e76:	61 e0       	ldi	r22, 0x01	; 1
    3e78:	0e 94 7b 38 	call	0x70f6	; 0x70f6 <pinMode>
  fastDigitalWrite(PIN_SPI_nSS, HIGH); // Ensure that nSS is HIGH and thus any slave deselected when powering up SPI.
    3e7c:	2a 9a       	sbi	0x05, 2	; 5

  // Avoid pins from floating when SPI is disabled.
  // Try to preserve general I/O direction and restore previous output values for outputs.
  pinMode(PIN_SPI_SCK, OUTPUT);
    3e7e:	8d e0       	ldi	r24, 0x0D	; 13
    3e80:	61 e0       	ldi	r22, 0x01	; 1
    3e82:	0e 94 7b 38 	call	0x70f6	; 0x70f6 <pinMode>
  pinMode(PIN_SPI_MOSI, OUTPUT);
    3e86:	8b e0       	ldi	r24, 0x0B	; 11
    3e88:	61 e0       	ldi	r22, 0x01	; 1
    3e8a:	0e 94 7b 38 	call	0x70f6	; 0x70f6 <pinMode>
  pinMode(PIN_SPI_MISO, INPUT_PULLUP);
    3e8e:	8c e0       	ldi	r24, 0x0C	; 12
    3e90:	62 e0       	ldi	r22, 0x02	; 2
    3e92:	0e 94 7b 38 	call	0x70f6	; 0x70f6 <pinMode>

  // If sharing SPI SCK with LED indicator then return this pin to being an output (retaining previous value).
  //if(LED_HEATCALL == PIN_SPI_SCK) { pinMode(LED_HEATCALL, OUTPUT); }
  }
    3e96:	08 95       	ret

00003e98 <powerUpSPIIfDisabled()>:
// If SPI was disabled, power it up, enable it as master and with a sensible clock speed, etc, and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownSPI() may be advisable.
bool powerUpSPIIfDisabled()
  {
  if(!(PRR & _BV(PRSPI))) { return(false); }
    3e98:	80 91 64 00 	lds	r24, 0x0064
    3e9c:	82 fd       	sbrc	r24, 2
    3e9e:	02 c0       	rjmp	.+4      	; 0x3ea4 <powerUpSPIIfDisabled()+0xc>
    3ea0:	80 e0       	ldi	r24, 0x00	; 0
    3ea2:	08 95       	ret

  pinMode(PIN_SPI_nSS, OUTPUT); // Ensure that nSS is an output to avoid forcing SPI to slave mode by accident.
    3ea4:	8a e0       	ldi	r24, 0x0A	; 10
    3ea6:	61 e0       	ldi	r22, 0x01	; 1
    3ea8:	0e 94 7b 38 	call	0x70f6	; 0x70f6 <pinMode>
  fastDigitalWrite(PIN_SPI_nSS, HIGH); // Ensure that nSS is HIGH and thus any slave deselected when powering up SPI.
    3eac:	2a 9a       	sbi	0x05, 2	; 5

  PRR &= ~_BV(PRSPI); // Enable SPI power.
    3eae:	80 91 64 00 	lds	r24, 0x0064
    3eb2:	8b 7f       	andi	r24, 0xFB	; 251
    3eb4:	80 93 64 00 	sts	0x0064, r24
  // Configure raw SPI to match better how it was used in PICAXE V0.09 code.
  // CPOL = 0, CPHA = 0
  // Enable SPI, set master mode, set speed.
  const uint8_t ENABLE_MASTER =  _BV(SPE) | _BV(MSTR);
#if F_CPU <= 2000000 // Needs minimum prescale (x2) with slow (<=2MHz) CPU clock.
  SPCR = ENABLE_MASTER; // 2x clock prescale for <=1MHz SPI clock from <=2MHz CPU clock (500kHz SPI @ 1MHz CPU).
    3eb8:	80 e5       	ldi	r24, 0x50	; 80
    3eba:	8c bd       	out	0x2c, r24	; 44
  SPSR = _BV(SPI2X);
    3ebc:	81 e0       	ldi	r24, 0x01	; 1
    3ebe:	8d bd       	out	0x2d, r24	; 45
#else // Needs setting for fast (~16MHz) CPU clock.
  SPCR = _BV(SPR0) | ENABLE_MASTER; // 8x clock prescale for ~2MHz SPI clock from nominal ~16MHz CPU clock.
  SPSR = _BV(SPI2X);
#endif
  return(true);
  }
    3ec0:	08 95       	ret

00003ec2 <power_intermittent_peripherals_disable()>:
// Disable/remove power to intermittent peripherals.
// Switches the digital line to input with no pull-up (ie high-Z).
// There should be some sort of load to stop this floating.
void power_intermittent_peripherals_disable()
  {
  pinMode(IO_POWER_UP, INPUT);
    3ec2:	87 e0       	ldi	r24, 0x07	; 7
    3ec4:	60 e0       	ldi	r22, 0x00	; 0
    3ec6:	0e 94 7b 38 	call	0x70f6	; 0x70f6 <pinMode>
  }
    3eca:	08 95       	ret

00003ecc <minimisePowerWithoutSleep()>:
// to ensure that nothing power-hungry is accidentally left on.
// Any module that may need to run all the time should not be turned off here.
// May be called from panic(), so do not be too clever.
// Does NOT attempt to power down the radio, eg in case that needs to be left in RX mode.
// Does NOT attempt to power down the UART/serial.
void minimisePowerWithoutSleep()
    3ecc:	0f 93       	push	r16
    3ece:	1f 93       	push	r17
  {
  // Disable the watchdog timer.
  wdt_disable();
    3ed0:	88 e1       	ldi	r24, 0x18	; 24
    3ed2:	0f b6       	in	r0, 0x3f	; 63
    3ed4:	f8 94       	cli
    3ed6:	80 93 60 00 	sts	0x0060, r24
    3eda:	10 92 60 00 	sts	0x0060, r1
    3ede:	0f be       	out	0x3f, r0	; 63
  
  // Ensure that external peripherals are powered down.
  power_intermittent_peripherals_disable();
    3ee0:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <power_intermittent_peripherals_disable()>

  // Turn off analogue stuff that eats power.
  ADCSRA = 0; // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
    3ee4:	10 92 7a 00 	sts	0x007A, r1
  ACSR = (1<<ACD); // Disable the analog comparator.
    3ee8:	80 e8       	ldi	r24, 0x80	; 128
    3eea:	80 bf       	out	0x30, r24	; 48
  DIDR0 = 0x3F; // Disable digital input buffers on all ADC0-ADC5 pins.
    3eec:	8f e3       	ldi	r24, 0x3F	; 63
    3eee:	80 93 7e 00 	sts	0x007E, r24
  DIDR1 = (1<<AIN1D)|(1<<AIN0D); // Disable digital input buffer on AIN1/0.
    3ef2:	83 e0       	ldi	r24, 0x03	; 3
    3ef4:	80 93 7f 00 	sts	0x007F, r24
  power_adc_disable();
    3ef8:	04 e6       	ldi	r16, 0x64	; 100
    3efa:	10 e0       	ldi	r17, 0x00	; 0
    3efc:	f8 01       	movw	r30, r16
    3efe:	80 81       	ld	r24, Z
    3f00:	81 60       	ori	r24, 0x01	; 1
    3f02:	80 83       	st	Z, r24

  // Ensure that SPI is powered down.
  powerDownSPI();
    3f04:	0e 94 32 1f 	call	0x3e64	; 0x3e64 <powerDownSPI()>
  }

// Power down TWI (I2C).
void powerDownTWI()
  {
  TWCR &= ~_BV(TWEN); // Disable TWI.
    3f08:	ec eb       	ldi	r30, 0xBC	; 188
    3f0a:	f0 e0       	ldi	r31, 0x00	; 0
    3f0c:	80 81       	ld	r24, Z
    3f0e:	8b 7f       	andi	r24, 0xFB	; 251
    3f10:	80 83       	st	Z, r24
  PRR |= _BV(PRTWI); // Disable TWI power.
    3f12:	f8 01       	movw	r30, r16
    3f14:	80 81       	ld	r24, Z
    3f16:	80 68       	ori	r24, 0x80	; 128
    3f18:	80 83       	st	Z, r24

#if defined(DONT_USE_TIMER0)
  power_timer0_disable();
#endif

  power_timer1_disable();
    3f1a:	80 81       	ld	r24, Z
    3f1c:	88 60       	ori	r24, 0x08	; 8
    3f1e:	80 83       	st	Z, r24

#ifndef WAKEUP_32768HZ_XTAL
  power_timer2_disable();
#endif
  }
    3f20:	1f 91       	pop	r17
    3f22:	0f 91       	pop	r16
    3f24:	08 95       	ret

00003f26 <power_intermittent_peripherals_enable(bool)>:
// items powered direct from IO_POWER_UP may need no such wait.
//
// Switches the digital line to high then output (to avoid ever *discharging* the output cap).
// Note that with 100nF cap, and 330R (or lower) resistor from the output pin,
// then 1ms delay should be plenty for the voltage on the cap to settle.
void power_intermittent_peripherals_enable(bool waitUntilStable)
    3f26:	1f 93       	push	r17
    3f28:	18 2f       	mov	r17, r24
  {
  fastDigitalWrite(IO_POWER_UP, HIGH);
    3f2a:	5f 9a       	sbi	0x0b, 7	; 11
  pinMode(IO_POWER_UP, OUTPUT);
    3f2c:	87 e0       	ldi	r24, 0x07	; 7
    3f2e:	61 e0       	ldi	r22, 0x01	; 1
    3f30:	0e 94 7b 38 	call	0x70f6	; 0x70f6 <pinMode>
  // If requested, wait long enough that I/O peripheral power should be stable.
  // Wait in a relatively low-power way...
  if(waitUntilStable) { sleepLowPowerMs(1); }
    3f34:	11 23       	and	r17, r17
    3f36:	21 f0       	breq	.+8      	; 0x3f40 <power_intermittent_peripherals_enable(bool)+0x1a>
// This may be achieved in part by dynamically slowing the CPU clock if possible.
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed((((MIN_CPU_HZ * (ms)) + 2000) / 4000) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    3f38:	86 e0       	ldi	r24, 0x06	; 6
    3f3a:	90 e0       	ldi	r25, 0x00	; 0
    3f3c:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
  }
    3f40:	1f 91       	pop	r17
    3f42:	08 95       	ret

00003f44 <powerUpTWIIfDisabled()>:
// If TWI (I2C) was disabled, power it up, do Wire.begin(), and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownRWI() may be advisable.
bool powerUpTWIIfDisabled()
  {
  if(!(PRR & _BV(PRTWI))) { return(false); }
    3f44:	80 91 64 00 	lds	r24, 0x0064
    3f48:	87 fd       	sbrc	r24, 7
    3f4a:	02 c0       	rjmp	.+4      	; 0x3f50 <powerUpTWIIfDisabled()+0xc>
    3f4c:	80 e0       	ldi	r24, 0x00	; 0
    3f4e:	08 95       	ret

  PRR &= ~_BV(PRTWI); // Enable TWI power.
    3f50:	80 91 64 00 	lds	r24, 0x0064
    3f54:	8f 77       	andi	r24, 0x7F	; 127
    3f56:	80 93 64 00 	sts	0x0064, r24
  TWCR |= _BV(TWEN); // Enable TWI.
    3f5a:	80 91 bc 00 	lds	r24, 0x00BC
    3f5e:	84 60       	ori	r24, 0x04	; 4
    3f60:	80 93 bc 00 	sts	0x00BC, r24
  Wire.begin(); // Set it going.
    3f64:	8e eb       	ldi	r24, 0xBE	; 190
    3f66:	93 e0       	ldi	r25, 0x03	; 3
    3f68:	0e 94 6d 34 	call	0x68da	; 0x68da <TwoWire::begin()>
  // TODO: reset TWBR and prescaler for our low CPU frequency     (TWBR = ((F_CPU / TWI_FREQ) - 16) / 2 gives -3!)
#if F_CPU <= 1000000
  TWBR = 0; // Implies SCL freq of F_CPU / (16 + 2 * TBWR * PRESC) = 62.5kHz @ F_CPU==1MHz and PRESC==1 (from Wire/TWI code).
    3f6c:	10 92 b8 00 	sts	0x00B8, r1
    3f70:	81 e0       	ldi	r24, 0x01	; 1
#endif
  return(true);
  }
    3f72:	08 95       	ret

00003f74 <powerDownSerial()>:
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
  PRR |= _BV(PRADC); // Disable the ADC.
  }

// Check if serial is (already) powered up.
static bool _serialIsPoweredUp() { return(!(PRR & _BV(PRUSART0))); }
    3f74:	80 91 64 00 	lds	r24, 0x0064


// Flush any pending serial output and power it down if up.
void powerDownSerial()
  {
  if(_serialIsPoweredUp())
    3f78:	81 fd       	sbrc	r24, 1
    3f7a:	08 c0       	rjmp	.+16     	; 0x3f8c <powerDownSerial()+0x18>
    {
    // Flush serial output and shut down if apparently active.
    Serial.flush();
    3f7c:	86 ec       	ldi	r24, 0xC6	; 198
    3f7e:	94 e0       	ldi	r25, 0x04	; 4
    3f80:	0e 94 d6 3a 	call	0x75ac	; 0x75ac <HardwareSerial::flush()>
    //flushSerialHW();
    Serial.end();
    3f84:	86 ec       	ldi	r24, 0xC6	; 198
    3f86:	94 e0       	ldi	r25, 0x04	; 4
    3f88:	0e 94 16 3a 	call	0x742c	; 0x742c <HardwareSerial::end()>
    }
  pinMode(PIN_SERIAL_RX, INPUT_PULLUP);
    3f8c:	80 e0       	ldi	r24, 0x00	; 0
    3f8e:	62 e0       	ldi	r22, 0x02	; 2
    3f90:	0e 94 7b 38 	call	0x70f6	; 0x70f6 <pinMode>
  pinMode(PIN_SERIAL_TX, INPUT_PULLUP);
    3f94:	81 e0       	ldi	r24, 0x01	; 1
    3f96:	62 e0       	ldi	r22, 0x02	; 2
    3f98:	0e 94 7b 38 	call	0x70f6	; 0x70f6 <pinMode>
  PRR |= _BV(PRUSART0); // Disable the UART module.
    3f9c:	80 91 64 00 	lds	r24, 0x0064
    3fa0:	82 60       	ori	r24, 0x02	; 2
    3fa2:	80 93 64 00 	sts	0x0064, r24
  }
    3fa6:	08 95       	ret

00003fa8 <burnHundredsOfCyclesProductivelyAndPoll()>:
// This call should typically take << 1ms at 1MHz CPU.
// Does not change CPU clock speeds, mess with interrupts (other than possible brief blocking), or sleep.
// May capture some entropy in secure and non-secure PRNGs.
void burnHundredsOfCyclesProductivelyAndPoll()
  {
  if(pollIO()) { seedRNG8(cycleCountCPU(), _watchdogFired, getSubCycleTime()); }
    3fa8:	80 e0       	ldi	r24, 0x00	; 0
    3faa:	0e 94 58 06 	call	0xcb0	; 0xcb0 <pollIO(bool)>
    3fae:	88 23       	and	r24, r24
    3fb0:	41 f0       	breq	.+16     	; 0x3fc2 <burnHundredsOfCyclesProductivelyAndPoll()+0x1a>
    3fb2:	86 b5       	in	r24, 0x26	; 38
    3fb4:	60 91 19 03 	lds	r22, 0x0319
    3fb8:	40 91 b2 00 	lds	r20, 0x00B2
    3fbc:	0e 94 90 20 	call	0x4120	; 0x4120 <seedRNG8(unsigned char, unsigned char, unsigned char)>
    3fc0:	08 95       	ret
  else { captureEntropy1(); }
    3fc2:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <captureEntropy1()>
    3fc6:	08 95       	ret

00003fc8 <flushSerialProductive()>:
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
  PRR |= _BV(PRADC); // Disable the ADC.
  }

// Check if serial is (already) powered up.
static bool _serialIsPoweredUp() { return(!(PRR & _BV(PRUSART0))); }
    3fc8:	80 91 64 00 	lds	r24, 0x0064
// Assumes hundreds of CPU cycles available for each character queued for TX.
// Does not change CPU clock speed or disable or mess with USART0, though may poll it.
void flushSerialProductive()
  {
#if 1 && defined(DEBUG)
  if(!_serialIsPoweredUp()) { panic(); } // Trying to operate serial without it powered up.
    3fcc:	81 ff       	sbrs	r24, 1
    3fce:	05 c0       	rjmp	.+10     	; 0x3fda <flushSerialProductive()+0x12>
    3fd0:	0e 94 97 2e 	call	0x5d2e	; 0x5d2e <panic()>
    3fd4:	02 c0       	rjmp	.+4      	; 0x3fda <flushSerialProductive()+0x12>
#endif
  // Can productively spin here churning PRNGs or the like before the flush(), checking for the UART TX buffer to empty...
  // An occasional premature exit to flush() due to Serial interrupt handler interaction is benign, and indeed more grist to the mill.
  while(serialTXInProgress()) { burnHundredsOfCyclesProductivelyAndPoll(); }
    3fd6:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <burnHundredsOfCyclesProductivelyAndPoll()>
    3fda:	80 91 c0 00 	lds	r24, 0x00C0
    3fde:	85 ff       	sbrs	r24, 5
    3fe0:	fa cf       	rjmp	.-12     	; 0x3fd6 <flushSerialProductive()+0xe>
  Serial.flush(); // Wait for all output to have been sent.
    3fe2:	86 ec       	ldi	r24, 0xC6	; 198
    3fe4:	94 e0       	ldi	r25, 0x04	; 4
    3fe6:	0e 94 d6 3a 	call	0x75ac	; 0x75ac <HardwareSerial::flush()>
  }
    3fea:	08 95       	ret

00003fec <flushSerialSCTSensitive()>:
// Does not change CPU clock speed or disable or mess with USART0, though may poll it.
// Sleeps in IDLE mode for ~15ms at a time (backtopped by watchdog) waking on any interrupt
// so that the caller must be sure RX overrun (etc) will not be an issue.
// Switches to flushSerialProductive() behaviour
// if in danger of overrunning a minor cycle while idling.
void flushSerialSCTSensitive()
    3fec:	1f 93       	push	r17
#ifdef ENABLE_AVR_IDLE_MODE
// Idle productively polling I/O, etc, across the system while spending time in low-power mode if possible.
// Typically sleeps for nominally up to 30ms; tries to allow ealier wakeup if interrupt is received, etc.
// (Will often be prematurely woken by timer0 with ~16ms interval.)
// True iff watchdog timer expired; false if something else woke the CPU.
static bool inline idle15AndPoll() { const bool wd = idleCPU(WDTO_15MS); pollIO(!wd); return(wd); }
    3fee:	11 e0       	ldi	r17, 0x01	; 1
  {
#if 0 && defined(DEBUG)
  if(!_serialIsPoweredUp()) { panic(); } // Trying to operate serial without it powered up.
#endif
#ifdef ENABLE_AVR_IDLE_MODE
  while(serialTXInProgress() && (getSubCycleTime() < GSCT_MAX - 2 - (20/SUBCYCLE_TICK_MS_RD)))
    3ff0:	80 91 c0 00 	lds	r24, 0x00C0
    3ff4:	85 fd       	sbrc	r24, 5
    3ff6:	0b c0       	rjmp	.+22     	; 0x400e <flushSerialSCTSensitive()+0x22>
    3ff8:	80 91 b2 00 	lds	r24, 0x00B2
    3ffc:	8b 3f       	cpi	r24, 0xFB	; 251
    3ffe:	38 f4       	brcc	.+14     	; 0x400e <flushSerialSCTSensitive()+0x22>
    4000:	80 e0       	ldi	r24, 0x00	; 0
    4002:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <idleCPU(signed char)>
    4006:	81 27       	eor	r24, r17
    4008:	0e 94 58 06 	call	0xcb0	; 0xcb0 <pollIO(bool)>
    400c:	f1 cf       	rjmp	.-30     	; 0x3ff0 <flushSerialSCTSensitive()+0x4>
    { idle15AndPoll(); } // Save much power by idling CPU, though everything else runs.
#endif
  flushSerialProductive();
    400e:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <flushSerialProductive()>
  }
    4012:	1f 91       	pop	r17
    4014:	08 95       	ret

00004016 <sleepUntilSubCycleTime(unsigned char)>:
// May use a combination of techniques to hit the required time.
// Requesting a sleep until at or near the end of the cycle risks overrun and may be unwise.
// Using this to sleep less then 2 ticks may prove unreliable as the RTC rolls on underneath...
// This is NOT intended to be used to sleep over the end of a minor cycle.
// May poll I/O.
bool sleepUntilSubCycleTime(const uint8_t sleepUntil)
    4016:	0f 93       	push	r16
    4018:	1f 93       	push	r17
    401a:	cf 93       	push	r28
    401c:	df 93       	push	r29
    401e:	18 2f       	mov	r17, r24
      sleepLowPowerLessThanMs(max(SUBCYCLE_TICK_MS_RD / 2, 1)); // Assumed to be a constant expression.
      continue;
      }

    // Compute remaining time in milliseconds, rounded down...
    const uint16_t msLeft = ((uint16_t)SUBCYCLE_TICK_MS_RD) * ticksLeft;
    4020:	07 e0       	ldi	r16, 0x07	; 7
// May poll I/O.
bool sleepUntilSubCycleTime(const uint8_t sleepUntil)
  {
  for( ; ; )
    {
    const uint8_t now = getSubCycleTime();
    4022:	80 91 b2 00 	lds	r24, 0x00B2
    if(now == sleepUntil) { return(true); } // Done it!
    4026:	81 17       	cp	r24, r17
    4028:	e1 f1       	breq	.+120    	; 0x40a2 <sleepUntilSubCycleTime(unsigned char)+0x8c>
    if(now > sleepUntil) { return(false); } // Too late...
    402a:	18 17       	cp	r17, r24
    402c:	10 f4       	brcc	.+4      	; 0x4032 <sleepUntilSubCycleTime(unsigned char)+0x1c>
    402e:	80 e0       	ldi	r24, 0x00	; 0
    4030:	39 c0       	rjmp	.+114    	; 0x40a4 <sleepUntilSubCycleTime(unsigned char)+0x8e>

    // Compute time left to sleep.
    // It is easy to sleep a bit more later if necessary, but oversleeping is bad.
    const uint8_t ticksLeft = sleepUntil - now;
    4032:	21 2f       	mov	r18, r17
    4034:	28 1b       	sub	r18, r24
    // Deal with shortest sleep specially to avoid missing target from overheads...
    if(1 == ticksLeft)
    4036:	21 30       	cpi	r18, 0x01	; 1
    4038:	19 f4       	brne	.+6      	; 0x4040 <sleepUntilSubCycleTime(unsigned char)+0x2a>
// Should be good for values up to at least 1000, ie 1 second.
// Uses formulation likely to be quicker than sleepLowPowerMs() for non-constant argument values,
// and that results in a somewhat shorter sleep than sleepLowPowerMs(ms).
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerLessThanMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed(((MIN_CPU_HZ/4000) * (ms)) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    403a:	83 e1       	ldi	r24, 0x13	; 19
    403c:	90 e0       	ldi	r25, 0x00	; 0
    403e:	2e c0       	rjmp	.+92     	; 0x409c <sleepUntilSubCycleTime(unsigned char)+0x86>
      sleepLowPowerLessThanMs(max(SUBCYCLE_TICK_MS_RD / 2, 1)); // Assumed to be a constant expression.
      continue;
      }

    // Compute remaining time in milliseconds, rounded down...
    const uint16_t msLeft = ((uint16_t)SUBCYCLE_TICK_MS_RD) * ticksLeft;
    4040:	20 9f       	mul	r18, r16
    4042:	e0 01       	movw	r28, r0
    4044:	11 24       	eor	r1, r1

    // If comfortably in the area of nap()s then use one of them for improved energy savings.
    // Allow for nap() to overrun a little as its timing can vary with temperature and supply voltage,
    // and the bulk of energy savings should still be available without pushing the timing to the wire.
    // Note that during nap() timer0 should be stopped and thus not cause premature wakeup (from overflow interrupt).
    if(msLeft >= 20)
    4046:	c4 31       	cpi	r28, 0x14	; 20
    4048:	d1 05       	cpc	r29, r1
    404a:	70 f0       	brcs	.+28     	; 0x4068 <sleepUntilSubCycleTime(unsigned char)+0x52>
      {
      if(msLeft >= 80)
    404c:	c0 35       	cpi	r28, 0x50	; 80
    404e:	d1 05       	cpc	r29, r1
    4050:	38 f0       	brcs	.+14     	; 0x4060 <sleepUntilSubCycleTime(unsigned char)+0x4a>
        {
        if(msLeft >= 333)
    4052:	cd 54       	subi	r28, 0x4D	; 77
    4054:	d1 40       	sbci	r29, 0x01	; 1
    4056:	10 f0       	brcs	.+4      	; 0x405c <sleepUntilSubCycleTime(unsigned char)+0x46>
          {
          nap(WDTO_250MS); // Nominal 250ms sleep.
    4058:	84 e0       	ldi	r24, 0x04	; 4
    405a:	03 c0       	rjmp	.+6      	; 0x4062 <sleepUntilSubCycleTime(unsigned char)+0x4c>
          continue;
          }
        nap(WDTO_60MS); // Nominal 60ms sleep.
    405c:	82 e0       	ldi	r24, 0x02	; 2
    405e:	01 c0       	rjmp	.+2      	; 0x4062 <sleepUntilSubCycleTime(unsigned char)+0x4c>
        continue;
        }
      nap(WDTO_15MS); // Nominal 15ms sleep.
    4060:	80 e0       	ldi	r24, 0x00	; 0
    4062:	0e 94 ab 1c 	call	0x3956	; 0x3956 <nap(signed char)>
    4066:	dd cf       	rjmp	.-70     	; 0x4022 <sleepUntilSubCycleTime(unsigned char)+0xc>
    // Use low-power CPU sleep for residual time, but being very careful not to oversleep.
    // Aim to sleep somewhat under residual time, eg to allow for overheads, interrupts, and other slippages.
    // Assumed to be > 1 else would have been special-cased above.
    // Assumed to be << 1s else a nap() would have been used above.
#ifdef DEBUG
    if((msLeft < 2) || (msLeft > 1000)) { panic(); }
    4068:	ce 01       	movw	r24, r28
    406a:	02 97       	sbiw	r24, 0x02	; 2
    406c:	87 5e       	subi	r24, 0xE7	; 231
    406e:	93 40       	sbci	r25, 0x03	; 3
    4070:	10 f0       	brcs	.+4      	; 0x4076 <sleepUntilSubCycleTime(unsigned char)+0x60>
    4072:	0e 94 97 2e 	call	0x5d2e	; 0x5d2e <panic()>
    4076:	9e 01       	movw	r18, r28
    4078:	21 50       	subi	r18, 0x01	; 1
    407a:	30 40       	sbci	r19, 0x00	; 0
    407c:	40 e0       	ldi	r20, 0x00	; 0
    407e:	50 e0       	ldi	r21, 0x00	; 0
    4080:	da 01       	movw	r26, r20
    4082:	c9 01       	movw	r24, r18
    4084:	63 e0       	ldi	r22, 0x03	; 3
    4086:	88 0f       	add	r24, r24
    4088:	99 1f       	adc	r25, r25
    408a:	aa 1f       	adc	r26, r26
    408c:	bb 1f       	adc	r27, r27
    408e:	6a 95       	dec	r22
    4090:	d1 f7       	brne	.-12     	; 0x4086 <sleepUntilSubCycleTime(unsigned char)+0x70>
    4092:	82 1b       	sub	r24, r18
    4094:	93 0b       	sbc	r25, r19
    4096:	a4 0b       	sbc	r26, r20
    4098:	b5 0b       	sbc	r27, r21
    409a:	02 97       	sbiw	r24, 0x02	; 2
    409c:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
    40a0:	c0 cf       	rjmp	.-128    	; 0x4022 <sleepUntilSubCycleTime(unsigned char)+0xc>
    40a2:	81 e0       	ldi	r24, 0x01	; 1
#endif
    sleepLowPowerLessThanMs(msLeft - 1);
    }
  }
    40a4:	df 91       	pop	r29
    40a6:	cf 91       	pop	r28
    40a8:	1f 91       	pop	r17
    40aa:	0f 91       	pop	r16
    40ac:	08 95       	ret

000040ae <powerUpSerialIfDisabled()>:
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
  PRR |= _BV(PRADC); // Disable the ADC.
  }

// Check if serial is (already) powered up.
static bool _serialIsPoweredUp() { return(!(PRR & _BV(PRUSART0))); }
    40ae:	80 91 64 00 	lds	r24, 0x0064
// If serial was disabled, power it up, do Serial.begin(), and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownSerial() may be advisable.
bool powerUpSerialIfDisabled()
  {
  if(_serialIsPoweredUp()) { return(false); }
    40b2:	81 fd       	sbrc	r24, 1
    40b4:	02 c0       	rjmp	.+4      	; 0x40ba <powerUpSerialIfDisabled()+0xc>
    40b6:	80 e0       	ldi	r24, 0x00	; 0
    40b8:	08 95       	ret
  PRR &= ~_BV(PRUSART0); // Enable the UART.
    40ba:	80 91 64 00 	lds	r24, 0x0064
    40be:	8d 7f       	andi	r24, 0xFD	; 253
    40c0:	80 93 64 00 	sts	0x0064, r24
  Serial.begin(BAUD); // Set it going.
    40c4:	86 ec       	ldi	r24, 0xC6	; 198
    40c6:	94 e0       	ldi	r25, 0x04	; 4
    40c8:	40 ec       	ldi	r20, 0xC0	; 192
    40ca:	52 e1       	ldi	r21, 0x12	; 18
    40cc:	60 e0       	ldi	r22, 0x00	; 0
    40ce:	70 e0       	ldi	r23, 0x00	; 0
    40d0:	0e 94 98 39 	call	0x7330	; 0x7330 <HardwareSerial::begin(unsigned long)>
    40d4:	81 e0       	ldi	r24, 0x01	; 1
  return(true);
  }
    40d6:	08 95       	ret

000040d8 <powerSetup()>:
// Call from setup() to turn off unused modules, set up timers and interrupts, etc.
// I/O pin setting is not done here.
void powerSetup()
  {
#ifdef DEBUG
  assert(DEFAULT_CPU_PRESCALE == clock_prescale_get()); // Verify that CPU prescaling is as expected.
    40d8:	80 91 61 00 	lds	r24, 0x0061
    40dc:	8f 70       	andi	r24, 0x0F	; 15
    40de:	83 30       	cpi	r24, 0x03	; 3
    40e0:	11 f0       	breq	.+4      	; 0x40e6 <powerSetup()+0xe>
    40e2:	0e 94 74 03 	call	0x6e8	; 0x6e8 <abort>
#endif

  // Do normal gentle switch off, including analogue module/control in correct order.
  minimisePowerWithoutSleep();
    40e6:	0e 94 66 1f 	call	0x3ecc	; 0x3ecc <minimisePowerWithoutSleep()>

  // Brutally force off all modules, then re-enable explicitly below any still needed.
  power_all_disable(); 
    40ea:	80 91 64 00 	lds	r24, 0x0064
    40ee:	8f 6e       	ori	r24, 0xEF	; 239
    40f0:	80 93 64 00 	sts	0x0064, r24

#if !defined(DONT_USE_TIMER0)
  power_timer0_enable(); // Turning timer 0 off messes up some standard Arduino support such as delay() and millis().
    40f4:	80 91 64 00 	lds	r24, 0x0064
    40f8:	8f 7d       	andi	r24, 0xDF	; 223
    40fa:	80 93 64 00 	sts	0x0064, r24
#endif
  
#if defined(WAKEUP_32768HZ_XTAL)
  power_timer2_enable();
    40fe:	80 91 64 00 	lds	r24, 0x0064
    4102:	8f 7b       	andi	r24, 0xBF	; 191
    4104:	80 93 64 00 	sts	0x0064, r24
#ifdef WAKEUP_32768HZ_XTAL
static void timer2XtalIntSetup()
 {
  // Set up TIMER2 to wake CPU out of sleep regularly using external 32768Hz crystal.
  // See http://www.atmel.com/Images/doc2505.pdf
  TCCR2A = 0x00;
    4108:	10 92 b0 00 	sts	0x00B0, r1

#if defined(HALF_SECOND_RTC_SUPPORT)
  TCCR2B = (1<<CS22); // Set CLK/64 for overflow interrupt every 0.5s.
#elif defined(TWO_S_TICK_RTC_SUPPORT)
  TCCR2B = (1<<CS22)|(1<<CS21); // Set CLK/128 for overflow interrupt every 2s.
    410c:	86 e0       	ldi	r24, 0x06	; 6
    410e:	80 93 b1 00 	sts	0x00B1, r24
#else
  TCCR2B = (1<<CS22)|(1<<CS20); // Set CLK/128 for overflow interrupt every 1s.
#endif
  //TCCR2B = (1<<CS22)|(1<<CS21)|(1<<CS20); // Set CLK/1024 for overflow interrupt every 8s (slowest possible).

  ASSR = (1<<AS2); // Enable asynchronous operation.
    4112:	80 e2       	ldi	r24, 0x20	; 32
    4114:	80 93 b6 00 	sts	0x00B6, r24
  TIMSK2 = (1<<TOIE2); // Enable the timer 2 interrupt.
    4118:	81 e0       	ldi	r24, 0x01	; 1
    411a:	80 93 70 00 	sts	0x0070, r24
  
#if defined(WAKEUP_32768HZ_XTAL)
  power_timer2_enable();
  timer2XtalIntSetup();
#endif
  }
    411e:	08 95       	ret

00004120 <seedRNG8(unsigned char, unsigned char, unsigned char)>:
//2 ADDs, one bit shift right , and one increment. Difficult or slow operations like multiply, etc 
//were avoided for maximum speed on ultra low power devices.
void seedRNG8(uint8_t s1, uint8_t s2, uint8_t s3) // Originally init_rng(s1,s2,s3) //Can also be used to seed the rng with more entropy during use.
  {
  //XOR new entropy into key state
  a ^=s1;
    4120:	20 91 1e 03 	lds	r18, 0x031E
  b ^=s2;
    4124:	90 91 1f 03 	lds	r25, 0x031F
    4128:	69 27       	eor	r22, r25
  c ^=s3;
    412a:	90 91 1c 03 	lds	r25, 0x031C
    412e:	49 27       	eor	r20, r25
  x++;
    4130:	90 91 1d 03 	lds	r25, 0x031D
    4134:	9f 5f       	subi	r25, 0xFF	; 255
    4136:	90 93 1d 03 	sts	0x031D, r25
  a = (a^c^x);
    413a:	28 27       	eor	r18, r24
    413c:	24 27       	eor	r18, r20
    413e:	29 27       	eor	r18, r25
    4140:	20 93 1e 03 	sts	0x031E, r18
  b = (b+a);
    4144:	62 0f       	add	r22, r18
    4146:	60 93 1f 03 	sts	0x031F, r22
  c = ((c+(b>>1))^a);
    414a:	66 95       	lsr	r22
    414c:	64 0f       	add	r22, r20
    414e:	62 27       	eor	r22, r18
    4150:	60 93 1c 03 	sts	0x031C, r22
  }
    4154:	08 95       	ret

00004156 <randRNG8()>:
//
uint8_t randRNG8() // Originally unsigned char randomize().
  {
  x++;               //x is incremented every round and is not affected by any other variable
    4156:	80 91 1d 03 	lds	r24, 0x031D
    415a:	8f 5f       	subi	r24, 0xFF	; 255
    415c:	80 93 1d 03 	sts	0x031D, r24
  a = (a^c^x);       //note the mix of addition and XOR
    4160:	20 91 1c 03 	lds	r18, 0x031C
    4164:	90 91 1e 03 	lds	r25, 0x031E
    4168:	92 27       	eor	r25, r18
    416a:	98 27       	eor	r25, r24
    416c:	90 93 1e 03 	sts	0x031E, r25
  b = (b+a);         //And the use of very few instructions
    4170:	80 91 1f 03 	lds	r24, 0x031F
    4174:	89 0f       	add	r24, r25
    4176:	80 93 1f 03 	sts	0x031F, r24
  c = ((c+(b>>1))^a);  //the right shift is to ensure that high-order bits from b can affect  
    417a:	86 95       	lsr	r24
    417c:	82 0f       	add	r24, r18
    417e:	89 27       	eor	r24, r25
    4180:	80 93 1c 03 	sts	0x031C, r24
  return(c);         //low order bits of other variables
  }
    4184:	08 95       	ret

00004186 <global constructors keyed to _Z8seedRNG8hhh>:
uint8_t randRNG8(); // Originally called 'randomize()'.
// RNG8 working state.
static uint8_t a, b, c;
// DHD20130603: avoid the hidden counter always starting at zero c/o some per-build state.
// Derived from linker-driven pointer base plus hash of compilation timestamp, with little run-time cost.
static uint8_t x = (uint8_t)(intptr_t) ((&c) + (uint8_t)((__TIME__[7] * 17) ^ (__TIME__[6]) ^ (__TIME__[4] << 11)));
    4186:	8c ec       	ldi	r24, 0xCC	; 204
    4188:	93 e0       	ldi	r25, 0x03	; 3
    418a:	80 93 1d 03 	sts	0x031D, r24
  x++;               //x is incremented every round and is not affected by any other variable
  a = (a^c^x);       //note the mix of addition and XOR
  b = (b+a);         //And the use of very few instructions
  c = ((c+(b>>1))^a);  //the right shift is to ensure that high-order bits from b can affect  
  return(c);         //low order bits of other variables
  }
    418e:	08 95       	ret

00004190 <RFM22RXFIFO(unsigned char*, unsigned char)>:


// Put RFM22 into standby, attempt to read specified number of bytes from FIFO to buffer.
// Leaves RFM22 in low-power standby mode.
// Trailing bytes (more than were actually sent) undefined.
void RFM22RXFIFO(uint8_t *buf, const uint8_t bufSize)
    4190:	ff 92       	push	r15
    4192:	0f 93       	push	r16
    4194:	1f 93       	push	r17
    4196:	18 2f       	mov	r17, r24
    4198:	09 2f       	mov	r16, r25
    419a:	f6 2e       	mov	r15, r22
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    419c:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <powerUpSPIIfDisabled()>
    41a0:	48 2f       	mov	r20, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    41a2:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    41a4:	87 e8       	ldi	r24, 0x87	; 135
    41a6:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    41a8:	0d b4       	in	r0, 0x2d	; 45
    41aa:	07 fe       	sbrs	r0, 7
    41ac:	fd cf       	rjmp	.-6      	; 0x41a8 <RFM22RXFIFO(unsigned char*, unsigned char)+0x18>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    41ae:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    41b0:	0d b4       	in	r0, 0x2d	; 45
    41b2:	07 fe       	sbrs	r0, 7
    41b4:	fd cf       	rjmp	.-6      	; 0x41b0 <RFM22RXFIFO(unsigned char*, unsigned char)+0x20>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    41b6:	2a 9a       	sbi	0x05, 2	; 5
  {
  const bool neededEnable = powerUpSPIIfDisabled();

  _RFM22ModeStandby();

  _RFM22_SELECT();
    41b8:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    41ba:	8f e7       	ldi	r24, 0x7F	; 127
    41bc:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    41be:	0d b4       	in	r0, 0x2d	; 45
    41c0:	07 fe       	sbrs	r0, 7
    41c2:	fd cf       	rjmp	.-6      	; 0x41be <RFM22RXFIFO(unsigned char*, unsigned char)+0x2e>
  return(SPDR);
    41c4:	8e b5       	in	r24, 0x2e	; 46
    41c6:	81 2f       	mov	r24, r17
    41c8:	90 2f       	mov	r25, r16
    41ca:	9c 01       	movw	r18, r24
    41cc:	f9 01       	movw	r30, r18
    41ce:	90 e0       	ldi	r25, 0x00	; 0
    41d0:	07 c0       	rjmp	.+14     	; 0x41e0 <RFM22RXFIFO(unsigned char*, unsigned char)+0x50>

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    41d2:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    41d4:	0d b4       	in	r0, 0x2d	; 45
    41d6:	07 fe       	sbrs	r0, 7
    41d8:	fd cf       	rjmp	.-6      	; 0x41d4 <RFM22RXFIFO(unsigned char*, unsigned char)+0x44>
  return(SPDR);
    41da:	8e b5       	in	r24, 0x2e	; 46

  _RFM22_SELECT();
  _RFM22_io(RFM22REG_FIFO & 0x7F); // Start burst read from RX FIFO.
//  uint8_t val;
  for(uint8_t i = 0; i < bufSize; ++i)
    { buf[i] = _RFM22_io(0);  }
    41dc:	81 93       	st	Z+, r24
  _RFM22ModeStandby();

  _RFM22_SELECT();
  _RFM22_io(RFM22REG_FIFO & 0x7F); // Start burst read from RX FIFO.
//  uint8_t val;
  for(uint8_t i = 0; i < bufSize; ++i)
    41de:	9f 5f       	subi	r25, 0xFF	; 255
    41e0:	9f 15       	cp	r25, r15
    41e2:	b8 f3       	brcs	.-18     	; 0x41d2 <RFM22RXFIFO(unsigned char*, unsigned char)+0x42>
    { buf[i] = _RFM22_io(0);  }
  _RFM22_DESELECT();
    41e4:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    41e6:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    41e8:	88 e8       	ldi	r24, 0x88	; 136
    41ea:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    41ec:	0d b4       	in	r0, 0x2d	; 45
    41ee:	07 fe       	sbrs	r0, 7
    41f0:	fd cf       	rjmp	.-6      	; 0x41ec <RFM22RXFIFO(unsigned char*, unsigned char)+0x5c>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    41f2:	83 e0       	ldi	r24, 0x03	; 3
    41f4:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    41f6:	0d b4       	in	r0, 0x2d	; 45
    41f8:	07 fe       	sbrs	r0, 7
    41fa:	fd cf       	rjmp	.-6      	; 0x41f6 <RFM22RXFIFO(unsigned char*, unsigned char)+0x66>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    41fc:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    41fe:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4200:	88 e8       	ldi	r24, 0x88	; 136
    4202:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4204:	0d b4       	in	r0, 0x2d	; 45
    4206:	07 fe       	sbrs	r0, 7
    4208:	fd cf       	rjmp	.-6      	; 0x4204 <RFM22RXFIFO(unsigned char*, unsigned char)+0x74>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    420a:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    420c:	0d b4       	in	r0, 0x2d	; 45
    420e:	07 fe       	sbrs	r0, 7
    4210:	fd cf       	rjmp	.-6      	; 0x420c <RFM22RXFIFO(unsigned char*, unsigned char)+0x7c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    4212:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    4214:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4216:	85 e8       	ldi	r24, 0x85	; 133
    4218:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    421a:	0d b4       	in	r0, 0x2d	; 45
    421c:	07 fe       	sbrs	r0, 7
    421e:	fd cf       	rjmp	.-6      	; 0x421a <RFM22RXFIFO(unsigned char*, unsigned char)+0x8a>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4220:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4222:	0d b4       	in	r0, 0x2d	; 45
    4224:	07 fe       	sbrs	r0, 7
    4226:	fd cf       	rjmp	.-6      	; 0x4222 <RFM22RXFIFO(unsigned char*, unsigned char)+0x92>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4228:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    422a:	0d b4       	in	r0, 0x2d	; 45
    422c:	07 fe       	sbrs	r0, 7
    422e:	fd cf       	rjmp	.-6      	; 0x422a <RFM22RXFIFO(unsigned char*, unsigned char)+0x9a>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    4230:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    4232:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4234:	83 e8       	ldi	r24, 0x83	; 131
    4236:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4238:	0d b4       	in	r0, 0x2d	; 45
    423a:	07 fe       	sbrs	r0, 7
    423c:	fd cf       	rjmp	.-6      	; 0x4238 <RFM22RXFIFO(unsigned char*, unsigned char)+0xa8>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    423e:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4240:	0d b4       	in	r0, 0x2d	; 45
    4242:	07 fe       	sbrs	r0, 7
    4244:	fd cf       	rjmp	.-6      	; 0x4240 <RFM22RXFIFO(unsigned char*, unsigned char)+0xb0>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4246:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4248:	0d b4       	in	r0, 0x2d	; 45
    424a:	07 fe       	sbrs	r0, 7
    424c:	fd cf       	rjmp	.-6      	; 0x4248 <RFM22RXFIFO(unsigned char*, unsigned char)+0xb8>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    424e:	2a 9a       	sbi	0x05, 2	; 5
  _RFM22WriteReg16Bit0(RFM22REG_INT_ENABLE1);
  // Clear any interrupts already/still pending...
  _RFM22ClearInterrupts();  
  //_RFM22WriteReg8Bit(0xd, 0x1f); // Drive GPIO2 to ground as output... (Move to general register settings.)

  if(neededEnable) { powerDownSPI(); }
    4250:	44 23       	and	r20, r20
    4252:	11 f0       	breq	.+4      	; 0x4258 <RFM22RXFIFO(unsigned char*, unsigned char)+0xc8>
    4254:	0e 94 32 1f 	call	0x3e64	; 0x3e64 <powerDownSPI()>
  }
    4258:	1f 91       	pop	r17
    425a:	0f 91       	pop	r16
    425c:	ff 90       	pop	r15
    425e:	08 95       	ret

00004260 <RFM22SetUpRX(unsigned char, bool, bool)>:
  _RFM22_DESELECT();
  if(neededEnable) { powerDownSPI(); }
  }

// Put RFM22 into RX mode with given RX FIFO 'nearly-full' threshold and optional interrupts enabled.
void RFM22SetUpRX(const uint8_t nearlyFullThreshold, const bool syncInt, const bool dataInt)
    4260:	ff 92       	push	r15
    4262:	0f 93       	push	r16
    4264:	1f 93       	push	r17
    4266:	18 2f       	mov	r17, r24
    4268:	f6 2e       	mov	r15, r22
    426a:	04 2f       	mov	r16, r20
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    426c:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <powerUpSPIIfDisabled()>
    4270:	28 2f       	mov	r18, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    4272:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4274:	88 e8       	ldi	r24, 0x88	; 136
    4276:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4278:	0d b4       	in	r0, 0x2d	; 45
    427a:	07 fe       	sbrs	r0, 7
    427c:	fd cf       	rjmp	.-6      	; 0x4278 <RFM22SetUpRX(unsigned char, bool, bool)+0x18>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    427e:	83 e0       	ldi	r24, 0x03	; 3
    4280:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4282:	0d b4       	in	r0, 0x2d	; 45
    4284:	07 fe       	sbrs	r0, 7
    4286:	fd cf       	rjmp	.-6      	; 0x4282 <RFM22SetUpRX(unsigned char, bool, bool)+0x22>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    4288:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    428a:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    428c:	88 e8       	ldi	r24, 0x88	; 136
    428e:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4290:	0d b4       	in	r0, 0x2d	; 45
    4292:	07 fe       	sbrs	r0, 7
    4294:	fd cf       	rjmp	.-6      	; 0x4290 <RFM22SetUpRX(unsigned char, bool, bool)+0x30>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4296:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4298:	0d b4       	in	r0, 0x2d	; 45
    429a:	07 fe       	sbrs	r0, 7
    429c:	fd cf       	rjmp	.-6      	; 0x4298 <RFM22SetUpRX(unsigned char, bool, bool)+0x38>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    429e:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    42a0:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    42a2:	8e ef       	ldi	r24, 0xFE	; 254
    42a4:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    42a6:	0d b4       	in	r0, 0x2d	; 45
    42a8:	07 fe       	sbrs	r0, 7
    42aa:	fd cf       	rjmp	.-6      	; 0x42a6 <RFM22SetUpRX(unsigned char, bool, bool)+0x46>
  // Clear RX and TX FIFOs.
  _RFM22WriteReg8Bit(RFM22REG_OP_CTRL2, 3); // FFCLRTX | FFCLRTX
  _RFM22WriteReg8Bit(RFM22REG_OP_CTRL2, 0);

  // Set FIFO RX almost-full threshold as specified.
  _RFM22WriteReg8Bit(RFM22REG_RX_FIFO_CTRL, min(nearlyFullThreshold, 63));
    42ac:	81 2f       	mov	r24, r17
    42ae:	10 34       	cpi	r17, 0x40	; 64
    42b0:	08 f0       	brcs	.+2      	; 0x42b4 <RFM22SetUpRX(unsigned char, bool, bool)+0x54>
    42b2:	8f e3       	ldi	r24, 0x3F	; 63

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    42b4:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    42b6:	0d b4       	in	r0, 0x2d	; 45
    42b8:	07 fe       	sbrs	r0, 7
    42ba:	fd cf       	rjmp	.-6      	; 0x42b6 <RFM22SetUpRX(unsigned char, bool, bool)+0x56>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    42bc:	2a 9a       	sbi	0x05, 2	; 5

  // Set FIFO RX almost-full threshold as specified.
  _RFM22WriteReg8Bit(RFM22REG_RX_FIFO_CTRL, min(nearlyFullThreshold, 63));

  // Enable requested RX-related interrupts.
  _RFM22WriteReg8Bit(RFM22REG_INT_ENABLE1, (dataInt?0x10:0)); // enrxffafull: Enable RX FIFO Almost Full.
    42be:	00 23       	and	r16, r16
    42c0:	11 f4       	brne	.+4      	; 0x42c6 <RFM22SetUpRX(unsigned char, bool, bool)+0x66>
    42c2:	90 e0       	ldi	r25, 0x00	; 0
    42c4:	01 c0       	rjmp	.+2      	; 0x42c8 <RFM22SetUpRX(unsigned char, bool, bool)+0x68>
    42c6:	90 e1       	ldi	r25, 0x10	; 16

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    42c8:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    42ca:	85 e8       	ldi	r24, 0x85	; 133
    42cc:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    42ce:	0d b4       	in	r0, 0x2d	; 45
    42d0:	07 fe       	sbrs	r0, 7
    42d2:	fd cf       	rjmp	.-6      	; 0x42ce <RFM22SetUpRX(unsigned char, bool, bool)+0x6e>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    42d4:	9e bd       	out	0x2e, r25	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    42d6:	0d b4       	in	r0, 0x2d	; 45
    42d8:	07 fe       	sbrs	r0, 7
    42da:	fd cf       	rjmp	.-6      	; 0x42d6 <RFM22SetUpRX(unsigned char, bool, bool)+0x76>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    42dc:	2a 9a       	sbi	0x05, 2	; 5
  // Set FIFO RX almost-full threshold as specified.
  _RFM22WriteReg8Bit(RFM22REG_RX_FIFO_CTRL, min(nearlyFullThreshold, 63));

  // Enable requested RX-related interrupts.
  _RFM22WriteReg8Bit(RFM22REG_INT_ENABLE1, (dataInt?0x10:0)); // enrxffafull: Enable RX FIFO Almost Full.
  _RFM22WriteReg8Bit(RFM22REG_INT_ENABLE2, (syncInt?0x80:0)); // enswdet: Enable Sync Word Detected.
    42de:	ff 20       	and	r15, r15
    42e0:	11 f4       	brne	.+4      	; 0x42e6 <RFM22SetUpRX(unsigned char, bool, bool)+0x86>
    42e2:	90 e0       	ldi	r25, 0x00	; 0
    42e4:	01 c0       	rjmp	.+2      	; 0x42e8 <RFM22SetUpRX(unsigned char, bool, bool)+0x88>
    42e6:	90 e8       	ldi	r25, 0x80	; 128

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    42e8:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    42ea:	86 e8       	ldi	r24, 0x86	; 134
    42ec:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    42ee:	0d b4       	in	r0, 0x2d	; 45
    42f0:	07 fe       	sbrs	r0, 7
    42f2:	fd cf       	rjmp	.-6      	; 0x42ee <RFM22SetUpRX(unsigned char, bool, bool)+0x8e>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    42f4:	9e bd       	out	0x2e, r25	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    42f6:	0d b4       	in	r0, 0x2d	; 45
    42f8:	07 fe       	sbrs	r0, 7
    42fa:	fd cf       	rjmp	.-6      	; 0x42f6 <RFM22SetUpRX(unsigned char, bool, bool)+0x96>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    42fc:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    42fe:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4300:	83 e8       	ldi	r24, 0x83	; 131
    4302:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4304:	0d b4       	in	r0, 0x2d	; 45
    4306:	07 fe       	sbrs	r0, 7
    4308:	fd cf       	rjmp	.-6      	; 0x4304 <RFM22SetUpRX(unsigned char, bool, bool)+0xa4>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    430a:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    430c:	0d b4       	in	r0, 0x2d	; 45
    430e:	07 fe       	sbrs	r0, 7
    4310:	fd cf       	rjmp	.-6      	; 0x430c <RFM22SetUpRX(unsigned char, bool, bool)+0xac>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4312:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4314:	0d b4       	in	r0, 0x2d	; 45
    4316:	07 fe       	sbrs	r0, 7
    4318:	fd cf       	rjmp	.-6      	; 0x4314 <RFM22SetUpRX(unsigned char, bool, bool)+0xb4>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    431a:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    431c:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    431e:	87 e8       	ldi	r24, 0x87	; 135
    4320:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4322:	0d b4       	in	r0, 0x2d	; 45
    4324:	07 fe       	sbrs	r0, 7
    4326:	fd cf       	rjmp	.-6      	; 0x4322 <RFM22SetUpRX(unsigned char, bool, bool)+0xc2>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4328:	85 e0       	ldi	r24, 0x05	; 5
    432a:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    432c:	0d b4       	in	r0, 0x2d	; 45
    432e:	07 fe       	sbrs	r0, 7
    4330:	fd cf       	rjmp	.-6      	; 0x432c <RFM22SetUpRX(unsigned char, bool, bool)+0xcc>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    4332:	2a 9a       	sbi	0x05, 2	; 5
  _RFM22ClearInterrupts();

  // Start listening.
  _RFM22ModeRX();
  
  if(neededEnable) { powerDownSPI(); }
    4334:	22 23       	and	r18, r18
    4336:	11 f0       	breq	.+4      	; 0x433c <RFM22SetUpRX(unsigned char, bool, bool)+0xdc>
    4338:	0e 94 32 1f 	call	0x3e64	; 0x3e64 <powerDownSPI()>
  }
    433c:	1f 91       	pop	r17
    433e:	0f 91       	pop	r16
    4340:	ff 90       	pop	r15
    4342:	08 95       	ret

00004344 <RFM22QueueCmdToFF(unsigned char*)>:

// Clears the RFM22 TX FIFO and queues up ready to send via the TXFIFO the 0xff-terminated bytes starting at bptr.
// This routine does not change the command area.
// This uses an efficient burst write.
// For DEBUG can abort after (over-)filling the 64-byte FIFO at no extra cost with a check before spinning waiting for SPI byte to be sent.
void RFM22QueueCmdToFF(uint8_t *bptr)
    4344:	cf 93       	push	r28
    4346:	df 93       	push	r29
    4348:	ec 01       	movw	r28, r24
  {
#if 0 && defined(DEBUG)
  if(0 == *bptr) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22QueueCmdToFF: buffer uninitialised"); panic(); } 
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
    434a:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <powerUpSPIIfDisabled()>
    434e:	98 2f       	mov	r25, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    4350:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4352:	88 e8       	ldi	r24, 0x88	; 136
    4354:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4356:	0d b4       	in	r0, 0x2d	; 45
    4358:	07 fe       	sbrs	r0, 7
    435a:	fd cf       	rjmp	.-6      	; 0x4356 <RFM22QueueCmdToFF(unsigned char*)+0x12>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    435c:	81 e0       	ldi	r24, 0x01	; 1
    435e:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4360:	0d b4       	in	r0, 0x2d	; 45
    4362:	07 fe       	sbrs	r0, 7
    4364:	fd cf       	rjmp	.-6      	; 0x4360 <RFM22QueueCmdToFF(unsigned char*)+0x1c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    4366:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    4368:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    436a:	88 e8       	ldi	r24, 0x88	; 136
    436c:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    436e:	0d b4       	in	r0, 0x2d	; 45
    4370:	07 fe       	sbrs	r0, 7
    4372:	fd cf       	rjmp	.-6      	; 0x436e <RFM22QueueCmdToFF(unsigned char*)+0x2a>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4374:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4376:	0d b4       	in	r0, 0x2d	; 45
    4378:	07 fe       	sbrs	r0, 7
    437a:	fd cf       	rjmp	.-6      	; 0x4376 <RFM22QueueCmdToFF(unsigned char*)+0x32>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    437c:	2a 9a       	sbi	0x05, 2	; 5
  if(0 == *bptr) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22QueueCmdToFF: buffer uninitialised"); panic(); } 
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
  // Clear the TX FIFO.
  _RFM22ClearTXFIFO();
  _RFM22_SELECT();
    437e:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4380:	8f ef       	ldi	r24, 0xFF	; 255
    4382:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4384:	0d b4       	in	r0, 0x2d	; 45
    4386:	07 fe       	sbrs	r0, 7
    4388:	fd cf       	rjmp	.-6      	; 0x4384 <RFM22QueueCmdToFF(unsigned char*)+0x40>
    438a:	04 c0       	rjmp	.+8      	; 0x4394 <RFM22QueueCmdToFF(unsigned char*)+0x50>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    438c:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    438e:	0d b4       	in	r0, 0x2d	; 45
    4390:	07 fe       	sbrs	r0, 7
    4392:	fd cf       	rjmp	.-6      	; 0x438e <RFM22QueueCmdToFF(unsigned char*)+0x4a>
    SPDR = val;
    if(--i < 0) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22QueueCmdToFF: buffer unterminated"); panic(); }
    while (!(SPSR & _BV(SPIF))) { }
    }
#else
  while((uint8_t)0xff != (val = *bptr++)) { _RFM22_wr(val); }
    4394:	89 91       	ld	r24, Y+
    4396:	8f 3f       	cpi	r24, 0xFF	; 255
    4398:	c9 f7       	brne	.-14     	; 0x438c <RFM22QueueCmdToFF(unsigned char*)+0x48>
#endif
  _RFM22_DESELECT();
    439a:	2a 9a       	sbi	0x05, 2	; 5
  if(neededEnable) { powerDownSPI(); }
    439c:	99 23       	and	r25, r25
    439e:	11 f0       	breq	.+4      	; 0x43a4 <RFM22QueueCmdToFF(unsigned char*)+0x60>
    43a0:	0e 94 32 1f 	call	0x3e64	; 0x3e64 <powerDownSPI()>
  }
    43a4:	df 91       	pop	r29
    43a6:	cf 91       	pop	r28
    43a8:	08 95       	ret

000043aa <RFM22RegisterBlockSetup(unsigned char const (*) [2])>:


// Configure the radio from a list of register/value pairs in readonly PROGMEM/Flash, terminating with an 0xff register value.
// NOTE: argument is not a pointer into SRAM, it is into PROGMEM!
// Could optimise case where multiple values are for successive RFM22 registers by using burst write.
void RFM22RegisterBlockSetup(const uint8_t registerValues[][2])
    43aa:	cf 93       	push	r28
    43ac:	df 93       	push	r29
    43ae:	ec 01       	movw	r28, r24
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    43b0:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <powerUpSPIIfDisabled()>
  for( ; ; )
    {
    const uint8_t reg = pgm_read_byte(&(registerValues[0][0]));
    43b4:	fe 01       	movw	r30, r28
    43b6:	94 91       	lpm	r25, Z+
    const uint8_t val = pgm_read_byte(&(registerValues[0][1]));
    43b8:	21 96       	adiw	r28, 0x01	; 1
    43ba:	fe 01       	movw	r30, r28
    43bc:	24 91       	lpm	r18, Z+
    43be:	21 97       	sbiw	r28, 0x01	; 1
    if(0xff == reg) { break; }
    43c0:	9f 3f       	cpi	r25, 0xFF	; 255
    43c2:	69 f0       	breq	.+26     	; 0x43de <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x34>

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    43c4:	2a 98       	cbi	0x05, 2	; 5
  _RFM22_wr(addr | 0x80); // Force to write.
    43c6:	90 68       	ori	r25, 0x80	; 128

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    43c8:	9e bd       	out	0x2e, r25	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    43ca:	0d b4       	in	r0, 0x2d	; 45
    43cc:	07 fe       	sbrs	r0, 7
    43ce:	fd cf       	rjmp	.-6      	; 0x43ca <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x20>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    43d0:	2e bd       	out	0x2e, r18	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    43d2:	0d b4       	in	r0, 0x2d	; 45
    43d4:	07 fe       	sbrs	r0, 7
    43d6:	fd cf       	rjmp	.-6      	; 0x43d2 <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x28>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    43d8:	2a 9a       	sbi	0x05, 2	; 5
    DEBUG_SERIAL_PRINT_FLASHSTRING(" = 0x");
    DEBUG_SERIAL_PRINTFMT(val, HEX);
    DEBUG_SERIAL_PRINTLN();
#endif
    _RFM22WriteReg8Bit(reg, val);
    ++registerValues;
    43da:	22 96       	adiw	r28, 0x02	; 2
    43dc:	eb cf       	rjmp	.-42     	; 0x43b4 <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0xa>
    }
  if(neededEnable) { powerDownSPI(); }
    43de:	88 23       	and	r24, r24
    43e0:	11 f0       	breq	.+4      	; 0x43e6 <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x3c>
    43e2:	0e 94 32 1f 	call	0x3e64	; 0x3e64 <powerDownSPI()>
  }
    43e6:	df 91       	pop	r29
    43e8:	cf 91       	pop	r28
    43ea:	08 95       	ret

000043ec <RFM22PowerOnInit()>:
void RFM22PowerOnInit()
  {
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22 reset...");
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
    43ec:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <powerUpSPIIfDisabled()>
    43f0:	98 2f       	mov	r25, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    43f2:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    43f4:	87 e8       	ldi	r24, 0x87	; 135
    43f6:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    43f8:	0d b4       	in	r0, 0x2d	; 45
    43fa:	07 fe       	sbrs	r0, 7
    43fc:	fd cf       	rjmp	.-6      	; 0x43f8 <RFM22PowerOnInit()+0xc>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    43fe:	80 e8       	ldi	r24, 0x80	; 128
    4400:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4402:	0d b4       	in	r0, 0x2d	; 45
    4404:	07 fe       	sbrs	r0, 7
    4406:	fd cf       	rjmp	.-6      	; 0x4402 <RFM22PowerOnInit()+0x16>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    4408:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    440a:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    440c:	87 e8       	ldi	r24, 0x87	; 135
    440e:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4410:	0d b4       	in	r0, 0x2d	; 45
    4412:	07 fe       	sbrs	r0, 7
    4414:	fd cf       	rjmp	.-6      	; 0x4410 <RFM22PowerOnInit()+0x24>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4416:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4418:	0d b4       	in	r0, 0x2d	; 45
    441a:	07 fe       	sbrs	r0, 7
    441c:	fd cf       	rjmp	.-6      	; 0x4418 <RFM22PowerOnInit()+0x2c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    441e:	2a 9a       	sbi	0x05, 2	; 5
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22 reset...");
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
  _RFM22WriteReg8Bit(RFM22REG_OP_CTRL1, RFM22REG_OP_CTRL1_SWRES);
  _RFM22ModeStandby();
  if(neededEnable) { powerDownSPI(); }
    4420:	99 23       	and	r25, r25
    4422:	11 f0       	breq	.+4      	; 0x4428 <RFM22PowerOnInit()+0x3c>
    4424:	0e 94 32 1f 	call	0x3e64	; 0x3e64 <powerDownSPI()>
    4428:	08 95       	ret

0000442a <RFM22RSSI()>:
  return(result);
  }

// Get current RSSI.
// Only valid when in RX mode.
uint8_t RFM22RSSI() 
    442a:	1f 93       	push	r17
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    442c:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <powerUpSPIIfDisabled()>
    4430:	98 2f       	mov	r25, r24

// Read from 8-bit register on RFM22.
// SPI must already be configured and running.
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
    4432:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    4434:	86 e2       	ldi	r24, 0x26	; 38
    4436:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4438:	0d b4       	in	r0, 0x2d	; 45
    443a:	07 fe       	sbrs	r0, 7
    443c:	fd cf       	rjmp	.-6      	; 0x4438 <RFM22RSSI()+0xe>
  return(SPDR);
    443e:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    4440:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4442:	0d b4       	in	r0, 0x2d	; 45
    4444:	07 fe       	sbrs	r0, 7
    4446:	fd cf       	rjmp	.-6      	; 0x4442 <RFM22RSSI()+0x18>
  return(SPDR);
    4448:	1e b5       	in	r17, 0x2e	; 46
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  const uint8_t result = _RFM22_io(0); // Dummy value...
  _RFM22_DESELECT();
    444a:	2a 9a       	sbi	0x05, 2	; 5
// Only valid when in RX mode.
uint8_t RFM22RSSI() 
  {
  const bool neededEnable = powerUpSPIIfDisabled();
  const uint8_t rssi = _RFM22ReadReg8Bit(RFM22REG_RSSI);
  if(neededEnable) { powerDownSPI(); }
    444c:	99 23       	and	r25, r25
    444e:	11 f0       	breq	.+4      	; 0x4454 <RFM22RSSI()+0x2a>
    4450:	0e 94 32 1f 	call	0x3e64	; 0x3e64 <powerDownSPI()>
  return(rssi);
  }
    4454:	81 2f       	mov	r24, r17
    4456:	1f 91       	pop	r17
    4458:	08 95       	ret

0000445a <RFM22ReadStatusBoth()>:
  }

// Read status (both registers) and clear interrupts.
// Status register 1 is returned in the top 8 bits, register 2 in the bottom 8 bits.
// Zero indicates no pending interrupts or other status flags set.
uint16_t RFM22ReadStatusBoth()
    445a:	0f 93       	push	r16
    445c:	1f 93       	push	r17
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    445e:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <powerUpSPIIfDisabled()>
    4462:	98 2f       	mov	r25, r24

// Read from 16-bit big-endian register pair.
// The result has the first (lower-numbered) register in the most significant byte.
static uint16_t _RFM22ReadReg16Bit(const uint8_t addr)
{
  _RFM22_SELECT();
    4464:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    4466:	83 e0       	ldi	r24, 0x03	; 3
    4468:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    446a:	0d b4       	in	r0, 0x2d	; 45
    446c:	07 fe       	sbrs	r0, 7
    446e:	fd cf       	rjmp	.-6      	; 0x446a <RFM22ReadStatusBoth()+0x10>
  return(SPDR);
    4470:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    4472:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4474:	0d b4       	in	r0, 0x2d	; 45
    4476:	07 fe       	sbrs	r0, 7
    4478:	fd cf       	rjmp	.-6      	; 0x4474 <RFM22ReadStatusBoth()+0x1a>
  return(SPDR);
    447a:	0e b5       	in	r16, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    447c:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    447e:	0d b4       	in	r0, 0x2d	; 45
    4480:	07 fe       	sbrs	r0, 7
    4482:	fd cf       	rjmp	.-6      	; 0x447e <RFM22ReadStatusBoth()+0x24>
  return(SPDR);
    4484:	1e b5       	in	r17, 0x2e	; 46
{
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  uint16_t result = ((uint16_t)_RFM22_io(0)) << 8;
  result |= ((uint16_t)_RFM22_io(0));
  _RFM22_DESELECT();
    4486:	2a 9a       	sbi	0x05, 2	; 5
// Zero indicates no pending interrupts or other status flags set.
uint16_t RFM22ReadStatusBoth()
  {
  const bool neededEnable = powerUpSPIIfDisabled();
  const uint16_t result = _RFM22ReadReg16Bit(RFM22REG_INT_STATUS1);
  if(neededEnable) { powerDownSPI(); }
    4488:	99 23       	and	r25, r25
    448a:	11 f0       	breq	.+4      	; 0x4490 <RFM22ReadStatusBoth()+0x36>
    448c:	0e 94 32 1f 	call	0x3e64	; 0x3e64 <powerDownSPI()>
    4490:	90 2f       	mov	r25, r16
    4492:	80 e0       	ldi	r24, 0x00	; 0
    4494:	21 2f       	mov	r18, r17
    4496:	30 e0       	ldi	r19, 0x00	; 0
    4498:	28 2b       	or	r18, r24
    449a:	39 2b       	or	r19, r25
  return(result);
  }
    449c:	c9 01       	movw	r24, r18
    449e:	1f 91       	pop	r17
    44a0:	0f 91       	pop	r16
    44a2:	08 95       	ret

000044a4 <RFM22ModeStandbyAndClearState()>:
// Enter standby mode (consume least possible power but retain register contents).
// FIFO state and pending interrupts are cleared.
// Typical consumption in standby 450nA (cf 15nA when shut down, 8.5mA TUNE, 18--80mA RX/TX).
void RFM22ModeStandbyAndClearState()
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    44a4:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <powerUpSPIIfDisabled()>
    44a8:	98 2f       	mov	r25, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    44aa:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    44ac:	87 e8       	ldi	r24, 0x87	; 135
    44ae:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    44b0:	0d b4       	in	r0, 0x2d	; 45
    44b2:	07 fe       	sbrs	r0, 7
    44b4:	fd cf       	rjmp	.-6      	; 0x44b0 <RFM22ModeStandbyAndClearState()+0xc>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    44b6:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    44b8:	0d b4       	in	r0, 0x2d	; 45
    44ba:	07 fe       	sbrs	r0, 7
    44bc:	fd cf       	rjmp	.-6      	; 0x44b8 <RFM22ModeStandbyAndClearState()+0x14>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    44be:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    44c0:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    44c2:	88 e8       	ldi	r24, 0x88	; 136
    44c4:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    44c6:	0d b4       	in	r0, 0x2d	; 45
    44c8:	07 fe       	sbrs	r0, 7
    44ca:	fd cf       	rjmp	.-6      	; 0x44c6 <RFM22ModeStandbyAndClearState()+0x22>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    44cc:	83 e0       	ldi	r24, 0x03	; 3
    44ce:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    44d0:	0d b4       	in	r0, 0x2d	; 45
    44d2:	07 fe       	sbrs	r0, 7
    44d4:	fd cf       	rjmp	.-6      	; 0x44d0 <RFM22ModeStandbyAndClearState()+0x2c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    44d6:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    44d8:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    44da:	88 e8       	ldi	r24, 0x88	; 136
    44dc:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    44de:	0d b4       	in	r0, 0x2d	; 45
    44e0:	07 fe       	sbrs	r0, 7
    44e2:	fd cf       	rjmp	.-6      	; 0x44de <RFM22ModeStandbyAndClearState()+0x3a>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    44e4:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    44e6:	0d b4       	in	r0, 0x2d	; 45
    44e8:	07 fe       	sbrs	r0, 7
    44ea:	fd cf       	rjmp	.-6      	; 0x44e6 <RFM22ModeStandbyAndClearState()+0x42>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    44ec:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    44ee:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    44f0:	85 e8       	ldi	r24, 0x85	; 133
    44f2:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    44f4:	0d b4       	in	r0, 0x2d	; 45
    44f6:	07 fe       	sbrs	r0, 7
    44f8:	fd cf       	rjmp	.-6      	; 0x44f4 <RFM22ModeStandbyAndClearState()+0x50>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    44fa:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    44fc:	0d b4       	in	r0, 0x2d	; 45
    44fe:	07 fe       	sbrs	r0, 7
    4500:	fd cf       	rjmp	.-6      	; 0x44fc <RFM22ModeStandbyAndClearState()+0x58>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4502:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4504:	0d b4       	in	r0, 0x2d	; 45
    4506:	07 fe       	sbrs	r0, 7
    4508:	fd cf       	rjmp	.-6      	; 0x4504 <RFM22ModeStandbyAndClearState()+0x60>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    450a:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    450c:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    450e:	83 e8       	ldi	r24, 0x83	; 131
    4510:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4512:	0d b4       	in	r0, 0x2d	; 45
    4514:	07 fe       	sbrs	r0, 7
    4516:	fd cf       	rjmp	.-6      	; 0x4512 <RFM22ModeStandbyAndClearState()+0x6e>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4518:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    451a:	0d b4       	in	r0, 0x2d	; 45
    451c:	07 fe       	sbrs	r0, 7
    451e:	fd cf       	rjmp	.-6      	; 0x451a <RFM22ModeStandbyAndClearState()+0x76>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4520:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4522:	0d b4       	in	r0, 0x2d	; 45
    4524:	07 fe       	sbrs	r0, 7
    4526:	fd cf       	rjmp	.-6      	; 0x4522 <RFM22ModeStandbyAndClearState()+0x7e>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    4528:	2a 9a       	sbi	0x05, 2	; 5
//  _RFM22WriteReg8Bit(RFM22REG_INT_ENABLE2, 0); // TODO: combine in burst write with previous...
  _RFM22WriteReg16Bit0(RFM22REG_INT_ENABLE1);
  // Clear any interrupts already/still pending...
  _RFM22ClearInterrupts();  
  //_RFM22WriteReg8Bit(0xd, 0x1f); // Drive GPIO2 to ground as output... (Move to general register settings.)
  if(neededEnable) { powerDownSPI(); }
    452a:	99 23       	and	r25, r25
    452c:	11 f0       	breq	.+4      	; 0x4532 <RFM22ModeStandbyAndClearState()+0x8e>
    452e:	0e 94 32 1f 	call	0x3e64	; 0x3e64 <powerDownSPI()>
    4532:	08 95       	ret

00004534 <RFM22TXFIFO()>:

// Transmit contents of on-chip TX FIFO: caller should revert to low-power standby mode (etc) if required.
// Returns true if packet apparently sent correctly/fully.
// Does not clear TX FIFO (so possible to re-send immediately).
// Note: Reliability possibly helped by early move to 'tune' mode to work other than with default (4MHz) lowish PICAXE clock speeds.
bool RFM22TXFIFO()
    4534:	ff 92       	push	r15
    4536:	0f 93       	push	r16
    4538:	1f 93       	push	r17
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    453a:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <powerUpSPIIfDisabled()>
    453e:	f8 2e       	mov	r15, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    4540:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4542:	85 e8       	ldi	r24, 0x85	; 133
    4544:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4546:	0d b4       	in	r0, 0x2d	; 45
    4548:	07 fe       	sbrs	r0, 7
    454a:	fd cf       	rjmp	.-6      	; 0x4546 <RFM22TXFIFO()+0x12>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    454c:	84 e0       	ldi	r24, 0x04	; 4
    454e:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4550:	0d b4       	in	r0, 0x2d	; 45
    4552:	07 fe       	sbrs	r0, 7
    4554:	fd cf       	rjmp	.-6      	; 0x4550 <RFM22TXFIFO()+0x1c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    4556:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    4558:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    455a:	86 e8       	ldi	r24, 0x86	; 134
    455c:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    455e:	0d b4       	in	r0, 0x2d	; 45
    4560:	07 fe       	sbrs	r0, 7
    4562:	fd cf       	rjmp	.-6      	; 0x455e <RFM22TXFIFO()+0x2a>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4564:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4566:	0d b4       	in	r0, 0x2d	; 45
    4568:	07 fe       	sbrs	r0, 7
    456a:	fd cf       	rjmp	.-6      	; 0x4566 <RFM22TXFIFO()+0x32>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    456c:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    456e:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4570:	83 e8       	ldi	r24, 0x83	; 131
    4572:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4574:	0d b4       	in	r0, 0x2d	; 45
    4576:	07 fe       	sbrs	r0, 7
    4578:	fd cf       	rjmp	.-6      	; 0x4574 <RFM22TXFIFO()+0x40>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    457a:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    457c:	0d b4       	in	r0, 0x2d	; 45
    457e:	07 fe       	sbrs	r0, 7
    4580:	fd cf       	rjmp	.-6      	; 0x457c <RFM22TXFIFO()+0x48>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4582:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4584:	0d b4       	in	r0, 0x2d	; 45
    4586:	07 fe       	sbrs	r0, 7
    4588:	fd cf       	rjmp	.-6      	; 0x4584 <RFM22TXFIFO()+0x50>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    458a:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    458c:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    458e:	87 e8       	ldi	r24, 0x87	; 135
    4590:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4592:	0d b4       	in	r0, 0x2d	; 45
    4594:	07 fe       	sbrs	r0, 7
    4596:	fd cf       	rjmp	.-6      	; 0x4592 <RFM22TXFIFO()+0x5e>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    4598:	89 e0       	ldi	r24, 0x09	; 9
    459a:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    459c:	0d b4       	in	r0, 0x2d	; 45
    459e:	07 fe       	sbrs	r0, 7
    45a0:	fd cf       	rjmp	.-6      	; 0x459c <RFM22TXFIFO()+0x68>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    45a2:	2a 9a       	sbi	0x05, 2	; 5
    45a4:	18 e0       	ldi	r17, 0x08	; 8

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    45a6:	03 e0       	ldi	r16, 0x03	; 3
    45a8:	13 c0       	rjmp	.+38     	; 0x45d0 <RFM22TXFIFO()+0x9c>
  // Repeately nap until packet sent, with upper bound of ~120ms on TX time in case there is a problem.
  // TX time is ~1.6ms per byte at 5000bps.
  bool result = false; // Usual case is success.
  for(int8_t i = 8; --i >= 0; )
    {
    nap(WDTO_15MS); // Sleep in low power mode for a short time waiting for bits to be sent...
    45aa:	80 e0       	ldi	r24, 0x00	; 0
    45ac:	0e 94 ab 1c 	call	0x3956	; 0x3956 <nap(signed char)>

// Read from 8-bit register on RFM22.
// SPI must already be configured and running.
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
    45b0:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    45b2:	0e bd       	out	0x2e, r16	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    45b4:	0d b4       	in	r0, 0x2d	; 45
    45b6:	07 fe       	sbrs	r0, 7
    45b8:	fd cf       	rjmp	.-6      	; 0x45b4 <RFM22TXFIFO()+0x80>
  return(SPDR);
    45ba:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    45bc:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    45be:	0d b4       	in	r0, 0x2d	; 45
    45c0:	07 fe       	sbrs	r0, 7
    45c2:	fd cf       	rjmp	.-6      	; 0x45be <RFM22TXFIFO()+0x8a>
  return(SPDR);
    45c4:	8e b5       	in	r24, 0x2e	; 46
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  const uint8_t result = _RFM22_io(0); // Dummy value...
  _RFM22_DESELECT();
    45c6:	2a 9a       	sbi	0x05, 2	; 5
  bool result = false; // Usual case is success.
  for(int8_t i = 8; --i >= 0; )
    {
    nap(WDTO_15MS); // Sleep in low power mode for a short time waiting for bits to be sent...
    const uint8_t status = _RFM22ReadReg8Bit(RFM22REG_INT_STATUS1); // TODO: could use nIRQ instead if available.
    if(status & 4) { result = true; break; } // Packet sent!
    45c8:	82 ff       	sbrs	r24, 2
    45ca:	02 c0       	rjmp	.+4      	; 0x45d0 <RFM22TXFIFO()+0x9c>
    45cc:	11 e0       	ldi	r17, 0x01	; 1
    45ce:	03 c0       	rjmp	.+6      	; 0x45d6 <RFM22TXFIFO()+0xa2>
  _RFM22ModeTX(); // Enable TX mode and transmit TX FIFO contents.

  // Repeately nap until packet sent, with upper bound of ~120ms on TX time in case there is a problem.
  // TX time is ~1.6ms per byte at 5000bps.
  bool result = false; // Usual case is success.
  for(int8_t i = 8; --i >= 0; )
    45d0:	11 50       	subi	r17, 0x01	; 1
    45d2:	58 f7       	brcc	.-42     	; 0x45aa <RFM22TXFIFO()+0x76>
    45d4:	10 e0       	ldi	r17, 0x00	; 0
    nap(WDTO_15MS); // Sleep in low power mode for a short time waiting for bits to be sent...
    const uint8_t status = _RFM22ReadReg8Bit(RFM22REG_INT_STATUS1); // TODO: could use nIRQ instead if available.
    if(status & 4) { result = true; break; } // Packet sent!
    }

  if(neededEnable) { powerDownSPI(); }
    45d6:	ff 20       	and	r15, r15
    45d8:	11 f0       	breq	.+4      	; 0x45de <RFM22TXFIFO()+0xaa>
    45da:	0e 94 32 1f 	call	0x3e64	; 0x3e64 <powerDownSPI()>
  return(result);
  }
    45de:	81 2f       	mov	r24, r17
    45e0:	1f 91       	pop	r17
    45e2:	0f 91       	pop	r16
    45e4:	ff 90       	pop	r15
    45e6:	08 95       	ret

000045e8 <RFM22CheckConnected()>:
  _RFM22ModeStandby();
  if(neededEnable) { powerDownSPI(); }
  }

// Returns true iff RFM22 (or RFM23) appears to be correctly connected.
bool RFM22CheckConnected()
    45e8:	0f 93       	push	r16
    45ea:	1f 93       	push	r17
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    45ec:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <powerUpSPIIfDisabled()>
    45f0:	08 2f       	mov	r16, r24

// Read from 8-bit register on RFM22.
// SPI must already be configured and running.
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
    45f2:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    45f4:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    45f6:	0d b4       	in	r0, 0x2d	; 45
    45f8:	07 fe       	sbrs	r0, 7
    45fa:	fd cf       	rjmp	.-6      	; 0x45f6 <RFM22CheckConnected()+0xe>
  return(SPDR);
    45fc:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    45fe:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4600:	0d b4       	in	r0, 0x2d	; 45
    4602:	07 fe       	sbrs	r0, 7
    4604:	fd cf       	rjmp	.-6      	; 0x4600 <RFM22CheckConnected()+0x18>
  return(SPDR);
    4606:	1e b5       	in	r17, 0x2e	; 46
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  const uint8_t result = _RFM22_io(0); // Dummy value...
  _RFM22_DESELECT();
    4608:	2a 9a       	sbi	0x05, 2	; 5
bool RFM22CheckConnected()
  {
  const bool neededEnable = powerUpSPIIfDisabled();
  bool isOK = false;
  const uint8_t rType = _RFM22ReadReg8Bit(0); // May read as 0 if not connected at all.
  if(RFM22_SUPPORTED_DEVICE_TYPE == rType)
    460a:	18 30       	cpi	r17, 0x08	; 8
    460c:	a1 f4       	brne	.+40     	; 0x4636 <RFM22CheckConnected()+0x4e>

// Read from 8-bit register on RFM22.
// SPI must already be configured and running.
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
    460e:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    4610:	81 e0       	ldi	r24, 0x01	; 1
    4612:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    4614:	0d b4       	in	r0, 0x2d	; 45
    4616:	07 fe       	sbrs	r0, 7
    4618:	fd cf       	rjmp	.-6      	; 0x4614 <RFM22CheckConnected()+0x2c>
  return(SPDR);
    461a:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    461c:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    461e:	0d b4       	in	r0, 0x2d	; 45
    4620:	07 fe       	sbrs	r0, 7
    4622:	fd cf       	rjmp	.-6      	; 0x461e <RFM22CheckConnected()+0x36>
  return(SPDR);
    4624:	1e b5       	in	r17, 0x2e	; 46
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  const uint8_t result = _RFM22_io(0); // Dummy value...
  _RFM22_DESELECT();
    4626:	2a 9a       	sbi	0x05, 2	; 5
  bool isOK = false;
  const uint8_t rType = _RFM22ReadReg8Bit(0); // May read as 0 if not connected at all.
  if(RFM22_SUPPORTED_DEVICE_TYPE == rType)
    {
    const uint8_t rVersion = _RFM22ReadReg8Bit(1);
    if(RFM22_SUPPORTED_DEVICE_VERSION == rVersion)
    4628:	16 30       	cpi	r17, 0x06	; 6
    462a:	11 f4       	brne	.+4      	; 0x4630 <RFM22CheckConnected()+0x48>
    462c:	11 e0       	ldi	r17, 0x01	; 1
    462e:	10 c0       	rjmp	.+32     	; 0x4650 <RFM22CheckConnected()+0x68>
      { isOK = true; }
#if 1 && defined(DEBUG)
    else
      {
      DEBUG_SERIAL_PRINT_FLASHSTRING("RFM22 bad version: ");
    4630:	84 ee       	ldi	r24, 0xE4	; 228
    4632:	91 e0       	ldi	r25, 0x01	; 1
    4634:	02 c0       	rjmp	.+4      	; 0x463a <RFM22CheckConnected()+0x52>
#endif
    }
#if 1 && defined(DEBUG)
  else
    {
    DEBUG_SERIAL_PRINT_FLASHSTRING("RFM22 bad type: ");
    4636:	83 ed       	ldi	r24, 0xD3	; 211
    4638:	91 e0       	ldi	r25, 0x01	; 1
    463a:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <serialPrintAndFlush(__FlashStringHelper const*)>
    DEBUG_SERIAL_PRINTFMT(rType, HEX);
    463e:	81 2f       	mov	r24, r17
    4640:	90 e0       	ldi	r25, 0x00	; 0
    4642:	60 e1       	ldi	r22, 0x10	; 16
    4644:	70 e0       	ldi	r23, 0x00	; 0
    4646:	0e 94 dd 25 	call	0x4bba	; 0x4bba <serialPrintAndFlush(int, int)>
    DEBUG_SERIAL_PRINTLN();
    464a:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <serialPrintlnAndFlush()>
    464e:	10 e0       	ldi	r17, 0x00	; 0
    }
#endif
  if(neededEnable) { powerDownSPI(); }
    4650:	00 23       	and	r16, r16
    4652:	11 f0       	breq	.+4      	; 0x4658 <RFM22CheckConnected()+0x70>
    4654:	0e 94 32 1f 	call	0x3e64	; 0x3e64 <powerDownSPI()>
  return(isOK);
  }
    4658:	81 2f       	mov	r24, r17
    465a:	1f 91       	pop	r17
    465c:	0f 91       	pop	r16
    465e:	08 95       	ret

00004660 <eeprom_read_byte>:


/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
    4660:	9c 01       	movw	r18, r24
{
    do {} while (!eeprom_is_ready ());
    4662:	f9 99       	sbic	0x1f, 1	; 31
    4664:	fe cf       	rjmp	.-4      	; 0x4662 <eeprom_read_byte+0x2>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    4666:	32 bd       	out	0x22, r19	; 34
    4668:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    466a:	f8 9a       	sbi	0x1f, 0	; 31
    466c:	80 b5       	in	r24, 0x20	; 32
    return __result;
}
    466e:	08 95       	ret

00004670 <eeprom_write_byte>:
}

/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
    4670:	9c 01       	movw	r18, r24
{
    do {} while (!eeprom_is_ready ());
    4672:	f9 99       	sbic	0x1f, 1	; 31
    4674:	fe cf       	rjmp	.-4      	; 0x4672 <eeprom_write_byte+0x2>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    4676:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    4678:	32 bd       	out	0x22, r19	; 34
    467a:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
    467c:	60 bd       	out	0x20, r22	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    467e:	0f b6       	in	r0, 0x3f	; 63
    4680:	f8 94       	cli
    4682:	fa 9a       	sbi	0x1f, 2	; 31
    4684:	f9 9a       	sbi	0x1f, 1	; 31
    4686:	0f be       	out	0x3f, r0	; 63
}
    4688:	08 95       	ret

0000468a <getMinutesSinceMidnightLT()>:
// Thread-safe and ISR-safe.
#ifndef getMinutesSinceMidnightLT
uint_least16_t getMinutesSinceMidnightLT()
  {
  uint_least16_t result;
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    468a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    468c:	f8 94       	cli
    { result = _minutesSinceMidnightLT; }
    468e:	20 91 21 03 	lds	r18, 0x0321
    4692:	30 91 22 03 	lds	r19, 0x0322
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4696:	8f bf       	out	0x3f, r24	; 63
  return(result);
  }
    4698:	c9 01       	movw	r24, r18
    469a:	08 95       	ret

0000469c <getMinutesLT()>:
// Thread-safe and ISR-safe.
#ifndef getMinutesSinceMidnightLT
uint_least16_t getMinutesSinceMidnightLT()
  {
  uint_least16_t result;
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    469c:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    469e:	f8 94       	cli
    { result = _minutesSinceMidnightLT; }
    46a0:	80 91 21 03 	lds	r24, 0x0321
    46a4:	90 91 22 03 	lds	r25, 0x0322
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    46a8:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    46aa:	6c e3       	ldi	r22, 0x3C	; 60
    46ac:	70 e0       	ldi	r23, 0x00	; 0
    46ae:	0e 94 59 3e 	call	0x7cb2	; 0x7cb2 <__udivmodhi4>
  }
#endif

// Get local time minutes from RTC [0,59].
// Thread-safe and ISR-safe.
uint_least8_t getMinutesLT() { return(getMinutesSinceMidnightLT() % 60); }
    46b2:	08 95       	ret

000046b4 <getHoursLT()>:
// Thread-safe and ISR-safe.
#ifndef getMinutesSinceMidnightLT
uint_least16_t getMinutesSinceMidnightLT()
  {
  uint_least16_t result;
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    46b4:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    46b6:	f8 94       	cli
    { result = _minutesSinceMidnightLT; }
    46b8:	80 91 21 03 	lds	r24, 0x0321
    46bc:	90 91 22 03 	lds	r25, 0x0322
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    46c0:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    46c2:	6c e3       	ldi	r22, 0x3C	; 60
    46c4:	70 e0       	ldi	r23, 0x00	; 0
    46c6:	0e 94 59 3e 	call	0x7cb2	; 0x7cb2 <__udivmodhi4>
    46ca:	86 2f       	mov	r24, r22
// Thread-safe and ISR-safe.
uint_least8_t getMinutesLT() { return(getMinutesSinceMidnightLT() % 60); }

// Get local time hours from RTC [0,23].
// Thread-safe and ISR-safe.
uint_least8_t getHoursLT() { return(getMinutesSinceMidnightLT() / 60); }
    46cc:	08 95       	ret

000046ce <restoreRTC()>:

// Restore software RTC information from non-volatile (EEPROM) store, if possible.
// Returns true if the persisted data seemed valid and was restored, in full or part.
// To void on average using 15/2 minutes at each reset/restart,
// this starts the internal time a little over half way into the restored 15-minute slot.
bool restoreRTC()
    46ce:	1f 93       	push	r17
  {
  uint8_t persistedValue;
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    46d0:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    46d2:	f8 94       	cli
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    46d4:	88 e0       	ldi	r24, 0x08	; 8
    46d6:	90 e0       	ldi	r25, 0x00	; 0
    46d8:	60 e3       	ldi	r22, 0x30	; 48
    46da:	73 e2       	ldi	r23, 0x23	; 35
    46dc:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <__eerd_word>
    {
    // Restore the persisted days, though ignore if apparently unset (all 1s).
    const uint16_t days = eeprom_read_word((uint16_t*)EE_START_RTC_DAY_PERSIST);
    if(days != (uint16_t)~0U) { _daysSince1999LT = days; }
    46e0:	2f ef       	ldi	r18, 0xFF	; 255
    46e2:	8f 3f       	cpi	r24, 0xFF	; 255
    46e4:	92 07       	cpc	r25, r18
    46e6:	21 f0       	breq	.+8      	; 0x46f0 <restoreRTC()+0x22>
    46e8:	90 93 24 03 	sts	0x0324, r25
    46ec:	80 93 23 03 	sts	0x0323, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    46f0:	f9 99       	sbic	0x1f, 1	; 31
    46f2:	fe cf       	rjmp	.-4      	; 0x46f0 <restoreRTC()+0x22>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    46f4:	8a e0       	ldi	r24, 0x0A	; 10
    46f6:	90 e0       	ldi	r25, 0x00	; 0
    46f8:	92 bd       	out	0x22, r25	; 34
    46fa:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    46fc:	f8 9a       	sbi	0x1f, 0	; 31
    46fe:	60 b5       	in	r22, 0x20	; 32
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4700:	1f bf       	out	0x3f, r17	; 63
    // Now recover persisted HH:MM value.
    persistedValue = eeprom_read_byte((uint8_t*)EE_START_RTC_HHMM_PERSIST);
    }

  // Abort if value clearly invalid, eg likely an unprogrammed (0xff) byte.
  if(persistedValue >= (24 << 3)) { return(false); }
    4702:	60 3c       	cpi	r22, 0xC0	; 192
    4704:	90 f5       	brcc	.+100    	; 0x476a <restoreRTC()+0x9c>

  uint_least16_t minutesSinceMidnight = (persistedValue >> 3) * 60;
    4706:	86 2f       	mov	r24, r22
    4708:	90 e0       	ldi	r25, 0x00	; 0
    470a:	23 e0       	ldi	r18, 0x03	; 3
    470c:	95 95       	asr	r25
    470e:	87 95       	ror	r24
    4710:	2a 95       	dec	r18
    4712:	e1 f7       	brne	.-8      	; 0x470c <restoreRTC()+0x3e>
    4714:	2c e3       	ldi	r18, 0x3C	; 60
    4716:	30 e0       	ldi	r19, 0x00	; 0
    4718:	82 9f       	mul	r24, r18
    471a:	a0 01       	movw	r20, r0
    471c:	83 9f       	mul	r24, r19
    471e:	50 0d       	add	r21, r0
    4720:	92 9f       	mul	r25, r18
    4722:	50 0d       	add	r21, r0
    4724:	11 24       	eor	r1, r1
  minutesSinceMidnight += 8; // Start just over half-way into one quantum to minimise average time lost on restart.
    4726:	9a 01       	movw	r18, r20
    4728:	28 5f       	subi	r18, 0xF8	; 248
    472a:	3f 4f       	sbci	r19, 0xFF	; 255
  const uint8_t lowBits = persistedValue & 7; // Extract quarter-hour bits.
  switch(lowBits)
    472c:	86 2f       	mov	r24, r22
    472e:	87 70       	andi	r24, 0x07	; 7
    4730:	81 30       	cpi	r24, 0x01	; 1
    4732:	59 f0       	breq	.+22     	; 0x474a <restoreRTC()+0x7c>
    4734:	81 30       	cpi	r24, 0x01	; 1
    4736:	28 f0       	brcs	.+10     	; 0x4742 <restoreRTC()+0x74>
    4738:	83 30       	cpi	r24, 0x03	; 3
    473a:	59 f0       	breq	.+22     	; 0x4752 <restoreRTC()+0x84>
    473c:	87 30       	cpi	r24, 0x07	; 7
    473e:	a9 f4       	brne	.+42     	; 0x476a <restoreRTC()+0x9c>
    4740:	0b c0       	rjmp	.+22     	; 0x4758 <restoreRTC()+0x8a>
    {
    case 0: minutesSinceMidnight += 45; break;
    4742:	9a 01       	movw	r18, r20
    4744:	2b 5c       	subi	r18, 0xCB	; 203
    4746:	3f 4f       	sbci	r19, 0xFF	; 255
    4748:	07 c0       	rjmp	.+14     	; 0x4758 <restoreRTC()+0x8a>
    case 1: minutesSinceMidnight += 30; break;
    474a:	9a 01       	movw	r18, r20
    474c:	2a 5d       	subi	r18, 0xDA	; 218
    474e:	3f 4f       	sbci	r19, 0xFF	; 255
    4750:	03 c0       	rjmp	.+6      	; 0x4758 <restoreRTC()+0x8a>
    case 3: minutesSinceMidnight += 15; break;
    4752:	9a 01       	movw	r18, r20
    4754:	29 5e       	subi	r18, 0xE9	; 233
    4756:	3f 4f       	sbci	r19, 0xFF	; 255
    default: return(false); // Invalid bit pattern: abort.
    }

  // Set the hours and minutes (atomically).
  // Deliberately leave the seconds unset to avoid units becoming too synchronised with one another, increasing TX collisions, etc.
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    4758:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    475a:	f8 94       	cli
    { _minutesSinceMidnightLT = minutesSinceMidnight; }
    475c:	30 93 22 03 	sts	0x0322, r19
    4760:	20 93 21 03 	sts	0x0321, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4764:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
    4766:	81 e0       	ldi	r24, 0x01	; 1
    4768:	01 c0       	rjmp	.+2      	; 0x476c <restoreRTC()+0x9e>

  return(true);
    476a:	80 e0       	ldi	r24, 0x00	; 0
  }
    476c:	1f 91       	pop	r17
    476e:	08 95       	ret

00004770 <persistRTC()>:
// but enough to help avoid the clock slipping too much during (say) a battery change.
// There is no point calling this more than (say) once per minute,
// though it will simply return relatively quickly from redundant calls.
// The RTC data is stored so as not to wear out AVR EEPROM for at least several years.
// IMPLEMENTATION OF THIS AND THE eeprom_smart_xxx_byte() ROUTINES IS CRITICAL TO PERFORMANCE AND LONGEVITY.
void persistRTC()
    4770:	1f 93       	push	r17
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    4772:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4774:	f8 94       	cli
    {
    uint8_t quarterHours = (_minutesSinceMidnightLT / 15);
    4776:	80 91 21 03 	lds	r24, 0x0321
    477a:	90 91 22 03 	lds	r25, 0x0322
    477e:	6f e0       	ldi	r22, 0x0F	; 15
    4780:	70 e0       	ldi	r23, 0x00	; 0
    4782:	0e 94 59 3e 	call	0x7cb2	; 0x7cb2 <__udivmodhi4>
    uint8_t targetByte = (quarterHours << 1) & ~7U; // Bit pattern now hhhhh000 where hhhhh is whole hours [0,23].
    4786:	46 2f       	mov	r20, r22
    4788:	44 0f       	add	r20, r20
    478a:	48 7f       	andi	r20, 0xF8	; 248
    switch(quarterHours & 3)
    478c:	70 e0       	ldi	r23, 0x00	; 0
    478e:	63 70       	andi	r22, 0x03	; 3
    4790:	70 70       	andi	r23, 0x00	; 0
    4792:	61 30       	cpi	r22, 0x01	; 1
    4794:	71 05       	cpc	r23, r1
    4796:	39 f0       	breq	.+14     	; 0x47a6 <persistRTC()+0x36>
    4798:	62 30       	cpi	r22, 0x02	; 2
    479a:	71 05       	cpc	r23, r1
    479c:	31 f0       	breq	.+12     	; 0x47aa <persistRTC()+0x3a>
    479e:	67 2b       	or	r22, r23
    47a0:	29 f4       	brne	.+10     	; 0x47ac <persistRTC()+0x3c>
      {
      case 0: targetByte |= 7; break;
    47a2:	47 60       	ori	r20, 0x07	; 7
    47a4:	03 c0       	rjmp	.+6      	; 0x47ac <persistRTC()+0x3c>
      case 1: targetByte |= 3; break;
    47a6:	43 60       	ori	r20, 0x03	; 3
    47a8:	01 c0       	rjmp	.+2      	; 0x47ac <persistRTC()+0x3c>
      case 2: targetByte |= 1; break;
    47aa:	41 60       	ori	r20, 0x01	; 1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    47ac:	f9 99       	sbic	0x1f, 1	; 31
    47ae:	fe cf       	rjmp	.-4      	; 0x47ac <persistRTC()+0x3c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    47b0:	8a e0       	ldi	r24, 0x0A	; 10
    47b2:	90 e0       	ldi	r25, 0x00	; 0
    47b4:	92 bd       	out	0x22, r25	; 34
    47b6:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    47b8:	f8 9a       	sbi	0x1f, 0	; 31
    47ba:	80 b5       	in	r24, 0x20	; 32
      }

    // Update if target HH:MM not already correct.
    const uint8_t persistedValue = eeprom_read_byte((uint8_t*)EE_START_RTC_HHMM_PERSIST);
    if(persistedValue != targetByte)
    47bc:	84 17       	cp	r24, r20
    47be:	91 f1       	breq	.+100    	; 0x4824 <persistRTC()+0xb4>
      {
      // Where it is not possible to get the target value just by setting bits to 0,
      // eg for a new hour (ie completely different hour to that in EEPROM and on roll to new hour),
      // then do a full erase/write...
      //if((0 == quarterHours) || ((persistedValue & 0xf8) != (targetByte & 0xf8)))
      if(targetByte != (persistedValue & targetByte))
    47c0:	24 2f       	mov	r18, r20
    47c2:	30 e0       	ldi	r19, 0x00	; 0
    47c4:	90 e0       	ldi	r25, 0x00	; 0
    47c6:	82 23       	and	r24, r18
    47c8:	93 23       	and	r25, r19
    47ca:	28 17       	cp	r18, r24
    47cc:	39 07       	cpc	r19, r25
    47ce:	71 f0       	breq	.+28     	; 0x47ec <persistRTC()+0x7c>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    47d0:	f9 99       	sbic	0x1f, 1	; 31
    47d2:	fe cf       	rjmp	.-4      	; 0x47d0 <persistRTC()+0x60>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    47d4:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    47d6:	8a e0       	ldi	r24, 0x0A	; 10
    47d8:	90 e0       	ldi	r25, 0x00	; 0
    47da:	92 bd       	out	0x22, r25	; 34
    47dc:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    47de:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    47e0:	0f b6       	in	r0, 0x3f	; 63
    47e2:	f8 94       	cli
    47e4:	fa 9a       	sbi	0x1f, 2	; 31
    47e6:	f9 9a       	sbi	0x1f, 1	; 31
    47e8:	0f be       	out	0x3f, r0	; 63
    47ea:	05 c0       	rjmp	.+10     	; 0x47f6 <persistRTC()+0x86>
        { eeprom_write_byte((uint8_t*)EE_START_RTC_HHMM_PERSIST, targetByte); }
      // Else do a write without erase, typically clearing the quarter bits one at a time...
      else
        { eeprom_smart_clear_bits((uint8_t*)EE_START_RTC_HHMM_PERSIST, targetByte); }
    47ec:	8a e0       	ldi	r24, 0x0A	; 10
    47ee:	90 e0       	ldi	r25, 0x00	; 0
    47f0:	64 2f       	mov	r22, r20
    47f2:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <eeprom_smart_clear_bits(unsigned char*, unsigned char)>
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    47f6:	88 e0       	ldi	r24, 0x08	; 8
    47f8:	90 e0       	ldi	r25, 0x00	; 0
    47fa:	60 e3       	ldi	r22, 0x30	; 48
    47fc:	73 e2       	ldi	r23, 0x23	; 35
    47fe:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <__eerd_word>

      // Also persist the current days if not up to date.
      const uint16_t days = eeprom_read_word((uint16_t*)EE_START_RTC_DAY_PERSIST);
      if(days != _daysSince1999LT) { eeprom_write_word((uint16_t*)EE_START_RTC_DAY_PERSIST, _daysSince1999LT); }
    4802:	20 91 23 03 	lds	r18, 0x0323
    4806:	30 91 24 03 	lds	r19, 0x0324
    480a:	82 17       	cp	r24, r18
    480c:	93 07       	cpc	r25, r19
    480e:	51 f0       	breq	.+20     	; 0x4824 <persistRTC()+0xb4>
    4810:	60 91 23 03 	lds	r22, 0x0323
    4814:	70 91 24 03 	lds	r23, 0x0324
    Write a word \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_word (uint16_t *__p, uint16_t __value)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    __eewr_word (__p, __value, eeprom_write_byte);
    4818:	88 e0       	ldi	r24, 0x08	; 8
    481a:	90 e0       	ldi	r25, 0x00	; 0
    481c:	48 e3       	ldi	r20, 0x38	; 56
    481e:	53 e2       	ldi	r21, 0x23	; 35
    4820:	0e 94 0e 04 	call	0x81c	; 0x81c <__eewr_word>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4824:	1f bf       	out	0x3f, r17	; 63
      }
    }
  }
    4826:	1f 91       	pop	r17
    4828:	08 95       	ret

0000482a <setHoursMinutesLT(int, int)>:
// Will ignore attempts to set bad values and return false in that case.
// Returns true if all OK and the time has been set.
// Does not attempt to set seconds.
// Thread/interrupt safe, but do not call this from an ISR.
// Will persist time to survive reset as neceessary.
bool setHoursMinutesLT(int hours, int minutes)
    482a:	1f 93       	push	r17
    482c:	ac 01       	movw	r20, r24
  {
  if((hours < 0) || (hours > 23) || (minutes < 0) || (minutes > 59)) { return(false); } // Invalid time.
    482e:	88 31       	cpi	r24, 0x18	; 24
    4830:	91 05       	cpc	r25, r1
    4832:	10 f5       	brcc	.+68     	; 0x4878 <setHoursMinutesLT(int, int)+0x4e>
    4834:	77 fd       	sbrc	r23, 7
    4836:	20 c0       	rjmp	.+64     	; 0x4878 <setHoursMinutesLT(int, int)+0x4e>
    4838:	6c 33       	cpi	r22, 0x3C	; 60
    483a:	71 05       	cpc	r23, r1
    483c:	ec f4       	brge	.+58     	; 0x4878 <setHoursMinutesLT(int, int)+0x4e>
  const uint_least16_t computedMinutesSinceMidnightLT = (uint_least16_t) ((60 * hours) + minutes);
    483e:	8c e3       	ldi	r24, 0x3C	; 60
    4840:	90 e0       	ldi	r25, 0x00	; 0
    4842:	48 9f       	mul	r20, r24
    4844:	90 01       	movw	r18, r0
    4846:	49 9f       	mul	r20, r25
    4848:	30 0d       	add	r19, r0
    484a:	58 9f       	mul	r21, r24
    484c:	30 0d       	add	r19, r0
    484e:	11 24       	eor	r1, r1
    4850:	26 0f       	add	r18, r22
    4852:	37 1f       	adc	r19, r23
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    4854:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4856:	f8 94       	cli
    {
    if(computedMinutesSinceMidnightLT != _minutesSinceMidnightLT)
    4858:	80 91 21 03 	lds	r24, 0x0321
    485c:	90 91 22 03 	lds	r25, 0x0322
    4860:	28 17       	cp	r18, r24
    4862:	39 07       	cpc	r19, r25
    4864:	31 f0       	breq	.+12     	; 0x4872 <setHoursMinutesLT(int, int)+0x48>
      {
      // If time has changed then store it locally and persist it if need be.
      _minutesSinceMidnightLT = computedMinutesSinceMidnightLT;
    4866:	30 93 22 03 	sts	0x0322, r19
    486a:	20 93 21 03 	sts	0x0321, r18
      persistRTC();
    486e:	0e 94 b8 23 	call	0x4770	; 0x4770 <persistRTC()>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4872:	1f bf       	out	0x3f, r17	; 63
    __asm__ volatile ("" ::: "memory");
    4874:	81 e0       	ldi	r24, 0x01	; 1
    4876:	01 c0       	rjmp	.+2      	; 0x487a <setHoursMinutesLT(int, int)+0x50>
      }
    }
  return(true); // Assume set and persisted OK.
    4878:	80 e0       	ldi	r24, 0x00	; 0
  }
    487a:	1f 91       	pop	r17
    487c:	08 95       	ret

0000487e <getSimpleScheduleOn(unsigned char)>:
// Will usually include a pre-warm time before the actual time set.
// Note that unprogrammed EEPROM value will result in invalid time, ie schedule not set.
//   * which  schedule number, counting from 0
uint_least16_t getSimpleScheduleOn(const uint8_t which)
  {
  if(which >= MAX_SIMPLE_SCHEDULES) { return(~0); } // Invalid schedule number.
    487e:	82 30       	cpi	r24, 0x02	; 2
    4880:	d0 f4       	brcc	.+52     	; 0x48b6 <getSimpleScheduleOn(unsigned char)+0x38>
  uint8_t startMM;
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    4882:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4884:	f8 94       	cli
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    4886:	f9 99       	sbic	0x1f, 1	; 31
    4888:	fe cf       	rjmp	.-4      	; 0x4886 <getSimpleScheduleOn(unsigned char)+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    488a:	90 e0       	ldi	r25, 0x00	; 0
    488c:	0c 96       	adiw	r24, 0x0c	; 12
    488e:	92 bd       	out	0x22, r25	; 34
    4890:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    4892:	f8 9a       	sbi	0x1f, 0	; 31
    4894:	90 b5       	in	r25, 0x20	; 32
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4896:	2f bf       	out	0x3f, r18	; 63
    { startMM = eeprom_read_byte((uint8_t*)(EE_START_SIMPLE_SCHEDULE0_ON + which)); }
  if(startMM > MAX_COMPRESSED_MINS_AFTER_MIDNIGHT) { return(~0); } // No schedule set.
    4898:	90 3f       	cpi	r25, 0xF0	; 240
    489a:	68 f4       	brcc	.+26     	; 0x48b6 <getSimpleScheduleOn(unsigned char)+0x38>
  // Compute start time from stored shedule value.
  uint_least16_t startTime = SIMPLE_SCHEDULE_GRANULARITY_MINS * startMM;
    489c:	86 e0       	ldi	r24, 0x06	; 6
    489e:	98 9f       	mul	r25, r24
    48a0:	c0 01       	movw	r24, r0
    48a2:	11 24       	eor	r1, r1
  const uint8_t windBackM = PREWARM_MINS; // Wind back start time by about 25% of full interval.
  if(windBackM > startTime) { startTime += MINS_PER_DAY; } // Allow for wrap-around at midnight.
    48a4:	8f 30       	cpi	r24, 0x0F	; 15
    48a6:	91 05       	cpc	r25, r1
    48a8:	10 f4       	brcc	.+4      	; 0x48ae <getSimpleScheduleOn(unsigned char)+0x30>
    48aa:	80 56       	subi	r24, 0x60	; 96
    48ac:	9a 4f       	sbci	r25, 0xFA	; 250
  startTime -= windBackM;
    48ae:	9c 01       	movw	r18, r24
    48b0:	2f 50       	subi	r18, 0x0F	; 15
    48b2:	30 40       	sbci	r19, 0x00	; 0
    48b4:	02 c0       	rjmp	.+4      	; 0x48ba <getSimpleScheduleOn(unsigned char)+0x3c>
  return(startTime);
    48b6:	2f ef       	ldi	r18, 0xFF	; 255
    48b8:	3f ef       	ldi	r19, 0xFF	; 255
  }
    48ba:	c9 01       	movw	r24, r18
    48bc:	08 95       	ret

000048be <clearSimpleSchedule(unsigned char)>:
  }

// Clear a simple schedule.
// There will be neither on nor off events from the selected simple schedule once this is called.
//   * which  schedule number, counting from 0
void clearSimpleSchedule(const uint8_t which)
    48be:	1f 93       	push	r17
  {
  if(which >= MAX_SIMPLE_SCHEDULES) { return; } // Invalid schedule number.
    48c0:	82 30       	cpi	r24, 0x02	; 2
    48c2:	38 f4       	brcc	.+14     	; 0x48d2 <clearSimpleSchedule(unsigned char)+0x14>
  // Clear the schedule back to 'unprogrammed' values, minimising wear.
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    48c4:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    48c6:	f8 94       	cli
    { eeprom_smart_erase_byte((uint8_t*)(EE_START_SIMPLE_SCHEDULE0_ON + which)); }
    48c8:	90 e0       	ldi	r25, 0x00	; 0
    48ca:	0c 96       	adiw	r24, 0x0c	; 12
    48cc:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <eeprom_smart_erase_byte(unsigned char*)>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    48d0:	1f bf       	out	0x3f, r17	; 63
  }
    48d2:	1f 91       	pop	r17
    48d4:	08 95       	ret

000048d6 <setSimpleSchedule(unsigned int, unsigned char)>:
//   * startMinutesSinceMidnightLT  is start/on time in minutes after midnight [0,1439]
//   * which  schedule number, counting from 0
// Invalid parameters will be ignored and false returned,
// else this will return true and isSimpleScheduleSet() will return true after this.
// NOTE: over-use of this routine can prematurely wear out the EEPROM.
bool setSimpleSchedule(const uint_least16_t startMinutesSinceMidnightLT, const uint8_t which)
    48d6:	1f 93       	push	r17
  {
  if(which >= MAX_SIMPLE_SCHEDULES) { return(false); } // Invalid schedule number.
    48d8:	62 30       	cpi	r22, 0x02	; 2
    48da:	98 f4       	brcc	.+38     	; 0x4902 <setSimpleSchedule(unsigned int, unsigned char)+0x2c>
  if(startMinutesSinceMidnightLT >= MINS_PER_DAY) { return(false); } // Invalid time.
    48dc:	25 e0       	ldi	r18, 0x05	; 5
    48de:	80 3a       	cpi	r24, 0xA0	; 160
    48e0:	92 07       	cpc	r25, r18
    48e2:	78 f4       	brcc	.+30     	; 0x4902 <setSimpleSchedule(unsigned int, unsigned char)+0x2c>

  // Set the schedule, minimising wear.
  const uint8_t startMM = startMinutesSinceMidnightLT / SIMPLE_SCHEDULE_GRANULARITY_MINS; // Round down...
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    48e4:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    48e6:	f8 94       	cli
    { eeprom_smart_update_byte((uint8_t*)(EE_START_SIMPLE_SCHEDULE0_ON + which), startMM); }
    48e8:	26 2f       	mov	r18, r22
    48ea:	30 e0       	ldi	r19, 0x00	; 0
    48ec:	66 e0       	ldi	r22, 0x06	; 6
    48ee:	70 e0       	ldi	r23, 0x00	; 0
    48f0:	0e 94 59 3e 	call	0x7cb2	; 0x7cb2 <__udivmodhi4>
    48f4:	c9 01       	movw	r24, r18
    48f6:	0c 96       	adiw	r24, 0x0c	; 12
    48f8:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <eeprom_smart_update_byte(unsigned char*, unsigned char)>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    48fc:	1f bf       	out	0x3f, r17	; 63
    __asm__ volatile ("" ::: "memory");
    48fe:	81 e0       	ldi	r24, 0x01	; 1
    4900:	01 c0       	rjmp	.+2      	; 0x4904 <setSimpleSchedule(unsigned int, unsigned char)+0x2e>
  return(true); // Assume EEPROM programmed OK...
    4902:	80 e0       	ldi	r24, 0x00	; 0
  }
    4904:	1f 91       	pop	r17
    4906:	08 95       	ret

00004908 <getSimpleScheduleOff(unsigned char)>:
  }

// Get the simple/primary schedule off time, as minutes after midnight [0,1439]; invalid (eg ~0) if none set.
// This is based on specifed start time and some element of the current eco/comfort bias.
//   * which  schedule number, counting from 0
uint_least16_t getSimpleScheduleOff(const uint8_t which)
    4908:	cf 93       	push	r28
    490a:	df 93       	push	r29
  {
  const uint_least16_t startMins = getSimpleScheduleOn(which);
    490c:	0e 94 3f 24 	call	0x487e	; 0x487e <getSimpleScheduleOn(unsigned char)>
    4910:	ec 01       	movw	r28, r24
  if(startMins == (uint_least16_t)~0) { return(~0); }
    4912:	8f ef       	ldi	r24, 0xFF	; 255
    4914:	cf 3f       	cpi	r28, 0xFF	; 255
    4916:	d8 07       	cpc	r29, r24
    4918:	19 f4       	brne	.+6      	; 0x4920 <getSimpleScheduleOff(unsigned char)+0x18>
    491a:	2f ef       	ldi	r18, 0xFF	; 255
    491c:	3f ef       	ldi	r19, 0xFF	; 255
    491e:	16 c0       	rjmp	.+44     	; 0x494c <getSimpleScheduleOff(unsigned char)+0x44>
  {
//  // Simple and fast binary choice.
//  return(hasEcoBias() ? LEARNED_ON_PERIOD_M : LEARNED_ON_PERIOD_COMFORT_M);

  // Three-way split based on current WARM target temperature.
  const uint8_t wt = getWARMTargetC();
    4920:	0e 94 88 04 	call	0x910	; 0x910 <getWARMTargetC()>
  if(isEcoTemperature(wt)) { return(LEARNED_ON_PERIOD_M); }
    4924:	82 31       	cpi	r24, 0x12	; 18
    4926:	10 f4       	brcc	.+4      	; 0x492c <getSimpleScheduleOff(unsigned char)+0x24>
    4928:	8c e3       	ldi	r24, 0x3C	; 60
    492a:	05 c0       	rjmp	.+10     	; 0x4936 <getSimpleScheduleOff(unsigned char)+0x2e>
  else if(isComfortTemperature(wt)) { return(LEARNED_ON_PERIOD_COMFORT_M); }
    492c:	87 31       	cpi	r24, 0x17	; 23
    492e:	10 f4       	brcc	.+4      	; 0x4934 <getSimpleScheduleOff(unsigned char)+0x2c>
    4930:	8a e5       	ldi	r24, 0x5A	; 90
    4932:	01 c0       	rjmp	.+2      	; 0x4936 <getSimpleScheduleOff(unsigned char)+0x2e>
    4934:	88 e7       	ldi	r24, 0x78	; 120
uint_least16_t getSimpleScheduleOff(const uint8_t which)
  {
  const uint_least16_t startMins = getSimpleScheduleOn(which);
  if(startMins == (uint_least16_t)~0) { return(~0); }
  // Compute end from start, allowing for wrap-around at midnight.
  uint_least16_t endTime = startMins + PREWARM_MINS + onTime();
    4936:	9e 01       	movw	r18, r28
    4938:	21 5f       	subi	r18, 0xF1	; 241
    493a:	3f 4f       	sbci	r19, 0xFF	; 255
    493c:	28 0f       	add	r18, r24
    493e:	31 1d       	adc	r19, r1
  if(endTime >= MINS_PER_DAY) { endTime -= MINS_PER_DAY; } // Allow for wrap-around at midnight.
    4940:	85 e0       	ldi	r24, 0x05	; 5
    4942:	20 3a       	cpi	r18, 0xA0	; 160
    4944:	38 07       	cpc	r19, r24
    4946:	10 f0       	brcs	.+4      	; 0x494c <getSimpleScheduleOff(unsigned char)+0x44>
    4948:	20 5a       	subi	r18, 0xA0	; 160
    494a:	35 40       	sbci	r19, 0x05	; 5
  return(endTime);
  }
    494c:	c9 01       	movw	r24, r18
    494e:	df 91       	pop	r29
    4950:	cf 91       	pop	r28
    4952:	08 95       	ret

00004954 <isAnyScheduleOnWARMSoon()>:

// True iff any schedule is due 'on'/'WARM' soon even when schedules overlap.
// May be relatively slow/expensive.
// Can be used to allow room to be brought up to at least a set-back temperature
// if very cold when a WARM period is due soon (to help ensure that WARM target is met on time).
bool isAnyScheduleOnWARMSoon()
    4954:	0f 93       	push	r16
    4956:	1f 93       	push	r17
    4958:	cf 93       	push	r28
    495a:	df 93       	push	r29
  {
  const uint_least16_t mm0 = getMinutesSinceMidnightLT() + PREPREWARM_MINS; // Look forward...
    495c:	0e 94 45 23 	call	0x468a	; 0x468a <getMinutesSinceMidnightLT()>
    4960:	9c 01       	movw	r18, r24
    4962:	26 5a       	subi	r18, 0xA6	; 166
    4964:	3f 4f       	sbci	r19, 0xFF	; 255
  const uint_least16_t mm = (mm0 >= MINS_PER_DAY) ? (mm0 - MINS_PER_DAY) : mm0;
    4966:	45 e0       	ldi	r20, 0x05	; 5
    4968:	20 3a       	cpi	r18, 0xA0	; 160
    496a:	34 07       	cpc	r19, r20
    496c:	10 f4       	brcc	.+4      	; 0x4972 <isAnyScheduleOnWARMSoon()+0x1e>
    496e:	89 01       	movw	r16, r18
    4970:	03 c0       	rjmp	.+6      	; 0x4978 <isAnyScheduleOnWARMSoon()+0x24>
    4972:	8c 01       	movw	r16, r24
    4974:	06 54       	subi	r16, 0x46	; 70
    4976:	15 40       	sbci	r17, 0x05	; 5

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    4978:	80 e0       	ldi	r24, 0x00	; 0
    497a:	0e 94 3f 24 	call	0x487e	; 0x487e <getSimpleScheduleOn(unsigned char)>
    497e:	ec 01       	movw	r28, r24
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    4980:	08 17       	cp	r16, r24
    4982:	19 07       	cpc	r17, r25
    4984:	68 f0       	brcs	.+26     	; 0x49a0 <isAnyScheduleOnWARMSoon()+0x4c>
    uint_least16_t e = getSimpleScheduleOff(which);
    4986:	80 e0       	ldi	r24, 0x00	; 0
    4988:	0e 94 84 24 	call	0x4908	; 0x4908 <getSimpleScheduleOff(unsigned char)>
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    498c:	8c 17       	cp	r24, r28
    498e:	9d 07       	cpc	r25, r29
    4990:	20 f0       	brcs	.+8      	; 0x499a <isAnyScheduleOnWARMSoon()+0x46>
    if(mm < e) { return(true); }
    4992:	08 17       	cp	r16, r24
    4994:	19 07       	cpc	r17, r25
    4996:	20 f4       	brcc	.+8      	; 0x49a0 <isAnyScheduleOnWARMSoon()+0x4c>
    4998:	17 c0       	rjmp	.+46     	; 0x49c8 <isAnyScheduleOnWARMSoon()+0x74>
  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    uint_least16_t e = getSimpleScheduleOff(which);
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    499a:	80 56       	subi	r24, 0x60	; 96
    499c:	9a 4f       	sbci	r25, 0xFA	; 250
    499e:	f9 cf       	rjmp	.-14     	; 0x4992 <isAnyScheduleOnWARMSoon()+0x3e>
  const uint_least16_t mm0 = getMinutesSinceMidnightLT() + PREPREWARM_MINS; // Look forward...
  const uint_least16_t mm = (mm0 >= MINS_PER_DAY) ? (mm0 - MINS_PER_DAY) : mm0;

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    49a0:	81 e0       	ldi	r24, 0x01	; 1
    49a2:	0e 94 3f 24 	call	0x487e	; 0x487e <getSimpleScheduleOn(unsigned char)>
    49a6:	ec 01       	movw	r28, r24
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    49a8:	08 17       	cp	r16, r24
    49aa:	19 07       	cpc	r17, r25
    49ac:	58 f0       	brcs	.+22     	; 0x49c4 <isAnyScheduleOnWARMSoon()+0x70>
    uint_least16_t e = getSimpleScheduleOff(which);
    49ae:	81 e0       	ldi	r24, 0x01	; 1
    49b0:	0e 94 84 24 	call	0x4908	; 0x4908 <getSimpleScheduleOff(unsigned char)>
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    49b4:	8c 17       	cp	r24, r28
    49b6:	9d 07       	cpc	r25, r29
    49b8:	10 f4       	brcc	.+4      	; 0x49be <isAnyScheduleOnWARMSoon()+0x6a>
    49ba:	80 56       	subi	r24, 0x60	; 96
    49bc:	9a 4f       	sbci	r25, 0xFA	; 250
    if(mm < e) { return(true); }
    49be:	08 17       	cp	r16, r24
    49c0:	19 07       	cpc	r17, r25
    49c2:	10 f0       	brcs	.+4      	; 0x49c8 <isAnyScheduleOnWARMSoon()+0x74>
    49c4:	80 e0       	ldi	r24, 0x00	; 0
    49c6:	01 c0       	rjmp	.+2      	; 0x49ca <isAnyScheduleOnWARMSoon()+0x76>
bool isAnyScheduleOnWARMSoon()
  {
  const uint_least16_t mm0 = getMinutesSinceMidnightLT() + PREPREWARM_MINS; // Look forward...
  const uint_least16_t mm = (mm0 >= MINS_PER_DAY) ? (mm0 - MINS_PER_DAY) : mm0;

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    49c8:	81 e0       	ldi	r24, 0x01	; 1
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    if(mm < e) { return(true); }
    }

  return(false);
  }
    49ca:	df 91       	pop	r29
    49cc:	cf 91       	pop	r28
    49ce:	1f 91       	pop	r17
    49d0:	0f 91       	pop	r16
    49d2:	08 95       	ret

000049d4 <isAnyScheduleOnWARMNow()>:

// True iff any schedule is currently 'on'/'WARM' even when schedules overlap.
// May be relatively slow/expensive.
// Can be used to suppress all 'off' activity except for the final one.
// Can be used to suppress set-backs during on times.
bool isAnyScheduleOnWARMNow()
    49d4:	0f 93       	push	r16
    49d6:	1f 93       	push	r17
    49d8:	cf 93       	push	r28
    49da:	df 93       	push	r29
  {
  const uint_least16_t mm = getMinutesSinceMidnightLT();
    49dc:	0e 94 45 23 	call	0x468a	; 0x468a <getMinutesSinceMidnightLT()>
    49e0:	8c 01       	movw	r16, r24

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    49e2:	80 e0       	ldi	r24, 0x00	; 0
    49e4:	0e 94 3f 24 	call	0x487e	; 0x487e <getSimpleScheduleOn(unsigned char)>
    49e8:	ec 01       	movw	r28, r24
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    49ea:	08 17       	cp	r16, r24
    49ec:	19 07       	cpc	r17, r25
    49ee:	68 f0       	brcs	.+26     	; 0x4a0a <isAnyScheduleOnWARMNow()+0x36>
    uint_least16_t e = getSimpleScheduleOff(which);
    49f0:	80 e0       	ldi	r24, 0x00	; 0
    49f2:	0e 94 84 24 	call	0x4908	; 0x4908 <getSimpleScheduleOff(unsigned char)>
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    49f6:	8c 17       	cp	r24, r28
    49f8:	9d 07       	cpc	r25, r29
    49fa:	20 f0       	brcs	.+8      	; 0x4a04 <isAnyScheduleOnWARMNow()+0x30>
    if(mm < e) { return(true); }
    49fc:	08 17       	cp	r16, r24
    49fe:	19 07       	cpc	r17, r25
    4a00:	20 f4       	brcc	.+8      	; 0x4a0a <isAnyScheduleOnWARMNow()+0x36>
    4a02:	17 c0       	rjmp	.+46     	; 0x4a32 <isAnyScheduleOnWARMNow()+0x5e>
  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    uint_least16_t e = getSimpleScheduleOff(which);
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    4a04:	80 56       	subi	r24, 0x60	; 96
    4a06:	9a 4f       	sbci	r25, 0xFA	; 250
    4a08:	f9 cf       	rjmp	.-14     	; 0x49fc <isAnyScheduleOnWARMNow()+0x28>
  {
  const uint_least16_t mm = getMinutesSinceMidnightLT();

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    4a0a:	81 e0       	ldi	r24, 0x01	; 1
    4a0c:	0e 94 3f 24 	call	0x487e	; 0x487e <getSimpleScheduleOn(unsigned char)>
    4a10:	ec 01       	movw	r28, r24
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    4a12:	08 17       	cp	r16, r24
    4a14:	19 07       	cpc	r17, r25
    4a16:	58 f0       	brcs	.+22     	; 0x4a2e <isAnyScheduleOnWARMNow()+0x5a>
    uint_least16_t e = getSimpleScheduleOff(which);
    4a18:	81 e0       	ldi	r24, 0x01	; 1
    4a1a:	0e 94 84 24 	call	0x4908	; 0x4908 <getSimpleScheduleOff(unsigned char)>
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    4a1e:	8c 17       	cp	r24, r28
    4a20:	9d 07       	cpc	r25, r29
    4a22:	10 f4       	brcc	.+4      	; 0x4a28 <isAnyScheduleOnWARMNow()+0x54>
    4a24:	80 56       	subi	r24, 0x60	; 96
    4a26:	9a 4f       	sbci	r25, 0xFA	; 250
    if(mm < e) { return(true); }
    4a28:	08 17       	cp	r16, r24
    4a2a:	19 07       	cpc	r17, r25
    4a2c:	10 f0       	brcs	.+4      	; 0x4a32 <isAnyScheduleOnWARMNow()+0x5e>
    4a2e:	80 e0       	ldi	r24, 0x00	; 0
    4a30:	01 c0       	rjmp	.+2      	; 0x4a34 <isAnyScheduleOnWARMNow()+0x60>
// Can be used to suppress set-backs during on times.
bool isAnyScheduleOnWARMNow()
  {
  const uint_least16_t mm = getMinutesSinceMidnightLT();

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    4a32:	81 e0       	ldi	r24, 0x01	; 1
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    if(mm < e) { return(true); }
    }

  return(false);
  }
    4a34:	df 91       	pop	r29
    4a36:	cf 91       	pop	r28
    4a38:	1f 91       	pop	r17
    4a3a:	0f 91       	pop	r16
    4a3c:	08 95       	ret

00004a3e <getStatsTXLevel()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    4a3e:	f9 99       	sbic	0x1f, 1	; 31
    4a40:	fe cf       	rjmp	.-4      	; 0x4a3e <getStatsTXLevel()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    4a42:	8c e1       	ldi	r24, 0x1C	; 28
    4a44:	90 e0       	ldi	r25, 0x00	; 0
    4a46:	92 bd       	out	0x22, r25	; 34
    4a48:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    4a4a:	f8 9a       	sbi	0x1f, 0	; 31
    4a4c:	80 b5       	in	r24, 0x20	; 32


// Get the current stats transmission level (for data outbound from this node).
// May not exactly match enumerated levels; use inequalities.
// Not thread-/ISR- safe.
stats_TX_level getStatsTXLevel() { return((stats_TX_level)eeprom_read_byte((uint8_t *)EE_START_STATS_TX_ENABLE)); }
    4a4e:	90 e0       	ldi	r25, 0x00	; 0
    4a50:	08 95       	ret

00004a52 <addEntropyToPool(unsigned char, unsigned char)>:
//   * estBits estimated number of truely securely random bits in range [0,8].
// Not thread-/ISR- safe.
void addEntropyToPool(uint8_t data, uint8_t estBits)
  {
  // TODO: no real entropy pool yet.
  seedRNG8(data, cycleCountCPU(), getSubCycleTime());
    4a52:	66 b5       	in	r22, 0x26	; 38
    4a54:	40 91 b2 00 	lds	r20, 0x00B2
    4a58:	0e 94 90 20 	call	0x4120	; 0x4120 <seedRNG8(unsigned char, unsigned char, unsigned char)>
  }
    4a5c:	08 95       	ret

00004a5e <getSecureRandomByte()>:
// Generate 'secure' new random byte.
// This should be essentially all entropy and unguessable.
// Likely to be slow and may force some peripheral I/O.
// Runtime details are likely to be intimately dependent on hardware implementation.
// Not thread-/ISR- safe.
uint8_t getSecureRandomByte()
    4a5e:	0f 93       	push	r16
    4a60:	1f 93       	push	r17
    4a62:	df 93       	push	r29
    4a64:	cf 93       	push	r28
    4a66:	0f 92       	push	r0
    4a68:	cd b7       	in	r28, 0x3d	; 61
    4a6a:	de b7       	in	r29, 0x3e	; 62
  {
  // Use various real noise sources and whiten with PRNG and other counters.
  // Mix the bits also to help ensure good distribution.
  uint8_t w1 = clockJitterEntropyByte(); // Real noise.
    4a6c:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <clockJitterEntropyByte()>
  w1 ^= (w1 << 4); // Mix.
    4a70:	08 2f       	mov	r16, r24
    4a72:	02 95       	swap	r16
    4a74:	00 7f       	andi	r16, 0xF0	; 240
    4a76:	08 27       	eor	r16, r24
  w1 ^= noisyADCRead(); // Real noise.
    4a78:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <noisyADCRead()>
    4a7c:	08 27       	eor	r16, r24
  w1 ^= (w1 >> 4); // Mix.
    4a7e:	10 2f       	mov	r17, r16
    4a80:	12 95       	swap	r17
    4a82:	1f 70       	andi	r17, 0x0F	; 15
    4a84:	10 27       	eor	r17, r16
  const uint8_t v = w1;
    4a86:	19 83       	std	Y+1, r17	; 0x01
  w1 ^= randRNG8(); // Whiten.
    4a88:	0e 94 ab 20 	call	0x4156	; 0x4156 <randRNG8()>
    4a8c:	18 27       	eor	r17, r24
  w1 ^= (w1 << 3); // Mix.
    4a8e:	81 2f       	mov	r24, r17
    4a90:	88 0f       	add	r24, r24
    4a92:	88 0f       	add	r24, r24
    4a94:	88 0f       	add	r24, r24
    4a96:	81 27       	eor	r24, r17
  w1 ^=  _crc_ibutton_update(cycleCountCPU() ^ (uint8_t)(intptr_t)&v, ++count8 - v); // Whiten.
    4a98:	96 b5       	in	r25, 0x26	; 38
    4a9a:	40 91 25 03 	lds	r20, 0x0325
    4a9e:	4f 5f       	subi	r20, 0xFF	; 255
    4aa0:	40 93 25 03 	sts	0x0325, r20
		"	brtc	2f" "\n\t"
		"	eor	%0, %2" "\n\t"
		"2:	dec	%1" "\n\t"
		"	brne	1b" "\n\t"
		: "=r" (__crc), "=d" (__i), "=d" (__pattern)
		: "0" (__crc), "r" (__data));
    4aa4:	9e 01       	movw	r18, r28
    4aa6:	2f 5f       	subi	r18, 0xFF	; 255
    4aa8:	3f 4f       	sbci	r19, 0xFF	; 255
    4aaa:	92 27       	eor	r25, r18
    4aac:	29 81       	ldd	r18, Y+1	; 0x01
    4aae:	42 1b       	sub	r20, r18
    4ab0:	94 27       	eor	r25, r20
    4ab2:	28 e0       	ldi	r18, 0x08	; 8
    4ab4:	3c e8       	ldi	r19, 0x8C	; 140
    4ab6:	90 fb       	bst	r25, 0
    4ab8:	96 95       	lsr	r25
    4aba:	0e f4       	brtc	.+2      	; 0x4abe <getSecureRandomByte()+0x60>
    4abc:	93 27       	eor	r25, r19
    4abe:	2a 95       	dec	r18
    4ac0:	d1 f7       	brne	.-12     	; 0x4ab6 <getSecureRandomByte()+0x58>
  return(w1);
  }
    4ac2:	89 27       	eor	r24, r25
    4ac4:	0f 90       	pop	r0
    4ac6:	cf 91       	pop	r28
    4ac8:	df 91       	pop	r29
    4aca:	1f 91       	pop	r17
    4acc:	0f 91       	pop	r16
    4ace:	08 95       	ret

00004ad0 <_debug_serial_timestamp()>:


#ifdef DEBUG // Don't emit debug-support code unless in DEBUG.

// Print timestamp with no newline in format: MinutesSinceMidnight:Seconds:SubCycleTime
void _debug_serial_timestamp()
    4ad0:	ff 92       	push	r15
    4ad2:	0f 93       	push	r16
    4ad4:	1f 93       	push	r17
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    4ad6:	0e 94 57 20 	call	0x40ae	; 0x40ae <powerUpSerialIfDisabled()>
    4ada:	f8 2e       	mov	r15, r24
  // Grab time values ASAP, fastest-incrementing first.
  // TODO: could lock out interrupts to capture atomically.
  const uint8_t ss = getSubCycleTime();
    4adc:	00 91 b2 00 	lds	r16, 0x00B2
  const uint8_t s = getSecondsLT();
    4ae0:	10 91 20 03 	lds	r17, 0x0320
  const uint16_t m = getMinutesSinceMidnightLT();
    4ae4:	0e 94 45 23 	call	0x468a	; 0x468a <getMinutesSinceMidnightLT()>
    4ae8:	bc 01       	movw	r22, r24
  Serial.print(m);
    4aea:	86 ec       	ldi	r24, 0xC6	; 198
    4aec:	94 e0       	ldi	r25, 0x04	; 4
    4aee:	4a e0       	ldi	r20, 0x0A	; 10
    4af0:	50 e0       	ldi	r21, 0x00	; 0
    4af2:	0e 94 b1 3c 	call	0x7962	; 0x7962 <Print::print(unsigned int, int)>
  Serial.print(':'); Serial.print(s);
    4af6:	86 ec       	ldi	r24, 0xC6	; 198
    4af8:	94 e0       	ldi	r25, 0x04	; 4
    4afa:	6a e3       	ldi	r22, 0x3A	; 58
    4afc:	0e 94 e6 3b 	call	0x77cc	; 0x77cc <Print::print(char)>
    4b00:	86 ec       	ldi	r24, 0xC6	; 198
    4b02:	94 e0       	ldi	r25, 0x04	; 4
    4b04:	61 2f       	mov	r22, r17
    4b06:	4a e0       	ldi	r20, 0x0A	; 10
    4b08:	50 e0       	ldi	r21, 0x00	; 0
    4b0a:	0e 94 c2 3c 	call	0x7984	; 0x7984 <Print::print(unsigned char, int)>
  Serial.print(':'); Serial.print(ss);
    4b0e:	86 ec       	ldi	r24, 0xC6	; 198
    4b10:	94 e0       	ldi	r25, 0x04	; 4
    4b12:	6a e3       	ldi	r22, 0x3A	; 58
    4b14:	0e 94 e6 3b 	call	0x77cc	; 0x77cc <Print::print(char)>
    4b18:	86 ec       	ldi	r24, 0xC6	; 198
    4b1a:	94 e0       	ldi	r25, 0x04	; 4
    4b1c:	60 2f       	mov	r22, r16
    4b1e:	4a e0       	ldi	r20, 0x0A	; 10
    4b20:	50 e0       	ldi	r21, 0x00	; 0
    4b22:	0e 94 c2 3c 	call	0x7984	; 0x7984 <Print::print(unsigned char, int)>
  _flush();
    4b26:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    4b2a:	ff 20       	and	r15, r15
    4b2c:	11 f0       	breq	.+4      	; 0x4b32 <_debug_serial_timestamp()+0x62>
    4b2e:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <powerDownSerial()>
  }
    4b32:	1f 91       	pop	r17
    4b34:	0f 91       	pop	r16
    4b36:	ff 90       	pop	r15
    4b38:	08 95       	ret

00004b3a <serialPrintAndFlush(unsigned int, int)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) number to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(const unsigned u, const int fmt)
    4b3a:	df 92       	push	r13
    4b3c:	ef 92       	push	r14
    4b3e:	ff 92       	push	r15
    4b40:	0f 93       	push	r16
    4b42:	1f 93       	push	r17
    4b44:	8c 01       	movw	r16, r24
    4b46:	7b 01       	movw	r14, r22
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    4b48:	0e 94 57 20 	call	0x40ae	; 0x40ae <powerUpSerialIfDisabled()>
    4b4c:	d8 2e       	mov	r13, r24
  // Send the character.
  Serial.print(u, fmt);
    4b4e:	86 ec       	ldi	r24, 0xC6	; 198
    4b50:	94 e0       	ldi	r25, 0x04	; 4
    4b52:	b8 01       	movw	r22, r16
    4b54:	a7 01       	movw	r20, r14
    4b56:	0e 94 b1 3c 	call	0x7962	; 0x7962 <Print::print(unsigned int, int)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    4b5a:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    4b5e:	dd 20       	and	r13, r13
    4b60:	11 f0       	breq	.+4      	; 0x4b66 <serialPrintAndFlush(unsigned int, int)+0x2c>
    4b62:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <powerDownSerial()>
  }
    4b66:	1f 91       	pop	r17
    4b68:	0f 91       	pop	r16
    4b6a:	ff 90       	pop	r15
    4b6c:	ef 90       	pop	r14
    4b6e:	df 90       	pop	r13
    4b70:	08 95       	ret

00004b72 <serialPrintAndFlush(char)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) character to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(const char c)
    4b72:	0f 93       	push	r16
    4b74:	1f 93       	push	r17
    4b76:	18 2f       	mov	r17, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    4b78:	0e 94 57 20 	call	0x40ae	; 0x40ae <powerUpSerialIfDisabled()>
    4b7c:	08 2f       	mov	r16, r24
  // Send the character.
  Serial.print(c);
    4b7e:	86 ec       	ldi	r24, 0xC6	; 198
    4b80:	94 e0       	ldi	r25, 0x04	; 4
    4b82:	61 2f       	mov	r22, r17
    4b84:	0e 94 e6 3b 	call	0x77cc	; 0x77cc <Print::print(char)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    4b88:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    4b8c:	00 23       	and	r16, r16
    4b8e:	11 f0       	breq	.+4      	; 0x4b94 <serialPrintAndFlush(char)+0x22>
    4b90:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <powerDownSerial()>
  }
    4b94:	1f 91       	pop	r17
    4b96:	0f 91       	pop	r16
    4b98:	08 95       	ret

00004b9a <serialPrintlnAndFlush()>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write line-end to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintlnAndFlush()
    4b9a:	1f 93       	push	r17
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    4b9c:	0e 94 57 20 	call	0x40ae	; 0x40ae <powerUpSerialIfDisabled()>
    4ba0:	18 2f       	mov	r17, r24
  // Send the text.
  Serial.println();
    4ba2:	86 ec       	ldi	r24, 0xC6	; 198
    4ba4:	94 e0       	ldi	r25, 0x04	; 4
    4ba6:	0e 94 ee 3b 	call	0x77dc	; 0x77dc <Print::println()>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    4baa:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    4bae:	11 23       	and	r17, r17
    4bb0:	11 f0       	breq	.+4      	; 0x4bb6 <serialPrintlnAndFlush()+0x1c>
    4bb2:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <powerDownSerial()>
  }
    4bb6:	1f 91       	pop	r17
    4bb8:	08 95       	ret

00004bba <serialPrintAndFlush(int, int)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) number to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(const int i, const int fmt)
    4bba:	df 92       	push	r13
    4bbc:	ef 92       	push	r14
    4bbe:	ff 92       	push	r15
    4bc0:	0f 93       	push	r16
    4bc2:	1f 93       	push	r17
    4bc4:	8c 01       	movw	r16, r24
    4bc6:	7b 01       	movw	r14, r22
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    4bc8:	0e 94 57 20 	call	0x40ae	; 0x40ae <powerUpSerialIfDisabled()>
    4bcc:	d8 2e       	mov	r13, r24
  // Send the character.
  Serial.print(i, fmt);
    4bce:	86 ec       	ldi	r24, 0xC6	; 198
    4bd0:	94 e0       	ldi	r25, 0x04	; 4
    4bd2:	b8 01       	movw	r22, r16
    4bd4:	a7 01       	movw	r20, r14
    4bd6:	0e 94 14 3d 	call	0x7a28	; 0x7a28 <Print::print(int, int)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    4bda:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    4bde:	dd 20       	and	r13, r13
    4be0:	11 f0       	breq	.+4      	; 0x4be6 <serialPrintAndFlush(int, int)+0x2c>
    4be2:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <powerDownSerial()>
  }
    4be6:	1f 91       	pop	r17
    4be8:	0f 91       	pop	r16
    4bea:	ff 90       	pop	r15
    4bec:	ef 90       	pop	r14
    4bee:	df 90       	pop	r13
    4bf0:	08 95       	ret

00004bf2 <serialPrintAndFlush(char const*)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (read-only) string to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(const char * const text)
    4bf2:	ff 92       	push	r15
    4bf4:	0f 93       	push	r16
    4bf6:	1f 93       	push	r17
    4bf8:	8c 01       	movw	r16, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    4bfa:	0e 94 57 20 	call	0x40ae	; 0x40ae <powerUpSerialIfDisabled()>
    4bfe:	f8 2e       	mov	r15, r24
  // Send the text.
  Serial.print(text);
    4c00:	86 ec       	ldi	r24, 0xC6	; 198
    4c02:	94 e0       	ldi	r25, 0x04	; 4
    4c04:	b8 01       	movw	r22, r16
    4c06:	0e 94 27 3d 	call	0x7a4e	; 0x7a4e <Print::print(char const*)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    4c0a:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    4c0e:	ff 20       	and	r15, r15
    4c10:	11 f0       	breq	.+4      	; 0x4c16 <serialPrintAndFlush(char const*)+0x24>
    4c12:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <powerDownSerial()>
  }
    4c16:	1f 91       	pop	r17
    4c18:	0f 91       	pop	r16
    4c1a:	ff 90       	pop	r15
    4c1c:	08 95       	ret

00004c1e <serialPrintAndFlush(__FlashStringHelper const*)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) string to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(__FlashStringHelper const * const text)
    4c1e:	ff 92       	push	r15
    4c20:	0f 93       	push	r16
    4c22:	1f 93       	push	r17
    4c24:	8c 01       	movw	r16, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    4c26:	0e 94 57 20 	call	0x40ae	; 0x40ae <powerUpSerialIfDisabled()>
    4c2a:	f8 2e       	mov	r15, r24
  // Send the text.
  Serial.print(text);
    4c2c:	86 ec       	ldi	r24, 0xC6	; 198
    4c2e:	94 e0       	ldi	r25, 0x04	; 4
    4c30:	b8 01       	movw	r22, r16
    4c32:	0e 94 c3 3b 	call	0x7786	; 0x7786 <Print::print(__FlashStringHelper const*)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    4c36:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    4c3a:	ff 20       	and	r15, r15
    4c3c:	11 f0       	breq	.+4      	; 0x4c42 <serialPrintAndFlush(__FlashStringHelper const*)+0x24>
    4c3e:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <powerDownSerial()>
  }
    4c42:	1f 91       	pop	r17
    4c44:	0f 91       	pop	r16
    4c46:	ff 90       	pop	r15
    4c48:	08 95       	ret

00004c4a <serialPrintlnAndFlush(__FlashStringHelper const*)>:
// Flush to use for all serialPrintXXX() and DEBUG_PRINTXXX routines.
#define _flush() flushSerialSCTSensitive()

// Write a single (Flash-resident) string to serial followed by line-end and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintlnAndFlush(__FlashStringHelper const * const line)
    4c4a:	ff 92       	push	r15
    4c4c:	0f 93       	push	r16
    4c4e:	1f 93       	push	r17
    4c50:	8c 01       	movw	r16, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    4c52:	0e 94 57 20 	call	0x40ae	; 0x40ae <powerUpSerialIfDisabled()>
    4c56:	f8 2e       	mov	r15, r24
  // Send the line of text followed by line end.
  Serial.println(line);
    4c58:	86 ec       	ldi	r24, 0xC6	; 198
    4c5a:	94 e0       	ldi	r25, 0x04	; 4
    4c5c:	b8 01       	movw	r22, r16
    4c5e:	0e 94 0e 3c 	call	0x781c	; 0x781c <Print::println(__FlashStringHelper const*)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    4c62:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    4c66:	ff 20       	and	r15, r15
    4c68:	11 f0       	breq	.+4      	; 0x4c6e <serialPrintlnAndFlush(__FlashStringHelper const*)+0x24>
    4c6a:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <powerDownSerial()>
  }
    4c6e:	1f 91       	pop	r17
    4c70:	0f 91       	pop	r16
    4c72:	ff 90       	pop	r15
    4c74:	08 95       	ret

00004c76 <resetCLIActiveTimer()>:
#define CLI_DEFAULT_TIMEOUT_M 2
static volatile uint8_t CLITimeoutM = CLI_DEFAULT_TIMEOUT_M;

// Reset CLI active timer to the full whack before it goes inactive again (ie makes CLI active for a while).
// Thread-safe.
void resetCLIActiveTimer() { CLITimeoutM = CLI_DEFAULT_TIMEOUT_M; }
    4c76:	82 e0       	ldi	r24, 0x02	; 2
    4c78:	80 93 3e 01 	sts	0x013E, r24
    4c7c:	08 95       	ret

00004c7e <isCLIActive()>:

// Returns true if the CLI is active, at least intermittently.
// Thread-safe.
bool isCLIActive() { return(0 != CLITimeoutM); }
    4c7e:	80 91 3e 01 	lds	r24, 0x013E
    4c82:	81 11       	cpse	r24, r1
    4c84:	81 e0       	ldi	r24, 0x01	; 1
    4c86:	08 95       	ret

00004c88 <recentUIControlUse()>:
  markAsOccupied(); // Thread-safe.
  }

// True if a manual UI control has been recently (seconds to minutes ago) operated.
// Thread-safe.
bool recentUIControlUse() { return(0 != uiTimeoutM); }
    4c88:	80 91 5d 03 	lds	r24, 0x035D
    4c8c:	81 11       	cpse	r24, r1
    4c8e:	81 e0       	ldi	r24, 0x01	; 1
    4c90:	08 95       	ret

00004c92 <Serial_print_space()>:
    }
  }


// Prints a single space to Serial (which must be up and running).
static void Serial_print_space() { Serial.print(' '); }
    4c92:	86 ec       	ldi	r24, 0xC6	; 198
    4c94:	94 e0       	ldi	r25, 0x04	; 4
    4c96:	60 e2       	ldi	r22, 0x20	; 32
    4c98:	0e 94 e6 3b 	call	0x77cc	; 0x77cc <Print::print(char)>
    4c9c:	08 95       	ret

00004c9e <InvalidIgnored()>:
  Serial.println();
  }

// Prints warning to serial (that must be up and running) that invalid (CLI) input has been ignored.
// Probably should not be inlined, to avoid creating duplicate strings in Flash.
static void InvalidIgnored() { Serial.println(F("Invalid, ignored.")); }
    4c9e:	86 ec       	ldi	r24, 0xC6	; 198
    4ca0:	94 e0       	ldi	r25, 0x04	; 4
    4ca2:	6d e2       	ldi	r22, 0x2D	; 45
    4ca4:	74 e0       	ldi	r23, 0x04	; 4
    4ca6:	0e 94 0e 3c 	call	0x781c	; 0x781c <Print::println(__FlashStringHelper const*)>
    4caa:	08 95       	ret

00004cac <printCLILine(unsigned char, char, __FlashStringHelper const*)>:
  for(int8_t padding = SYNTAX_COL_WIDTH - strlen_P((const char *)syntax); --padding >= 0; ) { Serial_print_space(); }
  Serial.println(description);
  }
// Efficiently print a single line given a single-char syntax element and the description, both non-null.
// NOTE: will skip the description if getting close to the end of the time deadline to avoid overrun.
static void printCLILine(const uint8_t deadline, const char syntax, __FlashStringHelper const *description)
    4cac:	1f 93       	push	r17
    4cae:	cf 93       	push	r28
    4cb0:	df 93       	push	r29
    4cb2:	18 2f       	mov	r17, r24
    4cb4:	ea 01       	movw	r28, r20
  {
  Serial.print(syntax);
    4cb6:	86 ec       	ldi	r24, 0xC6	; 198
    4cb8:	94 e0       	ldi	r25, 0x04	; 4
    4cba:	0e 94 e6 3b 	call	0x77cc	; 0x77cc <Print::print(char)>
  flushSerialProductive(); // Ensure all pending output is flushed before sampling current position in minor cycle.
    4cbe:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <flushSerialProductive()>
  if(getSubCycleTime() >= deadline) { Serial.println(); return; }
    4cc2:	80 91 b2 00 	lds	r24, 0x00B2
    4cc6:	81 17       	cp	r24, r17
    4cc8:	10 f4       	brcc	.+4      	; 0x4cce <printCLILine(unsigned char, char, __FlashStringHelper const*)+0x22>
    4cca:	19 e0       	ldi	r17, 0x09	; 9
    4ccc:	07 c0       	rjmp	.+14     	; 0x4cdc <printCLILine(unsigned char, char, __FlashStringHelper const*)+0x30>
    4cce:	86 ec       	ldi	r24, 0xC6	; 198
    4cd0:	94 e0       	ldi	r25, 0x04	; 4
    4cd2:	0e 94 ee 3b 	call	0x77dc	; 0x77dc <Print::println()>
    4cd6:	09 c0       	rjmp	.+18     	; 0x4cea <printCLILine(unsigned char, char, __FlashStringHelper const*)+0x3e>
  for(int8_t padding = SYNTAX_COL_WIDTH - 1; --padding >= 0; ) { Serial_print_space(); }
    4cd8:	0e 94 49 26 	call	0x4c92	; 0x4c92 <Serial_print_space()>
    4cdc:	11 50       	subi	r17, 0x01	; 1
    4cde:	e0 f7       	brcc	.-8      	; 0x4cd8 <printCLILine(unsigned char, char, __FlashStringHelper const*)+0x2c>
  Serial.println(description);
    4ce0:	86 ec       	ldi	r24, 0xC6	; 198
    4ce2:	94 e0       	ldi	r25, 0x04	; 4
    4ce4:	be 01       	movw	r22, r28
    4ce6:	0e 94 0e 3c 	call	0x781c	; 0x781c <Print::println(__FlashStringHelper const*)>
  }
    4cea:	df 91       	pop	r29
    4cec:	cf 91       	pop	r28
    4cee:	1f 91       	pop	r17
    4cf0:	08 95       	ret

00004cf2 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)>:
#define CLI_PRINT_OH_SCT ((uint8_t)(GSCT_MAX/4))
// Deadline in minor cycle by which to stop printing description.
#define STOP_PRINTING_DESCRIPTION_AT ((uint8_t)(GSCT_MAX-CLI_PRINT_OH_SCT))
// Efficiently print a single line given the syntax element and the description, both non-null.
// NOTE: will skip the description if getting close to the end of the time deadline to avoid overrun.
static void printCLILine(const uint8_t deadline, __FlashStringHelper const *syntax, __FlashStringHelper const *description)
    4cf2:	ef 92       	push	r14
    4cf4:	ff 92       	push	r15
    4cf6:	1f 93       	push	r17
    4cf8:	cf 93       	push	r28
    4cfa:	df 93       	push	r29
    4cfc:	18 2f       	mov	r17, r24
    4cfe:	eb 01       	movw	r28, r22
    4d00:	7a 01       	movw	r14, r20
  {
  Serial.print(syntax);
    4d02:	86 ec       	ldi	r24, 0xC6	; 198
    4d04:	94 e0       	ldi	r25, 0x04	; 4
    4d06:	0e 94 c3 3b 	call	0x7786	; 0x7786 <Print::print(__FlashStringHelper const*)>
  flushSerialProductive(); // Ensure all pending output is flushed before sampling current position in minor cycle.
    4d0a:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <flushSerialProductive()>
  if(getSubCycleTime() >= deadline) { Serial.println(); return; }
    4d0e:	80 91 b2 00 	lds	r24, 0x00B2
    4d12:	81 17       	cp	r24, r17
    4d14:	28 f0       	brcs	.+10     	; 0x4d20 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)+0x2e>
    4d16:	86 ec       	ldi	r24, 0xC6	; 198
    4d18:	94 e0       	ldi	r25, 0x04	; 4
    4d1a:	0e 94 ee 3b 	call	0x77dc	; 0x77dc <Print::println()>
    4d1e:	10 c0       	rjmp	.+32     	; 0x4d40 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)+0x4e>
  for(int8_t padding = SYNTAX_COL_WIDTH - strlen_P((const char *)syntax); --padding >= 0; ) { Serial_print_space(); }
    4d20:	ce 01       	movw	r24, r28
    4d22:	0e 94 97 03 	call	0x72e	; 0x72e <strlen_P>
    4d26:	1a e0       	ldi	r17, 0x0A	; 10
    4d28:	18 1b       	sub	r17, r24
    4d2a:	02 c0       	rjmp	.+4      	; 0x4d30 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)+0x3e>
    4d2c:	0e 94 49 26 	call	0x4c92	; 0x4c92 <Serial_print_space()>
    4d30:	11 50       	subi	r17, 0x01	; 1
    4d32:	17 ff       	sbrs	r17, 7
    4d34:	fb cf       	rjmp	.-10     	; 0x4d2c <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)+0x3a>
  Serial.println(description);
    4d36:	86 ec       	ldi	r24, 0xC6	; 198
    4d38:	94 e0       	ldi	r25, 0x04	; 4
    4d3a:	b7 01       	movw	r22, r14
    4d3c:	0e 94 0e 3c 	call	0x781c	; 0x781c <Print::println(__FlashStringHelper const*)>
  }
    4d40:	df 91       	pop	r29
    4d42:	cf 91       	pop	r28
    4d44:	1f 91       	pop	r17
    4d46:	ff 90       	pop	r15
    4d48:	ef 90       	pop	r14
    4d4a:	08 95       	ret

00004d4c <dumpCLIUsage(unsigned char)>:
  Serial.println(description);
  }

// Dump some brief CLI usage instructions to serial TX, which must be up and running.
// If this gets too big there is a risk of overrunning and missing the next tick...
static void dumpCLIUsage(const uint8_t stopBy)
    4d4c:	1f 93       	push	r17
    4d4e:	df 93       	push	r29
    4d50:	cf 93       	push	r28
    4d52:	00 d0       	rcall	.+0      	; 0x4d54 <dumpCLIUsage(unsigned char)+0x8>
    4d54:	00 d0       	rcall	.+0      	; 0x4d56 <dumpCLIUsage(unsigned char)+0xa>
    4d56:	cd b7       	in	r28, 0x3d	; 61
    4d58:	de b7       	in	r29, 0x3e	; 62
    4d5a:	8c 83       	std	Y+4, r24	; 0x04
  {
  const uint8_t deadline = fnmin((uint8_t)(stopBy - fnmin(stopBy,CLI_PRINT_OH_SCT)), STOP_PRINTING_DESCRIPTION_AT);
    4d5c:	98 2f       	mov	r25, r24
    4d5e:	8f e3       	ldi	r24, 0x3F	; 63
    4d60:	89 83       	std	Y+1, r24	; 0x01
    4d62:	89 2f       	mov	r24, r25
    4d64:	90 34       	cpi	r25, 0x40	; 64
    4d66:	08 f0       	brcs	.+2      	; 0x4d6a <dumpCLIUsage(unsigned char)+0x1e>
    4d68:	8f e3       	ldi	r24, 0x3F	; 63
    4d6a:	98 1b       	sub	r25, r24
    4d6c:	9a 83       	std	Y+2, r25	; 0x02
    4d6e:	80 ec       	ldi	r24, 0xC0	; 192
    4d70:	8b 83       	std	Y+3, r24	; 0x03
    4d72:	19 2f       	mov	r17, r25
    4d74:	91 3c       	cpi	r25, 0xC1	; 193
    4d76:	08 f0       	brcs	.+2      	; 0x4d7a <dumpCLIUsage(unsigned char)+0x2e>
    4d78:	10 ec       	ldi	r17, 0xC0	; 192
  Serial.println();
    4d7a:	86 ec       	ldi	r24, 0xC6	; 198
    4d7c:	94 e0       	ldi	r25, 0x04	; 4
    4d7e:	0e 94 ee 3b 	call	0x77dc	; 0x77dc <Print::println()>
  //Serial.println(F("CLI usage:"));
  printCLILine(deadline, '?', F("this help"));
    4d82:	81 2f       	mov	r24, r17
    4d84:	6f e3       	ldi	r22, 0x3F	; 63
    4d86:	43 e2       	ldi	r20, 0x23	; 35
    4d88:	54 e0       	ldi	r21, 0x04	; 4
    4d8a:	0e 94 56 26 	call	0x4cac	; 0x4cac <printCLILine(unsigned char, char, __FlashStringHelper const*)>
#ifdef ENABLE_BOILER_HUB
  printCLILine(deadline, F("C M"), F("Central hub >=M mins on, 0 off"));
    4d8e:	81 2f       	mov	r24, r17
    4d90:	6f e1       	ldi	r22, 0x1F	; 31
    4d92:	74 e0       	ldi	r23, 0x04	; 4
    4d94:	40 e0       	ldi	r20, 0x00	; 0
    4d96:	54 e0       	ldi	r21, 0x04	; 4
    4d98:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)>
#endif
  printCLILine(deadline, F("D N"), F("Dump stats set N"));
    4d9c:	81 2f       	mov	r24, r17
    4d9e:	6c ef       	ldi	r22, 0xFC	; 252
    4da0:	73 e0       	ldi	r23, 0x03	; 3
    4da2:	4b ee       	ldi	r20, 0xEB	; 235
    4da4:	53 e0       	ldi	r21, 0x03	; 3
    4da6:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine(deadline, 'E', F("Exit CLI"));
    4daa:	81 2f       	mov	r24, r17
    4dac:	65 e4       	ldi	r22, 0x45	; 69
    4dae:	42 ee       	ldi	r20, 0xE2	; 226
    4db0:	53 e0       	ldi	r21, 0x03	; 3
    4db2:	0e 94 56 26 	call	0x4cac	; 0x4cac <printCLILine(unsigned char, char, __FlashStringHelper const*)>
  printCLILine(deadline, 'F', F("Frost"));
    4db6:	81 2f       	mov	r24, r17
    4db8:	66 e4       	ldi	r22, 0x46	; 70
    4dba:	4c ed       	ldi	r20, 0xDC	; 220
    4dbc:	53 e0       	ldi	r21, 0x03	; 3
    4dbe:	0e 94 56 26 	call	0x4cac	; 0x4cac <printCLILine(unsigned char, char, __FlashStringHelper const*)>
#if defined(SETTABLE_TARGET_TEMPERATURES) && !defined(TEMP_POT_AVAILABLE)
  printCLILine(deadline, F("F CC"), F("set Frost/setback temp CC"));
#endif
#if defined(USE_MODULE_FHT8VSIMPLE) && defined(LOCAL_TRV)
  printCLILine(deadline, F("H H1 H2"), F("set FHT8V House codes 1&2"));
    4dc2:	81 2f       	mov	r24, r17
    4dc4:	64 ed       	ldi	r22, 0xD4	; 212
    4dc6:	73 e0       	ldi	r23, 0x03	; 3
    4dc8:	4a eb       	ldi	r20, 0xBA	; 186
    4dca:	53 e0       	ldi	r21, 0x03	; 3
    4dcc:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine(deadline, 'H', F("clear House codes"));
    4dd0:	81 2f       	mov	r24, r17
    4dd2:	68 e4       	ldi	r22, 0x48	; 72
    4dd4:	48 ea       	ldi	r20, 0xA8	; 168
    4dd6:	53 e0       	ldi	r21, 0x03	; 3
    4dd8:	0e 94 56 26 	call	0x4cac	; 0x4cac <printCLILine(unsigned char, char, __FlashStringHelper const*)>
#endif
  printCLILine(deadline, 'I', F("set new ID"));
    4ddc:	81 2f       	mov	r24, r17
    4dde:	69 e4       	ldi	r22, 0x49	; 73
    4de0:	4d e9       	ldi	r20, 0x9D	; 157
    4de2:	53 e0       	ldi	r21, 0x03	; 3
    4de4:	0e 94 56 26 	call	0x4cac	; 0x4cac <printCLILine(unsigned char, char, __FlashStringHelper const*)>
  //printCLILine(deadline, 'L', F("Learn to warm every 24h from now, clear if in frost mode, schedule 0"));
  printCLILine(deadline, F("L S"), F("Learn daily warm now, clear if in frost mode, schedule S"));
    4de8:	81 2f       	mov	r24, r17
    4dea:	69 e9       	ldi	r22, 0x99	; 153
    4dec:	73 e0       	ldi	r23, 0x03	; 3
    4dee:	40 e6       	ldi	r20, 0x60	; 96
    4df0:	53 e0       	ldi	r21, 0x03	; 3
    4df2:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)>
  //printCLILine(deadline, F("P HH MM"), F("Program: warm daily starting at HH MM schedule 0"));
  printCLILine(deadline, F("P HH MM S"), F("Program: warm daily starting at HH MM schedule S"));
    4df6:	81 2f       	mov	r24, r17
    4df8:	66 e5       	ldi	r22, 0x56	; 86
    4dfa:	73 e0       	ldi	r23, 0x03	; 3
    4dfc:	45 e2       	ldi	r20, 0x25	; 37
    4dfe:	53 e0       	ldi	r21, 0x03	; 3
    4e00:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine(deadline, F("O PP"), F("min % for valve to be Open"));
    4e04:	81 2f       	mov	r24, r17
    4e06:	60 e2       	ldi	r22, 0x20	; 32
    4e08:	73 e0       	ldi	r23, 0x03	; 3
    4e0a:	45 e0       	ldi	r20, 0x05	; 5
    4e0c:	53 e0       	ldi	r21, 0x03	; 3
    4e0e:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine(deadline, 'O', F("reset Open %"));
    4e12:	81 2f       	mov	r24, r17
    4e14:	6f e4       	ldi	r22, 0x4F	; 79
    4e16:	48 ef       	ldi	r20, 0xF8	; 248
    4e18:	52 e0       	ldi	r21, 0x02	; 2
    4e1a:	0e 94 56 26 	call	0x4cac	; 0x4cac <printCLILine(unsigned char, char, __FlashStringHelper const*)>
#ifdef SUPPORT_BAKE
  printCLILine(deadline, 'Q', F("Quick Heat"));
    4e1e:	81 2f       	mov	r24, r17
    4e20:	61 e5       	ldi	r22, 0x51	; 81
    4e22:	4d ee       	ldi	r20, 0xED	; 237
    4e24:	52 e0       	ldi	r21, 0x02	; 2
    4e26:	0e 94 56 26 	call	0x4cac	; 0x4cac <printCLILine(unsigned char, char, __FlashStringHelper const*)>
#endif
  printCLILine(deadline, F("R N"), F("dump Raw stats set N"));
    4e2a:	81 2f       	mov	r24, r17
    4e2c:	69 ee       	ldi	r22, 0xE9	; 233
    4e2e:	72 e0       	ldi	r23, 0x02	; 2
    4e30:	44 ed       	ldi	r20, 0xD4	; 212
    4e32:	52 e0       	ldi	r21, 0x02	; 2
    4e34:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine(deadline, 'S', F("show Status"));
    4e38:	81 2f       	mov	r24, r17
    4e3a:	63 e5       	ldi	r22, 0x53	; 83
    4e3c:	48 ec       	ldi	r20, 0xC8	; 200
    4e3e:	52 e0       	ldi	r21, 0x02	; 2
    4e40:	0e 94 56 26 	call	0x4cac	; 0x4cac <printCLILine(unsigned char, char, __FlashStringHelper const*)>
  printCLILine(deadline, F("T HH MM"), F("set 24h Time"));
    4e44:	81 2f       	mov	r24, r17
    4e46:	60 ec       	ldi	r22, 0xC0	; 192
    4e48:	72 e0       	ldi	r23, 0x02	; 2
    4e4a:	43 eb       	ldi	r20, 0xB3	; 179
    4e4c:	52 e0       	ldi	r21, 0x02	; 2
    4e4e:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine(deadline, 'W', F("Warm"));
    4e52:	81 2f       	mov	r24, r17
    4e54:	67 e5       	ldi	r22, 0x57	; 87
    4e56:	4e ea       	ldi	r20, 0xAE	; 174
    4e58:	52 e0       	ldi	r21, 0x02	; 2
    4e5a:	0e 94 56 26 	call	0x4cac	; 0x4cac <printCLILine(unsigned char, char, __FlashStringHelper const*)>
  printCLILine(deadline, 'V', F("code/board Version"));
    4e5e:	81 2f       	mov	r24, r17
    4e60:	66 e5       	ldi	r22, 0x56	; 86
    4e62:	4b e9       	ldi	r20, 0x9B	; 155
    4e64:	52 e0       	ldi	r21, 0x02	; 2
    4e66:	0e 94 56 26 	call	0x4cac	; 0x4cac <printCLILine(unsigned char, char, __FlashStringHelper const*)>
#if defined(SETTABLE_TARGET_TEMPERATURES) && !defined(TEMP_POT_AVAILABLE)
  printCLILine(deadline, F("W CC"), F("set Warm temp CC"));
#endif
  printCLILine(deadline, 'X', F("Xmit security level; 0 always, 255 never"));
    4e6a:	81 2f       	mov	r24, r17
    4e6c:	68 e5       	ldi	r22, 0x58	; 88
    4e6e:	42 e7       	ldi	r20, 0x72	; 114
    4e70:	52 e0       	ldi	r21, 0x02	; 2
    4e72:	0e 94 56 26 	call	0x4cac	; 0x4cac <printCLILine(unsigned char, char, __FlashStringHelper const*)>
  printCLILine(deadline, 'Z', F("Zap stats"));
    4e76:	81 2f       	mov	r24, r17
    4e78:	6a e5       	ldi	r22, 0x5A	; 90
    4e7a:	48 e6       	ldi	r20, 0x68	; 104
    4e7c:	52 e0       	ldi	r21, 0x02	; 2
    4e7e:	0e 94 56 26 	call	0x4cac	; 0x4cac <printCLILine(unsigned char, char, __FlashStringHelper const*)>
  Serial.println();
    4e82:	86 ec       	ldi	r24, 0xC6	; 198
    4e84:	94 e0       	ldi	r25, 0x04	; 4
    4e86:	0e 94 ee 3b 	call	0x77dc	; 0x77dc <Print::println()>
  }
    4e8a:	0f 90       	pop	r0
    4e8c:	0f 90       	pop	r0
    4e8e:	0f 90       	pop	r0
    4e90:	0f 90       	pop	r0
    4e92:	cf 91       	pop	r28
    4e94:	df 91       	pop	r29
    4e96:	1f 91       	pop	r17
    4e98:	08 95       	ret

00004e9a <handleLEARN(unsigned char)>:
#ifdef LEARN_BUTTON_AVAILABLE
// Handle learn button(s).
// First/primary button is 0, second is 1, etc.
// In simple mode: if in frost mode clear simple schedule else set repeat for every 24h from now.
// May be called from pushbutton or CLI UI components.
static void handleLEARN(const uint8_t which)
    4e9a:	1f 93       	push	r17
    4e9c:	18 2f       	mov	r17, r24
  {
  // Set simple schedule starting every 24h from a little before now and running for an hour or so.  
  if(inWarmMode()) { setSimpleSchedule(getMinutesSinceMidnightLT(), which); }
    4e9e:	0e 94 4d 04 	call	0x89a	; 0x89a <inWarmMode()>
    4ea2:	88 23       	and	r24, r24
    4ea4:	31 f0       	breq	.+12     	; 0x4eb2 <handleLEARN(unsigned char)+0x18>
    4ea6:	0e 94 45 23 	call	0x468a	; 0x468a <getMinutesSinceMidnightLT()>
    4eaa:	61 2f       	mov	r22, r17
    4eac:	0e 94 6b 24 	call	0x48d6	; 0x48d6 <setSimpleSchedule(unsigned int, unsigned char)>
    4eb0:	03 c0       	rjmp	.+6      	; 0x4eb8 <handleLEARN(unsigned char)+0x1e>
  // Clear simple schedule.
  else { clearSimpleSchedule(which); }
    4eb2:	81 2f       	mov	r24, r17
    4eb4:	0e 94 5f 24 	call	0x48be	; 0x48be <clearSimpleSchedule(unsigned char)>
  }
    4eb8:	1f 91       	pop	r17
    4eba:	08 95       	ret

00004ebc <serialStatusReport()>:

'HC' introduces the optional FHT8V house codes section, if supported and codes are set.
eg 'HC99 99'
HChc1 hc2 are the house codes 1 and 2 for an FHT8V valve.
*/
void serialStatusReport()
    4ebc:	af 92       	push	r10
    4ebe:	bf 92       	push	r11
    4ec0:	cf 92       	push	r12
    4ec2:	df 92       	push	r13
    4ec4:	ef 92       	push	r14
    4ec6:	ff 92       	push	r15
    4ec8:	0f 93       	push	r16
    4eca:	1f 93       	push	r17
    4ecc:	df 93       	push	r29
    4ece:	cf 93       	push	r28
    4ed0:	cd b7       	in	r28, 0x3d	; 61
    4ed2:	de b7       	in	r29, 0x3e	; 62
    4ed4:	c8 58       	subi	r28, 0x88	; 136
    4ed6:	d0 40       	sbci	r29, 0x00	; 0
    4ed8:	0f b6       	in	r0, 0x3f	; 63
    4eda:	f8 94       	cli
    4edc:	de bf       	out	0x3e, r29	; 62
    4ede:	0f be       	out	0x3f, r0	; 63
    4ee0:	cd bf       	out	0x3d, r28	; 61
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    4ee2:	0e 94 57 20 	call	0x40ae	; 0x40ae <powerUpSerialIfDisabled()>
    4ee6:	d8 2e       	mov	r13, r24

  // Aim to overlap CPU usage with characters being TXed for throughput determined primarily by output size and baud.

  // Stats line starts with distingushed marker character.
  // Initial '=' section with common essentials.
  Serial.print(LINE_START_CHAR_STATS);
    4ee8:	86 ec       	ldi	r24, 0xC6	; 198
    4eea:	94 e0       	ldi	r25, 0x04	; 4
    4eec:	6d e3       	ldi	r22, 0x3D	; 61
    4eee:	0e 94 e6 3b 	call	0x77cc	; 0x77cc <Print::print(char)>
#ifdef SUPPORT_BAKE
  Serial.print(inWarmMode() ? (inBakeMode() ? 'B' : 'W') : 'F');
    4ef2:	0e 94 4d 04 	call	0x89a	; 0x89a <inWarmMode()>
    4ef6:	88 23       	and	r24, r24
    4ef8:	11 f4       	brne	.+4      	; 0x4efe <serialStatusReport()+0x42>
    4efa:	66 e4       	ldi	r22, 0x46	; 70
    4efc:	07 c0       	rjmp	.+14     	; 0x4f0c <serialStatusReport()+0x50>
    4efe:	0e 94 57 04 	call	0x8ae	; 0x8ae <inBakeMode()>
    4f02:	88 23       	and	r24, r24
    4f04:	11 f4       	brne	.+4      	; 0x4f0a <serialStatusReport()+0x4e>
    4f06:	67 e5       	ldi	r22, 0x57	; 87
    4f08:	01 c0       	rjmp	.+2      	; 0x4f0c <serialStatusReport()+0x50>
    4f0a:	62 e4       	ldi	r22, 0x42	; 66
    4f0c:	86 ec       	ldi	r24, 0xC6	; 198
    4f0e:	94 e0       	ldi	r25, 0x04	; 4
    4f10:	0e 94 e6 3b 	call	0x77cc	; 0x77cc <Print::print(char)>
    4f14:	60 91 00 02 	lds	r22, 0x0200
#else
  Serial.print(inWarmMode() ? 'W' : 'F');
#endif
  Serial.print(NominalRadValve.get()); Serial.print('%'); // Target valve position.
    4f18:	86 ec       	ldi	r24, 0xC6	; 198
    4f1a:	94 e0       	ldi	r25, 0x04	; 4
    4f1c:	4a e0       	ldi	r20, 0x0A	; 10
    4f1e:	50 e0       	ldi	r21, 0x00	; 0
    4f20:	0e 94 c2 3c 	call	0x7984	; 0x7984 <Print::print(unsigned char, int)>
    4f24:	86 ec       	ldi	r24, 0xC6	; 198
    4f26:	94 e0       	ldi	r25, 0x04	; 4
    4f28:	65 e2       	ldi	r22, 0x25	; 37
    4f2a:	0e 94 e6 3b 	call	0x77cc	; 0x77cc <Print::print(char)>
    virtual int read();

    // Return last value fetched by read(); undefined before first read().
    // Fast.
    // Not thread-safe nor usable within ISRs (Interrupt Service Routines).
    virtual int get() const { return(value); }
    4f2e:	00 91 6f 03 	lds	r16, 0x036F
    4f32:	10 91 70 03 	lds	r17, 0x0370
  const int temp = TemperatureC16.get();
  Serial.print('@'); Serial.print(temp >> 4); Serial.print('C'); // Unrounded whole degrees C.
    4f36:	86 ec       	ldi	r24, 0xC6	; 198
    4f38:	94 e0       	ldi	r25, 0x04	; 4
    4f3a:	60 e4       	ldi	r22, 0x40	; 64
    4f3c:	0e 94 e6 3b 	call	0x77cc	; 0x77cc <Print::print(char)>
    4f40:	b8 01       	movw	r22, r16
    4f42:	34 e0       	ldi	r19, 0x04	; 4
    4f44:	75 95       	asr	r23
    4f46:	67 95       	ror	r22
    4f48:	3a 95       	dec	r19
    4f4a:	e1 f7       	brne	.-8      	; 0x4f44 <serialStatusReport()+0x88>
    4f4c:	86 ec       	ldi	r24, 0xC6	; 198
    4f4e:	94 e0       	ldi	r25, 0x04	; 4
    4f50:	4a e0       	ldi	r20, 0x0A	; 10
    4f52:	50 e0       	ldi	r21, 0x00	; 0
    4f54:	0e 94 14 3d 	call	0x7a28	; 0x7a28 <Print::print(int, int)>
    4f58:	86 ec       	ldi	r24, 0xC6	; 198
    4f5a:	94 e0       	ldi	r25, 0x04	; 4
    4f5c:	63 e4       	ldi	r22, 0x43	; 67
    4f5e:	0e 94 e6 3b 	call	0x77cc	; 0x77cc <Print::print(char)>
      Serial.print(temp & 0xf, HEX); // Show 16ths in hex.
    4f62:	0f 70       	andi	r16, 0x0F	; 15
    4f64:	10 70       	andi	r17, 0x00	; 0
    4f66:	86 ec       	ldi	r24, 0xC6	; 198
    4f68:	94 e0       	ldi	r25, 0x04	; 4
    4f6a:	b8 01       	movw	r22, r16
    4f6c:	40 e1       	ldi	r20, 0x10	; 16
    4f6e:	50 e0       	ldi	r21, 0x00	; 0
    4f70:	0e 94 14 3d 	call	0x7a28	; 0x7a28 <Print::print(int, int)>
    Serial.print(rh);
    }
#endif

  // *T* section: time and schedules.
  const uint_least8_t hh = getHoursLT();
    4f74:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <getHoursLT()>
    4f78:	18 2f       	mov	r17, r24
  const uint_least8_t mm = getMinutesLT();
    4f7a:	0e 94 4e 23 	call	0x469c	; 0x469c <getMinutesLT()>
    4f7e:	08 2f       	mov	r16, r24
  Serial.print(';'); // End previous section.
    4f80:	86 ec       	ldi	r24, 0xC6	; 198
    4f82:	94 e0       	ldi	r25, 0x04	; 4
    4f84:	6b e3       	ldi	r22, 0x3B	; 59
    4f86:	0e 94 e6 3b 	call	0x77cc	; 0x77cc <Print::print(char)>
  Serial.print('T'); Serial.print(hh); Serial_print_space(); Serial.print(mm);
    4f8a:	86 ec       	ldi	r24, 0xC6	; 198
    4f8c:	94 e0       	ldi	r25, 0x04	; 4
    4f8e:	64 e5       	ldi	r22, 0x54	; 84
    4f90:	0e 94 e6 3b 	call	0x77cc	; 0x77cc <Print::print(char)>
    4f94:	86 ec       	ldi	r24, 0xC6	; 198
    4f96:	94 e0       	ldi	r25, 0x04	; 4
    4f98:	61 2f       	mov	r22, r17
    4f9a:	4a e0       	ldi	r20, 0x0A	; 10
    4f9c:	50 e0       	ldi	r21, 0x00	; 0
    4f9e:	0e 94 c2 3c 	call	0x7984	; 0x7984 <Print::print(unsigned char, int)>
    4fa2:	0e 94 49 26 	call	0x4c92	; 0x4c92 <Serial_print_space()>
    4fa6:	86 ec       	ldi	r24, 0xC6	; 198
    4fa8:	94 e0       	ldi	r25, 0x04	; 4
    4faa:	60 2f       	mov	r22, r16
    4fac:	4a e0       	ldi	r20, 0x0A	; 10
    4fae:	50 e0       	ldi	r21, 0x00	; 0
    4fb0:	0e 94 c2 3c 	call	0x7984	; 0x7984 <Print::print(unsigned char, int)>
    4fb4:	cc 24       	eor	r12, r12
  // Show all schedules set.
  for(uint8_t scheduleNumber = 0; scheduleNumber < MAX_SIMPLE_SCHEDULES; ++scheduleNumber)
    {
    Serial_print_space();
    4fb6:	0e 94 49 26 	call	0x4c92	; 0x4c92 <Serial_print_space()>
    uint_least16_t startMinutesSinceMidnightLT = getSimpleScheduleOn(scheduleNumber);
    4fba:	8c 2d       	mov	r24, r12
    4fbc:	0e 94 3f 24 	call	0x487e	; 0x487e <getSimpleScheduleOn(unsigned char)>
    4fc0:	fc 01       	movw	r30, r24
    const bool invalidStartTime = startMinutesSinceMidnightLT >= MINS_PER_DAY;
    const int startH = invalidStartTime ? 255 : (startMinutesSinceMidnightLT / 60);
    4fc2:	85 e0       	ldi	r24, 0x05	; 5
    4fc4:	e0 3a       	cpi	r30, 0xA0	; 160
    4fc6:	f8 07       	cpc	r31, r24
    4fc8:	30 f0       	brcs	.+12     	; 0x4fd6 <serialStatusReport()+0x11a>
    4fca:	00 e0       	ldi	r16, 0x00	; 0
    4fcc:	10 e0       	ldi	r17, 0x00	; 0
    4fce:	2f ef       	ldi	r18, 0xFF	; 255
    4fd0:	e2 2e       	mov	r14, r18
    4fd2:	f1 2c       	mov	r15, r1
    4fd4:	0c c0       	rjmp	.+24     	; 0x4fee <serialStatusReport()+0x132>
    4fd6:	cf 01       	movw	r24, r30
    4fd8:	6c e3       	ldi	r22, 0x3C	; 60
    4fda:	70 e0       	ldi	r23, 0x00	; 0
    4fdc:	0e 94 59 3e 	call	0x7cb2	; 0x7cb2 <__udivmodhi4>
    4fe0:	7b 01       	movw	r14, r22
    const int startM = invalidStartTime ? 0 : (startMinutesSinceMidnightLT % 60);
    4fe2:	cf 01       	movw	r24, r30
    4fe4:	6c e3       	ldi	r22, 0x3C	; 60
    4fe6:	70 e0       	ldi	r23, 0x00	; 0
    4fe8:	0e 94 59 3e 	call	0x7cb2	; 0x7cb2 <__udivmodhi4>
    4fec:	8c 01       	movw	r16, r24
    Serial.print('W'); Serial.print(startH); Serial_print_space(); Serial.print(startM);
    4fee:	86 ec       	ldi	r24, 0xC6	; 198
    4ff0:	94 e0       	ldi	r25, 0x04	; 4
    4ff2:	67 e5       	ldi	r22, 0x57	; 87
    4ff4:	0e 94 e6 3b 	call	0x77cc	; 0x77cc <Print::print(char)>
    4ff8:	86 ec       	ldi	r24, 0xC6	; 198
    4ffa:	94 e0       	ldi	r25, 0x04	; 4
    4ffc:	b7 01       	movw	r22, r14
    4ffe:	4a e0       	ldi	r20, 0x0A	; 10
    5000:	50 e0       	ldi	r21, 0x00	; 0
    5002:	0e 94 14 3d 	call	0x7a28	; 0x7a28 <Print::print(int, int)>
    5006:	0e 94 49 26 	call	0x4c92	; 0x4c92 <Serial_print_space()>
    500a:	86 ec       	ldi	r24, 0xC6	; 198
    500c:	94 e0       	ldi	r25, 0x04	; 4
    500e:	b8 01       	movw	r22, r16
    5010:	4a e0       	ldi	r20, 0x0A	; 10
    5012:	50 e0       	ldi	r21, 0x00	; 0
    5014:	0e 94 14 3d 	call	0x7a28	; 0x7a28 <Print::print(int, int)>
    Serial_print_space();
    5018:	0e 94 49 26 	call	0x4c92	; 0x4c92 <Serial_print_space()>
    uint_least16_t endMinutesSinceMidnightLT = getSimpleScheduleOff(scheduleNumber);
    501c:	8c 2d       	mov	r24, r12
    501e:	0e 94 84 24 	call	0x4908	; 0x4908 <getSimpleScheduleOff(unsigned char)>
    5022:	fc 01       	movw	r30, r24
    const bool invalidEndTime = endMinutesSinceMidnightLT >= MINS_PER_DAY;
    const int endH = invalidEndTime ? 255 : (endMinutesSinceMidnightLT / 60);
    5024:	85 e0       	ldi	r24, 0x05	; 5
    5026:	e0 3a       	cpi	r30, 0xA0	; 160
    5028:	f8 07       	cpc	r31, r24
    502a:	30 f0       	brcs	.+12     	; 0x5038 <serialStatusReport()+0x17c>
    502c:	00 e0       	ldi	r16, 0x00	; 0
    502e:	10 e0       	ldi	r17, 0x00	; 0
    5030:	9f ef       	ldi	r25, 0xFF	; 255
    5032:	e9 2e       	mov	r14, r25
    5034:	f1 2c       	mov	r15, r1
    5036:	0c c0       	rjmp	.+24     	; 0x5050 <serialStatusReport()+0x194>
    5038:	cf 01       	movw	r24, r30
    503a:	6c e3       	ldi	r22, 0x3C	; 60
    503c:	70 e0       	ldi	r23, 0x00	; 0
    503e:	0e 94 59 3e 	call	0x7cb2	; 0x7cb2 <__udivmodhi4>
    5042:	7b 01       	movw	r14, r22
    const int endM = invalidEndTime ? 0 : (endMinutesSinceMidnightLT % 60);
    5044:	cf 01       	movw	r24, r30
    5046:	6c e3       	ldi	r22, 0x3C	; 60
    5048:	70 e0       	ldi	r23, 0x00	; 0
    504a:	0e 94 59 3e 	call	0x7cb2	; 0x7cb2 <__udivmodhi4>
    504e:	8c 01       	movw	r16, r24
    Serial.print('F'); Serial.print(endH); Serial_print_space(); Serial.print(endM);
    5050:	86 ec       	ldi	r24, 0xC6	; 198
    5052:	94 e0       	ldi	r25, 0x04	; 4
    5054:	66 e4       	ldi	r22, 0x46	; 70
    5056:	0e 94 e6 3b 	call	0x77cc	; 0x77cc <Print::print(char)>
    505a:	86 ec       	ldi	r24, 0xC6	; 198
    505c:	94 e0       	ldi	r25, 0x04	; 4
    505e:	b7 01       	movw	r22, r14
    5060:	4a e0       	ldi	r20, 0x0A	; 10
    5062:	50 e0       	ldi	r21, 0x00	; 0
    5064:	0e 94 14 3d 	call	0x7a28	; 0x7a28 <Print::print(int, int)>
    5068:	0e 94 49 26 	call	0x4c92	; 0x4c92 <Serial_print_space()>
    506c:	86 ec       	ldi	r24, 0xC6	; 198
    506e:	94 e0       	ldi	r25, 0x04	; 4
    5070:	b8 01       	movw	r22, r16
    5072:	4a e0       	ldi	r20, 0x0A	; 10
    5074:	50 e0       	ldi	r21, 0x00	; 0
    5076:	0e 94 14 3d 	call	0x7a28	; 0x7a28 <Print::print(int, int)>
  const uint_least8_t hh = getHoursLT();
  const uint_least8_t mm = getMinutesLT();
  Serial.print(';'); // End previous section.
  Serial.print('T'); Serial.print(hh); Serial_print_space(); Serial.print(mm);
  // Show all schedules set.
  for(uint8_t scheduleNumber = 0; scheduleNumber < MAX_SIMPLE_SCHEDULES; ++scheduleNumber)
    507a:	c3 94       	inc	r12
    507c:	82 e0       	ldi	r24, 0x02	; 2
    507e:	c8 16       	cp	r12, r24
    5080:	09 f0       	breq	.+2      	; 0x5084 <serialStatusReport()+0x1c8>
    5082:	99 cf       	rjmp	.-206    	; 0x4fb6 <serialStatusReport()+0xfa>
    const bool invalidEndTime = endMinutesSinceMidnightLT >= MINS_PER_DAY;
    const int endH = invalidEndTime ? 255 : (endMinutesSinceMidnightLT / 60);
    const int endM = invalidEndTime ? 0 : (endMinutesSinceMidnightLT % 60);
    Serial.print('F'); Serial.print(endH); Serial_print_space(); Serial.print(endM);
    }
  if(isAnyScheduleOnWARMNow()) { Serial.print('*'); } // Indicate that at least one schedule is active now.
    5084:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <isAnyScheduleOnWARMNow()>
    5088:	88 23       	and	r24, r24
    508a:	29 f0       	breq	.+10     	; 0x5096 <serialStatusReport()+0x1da>
    508c:	86 ec       	ldi	r24, 0xC6	; 198
    508e:	94 e0       	ldi	r25, 0x04	; 4
    5090:	6a e2       	ldi	r22, 0x2A	; 42
    5092:	0e 94 e6 3b 	call	0x77cc	; 0x77cc <Print::print(char)>

  // *S* section: settable target/threshold temperatures, current target, and eco/smart/occupied flags.
#ifdef SETTABLE_TARGET_TEMPERATURES // Show thresholds and current target since no longer so easily deduced.
  Serial.print(';'); // Terminate previous section.
    5096:	86 ec       	ldi	r24, 0xC6	; 198
    5098:	94 e0       	ldi	r25, 0x04	; 4
    509a:	6b e3       	ldi	r22, 0x3B	; 59
    509c:	0e 94 e6 3b 	call	0x77cc	; 0x77cc <Print::print(char)>
  Serial.print('S'); // Current settable temperature target, and FROST and WARM settings.
    50a0:	86 ec       	ldi	r24, 0xC6	; 198
    50a2:	94 e0       	ldi	r25, 0x04	; 4
    50a4:	63 e5       	ldi	r22, 0x53	; 83
    50a6:	0e 94 e6 3b 	call	0x77cc	; 0x77cc <Print::print(char)>
  Serial.print(NominalRadValve.getTargetTempC());
    50aa:	86 ec       	ldi	r24, 0xC6	; 198
    50ac:	94 e0       	ldi	r25, 0x04	; 4
    50ae:	60 91 01 02 	lds	r22, 0x0201
    50b2:	4a e0       	ldi	r20, 0x0A	; 10
    50b4:	50 e0       	ldi	r21, 0x00	; 0
    50b6:	0e 94 c2 3c 	call	0x7984	; 0x7984 <Print::print(unsigned char, int)>
  Serial_print_space();
    50ba:	0e 94 49 26 	call	0x4c92	; 0x4c92 <Serial_print_space()>
  Serial.print(getFROSTTargetC());
    50be:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <getFROSTTargetC()>
    50c2:	68 2f       	mov	r22, r24
    50c4:	86 ec       	ldi	r24, 0xC6	; 198
    50c6:	94 e0       	ldi	r25, 0x04	; 4
    50c8:	4a e0       	ldi	r20, 0x0A	; 10
    50ca:	50 e0       	ldi	r21, 0x00	; 0
    50cc:	0e 94 c2 3c 	call	0x7984	; 0x7984 <Print::print(unsigned char, int)>
  Serial_print_space();
    50d0:	0e 94 49 26 	call	0x4c92	; 0x4c92 <Serial_print_space()>
  Serial.print(getWARMTargetC());
    50d4:	0e 94 88 04 	call	0x910	; 0x910 <getWARMTargetC()>
    50d8:	68 2f       	mov	r22, r24
    50da:	86 ec       	ldi	r24, 0xC6	; 198
    50dc:	94 e0       	ldi	r25, 0x04	; 4
    50de:	4a e0       	ldi	r20, 0x0A	; 10
    50e0:	50 e0       	ldi	r21, 0x00	; 0
    50e2:	0e 94 c2 3c 	call	0x7984	; 0x7984 <Print::print(unsigned char, int)>
  Serial_print_space();
    50e6:	0e 94 49 26 	call	0x4c92	; 0x4c92 <Serial_print_space()>
#endif

  // *C* section: central hub values.
#if defined(ENABLE_BOILER_HUB)
  // Print optional hub boiler-on-time section if apparently set (non-zero) and thus in hub mode.
  const uint8_t boilerOnMinutes = getMinBoilerOnMinutes();
    50ea:	0e 94 a2 04 	call	0x944	; 0x944 <getMinBoilerOnMinutes()>
    50ee:	18 2f       	mov	r17, r24
  if(boilerOnMinutes != 0)
    50f0:	88 23       	and	r24, r24
    50f2:	89 f0       	breq	.+34     	; 0x5116 <serialStatusReport()+0x25a>
    {
    Serial.print(';'); // Terminate previous section.
    50f4:	86 ec       	ldi	r24, 0xC6	; 198
    50f6:	94 e0       	ldi	r25, 0x04	; 4
    50f8:	6b e3       	ldi	r22, 0x3B	; 59
    50fa:	0e 94 e6 3b 	call	0x77cc	; 0x77cc <Print::print(char)>
    Serial.print('C'); // Indicate central hub mode available.
    50fe:	86 ec       	ldi	r24, 0xC6	; 198
    5100:	94 e0       	ldi	r25, 0x04	; 4
    5102:	63 e4       	ldi	r22, 0x43	; 67
    5104:	0e 94 e6 3b 	call	0x77cc	; 0x77cc <Print::print(char)>
    Serial.print(boilerOnMinutes); // Show min 'on' time, or zero if disabled.
    5108:	86 ec       	ldi	r24, 0xC6	; 198
    510a:	94 e0       	ldi	r25, 0x04	; 4
    510c:	61 2f       	mov	r22, r17
    510e:	4a e0       	ldi	r20, 0x0A	; 10
    5110:	50 e0       	ldi	r21, 0x00	; 0
    5112:	0e 94 c2 3c 	call	0x7984	; 0x7984 <Print::print(unsigned char, int)>
#endif

  // *H* section: house codes for local FHT8V valve and if syncing, iff set.
#if defined(USE_MODULE_FHT8VSIMPLE)
  // Print optional house code section if codes set.
  const uint8_t hc1 = FHT8VGetHC1();
    5116:	0e 94 37 10 	call	0x206e	; 0x206e <FHT8VGetHC1()>
    511a:	18 2f       	mov	r17, r24
  if(hc1 != 255)
    511c:	8f 3f       	cpi	r24, 0xFF	; 255
    511e:	19 f1       	breq	.+70     	; 0x5166 <serialStatusReport()+0x2aa>
    {
    Serial.print(F(";HC"));
    5120:	86 ec       	ldi	r24, 0xC6	; 198
    5122:	94 e0       	ldi	r25, 0x04	; 4
    5124:	6f e3       	ldi	r22, 0x3F	; 63
    5126:	74 e0       	ldi	r23, 0x04	; 4
    5128:	0e 94 c3 3b 	call	0x7786	; 0x7786 <Print::print(__FlashStringHelper const*)>
    Serial.print(hc1);
    512c:	86 ec       	ldi	r24, 0xC6	; 198
    512e:	94 e0       	ldi	r25, 0x04	; 4
    5130:	61 2f       	mov	r22, r17
    5132:	4a e0       	ldi	r20, 0x0A	; 10
    5134:	50 e0       	ldi	r21, 0x00	; 0
    5136:	0e 94 c2 3c 	call	0x7984	; 0x7984 <Print::print(unsigned char, int)>
    Serial_print_space();
    513a:	0e 94 49 26 	call	0x4c92	; 0x4c92 <Serial_print_space()>
    Serial.print(FHT8VGetHC2());
    513e:	0e 94 40 10 	call	0x2080	; 0x2080 <FHT8VGetHC2()>
    5142:	68 2f       	mov	r22, r24
    5144:	86 ec       	ldi	r24, 0xC6	; 198
    5146:	94 e0       	ldi	r25, 0x04	; 4
    5148:	4a e0       	ldi	r20, 0x0A	; 10
    514a:	50 e0       	ldi	r21, 0x00	; 0
    514c:	0e 94 c2 3c 	call	0x7984	; 0x7984 <Print::print(unsigned char, int)>
    if(!isSyncedWithFHT8V())
    5150:	0e 94 63 10 	call	0x20c6	; 0x20c6 <isSyncedWithFHT8V()>
    5154:	88 23       	and	r24, r24
    5156:	39 f4       	brne	.+14     	; 0x5166 <serialStatusReport()+0x2aa>
      {
      Serial_print_space();
    5158:	0e 94 49 26 	call	0x4c92	; 0x4c92 <Serial_print_space()>
      Serial.print('s'); // Indicate syncing with trailing lower-case 's' in field...
    515c:	86 ec       	ldi	r24, 0xC6	; 198
    515e:	94 e0       	ldi	r25, 0x04	; 4
    5160:	63 e7       	ldi	r22, 0x73	; 115
    5162:	0e 94 e6 3b 	call	0x77cc	; 0x77cc <Print::print(char)>
  const uint8_t minValvePcOpen = NominalRadValve.getMinValvePcReallyOpen();
  if(DEFAULT_MIN_VALVE_PC_REALLY_OPEN != minValvePcOpen) { Serial.print(F(";M")); Serial.print(minValvePcOpen); }
#endif

#if 1 && defined(ALLOW_JSON_OUTPUT)
  Serial.print(';'); // Terminate previous section.
    5166:	86 ec       	ldi	r24, 0xC6	; 198
    5168:	94 e0       	ldi	r25, 0x04	; 4
    516a:	6b e3       	ldi	r22, 0x3B	; 59
    516c:	0e 94 e6 3b 	call	0x77cc	; 0x77cc <Print::print(char)>
  char buf[80];
  static SimpleStatsRotation<4> ss1; // Configured for maximum different stats.
    5170:	80 91 30 03 	lds	r24, 0x0330
    5174:	88 23       	and	r24, r24
    5176:	99 f5       	brne	.+102    	; 0x51de <serialStatusReport()+0x322>
    5178:	80 e3       	ldi	r24, 0x30	; 48
    517a:	93 e0       	ldi	r25, 0x03	; 3
    517c:	0e 94 8b 3b 	call	0x7716	; 0x7716 <__cxa_guard_acquire>
    5180:	89 2b       	or	r24, r25
    5182:	69 f1       	breq	.+90     	; 0x51de <serialStatusReport()+0x322>

    // Initialise base with appropriate storage (non-null) and capacity knowledge.
    SimpleStatsRotationBase(DescValueTuple *_stats, const uint8_t _capacity)
      : capacity(_capacity), stats(_stats), nStats(0),
        lastTXed(~0), lastTXedHiPri(~0), // Show the first item on the first pass...
        id(NULL)
    5184:	84 e0       	ldi	r24, 0x04	; 4
    5186:	80 93 38 03 	sts	0x0338, r24
    518a:	21 e4       	ldi	r18, 0x41	; 65
    518c:	33 e0       	ldi	r19, 0x03	; 3
    518e:	30 93 3a 03 	sts	0x033A, r19
    5192:	20 93 39 03 	sts	0x0339, r18
    5196:	10 92 3b 03 	sts	0x033B, r1
    519a:	8f ef       	ldi	r24, 0xFF	; 255
    519c:	80 93 3c 03 	sts	0x033C, r24
    51a0:	80 93 3d 03 	sts	0x033D, r24
    51a4:	10 92 3f 03 	sts	0x033F, r1
    51a8:	10 92 3e 03 	sts	0x033E, r1
    // is displayed immediately after the @/ID field when enabled,
    // and missing count values suggest a lost transmission somewhere.
    // Takes minimal space (1 byte).
    struct WriteCount
      {
      WriteCount() : enabled(0), count(0) { }
    51ac:	80 91 40 03 	lds	r24, 0x0340
    51b0:	80 78       	andi	r24, 0x80	; 128
    51b2:	80 93 40 03 	sts	0x0340, r24
    51b6:	f9 01       	movw	r30, r18
    // The default sensitivity is set to just forbid transmission at default (255) leaf settings.
    // Byt default the stat is normal priority.
    GenericStatsDescriptor(const char * const statKey,
                           const uint8_t statSensitivity = stTXsecOnly,
                           const bool statHighPriority = false)
      : key(statKey), sensitivity(statSensitivity), highPriority(statHighPriority)
    51b8:	9e ef       	ldi	r25, 0xFE	; 254
    51ba:	11 82       	std	Z+1, r1	; 0x01
    51bc:	10 82       	st	Z, r1
    51be:	92 83       	std	Z+2, r25	; 0x02
    51c0:	13 82       	std	Z+3, r1	; 0x03
    void enableCount(bool enable) { c.enabled = enable; }

  protected:
    struct DescValueTuple
      {
      DescValueTuple() : descriptor(NULL), value(0) { }
    51c2:	15 82       	std	Z+5, r1	; 0x05
    51c4:	14 82       	std	Z+4, r1	; 0x04
      int value;

      // Various run-time flags.
      struct Flags
        {
        Flags() : changed(false) { }
    51c6:	86 81       	ldd	r24, Z+6	; 0x06
    51c8:	8e 7f       	andi	r24, 0xFE	; 254
    51ca:	86 83       	std	Z+6, r24	; 0x06
    51cc:	37 96       	adiw	r30, 0x07	; 7
    // Stats to be tracked and sent; mandatory/priority items must be first.
    // A copy is taken of the user-supplied set of descriptions, preserving order.
    DescValueTuple stats[MaxStats];

  public:
    SimpleStatsRotation() : SimpleStatsRotationBase(stats, MaxStats) { }
    51ce:	83 e0       	ldi	r24, 0x03	; 3
    51d0:	ed 35       	cpi	r30, 0x5D	; 93
    51d2:	f8 07       	cpc	r31, r24
    51d4:	91 f7       	brne	.-28     	; 0x51ba <serialStatusReport()+0x2fe>
    51d6:	80 e3       	ldi	r24, 0x30	; 48
    51d8:	93 e0       	ldi	r25, 0x03	; 3
    51da:	0e 94 95 3b 	call	0x772a	; 0x772a <__cxa_guard_release>
//  ss1.put("T|C16", TemperatureC16.get());
//#if defined(HUMIDITY_SENSOR_SUPPORT)
//  ss1.put("H|%", RelHumidity.get());
//#endif
//  ss1.put("L", AmbLight.get()/4);
  ss1.put("B|mV", Supply_mV.get());
    51de:	40 91 16 03 	lds	r20, 0x0316
    51e2:	50 91 17 03 	lds	r21, 0x0317
    51e6:	88 e3       	ldi	r24, 0x38	; 56
    51e8:	93 e0       	ldi	r25, 0x03	; 3
    51ea:	65 e1       	ldi	r22, 0x15	; 21
    51ec:	71 e0       	ldi	r23, 0x01	; 1
    51ee:	0e 94 1a 1a 	call	0x3434	; 0x3434 <SimpleStatsRotationBase::put(char const*, int)>
    51f2:	ce 01       	movw	r24, r28
    51f4:	09 96       	adiw	r24, 0x09	; 9
    51f6:	9c 83       	std	Y+4, r25	; 0x04
    51f8:	8b 83       	std	Y+3, r24	; 0x03
    51fa:	86 e0       	ldi	r24, 0x06	; 6
    51fc:	90 e0       	ldi	r25, 0x00	; 0
    51fe:	9e 83       	std	Y+6, r25	; 0x06
    5200:	8d 83       	std	Y+5, r24	; 0x05
    5202:	18 86       	std	Y+8, r1	; 0x08
    5204:	1f 82       	std	Y+7, r1	; 0x07
    5206:	8f e6       	ldi	r24, 0x6F	; 111
    5208:	91 e0       	ldi	r25, 0x01	; 1
    520a:	9a 83       	std	Y+2, r25	; 0x02
    520c:	89 83       	std	Y+1, r24	; 0x01
    uint8_t writeJSON(uint8_t * const buf, const uint8_t bufSize, const uint8_t sensitivity,
                      const bool maximise = false, const bool suppressClearChanged = true)
      {
      // Create temporary instance for @/ID plus optional count plus remaining stats...
      ArduinoJson::Generator::JsonObject<MaxStats+2> jo;
      return(_writeJSON(jo, buf, bufSize, sensitivity, maximise, suppressClearChanged));
    520e:	89 e3       	ldi	r24, 0x39	; 57
    5210:	a8 2e       	mov	r10, r24
    5212:	b1 2c       	mov	r11, r1
    5214:	ac 0e       	add	r10, r28
    5216:	bd 1e       	adc	r11, r29
    5218:	88 e3       	ldi	r24, 0x38	; 56
    521a:	93 e0       	ldi	r25, 0x03	; 3
    521c:	be 01       	movw	r22, r28
    521e:	6f 5f       	subi	r22, 0xFF	; 255
    5220:	7f 4f       	sbci	r23, 0xFF	; 255
    5222:	a5 01       	movw	r20, r10
    5224:	20 e5       	ldi	r18, 0x50	; 80
    5226:	00 e0       	ldi	r16, 0x00	; 0
    5228:	ee 24       	eor	r14, r14
    522a:	e3 94       	inc	r14
    522c:	cc 24       	eor	r12, r12
    522e:	c3 94       	inc	r12
    5230:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)>
  // If not doing a doubleTX then suppress the change-flag clearing for this send.
  const uint8_t wrote = ss1.writeJSON((uint8_t *)buf, sizeof(buf), 0, true);
  if(0 != wrote) { Serial.print(buf); }
    5234:	88 23       	and	r24, r24
    5236:	29 f0       	breq	.+10     	; 0x5242 <serialStatusReport()+0x386>
    5238:	86 ec       	ldi	r24, 0xC6	; 198
    523a:	94 e0       	ldi	r25, 0x04	; 4
    523c:	b5 01       	movw	r22, r10
    523e:	0e 94 27 3d 	call	0x7a4e	; 0x7a4e <Print::print(char const*)>
#endif

  // Terminate line.
  Serial.println();
    5242:	86 ec       	ldi	r24, 0xC6	; 198
    5244:	94 e0       	ldi	r25, 0x04	; 4
    5246:	0e 94 ee 3b 	call	0x77dc	; 0x77dc <Print::println()>

  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  flushSerialSCTSensitive();
    524a:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <flushSerialSCTSensitive()>

  if(neededWaking) { powerDownSerial(); }
    524e:	dd 20       	and	r13, r13
    5250:	11 f0       	breq	.+4      	; 0x5256 <serialStatusReport()+0x39a>
    5252:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <powerDownSerial()>
  }
    5256:	c8 57       	subi	r28, 0x78	; 120
    5258:	df 4f       	sbci	r29, 0xFF	; 255
    525a:	0f b6       	in	r0, 0x3f	; 63
    525c:	f8 94       	cli
    525e:	de bf       	out	0x3e, r29	; 62
    5260:	0f be       	out	0x3f, r0	; 63
    5262:	cd bf       	out	0x3d, r28	; 61
    5264:	cf 91       	pop	r28
    5266:	df 91       	pop	r29
    5268:	1f 91       	pop	r17
    526a:	0f 91       	pop	r16
    526c:	ff 90       	pop	r15
    526e:	ef 90       	pop	r14
    5270:	df 90       	pop	r13
    5272:	cf 90       	pop	r12
    5274:	bf 90       	pop	r11
    5276:	af 90       	pop	r10
    5278:	08 95       	ret

0000527a <pollCLI(unsigned char)>:
// Used to poll user side for CLI input until specified sub-cycle time.
// Commands should be sent terminated by CR *or* LF; both may prevent 'E' (exit) from working properly.
// A period of less than (say) 500ms will be difficult for direct human response on a raw terminal.
// A period of less than (say) 100ms is not recommended to avoid possibility of overrun on long interactions.
// NOT RENTRANT (eg uses static state for speed and code space).
void pollCLI(const uint8_t maxSCT)
    527a:	bf 92       	push	r11
    527c:	cf 92       	push	r12
    527e:	df 92       	push	r13
    5280:	ef 92       	push	r14
    5282:	ff 92       	push	r15
    5284:	0f 93       	push	r16
    5286:	1f 93       	push	r17
    5288:	df 93       	push	r29
    528a:	cf 93       	push	r28
    528c:	00 d0       	rcall	.+0      	; 0x528e <pollCLI(unsigned char)+0x14>
    528e:	00 d0       	rcall	.+0      	; 0x5290 <pollCLI(unsigned char)+0x16>
    5290:	00 d0       	rcall	.+0      	; 0x5292 <pollCLI(unsigned char)+0x18>
    5292:	cd b7       	in	r28, 0x3d	; 61
    5294:	de b7       	in	r29, 0x3e	; 62
    5296:	d8 2e       	mov	r13, r24
  {
  // Compute safe limit time given granularity of sleep and buffer fill.
  const uint8_t targetMaxSCT = (maxSCT <= MIN_POLL_SCT) ? ((uint8_t) 0) : ((uint8_t) (maxSCT - 1 - MIN_POLL_SCT));
    5298:	22 e0       	ldi	r18, 0x02	; 2
    529a:	28 17       	cp	r18, r24
    529c:	10 f0       	brcs	.+4      	; 0x52a2 <pollCLI(unsigned char)+0x28>
    529e:	00 e0       	ldi	r16, 0x00	; 0
    52a0:	02 c0       	rjmp	.+4      	; 0x52a6 <pollCLI(unsigned char)+0x2c>
    52a2:	08 2f       	mov	r16, r24
    52a4:	03 50       	subi	r16, 0x03	; 3
  if(getSubCycleTime() >= targetMaxSCT) { return; } // Too short to try.
    52a6:	80 91 b2 00 	lds	r24, 0x00B2
    52aa:	80 17       	cp	r24, r16
    52ac:	08 f0       	brcs	.+2      	; 0x52b0 <pollCLI(unsigned char)+0x36>
    52ae:	2d c3       	rjmp	.+1626   	; 0x590a <pollCLI(unsigned char)+0x690>

  const bool neededWaking = powerUpSerialIfDisabled();
    52b0:	0e 94 57 20 	call	0x40ae	; 0x40ae <powerUpSerialIfDisabled()>
    52b4:	b8 2e       	mov	r11, r24
    52b6:	04 c0       	rjmp	.+8      	; 0x52c0 <pollCLI(unsigned char)+0x46>

  // Purge any stray pending input, such as a trailing LF from previous input.
  while(Serial.available() > 0) { Serial.read(); }
    52b8:	86 ec       	ldi	r24, 0xC6	; 198
    52ba:	94 e0       	ldi	r25, 0x04	; 4
    52bc:	0e 94 ad 3a 	call	0x755a	; 0x755a <HardwareSerial::read()>
    52c0:	86 ec       	ldi	r24, 0xC6	; 198
    52c2:	94 e0       	ldi	r25, 0x04	; 4
    52c4:	0e 94 7c 3a 	call	0x74f8	; 0x74f8 <HardwareSerial::available()>
    52c8:	18 16       	cp	r1, r24
    52ca:	19 06       	cpc	r1, r25
    52cc:	ac f3       	brlt	.-22     	; 0x52b8 <pollCLI(unsigned char)+0x3e>

  // Generate and flush prompt character to the user, after a CRLF to reduce ambiguity.
  // Do this AFTER flushing the input so that sending command immediately after prompt should work.
  Serial.println();
    52ce:	86 ec       	ldi	r24, 0xC6	; 198
    52d0:	94 e0       	ldi	r25, 0x04	; 4
    52d2:	0e 94 ee 3b 	call	0x77dc	; 0x77dc <Print::println()>
  Serial.print(CLIPromptChar);
    52d6:	86 ec       	ldi	r24, 0xC6	; 198
    52d8:	94 e0       	ldi	r25, 0x04	; 4
    52da:	6e e3       	ldi	r22, 0x3E	; 62
    52dc:	0e 94 e6 3b 	call	0x77cc	; 0x77cc <Print::print(char)>
  // Idle a short while to try to save energy, waiting for serial TX end and possible RX response start.
  flushSerialSCTSensitive();
    52e0:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <flushSerialSCTSensitive()>
    52e4:	10 e0       	ldi	r17, 0x00	; 0
    // Idle waiting for input, to save power, then/else do something useful with some CPU cycles...
#if CAN_IDLE_30MS
    // Minimise power consumption leaving CPU/UART clock running, if no danger of RX overrun.
    // Don't do this too close to end of target end time to avoid missing it.
    // Note: may get woken on timer0 interrupts as well as RX and watchdog.
    if(sct < targetMaxSCT-2) { idle15AndPoll(); continue; }
    52e6:	e0 2e       	mov	r14, r16
    52e8:	ff 24       	eor	r15, r15
    52ea:	8e ef       	ldi	r24, 0xFE	; 254
    52ec:	9f ef       	ldi	r25, 0xFF	; 255
    52ee:	e8 0e       	add	r14, r24
    52f0:	f9 1e       	adc	r15, r25
#ifdef ENABLE_AVR_IDLE_MODE
// Idle productively polling I/O, etc, across the system while spending time in low-power mode if possible.
// Typically sleeps for nominally up to 30ms; tries to allow ealier wakeup if interrupt is received, etc.
// (Will often be prematurely woken by timer0 with ~16ms interval.)
// True iff watchdog timer expired; false if something else woke the CPU.
static bool inline idle15AndPoll() { const bool wd = idleCPU(WDTO_15MS); pollIO(!wd); return(wd); }
    52f2:	cc 24       	eor	r12, r12
    52f4:	c3 94       	inc	r12
  //Serial.setTimeout(timeoutms); const int n = Serial.readBytesUntil('\r', buf, MAXIMUM_CLI_RESPONSE_CHARS);
  uint8_t n = 0;
  while(n < MAXIMUM_CLI_RESPONSE_CHARS)
    {
    // Read next character if immediately available.
    if(Serial.available() > 0)
    52f6:	86 ec       	ldi	r24, 0xC6	; 198
    52f8:	94 e0       	ldi	r25, 0x04	; 4
    52fa:	0e 94 7c 3a 	call	0x74f8	; 0x74f8 <HardwareSerial::available()>
    52fe:	18 16       	cp	r1, r24
    5300:	19 06       	cpc	r1, r25
    5302:	0c f0       	brlt	.+2      	; 0x5306 <pollCLI(unsigned char)+0x8c>
    5304:	43 c0       	rjmp	.+134    	; 0x538c <pollCLI(unsigned char)+0x112>
      {
      int ic = Serial.read();
    5306:	86 ec       	ldi	r24, 0xC6	; 198
    5308:	94 e0       	ldi	r25, 0x04	; 4
    530a:	0e 94 ad 3a 	call	0x755a	; 0x755a <HardwareSerial::read()>
    530e:	bc 01       	movw	r22, r24
      if(('\r' == ic) || ('\n' == ic)) { break; } // Stop at CR, eg from CRLF, or LF.
    5310:	8d 30       	cpi	r24, 0x0D	; 13
    5312:	91 05       	cpc	r25, r1
    5314:	09 f4       	brne	.+2      	; 0x5318 <pollCLI(unsigned char)+0x9e>
    5316:	50 c0       	rjmp	.+160    	; 0x53b8 <pollCLI(unsigned char)+0x13e>
    5318:	8a 30       	cpi	r24, 0x0A	; 10
    531a:	91 05       	cpc	r25, r1
    531c:	09 f4       	brne	.+2      	; 0x5320 <pollCLI(unsigned char)+0xa6>
    531e:	4c c0       	rjmp	.+152    	; 0x53b8 <pollCLI(unsigned char)+0x13e>
#ifdef CLI_INTERACTIVE_ECHO
      if(('\b' == ic) || (127 == ic))
    5320:	88 30       	cpi	r24, 0x08	; 8
    5322:	91 05       	cpc	r25, r1
    5324:	19 f0       	breq	.+6      	; 0x532c <pollCLI(unsigned char)+0xb2>
    5326:	8f 37       	cpi	r24, 0x7F	; 127
    5328:	91 05       	cpc	r25, r1
    532a:	99 f4       	brne	.+38     	; 0x5352 <pollCLI(unsigned char)+0xd8>
        {
        // Handle backspace or delete as delete...
        if(n > 0) // Ignore unless something to delete...
    532c:	11 23       	and	r17, r17
    532e:	19 f3       	breq	.-58     	; 0x52f6 <pollCLI(unsigned char)+0x7c>
          {
          Serial.print('\b');
    5330:	86 ec       	ldi	r24, 0xC6	; 198
    5332:	94 e0       	ldi	r25, 0x04	; 4
    5334:	68 e0       	ldi	r22, 0x08	; 8
    5336:	0e 94 e6 3b 	call	0x77cc	; 0x77cc <Print::print(char)>
          Serial.print(' ');
    533a:	86 ec       	ldi	r24, 0xC6	; 198
    533c:	94 e0       	ldi	r25, 0x04	; 4
    533e:	60 e2       	ldi	r22, 0x20	; 32
    5340:	0e 94 e6 3b 	call	0x77cc	; 0x77cc <Print::print(char)>
          Serial.print('\b');
    5344:	86 ec       	ldi	r24, 0xC6	; 198
    5346:	94 e0       	ldi	r25, 0x04	; 4
    5348:	68 e0       	ldi	r22, 0x08	; 8
    534a:	0e 94 e6 3b 	call	0x77cc	; 0x77cc <Print::print(char)>
          --n;
    534e:	11 50       	subi	r17, 0x01	; 1
    5350:	2f c0       	rjmp	.+94     	; 0x53b0 <pollCLI(unsigned char)+0x136>
          }
        continue;
        }
#endif
      if((ic < 32) || (ic > 126)) { continue; } // Drop bogus characters.
    5352:	80 97       	sbiw	r24, 0x20	; 32
    5354:	8f 35       	cpi	r24, 0x5F	; 95
    5356:	91 05       	cpc	r25, r1
    5358:	58 f5       	brcc	.+86     	; 0x53b0 <pollCLI(unsigned char)+0x136>
      // Ignore any leading char that is not a letter (or '?'),
      // and force leading (command) char to upper case.
      if(0 == n)
    535a:	11 23       	and	r17, r17
    535c:	61 f4       	brne	.+24     	; 0x5376 <pollCLI(unsigned char)+0xfc>
        {
        ic = toupper(ic);
    535e:	cb 01       	movw	r24, r22
    5360:	0e 94 c3 3e 	call	0x7d86	; 0x7d86 <toupper>
    5364:	bc 01       	movw	r22, r24
        if(('?' != ic) && ((ic < 'A') || (ic > 'Z'))) { continue; }
    5366:	8f 33       	cpi	r24, 0x3F	; 63
    5368:	91 05       	cpc	r25, r1
    536a:	29 f0       	breq	.+10     	; 0x5376 <pollCLI(unsigned char)+0xfc>
    536c:	81 54       	subi	r24, 0x41	; 65
    536e:	90 40       	sbci	r25, 0x00	; 0
    5370:	4a 97       	sbiw	r24, 0x1a	; 26
    5372:	08 f0       	brcs	.+2      	; 0x5376 <pollCLI(unsigned char)+0xfc>
    5374:	c0 cf       	rjmp	.-128    	; 0x52f6 <pollCLI(unsigned char)+0x7c>
        }
      // Store the incoming char.
      buf[n++] = (char) ic;
    5376:	e1 2f       	mov	r30, r17
    5378:	f0 e0       	ldi	r31, 0x00	; 0
    537a:	ea 5d       	subi	r30, 0xDA	; 218
    537c:	fc 4f       	sbci	r31, 0xFC	; 252
    537e:	60 83       	st	Z, r22
    5380:	1f 5f       	subi	r17, 0xFF	; 255
#ifdef CLI_INTERACTIVE_ECHO
      Serial.print((char) ic); // Echo immediately.
    5382:	86 ec       	ldi	r24, 0xC6	; 198
    5384:	94 e0       	ldi	r25, 0x04	; 4
    5386:	0e 94 e6 3b 	call	0x77cc	; 0x77cc <Print::print(char)>
    538a:	12 c0       	rjmp	.+36     	; 0x53b0 <pollCLI(unsigned char)+0x136>
#endif
      continue;
      }
    // Quit WITHOUT PROCESSING THE POSSIBLY-INCOMPLETE INPUT if time limit is hit (or very close).
    const uint8_t sct = getSubCycleTime();
    538c:	80 91 b2 00 	lds	r24, 0x00B2
    if(sct >= targetMaxSCT)
    5390:	80 17       	cp	r24, r16
    5392:	08 f0       	brcs	.+2      	; 0x5396 <pollCLI(unsigned char)+0x11c>
    5394:	a0 c2       	rjmp	.+1344   	; 0x58d6 <pollCLI(unsigned char)+0x65c>
    // Idle waiting for input, to save power, then/else do something useful with some CPU cycles...
#if CAN_IDLE_30MS
    // Minimise power consumption leaving CPU/UART clock running, if no danger of RX overrun.
    // Don't do this too close to end of target end time to avoid missing it.
    // Note: may get woken on timer0 interrupts as well as RX and watchdog.
    if(sct < targetMaxSCT-2) { idle15AndPoll(); continue; }
    5396:	90 e0       	ldi	r25, 0x00	; 0
    5398:	8e 15       	cp	r24, r14
    539a:	9f 05       	cpc	r25, r15
    539c:	3c f4       	brge	.+14     	; 0x53ac <pollCLI(unsigned char)+0x132>
    539e:	80 e0       	ldi	r24, 0x00	; 0
    53a0:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <idleCPU(signed char)>
    53a4:	8c 25       	eor	r24, r12
    53a6:	0e 94 58 06 	call	0xcb0	; 0xcb0 <pollIO(bool)>
    53aa:	02 c0       	rjmp	.+4      	; 0x53b0 <pollCLI(unsigned char)+0x136>
#endif
    burnHundredsOfCyclesProductivelyAndPoll(); // Use time time to poll for I/O, etc.
    53ac:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <burnHundredsOfCyclesProductivelyAndPoll()>
  // Read a line up to a terminating CR, either on its own or as part of CRLF.
  // (Note that command content and timing may be useful to fold into PRNG entropy pool.)
  static char buf[MAXIMUM_CLI_RESPONSE_CHARS+1]; // Note: static state, efficient for small command lines.  Space for terminating '\0'.
  //Serial.setTimeout(timeoutms); const int n = Serial.readBytesUntil('\r', buf, MAXIMUM_CLI_RESPONSE_CHARS);
  uint8_t n = 0;
  while(n < MAXIMUM_CLI_RESPONSE_CHARS)
    53b0:	19 30       	cpi	r17, 0x09	; 9
    53b2:	08 f4       	brcc	.+2      	; 0x53b6 <pollCLI(unsigned char)+0x13c>
    53b4:	a0 cf       	rjmp	.-192    	; 0x52f6 <pollCLI(unsigned char)+0x7c>
    53b6:	03 c0       	rjmp	.+6      	; 0x53be <pollCLI(unsigned char)+0x144>
    if(sct < targetMaxSCT-2) { idle15AndPoll(); continue; }
#endif
    burnHundredsOfCyclesProductivelyAndPoll(); // Use time time to poll for I/O, etc.
    }

  if(n > 0)
    53b8:	11 23       	and	r17, r17
    53ba:	09 f4       	brne	.+2      	; 0x53be <pollCLI(unsigned char)+0x144>
    53bc:	8c c2       	rjmp	.+1304   	; 0x58d6 <pollCLI(unsigned char)+0x65c>
    {
    // Restart the CLI timer on receipt of plausible (ASCII) input (cf noise from UART floating or starting up),
    // Else print a very brief low-CPU-cost help message and give up as efficiently and safely and quickly as possible.
    const char firstChar = buf[0];
    const bool plausibleCommand = ((firstChar >= '?') && (firstChar <= 'z'));
    if(plausibleCommand) { resetCLIActiveTimer(); }
    53be:	80 91 26 03 	lds	r24, 0x0326
    53c2:	8f 53       	subi	r24, 0x3F	; 63
    53c4:	8c 33       	cpi	r24, 0x3C	; 60
    53c6:	08 f5       	brcc	.+66     	; 0x540a <pollCLI(unsigned char)+0x190>
#define CLI_DEFAULT_TIMEOUT_M 2
static volatile uint8_t CLITimeoutM = CLI_DEFAULT_TIMEOUT_M;

// Reset CLI active timer to the full whack before it goes inactive again (ie makes CLI active for a while).
// Thread-safe.
void resetCLIActiveTimer() { CLITimeoutM = CLI_DEFAULT_TIMEOUT_M; }
    53c8:	82 e0       	ldi	r24, 0x02	; 2
    53ca:	80 93 3e 01 	sts	0x013E, r24
      if(neededWaking) { powerDownSerial(); }
      return;
      }

    // Null-terminate the received command line.
    buf[n] = '\0';
    53ce:	e1 2f       	mov	r30, r17
    53d0:	f0 e0       	ldi	r31, 0x00	; 0
    53d2:	ea 5d       	subi	r30, 0xDA	; 218
    53d4:	fc 4f       	sbci	r31, 0xFC	; 252
    53d6:	10 82       	st	Z, r1

    // strupr(buf); // Force to upper-case
#ifdef CLI_INTERACTIVE_ECHO
    Serial.println(); // ACK user's end-of-line.
    53d8:	86 ec       	ldi	r24, 0xC6	; 198
    53da:	94 e0       	ldi	r25, 0x04	; 4
    53dc:	0e 94 ee 3b 	call	0x77dc	; 0x77dc <Print::println()>
    Serial.println(buf); // Echo the line received (asynchronously).
#endif

    // Process the input received, with action based on the first char...
    bool showStatus = true; // Default to showing status.
    switch(buf[0])
    53e0:	80 91 26 03 	lds	r24, 0x0326
    53e4:	99 27       	eor	r25, r25
    53e6:	87 fd       	sbrc	r24, 7
    53e8:	90 95       	com	r25
    53ea:	a9 2f       	mov	r26, r25
    53ec:	b9 2f       	mov	r27, r25
    53ee:	fc 01       	movw	r30, r24
    53f0:	e3 54       	subi	r30, 0x43	; 67
    53f2:	f0 40       	sbci	r31, 0x00	; 0
    53f4:	e8 31       	cpi	r30, 0x18	; 24
    53f6:	f1 05       	cpc	r31, r1
    53f8:	68 f4       	brcc	.+26     	; 0x5414 <pollCLI(unsigned char)+0x19a>
    53fa:	ec 5c       	subi	r30, 0xCC	; 204
    53fc:	ff 4f       	sbci	r31, 0xFF	; 255
    53fe:	ee 0f       	add	r30, r30
    5400:	ff 1f       	adc	r31, r31
    5402:	05 90       	lpm	r0, Z+
    5404:	f4 91       	lpm	r31, Z+
    5406:	e0 2d       	mov	r30, r0
    5408:	09 94       	ijmp
    const char firstChar = buf[0];
    const bool plausibleCommand = ((firstChar >= '?') && (firstChar <= 'z'));
    if(plausibleCommand) { resetCLIActiveTimer(); }
    else
      {
      Serial.println(F("? for CLI help"));
    540a:	86 ec       	ldi	r24, 0xC6	; 198
    540c:	94 e0       	ldi	r25, 0x04	; 4
    540e:	69 e5       	ldi	r22, 0x59	; 89
    5410:	72 e0       	ldi	r23, 0x02	; 2
    5412:	5e c2       	rjmp	.+1212   	; 0x58d0 <pollCLI(unsigned char)+0x656>
    bool showStatus = true; // Default to showing status.
    switch(buf[0])
      {
      // Explicit request for help, or unrecognised first character.
      // Avoid showing status as may already be rather a lot of output.
      default: case '?': { dumpCLIUsage(maxSCT); showStatus = false; break; }
    5414:	8d 2d       	mov	r24, r13
    5416:	0e 94 a6 26 	call	0x4d4c	; 0x4d4c <dumpCLIUsage(unsigned char)>
    541a:	56 c2       	rjmp	.+1196   	; 0x58c8 <pollCLI(unsigned char)+0x64e>
      case 'C':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 3 character sequence makes sense and is safe to tokenise, eg "C 0".
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    541c:	13 30       	cpi	r17, 0x03	; 3
    541e:	08 f4       	brcc	.+2      	; 0x5422 <pollCLI(unsigned char)+0x1a8>
    5420:	71 c2       	rjmp	.+1250   	; 0x5904 <pollCLI(unsigned char)+0x68a>
    5422:	88 e2       	ldi	r24, 0x28	; 40
    5424:	93 e0       	ldi	r25, 0x03	; 3
    5426:	6a e1       	ldi	r22, 0x1A	; 26
    5428:	71 e0       	ldi	r23, 0x01	; 1
    542a:	ae 01       	movw	r20, r28
    542c:	4f 5f       	subi	r20, 0xFF	; 255
    542e:	5f 4f       	sbci	r21, 0xFF	; 255
    5430:	0e 94 c6 03 	call	0x78c	; 0x78c <strtok_r>
    5434:	00 97       	sbiw	r24, 0x00	; 0
    5436:	09 f4       	brne	.+2      	; 0x543a <pollCLI(unsigned char)+0x1c0>
    5438:	65 c2       	rjmp	.+1226   	; 0x5904 <pollCLI(unsigned char)+0x68a>
          {
          const uint8_t m = (uint8_t) atoi(tok1);
    543a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <atoi>
          setMinBoilerOnMinutes(m);
    543e:	0e 94 99 06 	call	0xd32	; 0xd32 <setMinBoilerOnMinutes(unsigned char)>
    5442:	60 c2       	rjmp	.+1216   	; 0x5904 <pollCLI(unsigned char)+0x68a>
#endif

      // Exit/deactivate CLI immediately.
      // This should be followed by JUST CR ('\r') OR LF ('\b')
      // else the second will wake the CLI up again.
      case 'E': { CLITimeoutM = 0; break; }
    5444:	10 92 3e 01 	sts	0x013E, r1
    5448:	5d c2       	rjmp	.+1210   	; 0x5904 <pollCLI(unsigned char)+0x68a>
      case 'R':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 3 character sequence makes sense and is safe to tokenise, eg "R 0".
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    544a:	13 30       	cpi	r17, 0x03	; 3
    544c:	08 f4       	brcc	.+2      	; 0x5450 <pollCLI(unsigned char)+0x1d6>
    544e:	5a c2       	rjmp	.+1204   	; 0x5904 <pollCLI(unsigned char)+0x68a>
    5450:	88 e2       	ldi	r24, 0x28	; 40
    5452:	93 e0       	ldi	r25, 0x03	; 3
    5454:	6a e1       	ldi	r22, 0x1A	; 26
    5456:	71 e0       	ldi	r23, 0x01	; 1
    5458:	ae 01       	movw	r20, r28
    545a:	4f 5f       	subi	r20, 0xFF	; 255
    545c:	5f 4f       	sbci	r21, 0xFF	; 255
    545e:	0e 94 c6 03 	call	0x78c	; 0x78c <strtok_r>
    5462:	00 97       	sbiw	r24, 0x00	; 0
    5464:	09 f4       	brne	.+2      	; 0x5468 <pollCLI(unsigned char)+0x1ee>
    5466:	4e c2       	rjmp	.+1180   	; 0x5904 <pollCLI(unsigned char)+0x68a>
          {
          const uint8_t setN = (uint8_t) atoi(tok1);
    5468:	0e 94 79 03 	call	0x6f2	; 0x6f2 <atoi>
    546c:	08 2f       	mov	r16, r24
    546e:	10 e0       	ldi	r17, 0x00	; 0
          for(uint8_t hh = 0; hh < 24; ++hh)
            { Serial.print(getByHourStat(hh, setN)); Serial_print_space(); }
    5470:	81 2f       	mov	r24, r17
    5472:	60 2f       	mov	r22, r16
    5474:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <getByHourStat(unsigned char, unsigned char)>
    5478:	68 2f       	mov	r22, r24
    547a:	86 ec       	ldi	r24, 0xC6	; 198
    547c:	94 e0       	ldi	r25, 0x04	; 4
    547e:	4a e0       	ldi	r20, 0x0A	; 10
    5480:	50 e0       	ldi	r21, 0x00	; 0
    5482:	0e 94 c2 3c 	call	0x7984	; 0x7984 <Print::print(unsigned char, int)>
    5486:	0e 94 49 26 	call	0x4c92	; 0x4c92 <Serial_print_space()>
        char *tok1;
        // Minimum 3 character sequence makes sense and is safe to tokenise, eg "R 0".
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
          {
          const uint8_t setN = (uint8_t) atoi(tok1);
          for(uint8_t hh = 0; hh < 24; ++hh)
    548a:	1f 5f       	subi	r17, 0xFF	; 255
    548c:	18 31       	cpi	r17, 0x18	; 24
    548e:	81 f7       	brne	.-32     	; 0x5470 <pollCLI(unsigned char)+0x1f6>
    5490:	9f c1       	rjmp	.+830    	; 0x57d0 <pollCLI(unsigned char)+0x556>
      // DEBUG only: "D?" to force partial stats sample and "D!" to force an immediate full stats sample; use with care.
      // Avoid showing status afterwards as may already be rather a lot of output.
      case 'D':
        {
#ifdef DEBUG
        if(n == 2) // Sneaky way of forcing stats samples.
    5492:	12 30       	cpi	r17, 0x02	; 2
    5494:	c9 f4       	brne	.+50     	; 0x54c8 <pollCLI(unsigned char)+0x24e>
          {
          if('?' == buf[1]) { sampleStats(false); Serial.println(F("Part sample")); }
    5496:	80 91 27 03 	lds	r24, 0x0327
    549a:	8f 33       	cpi	r24, 0x3F	; 63
    549c:	41 f4       	brne	.+16     	; 0x54ae <pollCLI(unsigned char)+0x234>
    549e:	80 e0       	ldi	r24, 0x00	; 0
    54a0:	0e 94 54 09 	call	0x12a8	; 0x12a8 <sampleStats(bool)>
    54a4:	86 ec       	ldi	r24, 0xC6	; 198
    54a6:	94 e0       	ldi	r25, 0x04	; 4
    54a8:	6d e4       	ldi	r22, 0x4D	; 77
    54aa:	72 e0       	ldi	r23, 0x02	; 2
    54ac:	0a c0       	rjmp	.+20     	; 0x54c2 <pollCLI(unsigned char)+0x248>
          else if('!' == buf[1]) { sampleStats(true); Serial.println(F("Full sample")); }
    54ae:	81 32       	cpi	r24, 0x21	; 33
    54b0:	09 f0       	breq	.+2      	; 0x54b4 <pollCLI(unsigned char)+0x23a>
    54b2:	28 c2       	rjmp	.+1104   	; 0x5904 <pollCLI(unsigned char)+0x68a>
    54b4:	81 e0       	ldi	r24, 0x01	; 1
    54b6:	0e 94 54 09 	call	0x12a8	; 0x12a8 <sampleStats(bool)>
    54ba:	86 ec       	ldi	r24, 0xC6	; 198
    54bc:	94 e0       	ldi	r25, 0x04	; 4
    54be:	61 e4       	ldi	r22, 0x41	; 65
    54c0:	72 e0       	ldi	r23, 0x02	; 2
    54c2:	0e 94 0e 3c 	call	0x781c	; 0x781c <Print::println(__FlashStringHelper const*)>
    54c6:	1e c2       	rjmp	.+1084   	; 0x5904 <pollCLI(unsigned char)+0x68a>
          }
#endif
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 3 character sequence makes sense and is safe to tokenise, eg "D 0".
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    54c8:	13 30       	cpi	r17, 0x03	; 3
    54ca:	08 f4       	brcc	.+2      	; 0x54ce <pollCLI(unsigned char)+0x254>
    54cc:	fd c1       	rjmp	.+1018   	; 0x58c8 <pollCLI(unsigned char)+0x64e>
    54ce:	88 e2       	ldi	r24, 0x28	; 40
    54d0:	93 e0       	ldi	r25, 0x03	; 3
    54d2:	6a e1       	ldi	r22, 0x1A	; 26
    54d4:	71 e0       	ldi	r23, 0x01	; 1
    54d6:	ae 01       	movw	r20, r28
    54d8:	4f 5f       	subi	r20, 0xFF	; 255
    54da:	5f 4f       	sbci	r21, 0xFF	; 255
    54dc:	0e 94 c6 03 	call	0x78c	; 0x78c <strtok_r>
    54e0:	00 97       	sbiw	r24, 0x00	; 0
    54e2:	09 f4       	brne	.+2      	; 0x54e6 <pollCLI(unsigned char)+0x26c>
    54e4:	f1 c1       	rjmp	.+994    	; 0x58c8 <pollCLI(unsigned char)+0x64e>
          {
          const uint8_t setN = (uint8_t) atoi(tok1);
    54e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <atoi>
    54ea:	18 2f       	mov	r17, r24
          const uint8_t thisHH = getHoursLT();
    54ec:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <getHoursLT()>
    54f0:	f8 2e       	mov	r15, r24
//          const uint8_t lastHH = (thisHH > 0) ? (thisHH-1) : 23;
          // Print label.
          switch(setN)
    54f2:	16 30       	cpi	r17, 0x06	; 6
    54f4:	28 f4       	brcc	.+10     	; 0x5500 <pollCLI(unsigned char)+0x286>
    54f6:	14 30       	cpi	r17, 0x04	; 4
    54f8:	b8 f4       	brcc	.+46     	; 0x5528 <pollCLI(unsigned char)+0x2ae>
    54fa:	12 30       	cpi	r17, 0x02	; 2
    54fc:	60 f0       	brcs	.+24     	; 0x5516 <pollCLI(unsigned char)+0x29c>
    54fe:	0f c0       	rjmp	.+30     	; 0x551e <pollCLI(unsigned char)+0x2a4>
    5500:	1a 30       	cpi	r17, 0x0A	; 10
    5502:	18 f4       	brcc	.+6      	; 0x550a <pollCLI(unsigned char)+0x290>
    5504:	18 30       	cpi	r17, 0x08	; 8
    5506:	e0 f4       	brcc	.+56     	; 0x5540 <pollCLI(unsigned char)+0x2c6>
    5508:	14 c0       	rjmp	.+40     	; 0x5532 <pollCLI(unsigned char)+0x2b8>
    550a:	1a 30       	cpi	r17, 0x0A	; 10
    550c:	e9 f0       	breq	.+58     	; 0x5548 <pollCLI(unsigned char)+0x2ce>
            {
            default: { Serial.print('?'); break; }
    550e:	86 ec       	ldi	r24, 0xC6	; 198
    5510:	94 e0       	ldi	r25, 0x04	; 4
    5512:	6f e3       	ldi	r22, 0x3F	; 63
    5514:	1c c0       	rjmp	.+56     	; 0x554e <pollCLI(unsigned char)+0x2d4>
            case EE_STATS_SET_TEMP_BY_HOUR: case EE_STATS_SET_TEMP_BY_HOUR_SMOOTHED: { Serial.print('C'); break; }
    5516:	86 ec       	ldi	r24, 0xC6	; 198
    5518:	94 e0       	ldi	r25, 0x04	; 4
    551a:	63 e4       	ldi	r22, 0x43	; 67
    551c:	18 c0       	rjmp	.+48     	; 0x554e <pollCLI(unsigned char)+0x2d4>
            case EE_STATS_SET_AMBLIGHT_BY_HOUR: case EE_STATS_SET_AMBLIGHT_BY_HOUR_SMOOTHED: { Serial.print(F("ambl")); break; }
    551e:	86 ec       	ldi	r24, 0xC6	; 198
    5520:	94 e0       	ldi	r25, 0x04	; 4
    5522:	6c e3       	ldi	r22, 0x3C	; 60
    5524:	72 e0       	ldi	r23, 0x02	; 2
    5526:	09 c0       	rjmp	.+18     	; 0x553a <pollCLI(unsigned char)+0x2c0>
            case EE_STATS_SET_OCCPC_BY_HOUR: case EE_STATS_SET_OCCPC_BY_HOUR_SMOOTHED: { Serial.print(F("occ%")); break; }
    5528:	86 ec       	ldi	r24, 0xC6	; 198
    552a:	94 e0       	ldi	r25, 0x04	; 4
    552c:	67 e3       	ldi	r22, 0x37	; 55
    552e:	72 e0       	ldi	r23, 0x02	; 2
    5530:	04 c0       	rjmp	.+8      	; 0x553a <pollCLI(unsigned char)+0x2c0>
            case EE_STATS_SET_RHPC_BY_HOUR: case EE_STATS_SET_RHPC_BY_HOUR_SMOOTHED: { Serial.print(F("RH%")); break; }
    5532:	86 ec       	ldi	r24, 0xC6	; 198
    5534:	94 e0       	ldi	r25, 0x04	; 4
    5536:	63 e3       	ldi	r22, 0x33	; 51
    5538:	72 e0       	ldi	r23, 0x02	; 2
    553a:	0e 94 c3 3b 	call	0x7786	; 0x7786 <Print::print(__FlashStringHelper const*)>
    553e:	09 c0       	rjmp	.+18     	; 0x5552 <pollCLI(unsigned char)+0x2d8>
            case EE_STATS_SET_USER1_BY_HOUR: case EE_STATS_SET_USER1_BY_HOUR_SMOOTHED: { Serial.print('u'); break; }
    5540:	86 ec       	ldi	r24, 0xC6	; 198
    5542:	94 e0       	ldi	r25, 0x04	; 4
    5544:	65 e7       	ldi	r22, 0x75	; 117
    5546:	03 c0       	rjmp	.+6      	; 0x554e <pollCLI(unsigned char)+0x2d4>
            case EE_STATS_SET_WARMMODE_BY_HOUR_OF_WK: { Serial.print('W'); break; }
    5548:	86 ec       	ldi	r24, 0xC6	; 198
    554a:	94 e0       	ldi	r25, 0x04	; 4
    554c:	67 e5       	ldi	r22, 0x57	; 87
    554e:	0e 94 e6 3b 	call	0x77cc	; 0x77cc <Print::print(char)>
            }
          Serial_print_space();
    5552:	0e 94 49 26 	call	0x4c92	; 0x4c92 <Serial_print_space()>
          if(setN & 1) { Serial.print(F("smoothed")); } else { Serial.print(F("last")); }
    5556:	10 ff       	sbrs	r17, 0
    5558:	05 c0       	rjmp	.+10     	; 0x5564 <pollCLI(unsigned char)+0x2ea>
    555a:	86 ec       	ldi	r24, 0xC6	; 198
    555c:	94 e0       	ldi	r25, 0x04	; 4
    555e:	6a e2       	ldi	r22, 0x2A	; 42
    5560:	72 e0       	ldi	r23, 0x02	; 2
    5562:	04 c0       	rjmp	.+8      	; 0x556c <pollCLI(unsigned char)+0x2f2>
    5564:	86 ec       	ldi	r24, 0xC6	; 198
    5566:	94 e0       	ldi	r25, 0x04	; 4
    5568:	65 e2       	ldi	r22, 0x25	; 37
    556a:	72 e0       	ldi	r23, 0x02	; 2
    556c:	0e 94 c3 3b 	call	0x7786	; 0x7786 <Print::print(__FlashStringHelper const*)>
          Serial_print_space();
    5570:	0e 94 49 26 	call	0x4c92	; 0x4c92 <Serial_print_space()>
    5574:	00 e0       	ldi	r16, 0x00	; 0
          // Now print values.
          for(uint8_t hh = 0; hh < 24; ++hh)
            {
            const uint8_t statRaw = getByHourStat(hh, setN);
    5576:	80 2f       	mov	r24, r16
    5578:	61 2f       	mov	r22, r17
    557a:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <getByHourStat(unsigned char, unsigned char)>
    557e:	68 2f       	mov	r22, r24
            // For unset stat show '-'...
            if(STATS_UNSET_BYTE == statRaw) { Serial.print('-'); }
    5580:	8f 3f       	cpi	r24, 0xFF	; 255
    5582:	31 f4       	brne	.+12     	; 0x5590 <pollCLI(unsigned char)+0x316>
    5584:	86 ec       	ldi	r24, 0xC6	; 198
    5586:	94 e0       	ldi	r25, 0x04	; 4
    5588:	6d e2       	ldi	r22, 0x2D	; 45
    558a:	0e 94 e6 3b 	call	0x77cc	; 0x77cc <Print::print(char)>
    558e:	20 c0       	rjmp	.+64     	; 0x55d0 <pollCLI(unsigned char)+0x356>
            // ...else print more human-friendly version of stat.
            else switch(setN)
    5590:	12 30       	cpi	r17, 0x02	; 2
    5592:	38 f0       	brcs	.+14     	; 0x55a2 <pollCLI(unsigned char)+0x328>
    5594:	1a 30       	cpi	r17, 0x0A	; 10
    5596:	b1 f0       	breq	.+44     	; 0x55c4 <pollCLI(unsigned char)+0x34a>
              {
              default: { Serial.print(statRaw); break; } // Generic decimal stats.
    5598:	86 ec       	ldi	r24, 0xC6	; 198
    559a:	94 e0       	ldi	r25, 0x04	; 4
    559c:	4a e0       	ldi	r20, 0x0A	; 10
    559e:	50 e0       	ldi	r21, 0x00	; 0
    55a0:	15 c0       	rjmp	.+42     	; 0x55cc <pollCLI(unsigned char)+0x352>
 
              // Special formatting cases.
              case EE_STATS_SET_TEMP_BY_HOUR: case EE_STATS_SET_TEMP_BY_HOUR_SMOOTHED:
                // Uncompanded temperature, rounded.
                { Serial.print((expandTempC16(statRaw)+8) >> 4); break; }
    55a2:	0e 94 20 06 	call	0xc40	; 0xc40 <expandTempC16(unsigned char)>
    55a6:	bc 01       	movw	r22, r24
    55a8:	68 5f       	subi	r22, 0xF8	; 248
    55aa:	7f 4f       	sbci	r23, 0xFF	; 255
    55ac:	e4 e0       	ldi	r30, 0x04	; 4
    55ae:	75 95       	asr	r23
    55b0:	67 95       	ror	r22
    55b2:	ea 95       	dec	r30
    55b4:	e1 f7       	brne	.-8      	; 0x55ae <pollCLI(unsigned char)+0x334>
    55b6:	86 ec       	ldi	r24, 0xC6	; 198
    55b8:	94 e0       	ldi	r25, 0x04	; 4
    55ba:	4a e0       	ldi	r20, 0x0A	; 10
    55bc:	50 e0       	ldi	r21, 0x00	; 0
    55be:	0e 94 14 3d 	call	0x7a28	; 0x7a28 <Print::print(int, int)>
    55c2:	06 c0       	rjmp	.+12     	; 0x55d0 <pollCLI(unsigned char)+0x356>
              case EE_STATS_SET_WARMMODE_BY_HOUR_OF_WK:
                // Warm mode usage bitmap by hour over week.
                { Serial.print(statRaw, HEX); break; }
    55c4:	86 ec       	ldi	r24, 0xC6	; 198
    55c6:	94 e0       	ldi	r25, 0x04	; 4
    55c8:	40 e1       	ldi	r20, 0x10	; 16
    55ca:	50 e0       	ldi	r21, 0x00	; 0
    55cc:	0e 94 c2 3c 	call	0x7984	; 0x7984 <Print::print(unsigned char, int)>
              }
            if(hh == thisHH) { Serial.print('<'); } // Highlight current stat in this set.
    55d0:	0f 15       	cp	r16, r15
    55d2:	29 f4       	brne	.+10     	; 0x55de <pollCLI(unsigned char)+0x364>
    55d4:	86 ec       	ldi	r24, 0xC6	; 198
    55d6:	94 e0       	ldi	r25, 0x04	; 4
    55d8:	6c e3       	ldi	r22, 0x3C	; 60
    55da:	0e 94 e6 3b 	call	0x77cc	; 0x77cc <Print::print(char)>
            Serial_print_space();
    55de:	0e 94 49 26 	call	0x4c92	; 0x4c92 <Serial_print_space()>
            }
          Serial_print_space();
          if(setN & 1) { Serial.print(F("smoothed")); } else { Serial.print(F("last")); }
          Serial_print_space();
          // Now print values.
          for(uint8_t hh = 0; hh < 24; ++hh)
    55e2:	0f 5f       	subi	r16, 0xFF	; 255
    55e4:	08 31       	cpi	r16, 0x18	; 24
    55e6:	39 f6       	brne	.-114    	; 0x5576 <pollCLI(unsigned char)+0x2fc>
                { Serial.print(statRaw, HEX); break; }
              }
            if(hh == thisHH) { Serial.print('<'); } // Highlight current stat in this set.
            Serial_print_space();
            }
          Serial.println();
    55e8:	86 ec       	ldi	r24, 0xC6	; 198
    55ea:	94 e0       	ldi	r25, 0x04	; 4
    55ec:	0e 94 ee 3b 	call	0x77dc	; 0x77dc <Print::println()>
    55f0:	6b c1       	rjmp	.+726    	; 0x58c8 <pollCLI(unsigned char)+0x64e>
      case 'F':
        {
#if defined(SETTABLE_TARGET_TEMPERATURES)
        char *last; // Used by strtok_r().
        char *tok1;
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    55f2:	13 30       	cpi	r17, 0x03	; 3
    55f4:	08 f4       	brcc	.+2      	; 0x55f8 <pollCLI(unsigned char)+0x37e>
    55f6:	7a c1       	rjmp	.+756    	; 0x58ec <pollCLI(unsigned char)+0x672>
    55f8:	88 e2       	ldi	r24, 0x28	; 40
    55fa:	93 e0       	ldi	r25, 0x03	; 3
    55fc:	6a e1       	ldi	r22, 0x1A	; 26
    55fe:	71 e0       	ldi	r23, 0x01	; 1
    5600:	ae 01       	movw	r20, r28
    5602:	4f 5f       	subi	r20, 0xFF	; 255
    5604:	5f 4f       	sbci	r21, 0xFF	; 255
    5606:	0e 94 c6 03 	call	0x78c	; 0x78c <strtok_r>
    560a:	00 97       	sbiw	r24, 0x00	; 0
    560c:	09 f4       	brne	.+2      	; 0x5610 <pollCLI(unsigned char)+0x396>
    560e:	6e c1       	rjmp	.+732    	; 0x58ec <pollCLI(unsigned char)+0x672>
          {
          const uint8_t tempC = (uint8_t) atoi(tok1);
    5610:	0e 94 79 03 	call	0x6f2	; 0x6f2 <atoi>
          if(!setFROSTTargetC(tempC)) { InvalidIgnored(); }
    5614:	0e 94 a0 06 	call	0xd40	; 0xd40 <setFROSTTargetC(unsigned char)>
    5618:	08 c1       	rjmp	.+528    	; 0x582a <pollCLI(unsigned char)+0x5b0>
      case 'H':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 5 character sequence makes sense and is safe to tokenise, eg "H 1 2".
        if((n >= 5) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    561a:	15 30       	cpi	r17, 0x05	; 5
    561c:	08 f4       	brcc	.+2      	; 0x5620 <pollCLI(unsigned char)+0x3a6>
    561e:	6a c1       	rjmp	.+724    	; 0x58f4 <pollCLI(unsigned char)+0x67a>
    5620:	88 e2       	ldi	r24, 0x28	; 40
    5622:	93 e0       	ldi	r25, 0x03	; 3
    5624:	6a e1       	ldi	r22, 0x1A	; 26
    5626:	71 e0       	ldi	r23, 0x01	; 1
    5628:	6e 01       	movw	r12, r28
    562a:	08 94       	sec
    562c:	c1 1c       	adc	r12, r1
    562e:	d1 1c       	adc	r13, r1
    5630:	a6 01       	movw	r20, r12
    5632:	0e 94 c6 03 	call	0x78c	; 0x78c <strtok_r>
    5636:	7c 01       	movw	r14, r24
    5638:	00 97       	sbiw	r24, 0x00	; 0
    563a:	09 f4       	brne	.+2      	; 0x563e <pollCLI(unsigned char)+0x3c4>
    563c:	5b c1       	rjmp	.+694    	; 0x58f4 <pollCLI(unsigned char)+0x67a>
          {
          char *tok2 = strtok_r(NULL, " ", &last);
    563e:	80 e0       	ldi	r24, 0x00	; 0
    5640:	90 e0       	ldi	r25, 0x00	; 0
    5642:	6a e1       	ldi	r22, 0x1A	; 26
    5644:	71 e0       	ldi	r23, 0x01	; 1
    5646:	a6 01       	movw	r20, r12
    5648:	0e 94 c6 03 	call	0x78c	; 0x78c <strtok_r>
    564c:	8c 01       	movw	r16, r24
          if(NULL != tok2)
    564e:	00 97       	sbiw	r24, 0x00	; 0
    5650:	09 f4       	brne	.+2      	; 0x5654 <pollCLI(unsigned char)+0x3da>
    5652:	58 c1       	rjmp	.+688    	; 0x5904 <pollCLI(unsigned char)+0x68a>
            {
            const int hc1 = atoi(tok1);
    5654:	c7 01       	movw	r24, r14
    5656:	0e 94 79 03 	call	0x6f2	; 0x6f2 <atoi>
    565a:	7c 01       	movw	r14, r24
            const int hc2 = atoi(tok2);
    565c:	c8 01       	movw	r24, r16
    565e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <atoi>
    5662:	8c 01       	movw	r16, r24
            if((hc1 < 0) || (hc1 > 99) || (hc2 < 0) || (hc2 > 99)) { InvalidIgnored(); }
    5664:	94 e6       	ldi	r25, 0x64	; 100
    5666:	e9 16       	cp	r14, r25
    5668:	f1 04       	cpc	r15, r1
    566a:	08 f0       	brcs	.+2      	; 0x566e <pollCLI(unsigned char)+0x3f4>
    566c:	e1 c0       	rjmp	.+450    	; 0x5830 <pollCLI(unsigned char)+0x5b6>
    566e:	17 fd       	sbrc	r17, 7
    5670:	df c0       	rjmp	.+446    	; 0x5830 <pollCLI(unsigned char)+0x5b6>
    5672:	04 36       	cpi	r16, 0x64	; 100
    5674:	11 05       	cpc	r17, r1
    5676:	0c f0       	brlt	.+2      	; 0x567a <pollCLI(unsigned char)+0x400>
    5678:	db c0       	rjmp	.+438    	; 0x5830 <pollCLI(unsigned char)+0x5b6>
            else
              {
              FHT8VSetHC1(hc1);
    567a:	8e 2d       	mov	r24, r14
    567c:	0e 94 bc 13 	call	0x2778	; 0x2778 <FHT8VSetHC1(unsigned char)>
              FHT8VSetHC2(hc2);
    5680:	80 2f       	mov	r24, r16
    5682:	0e 94 b6 13 	call	0x276c	; 0x276c <FHT8VSetHC2(unsigned char)>
    5686:	02 c0       	rjmp	.+4      	; 0x568c <pollCLI(unsigned char)+0x412>
              }
            }
          }
        else if(n < 2) // Just 'H', possibly with trailing whitespace.
          {
          FHT8VClearHC();
    5688:	0e 94 c2 13 	call	0x2784	; 0x2784 <FHT8VClearHC()>
          FHT8VSyncAndTXReset(); // Force into unsynchronized state.
    568c:	0e 94 6f 10 	call	0x20de	; 0x20de <FHT8VSyncAndTXReset()>
    5690:	39 c1       	rjmp	.+626    	; 0x5904 <pollCLI(unsigned char)+0x68a>

      // Set new random ID.
      // Should possibly restart afterwards.
      case 'I':
        {
        ensureIDCreated(true); // Force ID.
    5692:	81 e0       	ldi	r24, 0x01	; 1
    5694:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <ensureIDCreated(bool)>
    5698:	35 c1       	rjmp	.+618    	; 0x5904 <pollCLI(unsigned char)+0x68a>
        int s = 0;
//#if MAX_SIMPLE_SCHEDULES > 1
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 3 character sequence makes sense and is safe to tokenise, eg "L 0".
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    569a:	13 30       	cpi	r17, 0x03	; 3
    569c:	08 f4       	brcc	.+2      	; 0x56a0 <pollCLI(unsigned char)+0x426>
    569e:	2d c1       	rjmp	.+602    	; 0x58fa <pollCLI(unsigned char)+0x680>
    56a0:	88 e2       	ldi	r24, 0x28	; 40
    56a2:	93 e0       	ldi	r25, 0x03	; 3
    56a4:	6a e1       	ldi	r22, 0x1A	; 26
    56a6:	71 e0       	ldi	r23, 0x01	; 1
    56a8:	ae 01       	movw	r20, r28
    56aa:	4f 5f       	subi	r20, 0xFF	; 255
    56ac:	5f 4f       	sbci	r21, 0xFF	; 255
    56ae:	0e 94 c6 03 	call	0x78c	; 0x78c <strtok_r>
    56b2:	00 97       	sbiw	r24, 0x00	; 0
    56b4:	09 f4       	brne	.+2      	; 0x56b8 <pollCLI(unsigned char)+0x43e>
    56b6:	21 c1       	rjmp	.+578    	; 0x58fa <pollCLI(unsigned char)+0x680>
          {
          s = atoi(tok1);
    56b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <atoi>
          }
//#endif
        handleLEARN((uint8_t) s); break;
    56bc:	0e 94 4d 27 	call	0x4e9a	; 0x4e9a <handleLEARN(unsigned char)>
    56c0:	21 c1       	rjmp	.+578    	; 0x5904 <pollCLI(unsigned char)+0x68a>
      case 'O':
        {
        uint8_t minPcOpen = 0; // Will clear override and use default threshold.
        char *last; // Used by strtok_r().
        char *tok1;
        if((n > 1) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    56c2:	12 30       	cpi	r17, 0x02	; 2
    56c4:	08 f4       	brcc	.+2      	; 0x56c8 <pollCLI(unsigned char)+0x44e>
    56c6:	1c c1       	rjmp	.+568    	; 0x5900 <pollCLI(unsigned char)+0x686>
    56c8:	88 e2       	ldi	r24, 0x28	; 40
    56ca:	93 e0       	ldi	r25, 0x03	; 3
    56cc:	6a e1       	ldi	r22, 0x1A	; 26
    56ce:	71 e0       	ldi	r23, 0x01	; 1
    56d0:	ae 01       	movw	r20, r28
    56d2:	4f 5f       	subi	r20, 0xFF	; 255
    56d4:	5f 4f       	sbci	r21, 0xFF	; 255
    56d6:	0e 94 c6 03 	call	0x78c	; 0x78c <strtok_r>
    56da:	00 97       	sbiw	r24, 0x00	; 0
    56dc:	09 f4       	brne	.+2      	; 0x56e0 <pollCLI(unsigned char)+0x466>
    56de:	10 c1       	rjmp	.+544    	; 0x5900 <pollCLI(unsigned char)+0x686>
          { minPcOpen = (uint8_t) atoi(tok1); }
    56e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <atoi>
        NominalRadValve.setMinValvePcReallyOpen(minPcOpen);
    56e4:	0e 94 c2 08 	call	0x1184	; 0x1184 <ModelledRadValve::setMinValvePcReallyOpen(unsigned char)>
    56e8:	0d c1       	rjmp	.+538    	; 0x5904 <pollCLI(unsigned char)+0x68a>
      case 'P':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 5 character sequence makes sense and is safe to tokenise, eg "P 1 2".
        if((n >= 5) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    56ea:	15 30       	cpi	r17, 0x05	; 5
    56ec:	08 f4       	brcc	.+2      	; 0x56f0 <pollCLI(unsigned char)+0x476>
    56ee:	0a c1       	rjmp	.+532    	; 0x5904 <pollCLI(unsigned char)+0x68a>
    56f0:	88 e2       	ldi	r24, 0x28	; 40
    56f2:	93 e0       	ldi	r25, 0x03	; 3
    56f4:	6a e1       	ldi	r22, 0x1A	; 26
    56f6:	71 e0       	ldi	r23, 0x01	; 1
    56f8:	6e 01       	movw	r12, r28
    56fa:	08 94       	sec
    56fc:	c1 1c       	adc	r12, r1
    56fe:	d1 1c       	adc	r13, r1
    5700:	a6 01       	movw	r20, r12
    5702:	0e 94 c6 03 	call	0x78c	; 0x78c <strtok_r>
    5706:	7c 01       	movw	r14, r24
    5708:	00 97       	sbiw	r24, 0x00	; 0
    570a:	09 f4       	brne	.+2      	; 0x570e <pollCLI(unsigned char)+0x494>
    570c:	fb c0       	rjmp	.+502    	; 0x5904 <pollCLI(unsigned char)+0x68a>
          {
          char *tok2 = strtok_r(NULL, " ", &last);
    570e:	80 e0       	ldi	r24, 0x00	; 0
    5710:	90 e0       	ldi	r25, 0x00	; 0
    5712:	6a e1       	ldi	r22, 0x1A	; 26
    5714:	71 e0       	ldi	r23, 0x01	; 1
    5716:	a6 01       	movw	r20, r12
    5718:	0e 94 c6 03 	call	0x78c	; 0x78c <strtok_r>
    571c:	8c 01       	movw	r16, r24
          if(NULL != tok2)
    571e:	00 97       	sbiw	r24, 0x00	; 0
    5720:	09 f4       	brne	.+2      	; 0x5724 <pollCLI(unsigned char)+0x4aa>
    5722:	f0 c0       	rjmp	.+480    	; 0x5904 <pollCLI(unsigned char)+0x68a>
            {
            const int hh = atoi(tok1);
    5724:	c7 01       	movw	r24, r14
    5726:	0e 94 79 03 	call	0x6f2	; 0x6f2 <atoi>
    572a:	7c 01       	movw	r14, r24
            const int mm = atoi(tok2);
    572c:	c8 01       	movw	r24, r16
    572e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <atoi>
    5732:	8c 01       	movw	r16, r24
            int s = 0;
//#if MAX_SIMPLE_SCHEDULES > 1         
            char *tok3 = strtok_r(NULL, " ", &last);
    5734:	80 e0       	ldi	r24, 0x00	; 0
    5736:	90 e0       	ldi	r25, 0x00	; 0
    5738:	6a e1       	ldi	r22, 0x1A	; 26
    573a:	71 e0       	ldi	r23, 0x01	; 1
    573c:	a6 01       	movw	r20, r12
    573e:	0e 94 c6 03 	call	0x78c	; 0x78c <strtok_r>
            if(NULL != tok3)
    5742:	00 97       	sbiw	r24, 0x00	; 0
    5744:	19 f4       	brne	.+6      	; 0x574c <pollCLI(unsigned char)+0x4d2>
    5746:	60 e0       	ldi	r22, 0x00	; 0
    5748:	70 e0       	ldi	r23, 0x00	; 0
    574a:	03 c0       	rjmp	.+6      	; 0x5752 <pollCLI(unsigned char)+0x4d8>
              {
              s = atoi(tok3);
    574c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <atoi>
    5750:	bc 01       	movw	r22, r24
              }
//#endif
            // Does not fully validate user inputs (eg for -ve values), but cannot set impossible values.
            if(!setSimpleSchedule((uint_least16_t) ((60 * hh) + mm), (uint8_t)s)) { InvalidIgnored(); }
    5752:	8c e3       	ldi	r24, 0x3C	; 60
    5754:	90 e0       	ldi	r25, 0x00	; 0
    5756:	9c 01       	movw	r18, r24
    5758:	e2 9e       	mul	r14, r18
    575a:	c0 01       	movw	r24, r0
    575c:	e3 9e       	mul	r14, r19
    575e:	90 0d       	add	r25, r0
    5760:	f2 9e       	mul	r15, r18
    5762:	90 0d       	add	r25, r0
    5764:	11 24       	eor	r1, r1
    5766:	80 0f       	add	r24, r16
    5768:	91 1f       	adc	r25, r17
    576a:	0e 94 6b 24 	call	0x48d6	; 0x48d6 <setSimpleSchedule(unsigned int, unsigned char)>
    576e:	5d c0       	rjmp	.+186    	; 0x582a <pollCLI(unsigned char)+0x5b0>
        break;
        }

#ifdef SUPPORT_BAKE
      // Switch to (or restart) BAKE (Quick Heat) mode: Q
      case 'Q': { startBakeDebounced(); break; }
    5770:	0e 94 63 04 	call	0x8c6	; 0x8c6 <startBakeDebounced()>
    5774:	c7 c0       	rjmp	.+398    	; 0x5904 <pollCLI(unsigned char)+0x68a>
#endif

      // Status line and optional smart/scheduled warming prediction request.
      case 'S':
        {
        Serial.print(F("Resets: "));
    5776:	86 ec       	ldi	r24, 0xC6	; 198
    5778:	94 e0       	ldi	r25, 0x04	; 4
    577a:	6c e1       	ldi	r22, 0x1C	; 28
    577c:	72 e0       	ldi	r23, 0x02	; 2
    577e:	0e 94 c3 3b 	call	0x7786	; 0x7786 <Print::print(__FlashStringHelper const*)>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    5782:	f9 99       	sbic	0x1f, 1	; 31
    5784:	fe cf       	rjmp	.-4      	; 0x5782 <pollCLI(unsigned char)+0x508>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    5786:	86 e0       	ldi	r24, 0x06	; 6
    5788:	90 e0       	ldi	r25, 0x00	; 0
    578a:	92 bd       	out	0x22, r25	; 34
    578c:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    578e:	f8 9a       	sbi	0x1f, 0	; 31
    5790:	60 b5       	in	r22, 0x20	; 32
        const uint8_t resetCount = eeprom_read_byte((uint8_t *)EE_START_RESET_COUNT);
        Serial.print(resetCount);
    5792:	86 ec       	ldi	r24, 0xC6	; 198
    5794:	94 e0       	ldi	r25, 0x04	; 4
    5796:	4a e0       	ldi	r20, 0x0A	; 10
    5798:	50 e0       	ldi	r21, 0x00	; 0
    579a:	0e 94 c2 3c 	call	0x7984	; 0x7984 <Print::print(unsigned char, int)>
        Serial.println();
    579e:	86 ec       	ldi	r24, 0xC6	; 198
    57a0:	94 e0       	ldi	r25, 0x04	; 4
    57a2:	0e 94 ee 3b 	call	0x77dc	; 0x77dc <Print::println()>
        Serial.print(F("Overruns: "));
    57a6:	86 ec       	ldi	r24, 0xC6	; 198
    57a8:	94 e0       	ldi	r25, 0x04	; 4
    57aa:	61 e1       	ldi	r22, 0x11	; 17
    57ac:	72 e0       	ldi	r23, 0x02	; 2
    57ae:	0e 94 c3 3b 	call	0x7786	; 0x7786 <Print::print(__FlashStringHelper const*)>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    57b2:	f9 99       	sbic	0x1f, 1	; 31
    57b4:	fe cf       	rjmp	.-4      	; 0x57b2 <pollCLI(unsigned char)+0x538>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    57b6:	8d e1       	ldi	r24, 0x1D	; 29
    57b8:	90 e0       	ldi	r25, 0x00	; 0
    57ba:	92 bd       	out	0x22, r25	; 34
    57bc:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    57be:	f8 9a       	sbi	0x1f, 0	; 31
    57c0:	60 b5       	in	r22, 0x20	; 32
        const uint8_t overrunCount = (~eeprom_read_byte((uint8_t *)EE_START_OVERRUN_COUNTER)) & 0xff;
        Serial.print(overrunCount);
    57c2:	60 95       	com	r22
    57c4:	86 ec       	ldi	r24, 0xC6	; 198
    57c6:	94 e0       	ldi	r25, 0x04	; 4
    57c8:	4a e0       	ldi	r20, 0x0A	; 10
    57ca:	50 e0       	ldi	r21, 0x00	; 0
    57cc:	0e 94 c2 3c 	call	0x7984	; 0x7984 <Print::print(unsigned char, int)>
        Serial.println();
    57d0:	86 ec       	ldi	r24, 0xC6	; 198
    57d2:	94 e0       	ldi	r25, 0x04	; 4
    57d4:	0e 94 ee 3b 	call	0x77dc	; 0x77dc <Print::println()>
    57d8:	95 c0       	rjmp	.+298    	; 0x5904 <pollCLI(unsigned char)+0x68a>
      case 'T':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 5 character sequence makes sense and is safe to tokenise, eg "T 1 2".
        if((n >= 5) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    57da:	15 30       	cpi	r17, 0x05	; 5
    57dc:	08 f4       	brcc	.+2      	; 0x57e0 <pollCLI(unsigned char)+0x566>
    57de:	92 c0       	rjmp	.+292    	; 0x5904 <pollCLI(unsigned char)+0x68a>
    57e0:	88 e2       	ldi	r24, 0x28	; 40
    57e2:	93 e0       	ldi	r25, 0x03	; 3
    57e4:	6a e1       	ldi	r22, 0x1A	; 26
    57e6:	71 e0       	ldi	r23, 0x01	; 1
    57e8:	7e 01       	movw	r14, r28
    57ea:	08 94       	sec
    57ec:	e1 1c       	adc	r14, r1
    57ee:	f1 1c       	adc	r15, r1
    57f0:	a7 01       	movw	r20, r14
    57f2:	0e 94 c6 03 	call	0x78c	; 0x78c <strtok_r>
    57f6:	8c 01       	movw	r16, r24
    57f8:	00 97       	sbiw	r24, 0x00	; 0
    57fa:	09 f4       	brne	.+2      	; 0x57fe <pollCLI(unsigned char)+0x584>
    57fc:	83 c0       	rjmp	.+262    	; 0x5904 <pollCLI(unsigned char)+0x68a>
          {
          char *tok2 = strtok_r(NULL, " ", &last);
    57fe:	80 e0       	ldi	r24, 0x00	; 0
    5800:	90 e0       	ldi	r25, 0x00	; 0
    5802:	6a e1       	ldi	r22, 0x1A	; 26
    5804:	71 e0       	ldi	r23, 0x01	; 1
    5806:	a7 01       	movw	r20, r14
    5808:	0e 94 c6 03 	call	0x78c	; 0x78c <strtok_r>
    580c:	7c 01       	movw	r14, r24
          if(NULL != tok2)
    580e:	00 97       	sbiw	r24, 0x00	; 0
    5810:	09 f4       	brne	.+2      	; 0x5814 <pollCLI(unsigned char)+0x59a>
    5812:	78 c0       	rjmp	.+240    	; 0x5904 <pollCLI(unsigned char)+0x68a>
            {
            const int hh = atoi(tok1);
    5814:	c8 01       	movw	r24, r16
    5816:	0e 94 79 03 	call	0x6f2	; 0x6f2 <atoi>
    581a:	8c 01       	movw	r16, r24
            const int mm = atoi(tok2);
    581c:	c7 01       	movw	r24, r14
    581e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <atoi>
    5822:	bc 01       	movw	r22, r24
            // TODO: zap collected stats if time change too large (eg >> 1h).
            if(!setHoursMinutesLT(hh, mm)) { InvalidIgnored(); }
    5824:	c8 01       	movw	r24, r16
    5826:	0e 94 15 24 	call	0x482a	; 0x482a <setHoursMinutesLT(int, int)>
    582a:	88 23       	and	r24, r24
    582c:	09 f0       	breq	.+2      	; 0x5830 <pollCLI(unsigned char)+0x5b6>
    582e:	6a c0       	rjmp	.+212    	; 0x5904 <pollCLI(unsigned char)+0x68a>
    5830:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <InvalidIgnored()>
    5834:	67 c0       	rjmp	.+206    	; 0x5904 <pollCLI(unsigned char)+0x68a>
        }

      // Version information printed as one line to serial, machine- and human- parseable.
      case 'V':
        {
        serialPrintlnBuildVersion();
    5836:	0e 94 7e 2e 	call	0x5cfc	; 0x5cfc <serialPrintlnBuildVersion()>
    583a:	64 c0       	rjmp	.+200    	; 0x5904 <pollCLI(unsigned char)+0x68a>
          }
        else
#endif
          {
#ifdef SUPPORT_BAKE
          cancelBakeDebounced(); // Ensure BAKE mode not entered.
    583c:	0e 94 60 04 	call	0x8c0	; 0x8c0 <cancelBakeDebounced()>
#endif
          setWarmModeDebounced(true); // No parameter supplied; switch to WARM mode.
    5840:	81 e0       	ldi	r24, 0x01	; 1
    5842:	55 c0       	rjmp	.+170    	; 0x58ee <pollCLI(unsigned char)+0x674>
      case 'X':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 3 character sequence makes sense and is safe to tokenise, eg "X 0".
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    5844:	13 30       	cpi	r17, 0x03	; 3
    5846:	08 f4       	brcc	.+2      	; 0x584a <pollCLI(unsigned char)+0x5d0>
    5848:	5d c0       	rjmp	.+186    	; 0x5904 <pollCLI(unsigned char)+0x68a>
    584a:	88 e2       	ldi	r24, 0x28	; 40
    584c:	93 e0       	ldi	r25, 0x03	; 3
    584e:	6a e1       	ldi	r22, 0x1A	; 26
    5850:	71 e0       	ldi	r23, 0x01	; 1
    5852:	ae 01       	movw	r20, r28
    5854:	4f 5f       	subi	r20, 0xFF	; 255
    5856:	5f 4f       	sbci	r21, 0xFF	; 255
    5858:	0e 94 c6 03 	call	0x78c	; 0x78c <strtok_r>
    585c:	00 97       	sbiw	r24, 0x00	; 0
    585e:	09 f4       	brne	.+2      	; 0x5862 <pollCLI(unsigned char)+0x5e8>
    5860:	51 c0       	rjmp	.+162    	; 0x5904 <pollCLI(unsigned char)+0x68a>
          {
          const uint8_t nn = (uint8_t) atoi(tok1);
    5862:	0e 94 79 03 	call	0x6f2	; 0x6f2 <atoi>
    5866:	68 2f       	mov	r22, r24
          eeprom_smart_update_byte((uint8_t *)EE_START_STATS_TX_ENABLE, nn);
    5868:	8c e1       	ldi	r24, 0x1C	; 28
    586a:	90 e0       	ldi	r25, 0x00	; 0
    586c:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <eeprom_smart_update_byte(unsigned char*, unsigned char)>
    5870:	49 c0       	rjmp	.+146    	; 0x5904 <pollCLI(unsigned char)+0x68a>

      // Zap/erase learned statistics.
      case 'Z':
        {
        // Try to avoid causing an overrun if near the end of the minor cycle (even allowing for the warning message if unfinished!).
        if(zapStats((uint16_t) fnmax(1, ((int)msRemainingThisBasicCycle()/2) - 20)))
    5872:	81 e0       	ldi	r24, 0x01	; 1
    5874:	90 e0       	ldi	r25, 0x00	; 0
    5876:	9c 83       	std	Y+4, r25	; 0x04
    5878:	8b 83       	std	Y+3, r24	; 0x03
    587a:	80 91 b2 00 	lds	r24, 0x00B2
    587e:	2f ef       	ldi	r18, 0xFF	; 255
    5880:	30 e0       	ldi	r19, 0x00	; 0
    5882:	28 1b       	sub	r18, r24
    5884:	31 09       	sbc	r19, r1
    5886:	c9 01       	movw	r24, r18
    5888:	53 e0       	ldi	r21, 0x03	; 3
    588a:	88 0f       	add	r24, r24
    588c:	99 1f       	adc	r25, r25
    588e:	5a 95       	dec	r21
    5890:	e1 f7       	brne	.-8      	; 0x588a <pollCLI(unsigned char)+0x610>
    5892:	82 1b       	sub	r24, r18
    5894:	93 0b       	sbc	r25, r19
    5896:	95 95       	asr	r25
    5898:	87 95       	ror	r24
    589a:	44 97       	sbiw	r24, 0x14	; 20
    589c:	9e 83       	std	Y+6, r25	; 0x06
    589e:	8d 83       	std	Y+5, r24	; 0x05
    58a0:	81 30       	cpi	r24, 0x01	; 1
    58a2:	91 05       	cpc	r25, r1
    58a4:	14 f4       	brge	.+4      	; 0x58aa <pollCLI(unsigned char)+0x630>
    58a6:	81 e0       	ldi	r24, 0x01	; 1
    58a8:	90 e0       	ldi	r25, 0x00	; 0
    58aa:	0e 94 a6 08 	call	0x114c	; 0x114c <zapStats(unsigned int)>
    58ae:	88 23       	and	r24, r24
    58b0:	29 f0       	breq	.+10     	; 0x58bc <pollCLI(unsigned char)+0x642>
          { Serial.println(F("Zapped.")); }
    58b2:	86 ec       	ldi	r24, 0xC6	; 198
    58b4:	94 e0       	ldi	r25, 0x04	; 4
    58b6:	69 e0       	ldi	r22, 0x09	; 9
    58b8:	72 e0       	ldi	r23, 0x02	; 2
    58ba:	04 c0       	rjmp	.+8      	; 0x58c4 <pollCLI(unsigned char)+0x64a>
        else
          { Serial.println(F("Not finished.")); }
    58bc:	86 ec       	ldi	r24, 0xC6	; 198
    58be:	94 e0       	ldi	r25, 0x04	; 4
    58c0:	6b ef       	ldi	r22, 0xFB	; 251
    58c2:	71 e0       	ldi	r23, 0x01	; 1
    58c4:	0e 94 0e 3c 	call	0x781c	; 0x781c <Print::println(__FlashStringHelper const*)>
      }

    // Almost always show status line afterwards as feedback of command received and new state.
    if(showStatus) { serialStatusReport(); }
    // Else show ack of command received.
    else { Serial.println(F("OK")); }
    58c8:	86 ec       	ldi	r24, 0xC6	; 198
    58ca:	94 e0       	ldi	r25, 0x04	; 4
    58cc:	68 ef       	ldi	r22, 0xF8	; 248
    58ce:	71 e0       	ldi	r23, 0x01	; 1
    58d0:	0e 94 0e 3c 	call	0x781c	; 0x781c <Print::println(__FlashStringHelper const*)>
    58d4:	04 c0       	rjmp	.+8      	; 0x58de <pollCLI(unsigned char)+0x664>
    }
  else { Serial.println(); } // Terminate empty/partial CLI input line after timeout.
    58d6:	86 ec       	ldi	r24, 0xC6	; 198
    58d8:	94 e0       	ldi	r25, 0x04	; 4
    58da:	0e 94 ee 3b 	call	0x77dc	; 0x77dc <Print::println()>

  // Force any pending output before return / possible UART power-down.
  flushSerialSCTSensitive();
    58de:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <flushSerialSCTSensitive()>

  if(neededWaking) { powerDownSerial(); }
    58e2:	bb 20       	and	r11, r11
    58e4:	91 f0       	breq	.+36     	; 0x590a <pollCLI(unsigned char)+0x690>
    58e6:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <powerDownSerial()>
    58ea:	0f c0       	rjmp	.+30     	; 0x590a <pollCLI(unsigned char)+0x690>
          const uint8_t tempC = (uint8_t) atoi(tok1);
          if(!setFROSTTargetC(tempC)) { InvalidIgnored(); }
          }
        else
#endif
          { setWarmModeDebounced(false); } // No parameter supplied; switch to FROST mode.
    58ec:	80 e0       	ldi	r24, 0x00	; 0
    58ee:	0e 94 50 04 	call	0x8a0	; 0x8a0 <setWarmModeDebounced(bool)>
    58f2:	08 c0       	rjmp	.+16     	; 0x5904 <pollCLI(unsigned char)+0x68a>
              FHT8VSetHC2(hc2);
              FHT8VSyncAndTXReset(); // Force re-sync with FHT8V valve.
              }
            }
          }
        else if(n < 2) // Just 'H', possibly with trailing whitespace.
    58f4:	12 30       	cpi	r17, 0x02	; 2
    58f6:	30 f4       	brcc	.+12     	; 0x5904 <pollCLI(unsigned char)+0x68a>
    58f8:	c7 ce       	rjmp	.-626    	; 0x5688 <pollCLI(unsigned char)+0x40e>
    58fa:	80 e0       	ldi	r24, 0x00	; 0
    58fc:	90 e0       	ldi	r25, 0x00	; 0
    58fe:	de ce       	rjmp	.-580    	; 0x56bc <pollCLI(unsigned char)+0x442>
    5900:	80 e0       	ldi	r24, 0x00	; 0
    5902:	f0 ce       	rjmp	.-544    	; 0x56e4 <pollCLI(unsigned char)+0x46a>
        break;
        }
      }

    // Almost always show status line afterwards as feedback of command received and new state.
    if(showStatus) { serialStatusReport(); }
    5904:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <serialStatusReport()>
    5908:	ea cf       	rjmp	.-44     	; 0x58de <pollCLI(unsigned char)+0x664>

  // Force any pending output before return / possible UART power-down.
  flushSerialSCTSensitive();

  if(neededWaking) { powerDownSerial(); }
  }
    590a:	26 96       	adiw	r28, 0x06	; 6
    590c:	0f b6       	in	r0, 0x3f	; 63
    590e:	f8 94       	cli
    5910:	de bf       	out	0x3e, r29	; 62
    5912:	0f be       	out	0x3f, r0	; 63
    5914:	cd bf       	out	0x3d, r28	; 61
    5916:	cf 91       	pop	r28
    5918:	df 91       	pop	r29
    591a:	1f 91       	pop	r17
    591c:	0f 91       	pop	r16
    591e:	ff 90       	pop	r15
    5920:	ef 90       	pop	r14
    5922:	df 90       	pop	r13
    5924:	cf 90       	pop	r12
    5926:	bf 90       	pop	r11
    5928:	08 95       	ret

0000592a <checkUserSchedule()>:
  return(statusChanged);
  }


// Check/apply the user's schedule, at least once each minute, and act on any timed events.
void checkUserSchedule()
    592a:	cf 93       	push	r28
    592c:	df 93       	push	r29
  {
  // Get minutes since midnight local time [0,1439].
  const uint_least16_t msm = getMinutesSinceMidnightLT();
    592e:	0e 94 45 23 	call	0x468a	; 0x468a <getMinutesSinceMidnightLT()>
    5932:	ec 01       	movw	r28, r24
  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    // Check if now is the simple scheduled off time, as minutes after midnight [0,1439]; invalid (eg ~0) if none set.
    // Programmed off/frost takes priority over on/warm if same to bias towards energy-saving.
    // Note that in the presence of multiple overlapping schedules only the last 'off' applies however.
    if(((MAX_SIMPLE_SCHEDULES < 1) || !isAnyScheduleOnWARMNow()) &&
    5934:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <isAnyScheduleOnWARMNow()>
    5938:	88 23       	and	r24, r24
    593a:	61 f0       	breq	.+24     	; 0x5954 <checkUserSchedule()+0x2a>
       (msm == getSimpleScheduleOff(which)))
      { setWarmModeDebounced(false); }
    // Check if now is the simple scheduled on time.
    else if(msm == getSimpleScheduleOn(which))
    593c:	80 e0       	ldi	r24, 0x00	; 0
    593e:	0e 94 3f 24 	call	0x487e	; 0x487e <getSimpleScheduleOn(unsigned char)>
    5942:	c8 17       	cp	r28, r24
    5944:	d9 07       	cpc	r29, r25
    5946:	79 f4       	brne	.+30     	; 0x5966 <checkUserSchedule()+0x3c>
      {
      setWarmModeDebounced(true);
    5948:	81 e0       	ldi	r24, 0x01	; 1
    594a:	0e 94 50 04 	call	0x8a0	; 0x8a0 <setWarmModeDebounced(bool)>
      // In addition to forcing WARM mode, weakly inhibit any setbacks, etc, for a while.
      markAsPossiblyOccupied();
    594e:	0e 94 b0 04 	call	0x960	; 0x960 <markAsPossiblyOccupied()>
    5952:	09 c0       	rjmp	.+18     	; 0x5966 <checkUserSchedule()+0x3c>
  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    // Check if now is the simple scheduled off time, as minutes after midnight [0,1439]; invalid (eg ~0) if none set.
    // Programmed off/frost takes priority over on/warm if same to bias towards energy-saving.
    // Note that in the presence of multiple overlapping schedules only the last 'off' applies however.
    if(((MAX_SIMPLE_SCHEDULES < 1) || !isAnyScheduleOnWARMNow()) &&
    5954:	80 e0       	ldi	r24, 0x00	; 0
    5956:	0e 94 84 24 	call	0x4908	; 0x4908 <getSimpleScheduleOff(unsigned char)>
    595a:	c8 17       	cp	r28, r24
    595c:	d9 07       	cpc	r29, r25
    595e:	71 f7       	brne	.-36     	; 0x593c <checkUserSchedule()+0x12>
       (msm == getSimpleScheduleOff(which)))
      { setWarmModeDebounced(false); }
    5960:	80 e0       	ldi	r24, 0x00	; 0
    5962:	0e 94 50 04 	call	0x8a0	; 0x8a0 <setWarmModeDebounced(bool)>
  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    // Check if now is the simple scheduled off time, as minutes after midnight [0,1439]; invalid (eg ~0) if none set.
    // Programmed off/frost takes priority over on/warm if same to bias towards energy-saving.
    // Note that in the presence of multiple overlapping schedules only the last 'off' applies however.
    if(((MAX_SIMPLE_SCHEDULES < 1) || !isAnyScheduleOnWARMNow()) &&
    5966:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <isAnyScheduleOnWARMNow()>
    596a:	88 23       	and	r24, r24
    596c:	81 f4       	brne	.+32     	; 0x598e <checkUserSchedule()+0x64>
    596e:	81 e0       	ldi	r24, 0x01	; 1
    5970:	0e 94 84 24 	call	0x4908	; 0x4908 <getSimpleScheduleOff(unsigned char)>
    5974:	c8 17       	cp	r28, r24
    5976:	d9 07       	cpc	r29, r25
    5978:	51 f4       	brne	.+20     	; 0x598e <checkUserSchedule()+0x64>
       (msm == getSimpleScheduleOff(which)))
      { setWarmModeDebounced(false); }
    597a:	80 e0       	ldi	r24, 0x00	; 0
    597c:	0e 94 50 04 	call	0x8a0	; 0x8a0 <setWarmModeDebounced(bool)>
    5980:	0c c0       	rjmp	.+24     	; 0x599a <checkUserSchedule()+0x70>
    // Check if now is the simple scheduled on time.
    else if(msm == getSimpleScheduleOn(which))
      {
      setWarmModeDebounced(true);
    5982:	81 e0       	ldi	r24, 0x01	; 1
    5984:	0e 94 50 04 	call	0x8a0	; 0x8a0 <setWarmModeDebounced(bool)>
      // In addition to forcing WARM mode, weakly inhibit any setbacks, etc, for a while.
      markAsPossiblyOccupied();
    5988:	0e 94 b0 04 	call	0x960	; 0x960 <markAsPossiblyOccupied()>
    598c:	06 c0       	rjmp	.+12     	; 0x599a <checkUserSchedule()+0x70>
    // Note that in the presence of multiple overlapping schedules only the last 'off' applies however.
    if(((MAX_SIMPLE_SCHEDULES < 1) || !isAnyScheduleOnWARMNow()) &&
       (msm == getSimpleScheduleOff(which)))
      { setWarmModeDebounced(false); }
    // Check if now is the simple scheduled on time.
    else if(msm == getSimpleScheduleOn(which))
    598e:	81 e0       	ldi	r24, 0x01	; 1
    5990:	0e 94 3f 24 	call	0x487e	; 0x487e <getSimpleScheduleOn(unsigned char)>
    5994:	c8 17       	cp	r28, r24
    5996:	d9 07       	cpc	r29, r25
    5998:	a1 f3       	breq	.-24     	; 0x5982 <checkUserSchedule()+0x58>
      setWarmModeDebounced(true);
      // In addition to forcing WARM mode, weakly inhibit any setbacks, etc, for a while.
      markAsPossiblyOccupied();
      }
    }
  }
    599a:	df 91       	pop	r29
    599c:	cf 91       	pop	r28
    599e:	08 95       	ret

000059a0 <offPause()>:
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define MEDIUM_PAUSE_MS 60
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
// Big low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define BIG_PAUSE_MS 120
static void inline bigPause() { nap(WDTO_120MS); } // 120ms vs 288ms nominal for PICAXE V0.09 impl.
    59a0:	83 e0       	ldi	r24, 0x03	; 3
    59a2:	0e 94 ab 1c 	call	0x3956	; 0x3956 <nap(signed char)>

// Pause between flashes to allow them to be distinguished (>100ms); was mediumPause() for PICAXE V0.09 impl.
static void inline offPause()
  {
  bigPause(); // 120ms, was V0.09 144ms mediumPause() for PICAXE V0.09 impl.
  pollIO(); // Slip in an I/O poll.
    59a6:	80 e0       	ldi	r24, 0x00	; 0
    59a8:	0e 94 58 06 	call	0xcb0	; 0xcb0 <pollIO(bool)>
  }
    59ac:	08 95       	ret

000059ae <markUIControlUsed()>:
// Record local manual operation of a local physical UI control, eg not remote or via CLI.
// To be thread-safe, everything that this touches or calls must be.
// Thread-safe.
void markUIControlUsed()
  {
  statusChange = true; // Note user interaction with the system.
    59ae:	81 e0       	ldi	r24, 0x01	; 1
    59b0:	80 93 5f 03 	sts	0x035F, r24
  uiTimeoutM = UI_DEFAULT_TIMEOUT_M; // Ensure that UI controls are kept 'warm' for a little while.
    59b4:	82 e0       	ldi	r24, 0x02	; 2
    59b6:	80 93 5d 03 	sts	0x035D, r24
#define CLI_DEFAULT_TIMEOUT_M 2
static volatile uint8_t CLITimeoutM = CLI_DEFAULT_TIMEOUT_M;

// Reset CLI active timer to the full whack before it goes inactive again (ie makes CLI active for a while).
// Thread-safe.
void resetCLIActiveTimer() { CLITimeoutM = CLI_DEFAULT_TIMEOUT_M; }
    59ba:	80 93 3e 01 	sts	0x013E, r24
  statusChange = true; // Note user interaction with the system.
  uiTimeoutM = UI_DEFAULT_TIMEOUT_M; // Ensure that UI controls are kept 'warm' for a little while.
  // Make CLI active for a while (at some slight possibly-significant energy cost).
  resetCLIActiveTimer(); // Thread-safe.
  // User operation of controls locally is strong indication of presence.
  markAsOccupied(); // Thread-safe.
    59be:	0e 94 ac 04 	call	0x958	; 0x958 <markAsOccupied()>
  }
    59c2:	08 95       	ret

000059c4 <tickUI(unsigned char)>:
// Should never be skipped, so as to allow the UI to remain responsive.
// Runs in 350ms or less; usually takes only a few milliseconds or microseconds.
// Returns true iff the user interacted with the system, and maybe caused a status change.
// NOTE: since this is on the minimum idle-loop code path, minimise CPU cycles, esp in frost mode.
// Also re-activates CLI on main button push.
bool tickUI(const uint_fast8_t sec)
    59c4:	1f 93       	push	r17
  {
  // Perform any once-per-minute operations.
  const bool sec0 = (0 == sec);
  if(sec0)
    59c6:	88 23       	and	r24, r24
    59c8:	a9 f4       	brne	.+42     	; 0x59f4 <tickUI(unsigned char)+0x30>
    {
    ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    59ca:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    59cc:	f8 94       	cli
      {
      // Run down UI iteraction timer if need be, one tick per minute.
      if(uiTimeoutM > 0) { --uiTimeoutM; }
    59ce:	80 91 5d 03 	lds	r24, 0x035D
    59d2:	88 23       	and	r24, r24
    59d4:	29 f0       	breq	.+10     	; 0x59e0 <tickUI(unsigned char)+0x1c>
    59d6:	80 91 5d 03 	lds	r24, 0x035D
    59da:	81 50       	subi	r24, 0x01	; 1
    59dc:	80 93 5d 03 	sts	0x035D, r24
      // Run down CLI timer if need be.
      if(CLITimeoutM > 0) { --CLITimeoutM; }
    59e0:	80 91 3e 01 	lds	r24, 0x013E
    59e4:	88 23       	and	r24, r24
    59e6:	29 f0       	breq	.+10     	; 0x59f2 <tickUI(unsigned char)+0x2e>
    59e8:	80 91 3e 01 	lds	r24, 0x013E
    59ec:	81 50       	subi	r24, 0x01	; 1
    59ee:	80 93 3e 01 	sts	0x013E, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    59f2:	9f bf       	out	0x3f, r25	; 63
      }
    }

  // True on every 4th tick/call, ie about once every 8 seconds.
  const bool forthTick = !((++tickCount) & 3); // True on every 4th tick.
    59f4:	80 91 5e 03 	lds	r24, 0x035E
    59f8:	8f 5f       	subi	r24, 0xFF	; 255
    59fa:	80 93 5e 03 	sts	0x035E, r24
    59fe:	10 e0       	ldi	r17, 0x00	; 0
    5a00:	90 e0       	ldi	r25, 0x00	; 0
    5a02:	83 70       	andi	r24, 0x03	; 3
    5a04:	90 70       	andi	r25, 0x00	; 0
    5a06:	89 2b       	or	r24, r25
    5a08:	09 f4       	brne	.+2      	; 0x5a0c <tickUI(unsigned char)+0x48>
    5a0a:	11 e0       	ldi	r17, 0x01	; 1
  markAsOccupied(); // Thread-safe.
  }

// True if a manual UI control has been recently (seconds to minutes ago) operated.
// Thread-safe.
bool recentUIControlUse() { return(0 != uiTimeoutM); }
    5a0c:	80 91 5d 03 	lds	r24, 0x035D
  // True on every 4th tick/call, ie about once every 8 seconds.
  const bool forthTick = !((++tickCount) & 3); // True on every 4th tick.
    
#ifdef TEMP_POT_AVAILABLE
  const bool rUIcu = recentUIControlUse();
  if(rUIcu || forthTick) // If recent UI activity, and periodically.
    5a10:	88 23       	and	r24, r24
    5a12:	11 f4       	brne	.+4      	; 0x5a18 <tickUI(unsigned char)+0x54>
    5a14:	11 23       	and	r17, r17
    5a16:	21 f0       	breq	.+8      	; 0x5a20 <tickUI(unsigned char)+0x5c>
    {
    // Force re-read of temp pot UI device.
    TempPot.read();
    5a18:	81 e7       	ldi	r24, 0x71	; 113
    5a1a:	93 e0       	ldi	r25, 0x03	; 3
    5a1c:	0e 94 98 31 	call	0x6330	; 0x6330 <TemperaturePot::read()>
    5a20:	80 91 61 03 	lds	r24, 0x0361
#ifdef SUPPORT_BAKE
  static bool isBakeModePutative;
#endif

  static bool modeButtonWasPressed;
  if(fastDigitalRead(BUTTON_MODE_L) == LOW)
    5a24:	4d 99       	sbic	0x09, 5	; 9
    5a26:	3e c0       	rjmp	.+124    	; 0x5aa4 <tickUI(unsigned char)+0xe0>
    {
    if(!modeButtonWasPressed)
    5a28:	88 23       	and	r24, r24
    5a2a:	59 f4       	brne	.+22     	; 0x5a42 <tickUI(unsigned char)+0x7e>
      {
      // Capture real mode variable as button is pressed.
      isWarmModePutative = inWarmMode();
    5a2c:	0e 94 4d 04 	call	0x89a	; 0x89a <inWarmMode()>
    5a30:	80 93 63 03 	sts	0x0363, r24
#ifdef SUPPORT_BAKE
      isBakeModePutative = inBakeMode();
    5a34:	0e 94 57 04 	call	0x8ae	; 0x8ae <inBakeMode()>
    5a38:	80 93 62 03 	sts	0x0362, r24
#endif      
      modeButtonWasPressed = true;
    5a3c:	81 e0       	ldi	r24, 0x01	; 1
    5a3e:	80 93 61 03 	sts	0x0361, r24
      }

    // User is pressing the mode button: cycle through FROST | WARM [ | BAKE ].
    // Mark controls used and room as currently occupied given button press.
    markUIControlUsed();
    5a42:	0e 94 d7 2c 	call	0x59ae	; 0x59ae <markUIControlUsed()>
    // LED on...
    LED_HEATCALL_ON();
    5a46:	5c 98       	cbi	0x0b, 4	; 11
// Very tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define VERYTINY_PAUSE_MS 5
static void inline veryTinyPause() { sleepLowPowerMs(VERYTINY_PAUSE_MS); }
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define TINY_PAUSE_MS 15
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    5a48:	80 e0       	ldi	r24, 0x00	; 0
    5a4a:	0e 94 ab 1c 	call	0x3956	; 0x3956 <nap(signed char)>
    tinyPause(); // Leading tiny pause...
    if(!isWarmModePutative) // Was in FROST mode; moving to WARM mode.
    5a4e:	80 91 63 03 	lds	r24, 0x0363
    5a52:	88 23       	and	r24, r24
    5a54:	59 f4       	brne	.+22     	; 0x5a6c <tickUI(unsigned char)+0xa8>
      {
      isWarmModePutative = true;
    5a56:	81 e0       	ldi	r24, 0x01	; 1
    5a58:	80 93 63 03 	sts	0x0363, r24
#ifdef SUPPORT_BAKE
      isBakeModePutative = false;
    5a5c:	10 92 62 03 	sts	0x0362, r1
#endif
      // 2 x flash 'heat call' to indicate now in WARM mode.
      LED_HEATCALL_OFF();
    5a60:	5c 9a       	sbi	0x0b, 4	; 11
      offPause();
    5a62:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <offPause()>
      LED_HEATCALL_ON();
    5a66:	5c 98       	cbi	0x0b, 4	; 11
    5a68:	80 e0       	ldi	r24, 0x00	; 0
    5a6a:	14 c0       	rjmp	.+40     	; 0x5a94 <tickUI(unsigned char)+0xd0>
      tinyPause();
      }
#ifdef SUPPORT_BAKE
    else if(!isBakeModePutative) // Was in WARM mode, move to BAKE (with full timeout to run).
    5a6c:	80 91 62 03 	lds	r24, 0x0362
    5a70:	88 23       	and	r24, r24
    5a72:	99 f4       	brne	.+38     	; 0x5a9a <tickUI(unsigned char)+0xd6>
      {
      isBakeModePutative = true;
    5a74:	81 e0       	ldi	r24, 0x01	; 1
    5a76:	80 93 62 03 	sts	0x0362, r24
      // 2 x flash + one longer flash 'heat call' to indicate now in BAKE mode.
      LED_HEATCALL_OFF();
    5a7a:	5c 9a       	sbi	0x0b, 4	; 11
      offPause();
    5a7c:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <offPause()>
      LED_HEATCALL_ON();
    5a80:	5c 98       	cbi	0x0b, 4	; 11
    5a82:	80 e0       	ldi	r24, 0x00	; 0
    5a84:	0e 94 ab 1c 	call	0x3956	; 0x3956 <nap(signed char)>
      tinyPause();
      LED_HEATCALL_OFF();
    5a88:	5c 9a       	sbi	0x0b, 4	; 11
// Small low-power sleep.
#define SMALL_PAUSE_MS 30
static void inline smallPause() { nap(WDTO_30MS); }
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define MEDIUM_PAUSE_MS 60
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
    5a8a:	82 e0       	ldi	r24, 0x02	; 2
    5a8c:	0e 94 ab 1c 	call	0x3956	; 0x3956 <nap(signed char)>
      mediumPause(); // Note different flash on/off duty cycle to try to distinguish this last flash.
      LED_HEATCALL_ON();
    5a90:	5c 98       	cbi	0x0b, 4	; 11
    5a92:	82 e0       	ldi	r24, 0x02	; 2
    5a94:	0e 94 ab 1c 	call	0x3956	; 0x3956 <nap(signed char)>
    5a98:	9b c0       	rjmp	.+310    	; 0x5bd0 <tickUI(unsigned char)+0x20c>
      mediumPause();
      }
#endif
    else // Was in BAKE (if supported, else was in WARM), move to FROST.
      {
      isWarmModePutative = false;
    5a9a:	10 92 63 03 	sts	0x0363, r1
#ifdef SUPPORT_BAKE
      isBakeModePutative = false;
    5a9e:	10 92 62 03 	sts	0x0362, r1
    5aa2:	96 c0       	rjmp	.+300    	; 0x5bd0 <tickUI(unsigned char)+0x20c>
      }
    }
  else
    {
    // Update real control variables for mode when button is released.
    if(modeButtonWasPressed)
    5aa4:	88 23       	and	r24, r24
    5aa6:	89 f0       	breq	.+34     	; 0x5aca <tickUI(unsigned char)+0x106>
      {
      // Don't update the debounced WARM mode while button held down.
      // Will also capture programmatic changes to isWarmMode, eg from schedules.
      const bool isWarmModeDebounced = isWarmModePutative;
      setWarmModeDebounced(isWarmModeDebounced);
    5aa8:	80 91 63 03 	lds	r24, 0x0363
    5aac:	0e 94 50 04 	call	0x8a0	; 0x8a0 <setWarmModeDebounced(bool)>
#ifdef SUPPORT_BAKE
      if(isBakeModePutative) { startBakeDebounced(); } else { cancelBakeDebounced(); }
    5ab0:	80 91 62 03 	lds	r24, 0x0362
    5ab4:	88 23       	and	r24, r24
    5ab6:	19 f0       	breq	.+6      	; 0x5abe <tickUI(unsigned char)+0xfa>
    5ab8:	0e 94 63 04 	call	0x8c6	; 0x8c6 <startBakeDebounced()>
    5abc:	02 c0       	rjmp	.+4      	; 0x5ac2 <tickUI(unsigned char)+0xfe>
    5abe:	0e 94 60 04 	call	0x8c0	; 0x8c0 <cancelBakeDebounced()>
#endif

      markUIControlUsed(); // Note activity on release of MODE button...
    5ac2:	0e 94 d7 2c 	call	0x59ae	; 0x59ae <markUIControlUsed()>
      modeButtonWasPressed = false;
    5ac6:	10 92 61 03 	sts	0x0361, r1
      }

    // Keep reporting UI status if the user has just touched the unit in some way.
    const bool justTouched = statusChange || recentUIControlUse();
    5aca:	80 91 5f 03 	lds	r24, 0x035F
    5ace:	88 23       	and	r24, r24
    5ad0:	a9 f4       	brne	.+42     	; 0x5afc <tickUI(unsigned char)+0x138>
  markAsOccupied(); // Thread-safe.
  }

// True if a manual UI control has been recently (seconds to minutes ago) operated.
// Thread-safe.
bool recentUIControlUse() { return(0 != uiTimeoutM); }
    5ad2:	80 91 5d 03 	lds	r24, 0x035D
      markUIControlUsed(); // Note activity on release of MODE button...
      modeButtonWasPressed = false;
      }

    // Keep reporting UI status if the user has just touched the unit in some way.
    const bool justTouched = statusChange || recentUIControlUse();
    5ad6:	88 23       	and	r24, r24
    5ad8:	89 f4       	brne	.+34     	; 0x5afc <tickUI(unsigned char)+0x138>
    5ada:	8d c0       	rjmp	.+282    	; 0x5bf6 <tickUI(unsigned char)+0x232>
      // DHD20131223: do not flash if the room is dark so as to save energy and avoid disturbing sleep, etc.
      // In this case force resample of light level frequently in case user turns light on eg to operate unit.
      // Do show LED flash if user has recently operated controls (other than mode button) manually.
      // Flash infrequently if no recently operated controls and not in BAKE mode and not actually calling for heat;
      // this is to conserve batteries for those people who leave the valves in WARM mode all the time.
      if(justTouched ||
    5adc:	11 23       	and	r17, r17
    5ade:	49 f4       	brne	.+18     	; 0x5af2 <tickUI(unsigned char)+0x12e>
    5ae0:	80 91 02 02 	lds	r24, 0x0202
    5ae4:	88 23       	and	r24, r24
    5ae6:	29 f4       	brne	.+10     	; 0x5af2 <tickUI(unsigned char)+0x12e>
    5ae8:	0e 94 57 04 	call	0x8ae	; 0x8ae <inBakeMode()>
    5aec:	88 23       	and	r24, r24
    5aee:	09 f4       	brne	.+2      	; 0x5af2 <tickUI(unsigned char)+0x12e>
    5af0:	5f c0       	rjmp	.+190    	; 0x5bb0 <tickUI(unsigned char)+0x1ec>
    bool isRoomLit() const { return(isRoomLitFlag); }

    // Returns true if room is light enough for someone to be active.
    // False if unknown.
    // Thread-safe and usable within ISRs (Interrupt Service Routines).
    bool isRoomDark() const { return(!isRoomLitFlag); }
    5af2:	80 91 68 03 	lds	r24, 0x0368
    5af6:	88 23       	and	r24, r24
    5af8:	09 f4       	brne	.+2      	; 0x5afc <tickUI(unsigned char)+0x138>
    5afa:	5a c0       	rjmp	.+180    	; 0x5bb0 <tickUI(unsigned char)+0x1ec>
         ((forthTick || NominalRadValve.isCallingForHeat() || inBakeMode()) && !AmbLight.isRoomDark()))
        {
        // First flash to indicate WARM mode (or pot being twiddled).
        LED_HEATCALL_ON();
    5afc:	5c 98       	cbi	0x0b, 4	; 11
        // LED on stepwise proportional to temp pot setting.
        // Small number of steps (3) should help make positioning more obvious.
        const uint8_t wt = getWARMTargetC();
    5afe:	0e 94 88 04 	call	0x910	; 0x910 <getWARMTargetC()>
    5b02:	18 2f       	mov	r17, r24
        // Makes vtiny|tiny|medium flash for cool|OK|warm temperature target.
        if(isEcoTemperature(wt)) { veryTinyPause(); }
    5b04:	82 31       	cpi	r24, 0x12	; 18
    5b06:	28 f4       	brcc	.+10     	; 0x5b12 <tickUI(unsigned char)+0x14e>
// This may be achieved in part by dynamically slowing the CPU clock if possible.
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed((((MIN_CPU_HZ * (ms)) + 2000) / 4000) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    5b08:	85 e2       	ldi	r24, 0x25	; 37
    5b0a:	90 e0       	ldi	r25, 0x00	; 0
    5b0c:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
    5b10:	07 c0       	rjmp	.+14     	; 0x5b20 <tickUI(unsigned char)+0x15c>
        else if(!isComfortTemperature(wt)) { tinyPause(); }
    5b12:	87 31       	cpi	r24, 0x17	; 23
    5b14:	10 f4       	brcc	.+4      	; 0x5b1a <tickUI(unsigned char)+0x156>
// Very tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define VERYTINY_PAUSE_MS 5
static void inline veryTinyPause() { sleepLowPowerMs(VERYTINY_PAUSE_MS); }
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define TINY_PAUSE_MS 15
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    5b16:	80 e0       	ldi	r24, 0x00	; 0
    5b18:	01 c0       	rjmp	.+2      	; 0x5b1c <tickUI(unsigned char)+0x158>
// Small low-power sleep.
#define SMALL_PAUSE_MS 30
static void inline smallPause() { nap(WDTO_30MS); }
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define MEDIUM_PAUSE_MS 60
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
    5b1a:	82 e0       	ldi	r24, 0x02	; 2
    5b1c:	0e 94 ab 1c 	call	0x3956	; 0x3956 <nap(signed char)>
    5b20:	80 91 02 02 	lds	r24, 0x0202
        else { mediumPause(); }

        // Second flash to indicate actually calling for heat.
        if(NominalRadValve.isCallingForHeat())
    5b24:	88 23       	and	r24, r24
    5b26:	09 f4       	brne	.+2      	; 0x5b2a <tickUI(unsigned char)+0x166>
    5b28:	43 c0       	rjmp	.+134    	; 0x5bb0 <tickUI(unsigned char)+0x1ec>
          {
          LED_HEATCALL_OFF();
    5b2a:	5c 9a       	sbi	0x0b, 4	; 11
          offPause(); // V0.09 was mediumPause().
    5b2c:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <offPause()>
          LED_HEATCALL_ON(); // flash
    5b30:	5c 98       	cbi	0x0b, 4	; 11
          if(isEcoTemperature(wt)) { veryTinyPause(); }
    5b32:	12 31       	cpi	r17, 0x12	; 18
    5b34:	18 f4       	brcc	.+6      	; 0x5b3c <tickUI(unsigned char)+0x178>
// This may be achieved in part by dynamically slowing the CPU clock if possible.
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed((((MIN_CPU_HZ * (ms)) + 2000) / 4000) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    5b36:	85 e2       	ldi	r24, 0x25	; 37
    5b38:	90 e0       	ldi	r25, 0x00	; 0
    5b3a:	04 c0       	rjmp	.+8      	; 0x5b44 <tickUI(unsigned char)+0x180>
          else if(!isComfortTemperature(wt)) { sleepLowPowerMs((VERYTINY_PAUSE_MS + TINY_PAUSE_MS) / 2); }
    5b3c:	17 31       	cpi	r17, 0x17	; 23
    5b3e:	28 f4       	brcc	.+10     	; 0x5b4a <tickUI(unsigned char)+0x186>
    5b40:	8c e4       	ldi	r24, 0x4C	; 76
    5b42:	90 e0       	ldi	r25, 0x00	; 0
    5b44:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
    5b48:	03 c0       	rjmp	.+6      	; 0x5b50 <tickUI(unsigned char)+0x18c>
// Very tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define VERYTINY_PAUSE_MS 5
static void inline veryTinyPause() { sleepLowPowerMs(VERYTINY_PAUSE_MS); }
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define TINY_PAUSE_MS 15
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    5b4a:	80 e0       	ldi	r24, 0x00	; 0
    5b4c:	0e 94 ab 1c 	call	0x3956	; 0x3956 <nap(signed char)>
          else { tinyPause(); }

#ifdef SUPPORT_BAKE
          if(inBakeMode())
    5b50:	0e 94 57 04 	call	0x8ae	; 0x8ae <inBakeMode()>
    5b54:	88 23       	and	r24, r24
    5b56:	61 f1       	breq	.+88     	; 0x5bb0 <tickUI(unsigned char)+0x1ec>
            {
            // Third (lengthened) flash to indicate BAKE mode.
            LED_HEATCALL_OFF();
    5b58:	5c 9a       	sbi	0x0b, 4	; 11
// Small low-power sleep.
#define SMALL_PAUSE_MS 30
static void inline smallPause() { nap(WDTO_30MS); }
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define MEDIUM_PAUSE_MS 60
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
    5b5a:	82 e0       	ldi	r24, 0x02	; 2
    5b5c:	0e 94 ab 1c 	call	0x3956	; 0x3956 <nap(signed char)>
            mediumPause(); // Note different flash off time to try to distinguish this last flash.
            LED_HEATCALL_ON();
    5b60:	5c 98       	cbi	0x0b, 4	; 11
            // Makes tiny|small|medium flash for eco|OK|comfort temperature target.
            if(isEcoTemperature(wt)) { tinyPause(); }
    5b62:	12 31       	cpi	r17, 0x12	; 18
    5b64:	10 f4       	brcc	.+4      	; 0x5b6a <tickUI(unsigned char)+0x1a6>
// Very tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define VERYTINY_PAUSE_MS 5
static void inline veryTinyPause() { sleepLowPowerMs(VERYTINY_PAUSE_MS); }
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define TINY_PAUSE_MS 15
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    5b66:	80 e0       	ldi	r24, 0x00	; 0
    5b68:	05 c0       	rjmp	.+10     	; 0x5b74 <tickUI(unsigned char)+0x1b0>
            else if(!isComfortTemperature(wt)) { smallPause(); }
    5b6a:	17 31       	cpi	r17, 0x17	; 23
    5b6c:	10 f4       	brcc	.+4      	; 0x5b72 <tickUI(unsigned char)+0x1ae>
// Small low-power sleep.
#define SMALL_PAUSE_MS 30
static void inline smallPause() { nap(WDTO_30MS); }
    5b6e:	81 e0       	ldi	r24, 0x01	; 1
    5b70:	01 c0       	rjmp	.+2      	; 0x5b74 <tickUI(unsigned char)+0x1b0>
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define MEDIUM_PAUSE_MS 60
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
    5b72:	82 e0       	ldi	r24, 0x02	; 2
    5b74:	0e 94 ab 1c 	call	0x3956	; 0x3956 <nap(signed char)>
    5b78:	1b c0       	rjmp	.+54     	; 0x5bb0 <tickUI(unsigned char)+0x1ec>
    5b7a:	80 91 68 03 	lds	r24, 0x0368
    // Even in FROST mode, and if actually calling for heat (eg opening the rad valve significantly, etc)
    // then emit a tiny double flash on every 4th tick.
    // This call for heat may be frost protection or pre-warming / anticipating demand.
    // DHD20130528: new 4th-tick flash in FROST mode...
    // DHD20131223: do not flash if the room is dark so as to save energy and avoid disturbing sleep, etc.
    else if(forthTick &&
    5b7e:	88 23       	and	r24, r24
    5b80:	b9 f0       	breq	.+46     	; 0x5bb0 <tickUI(unsigned char)+0x1ec>
    5b82:	80 91 02 02 	lds	r24, 0x0202
    5b86:	88 23       	and	r24, r24
    5b88:	99 f0       	breq	.+38     	; 0x5bb0 <tickUI(unsigned char)+0x1ec>
    5b8a:	8e ef       	ldi	r24, 0xFE	; 254
    5b8c:	91 e0       	ldi	r25, 0x01	; 1
    5b8e:	0e 94 76 0b 	call	0x16ec	; 0x16ec <ModelledRadValve::isControlledValveReallyOpen() const>
    5b92:	88 23       	and	r24, r24
    5b94:	69 f0       	breq	.+26     	; 0x5bb0 <tickUI(unsigned char)+0x1ec>
            !AmbLight.isRoomDark() &&
            NominalRadValve.isCallingForHeat() &&
            NominalRadValve.isControlledValveReallyOpen())
      {
      // Double flash every 4th tick indicates call for heat while in FROST MODE (matches call for heat in WARM mode).
      LED_HEATCALL_ON(); // flash
    5b96:	5c 98       	cbi	0x0b, 4	; 11
// This may be achieved in part by dynamically slowing the CPU clock if possible.
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed((((MIN_CPU_HZ * (ms)) + 2000) / 4000) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    5b98:	85 e2       	ldi	r24, 0x25	; 37
    5b9a:	90 e0       	ldi	r25, 0x00	; 0
    5b9c:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
      veryTinyPause();
      LED_HEATCALL_OFF();
    5ba0:	5c 9a       	sbi	0x0b, 4	; 11
      offPause();
    5ba2:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <offPause()>
      LED_HEATCALL_ON(); // flash
    5ba6:	5c 98       	cbi	0x0b, 4	; 11
    5ba8:	85 e2       	ldi	r24, 0x25	; 37
    5baa:	90 e0       	ldi	r25, 0x00	; 0
    5bac:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
      veryTinyPause();
      }

    // Enforce any changes that may have been driven by other UI components (ie other than MODE button).
    // Eg adjustment of temp pot / eco bias changing scheduled state.
    if(statusChange)
    5bb0:	80 91 5f 03 	lds	r24, 0x035F
    5bb4:	88 23       	and	r24, r24
    5bb6:	61 f0       	breq	.+24     	; 0x5bd0 <tickUI(unsigned char)+0x20c>
      {
      static bool prevScheduleStatus;
      const bool currentScheduleStatus = isAnyScheduleOnWARMNow();
    5bb8:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <isAnyScheduleOnWARMNow()>
    5bbc:	98 2f       	mov	r25, r24
      if(currentScheduleStatus != prevScheduleStatus)
    5bbe:	80 91 60 03 	lds	r24, 0x0360
    5bc2:	98 17       	cp	r25, r24
    5bc4:	29 f0       	breq	.+10     	; 0x5bd0 <tickUI(unsigned char)+0x20c>
        {
        prevScheduleStatus = currentScheduleStatus;
    5bc6:	90 93 60 03 	sts	0x0360, r25
        setWarmModeDebounced(currentScheduleStatus);
    5bca:	89 2f       	mov	r24, r25
    5bcc:	0e 94 50 04 	call	0x8a0	; 0x8a0 <setWarmModeDebounced(bool)>
        }
      }
    }

  // Ensure LED forced off unconditionally at least once each cycle.
  LED_HEATCALL_OFF();
    5bd0:	5c 9a       	sbi	0x0b, 4	; 11

#ifdef LEARN_BUTTON_AVAILABLE
  // Handle learn button if supported and if is currently pressed.
  if(fastDigitalRead(BUTTON_LEARN_L) == LOW)
    5bd2:	18 99       	sbic	0x03, 0	; 3
    5bd4:	02 c0       	rjmp	.+4      	; 0x5bda <tickUI(unsigned char)+0x216>
    {
    handleLEARN(0);
    5bd6:	80 e0       	ldi	r24, 0x00	; 0
    5bd8:	03 c0       	rjmp	.+6      	; 0x5be0 <tickUI(unsigned char)+0x21c>
    LED_HEATCALL_ON(); // Leave heatcall LED on while learn button held down.
    }

#if defined(BUTTON_LEARN2_L)
  // Handle second learn button if supported and currently pressed and primary learn button not pressed.
  else if(fastDigitalRead(BUTTON_LEARN2_L) == LOW)
    5bda:	4b 99       	sbic	0x09, 3	; 9
    5bdc:	06 c0       	rjmp	.+12     	; 0x5bea <tickUI(unsigned char)+0x226>
    {
    handleLEARN(1);
    5bde:	81 e0       	ldi	r24, 0x01	; 1
    5be0:	0e 94 4d 27 	call	0x4e9a	; 0x4e9a <handleLEARN(unsigned char)>
    markUIControlUsed(); // Mark controls used and room as currently occupied given button press.
    5be4:	0e 94 d7 2c 	call	0x59ae	; 0x59ae <markUIControlUsed()>
    LED_HEATCALL_ON(); // Leave heatcall LED on while learn button held down.
    5be8:	5c 98       	cbi	0x0b, 4	; 11
    }
#endif
#endif

  const bool statusChanged = statusChange;
    5bea:	80 91 5f 03 	lds	r24, 0x035F
  statusChange = false; // Potential race.
    5bee:	10 92 5f 03 	sts	0x035F, r1
  return(statusChanged);
  }
    5bf2:	1f 91       	pop	r17
    5bf4:	08 95       	ret
    // Keep reporting UI status if the user has just touched the unit in some way.
    const bool justTouched = statusChange || recentUIControlUse();

    // Mode button not pressed: indicate current mode with flash(es); more flashes if actually calling for heat.
    // Force display while UI controls are being used, eg to indicate temp pot position.
    if(justTouched || inWarmMode()) // Generate flash(es) if in WARM mode or fiddling with UI other than Mode button.
    5bf6:	0e 94 4d 04 	call	0x89a	; 0x89a <inWarmMode()>
    5bfa:	88 23       	and	r24, r24
    5bfc:	09 f0       	breq	.+2      	; 0x5c00 <tickUI(unsigned char)+0x23c>
    5bfe:	6e cf       	rjmp	.-292    	; 0x5adc <tickUI(unsigned char)+0x118>
    // Even in FROST mode, and if actually calling for heat (eg opening the rad valve significantly, etc)
    // then emit a tiny double flash on every 4th tick.
    // This call for heat may be frost protection or pre-warming / anticipating demand.
    // DHD20130528: new 4th-tick flash in FROST mode...
    // DHD20131223: do not flash if the room is dark so as to save energy and avoid disturbing sleep, etc.
    else if(forthTick &&
    5c00:	11 23       	and	r17, r17
    5c02:	b1 f2       	breq	.-84     	; 0x5bb0 <tickUI(unsigned char)+0x1ec>
    5c04:	ba cf       	rjmp	.-140    	; 0x5b7a <tickUI(unsigned char)+0x1b6>

00005c06 <global constructors keyed to _Z5panicv>:
  '/',
  __DATE__[0], __DATE__[1], __DATE__[2],
  '/',
  __DATE__[4], __DATE__[5],
  '\0'
  };
    5c06:	82 e3       	ldi	r24, 0x32	; 50
    5c08:	80 93 3f 01 	sts	0x013F, r24
    5c0c:	80 e3       	ldi	r24, 0x30	; 48
    5c0e:	80 93 40 01 	sts	0x0140, r24
    5c12:	81 e3       	ldi	r24, 0x31	; 49
    5c14:	80 93 41 01 	sts	0x0141, r24
    5c18:	84 e3       	ldi	r24, 0x34	; 52
    5c1a:	80 93 42 01 	sts	0x0142, r24
    5c1e:	84 e4       	ldi	r24, 0x44	; 68
    5c20:	80 93 44 01 	sts	0x0144, r24
    5c24:	85 e6       	ldi	r24, 0x65	; 101
    5c26:	80 93 45 01 	sts	0x0145, r24
    5c2a:	83 e6       	ldi	r24, 0x63	; 99
    5c2c:	80 93 46 01 	sts	0x0146, r24
    5c30:	80 e2       	ldi	r24, 0x20	; 32
    5c32:	80 93 48 01 	sts	0x0148, r24
    5c36:	85 e3       	ldi	r24, 0x35	; 53
    5c38:	80 93 49 01 	sts	0x0149, r24
//us apparent: 1408
//us apparent: 3776
//us apparent: 2816
#endif
#endif
  }
    5c3c:	08 95       	ret

00005c3e <loop>:
#if defined(ALT_MAIN_LOOP) // Run alternative main loop.
  loopAlt();
#elif defined(UNIT_TESTS) // Run unit tests *instead* of normal loop() code. 
  loopUnitTest();
#else // Normal OpenTRV usage.
  loopOpenTRV();
    5c3e:	0e 94 99 0b 	call	0x1732	; 0x1732 <loopOpenTRV()>
//us apparent: 1408
//us apparent: 3776
//us apparent: 2816
#endif
#endif
  }
    5c42:	08 95       	ret

00005c44 <sleepLowPowerMs(unsigned int)>:
    5c44:	a0 e0       	ldi	r26, 0x00	; 0
    5c46:	b0 e0       	ldi	r27, 0x00	; 0
    5c48:	bc 01       	movw	r22, r24
    5c4a:	cd 01       	movw	r24, r26
    5c4c:	22 e1       	ldi	r18, 0x12	; 18
    5c4e:	3a e7       	ldi	r19, 0x7A	; 122
    5c50:	40 e0       	ldi	r20, 0x00	; 0
    5c52:	50 e0       	ldi	r21, 0x00	; 0
    5c54:	0e 94 3a 3e 	call	0x7c74	; 0x7c74 <__mulsi3>
    5c58:	60 53       	subi	r22, 0x30	; 48
    5c5a:	78 4f       	sbci	r23, 0xF8	; 248
    5c5c:	8f 4f       	sbci	r24, 0xFF	; 255
    5c5e:	9f 4f       	sbci	r25, 0xFF	; 255
    5c60:	20 ea       	ldi	r18, 0xA0	; 160
    5c62:	3f e0       	ldi	r19, 0x0F	; 15
    5c64:	40 e0       	ldi	r20, 0x00	; 0
    5c66:	50 e0       	ldi	r21, 0x00	; 0
    5c68:	0e 94 a2 3e 	call	0x7d44	; 0x7d44 <__divmodsi4>
    5c6c:	da 01       	movw	r26, r20
    5c6e:	c9 01       	movw	r24, r18
    5c70:	02 97       	sbiw	r24, 0x02	; 2
    5c72:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
    5c76:	08 95       	ret

00005c78 <posPOST(unsigned char, __FlashStringHelper const*)>:
//   * Two quick flashes from the Arduino bootloader then the LED comes on.
//   * Each of the 5 main sections of Power On Self Test is 1 second LED on, 0.5 second off, n short flashes separated by 0.25s off, then 0.5s off, then 1s on.
//     The value of n is 1, 2, 3, 4, 5.
//   * The LED should then go off except for optional faint flickers as the radio is being driven if set up to do so.
#define PP_OFF_MS 250
static void posPOST(const uint8_t position, const __FlashStringHelper *s)
    5c78:	ff 92       	push	r15
    5c7a:	0f 93       	push	r16
    5c7c:	1f 93       	push	r17
    5c7e:	cf 93       	push	r28
    5c80:	df 93       	push	r29
    5c82:	f8 2e       	mov	r15, r24
    5c84:	8b 01       	movw	r16, r22
  {
  sleepLowPowerMs(1000);
    5c86:	88 ee       	ldi	r24, 0xE8	; 232
    5c88:	93 e0       	ldi	r25, 0x03	; 3
    5c8a:	0e 94 22 2e 	call	0x5c44	; 0x5c44 <sleepLowPowerMs(unsigned int)>
#ifdef DEBUG
  DEBUG_SERIAL_PRINT_FLASHSTRING("posPOST: "); // Can only be used once serial is set up.
    5c8e:	89 ec       	ldi	r24, 0xC9	; 201
    5c90:	95 e0       	ldi	r25, 0x05	; 5
    5c92:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(position);
    5c96:	cf 2d       	mov	r28, r15
    5c98:	d0 e0       	ldi	r29, 0x00	; 0
    5c9a:	ce 01       	movw	r24, r28
    5c9c:	6a e0       	ldi	r22, 0x0A	; 10
    5c9e:	70 e0       	ldi	r23, 0x00	; 0
    5ca0:	0e 94 dd 25 	call	0x4bba	; 0x4bba <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINT_FLASHSTRING(": ");
    5ca4:	86 ec       	ldi	r24, 0xC6	; 198
    5ca6:	95 e0       	ldi	r25, 0x05	; 5
    5ca8:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(s);
    5cac:	c8 01       	movw	r24, r16
    5cae:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINTLN();
    5cb2:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <serialPrintlnAndFlush()>
#else
  serialPrintlnAndFlush(s);
#endif
//  pinMode(LED_HEATCALL, OUTPUT);
  LED_HEATCALL_OFF();
    5cb6:	5c 9a       	sbi	0x0b, 4	; 11

  // Skip much of lightshow if '0'/end/none position.
  if(position > 0)
    5cb8:	ff 20       	and	r15, r15
    5cba:	89 f0       	breq	.+34     	; 0x5cde <posPOST(unsigned char, __FlashStringHelper const*)+0x66>
    {
    sleepLowPowerMs(2*PP_OFF_MS); // TODO: use this time to gather entropy.
    5cbc:	84 ef       	ldi	r24, 0xF4	; 244
    5cbe:	91 e0       	ldi	r25, 0x01	; 1
    5cc0:	07 c0       	rjmp	.+14     	; 0x5cd0 <posPOST(unsigned char, __FlashStringHelper const*)+0x58>
    for(int i = position; --i >= 0; )
      {
      LED_HEATCALL_ON();
    5cc2:	5c 98       	cbi	0x0b, 4	; 11
// Very tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define VERYTINY_PAUSE_MS 5
static void inline veryTinyPause() { sleepLowPowerMs(VERYTINY_PAUSE_MS); }
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define TINY_PAUSE_MS 15
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    5cc4:	80 e0       	ldi	r24, 0x00	; 0
    5cc6:	0e 94 ab 1c 	call	0x3956	; 0x3956 <nap(signed char)>
      tinyPause();
      LED_HEATCALL_OFF();
    5cca:	5c 9a       	sbi	0x0b, 4	; 11
      sleepLowPowerMs(PP_OFF_MS); // TODO: use this time to gather entropy.
    5ccc:	8a ef       	ldi	r24, 0xFA	; 250
    5cce:	90 e0       	ldi	r25, 0x00	; 0
    5cd0:	0e 94 22 2e 	call	0x5c44	; 0x5c44 <sleepLowPowerMs(unsigned int)>

  // Skip much of lightshow if '0'/end/none position.
  if(position > 0)
    {
    sleepLowPowerMs(2*PP_OFF_MS); // TODO: use this time to gather entropy.
    for(int i = position; --i >= 0; )
    5cd4:	21 97       	sbiw	r28, 0x01	; 1
    5cd6:	8f ef       	ldi	r24, 0xFF	; 255
    5cd8:	cf 3f       	cpi	r28, 0xFF	; 255
    5cda:	d8 07       	cpc	r29, r24
    5cdc:	91 f7       	brne	.-28     	; 0x5cc2 <posPOST(unsigned char, __FlashStringHelper const*)+0x4a>
      LED_HEATCALL_OFF();
      sleepLowPowerMs(PP_OFF_MS); // TODO: use this time to gather entropy.
      }
    }

  sleepLowPowerMs(PP_OFF_MS); // TODO: use this time to gather entropy.
    5cde:	8a ef       	ldi	r24, 0xFA	; 250
    5ce0:	90 e0       	ldi	r25, 0x00	; 0
    5ce2:	0e 94 22 2e 	call	0x5c44	; 0x5c44 <sleepLowPowerMs(unsigned int)>
  LED_HEATCALL_ON();
    5ce6:	5c 98       	cbi	0x0b, 4	; 11
  sleepLowPowerMs(1000); // TODO: use this time to gather entropy.
    5ce8:	88 ee       	ldi	r24, 0xE8	; 232
    5cea:	93 e0       	ldi	r25, 0x03	; 3
    5cec:	0e 94 22 2e 	call	0x5c44	; 0x5c44 <sleepLowPowerMs(unsigned int)>
  }
    5cf0:	df 91       	pop	r29
    5cf2:	cf 91       	pop	r28
    5cf4:	1f 91       	pop	r17
    5cf6:	0f 91       	pop	r16
    5cf8:	ff 90       	pop	r15
    5cfa:	08 95       	ret

00005cfc <serialPrintlnBuildVersion()>:
  };
// Version (code/board) information printed as one line to serial (with line-end, and flushed); machine- and human- parseable.
// Format: "board VXXXX REVY; code YYYY/Mmm/DD HH:MM:SS".
void serialPrintlnBuildVersion()
  {
  serialPrintAndFlush(F("board V0.2 REV"));
    5cfc:	8c e1       	ldi	r24, 0x1C	; 28
    5cfe:	96 e0       	ldi	r25, 0x06	; 6
    5d00:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <serialPrintAndFlush(__FlashStringHelper const*)>
  serialPrintAndFlush(V0p2_REV);
    5d04:	84 e0       	ldi	r24, 0x04	; 4
    5d06:	90 e0       	ldi	r25, 0x00	; 0
    5d08:	6a e0       	ldi	r22, 0x0A	; 10
    5d0a:	70 e0       	ldi	r23, 0x00	; 0
    5d0c:	0e 94 dd 25 	call	0x4bba	; 0x4bba <serialPrintAndFlush(int, int)>
  serialPrintAndFlush(F("; code $Id: V0p2_Main.ino 3659 2014-11-22 17:23:13Z damonhd $ ")); // Expect SVN to substitute the Id keyword here with svn:keywords property set.
    5d10:	8d ed       	ldi	r24, 0xDD	; 221
    5d12:	95 e0       	ldi	r25, 0x05	; 5
    5d14:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <serialPrintAndFlush(__FlashStringHelper const*)>
  serialPrintAndFlush(_YYYYMmmDD);
    5d18:	8f e3       	ldi	r24, 0x3F	; 63
    5d1a:	91 e0       	ldi	r25, 0x01	; 1
    5d1c:	0e 94 f9 25 	call	0x4bf2	; 0x4bf2 <serialPrintAndFlush(char const*)>
  serialPrintAndFlush(F(" " __TIME__));
    5d20:	83 ed       	ldi	r24, 0xD3	; 211
    5d22:	95 e0       	ldi	r25, 0x05	; 5
    5d24:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <serialPrintAndFlush(__FlashStringHelper const*)>
  serialPrintlnAndFlush();
    5d28:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <serialPrintlnAndFlush()>
  }
    5d2c:	08 95       	ret

00005d2e <panic()>:
// Tries not to use lots of energy so as to keep distress beacon running for a while.
void panic()
  {
#ifdef USE_MODULE_RFM22RADIOSIMPLE
  // Reset radio and go into low-power mode.
  RFM22PowerOnInit();
    5d2e:	0e 94 f6 21 	call	0x43ec	; 0x43ec <RFM22PowerOnInit()>
#endif
  // Power down almost everything else...
  minimisePowerWithoutSleep();
    5d32:	0e 94 66 1f 	call	0x3ecc	; 0x3ecc <minimisePowerWithoutSleep()>
#ifdef LED_HEATCALL
  pinMode(LED_HEATCALL, OUTPUT);
#else
  pinMode(LED_HEATCALL_L, OUTPUT);
    5d36:	84 e0       	ldi	r24, 0x04	; 4
    5d38:	61 e0       	ldi	r22, 0x01	; 1
    5d3a:	0e 94 7b 38 	call	0x70f6	; 0x70f6 <pinMode>
#endif
  for( ; ; )
    {
    LED_HEATCALL_ON();
    5d3e:	5c 98       	cbi	0x0b, 4	; 11
    5d40:	80 e0       	ldi	r24, 0x00	; 0
    5d42:	0e 94 ab 1c 	call	0x3956	; 0x3956 <nap(signed char)>
    tinyPause();
    LED_HEATCALL_OFF();
    5d46:	5c 9a       	sbi	0x0b, 4	; 11
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define MEDIUM_PAUSE_MS 60
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
// Big low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define BIG_PAUSE_MS 120
static void inline bigPause() { nap(WDTO_120MS); } // 120ms vs 288ms nominal for PICAXE V0.09 impl.
    5d48:	83 e0       	ldi	r24, 0x03	; 3
    5d4a:	0e 94 ab 1c 	call	0x3956	; 0x3956 <nap(signed char)>
    5d4e:	f7 cf       	rjmp	.-18     	; 0x5d3e <panic()+0x10>

00005d50 <panic(__FlashStringHelper const*)>:
  }

// Panic with fixed message.
void panic(const __FlashStringHelper *s)
  {
  serialPrintlnAndFlush(s); // May fail.
    5d50:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <serialPrintlnAndFlush(__FlashStringHelper const*)>
  panic();  
    5d54:	0e 94 97 2e 	call	0x5d2e	; 0x5d2e <panic()>
  }
    5d58:	08 95       	ret

00005d5a <optionalPOST()>:
  serialPrintlnAndFlush();
  }

// Optional Power-On Self Test routines.
// Aborts with a call to panic() if a test fails.
void optionalPOST()
    5d5a:	0f 93       	push	r16
    5d5c:	1f 93       	push	r17
    5d5e:	cf 93       	push	r28
    5d60:	df 93       	push	r29
  {
  // Capture early sub-cycle time to help ensure that the 32768Hz async clock is actually running.
  const uint8_t earlySCT = getSubCycleTime();
    5d62:	00 91 b2 00 	lds	r16, 0x00B2
#ifdef USE_MODULE_RFM22RADIOSIMPLE
#if !defined(RFM22_IS_ACTUALLY_RFM23) && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("(Using RFM22.)");
#endif
  // Initialise the radio, if configured, ASAP because it can suck a lot of power until properly initialised.
  RFM22PowerOnInit();
    5d66:	0e 94 f6 21 	call	0x43ec	; 0x43ec <RFM22PowerOnInit()>
  // Check that the radio is correctly connected; panic if not...
  if(!RFM22CheckConnected()) { panic(); }
    5d6a:	0e 94 f4 22 	call	0x45e8	; 0x45e8 <RFM22CheckConnected()>
    5d6e:	88 23       	and	r24, r24
    5d70:	11 f4       	brne	.+4      	; 0x5d76 <optionalPOST()+0x1c>
    5d72:	0e 94 97 2e 	call	0x5d2e	; 0x5d2e <panic()>
  // Configure the radio.
  RFM22RegisterBlockSetup(FHT8V_RFM22_Reg_Values);
    5d76:	87 e0       	ldi	r24, 0x07	; 7
    5d78:	91 e0       	ldi	r25, 0x01	; 1
    5d7a:	0e 94 d5 21 	call	0x43aa	; 0x43aa <RFM22RegisterBlockSetup(unsigned char const (*) [2])>
  // Put the radio in low-power standby mode.
  RFM22ModeStandbyAndClearState();
    5d7e:	0e 94 52 22 	call	0x44a4	; 0x44a4 <RFM22ModeStandbyAndClearState()>
#endif

//  posPOST(1, F("Radio OK, checking buttons/sensors and xtal"));

  // Check buttons not stuck enabled.
  if(fastDigitalRead(BUTTON_MODE_L) == LOW) { panic(F("M stuck")); }
    5d82:	4d 99       	sbic	0x09, 5	; 9
    5d84:	04 c0       	rjmp	.+8      	; 0x5d8e <optionalPOST()+0x34>
    5d86:	8e eb       	ldi	r24, 0xBE	; 190
    5d88:	95 e0       	ldi	r25, 0x05	; 5
    5d8a:	0e 94 a8 2e 	call	0x5d50	; 0x5d50 <panic(__FlashStringHelper const*)>
#if defined(BUTTON_LEARN_L)
  if(fastDigitalRead(BUTTON_LEARN_L) == LOW) { panic(F("L stuck")); }
    5d8e:	18 99       	sbic	0x03, 0	; 3
    5d90:	04 c0       	rjmp	.+8      	; 0x5d9a <optionalPOST()+0x40>
    5d92:	86 eb       	ldi	r24, 0xB6	; 182
    5d94:	95 e0       	ldi	r25, 0x05	; 5
    5d96:	0e 94 a8 2e 	call	0x5d50	; 0x5d50 <panic(__FlashStringHelper const*)>
#endif
#if defined(BUTTON_LEARN2_L)
  if(fastDigitalRead(BUTTON_LEARN2_L) == LOW) { panic(F("L2 stuck")); }
    5d9a:	4b 99       	sbic	0x09, 3	; 9
    5d9c:	04 c0       	rjmp	.+8      	; 0x5da6 <optionalPOST()+0x4c>
    5d9e:	8d ea       	ldi	r24, 0xAD	; 173
    5da0:	95 e0       	ldi	r25, 0x05	; 5
    5da2:	0e 94 a8 2e 	call	0x5d50	; 0x5d50 <panic(__FlashStringHelper const*)>
#endif

  // Check that the 32768Hz async clock is actually running having done significant CPU-intensive work.
  const uint8_t laterSCT = getSubCycleTime();
    5da6:	10 91 b2 00 	lds	r17, 0x00B2
  if(laterSCT == earlySCT)
    5daa:	10 17       	cp	r17, r16
    5dac:	f1 f4       	brne	.+60     	; 0x5dea <optionalPOST()+0x90>
    {
#if defined(WAKEUP_32768HZ_XTAL)
    // Allow (an extra) 1s+ for 32768Hz crystal to start reliably, see: http://www.atmel.com/Images/doc1259.pdf
#if 1 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("Sleeping to let async 32768Hz clock start...");
    5dae:	80 e8       	ldi	r24, 0x80	; 128
    5db0:	95 e0       	ldi	r25, 0x05	; 5
    5db2:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <serialPrintlnAndFlush(__FlashStringHelper const*)>
    5db6:	c4 e1       	ldi	r28, 0x14	; 20
    5db8:	d0 e0       	ldi	r29, 0x00	; 0
#endif
    // Time spent here should not be a whole multiple of basic cycle time to avoid spuriously stationary async clock reading!
    for(int i = 20; (--i >= 0) && (earlySCT == getSubCycleTime()); )
    5dba:	21 97       	sbiw	r28, 0x01	; 1
    5dbc:	8f ef       	ldi	r24, 0xFF	; 255
    5dbe:	cf 3f       	cpi	r28, 0xFF	; 255
    5dc0:	d8 07       	cpc	r29, r24
    5dc2:	e9 f0       	breq	.+58     	; 0x5dfe <optionalPOST()+0xa4>
    5dc4:	80 91 b2 00 	lds	r24, 0x00B2
    5dc8:	18 17       	cp	r17, r24
    5dca:	c9 f4       	brne	.+50     	; 0x5dfe <optionalPOST()+0xa4>
      {
      sleepLowPowerMs(691);
    5dcc:	83 eb       	ldi	r24, 0xB3	; 179
    5dce:	92 e0       	ldi	r25, 0x02	; 2
    5dd0:	0e 94 22 2e 	call	0x5c44	; 0x5c44 <sleepLowPowerMs(unsigned int)>
      captureEntropy1();
    5dd4:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <captureEntropy1()>
    5dd8:	f0 cf       	rjmp	.-32     	; 0x5dba <optionalPOST()+0x60>
#endif
    const uint8_t latestSCT = getSubCycleTime();
    if(latestSCT == earlySCT)
      {
#if 1 && defined(DEBUG)
      DEBUG_SERIAL_PRINTLN_FLASHSTRING("Async 32768Hz clock may not be running!");
    5dda:	88 e5       	ldi	r24, 0x58	; 88
    5ddc:	95 e0       	ldi	r25, 0x05	; 5
    5dde:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif
      panic(F("Xtal dead")); // Async clock not running.
    5de2:	8e e4       	ldi	r24, 0x4E	; 78
    5de4:	95 e0       	ldi	r25, 0x05	; 5
    5de6:	0e 94 a8 2e 	call	0x5d50	; 0x5d50 <panic(__FlashStringHelper const*)>
      }
    }
//  posPOST(2, F("slow RTC clock OK"));

  // Single POST checkpoint for speed.
  posPOST(0, F("Radio, xtal, buttons/sensors OK"));
    5dea:	80 e0       	ldi	r24, 0x00	; 0
    5dec:	6e e2       	ldi	r22, 0x2E	; 46
    5dee:	75 e0       	ldi	r23, 0x05	; 5
    5df0:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <posPOST(unsigned char, __FlashStringHelper const*)>
  }
    5df4:	df 91       	pop	r29
    5df6:	cf 91       	pop	r28
    5df8:	1f 91       	pop	r17
    5dfa:	0f 91       	pop	r16
    5dfc:	08 95       	ret
      {
      sleepLowPowerMs(691);
      captureEntropy1();
      }
#endif
    const uint8_t latestSCT = getSubCycleTime();
    5dfe:	80 91 b2 00 	lds	r24, 0x00B2
    if(latestSCT == earlySCT)
    5e02:	81 17       	cp	r24, r17
    5e04:	91 f7       	brne	.-28     	; 0x5dea <optionalPOST()+0x90>
    5e06:	e9 cf       	rjmp	.-46     	; 0x5dda <optionalPOST()+0x80>

00005e08 <setup>:
  }


// Setup routine: runs once after reset.
// Does some limited board self-test and will panic() if anything is obviously broken.
void setup()
    5e08:	2f 92       	push	r2
    5e0a:	3f 92       	push	r3
    5e0c:	4f 92       	push	r4
    5e0e:	5f 92       	push	r5
    5e10:	6f 92       	push	r6
    5e12:	7f 92       	push	r7
    5e14:	8f 92       	push	r8
    5e16:	9f 92       	push	r9
    5e18:	af 92       	push	r10
    5e1a:	bf 92       	push	r11
    5e1c:	cf 92       	push	r12
    5e1e:	df 92       	push	r13
    5e20:	ef 92       	push	r14
    5e22:	ff 92       	push	r15
    5e24:	0f 93       	push	r16
    5e26:	1f 93       	push	r17
    5e28:	df 93       	push	r29
    5e2a:	cf 93       	push	r28
    5e2c:	00 d0       	rcall	.+0      	; 0x5e2e <setup+0x26>
    5e2e:	00 d0       	rcall	.+0      	; 0x5e30 <setup+0x28>
    5e30:	0f 92       	push	r0
    5e32:	cd b7       	in	r28, 0x3d	; 61
    5e34:	de b7       	in	r29, 0x3e	; 62
  {
  // Set appropriate low-power states, interrupts, etc, ASAP.
  powerSetup();
    5e36:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <powerSetup()>
    5e3a:	0e e0       	ldi	r16, 0x0E	; 14
    5e3c:	10 e0       	ldi	r17, 0x00	; 0
    5e3e:	33 c0       	rjmp	.+102    	; 0x5ea6 <setup+0x9e>
  {
  // Initialise all digital I/O to safe state ASAP and avoid floating lines where possible.
  // In absence of a specific alternative, drive low as an output to minimise consumption (eg from floating input).
  for(int i = 14; --i >= 0; ) // For all digital pins from 0 to 13 inclusive...
    {
    switch(i)
    5e40:	05 30       	cpi	r16, 0x05	; 5
    5e42:	11 05       	cpc	r17, r1
    5e44:	61 f1       	breq	.+88     	; 0x5e9e <setup+0x96>
    5e46:	06 30       	cpi	r16, 0x06	; 6
    5e48:	11 05       	cpc	r17, r1
    5e4a:	34 f4       	brge	.+12     	; 0x5e58 <setup+0x50>
    5e4c:	17 fd       	sbrc	r17, 7
    5e4e:	14 c0       	rjmp	.+40     	; 0x5e78 <setup+0x70>
    5e50:	04 30       	cpi	r16, 0x04	; 4
    5e52:	11 05       	cpc	r17, r1
    5e54:	24 f1       	brlt	.+72     	; 0x5e9e <setup+0x96>
    5e56:	17 c0       	rjmp	.+46     	; 0x5e86 <setup+0x7e>
    5e58:	09 30       	cpi	r16, 0x09	; 9
    5e5a:	11 05       	cpc	r17, r1
    5e5c:	e9 f0       	breq	.+58     	; 0x5e98 <setup+0x90>
    5e5e:	0a 30       	cpi	r16, 0x0A	; 10
    5e60:	11 05       	cpc	r17, r1
    5e62:	24 f4       	brge	.+8      	; 0x5e6c <setup+0x64>
    5e64:	08 30       	cpi	r16, 0x08	; 8
    5e66:	11 05       	cpc	r17, r1
    5e68:	39 f4       	brne	.+14     	; 0x5e78 <setup+0x70>
    5e6a:	19 c0       	rjmp	.+50     	; 0x5e9e <setup+0x96>
    5e6c:	0a 30       	cpi	r16, 0x0A	; 10
    5e6e:	11 05       	cpc	r17, r1
    5e70:	b1 f0       	breq	.+44     	; 0x5e9e <setup+0x96>
    5e72:	0c 30       	cpi	r16, 0x0C	; 12
    5e74:	11 05       	cpc	r17, r1
    5e76:	99 f0       	breq	.+38     	; 0x5e9e <setup+0x96>
      {
      // Low output is good safe low-power default.
      default: { digitalWrite(i, LOW); pinMode(i, OUTPUT); break; }
    5e78:	80 2f       	mov	r24, r16
    5e7a:	60 e0       	ldi	r22, 0x00	; 0
    5e7c:	0e 94 ba 38 	call	0x7174	; 0x7174 <digitalWrite>
    5e80:	80 2f       	mov	r24, r16
    5e82:	61 e0       	ldi	r22, 0x01	; 1
    5e84:	0e c0       	rjmp	.+28     	; 0x5ea2 <setup+0x9a>
      // Switch main UI LED on for the rest of initialisation...
#ifdef LED_HEATCALL
      case LED_HEATCALL: { pinMode(LED_HEATCALL, OUTPUT); digitalWrite(LED_HEATCALL, HIGH); break; }
#endif
#ifdef LED_HEATCALL_L
      case LED_HEATCALL_L: { pinMode(LED_HEATCALL_L, OUTPUT); digitalWrite(LED_HEATCALL_L, LOW); break; }
    5e86:	84 e0       	ldi	r24, 0x04	; 4
    5e88:	61 e0       	ldi	r22, 0x01	; 1
    5e8a:	0e 94 7b 38 	call	0x70f6	; 0x70f6 <pinMode>
    5e8e:	84 e0       	ldi	r24, 0x04	; 4
    5e90:	60 e0       	ldi	r22, 0x00	; 0
    5e92:	0e 94 ba 38 	call	0x7174	; 0x7174 <digitalWrite>
    5e96:	07 c0       	rjmp	.+14     	; 0x5ea6 <setup+0x9e>
#endif

#ifdef PIN_RFM_NIRQ 
      // Set as input to avoid contention current.
      case PIN_RFM_NIRQ: { pinMode(PIN_RFM_NIRQ, INPUT); break; }
    5e98:	89 e0       	ldi	r24, 0x09	; 9
    5e9a:	60 e0       	ldi	r22, 0x00	; 0
    5e9c:	02 c0       	rjmp	.+4      	; 0x5ea2 <setup+0x9a>
#ifdef PIN_SERIAL_RX
      // Weak TX and RX pull-up empirically found to produce lowest leakage current
      // when 2xAA NiMH battery powered and connected to TTL-232R-3V3 USB lead.
      case PIN_SERIAL_RX: case PIN_SERIAL_TX:
#endif
        { pinMode(i, INPUT_PULLUP); break; }
    5e9e:	80 2f       	mov	r24, r16
    5ea0:	62 e0       	ldi	r22, 0x02	; 2
    5ea2:	0e 94 7b 38 	call	0x70f6	; 0x70f6 <pinMode>
// Call this ASAP in setup() to configure I/O safely for the board, avoid pins floating, etc.
static inline void IOSetup()
  {
  // Initialise all digital I/O to safe state ASAP and avoid floating lines where possible.
  // In absence of a specific alternative, drive low as an output to minimise consumption (eg from floating input).
  for(int i = 14; --i >= 0; ) // For all digital pins from 0 to 13 inclusive...
    5ea6:	01 50       	subi	r16, 0x01	; 1
    5ea8:	10 40       	sbci	r17, 0x00	; 0
    5eaa:	17 ff       	sbrs	r17, 7
    5eac:	c9 cf       	rjmp	.-110    	; 0x5e40 <setup+0x38>

  // IO setup for safety, eg to avoid pins floating.
  IOSetup();

  // Restore previous RTC state if available.
  restoreRTC();
    5eae:	0e 94 67 23 	call	0x46ce	; 0x46ce <restoreRTC()>
  // TODO: consider code to calibrate the internal RC oscillator against the xtal, eg to keep serial comms happy, eg http://www.avrfreaks.net/index.php?name=PNphpBB2&file=printview&t=36237&start=0

  serialPrintAndFlush(F("\r\nOpenTRV booting: ")); // Leading CRLF to clear leading junk, eg from bootloader.
    5eb2:	8a e1       	ldi	r24, 0x1A	; 26
    5eb4:	95 e0       	ldi	r25, 0x05	; 5
    5eb6:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <serialPrintAndFlush(__FlashStringHelper const*)>
    serialPrintlnBuildVersion();
    5eba:	0e 94 7e 2e 	call	0x5cfc	; 0x5cfc <serialPrintlnBuildVersion()>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    5ebe:	f9 99       	sbic	0x1f, 1	; 31
    5ec0:	fe cf       	rjmp	.-4      	; 0x5ebe <setup+0xb6>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    5ec2:	86 e0       	ldi	r24, 0x06	; 6
    5ec4:	90 e0       	ldi	r25, 0x00	; 0
    5ec6:	92 bd       	out	0x22, r25	; 34
    5ec8:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    5eca:	f8 9a       	sbi	0x1f, 0	; 31
    5ecc:	20 b5       	in	r18, 0x20	; 32
    5ece:	2d 83       	std	Y+5, r18	; 0x05
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    5ed0:	f9 99       	sbic	0x1f, 1	; 31
    5ed2:	fe cf       	rjmp	.-4      	; 0x5ed0 <setup+0xc8>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    5ed4:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    5ed6:	86 e0       	ldi	r24, 0x06	; 6
    5ed8:	90 e0       	ldi	r25, 0x00	; 0
    5eda:	92 bd       	out	0x22, r25	; 34
    5edc:	81 bd       	out	0x21, r24	; 33

  // Count resets to detect unexpected crashes/restarts.
  const uint8_t oldResetCount = eeprom_read_byte((uint8_t *)EE_START_RESET_COUNT);
  eeprom_write_byte((uint8_t *)EE_START_RESET_COUNT, 1 + oldResetCount);
    5ede:	3d 81       	ldd	r19, Y+5	; 0x05
    5ee0:	3f 5f       	subi	r19, 0xFF	; 255
#endif
    EEDR = __value;
    5ee2:	30 bd       	out	0x20, r19	; 32
    5ee4:	31 50       	subi	r19, 0x01	; 1
    5ee6:	3d 83       	std	Y+5, r19	; 0x05
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    5ee8:	0f b6       	in	r0, 0x3f	; 63
    5eea:	f8 94       	cli
    5eec:	fa 9a       	sbi	0x1f, 2	; 31
    5eee:	f9 9a       	sbi	0x1f, 1	; 31
    5ef0:	0f be       	out	0x3f, r0	; 63

#ifdef DEBUG
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("DEBUG mode with serial logging");
    5ef2:	8b ef       	ldi	r24, 0xFB	; 251
    5ef4:	94 e0       	ldi	r25, 0x04	; 4
    5ef6:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif
#ifdef DEBUG
  DEBUG_SERIAL_PRINT_FLASHSTRING("Resets: ");
    5efa:	82 ef       	ldi	r24, 0xF2	; 242
    5efc:	94 e0       	ldi	r25, 0x04	; 4
    5efe:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(oldResetCount);
    5f02:	8d 81       	ldd	r24, Y+5	; 0x05
    5f04:	90 e0       	ldi	r25, 0x00	; 0
    5f06:	6a e0       	ldi	r22, 0x0A	; 10
    5f08:	70 e0       	ldi	r23, 0x00	; 0
    5f0a:	0e 94 dd 25 	call	0x4bba	; 0x4bba <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    5f0e:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <serialPrintlnAndFlush()>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    5f12:	f9 99       	sbic	0x1f, 1	; 31
    5f14:	fe cf       	rjmp	.-4      	; 0x5f12 <setup+0x10a>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    5f16:	8d e1       	ldi	r24, 0x1D	; 29
    5f18:	90 e0       	ldi	r25, 0x00	; 0
    5f1a:	92 bd       	out	0x22, r25	; 34
    5f1c:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    5f1e:	f8 9a       	sbi	0x1f, 0	; 31
    5f20:	10 b5       	in	r17, 0x20	; 32
  const uint8_t overruns = (~eeprom_read_byte((uint8_t *)EE_START_OVERRUN_COUNTER)) & 0xff;
    5f22:	10 95       	com	r17
  if(0 != overruns)
    5f24:	61 f0       	breq	.+24     	; 0x5f3e <setup+0x136>
    {
    DEBUG_SERIAL_PRINT_FLASHSTRING("Overruns: ");
    5f26:	87 ee       	ldi	r24, 0xE7	; 231
    5f28:	94 e0       	ldi	r25, 0x04	; 4
    5f2a:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <serialPrintAndFlush(__FlashStringHelper const*)>
    DEBUG_SERIAL_PRINT(overruns);
    5f2e:	81 2f       	mov	r24, r17
    5f30:	90 e0       	ldi	r25, 0x00	; 0
    5f32:	6a e0       	ldi	r22, 0x0A	; 10
    5f34:	70 e0       	ldi	r23, 0x00	; 0
    5f36:	0e 94 dd 25 	call	0x4bba	; 0x4bba <serialPrintAndFlush(int, int)>
    DEBUG_SERIAL_PRINTLN();
    5f3a:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <serialPrintlnAndFlush()>
    }
  // Compute approx free RAM: see http://jeelabs.org/2011/05/22/atmega-memory-use/
  DEBUG_SERIAL_PRINT_FLASHSTRING("Free RAM: ");
    5f3e:	8c ed       	ldi	r24, 0xDC	; 220
    5f40:	94 e0       	ldi	r25, 0x04	; 4
    5f42:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <serialPrintAndFlush(__FlashStringHelper const*)>
  extern int __heap_start, *__brkval;
  int x;
  DEBUG_SERIAL_PRINT((int) &x - (__brkval == 0 ? (int) &__heap_start : (int) __brkval));
    5f46:	80 91 f1 04 	lds	r24, 0x04F1
    5f4a:	90 91 f2 04 	lds	r25, 0x04F2
    5f4e:	00 97       	sbiw	r24, 0x00	; 0
    5f50:	11 f0       	breq	.+4      	; 0x5f56 <setup+0x14e>
    5f52:	9c 01       	movw	r18, r24
    5f54:	02 c0       	rjmp	.+4      	; 0x5f5a <setup+0x152>
    5f56:	25 ef       	ldi	r18, 0xF5	; 245
    5f58:	34 e0       	ldi	r19, 0x04	; 4
    5f5a:	ce 01       	movw	r24, r28
    5f5c:	01 96       	adiw	r24, 0x01	; 1
    5f5e:	82 1b       	sub	r24, r18
    5f60:	93 0b       	sbc	r25, r19
    5f62:	6a e0       	ldi	r22, 0x0A	; 10
    5f64:	70 e0       	ldi	r23, 0x00	; 0
    5f66:	0e 94 dd 25 	call	0x4bba	; 0x4bba <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    5f6a:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <serialPrintlnAndFlush()>
// POST may take too long and do unwanted things,
// especially for non-standard hardware setup.
#if defined(ALT_MAIN_LOOP)
  POSTalt(); // Do alternate POST and setup if required.
#else
  optionalPOST();
    5f6e:	0e 94 ad 2e 	call	0x5d5a	; 0x5d5a <optionalPOST()>

  // No external sensors are *assumed* present if running alt main loop.
  // This may mean that the alt loop/POST will have to initialise them explicitly,
  // and the initial seed entropy may be marginally reduced also.
#if !defined(ALT_MAIN_LOOP)
  const int light = AmbLight.read();
    5f72:	84 e6       	ldi	r24, 0x64	; 100
    5f74:	93 e0       	ldi	r25, 0x03	; 3
    5f76:	0e 94 08 33 	call	0x6610	; 0x6610 <AmbientLight::read()>
    5f7a:	5c 01       	movw	r10, r24
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("light: ");
    5f7c:	84 ed       	ldi	r24, 0xD4	; 212
    5f7e:	94 e0       	ldi	r25, 0x04	; 4
    5f80:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(light);
    5f84:	c5 01       	movw	r24, r10
    5f86:	6a e0       	ldi	r22, 0x0A	; 10
    5f88:	70 e0       	ldi	r23, 0x00	; 0
    5f8a:	0e 94 dd 25 	call	0x4bba	; 0x4bba <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    5f8e:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <serialPrintlnAndFlush()>
#endif
//  // Assume 0 or full-scale values unlikely.
//  if((0 == light) || (light >= 1023)) { panic(F("LDR fault")); }
  const int heat = TemperatureC16.read();
    5f92:	8d e6       	ldi	r24, 0x6D	; 109
    5f94:	93 e0       	ldi	r25, 0x03	; 3
    5f96:	0e 94 2c 32 	call	0x6458	; 0x6458 <RoomTemperatureC16::read()>
    5f9a:	1c 01       	movw	r2, r24
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("temp: ");
    5f9c:	8d ec       	ldi	r24, 0xCD	; 205
    5f9e:	94 e0       	ldi	r25, 0x04	; 4
    5fa0:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(heat);
    5fa4:	c1 01       	movw	r24, r2
    5fa6:	6a e0       	ldi	r22, 0x0A	; 10
    5fa8:	70 e0       	ldi	r23, 0x00	; 0
    5faa:	0e 94 dd 25 	call	0x4bba	; 0x4bba <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    5fae:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <serialPrintlnAndFlush()>
#endif
#ifdef HUMIDITY_SENSOR_SUPPORT
  const uint8_t rh = RelHumidity.read();
    5fb2:	89 e6       	ldi	r24, 0x69	; 105
    5fb4:	93 e0       	ldi	r25, 0x03	; 3
    5fb6:	0e 94 94 32 	call	0x6528	; 0x6528 <HumiditySensorSHT21::read()>
    5fba:	e8 2e       	mov	r14, r24
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("RH%: ");
    5fbc:	87 ec       	ldi	r24, 0xC7	; 199
    5fbe:	94 e0       	ldi	r25, 0x04	; 4
    5fc0:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(rh);
    5fc4:	8e 2d       	mov	r24, r14
    5fc6:	90 e0       	ldi	r25, 0x00	; 0
    5fc8:	6a e0       	ldi	r22, 0x0A	; 10
    5fca:	70 e0       	ldi	r23, 0x00	; 0
    5fcc:	0e 94 dd 25 	call	0x4bba	; 0x4bba <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    5fd0:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <serialPrintlnAndFlush()>
#endif
#endif
#if defined(TEMP_POT_AVAILABLE)
  const int tempPot = TempPot.read();
    5fd4:	81 e7       	ldi	r24, 0x71	; 113
    5fd6:	93 e0       	ldi	r25, 0x03	; 3
    5fd8:	0e 94 98 31 	call	0x6330	; 0x6330 <TemperaturePot::read()>
    5fdc:	d8 2e       	mov	r13, r24
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("temp pot: ");
    5fde:	8c eb       	ldi	r24, 0xBC	; 188
    5fe0:	94 e0       	ldi	r25, 0x04	; 4
    5fe2:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(tempPot);
    5fe6:	8d 2d       	mov	r24, r13
    5fe8:	90 e0       	ldi	r25, 0x00	; 0
    5fea:	6a e0       	ldi	r22, 0x0A	; 10
    5fec:	70 e0       	ldi	r23, 0x00	; 0
    5fee:	0e 94 dd 25 	call	0x4bba	; 0x4bba <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    5ff2:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <serialPrintlnAndFlush()>
#endif
#endif
#endif

  // Get current power supply voltage (internal sensor).
  const uint16_t Vcc = Supply_mV.read();
    5ff6:	82 e1       	ldi	r24, 0x12	; 18
    5ff8:	93 e0       	ldi	r25, 0x03	; 3
    5ffa:	0e 94 ac 1d 	call	0x3b58	; 0x3b58 <SupplyVoltageMilliVolts::read()>
    5ffe:	9c 83       	std	Y+4, r25	; 0x04
    6000:	8b 83       	std	Y+3, r24	; 0x03
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("Vcc: ");
    6002:	86 eb       	ldi	r24, 0xB6	; 182
    6004:	94 e0       	ldi	r25, 0x04	; 4
    6006:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(Vcc);
    600a:	8b 81       	ldd	r24, Y+3	; 0x03
    600c:	9c 81       	ldd	r25, Y+4	; 0x04
    600e:	6a e0       	ldi	r22, 0x0A	; 10
    6010:	70 e0       	ldi	r23, 0x00	; 0
    6012:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <serialPrintAndFlush(unsigned int, int)>
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("mV");
    6016:	83 eb       	ldi	r24, 0xB3	; 179
    6018:	94 e0       	ldi	r25, 0x04	; 4
    601a:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif
  // Get internal temperature measurement (internal sensor).
  const int intTempC16 = readInternalTemperatureC16();
    601e:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <readInternalTemperatureC16()>
    6022:	4c 01       	movw	r8, r24
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("Int temp: ");
    6024:	88 ea       	ldi	r24, 0xA8	; 168
    6026:	94 e0       	ldi	r25, 0x04	; 4
    6028:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT((intTempC16 + 8) >> 4);
    602c:	c4 01       	movw	r24, r8
    602e:	08 96       	adiw	r24, 0x08	; 8
    6030:	a4 e0       	ldi	r26, 0x04	; 4
    6032:	95 95       	asr	r25
    6034:	87 95       	ror	r24
    6036:	aa 95       	dec	r26
    6038:	e1 f7       	brne	.-8      	; 0x6032 <setup+0x22a>
    603a:	6a e0       	ldi	r22, 0x0A	; 10
    603c:	70 e0       	ldi	r23, 0x00	; 0
    603e:	0e 94 dd 25 	call	0x4bba	; 0x4bba <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINT_FLASHSTRING("C / ");
    6042:	83 ea       	ldi	r24, 0xA3	; 163
    6044:	94 e0       	ldi	r25, 0x04	; 4
    6046:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(intTempC16);
    604a:	c4 01       	movw	r24, r8
    604c:	6a e0       	ldi	r22, 0x0A	; 10
    604e:	70 e0       	ldi	r23, 0x00	; 0
    6050:	0e 94 dd 25 	call	0x4bba	; 0x4bba <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    6054:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <serialPrintlnAndFlush()>
    6058:	e0 e0       	ldi	r30, 0x00	; 0
    605a:	f1 e0       	ldi	r31, 0x01	; 1
    605c:	44 24       	eor	r4, r4
    605e:	4a 94       	dec	r4
    6060:	54 2c       	mov	r5, r4
        "eor    %A0,__tmp_reg__"

        : "=d" (__ret)
        : "r" (__data), "0" (__crc)
        : "r0"
    );
    6062:	81 91       	ld	r24, Z+
    6064:	a2 01       	movw	r20, r4
    6066:	48 27       	eor	r20, r24
    6068:	04 2e       	mov	r0, r20
    606a:	42 95       	swap	r20
    606c:	40 7f       	andi	r20, 0xF0	; 240
    606e:	40 25       	eor	r20, r0
    6070:	05 2e       	mov	r0, r21
    6072:	54 2f       	mov	r21, r20
    6074:	42 95       	swap	r20
    6076:	4f 70       	andi	r20, 0x0F	; 15
    6078:	04 26       	eor	r0, r20
    607a:	46 95       	lsr	r20
    607c:	54 27       	eor	r21, r20
    607e:	45 27       	eor	r20, r21
    6080:	44 0f       	add	r20, r20
    6082:	44 0f       	add	r20, r20
    6084:	44 0f       	add	r20, r20
    6086:	40 25       	eor	r20, r0
    6088:	2a 01       	movw	r4, r20
#define RAMSTART (0x100)
#endif
static uint16_t sramCRC()
  {
  uint16_t result = ~0U;
  for(uint8_t *p = (uint8_t *)RAMSTART; p <= (uint8_t *)RAMEND; ++p)
    608a:	59 e0       	ldi	r21, 0x09	; 9
    608c:	e0 30       	cpi	r30, 0x00	; 0
    608e:	f5 07       	cpc	r31, r21
    6090:	41 f7       	brne	.-48     	; 0x6062 <setup+0x25a>
    6092:	20 e0       	ldi	r18, 0x00	; 0
    6094:	30 e0       	ldi	r19, 0x00	; 0
    6096:	66 24       	eor	r6, r6
    6098:	6a 94       	dec	r6
    609a:	76 2c       	mov	r7, r6
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    609c:	f9 99       	sbic	0x1f, 1	; 31
    609e:	fe cf       	rjmp	.-4      	; 0x609c <setup+0x294>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    60a0:	32 bd       	out	0x22, r19	; 34
    60a2:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    60a4:	f8 9a       	sbi	0x1f, 0	; 31
    60a6:	80 b5       	in	r24, 0x20	; 32
    60a8:	a3 01       	movw	r20, r6
    60aa:	48 27       	eor	r20, r24
    60ac:	04 2e       	mov	r0, r20
    60ae:	42 95       	swap	r20
    60b0:	40 7f       	andi	r20, 0xF0	; 240
    60b2:	40 25       	eor	r20, r0
    60b4:	05 2e       	mov	r0, r21
    60b6:	54 2f       	mov	r21, r20
    60b8:	42 95       	swap	r20
    60ba:	4f 70       	andi	r20, 0x0F	; 15
    60bc:	04 26       	eor	r0, r20
    60be:	46 95       	lsr	r20
    60c0:	54 27       	eor	r21, r20
    60c2:	45 27       	eor	r20, r21
    60c4:	44 0f       	add	r20, r20
    60c6:	44 0f       	add	r20, r20
    60c8:	44 0f       	add	r20, r20
    60ca:	40 25       	eor	r20, r0
    60cc:	3a 01       	movw	r6, r20
  }
// Compute a CRC of all of EEPROM as a hash that may contain some entropy, particularly across restarts.
static uint16_t eeCRC()
  {
  uint16_t result = ~0U;
  for(uint8_t *p = (uint8_t *)0; p <= (uint8_t *)E2END; ++p)
    60ce:	2f 5f       	subi	r18, 0xFF	; 255
    60d0:	3f 4f       	sbci	r19, 0xFF	; 255
    60d2:	54 e0       	ldi	r21, 0x04	; 4
    60d4:	20 30       	cpi	r18, 0x00	; 0
    60d6:	35 07       	cpc	r19, r21
    60d8:	09 f7       	brne	.-62     	; 0x609c <setup+0x294>
#if defined(HUMIDITY_SENSOR_SUPPORT)
                       ((((uint16_t)rh) << 8) - rh) ^
#endif
#endif
                       (getMinutesSinceMidnightLT() << 5) ^
                       (((uint16_t)getSubCycleTime()) << 6);
    60da:	0d 2d       	mov	r16, r13
    60dc:	10 e0       	ldi	r17, 0x00	; 0
    60de:	ff 24       	eor	r15, r15
    60e0:	0e 94 45 23 	call	0x468a	; 0x468a <getMinutesSinceMidnightLT()>
    60e4:	20 91 b2 00 	lds	r18, 0x00B2
    60e8:	c2 2e       	mov	r12, r18
    60ea:	dd 24       	eor	r13, r13
    60ec:	f6 e0       	ldi	r31, 0x06	; 6
    60ee:	cc 0c       	add	r12, r12
    60f0:	dd 1c       	adc	r13, r13
    60f2:	fa 95       	dec	r31
    60f4:	e1 f7       	brne	.-8      	; 0x60ee <setup+0x2e6>
    60f6:	25 e3       	ldi	r18, 0x35	; 53
    60f8:	30 e0       	ldi	r19, 0x00	; 0
    60fa:	c2 2a       	or	r12, r18
    60fc:	d3 2a       	or	r13, r19
    60fe:	4b 81       	ldd	r20, Y+3	; 0x03
    6100:	5c 81       	ldd	r21, Y+4	; 0x04
    6102:	c4 26       	eor	r12, r20
    6104:	d5 26       	eor	r13, r21
    6106:	88 0c       	add	r8, r8
    6108:	99 1c       	adc	r9, r9
    610a:	c8 24       	eor	r12, r8
    610c:	d9 24       	eor	r13, r9
    610e:	22 0c       	add	r2, r2
    6110:	33 1c       	adc	r3, r3
    6112:	22 0c       	add	r2, r2
    6114:	33 1c       	adc	r3, r3
    6116:	c2 24       	eor	r12, r2
    6118:	d3 24       	eor	r13, r3
    611a:	64 e0       	ldi	r22, 0x04	; 4
    611c:	aa 0c       	add	r10, r10
    611e:	bb 1c       	adc	r11, r11
    6120:	6a 95       	dec	r22
    6122:	e1 f7       	brne	.-8      	; 0x611c <setup+0x314>
    6124:	ca 24       	eor	r12, r10
    6126:	db 24       	eor	r13, r11
    6128:	3e 2d       	mov	r19, r14
    612a:	22 27       	eor	r18, r18
    612c:	2e 19       	sub	r18, r14
    612e:	3f 09       	sbc	r19, r15
    6130:	c2 26       	eor	r12, r18
    6132:	d3 26       	eor	r13, r19
    6134:	98 01       	movw	r18, r16
    6136:	43 e0       	ldi	r20, 0x03	; 3
    6138:	22 0f       	add	r18, r18
    613a:	33 1f       	adc	r19, r19
    613c:	4a 95       	dec	r20
    613e:	e1 f7       	brne	.-8      	; 0x6138 <setup+0x330>
    6140:	20 0f       	add	r18, r16
    6142:	31 1f       	adc	r19, r17
    6144:	c2 26       	eor	r12, r18
    6146:	d3 26       	eor	r13, r19
    6148:	25 e0       	ldi	r18, 0x05	; 5
    614a:	88 0f       	add	r24, r24
    614c:	99 1f       	adc	r25, r25
    614e:	2a 95       	dec	r18
    6150:	e1 f7       	brne	.-8      	; 0x614a <setup+0x342>
    6152:	c8 26       	eor	r12, r24
    6154:	d9 26       	eor	r13, r25

  //const long seed1 = ((((long) clockJitterRTC()) << 13) ^ (((long)clockJitterWDT()) << 21) ^ (((long)(srseed^eeseed)) << 16)) + s16;
  // Seed simple/fast/small built-in PRNG.  (Smaller and faster than srandom()/random().)
  const uint8_t nar1 = noisyADCRead();
    6156:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <noisyADCRead()>
    615a:	18 2f       	mov	r17, r24
  seedRNG8(nar1 ^ (uint8_t) s16, oldResetCount - (uint8_t)((s16+eeseed) >> 8), clockJitterWDT() ^ (uint8_t)srseed);
    615c:	3c 2c       	mov	r3, r12
    615e:	38 26       	eor	r3, r24
    6160:	c6 01       	movw	r24, r12
    6162:	86 0d       	add	r24, r6
    6164:	97 1d       	adc	r25, r7
    6166:	8d 80       	ldd	r8, Y+5	; 0x05
    6168:	89 1a       	sub	r8, r25
    616a:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <clockJitterWDT()>
    616e:	e4 2c       	mov	r14, r4
    6170:	48 2f       	mov	r20, r24
    6172:	44 25       	eor	r20, r4
    6174:	83 2d       	mov	r24, r3
    6176:	68 2d       	mov	r22, r8
    6178:	0e 94 90 20 	call	0x4120	; 0x4120 <seedRNG8(unsigned char, unsigned char, unsigned char)>
  DEBUG_SERIAL_PRINTFMT(nar1, BIN);
  DEBUG_SERIAL_PRINTLN();
#endif
  // TODO: seed other/better PRNGs.
  // Feed in mainly persistent/nonvolatile state explicitly. 
  addEntropyToPool(oldResetCount ^ eeseed, 0);
    617c:	96 2c       	mov	r9, r6
    617e:	8d 81       	ldd	r24, Y+5	; 0x05
    6180:	86 25       	eor	r24, r6
    6182:	60 e0       	ldi	r22, 0x00	; 0
    6184:	0e 94 29 25 	call	0x4a52	; 0x4a52 <addEntropyToPool(unsigned char, unsigned char)>
  addEntropyToPool((uint8_t)(eeseed >> 8) + nar1, 0);
    6188:	a7 2c       	mov	r10, r7
    618a:	bb 24       	eor	r11, r11
    618c:	81 2f       	mov	r24, r17
    618e:	8a 0d       	add	r24, r10
    6190:	60 e0       	ldi	r22, 0x00	; 0
    6192:	0e 94 29 25 	call	0x4a52	; 0x4a52 <addEntropyToPool(unsigned char, unsigned char)>
  addEntropyToPool((uint8_t)s16 ^ (uint8_t)(s16 >> 8) , 0);
    6196:	8c 2d       	mov	r24, r12
    6198:	8d 25       	eor	r24, r13
    619a:	60 e0       	ldi	r22, 0x00	; 0
    619c:	0e 94 29 25 	call	0x4a52	; 0x4a52 <addEntropyToPool(unsigned char, unsigned char)>
    61a0:	02 e0       	ldi	r16, 0x02	; 2
    61a2:	10 e0       	ldi	r17, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    61a4:	f9 99       	sbic	0x1f, 1	; 31
    61a6:	fe cf       	rjmp	.-4      	; 0x61a4 <setup+0x39c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    61a8:	12 bd       	out	0x22, r17	; 34
    61aa:	01 bd       	out	0x21, r16	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    61ac:	f8 9a       	sbi	0x1f, 0	; 31
    61ae:	80 b5       	in	r24, 0x20	; 32
  for(uint8_t i = 0; i < EE_LEN_SEED; ++i)
    { addEntropyToPool(eeprom_read_byte((uint8_t *)(EE_START_SEED + i)), 0); }
    61b0:	60 e0       	ldi	r22, 0x00	; 0
    61b2:	0e 94 29 25 	call	0x4a52	; 0x4a52 <addEntropyToPool(unsigned char, unsigned char)>
    61b6:	0f 5f       	subi	r16, 0xFF	; 255
    61b8:	1f 4f       	sbci	r17, 0xFF	; 255
  // TODO: seed other/better PRNGs.
  // Feed in mainly persistent/nonvolatile state explicitly. 
  addEntropyToPool(oldResetCount ^ eeseed, 0);
  addEntropyToPool((uint8_t)(eeseed >> 8) + nar1, 0);
  addEntropyToPool((uint8_t)s16 ^ (uint8_t)(s16 >> 8) , 0);
  for(uint8_t i = 0; i < EE_LEN_SEED; ++i)
    61ba:	06 30       	cpi	r16, 0x06	; 6
    61bc:	11 05       	cpc	r17, r1
    61be:	91 f7       	brne	.-28     	; 0x61a4 <setup+0x39c>
    { addEntropyToPool(eeprom_read_byte((uint8_t *)(EE_START_SEED + i)), 0); }
  addEntropyToPool(noisyADCRead(), 4); // Conservative first push of noise into pool.
    61c0:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <noisyADCRead()>
    61c4:	64 e0       	ldi	r22, 0x04	; 4
    61c6:	0e 94 29 25 	call	0x4a52	; 0x4a52 <addEntropyToPool(unsigned char, unsigned char)>
  // Carry a few bits of entropy over a reset by picking one of the four designated EEPROM bytes at random;
  // if zero, erase to 0xff, else AND in part of the seed including some of the previous EEPROM hash (and write).
  // This amounts to about a quarter of an erase/write cycle per reset/restart per byte, or 400k restarts endurance!
  // These 4 bytes should be picked up as part of the hash/CRC of EEPROM above, next time,
  // essentially forming a longish-cycle (poor) PRNG even with little new real entropy each time.
  seedRNG8(nar1 ^ (uint8_t) s16, oldResetCount - (uint8_t)((s16+eeseed) >> 8), clockJitterWDT() ^ (uint8_t)srseed);
    61ca:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <clockJitterWDT()>
    61ce:	e8 26       	eor	r14, r24
    61d0:	83 2d       	mov	r24, r3
    61d2:	68 2d       	mov	r22, r8
    61d4:	4e 2d       	mov	r20, r14
    61d6:	0e 94 90 20 	call	0x4120	; 0x4120 <seedRNG8(unsigned char, unsigned char, unsigned char)>
  uint8_t *const erp = (uint8_t *)(EE_START_SEED + (3&((s16)^((eeseed>>8)+(__TIME__[7]))))); // Use some new and some eeseed bits to choose which byte to updated.
    61da:	c5 01       	movw	r24, r10
    61dc:	c5 96       	adiw	r24, 0x35	; 53
    61de:	8c 25       	eor	r24, r12
    61e0:	9d 25       	eor	r25, r13
    61e2:	83 70       	andi	r24, 0x03	; 3
    61e4:	90 70       	andi	r25, 0x00	; 0
    61e6:	02 96       	adiw	r24, 0x02	; 2
    61e8:	18 2f       	mov	r17, r24
    61ea:	09 2f       	mov	r16, r25
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    61ec:	f9 99       	sbic	0x1f, 1	; 31
    61ee:	fe cf       	rjmp	.-4      	; 0x61ec <setup+0x3e4>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    61f0:	92 bd       	out	0x22, r25	; 34
    61f2:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    61f4:	f8 9a       	sbi	0x1f, 0	; 31
    61f6:	80 b5       	in	r24, 0x20	; 32
  const uint8_t erv = eeprom_read_byte(erp);
  if(0 == erv) { eeprom_smart_erase_byte(erp); }
    61f8:	88 23       	and	r24, r24
    61fa:	29 f4       	brne	.+10     	; 0x6206 <setup+0x3fe>
    61fc:	81 2f       	mov	r24, r17
    61fe:	90 2f       	mov	r25, r16
    6200:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <eeprom_smart_erase_byte(unsigned char*)>
    6204:	08 c0       	rjmp	.+16     	; 0x6216 <setup+0x40e>
  else { eeprom_smart_clear_bits(erp, clockJitterEntropyByte() + ((uint8_t)eeseed)); } // Nominally include disjoint set of eeseed bits in choice of which to clear.
    6206:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <clockJitterEntropyByte()>
    620a:	98 0e       	add	r9, r24
    620c:	81 2f       	mov	r24, r17
    620e:	90 2f       	mov	r25, r16
    6210:	69 2d       	mov	r22, r9
    6212:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <eeprom_smart_clear_bits(unsigned char*, unsigned char)>
#endif


#if !defined(ALT_MAIN_LOOP)
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("Computing initial target/demand...");
    6216:	80 e8       	ldi	r24, 0x80	; 128
    6218:	94 e0       	ldi	r25, 0x04	; 4
    621a:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <serialPrintlnAndFlush(__FlashStringHelper const*)>
  public:
    // Force a read/poll/recomputation of the target position and call for heat.
    // Sets/clears changed flag if computed valve position changed.
    // Call at a fixed rate (1/60s).
    // Potentially expensive/slow.
    virtual uint8_t read() { valveMoved = computeCallForHeat(); return(value); }
    621e:	8e ef       	ldi	r24, 0xFE	; 254
    6220:	91 e0       	ldi	r25, 0x01	; 1
    6222:	0e 94 44 0b 	call	0x1688	; 0x1688 <ModelledRadValve::computeCallForHeat()>
    6226:	80 93 03 02 	sts	0x0203, r24
    622a:	80 91 00 02 	lds	r24, 0x0200
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("Creating initial FHT8V frame...");
#endif
  // Unconditionally ensure that a valid FHT8V TRV command frame has been computed and stored
  // in case this unit is actually controlling a local valve.
  FHT8VCreateValveSetCmdFrame();
    622e:	0e 94 5e 14 	call	0x28bc	; 0x28bc <FHT8VCreateValveSetCmdFrame()>


  // Ensure unique node ID set up (mainly on first use).
  // Have one attempt (don't want to bang already failign EEPROM) to force-reset if not good, then panic.
  // Needs to have had entropy gathered, etc.
  if(!ensureIDCreated())
    6232:	80 e0       	ldi	r24, 0x00	; 0
    6234:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <ensureIDCreated(bool)>
    6238:	88 23       	and	r24, r24
    623a:	49 f4       	brne	.+18     	; 0x624e <setup+0x446>
    {
    if(!ensureIDCreated(true)) // Force reset.
    623c:	81 e0       	ldi	r24, 0x01	; 1
    623e:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <ensureIDCreated(bool)>
    6242:	88 23       	and	r24, r24
    6244:	21 f4       	brne	.+8      	; 0x624e <setup+0x446>
      { panic(F("Invalid ID and cannot reset, sorry.")); }
    6246:	8c e5       	ldi	r24, 0x5C	; 92
    6248:	94 e0       	ldi	r25, 0x04	; 4
    624a:	0e 94 a8 2e 	call	0x5d50	; 0x5d50 <panic(__FlashStringHelper const*)>
    }


  // Initialised: turn heatcall UI LED off.
//  pinMode(LED_HEATCALL, OUTPUT);
  LED_HEATCALL_OFF();
    624e:	5c 9a       	sbi	0x0b, 4	; 11
  
#if defined(SUPPORT_CLI) && !defined(ALT_MAIN_LOOP)
  // Help user get to CLI.
  serialPrintlnAndFlush(F("? at CLI prompt for help"));
    6250:	83 e4       	ldi	r24, 0x43	; 67
    6252:	94 e0       	ldi	r25, 0x04	; 4
    6254:	0e 94 25 26 	call	0x4c4a	; 0x4c4a <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif

#if !defined(ALT_MAIN_LOOP)
  // Report initial status.
  serialStatusReport();
    6258:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <serialStatusReport()>
  // Do OpenTRV-specific (late) setup.
  setupOpenTRV();
    625c:	0e 94 93 08 	call	0x1126	; 0x1126 <setupOpenTRV()>
#endif
  }
    6260:	0f 90       	pop	r0
    6262:	0f 90       	pop	r0
    6264:	0f 90       	pop	r0
    6266:	0f 90       	pop	r0
    6268:	0f 90       	pop	r0
    626a:	cf 91       	pop	r28
    626c:	df 91       	pop	r29
    626e:	1f 91       	pop	r17
    6270:	0f 91       	pop	r16
    6272:	ff 90       	pop	r15
    6274:	ef 90       	pop	r14
    6276:	df 90       	pop	r13
    6278:	cf 90       	pop	r12
    627a:	bf 90       	pop	r11
    627c:	af 90       	pop	r10
    627e:	9f 90       	pop	r9
    6280:	8f 90       	pop	r8
    6282:	7f 90       	pop	r7
    6284:	6f 90       	pop	r6
    6286:	5f 90       	pop	r5
    6288:	4f 90       	pop	r4
    628a:	3f 90       	pop	r3
    628c:	2f 90       	pop	r2
    628e:	08 95       	ret

00006290 <SimpleTSUint8Sensor::get() const>:
  public:
    // Return last value fetched by read(); undefined before first read().
    // Usually fast.
    // Often likely to be thread-safe or usable within ISRs (Interrupt Service Routines),
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual uint8_t get() const { return(value); }
    6290:	fc 01       	movw	r30, r24
    6292:	82 81       	ldd	r24, Z+2	; 0x02
    6294:	08 95       	ret

00006296 <AmbientLight::preferredPollInterval_s() const>:
    // Potentially expensive/slow.
    // Not thread-safe nor usable within ISRs (Interrupt Service Routines).
    virtual uint16_t read();

    // Preferred poll interval (in seconds); should bve called at constant rate, usually 1/60s.
    virtual uint8_t preferredPollInterval_s() const { return(60); }
    6296:	8c e3       	ldi	r24, 0x3C	; 60
    6298:	08 95       	ret

0000629a <AmbientLight::get() const>:

    // Return last value fetched by read(); undefined before first read().
    // Fast.
    // Thread-safe and usable within ISRs (Interrupt Service Routines).
    virtual uint16_t get() const { return(value); }
    629a:	fc 01       	movw	r30, r24
    629c:	82 81       	ldd	r24, Z+2	; 0x02
    629e:	93 81       	ldd	r25, Z+3	; 0x03
    62a0:	08 95       	ret

000062a2 <AmbientLight::isValid(unsigned int) const>:

    // Returns true if the sensor reading value passed is potentially valid, eg in-range.
    virtual bool isValid(const uint16_t value) const { return(value < 1024); }
    62a2:	80 e0       	ldi	r24, 0x00	; 0
    62a4:	60 50       	subi	r22, 0x00	; 0
    62a6:	74 40       	sbci	r23, 0x04	; 4
    62a8:	08 f4       	brcc	.+2      	; 0x62ac <AmbientLight::isValid(unsigned int) const+0xa>
    62aa:	81 e0       	ldi	r24, 0x01	; 1
    62ac:	08 95       	ret

000062ae <RoomTemperatureC16::get() const>:
    virtual int read();

    // Return last value fetched by read(); undefined before first read().
    // Fast.
    // Not thread-safe nor usable within ISRs (Interrupt Service Routines).
    virtual int get() const { return(value); }
    62ae:	fc 01       	movw	r30, r24
    62b0:	82 81       	ldd	r24, Z+2	; 0x02
    62b2:	93 81       	ldd	r25, Z+3	; 0x03
    62b4:	08 95       	ret

000062b6 <HumiditySensorSHT21::isValid(unsigned char) const>:
    // Potentially expensive/slow.
    // Not thread-safe nor usable within ISRs (Interrupt Service Routines).
    virtual uint8_t read();

    // Returns true if the sensor reading value passed is potentially valid, ie in range [0,100].
    virtual bool isValid(const uint8_t value) const { return(value <= 100); }
    62b6:	80 e0       	ldi	r24, 0x00	; 0
    62b8:	65 36       	cpi	r22, 0x65	; 101
    62ba:	08 f4       	brcc	.+2      	; 0x62be <HumiditySensorSHT21::isValid(unsigned char) const+0x8>
    62bc:	81 e0       	ldi	r24, 0x01	; 1
    62be:	08 95       	ret

000062c0 <Sensor<int>::isValid(int) const>:
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual T get() const = 0;

    // Returns true if this sensor reading value passed is potentially valid, eg in-range.
    // Default is to always return true, ie all values potentially valid.
    virtual bool isValid(T value) const { return(true); }
    62c0:	81 e0       	ldi	r24, 0x01	; 1
    62c2:	08 95       	ret

000062c4 <Sensor<int>::preferredPollInterval_s() const>:
 
    // Returns non-zero if this implementation requires a regular call to read() to operate correctly.
    // Preferred poll interval (in seconds) or 0 if no regular poll() call required.
    // Default returns 0 indicating regular call to read() not required,
    // only as required to fetch new values from the underlying sensor.
    virtual uint8_t preferredPollInterval_s() const { return(0); }
    62c4:	80 e0       	ldi	r24, 0x00	; 0
    62c6:	08 95       	ret

000062c8 <Sensor<int>::handleInterruptSimple()>:
    // Must be fast and ISR (Interrupt Service Routine) safe.
    // Returns true if interrupt was successfully handled and cleared
    // else another interrupt handler in the chain may be called
    // to attempt to clear the interrupt.
    // By default does nothing (and returns false).
    virtual bool handleInterruptSimple() { return(false); }
    62c8:	80 e0       	ldi	r24, 0x00	; 0
    62ca:	08 95       	ret

000062cc <Sensor<int>::begin()>:

    // Begin access to this sensor if applicable and not already begun.
    // Returns true if it needed to be begun.
    // Allows logic to end() if required at the end of a block, etc.
    // Defaults to do nothing (and return false).
    virtual bool begin() { return(false); }
    62cc:	80 e0       	ldi	r24, 0x00	; 0
    62ce:	08 95       	ret

000062d0 <Sensor<int>::isAvailable() const>:

    // Returns true if this sensor is currently available.
    // True by default unless implementation overrides.
    // For those sensors that need starting this will be false before begin().
    virtual bool isAvailable() const { return(true); }
    62d0:	81 e0       	ldi	r24, 0x01	; 1
    62d2:	08 95       	ret

000062d4 <Sensor<int>::end()>:

    // End access to this sensor if applicable and not already ended.
    // Returns true if it needed to be ended.
    // Defaults to do nothing (and return false).
    virtual bool end() { return(false); }
    62d4:	80 e0       	ldi	r24, 0x00	; 0
    62d6:	08 95       	ret

000062d8 <global constructors keyed to _ZN12AmbientLight4readEv>:
    // Marked volatile for thread-safe (simple) lock-free access.
    volatile bool isRoomLitFlag;
 
  public:
    // Initialise to cautious values.
    AmbientLight() : value(0) { }
    62d8:	85 ec       	ldi	r24, 0xC5	; 197
    62da:	91 e0       	ldi	r25, 0x01	; 1
    62dc:	90 93 65 03 	sts	0x0365, r25
    62e0:	80 93 64 03 	sts	0x0364, r24
    62e4:	10 92 67 03 	sts	0x0367, r1
    62e8:	10 92 66 03 	sts	0x0366, r1
      volatile uint8_t value;

      // By default initialise the value to zero.
      SimpleTSUint8Sensor() : value(0) { }
      // Can initialise to a chosen value.
      SimpleTSUint8Sensor(const uint8_t v) : value(v) { }
    62ec:	8f ef       	ldi	r24, 0xFF	; 255
    62ee:	80 93 6b 03 	sts	0x036B, r24
    // True if RH% is high, with hysteresis.
    // Marked volatile for thread-safe lock-free access.
    volatile bool highWithHyst;

  public:
    HumiditySensorSHT21() : SimpleTSUint8Sensor(255), highWithHyst(false) { }
    62f2:	81 eb       	ldi	r24, 0xB1	; 177
    62f4:	91 e0       	ldi	r25, 0x01	; 1
    62f6:	90 93 6a 03 	sts	0x036A, r25
    62fa:	80 93 69 03 	sts	0x0369, r24
    62fe:	10 92 6c 03 	sts	0x036C, r1
    // Room temperature in 16*C, eg 1 is 1/16 C, 32 is 2C, -64 is -4C.
    int value;

  public:
    // Initialise to cautious values.
    RoomTemperatureC16() : value(0) { }
    6302:	8d e9       	ldi	r24, 0x9D	; 157
    6304:	91 e0       	ldi	r25, 0x01	; 1
    6306:	90 93 6e 03 	sts	0x036E, r25
    630a:	80 93 6d 03 	sts	0x036D, r24
    630e:	10 92 70 03 	sts	0x0370, r1
    6312:	10 92 6f 03 	sts	0x036F, r1
  {
  protected:
      volatile uint8_t value;

      // By default initialise the value to zero.
      SimpleTSUint8Sensor() : value(0) { }
    6316:	10 92 73 03 	sts	0x0373, r1
    // Raw pot value [0,1023] if extra precision is required.
    uint16_t raw;

  public:
    // Initialise to cautious values.
    TemperaturePot() : raw(0) { }
    631a:	89 e8       	ldi	r24, 0x89	; 137
    631c:	91 e0       	ldi	r25, 0x01	; 1
    631e:	90 93 72 03 	sts	0x0372, r25
    6322:	80 93 71 03 	sts	0x0371, r24
    6326:	10 92 75 03 	sts	0x0375, r1
    632a:	10 92 74 03 	sts	0x0374, r1

  return(tp);
  }

// Singleton implementation/instance.
TemperaturePot TempPot;
    632e:	08 95       	ret

00006330 <TemperaturePot::read()>:

// Force a read/poll of the temperature pot and return the value sensed [0,255] (cold to hot).
// Potentially expensive/slow.
// This value has some hysteresis applied to reduce noise.
// Not thread-safe nor usable within ISRs (Interrupt Service Routines).
uint8_t TemperaturePot::read()
    6330:	ef 92       	push	r14
    6332:	ff 92       	push	r15
    6334:	0f 93       	push	r16
    6336:	1f 93       	push	r17
    6338:	cf 93       	push	r28
    633a:	df 93       	push	r29
    633c:	ec 01       	movw	r28, r24
  {
  power_intermittent_peripherals_enable(false); // No need to wait for anything to stablise as direct of IO_POWER_UP.
    633e:	80 e0       	ldi	r24, 0x00	; 0
    6340:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <power_intermittent_peripherals_enable(bool)>
  const uint16_t tpRaw = analogueNoiseReducedRead(TEMP_POT_AIN, DEFAULT); // Vcc reference.
    6344:	81 e0       	ldi	r24, 0x01	; 1
    6346:	90 e0       	ldi	r25, 0x00	; 0
    6348:	61 e0       	ldi	r22, 0x01	; 1
    634a:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <analogueNoiseReducedRead(int, unsigned char)>
    634e:	8c 01       	movw	r16, r24
  power_intermittent_peripherals_disable();
    6350:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <power_intermittent_peripherals_disable()>

#if defined(TEMP_POT_REVERSE)
  const uint16_t tp = TEMP_POT_RAW_MAX - tpRaw; // Travel is in opposite direction to natural!
    6354:	3f ef       	ldi	r19, 0xFF	; 255
    6356:	e3 2e       	mov	r14, r19
    6358:	33 e0       	ldi	r19, 0x03	; 3
    635a:	f3 2e       	mov	r15, r19
    635c:	e0 1a       	sub	r14, r16
    635e:	f1 0a       	sbc	r15, r17
#endif

  // TODO: capture entropy from changed LS bits esp if reduced-noise version doesn't change.

  // Store new raw value.
  raw = tp;
    6360:	fc 82       	std	Y+4, r15	; 0x04
    6362:	eb 82       	std	Y+3, r14	; 0x03

  // Capture reduced-noise value with a little hysteresis.
  const uint8_t oldValue = value;
    6364:	3a 81       	ldd	r19, Y+2	; 0x02
  const uint8_t shifted = tp >> 2; // Keep signed to avoid wrap-round confusion.
    6366:	c7 01       	movw	r24, r14
    6368:	96 95       	lsr	r25
    636a:	87 95       	ror	r24
    636c:	96 95       	lsr	r25
    636e:	87 95       	ror	r24
    6370:	28 2f       	mov	r18, r24
  if(((shifted > oldValue) && (shifted - oldValue >= RN_HYST)) ||
    6372:	38 17       	cp	r19, r24
    6374:	20 f4       	brcc	.+8      	; 0x637e <TemperaturePot::read()+0x4e>
    6376:	90 e0       	ldi	r25, 0x00	; 0
    6378:	83 1b       	sub	r24, r19
    637a:	91 09       	sbc	r25, r1
    637c:	06 c0       	rjmp	.+12     	; 0x638a <TemperaturePot::read()+0x5a>
    637e:	83 17       	cp	r24, r19
    6380:	f8 f4       	brcc	.+62     	; 0x63c0 <TemperaturePot::read()+0x90>
    6382:	83 2f       	mov	r24, r19
    6384:	90 e0       	ldi	r25, 0x00	; 0
    6386:	82 1b       	sub	r24, r18
    6388:	91 09       	sbc	r25, r1
    638a:	04 97       	sbiw	r24, 0x04	; 4
    638c:	cc f0       	brlt	.+50     	; 0x63c0 <TemperaturePot::read()+0x90>
     ((shifted < oldValue) && (oldValue - shifted >= RN_HYST)))
    {
    const uint8_t rn = (uint8_t) shifted;
    // Atomically store reduced-noise normalised value.
    value = rn;
    638e:	2a 83       	std	Y+2, r18	; 0x02
    // Possible to get reasonable functionality without using MODE button.
    //
    // NOTE: without ignoredFirst this will also respond to the initial position of the pot
    //   as the first reading is taken, ie may force to WARM or BAKE.
    static bool ignoredFirst;
    if(!ignoredFirst) { ignoredFirst = true; }
    6390:	80 91 76 03 	lds	r24, 0x0376
    6394:	88 23       	and	r24, r24
    6396:	21 f4       	brne	.+8      	; 0x63a0 <TemperaturePot::read()+0x70>
    6398:	81 e0       	ldi	r24, 0x01	; 1
    639a:	80 93 76 03 	sts	0x0376, r24
    639e:	0e c0       	rjmp	.+28     	; 0x63bc <TemperaturePot::read()+0x8c>
    // Force FROST mode when right at bottom of dial.
    else if(rn < RN_FRBO) { setWarmModeDebounced(false); }
    63a0:	28 30       	cpi	r18, 0x08	; 8
    63a2:	10 f4       	brcc	.+4      	; 0x63a8 <TemperaturePot::read()+0x78>
    63a4:	80 e0       	ldi	r24, 0x00	; 0
    63a6:	08 c0       	rjmp	.+16     	; 0x63b8 <TemperaturePot::read()+0x88>
#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
    // Start BAKE mode when dial turned up to top.
    else if(rn > (255-RN_FRBO)) { startBakeDebounced(); }
    63a8:	28 3f       	cpi	r18, 0xF8	; 248
    63aa:	18 f0       	brcs	.+6      	; 0x63b2 <TemperaturePot::read()+0x82>
    63ac:	0e 94 63 04 	call	0x8c6	; 0x8c6 <startBakeDebounced()>
    63b0:	05 c0       	rjmp	.+10     	; 0x63bc <TemperaturePot::read()+0x8c>
#endif
    // Force WARM mode if pot/temperature turned up.
    else if(rn > oldValue) { setWarmModeDebounced(true); }
    63b2:	32 17       	cp	r19, r18
    63b4:	18 f4       	brcc	.+6      	; 0x63bc <TemperaturePot::read()+0x8c>
    63b6:	81 e0       	ldi	r24, 0x01	; 1
    63b8:	0e 94 50 04 	call	0x8a0	; 0x8a0 <setWarmModeDebounced(bool)>

    markUIControlUsed(); // Note user operation of pot.
    63bc:	0e 94 d7 2c 	call	0x59ae	; 0x59ae <markUIControlUsed()>
  DEBUG_SERIAL_PRINT(tempPotReducedNoise);
  DEBUG_SERIAL_PRINTLN();
#endif

  return(tp);
  }
    63c0:	8e 2d       	mov	r24, r14
    63c2:	df 91       	pop	r29
    63c4:	cf 91       	pop	r28
    63c6:	1f 91       	pop	r17
    63c8:	0f 91       	pop	r16
    63ca:	ff 90       	pop	r15
    63cc:	ef 90       	pop	r14
    63ce:	08 95       	ret

000063d0 <SHT21_init()>:
// Set true once SHT21 has been initialised.
static volatile bool SHT21_initialised;

// Initialise/configure SHT21, once only generally.
// TWI must already be powered up.
static void SHT21_init()
    63d0:	1f 93       	push	r17
  {
#if defined(SHT21_USE_REDUCED_PRECISION)
  // Soft reset in order to sample at reduced precision.
  Wire.beginTransmission(SHT21_I2C_ADDR);
    63d2:	8e eb       	ldi	r24, 0xBE	; 190
    63d4:	93 e0       	ldi	r25, 0x03	; 3
    63d6:	60 e4       	ldi	r22, 0x40	; 64
    63d8:	70 e0       	ldi	r23, 0x00	; 0
    63da:	0e 94 93 33 	call	0x6726	; 0x6726 <TwoWire::beginTransmission(int)>
  Wire.write((byte) SHT21_I2C_CMD_USERREG); // Select control register.
    63de:	8e eb       	ldi	r24, 0xBE	; 190
    63e0:	93 e0       	ldi	r25, 0x03	; 3
    63e2:	67 ee       	ldi	r22, 0xE7	; 231
    63e4:	0e 94 15 34 	call	0x682a	; 0x682a <TwoWire::write(unsigned char)>
  Wire.endTransmission();
    63e8:	8e eb       	ldi	r24, 0xBE	; 190
    63ea:	93 e0       	ldi	r25, 0x03	; 3
    63ec:	0e 94 58 34 	call	0x68b0	; 0x68b0 <TwoWire::endTransmission()>
  Wire.requestFrom(SHT21_I2C_ADDR, 1);
    63f0:	8e eb       	ldi	r24, 0xBE	; 190
    63f2:	93 e0       	ldi	r25, 0x03	; 3
    63f4:	60 e4       	ldi	r22, 0x40	; 64
    63f6:	70 e0       	ldi	r23, 0x00	; 0
    63f8:	41 e0       	ldi	r20, 0x01	; 1
    63fa:	50 e0       	ldi	r21, 0x00	; 0
    63fc:	0e 94 69 34 	call	0x68d2	; 0x68d2 <TwoWire::requestFrom(int, int)>
    6400:	04 c0       	rjmp	.+8      	; 0x640a <SHT21_init()+0x3a>
  while(Wire.available() < 1)
    {
    // Wait for data, but avoid rolling over the end of a minor cycle...
    if(getSubCycleTime() >= GSCT_MAX-2)
    6402:	80 91 b2 00 	lds	r24, 0x00B2
    6406:	8d 3f       	cpi	r24, 0xFD	; 253
    6408:	28 f5       	brcc	.+74     	; 0x6454 <SHT21_init()+0x84>
  // Soft reset in order to sample at reduced precision.
  Wire.beginTransmission(SHT21_I2C_ADDR);
  Wire.write((byte) SHT21_I2C_CMD_USERREG); // Select control register.
  Wire.endTransmission();
  Wire.requestFrom(SHT21_I2C_ADDR, 1);
  while(Wire.available() < 1)
    640a:	8e eb       	ldi	r24, 0xBE	; 190
    640c:	93 e0       	ldi	r25, 0x03	; 3
    640e:	0e 94 9d 33 	call	0x673a	; 0x673a <TwoWire::available()>
    6412:	18 16       	cp	r1, r24
    6414:	19 06       	cpc	r1, r25
    6416:	ac f7       	brge	.-22     	; 0x6402 <SHT21_init()+0x32>
    if(getSubCycleTime() >= GSCT_MAX-2)
      {
      return; // Failed, and not initialised.
      }
    }
  const uint8_t curUR = Wire.read();
    6418:	8e eb       	ldi	r24, 0xBE	; 190
    641a:	93 e0       	ldi	r25, 0x03	; 3
    641c:	0e 94 a6 33 	call	0x674c	; 0x674c <TwoWire::read()>
    6420:	18 2f       	mov	r17, r24
//  DEBUG_SERIAL_PRINTFMT(curUR, HEX);
//  DEBUG_SERIAL_PRINTLN();

  // Preserve reserved bits (3, 4, 5) and sample 8-bit RH (for for 1%) and 12-bit temp (for 1/16C).
  const uint8_t newUR = (curUR & 0x38) | 3;
  Wire.beginTransmission(SHT21_I2C_ADDR);
    6422:	8e eb       	ldi	r24, 0xBE	; 190
    6424:	93 e0       	ldi	r25, 0x03	; 3
    6426:	60 e4       	ldi	r22, 0x40	; 64
    6428:	70 e0       	ldi	r23, 0x00	; 0
    642a:	0e 94 93 33 	call	0x6726	; 0x6726 <TwoWire::beginTransmission(int)>
  Wire.write((byte) SHT21_I2C_CMD_USERREG); // Select control register.
    642e:	8e eb       	ldi	r24, 0xBE	; 190
    6430:	93 e0       	ldi	r25, 0x03	; 3
    6432:	67 ee       	ldi	r22, 0xE7	; 231
    6434:	0e 94 15 34 	call	0x682a	; 0x682a <TwoWire::write(unsigned char)>
  Wire.write((byte) newUR);
    6438:	18 73       	andi	r17, 0x38	; 56
    643a:	13 60       	ori	r17, 0x03	; 3
    643c:	8e eb       	ldi	r24, 0xBE	; 190
    643e:	93 e0       	ldi	r25, 0x03	; 3
    6440:	61 2f       	mov	r22, r17
    6442:	0e 94 15 34 	call	0x682a	; 0x682a <TwoWire::write(unsigned char)>
  Wire.endTransmission();
    6446:	8e eb       	ldi	r24, 0xBE	; 190
    6448:	93 e0       	ldi	r25, 0x03	; 3
    644a:	0e 94 58 34 	call	0x68b0	; 0x68b0 <TwoWire::endTransmission()>

#endif
  SHT21_initialised = true;
    644e:	81 e0       	ldi	r24, 0x01	; 1
    6450:	80 93 77 03 	sts	0x0377, r24
  }
    6454:	1f 91       	pop	r17
    6456:	08 95       	ret

00006458 <RoomTemperatureC16::read()>:
#endif



// Temperature read uses/selects one of the implementations/sensors.
int RoomTemperatureC16::read()
    6458:	ef 92       	push	r14
    645a:	ff 92       	push	r15
    645c:	0f 93       	push	r16
    645e:	1f 93       	push	r17
    6460:	cf 93       	push	r28
    6462:	df 93       	push	r29
    6464:	7c 01       	movw	r14, r24
// This may consume significant power and time.
// Probably no need to do this more than (say) once per minute.
// The first read will initialise the device as necessary and leave it in a low-power mode afterwards.
static int Sensor_SHT21_readTemperatureC16()
  {
  const bool neededPowerUp = powerUpTWIIfDisabled();
    6466:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <powerUpTWIIfDisabled()>
    646a:	08 2f       	mov	r16, r24

  // Initialise/config if necessary.
  if(!SHT21_initialised) { SHT21_init(); }
    646c:	80 91 77 03 	lds	r24, 0x0377
    6470:	88 23       	and	r24, r24
    6472:	11 f4       	brne	.+4      	; 0x6478 <RoomTemperatureC16::read()+0x20>
    6474:	0e 94 e8 31 	call	0x63d0	; 0x63d0 <SHT21_init()>
  // Max RH measurement time:
  //   * 14-bit: 85ms
  //   * 12-bit: 22ms
  //   * 11-bit: 11ms
  // Use blocking data fetch for now.
  Wire.beginTransmission(SHT21_I2C_ADDR);
    6478:	8e eb       	ldi	r24, 0xBE	; 190
    647a:	93 e0       	ldi	r25, 0x03	; 3
    647c:	60 e4       	ldi	r22, 0x40	; 64
    647e:	70 e0       	ldi	r23, 0x00	; 0
    6480:	0e 94 93 33 	call	0x6726	; 0x6726 <TwoWire::beginTransmission(int)>
  Wire.write((byte) SHT21_I2C_CMD_TEMP_HOLD); // Select control register.
    6484:	8e eb       	ldi	r24, 0xBE	; 190
    6486:	93 e0       	ldi	r25, 0x03	; 3
    6488:	63 ee       	ldi	r22, 0xE3	; 227
    648a:	0e 94 15 34 	call	0x682a	; 0x682a <TwoWire::write(unsigned char)>
#if defined(SHT21_USE_REDUCED_PRECISION)
  nap(WDTO_30MS); // Should cover 12-bit conversion (22ms).
    648e:	81 e0       	ldi	r24, 0x01	; 1
    6490:	0e 94 ab 1c 	call	0x3956	; 0x3956 <nap(signed char)>
#else
  sleepLowPowerMs(90); // Should be plenty for slowest (14-bit) conversion (85ms).
#endif
  //delay(100);
  Wire.endTransmission();
    6494:	8e eb       	ldi	r24, 0xBE	; 190
    6496:	93 e0       	ldi	r25, 0x03	; 3
    6498:	0e 94 58 34 	call	0x68b0	; 0x68b0 <TwoWire::endTransmission()>
  Wire.requestFrom(SHT21_I2C_ADDR, 3);
    649c:	8e eb       	ldi	r24, 0xBE	; 190
    649e:	93 e0       	ldi	r25, 0x03	; 3
    64a0:	60 e4       	ldi	r22, 0x40	; 64
    64a2:	70 e0       	ldi	r23, 0x00	; 0
    64a4:	43 e0       	ldi	r20, 0x03	; 3
    64a6:	50 e0       	ldi	r21, 0x00	; 0
    64a8:	0e 94 69 34 	call	0x68d2	; 0x68d2 <TwoWire::requestFrom(int, int)>
    64ac:	07 c0       	rjmp	.+14     	; 0x64bc <RoomTemperatureC16::read()+0x64>
  while(Wire.available() < 3)
    {
    // Wait for data, but avoid rolling over the end of a minor cycle...
    if(getSubCycleTime() >= GSCT_MAX-2)
    64ae:	80 91 b2 00 	lds	r24, 0x00B2
    64b2:	8d 3f       	cpi	r24, 0xFD	; 253
    64b4:	18 f0       	brcs	.+6      	; 0x64bc <RoomTemperatureC16::read()+0x64>
    64b6:	60 e0       	ldi	r22, 0x00	; 0
    64b8:	70 e0       	ldi	r23, 0x00	; 0
    64ba:	2b c0       	rjmp	.+86     	; 0x6512 <RoomTemperatureC16::read()+0xba>
  sleepLowPowerMs(90); // Should be plenty for slowest (14-bit) conversion (85ms).
#endif
  //delay(100);
  Wire.endTransmission();
  Wire.requestFrom(SHT21_I2C_ADDR, 3);
  while(Wire.available() < 3)
    64bc:	8e eb       	ldi	r24, 0xBE	; 190
    64be:	93 e0       	ldi	r25, 0x03	; 3
    64c0:	0e 94 9d 33 	call	0x673a	; 0x673a <TwoWire::available()>
    64c4:	03 97       	sbiw	r24, 0x03	; 3
    64c6:	9c f3       	brlt	.-26     	; 0x64ae <RoomTemperatureC16::read()+0x56>
    if(getSubCycleTime() >= GSCT_MAX-2)
      {
      return(0); // Failure value: may be able to to better.
      }
    }
  uint16_t rawTemp = (Wire.read() << 8);
    64c8:	8e eb       	ldi	r24, 0xBE	; 190
    64ca:	93 e0       	ldi	r25, 0x03	; 3
    64cc:	0e 94 a6 33 	call	0x674c	; 0x674c <TwoWire::read()>
    64d0:	18 2f       	mov	r17, r24
  rawTemp |= (Wire.read() & 0xfc); // Clear status ls bits.
    64d2:	8e eb       	ldi	r24, 0xBE	; 190
    64d4:	93 e0       	ldi	r25, 0x03	; 3
    64d6:	0e 94 a6 33 	call	0x674c	; 0x674c <TwoWire::read()>
    64da:	ec 01       	movw	r28, r24

  // Power down TWI ASAP.
  if(neededPowerUp) { powerDownTWI(); }
    64dc:	00 23       	and	r16, r16
    64de:	11 f0       	breq	.+4      	; 0x64e4 <RoomTemperatureC16::read()+0x8c>
    64e0:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <powerDownTWI()>
    if(getSubCycleTime() >= GSCT_MAX-2)
      {
      return(0); // Failure value: may be able to to better.
      }
    }
  uint16_t rawTemp = (Wire.read() << 8);
    64e4:	71 2f       	mov	r23, r17
    64e6:	60 e0       	ldi	r22, 0x00	; 0
  if(neededPowerUp) { powerDownTWI(); }

  // TODO: capture entropy if (transformed) value has changed.

  // Nominal formula: C = -46.85 + ((175.72*raw) / (1L << 16));
  const int c16 = -750 + ((5623L * rawTemp) >> 17); // FIXME: find a faster approximation...
    64e8:	cc 7f       	andi	r28, 0xFC	; 252
    64ea:	d0 70       	andi	r29, 0x00	; 0
    64ec:	6c 2b       	or	r22, r28
    64ee:	7d 2b       	or	r23, r29
    64f0:	80 e0       	ldi	r24, 0x00	; 0
    64f2:	90 e0       	ldi	r25, 0x00	; 0
    64f4:	27 ef       	ldi	r18, 0xF7	; 247
    64f6:	35 e1       	ldi	r19, 0x15	; 21
    64f8:	40 e0       	ldi	r20, 0x00	; 0
    64fa:	50 e0       	ldi	r21, 0x00	; 0
    64fc:	0e 94 3a 3e 	call	0x7c74	; 0x7c74 <__mulsi3>
    6500:	41 e1       	ldi	r20, 0x11	; 17
    6502:	95 95       	asr	r25
    6504:	87 95       	ror	r24
    6506:	77 95       	ror	r23
    6508:	67 95       	ror	r22
    650a:	4a 95       	dec	r20
    650c:	d1 f7       	brne	.-12     	; 0x6502 <RoomTemperatureC16::read()+0xaa>
    650e:	6e 5e       	subi	r22, 0xEE	; 238
    6510:	72 40       	sbci	r23, 0x02	; 2
#ifdef SENSOR_SHT21_ENABLE
  const int result = Sensor_SHT21_readTemperatureC16();
#else
  const int result = TMP112_readTemperatureC16();
#endif
  value = result;
    6512:	f7 01       	movw	r30, r14
    6514:	73 83       	std	Z+3, r23	; 0x03
    6516:	62 83       	std	Z+2, r22	; 0x02
  return(result);
  }
    6518:	cb 01       	movw	r24, r22
    651a:	df 91       	pop	r29
    651c:	cf 91       	pop	r28
    651e:	1f 91       	pop	r17
    6520:	0f 91       	pop	r16
    6522:	ff 90       	pop	r15
    6524:	ef 90       	pop	r14
    6526:	08 95       	ret

00006528 <HumiditySensorSHT21::read()>:
// Measure and return the current relative humidity in %; range [0,100] and 255 for error.
// This may consume significant power and time.
// Probably no need to do this more than (say) once per minute.
// The first read will initialise the device as necessary and leave it in a low-power mode afterwards.
// Returns 255 (~0) in case of error.
uint8_t HumiditySensorSHT21::read()
    6528:	ff 92       	push	r15
    652a:	0f 93       	push	r16
    652c:	1f 93       	push	r17
    652e:	cf 93       	push	r28
    6530:	df 93       	push	r29
    6532:	ec 01       	movw	r28, r24
  {
  const bool neededPowerUp = powerUpTWIIfDisabled();
    6534:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <powerUpTWIIfDisabled()>
    6538:	18 2f       	mov	r17, r24

  // Initialise/config if necessary.
  if(!SHT21_initialised) { SHT21_init(); }
    653a:	80 91 77 03 	lds	r24, 0x0377
    653e:	88 23       	and	r24, r24
    6540:	11 f4       	brne	.+4      	; 0x6546 <HumiditySensorSHT21::read()+0x1e>
    6542:	0e 94 e8 31 	call	0x63d0	; 0x63d0 <SHT21_init()>
  // Get RH%...
  // Max RH measurement time:
  //   * 12-bit: 29ms
  //   *  8-bit:  4ms
  // Use blocking data fetch for now.
  Wire.beginTransmission(SHT21_I2C_ADDR);
    6546:	8e eb       	ldi	r24, 0xBE	; 190
    6548:	93 e0       	ldi	r25, 0x03	; 3
    654a:	60 e4       	ldi	r22, 0x40	; 64
    654c:	70 e0       	ldi	r23, 0x00	; 0
    654e:	0e 94 93 33 	call	0x6726	; 0x6726 <TwoWire::beginTransmission(int)>
  Wire.write((byte) SHT21_I2C_CMD_RH_HOLD); // Select control register.
    6552:	8e eb       	ldi	r24, 0xBE	; 190
    6554:	93 e0       	ldi	r25, 0x03	; 3
    6556:	65 ee       	ldi	r22, 0xE5	; 229
    6558:	0e 94 15 34 	call	0x682a	; 0x682a <TwoWire::write(unsigned char)>
// This may be achieved in part by dynamically slowing the CPU clock if possible.
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed((((MIN_CPU_HZ * (ms)) + 2000) / 4000) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    655c:	85 e2       	ldi	r24, 0x25	; 37
    655e:	90 e0       	ldi	r25, 0x00	; 0
    6560:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
#if defined(SHT21_USE_REDUCED_PRECISION)
  sleepLowPowerMs(5); // Should cover 8-bit conversion (4ms).
#else
  nap(WDTO_30MS); // Should cover even 12-bit conversion (29ms).
#endif
  Wire.endTransmission();
    6564:	8e eb       	ldi	r24, 0xBE	; 190
    6566:	93 e0       	ldi	r25, 0x03	; 3
    6568:	0e 94 58 34 	call	0x68b0	; 0x68b0 <TwoWire::endTransmission()>
  Wire.requestFrom(SHT21_I2C_ADDR, 3);
    656c:	8e eb       	ldi	r24, 0xBE	; 190
    656e:	93 e0       	ldi	r25, 0x03	; 3
    6570:	60 e4       	ldi	r22, 0x40	; 64
    6572:	70 e0       	ldi	r23, 0x00	; 0
    6574:	43 e0       	ldi	r20, 0x03	; 3
    6576:	50 e0       	ldi	r21, 0x00	; 0
    6578:	0e 94 69 34 	call	0x68d2	; 0x68d2 <TwoWire::requestFrom(int, int)>
    657c:	06 c0       	rjmp	.+12     	; 0x658a <HumiditySensorSHT21::read()+0x62>
  while(Wire.available() < 3)
    {
    // Wait for data, but avoid rolling over the end of a minor cycle...
    if(getSubCycleTime() >= GSCT_MAX)
    657e:	80 91 b2 00 	lds	r24, 0x00B2
    6582:	8f 3f       	cpi	r24, 0xFF	; 255
    6584:	11 f4       	brne	.+4      	; 0x658a <HumiditySensorSHT21::read()+0x62>
    6586:	1f ef       	ldi	r17, 0xFF	; 255
    6588:	3c c0       	rjmp	.+120    	; 0x6602 <HumiditySensorSHT21::read()+0xda>
#else
  nap(WDTO_30MS); // Should cover even 12-bit conversion (29ms).
#endif
  Wire.endTransmission();
  Wire.requestFrom(SHT21_I2C_ADDR, 3);
  while(Wire.available() < 3)
    658a:	8e eb       	ldi	r24, 0xBE	; 190
    658c:	93 e0       	ldi	r25, 0x03	; 3
    658e:	0e 94 9d 33 	call	0x673a	; 0x673a <TwoWire::available()>
    6592:	03 97       	sbiw	r24, 0x03	; 3
    6594:	a4 f3       	brlt	.-24     	; 0x657e <HumiditySensorSHT21::read()+0x56>
      {
//      DEBUG_SERIAL_PRINTLN_FLASHSTRING("giving up");
      return(~0);
      }
    }
  const uint8_t rawRH = Wire.read();
    6596:	8e eb       	ldi	r24, 0xBE	; 190
    6598:	93 e0       	ldi	r25, 0x03	; 3
    659a:	0e 94 a6 33 	call	0x674c	; 0x674c <TwoWire::read()>
    659e:	f8 2e       	mov	r15, r24
  const uint8_t rawRL = Wire.read();
    65a0:	8e eb       	ldi	r24, 0xBE	; 190
    65a2:	93 e0       	ldi	r25, 0x03	; 3
    65a4:	0e 94 a6 33 	call	0x674c	; 0x674c <TwoWire::read()>
    65a8:	08 2f       	mov	r16, r24

  // Power down TWI ASAP.
  if(neededPowerUp) { powerDownTWI(); }
    65aa:	11 23       	and	r17, r17
    65ac:	11 f0       	breq	.+4      	; 0x65b2 <HumiditySensorSHT21::read()+0x8a>
    65ae:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <powerDownTWI()>

  const uint16_t raw = (((uint16_t)rawRH) << 8) | (rawRL & 0xfc); // Clear status ls bits.
  const uint8_t result = -6 + ((125L * raw) >> 16);
    65b2:	60 2f       	mov	r22, r16
    65b4:	70 e0       	ldi	r23, 0x00	; 0
    65b6:	6c 7f       	andi	r22, 0xFC	; 252
    65b8:	70 70       	andi	r23, 0x00	; 0
    65ba:	3f 2d       	mov	r19, r15
    65bc:	20 e0       	ldi	r18, 0x00	; 0
    65be:	62 2b       	or	r22, r18
    65c0:	73 2b       	or	r23, r19
    65c2:	80 e0       	ldi	r24, 0x00	; 0
    65c4:	90 e0       	ldi	r25, 0x00	; 0
    65c6:	2d e7       	ldi	r18, 0x7D	; 125
    65c8:	30 e0       	ldi	r19, 0x00	; 0
    65ca:	40 e0       	ldi	r20, 0x00	; 0
    65cc:	50 e0       	ldi	r21, 0x00	; 0
    65ce:	0e 94 3a 3e 	call	0x7c74	; 0x7c74 <__mulsi3>
    65d2:	bc 01       	movw	r22, r24
    65d4:	99 27       	eor	r25, r25
    65d6:	77 fd       	sbrc	r23, 7
    65d8:	90 95       	com	r25
    65da:	89 2f       	mov	r24, r25
    65dc:	16 2f       	mov	r17, r22
    65de:	16 50       	subi	r17, 0x06	; 6

  // Capture entropy from raw status bits
  // iff (transformed) reading has changed.
  if(value != result) { addEntropyToPool(rawRL ^ rawRH, 1); }
    65e0:	8a 81       	ldd	r24, Y+2	; 0x02
    65e2:	81 17       	cp	r24, r17
    65e4:	29 f0       	breq	.+10     	; 0x65f0 <HumiditySensorSHT21::read()+0xc8>
    65e6:	80 2f       	mov	r24, r16
    65e8:	8f 25       	eor	r24, r15
    65ea:	61 e0       	ldi	r22, 0x01	; 1
    65ec:	0e 94 29 25 	call	0x4a52	; 0x4a52 <addEntropyToPool(unsigned char, unsigned char)>

  value = result;
    65f0:	1a 83       	std	Y+2, r17	; 0x02
  if(result > (HUMIDTY_HIGH_RHPC+HUMIDITY_EPSILON_RHPC)) { highWithHyst = true; }
    65f2:	1c 34       	cpi	r17, 0x4C	; 76
    65f4:	18 f0       	brcs	.+6      	; 0x65fc <HumiditySensorSHT21::read()+0xd4>
    65f6:	81 e0       	ldi	r24, 0x01	; 1
    65f8:	8b 83       	std	Y+3, r24	; 0x03
    65fa:	03 c0       	rjmp	.+6      	; 0x6602 <HumiditySensorSHT21::read()+0xda>
  else if(result < (HUMIDTY_HIGH_RHPC-HUMIDITY_EPSILON_RHPC)) { highWithHyst = false; }
    65fc:	11 34       	cpi	r17, 0x41	; 65
    65fe:	08 f4       	brcc	.+2      	; 0x6602 <HumiditySensorSHT21::read()+0xda>
    6600:	1b 82       	std	Y+3, r1	; 0x03
  return(result);
  }
    6602:	81 2f       	mov	r24, r17
    6604:	df 91       	pop	r29
    6606:	cf 91       	pop	r28
    6608:	1f 91       	pop	r17
    660a:	0f 91       	pop	r16
    660c:	ff 90       	pop	r15
    660e:	08 95       	ret

00006610 <AmbientLight::read()>:
// Measure/store/return the current room ambient light levels in range [0,1023].
// This may consume significant power and time.
// Probably no need to do this more than (say) once per minute.
// This implementation expects LDR (1M dark resistance) from IO_POWER_UP to LDR_SENSOR_AIN and 100k to ground.
// (Not intended to be called from ISR.)
uint16_t AmbientLight::read()
    6610:	ef 92       	push	r14
    6612:	ff 92       	push	r15
    6614:	0f 93       	push	r16
    6616:	1f 93       	push	r17
    6618:	df 93       	push	r29
    661a:	cf 93       	push	r28
    661c:	cd b7       	in	r28, 0x3d	; 61
    661e:	de b7       	in	r29, 0x3e	; 62
    6620:	28 97       	sbiw	r28, 0x08	; 8
    6622:	0f b6       	in	r0, 0x3f	; 63
    6624:	f8 94       	cli
    6626:	de bf       	out	0x3e, r29	; 62
    6628:	0f be       	out	0x3f, r0	; 63
    662a:	cd bf       	out	0x3d, r28	; 61
    662c:	7c 01       	movw	r14, r24
  {
  power_intermittent_peripherals_enable(false); // No need to wait for anything to stablise as direct of IO_POWER_UP.
    662e:	80 e0       	ldi	r24, 0x00	; 0
    6630:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <power_intermittent_peripherals_enable(bool)>
  const uint16_t al0 = analogueNoiseReducedRead(LDR_SENSOR_AIN, ALREFERENCE);
    6634:	80 e0       	ldi	r24, 0x00	; 0
    6636:	90 e0       	ldi	r25, 0x00	; 0
    6638:	63 e0       	ldi	r22, 0x03	; 3
    663a:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <analogueNoiseReducedRead(int, unsigned char)>
#if defined(ADAPTIVE_THRESHOLD)
  int al;
  if(al0 >= ADAPTIVE_THRESHOLD)
    663e:	23 e0       	ldi	r18, 0x03	; 3
    6640:	80 38       	cpi	r24, 0x80	; 128
    6642:	92 07       	cpc	r25, r18
    6644:	e0 f1       	brcs	.+120    	; 0x66be <AmbientLight::read()+0xae>
    {
    const uint16_t al1 = analogueNoiseReducedRead(LDR_SENSOR_AIN, DEFAULT); // Vsupply reference.
    6646:	80 e0       	ldi	r24, 0x00	; 0
    6648:	90 e0       	ldi	r25, 0x00	; 0
    664a:	61 e0       	ldi	r22, 0x01	; 1
    664c:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <analogueNoiseReducedRead(int, unsigned char)>
    6650:	8c 01       	movw	r16, r24
    Supply_mV.read();
    6652:	82 e1       	ldi	r24, 0x12	; 18
    6654:	93 e0       	ldi	r25, 0x03	; 3
    6656:	0e 94 ac 1d 	call	0x3b58	; 0x3b58 <SupplyVoltageMilliVolts::read()>
    // Ensure that scale stays monotonic in face of calculation lumpiness, etc...
    // Scale all remaining space above threshold to new top value into remaining space.
    // TODO: ensure scaleFactor a power of two for speed.
    const uint16_t scaleFactor = (2048 - ADAPTIVE_THRESHOLD) / (1024 - ADAPTIVE_THRESHOLD);
    al = fnmin(1023U,
        ADAPTIVE_THRESHOLD + fnmax(0U, ((ale - ADAPTIVE_THRESHOLD) / scaleFactor)));
    665a:	60 91 14 03 	lds	r22, 0x0314
    665e:	70 91 15 03 	lds	r23, 0x0315
    6662:	60 5f       	subi	r22, 0xF0	; 240
    6664:	7f 4f       	sbci	r23, 0xFF	; 255
    6666:	f5 e0       	ldi	r31, 0x05	; 5
    6668:	76 95       	lsr	r23
    666a:	67 95       	ror	r22
    666c:	fa 95       	dec	r31
    666e:	e1 f7       	brne	.-8      	; 0x6668 <AmbientLight::read()+0x58>
    6670:	c8 01       	movw	r24, r16
    6672:	e5 e0       	ldi	r30, 0x05	; 5
    6674:	88 0f       	add	r24, r24
    6676:	99 1f       	adc	r25, r25
    6678:	ea 95       	dec	r30
    667a:	e1 f7       	brne	.-8      	; 0x6674 <AmbientLight::read()+0x64>
    667c:	0e 94 59 3e 	call	0x7cb2	; 0x7cb2 <__udivmodhi4>
    6680:	cb 01       	movw	r24, r22
    6682:	80 58       	subi	r24, 0x80	; 128
    6684:	93 40       	sbci	r25, 0x03	; 3
    6686:	69 e0       	ldi	r22, 0x09	; 9
    6688:	70 e0       	ldi	r23, 0x00	; 0
    668a:	0e 94 59 3e 	call	0x7cb2	; 0x7cb2 <__udivmodhi4>
    668e:	9b 01       	movw	r18, r22
    6690:	ab 01       	movw	r20, r22
    6692:	40 58       	subi	r20, 0x80	; 128
    6694:	5c 4f       	sbci	r21, 0xFC	; 252




// Templated function versions of min/max that do not evaluate the arguments twice.
template <class T> const T& fnmin(const T& a, const T& b) { return((a>b)?b:a); }
    6696:	83 e0       	ldi	r24, 0x03	; 3
    6698:	4f 3f       	cpi	r20, 0xFF	; 255
    669a:	58 07       	cpc	r21, r24
    669c:	10 f4       	brcc	.+4      	; 0x66a2 <AmbientLight::read()+0x92>
    669e:	ba 01       	movw	r22, r20
    66a0:	02 c0       	rjmp	.+4      	; 0x66a6 <AmbientLight::read()+0x96>
    66a2:	6f ef       	ldi	r22, 0xFF	; 255
    66a4:	73 e0       	ldi	r23, 0x03	; 3
    66a6:	8f ef       	ldi	r24, 0xFF	; 255
    66a8:	93 e0       	ldi	r25, 0x03	; 3
    66aa:	9e 83       	std	Y+6, r25	; 0x06
    66ac:	8d 83       	std	Y+5, r24	; 0x05
    66ae:	1a 82       	std	Y+2, r1	; 0x02
    66b0:	19 82       	std	Y+1, r1	; 0x01
    66b2:	3c 83       	std	Y+4, r19	; 0x04
    66b4:	2b 83       	std	Y+3, r18	; 0x03
    66b6:	58 87       	std	Y+8, r21	; 0x08
    66b8:	4f 83       	std	Y+7, r20	; 0x07
    66ba:	8b 01       	movw	r16, r22
    66bc:	01 c0       	rjmp	.+2      	; 0x66c0 <AmbientLight::read()+0xb0>
    DEBUG_SERIAL_PRINT_FLASHSTRING(", compressed value: ");
    DEBUG_SERIAL_PRINT(al);
    DEBUG_SERIAL_PRINTLN();
#endif
    }
  else { al = al0; }
    66be:	8c 01       	movw	r16, r24
#else
  const uint16_t al = al0;
#endif
  power_intermittent_peripherals_disable();
    66c0:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <power_intermittent_peripherals_disable()>

  // Capture entropy from changed LS bits.
  if((uint8_t)al != (uint8_t)value) { addEntropyToPool((uint8_t)al ^ (uint8_t)value, 0); } // Claim zero entropy as may be forced by Eve.
    66c4:	80 2f       	mov	r24, r16
    66c6:	f7 01       	movw	r30, r14
    66c8:	92 81       	ldd	r25, Z+2	; 0x02
    66ca:	09 17       	cp	r16, r25
    66cc:	21 f0       	breq	.+8      	; 0x66d6 <AmbientLight::read()+0xc6>
    66ce:	89 27       	eor	r24, r25
    66d0:	60 e0       	ldi	r22, 0x00	; 0
    66d2:	0e 94 29 25 	call	0x4a52	; 0x4a52 <addEntropyToPool(unsigned char, unsigned char)>

  // Adjust room-lit flag, with hysteresis.
  if(al <= LDR_THR_LOW)
    66d6:	01 3a       	cpi	r16, 0xA1	; 161
    66d8:	11 05       	cpc	r17, r1
    66da:	1c f4       	brge	.+6      	; 0x66e2 <AmbientLight::read()+0xd2>
    { isRoomLitFlag = false; }
    66dc:	f7 01       	movw	r30, r14
    66de:	14 82       	std	Z+4, r1	; 0x04
    66e0:	11 c0       	rjmp	.+34     	; 0x6704 <AmbientLight::read()+0xf4>
  else if(al > LDR_THR_HIGH)
    66e2:	09 3c       	cpi	r16, 0xC9	; 201
    66e4:	11 05       	cpc	r17, r1
    66e6:	74 f0       	brlt	.+28     	; 0x6704 <AmbientLight::read()+0xf4>
    {
    // Treat a sharp transition from dark to light as a possible/weak indication of occupancy, eg light flicked on.
    // TODO: consider refusal to trigger from zero to avoid power-up in light conditions causing transition. 
    if((!isRoomLitFlag) && (value < LDR_THR_LOW)) { markAsPossiblyOccupied(); }
    66e8:	f7 01       	movw	r30, r14
    66ea:	84 81       	ldd	r24, Z+4	; 0x04
    66ec:	88 23       	and	r24, r24
    66ee:	39 f4       	brne	.+14     	; 0x66fe <AmbientLight::read()+0xee>
    66f0:	82 81       	ldd	r24, Z+2	; 0x02
    66f2:	93 81       	ldd	r25, Z+3	; 0x03
    66f4:	80 3a       	cpi	r24, 0xA0	; 160
    66f6:	91 05       	cpc	r25, r1
    66f8:	10 f4       	brcc	.+4      	; 0x66fe <AmbientLight::read()+0xee>
    66fa:	0e 94 b0 04 	call	0x960	; 0x960 <markAsPossiblyOccupied()>

    isRoomLitFlag = true;
    66fe:	81 e0       	ldi	r24, 0x01	; 1
    6700:	f7 01       	movw	r30, r14
    6702:	84 83       	std	Z+4, r24	; 0x04
    }

  // Store new value.
  value = al;
    6704:	f7 01       	movw	r30, r14
    6706:	02 83       	std	Z+2, r16	; 0x02
    6708:	13 83       	std	Z+3, r17	; 0x03
  DEBUG_SERIAL_PRINT(isRoomLitFlag);
  DEBUG_SERIAL_PRINTLN();
#endif

  return(al);
  }
    670a:	c8 01       	movw	r24, r16
    670c:	28 96       	adiw	r28, 0x08	; 8
    670e:	0f b6       	in	r0, 0x3f	; 63
    6710:	f8 94       	cli
    6712:	de bf       	out	0x3e, r29	; 62
    6714:	0f be       	out	0x3f, r0	; 63
    6716:	cd bf       	out	0x3d, r28	; 61
    6718:	cf 91       	pop	r28
    671a:	df 91       	pop	r29
    671c:	1f 91       	pop	r17
    671e:	0f 91       	pop	r16
    6720:	ff 90       	pop	r15
    6722:	ef 90       	pop	r14
    6724:	08 95       	ret

00006726 <TwoWire::beginTransmission(int)>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    6726:	81 e0       	ldi	r24, 0x01	; 1
    6728:	80 93 bd 03 	sts	0x03BD, r24
  // set address of targeted slave
  txAddress = address;
    672c:	60 93 9a 03 	sts	0x039A, r22
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    6730:	10 92 bb 03 	sts	0x03BB, r1
  txBufferLength = 0;
    6734:	10 92 bc 03 	sts	0x03BC, r1
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
}
    6738:	08 95       	ret

0000673a <TwoWire::available()>:
}

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
    673a:	20 91 99 03 	lds	r18, 0x0399
    673e:	30 e0       	ldi	r19, 0x00	; 0
    6740:	80 91 98 03 	lds	r24, 0x0398
    6744:	28 1b       	sub	r18, r24
    6746:	31 09       	sbc	r19, r1
{
  return rxBufferLength - rxBufferIndex;
}
    6748:	c9 01       	movw	r24, r18
    674a:	08 95       	ret

0000674c <TwoWire::read()>:
int TwoWire::read(void)
{
  int value = -1;
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    674c:	40 91 98 03 	lds	r20, 0x0398
    6750:	80 91 99 03 	lds	r24, 0x0399
    6754:	48 17       	cp	r20, r24
    6756:	18 f0       	brcs	.+6      	; 0x675e <TwoWire::read()+0x12>
    6758:	2f ef       	ldi	r18, 0xFF	; 255
    675a:	3f ef       	ldi	r19, 0xFF	; 255
    675c:	0a c0       	rjmp	.+20     	; 0x6772 <TwoWire::read()+0x26>
    value = rxBuffer[rxBufferIndex];
    675e:	e4 2f       	mov	r30, r20
    6760:	f0 e0       	ldi	r31, 0x00	; 0
    6762:	e8 58       	subi	r30, 0x88	; 136
    6764:	fc 4f       	sbci	r31, 0xFC	; 252
    6766:	80 81       	ld	r24, Z
    6768:	28 2f       	mov	r18, r24
    676a:	30 e0       	ldi	r19, 0x00	; 0
    ++rxBufferIndex;
    676c:	4f 5f       	subi	r20, 0xFF	; 255
    676e:	40 93 98 03 	sts	0x0398, r20
  }

  return value;
}
    6772:	c9 01       	movw	r24, r18
    6774:	08 95       	ret

00006776 <TwoWire::peek()>:
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
  
  if(rxBufferIndex < rxBufferLength){
    6776:	e0 91 98 03 	lds	r30, 0x0398
    677a:	80 91 99 03 	lds	r24, 0x0399
    677e:	e8 17       	cp	r30, r24
    6780:	18 f0       	brcs	.+6      	; 0x6788 <TwoWire::peek()+0x12>
    6782:	ef ef       	ldi	r30, 0xFF	; 255
    6784:	ff ef       	ldi	r31, 0xFF	; 255
    6786:	06 c0       	rjmp	.+12     	; 0x6794 <TwoWire::peek()+0x1e>
    value = rxBuffer[rxBufferIndex];
    6788:	f0 e0       	ldi	r31, 0x00	; 0
    678a:	e8 58       	subi	r30, 0x88	; 136
    678c:	fc 4f       	sbci	r31, 0xFC	; 252
    678e:	80 81       	ld	r24, Z
    6790:	e8 2f       	mov	r30, r24
    6792:	f0 e0       	ldi	r31, 0x00	; 0
  }

  return value;
}
    6794:	cf 01       	movw	r24, r30
    6796:	08 95       	ret

00006798 <TwoWire::flush()>:

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
    6798:	08 95       	ret

0000679a <global constructors keyed to _ZN7TwoWire8rxBufferE>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    679a:	10 92 c1 03 	sts	0x03C1, r1
    679e:	10 92 c0 03 	sts	0x03C0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    67a2:	88 ee       	ldi	r24, 0xE8	; 232
    67a4:	93 e0       	ldi	r25, 0x03	; 3
    67a6:	a0 e0       	ldi	r26, 0x00	; 0
    67a8:	b0 e0       	ldi	r27, 0x00	; 0
    67aa:	80 93 c2 03 	sts	0x03C2, r24
    67ae:	90 93 c3 03 	sts	0x03C3, r25
    67b2:	a0 93 c4 03 	sts	0x03C4, r26
    67b6:	b0 93 c5 03 	sts	0x03C5, r27
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    67ba:	89 ed       	ldi	r24, 0xD9	; 217
    67bc:	91 e0       	ldi	r25, 0x01	; 1
    67be:	90 93 bf 03 	sts	0x03BF, r25
    67c2:	80 93 be 03 	sts	0x03BE, r24
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    67c6:	08 95       	ret

000067c8 <TwoWire::write(unsigned char const*, unsigned int)>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
    67c8:	cf 92       	push	r12
    67ca:	df 92       	push	r13
    67cc:	ef 92       	push	r14
    67ce:	ff 92       	push	r15
    67d0:	0f 93       	push	r16
    67d2:	1f 93       	push	r17
    67d4:	cf 93       	push	r28
    67d6:	df 93       	push	r29
    67d8:	7c 01       	movw	r14, r24
    67da:	6b 01       	movw	r12, r22
    67dc:	8a 01       	movw	r16, r20
{
  if(transmitting){
    67de:	80 91 bd 03 	lds	r24, 0x03BD
    67e2:	88 23       	and	r24, r24
    67e4:	a1 f0       	breq	.+40     	; 0x680e <TwoWire::write(unsigned char const*, unsigned int)+0x46>
    67e6:	c0 e0       	ldi	r28, 0x00	; 0
    67e8:	d0 e0       	ldi	r29, 0x00	; 0
    67ea:	0d c0       	rjmp	.+26     	; 0x6806 <TwoWire::write(unsigned char const*, unsigned int)+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
      write(data[i]);
    67ec:	d7 01       	movw	r26, r14
    67ee:	ed 91       	ld	r30, X+
    67f0:	fc 91       	ld	r31, X
    67f2:	d6 01       	movw	r26, r12
    67f4:	ac 0f       	add	r26, r28
    67f6:	bd 1f       	adc	r27, r29
    67f8:	01 90       	ld	r0, Z+
    67fa:	f0 81       	ld	r31, Z
    67fc:	e0 2d       	mov	r30, r0
    67fe:	c7 01       	movw	r24, r14
    6800:	6c 91       	ld	r22, X
    6802:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    6804:	21 96       	adiw	r28, 0x01	; 1
    6806:	c0 17       	cp	r28, r16
    6808:	d1 07       	cpc	r29, r17
    680a:	80 f3       	brcs	.-32     	; 0x67ec <TwoWire::write(unsigned char const*, unsigned int)+0x24>
    680c:	04 c0       	rjmp	.+8      	; 0x6816 <TwoWire::write(unsigned char const*, unsigned int)+0x4e>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    680e:	cb 01       	movw	r24, r22
    6810:	64 2f       	mov	r22, r20
    6812:	0e 94 16 35 	call	0x6a2c	; 0x6a2c <twi_transmit>
  }
  return quantity;
}
    6816:	c8 01       	movw	r24, r16
    6818:	df 91       	pop	r29
    681a:	cf 91       	pop	r28
    681c:	1f 91       	pop	r17
    681e:	0f 91       	pop	r16
    6820:	ff 90       	pop	r15
    6822:	ef 90       	pop	r14
    6824:	df 90       	pop	r13
    6826:	cf 90       	pop	r12
    6828:	08 95       	ret

0000682a <TwoWire::write(unsigned char)>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
    682a:	df 93       	push	r29
    682c:	cf 93       	push	r28
    682e:	0f 92       	push	r0
    6830:	cd b7       	in	r28, 0x3d	; 61
    6832:	de b7       	in	r29, 0x3e	; 62
    6834:	fc 01       	movw	r30, r24
    6836:	69 83       	std	Y+1, r22	; 0x01
{
  if(transmitting){
    6838:	80 91 bd 03 	lds	r24, 0x03BD
    683c:	88 23       	and	r24, r24
    683e:	c9 f0       	breq	.+50     	; 0x6872 <TwoWire::write(unsigned char)+0x48>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    6840:	80 91 bc 03 	lds	r24, 0x03BC
    6844:	80 32       	cpi	r24, 0x20	; 32
    6846:	38 f0       	brcs	.+14     	; 0x6856 <TwoWire::write(unsigned char)+0x2c>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    6848:	81 e0       	ldi	r24, 0x01	; 1
    684a:	90 e0       	ldi	r25, 0x00	; 0
    684c:	93 83       	std	Z+3, r25	; 0x03
    684e:	82 83       	std	Z+2, r24	; 0x02
    6850:	20 e0       	ldi	r18, 0x00	; 0
    6852:	30 e0       	ldi	r19, 0x00	; 0
    6854:	15 c0       	rjmp	.+42     	; 0x6880 <TwoWire::write(unsigned char)+0x56>
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    6856:	80 91 bb 03 	lds	r24, 0x03BB
    685a:	e8 2f       	mov	r30, r24
    685c:	f0 e0       	ldi	r31, 0x00	; 0
    685e:	e5 56       	subi	r30, 0x65	; 101
    6860:	fc 4f       	sbci	r31, 0xFC	; 252
    6862:	99 81       	ldd	r25, Y+1	; 0x01
    6864:	90 83       	st	Z, r25
    ++txBufferIndex;
    6866:	8f 5f       	subi	r24, 0xFF	; 255
    6868:	80 93 bb 03 	sts	0x03BB, r24
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    686c:	80 93 bc 03 	sts	0x03BC, r24
    6870:	05 c0       	rjmp	.+10     	; 0x687c <TwoWire::write(unsigned char)+0x52>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    6872:	ce 01       	movw	r24, r28
    6874:	01 96       	adiw	r24, 0x01	; 1
    6876:	61 e0       	ldi	r22, 0x01	; 1
    6878:	0e 94 16 35 	call	0x6a2c	; 0x6a2c <twi_transmit>
    687c:	21 e0       	ldi	r18, 0x01	; 1
    687e:	30 e0       	ldi	r19, 0x00	; 0
  }
  return 1;
}
    6880:	c9 01       	movw	r24, r18
    6882:	0f 90       	pop	r0
    6884:	cf 91       	pop	r28
    6886:	df 91       	pop	r29
    6888:	08 95       	ret

0000688a <TwoWire::endTransmission(unsigned char)>:
//	the bus tenure has been properly ended with a STOP. It
//	is very possible to leave the bus in a hung state if
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
    688a:	0f 93       	push	r16
    688c:	06 2f       	mov	r16, r22
{
  // transmit buffer (blocking)
  int8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    688e:	80 91 9a 03 	lds	r24, 0x039A
    6892:	6b e9       	ldi	r22, 0x9B	; 155
    6894:	73 e0       	ldi	r23, 0x03	; 3
    6896:	40 91 bc 03 	lds	r20, 0x03BC
    689a:	21 e0       	ldi	r18, 0x01	; 1
    689c:	0e 94 c1 34 	call	0x6982	; 0x6982 <twi_writeTo>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    68a0:	10 92 bb 03 	sts	0x03BB, r1
  txBufferLength = 0;
    68a4:	10 92 bc 03 	sts	0x03BC, r1
  // indicate that we are done transmitting
  transmitting = 0;
    68a8:	10 92 bd 03 	sts	0x03BD, r1
  return ret;
}
    68ac:	0f 91       	pop	r16
    68ae:	08 95       	ret

000068b0 <TwoWire::endTransmission()>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
    68b0:	61 e0       	ldi	r22, 0x01	; 1
    68b2:	0e 94 45 34 	call	0x688a	; 0x688a <TwoWire::endTransmission(unsigned char)>
}
    68b6:	08 95       	ret

000068b8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    quantity = BUFFER_LENGTH;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
    68b8:	41 32       	cpi	r20, 0x21	; 33
    68ba:	08 f0       	brcs	.+2      	; 0x68be <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x6>
    68bc:	40 e2       	ldi	r20, 0x20	; 32
    68be:	86 2f       	mov	r24, r22
    68c0:	68 e7       	ldi	r22, 0x78	; 120
    68c2:	73 e0       	ldi	r23, 0x03	; 3
    68c4:	0e 94 78 34 	call	0x68f0	; 0x68f0 <twi_readFrom>
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    68c8:	10 92 98 03 	sts	0x0398, r1
  rxBufferLength = read;
    68cc:	80 93 99 03 	sts	0x0399, r24

  return read;
}
    68d0:	08 95       	ret

000068d2 <TwoWire::requestFrom(int, int)>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    68d2:	21 e0       	ldi	r18, 0x01	; 1
    68d4:	0e 94 5c 34 	call	0x68b8	; 0x68b8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
}
    68d8:	08 95       	ret

000068da <TwoWire::begin()>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    68da:	10 92 98 03 	sts	0x0398, r1
  rxBufferLength = 0;
    68de:	10 92 99 03 	sts	0x0399, r1

  txBufferIndex = 0;
    68e2:	10 92 bb 03 	sts	0x03BB, r1
  txBufferLength = 0;
    68e6:	10 92 bc 03 	sts	0x03BC, r1

  twi_init();
    68ea:	0e 94 c2 36 	call	0x6d84	; 0x6d84 <twi_init>
}
    68ee:	08 95       	ret

000068f0 <twi_readFrom>:
 *          length: number of bytes to read into array
 *          sendStop: Boolean indicating whether to send a stop at the end
 * Output   number of bytes read
 */
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
    68f0:	38 2f       	mov	r19, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    68f2:	41 32       	cpi	r20, 0x21	; 33
    68f4:	10 f0       	brcs	.+4      	; 0x68fa <twi_readFrom+0xa>
    68f6:	40 e0       	ldi	r20, 0x00	; 0
    68f8:	42 c0       	rjmp	.+132    	; 0x697e <twi_readFrom+0x8e>
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    68fa:	80 91 ca 03 	lds	r24, 0x03CA
    68fe:	88 23       	and	r24, r24
    6900:	e1 f7       	brne	.-8      	; 0x68fa <twi_readFrom+0xa>
    continue;
  }
  twi_state = TWI_MRX;
    6902:	91 e0       	ldi	r25, 0x01	; 1
    6904:	90 93 ca 03 	sts	0x03CA, r25
  twi_sendStop = sendStop;
    6908:	20 93 cc 03 	sts	0x03CC, r18
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    690c:	8f ef       	ldi	r24, 0xFF	; 255
    690e:	80 93 37 04 	sts	0x0437, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    6912:	10 92 f2 03 	sts	0x03F2, r1
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    6916:	41 50       	subi	r20, 0x01	; 1
    6918:	40 93 f3 03 	sts	0x03F3, r20
    691c:	4f 5f       	subi	r20, 0xFF	; 255
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    691e:	90 93 cb 03 	sts	0x03CB, r25
  twi_slarw |= address << 1;
    6922:	80 91 cb 03 	lds	r24, 0x03CB
    6926:	33 0f       	add	r19, r19
    6928:	83 2b       	or	r24, r19
    692a:	80 93 cb 03 	sts	0x03CB, r24

  if (true == twi_inRepStart) {
    692e:	80 91 cd 03 	lds	r24, 0x03CD
    6932:	81 30       	cpi	r24, 0x01	; 1
    6934:	41 f4       	brne	.+16     	; 0x6946 <twi_readFrom+0x56>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    6936:	10 92 cd 03 	sts	0x03CD, r1
    TWDR = twi_slarw;
    693a:	80 91 cb 03 	lds	r24, 0x03CB
    693e:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    6942:	85 ec       	ldi	r24, 0xC5	; 197
    6944:	01 c0       	rjmp	.+2      	; 0x6948 <twi_readFrom+0x58>
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    6946:	85 ee       	ldi	r24, 0xE5	; 229
    6948:	80 93 bc 00 	sts	0x00BC, r24

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    694c:	80 91 ca 03 	lds	r24, 0x03CA
    6950:	81 30       	cpi	r24, 0x01	; 1
    6952:	e1 f3       	breq	.-8      	; 0x694c <twi_readFrom+0x5c>
    continue;
  }

  if (twi_masterBufferIndex < length)
    6954:	80 91 f2 03 	lds	r24, 0x03F2
    6958:	84 17       	cp	r24, r20
    695a:	10 f4       	brcc	.+4      	; 0x6960 <twi_readFrom+0x70>
    length = twi_masterBufferIndex;
    695c:	40 91 f2 03 	lds	r20, 0x03F2
    6960:	20 e0       	ldi	r18, 0x00	; 0
    6962:	30 e0       	ldi	r19, 0x00	; 0
    6964:	0a c0       	rjmp	.+20     	; 0x697a <twi_readFrom+0x8a>

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
    6966:	fb 01       	movw	r30, r22
    6968:	e2 0f       	add	r30, r18
    696a:	f3 1f       	adc	r31, r19
    696c:	d9 01       	movw	r26, r18
    696e:	ae 52       	subi	r26, 0x2E	; 46
    6970:	bc 4f       	sbci	r27, 0xFC	; 252
    6972:	8c 91       	ld	r24, X
    6974:	80 83       	st	Z, r24
    6976:	2f 5f       	subi	r18, 0xFF	; 255
    6978:	3f 4f       	sbci	r19, 0xFF	; 255

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    697a:	24 17       	cp	r18, r20
    697c:	a0 f3       	brcs	.-24     	; 0x6966 <twi_readFrom+0x76>
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
}
    697e:	84 2f       	mov	r24, r20
    6980:	08 95       	ret

00006982 <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
    6982:	0f 93       	push	r16
    6984:	1f 93       	push	r17
    6986:	58 2f       	mov	r21, r24
    6988:	12 2f       	mov	r17, r18
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    698a:	41 32       	cpi	r20, 0x21	; 33
    698c:	10 f0       	brcs	.+4      	; 0x6992 <twi_writeTo+0x10>
    698e:	81 e0       	ldi	r24, 0x01	; 1
    6990:	4a c0       	rjmp	.+148    	; 0x6a26 <twi_writeTo+0xa4>
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    6992:	80 91 ca 03 	lds	r24, 0x03CA
    6996:	88 23       	and	r24, r24
    6998:	e1 f7       	brne	.-8      	; 0x6992 <twi_writeTo+0x10>
    continue;
  }
  twi_state = TWI_MTX;
    699a:	82 e0       	ldi	r24, 0x02	; 2
    699c:	80 93 ca 03 	sts	0x03CA, r24
  twi_sendStop = sendStop;
    69a0:	00 93 cc 03 	sts	0x03CC, r16
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    69a4:	8f ef       	ldi	r24, 0xFF	; 255
    69a6:	80 93 37 04 	sts	0x0437, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    69aa:	10 92 f2 03 	sts	0x03F2, r1
  twi_masterBufferLength = length;
    69ae:	40 93 f3 03 	sts	0x03F3, r20
    69b2:	a2 ed       	ldi	r26, 0xD2	; 210
    69b4:	b3 e0       	ldi	r27, 0x03	; 3
    69b6:	fb 01       	movw	r30, r22
    69b8:	02 c0       	rjmp	.+4      	; 0x69be <twi_writeTo+0x3c>
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
    69ba:	81 91       	ld	r24, Z+
    69bc:	8d 93       	st	X+, r24
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    69be:	8e 2f       	mov	r24, r30
    69c0:	86 1b       	sub	r24, r22
    69c2:	84 17       	cp	r24, r20
    69c4:	d0 f3       	brcs	.-12     	; 0x69ba <twi_writeTo+0x38>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    69c6:	10 92 cb 03 	sts	0x03CB, r1
  twi_slarw |= address << 1;
    69ca:	80 91 cb 03 	lds	r24, 0x03CB
    69ce:	55 0f       	add	r21, r21
    69d0:	85 2b       	or	r24, r21
    69d2:	80 93 cb 03 	sts	0x03CB, r24
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    69d6:	80 91 cd 03 	lds	r24, 0x03CD
    69da:	81 30       	cpi	r24, 0x01	; 1
    69dc:	41 f4       	brne	.+16     	; 0x69ee <twi_writeTo+0x6c>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    69de:	10 92 cd 03 	sts	0x03CD, r1
    TWDR = twi_slarw;				
    69e2:	80 91 cb 03 	lds	r24, 0x03CB
    69e6:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    69ea:	85 ec       	ldi	r24, 0xC5	; 197
    69ec:	01 c0       	rjmp	.+2      	; 0x69f0 <twi_writeTo+0x6e>
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
    69ee:	85 ee       	ldi	r24, 0xE5	; 229
    69f0:	80 93 bc 00 	sts	0x00BC, r24

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    69f4:	11 23       	and	r17, r17
    69f6:	21 f0       	breq	.+8      	; 0x6a00 <twi_writeTo+0x7e>
    69f8:	80 91 ca 03 	lds	r24, 0x03CA
    69fc:	82 30       	cpi	r24, 0x02	; 2
    69fe:	e1 f3       	breq	.-8      	; 0x69f8 <twi_writeTo+0x76>
    continue;
  }
  
  if (twi_error == 0xFF)
    6a00:	80 91 37 04 	lds	r24, 0x0437
    6a04:	8f 3f       	cpi	r24, 0xFF	; 255
    6a06:	11 f4       	brne	.+4      	; 0x6a0c <twi_writeTo+0x8a>
    6a08:	80 e0       	ldi	r24, 0x00	; 0
    6a0a:	0d c0       	rjmp	.+26     	; 0x6a26 <twi_writeTo+0xa4>
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    6a0c:	80 91 37 04 	lds	r24, 0x0437
    6a10:	80 32       	cpi	r24, 0x20	; 32
    6a12:	11 f4       	brne	.+4      	; 0x6a18 <twi_writeTo+0x96>
    6a14:	82 e0       	ldi	r24, 0x02	; 2
    6a16:	07 c0       	rjmp	.+14     	; 0x6a26 <twi_writeTo+0xa4>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    6a18:	80 91 37 04 	lds	r24, 0x0437
    6a1c:	80 33       	cpi	r24, 0x30	; 48
    6a1e:	11 f0       	breq	.+4      	; 0x6a24 <twi_writeTo+0xa2>
    6a20:	84 e0       	ldi	r24, 0x04	; 4
    6a22:	01 c0       	rjmp	.+2      	; 0x6a26 <twi_writeTo+0xa4>
    6a24:	83 e0       	ldi	r24, 0x03	; 3
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
}
    6a26:	1f 91       	pop	r17
    6a28:	0f 91       	pop	r16
    6a2a:	08 95       	ret

00006a2c <twi_transmit>:
 * Output   1 length too long for buffer
 *          2 not slave transmitter
 *          0 ok
 */
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
    6a2c:	48 2f       	mov	r20, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    6a2e:	61 32       	cpi	r22, 0x21	; 33
    6a30:	10 f0       	brcs	.+4      	; 0x6a36 <twi_transmit+0xa>
    6a32:	81 e0       	ldi	r24, 0x01	; 1
    6a34:	08 95       	ret
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    6a36:	80 91 ca 03 	lds	r24, 0x03CA
    6a3a:	84 30       	cpi	r24, 0x04	; 4
    6a3c:	11 f0       	breq	.+4      	; 0x6a42 <twi_transmit+0x16>
    6a3e:	82 e0       	ldi	r24, 0x02	; 2
    6a40:	08 95       	ret
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
    6a42:	60 93 15 04 	sts	0x0415, r22
    6a46:	a4 ef       	ldi	r26, 0xF4	; 244
    6a48:	b3 e0       	ldi	r27, 0x03	; 3
    6a4a:	84 2f       	mov	r24, r20
    6a4c:	9c 01       	movw	r18, r24
    6a4e:	f9 01       	movw	r30, r18
    6a50:	02 c0       	rjmp	.+4      	; 0x6a56 <twi_transmit+0x2a>
  for(i = 0; i < length; ++i){
    twi_txBuffer[i] = data[i];
    6a52:	81 91       	ld	r24, Z+
    6a54:	8d 93       	st	X+, r24
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
    6a56:	8e 2f       	mov	r24, r30
    6a58:	84 1b       	sub	r24, r20
    6a5a:	86 17       	cp	r24, r22
    6a5c:	d0 f3       	brcs	.-12     	; 0x6a52 <twi_transmit+0x26>
    6a5e:	80 e0       	ldi	r24, 0x00	; 0
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
}
    6a60:	08 95       	ret

00006a62 <__vector_24>:
  // update twi state
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
    6a62:	1f 92       	push	r1
    6a64:	0f 92       	push	r0
    6a66:	0f b6       	in	r0, 0x3f	; 63
    6a68:	0f 92       	push	r0
    6a6a:	11 24       	eor	r1, r1
    6a6c:	2f 93       	push	r18
    6a6e:	3f 93       	push	r19
    6a70:	4f 93       	push	r20
    6a72:	5f 93       	push	r21
    6a74:	6f 93       	push	r22
    6a76:	7f 93       	push	r23
    6a78:	8f 93       	push	r24
    6a7a:	9f 93       	push	r25
    6a7c:	af 93       	push	r26
    6a7e:	bf 93       	push	r27
    6a80:	ef 93       	push	r30
    6a82:	ff 93       	push	r31
  switch(TW_STATUS){
    6a84:	80 91 b9 00 	lds	r24, 0x00B9
    6a88:	90 e0       	ldi	r25, 0x00	; 0
    6a8a:	88 7f       	andi	r24, 0xF8	; 248
    6a8c:	90 70       	andi	r25, 0x00	; 0
    6a8e:	80 36       	cpi	r24, 0x60	; 96
    6a90:	91 05       	cpc	r25, r1
    6a92:	09 f4       	brne	.+2      	; 0x6a96 <__vector_24+0x34>
    6a94:	f2 c0       	rjmp	.+484    	; 0x6c7a <__vector_24+0x218>
    6a96:	81 36       	cpi	r24, 0x61	; 97
    6a98:	91 05       	cpc	r25, r1
    6a9a:	cc f5       	brge	.+114    	; 0x6b0e <__vector_24+0xac>
    6a9c:	88 32       	cpi	r24, 0x28	; 40
    6a9e:	91 05       	cpc	r25, r1
    6aa0:	09 f4       	brne	.+2      	; 0x6aa4 <__vector_24+0x42>
    6aa2:	7b c0       	rjmp	.+246    	; 0x6b9a <__vector_24+0x138>
    6aa4:	89 32       	cpi	r24, 0x29	; 41
    6aa6:	91 05       	cpc	r25, r1
    6aa8:	b4 f4       	brge	.+44     	; 0x6ad6 <__vector_24+0x74>
    6aaa:	80 31       	cpi	r24, 0x10	; 16
    6aac:	91 05       	cpc	r25, r1
    6aae:	09 f4       	brne	.+2      	; 0x6ab2 <__vector_24+0x50>
    6ab0:	6f c0       	rjmp	.+222    	; 0x6b90 <__vector_24+0x12e>
    6ab2:	81 31       	cpi	r24, 0x11	; 17
    6ab4:	91 05       	cpc	r25, r1
    6ab6:	3c f4       	brge	.+14     	; 0x6ac6 <__vector_24+0x64>
    6ab8:	00 97       	sbiw	r24, 0x00	; 0
    6aba:	09 f4       	brne	.+2      	; 0x6abe <__vector_24+0x5c>
    6abc:	47 c1       	rjmp	.+654    	; 0x6d4c <__vector_24+0x2ea>
    6abe:	08 97       	sbiw	r24, 0x08	; 8
    6ac0:	09 f0       	breq	.+2      	; 0x6ac4 <__vector_24+0x62>
    6ac2:	4f c1       	rjmp	.+670    	; 0x6d62 <__vector_24+0x300>
    6ac4:	65 c0       	rjmp	.+202    	; 0x6b90 <__vector_24+0x12e>
    6ac6:	88 31       	cpi	r24, 0x18	; 24
    6ac8:	91 05       	cpc	r25, r1
    6aca:	09 f4       	brne	.+2      	; 0x6ace <__vector_24+0x6c>
    6acc:	66 c0       	rjmp	.+204    	; 0x6b9a <__vector_24+0x138>
    6ace:	80 97       	sbiw	r24, 0x20	; 32
    6ad0:	09 f0       	breq	.+2      	; 0x6ad4 <__vector_24+0x72>
    6ad2:	47 c1       	rjmp	.+654    	; 0x6d62 <__vector_24+0x300>
    6ad4:	82 c0       	rjmp	.+260    	; 0x6bda <__vector_24+0x178>
    6ad6:	80 34       	cpi	r24, 0x40	; 64
    6ad8:	91 05       	cpc	r25, r1
    6ada:	09 f4       	brne	.+2      	; 0x6ade <__vector_24+0x7c>
    6adc:	a4 c0       	rjmp	.+328    	; 0x6c26 <__vector_24+0x1c4>
    6ade:	81 34       	cpi	r24, 0x41	; 65
    6ae0:	91 05       	cpc	r25, r1
    6ae2:	44 f4       	brge	.+16     	; 0x6af4 <__vector_24+0x92>
    6ae4:	80 33       	cpi	r24, 0x30	; 48
    6ae6:	91 05       	cpc	r25, r1
    6ae8:	09 f4       	brne	.+2      	; 0x6aec <__vector_24+0x8a>
    6aea:	82 c0       	rjmp	.+260    	; 0x6bf0 <__vector_24+0x18e>
    6aec:	c8 97       	sbiw	r24, 0x38	; 56
    6aee:	09 f0       	breq	.+2      	; 0x6af2 <__vector_24+0x90>
    6af0:	38 c1       	rjmp	.+624    	; 0x6d62 <__vector_24+0x300>
    6af2:	89 c0       	rjmp	.+274    	; 0x6c06 <__vector_24+0x1a4>
    6af4:	80 35       	cpi	r24, 0x50	; 80
    6af6:	91 05       	cpc	r25, r1
    6af8:	09 f4       	brne	.+2      	; 0x6afc <__vector_24+0x9a>
    6afa:	89 c0       	rjmp	.+274    	; 0x6c0e <__vector_24+0x1ac>
    6afc:	88 35       	cpi	r24, 0x58	; 88
    6afe:	91 05       	cpc	r25, r1
    6b00:	09 f4       	brne	.+2      	; 0x6b04 <__vector_24+0xa2>
    6b02:	96 c0       	rjmp	.+300    	; 0x6c30 <__vector_24+0x1ce>
    6b04:	88 34       	cpi	r24, 0x48	; 72
    6b06:	91 05       	cpc	r25, r1
    6b08:	09 f0       	breq	.+2      	; 0x6b0c <__vector_24+0xaa>
    6b0a:	2b c1       	rjmp	.+598    	; 0x6d62 <__vector_24+0x300>
    6b0c:	ae c0       	rjmp	.+348    	; 0x6c6a <__vector_24+0x208>
    6b0e:	88 39       	cpi	r24, 0x98	; 152
    6b10:	91 05       	cpc	r25, r1
    6b12:	09 f4       	brne	.+2      	; 0x6b16 <__vector_24+0xb4>
    6b14:	13 c1       	rjmp	.+550    	; 0x6d3c <__vector_24+0x2da>
    6b16:	89 39       	cpi	r24, 0x99	; 153
    6b18:	91 05       	cpc	r25, r1
    6b1a:	ec f4       	brge	.+58     	; 0x6b56 <__vector_24+0xf4>
    6b1c:	88 37       	cpi	r24, 0x78	; 120
    6b1e:	91 05       	cpc	r25, r1
    6b20:	09 f4       	brne	.+2      	; 0x6b24 <__vector_24+0xc2>
    6b22:	ab c0       	rjmp	.+342    	; 0x6c7a <__vector_24+0x218>
    6b24:	89 37       	cpi	r24, 0x79	; 121
    6b26:	91 05       	cpc	r25, r1
    6b28:	4c f4       	brge	.+18     	; 0x6b3c <__vector_24+0xda>
    6b2a:	88 36       	cpi	r24, 0x68	; 104
    6b2c:	91 05       	cpc	r25, r1
    6b2e:	09 f4       	brne	.+2      	; 0x6b32 <__vector_24+0xd0>
    6b30:	a4 c0       	rjmp	.+328    	; 0x6c7a <__vector_24+0x218>
    6b32:	80 37       	cpi	r24, 0x70	; 112
    6b34:	91 05       	cpc	r25, r1
    6b36:	09 f0       	breq	.+2      	; 0x6b3a <__vector_24+0xd8>
    6b38:	14 c1       	rjmp	.+552    	; 0x6d62 <__vector_24+0x300>
    6b3a:	9f c0       	rjmp	.+318    	; 0x6c7a <__vector_24+0x218>
    6b3c:	88 38       	cpi	r24, 0x88	; 136
    6b3e:	91 05       	cpc	r25, r1
    6b40:	09 f4       	brne	.+2      	; 0x6b44 <__vector_24+0xe2>
    6b42:	fc c0       	rjmp	.+504    	; 0x6d3c <__vector_24+0x2da>
    6b44:	80 39       	cpi	r24, 0x90	; 144
    6b46:	91 05       	cpc	r25, r1
    6b48:	09 f4       	brne	.+2      	; 0x6b4c <__vector_24+0xea>
    6b4a:	9d c0       	rjmp	.+314    	; 0x6c86 <__vector_24+0x224>
    6b4c:	80 38       	cpi	r24, 0x80	; 128
    6b4e:	91 05       	cpc	r25, r1
    6b50:	09 f0       	breq	.+2      	; 0x6b54 <__vector_24+0xf2>
    6b52:	07 c1       	rjmp	.+526    	; 0x6d62 <__vector_24+0x300>
    6b54:	98 c0       	rjmp	.+304    	; 0x6c86 <__vector_24+0x224>
    6b56:	80 3b       	cpi	r24, 0xB0	; 176
    6b58:	91 05       	cpc	r25, r1
    6b5a:	09 f4       	brne	.+2      	; 0x6b5e <__vector_24+0xfc>
    6b5c:	c6 c0       	rjmp	.+396    	; 0x6cea <__vector_24+0x288>
    6b5e:	81 3b       	cpi	r24, 0xB1	; 177
    6b60:	91 05       	cpc	r25, r1
    6b62:	4c f4       	brge	.+18     	; 0x6b76 <__vector_24+0x114>
    6b64:	80 3a       	cpi	r24, 0xA0	; 160
    6b66:	91 05       	cpc	r25, r1
    6b68:	09 f4       	brne	.+2      	; 0x6b6c <__vector_24+0x10a>
    6b6a:	9f c0       	rjmp	.+318    	; 0x6caa <__vector_24+0x248>
    6b6c:	88 3a       	cpi	r24, 0xA8	; 168
    6b6e:	91 05       	cpc	r25, r1
    6b70:	09 f0       	breq	.+2      	; 0x6b74 <__vector_24+0x112>
    6b72:	f7 c0       	rjmp	.+494    	; 0x6d62 <__vector_24+0x300>
    6b74:	ba c0       	rjmp	.+372    	; 0x6cea <__vector_24+0x288>
    6b76:	80 3c       	cpi	r24, 0xC0	; 192
    6b78:	91 05       	cpc	r25, r1
    6b7a:	09 f4       	brne	.+2      	; 0x6b7e <__vector_24+0x11c>
    6b7c:	e3 c0       	rjmp	.+454    	; 0x6d44 <__vector_24+0x2e2>
    6b7e:	88 3c       	cpi	r24, 0xC8	; 200
    6b80:	91 05       	cpc	r25, r1
    6b82:	09 f4       	brne	.+2      	; 0x6b86 <__vector_24+0x124>
    6b84:	df c0       	rjmp	.+446    	; 0x6d44 <__vector_24+0x2e2>
    6b86:	88 3b       	cpi	r24, 0xB8	; 184
    6b88:	91 05       	cpc	r25, r1
    6b8a:	09 f0       	breq	.+2      	; 0x6b8e <__vector_24+0x12c>
    6b8c:	ea c0       	rjmp	.+468    	; 0x6d62 <__vector_24+0x300>
    6b8e:	c2 c0       	rjmp	.+388    	; 0x6d14 <__vector_24+0x2b2>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    6b90:	80 91 cb 03 	lds	r24, 0x03CB
    6b94:	80 93 bb 00 	sts	0x00BB, r24
    6b98:	cf c0       	rjmp	.+414    	; 0x6d38 <__vector_24+0x2d6>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    6b9a:	90 91 f2 03 	lds	r25, 0x03F2
    6b9e:	80 91 f3 03 	lds	r24, 0x03F3
    6ba2:	98 17       	cp	r25, r24
    6ba4:	68 f4       	brcc	.+26     	; 0x6bc0 <__vector_24+0x15e>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    6ba6:	90 91 f2 03 	lds	r25, 0x03F2
    6baa:	e9 2f       	mov	r30, r25
    6bac:	f0 e0       	ldi	r31, 0x00	; 0
    6bae:	ee 52       	subi	r30, 0x2E	; 46
    6bb0:	fc 4f       	sbci	r31, 0xFC	; 252
    6bb2:	80 81       	ld	r24, Z
    6bb4:	80 93 bb 00 	sts	0x00BB, r24
    6bb8:	9f 5f       	subi	r25, 0xFF	; 255
    6bba:	90 93 f2 03 	sts	0x03F2, r25
    6bbe:	bc c0       	rjmp	.+376    	; 0x6d38 <__vector_24+0x2d6>
        twi_reply(1);
      }else{
	if (twi_sendStop)
    6bc0:	80 91 cc 03 	lds	r24, 0x03CC
    6bc4:	88 23       	and	r24, r24
    6bc6:	09 f4       	brne	.+2      	; 0x6bca <__vector_24+0x168>
    6bc8:	4b c0       	rjmp	.+150    	; 0x6c60 <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    6bca:	85 ed       	ldi	r24, 0xD5	; 213
    6bcc:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    6bd0:	80 91 bc 00 	lds	r24, 0x00BC
    6bd4:	84 fd       	sbrc	r24, 4
    6bd6:	fc cf       	rjmp	.-8      	; 0x6bd0 <__vector_24+0x16e>
    6bd8:	c2 c0       	rjmp	.+388    	; 0x6d5e <__vector_24+0x2fc>
	  twi_state = TWI_READY;
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    6bda:	80 e2       	ldi	r24, 0x20	; 32
    6bdc:	80 93 37 04 	sts	0x0437, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    6be0:	85 ed       	ldi	r24, 0xD5	; 213
    6be2:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    6be6:	80 91 bc 00 	lds	r24, 0x00BC
    6bea:	84 fd       	sbrc	r24, 4
    6bec:	fc cf       	rjmp	.-8      	; 0x6be6 <__vector_24+0x184>
    6bee:	b7 c0       	rjmp	.+366    	; 0x6d5e <__vector_24+0x2fc>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    6bf0:	80 e3       	ldi	r24, 0x30	; 48
    6bf2:	80 93 37 04 	sts	0x0437, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    6bf6:	85 ed       	ldi	r24, 0xD5	; 213
    6bf8:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    6bfc:	80 91 bc 00 	lds	r24, 0x00BC
    6c00:	84 fd       	sbrc	r24, 4
    6c02:	fc cf       	rjmp	.-8      	; 0x6bfc <__vector_24+0x19a>
    6c04:	ac c0       	rjmp	.+344    	; 0x6d5e <__vector_24+0x2fc>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    6c06:	88 e3       	ldi	r24, 0x38	; 56
    6c08:	80 93 37 04 	sts	0x0437, r24
    6c0c:	9b c0       	rjmp	.+310    	; 0x6d44 <__vector_24+0x2e2>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    6c0e:	80 91 f2 03 	lds	r24, 0x03F2
    6c12:	90 91 bb 00 	lds	r25, 0x00BB
    6c16:	e8 2f       	mov	r30, r24
    6c18:	f0 e0       	ldi	r31, 0x00	; 0
    6c1a:	ee 52       	subi	r30, 0x2E	; 46
    6c1c:	fc 4f       	sbci	r31, 0xFC	; 252
    6c1e:	90 83       	st	Z, r25
    6c20:	8f 5f       	subi	r24, 0xFF	; 255
    6c22:	80 93 f2 03 	sts	0x03F2, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    6c26:	90 91 f2 03 	lds	r25, 0x03F2
    6c2a:	80 91 f3 03 	lds	r24, 0x03F3
    6c2e:	82 c0       	rjmp	.+260    	; 0x6d34 <__vector_24+0x2d2>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    6c30:	80 91 f2 03 	lds	r24, 0x03F2
    6c34:	90 91 bb 00 	lds	r25, 0x00BB
    6c38:	e8 2f       	mov	r30, r24
    6c3a:	f0 e0       	ldi	r31, 0x00	; 0
    6c3c:	ee 52       	subi	r30, 0x2E	; 46
    6c3e:	fc 4f       	sbci	r31, 0xFC	; 252
    6c40:	90 83       	st	Z, r25
    6c42:	8f 5f       	subi	r24, 0xFF	; 255
    6c44:	80 93 f2 03 	sts	0x03F2, r24
	if (twi_sendStop)
    6c48:	80 91 cc 03 	lds	r24, 0x03CC
    6c4c:	88 23       	and	r24, r24
    6c4e:	41 f0       	breq	.+16     	; 0x6c60 <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    6c50:	85 ed       	ldi	r24, 0xD5	; 213
    6c52:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    6c56:	80 91 bc 00 	lds	r24, 0x00BC
    6c5a:	84 fd       	sbrc	r24, 4
    6c5c:	fc cf       	rjmp	.-8      	; 0x6c56 <__vector_24+0x1f4>
    6c5e:	7f c0       	rjmp	.+254    	; 0x6d5e <__vector_24+0x2fc>
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    6c60:	81 e0       	ldi	r24, 0x01	; 1
    6c62:	80 93 cd 03 	sts	0x03CD, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    6c66:	84 ea       	ldi	r24, 0xA4	; 164
    6c68:	6e c0       	rjmp	.+220    	; 0x6d46 <__vector_24+0x2e4>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    6c6a:	85 ed       	ldi	r24, 0xD5	; 213
    6c6c:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    6c70:	80 91 bc 00 	lds	r24, 0x00BC
    6c74:	84 fd       	sbrc	r24, 4
    6c76:	fc cf       	rjmp	.-8      	; 0x6c70 <__vector_24+0x20e>
    6c78:	72 c0       	rjmp	.+228    	; 0x6d5e <__vector_24+0x2fc>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    6c7a:	83 e0       	ldi	r24, 0x03	; 3
    6c7c:	80 93 ca 03 	sts	0x03CA, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    6c80:	10 92 36 04 	sts	0x0436, r1
    6c84:	59 c0       	rjmp	.+178    	; 0x6d38 <__vector_24+0x2d6>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    6c86:	80 91 36 04 	lds	r24, 0x0436
    6c8a:	80 32       	cpi	r24, 0x20	; 32
    6c8c:	08 f0       	brcs	.+2      	; 0x6c90 <__vector_24+0x22e>
    6c8e:	56 c0       	rjmp	.+172    	; 0x6d3c <__vector_24+0x2da>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    6c90:	80 91 36 04 	lds	r24, 0x0436
    6c94:	90 91 bb 00 	lds	r25, 0x00BB
    6c98:	e8 2f       	mov	r30, r24
    6c9a:	f0 e0       	ldi	r31, 0x00	; 0
    6c9c:	ea 5e       	subi	r30, 0xEA	; 234
    6c9e:	fb 4f       	sbci	r31, 0xFB	; 251
    6ca0:	90 83       	st	Z, r25
    6ca2:	8f 5f       	subi	r24, 0xFF	; 255
    6ca4:	80 93 36 04 	sts	0x0436, r24
    6ca8:	47 c0       	rjmp	.+142    	; 0x6d38 <__vector_24+0x2d6>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    6caa:	80 91 36 04 	lds	r24, 0x0436
    6cae:	80 32       	cpi	r24, 0x20	; 32
    6cb0:	30 f4       	brcc	.+12     	; 0x6cbe <__vector_24+0x25c>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    6cb2:	e0 91 36 04 	lds	r30, 0x0436
    6cb6:	f0 e0       	ldi	r31, 0x00	; 0
    6cb8:	ea 5e       	subi	r30, 0xEA	; 234
    6cba:	fb 4f       	sbci	r31, 0xFB	; 251
    6cbc:	10 82       	st	Z, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    6cbe:	85 ed       	ldi	r24, 0xD5	; 213
    6cc0:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    6cc4:	80 91 bc 00 	lds	r24, 0x00BC
    6cc8:	84 fd       	sbrc	r24, 4
    6cca:	fc cf       	rjmp	.-8      	; 0x6cc4 <__vector_24+0x262>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    6ccc:	10 92 ca 03 	sts	0x03CA, r1
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    6cd0:	60 91 36 04 	lds	r22, 0x0436
    6cd4:	e0 91 d0 03 	lds	r30, 0x03D0
    6cd8:	f0 91 d1 03 	lds	r31, 0x03D1
    6cdc:	86 e1       	ldi	r24, 0x16	; 22
    6cde:	94 e0       	ldi	r25, 0x04	; 4
    6ce0:	70 e0       	ldi	r23, 0x00	; 0
    6ce2:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    6ce4:	10 92 36 04 	sts	0x0436, r1
    6ce8:	2d c0       	rjmp	.+90     	; 0x6d44 <__vector_24+0x2e2>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    6cea:	84 e0       	ldi	r24, 0x04	; 4
    6cec:	80 93 ca 03 	sts	0x03CA, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    6cf0:	10 92 14 04 	sts	0x0414, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    6cf4:	10 92 15 04 	sts	0x0415, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    6cf8:	e0 91 ce 03 	lds	r30, 0x03CE
    6cfc:	f0 91 cf 03 	lds	r31, 0x03CF
    6d00:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    6d02:	80 91 15 04 	lds	r24, 0x0415
    6d06:	88 23       	and	r24, r24
    6d08:	29 f4       	brne	.+10     	; 0x6d14 <__vector_24+0x2b2>
        twi_txBufferLength = 1;
    6d0a:	81 e0       	ldi	r24, 0x01	; 1
    6d0c:	80 93 15 04 	sts	0x0415, r24
        twi_txBuffer[0] = 0x00;
    6d10:	10 92 f4 03 	sts	0x03F4, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    6d14:	90 91 14 04 	lds	r25, 0x0414
    6d18:	e9 2f       	mov	r30, r25
    6d1a:	f0 e0       	ldi	r31, 0x00	; 0
    6d1c:	ec 50       	subi	r30, 0x0C	; 12
    6d1e:	fc 4f       	sbci	r31, 0xFC	; 252
    6d20:	80 81       	ld	r24, Z
    6d22:	80 93 bb 00 	sts	0x00BB, r24
    6d26:	9f 5f       	subi	r25, 0xFF	; 255
    6d28:	90 93 14 04 	sts	0x0414, r25
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    6d2c:	90 91 14 04 	lds	r25, 0x0414
    6d30:	80 91 15 04 	lds	r24, 0x0415
    6d34:	98 17       	cp	r25, r24
    6d36:	10 f4       	brcc	.+4      	; 0x6d3c <__vector_24+0x2da>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    6d38:	85 ec       	ldi	r24, 0xC5	; 197
    6d3a:	01 c0       	rjmp	.+2      	; 0x6d3e <__vector_24+0x2dc>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    6d3c:	85 e8       	ldi	r24, 0x85	; 133
    6d3e:	80 93 bc 00 	sts	0x00BC, r24
    6d42:	0f c0       	rjmp	.+30     	; 0x6d62 <__vector_24+0x300>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    6d44:	85 ec       	ldi	r24, 0xC5	; 197
    6d46:	80 93 bc 00 	sts	0x00BC, r24
    6d4a:	09 c0       	rjmp	.+18     	; 0x6d5e <__vector_24+0x2fc>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    6d4c:	10 92 37 04 	sts	0x0437, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    6d50:	85 ed       	ldi	r24, 0xD5	; 213
    6d52:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    6d56:	80 91 bc 00 	lds	r24, 0x00BC
    6d5a:	84 fd       	sbrc	r24, 4
    6d5c:	fc cf       	rjmp	.-8      	; 0x6d56 <__vector_24+0x2f4>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    6d5e:	10 92 ca 03 	sts	0x03CA, r1
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    6d62:	ff 91       	pop	r31
    6d64:	ef 91       	pop	r30
    6d66:	bf 91       	pop	r27
    6d68:	af 91       	pop	r26
    6d6a:	9f 91       	pop	r25
    6d6c:	8f 91       	pop	r24
    6d6e:	7f 91       	pop	r23
    6d70:	6f 91       	pop	r22
    6d72:	5f 91       	pop	r21
    6d74:	4f 91       	pop	r20
    6d76:	3f 91       	pop	r19
    6d78:	2f 91       	pop	r18
    6d7a:	0f 90       	pop	r0
    6d7c:	0f be       	out	0x3f, r0	; 63
    6d7e:	0f 90       	pop	r0
    6d80:	1f 90       	pop	r1
    6d82:	18 95       	reti

00006d84 <twi_init>:
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
    6d84:	10 92 ca 03 	sts	0x03CA, r1
  twi_sendStop = true;		// default value
    6d88:	81 e0       	ldi	r24, 0x01	; 1
    6d8a:	80 93 cc 03 	sts	0x03CC, r24
  twi_inRepStart = false;
    6d8e:	10 92 cd 03 	sts	0x03CD, r1
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
    6d92:	82 e1       	ldi	r24, 0x12	; 18
    6d94:	61 e0       	ldi	r22, 0x01	; 1
    6d96:	0e 94 ba 38 	call	0x7174	; 0x7174 <digitalWrite>
  digitalWrite(SCL, 1);
    6d9a:	83 e1       	ldi	r24, 0x13	; 19
    6d9c:	61 e0       	ldi	r22, 0x01	; 1
    6d9e:	0e 94 ba 38 	call	0x7174	; 0x7174 <digitalWrite>

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    6da2:	e9 eb       	ldi	r30, 0xB9	; 185
    6da4:	f0 e0       	ldi	r31, 0x00	; 0
    6da6:	80 81       	ld	r24, Z
    6da8:	8e 7f       	andi	r24, 0xFE	; 254
    6daa:	80 83       	st	Z, r24
  cbi(TWSR, TWPS1);
    6dac:	80 81       	ld	r24, Z
    6dae:	8d 7f       	andi	r24, 0xFD	; 253
    6db0:	80 83       	st	Z, r24
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
    6db2:	8d ef       	ldi	r24, 0xFD	; 253
    6db4:	80 93 b8 00 	sts	0x00B8, r24
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    6db8:	85 e4       	ldi	r24, 0x45	; 69
    6dba:	80 93 bc 00 	sts	0x00BC, r24
}
    6dbe:	08 95       	ret

00006dc0 <ArduinoJson::Generator::JsonPrintable::printTo(char*, unsigned int) const>:
#include "StringBuilder.h"

using namespace ArduinoJson::Generator;
using namespace ArduinoJson::Internals;

size_t JsonPrintable::printTo(char* buffer, size_t bufferSize) const
    6dc0:	df 93       	push	r29
    6dc2:	cf 93       	push	r28
    6dc4:	cd b7       	in	r28, 0x3d	; 61
    6dc6:	de b7       	in	r29, 0x3e	; 62
    6dc8:	2a 97       	sbiw	r28, 0x0a	; 10
    6dca:	0f b6       	in	r0, 0x3f	; 63
    6dcc:	f8 94       	cli
    6dce:	de bf       	out	0x3e, r29	; 62
    6dd0:	0f be       	out	0x3f, r0	; 63
    6dd2:	cd bf       	out	0x3d, r28	; 61
    6dd4:	dc 01       	movw	r26, r24
    6dd6:	fb 01       	movw	r30, r22
  public:
    Print() : write_error(0) {}
    6dd8:	1c 82       	std	Y+4, r1	; 0x04
    6dda:	1b 82       	std	Y+3, r1	; 0x03
    {
        class StringBuilder : public Print
        {
        public:
            StringBuilder(char* buf, int size)
                : _buffer(buf), _capacity(size - 1), _length(0)
    6ddc:	89 ee       	ldi	r24, 0xE9	; 233
    6dde:	91 e0       	ldi	r25, 0x01	; 1
    6de0:	9a 83       	std	Y+2, r25	; 0x02
    6de2:	89 83       	std	Y+1, r24	; 0x01
    6de4:	7e 83       	std	Y+6, r23	; 0x06
    6de6:	6d 83       	std	Y+5, r22	; 0x05
    6de8:	41 50       	subi	r20, 0x01	; 1
    6dea:	50 40       	sbci	r21, 0x00	; 0
    6dec:	58 87       	std	Y+8, r21	; 0x08
    6dee:	4f 83       	std	Y+7, r20	; 0x07
    6df0:	1a 86       	std	Y+10, r1	; 0x0a
    6df2:	19 86       	std	Y+9, r1	; 0x09
            {
                _buffer[0] = 0;
    6df4:	10 82       	st	Z, r1
{
    StringBuilder sb(buffer, bufferSize);
    return printTo(sb);
    6df6:	ed 91       	ld	r30, X+
    6df8:	fc 91       	ld	r31, X
    6dfa:	11 97       	sbiw	r26, 0x01	; 1
    6dfc:	01 90       	ld	r0, Z+
    6dfe:	f0 81       	ld	r31, Z
    6e00:	e0 2d       	mov	r30, r0
    6e02:	cd 01       	movw	r24, r26
    6e04:	be 01       	movw	r22, r28
    6e06:	6f 5f       	subi	r22, 0xFF	; 255
    6e08:	7f 4f       	sbci	r23, 0xFF	; 255
    6e0a:	09 95       	icall
}
    6e0c:	2a 96       	adiw	r28, 0x0a	; 10
    6e0e:	0f b6       	in	r0, 0x3f	; 63
    6e10:	f8 94       	cli
    6e12:	de bf       	out	0x3e, r29	; 62
    6e14:	0f be       	out	0x3f, r0	; 63
    6e16:	cd bf       	out	0x3d, r28	; 61
    6e18:	cf 91       	pop	r28
    6e1a:	df 91       	pop	r29
    6e1c:	08 95       	ret

00006e1e <ArduinoJson::Internals::StringBuilder::write(unsigned char)>:

#include "StringBuilder.h"

using namespace ArduinoJson::Internals;

size_t StringBuilder::write(uint8_t c)
    6e1e:	dc 01       	movw	r26, r24
{
    if (_length >= _capacity) return 0;
    6e20:	18 96       	adiw	r26, 0x08	; 8
    6e22:	2d 91       	ld	r18, X+
    6e24:	3c 91       	ld	r19, X
    6e26:	19 97       	sbiw	r26, 0x09	; 9
    6e28:	16 96       	adiw	r26, 0x06	; 6
    6e2a:	8d 91       	ld	r24, X+
    6e2c:	9c 91       	ld	r25, X
    6e2e:	17 97       	sbiw	r26, 0x07	; 7
    6e30:	28 17       	cp	r18, r24
    6e32:	39 07       	cpc	r19, r25
    6e34:	1c f0       	brlt	.+6      	; 0x6e3c <ArduinoJson::Internals::StringBuilder::write(unsigned char)+0x1e>
    6e36:	20 e0       	ldi	r18, 0x00	; 0
    6e38:	30 e0       	ldi	r19, 0x00	; 0
    6e3a:	16 c0       	rjmp	.+44     	; 0x6e68 <ArduinoJson::Internals::StringBuilder::write(unsigned char)+0x4a>

    _buffer[_length++] = c;
    6e3c:	14 96       	adiw	r26, 0x04	; 4
    6e3e:	ed 91       	ld	r30, X+
    6e40:	fc 91       	ld	r31, X
    6e42:	15 97       	sbiw	r26, 0x05	; 5
    6e44:	e2 0f       	add	r30, r18
    6e46:	f3 1f       	adc	r31, r19
    6e48:	60 83       	st	Z, r22
    6e4a:	c9 01       	movw	r24, r18
    6e4c:	01 96       	adiw	r24, 0x01	; 1
    6e4e:	19 96       	adiw	r26, 0x09	; 9
    6e50:	9c 93       	st	X, r25
    6e52:	8e 93       	st	-X, r24
    6e54:	18 97       	sbiw	r26, 0x08	; 8
    _buffer[_length] = 0;
    6e56:	14 96       	adiw	r26, 0x04	; 4
    6e58:	ed 91       	ld	r30, X+
    6e5a:	fc 91       	ld	r31, X
    6e5c:	15 97       	sbiw	r26, 0x05	; 5
    6e5e:	e8 0f       	add	r30, r24
    6e60:	f9 1f       	adc	r31, r25
    6e62:	10 82       	st	Z, r1
    6e64:	21 e0       	ldi	r18, 0x01	; 1
    6e66:	30 e0       	ldi	r19, 0x00	; 0
    return 1;
}
    6e68:	c9 01       	movw	r24, r18
    6e6a:	08 95       	ret

00006e6c <ArduinoJson::Internals::EscapedString::printTo(char const*, Print&)>:
    return specialChar != 0
        ? p.write('\\') + p.write(specialChar)
        : p.write(c);
}

size_t EscapedString::printTo(const char* s, Print& p)
    6e6c:	bf 92       	push	r11
    6e6e:	cf 92       	push	r12
    6e70:	df 92       	push	r13
    6e72:	ef 92       	push	r14
    6e74:	ff 92       	push	r15
    6e76:	0f 93       	push	r16
    6e78:	1f 93       	push	r17
    6e7a:	cf 93       	push	r28
    6e7c:	df 93       	push	r29
    6e7e:	7c 01       	movw	r14, r24
    6e80:	eb 01       	movw	r28, r22
{
    if (!s) return p.print("null");
    6e82:	00 97       	sbiw	r24, 0x00	; 0
    6e84:	39 f4       	brne	.+14     	; 0x6e94 <ArduinoJson::Internals::EscapedString::printTo(char const*, Print&)+0x28>
    6e86:	cb 01       	movw	r24, r22
    6e88:	6c e1       	ldi	r22, 0x1C	; 28
    6e8a:	71 e0       	ldi	r23, 0x01	; 1
    6e8c:	0e 94 27 3d 	call	0x7a4e	; 0x7a4e <Print::print(char const*)>
    6e90:	9c 01       	movw	r18, r24
    6e92:	43 c0       	rjmp	.+134    	; 0x6f1a <ArduinoJson::Internals::EscapedString::printTo(char const*, Print&)+0xae>
    
    size_t n = p.write('\"');
    6e94:	e8 81       	ld	r30, Y
    6e96:	f9 81       	ldd	r31, Y+1	; 0x01
    6e98:	01 90       	ld	r0, Z+
    6e9a:	f0 81       	ld	r31, Z
    6e9c:	e0 2d       	mov	r30, r0
    6e9e:	cb 01       	movw	r24, r22
    6ea0:	62 e2       	ldi	r22, 0x22	; 34
    6ea2:	09 95       	icall
    6ea4:	6c 01       	movw	r12, r24
    6ea6:	27 c0       	rjmp	.+78     	; 0x6ef6 <ArduinoJson::Internals::EscapedString::printTo(char const*, Print&)+0x8a>

    const char* p = "\"\"\\\\\bb\ff\nn\rr\tt\0";

    while (p[0] && p[0] != c)
    {
        p += 2;
    6ea8:	32 96       	adiw	r30, 0x02	; 2
{
    // Optimized for code size on a 8-bit AVR

    const char* p = "\"\"\\\\\bb\ff\nn\rr\tt\0";

    while (p[0] && p[0] != c)
    6eaa:	80 81       	ld	r24, Z
    6eac:	88 23       	and	r24, r24
    6eae:	11 f0       	breq	.+4      	; 0x6eb4 <ArduinoJson::Internals::EscapedString::printTo(char const*, Print&)+0x48>
    6eb0:	86 17       	cp	r24, r22
    6eb2:	d1 f7       	brne	.-12     	; 0x6ea8 <ArduinoJson::Internals::EscapedString::printTo(char const*, Print&)+0x3c>
    {
        p += 2;
    }

    return p[1];
    6eb4:	b1 80       	ldd	r11, Z+1	; 0x01
    6eb6:	e8 81       	ld	r30, Y
    6eb8:	f9 81       	ldd	r31, Y+1	; 0x01
{
    char specialChar = getSpecialChar(c);

    return specialChar != 0
        ? p.write('\\') + p.write(specialChar)
        : p.write(c);
    6eba:	bb 20       	and	r11, r11
    6ebc:	91 f0       	breq	.+36     	; 0x6ee2 <ArduinoJson::Internals::EscapedString::printTo(char const*, Print&)+0x76>
    6ebe:	01 90       	ld	r0, Z+
    6ec0:	f0 81       	ld	r31, Z
    6ec2:	e0 2d       	mov	r30, r0
    6ec4:	ce 01       	movw	r24, r28
    6ec6:	6c e5       	ldi	r22, 0x5C	; 92
    6ec8:	09 95       	icall
    6eca:	8c 01       	movw	r16, r24
    6ecc:	e8 81       	ld	r30, Y
    6ece:	f9 81       	ldd	r31, Y+1	; 0x01
    6ed0:	01 90       	ld	r0, Z+
    6ed2:	f0 81       	ld	r31, Z
    6ed4:	e0 2d       	mov	r30, r0
    6ed6:	ce 01       	movw	r24, r28
    6ed8:	6b 2d       	mov	r22, r11
    6eda:	09 95       	icall
    6edc:	80 0f       	add	r24, r16
    6ede:	91 1f       	adc	r25, r17
    6ee0:	05 c0       	rjmp	.+10     	; 0x6eec <ArduinoJson::Internals::EscapedString::printTo(char const*, Print&)+0x80>
    6ee2:	01 90       	ld	r0, Z+
    6ee4:	f0 81       	ld	r31, Z
    6ee6:	e0 2d       	mov	r30, r0
    6ee8:	ce 01       	movw	r24, r28
    6eea:	09 95       	icall
    
    size_t n = p.write('\"');

    while (*s)
    {
        n += printCharTo(*s++, p);
    6eec:	08 94       	sec
    6eee:	e1 1c       	adc	r14, r1
    6ef0:	f1 1c       	adc	r15, r1
    6ef2:	c8 0e       	add	r12, r24
    6ef4:	d9 1e       	adc	r13, r25
{
    if (!s) return p.print("null");
    
    size_t n = p.write('\"');

    while (*s)
    6ef6:	f7 01       	movw	r30, r14
    6ef8:	60 81       	ld	r22, Z
    6efa:	66 23       	and	r22, r22
    6efc:	19 f0       	breq	.+6      	; 0x6f04 <ArduinoJson::Internals::EscapedString::printTo(char const*, Print&)+0x98>
    6efe:	ec e2       	ldi	r30, 0x2C	; 44
    6f00:	f1 e0       	ldi	r31, 0x01	; 1
    6f02:	d3 cf       	rjmp	.-90     	; 0x6eaa <ArduinoJson::Internals::EscapedString::printTo(char const*, Print&)+0x3e>
    {
        n += printCharTo(*s++, p);
    }

    return n + p.write('\"');
    6f04:	e8 81       	ld	r30, Y
    6f06:	f9 81       	ldd	r31, Y+1	; 0x01
    6f08:	01 90       	ld	r0, Z+
    6f0a:	f0 81       	ld	r31, Z
    6f0c:	e0 2d       	mov	r30, r0
    6f0e:	ce 01       	movw	r24, r28
    6f10:	62 e2       	ldi	r22, 0x22	; 34
    6f12:	09 95       	icall
    6f14:	96 01       	movw	r18, r12
    6f16:	28 0f       	add	r18, r24
    6f18:	39 1f       	adc	r19, r25
}
    6f1a:	c9 01       	movw	r24, r18
    6f1c:	df 91       	pop	r29
    6f1e:	cf 91       	pop	r28
    6f20:	1f 91       	pop	r17
    6f22:	0f 91       	pop	r16
    6f24:	ff 90       	pop	r15
    6f26:	ef 90       	pop	r14
    6f28:	df 90       	pop	r13
    6f2a:	cf 90       	pop	r12
    6f2c:	bf 90       	pop	r11
    6f2e:	08 95       	ret

00006f30 <ArduinoJson::Generator::JsonValue::printStringTo(ArduinoJson::Generator::JsonValue::Content const&, Print&)>:
        return c.asPrintable->printTo(p);
    else
        return p.print("null");
}

size_t JsonValue::printStringTo(const Content& c, Print& p)
    6f30:	fc 01       	movw	r30, r24
{
    return EscapedString::printTo(c.asString, p);
    6f32:	80 81       	ld	r24, Z
    6f34:	91 81       	ldd	r25, Z+1	; 0x01
    6f36:	0e 94 36 37 	call	0x6e6c	; 0x6e6c <ArduinoJson::Internals::EscapedString::printTo(char const*, Print&)>
}
    6f3a:	08 95       	ret

00006f3c <ArduinoJson::Generator::JsonObjectBase::printTo(Print&) const>:
using namespace ArduinoJson::Generator;
using namespace ArduinoJson::Internals;

JsonValue JsonObjectBase::_nullValue;

size_t JsonObjectBase::printTo(Print& p) const
    6f3c:	6f 92       	push	r6
    6f3e:	7f 92       	push	r7
    6f40:	8f 92       	push	r8
    6f42:	9f 92       	push	r9
    6f44:	af 92       	push	r10
    6f46:	bf 92       	push	r11
    6f48:	cf 92       	push	r12
    6f4a:	df 92       	push	r13
    6f4c:	ef 92       	push	r14
    6f4e:	ff 92       	push	r15
    6f50:	0f 93       	push	r16
    6f52:	1f 93       	push	r17
    6f54:	cf 93       	push	r28
    6f56:	df 93       	push	r29
    6f58:	8c 01       	movw	r16, r24
    6f5a:	eb 01       	movw	r28, r22
{
    size_t n = 0;

    n += p.write('{');
    6f5c:	e8 81       	ld	r30, Y
    6f5e:	f9 81       	ldd	r31, Y+1	; 0x01
    6f60:	01 90       	ld	r0, Z+
    6f62:	f0 81       	ld	r31, Z
    6f64:	e0 2d       	mov	r30, r0
    6f66:	cb 01       	movw	r24, r22
    6f68:	6b e7       	ldi	r22, 0x7B	; 123
    6f6a:	09 95       	icall
    6f6c:	5c 01       	movw	r10, r24

    // NB: the code has been optimized for a small size on a 8-bit AVR

    const KeyValuePair* current = _items;
    6f6e:	d8 01       	movw	r26, r16
    6f70:	12 96       	adiw	r26, 0x02	; 2
    6f72:	6d 90       	ld	r6, X+
    6f74:	7c 90       	ld	r7, X
    6f76:	13 97       	sbiw	r26, 0x03	; 3
    for (int i = _count; i > 0; i--)
    6f78:	16 96       	adiw	r26, 0x06	; 6
    6f7a:	8d 90       	ld	r8, X+
    6f7c:	9c 90       	ld	r9, X
    6f7e:	17 97       	sbiw	r26, 0x07	; 7
    6f80:	34 c0       	rjmp	.+104    	; 0x6fea <ArduinoJson::Generator::JsonObjectBase::printTo(Print&) const+0xae>
    {       
        n += EscapedString::printTo(current->key, p);
    6f82:	f3 01       	movw	r30, r6
    6f84:	81 91       	ld	r24, Z+
    6f86:	91 91       	ld	r25, Z+
    6f88:	8f 01       	movw	r16, r30
    6f8a:	be 01       	movw	r22, r28
    6f8c:	0e 94 36 37 	call	0x6e6c	; 0x6e6c <ArduinoJson::Internals::EscapedString::printTo(char const*, Print&)>
    6f90:	7c 01       	movw	r14, r24
        n += p.write(':');
    6f92:	e8 81       	ld	r30, Y
    6f94:	f9 81       	ldd	r31, Y+1	; 0x01
    6f96:	01 90       	ld	r0, Z+
    6f98:	f0 81       	ld	r31, Z
    6f9a:	e0 2d       	mov	r30, r0
    6f9c:	ce 01       	movw	r24, r28
    6f9e:	6a e3       	ldi	r22, 0x3A	; 58
    6fa0:	09 95       	icall
    6fa2:	6c 01       	movw	r12, r24
            }

            size_t printTo(Print& p) const
            {
                // handmade polymorphism
                return _printToImpl(_content, p);
    6fa4:	d3 01       	movw	r26, r6
    6fa6:	16 96       	adiw	r26, 0x06	; 6
    6fa8:	ed 91       	ld	r30, X+
    6faa:	fc 91       	ld	r31, X
    6fac:	17 97       	sbiw	r26, 0x07	; 7
    6fae:	c8 01       	movw	r24, r16
    6fb0:	be 01       	movw	r22, r28
    6fb2:	09 95       	icall
    // NB: the code has been optimized for a small size on a 8-bit AVR

    const KeyValuePair* current = _items;
    for (int i = _count; i > 0; i--)
    {       
        n += EscapedString::printTo(current->key, p);
    6fb4:	ec 0c       	add	r14, r12
    6fb6:	fd 1c       	adc	r15, r13
        n += p.write(':');
    6fb8:	ae 0c       	add	r10, r14
    6fba:	bf 1c       	adc	r11, r15
        n += current->value.printTo(p);
    6fbc:	a8 0e       	add	r10, r24
    6fbe:	b9 1e       	adc	r11, r25

        current++;

        if (i > 1)
    6fc0:	b1 e0       	ldi	r27, 0x01	; 1
    6fc2:	8b 16       	cp	r8, r27
    6fc4:	91 04       	cpc	r9, r1
    6fc6:	51 f0       	breq	.+20     	; 0x6fdc <ArduinoJson::Generator::JsonObjectBase::printTo(Print&) const+0xa0>
        {
            n += p.write(',');
    6fc8:	e8 81       	ld	r30, Y
    6fca:	f9 81       	ldd	r31, Y+1	; 0x01
    6fcc:	01 90       	ld	r0, Z+
    6fce:	f0 81       	ld	r31, Z
    6fd0:	e0 2d       	mov	r30, r0
    6fd2:	ce 01       	movw	r24, r28
    6fd4:	6c e2       	ldi	r22, 0x2C	; 44
    6fd6:	09 95       	icall
    6fd8:	a8 0e       	add	r10, r24
    6fda:	b9 1e       	adc	r11, r25
    {       
        n += EscapedString::printTo(current->key, p);
        n += p.write(':');
        n += current->value.printTo(p);

        current++;
    6fdc:	e8 e0       	ldi	r30, 0x08	; 8
    6fde:	f0 e0       	ldi	r31, 0x00	; 0
    6fe0:	6e 0e       	add	r6, r30
    6fe2:	7f 1e       	adc	r7, r31
    n += p.write('{');

    // NB: the code has been optimized for a small size on a 8-bit AVR

    const KeyValuePair* current = _items;
    for (int i = _count; i > 0; i--)
    6fe4:	08 94       	sec
    6fe6:	81 08       	sbc	r8, r1
    6fe8:	91 08       	sbc	r9, r1
    6fea:	18 14       	cp	r1, r8
    6fec:	19 04       	cpc	r1, r9
    6fee:	4c f2       	brlt	.-110    	; 0x6f82 <ArduinoJson::Generator::JsonObjectBase::printTo(Print&) const+0x46>
        {
            n += p.write(',');
        }
    }

    n += p.write('}');
    6ff0:	e8 81       	ld	r30, Y
    6ff2:	f9 81       	ldd	r31, Y+1	; 0x01
    6ff4:	01 90       	ld	r0, Z+
    6ff6:	f0 81       	ld	r31, Z
    6ff8:	e0 2d       	mov	r30, r0
    6ffa:	ce 01       	movw	r24, r28
    6ffc:	6d e7       	ldi	r22, 0x7D	; 125
    6ffe:	09 95       	icall
    7000:	95 01       	movw	r18, r10
    7002:	28 0f       	add	r18, r24
    7004:	39 1f       	adc	r19, r25

    return n;
}
    7006:	c9 01       	movw	r24, r18
    7008:	df 91       	pop	r29
    700a:	cf 91       	pop	r28
    700c:	1f 91       	pop	r17
    700e:	0f 91       	pop	r16
    7010:	ff 90       	pop	r15
    7012:	ef 90       	pop	r14
    7014:	df 90       	pop	r13
    7016:	cf 90       	pop	r12
    7018:	bf 90       	pop	r11
    701a:	af 90       	pop	r10
    701c:	9f 90       	pop	r9
    701e:	8f 90       	pop	r8
    7020:	7f 90       	pop	r7
    7022:	6f 90       	pop	r6
    7024:	08 95       	ret

00007026 <ArduinoJson::Generator::JsonValue::printLongTo(ArduinoJson::Generator::JsonValue::Content const&, Print&)>:
size_t JsonValue::printBoolTo(const Content& c, Print& p)
{
    return p.print(c.asBool ? "true" : "false");
}

size_t JsonValue::printLongTo(const Content& c, Print& p)
    7026:	fc 01       	movw	r30, r24
    7028:	cb 01       	movw	r24, r22
{
    return p.print(c.asLong);
    702a:	40 81       	ld	r20, Z
    702c:	51 81       	ldd	r21, Z+1	; 0x01
    702e:	62 81       	ldd	r22, Z+2	; 0x02
    7030:	73 81       	ldd	r23, Z+3	; 0x03
    7032:	2a e0       	ldi	r18, 0x0A	; 10
    7034:	30 e0       	ldi	r19, 0x00	; 0
    7036:	0e 94 d4 3c 	call	0x79a8	; 0x79a8 <Print::print(long, int)>
}
    703a:	08 95       	ret

0000703c <ArduinoJson::Generator::JsonObjectBase::getMatchingPair(char const*) const>:

JsonObjectBase::KeyValuePair* JsonObjectBase::getMatchingPair(JsonKey key) const
    703c:	ef 92       	push	r14
    703e:	ff 92       	push	r15
    7040:	0f 93       	push	r16
    7042:	1f 93       	push	r17
    7044:	cf 93       	push	r28
    7046:	df 93       	push	r29
    7048:	fc 01       	movw	r30, r24
    704a:	7b 01       	movw	r14, r22
{
    KeyValuePair* p = _items;
    704c:	c2 81       	ldd	r28, Z+2	; 0x02
    704e:	d3 81       	ldd	r29, Z+3	; 0x03

    for (int i = _count; i > 0; --i)
    7050:	06 81       	ldd	r16, Z+6	; 0x06
    7052:	17 81       	ldd	r17, Z+7	; 0x07
    7054:	0a c0       	rjmp	.+20     	; 0x706a <ArduinoJson::Generator::JsonObjectBase::getMatchingPair(char const*) const+0x2e>
    {
        if (!strcmp(p->key, key))
    7056:	88 81       	ld	r24, Y
    7058:	99 81       	ldd	r25, Y+1	; 0x01
    705a:	b7 01       	movw	r22, r14
    705c:	0e 94 a7 03 	call	0x74e	; 0x74e <strcmp>
    7060:	00 97       	sbiw	r24, 0x00	; 0
    7062:	41 f0       	breq	.+16     	; 0x7074 <ArduinoJson::Generator::JsonObjectBase::getMatchingPair(char const*) const+0x38>
            return p;

        p++;
    7064:	28 96       	adiw	r28, 0x08	; 8

JsonObjectBase::KeyValuePair* JsonObjectBase::getMatchingPair(JsonKey key) const
{
    KeyValuePair* p = _items;

    for (int i = _count; i > 0; --i)
    7066:	01 50       	subi	r16, 0x01	; 1
    7068:	10 40       	sbci	r17, 0x00	; 0
    706a:	10 16       	cp	r1, r16
    706c:	11 06       	cpc	r1, r17
    706e:	9c f3       	brlt	.-26     	; 0x7056 <ArduinoJson::Generator::JsonObjectBase::getMatchingPair(char const*) const+0x1a>
    7070:	c0 e0       	ldi	r28, 0x00	; 0
    7072:	d0 e0       	ldi	r29, 0x00	; 0

        p++;
    }

    return 0;
}
    7074:	ce 01       	movw	r24, r28
    7076:	df 91       	pop	r29
    7078:	cf 91       	pop	r28
    707a:	1f 91       	pop	r17
    707c:	0f 91       	pop	r16
    707e:	ff 90       	pop	r15
    7080:	ef 90       	pop	r14
    7082:	08 95       	ret

00007084 <ArduinoJson::Generator::JsonObjectBase::operator[](char const*)>:

JsonValue& JsonObjectBase::operator[](JsonKey key)
    7084:	0f 93       	push	r16
    7086:	1f 93       	push	r17
    7088:	cf 93       	push	r28
    708a:	df 93       	push	r29
    708c:	ec 01       	movw	r28, r24
    708e:	8b 01       	movw	r16, r22
{
    KeyValuePair* match = getMatchingPair(key);
    7090:	0e 94 1e 38 	call	0x703c	; 0x703c <ArduinoJson::Generator::JsonObjectBase::getMatchingPair(char const*) const>

    if (match)
    7094:	00 97       	sbiw	r24, 0x00	; 0
    7096:	19 f0       	breq	.+6      	; 0x709e <ArduinoJson::Generator::JsonObjectBase::operator[](char const*)+0x1a>
        return match->value;
    7098:	fc 01       	movw	r30, r24
    709a:	32 96       	adiw	r30, 0x02	; 2
    709c:	26 c0       	rjmp	.+76     	; 0x70ea <ArduinoJson::Generator::JsonObjectBase::operator[](char const*)+0x66>

    JsonValue* value;

    if (_count < _capacity)
    709e:	2e 81       	ldd	r18, Y+6	; 0x06
    70a0:	3f 81       	ldd	r19, Y+7	; 0x07
    70a2:	8c 81       	ldd	r24, Y+4	; 0x04
    70a4:	9d 81       	ldd	r25, Y+5	; 0x05
    70a6:	28 17       	cp	r18, r24
    70a8:	39 07       	cpc	r19, r25
    70aa:	1c f0       	brlt	.+6      	; 0x70b2 <ArduinoJson::Generator::JsonObjectBase::operator[](char const*)+0x2e>
    70ac:	e8 e3       	ldi	r30, 0x38	; 56
    70ae:	f4 e0       	ldi	r31, 0x04	; 4
    70b0:	10 c0       	rjmp	.+32     	; 0x70d2 <ArduinoJson::Generator::JsonObjectBase::operator[](char const*)+0x4e>
    {
        _items[_count].key = key;
    70b2:	c9 01       	movw	r24, r18
    70b4:	53 e0       	ldi	r21, 0x03	; 3
    70b6:	88 0f       	add	r24, r24
    70b8:	99 1f       	adc	r25, r25
    70ba:	5a 95       	dec	r21
    70bc:	e1 f7       	brne	.-8      	; 0x70b6 <ArduinoJson::Generator::JsonObjectBase::operator[](char const*)+0x32>
    70be:	ea 81       	ldd	r30, Y+2	; 0x02
    70c0:	fb 81       	ldd	r31, Y+3	; 0x03
    70c2:	e8 0f       	add	r30, r24
    70c4:	f9 1f       	adc	r31, r25
    70c6:	01 93       	st	Z+, r16
    70c8:	11 93       	st	Z+, r17
        value = &_items[_count].value;
        _count++;
    70ca:	2f 5f       	subi	r18, 0xFF	; 255
    70cc:	3f 4f       	sbci	r19, 0xFF	; 255
    70ce:	3f 83       	std	Y+7, r19	; 0x07
    70d0:	2e 83       	std	Y+6, r18	; 0x06
            }

            void reset()
            {
                _content.asDouble = 0;
    70d2:	80 e0       	ldi	r24, 0x00	; 0
    70d4:	90 e0       	ldi	r25, 0x00	; 0
    70d6:	a0 e0       	ldi	r26, 0x00	; 0
    70d8:	b0 e0       	ldi	r27, 0x00	; 0
    70da:	80 83       	st	Z, r24
    70dc:	91 83       	std	Z+1, r25	; 0x01
    70de:	a2 83       	std	Z+2, r26	; 0x02
    70e0:	b3 83       	std	Z+3, r27	; 0x03
                _printToImpl = printStringTo;
    70e2:	88 e9       	ldi	r24, 0x98	; 152
    70e4:	97 e3       	ldi	r25, 0x37	; 55
    70e6:	95 83       	std	Z+5, r25	; 0x05
    70e8:	84 83       	std	Z+4, r24	; 0x04
        value = &_nullValue;
    }

    value->reset();
    return *value;
}
    70ea:	cf 01       	movw	r24, r30
    70ec:	df 91       	pop	r29
    70ee:	cf 91       	pop	r28
    70f0:	1f 91       	pop	r17
    70f2:	0f 91       	pop	r16
    70f4:	08 95       	ret

000070f6 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    70f6:	cf 93       	push	r28
    70f8:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    70fa:	48 2f       	mov	r20, r24
    70fc:	50 e0       	ldi	r21, 0x00	; 0
    70fe:	ca 01       	movw	r24, r20
    7100:	83 5a       	subi	r24, 0xA3	; 163
    7102:	99 4f       	sbci	r25, 0xF9	; 249
    7104:	fc 01       	movw	r30, r24
    7106:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
    7108:	47 5b       	subi	r20, 0xB7	; 183
    710a:	59 4f       	sbci	r21, 0xF9	; 249
    710c:	fa 01       	movw	r30, r20
    710e:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    7110:	88 23       	and	r24, r24
    7112:	69 f1       	breq	.+90     	; 0x716e <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    7114:	90 e0       	ldi	r25, 0x00	; 0
    7116:	88 0f       	add	r24, r24
    7118:	99 1f       	adc	r25, r25
    711a:	fc 01       	movw	r30, r24
    711c:	e5 5d       	subi	r30, 0xD5	; 213
    711e:	f9 4f       	sbci	r31, 0xF9	; 249
    7120:	a5 91       	lpm	r26, Z+
    7122:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
    7124:	fc 01       	movw	r30, r24
    7126:	eb 5c       	subi	r30, 0xCB	; 203
    7128:	f9 4f       	sbci	r31, 0xF9	; 249
    712a:	c5 91       	lpm	r28, Z+
    712c:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
    712e:	66 23       	and	r22, r22
    7130:	51 f4       	brne	.+20     	; 0x7146 <pinMode+0x50>
		uint8_t oldSREG = SREG;
    7132:	2f b7       	in	r18, 0x3f	; 63
                cli();
    7134:	f8 94       	cli
		*reg &= ~bit;
    7136:	8c 91       	ld	r24, X
    7138:	93 2f       	mov	r25, r19
    713a:	90 95       	com	r25
    713c:	89 23       	and	r24, r25
    713e:	8c 93       	st	X, r24
		*out &= ~bit;
    7140:	88 81       	ld	r24, Y
    7142:	89 23       	and	r24, r25
    7144:	0b c0       	rjmp	.+22     	; 0x715c <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    7146:	62 30       	cpi	r22, 0x02	; 2
    7148:	61 f4       	brne	.+24     	; 0x7162 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    714a:	2f b7       	in	r18, 0x3f	; 63
                cli();
    714c:	f8 94       	cli
		*reg &= ~bit;
    714e:	8c 91       	ld	r24, X
    7150:	93 2f       	mov	r25, r19
    7152:	90 95       	com	r25
    7154:	89 23       	and	r24, r25
    7156:	8c 93       	st	X, r24
		*out |= bit;
    7158:	88 81       	ld	r24, Y
    715a:	83 2b       	or	r24, r19
    715c:	88 83       	st	Y, r24
		SREG = oldSREG;
    715e:	2f bf       	out	0x3f, r18	; 63
    7160:	06 c0       	rjmp	.+12     	; 0x716e <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    7162:	9f b7       	in	r25, 0x3f	; 63
                cli();
    7164:	f8 94       	cli
		*reg |= bit;
    7166:	8c 91       	ld	r24, X
    7168:	83 2b       	or	r24, r19
    716a:	8c 93       	st	X, r24
		SREG = oldSREG;
    716c:	9f bf       	out	0x3f, r25	; 63
	}
}
    716e:	df 91       	pop	r29
    7170:	cf 91       	pop	r28
    7172:	08 95       	ret

00007174 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    7174:	48 2f       	mov	r20, r24
    7176:	50 e0       	ldi	r21, 0x00	; 0
    7178:	ca 01       	movw	r24, r20
    717a:	8f 58       	subi	r24, 0x8F	; 143
    717c:	99 4f       	sbci	r25, 0xF9	; 249
    717e:	fc 01       	movw	r30, r24
    7180:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    7182:	ca 01       	movw	r24, r20
    7184:	83 5a       	subi	r24, 0xA3	; 163
    7186:	99 4f       	sbci	r25, 0xF9	; 249
    7188:	fc 01       	movw	r30, r24
    718a:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    718c:	47 5b       	subi	r20, 0xB7	; 183
    718e:	59 4f       	sbci	r21, 0xF9	; 249
    7190:	fa 01       	movw	r30, r20
    7192:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    7194:	33 23       	and	r19, r19
    7196:	09 f4       	brne	.+2      	; 0x719a <digitalWrite+0x26>
    7198:	40 c0       	rjmp	.+128    	; 0x721a <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    719a:	22 23       	and	r18, r18
    719c:	51 f1       	breq	.+84     	; 0x71f2 <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    719e:	23 30       	cpi	r18, 0x03	; 3
    71a0:	71 f0       	breq	.+28     	; 0x71be <digitalWrite+0x4a>
    71a2:	24 30       	cpi	r18, 0x04	; 4
    71a4:	28 f4       	brcc	.+10     	; 0x71b0 <digitalWrite+0x3c>
    71a6:	21 30       	cpi	r18, 0x01	; 1
    71a8:	a1 f0       	breq	.+40     	; 0x71d2 <digitalWrite+0x5e>
    71aa:	22 30       	cpi	r18, 0x02	; 2
    71ac:	11 f5       	brne	.+68     	; 0x71f2 <digitalWrite+0x7e>
    71ae:	14 c0       	rjmp	.+40     	; 0x71d8 <digitalWrite+0x64>
    71b0:	26 30       	cpi	r18, 0x06	; 6
    71b2:	b1 f0       	breq	.+44     	; 0x71e0 <digitalWrite+0x6c>
    71b4:	27 30       	cpi	r18, 0x07	; 7
    71b6:	c1 f0       	breq	.+48     	; 0x71e8 <digitalWrite+0x74>
    71b8:	24 30       	cpi	r18, 0x04	; 4
    71ba:	d9 f4       	brne	.+54     	; 0x71f2 <digitalWrite+0x7e>
    71bc:	04 c0       	rjmp	.+8      	; 0x71c6 <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    71be:	80 91 80 00 	lds	r24, 0x0080
    71c2:	8f 77       	andi	r24, 0x7F	; 127
    71c4:	03 c0       	rjmp	.+6      	; 0x71cc <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    71c6:	80 91 80 00 	lds	r24, 0x0080
    71ca:	8f 7d       	andi	r24, 0xDF	; 223
    71cc:	80 93 80 00 	sts	0x0080, r24
    71d0:	10 c0       	rjmp	.+32     	; 0x71f2 <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    71d2:	84 b5       	in	r24, 0x24	; 36
    71d4:	8f 77       	andi	r24, 0x7F	; 127
    71d6:	02 c0       	rjmp	.+4      	; 0x71dc <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    71d8:	84 b5       	in	r24, 0x24	; 36
    71da:	8f 7d       	andi	r24, 0xDF	; 223
    71dc:	84 bd       	out	0x24, r24	; 36
    71de:	09 c0       	rjmp	.+18     	; 0x71f2 <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    71e0:	80 91 b0 00 	lds	r24, 0x00B0
    71e4:	8f 77       	andi	r24, 0x7F	; 127
    71e6:	03 c0       	rjmp	.+6      	; 0x71ee <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    71e8:	80 91 b0 00 	lds	r24, 0x00B0
    71ec:	8f 7d       	andi	r24, 0xDF	; 223
    71ee:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    71f2:	e3 2f       	mov	r30, r19
    71f4:	f0 e0       	ldi	r31, 0x00	; 0
    71f6:	ee 0f       	add	r30, r30
    71f8:	ff 1f       	adc	r31, r31
    71fa:	eb 5c       	subi	r30, 0xCB	; 203
    71fc:	f9 4f       	sbci	r31, 0xF9	; 249
    71fe:	a5 91       	lpm	r26, Z+
    7200:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    7202:	2f b7       	in	r18, 0x3f	; 63
	cli();
    7204:	f8 94       	cli

	if (val == LOW) {
    7206:	66 23       	and	r22, r22
    7208:	21 f4       	brne	.+8      	; 0x7212 <digitalWrite+0x9e>
		*out &= ~bit;
    720a:	8c 91       	ld	r24, X
    720c:	90 95       	com	r25
    720e:	89 23       	and	r24, r25
    7210:	02 c0       	rjmp	.+4      	; 0x7216 <digitalWrite+0xa2>
	} else {
		*out |= bit;
    7212:	8c 91       	ld	r24, X
    7214:	89 2b       	or	r24, r25
    7216:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    7218:	2f bf       	out	0x3f, r18	; 63
    721a:	08 95       	ret

0000721c <serialEvent()>:
#if !defined(USART_RX_vect) && !defined(USART0_RX_vect) && \
    !defined(USART_RXC_vect)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    721c:	08 95       	ret

0000721e <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  ISR(USART_RX_vect)
    721e:	1f 92       	push	r1
    7220:	0f 92       	push	r0
    7222:	0f b6       	in	r0, 0x3f	; 63
    7224:	0f 92       	push	r0
    7226:	11 24       	eor	r1, r1
    7228:	2f 93       	push	r18
    722a:	3f 93       	push	r19
    722c:	4f 93       	push	r20
    722e:	8f 93       	push	r24
    7230:	9f 93       	push	r25
    7232:	ef 93       	push	r30
    7234:	ff 93       	push	r31
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#endif
  {
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
    7236:	80 91 c0 00 	lds	r24, 0x00C0
    723a:	82 fd       	sbrc	r24, 2
    723c:	1d c0       	rjmp	.+58     	; 0x7278 <__vector_18+0x5a>
      unsigned char c = UDR0;
    723e:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    7242:	20 91 7e 04 	lds	r18, 0x047E
    7246:	30 91 7f 04 	lds	r19, 0x047F

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    724a:	2f 5f       	subi	r18, 0xFF	; 255
    724c:	3f 4f       	sbci	r19, 0xFF	; 255
    724e:	2f 73       	andi	r18, 0x3F	; 63
    7250:	30 70       	andi	r19, 0x00	; 0
    7252:	80 91 80 04 	lds	r24, 0x0480
    7256:	90 91 81 04 	lds	r25, 0x0481
    725a:	28 17       	cp	r18, r24
    725c:	39 07       	cpc	r19, r25
    725e:	71 f0       	breq	.+28     	; 0x727c <__vector_18+0x5e>
    buffer->buffer[buffer->head] = c;
    7260:	e0 91 7e 04 	lds	r30, 0x047E
    7264:	f0 91 7f 04 	lds	r31, 0x047F
    7268:	e2 5c       	subi	r30, 0xC2	; 194
    726a:	fb 4f       	sbci	r31, 0xFB	; 251
    726c:	40 83       	st	Z, r20
    buffer->head = i;
    726e:	30 93 7f 04 	sts	0x047F, r19
    7272:	20 93 7e 04 	sts	0x047E, r18
    7276:	02 c0       	rjmp	.+4      	; 0x727c <__vector_18+0x5e>
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
      unsigned char c = UDR0;
      store_char(c, &rx_buffer);
    } else {
      unsigned char c = UDR0;
    7278:	80 91 c6 00 	lds	r24, 0x00C6
      unsigned char c = UDR;
    };
  #else
    #error UDR not defined
  #endif
  }
    727c:	ff 91       	pop	r31
    727e:	ef 91       	pop	r30
    7280:	9f 91       	pop	r25
    7282:	8f 91       	pop	r24
    7284:	4f 91       	pop	r20
    7286:	3f 91       	pop	r19
    7288:	2f 91       	pop	r18
    728a:	0f 90       	pop	r0
    728c:	0f be       	out	0x3f, r0	; 63
    728e:	0f 90       	pop	r0
    7290:	1f 90       	pop	r1
    7292:	18 95       	reti

00007294 <serialEventRun()>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    7294:	e0 91 d2 04 	lds	r30, 0x04D2
    7298:	f0 91 d3 04 	lds	r31, 0x04D3
    729c:	e0 5c       	subi	r30, 0xC0	; 192
    729e:	ff 4f       	sbci	r31, 0xFF	; 255
    72a0:	81 91       	ld	r24, Z+
    72a2:	91 91       	ld	r25, Z+
    72a4:	20 81       	ld	r18, Z
    72a6:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    72a8:	82 1b       	sub	r24, r18
    72aa:	93 0b       	sbc	r25, r19
    72ac:	8f 73       	andi	r24, 0x3F	; 63
    72ae:	90 70       	andi	r25, 0x00	; 0
    72b0:	89 2b       	or	r24, r25
    72b2:	11 f0       	breq	.+4      	; 0x72b8 <serialEventRun()+0x24>
    72b4:	0e 94 0e 39 	call	0x721c	; 0x721c <serialEvent()>
    72b8:	08 95       	ret

000072ba <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
    72ba:	1f 92       	push	r1
    72bc:	0f 92       	push	r0
    72be:	0f b6       	in	r0, 0x3f	; 63
    72c0:	0f 92       	push	r0
    72c2:	11 24       	eor	r1, r1
    72c4:	2f 93       	push	r18
    72c6:	3f 93       	push	r19
    72c8:	8f 93       	push	r24
    72ca:	9f 93       	push	r25
    72cc:	ef 93       	push	r30
    72ce:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    72d0:	20 91 c2 04 	lds	r18, 0x04C2
    72d4:	30 91 c3 04 	lds	r19, 0x04C3
    72d8:	80 91 c4 04 	lds	r24, 0x04C4
    72dc:	90 91 c5 04 	lds	r25, 0x04C5
    72e0:	28 17       	cp	r18, r24
    72e2:	39 07       	cpc	r19, r25
    72e4:	31 f4       	brne	.+12     	; 0x72f2 <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    72e6:	80 91 c1 00 	lds	r24, 0x00C1
    72ea:	8f 7d       	andi	r24, 0xDF	; 223
    72ec:	80 93 c1 00 	sts	0x00C1, r24
    72f0:	14 c0       	rjmp	.+40     	; 0x731a <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    72f2:	e0 91 c4 04 	lds	r30, 0x04C4
    72f6:	f0 91 c5 04 	lds	r31, 0x04C5
    72fa:	ee 57       	subi	r30, 0x7E	; 126
    72fc:	fb 4f       	sbci	r31, 0xFB	; 251
    72fe:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    7300:	80 91 c4 04 	lds	r24, 0x04C4
    7304:	90 91 c5 04 	lds	r25, 0x04C5
    7308:	01 96       	adiw	r24, 0x01	; 1
    730a:	8f 73       	andi	r24, 0x3F	; 63
    730c:	90 70       	andi	r25, 0x00	; 0
    730e:	90 93 c5 04 	sts	0x04C5, r25
    7312:	80 93 c4 04 	sts	0x04C4, r24
	
  #if defined(UDR0)
    UDR0 = c;
    7316:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    731a:	ff 91       	pop	r31
    731c:	ef 91       	pop	r30
    731e:	9f 91       	pop	r25
    7320:	8f 91       	pop	r24
    7322:	3f 91       	pop	r19
    7324:	2f 91       	pop	r18
    7326:	0f 90       	pop	r0
    7328:	0f be       	out	0x3f, r0	; 63
    732a:	0f 90       	pop	r0
    732c:	1f 90       	pop	r1
    732e:	18 95       	reti

00007330 <HardwareSerial::begin(unsigned long)>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    7330:	af 92       	push	r10
    7332:	bf 92       	push	r11
    7334:	df 92       	push	r13
    7336:	ef 92       	push	r14
    7338:	ff 92       	push	r15
    733a:	0f 93       	push	r16
    733c:	1f 93       	push	r17
    733e:	cf 93       	push	r28
    7340:	df 93       	push	r29
    7342:	ec 01       	movw	r28, r24
    7344:	7a 01       	movw	r14, r20
    7346:	8b 01       	movw	r16, r22
    7348:	dd 24       	eor	r13, r13
    734a:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    734c:	91 e0       	ldi	r25, 0x01	; 1
    734e:	a9 2e       	mov	r10, r25
    7350:	b1 2c       	mov	r11, r1
    7352:	ec 89       	ldd	r30, Y+20	; 0x14
    7354:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
    7356:	dd 20       	and	r13, r13
    7358:	69 f0       	breq	.+26     	; 0x7374 <HardwareSerial::begin(unsigned long)+0x44>
    *_ucsra = 1 << _u2x;
    735a:	c5 01       	movw	r24, r10
    735c:	08 a0       	ldd	r0, Y+32	; 0x20
    735e:	02 c0       	rjmp	.+4      	; 0x7364 <HardwareSerial::begin(unsigned long)+0x34>
    7360:	88 0f       	add	r24, r24
    7362:	99 1f       	adc	r25, r25
    7364:	0a 94       	dec	r0
    7366:	e2 f7       	brpl	.-8      	; 0x7360 <HardwareSerial::begin(unsigned long)+0x30>
    7368:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    736a:	60 e9       	ldi	r22, 0x90	; 144
    736c:	70 ed       	ldi	r23, 0xD0	; 208
    736e:	83 e0       	ldi	r24, 0x03	; 3
    7370:	90 e0       	ldi	r25, 0x00	; 0
    7372:	05 c0       	rjmp	.+10     	; 0x737e <HardwareSerial::begin(unsigned long)+0x4e>
  } else {
    *_ucsra = 0;
    7374:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    7376:	68 e4       	ldi	r22, 0x48	; 72
    7378:	78 ee       	ldi	r23, 0xE8	; 232
    737a:	81 e0       	ldi	r24, 0x01	; 1
    737c:	90 e0       	ldi	r25, 0x00	; 0
    737e:	a8 01       	movw	r20, r16
    7380:	97 01       	movw	r18, r14
    7382:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <__udivmodsi4>
    7386:	21 50       	subi	r18, 0x01	; 1
    7388:	30 40       	sbci	r19, 0x00	; 0
    738a:	40 40       	sbci	r20, 0x00	; 0
    738c:	50 40       	sbci	r21, 0x00	; 0
    738e:	56 95       	lsr	r21
    7390:	47 95       	ror	r20
    7392:	37 95       	ror	r19
    7394:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    7396:	80 e1       	ldi	r24, 0x10	; 16
    7398:	20 30       	cpi	r18, 0x00	; 0
    739a:	38 07       	cpc	r19, r24
    739c:	20 f0       	brcs	.+8      	; 0x73a6 <HardwareSerial::begin(unsigned long)+0x76>
    739e:	dd 20       	and	r13, r13
    73a0:	11 f0       	breq	.+4      	; 0x73a6 <HardwareSerial::begin(unsigned long)+0x76>
    73a2:	dd 24       	eor	r13, r13
    73a4:	d6 cf       	rjmp	.-84     	; 0x7352 <HardwareSerial::begin(unsigned long)+0x22>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    73a6:	e8 89       	ldd	r30, Y+16	; 0x10
    73a8:	f9 89       	ldd	r31, Y+17	; 0x11
    73aa:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    73ac:	ea 89       	ldd	r30, Y+18	; 0x12
    73ae:	fb 89       	ldd	r31, Y+19	; 0x13
    73b0:	20 83       	st	Z, r18

  transmitting = false;
    73b2:	19 a2       	std	Y+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
    73b4:	ee 89       	ldd	r30, Y+22	; 0x16
    73b6:	ff 89       	ldd	r31, Y+23	; 0x17
    73b8:	40 81       	ld	r20, Z
    73ba:	21 e0       	ldi	r18, 0x01	; 1
    73bc:	30 e0       	ldi	r19, 0x00	; 0
    73be:	c9 01       	movw	r24, r18
    73c0:	0c 8c       	ldd	r0, Y+28	; 0x1c
    73c2:	02 c0       	rjmp	.+4      	; 0x73c8 <HardwareSerial::begin(unsigned long)+0x98>
    73c4:	88 0f       	add	r24, r24
    73c6:	99 1f       	adc	r25, r25
    73c8:	0a 94       	dec	r0
    73ca:	e2 f7       	brpl	.-8      	; 0x73c4 <HardwareSerial::begin(unsigned long)+0x94>
    73cc:	48 2b       	or	r20, r24
    73ce:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    73d0:	ee 89       	ldd	r30, Y+22	; 0x16
    73d2:	ff 89       	ldd	r31, Y+23	; 0x17
    73d4:	40 81       	ld	r20, Z
    73d6:	c9 01       	movw	r24, r18
    73d8:	0d 8c       	ldd	r0, Y+29	; 0x1d
    73da:	02 c0       	rjmp	.+4      	; 0x73e0 <HardwareSerial::begin(unsigned long)+0xb0>
    73dc:	88 0f       	add	r24, r24
    73de:	99 1f       	adc	r25, r25
    73e0:	0a 94       	dec	r0
    73e2:	e2 f7       	brpl	.-8      	; 0x73dc <HardwareSerial::begin(unsigned long)+0xac>
    73e4:	48 2b       	or	r20, r24
    73e6:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    73e8:	ee 89       	ldd	r30, Y+22	; 0x16
    73ea:	ff 89       	ldd	r31, Y+23	; 0x17
    73ec:	40 81       	ld	r20, Z
    73ee:	c9 01       	movw	r24, r18
    73f0:	0e 8c       	ldd	r0, Y+30	; 0x1e
    73f2:	02 c0       	rjmp	.+4      	; 0x73f8 <HardwareSerial::begin(unsigned long)+0xc8>
    73f4:	88 0f       	add	r24, r24
    73f6:	99 1f       	adc	r25, r25
    73f8:	0a 94       	dec	r0
    73fa:	e2 f7       	brpl	.-8      	; 0x73f4 <HardwareSerial::begin(unsigned long)+0xc4>
    73fc:	48 2b       	or	r20, r24
    73fe:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    7400:	ee 89       	ldd	r30, Y+22	; 0x16
    7402:	ff 89       	ldd	r31, Y+23	; 0x17
    7404:	80 81       	ld	r24, Z
    7406:	0f 8c       	ldd	r0, Y+31	; 0x1f
    7408:	02 c0       	rjmp	.+4      	; 0x740e <HardwareSerial::begin(unsigned long)+0xde>
    740a:	22 0f       	add	r18, r18
    740c:	33 1f       	adc	r19, r19
    740e:	0a 94       	dec	r0
    7410:	e2 f7       	brpl	.-8      	; 0x740a <HardwareSerial::begin(unsigned long)+0xda>
    7412:	20 95       	com	r18
    7414:	28 23       	and	r18, r24
    7416:	20 83       	st	Z, r18
}
    7418:	df 91       	pop	r29
    741a:	cf 91       	pop	r28
    741c:	1f 91       	pop	r17
    741e:	0f 91       	pop	r16
    7420:	ff 90       	pop	r15
    7422:	ef 90       	pop	r14
    7424:	df 90       	pop	r13
    7426:	bf 90       	pop	r11
    7428:	af 90       	pop	r10
    742a:	08 95       	ret

0000742c <HardwareSerial::end()>:
  sbi(*_ucsrb, _txen);
  sbi(*_ucsrb, _rxcie);
  cbi(*_ucsrb, _udrie);
}

void HardwareSerial::end()
    742c:	cf 93       	push	r28
    742e:	df 93       	push	r29
    7430:	dc 01       	movw	r26, r24
{
  // wait for transmission of outgoing data
  while (_tx_buffer->head != _tx_buffer->tail)
    7432:	1e 96       	adiw	r26, 0x0e	; 14
    7434:	8d 91       	ld	r24, X+
    7436:	9c 91       	ld	r25, X
    7438:	1f 97       	sbiw	r26, 0x0f	; 15
    743a:	ec 01       	movw	r28, r24
    743c:	c0 5c       	subi	r28, 0xC0	; 192
    743e:	df 4f       	sbci	r29, 0xFF	; 255
    7440:	fc 01       	movw	r30, r24
    7442:	ee 5b       	subi	r30, 0xBE	; 190
    7444:	ff 4f       	sbci	r31, 0xFF	; 255
    7446:	28 81       	ld	r18, Y
    7448:	39 81       	ldd	r19, Y+1	; 0x01
    744a:	80 81       	ld	r24, Z
    744c:	91 81       	ldd	r25, Z+1	; 0x01
    744e:	28 17       	cp	r18, r24
    7450:	39 07       	cpc	r19, r25
    7452:	c9 f7       	brne	.-14     	; 0x7446 <HardwareSerial::end()+0x1a>
    ;

  cbi(*_ucsrb, _rxen);
    7454:	56 96       	adiw	r26, 0x16	; 22
    7456:	ed 91       	ld	r30, X+
    7458:	fc 91       	ld	r31, X
    745a:	57 97       	sbiw	r26, 0x17	; 23
    745c:	40 81       	ld	r20, Z
    745e:	21 e0       	ldi	r18, 0x01	; 1
    7460:	30 e0       	ldi	r19, 0x00	; 0
    7462:	c9 01       	movw	r24, r18
    7464:	5c 96       	adiw	r26, 0x1c	; 28
    7466:	0c 90       	ld	r0, X
    7468:	5c 97       	sbiw	r26, 0x1c	; 28
    746a:	02 c0       	rjmp	.+4      	; 0x7470 <HardwareSerial::end()+0x44>
    746c:	88 0f       	add	r24, r24
    746e:	99 1f       	adc	r25, r25
    7470:	0a 94       	dec	r0
    7472:	e2 f7       	brpl	.-8      	; 0x746c <HardwareSerial::end()+0x40>
    7474:	80 95       	com	r24
    7476:	84 23       	and	r24, r20
    7478:	80 83       	st	Z, r24
  cbi(*_ucsrb, _txen);
    747a:	56 96       	adiw	r26, 0x16	; 22
    747c:	ed 91       	ld	r30, X+
    747e:	fc 91       	ld	r31, X
    7480:	57 97       	sbiw	r26, 0x17	; 23
    7482:	40 81       	ld	r20, Z
    7484:	c9 01       	movw	r24, r18
    7486:	5d 96       	adiw	r26, 0x1d	; 29
    7488:	0c 90       	ld	r0, X
    748a:	5d 97       	sbiw	r26, 0x1d	; 29
    748c:	02 c0       	rjmp	.+4      	; 0x7492 <HardwareSerial::end()+0x66>
    748e:	88 0f       	add	r24, r24
    7490:	99 1f       	adc	r25, r25
    7492:	0a 94       	dec	r0
    7494:	e2 f7       	brpl	.-8      	; 0x748e <HardwareSerial::end()+0x62>
    7496:	80 95       	com	r24
    7498:	84 23       	and	r24, r20
    749a:	80 83       	st	Z, r24
  cbi(*_ucsrb, _rxcie);  
    749c:	56 96       	adiw	r26, 0x16	; 22
    749e:	ed 91       	ld	r30, X+
    74a0:	fc 91       	ld	r31, X
    74a2:	57 97       	sbiw	r26, 0x17	; 23
    74a4:	40 81       	ld	r20, Z
    74a6:	c9 01       	movw	r24, r18
    74a8:	5e 96       	adiw	r26, 0x1e	; 30
    74aa:	0c 90       	ld	r0, X
    74ac:	5e 97       	sbiw	r26, 0x1e	; 30
    74ae:	02 c0       	rjmp	.+4      	; 0x74b4 <HardwareSerial::end()+0x88>
    74b0:	88 0f       	add	r24, r24
    74b2:	99 1f       	adc	r25, r25
    74b4:	0a 94       	dec	r0
    74b6:	e2 f7       	brpl	.-8      	; 0x74b0 <HardwareSerial::end()+0x84>
    74b8:	80 95       	com	r24
    74ba:	84 23       	and	r24, r20
    74bc:	80 83       	st	Z, r24
  cbi(*_ucsrb, _udrie);
    74be:	56 96       	adiw	r26, 0x16	; 22
    74c0:	ed 91       	ld	r30, X+
    74c2:	fc 91       	ld	r31, X
    74c4:	57 97       	sbiw	r26, 0x17	; 23
    74c6:	80 81       	ld	r24, Z
    74c8:	5f 96       	adiw	r26, 0x1f	; 31
    74ca:	0c 90       	ld	r0, X
    74cc:	5f 97       	sbiw	r26, 0x1f	; 31
    74ce:	02 c0       	rjmp	.+4      	; 0x74d4 <HardwareSerial::end()+0xa8>
    74d0:	22 0f       	add	r18, r18
    74d2:	33 1f       	adc	r19, r19
    74d4:	0a 94       	dec	r0
    74d6:	e2 f7       	brpl	.-8      	; 0x74d0 <HardwareSerial::end()+0xa4>
    74d8:	20 95       	com	r18
    74da:	28 23       	and	r18, r24
    74dc:	20 83       	st	Z, r18
  
  // clear any received data
  _rx_buffer->head = _rx_buffer->tail;
    74de:	1c 96       	adiw	r26, 0x0c	; 12
    74e0:	ed 91       	ld	r30, X+
    74e2:	fc 91       	ld	r31, X
    74e4:	1d 97       	sbiw	r26, 0x0d	; 13
    74e6:	ee 5b       	subi	r30, 0xBE	; 190
    74e8:	ff 4f       	sbci	r31, 0xFF	; 255
    74ea:	80 81       	ld	r24, Z
    74ec:	91 81       	ldd	r25, Z+1	; 0x01
    74ee:	92 93       	st	-Z, r25
    74f0:	82 93       	st	-Z, r24
}
    74f2:	df 91       	pop	r29
    74f4:	cf 91       	pop	r28
    74f6:	08 95       	ret

000074f8 <HardwareSerial::available()>:

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    74f8:	dc 01       	movw	r26, r24
    74fa:	1c 96       	adiw	r26, 0x0c	; 12
    74fc:	ed 91       	ld	r30, X+
    74fe:	fc 91       	ld	r31, X
    7500:	1d 97       	sbiw	r26, 0x0d	; 13
    7502:	e0 5c       	subi	r30, 0xC0	; 192
    7504:	ff 4f       	sbci	r31, 0xFF	; 255
    7506:	21 91       	ld	r18, Z+
    7508:	31 91       	ld	r19, Z+
    750a:	80 81       	ld	r24, Z
    750c:	91 81       	ldd	r25, Z+1	; 0x01
    750e:	28 1b       	sub	r18, r24
    7510:	39 0b       	sbc	r19, r25
    7512:	2f 73       	andi	r18, 0x3F	; 63
    7514:	30 70       	andi	r19, 0x00	; 0
}
    7516:	c9 01       	movw	r24, r18
    7518:	08 95       	ret

0000751a <HardwareSerial::peek()>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    751a:	dc 01       	movw	r26, r24
    751c:	1c 96       	adiw	r26, 0x0c	; 12
    751e:	ed 91       	ld	r30, X+
    7520:	fc 91       	ld	r31, X
    7522:	1d 97       	sbiw	r26, 0x0d	; 13
    7524:	e0 5c       	subi	r30, 0xC0	; 192
    7526:	ff 4f       	sbci	r31, 0xFF	; 255
    7528:	20 81       	ld	r18, Z
    752a:	31 81       	ldd	r19, Z+1	; 0x01
    752c:	e0 54       	subi	r30, 0x40	; 64
    752e:	f0 40       	sbci	r31, 0x00	; 0
    7530:	df 01       	movw	r26, r30
    7532:	ae 5b       	subi	r26, 0xBE	; 190
    7534:	bf 4f       	sbci	r27, 0xFF	; 255
    7536:	8d 91       	ld	r24, X+
    7538:	9c 91       	ld	r25, X
    753a:	11 97       	sbiw	r26, 0x01	; 1
    753c:	28 17       	cp	r18, r24
    753e:	39 07       	cpc	r19, r25
    7540:	19 f4       	brne	.+6      	; 0x7548 <HardwareSerial::peek()+0x2e>
    7542:	2f ef       	ldi	r18, 0xFF	; 255
    7544:	3f ef       	ldi	r19, 0xFF	; 255
    7546:	07 c0       	rjmp	.+14     	; 0x7556 <HardwareSerial::peek()+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    7548:	8d 91       	ld	r24, X+
    754a:	9c 91       	ld	r25, X
    754c:	e8 0f       	add	r30, r24
    754e:	f9 1f       	adc	r31, r25
    7550:	80 81       	ld	r24, Z
    7552:	28 2f       	mov	r18, r24
    7554:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    7556:	c9 01       	movw	r24, r18
    7558:	08 95       	ret

0000755a <HardwareSerial::read()>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    755a:	dc 01       	movw	r26, r24
    755c:	1c 96       	adiw	r26, 0x0c	; 12
    755e:	ed 91       	ld	r30, X+
    7560:	fc 91       	ld	r31, X
    7562:	1d 97       	sbiw	r26, 0x0d	; 13
    7564:	e0 5c       	subi	r30, 0xC0	; 192
    7566:	ff 4f       	sbci	r31, 0xFF	; 255
    7568:	20 81       	ld	r18, Z
    756a:	31 81       	ldd	r19, Z+1	; 0x01
    756c:	e0 54       	subi	r30, 0x40	; 64
    756e:	f0 40       	sbci	r31, 0x00	; 0
    7570:	df 01       	movw	r26, r30
    7572:	ae 5b       	subi	r26, 0xBE	; 190
    7574:	bf 4f       	sbci	r27, 0xFF	; 255
    7576:	8d 91       	ld	r24, X+
    7578:	9c 91       	ld	r25, X
    757a:	11 97       	sbiw	r26, 0x01	; 1
    757c:	28 17       	cp	r18, r24
    757e:	39 07       	cpc	r19, r25
    7580:	19 f4       	brne	.+6      	; 0x7588 <HardwareSerial::read()+0x2e>
    7582:	2f ef       	ldi	r18, 0xFF	; 255
    7584:	3f ef       	ldi	r19, 0xFF	; 255
    7586:	10 c0       	rjmp	.+32     	; 0x75a8 <HardwareSerial::read()+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    7588:	8d 91       	ld	r24, X+
    758a:	9c 91       	ld	r25, X
    758c:	11 97       	sbiw	r26, 0x01	; 1
    758e:	e8 0f       	add	r30, r24
    7590:	f9 1f       	adc	r31, r25
    7592:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    7594:	8d 91       	ld	r24, X+
    7596:	9c 91       	ld	r25, X
    7598:	11 97       	sbiw	r26, 0x01	; 1
    759a:	01 96       	adiw	r24, 0x01	; 1
    759c:	8f 73       	andi	r24, 0x3F	; 63
    759e:	90 70       	andi	r25, 0x00	; 0
    75a0:	11 96       	adiw	r26, 0x01	; 1
    75a2:	9c 93       	st	X, r25
    75a4:	8e 93       	st	-X, r24
    return c;
    75a6:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    75a8:	c9 01       	movw	r24, r18
    75aa:	08 95       	ret

000075ac <HardwareSerial::flush()>:

void HardwareSerial::flush()
    75ac:	dc 01       	movw	r26, r24
{
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
    75ae:	91 96       	adiw	r26, 0x21	; 33
    75b0:	8c 91       	ld	r24, X
    75b2:	91 97       	sbiw	r26, 0x21	; 33
    75b4:	88 23       	and	r24, r24
    75b6:	39 f0       	breq	.+14     	; 0x75c6 <HardwareSerial::flush()+0x1a>
    75b8:	54 96       	adiw	r26, 0x14	; 20
    75ba:	ed 91       	ld	r30, X+
    75bc:	fc 91       	ld	r31, X
    75be:	55 97       	sbiw	r26, 0x15	; 21
    75c0:	80 81       	ld	r24, Z
    75c2:	86 ff       	sbrs	r24, 6
    75c4:	f9 cf       	rjmp	.-14     	; 0x75b8 <HardwareSerial::flush()+0xc>
  transmitting = false;
    75c6:	91 96       	adiw	r26, 0x21	; 33
    75c8:	1c 92       	st	X, r1
}
    75ca:	08 95       	ret

000075cc <HardwareSerial::write(unsigned char)>:

size_t HardwareSerial::write(uint8_t c)
    75cc:	cf 93       	push	r28
    75ce:	df 93       	push	r29
    75d0:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    75d2:	ee 85       	ldd	r30, Y+14	; 0x0e
    75d4:	ff 85       	ldd	r31, Y+15	; 0x0f
    75d6:	e0 5c       	subi	r30, 0xC0	; 192
    75d8:	ff 4f       	sbci	r31, 0xFF	; 255
    75da:	20 81       	ld	r18, Z
    75dc:	31 81       	ldd	r19, Z+1	; 0x01
    75de:	e0 54       	subi	r30, 0x40	; 64
    75e0:	f0 40       	sbci	r31, 0x00	; 0
    75e2:	2f 5f       	subi	r18, 0xFF	; 255
    75e4:	3f 4f       	sbci	r19, 0xFF	; 255
    75e6:	2f 73       	andi	r18, 0x3F	; 63
    75e8:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    75ea:	df 01       	movw	r26, r30
    75ec:	ae 5b       	subi	r26, 0xBE	; 190
    75ee:	bf 4f       	sbci	r27, 0xFF	; 255
    75f0:	8d 91       	ld	r24, X+
    75f2:	9c 91       	ld	r25, X
    75f4:	11 97       	sbiw	r26, 0x01	; 1
    75f6:	28 17       	cp	r18, r24
    75f8:	39 07       	cpc	r19, r25
    75fa:	d1 f3       	breq	.-12     	; 0x75f0 <HardwareSerial::write(unsigned char)+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    75fc:	e0 5c       	subi	r30, 0xC0	; 192
    75fe:	ff 4f       	sbci	r31, 0xFF	; 255
    7600:	80 81       	ld	r24, Z
    7602:	91 81       	ldd	r25, Z+1	; 0x01
    7604:	e0 54       	subi	r30, 0x40	; 64
    7606:	f0 40       	sbci	r31, 0x00	; 0
    7608:	e8 0f       	add	r30, r24
    760a:	f9 1f       	adc	r31, r25
    760c:	60 83       	st	Z, r22
  _tx_buffer->head = i;
    760e:	ee 85       	ldd	r30, Y+14	; 0x0e
    7610:	ff 85       	ldd	r31, Y+15	; 0x0f
    7612:	e0 5c       	subi	r30, 0xC0	; 192
    7614:	ff 4f       	sbci	r31, 0xFF	; 255
    7616:	31 83       	std	Z+1, r19	; 0x01
    7618:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    761a:	ee 89       	ldd	r30, Y+22	; 0x16
    761c:	ff 89       	ldd	r31, Y+23	; 0x17
    761e:	20 81       	ld	r18, Z
    7620:	81 e0       	ldi	r24, 0x01	; 1
    7622:	90 e0       	ldi	r25, 0x00	; 0
    7624:	0f 8c       	ldd	r0, Y+31	; 0x1f
    7626:	02 c0       	rjmp	.+4      	; 0x762c <HardwareSerial::write(unsigned char)+0x60>
    7628:	88 0f       	add	r24, r24
    762a:	99 1f       	adc	r25, r25
    762c:	0a 94       	dec	r0
    762e:	e2 f7       	brpl	.-8      	; 0x7628 <HardwareSerial::write(unsigned char)+0x5c>
    7630:	28 2b       	or	r18, r24
    7632:	20 83       	st	Z, r18
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
    7634:	81 e0       	ldi	r24, 0x01	; 1
    7636:	89 a3       	std	Y+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
    7638:	ec 89       	ldd	r30, Y+20	; 0x14
    763a:	fd 89       	ldd	r31, Y+21	; 0x15
    763c:	80 81       	ld	r24, Z
    763e:	80 64       	ori	r24, 0x40	; 64
    7640:	80 83       	st	Z, r24
  
  return 1;
}
    7642:	81 e0       	ldi	r24, 0x01	; 1
    7644:	90 e0       	ldi	r25, 0x00	; 0
    7646:	df 91       	pop	r29
    7648:	cf 91       	pop	r28
    764a:	08 95       	ret

0000764c <global constructors keyed to rx_buffer>:
    764c:	10 92 c9 04 	sts	0x04C9, r1
    7650:	10 92 c8 04 	sts	0x04C8, r1
    7654:	88 ee       	ldi	r24, 0xE8	; 232
    7656:	93 e0       	ldi	r25, 0x03	; 3
    7658:	a0 e0       	ldi	r26, 0x00	; 0
    765a:	b0 e0       	ldi	r27, 0x00	; 0
    765c:	80 93 ca 04 	sts	0x04CA, r24
    7660:	90 93 cb 04 	sts	0x04CB, r25
    7664:	a0 93 cc 04 	sts	0x04CC, r26
    7668:	b0 93 cd 04 	sts	0x04CD, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    766c:	81 ef       	ldi	r24, 0xF1	; 241
    766e:	91 e0       	ldi	r25, 0x01	; 1
    7670:	90 93 c7 04 	sts	0x04C7, r25
    7674:	80 93 c6 04 	sts	0x04C6, r24
{
  _rx_buffer = rx_buffer;
    7678:	8e e3       	ldi	r24, 0x3E	; 62
    767a:	94 e0       	ldi	r25, 0x04	; 4
    767c:	90 93 d3 04 	sts	0x04D3, r25
    7680:	80 93 d2 04 	sts	0x04D2, r24
  _tx_buffer = tx_buffer;
    7684:	82 e8       	ldi	r24, 0x82	; 130
    7686:	94 e0       	ldi	r25, 0x04	; 4
    7688:	90 93 d5 04 	sts	0x04D5, r25
    768c:	80 93 d4 04 	sts	0x04D4, r24
  _ubrrh = ubrrh;
    7690:	85 ec       	ldi	r24, 0xC5	; 197
    7692:	90 e0       	ldi	r25, 0x00	; 0
    7694:	90 93 d7 04 	sts	0x04D7, r25
    7698:	80 93 d6 04 	sts	0x04D6, r24
  _ubrrl = ubrrl;
    769c:	84 ec       	ldi	r24, 0xC4	; 196
    769e:	90 e0       	ldi	r25, 0x00	; 0
    76a0:	90 93 d9 04 	sts	0x04D9, r25
    76a4:	80 93 d8 04 	sts	0x04D8, r24
  _ucsra = ucsra;
    76a8:	80 ec       	ldi	r24, 0xC0	; 192
    76aa:	90 e0       	ldi	r25, 0x00	; 0
    76ac:	90 93 db 04 	sts	0x04DB, r25
    76b0:	80 93 da 04 	sts	0x04DA, r24
  _ucsrb = ucsrb;
    76b4:	81 ec       	ldi	r24, 0xC1	; 193
    76b6:	90 e0       	ldi	r25, 0x00	; 0
    76b8:	90 93 dd 04 	sts	0x04DD, r25
    76bc:	80 93 dc 04 	sts	0x04DC, r24
  _ucsrc = ucsrc;
    76c0:	82 ec       	ldi	r24, 0xC2	; 194
    76c2:	90 e0       	ldi	r25, 0x00	; 0
    76c4:	90 93 df 04 	sts	0x04DF, r25
    76c8:	80 93 de 04 	sts	0x04DE, r24
  _udr = udr;
    76cc:	86 ec       	ldi	r24, 0xC6	; 198
    76ce:	90 e0       	ldi	r25, 0x00	; 0
    76d0:	90 93 e1 04 	sts	0x04E1, r25
    76d4:	80 93 e0 04 	sts	0x04E0, r24
  _rxen = rxen;
    76d8:	84 e0       	ldi	r24, 0x04	; 4
    76da:	80 93 e2 04 	sts	0x04E2, r24
  _txen = txen;
    76de:	83 e0       	ldi	r24, 0x03	; 3
    76e0:	80 93 e3 04 	sts	0x04E3, r24
  _rxcie = rxcie;
    76e4:	87 e0       	ldi	r24, 0x07	; 7
    76e6:	80 93 e4 04 	sts	0x04E4, r24
  _udrie = udrie;
    76ea:	85 e0       	ldi	r24, 0x05	; 5
    76ec:	80 93 e5 04 	sts	0x04E5, r24
  _u2x = u2x;
    76f0:	81 e0       	ldi	r24, 0x01	; 1
    76f2:	80 93 e6 04 	sts	0x04E6, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    76f6:	08 95       	ret

000076f8 <main>:
#include <Arduino.h>

int main(void)
    76f8:	cf 93       	push	r28
    76fa:	df 93       	push	r29
{
	init();
    76fc:	0e 94 7e 3d 	call	0x7afc	; 0x7afc <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    7700:	0e 94 04 2f 	call	0x5e08	; 0x5e08 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    7704:	ca e4       	ldi	r28, 0x4A	; 74
    7706:	d9 e3       	ldi	r29, 0x39	; 57
#endif
	
	setup();
    
	for (;;) {
		loop();
    7708:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <loop>
		if (serialEventRun) serialEventRun();
    770c:	20 97       	sbiw	r28, 0x00	; 0
    770e:	e1 f3       	breq	.-8      	; 0x7708 <main+0x10>
    7710:	0e 94 4a 39 	call	0x7294	; 0x7294 <serialEventRun()>
    7714:	f9 cf       	rjmp	.-14     	; 0x7708 <main+0x10>

00007716 <__cxa_guard_acquire>:
void operator delete[](void * ptr)
{
  free(ptr);
}

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
    7716:	fc 01       	movw	r30, r24
    7718:	20 e0       	ldi	r18, 0x00	; 0
    771a:	30 e0       	ldi	r19, 0x00	; 0
    771c:	80 81       	ld	r24, Z
    771e:	88 23       	and	r24, r24
    7720:	11 f4       	brne	.+4      	; 0x7726 <__cxa_guard_acquire+0x10>
    7722:	21 e0       	ldi	r18, 0x01	; 1
    7724:	30 e0       	ldi	r19, 0x00	; 0
    7726:	c9 01       	movw	r24, r18
    7728:	08 95       	ret

0000772a <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
    772a:	fc 01       	movw	r30, r24
    772c:	81 e0       	ldi	r24, 0x01	; 1
    772e:	80 83       	st	Z, r24
    7730:	08 95       	ret

00007732 <Print::write(unsigned char const*, unsigned int)>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    7732:	cf 92       	push	r12
    7734:	df 92       	push	r13
    7736:	ef 92       	push	r14
    7738:	ff 92       	push	r15
    773a:	0f 93       	push	r16
    773c:	1f 93       	push	r17
    773e:	cf 93       	push	r28
    7740:	df 93       	push	r29
    7742:	7c 01       	movw	r14, r24
    7744:	6b 01       	movw	r12, r22
    7746:	8a 01       	movw	r16, r20
    7748:	c0 e0       	ldi	r28, 0x00	; 0
    774a:	d0 e0       	ldi	r29, 0x00	; 0
    774c:	0f c0       	rjmp	.+30     	; 0x776c <Print::write(unsigned char const*, unsigned int)+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    774e:	d6 01       	movw	r26, r12
    7750:	6d 91       	ld	r22, X+
    7752:	6d 01       	movw	r12, r26
    7754:	d7 01       	movw	r26, r14
    7756:	ed 91       	ld	r30, X+
    7758:	fc 91       	ld	r31, X
    775a:	01 90       	ld	r0, Z+
    775c:	f0 81       	ld	r31, Z
    775e:	e0 2d       	mov	r30, r0
    7760:	c7 01       	movw	r24, r14
    7762:	09 95       	icall
    7764:	c8 0f       	add	r28, r24
    7766:	d9 1f       	adc	r29, r25
    7768:	01 50       	subi	r16, 0x01	; 1
    776a:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    776c:	01 15       	cp	r16, r1
    776e:	11 05       	cpc	r17, r1
    7770:	71 f7       	brne	.-36     	; 0x774e <Print::write(unsigned char const*, unsigned int)+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    7772:	ce 01       	movw	r24, r28
    7774:	df 91       	pop	r29
    7776:	cf 91       	pop	r28
    7778:	1f 91       	pop	r17
    777a:	0f 91       	pop	r16
    777c:	ff 90       	pop	r15
    777e:	ef 90       	pop	r14
    7780:	df 90       	pop	r13
    7782:	cf 90       	pop	r12
    7784:	08 95       	ret

00007786 <Print::print(__FlashStringHelper const*)>:

size_t Print::print(const __FlashStringHelper *ifsh)
    7786:	ef 92       	push	r14
    7788:	ff 92       	push	r15
    778a:	0f 93       	push	r16
    778c:	1f 93       	push	r17
    778e:	cf 93       	push	r28
    7790:	df 93       	push	r29
    7792:	7c 01       	movw	r14, r24
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
    7794:	8b 01       	movw	r16, r22
    7796:	c0 e0       	ldi	r28, 0x00	; 0
    7798:	d0 e0       	ldi	r29, 0x00	; 0
    779a:	f8 01       	movw	r30, r16
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    779c:	0f 5f       	subi	r16, 0xFF	; 255
    779e:	1f 4f       	sbci	r17, 0xFF	; 255
    77a0:	64 91       	lpm	r22, Z+
    if (c == 0) break;
    77a2:	66 23       	and	r22, r22
    77a4:	59 f0       	breq	.+22     	; 0x77bc <Print::print(__FlashStringHelper const*)+0x36>
    n += write(c);
    77a6:	d7 01       	movw	r26, r14
    77a8:	ed 91       	ld	r30, X+
    77aa:	fc 91       	ld	r31, X
    77ac:	01 90       	ld	r0, Z+
    77ae:	f0 81       	ld	r31, Z
    77b0:	e0 2d       	mov	r30, r0
    77b2:	c7 01       	movw	r24, r14
    77b4:	09 95       	icall
    77b6:	c8 0f       	add	r28, r24
    77b8:	d9 1f       	adc	r29, r25
    77ba:	ef cf       	rjmp	.-34     	; 0x779a <Print::print(__FlashStringHelper const*)+0x14>
  }
  return n;
}
    77bc:	ce 01       	movw	r24, r28
    77be:	df 91       	pop	r29
    77c0:	cf 91       	pop	r28
    77c2:	1f 91       	pop	r17
    77c4:	0f 91       	pop	r16
    77c6:	ff 90       	pop	r15
    77c8:	ef 90       	pop	r14
    77ca:	08 95       	ret

000077cc <Print::print(char)>:
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
    77cc:	dc 01       	movw	r26, r24
{
  return write(c);
    77ce:	ed 91       	ld	r30, X+
    77d0:	fc 91       	ld	r31, X
    77d2:	01 90       	ld	r0, Z+
    77d4:	f0 81       	ld	r31, Z
    77d6:	e0 2d       	mov	r30, r0
    77d8:	09 95       	icall
}
    77da:	08 95       	ret

000077dc <Print::println()>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
    77dc:	ef 92       	push	r14
    77de:	ff 92       	push	r15
    77e0:	0f 93       	push	r16
    77e2:	1f 93       	push	r17
    77e4:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    77e6:	dc 01       	movw	r26, r24
    77e8:	ed 91       	ld	r30, X+
    77ea:	fc 91       	ld	r31, X
    77ec:	01 90       	ld	r0, Z+
    77ee:	f0 81       	ld	r31, Z
    77f0:	e0 2d       	mov	r30, r0
    77f2:	6d e0       	ldi	r22, 0x0D	; 13
    77f4:	09 95       	icall
    77f6:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    77f8:	d8 01       	movw	r26, r16
    77fa:	ed 91       	ld	r30, X+
    77fc:	fc 91       	ld	r31, X
    77fe:	01 90       	ld	r0, Z+
    7800:	f0 81       	ld	r31, Z
    7802:	e0 2d       	mov	r30, r0
    7804:	c8 01       	movw	r24, r16
    7806:	6a e0       	ldi	r22, 0x0A	; 10
    7808:	09 95       	icall
    780a:	9c 01       	movw	r18, r24
    780c:	2e 0d       	add	r18, r14
    780e:	3f 1d       	adc	r19, r15
    7810:	c9 01       	movw	r24, r18
    7812:	1f 91       	pop	r17
    7814:	0f 91       	pop	r16
    7816:	ff 90       	pop	r15
    7818:	ef 90       	pop	r14
    781a:	08 95       	ret

0000781c <Print::println(__FlashStringHelper const*)>:
size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
    781c:	ef 92       	push	r14
    781e:	ff 92       	push	r15
    7820:	0f 93       	push	r16
    7822:	1f 93       	push	r17
    7824:	7c 01       	movw	r14, r24
{
  size_t n = print(ifsh);
    7826:	0e 94 c3 3b 	call	0x7786	; 0x7786 <Print::print(__FlashStringHelper const*)>
    782a:	8c 01       	movw	r16, r24
  n += println();
    782c:	c7 01       	movw	r24, r14
    782e:	0e 94 ee 3b 	call	0x77dc	; 0x77dc <Print::println()>
    7832:	9c 01       	movw	r18, r24
    7834:	20 0f       	add	r18, r16
    7836:	31 1f       	adc	r19, r17
  return n;
}
    7838:	c9 01       	movw	r24, r18
    783a:	1f 91       	pop	r17
    783c:	0f 91       	pop	r16
    783e:	ff 90       	pop	r15
    7840:	ef 90       	pop	r14
    7842:	08 95       	ret

00007844 <Print::write(char const*)>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    7844:	cf 93       	push	r28
    7846:	df 93       	push	r29
    7848:	ec 01       	movw	r28, r24
      if (str == NULL) return 0;
    784a:	61 15       	cp	r22, r1
    784c:	71 05       	cpc	r23, r1
    784e:	19 f4       	brne	.+6      	; 0x7856 <Print::write(char const*)+0x12>
    7850:	20 e0       	ldi	r18, 0x00	; 0
    7852:	30 e0       	ldi	r19, 0x00	; 0
    7854:	0f c0       	rjmp	.+30     	; 0x7874 <Print::write(char const*)+0x30>
      return write((const uint8_t *)str, strlen(str));
    7856:	db 01       	movw	r26, r22
    7858:	0d 90       	ld	r0, X+
    785a:	00 20       	and	r0, r0
    785c:	e9 f7       	brne	.-6      	; 0x7858 <Print::write(char const*)+0x14>
    785e:	11 97       	sbiw	r26, 0x01	; 1
    7860:	a6 1b       	sub	r26, r22
    7862:	b7 0b       	sbc	r27, r23
    7864:	e8 81       	ld	r30, Y
    7866:	f9 81       	ldd	r31, Y+1	; 0x01
    7868:	02 80       	ldd	r0, Z+2	; 0x02
    786a:	f3 81       	ldd	r31, Z+3	; 0x03
    786c:	e0 2d       	mov	r30, r0
    786e:	ad 01       	movw	r20, r26
    7870:	09 95       	icall
    7872:	9c 01       	movw	r18, r24
    }
    7874:	c9 01       	movw	r24, r18
    7876:	df 91       	pop	r29
    7878:	cf 91       	pop	r28
    787a:	08 95       	ret

0000787c <Print::printNumber(unsigned long, unsigned char)>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    787c:	4f 92       	push	r4
    787e:	5f 92       	push	r5
    7880:	7f 92       	push	r7
    7882:	8f 92       	push	r8
    7884:	9f 92       	push	r9
    7886:	af 92       	push	r10
    7888:	bf 92       	push	r11
    788a:	cf 92       	push	r12
    788c:	df 92       	push	r13
    788e:	ef 92       	push	r14
    7890:	ff 92       	push	r15
    7892:	0f 93       	push	r16
    7894:	1f 93       	push	r17
    7896:	df 93       	push	r29
    7898:	cf 93       	push	r28
    789a:	cd b7       	in	r28, 0x3d	; 61
    789c:	de b7       	in	r29, 0x3e	; 62
    789e:	a1 97       	sbiw	r28, 0x21	; 33
    78a0:	0f b6       	in	r0, 0x3f	; 63
    78a2:	f8 94       	cli
    78a4:	de bf       	out	0x3e, r29	; 62
    78a6:	0f be       	out	0x3f, r0	; 63
    78a8:	cd bf       	out	0x3d, r28	; 61
    78aa:	2c 01       	movw	r4, r24
    78ac:	74 2e       	mov	r7, r20
    78ae:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    78b0:	22 30       	cpi	r18, 0x02	; 2
    78b2:	08 f4       	brcc	.+2      	; 0x78b6 <Print::printNumber(unsigned long, unsigned char)+0x3a>
    78b4:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    78b6:	19 a2       	std	Y+33, r1	; 0x21
    78b8:	31 e2       	ldi	r19, 0x21	; 33
    78ba:	c3 2e       	mov	r12, r19
    78bc:	d1 2c       	mov	r13, r1
    78be:	cc 0e       	add	r12, r28
    78c0:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    78c2:	82 2e       	mov	r8, r18
    78c4:	99 24       	eor	r9, r9
    78c6:	aa 24       	eor	r10, r10
    78c8:	bb 24       	eor	r11, r11
    78ca:	67 2d       	mov	r22, r7
    78cc:	75 2f       	mov	r23, r21
    78ce:	a5 01       	movw	r20, r10
    78d0:	94 01       	movw	r18, r8
    78d2:	0e 94 80 3e 	call	0x7d00	; 0x7d00 <__udivmodsi4>
    78d6:	79 01       	movw	r14, r18
    78d8:	8a 01       	movw	r16, r20
    char c = m - base * n;
    78da:	c8 01       	movw	r24, r16
    78dc:	b7 01       	movw	r22, r14
    78de:	a5 01       	movw	r20, r10
    78e0:	94 01       	movw	r18, r8
    78e2:	0e 94 3a 3e 	call	0x7c74	; 0x7c74 <__mulsi3>
    78e6:	47 2d       	mov	r20, r7
    78e8:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    78ea:	08 94       	sec
    78ec:	c1 08       	sbc	r12, r1
    78ee:	d1 08       	sbc	r13, r1
    78f0:	4a 30       	cpi	r20, 0x0A	; 10
    78f2:	14 f4       	brge	.+4      	; 0x78f8 <Print::printNumber(unsigned long, unsigned char)+0x7c>
    78f4:	40 5d       	subi	r20, 0xD0	; 208
    78f6:	01 c0       	rjmp	.+2      	; 0x78fa <Print::printNumber(unsigned long, unsigned char)+0x7e>
    78f8:	49 5c       	subi	r20, 0xC9	; 201
    78fa:	f6 01       	movw	r30, r12
    78fc:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    78fe:	e1 14       	cp	r14, r1
    7900:	f1 04       	cpc	r15, r1
    7902:	01 05       	cpc	r16, r1
    7904:	11 05       	cpc	r17, r1
    7906:	21 f0       	breq	.+8      	; 0x7910 <Print::printNumber(unsigned long, unsigned char)+0x94>
    7908:	7e 2c       	mov	r7, r14
    790a:	5f 2d       	mov	r21, r15
    790c:	c8 01       	movw	r24, r16
    790e:	dd cf       	rjmp	.-70     	; 0x78ca <Print::printNumber(unsigned long, unsigned char)+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    7910:	c2 01       	movw	r24, r4
    7912:	b6 01       	movw	r22, r12
    7914:	0e 94 22 3c 	call	0x7844	; 0x7844 <Print::write(char const*)>
}
    7918:	a1 96       	adiw	r28, 0x21	; 33
    791a:	0f b6       	in	r0, 0x3f	; 63
    791c:	f8 94       	cli
    791e:	de bf       	out	0x3e, r29	; 62
    7920:	0f be       	out	0x3f, r0	; 63
    7922:	cd bf       	out	0x3d, r28	; 61
    7924:	cf 91       	pop	r28
    7926:	df 91       	pop	r29
    7928:	1f 91       	pop	r17
    792a:	0f 91       	pop	r16
    792c:	ff 90       	pop	r15
    792e:	ef 90       	pop	r14
    7930:	df 90       	pop	r13
    7932:	cf 90       	pop	r12
    7934:	bf 90       	pop	r11
    7936:	af 90       	pop	r10
    7938:	9f 90       	pop	r9
    793a:	8f 90       	pop	r8
    793c:	7f 90       	pop	r7
    793e:	5f 90       	pop	r5
    7940:	4f 90       	pop	r4
    7942:	08 95       	ret

00007944 <Print::print(unsigned long, int)>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
    7944:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
    7946:	21 15       	cp	r18, r1
    7948:	31 05       	cpc	r19, r1
    794a:	41 f4       	brne	.+16     	; 0x795c <Print::print(unsigned long, int)+0x18>
    794c:	ed 91       	ld	r30, X+
    794e:	fc 91       	ld	r31, X
    7950:	01 90       	ld	r0, Z+
    7952:	f0 81       	ld	r31, Z
    7954:	e0 2d       	mov	r30, r0
    7956:	64 2f       	mov	r22, r20
    7958:	09 95       	icall
    795a:	08 95       	ret
  else return printNumber(n, base);
    795c:	0e 94 3e 3c 	call	0x787c	; 0x787c <Print::printNumber(unsigned long, unsigned char)>
}
    7960:	08 95       	ret

00007962 <Print::print(unsigned int, int)>:
size_t Print::print(int n, int base)
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
    7962:	ef 92       	push	r14
    7964:	ff 92       	push	r15
    7966:	0f 93       	push	r16
    7968:	1f 93       	push	r17
    796a:	9a 01       	movw	r18, r20
{
  return print((unsigned long) n, base);
    796c:	7b 01       	movw	r14, r22
    796e:	00 e0       	ldi	r16, 0x00	; 0
    7970:	10 e0       	ldi	r17, 0x00	; 0
    7972:	b8 01       	movw	r22, r16
    7974:	a7 01       	movw	r20, r14
    7976:	0e 94 a2 3c 	call	0x7944	; 0x7944 <Print::print(unsigned long, int)>
}
    797a:	1f 91       	pop	r17
    797c:	0f 91       	pop	r16
    797e:	ff 90       	pop	r15
    7980:	ef 90       	pop	r14
    7982:	08 95       	ret

00007984 <Print::print(unsigned char, int)>:
size_t Print::print(char c)
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
    7984:	ef 92       	push	r14
    7986:	ff 92       	push	r15
    7988:	0f 93       	push	r16
    798a:	1f 93       	push	r17
    798c:	9a 01       	movw	r18, r20
{
  return print((unsigned long) b, base);
    798e:	e6 2e       	mov	r14, r22
    7990:	ff 24       	eor	r15, r15
    7992:	00 e0       	ldi	r16, 0x00	; 0
    7994:	10 e0       	ldi	r17, 0x00	; 0
    7996:	b8 01       	movw	r22, r16
    7998:	a7 01       	movw	r20, r14
    799a:	0e 94 a2 3c 	call	0x7944	; 0x7944 <Print::print(unsigned long, int)>
}
    799e:	1f 91       	pop	r17
    79a0:	0f 91       	pop	r16
    79a2:	ff 90       	pop	r15
    79a4:	ef 90       	pop	r14
    79a6:	08 95       	ret

000079a8 <Print::print(long, int)>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
    79a8:	cf 92       	push	r12
    79aa:	df 92       	push	r13
    79ac:	ef 92       	push	r14
    79ae:	ff 92       	push	r15
    79b0:	0f 93       	push	r16
    79b2:	1f 93       	push	r17
    79b4:	cf 93       	push	r28
    79b6:	df 93       	push	r29
    79b8:	ec 01       	movw	r28, r24
    79ba:	6a 01       	movw	r12, r20
    79bc:	7b 01       	movw	r14, r22
{
  if (base == 0) {
    79be:	21 15       	cp	r18, r1
    79c0:	31 05       	cpc	r19, r1
    79c2:	41 f4       	brne	.+16     	; 0x79d4 <Print::print(long, int)+0x2c>
    return write(n);
    79c4:	e8 81       	ld	r30, Y
    79c6:	f9 81       	ldd	r31, Y+1	; 0x01
    79c8:	01 90       	ld	r0, Z+
    79ca:	f0 81       	ld	r31, Z
    79cc:	e0 2d       	mov	r30, r0
    79ce:	64 2f       	mov	r22, r20
    79d0:	09 95       	icall
    79d2:	1f c0       	rjmp	.+62     	; 0x7a12 <Print::print(long, int)+0x6a>
  } else if (base == 10) {
    79d4:	2a 30       	cpi	r18, 0x0A	; 10
    79d6:	31 05       	cpc	r19, r1
    79d8:	d1 f4       	brne	.+52     	; 0x7a0e <Print::print(long, int)+0x66>
    if (n < 0) {
    79da:	77 ff       	sbrs	r23, 7
    79dc:	17 c0       	rjmp	.+46     	; 0x7a0c <Print::print(long, int)+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    79de:	e8 81       	ld	r30, Y
    79e0:	f9 81       	ldd	r31, Y+1	; 0x01
    79e2:	01 90       	ld	r0, Z+
    79e4:	f0 81       	ld	r31, Z
    79e6:	e0 2d       	mov	r30, r0
    79e8:	6d e2       	ldi	r22, 0x2D	; 45
    79ea:	09 95       	icall
    79ec:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    79ee:	44 27       	eor	r20, r20
    79f0:	55 27       	eor	r21, r21
    79f2:	ba 01       	movw	r22, r20
    79f4:	4c 19       	sub	r20, r12
    79f6:	5d 09       	sbc	r21, r13
    79f8:	6e 09       	sbc	r22, r14
    79fa:	7f 09       	sbc	r23, r15
    79fc:	ce 01       	movw	r24, r28
    79fe:	2a e0       	ldi	r18, 0x0A	; 10
    7a00:	0e 94 3e 3c 	call	0x787c	; 0x787c <Print::printNumber(unsigned long, unsigned char)>
    7a04:	98 01       	movw	r18, r16
    7a06:	28 0f       	add	r18, r24
    7a08:	39 1f       	adc	r19, r25
    7a0a:	04 c0       	rjmp	.+8      	; 0x7a14 <Print::print(long, int)+0x6c>
    }
    return printNumber(n, 10);
    7a0c:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    7a0e:	0e 94 3e 3c 	call	0x787c	; 0x787c <Print::printNumber(unsigned long, unsigned char)>
    7a12:	9c 01       	movw	r18, r24
  }
}
    7a14:	c9 01       	movw	r24, r18
    7a16:	df 91       	pop	r29
    7a18:	cf 91       	pop	r28
    7a1a:	1f 91       	pop	r17
    7a1c:	0f 91       	pop	r16
    7a1e:	ff 90       	pop	r15
    7a20:	ef 90       	pop	r14
    7a22:	df 90       	pop	r13
    7a24:	cf 90       	pop	r12
    7a26:	08 95       	ret

00007a28 <Print::print(int, int)>:
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
    7a28:	ef 92       	push	r14
    7a2a:	ff 92       	push	r15
    7a2c:	0f 93       	push	r16
    7a2e:	1f 93       	push	r17
    7a30:	7b 01       	movw	r14, r22
    7a32:	9a 01       	movw	r18, r20
{
  return print((long) n, base);
    7a34:	00 27       	eor	r16, r16
    7a36:	f7 fc       	sbrc	r15, 7
    7a38:	00 95       	com	r16
    7a3a:	10 2f       	mov	r17, r16
    7a3c:	b8 01       	movw	r22, r16
    7a3e:	a7 01       	movw	r20, r14
    7a40:	0e 94 d4 3c 	call	0x79a8	; 0x79a8 <Print::print(long, int)>
}
    7a44:	1f 91       	pop	r17
    7a46:	0f 91       	pop	r16
    7a48:	ff 90       	pop	r15
    7a4a:	ef 90       	pop	r14
    7a4c:	08 95       	ret

00007a4e <Print::print(char const*)>:
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    7a4e:	0e 94 22 3c 	call	0x7844	; 0x7844 <Print::write(char const*)>
}
    7a52:	08 95       	ret

00007a54 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    7a54:	1f 92       	push	r1
    7a56:	0f 92       	push	r0
    7a58:	0f b6       	in	r0, 0x3f	; 63
    7a5a:	0f 92       	push	r0
    7a5c:	11 24       	eor	r1, r1
    7a5e:	2f 93       	push	r18
    7a60:	3f 93       	push	r19
    7a62:	4f 93       	push	r20
    7a64:	5f 93       	push	r21
    7a66:	6f 93       	push	r22
    7a68:	7f 93       	push	r23
    7a6a:	8f 93       	push	r24
    7a6c:	9f 93       	push	r25
    7a6e:	af 93       	push	r26
    7a70:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    7a72:	20 91 ec 04 	lds	r18, 0x04EC
    7a76:	30 91 ed 04 	lds	r19, 0x04ED
    7a7a:	40 91 ee 04 	lds	r20, 0x04EE
    7a7e:	50 91 ef 04 	lds	r21, 0x04EF
	unsigned char f = timer0_fract;
    7a82:	70 91 f0 04 	lds	r23, 0x04F0

	m += MILLIS_INC;
    7a86:	da 01       	movw	r26, r20
    7a88:	c9 01       	movw	r24, r18
    7a8a:	40 96       	adiw	r24, 0x10	; 16
    7a8c:	a1 1d       	adc	r26, r1
    7a8e:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    7a90:	67 2f       	mov	r22, r23
    7a92:	60 5d       	subi	r22, 0xD0	; 208
	if (f >= FRACT_MAX) {
    7a94:	6d 37       	cpi	r22, 0x7D	; 125
    7a96:	30 f0       	brcs	.+12     	; 0x7aa4 <__vector_16+0x50>
		f -= FRACT_MAX;
    7a98:	6d 57       	subi	r22, 0x7D	; 125
		m += 1;
    7a9a:	da 01       	movw	r26, r20
    7a9c:	c9 01       	movw	r24, r18
    7a9e:	41 96       	adiw	r24, 0x11	; 17
    7aa0:	a1 1d       	adc	r26, r1
    7aa2:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    7aa4:	60 93 f0 04 	sts	0x04F0, r22
	timer0_millis = m;
    7aa8:	80 93 ec 04 	sts	0x04EC, r24
    7aac:	90 93 ed 04 	sts	0x04ED, r25
    7ab0:	a0 93 ee 04 	sts	0x04EE, r26
    7ab4:	b0 93 ef 04 	sts	0x04EF, r27
	timer0_overflow_count++;
    7ab8:	80 91 e8 04 	lds	r24, 0x04E8
    7abc:	90 91 e9 04 	lds	r25, 0x04E9
    7ac0:	a0 91 ea 04 	lds	r26, 0x04EA
    7ac4:	b0 91 eb 04 	lds	r27, 0x04EB
    7ac8:	01 96       	adiw	r24, 0x01	; 1
    7aca:	a1 1d       	adc	r26, r1
    7acc:	b1 1d       	adc	r27, r1
    7ace:	80 93 e8 04 	sts	0x04E8, r24
    7ad2:	90 93 e9 04 	sts	0x04E9, r25
    7ad6:	a0 93 ea 04 	sts	0x04EA, r26
    7ada:	b0 93 eb 04 	sts	0x04EB, r27
}
    7ade:	bf 91       	pop	r27
    7ae0:	af 91       	pop	r26
    7ae2:	9f 91       	pop	r25
    7ae4:	8f 91       	pop	r24
    7ae6:	7f 91       	pop	r23
    7ae8:	6f 91       	pop	r22
    7aea:	5f 91       	pop	r21
    7aec:	4f 91       	pop	r20
    7aee:	3f 91       	pop	r19
    7af0:	2f 91       	pop	r18
    7af2:	0f 90       	pop	r0
    7af4:	0f be       	out	0x3f, r0	; 63
    7af6:	0f 90       	pop	r0
    7af8:	1f 90       	pop	r1
    7afa:	18 95       	reti

00007afc <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    7afc:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    7afe:	84 b5       	in	r24, 0x24	; 36
    7b00:	82 60       	ori	r24, 0x02	; 2
    7b02:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    7b04:	84 b5       	in	r24, 0x24	; 36
    7b06:	81 60       	ori	r24, 0x01	; 1
    7b08:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    7b0a:	85 b5       	in	r24, 0x25	; 37
    7b0c:	82 60       	ori	r24, 0x02	; 2
    7b0e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    7b10:	85 b5       	in	r24, 0x25	; 37
    7b12:	81 60       	ori	r24, 0x01	; 1
    7b14:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    7b16:	ee e6       	ldi	r30, 0x6E	; 110
    7b18:	f0 e0       	ldi	r31, 0x00	; 0
    7b1a:	80 81       	ld	r24, Z
    7b1c:	81 60       	ori	r24, 0x01	; 1
    7b1e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    7b20:	e1 e8       	ldi	r30, 0x81	; 129
    7b22:	f0 e0       	ldi	r31, 0x00	; 0
    7b24:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    7b26:	80 81       	ld	r24, Z
    7b28:	82 60       	ori	r24, 0x02	; 2
    7b2a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    7b2c:	e0 e8       	ldi	r30, 0x80	; 128
    7b2e:	f0 e0       	ldi	r31, 0x00	; 0
    7b30:	80 81       	ld	r24, Z
    7b32:	81 60       	ori	r24, 0x01	; 1
    7b34:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    7b36:	e1 eb       	ldi	r30, 0xB1	; 177
    7b38:	f0 e0       	ldi	r31, 0x00	; 0
    7b3a:	80 81       	ld	r24, Z
    7b3c:	84 60       	ori	r24, 0x04	; 4
    7b3e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    7b40:	e0 eb       	ldi	r30, 0xB0	; 176
    7b42:	f0 e0       	ldi	r31, 0x00	; 0
    7b44:	80 81       	ld	r24, Z
    7b46:	81 60       	ori	r24, 0x01	; 1
    7b48:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    7b4a:	ea e7       	ldi	r30, 0x7A	; 122
    7b4c:	f0 e0       	ldi	r31, 0x00	; 0
    7b4e:	80 81       	ld	r24, Z
    7b50:	84 60       	ori	r24, 0x04	; 4
    7b52:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    7b54:	80 81       	ld	r24, Z
    7b56:	82 60       	ori	r24, 0x02	; 2
    7b58:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    7b5a:	80 81       	ld	r24, Z
    7b5c:	81 60       	ori	r24, 0x01	; 1
    7b5e:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    7b60:	80 81       	ld	r24, Z
    7b62:	80 68       	ori	r24, 0x80	; 128
    7b64:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    7b66:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    7b6a:	08 95       	ret

00007b6c <__floatunsisf>:
    7b6c:	e8 94       	clt
    7b6e:	09 c0       	rjmp	.+18     	; 0x7b82 <__floatsisf+0x12>

00007b70 <__floatsisf>:
    7b70:	97 fb       	bst	r25, 7
    7b72:	3e f4       	brtc	.+14     	; 0x7b82 <__floatsisf+0x12>
    7b74:	90 95       	com	r25
    7b76:	80 95       	com	r24
    7b78:	70 95       	com	r23
    7b7a:	61 95       	neg	r22
    7b7c:	7f 4f       	sbci	r23, 0xFF	; 255
    7b7e:	8f 4f       	sbci	r24, 0xFF	; 255
    7b80:	9f 4f       	sbci	r25, 0xFF	; 255
    7b82:	99 23       	and	r25, r25
    7b84:	a9 f0       	breq	.+42     	; 0x7bb0 <__floatsisf+0x40>
    7b86:	f9 2f       	mov	r31, r25
    7b88:	96 e9       	ldi	r25, 0x96	; 150
    7b8a:	bb 27       	eor	r27, r27
    7b8c:	93 95       	inc	r25
    7b8e:	f6 95       	lsr	r31
    7b90:	87 95       	ror	r24
    7b92:	77 95       	ror	r23
    7b94:	67 95       	ror	r22
    7b96:	b7 95       	ror	r27
    7b98:	f1 11       	cpse	r31, r1
    7b9a:	f8 cf       	rjmp	.-16     	; 0x7b8c <__floatsisf+0x1c>
    7b9c:	fa f4       	brpl	.+62     	; 0x7bdc <__floatsisf+0x6c>
    7b9e:	bb 0f       	add	r27, r27
    7ba0:	11 f4       	brne	.+4      	; 0x7ba6 <__floatsisf+0x36>
    7ba2:	60 ff       	sbrs	r22, 0
    7ba4:	1b c0       	rjmp	.+54     	; 0x7bdc <__floatsisf+0x6c>
    7ba6:	6f 5f       	subi	r22, 0xFF	; 255
    7ba8:	7f 4f       	sbci	r23, 0xFF	; 255
    7baa:	8f 4f       	sbci	r24, 0xFF	; 255
    7bac:	9f 4f       	sbci	r25, 0xFF	; 255
    7bae:	16 c0       	rjmp	.+44     	; 0x7bdc <__floatsisf+0x6c>
    7bb0:	88 23       	and	r24, r24
    7bb2:	11 f0       	breq	.+4      	; 0x7bb8 <__floatsisf+0x48>
    7bb4:	96 e9       	ldi	r25, 0x96	; 150
    7bb6:	11 c0       	rjmp	.+34     	; 0x7bda <__floatsisf+0x6a>
    7bb8:	77 23       	and	r23, r23
    7bba:	21 f0       	breq	.+8      	; 0x7bc4 <__floatsisf+0x54>
    7bbc:	9e e8       	ldi	r25, 0x8E	; 142
    7bbe:	87 2f       	mov	r24, r23
    7bc0:	76 2f       	mov	r23, r22
    7bc2:	05 c0       	rjmp	.+10     	; 0x7bce <__floatsisf+0x5e>
    7bc4:	66 23       	and	r22, r22
    7bc6:	71 f0       	breq	.+28     	; 0x7be4 <__floatsisf+0x74>
    7bc8:	96 e8       	ldi	r25, 0x86	; 134
    7bca:	86 2f       	mov	r24, r22
    7bcc:	70 e0       	ldi	r23, 0x00	; 0
    7bce:	60 e0       	ldi	r22, 0x00	; 0
    7bd0:	2a f0       	brmi	.+10     	; 0x7bdc <__floatsisf+0x6c>
    7bd2:	9a 95       	dec	r25
    7bd4:	66 0f       	add	r22, r22
    7bd6:	77 1f       	adc	r23, r23
    7bd8:	88 1f       	adc	r24, r24
    7bda:	da f7       	brpl	.-10     	; 0x7bd2 <__floatsisf+0x62>
    7bdc:	88 0f       	add	r24, r24
    7bde:	96 95       	lsr	r25
    7be0:	87 95       	ror	r24
    7be2:	97 f9       	bld	r25, 7
    7be4:	08 95       	ret

00007be6 <fmax>:
    7be6:	99 0f       	add	r25, r25
    7be8:	bb 0b       	sbc	r27, r27
    7bea:	55 0f       	add	r21, r21
    7bec:	aa 0b       	sbc	r26, r26
    7bee:	e0 e8       	ldi	r30, 0x80	; 128
    7bf0:	fe ef       	ldi	r31, 0xFE	; 254
    7bf2:	16 16       	cp	r1, r22
    7bf4:	17 06       	cpc	r1, r23
    7bf6:	e8 07       	cpc	r30, r24
    7bf8:	f9 07       	cpc	r31, r25
    7bfa:	70 f0       	brcs	.+28     	; 0x7c18 <fmax+0x32>
    7bfc:	12 16       	cp	r1, r18
    7bfe:	13 06       	cpc	r1, r19
    7c00:	e4 07       	cpc	r30, r20
    7c02:	f5 07       	cpc	r31, r21
    7c04:	60 f0       	brcs	.+24     	; 0x7c1e <fmax+0x38>
    7c06:	ba 17       	cp	r27, r26
    7c08:	3c f0       	brlt	.+14     	; 0x7c18 <fmax+0x32>
    7c0a:	49 f4       	brne	.+18     	; 0x7c1e <fmax+0x38>
    7c0c:	62 17       	cp	r22, r18
    7c0e:	73 07       	cpc	r23, r19
    7c10:	84 07       	cpc	r24, r20
    7c12:	95 07       	cpc	r25, r21
    7c14:	a7 95       	ror	r26
    7c16:	1b f4       	brvc	.+6      	; 0x7c1e <fmax+0x38>
    7c18:	b9 01       	movw	r22, r18
    7c1a:	ca 01       	movw	r24, r20
    7c1c:	ba 2f       	mov	r27, r26
    7c1e:	b6 95       	lsr	r27
    7c20:	97 95       	ror	r25
    7c22:	08 95       	ret

00007c24 <__fp_cmp>:
    7c24:	99 0f       	add	r25, r25
    7c26:	00 08       	sbc	r0, r0
    7c28:	55 0f       	add	r21, r21
    7c2a:	aa 0b       	sbc	r26, r26
    7c2c:	e0 e8       	ldi	r30, 0x80	; 128
    7c2e:	fe ef       	ldi	r31, 0xFE	; 254
    7c30:	16 16       	cp	r1, r22
    7c32:	17 06       	cpc	r1, r23
    7c34:	e8 07       	cpc	r30, r24
    7c36:	f9 07       	cpc	r31, r25
    7c38:	c0 f0       	brcs	.+48     	; 0x7c6a <__fp_cmp+0x46>
    7c3a:	12 16       	cp	r1, r18
    7c3c:	13 06       	cpc	r1, r19
    7c3e:	e4 07       	cpc	r30, r20
    7c40:	f5 07       	cpc	r31, r21
    7c42:	98 f0       	brcs	.+38     	; 0x7c6a <__fp_cmp+0x46>
    7c44:	62 1b       	sub	r22, r18
    7c46:	73 0b       	sbc	r23, r19
    7c48:	84 0b       	sbc	r24, r20
    7c4a:	95 0b       	sbc	r25, r21
    7c4c:	39 f4       	brne	.+14     	; 0x7c5c <__fp_cmp+0x38>
    7c4e:	0a 26       	eor	r0, r26
    7c50:	61 f0       	breq	.+24     	; 0x7c6a <__fp_cmp+0x46>
    7c52:	23 2b       	or	r18, r19
    7c54:	24 2b       	or	r18, r20
    7c56:	25 2b       	or	r18, r21
    7c58:	21 f4       	brne	.+8      	; 0x7c62 <__fp_cmp+0x3e>
    7c5a:	08 95       	ret
    7c5c:	0a 26       	eor	r0, r26
    7c5e:	09 f4       	brne	.+2      	; 0x7c62 <__fp_cmp+0x3e>
    7c60:	a1 40       	sbci	r26, 0x01	; 1
    7c62:	a6 95       	lsr	r26
    7c64:	8f ef       	ldi	r24, 0xFF	; 255
    7c66:	81 1d       	adc	r24, r1
    7c68:	81 1d       	adc	r24, r1
    7c6a:	08 95       	ret

00007c6c <__gesf2>:
    7c6c:	db df       	rcall	.-74     	; 0x7c24 <__fp_cmp>
    7c6e:	08 f4       	brcc	.+2      	; 0x7c72 <__gesf2+0x6>
    7c70:	8f ef       	ldi	r24, 0xFF	; 255
    7c72:	08 95       	ret

00007c74 <__mulsi3>:
    7c74:	62 9f       	mul	r22, r18
    7c76:	d0 01       	movw	r26, r0
    7c78:	73 9f       	mul	r23, r19
    7c7a:	f0 01       	movw	r30, r0
    7c7c:	82 9f       	mul	r24, r18
    7c7e:	e0 0d       	add	r30, r0
    7c80:	f1 1d       	adc	r31, r1
    7c82:	64 9f       	mul	r22, r20
    7c84:	e0 0d       	add	r30, r0
    7c86:	f1 1d       	adc	r31, r1
    7c88:	92 9f       	mul	r25, r18
    7c8a:	f0 0d       	add	r31, r0
    7c8c:	83 9f       	mul	r24, r19
    7c8e:	f0 0d       	add	r31, r0
    7c90:	74 9f       	mul	r23, r20
    7c92:	f0 0d       	add	r31, r0
    7c94:	65 9f       	mul	r22, r21
    7c96:	f0 0d       	add	r31, r0
    7c98:	99 27       	eor	r25, r25
    7c9a:	72 9f       	mul	r23, r18
    7c9c:	b0 0d       	add	r27, r0
    7c9e:	e1 1d       	adc	r30, r1
    7ca0:	f9 1f       	adc	r31, r25
    7ca2:	63 9f       	mul	r22, r19
    7ca4:	b0 0d       	add	r27, r0
    7ca6:	e1 1d       	adc	r30, r1
    7ca8:	f9 1f       	adc	r31, r25
    7caa:	bd 01       	movw	r22, r26
    7cac:	cf 01       	movw	r24, r30
    7cae:	11 24       	eor	r1, r1
    7cb0:	08 95       	ret

00007cb2 <__udivmodhi4>:
    7cb2:	aa 1b       	sub	r26, r26
    7cb4:	bb 1b       	sub	r27, r27
    7cb6:	51 e1       	ldi	r21, 0x11	; 17
    7cb8:	07 c0       	rjmp	.+14     	; 0x7cc8 <__udivmodhi4_ep>

00007cba <__udivmodhi4_loop>:
    7cba:	aa 1f       	adc	r26, r26
    7cbc:	bb 1f       	adc	r27, r27
    7cbe:	a6 17       	cp	r26, r22
    7cc0:	b7 07       	cpc	r27, r23
    7cc2:	10 f0       	brcs	.+4      	; 0x7cc8 <__udivmodhi4_ep>
    7cc4:	a6 1b       	sub	r26, r22
    7cc6:	b7 0b       	sbc	r27, r23

00007cc8 <__udivmodhi4_ep>:
    7cc8:	88 1f       	adc	r24, r24
    7cca:	99 1f       	adc	r25, r25
    7ccc:	5a 95       	dec	r21
    7cce:	a9 f7       	brne	.-22     	; 0x7cba <__udivmodhi4_loop>
    7cd0:	80 95       	com	r24
    7cd2:	90 95       	com	r25
    7cd4:	bc 01       	movw	r22, r24
    7cd6:	cd 01       	movw	r24, r26
    7cd8:	08 95       	ret

00007cda <__divmodhi4>:
    7cda:	97 fb       	bst	r25, 7
    7cdc:	09 2e       	mov	r0, r25
    7cde:	07 26       	eor	r0, r23
    7ce0:	0a d0       	rcall	.+20     	; 0x7cf6 <__divmodhi4_neg1>
    7ce2:	77 fd       	sbrc	r23, 7
    7ce4:	04 d0       	rcall	.+8      	; 0x7cee <__divmodhi4_neg2>
    7ce6:	e5 df       	rcall	.-54     	; 0x7cb2 <__udivmodhi4>
    7ce8:	06 d0       	rcall	.+12     	; 0x7cf6 <__divmodhi4_neg1>
    7cea:	00 20       	and	r0, r0
    7cec:	1a f4       	brpl	.+6      	; 0x7cf4 <__divmodhi4_exit>

00007cee <__divmodhi4_neg2>:
    7cee:	70 95       	com	r23
    7cf0:	61 95       	neg	r22
    7cf2:	7f 4f       	sbci	r23, 0xFF	; 255

00007cf4 <__divmodhi4_exit>:
    7cf4:	08 95       	ret

00007cf6 <__divmodhi4_neg1>:
    7cf6:	f6 f7       	brtc	.-4      	; 0x7cf4 <__divmodhi4_exit>
    7cf8:	90 95       	com	r25
    7cfa:	81 95       	neg	r24
    7cfc:	9f 4f       	sbci	r25, 0xFF	; 255
    7cfe:	08 95       	ret

00007d00 <__udivmodsi4>:
    7d00:	a1 e2       	ldi	r26, 0x21	; 33
    7d02:	1a 2e       	mov	r1, r26
    7d04:	aa 1b       	sub	r26, r26
    7d06:	bb 1b       	sub	r27, r27
    7d08:	fd 01       	movw	r30, r26
    7d0a:	0d c0       	rjmp	.+26     	; 0x7d26 <__udivmodsi4_ep>

00007d0c <__udivmodsi4_loop>:
    7d0c:	aa 1f       	adc	r26, r26
    7d0e:	bb 1f       	adc	r27, r27
    7d10:	ee 1f       	adc	r30, r30
    7d12:	ff 1f       	adc	r31, r31
    7d14:	a2 17       	cp	r26, r18
    7d16:	b3 07       	cpc	r27, r19
    7d18:	e4 07       	cpc	r30, r20
    7d1a:	f5 07       	cpc	r31, r21
    7d1c:	20 f0       	brcs	.+8      	; 0x7d26 <__udivmodsi4_ep>
    7d1e:	a2 1b       	sub	r26, r18
    7d20:	b3 0b       	sbc	r27, r19
    7d22:	e4 0b       	sbc	r30, r20
    7d24:	f5 0b       	sbc	r31, r21

00007d26 <__udivmodsi4_ep>:
    7d26:	66 1f       	adc	r22, r22
    7d28:	77 1f       	adc	r23, r23
    7d2a:	88 1f       	adc	r24, r24
    7d2c:	99 1f       	adc	r25, r25
    7d2e:	1a 94       	dec	r1
    7d30:	69 f7       	brne	.-38     	; 0x7d0c <__udivmodsi4_loop>
    7d32:	60 95       	com	r22
    7d34:	70 95       	com	r23
    7d36:	80 95       	com	r24
    7d38:	90 95       	com	r25
    7d3a:	9b 01       	movw	r18, r22
    7d3c:	ac 01       	movw	r20, r24
    7d3e:	bd 01       	movw	r22, r26
    7d40:	cf 01       	movw	r24, r30
    7d42:	08 95       	ret

00007d44 <__divmodsi4>:
    7d44:	97 fb       	bst	r25, 7
    7d46:	09 2e       	mov	r0, r25
    7d48:	05 26       	eor	r0, r21
    7d4a:	0e d0       	rcall	.+28     	; 0x7d68 <__divmodsi4_neg1>
    7d4c:	57 fd       	sbrc	r21, 7
    7d4e:	04 d0       	rcall	.+8      	; 0x7d58 <__divmodsi4_neg2>
    7d50:	d7 df       	rcall	.-82     	; 0x7d00 <__udivmodsi4>
    7d52:	0a d0       	rcall	.+20     	; 0x7d68 <__divmodsi4_neg1>
    7d54:	00 1c       	adc	r0, r0
    7d56:	38 f4       	brcc	.+14     	; 0x7d66 <__divmodsi4_exit>

00007d58 <__divmodsi4_neg2>:
    7d58:	50 95       	com	r21
    7d5a:	40 95       	com	r20
    7d5c:	30 95       	com	r19
    7d5e:	21 95       	neg	r18
    7d60:	3f 4f       	sbci	r19, 0xFF	; 255
    7d62:	4f 4f       	sbci	r20, 0xFF	; 255
    7d64:	5f 4f       	sbci	r21, 0xFF	; 255

00007d66 <__divmodsi4_exit>:
    7d66:	08 95       	ret

00007d68 <__divmodsi4_neg1>:
    7d68:	f6 f7       	brtc	.-4      	; 0x7d66 <__divmodsi4_exit>
    7d6a:	90 95       	com	r25
    7d6c:	80 95       	com	r24
    7d6e:	70 95       	com	r23
    7d70:	61 95       	neg	r22
    7d72:	7f 4f       	sbci	r23, 0xFF	; 255
    7d74:	8f 4f       	sbci	r24, 0xFF	; 255
    7d76:	9f 4f       	sbci	r25, 0xFF	; 255
    7d78:	08 95       	ret

00007d7a <__tablejump2__>:
    7d7a:	ee 0f       	add	r30, r30
    7d7c:	ff 1f       	adc	r31, r31

00007d7e <__tablejump__>:
    7d7e:	05 90       	lpm	r0, Z+
    7d80:	f4 91       	lpm	r31, Z+
    7d82:	e0 2d       	mov	r30, r0
    7d84:	09 94       	ijmp

00007d86 <toupper>:
    7d86:	91 11       	cpse	r25, r1
    7d88:	08 95       	ret
    7d8a:	81 56       	subi	r24, 0x61	; 97
    7d8c:	8a 51       	subi	r24, 0x1A	; 26
    7d8e:	08 f4       	brcc	.+2      	; 0x7d92 <toupper+0xc>
    7d90:	80 52       	subi	r24, 0x20	; 32
    7d92:	85 58       	subi	r24, 0x85	; 133
    7d94:	08 95       	ret

00007d96 <_exit>:
    7d96:	f8 94       	cli

00007d98 <__stop_program>:
    7d98:	ff cf       	rjmp	.-2      	; 0x7d98 <__stop_program>
