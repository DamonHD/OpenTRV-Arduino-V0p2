
/var/folders/km/s_tzntf16nzg5bdh5n6g6lz40000gn/T/build8563901203339211554.tmp/V0p2_Main.cpp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f8  00800100  00003e4e  00003ee2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003e4e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002a5  008001f8  008001f8  00003fda  2**0
                  ALLOC
  3 .debug_aranges 00001140  00000000  00000000  00003fda  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00002f4d  00000000  00000000  0000511a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00018f3b  00000000  00000000  00008067  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000533d  00000000  00000000  00020fa2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00012064  00000000  00000000  000262df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001ec0  00000000  00000000  00038344  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000073af  00000000  00000000  0003a204  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000a4b4  00000000  00000000  000415b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 000bd551  00000000  00000000  0004ba67  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001460  00000000  00000000  00108fb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
    // If multiple valves are controlled then is this true only if all are at least partially open.
    // Used to help avoid running boiler pump against closed valves.
    // Must not be true while (re)calibrating.
    // The default is to use the check the current computed position
    // against the minimum open percentage.
    virtual bool isControlledValveReallyOpen() const { return(isCalibrated() && (value >= getMinPercentOpen())); }
       0:	0c 94 36 01 	jmp	0x26c	; 0x26c <__ctors_end>

#ifndef localFHT8VTRVEnabled
// Returns TRV if valve/radiator is to be controlled by this unit.
// Usually the case, but may not be for (a) a hub or (b) a not-yet-configured unit.
// Returns false if house code parts are set to invalid or uninitialised values (>99).
bool localFHT8VTRVEnabled() { return(((FHT8VGetHC1() <= 99) && (FHT8VGetHC2() <= 99))); }
       4:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__bad_interrupt>
      }
    crc = crc7_5B_update(crc, (uint8_t)c); // Update CRC.
    }
  if(!seenTrailingClosingBrace) { return(adjustJSONMsgForTXAndComputeCRC_ERR); } // Missing ending '}'.
  return(crc);
  }
       8:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__bad_interrupt>
// For comparator use examples see:
//   * http://forum.arduino.cc/index.php?topic=165744.0
//   * http://forum.arduino.cc/index.php?topic=17450.0
//   * http://www.avr-tutorials.com/comparator/utilizing-avr-analog-comparator-aco
//   * http://winavr.scienceprog.com/avr-gcc-tutorial/avr-comparator-c-programming-example.html
bool analogueVsBandgapRead(const uint8_t aiNumber, const bool napToSettle)
       c:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__bad_interrupt>

// Clears the RFM22 TX FIFO and queues up ready to send via the TXFIFO the 0xff-terminated bytes starting at bptr.
// This routine does not change the command area.
// This uses an efficient burst write.
// For DEBUG can abort after (over-)filling the 64-byte FIFO at no extra cost with a check before spinning waiting for SPI byte to be sent.
void RFM22QueueCmdToFF(uint8_t *bptr)
      10:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__bad_interrupt>
}

/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
      14:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__bad_interrupt>
  }

// Returns true if any simple schedule is set, false otherwise.
// This implementation just checks for any valid schedule 'on' time.
// In unit-test override mode is true for soon/now, false for off.
bool isAnySimpleScheduleSet()
      18:	0c 94 d9 0b 	jmp	0x17b2	; 0x17b2 <__vector_6>


// Get the current stats transmission level (for data outbound from this node).
// May not exactly match enumerated levels; use inequalities.
// Not thread-/ISR- safe.
stats_TX_level getStatsTXLevel() { return((stats_TX_level)eeprom_read_byte((uint8_t *)EE_START_STATS_TX_ENABLE)); }
      1c:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__bad_interrupt>
  // Send the character.
  Serial.print(u, fmt);
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
  if(neededWaking) { powerDownSerial(); }
  }
      20:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__bad_interrupt>
// Thread-safe.
void resetCLIActiveTimer() { CLITimeoutM = CLI_DEFAULT_TIMEOUT_M; }

// Returns true if the CLI is active, at least intermittently.
// Thread-safe.
bool isCLIActive() { return(0 != CLITimeoutM); }
      24:	0c 94 a9 0b 	jmp	0x1752	; 0x1752 <__vector_9>
// This may be achieved in part by dynamically slowing the CPU clock if possible.
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed((((MIN_CPU_HZ * (ms)) + 2000) / 4000) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
      28:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__bad_interrupt>
  public:
    // Return last value fetched by read(); undefined before first read().
    // Usually fast.
    // Often likely to be thread-safe or usable within ISRs (Interrupt Service Routines),
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual uint8_t get() const { return(value); }
      2c:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__bad_interrupt>
  // set address of targeted slave
  txAddress = address;
  // reset tx buffer iterator vars
  txBufferIndex = 0;
  txBufferLength = 0;
}
      30:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__bad_interrupt>
 */
void twi_setAddress(uint8_t address)
{
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
}
      34:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__bad_interrupt>

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
      38:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__bad_interrupt>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
      3c:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__bad_interrupt>
  size_t n = print(ifsh);
  n += println();
  return n;
}

size_t Print::print(const Printable& x)
      40:	0c 94 2b 1e 	jmp	0x3c56	; 0x3c56 <__vector_16>
	timer0_millis = m;
	timer0_overflow_count++;
}

unsigned long millis()
{
      44:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__bad_interrupt>
      48:	0c 94 50 1a 	jmp	0x34a0	; 0x34a0 <__vector_18>
      4c:	0c 94 9e 1a 	jmp	0x353c	; 0x353c <__vector_19>
      50:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__bad_interrupt>
      54:	0c 94 92 0c 	jmp	0x1924	; 0x1924 <__vector_21>
      58:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__bad_interrupt>
      5c:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__bad_interrupt>
      60:	0c 94 0d 18 	jmp	0x301a	; 0x301a <__vector_24>
      64:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__bad_interrupt>

00000068 <FHT8V_RFM22_Reg_Values>:
      68:	06 00 08 00 30 00 33 06 34 08 35 10 36 aa 37 cc     ....0.3.4.5.6.7.
      78:	38 cc 39 cc 6d 0b 6e 28 6f f5 70 20 71 21 72 20     8.9.m.n(o.p q!r 
      88:	73 00 74 00 75 73 76 64 77 00 79 23 7a 01 1c c1     s.t.usvdw.y#z...
      98:	1d 40 1e 0a 1f 03 20 96 21 00 22 da 23 74 24 00     .@.... .!.".#t$.
      a8:	25 dc 2a 24 2c 28 2d fa 2e 29 69 60 ff ff           %.*$,(-..)i`..

000000b6 <FHT8VPollSyncAndTX_Next(bool)::__c>:
      b6:	46 48 54 38 56 20 54 58 00                          FHT8V TX.

000000bf <doSync(bool)::__c>:
      bf:	46 48 54 38 56 20 53 59 4e 43 20 46 49 4e 41 4c     FHT8V SYNC FINAL
	...

000000d0 <doSync(bool)::__c>:
      d0:	46 48 54 38 56 20 53 59 4e 43 2e 2e 2e 00           FHT8V SYNC....

000000de <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)::__c>:
      de:	22 2b 22 3a 00                                      "+":.

000000e3 <SimpleStatsRotationBase::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)::__c>:
      e3:	22 40 22 3a 22 00                                   "@":".

000000e9 <SimpleStatsRotationBase::put(char const*, int)::__c>:
      e9:	54 6f 6f 20 6d 61 6e 79 20 6b 65 79 73 3a 20 00     Too many keys: .

000000f9 <ensureIDCreated(bool)::__c>:
      f9:	20 2e 2e 2e 20 00                                    ... .

000000ff <ensureIDCreated(bool)::__c>:
      ff:	49 6e 76 61 6c 69 64 20 62 79 74 65 20 00           Invalid byte .

0000010d <ensureIDCreated(bool)::__c>:
     10d:	53 65 74 74 69 6e 67 20 49 44 20 62 79 74 65 20     Setting ID byte 
	...

0000011e <RFM22CheckConnected()::__c>:
     11e:	52 46 4d 32 32 20 62 61 64 00                       RFM22 bad.

00000128 <setup::__c>:
     128:	21 42 61 64 20 49 44 3a 20 63 61 6e 27 74 20 72     !Bad ID: can't r
     138:	65 73 65 74 00                                      eset.

0000013d <setup::__c>:
     13d:	41 4c 54 45 52 4e 41 54 45 20 4d 41 49 4e 20 4c     ALTERNATE MAIN L
     14d:	4f 4f 50 2e 2e 2e 00                                OOP....

00000154 <setup::__c>:
     154:	52 65 73 65 74 73 3a 20 00                          Resets: .

0000015d <setup::__c>:
     15d:	44 45 42 55 47 00                                   DEBUG.

00000163 <setup::__c>:
     163:	0d 0a 4f 70 65 6e 54 52 56 3a 20 00                 ..OpenTRV: .

0000016f <optionalPOST()::__c>:
     16f:	52 61 64 69 6f 2c 20 78 74 61 6c 2c 20 62 75 74     Radio, xtal, but
     17f:	74 6f 6e 73 20 4f 4b 00                             tons OK.

00000187 <optionalPOST()::__c>:
     187:	58 74 61 6c 20 64 65 61 64 00                       Xtal dead.

00000191 <optionalPOST()::__c>:
     191:	62 75 74 74 6f 6e 20 73 74 75 63 6b 00              button stuck.

0000019e <posPOST(unsigned char, __FlashStringHelper const*)::__c>:
     19e:	3a 20 00                                            : .

000001a1 <posPOST(unsigned char, __FlashStringHelper const*)::__c>:
     1a1:	70 6f 73 50 4f 53 54 3a 20 00                       posPOST: .

000001ab <serialPrintlnBuildVersion()::__c>:
     1ab:	20 32 30 3a 32 30 3a 33 38 00                        20:20:38.

000001b5 <serialPrintlnBuildVersion()::__c>:
     1b5:	3b 20 63 6f 64 65 20 24 49 64 3a 20 56 30 70 32     ; code $Id: V0p2
     1c5:	5f 4d 61 69 6e 2e 69 6e 6f 20 34 33 34 31 20 32     _Main.ino 4341 2
     1d5:	30 31 35 2d 30 33 2d 31 37 20 31 38 3a 33 31 3a     015-03-17 18:31:
     1e5:	31 32 5a 20 64 61 6d 6f 6e 68 64 20 24 20 00        12Z damonhd $ .

000001f4 <serialPrintlnBuildVersion()::__c>:
     1f4:	62 6f 61 72 64 20 56 30 2e 32 20 52 45 56 00        board V0.2 REV.

00000203 <port_to_mode_PGM>:
     203:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000020d <port_to_output_PGM>:
     20d:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000217 <port_to_input_PGM>:
     217:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000221 <digital_pin_to_port_PGM>:
     221:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     231:	03 03 03 03                                         ....

00000235 <digital_pin_to_bit_mask_PGM>:
     235:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     245:	04 08 10 20                                         ... 

00000249 <digital_pin_to_timer_PGM>:
     249:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     259:	00 00 00 00 00                                      .....

0000025e <__ctors_start>:
     25e:	e5 04       	cpc	r14, r5
     260:	0e 0e       	add	r0, r30
     262:	09 10       	cpse	r0, r9
     264:	fc 13       	cpse	r31, r28
     266:	f1 14       	cp	r15, r1
     268:	a9 16       	cp	r10, r25
     26a:	67 1c       	adc	r6, r7

0000026c <__ctors_end>:
     26c:	11 24       	eor	r1, r1
     26e:	1f be       	out	0x3f, r1	; 63
     270:	cf ef       	ldi	r28, 0xFF	; 255
     272:	d8 e0       	ldi	r29, 0x08	; 8
     274:	de bf       	out	0x3e, r29	; 62
     276:	cd bf       	out	0x3d, r28	; 61

00000278 <__do_copy_data>:
     278:	11 e0       	ldi	r17, 0x01	; 1
     27a:	a0 e0       	ldi	r26, 0x00	; 0
     27c:	b1 e0       	ldi	r27, 0x01	; 1
     27e:	ee e4       	ldi	r30, 0x4E	; 78
     280:	fe e3       	ldi	r31, 0x3E	; 62
     282:	02 c0       	rjmp	.+4      	; 0x288 <.do_copy_data_start>

00000284 <.do_copy_data_loop>:
     284:	05 90       	lpm	r0, Z+
     286:	0d 92       	st	X+, r0

00000288 <.do_copy_data_start>:
     288:	a8 3f       	cpi	r26, 0xF8	; 248
     28a:	b1 07       	cpc	r27, r17
     28c:	d9 f7       	brne	.-10     	; 0x284 <.do_copy_data_loop>

0000028e <__do_clear_bss>:
     28e:	14 e0       	ldi	r17, 0x04	; 4
     290:	a8 ef       	ldi	r26, 0xF8	; 248
     292:	b1 e0       	ldi	r27, 0x01	; 1
     294:	01 c0       	rjmp	.+2      	; 0x298 <.do_clear_bss_start>

00000296 <.do_clear_bss_loop>:
     296:	1d 92       	st	X+, r1

00000298 <.do_clear_bss_start>:
     298:	ad 39       	cpi	r26, 0x9D	; 157
     29a:	b1 07       	cpc	r27, r17
     29c:	e1 f7       	brne	.-8      	; 0x296 <.do_clear_bss_loop>

0000029e <__do_global_ctors>:
     29e:	12 e0       	ldi	r17, 0x02	; 2
     2a0:	cc e6       	ldi	r28, 0x6C	; 108
     2a2:	d2 e0       	ldi	r29, 0x02	; 2
     2a4:	04 c0       	rjmp	.+8      	; 0x2ae <.do_global_ctors_start>

000002a6 <.do_global_ctors_loop>:
     2a6:	22 97       	sbiw	r28, 0x02	; 2
     2a8:	fe 01       	movw	r30, r28
     2aa:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <__tablejump__>

000002ae <.do_global_ctors_start>:
     2ae:	ce 35       	cpi	r28, 0x5E	; 94
     2b0:	d1 07       	cpc	r29, r17
     2b2:	c9 f7       	brne	.-14     	; 0x2a6 <.do_global_ctors_loop>
     2b4:	0e 94 bd 1c 	call	0x397a	; 0x397a <main>
     2b8:	0c 94 25 1f 	jmp	0x3e4a	; 0x3e4a <_exit>

000002bc <__bad_interrupt>:
     2bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002c0 <abort>:
     2c0:	81 e0       	ldi	r24, 0x01	; 1
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	f8 94       	cli
     2c6:	0c 94 25 1f 	jmp	0x3e4a	; 0x3e4a <_exit>

000002ca <memset>:
     2ca:	dc 01       	movw	r26, r24
     2cc:	01 c0       	rjmp	.+2      	; 0x2d0 <memset+0x6>
     2ce:	6d 93       	st	X+, r22
     2d0:	41 50       	subi	r20, 0x01	; 1
     2d2:	50 40       	sbci	r21, 0x00	; 0
     2d4:	e0 f7       	brcc	.-8      	; 0x2ce <memset+0x4>
     2d6:	08 95       	ret

000002d8 <strncpy>:
     2d8:	fb 01       	movw	r30, r22
     2da:	dc 01       	movw	r26, r24
     2dc:	41 50       	subi	r20, 0x01	; 1
     2de:	50 40       	sbci	r21, 0x00	; 0
     2e0:	48 f0       	brcs	.+18     	; 0x2f4 <strncpy+0x1c>
     2e2:	01 90       	ld	r0, Z+
     2e4:	0d 92       	st	X+, r0
     2e6:	00 20       	and	r0, r0
     2e8:	c9 f7       	brne	.-14     	; 0x2dc <strncpy+0x4>
     2ea:	01 c0       	rjmp	.+2      	; 0x2ee <strncpy+0x16>
     2ec:	1d 92       	st	X+, r1
     2ee:	41 50       	subi	r20, 0x01	; 1
     2f0:	50 40       	sbci	r21, 0x00	; 0
     2f2:	e0 f7       	brcc	.-8      	; 0x2ec <strncpy+0x14>
     2f4:	08 95       	ret

000002f6 <__eerd_word>:
     2f6:	df 92       	push	r13
     2f8:	ef 92       	push	r14
     2fa:	ff 92       	push	r15
     2fc:	0f 93       	push	r16
     2fe:	1f 93       	push	r17
     300:	7b 01       	movw	r14, r22
     302:	8c 01       	movw	r16, r24
     304:	fb 01       	movw	r30, r22
     306:	09 95       	icall
     308:	d8 2e       	mov	r13, r24
     30a:	c8 01       	movw	r24, r16
     30c:	01 96       	adiw	r24, 0x01	; 1
     30e:	f7 01       	movw	r30, r14
     310:	09 95       	icall
     312:	98 2f       	mov	r25, r24
     314:	8d 2d       	mov	r24, r13
     316:	1f 91       	pop	r17
     318:	0f 91       	pop	r16
     31a:	ff 90       	pop	r15
     31c:	ef 90       	pop	r14
     31e:	df 90       	pop	r13
     320:	08 95       	ret

00000322 <loopAlt()>:
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("*E"); // End-of-cycle sleep.
#endif

#if defined(WAKEUP_32768HZ_XTAL) // Normal 32768Hz crystal driving main timing.
#if !defined(MIN_ENERGY_BOOT)
  powerDownSerial(); // Ensure that serial I/O is off.
     322:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <powerDownSerial()>
  // Power down most stuff (except radio for hub RX).
  minimisePowerWithoutSleep();
     326:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <minimisePowerWithoutSleep()>
     32a:	02 c0       	rjmp	.+4      	; 0x330 <loopAlt()+0xe>
#endif
  static uint_fast8_t TIME_LSD; // Controller's notion of seconds within major cycle.
  uint_fast8_t newTLSD;
  while(TIME_LSD == (newTLSD = getSecondsLT()))
    {
    sleepUntilInt(); // Normal long minimal-power sleep until wake-up interrupt.
     32c:	0e 94 17 0c 	call	0x182e	; 0x182e <sleepPwrSaveWithBODDisabled()>
  minimisePowerWithoutSleep();
//  RFM22ModeStandbyAndClearState();
#endif
  static uint_fast8_t TIME_LSD; // Controller's notion of seconds within major cycle.
  uint_fast8_t newTLSD;
  while(TIME_LSD == (newTLSD = getSecondsLT()))
     330:	90 91 10 03 	lds	r25, 0x0310
     334:	80 91 f8 01 	lds	r24, 0x01F8
     338:	89 17       	cp	r24, r25
     33a:	c1 f3       	breq	.-16     	; 0x32c <loopAlt()+0xa>
    {
    sleepUntilInt(); // Normal long minimal-power sleep until wake-up interrupt.
//    DEBUG_SERIAL_PRINTLN_FLASHSTRING("w"); // Wakeup.
    }
  TIME_LSD = newTLSD;
     33c:	90 93 f8 01 	sts	0x01F8, r25

//  // Force any pending output before return / possible UART power-down.
//  flushSerialSCTSensitive();
//
//  if(neededWaking) { powerDownSerial(); }
  }
     340:	08 95       	ret

00000342 <POSTalt()>:
// Can abort with panic() if need be.
void POSTalt()
  {
#if defined(USE_MODULE_RFM22RADIOSIMPLE) 
  // Initialise the radio, if configured, ASAP, because it can suck a lot of power until properly initialised.
  RFM22PowerOnInit();
     342:	0e 94 09 11 	call	0x2212	; 0x2212 <RFM22PowerOnInit()>
  // Check that the radio is correctly connected; panic if not...
  if(!RFM22CheckConnected()) { panic(); }
     346:	0e 94 ad 11 	call	0x235a	; 0x235a <RFM22CheckConnected()>
     34a:	88 23       	and	r24, r24
     34c:	11 f4       	brne	.+4      	; 0x352 <POSTalt()+0x10>
     34e:	0e 94 33 14 	call	0x2866	; 0x2866 <panic()>
  // Configure the radio.
  RFM22RegisterBlockSetup(FHT8V_RFM22_Reg_Values);
     352:	88 e6       	ldi	r24, 0x68	; 104
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <RFM22RegisterBlockSetup(unsigned char const (*) [2])>
  // Put the radio in low-power standby mode.
  RFM22ModeStandbyAndClearState();
     35a:	0e 94 65 11 	call	0x22ca	; 0x22ca <RFM22ModeStandbyAndClearState()>
#endif

  // Force initialisation into low-power state.
  const int heat = TemperatureC16.read();
     35e:	8f e1       	ldi	r24, 0x1F	; 31
     360:	93 e0       	ldi	r25, 0x03	; 3
     362:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <RoomTemperatureC16::read()>





  }
     366:	08 95       	ret

00000368 <SimpleTSUint8Sensor::get() const>:
     368:	fc 01       	movw	r30, r24
     36a:	82 81       	ldd	r24, Z+2	; 0x02
     36c:	08 95       	ret

0000036e <SimpleTSUint8Actuator::get() const>:
  public:
    // Return last value fetched by read(); undefined before first read().
    // Usually fast.
    // Often likely to be thread-safe or usable within ISRs (Interrupt Service Routines),
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual uint8_t get() const { return(value); }
     36e:	fc 01       	movw	r30, r24
     370:	82 81       	ldd	r24, Z+2	; 0x02
     372:	08 95       	ret

00000374 <AbstractRadValve::isValid(unsigned char) const>:
// Implementations may require poll() called at a fixed rate.
class AbstractRadValve : public SimpleTSUint8Actuator
  {
  public:
    // Returns true if this sensor reading value passed is valid, eg in range [0,100].
    virtual bool isValid(const uint8_t value) const { return(value <= 100); }
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	65 36       	cpi	r22, 0x65	; 101
     378:	08 f4       	brcc	.+2      	; 0x37c <AbstractRadValve::isValid(unsigned char) const+0x8>
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	08 95       	ret

0000037e <AbstractRadValve::isCalibrated() const>:

    // Returns true iff not (re)calibrating/(re)initialising/(re)syncing.
    // By default there is no recalibration step.
    virtual bool isCalibrated() const { return(true); }
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	08 95       	ret

00000382 <ModelledRadValve::preferredPollInterval_s() const>:
    // Potentially expensive/slow.
    virtual uint8_t read() { computeCallForHeat(); return(value); }

    // Returns preferred poll interval (in seconds); non-zero.
    // Must be polled at near constant rate, about once per minute.
    virtual uint8_t preferredPollInterval_s() const { return(60); }
     382:	8c e3       	ldi	r24, 0x3C	; 60
     384:	08 95       	ret

00000386 <ModelledRadValve::tag() const>:

    // Returns a suggested (JSON) tag/field/key name including units of get(); NULL means no recommended tag.
    // The lifetime of the pointed-to text must be at least that of the Sensor instance.
    virtual const char *tag() const { return("v|%"); }
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	91 e0       	ldi	r25, 0x01	; 1
     38a:	08 95       	ret

0000038c <ModelledRadValve::getMinPercentOpen() const>:
// At the boiler hub this is also the threshold percentage-open on eavesdropped requests that will call for heat.
// If no override is set then DEFAULT_MIN_VALVE_PC_REALLY_OPEN is used.
// NOTE: raising this value temporarily (and shutting down the boiler immediately if possible) is one way to implement dynamic demand.
uint8_t ModelledRadValve::getMinValvePcReallyOpen()
  {
  if(0 != mVPRO_cache) { return(mVPRO_cache); } // Return cached value if possible.
     38c:	90 91 35 02 	lds	r25, 0x0235
     390:	99 23       	and	r25, r25
     392:	79 f4       	brne	.+30     	; 0x3b2 <ModelledRadValve::getMinPercentOpen() const+0x26>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     394:	f9 99       	sbic	0x1f, 1	; 31
     396:	fe cf       	rjmp	.-4      	; 0x394 <ModelledRadValve::getMinPercentOpen() const+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     398:	83 e1       	ldi	r24, 0x13	; 19
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	92 bd       	out	0x22, r25	; 34
     39e:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     3a0:	f8 9a       	sbi	0x1f, 0	; 31
     3a2:	90 b5       	in	r25, 0x20	; 32
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_MIN_VALVE_PC_REALLY_OPEN);
  const uint8_t result = ((stored > 0) && (stored <= 100)) ? stored : DEFAULT_MIN_VALVE_PC_REALLY_OPEN;
     3a4:	89 2f       	mov	r24, r25
     3a6:	81 50       	subi	r24, 0x01	; 1
     3a8:	84 36       	cpi	r24, 0x64	; 100
     3aa:	08 f0       	brcs	.+2      	; 0x3ae <ModelledRadValve::getMinPercentOpen() const+0x22>
     3ac:	9f e0       	ldi	r25, 0x0F	; 15
  mVPRO_cache = result; // Cache it.
     3ae:	90 93 35 02 	sts	0x0235, r25
    // then this should return true if any of the valves are (significantly) open.
    virtual bool isControlledValveReallyOpen() const;

    // Get estimated minimum percentage open for significant flow [1,99] for this device.
    // Return global node value.
    virtual uint8_t getMinPercentOpen() const { return(getMinValvePcReallyOpen()); }
     3b2:	89 2f       	mov	r24, r25
     3b4:	08 95       	ret

000003b6 <OccupancyTracker::isValid(unsigned char) const>:
    // Poll at a fixed rate.
    virtual uint8_t read();

    // Returns true if this sensor reading value passed is potentially valid, eg in-range.
    // True if in range [0,100].
    virtual bool isValid(uint8_t value) const { return(value <= 100); }
     3b6:	80 e0       	ldi	r24, 0x00	; 0
     3b8:	65 36       	cpi	r22, 0x65	; 101
     3ba:	08 f4       	brcc	.+2      	; 0x3be <OccupancyTracker::isValid(unsigned char) const+0x8>
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	08 95       	ret

000003c0 <OccupancyTracker::preferredPollInterval_s() const>:

    // This routine should be called once per minute.
    virtual uint8_t preferredPollInterval_s() const { return(60); }
     3c0:	8c e3       	ldi	r24, 0x3C	; 60
     3c2:	08 95       	ret

000003c4 <OccupancyTracker::tag() const>:

    // Recommended JSON tag for full value; not NULL.
    virtual const char *tag() const { return("occ|%"); }
     3c4:	84 e0       	ldi	r24, 0x04	; 4
     3c6:	91 e0       	ldi	r25, 0x01	; 1
     3c8:	08 95       	ret

000003ca <setWarmModeDebounced(bool)>:
  DEBUG_SERIAL_PRINT_FLASHSTRING("Call to setWarmModeDebounced(");
  DEBUG_SERIAL_PRINT(warm);
  DEBUG_SERIAL_PRINT_FLASHSTRING(")");
  DEBUG_SERIAL_PRINTLN();
#endif
  isWarmMode = warm;
     3ca:	80 93 7c 02 	sts	0x027C, r24
#ifdef SUPPORT_BAKE
  if(!warm) { cancelBakeDebounced(); }
     3ce:	88 23       	and	r24, r24
     3d0:	11 f4       	brne	.+4      	; 0x3d6 <setWarmModeDebounced(bool)+0xc>
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// Should be only be called once 'debounced' if coming from a button press for example.
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBakeDebounced() { bakeCountdownM = 0; }
     3d2:	10 92 79 02 	sts	0x0279, r1
     3d6:	08 95       	ret

000003d8 <startBakeDebounced()>:
// Start/restart 'BAKE' mode and timeout.
// Should be only be called once 'debounced' if coming from a button press for example.
void startBakeDebounced() { isWarmMode = true; bakeCountdownM = BAKE_MAX_M; }
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	80 93 7c 02 	sts	0x027C, r24
     3de:	8e e1       	ldi	r24, 0x1E	; 30
     3e0:	80 93 79 02 	sts	0x0279, r24
     3e4:	08 95       	ret

000003e6 <getWARMTargetC()>:
     3e6:	20 91 25 03 	lds	r18, 0x0325
  // Cached input and result values; initially zero.
  static uint8_t potLast;
  static uint8_t resultLast;
  // Force recomputation if pot value changed
  // or apparently no calc done yet (unlikely/impossible zero cached result).
  if((potLast != pot) || (0 == resultLast))
     3ea:	80 91 7b 02 	lds	r24, 0x027B
     3ee:	82 17       	cp	r24, r18
     3f0:	21 f4       	brne	.+8      	; 0x3fa <getWARMTargetC()+0x14>
     3f2:	80 91 7a 02 	lds	r24, 0x027A
     3f6:	88 23       	and	r24, r24
     3f8:	99 f4       	brne	.+38     	; 0x420 <getWARMTargetC()+0x3a>
  const uint8_t range = TEMP_SCALE_MAX - TEMP_SCALE_MIN + 1;
  const uint8_t band = 256 / range; // Width of band for each degree C...

  // If there are is relatively small number of distinct temperature values
  // then compute result iteratively...
  if(pot >= 256 - band) { return(TEMP_SCALE_MAX); } // At top... (optimisation / robustness)
     3fa:	2c 3d       	cpi	r18, 0xDC	; 220
     3fc:	10 f0       	brcs	.+4      	; 0x402 <getWARMTargetC()+0x1c>
     3fe:	86 e1       	ldi	r24, 0x16	; 22
     400:	0b c0       	rjmp	.+22     	; 0x418 <getWARMTargetC()+0x32>
  if(pot < band) { return(TEMP_SCALE_MIN); } // At bottom... (optimisation / robustness)
     402:	24 32       	cpi	r18, 0x24	; 36
     404:	10 f4       	brcc	.+4      	; 0x40a <getWARMTargetC()+0x24>
     406:	80 e1       	ldi	r24, 0x10	; 16
     408:	07 c0       	rjmp	.+14     	; 0x418 <getWARMTargetC()+0x32>
     40a:	98 e4       	ldi	r25, 0x48	; 72
     40c:	81 e1       	ldi	r24, 0x11	; 17
     40e:	02 c0       	rjmp	.+4      	; 0x414 <getWARMTargetC()+0x2e>
  if(range < 10)
    {
    uint8_t result = TEMP_SCALE_MIN+1;
    for(uint8_t ppot = band<<1; ppot < pot; ++result) { ppot += band; }
     410:	9c 5d       	subi	r25, 0xDC	; 220
     412:	8f 5f       	subi	r24, 0xFF	; 255
     414:	92 17       	cp	r25, r18
     416:	e0 f3       	brcs	.-8      	; 0x410 <getWARMTargetC()+0x2a>
  // or apparently no calc done yet (unlikely/impossible zero cached result).
  if((potLast != pot) || (0 == resultLast))
    {
    const uint8_t result = computeWARMTargetC(pot);
    // Cache input/result.
    resultLast = result;
     418:	80 93 7a 02 	sts	0x027A, r24
    potLast = pot;
     41c:	20 93 7b 02 	sts	0x027B, r18
    return(result);
    }

  // Return cached result.
  return(resultLast);
  }
     420:	08 95       	ret

00000422 <hasEcoBias()>:
// Several system parameters are adjusted depending on the bias,
// with 'eco' slanted toward saving energy, eg with lower target temperatures and shorter on-times.
#ifndef hasEcoBias // If not a macro...
// True if WARM temperature at/below halfway mark between eco and comfort levels.
// Midpoint should be just in eco part to provide a system bias toward eco.
bool hasEcoBias() { return(getWARMTargetC() <= TEMP_SCALE_MID); }
     422:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <getWARMTargetC()>
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	84 31       	cpi	r24, 0x14	; 20
     42a:	08 f4       	brcc	.+2      	; 0x42e <hasEcoBias()+0xc>
     42c:	91 e0       	ldi	r25, 0x01	; 1
     42e:	89 2f       	mov	r24, r25
     430:	08 95       	ret

00000432 <getFROSTTargetC()>:
#if defined(TEMP_POT_AVAILABLE)
// Derived from temperature pot position.
uint8_t getFROSTTargetC()
  {
  // Prevent falling to lowest frost temperature if relative humidity is high (eg to avoid mould).
  const uint8_t result = (!hasEcoBias() || (RelHumidity.isAvailable() && RelHumidity.isRHHighWithHyst())) ? BIASCOM_FROST : BIASECO_FROST;
     432:	0e 94 11 02 	call	0x422	; 0x422 <hasEcoBias()>
     436:	88 23       	and	r24, r24
     438:	11 f0       	breq	.+4      	; 0x43e <getFROSTTargetC()+0xc>
     43a:	27 e0       	ldi	r18, 0x07	; 7
     43c:	01 c0       	rjmp	.+2      	; 0x440 <getFROSTTargetC()+0xe>
     43e:	2c e0       	ldi	r18, 0x0C	; 12
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     440:	f9 99       	sbic	0x1f, 1	; 31
     442:	fe cf       	rjmp	.-4      	; 0x440 <getFROSTTargetC()+0xe>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     444:	8e e0       	ldi	r24, 0x0E	; 14
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	92 bd       	out	0x22, r25	; 34
     44a:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     44c:	f8 9a       	sbi	0x1f, 0	; 31
     44e:	90 b5       	in	r25, 0x20	; 32
#if defined(SETTABLE_TARGET_TEMPERATURES)
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_FROST_C);
  // If stored value is set and in bounds and higher than computed value then use stored value instead.
  if((stored >= MIN_TARGET_C) && (stored <= MAX_TARGET_C) && (stored > result)) { return(stored); }
     450:	89 2f       	mov	r24, r25
     452:	85 50       	subi	r24, 0x05	; 5
     454:	8b 35       	cpi	r24, 0x5B	; 91
     456:	10 f0       	brcs	.+4      	; 0x45c <getFROSTTargetC()+0x2a>
     458:	82 2f       	mov	r24, r18
     45a:	08 95       	ret
     45c:	89 2f       	mov	r24, r25
     45e:	92 17       	cp	r25, r18
     460:	08 f4       	brcc	.+2      	; 0x464 <getFROSTTargetC()+0x32>
     462:	82 2f       	mov	r24, r18
#endif
  return(result);
  }
     464:	08 95       	ret

00000466 <OccupancyTracker::read()>:
#elif OCCUPATION_TIMEOUT_M <= 100
#define OCCCP_SHIFT 0
#endif

// Update notion of occupancy confidence.
uint8_t OccupancyTracker::read()
     466:	df 93       	push	r29
     468:	cf 93       	push	r28
     46a:	00 d0       	rcall	.+0      	; 0x46c <OccupancyTracker::read()+0x6>
     46c:	cd b7       	in	r28, 0x3d	; 61
     46e:	de b7       	in	r29, 0x3e	; 62
     470:	fc 01       	movw	r30, r24
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
     472:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     474:	f8 94       	cli
    {
    // Compute as percentage.
    const uint8_t newValue = (0 == occupationCountdownM) ? 0 :
        fnmin((uint8_t)((uint8_t)100 - (uint8_t)((((uint8_t)OCCUPATION_TIMEOUT_M) - occupationCountdownM) << OCCCP_SHIFT)), (uint8_t)100);
     476:	83 81       	ldd	r24, Z+3	; 0x03
     478:	88 23       	and	r24, r24
     47a:	11 f4       	brne	.+4      	; 0x480 <OccupancyTracker::read()+0x1a>
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	0d c0       	rjmp	.+26     	; 0x49a <OccupancyTracker::read()+0x34>
     480:	83 81       	ldd	r24, Z+3	; 0x03
     482:	92 e3       	ldi	r25, 0x32	; 50
     484:	98 1b       	sub	r25, r24
     486:	99 0f       	add	r25, r25
     488:	84 e6       	ldi	r24, 0x64	; 100
     48a:	38 2f       	mov	r19, r24
     48c:	39 1b       	sub	r19, r25
     48e:	93 2f       	mov	r25, r19
     490:	39 83       	std	Y+1, r19	; 0x01
     492:	8a 83       	std	Y+2, r24	; 0x02




// Templated function versions of min/max that do not evaluate the arguments twice.
template <class T> const T& fnmin(const T& a, const T& b) { return((a>b)?b:a); }
     494:	35 36       	cpi	r19, 0x65	; 101
     496:	08 f0       	brcs	.+2      	; 0x49a <OccupancyTracker::read()+0x34>
     498:	94 e6       	ldi	r25, 0x64	; 100
    value = newValue;
     49a:	92 83       	std	Z+2, r25	; 0x02
    // Run down occupation timer (or run up vacancy time) if need be.
    if(occupationCountdownM > 0) { --occupationCountdownM; vacancyM = 0; vacancyH = 0; }
     49c:	83 81       	ldd	r24, Z+3	; 0x03
     49e:	88 23       	and	r24, r24
     4a0:	31 f0       	breq	.+12     	; 0x4ae <OccupancyTracker::read()+0x48>
     4a2:	83 81       	ldd	r24, Z+3	; 0x03
     4a4:	81 50       	subi	r24, 0x01	; 1
     4a6:	83 83       	std	Z+3, r24	; 0x03
     4a8:	16 82       	std	Z+6, r1	; 0x06
     4aa:	15 82       	std	Z+5, r1	; 0x05
     4ac:	0b c0       	rjmp	.+22     	; 0x4c4 <OccupancyTracker::read()+0x5e>
    else if(vacancyH < 0xffU) { if(++vacancyM >= 60) { vacancyM = 0; ++vacancyH; } }
     4ae:	95 81       	ldd	r25, Z+5	; 0x05
     4b0:	9f 3f       	cpi	r25, 0xFF	; 255
     4b2:	41 f0       	breq	.+16     	; 0x4c4 <OccupancyTracker::read()+0x5e>
     4b4:	86 81       	ldd	r24, Z+6	; 0x06
     4b6:	8f 5f       	subi	r24, 0xFF	; 255
     4b8:	86 83       	std	Z+6, r24	; 0x06
     4ba:	8c 33       	cpi	r24, 0x3C	; 60
     4bc:	18 f0       	brcs	.+6      	; 0x4c4 <OccupancyTracker::read()+0x5e>
     4be:	16 82       	std	Z+6, r1	; 0x06
     4c0:	9f 5f       	subi	r25, 0xFF	; 255
     4c2:	95 83       	std	Z+5, r25	; 0x05
    // Run down 'recent activity' timer.
    if(activityCountdownM > 0) { --activityCountdownM; }
     4c4:	84 81       	ldd	r24, Z+4	; 0x04
     4c6:	88 23       	and	r24, r24
     4c8:	19 f0       	breq	.+6      	; 0x4d0 <OccupancyTracker::read()+0x6a>
     4ca:	84 81       	ldd	r24, Z+4	; 0x04
     4cc:	81 50       	subi	r24, 0x01	; 1
     4ce:	84 83       	std	Z+4, r24	; 0x04
    return(value);
     4d0:	82 81       	ldd	r24, Z+2	; 0x02
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     4d2:	2f bf       	out	0x3f, r18	; 63
    }
  }
     4d4:	0f 90       	pop	r0
     4d6:	0f 90       	pop	r0
     4d8:	cf 91       	pop	r28
     4da:	df 91       	pop	r29
     4dc:	08 95       	ret

000004de <OccupancyTracker::markAsPossiblyOccupied()>:
// Doesn't force the room to appear recently occupied.
// If the hardware allows this may immediately turn on the main GUI LED until normal GUI reverts it,
// at least periodically.
// Probably do not call on manual control operation to avoid interfering with UI operation.
// Thread-safe.
void OccupancyTracker::markAsPossiblyOccupied()
     4de:	df 93       	push	r29
     4e0:	cf 93       	push	r28
     4e2:	00 d0       	rcall	.+0      	; 0x4e4 <OccupancyTracker::markAsPossiblyOccupied()+0x6>
     4e4:	cd b7       	in	r28, 0x3d	; 61
     4e6:	de b7       	in	r29, 0x3e	; 62
     4e8:	fc 01       	movw	r30, r24
  {
//  if(0 == activityCountdownM) // Only flash the UI at start of external activity to limit flashing.
    { LED_HEATCALL_ON_ISR_SAFE(); }
     4ea:	5c 98       	cbi	0x0b, 4	; 11
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
     4ec:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     4ee:	f8 94       	cli
    {
    occupationCountdownM = fnmax((uint8_t)occupationCountdownM, (uint8_t)(OCCUPATION_TIMEOUT_1_M));
     4f0:	93 81       	ldd	r25, Z+3	; 0x03
template <class T> const T& fnmax(const T& a, const T& b) { return((a<b)?b:a); }
     4f2:	91 32       	cpi	r25, 0x21	; 33
     4f4:	10 f4       	brcc	.+4      	; 0x4fa <OccupancyTracker::markAsPossiblyOccupied()+0x1c>
     4f6:	81 e2       	ldi	r24, 0x21	; 33
     4f8:	01 c0       	rjmp	.+2      	; 0x4fc <OccupancyTracker::markAsPossiblyOccupied()+0x1e>
     4fa:	89 2f       	mov	r24, r25
     4fc:	83 83       	std	Z+3, r24	; 0x03
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     4fe:	2f bf       	out	0x3f, r18	; 63
     500:	81 e2       	ldi	r24, 0x21	; 33
     502:	8a 83       	std	Y+2, r24	; 0x02
     504:	99 83       	std	Y+1, r25	; 0x01
    }
  activityCountdownM = 2;
     506:	82 e0       	ldi	r24, 0x02	; 2
     508:	84 83       	std	Z+4, r24	; 0x04
  }
     50a:	0f 90       	pop	r0
     50c:	0f 90       	pop	r0
     50e:	cf 91       	pop	r28
     510:	df 91       	pop	r29
     512:	08 95       	ret

00000514 <ModelledRadValve::getMinValvePcReallyOpen()>:
// At the boiler hub this is also the threshold percentage-open on eavesdropped requests that will call for heat.
// If no override is set then DEFAULT_MIN_VALVE_PC_REALLY_OPEN is used.
// NOTE: raising this value temporarily (and shutting down the boiler immediately if possible) is one way to implement dynamic demand.
uint8_t ModelledRadValve::getMinValvePcReallyOpen()
  {
  if(0 != mVPRO_cache) { return(mVPRO_cache); } // Return cached value if possible.
     514:	80 91 35 02 	lds	r24, 0x0235
     518:	88 23       	and	r24, r24
     51a:	89 f4       	brne	.+34     	; 0x53e <ModelledRadValve::getMinValvePcReallyOpen()+0x2a>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     51c:	f9 99       	sbic	0x1f, 1	; 31
     51e:	fe cf       	rjmp	.-4      	; 0x51c <ModelledRadValve::getMinValvePcReallyOpen()+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     520:	83 e1       	ldi	r24, 0x13	; 19
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	92 bd       	out	0x22, r25	; 34
     526:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     528:	f8 9a       	sbi	0x1f, 0	; 31
     52a:	90 b5       	in	r25, 0x20	; 32
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_MIN_VALVE_PC_REALLY_OPEN);
  const uint8_t result = ((stored > 0) && (stored <= 100)) ? stored : DEFAULT_MIN_VALVE_PC_REALLY_OPEN;
     52c:	89 2f       	mov	r24, r25
     52e:	81 50       	subi	r24, 0x01	; 1
     530:	84 36       	cpi	r24, 0x64	; 100
     532:	10 f0       	brcs	.+4      	; 0x538 <ModelledRadValve::getMinValvePcReallyOpen()+0x24>
     534:	8f e0       	ldi	r24, 0x0F	; 15
     536:	01 c0       	rjmp	.+2      	; 0x53a <ModelledRadValve::getMinValvePcReallyOpen()+0x26>
     538:	89 2f       	mov	r24, r25
  mVPRO_cache = result; // Cache it.
     53a:	80 93 35 02 	sts	0x0235, r24
  return(result);
  }
     53e:	08 95       	ret

00000540 <ModelledRadValveState::getSmoothedRecent()>:
  inputState.setReferenceTemperatures(TemperatureC16.get());
  callingForHeat = (newTarget >= (inputState.refTempC16 >> 4));
  }

// Get smoothed raw/unadjusted temperature from the most recent samples.
int ModelledRadValveState::getSmoothedRecent()
     540:	fc 01       	movw	r30, r24
     542:	b5 96       	adiw	r30, 0x25	; 37
     544:	40 e1       	ldi	r20, 0x10	; 16
     546:	20 e0       	ldi	r18, 0x00	; 0
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	05 c0       	rjmp	.+10     	; 0x556 <ModelledRadValveState::getSmoothedRecent()+0x16>
template<size_t N> int smallIntMean(const int data[N])
  {
  // Extract mean.
  // Assume values and sum will be nowhere near the limits.
  int sum = 0;
  for(int8_t i = N; --i >= 0; ) { sum += data[i]; }
     54c:	80 81       	ld	r24, Z
     54e:	91 81       	ldd	r25, Z+1	; 0x01
     550:	28 0f       	add	r18, r24
     552:	39 1f       	adc	r19, r25
     554:	32 97       	sbiw	r30, 0x02	; 2
     556:	41 50       	subi	r20, 0x01	; 1
     558:	c8 f7       	brcc	.-14     	; 0x54c <ModelledRadValveState::getSmoothedRecent()+0xc>
     55a:	c9 01       	movw	r24, r18
     55c:	08 96       	adiw	r24, 0x08	; 8
     55e:	60 e1       	ldi	r22, 0x10	; 16
     560:	70 e0       	ldi	r23, 0x00	; 0
     562:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <__divmodhi4>
     566:	cb 01       	movw	r24, r22
  { return(smallIntMean<filterLength>(prevRawTempC16)); }
     568:	08 95       	ret

0000056a <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)>:
// Is always willing to turn off quickly, but on slowly (AKA "slow start" algorithm),
// and tries to eliminate unnecessary 'hunting' which makes noise and uses actuator energy.
// Nominally called at a regular rate, once per minute.
// All inputState values should be set to sensible values before starting.
// Usually called by tick() which does required state updates afterwards.
uint8_t ModelledRadValve::computeRequiredTRVPercentOpen(const uint8_t valvePCOpen, const struct ModelledRadValveInputState &inputState, struct ModelledRadValveState &retainedState)
     56a:	ff 92       	push	r15
     56c:	0f 93       	push	r16
     56e:	1f 93       	push	r17
     570:	cf 93       	push	r28
     572:	df 93       	push	r29
     574:	f8 2e       	mov	r15, r24
     576:	eb 01       	movw	r28, r22
     578:	8a 01       	movw	r16, r20
DEBUG_SERIAL_PRINT(inputState.refTempC);
DEBUG_SERIAL_PRINTLN();
#endif

  // Possibly-adjusted and.or smoothed temperature to use for targetting.
  const int adjustedTempC16 = retainedState.isFiltering ? (retainedState.getSmoothedRecent() + refTempOffsetC16) : inputState.refTempC16;
     57a:	da 01       	movw	r26, r20
     57c:	11 96       	adiw	r26, 0x01	; 1
     57e:	8c 91       	ld	r24, X
     580:	88 23       	and	r24, r24
     582:	39 f0       	breq	.+14     	; 0x592 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x28>
     584:	ca 01       	movw	r24, r20
     586:	0e 94 a0 02 	call	0x540	; 0x540 <ModelledRadValveState::getSmoothedRecent()>
     58a:	9c 01       	movw	r18, r24
     58c:	28 5f       	subi	r18, 0xF8	; 248
     58e:	3f 4f       	sbci	r19, 0xFF	; 255
     590:	02 c0       	rjmp	.+4      	; 0x596 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x2c>
     592:	2f 81       	ldd	r18, Y+7	; 0x07
     594:	38 85       	ldd	r19, Y+8	; 0x08
  const int8_t adjustedTempC = (adjustedTempC16 >> 4);

  // (Well) under temp target: open valve up.
  if(adjustedTempC < inputState.targetTempC)
     596:	c9 01       	movw	r24, r18
     598:	34 e0       	ldi	r19, 0x04	; 4
     59a:	95 95       	asr	r25
     59c:	87 95       	ror	r24
     59e:	3a 95       	dec	r19
     5a0:	e1 f7       	brne	.-8      	; 0x59a <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x30>
     5a2:	e8 2f       	mov	r30, r24
     5a4:	ff 27       	eor	r31, r31
     5a6:	e7 fd       	sbrc	r30, 7
     5a8:	f0 95       	com	r31
     5aa:	88 81       	ld	r24, Y
     5ac:	48 2f       	mov	r20, r24
     5ae:	50 e0       	ldi	r21, 0x00	; 0
     5b0:	e4 17       	cp	r30, r20
     5b2:	f5 07       	cpc	r31, r21
     5b4:	0c f0       	brlt	.+2      	; 0x5b8 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x4e>
     5b6:	53 c0       	rjmp	.+166    	; 0x65e <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0xf4>
//DEBUG_SERIAL_PRINTLN_FLASHSTRING("under temp");
    // Limit valve open slew to help minimise overshoot and actuator noise.
    // This should also reduce nugatory setting changes when occupancy (etc) is fluctuating.
    // Thus it may take several minutes to turn the radiator fully on,
    // though probably opening the first ~33% will allow near-maximum heat output in practice.
    if(valvePCOpen < inputState.maxPCOpen)
     5b8:	6a 81       	ldd	r22, Y+2	; 0x02
     5ba:	f6 16       	cp	r15, r22
     5bc:	08 f0       	brcs	.+2      	; 0x5c0 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x56>
     5be:	30 c1       	rjmp	.+608    	; 0x820 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x2b6>
      {
#if defined(SUPPORT_BAKE)
      // If room is well below target and in BAKE mode then immediately open to maximum.
      // Need debounced bake mode value to avoid spurious slamming open of the valve as the user cycles through modes.
      if(inputState.inBakeMode) { return(inputState.maxPCOpen); }
     5c0:	8e 81       	ldd	r24, Y+6	; 0x06
     5c2:	88 23       	and	r24, r24
     5c4:	09 f0       	breq	.+2      	; 0x5c8 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x5e>
     5c6:	2c c1       	rjmp	.+600    	; 0x820 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x2b6>
#endif

      // Reduce valve hunting: defer re-opening if recently closed.
      if(retainedState.dontTurnup()) { return(valvePCOpen); }
     5c8:	d8 01       	movw	r26, r16
     5ca:	15 96       	adiw	r26, 0x05	; 5
     5cc:	8c 91       	ld	r24, X
     5ce:	88 23       	and	r24, r24
     5d0:	09 f0       	breq	.+2      	; 0x5d4 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x6a>
     5d2:	23 c1       	rjmp	.+582    	; 0x81a <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x2b0>
               // Don't work so hard to reach and hold target temp with wide deadband
               // (widened eg because room is dark, or this is a pre-warm in FROST mode, or temperature is gyrating)
               // and not comfort mode nor massively below target temp.
               (inputState.widenDeadband && inputState.hasEcoBias && (adjustedTempC >= (uint8_t)fnmax(inputState.targetTempC-(int)SETBACK_FULL, (int)MIN_TARGET_C))) ||
#endif
               (retainedState.isFiltering && (retainedState.getRawDelta() > 0)))); // FIXME: maybe redundant w/ GLACIAL_ON_WITH_WIDE_DEADBAND and widenDeadband set when isFiltering is true 
     5d4:	8c 81       	ldd	r24, Y+4	; 0x04
     5d6:	88 23       	and	r24, r24
     5d8:	09 f0       	breq	.+2      	; 0x5dc <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x72>
     5da:	16 c1       	rjmp	.+556    	; 0x808 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x29e>
     5dc:	79 81       	ldd	r23, Y+1	; 0x01
     5de:	f7 16       	cp	r15, r23
     5e0:	08 f4       	brcc	.+2      	; 0x5e4 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x7a>
     5e2:	25 c1       	rjmp	.+586    	; 0x82e <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x2c4>
     5e4:	8b 81       	ldd	r24, Y+3	; 0x03
     5e6:	88 23       	and	r24, r24
     5e8:	79 f0       	breq	.+30     	; 0x608 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x9e>
     5ea:	8d 81       	ldd	r24, Y+5	; 0x05
     5ec:	88 23       	and	r24, r24
     5ee:	61 f0       	breq	.+24     	; 0x608 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x9e>
     5f0:	ca 01       	movw	r24, r20
     5f2:	03 97       	sbiw	r24, 0x03	; 3
     5f4:	85 30       	cpi	r24, 0x05	; 5
     5f6:	91 05       	cpc	r25, r1
     5f8:	14 f4       	brge	.+4      	; 0x5fe <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x94>
     5fa:	85 e0       	ldi	r24, 0x05	; 5
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	e8 17       	cp	r30, r24
     602:	f9 07       	cpc	r31, r25
     604:	0c f0       	brlt	.+2      	; 0x608 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x9e>
     606:	00 c1       	rjmp	.+512    	; 0x808 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x29e>
     608:	d8 01       	movw	r26, r16
     60a:	11 96       	adiw	r26, 0x01	; 1
     60c:	8c 91       	ld	r24, X
     60e:	11 97       	sbiw	r26, 0x01	; 1
     610:	88 23       	and	r24, r24
     612:	09 f4       	brne	.+2      	; 0x616 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0xac>
     614:	0c c1       	rjmp	.+536    	; 0x82e <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x2c4>
     616:	17 96       	adiw	r26, 0x07	; 7
     618:	8d 91       	ld	r24, X+
     61a:	9c 91       	ld	r25, X
     61c:	18 97       	sbiw	r26, 0x08	; 8
     61e:	19 96       	adiw	r26, 0x09	; 9
     620:	2d 91       	ld	r18, X+
     622:	3c 91       	ld	r19, X
     624:	1a 97       	sbiw	r26, 0x0a	; 10
     626:	82 1b       	sub	r24, r18
     628:	93 0b       	sbc	r25, r19
     62a:	18 16       	cp	r1, r24
     62c:	19 06       	cpc	r1, r25
     62e:	0c f4       	brge	.+2      	; 0x632 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0xc8>
     630:	eb c0       	rjmp	.+470    	; 0x808 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x29e>
     632:	fd c0       	rjmp	.+506    	; 0x82e <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x2c4>

      // Ensure that the valve opens quickly from cold for acceptable response.
      // Less fast if already moderately open or in the degree below target.
      const uint8_t slewRate =
          ((valvePCOpen >= DEFAULT_VALVE_PC_MODERATELY_OPEN) || (adjustedTempC == inputState.targetTempC-1)) ?
              TRV_MAX_SLEW_PC_PER_MIN : TRV_SLEW_PC_PER_MIN_FAST;
     634:	41 50       	subi	r20, 0x01	; 1
     636:	50 40       	sbci	r21, 0x00	; 0
     638:	e4 17       	cp	r30, r20
     63a:	f5 07       	cpc	r31, r21
     63c:	11 f0       	breq	.+4      	; 0x642 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0xd8>
     63e:	2a e0       	ldi	r18, 0x0A	; 10
     640:	01 c0       	rjmp	.+2      	; 0x644 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0xda>
     642:	25 e0       	ldi	r18, 0x05	; 5
     644:	42 2f       	mov	r20, r18
     646:	27 17       	cp	r18, r23
     648:	08 f4       	brcc	.+2      	; 0x64c <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0xe2>
     64a:	47 2f       	mov	r20, r23
      const uint8_t minOpenFromCold = fnmax(slewRate, inputState.minPCOpen);
      // Open to 'minimum' likely open state immediately if less open currently.
      if(valvePCOpen < minOpenFromCold) { return(minOpenFromCold); }
     64c:	f4 16       	cp	r15, r20
     64e:	08 f4       	brcc	.+2      	; 0x652 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0xe8>
     650:	e6 c0       	rjmp	.+460    	; 0x81e <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x2b4>
      // Slew open relatively gently...
      return(fnmin((uint8_t)(valvePCOpen + slewRate), inputState.maxPCOpen)); // Capped at maximum.
     652:	2f 0d       	add	r18, r15
     654:	26 17       	cp	r18, r22
     656:	08 f0       	brcs	.+2      	; 0x65a <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0xf0>
     658:	e3 c0       	rjmp	.+454    	; 0x820 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x2b6>
     65a:	62 2f       	mov	r22, r18
     65c:	e1 c0       	rjmp	.+450    	; 0x820 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x2b6>
    // Keep open at maximum allowed.
    return(inputState.maxPCOpen);
    }

  // (Well) over temp target: close valve down.
  if(adjustedTempC > inputState.targetTempC)
     65e:	4e 17       	cp	r20, r30
     660:	5f 07       	cpc	r21, r31
     662:	0c f0       	brlt	.+2      	; 0x666 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0xfc>
     664:	5a c0       	rjmp	.+180    	; 0x71a <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x1b0>
    {
//DEBUG_SERIAL_PRINTLN_FLASHSTRING("over temp");

    if(0 != valvePCOpen)
     666:	ff 20       	and	r15, r15
     668:	09 f4       	brne	.+2      	; 0x66c <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x102>
     66a:	d7 c0       	rjmp	.+430    	; 0x81a <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x2b0>
      {
      // Reduce valve hunting: defer re-closing if recently opened.
      if(retainedState.dontTurndown()) { return(valvePCOpen); }
     66c:	d8 01       	movw	r26, r16
     66e:	16 96       	adiw	r26, 0x06	; 6
     670:	8c 91       	ld	r24, X
     672:	16 97       	sbiw	r26, 0x06	; 6
     674:	88 23       	and	r24, r24
     676:	09 f0       	breq	.+2      	; 0x67a <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x110>
     678:	d0 c0       	rjmp	.+416    	; 0x81a <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x2b0>

      // True if just above the the proportional range.
      const bool justOverTemp = (adjustedTempC == inputState.targetTempC+1);
     67a:	60 e0       	ldi	r22, 0x00	; 0
     67c:	4f 5f       	subi	r20, 0xFF	; 255
     67e:	5f 4f       	sbci	r21, 0xFF	; 255
     680:	e4 17       	cp	r30, r20
     682:	f5 07       	cpc	r31, r21
     684:	a9 f4       	brne	.+42     	; 0x6b0 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x146>
     686:	61 e0       	ldi	r22, 0x01	; 1

      // TODO-453: avoid closing the valve at all when the temperature error is small and falling, and there is a widened deadband.
      if(justOverTemp && inputState.widenDeadband && (retainedState.getRawDelta() < 0)) { return(valvePCOpen); }
     688:	8b 81       	ldd	r24, Y+3	; 0x03
     68a:	88 23       	and	r24, r24
     68c:	61 f0       	breq	.+24     	; 0x6a6 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x13c>
     68e:	17 96       	adiw	r26, 0x07	; 7
     690:	8d 91       	ld	r24, X+
     692:	9c 91       	ld	r25, X
     694:	18 97       	sbiw	r26, 0x08	; 8
     696:	19 96       	adiw	r26, 0x09	; 9
     698:	2d 91       	ld	r18, X+
     69a:	3c 91       	ld	r19, X
     69c:	1a 97       	sbiw	r26, 0x0a	; 10
     69e:	82 1b       	sub	r24, r18
     6a0:	93 0b       	sbc	r25, r19
     6a2:	0a f4       	brpl	.+2      	; 0x6a6 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x13c>
     6a4:	ba c0       	rjmp	.+372    	; 0x81a <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x2b0>

      // TODO-482: glacial close if temperature is jittery and not too far above target.
      if(justOverTemp && retainedState.isFiltering) { return(valvePCOpen - 1); }
     6a6:	f8 01       	movw	r30, r16
     6a8:	81 81       	ldd	r24, Z+1	; 0x01
     6aa:	88 23       	and	r24, r24
     6ac:	09 f0       	breq	.+2      	; 0x6b0 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x146>
     6ae:	72 c0       	rjmp	.+228    	; 0x794 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x22a>

      // Continue shutting valve slowly as not yet fully closed.
      // TODO-117: allow very slow final turn off to help systems with poor bypass, ~1% per minute.
      // Special slow-turn-off rules for final part of travel at/below "min % really open" floor.
      const uint8_t minReallyOpen = inputState.minPCOpen;
     6b0:	89 81       	ldd	r24, Y+1	; 0x01
      const uint8_t lingerThreshold = (minReallyOpen > 0) ? (minReallyOpen-1) : 0;
     6b2:	88 23       	and	r24, r24
     6b4:	91 f0       	breq	.+36     	; 0x6da <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x170>
      if(valvePCOpen < minReallyOpen)
     6b6:	f8 16       	cp	r15, r24
     6b8:	18 f0       	brcs	.+6      	; 0x6c0 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x156>

      // Continue shutting valve slowly as not yet fully closed.
      // TODO-117: allow very slow final turn off to help systems with poor bypass, ~1% per minute.
      // Special slow-turn-off rules for final part of travel at/below "min % really open" floor.
      const uint8_t minReallyOpen = inputState.minPCOpen;
      const uint8_t lingerThreshold = (minReallyOpen > 0) ? (minReallyOpen-1) : 0;
     6ba:	48 2f       	mov	r20, r24
     6bc:	41 50       	subi	r20, 0x01	; 1
     6be:	0e c0       	rjmp	.+28     	; 0x6dc <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x172>
      if(valvePCOpen < minReallyOpen)
        {
        // If lingered long enough then do final chunk in one burst to help avoid valve hiss and temperature overshoot.
        if((DEFAULT_MAX_RUN_ON_TIME_M < minReallyOpen) && (valvePCOpen < minReallyOpen - DEFAULT_MAX_RUN_ON_TIME_M))
     6c0:	86 30       	cpi	r24, 0x06	; 6
     6c2:	08 f4       	brcc	.+2      	; 0x6c6 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x15c>
     6c4:	67 c0       	rjmp	.+206    	; 0x794 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x22a>
     6c6:	2f 2d       	mov	r18, r15
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	05 97       	sbiw	r24, 0x05	; 5
     6ce:	28 17       	cp	r18, r24
     6d0:	39 07       	cpc	r19, r25
     6d2:	0c f0       	brlt	.+2      	; 0x6d6 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x16c>
     6d4:	5f c0       	rjmp	.+190    	; 0x794 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x22a>
     6d6:	60 e0       	ldi	r22, 0x00	; 0
     6d8:	a3 c0       	rjmp	.+326    	; 0x820 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x2b6>
          { return(0); } // Shut valve completely.
        return(valvePCOpen - 1); // Turn down as slowly as reasonably possible to help boiler cool.
     6da:	40 e0       	ldi	r20, 0x00	; 0
        }

      // TODO-109: with comfort bias close relatively slowly to reduce wasted effort from minor overshoots.
      // TODO-453: close relatively slowly when temperature error is small (<1C) to reduce wasted effort from minor overshoots.
      if(((!inputState.hasEcoBias) || justOverTemp || retainedState.isFiltering) &&
     6dc:	8d 81       	ldd	r24, Y+5	; 0x05
     6de:	88 23       	and	r24, r24
     6e0:	41 f0       	breq	.+16     	; 0x6f2 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x188>
     6e2:	66 23       	and	r22, r22
     6e4:	31 f4       	brne	.+12     	; 0x6f2 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x188>
     6e6:	d8 01       	movw	r26, r16
     6e8:	11 96       	adiw	r26, 0x01	; 1
     6ea:	8c 91       	ld	r24, X
     6ec:	88 23       	and	r24, r24
     6ee:	09 f4       	brne	.+2      	; 0x6f2 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x188>
     6f0:	96 c0       	rjmp	.+300    	; 0x81e <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x2b4>
     6f2:	24 2f       	mov	r18, r20
     6f4:	30 e0       	ldi	r19, 0x00	; 0
     6f6:	8a 81       	ldd	r24, Y+2	; 0x02
     6f8:	68 2f       	mov	r22, r24
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	c9 01       	movw	r24, r18
     6fe:	09 96       	adiw	r24, 0x09	; 9
     700:	86 17       	cp	r24, r22
     702:	97 07       	cpc	r25, r23
     704:	1c f4       	brge	.+6      	; 0x70c <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x1a2>
     706:	b9 01       	movw	r22, r18
     708:	66 5f       	subi	r22, 0xF6	; 246
     70a:	7f 4f       	sbci	r23, 0xFF	; 255
     70c:	8f 2d       	mov	r24, r15
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	68 17       	cp	r22, r24
     712:	79 07       	cpc	r23, r25
     714:	0c f0       	brlt	.+2      	; 0x718 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x1ae>
     716:	83 c0       	rjmp	.+262    	; 0x81e <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x2b4>
     718:	40 c0       	rjmp	.+128    	; 0x79a <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x230>

  // Close to (or at) temp target: set valve partly open to try to tightly regulate.
  //
  // Use currentTempC16 lsbits to set valve percentage for proportional feedback
  // to provide more efficient and quieter TRV drive and probably more stable room temperature.
  const uint8_t lsbits = (uint8_t) (adjustedTempC16 & 0xf); // LSbits of temperature above base of proportional adjustment range.
     71a:	62 2f       	mov	r22, r18
     71c:	6f 70       	andi	r22, 0x0F	; 15
//    uint8_t tmp = (uint8_t) (refTempC16 & 0xf); // Only interested in lsbits.
  const uint8_t tmp = 16 - lsbits; // Now in range 1 (at warmest end of 'correct' temperature) to 16 (coolest).
  const uint8_t ulpStep = 6;
  // Get to nominal range 6 to 96, eg valve nearly shut just below top of 'correct' temperature window.
  const uint8_t targetPORaw = tmp * ulpStep;
     71e:	80 e1       	ldi	r24, 0x10	; 16
     720:	86 1b       	sub	r24, r22
     722:	96 e0       	ldi	r25, 0x06	; 6
     724:	89 9f       	mul	r24, r25
     726:	c0 01       	movw	r24, r0
     728:	11 24       	eor	r1, r1
  // Constrain from below to likely minimum-open value, in part to deal with TODO-117 'linger open' in lieu of boiler bypass.
  // Constrain from above by maximum percentage open allowed, eg for pay-by-volume systems.
  const uint8_t targetPO = constrain(targetPORaw, inputState.minPCOpen, inputState.maxPCOpen);
     72a:	49 81       	ldd	r20, Y+1	; 0x01
     72c:	84 17       	cp	r24, r20
     72e:	28 f0       	brcs	.+10     	; 0x73a <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x1d0>
     730:	2a 81       	ldd	r18, Y+2	; 0x02
     732:	48 2f       	mov	r20, r24
     734:	28 17       	cp	r18, r24
     736:	08 f4       	brcc	.+2      	; 0x73a <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x1d0>
     738:	42 2f       	mov	r20, r18

  // Reduce spurious valve/boiler adjustment by avoiding movement at all unless current temperature error is significant.
  if(targetPO != valvePCOpen)
     73a:	4f 15       	cp	r20, r15
     73c:	09 f4       	brne	.+2      	; 0x740 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x1d6>
     73e:	6d c0       	rjmp	.+218    	; 0x81a <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x2b0>
    const bool tooOpen = (targetPO < valvePCOpen);
    // Compute the minimum/epsilon slew adjustment allowed (the deadband).
    // Also increase effective deadband if temperature resolution is lower than 1/16th, eg 8ths => 1+2*ulpStep minimum.
// FIXME //    const uint8_t realMinUlp = 1 + (inputState.isLowPrecision ? 2*ulpStep : ulpStep); // Assume precision no coarser than 1/8C.
    const uint8_t realMinUlp = 1 + ulpStep;
    const uint8_t minAbsSlew = fnmax(realMinUlp, (uint8_t)(inputState.widenDeadband ? max(min(DEFAULT_VALVE_PC_MODERATELY_OPEN/2,max(TRV_MAX_SLEW_PC_PER_MIN,2*TRV_MIN_SLEW_PC)), 2+TRV_MIN_SLEW_PC) : TRV_MIN_SLEW_PC));
     740:	5b 81       	ldd	r21, Y+3	; 0x03
     742:	55 23       	and	r21, r21
     744:	11 f0       	breq	.+4      	; 0x74a <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x1e0>
     746:	9e e0       	ldi	r25, 0x0E	; 14
     748:	01 c0       	rjmp	.+2      	; 0x74c <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x1e2>
     74a:	97 e0       	ldi	r25, 0x07	; 7
    if(tooOpen) // Currently open more than required.  Still below target at top of proportional range.
     74c:	4f 15       	cp	r20, r15
     74e:	40 f5       	brcc	.+80     	; 0x7a0 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x236>
      {
//DEBUG_SERIAL_PRINTLN_FLASHSTRING("slightly too open");
      const uint8_t slew = valvePCOpen - targetPO;
     750:	7f 2d       	mov	r23, r15
     752:	74 1b       	sub	r23, r20
      // Ensure no hunting for ~1ulp temperature wobble.
      if(slew < minAbsSlew) { return(valvePCOpen); }
     754:	79 17       	cp	r23, r25
     756:	08 f4       	brcc	.+2      	; 0x75a <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x1f0>
     758:	60 c0       	rjmp	.+192    	; 0x81a <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x2b0>

      // Reduce valve hunting: defer re-closing if recently opened.
      if(retainedState.dontTurndown()) { return(valvePCOpen); }
     75a:	f8 01       	movw	r30, r16
     75c:	86 81       	ldd	r24, Z+6	; 0x06
     75e:	88 23       	and	r24, r24
     760:	09 f0       	breq	.+2      	; 0x764 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x1fa>
     762:	5b c0       	rjmp	.+182    	; 0x81a <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x2b0>

      // TODO-453: avoid closing the valve at all when the (raw) temperature is not rising, so as to minimise valve movement.
      // Since the target is the top of the proportional range than nothing within it requires the temperature to be *forced* down.
      // Possibly don't apply this rule at the very top of the range in case filtering is on and the filtered value moves differently to the raw.
      if(retainedState.getRawDelta() <= 0) { return(valvePCOpen); }
     764:	87 81       	ldd	r24, Z+7	; 0x07
     766:	90 85       	ldd	r25, Z+8	; 0x08
     768:	21 85       	ldd	r18, Z+9	; 0x09
     76a:	32 85       	ldd	r19, Z+10	; 0x0a
     76c:	82 1b       	sub	r24, r18
     76e:	93 0b       	sbc	r25, r19
     770:	18 16       	cp	r1, r24
     772:	19 06       	cpc	r1, r25
     774:	0c f0       	brlt	.+2      	; 0x778 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x20e>
     776:	51 c0       	rjmp	.+162    	; 0x81a <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x2b0>
      // TODO-482: try to deal better with jittery temperature readings.
      const bool beGlacial = inputState.glacial ||
#if defined(GLACIAL_ON_WITH_WIDE_DEADBAND)
          ((inputState.widenDeadband || retainedState.isFiltering) && (valvePCOpen <= DEFAULT_VALVE_PC_MODERATELY_OPEN)) ||
#endif
          (lsbits < 8);
     778:	8c 81       	ldd	r24, Y+4	; 0x04
     77a:	88 23       	and	r24, r24
     77c:	59 f4       	brne	.+22     	; 0x794 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x22a>
     77e:	55 23       	and	r21, r21
     780:	19 f4       	brne	.+6      	; 0x788 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x21e>
     782:	81 81       	ldd	r24, Z+1	; 0x01
     784:	88 23       	and	r24, r24
     786:	19 f0       	breq	.+6      	; 0x78e <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x224>
     788:	f2 e2       	ldi	r31, 0x22	; 34
     78a:	ff 15       	cp	r31, r15
     78c:	18 f4       	brcc	.+6      	; 0x794 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x22a>
     78e:	68 30       	cpi	r22, 0x08	; 8
     790:	08 f0       	brcs	.+2      	; 0x794 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x22a>
     792:	52 c0       	rjmp	.+164    	; 0x838 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x2ce>
      if(beGlacial) { return(valvePCOpen - 1); }
     794:	6f 2d       	mov	r22, r15
     796:	61 50       	subi	r22, 0x01	; 1
     798:	43 c0       	rjmp	.+134    	; 0x820 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x2b6>

      if(slew > TRV_SLEW_PC_PER_MIN_FAST)
          { return(valvePCOpen - TRV_SLEW_PC_PER_MIN_FAST); } // Cap slew rate.
     79a:	6f 2d       	mov	r22, r15
     79c:	6a 50       	subi	r22, 0x0A	; 10
     79e:	40 c0       	rjmp	.+128    	; 0x820 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x2b6>
    // if(targetPO > TRVPercentOpen) // Currently open less than required.  Still below target at top of proportional range.
//DEBUG_SERIAL_PRINTLN_FLASHSTRING("slightly too closed");
#if defined(SUPPORT_BAKE)
    // If room is well below target and in BAKE mode then immediately open to maximum.
    // Needs debounced bake mode value to avoid spuriously slamming open the valve as the user cycles through modes.
    if(inputState.inBakeMode) { return(inputState.maxPCOpen); }
     7a0:	8e 81       	ldd	r24, Y+6	; 0x06
     7a2:	88 23       	and	r24, r24
     7a4:	11 f0       	breq	.+4      	; 0x7aa <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x240>
     7a6:	6a 81       	ldd	r22, Y+2	; 0x02
     7a8:	3b c0       	rjmp	.+118    	; 0x820 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x2b6>
#endif

    const uint8_t slew = targetPO - valvePCOpen;
     7aa:	74 2f       	mov	r23, r20
     7ac:	7f 19       	sub	r23, r15
    // To to avoid hunting around boundaries of a ~1ulp temperature step.
    if(slew < minAbsSlew) { return(valvePCOpen); }
     7ae:	79 17       	cp	r23, r25
     7b0:	a0 f1       	brcs	.+104    	; 0x81a <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x2b0>

    // Reduce valve hunting: defer re-opening if recently closed.
    if(retainedState.dontTurnup()) { return(valvePCOpen); }
     7b2:	d8 01       	movw	r26, r16
     7b4:	15 96       	adiw	r26, 0x05	; 5
     7b6:	8c 91       	ld	r24, X
     7b8:	15 97       	sbiw	r26, 0x05	; 5
     7ba:	88 23       	and	r24, r24
     7bc:	71 f5       	brne	.+92     	; 0x81a <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x2b0>
    // Keeping the temperature steady anywhere in the target proportional range
    // while minimising valve moment/noise/etc is a good goal,
    // so if raw temperatures are rising at the moment then leave the valve as-is.
    // If fairly near the final target then also leave the valve as-is (TODO-453 & TODO-451).
    const int rise = retainedState.getRawDelta();
    if(rise > 0) { return(valvePCOpen); }
     7be:	17 96       	adiw	r26, 0x07	; 7
     7c0:	8d 91       	ld	r24, X+
     7c2:	9c 91       	ld	r25, X
     7c4:	18 97       	sbiw	r26, 0x08	; 8
     7c6:	19 96       	adiw	r26, 0x09	; 9
     7c8:	2d 91       	ld	r18, X+
     7ca:	3c 91       	ld	r19, X
     7cc:	1a 97       	sbiw	r26, 0x0a	; 10
     7ce:	82 1b       	sub	r24, r18
     7d0:	93 0b       	sbc	r25, r19
     7d2:	18 16       	cp	r1, r24
     7d4:	19 06       	cpc	r1, r25
     7d6:	0c f1       	brlt	.+66     	; 0x81a <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x2b0>
    if( /* (0 == rise) && */ (lsbits >= (inputState.widenDeadband ? 8 : 12))) { return(valvePCOpen); }
     7d8:	55 23       	and	r21, r21
     7da:	19 f4       	brne	.+6      	; 0x7e2 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x278>
     7dc:	2c e0       	ldi	r18, 0x0C	; 12
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	02 c0       	rjmp	.+4      	; 0x7e6 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x27c>
     7e2:	28 e0       	ldi	r18, 0x08	; 8
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	86 2f       	mov	r24, r22
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	82 17       	cp	r24, r18
     7ec:	93 07       	cpc	r25, r19
     7ee:	ac f4       	brge	.+42     	; 0x81a <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x2b0>
    // This assumes that most valves more than about 1/3rd open can deliver significant power, esp if not statically balanced.
    const bool beGlacial = inputState.glacial ||
#if defined(GLACIAL_ON_WITH_WIDE_DEADBAND)
        inputState.widenDeadband ||
#endif
        (lsbits >= 8) || ((lsbits >= 4) && (valvePCOpen >= DEFAULT_VALVE_PC_MODERATELY_OPEN));
     7f0:	8c 81       	ldd	r24, Y+4	; 0x04
     7f2:	88 23       	and	r24, r24
     7f4:	49 f4       	brne	.+18     	; 0x808 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x29e>
     7f6:	55 23       	and	r21, r21
     7f8:	39 f4       	brne	.+14     	; 0x808 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x29e>
     7fa:	68 30       	cpi	r22, 0x08	; 8
     7fc:	28 f4       	brcc	.+10     	; 0x808 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x29e>
     7fe:	64 30       	cpi	r22, 0x04	; 4
     800:	f8 f0       	brcs	.+62     	; 0x840 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x2d6>
     802:	b1 e2       	ldi	r27, 0x21	; 33
     804:	bf 15       	cp	r27, r15
     806:	e0 f4       	brcc	.+56     	; 0x840 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x2d6>
    if(beGlacial) { return(valvePCOpen + 1); }
     808:	6f 2d       	mov	r22, r15
     80a:	6f 5f       	subi	r22, 0xFF	; 255
     80c:	09 c0       	rjmp	.+18     	; 0x820 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x2b6>

    // Slew open faster with comfort bias.
    const uint8_t maxSlew = (!inputState.hasEcoBias) ? TRV_SLEW_PC_PER_MIN_FAST : TRV_MAX_SLEW_PC_PER_MIN;
    if(slew > maxSlew)
     80e:	7b 30       	cpi	r23, 0x0B	; 11
     810:	30 f0       	brcs	.+12     	; 0x81e <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x2b4>
     812:	8a e0       	ldi	r24, 0x0A	; 10
        { return(valvePCOpen + maxSlew); } // Cap slew rate open.
     814:	68 2f       	mov	r22, r24
     816:	6f 0d       	add	r22, r15
     818:	03 c0       	rjmp	.+6      	; 0x820 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x2b6>
     81a:	6f 2d       	mov	r22, r15
     81c:	01 c0       	rjmp	.+2      	; 0x820 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x2b6>
     81e:	64 2f       	mov	r22, r20
    return(targetPO);
    }

  // Leave value position as was...
  return(valvePCOpen);
  }
     820:	86 2f       	mov	r24, r22
     822:	df 91       	pop	r29
     824:	cf 91       	pop	r28
     826:	1f 91       	pop	r17
     828:	0f 91       	pop	r16
     82a:	ff 90       	pop	r15
     82c:	08 95       	ret

      // Ensure that the valve opens quickly from cold for acceptable response.
      // Less fast if already moderately open or in the degree below target.
      const uint8_t slewRate =
          ((valvePCOpen >= DEFAULT_VALVE_PC_MODERATELY_OPEN) || (adjustedTempC == inputState.targetTempC-1)) ?
              TRV_MAX_SLEW_PC_PER_MIN : TRV_SLEW_PC_PER_MIN_FAST;
     82e:	81 e2       	ldi	r24, 0x21	; 33
     830:	8f 15       	cp	r24, r15
     832:	08 f4       	brcc	.+2      	; 0x836 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x2cc>
     834:	06 cf       	rjmp	.-500    	; 0x642 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0xd8>
     836:	fe ce       	rjmp	.-516    	; 0x634 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0xca>
          ((inputState.widenDeadband || retainedState.isFiltering) && (valvePCOpen <= DEFAULT_VALVE_PC_MODERATELY_OPEN)) ||
#endif
          (lsbits < 8);
      if(beGlacial) { return(valvePCOpen - 1); }

      if(slew > TRV_SLEW_PC_PER_MIN_FAST)
     838:	7b 30       	cpi	r23, 0x0B	; 11
     83a:	08 f0       	brcs	.+2      	; 0x83e <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x2d4>
     83c:	ae cf       	rjmp	.-164    	; 0x79a <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x230>
     83e:	ef cf       	rjmp	.-34     	; 0x81e <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x2b4>
#endif
        (lsbits >= 8) || ((lsbits >= 4) && (valvePCOpen >= DEFAULT_VALVE_PC_MODERATELY_OPEN));
    if(beGlacial) { return(valvePCOpen + 1); }

    // Slew open faster with comfort bias.
    const uint8_t maxSlew = (!inputState.hasEcoBias) ? TRV_SLEW_PC_PER_MIN_FAST : TRV_MAX_SLEW_PC_PER_MIN;
     840:	8d 81       	ldd	r24, Y+5	; 0x05
     842:	88 23       	and	r24, r24
     844:	21 f3       	breq	.-56     	; 0x80e <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x2a4>
     846:	85 e0       	ldi	r24, 0x05	; 5
     848:	e5 cf       	rjmp	.-54     	; 0x814 <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)+0x2aa>

0000084a <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)>:

// Perform per-minute tasks such as counter and filter updates then recompute valve position.
// The input state must be complete including target and reference temperatures
// before calling this including the first time whereupon some further lazy initialisation is done.
//   * valvePCOpenRef  current valve position UPDATED BY THIS ROUTINE, in range [0,100]
void ModelledRadValveState::tick(volatile uint8_t &valvePCOpenRef, const ModelledRadValveInputState &inputState)
     84a:	cf 92       	push	r12
     84c:	df 92       	push	r13
     84e:	ef 92       	push	r14
     850:	ff 92       	push	r15
     852:	0f 93       	push	r16
     854:	1f 93       	push	r17
     856:	cf 93       	push	r28
     858:	df 93       	push	r29
     85a:	ec 01       	movw	r28, r24
     85c:	7b 01       	movw	r14, r22
     85e:	6a 01       	movw	r12, r20
  {
  const int rawTempC16 = inputState.refTempC16 - refTempOffsetC16; // Remove adjustment for target centre.
     860:	fa 01       	movw	r30, r20
     862:	07 81       	ldd	r16, Z+7	; 0x07
     864:	10 85       	ldd	r17, Z+8	; 0x08
     866:	08 50       	subi	r16, 0x08	; 8
     868:	10 40       	sbci	r17, 0x00	; 0
  if(!initialised)
     86a:	88 81       	ld	r24, Y
     86c:	88 23       	and	r24, r24
     86e:	79 f4       	brne	.+30     	; 0x88e <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0x44>
     870:	fe 01       	movw	r30, r28
     872:	b5 96       	adiw	r30, 0x25	; 37
     874:	80 e1       	ldi	r24, 0x10	; 16
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	03 c0       	rjmp	.+6      	; 0x880 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0x36>
    {
    // Fill the filter memory with the current room temperature.
    for(int i = filterLength; --i >= 0; ) { prevRawTempC16[i] = rawTempC16; }
     87a:	11 83       	std	Z+1, r17	; 0x01
     87c:	00 83       	st	Z, r16
     87e:	32 97       	sbiw	r30, 0x02	; 2
     880:	01 97       	sbiw	r24, 0x01	; 1
     882:	2f ef       	ldi	r18, 0xFF	; 255
     884:	8f 3f       	cpi	r24, 0xFF	; 255
     886:	92 07       	cpc	r25, r18
     888:	c1 f7       	brne	.-16     	; 0x87a <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0x30>
    initialised = true;
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	88 83       	st	Y, r24
     88e:	fe 01       	movw	r30, r28
     890:	b3 96       	adiw	r30, 0x23	; 35
     892:	20 e1       	ldi	r18, 0x10	; 16
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	05 c0       	rjmp	.+10     	; 0x8a2 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0x58>
    }

  // Shift in the latest (raw) temperature.
  for(int i = filterLength; --i > 0; ) { prevRawTempC16[i] = prevRawTempC16[i-1]; }
     898:	80 81       	ld	r24, Z
     89a:	91 81       	ldd	r25, Z+1	; 0x01
     89c:	93 83       	std	Z+3, r25	; 0x03
     89e:	82 83       	std	Z+2, r24	; 0x02
     8a0:	32 97       	sbiw	r30, 0x02	; 2
     8a2:	21 50       	subi	r18, 0x01	; 1
     8a4:	30 40       	sbci	r19, 0x00	; 0
     8a6:	c1 f7       	brne	.-16     	; 0x898 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0x4e>
  prevRawTempC16[0] = rawTempC16;
     8a8:	18 87       	std	Y+8, r17	; 0x08
     8aa:	0f 83       	std	Y+7, r16	; 0x07

  // Disable/enable filtering.
  // Allow possible exit from filtering for next time
  // if the raw value is close enough to the current filtered value
  // so that reverting to unfiltered will not of itself cause a big jump.
  if(isFiltering)
     8ac:	89 81       	ldd	r24, Y+1	; 0x01
     8ae:	88 23       	and	r24, r24
     8b0:	c9 f0       	breq	.+50     	; 0x8e4 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0x9a>
    {
    if(abs(getSmoothedRecent() - rawTempC16) <= MAX_TEMP_JUMP_C16) { isFiltering = false; }  
     8b2:	ce 01       	movw	r24, r28
     8b4:	0e 94 a0 02 	call	0x540	; 0x540 <ModelledRadValveState::getSmoothedRecent()>
     8b8:	80 1b       	sub	r24, r16
     8ba:	91 0b       	sbc	r25, r17
     8bc:	18 16       	cp	r1, r24
     8be:	19 06       	cpc	r1, r25
     8c0:	44 f4       	brge	.+16     	; 0x8d2 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0x88>
     8c2:	ce 01       	movw	r24, r28
     8c4:	0e 94 a0 02 	call	0x540	; 0x540 <ModelledRadValveState::getSmoothedRecent()>
     8c8:	80 1b       	sub	r24, r16
     8ca:	91 0b       	sbc	r25, r17
     8cc:	04 97       	sbiw	r24, 0x04	; 4
     8ce:	54 f4       	brge	.+20     	; 0x8e4 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0x9a>
     8d0:	08 c0       	rjmp	.+16     	; 0x8e2 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0x98>
     8d2:	ce 01       	movw	r24, r28
     8d4:	0e 94 a0 02 	call	0x540	; 0x540 <ModelledRadValveState::getSmoothedRecent()>
     8d8:	08 1b       	sub	r16, r24
     8da:	19 0b       	sbc	r17, r25
     8dc:	04 30       	cpi	r16, 0x04	; 4
     8de:	11 05       	cpc	r17, r1
     8e0:	0c f4       	brge	.+2      	; 0x8e4 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0x9a>
     8e2:	19 82       	std	Y+1, r1	; 0x01
    }
  // Force filtering (back) on if any adjacent past readings are wildly different.
  if(!isFiltering)
     8e4:	89 81       	ldd	r24, Y+1	; 0x01
     8e6:	88 23       	and	r24, r24
     8e8:	d1 f4       	brne	.+52     	; 0x91e <__stack+0x1f>
     8ea:	fe 01       	movw	r30, r28
     8ec:	41 e0       	ldi	r20, 0x01	; 1
     8ee:	50 e0       	ldi	r21, 0x00	; 0
    {
    for(int i = 1; i < filterLength; ++i) { if(abs(prevRawTempC16[i] - prevRawTempC16[i-1]) > MAX_TEMP_JUMP_C16) { isFiltering = true; break; } }
     8f0:	21 85       	ldd	r18, Z+9	; 0x09
     8f2:	32 85       	ldd	r19, Z+10	; 0x0a
     8f4:	87 81       	ldd	r24, Z+7	; 0x07
     8f6:	90 85       	ldd	r25, Z+8	; 0x08
     8f8:	28 1b       	sub	r18, r24
     8fa:	39 0b       	sbc	r19, r25
     8fc:	37 ff       	sbrs	r19, 7
     8fe:	03 c0       	rjmp	.+6      	; 0x906 <__stack+0x7>
     900:	30 95       	com	r19
     902:	21 95       	neg	r18
     904:	3f 4f       	sbci	r19, 0xFF	; 255
     906:	32 96       	adiw	r30, 0x02	; 2
     908:	24 30       	cpi	r18, 0x04	; 4
     90a:	31 05       	cpc	r19, r1
     90c:	1c f0       	brlt	.+6      	; 0x914 <__stack+0x15>
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	89 83       	std	Y+1, r24	; 0x01
     912:	05 c0       	rjmp	.+10     	; 0x91e <__stack+0x1f>
     914:	4f 5f       	subi	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	40 31       	cpi	r20, 0x10	; 16
     91a:	51 05       	cpc	r21, r1
     91c:	49 f7       	brne	.-46     	; 0x8f0 <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)+0xa6>
    }

  // Tick count down timers.
  if(valveTurndownCountdownM > 0) { --valveTurndownCountdownM; }
     91e:	8d 81       	ldd	r24, Y+5	; 0x05
     920:	88 23       	and	r24, r24
     922:	11 f0       	breq	.+4      	; 0x928 <__stack+0x29>
     924:	81 50       	subi	r24, 0x01	; 1
     926:	8d 83       	std	Y+5, r24	; 0x05
  if(valveTurnupCountdownM > 0) { --valveTurnupCountdownM; }
     928:	8e 81       	ldd	r24, Y+6	; 0x06
     92a:	88 23       	and	r24, r24
     92c:	11 f0       	breq	.+4      	; 0x932 <__stack+0x33>
     92e:	81 50       	subi	r24, 0x01	; 1
     930:	8e 83       	std	Y+6, r24	; 0x06

  // Update the modelled state including the valve position passed by reference.
  const uint8_t newValvePC = ModelledRadValve::computeRequiredTRVPercentOpen(valvePCOpenRef, inputState, *this);
     932:	f7 01       	movw	r30, r14
     934:	80 81       	ld	r24, Z
     936:	b6 01       	movw	r22, r12
     938:	ae 01       	movw	r20, r28
     93a:	0e 94 b5 02 	call	0x56a	; 0x56a <ModelledRadValve::computeRequiredTRVPercentOpen(unsigned char, ModelledRadValveInputState const&, ModelledRadValveState&)>
     93e:	68 2f       	mov	r22, r24
  const bool changed = (newValvePC != valvePCOpenRef);
     940:	f7 01       	movw	r30, r14
     942:	80 81       	ld	r24, Z
     944:	70 e0       	ldi	r23, 0x00	; 0
     946:	68 17       	cp	r22, r24
     948:	29 f1       	breq	.+74     	; 0x994 <__stack+0x95>
     94a:	71 e0       	ldi	r23, 0x01	; 1
  if(changed)
    {
    if(newValvePC > valvePCOpenRef)
     94c:	80 81       	ld	r24, Z
     94e:	3c 81       	ldd	r19, Y+4	; 0x04
     950:	46 2f       	mov	r20, r22
     952:	50 e0       	ldi	r21, 0x00	; 0
     954:	86 17       	cp	r24, r22
     956:	58 f4       	brcc	.+22     	; 0x96e <__stack+0x6f>
  // causing measured temperatures to veer up and down.
  // This attempts to reduce excessive valve noise and energy use
  // and help to avoid boiler short-cycling.
  uint8_t valveTurnupCountdownM;
  // Mark flow as having been increased.
  void valveTurnup() { valveTurnupCountdownM = ANTISEEK_VALVE_RECLOSE_DELAY_M; }
     958:	85 e0       	ldi	r24, 0x05	; 5
     95a:	8e 83       	std	Y+6, r24	; 0x06
      {
      // Defer reclosing valve to avoid excessive hunting.
      valveTurnup();
      cumulativeMovementPC += (newValvePC - valvePCOpenRef);
     95c:	20 81       	ld	r18, Z
     95e:	8b 81       	ldd	r24, Y+3	; 0x03
     960:	93 2f       	mov	r25, r19
     962:	9f 70       	andi	r25, 0x0F	; 15
     964:	82 1b       	sub	r24, r18
     966:	91 09       	sbc	r25, r1
     968:	84 0f       	add	r24, r20
     96a:	95 1f       	adc	r25, r21
     96c:	0b c0       	rjmp	.+22     	; 0x984 <__stack+0x85>
  // causing measured temperatures to veer up and down.
  // This attempts to reduce excessive valve noise and energy use
  // and help to avoid boiler short-cycling.
  uint8_t valveTurndownCountdownM;
  // Mark flow as having been reduced.
  void valveTurndown() { valveTurndownCountdownM = ANTISEEK_VALVE_REOPEN_DELAY_M; }
     96e:	8a e0       	ldi	r24, 0x0A	; 10
     970:	8d 83       	std	Y+5, r24	; 0x05
      }
    else
      {
      // Defer opening valve to avoid excessive hunting.
      valveTurndown();
      cumulativeMovementPC += (valvePCOpenRef - newValvePC);
     972:	f7 01       	movw	r30, r14
     974:	20 81       	ld	r18, Z
     976:	8b 81       	ldd	r24, Y+3	; 0x03
     978:	93 2f       	mov	r25, r19
     97a:	9f 70       	andi	r25, 0x0F	; 15
     97c:	82 0f       	add	r24, r18
     97e:	91 1d       	adc	r25, r1
     980:	84 1b       	sub	r24, r20
     982:	95 0b       	sbc	r25, r21
     984:	8b 83       	std	Y+3, r24	; 0x03
     986:	89 2f       	mov	r24, r25
     988:	8f 70       	andi	r24, 0x0F	; 15
     98a:	30 7f       	andi	r19, 0xF0	; 240
     98c:	38 2b       	or	r19, r24
     98e:	3c 83       	std	Y+4, r19	; 0x04
      }
    valvePCOpenRef = newValvePC;
     990:	f7 01       	movw	r30, r14
     992:	60 83       	st	Z, r22
    }
  valveMoved = changed;
     994:	7a 83       	std	Y+2, r23	; 0x02
  }
     996:	df 91       	pop	r29
     998:	cf 91       	pop	r28
     99a:	1f 91       	pop	r17
     99c:	0f 91       	pop	r16
     99e:	ff 90       	pop	r15
     9a0:	ef 90       	pop	r14
     9a2:	df 90       	pop	r13
     9a4:	cf 90       	pop	r12
     9a6:	08 95       	ret

000009a8 <Sensor<unsigned char>::tag() const>:
    // only as required to fetch new values from the underlying sensor.
    virtual uint8_t preferredPollInterval_s() const { return(0); }

    // Returns a suggested (JSON) tag/field/key name including units of get(); NULL means no recommended tag.
    // The lifetime of the pointed-to text must be at least that of the Sensor instance.
    virtual const char *tag() const { return(NULL); }
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	08 95       	ret

000009ae <Sensor<unsigned char>::isUnavailable() const>:
    // Default is to always return true, ie all values potentially valid.
    virtual bool isValid(T value) const { return(true); }

    // Returns true if this sensor is definitely unavailable or behaving incorrectly.
    // The default case is to assume that if the code is wired in then the device will work.
    virtual bool isUnavailable() const { return(false); }
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	08 95       	ret

000009b2 <Sensor<unsigned char>::handleInterruptSimple()>:
    // Must be fast and ISR (Interrupt Service Routine) safe.
    // Returns true if interrupt was successfully handled and cleared
    // else another interrupt handler in the chain may be called
    // to attempt to clear the interrupt.
    // By default does nothing (and returns false).
    virtual bool handleInterruptSimple() { return(false); }
     9b2:	80 e0       	ldi	r24, 0x00	; 0
     9b4:	08 95       	ret

000009b6 <Sensor<unsigned char>::begin()>:

    // Begin access to this sensor if applicable and not already begun.
    // Returns true if it needed to be begun.
    // Allows logic to end() if required at the end of a block, etc.
    // Defaults to do nothing (and return false).
    virtual bool begin() { return(false); }
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	08 95       	ret

000009ba <Sensor<unsigned char>::isAvailable() const>:

    // Returns true if this sensor is currently available.
    // True by default unless implementation overrides.
    // For those sensors that need starting this will be false before begin().
    virtual bool isAvailable() const { return(true); }
     9ba:	81 e0       	ldi	r24, 0x01	; 1
     9bc:	08 95       	ret

000009be <Sensor<unsigned char>::end()>:

    // End access to this sensor if applicable and not already ended.
    // Returns true if it needed to be ended.
    // Defaults to do nothing (and return false).
    virtual bool end() { return(false); }
     9be:	80 e0       	ldi	r24, 0x00	; 0
     9c0:	08 95       	ret

000009c2 <Sensor<unsigned char>::preferredPollInterval_s() const>:
 
    // Returns non-zero if this implementation requires a regular call to read() to operate correctly.
    // Preferred poll interval (in seconds) or 0 if no regular poll() call required.
    // Default returns 0 indicating regular call to read() not required,
    // only as required to fetch new values from the underlying sensor.
    virtual uint8_t preferredPollInterval_s() const { return(0); }
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	08 95       	ret

000009c6 <Sensor<unsigned char>::isValid(unsigned char) const>:
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual T get() const = 0;

    // Returns true if this sensor reading value passed is potentially valid, eg in-range.
    // Default is to always return true, ie all values potentially valid.
    virtual bool isValid(T value) const { return(true); }
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	08 95       	ret

000009ca <global constructors keyed to _Z10inWarmModev>:
  {
  protected:
      volatile uint8_t value;

      // By default initialise the value to zero.
      SimpleTSUint8Sensor() : value(0) { }
     9ca:	10 92 fb 01 	sts	0x01FB, r1
    // Hours and minutes since room became vacant (doesn't roll back to zero from max hours); zero when room occupied.
    uint8_t vacancyH;
    uint8_t vacancyM;

  public:
    OccupancyTracker() : occupationCountdownM(0), activityCountdownM(0), vacancyH(0), vacancyM(0) { }
     9ce:	83 e6       	ldi	r24, 0x63	; 99
     9d0:	91 e0       	ldi	r25, 0x01	; 1
     9d2:	90 93 fa 01 	sts	0x01FA, r25
     9d6:	80 93 f9 01 	sts	0x01F9, r24
     9da:	10 92 fc 01 	sts	0x01FC, r1
     9de:	10 92 fd 01 	sts	0x01FD, r1
     9e2:	10 92 fe 01 	sts	0x01FE, r1
     9e6:	10 92 ff 01 	sts	0x01FF, r1
  protected:
    // Requested acuator value/position.
    volatile uint8_t value;

    // By default initialise the value to zero.
    SimpleTSUint8Actuator() : value(0) { }
     9ea:	10 92 02 02 	sts	0x0202, r1
      : inputState(0),
        callingForHeat(false),
#if defined(TRV_SLEW_GLACIAL)
        glacial(true)
#else
        glacial(false)
     9ee:	81 e4       	ldi	r24, 0x41	; 65
     9f0:	91 e0       	ldi	r25, 0x01	; 1
     9f2:	90 93 01 02 	sts	0x0201, r25
     9f6:	80 93 00 02 	sts	0x0200, r24
struct ModelledRadValveInputState
  {
  ModelledRadValveInputState(const int realTempC16) :
    targetTempC(FROST), 
    minPCOpen(DEFAULT_MIN_VALVE_PC_REALLY_OPEN), maxPCOpen(100),
    widenDeadband(false), glacial(false), hasEcoBias(false), inBakeMode(false)
     9fa:	87 e0       	ldi	r24, 0x07	; 7
     9fc:	80 93 03 02 	sts	0x0203, r24
     a00:	8f e0       	ldi	r24, 0x0F	; 15
     a02:	80 93 04 02 	sts	0x0204, r24
     a06:	84 e6       	ldi	r24, 0x64	; 100
     a08:	80 93 05 02 	sts	0x0205, r24
     a0c:	10 92 06 02 	sts	0x0206, r1
     a10:	10 92 07 02 	sts	0x0207, r1
     a14:	10 92 08 02 	sts	0x0208, r1
     a18:	10 92 09 02 	sts	0x0209, r1
// and which may save a little energy if users target the specified temperatures.
// Suggestion c/o GG ~2014/10 code, and generally less misleading anyway!
void ModelledRadValveInputState::setReferenceTemperatures(const int currentTempC16)
  {
  const int referenceTempC16 = currentTempC16 + refTempOffsetC16; // TODO-386: push targeted temperature down by 0.5C to middle of degree.
  refTempC16 = referenceTempC16;
     a1c:	88 e0       	ldi	r24, 0x08	; 8
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	90 93 0b 02 	sts	0x020B, r25
     a24:	80 93 0a 02 	sts	0x020A, r24
  ModelledRadValveState() :
    initialised(false),
    isFiltering(false),
    valveMoved(false),
    cumulativeMovementPC(0),
    valveTurndownCountdownM(0), valveTurnupCountdownM(0)
     a28:	10 92 0c 02 	sts	0x020C, r1
     a2c:	10 92 0d 02 	sts	0x020D, r1
     a30:	10 92 0e 02 	sts	0x020E, r1
     a34:	10 92 0f 02 	sts	0x020F, r1
     a38:	80 91 10 02 	lds	r24, 0x0210
     a3c:	80 7f       	andi	r24, 0xF0	; 240
     a3e:	80 93 10 02 	sts	0x0210, r24
     a42:	10 92 11 02 	sts	0x0211, r1
     a46:	10 92 12 02 	sts	0x0212, r1
      : inputState(0),
        callingForHeat(false),
#if defined(TRV_SLEW_GLACIAL)
        glacial(true)
#else
        glacial(false)
     a4a:	10 92 33 02 	sts	0x0233, r1
     a4e:	10 92 34 02 	sts	0x0234, r1

    // Initialise base with appropriate storage (non-null) and capacity knowledge.
    SimpleStatsRotationBase(DescValueTuple *_stats, const uint8_t _capacity)
      : capacity(_capacity), stats(_stats), nStats(0),
        lastTXed(~0), lastTXedLoPri(~0), lastTXedHiPri(~0), // Show the first item on the first pass...
        id(NULL)
     a52:	88 e0       	ldi	r24, 0x08	; 8
     a54:	80 93 36 02 	sts	0x0236, r24
     a58:	20 e4       	ldi	r18, 0x40	; 64
     a5a:	32 e0       	ldi	r19, 0x02	; 2
     a5c:	30 93 38 02 	sts	0x0238, r19
     a60:	20 93 37 02 	sts	0x0237, r18
     a64:	10 92 39 02 	sts	0x0239, r1
     a68:	8f ef       	ldi	r24, 0xFF	; 255
     a6a:	80 93 3a 02 	sts	0x023A, r24
     a6e:	80 93 3b 02 	sts	0x023B, r24
     a72:	80 93 3c 02 	sts	0x023C, r24
     a76:	10 92 3e 02 	sts	0x023E, r1
     a7a:	10 92 3d 02 	sts	0x023D, r1
    // is displayed immediately after the @/ID field when enabled,
    // and missing count values suggest a lost transmission somewhere.
    // Takes minimal space (1 byte).
    struct WriteCount
      {
      WriteCount() : enabled(0), count(0) { }
     a7e:	80 91 3f 02 	lds	r24, 0x023F
     a82:	80 7f       	andi	r24, 0xF0	; 240
     a84:	80 93 3f 02 	sts	0x023F, r24
     a88:	f9 01       	movw	r30, r18
    // The default sensitivity is set to forbid transmission at all but minimum (0) leaf TX security settings.
    // By default the stat is normal priority.
    GenericStatsDescriptor(const char * const statKey,
                           const uint8_t statSensitivity = 1,
                           const bool statHighPriority = false)
      : key(statKey), sensitivity(statSensitivity), highPriority(statHighPriority)
     a8a:	91 e0       	ldi	r25, 0x01	; 1
     a8c:	11 82       	std	Z+1, r1	; 0x01
     a8e:	10 82       	st	Z, r1
     a90:	92 83       	std	Z+2, r25	; 0x02
     a92:	13 82       	std	Z+3, r1	; 0x03
#endif

  protected:
    struct DescValueTuple
      {
      DescValueTuple() : descriptor(NULL), value(0) { }
     a94:	15 82       	std	Z+5, r1	; 0x05
     a96:	14 82       	std	Z+4, r1	; 0x04
      int value;

      // Various run-time flags.
      struct Flags
        {
        Flags() : changed(false) { }
     a98:	86 81       	ldd	r24, Z+6	; 0x06
     a9a:	8e 7f       	andi	r24, 0xFE	; 254
     a9c:	86 83       	std	Z+6, r24	; 0x06
     a9e:	37 96       	adiw	r30, 0x07	; 7
    // Stats to be tracked and sent; mandatory/priority items must be first.
    // A copy is taken of the user-supplied set of descriptions, preserving order.
    DescValueTuple stats[MaxStats];

  public:
    SimpleStatsRotation() : SimpleStatsRotationBase(stats, MaxStats) { }
     aa0:	82 e0       	ldi	r24, 0x02	; 2
     aa2:	e8 37       	cpi	r30, 0x78	; 120
     aa4:	f8 07       	cpc	r31, r24
     aa6:	91 f7       	brne	.-28     	; 0xa8c <global constructors keyed to _Z10inWarmModev+0xc2>
  else if(getSubCycleTime() >= nearOverrunThreshold)
    {
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("?O"); // Near overrun.  Note 2ms/char to send...
    }
#endif
  }
     aa8:	08 95       	ret

00000aaa <pollIO(bool)>:
// Call this to do an I/O poll if needed; returns true if something useful happened.
// This call should typically take << 1ms at 1MHz CPU.
// Does not change CPU clock speeds, mess with interrupts (other than possible brief blocking), or sleep.
// Limits actual poll rate to something like once every 32ms, unless force is true.
//   * force if true then force full poll on every call (ie do not internally rate-limit)
bool pollIO(const bool force)
     aaa:	38 2f       	mov	r19, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     aac:	f9 99       	sbic	0x1f, 1	; 31
     aae:	fe cf       	rjmp	.-4      	; 0xaac <pollIO(bool)+0x2>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     ab0:	82 e1       	ldi	r24, 0x12	; 18
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	92 bd       	out	0x22, r25	; 34
     ab6:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     ab8:	f8 9a       	sbi	0x1f, 0	; 31
     aba:	80 b5       	in	r24, 0x20	; 32
  {
#if defined(ENABLE_BOILER_HUB) && defined(USE_MODULE_FHT8VSIMPLE)
  if(inHubMode())
     abc:	8f 3f       	cpi	r24, 0xFF	; 255
     abe:	99 f0       	breq	.+38     	; 0xae6 <pollIO(bool)+0x3c>
    {
    static volatile uint8_t _pO_lastPoll;

    // Poll RX at most about every ~32ms to help approx match spil rate when called in loop with 30ms nap.
    const uint8_t sct = getSubCycleTime();
     ac0:	20 91 b2 00 	lds	r18, 0x00B2
    if(force || ((0 == (sct & 3)) && (sct != _pO_lastPoll)))
     ac4:	33 23       	and	r19, r19
     ac6:	51 f4       	brne	.+20     	; 0xadc <pollIO(bool)+0x32>
     ac8:	82 2f       	mov	r24, r18
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	83 70       	andi	r24, 0x03	; 3
     ace:	90 70       	andi	r25, 0x00	; 0
     ad0:	89 2b       	or	r24, r25
     ad2:	49 f4       	brne	.+18     	; 0xae6 <pollIO(bool)+0x3c>
     ad4:	80 91 78 02 	lds	r24, 0x0278
     ad8:	28 17       	cp	r18, r24
     ada:	29 f0       	breq	.+10     	; 0xae6 <pollIO(bool)+0x3c>
      {
      _pO_lastPoll = sct;
     adc:	20 93 78 02 	sts	0x0278, r18
      if(FHT8VCallForHeatPoll()) // Check if call-for-heat has been overheard.
     ae0:	0e 94 c2 08 	call	0x1184	; 0x1184 <FHT8VCallForHeatPoll()>
     ae4:	08 95       	ret
     ae6:	80 e0       	ldi	r24, 0x00	; 0
        { return(true); }
      }
    }
#endif
  return(false);
  }
     ae8:	08 95       	ret

00000aea <ModelledRadValve::recalibrate()>:
// If possible exercise the valve to avoid pin sticking and recalibrate valve travel.
// Default does nothing.
void ModelledRadValve::recalibrate()
  {
#ifdef USE_MODULE_FHT8VSIMPLE
  FHT8VSyncAndTXReset(); // Should this be decalcinate instead/also/first?
     aea:	0e 94 86 07 	call	0xf0c	; 0xf0c <FHT8VSyncAndTXReset()>
#endif
  }
     aee:	08 95       	ret

00000af0 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)>:
// Returns false if a full set of stats not available, eg including the specified hour.
// Always returns false if all samples are the same.
//   * inTop  test for membership of the top quartile if true, bottom quartile if false
//   * statsSet  stats set number to use.
//   * hour  hour of day to use or ~0 for current hour.
bool inOutlierQuartile(const uint8_t inTop, const uint8_t statsSet, const uint8_t hour)
     af0:	0f 93       	push	r16
     af2:	1f 93       	push	r17
     af4:	08 2f       	mov	r16, r24
     af6:	16 2f       	mov	r17, r22
  {
  if(statsSet >= EE_STATS_SETS) { return(false); } // Bad stats set number, ie unsafe.
     af8:	6a 30       	cpi	r22, 0x0A	; 10
     afa:	08 f0       	brcs	.+2      	; 0xafe <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0xe>
     afc:	40 c0       	rjmp	.+128    	; 0xb7e <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x8e>
  const uint8_t hh = (hour > 23) ? getHoursLT() : hour;
     afe:	48 31       	cpi	r20, 0x18	; 24
     b00:	18 f0       	brcs	.+6      	; 0xb08 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x18>
     b02:	0e 94 ef 11 	call	0x23de	; 0x23de <getHoursLT()>
     b06:	48 2f       	mov	r20, r24
  const uint8_t *ss = (uint8_t *)(EE_STATS_START_ADDR(statsSet));
     b08:	88 e1       	ldi	r24, 0x18	; 24
     b0a:	18 9f       	mul	r17, r24
     b0c:	b0 01       	movw	r22, r0
     b0e:	11 24       	eor	r1, r1
     b10:	9b 01       	movw	r18, r22
     b12:	20 50       	subi	r18, 0x00	; 0
     b14:	3f 4f       	sbci	r19, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     b16:	f9 99       	sbic	0x1f, 1	; 31
     b18:	fe cf       	rjmp	.-4      	; 0xb16 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x26>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     b1a:	c9 01       	movw	r24, r18
     b1c:	84 0f       	add	r24, r20
     b1e:	91 1d       	adc	r25, r1
     b20:	92 bd       	out	0x22, r25	; 34
     b22:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     b24:	f8 9a       	sbi	0x1f, 0	; 31
     b26:	40 b5       	in	r20, 0x20	; 32
  const uint8_t sample = eeprom_read_byte(ss + hh);
  if(STATS_UNSET_INT == sample) { return(false); }
  if(inTop) { return(inTopQuartile(ss, sample)); }
     b28:	00 23       	and	r16, r16
     b2a:	21 f4       	brne	.+8      	; 0xb34 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x44>
     b2c:	90 e0       	ldi	r25, 0x00	; 0
//   * s is start of (24) sample set in EEPROM
//   * sample to be tested for being in lower quartile
bool inBottomQuartile(const uint8_t *sE, const uint8_t sample)
  {
  uint8_t valuesHigher = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
     b2e:	68 5e       	subi	r22, 0xE8	; 232
     b30:	7e 4f       	sbci	r23, 0xFE	; 254
     b32:	22 c0       	rjmp	.+68     	; 0xb78 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x88>
  if(statsSet >= EE_STATS_SETS) { return(false); } // Bad stats set number, ie unsafe.
  const uint8_t hh = (hour > 23) ? getHoursLT() : hour;
  const uint8_t *ss = (uint8_t *)(EE_STATS_START_ADDR(statsSet));
  const uint8_t sample = eeprom_read_byte(ss + hh);
  if(STATS_UNSET_INT == sample) { return(false); }
  if(inTop) { return(inTopQuartile(ss, sample)); }
     b34:	90 e0       	ldi	r25, 0x00	; 0
//   * s is start of (24) sample set in EEPROM
//   * sample to be tested for being in lower quartile
bool inTopQuartile(const uint8_t *sE, const uint8_t sample)
  {
  uint8_t valuesLower = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
     b36:	68 5e       	subi	r22, 0xE8	; 232
     b38:	7e 4f       	sbci	r23, 0xFE	; 254
     b3a:	0d c0       	rjmp	.+26     	; 0xb56 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x66>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     b3c:	f9 99       	sbic	0x1f, 1	; 31
     b3e:	fe cf       	rjmp	.-4      	; 0xb3c <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x4c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     b40:	32 bd       	out	0x22, r19	; 34
     b42:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     b44:	f8 9a       	sbi	0x1f, 0	; 31
     b46:	80 b5       	in	r24, 0x20	; 32
    {
    const uint8_t v = eeprom_read_byte(sE); 
    if(STATS_UNSET_INT == v) { return(false); } // Abort if not a full set of stats (eg at least one full day's worth). 
    if(v < sample) { if(++valuesLower >= 18) { return(true); } } // Stop as soon as known to be in upper quartile.
     b48:	84 17       	cp	r24, r20
     b4a:	18 f4       	brcc	.+6      	; 0xb52 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x62>
     b4c:	9f 5f       	subi	r25, 0xFF	; 255
     b4e:	92 31       	cpi	r25, 0x12	; 18
     b50:	c0 f4       	brcc	.+48     	; 0xb82 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x92>
//   * s is start of (24) sample set in EEPROM
//   * sample to be tested for being in lower quartile
bool inTopQuartile(const uint8_t *sE, const uint8_t sample)
  {
  uint8_t valuesLower = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
     b52:	2f 5f       	subi	r18, 0xFF	; 255
     b54:	3f 4f       	sbci	r19, 0xFF	; 255
     b56:	26 17       	cp	r18, r22
     b58:	37 07       	cpc	r19, r23
     b5a:	81 f7       	brne	.-32     	; 0xb3c <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x4c>
     b5c:	10 c0       	rjmp	.+32     	; 0xb7e <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x8e>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     b5e:	f9 99       	sbic	0x1f, 1	; 31
     b60:	fe cf       	rjmp	.-4      	; 0xb5e <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x6e>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     b62:	32 bd       	out	0x22, r19	; 34
     b64:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     b66:	f8 9a       	sbi	0x1f, 0	; 31
     b68:	80 b5       	in	r24, 0x20	; 32
  uint8_t valuesHigher = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
    {
    const uint8_t v = eeprom_read_byte(sE); 
    if(STATS_UNSET_INT == v) { return(false); } // Abort if not a full set of stats (eg at least one full day's worth). 
    if(v > sample) { if(++valuesHigher >= 18) { return(true); } } // Stop as soon as known to be in lower quartile.
     b6a:	48 17       	cp	r20, r24
     b6c:	18 f4       	brcc	.+6      	; 0xb74 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x84>
     b6e:	9f 5f       	subi	r25, 0xFF	; 255
     b70:	92 31       	cpi	r25, 0x12	; 18
     b72:	38 f4       	brcc	.+14     	; 0xb82 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x92>
//   * s is start of (24) sample set in EEPROM
//   * sample to be tested for being in lower quartile
bool inBottomQuartile(const uint8_t *sE, const uint8_t sample)
  {
  uint8_t valuesHigher = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
     b74:	2f 5f       	subi	r18, 0xFF	; 255
     b76:	3f 4f       	sbci	r19, 0xFF	; 255
     b78:	26 17       	cp	r18, r22
     b7a:	37 07       	cpc	r19, r23
     b7c:	81 f7       	brne	.-32     	; 0xb5e <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x6e>
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	01 c0       	rjmp	.+2      	; 0xb84 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x94>
     b82:	81 e0       	ldi	r24, 0x01	; 1
  const uint8_t *ss = (uint8_t *)(EE_STATS_START_ADDR(statsSet));
  const uint8_t sample = eeprom_read_byte(ss + hh);
  if(STATS_UNSET_INT == sample) { return(false); }
  if(inTop) { return(inTopQuartile(ss, sample)); }
  return(inBottomQuartile(ss, sample));
  }
     b84:	1f 91       	pop	r17
     b86:	0f 91       	pop	r16
     b88:	08 95       	ret

00000b8a <ModelledRadValve::computeTargetTemp()>:
// Will be called by computeCallForHeat().
// One aim is to allow reasonable energy savings (10--30%)
// even if the device is left in WARM mode all the time,
// using occupancy/light/etc to determine when temperature can be set back
// without annoying users.
uint8_t ModelledRadValve::computeTargetTemp()
     b8a:	ef 92       	push	r14
     b8c:	ff 92       	push	r15
     b8e:	0f 93       	push	r16
     b90:	1f 93       	push	r17
  {
  // In FROST mode.
  if(!inWarmMode())
     b92:	80 91 7c 02 	lds	r24, 0x027C
     b96:	88 23       	and	r24, r24
     b98:	69 f5       	brne	.+90     	; 0xbf4 <ModelledRadValve::computeTargetTemp()+0x6a>
    {
    const uint8_t frostC = getFROSTTargetC();
     b9a:	0e 94 19 02 	call	0x432	; 0x432 <getFROSTTargetC()>
     b9e:	18 2f       	mov	r17, r24
    // At other times more relaxed checking (eg lower power) can be used.
    bool increaseCheckForOccupancy() { return(!isLikelyRecentlyOccupied() && isLikelyOccupied() && !reportedRecently()); }

    // Get number of hours room vacant, zero when room occupied; does not wrap.
    // If forced to zero as soon as occupancy is detected.
    uint16_t getVacancyH() { return((value != 0) ? 0 : vacancyH); }
     ba0:	80 91 fb 01 	lds	r24, 0x01FB
     ba4:	88 23       	and	r24, r24
     ba6:	29 f4       	brne	.+10     	; 0xbb2 <ModelledRadValve::computeTargetTemp()+0x28>
    // If scheduled WARM is due soon then ensure that room is at least at setback temperature
    // to give room a chance to hit the target, and for furniture and surfaces to be warm, etc.
    // Don't do this if the room has been vacant for a long time (eg so as to avoid pre-warm being higher than WARM ever).
    // Don't do this if there has been recent manual intervention, eg to allow manual 'cancellation' of pre-heat (TODO-464).
    // Only do this if the target WARM temperature is NOT an 'eco' temperature (ie very near the bottom of the scale).
    if(!Occupancy.longVacant() && isAnyScheduleOnWARMSoon() && !recentUIControlUse())
     ba8:	80 91 fe 01 	lds	r24, 0x01FE
     bac:	89 31       	cpi	r24, 0x19	; 25
     bae:	08 f0       	brcs	.+2      	; 0xbb2 <ModelledRadValve::computeTargetTemp()+0x28>
     bb0:	92 c0       	rjmp	.+292    	; 0xcd6 <ModelledRadValve::computeTargetTemp()+0x14c>
     bb2:	0e 94 93 12 	call	0x2526	; 0x2526 <isAnyScheduleOnWARMSoon()>
     bb6:	88 23       	and	r24, r24
     bb8:	09 f4       	brne	.+2      	; 0xbbc <ModelledRadValve::computeTargetTemp()+0x32>
     bba:	8d c0       	rjmp	.+282    	; 0xcd6 <ModelledRadValve::computeTargetTemp()+0x14c>
     bbc:	0e 94 f7 13 	call	0x27ee	; 0x27ee <recentUIControlUse()>
     bc0:	88 23       	and	r24, r24
     bc2:	09 f0       	breq	.+2      	; 0xbc6 <ModelledRadValve::computeTargetTemp()+0x3c>
     bc4:	88 c0       	rjmp	.+272    	; 0xcd6 <ModelledRadValve::computeTargetTemp()+0x14c>
      {
      const uint8_t warmTarget = getWARMTargetC();
     bc6:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <getWARMTargetC()>
     bca:	08 2f       	mov	r16, r24
      // Compute putative pre-warm temperature...
      const uint8_t preWarmTempC = fnmax((uint8_t)(warmTarget - (hasEcoBias() ? SETBACK_ECO : SETBACK_DEFAULT)), frostC);
     bcc:	0e 94 11 02 	call	0x422	; 0x422 <hasEcoBias()>
     bd0:	88 23       	and	r24, r24
     bd2:	11 f4       	brne	.+4      	; 0xbd8 <ModelledRadValve::computeTargetTemp()+0x4e>
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	01 c0       	rjmp	.+2      	; 0xbda <ModelledRadValve::computeTargetTemp()+0x50>
     bd8:	82 e0       	ldi	r24, 0x02	; 2
     bda:	90 2f       	mov	r25, r16
     bdc:	98 1b       	sub	r25, r24
     bde:	89 2f       	mov	r24, r25
     be0:	91 17       	cp	r25, r17
     be2:	08 f4       	brcc	.+2      	; 0xbe6 <ModelledRadValve::computeTargetTemp()+0x5c>
     be4:	78 c0       	rjmp	.+240    	; 0xcd6 <ModelledRadValve::computeTargetTemp()+0x14c>
      if((frostC < preWarmTempC) && (!isEcoTemperature(warmTarget)))
     be6:	19 17       	cp	r17, r25
     be8:	08 f0       	brcs	.+2      	; 0xbec <ModelledRadValve::computeTargetTemp()+0x62>
     bea:	75 c0       	rjmp	.+234    	; 0xcd6 <ModelledRadValve::computeTargetTemp()+0x14c>
     bec:	02 31       	cpi	r16, 0x12	; 18
     bee:	08 f0       	brcs	.+2      	; 0xbf2 <ModelledRadValve::computeTargetTemp()+0x68>
     bf0:	75 c0       	rjmp	.+234    	; 0xcdc <ModelledRadValve::computeTargetTemp()+0x152>
     bf2:	71 c0       	rjmp	.+226    	; 0xcd6 <ModelledRadValve::computeTargetTemp()+0x14c>

#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
     bf4:	80 91 79 02 	lds	r24, 0x0279
     bf8:	88 23       	and	r24, r24
     bfa:	09 f4       	brne	.+2      	; 0xbfe <ModelledRadValve::computeTargetTemp()+0x74>
     bfc:	74 c0       	rjmp	.+232    	; 0xce6 <ModelledRadValve::computeTargetTemp()+0x15c>
    }

#ifdef SUPPORT_BAKE
  else if(inBakeMode()) // If in BAKE mode then use elevated target.
    {
    return(fnmin((uint8_t)(getWARMTargetC() + BAKE_UPLIFT), (uint8_t)MAX_TARGET_C)); // No setbacks apply in BAKE mode.
     bfe:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <getWARMTargetC()>
     c02:	8b 5f       	subi	r24, 0xFB	; 251
     c04:	80 36       	cpi	r24, 0x60	; 96
     c06:	08 f4       	brcc	.+2      	; 0xc0a <ModelledRadValve::computeTargetTemp()+0x80>
     c08:	69 c0       	rjmp	.+210    	; 0xcdc <ModelledRadValve::computeTargetTemp()+0x152>
     c0a:	8f e5       	ldi	r24, 0x5F	; 95
     c0c:	67 c0       	rjmp	.+206    	; 0xcdc <ModelledRadValve::computeTargetTemp()+0x152>
     c0e:	80 91 fe 01 	lds	r24, 0x01FE
     c12:	90 e0       	ldi	r25, 0x00	; 0
    bool longVacant() { return(getVacancyH() > longVacantHThrH); }

    // Returns true if room appears to have been vacant for much longer than longVacant().
    // For a home or an office no sign of activity for this long suggests a long weekend or a holiday for example.
    // Longer than longVacant() but much less than 3 days to try to capture some weekend-absence savings.
    bool longLongVacant() { return(getVacancyH() > longLongVacantHThrH); }
     c14:	ff 24       	eor	r15, r15
     c16:	88 97       	sbiw	r24, 0x28	; 40
     c18:	28 f0       	brcs	.+10     	; 0xc24 <ModelledRadValve::computeTargetTemp()+0x9a>
     c1a:	ff 24       	eor	r15, r15
     c1c:	f3 94       	inc	r15
    // but should also work in artificially-lit offices (maybe ~12h continuous lighting).
    // No 'lights-on' signal for a whole day is a fairly strong indication that the heat can be turned down.
    // TODO-451: TODO-453: ignore a short lights-off, eg from someone briefly leaving room or a transient shadow.
    // TODO: consider bottom quartile of amblient light as alternative setback trigger for near-continuously-lit spaces (aiming to spot daylight signature).
    const bool longLongVacant = Occupancy.longLongVacant();
    const bool longVacant = longLongVacant || Occupancy.longVacant();
     c1e:	01 e0       	ldi	r16, 0x01	; 1
     c20:	11 e0       	ldi	r17, 0x01	; 1
     c22:	29 c0       	rjmp	.+82     	; 0xc76 <ModelledRadValve::computeTargetTemp()+0xec>
    // At other times more relaxed checking (eg lower power) can be used.
    bool increaseCheckForOccupancy() { return(!isLikelyRecentlyOccupied() && isLikelyOccupied() && !reportedRecently()); }

    // Get number of hours room vacant, zero when room occupied; does not wrap.
    // If forced to zero as soon as occupancy is detected.
    uint16_t getVacancyH() { return((value != 0) ? 0 : vacancyH); }
     c24:	80 91 fb 01 	lds	r24, 0x01FB
     c28:	88 23       	and	r24, r24
     c2a:	11 f0       	breq	.+4      	; 0xc30 <ModelledRadValve::computeTargetTemp()+0xa6>
     c2c:	10 e0       	ldi	r17, 0x00	; 0
     c2e:	06 c0       	rjmp	.+12     	; 0xc3c <ModelledRadValve::computeTargetTemp()+0xb2>
     c30:	10 e0       	ldi	r17, 0x00	; 0
     c32:	80 91 fe 01 	lds	r24, 0x01FE
     c36:	89 31       	cpi	r24, 0x19	; 25
     c38:	08 f0       	brcs	.+2      	; 0xc3c <ModelledRadValve::computeTargetTemp()+0xb2>
     c3a:	11 e0       	ldi	r17, 0x01	; 1

    // Returns true if the room appears to be likely occupied (with active users) now.
    // Operates on a timeout; calling markAsOccupied() restarts the timer.
    // Defaults to false (and API still exists) when OCCUPANCY_SUPPORT not defined.
    // Thread-safe.
    bool isLikelyOccupied() { return(0 != occupationCountdownM); }
     c3c:	80 91 fc 01 	lds	r24, 0x01FC
    const bool notLikelyOccupiedSoon = longLongVacant || (Occupancy.isLikelyUnoccupied() && inOutlierQuartile(false, EE_STATS_SET_OCCPC_BY_HOUR_SMOOTHED));
     c40:	88 23       	and	r24, r24
     c42:	41 f4       	brne	.+16     	; 0xc54 <ModelledRadValve::computeTargetTemp()+0xca>
     c44:	65 e0       	ldi	r22, 0x05	; 5
     c46:	4f ef       	ldi	r20, 0xFF	; 255
     c48:	0e 94 78 05 	call	0xaf0	; 0xaf0 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)>
     c4c:	88 23       	and	r24, r24
     c4e:	11 f0       	breq	.+4      	; 0xc54 <ModelledRadValve::computeTargetTemp()+0xca>
     c50:	01 e0       	ldi	r16, 0x01	; 1
     c52:	01 c0       	rjmp	.+2      	; 0xc56 <ModelledRadValve::computeTargetTemp()+0xcc>
     c54:	00 e0       	ldi	r16, 0x00	; 0
    if(longVacant ||
     c56:	11 23       	and	r17, r17
     c58:	71 f4       	brne	.+28     	; 0xc76 <ModelledRadValve::computeTargetTemp()+0xec>
     c5a:	00 23       	and	r16, r16
     c5c:	21 f4       	brne	.+8      	; 0xc66 <ModelledRadValve::computeTargetTemp()+0xdc>
     c5e:	80 91 1e 03 	lds	r24, 0x031E
     c62:	8b 30       	cpi	r24, 0x0B	; 11
     c64:	d0 f1       	brcs	.+116    	; 0xcda <ModelledRadValve::computeTargetTemp()+0x150>
     c66:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <isAnyScheduleOnWARMNow()>
     c6a:	88 23       	and	r24, r24
     c6c:	b1 f5       	brne	.+108    	; 0xcda <ModelledRadValve::computeTargetTemp()+0x150>
     c6e:	0e 94 f7 13 	call	0x27ee	; 0x27ee <recentUIControlUse()>
     c72:	88 23       	and	r24, r24
     c74:	91 f5       	brne	.+100    	; 0xcda <ModelledRadValve::computeTargetTemp()+0x150>
                               (!longLongVacant && AmbLight.isRoomLit()) ||
                               (!longLongVacant && inOutlierQuartile(true, EE_STATS_SET_OCCPC_BY_HOUR_SMOOTHED)) ||
                               (!longVacant && isAnyScheduleOnWARMSoon())) ?
              SETBACK_DEFAULT :
          ((longLongVacant || (notLikelyOccupiedSoon && isEcoTemperature(wt))) ?
              SETBACK_FULL : SETBACK_ECO);
     c76:	0e 94 11 02 	call	0x422	; 0x422 <hasEcoBias()>
     c7a:	88 23       	and	r24, r24
     c7c:	01 f1       	breq	.+64     	; 0xcbe <ModelledRadValve::computeTargetTemp()+0x134>
     c7e:	80 91 fc 01 	lds	r24, 0x01FC
     c82:	88 23       	and	r24, r24
     c84:	e1 f4       	brne	.+56     	; 0xcbe <ModelledRadValve::computeTargetTemp()+0x134>
     c86:	ff 20       	and	r15, r15
     c88:	59 f4       	brne	.+22     	; 0xca0 <ModelledRadValve::computeTargetTemp()+0x116>
    uint16_t getRaw() { return(rawValue); }

    // Returns true if room is lit enough for someone to be active.
    // False if unknown.
    // Thread-safe and usable within ISRs (Interrupt Service Routines).
    bool isRoomLit() const { return(isRoomLitFlag); }
     c8a:	80 91 1d 03 	lds	r24, 0x031D
     c8e:	88 23       	and	r24, r24
     c90:	b1 f4       	brne	.+44     	; 0xcbe <ModelledRadValve::computeTargetTemp()+0x134>
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	65 e0       	ldi	r22, 0x05	; 5
     c96:	4f ef       	ldi	r20, 0xFF	; 255
     c98:	0e 94 78 05 	call	0xaf0	; 0xaf0 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)>
     c9c:	88 23       	and	r24, r24
     c9e:	79 f4       	brne	.+30     	; 0xcbe <ModelledRadValve::computeTargetTemp()+0x134>
     ca0:	11 23       	and	r17, r17
     ca2:	21 f4       	brne	.+8      	; 0xcac <ModelledRadValve::computeTargetTemp()+0x122>
     ca4:	0e 94 93 12 	call	0x2526	; 0x2526 <isAnyScheduleOnWARMSoon()>
     ca8:	88 23       	and	r24, r24
     caa:	49 f4       	brne	.+18     	; 0xcbe <ModelledRadValve::computeTargetTemp()+0x134>
     cac:	ff 20       	and	r15, r15
     cae:	49 f4       	brne	.+18     	; 0xcc2 <ModelledRadValve::computeTargetTemp()+0x138>
     cb0:	00 23       	and	r16, r16
     cb2:	19 f0       	breq	.+6      	; 0xcba <ModelledRadValve::computeTargetTemp()+0x130>
     cb4:	81 e1       	ldi	r24, 0x11	; 17
     cb6:	8e 15       	cp	r24, r14
     cb8:	20 f4       	brcc	.+8      	; 0xcc2 <ModelledRadValve::computeTargetTemp()+0x138>
     cba:	12 e0       	ldi	r17, 0x02	; 2
     cbc:	03 c0       	rjmp	.+6      	; 0xcc4 <ModelledRadValve::computeTargetTemp()+0x13a>
     cbe:	11 e0       	ldi	r17, 0x01	; 1
     cc0:	01 c0       	rjmp	.+2      	; 0xcc4 <ModelledRadValve::computeTargetTemp()+0x13a>
     cc2:	13 e0       	ldi	r17, 0x03	; 3

      return(fnmax((uint8_t)(wt - setback), getFROSTTargetC())); // Target must never be set low enough to create a frost/freeze hazard.
     cc4:	0e 94 19 02 	call	0x432	; 0x432 <getFROSTTargetC()>
     cc8:	98 2f       	mov	r25, r24
     cca:	8e 2d       	mov	r24, r14
     ccc:	81 1b       	sub	r24, r17
     cce:	89 17       	cp	r24, r25
     cd0:	28 f4       	brcc	.+10     	; 0xcdc <ModelledRadValve::computeTargetTemp()+0x152>
     cd2:	89 2f       	mov	r24, r25
     cd4:	03 c0       	rjmp	.+6      	; 0xcdc <ModelledRadValve::computeTargetTemp()+0x152>
     cd6:	81 2f       	mov	r24, r17
     cd8:	01 c0       	rjmp	.+2      	; 0xcdc <ModelledRadValve::computeTargetTemp()+0x152>
     cda:	8e 2d       	mov	r24, r14
      }
    // Else use WARM target as-is.
    return(wt);
    }
  }
     cdc:	1f 91       	pop	r17
     cde:	0f 91       	pop	r16
     ce0:	ff 90       	pop	r15
     ce2:	ef 90       	pop	r14
     ce4:	08 95       	ret
    }
#endif

  else // In 'WARM' mode with possible setback.
    {
    const uint8_t wt = getWARMTargetC();
     ce6:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <getWARMTargetC()>
     cea:	e8 2e       	mov	r14, r24
    // At other times more relaxed checking (eg lower power) can be used.
    bool increaseCheckForOccupancy() { return(!isLikelyRecentlyOccupied() && isLikelyOccupied() && !reportedRecently()); }

    // Get number of hours room vacant, zero when room occupied; does not wrap.
    // If forced to zero as soon as occupancy is detected.
    uint16_t getVacancyH() { return((value != 0) ? 0 : vacancyH); }
     cec:	80 91 fb 01 	lds	r24, 0x01FB
     cf0:	88 23       	and	r24, r24
     cf2:	09 f4       	brne	.+2      	; 0xcf6 <ModelledRadValve::computeTargetTemp()+0x16c>
     cf4:	8c cf       	rjmp	.-232    	; 0xc0e <ModelledRadValve::computeTargetTemp()+0x84>
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	8c cf       	rjmp	.-232    	; 0xc14 <ModelledRadValve::computeTargetTemp()+0x8a>

00000cfc <ModelledRadValve::computeTargetTemperature()>:
  // Leave value position as was...
  return(valvePCOpen);
  }

// Compute/update target temperature and set up state for tick()/computeRequiredTRVPercentOpen().
void ModelledRadValve::computeTargetTemperature()
     cfc:	0f 93       	push	r16
     cfe:	1f 93       	push	r17
     d00:	cf 93       	push	r28
     d02:	df 93       	push	r29
     d04:	ec 01       	movw	r28, r24
  {
  // Compute basic target temperature.
  const uint8_t newTarget = computeTargetTemp();
     d06:	0e 94 c5 05 	call	0xb8a	; 0xb8a <ModelledRadValve::computeTargetTemp()>
     d0a:	08 2f       	mov	r16, r24

  // Set up state for computeRequiredTRVPercentOpen().
  inputState.targetTempC = newTarget;
     d0c:	8b 83       	std	Y+3, r24	; 0x03
  inputState.minPCOpen = getMinPercentOpen();
     d0e:	e8 81       	ld	r30, Y
     d10:	f9 81       	ldd	r31, Y+1	; 0x01
     d12:	00 8c       	ldd	r0, Z+24	; 0x18
     d14:	f1 8d       	ldd	r31, Z+25	; 0x19
     d16:	e0 2d       	mov	r30, r0
     d18:	ce 01       	movw	r24, r28
     d1a:	09 95       	icall
     d1c:	8c 83       	std	Y+4, r24	; 0x04
  inputState.maxPCOpen = getMaxPercentageOpenAllowed();
     d1e:	84 e6       	ldi	r24, 0x64	; 100
     d20:	8d 83       	std	Y+5, r24	; 0x05
  inputState.glacial = glacial;
     d22:	8c a9       	ldd	r24, Y+52	; 0x34
     d24:	8f 83       	std	Y+7, r24	; 0x07

#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
     d26:	10 91 7c 02 	lds	r17, 0x027C
     d2a:	11 23       	and	r17, r17
     d2c:	11 f4       	brne	.+4      	; 0xd32 <ModelledRadValve::computeTargetTemperature()+0x36>
     d2e:	80 e0       	ldi	r24, 0x00	; 0
     d30:	04 c0       	rjmp	.+8      	; 0xd3a <ModelledRadValve::computeTargetTemperature()+0x3e>
     d32:	80 91 79 02 	lds	r24, 0x0279
     d36:	81 11       	cpse	r24, r1
     d38:	81 e0       	ldi	r24, 0x01	; 1
  // Set up state for computeRequiredTRVPercentOpen().
  inputState.targetTempC = newTarget;
  inputState.minPCOpen = getMinPercentOpen();
  inputState.maxPCOpen = getMaxPercentageOpenAllowed();
  inputState.glacial = glacial;
  inputState.inBakeMode = inBakeMode();
     d3a:	89 87       	std	Y+9, r24	; 0x09
  inputState.hasEcoBias = hasEcoBias();
     d3c:	0e 94 11 02 	call	0x422	; 0x422 <hasEcoBias()>
     d40:	88 87       	std	Y+8, r24	; 0x08

    // Returns true if room is light enough for someone to be active.
    // False if unknown.
    // Thread-safe and usable within ISRs (Interrupt Service Routines).
    bool isRoomDark() const { return(!isRoomLitFlag); }
     d42:	80 91 1d 03 	lds	r24, 0x031D
  // Widen the allowed deadband significantly in a dark/quiet/vacant room (TODO-383)
  // (or in FROST mode, or if temperature is jittery eg changing fast and filtering has been engaged)
  // to attempt to reduce the total number and size of adjustments and thus reduce noise/disturbance (and battery drain).
  // The wider deadband (less good temperature regulation) might be noticeable/annoying to sensitive occupants.
  // FIXME: With a wider deadband may also simply suppress any movement/noise on some/most minutes while close to target temperature.
  inputState.widenDeadband = AmbLight.isRoomDark() || Occupancy.longVacant() || (!inWarmMode()) || retainedState.isFiltering;
     d46:	88 23       	and	r24, r24
     d48:	61 f0       	breq	.+24     	; 0xd62 <ModelledRadValve::computeTargetTemperature()+0x66>
     d4a:	80 91 fb 01 	lds	r24, 0x01FB
     d4e:	88 23       	and	r24, r24
     d50:	21 f4       	brne	.+8      	; 0xd5a <ModelledRadValve::computeTargetTemperature()+0x5e>
     d52:	80 91 fe 01 	lds	r24, 0x01FE
     d56:	89 31       	cpi	r24, 0x19	; 25
     d58:	20 f4       	brcc	.+8      	; 0xd62 <ModelledRadValve::computeTargetTemperature()+0x66>
     d5a:	11 23       	and	r17, r17
     d5c:	11 f0       	breq	.+4      	; 0xd62 <ModelledRadValve::computeTargetTemperature()+0x66>
     d5e:	8d 85       	ldd	r24, Y+13	; 0x0d
     d60:	01 c0       	rjmp	.+2      	; 0xd64 <ModelledRadValve::computeTargetTemperature()+0x68>
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	8e 83       	std	Y+6, r24	; 0x06
// ie to the middle of the specified degree, which is more intuitive,
// and which may save a little energy if users target the specified temperatures.
// Suggestion c/o GG ~2014/10 code, and generally less misleading anyway!
void ModelledRadValveInputState::setReferenceTemperatures(const int currentTempC16)
  {
  const int referenceTempC16 = currentTempC16 + refTempOffsetC16; // TODO-386: push targeted temperature down by 0.5C to middle of degree.
     d66:	80 91 21 03 	lds	r24, 0x0321
     d6a:	90 91 22 03 	lds	r25, 0x0322
     d6e:	08 96       	adiw	r24, 0x08	; 8
  refTempC16 = referenceTempC16;
     d70:	9b 87       	std	Y+11, r25	; 0x0b
     d72:	8a 87       	std	Y+10, r24	; 0x0a
  // FIXME: With a wider deadband may also simply suppress any movement/noise on some/most minutes while close to target temperature.
  inputState.widenDeadband = AmbLight.isRoomDark() || Occupancy.longVacant() || (!inWarmMode()) || retainedState.isFiltering;
  // Capture adjusted reference/room temperatures
  // and set callingForHeat flag also using same outline logic as computeRequiredTRVPercentOpen() will use.
  inputState.setReferenceTemperatures(TemperatureC16.get());
  callingForHeat = (newTarget >= (inputState.refTempC16 >> 4));
     d74:	40 e0       	ldi	r20, 0x00	; 0
     d76:	20 2f       	mov	r18, r16
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	a4 e0       	ldi	r26, 0x04	; 4
     d7c:	95 95       	asr	r25
     d7e:	87 95       	ror	r24
     d80:	aa 95       	dec	r26
     d82:	e1 f7       	brne	.-8      	; 0xd7c <ModelledRadValve::computeTargetTemperature()+0x80>
     d84:	28 17       	cp	r18, r24
     d86:	39 07       	cpc	r19, r25
     d88:	0c f0       	brlt	.+2      	; 0xd8c <ModelledRadValve::computeTargetTemperature()+0x90>
     d8a:	41 e0       	ldi	r20, 0x01	; 1
     d8c:	4b ab       	std	Y+51, r20	; 0x33
  }
     d8e:	df 91       	pop	r29
     d90:	cf 91       	pop	r28
     d92:	1f 91       	pop	r17
     d94:	0f 91       	pop	r16
     d96:	08 95       	ret

00000d98 <ModelledRadValve::computeCallForHeat()>:
// The inputs must be valid (and recent).
// Values set are targetTempC, value (TRVPercentOpen).
// This may also prepare data such as TX command sequences for the TRV, boiler, etc.
// This routine may take significant CPU time; no I/O is done, only internal state is updated.
// Returns true if valve target changed and thus messages may need to be recomputed/sent/etc.
void ModelledRadValve::computeCallForHeat()
     d98:	cf 93       	push	r28
     d9a:	df 93       	push	r29
     d9c:	ec 01       	movw	r28, r24
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
     d9e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     da0:	f8 94       	cli
    {
#ifdef SUPPORT_BAKE
    // Cancel any BAKE mode once temperature target has been hit.
    if(!callingForHeat) { bakeCountdownM = 0; }
     da2:	8b a9       	ldd	r24, Y+51	; 0x33
     da4:	88 23       	and	r24, r24
     da6:	19 f4       	brne	.+6      	; 0xdae <ModelledRadValve::computeCallForHeat()+0x16>
     da8:	10 92 79 02 	sts	0x0279, r1
     dac:	07 c0       	rjmp	.+14     	; 0xdbc <ModelledRadValve::computeCallForHeat()+0x24>
    // Run down BAKE mode timer if need be, one tick per minute.
    else if(bakeCountdownM > 0) { --bakeCountdownM; }
     dae:	80 91 79 02 	lds	r24, 0x0279
     db2:	88 23       	and	r24, r24
     db4:	19 f0       	breq	.+6      	; 0xdbc <ModelledRadValve::computeCallForHeat()+0x24>
     db6:	81 50       	subi	r24, 0x01	; 1
     db8:	80 93 79 02 	sts	0x0279, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     dbc:	9f bf       	out	0x3f, r25	; 63
#endif
    }

  // Compute target and ensure that required input state is set for computeRequiredTRVPercentOpen().
  computeTargetTemperature();
     dbe:	ce 01       	movw	r24, r28
     dc0:	0e 94 7e 06 	call	0xcfc	; 0xcfc <ModelledRadValve::computeTargetTemperature()>
  retainedState.tick(value, inputState);
     dc4:	ae 01       	movw	r20, r28
     dc6:	4d 5f       	subi	r20, 0xFD	; 253
     dc8:	5f 4f       	sbci	r21, 0xFF	; 255
     dca:	ce 01       	movw	r24, r28
     dcc:	0c 96       	adiw	r24, 0x0c	; 12
     dce:	22 96       	adiw	r28, 0x02	; 2
     dd0:	be 01       	movw	r22, r28
     dd2:	0e 94 25 04 	call	0x84a	; 0x84a <ModelledRadValveState::tick(unsigned char volatile&, ModelledRadValveInputState const&)>
  }
     dd6:	df 91       	pop	r29
     dd8:	cf 91       	pop	r28
     dda:	08 95       	ret

00000ddc <ModelledRadValve::read()>:

    // Force a read/poll/recomputation of the target position and call for heat.
    // Sets/clears changed flag if computed valve position changed.
    // Call at a fixed rate (1/60s).
    // Potentially expensive/slow.
    virtual uint8_t read() { computeCallForHeat(); return(value); }
     ddc:	0f 93       	push	r16
     dde:	1f 93       	push	r17
     de0:	8c 01       	movw	r16, r24
     de2:	0e 94 cc 06 	call	0xd98	; 0xd98 <ModelledRadValve::computeCallForHeat()>
     de6:	f8 01       	movw	r30, r16
     de8:	82 81       	ldd	r24, Z+2	; 0x02
     dea:	1f 91       	pop	r17
     dec:	0f 91       	pop	r16
     dee:	08 95       	ret

00000df0 <ModelledRadValve::isRecalibrating() const>:
// The target valve position is not lost while this is true.
// By default there is no recalibration step.
bool ModelledRadValve::isRecalibrating() const
  {
#ifdef USE_MODULE_FHT8VSIMPLE
  if(!isSyncedWithFHT8V()) { return(true); }
     df0:	0e 94 7a 07 	call	0xef4	; 0xef4 <isSyncedWithFHT8V()>
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	88 23       	and	r24, r24
     df8:	09 f4       	brne	.+2      	; 0xdfc <ModelledRadValve::isRecalibrating() const+0xc>
     dfa:	91 e0       	ldi	r25, 0x01	; 1
#endif
  return(false);
  }
     dfc:	89 2f       	mov	r24, r25
     dfe:	08 95       	ret

00000e00 <ModelledRadValve::isControlledValveReallyOpen() const>:
// True if the controlled physical valve is thought to be at least partially open right now.
// If multiple valves are controlled then is this true only if all are at least partially open.
// Used to help avoid running boiler pump against closed valves.
// The default is to use the check the current computed position
// against the minimum open percentage.
bool ModelledRadValve::isControlledValveReallyOpen() const
     e00:	1f 93       	push	r17
     e02:	cf 93       	push	r28
     e04:	df 93       	push	r29
     e06:	ec 01       	movw	r28, r24
  {
  if(isRecalibrating()) { return(false); }
     e08:	e8 81       	ld	r30, Y
     e0a:	f9 81       	ldd	r31, Y+1	; 0x01
     e0c:	02 8c       	ldd	r0, Z+26	; 0x1a
     e0e:	f3 8d       	ldd	r31, Z+27	; 0x1b
     e10:	e0 2d       	mov	r30, r0
     e12:	09 95       	icall
     e14:	88 23       	and	r24, r24
     e16:	89 f4       	brne	.+34     	; 0xe3a <ModelledRadValve::isControlledValveReallyOpen() const+0x3a>
#ifdef USE_MODULE_FHT8VSIMPLE
  if(!FHT8VisControlledValveOpen()) { return(false); }
     e18:	0e 94 7d 07 	call	0xefa	; 0xefa <FHT8VisControlledValveOpen()>
     e1c:	88 23       	and	r24, r24
     e1e:	69 f0       	breq	.+26     	; 0xe3a <ModelledRadValve::isControlledValveReallyOpen() const+0x3a>
#endif
  return(value >= getMinPercentOpen());
     e20:	1a 81       	ldd	r17, Y+2	; 0x02
     e22:	e8 81       	ld	r30, Y
     e24:	f9 81       	ldd	r31, Y+1	; 0x01
     e26:	00 8c       	ldd	r0, Z+24	; 0x18
     e28:	f1 8d       	ldd	r31, Z+25	; 0x19
     e2a:	e0 2d       	mov	r30, r0
     e2c:	ce 01       	movw	r24, r28
     e2e:	09 95       	icall
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	18 17       	cp	r17, r24
     e34:	18 f0       	brcs	.+6      	; 0xe3c <ModelledRadValve::isControlledValveReallyOpen() const+0x3c>
     e36:	91 e0       	ldi	r25, 0x01	; 1
     e38:	01 c0       	rjmp	.+2      	; 0xe3c <ModelledRadValve::isControlledValveReallyOpen() const+0x3c>
     e3a:	90 e0       	ldi	r25, 0x00	; 0
  }
     e3c:	89 2f       	mov	r24, r25
     e3e:	df 91       	pop	r29
     e40:	cf 91       	pop	r28
     e42:	1f 91       	pop	r17
     e44:	08 95       	ret

00000e46 <eeprom_smart_erase_byte(unsigned char*)>:
// If the target byte is already 0xff then this does nothing at all beyond an initial read.
// This saves a bit of time and power and possibly a little EEPROM cell wear also.
// Without split erase/write this degenerates to a specialised eeprom_update_byte().
// As with the AVR eeprom_XXX_byte() macros, not safe to use outside and within ISRs as-is.
// Returns true iff an erase was performed.
bool eeprom_smart_erase_byte(uint8_t *p)
     e46:	9c 01       	movw	r18, r24
  eeprom_write_byte(p, 0xff); // Set to 0xff.
  return(true); // Performed an erase (and probably a write, too).
#else

  // Wait until EEPROM is idle/ready.
  eeprom_busy_wait();
     e48:	f9 99       	sbic	0x1f, 1	; 31
     e4a:	fe cf       	rjmp	.-4      	; 0xe48 <eeprom_smart_erase_byte(unsigned char*)+0x2>
  //     if((uint8_t) 0xff == eeprom_read_byte(p)) { return; }
  // but leaves EEAR[L] set up appropriately for any erase or write.
#if E2END <= 0xFF
  EEARL = (uint8_t)p;
#else
  EEAR = (uint16_t)p;
     e4c:	32 bd       	out	0x22, r19	; 34
     e4e:	21 bd       	out	0x21, r18	; 33
#endif
  // Ignore problems that some AVRs have with EECR and STS instructions (ATmega64 errata).
  EECR = _BV(EERE); // Start EEPROM read operation.
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	8f bb       	out	0x1f, r24	; 31
  const uint8_t oldValue = EEDR; // Get old EEPROM value.
     e54:	80 b5       	in	r24, 0x20	; 32
  if((uint8_t) 0xff != oldValue) // Needs erase...
     e56:	8f 3f       	cpi	r24, 0xFF	; 255
     e58:	11 f4       	brne	.+4      	; 0xe5e <eeprom_smart_erase_byte(unsigned char*)+0x18>
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	08 95       	ret
    {
    ATOMIC_BLOCK (ATOMIC_RESTORESTATE) // Avoid timing problems from interrupts.
     e5e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     e60:	f8 94       	cli
      {
      // Erase to 0xff; no write needed.
      EECR = _BV(EEMPE) | _BV(EEPM0); // Set master write-enable bit and erase-only mode.
     e62:	84 e1       	ldi	r24, 0x14	; 20
     e64:	8f bb       	out	0x1f, r24	; 31
      EECR |= _BV(EEPE);  // Start erase-only operation.
     e66:	f9 9a       	sbi	0x1f, 1	; 31
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     e68:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     e6a:	81 e0       	ldi	r24, 0x01	; 1
      }
    return(true); // Performed the erase.
    }
  return(false);
#endif
  }
     e6c:	08 95       	ret

00000e6e <eeprom_smart_clear_bits(unsigned char*, unsigned char)>:
// If ANDing in the mask has no effect then this does nothing at all beyond an initial read.
// This saves a bit of time and power and possibly a little EEPROM cell wear also.
// Without split erase/write this degenerates to a specialised eeprom_smart_update_byte().
// As with the AVR eeprom_XXX_byte() macros, not safe to use outside and within ISRs as-is.
// Returns true iff a write was performed.
bool eeprom_smart_clear_bits(uint8_t *p, uint8_t mask)
     e6e:	9c 01       	movw	r18, r24
  eeprom_write_byte(p, newValue); // Set to masked value.
  return(true); // Performed a write (and probably an erase, too).
#else

  // Wait until EEPROM is idle/ready.
  eeprom_busy_wait();
     e70:	f9 99       	sbic	0x1f, 1	; 31
     e72:	fe cf       	rjmp	.-4      	; 0xe70 <eeprom_smart_clear_bits(unsigned char*, unsigned char)+0x2>
  //     oldValue = eeprom_read_byte(p);
  // and leaves EEAR[L] set up appropriately for any erase or write.
#if E2END <= 0xFF
  EEARL = (uint8_t)p;
#else
  EEAR = (uint16_t)p;
     e74:	32 bd       	out	0x22, r19	; 34
     e76:	21 bd       	out	0x21, r18	; 33
#endif
  // Ignore problems that some AVRs have with EECR and STS instructions (ATmega64 errata).
  EECR = _BV(EERE); // Start EEPROM read operation.
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	8f bb       	out	0x1f, r24	; 31
  const uint8_t oldValue = EEDR; // Get old EEPROM value.
     e7c:	80 b5       	in	r24, 0x20	; 32
  const uint8_t newValue = oldValue & mask;
     e7e:	68 23       	and	r22, r24
  if(oldValue != newValue) // Write is needed...
     e80:	86 17       	cp	r24, r22
     e82:	11 f4       	brne	.+4      	; 0xe88 <eeprom_smart_clear_bits(unsigned char*, unsigned char)+0x1a>
     e84:	80 e0       	ldi	r24, 0x00	; 0
     e86:	08 95       	ret
    {
    // Do the write: no erase is needed.
    EEDR = newValue; // Set EEPROM data register to required new value.
     e88:	60 bd       	out	0x20, r22	; 32
    ATOMIC_BLOCK (ATOMIC_RESTORESTATE) // Avoid timing problems from interrupts.
     e8a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     e8c:	f8 94       	cli
      {
      EECR = _BV(EEMPE) | _BV(EEPM1); // Set master write-enable bit and write-only mode.
     e8e:	84 e2       	ldi	r24, 0x24	; 36
     e90:	8f bb       	out	0x1f, r24	; 31
      EECR |= _BV(EEPE);  // Start write-only operation.
     e92:	f9 9a       	sbi	0x1f, 1	; 31
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     e94:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     e96:	81 e0       	ldi	r24, 0x01	; 1
      }
    return(true); // Performed the write.
    }
  return(false);
#endif
  }
     e98:	08 95       	ret

00000e9a <eeprom_smart_update_byte(unsigned char*, unsigned char)>:
// Updates an EEEPROM byte iff not currently at the specified target value.
// May be able to selectively erase or write (ie reduce wear) to reach the desired value.
// As with the AVR eeprom_XXX_byte() macros, not safe to use outside and within ISRs as-is.
// Returns true iff an erase and/or write was performed.
// TODO: make smarter, eg don't wait/read twice...
bool eeprom_smart_update_byte(uint8_t *p, uint8_t value)
     e9a:	78 2f       	mov	r23, r24
     e9c:	e9 2f       	mov	r30, r25
  {
  // If target byte is 0xff then attempt smart erase rather than more generic write or erase+write.
  if((uint8_t) 0xff == value) { return(eeprom_smart_erase_byte(p)); }
     e9e:	6f 3f       	cpi	r22, 0xFF	; 255
     ea0:	19 f4       	brne	.+6      	; 0xea8 <eeprom_smart_update_byte(unsigned char*, unsigned char)+0xe>
     ea2:	0e 94 23 07 	call	0xe46	; 0xe46 <eeprom_smart_erase_byte(unsigned char*)>
     ea6:	08 95       	ret
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     ea8:	f9 99       	sbic	0x1f, 1	; 31
     eaa:	fe cf       	rjmp	.-4      	; 0xea8 <eeprom_smart_update_byte(unsigned char*, unsigned char)+0xe>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     eac:	47 2f       	mov	r20, r23
     eae:	5e 2f       	mov	r21, r30
     eb0:	52 bd       	out	0x22, r21	; 34
     eb2:	41 bd       	out	0x21, r20	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     eb4:	f8 9a       	sbi	0x1f, 0	; 31
     eb6:	80 b5       	in	r24, 0x20	; 32
  // More than an erase might be required...
  const uint8_t oldValue = eeprom_read_byte(p);
  if(value == oldValue) { return(false); } // No change needed.
     eb8:	68 17       	cp	r22, r24
     eba:	11 f4       	brne	.+4      	; 0xec0 <eeprom_smart_update_byte(unsigned char*, unsigned char)+0x26>
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	08 95       	ret
#ifdef EEPROM_SPLIT_ERASE_WRITE // Can do selective write.
  if(value == (value & oldValue)) { return(eeprom_smart_clear_bits(p, value)); } // Can use pure write to clear bits to zero.
     ec0:	26 2f       	mov	r18, r22
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	82 23       	and	r24, r18
     ec8:	93 23       	and	r25, r19
     eca:	28 17       	cp	r18, r24
     ecc:	39 07       	cpc	r19, r25
     ece:	29 f4       	brne	.+10     	; 0xeda <eeprom_smart_update_byte(unsigned char*, unsigned char)+0x40>
     ed0:	87 2f       	mov	r24, r23
     ed2:	9e 2f       	mov	r25, r30
     ed4:	0e 94 37 07 	call	0xe6e	; 0xe6e <eeprom_smart_clear_bits(unsigned char*, unsigned char)>
     ed8:	08 95       	ret
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     eda:	f9 99       	sbic	0x1f, 1	; 31
     edc:	fe cf       	rjmp	.-4      	; 0xeda <eeprom_smart_update_byte(unsigned char*, unsigned char)+0x40>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
     ede:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     ee0:	52 bd       	out	0x22, r21	; 34
     ee2:	41 bd       	out	0x21, r20	; 33
#endif
    EEDR = __value;
     ee4:	60 bd       	out	0x20, r22	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
     ee6:	0f b6       	in	r0, 0x3f	; 63
     ee8:	f8 94       	cli
     eea:	fa 9a       	sbi	0x1f, 2	; 31
     eec:	f9 9a       	sbi	0x1f, 1	; 31
     eee:	0f be       	out	0x3f, r0	; 63
     ef0:	81 e0       	ldi	r24, 0x01	; 1
#endif
  eeprom_write_byte(p, value); // Needs to set some (but not all) bits to 1, so needs erase and write.
  return(true); // Performed an update.
  }
     ef2:	08 95       	ret

00000ef4 <isSyncedWithFHT8V()>:
  }

// True once/while this node is synced with and controlling the target FHT8V valve; initially false.
static bool syncedWithFHT8V;
#ifndef IGNORE_FHT_SYNC
bool isSyncedWithFHT8V() { return(syncedWithFHT8V); }
     ef4:	80 91 bd 02 	lds	r24, 0x02BD
     ef8:	08 95       	ret

00000efa <FHT8VisControlledValveOpen()>:
#endif


// True if FHT8V valve is believed to be open under instruction from this system; false if not in sync.
static bool FHT8V_isValveOpen;
bool getFHT8V_isValveOpen() { return(syncedWithFHT8V && FHT8V_isValveOpen); }
     efa:	80 91 bd 02 	lds	r24, 0x02BD
     efe:	88 23       	and	r24, r24
     f00:	21 f0       	breq	.+8      	; 0xf0a <FHT8VisControlledValveOpen()+0x10>
     f02:	80 91 c0 02 	lds	r24, 0x02C0
     f06:	81 11       	cpse	r24, r1
     f08:	81 e0       	ldi	r24, 0x01	; 1


// GLOBAL NOTION OF CONTROLLED FHT8V VALVE STATE PROVIDED HERE
// True iff the FHT8V valve(s) (if any) controlled by this unit are really open.
// This waits until at least the command to open the FHT8Vhas been sent.
bool FHT8VisControlledValveOpen() { return(getFHT8V_isValveOpen()); }
     f0a:	08 95       	ret

00000f0c <FHT8VSyncAndTXReset()>:
//   FHT8V_isValveOpen (bit, true if this node has last sent command to open valve)
//   syncStateFHT8V (byte, internal)
//   halfSecondsToNextFHT8VTX (byte).
void FHT8VSyncAndTXReset()
  {
  syncedWithFHT8V = false;
     f0c:	10 92 bd 02 	sts	0x02BD, r1
  syncStateFHT8V = 0;
     f10:	10 92 bf 02 	sts	0x02BF, r1
  halfSecondsToNextFHT8VTX = 0;
     f14:	10 92 be 02 	sts	0x02BE, r1
  FHT8V_isValveOpen = false;
     f18:	10 92 c0 02 	sts	0x02C0, r1
  }
     f1c:	08 95       	ret

00000f1e <_SetupRFM22ToEavesdropOnFHT8V()>:
static void setLastRXErr(const uint8_t err) { ATOMIC_BLOCK (ATOMIC_RESTORESTATE) { lastRXerrno = err; } }


static void _SetupRFM22ToEavesdropOnFHT8V()
  {
  RFM22ModeStandbyAndClearState();
     f1e:	0e 94 65 11 	call	0x22ca	; 0x22ca <RFM22ModeStandbyAndClearState()>
  RFM22SetUpRX(MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE, true, true); // Set to RX longest-possible valid FS20 encoded frame.
     f22:	8e e2       	ldi	r24, 0x2E	; 46
     f24:	61 e0       	ldi	r22, 0x01	; 1
     f26:	41 e0       	ldi	r20, 0x01	; 1
     f28:	0e 94 76 10 	call	0x20ec	; 0x20ec <RFM22SetUpRX(unsigned char, bool, bool)>
#error Board revision not defined.
#endif
#if V0p2_REV > 0
// TODO: hook into interrupts?
#endif
  }
     f2c:	08 95       	ret

00000f2e <readOneBit(decode_state_t*)>:
  } decode_state_t;

// Decode bit pattern 1100 as 0, 111000 as 1.
// Returns 1 or 0 for the bit decoded, else marks the state as failed.
// Reads two bits at a time, MSB to LSB, advancing the byte pointer if necessary.
static uint8_t readOneBit(decode_state_t *const state)
     f2e:	cf 93       	push	r28
     f30:	df 93       	push	r29
     f32:	ec 01       	movw	r28, r24
  {
  if(state->bitStream > state->lastByte) { state->failed = true; } // Stop if off the buffer end.
     f34:	28 81       	ld	r18, Y
     f36:	39 81       	ldd	r19, Y+1	; 0x01
     f38:	8a 81       	ldd	r24, Y+2	; 0x02
     f3a:	9b 81       	ldd	r25, Y+3	; 0x03
     f3c:	82 17       	cp	r24, r18
     f3e:	93 07       	cpc	r25, r19
     f40:	10 f4       	brcc	.+4      	; 0xf46 <readOneBit(decode_state_t*)+0x18>
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	8d 83       	std	Y+5, r24	; 0x05
  if(state->failed) { return(0); } // Refuse to do anything further once decoding has failed.
     f46:	8d 81       	ldd	r24, Y+5	; 0x05
     f48:	88 23       	and	r24, r24
     f4a:	09 f0       	breq	.+2      	; 0xf4e <readOneBit(decode_state_t*)+0x20>
     f4c:	7e c0       	rjmp	.+252    	; 0x104a <readOneBit(decode_state_t*)+0x11c>

  if(0 == state->mask) { state->mask = 0xc0; } // Special treatment of 0 as equivalent to 0xc0 on entry.
     f4e:	8c 81       	ldd	r24, Y+4	; 0x04
     f50:	88 23       	and	r24, r24
     f52:	11 f4       	brne	.+4      	; 0xf58 <readOneBit(decode_state_t*)+0x2a>
     f54:	80 ec       	ldi	r24, 0xC0	; 192
     f56:	8c 83       	std	Y+4, r24	; 0x04
#if defined(DEBUG)
  if((state->mask != 0xc0) && (state->mask != 0x30) && (state->mask != 0xc) && (state->mask != 3)) { panic(); }
     f58:	8c 81       	ldd	r24, Y+4	; 0x04
     f5a:	80 3c       	cpi	r24, 0xC0	; 192
     f5c:	41 f0       	breq	.+16     	; 0xf6e <readOneBit(decode_state_t*)+0x40>
     f5e:	80 33       	cpi	r24, 0x30	; 48
     f60:	31 f0       	breq	.+12     	; 0xf6e <readOneBit(decode_state_t*)+0x40>
     f62:	8c 30       	cpi	r24, 0x0C	; 12
     f64:	21 f0       	breq	.+8      	; 0xf6e <readOneBit(decode_state_t*)+0x40>
     f66:	83 30       	cpi	r24, 0x03	; 3
     f68:	11 f0       	breq	.+4      	; 0xf6e <readOneBit(decode_state_t*)+0x40>
     f6a:	0e 94 33 14 	call	0x2866	; 0x2866 <panic()>
#endif

  // First two bits read must be 11.
  if(state->mask != (state->mask & *(state->bitStream)))
     f6e:	8c 81       	ldd	r24, Y+4	; 0x04
     f70:	28 2f       	mov	r18, r24
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	e8 81       	ld	r30, Y
     f76:	f9 81       	ldd	r31, Y+1	; 0x01
     f78:	80 81       	ld	r24, Z
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	82 23       	and	r24, r18
     f7e:	93 23       	and	r25, r19
     f80:	28 17       	cp	r18, r24
     f82:	39 07       	cpc	r19, r25
     f84:	09 f0       	breq	.+2      	; 0xf88 <readOneBit(decode_state_t*)+0x5a>
     f86:	51 c0       	rjmp	.+162    	; 0x102a <readOneBit(decode_state_t*)+0xfc>
#endif
    state->failed = true; return(0);
    }

  // Advance the mask; if the mask becomes 0 (then 0xc0 again) then advance the byte pointer.
  if(0 == ((state->mask) >>= 2))
     f88:	c9 01       	movw	r24, r18
     f8a:	95 95       	asr	r25
     f8c:	87 95       	ror	r24
     f8e:	95 95       	asr	r25
     f90:	87 95       	ror	r24
     f92:	8c 83       	std	Y+4, r24	; 0x04
     f94:	88 23       	and	r24, r24
     f96:	61 f4       	brne	.+24     	; 0xfb0 <readOneBit(decode_state_t*)+0x82>
    {
    state->mask = 0xc0;
     f98:	80 ec       	ldi	r24, 0xC0	; 192
     f9a:	8c 83       	std	Y+4, r24	; 0x04
    // If end of stream is encountered this is an error since more bits need to be read.
    if(++(state->bitStream) > state->lastByte) { state->failed = true; return(0); }
     f9c:	9f 01       	movw	r18, r30
     f9e:	2f 5f       	subi	r18, 0xFF	; 255
     fa0:	3f 4f       	sbci	r19, 0xFF	; 255
     fa2:	39 83       	std	Y+1, r19	; 0x01
     fa4:	28 83       	st	Y, r18
     fa6:	8a 81       	ldd	r24, Y+2	; 0x02
     fa8:	9b 81       	ldd	r25, Y+3	; 0x03
     faa:	82 17       	cp	r24, r18
     fac:	93 07       	cpc	r25, r19
     fae:	e8 f1       	brcs	.+122    	; 0x102a <readOneBit(decode_state_t*)+0xfc>
    }

  // Next two bits can be 00 to decode a zero,
  // or 10 (followed by 00) to decode a one.
  const uint8_t secondPair = (state->mask & *(state->bitStream));
     fb0:	8c 81       	ldd	r24, Y+4	; 0x04
  switch(secondPair)
     fb2:	e8 81       	ld	r30, Y
     fb4:	f9 81       	ldd	r31, Y+1	; 0x01
     fb6:	20 81       	ld	r18, Z
     fb8:	28 23       	and	r18, r24
     fba:	28 30       	cpi	r18, 0x08	; 8
     fbc:	c1 f0       	breq	.+48     	; 0xfee <readOneBit(decode_state_t*)+0xc0>
     fbe:	29 30       	cpi	r18, 0x09	; 9
     fc0:	28 f4       	brcc	.+10     	; 0xfcc <readOneBit(decode_state_t*)+0x9e>
     fc2:	22 23       	and	r18, r18
     fc4:	41 f0       	breq	.+16     	; 0xfd6 <readOneBit(decode_state_t*)+0xa8>
     fc6:	22 30       	cpi	r18, 0x02	; 2
     fc8:	81 f5       	brne	.+96     	; 0x102a <readOneBit(decode_state_t*)+0xfc>
     fca:	11 c0       	rjmp	.+34     	; 0xfee <readOneBit(decode_state_t*)+0xc0>
     fcc:	20 32       	cpi	r18, 0x20	; 32
     fce:	79 f0       	breq	.+30     	; 0xfee <readOneBit(decode_state_t*)+0xc0>
     fd0:	20 38       	cpi	r18, 0x80	; 128
     fd2:	59 f5       	brne	.+86     	; 0x102a <readOneBit(decode_state_t*)+0xfc>
     fd4:	0c c0       	rjmp	.+24     	; 0xfee <readOneBit(decode_state_t*)+0xc0>
      {
#if 0 && defined(DEBUG)
      DEBUG_SERIAL_PRINTLN_FLASHSTRING("decoded 0");
#endif
      // Advance the mask; if the mask becomes 0 then advance the byte pointer.
      if(0 == ((state->mask) >>= 2)) { ++(state->bitStream); }
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	95 95       	asr	r25
     fda:	87 95       	ror	r24
     fdc:	95 95       	asr	r25
     fde:	87 95       	ror	r24
     fe0:	8c 83       	std	Y+4, r24	; 0x04
     fe2:	88 23       	and	r24, r24
     fe4:	91 f5       	brne	.+100    	; 0x104a <readOneBit(decode_state_t*)+0x11c>
     fe6:	31 96       	adiw	r30, 0x01	; 1
     fe8:	f9 83       	std	Y+1, r31	; 0x01
     fea:	e8 83       	st	Y, r30
     fec:	2f c0       	rjmp	.+94     	; 0x104c <readOneBit(decode_state_t*)+0x11e>
      state->failed = true; return(0);
      }
    }

  // Advance the mask; if the mask becomes 0 (then 0xc0 again) then advance the byte pointer.
  if(0 == ((state->mask) >>= 2))
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	95 95       	asr	r25
     ff2:	87 95       	ror	r24
     ff4:	95 95       	asr	r25
     ff6:	87 95       	ror	r24
     ff8:	8c 83       	std	Y+4, r24	; 0x04
     ffa:	88 23       	and	r24, r24
     ffc:	61 f4       	brne	.+24     	; 0x1016 <readOneBit(decode_state_t*)+0xe8>
    {
    state->mask = 0xc0;
     ffe:	80 ec       	ldi	r24, 0xC0	; 192
    1000:	8c 83       	std	Y+4, r24	; 0x04
    // If end of stream is encountered this is an error since more bits need to be read.
    if(++(state->bitStream) > state->lastByte) { state->failed = true; return(0); }
    1002:	88 81       	ld	r24, Y
    1004:	99 81       	ldd	r25, Y+1	; 0x01
    1006:	01 96       	adiw	r24, 0x01	; 1
    1008:	99 83       	std	Y+1, r25	; 0x01
    100a:	88 83       	st	Y, r24
    100c:	2a 81       	ldd	r18, Y+2	; 0x02
    100e:	3b 81       	ldd	r19, Y+3	; 0x03
    1010:	28 17       	cp	r18, r24
    1012:	39 07       	cpc	r19, r25
    1014:	50 f0       	brcs	.+20     	; 0x102a <readOneBit(decode_state_t*)+0xfc>
    }

  // Third pair of bits must be 00.
  if(0 != (state->mask & *(state->bitStream)))
    1016:	2c 81       	ldd	r18, Y+4	; 0x04
    1018:	e8 81       	ld	r30, Y
    101a:	f9 81       	ldd	r31, Y+1	; 0x01
    101c:	80 81       	ld	r24, Z
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	82 23       	and	r24, r18
    1024:	93 23       	and	r25, r19
    1026:	89 2b       	or	r24, r25
    1028:	19 f0       	breq	.+6      	; 0x1030 <readOneBit(decode_state_t*)+0x102>
     {
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("trailing 00 corrupt");
#endif
    state->failed = true; return(0);
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	8d 83       	std	Y+5, r24	; 0x05
    102e:	0d c0       	rjmp	.+26     	; 0x104a <readOneBit(decode_state_t*)+0x11c>
    }    

  // Advance the mask; if the mask becomes 0 then advance the byte pointer.
  if(0 == ((state->mask) >>= 2)) { ++(state->bitStream); }
    1030:	c9 01       	movw	r24, r18
    1032:	95 95       	asr	r25
    1034:	87 95       	ror	r24
    1036:	95 95       	asr	r25
    1038:	87 95       	ror	r24
    103a:	8c 83       	std	Y+4, r24	; 0x04
    103c:	88 23       	and	r24, r24
    103e:	19 f4       	brne	.+6      	; 0x1046 <readOneBit(decode_state_t*)+0x118>
    1040:	31 96       	adiw	r30, 0x01	; 1
    1042:	f9 83       	std	Y+1, r31	; 0x01
    1044:	e8 83       	st	Y, r30
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	01 c0       	rjmp	.+2      	; 0x104c <readOneBit(decode_state_t*)+0x11e>
    104a:	80 e0       	ldi	r24, 0x00	; 0
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("decoded 1");
#endif
  return(1); // Decoded a 1.
  }
    104c:	df 91       	pop	r29
    104e:	cf 91       	pop	r28
    1050:	08 95       	ret

00001052 <readOneByteWithParity(decode_state_t*)>:

// Decodes a series of encoded bits plus parity (and checks the parity, failing if wrong).
// Returns the byte decoded, else marks the state as failed.
static uint8_t readOneByteWithParity(decode_state_t *const state)
    1052:	ef 92       	push	r14
    1054:	ff 92       	push	r15
    1056:	0f 93       	push	r16
    1058:	1f 93       	push	r17
    105a:	cf 93       	push	r28
    105c:	df 93       	push	r29
    105e:	7c 01       	movw	r14, r24
  {
  if(state->failed) { return(0); } // Refuse to do anything further once decoding has failed.
    1060:	fc 01       	movw	r30, r24
    1062:	85 81       	ldd	r24, Z+5	; 0x05
    1064:	88 23       	and	r24, r24
    1066:	11 f0       	breq	.+4      	; 0x106c <readOneByteWithParity(decode_state_t*)+0x1a>
    1068:	10 e0       	ldi	r17, 0x00	; 0
    106a:	1b c0       	rjmp	.+54     	; 0x10a2 <readOneByteWithParity(decode_state_t*)+0x50>

  // Read first bit specially...
  const uint8_t b7 = readOneBit(state); 
    106c:	c7 01       	movw	r24, r14
    106e:	0e 94 97 07 	call	0xf2e	; 0xf2e <readOneBit(decode_state_t*)>
    1072:	18 2f       	mov	r17, r24
    1074:	08 2f       	mov	r16, r24
    1076:	c7 e0       	ldi	r28, 0x07	; 7
    1078:	d0 e0       	ldi	r29, 0x00	; 0
    107a:	06 c0       	rjmp	.+12     	; 0x1088 <readOneByteWithParity(decode_state_t*)+0x36>
  uint8_t result = b7;
  uint8_t parity = b7;
  // Then remaining 7 bits...
  for(int i = 7; --i >= 0; )
    {
    const uint8_t bit = readOneBit(state);
    107c:	c7 01       	movw	r24, r14
    107e:	0e 94 97 07 	call	0xf2e	; 0xf2e <readOneBit(decode_state_t*)>
    parity ^= bit;
    1082:	08 27       	eor	r16, r24
    result = (result << 1) | bit;
    1084:	11 0f       	add	r17, r17
    1086:	18 2b       	or	r17, r24
  // Read first bit specially...
  const uint8_t b7 = readOneBit(state); 
  uint8_t result = b7;
  uint8_t parity = b7;
  // Then remaining 7 bits...
  for(int i = 7; --i >= 0; )
    1088:	21 97       	sbiw	r28, 0x01	; 1
    108a:	ff ef       	ldi	r31, 0xFF	; 255
    108c:	cf 3f       	cpi	r28, 0xFF	; 255
    108e:	df 07       	cpc	r29, r31
    1090:	a9 f7       	brne	.-22     	; 0x107c <readOneByteWithParity(decode_state_t*)+0x2a>
    const uint8_t bit = readOneBit(state);
    parity ^= bit;
    result = (result << 1) | bit;
    }
  // Then get parity bit and check.
  if(parity != readOneBit(state))
    1092:	c7 01       	movw	r24, r14
    1094:	0e 94 97 07 	call	0xf2e	; 0xf2e <readOneBit(decode_state_t*)>
    1098:	08 17       	cp	r16, r24
    109a:	19 f0       	breq	.+6      	; 0x10a2 <readOneByteWithParity(decode_state_t*)+0x50>
    {
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("bad parity");
#endif
    state->failed = true;
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	f7 01       	movw	r30, r14
    10a0:	85 83       	std	Z+5, r24	; 0x05
    }
  return(result);
  }
    10a2:	81 2f       	mov	r24, r17
    10a4:	df 91       	pop	r29
    10a6:	cf 91       	pop	r28
    10a8:	1f 91       	pop	r17
    10aa:	0f 91       	pop	r16
    10ac:	ff 90       	pop	r15
    10ae:	ef 90       	pop	r14
    10b0:	08 95       	ret

000010b2 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)>:

// Decode raw bitstream into non-null command structure passed in; returns true if successful.
// Will return true if OK, else false if anything obviously invalid is detected such as failing parity or checksum.
// Finds and discards leading encoded 1 and trailing 0.
// Returns NULL on failure, else pointer to next full byte after last decoded.
uint8_t const *FHT8VDecodeBitStream(uint8_t const *bitStream, uint8_t const *lastByte, fht8v_msg_t *command)
    10b2:	df 92       	push	r13
    10b4:	ef 92       	push	r14
    10b6:	ff 92       	push	r15
    10b8:	0f 93       	push	r16
    10ba:	1f 93       	push	r17
    10bc:	df 93       	push	r29
    10be:	cf 93       	push	r28
    10c0:	00 d0       	rcall	.+0      	; 0x10c2 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x10>
    10c2:	00 d0       	rcall	.+0      	; 0x10c4 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x12>
    10c4:	00 d0       	rcall	.+0      	; 0x10c6 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x14>
    10c6:	cd b7       	in	r28, 0x3d	; 61
    10c8:	de b7       	in	r29, 0x3e	; 62
    10ca:	8a 01       	movw	r16, r20
  {
  decode_state_t state;
  state.bitStream = bitStream;
    10cc:	9a 83       	std	Y+2, r25	; 0x02
    10ce:	89 83       	std	Y+1, r24	; 0x01
  state.lastByte = lastByte;
    10d0:	7c 83       	std	Y+4, r23	; 0x04
    10d2:	6b 83       	std	Y+3, r22	; 0x03
  state.mask = 0;
    10d4:	1d 82       	std	Y+5, r1	; 0x05
  state.failed = false;
    10d6:	1e 82       	std	Y+6, r1	; 0x06
      }
  DEBUG_SERIAL_PRINTLN();
#endif

  // Find and absorb the leading encoded '1', else quit if not found by end of stream.
  while(0 == readOneBit(&state)) { if(state.failed) { return(NULL); } }
    10d8:	7e 01       	movw	r14, r28
    10da:	08 94       	sec
    10dc:	e1 1c       	adc	r14, r1
    10de:	f1 1c       	adc	r15, r1
    10e0:	03 c0       	rjmp	.+6      	; 0x10e8 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x36>
    10e2:	8e 81       	ldd	r24, Y+6	; 0x06
    10e4:	88 23       	and	r24, r24
    10e6:	e9 f5       	brne	.+122    	; 0x1162 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb0>
    10e8:	c7 01       	movw	r24, r14
    10ea:	0e 94 97 07 	call	0xf2e	; 0xf2e <readOneBit(decode_state_t*)>
    10ee:	88 23       	and	r24, r24
    10f0:	c1 f3       	breq	.-16     	; 0x10e2 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x30>
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("Read leading 1");
#endif

  command->hc1 = readOneByteWithParity(&state);
    10f2:	c7 01       	movw	r24, r14
    10f4:	0e 94 29 08 	call	0x1052	; 0x1052 <readOneByteWithParity(decode_state_t*)>
    10f8:	f8 01       	movw	r30, r16
    10fa:	80 83       	st	Z, r24
  command->hc2 = readOneByteWithParity(&state);
    10fc:	c7 01       	movw	r24, r14
    10fe:	0e 94 29 08 	call	0x1052	; 0x1052 <readOneByteWithParity(decode_state_t*)>
    1102:	f8 01       	movw	r30, r16
    1104:	81 83       	std	Z+1, r24	; 0x01
#ifdef FHT8V_ADR_USED
  command->address = readOneByteWithParity(&state);
#else
  const uint8_t address = readOneByteWithParity(&state);
    1106:	c7 01       	movw	r24, r14
    1108:	0e 94 29 08 	call	0x1052	; 0x1052 <readOneByteWithParity(decode_state_t*)>
    110c:	d8 2e       	mov	r13, r24
#endif
  command->command = readOneByteWithParity(&state);
    110e:	c7 01       	movw	r24, r14
    1110:	0e 94 29 08 	call	0x1052	; 0x1052 <readOneByteWithParity(decode_state_t*)>
    1114:	f8 01       	movw	r30, r16
    1116:	82 83       	std	Z+2, r24	; 0x02
  command->extension = readOneByteWithParity(&state);
    1118:	c7 01       	movw	r24, r14
    111a:	0e 94 29 08 	call	0x1052	; 0x1052 <readOneByteWithParity(decode_state_t*)>
    111e:	f8 01       	movw	r30, r16
    1120:	83 83       	std	Z+3, r24	; 0x03
  const uint8_t checksumRead = readOneByteWithParity(&state);
    1122:	c7 01       	movw	r24, r14
    1124:	0e 94 29 08 	call	0x1052	; 0x1052 <readOneByteWithParity(decode_state_t*)>
    1128:	28 2f       	mov	r18, r24
  if(state.failed)
    112a:	8e 81       	ldd	r24, Y+6	; 0x06
    112c:	88 23       	and	r24, r24
    112e:	c9 f4       	brne	.+50     	; 0x1162 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb0>
#ifdef FHT8V_ADR_USED
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + command->address + command->command + command->extension;
#else
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + address + command->command + command->extension;
#endif
  if(checksum != checksumRead)
    1130:	f8 01       	movw	r30, r16
    1132:	80 81       	ld	r24, Z
    1134:	91 81       	ldd	r25, Z+1	; 0x01
    1136:	89 0f       	add	r24, r25
    1138:	84 5f       	subi	r24, 0xF4	; 244
    113a:	92 81       	ldd	r25, Z+2	; 0x02
    113c:	89 0f       	add	r24, r25
    113e:	93 81       	ldd	r25, Z+3	; 0x03
    1140:	89 0f       	add	r24, r25
    1142:	8d 0d       	add	r24, r13
    1144:	82 17       	cp	r24, r18
    1146:	69 f4       	brne	.+26     	; 0x1162 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb0>
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("Checksum OK");
    }
#endif

  // Check the trailing encoded '0'.
  if(0 != readOneBit(&state))
    1148:	c7 01       	movw	r24, r14
    114a:	0e 94 97 07 	call	0xf2e	; 0xf2e <readOneBit(decode_state_t*)>
    114e:	88 23       	and	r24, r24
    1150:	41 f4       	brne	.+16     	; 0x1162 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb0>
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("Read of trailing 0 failed");
#endif
    state.failed = true; return(NULL);
    }
  if(state.failed) { return(NULL); }
    1152:	8e 81       	ldd	r24, Y+6	; 0x06
    1154:	88 23       	and	r24, r24
    1156:	29 f4       	brne	.+10     	; 0x1162 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb0>
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("Read entire message");
#endif
  // Return pointer to where any trailing data may be
  // in next byte beyond end of FHT8V frame.
  return(state.bitStream + 1);
    1158:	29 81       	ldd	r18, Y+1	; 0x01
    115a:	3a 81       	ldd	r19, Y+2	; 0x02
    115c:	2f 5f       	subi	r18, 0xFF	; 255
    115e:	3f 4f       	sbci	r19, 0xFF	; 255
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb4>
    1162:	20 e0       	ldi	r18, 0x00	; 0
    1164:	30 e0       	ldi	r19, 0x00	; 0
  }
    1166:	c9 01       	movw	r24, r18
    1168:	26 96       	adiw	r28, 0x06	; 6
    116a:	0f b6       	in	r0, 0x3f	; 63
    116c:	f8 94       	cli
    116e:	de bf       	out	0x3e, r29	; 62
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	cd bf       	out	0x3d, r28	; 61
    1174:	cf 91       	pop	r28
    1176:	df 91       	pop	r29
    1178:	1f 91       	pop	r17
    117a:	0f 91       	pop	r16
    117c:	ff 90       	pop	r15
    117e:	ef 90       	pop	r14
    1180:	df 90       	pop	r13
    1182:	08 95       	ret

00001184 <FHT8VCallForHeatPoll()>:
// If used instead of an interrupt then should probably called at least about once every 100ms.
// Returns true if any useful activity/progress was detected by this call (not necessarily a full valid call-for-heat).
// Upon receipt of a valid call-for-heat this comes out of eavesdropping mode to save energy.
// If a problem is encountered this restarts the eavesdropping process.
// Does not block nor take significant time.
bool FHT8VCallForHeatPoll()
    1184:	ef 92       	push	r14
    1186:	ff 92       	push	r15
    1188:	0f 93       	push	r16
    118a:	1f 93       	push	r17
    118c:	df 93       	push	r29
    118e:	cf 93       	push	r28
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
    1194:	2b 97       	sbiw	r28, 0x0b	; 11
    1196:	0f b6       	in	r0, 0x3f	; 63
    1198:	f8 94       	cli
    119a:	de bf       	out	0x3e, r29	; 62
    119c:	0f be       	out	0x3f, r0	; 63
    119e:	cd bf       	out	0x3d, r28	; 61
  {
  // Do nothing unless already in eavesdropping mode.
  if(!eavesdropping) { return(false); }
    11a0:	80 91 7e 02 	lds	r24, 0x027E
    11a4:	88 23       	and	r24, r24
    11a6:	09 f4       	brne	.+2      	; 0x11aa <FHT8VCallForHeatPoll()+0x26>
    11a8:	d7 c0       	rjmp	.+430    	; 0x1358 <FHT8VCallForHeatPoll()+0x1d4>
//  if(FHT8VCallForHeatHeard()) { return(false); }
//#endif

#if defined(PIN_RFM_NIRQ)
  // If nIRQ line is available then abort if it is not active (and thus spare the SPI bus).
  if(fastDigitalRead(PIN_RFM_NIRQ) != LOW) { return(false); }
    11aa:	19 99       	sbic	0x03, 1	; 3
    11ac:	d5 c0       	rjmp	.+426    	; 0x1358 <FHT8VCallForHeatPoll()+0x1d4>
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("RX IRQ");
#endif
#endif

  const uint16_t status = RFM22ReadStatusBoth(); // reg1:reg2, on V0.08 PICAXE tempB2:SPI_DATAB.
    11ae:	0e 94 40 11 	call	0x2280	; 0x2280 <RFM22ReadStatusBoth()>
    11b2:	8c 01       	movw	r16, r24

  if(status & 0x1000) // Received frame.
    11b4:	94 ff       	sbrs	r25, 4
    11b6:	ba c0       	rjmp	.+372    	; 0x132c <FHT8VCallForHeatPoll()+0x1a8>
    {
// Ensure that data from a previous frame is not trivially re-read by clearing the buffer explicitly.
//    for(uint8_t *p = FHT8VRXHubArea + FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE; --p >= FHT8VRXHubArea; )
//      { *p = 0; }
    memset(FHT8VRXHubArea, 0xff, sizeof(FHT8VRXHubArea));
    11b8:	8f e7       	ldi	r24, 0x7F	; 127
    11ba:	92 e0       	ldi	r25, 0x02	; 2
    11bc:	6f ef       	ldi	r22, 0xFF	; 255
    11be:	70 e0       	ldi	r23, 0x00	; 0
    11c0:	4e e3       	ldi	r20, 0x3E	; 62
    11c2:	50 e0       	ldi	r21, 0x00	; 0
    11c4:	0e 94 65 01 	call	0x2ca	; 0x2ca <memset>
    // Attempt to read the entire frame.
    RFM22RXFIFO(FHT8VRXHubArea, sizeof(FHT8VRXHubArea));
    11c8:	8f e7       	ldi	r24, 0x7F	; 127
    11ca:	92 e0       	ldi	r25, 0x02	; 2
    11cc:	6e e3       	ldi	r22, 0x3E	; 62
    11ce:	0e 94 0e 10 	call	0x201c	; 0x201c <RFM22RXFIFO(unsigned char*, unsigned char)>
    11d2:	20 e0       	ldi	r18, 0x00	; 0
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	82 2f       	mov	r24, r18
    uint8_t pos; // Current byte position in RX buffer...
    // Validate FHT8V premable (zeros encoded as up to 6x 0xcc bytes), else abort/restart.
    // Insist on at least a couple of bytes of valid preamble being present.
    for(pos = 0; pos < 6; ++pos)
      {
      const uint8_t b = FHT8VRXHubArea[pos];
    11d8:	f9 01       	movw	r30, r18
    11da:	e1 58       	subi	r30, 0x81	; 129
    11dc:	fd 4f       	sbci	r31, 0xFD	; 253
    11de:	e0 81       	ld	r30, Z
      if(0xcc != b)
    11e0:	ec 3c       	cpi	r30, 0xCC	; 204
    11e2:	09 f4       	brne	.+2      	; 0x11e6 <FHT8VCallForHeatPoll()+0x62>
    11e4:	44 c0       	rjmp	.+136    	; 0x126e <FHT8VCallForHeatPoll()+0xea>
        {
        if(MSG_JSON_LEADING_CHAR == b)
    11e6:	eb 37       	cpi	r30, 0x7B	; 123
    11e8:	a1 f4       	brne	.+40     	; 0x1212 <FHT8VCallForHeatPoll()+0x8e>
          {
          if(adjustJSONMsgForRXAndCheckCRC((char *)(FHT8VRXHubArea + pos), sizeof(FHT8VRXHubArea)-pos) > 0)
    11ea:	02 2f       	mov	r16, r18
    11ec:	10 e0       	ldi	r17, 0x00	; 0
    11ee:	01 58       	subi	r16, 0x81	; 129
    11f0:	1d 4f       	sbci	r17, 0xFD	; 253
    11f2:	6e e3       	ldi	r22, 0x3E	; 62
    11f4:	62 1b       	sub	r22, r18
    11f6:	c8 01       	movw	r24, r16
    11f8:	0e 94 c1 09 	call	0x1382	; 0x1382 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)>
    11fc:	18 16       	cp	r1, r24
    11fe:	2c f4       	brge	.+10     	; 0x120a <FHT8VCallForHeatPoll()+0x86>
            {
            recordJSONStats(false, (const char *)(FHT8VRXHubArea + pos));
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	b8 01       	movw	r22, r16
    1204:	0e 94 b1 0a 	call	0x1562	; 0x1562 <recordJSONStats(bool, char const*)>
    1208:	8a c0       	rjmp	.+276    	; 0x131e <FHT8VCallForHeatPoll()+0x19a>
// Useful to assess the noise enviromentment.
static volatile uint8_t lastRXerrno;

// Atomically returns and clears last (FHT8V) RX error code, or 0 if none.
// Set with such codes as FHT8VRXErr_GENERIC; never set to zero.
static void setLastRXErr(const uint8_t err) { ATOMIC_BLOCK (ATOMIC_RESTORESTATE) { lastRXerrno = err; } }
    120a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    120c:	f8 94       	cli
    120e:	85 e0       	ldi	r24, 0x05	; 5
    1210:	9e c0       	rjmp	.+316    	; 0x134e <FHT8VCallForHeatPoll()+0x1ca>
#endif
          setLastRXErr(FHT8VRXErr_BAD_RX_STATSFRAME);
          _SetupRFM22ToEavesdropOnFHT8V(); // Reset/restart RX.
          return(false); // Didn't look like valid JSON.
          }
        else if(MESSAGING_FULL_STATS_FLAGS_HEADER_MSBS == (b & MESSAGING_FULL_STATS_FLAGS_HEADER_MASK))
    1212:	e0 7e       	andi	r30, 0xE0	; 224
    1214:	e0 36       	cpi	r30, 0x60	; 96
    1216:	d1 f4       	brne	.+52     	; 0x124c <FHT8VCallForHeatPoll()+0xc8>
          {
          // May be binary stats frame, so attempt to decode...
          FullStatsMessageCore_t content;
          // (TODO: should reject non-secure messages when expecting secure ones...)
          const uint8_t *msg = decodeFullStatsMessageCore(FHT8VRXHubArea, sizeof(FHT8VRXHubArea)-pos, stTXalwaysAll, false, &content);
    1218:	6e e3       	ldi	r22, 0x3E	; 62
    121a:	62 1b       	sub	r22, r18
    121c:	75 e0       	ldi	r23, 0x05	; 5
    121e:	e7 2e       	mov	r14, r23
    1220:	f1 2c       	mov	r15, r1
    1222:	ec 0e       	add	r14, r28
    1224:	fd 1e       	adc	r15, r29
    1226:	8f e7       	ldi	r24, 0x7F	; 127
    1228:	92 e0       	ldi	r25, 0x02	; 2
    122a:	40 e0       	ldi	r20, 0x00	; 0
    122c:	50 e0       	ldi	r21, 0x00	; 0
    122e:	20 e0       	ldi	r18, 0x00	; 0
    1230:	87 01       	movw	r16, r14
    1232:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)>
          if(NULL != msg)
    1236:	89 2b       	or	r24, r25
    1238:	09 f4       	brne	.+2      	; 0x123c <FHT8VCallForHeatPoll()+0xb8>
    123a:	8c c0       	rjmp	.+280    	; 0x1354 <FHT8VCallForHeatPoll()+0x1d0>
             {
             if(content.containsID)
    123c:	8d 81       	ldd	r24, Y+5	; 0x05
    123e:	80 ff       	sbrs	r24, 0
    1240:	6e c0       	rjmp	.+220    	; 0x131e <FHT8VCallForHeatPoll()+0x19a>
               DEBUG_SERIAL_PRINTFMT(content.id0, HEX);
               DEBUG_SERIAL_PRINT(' ');
               DEBUG_SERIAL_PRINTFMT(content.id1, HEX);
               DEBUG_SERIAL_PRINTLN();
#endif
               recordCoreStats(false, &content);
    1242:	80 e0       	ldi	r24, 0x00	; 0
    1244:	b7 01       	movw	r22, r14
    1246:	0e 94 95 0a 	call	0x152a	; 0x152a <recordCoreStats(bool, FullStatsMessageCore const*)>
    124a:	69 c0       	rjmp	.+210    	; 0x131e <FHT8VCallForHeatPoll()+0x19a>

          _SetupRFM22ToEavesdropOnFHT8V(); // Reset/restart RX.
          return(false); // Nothing valid received.
          }

        if(pos < 2)
    124c:	22 30       	cpi	r18, 0x02	; 2
    124e:	b0 f4       	brcc	.+44     	; 0x127c <FHT8VCallForHeatPoll()+0xf8>
// Useful to assess the noise enviromentment.
static volatile uint8_t lastRXerrno;

// Atomically returns and clears last (FHT8V) RX error code, or 0 if none.
// Set with such codes as FHT8VRXErr_GENERIC; never set to zero.
static void setLastRXErr(const uint8_t err) { ATOMIC_BLOCK (ATOMIC_RESTORESTATE) { lastRXerrno = err; } }
    1250:	9f b7       	in	r25, 0x3f	; 63
    1252:	f8 94       	cli
    1254:	82 e0       	ldi	r24, 0x02	; 2
    1256:	80 93 7d 02 	sts	0x027D, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    125a:	9f bf       	out	0x3f, r25	; 63
            DEBUG_SERIAL_PRINT_FLASHSTRING(" 0x");
            DEBUG_SERIAL_PRINTFMT(FHT8VRXHubArea[p], HEX);
            }
          DEBUG_SERIAL_PRINTLN();
#endif
          seedRNG8(FHT8VRXHubArea[pos], FHT8VRXHubArea[pos+2], FHT8VRXHubArea[pos+5]); // Attempt to gather some entropy from RX noise. (TODO-302).
    125c:	f9 01       	movw	r30, r18
    125e:	e1 58       	subi	r30, 0x81	; 129
    1260:	fd 4f       	sbci	r31, 0xFD	; 253
    1262:	80 81       	ld	r24, Z
    1264:	62 81       	ldd	r22, Z+2	; 0x02
    1266:	45 81       	ldd	r20, Z+5	; 0x05
    1268:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <seedRNG8(unsigned char, unsigned char, unsigned char)>
    126c:	73 c0       	rjmp	.+230    	; 0x1354 <FHT8VCallForHeatPoll()+0x1d0>
          _SetupRFM22ToEavesdropOnFHT8V(); // Reset/restart RX.
          return(false);
    126e:	8f 5f       	subi	r24, 0xFF	; 255
    1270:	2f 5f       	subi	r18, 0xFF	; 255
    1272:	3f 4f       	sbci	r19, 0xFF	; 255
    // Attempt to read the entire frame.
    RFM22RXFIFO(FHT8VRXHubArea, sizeof(FHT8VRXHubArea));
    uint8_t pos; // Current byte position in RX buffer...
    // Validate FHT8V premable (zeros encoded as up to 6x 0xcc bytes), else abort/restart.
    // Insist on at least a couple of bytes of valid preamble being present.
    for(pos = 0; pos < 6; ++pos)
    1274:	26 30       	cpi	r18, 0x06	; 6
    1276:	31 05       	cpc	r19, r1
    1278:	09 f0       	breq	.+2      	; 0x127c <FHT8VCallForHeatPoll()+0xf8>
    127a:	ad cf       	rjmp	.-166    	; 0x11d6 <FHT8VCallForHeatPoll()+0x52>
        break; // If enough preamble has been seen, move on to the body.
        }
      }
    fht8v_msg_t command;
    uint8_t const *lastByte = FHT8VRXHubArea + FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE - 1;
    uint8_t const *trailer = FHT8VDecodeBitStream(FHT8VRXHubArea + pos, lastByte, &command);
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	0a eb       	ldi	r16, 0xBA	; 186
    1280:	12 e0       	ldi	r17, 0x02	; 2
    1282:	81 58       	subi	r24, 0x81	; 129
    1284:	9d 4f       	sbci	r25, 0xFD	; 253
    1286:	b8 01       	movw	r22, r16
    1288:	ae 01       	movw	r20, r28
    128a:	4f 5f       	subi	r20, 0xFF	; 255
    128c:	5f 4f       	sbci	r21, 0xFF	; 255
    128e:	0e 94 59 08 	call	0x10b2	; 0x10b2 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)>
    1292:	fc 01       	movw	r30, r24
    if(NULL != trailer)
    1294:	00 97       	sbiw	r24, 0x00	; 0
    1296:	09 f4       	brne	.+2      	; 0x129a <FHT8VCallForHeatPoll()+0x116>
    1298:	45 c0       	rjmp	.+138    	; 0x1324 <FHT8VCallForHeatPoll()+0x1a0>

#if defined(ALLOW_STATS_RX) // Only look for the trailer if supported.
      // If whole FHT8V frame was OK then check if there is a valid stats trailer.

      // Check for 'core' stats trailer.
      if((trailer + FullStatsMessageCore_MAX_BYTES_ON_WIRE <= lastByte) && // Enough space for minimum-stats trailer.
    129a:	08 96       	adiw	r24, 0x08	; 8
    129c:	08 17       	cp	r16, r24
    129e:	19 07       	cpc	r17, r25
    12a0:	48 f1       	brcs	.+82     	; 0x12f4 <FHT8VCallForHeatPoll()+0x170>
    12a2:	80 81       	ld	r24, Z
    12a4:	80 7e       	andi	r24, 0xE0	; 224
    12a6:	80 36       	cpi	r24, 0x60	; 96
    12a8:	29 f5       	brne	.+74     	; 0x12f4 <FHT8VCallForHeatPoll()+0x170>
         (MESSAGING_FULL_STATS_FLAGS_HEADER_MSBS == (trailer[0] & MESSAGING_FULL_STATS_FLAGS_HEADER_MASK)))
        {
        FullStatsMessageCore_t content;
        const uint8_t *tail = decodeFullStatsMessageCore(trailer, lastByte - trailer, stTXalwaysAll, false, &content);
    12aa:	60 2f       	mov	r22, r16
    12ac:	6e 1b       	sub	r22, r30
    12ae:	cf 01       	movw	r24, r30
    12b0:	40 e0       	ldi	r20, 0x00	; 0
    12b2:	50 e0       	ldi	r21, 0x00	; 0
    12b4:	20 e0       	ldi	r18, 0x00	; 0
    12b6:	8e 01       	movw	r16, r28
    12b8:	0b 5f       	subi	r16, 0xFB	; 251
    12ba:	1f 4f       	sbci	r17, 0xFF	; 255
    12bc:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)>
        if(NULL != tail)
    12c0:	89 2b       	or	r24, r25
    12c2:	c1 f0       	breq	.+48     	; 0x12f4 <FHT8VCallForHeatPoll()+0x170>
          // Received trailing stats frame!
 
          // If ID is present then make sure it matches that implied by the FHT8V frame (else reject this trailer)
          // else file it in from the FHT8C frame.
          bool allGood = true;
          if(content.containsID)
    12c4:	9d 81       	ldd	r25, Y+5	; 0x05
    12c6:	29 81       	ldd	r18, Y+1	; 0x01
    12c8:	90 ff       	sbrs	r25, 0
    12ca:	08 c0       	rjmp	.+16     	; 0x12dc <FHT8VCallForHeatPoll()+0x158>
            {
            if((content.id0 != command.hc1) || (content.id1 != command.hc2))
    12cc:	8e 81       	ldd	r24, Y+6	; 0x06
    12ce:	82 17       	cp	r24, r18
    12d0:	59 f4       	brne	.+22     	; 0x12e8 <FHT8VCallForHeatPoll()+0x164>
    12d2:	9f 81       	ldd	r25, Y+7	; 0x07
    12d4:	8a 81       	ldd	r24, Y+2	; 0x02
    12d6:	98 17       	cp	r25, r24
    12d8:	39 f4       	brne	.+14     	; 0x12e8 <FHT8VCallForHeatPoll()+0x164>
    12da:	4c c0       	rjmp	.+152    	; 0x1374 <FHT8VCallForHeatPoll()+0x1f0>
              { allGood = false; }
            }
          else
            {
            content.id0 = command.hc1;
    12dc:	2e 83       	std	Y+6, r18	; 0x06
            content.id1 = command.hc2;
    12de:	8a 81       	ldd	r24, Y+2	; 0x02
    12e0:	8f 83       	std	Y+7, r24	; 0x07
            content.containsID = true;
    12e2:	91 60       	ori	r25, 0x01	; 1
    12e4:	9d 83       	std	Y+5, r25	; 0x05
    12e6:	46 c0       	rjmp	.+140    	; 0x1374 <FHT8VCallForHeatPoll()+0x1f0>
// Useful to assess the noise enviromentment.
static volatile uint8_t lastRXerrno;

// Atomically returns and clears last (FHT8V) RX error code, or 0 if none.
// Set with such codes as FHT8VRXErr_GENERIC; never set to zero.
static void setLastRXErr(const uint8_t err) { ATOMIC_BLOCK (ATOMIC_RESTORESTATE) { lastRXerrno = err; } }
    12e8:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    12ea:	f8 94       	cli
    12ec:	84 e0       	ldi	r24, 0x04	; 4
    12ee:	80 93 7d 02 	sts	0x027D, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    12f2:	9f bf       	out	0x3f, r25	; 63
        }
#endif
#endif

      // Potentially accept as call for heat only if command is 0x26 (38) and value open enough as used by OpenTRV to TX.
      if((0x26 == command.command) && (command.extension >= NominalRadValve.getMinValvePcReallyOpen()))
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	86 32       	cpi	r24, 0x26	; 38
    12f8:	91 f4       	brne	.+36     	; 0x131e <FHT8VCallForHeatPoll()+0x19a>
    12fa:	1c 81       	ldd	r17, Y+4	; 0x04
    12fc:	0e 94 8a 02 	call	0x514	; 0x514 <ModelledRadValve::getMinValvePcReallyOpen()>
    1300:	18 17       	cp	r17, r24
    1302:	68 f0       	brcs	.+26     	; 0x131e <FHT8VCallForHeatPoll()+0x19a>
        {
        if(FHT8VHubAcceptedHouseCode(command.hc1, command.hc2))
          {
          // Accept if house code not filtered out.
          const uint16_t compoundHC = (command.hc1 << 8) | command.hc2;
    1304:	99 81       	ldd	r25, Y+1	; 0x01
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	2a 81       	ldd	r18, Y+2	; 0x02
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	82 2b       	or	r24, r18
    130e:	93 2b       	or	r25, r19
          ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    1310:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1312:	f8 94       	cli
            { lastCallForHeatHC = compoundHC; } // Update atomically.
    1314:	90 93 2f 01 	sts	0x012F, r25
    1318:	80 93 2e 01 	sts	0x012E, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    131c:	2f bf       	out	0x3f, r18	; 63
//#if defined(SAVE_RX_ENERGY)
//          StopEavesdropOnFHT8V(); // Need not eavesdrop for a while.
//#endif
          }
        }
      _SetupRFM22ToEavesdropOnFHT8V(); // Reset/restart RX.
    131e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <_SetupRFM22ToEavesdropOnFHT8V()>
    1322:	0e c0       	rjmp	.+28     	; 0x1340 <FHT8VCallForHeatPoll()+0x1bc>
// Useful to assess the noise enviromentment.
static volatile uint8_t lastRXerrno;

// Atomically returns and clears last (FHT8V) RX error code, or 0 if none.
// Set with such codes as FHT8VRXErr_GENERIC; never set to zero.
static void setLastRXErr(const uint8_t err) { ATOMIC_BLOCK (ATOMIC_RESTORESTATE) { lastRXerrno = err; } }
    1324:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1326:	f8 94       	cli
    1328:	83 e0       	ldi	r24, 0x03	; 3
    132a:	11 c0       	rjmp	.+34     	; 0x134e <FHT8VCallForHeatPoll()+0x1ca>

    // Ensure that RX is re-enabled to avoid missing anything.
    _SetupRFM22ToEavesdropOnFHT8V(); // Reset/restart RX.
    return(false); // Nothing valid received.
    }
  else if(status & 0x80) // Got sync from incoming FHT8V message.
    132c:	87 ff       	sbrs	r24, 7
    132e:	0a c0       	rjmp	.+20     	; 0x1344 <FHT8VCallForHeatPoll()+0x1c0>
    {
    // Capture some entropy from RSSI and timing...
    const uint8_t rssi = RFM22RSSI();
    1330:	0e 94 28 11 	call	0x2250	; 0x2250 <RFM22RSSI()>
    // TODO adjust output power down a little if RX very loud.
    addEntropyToPool(rssi ^ (uint8_t)(status ^ (status >> 8)), 1); // Maybe ~1 real bit of entropy.
    1334:	91 2f       	mov	r25, r17
    1336:	90 27       	eor	r25, r16
    1338:	89 27       	eor	r24, r25
    133a:	61 e0       	ldi	r22, 0x01	; 1
    133c:	0e 94 08 13 	call	0x2610	; 0x2610 <addEntropyToPool(unsigned char, unsigned char)>
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	0b c0       	rjmp	.+22     	; 0x135a <FHT8VCallForHeatPoll()+0x1d6>
      }
#endif 
//    syncSeen = true;
    return(true);
    }
  else if(status & 0x8000) // RX FIFO overflow/underflow: give up and restart...
    1344:	97 ff       	sbrs	r25, 7
    1346:	08 c0       	rjmp	.+16     	; 0x1358 <FHT8VCallForHeatPoll()+0x1d4>
// Useful to assess the noise enviromentment.
static volatile uint8_t lastRXerrno;

// Atomically returns and clears last (FHT8V) RX error code, or 0 if none.
// Set with such codes as FHT8VRXErr_GENERIC; never set to zero.
static void setLastRXErr(const uint8_t err) { ATOMIC_BLOCK (ATOMIC_RESTORESTATE) { lastRXerrno = err; } }
    1348:	9f b7       	in	r25, 0x3f	; 63
    134a:	f8 94       	cli
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	80 93 7d 02 	sts	0x027D, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1352:	9f bf       	out	0x3f, r25	; 63
    {
    setLastRXErr(FHT8VRXErr_GENERIC);
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("RX FIFO problem");
#endif
    _SetupRFM22ToEavesdropOnFHT8V(); // Reset/restart RX.
    1354:	0e 94 8f 07 	call	0xf1e	; 0xf1e <_SetupRFM22ToEavesdropOnFHT8V()>
    return(false);
    1358:	80 e0       	ldi	r24, 0x00	; 0
    }

  return(false);
  }
    135a:	2b 96       	adiw	r28, 0x0b	; 11
    135c:	0f b6       	in	r0, 0x3f	; 63
    135e:	f8 94       	cli
    1360:	de bf       	out	0x3e, r29	; 62
    1362:	0f be       	out	0x3f, r0	; 63
    1364:	cd bf       	out	0x3d, r28	; 61
    1366:	cf 91       	pop	r28
    1368:	df 91       	pop	r29
    136a:	1f 91       	pop	r17
    136c:	0f 91       	pop	r16
    136e:	ff 90       	pop	r15
    1370:	ef 90       	pop	r14
    1372:	08 95       	ret
            content.id1 = command.hc2;
            content.containsID = true;
            }
 
          // If frame looks good then capture it.
          if(allGood) { recordCoreStats(false, &content); }
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	be 01       	movw	r22, r28
    1378:	6b 5f       	subi	r22, 0xFB	; 251
    137a:	7f 4f       	sbci	r23, 0xFF	; 255
    137c:	0e 94 95 0a 	call	0x152a	; 0x152a <recordCoreStats(bool, FullStatsMessageCore const*)>
    1380:	b9 cf       	rjmp	.-142    	; 0x12f4 <FHT8VCallForHeatPoll()+0x170>

00001382 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)>:
// to allow easy handling with string functions.
//  * bptr  pointer to first byte/char (which must be '{')
//  * bufLen  remaining bytes in buffer starting at bptr
// NOTE: adjusts content in place iff the message appears to be valid JSON.
#define adjustJSONMsgForRXAndCheckCRC_ERR -1
int8_t adjustJSONMsgForRXAndCheckCRC(char * const bptr, const uint8_t bufLen)
    1382:	cf 92       	push	r12
    1384:	df 92       	push	r13
    1386:	ef 92       	push	r14
    1388:	ff 92       	push	r15
    138a:	0f 93       	push	r16
    138c:	1f 93       	push	r17
    138e:	cf 93       	push	r28
    1390:	df 93       	push	r29
    1392:	fc 01       	movw	r30, r24
  {
  if('{' != *bptr) { return(adjustJSONMsgForRXAndCheckCRC_ERR); }
    1394:	80 81       	ld	r24, Z
    1396:	8b 37       	cpi	r24, 0x7B	; 123
    1398:	09 f0       	breq	.+2      	; 0x139c <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x1a>
    139a:	43 c0       	rjmp	.+134    	; 0x1422 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0xa0>
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("adjustJSONMsgForRXAndCheckCRC()... {");
#endif
  uint8_t crc = '{';
  // Scan up to maximum length for terminating '}'-with-high-bit.
  const uint8_t ml = min(MSG_JSON_MAX_LENGTH, bufLen);
    139c:	68 33       	cpi	r22, 0x38	; 56
    139e:	08 f0       	brcs	.+2      	; 0x13a2 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x20>
    13a0:	67 e3       	ldi	r22, 0x37	; 55
  char *p = bptr + 1;
    13a2:	ef 01       	movw	r28, r30
    13a4:	21 96       	adiw	r28, 0x01	; 1
    13a6:	3b e7       	ldi	r19, 0x7B	; 123
    13a8:	a1 e0       	ldi	r26, 0x01	; 1
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
  for(int i = 1; i < ml; ++i)
    13ac:	e6 2e       	mov	r14, r22
    13ae:	ff 24       	eor	r15, r15
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    13b0:	cc 24       	eor	r12, r12
    13b2:	c3 94       	inc	r12
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
    13b4:	47 e3       	ldi	r20, 0x37	; 55
    13b6:	d4 2e       	mov	r13, r20
    13b8:	31 c0       	rjmp	.+98     	; 0x141c <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x9a>
  // Scan up to maximum length for terminating '}'-with-high-bit.
  const uint8_t ml = min(MSG_JSON_MAX_LENGTH, bufLen);
  char *p = bptr + 1;
  for(int i = 1; i < ml; ++i)
    {
    const char c = *p++;
    13ba:	fe 01       	movw	r30, r28
    13bc:	71 91       	ld	r23, Z+
    crc = crc7_5B_update(crc, (uint8_t)c); // Update CRC.
    13be:	60 e8       	ldi	r22, 0x80	; 128
    13c0:	40 e0       	ldi	r20, 0x00	; 0
    13c2:	50 e0       	ldi	r21, 0x00	; 0
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    13c4:	07 2f       	mov	r16, r23
    13c6:	10 e0       	ldi	r17, 0x00	; 0
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
    13c8:	83 2f       	mov	r24, r19
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	26 e0       	ldi	r18, 0x06	; 6
    13ce:	96 95       	lsr	r25
    13d0:	87 95       	ror	r24
    13d2:	2a 95       	dec	r18
    13d4:	e1 f7       	brne	.-8      	; 0x13ce <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x4c>
    13d6:	28 2f       	mov	r18, r24
    13d8:	21 70       	andi	r18, 0x01	; 1
        if(0 != (datum & i)) { bit = !bit; }
    13da:	86 2f       	mov	r24, r22
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	80 23       	and	r24, r16
    13e0:	91 23       	and	r25, r17
    13e2:	89 2b       	or	r24, r25
    13e4:	09 f0       	breq	.+2      	; 0x13e8 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x66>
    13e6:	2c 25       	eor	r18, r12
        crc <<= 1;
    13e8:	33 0f       	add	r19, r19
        if(bit) { crc ^= 0x37; }
    13ea:	21 11       	cpse	r18, r1
    13ec:	3d 25       	eor	r19, r13
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
    13ee:	66 95       	lsr	r22
    13f0:	4f 5f       	subi	r20, 0xFF	; 255
    13f2:	5f 4f       	sbci	r21, 0xFF	; 255
    13f4:	48 30       	cpi	r20, 0x08	; 8
    13f6:	51 05       	cpc	r21, r1
    13f8:	39 f7       	brne	.-50     	; 0x13c8 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x46>
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
        }
    return(crc & 0x7f);
    13fa:	3f 77       	andi	r19, 0x7F	; 127
#endif
      return(i+1);
      }
#endif
    // With a terminating '}' (followed by '\0') the message is superficially valid.
    if((((char)('}' | 0x80)) == c) && (crc == (uint8_t)*p))
    13fc:	7d 3f       	cpi	r23, 0xFD	; 253
    13fe:	49 f4       	brne	.+18     	; 0x1412 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x90>
    1400:	80 81       	ld	r24, Z
    1402:	38 17       	cp	r19, r24
    1404:	31 f4       	brne	.+12     	; 0x1412 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x90>
      {
      *(p - 1) = '}';
    1406:	8d e7       	ldi	r24, 0x7D	; 125
    1408:	88 83       	st	Y, r24
      *p = '\0'; // Null terminate for use as a text string.
    140a:	10 82       	st	Z, r1
#if 0 && defined(DEBUG)
      DEBUG_SERIAL_PRINTLN_FLASHSTRING("} OK with CRC");
#endif
      return(i+1);
    140c:	8a 2f       	mov	r24, r26
    140e:	8f 5f       	subi	r24, 0xFF	; 255
    1410:	09 c0       	rjmp	.+18     	; 0x1424 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0xa2>
      }
    // Non-printable/control character makes the message invalid.
    if((c < 32) || (c > 126))
    1412:	70 52       	subi	r23, 0x20	; 32
    1414:	7f 35       	cpi	r23, 0x5F	; 95
    1416:	28 f4       	brcc	.+10     	; 0x1422 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0xa0>
#endif
  uint8_t crc = '{';
  // Scan up to maximum length for terminating '}'-with-high-bit.
  const uint8_t ml = min(MSG_JSON_MAX_LENGTH, bufLen);
  char *p = bptr + 1;
  for(int i = 1; i < ml; ++i)
    1418:	11 96       	adiw	r26, 0x01	; 1
    141a:	ef 01       	movw	r28, r30
    141c:	ae 15       	cp	r26, r14
    141e:	bf 05       	cpc	r27, r15
    1420:	64 f2       	brlt	.-104    	; 0x13ba <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x38>
    1422:	8f ef       	ldi	r24, 0xFF	; 255
    }
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING(" bad: unterminated");
#endif
  return(adjustJSONMsgForRXAndCheckCRC_ERR); // Bad (unterminated) message.
  }
    1424:	df 91       	pop	r29
    1426:	cf 91       	pop	r28
    1428:	1f 91       	pop	r17
    142a:	0f 91       	pop	r16
    142c:	ff 90       	pop	r15
    142e:	ef 90       	pop	r14
    1430:	df 90       	pop	r13
    1432:	cf 90       	pop	r12
    1434:	08 95       	ret

00001436 <ensureIDCreated(bool)>:
// Coerce any ID bytes to valid values if unset (0xff) or if forced,
// by filling with valid values (0x80--0xfe) from decent entropy gathered on the fly.
// Will moan about invalid values and return false but not attempt to reset,
// eg in case underlying EEPROM cell is worn/failing.
// Returns true iff all values good.
bool ensureIDCreated(const bool force)
    1436:	af 92       	push	r10
    1438:	bf 92       	push	r11
    143a:	cf 92       	push	r12
    143c:	df 92       	push	r13
    143e:	ef 92       	push	r14
    1440:	ff 92       	push	r15
    1442:	0f 93       	push	r16
    1444:	1f 93       	push	r17
    1446:	cf 93       	push	r28
    1448:	df 93       	push	r29
    144a:	a8 2e       	mov	r10, r24
    144c:	bb 24       	eor	r11, r11
    144e:	b3 94       	inc	r11
    1450:	ee 24       	eor	r14, r14
    1452:	ff 24       	eor	r15, r15
    1454:	c4 e1       	ldi	r28, 0x14	; 20
    1456:	d0 e0       	ldi	r29, 0x00	; 0
    1458:	dc 2e       	mov	r13, r28
    145a:	cd 2e       	mov	r12, r29
  {
  bool allGood = true;
  for(uint8_t i = 0; i < EE_LEN_ID; ++i)
    {
    uint8_t * const loc = i + (uint8_t *)EE_START_ID;
    if(force || (0xff == eeprom_read_byte(loc))) // Byte is unset or change is being forced.
    145c:	aa 20       	and	r10, r10
    145e:	41 f4       	brne	.+16     	; 0x1470 <ensureIDCreated(bool)+0x3a>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1460:	f9 99       	sbic	0x1f, 1	; 31
    1462:	fe cf       	rjmp	.-4      	; 0x1460 <ensureIDCreated(bool)+0x2a>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1464:	d2 bd       	out	0x22, r29	; 34
    1466:	c1 bd       	out	0x21, r28	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1468:	f8 9a       	sbi	0x1f, 0	; 31
    146a:	80 b5       	in	r24, 0x20	; 32
    146c:	8f 3f       	cpi	r24, 0xFF	; 255
    146e:	41 f5       	brne	.+80     	; 0x14c0 <ensureIDCreated(bool)+0x8a>
        {
        serialPrintAndFlush(F("Setting ID byte "));
    1470:	8d e0       	ldi	r24, 0x0D	; 13
    1472:	91 e0       	ldi	r25, 0x01	; 1
    1474:	0e 94 b9 13 	call	0x2772	; 0x2772 <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush(i);
    1478:	c7 01       	movw	r24, r14
    147a:	6a e0       	ldi	r22, 0x0A	; 10
    147c:	70 e0       	ldi	r23, 0x00	; 0
    147e:	0e 94 87 13 	call	0x270e	; 0x270e <serialPrintAndFlush(int, int)>
        serialPrintAndFlush(' ');
    1482:	80 e2       	ldi	r24, 0x20	; 32
    1484:	0e 94 63 13 	call	0x26c6	; 0x26c6 <serialPrintAndFlush(char)>
        const uint8_t envNoise = ((i & 1) ? TemperatureC16.get() : AmbLight.get());
    1488:	e0 fe       	sbrs	r14, 0
    148a:	03 c0       	rjmp	.+6      	; 0x1492 <ensureIDCreated(bool)+0x5c>
    148c:	00 91 21 03 	lds	r16, 0x0321
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <ensureIDCreated(bool)+0x60>
  public:
    // Return last value fetched by read(); undefined before first read().
    // Usually fast.
    // Often likely to be thread-safe or usable within ISRs (Interrupt Service Routines),
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual uint8_t get() const { return(value); }
    1492:	00 91 1a 03 	lds	r16, 0x031A
        for( ; ; )
          {
          // Try to make decently-randomised 'unique-ish' ID with mixture of sources.
          // Is not confidential, and will be transmitted in the clear.
          // System will typically not have been running long when this is invoked.
          const uint8_t newValue = 0x80 | (getSecureRandomByte() ^ envNoise);
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	0e 94 0e 13 	call	0x261c	; 0x261c <getSecureRandomByte(bool)>
    149c:	18 2f       	mov	r17, r24
    149e:	10 27       	eor	r17, r16
    14a0:	10 68       	ori	r17, 0x80	; 128
          if(0xff == newValue) { continue; } // Reject unusable value.
    14a2:	1f 3f       	cpi	r17, 0xFF	; 255
    14a4:	c1 f3       	breq	.-16     	; 0x1496 <ensureIDCreated(bool)+0x60>
          eeprom_smart_update_byte(loc, newValue);
    14a6:	8d 2d       	mov	r24, r13
    14a8:	9c 2d       	mov	r25, r12
    14aa:	61 2f       	mov	r22, r17
    14ac:	0e 94 4d 07 	call	0xe9a	; 0xe9a <eeprom_smart_update_byte(unsigned char*, unsigned char)>
          serialPrintAndFlush(newValue, HEX);
    14b0:	81 2f       	mov	r24, r17
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	60 e1       	ldi	r22, 0x10	; 16
    14b6:	70 e0       	ldi	r23, 0x00	; 0
    14b8:	0e 94 87 13 	call	0x270e	; 0x270e <serialPrintAndFlush(int, int)>
          break;
          }
        serialPrintlnAndFlush();
    14bc:	0e 94 77 13 	call	0x26ee	; 0x26ee <serialPrintlnAndFlush()>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    14c0:	f9 99       	sbic	0x1f, 1	; 31
    14c2:	fe cf       	rjmp	.-4      	; 0x14c0 <ensureIDCreated(bool)+0x8a>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    14c4:	d2 bd       	out	0x22, r29	; 34
    14c6:	c1 bd       	out	0x21, r28	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    14c8:	f8 9a       	sbi	0x1f, 0	; 31
    14ca:	10 b5       	in	r17, 0x20	; 32
        }
    // Validate.
    const uint8_t v2 = eeprom_read_byte(loc);
    if(!validIDByte(v2))
    14cc:	81 2f       	mov	r24, r17
    14ce:	80 58       	subi	r24, 0x80	; 128
    14d0:	8f 37       	cpi	r24, 0x7F	; 127
    14d2:	b0 f0       	brcs	.+44     	; 0x1500 <ensureIDCreated(bool)+0xca>
        {
        allGood = false;
        serialPrintAndFlush(F("Invalid byte "));
    14d4:	8f ef       	ldi	r24, 0xFF	; 255
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	0e 94 b9 13 	call	0x2772	; 0x2772 <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush(i);
    14dc:	c7 01       	movw	r24, r14
    14de:	6a e0       	ldi	r22, 0x0A	; 10
    14e0:	70 e0       	ldi	r23, 0x00	; 0
    14e2:	0e 94 87 13 	call	0x270e	; 0x270e <serialPrintAndFlush(int, int)>
        serialPrintAndFlush(F(" ... "));
    14e6:	89 ef       	ldi	r24, 0xF9	; 249
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	0e 94 b9 13 	call	0x2772	; 0x2772 <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush(v2, HEX);
    14ee:	81 2f       	mov	r24, r17
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	60 e1       	ldi	r22, 0x10	; 16
    14f4:	70 e0       	ldi	r23, 0x00	; 0
    14f6:	0e 94 87 13 	call	0x270e	; 0x270e <serialPrintAndFlush(int, int)>
        serialPrintlnAndFlush();
    14fa:	0e 94 77 13 	call	0x26ee	; 0x26ee <serialPrintlnAndFlush()>
    14fe:	bb 24       	eor	r11, r11
    1500:	08 94       	sec
    1502:	e1 1c       	adc	r14, r1
    1504:	f1 1c       	adc	r15, r1
    1506:	21 96       	adiw	r28, 0x01	; 1
// eg in case underlying EEPROM cell is worn/failing.
// Returns true iff all values good.
bool ensureIDCreated(const bool force)
  {
  bool allGood = true;
  for(uint8_t i = 0; i < EE_LEN_ID; ++i)
    1508:	88 e0       	ldi	r24, 0x08	; 8
    150a:	e8 16       	cp	r14, r24
    150c:	f1 04       	cpc	r15, r1
    150e:	09 f0       	breq	.+2      	; 0x1512 <ensureIDCreated(bool)+0xdc>
    1510:	a3 cf       	rjmp	.-186    	; 0x1458 <ensureIDCreated(bool)+0x22>
        serialPrintAndFlush(v2, HEX);
        serialPrintlnAndFlush();
        }
     }
  return(allGood);
  }
    1512:	8b 2d       	mov	r24, r11
    1514:	df 91       	pop	r29
    1516:	cf 91       	pop	r28
    1518:	1f 91       	pop	r17
    151a:	0f 91       	pop	r16
    151c:	ff 90       	pop	r15
    151e:	ef 90       	pop	r14
    1520:	df 90       	pop	r13
    1522:	cf 90       	pop	r12
    1524:	bf 90       	pop	r11
    1526:	af 90       	pop	r10
    1528:	08 95       	ret

0000152a <recordCoreStats(bool, FullStatsMessageCore const*)>:
// Record core incoming stats; ID must be set as a minimum.
// Is thread/ISR-safe and fast.
// May be backed by a finite-depth queue, even zero-length (ie discarding); usually holds just one item.
#if defined(ALLOW_STATS_RX)
#ifndef recordCoreStats
void recordCoreStats(const bool secure, const FullStatsMessageCore_t * const stats)
    152a:	fb 01       	movw	r30, r22
  {
#if 0 && defined(DEBUG)
  if(NULL == payload) { panic(); }
#endif  // TODO
   if(!stats->containsID) { return; } // Ignore if no ID.
    152c:	80 81       	ld	r24, Z
    152e:	80 ff       	sbrs	r24, 0
    1530:	17 c0       	rjmp	.+46     	; 0x1560 <recordCoreStats(bool, FullStatsMessageCore const*)+0x36>
   ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    1532:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1534:	f8 94       	cli
    {
    if(coreStats.containsID) { ++inboundStatsQueueOverrun; } // Dropped a frame.
    1536:	80 91 c1 02 	lds	r24, 0x02C1
    153a:	80 ff       	sbrs	r24, 0
    153c:	09 c0       	rjmp	.+18     	; 0x1550 <recordCoreStats(bool, FullStatsMessageCore const*)+0x26>
    153e:	80 91 c8 02 	lds	r24, 0x02C8
    1542:	90 91 c9 02 	lds	r25, 0x02C9
    1546:	01 96       	adiw	r24, 0x01	; 1
    1548:	90 93 c9 02 	sts	0x02C9, r25
    154c:	80 93 c8 02 	sts	0x02C8, r24
    memcpy((void *)&coreStats, stats, sizeof(coreStats));
    1550:	a1 ec       	ldi	r26, 0xC1	; 193
    1552:	b2 e0       	ldi	r27, 0x02	; 2
    1554:	87 e0       	ldi	r24, 0x07	; 7
    1556:	01 90       	ld	r0, Z+
    1558:	0d 92       	st	X+, r0
    155a:	81 50       	subi	r24, 0x01	; 1
    155c:	e1 f7       	brne	.-8      	; 0x1556 <recordCoreStats(bool, FullStatsMessageCore const*)+0x2c>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    155e:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    1560:	08 95       	ret

00001562 <recordJSONStats(bool, char const*)>:
// The supplied JSON should already have been somewhat validated.
// Is thread/ISR-safe and moderately fast (though will require a data copy).
// May be backed by a finite-depth queue, even zero-length (ie discarding); usually holds just one item.
#if defined(ALLOW_STATS_RX)
#ifndef recordJSONStats
void recordJSONStats(bool secure, const char *json)
    1562:	1f 93       	push	r17
  {
#if 0 && defined(DEBUG)
  if(NULL == json) { panic(); }
  if('\0' == *json) { panic(); }
#endif
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    1564:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1566:	f8 94       	cli
    {
    if('\0' != *jsonStats) { ++inboundStatsQueueOverrun; } // Dropped a frame.
    1568:	80 91 ca 02 	lds	r24, 0x02CA
    156c:	88 23       	and	r24, r24
    156e:	49 f0       	breq	.+18     	; 0x1582 <recordJSONStats(bool, char const*)+0x20>
    1570:	80 91 c8 02 	lds	r24, 0x02C8
    1574:	90 91 c9 02 	lds	r25, 0x02C9
    1578:	01 96       	adiw	r24, 0x01	; 1
    157a:	90 93 c9 02 	sts	0x02C9, r25
    157e:	80 93 c8 02 	sts	0x02C8, r24
    // Atomically overwrite existing buffer with new non-empty stats message.
    strncpy(jsonStats, json, MSG_JSON_MAX_LENGTH+1);
    1582:	8a ec       	ldi	r24, 0xCA	; 202
    1584:	92 e0       	ldi	r25, 0x02	; 2
    1586:	48 e3       	ldi	r20, 0x38	; 56
    1588:	50 e0       	ldi	r21, 0x00	; 0
    158a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <strncpy>
    // Drop over-length message,
    if('\0' != jsonStats[sizeof(jsonStats) - 1]) { *jsonStats = '\0'; }
    158e:	80 91 01 03 	lds	r24, 0x0301
    1592:	88 23       	and	r24, r24
    1594:	11 f0       	breq	.+4      	; 0x159a <recordJSONStats(bool, char const*)+0x38>
    1596:	10 92 ca 02 	sts	0x02CA, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    159a:	1f bf       	out	0x3f, r17	; 63
    }
  }
    159c:	1f 91       	pop	r17
    159e:	08 95       	ret

000015a0 <extractTrailingMinimalStatsPayload(unsigned char const*, trailingMinimalStatsPayload*)>:
#endif
  }

// Extract payload from valid (3-byte) header+payload+CRC into payload struct; only 2 bytes are actually read.
// Input bytes (eg header and check value) must already have been validated.
void extractTrailingMinimalStatsPayload(const uint8_t *const buf, trailingMinimalStatsPayload_t *const payload)
    15a0:	0f 93       	push	r16
    15a2:	1f 93       	push	r17
    15a4:	cf 93       	push	r28
    15a6:	df 93       	push	r29
    15a8:	ec 01       	movw	r28, r24
    15aa:	8b 01       	movw	r16, r22
  {
#ifdef DEBUG
  if(NULL == payload) { panic(); }
    15ac:	61 15       	cp	r22, r1
    15ae:	71 05       	cpc	r23, r1
    15b0:	11 f4       	brne	.+4      	; 0x15b6 <extractTrailingMinimalStatsPayload(unsigned char const*, trailingMinimalStatsPayload*)+0x16>
    15b2:	0e 94 33 14 	call	0x2866	; 0x2866 <panic()>
#endif
  payload->powerLow = (0 != (buf[0] & 0x10));
    15b6:	88 81       	ld	r24, Y
    15b8:	88 0f       	add	r24, r24
    15ba:	88 0f       	add	r24, r24
    15bc:	88 0f       	add	r24, r24
    15be:	80 78       	andi	r24, 0x80	; 128
    15c0:	f8 01       	movw	r30, r16
    15c2:	41 81       	ldd	r20, Z+1	; 0x01
    15c4:	4f 77       	andi	r20, 0x7F	; 127
    15c6:	48 2b       	or	r20, r24
    15c8:	41 83       	std	Z+1, r20	; 0x01
  payload->tempC16 = ((((int16_t) buf[1]) << 4) | (buf[0] & 0xf)) + MESSAGING_TRAILING_MINIMAL_STATS_TEMP_BIAS;
    15ca:	29 81       	ldd	r18, Y+1	; 0x01
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	94 e0       	ldi	r25, 0x04	; 4
    15d0:	22 0f       	add	r18, r18
    15d2:	33 1f       	adc	r19, r19
    15d4:	9a 95       	dec	r25
    15d6:	e1 f7       	brne	.-8      	; 0x15d0 <extractTrailingMinimalStatsPayload(unsigned char const*, trailingMinimalStatsPayload*)+0x30>
    15d8:	88 81       	ld	r24, Y
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	8f 70       	andi	r24, 0x0F	; 15
    15de:	90 70       	andi	r25, 0x00	; 0
    15e0:	28 2b       	or	r18, r24
    15e2:	39 2b       	or	r19, r25
    15e4:	20 54       	subi	r18, 0x40	; 64
    15e6:	31 40       	sbci	r19, 0x01	; 1
    15e8:	20 83       	st	Z, r18
    15ea:	83 2f       	mov	r24, r19
    15ec:	8f 77       	andi	r24, 0x7F	; 127
    15ee:	40 78       	andi	r20, 0x80	; 128
    15f0:	48 2b       	or	r20, r24
    15f2:	41 83       	std	Z+1, r20	; 0x01
  }
    15f4:	df 91       	pop	r29
    15f6:	cf 91       	pop	r28
    15f8:	1f 91       	pop	r17
    15fa:	0f 91       	pop	r16
    15fc:	08 95       	ret

000015fe <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)>:
// If successful returns pointer to next byte of message, ie just after full stats message decoded.
// Returns null if failed (eg because of corrupt message data) and state of 'content' result is undefined.
// This will avoid copying into the result data (possibly tainted) that has arrived at an inappropriate security level.
//   * content will contain data decoded from the message; must be non-null
const uint8_t *decodeFullStatsMessageCore(const uint8_t * const buf, const uint8_t buflen, const stats_TX_level secLevel, const bool secureChannel,
    FullStatsMessageCore_t * const content)
    15fe:	ef 92       	push	r14
    1600:	ff 92       	push	r15
    1602:	0f 93       	push	r16
    1604:	1f 93       	push	r17
    1606:	cf 93       	push	r28
    1608:	df 93       	push	r29
    160a:	7c 01       	movw	r14, r24
  {
  if(NULL == buf) { return(NULL); } // Could be an assert/panic instead at a pinch.
    160c:	00 97       	sbiw	r24, 0x00	; 0
    160e:	09 f4       	brne	.+2      	; 0x1612 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x14>
    1610:	8f c0       	rjmp	.+286    	; 0x1730 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  if(NULL == content) { return(NULL); } // Could be an assert/panic instead at a pinch.
    1612:	01 15       	cp	r16, r1
    1614:	11 05       	cpc	r17, r1
    1616:	09 f4       	brne	.+2      	; 0x161a <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x1c>
    1618:	8b c0       	rjmp	.+278    	; 0x1730 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  if(buflen < FullStatsMessageCore_MIN_BYTES_ON_WIRE)
    161a:	63 30       	cpi	r22, 0x03	; 3
    161c:	08 f4       	brcc	.+2      	; 0x1620 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x22>
    161e:	88 c0       	rjmp	.+272    	; 0x1730 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
#define FullStatsMessageCore_MAX_BYTES_ON_WIRE 8
// Minimum size on wire including trailing CRC of core of FullStatsMessage.  TX message buffer should be one larger for trailing 0xff.
#define FullStatsMessageCore_MIN_BYTES_ON_WIRE 3

// Clear a FullStatsMessageCore_t, also indicating no optional fields present.
static inline void clearFullStatsMessageCore(FullStatsMessageCore_t *const p) { memset(p, 0, sizeof(FullStatsMessageCore_t)); }
    1620:	87 e0       	ldi	r24, 0x07	; 7
    1622:	f8 01       	movw	r30, r16
    1624:	11 92       	st	Z+, r1
    1626:	8a 95       	dec	r24
    1628:	e9 f7       	brne	.-6      	; 0x1624 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x26>
//#define MESSAGING_FULL_STATS_HEADER_MSBS 0x70
//#define MESSAGING_FULL_STATS_HEADER_MASK 0xf0
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_PRESENT 4
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_HIGH 2
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_SECURE 1
  if(MESSAGING_FULL_STATS_HEADER_MSBS != (header & MESSAGING_FULL_STATS_HEADER_MASK)) { return(NULL); } // Bad header.
    162a:	f7 01       	movw	r30, r14
    162c:	80 81       	ld	r24, Z
    162e:	28 2f       	mov	r18, r24
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	c9 01       	movw	r24, r18
    1634:	80 7f       	andi	r24, 0xF0	; 240
    1636:	90 70       	andi	r25, 0x00	; 0
    1638:	80 37       	cpi	r24, 0x70	; 112
    163a:	91 05       	cpc	r25, r1
    163c:	09 f0       	breq	.+2      	; 0x1640 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x42>
    163e:	78 c0       	rjmp	.+240    	; 0x1730 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  if(0 != (header & MESSAGING_FULL_STATS_HEADER_BITS_ID_SECURE)) { return(NULL); } // TODO: cannot do secure messages yet.
    1640:	20 fd       	sbrc	r18, 0
    1642:	76 c0       	rjmp	.+236    	; 0x1730 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  // READ THE MESSAGE!
  // Pointer to next byte to read in message.
  register const uint8_t *b = buf;

  // Validate the message header and start to fill in structure.
  const uint8_t header = *b++;
    1644:	e7 01       	movw	r28, r14
    1646:	21 96       	adiw	r28, 0x01	; 1
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_SECURE 1
  if(MESSAGING_FULL_STATS_HEADER_MSBS != (header & MESSAGING_FULL_STATS_HEADER_MASK)) { return(NULL); } // Bad header.
  if(0 != (header & MESSAGING_FULL_STATS_HEADER_BITS_ID_SECURE)) { return(NULL); } // TODO: cannot do secure messages yet.
  // Extract ID if present.
  const bool containsID = (0 != (header & MESSAGING_FULL_STATS_HEADER_BITS_ID_PRESENT));
  if(containsID)
    1648:	22 ff       	sbrs	r18, 2
    164a:	12 c0       	rjmp	.+36     	; 0x1670 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x72>
    {
    content->containsID = true;
    164c:	f8 01       	movw	r30, r16
    164e:	80 81       	ld	r24, Z
    1650:	81 60       	ori	r24, 0x01	; 1
    1652:	80 83       	st	Z, r24
    const uint8_t idHigh = ((0 != (header & MESSAGING_FULL_STATS_HEADER_BITS_ID_HIGH)) ? 0x80 : 0);
    1654:	21 fd       	sbrc	r18, 1
    1656:	02 c0       	rjmp	.+4      	; 0x165c <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x5e>
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	01 c0       	rjmp	.+2      	; 0x165e <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x60>
    165c:	90 e8       	ldi	r25, 0x80	; 128
    content->id0 = *b++ | idHigh;
    165e:	f7 01       	movw	r30, r14
    1660:	81 81       	ldd	r24, Z+1	; 0x01
    1662:	89 2b       	or	r24, r25
    1664:	f8 01       	movw	r30, r16
    1666:	81 83       	std	Z+1, r24	; 0x01
    content->id1 = *b++ | idHigh;
    1668:	89 81       	ldd	r24, Y+1	; 0x01
    166a:	98 2b       	or	r25, r24
    166c:	92 83       	std	Z+2, r25	; 0x02
    166e:	22 96       	adiw	r28, 0x02	; 2
    }

  // If next header is temp/power then extract it, else must be the flags header.
  if(MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MSBS == (*b & MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MASK))
    1670:	88 81       	ld	r24, Y
    1672:	80 7e       	andi	r24, 0xE0	; 224
    1674:	80 34       	cpi	r24, 0x40	; 64
    1676:	71 f4       	brne	.+28     	; 0x1694 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x96>
    {
    if(0 != (0x80 & b[1])) { return(NULL); } // Following byte does not have msb correctly cleared.
    1678:	89 81       	ldd	r24, Y+1	; 0x01
    167a:	87 fd       	sbrc	r24, 7
    167c:	59 c0       	rjmp	.+178    	; 0x1730 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
    extractTrailingMinimalStatsPayload(b, &(content->tempAndPower));
    167e:	b8 01       	movw	r22, r16
    1680:	6d 5f       	subi	r22, 0xFD	; 253
    1682:	7f 4f       	sbci	r23, 0xFF	; 255
    1684:	ce 01       	movw	r24, r28
    1686:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <extractTrailingMinimalStatsPayload(unsigned char const*, trailingMinimalStatsPayload*)>
    b += 2;
    168a:	22 96       	adiw	r28, 0x02	; 2
    content->containsTempAndPower = true;
    168c:	f8 01       	movw	r30, r16
    168e:	80 81       	ld	r24, Z
    1690:	82 60       	ori	r24, 0x02	; 2
    1692:	80 83       	st	Z, r24
    }

  // If next header is flags then extract it.
  // FIXME: risk of misinterpretting CRC.
  if(MESSAGING_FULL_STATS_FLAGS_HEADER_MSBS != (*b & MESSAGING_FULL_STATS_FLAGS_HEADER_MASK)) { return(NULL); } // Corrupt message.
    1694:	28 81       	ld	r18, Y
    1696:	42 2f       	mov	r20, r18
    1698:	50 e0       	ldi	r21, 0x00	; 0
    169a:	ca 01       	movw	r24, r20
    169c:	80 7e       	andi	r24, 0xE0	; 224
    169e:	90 70       	andi	r25, 0x00	; 0
    16a0:	80 36       	cpi	r24, 0x60	; 96
    16a2:	91 05       	cpc	r25, r1
    16a4:	09 f0       	breq	.+2      	; 0x16a8 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0xaa>
    16a6:	44 c0       	rjmp	.+136    	; 0x1730 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  const uint8_t flagsHeader = *b++;
    16a8:	de 01       	movw	r26, r28
    16aa:	11 96       	adiw	r26, 0x01	; 1
  content->occ = flagsHeader & 3;
    16ac:	23 70       	andi	r18, 0x03	; 3
    16ae:	f8 01       	movw	r30, r16
    16b0:	86 81       	ldd	r24, Z+6	; 0x06
    16b2:	8c 7f       	andi	r24, 0xFC	; 252
    16b4:	82 2b       	or	r24, r18
    16b6:	86 83       	std	Z+6, r24	; 0x06
  const bool containsAmbL = (0 != (flagsHeader & MESSAGING_FULL_STATS_FLAGS_HEADER_AMBL));
  if(containsAmbL)
    16b8:	43 ff       	sbrs	r20, 3
    16ba:	0a c0       	rjmp	.+20     	; 0x16d0 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0xd2>
    {
    const uint8_t ambL = *b++;
    16bc:	99 81       	ldd	r25, Y+1	; 0x01
    if((0 == ambL) || (ambL == (uint8_t)0xff)) { return(NULL); } // Illegal value.
    16be:	89 2f       	mov	r24, r25
    16c0:	81 50       	subi	r24, 0x01	; 1
    16c2:	8e 3f       	cpi	r24, 0xFE	; 254
    16c4:	a8 f5       	brcc	.+106    	; 0x1730 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  const uint8_t flagsHeader = *b++;
  content->occ = flagsHeader & 3;
  const bool containsAmbL = (0 != (flagsHeader & MESSAGING_FULL_STATS_FLAGS_HEADER_AMBL));
  if(containsAmbL)
    {
    const uint8_t ambL = *b++;
    16c6:	11 96       	adiw	r26, 0x01	; 1
    if((0 == ambL) || (ambL == (uint8_t)0xff)) { return(NULL); } // Illegal value.
    content->ambL = ambL;
    16c8:	95 83       	std	Z+5, r25	; 0x05
    content->containsAmbL = true;
    16ca:	80 81       	ld	r24, Z
    16cc:	84 60       	ori	r24, 0x04	; 4
    16ce:	80 83       	st	Z, r24
    16d0:	f7 01       	movw	r30, r14
    16d2:	3f e7       	ldi	r19, 0x7F	; 127
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    16d4:	11 e0       	ldi	r17, 0x01	; 1
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
    16d6:	77 e3       	ldi	r23, 0x37	; 55
    16d8:	21 c0       	rjmp	.+66     	; 0x171c <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x11e>
    }

  // Finish off by computing and checking the CRC (and return pointer to just after CRC).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    16da:	80 81       	ld	r24, Z
    16dc:	60 e8       	ldi	r22, 0x80	; 128
    16de:	40 e0       	ldi	r20, 0x00	; 0
    16e0:	50 e0       	ldi	r21, 0x00	; 0
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    16e2:	c8 2f       	mov	r28, r24
    16e4:	d0 e0       	ldi	r29, 0x00	; 0
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
    16e6:	83 2f       	mov	r24, r19
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	26 e0       	ldi	r18, 0x06	; 6
    16ec:	96 95       	lsr	r25
    16ee:	87 95       	ror	r24
    16f0:	2a 95       	dec	r18
    16f2:	e1 f7       	brne	.-8      	; 0x16ec <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0xee>
    16f4:	28 2f       	mov	r18, r24
    16f6:	21 70       	andi	r18, 0x01	; 1
        if(0 != (datum & i)) { bit = !bit; }
    16f8:	86 2f       	mov	r24, r22
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	8c 23       	and	r24, r28
    16fe:	9d 23       	and	r25, r29
    1700:	89 2b       	or	r24, r25
    1702:	09 f0       	breq	.+2      	; 0x1706 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x108>
    1704:	21 27       	eor	r18, r17
        crc <<= 1;
    1706:	33 0f       	add	r19, r19
        if(bit) { crc ^= 0x37; }
    1708:	21 11       	cpse	r18, r1
    170a:	37 27       	eor	r19, r23
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
    170c:	66 95       	lsr	r22
    170e:	4f 5f       	subi	r20, 0xFF	; 255
    1710:	5f 4f       	sbci	r21, 0xFF	; 255
    1712:	48 30       	cpi	r20, 0x08	; 8
    1714:	51 05       	cpc	r21, r1
    1716:	39 f7       	brne	.-50     	; 0x16e6 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0xe8>
    }

  // Finish off by computing and checking the CRC (and return pointer to just after CRC).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    1718:	31 96       	adiw	r30, 0x01	; 1
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
        }
    return(crc & 0x7f);
    171a:	3f 77       	andi	r19, 0x7F	; 127
    }

  // Finish off by computing and checking the CRC (and return pointer to just after CRC).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    171c:	ea 17       	cp	r30, r26
    171e:	fb 07       	cpc	r31, r27
    1720:	e0 f2       	brcs	.-72     	; 0x16da <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0xdc>
  if(crc != *b++) { return(NULL); } // Bad CRC.
    1722:	8c 91       	ld	r24, X
    1724:	38 17       	cp	r19, r24
    1726:	21 f4       	brne	.+8      	; 0x1730 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
    1728:	9d 01       	movw	r18, r26
    172a:	2f 5f       	subi	r18, 0xFF	; 255
    172c:	3f 4f       	sbci	r19, 0xFF	; 255
    172e:	02 c0       	rjmp	.+4      	; 0x1734 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x136>

  return(b); // Point to just after CRC.
    1730:	20 e0       	ldi	r18, 0x00	; 0
    1732:	30 e0       	ldi	r19, 0x00	; 0
  }
    1734:	c9 01       	movw	r24, r18
    1736:	df 91       	pop	r29
    1738:	cf 91       	pop	r28
    173a:	1f 91       	pop	r17
    173c:	0f 91       	pop	r16
    173e:	ff 90       	pop	r15
    1740:	ef 90       	pop	r14
    1742:	08 95       	ret

00001744 <SupplyVoltageMilliVolts::get() const>:
    virtual uint16_t read();

    // Return last value fetched by read(); undefined before first read()).
    // Fast.
    // NOT thread-safe nor usable within ISRs (Interrupt Service Routines).
    virtual uint16_t get() const { return(mV); }
    1744:	fc 01       	movw	r30, r24
    1746:	84 81       	ldd	r24, Z+4	; 0x04
    1748:	95 81       	ldd	r25, Z+5	; 0x05
    174a:	08 95       	ret

0000174c <SupplyVoltageMilliVolts::tag() const>:

    // Returns a suggested (JSON) tag/field/key name including units of get(); NULL means no recommended tag.
    // The lifetime of the pointed-to text must be at least that of the Sensor instance.
    virtual const char *tag() const { return("B|mV"); }
    174c:	81 e2       	ldi	r24, 0x21	; 33
    174e:	91 e0       	ldi	r25, 0x01	; 1
    1750:	08 95       	ret

00001752 <__vector_9>:
  timer2XtalIntSetup();
#endif
  }

#ifdef WAKEUP_32768HZ_XTAL
ISR(TIMER2_OVF_vect)
    1752:	1f 92       	push	r1
    1754:	0f 92       	push	r0
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	0f 92       	push	r0
    175a:	11 24       	eor	r1, r1
    175c:	2f 93       	push	r18
    175e:	8f 93       	push	r24
    1760:	9f 93       	push	r25
// must not enable interrupts, and must leave interrupt state as was on entry.
// If not being called from an ISR then locking round this call that works with the getXXX() functions should be considered.
static inline void tickSecondISR()
#endif
  {
  register uint_fast8_t sTemp = _secondsLT; // Avoid some redundant memory accesses.
    1762:	80 91 10 03 	lds	r24, 0x0310
  sTemp += MAIN_TICK_S;
    1766:	8e 5f       	subi	r24, 0xFE	; 254
  if(sTemp > 59)
    1768:	8c 33       	cpi	r24, 0x3C	; 60
    176a:	c8 f0       	brcs	.+50     	; 0x179e <__vector_9+0x4c>
    {
    sTemp = 0; // Seconds roll.
    register uint_least16_t mTemp = _minutesSinceMidnightLT + 1; // Avoid some redundant memory accesses.
    176c:	80 91 11 03 	lds	r24, 0x0311
    1770:	90 91 12 03 	lds	r25, 0x0312
    1774:	01 96       	adiw	r24, 0x01	; 1
    if(mTemp > 1439)
    1776:	25 e0       	ldi	r18, 0x05	; 5
    1778:	80 3a       	cpi	r24, 0xA0	; 160
    177a:	92 07       	cpc	r25, r18
    177c:	58 f0       	brcs	.+22     	; 0x1794 <__vector_9+0x42>
      {
      mTemp = 0; // Minutes/hours roll.
      // Increment the day.
      ++_daysSince1999LT; // Don't currently prevent roll.
    177e:	80 91 13 03 	lds	r24, 0x0313
    1782:	90 91 14 03 	lds	r25, 0x0314
    1786:	01 96       	adiw	r24, 0x01	; 1
    1788:	90 93 14 03 	sts	0x0314, r25
    178c:	80 93 13 03 	sts	0x0313, r24
    1790:	80 e0       	ldi	r24, 0x00	; 0
    1792:	90 e0       	ldi	r25, 0x00	; 0
      }
    _minutesSinceMidnightLT = mTemp;
    1794:	90 93 12 03 	sts	0x0312, r25
    1798:	80 93 11 03 	sts	0x0311, r24
    179c:	80 e0       	ldi	r24, 0x00	; 0
    }
  _secondsLT = sTemp;
    179e:	80 93 10 03 	sts	0x0310, r24
#if defined(TWO_S_TICK_RTC_SUPPORT)
  tickDoubleSecondISR();
#else
  tickSecondISR();
#endif
  }
    17a2:	9f 91       	pop	r25
    17a4:	8f 91       	pop	r24
    17a6:	2f 91       	pop	r18
    17a8:	0f 90       	pop	r0
    17aa:	0f be       	out	0x3f, r0	; 63
    17ac:	0f 90       	pop	r0
    17ae:	1f 90       	pop	r1
    17b0:	18 95       	reti

000017b2 <__vector_6>:
// May contain a little entropy concentrated in the least-significant bits, in part from WDT-vs-CPU-clock jitter, especially if not sleeping.
static volatile uint8_t _watchdogFired;

// Catch watchdog timer interrupt to automatically clear WDIE and WDIF.
// This allows use of watchdog for low-power timed sleep.
ISR(WDT_vect)
    17b2:	1f 92       	push	r1
    17b4:	0f 92       	push	r0
    17b6:	0f b6       	in	r0, 0x3f	; 63
    17b8:	0f 92       	push	r0
    17ba:	11 24       	eor	r1, r1
    17bc:	8f 93       	push	r24
    17be:	9f 93       	push	r25
    17c0:	df 93       	push	r29
    17c2:	cf 93       	push	r28
    17c4:	0f 92       	push	r0
    17c6:	cd b7       	in	r28, 0x3d	; 61
    17c8:	de b7       	in	r29, 0x3e	; 62
  {
  // WDIE and WDIF are cleared in hardware upon entering this ISR.
  wdt_disable();
    17ca:	88 e1       	ldi	r24, 0x18	; 24
    17cc:	0f b6       	in	r0, 0x3f	; 63
    17ce:	f8 94       	cli
    17d0:	80 93 60 00 	sts	0x0060, r24
    17d4:	10 92 60 00 	sts	0x0060, r1
    17d8:	0f be       	out	0x3f, r0	; 63
  // Note: be careful of what is accessed from this ISR.
  // Capture some marginal entropy from the stack position.
  // 
  uint8_t x;
  _watchdogFired = ((uint8_t) 0x80) | ((uint8_t) (int) &x); // Ensure non-zero, retaining any entropy in ls bits.
    17da:	ce 01       	movw	r24, r28
    17dc:	01 96       	adiw	r24, 0x01	; 1
    17de:	80 68       	ori	r24, 0x80	; 128
    17e0:	80 93 09 03 	sts	0x0309, r24
  }
    17e4:	0f 90       	pop	r0
    17e6:	cf 91       	pop	r28
    17e8:	df 91       	pop	r29
    17ea:	9f 91       	pop	r25
    17ec:	8f 91       	pop	r24
    17ee:	0f 90       	pop	r0
    17f0:	0f be       	out	0x3f, r0	; 63
    17f2:	0f 90       	pop	r0
    17f4:	1f 90       	pop	r1
    17f6:	18 95       	reti

000017f8 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>:
// Note: inlining is prevented so as to avoid migrating anything into the section where the CPU is running slowly.
//
// Note: may be dubious to run CPU clock less than 4x 32768Hz crystal speed,
// eg at 31250Hz for 8MHz RC clock and max prescale.
// Don't access timer 2 regs at low CPU speed, eg in ISRs.
__attribute__ ((noinline)) void sleepLowPowerLoopsMinCPUSpeed(uint16_t loops)
    17f8:	fc 01       	movw	r30, r24
  {
  const clock_div_t prescale = clock_prescale_get(); // Capture current prescale value.
    17fa:	80 91 61 00 	lds	r24, 0x0061
  clock_prescale_set(MAX_CPU_PRESCALE); // Reduce clock speed (increase prescale) as far as possible.
    17fe:	28 e0       	ldi	r18, 0x08	; 8
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	40 e8       	ldi	r20, 0x80	; 128
    1804:	0f b6       	in	r0, 0x3f	; 63
    1806:	f8 94       	cli
    1808:	40 93 61 00 	sts	0x0061, r20
    180c:	20 93 61 00 	sts	0x0061, r18
    1810:	0f be       	out	0x3f, r0	; 63
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    1812:	31 97       	sbiw	r30, 0x01	; 1
    1814:	f1 f7       	brne	.-4      	; 0x1812 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)+0x1a>
  _delay_loop_2(loops); // Burn cycles...
  clock_prescale_set(prescale); // Restore clock prescale.
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	8f 70       	andi	r24, 0x0F	; 15
    181a:	90 70       	andi	r25, 0x00	; 0
    181c:	20 e8       	ldi	r18, 0x80	; 128
    181e:	0f b6       	in	r0, 0x3f	; 63
    1820:	f8 94       	cli
    1822:	20 93 61 00 	sts	0x0061, r18
    1826:	80 93 61 00 	sts	0x0061, r24
    182a:	0f be       	out	0x3f, r0	; 63
  }
    182c:	08 95       	ret

0000182e <sleepPwrSaveWithBODDisabled()>:
#endif

// Sleep with BOD disabled in power-save mode; will wake on any interrupt.
void sleepPwrSaveWithBODDisabled()
  {
  set_sleep_mode(SLEEP_MODE_PWR_SAVE); // Stop all but timer 2 and watchdog when sleeping.
    182e:	83 b7       	in	r24, 0x33	; 51
    1830:	81 7f       	andi	r24, 0xF1	; 241
    1832:	86 60       	ori	r24, 0x06	; 6
    1834:	83 bf       	out	0x33, r24	; 51
  cli();
    1836:	f8 94       	cli
  sleep_enable();
    1838:	83 b7       	in	r24, 0x33	; 51
    183a:	81 60       	ori	r24, 0x01	; 1
    183c:	83 bf       	out	0x33, r24	; 51
  sleep_bod_disable();
    183e:	85 b7       	in	r24, 0x35	; 53
    1840:	80 66       	ori	r24, 0x60	; 96
    1842:	85 bf       	out	0x35, r24	; 53
    1844:	8f 7d       	andi	r24, 0xDF	; 223
    1846:	85 bf       	out	0x35, r24	; 53
  sei();
    1848:	78 94       	sei
  sleep_cpu();
    184a:	88 95       	sleep
  sleep_disable();
    184c:	83 b7       	in	r24, 0x33	; 51
    184e:	8e 7f       	andi	r24, 0xFE	; 254
    1850:	83 bf       	out	0x33, r24	; 51
  sei();
    1852:	78 94       	sei
  }
    1854:	08 95       	ret

00001856 <nap(signed char)>:
//   * watchdogSleep is one of the WDTO_XX values from <avr/wdt.h>
// May be useful to call minimsePowerWithoutSleep() first, when not needing any modules left on.
void nap(int_fast8_t watchdogSleep)
  {
  // Watchdog should (already) be disabled on entry.
  _watchdogFired = 0;
    1856:	10 92 09 03 	sts	0x0309, r1

  wdt_enable(watchdogSleep);
    185a:	83 fd       	sbrc	r24, 3
    185c:	02 c0       	rjmp	.+4      	; 0x1862 <nap(signed char)+0xc>
    185e:	28 e0       	ldi	r18, 0x08	; 8
    1860:	01 c0       	rjmp	.+2      	; 0x1864 <nap(signed char)+0xe>
    1862:	28 e2       	ldi	r18, 0x28	; 40
    1864:	87 70       	andi	r24, 0x07	; 7
    1866:	28 2b       	or	r18, r24
    1868:	88 e1       	ldi	r24, 0x18	; 24
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	0f b6       	in	r0, 0x3f	; 63
    186e:	f8 94       	cli
    1870:	a8 95       	wdr
    1872:	80 93 60 00 	sts	0x0060, r24
    1876:	0f be       	out	0x3f, r0	; 63
    1878:	20 93 60 00 	sts	0x0060, r18
  WDTCSR |= (1 << WDIE);
    187c:	80 91 60 00 	lds	r24, 0x0060
    1880:	80 64       	ori	r24, 0x40	; 64
    1882:	80 93 60 00 	sts	0x0060, r24
#endif

// Sleep with BOD disabled in power-save mode; will wake on any interrupt.
void sleepPwrSaveWithBODDisabled()
  {
  set_sleep_mode(SLEEP_MODE_PWR_SAVE); // Stop all but timer 2 and watchdog when sleeping.
    1886:	83 b7       	in	r24, 0x33	; 51
    1888:	81 7f       	andi	r24, 0xF1	; 241
    188a:	86 60       	ori	r24, 0x06	; 6
    188c:	83 bf       	out	0x33, r24	; 51
  cli();
    188e:	f8 94       	cli
  sleep_enable();
    1890:	83 b7       	in	r24, 0x33	; 51
    1892:	81 60       	ori	r24, 0x01	; 1
    1894:	83 bf       	out	0x33, r24	; 51
  sleep_bod_disable();
    1896:	85 b7       	in	r24, 0x35	; 53
    1898:	80 66       	ori	r24, 0x60	; 96
    189a:	85 bf       	out	0x35, r24	; 53
    189c:	8f 7d       	andi	r24, 0xDF	; 223
    189e:	85 bf       	out	0x35, r24	; 53
  sei();
    18a0:	78 94       	sei
  sleep_cpu();
    18a2:	88 95       	sleep
  sleep_disable();
    18a4:	83 b7       	in	r24, 0x33	; 51
    18a6:	8e 7f       	andi	r24, 0xFE	; 254
    18a8:	83 bf       	out	0x33, r24	; 51
  sei();
    18aa:	78 94       	sei

  // Keep sleeping until watchdog actually fires.
  for( ; ; )
    {
    sleepPwrSaveWithBODDisabled();
    if(0 != _watchdogFired)
    18ac:	80 91 09 03 	lds	r24, 0x0309
    18b0:	88 23       	and	r24, r24
    18b2:	49 f3       	breq	.-46     	; 0x1886 <nap(signed char)+0x30>
      {
      wdt_disable(); // Avoid spurious wakeup later.
    18b4:	88 e1       	ldi	r24, 0x18	; 24
    18b6:	0f b6       	in	r0, 0x3f	; 63
    18b8:	f8 94       	cli
    18ba:	80 93 60 00 	sts	0x0060, r24
    18be:	10 92 60 00 	sts	0x0060, r1
    18c2:	0f be       	out	0x3f, r0	; 63
      return; // All done!
      }
    }
 }
    18c4:	08 95       	ret

000018c6 <idleCPU(signed char)>:
// Should reduce power consumption vs spinning the CPU >> 3x, though not nearly as much as nap().
// True iff watchdog timer expired; false if something else woke the CPU.
bool idleCPU(const int_fast8_t watchdogSleep)
  {
  // Watchdog should (already) be disabled on entry.
  _watchdogFired = 0;
    18c6:	10 92 09 03 	sts	0x0309, r1
  wdt_enable(watchdogSleep);
    18ca:	83 fd       	sbrc	r24, 3
    18cc:	02 c0       	rjmp	.+4      	; 0x18d2 <idleCPU(signed char)+0xc>
    18ce:	28 e0       	ldi	r18, 0x08	; 8
    18d0:	01 c0       	rjmp	.+2      	; 0x18d4 <idleCPU(signed char)+0xe>
    18d2:	28 e2       	ldi	r18, 0x28	; 40
    18d4:	87 70       	andi	r24, 0x07	; 7
    18d6:	28 2b       	or	r18, r24
    18d8:	88 e1       	ldi	r24, 0x18	; 24
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	0f b6       	in	r0, 0x3f	; 63
    18de:	f8 94       	cli
    18e0:	a8 95       	wdr
    18e2:	80 93 60 00 	sts	0x0060, r24
    18e6:	0f be       	out	0x3f, r0	; 63
    18e8:	20 93 60 00 	sts	0x0060, r18
  WDTCSR |= (1 << WDIE);
    18ec:	80 91 60 00 	lds	r24, 0x0060
    18f0:	80 64       	ori	r24, 0x40	; 64
    18f2:	80 93 60 00 	sts	0x0060, r24
  set_sleep_mode(SLEEP_MODE_IDLE); // Leave everything running but the CPU...
    18f6:	83 b7       	in	r24, 0x33	; 51
    18f8:	81 7f       	andi	r24, 0xF1	; 241
    18fa:	83 bf       	out	0x33, r24	; 51
  sleep_mode();
    18fc:	83 b7       	in	r24, 0x33	; 51
    18fe:	81 60       	ori	r24, 0x01	; 1
    1900:	83 bf       	out	0x33, r24	; 51
    1902:	88 95       	sleep
    1904:	83 b7       	in	r24, 0x33	; 51
    1906:	8e 7f       	andi	r24, 0xFE	; 254
    1908:	83 bf       	out	0x33, r24	; 51
  //sleep_disable();
  wdt_disable();
    190a:	88 e1       	ldi	r24, 0x18	; 24
    190c:	0f b6       	in	r0, 0x3f	; 63
    190e:	f8 94       	cli
    1910:	80 93 60 00 	sts	0x0060, r24
    1914:	10 92 60 00 	sts	0x0060, r1
    1918:	0f be       	out	0x3f, r0	; 63
  return(0 != _watchdogFired);
    191a:	80 91 09 03 	lds	r24, 0x0309
    191e:	81 11       	cpse	r24, r1
    1920:	81 e0       	ldi	r24, 0x01	; 1
  }
    1922:	08 95       	ret

00001924 <__vector_21>:
  }


// Allow wake from (lower-power) sleep while ADC is running.
static volatile bool ADC_complete;
ISR(ADC_vect) { ADC_complete = true; }
    1924:	1f 92       	push	r1
    1926:	0f 92       	push	r0
    1928:	0f b6       	in	r0, 0x3f	; 63
    192a:	0f 92       	push	r0
    192c:	11 24       	eor	r1, r1
    192e:	8f 93       	push	r24
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	80 93 0b 03 	sts	0x030B, r24
    1936:	8f 91       	pop	r24
    1938:	0f 90       	pop	r0
    193a:	0f be       	out	0x3f, r0	; 63
    193c:	0f 90       	pop	r0
    193e:	1f 90       	pop	r1
    1940:	18 95       	reti

00001942 <_analogueNoiseReducedReadM(unsigned char, signed char)>:

// Read ADC/analogue input with reduced noise if possible, in range [0,1023].
//   * admux  is the value to set ADMUX to
//   * samples  maximum number of samples to take (if one, nap() before); strictly positive
// Sets sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
static uint16_t _analogueNoiseReducedReadM(const uint8_t admux, int8_t samples = 3)
    1942:	0f 93       	push	r16
    1944:	1f 93       	push	r17
    1946:	98 2f       	mov	r25, r24
    1948:	16 2f       	mov	r17, r22
// If already powered up then do nothing other than return false.
// This does not power up the analogue comparator; this needs to be manually enabled if required.
// If this returns true then a matching powerDownADC() may be advisable.
bool powerUpADCIfDisabled()
  {
  if(!(PRR & _BV(PRADC))) { return(false); }
    194a:	80 91 64 00 	lds	r24, 0x0064
    194e:	80 fd       	sbrc	r24, 0
    1950:	02 c0       	rjmp	.+4      	; 0x1956 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x14>
    1952:	00 e0       	ldi	r16, 0x00	; 0
    1954:	0b c0       	rjmp	.+22     	; 0x196c <_analogueNoiseReducedReadM(unsigned char, signed char)+0x2a>
  PRR &= ~_BV(PRADC); // Enable the ADC.
    1956:	80 91 64 00 	lds	r24, 0x0064
    195a:	8e 7f       	andi	r24, 0xFE	; 254
    195c:	80 93 64 00 	sts	0x0064, r24
  ADCSRA |= _BV(ADEN);
    1960:	80 91 7a 00 	lds	r24, 0x007A
    1964:	80 68       	ori	r24, 0x80	; 128
    1966:	80 93 7a 00 	sts	0x007A, r24
    196a:	01 e0       	ldi	r16, 0x01	; 1
//   * samples  maximum number of samples to take (if one, nap() before); strictly positive
// Sets sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
static uint16_t _analogueNoiseReducedReadM(const uint8_t admux, int8_t samples = 3)
  {
  const bool neededEnable = powerUpADCIfDisabled();
  ACSR |= _BV(ACD); // Disable the analogue comparator.
    196c:	80 b7       	in	r24, 0x30	; 48
    196e:	80 68       	ori	r24, 0x80	; 128
    1970:	80 bf       	out	0x30, r24	; 48
  ADMUX = admux;
    1972:	90 93 7c 00 	sts	0x007C, r25
  if(samples < 2) { nap(WDTO_15MS); } // Allow plenty of time for things to settle if not taking multiple samples.
    1976:	12 30       	cpi	r17, 0x02	; 2
    1978:	1c f4       	brge	.+6      	; 0x1980 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x3e>
    197a:	80 e0       	ldi	r24, 0x00	; 0
    197c:	0e 94 2b 0c 	call	0x1856	; 0x1856 <nap(signed char)>
  set_sleep_mode(SLEEP_MODE_ADC);
    1980:	83 b7       	in	r24, 0x33	; 51
    1982:	81 7f       	andi	r24, 0xF1	; 241
    1984:	82 60       	ori	r24, 0x02	; 2
    1986:	83 bf       	out	0x33, r24	; 51
  ADCSRB = 0; // Enable free-running mode.
    1988:	10 92 7b 00 	sts	0x007B, r1
  bitWrite(ADCSRA, ADATE, (samples>1)); // Enable ADC auto-trigger iff wanting multiple samples.
    198c:	12 30       	cpi	r17, 0x02	; 2
    198e:	24 f0       	brlt	.+8      	; 0x1998 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x56>
    1990:	80 91 7a 00 	lds	r24, 0x007A
    1994:	80 62       	ori	r24, 0x20	; 32
    1996:	03 c0       	rjmp	.+6      	; 0x199e <_analogueNoiseReducedReadM(unsigned char, signed char)+0x5c>
    1998:	80 91 7a 00 	lds	r24, 0x007A
    199c:	8f 7d       	andi	r24, 0xDF	; 223
    199e:	80 93 7a 00 	sts	0x007A, r24
  bitSet(ADCSRA, ADIE); // Turn on ADC interrupt.
    19a2:	80 91 7a 00 	lds	r24, 0x007A
    19a6:	88 60       	ori	r24, 0x08	; 8
    19a8:	80 93 7a 00 	sts	0x007A, r24
  bitSet(ADCSRA, ADSC); // Start conversion(s).
    19ac:	80 91 7a 00 	lds	r24, 0x007A
    19b0:	80 64       	ori	r24, 0x40	; 64
    19b2:	80 93 7a 00 	sts	0x007A, r24
    19b6:	4f ef       	ldi	r20, 0xFF	; 255
    19b8:	9f ef       	ldi	r25, 0xFF	; 255
    19ba:	21 c0       	rjmp	.+66     	; 0x19fe <_analogueNoiseReducedReadM(unsigned char, signed char)+0xbc>
  uint8_t oldADCL = 0xff;
  uint8_t oldADCH = 0xff; // Ensure that a second sample will get taken if multiple samples have been requested.
  // Usually take several readings to improve accuracy.  Discard all but the last...
  while(--samples >= 0)
      {
      ADC_complete = false;
    19bc:	10 92 0b 03 	sts	0x030B, r1
    19c0:	07 c0       	rjmp	.+14     	; 0x19d0 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x8e>
      while(!ADC_complete) { sleep_mode(); }
    19c2:	83 b7       	in	r24, 0x33	; 51
    19c4:	81 60       	ori	r24, 0x01	; 1
    19c6:	83 bf       	out	0x33, r24	; 51
    19c8:	88 95       	sleep
    19ca:	83 b7       	in	r24, 0x33	; 51
    19cc:	8e 7f       	andi	r24, 0xFE	; 254
    19ce:	83 bf       	out	0x33, r24	; 51
    19d0:	80 91 0b 03 	lds	r24, 0x030B
    19d4:	88 23       	and	r24, r24
    19d6:	a9 f3       	breq	.-22     	; 0x19c2 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x80>
      const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
    19d8:	30 91 78 00 	lds	r19, 0x0078
      const uint8_t h = ADCH; // Capture the high byte.
    19dc:	20 91 79 00 	lds	r18, 0x0079
      if((h == oldADCH) && (l == oldADCL)) { break; } // Stop now if result seems to have settled.
    19e0:	29 17       	cp	r18, r25
    19e2:	11 f4       	brne	.+4      	; 0x19e8 <_analogueNoiseReducedReadM(unsigned char, signed char)+0xa6>
    19e4:	34 17       	cp	r19, r20
    19e6:	71 f0       	breq	.+28     	; 0x1a04 <_analogueNoiseReducedReadM(unsigned char, signed char)+0xc2>
      oldADCL = l;
      oldADCH = h;
      _adcNoise = (_adcNoise >> 1) + (l ^ h) + (__TIME__[7] & 0xf); // Capture a little entropy.
    19e8:	90 91 0a 03 	lds	r25, 0x030A
    19ec:	82 2f       	mov	r24, r18
    19ee:	83 27       	eor	r24, r19
    19f0:	89 5f       	subi	r24, 0xF9	; 249
    19f2:	96 95       	lsr	r25
    19f4:	98 0f       	add	r25, r24
    19f6:	90 93 0a 03 	sts	0x030A, r25
    19fa:	92 2f       	mov	r25, r18
    19fc:	43 2f       	mov	r20, r19
  bitSet(ADCSRA, ADIE); // Turn on ADC interrupt.
  bitSet(ADCSRA, ADSC); // Start conversion(s).
  uint8_t oldADCL = 0xff;
  uint8_t oldADCH = 0xff; // Ensure that a second sample will get taken if multiple samples have been requested.
  // Usually take several readings to improve accuracy.  Discard all but the last...
  while(--samples >= 0)
    19fe:	11 50       	subi	r17, 0x01	; 1
    1a00:	17 ff       	sbrs	r17, 7
    1a02:	dc cf       	rjmp	.-72     	; 0x19bc <_analogueNoiseReducedReadM(unsigned char, signed char)+0x7a>
      if((h == oldADCH) && (l == oldADCL)) { break; } // Stop now if result seems to have settled.
      oldADCL = l;
      oldADCH = h;
      _adcNoise = (_adcNoise >> 1) + (l ^ h) + (__TIME__[7] & 0xf); // Capture a little entropy.
      }
  bitClear(ADCSRA, ADIE); // Turn off ADC interrupt.
    1a04:	80 91 7a 00 	lds	r24, 0x007A
    1a08:	87 7f       	andi	r24, 0xF7	; 247
    1a0a:	80 93 7a 00 	sts	0x007A, r24
  bitClear(ADCSRA, ADATE); // Turn off ADC auto-trigger.
    1a0e:	80 91 7a 00 	lds	r24, 0x007A
    1a12:	8f 7d       	andi	r24, 0xDF	; 223
    1a14:	80 93 7a 00 	sts	0x007A, r24
  //sleep_disable();
  const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
    1a18:	20 91 78 00 	lds	r18, 0x0078
  const uint8_t h = ADCH; // Capture the high byte.
    1a1c:	40 91 79 00 	lds	r20, 0x0079
  if(neededEnable) { powerDownADC(); }
    1a20:	00 23       	and	r16, r16
    1a22:	51 f0       	breq	.+20     	; 0x1a38 <_analogueNoiseReducedReadM(unsigned char, signed char)+0xf6>
  }
    
// Power ADC down.
void powerDownADC()
  {
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
    1a24:	80 91 7a 00 	lds	r24, 0x007A
    1a28:	8f 77       	andi	r24, 0x7F	; 127
    1a2a:	80 93 7a 00 	sts	0x007A, r24
  PRR |= _BV(PRADC); // Disable the ADC.
    1a2e:	80 91 64 00 	lds	r24, 0x0064
    1a32:	81 60       	ori	r24, 0x01	; 1
    1a34:	80 93 64 00 	sts	0x0064, r24
    1a38:	94 2f       	mov	r25, r20
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	28 2b       	or	r18, r24
    1a40:	39 2b       	or	r19, r25
  //sleep_disable();
  const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
  const uint8_t h = ADCH; // Capture the high byte.
  if(neededEnable) { powerDownADC(); }
  return((h << 8) | l);
  }
    1a42:	c9 01       	movw	r24, r18
    1a44:	1f 91       	pop	r17
    1a46:	0f 91       	pop	r16
    1a48:	08 95       	ret

00001a4a <analogueNoiseReducedRead(unsigned char, unsigned char)>:
//   * aiNumber is the analogue input number [0,7] for ATMega328P
//   * mode  is the analogue reference, eg DEFAULT (Vcc).
// May set sleep mode to SLEEP_MODE_ADC, and disable sleep on exit.
// Nominally equivalent to analogReference(mode); return(analogRead(pinNumber));
uint16_t analogueNoiseReducedRead(const uint8_t aiNumber, const uint8_t mode)
  { return(_analogueNoiseReducedReadM((mode << 6) | (aiNumber & 7))); }
    1a4a:	62 95       	swap	r22
    1a4c:	66 0f       	add	r22, r22
    1a4e:	66 0f       	add	r22, r22
    1a50:	60 7c       	andi	r22, 0xC0	; 192
    1a52:	87 70       	andi	r24, 0x07	; 7
    1a54:	86 2b       	or	r24, r22
    1a56:	63 e0       	ldi	r22, 0x03	; 3
    1a58:	0e 94 a1 0c 	call	0x1942	; 0x1942 <_analogueNoiseReducedReadM(unsigned char, signed char)>
    1a5c:	08 95       	ret

00001a5e <SupplyVoltageMilliVolts::read()>:


// Force a read/poll of the supply voltage and return the value sensed.
// Expensive/slow.
// NOT thread-safe nor usable within ISRs (Interrupt Service Routines).
uint16_t SupplyVoltageMilliVolts::read()
    1a5e:	cf 93       	push	r28
    1a60:	df 93       	push	r29
    1a62:	ec 01       	movw	r28, r24
  return(result);
  }


// Measure internal bandgap (1.1V nominal, 1.0--1.2V) as fraction of Vcc [0,1023].
static uint16_t read1V1wrtBattery() { return(_analogueNoiseReducedReadM(_BV(REFS0) | 14)); }
    1a64:	8e e4       	ldi	r24, 0x4E	; 78
    1a66:	63 e0       	ldi	r22, 0x03	; 3
    1a68:	0e 94 a1 0c 	call	0x1942	; 0x1942 <_analogueNoiseReducedReadM(unsigned char, signed char)>
    1a6c:	9c 01       	movw	r18, r24
  {
  // Measure internal bandgap (1.1V nominal, 1.0--1.2V) as fraction of Vcc.
  const uint16_t raw = read1V1wrtBattery();
  // If Vcc was 1.1V ADC would give 1023.
  // If Vcc was 2.2V ADC would give 511.
  const uint16_t result = ((1023U<<6) / raw) * (1100U>>6);
    1a6e:	80 ec       	ldi	r24, 0xC0	; 192
    1a70:	9f ef       	ldi	r25, 0xFF	; 255
    1a72:	b9 01       	movw	r22, r18
    1a74:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <__udivmodhi4>
    1a78:	ab 01       	movw	r20, r22
    1a7a:	e4 e0       	ldi	r30, 0x04	; 4
    1a7c:	44 0f       	add	r20, r20
    1a7e:	55 1f       	adc	r21, r21
    1a80:	ea 95       	dec	r30
    1a82:	e1 f7       	brne	.-8      	; 0x1a7c <SupplyVoltageMilliVolts::read()+0x1e>
    1a84:	46 0f       	add	r20, r22
    1a86:	57 1f       	adc	r21, r23
  rawInv = raw;
    1a88:	3b 83       	std	Y+3, r19	; 0x03
    1a8a:	2a 83       	std	Y+2, r18	; 0x02
  mV = result;
    1a8c:	5d 83       	std	Y+5, r21	; 0x05
    1a8e:	4c 83       	std	Y+4, r20	; 0x04
  isLow = (result < BATTERY_LOW_MV);
    1a90:	1e 82       	std	Y+6, r1	; 0x06
    1a92:	87 e0       	ldi	r24, 0x07	; 7
    1a94:	40 3d       	cpi	r20, 0xD0	; 208
    1a96:	58 07       	cpc	r21, r24
    1a98:	10 f4       	brcc	.+4      	; 0x1a9e <SupplyVoltageMilliVolts::read()+0x40>
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	8e 83       	std	Y+6, r24	; 0x06
  DEBUG_SERIAL_PRINT(raw);
  if(batteryLow) { DEBUG_SERIAL_PRINT_FLASHSTRING(" LOW"); }
  DEBUG_SERIAL_PRINTLN();
#endif
  return(result);
  }
    1a9e:	ca 01       	movw	r24, r20
    1aa0:	df 91       	pop	r29
    1aa2:	cf 91       	pop	r28
    1aa4:	08 95       	ret

00001aa6 <powerDownTWI()>:
  }

// Power down TWI (I2C).
void powerDownTWI()
  {
  TWCR &= ~_BV(TWEN); // Disable TWI.
    1aa6:	ec eb       	ldi	r30, 0xBC	; 188
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	8b 7f       	andi	r24, 0xFB	; 251
    1aae:	80 83       	st	Z, r24
  PRR |= _BV(PRTWI); // Disable TWI power.
    1ab0:	e4 e6       	ldi	r30, 0x64	; 100
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	80 68       	ori	r24, 0x80	; 128
    1ab8:	80 83       	st	Z, r24
  //digitalWrite(SCL, 0);

  // Convert to hi-Z inputs.
  //pinMode(SDA, INPUT);
  //pinMode(SCL, INPUT);
  }
    1aba:	08 95       	ret

00001abc <clockJitterWDT()>:
// Expensive in terms of CPU time and thus energy.
// TODO: may be able to reduce clock speed to lower energy cost while still detecting useful jitter.
uint_fast8_t clockJitterWDT()
  {
  // Watchdog should be (already) be disabled on entry.
  _watchdogFired = false;
    1abc:	10 92 09 03 	sts	0x0309, r1
  wdt_enable(WDTO_15MS); // Set watchdog for minimum time.
    1ac0:	88 e0       	ldi	r24, 0x08	; 8
    1ac2:	28 e1       	ldi	r18, 0x18	; 24
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	0f b6       	in	r0, 0x3f	; 63
    1ac8:	f8 94       	cli
    1aca:	a8 95       	wdr
    1acc:	20 93 60 00 	sts	0x0060, r18
    1ad0:	0f be       	out	0x3f, r0	; 63
    1ad2:	80 93 60 00 	sts	0x0060, r24
  WDTCSR |= (1 << WDIE);
    1ad6:	80 91 60 00 	lds	r24, 0x0060
    1ada:	80 64       	ori	r24, 0x40	; 64
    1adc:	80 93 60 00 	sts	0x0060, r24
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	01 c0       	rjmp	.+2      	; 0x1ae6 <clockJitterWDT()+0x2a>
  uint_fast8_t count = 0;
  while(!_watchdogFired) { ++count; } // Effectively count CPU cycles until WDT fires.
    1ae4:	9f 5f       	subi	r25, 0xFF	; 255
    1ae6:	80 91 09 03 	lds	r24, 0x0309
    1aea:	88 23       	and	r24, r24
    1aec:	d9 f3       	breq	.-10     	; 0x1ae4 <clockJitterWDT()+0x28>
  return(count);
  }
    1aee:	89 2f       	mov	r24, r25
    1af0:	08 95       	ret

00001af2 <clockJitterEntropyByte()>:
// Internally this uses a CRC as a relatively fast and hopefully effective hash over intermediate values.
// Note the that rejection of repeat values will be less effective with two interleaved gathering mechanisms
// as the interaction while not necessarily adding genuine entropy, will make counts differ between runs.
// DHD20130519: measured as taking ~63ms to run, ie ~8ms per bit gathered.
#ifdef WAKEUP_32768HZ_XTAL
uint_fast8_t clockJitterEntropyByte()
    1af2:	1f 93       	push	r17

  uint_fast8_t result = 0;
  uint_fast8_t countR = 0, lastCountR = 0;
  uint_fast8_t countW = 0, lastCountW = 0;

  const uint8_t t0 = TCNT2; // Wait for sub-cycle timer to roll.
    1af4:	90 91 b2 00 	lds	r25, 0x00B2
    1af8:	40 e0       	ldi	r20, 0x00	; 0
    1afa:	50 e0       	ldi	r21, 0x00	; 0
    1afc:	02 c0       	rjmp	.+4      	; 0x1b02 <clockJitterEntropyByte()+0x10>
  while(t0 == TCNT2) { ++hash; } // Possibly capture some entropy from recent program activity/timing.
    1afe:	4f 5f       	subi	r20, 0xFF	; 255
    1b00:	5f 4f       	sbci	r21, 0xFF	; 255
    1b02:	80 91 b2 00 	lds	r24, 0x00B2
    1b06:	98 17       	cp	r25, r24
    1b08:	d1 f3       	breq	.-12     	; 0x1afe <clockJitterEntropyByte()+0xc>
  uint8_t t1 = TCNT2;
    1b0a:	f0 91 b2 00 	lds	r31, 0x00B2

  _watchdogFired = 0;
    1b0e:	10 92 09 03 	sts	0x0309, r1
  wdt_enable(WDTO_15MS); // Start watchdog, with minimum timeout.
    1b12:	88 e0       	ldi	r24, 0x08	; 8
    1b14:	28 e1       	ldi	r18, 0x18	; 24
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	0f b6       	in	r0, 0x3f	; 63
    1b1a:	f8 94       	cli
    1b1c:	a8 95       	wdr
    1b1e:	20 93 60 00 	sts	0x0060, r18
    1b22:	0f be       	out	0x3f, r0	; 63
    1b24:	80 93 60 00 	sts	0x0060, r24
  WDTCSR |= (1 << WDIE);
    1b28:	80 91 60 00 	lds	r24, 0x0060
    1b2c:	80 64       	ori	r24, 0x40	; 64
    1b2e:	80 93 60 00 	sts	0x0060, r24
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	60 e0       	ldi	r22, 0x00	; 0
    1b36:	e0 e0       	ldi	r30, 0x00	; 0
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	70 e0       	ldi	r23, 0x00	; 0
    1b3c:	38 e0       	ldi	r19, 0x08	; 8
        if(--bitsLeft <= 0) { break; } // Got enough bits; stop now.
        lastCountW = countW;
        }
      countW = 0;
      _watchdogFired = 0;
      wdt_enable(WDTO_15MS); // Restart watchdog, with minimum timeout.
    1b3e:	a8 e1       	ldi	r26, 0x18	; 24
    1b40:	b0 e0       	ldi	r27, 0x00	; 0
    1b42:	18 e0       	ldi	r17, 0x08	; 8
  WDTCSR |= (1 << WDIE);
  int_fast8_t bitsLeft = 8; // Decrement when a bit is harvested...
  for( ; ; )
    {
    // Extract watchdog jitter vs CPU.
    if(!_watchdogFired) { ++countW; }
    1b44:	80 91 09 03 	lds	r24, 0x0309
    1b48:	88 23       	and	r24, r24
    1b4a:	11 f4       	brne	.+4      	; 0x1b50 <clockJitterEntropyByte()+0x5e>
    1b4c:	2f 5f       	subi	r18, 0xFF	; 255
    1b4e:	2a c0       	rjmp	.+84     	; 0x1ba4 <clockJitterEntropyByte()+0xb2>
    else // Watchdog fired.
      {
      if(countW != lastCountW) // Got a different value from last; assume one bit of entropy.
    1b50:	27 17       	cp	r18, r23
    1b52:	c1 f0       	breq	.+48     	; 0x1b84 <clockJitterEntropyByte()+0x92>
        "eor    %A0,__tmp_reg__"

        : "=d" (__ret)
        : "r" (__data), "0" (__crc)
        : "r0"
    );
    1b54:	42 27       	eor	r20, r18
    1b56:	04 2e       	mov	r0, r20
    1b58:	42 95       	swap	r20
    1b5a:	40 7f       	andi	r20, 0xF0	; 240
    1b5c:	40 25       	eor	r20, r0
    1b5e:	05 2e       	mov	r0, r21
    1b60:	54 2f       	mov	r21, r20
    1b62:	42 95       	swap	r20
    1b64:	4f 70       	andi	r20, 0x0F	; 15
    1b66:	04 26       	eor	r0, r20
    1b68:	46 95       	lsr	r20
    1b6a:	54 27       	eor	r21, r20
    1b6c:	45 27       	eor	r20, r21
    1b6e:	44 0f       	add	r20, r20
    1b70:	44 0f       	add	r20, r20
    1b72:	44 0f       	add	r20, r20
    1b74:	40 25       	eor	r20, r0
        {
        hash = _crc_ccitt_update(hash, countW);
        result = (result << 1) ^ ((uint_fast8_t)hash); // Nominally capturing (at least) lsb of hash.
    1b76:	99 0f       	add	r25, r25
    1b78:	94 27       	eor	r25, r20
        if(--bitsLeft <= 0) { break; } // Got enough bits; stop now.
    1b7a:	31 50       	subi	r19, 0x01	; 1
    1b7c:	13 16       	cp	r1, r19
    1b7e:	0c f0       	brlt	.+2      	; 0x1b82 <clockJitterEntropyByte()+0x90>
    1b80:	34 c0       	rjmp	.+104    	; 0x1bea <clockJitterEntropyByte()+0xf8>
    1b82:	72 2f       	mov	r23, r18
        lastCountW = countW;
        }
      countW = 0;
      _watchdogFired = 0;
    1b84:	10 92 09 03 	sts	0x0309, r1
      wdt_enable(WDTO_15MS); // Restart watchdog, with minimum timeout.
    1b88:	0f b6       	in	r0, 0x3f	; 63
    1b8a:	f8 94       	cli
    1b8c:	a8 95       	wdr
    1b8e:	a0 93 60 00 	sts	0x0060, r26
    1b92:	0f be       	out	0x3f, r0	; 63
    1b94:	10 93 60 00 	sts	0x0060, r17
      WDTCSR |= (1 << WDIE);
    1b98:	80 91 60 00 	lds	r24, 0x0060
    1b9c:	80 64       	ori	r24, 0x40	; 64
    1b9e:	80 93 60 00 	sts	0x0060, r24
    1ba2:	20 e0       	ldi	r18, 0x00	; 0
      }

    // Extract RTC jitter vs CPU.
    if(t1 == TCNT2) { --countR; }
    1ba4:	80 91 b2 00 	lds	r24, 0x00B2
    1ba8:	f8 17       	cp	r31, r24
    1baa:	11 f4       	brne	.+4      	; 0x1bb0 <clockJitterEntropyByte()+0xbe>
    1bac:	61 50       	subi	r22, 0x01	; 1
    1bae:	ca cf       	rjmp	.-108    	; 0x1b44 <clockJitterEntropyByte()+0x52>
    else // Sub-cycle timer rolled.
      {
      if(countR != lastCountR) // Got a different value from last; assume one bit of entropy.
    1bb0:	6e 17       	cp	r22, r30
    1bb2:	b9 f0       	breq	.+46     	; 0x1be2 <clockJitterEntropyByte()+0xf0>
    1bb4:	46 27       	eor	r20, r22
    1bb6:	04 2e       	mov	r0, r20
    1bb8:	42 95       	swap	r20
    1bba:	40 7f       	andi	r20, 0xF0	; 240
    1bbc:	40 25       	eor	r20, r0
    1bbe:	05 2e       	mov	r0, r21
    1bc0:	54 2f       	mov	r21, r20
    1bc2:	42 95       	swap	r20
    1bc4:	4f 70       	andi	r20, 0x0F	; 15
    1bc6:	04 26       	eor	r0, r20
    1bc8:	46 95       	lsr	r20
    1bca:	54 27       	eor	r21, r20
    1bcc:	45 27       	eor	r20, r21
    1bce:	44 0f       	add	r20, r20
    1bd0:	44 0f       	add	r20, r20
    1bd2:	44 0f       	add	r20, r20
    1bd4:	40 25       	eor	r20, r0
        {
        hash = _crc_ccitt_update(hash, countR);
        result = (result << 1) ^ ((uint_fast8_t)hash); // Nominally capturing (at least) lsb of hash.
    1bd6:	99 0f       	add	r25, r25
    1bd8:	94 27       	eor	r25, r20
        if(--bitsLeft <= 0) { break; } // Got enough bits; stop now.
    1bda:	31 50       	subi	r19, 0x01	; 1
    1bdc:	13 16       	cp	r1, r19
    1bde:	2c f4       	brge	.+10     	; 0x1bea <clockJitterEntropyByte()+0xf8>
    1be0:	e6 2f       	mov	r30, r22
        lastCountR = countR;
        }
      countR = 0;
      t1 = TCNT2; // Set to look for next roll.
    1be2:	f0 91 b2 00 	lds	r31, 0x00B2
    1be6:	60 e0       	ldi	r22, 0x00	; 0
    1be8:	ad cf       	rjmp	.-166    	; 0x1b44 <clockJitterEntropyByte()+0x52>
      }
    }

  wdt_disable(); // Ensure no spurious WDT wakeup pending.
    1bea:	88 e1       	ldi	r24, 0x18	; 24
    1bec:	0f b6       	in	r0, 0x3f	; 63
    1bee:	f8 94       	cli
    1bf0:	80 93 60 00 	sts	0x0060, r24
    1bf4:	10 92 60 00 	sts	0x0060, r1
    1bf8:	0f be       	out	0x3f, r0	; 63
  return(result);
  }
    1bfa:	89 2f       	mov	r24, r25
    1bfc:	1f 91       	pop	r17
    1bfe:	08 95       	ret

00001c00 <Sensor<unsigned int>::isValid(unsigned int) const>:
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual T get() const = 0;

    // Returns true if this sensor reading value passed is potentially valid, eg in-range.
    // Default is to always return true, ie all values potentially valid.
    virtual bool isValid(T value) const { return(true); }
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	08 95       	ret

00001c04 <Sensor<unsigned int>::isUnavailable() const>:

    // Returns true if this sensor is definitely unavailable or behaving incorrectly.
    // The default case is to assume that if the code is wired in then the device will work.
    virtual bool isUnavailable() const { return(false); }
    1c04:	80 e0       	ldi	r24, 0x00	; 0
    1c06:	08 95       	ret

00001c08 <Sensor<unsigned int>::preferredPollInterval_s() const>:
 
    // Returns non-zero if this implementation requires a regular call to read() to operate correctly.
    // Preferred poll interval (in seconds) or 0 if no regular poll() call required.
    // Default returns 0 indicating regular call to read() not required,
    // only as required to fetch new values from the underlying sensor.
    virtual uint8_t preferredPollInterval_s() const { return(0); }
    1c08:	80 e0       	ldi	r24, 0x00	; 0
    1c0a:	08 95       	ret

00001c0c <Sensor<unsigned int>::handleInterruptSimple()>:
    // Must be fast and ISR (Interrupt Service Routine) safe.
    // Returns true if interrupt was successfully handled and cleared
    // else another interrupt handler in the chain may be called
    // to attempt to clear the interrupt.
    // By default does nothing (and returns false).
    virtual bool handleInterruptSimple() { return(false); }
    1c0c:	80 e0       	ldi	r24, 0x00	; 0
    1c0e:	08 95       	ret

00001c10 <Sensor<unsigned int>::begin()>:

    // Begin access to this sensor if applicable and not already begun.
    // Returns true if it needed to be begun.
    // Allows logic to end() if required at the end of a block, etc.
    // Defaults to do nothing (and return false).
    virtual bool begin() { return(false); }
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	08 95       	ret

00001c14 <Sensor<unsigned int>::isAvailable() const>:

    // Returns true if this sensor is currently available.
    // True by default unless implementation overrides.
    // For those sensors that need starting this will be false before begin().
    virtual bool isAvailable() const { return(true); }
    1c14:	81 e0       	ldi	r24, 0x01	; 1
    1c16:	08 95       	ret

00001c18 <Sensor<unsigned int>::end()>:

    // End access to this sensor if applicable and not already ended.
    // Returns true if it needed to be ended.
    // Defaults to do nothing (and return false).
    virtual bool end() { return(false); }
    1c18:	80 e0       	ldi	r24, 0x00	; 0
    1c1a:	08 95       	ret

00001c1c <global constructors keyed to _Z25minimisePowerWithoutSleepv>:
    // True if last-measured voltage was low.
    bool isLow;
 
  public:
    // Initialise to cautious values.
    SupplyVoltageMilliVolts() : mV(0), isLow(true) { }
    1c1c:	8b e7       	ldi	r24, 0x7B	; 123
    1c1e:	91 e0       	ldi	r25, 0x01	; 1
    1c20:	90 93 03 03 	sts	0x0303, r25
    1c24:	80 93 02 03 	sts	0x0302, r24
    1c28:	10 92 07 03 	sts	0x0307, r1
    1c2c:	10 92 06 03 	sts	0x0306, r1
    1c30:	81 e0       	ldi	r24, 0x01	; 1
    1c32:	80 93 08 03 	sts	0x0308, r24
    1c36:	08 95       	ret

00001c38 <captureEntropy1()>:
// Capture a little system entropy.
// This call should typically take << 1ms at 1MHz CPU.
// Does not change CPU clock speeds, mess with interrupts (other than possible brief blocking), or do I/O, or sleep.
// Should inject some noise into secure (TBD) and non-secure (RNG8) PRNGs.
void captureEntropy1()
  { seedRNG8(_getSubCycleTime() ^ _adcNoise, cycleCountCPU() ^ Supply_mV.get(), _watchdogFired); }
    1c38:	20 91 b2 00 	lds	r18, 0x00B2
    1c3c:	80 91 0a 03 	lds	r24, 0x030A
    1c40:	66 b5       	in	r22, 0x26	; 38
    1c42:	40 91 09 03 	lds	r20, 0x0309
    1c46:	90 91 06 03 	lds	r25, 0x0306
    1c4a:	69 27       	eor	r22, r25
    1c4c:	82 27       	eor	r24, r18
    1c4e:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <seedRNG8(unsigned char, unsigned char, unsigned char)>
    1c52:	08 95       	ret

00001c54 <powerDownSPI()>:
  }

// Power down SPI.
void powerDownSPI()
  {
  SPCR &= ~_BV(SPE); // Disable SPI.
    1c54:	8c b5       	in	r24, 0x2c	; 44
    1c56:	8f 7b       	andi	r24, 0xBF	; 191
    1c58:	8c bd       	out	0x2c, r24	; 44
  PRR |= _BV(PRSPI); // Power down...
    1c5a:	e4 e6       	ldi	r30, 0x64	; 100
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	84 60       	ori	r24, 0x04	; 4
    1c62:	80 83       	st	Z, r24

  pinMode(PIN_SPI_nSS, OUTPUT); // Ensure that nSS is an output to avoid forcing SPI to slave mode by accident.
    1c64:	8a e0       	ldi	r24, 0x0A	; 10
    1c66:	61 e0       	ldi	r22, 0x01	; 1
    1c68:	0e 94 bc 19 	call	0x3378	; 0x3378 <pinMode>
  fastDigitalWrite(PIN_SPI_nSS, HIGH); // Ensure that nSS is HIGH and thus any slave deselected when powering up SPI.
    1c6c:	2a 9a       	sbi	0x05, 2	; 5

  // Avoid pins from floating when SPI is disabled.
  // Try to preserve general I/O direction and restore previous output values for outputs.
  pinMode(PIN_SPI_SCK, OUTPUT);
    1c6e:	8d e0       	ldi	r24, 0x0D	; 13
    1c70:	61 e0       	ldi	r22, 0x01	; 1
    1c72:	0e 94 bc 19 	call	0x3378	; 0x3378 <pinMode>
  pinMode(PIN_SPI_MOSI, OUTPUT);
    1c76:	8b e0       	ldi	r24, 0x0B	; 11
    1c78:	61 e0       	ldi	r22, 0x01	; 1
    1c7a:	0e 94 bc 19 	call	0x3378	; 0x3378 <pinMode>
  pinMode(PIN_SPI_MISO, INPUT_PULLUP);
    1c7e:	8c e0       	ldi	r24, 0x0C	; 12
    1c80:	62 e0       	ldi	r22, 0x02	; 2
    1c82:	0e 94 bc 19 	call	0x3378	; 0x3378 <pinMode>

  // If sharing SPI SCK with LED indicator then return this pin to being an output (retaining previous value).
  //if(LED_HEATCALL == PIN_SPI_SCK) { pinMode(LED_HEATCALL, OUTPUT); }
  }
    1c86:	08 95       	ret

00001c88 <powerUpSPIIfDisabled()>:
// If SPI was disabled, power it up, enable it as master and with a sensible clock speed, etc, and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownSPI() may be advisable.
bool powerUpSPIIfDisabled()
  {
  if(!(PRR & _BV(PRSPI))) { return(false); }
    1c88:	80 91 64 00 	lds	r24, 0x0064
    1c8c:	82 fd       	sbrc	r24, 2
    1c8e:	02 c0       	rjmp	.+4      	; 0x1c94 <powerUpSPIIfDisabled()+0xc>
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	08 95       	ret

  pinMode(PIN_SPI_nSS, OUTPUT); // Ensure that nSS is an output to avoid forcing SPI to slave mode by accident.
    1c94:	8a e0       	ldi	r24, 0x0A	; 10
    1c96:	61 e0       	ldi	r22, 0x01	; 1
    1c98:	0e 94 bc 19 	call	0x3378	; 0x3378 <pinMode>
  fastDigitalWrite(PIN_SPI_nSS, HIGH); // Ensure that nSS is HIGH and thus any slave deselected when powering up SPI.
    1c9c:	2a 9a       	sbi	0x05, 2	; 5

  PRR &= ~_BV(PRSPI); // Enable SPI power.
    1c9e:	80 91 64 00 	lds	r24, 0x0064
    1ca2:	8b 7f       	andi	r24, 0xFB	; 251
    1ca4:	80 93 64 00 	sts	0x0064, r24
  // Configure raw SPI to match better how it was used in PICAXE V0.09 code.
  // CPOL = 0, CPHA = 0
  // Enable SPI, set master mode, set speed.
  const uint8_t ENABLE_MASTER =  _BV(SPE) | _BV(MSTR);
#if F_CPU <= 2000000 // Needs minimum prescale (x2) with slow (<=2MHz) CPU clock.
  SPCR = ENABLE_MASTER; // 2x clock prescale for <=1MHz SPI clock from <=2MHz CPU clock (500kHz SPI @ 1MHz CPU).
    1ca8:	80 e5       	ldi	r24, 0x50	; 80
    1caa:	8c bd       	out	0x2c, r24	; 44
  SPSR = _BV(SPI2X);
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	8d bd       	out	0x2d, r24	; 45
#else // Needs setting for fast (~16MHz) CPU clock.
  SPCR = _BV(SPR0) | ENABLE_MASTER; // 8x clock prescale for ~2MHz SPI clock from nominal ~16MHz CPU clock.
  SPSR = _BV(SPI2X);
#endif
  return(true);
  }
    1cb0:	08 95       	ret

00001cb2 <power_intermittent_peripherals_disable()>:
// Disable/remove power to intermittent peripherals.
// Switches the digital line to input with no pull-up (ie high-Z).
// There should be some sort of load to stop this floating.
void power_intermittent_peripherals_disable()
  {
  pinMode(IO_POWER_UP, INPUT);
    1cb2:	87 e0       	ldi	r24, 0x07	; 7
    1cb4:	60 e0       	ldi	r22, 0x00	; 0
    1cb6:	0e 94 bc 19 	call	0x3378	; 0x3378 <pinMode>
  }
    1cba:	08 95       	ret

00001cbc <minimisePowerWithoutSleep()>:
// to ensure that nothing power-hungry is accidentally left on.
// Any module that may need to run all the time should not be turned off here.
// May be called from panic(), so do not be too clever.
// Does NOT attempt to power down the radio, eg in case that needs to be left in RX mode.
// Does NOT attempt to power down the UART/serial.
void minimisePowerWithoutSleep()
    1cbc:	0f 93       	push	r16
    1cbe:	1f 93       	push	r17
  {
  // Disable the watchdog timer.
  wdt_disable();
    1cc0:	88 e1       	ldi	r24, 0x18	; 24
    1cc2:	0f b6       	in	r0, 0x3f	; 63
    1cc4:	f8 94       	cli
    1cc6:	80 93 60 00 	sts	0x0060, r24
    1cca:	10 92 60 00 	sts	0x0060, r1
    1cce:	0f be       	out	0x3f, r0	; 63
  
  // Ensure that external peripherals are powered down.
  power_intermittent_peripherals_disable();
    1cd0:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <power_intermittent_peripherals_disable()>

  // Turn off analogue stuff that eats power.
  ADCSRA = 0; // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
    1cd4:	10 92 7a 00 	sts	0x007A, r1
  ACSR = (1<<ACD); // Disable the analog comparator.
    1cd8:	80 e8       	ldi	r24, 0x80	; 128
    1cda:	80 bf       	out	0x30, r24	; 48
  DIDR0 = 0x3F; // Disable digital input buffers on all ADC0-ADC5 pins.
    1cdc:	8f e3       	ldi	r24, 0x3F	; 63
    1cde:	80 93 7e 00 	sts	0x007E, r24
    //#endif
    //#if defined(LDR_SENSOR_AIN)
    //    | (1 << LDR_SENSOR_AIN)
    //#endif
    //    ;
  DIDR1 = (1<<AIN1D)|(1<<AIN0D); // Disable digital input buffer on AIN1/0.
    1ce2:	83 e0       	ldi	r24, 0x03	; 3
    1ce4:	80 93 7f 00 	sts	0x007F, r24
  power_adc_disable();
    1ce8:	04 e6       	ldi	r16, 0x64	; 100
    1cea:	10 e0       	ldi	r17, 0x00	; 0
    1cec:	f8 01       	movw	r30, r16
    1cee:	80 81       	ld	r24, Z
    1cf0:	81 60       	ori	r24, 0x01	; 1
    1cf2:	80 83       	st	Z, r24

  // Ensure that SPI is powered down.
  powerDownSPI();
    1cf4:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <powerDownSPI()>
  }

// Power down TWI (I2C).
void powerDownTWI()
  {
  TWCR &= ~_BV(TWEN); // Disable TWI.
    1cf8:	ec eb       	ldi	r30, 0xBC	; 188
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	80 81       	ld	r24, Z
    1cfe:	8b 7f       	andi	r24, 0xFB	; 251
    1d00:	80 83       	st	Z, r24
  PRR |= _BV(PRTWI); // Disable TWI power.
    1d02:	f8 01       	movw	r30, r16
    1d04:	80 81       	ld	r24, Z
    1d06:	80 68       	ori	r24, 0x80	; 128
    1d08:	80 83       	st	Z, r24

#if defined(DONT_USE_TIMER0)
  power_timer0_disable();
#endif

  power_timer1_disable();
    1d0a:	80 81       	ld	r24, Z
    1d0c:	88 60       	ori	r24, 0x08	; 8
    1d0e:	80 83       	st	Z, r24

#ifndef WAKEUP_32768HZ_XTAL
  power_timer2_disable();
#endif
  }
    1d10:	1f 91       	pop	r17
    1d12:	0f 91       	pop	r16
    1d14:	08 95       	ret

00001d16 <power_intermittent_peripherals_enable(bool)>:
// items powered direct from IO_POWER_UP may need no such wait.
//
// Switches the digital line to high then output (to avoid ever *discharging* the output cap).
// Note that with 100nF cap, and 330R (or lower) resistor from the output pin,
// then 1ms delay should be plenty for the voltage on the cap to settle.
void power_intermittent_peripherals_enable(bool waitUntilStable)
    1d16:	1f 93       	push	r17
    1d18:	18 2f       	mov	r17, r24
  {
  fastDigitalWrite(IO_POWER_UP, HIGH);
    1d1a:	5f 9a       	sbi	0x0b, 7	; 11
  pinMode(IO_POWER_UP, OUTPUT);
    1d1c:	87 e0       	ldi	r24, 0x07	; 7
    1d1e:	61 e0       	ldi	r22, 0x01	; 1
    1d20:	0e 94 bc 19 	call	0x3378	; 0x3378 <pinMode>
  // If requested, wait long enough that I/O peripheral power should be stable.
  // Wait in a relatively low-power way...
  if(waitUntilStable) { sleepLowPowerMs(1); }
    1d24:	11 23       	and	r17, r17
    1d26:	21 f0       	breq	.+8      	; 0x1d30 <power_intermittent_peripherals_enable(bool)+0x1a>
// This may be achieved in part by dynamically slowing the CPU clock if possible.
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed((((MIN_CPU_HZ * (ms)) + 2000) / 4000) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    1d28:	86 e0       	ldi	r24, 0x06	; 6
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
  }
    1d30:	1f 91       	pop	r17
    1d32:	08 95       	ret

00001d34 <noisyADCRead(bool)>:
// If requested (and needed) powers up extra I/O during the reads.
//   powerUpIO if true then power up I/O (and power down after if so)
//
// If defined, update _adcNoise value to make noisyADCRead() output at least a poor PRNG if called in a loop, though might disguise underlying problems.
//#define CATCH_OTHER_NOISE_DURING_NAR // May hide underlying weakness if defined.
uint8_t noisyADCRead(const bool powerUpIO)
    1d34:	ef 92       	push	r14
    1d36:	ff 92       	push	r15
    1d38:	0f 93       	push	r16
    1d3a:	1f 93       	push	r17
    1d3c:	f8 2e       	mov	r15, r24
// If already powered up then do nothing other than return false.
// This does not power up the analogue comparator; this needs to be manually enabled if required.
// If this returns true then a matching powerDownADC() may be advisable.
bool powerUpADCIfDisabled()
  {
  if(!(PRR & _BV(PRADC))) { return(false); }
    1d3e:	80 91 64 00 	lds	r24, 0x0064
    1d42:	80 fd       	sbrc	r24, 0
    1d44:	02 c0       	rjmp	.+4      	; 0x1d4a <noisyADCRead(bool)+0x16>
    1d46:	00 e0       	ldi	r16, 0x00	; 0
    1d48:	0b c0       	rjmp	.+22     	; 0x1d60 <noisyADCRead(bool)+0x2c>
  PRR &= ~_BV(PRADC); // Enable the ADC.
    1d4a:	80 91 64 00 	lds	r24, 0x0064
    1d4e:	8e 7f       	andi	r24, 0xFE	; 254
    1d50:	80 93 64 00 	sts	0x0064, r24
  ADCSRA |= _BV(ADEN);
    1d54:	80 91 7a 00 	lds	r24, 0x007A
    1d58:	80 68       	ori	r24, 0x80	; 128
    1d5a:	80 93 7a 00 	sts	0x007A, r24
    1d5e:	01 e0       	ldi	r16, 0x01	; 1
//#define CATCH_OTHER_NOISE_DURING_NAR // May hide underlying weakness if defined.
uint8_t noisyADCRead(const bool powerUpIO)
  {
  const bool neededEnable = powerUpADCIfDisabled();
  const bool poweredUpIO = powerUpIO;
  if(powerUpIO) { power_intermittent_peripherals_enable(false); }
    1d60:	ff 20       	and	r15, r15
    1d62:	19 f0       	breq	.+6      	; 0x1d6a <noisyADCRead(bool)+0x36>
    1d64:	80 e0       	ldi	r24, 0x00	; 0
    1d66:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <power_intermittent_peripherals_enable(bool)>
  // Sample supply voltage.
  ADMUX = _BV(REFS0) | 14; // Bandgap vs Vcc.
    1d6a:	8e e4       	ldi	r24, 0x4E	; 78
    1d6c:	80 93 7c 00 	sts	0x007C, r24
  ADCSRB = 0; // Enable free-running mode.
    1d70:	10 92 7b 00 	sts	0x007B, r1
  bitWrite(ADCSRA, ADATE, 0); // Multiple samples NOT required.
    1d74:	80 91 7a 00 	lds	r24, 0x007A
    1d78:	8f 7d       	andi	r24, 0xDF	; 223
    1d7a:	80 93 7a 00 	sts	0x007A, r24
  ADC_complete = false;
    1d7e:	10 92 0b 03 	sts	0x030B, r1
  bitSet(ADCSRA, ADIE); // Turn on ADC interrupt.
    1d82:	80 91 7a 00 	lds	r24, 0x007A
    1d86:	88 60       	ori	r24, 0x08	; 8
    1d88:	80 93 7a 00 	sts	0x007A, r24
  bitSet(ADCSRA, ADSC); // Start conversion.
    1d8c:	80 91 7a 00 	lds	r24, 0x007A
    1d90:	80 64       	ori	r24, 0x40	; 64
    1d92:	80 93 7a 00 	sts	0x007A, r24
    1d96:	20 e0       	ldi	r18, 0x00	; 0
    1d98:	01 c0       	rjmp	.+2      	; 0x1d9c <noisyADCRead(bool)+0x68>
  uint8_t count = 0;
  while(!ADC_complete) { ++count; } // Busy wait while 'timing' the ADC conversion.
    1d9a:	2f 5f       	subi	r18, 0xFF	; 255
    1d9c:	80 91 0b 03 	lds	r24, 0x030B
    1da0:	88 23       	and	r24, r24
    1da2:	d9 f3       	breq	.-10     	; 0x1d9a <noisyADCRead(bool)+0x66>
  const uint8_t l1 = ADCL; // Capture the low byte and latch the high byte.
    1da4:	e0 90 78 00 	lds	r14, 0x0078
  const uint8_t h1 = ADCH; // Capture the high byte.
    1da8:	90 91 79 00 	lds	r25, 0x0079
  DEBUG_SERIAL_PRINT(' ');
  DEBUG_SERIAL_PRINTFMT(l1, HEX);
  DEBUG_SERIAL_PRINTLN();
#endif
  // Sample internal temperature.
  ADMUX = _BV(REFS1) | _BV(REFS0) | _BV(MUX3); // Temp vs bandgap.
    1dac:	88 ec       	ldi	r24, 0xC8	; 200
    1dae:	80 93 7c 00 	sts	0x007C, r24
  ADC_complete = false;
    1db2:	10 92 0b 03 	sts	0x030B, r1
  bitSet(ADCSRA, ADSC); // Start conversion.
    1db6:	80 91 7a 00 	lds	r24, 0x007A
    1dba:	80 64       	ori	r24, 0x40	; 64
    1dbc:	80 93 7a 00 	sts	0x007A, r24
    1dc0:	01 c0       	rjmp	.+2      	; 0x1dc4 <noisyADCRead(bool)+0x90>
  while(!ADC_complete) { ++count; } // Busy wait while 'timing' the ADC conversion.
    1dc2:	2f 5f       	subi	r18, 0xFF	; 255
    1dc4:	80 91 0b 03 	lds	r24, 0x030B
    1dc8:	88 23       	and	r24, r24
    1dca:	d9 f3       	breq	.-10     	; 0x1dc2 <noisyADCRead(bool)+0x8e>
  const uint8_t l2 = ADCL; // Capture the low byte and latch the high byte.
    1dcc:	80 91 78 00 	lds	r24, 0x0078
  const uint8_t h2 = ADCH; // Capture the high byte.
    1dd0:	10 91 79 00 	lds	r17, 0x0079
  DEBUG_SERIAL_PRINTFMT(h2, HEX);
  DEBUG_SERIAL_PRINT(' ');
  DEBUG_SERIAL_PRINTFMT(l2, HEX);
  DEBUG_SERIAL_PRINTLN();
#endif
  uint8_t result = (h1 << 5) ^ (l2) ^ (h2 << 3) ^ count;
    1dd4:	92 95       	swap	r25
    1dd6:	99 0f       	add	r25, r25
    1dd8:	90 7e       	andi	r25, 0xE0	; 224
    1dda:	11 0f       	add	r17, r17
    1ddc:	11 0f       	add	r17, r17
    1dde:	11 0f       	add	r17, r17
    1de0:	19 27       	eor	r17, r25
    1de2:	18 27       	eor	r17, r24
    1de4:	12 27       	eor	r17, r18
    1de6:	30 e0       	ldi	r19, 0x00	; 0
#endif
  // Sample all possible ADC inputs relative to Vcc, whatever the inputs may be connected to.
  // Assumed never to do any harm, eg physical damage, nor to disturb I/O setup.
  for(uint8_t i = 0; i < 8; ++i)
    {
    ADMUX = (i & 7) | (DEFAULT << 6); // Switching MUX after sample has started may add further noise.
    1de8:	83 2f       	mov	r24, r19
    1dea:	87 70       	andi	r24, 0x07	; 7
    1dec:	80 64       	ori	r24, 0x40	; 64
    1dee:	80 93 7c 00 	sts	0x007C, r24
    ADC_complete = false;
    1df2:	10 92 0b 03 	sts	0x030B, r1
    bitSet(ADCSRA, ADSC); // Start conversion.
    1df6:	80 91 7a 00 	lds	r24, 0x007A
    1dfa:	80 64       	ori	r24, 0x40	; 64
    1dfc:	80 93 7a 00 	sts	0x007A, r24
    1e00:	01 c0       	rjmp	.+2      	; 0x1e04 <noisyADCRead(bool)+0xd0>
    while(!ADC_complete) { ++count; }
    1e02:	2f 5f       	subi	r18, 0xFF	; 255
    1e04:	80 91 0b 03 	lds	r24, 0x030B
    1e08:	88 23       	and	r24, r24
    1e0a:	d9 f3       	breq	.-10     	; 0x1e02 <noisyADCRead(bool)+0xce>
    const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
    1e0c:	90 91 78 00 	lds	r25, 0x0078
    const uint8_t h = ADCH; // Capture the high byte.
    1e10:	80 91 79 00 	lds	r24, 0x0079
    DEBUG_SERIAL_PRINTFMT(l, HEX);
    DEBUG_SERIAL_PRINT(' ');
    DEBUG_SERIAL_PRINT(count);
    DEBUG_SERIAL_PRINTLN();
#endif
    result = _crc_ibutton_update(result ^ h, l ^ count); // A thorough hash.
    1e14:	81 27       	eor	r24, r17
		"	brtc	2f" "\n\t"
		"	eor	%0, %2" "\n\t"
		"2:	dec	%1" "\n\t"
		"	brne	1b" "\n\t"
		: "=r" (__crc), "=d" (__i), "=d" (__pattern)
		: "0" (__crc), "r" (__data));
    1e16:	92 27       	eor	r25, r18
    1e18:	18 2f       	mov	r17, r24
    1e1a:	19 27       	eor	r17, r25
    1e1c:	88 e0       	ldi	r24, 0x08	; 8
    1e1e:	9c e8       	ldi	r25, 0x8C	; 140
    1e20:	10 fb       	bst	r17, 0
    1e22:	16 95       	lsr	r17
    1e24:	0e f4       	brtc	.+2      	; 0x1e28 <noisyADCRead(bool)+0xf4>
    1e26:	19 27       	eor	r17, r25
    1e28:	8a 95       	dec	r24
    1e2a:	d1 f7       	brne	.-12     	; 0x1e20 <noisyADCRead(bool)+0xec>
#if defined(CATCH_OTHER_NOISE_DURING_NAR)
  result = _crc_ibutton_update(_adcNoise++, result);
#endif
  // Sample all possible ADC inputs relative to Vcc, whatever the inputs may be connected to.
  // Assumed never to do any harm, eg physical damage, nor to disturb I/O setup.
  for(uint8_t i = 0; i < 8; ++i)
    1e2c:	3f 5f       	subi	r19, 0xFF	; 255
    1e2e:	38 30       	cpi	r19, 0x08	; 8
    1e30:	d9 f6       	brne	.-74     	; 0x1de8 <noisyADCRead(bool)+0xb4>
    DEBUG_SERIAL_PRINT_FLASHSTRING("NAR R: ");
    DEBUG_SERIAL_PRINTFMT(result, HEX);
    DEBUG_SERIAL_PRINTLN();
#endif
    }
  bitClear(ADCSRA, ADIE); // Turn off ADC interrupt.
    1e32:	80 91 7a 00 	lds	r24, 0x007A
    1e36:	87 7f       	andi	r24, 0xF7	; 247
    1e38:	80 93 7a 00 	sts	0x007A, r24
  bitClear(ADCSRA, ADATE); // Turn off ADC auto-trigger.
    1e3c:	80 91 7a 00 	lds	r24, 0x007A
    1e40:	8f 7d       	andi	r24, 0xDF	; 223
    1e42:	80 93 7a 00 	sts	0x007A, r24
  if(poweredUpIO) { power_intermittent_peripherals_disable(); }
    1e46:	ff 20       	and	r15, r15
    1e48:	11 f0       	breq	.+4      	; 0x1e4e <noisyADCRead(bool)+0x11a>
    1e4a:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <power_intermittent_peripherals_disable()>
  if(neededEnable) { powerDownADC(); }
    1e4e:	00 23       	and	r16, r16
    1e50:	51 f0       	breq	.+20     	; 0x1e66 <noisyADCRead(bool)+0x132>
  }
    
// Power ADC down.
void powerDownADC()
  {
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
    1e52:	80 91 7a 00 	lds	r24, 0x007A
    1e56:	8f 77       	andi	r24, 0x7F	; 127
    1e58:	80 93 7a 00 	sts	0x007A, r24
  PRR |= _BV(PRADC); // Disable the ADC.
    1e5c:	80 91 64 00 	lds	r24, 0x0064
    1e60:	81 60       	ori	r24, 0x01	; 1
    1e62:	80 93 64 00 	sts	0x0064, r24
  DEBUG_SERIAL_PRINT_FLASHSTRING("NAR: ");
  DEBUG_SERIAL_PRINTFMT(result, HEX);
  DEBUG_SERIAL_PRINTLN();
#endif
  return(result); // Use all the bits collected.
  }
    1e66:	81 2f       	mov	r24, r17
    1e68:	8e 25       	eor	r24, r14
    1e6a:	1f 91       	pop	r17
    1e6c:	0f 91       	pop	r16
    1e6e:	ff 90       	pop	r15
    1e70:	ef 90       	pop	r14
    1e72:	08 95       	ret

00001e74 <powerUpTWIIfDisabled()>:
// If TWI (I2C) was disabled, power it up, do Wire.begin(), and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownRWI() may be advisable.
bool powerUpTWIIfDisabled()
  {
  if(!(PRR & _BV(PRTWI))) { return(false); }
    1e74:	80 91 64 00 	lds	r24, 0x0064
    1e78:	87 fd       	sbrc	r24, 7
    1e7a:	02 c0       	rjmp	.+4      	; 0x1e80 <powerUpTWIIfDisabled()+0xc>
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	08 95       	ret

  PRR &= ~_BV(PRTWI); // Enable TWI power.
    1e80:	80 91 64 00 	lds	r24, 0x0064
    1e84:	8f 77       	andi	r24, 0x7F	; 127
    1e86:	80 93 64 00 	sts	0x0064, r24
  TWCR |= _BV(TWEN); // Enable TWI.
    1e8a:	80 91 bc 00 	lds	r24, 0x00BC
    1e8e:	84 60       	ori	r24, 0x04	; 4
    1e90:	80 93 bc 00 	sts	0x00BC, r24
  Wire.begin(); // Set it going.
    1e94:	80 e7       	ldi	r24, 0x70	; 112
    1e96:	93 e0       	ldi	r25, 0x03	; 3
    1e98:	0e 94 49 17 	call	0x2e92	; 0x2e92 <TwoWire::begin()>
  // TODO: reset TWBR and prescaler for our low CPU frequency     (TWBR = ((F_CPU / TWI_FREQ) - 16) / 2 gives -3!)
#if F_CPU <= 1000000
  TWBR = 0; // Implies SCL freq of F_CPU / (16 + 2 * TBWR * PRESC) = 62.5kHz @ F_CPU==1MHz and PRESC==1 (from Wire/TWI code).
    1e9c:	10 92 b8 00 	sts	0x00B8, r1
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
#endif
  return(true);
  }
    1ea2:	08 95       	ret

00001ea4 <powerDownSerial()>:
  PRR |= _BV(PRADC); // Disable the ADC.
  }


// Check if serial is (already) powered up.
static bool _serialIsPoweredUp() { return(!(PRR & _BV(PRUSART0))); }
    1ea4:	80 91 64 00 	lds	r24, 0x0064


// Flush any pending serial output and power it down if up.
void powerDownSerial()
  {
  if(_serialIsPoweredUp())
    1ea8:	81 fd       	sbrc	r24, 1
    1eaa:	08 c0       	rjmp	.+16     	; 0x1ebc <powerDownSerial()+0x18>
    {
    // Flush serial output and shut down if apparently active.
    Serial.flush();
    1eac:	82 e7       	ldi	r24, 0x72	; 114
    1eae:	94 e0       	ldi	r25, 0x04	; 4
    1eb0:	0e 94 17 1c 	call	0x382e	; 0x382e <HardwareSerial::flush()>
    //flushSerialHW();
    Serial.end();
    1eb4:	82 e7       	ldi	r24, 0x72	; 114
    1eb6:	94 e0       	ldi	r25, 0x04	; 4
    1eb8:	0e 94 57 1b 	call	0x36ae	; 0x36ae <HardwareSerial::end()>
    }
  pinMode(PIN_SERIAL_RX, INPUT_PULLUP);
    1ebc:	80 e0       	ldi	r24, 0x00	; 0
    1ebe:	62 e0       	ldi	r22, 0x02	; 2
    1ec0:	0e 94 bc 19 	call	0x3378	; 0x3378 <pinMode>
  pinMode(PIN_SERIAL_TX, INPUT_PULLUP);
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	62 e0       	ldi	r22, 0x02	; 2
    1ec8:	0e 94 bc 19 	call	0x3378	; 0x3378 <pinMode>
  PRR |= _BV(PRUSART0); // Disable the UART module.
    1ecc:	80 91 64 00 	lds	r24, 0x0064
    1ed0:	82 60       	ori	r24, 0x02	; 2
    1ed2:	80 93 64 00 	sts	0x0064, r24
  }
    1ed6:	08 95       	ret

00001ed8 <burnHundredsOfCyclesProductivelyAndPoll()>:
// This call should typically take << 1ms at 1MHz CPU.
// Does not change CPU clock speeds, mess with interrupts (other than possible brief blocking), or sleep.
// May capture some entropy in secure and non-secure PRNGs.
void burnHundredsOfCyclesProductivelyAndPoll()
  {
  if(pollIO()) { seedRNG8(cycleCountCPU(), _watchdogFired, _getSubCycleTime()); }
    1ed8:	80 e0       	ldi	r24, 0x00	; 0
    1eda:	0e 94 55 05 	call	0xaaa	; 0xaaa <pollIO(bool)>
    1ede:	88 23       	and	r24, r24
    1ee0:	41 f0       	breq	.+16     	; 0x1ef2 <burnHundredsOfCyclesProductivelyAndPoll()+0x1a>
    1ee2:	86 b5       	in	r24, 0x26	; 38
    1ee4:	60 91 09 03 	lds	r22, 0x0309
    1ee8:	40 91 b2 00 	lds	r20, 0x00B2
    1eec:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <seedRNG8(unsigned char, unsigned char, unsigned char)>
    1ef0:	08 95       	ret
  else { captureEntropy1(); }
    1ef2:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <captureEntropy1()>
    1ef6:	08 95       	ret

00001ef8 <flushSerialProductive()>:

#ifndef flushSerialProductive
// Does a Serial.flush() attempting to do some useful work (eg I/O polling) while waiting for output to drain.
// Assumes hundreds of CPU cycles available for each character queued for TX.
// Does not change CPU clock speed or disable or mess with USART0, though may poll it.
void flushSerialProductive()
    1ef8:	02 c0       	rjmp	.+4      	; 0x1efe <flushSerialProductive()+0x6>
#if 0 && defined(DEBUG)
  if(!_serialIsPoweredUp()) { panic(); } // Trying to operate serial without it powered up.
#endif
  // Can productively spin here churning PRNGs or the like before the flush(), checking for the UART TX buffer to empty...
  // An occasional premature exit to flush() due to Serial interrupt handler interaction is benign, and indeed more grist to the mill.
  while(serialTXInProgress()) { burnHundredsOfCyclesProductivelyAndPoll(); }
    1efa:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <burnHundredsOfCyclesProductivelyAndPoll()>
    1efe:	80 91 c0 00 	lds	r24, 0x00C0
    1f02:	85 ff       	sbrs	r24, 5
    1f04:	fa cf       	rjmp	.-12     	; 0x1efa <flushSerialProductive()+0x2>
  Serial.flush(); // Wait for all output to have been sent.
    1f06:	82 e7       	ldi	r24, 0x72	; 114
    1f08:	94 e0       	ldi	r25, 0x04	; 4
    1f0a:	0e 94 17 1c 	call	0x382e	; 0x382e <HardwareSerial::flush()>
  }
    1f0e:	08 95       	ret

00001f10 <flushSerialSCTSensitive()>:
// Does not change CPU clock speed or disable or mess with USART0, though may poll it.
// Sleeps in IDLE mode for ~15ms at a time (backtopped by watchdog) waking on any interrupt
// so that the caller must be sure RX overrun (etc) will not be an issue.
// Switches to flushSerialProductive() behaviour
// if in danger of overrunning a minor cycle while idling.
void flushSerialSCTSensitive()
    1f10:	1f 93       	push	r17
#ifdef ENABLE_AVR_IDLE_MODE
// Idle productively polling I/O, etc, across the system while spending time in low-power mode if possible.
// Typically sleeps for nominally up to 30ms; tries to allow ealier wakeup if interrupt is received, etc.
// (Will often be prematurely woken by timer0 with ~16ms interval.)
// True iff watchdog timer expired; false if something else woke the CPU.
static bool inline idle15AndPoll() { const bool wd = idleCPU(WDTO_15MS); pollIO(!wd); return(wd); }
    1f12:	11 e0       	ldi	r17, 0x01	; 1
  {
#if 0 && defined(DEBUG)
  if(!_serialIsPoweredUp()) { panic(); } // Trying to operate serial without it powered up.
#endif
#ifdef ENABLE_AVR_IDLE_MODE
  while(serialTXInProgress() && (getSubCycleTime() < GSCT_MAX - 2 - (20/SUBCYCLE_TICK_MS_RD)))
    1f14:	80 91 c0 00 	lds	r24, 0x00C0
    1f18:	85 fd       	sbrc	r24, 5
    1f1a:	0b c0       	rjmp	.+22     	; 0x1f32 <flushSerialSCTSensitive()+0x22>
    1f1c:	80 91 b2 00 	lds	r24, 0x00B2
    1f20:	8b 3f       	cpi	r24, 0xFB	; 251
    1f22:	38 f4       	brcc	.+14     	; 0x1f32 <flushSerialSCTSensitive()+0x22>
    1f24:	80 e0       	ldi	r24, 0x00	; 0
    1f26:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <idleCPU(signed char)>
    1f2a:	81 27       	eor	r24, r17
    1f2c:	0e 94 55 05 	call	0xaaa	; 0xaaa <pollIO(bool)>
    1f30:	f1 cf       	rjmp	.-30     	; 0x1f14 <flushSerialSCTSensitive()+0x4>
    { idle15AndPoll(); } // Save much power by idling CPU, though everything else runs.
#endif
  flushSerialProductive();
    1f32:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <flushSerialProductive()>
  }
    1f36:	1f 91       	pop	r17
    1f38:	08 95       	ret

00001f3a <powerUpSerialIfDisabled()>:
  PRR |= _BV(PRADC); // Disable the ADC.
  }


// Check if serial is (already) powered up.
static bool _serialIsPoweredUp() { return(!(PRR & _BV(PRUSART0))); }
    1f3a:	80 91 64 00 	lds	r24, 0x0064
// If serial was disabled, power it up, do Serial.begin(), and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownSerial() may be advisable.
bool powerUpSerialIfDisabled()
  {
  if(_serialIsPoweredUp()) { return(false); }
    1f3e:	81 fd       	sbrc	r24, 1
    1f40:	02 c0       	rjmp	.+4      	; 0x1f46 <powerUpSerialIfDisabled()+0xc>
    1f42:	80 e0       	ldi	r24, 0x00	; 0
    1f44:	08 95       	ret
  PRR &= ~_BV(PRUSART0); // Enable the UART.
    1f46:	80 91 64 00 	lds	r24, 0x0064
    1f4a:	8d 7f       	andi	r24, 0xFD	; 253
    1f4c:	80 93 64 00 	sts	0x0064, r24
  Serial.begin(BAUD); // Set it going.
    1f50:	82 e7       	ldi	r24, 0x72	; 114
    1f52:	94 e0       	ldi	r25, 0x04	; 4
    1f54:	40 ec       	ldi	r20, 0xC0	; 192
    1f56:	52 e1       	ldi	r21, 0x12	; 18
    1f58:	60 e0       	ldi	r22, 0x00	; 0
    1f5a:	70 e0       	ldi	r23, 0x00	; 0
    1f5c:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <HardwareSerial::begin(unsigned long)>
    1f60:	81 e0       	ldi	r24, 0x01	; 1
  return(true);
  }
    1f62:	08 95       	ret

00001f64 <powerSetup()>:
// Call from setup() to turn off unused modules, set up timers and interrupts, etc.
// I/O pin setting is not done here.
void powerSetup()
  {
#ifdef DEBUG
  assert(DEFAULT_CPU_PRESCALE == clock_prescale_get()); // Verify that CPU prescaling is as expected.
    1f64:	80 91 61 00 	lds	r24, 0x0061
    1f68:	8f 70       	andi	r24, 0x0F	; 15
    1f6a:	83 30       	cpi	r24, 0x03	; 3
    1f6c:	11 f0       	breq	.+4      	; 0x1f72 <powerSetup()+0xe>
    1f6e:	0e 94 60 01 	call	0x2c0	; 0x2c0 <abort>
#endif

  // Do normal gentle switch off, including analogue module/control in correct order.
  minimisePowerWithoutSleep();
    1f72:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <minimisePowerWithoutSleep()>

  // Brutally force off all modules, then re-enable explicitly below any still needed.
  power_all_disable(); 
    1f76:	80 91 64 00 	lds	r24, 0x0064
    1f7a:	8f 6e       	ori	r24, 0xEF	; 239
    1f7c:	80 93 64 00 	sts	0x0064, r24

#if !defined(DONT_USE_TIMER0)
  power_timer0_enable(); // Turning timer 0 off messes up some standard Arduino support such as delay() and millis().
    1f80:	80 91 64 00 	lds	r24, 0x0064
    1f84:	8f 7d       	andi	r24, 0xDF	; 223
    1f86:	80 93 64 00 	sts	0x0064, r24
#endif
  
#if defined(WAKEUP_32768HZ_XTAL)
  power_timer2_enable();
    1f8a:	80 91 64 00 	lds	r24, 0x0064
    1f8e:	8f 7b       	andi	r24, 0xBF	; 191
    1f90:	80 93 64 00 	sts	0x0064, r24
#ifdef WAKEUP_32768HZ_XTAL
static void timer2XtalIntSetup()
 {
  // Set up TIMER2 to wake CPU out of sleep regularly using external 32768Hz crystal.
  // See http://www.atmel.com/Images/doc2505.pdf
  TCCR2A = 0x00;
    1f94:	10 92 b0 00 	sts	0x00B0, r1

#if defined(HALF_SECOND_RTC_SUPPORT)
  TCCR2B = (1<<CS22); // Set CLK/64 for overflow interrupt every 0.5s.
#elif defined(TWO_S_TICK_RTC_SUPPORT)
  TCCR2B = (1<<CS22)|(1<<CS21); // Set CLK/128 for overflow interrupt every 2s.
    1f98:	86 e0       	ldi	r24, 0x06	; 6
    1f9a:	80 93 b1 00 	sts	0x00B1, r24
#else
  TCCR2B = (1<<CS22)|(1<<CS20); // Set CLK/128 for overflow interrupt every 1s.
#endif
  //TCCR2B = (1<<CS22)|(1<<CS21)|(1<<CS20); // Set CLK/1024 for overflow interrupt every 8s (slowest possible).

  ASSR = (1<<AS2); // Enable asynchronous operation.
    1f9e:	80 e2       	ldi	r24, 0x20	; 32
    1fa0:	80 93 b6 00 	sts	0x00B6, r24
  TIMSK2 = (1<<TOIE2); // Enable the timer 2 interrupt.
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	80 93 70 00 	sts	0x0070, r24
  
#if defined(WAKEUP_32768HZ_XTAL)
  power_timer2_enable();
  timer2XtalIntSetup();
#endif
  }
    1faa:	08 95       	ret

00001fac <seedRNG8(unsigned char, unsigned char, unsigned char)>:
//2 ADDs, one bit shift right , and one increment. Difficult or slow operations like multiply, etc 
//were avoided for maximum speed on ultra low power devices.
void seedRNG8(uint8_t s1, uint8_t s2, uint8_t s3) // Originally init_rng(s1,s2,s3) //Can also be used to seed the rng with more entropy during use.
  {
  //XOR new entropy into key state
  a ^=s1;
    1fac:	20 91 0e 03 	lds	r18, 0x030E
  b ^=s2;
    1fb0:	90 91 0f 03 	lds	r25, 0x030F
    1fb4:	69 27       	eor	r22, r25
  c ^=s3;
    1fb6:	90 91 0c 03 	lds	r25, 0x030C
    1fba:	49 27       	eor	r20, r25
  x++;
    1fbc:	90 91 0d 03 	lds	r25, 0x030D
    1fc0:	9f 5f       	subi	r25, 0xFF	; 255
    1fc2:	90 93 0d 03 	sts	0x030D, r25
  a = (a^c^x);
    1fc6:	28 27       	eor	r18, r24
    1fc8:	24 27       	eor	r18, r20
    1fca:	29 27       	eor	r18, r25
    1fcc:	20 93 0e 03 	sts	0x030E, r18
  b = (b+a);
    1fd0:	62 0f       	add	r22, r18
    1fd2:	60 93 0f 03 	sts	0x030F, r22
  c = ((c+(b>>1))^a);
    1fd6:	66 95       	lsr	r22
    1fd8:	64 0f       	add	r22, r20
    1fda:	62 27       	eor	r22, r18
    1fdc:	60 93 0c 03 	sts	0x030C, r22
  }
    1fe0:	08 95       	ret

00001fe2 <randRNG8()>:
//
uint8_t randRNG8() // Originally unsigned char randomize().
  {
  x++;               //x is incremented every round and is not affected by any other variable
    1fe2:	80 91 0d 03 	lds	r24, 0x030D
    1fe6:	8f 5f       	subi	r24, 0xFF	; 255
    1fe8:	80 93 0d 03 	sts	0x030D, r24
  a = (a^c^x);       //note the mix of addition and XOR
    1fec:	20 91 0c 03 	lds	r18, 0x030C
    1ff0:	90 91 0e 03 	lds	r25, 0x030E
    1ff4:	92 27       	eor	r25, r18
    1ff6:	98 27       	eor	r25, r24
    1ff8:	90 93 0e 03 	sts	0x030E, r25
  b = (b+a);         //And the use of very few instructions
    1ffc:	80 91 0f 03 	lds	r24, 0x030F
    2000:	89 0f       	add	r24, r25
    2002:	80 93 0f 03 	sts	0x030F, r24
  c = ((c+(b>>1))^a);  //the right shift is to ensure that high-order bits from b can affect  
    2006:	86 95       	lsr	r24
    2008:	82 0f       	add	r24, r18
    200a:	89 27       	eor	r24, r25
    200c:	80 93 0c 03 	sts	0x030C, r24
  return(c);         //low order bits of other variables
  }
    2010:	08 95       	ret

00002012 <global constructors keyed to _Z8seedRNG8hhh>:
uint8_t randRNG8(); // Originally called 'randomize()'.
// RNG8 working state.
static uint8_t a, b, c;
// DHD20130603: avoid the hidden counter always starting at zero c/o some per-build state.
// Derived from linker-driven pointer base plus hash of compilation timestamp, with little run-time cost.
static uint8_t x = (uint8_t)(intptr_t) ((&c) + (uint8_t)((__TIME__[7] * 17) ^ (__TIME__[6]) ^ (__TIME__[4] << 11)));
    2012:	80 ea       	ldi	r24, 0xA0	; 160
    2014:	93 e0       	ldi	r25, 0x03	; 3
    2016:	80 93 0d 03 	sts	0x030D, r24
  x++;               //x is incremented every round and is not affected by any other variable
  a = (a^c^x);       //note the mix of addition and XOR
  b = (b+a);         //And the use of very few instructions
  c = ((c+(b>>1))^a);  //the right shift is to ensure that high-order bits from b can affect  
  return(c);         //low order bits of other variables
  }
    201a:	08 95       	ret

0000201c <RFM22RXFIFO(unsigned char*, unsigned char)>:


// Put RFM22 into standby, attempt to read specified number of bytes from FIFO to buffer.
// Leaves RFM22 in low-power standby mode.
// Trailing bytes (more than were actually sent) undefined.
void RFM22RXFIFO(uint8_t *buf, const uint8_t bufSize)
    201c:	ff 92       	push	r15
    201e:	0f 93       	push	r16
    2020:	1f 93       	push	r17
    2022:	18 2f       	mov	r17, r24
    2024:	09 2f       	mov	r16, r25
    2026:	f6 2e       	mov	r15, r22
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    2028:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <powerUpSPIIfDisabled()>
    202c:	48 2f       	mov	r20, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    202e:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2030:	87 e8       	ldi	r24, 0x87	; 135
    2032:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2034:	0d b4       	in	r0, 0x2d	; 45
    2036:	07 fe       	sbrs	r0, 7
    2038:	fd cf       	rjmp	.-6      	; 0x2034 <RFM22RXFIFO(unsigned char*, unsigned char)+0x18>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    203a:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    203c:	0d b4       	in	r0, 0x2d	; 45
    203e:	07 fe       	sbrs	r0, 7
    2040:	fd cf       	rjmp	.-6      	; 0x203c <RFM22RXFIFO(unsigned char*, unsigned char)+0x20>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2042:	2a 9a       	sbi	0x05, 2	; 5
  {
  const bool neededEnable = powerUpSPIIfDisabled();

  _RFM22ModeStandby();

  _RFM22_SELECT();
    2044:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    2046:	8f e7       	ldi	r24, 0x7F	; 127
    2048:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    204a:	0d b4       	in	r0, 0x2d	; 45
    204c:	07 fe       	sbrs	r0, 7
    204e:	fd cf       	rjmp	.-6      	; 0x204a <RFM22RXFIFO(unsigned char*, unsigned char)+0x2e>
  return(SPDR);
    2050:	8e b5       	in	r24, 0x2e	; 46
    2052:	81 2f       	mov	r24, r17
    2054:	90 2f       	mov	r25, r16
    2056:	9c 01       	movw	r18, r24
    2058:	f9 01       	movw	r30, r18
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	07 c0       	rjmp	.+14     	; 0x206c <RFM22RXFIFO(unsigned char*, unsigned char)+0x50>

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    205e:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2060:	0d b4       	in	r0, 0x2d	; 45
    2062:	07 fe       	sbrs	r0, 7
    2064:	fd cf       	rjmp	.-6      	; 0x2060 <RFM22RXFIFO(unsigned char*, unsigned char)+0x44>
  return(SPDR);
    2066:	8e b5       	in	r24, 0x2e	; 46

  _RFM22_SELECT();
  _RFM22_io(RFM22REG_FIFO & 0x7F); // Start burst read from RX FIFO.
//  uint8_t val;
  for(uint8_t i = 0; i < bufSize; ++i)
    { buf[i] = _RFM22_io(0);  }
    2068:	81 93       	st	Z+, r24
  _RFM22ModeStandby();

  _RFM22_SELECT();
  _RFM22_io(RFM22REG_FIFO & 0x7F); // Start burst read from RX FIFO.
//  uint8_t val;
  for(uint8_t i = 0; i < bufSize; ++i)
    206a:	9f 5f       	subi	r25, 0xFF	; 255
    206c:	9f 15       	cp	r25, r15
    206e:	b8 f3       	brcs	.-18     	; 0x205e <RFM22RXFIFO(unsigned char*, unsigned char)+0x42>
    { buf[i] = _RFM22_io(0);  }
  _RFM22_DESELECT();
    2070:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2072:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2074:	88 e8       	ldi	r24, 0x88	; 136
    2076:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2078:	0d b4       	in	r0, 0x2d	; 45
    207a:	07 fe       	sbrs	r0, 7
    207c:	fd cf       	rjmp	.-6      	; 0x2078 <RFM22RXFIFO(unsigned char*, unsigned char)+0x5c>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    207e:	83 e0       	ldi	r24, 0x03	; 3
    2080:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2082:	0d b4       	in	r0, 0x2d	; 45
    2084:	07 fe       	sbrs	r0, 7
    2086:	fd cf       	rjmp	.-6      	; 0x2082 <RFM22RXFIFO(unsigned char*, unsigned char)+0x66>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2088:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    208a:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    208c:	88 e8       	ldi	r24, 0x88	; 136
    208e:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2090:	0d b4       	in	r0, 0x2d	; 45
    2092:	07 fe       	sbrs	r0, 7
    2094:	fd cf       	rjmp	.-6      	; 0x2090 <RFM22RXFIFO(unsigned char*, unsigned char)+0x74>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2096:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2098:	0d b4       	in	r0, 0x2d	; 45
    209a:	07 fe       	sbrs	r0, 7
    209c:	fd cf       	rjmp	.-6      	; 0x2098 <RFM22RXFIFO(unsigned char*, unsigned char)+0x7c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    209e:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    20a0:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    20a2:	85 e8       	ldi	r24, 0x85	; 133
    20a4:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    20a6:	0d b4       	in	r0, 0x2d	; 45
    20a8:	07 fe       	sbrs	r0, 7
    20aa:	fd cf       	rjmp	.-6      	; 0x20a6 <RFM22RXFIFO(unsigned char*, unsigned char)+0x8a>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    20ac:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    20ae:	0d b4       	in	r0, 0x2d	; 45
    20b0:	07 fe       	sbrs	r0, 7
    20b2:	fd cf       	rjmp	.-6      	; 0x20ae <RFM22RXFIFO(unsigned char*, unsigned char)+0x92>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    20b4:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    20b6:	0d b4       	in	r0, 0x2d	; 45
    20b8:	07 fe       	sbrs	r0, 7
    20ba:	fd cf       	rjmp	.-6      	; 0x20b6 <RFM22RXFIFO(unsigned char*, unsigned char)+0x9a>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    20bc:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    20be:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    20c0:	83 e8       	ldi	r24, 0x83	; 131
    20c2:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    20c4:	0d b4       	in	r0, 0x2d	; 45
    20c6:	07 fe       	sbrs	r0, 7
    20c8:	fd cf       	rjmp	.-6      	; 0x20c4 <RFM22RXFIFO(unsigned char*, unsigned char)+0xa8>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    20ca:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    20cc:	0d b4       	in	r0, 0x2d	; 45
    20ce:	07 fe       	sbrs	r0, 7
    20d0:	fd cf       	rjmp	.-6      	; 0x20cc <RFM22RXFIFO(unsigned char*, unsigned char)+0xb0>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    20d2:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    20d4:	0d b4       	in	r0, 0x2d	; 45
    20d6:	07 fe       	sbrs	r0, 7
    20d8:	fd cf       	rjmp	.-6      	; 0x20d4 <RFM22RXFIFO(unsigned char*, unsigned char)+0xb8>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    20da:	2a 9a       	sbi	0x05, 2	; 5
  _RFM22WriteReg16Bit0(RFM22REG_INT_ENABLE1);
  // Clear any interrupts already/still pending...
  _RFM22ClearInterrupts();  
  //_RFM22WriteReg8Bit(0xd, 0x1f); // Drive GPIO2 to ground as output... (Move to general register settings.)

  if(neededEnable) { powerDownSPI(); }
    20dc:	44 23       	and	r20, r20
    20de:	11 f0       	breq	.+4      	; 0x20e4 <RFM22RXFIFO(unsigned char*, unsigned char)+0xc8>
    20e0:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <powerDownSPI()>
  }
    20e4:	1f 91       	pop	r17
    20e6:	0f 91       	pop	r16
    20e8:	ff 90       	pop	r15
    20ea:	08 95       	ret

000020ec <RFM22SetUpRX(unsigned char, bool, bool)>:
  _RFM22_DESELECT();
  if(neededEnable) { powerDownSPI(); }
  }

// Put RFM22 into RX mode with given RX FIFO 'nearly-full' threshold and optional interrupts enabled.
void RFM22SetUpRX(const uint8_t nearlyFullThreshold, const bool syncInt, const bool dataInt)
    20ec:	ff 92       	push	r15
    20ee:	0f 93       	push	r16
    20f0:	1f 93       	push	r17
    20f2:	18 2f       	mov	r17, r24
    20f4:	f6 2e       	mov	r15, r22
    20f6:	04 2f       	mov	r16, r20
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    20f8:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <powerUpSPIIfDisabled()>
    20fc:	28 2f       	mov	r18, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    20fe:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2100:	88 e8       	ldi	r24, 0x88	; 136
    2102:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2104:	0d b4       	in	r0, 0x2d	; 45
    2106:	07 fe       	sbrs	r0, 7
    2108:	fd cf       	rjmp	.-6      	; 0x2104 <RFM22SetUpRX(unsigned char, bool, bool)+0x18>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    210a:	83 e0       	ldi	r24, 0x03	; 3
    210c:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    210e:	0d b4       	in	r0, 0x2d	; 45
    2110:	07 fe       	sbrs	r0, 7
    2112:	fd cf       	rjmp	.-6      	; 0x210e <RFM22SetUpRX(unsigned char, bool, bool)+0x22>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2114:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2116:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2118:	88 e8       	ldi	r24, 0x88	; 136
    211a:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    211c:	0d b4       	in	r0, 0x2d	; 45
    211e:	07 fe       	sbrs	r0, 7
    2120:	fd cf       	rjmp	.-6      	; 0x211c <RFM22SetUpRX(unsigned char, bool, bool)+0x30>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2122:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2124:	0d b4       	in	r0, 0x2d	; 45
    2126:	07 fe       	sbrs	r0, 7
    2128:	fd cf       	rjmp	.-6      	; 0x2124 <RFM22SetUpRX(unsigned char, bool, bool)+0x38>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    212a:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    212c:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    212e:	8e ef       	ldi	r24, 0xFE	; 254
    2130:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2132:	0d b4       	in	r0, 0x2d	; 45
    2134:	07 fe       	sbrs	r0, 7
    2136:	fd cf       	rjmp	.-6      	; 0x2132 <RFM22SetUpRX(unsigned char, bool, bool)+0x46>
  // Clear RX and TX FIFOs.
  _RFM22WriteReg8Bit(RFM22REG_OP_CTRL2, 3); // FFCLRTX | FFCLRTX
  _RFM22WriteReg8Bit(RFM22REG_OP_CTRL2, 0);

  // Set FIFO RX almost-full threshold as specified.
  _RFM22WriteReg8Bit(RFM22REG_RX_FIFO_CTRL, min(nearlyFullThreshold, 63));
    2138:	81 2f       	mov	r24, r17
    213a:	10 34       	cpi	r17, 0x40	; 64
    213c:	08 f0       	brcs	.+2      	; 0x2140 <RFM22SetUpRX(unsigned char, bool, bool)+0x54>
    213e:	8f e3       	ldi	r24, 0x3F	; 63

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2140:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2142:	0d b4       	in	r0, 0x2d	; 45
    2144:	07 fe       	sbrs	r0, 7
    2146:	fd cf       	rjmp	.-6      	; 0x2142 <RFM22SetUpRX(unsigned char, bool, bool)+0x56>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2148:	2a 9a       	sbi	0x05, 2	; 5

  // Set FIFO RX almost-full threshold as specified.
  _RFM22WriteReg8Bit(RFM22REG_RX_FIFO_CTRL, min(nearlyFullThreshold, 63));

  // Enable requested RX-related interrupts.
  _RFM22WriteReg8Bit(RFM22REG_INT_ENABLE1, (dataInt?0x10:0)); // enrxffafull: Enable RX FIFO Almost Full.
    214a:	00 23       	and	r16, r16
    214c:	11 f4       	brne	.+4      	; 0x2152 <RFM22SetUpRX(unsigned char, bool, bool)+0x66>
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	01 c0       	rjmp	.+2      	; 0x2154 <RFM22SetUpRX(unsigned char, bool, bool)+0x68>
    2152:	90 e1       	ldi	r25, 0x10	; 16

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2154:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2156:	85 e8       	ldi	r24, 0x85	; 133
    2158:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    215a:	0d b4       	in	r0, 0x2d	; 45
    215c:	07 fe       	sbrs	r0, 7
    215e:	fd cf       	rjmp	.-6      	; 0x215a <RFM22SetUpRX(unsigned char, bool, bool)+0x6e>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2160:	9e bd       	out	0x2e, r25	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2162:	0d b4       	in	r0, 0x2d	; 45
    2164:	07 fe       	sbrs	r0, 7
    2166:	fd cf       	rjmp	.-6      	; 0x2162 <RFM22SetUpRX(unsigned char, bool, bool)+0x76>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2168:	2a 9a       	sbi	0x05, 2	; 5
  // Set FIFO RX almost-full threshold as specified.
  _RFM22WriteReg8Bit(RFM22REG_RX_FIFO_CTRL, min(nearlyFullThreshold, 63));

  // Enable requested RX-related interrupts.
  _RFM22WriteReg8Bit(RFM22REG_INT_ENABLE1, (dataInt?0x10:0)); // enrxffafull: Enable RX FIFO Almost Full.
  _RFM22WriteReg8Bit(RFM22REG_INT_ENABLE2, (syncInt?0x80:0)); // enswdet: Enable Sync Word Detected.
    216a:	ff 20       	and	r15, r15
    216c:	11 f4       	brne	.+4      	; 0x2172 <RFM22SetUpRX(unsigned char, bool, bool)+0x86>
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	01 c0       	rjmp	.+2      	; 0x2174 <RFM22SetUpRX(unsigned char, bool, bool)+0x88>
    2172:	90 e8       	ldi	r25, 0x80	; 128

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2174:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2176:	86 e8       	ldi	r24, 0x86	; 134
    2178:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    217a:	0d b4       	in	r0, 0x2d	; 45
    217c:	07 fe       	sbrs	r0, 7
    217e:	fd cf       	rjmp	.-6      	; 0x217a <RFM22SetUpRX(unsigned char, bool, bool)+0x8e>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2180:	9e bd       	out	0x2e, r25	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2182:	0d b4       	in	r0, 0x2d	; 45
    2184:	07 fe       	sbrs	r0, 7
    2186:	fd cf       	rjmp	.-6      	; 0x2182 <RFM22SetUpRX(unsigned char, bool, bool)+0x96>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2188:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    218a:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    218c:	83 e8       	ldi	r24, 0x83	; 131
    218e:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2190:	0d b4       	in	r0, 0x2d	; 45
    2192:	07 fe       	sbrs	r0, 7
    2194:	fd cf       	rjmp	.-6      	; 0x2190 <RFM22SetUpRX(unsigned char, bool, bool)+0xa4>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2196:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2198:	0d b4       	in	r0, 0x2d	; 45
    219a:	07 fe       	sbrs	r0, 7
    219c:	fd cf       	rjmp	.-6      	; 0x2198 <RFM22SetUpRX(unsigned char, bool, bool)+0xac>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    219e:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    21a0:	0d b4       	in	r0, 0x2d	; 45
    21a2:	07 fe       	sbrs	r0, 7
    21a4:	fd cf       	rjmp	.-6      	; 0x21a0 <RFM22SetUpRX(unsigned char, bool, bool)+0xb4>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    21a6:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    21a8:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    21aa:	87 e8       	ldi	r24, 0x87	; 135
    21ac:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    21ae:	0d b4       	in	r0, 0x2d	; 45
    21b0:	07 fe       	sbrs	r0, 7
    21b2:	fd cf       	rjmp	.-6      	; 0x21ae <RFM22SetUpRX(unsigned char, bool, bool)+0xc2>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    21b4:	85 e0       	ldi	r24, 0x05	; 5
    21b6:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    21b8:	0d b4       	in	r0, 0x2d	; 45
    21ba:	07 fe       	sbrs	r0, 7
    21bc:	fd cf       	rjmp	.-6      	; 0x21b8 <RFM22SetUpRX(unsigned char, bool, bool)+0xcc>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    21be:	2a 9a       	sbi	0x05, 2	; 5
  _RFM22ClearInterrupts();

  // Start listening.
  _RFM22ModeRX();
  
  if(neededEnable) { powerDownSPI(); }
    21c0:	22 23       	and	r18, r18
    21c2:	11 f0       	breq	.+4      	; 0x21c8 <RFM22SetUpRX(unsigned char, bool, bool)+0xdc>
    21c4:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <powerDownSPI()>
  }
    21c8:	1f 91       	pop	r17
    21ca:	0f 91       	pop	r16
    21cc:	ff 90       	pop	r15
    21ce:	08 95       	ret

000021d0 <RFM22RegisterBlockSetup(unsigned char const (*) [2])>:


// Configure the radio from a list of register/value pairs in readonly PROGMEM/Flash, terminating with an 0xff register value.
// NOTE: argument is not a pointer into SRAM, it is into PROGMEM!
// Could optimise case where multiple values are for successive RFM22 registers by using burst write.
void RFM22RegisterBlockSetup(const uint8_t registerValues[][2])
    21d0:	cf 93       	push	r28
    21d2:	df 93       	push	r29
    21d4:	ec 01       	movw	r28, r24
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    21d6:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <powerUpSPIIfDisabled()>
  for( ; ; )
    {
    const uint8_t reg = pgm_read_byte(&(registerValues[0][0]));
    21da:	fe 01       	movw	r30, r28
    21dc:	94 91       	lpm	r25, Z+
    const uint8_t val = pgm_read_byte(&(registerValues[0][1]));
    21de:	21 96       	adiw	r28, 0x01	; 1
    21e0:	fe 01       	movw	r30, r28
    21e2:	24 91       	lpm	r18, Z+
    21e4:	21 97       	sbiw	r28, 0x01	; 1
    if(0xff == reg) { break; }
    21e6:	9f 3f       	cpi	r25, 0xFF	; 255
    21e8:	69 f0       	breq	.+26     	; 0x2204 <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x34>

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    21ea:	2a 98       	cbi	0x05, 2	; 5
  _RFM22_wr(addr | 0x80); // Force to write.
    21ec:	90 68       	ori	r25, 0x80	; 128

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    21ee:	9e bd       	out	0x2e, r25	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    21f0:	0d b4       	in	r0, 0x2d	; 45
    21f2:	07 fe       	sbrs	r0, 7
    21f4:	fd cf       	rjmp	.-6      	; 0x21f0 <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x20>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    21f6:	2e bd       	out	0x2e, r18	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    21f8:	0d b4       	in	r0, 0x2d	; 45
    21fa:	07 fe       	sbrs	r0, 7
    21fc:	fd cf       	rjmp	.-6      	; 0x21f8 <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x28>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    21fe:	2a 9a       	sbi	0x05, 2	; 5
    DEBUG_SERIAL_PRINT_FLASHSTRING(" = 0x");
    DEBUG_SERIAL_PRINTFMT(val, HEX);
    DEBUG_SERIAL_PRINTLN();
#endif
    _RFM22WriteReg8Bit(reg, val);
    ++registerValues;
    2200:	22 96       	adiw	r28, 0x02	; 2
    2202:	eb cf       	rjmp	.-42     	; 0x21da <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0xa>
    }
  if(neededEnable) { powerDownSPI(); }
    2204:	88 23       	and	r24, r24
    2206:	11 f0       	breq	.+4      	; 0x220c <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x3c>
    2208:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <powerDownSPI()>
  }
    220c:	df 91       	pop	r29
    220e:	cf 91       	pop	r28
    2210:	08 95       	ret

00002212 <RFM22PowerOnInit()>:
void RFM22PowerOnInit()
  {
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22 reset...");
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
    2212:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <powerUpSPIIfDisabled()>
    2216:	98 2f       	mov	r25, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2218:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    221a:	87 e8       	ldi	r24, 0x87	; 135
    221c:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    221e:	0d b4       	in	r0, 0x2d	; 45
    2220:	07 fe       	sbrs	r0, 7
    2222:	fd cf       	rjmp	.-6      	; 0x221e <RFM22PowerOnInit()+0xc>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2224:	80 e8       	ldi	r24, 0x80	; 128
    2226:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2228:	0d b4       	in	r0, 0x2d	; 45
    222a:	07 fe       	sbrs	r0, 7
    222c:	fd cf       	rjmp	.-6      	; 0x2228 <RFM22PowerOnInit()+0x16>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    222e:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2230:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2232:	87 e8       	ldi	r24, 0x87	; 135
    2234:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2236:	0d b4       	in	r0, 0x2d	; 45
    2238:	07 fe       	sbrs	r0, 7
    223a:	fd cf       	rjmp	.-6      	; 0x2236 <RFM22PowerOnInit()+0x24>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    223c:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    223e:	0d b4       	in	r0, 0x2d	; 45
    2240:	07 fe       	sbrs	r0, 7
    2242:	fd cf       	rjmp	.-6      	; 0x223e <RFM22PowerOnInit()+0x2c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2244:	2a 9a       	sbi	0x05, 2	; 5
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22 reset...");
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
  _RFM22WriteReg8Bit(RFM22REG_OP_CTRL1, RFM22REG_OP_CTRL1_SWRES);
  _RFM22ModeStandby();
  if(neededEnable) { powerDownSPI(); }
    2246:	99 23       	and	r25, r25
    2248:	11 f0       	breq	.+4      	; 0x224e <RFM22PowerOnInit()+0x3c>
    224a:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <powerDownSPI()>
    224e:	08 95       	ret

00002250 <RFM22RSSI()>:
  return(result);
  }

// Get current RSSI.
// Only valid when in RX mode.
uint8_t RFM22RSSI() 
    2250:	1f 93       	push	r17
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    2252:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <powerUpSPIIfDisabled()>
    2256:	98 2f       	mov	r25, r24

// Read from 8-bit register on RFM22.
// SPI must already be configured and running.
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
    2258:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    225a:	86 e2       	ldi	r24, 0x26	; 38
    225c:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    225e:	0d b4       	in	r0, 0x2d	; 45
    2260:	07 fe       	sbrs	r0, 7
    2262:	fd cf       	rjmp	.-6      	; 0x225e <RFM22RSSI()+0xe>
  return(SPDR);
    2264:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    2266:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2268:	0d b4       	in	r0, 0x2d	; 45
    226a:	07 fe       	sbrs	r0, 7
    226c:	fd cf       	rjmp	.-6      	; 0x2268 <RFM22RSSI()+0x18>
  return(SPDR);
    226e:	1e b5       	in	r17, 0x2e	; 46
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  const uint8_t result = _RFM22_io(0); // Dummy value...
  _RFM22_DESELECT();
    2270:	2a 9a       	sbi	0x05, 2	; 5
// Only valid when in RX mode.
uint8_t RFM22RSSI() 
  {
  const bool neededEnable = powerUpSPIIfDisabled();
  const uint8_t rssi = _RFM22ReadReg8Bit(RFM22REG_RSSI);
  if(neededEnable) { powerDownSPI(); }
    2272:	99 23       	and	r25, r25
    2274:	11 f0       	breq	.+4      	; 0x227a <RFM22RSSI()+0x2a>
    2276:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <powerDownSPI()>
  return(rssi);
  }
    227a:	81 2f       	mov	r24, r17
    227c:	1f 91       	pop	r17
    227e:	08 95       	ret

00002280 <RFM22ReadStatusBoth()>:
  }

// Read status (both registers) and clear interrupts.
// Status register 1 is returned in the top 8 bits, register 2 in the bottom 8 bits.
// Zero indicates no pending interrupts or other status flags set.
uint16_t RFM22ReadStatusBoth()
    2280:	0f 93       	push	r16
    2282:	1f 93       	push	r17
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    2284:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <powerUpSPIIfDisabled()>
    2288:	98 2f       	mov	r25, r24

// Read from 16-bit big-endian register pair.
// The result has the first (lower-numbered) register in the most significant byte.
static uint16_t _RFM22ReadReg16Bit(const uint8_t addr)
{
  _RFM22_SELECT();
    228a:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    228c:	83 e0       	ldi	r24, 0x03	; 3
    228e:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2290:	0d b4       	in	r0, 0x2d	; 45
    2292:	07 fe       	sbrs	r0, 7
    2294:	fd cf       	rjmp	.-6      	; 0x2290 <RFM22ReadStatusBoth()+0x10>
  return(SPDR);
    2296:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    2298:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    229a:	0d b4       	in	r0, 0x2d	; 45
    229c:	07 fe       	sbrs	r0, 7
    229e:	fd cf       	rjmp	.-6      	; 0x229a <RFM22ReadStatusBoth()+0x1a>
  return(SPDR);
    22a0:	0e b5       	in	r16, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    22a2:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    22a4:	0d b4       	in	r0, 0x2d	; 45
    22a6:	07 fe       	sbrs	r0, 7
    22a8:	fd cf       	rjmp	.-6      	; 0x22a4 <RFM22ReadStatusBoth()+0x24>
  return(SPDR);
    22aa:	1e b5       	in	r17, 0x2e	; 46
{
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  uint16_t result = ((uint16_t)_RFM22_io(0)) << 8;
  result |= ((uint16_t)_RFM22_io(0));
  _RFM22_DESELECT();
    22ac:	2a 9a       	sbi	0x05, 2	; 5
// Zero indicates no pending interrupts or other status flags set.
uint16_t RFM22ReadStatusBoth()
  {
  const bool neededEnable = powerUpSPIIfDisabled();
  const uint16_t result = _RFM22ReadReg16Bit(RFM22REG_INT_STATUS1);
  if(neededEnable) { powerDownSPI(); }
    22ae:	99 23       	and	r25, r25
    22b0:	11 f0       	breq	.+4      	; 0x22b6 <RFM22ReadStatusBoth()+0x36>
    22b2:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <powerDownSPI()>
    22b6:	90 2f       	mov	r25, r16
    22b8:	80 e0       	ldi	r24, 0x00	; 0
    22ba:	21 2f       	mov	r18, r17
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	28 2b       	or	r18, r24
    22c0:	39 2b       	or	r19, r25
  return(result);
  }
    22c2:	c9 01       	movw	r24, r18
    22c4:	1f 91       	pop	r17
    22c6:	0f 91       	pop	r16
    22c8:	08 95       	ret

000022ca <RFM22ModeStandbyAndClearState()>:
// Enter standby mode (consume least possible power but retain register contents).
// FIFO state and pending interrupts are cleared.
// Typical consumption in standby 450nA (cf 15nA when shut down, 8.5mA TUNE, 18--80mA RX/TX).
void RFM22ModeStandbyAndClearState()
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    22ca:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <powerUpSPIIfDisabled()>
    22ce:	98 2f       	mov	r25, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    22d0:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    22d2:	87 e8       	ldi	r24, 0x87	; 135
    22d4:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    22d6:	0d b4       	in	r0, 0x2d	; 45
    22d8:	07 fe       	sbrs	r0, 7
    22da:	fd cf       	rjmp	.-6      	; 0x22d6 <RFM22ModeStandbyAndClearState()+0xc>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    22dc:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    22de:	0d b4       	in	r0, 0x2d	; 45
    22e0:	07 fe       	sbrs	r0, 7
    22e2:	fd cf       	rjmp	.-6      	; 0x22de <RFM22ModeStandbyAndClearState()+0x14>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    22e4:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    22e6:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    22e8:	88 e8       	ldi	r24, 0x88	; 136
    22ea:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    22ec:	0d b4       	in	r0, 0x2d	; 45
    22ee:	07 fe       	sbrs	r0, 7
    22f0:	fd cf       	rjmp	.-6      	; 0x22ec <RFM22ModeStandbyAndClearState()+0x22>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    22f2:	83 e0       	ldi	r24, 0x03	; 3
    22f4:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    22f6:	0d b4       	in	r0, 0x2d	; 45
    22f8:	07 fe       	sbrs	r0, 7
    22fa:	fd cf       	rjmp	.-6      	; 0x22f6 <RFM22ModeStandbyAndClearState()+0x2c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    22fc:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    22fe:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2300:	88 e8       	ldi	r24, 0x88	; 136
    2302:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2304:	0d b4       	in	r0, 0x2d	; 45
    2306:	07 fe       	sbrs	r0, 7
    2308:	fd cf       	rjmp	.-6      	; 0x2304 <RFM22ModeStandbyAndClearState()+0x3a>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    230a:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    230c:	0d b4       	in	r0, 0x2d	; 45
    230e:	07 fe       	sbrs	r0, 7
    2310:	fd cf       	rjmp	.-6      	; 0x230c <RFM22ModeStandbyAndClearState()+0x42>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2312:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    2314:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2316:	85 e8       	ldi	r24, 0x85	; 133
    2318:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    231a:	0d b4       	in	r0, 0x2d	; 45
    231c:	07 fe       	sbrs	r0, 7
    231e:	fd cf       	rjmp	.-6      	; 0x231a <RFM22ModeStandbyAndClearState()+0x50>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2320:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2322:	0d b4       	in	r0, 0x2d	; 45
    2324:	07 fe       	sbrs	r0, 7
    2326:	fd cf       	rjmp	.-6      	; 0x2322 <RFM22ModeStandbyAndClearState()+0x58>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2328:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    232a:	0d b4       	in	r0, 0x2d	; 45
    232c:	07 fe       	sbrs	r0, 7
    232e:	fd cf       	rjmp	.-6      	; 0x232a <RFM22ModeStandbyAndClearState()+0x60>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    2330:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    2332:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2334:	83 e8       	ldi	r24, 0x83	; 131
    2336:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2338:	0d b4       	in	r0, 0x2d	; 45
    233a:	07 fe       	sbrs	r0, 7
    233c:	fd cf       	rjmp	.-6      	; 0x2338 <RFM22ModeStandbyAndClearState()+0x6e>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    233e:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2340:	0d b4       	in	r0, 0x2d	; 45
    2342:	07 fe       	sbrs	r0, 7
    2344:	fd cf       	rjmp	.-6      	; 0x2340 <RFM22ModeStandbyAndClearState()+0x76>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2346:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2348:	0d b4       	in	r0, 0x2d	; 45
    234a:	07 fe       	sbrs	r0, 7
    234c:	fd cf       	rjmp	.-6      	; 0x2348 <RFM22ModeStandbyAndClearState()+0x7e>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    234e:	2a 9a       	sbi	0x05, 2	; 5
//  _RFM22WriteReg8Bit(RFM22REG_INT_ENABLE2, 0); // TODO: combine in burst write with previous...
  _RFM22WriteReg16Bit0(RFM22REG_INT_ENABLE1);
  // Clear any interrupts already/still pending...
  _RFM22ClearInterrupts();  
  //_RFM22WriteReg8Bit(0xd, 0x1f); // Drive GPIO2 to ground as output... (Move to general register settings.)
  if(neededEnable) { powerDownSPI(); }
    2350:	99 23       	and	r25, r25
    2352:	11 f0       	breq	.+4      	; 0x2358 <RFM22ModeStandbyAndClearState()+0x8e>
    2354:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <powerDownSPI()>
    2358:	08 95       	ret

0000235a <RFM22CheckConnected()>:
  _RFM22ModeStandby();
  if(neededEnable) { powerDownSPI(); }
  }

// Returns true iff RFM22 (or RFM23) appears to be correctly connected.
bool RFM22CheckConnected()
    235a:	0f 93       	push	r16
    235c:	1f 93       	push	r17
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    235e:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <powerUpSPIIfDisabled()>
    2362:	08 2f       	mov	r16, r24

// Read from 8-bit register on RFM22.
// SPI must already be configured and running.
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
    2364:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    2366:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2368:	0d b4       	in	r0, 0x2d	; 45
    236a:	07 fe       	sbrs	r0, 7
    236c:	fd cf       	rjmp	.-6      	; 0x2368 <RFM22CheckConnected()+0xe>
  return(SPDR);
    236e:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    2370:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2372:	0d b4       	in	r0, 0x2d	; 45
    2374:	07 fe       	sbrs	r0, 7
    2376:	fd cf       	rjmp	.-6      	; 0x2372 <RFM22CheckConnected()+0x18>
  return(SPDR);
    2378:	8e b5       	in	r24, 0x2e	; 46
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  const uint8_t result = _RFM22_io(0); // Dummy value...
  _RFM22_DESELECT();
    237a:	2a 9a       	sbi	0x05, 2	; 5
bool RFM22CheckConnected()
  {
  const bool neededEnable = powerUpSPIIfDisabled();
  bool isOK = false;
  const uint8_t rType = _RFM22ReadReg8Bit(0); // May read as 0 if not connected at all.
  if(RFM22_SUPPORTED_DEVICE_TYPE == rType)
    237c:	88 30       	cpi	r24, 0x08	; 8
    237e:	89 f4       	brne	.+34     	; 0x23a2 <RFM22CheckConnected()+0x48>

// Read from 8-bit register on RFM22.
// SPI must already be configured and running.
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
    2380:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    2382:	81 e0       	ldi	r24, 0x01	; 1
    2384:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2386:	0d b4       	in	r0, 0x2d	; 45
    2388:	07 fe       	sbrs	r0, 7
    238a:	fd cf       	rjmp	.-6      	; 0x2386 <RFM22CheckConnected()+0x2c>
  return(SPDR);
    238c:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    238e:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2390:	0d b4       	in	r0, 0x2d	; 45
    2392:	07 fe       	sbrs	r0, 7
    2394:	fd cf       	rjmp	.-6      	; 0x2390 <RFM22CheckConnected()+0x36>
  return(SPDR);
    2396:	8e b5       	in	r24, 0x2e	; 46
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  const uint8_t result = _RFM22_io(0); // Dummy value...
  _RFM22_DESELECT();
    2398:	2a 9a       	sbi	0x05, 2	; 5
  bool isOK = false;
  const uint8_t rType = _RFM22ReadReg8Bit(0); // May read as 0 if not connected at all.
  if(RFM22_SUPPORTED_DEVICE_TYPE == rType)
    {
    const uint8_t rVersion = _RFM22ReadReg8Bit(1);
    if(RFM22_SUPPORTED_DEVICE_VERSION == rVersion)
    239a:	86 30       	cpi	r24, 0x06	; 6
    239c:	11 f4       	brne	.+4      	; 0x23a2 <RFM22CheckConnected()+0x48>
    239e:	11 e0       	ldi	r17, 0x01	; 1
    23a0:	05 c0       	rjmp	.+10     	; 0x23ac <RFM22CheckConnected()+0x52>
    DEBUG_SERIAL_PRINTFMT(rType, HEX);
    DEBUG_SERIAL_PRINTLN();
    }
#endif
#if 1 && defined(DEBUG)
  if(!isOK) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22 bad"); }
    23a2:	8e e1       	ldi	r24, 0x1E	; 30
    23a4:	91 e0       	ldi	r25, 0x01	; 1
    23a6:	0e 94 cf 13 	call	0x279e	; 0x279e <serialPrintlnAndFlush(__FlashStringHelper const*)>
    23aa:	10 e0       	ldi	r17, 0x00	; 0
#endif
  if(neededEnable) { powerDownSPI(); }
    23ac:	00 23       	and	r16, r16
    23ae:	11 f0       	breq	.+4      	; 0x23b4 <RFM22CheckConnected()+0x5a>
    23b0:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <powerDownSPI()>
  return(isOK);
  }
    23b4:	81 2f       	mov	r24, r17
    23b6:	1f 91       	pop	r17
    23b8:	0f 91       	pop	r16
    23ba:	08 95       	ret

000023bc <eeprom_read_byte>:


/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
    23bc:	9c 01       	movw	r18, r24
{
    do {} while (!eeprom_is_ready ());
    23be:	f9 99       	sbic	0x1f, 1	; 31
    23c0:	fe cf       	rjmp	.-4      	; 0x23be <eeprom_read_byte+0x2>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    23c2:	32 bd       	out	0x22, r19	; 34
    23c4:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    23c6:	f8 9a       	sbi	0x1f, 0	; 31
    23c8:	80 b5       	in	r24, 0x20	; 32
    return __result;
}
    23ca:	08 95       	ret

000023cc <getMinutesSinceMidnightLT()>:
// Thread-safe and ISR-safe.
#ifndef getMinutesSinceMidnightLT
uint_least16_t getMinutesSinceMidnightLT()
  {
  uint_least16_t result;
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    23cc:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    23ce:	f8 94       	cli
    { result = _minutesSinceMidnightLT; }
    23d0:	20 91 11 03 	lds	r18, 0x0311
    23d4:	30 91 12 03 	lds	r19, 0x0312
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    23d8:	8f bf       	out	0x3f, r24	; 63
  return(result);
  }
    23da:	c9 01       	movw	r24, r18
    23dc:	08 95       	ret

000023de <getHoursLT()>:
// Thread-safe and ISR-safe.
#ifndef getMinutesSinceMidnightLT
uint_least16_t getMinutesSinceMidnightLT()
  {
  uint_least16_t result;
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    23de:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    23e0:	f8 94       	cli
    { result = _minutesSinceMidnightLT; }
    23e2:	80 91 11 03 	lds	r24, 0x0311
    23e6:	90 91 12 03 	lds	r25, 0x0312
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    23ea:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    23ec:	6c e3       	ldi	r22, 0x3C	; 60
    23ee:	70 e0       	ldi	r23, 0x00	; 0
    23f0:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <__udivmodhi4>
    23f4:	86 2f       	mov	r24, r22
uint_least8_t getMinutesLT() { return(getMinutesSinceMidnightLT() % 60); }

// Get local time hours from RTC [0,23].
// Relatively slow.
// Thread-safe and ISR-safe.
uint_least8_t getHoursLT() { return(getMinutesSinceMidnightLT() / 60); }
    23f6:	08 95       	ret

000023f8 <restoreRTC()>:

// Restore software RTC information from non-volatile (EEPROM) store, if possible.
// Returns true if the persisted data seemed valid and was restored, in full or part.
// To void on average using 15/2 minutes at each reset/restart,
// this starts the internal time a little over half way into the restored 15-minute slot.
bool restoreRTC()
    23f8:	1f 93       	push	r17
  {
  uint8_t persistedValue;
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    23fa:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    23fc:	f8 94       	cli
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    23fe:	88 e0       	ldi	r24, 0x08	; 8
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	6e ed       	ldi	r22, 0xDE	; 222
    2404:	71 e1       	ldi	r23, 0x11	; 17
    2406:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <__eerd_word>
    {
    // Restore the persisted days, though ignore if apparently unset (all 1s).
    const uint16_t days = eeprom_read_word((uint16_t*)EE_START_RTC_DAY_PERSIST);
    if(days != (uint16_t)~0U) { _daysSince1999LT = days; }
    240a:	2f ef       	ldi	r18, 0xFF	; 255
    240c:	8f 3f       	cpi	r24, 0xFF	; 255
    240e:	92 07       	cpc	r25, r18
    2410:	21 f0       	breq	.+8      	; 0x241a <restoreRTC()+0x22>
    2412:	90 93 14 03 	sts	0x0314, r25
    2416:	80 93 13 03 	sts	0x0313, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    241a:	f9 99       	sbic	0x1f, 1	; 31
    241c:	fe cf       	rjmp	.-4      	; 0x241a <restoreRTC()+0x22>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    241e:	8a e0       	ldi	r24, 0x0A	; 10
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	92 bd       	out	0x22, r25	; 34
    2424:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2426:	f8 9a       	sbi	0x1f, 0	; 31
    2428:	60 b5       	in	r22, 0x20	; 32
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    242a:	1f bf       	out	0x3f, r17	; 63
    // Now recover persisted HH:MM value.
    persistedValue = eeprom_read_byte((uint8_t*)EE_START_RTC_HHMM_PERSIST);
    }

  // Abort if value clearly invalid, eg likely an unprogrammed (0xff) byte.
  if(persistedValue >= (24 << 3)) { return(false); }
    242c:	60 3c       	cpi	r22, 0xC0	; 192
    242e:	90 f5       	brcc	.+100    	; 0x2494 <restoreRTC()+0x9c>

  uint_least16_t minutesSinceMidnight = (persistedValue >> 3) * 60;
    2430:	86 2f       	mov	r24, r22
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	23 e0       	ldi	r18, 0x03	; 3
    2436:	95 95       	asr	r25
    2438:	87 95       	ror	r24
    243a:	2a 95       	dec	r18
    243c:	e1 f7       	brne	.-8      	; 0x2436 <restoreRTC()+0x3e>
    243e:	2c e3       	ldi	r18, 0x3C	; 60
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	82 9f       	mul	r24, r18
    2444:	a0 01       	movw	r20, r0
    2446:	83 9f       	mul	r24, r19
    2448:	50 0d       	add	r21, r0
    244a:	92 9f       	mul	r25, r18
    244c:	50 0d       	add	r21, r0
    244e:	11 24       	eor	r1, r1
  minutesSinceMidnight += 8; // Start just over half-way into one quantum to minimise average time lost on restart.
    2450:	9a 01       	movw	r18, r20
    2452:	28 5f       	subi	r18, 0xF8	; 248
    2454:	3f 4f       	sbci	r19, 0xFF	; 255
  const uint8_t lowBits = persistedValue & 7; // Extract quarter-hour bits.
  switch(lowBits)
    2456:	86 2f       	mov	r24, r22
    2458:	87 70       	andi	r24, 0x07	; 7
    245a:	81 30       	cpi	r24, 0x01	; 1
    245c:	59 f0       	breq	.+22     	; 0x2474 <restoreRTC()+0x7c>
    245e:	81 30       	cpi	r24, 0x01	; 1
    2460:	28 f0       	brcs	.+10     	; 0x246c <restoreRTC()+0x74>
    2462:	83 30       	cpi	r24, 0x03	; 3
    2464:	59 f0       	breq	.+22     	; 0x247c <restoreRTC()+0x84>
    2466:	87 30       	cpi	r24, 0x07	; 7
    2468:	a9 f4       	brne	.+42     	; 0x2494 <restoreRTC()+0x9c>
    246a:	0b c0       	rjmp	.+22     	; 0x2482 <restoreRTC()+0x8a>
    {
    case 0: minutesSinceMidnight += 45; break;
    246c:	9a 01       	movw	r18, r20
    246e:	2b 5c       	subi	r18, 0xCB	; 203
    2470:	3f 4f       	sbci	r19, 0xFF	; 255
    2472:	07 c0       	rjmp	.+14     	; 0x2482 <restoreRTC()+0x8a>
    case 1: minutesSinceMidnight += 30; break;
    2474:	9a 01       	movw	r18, r20
    2476:	2a 5d       	subi	r18, 0xDA	; 218
    2478:	3f 4f       	sbci	r19, 0xFF	; 255
    247a:	03 c0       	rjmp	.+6      	; 0x2482 <restoreRTC()+0x8a>
    case 3: minutesSinceMidnight += 15; break;
    247c:	9a 01       	movw	r18, r20
    247e:	29 5e       	subi	r18, 0xE9	; 233
    2480:	3f 4f       	sbci	r19, 0xFF	; 255
    default: return(false); // Invalid bit pattern: abort.
    }

  // Set the hours and minutes (atomically).
  // Deliberately leave the seconds unset to avoid units becoming too synchronised with one another, increasing TX collisions, etc.
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    2482:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2484:	f8 94       	cli
    { _minutesSinceMidnightLT = minutesSinceMidnight; }
    2486:	30 93 12 03 	sts	0x0312, r19
    248a:	20 93 11 03 	sts	0x0311, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    248e:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
    2490:	81 e0       	ldi	r24, 0x01	; 1
    2492:	01 c0       	rjmp	.+2      	; 0x2496 <restoreRTC()+0x9e>

  return(true);
    2494:	80 e0       	ldi	r24, 0x00	; 0
  }
    2496:	1f 91       	pop	r17
    2498:	08 95       	ret

0000249a <getSimpleScheduleOn(unsigned char)>:
// Will usually include a pre-warm time before the actual time set.
// Note that unprogrammed EEPROM value will result in invalid time, ie schedule not set.
//   * which  schedule number, counting from 0
uint_least16_t getSimpleScheduleOn(const uint8_t which)
  {
  if(which >= MAX_SIMPLE_SCHEDULES) { return(~0); } // Invalid schedule number.
    249a:	82 30       	cpi	r24, 0x02	; 2
    249c:	d0 f4       	brcc	.+52     	; 0x24d2 <getSimpleScheduleOn(unsigned char)+0x38>
  uint8_t startMM;
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    249e:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    24a0:	f8 94       	cli
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    24a2:	f9 99       	sbic	0x1f, 1	; 31
    24a4:	fe cf       	rjmp	.-4      	; 0x24a2 <getSimpleScheduleOn(unsigned char)+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	0c 96       	adiw	r24, 0x0c	; 12
    24aa:	92 bd       	out	0x22, r25	; 34
    24ac:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    24ae:	f8 9a       	sbi	0x1f, 0	; 31
    24b0:	90 b5       	in	r25, 0x20	; 32
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    24b2:	2f bf       	out	0x3f, r18	; 63
    { startMM = eeprom_read_byte((uint8_t*)(EE_START_SIMPLE_SCHEDULE0_ON + which)); }
  if(startMM > MAX_COMPRESSED_MINS_AFTER_MIDNIGHT) { return(~0); } // No schedule set.
    24b4:	90 3f       	cpi	r25, 0xF0	; 240
    24b6:	68 f4       	brcc	.+26     	; 0x24d2 <getSimpleScheduleOn(unsigned char)+0x38>
  // Compute start time from stored shedule value.
  uint_least16_t startTime = SIMPLE_SCHEDULE_GRANULARITY_MINS * startMM;
    24b8:	86 e0       	ldi	r24, 0x06	; 6
    24ba:	98 9f       	mul	r25, r24
    24bc:	c0 01       	movw	r24, r0
    24be:	11 24       	eor	r1, r1
  const uint8_t windBackM = PREWARM_MINS; // Wind back start time by about 25% of full interval.
  if(windBackM > startTime) { startTime += MINS_PER_DAY; } // Allow for wrap-around at midnight.
    24c0:	82 31       	cpi	r24, 0x12	; 18
    24c2:	91 05       	cpc	r25, r1
    24c4:	10 f4       	brcc	.+4      	; 0x24ca <getSimpleScheduleOn(unsigned char)+0x30>
    24c6:	80 56       	subi	r24, 0x60	; 96
    24c8:	9a 4f       	sbci	r25, 0xFA	; 250
  startTime -= windBackM;
    24ca:	9c 01       	movw	r18, r24
    24cc:	22 51       	subi	r18, 0x12	; 18
    24ce:	30 40       	sbci	r19, 0x00	; 0
    24d0:	02 c0       	rjmp	.+4      	; 0x24d6 <getSimpleScheduleOn(unsigned char)+0x3c>
  return(startTime);
    24d2:	2f ef       	ldi	r18, 0xFF	; 255
    24d4:	3f ef       	ldi	r19, 0xFF	; 255
  }
    24d6:	c9 01       	movw	r24, r18
    24d8:	08 95       	ret

000024da <getSimpleScheduleOff(unsigned char)>:

// Get the simple/primary schedule off time, as minutes after midnight [0,1439]; invalid (eg ~0) if none set.
// This is based on specifed start time and some element of the current eco/comfort bias.
//   * which  schedule number, counting from 0
uint_least16_t getSimpleScheduleOff(const uint8_t which)
    24da:	cf 93       	push	r28
    24dc:	df 93       	push	r29
  {
  const uint_least16_t startMins = getSimpleScheduleOn(which);
    24de:	0e 94 4d 12 	call	0x249a	; 0x249a <getSimpleScheduleOn(unsigned char)>
    24e2:	ec 01       	movw	r28, r24
  if(startMins == (uint_least16_t)~0) { return(~0); }
    24e4:	8f ef       	ldi	r24, 0xFF	; 255
    24e6:	cf 3f       	cpi	r28, 0xFF	; 255
    24e8:	d8 07       	cpc	r29, r24
    24ea:	19 f4       	brne	.+6      	; 0x24f2 <getSimpleScheduleOff(unsigned char)+0x18>
    24ec:	2f ef       	ldi	r18, 0xFF	; 255
    24ee:	3f ef       	ldi	r19, 0xFF	; 255
    24f0:	16 c0       	rjmp	.+44     	; 0x251e <getSimpleScheduleOff(unsigned char)+0x44>
  {
//  // Simple and fast binary choice.
//  return(hasEcoBias() ? LEARNED_ON_PERIOD_M : LEARNED_ON_PERIOD_COMFORT_M);

  // Three-way split based on current WARM target temperature.
  const uint8_t wt = getWARMTargetC();
    24f2:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <getWARMTargetC()>
  if(isEcoTemperature(wt)) { return(LEARNED_ON_PERIOD_M); }
    24f6:	82 31       	cpi	r24, 0x12	; 18
    24f8:	10 f4       	brcc	.+4      	; 0x24fe <getSimpleScheduleOff(unsigned char)+0x24>
    24fa:	8c e3       	ldi	r24, 0x3C	; 60
    24fc:	05 c0       	rjmp	.+10     	; 0x2508 <getSimpleScheduleOff(unsigned char)+0x2e>
  else if(isComfortTemperature(wt)) { return(LEARNED_ON_PERIOD_COMFORT_M); }
    24fe:	85 31       	cpi	r24, 0x15	; 21
    2500:	10 f4       	brcc	.+4      	; 0x2506 <getSimpleScheduleOff(unsigned char)+0x2c>
    2502:	8a e5       	ldi	r24, 0x5A	; 90
    2504:	01 c0       	rjmp	.+2      	; 0x2508 <getSimpleScheduleOff(unsigned char)+0x2e>
    2506:	88 e7       	ldi	r24, 0x78	; 120
uint_least16_t getSimpleScheduleOff(const uint8_t which)
  {
  const uint_least16_t startMins = getSimpleScheduleOn(which);
  if(startMins == (uint_least16_t)~0) { return(~0); }
  // Compute end from start, allowing for wrap-around at midnight.
  uint_least16_t endTime = startMins + PREWARM_MINS + onTime();
    2508:	9e 01       	movw	r18, r28
    250a:	2e 5e       	subi	r18, 0xEE	; 238
    250c:	3f 4f       	sbci	r19, 0xFF	; 255
    250e:	28 0f       	add	r18, r24
    2510:	31 1d       	adc	r19, r1
  if(endTime >= MINS_PER_DAY) { endTime -= MINS_PER_DAY; } // Allow for wrap-around at midnight.
    2512:	85 e0       	ldi	r24, 0x05	; 5
    2514:	20 3a       	cpi	r18, 0xA0	; 160
    2516:	38 07       	cpc	r19, r24
    2518:	10 f0       	brcs	.+4      	; 0x251e <getSimpleScheduleOff(unsigned char)+0x44>
    251a:	20 5a       	subi	r18, 0xA0	; 160
    251c:	35 40       	sbci	r19, 0x05	; 5
  return(endTime);
  }
    251e:	c9 01       	movw	r24, r18
    2520:	df 91       	pop	r29
    2522:	cf 91       	pop	r28
    2524:	08 95       	ret

00002526 <isAnyScheduleOnWARMSoon()>:
// True iff any schedule is due 'on'/'WARM' soon even when schedules overlap.
// May be relatively slow/expensive.
// Can be used to allow room to be brought up to at least a set-back temperature
// if very cold when a WARM period is due soon (to help ensure that WARM target is met on time).
// In unit-test override mode is true for soon, false for now/off.
bool isAnyScheduleOnWARMSoon()
    2526:	0f 93       	push	r16
    2528:	1f 93       	push	r17
    252a:	cf 93       	push	r28
    252c:	df 93       	push	r29
    case _soUT_soon: return(true);
    case _soUT_now: return(false);
    }
#endif

  const uint_least16_t mm0 = getMinutesSinceMidnightLT() + PREPREWARM_MINS; // Look forward...
    252e:	0e 94 e6 11 	call	0x23cc	; 0x23cc <getMinutesSinceMidnightLT()>
    2532:	9c 01       	movw	r18, r24
    2534:	2e 5e       	subi	r18, 0xEE	; 238
    2536:	3f 4f       	sbci	r19, 0xFF	; 255
  const uint_least16_t mm = (mm0 >= MINS_PER_DAY) ? (mm0 - MINS_PER_DAY) : mm0;
    2538:	45 e0       	ldi	r20, 0x05	; 5
    253a:	20 3a       	cpi	r18, 0xA0	; 160
    253c:	34 07       	cpc	r19, r20
    253e:	10 f4       	brcc	.+4      	; 0x2544 <isAnyScheduleOnWARMSoon()+0x1e>
    2540:	89 01       	movw	r16, r18
    2542:	03 c0       	rjmp	.+6      	; 0x254a <isAnyScheduleOnWARMSoon()+0x24>
    2544:	8c 01       	movw	r16, r24
    2546:	0e 58       	subi	r16, 0x8E	; 142
    2548:	15 40       	sbci	r17, 0x05	; 5

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    254a:	80 e0       	ldi	r24, 0x00	; 0
    254c:	0e 94 4d 12 	call	0x249a	; 0x249a <getSimpleScheduleOn(unsigned char)>
    2550:	ec 01       	movw	r28, r24
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    2552:	08 17       	cp	r16, r24
    2554:	19 07       	cpc	r17, r25
    2556:	68 f0       	brcs	.+26     	; 0x2572 <isAnyScheduleOnWARMSoon()+0x4c>
    uint_least16_t e = getSimpleScheduleOff(which);
    2558:	80 e0       	ldi	r24, 0x00	; 0
    255a:	0e 94 6d 12 	call	0x24da	; 0x24da <getSimpleScheduleOff(unsigned char)>
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    255e:	8c 17       	cp	r24, r28
    2560:	9d 07       	cpc	r25, r29
    2562:	20 f0       	brcs	.+8      	; 0x256c <isAnyScheduleOnWARMSoon()+0x46>
    if(mm < e) { return(true); }
    2564:	08 17       	cp	r16, r24
    2566:	19 07       	cpc	r17, r25
    2568:	20 f4       	brcc	.+8      	; 0x2572 <isAnyScheduleOnWARMSoon()+0x4c>
    256a:	17 c0       	rjmp	.+46     	; 0x259a <isAnyScheduleOnWARMSoon()+0x74>
  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    uint_least16_t e = getSimpleScheduleOff(which);
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    256c:	80 56       	subi	r24, 0x60	; 96
    256e:	9a 4f       	sbci	r25, 0xFA	; 250
    2570:	f9 cf       	rjmp	.-14     	; 0x2564 <isAnyScheduleOnWARMSoon()+0x3e>
  const uint_least16_t mm0 = getMinutesSinceMidnightLT() + PREPREWARM_MINS; // Look forward...
  const uint_least16_t mm = (mm0 >= MINS_PER_DAY) ? (mm0 - MINS_PER_DAY) : mm0;

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	0e 94 4d 12 	call	0x249a	; 0x249a <getSimpleScheduleOn(unsigned char)>
    2578:	ec 01       	movw	r28, r24
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    257a:	08 17       	cp	r16, r24
    257c:	19 07       	cpc	r17, r25
    257e:	58 f0       	brcs	.+22     	; 0x2596 <isAnyScheduleOnWARMSoon()+0x70>
    uint_least16_t e = getSimpleScheduleOff(which);
    2580:	81 e0       	ldi	r24, 0x01	; 1
    2582:	0e 94 6d 12 	call	0x24da	; 0x24da <getSimpleScheduleOff(unsigned char)>
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    2586:	8c 17       	cp	r24, r28
    2588:	9d 07       	cpc	r25, r29
    258a:	10 f4       	brcc	.+4      	; 0x2590 <isAnyScheduleOnWARMSoon()+0x6a>
    258c:	80 56       	subi	r24, 0x60	; 96
    258e:	9a 4f       	sbci	r25, 0xFA	; 250
    if(mm < e) { return(true); }
    2590:	08 17       	cp	r16, r24
    2592:	19 07       	cpc	r17, r25
    2594:	10 f0       	brcs	.+4      	; 0x259a <isAnyScheduleOnWARMSoon()+0x74>
    2596:	80 e0       	ldi	r24, 0x00	; 0
    2598:	01 c0       	rjmp	.+2      	; 0x259c <isAnyScheduleOnWARMSoon()+0x76>
#endif

  const uint_least16_t mm0 = getMinutesSinceMidnightLT() + PREPREWARM_MINS; // Look forward...
  const uint_least16_t mm = (mm0 >= MINS_PER_DAY) ? (mm0 - MINS_PER_DAY) : mm0;

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    259a:	81 e0       	ldi	r24, 0x01	; 1
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    if(mm < e) { return(true); }
    }

  return(false);
  }
    259c:	df 91       	pop	r29
    259e:	cf 91       	pop	r28
    25a0:	1f 91       	pop	r17
    25a2:	0f 91       	pop	r16
    25a4:	08 95       	ret

000025a6 <isAnyScheduleOnWARMNow()>:
// True iff any schedule is currently 'on'/'WARM' even when schedules overlap.
// May be relatively slow/expensive.
// Can be used to suppress all 'off' activity except for the final one.
// Can be used to suppress set-backs during on times.
// In unit-test override mode is true for now, false for soon/off.
bool isAnyScheduleOnWARMNow()
    25a6:	0f 93       	push	r16
    25a8:	1f 93       	push	r17
    25aa:	cf 93       	push	r28
    25ac:	df 93       	push	r29
    case _soUT_soon: return(false);
    case _soUT_now: return(true);
    }
#endif

  const uint_least16_t mm = getMinutesSinceMidnightLT();
    25ae:	0e 94 e6 11 	call	0x23cc	; 0x23cc <getMinutesSinceMidnightLT()>
    25b2:	8c 01       	movw	r16, r24

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    25b4:	80 e0       	ldi	r24, 0x00	; 0
    25b6:	0e 94 4d 12 	call	0x249a	; 0x249a <getSimpleScheduleOn(unsigned char)>
    25ba:	ec 01       	movw	r28, r24
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    25bc:	08 17       	cp	r16, r24
    25be:	19 07       	cpc	r17, r25
    25c0:	68 f0       	brcs	.+26     	; 0x25dc <isAnyScheduleOnWARMNow()+0x36>
    uint_least16_t e = getSimpleScheduleOff(which);
    25c2:	80 e0       	ldi	r24, 0x00	; 0
    25c4:	0e 94 6d 12 	call	0x24da	; 0x24da <getSimpleScheduleOff(unsigned char)>
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    25c8:	8c 17       	cp	r24, r28
    25ca:	9d 07       	cpc	r25, r29
    25cc:	20 f0       	brcs	.+8      	; 0x25d6 <isAnyScheduleOnWARMNow()+0x30>
    if(mm < e) { return(true); }
    25ce:	08 17       	cp	r16, r24
    25d0:	19 07       	cpc	r17, r25
    25d2:	20 f4       	brcc	.+8      	; 0x25dc <isAnyScheduleOnWARMNow()+0x36>
    25d4:	17 c0       	rjmp	.+46     	; 0x2604 <isAnyScheduleOnWARMNow()+0x5e>
  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    uint_least16_t e = getSimpleScheduleOff(which);
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    25d6:	80 56       	subi	r24, 0x60	; 96
    25d8:	9a 4f       	sbci	r25, 0xFA	; 250
    25da:	f9 cf       	rjmp	.-14     	; 0x25ce <isAnyScheduleOnWARMNow()+0x28>

  const uint_least16_t mm = getMinutesSinceMidnightLT();

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    25dc:	81 e0       	ldi	r24, 0x01	; 1
    25de:	0e 94 4d 12 	call	0x249a	; 0x249a <getSimpleScheduleOn(unsigned char)>
    25e2:	ec 01       	movw	r28, r24
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    25e4:	08 17       	cp	r16, r24
    25e6:	19 07       	cpc	r17, r25
    25e8:	58 f0       	brcs	.+22     	; 0x2600 <isAnyScheduleOnWARMNow()+0x5a>
    uint_least16_t e = getSimpleScheduleOff(which);
    25ea:	81 e0       	ldi	r24, 0x01	; 1
    25ec:	0e 94 6d 12 	call	0x24da	; 0x24da <getSimpleScheduleOff(unsigned char)>
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    25f0:	8c 17       	cp	r24, r28
    25f2:	9d 07       	cpc	r25, r29
    25f4:	10 f4       	brcc	.+4      	; 0x25fa <isAnyScheduleOnWARMNow()+0x54>
    25f6:	80 56       	subi	r24, 0x60	; 96
    25f8:	9a 4f       	sbci	r25, 0xFA	; 250
    if(mm < e) { return(true); }
    25fa:	08 17       	cp	r16, r24
    25fc:	19 07       	cpc	r17, r25
    25fe:	10 f0       	brcs	.+4      	; 0x2604 <isAnyScheduleOnWARMNow()+0x5e>
    2600:	80 e0       	ldi	r24, 0x00	; 0
    2602:	01 c0       	rjmp	.+2      	; 0x2606 <isAnyScheduleOnWARMNow()+0x60>
    }
#endif

  const uint_least16_t mm = getMinutesSinceMidnightLT();

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    2604:	81 e0       	ldi	r24, 0x01	; 1
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    if(mm < e) { return(true); }
    }

  return(false);
  }
    2606:	df 91       	pop	r29
    2608:	cf 91       	pop	r28
    260a:	1f 91       	pop	r17
    260c:	0f 91       	pop	r16
    260e:	08 95       	ret

00002610 <addEntropyToPool(unsigned char, unsigned char)>:
//   * estBits estimated number of truely securely random bits in range [0,8].
// Not thread-/ISR- safe.
void addEntropyToPool(uint8_t data, uint8_t estBits)
  {
  // TODO: no real entropy pool yet.
  seedRNG8(data, cycleCountCPU(), getSubCycleTime());
    2610:	66 b5       	in	r22, 0x26	; 38
    2612:	40 91 b2 00 	lds	r20, 0x00B2
    2616:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <seedRNG8(unsigned char, unsigned char, unsigned char)>
  }
    261a:	08 95       	ret

0000261c <getSecureRandomByte(bool)>:
// Likely to be slow and may force some peripheral I/O.
// Runtime details are likely to be intimately dependent on hardware implementation.
// Not thread-/ISR- safe.
//  * whiten  if true whiten the output a little more, but little or no extra entropy is added;
//      if false then it is easier to test if the underlying source provides new entropy reliably
uint8_t getSecureRandomByte(const bool whiten)
    261c:	ff 92       	push	r15
    261e:	0f 93       	push	r16
    2620:	1f 93       	push	r17
    2622:	df 93       	push	r29
    2624:	cf 93       	push	r28
    2626:	00 d0       	rcall	.+0      	; 0x2628 <getSecureRandomByte(bool)+0xc>
    2628:	cd b7       	in	r28, 0x3d	; 61
    262a:	de b7       	in	r29, 0x3e	; 62
    262c:	f8 2e       	mov	r15, r24
  {
#ifdef WAKEUP_32768HZ_XTAL
  // Use various real noise sources and whiten with PRNG and other counters.
  // Mix the bits also to help ensure good distribution.
  uint8_t w1 = clockJitterEntropyByte(); // Real noise.
    262e:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <clockJitterEntropyByte()>
  w1 ^= (w1 << 2); // Mix.
  w1 ^= clockJitterWDT();
  w1 ^= (w1 >> 1); // Mix.
  w1 ^= clockJitterWDT();
#endif
  const uint8_t v1 = w1;
    2632:	89 83       	std	Y+1, r24	; 0x01
  w1 ^= (w1 << 3); // Mix.
    2634:	08 2f       	mov	r16, r24
    2636:	00 0f       	add	r16, r16
    2638:	00 0f       	add	r16, r16
    263a:	00 0f       	add	r16, r16
    263c:	08 27       	eor	r16, r24
  w1 ^= noisyADCRead(true); // Some more real noise, possibly ~1 bit.
    263e:	81 e0       	ldi	r24, 0x01	; 1
    2640:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <noisyADCRead(bool)>
    2644:	08 27       	eor	r16, r24
  w1 ^= (w1 << 4); // Mix.
    2646:	10 2f       	mov	r17, r16
    2648:	12 95       	swap	r17
    264a:	10 7f       	andi	r17, 0xF0	; 240
    264c:	10 27       	eor	r17, r16
  const uint8_t v2 = w1;
    264e:	1a 83       	std	Y+2, r17	; 0x02
  w1 ^= clockJitterWDT(); // Possibly ~1 bit more of entropy.
    2650:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <clockJitterWDT()>
    2654:	18 27       	eor	r17, r24
  w1 ^= (w1 >> 4); // Mix.
    2656:	01 2f       	mov	r16, r17
    2658:	02 95       	swap	r16
    265a:	0f 70       	andi	r16, 0x0F	; 15
    265c:	01 27       	eor	r16, r17
  if(whiten)
    265e:	ff 20       	and	r15, r15
    2660:	f1 f0       	breq	.+60     	; 0x269e <getSecureRandomByte(bool)+0x82>
    {
    w1 ^= randRNG8(); // Whiten.
    2662:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <randRNG8()>
    2666:	80 27       	eor	r24, r16
    w1 ^= (w1 << 3); // Mix.
    2668:	08 2f       	mov	r16, r24
    266a:	00 0f       	add	r16, r16
    266c:	00 0f       	add	r16, r16
    266e:	00 0f       	add	r16, r16
    2670:	08 27       	eor	r16, r24
    w1 ^= _crc_ibutton_update(cycleCountCPU() ^ (uint8_t)(intptr_t)&v1, ++count8 - (uint8_t)(intptr_t)&v2); // Whiten.
    2672:	26 b5       	in	r18, 0x26	; 38
    2674:	30 91 15 03 	lds	r19, 0x0315
    2678:	3f 5f       	subi	r19, 0xFF	; 255
    267a:	30 93 15 03 	sts	0x0315, r19
    267e:	ce 01       	movw	r24, r28
    2680:	01 96       	adiw	r24, 0x01	; 1
    2682:	28 27       	eor	r18, r24
    2684:	ce 01       	movw	r24, r28
    2686:	02 96       	adiw	r24, 0x02	; 2
    2688:	38 1b       	sub	r19, r24
    268a:	23 27       	eor	r18, r19
    268c:	88 e0       	ldi	r24, 0x08	; 8
    268e:	9c e8       	ldi	r25, 0x8C	; 140
    2690:	20 fb       	bst	r18, 0
    2692:	26 95       	lsr	r18
    2694:	0e f4       	brtc	.+2      	; 0x2698 <getSecureRandomByte(bool)+0x7c>
    2696:	29 27       	eor	r18, r25
    2698:	8a 95       	dec	r24
    269a:	d1 f7       	brne	.-12     	; 0x2690 <getSecureRandomByte(bool)+0x74>
    269c:	02 27       	eor	r16, r18
    269e:	89 81       	ldd	r24, Y+1	; 0x01
    26a0:	9a 81       	ldd	r25, Y+2	; 0x02
    26a2:	89 27       	eor	r24, r25
    26a4:	98 e0       	ldi	r25, 0x08	; 8
    26a6:	2c e8       	ldi	r18, 0x8C	; 140
    26a8:	80 fb       	bst	r24, 0
    26aa:	86 95       	lsr	r24
    26ac:	0e f4       	brtc	.+2      	; 0x26b0 <getSecureRandomByte(bool)+0x94>
    26ae:	82 27       	eor	r24, r18
    26b0:	9a 95       	dec	r25
    26b2:	d1 f7       	brne	.-12     	; 0x26a8 <getSecureRandomByte(bool)+0x8c>
    }
  w1 ^= _crc_ibutton_update(v1, v2); // Complex hash.
  return(w1);
  }
    26b4:	80 27       	eor	r24, r16
    26b6:	0f 90       	pop	r0
    26b8:	0f 90       	pop	r0
    26ba:	cf 91       	pop	r28
    26bc:	df 91       	pop	r29
    26be:	1f 91       	pop	r17
    26c0:	0f 91       	pop	r16
    26c2:	ff 90       	pop	r15
    26c4:	08 95       	ret

000026c6 <serialPrintAndFlush(char)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) character to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(const char c)
    26c6:	0f 93       	push	r16
    26c8:	1f 93       	push	r17
    26ca:	18 2f       	mov	r17, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    26cc:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <powerUpSerialIfDisabled()>
    26d0:	08 2f       	mov	r16, r24
  // Send the character.
  Serial.print(c);
    26d2:	82 e7       	ldi	r24, 0x72	; 114
    26d4:	94 e0       	ldi	r25, 0x04	; 4
    26d6:	61 2f       	mov	r22, r17
    26d8:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <Print::print(char)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    26dc:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    26e0:	00 23       	and	r16, r16
    26e2:	11 f0       	breq	.+4      	; 0x26e8 <serialPrintAndFlush(char)+0x22>
    26e4:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <powerDownSerial()>
  }
    26e8:	1f 91       	pop	r17
    26ea:	0f 91       	pop	r16
    26ec:	08 95       	ret

000026ee <serialPrintlnAndFlush()>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write line-end to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintlnAndFlush()
    26ee:	1f 93       	push	r17
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    26f0:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <powerUpSerialIfDisabled()>
    26f4:	18 2f       	mov	r17, r24
  // Send the text.
  Serial.println();
    26f6:	82 e7       	ldi	r24, 0x72	; 114
    26f8:	94 e0       	ldi	r25, 0x04	; 4
    26fa:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <Print::println()>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    26fe:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    2702:	11 23       	and	r17, r17
    2704:	11 f0       	breq	.+4      	; 0x270a <serialPrintlnAndFlush()+0x1c>
    2706:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <powerDownSerial()>
  }
    270a:	1f 91       	pop	r17
    270c:	08 95       	ret

0000270e <serialPrintAndFlush(int, int)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) number to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(const int i, const int fmt)
    270e:	df 92       	push	r13
    2710:	ef 92       	push	r14
    2712:	ff 92       	push	r15
    2714:	0f 93       	push	r16
    2716:	1f 93       	push	r17
    2718:	8c 01       	movw	r16, r24
    271a:	7b 01       	movw	r14, r22
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    271c:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <powerUpSerialIfDisabled()>
    2720:	d8 2e       	mov	r13, r24
  // Send the character.
  Serial.print(i, fmt);
    2722:	82 e7       	ldi	r24, 0x72	; 114
    2724:	94 e0       	ldi	r25, 0x04	; 4
    2726:	b8 01       	movw	r22, r16
    2728:	a7 01       	movw	r20, r14
    272a:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <Print::print(int, int)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    272e:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    2732:	dd 20       	and	r13, r13
    2734:	11 f0       	breq	.+4      	; 0x273a <serialPrintAndFlush(int, int)+0x2c>
    2736:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <powerDownSerial()>
  }
    273a:	1f 91       	pop	r17
    273c:	0f 91       	pop	r16
    273e:	ff 90       	pop	r15
    2740:	ef 90       	pop	r14
    2742:	df 90       	pop	r13
    2744:	08 95       	ret

00002746 <serialPrintAndFlush(char const*)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (read-only) string to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(const char * const text)
    2746:	ff 92       	push	r15
    2748:	0f 93       	push	r16
    274a:	1f 93       	push	r17
    274c:	8c 01       	movw	r16, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    274e:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <powerUpSerialIfDisabled()>
    2752:	f8 2e       	mov	r15, r24
  // Send the text.
  Serial.print(text);
    2754:	82 e7       	ldi	r24, 0x72	; 114
    2756:	94 e0       	ldi	r25, 0x04	; 4
    2758:	b8 01       	movw	r22, r16
    275a:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <Print::print(char const*)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    275e:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    2762:	ff 20       	and	r15, r15
    2764:	11 f0       	breq	.+4      	; 0x276a <serialPrintAndFlush(char const*)+0x24>
    2766:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <powerDownSerial()>
  }
    276a:	1f 91       	pop	r17
    276c:	0f 91       	pop	r16
    276e:	ff 90       	pop	r15
    2770:	08 95       	ret

00002772 <serialPrintAndFlush(__FlashStringHelper const*)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) string to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(__FlashStringHelper const * const text)
    2772:	ff 92       	push	r15
    2774:	0f 93       	push	r16
    2776:	1f 93       	push	r17
    2778:	8c 01       	movw	r16, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    277a:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <powerUpSerialIfDisabled()>
    277e:	f8 2e       	mov	r15, r24
  // Send the text.
  Serial.print(text);
    2780:	82 e7       	ldi	r24, 0x72	; 114
    2782:	94 e0       	ldi	r25, 0x04	; 4
    2784:	b8 01       	movw	r22, r16
    2786:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <Print::print(__FlashStringHelper const*)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    278a:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    278e:	ff 20       	and	r15, r15
    2790:	11 f0       	breq	.+4      	; 0x2796 <serialPrintAndFlush(__FlashStringHelper const*)+0x24>
    2792:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <powerDownSerial()>
  }
    2796:	1f 91       	pop	r17
    2798:	0f 91       	pop	r16
    279a:	ff 90       	pop	r15
    279c:	08 95       	ret

0000279e <serialPrintlnAndFlush(__FlashStringHelper const*)>:
// Flush to use for all serialPrintXXX() and DEBUG_PRINTXXX routines.
#define _flush() flushSerialSCTSensitive()

// Write a single (Flash-resident) string to serial followed by line-end and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintlnAndFlush(__FlashStringHelper const * const line)
    279e:	ff 92       	push	r15
    27a0:	0f 93       	push	r16
    27a2:	1f 93       	push	r17
    27a4:	8c 01       	movw	r16, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    27a6:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <powerUpSerialIfDisabled()>
    27aa:	f8 2e       	mov	r15, r24
  // Send the line of text followed by line end.
  Serial.println(line);
    27ac:	82 e7       	ldi	r24, 0x72	; 114
    27ae:	94 e0       	ldi	r25, 0x04	; 4
    27b0:	b8 01       	movw	r22, r16
    27b2:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <Print::println(__FlashStringHelper const*)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    27b6:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    27ba:	ff 20       	and	r15, r15
    27bc:	11 f0       	breq	.+4      	; 0x27c2 <serialPrintlnAndFlush(__FlashStringHelper const*)+0x24>
    27be:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <powerDownSerial()>
  }
    27c2:	1f 91       	pop	r17
    27c4:	0f 91       	pop	r16
    27c6:	ff 90       	pop	r15
    27c8:	08 95       	ret

000027ca <markUIControlUsed()>:
// Record local manual operation of a local physical UI control, eg not remote or via CLI.
// To be thread-safe, everything that this touches or calls must be.
// Thread-safe.
void markUIControlUsed()
  {
  statusChange = true; // Note user interaction with the system.
    27ca:	81 e0       	ldi	r24, 0x01	; 1
    27cc:	80 93 17 03 	sts	0x0317, r24
  uiTimeoutM = UI_DEFAULT_RECENT_USE_TIMEOUT_M; // Ensure that UI controls are kept 'warm' for a little while.
    27d0:	8f e1       	ldi	r24, 0x1F	; 31
    27d2:	80 93 16 03 	sts	0x0316, r24
#define CLI_DEFAULT_TIMEOUT_M 2
static volatile uint8_t CLITimeoutM = CLI_DEFAULT_TIMEOUT_M;

// Reset CLI active timer to the full whack before it goes inactive again (ie makes CLI active for a while).
// Thread-safe.
void resetCLIActiveTimer() { CLITimeoutM = CLI_DEFAULT_TIMEOUT_M; }
    27d6:	92 e0       	ldi	r25, 0x02	; 2
    27d8:	90 93 30 01 	sts	0x0130, r25
    // Do not call based on internal/synthetic events.
    // Such evidence may include operation of buttons (etc) on the unit or PIR.
    // Do not call from (for example) 'on' schedule change.
    // Makes occupation immediately visible.
    // Thread-safe and ISR-safe.
    void markAsOccupied() { value = 100; occupationCountdownM = OCCUPATION_TIMEOUT_M; activityCountdownM = 2; }
    27dc:	84 e6       	ldi	r24, 0x64	; 100
    27de:	80 93 fb 01 	sts	0x01FB, r24
    27e2:	82 e3       	ldi	r24, 0x32	; 50
    27e4:	80 93 fc 01 	sts	0x01FC, r24
    27e8:	90 93 fd 01 	sts	0x01FD, r25
  uiTimeoutM = UI_DEFAULT_RECENT_USE_TIMEOUT_M; // Ensure that UI controls are kept 'warm' for a little while.
  // Make CLI active for a while (at some slight possibly-significant energy cost).
  resetCLIActiveTimer(); // Thread-safe.
  // User operation of controls locally is strong indication of presence.
  Occupancy.markAsOccupied(); // Thread-safe.
  }
    27ec:	08 95       	ret

000027ee <recentUIControlUse()>:

// True if a manual UI control has been recently (tens of minutes ago) operated.
// If true then local manual settings should 'win' in any conflict with programmed or remote ones.
// For example, remote requests to override settings may be ignored while this is true.
// Thread-safe....
bool recentUIControlUse() { return(0 != uiTimeoutM); }
    27ee:	80 91 16 03 	lds	r24, 0x0316
    27f2:	81 11       	cpse	r24, r1
    27f4:	81 e0       	ldi	r24, 0x01	; 1
    27f6:	08 95       	ret

000027f8 <global constructors keyed to _Z5panicv>:
  '/',
  __DATE__[0], __DATE__[1], __DATE__[2],
  '/',
  __DATE__[4], __DATE__[5],
  '\0'
  };
    27f8:	82 e3       	ldi	r24, 0x32	; 50
    27fa:	80 93 31 01 	sts	0x0131, r24
    27fe:	90 e3       	ldi	r25, 0x30	; 48
    2800:	90 93 32 01 	sts	0x0132, r25
    2804:	81 e3       	ldi	r24, 0x31	; 49
    2806:	80 93 33 01 	sts	0x0133, r24
    280a:	85 e3       	ldi	r24, 0x35	; 53
    280c:	80 93 34 01 	sts	0x0134, r24
    2810:	8d e4       	ldi	r24, 0x4D	; 77
    2812:	80 93 36 01 	sts	0x0136, r24
    2816:	81 e6       	ldi	r24, 0x61	; 97
    2818:	80 93 37 01 	sts	0x0137, r24
    281c:	82 e7       	ldi	r24, 0x72	; 114
    281e:	80 93 38 01 	sts	0x0138, r24
    2822:	83 e3       	ldi	r24, 0x33	; 51
    2824:	80 93 3a 01 	sts	0x013A, r24
    2828:	90 93 3b 01 	sts	0x013B, r25
//us apparent: 1408
//us apparent: 3776
//us apparent: 2816
#endif
#endif
  }
    282c:	08 95       	ret

0000282e <loop>:


#if defined(UNIT_TESTS) // Run unit tests *instead* of normal loop() code. 
  loopUnitTest();
#elif defined(ALT_MAIN_LOOP) // Run alternative main loop.
  loopAlt();
    282e:	0e 94 91 01 	call	0x322	; 0x322 <loopAlt()>
//us apparent: 1408
//us apparent: 3776
//us apparent: 2816
#endif
#endif
  }
    2832:	08 95       	ret

00002834 <serialPrintlnBuildVersion()>:
  };
// Version (code/board) information printed as one line to serial (with line-end, and flushed); machine- and human- parseable.
// Format: "board VXXXX REVY; code YYYY/Mmm/DD HH:MM:SS".
void serialPrintlnBuildVersion()
  {
  serialPrintAndFlush(F("board V0.2 REV"));
    2834:	84 ef       	ldi	r24, 0xF4	; 244
    2836:	91 e0       	ldi	r25, 0x01	; 1
    2838:	0e 94 b9 13 	call	0x2772	; 0x2772 <serialPrintAndFlush(__FlashStringHelper const*)>
  serialPrintAndFlush(V0p2_REV);
    283c:	82 e0       	ldi	r24, 0x02	; 2
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	6a e0       	ldi	r22, 0x0A	; 10
    2842:	70 e0       	ldi	r23, 0x00	; 0
    2844:	0e 94 87 13 	call	0x270e	; 0x270e <serialPrintAndFlush(int, int)>
  serialPrintAndFlush(F("; code $Id: V0p2_Main.ino 4341 2015-03-17 18:31:12Z damonhd $ ")); // Expect SVN to substitute the Id keyword here with svn:keywords property set.
    2848:	85 eb       	ldi	r24, 0xB5	; 181
    284a:	91 e0       	ldi	r25, 0x01	; 1
    284c:	0e 94 b9 13 	call	0x2772	; 0x2772 <serialPrintAndFlush(__FlashStringHelper const*)>
  serialPrintAndFlush(_YYYYMmmDD);
    2850:	81 e3       	ldi	r24, 0x31	; 49
    2852:	91 e0       	ldi	r25, 0x01	; 1
    2854:	0e 94 a3 13 	call	0x2746	; 0x2746 <serialPrintAndFlush(char const*)>
  serialPrintAndFlush(F(" " __TIME__));
    2858:	8b ea       	ldi	r24, 0xAB	; 171
    285a:	91 e0       	ldi	r25, 0x01	; 1
    285c:	0e 94 b9 13 	call	0x2772	; 0x2772 <serialPrintAndFlush(__FlashStringHelper const*)>
  serialPrintlnAndFlush();
    2860:	0e 94 77 13 	call	0x26ee	; 0x26ee <serialPrintlnAndFlush()>
  }
    2864:	08 95       	ret

00002866 <panic()>:
// Tries not to use lots of energy so as to keep distress beacon running for a while.
void panic()
  {
#ifdef USE_MODULE_RFM22RADIOSIMPLE
  // Reset radio and go into low-power mode.
  RFM22PowerOnInit();
    2866:	0e 94 09 11 	call	0x2212	; 0x2212 <RFM22PowerOnInit()>
#endif
  // Power down almost everything else...
  minimisePowerWithoutSleep();
    286a:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <minimisePowerWithoutSleep()>
#ifdef LED_HEATCALL
  pinMode(LED_HEATCALL, OUTPUT);
#else
  pinMode(LED_HEATCALL_L, OUTPUT);
    286e:	84 e0       	ldi	r24, 0x04	; 4
    2870:	61 e0       	ldi	r22, 0x01	; 1
    2872:	0e 94 bc 19 	call	0x3378	; 0x3378 <pinMode>
#endif
  for( ; ; )
    {
    LED_HEATCALL_ON();
    2876:	5c 98       	cbi	0x0b, 4	; 11
// Very tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define VERYTINY_PAUSE_MS 5
static void inline veryTinyPause() { sleepLowPowerMs(VERYTINY_PAUSE_MS); }
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define TINY_PAUSE_MS 15
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    2878:	80 e0       	ldi	r24, 0x00	; 0
    287a:	0e 94 2b 0c 	call	0x1856	; 0x1856 <nap(signed char)>
    tinyPause();
    LED_HEATCALL_OFF();
    287e:	5c 9a       	sbi	0x0b, 4	; 11
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define MEDIUM_PAUSE_MS 60
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
// Big low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define BIG_PAUSE_MS 120
static void inline bigPause() { nap(WDTO_120MS); } // 120ms vs 288ms nominal for PICAXE V0.09 impl.
    2880:	83 e0       	ldi	r24, 0x03	; 3
    2882:	0e 94 2b 0c 	call	0x1856	; 0x1856 <nap(signed char)>
    2886:	f7 cf       	rjmp	.-18     	; 0x2876 <panic()+0x10>

00002888 <panic(__FlashStringHelper const*)>:
  }

// Panic with fixed message.
void panic(const __FlashStringHelper *s)
  {
  serialPrintlnAndFlush(s); // May fail.
    2888:	0e 94 cf 13 	call	0x279e	; 0x279e <serialPrintlnAndFlush(__FlashStringHelper const*)>
  panic();  
    288c:	0e 94 33 14 	call	0x2866	; 0x2866 <panic()>
  }
    2890:	08 95       	ret

00002892 <setup>:
  }


// Setup routine: runs once after reset.
// Does some limited board self-test and will panic() if anything is obviously broken.
void setup()
    2892:	1f 93       	push	r17
    2894:	cf 93       	push	r28
    2896:	df 93       	push	r29
  {
  // Set appropriate low-power states, interrupts, etc, ASAP.
  powerSetup();
    2898:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <powerSetup()>
    289c:	ce e0       	ldi	r28, 0x0E	; 14
    289e:	d0 e0       	ldi	r29, 0x00	; 0
    28a0:	33 c0       	rjmp	.+102    	; 0x2908 <setup+0x76>
  {
  // Initialise all digital I/O to safe state ASAP and avoid floating lines where possible.
  // In absence of a specific alternative, drive low as an output to minimise consumption (eg from floating input).
  for(int i = 14; --i >= 0; ) // For all digital pins from 0 to 13 inclusive...
    {
    switch(i)
    28a2:	c5 30       	cpi	r28, 0x05	; 5
    28a4:	d1 05       	cpc	r29, r1
    28a6:	61 f1       	breq	.+88     	; 0x2900 <setup+0x6e>
    28a8:	c6 30       	cpi	r28, 0x06	; 6
    28aa:	d1 05       	cpc	r29, r1
    28ac:	34 f4       	brge	.+12     	; 0x28ba <setup+0x28>
    28ae:	d7 fd       	sbrc	r29, 7
    28b0:	14 c0       	rjmp	.+40     	; 0x28da <setup+0x48>
    28b2:	c4 30       	cpi	r28, 0x04	; 4
    28b4:	d1 05       	cpc	r29, r1
    28b6:	24 f1       	brlt	.+72     	; 0x2900 <setup+0x6e>
    28b8:	17 c0       	rjmp	.+46     	; 0x28e8 <setup+0x56>
    28ba:	c9 30       	cpi	r28, 0x09	; 9
    28bc:	d1 05       	cpc	r29, r1
    28be:	e9 f0       	breq	.+58     	; 0x28fa <setup+0x68>
    28c0:	ca 30       	cpi	r28, 0x0A	; 10
    28c2:	d1 05       	cpc	r29, r1
    28c4:	24 f4       	brge	.+8      	; 0x28ce <setup+0x3c>
    28c6:	c8 30       	cpi	r28, 0x08	; 8
    28c8:	d1 05       	cpc	r29, r1
    28ca:	39 f4       	brne	.+14     	; 0x28da <setup+0x48>
    28cc:	19 c0       	rjmp	.+50     	; 0x2900 <setup+0x6e>
    28ce:	ca 30       	cpi	r28, 0x0A	; 10
    28d0:	d1 05       	cpc	r29, r1
    28d2:	b1 f0       	breq	.+44     	; 0x2900 <setup+0x6e>
    28d4:	cc 30       	cpi	r28, 0x0C	; 12
    28d6:	d1 05       	cpc	r29, r1
    28d8:	99 f0       	breq	.+38     	; 0x2900 <setup+0x6e>
      {
      // Low output is good safe low-power default.
      default: { digitalWrite(i, LOW); pinMode(i, OUTPUT); break; }
    28da:	8c 2f       	mov	r24, r28
    28dc:	60 e0       	ldi	r22, 0x00	; 0
    28de:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <digitalWrite>
    28e2:	8c 2f       	mov	r24, r28
    28e4:	61 e0       	ldi	r22, 0x01	; 1
    28e6:	0e c0       	rjmp	.+28     	; 0x2904 <setup+0x72>
      case LED_HEATCALL_L: { pinMode(LED_HEATCALL_L, OUTPUT); digitalWrite(LED_HEATCALL_L, LOW); break; }
#endif
#else
#ifdef LED_HEATCALL_L
      // Leave main UI LED off in ALT-mode eg in case on minimal power from energy harvesting.
      case LED_HEATCALL_L: { pinMode(LED_HEATCALL_L, OUTPUT); digitalWrite(LED_HEATCALL_L, HIGH); break; }
    28e8:	84 e0       	ldi	r24, 0x04	; 4
    28ea:	61 e0       	ldi	r22, 0x01	; 1
    28ec:	0e 94 bc 19 	call	0x3378	; 0x3378 <pinMode>
    28f0:	84 e0       	ldi	r24, 0x04	; 4
    28f2:	61 e0       	ldi	r22, 0x01	; 1
    28f4:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <digitalWrite>
    28f8:	07 c0       	rjmp	.+14     	; 0x2908 <setup+0x76>
      case LED_UI2_L: { pinMode(LED_UI2_L, OUTPUT); digitalWrite(LED_UI2_L, HIGH); break; }
#endif

#ifdef PIN_RFM_NIRQ 
      // Set as input to avoid contention current.
      case PIN_RFM_NIRQ: { pinMode(PIN_RFM_NIRQ, INPUT); break; }
    28fa:	89 e0       	ldi	r24, 0x09	; 9
    28fc:	60 e0       	ldi	r22, 0x00	; 0
    28fe:	02 c0       	rjmp	.+4      	; 0x2904 <setup+0x72>
#ifdef PIN_SERIAL_RX
      // Weak TX and RX pull-up empirically found to produce lowest leakage current
      // when 2xAA NiMH battery powered and connected to TTL-232R-3V3 USB lead.
      case PIN_SERIAL_RX: case PIN_SERIAL_TX:
#endif
        { pinMode(i, INPUT_PULLUP); break; }
    2900:	8c 2f       	mov	r24, r28
    2902:	62 e0       	ldi	r22, 0x02	; 2
    2904:	0e 94 bc 19 	call	0x3378	; 0x3378 <pinMode>
// Call this ASAP in setup() to configure I/O safely for the board, avoid pins floating, etc.
static inline void IOSetup()
  {
  // Initialise all digital I/O to safe state ASAP and avoid floating lines where possible.
  // In absence of a specific alternative, drive low as an output to minimise consumption (eg from floating input).
  for(int i = 14; --i >= 0; ) // For all digital pins from 0 to 13 inclusive...
    2908:	21 97       	sbiw	r28, 0x01	; 1
    290a:	d7 ff       	sbrs	r29, 7
    290c:	ca cf       	rjmp	.-108    	; 0x28a2 <setup+0x10>
    }

#ifdef MOTOR_DRIVE_ML
  // Weakly pull up both motor REV7 H-bridge driver lines by default.
  // Safe for all boards and may reduce parasitic floating power consumption on non-REV7 boards.
  pinMode(MOTOR_DRIVE_ML, INPUT_PULLUP);
    290e:	80 e1       	ldi	r24, 0x10	; 16
    2910:	62 e0       	ldi	r22, 0x02	; 2
    2912:	0e 94 bc 19 	call	0x3378	; 0x3378 <pinMode>
  pinMode(MOTOR_DRIVE_MR, INPUT_PULLUP);
    2916:	81 e1       	ldi	r24, 0x11	; 17
    2918:	62 e0       	ldi	r22, 0x02	; 2
    291a:	0e 94 bc 19 	call	0x3378	; 0x3378 <pinMode>
  nap(WDTO_120MS); // Sleep to let power supply recover a little.
#endif

#if !defined(MIN_ENERGY_BOOT)
  // Restore previous RTC state if available.
  restoreRTC();
    291e:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <restoreRTC()>
  // TODO: consider code to calibrate the internal RC oscillator against the xtal, eg to keep serial comms happy, eg http://www.avrfreaks.net/index.php?name=PNphpBB2&file=printview&t=36237&start=0
#endif

#if !defined(MIN_ENERGY_BOOT)
  serialPrintAndFlush(F("\r\nOpenTRV: ")); // Leading CRLF to clear leading junk, eg from bootloader.
    2922:	83 e6       	ldi	r24, 0x63	; 99
    2924:	91 e0       	ldi	r25, 0x01	; 1
    2926:	0e 94 b9 13 	call	0x2772	; 0x2772 <serialPrintAndFlush(__FlashStringHelper const*)>
    serialPrintlnBuildVersion();
    292a:	0e 94 1a 14 	call	0x2834	; 0x2834 <serialPrintlnBuildVersion()>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    292e:	f9 99       	sbic	0x1f, 1	; 31
    2930:	fe cf       	rjmp	.-4      	; 0x292e <setup+0x9c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2932:	86 e0       	ldi	r24, 0x06	; 6
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	92 bd       	out	0x22, r25	; 34
    2938:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    293a:	f8 9a       	sbi	0x1f, 0	; 31
    293c:	10 b5       	in	r17, 0x20	; 32
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    293e:	f9 99       	sbic	0x1f, 1	; 31
    2940:	fe cf       	rjmp	.-4      	; 0x293e <setup+0xac>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    2942:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2944:	86 e0       	ldi	r24, 0x06	; 6
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	92 bd       	out	0x22, r25	; 34
    294a:	81 bd       	out	0x21, r24	; 33
#endif

#if !defined(MIN_ENERGY_BOOT)
  // Count resets to detect unexpected crashes/restarts.
  const uint8_t oldResetCount = eeprom_read_byte((uint8_t *)EE_START_RESET_COUNT);
  eeprom_write_byte((uint8_t *)EE_START_RESET_COUNT, 1 + oldResetCount);
    294c:	1f 5f       	subi	r17, 0xFF	; 255
#endif
    EEDR = __value;
    294e:	10 bd       	out	0x20, r17	; 32
    2950:	11 50       	subi	r17, 0x01	; 1
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    2952:	0f b6       	in	r0, 0x3f	; 63
    2954:	f8 94       	cli
    2956:	fa 9a       	sbi	0x1f, 2	; 31
    2958:	f9 9a       	sbi	0x1f, 1	; 31
    295a:	0f be       	out	0x3f, r0	; 63
#endif

#if defined(DEBUG) && !defined(MIN_ENERGY_BOOT)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("DEBUG");
    295c:	8d e5       	ldi	r24, 0x5D	; 93
    295e:	91 e0       	ldi	r25, 0x01	; 1
    2960:	0e 94 cf 13 	call	0x279e	; 0x279e <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif

#if defined(DEBUG) && !defined(MIN_ENERGY_BOOT)
  DEBUG_SERIAL_PRINT_FLASHSTRING("Resets: ");
    2964:	84 e5       	ldi	r24, 0x54	; 84
    2966:	91 e0       	ldi	r25, 0x01	; 1
    2968:	0e 94 b9 13 	call	0x2772	; 0x2772 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(oldResetCount);
    296c:	81 2f       	mov	r24, r17
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	6a e0       	ldi	r22, 0x0A	; 10
    2972:	70 e0       	ldi	r23, 0x00	; 0
    2974:	0e 94 87 13 	call	0x270e	; 0x270e <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    2978:	0e 94 77 13 	call	0x26ee	; 0x26ee <serialPrintlnAndFlush()>
  int x;
  DEBUG_SERIAL_PRINT((int) &x - (__brkval == 0 ? (int) &__heap_start : (int) __brkval));
  DEBUG_SERIAL_PRINTLN();
#endif
#if defined(ALT_MAIN_LOOP)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("ALTERNATE MAIN LOOP...");
    297c:	8d e3       	ldi	r24, 0x3D	; 61
    297e:	91 e0       	ldi	r25, 0x01	; 1
    2980:	0e 94 cf 13 	call	0x279e	; 0x279e <serialPrintlnAndFlush(__FlashStringHelper const*)>

// Do not do normal POST if running alternate main loop.
// POST may take too long and do unwanted things,
// especially for non-standard hardware setup.
#if defined(ALT_MAIN_LOOP)
  POSTalt(); // Do alternate POST and setup if required.
    2984:	0e 94 a1 01 	call	0x342	; 0x342 <POSTalt()>


  // Ensure that the unique node ID is set up (mainly on first use).
  // Have one attempt (don't want to stress an already failing EEPROM) to force-reset if not good, then panic.
  // Needs to have had entropy gathered, etc.
  if(!ensureIDCreated())
    2988:	80 e0       	ldi	r24, 0x00	; 0
    298a:	0e 94 1b 0a 	call	0x1436	; 0x1436 <ensureIDCreated(bool)>
    298e:	88 23       	and	r24, r24
    2990:	49 f4       	brne	.+18     	; 0x29a4 <setup+0x112>
    {
    if(!ensureIDCreated(true)) // Force reset.
    2992:	81 e0       	ldi	r24, 0x01	; 1
    2994:	0e 94 1b 0a 	call	0x1436	; 0x1436 <ensureIDCreated(bool)>
    2998:	88 23       	and	r24, r24
    299a:	21 f4       	brne	.+8      	; 0x29a4 <setup+0x112>
      { panic(F("!Bad ID: can't reset")); }
    299c:	88 e2       	ldi	r24, 0x28	; 40
    299e:	91 e0       	ldi	r25, 0x01	; 1
    29a0:	0e 94 44 14 	call	0x2888	; 0x2888 <panic(__FlashStringHelper const*)>
    }


  // Initialised: turn heatcall UI LED off.
//  pinMode(LED_HEATCALL, OUTPUT);
  LED_HEATCALL_OFF();
    29a4:	5c 9a       	sbi	0x0b, 4	; 11
  // Report initial status.
  serialStatusReport();
  // Do OpenTRV-specific (late) setup.
  setupOpenTRV();
#endif
  }
    29a6:	df 91       	pop	r29
    29a8:	cf 91       	pop	r28
    29aa:	1f 91       	pop	r17
    29ac:	08 95       	ret

000029ae <AmbientLight::preferredPollInterval_s() const>:
    // Potentially expensive/slow.
    // Not thread-safe nor usable within ISRs (Interrupt Service Routines).
    virtual uint8_t read();

    // Preferred poll interval (in seconds); should bve called at constant rate, usually 1/60s.
    virtual uint8_t preferredPollInterval_s() const { return(60); }
    29ae:	8c e3       	ldi	r24, 0x3C	; 60
    29b0:	08 95       	ret

000029b2 <AmbientLight::tag() const>:

    // Returns a suggested (JSON) tag/field/key name including units of get(); NULL means no recommended tag.
    // The lifetime of the pointed-to text must be at least that of the Sensor instance.
    virtual const char *tag() const { return("L"); }
    29b2:	86 e2       	ldi	r24, 0x26	; 38
    29b4:	91 e0       	ldi	r25, 0x01	; 1
    29b6:	08 95       	ret

000029b8 <RoomTemperatureC16::preferredPollInterval_s() const>:
    // Not thread-safe nor usable within ISRs (Interrupt Service Routines).
    virtual int read();

    // Preferred poll interval (in seconds).
    // This should be called at a regular rate, usually 1/60, so make stats such as velocity measurement easier.
    virtual uint8_t preferredPollInterval_s() const { return(60); }
    29b8:	8c e3       	ldi	r24, 0x3C	; 60
    29ba:	08 95       	ret

000029bc <RoomTemperatureC16::get() const>:

    // Return last value fetched by read(); undefined before first read().
    // Fast.
    // Not thread-safe nor usable within ISRs (Interrupt Service Routines).
    virtual int get() const { return(value); }
    29bc:	fc 01       	movw	r30, r24
    29be:	82 81       	ldd	r24, Z+2	; 0x02
    29c0:	93 81       	ldd	r25, Z+3	; 0x03
    29c2:	08 95       	ret

000029c4 <RoomTemperatureC16::tag() const>:

    // Returns a suggested (JSON) tag/field/key name including units of get(); NULL means no recommended tag.
    // The lifetime of the pointed-to text must be at least that of the Sensor instance.
    virtual const char *tag() const { return("T|C16"); }
    29c4:	88 e2       	ldi	r24, 0x28	; 40
    29c6:	91 e0       	ldi	r25, 0x01	; 1
    29c8:	08 95       	ret

000029ca <Sensor<int>::isValid(int) const>:
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual T get() const = 0;

    // Returns true if this sensor reading value passed is potentially valid, eg in-range.
    // Default is to always return true, ie all values potentially valid.
    virtual bool isValid(T value) const { return(true); }
    29ca:	81 e0       	ldi	r24, 0x01	; 1
    29cc:	08 95       	ret

000029ce <Sensor<int>::isUnavailable() const>:

    // Returns true if this sensor is definitely unavailable or behaving incorrectly.
    // The default case is to assume that if the code is wired in then the device will work.
    virtual bool isUnavailable() const { return(false); }
    29ce:	80 e0       	ldi	r24, 0x00	; 0
    29d0:	08 95       	ret

000029d2 <Sensor<int>::handleInterruptSimple()>:
    // Must be fast and ISR (Interrupt Service Routine) safe.
    // Returns true if interrupt was successfully handled and cleared
    // else another interrupt handler in the chain may be called
    // to attempt to clear the interrupt.
    // By default does nothing (and returns false).
    virtual bool handleInterruptSimple() { return(false); }
    29d2:	80 e0       	ldi	r24, 0x00	; 0
    29d4:	08 95       	ret

000029d6 <Sensor<int>::begin()>:

    // Begin access to this sensor if applicable and not already begun.
    // Returns true if it needed to be begun.
    // Allows logic to end() if required at the end of a block, etc.
    // Defaults to do nothing (and return false).
    virtual bool begin() { return(false); }
    29d6:	80 e0       	ldi	r24, 0x00	; 0
    29d8:	08 95       	ret

000029da <Sensor<int>::isAvailable() const>:

    // Returns true if this sensor is currently available.
    // True by default unless implementation overrides.
    // For those sensors that need starting this will be false before begin().
    virtual bool isAvailable() const { return(true); }
    29da:	81 e0       	ldi	r24, 0x01	; 1
    29dc:	08 95       	ret

000029de <Sensor<int>::end()>:

    // End access to this sensor if applicable and not already ended.
    // Returns true if it needed to be ended.
    // Defaults to do nothing (and return false).
    virtual bool end() { return(false); }
    29de:	80 e0       	ldi	r24, 0x00	; 0
    29e0:	08 95       	ret

000029e2 <global constructors keyed to _ZN12AmbientLight4readEv>:
  {
  protected:
      volatile uint8_t value;

      // By default initialise the value to zero.
      SimpleTSUint8Sensor() : value(0) { }
    29e2:	10 92 1a 03 	sts	0x031A, r1
// http://www.vishay.com/docs/84154/appnotesensors.pdf

#ifndef OMIT_MODULE_LDROCCUPANCYDETECTION
// Sensor for ambient light level; 0 is dark, 255 is bright.
class AmbientLight : public SimpleTSUint8Sensor
  {
    29e6:	83 ec       	ldi	r24, 0xC3	; 195
    29e8:	91 e0       	ldi	r25, 0x01	; 1
    29ea:	90 93 19 03 	sts	0x0319, r25
    29ee:	80 93 18 03 	sts	0x0318, r24
  private:
    // Room temperature in 16*C, eg 1 is 1/16 C, 32 is 2C, -64 is -4C.
    int value;

  public:
    RoomTemperatureC16() : value(0) { }
    29f2:	8b ea       	ldi	r24, 0xAB	; 171
    29f4:	91 e0       	ldi	r25, 0x01	; 1
    29f6:	90 93 20 03 	sts	0x0320, r25
    29fa:	80 93 1f 03 	sts	0x031F, r24
    29fe:	10 92 22 03 	sts	0x0322, r1
    2a02:	10 92 21 03 	sts	0x0321, r1
    2a06:	10 92 25 03 	sts	0x0325, r1
    // Raw pot value [0,1023] if extra precision is required.
    uint16_t raw;

  public:
    // Initialise to cautious values.
    TemperaturePot() : raw(0) { }
    2a0a:	83 e9       	ldi	r24, 0x93	; 147
    2a0c:	91 e0       	ldi	r25, 0x01	; 1
    2a0e:	90 93 24 03 	sts	0x0324, r25
    2a12:	80 93 23 03 	sts	0x0323, r24
    2a16:	10 92 27 03 	sts	0x0327, r1
    2a1a:	10 92 26 03 	sts	0x0326, r1

  return(value);
  }

// Singleton implementation/instance.
TemperaturePot TempPot;
    2a1e:	08 95       	ret

00002a20 <TemperaturePot::read()>:

// Force a read/poll of the temperature pot and return the value sensed [0,255] (cold to hot).
// Potentially expensive/slow.
// This value has some hysteresis applied to reduce noise.
// Not thread-safe nor usable within ISRs (Interrupt Service Routines).
uint8_t TemperaturePot::read()
    2a20:	0f 93       	push	r16
    2a22:	1f 93       	push	r17
    2a24:	cf 93       	push	r28
    2a26:	df 93       	push	r29
    2a28:	ec 01       	movw	r28, r24
  {
  // No need to wait for voltage to stablise as pot top end directly driven by IO_POWER_UP.
  power_intermittent_peripherals_enable(false);
    2a2a:	80 e0       	ldi	r24, 0x00	; 0
    2a2c:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <power_intermittent_peripherals_enable(bool)>
  const uint16_t tpRaw = analogueNoiseReducedRead(TEMP_POT_AIN, DEFAULT); // Vcc reference.
    2a30:	81 e0       	ldi	r24, 0x01	; 1
    2a32:	61 e0       	ldi	r22, 0x01	; 1
    2a34:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <analogueNoiseReducedRead(unsigned char, unsigned char)>
    2a38:	8c 01       	movw	r16, r24
  power_intermittent_peripherals_disable();
    2a3a:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <power_intermittent_peripherals_disable()>

#if defined(TEMP_POT_REVERSE)
  const uint16_t tp = TEMP_POT_RAW_MAX - tpRaw; // Travel is in opposite direction to natural!
    2a3e:	8f ef       	ldi	r24, 0xFF	; 255
    2a40:	93 e0       	ldi	r25, 0x03	; 3
    2a42:	80 1b       	sub	r24, r16
    2a44:	91 0b       	sbc	r25, r17
#endif

  // TODO: capture entropy from changed LS bits esp if reduced-noise version doesn't change.

  // Store new raw value.
  raw = tp;
    2a46:	9c 83       	std	Y+4, r25	; 0x04
    2a48:	8b 83       	std	Y+3, r24	; 0x03

  // Capture reduced-noise value with a little hysteresis.
  const uint8_t oldValue = value;
    2a4a:	3a 81       	ldd	r19, Y+2	; 0x02
  const uint8_t shifted = tp >> 2;
    2a4c:	96 95       	lsr	r25
    2a4e:	87 95       	ror	r24
    2a50:	96 95       	lsr	r25
    2a52:	87 95       	ror	r24
    2a54:	28 2f       	mov	r18, r24
  if(((shifted > oldValue) && (shifted - oldValue >= RN_HYST)) ||
    2a56:	38 17       	cp	r19, r24
    2a58:	20 f4       	brcc	.+8      	; 0x2a62 <TemperaturePot::read()+0x42>
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	83 1b       	sub	r24, r19
    2a5e:	91 09       	sbc	r25, r1
    2a60:	06 c0       	rjmp	.+12     	; 0x2a6e <TemperaturePot::read()+0x4e>
    2a62:	83 17       	cp	r24, r19
    2a64:	f8 f4       	brcc	.+62     	; 0x2aa4 <TemperaturePot::read()+0x84>
    2a66:	83 2f       	mov	r24, r19
    2a68:	90 e0       	ldi	r25, 0x00	; 0
    2a6a:	82 1b       	sub	r24, r18
    2a6c:	91 09       	sbc	r25, r1
    2a6e:	08 97       	sbiw	r24, 0x08	; 8
    2a70:	cc f0       	brlt	.+50     	; 0x2aa4 <TemperaturePot::read()+0x84>
     ((shifted < oldValue) && (oldValue - shifted >= RN_HYST)))
    {
    const uint8_t rn = (uint8_t) shifted;
    // Atomically store reduced-noise normalised value.
    value = rn;
    2a72:	2a 83       	std	Y+2, r18	; 0x02
    // Possible to get reasonable functionality without using MODE button.
    //
    // NOTE: without ignoredFirst this will also respond to the initial position of the pot
    //   as the first reading is taken, ie may force to WARM or BAKE.
    static bool ignoredFirst;
    if(!ignoredFirst) { ignoredFirst = true; }
    2a74:	80 91 28 03 	lds	r24, 0x0328
    2a78:	88 23       	and	r24, r24
    2a7a:	21 f4       	brne	.+8      	; 0x2a84 <TemperaturePot::read()+0x64>
    2a7c:	81 e0       	ldi	r24, 0x01	; 1
    2a7e:	80 93 28 03 	sts	0x0328, r24
    2a82:	10 c0       	rjmp	.+32     	; 0x2aa4 <TemperaturePot::read()+0x84>
    else
      {
      // Force FROST mode when right at bottom of dial.
      if(rn < RN_FRBO) { setWarmModeDebounced(false); }
    2a84:	20 31       	cpi	r18, 0x10	; 16
    2a86:	10 f4       	brcc	.+4      	; 0x2a8c <TemperaturePot::read()+0x6c>
    2a88:	80 e0       	ldi	r24, 0x00	; 0
    2a8a:	08 c0       	rjmp	.+16     	; 0x2a9c <TemperaturePot::read()+0x7c>
#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
      // Start BAKE mode when dial turned up to top.
      else if(rn > (255-RN_FRBO)) { startBakeDebounced(); }
    2a8c:	20 3f       	cpi	r18, 0xF0	; 240
    2a8e:	18 f0       	brcs	.+6      	; 0x2a96 <TemperaturePot::read()+0x76>
    2a90:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <startBakeDebounced()>
    2a94:	05 c0       	rjmp	.+10     	; 0x2aa0 <TemperaturePot::read()+0x80>
#endif
      // Force WARM mode if pot/temperature turned up.
      else if(rn > oldValue) { setWarmModeDebounced(true); }
    2a96:	32 17       	cp	r19, r18
    2a98:	18 f4       	brcc	.+6      	; 0x2aa0 <TemperaturePot::read()+0x80>
    2a9a:	81 e0       	ldi	r24, 0x01	; 1
    2a9c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <setWarmModeDebounced(bool)>

      // Note user operation of pot.
      markUIControlUsed(); 
    2aa0:	0e 94 e5 13 	call	0x27ca	; 0x27ca <markUIControlUsed()>
  DEBUG_SERIAL_PRINT_FLASHSTRING(", rn: ");
  DEBUG_SERIAL_PRINT(tempPotReducedNoise);
  DEBUG_SERIAL_PRINTLN();
#endif

  return(value);
    2aa4:	8a 81       	ldd	r24, Y+2	; 0x02
  }
    2aa6:	df 91       	pop	r29
    2aa8:	cf 91       	pop	r28
    2aaa:	1f 91       	pop	r17
    2aac:	0f 91       	pop	r16
    2aae:	08 95       	ret

00002ab0 <RoomTemperatureC16::read()>:

// Singleton implementation/instance.
RoomTemperatureC16 TemperatureC16;

// Temperature read uses/selects one of the implementations/sensors.
int RoomTemperatureC16::read()
    2ab0:	ef 92       	push	r14
    2ab2:	ff 92       	push	r15
    2ab4:	0f 93       	push	r16
    2ab6:	1f 93       	push	r17
    2ab8:	cf 93       	push	r28
    2aba:	df 93       	push	r29
    2abc:	7c 01       	movw	r14, r24
// The first read will initialise the device as necessary and leave it in a low-power mode afterwards.
// This will simulate a zero temperature in case of detected error talking to the sensor as fail-safe for this use.
// Check for errors at certain critical places, not everywhere.
static int TMP112_readTemperatureC16()
  {
  const bool neededPowerUp = powerUpTWIIfDisabled();
    2abe:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <powerUpTWIIfDisabled()>
    2ac2:	08 2f       	mov	r16, r24
  DEBUG_SERIAL_PRINT(neededPowerUp);
  DEBUG_SERIAL_PRINTLN();
#endif

  // Force start of new one-shot temperature measurement/conversion to complete.
  Wire.beginTransmission(TMP102_I2C_ADDR);
    2ac4:	80 e7       	ldi	r24, 0x70	; 112
    2ac6:	93 e0       	ldi	r25, 0x03	; 3
    2ac8:	68 e4       	ldi	r22, 0x48	; 72
    2aca:	70 e0       	ldi	r23, 0x00	; 0
    2acc:	0e 94 6f 16 	call	0x2cde	; 0x2cde <TwoWire::beginTransmission(int)>
  Wire.write((byte) TMP102_REG_CTRL); // Select control register.
    2ad0:	80 e7       	ldi	r24, 0x70	; 112
    2ad2:	93 e0       	ldi	r25, 0x03	; 3
    2ad4:	61 e0       	ldi	r22, 0x01	; 1
    2ad6:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <TwoWire::write(unsigned char)>
  Wire.write((byte) TMP102_CTRL_B1); // Clear OS bit.
    2ada:	80 e7       	ldi	r24, 0x70	; 112
    2adc:	93 e0       	ldi	r25, 0x03	; 3
    2ade:	61 e3       	ldi	r22, 0x31	; 49
    2ae0:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <TwoWire::write(unsigned char)>
  //Wire.write((byte) TMP102_CTRL_B2);
  Wire.endTransmission();
    2ae4:	80 e7       	ldi	r24, 0x70	; 112
    2ae6:	93 e0       	ldi	r25, 0x03	; 3
    2ae8:	0e 94 34 17 	call	0x2e68	; 0x2e68 <TwoWire::endTransmission()>
  Wire.beginTransmission(TMP102_I2C_ADDR);
    2aec:	80 e7       	ldi	r24, 0x70	; 112
    2aee:	93 e0       	ldi	r25, 0x03	; 3
    2af0:	68 e4       	ldi	r22, 0x48	; 72
    2af2:	70 e0       	ldi	r23, 0x00	; 0
    2af4:	0e 94 6f 16 	call	0x2cde	; 0x2cde <TwoWire::beginTransmission(int)>
  Wire.write((byte) TMP102_REG_CTRL); // Select control register.
    2af8:	80 e7       	ldi	r24, 0x70	; 112
    2afa:	93 e0       	ldi	r25, 0x03	; 3
    2afc:	61 e0       	ldi	r22, 0x01	; 1
    2afe:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <TwoWire::write(unsigned char)>
    void onRequest( void (*)(void) );
  
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    2b02:	80 e7       	ldi	r24, 0x70	; 112
    2b04:	93 e0       	ldi	r25, 0x03	; 3
    2b06:	61 eb       	ldi	r22, 0xB1	; 177
    2b08:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <TwoWire::write(unsigned char)>
  Wire.write((byte) TMP102_CTRL_B1 | TMP102_CTRL_B1_OS); // Start one-shot conversion.
  //Wire.write((byte) TMP102_CTRL_B2);
  if(Wire.endTransmission()) { return(0); } // Exit if error.
    2b0c:	80 e7       	ldi	r24, 0x70	; 112
    2b0e:	93 e0       	ldi	r25, 0x03	; 3
    2b10:	0e 94 34 17 	call	0x2e68	; 0x2e68 <TwoWire::endTransmission()>
    2b14:	88 23       	and	r24, r24
    2b16:	09 f0       	breq	.+2      	; 0x2b1a <RoomTemperatureC16::read()+0x6a>
    2b18:	77 c0       	rjmp	.+238    	; 0x2c08 <RoomTemperatureC16::read()+0x158>

  // Wait for temperature measurement/conversion to complete, in low-power sleep mode for the bulk of the time.
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("TMP102 waiting for conversion...");
#endif
  Wire.beginTransmission(TMP102_I2C_ADDR);
    2b1a:	80 e7       	ldi	r24, 0x70	; 112
    2b1c:	93 e0       	ldi	r25, 0x03	; 3
    2b1e:	68 e4       	ldi	r22, 0x48	; 72
    2b20:	70 e0       	ldi	r23, 0x00	; 0
    2b22:	0e 94 6f 16 	call	0x2cde	; 0x2cde <TwoWire::beginTransmission(int)>
  Wire.write((byte) TMP102_REG_CTRL); // Select control register.
    2b26:	80 e7       	ldi	r24, 0x70	; 112
    2b28:	93 e0       	ldi	r25, 0x03	; 3
    2b2a:	61 e0       	ldi	r22, 0x01	; 1
    2b2c:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <TwoWire::write(unsigned char)>
  if(Wire.endTransmission()) { return(0); } // Exit if error.
    2b30:	80 e7       	ldi	r24, 0x70	; 112
    2b32:	93 e0       	ldi	r25, 0x03	; 3
    2b34:	0e 94 34 17 	call	0x2e68	; 0x2e68 <TwoWire::endTransmission()>
    2b38:	88 23       	and	r24, r24
    2b3a:	09 f0       	breq	.+2      	; 0x2b3e <RoomTemperatureC16::read()+0x8e>
    2b3c:	65 c0       	rjmp	.+202    	; 0x2c08 <RoomTemperatureC16::read()+0x158>
    2b3e:	c8 e0       	ldi	r28, 0x08	; 8
    2b40:	d0 e0       	ldi	r29, 0x00	; 0
    2b42:	18 c0       	rjmp	.+48     	; 0x2b74 <RoomTemperatureC16::read()+0xc4>
  for(int i = 8; --i; ) // 2 orbits should generally be plenty.
    {
    if(i <= 0) { return(0); } // Exit if error.
    2b44:	1c 16       	cp	r1, r28
    2b46:	1d 06       	cpc	r1, r29
    2b48:	0c f0       	brlt	.+2      	; 0x2b4c <RoomTemperatureC16::read()+0x9c>
    2b4a:	5e c0       	rjmp	.+188    	; 0x2c08 <RoomTemperatureC16::read()+0x158>
    if(Wire.requestFrom(TMP102_I2C_ADDR, 1) != 1) { return(0); } // Exit if error.
    2b4c:	80 e7       	ldi	r24, 0x70	; 112
    2b4e:	93 e0       	ldi	r25, 0x03	; 3
    2b50:	68 e4       	ldi	r22, 0x48	; 72
    2b52:	70 e0       	ldi	r23, 0x00	; 0
    2b54:	41 e0       	ldi	r20, 0x01	; 1
    2b56:	50 e0       	ldi	r21, 0x00	; 0
    2b58:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <TwoWire::requestFrom(int, int)>
    2b5c:	81 30       	cpi	r24, 0x01	; 1
    2b5e:	09 f0       	breq	.+2      	; 0x2b62 <RoomTemperatureC16::read()+0xb2>
    2b60:	53 c0       	rjmp	.+166    	; 0x2c08 <RoomTemperatureC16::read()+0x158>
    const byte b1 = Wire.read();
    2b62:	80 e7       	ldi	r24, 0x70	; 112
    2b64:	93 e0       	ldi	r25, 0x03	; 3
    2b66:	0e 94 82 16 	call	0x2d04	; 0x2d04 <TwoWire::read()>
    if(b1 & TMP102_CTRL_B1_OS) { break; } // Conversion completed.
    2b6a:	87 fd       	sbrc	r24, 7
    2b6c:	05 c0       	rjmp	.+10     	; 0x2b78 <RoomTemperatureC16::read()+0xc8>
    nap(WDTO_15MS); // One or two of these naps should allow typical ~26ms conversion to complete...
    2b6e:	80 e0       	ldi	r24, 0x00	; 0
    2b70:	0e 94 2b 0c 	call	0x1856	; 0x1856 <nap(signed char)>
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("TMP102 waiting for conversion...");
#endif
  Wire.beginTransmission(TMP102_I2C_ADDR);
  Wire.write((byte) TMP102_REG_CTRL); // Select control register.
  if(Wire.endTransmission()) { return(0); } // Exit if error.
  for(int i = 8; --i; ) // 2 orbits should generally be plenty.
    2b74:	21 97       	sbiw	r28, 0x01	; 1
    2b76:	31 f7       	brne	.-52     	; 0x2b44 <RoomTemperatureC16::read()+0x94>

  // Fetch temperature.
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("TMP102 fetching temperature...");
#endif
  Wire.beginTransmission(TMP102_I2C_ADDR);
    2b78:	80 e7       	ldi	r24, 0x70	; 112
    2b7a:	93 e0       	ldi	r25, 0x03	; 3
    2b7c:	68 e4       	ldi	r22, 0x48	; 72
    2b7e:	70 e0       	ldi	r23, 0x00	; 0
    2b80:	0e 94 6f 16 	call	0x2cde	; 0x2cde <TwoWire::beginTransmission(int)>
  Wire.write((byte) TMP102_REG_TEMP); // Select temperature register (set ptr to 0).
    2b84:	80 e7       	ldi	r24, 0x70	; 112
    2b86:	93 e0       	ldi	r25, 0x03	; 3
    2b88:	60 e0       	ldi	r22, 0x00	; 0
    2b8a:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <TwoWire::write(unsigned char)>
  if(Wire.endTransmission()) { return(0); } // Exit if error.
    2b8e:	80 e7       	ldi	r24, 0x70	; 112
    2b90:	93 e0       	ldi	r25, 0x03	; 3
    2b92:	0e 94 34 17 	call	0x2e68	; 0x2e68 <TwoWire::endTransmission()>
    2b96:	88 23       	and	r24, r24
    2b98:	b9 f5       	brne	.+110    	; 0x2c08 <RoomTemperatureC16::read()+0x158>
  if(Wire.requestFrom(TMP102_I2C_ADDR, 2) != 2)  { return(0); }
    2b9a:	80 e7       	ldi	r24, 0x70	; 112
    2b9c:	93 e0       	ldi	r25, 0x03	; 3
    2b9e:	68 e4       	ldi	r22, 0x48	; 72
    2ba0:	70 e0       	ldi	r23, 0x00	; 0
    2ba2:	42 e0       	ldi	r20, 0x02	; 2
    2ba4:	50 e0       	ldi	r21, 0x00	; 0
    2ba6:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <TwoWire::requestFrom(int, int)>
    2baa:	82 30       	cpi	r24, 0x02	; 2
    2bac:	69 f5       	brne	.+90     	; 0x2c08 <RoomTemperatureC16::read()+0x158>
  if(Wire.endTransmission()) { return(0); } // Exit if error.
    2bae:	80 e7       	ldi	r24, 0x70	; 112
    2bb0:	93 e0       	ldi	r25, 0x03	; 3
    2bb2:	0e 94 34 17 	call	0x2e68	; 0x2e68 <TwoWire::endTransmission()>
    2bb6:	88 23       	and	r24, r24
    2bb8:	39 f5       	brne	.+78     	; 0x2c08 <RoomTemperatureC16::read()+0x158>

  const byte b1 = Wire.read(); // MSByte, should be signed whole degrees C.
    2bba:	80 e7       	ldi	r24, 0x70	; 112
    2bbc:	93 e0       	ldi	r25, 0x03	; 3
    2bbe:	0e 94 82 16 	call	0x2d04	; 0x2d04 <TwoWire::read()>
    2bc2:	18 2f       	mov	r17, r24
  const uint8_t b2 = Wire.read(); // Avoid sign extension...
    2bc4:	80 e7       	ldi	r24, 0x70	; 112
    2bc6:	93 e0       	ldi	r25, 0x03	; 3
    2bc8:	0e 94 82 16 	call	0x2d04	; 0x2d04 <TwoWire::read()>

  // Builds 12-bit value (assumes not in extended mode) and sign-extends if necessary for sub-zero temps.
  const int t16 = (b1 << 4) | (b2 >> 4) | ((b1 & 0x80) ? 0xf000 : 0);
    2bcc:	17 fd       	sbrc	r17, 7
    2bce:	03 c0       	rjmp	.+6      	; 0x2bd6 <RoomTemperatureC16::read()+0x126>
    2bd0:	20 e0       	ldi	r18, 0x00	; 0
    2bd2:	30 e0       	ldi	r19, 0x00	; 0
    2bd4:	02 c0       	rjmp	.+4      	; 0x2bda <RoomTemperatureC16::read()+0x12a>
    2bd6:	20 e0       	ldi	r18, 0x00	; 0
    2bd8:	30 ef       	ldi	r19, 0xF0	; 240
    2bda:	c8 2f       	mov	r28, r24
    2bdc:	d0 e0       	ldi	r29, 0x00	; 0
    2bde:	54 e0       	ldi	r21, 0x04	; 4
    2be0:	d5 95       	asr	r29
    2be2:	c7 95       	ror	r28
    2be4:	5a 95       	dec	r21
    2be6:	e1 f7       	brne	.-8      	; 0x2be0 <RoomTemperatureC16::read()+0x130>
    2be8:	81 2f       	mov	r24, r17
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	44 e0       	ldi	r20, 0x04	; 4
    2bee:	88 0f       	add	r24, r24
    2bf0:	99 1f       	adc	r25, r25
    2bf2:	4a 95       	dec	r20
    2bf4:	e1 f7       	brne	.-8      	; 0x2bee <RoomTemperatureC16::read()+0x13e>
    2bf6:	c8 2b       	or	r28, r24
    2bf8:	d9 2b       	or	r29, r25
    2bfa:	c2 2b       	or	r28, r18
    2bfc:	d3 2b       	or	r29, r19
  DEBUG_SERIAL_PRINT_FLASHSTRING("C / ");
  DEBUG_SERIAL_PRINT(temp16);
  DEBUG_SERIAL_PRINTLN();
#endif

  if(neededPowerUp) { powerDownTWI(); }
    2bfe:	00 23       	and	r16, r16
    2c00:	29 f0       	breq	.+10     	; 0x2c0c <RoomTemperatureC16::read()+0x15c>
    2c02:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <powerDownTWI()>
    2c06:	02 c0       	rjmp	.+4      	; 0x2c0c <RoomTemperatureC16::read()+0x15c>
    2c08:	c0 e0       	ldi	r28, 0x00	; 0
    2c0a:	d0 e0       	ldi	r29, 0x00	; 0
  const int raw = Sensor_SHT21_readTemperatureC16();
#else
  const int raw = TMP112_readTemperatureC16();
#endif

  value = raw;
    2c0c:	f7 01       	movw	r30, r14
    2c0e:	d3 83       	std	Z+3, r29	; 0x03
    2c10:	c2 83       	std	Z+2, r28	; 0x02
  return(value);
  }
    2c12:	ce 01       	movw	r24, r28
    2c14:	df 91       	pop	r29
    2c16:	cf 91       	pop	r28
    2c18:	1f 91       	pop	r17
    2c1a:	0f 91       	pop	r16
    2c1c:	ff 90       	pop	r15
    2c1e:	ef 90       	pop	r14
    2c20:	08 95       	ret

00002c22 <AmbientLight::read()>:
// Measure/store/return the current room ambient light levels in range [0,1023].
// This may consume significant power and time.
// Probably no need to do this more than (say) once per minute.
// This implementation expects LDR (1M dark resistance) from IO_POWER_UP to LDR_SENSOR_AIN and 100k to ground.
// (Not intended to be called from ISR.)
uint8_t AmbientLight::read()
    2c22:	0f 93       	push	r16
    2c24:	1f 93       	push	r17
    2c26:	cf 93       	push	r28
    2c28:	df 93       	push	r29
    2c2a:	ec 01       	movw	r28, r24
  {
  power_intermittent_peripherals_enable(false); // No need to wait for anything to stablise as direct of IO_POWER_UP.
    2c2c:	80 e0       	ldi	r24, 0x00	; 0
    2c2e:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <power_intermittent_peripherals_enable(bool)>
  const uint16_t al0 = analogueNoiseReducedRead(LDR_SENSOR_AIN, ALREFERENCE);
    2c32:	80 e0       	ldi	r24, 0x00	; 0
    2c34:	61 e0       	ldi	r22, 0x01	; 1
    2c36:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <analogueNoiseReducedRead(unsigned char, unsigned char)>
    2c3a:	8c 01       	movw	r16, r24
    }
  else { al = al0; }
#else
  const uint16_t al = al0;
#endif
  power_intermittent_peripherals_disable();
    2c3c:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <power_intermittent_peripherals_disable()>

  // Capture entropy from changed LS bits.
  if((uint8_t)al != (uint8_t)rawValue) { addEntropyToPool((uint8_t)al ^ (uint8_t)rawValue, 0); } // Claim zero entropy as may be forced by Eve.
    2c40:	80 2f       	mov	r24, r16
    2c42:	9b 81       	ldd	r25, Y+3	; 0x03
    2c44:	09 17       	cp	r16, r25
    2c46:	21 f0       	breq	.+8      	; 0x2c50 <AmbientLight::read()+0x2e>
    2c48:	89 27       	eor	r24, r25
    2c4a:	60 e0       	ldi	r22, 0x00	; 0
    2c4c:	0e 94 08 13 	call	0x2610	; 0x2610 <addEntropyToPool(unsigned char, unsigned char)>

  // Adjust room-lit flag, with hysteresis.
  if(al <= LDR_THR_LOW)
    2c50:	03 33       	cpi	r16, 0x33	; 51
    2c52:	11 05       	cpc	r17, r1
    2c54:	38 f4       	brcc	.+14     	; 0x2c64 <AmbientLight::read()+0x42>
    {
    isRoomLitFlag = false;
    2c56:	1d 82       	std	Y+5, r1	; 0x05
    // If dark enough to isRoomLitFlag false then increment counter.
    if(darkTicks < 255) { ++darkTicks; }
    2c58:	8e 81       	ldd	r24, Y+6	; 0x06
    2c5a:	8f 3f       	cpi	r24, 0xFF	; 255
    2c5c:	e1 f0       	breq	.+56     	; 0x2c96 <AmbientLight::read()+0x74>
    2c5e:	8f 5f       	subi	r24, 0xFF	; 255
    2c60:	8e 83       	std	Y+6, r24	; 0x06
    2c62:	19 c0       	rjmp	.+50     	; 0x2c96 <AmbientLight::read()+0x74>
    }
  else if(al > LDR_THR_HIGH)
    2c64:	07 34       	cpi	r16, 0x47	; 71
    2c66:	11 05       	cpc	r17, r1
    2c68:	b0 f0       	brcs	.+44     	; 0x2c96 <AmbientLight::read()+0x74>
    {
    // Treat a sharp transition from dark to light as a possible/weak indication of occupancy, eg light flicked on.
    // Ignore trigger at start-up.
    static bool ignoreFirst;
    if(!ignoreFirst) { ignoreFirst = true; }
    2c6a:	80 91 29 03 	lds	r24, 0x0329
    2c6e:	88 23       	and	r24, r24
    2c70:	21 f4       	brne	.+8      	; 0x2c7a <AmbientLight::read()+0x58>
    2c72:	81 e0       	ldi	r24, 0x01	; 1
    2c74:	80 93 29 03 	sts	0x0329, r24
    2c78:	0b c0       	rjmp	.+22     	; 0x2c90 <AmbientLight::read()+0x6e>
    else if((!isRoomLitFlag) && (rawValue < LDR_THR_LOW)) { Occupancy.markAsPossiblyOccupied(); }
    2c7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c7c:	88 23       	and	r24, r24
    2c7e:	41 f4       	brne	.+16     	; 0x2c90 <AmbientLight::read()+0x6e>
    2c80:	8b 81       	ldd	r24, Y+3	; 0x03
    2c82:	9c 81       	ldd	r25, Y+4	; 0x04
    2c84:	c2 97       	sbiw	r24, 0x32	; 50
    2c86:	20 f4       	brcc	.+8      	; 0x2c90 <AmbientLight::read()+0x6e>
    2c88:	89 ef       	ldi	r24, 0xF9	; 249
    2c8a:	91 e0       	ldi	r25, 0x01	; 1
    2c8c:	0e 94 6f 02 	call	0x4de	; 0x4de <OccupancyTracker::markAsPossiblyOccupied()>
    isRoomLitFlag = true;
    2c90:	81 e0       	ldi	r24, 0x01	; 1
    2c92:	8d 83       	std	Y+5, r24	; 0x05
    // If light enough to isRoomLitFlag true then reset counter.
    darkTicks = 0;
    2c94:	1e 82       	std	Y+6, r1	; 0x06
    }

  // Store new value, raw and normalised.
  // Unconditionbally store raw value.
  rawValue = al;
    2c96:	1c 83       	std	Y+4, r17	; 0x04
    2c98:	0b 83       	std	Y+3, r16	; 0x03
  // Apply a little bit of noise reduction (hysteresis) to the normalised version.
  const uint8_t newValue = (uint8_t)(al >> 2);
    2c9a:	c8 01       	movw	r24, r16
    2c9c:	96 95       	lsr	r25
    2c9e:	87 95       	ror	r24
    2ca0:	96 95       	lsr	r25
    2ca2:	87 95       	ror	r24
    2ca4:	28 2f       	mov	r18, r24
  if(newValue != value)
    2ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca8:	28 17       	cp	r18, r24
    2caa:	99 f0       	breq	.+38     	; 0x2cd2 <AmbientLight::read()+0xb0>
    {
    const uint16_t oldRawImplied = ((uint16_t)value) << 2;
    2cac:	8a 81       	ldd	r24, Y+2	; 0x02
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	88 0f       	add	r24, r24
    2cb2:	99 1f       	adc	r25, r25
    2cb4:	88 0f       	add	r24, r24
    2cb6:	99 1f       	adc	r25, r25
    const uint16_t absDiff = (oldRawImplied > al) ? (oldRawImplied - al) : (al - oldRawImplied);
    2cb8:	08 17       	cp	r16, r24
    2cba:	19 07       	cpc	r17, r25
    2cbc:	18 f4       	brcc	.+6      	; 0x2cc4 <AmbientLight::read()+0xa2>
    2cbe:	80 1b       	sub	r24, r16
    2cc0:	91 0b       	sbc	r25, r17
    2cc2:	04 c0       	rjmp	.+8      	; 0x2ccc <AmbientLight::read()+0xaa>
    2cc4:	a8 01       	movw	r20, r16
    2cc6:	48 1b       	sub	r20, r24
    2cc8:	59 0b       	sbc	r21, r25
    2cca:	ca 01       	movw	r24, r20
    if(absDiff > 2) { value = newValue; }
    2ccc:	03 97       	sbiw	r24, 0x03	; 3
    2cce:	08 f0       	brcs	.+2      	; 0x2cd2 <AmbientLight::read()+0xb0>
    2cd0:	2a 83       	std	Y+2, r18	; 0x02
  DEBUG_SERIAL_PRINT_FLASHSTRING("isRoomLit: ");
  DEBUG_SERIAL_PRINT(isRoomLitFlag);
  DEBUG_SERIAL_PRINTLN();
#endif

  return(value);
    2cd2:	8a 81       	ldd	r24, Y+2	; 0x02
  }
    2cd4:	df 91       	pop	r29
    2cd6:	cf 91       	pop	r28
    2cd8:	1f 91       	pop	r17
    2cda:	0f 91       	pop	r16
    2cdc:	08 95       	ret

00002cde <TwoWire::beginTransmission(int)>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    2cde:	81 e0       	ldi	r24, 0x01	; 1
    2ce0:	80 93 6f 03 	sts	0x036F, r24
  // set address of targeted slave
  txAddress = address;
    2ce4:	60 93 4c 03 	sts	0x034C, r22
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    2ce8:	10 92 6d 03 	sts	0x036D, r1
  txBufferLength = 0;
    2cec:	10 92 6e 03 	sts	0x036E, r1
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
}
    2cf0:	08 95       	ret

00002cf2 <TwoWire::available()>:
}

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
    2cf2:	20 91 4b 03 	lds	r18, 0x034B
    2cf6:	30 e0       	ldi	r19, 0x00	; 0
    2cf8:	80 91 4a 03 	lds	r24, 0x034A
    2cfc:	28 1b       	sub	r18, r24
    2cfe:	31 09       	sbc	r19, r1
{
  return rxBufferLength - rxBufferIndex;
}
    2d00:	c9 01       	movw	r24, r18
    2d02:	08 95       	ret

00002d04 <TwoWire::read()>:
int TwoWire::read(void)
{
  int value = -1;
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    2d04:	40 91 4a 03 	lds	r20, 0x034A
    2d08:	80 91 4b 03 	lds	r24, 0x034B
    2d0c:	48 17       	cp	r20, r24
    2d0e:	18 f0       	brcs	.+6      	; 0x2d16 <TwoWire::read()+0x12>
    2d10:	2f ef       	ldi	r18, 0xFF	; 255
    2d12:	3f ef       	ldi	r19, 0xFF	; 255
    2d14:	0a c0       	rjmp	.+20     	; 0x2d2a <TwoWire::read()+0x26>
    value = rxBuffer[rxBufferIndex];
    2d16:	e4 2f       	mov	r30, r20
    2d18:	f0 e0       	ldi	r31, 0x00	; 0
    2d1a:	e6 5d       	subi	r30, 0xD6	; 214
    2d1c:	fc 4f       	sbci	r31, 0xFC	; 252
    2d1e:	80 81       	ld	r24, Z
    2d20:	28 2f       	mov	r18, r24
    2d22:	30 e0       	ldi	r19, 0x00	; 0
    ++rxBufferIndex;
    2d24:	4f 5f       	subi	r20, 0xFF	; 255
    2d26:	40 93 4a 03 	sts	0x034A, r20
  }

  return value;
}
    2d2a:	c9 01       	movw	r24, r18
    2d2c:	08 95       	ret

00002d2e <TwoWire::peek()>:
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
  
  if(rxBufferIndex < rxBufferLength){
    2d2e:	e0 91 4a 03 	lds	r30, 0x034A
    2d32:	80 91 4b 03 	lds	r24, 0x034B
    2d36:	e8 17       	cp	r30, r24
    2d38:	18 f0       	brcs	.+6      	; 0x2d40 <TwoWire::peek()+0x12>
    2d3a:	ef ef       	ldi	r30, 0xFF	; 255
    2d3c:	ff ef       	ldi	r31, 0xFF	; 255
    2d3e:	06 c0       	rjmp	.+12     	; 0x2d4c <TwoWire::peek()+0x1e>
    value = rxBuffer[rxBufferIndex];
    2d40:	f0 e0       	ldi	r31, 0x00	; 0
    2d42:	e6 5d       	subi	r30, 0xD6	; 214
    2d44:	fc 4f       	sbci	r31, 0xFC	; 252
    2d46:	80 81       	ld	r24, Z
    2d48:	e8 2f       	mov	r30, r24
    2d4a:	f0 e0       	ldi	r31, 0x00	; 0
  }

  return value;
}
    2d4c:	cf 01       	movw	r24, r30
    2d4e:	08 95       	ret

00002d50 <TwoWire::flush()>:

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
    2d50:	08 95       	ret

00002d52 <global constructors keyed to _ZN7TwoWire8rxBufferE>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    2d52:	10 92 73 03 	sts	0x0373, r1
    2d56:	10 92 72 03 	sts	0x0372, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    2d5a:	88 ee       	ldi	r24, 0xE8	; 232
    2d5c:	93 e0       	ldi	r25, 0x03	; 3
    2d5e:	a0 e0       	ldi	r26, 0x00	; 0
    2d60:	b0 e0       	ldi	r27, 0x00	; 0
    2d62:	80 93 74 03 	sts	0x0374, r24
    2d66:	90 93 75 03 	sts	0x0375, r25
    2d6a:	a0 93 76 03 	sts	0x0376, r26
    2d6e:	b0 93 77 03 	sts	0x0377, r27
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    2d72:	8b ed       	ldi	r24, 0xDB	; 219
    2d74:	91 e0       	ldi	r25, 0x01	; 1
    2d76:	90 93 71 03 	sts	0x0371, r25
    2d7a:	80 93 70 03 	sts	0x0370, r24
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2d7e:	08 95       	ret

00002d80 <TwoWire::write(unsigned char const*, unsigned int)>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
    2d80:	cf 92       	push	r12
    2d82:	df 92       	push	r13
    2d84:	ef 92       	push	r14
    2d86:	ff 92       	push	r15
    2d88:	0f 93       	push	r16
    2d8a:	1f 93       	push	r17
    2d8c:	cf 93       	push	r28
    2d8e:	df 93       	push	r29
    2d90:	7c 01       	movw	r14, r24
    2d92:	6b 01       	movw	r12, r22
    2d94:	8a 01       	movw	r16, r20
{
  if(transmitting){
    2d96:	80 91 6f 03 	lds	r24, 0x036F
    2d9a:	88 23       	and	r24, r24
    2d9c:	a1 f0       	breq	.+40     	; 0x2dc6 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
    2d9e:	c0 e0       	ldi	r28, 0x00	; 0
    2da0:	d0 e0       	ldi	r29, 0x00	; 0
    2da2:	0d c0       	rjmp	.+26     	; 0x2dbe <TwoWire::write(unsigned char const*, unsigned int)+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
      write(data[i]);
    2da4:	d7 01       	movw	r26, r14
    2da6:	ed 91       	ld	r30, X+
    2da8:	fc 91       	ld	r31, X
    2daa:	d6 01       	movw	r26, r12
    2dac:	ac 0f       	add	r26, r28
    2dae:	bd 1f       	adc	r27, r29
    2db0:	01 90       	ld	r0, Z+
    2db2:	f0 81       	ld	r31, Z
    2db4:	e0 2d       	mov	r30, r0
    2db6:	c7 01       	movw	r24, r14
    2db8:	6c 91       	ld	r22, X
    2dba:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    2dbc:	21 96       	adiw	r28, 0x01	; 1
    2dbe:	c0 17       	cp	r28, r16
    2dc0:	d1 07       	cpc	r29, r17
    2dc2:	80 f3       	brcs	.-32     	; 0x2da4 <TwoWire::write(unsigned char const*, unsigned int)+0x24>
    2dc4:	04 c0       	rjmp	.+8      	; 0x2dce <TwoWire::write(unsigned char const*, unsigned int)+0x4e>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    2dc6:	cb 01       	movw	r24, r22
    2dc8:	64 2f       	mov	r22, r20
    2dca:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <twi_transmit>
  }
  return quantity;
}
    2dce:	c8 01       	movw	r24, r16
    2dd0:	df 91       	pop	r29
    2dd2:	cf 91       	pop	r28
    2dd4:	1f 91       	pop	r17
    2dd6:	0f 91       	pop	r16
    2dd8:	ff 90       	pop	r15
    2dda:	ef 90       	pop	r14
    2ddc:	df 90       	pop	r13
    2dde:	cf 90       	pop	r12
    2de0:	08 95       	ret

00002de2 <TwoWire::write(unsigned char)>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
    2de2:	df 93       	push	r29
    2de4:	cf 93       	push	r28
    2de6:	0f 92       	push	r0
    2de8:	cd b7       	in	r28, 0x3d	; 61
    2dea:	de b7       	in	r29, 0x3e	; 62
    2dec:	fc 01       	movw	r30, r24
    2dee:	69 83       	std	Y+1, r22	; 0x01
{
  if(transmitting){
    2df0:	80 91 6f 03 	lds	r24, 0x036F
    2df4:	88 23       	and	r24, r24
    2df6:	c9 f0       	breq	.+50     	; 0x2e2a <TwoWire::write(unsigned char)+0x48>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    2df8:	80 91 6e 03 	lds	r24, 0x036E
    2dfc:	80 32       	cpi	r24, 0x20	; 32
    2dfe:	38 f0       	brcs	.+14     	; 0x2e0e <TwoWire::write(unsigned char)+0x2c>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    2e00:	81 e0       	ldi	r24, 0x01	; 1
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	93 83       	std	Z+3, r25	; 0x03
    2e06:	82 83       	std	Z+2, r24	; 0x02
    2e08:	20 e0       	ldi	r18, 0x00	; 0
    2e0a:	30 e0       	ldi	r19, 0x00	; 0
    2e0c:	15 c0       	rjmp	.+42     	; 0x2e38 <TwoWire::write(unsigned char)+0x56>
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    2e0e:	80 91 6d 03 	lds	r24, 0x036D
    2e12:	e8 2f       	mov	r30, r24
    2e14:	f0 e0       	ldi	r31, 0x00	; 0
    2e16:	e3 5b       	subi	r30, 0xB3	; 179
    2e18:	fc 4f       	sbci	r31, 0xFC	; 252
    2e1a:	99 81       	ldd	r25, Y+1	; 0x01
    2e1c:	90 83       	st	Z, r25
    ++txBufferIndex;
    2e1e:	8f 5f       	subi	r24, 0xFF	; 255
    2e20:	80 93 6d 03 	sts	0x036D, r24
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    2e24:	80 93 6e 03 	sts	0x036E, r24
    2e28:	05 c0       	rjmp	.+10     	; 0x2e34 <TwoWire::write(unsigned char)+0x52>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    2e2a:	ce 01       	movw	r24, r28
    2e2c:	01 96       	adiw	r24, 0x01	; 1
    2e2e:	61 e0       	ldi	r22, 0x01	; 1
    2e30:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <twi_transmit>
    2e34:	21 e0       	ldi	r18, 0x01	; 1
    2e36:	30 e0       	ldi	r19, 0x00	; 0
  }
  return 1;
}
    2e38:	c9 01       	movw	r24, r18
    2e3a:	0f 90       	pop	r0
    2e3c:	cf 91       	pop	r28
    2e3e:	df 91       	pop	r29
    2e40:	08 95       	ret

00002e42 <TwoWire::endTransmission(unsigned char)>:
//	the bus tenure has been properly ended with a STOP. It
//	is very possible to leave the bus in a hung state if
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
    2e42:	0f 93       	push	r16
    2e44:	06 2f       	mov	r16, r22
{
  // transmit buffer (blocking)
  int8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    2e46:	80 91 4c 03 	lds	r24, 0x034C
    2e4a:	6d e4       	ldi	r22, 0x4D	; 77
    2e4c:	73 e0       	ldi	r23, 0x03	; 3
    2e4e:	40 91 6e 03 	lds	r20, 0x036E
    2e52:	21 e0       	ldi	r18, 0x01	; 1
    2e54:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <twi_writeTo>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    2e58:	10 92 6d 03 	sts	0x036D, r1
  txBufferLength = 0;
    2e5c:	10 92 6e 03 	sts	0x036E, r1
  // indicate that we are done transmitting
  transmitting = 0;
    2e60:	10 92 6f 03 	sts	0x036F, r1
  return ret;
}
    2e64:	0f 91       	pop	r16
    2e66:	08 95       	ret

00002e68 <TwoWire::endTransmission()>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
    2e68:	61 e0       	ldi	r22, 0x01	; 1
    2e6a:	0e 94 21 17 	call	0x2e42	; 0x2e42 <TwoWire::endTransmission(unsigned char)>
}
    2e6e:	08 95       	ret

00002e70 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    quantity = BUFFER_LENGTH;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
    2e70:	41 32       	cpi	r20, 0x21	; 33
    2e72:	08 f0       	brcs	.+2      	; 0x2e76 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x6>
    2e74:	40 e2       	ldi	r20, 0x20	; 32
    2e76:	86 2f       	mov	r24, r22
    2e78:	6a e2       	ldi	r22, 0x2A	; 42
    2e7a:	73 e0       	ldi	r23, 0x03	; 3
    2e7c:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <twi_readFrom>
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    2e80:	10 92 4a 03 	sts	0x034A, r1
  rxBufferLength = read;
    2e84:	80 93 4b 03 	sts	0x034B, r24

  return read;
}
    2e88:	08 95       	ret

00002e8a <TwoWire::requestFrom(int, int)>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    2e8a:	21 e0       	ldi	r18, 0x01	; 1
    2e8c:	0e 94 38 17 	call	0x2e70	; 0x2e70 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
}
    2e90:	08 95       	ret

00002e92 <TwoWire::begin()>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    2e92:	10 92 4a 03 	sts	0x034A, r1
  rxBufferLength = 0;
    2e96:	10 92 4b 03 	sts	0x034B, r1

  txBufferIndex = 0;
    2e9a:	10 92 6d 03 	sts	0x036D, r1
  txBufferLength = 0;
    2e9e:	10 92 6e 03 	sts	0x036E, r1

  twi_init();
    2ea2:	0e 94 9e 19 	call	0x333c	; 0x333c <twi_init>
}
    2ea6:	08 95       	ret

00002ea8 <twi_readFrom>:
 *          length: number of bytes to read into array
 *          sendStop: Boolean indicating whether to send a stop at the end
 * Output   number of bytes read
 */
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
    2ea8:	38 2f       	mov	r19, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    2eaa:	41 32       	cpi	r20, 0x21	; 33
    2eac:	10 f0       	brcs	.+4      	; 0x2eb2 <twi_readFrom+0xa>
    2eae:	40 e0       	ldi	r20, 0x00	; 0
    2eb0:	42 c0       	rjmp	.+132    	; 0x2f36 <twi_readFrom+0x8e>
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    2eb2:	80 91 7c 03 	lds	r24, 0x037C
    2eb6:	88 23       	and	r24, r24
    2eb8:	e1 f7       	brne	.-8      	; 0x2eb2 <twi_readFrom+0xa>
    continue;
  }
  twi_state = TWI_MRX;
    2eba:	91 e0       	ldi	r25, 0x01	; 1
    2ebc:	90 93 7c 03 	sts	0x037C, r25
  twi_sendStop = sendStop;
    2ec0:	20 93 7e 03 	sts	0x037E, r18
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    2ec4:	8f ef       	ldi	r24, 0xFF	; 255
    2ec6:	80 93 e9 03 	sts	0x03E9, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    2eca:	10 92 a4 03 	sts	0x03A4, r1
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    2ece:	41 50       	subi	r20, 0x01	; 1
    2ed0:	40 93 a5 03 	sts	0x03A5, r20
    2ed4:	4f 5f       	subi	r20, 0xFF	; 255
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    2ed6:	90 93 7d 03 	sts	0x037D, r25
  twi_slarw |= address << 1;
    2eda:	80 91 7d 03 	lds	r24, 0x037D
    2ede:	33 0f       	add	r19, r19
    2ee0:	83 2b       	or	r24, r19
    2ee2:	80 93 7d 03 	sts	0x037D, r24

  if (true == twi_inRepStart) {
    2ee6:	80 91 7f 03 	lds	r24, 0x037F
    2eea:	81 30       	cpi	r24, 0x01	; 1
    2eec:	41 f4       	brne	.+16     	; 0x2efe <twi_readFrom+0x56>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    2eee:	10 92 7f 03 	sts	0x037F, r1
    TWDR = twi_slarw;
    2ef2:	80 91 7d 03 	lds	r24, 0x037D
    2ef6:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    2efa:	85 ec       	ldi	r24, 0xC5	; 197
    2efc:	01 c0       	rjmp	.+2      	; 0x2f00 <twi_readFrom+0x58>
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    2efe:	85 ee       	ldi	r24, 0xE5	; 229
    2f00:	80 93 bc 00 	sts	0x00BC, r24

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    2f04:	80 91 7c 03 	lds	r24, 0x037C
    2f08:	81 30       	cpi	r24, 0x01	; 1
    2f0a:	e1 f3       	breq	.-8      	; 0x2f04 <twi_readFrom+0x5c>
    continue;
  }

  if (twi_masterBufferIndex < length)
    2f0c:	80 91 a4 03 	lds	r24, 0x03A4
    2f10:	84 17       	cp	r24, r20
    2f12:	10 f4       	brcc	.+4      	; 0x2f18 <twi_readFrom+0x70>
    length = twi_masterBufferIndex;
    2f14:	40 91 a4 03 	lds	r20, 0x03A4
    2f18:	20 e0       	ldi	r18, 0x00	; 0
    2f1a:	30 e0       	ldi	r19, 0x00	; 0
    2f1c:	0a c0       	rjmp	.+20     	; 0x2f32 <twi_readFrom+0x8a>

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
    2f1e:	fb 01       	movw	r30, r22
    2f20:	e2 0f       	add	r30, r18
    2f22:	f3 1f       	adc	r31, r19
    2f24:	d9 01       	movw	r26, r18
    2f26:	ac 57       	subi	r26, 0x7C	; 124
    2f28:	bc 4f       	sbci	r27, 0xFC	; 252
    2f2a:	8c 91       	ld	r24, X
    2f2c:	80 83       	st	Z, r24
    2f2e:	2f 5f       	subi	r18, 0xFF	; 255
    2f30:	3f 4f       	sbci	r19, 0xFF	; 255

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    2f32:	24 17       	cp	r18, r20
    2f34:	a0 f3       	brcs	.-24     	; 0x2f1e <twi_readFrom+0x76>
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
}
    2f36:	84 2f       	mov	r24, r20
    2f38:	08 95       	ret

00002f3a <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
    2f3a:	0f 93       	push	r16
    2f3c:	1f 93       	push	r17
    2f3e:	58 2f       	mov	r21, r24
    2f40:	12 2f       	mov	r17, r18
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    2f42:	41 32       	cpi	r20, 0x21	; 33
    2f44:	10 f0       	brcs	.+4      	; 0x2f4a <twi_writeTo+0x10>
    2f46:	81 e0       	ldi	r24, 0x01	; 1
    2f48:	4a c0       	rjmp	.+148    	; 0x2fde <twi_writeTo+0xa4>
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    2f4a:	80 91 7c 03 	lds	r24, 0x037C
    2f4e:	88 23       	and	r24, r24
    2f50:	e1 f7       	brne	.-8      	; 0x2f4a <twi_writeTo+0x10>
    continue;
  }
  twi_state = TWI_MTX;
    2f52:	82 e0       	ldi	r24, 0x02	; 2
    2f54:	80 93 7c 03 	sts	0x037C, r24
  twi_sendStop = sendStop;
    2f58:	00 93 7e 03 	sts	0x037E, r16
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    2f5c:	8f ef       	ldi	r24, 0xFF	; 255
    2f5e:	80 93 e9 03 	sts	0x03E9, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    2f62:	10 92 a4 03 	sts	0x03A4, r1
  twi_masterBufferLength = length;
    2f66:	40 93 a5 03 	sts	0x03A5, r20
    2f6a:	a4 e8       	ldi	r26, 0x84	; 132
    2f6c:	b3 e0       	ldi	r27, 0x03	; 3
    2f6e:	fb 01       	movw	r30, r22
    2f70:	02 c0       	rjmp	.+4      	; 0x2f76 <twi_writeTo+0x3c>
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
    2f72:	81 91       	ld	r24, Z+
    2f74:	8d 93       	st	X+, r24
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    2f76:	8e 2f       	mov	r24, r30
    2f78:	86 1b       	sub	r24, r22
    2f7a:	84 17       	cp	r24, r20
    2f7c:	d0 f3       	brcs	.-12     	; 0x2f72 <twi_writeTo+0x38>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    2f7e:	10 92 7d 03 	sts	0x037D, r1
  twi_slarw |= address << 1;
    2f82:	80 91 7d 03 	lds	r24, 0x037D
    2f86:	55 0f       	add	r21, r21
    2f88:	85 2b       	or	r24, r21
    2f8a:	80 93 7d 03 	sts	0x037D, r24
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    2f8e:	80 91 7f 03 	lds	r24, 0x037F
    2f92:	81 30       	cpi	r24, 0x01	; 1
    2f94:	41 f4       	brne	.+16     	; 0x2fa6 <twi_writeTo+0x6c>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    2f96:	10 92 7f 03 	sts	0x037F, r1
    TWDR = twi_slarw;				
    2f9a:	80 91 7d 03 	lds	r24, 0x037D
    2f9e:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    2fa2:	85 ec       	ldi	r24, 0xC5	; 197
    2fa4:	01 c0       	rjmp	.+2      	; 0x2fa8 <twi_writeTo+0x6e>
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
    2fa6:	85 ee       	ldi	r24, 0xE5	; 229
    2fa8:	80 93 bc 00 	sts	0x00BC, r24

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    2fac:	11 23       	and	r17, r17
    2fae:	21 f0       	breq	.+8      	; 0x2fb8 <twi_writeTo+0x7e>
    2fb0:	80 91 7c 03 	lds	r24, 0x037C
    2fb4:	82 30       	cpi	r24, 0x02	; 2
    2fb6:	e1 f3       	breq	.-8      	; 0x2fb0 <twi_writeTo+0x76>
    continue;
  }
  
  if (twi_error == 0xFF)
    2fb8:	80 91 e9 03 	lds	r24, 0x03E9
    2fbc:	8f 3f       	cpi	r24, 0xFF	; 255
    2fbe:	11 f4       	brne	.+4      	; 0x2fc4 <twi_writeTo+0x8a>
    2fc0:	80 e0       	ldi	r24, 0x00	; 0
    2fc2:	0d c0       	rjmp	.+26     	; 0x2fde <twi_writeTo+0xa4>
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    2fc4:	80 91 e9 03 	lds	r24, 0x03E9
    2fc8:	80 32       	cpi	r24, 0x20	; 32
    2fca:	11 f4       	brne	.+4      	; 0x2fd0 <twi_writeTo+0x96>
    2fcc:	82 e0       	ldi	r24, 0x02	; 2
    2fce:	07 c0       	rjmp	.+14     	; 0x2fde <twi_writeTo+0xa4>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    2fd0:	80 91 e9 03 	lds	r24, 0x03E9
    2fd4:	80 33       	cpi	r24, 0x30	; 48
    2fd6:	11 f0       	breq	.+4      	; 0x2fdc <twi_writeTo+0xa2>
    2fd8:	84 e0       	ldi	r24, 0x04	; 4
    2fda:	01 c0       	rjmp	.+2      	; 0x2fde <twi_writeTo+0xa4>
    2fdc:	83 e0       	ldi	r24, 0x03	; 3
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
}
    2fde:	1f 91       	pop	r17
    2fe0:	0f 91       	pop	r16
    2fe2:	08 95       	ret

00002fe4 <twi_transmit>:
 * Output   1 length too long for buffer
 *          2 not slave transmitter
 *          0 ok
 */
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
    2fe4:	48 2f       	mov	r20, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    2fe6:	61 32       	cpi	r22, 0x21	; 33
    2fe8:	10 f0       	brcs	.+4      	; 0x2fee <twi_transmit+0xa>
    2fea:	81 e0       	ldi	r24, 0x01	; 1
    2fec:	08 95       	ret
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    2fee:	80 91 7c 03 	lds	r24, 0x037C
    2ff2:	84 30       	cpi	r24, 0x04	; 4
    2ff4:	11 f0       	breq	.+4      	; 0x2ffa <twi_transmit+0x16>
    2ff6:	82 e0       	ldi	r24, 0x02	; 2
    2ff8:	08 95       	ret
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
    2ffa:	60 93 c7 03 	sts	0x03C7, r22
    2ffe:	a6 ea       	ldi	r26, 0xA6	; 166
    3000:	b3 e0       	ldi	r27, 0x03	; 3
    3002:	84 2f       	mov	r24, r20
    3004:	9c 01       	movw	r18, r24
    3006:	f9 01       	movw	r30, r18
    3008:	02 c0       	rjmp	.+4      	; 0x300e <twi_transmit+0x2a>
  for(i = 0; i < length; ++i){
    twi_txBuffer[i] = data[i];
    300a:	81 91       	ld	r24, Z+
    300c:	8d 93       	st	X+, r24
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
    300e:	8e 2f       	mov	r24, r30
    3010:	84 1b       	sub	r24, r20
    3012:	86 17       	cp	r24, r22
    3014:	d0 f3       	brcs	.-12     	; 0x300a <twi_transmit+0x26>
    3016:	80 e0       	ldi	r24, 0x00	; 0
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
}
    3018:	08 95       	ret

0000301a <__vector_24>:
  // update twi state
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
    301a:	1f 92       	push	r1
    301c:	0f 92       	push	r0
    301e:	0f b6       	in	r0, 0x3f	; 63
    3020:	0f 92       	push	r0
    3022:	11 24       	eor	r1, r1
    3024:	2f 93       	push	r18
    3026:	3f 93       	push	r19
    3028:	4f 93       	push	r20
    302a:	5f 93       	push	r21
    302c:	6f 93       	push	r22
    302e:	7f 93       	push	r23
    3030:	8f 93       	push	r24
    3032:	9f 93       	push	r25
    3034:	af 93       	push	r26
    3036:	bf 93       	push	r27
    3038:	ef 93       	push	r30
    303a:	ff 93       	push	r31
  switch(TW_STATUS){
    303c:	80 91 b9 00 	lds	r24, 0x00B9
    3040:	90 e0       	ldi	r25, 0x00	; 0
    3042:	88 7f       	andi	r24, 0xF8	; 248
    3044:	90 70       	andi	r25, 0x00	; 0
    3046:	80 36       	cpi	r24, 0x60	; 96
    3048:	91 05       	cpc	r25, r1
    304a:	09 f4       	brne	.+2      	; 0x304e <__vector_24+0x34>
    304c:	f2 c0       	rjmp	.+484    	; 0x3232 <__vector_24+0x218>
    304e:	81 36       	cpi	r24, 0x61	; 97
    3050:	91 05       	cpc	r25, r1
    3052:	cc f5       	brge	.+114    	; 0x30c6 <__vector_24+0xac>
    3054:	88 32       	cpi	r24, 0x28	; 40
    3056:	91 05       	cpc	r25, r1
    3058:	09 f4       	brne	.+2      	; 0x305c <__vector_24+0x42>
    305a:	7b c0       	rjmp	.+246    	; 0x3152 <__vector_24+0x138>
    305c:	89 32       	cpi	r24, 0x29	; 41
    305e:	91 05       	cpc	r25, r1
    3060:	b4 f4       	brge	.+44     	; 0x308e <__vector_24+0x74>
    3062:	80 31       	cpi	r24, 0x10	; 16
    3064:	91 05       	cpc	r25, r1
    3066:	09 f4       	brne	.+2      	; 0x306a <__vector_24+0x50>
    3068:	6f c0       	rjmp	.+222    	; 0x3148 <__vector_24+0x12e>
    306a:	81 31       	cpi	r24, 0x11	; 17
    306c:	91 05       	cpc	r25, r1
    306e:	3c f4       	brge	.+14     	; 0x307e <__vector_24+0x64>
    3070:	00 97       	sbiw	r24, 0x00	; 0
    3072:	09 f4       	brne	.+2      	; 0x3076 <__vector_24+0x5c>
    3074:	47 c1       	rjmp	.+654    	; 0x3304 <__vector_24+0x2ea>
    3076:	08 97       	sbiw	r24, 0x08	; 8
    3078:	09 f0       	breq	.+2      	; 0x307c <__vector_24+0x62>
    307a:	4f c1       	rjmp	.+670    	; 0x331a <__vector_24+0x300>
    307c:	65 c0       	rjmp	.+202    	; 0x3148 <__vector_24+0x12e>
    307e:	88 31       	cpi	r24, 0x18	; 24
    3080:	91 05       	cpc	r25, r1
    3082:	09 f4       	brne	.+2      	; 0x3086 <__vector_24+0x6c>
    3084:	66 c0       	rjmp	.+204    	; 0x3152 <__vector_24+0x138>
    3086:	80 97       	sbiw	r24, 0x20	; 32
    3088:	09 f0       	breq	.+2      	; 0x308c <__vector_24+0x72>
    308a:	47 c1       	rjmp	.+654    	; 0x331a <__vector_24+0x300>
    308c:	82 c0       	rjmp	.+260    	; 0x3192 <__vector_24+0x178>
    308e:	80 34       	cpi	r24, 0x40	; 64
    3090:	91 05       	cpc	r25, r1
    3092:	09 f4       	brne	.+2      	; 0x3096 <__vector_24+0x7c>
    3094:	a4 c0       	rjmp	.+328    	; 0x31de <__vector_24+0x1c4>
    3096:	81 34       	cpi	r24, 0x41	; 65
    3098:	91 05       	cpc	r25, r1
    309a:	44 f4       	brge	.+16     	; 0x30ac <__vector_24+0x92>
    309c:	80 33       	cpi	r24, 0x30	; 48
    309e:	91 05       	cpc	r25, r1
    30a0:	09 f4       	brne	.+2      	; 0x30a4 <__vector_24+0x8a>
    30a2:	82 c0       	rjmp	.+260    	; 0x31a8 <__vector_24+0x18e>
    30a4:	c8 97       	sbiw	r24, 0x38	; 56
    30a6:	09 f0       	breq	.+2      	; 0x30aa <__vector_24+0x90>
    30a8:	38 c1       	rjmp	.+624    	; 0x331a <__vector_24+0x300>
    30aa:	89 c0       	rjmp	.+274    	; 0x31be <__vector_24+0x1a4>
    30ac:	80 35       	cpi	r24, 0x50	; 80
    30ae:	91 05       	cpc	r25, r1
    30b0:	09 f4       	brne	.+2      	; 0x30b4 <__vector_24+0x9a>
    30b2:	89 c0       	rjmp	.+274    	; 0x31c6 <__vector_24+0x1ac>
    30b4:	88 35       	cpi	r24, 0x58	; 88
    30b6:	91 05       	cpc	r25, r1
    30b8:	09 f4       	brne	.+2      	; 0x30bc <__vector_24+0xa2>
    30ba:	96 c0       	rjmp	.+300    	; 0x31e8 <__vector_24+0x1ce>
    30bc:	88 34       	cpi	r24, 0x48	; 72
    30be:	91 05       	cpc	r25, r1
    30c0:	09 f0       	breq	.+2      	; 0x30c4 <__vector_24+0xaa>
    30c2:	2b c1       	rjmp	.+598    	; 0x331a <__vector_24+0x300>
    30c4:	ae c0       	rjmp	.+348    	; 0x3222 <__vector_24+0x208>
    30c6:	88 39       	cpi	r24, 0x98	; 152
    30c8:	91 05       	cpc	r25, r1
    30ca:	09 f4       	brne	.+2      	; 0x30ce <__vector_24+0xb4>
    30cc:	13 c1       	rjmp	.+550    	; 0x32f4 <__vector_24+0x2da>
    30ce:	89 39       	cpi	r24, 0x99	; 153
    30d0:	91 05       	cpc	r25, r1
    30d2:	ec f4       	brge	.+58     	; 0x310e <__vector_24+0xf4>
    30d4:	88 37       	cpi	r24, 0x78	; 120
    30d6:	91 05       	cpc	r25, r1
    30d8:	09 f4       	brne	.+2      	; 0x30dc <__vector_24+0xc2>
    30da:	ab c0       	rjmp	.+342    	; 0x3232 <__vector_24+0x218>
    30dc:	89 37       	cpi	r24, 0x79	; 121
    30de:	91 05       	cpc	r25, r1
    30e0:	4c f4       	brge	.+18     	; 0x30f4 <__vector_24+0xda>
    30e2:	88 36       	cpi	r24, 0x68	; 104
    30e4:	91 05       	cpc	r25, r1
    30e6:	09 f4       	brne	.+2      	; 0x30ea <__vector_24+0xd0>
    30e8:	a4 c0       	rjmp	.+328    	; 0x3232 <__vector_24+0x218>
    30ea:	80 37       	cpi	r24, 0x70	; 112
    30ec:	91 05       	cpc	r25, r1
    30ee:	09 f0       	breq	.+2      	; 0x30f2 <__vector_24+0xd8>
    30f0:	14 c1       	rjmp	.+552    	; 0x331a <__vector_24+0x300>
    30f2:	9f c0       	rjmp	.+318    	; 0x3232 <__vector_24+0x218>
    30f4:	88 38       	cpi	r24, 0x88	; 136
    30f6:	91 05       	cpc	r25, r1
    30f8:	09 f4       	brne	.+2      	; 0x30fc <__vector_24+0xe2>
    30fa:	fc c0       	rjmp	.+504    	; 0x32f4 <__vector_24+0x2da>
    30fc:	80 39       	cpi	r24, 0x90	; 144
    30fe:	91 05       	cpc	r25, r1
    3100:	09 f4       	brne	.+2      	; 0x3104 <__vector_24+0xea>
    3102:	9d c0       	rjmp	.+314    	; 0x323e <__vector_24+0x224>
    3104:	80 38       	cpi	r24, 0x80	; 128
    3106:	91 05       	cpc	r25, r1
    3108:	09 f0       	breq	.+2      	; 0x310c <__vector_24+0xf2>
    310a:	07 c1       	rjmp	.+526    	; 0x331a <__vector_24+0x300>
    310c:	98 c0       	rjmp	.+304    	; 0x323e <__vector_24+0x224>
    310e:	80 3b       	cpi	r24, 0xB0	; 176
    3110:	91 05       	cpc	r25, r1
    3112:	09 f4       	brne	.+2      	; 0x3116 <__vector_24+0xfc>
    3114:	c6 c0       	rjmp	.+396    	; 0x32a2 <__vector_24+0x288>
    3116:	81 3b       	cpi	r24, 0xB1	; 177
    3118:	91 05       	cpc	r25, r1
    311a:	4c f4       	brge	.+18     	; 0x312e <__vector_24+0x114>
    311c:	80 3a       	cpi	r24, 0xA0	; 160
    311e:	91 05       	cpc	r25, r1
    3120:	09 f4       	brne	.+2      	; 0x3124 <__vector_24+0x10a>
    3122:	9f c0       	rjmp	.+318    	; 0x3262 <__vector_24+0x248>
    3124:	88 3a       	cpi	r24, 0xA8	; 168
    3126:	91 05       	cpc	r25, r1
    3128:	09 f0       	breq	.+2      	; 0x312c <__vector_24+0x112>
    312a:	f7 c0       	rjmp	.+494    	; 0x331a <__vector_24+0x300>
    312c:	ba c0       	rjmp	.+372    	; 0x32a2 <__vector_24+0x288>
    312e:	80 3c       	cpi	r24, 0xC0	; 192
    3130:	91 05       	cpc	r25, r1
    3132:	09 f4       	brne	.+2      	; 0x3136 <__vector_24+0x11c>
    3134:	e3 c0       	rjmp	.+454    	; 0x32fc <__vector_24+0x2e2>
    3136:	88 3c       	cpi	r24, 0xC8	; 200
    3138:	91 05       	cpc	r25, r1
    313a:	09 f4       	brne	.+2      	; 0x313e <__vector_24+0x124>
    313c:	df c0       	rjmp	.+446    	; 0x32fc <__vector_24+0x2e2>
    313e:	88 3b       	cpi	r24, 0xB8	; 184
    3140:	91 05       	cpc	r25, r1
    3142:	09 f0       	breq	.+2      	; 0x3146 <__vector_24+0x12c>
    3144:	ea c0       	rjmp	.+468    	; 0x331a <__vector_24+0x300>
    3146:	c2 c0       	rjmp	.+388    	; 0x32cc <__vector_24+0x2b2>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    3148:	80 91 7d 03 	lds	r24, 0x037D
    314c:	80 93 bb 00 	sts	0x00BB, r24
    3150:	cf c0       	rjmp	.+414    	; 0x32f0 <__vector_24+0x2d6>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3152:	90 91 a4 03 	lds	r25, 0x03A4
    3156:	80 91 a5 03 	lds	r24, 0x03A5
    315a:	98 17       	cp	r25, r24
    315c:	68 f4       	brcc	.+26     	; 0x3178 <__vector_24+0x15e>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    315e:	90 91 a4 03 	lds	r25, 0x03A4
    3162:	e9 2f       	mov	r30, r25
    3164:	f0 e0       	ldi	r31, 0x00	; 0
    3166:	ec 57       	subi	r30, 0x7C	; 124
    3168:	fc 4f       	sbci	r31, 0xFC	; 252
    316a:	80 81       	ld	r24, Z
    316c:	80 93 bb 00 	sts	0x00BB, r24
    3170:	9f 5f       	subi	r25, 0xFF	; 255
    3172:	90 93 a4 03 	sts	0x03A4, r25
    3176:	bc c0       	rjmp	.+376    	; 0x32f0 <__vector_24+0x2d6>
        twi_reply(1);
      }else{
	if (twi_sendStop)
    3178:	80 91 7e 03 	lds	r24, 0x037E
    317c:	88 23       	and	r24, r24
    317e:	09 f4       	brne	.+2      	; 0x3182 <__vector_24+0x168>
    3180:	4b c0       	rjmp	.+150    	; 0x3218 <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    3182:	85 ed       	ldi	r24, 0xD5	; 213
    3184:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    3188:	80 91 bc 00 	lds	r24, 0x00BC
    318c:	84 fd       	sbrc	r24, 4
    318e:	fc cf       	rjmp	.-8      	; 0x3188 <__vector_24+0x16e>
    3190:	c2 c0       	rjmp	.+388    	; 0x3316 <__vector_24+0x2fc>
	  twi_state = TWI_READY;
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    3192:	80 e2       	ldi	r24, 0x20	; 32
    3194:	80 93 e9 03 	sts	0x03E9, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    3198:	85 ed       	ldi	r24, 0xD5	; 213
    319a:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    319e:	80 91 bc 00 	lds	r24, 0x00BC
    31a2:	84 fd       	sbrc	r24, 4
    31a4:	fc cf       	rjmp	.-8      	; 0x319e <__vector_24+0x184>
    31a6:	b7 c0       	rjmp	.+366    	; 0x3316 <__vector_24+0x2fc>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    31a8:	80 e3       	ldi	r24, 0x30	; 48
    31aa:	80 93 e9 03 	sts	0x03E9, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    31ae:	85 ed       	ldi	r24, 0xD5	; 213
    31b0:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    31b4:	80 91 bc 00 	lds	r24, 0x00BC
    31b8:	84 fd       	sbrc	r24, 4
    31ba:	fc cf       	rjmp	.-8      	; 0x31b4 <__vector_24+0x19a>
    31bc:	ac c0       	rjmp	.+344    	; 0x3316 <__vector_24+0x2fc>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    31be:	88 e3       	ldi	r24, 0x38	; 56
    31c0:	80 93 e9 03 	sts	0x03E9, r24
    31c4:	9b c0       	rjmp	.+310    	; 0x32fc <__vector_24+0x2e2>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    31c6:	80 91 a4 03 	lds	r24, 0x03A4
    31ca:	90 91 bb 00 	lds	r25, 0x00BB
    31ce:	e8 2f       	mov	r30, r24
    31d0:	f0 e0       	ldi	r31, 0x00	; 0
    31d2:	ec 57       	subi	r30, 0x7C	; 124
    31d4:	fc 4f       	sbci	r31, 0xFC	; 252
    31d6:	90 83       	st	Z, r25
    31d8:	8f 5f       	subi	r24, 0xFF	; 255
    31da:	80 93 a4 03 	sts	0x03A4, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    31de:	90 91 a4 03 	lds	r25, 0x03A4
    31e2:	80 91 a5 03 	lds	r24, 0x03A5
    31e6:	82 c0       	rjmp	.+260    	; 0x32ec <__vector_24+0x2d2>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    31e8:	80 91 a4 03 	lds	r24, 0x03A4
    31ec:	90 91 bb 00 	lds	r25, 0x00BB
    31f0:	e8 2f       	mov	r30, r24
    31f2:	f0 e0       	ldi	r31, 0x00	; 0
    31f4:	ec 57       	subi	r30, 0x7C	; 124
    31f6:	fc 4f       	sbci	r31, 0xFC	; 252
    31f8:	90 83       	st	Z, r25
    31fa:	8f 5f       	subi	r24, 0xFF	; 255
    31fc:	80 93 a4 03 	sts	0x03A4, r24
	if (twi_sendStop)
    3200:	80 91 7e 03 	lds	r24, 0x037E
    3204:	88 23       	and	r24, r24
    3206:	41 f0       	breq	.+16     	; 0x3218 <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    3208:	85 ed       	ldi	r24, 0xD5	; 213
    320a:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    320e:	80 91 bc 00 	lds	r24, 0x00BC
    3212:	84 fd       	sbrc	r24, 4
    3214:	fc cf       	rjmp	.-8      	; 0x320e <__vector_24+0x1f4>
    3216:	7f c0       	rjmp	.+254    	; 0x3316 <__vector_24+0x2fc>
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    3218:	81 e0       	ldi	r24, 0x01	; 1
    321a:	80 93 7f 03 	sts	0x037F, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    321e:	84 ea       	ldi	r24, 0xA4	; 164
    3220:	6e c0       	rjmp	.+220    	; 0x32fe <__vector_24+0x2e4>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    3222:	85 ed       	ldi	r24, 0xD5	; 213
    3224:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    3228:	80 91 bc 00 	lds	r24, 0x00BC
    322c:	84 fd       	sbrc	r24, 4
    322e:	fc cf       	rjmp	.-8      	; 0x3228 <__vector_24+0x20e>
    3230:	72 c0       	rjmp	.+228    	; 0x3316 <__vector_24+0x2fc>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    3232:	83 e0       	ldi	r24, 0x03	; 3
    3234:	80 93 7c 03 	sts	0x037C, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    3238:	10 92 e8 03 	sts	0x03E8, r1
    323c:	59 c0       	rjmp	.+178    	; 0x32f0 <__vector_24+0x2d6>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    323e:	80 91 e8 03 	lds	r24, 0x03E8
    3242:	80 32       	cpi	r24, 0x20	; 32
    3244:	08 f0       	brcs	.+2      	; 0x3248 <__vector_24+0x22e>
    3246:	56 c0       	rjmp	.+172    	; 0x32f4 <__vector_24+0x2da>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    3248:	80 91 e8 03 	lds	r24, 0x03E8
    324c:	90 91 bb 00 	lds	r25, 0x00BB
    3250:	e8 2f       	mov	r30, r24
    3252:	f0 e0       	ldi	r31, 0x00	; 0
    3254:	e8 53       	subi	r30, 0x38	; 56
    3256:	fc 4f       	sbci	r31, 0xFC	; 252
    3258:	90 83       	st	Z, r25
    325a:	8f 5f       	subi	r24, 0xFF	; 255
    325c:	80 93 e8 03 	sts	0x03E8, r24
    3260:	47 c0       	rjmp	.+142    	; 0x32f0 <__vector_24+0x2d6>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3262:	80 91 e8 03 	lds	r24, 0x03E8
    3266:	80 32       	cpi	r24, 0x20	; 32
    3268:	30 f4       	brcc	.+12     	; 0x3276 <__vector_24+0x25c>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    326a:	e0 91 e8 03 	lds	r30, 0x03E8
    326e:	f0 e0       	ldi	r31, 0x00	; 0
    3270:	e8 53       	subi	r30, 0x38	; 56
    3272:	fc 4f       	sbci	r31, 0xFC	; 252
    3274:	10 82       	st	Z, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    3276:	85 ed       	ldi	r24, 0xD5	; 213
    3278:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    327c:	80 91 bc 00 	lds	r24, 0x00BC
    3280:	84 fd       	sbrc	r24, 4
    3282:	fc cf       	rjmp	.-8      	; 0x327c <__vector_24+0x262>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    3284:	10 92 7c 03 	sts	0x037C, r1
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    3288:	60 91 e8 03 	lds	r22, 0x03E8
    328c:	e0 91 82 03 	lds	r30, 0x0382
    3290:	f0 91 83 03 	lds	r31, 0x0383
    3294:	88 ec       	ldi	r24, 0xC8	; 200
    3296:	93 e0       	ldi	r25, 0x03	; 3
    3298:	70 e0       	ldi	r23, 0x00	; 0
    329a:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    329c:	10 92 e8 03 	sts	0x03E8, r1
    32a0:	2d c0       	rjmp	.+90     	; 0x32fc <__vector_24+0x2e2>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    32a2:	84 e0       	ldi	r24, 0x04	; 4
    32a4:	80 93 7c 03 	sts	0x037C, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    32a8:	10 92 c6 03 	sts	0x03C6, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    32ac:	10 92 c7 03 	sts	0x03C7, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    32b0:	e0 91 80 03 	lds	r30, 0x0380
    32b4:	f0 91 81 03 	lds	r31, 0x0381
    32b8:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    32ba:	80 91 c7 03 	lds	r24, 0x03C7
    32be:	88 23       	and	r24, r24
    32c0:	29 f4       	brne	.+10     	; 0x32cc <__vector_24+0x2b2>
        twi_txBufferLength = 1;
    32c2:	81 e0       	ldi	r24, 0x01	; 1
    32c4:	80 93 c7 03 	sts	0x03C7, r24
        twi_txBuffer[0] = 0x00;
    32c8:	10 92 a6 03 	sts	0x03A6, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    32cc:	90 91 c6 03 	lds	r25, 0x03C6
    32d0:	e9 2f       	mov	r30, r25
    32d2:	f0 e0       	ldi	r31, 0x00	; 0
    32d4:	ea 55       	subi	r30, 0x5A	; 90
    32d6:	fc 4f       	sbci	r31, 0xFC	; 252
    32d8:	80 81       	ld	r24, Z
    32da:	80 93 bb 00 	sts	0x00BB, r24
    32de:	9f 5f       	subi	r25, 0xFF	; 255
    32e0:	90 93 c6 03 	sts	0x03C6, r25
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    32e4:	90 91 c6 03 	lds	r25, 0x03C6
    32e8:	80 91 c7 03 	lds	r24, 0x03C7
    32ec:	98 17       	cp	r25, r24
    32ee:	10 f4       	brcc	.+4      	; 0x32f4 <__vector_24+0x2da>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    32f0:	85 ec       	ldi	r24, 0xC5	; 197
    32f2:	01 c0       	rjmp	.+2      	; 0x32f6 <__vector_24+0x2dc>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    32f4:	85 e8       	ldi	r24, 0x85	; 133
    32f6:	80 93 bc 00 	sts	0x00BC, r24
    32fa:	0f c0       	rjmp	.+30     	; 0x331a <__vector_24+0x300>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    32fc:	85 ec       	ldi	r24, 0xC5	; 197
    32fe:	80 93 bc 00 	sts	0x00BC, r24
    3302:	09 c0       	rjmp	.+18     	; 0x3316 <__vector_24+0x2fc>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    3304:	10 92 e9 03 	sts	0x03E9, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    3308:	85 ed       	ldi	r24, 0xD5	; 213
    330a:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    330e:	80 91 bc 00 	lds	r24, 0x00BC
    3312:	84 fd       	sbrc	r24, 4
    3314:	fc cf       	rjmp	.-8      	; 0x330e <__vector_24+0x2f4>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    3316:	10 92 7c 03 	sts	0x037C, r1
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    331a:	ff 91       	pop	r31
    331c:	ef 91       	pop	r30
    331e:	bf 91       	pop	r27
    3320:	af 91       	pop	r26
    3322:	9f 91       	pop	r25
    3324:	8f 91       	pop	r24
    3326:	7f 91       	pop	r23
    3328:	6f 91       	pop	r22
    332a:	5f 91       	pop	r21
    332c:	4f 91       	pop	r20
    332e:	3f 91       	pop	r19
    3330:	2f 91       	pop	r18
    3332:	0f 90       	pop	r0
    3334:	0f be       	out	0x3f, r0	; 63
    3336:	0f 90       	pop	r0
    3338:	1f 90       	pop	r1
    333a:	18 95       	reti

0000333c <twi_init>:
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
    333c:	10 92 7c 03 	sts	0x037C, r1
  twi_sendStop = true;		// default value
    3340:	81 e0       	ldi	r24, 0x01	; 1
    3342:	80 93 7e 03 	sts	0x037E, r24
  twi_inRepStart = false;
    3346:	10 92 7f 03 	sts	0x037F, r1
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
    334a:	82 e1       	ldi	r24, 0x12	; 18
    334c:	61 e0       	ldi	r22, 0x01	; 1
    334e:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <digitalWrite>
  digitalWrite(SCL, 1);
    3352:	83 e1       	ldi	r24, 0x13	; 19
    3354:	61 e0       	ldi	r22, 0x01	; 1
    3356:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <digitalWrite>

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    335a:	e9 eb       	ldi	r30, 0xB9	; 185
    335c:	f0 e0       	ldi	r31, 0x00	; 0
    335e:	80 81       	ld	r24, Z
    3360:	8e 7f       	andi	r24, 0xFE	; 254
    3362:	80 83       	st	Z, r24
  cbi(TWSR, TWPS1);
    3364:	80 81       	ld	r24, Z
    3366:	8d 7f       	andi	r24, 0xFD	; 253
    3368:	80 83       	st	Z, r24
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
    336a:	8d ef       	ldi	r24, 0xFD	; 253
    336c:	80 93 b8 00 	sts	0x00B8, r24
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    3370:	85 e4       	ldi	r24, 0x45	; 69
    3372:	80 93 bc 00 	sts	0x00BC, r24
}
    3376:	08 95       	ret

00003378 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    3378:	cf 93       	push	r28
    337a:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    337c:	48 2f       	mov	r20, r24
    337e:	50 e0       	ldi	r21, 0x00	; 0
    3380:	ca 01       	movw	r24, r20
    3382:	8b 5c       	subi	r24, 0xCB	; 203
    3384:	9d 4f       	sbci	r25, 0xFD	; 253
    3386:	fc 01       	movw	r30, r24
    3388:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
    338a:	4f 5d       	subi	r20, 0xDF	; 223
    338c:	5d 4f       	sbci	r21, 0xFD	; 253
    338e:	fa 01       	movw	r30, r20
    3390:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    3392:	88 23       	and	r24, r24
    3394:	69 f1       	breq	.+90     	; 0x33f0 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    3396:	90 e0       	ldi	r25, 0x00	; 0
    3398:	88 0f       	add	r24, r24
    339a:	99 1f       	adc	r25, r25
    339c:	fc 01       	movw	r30, r24
    339e:	ed 5f       	subi	r30, 0xFD	; 253
    33a0:	fd 4f       	sbci	r31, 0xFD	; 253
    33a2:	a5 91       	lpm	r26, Z+
    33a4:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
    33a6:	fc 01       	movw	r30, r24
    33a8:	e3 5f       	subi	r30, 0xF3	; 243
    33aa:	fd 4f       	sbci	r31, 0xFD	; 253
    33ac:	c5 91       	lpm	r28, Z+
    33ae:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
    33b0:	66 23       	and	r22, r22
    33b2:	51 f4       	brne	.+20     	; 0x33c8 <pinMode+0x50>
		uint8_t oldSREG = SREG;
    33b4:	2f b7       	in	r18, 0x3f	; 63
                cli();
    33b6:	f8 94       	cli
		*reg &= ~bit;
    33b8:	8c 91       	ld	r24, X
    33ba:	93 2f       	mov	r25, r19
    33bc:	90 95       	com	r25
    33be:	89 23       	and	r24, r25
    33c0:	8c 93       	st	X, r24
		*out &= ~bit;
    33c2:	88 81       	ld	r24, Y
    33c4:	89 23       	and	r24, r25
    33c6:	0b c0       	rjmp	.+22     	; 0x33de <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    33c8:	62 30       	cpi	r22, 0x02	; 2
    33ca:	61 f4       	brne	.+24     	; 0x33e4 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    33cc:	2f b7       	in	r18, 0x3f	; 63
                cli();
    33ce:	f8 94       	cli
		*reg &= ~bit;
    33d0:	8c 91       	ld	r24, X
    33d2:	93 2f       	mov	r25, r19
    33d4:	90 95       	com	r25
    33d6:	89 23       	and	r24, r25
    33d8:	8c 93       	st	X, r24
		*out |= bit;
    33da:	88 81       	ld	r24, Y
    33dc:	83 2b       	or	r24, r19
    33de:	88 83       	st	Y, r24
		SREG = oldSREG;
    33e0:	2f bf       	out	0x3f, r18	; 63
    33e2:	06 c0       	rjmp	.+12     	; 0x33f0 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    33e4:	9f b7       	in	r25, 0x3f	; 63
                cli();
    33e6:	f8 94       	cli
		*reg |= bit;
    33e8:	8c 91       	ld	r24, X
    33ea:	83 2b       	or	r24, r19
    33ec:	8c 93       	st	X, r24
		SREG = oldSREG;
    33ee:	9f bf       	out	0x3f, r25	; 63
	}
}
    33f0:	df 91       	pop	r29
    33f2:	cf 91       	pop	r28
    33f4:	08 95       	ret

000033f6 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    33f6:	48 2f       	mov	r20, r24
    33f8:	50 e0       	ldi	r21, 0x00	; 0
    33fa:	ca 01       	movw	r24, r20
    33fc:	87 5b       	subi	r24, 0xB7	; 183
    33fe:	9d 4f       	sbci	r25, 0xFD	; 253
    3400:	fc 01       	movw	r30, r24
    3402:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    3404:	ca 01       	movw	r24, r20
    3406:	8b 5c       	subi	r24, 0xCB	; 203
    3408:	9d 4f       	sbci	r25, 0xFD	; 253
    340a:	fc 01       	movw	r30, r24
    340c:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    340e:	4f 5d       	subi	r20, 0xDF	; 223
    3410:	5d 4f       	sbci	r21, 0xFD	; 253
    3412:	fa 01       	movw	r30, r20
    3414:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    3416:	33 23       	and	r19, r19
    3418:	09 f4       	brne	.+2      	; 0x341c <digitalWrite+0x26>
    341a:	40 c0       	rjmp	.+128    	; 0x349c <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    341c:	22 23       	and	r18, r18
    341e:	51 f1       	breq	.+84     	; 0x3474 <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    3420:	23 30       	cpi	r18, 0x03	; 3
    3422:	71 f0       	breq	.+28     	; 0x3440 <digitalWrite+0x4a>
    3424:	24 30       	cpi	r18, 0x04	; 4
    3426:	28 f4       	brcc	.+10     	; 0x3432 <digitalWrite+0x3c>
    3428:	21 30       	cpi	r18, 0x01	; 1
    342a:	a1 f0       	breq	.+40     	; 0x3454 <digitalWrite+0x5e>
    342c:	22 30       	cpi	r18, 0x02	; 2
    342e:	11 f5       	brne	.+68     	; 0x3474 <digitalWrite+0x7e>
    3430:	14 c0       	rjmp	.+40     	; 0x345a <digitalWrite+0x64>
    3432:	26 30       	cpi	r18, 0x06	; 6
    3434:	b1 f0       	breq	.+44     	; 0x3462 <digitalWrite+0x6c>
    3436:	27 30       	cpi	r18, 0x07	; 7
    3438:	c1 f0       	breq	.+48     	; 0x346a <digitalWrite+0x74>
    343a:	24 30       	cpi	r18, 0x04	; 4
    343c:	d9 f4       	brne	.+54     	; 0x3474 <digitalWrite+0x7e>
    343e:	04 c0       	rjmp	.+8      	; 0x3448 <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    3440:	80 91 80 00 	lds	r24, 0x0080
    3444:	8f 77       	andi	r24, 0x7F	; 127
    3446:	03 c0       	rjmp	.+6      	; 0x344e <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3448:	80 91 80 00 	lds	r24, 0x0080
    344c:	8f 7d       	andi	r24, 0xDF	; 223
    344e:	80 93 80 00 	sts	0x0080, r24
    3452:	10 c0       	rjmp	.+32     	; 0x3474 <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    3454:	84 b5       	in	r24, 0x24	; 36
    3456:	8f 77       	andi	r24, 0x7F	; 127
    3458:	02 c0       	rjmp	.+4      	; 0x345e <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    345a:	84 b5       	in	r24, 0x24	; 36
    345c:	8f 7d       	andi	r24, 0xDF	; 223
    345e:	84 bd       	out	0x24, r24	; 36
    3460:	09 c0       	rjmp	.+18     	; 0x3474 <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    3462:	80 91 b0 00 	lds	r24, 0x00B0
    3466:	8f 77       	andi	r24, 0x7F	; 127
    3468:	03 c0       	rjmp	.+6      	; 0x3470 <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    346a:	80 91 b0 00 	lds	r24, 0x00B0
    346e:	8f 7d       	andi	r24, 0xDF	; 223
    3470:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    3474:	e3 2f       	mov	r30, r19
    3476:	f0 e0       	ldi	r31, 0x00	; 0
    3478:	ee 0f       	add	r30, r30
    347a:	ff 1f       	adc	r31, r31
    347c:	e3 5f       	subi	r30, 0xF3	; 243
    347e:	fd 4f       	sbci	r31, 0xFD	; 253
    3480:	a5 91       	lpm	r26, Z+
    3482:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    3484:	2f b7       	in	r18, 0x3f	; 63
	cli();
    3486:	f8 94       	cli

	if (val == LOW) {
    3488:	66 23       	and	r22, r22
    348a:	21 f4       	brne	.+8      	; 0x3494 <digitalWrite+0x9e>
		*out &= ~bit;
    348c:	8c 91       	ld	r24, X
    348e:	90 95       	com	r25
    3490:	89 23       	and	r24, r25
    3492:	02 c0       	rjmp	.+4      	; 0x3498 <digitalWrite+0xa2>
	} else {
		*out |= bit;
    3494:	8c 91       	ld	r24, X
    3496:	89 2b       	or	r24, r25
    3498:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    349a:	2f bf       	out	0x3f, r18	; 63
    349c:	08 95       	ret

0000349e <serialEvent()>:
#if !defined(USART_RX_vect) && !defined(USART0_RX_vect) && \
    !defined(USART_RXC_vect)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    349e:	08 95       	ret

000034a0 <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  ISR(USART_RX_vect)
    34a0:	1f 92       	push	r1
    34a2:	0f 92       	push	r0
    34a4:	0f b6       	in	r0, 0x3f	; 63
    34a6:	0f 92       	push	r0
    34a8:	11 24       	eor	r1, r1
    34aa:	2f 93       	push	r18
    34ac:	3f 93       	push	r19
    34ae:	4f 93       	push	r20
    34b0:	8f 93       	push	r24
    34b2:	9f 93       	push	r25
    34b4:	ef 93       	push	r30
    34b6:	ff 93       	push	r31
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#endif
  {
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
    34b8:	80 91 c0 00 	lds	r24, 0x00C0
    34bc:	82 fd       	sbrc	r24, 2
    34be:	1d c0       	rjmp	.+58     	; 0x34fa <__vector_18+0x5a>
      unsigned char c = UDR0;
    34c0:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    34c4:	20 91 2a 04 	lds	r18, 0x042A
    34c8:	30 91 2b 04 	lds	r19, 0x042B

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    34cc:	2f 5f       	subi	r18, 0xFF	; 255
    34ce:	3f 4f       	sbci	r19, 0xFF	; 255
    34d0:	2f 73       	andi	r18, 0x3F	; 63
    34d2:	30 70       	andi	r19, 0x00	; 0
    34d4:	80 91 2c 04 	lds	r24, 0x042C
    34d8:	90 91 2d 04 	lds	r25, 0x042D
    34dc:	28 17       	cp	r18, r24
    34de:	39 07       	cpc	r19, r25
    34e0:	71 f0       	breq	.+28     	; 0x34fe <__vector_18+0x5e>
    buffer->buffer[buffer->head] = c;
    34e2:	e0 91 2a 04 	lds	r30, 0x042A
    34e6:	f0 91 2b 04 	lds	r31, 0x042B
    34ea:	e6 51       	subi	r30, 0x16	; 22
    34ec:	fc 4f       	sbci	r31, 0xFC	; 252
    34ee:	40 83       	st	Z, r20
    buffer->head = i;
    34f0:	30 93 2b 04 	sts	0x042B, r19
    34f4:	20 93 2a 04 	sts	0x042A, r18
    34f8:	02 c0       	rjmp	.+4      	; 0x34fe <__vector_18+0x5e>
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
      unsigned char c = UDR0;
      store_char(c, &rx_buffer);
    } else {
      unsigned char c = UDR0;
    34fa:	80 91 c6 00 	lds	r24, 0x00C6
      unsigned char c = UDR;
    };
  #else
    #error UDR not defined
  #endif
  }
    34fe:	ff 91       	pop	r31
    3500:	ef 91       	pop	r30
    3502:	9f 91       	pop	r25
    3504:	8f 91       	pop	r24
    3506:	4f 91       	pop	r20
    3508:	3f 91       	pop	r19
    350a:	2f 91       	pop	r18
    350c:	0f 90       	pop	r0
    350e:	0f be       	out	0x3f, r0	; 63
    3510:	0f 90       	pop	r0
    3512:	1f 90       	pop	r1
    3514:	18 95       	reti

00003516 <serialEventRun()>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    3516:	e0 91 7e 04 	lds	r30, 0x047E
    351a:	f0 91 7f 04 	lds	r31, 0x047F
    351e:	e0 5c       	subi	r30, 0xC0	; 192
    3520:	ff 4f       	sbci	r31, 0xFF	; 255
    3522:	81 91       	ld	r24, Z+
    3524:	91 91       	ld	r25, Z+
    3526:	20 81       	ld	r18, Z
    3528:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    352a:	82 1b       	sub	r24, r18
    352c:	93 0b       	sbc	r25, r19
    352e:	8f 73       	andi	r24, 0x3F	; 63
    3530:	90 70       	andi	r25, 0x00	; 0
    3532:	89 2b       	or	r24, r25
    3534:	11 f0       	breq	.+4      	; 0x353a <serialEventRun()+0x24>
    3536:	0e 94 4f 1a 	call	0x349e	; 0x349e <serialEvent()>
    353a:	08 95       	ret

0000353c <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
    353c:	1f 92       	push	r1
    353e:	0f 92       	push	r0
    3540:	0f b6       	in	r0, 0x3f	; 63
    3542:	0f 92       	push	r0
    3544:	11 24       	eor	r1, r1
    3546:	2f 93       	push	r18
    3548:	3f 93       	push	r19
    354a:	8f 93       	push	r24
    354c:	9f 93       	push	r25
    354e:	ef 93       	push	r30
    3550:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    3552:	20 91 6e 04 	lds	r18, 0x046E
    3556:	30 91 6f 04 	lds	r19, 0x046F
    355a:	80 91 70 04 	lds	r24, 0x0470
    355e:	90 91 71 04 	lds	r25, 0x0471
    3562:	28 17       	cp	r18, r24
    3564:	39 07       	cpc	r19, r25
    3566:	31 f4       	brne	.+12     	; 0x3574 <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    3568:	80 91 c1 00 	lds	r24, 0x00C1
    356c:	8f 7d       	andi	r24, 0xDF	; 223
    356e:	80 93 c1 00 	sts	0x00C1, r24
    3572:	14 c0       	rjmp	.+40     	; 0x359c <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    3574:	e0 91 70 04 	lds	r30, 0x0470
    3578:	f0 91 71 04 	lds	r31, 0x0471
    357c:	e2 5d       	subi	r30, 0xD2	; 210
    357e:	fb 4f       	sbci	r31, 0xFB	; 251
    3580:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    3582:	80 91 70 04 	lds	r24, 0x0470
    3586:	90 91 71 04 	lds	r25, 0x0471
    358a:	01 96       	adiw	r24, 0x01	; 1
    358c:	8f 73       	andi	r24, 0x3F	; 63
    358e:	90 70       	andi	r25, 0x00	; 0
    3590:	90 93 71 04 	sts	0x0471, r25
    3594:	80 93 70 04 	sts	0x0470, r24
	
  #if defined(UDR0)
    UDR0 = c;
    3598:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    359c:	ff 91       	pop	r31
    359e:	ef 91       	pop	r30
    35a0:	9f 91       	pop	r25
    35a2:	8f 91       	pop	r24
    35a4:	3f 91       	pop	r19
    35a6:	2f 91       	pop	r18
    35a8:	0f 90       	pop	r0
    35aa:	0f be       	out	0x3f, r0	; 63
    35ac:	0f 90       	pop	r0
    35ae:	1f 90       	pop	r1
    35b0:	18 95       	reti

000035b2 <HardwareSerial::begin(unsigned long)>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    35b2:	af 92       	push	r10
    35b4:	bf 92       	push	r11
    35b6:	df 92       	push	r13
    35b8:	ef 92       	push	r14
    35ba:	ff 92       	push	r15
    35bc:	0f 93       	push	r16
    35be:	1f 93       	push	r17
    35c0:	cf 93       	push	r28
    35c2:	df 93       	push	r29
    35c4:	ec 01       	movw	r28, r24
    35c6:	7a 01       	movw	r14, r20
    35c8:	8b 01       	movw	r16, r22
    35ca:	dd 24       	eor	r13, r13
    35cc:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    35ce:	91 e0       	ldi	r25, 0x01	; 1
    35d0:	a9 2e       	mov	r10, r25
    35d2:	b1 2c       	mov	r11, r1
    35d4:	ec 89       	ldd	r30, Y+20	; 0x14
    35d6:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
    35d8:	dd 20       	and	r13, r13
    35da:	69 f0       	breq	.+26     	; 0x35f6 <HardwareSerial::begin(unsigned long)+0x44>
    *_ucsra = 1 << _u2x;
    35dc:	c5 01       	movw	r24, r10
    35de:	08 a0       	ldd	r0, Y+32	; 0x20
    35e0:	02 c0       	rjmp	.+4      	; 0x35e6 <HardwareSerial::begin(unsigned long)+0x34>
    35e2:	88 0f       	add	r24, r24
    35e4:	99 1f       	adc	r25, r25
    35e6:	0a 94       	dec	r0
    35e8:	e2 f7       	brpl	.-8      	; 0x35e2 <HardwareSerial::begin(unsigned long)+0x30>
    35ea:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    35ec:	60 e9       	ldi	r22, 0x90	; 144
    35ee:	70 ed       	ldi	r23, 0xD0	; 208
    35f0:	83 e0       	ldi	r24, 0x03	; 3
    35f2:	90 e0       	ldi	r25, 0x00	; 0
    35f4:	05 c0       	rjmp	.+10     	; 0x3600 <HardwareSerial::begin(unsigned long)+0x4e>
  } else {
    *_ucsra = 0;
    35f6:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    35f8:	68 e4       	ldi	r22, 0x48	; 72
    35fa:	78 ee       	ldi	r23, 0xE8	; 232
    35fc:	81 e0       	ldi	r24, 0x01	; 1
    35fe:	90 e0       	ldi	r25, 0x00	; 0
    3600:	a8 01       	movw	r20, r16
    3602:	97 01       	movw	r18, r14
    3604:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <__udivmodsi4>
    3608:	21 50       	subi	r18, 0x01	; 1
    360a:	30 40       	sbci	r19, 0x00	; 0
    360c:	40 40       	sbci	r20, 0x00	; 0
    360e:	50 40       	sbci	r21, 0x00	; 0
    3610:	56 95       	lsr	r21
    3612:	47 95       	ror	r20
    3614:	37 95       	ror	r19
    3616:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    3618:	80 e1       	ldi	r24, 0x10	; 16
    361a:	20 30       	cpi	r18, 0x00	; 0
    361c:	38 07       	cpc	r19, r24
    361e:	20 f0       	brcs	.+8      	; 0x3628 <HardwareSerial::begin(unsigned long)+0x76>
    3620:	dd 20       	and	r13, r13
    3622:	11 f0       	breq	.+4      	; 0x3628 <HardwareSerial::begin(unsigned long)+0x76>
    3624:	dd 24       	eor	r13, r13
    3626:	d6 cf       	rjmp	.-84     	; 0x35d4 <HardwareSerial::begin(unsigned long)+0x22>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    3628:	e8 89       	ldd	r30, Y+16	; 0x10
    362a:	f9 89       	ldd	r31, Y+17	; 0x11
    362c:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    362e:	ea 89       	ldd	r30, Y+18	; 0x12
    3630:	fb 89       	ldd	r31, Y+19	; 0x13
    3632:	20 83       	st	Z, r18

  transmitting = false;
    3634:	19 a2       	std	Y+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
    3636:	ee 89       	ldd	r30, Y+22	; 0x16
    3638:	ff 89       	ldd	r31, Y+23	; 0x17
    363a:	40 81       	ld	r20, Z
    363c:	21 e0       	ldi	r18, 0x01	; 1
    363e:	30 e0       	ldi	r19, 0x00	; 0
    3640:	c9 01       	movw	r24, r18
    3642:	0c 8c       	ldd	r0, Y+28	; 0x1c
    3644:	02 c0       	rjmp	.+4      	; 0x364a <HardwareSerial::begin(unsigned long)+0x98>
    3646:	88 0f       	add	r24, r24
    3648:	99 1f       	adc	r25, r25
    364a:	0a 94       	dec	r0
    364c:	e2 f7       	brpl	.-8      	; 0x3646 <HardwareSerial::begin(unsigned long)+0x94>
    364e:	48 2b       	or	r20, r24
    3650:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    3652:	ee 89       	ldd	r30, Y+22	; 0x16
    3654:	ff 89       	ldd	r31, Y+23	; 0x17
    3656:	40 81       	ld	r20, Z
    3658:	c9 01       	movw	r24, r18
    365a:	0d 8c       	ldd	r0, Y+29	; 0x1d
    365c:	02 c0       	rjmp	.+4      	; 0x3662 <HardwareSerial::begin(unsigned long)+0xb0>
    365e:	88 0f       	add	r24, r24
    3660:	99 1f       	adc	r25, r25
    3662:	0a 94       	dec	r0
    3664:	e2 f7       	brpl	.-8      	; 0x365e <HardwareSerial::begin(unsigned long)+0xac>
    3666:	48 2b       	or	r20, r24
    3668:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    366a:	ee 89       	ldd	r30, Y+22	; 0x16
    366c:	ff 89       	ldd	r31, Y+23	; 0x17
    366e:	40 81       	ld	r20, Z
    3670:	c9 01       	movw	r24, r18
    3672:	0e 8c       	ldd	r0, Y+30	; 0x1e
    3674:	02 c0       	rjmp	.+4      	; 0x367a <HardwareSerial::begin(unsigned long)+0xc8>
    3676:	88 0f       	add	r24, r24
    3678:	99 1f       	adc	r25, r25
    367a:	0a 94       	dec	r0
    367c:	e2 f7       	brpl	.-8      	; 0x3676 <HardwareSerial::begin(unsigned long)+0xc4>
    367e:	48 2b       	or	r20, r24
    3680:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    3682:	ee 89       	ldd	r30, Y+22	; 0x16
    3684:	ff 89       	ldd	r31, Y+23	; 0x17
    3686:	80 81       	ld	r24, Z
    3688:	0f 8c       	ldd	r0, Y+31	; 0x1f
    368a:	02 c0       	rjmp	.+4      	; 0x3690 <HardwareSerial::begin(unsigned long)+0xde>
    368c:	22 0f       	add	r18, r18
    368e:	33 1f       	adc	r19, r19
    3690:	0a 94       	dec	r0
    3692:	e2 f7       	brpl	.-8      	; 0x368c <HardwareSerial::begin(unsigned long)+0xda>
    3694:	20 95       	com	r18
    3696:	28 23       	and	r18, r24
    3698:	20 83       	st	Z, r18
}
    369a:	df 91       	pop	r29
    369c:	cf 91       	pop	r28
    369e:	1f 91       	pop	r17
    36a0:	0f 91       	pop	r16
    36a2:	ff 90       	pop	r15
    36a4:	ef 90       	pop	r14
    36a6:	df 90       	pop	r13
    36a8:	bf 90       	pop	r11
    36aa:	af 90       	pop	r10
    36ac:	08 95       	ret

000036ae <HardwareSerial::end()>:
  sbi(*_ucsrb, _txen);
  sbi(*_ucsrb, _rxcie);
  cbi(*_ucsrb, _udrie);
}

void HardwareSerial::end()
    36ae:	cf 93       	push	r28
    36b0:	df 93       	push	r29
    36b2:	dc 01       	movw	r26, r24
{
  // wait for transmission of outgoing data
  while (_tx_buffer->head != _tx_buffer->tail)
    36b4:	1e 96       	adiw	r26, 0x0e	; 14
    36b6:	8d 91       	ld	r24, X+
    36b8:	9c 91       	ld	r25, X
    36ba:	1f 97       	sbiw	r26, 0x0f	; 15
    36bc:	ec 01       	movw	r28, r24
    36be:	c0 5c       	subi	r28, 0xC0	; 192
    36c0:	df 4f       	sbci	r29, 0xFF	; 255
    36c2:	fc 01       	movw	r30, r24
    36c4:	ee 5b       	subi	r30, 0xBE	; 190
    36c6:	ff 4f       	sbci	r31, 0xFF	; 255
    36c8:	28 81       	ld	r18, Y
    36ca:	39 81       	ldd	r19, Y+1	; 0x01
    36cc:	80 81       	ld	r24, Z
    36ce:	91 81       	ldd	r25, Z+1	; 0x01
    36d0:	28 17       	cp	r18, r24
    36d2:	39 07       	cpc	r19, r25
    36d4:	c9 f7       	brne	.-14     	; 0x36c8 <HardwareSerial::end()+0x1a>
    ;

  cbi(*_ucsrb, _rxen);
    36d6:	56 96       	adiw	r26, 0x16	; 22
    36d8:	ed 91       	ld	r30, X+
    36da:	fc 91       	ld	r31, X
    36dc:	57 97       	sbiw	r26, 0x17	; 23
    36de:	40 81       	ld	r20, Z
    36e0:	21 e0       	ldi	r18, 0x01	; 1
    36e2:	30 e0       	ldi	r19, 0x00	; 0
    36e4:	c9 01       	movw	r24, r18
    36e6:	5c 96       	adiw	r26, 0x1c	; 28
    36e8:	0c 90       	ld	r0, X
    36ea:	5c 97       	sbiw	r26, 0x1c	; 28
    36ec:	02 c0       	rjmp	.+4      	; 0x36f2 <HardwareSerial::end()+0x44>
    36ee:	88 0f       	add	r24, r24
    36f0:	99 1f       	adc	r25, r25
    36f2:	0a 94       	dec	r0
    36f4:	e2 f7       	brpl	.-8      	; 0x36ee <HardwareSerial::end()+0x40>
    36f6:	80 95       	com	r24
    36f8:	84 23       	and	r24, r20
    36fa:	80 83       	st	Z, r24
  cbi(*_ucsrb, _txen);
    36fc:	56 96       	adiw	r26, 0x16	; 22
    36fe:	ed 91       	ld	r30, X+
    3700:	fc 91       	ld	r31, X
    3702:	57 97       	sbiw	r26, 0x17	; 23
    3704:	40 81       	ld	r20, Z
    3706:	c9 01       	movw	r24, r18
    3708:	5d 96       	adiw	r26, 0x1d	; 29
    370a:	0c 90       	ld	r0, X
    370c:	5d 97       	sbiw	r26, 0x1d	; 29
    370e:	02 c0       	rjmp	.+4      	; 0x3714 <HardwareSerial::end()+0x66>
    3710:	88 0f       	add	r24, r24
    3712:	99 1f       	adc	r25, r25
    3714:	0a 94       	dec	r0
    3716:	e2 f7       	brpl	.-8      	; 0x3710 <HardwareSerial::end()+0x62>
    3718:	80 95       	com	r24
    371a:	84 23       	and	r24, r20
    371c:	80 83       	st	Z, r24
  cbi(*_ucsrb, _rxcie);  
    371e:	56 96       	adiw	r26, 0x16	; 22
    3720:	ed 91       	ld	r30, X+
    3722:	fc 91       	ld	r31, X
    3724:	57 97       	sbiw	r26, 0x17	; 23
    3726:	40 81       	ld	r20, Z
    3728:	c9 01       	movw	r24, r18
    372a:	5e 96       	adiw	r26, 0x1e	; 30
    372c:	0c 90       	ld	r0, X
    372e:	5e 97       	sbiw	r26, 0x1e	; 30
    3730:	02 c0       	rjmp	.+4      	; 0x3736 <HardwareSerial::end()+0x88>
    3732:	88 0f       	add	r24, r24
    3734:	99 1f       	adc	r25, r25
    3736:	0a 94       	dec	r0
    3738:	e2 f7       	brpl	.-8      	; 0x3732 <HardwareSerial::end()+0x84>
    373a:	80 95       	com	r24
    373c:	84 23       	and	r24, r20
    373e:	80 83       	st	Z, r24
  cbi(*_ucsrb, _udrie);
    3740:	56 96       	adiw	r26, 0x16	; 22
    3742:	ed 91       	ld	r30, X+
    3744:	fc 91       	ld	r31, X
    3746:	57 97       	sbiw	r26, 0x17	; 23
    3748:	80 81       	ld	r24, Z
    374a:	5f 96       	adiw	r26, 0x1f	; 31
    374c:	0c 90       	ld	r0, X
    374e:	5f 97       	sbiw	r26, 0x1f	; 31
    3750:	02 c0       	rjmp	.+4      	; 0x3756 <HardwareSerial::end()+0xa8>
    3752:	22 0f       	add	r18, r18
    3754:	33 1f       	adc	r19, r19
    3756:	0a 94       	dec	r0
    3758:	e2 f7       	brpl	.-8      	; 0x3752 <HardwareSerial::end()+0xa4>
    375a:	20 95       	com	r18
    375c:	28 23       	and	r18, r24
    375e:	20 83       	st	Z, r18
  
  // clear any received data
  _rx_buffer->head = _rx_buffer->tail;
    3760:	1c 96       	adiw	r26, 0x0c	; 12
    3762:	ed 91       	ld	r30, X+
    3764:	fc 91       	ld	r31, X
    3766:	1d 97       	sbiw	r26, 0x0d	; 13
    3768:	ee 5b       	subi	r30, 0xBE	; 190
    376a:	ff 4f       	sbci	r31, 0xFF	; 255
    376c:	80 81       	ld	r24, Z
    376e:	91 81       	ldd	r25, Z+1	; 0x01
    3770:	92 93       	st	-Z, r25
    3772:	82 93       	st	-Z, r24
}
    3774:	df 91       	pop	r29
    3776:	cf 91       	pop	r28
    3778:	08 95       	ret

0000377a <HardwareSerial::available()>:

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    377a:	dc 01       	movw	r26, r24
    377c:	1c 96       	adiw	r26, 0x0c	; 12
    377e:	ed 91       	ld	r30, X+
    3780:	fc 91       	ld	r31, X
    3782:	1d 97       	sbiw	r26, 0x0d	; 13
    3784:	e0 5c       	subi	r30, 0xC0	; 192
    3786:	ff 4f       	sbci	r31, 0xFF	; 255
    3788:	21 91       	ld	r18, Z+
    378a:	31 91       	ld	r19, Z+
    378c:	80 81       	ld	r24, Z
    378e:	91 81       	ldd	r25, Z+1	; 0x01
    3790:	28 1b       	sub	r18, r24
    3792:	39 0b       	sbc	r19, r25
    3794:	2f 73       	andi	r18, 0x3F	; 63
    3796:	30 70       	andi	r19, 0x00	; 0
}
    3798:	c9 01       	movw	r24, r18
    379a:	08 95       	ret

0000379c <HardwareSerial::peek()>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    379c:	dc 01       	movw	r26, r24
    379e:	1c 96       	adiw	r26, 0x0c	; 12
    37a0:	ed 91       	ld	r30, X+
    37a2:	fc 91       	ld	r31, X
    37a4:	1d 97       	sbiw	r26, 0x0d	; 13
    37a6:	e0 5c       	subi	r30, 0xC0	; 192
    37a8:	ff 4f       	sbci	r31, 0xFF	; 255
    37aa:	20 81       	ld	r18, Z
    37ac:	31 81       	ldd	r19, Z+1	; 0x01
    37ae:	e0 54       	subi	r30, 0x40	; 64
    37b0:	f0 40       	sbci	r31, 0x00	; 0
    37b2:	df 01       	movw	r26, r30
    37b4:	ae 5b       	subi	r26, 0xBE	; 190
    37b6:	bf 4f       	sbci	r27, 0xFF	; 255
    37b8:	8d 91       	ld	r24, X+
    37ba:	9c 91       	ld	r25, X
    37bc:	11 97       	sbiw	r26, 0x01	; 1
    37be:	28 17       	cp	r18, r24
    37c0:	39 07       	cpc	r19, r25
    37c2:	19 f4       	brne	.+6      	; 0x37ca <HardwareSerial::peek()+0x2e>
    37c4:	2f ef       	ldi	r18, 0xFF	; 255
    37c6:	3f ef       	ldi	r19, 0xFF	; 255
    37c8:	07 c0       	rjmp	.+14     	; 0x37d8 <HardwareSerial::peek()+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    37ca:	8d 91       	ld	r24, X+
    37cc:	9c 91       	ld	r25, X
    37ce:	e8 0f       	add	r30, r24
    37d0:	f9 1f       	adc	r31, r25
    37d2:	80 81       	ld	r24, Z
    37d4:	28 2f       	mov	r18, r24
    37d6:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    37d8:	c9 01       	movw	r24, r18
    37da:	08 95       	ret

000037dc <HardwareSerial::read()>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    37dc:	dc 01       	movw	r26, r24
    37de:	1c 96       	adiw	r26, 0x0c	; 12
    37e0:	ed 91       	ld	r30, X+
    37e2:	fc 91       	ld	r31, X
    37e4:	1d 97       	sbiw	r26, 0x0d	; 13
    37e6:	e0 5c       	subi	r30, 0xC0	; 192
    37e8:	ff 4f       	sbci	r31, 0xFF	; 255
    37ea:	20 81       	ld	r18, Z
    37ec:	31 81       	ldd	r19, Z+1	; 0x01
    37ee:	e0 54       	subi	r30, 0x40	; 64
    37f0:	f0 40       	sbci	r31, 0x00	; 0
    37f2:	df 01       	movw	r26, r30
    37f4:	ae 5b       	subi	r26, 0xBE	; 190
    37f6:	bf 4f       	sbci	r27, 0xFF	; 255
    37f8:	8d 91       	ld	r24, X+
    37fa:	9c 91       	ld	r25, X
    37fc:	11 97       	sbiw	r26, 0x01	; 1
    37fe:	28 17       	cp	r18, r24
    3800:	39 07       	cpc	r19, r25
    3802:	19 f4       	brne	.+6      	; 0x380a <HardwareSerial::read()+0x2e>
    3804:	2f ef       	ldi	r18, 0xFF	; 255
    3806:	3f ef       	ldi	r19, 0xFF	; 255
    3808:	10 c0       	rjmp	.+32     	; 0x382a <HardwareSerial::read()+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    380a:	8d 91       	ld	r24, X+
    380c:	9c 91       	ld	r25, X
    380e:	11 97       	sbiw	r26, 0x01	; 1
    3810:	e8 0f       	add	r30, r24
    3812:	f9 1f       	adc	r31, r25
    3814:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    3816:	8d 91       	ld	r24, X+
    3818:	9c 91       	ld	r25, X
    381a:	11 97       	sbiw	r26, 0x01	; 1
    381c:	01 96       	adiw	r24, 0x01	; 1
    381e:	8f 73       	andi	r24, 0x3F	; 63
    3820:	90 70       	andi	r25, 0x00	; 0
    3822:	11 96       	adiw	r26, 0x01	; 1
    3824:	9c 93       	st	X, r25
    3826:	8e 93       	st	-X, r24
    return c;
    3828:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    382a:	c9 01       	movw	r24, r18
    382c:	08 95       	ret

0000382e <HardwareSerial::flush()>:

void HardwareSerial::flush()
    382e:	dc 01       	movw	r26, r24
{
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
    3830:	91 96       	adiw	r26, 0x21	; 33
    3832:	8c 91       	ld	r24, X
    3834:	91 97       	sbiw	r26, 0x21	; 33
    3836:	88 23       	and	r24, r24
    3838:	39 f0       	breq	.+14     	; 0x3848 <HardwareSerial::flush()+0x1a>
    383a:	54 96       	adiw	r26, 0x14	; 20
    383c:	ed 91       	ld	r30, X+
    383e:	fc 91       	ld	r31, X
    3840:	55 97       	sbiw	r26, 0x15	; 21
    3842:	80 81       	ld	r24, Z
    3844:	86 ff       	sbrs	r24, 6
    3846:	f9 cf       	rjmp	.-14     	; 0x383a <HardwareSerial::flush()+0xc>
  transmitting = false;
    3848:	91 96       	adiw	r26, 0x21	; 33
    384a:	1c 92       	st	X, r1
}
    384c:	08 95       	ret

0000384e <HardwareSerial::write(unsigned char)>:

size_t HardwareSerial::write(uint8_t c)
    384e:	cf 93       	push	r28
    3850:	df 93       	push	r29
    3852:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    3854:	ee 85       	ldd	r30, Y+14	; 0x0e
    3856:	ff 85       	ldd	r31, Y+15	; 0x0f
    3858:	e0 5c       	subi	r30, 0xC0	; 192
    385a:	ff 4f       	sbci	r31, 0xFF	; 255
    385c:	20 81       	ld	r18, Z
    385e:	31 81       	ldd	r19, Z+1	; 0x01
    3860:	e0 54       	subi	r30, 0x40	; 64
    3862:	f0 40       	sbci	r31, 0x00	; 0
    3864:	2f 5f       	subi	r18, 0xFF	; 255
    3866:	3f 4f       	sbci	r19, 0xFF	; 255
    3868:	2f 73       	andi	r18, 0x3F	; 63
    386a:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    386c:	df 01       	movw	r26, r30
    386e:	ae 5b       	subi	r26, 0xBE	; 190
    3870:	bf 4f       	sbci	r27, 0xFF	; 255
    3872:	8d 91       	ld	r24, X+
    3874:	9c 91       	ld	r25, X
    3876:	11 97       	sbiw	r26, 0x01	; 1
    3878:	28 17       	cp	r18, r24
    387a:	39 07       	cpc	r19, r25
    387c:	d1 f3       	breq	.-12     	; 0x3872 <HardwareSerial::write(unsigned char)+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    387e:	e0 5c       	subi	r30, 0xC0	; 192
    3880:	ff 4f       	sbci	r31, 0xFF	; 255
    3882:	80 81       	ld	r24, Z
    3884:	91 81       	ldd	r25, Z+1	; 0x01
    3886:	e0 54       	subi	r30, 0x40	; 64
    3888:	f0 40       	sbci	r31, 0x00	; 0
    388a:	e8 0f       	add	r30, r24
    388c:	f9 1f       	adc	r31, r25
    388e:	60 83       	st	Z, r22
  _tx_buffer->head = i;
    3890:	ee 85       	ldd	r30, Y+14	; 0x0e
    3892:	ff 85       	ldd	r31, Y+15	; 0x0f
    3894:	e0 5c       	subi	r30, 0xC0	; 192
    3896:	ff 4f       	sbci	r31, 0xFF	; 255
    3898:	31 83       	std	Z+1, r19	; 0x01
    389a:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    389c:	ee 89       	ldd	r30, Y+22	; 0x16
    389e:	ff 89       	ldd	r31, Y+23	; 0x17
    38a0:	20 81       	ld	r18, Z
    38a2:	81 e0       	ldi	r24, 0x01	; 1
    38a4:	90 e0       	ldi	r25, 0x00	; 0
    38a6:	0f 8c       	ldd	r0, Y+31	; 0x1f
    38a8:	02 c0       	rjmp	.+4      	; 0x38ae <HardwareSerial::write(unsigned char)+0x60>
    38aa:	88 0f       	add	r24, r24
    38ac:	99 1f       	adc	r25, r25
    38ae:	0a 94       	dec	r0
    38b0:	e2 f7       	brpl	.-8      	; 0x38aa <HardwareSerial::write(unsigned char)+0x5c>
    38b2:	28 2b       	or	r18, r24
    38b4:	20 83       	st	Z, r18
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
    38b6:	81 e0       	ldi	r24, 0x01	; 1
    38b8:	89 a3       	std	Y+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
    38ba:	ec 89       	ldd	r30, Y+20	; 0x14
    38bc:	fd 89       	ldd	r31, Y+21	; 0x15
    38be:	80 81       	ld	r24, Z
    38c0:	80 64       	ori	r24, 0x40	; 64
    38c2:	80 83       	st	Z, r24
  
  return 1;
}
    38c4:	81 e0       	ldi	r24, 0x01	; 1
    38c6:	90 e0       	ldi	r25, 0x00	; 0
    38c8:	df 91       	pop	r29
    38ca:	cf 91       	pop	r28
    38cc:	08 95       	ret

000038ce <global constructors keyed to rx_buffer>:
  public:
    Print() : write_error(0) {}
    38ce:	10 92 75 04 	sts	0x0475, r1
    38d2:	10 92 74 04 	sts	0x0474, r1
    38d6:	88 ee       	ldi	r24, 0xE8	; 232
    38d8:	93 e0       	ldi	r25, 0x03	; 3
    38da:	a0 e0       	ldi	r26, 0x00	; 0
    38dc:	b0 e0       	ldi	r27, 0x00	; 0
    38de:	80 93 76 04 	sts	0x0476, r24
    38e2:	90 93 77 04 	sts	0x0477, r25
    38e6:	a0 93 78 04 	sts	0x0478, r26
    38ea:	b0 93 79 04 	sts	0x0479, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    38ee:	8b ee       	ldi	r24, 0xEB	; 235
    38f0:	91 e0       	ldi	r25, 0x01	; 1
    38f2:	90 93 73 04 	sts	0x0473, r25
    38f6:	80 93 72 04 	sts	0x0472, r24
{
  _rx_buffer = rx_buffer;
    38fa:	8a ee       	ldi	r24, 0xEA	; 234
    38fc:	93 e0       	ldi	r25, 0x03	; 3
    38fe:	90 93 7f 04 	sts	0x047F, r25
    3902:	80 93 7e 04 	sts	0x047E, r24
  _tx_buffer = tx_buffer;
    3906:	8e e2       	ldi	r24, 0x2E	; 46
    3908:	94 e0       	ldi	r25, 0x04	; 4
    390a:	90 93 81 04 	sts	0x0481, r25
    390e:	80 93 80 04 	sts	0x0480, r24
  _ubrrh = ubrrh;
    3912:	85 ec       	ldi	r24, 0xC5	; 197
    3914:	90 e0       	ldi	r25, 0x00	; 0
    3916:	90 93 83 04 	sts	0x0483, r25
    391a:	80 93 82 04 	sts	0x0482, r24
  _ubrrl = ubrrl;
    391e:	84 ec       	ldi	r24, 0xC4	; 196
    3920:	90 e0       	ldi	r25, 0x00	; 0
    3922:	90 93 85 04 	sts	0x0485, r25
    3926:	80 93 84 04 	sts	0x0484, r24
  _ucsra = ucsra;
    392a:	80 ec       	ldi	r24, 0xC0	; 192
    392c:	90 e0       	ldi	r25, 0x00	; 0
    392e:	90 93 87 04 	sts	0x0487, r25
    3932:	80 93 86 04 	sts	0x0486, r24
  _ucsrb = ucsrb;
    3936:	81 ec       	ldi	r24, 0xC1	; 193
    3938:	90 e0       	ldi	r25, 0x00	; 0
    393a:	90 93 89 04 	sts	0x0489, r25
    393e:	80 93 88 04 	sts	0x0488, r24
  _ucsrc = ucsrc;
    3942:	82 ec       	ldi	r24, 0xC2	; 194
    3944:	90 e0       	ldi	r25, 0x00	; 0
    3946:	90 93 8b 04 	sts	0x048B, r25
    394a:	80 93 8a 04 	sts	0x048A, r24
  _udr = udr;
    394e:	86 ec       	ldi	r24, 0xC6	; 198
    3950:	90 e0       	ldi	r25, 0x00	; 0
    3952:	90 93 8d 04 	sts	0x048D, r25
    3956:	80 93 8c 04 	sts	0x048C, r24
  _rxen = rxen;
    395a:	84 e0       	ldi	r24, 0x04	; 4
    395c:	80 93 8e 04 	sts	0x048E, r24
  _txen = txen;
    3960:	83 e0       	ldi	r24, 0x03	; 3
    3962:	80 93 8f 04 	sts	0x048F, r24
  _rxcie = rxcie;
    3966:	87 e0       	ldi	r24, 0x07	; 7
    3968:	80 93 90 04 	sts	0x0490, r24
  _udrie = udrie;
    396c:	85 e0       	ldi	r24, 0x05	; 5
    396e:	80 93 91 04 	sts	0x0491, r24
  _u2x = u2x;
    3972:	81 e0       	ldi	r24, 0x01	; 1
    3974:	80 93 92 04 	sts	0x0492, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    3978:	08 95       	ret

0000397a <main>:
#include <Arduino.h>

int main(void)
    397a:	cf 93       	push	r28
    397c:	df 93       	push	r29
{
	init();
    397e:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    3982:	0e 94 49 14 	call	0x2892	; 0x2892 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    3986:	cb e8       	ldi	r28, 0x8B	; 139
    3988:	da e1       	ldi	r29, 0x1A	; 26
#endif
	
	setup();
    
	for (;;) {
		loop();
    398a:	0e 94 17 14 	call	0x282e	; 0x282e <loop>
		if (serialEventRun) serialEventRun();
    398e:	20 97       	sbiw	r28, 0x00	; 0
    3990:	e1 f3       	breq	.-8      	; 0x398a <main+0x10>
    3992:	0e 94 8b 1a 	call	0x3516	; 0x3516 <serialEventRun()>
    3996:	f9 cf       	rjmp	.-14     	; 0x398a <main+0x10>

00003998 <Print::write(unsigned char const*, unsigned int)>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    3998:	cf 92       	push	r12
    399a:	df 92       	push	r13
    399c:	ef 92       	push	r14
    399e:	ff 92       	push	r15
    39a0:	0f 93       	push	r16
    39a2:	1f 93       	push	r17
    39a4:	cf 93       	push	r28
    39a6:	df 93       	push	r29
    39a8:	7c 01       	movw	r14, r24
    39aa:	6b 01       	movw	r12, r22
    39ac:	8a 01       	movw	r16, r20
    39ae:	c0 e0       	ldi	r28, 0x00	; 0
    39b0:	d0 e0       	ldi	r29, 0x00	; 0
    39b2:	0f c0       	rjmp	.+30     	; 0x39d2 <Print::write(unsigned char const*, unsigned int)+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    39b4:	d6 01       	movw	r26, r12
    39b6:	6d 91       	ld	r22, X+
    39b8:	6d 01       	movw	r12, r26
    39ba:	d7 01       	movw	r26, r14
    39bc:	ed 91       	ld	r30, X+
    39be:	fc 91       	ld	r31, X
    39c0:	01 90       	ld	r0, Z+
    39c2:	f0 81       	ld	r31, Z
    39c4:	e0 2d       	mov	r30, r0
    39c6:	c7 01       	movw	r24, r14
    39c8:	09 95       	icall
    39ca:	c8 0f       	add	r28, r24
    39cc:	d9 1f       	adc	r29, r25
    39ce:	01 50       	subi	r16, 0x01	; 1
    39d0:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    39d2:	01 15       	cp	r16, r1
    39d4:	11 05       	cpc	r17, r1
    39d6:	71 f7       	brne	.-36     	; 0x39b4 <Print::write(unsigned char const*, unsigned int)+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    39d8:	ce 01       	movw	r24, r28
    39da:	df 91       	pop	r29
    39dc:	cf 91       	pop	r28
    39de:	1f 91       	pop	r17
    39e0:	0f 91       	pop	r16
    39e2:	ff 90       	pop	r15
    39e4:	ef 90       	pop	r14
    39e6:	df 90       	pop	r13
    39e8:	cf 90       	pop	r12
    39ea:	08 95       	ret

000039ec <Print::print(__FlashStringHelper const*)>:

size_t Print::print(const __FlashStringHelper *ifsh)
    39ec:	ef 92       	push	r14
    39ee:	ff 92       	push	r15
    39f0:	0f 93       	push	r16
    39f2:	1f 93       	push	r17
    39f4:	cf 93       	push	r28
    39f6:	df 93       	push	r29
    39f8:	7c 01       	movw	r14, r24
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
    39fa:	8b 01       	movw	r16, r22
    39fc:	c0 e0       	ldi	r28, 0x00	; 0
    39fe:	d0 e0       	ldi	r29, 0x00	; 0
    3a00:	f8 01       	movw	r30, r16
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    3a02:	0f 5f       	subi	r16, 0xFF	; 255
    3a04:	1f 4f       	sbci	r17, 0xFF	; 255
    3a06:	64 91       	lpm	r22, Z+
    if (c == 0) break;
    3a08:	66 23       	and	r22, r22
    3a0a:	59 f0       	breq	.+22     	; 0x3a22 <Print::print(__FlashStringHelper const*)+0x36>
    n += write(c);
    3a0c:	d7 01       	movw	r26, r14
    3a0e:	ed 91       	ld	r30, X+
    3a10:	fc 91       	ld	r31, X
    3a12:	01 90       	ld	r0, Z+
    3a14:	f0 81       	ld	r31, Z
    3a16:	e0 2d       	mov	r30, r0
    3a18:	c7 01       	movw	r24, r14
    3a1a:	09 95       	icall
    3a1c:	c8 0f       	add	r28, r24
    3a1e:	d9 1f       	adc	r29, r25
    3a20:	ef cf       	rjmp	.-34     	; 0x3a00 <Print::print(__FlashStringHelper const*)+0x14>
  }
  return n;
}
    3a22:	ce 01       	movw	r24, r28
    3a24:	df 91       	pop	r29
    3a26:	cf 91       	pop	r28
    3a28:	1f 91       	pop	r17
    3a2a:	0f 91       	pop	r16
    3a2c:	ff 90       	pop	r15
    3a2e:	ef 90       	pop	r14
    3a30:	08 95       	ret

00003a32 <Print::print(char)>:
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
    3a32:	dc 01       	movw	r26, r24
{
  return write(c);
    3a34:	ed 91       	ld	r30, X+
    3a36:	fc 91       	ld	r31, X
    3a38:	01 90       	ld	r0, Z+
    3a3a:	f0 81       	ld	r31, Z
    3a3c:	e0 2d       	mov	r30, r0
    3a3e:	09 95       	icall
}
    3a40:	08 95       	ret

00003a42 <Print::println()>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
    3a42:	ef 92       	push	r14
    3a44:	ff 92       	push	r15
    3a46:	0f 93       	push	r16
    3a48:	1f 93       	push	r17
    3a4a:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    3a4c:	dc 01       	movw	r26, r24
    3a4e:	ed 91       	ld	r30, X+
    3a50:	fc 91       	ld	r31, X
    3a52:	01 90       	ld	r0, Z+
    3a54:	f0 81       	ld	r31, Z
    3a56:	e0 2d       	mov	r30, r0
    3a58:	6d e0       	ldi	r22, 0x0D	; 13
    3a5a:	09 95       	icall
    3a5c:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    3a5e:	d8 01       	movw	r26, r16
    3a60:	ed 91       	ld	r30, X+
    3a62:	fc 91       	ld	r31, X
    3a64:	01 90       	ld	r0, Z+
    3a66:	f0 81       	ld	r31, Z
    3a68:	e0 2d       	mov	r30, r0
    3a6a:	c8 01       	movw	r24, r16
    3a6c:	6a e0       	ldi	r22, 0x0A	; 10
    3a6e:	09 95       	icall
    3a70:	9c 01       	movw	r18, r24
    3a72:	2e 0d       	add	r18, r14
    3a74:	3f 1d       	adc	r19, r15
    3a76:	c9 01       	movw	r24, r18
    3a78:	1f 91       	pop	r17
    3a7a:	0f 91       	pop	r16
    3a7c:	ff 90       	pop	r15
    3a7e:	ef 90       	pop	r14
    3a80:	08 95       	ret

00003a82 <Print::println(__FlashStringHelper const*)>:
size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
    3a82:	ef 92       	push	r14
    3a84:	ff 92       	push	r15
    3a86:	0f 93       	push	r16
    3a88:	1f 93       	push	r17
    3a8a:	7c 01       	movw	r14, r24
{
  size_t n = print(ifsh);
    3a8c:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <Print::print(__FlashStringHelper const*)>
    3a90:	8c 01       	movw	r16, r24
  n += println();
    3a92:	c7 01       	movw	r24, r14
    3a94:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <Print::println()>
    3a98:	9c 01       	movw	r18, r24
    3a9a:	20 0f       	add	r18, r16
    3a9c:	31 1f       	adc	r19, r17
  return n;
}
    3a9e:	c9 01       	movw	r24, r18
    3aa0:	1f 91       	pop	r17
    3aa2:	0f 91       	pop	r16
    3aa4:	ff 90       	pop	r15
    3aa6:	ef 90       	pop	r14
    3aa8:	08 95       	ret

00003aaa <Print::write(char const*)>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    3aaa:	cf 93       	push	r28
    3aac:	df 93       	push	r29
    3aae:	ec 01       	movw	r28, r24
      if (str == NULL) return 0;
    3ab0:	61 15       	cp	r22, r1
    3ab2:	71 05       	cpc	r23, r1
    3ab4:	19 f4       	brne	.+6      	; 0x3abc <Print::write(char const*)+0x12>
    3ab6:	20 e0       	ldi	r18, 0x00	; 0
    3ab8:	30 e0       	ldi	r19, 0x00	; 0
    3aba:	0f c0       	rjmp	.+30     	; 0x3ada <Print::write(char const*)+0x30>
      return write((const uint8_t *)str, strlen(str));
    3abc:	db 01       	movw	r26, r22
    3abe:	0d 90       	ld	r0, X+
    3ac0:	00 20       	and	r0, r0
    3ac2:	e9 f7       	brne	.-6      	; 0x3abe <Print::write(char const*)+0x14>
    3ac4:	11 97       	sbiw	r26, 0x01	; 1
    3ac6:	a6 1b       	sub	r26, r22
    3ac8:	b7 0b       	sbc	r27, r23
    3aca:	e8 81       	ld	r30, Y
    3acc:	f9 81       	ldd	r31, Y+1	; 0x01
    3ace:	02 80       	ldd	r0, Z+2	; 0x02
    3ad0:	f3 81       	ldd	r31, Z+3	; 0x03
    3ad2:	e0 2d       	mov	r30, r0
    3ad4:	ad 01       	movw	r20, r26
    3ad6:	09 95       	icall
    3ad8:	9c 01       	movw	r18, r24
    }
    3ada:	c9 01       	movw	r24, r18
    3adc:	df 91       	pop	r29
    3ade:	cf 91       	pop	r28
    3ae0:	08 95       	ret

00003ae2 <Print::printNumber(unsigned long, unsigned char)>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    3ae2:	4f 92       	push	r4
    3ae4:	5f 92       	push	r5
    3ae6:	7f 92       	push	r7
    3ae8:	8f 92       	push	r8
    3aea:	9f 92       	push	r9
    3aec:	af 92       	push	r10
    3aee:	bf 92       	push	r11
    3af0:	cf 92       	push	r12
    3af2:	df 92       	push	r13
    3af4:	ef 92       	push	r14
    3af6:	ff 92       	push	r15
    3af8:	0f 93       	push	r16
    3afa:	1f 93       	push	r17
    3afc:	df 93       	push	r29
    3afe:	cf 93       	push	r28
    3b00:	cd b7       	in	r28, 0x3d	; 61
    3b02:	de b7       	in	r29, 0x3e	; 62
    3b04:	a1 97       	sbiw	r28, 0x21	; 33
    3b06:	0f b6       	in	r0, 0x3f	; 63
    3b08:	f8 94       	cli
    3b0a:	de bf       	out	0x3e, r29	; 62
    3b0c:	0f be       	out	0x3f, r0	; 63
    3b0e:	cd bf       	out	0x3d, r28	; 61
    3b10:	2c 01       	movw	r4, r24
    3b12:	74 2e       	mov	r7, r20
    3b14:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    3b16:	22 30       	cpi	r18, 0x02	; 2
    3b18:	08 f4       	brcc	.+2      	; 0x3b1c <Print::printNumber(unsigned long, unsigned char)+0x3a>
    3b1a:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    3b1c:	19 a2       	std	Y+33, r1	; 0x21
    3b1e:	31 e2       	ldi	r19, 0x21	; 33
    3b20:	c3 2e       	mov	r12, r19
    3b22:	d1 2c       	mov	r13, r1
    3b24:	cc 0e       	add	r12, r28
    3b26:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    3b28:	82 2e       	mov	r8, r18
    3b2a:	99 24       	eor	r9, r9
    3b2c:	aa 24       	eor	r10, r10
    3b2e:	bb 24       	eor	r11, r11
    3b30:	67 2d       	mov	r22, r7
    3b32:	75 2f       	mov	r23, r21
    3b34:	a5 01       	movw	r20, r10
    3b36:	94 01       	movw	r18, r8
    3b38:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <__udivmodsi4>
    3b3c:	79 01       	movw	r14, r18
    3b3e:	8a 01       	movw	r16, r20
    char c = m - base * n;
    3b40:	c8 01       	movw	r24, r16
    3b42:	b7 01       	movw	r22, r14
    3b44:	a5 01       	movw	r20, r10
    3b46:	94 01       	movw	r18, r8
    3b48:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <__mulsi3>
    3b4c:	47 2d       	mov	r20, r7
    3b4e:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    3b50:	08 94       	sec
    3b52:	c1 08       	sbc	r12, r1
    3b54:	d1 08       	sbc	r13, r1
    3b56:	4a 30       	cpi	r20, 0x0A	; 10
    3b58:	14 f4       	brge	.+4      	; 0x3b5e <Print::printNumber(unsigned long, unsigned char)+0x7c>
    3b5a:	40 5d       	subi	r20, 0xD0	; 208
    3b5c:	01 c0       	rjmp	.+2      	; 0x3b60 <Print::printNumber(unsigned long, unsigned char)+0x7e>
    3b5e:	49 5c       	subi	r20, 0xC9	; 201
    3b60:	f6 01       	movw	r30, r12
    3b62:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    3b64:	e1 14       	cp	r14, r1
    3b66:	f1 04       	cpc	r15, r1
    3b68:	01 05       	cpc	r16, r1
    3b6a:	11 05       	cpc	r17, r1
    3b6c:	21 f0       	breq	.+8      	; 0x3b76 <Print::printNumber(unsigned long, unsigned char)+0x94>
    3b6e:	7e 2c       	mov	r7, r14
    3b70:	5f 2d       	mov	r21, r15
    3b72:	c8 01       	movw	r24, r16
    3b74:	dd cf       	rjmp	.-70     	; 0x3b30 <Print::printNumber(unsigned long, unsigned char)+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    3b76:	c2 01       	movw	r24, r4
    3b78:	b6 01       	movw	r22, r12
    3b7a:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <Print::write(char const*)>
}
    3b7e:	a1 96       	adiw	r28, 0x21	; 33
    3b80:	0f b6       	in	r0, 0x3f	; 63
    3b82:	f8 94       	cli
    3b84:	de bf       	out	0x3e, r29	; 62
    3b86:	0f be       	out	0x3f, r0	; 63
    3b88:	cd bf       	out	0x3d, r28	; 61
    3b8a:	cf 91       	pop	r28
    3b8c:	df 91       	pop	r29
    3b8e:	1f 91       	pop	r17
    3b90:	0f 91       	pop	r16
    3b92:	ff 90       	pop	r15
    3b94:	ef 90       	pop	r14
    3b96:	df 90       	pop	r13
    3b98:	cf 90       	pop	r12
    3b9a:	bf 90       	pop	r11
    3b9c:	af 90       	pop	r10
    3b9e:	9f 90       	pop	r9
    3ba0:	8f 90       	pop	r8
    3ba2:	7f 90       	pop	r7
    3ba4:	5f 90       	pop	r5
    3ba6:	4f 90       	pop	r4
    3ba8:	08 95       	ret

00003baa <Print::print(long, int)>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
    3baa:	cf 92       	push	r12
    3bac:	df 92       	push	r13
    3bae:	ef 92       	push	r14
    3bb0:	ff 92       	push	r15
    3bb2:	0f 93       	push	r16
    3bb4:	1f 93       	push	r17
    3bb6:	cf 93       	push	r28
    3bb8:	df 93       	push	r29
    3bba:	ec 01       	movw	r28, r24
    3bbc:	6a 01       	movw	r12, r20
    3bbe:	7b 01       	movw	r14, r22
{
  if (base == 0) {
    3bc0:	21 15       	cp	r18, r1
    3bc2:	31 05       	cpc	r19, r1
    3bc4:	41 f4       	brne	.+16     	; 0x3bd6 <Print::print(long, int)+0x2c>
    return write(n);
    3bc6:	e8 81       	ld	r30, Y
    3bc8:	f9 81       	ldd	r31, Y+1	; 0x01
    3bca:	01 90       	ld	r0, Z+
    3bcc:	f0 81       	ld	r31, Z
    3bce:	e0 2d       	mov	r30, r0
    3bd0:	64 2f       	mov	r22, r20
    3bd2:	09 95       	icall
    3bd4:	1f c0       	rjmp	.+62     	; 0x3c14 <Print::print(long, int)+0x6a>
  } else if (base == 10) {
    3bd6:	2a 30       	cpi	r18, 0x0A	; 10
    3bd8:	31 05       	cpc	r19, r1
    3bda:	d1 f4       	brne	.+52     	; 0x3c10 <Print::print(long, int)+0x66>
    if (n < 0) {
    3bdc:	77 ff       	sbrs	r23, 7
    3bde:	17 c0       	rjmp	.+46     	; 0x3c0e <Print::print(long, int)+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    3be0:	e8 81       	ld	r30, Y
    3be2:	f9 81       	ldd	r31, Y+1	; 0x01
    3be4:	01 90       	ld	r0, Z+
    3be6:	f0 81       	ld	r31, Z
    3be8:	e0 2d       	mov	r30, r0
    3bea:	6d e2       	ldi	r22, 0x2D	; 45
    3bec:	09 95       	icall
    3bee:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    3bf0:	44 27       	eor	r20, r20
    3bf2:	55 27       	eor	r21, r21
    3bf4:	ba 01       	movw	r22, r20
    3bf6:	4c 19       	sub	r20, r12
    3bf8:	5d 09       	sbc	r21, r13
    3bfa:	6e 09       	sbc	r22, r14
    3bfc:	7f 09       	sbc	r23, r15
    3bfe:	ce 01       	movw	r24, r28
    3c00:	2a e0       	ldi	r18, 0x0A	; 10
    3c02:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <Print::printNumber(unsigned long, unsigned char)>
    3c06:	98 01       	movw	r18, r16
    3c08:	28 0f       	add	r18, r24
    3c0a:	39 1f       	adc	r19, r25
    3c0c:	04 c0       	rjmp	.+8      	; 0x3c16 <Print::print(long, int)+0x6c>
    }
    return printNumber(n, 10);
    3c0e:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    3c10:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <Print::printNumber(unsigned long, unsigned char)>
    3c14:	9c 01       	movw	r18, r24
  }
}
    3c16:	c9 01       	movw	r24, r18
    3c18:	df 91       	pop	r29
    3c1a:	cf 91       	pop	r28
    3c1c:	1f 91       	pop	r17
    3c1e:	0f 91       	pop	r16
    3c20:	ff 90       	pop	r15
    3c22:	ef 90       	pop	r14
    3c24:	df 90       	pop	r13
    3c26:	cf 90       	pop	r12
    3c28:	08 95       	ret

00003c2a <Print::print(int, int)>:
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
    3c2a:	ef 92       	push	r14
    3c2c:	ff 92       	push	r15
    3c2e:	0f 93       	push	r16
    3c30:	1f 93       	push	r17
    3c32:	7b 01       	movw	r14, r22
    3c34:	9a 01       	movw	r18, r20
{
  return print((long) n, base);
    3c36:	00 27       	eor	r16, r16
    3c38:	f7 fc       	sbrc	r15, 7
    3c3a:	00 95       	com	r16
    3c3c:	10 2f       	mov	r17, r16
    3c3e:	b8 01       	movw	r22, r16
    3c40:	a7 01       	movw	r20, r14
    3c42:	0e 94 d5 1d 	call	0x3baa	; 0x3baa <Print::print(long, int)>
}
    3c46:	1f 91       	pop	r17
    3c48:	0f 91       	pop	r16
    3c4a:	ff 90       	pop	r15
    3c4c:	ef 90       	pop	r14
    3c4e:	08 95       	ret

00003c50 <Print::print(char const*)>:
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    3c50:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <Print::write(char const*)>
}
    3c54:	08 95       	ret

00003c56 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    3c56:	1f 92       	push	r1
    3c58:	0f 92       	push	r0
    3c5a:	0f b6       	in	r0, 0x3f	; 63
    3c5c:	0f 92       	push	r0
    3c5e:	11 24       	eor	r1, r1
    3c60:	2f 93       	push	r18
    3c62:	3f 93       	push	r19
    3c64:	4f 93       	push	r20
    3c66:	5f 93       	push	r21
    3c68:	6f 93       	push	r22
    3c6a:	7f 93       	push	r23
    3c6c:	8f 93       	push	r24
    3c6e:	9f 93       	push	r25
    3c70:	af 93       	push	r26
    3c72:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    3c74:	20 91 98 04 	lds	r18, 0x0498
    3c78:	30 91 99 04 	lds	r19, 0x0499
    3c7c:	40 91 9a 04 	lds	r20, 0x049A
    3c80:	50 91 9b 04 	lds	r21, 0x049B
	unsigned char f = timer0_fract;
    3c84:	70 91 9c 04 	lds	r23, 0x049C

	m += MILLIS_INC;
    3c88:	da 01       	movw	r26, r20
    3c8a:	c9 01       	movw	r24, r18
    3c8c:	40 96       	adiw	r24, 0x10	; 16
    3c8e:	a1 1d       	adc	r26, r1
    3c90:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    3c92:	67 2f       	mov	r22, r23
    3c94:	60 5d       	subi	r22, 0xD0	; 208
	if (f >= FRACT_MAX) {
    3c96:	6d 37       	cpi	r22, 0x7D	; 125
    3c98:	30 f0       	brcs	.+12     	; 0x3ca6 <__vector_16+0x50>
		f -= FRACT_MAX;
    3c9a:	6d 57       	subi	r22, 0x7D	; 125
		m += 1;
    3c9c:	da 01       	movw	r26, r20
    3c9e:	c9 01       	movw	r24, r18
    3ca0:	41 96       	adiw	r24, 0x11	; 17
    3ca2:	a1 1d       	adc	r26, r1
    3ca4:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    3ca6:	60 93 9c 04 	sts	0x049C, r22
	timer0_millis = m;
    3caa:	80 93 98 04 	sts	0x0498, r24
    3cae:	90 93 99 04 	sts	0x0499, r25
    3cb2:	a0 93 9a 04 	sts	0x049A, r26
    3cb6:	b0 93 9b 04 	sts	0x049B, r27
	timer0_overflow_count++;
    3cba:	80 91 94 04 	lds	r24, 0x0494
    3cbe:	90 91 95 04 	lds	r25, 0x0495
    3cc2:	a0 91 96 04 	lds	r26, 0x0496
    3cc6:	b0 91 97 04 	lds	r27, 0x0497
    3cca:	01 96       	adiw	r24, 0x01	; 1
    3ccc:	a1 1d       	adc	r26, r1
    3cce:	b1 1d       	adc	r27, r1
    3cd0:	80 93 94 04 	sts	0x0494, r24
    3cd4:	90 93 95 04 	sts	0x0495, r25
    3cd8:	a0 93 96 04 	sts	0x0496, r26
    3cdc:	b0 93 97 04 	sts	0x0497, r27
}
    3ce0:	bf 91       	pop	r27
    3ce2:	af 91       	pop	r26
    3ce4:	9f 91       	pop	r25
    3ce6:	8f 91       	pop	r24
    3ce8:	7f 91       	pop	r23
    3cea:	6f 91       	pop	r22
    3cec:	5f 91       	pop	r21
    3cee:	4f 91       	pop	r20
    3cf0:	3f 91       	pop	r19
    3cf2:	2f 91       	pop	r18
    3cf4:	0f 90       	pop	r0
    3cf6:	0f be       	out	0x3f, r0	; 63
    3cf8:	0f 90       	pop	r0
    3cfa:	1f 90       	pop	r1
    3cfc:	18 95       	reti

00003cfe <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    3cfe:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    3d00:	84 b5       	in	r24, 0x24	; 36
    3d02:	82 60       	ori	r24, 0x02	; 2
    3d04:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    3d06:	84 b5       	in	r24, 0x24	; 36
    3d08:	81 60       	ori	r24, 0x01	; 1
    3d0a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    3d0c:	85 b5       	in	r24, 0x25	; 37
    3d0e:	82 60       	ori	r24, 0x02	; 2
    3d10:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    3d12:	85 b5       	in	r24, 0x25	; 37
    3d14:	81 60       	ori	r24, 0x01	; 1
    3d16:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    3d18:	ee e6       	ldi	r30, 0x6E	; 110
    3d1a:	f0 e0       	ldi	r31, 0x00	; 0
    3d1c:	80 81       	ld	r24, Z
    3d1e:	81 60       	ori	r24, 0x01	; 1
    3d20:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    3d22:	e1 e8       	ldi	r30, 0x81	; 129
    3d24:	f0 e0       	ldi	r31, 0x00	; 0
    3d26:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    3d28:	80 81       	ld	r24, Z
    3d2a:	82 60       	ori	r24, 0x02	; 2
    3d2c:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    3d2e:	e0 e8       	ldi	r30, 0x80	; 128
    3d30:	f0 e0       	ldi	r31, 0x00	; 0
    3d32:	80 81       	ld	r24, Z
    3d34:	81 60       	ori	r24, 0x01	; 1
    3d36:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    3d38:	e1 eb       	ldi	r30, 0xB1	; 177
    3d3a:	f0 e0       	ldi	r31, 0x00	; 0
    3d3c:	80 81       	ld	r24, Z
    3d3e:	84 60       	ori	r24, 0x04	; 4
    3d40:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    3d42:	e0 eb       	ldi	r30, 0xB0	; 176
    3d44:	f0 e0       	ldi	r31, 0x00	; 0
    3d46:	80 81       	ld	r24, Z
    3d48:	81 60       	ori	r24, 0x01	; 1
    3d4a:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    3d4c:	ea e7       	ldi	r30, 0x7A	; 122
    3d4e:	f0 e0       	ldi	r31, 0x00	; 0
    3d50:	80 81       	ld	r24, Z
    3d52:	84 60       	ori	r24, 0x04	; 4
    3d54:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    3d56:	80 81       	ld	r24, Z
    3d58:	82 60       	ori	r24, 0x02	; 2
    3d5a:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    3d5c:	80 81       	ld	r24, Z
    3d5e:	81 60       	ori	r24, 0x01	; 1
    3d60:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    3d62:	80 81       	ld	r24, Z
    3d64:	80 68       	ori	r24, 0x80	; 128
    3d66:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    3d68:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    3d6c:	08 95       	ret

00003d6e <__mulsi3>:
    3d6e:	62 9f       	mul	r22, r18
    3d70:	d0 01       	movw	r26, r0
    3d72:	73 9f       	mul	r23, r19
    3d74:	f0 01       	movw	r30, r0
    3d76:	82 9f       	mul	r24, r18
    3d78:	e0 0d       	add	r30, r0
    3d7a:	f1 1d       	adc	r31, r1
    3d7c:	64 9f       	mul	r22, r20
    3d7e:	e0 0d       	add	r30, r0
    3d80:	f1 1d       	adc	r31, r1
    3d82:	92 9f       	mul	r25, r18
    3d84:	f0 0d       	add	r31, r0
    3d86:	83 9f       	mul	r24, r19
    3d88:	f0 0d       	add	r31, r0
    3d8a:	74 9f       	mul	r23, r20
    3d8c:	f0 0d       	add	r31, r0
    3d8e:	65 9f       	mul	r22, r21
    3d90:	f0 0d       	add	r31, r0
    3d92:	99 27       	eor	r25, r25
    3d94:	72 9f       	mul	r23, r18
    3d96:	b0 0d       	add	r27, r0
    3d98:	e1 1d       	adc	r30, r1
    3d9a:	f9 1f       	adc	r31, r25
    3d9c:	63 9f       	mul	r22, r19
    3d9e:	b0 0d       	add	r27, r0
    3da0:	e1 1d       	adc	r30, r1
    3da2:	f9 1f       	adc	r31, r25
    3da4:	bd 01       	movw	r22, r26
    3da6:	cf 01       	movw	r24, r30
    3da8:	11 24       	eor	r1, r1
    3daa:	08 95       	ret

00003dac <__udivmodhi4>:
    3dac:	aa 1b       	sub	r26, r26
    3dae:	bb 1b       	sub	r27, r27
    3db0:	51 e1       	ldi	r21, 0x11	; 17
    3db2:	07 c0       	rjmp	.+14     	; 0x3dc2 <__udivmodhi4_ep>

00003db4 <__udivmodhi4_loop>:
    3db4:	aa 1f       	adc	r26, r26
    3db6:	bb 1f       	adc	r27, r27
    3db8:	a6 17       	cp	r26, r22
    3dba:	b7 07       	cpc	r27, r23
    3dbc:	10 f0       	brcs	.+4      	; 0x3dc2 <__udivmodhi4_ep>
    3dbe:	a6 1b       	sub	r26, r22
    3dc0:	b7 0b       	sbc	r27, r23

00003dc2 <__udivmodhi4_ep>:
    3dc2:	88 1f       	adc	r24, r24
    3dc4:	99 1f       	adc	r25, r25
    3dc6:	5a 95       	dec	r21
    3dc8:	a9 f7       	brne	.-22     	; 0x3db4 <__udivmodhi4_loop>
    3dca:	80 95       	com	r24
    3dcc:	90 95       	com	r25
    3dce:	bc 01       	movw	r22, r24
    3dd0:	cd 01       	movw	r24, r26
    3dd2:	08 95       	ret

00003dd4 <__divmodhi4>:
    3dd4:	97 fb       	bst	r25, 7
    3dd6:	09 2e       	mov	r0, r25
    3dd8:	07 26       	eor	r0, r23
    3dda:	0a d0       	rcall	.+20     	; 0x3df0 <__divmodhi4_neg1>
    3ddc:	77 fd       	sbrc	r23, 7
    3dde:	04 d0       	rcall	.+8      	; 0x3de8 <__divmodhi4_neg2>
    3de0:	e5 df       	rcall	.-54     	; 0x3dac <__udivmodhi4>
    3de2:	06 d0       	rcall	.+12     	; 0x3df0 <__divmodhi4_neg1>
    3de4:	00 20       	and	r0, r0
    3de6:	1a f4       	brpl	.+6      	; 0x3dee <__divmodhi4_exit>

00003de8 <__divmodhi4_neg2>:
    3de8:	70 95       	com	r23
    3dea:	61 95       	neg	r22
    3dec:	7f 4f       	sbci	r23, 0xFF	; 255

00003dee <__divmodhi4_exit>:
    3dee:	08 95       	ret

00003df0 <__divmodhi4_neg1>:
    3df0:	f6 f7       	brtc	.-4      	; 0x3dee <__divmodhi4_exit>
    3df2:	90 95       	com	r25
    3df4:	81 95       	neg	r24
    3df6:	9f 4f       	sbci	r25, 0xFF	; 255
    3df8:	08 95       	ret

00003dfa <__udivmodsi4>:
    3dfa:	a1 e2       	ldi	r26, 0x21	; 33
    3dfc:	1a 2e       	mov	r1, r26
    3dfe:	aa 1b       	sub	r26, r26
    3e00:	bb 1b       	sub	r27, r27
    3e02:	fd 01       	movw	r30, r26
    3e04:	0d c0       	rjmp	.+26     	; 0x3e20 <__udivmodsi4_ep>

00003e06 <__udivmodsi4_loop>:
    3e06:	aa 1f       	adc	r26, r26
    3e08:	bb 1f       	adc	r27, r27
    3e0a:	ee 1f       	adc	r30, r30
    3e0c:	ff 1f       	adc	r31, r31
    3e0e:	a2 17       	cp	r26, r18
    3e10:	b3 07       	cpc	r27, r19
    3e12:	e4 07       	cpc	r30, r20
    3e14:	f5 07       	cpc	r31, r21
    3e16:	20 f0       	brcs	.+8      	; 0x3e20 <__udivmodsi4_ep>
    3e18:	a2 1b       	sub	r26, r18
    3e1a:	b3 0b       	sbc	r27, r19
    3e1c:	e4 0b       	sbc	r30, r20
    3e1e:	f5 0b       	sbc	r31, r21

00003e20 <__udivmodsi4_ep>:
    3e20:	66 1f       	adc	r22, r22
    3e22:	77 1f       	adc	r23, r23
    3e24:	88 1f       	adc	r24, r24
    3e26:	99 1f       	adc	r25, r25
    3e28:	1a 94       	dec	r1
    3e2a:	69 f7       	brne	.-38     	; 0x3e06 <__udivmodsi4_loop>
    3e2c:	60 95       	com	r22
    3e2e:	70 95       	com	r23
    3e30:	80 95       	com	r24
    3e32:	90 95       	com	r25
    3e34:	9b 01       	movw	r18, r22
    3e36:	ac 01       	movw	r20, r24
    3e38:	bd 01       	movw	r22, r26
    3e3a:	cf 01       	movw	r24, r30
    3e3c:	08 95       	ret

00003e3e <__tablejump2__>:
    3e3e:	ee 0f       	add	r30, r30
    3e40:	ff 1f       	adc	r31, r31

00003e42 <__tablejump__>:
    3e42:	05 90       	lpm	r0, Z+
    3e44:	f4 91       	lpm	r31, Z+
    3e46:	e0 2d       	mov	r30, r0
    3e48:	09 94       	ijmp

00003e4a <_exit>:
    3e4a:	f8 94       	cli

00003e4c <__stop_program>:
    3e4c:	ff cf       	rjmp	.-2      	; 0x3e4c <__stop_program>
