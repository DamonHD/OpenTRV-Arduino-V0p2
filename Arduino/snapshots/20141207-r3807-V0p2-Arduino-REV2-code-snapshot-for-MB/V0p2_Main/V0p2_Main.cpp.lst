
/var/folders/km/s_tzntf16nzg5bdh5n6g6lz40000gn/T/build5508500540474177742.tmp/V0p2_Main.cpp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011a  00800100  00007cfe  00007d92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007cfe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002e6  0080021a  0080021a  00007eac  2**0
                  ALLOC
  3 .debug_aranges 00001300  00000000  00000000  00007eac  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00003551  00000000  00000000  000091ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0001d7ed  00000000  00000000  0000c6fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00005e00  00000000  00000000  00029eea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0001499c  00000000  00000000  0002fcea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000021e0  00000000  00000000  00044688  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000870f  00000000  00000000  00046868  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000bbce  00000000  00000000  0004ef77  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 000ac113  00000000  00000000  0005ab45  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000016e0  00000000  00000000  00106c58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
    virtual bool isValid(const uint8_t value) const { return(value <= 100); }

    // Returns true if (re)calibrating/(re)initialising/(re)syncing.
    // The target valve position is not lost while this is true.
    // By default there is no recalibration step.
    virtual bool isRecalibrating() const { return(false); }
       0:	0c 94 01 04 	jmp	0x802	; 0x802 <__ctors_end>
#endif


// True if FHT8V valve is believed to be open under instruction from this system; false if not in sync.
static bool FHT8V_isValveOpen;
bool getFHT8V_isValveOpen() { return(syncedWithFHT8V && FHT8V_isValveOpen); }
       4:	0c 94 29 04 	jmp	0x852	; 0x852 <__bad_interrupt>
// Count of dropped inbound stats message due to insufficient queue space.
// Must only be accessed under a lock (ATOMIC_BLOCK).
static uint16_t inboundStatsQueueOverrun = 0;

// Get count of dropped inbound stats messages due to insufficient queue space.
uint16_t getInboundStatsQueueOverrun()
       8:	0c 94 29 04 	jmp	0x852	; 0x852 <__bad_interrupt>
                         [not_bodse] "i" (~_BV(BODSE))); \
} while (0)
#endif

// Sleep with BOD disabled in power-save mode; will wake on any interrupt.
void sleepPwrSaveWithBODDisabled()
       c:	0c 94 29 04 	jmp	0x852	; 0x852 <__bad_interrupt>
uint_least8_t getHoursLT() { return(getMinutesSinceMidnightLT() / 60); }

// Get whole days since the start of 2000/01/01 (ie the midnight between 1999 and 2000), local time.
// This will roll in about 2179, by which time I will not care.
// Thread-safe and ISR-safe.
uint_least16_t getDaysSince1999LT()
      10:	0c 94 29 04 	jmp	0x852	; 0x852 <__bad_interrupt>
    { eeprom_smart_erase_byte((uint8_t*)(EE_START_SIMPLE_SCHEDULE0_ON + which)); }
  }

// Returns true if any simple schedule is set, false otherwise.
// This implementation just checks for any valid schedule 'on' time.
bool isAnySimpleScheduleSet()
      14:	0c 94 61 07 	jmp	0xec2	; 0xec2 <__vector_5>
  Serial.print(m);
  Serial.print(':'); Serial.print(s);
  Serial.print(':'); Serial.print(ss);
  _flush();
  if(neededWaking) { powerDownSerial(); }
  }
      18:	0c 94 4d 15 	jmp	0x2a9a	; 0x2a9a <__vector_6>
// Thread-safe.
void resetCLIActiveTimer() { CLITimeoutM = CLI_DEFAULT_TIMEOUT_M; }

// Returns true if the CLI is active, at least intermittently.
// Thread-safe.
bool isCLIActive() { return(0 != CLITimeoutM); }
      1c:	0c 94 29 04 	jmp	0x852	; 0x852 <__bad_interrupt>
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual T get() const = 0;

    // Returns true if this sensor reading value passed is potentially valid, eg in-range.
    // Default is to always return true, ie all values potentially valid.
    virtual bool isValid(T value) const { return(true); }
      20:	0c 94 29 04 	jmp	0x852	; 0x852 <__bad_interrupt>
  // set address of targeted slave
  txAddress = address;
  // reset tx buffer iterator vars
  txBufferIndex = 0;
  txBufferLength = 0;
}
      24:	0c 94 1d 15 	jmp	0x2a3a	; 0x2a3a <__vector_9>
 */
void twi_setAddress(uint8_t address)
{
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
}
      28:	0c 94 29 04 	jmp	0x852	; 0x852 <__bad_interrupt>
    }

    n += p.write(']');

    return n;
}
      2c:	0c 94 29 04 	jmp	0x852	; 0x852 <__bad_interrupt>

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
      30:	0c 94 29 04 	jmp	0x852	; 0x852 <__bad_interrupt>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
      34:	0c 94 29 04 	jmp	0x852	; 0x852 <__bad_interrupt>
  free(ptr);
}

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
void __cxa_guard_abort (__guard *) {}; 
      38:	0c 94 29 04 	jmp	0x852	; 0x852 <__bad_interrupt>
  size_t n = print(ifsh);
  n += println();
  return n;
}

size_t Print::print(const Printable& x)
      3c:	0c 94 29 04 	jmp	0x852	; 0x852 <__bad_interrupt>
	timer0_millis = m;
	timer0_overflow_count++;
}

unsigned long millis()
{
      40:	0c 94 68 3d 	jmp	0x7ad0	; 0x7ad0 <__vector_16>
      44:	0c 94 29 04 	jmp	0x852	; 0x852 <__bad_interrupt>
      48:	0c 94 4d 39 	jmp	0x729a	; 0x729a <__vector_18>
      4c:	0c 94 9b 39 	jmp	0x7336	; 0x7336 <__vector_19>
      50:	0c 94 29 04 	jmp	0x852	; 0x852 <__bad_interrupt>
      54:	0c 94 f2 15 	jmp	0x2be4	; 0x2be4 <__vector_21>
      58:	0c 94 29 04 	jmp	0x852	; 0x852 <__bad_interrupt>
      5c:	0c 94 29 04 	jmp	0x852	; 0x852 <__bad_interrupt>
      60:	0c 94 6f 35 	jmp	0x6ade	; 0x6ade <__vector_24>
      64:	0c 94 29 04 	jmp	0x852	; 0x852 <__bad_interrupt>

00000068 <FHT8V_RFM22_Reg_Values>:
      68:	06 00 08 00 30 00 33 06 34 08 35 10 36 aa 37 cc     ....0.3.4.5.6.7.
      78:	38 cc 39 cc 6d 0b 6e 28 6f f5 70 20 71 21 72 20     8.9.m.n(o.p q!r 
      88:	73 00 74 00 75 73 76 64 77 00 79 23 7a 01 1c c1     s.t.usvdw.y#z...
      98:	1d 40 1e 0a 1f 03 20 96 21 00 22 da 23 74 24 00     .@.... .!.".#t$.
      a8:	25 dc 2a 24 2c 28 2d fa 2e 29 69 60 ff ff           %.*$,(-..)i`..

000000b6 <FHT8VPollSyncAndTX_Next(bool)::__c>:
      b6:	46 48 54 38 56 20 54 58 00                          FHT8V TX.

000000bf <doSync(bool)::__c>:
      bf:	46 48 54 38 56 20 53 59 4e 43 20 46 49 4e 41 4c     FHT8V SYNC FINAL
	...

000000d0 <doSync(bool)::__c>:
      d0:	46 48 54 38 56 20 53 59 4e 43 2e 2e 2e 00           FHT8V SYNC....

000000de <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)::__c>:
      de:	46 48 54 38 56 20 66 72 61 6d 65 20 6e 6f 74 20     FHT8V frame not 
      ee:	69 6e 69 74 69 61 6c 69 73 65 64 00                 initialised.

000000fa <ensureIDCreated(bool)::__c>:
      fa:	20 2e 2e 2e 20 00                                    ... .

00000100 <ensureIDCreated(bool)::__c>:
     100:	49 6e 76 61 6c 69 64 20 49 44 20 62 79 74 65 20     Invalid ID byte 
	...

00000111 <ensureIDCreated(bool)::__c>:
     111:	20 2e 2e 2e 20 00                                    ... .

00000117 <ensureIDCreated(bool)::__c>:
     117:	53 65 74 74 69 6e 67 20 49 44 20 62 79 74 65 20     Setting ID byte 
	...

00000128 <RFM22CheckConnected()::__c>:
     128:	52 46 4d 32 32 20 62 61 64 20 74 79 70 65 3a 20     RFM22 bad type: 
	...

00000139 <RFM22CheckConnected()::__c>:
     139:	52 46 4d 32 32 20 62 61 64 20 76 65 72 73 69 6f     RFM22 bad versio
     149:	6e 3a 20 00                                         n: .

0000014d <pollCLI(unsigned char)::__c>:
     14d:	4f 4b 00                                            OK.

00000150 <pollCLI(unsigned char)::__c>:
     150:	4e 6f 74 20 66 69 6e 69 73 68 65 64 2e 00           Not finished..

0000015e <pollCLI(unsigned char)::__c>:
     15e:	5a 61 70 70 65 64 2e 00                             Zapped..

00000166 <pollCLI(unsigned char)::__c>:
     166:	4f 76 65 72 72 75 6e 73 3a 20 00                    Overruns: .

00000171 <pollCLI(unsigned char)::__c>:
     171:	52 65 73 65 74 73 3a 20 00                          Resets: .

0000017a <pollCLI(unsigned char)::__c>:
     17a:	6c 61 73 74 00                                      last.

0000017f <pollCLI(unsigned char)::__c>:
     17f:	73 6d 6f 6f 74 68 65 64 00                          smoothed.

00000188 <pollCLI(unsigned char)::__c>:
     188:	52 48 25 00                                         RH%.

0000018c <pollCLI(unsigned char)::__c>:
     18c:	6f 63 63 25 00                                      occ%.

00000191 <pollCLI(unsigned char)::__c>:
     191:	61 6d 62 6c 00                                      ambl.

00000196 <pollCLI(unsigned char)::__c>:
     196:	3f 20 66 6f 72 20 43 4c 49 20 68 65 6c 70 00        ? for CLI help.

000001a5 <dumpCLIUsage(unsigned char)::__c>:
     1a5:	5a 61 70 20 73 74 61 74 73 00                       Zap stats.

000001af <dumpCLIUsage(unsigned char)::__c>:
     1af:	58 6d 69 74 20 73 65 63 75 72 69 74 79 20 6c 65     Xmit security le
     1bf:	76 65 6c 3b 20 30 20 61 6c 77 61 79 73 2c 20 32     vel; 0 always, 2
     1cf:	35 35 20 6e 65 76 65 72 00                          55 never.

000001d8 <dumpCLIUsage(unsigned char)::__c>:
     1d8:	63 6f 64 65 2f 62 6f 61 72 64 20 56 65 72 73 69     code/board Versi
     1e8:	6f 6e 00                                            on.

000001eb <dumpCLIUsage(unsigned char)::__c>:
     1eb:	57 61 72 6d 00                                      Warm.

000001f0 <dumpCLIUsage(unsigned char)::__c>:
     1f0:	73 65 74 20 32 34 68 20 54 69 6d 65 00              set 24h Time.

000001fd <dumpCLIUsage(unsigned char)::__c>:
     1fd:	54 20 48 48 20 4d 4d 00                             T HH MM.

00000205 <dumpCLIUsage(unsigned char)::__c>:
     205:	73 68 6f 77 20 53 74 61 74 75 73 00                 show Status.

00000211 <dumpCLIUsage(unsigned char)::__c>:
     211:	51 75 69 63 6b 20 48 65 61 74 00                    Quick Heat.

0000021c <dumpCLIUsage(unsigned char)::__c>:
     21c:	72 65 73 65 74 20 4f 70 65 6e 20 25 00              reset Open %.

00000229 <dumpCLIUsage(unsigned char)::__c>:
     229:	6d 69 6e 20 25 20 66 6f 72 20 76 61 6c 76 65 20     min % for valve 
     239:	74 6f 20 62 65 20 4f 70 65 6e 00                    to be Open.

00000244 <dumpCLIUsage(unsigned char)::__c>:
     244:	4f 20 50 50 00                                      O PP.

00000249 <dumpCLIUsage(unsigned char)::__c>:
     249:	50 72 6f 67 72 61 6d 3a 20 77 61 72 6d 20 64 61     Program: warm da
     259:	69 6c 79 20 73 74 61 72 74 69 6e 67 20 61 74 20     ily starting at 
     269:	48 48 20 4d 4d 20 73 63 68 65 64 75 6c 65 20 53     HH MM schedule S
	...

0000027a <dumpCLIUsage(unsigned char)::__c>:
     27a:	50 20 48 48 20 4d 4d 20 53 00                       P HH MM S.

00000284 <dumpCLIUsage(unsigned char)::__c>:
     284:	4c 65 61 72 6e 20 64 61 69 6c 79 20 77 61 72 6d     Learn daily warm
     294:	20 6e 6f 77 2c 20 63 6c 65 61 72 20 69 66 20 69      now, clear if i
     2a4:	6e 20 66 72 6f 73 74 20 6d 6f 64 65 2c 20 73 63     n frost mode, sc
     2b4:	68 65 64 75 6c 65 20 53 00                          hedule S.

000002bd <dumpCLIUsage(unsigned char)::__c>:
     2bd:	4c 20 53 00                                         L S.

000002c1 <dumpCLIUsage(unsigned char)::__c>:
     2c1:	73 65 74 20 6e 65 77 20 49 44 00                    set new ID.

000002cc <dumpCLIUsage(unsigned char)::__c>:
     2cc:	63 6c 65 61 72 20 48 6f 75 73 65 20 63 6f 64 65     clear House code
     2dc:	73 00                                               s.

000002de <dumpCLIUsage(unsigned char)::__c>:
     2de:	73 65 74 20 46 48 54 38 56 20 48 6f 75 73 65 20     set FHT8V House 
     2ee:	63 6f 64 65 73 20 31 26 32 00                       codes 1&2.

000002f8 <dumpCLIUsage(unsigned char)::__c>:
     2f8:	48 20 48 31 20 48 32 00                             H H1 H2.

00000300 <dumpCLIUsage(unsigned char)::__c>:
     300:	46 72 6f 73 74 00                                   Frost.

00000306 <dumpCLIUsage(unsigned char)::__c>:
     306:	45 78 69 74 20 43 4c 49 00                          Exit CLI.

0000030f <dumpCLIUsage(unsigned char)::__c>:
     30f:	44 75 6d 70 20 73 74 61 74 73 20 73 65 74 20 4e     Dump stats set N
	...

00000320 <dumpCLIUsage(unsigned char)::__c>:
     320:	44 20 4e 00                                         D N.

00000324 <dumpCLIUsage(unsigned char)::__c>:
     324:	43 65 6e 74 72 61 6c 20 68 75 62 20 3e 3d 4d 20     Central hub >=M 
     334:	6d 69 6e 73 20 6f 6e 2c 20 30 20 6f 66 66 00        mins on, 0 off.

00000343 <dumpCLIUsage(unsigned char)::__c>:
     343:	43 20 4d 00                                         C M.

00000347 <dumpCLIUsage(unsigned char)::__c>:
     347:	74 68 69 73 20 68 65 6c 70 00                       this help.

00000351 <InvalidIgnored()::__c>:
     351:	49 6e 76 61 6c 69 64 2c 20 69 67 6e 6f 72 65 64     Invalid, ignored
     361:	2e 00                                               ..

00000363 <serialStatusReport()::__c>:
     363:	3b 48 43 00                                         ;HC.

00000367 <loopUnitTest()::__c>:
     367:	25 25 25 20 41 6c 6c 20 74 65 73 74 73 20 63 6f     %%% All tests co
     377:	6d 70 6c 65 74 65 64 20 4f 4b 2c 20 72 6f 75 6e     mpleted OK, roun
     387:	64 20 00                                            d .

0000038a <loopUnitTest()::__c>:
     38a:	54 65 73 74 73 20 73 74 61 72 74 69 6e 67 20 73     Tests starting s
     39a:	68 6f 72 74 6c 79 2e 2e 2e 20 00                    hortly... .

000003a5 <testJSONStatsHandling()::__c>:
     3a5:	7b 22 40 22 3a 22 31 32 33 34 22 2c 22 66 31 22     {"@":"1234","f1"
     3b5:	3a 2d 31 31 31 7d 00                                :-111}.

000003bc <testJSONStatsHandling()::__c>:
     3bc:	7b 22 40 22 3a 22 31 32 33 34 22 2c 22 66 31 22     {"@":"1234","f1"
     3cc:	3a 34 32 7d 00                                      :42}.

000003d1 <testJSONStatsHandling()::__c>:
     3d1:	7b 22 40 22 3a 22 31 32 33 34 22 2c 22 2b 22 3a     {"@":"1234","+":
     3e1:	32 7d 00                                            2}.

000003e4 <testJSONStatsHandling()::__c>:
     3e4:	7b 22 40 22 3a 22 31 32 33 34 22 7d 00              {"@":"1234"}.

000003f1 <testJSONStatsHandling()::__c>:
     3f1:	7b 22 40 22 3a 22 31 32 33 34 22 7d 00              {"@":"1234"}.

000003fe <testJSONStatsHandling()::__c>:
     3fe:	74 65 73 74 4a 53 4f 4e 53 74 61 74 73 48 61 6e     testJSONStatsHan
     40e:	64 6c 69 6e 67 00                                   dling.

00000414 <error(int, int)::__c>:
     414:	20 61 74 20 6c 69 6e 65 20 00                        at line .

0000041e <error(int, int)::__c>:
     41e:	20 3d 30 78 00                                       =0x.

00000423 <error(int, int)::__c>:
     423:	2a 2a 2a 54 65 73 74 20 46 41 49 4c 45 44 2a 2a     ***Test FAILED**
     433:	2a 20 76 61 6c 3d 00                                * val=.

0000043a <testJSONForTX()::__c>:
     43a:	7b 22 40 22 3a 22 63 64 66 62 22 2c 22 54 7c 43     {"@":"cdfb","T|C
     44a:	31 36 22 3a 32 39 39 2c 22 48 7c 25 22 3a 38 33     16":299,"H|%":83
     45a:	2c 22 4c 22 3a 32 35 35 2c 22 42 7c 63 56 22 3a     ,"L":255,"B|cV":
     46a:	32 35 36 7d 00                                      256}.

0000046f <testJSONForTX()::__c>:
     46f:	7b 20 20 7d 00                                      {  }.

00000474 <testJSONForTX()::__c>:
     474:	74 65 73 74 4a 53 4f 4e 46 6f 72 54 58 00           testJSONForTX.

00000482 <testFullStatsMessageCoreEncDec()::__c>:
     482:	74 65 73 74 46 75 6c 6c 53 74 61 74 73 4d 65 73     testFullStatsMes
     492:	73 61 67 65 43 6f 72 65 45 6e 63 44 65 63 00        sageCoreEncDec.

000004a1 <testCRC()::__c>:
     4a1:	74 65 73 74 43 52 43 00                             testCRC.

000004a9 <testTempCompand()::__c>:
     4a9:	74 65 73 74 54 65 6d 70 43 6f 6d 70 61 6e 64 00     testTempCompand.

000004b9 <testRNG8()::__c>:
     4b9:	74 65 73 74 52 4e 47 38 00                          testRNG8.

000004c2 <testRTCPersist()::__c>:
     4c2:	74 65 73 74 52 54 43 50 65 72 73 69 73 74 00        testRTCPersist.

000004d1 <testEEPROM()::__c>:
     4d1:	74 65 73 74 45 45 50 52 4f 4d 00                    testEEPROM.

000004dc <testSmoothStatsValue()::__c>:
     4dc:	74 65 73 74 53 6d 6f 6f 74 68 53 74 61 74 73 56     testSmoothStatsV
     4ec:	61 6c 75 65 00                                      alue.

000004f1 <testFHTEncoding()::__c>:
     4f1:	74 65 73 74 46 48 54 45 6e 63 6f 64 69 6e 67 00     testFHTEncoding.

00000501 <testFHTEncodingHeadAndTail()::__c>:
     501:	74 65 73 74 46 48 54 45 6e 63 6f 64 69 6e 67 48     testFHTEncodingH
     511:	65 61 64 41 6e 64 54 61 69 6c 00                    eadAndTail.

0000051c <testTempSensor()::__c>:
     51c:	74 65 73 74 54 65 6d 70 53 65 6e 73 6f 72 00        testTempSensor.

0000052b <testInternalTempSensor()::__c>:
     52b:	74 65 73 74 49 6e 74 65 72 6e 61 6c 54 65 6d 70     testInternalTemp
     53b:	53 65 6e 73 6f 72 00                                Sensor.

00000542 <testSupplyVoltageMonitor()::__c>:
     542:	74 65 73 74 53 75 70 70 6c 79 56 6f 6c 74 61 67     testSupplyVoltag
     552:	65 4d 6f 6e 69 74 6f 72 00                          eMonitor.

0000055b <testSleepUntilSubCycleTime()::__c>:
     55b:	74 65 73 74 53 6c 65 65 70 55 6e 74 69 6c 53 75     testSleepUntilSu
     56b:	62 43 79 63 6c 65 54 69 6d 65 00                    bCycleTime.

00000576 <testEntropyGathering()::__c>:
     576:	72 65 70 65 61 74 20 6e 61 72 20 00                 repeat nar .

00000582 <testEntropyGathering()::__c>:
     582:	74 65 73 74 45 6e 74 72 6f 70 79 47 61 74 68 65     testEntropyGathe
     592:	72 69 6e 67 00                                      ring.

00000597 <setup::__c>:
     597:	3f 20 61 74 20 43 4c 49 20 70 72 6f 6d 70 74 20     ? at CLI prompt 
     5a7:	66 6f 72 20 68 65 6c 70 00                          for help.

000005b0 <setup::__c>:
     5b0:	49 6e 76 61 6c 69 64 20 49 44 20 61 6e 64 20 63     Invalid ID and c
     5c0:	61 6e 6e 6f 74 20 72 65 73 65 74 2c 20 73 6f 72     annot reset, sor
     5d0:	72 79 2e 00                                         ry..

000005d4 <setup::__c>:
     5d4:	43 6f 6d 70 75 74 69 6e 67 20 69 6e 69 74 69 61     Computing initia
     5e4:	6c 20 74 61 72 67 65 74 2f 64 65 6d 61 6e 64 2e     l target/demand.
     5f4:	2e 2e 00                                            ...

000005f7 <setup::__c>:
     5f7:	43 20 2f 20 00                                      C / .

000005fc <setup::__c>:
     5fc:	49 6e 74 20 74 65 6d 70 3a 20 00                    Int temp: .

00000607 <setup::__c>:
     607:	6d 56 00                                            mV.

0000060a <setup::__c>:
     60a:	56 63 63 3a 20 00                                   Vcc: .

00000610 <setup::__c>:
     610:	74 65 6d 70 20 70 6f 74 3a 20 00                    temp pot: .

0000061b <setup::__c>:
     61b:	52 48 25 3a 20 00                                   RH%: .

00000621 <setup::__c>:
     621:	74 65 6d 70 3a 20 00                                temp: .

00000628 <setup::__c>:
     628:	6c 69 67 68 74 3a 20 00                             light: .

00000630 <setup::__c>:
     630:	55 4e 49 54 20 54 45 53 54 53 20 57 49 4c 4c 20     UNIT TESTS WILL 
     640:	42 45 20 52 55 4e 2e 2e 2e 00                       BE RUN....

0000064a <setup::__c>:
     64a:	46 72 65 65 20 52 41 4d 3a 20 00                    Free RAM: .

00000655 <setup::__c>:
     655:	4f 76 65 72 72 75 6e 73 3a 20 00                    Overruns: .

00000660 <setup::__c>:
     660:	52 65 73 65 74 73 3a 20 00                          Resets: .

00000669 <setup::__c>:
     669:	44 45 42 55 47 20 6d 6f 64 65 20 77 69 74 68 20     DEBUG mode with 
     679:	73 65 72 69 61 6c 20 6c 6f 67 67 69 6e 67 00        serial logging.

00000688 <setup::__c>:
     688:	0d 0a 4f 70 65 6e 54 52 56 20 62 6f 6f 74 69 6e     ..OpenTRV bootin
     698:	67 3a 20 00                                         g: .

0000069c <optionalPOST()::__c>:
     69c:	52 61 64 69 6f 2c 20 78 74 61 6c 2c 20 62 75 74     Radio, xtal, but
     6ac:	74 6f 6e 73 2f 73 65 6e 73 6f 72 73 20 4f 4b 00     tons/sensors OK.

000006bc <optionalPOST()::__c>:
     6bc:	58 74 61 6c 20 64 65 61 64 00                       Xtal dead.

000006c6 <optionalPOST()::__c>:
     6c6:	41 73 79 6e 63 20 33 32 37 36 38 48 7a 20 63 6c     Async 32768Hz cl
     6d6:	6f 63 6b 20 6d 61 79 20 6e 6f 74 20 62 65 20 72     ock may not be r
     6e6:	75 6e 6e 69 6e 67 21 00                             unning!.

000006ee <optionalPOST()::__c>:
     6ee:	53 6c 65 65 70 69 6e 67 20 74 6f 20 6c 65 74 20     Sleeping to let 
     6fe:	61 73 79 6e 63 20 33 32 37 36 38 48 7a 20 63 6c     async 32768Hz cl
     70e:	6f 63 6b 20 73 74 61 72 74 2e 2e 2e 00              ock start....

0000071b <optionalPOST()::__c>:
     71b:	4c 32 20 73 74 75 63 6b 00                          L2 stuck.

00000724 <optionalPOST()::__c>:
     724:	4c 20 73 74 75 63 6b 00                             L stuck.

0000072c <optionalPOST()::__c>:
     72c:	4d 20 73 74 75 63 6b 00                             M stuck.

00000734 <posPOST(unsigned char, __FlashStringHelper const*)::__c>:
     734:	3a 20 00                                            : .

00000737 <posPOST(unsigned char, __FlashStringHelper const*)::__c>:
     737:	70 6f 73 50 4f 53 54 3a 20 00                       posPOST: .

00000741 <serialPrintlnBuildVersion()::__c>:
     741:	20 31 37 3a 31 35 3a 32 34 00                        17:15:24.

0000074b <serialPrintlnBuildVersion()::__c>:
     74b:	3b 20 63 6f 64 65 20 24 49 64 3a 20 56 30 70 32     ; code $Id: V0p2
     75b:	5f 4d 61 69 6e 2e 69 6e 6f 20 33 36 35 39 20 32     _Main.ino 3659 2
     76b:	30 31 34 2d 31 31 2d 32 32 20 31 37 3a 32 33 3a     014-11-22 17:23:
     77b:	31 33 5a 20 64 61 6d 6f 6e 68 64 20 24 20 00        13Z damonhd $ .

0000078a <serialPrintlnBuildVersion()::__c>:
     78a:	62 6f 61 72 64 20 56 30 2e 32 20 52 45 56 00        board V0.2 REV.

00000799 <port_to_mode_PGM>:
     799:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000007a3 <port_to_output_PGM>:
     7a3:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000007ad <port_to_input_PGM>:
     7ad:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000007b7 <digital_pin_to_port_PGM>:
     7b7:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     7c7:	03 03 03 03                                         ....

000007cb <digital_pin_to_bit_mask_PGM>:
     7cb:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     7db:	04 08 10 20                                         ... 

000007df <digital_pin_to_timer_PGM>:
     7df:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     7ef:	00 00 00 00 00                                      .....

000007f4 <__ctors_start>:
     7f4:	9a 06       	cpc	r9, r26
     7f6:	09 18       	sub	r0, r9
     7f8:	bf 19       	sub	r27, r15
     7fa:	34 2e       	mov	r3, r20
     7fc:	aa 31       	cpi	r26, 0x1A	; 26
     7fe:	0b 34       	cpi	r16, 0x4B	; 75
     800:	64 3b       	cpi	r22, 0xB4	; 180

00000802 <__ctors_end>:
     802:	11 24       	eor	r1, r1
     804:	1f be       	out	0x3f, r1	; 63
     806:	cf ef       	ldi	r28, 0xFF	; 255
     808:	d8 e0       	ldi	r29, 0x08	; 8
     80a:	de bf       	out	0x3e, r29	; 62
     80c:	cd bf       	out	0x3d, r28	; 61

0000080e <__do_copy_data>:
     80e:	12 e0       	ldi	r17, 0x02	; 2
     810:	a0 e0       	ldi	r26, 0x00	; 0
     812:	b1 e0       	ldi	r27, 0x01	; 1
     814:	ee ef       	ldi	r30, 0xFE	; 254
     816:	fc e7       	ldi	r31, 0x7C	; 124
     818:	02 c0       	rjmp	.+4      	; 0x81e <.do_copy_data_start>

0000081a <.do_copy_data_loop>:
     81a:	05 90       	lpm	r0, Z+
     81c:	0d 92       	st	X+, r0

0000081e <.do_copy_data_start>:
     81e:	aa 31       	cpi	r26, 0x1A	; 26
     820:	b1 07       	cpc	r27, r17
     822:	d9 f7       	brne	.-10     	; 0x81a <.do_copy_data_loop>

00000824 <__do_clear_bss>:
     824:	15 e0       	ldi	r17, 0x05	; 5
     826:	aa e1       	ldi	r26, 0x1A	; 26
     828:	b2 e0       	ldi	r27, 0x02	; 2
     82a:	01 c0       	rjmp	.+2      	; 0x82e <.do_clear_bss_start>

0000082c <.do_clear_bss_loop>:
     82c:	1d 92       	st	X+, r1

0000082e <.do_clear_bss_start>:
     82e:	a0 30       	cpi	r26, 0x00	; 0
     830:	b1 07       	cpc	r27, r17
     832:	e1 f7       	brne	.-8      	; 0x82c <.do_clear_bss_loop>

00000834 <__do_global_ctors>:
     834:	17 e0       	ldi	r17, 0x07	; 7
     836:	c2 e0       	ldi	r28, 0x02	; 2
     838:	d8 e0       	ldi	r29, 0x08	; 8
     83a:	04 c0       	rjmp	.+8      	; 0x844 <.do_global_ctors_start>

0000083c <.do_global_ctors_loop>:
     83c:	22 97       	sbiw	r28, 0x02	; 2
     83e:	fe 01       	movw	r30, r28
     840:	0e 94 79 3e 	call	0x7cf2	; 0x7cf2 <__tablejump__>

00000844 <.do_global_ctors_start>:
     844:	c4 3f       	cpi	r28, 0xF4	; 244
     846:	d1 07       	cpc	r29, r17
     848:	c9 f7       	brne	.-14     	; 0x83c <.do_global_ctors_loop>
     84a:	0e 94 ba 3b 	call	0x7774	; 0x7774 <main>
     84e:	0c 94 7d 3e 	jmp	0x7cfa	; 0x7cfa <_exit>

00000852 <__bad_interrupt>:
     852:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000856 <abort>:
     856:	81 e0       	ldi	r24, 0x01	; 1
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	f8 94       	cli
     85c:	0c 94 7d 3e 	jmp	0x7cfa	; 0x7cfa <_exit>

00000860 <strcmp_P>:
     860:	fb 01       	movw	r30, r22
     862:	dc 01       	movw	r26, r24
     864:	8d 91       	ld	r24, X+
     866:	05 90       	lpm	r0, Z+
     868:	80 19       	sub	r24, r0
     86a:	01 10       	cpse	r0, r1
     86c:	d9 f3       	breq	.-10     	; 0x864 <strcmp_P+0x4>
     86e:	99 0b       	sbc	r25, r25
     870:	08 95       	ret

00000872 <strcpy_P>:
     872:	fb 01       	movw	r30, r22
     874:	dc 01       	movw	r26, r24
     876:	05 90       	lpm	r0, Z+
     878:	0d 92       	st	X+, r0
     87a:	00 20       	and	r0, r0
     87c:	e1 f7       	brne	.-8      	; 0x876 <strcpy_P+0x4>
     87e:	08 95       	ret

00000880 <memset>:
     880:	dc 01       	movw	r26, r24
     882:	01 c0       	rjmp	.+2      	; 0x886 <memset+0x6>
     884:	6d 93       	st	X+, r22
     886:	41 50       	subi	r20, 0x01	; 1
     888:	50 40       	sbci	r21, 0x00	; 0
     88a:	e0 f7       	brcc	.-8      	; 0x884 <memset+0x4>
     88c:	08 95       	ret

0000088e <strcmp>:
     88e:	fb 01       	movw	r30, r22
     890:	dc 01       	movw	r26, r24
     892:	8d 91       	ld	r24, X+
     894:	01 90       	ld	r0, Z+
     896:	80 19       	sub	r24, r0
     898:	01 10       	cpse	r0, r1
     89a:	d9 f3       	breq	.-10     	; 0x892 <strcmp+0x4>
     89c:	99 0b       	sbc	r25, r25
     89e:	08 95       	ret

000008a0 <strncpy>:
     8a0:	fb 01       	movw	r30, r22
     8a2:	dc 01       	movw	r26, r24
     8a4:	41 50       	subi	r20, 0x01	; 1
     8a6:	50 40       	sbci	r21, 0x00	; 0
     8a8:	48 f0       	brcs	.+18     	; 0x8bc <strncpy+0x1c>
     8aa:	01 90       	ld	r0, Z+
     8ac:	0d 92       	st	X+, r0
     8ae:	00 20       	and	r0, r0
     8b0:	c9 f7       	brne	.-14     	; 0x8a4 <strncpy+0x4>
     8b2:	01 c0       	rjmp	.+2      	; 0x8b6 <strncpy+0x16>
     8b4:	1d 92       	st	X+, r1
     8b6:	41 50       	subi	r20, 0x01	; 1
     8b8:	50 40       	sbci	r21, 0x00	; 0
     8ba:	e0 f7       	brcc	.-8      	; 0x8b4 <strncpy+0x14>
     8bc:	08 95       	ret

000008be <__eerd_word>:
     8be:	df 92       	push	r13
     8c0:	ef 92       	push	r14
     8c2:	ff 92       	push	r15
     8c4:	0f 93       	push	r16
     8c6:	1f 93       	push	r17
     8c8:	7b 01       	movw	r14, r22
     8ca:	8c 01       	movw	r16, r24
     8cc:	fb 01       	movw	r30, r22
     8ce:	09 95       	icall
     8d0:	d8 2e       	mov	r13, r24
     8d2:	c8 01       	movw	r24, r16
     8d4:	01 96       	adiw	r24, 0x01	; 1
     8d6:	f7 01       	movw	r30, r14
     8d8:	09 95       	icall
     8da:	98 2f       	mov	r25, r24
     8dc:	8d 2d       	mov	r24, r13
     8de:	1f 91       	pop	r17
     8e0:	0f 91       	pop	r16
     8e2:	ff 90       	pop	r15
     8e4:	ef 90       	pop	r14
     8e6:	df 90       	pop	r13
     8e8:	08 95       	ret

000008ea <__eewr_word>:
     8ea:	df 92       	push	r13
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	d7 2e       	mov	r13, r23
     8f6:	7a 01       	movw	r14, r20
     8f8:	8c 01       	movw	r16, r24
     8fa:	fa 01       	movw	r30, r20
     8fc:	09 95       	icall
     8fe:	c8 01       	movw	r24, r16
     900:	01 96       	adiw	r24, 0x01	; 1
     902:	6d 2d       	mov	r22, r13
     904:	f7 01       	movw	r30, r14
     906:	09 95       	icall
     908:	1f 91       	pop	r17
     90a:	0f 91       	pop	r16
     90c:	ff 90       	pop	r15
     90e:	ef 90       	pop	r14
     910:	df 90       	pop	r13
     912:	08 95       	ret

00000914 <SimpleTSUint8Actuator::get() const>:
  public:
    // Return last value fetched by read(); undefined before first read().
    // Usually fast.
    // Often likely to be thread-safe or usable within ISRs (Interrupt Service Routines),
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual uint8_t get() const { return(value); }
     914:	fc 01       	movw	r30, r24
     916:	82 81       	ldd	r24, Z+2	; 0x02
     918:	08 95       	ret

0000091a <AbstractRadValve::isValid(unsigned char) const>:
// Implementations may require poll() called at a fixed rate.
class AbstractRadValve : public SimpleTSUint8Actuator
  {
  public:
    // Returns true if this sensor reading value passed is valid, eg in range [0,100].
    virtual bool isValid(const uint8_t value) const { return(value <= 100); }
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	65 36       	cpi	r22, 0x65	; 101
     91e:	08 f4       	brcc	.+2      	; 0x922 <AbstractRadValve::isValid(unsigned char) const+0x8>
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	08 95       	ret

00000924 <AbstractRadValve::setGlacialMode(bool)>:
    virtual bool isControlledValveReallyOpen() const { return((!isRecalibrating()) && (value >= getMinPercentOpen())); }

    // Enable/disable 'glacial' mode for heat-pump, district-heating
    // and similar slow-reponse and pay-by-volume environments.
    // Most useful at the abstract model level; ignored by default.
    virtual void setGlacialMode(bool glacial) { }
     924:	08 95       	ret

00000926 <AbstractRadValve::inGlacialMode() const>:

    // Returns true if this valve control is in glacial mode.
    // Default is to return false.
    virtual bool inGlacialMode() const { return(false); }
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	08 95       	ret

0000092a <ModelledRadValve::preferredPollInterval_s() const>:
    // Potentially expensive/slow.
    virtual uint8_t read() { valveMoved = computeCallForHeat(); return(value); }

    // Returns preferred poll interval (in seconds); non-zero.
    // Must be polled at near constant rate, about once per minute.
    virtual uint8_t preferredPollInterval_s() const { return(60); }
     92a:	8c e3       	ldi	r24, 0x3C	; 60
     92c:	08 95       	ret

0000092e <ModelledRadValve::tag() const>:

    // Returns a suggested (JSON) tag/field/key name including units of get(); NULL means no recommended tag.
    // The lifetime of the pointed-to text must be at least that of the Sensor instance.
    virtual const char *tag() const { return("v|%"); }
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	91 e0       	ldi	r25, 0x01	; 1
     932:	08 95       	ret

00000934 <ModelledRadValve::getMinPercentOpen() const>:
// At the boiler hub this is also the threshold percentage-open on eavesdropped requests that will call for heat.
// If no override is set then DEFAULT_MIN_VALVE_PC_REALLY_OPEN is used.
// NOTE: raising this value temporarily (and shutting down the boiler immediately if possible) is one way to implement dynamic demand.
uint8_t ModelledRadValve::getMinValvePcReallyOpen()
  {
  if(0 != mVPRO_cache) { return(mVPRO_cache); } // Return cached value if possible.
     934:	90 91 20 02 	lds	r25, 0x0220
     938:	99 23       	and	r25, r25
     93a:	79 f4       	brne	.+30     	; 0x95a <ModelledRadValve::getMinPercentOpen() const+0x26>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     93c:	f9 99       	sbic	0x1f, 1	; 31
     93e:	fe cf       	rjmp	.-4      	; 0x93c <ModelledRadValve::getMinPercentOpen() const+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     940:	83 e1       	ldi	r24, 0x13	; 19
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	92 bd       	out	0x22, r25	; 34
     946:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     948:	f8 9a       	sbi	0x1f, 0	; 31
     94a:	90 b5       	in	r25, 0x20	; 32
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_MIN_VALVE_PC_REALLY_OPEN);
  const uint8_t result = ((stored > 0) && (stored <= 100)) ? stored : DEFAULT_MIN_VALVE_PC_REALLY_OPEN;
     94c:	89 2f       	mov	r24, r25
     94e:	81 50       	subi	r24, 0x01	; 1
     950:	84 36       	cpi	r24, 0x64	; 100
     952:	08 f0       	brcs	.+2      	; 0x956 <ModelledRadValve::getMinPercentOpen() const+0x22>
     954:	9a e0       	ldi	r25, 0x0A	; 10
  mVPRO_cache = result; // Cache it.
     956:	90 93 20 02 	sts	0x0220, r25
    // then this should return true if any of the valves are (significantly) open.
    virtual bool isControlledValveReallyOpen() const;

    // Get estimated minimum percentage open for significant flow [1,99] for this device.
    // Return global node value.
    virtual uint8_t getMinPercentOpen() const { return(getMinValvePcReallyOpen()); }
     95a:	89 2f       	mov	r24, r25
     95c:	08 95       	ret

0000095e <inWarmMode()>:
// If true then is in WARM (or BAKE) mode; defaults to (starts as) false/FROST.
// Should be only be set when 'debounced'.
// Defaults to (starts as) false/FROST.
static bool isWarmMode;
// If true then the unit is in 'warm' (heating) mode, else 'frost' protection mode.
bool inWarmMode() { return(isWarmMode); }
     95e:	80 91 5c 02 	lds	r24, 0x025C
     962:	08 95       	ret

00000964 <setWarmModeDebounced(bool)>:
  DEBUG_SERIAL_PRINT_FLASHSTRING("Call to setWarmModeDebounced(");
  DEBUG_SERIAL_PRINT(warm);
  DEBUG_SERIAL_PRINT_FLASHSTRING(")");
  DEBUG_SERIAL_PRINTLN();
#endif
  isWarmMode = warm;
     964:	80 93 5c 02 	sts	0x025C, r24
#ifdef SUPPORT_BAKE
  if(!warm) { cancelBakeDebounced(); }
     968:	88 23       	and	r24, r24
     96a:	11 f4       	brne	.+4      	; 0x970 <setWarmModeDebounced(bool)+0xc>
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// Should be only be called once 'debounced' if coming from a button press for example.
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBakeDebounced() { bakeCountdownM = 0; }
     96c:	10 92 58 02 	sts	0x0258, r1
     970:	08 95       	ret

00000972 <inBakeMode()>:

#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
     972:	80 91 5c 02 	lds	r24, 0x025C
     976:	88 23       	and	r24, r24
     978:	21 f0       	breq	.+8      	; 0x982 <inBakeMode()+0x10>
     97a:	80 91 58 02 	lds	r24, 0x0258
     97e:	81 11       	cpse	r24, r1
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	08 95       	ret

00000984 <startBakeDebounced()>:
// Should be only be called once 'debounced' if coming from a button press for example.
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBakeDebounced() { bakeCountdownM = 0; }
// Start/restart 'BAKE' mode and timeout.
// Should be only be called once 'debounced' if coming from a button press for example.
void startBakeDebounced() { isWarmMode = true; bakeCountdownM = BAKE_MAX_M; }
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	80 93 5c 02 	sts	0x025C, r24
     98a:	8e e1       	ldi	r24, 0x1E	; 30
     98c:	80 93 58 02 	sts	0x0258, r24
     990:	08 95       	ret

00000992 <getFROSTTargetC()>:
  public:
    // Return last value fetched by read(); undefined before first read().
    // Usually fast.
    // Often likely to be thread-safe or usable within ISRs (Interrupt Service Routines),
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual uint8_t get() const { return(value); }
     992:	80 91 7e 03 	lds	r24, 0x037E
uint8_t getFROSTTargetC()
  {
  // Crudely select between eco/comfort FROST levels at the half-way mark.
  // Should not be critical enough to worry over.
  // Prevent falling to lowest frost temperature if relative humidity is high (eg to avoid mould).
  const uint8_t result = (!hasEcoBias() || (RelHumidity.isAvailable() && RelHumidity.isRHHighWithHyst())) ? BIASCOM_FROST : BIASECO_FROST;
     996:	87 fd       	sbrc	r24, 7
     998:	06 c0       	rjmp	.+12     	; 0x9a6 <getFROSTTargetC()+0x14>
    // Thread-safe and usable within ISRs (Interrupt Service Routines).
    bool isRHHigh() { return(get() > (HUMIDTY_HIGH_RHPC+HUMIDITY_EPSILON_RHPC)); }

    // True if RH% high with a hysteresis band of 2 * HUMIDITY_EPSILON_RHPC.
    // Thread-safe and usable within ISRs (Interrupt Service Routines).
    bool isRHHighWithHyst() { return(highWithHyst); }
     99a:	80 91 77 03 	lds	r24, 0x0377
     99e:	88 23       	and	r24, r24
     9a0:	11 f4       	brne	.+4      	; 0x9a6 <getFROSTTargetC()+0x14>
     9a2:	27 e0       	ldi	r18, 0x07	; 7
     9a4:	01 c0       	rjmp	.+2      	; 0x9a8 <getFROSTTargetC()+0x16>
     9a6:	2c e0       	ldi	r18, 0x0C	; 12
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     9a8:	f9 99       	sbic	0x1f, 1	; 31
     9aa:	fe cf       	rjmp	.-4      	; 0x9a8 <getFROSTTargetC()+0x16>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     9ac:	8e e0       	ldi	r24, 0x0E	; 14
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	92 bd       	out	0x22, r25	; 34
     9b2:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     9b4:	f8 9a       	sbi	0x1f, 0	; 31
     9b6:	90 b5       	in	r25, 0x20	; 32
#if defined(SETTABLE_TARGET_TEMPERATURES)
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_FROST_C);
  // If stored value is set and in bounds and higher than computed value then use stored value instead.
  if((stored >= MIN_TARGET_C) && (stored <= MAX_TARGET_C) && (stored > result)) { return(stored); }
     9b8:	89 2f       	mov	r24, r25
     9ba:	85 50       	subi	r24, 0x05	; 5
     9bc:	8b 35       	cpi	r24, 0x5B	; 91
     9be:	10 f0       	brcs	.+4      	; 0x9c4 <getFROSTTargetC()+0x32>
     9c0:	82 2f       	mov	r24, r18
     9c2:	08 95       	ret
     9c4:	89 2f       	mov	r24, r25
     9c6:	92 17       	cp	r25, r18
     9c8:	08 f4       	brcc	.+2      	; 0x9cc <getFROSTTargetC()+0x3a>
     9ca:	82 2f       	mov	r24, r18
#endif
  return(result);
  }
     9cc:	08 95       	ret

000009ce <getWARMTargetC()>:
     9ce:	20 91 7e 03 	lds	r18, 0x037E
  // Cached input and result values; initially zero.
  static uint8_t potLast;
  static uint8_t resultLast;
  // Force recompuation if pot value changed
  // or apparently no calc done yet (unlikely/impossible zero cached result).
  if((potLast != pot) || (0 == resultLast))
     9d2:	80 91 5b 02 	lds	r24, 0x025B
     9d6:	82 17       	cp	r24, r18
     9d8:	21 f4       	brne	.+8      	; 0x9e2 <getWARMTargetC()+0x14>
     9da:	80 91 5a 02 	lds	r24, 0x025A
     9de:	88 23       	and	r24, r24
     9e0:	79 f4       	brne	.+30     	; 0xa00 <getWARMTargetC()+0x32>
  const uint8_t high = (BIASCOM_WARM+1);
  const uint8_t range = high - low + 1;
  const uint8_t band = 256 / range; // Width of band for each degree C...

  // If relatively small number of distinct temperature values...
  if(pot >= 256 - band) { return(high); } // At top... (optimisation / robustness)
     9e2:	24 3e       	cpi	r18, 0xE4	; 228
     9e4:	10 f0       	brcs	.+4      	; 0x9ea <getWARMTargetC()+0x1c>
     9e6:	88 e1       	ldi	r24, 0x18	; 24
     9e8:	07 c0       	rjmp	.+14     	; 0x9f8 <getWARMTargetC()+0x2a>
     9ea:	9c e1       	ldi	r25, 0x1C	; 28
     9ec:	80 e1       	ldi	r24, 0x10	; 16
     9ee:	02 c0       	rjmp	.+4      	; 0x9f4 <getWARMTargetC()+0x26>
  if(range < 10)
    {
    uint8_t result = low;
    for(uint8_t ppot = band; ppot < pot; ++result) { ppot += band; }
     9f0:	94 5e       	subi	r25, 0xE4	; 228
     9f2:	8f 5f       	subi	r24, 0xFF	; 255
     9f4:	92 17       	cp	r25, r18
     9f6:	e0 f3       	brcs	.-8      	; 0x9f0 <getWARMTargetC()+0x22>
  // or apparently no calc done yet (unlikely/impossible zero cached result).
  if((potLast != pot) || (0 == resultLast))
    {
    const uint8_t result = computeWARMTargetC(pot);
    // Cache input/result.
    resultLast = result;
     9f8:	80 93 5a 02 	sts	0x025A, r24
    potLast = pot;
     9fc:	20 93 5b 02 	sts	0x025B, r18
    return(result);
    }

  // Return cached result.
  return(resultLast);
  }
     a00:	08 95       	ret

00000a02 <getMinBoilerOnMinutes()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     a02:	f9 99       	sbic	0x1f, 1	; 31
     a04:	fe cf       	rjmp	.-4      	; 0xa02 <getMinBoilerOnMinutes()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     a06:	82 e1       	ldi	r24, 0x12	; 18
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	92 bd       	out	0x22, r25	; 34
     a0c:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     a0e:	f8 9a       	sbi	0x1f, 0	; 31
     a10:	80 b5       	in	r24, 0x20	; 32
#endif


#ifndef getMinBoilerOnMinutes
// Get minimum on (and off) time for pointer (minutes); zero if not in hub mode.
uint8_t getMinBoilerOnMinutes() { return(~eeprom_read_byte((uint8_t *)EE_START_MIN_BOILER_ON_MINS_INV)); }
     a12:	80 95       	com	r24
     a14:	08 95       	ret

00000a16 <markAsOccupied()>:

// Call when some strong evidence of room occupation has occurred.
// Such evidence may include operation of buttons (etc) on the unit or PIR.
// Do not call from (for example) 'on' schedule change.
// Thread-safe and ISR-safe.
void markAsOccupied() { occupationCountdownM = OCCUPATION_TIMEOUT_M; }
     a16:	8d e2       	ldi	r24, 0x2D	; 45
     a18:	80 93 59 02 	sts	0x0259, r24
     a1c:	08 95       	ret

00000a1e <markAsPossiblyOccupied()>:
// Call when some/weak evidence of room occupation, such as light going on.
// Also use to simulate demand on behalf of user, eg for some part of schedule.
// In this implementation sets the timeout to half the usual time (unless already higher),
// which shouldn't force the room to appear recently occupied.
// Thread-safe.
void markAsPossiblyOccupied()
     a1e:	df 93       	push	r29
     a20:	cf 93       	push	r28
     a22:	00 d0       	rcall	.+0      	; 0xa24 <markAsPossiblyOccupied()+0x6>
     a24:	cd b7       	in	r28, 0x3d	; 61
     a26:	de b7       	in	r29, 0x3e	; 62
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
     a28:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a2a:	f8 94       	cli
    {
    occupationCountdownM = fnmax((uint8_t)occupationCountdownM, (uint8_t)(OCCUPATION_TIMEOUT_M/2));
     a2c:	90 91 59 02 	lds	r25, 0x0259



// Templated function versions of min/max that do not evaluate the arguments twice.
template <class T> const T& fnmin(const T& a, const T& b) { return((a>b)?b:a); }
template <class T> const T& fnmax(const T& a, const T& b) { return((a<b)?b:a); }
     a30:	96 31       	cpi	r25, 0x16	; 22
     a32:	10 f4       	brcc	.+4      	; 0xa38 <markAsPossiblyOccupied()+0x1a>
     a34:	86 e1       	ldi	r24, 0x16	; 22
     a36:	01 c0       	rjmp	.+2      	; 0xa3a <markAsPossiblyOccupied()+0x1c>
     a38:	89 2f       	mov	r24, r25
     a3a:	80 93 59 02 	sts	0x0259, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a3e:	2f bf       	out	0x3f, r18	; 63
     a40:	86 e1       	ldi	r24, 0x16	; 22
     a42:	8a 83       	std	Y+2, r24	; 0x02
     a44:	99 83       	std	Y+1, r25	; 0x01
    }
  }
     a46:	0f 90       	pop	r0
     a48:	0f 90       	pop	r0
     a4a:	cf 91       	pop	r28
     a4c:	df 91       	pop	r29
     a4e:	08 95       	ret

00000a50 <ModelledRadValve::getMinValvePcReallyOpen()>:
// At the boiler hub this is also the threshold percentage-open on eavesdropped requests that will call for heat.
// If no override is set then DEFAULT_MIN_VALVE_PC_REALLY_OPEN is used.
// NOTE: raising this value temporarily (and shutting down the boiler immediately if possible) is one way to implement dynamic demand.
uint8_t ModelledRadValve::getMinValvePcReallyOpen()
  {
  if(0 != mVPRO_cache) { return(mVPRO_cache); } // Return cached value if possible.
     a50:	80 91 20 02 	lds	r24, 0x0220
     a54:	88 23       	and	r24, r24
     a56:	89 f4       	brne	.+34     	; 0xa7a <ModelledRadValve::getMinValvePcReallyOpen()+0x2a>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     a58:	f9 99       	sbic	0x1f, 1	; 31
     a5a:	fe cf       	rjmp	.-4      	; 0xa58 <ModelledRadValve::getMinValvePcReallyOpen()+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     a5c:	83 e1       	ldi	r24, 0x13	; 19
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	92 bd       	out	0x22, r25	; 34
     a62:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     a64:	f8 9a       	sbi	0x1f, 0	; 31
     a66:	90 b5       	in	r25, 0x20	; 32
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_MIN_VALVE_PC_REALLY_OPEN);
  const uint8_t result = ((stored > 0) && (stored <= 100)) ? stored : DEFAULT_MIN_VALVE_PC_REALLY_OPEN;
     a68:	89 2f       	mov	r24, r25
     a6a:	81 50       	subi	r24, 0x01	; 1
     a6c:	84 36       	cpi	r24, 0x64	; 100
     a6e:	10 f0       	brcs	.+4      	; 0xa74 <ModelledRadValve::getMinValvePcReallyOpen()+0x24>
     a70:	8a e0       	ldi	r24, 0x0A	; 10
     a72:	01 c0       	rjmp	.+2      	; 0xa76 <ModelledRadValve::getMinValvePcReallyOpen()+0x26>
     a74:	89 2f       	mov	r24, r25
  mVPRO_cache = result; // Cache it.
     a76:	80 93 20 02 	sts	0x0220, r24
  return(result);
  }
     a7a:	08 95       	ret

00000a7c <ModelledRadValve::computeRequiredTRVPercentOpen()>:


// Set heat demand with some hysteresis and a hint of proportional control.
// Always be willing to turn off quickly, but on slowly (AKA "slow start" algorithm),
// and try to eliminate unnecessary 'hunting' which makes noise and uses actuator energy.
bool ModelledRadValve::computeRequiredTRVPercentOpen()
     a7c:	fc 01       	movw	r30, r24
    virtual int read();

    // Return last value fetched by read(); undefined before first read().
    // Fast.
    // Not thread-safe nor usable within ISRs (Interrupt Service Routines).
    virtual int get() const { return(value); }
     a7e:	40 91 7a 03 	lds	r20, 0x037A
     a82:	50 91 7b 03 	lds	r21, 0x037B
  {
  bool changed = false;

  const int currentTempC16 = TemperatureC16.get();
  const uint8_t currentTempC = (uint8_t)(currentTempC16 >> 4);
     a86:	ca 01       	movw	r24, r20
     a88:	24 e0       	ldi	r18, 0x04	; 4
     a8a:	95 95       	asr	r25
     a8c:	87 95       	ror	r24
     a8e:	2a 95       	dec	r18
     a90:	e1 f7       	brne	.-8      	; 0xa8a <ModelledRadValve::computeRequiredTRVPercentOpen()+0xe>

  if(currentTempC < targetTempC) // (Well) under temp target: open valve.
     a92:	23 81       	ldd	r18, Z+3	; 0x03
     a94:	82 17       	cp	r24, r18
     a96:	b0 f5       	brcc	.+108    	; 0xb04 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x88>
    {
    // Limit valve open slew to help minimise overshoot and actuator noise.
    // This should also reduce nugatory setting changes when occupancy (etc) is fluctuating.
    // Thus it may take several minutes to turn the radiator fully on,
    // though probably opening the first 30% will allow near-maximum heat output in practice.
    if(value != 100)
     a98:	82 81       	ldd	r24, Z+2	; 0x02
     a9a:	84 36       	cpi	r24, 0x64	; 100
     a9c:	09 f4       	brne	.+2      	; 0xaa0 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x24>
     a9e:	dc c0       	rjmp	.+440    	; 0xc58 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x1dc>

#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
     aa0:	80 91 5c 02 	lds	r24, 0x025C
     aa4:	88 23       	and	r24, r24
     aa6:	09 f4       	brne	.+2      	; 0xaaa <ModelledRadValve::computeRequiredTRVPercentOpen()+0x2e>
     aa8:	d9 c0       	rjmp	.+434    	; 0xc5c <ModelledRadValve::computeRequiredTRVPercentOpen()+0x1e0>
     aaa:	80 91 58 02 	lds	r24, 0x0258
     aae:	88 23       	and	r24, r24
     ab0:	09 f4       	brne	.+2      	; 0xab4 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x38>
     ab2:	d4 c0       	rjmp	.+424    	; 0xc5c <ModelledRadValve::computeRequiredTRVPercentOpen()+0x1e0>
     ab4:	20 c0       	rjmp	.+64     	; 0xaf6 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x7a>
    if(value != 100)
      {
#if defined(SUPPORT_BAKE) && !defined(TRV_SLEW_GLACIAL)
      // If room is well below target and in BAKE mode then immediately open to 100%, unless always glacial.
      // Need debounced bake mode value to avoid spurious slamming open of the valve if user cycles through modes.
      if(inBakeMode()) { value = 100; }
     ab6:	2a e0       	ldi	r18, 0x0A	; 10
// At the boiler hub this is also the threshold percentage-open on eavesdropped requests that will call for heat.
// If no override is set then DEFAULT_MIN_VALVE_PC_REALLY_OPEN is used.
// NOTE: raising this value temporarily (and shutting down the boiler immediately if possible) is one way to implement dynamic demand.
uint8_t ModelledRadValve::getMinValvePcReallyOpen()
  {
  if(0 != mVPRO_cache) { return(mVPRO_cache); } // Return cached value if possible.
     ab8:	90 91 20 02 	lds	r25, 0x0220
     abc:	99 23       	and	r25, r25
     abe:	79 f4       	brne	.+30     	; 0xade <ModelledRadValve::computeRequiredTRVPercentOpen()+0x62>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     ac0:	f9 99       	sbic	0x1f, 1	; 31
     ac2:	fe cf       	rjmp	.-4      	; 0xac0 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x44>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     ac4:	83 e1       	ldi	r24, 0x13	; 19
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	92 bd       	out	0x22, r25	; 34
     aca:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     acc:	f8 9a       	sbi	0x1f, 0	; 31
     ace:	90 b5       	in	r25, 0x20	; 32
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_MIN_VALVE_PC_REALLY_OPEN);
  const uint8_t result = ((stored > 0) && (stored <= 100)) ? stored : DEFAULT_MIN_VALVE_PC_REALLY_OPEN;
     ad0:	89 2f       	mov	r24, r25
     ad2:	81 50       	subi	r24, 0x01	; 1
     ad4:	84 36       	cpi	r24, 0x64	; 100
     ad6:	08 f0       	brcs	.+2      	; 0xada <ModelledRadValve::computeRequiredTRVPercentOpen()+0x5e>
     ad8:	9a e0       	ldi	r25, 0x0A	; 10
  mVPRO_cache = result; // Cache it.
     ada:	90 93 20 02 	sts	0x0220, r25
     ade:	92 17       	cp	r25, r18
     ae0:	08 f4       	brcc	.+2      	; 0xae4 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x68>
     ae2:	92 2f       	mov	r25, r18
        {
#if !defined(TRV_SLEW_GLACIAL)
        // Ensure open quickly from cold (unless glacial) for decent response.
        const uint8_t slewRate = ((!hasEcoBias()) ? TRV_SLEW_PC_PER_MIN_VFAST : TRV_SLEW_PC_PER_MIN_FAST);
        const uint8_t minOpenFromCold = fnmax(slewRate, NominalRadValve.getMinPercentOpen());
        if(value < minOpenFromCold) { value = minOpenFromCold; }
     ae4:	82 81       	ldd	r24, Z+2	; 0x02
     ae6:	89 17       	cp	r24, r25
     ae8:	10 f4       	brcc	.+4      	; 0xaee <ModelledRadValve::computeRequiredTRVPercentOpen()+0x72>
     aea:	92 83       	std	Z+2, r25	; 0x02
     aec:	c1 c0       	rjmp	.+386    	; 0xc70 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x1f4>
        // Slew open relatively gently...
        else
#endif
          {
#if !defined(TRV_SLEW_GLACIAL) // Unless glacial, open faster than usual even with eco bias, and even faster with comfort.
          const uint8_t tmp = value + slewRate;
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	82 0f       	add	r24, r18
#else
          const uint8_t tmp = value + TRV_MAX_SLEW_PC_PER_MIN;
#endif
          if(tmp > 100) { value = 100; } // Capped at 100%.
     af2:	85 36       	cpi	r24, 0x65	; 101
     af4:	10 f0       	brcs	.+4      	; 0xafa <ModelledRadValve::computeRequiredTRVPercentOpen()+0x7e>
     af6:	84 e6       	ldi	r24, 0x64	; 100
     af8:	59 c0       	rjmp	.+178    	; 0xbac <ModelledRadValve::computeRequiredTRVPercentOpen()+0x130>
          else
            {
#if defined(VALVE_TURN_OFF_LINGER) && (DEFAULT_MIN_VALVE_PC_REALLY_OPEN > TRV_MAX_SLEW_PC_PER_MIN)
            // Ensure valve will be immediately significantly opened (and that linger can work properly).
            if(tmp < DEFAULT_MIN_VALVE_PC_REALLY_OPEN) { value = DEFAULT_MIN_VALVE_PC_REALLY_OPEN; }
     afa:	8a 30       	cpi	r24, 0x0A	; 10
     afc:	08 f0       	brcs	.+2      	; 0xb00 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x84>
     afe:	56 c0       	rjmp	.+172    	; 0xbac <ModelledRadValve::computeRequiredTRVPercentOpen()+0x130>
     b00:	8a e0       	ldi	r24, 0x0A	; 10
     b02:	54 c0       	rjmp	.+168    	; 0xbac <ModelledRadValve::computeRequiredTRVPercentOpen()+0x130>
          }
        }
      changed = true; // TRV setting has been changed.
      }
    }
  else if(currentTempC > targetTempC) // (Well) over temp target: close valve if not yet closed.
     b04:	28 17       	cp	r18, r24
     b06:	08 f0       	brcs	.+2      	; 0xb0a <ModelledRadValve::computeRequiredTRVPercentOpen()+0x8e>
     b08:	53 c0       	rjmp	.+166    	; 0xbb0 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x134>
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// Should be only be called once 'debounced' if coming from a button press for example.
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBakeDebounced() { bakeCountdownM = 0; }
     b0a:	10 92 58 02 	sts	0x0258, r1
      }
    }
  else if(currentTempC > targetTempC) // (Well) over temp target: close valve if not yet closed.
    {
    cancelBakeDebounced(); // Ensure BAKE mode cancelled immediately if over target (eg when target is BAKE).
    if(value != 0)
     b0e:	82 81       	ldd	r24, Z+2	; 0x02
     b10:	88 23       	and	r24, r24
     b12:	09 f4       	brne	.+2      	; 0xb16 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x9a>
     b14:	a1 c0       	rjmp	.+322    	; 0xc58 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x1dc>
// At the boiler hub this is also the threshold percentage-open on eavesdropped requests that will call for heat.
// If no override is set then DEFAULT_MIN_VALVE_PC_REALLY_OPEN is used.
// NOTE: raising this value temporarily (and shutting down the boiler immediately if possible) is one way to implement dynamic demand.
uint8_t ModelledRadValve::getMinValvePcReallyOpen()
  {
  if(0 != mVPRO_cache) { return(mVPRO_cache); } // Return cached value if possible.
     b16:	90 91 20 02 	lds	r25, 0x0220
     b1a:	99 23       	and	r25, r25
     b1c:	99 f4       	brne	.+38     	; 0xb44 <ModelledRadValve::computeRequiredTRVPercentOpen()+0xc8>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     b1e:	f9 99       	sbic	0x1f, 1	; 31
     b20:	fe cf       	rjmp	.-4      	; 0xb1e <ModelledRadValve::computeRequiredTRVPercentOpen()+0xa2>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     b22:	83 e1       	ldi	r24, 0x13	; 19
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	92 bd       	out	0x22, r25	; 34
     b28:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     b2a:	f8 9a       	sbi	0x1f, 0	; 31
     b2c:	90 b5       	in	r25, 0x20	; 32
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_MIN_VALVE_PC_REALLY_OPEN);
  const uint8_t result = ((stored > 0) && (stored <= 100)) ? stored : DEFAULT_MIN_VALVE_PC_REALLY_OPEN;
     b2e:	89 2f       	mov	r24, r25
     b30:	81 50       	subi	r24, 0x01	; 1
     b32:	84 36       	cpi	r24, 0x64	; 100
     b34:	08 f0       	brcs	.+2      	; 0xb38 <ModelledRadValve::computeRequiredTRVPercentOpen()+0xbc>
     b36:	9a e0       	ldi	r25, 0x0A	; 10
  mVPRO_cache = result; // Cache it.
     b38:	90 93 20 02 	sts	0x0220, r25
      // Continue shutting valve as not yet closed.
#if defined(VALVE_TURN_OFF_LINGER) // && (DEFAULT_MIN_VALVE_PC_REALLY_OPEN > 0)
      // TODO-117: allow very slow final turn off to help systems with poor bypass, ~1% per minute.
      // Special slow-turn-off rules for final part of travel at/below DEFAULT_MIN_VALVE_PC_REALLY_OPEN floor.
      const uint8_t minReallyOpen = NominalRadValve.getMinPercentOpen();
      const uint8_t lingerThreshold = (minReallyOpen > 0) ? (minReallyOpen-1) : 0;
     b3c:	99 23       	and	r25, r25
     b3e:	11 f4       	brne	.+4      	; 0xb44 <ModelledRadValve::computeRequiredTRVPercentOpen()+0xc8>
     b40:	40 e0       	ldi	r20, 0x00	; 0
     b42:	02 c0       	rjmp	.+4      	; 0xb48 <ModelledRadValve::computeRequiredTRVPercentOpen()+0xcc>
     b44:	49 2f       	mov	r20, r25
     b46:	41 50       	subi	r20, 0x01	; 1
//      const uint8_t lingerThreshold = DEFAULT_MIN_VALVE_PC_REALLY_OPEN - 1; // Should be below 'call for heat' threshold.
      if(value < minReallyOpen)
     b48:	82 81       	ldd	r24, Z+2	; 0x02
     b4a:	89 17       	cp	r24, r25
     b4c:	70 f4       	brcc	.+28     	; 0xb6a <ModelledRadValve::computeRequiredTRVPercentOpen()+0xee>
        {
        // If lingered long enough then do final chunk in one burst to help avoid valve hiss and temperature overshoot.
        if((DEFAULT_MAX_RUN_ON_TIME_M < minReallyOpen) && (value < minReallyOpen - DEFAULT_MAX_RUN_ON_TIME_M))
     b4e:	96 30       	cpi	r25, 0x06	; 6
     b50:	08 f4       	brcc	.+2      	; 0xb54 <ModelledRadValve::computeRequiredTRVPercentOpen()+0xd8>
     b52:	8a c0       	rjmp	.+276    	; 0xc68 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x1ec>
     b54:	22 81       	ldd	r18, Z+2	; 0x02
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	89 2f       	mov	r24, r25
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	05 97       	sbiw	r24, 0x05	; 5
     b5e:	28 17       	cp	r18, r24
     b60:	39 07       	cpc	r19, r25
     b62:	0c f0       	brlt	.+2      	; 0xb66 <ModelledRadValve::computeRequiredTRVPercentOpen()+0xea>
     b64:	81 c0       	rjmp	.+258    	; 0xc68 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x1ec>
          { value = 0; } // Shut right off.
     b66:	12 82       	std	Z+2, r1	; 0x02
     b68:	83 c0       	rjmp	.+262    	; 0xc70 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x1f4>
     b6a:	80 91 7e 03 	lds	r24, 0x037E
#else
      // No special linger threshold.
      const uint8_t lingerThreshold = 0; // Fully off.
#endif
      // TODO-109: with comfort bias (or at hub because of self-heating temp errors) slew to off relatively slowly.
      if(((!hasEcoBias()) || inHubMode()) && (value > constrain(((int)lingerThreshold) + TRV_SLEW_PC_PER_MIN_VFAST, TRV_SLEW_PC_PER_MIN_VFAST, 100))) { value -= TRV_SLEW_PC_PER_MIN_VFAST; }
     b6e:	87 fd       	sbrc	r24, 7
     b70:	0b c0       	rjmp	.+22     	; 0xb88 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x10c>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     b72:	f9 99       	sbic	0x1f, 1	; 31
     b74:	fe cf       	rjmp	.-4      	; 0xb72 <ModelledRadValve::computeRequiredTRVPercentOpen()+0xf6>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     b76:	82 e1       	ldi	r24, 0x12	; 18
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	92 bd       	out	0x22, r25	; 34
     b7c:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     b7e:	f8 9a       	sbi	0x1f, 0	; 31
     b80:	80 b5       	in	r24, 0x20	; 32
     b82:	8f 3f       	cpi	r24, 0xFF	; 255
     b84:	09 f4       	brne	.+2      	; 0xb88 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x10c>
     b86:	73 c0       	rjmp	.+230    	; 0xc6e <ModelledRadValve::computeRequiredTRVPercentOpen()+0x1f2>
     b88:	82 81       	ldd	r24, Z+2	; 0x02
     b8a:	24 2f       	mov	r18, r20
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	21 35       	cpi	r18, 0x51	; 81
     b90:	31 05       	cpc	r19, r1
     b92:	1c f0       	brlt	.+6      	; 0xb9a <ModelledRadValve::computeRequiredTRVPercentOpen()+0x11e>
     b94:	24 e6       	ldi	r18, 0x64	; 100
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	02 c0       	rjmp	.+4      	; 0xb9e <ModelledRadValve::computeRequiredTRVPercentOpen()+0x122>
     b9a:	2c 5e       	subi	r18, 0xEC	; 236
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	28 17       	cp	r18, r24
     ba2:	39 07       	cpc	r19, r25
     ba4:	0c f0       	brlt	.+2      	; 0xba8 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x12c>
     ba6:	63 c0       	rjmp	.+198    	; 0xc6e <ModelledRadValve::computeRequiredTRVPercentOpen()+0x1f2>
     ba8:	82 81       	ldd	r24, Z+2	; 0x02
     baa:	84 51       	subi	r24, 0x14	; 20
     bac:	82 83       	std	Z+2, r24	; 0x02
     bae:	60 c0       	rjmp	.+192    	; 0xc70 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x1f4>
// At the boiler hub this is also the threshold percentage-open on eavesdropped requests that will call for heat.
// If no override is set then DEFAULT_MIN_VALVE_PC_REALLY_OPEN is used.
// NOTE: raising this value temporarily (and shutting down the boiler immediately if possible) is one way to implement dynamic demand.
uint8_t ModelledRadValve::getMinValvePcReallyOpen()
  {
  if(0 != mVPRO_cache) { return(mVPRO_cache); } // Return cached value if possible.
     bb0:	20 91 20 02 	lds	r18, 0x0220
     bb4:	22 23       	and	r18, r18
     bb6:	79 f4       	brne	.+30     	; 0xbd6 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x15a>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     bb8:	f9 99       	sbic	0x1f, 1	; 31
     bba:	fe cf       	rjmp	.-4      	; 0xbb8 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x13c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     bbc:	83 e1       	ldi	r24, 0x13	; 19
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	92 bd       	out	0x22, r25	; 34
     bc2:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     bc4:	f8 9a       	sbi	0x1f, 0	; 31
     bc6:	20 b5       	in	r18, 0x20	; 32
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_MIN_VALVE_PC_REALLY_OPEN);
  const uint8_t result = ((stored > 0) && (stored <= 100)) ? stored : DEFAULT_MIN_VALVE_PC_REALLY_OPEN;
     bc8:	82 2f       	mov	r24, r18
     bca:	81 50       	subi	r24, 0x01	; 1
     bcc:	84 36       	cpi	r24, 0x64	; 100
     bce:	08 f0       	brcs	.+2      	; 0xbd2 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x156>
     bd0:	2a e0       	ldi	r18, 0x0A	; 10
  mVPRO_cache = result; // Cache it.
     bd2:	20 93 20 02 	sts	0x0220, r18
    }
  else // Close to (or at) temp target: set valve partly open to try to tightly regulate.
    {
    // Use currentTempC16 lsbits to set valve percentage for proportional feedback
    // to provide more efficient and quieter TRV drive and probably more stable room temperature.
    uint8_t tmp = (uint8_t) (currentTempC16 & 0xf); // Only interested in lsbits.
     bd6:	84 2f       	mov	r24, r20
     bd8:	8f 70       	andi	r24, 0x0F	; 15
     bda:	90 e1       	ldi	r25, 0x10	; 16
     bdc:	98 1b       	sub	r25, r24
     bde:	86 e0       	ldi	r24, 0x06	; 6
     be0:	98 9f       	mul	r25, r24
     be2:	c0 01       	movw	r24, r0
     be4:	11 24       	eor	r1, r1
     be6:	32 2f       	mov	r19, r18
     be8:	28 17       	cp	r18, r24
     bea:	08 f4       	brcc	.+2      	; 0xbee <ModelledRadValve::computeRequiredTRVPercentOpen()+0x172>
     bec:	38 2f       	mov	r19, r24
#else
    // Use as-is.
    const uint8_t targetPO = targetPORaw;
#endif
    // Reduce spurious valve/boiler adjustment by avoiding movement at all unless current error is significant.
    if(targetPO != value)
     bee:	82 81       	ldd	r24, Z+2	; 0x02
     bf0:	38 17       	cp	r19, r24
     bf2:	91 f1       	breq	.+100    	; 0xc58 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x1dc>
    bool isRoomLit() const { return(isRoomLitFlag); }

    // Returns true if room is light enough for someone to be active.
    // False if unknown.
    // Thread-safe and usable within ISRs (Interrupt Service Routines).
    bool isRoomDark() const { return(!isRoomLitFlag); }
     bf4:	80 91 73 03 	lds	r24, 0x0373
      {
      // Compute the minimum/epsilon slew adjustment allowed.
      // Raise this minimum in dark/quiet/unoccupied room to minimise disturbance and battery use.
      const bool minimiseSlew = AmbLight.isRoomDark() || isLikelyUnoccupied();
     bf8:	88 23       	and	r24, r24
     bfa:	39 f0       	breq	.+14     	; 0xc0a <ModelledRadValve::computeRequiredTRVPercentOpen()+0x18e>

// Returns true if the room appears to be likely occupied (with active users) now.
// Operates on a timeout; calling markAsOccupied() restarts the timer.
// Defaults to false (and API still exists) when OCCUPANCY_SUPPORT not defined.
// Thread-safe.
bool isLikelyOccupied() { return(0 != occupationCountdownM); }
     bfc:	80 91 59 02 	lds	r24, 0x0259
    // Reduce spurious valve/boiler adjustment by avoiding movement at all unless current error is significant.
    if(targetPO != value)
      {
      // Compute the minimum/epsilon slew adjustment allowed.
      // Raise this minimum in dark/quiet/unoccupied room to minimise disturbance and battery use.
      const bool minimiseSlew = AmbLight.isRoomDark() || isLikelyUnoccupied();
     c00:	88 23       	and	r24, r24
     c02:	19 f0       	breq	.+6      	; 0xc0a <ModelledRadValve::computeRequiredTRVPercentOpen()+0x18e>
     c04:	87 e0       	ldi	r24, 0x07	; 7
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	02 c0       	rjmp	.+4      	; 0xc0e <ModelledRadValve::computeRequiredTRVPercentOpen()+0x192>
     c0a:	8e e0       	ldi	r24, 0x0E	; 14
     c0c:	90 e0       	ldi	r25, 0x00	; 0
      const uint8_t minAbsSlew = fnmax((1+ulpStep), minimiseSlew ? (2*TRV_MIN_SLEW_PC) : TRV_MIN_SLEW_PC);
     c0e:	98 2f       	mov	r25, r24
      if(targetPO < value) // Currently open more than required.
     c10:	82 81       	ldd	r24, Z+2	; 0x02
     c12:	38 17       	cp	r19, r24
     c14:	38 f4       	brcc	.+14     	; 0xc24 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x1a8>
        {
        const uint8_t slew = value - targetPO;
     c16:	82 81       	ldd	r24, Z+2	; 0x02
        if(slew >= minAbsSlew) // Ensure no hunting for 1ulp temperature wobble.
     c18:	83 1b       	sub	r24, r19
     c1a:	89 17       	cp	r24, r25
     c1c:	e8 f0       	brcs	.+58     	; 0xc58 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x1dc>
          {
          if(slew > TRV_MAX_SLEW_PC_PER_MIN)
              { value -= TRV_MAX_SLEW_PC_PER_MIN; } // Cap slew rate.
     c1e:	82 81       	ldd	r24, Z+2	; 0x02
     c20:	85 50       	subi	r24, 0x05	; 5
     c22:	c4 cf       	rjmp	.-120    	; 0xbac <ModelledRadValve::computeRequiredTRVPercentOpen()+0x130>
          changed = true; // TRV setting has been changed.
          }
        }
      else // if(targetPO > TRVPercentOpen) // Currently open less than required.
        {
        const uint8_t slew = targetPO - value;
     c24:	82 81       	ldd	r24, Z+2	; 0x02
     c26:	43 2f       	mov	r20, r19
     c28:	48 1b       	sub	r20, r24
        if(slew >= minAbsSlew) // Ensure no hunting for 1ulp temperature wobble.
     c2a:	49 17       	cp	r20, r25
     c2c:	a8 f0       	brcs	.+42     	; 0xc58 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x1dc>

#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
     c2e:	80 91 5c 02 	lds	r24, 0x025C
     c32:	88 23       	and	r24, r24
     c34:	f9 f0       	breq	.+62     	; 0xc74 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x1f8>
     c36:	80 91 58 02 	lds	r24, 0x0258
     c3a:	88 23       	and	r24, r24
     c3c:	d9 f0       	breq	.+54     	; 0xc74 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x1f8>
          const uint8_t maxSlew = (inBakeMode() || !hasEcoBias()) ?
              TRV_SLEW_PC_PER_MIN_FAST : TRV_MAX_SLEW_PC_PER_MIN;
#else
          const uint8_t maxSlew = TRV_MIN_SLEW_PC_PER_MIN;
#endif
          if(slew > maxSlew)
     c3e:	4b 30       	cpi	r20, 0x0B	; 11
     c40:	48 f0       	brcs	.+18     	; 0xc54 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x1d8>
     c42:	9a e0       	ldi	r25, 0x0A	; 10
              {
              value += maxSlew; // Cap slew rate open.
     c44:	82 81       	ldd	r24, Z+2	; 0x02
     c46:	98 0f       	add	r25, r24
     c48:	92 83       	std	Z+2, r25	; 0x02
#if !defined(TRV_SLEW_GLACIAL)
              if(value < minReallyOpen) { value = minReallyOpen; } // Force to minimum anyway.
     c4a:	82 81       	ldd	r24, Z+2	; 0x02
     c4c:	82 17       	cp	r24, r18
     c4e:	80 f4       	brcc	.+32     	; 0xc70 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x1f4>
     c50:	22 83       	std	Z+2, r18	; 0x02
     c52:	0e c0       	rjmp	.+28     	; 0xc70 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x1f4>
#endif
              }
          else
              { value = targetPO; } // Adjust directly to target.
     c54:	32 83       	std	Z+2, r19	; 0x02
     c56:	0c c0       	rjmp	.+24     	; 0xc70 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x1f4>
     c58:	80 e0       	ldi	r24, 0x00	; 0
        }
      }
    }

  return(changed);
  }
     c5a:	08 95       	ret
     c5c:	80 91 7e 03 	lds	r24, 0x037E
      else
#endif
        {
#if !defined(TRV_SLEW_GLACIAL)
        // Ensure open quickly from cold (unless glacial) for decent response.
        const uint8_t slewRate = ((!hasEcoBias()) ? TRV_SLEW_PC_PER_MIN_VFAST : TRV_SLEW_PC_PER_MIN_FAST);
     c60:	87 ff       	sbrs	r24, 7
     c62:	29 cf       	rjmp	.-430    	; 0xab6 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x3a>
     c64:	24 e1       	ldi	r18, 0x14	; 20
     c66:	28 cf       	rjmp	.-432    	; 0xab8 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x3c>
        {
        // If lingered long enough then do final chunk in one burst to help avoid valve hiss and temperature overshoot.
        if((DEFAULT_MAX_RUN_ON_TIME_M < minReallyOpen) && (value < minReallyOpen - DEFAULT_MAX_RUN_ON_TIME_M))
          { value = 0; } // Shut right off.
        else
          { --value; } // Turn down as slowly as reasonably possible to help boiler cool.
     c68:	82 81       	ldd	r24, Z+2	; 0x02
     c6a:	81 50       	subi	r24, 0x01	; 1
     c6c:	9f cf       	rjmp	.-194    	; 0xbac <ModelledRadValve::computeRequiredTRVPercentOpen()+0x130>
#endif
      // TODO-109: with comfort bias (or at hub because of self-heating temp errors) slew to off relatively slowly.
      if(((!hasEcoBias()) || inHubMode()) && (value > constrain(((int)lingerThreshold) + TRV_SLEW_PC_PER_MIN_VFAST, TRV_SLEW_PC_PER_MIN_VFAST, 100))) { value -= TRV_SLEW_PC_PER_MIN_VFAST; }
      // Else (by default) force to (nearly) off immediately when requested, ie eagerly stop heating to conserve energy.
      // In any case percentage open should now be low enough to stop calling for heat immediately.
      else { value = lingerThreshold; }
     c6e:	42 83       	std	Z+2, r20	; 0x02
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	08 95       	ret
     c74:	80 91 7e 03 	lds	r24, 0x037E
          // Slew open faster in BAKE mode or with comfort bias,
          // or when below probable minimum 'really open' percentage to avoid delaying heat unnecessarily
          // (unless always glacial when opening).
#if !defined(TRV_SLEW_GLACIAL)
          const uint8_t maxSlew = (inBakeMode() || !hasEcoBias()) ?
              TRV_SLEW_PC_PER_MIN_FAST : TRV_MAX_SLEW_PC_PER_MIN;
     c78:	87 fd       	sbrc	r24, 7
     c7a:	e1 cf       	rjmp	.-62     	; 0xc3e <ModelledRadValve::computeRequiredTRVPercentOpen()+0x1c2>
     c7c:	95 e0       	ldi	r25, 0x05	; 5
     c7e:	e2 cf       	rjmp	.-60     	; 0xc44 <ModelledRadValve::computeRequiredTRVPercentOpen()+0x1c8>

00000c80 <compressTempC16(int)>:
#define COMPRESSION_C16_HIGH_THR_AFTER (COMPRESSION_C16_LOW_THR_AFTER + ((COMPRESSION_C16_HIGH_THRESHOLD-COMPRESSION_C16_LOW_THRESHOLD)>>1)) // High threshold after compression.
#define COMPRESSION_C16_CEIL_VAL (100<<4) // Ceiling input value to compression.
#define COMPRESSION_C16_CEIL_VAL_AFTER (COMPRESSION_C16_HIGH_THR_AFTER + ((COMPRESSION_C16_CEIL_VAL-COMPRESSION_C16_HIGH_THRESHOLD) >> 3)) // Ceiling input value after compression.
uint8_t compressTempC16(int tempC16)
  {
  if(tempC16 <= 0) { return(0); } // Clamp negative values to zero.
     c80:	18 16       	cp	r1, r24
     c82:	19 06       	cpc	r1, r25
     c84:	14 f0       	brlt	.+4      	; 0xc8a <compressTempC16(int)+0xa>
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	08 95       	ret
  if(tempC16 < COMPRESSION_C16_LOW_THRESHOLD) { return(tempC16 >> 3); } // Preserve 1 bit after the binary point (0.5C precision).
     c8a:	8f 3f       	cpi	r24, 0xFF	; 255
     c8c:	91 05       	cpc	r25, r1
     c8e:	09 f0       	breq	.+2      	; 0xc92 <compressTempC16(int)+0x12>
     c90:	34 f4       	brge	.+12     	; 0xc9e <compressTempC16(int)+0x1e>
     c92:	53 e0       	ldi	r21, 0x03	; 3
     c94:	95 95       	asr	r25
     c96:	87 95       	ror	r24
     c98:	5a 95       	dec	r21
     c9a:	e1 f7       	brne	.-8      	; 0xc94 <compressTempC16(int)+0x14>
     c9c:	08 95       	ret
  if(tempC16 < COMPRESSION_C16_HIGH_THRESHOLD)
     c9e:	21 e0       	ldi	r18, 0x01	; 1
     ca0:	80 38       	cpi	r24, 0x80	; 128
     ca2:	92 07       	cpc	r25, r18
     ca4:	34 f4       	brge	.+12     	; 0xcb2 <compressTempC16(int)+0x32>
    { return(((tempC16 - COMPRESSION_C16_LOW_THRESHOLD) >> 1) + COMPRESSION_C16_LOW_THR_AFTER); }
     ca6:	80 50       	subi	r24, 0x00	; 0
     ca8:	91 40       	sbci	r25, 0x01	; 1
     caa:	95 95       	asr	r25
     cac:	87 95       	ror	r24
     cae:	80 5e       	subi	r24, 0xE0	; 224
     cb0:	08 95       	ret
  if(tempC16 < COMPRESSION_C16_CEIL_VAL)
     cb2:	26 e0       	ldi	r18, 0x06	; 6
     cb4:	80 34       	cpi	r24, 0x40	; 64
     cb6:	92 07       	cpc	r25, r18
     cb8:	14 f0       	brlt	.+4      	; 0xcbe <compressTempC16(int)+0x3e>
     cba:	88 ef       	ldi	r24, 0xF8	; 248
     cbc:	08 95       	ret
    { return(((tempC16 - COMPRESSION_C16_HIGH_THRESHOLD) >> 3) + COMPRESSION_C16_HIGH_THR_AFTER); }
     cbe:	80 58       	subi	r24, 0x80	; 128
     cc0:	91 40       	sbci	r25, 0x01	; 1
     cc2:	33 e0       	ldi	r19, 0x03	; 3
     cc4:	95 95       	asr	r25
     cc6:	87 95       	ror	r24
     cc8:	3a 95       	dec	r19
     cca:	e1 f7       	brne	.-8      	; 0xcc4 <compressTempC16(int)+0x44>
     ccc:	80 5a       	subi	r24, 0xA0	; 160
  return(COMPRESSION_C16_CEIL_VAL_AFTER);
  }
     cce:	08 95       	ret

00000cd0 <expandTempC16(unsigned char)>:

// Reverses range compression done by compressTempC16(); results in range [0,100], with varying precision based on original value.
// 0xff (or other invalid) input results in STATS_UNSET_INT. 
int expandTempC16(uint8_t cTemp)
  {
  if(cTemp < COMPRESSION_C16_LOW_THR_AFTER) { return(cTemp << 3); }
     cd0:	80 32       	cpi	r24, 0x20	; 32
     cd2:	40 f4       	brcc	.+16     	; 0xce4 <expandTempC16(unsigned char)+0x14>
     cd4:	28 2f       	mov	r18, r24
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	e3 e0       	ldi	r30, 0x03	; 3
     cda:	22 0f       	add	r18, r18
     cdc:	33 1f       	adc	r19, r19
     cde:	ea 95       	dec	r30
     ce0:	e1 f7       	brne	.-8      	; 0xcda <expandTempC16(unsigned char)+0xa>
     ce2:	17 c0       	rjmp	.+46     	; 0xd12 <expandTempC16(unsigned char)+0x42>
  if(cTemp < COMPRESSION_C16_HIGH_THR_AFTER)
     ce4:	80 36       	cpi	r24, 0x60	; 96
     ce6:	38 f4       	brcc	.+14     	; 0xcf6 <expandTempC16(unsigned char)+0x26>
    { return(((cTemp - COMPRESSION_C16_LOW_THR_AFTER) << 1) + COMPRESSION_C16_LOW_THRESHOLD); }
     ce8:	28 2f       	mov	r18, r24
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	22 0f       	add	r18, r18
     cee:	33 1f       	adc	r19, r19
     cf0:	20 54       	subi	r18, 0x40	; 64
     cf2:	3f 4f       	sbci	r19, 0xFF	; 255
     cf4:	0e c0       	rjmp	.+28     	; 0xd12 <expandTempC16(unsigned char)+0x42>
  if(cTemp <= COMPRESSION_C16_CEIL_VAL_AFTER)
     cf6:	89 3f       	cpi	r24, 0xF9	; 249
     cf8:	18 f0       	brcs	.+6      	; 0xd00 <expandTempC16(unsigned char)+0x30>
     cfa:	2f ef       	ldi	r18, 0xFF	; 255
     cfc:	3f e7       	ldi	r19, 0x7F	; 127
     cfe:	09 c0       	rjmp	.+18     	; 0xd12 <expandTempC16(unsigned char)+0x42>
    { return(((cTemp - COMPRESSION_C16_HIGH_THR_AFTER) << 3) + COMPRESSION_C16_HIGH_THRESHOLD); }
     d00:	28 2f       	mov	r18, r24
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	63 e0       	ldi	r22, 0x03	; 3
     d06:	22 0f       	add	r18, r18
     d08:	33 1f       	adc	r19, r19
     d0a:	6a 95       	dec	r22
     d0c:	e1 f7       	brne	.-8      	; 0xd06 <expandTempC16(unsigned char)+0x36>
     d0e:	20 58       	subi	r18, 0x80	; 128
     d10:	31 40       	sbci	r19, 0x01	; 1
  return(STATS_UNSET_INT); // Invalid/unset input.
  }
     d12:	c9 01       	movw	r24, r18
     d14:	08 95       	ret

00000d16 <Sensor<unsigned char>::isAvailable() const>:
    virtual bool begin() { return(false); }

    // Returns true if this sensor is currently available.
    // True by default unless implementation overrides.
    // For those sensors that need starting this will be false before begin().
    virtual bool isAvailable() const { return(true); }
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	08 95       	ret

00000d1a <Sensor<unsigned char>::tag() const>:
    // only as required to fetch new values from the underlying sensor.
    virtual uint8_t preferredPollInterval_s() const { return(0); }

    // Returns a suggested (JSON) tag/field/key name including units of get(); NULL means no recommended tag.
    // The lifetime of the pointed-to text must be at least that of the Sensor instance.
    virtual const char *tag() const { return(NULL); }
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	08 95       	ret

00000d20 <Sensor<unsigned char>::handleInterruptSimple()>:
    // Must be fast and ISR (Interrupt Service Routine) safe.
    // Returns true if interrupt was successfully handled and cleared
    // else another interrupt handler in the chain may be called
    // to attempt to clear the interrupt.
    // By default does nothing (and returns false).
    virtual bool handleInterruptSimple() { return(false); }
     d20:	80 e0       	ldi	r24, 0x00	; 0
     d22:	08 95       	ret

00000d24 <Sensor<unsigned char>::begin()>:

    // Begin access to this sensor if applicable and not already begun.
    // Returns true if it needed to be begun.
    // Allows logic to end() if required at the end of a block, etc.
    // Defaults to do nothing (and return false).
    virtual bool begin() { return(false); }
     d24:	80 e0       	ldi	r24, 0x00	; 0
     d26:	08 95       	ret

00000d28 <Sensor<unsigned char>::end()>:
    virtual bool isAvailable() const { return(true); }

    // End access to this sensor if applicable and not already ended.
    // Returns true if it needed to be ended.
    // Defaults to do nothing (and return false).
    virtual bool end() { return(false); }
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	08 95       	ret

00000d2c <Sensor<unsigned char>::isValid(unsigned char) const>:
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual T get() const = 0;

    // Returns true if this sensor reading value passed is potentially valid, eg in-range.
    // Default is to always return true, ie all values potentially valid.
    virtual bool isValid(T value) const { return(true); }
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	08 95       	ret

00000d30 <Sensor<unsigned char>::preferredPollInterval_s() const>:
 
    // Returns non-zero if this implementation requires a regular call to read() to operate correctly.
    // Preferred poll interval (in seconds) or 0 if no regular poll() call required.
    // Default returns 0 indicating regular call to read() not required,
    // only as required to fetch new values from the underlying sensor.
    virtual uint8_t preferredPollInterval_s() const { return(0); }
     d30:	80 e0       	ldi	r24, 0x00	; 0
     d32:	08 95       	ret

00000d34 <global constructors keyed to _Z10inWarmModev>:
  protected:
    // Requested acuator value/position.
    volatile uint8_t value;

    // By default initialise the value to zero.
    SimpleTSUint8Actuator() : value(0) { }
     d34:	10 92 1c 02 	sts	0x021C, r1



// Internal model of radidator valve position, embodying control logic.
class ModelledRadValve : public AbstractRadValve
  {
     d38:	8a e5       	ldi	r24, 0x5A	; 90
     d3a:	91 e0       	ldi	r25, 0x01	; 1
     d3c:	90 93 1b 02 	sts	0x021B, r25
     d40:	80 93 1a 02 	sts	0x021A, r24
  else if(getSubCycleTime() >= nearOverrunThreshold)
    {
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("?O"); // Near overrun.  Note 2ms/char to send...
    }
#endif
  }
     d44:	08 95       	ret

00000d46 <pollIO(bool)>:
// Call this to do an I/O poll if needed; returns true if something useful happened.
// This call should typically take << 1ms at 1MHz CPU.
// Does not change CPU clock speeds, mess with interrupts (other than possible brief blocking), or sleep.
// Limits actual poll rate to something like once every 32ms, unless force is true.
//   * force if true then force full poll on every call (ie do not internally rate-limit)
bool pollIO(const bool force)
     d46:	38 2f       	mov	r19, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     d48:	f9 99       	sbic	0x1f, 1	; 31
     d4a:	fe cf       	rjmp	.-4      	; 0xd48 <pollIO(bool)+0x2>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     d4c:	82 e1       	ldi	r24, 0x12	; 18
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	92 bd       	out	0x22, r25	; 34
     d52:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     d54:	f8 9a       	sbi	0x1f, 0	; 31
     d56:	80 b5       	in	r24, 0x20	; 32
  {
#if defined(ENABLE_BOILER_HUB) && defined(USE_MODULE_FHT8VSIMPLE)
  if(inHubMode())
     d58:	8f 3f       	cpi	r24, 0xFF	; 255
     d5a:	99 f0       	breq	.+38     	; 0xd82 <pollIO(bool)+0x3c>
    {
    static volatile uint8_t _pO_lastPoll;

    // Poll RX at most about every ~32ms to help approx match spil rate when called in loop with 30ms nap.
    const uint8_t sct = getSubCycleTime();
     d5c:	20 91 b2 00 	lds	r18, 0x00B2
    if(force || ((0 == (sct & 3)) && (sct != _pO_lastPoll)))
     d60:	33 23       	and	r19, r19
     d62:	51 f4       	brne	.+20     	; 0xd78 <pollIO(bool)+0x32>
     d64:	82 2f       	mov	r24, r18
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	83 70       	andi	r24, 0x03	; 3
     d6a:	90 70       	andi	r25, 0x00	; 0
     d6c:	89 2b       	or	r24, r25
     d6e:	49 f4       	brne	.+18     	; 0xd82 <pollIO(bool)+0x3c>
     d70:	80 91 57 02 	lds	r24, 0x0257
     d74:	28 17       	cp	r18, r24
     d76:	29 f0       	breq	.+10     	; 0xd82 <pollIO(bool)+0x3c>
      {
      _pO_lastPoll = sct;
     d78:	20 93 57 02 	sts	0x0257, r18
      if(FHT8VCallForHeatPoll()) // Check if call-for-heat has been overheard.
     d7c:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <FHT8VCallForHeatPoll()>
     d80:	08 95       	ret
     d82:	80 e0       	ldi	r24, 0x00	; 0
        { return(true); }
      }
    }
#endif
  return(false);
  }
     d84:	08 95       	ret

00000d86 <smoothStatsValue(unsigned char, unsigned char)>:

// Compute new linearly-smoothed value given old smoothed value and new value.
// Guaranteed not to produce a value higher than the max of the old smoothed value and the new value.
// Uses stochastic rounding to nearest to allow nominally sub-lsb values to have an effect over time.
// Usually only made public for unit testing.
uint8_t smoothStatsValue(const uint8_t oldSmoothed, const uint8_t newValue)
     d86:	0f 93       	push	r16
     d88:	1f 93       	push	r17
     d8a:	18 2f       	mov	r17, r24
     d8c:	06 2f       	mov	r16, r22
  {
  if(oldSmoothed == newValue) { return(oldSmoothed); } // Optimisation: smoothed value is unchanged if new value is the same as extant.
     d8e:	86 17       	cp	r24, r22
     d90:	b9 f0       	breq	.+46     	; 0xdc0 <smoothStatsValue(unsigned char, unsigned char)+0x3a>
  // Compute and update with new stochastically-rounded exponentially-smoothed ("Brown's simple exponential smoothing") value.
  // Stochastic rounding allows sub-lsb values to have an effect over time.
  const uint8_t stocAdd = randRNG8() & ((1 << STATS_SMOOTH_SHIFT) - 1); // Allows sub-lsb values to have an effect over time.
     d92:	0e 94 9e 19 	call	0x333c	; 0x333c <randRNG8()>
  DEBUG_SERIAL_PRINT_FLASHSTRING("stocAdd=");
  DEBUG_SERIAL_PRINT(stocAdd);
  DEBUG_SERIAL_PRINTLN();
#endif
  // Do arithmetic in 16 bits to avoid over-/under- flows.
  return((uint8_t) (((((uint16_t) oldSmoothed) << STATS_SMOOTH_SHIFT) - ((uint16_t)oldSmoothed) + ((uint16_t)newValue) + stocAdd) >> STATS_SMOOTH_SHIFT));
     d96:	21 2f       	mov	r18, r17
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	a9 01       	movw	r20, r18
     d9c:	a3 e0       	ldi	r26, 0x03	; 3
     d9e:	44 0f       	add	r20, r20
     da0:	55 1f       	adc	r21, r21
     da2:	aa 95       	dec	r26
     da4:	e1 f7       	brne	.-8      	; 0xd9e <smoothStatsValue(unsigned char, unsigned char)+0x18>
     da6:	42 1b       	sub	r20, r18
     da8:	53 0b       	sbc	r21, r19
     daa:	87 70       	andi	r24, 0x07	; 7
     dac:	48 0f       	add	r20, r24
     dae:	51 1d       	adc	r21, r1
     db0:	40 0f       	add	r20, r16
     db2:	51 1d       	adc	r21, r1
     db4:	f3 e0       	ldi	r31, 0x03	; 3
     db6:	56 95       	lsr	r21
     db8:	47 95       	ror	r20
     dba:	fa 95       	dec	r31
     dbc:	e1 f7       	brne	.-8      	; 0xdb6 <smoothStatsValue(unsigned char, unsigned char)+0x30>
     dbe:	14 2f       	mov	r17, r20
  }
     dc0:	81 2f       	mov	r24, r17
     dc2:	1f 91       	pop	r17
     dc4:	0f 91       	pop	r16
     dc6:	08 95       	ret

00000dc8 <ModelledRadValve::recalibrate()>:
// If possible exercise the valve to avoid pin sticking and recalibrate valve travel.
// Default does nothing.
void ModelledRadValve::recalibrate()
  {
#ifdef USE_MODULE_FHT8VSIMPLE
  FHT8VSyncAndTXReset();
     dc8:	0e 94 cd 0b 	call	0x179a	; 0x179a <FHT8VSyncAndTXReset()>
#endif
  }
     dcc:	08 95       	ret

00000dce <bool SimpleStatsRotationBase::put<unsigned int>(Sensor<unsigned int> const&)>:
    // True if successful, false otherwise (eg capacity already reached).
    bool put(SimpleStatsKey key, int newValue);

    // Create/update value for the given sensor.
    // True if successful, false otherwise (eg capacity already reached).
    template <class T> bool put(const Sensor<T> &s) { put(s.tag(), s.get()); }
     dce:	cf 92       	push	r12
     dd0:	df 92       	push	r13
     dd2:	ef 92       	push	r14
     dd4:	ff 92       	push	r15
     dd6:	0f 93       	push	r16
     dd8:	1f 93       	push	r17
     dda:	6c 01       	movw	r12, r24
     ddc:	8b 01       	movw	r16, r22
     dde:	db 01       	movw	r26, r22
     de0:	ed 91       	ld	r30, X+
     de2:	fc 91       	ld	r31, X
     de4:	00 84       	ldd	r0, Z+8	; 0x08
     de6:	f1 85       	ldd	r31, Z+9	; 0x09
     de8:	e0 2d       	mov	r30, r0
     dea:	cb 01       	movw	r24, r22
     dec:	09 95       	icall
     dee:	7c 01       	movw	r14, r24
     df0:	d8 01       	movw	r26, r16
     df2:	ed 91       	ld	r30, X+
     df4:	fc 91       	ld	r31, X
     df6:	02 80       	ldd	r0, Z+2	; 0x02
     df8:	f3 81       	ldd	r31, Z+3	; 0x03
     dfa:	e0 2d       	mov	r30, r0
     dfc:	c8 01       	movw	r24, r16
     dfe:	09 95       	icall
     e00:	ac 01       	movw	r20, r24
     e02:	c6 01       	movw	r24, r12
     e04:	b7 01       	movw	r22, r14
     e06:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <SimpleStatsRotationBase::put(char const*, int)>
     e0a:	1f 91       	pop	r17
     e0c:	0f 91       	pop	r16
     e0e:	ff 90       	pop	r15
     e10:	ef 90       	pop	r14
     e12:	df 90       	pop	r13
     e14:	cf 90       	pop	r12
     e16:	08 95       	ret

00000e18 <bool SimpleStatsRotationBase::put<unsigned char>(Sensor<unsigned char> const&)>:
     e18:	cf 92       	push	r12
     e1a:	df 92       	push	r13
     e1c:	ef 92       	push	r14
     e1e:	ff 92       	push	r15
     e20:	0f 93       	push	r16
     e22:	1f 93       	push	r17
     e24:	6c 01       	movw	r12, r24
     e26:	8b 01       	movw	r16, r22
     e28:	db 01       	movw	r26, r22
     e2a:	ed 91       	ld	r30, X+
     e2c:	fc 91       	ld	r31, X
     e2e:	00 84       	ldd	r0, Z+8	; 0x08
     e30:	f1 85       	ldd	r31, Z+9	; 0x09
     e32:	e0 2d       	mov	r30, r0
     e34:	cb 01       	movw	r24, r22
     e36:	09 95       	icall
     e38:	7c 01       	movw	r14, r24
     e3a:	d8 01       	movw	r26, r16
     e3c:	ed 91       	ld	r30, X+
     e3e:	fc 91       	ld	r31, X
     e40:	02 80       	ldd	r0, Z+2	; 0x02
     e42:	f3 81       	ldd	r31, Z+3	; 0x03
     e44:	e0 2d       	mov	r30, r0
     e46:	c8 01       	movw	r24, r16
     e48:	09 95       	icall
     e4a:	48 2f       	mov	r20, r24
     e4c:	c6 01       	movw	r24, r12
     e4e:	b7 01       	movw	r22, r14
     e50:	50 e0       	ldi	r21, 0x00	; 0
     e52:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <SimpleStatsRotationBase::put(char const*, int)>
     e56:	1f 91       	pop	r17
     e58:	0f 91       	pop	r16
     e5a:	ff 90       	pop	r15
     e5c:	ef 90       	pop	r14
     e5e:	df 90       	pop	r13
     e60:	cf 90       	pop	r12
     e62:	08 95       	ret

00000e64 <rawStatsTX(bool, unsigned char*, bool, bool)>:
//       the unit will resume RX after sending the stats
//   * doubleTX  double TX to increase chance of successful reception
// This will use whichever transmission medium/carrier/etc is available.
#define STATS_MSG_START_OFFSET (RFM22_PREAMBLE_BYTES + RFM22_SYNC_MIN_BYTES)
#define STATS_MSG_MAX_LEN (64 - STATS_MSG_START_OFFSET)
static void rawStatsTX(const bool isBinary, uint8_t * const buf, const bool resumeRX, const bool doubleTX)
     e64:	ef 92       	push	r14
     e66:	ff 92       	push	r15
     e68:	0f 93       	push	r16
     e6a:	1f 93       	push	r17
     e6c:	8b 01       	movw	r16, r22
     e6e:	e4 2e       	mov	r14, r20
     e70:	f2 2e       	mov	r15, r18
  {
  // Write in the preamble/sync bytes.
  uint8_t *bptr = buf;
  // Start with RFM23-friendly preamble which ends with with the aacccccc sync word.
  memset(bptr, RFM22_PREAMBLE_BYTE, RFM22_PREAMBLE_BYTES);
     e72:	cb 01       	movw	r24, r22
     e74:	6a ea       	ldi	r22, 0xAA	; 170
     e76:	70 e0       	ldi	r23, 0x00	; 0
     e78:	45 e0       	ldi	r20, 0x05	; 5
     e7a:	50 e0       	ldi	r21, 0x00	; 0
     e7c:	0e 94 40 04 	call	0x880	; 0x880 <memset>
  bptr += RFM22_PREAMBLE_BYTES;
  memset(bptr, RFM22_SYNC_BYTE, RFM22_SYNC_MIN_BYTES);
     e80:	c8 01       	movw	r24, r16
     e82:	05 96       	adiw	r24, 0x05	; 5
     e84:	6c ec       	ldi	r22, 0xCC	; 204
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	43 e0       	ldi	r20, 0x03	; 3
     e8a:	50 e0       	ldi	r21, 0x00	; 0
     e8c:	0e 94 40 04 	call	0x880	; 0x880 <memset>
  bptr += RFM22_SYNC_MIN_BYTES;

  // TODO: put in listen before TX to reduce collisions (CSMA).
  // Send message starting will preamble.
  // Assume RFM22/23 support for now.
  RFM22QueueCmdToFF(buf);
     e90:	c8 01       	movw	r24, r16
     e92:	0e 94 9e 1a 	call	0x353c	; 0x353c <RFM22QueueCmdToFF(unsigned char*)>
  RFM22TXFIFO(); // Send it!  Approx 1.6ms/byte.     
     e96:	0e 94 96 1b 	call	0x372c	; 0x372c <RFM22TXFIFO()>
  if(doubleTX)
     e9a:	ff 20       	and	r15, r15
     e9c:	29 f0       	breq	.+10     	; 0xea8 <rawStatsTX(bool, unsigned char*, bool, bool)+0x44>
    {
    nap(WDTO_15MS);
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <nap(signed char)>
    RFM22TXFIFO(); // Re-send it!
     ea4:	0e 94 96 1b 	call	0x372c	; 0x372c <RFM22TXFIFO()>
    }

  // Resume appropriate behaviour after TX.
#if defined(ENABLE_BOILER_HUB)
  if(resumeRX)
     ea8:	ee 20       	and	r14, r14
     eaa:	21 f0       	breq	.+8      	; 0xeb4 <rawStatsTX(bool, unsigned char*, bool, bool)+0x50>
    { SetupToEavesdropOnFHT8V(); } // Revert to hub listening...
     eac:	80 e0       	ldi	r24, 0x00	; 0
     eae:	0e 94 de 0b 	call	0x17bc	; 0x17bc <SetupToEavesdropOnFHT8V(bool)>
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <rawStatsTX(bool, unsigned char*, bool, bool)+0x54>
  else
#endif
    { RFM22ModeStandbyAndClearState(); } // Go to standby to conserve energy.
     eb4:	0e 94 4e 1b 	call	0x369c	; 0x369c <RFM22ModeStandbyAndClearState()>
  }
     eb8:	1f 91       	pop	r17
     eba:	0f 91       	pop	r16
     ebc:	ff 90       	pop	r15
     ebe:	ef 90       	pop	r14
     ec0:	08 95       	ret

00000ec2 <__vector_5>:

#if !defined(ALT_MAIN_LOOP) // Do not define handlers here when alt main is in use.
// Previous state of port D pins to help detect changes.
static volatile uint8_t prevStatePD;
// Interrupt service routine for PD I/O port transition changes (including RX).
ISR(PCINT2_vect)
     ec2:	1f 92       	push	r1
     ec4:	0f 92       	push	r0
     ec6:	0f b6       	in	r0, 0x3f	; 63
     ec8:	0f 92       	push	r0
     eca:	11 24       	eor	r1, r1
     ecc:	2f 93       	push	r18
     ece:	3f 93       	push	r19
     ed0:	4f 93       	push	r20
     ed2:	5f 93       	push	r21
     ed4:	6f 93       	push	r22
     ed6:	7f 93       	push	r23
     ed8:	8f 93       	push	r24
     eda:	9f 93       	push	r25
     edc:	af 93       	push	r26
     ede:	bf 93       	push	r27
     ee0:	ef 93       	push	r30
     ee2:	ff 93       	push	r31
  {
  const uint8_t pins = PIND;
     ee4:	89 b1       	in	r24, 0x09	; 9
  const uint8_t changes = pins ^ prevStatePD;
     ee6:	90 91 56 02 	lds	r25, 0x0256
  prevStatePD = pins;
     eea:	80 93 56 02 	sts	0x0256, r24
  // If an interrupt arrived from no other masked source then wake the CLI.
  // The will ensure that the CLI is active, eg from RX activity,
  // eg it is possible to wake the CLI subsystem with an extra CR or LF.
  // It is OK to trigger this from other things such as button presses.
  // FIXME: ensure that resetCLIActiveTimer() is inlineable to minimise ISR prologue/epilogue time and space.
  if(!(changes & MASK_PD & ~1)) { resetCLIActiveTimer(); }
     eee:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <resetCLIActiveTimer()>
  }
     ef2:	ff 91       	pop	r31
     ef4:	ef 91       	pop	r30
     ef6:	bf 91       	pop	r27
     ef8:	af 91       	pop	r26
     efa:	9f 91       	pop	r25
     efc:	8f 91       	pop	r24
     efe:	7f 91       	pop	r23
     f00:	6f 91       	pop	r22
     f02:	5f 91       	pop	r21
     f04:	4f 91       	pop	r20
     f06:	3f 91       	pop	r19
     f08:	2f 91       	pop	r18
     f0a:	0f 90       	pop	r0
     f0c:	0f be       	out	0x3f, r0	; 63
     f0e:	0f 90       	pop	r0
     f10:	1f 90       	pop	r1
     f12:	18 95       	reti

00000f14 <populateCoreStats(FullStatsMessageCore*)>:


// Clear and populate core stats structure with information from this node.
// Exactly what gets filled in will depend on sensors on the node,
// and may depend on stats TX security level (eg if collecting some sensitive items is also expensive).
void populateCoreStats(FullStatsMessageCore_t *const content)
     f14:	cf 93       	push	r28
     f16:	df 93       	push	r29
     f18:	ec 01       	movw	r28, r24
#define FullStatsMessageCore_MAX_BYTES_ON_WIRE 8
// Minimum size on wire including trailing CRC of core of FullStatsMessage.  TX message buffer should be one larger for trailing 0xff.
#define FullStatsMessageCore_MIN_BYTES_ON_WIRE 3

// Clear a FullStatsMessageCore_t, also indicating no optional fields present.
static inline void clearFullStatsMessageCore(FullStatsMessageCore_t *const p) { memset(p, 0, sizeof(FullStatsMessageCore_t)); }
     f1a:	87 e0       	ldi	r24, 0x07	; 7
     f1c:	fe 01       	movw	r30, r28
     f1e:	11 92       	st	Z+, r1
     f20:	8a 95       	dec	r24
     f22:	e9 f7       	brne	.-6      	; 0xf1e <populateCoreStats(FullStatsMessageCore*)+0xa>
  {
  clearFullStatsMessageCore(content); // Defensive programming: all fields should be set explicitly below.
  if(localFHT8VTRVEnabled())
     f24:	0e 94 a7 0b 	call	0x174e	; 0x174e <localFHT8VTRVEnabled()>
     f28:	88 23       	and	r24, r24
     f2a:	31 f0       	breq	.+12     	; 0xf38 <populateCoreStats(FullStatsMessageCore*)+0x24>
    {
    // Use FHT8V house codes if available.
    content->id0 = FHT8VGetHC1();
     f2c:	0e 94 95 0b 	call	0x172a	; 0x172a <FHT8VGetHC1()>
     f30:	89 83       	std	Y+1, r24	; 0x01
    content->id1 = FHT8VGetHC2();
     f32:	0e 94 9e 0b 	call	0x173c	; 0x173c <FHT8VGetHC2()>
     f36:	11 c0       	rjmp	.+34     	; 0xf5a <populateCoreStats(FullStatsMessageCore*)+0x46>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     f38:	f9 99       	sbic	0x1f, 1	; 31
     f3a:	fe cf       	rjmp	.-4      	; 0xf38 <populateCoreStats(FullStatsMessageCore*)+0x24>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     f3c:	84 e1       	ldi	r24, 0x14	; 20
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	92 bd       	out	0x22, r25	; 34
     f42:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     f44:	f8 9a       	sbi	0x1f, 0	; 31
     f46:	80 b5       	in	r24, 0x20	; 32
    }
  else
    {
    // Use OpenTRV unique ID if no other higher-priority ID.
    content->id0 = eeprom_read_byte(0 + (uint8_t *)EE_START_ID);
     f48:	89 83       	std	Y+1, r24	; 0x01
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     f4a:	f9 99       	sbic	0x1f, 1	; 31
     f4c:	fe cf       	rjmp	.-4      	; 0xf4a <populateCoreStats(FullStatsMessageCore*)+0x36>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     f4e:	85 e1       	ldi	r24, 0x15	; 21
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	92 bd       	out	0x22, r25	; 34
     f54:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     f56:	f8 9a       	sbi	0x1f, 0	; 31
     f58:	80 b5       	in	r24, 0x20	; 32
    content->id1 = eeprom_read_byte(1 + (uint8_t *)EE_START_ID);
     f5a:	8a 83       	std	Y+2, r24	; 0x02
    }
  content->containsID = true;
     f5c:	28 81       	ld	r18, Y
     f5e:	82 2f       	mov	r24, r18
     f60:	81 60       	ori	r24, 0x01	; 1
     f62:	88 83       	st	Y, r24
  content->tempAndPower.tempC16 = TemperatureC16.get();
     f64:	80 91 7a 03 	lds	r24, 0x037A
     f68:	8b 83       	std	Y+3, r24	; 0x03
     f6a:	90 91 7b 03 	lds	r25, 0x037B
     f6e:	9f 77       	andi	r25, 0x7F	; 127
     f70:	8c 81       	ldd	r24, Y+4	; 0x04
     f72:	80 78       	andi	r24, 0x80	; 128
     f74:	89 2b       	or	r24, r25
     f76:	8c 83       	std	Y+4, r24	; 0x04
  content->tempAndPower.powerLow = Supply_mV.isSupplyVoltageLow();
     f78:	90 91 29 03 	lds	r25, 0x0329
     f7c:	97 95       	ror	r25
     f7e:	99 27       	eor	r25, r25
     f80:	97 95       	ror	r25
     f82:	8f 77       	andi	r24, 0x7F	; 127
     f84:	89 2b       	or	r24, r25
     f86:	8c 83       	std	Y+4, r24	; 0x04
  content->containsTempAndPower = true;
     f88:	23 60       	ori	r18, 0x03	; 3
     f8a:	28 83       	st	Y, r18
  content->ambL = fnmax((uint8_t)1, fnmin((uint8_t)254, (uint8_t)(AmbLight.get() >> 2))); // Coerce to allowed value in range [1,254]. Bug-fix c/o Gary Gladman!
     f8c:	80 91 71 03 	lds	r24, 0x0371
     f90:	90 91 72 03 	lds	r25, 0x0372
     f94:	96 95       	lsr	r25
     f96:	87 95       	ror	r24
     f98:	96 95       	lsr	r25
     f9a:	87 95       	ror	r24




// Templated function versions of min/max that do not evaluate the arguments twice.
template <class T> const T& fnmin(const T& a, const T& b) { return((a>b)?b:a); }
     f9c:	8e 3f       	cpi	r24, 0xFE	; 254
     f9e:	10 f0       	brcs	.+4      	; 0xfa4 <populateCoreStats(FullStatsMessageCore*)+0x90>
     fa0:	2e ef       	ldi	r18, 0xFE	; 254
     fa2:	04 c0       	rjmp	.+8      	; 0xfac <populateCoreStats(FullStatsMessageCore*)+0x98>
     fa4:	28 2f       	mov	r18, r24
     fa6:	88 23       	and	r24, r24
     fa8:	09 f4       	brne	.+2      	; 0xfac <populateCoreStats(FullStatsMessageCore*)+0x98>
     faa:	21 e0       	ldi	r18, 0x01	; 1
     fac:	2d 83       	std	Y+5, r18	; 0x05
  content->containsAmbL = true;
     fae:	88 81       	ld	r24, Y
     fb0:	84 60       	ori	r24, 0x04	; 4
     fb2:	88 83       	st	Y, r24
// Returns true if the room appears to be likely occupied (with active users) recently.
// This uses the same timer as isOccupied() (restarted by markAsOccupied())
// but returns to false somewhat sooner for example to allow ramping up more costly occupancy detection methods
// and to allow some simple graduated occupancy responses.
// Thread-safe.
bool isLikelyRecentlyOccupied() { return(occupationCountdownM > OCCUPATION_TIMEOUT_M/2); }
     fb4:	80 91 59 02 	lds	r24, 0x0259

// Two-bit occupancy: (00 not disclosed,) 1 not occupied, 2 possibly occupied, 3 probably occupied.
// 0 is not returned by this implementation.
// Thread-safe.
uint8_t twoBitOccupancyValue() { return(isLikelyRecentlyOccupied() ? 3 : (isLikelyOccupied() ? 2 : 1)); }
     fb8:	87 31       	cpi	r24, 0x17	; 23
     fba:	10 f0       	brcs	.+4      	; 0xfc0 <populateCoreStats(FullStatsMessageCore*)+0xac>
     fbc:	93 e0       	ldi	r25, 0x03	; 3
     fbe:	07 c0       	rjmp	.+14     	; 0xfce <populateCoreStats(FullStatsMessageCore*)+0xba>

// Returns true if the room appears to be likely occupied (with active users) now.
// Operates on a timeout; calling markAsOccupied() restarts the timer.
// Defaults to false (and API still exists) when OCCUPANCY_SUPPORT not defined.
// Thread-safe.
bool isLikelyOccupied() { return(0 != occupationCountdownM); }
     fc0:	80 91 59 02 	lds	r24, 0x0259
bool isLikelyRecentlyOccupied() { return(occupationCountdownM > OCCUPATION_TIMEOUT_M/2); }

// Two-bit occupancy: (00 not disclosed,) 1 not occupied, 2 possibly occupied, 3 probably occupied.
// 0 is not returned by this implementation.
// Thread-safe.
uint8_t twoBitOccupancyValue() { return(isLikelyRecentlyOccupied() ? 3 : (isLikelyOccupied() ? 2 : 1)); }
     fc4:	88 23       	and	r24, r24
     fc6:	11 f4       	brne	.+4      	; 0xfcc <populateCoreStats(FullStatsMessageCore*)+0xb8>
     fc8:	91 e0       	ldi	r25, 0x01	; 1
     fca:	01 c0       	rjmp	.+2      	; 0xfce <populateCoreStats(FullStatsMessageCore*)+0xba>
     fcc:	92 e0       	ldi	r25, 0x02	; 2
  content->containsTempAndPower = true;
  content->ambL = fnmax((uint8_t)1, fnmin((uint8_t)254, (uint8_t)(AmbLight.get() >> 2))); // Coerce to allowed value in range [1,254]. Bug-fix c/o Gary Gladman!
  content->containsAmbL = true;
  // OC1/OC2 = Occupancy: 00 not disclosed, 01 not occupied, 10 possibly occupied, 11 probably occupied.
  // The encodeFullStatsMessageCore() route should omit data not appopriate for security reasons.
  content->occ = twoBitOccupancyValue();
     fce:	8e 81       	ldd	r24, Y+6	; 0x06
     fd0:	8c 7f       	andi	r24, 0xFC	; 252
     fd2:	89 2b       	or	r24, r25
     fd4:	8e 83       	std	Y+6, r24	; 0x06
  }
     fd6:	df 91       	pop	r29
     fd8:	cf 91       	pop	r28
     fda:	08 95       	ret

00000fdc <bareStatsTX(bool, bool, bool)>:
// This may be binary or JSON format.
//   * resumeRX  if true and unit capable of running in hub/RX mode,
//       the unit will resume RX after sending the stats
//   * allowDoubleTX  allow double TX to increase chance of successful reception
//   * doBoth  send binary form as well as JSON form even if latter is supported
static void bareStatsTX(const bool resumeRX, const bool allowDoubleTX, const bool doBoth)
     fdc:	7f 92       	push	r7
     fde:	8f 92       	push	r8
     fe0:	9f 92       	push	r9
     fe2:	af 92       	push	r10
     fe4:	bf 92       	push	r11
     fe6:	cf 92       	push	r12
     fe8:	df 92       	push	r13
     fea:	ef 92       	push	r14
     fec:	ff 92       	push	r15
     fee:	0f 93       	push	r16
     ff0:	1f 93       	push	r17
     ff2:	df 93       	push	r29
     ff4:	cf 93       	push	r28
     ff6:	cd b7       	in	r28, 0x3d	; 61
     ff8:	de b7       	in	r29, 0x3e	; 62
     ffa:	c8 58       	subi	r28, 0x88	; 136
     ffc:	d0 40       	sbci	r29, 0x00	; 0
     ffe:	0f b6       	in	r0, 0x3f	; 63
    1000:	f8 94       	cli
    1002:	de bf       	out	0x3e, r29	; 62
    1004:	0f be       	out	0x3f, r0	; 63
    1006:	cd bf       	out	0x3d, r28	; 61
    1008:	78 2e       	mov	r7, r24
    100a:	d6 2e       	mov	r13, r22
  //   * max binary length, or max JSON length + 1 for CRC + 1 to allow detection of oversize message
  //   * terminating 0xff
  uint8_t buf[STATS_MSG_START_OFFSET + max(FullStatsMessageCore_MAX_BYTES_ON_WIRE,  MSG_JSON_MAX_LENGTH+1) + 1];

#if defined(ALLOW_JSON_OUTPUT)
  if(doBoth)
    100c:	44 23       	and	r20, r20
    100e:	31 f1       	breq	.+76     	; 0x105c <bareStatsTX(bool, bool, bool)+0x80>
#endif
    {
    // Send binary message first.
    // Gather core stats.
    FullStatsMessageCore_t content;
    populateCoreStats(&content);
    1010:	5e 01       	movw	r10, r28
    1012:	08 94       	sec
    1014:	a1 1c       	adc	r10, r1
    1016:	b1 1c       	adc	r11, r1
    1018:	c5 01       	movw	r24, r10
    101a:	0e 94 8a 07 	call	0xf14	; 0xf14 <populateCoreStats(FullStatsMessageCore*)>
    const uint8_t *msg1 = encodeFullStatsMessageCore(buf + STATS_MSG_START_OFFSET, sizeof(buf) - STATS_MSG_START_OFFSET, getStatsTXLevel(), false, &content);
    101e:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <getStatsTXLevel()>
    1022:	ac 01       	movw	r20, r24
    1024:	98 e4       	ldi	r25, 0x48	; 72
    1026:	e9 2e       	mov	r14, r25
    1028:	f1 2c       	mov	r15, r1
    102a:	ec 0e       	add	r14, r28
    102c:	fd 1e       	adc	r15, r29
    102e:	c7 01       	movw	r24, r14
    1030:	08 96       	adiw	r24, 0x08	; 8
    1032:	69 e3       	ldi	r22, 0x39	; 57
    1034:	20 e0       	ldi	r18, 0x00	; 0
    1036:	85 01       	movw	r16, r10
    1038:	0e 94 21 14 	call	0x2842	; 0x2842 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)>
    if(NULL == msg1)
    103c:	89 2b       	or	r24, r25
    103e:	09 f4       	brne	.+2      	; 0x1042 <bareStatsTX(bool, bool, bool)+0x66>
    1040:	d0 c0       	rjmp	.+416    	; 0x11e2 <bareStatsTX(bool, bool, bool)+0x206>
DEBUG_SERIAL_PRINTLN_FLASHSTRING("Bin gen err!");
#endif
      return;
      }
    // Record stats as if remote, and treat channel as secure.
    recordCoreStats(true, &content);
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	b5 01       	movw	r22, r10
    1046:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <recordCoreStats(bool, FullStatsMessageCore const*)>
    // Send it!
    rawStatsTX(true, buf, resumeRX, allowDoubleTX);
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	b7 01       	movw	r22, r14
    104e:	47 2d       	mov	r20, r7
    1050:	2d 2d       	mov	r18, r13
    1052:	0e 94 32 07 	call	0xe64	; 0xe64 <rawStatsTX(bool, unsigned char*, bool, bool)>
    }

#if defined(ALLOW_JSON_OUTPUT)
  // Be quiet for a moment after binary stats send.
  if(doBoth) { nap(WDTO_15MS); }
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <nap(signed char)>
  // Now append JSON text and closing 0xff...
  // Use letters that correspond to the values in ParsedRemoteStatsRecord and when displaying/parsing @ status records.
  int8_t wrote;

  // Managed JSON stats.
  static SimpleStatsRotation<5> ss1; // Configured for maximum different stats.
    105c:	80 91 22 02 	lds	r24, 0x0222
    1060:	88 23       	and	r24, r24
    1062:	99 f5       	brne	.+102    	; 0x10ca <bareStatsTX(bool, bool, bool)+0xee>
    1064:	82 e2       	ldi	r24, 0x22	; 34
    1066:	92 e0       	ldi	r25, 0x02	; 2
    1068:	0e 94 c9 3b 	call	0x7792	; 0x7792 <__cxa_guard_acquire>
    106c:	89 2b       	or	r24, r25
    106e:	69 f1       	breq	.+90     	; 0x10ca <bareStatsTX(bool, bool, bool)+0xee>

    // Initialise base with appropriate storage (non-null) and capacity knowledge.
    SimpleStatsRotationBase(DescValueTuple *_stats, const uint8_t _capacity)
      : capacity(_capacity), stats(_stats), nStats(0),
        lastTXed(~0), lastTXedHiPri(~0), // Show the first item on the first pass...
        id(NULL)
    1070:	85 e0       	ldi	r24, 0x05	; 5
    1072:	80 93 2a 02 	sts	0x022A, r24
    1076:	23 e3       	ldi	r18, 0x33	; 51
    1078:	32 e0       	ldi	r19, 0x02	; 2
    107a:	30 93 2c 02 	sts	0x022C, r19
    107e:	20 93 2b 02 	sts	0x022B, r18
    1082:	10 92 2d 02 	sts	0x022D, r1
    1086:	8f ef       	ldi	r24, 0xFF	; 255
    1088:	80 93 2e 02 	sts	0x022E, r24
    108c:	80 93 2f 02 	sts	0x022F, r24
    1090:	10 92 31 02 	sts	0x0231, r1
    1094:	10 92 30 02 	sts	0x0230, r1
    // is displayed immediately after the @/ID field when enabled,
    // and missing count values suggest a lost transmission somewhere.
    // Takes minimal space (1 byte).
    struct WriteCount
      {
      WriteCount() : enabled(0), count(0) { }
    1098:	80 91 32 02 	lds	r24, 0x0232
    109c:	80 78       	andi	r24, 0x80	; 128
    109e:	80 93 32 02 	sts	0x0232, r24
    10a2:	f9 01       	movw	r30, r18
    // The default sensitivity is set to just forbid transmission at default (255) leaf settings.
    // Byt default the stat is normal priority.
    GenericStatsDescriptor(const char * const statKey,
                           const uint8_t statSensitivity = stTXsecOnly,
                           const bool statHighPriority = false)
      : key(statKey), sensitivity(statSensitivity), highPriority(statHighPriority)
    10a4:	9e ef       	ldi	r25, 0xFE	; 254
    10a6:	11 82       	std	Z+1, r1	; 0x01
    10a8:	10 82       	st	Z, r1
    10aa:	92 83       	std	Z+2, r25	; 0x02
    10ac:	13 82       	std	Z+3, r1	; 0x03
    void enableCount(bool enable) { c.enabled = enable; }

  protected:
    struct DescValueTuple
      {
      DescValueTuple() : descriptor(NULL), value(0) { }
    10ae:	15 82       	std	Z+5, r1	; 0x05
    10b0:	14 82       	std	Z+4, r1	; 0x04
      int value;

      // Various run-time flags.
      struct Flags
        {
        Flags() : changed(false) { }
    10b2:	86 81       	ldd	r24, Z+6	; 0x06
    10b4:	8e 7f       	andi	r24, 0xFE	; 254
    10b6:	86 83       	std	Z+6, r24	; 0x06
    10b8:	37 96       	adiw	r30, 0x07	; 7
    // Stats to be tracked and sent; mandatory/priority items must be first.
    // A copy is taken of the user-supplied set of descriptions, preserving order.
    DescValueTuple stats[MaxStats];

  public:
    SimpleStatsRotation() : SimpleStatsRotationBase(stats, MaxStats) { }
    10ba:	82 e0       	ldi	r24, 0x02	; 2
    10bc:	e6 35       	cpi	r30, 0x56	; 86
    10be:	f8 07       	cpc	r31, r24
    10c0:	91 f7       	brne	.-28     	; 0x10a6 <bareStatsTX(bool, bool, bool)+0xca>
    10c2:	82 e2       	ldi	r24, 0x22	; 34
    10c4:	92 e0       	ldi	r25, 0x02	; 2
    10c6:	0e 94 d3 3b 	call	0x77a6	; 0x77a6 <__cxa_guard_release>
  bool maximise = false;
  if(ss1.isEmpty())
    10ca:	80 91 2d 02 	lds	r24, 0x022D
    10ce:	88 23       	and	r24, r24
    10d0:	11 f0       	breq	.+4      	; 0x10d6 <bareStatsTX(bool, bool, bool)+0xfa>
    10d2:	ff 24       	eor	r15, r15
    10d4:	07 c0       	rjmp	.+14     	; 0x10e4 <bareStatsTX(bool, bool, bool)+0x108>
    bool isEmpty() { return(0 == nStats); }

    // Iff true enable the count ("+") field and display immediately after the "@"/ID field.
    // The unsigned count increments as a successful write() operation completes,
    // and wraps after 63 (to limit space), potentially allowing easy detection of lost stats/transmissions.
    void enableCount(bool enable) { c.enabled = enable; }
    10d6:	80 91 32 02 	lds	r24, 0x0232
    10da:	81 60       	ori	r24, 0x01	; 1
    10dc:	80 93 32 02 	sts	0x0232, r24
    10e0:	ff 24       	eor	r15, r15
    10e2:	f3 94       	inc	r15
    // True if successful, false otherwise (eg capacity already reached).
    bool put(SimpleStatsKey key, int newValue);

    // Create/update value for the given sensor.
    // True if successful, false otherwise (eg capacity already reached).
    template <class T> bool put(const Sensor<T> &s) { put(s.tag(), s.get()); }
    10e4:	e0 91 78 03 	lds	r30, 0x0378
    10e8:	f0 91 79 03 	lds	r31, 0x0379
    10ec:	00 84       	ldd	r0, Z+8	; 0x08
    10ee:	f1 85       	ldd	r31, Z+9	; 0x09
    10f0:	e0 2d       	mov	r30, r0
    10f2:	88 e7       	ldi	r24, 0x78	; 120
    10f4:	93 e0       	ldi	r25, 0x03	; 3
    10f6:	09 95       	icall
    10f8:	8c 01       	movw	r16, r24
    10fa:	e0 91 78 03 	lds	r30, 0x0378
    10fe:	f0 91 79 03 	lds	r31, 0x0379
    1102:	02 80       	ldd	r0, Z+2	; 0x02
    1104:	f3 81       	ldd	r31, Z+3	; 0x03
    1106:	e0 2d       	mov	r30, r0
    1108:	88 e7       	ldi	r24, 0x78	; 120
    110a:	93 e0       	ldi	r25, 0x03	; 3
    110c:	09 95       	icall
    110e:	ac 01       	movw	r20, r24
    1110:	8a e2       	ldi	r24, 0x2A	; 42
    1112:	92 e0       	ldi	r25, 0x02	; 2
    1114:	b8 01       	movw	r22, r16
    1116:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <SimpleStatsRotationBase::put(char const*, int)>
    // Try and get as much out on the first TX as possible.
    maximise = true;
    }
  ss1.put(TemperatureC16);
#if defined(HUMIDITY_SENSOR_SUPPORT)
  ss1.put(RelHumidity);
    111a:	8a e2       	ldi	r24, 0x2A	; 42
    111c:	92 e0       	ldi	r25, 0x02	; 2
    111e:	64 e7       	ldi	r22, 0x74	; 116
    1120:	73 e0       	ldi	r23, 0x03	; 3
    1122:	0e 94 0c 07 	call	0xe18	; 0xe18 <bool SimpleStatsRotationBase::put<unsigned char>(Sensor<unsigned char> const&)>
#endif
  ss1.put(AmbLight);
    1126:	8a e2       	ldi	r24, 0x2A	; 42
    1128:	92 e0       	ldi	r25, 0x02	; 2
    112a:	6f e6       	ldi	r22, 0x6F	; 111
    112c:	73 e0       	ldi	r23, 0x03	; 3
    112e:	0e 94 e7 06 	call	0xdce	; 0xdce <bool SimpleStatsRotationBase::put<unsigned int>(Sensor<unsigned int> const&)>
  ss1.put(Supply_mV);
    1132:	8a e2       	ldi	r24, 0x2A	; 42
    1134:	92 e0       	ldi	r25, 0x02	; 2
    1136:	63 e2       	ldi	r22, 0x23	; 35
    1138:	73 e0       	ldi	r23, 0x03	; 3
    113a:	0e 94 e7 06 	call	0xdce	; 0xdce <bool SimpleStatsRotationBase::put<unsigned int>(Sensor<unsigned int> const&)>
  ss1.put(NominalRadValve);
    113e:	8a e2       	ldi	r24, 0x2A	; 42
    1140:	92 e0       	ldi	r25, 0x02	; 2
    1142:	6a e1       	ldi	r22, 0x1A	; 26
    1144:	72 e0       	ldi	r23, 0x02	; 2
    1146:	0e 94 0c 07 	call	0xe18	; 0xe18 <bool SimpleStatsRotationBase::put<unsigned char>(Sensor<unsigned char> const&)>
  // If not doing a doubleTX then sometimes suppress the change-flag clearing for this send
  // to reduce the chance of important changes being missed by the receiver.
  wrote = ss1.writeJSON(bptr, sizeof(buf) - (bptr-buf), getStatsTXLevel(), maximise, !allowDoubleTX && randRNG8NextBoolean());
    114a:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <getStatsTXLevel()>
    114e:	08 2f       	mov	r16, r24
    1150:	dd 20       	and	r13, r13
    1152:	31 f4       	brne	.+12     	; 0x1160 <bareStatsTX(bool, bool, bool)+0x184>
void resetRNG8();
#endif

// Get a boolean from RNG8.
// Avoids suspect low-order bit(s).
static inline bool randRNG8NextBoolean() { return(0 != (0x8 & randRNG8())); }
    1154:	0e 94 9e 19 	call	0x333c	; 0x333c <randRNG8()>
    1158:	83 ff       	sbrs	r24, 3
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <bareStatsTX(bool, bool, bool)+0x184>
    115c:	31 e0       	ldi	r19, 0x01	; 1
    115e:	01 c0       	rjmp	.+2      	; 0x1162 <bareStatsTX(bool, bool, bool)+0x186>
    1160:	30 e0       	ldi	r19, 0x00	; 0
                JsonKey     key;
                JsonValue   value;
            };

            JsonObjectBase(KeyValuePair* items, int capacity)
                : _items(items), _capacity(capacity), _count(0)
    1162:	be 01       	movw	r22, r28
    1164:	68 5f       	subi	r22, 0xF8	; 248
    1166:	7f 4f       	sbci	r23, 0xFF	; 255
    1168:	68 5f       	subi	r22, 0xF8	; 248
    116a:	7f 4f       	sbci	r23, 0xFF	; 255
    116c:	7b 87       	std	Y+11, r23	; 0x0b
    116e:	6a 87       	std	Y+10, r22	; 0x0a
    1170:	68 50       	subi	r22, 0x08	; 8
    1172:	70 40       	sbci	r23, 0x00	; 0
    1174:	87 e0       	ldi	r24, 0x07	; 7
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	9d 87       	std	Y+13, r25	; 0x0d
    117a:	8c 87       	std	Y+12, r24	; 0x0c
    117c:	1f 86       	std	Y+15, r1	; 0x0f
    117e:	1e 86       	std	Y+14, r1	; 0x0e
        template <int N>
        class JsonObject : public JsonObjectBase
        {
        public:
            JsonObject()
                : JsonObjectBase(_items, N)
    1180:	8c e7       	ldi	r24, 0x7C	; 124
    1182:	91 e0       	ldi	r25, 0x01	; 1
    1184:	99 87       	std	Y+9, r25	; 0x09
    1186:	88 87       	std	Y+8, r24	; 0x08
    uint8_t writeJSON(uint8_t * const buf, const uint8_t bufSize, const uint8_t sensitivity,
                      const bool maximise = false, const bool suppressClearChanged = true)
      {
      // Create temporary instance for @/ID plus optional count plus remaining stats...
      ArduinoJson::Generator::JsonObject<MaxStats+2> jo;
      return(_writeJSON(jo, buf, bufSize, sensitivity, maximise, suppressClearChanged));
    1188:	88 e4       	ldi	r24, 0x48	; 72
    118a:	88 2e       	mov	r8, r24
    118c:	91 2c       	mov	r9, r1
    118e:	8c 0e       	add	r8, r28
    1190:	9d 1e       	adc	r9, r29
    1192:	18 e0       	ldi	r17, 0x08	; 8
    1194:	a1 2e       	mov	r10, r17
    1196:	b1 2c       	mov	r11, r1
    1198:	a8 0c       	add	r10, r8
    119a:	b9 1c       	adc	r11, r9
    119c:	8a e2       	ldi	r24, 0x2A	; 42
    119e:	92 e0       	ldi	r25, 0x02	; 2
    11a0:	a5 01       	movw	r20, r10
    11a2:	29 e3       	ldi	r18, 0x39	; 57
    11a4:	ef 2c       	mov	r14, r15
    11a6:	c3 2e       	mov	r12, r19
    11a8:	0e 94 0e 10 	call	0x201c	; 0x201c <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)>
    11ac:	18 2f       	mov	r17, r24
  if(0 == wrote)
    11ae:	88 23       	and	r24, r24
    11b0:	c1 f0       	breq	.+48     	; 0x11e2 <bareStatsTX(bool, bool, bool)+0x206>
//DEBUG_SERIAL_PRINTLN_FLASHSTRING("JSON gen err!");
    return;
    }
    
  // Record stats as if local, and treat channel as secure.
  recordJSONStats(true, (const char *)bptr);
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	b5 01       	movw	r22, r10
    11b6:	0e 94 e7 14 	call	0x29ce	; 0x29ce <recordJSONStats(bool, char const*)>
  DEBUG_SERIAL_PRINT((const char *)bptr);
  DEBUG_SERIAL_PRINTLN();
#endif
  // Adjust JSON message for reliable transmission.
  // (Set high-bit on final '}' to make it unique, and compute and append (non-0xff) CRC.)
  const uint8_t crc = adjustJSONMsgForTXAndComputeCRC((char *)bptr);
    11ba:	c5 01       	movw	r24, r10
    11bc:	0e 94 56 0f 	call	0x1eac	; 0x1eac <adjustJSONMsgForTXAndComputeCRC(char*)>
  if(0xff == crc)
    11c0:	8f 3f       	cpi	r24, 0xFF	; 255
    11c2:	79 f0       	breq	.+30     	; 0x11e2 <bareStatsTX(bool, bool, bool)+0x206>
    {
//DEBUG_SERIAL_PRINTLN_FLASHSTRING("JSON msg bad!");
    return;
    }
  bptr += wrote;
    11c4:	e1 2f       	mov	r30, r17
    11c6:	ff 27       	eor	r31, r31
    11c8:	e7 fd       	sbrc	r30, 7
    11ca:	f0 95       	com	r31
    11cc:	ea 0d       	add	r30, r10
    11ce:	fb 1d       	adc	r31, r11
  *bptr++ = crc; // Add 7-bit CRC for on-the-wire check.
    11d0:	80 83       	st	Z, r24
  *bptr = 0xff; // Terminate message for TX.
    11d2:	8f ef       	ldi	r24, 0xFF	; 255
    11d4:	81 83       	std	Z+1, r24	; 0x01
    return;
    }
#endif
  // TODO: put in listen before TX to reduce collisions (CSMA).
  // Send it!
  rawStatsTX(false, buf, resumeRX, allowDoubleTX);
    11d6:	80 e0       	ldi	r24, 0x00	; 0
    11d8:	b4 01       	movw	r22, r8
    11da:	47 2d       	mov	r20, r7
    11dc:	2d 2d       	mov	r18, r13
    11de:	0e 94 32 07 	call	0xe64	; 0xe64 <rawStatsTX(bool, unsigned char*, bool, bool)>

#endif // defined(ALLOW_JSON_OUTPUT)

//DEBUG_SERIAL_PRINTLN_FLASHSTRING("Stats TX");
  }
    11e2:	c8 57       	subi	r28, 0x78	; 120
    11e4:	df 4f       	sbci	r29, 0xFF	; 255
    11e6:	0f b6       	in	r0, 0x3f	; 63
    11e8:	f8 94       	cli
    11ea:	de bf       	out	0x3e, r29	; 62
    11ec:	0f be       	out	0x3f, r0	; 63
    11ee:	cd bf       	out	0x3d, r28	; 61
    11f0:	cf 91       	pop	r28
    11f2:	df 91       	pop	r29
    11f4:	1f 91       	pop	r17
    11f6:	0f 91       	pop	r16
    11f8:	ff 90       	pop	r15
    11fa:	ef 90       	pop	r14
    11fc:	df 90       	pop	r13
    11fe:	cf 90       	pop	r12
    1200:	bf 90       	pop	r11
    1202:	af 90       	pop	r10
    1204:	9f 90       	pop	r9
    1206:	8f 90       	pop	r8
    1208:	7f 90       	pop	r7
    120a:	08 95       	ret

0000120c <setupOpenTRV()>:
#endif

void setupOpenTRV()
  {
  // Set up async edge interrupts.
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    120c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    120e:	f8 94       	cli
    {
    //PCICR = 0x05;
    //PCMSK0 = 0b00000011; // PB; PCINT  0--7    (LEARN1 and Radio)
    //PCMSK1 = 0b00000000; // PC; PCINT  8--15
    //PCMSK2 = 0b00101001; // PD; PCINT 16--24   (LEARN2 and MODE, RX)
    PCICR = 0x4; // 0x4 enables PD/PCMSK2.
    1210:	84 e0       	ldi	r24, 0x04	; 4
    1212:	80 93 68 00 	sts	0x0068, r24
    PCMSK2 = MASK_PD; // PD; PCINT 16--24 (0b1 is PCINT16/RX)
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	80 93 6d 00 	sts	0x006D, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    121c:	9f bf       	out	0x3f, r25	; 63
  // Do early 'wake-up' stats transmission if possible
  // when everything else is set up and ready.
  // Attempt to maximise chance of reception with  double TX.
  // Assume not in hub mode yet.
  // Send all possible formats.
  bareStatsTX(false, true, true);
    121e:	80 e0       	ldi	r24, 0x00	; 0
    1220:	61 e0       	ldi	r22, 0x01	; 1
    1222:	41 e0       	ldi	r20, 0x01	; 1
    1224:	0e 94 ee 07 	call	0xfdc	; 0xfdc <bareStatsTX(bool, bool, bool)>

  // Set appropriate loop() values just before entering it.
  TIME_LSD = getSecondsLT();
    1228:	80 91 31 03 	lds	r24, 0x0331
    122c:	80 93 21 02 	sts	0x0221, r24
  }
    1230:	08 95       	ret

00001232 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)>:
// Returns false if a full set of stats not available, eg including the specified hour.
// Always returns false if all samples are the same.
//   * inTop  test for membership of the top quartile if true, bottom quartile if false
//   * statsSet  stats set number to use.
//   * hour  hour of day to use or ~0 for current hour.
bool inOutlierQuartile(const uint8_t inTop, const uint8_t statsSet, const uint8_t hour)
    1232:	0f 93       	push	r16
    1234:	1f 93       	push	r17
    1236:	08 2f       	mov	r16, r24
    1238:	16 2f       	mov	r17, r22
  {
  if(statsSet >= EE_STATS_SETS) { return(false); } // Bad stats set number, ie unsafe.
    123a:	6b 30       	cpi	r22, 0x0B	; 11
    123c:	08 f0       	brcs	.+2      	; 0x1240 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0xe>
    123e:	3f c0       	rjmp	.+126    	; 0x12be <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x8c>
  const uint8_t hh = (hour > 23) ? getHoursLT() : hour;
    1240:	48 31       	cpi	r20, 0x18	; 24
    1242:	18 f0       	brcs	.+6      	; 0x124a <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x18>
    1244:	0e 94 56 1c 	call	0x38ac	; 0x38ac <getHoursLT()>
    1248:	48 2f       	mov	r20, r24
  const uint8_t *ss = (uint8_t *)(EE_STATS_START_ADDR(statsSet) + hh);
    124a:	88 e1       	ldi	r24, 0x18	; 24
    124c:	18 9f       	mul	r17, r24
    124e:	b0 01       	movw	r22, r0
    1250:	11 24       	eor	r1, r1
    1252:	60 50       	subi	r22, 0x00	; 0
    1254:	7f 4f       	sbci	r23, 0xFF	; 255
    1256:	64 0f       	add	r22, r20
    1258:	71 1d       	adc	r23, r1
    125a:	9b 01       	movw	r18, r22
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    125c:	f9 99       	sbic	0x1f, 1	; 31
    125e:	fe cf       	rjmp	.-4      	; 0x125c <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x2a>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1260:	72 bd       	out	0x22, r23	; 34
    1262:	61 bd       	out	0x21, r22	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1264:	f8 9a       	sbi	0x1f, 0	; 31
    1266:	40 b5       	in	r20, 0x20	; 32
  const uint8_t sample = eeprom_read_byte(ss);
  if(STATS_UNSET_INT == sample) { return(false); }
  if(inTop) { return(inTopQuartile(ss, sample)); }
    1268:	00 23       	and	r16, r16
    126a:	21 f4       	brne	.+8      	; 0x1274 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x42>
    126c:	90 e0       	ldi	r25, 0x00	; 0
//   * s is start of (24) sample set in EEPROM
//   * sample to be tested for being in lower quartile
static bool inBottomQuartile(const uint8_t *sE, const uint8_t sample)
  {
  uint8_t valuesHigher = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
    126e:	68 5e       	subi	r22, 0xE8	; 232
    1270:	7f 4f       	sbci	r23, 0xFF	; 255
    1272:	22 c0       	rjmp	.+68     	; 0x12b8 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x86>
  if(statsSet >= EE_STATS_SETS) { return(false); } // Bad stats set number, ie unsafe.
  const uint8_t hh = (hour > 23) ? getHoursLT() : hour;
  const uint8_t *ss = (uint8_t *)(EE_STATS_START_ADDR(statsSet) + hh);
  const uint8_t sample = eeprom_read_byte(ss);
  if(STATS_UNSET_INT == sample) { return(false); }
  if(inTop) { return(inTopQuartile(ss, sample)); }
    1274:	90 e0       	ldi	r25, 0x00	; 0
//   * s is start of (24) sample set in EEPROM
//   * sample to be tested for being in lower quartile
static bool inTopQuartile(const uint8_t *sE, const uint8_t sample)
  {
  uint8_t valuesLower = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
    1276:	68 5e       	subi	r22, 0xE8	; 232
    1278:	7f 4f       	sbci	r23, 0xFF	; 255
    127a:	0d c0       	rjmp	.+26     	; 0x1296 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x64>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    127c:	f9 99       	sbic	0x1f, 1	; 31
    127e:	fe cf       	rjmp	.-4      	; 0x127c <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x4a>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1280:	32 bd       	out	0x22, r19	; 34
    1282:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1284:	f8 9a       	sbi	0x1f, 0	; 31
    1286:	80 b5       	in	r24, 0x20	; 32
    {
    const uint8_t v = eeprom_read_byte(sE); 
    if(STATS_UNSET_INT == v) { return(false); } // Abort if not a full set of stats (eg at least one full day's worth). 
    if(v < sample) { if(++valuesLower >= 18) { return(true); } } // Stop as soon as known to be in upper quartile.
    1288:	84 17       	cp	r24, r20
    128a:	18 f4       	brcc	.+6      	; 0x1292 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x60>
    128c:	9f 5f       	subi	r25, 0xFF	; 255
    128e:	92 31       	cpi	r25, 0x12	; 18
    1290:	c0 f4       	brcc	.+48     	; 0x12c2 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x90>
//   * s is start of (24) sample set in EEPROM
//   * sample to be tested for being in lower quartile
static bool inTopQuartile(const uint8_t *sE, const uint8_t sample)
  {
  uint8_t valuesLower = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
    1292:	2f 5f       	subi	r18, 0xFF	; 255
    1294:	3f 4f       	sbci	r19, 0xFF	; 255
    1296:	26 17       	cp	r18, r22
    1298:	37 07       	cpc	r19, r23
    129a:	81 f7       	brne	.-32     	; 0x127c <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x4a>
    129c:	10 c0       	rjmp	.+32     	; 0x12be <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x8c>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    129e:	f9 99       	sbic	0x1f, 1	; 31
    12a0:	fe cf       	rjmp	.-4      	; 0x129e <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x6c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    12a2:	32 bd       	out	0x22, r19	; 34
    12a4:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    12a6:	f8 9a       	sbi	0x1f, 0	; 31
    12a8:	80 b5       	in	r24, 0x20	; 32
  uint8_t valuesHigher = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
    {
    const uint8_t v = eeprom_read_byte(sE); 
    if(STATS_UNSET_INT == v) { return(false); } // Abort if not a full set of stats (eg at least one full day's worth). 
    if(v > sample) { if(++valuesHigher >= 18) { return(true); } } // Stop as soon as known to be in lower quartile.
    12aa:	48 17       	cp	r20, r24
    12ac:	18 f4       	brcc	.+6      	; 0x12b4 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x82>
    12ae:	9f 5f       	subi	r25, 0xFF	; 255
    12b0:	92 31       	cpi	r25, 0x12	; 18
    12b2:	38 f4       	brcc	.+14     	; 0x12c2 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x90>
//   * s is start of (24) sample set in EEPROM
//   * sample to be tested for being in lower quartile
static bool inBottomQuartile(const uint8_t *sE, const uint8_t sample)
  {
  uint8_t valuesHigher = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
    12b4:	2f 5f       	subi	r18, 0xFF	; 255
    12b6:	3f 4f       	sbci	r19, 0xFF	; 255
    12b8:	26 17       	cp	r18, r22
    12ba:	37 07       	cpc	r19, r23
    12bc:	81 f7       	brne	.-32     	; 0x129e <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x6c>
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	01 c0       	rjmp	.+2      	; 0x12c4 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)+0x92>
    12c2:	81 e0       	ldi	r24, 0x01	; 1
  const uint8_t *ss = (uint8_t *)(EE_STATS_START_ADDR(statsSet) + hh);
  const uint8_t sample = eeprom_read_byte(ss);
  if(STATS_UNSET_INT == sample) { return(false); }
  if(inTop) { return(inTopQuartile(ss, sample)); }
  return(inBottomQuartile(ss, sample));
  }
    12c4:	1f 91       	pop	r17
    12c6:	0f 91       	pop	r16
    12c8:	08 95       	ret

000012ca <ModelledRadValve::computeTargetTemperature()>:
// Will be called by computeCallForHeat().
// One aim is to allow reasonable energy savings (10--30%)
// even if the device is left in WARM mode all the time,
// using occupancy/light/etc to determine when temperature can be set back
// without annoying users.
void ModelledRadValve::computeTargetTemperature()
    12ca:	ef 92       	push	r14
    12cc:	ff 92       	push	r15
    12ce:	1f 93       	push	r17
    12d0:	df 93       	push	r29
    12d2:	cf 93       	push	r28
    12d4:	00 d0       	rcall	.+0      	; 0x12d6 <ModelledRadValve::computeTargetTemperature()+0xc>
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
    12da:	7c 01       	movw	r14, r24
  {
#if defined(TEMP_POT_AVAILABLE)
  // Force up-to-date reading of temperature pot.
  TempPot.read();
    12dc:	8c e7       	ldi	r24, 0x7C	; 124
    12de:	93 e0       	ldi	r25, 0x03	; 3
    12e0:	0e 94 d6 31 	call	0x63ac	; 0x63ac <TemperaturePot::read()>
#endif

  if(!inWarmMode()) // In FROST mode.
    12e4:	80 91 5c 02 	lds	r24, 0x025C
    12e8:	88 23       	and	r24, r24
    12ea:	c1 f5       	brne	.+112    	; 0x135c <ModelledRadValve::computeTargetTemperature()+0x92>
    {
    const uint8_t frostC = getFROSTTargetC();
    12ec:	0e 94 c9 04 	call	0x992	; 0x992 <getFROSTTargetC()>
    12f0:	38 2f       	mov	r19, r24
    // Apply FROST safety target temperature by default in FROST mode; no setbacks apply.
    targetTempC = frostC;
    12f2:	f7 01       	movw	r30, r14
    12f4:	83 83       	std	Z+3, r24	; 0x03
  public:
    // Return last value fetched by read(); undefined before first read().
    // Usually fast.
    // Often likely to be thread-safe or usable within ISRs (Interrupt Service Routines),
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual uint8_t get() const { return(value); }
    12f6:	20 91 7e 03 	lds	r18, 0x037E
  // Cached input and result values; initially zero.
  static uint8_t potLast;
  static uint8_t resultLast;
  // Force recompuation if pot value changed
  // or apparently no calc done yet (unlikely/impossible zero cached result).
  if((potLast != pot) || (0 == resultLast))
    12fa:	80 91 5b 02 	lds	r24, 0x025B
    12fe:	82 17       	cp	r24, r18
    1300:	21 f4       	brne	.+8      	; 0x130a <ModelledRadValve::computeTargetTemperature()+0x40>
    1302:	80 91 5a 02 	lds	r24, 0x025A
    1306:	88 23       	and	r24, r24
    1308:	79 f4       	brne	.+30     	; 0x1328 <ModelledRadValve::computeTargetTemperature()+0x5e>
  const uint8_t high = (BIASCOM_WARM+1);
  const uint8_t range = high - low + 1;
  const uint8_t band = 256 / range; // Width of band for each degree C...

  // If relatively small number of distinct temperature values...
  if(pot >= 256 - band) { return(high); } // At top... (optimisation / robustness)
    130a:	24 3e       	cpi	r18, 0xE4	; 228
    130c:	10 f0       	brcs	.+4      	; 0x1312 <ModelledRadValve::computeTargetTemperature()+0x48>
    130e:	88 e1       	ldi	r24, 0x18	; 24
    1310:	07 c0       	rjmp	.+14     	; 0x1320 <ModelledRadValve::computeTargetTemperature()+0x56>
    1312:	80 e1       	ldi	r24, 0x10	; 16
    1314:	9c e1       	ldi	r25, 0x1C	; 28
    1316:	02 c0       	rjmp	.+4      	; 0x131c <ModelledRadValve::computeTargetTemperature()+0x52>
  if(range < 10)
    {
    uint8_t result = low;
    for(uint8_t ppot = band; ppot < pot; ++result) { ppot += band; }
    1318:	94 5e       	subi	r25, 0xE4	; 228
    131a:	8f 5f       	subi	r24, 0xFF	; 255
    131c:	92 17       	cp	r25, r18
    131e:	e0 f3       	brcs	.-8      	; 0x1318 <ModelledRadValve::computeTargetTemperature()+0x4e>
  // or apparently no calc done yet (unlikely/impossible zero cached result).
  if((potLast != pot) || (0 == resultLast))
    {
    const uint8_t result = computeWARMTargetC(pot);
    // Cache input/result.
    resultLast = result;
    1320:	80 93 5a 02 	sts	0x025A, r24
    potLast = pot;
    1324:	20 93 5b 02 	sts	0x025B, r18
    // to give room a chance to hit the target, and for furniture and surfaces to be warm, etc.
    // HINT OF SMARTNESS/ANTICIPATION HERE...
    // Only do this if the target WARM temperature is not an 'eco' temperature (ie near the bottom of the scale)
    // unless the current hour seems to be in the top quartile of occupancy.
    const uint8_t warmTarget = getWARMTargetC();
    const uint8_t preWarmTempC = fnmax((uint8_t)(warmTarget - SETBACK_FULL), frostC); // Putative pre-warm temperature...
    1328:	18 2f       	mov	r17, r24
    132a:	13 50       	subi	r17, 0x03	; 3
template <class T> const T& fnmax(const T& a, const T& b) { return((a<b)?b:a); }
    132c:	13 17       	cp	r17, r19
    132e:	08 f4       	brcc	.+2      	; 0x1332 <ModelledRadValve::computeTargetTemperature()+0x68>
    1330:	71 c0       	rjmp	.+226    	; 0x1414 <ModelledRadValve::computeTargetTemperature()+0x14a>
    if((targetTempC < preWarmTempC) &&
    1332:	31 17       	cp	r19, r17
    1334:	08 f0       	brcs	.+2      	; 0x1338 <ModelledRadValve::computeTargetTemperature()+0x6e>
    1336:	6e c0       	rjmp	.+220    	; 0x1414 <ModelledRadValve::computeTargetTemperature()+0x14a>
  TempPot.read();
#endif

  if(!inWarmMode()) // In FROST mode.
    {
    const uint8_t frostC = getFROSTTargetC();
    1338:	39 83       	std	Y+1, r19	; 0x01
    // to give room a chance to hit the target, and for furniture and surfaces to be warm, etc.
    // HINT OF SMARTNESS/ANTICIPATION HERE...
    // Only do this if the target WARM temperature is not an 'eco' temperature (ie near the bottom of the scale)
    // unless the current hour seems to be in the top quartile of occupancy.
    const uint8_t warmTarget = getWARMTargetC();
    const uint8_t preWarmTempC = fnmax((uint8_t)(warmTarget - SETBACK_FULL), frostC); // Putative pre-warm temperature...
    133a:	1a 83       	std	Y+2, r17	; 0x02
    if((targetTempC < preWarmTempC) &&
    133c:	82 31       	cpi	r24, 0x12	; 18
    133e:	40 f4       	brcc	.+16     	; 0x1350 <ModelledRadValve::computeTargetTemperature()+0x86>
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	65 e0       	ldi	r22, 0x05	; 5
    1344:	4f ef       	ldi	r20, 0xFF	; 255
    1346:	0e 94 19 09 	call	0x1232	; 0x1232 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)>
    134a:	88 23       	and	r24, r24
    134c:	09 f4       	brne	.+2      	; 0x1350 <ModelledRadValve::computeTargetTemperature()+0x86>
    134e:	62 c0       	rjmp	.+196    	; 0x1414 <ModelledRadValve::computeTargetTemperature()+0x14a>
    1350:	0e 94 57 1d 	call	0x3aae	; 0x3aae <isAnyScheduleOnWARMSoon()>
    1354:	88 23       	and	r24, r24
    1356:	09 f4       	brne	.+2      	; 0x135a <ModelledRadValve::computeTargetTemperature()+0x90>
    1358:	5d c0       	rjmp	.+186    	; 0x1414 <ModelledRadValve::computeTargetTemperature()+0x14a>
    135a:	7b c0       	rjmp	.+246    	; 0x1452 <ModelledRadValve::computeTargetTemperature()+0x188>

#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
    135c:	80 91 58 02 	lds	r24, 0x0258
    1360:	30 91 5b 02 	lds	r19, 0x025B
    1364:	88 23       	and	r24, r24
    1366:	09 f4       	brne	.+2      	; 0x136a <ModelledRadValve::computeTargetTemperature()+0xa0>
    1368:	6e c0       	rjmp	.+220    	; 0x1446 <ModelledRadValve::computeTargetTemperature()+0x17c>
    136a:	20 91 7e 03 	lds	r18, 0x037E
  // Cached input and result values; initially zero.
  static uint8_t potLast;
  static uint8_t resultLast;
  // Force recompuation if pot value changed
  // or apparently no calc done yet (unlikely/impossible zero cached result).
  if((potLast != pot) || (0 == resultLast))
    136e:	32 17       	cp	r19, r18
    1370:	21 f4       	brne	.+8      	; 0x137a <ModelledRadValve::computeTargetTemperature()+0xb0>
    1372:	80 91 5a 02 	lds	r24, 0x025A
    1376:	88 23       	and	r24, r24
    1378:	79 f4       	brne	.+30     	; 0x1398 <ModelledRadValve::computeTargetTemperature()+0xce>
  const uint8_t high = (BIASCOM_WARM+1);
  const uint8_t range = high - low + 1;
  const uint8_t band = 256 / range; // Width of band for each degree C...

  // If relatively small number of distinct temperature values...
  if(pot >= 256 - band) { return(high); } // At top... (optimisation / robustness)
    137a:	24 3e       	cpi	r18, 0xE4	; 228
    137c:	10 f0       	brcs	.+4      	; 0x1382 <ModelledRadValve::computeTargetTemperature()+0xb8>
    137e:	88 e1       	ldi	r24, 0x18	; 24
    1380:	07 c0       	rjmp	.+14     	; 0x1390 <ModelledRadValve::computeTargetTemperature()+0xc6>
    1382:	80 e1       	ldi	r24, 0x10	; 16
    1384:	9c e1       	ldi	r25, 0x1C	; 28
    1386:	02 c0       	rjmp	.+4      	; 0x138c <ModelledRadValve::computeTargetTemperature()+0xc2>
  if(range < 10)
    {
    uint8_t result = low;
    for(uint8_t ppot = band; ppot < pot; ++result) { ppot += band; }
    1388:	94 5e       	subi	r25, 0xE4	; 228
    138a:	8f 5f       	subi	r24, 0xFF	; 255
    138c:	92 17       	cp	r25, r18
    138e:	e0 f3       	brcs	.-8      	; 0x1388 <ModelledRadValve::computeTargetTemperature()+0xbe>
  // or apparently no calc done yet (unlikely/impossible zero cached result).
  if((potLast != pot) || (0 == resultLast))
    {
    const uint8_t result = computeWARMTargetC(pot);
    // Cache input/result.
    resultLast = result;
    1390:	80 93 5a 02 	sts	0x025A, r24
    potLast = pot;
    1394:	20 93 5b 02 	sts	0x025B, r18

#ifdef SUPPORT_BAKE
  else if(inBakeMode()) // If in BAKE mode then use elevated target.
    {
    // dec bakeCountdownM // Moved management of counter to UI code.
    targetTempC = fnmin((uint8_t)(getWARMTargetC() + BAKE_UPLIFT), (uint8_t)MAX_TARGET_C); // No setbacks apply in BAKE mode.
    1398:	8b 5f       	subi	r24, 0xFB	; 251
    139a:	80 36       	cpi	r24, 0x60	; 96
    139c:	c8 f1       	brcs	.+114    	; 0x1410 <ModelledRadValve::computeTargetTemperature()+0x146>
    139e:	8f e5       	ldi	r24, 0x5F	; 95
    13a0:	37 c0       	rjmp	.+110    	; 0x1410 <ModelledRadValve::computeTargetTemperature()+0x146>
  // Cached input and result values; initially zero.
  static uint8_t potLast;
  static uint8_t resultLast;
  // Force recompuation if pot value changed
  // or apparently no calc done yet (unlikely/impossible zero cached result).
  if((potLast != pot) || (0 == resultLast))
    13a2:	10 91 5a 02 	lds	r17, 0x025A
    13a6:	11 23       	and	r17, r17
    13a8:	79 f4       	brne	.+30     	; 0x13c8 <ModelledRadValve::computeTargetTemperature()+0xfe>
  const uint8_t high = (BIASCOM_WARM+1);
  const uint8_t range = high - low + 1;
  const uint8_t band = 256 / range; // Width of band for each degree C...

  // If relatively small number of distinct temperature values...
  if(pot >= 256 - band) { return(high); } // At top... (optimisation / robustness)
    13aa:	94 3e       	cpi	r25, 0xE4	; 228
    13ac:	10 f0       	brcs	.+4      	; 0x13b2 <ModelledRadValve::computeTargetTemperature()+0xe8>
    13ae:	18 e1       	ldi	r17, 0x18	; 24
    13b0:	07 c0       	rjmp	.+14     	; 0x13c0 <ModelledRadValve::computeTargetTemperature()+0xf6>
    13b2:	10 e1       	ldi	r17, 0x10	; 16
    13b4:	8c e1       	ldi	r24, 0x1C	; 28
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <ModelledRadValve::computeTargetTemperature()+0xf2>
  if(range < 10)
    {
    uint8_t result = low;
    for(uint8_t ppot = band; ppot < pot; ++result) { ppot += band; }
    13b8:	84 5e       	subi	r24, 0xE4	; 228
    13ba:	1f 5f       	subi	r17, 0xFF	; 255
    13bc:	89 17       	cp	r24, r25
    13be:	e0 f3       	brcs	.-8      	; 0x13b8 <ModelledRadValve::computeTargetTemperature()+0xee>
  // or apparently no calc done yet (unlikely/impossible zero cached result).
  if((potLast != pot) || (0 == resultLast))
    {
    const uint8_t result = computeWARMTargetC(pot);
    // Cache input/result.
    resultLast = result;
    13c0:	10 93 5a 02 	sts	0x025A, r17
    potLast = pot;
    13c4:	90 93 5b 02 	sts	0x025B, r25

// Returns true if the room appears to be likely occupied (with active users) now.
// Operates on a timeout; calling markAsOccupied() restarts the timer.
// Defaults to false (and API still exists) when OCCUPANCY_SUPPORT not defined.
// Thread-safe.
bool isLikelyOccupied() { return(0 != occupationCountdownM); }
    13c8:	80 91 59 02 	lds	r24, 0x0259
    const uint8_t wt = getWARMTargetC();
    // TODO: If no schedule set and no occupancy detected for over 1 day, then invoke full setback assuming people are away, eg on holiday.

    // Set back target temperature a little if the room seems to be unoccupied or (relatively) dark
    // AND no WARM schedule is active at the moment (TODO-111).
    if((isLikelyUnoccupied() || AmbLight.isRoomDark() /* || inOutlierQuartile(false, EE_STATS_SET_AMBLIGHT_BY_HOUR_SMOOTHED) */ ) &&
    13cc:	88 23       	and	r24, r24
    13ce:	21 f0       	breq	.+8      	; 0x13d8 <ModelledRadValve::computeTargetTemperature()+0x10e>
    13d0:	80 91 73 03 	lds	r24, 0x0373
    13d4:	88 23       	and	r24, r24
    13d6:	e9 f5       	brne	.+122    	; 0x1452 <ModelledRadValve::computeTargetTemperature()+0x188>
    13d8:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <isAnyScheduleOnWARMNow()>
    13dc:	88 23       	and	r24, r24
    13de:	c9 f5       	brne	.+114    	; 0x1452 <ModelledRadValve::computeTargetTemperature()+0x188>
    13e0:	80 91 7e 03 	lds	r24, 0x037E
      {
      // Use a small non-annoying setback if in comfort mode or the room is lit,
      // bigger if neither,
      // biggest if the room is likely to be unoccupied at this time of day.
      const uint8_t setback = (!hasEcoBias() || AmbLight.isRoomLit()) ? SETBACK_DEFAULT :
          (inOutlierQuartile(false, EE_STATS_SET_OCCPC_BY_HOUR_SMOOTHED) ? SETBACK_FULL : SETBACK_ECO);
    13e4:	87 fd       	sbrc	r24, 7
    13e6:	0e c0       	rjmp	.+28     	; 0x1404 <ModelledRadValve::computeTargetTemperature()+0x13a>
    virtual const char *tag() const { return("l"); }

    // Returns true if room is lit enough for someone to be active.
    // False if unknown.
    // Thread-safe and usable within ISRs (Interrupt Service Routines).
    bool isRoomLit() const { return(isRoomLitFlag); }
    13e8:	80 91 73 03 	lds	r24, 0x0373
    13ec:	88 23       	and	r24, r24
    13ee:	51 f4       	brne	.+20     	; 0x1404 <ModelledRadValve::computeTargetTemperature()+0x13a>
    13f0:	65 e0       	ldi	r22, 0x05	; 5
    13f2:	4f ef       	ldi	r20, 0xFF	; 255
    13f4:	0e 94 19 09 	call	0x1232	; 0x1232 <inOutlierQuartile(unsigned char, unsigned char, unsigned char)>
    13f8:	88 23       	and	r24, r24
    13fa:	11 f4       	brne	.+4      	; 0x1400 <ModelledRadValve::computeTargetTemperature()+0x136>
    13fc:	82 e0       	ldi	r24, 0x02	; 2
    13fe:	03 c0       	rjmp	.+6      	; 0x1406 <ModelledRadValve::computeTargetTemperature()+0x13c>
    1400:	83 e0       	ldi	r24, 0x03	; 3
    1402:	01 c0       	rjmp	.+2      	; 0x1406 <ModelledRadValve::computeTargetTemperature()+0x13c>
    1404:	81 e0       	ldi	r24, 0x01	; 1
      // Set a 'smarter' setback target temperature based on predicted occupancy, etc, even if not explicitly in 'smart' mode.
      const uint_least8_t hh = getHoursLT();
      const uint8_t sba = shouldBeWarmedAtHour(hh) ? setback : SETBACK_FULL; 
      targetTempC = fnmax((uint8_t)(wt - sba), getFROSTTargetC());
#else // Lighter-weight code, eg for PICAXE.
      targetTempC = fnmax((uint8_t)(wt - setback), (uint8_t)MIN_TARGET_C); // Target must never be set low enough to create a frost/freeze hazard.
    1406:	18 1b       	sub	r17, r24
    1408:	81 2f       	mov	r24, r17
    140a:	15 30       	cpi	r17, 0x05	; 5
    140c:	08 f4       	brcc	.+2      	; 0x1410 <ModelledRadValve::computeTargetTemperature()+0x146>
    140e:	85 e0       	ldi	r24, 0x05	; 5
    1410:	f7 01       	movw	r30, r14
    1412:	83 83       	std	Z+3, r24	; 0x03
    }

  // Use a calculation that mirrors how computeRequiredTRVPercentOpen() will set the valve...
  const int currentTempC16 = TemperatureC16.get();
  const uint8_t currentTempC = (uint8_t)(currentTempC16 >> 4);
  callingForHeat = (targetTempC >= currentTempC);
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	80 91 7a 03 	lds	r24, 0x037A
    141a:	90 91 7b 03 	lds	r25, 0x037B
    141e:	64 e0       	ldi	r22, 0x04	; 4
    1420:	95 95       	asr	r25
    1422:	87 95       	ror	r24
    1424:	6a 95       	dec	r22
    1426:	e1 f7       	brne	.-8      	; 0x1420 <ModelledRadValve::computeTargetTemperature()+0x156>
    1428:	f7 01       	movw	r30, r14
    142a:	23 81       	ldd	r18, Z+3	; 0x03
    142c:	28 17       	cp	r18, r24
    142e:	08 f0       	brcs	.+2      	; 0x1432 <ModelledRadValve::computeTargetTemperature()+0x168>
    1430:	31 e0       	ldi	r19, 0x01	; 1
    1432:	f7 01       	movw	r30, r14
    1434:	34 83       	std	Z+4, r19	; 0x04
  }
    1436:	0f 90       	pop	r0
    1438:	0f 90       	pop	r0
    143a:	cf 91       	pop	r28
    143c:	df 91       	pop	r29
    143e:	1f 91       	pop	r17
    1440:	ff 90       	pop	r15
    1442:	ef 90       	pop	r14
    1444:	08 95       	ret
    1446:	90 91 7e 03 	lds	r25, 0x037E
  // Cached input and result values; initially zero.
  static uint8_t potLast;
  static uint8_t resultLast;
  // Force recompuation if pot value changed
  // or apparently no calc done yet (unlikely/impossible zero cached result).
  if((potLast != pot) || (0 == resultLast))
    144a:	39 17       	cp	r19, r25
    144c:	09 f0       	breq	.+2      	; 0x1450 <ModelledRadValve::computeTargetTemperature()+0x186>
    144e:	ad cf       	rjmp	.-166    	; 0x13aa <ModelledRadValve::computeTargetTemperature()+0xe0>
    1450:	a8 cf       	rjmp	.-176    	; 0x13a2 <ModelledRadValve::computeTargetTemperature()+0xd8>
      targetTempC = fnmax((uint8_t)(wt - setback), (uint8_t)MIN_TARGET_C); // Target must never be set low enough to create a frost/freeze hazard.
#endif
      }
    // Else use WARM target as-is.
    else
      { targetTempC = wt; }
    1452:	f7 01       	movw	r30, r14
    1454:	13 83       	std	Z+3, r17	; 0x03
    1456:	de cf       	rjmp	.-68     	; 0x1414 <ModelledRadValve::computeTargetTemperature()+0x14a>

00001458 <ModelledRadValve::computeCallForHeat()>:
// The inputs must be valid (and recent).
// Values set are targetTempC, value (TRVPercentOpen).
// This may also prepare data such as TX command sequences for the TRV, boiler, etc.
// This routine may take significant CPU time; no I/O is done, only internal state is updated.
// Returns true if valve target changed and thus messages may need to be recomputed/sent/etc.
bool ModelledRadValve::computeCallForHeat()
    1458:	cf 93       	push	r28
    145a:	df 93       	push	r29
    145c:	ec 01       	movw	r28, r24
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    145e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1460:	f8 94       	cli
    {
#ifdef SUPPORT_BAKE
    // Run down BAKE mode timer if need be, one tick per minute.
    // FIXME: move elsewhere...
    if(bakeCountdownM > 0) { --bakeCountdownM; }
    1462:	80 91 58 02 	lds	r24, 0x0258
    1466:	88 23       	and	r24, r24
    1468:	19 f0       	breq	.+6      	; 0x1470 <ModelledRadValve::computeCallForHeat()+0x18>
    146a:	81 50       	subi	r24, 0x01	; 1
    146c:	80 93 58 02 	sts	0x0258, r24
#endif
    // Run down occupation timer if need be.
    // FIXME: move to occupation instance read().
    if(occupationCountdownM > 0) { --occupationCountdownM; }
    1470:	80 91 59 02 	lds	r24, 0x0259
    1474:	88 23       	and	r24, r24
    1476:	29 f0       	breq	.+10     	; 0x1482 <ModelledRadValve::computeCallForHeat()+0x2a>
    1478:	80 91 59 02 	lds	r24, 0x0259
    147c:	81 50       	subi	r24, 0x01	; 1
    147e:	80 93 59 02 	sts	0x0259, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1482:	9f bf       	out	0x3f, r25	; 63
    }

  computeTargetTemperature();
    1484:	ce 01       	movw	r24, r28
    1486:	0e 94 65 09 	call	0x12ca	; 0x12ca <ModelledRadValve::computeTargetTemperature()>
  return(computeRequiredTRVPercentOpen());
    148a:	ce 01       	movw	r24, r28
    148c:	0e 94 3e 05 	call	0xa7c	; 0xa7c <ModelledRadValve::computeRequiredTRVPercentOpen()>
  }
    1490:	df 91       	pop	r29
    1492:	cf 91       	pop	r28
    1494:	08 95       	ret

00001496 <ModelledRadValve::read()>:
  public:
    // Force a read/poll/recomputation of the target position and call for heat.
    // Sets/clears changed flag if computed valve position changed.
    // Call at a fixed rate (1/60s).
    // Potentially expensive/slow.
    virtual uint8_t read() { valveMoved = computeCallForHeat(); return(value); }
    1496:	0f 93       	push	r16
    1498:	1f 93       	push	r17
    149a:	8c 01       	movw	r16, r24
    149c:	0e 94 2c 0a 	call	0x1458	; 0x1458 <ModelledRadValve::computeCallForHeat()>
    14a0:	f8 01       	movw	r30, r16
    14a2:	85 83       	std	Z+5, r24	; 0x05
    14a4:	82 81       	ldd	r24, Z+2	; 0x02
    14a6:	1f 91       	pop	r17
    14a8:	0f 91       	pop	r16
    14aa:	08 95       	ret

000014ac <ModelledRadValve::isRecalibrating() const>:
// The target valve position is not lost while this is true.
// By default there is no recalibration step.
bool ModelledRadValve::isRecalibrating() const
  {
#ifdef USE_MODULE_FHT8VSIMPLE
  if(!isSyncedWithFHT8V()) { return(true); }
    14ac:	0e 94 c1 0b 	call	0x1782	; 0x1782 <isSyncedWithFHT8V()>
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	88 23       	and	r24, r24
    14b4:	09 f4       	brne	.+2      	; 0x14b8 <ModelledRadValve::isRecalibrating() const+0xc>
    14b6:	91 e0       	ldi	r25, 0x01	; 1
#endif
  return(false);
  }
    14b8:	89 2f       	mov	r24, r25
    14ba:	08 95       	ret

000014bc <ModelledRadValve::isControlledValveReallyOpen() const>:
// True if the controlled physical valve is thought to be at least partially open right now.
// If multiple valves are controlled then is this true only if all are at least partially open.
// Used to help avoid running boiler pump against closed valves.
// The default is to use the check the current computed position
// against the minimum open percentage.
bool ModelledRadValve::isControlledValveReallyOpen() const
    14bc:	1f 93       	push	r17
    14be:	cf 93       	push	r28
    14c0:	df 93       	push	r29
    14c2:	ec 01       	movw	r28, r24
  {
  if(isRecalibrating()) { return(false); }
    14c4:	e8 81       	ld	r30, Y
    14c6:	f9 81       	ldd	r31, Y+1	; 0x01
    14c8:	02 88       	ldd	r0, Z+18	; 0x12
    14ca:	f3 89       	ldd	r31, Z+19	; 0x13
    14cc:	e0 2d       	mov	r30, r0
    14ce:	09 95       	icall
    14d0:	88 23       	and	r24, r24
    14d2:	89 f4       	brne	.+34     	; 0x14f6 <ModelledRadValve::isControlledValveReallyOpen() const+0x3a>
#ifdef USE_MODULE_FHT8VSIMPLE
  if(!FHT8VisControlledValveOpen()) { return(false); }
    14d4:	0e 94 c4 0b 	call	0x1788	; 0x1788 <FHT8VisControlledValveOpen()>
    14d8:	88 23       	and	r24, r24
    14da:	69 f0       	breq	.+26     	; 0x14f6 <ModelledRadValve::isControlledValveReallyOpen() const+0x3a>
#endif
  return(value >= getMinPercentOpen());
    14dc:	1a 81       	ldd	r17, Y+2	; 0x02
    14de:	e8 81       	ld	r30, Y
    14e0:	f9 81       	ldd	r31, Y+1	; 0x01
    14e2:	04 8c       	ldd	r0, Z+28	; 0x1c
    14e4:	f5 8d       	ldd	r31, Z+29	; 0x1d
    14e6:	e0 2d       	mov	r30, r0
    14e8:	ce 01       	movw	r24, r28
    14ea:	09 95       	icall
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	18 17       	cp	r17, r24
    14f0:	18 f0       	brcs	.+6      	; 0x14f8 <ModelledRadValve::isControlledValveReallyOpen() const+0x3c>
    14f2:	91 e0       	ldi	r25, 0x01	; 1
    14f4:	01 c0       	rjmp	.+2      	; 0x14f8 <ModelledRadValve::isControlledValveReallyOpen() const+0x3c>
    14f6:	90 e0       	ldi	r25, 0x00	; 0
  }
    14f8:	89 2f       	mov	r24, r25
    14fa:	df 91       	pop	r29
    14fc:	cf 91       	pop	r28
    14fe:	1f 91       	pop	r17
    1500:	08 95       	ret

00001502 <eeprom_smart_erase_byte(unsigned char*)>:
// If the target byte is already 0xff then this does nothing at all beyond an initial read.
// This saves a bit of time and power and possibly a little EEPROM cell wear also.
// Without split erase/write this degenerates to a specialised eeprom_update_byte().
// As with the AVR eeprom_XXX_byte() macros, not safe to use outside and within ISRs as-is.
// Returns true iff an erase was performed.
bool eeprom_smart_erase_byte(uint8_t *p)
    1502:	9c 01       	movw	r18, r24
  eeprom_write_byte(p, 0xff); // Set to 0xff.
  return(true); // Performed an erase (and probably a write, too).
#else

  // Wait until EEPROM is idle/ready.
  eeprom_busy_wait();
    1504:	f9 99       	sbic	0x1f, 1	; 31
    1506:	fe cf       	rjmp	.-4      	; 0x1504 <eeprom_smart_erase_byte(unsigned char*)+0x2>
  //     if((uint8_t) 0xff == eeprom_read_byte(p)) { return; }
  // but leaves EEAR[L] set up appropriately for any erase or write.
#if E2END <= 0xFF
  EEARL = (uint8_t)p;
#else
  EEAR = (uint16_t)p;
    1508:	32 bd       	out	0x22, r19	; 34
    150a:	21 bd       	out	0x21, r18	; 33
#endif
  // Ignore problems that some AVRs have with EECR and STS instructions (ATmega64 errata).
  EECR = _BV(EERE); // Start EEPROM read operation.
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	8f bb       	out	0x1f, r24	; 31
  const uint8_t oldValue = EEDR; // Get old EEPROM value.
    1510:	80 b5       	in	r24, 0x20	; 32
  if((uint8_t) 0xff != oldValue) // Needs erase...
    1512:	8f 3f       	cpi	r24, 0xFF	; 255
    1514:	11 f4       	brne	.+4      	; 0x151a <eeprom_smart_erase_byte(unsigned char*)+0x18>
    1516:	80 e0       	ldi	r24, 0x00	; 0
    1518:	08 95       	ret
    {
    ATOMIC_BLOCK (ATOMIC_RESTORESTATE) // Avoid timing problems from interrupts.
    151a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    151c:	f8 94       	cli
      {
      // Erase to 0xff; no write needed.
      EECR = _BV(EEMPE) | _BV(EEPM0); // Set master write-enable bit and erase-only mode.
    151e:	84 e1       	ldi	r24, 0x14	; 20
    1520:	8f bb       	out	0x1f, r24	; 31
      EECR |= _BV(EEPE);  // Start erase-only operation.
    1522:	f9 9a       	sbi	0x1f, 1	; 31
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1524:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    1526:	81 e0       	ldi	r24, 0x01	; 1
      }
    return(true); // Performed the erase.
    }
  return(false);
#endif
  }
    1528:	08 95       	ret

0000152a <eeprom_smart_clear_bits(unsigned char*, unsigned char)>:
// If ANDing in the mask has no effect then this does nothing at all beyond an initial read.
// This saves a bit of time and power and possibly a little EEPROM cell wear also.
// Without split erase/write this degenerates to a specialised eeprom_smart_update_byte().
// As with the AVR eeprom_XXX_byte() macros, not safe to use outside and within ISRs as-is.
// Returns true iff a write was performed.
bool eeprom_smart_clear_bits(uint8_t *p, uint8_t mask)
    152a:	9c 01       	movw	r18, r24
  eeprom_write_byte(p, newValue); // Set to masked value.
  return(true); // Performed a write (and probably an erase, too).
#else

  // Wait until EEPROM is idle/ready.
  eeprom_busy_wait();
    152c:	f9 99       	sbic	0x1f, 1	; 31
    152e:	fe cf       	rjmp	.-4      	; 0x152c <eeprom_smart_clear_bits(unsigned char*, unsigned char)+0x2>
  //     oldValue = eeprom_read_byte(p);
  // and leaves EEAR[L] set up appropriately for any erase or write.
#if E2END <= 0xFF
  EEARL = (uint8_t)p;
#else
  EEAR = (uint16_t)p;
    1530:	32 bd       	out	0x22, r19	; 34
    1532:	21 bd       	out	0x21, r18	; 33
#endif
  // Ignore problems that some AVRs have with EECR and STS instructions (ATmega64 errata).
  EECR = _BV(EERE); // Start EEPROM read operation.
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	8f bb       	out	0x1f, r24	; 31
  const uint8_t oldValue = EEDR; // Get old EEPROM value.
    1538:	80 b5       	in	r24, 0x20	; 32
  const uint8_t newValue = oldValue & mask;
    153a:	68 23       	and	r22, r24
  if(oldValue != newValue) // Write is needed...
    153c:	86 17       	cp	r24, r22
    153e:	11 f4       	brne	.+4      	; 0x1544 <eeprom_smart_clear_bits(unsigned char*, unsigned char)+0x1a>
    1540:	80 e0       	ldi	r24, 0x00	; 0
    1542:	08 95       	ret
    {
    // Do the write: no erase is needed.
    EEDR = newValue; // Set EEPROM data register to required new value.
    1544:	60 bd       	out	0x20, r22	; 32
    ATOMIC_BLOCK (ATOMIC_RESTORESTATE) // Avoid timing problems from interrupts.
    1546:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1548:	f8 94       	cli
      {
      EECR = _BV(EEMPE) | _BV(EEPM1); // Set master write-enable bit and write-only mode.
    154a:	84 e2       	ldi	r24, 0x24	; 36
    154c:	8f bb       	out	0x1f, r24	; 31
      EECR |= _BV(EEPE);  // Start write-only operation.
    154e:	f9 9a       	sbi	0x1f, 1	; 31
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1550:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    1552:	81 e0       	ldi	r24, 0x01	; 1
      }
    return(true); // Performed the write.
    }
  return(false);
#endif
  }
    1554:	08 95       	ret

00001556 <eeprom_smart_update_byte(unsigned char*, unsigned char)>:
// Updates an EEEPROM byte iff not currently at the specified target value.
// May be able to selectively erase or write (ie reduce wear) to reach the desired value.
// As with the AVR eeprom_XXX_byte() macros, not safe to use outside and within ISRs as-is.
// Returns true iff an erase and/or write was performed.
// TODO: make smarter, eg don't wait/read twice...
bool eeprom_smart_update_byte(uint8_t *p, uint8_t value)
    1556:	78 2f       	mov	r23, r24
    1558:	e9 2f       	mov	r30, r25
  {
  // If target byte is 0xff then attempt smart erase rather than more generic write or erase+write.
  if((uint8_t) 0xff == value) { return(eeprom_smart_erase_byte(p)); }
    155a:	6f 3f       	cpi	r22, 0xFF	; 255
    155c:	19 f4       	brne	.+6      	; 0x1564 <eeprom_smart_update_byte(unsigned char*, unsigned char)+0xe>
    155e:	0e 94 81 0a 	call	0x1502	; 0x1502 <eeprom_smart_erase_byte(unsigned char*)>
    1562:	08 95       	ret
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1564:	f9 99       	sbic	0x1f, 1	; 31
    1566:	fe cf       	rjmp	.-4      	; 0x1564 <eeprom_smart_update_byte(unsigned char*, unsigned char)+0xe>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1568:	47 2f       	mov	r20, r23
    156a:	5e 2f       	mov	r21, r30
    156c:	52 bd       	out	0x22, r21	; 34
    156e:	41 bd       	out	0x21, r20	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1570:	f8 9a       	sbi	0x1f, 0	; 31
    1572:	80 b5       	in	r24, 0x20	; 32
  // More than an erase might be required...
  const uint8_t oldValue = eeprom_read_byte(p);
  if(value == oldValue) { return(false); } // No change needed.
    1574:	68 17       	cp	r22, r24
    1576:	11 f4       	brne	.+4      	; 0x157c <eeprom_smart_update_byte(unsigned char*, unsigned char)+0x26>
    1578:	80 e0       	ldi	r24, 0x00	; 0
    157a:	08 95       	ret
#ifdef EEPROM_SPLIT_ERASE_WRITE // Can do selective write.
  if(value == (value & oldValue)) { return(eeprom_smart_clear_bits(p, value)); } // Can use pure write to clear bits to zero.
    157c:	26 2f       	mov	r18, r22
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	82 23       	and	r24, r18
    1584:	93 23       	and	r25, r19
    1586:	28 17       	cp	r18, r24
    1588:	39 07       	cpc	r19, r25
    158a:	29 f4       	brne	.+10     	; 0x1596 <eeprom_smart_update_byte(unsigned char*, unsigned char)+0x40>
    158c:	87 2f       	mov	r24, r23
    158e:	9e 2f       	mov	r25, r30
    1590:	0e 94 95 0a 	call	0x152a	; 0x152a <eeprom_smart_clear_bits(unsigned char*, unsigned char)>
    1594:	08 95       	ret
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    1596:	f9 99       	sbic	0x1f, 1	; 31
    1598:	fe cf       	rjmp	.-4      	; 0x1596 <eeprom_smart_update_byte(unsigned char*, unsigned char)+0x40>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    159a:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    159c:	52 bd       	out	0x22, r21	; 34
    159e:	41 bd       	out	0x21, r20	; 33
#endif
    EEDR = __value;
    15a0:	60 bd       	out	0x20, r22	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    15a2:	0f b6       	in	r0, 0x3f	; 63
    15a4:	f8 94       	cli
    15a6:	fa 9a       	sbi	0x1f, 2	; 31
    15a8:	f9 9a       	sbi	0x1f, 1	; 31
    15aa:	0f be       	out	0x3f, r0	; 63
    15ac:	81 e0       	ldi	r24, 0x01	; 1
#endif
  eeprom_write_byte(p, value); // Needs to set some (but not all) bits to 1, so needs erase and write.
  return(true); // Performed an update.
  }
    15ae:	08 95       	ret

000015b0 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>:
// bptr must be pointing at the current byte to update on entry which must start off as 0xff;
// this will write the byte and increment bptr (and write 0xff to the new location) if one is filled up.
// Partial byte can only have even number of bits present, ie be in one of 4 states.
// Two least significant bits used to indicate how many bit pairs are still to be filled,
// so initial 0xff value (which is never a valid complete filled byte) indicates 'empty'.
static uint8_t *_FHT8VCreate200usAppendEncBit(uint8_t *bptr, const bool is1)
    15b0:	fc 01       	movw	r30, r24
  {
  const uint8_t bitPairsLeft = (*bptr) & 3; // Find out how many bit pairs are left to fill in the current byte.
    15b2:	80 81       	ld	r24, Z
    15b4:	98 2f       	mov	r25, r24
    15b6:	93 70       	andi	r25, 0x03	; 3
  if(!is1) // Appending 1100.
    15b8:	66 23       	and	r22, r22
    15ba:	b1 f4       	brne	.+44     	; 0x15e8 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x38>
    {
    switch(bitPairsLeft)
    15bc:	92 30       	cpi	r25, 0x02	; 2
    15be:	51 f0       	breq	.+20     	; 0x15d4 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x24>
    15c0:	93 30       	cpi	r25, 0x03	; 3
    15c2:	31 f0       	breq	.+12     	; 0x15d0 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x20>
    15c4:	9f 01       	movw	r18, r30
    15c6:	2f 5f       	subi	r18, 0xFF	; 255
    15c8:	3f 4f       	sbci	r19, 0xFF	; 255
    15ca:	91 30       	cpi	r25, 0x01	; 1
    15cc:	59 f4       	brne	.+22     	; 0x15e4 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x34>
    15ce:	05 c0       	rjmp	.+10     	; 0x15da <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x2a>
      {
      case 3: // Empty target byte (should be 0xff currently).
        *bptr = 0xcd; // %11001101 Write back partial byte (msbits now 1100 and two bit pairs remain free).
    15d0:	8d ec       	ldi	r24, 0xCD	; 205
    15d2:	25 c0       	rjmp	.+74     	; 0x161e <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      case 2: // Top bit pair already filled.
        *bptr = (*bptr & 0xc0) | 0x30; // Preserve existing ms bit-pair, set middle four bits 1100, one bit pair remains free.
    15d4:	80 7c       	andi	r24, 0xC0	; 192
    15d6:	80 63       	ori	r24, 0x30	; 48
    15d8:	22 c0       	rjmp	.+68     	; 0x161e <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      case 1: // Top two bit pairs already filled.
        *bptr = (*bptr & 0xf0) | 0xc; // Preserve existing ms (2) bit-pairs, set bottom four bits 1100, write back full byte.
    15da:	80 7f       	andi	r24, 0xF0	; 240
    15dc:	8c 60       	ori	r24, 0x0C	; 12
    15de:	80 83       	st	Z, r24
        *++bptr = (uint8_t) ~0U; // Initialise next byte for next incremental update.
    15e0:	f9 01       	movw	r30, r18
    15e2:	11 c0       	rjmp	.+34     	; 0x1606 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x56>
        break;
      default: // Top three bit pairs already filled.
        *bptr |= 3; // Preserve existing ms (3) bit-pairs, OR in leading 11 bits, write back full byte.
    15e4:	83 60       	ori	r24, 0x03	; 3
    15e6:	13 c0       	rjmp	.+38     	; 0x160e <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x5e>
        break;
      }
    }
  else // Appending 111000.
    {
    switch(bitPairsLeft)
    15e8:	92 30       	cpi	r25, 0x02	; 2
    15ea:	51 f0       	breq	.+20     	; 0x1600 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x50>
    15ec:	93 30       	cpi	r25, 0x03	; 3
    15ee:	31 f0       	breq	.+12     	; 0x15fc <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x4c>
    15f0:	9f 01       	movw	r18, r30
    15f2:	2f 5f       	subi	r18, 0xFF	; 255
    15f4:	3f 4f       	sbci	r19, 0xFF	; 255
    15f6:	91 30       	cpi	r25, 0x01	; 1
    15f8:	71 f4       	brne	.+28     	; 0x1616 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x66>
    15fa:	07 c0       	rjmp	.+14     	; 0x160a <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x5a>
      {
      case 3: // Empty target byte (should be 0xff currently).
        *bptr = 0xe0; // %11100000 Write back partial byte (msbits now 111000 and one bit pair remains free).
    15fc:	80 ee       	ldi	r24, 0xE0	; 224
    15fe:	0f c0       	rjmp	.+30     	; 0x161e <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      case 2: // Top bit pair already filled.
        *bptr = (*bptr & 0xc0) | 0x38; // Preserve existing ms bit-pair, set lsbits to 111000, write back full byte.
    1600:	80 7c       	andi	r24, 0xC0	; 192
    1602:	88 63       	ori	r24, 0x38	; 56
    1604:	81 93       	st	Z+, r24
        *++bptr = (uint8_t) ~0U; // Initialise next byte for next incremental update.
    1606:	8f ef       	ldi	r24, 0xFF	; 255
    1608:	0a c0       	rjmp	.+20     	; 0x161e <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      case 1: // Top two bit pairs already filled.
        *bptr = (*bptr & 0xf0) | 0xe; // Preserve existing (2) ms bit-pairs, set bottom four bits to 1110, write back full byte.
    160a:	80 7f       	andi	r24, 0xF0	; 240
    160c:	8e 60       	ori	r24, 0x0E	; 14
    160e:	80 83       	st	Z, r24
        *++bptr = 0x3e; // %00111110 Write trailing 00 bits to next byte and indicate 3 bit-pairs free for next incremental update.
    1610:	f9 01       	movw	r30, r18
    1612:	8e e3       	ldi	r24, 0x3E	; 62
    1614:	04 c0       	rjmp	.+8      	; 0x161e <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      default: // Top three bit pairs already filled.
        *bptr |= 3; // Preserve existing ms (3) bit-pairs, OR in leading 11 bits, write back full byte.
    1616:	83 60       	ori	r24, 0x03	; 3
    1618:	80 83       	st	Z, r24
        *++bptr = 0x8d; // Write trailing 1000 bits to next byte and indicate 2 bit-pairs free for next incremental update.
    161a:	f9 01       	movw	r30, r18
    161c:	8d e8       	ldi	r24, 0x8D	; 141
    161e:	80 83       	st	Z, r24
        break;
      }
    }
  return(bptr);
  }
    1620:	cf 01       	movw	r24, r30
    1622:	08 95       	ret

00001624 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>:

// Appends encoded byte in b msbit first plus trailing even parity bit (9 bits total)
// to the byte stream being created by FHT8VCreate200usBitStreamBptr.
static uint8_t *_FHT8VCreate200usAppendByteEP(uint8_t *bptr, const uint8_t b)
    1624:	ef 92       	push	r14
    1626:	ff 92       	push	r15
    1628:	0f 93       	push	r16
    162a:	1f 93       	push	r17
    162c:	cf 93       	push	r28
    162e:	df 93       	push	r29
    1630:	9c 01       	movw	r18, r24
    1632:	16 2f       	mov	r17, r22
    1634:	00 e8       	ldi	r16, 0x80	; 128
    1636:	c0 e0       	ldi	r28, 0x00	; 0
    1638:	d0 e0       	ldi	r29, 0x00	; 0
  {
  for(uint8_t mask = 0x80; mask != 0; mask >>= 1)
    { bptr = _FHT8VCreate200usAppendEncBit(bptr, 0 != (b & mask)); }
    163a:	e6 2e       	mov	r14, r22
    163c:	ff 24       	eor	r15, r15
    163e:	60 e0       	ldi	r22, 0x00	; 0
    1640:	80 2f       	mov	r24, r16
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	8e 21       	and	r24, r14
    1646:	9f 21       	and	r25, r15
    1648:	89 2b       	or	r24, r25
    164a:	09 f0       	breq	.+2      	; 0x164e <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)+0x2a>
    164c:	61 e0       	ldi	r22, 0x01	; 1
    164e:	c9 01       	movw	r24, r18
    1650:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
    1654:	9c 01       	movw	r18, r24

// Appends encoded byte in b msbit first plus trailing even parity bit (9 bits total)
// to the byte stream being created by FHT8VCreate200usBitStreamBptr.
static uint8_t *_FHT8VCreate200usAppendByteEP(uint8_t *bptr, const uint8_t b)
  {
  for(uint8_t mask = 0x80; mask != 0; mask >>= 1)
    1656:	06 95       	lsr	r16
    1658:	21 96       	adiw	r28, 0x01	; 1
    165a:	c8 30       	cpi	r28, 0x08	; 8
    165c:	d1 05       	cpc	r29, r1
    165e:	79 f7       	brne	.-34     	; 0x163e <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)+0x1a>
    { bptr = _FHT8VCreate200usAppendEncBit(bptr, 0 != (b & mask)); }
  return(_FHT8VCreate200usAppendEncBit(bptr, (bool) parity_even_bit(b))); // Append even parity bit.
    1660:	01 2e       	mov	r0, r17
    1662:	12 95       	swap	r17
    1664:	10 25       	eor	r17, r0
    1666:	01 2e       	mov	r0, r17
    1668:	16 95       	lsr	r17
    166a:	16 95       	lsr	r17
    166c:	10 25       	eor	r17, r0
    166e:	61 2f       	mov	r22, r17
    1670:	70 e0       	ldi	r23, 0x00	; 0
    1672:	6f 5f       	subi	r22, 0xFF	; 255
    1674:	7f 4f       	sbci	r23, 0xFF	; 255
    1676:	76 95       	lsr	r23
    1678:	67 95       	ror	r22
    167a:	61 70       	andi	r22, 0x01	; 1
    167c:	c9 01       	movw	r24, r18
    167e:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
  }
    1682:	df 91       	pop	r29
    1684:	cf 91       	pop	r28
    1686:	1f 91       	pop	r17
    1688:	0f 91       	pop	r16
    168a:	ff 90       	pop	r15
    168c:	ef 90       	pop	r14
    168e:	08 95       	ret

00001690 <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>:
// On entry the populated FHT8V command struct is passed by pointer.
// On exit, the memory block starting at buffer contains the low-byte, msbit-first bit, 0xff-terminated TX sequence.
// The maximum and minimum possible encoded message sizes are 35 (all zero bytes) and 45 (all 0xff bytes) bytes long.
// Note that a buffer space of at least 46 bytes is needed to accommodate the longest-possible encoded message and terminator.
// Returns pointer to the terminating 0xff on exit.
uint8_t *FHT8VCreate200usBitStreamBptr(uint8_t *bptr, const fht8v_msg_t *command)
    1690:	ff 92       	push	r15
    1692:	0f 93       	push	r16
    1694:	1f 93       	push	r17
    1696:	dc 01       	movw	r26, r24
    1698:	8b 01       	movw	r16, r22
  {
  // Generate FHT8V preamble.
  // First 12 x 0 bits of preamble, pre-encoded as 6 x 0xcc bytes.
  *bptr++ = 0xcc;
    169a:	8c ec       	ldi	r24, 0xCC	; 204
    169c:	fd 01       	movw	r30, r26
    169e:	81 93       	st	Z+, r24
  *bptr++ = 0xcc;
    16a0:	11 96       	adiw	r26, 0x01	; 1
    16a2:	8c 93       	st	X, r24
    16a4:	df 01       	movw	r26, r30
    16a6:	11 96       	adiw	r26, 0x01	; 1
  *bptr++ = 0xcc;
    16a8:	81 83       	std	Z+1, r24	; 0x01
    16aa:	fd 01       	movw	r30, r26
    16ac:	31 96       	adiw	r30, 0x01	; 1
  *bptr++ = 0xcc;
    16ae:	11 96       	adiw	r26, 0x01	; 1
    16b0:	8c 93       	st	X, r24
    16b2:	df 01       	movw	r26, r30
    16b4:	11 96       	adiw	r26, 0x01	; 1
  *bptr++ = 0xcc;
    16b6:	81 83       	std	Z+1, r24	; 0x01
    16b8:	fd 01       	movw	r30, r26
    16ba:	31 96       	adiw	r30, 0x01	; 1
  *bptr++ = 0xcc;
    16bc:	11 96       	adiw	r26, 0x01	; 1
    16be:	8c 93       	st	X, r24
  *bptr = (uint8_t) ~0U; // Initialise for _FHT8VCreate200usAppendEncBit routine.
    16c0:	ff 24       	eor	r15, r15
    16c2:	fa 94       	dec	r15
    16c4:	f1 82       	std	Z+1, r15	; 0x01
  // Push remaining 1 of preamble.
  bptr = _FHT8VCreate200usAppendEncBit(bptr, true); // Encode 1.
    16c6:	cf 01       	movw	r24, r30
    16c8:	01 96       	adiw	r24, 0x01	; 1
    16ca:	61 e0       	ldi	r22, 0x01	; 1
    16cc:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>

  // Generate body.
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->hc1);
    16d0:	f8 01       	movw	r30, r16
    16d2:	60 81       	ld	r22, Z
    16d4:	0e 94 12 0b 	call	0x1624	; 0x1624 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->hc2);
    16d8:	f8 01       	movw	r30, r16
    16da:	61 81       	ldd	r22, Z+1	; 0x01
    16dc:	0e 94 12 0b 	call	0x1624	; 0x1624 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
#ifdef FHT8V_ADR_USED
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->address);
#else
  bptr = _FHT8VCreate200usAppendByteEP(bptr, 0); // Default/broadcast.  TODO: could possibly be further optimised to send 0 value more efficiently.
    16e0:	60 e0       	ldi	r22, 0x00	; 0
    16e2:	0e 94 12 0b 	call	0x1624	; 0x1624 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
#endif
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->command);
    16e6:	f8 01       	movw	r30, r16
    16e8:	62 81       	ldd	r22, Z+2	; 0x02
    16ea:	0e 94 12 0b 	call	0x1624	; 0x1624 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->extension);
    16ee:	f8 01       	movw	r30, r16
    16f0:	63 81       	ldd	r22, Z+3	; 0x03
    16f2:	0e 94 12 0b 	call	0x1624	; 0x1624 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
#ifdef FHT8V_ADR_USED
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + command->address + command->command + command->extension;
#else
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + command->command + command->extension;
#endif
  bptr = _FHT8VCreate200usAppendByteEP(bptr, checksum);
    16f6:	f8 01       	movw	r30, r16
    16f8:	60 81       	ld	r22, Z
    16fa:	21 81       	ldd	r18, Z+1	; 0x01
    16fc:	62 0f       	add	r22, r18
    16fe:	64 5f       	subi	r22, 0xF4	; 244
    1700:	22 81       	ldd	r18, Z+2	; 0x02
    1702:	62 0f       	add	r22, r18
    1704:	23 81       	ldd	r18, Z+3	; 0x03
    1706:	62 0f       	add	r22, r18
    1708:	0e 94 12 0b 	call	0x1624	; 0x1624 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>

  // Generate trailer.
  // Append 0 bit for trailer.
  bptr = _FHT8VCreate200usAppendEncBit(bptr, false);
    170c:	60 e0       	ldi	r22, 0x00	; 0
    170e:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
  // Append extra 0 bits to ensure that final required bits are flushed out.
  bptr = _FHT8VCreate200usAppendEncBit(bptr, false);
    1712:	60 e0       	ldi	r22, 0x00	; 0
    1714:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
  bptr = _FHT8VCreate200usAppendEncBit(bptr, false);
    1718:	60 e0       	ldi	r22, 0x00	; 0
    171a:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
    171e:	fc 01       	movw	r30, r24
  *bptr = (uint8_t)0xff; // Terminate TX bytes.
    1720:	f0 82       	st	Z, r15
  return(bptr);
  }
    1722:	1f 91       	pop	r17
    1724:	0f 91       	pop	r16
    1726:	ff 90       	pop	r15
    1728:	08 95       	ret

0000172a <FHT8VGetHC1()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    172a:	f9 99       	sbic	0x1f, 1	; 31
    172c:	fe cf       	rjmp	.-4      	; 0x172a <FHT8VGetHC1()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    172e:	80 e1       	ldi	r24, 0x10	; 16
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	92 bd       	out	0x22, r25	; 34
    1734:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1736:	f8 9a       	sbi	0x1f, 0	; 31
    1738:	80 b5       	in	r24, 0x20	; 32
// Set (non-volatile) HC1 and HC2 for single/primary FHT8V wireless valve under control.
void FHT8VSetHC1(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC1, hc); }
void FHT8VSetHC2(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC2, hc); }

// Get (non-volatile) HC1 and HC2 for single/primary FHT8V wireless valve under control (will be 0xff until set).
uint8_t FHT8VGetHC1() { return(eeprom_read_byte((uint8_t*)EE_START_FHT8V_HC1)); }
    173a:	08 95       	ret

0000173c <FHT8VGetHC2()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    173c:	f9 99       	sbic	0x1f, 1	; 31
    173e:	fe cf       	rjmp	.-4      	; 0x173c <FHT8VGetHC2()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1740:	81 e1       	ldi	r24, 0x11	; 17
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	92 bd       	out	0x22, r25	; 34
    1746:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1748:	f8 9a       	sbi	0x1f, 0	; 31
    174a:	80 b5       	in	r24, 0x20	; 32
uint8_t FHT8VGetHC2() { return(eeprom_read_byte((uint8_t*)EE_START_FHT8V_HC2)); }
    174c:	08 95       	ret

0000174e <localFHT8VTRVEnabled()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    174e:	f9 99       	sbic	0x1f, 1	; 31
    1750:	fe cf       	rjmp	.-4      	; 0x174e <localFHT8VTRVEnabled()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1752:	80 e1       	ldi	r24, 0x10	; 16
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	92 bd       	out	0x22, r25	; 34
    1758:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    175a:	f8 9a       	sbi	0x1f, 0	; 31
    175c:	80 b5       	in	r24, 0x20	; 32

#ifndef localFHT8VTRVEnabled
// Returns TRV if valve/radiator is to be controlled by this unit.
// Usually the case, but may not be for (a) a hub or (b) a not-yet-configured unit.
// Returns false if house code parts are set to invalid or uninitialised values (>99).
bool localFHT8VTRVEnabled() { return(((FHT8VGetHC1() <= 99) && (FHT8VGetHC2() <= 99))); }
    175e:	84 36       	cpi	r24, 0x64	; 100
    1760:	10 f0       	brcs	.+4      	; 0x1766 <localFHT8VTRVEnabled()+0x18>
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	0c c0       	rjmp	.+24     	; 0x177e <localFHT8VTRVEnabled()+0x30>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1766:	f9 99       	sbic	0x1f, 1	; 31
    1768:	fe cf       	rjmp	.-4      	; 0x1766 <localFHT8VTRVEnabled()+0x18>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    176a:	81 e1       	ldi	r24, 0x11	; 17
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	92 bd       	out	0x22, r25	; 34
    1770:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1772:	f8 9a       	sbi	0x1f, 0	; 31
    1774:	80 b5       	in	r24, 0x20	; 32
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	84 36       	cpi	r24, 0x64	; 100
    177a:	08 f4       	brcc	.+2      	; 0x177e <localFHT8VTRVEnabled()+0x30>
    177c:	91 e0       	ldi	r25, 0x01	; 1
    177e:	89 2f       	mov	r24, r25
    1780:	08 95       	ret

00001782 <isSyncedWithFHT8V()>:
  }

// True once/while this node is synced with and controlling the target FHT8V valve; initially false.
static bool syncedWithFHT8V;
#ifndef IGNORE_FHT_SYNC
bool isSyncedWithFHT8V() { return(syncedWithFHT8V); }
    1782:	80 91 9d 02 	lds	r24, 0x029D
    1786:	08 95       	ret

00001788 <FHT8VisControlledValveOpen()>:
#endif


// True if FHT8V valve is believed to be open under instruction from this system; false if not in sync.
static bool FHT8V_isValveOpen;
bool getFHT8V_isValveOpen() { return(syncedWithFHT8V && FHT8V_isValveOpen); }
    1788:	80 91 9d 02 	lds	r24, 0x029D
    178c:	88 23       	and	r24, r24
    178e:	21 f0       	breq	.+8      	; 0x1798 <FHT8VisControlledValveOpen()+0x10>
    1790:	80 91 dc 02 	lds	r24, 0x02DC
    1794:	81 11       	cpse	r24, r1
    1796:	81 e0       	ldi	r24, 0x01	; 1


// GLOBAL NOTION OF CONTROLLED FHT8V VALVE STATE PROVIDED HERE
// True iff the FHT8V valve(s) (if any) controlled by this unit are really open.
// This waits until at least the command to open the FHT8Vhas been sent.
bool FHT8VisControlledValveOpen() { return(getFHT8V_isValveOpen()); }
    1798:	08 95       	ret

0000179a <FHT8VSyncAndTXReset()>:
//   FHT8V_isValveOpen (bit, true if this node has last sent command to open valve)
//   syncStateFHT8V (byte, internal)
//   halfSecondsToNextFHT8VTX (byte).
void FHT8VSyncAndTXReset()
  {
  syncedWithFHT8V = false;
    179a:	10 92 9d 02 	sts	0x029D, r1
  syncStateFHT8V = 0;
    179e:	10 92 9f 02 	sts	0x029F, r1
  halfSecondsToNextFHT8VTX = 0;
    17a2:	10 92 9e 02 	sts	0x029E, r1
  FHT8V_isValveOpen = false;
    17a6:	10 92 dc 02 	sts	0x02DC, r1
  }
    17aa:	08 95       	ret

000017ac <_SetupRFM22ToEavesdropOnFHT8V()>:
static void setLastRXErr(const uint8_t err) { ATOMIC_BLOCK (ATOMIC_RESTORESTATE) { lastRXerrno = err; } }


static void _SetupRFM22ToEavesdropOnFHT8V()
  {
  RFM22ModeStandbyAndClearState();
    17ac:	0e 94 4e 1b 	call	0x369c	; 0x369c <RFM22ModeStandbyAndClearState()>
  RFM22SetUpRX(MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE, true, true); // Set to RX longest-possible valid FS20 encoded frame.
    17b0:	8e e2       	ldi	r24, 0x2E	; 46
    17b2:	61 e0       	ldi	r22, 0x01	; 1
    17b4:	41 e0       	ldi	r20, 0x01	; 1
    17b6:	0e 94 2c 1a 	call	0x3458	; 0x3458 <RFM22SetUpRX(unsigned char, bool, bool)>
#error Board revision not defined.
#endif
#if V0p2_REV > 0
// TODO: hook into interrupts?
#endif
  }
    17ba:	08 95       	ret

000017bc <SetupToEavesdropOnFHT8V(bool)>:

// Set up radio to listen for remote TRV nodes calling for heat iff not already eavesdropping, else does nothing.
// Only done if in central hub mode.
// May set up interrupts/handlers.
// Does NOT clear flags indicating receipt of call for heat for example.
bool SetupToEavesdropOnFHT8V(const bool force)
    17bc:	0f 93       	push	r16
    17be:	1f 93       	push	r17
  {
  if(!force && eavesdropping) { return(false); } // Already eavesdropping.
    17c0:	88 23       	and	r24, r24
    17c2:	41 f4       	brne	.+16     	; 0x17d4 <SetupToEavesdropOnFHT8V(bool)+0x18>
    17c4:	80 91 5e 02 	lds	r24, 0x025E
    17c8:	88 23       	and	r24, r24
    17ca:	21 f0       	breq	.+8      	; 0x17d4 <SetupToEavesdropOnFHT8V(bool)+0x18>
    17cc:	80 e0       	ldi	r24, 0x00	; 0
  _SetupRFM22ToEavesdropOnFHT8V();
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("RX start");
#endif
  return(!wasEavesdropping);
  }
    17ce:	1f 91       	pop	r17
    17d0:	0f 91       	pop	r16
    17d2:	08 95       	ret
// May set up interrupts/handlers.
// Does NOT clear flags indicating receipt of call for heat for example.
bool SetupToEavesdropOnFHT8V(const bool force)
  {
  if(!force && eavesdropping) { return(false); } // Already eavesdropping.
  const bool wasEavesdropping = eavesdropping;
    17d4:	00 91 5e 02 	lds	r16, 0x025E
  eavesdropping = true;
    17d8:	11 e0       	ldi	r17, 0x01	; 1
    17da:	10 93 5e 02 	sts	0x025E, r17
  _SetupRFM22ToEavesdropOnFHT8V();
    17de:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <_SetupRFM22ToEavesdropOnFHT8V()>
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("RX start");
#endif
  return(!wasEavesdropping);
    17e2:	80 2f       	mov	r24, r16
    17e4:	81 27       	eor	r24, r17
    17e6:	f3 cf       	rjmp	.-26     	; 0x17ce <SetupToEavesdropOnFHT8V(bool)+0x12>

000017e8 <readOneBit(decode_state_t*)>:
  } decode_state_t;

// Decode bit pattern 1100 as 0, 111000 as 1.
// Returns 1 or 0 for the bit decoded, else marks the state as failed.
// Reads two bits at a time, MSB to LSB, advancing the byte pointer if necessary.
static uint8_t readOneBit(decode_state_t *const state)
    17e8:	cf 93       	push	r28
    17ea:	df 93       	push	r29
    17ec:	ec 01       	movw	r28, r24
  {
  if(state->bitStream > state->lastByte) { state->failed = true; } // Stop if off the buffer end.
    17ee:	28 81       	ld	r18, Y
    17f0:	39 81       	ldd	r19, Y+1	; 0x01
    17f2:	8a 81       	ldd	r24, Y+2	; 0x02
    17f4:	9b 81       	ldd	r25, Y+3	; 0x03
    17f6:	82 17       	cp	r24, r18
    17f8:	93 07       	cpc	r25, r19
    17fa:	10 f4       	brcc	.+4      	; 0x1800 <readOneBit(decode_state_t*)+0x18>
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	8d 83       	std	Y+5, r24	; 0x05
  if(state->failed) { return(0); } // Refuse to do anything further once decoding has failed.
    1800:	8d 81       	ldd	r24, Y+5	; 0x05
    1802:	88 23       	and	r24, r24
    1804:	09 f0       	breq	.+2      	; 0x1808 <readOneBit(decode_state_t*)+0x20>
    1806:	7e c0       	rjmp	.+252    	; 0x1904 <readOneBit(decode_state_t*)+0x11c>

  if(0 == state->mask) { state->mask = 0xc0; } // Special treatment of 0 as equivalent to 0xc0 on entry.
    1808:	8c 81       	ldd	r24, Y+4	; 0x04
    180a:	88 23       	and	r24, r24
    180c:	11 f4       	brne	.+4      	; 0x1812 <readOneBit(decode_state_t*)+0x2a>
    180e:	80 ec       	ldi	r24, 0xC0	; 192
    1810:	8c 83       	std	Y+4, r24	; 0x04
#if defined(DEBUG)
  if((state->mask != 0xc0) && (state->mask != 0x30) && (state->mask != 0xc) && (state->mask != 3)) { panic(); }
    1812:	8c 81       	ldd	r24, Y+4	; 0x04
    1814:	80 3c       	cpi	r24, 0xC0	; 192
    1816:	41 f0       	breq	.+16     	; 0x1828 <readOneBit(decode_state_t*)+0x40>
    1818:	80 33       	cpi	r24, 0x30	; 48
    181a:	31 f0       	breq	.+12     	; 0x1828 <readOneBit(decode_state_t*)+0x40>
    181c:	8c 30       	cpi	r24, 0x0C	; 12
    181e:	21 f0       	breq	.+8      	; 0x1828 <readOneBit(decode_state_t*)+0x40>
    1820:	83 30       	cpi	r24, 0x03	; 3
    1822:	11 f0       	breq	.+4      	; 0x1828 <readOneBit(decode_state_t*)+0x40>
    1824:	0e 94 c8 2e 	call	0x5d90	; 0x5d90 <panic()>
#endif

  // First two bits read must be 11.
  if(state->mask != (state->mask & *(state->bitStream)))
    1828:	8c 81       	ldd	r24, Y+4	; 0x04
    182a:	28 2f       	mov	r18, r24
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	e8 81       	ld	r30, Y
    1830:	f9 81       	ldd	r31, Y+1	; 0x01
    1832:	80 81       	ld	r24, Z
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	82 23       	and	r24, r18
    1838:	93 23       	and	r25, r19
    183a:	28 17       	cp	r18, r24
    183c:	39 07       	cpc	r19, r25
    183e:	09 f0       	breq	.+2      	; 0x1842 <readOneBit(decode_state_t*)+0x5a>
    1840:	51 c0       	rjmp	.+162    	; 0x18e4 <readOneBit(decode_state_t*)+0xfc>
#endif
    state->failed = true; return(0);
    }

  // Advance the mask; if the mask becomes 0 (then 0xc0 again) then advance the byte pointer.
  if(0 == ((state->mask) >>= 2))
    1842:	c9 01       	movw	r24, r18
    1844:	95 95       	asr	r25
    1846:	87 95       	ror	r24
    1848:	95 95       	asr	r25
    184a:	87 95       	ror	r24
    184c:	8c 83       	std	Y+4, r24	; 0x04
    184e:	88 23       	and	r24, r24
    1850:	61 f4       	brne	.+24     	; 0x186a <readOneBit(decode_state_t*)+0x82>
    {
    state->mask = 0xc0;
    1852:	80 ec       	ldi	r24, 0xC0	; 192
    1854:	8c 83       	std	Y+4, r24	; 0x04
    // If end of stream is encountered this is an error since more bits need to be read.
    if(++(state->bitStream) > state->lastByte) { state->failed = true; return(0); }
    1856:	9f 01       	movw	r18, r30
    1858:	2f 5f       	subi	r18, 0xFF	; 255
    185a:	3f 4f       	sbci	r19, 0xFF	; 255
    185c:	39 83       	std	Y+1, r19	; 0x01
    185e:	28 83       	st	Y, r18
    1860:	8a 81       	ldd	r24, Y+2	; 0x02
    1862:	9b 81       	ldd	r25, Y+3	; 0x03
    1864:	82 17       	cp	r24, r18
    1866:	93 07       	cpc	r25, r19
    1868:	e8 f1       	brcs	.+122    	; 0x18e4 <readOneBit(decode_state_t*)+0xfc>
    }

  // Next two bits can be 00 to decode a zero,
  // or 10 (followed by 00) to decode a one.
  const uint8_t secondPair = (state->mask & *(state->bitStream));
    186a:	8c 81       	ldd	r24, Y+4	; 0x04
  switch(secondPair)
    186c:	e8 81       	ld	r30, Y
    186e:	f9 81       	ldd	r31, Y+1	; 0x01
    1870:	20 81       	ld	r18, Z
    1872:	28 23       	and	r18, r24
    1874:	28 30       	cpi	r18, 0x08	; 8
    1876:	c1 f0       	breq	.+48     	; 0x18a8 <readOneBit(decode_state_t*)+0xc0>
    1878:	29 30       	cpi	r18, 0x09	; 9
    187a:	28 f4       	brcc	.+10     	; 0x1886 <readOneBit(decode_state_t*)+0x9e>
    187c:	22 23       	and	r18, r18
    187e:	41 f0       	breq	.+16     	; 0x1890 <readOneBit(decode_state_t*)+0xa8>
    1880:	22 30       	cpi	r18, 0x02	; 2
    1882:	81 f5       	brne	.+96     	; 0x18e4 <readOneBit(decode_state_t*)+0xfc>
    1884:	11 c0       	rjmp	.+34     	; 0x18a8 <readOneBit(decode_state_t*)+0xc0>
    1886:	20 32       	cpi	r18, 0x20	; 32
    1888:	79 f0       	breq	.+30     	; 0x18a8 <readOneBit(decode_state_t*)+0xc0>
    188a:	20 38       	cpi	r18, 0x80	; 128
    188c:	59 f5       	brne	.+86     	; 0x18e4 <readOneBit(decode_state_t*)+0xfc>
    188e:	0c c0       	rjmp	.+24     	; 0x18a8 <readOneBit(decode_state_t*)+0xc0>
      {
#if 0 && defined(DEBUG)
      DEBUG_SERIAL_PRINTLN_FLASHSTRING("decoded 0");
#endif
      // Advance the mask; if the mask becomes 0 then advance the byte pointer.
      if(0 == ((state->mask) >>= 2)) { ++(state->bitStream); }
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	95 95       	asr	r25
    1894:	87 95       	ror	r24
    1896:	95 95       	asr	r25
    1898:	87 95       	ror	r24
    189a:	8c 83       	std	Y+4, r24	; 0x04
    189c:	88 23       	and	r24, r24
    189e:	91 f5       	brne	.+100    	; 0x1904 <readOneBit(decode_state_t*)+0x11c>
    18a0:	31 96       	adiw	r30, 0x01	; 1
    18a2:	f9 83       	std	Y+1, r31	; 0x01
    18a4:	e8 83       	st	Y, r30
    18a6:	2f c0       	rjmp	.+94     	; 0x1906 <readOneBit(decode_state_t*)+0x11e>
      state->failed = true; return(0);
      }
    }

  // Advance the mask; if the mask becomes 0 (then 0xc0 again) then advance the byte pointer.
  if(0 == ((state->mask) >>= 2))
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	95 95       	asr	r25
    18ac:	87 95       	ror	r24
    18ae:	95 95       	asr	r25
    18b0:	87 95       	ror	r24
    18b2:	8c 83       	std	Y+4, r24	; 0x04
    18b4:	88 23       	and	r24, r24
    18b6:	61 f4       	brne	.+24     	; 0x18d0 <readOneBit(decode_state_t*)+0xe8>
    {
    state->mask = 0xc0;
    18b8:	80 ec       	ldi	r24, 0xC0	; 192
    18ba:	8c 83       	std	Y+4, r24	; 0x04
    // If end of stream is encountered this is an error since more bits need to be read.
    if(++(state->bitStream) > state->lastByte) { state->failed = true; return(0); }
    18bc:	88 81       	ld	r24, Y
    18be:	99 81       	ldd	r25, Y+1	; 0x01
    18c0:	01 96       	adiw	r24, 0x01	; 1
    18c2:	99 83       	std	Y+1, r25	; 0x01
    18c4:	88 83       	st	Y, r24
    18c6:	2a 81       	ldd	r18, Y+2	; 0x02
    18c8:	3b 81       	ldd	r19, Y+3	; 0x03
    18ca:	28 17       	cp	r18, r24
    18cc:	39 07       	cpc	r19, r25
    18ce:	50 f0       	brcs	.+20     	; 0x18e4 <readOneBit(decode_state_t*)+0xfc>
    }

  // Third pair of bits must be 00.
  if(0 != (state->mask & *(state->bitStream)))
    18d0:	2c 81       	ldd	r18, Y+4	; 0x04
    18d2:	e8 81       	ld	r30, Y
    18d4:	f9 81       	ldd	r31, Y+1	; 0x01
    18d6:	80 81       	ld	r24, Z
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	82 23       	and	r24, r18
    18de:	93 23       	and	r25, r19
    18e0:	89 2b       	or	r24, r25
    18e2:	19 f0       	breq	.+6      	; 0x18ea <readOneBit(decode_state_t*)+0x102>
     {
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("trailing 00 corrupt");
#endif
    state->failed = true; return(0);
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	8d 83       	std	Y+5, r24	; 0x05
    18e8:	0d c0       	rjmp	.+26     	; 0x1904 <readOneBit(decode_state_t*)+0x11c>
    }    

  // Advance the mask; if the mask becomes 0 then advance the byte pointer.
  if(0 == ((state->mask) >>= 2)) { ++(state->bitStream); }
    18ea:	c9 01       	movw	r24, r18
    18ec:	95 95       	asr	r25
    18ee:	87 95       	ror	r24
    18f0:	95 95       	asr	r25
    18f2:	87 95       	ror	r24
    18f4:	8c 83       	std	Y+4, r24	; 0x04
    18f6:	88 23       	and	r24, r24
    18f8:	19 f4       	brne	.+6      	; 0x1900 <readOneBit(decode_state_t*)+0x118>
    18fa:	31 96       	adiw	r30, 0x01	; 1
    18fc:	f9 83       	std	Y+1, r31	; 0x01
    18fe:	e8 83       	st	Y, r30
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	01 c0       	rjmp	.+2      	; 0x1906 <readOneBit(decode_state_t*)+0x11e>
    1904:	80 e0       	ldi	r24, 0x00	; 0
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("decoded 1");
#endif
  return(1); // Decoded a 1.
  }
    1906:	df 91       	pop	r29
    1908:	cf 91       	pop	r28
    190a:	08 95       	ret

0000190c <readOneByteWithParity(decode_state_t*)>:

// Decodes a series of encoded bits plus parity (and checks the parity, failing if wrong).
// Returns the byte decoded, else marks the state as failed.
static uint8_t readOneByteWithParity(decode_state_t *const state)
    190c:	ef 92       	push	r14
    190e:	ff 92       	push	r15
    1910:	0f 93       	push	r16
    1912:	1f 93       	push	r17
    1914:	cf 93       	push	r28
    1916:	df 93       	push	r29
    1918:	7c 01       	movw	r14, r24
  {
  if(state->failed) { return(0); } // Refuse to do anything further once decoding has failed.
    191a:	fc 01       	movw	r30, r24
    191c:	85 81       	ldd	r24, Z+5	; 0x05
    191e:	88 23       	and	r24, r24
    1920:	11 f0       	breq	.+4      	; 0x1926 <readOneByteWithParity(decode_state_t*)+0x1a>
    1922:	10 e0       	ldi	r17, 0x00	; 0
    1924:	1b c0       	rjmp	.+54     	; 0x195c <readOneByteWithParity(decode_state_t*)+0x50>

  // Read first bit specially...
  const uint8_t b7 = readOneBit(state); 
    1926:	c7 01       	movw	r24, r14
    1928:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <readOneBit(decode_state_t*)>
    192c:	18 2f       	mov	r17, r24
    192e:	08 2f       	mov	r16, r24
    1930:	c7 e0       	ldi	r28, 0x07	; 7
    1932:	d0 e0       	ldi	r29, 0x00	; 0
    1934:	06 c0       	rjmp	.+12     	; 0x1942 <readOneByteWithParity(decode_state_t*)+0x36>
  uint8_t result = b7;
  uint8_t parity = b7;
  // Then remaining 7 bits...
  for(int i = 7; --i >= 0; )
    {
    const uint8_t bit = readOneBit(state);
    1936:	c7 01       	movw	r24, r14
    1938:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <readOneBit(decode_state_t*)>
    parity ^= bit;
    193c:	08 27       	eor	r16, r24
    result = (result << 1) | bit;
    193e:	11 0f       	add	r17, r17
    1940:	18 2b       	or	r17, r24
  // Read first bit specially...
  const uint8_t b7 = readOneBit(state); 
  uint8_t result = b7;
  uint8_t parity = b7;
  // Then remaining 7 bits...
  for(int i = 7; --i >= 0; )
    1942:	21 97       	sbiw	r28, 0x01	; 1
    1944:	ff ef       	ldi	r31, 0xFF	; 255
    1946:	cf 3f       	cpi	r28, 0xFF	; 255
    1948:	df 07       	cpc	r29, r31
    194a:	a9 f7       	brne	.-22     	; 0x1936 <readOneByteWithParity(decode_state_t*)+0x2a>
    const uint8_t bit = readOneBit(state);
    parity ^= bit;
    result = (result << 1) | bit;
    }
  // Then get parity bit and check.
  if(parity != readOneBit(state))
    194c:	c7 01       	movw	r24, r14
    194e:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <readOneBit(decode_state_t*)>
    1952:	08 17       	cp	r16, r24
    1954:	19 f0       	breq	.+6      	; 0x195c <readOneByteWithParity(decode_state_t*)+0x50>
    {
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("bad parity");
#endif
    state->failed = true;
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	f7 01       	movw	r30, r14
    195a:	85 83       	std	Z+5, r24	; 0x05
    }
  return(result);
  }
    195c:	81 2f       	mov	r24, r17
    195e:	df 91       	pop	r29
    1960:	cf 91       	pop	r28
    1962:	1f 91       	pop	r17
    1964:	0f 91       	pop	r16
    1966:	ff 90       	pop	r15
    1968:	ef 90       	pop	r14
    196a:	08 95       	ret

0000196c <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)>:

// Decode raw bitstream into non-null command structure passed in; returns true if successful.
// Will return true if OK, else false if anything obviously invalid is detected such as failing parity or checksum.
// Finds and discards leading encoded 1 and trailing 0.
// Returns NULL on failure, else pointer to next full byte after last decoded.
uint8_t const *FHT8VDecodeBitStream(uint8_t const *bitStream, uint8_t const *lastByte, fht8v_msg_t *command)
    196c:	df 92       	push	r13
    196e:	ef 92       	push	r14
    1970:	ff 92       	push	r15
    1972:	0f 93       	push	r16
    1974:	1f 93       	push	r17
    1976:	df 93       	push	r29
    1978:	cf 93       	push	r28
    197a:	00 d0       	rcall	.+0      	; 0x197c <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x10>
    197c:	00 d0       	rcall	.+0      	; 0x197e <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x12>
    197e:	00 d0       	rcall	.+0      	; 0x1980 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x14>
    1980:	cd b7       	in	r28, 0x3d	; 61
    1982:	de b7       	in	r29, 0x3e	; 62
    1984:	8a 01       	movw	r16, r20
  {
  decode_state_t state;
  state.bitStream = bitStream;
    1986:	9a 83       	std	Y+2, r25	; 0x02
    1988:	89 83       	std	Y+1, r24	; 0x01
  state.lastByte = lastByte;
    198a:	7c 83       	std	Y+4, r23	; 0x04
    198c:	6b 83       	std	Y+3, r22	; 0x03
  state.mask = 0;
    198e:	1d 82       	std	Y+5, r1	; 0x05
  state.failed = false;
    1990:	1e 82       	std	Y+6, r1	; 0x06
      }
  DEBUG_SERIAL_PRINTLN();
#endif

  // Find and absorb the leading encoded '1', else quit if not found by end of stream.
  while(0 == readOneBit(&state)) { if(state.failed) { return(NULL); } }
    1992:	7e 01       	movw	r14, r28
    1994:	08 94       	sec
    1996:	e1 1c       	adc	r14, r1
    1998:	f1 1c       	adc	r15, r1
    199a:	03 c0       	rjmp	.+6      	; 0x19a2 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x36>
    199c:	8e 81       	ldd	r24, Y+6	; 0x06
    199e:	88 23       	and	r24, r24
    19a0:	e9 f5       	brne	.+122    	; 0x1a1c <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb0>
    19a2:	c7 01       	movw	r24, r14
    19a4:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <readOneBit(decode_state_t*)>
    19a8:	88 23       	and	r24, r24
    19aa:	c1 f3       	breq	.-16     	; 0x199c <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x30>
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("Read leading 1");
#endif

  command->hc1 = readOneByteWithParity(&state);
    19ac:	c7 01       	movw	r24, r14
    19ae:	0e 94 86 0c 	call	0x190c	; 0x190c <readOneByteWithParity(decode_state_t*)>
    19b2:	f8 01       	movw	r30, r16
    19b4:	80 83       	st	Z, r24
  command->hc2 = readOneByteWithParity(&state);
    19b6:	c7 01       	movw	r24, r14
    19b8:	0e 94 86 0c 	call	0x190c	; 0x190c <readOneByteWithParity(decode_state_t*)>
    19bc:	f8 01       	movw	r30, r16
    19be:	81 83       	std	Z+1, r24	; 0x01
#ifdef FHT8V_ADR_USED
  command->address = readOneByteWithParity(&state);
#else
  const uint8_t address = readOneByteWithParity(&state);
    19c0:	c7 01       	movw	r24, r14
    19c2:	0e 94 86 0c 	call	0x190c	; 0x190c <readOneByteWithParity(decode_state_t*)>
    19c6:	d8 2e       	mov	r13, r24
#endif
  command->command = readOneByteWithParity(&state);
    19c8:	c7 01       	movw	r24, r14
    19ca:	0e 94 86 0c 	call	0x190c	; 0x190c <readOneByteWithParity(decode_state_t*)>
    19ce:	f8 01       	movw	r30, r16
    19d0:	82 83       	std	Z+2, r24	; 0x02
  command->extension = readOneByteWithParity(&state);
    19d2:	c7 01       	movw	r24, r14
    19d4:	0e 94 86 0c 	call	0x190c	; 0x190c <readOneByteWithParity(decode_state_t*)>
    19d8:	f8 01       	movw	r30, r16
    19da:	83 83       	std	Z+3, r24	; 0x03
  const uint8_t checksumRead = readOneByteWithParity(&state);
    19dc:	c7 01       	movw	r24, r14
    19de:	0e 94 86 0c 	call	0x190c	; 0x190c <readOneByteWithParity(decode_state_t*)>
    19e2:	28 2f       	mov	r18, r24
  if(state.failed)
    19e4:	8e 81       	ldd	r24, Y+6	; 0x06
    19e6:	88 23       	and	r24, r24
    19e8:	c9 f4       	brne	.+50     	; 0x1a1c <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb0>
#ifdef FHT8V_ADR_USED
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + command->address + command->command + command->extension;
#else
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + address + command->command + command->extension;
#endif
  if(checksum != checksumRead)
    19ea:	f8 01       	movw	r30, r16
    19ec:	80 81       	ld	r24, Z
    19ee:	91 81       	ldd	r25, Z+1	; 0x01
    19f0:	89 0f       	add	r24, r25
    19f2:	84 5f       	subi	r24, 0xF4	; 244
    19f4:	92 81       	ldd	r25, Z+2	; 0x02
    19f6:	89 0f       	add	r24, r25
    19f8:	93 81       	ldd	r25, Z+3	; 0x03
    19fa:	89 0f       	add	r24, r25
    19fc:	8d 0d       	add	r24, r13
    19fe:	82 17       	cp	r24, r18
    1a00:	69 f4       	brne	.+26     	; 0x1a1c <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb0>
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("Checksum OK");
    }
#endif

  // Check the trailing encoded '0'.
  if(0 != readOneBit(&state))
    1a02:	c7 01       	movw	r24, r14
    1a04:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <readOneBit(decode_state_t*)>
    1a08:	88 23       	and	r24, r24
    1a0a:	41 f4       	brne	.+16     	; 0x1a1c <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb0>
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("Read of trailing 0 failed");
#endif
    state.failed = true; return(NULL);
    }
  if(state.failed) { return(NULL); }
    1a0c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a0e:	88 23       	and	r24, r24
    1a10:	29 f4       	brne	.+10     	; 0x1a1c <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb0>
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("Read entire message");
#endif
  // Return pointer to where any trailing data may be
  // in next byte beyond end of FHT8V frame.
  return(state.bitStream + 1);
    1a12:	29 81       	ldd	r18, Y+1	; 0x01
    1a14:	3a 81       	ldd	r19, Y+2	; 0x02
    1a16:	2f 5f       	subi	r18, 0xFF	; 255
    1a18:	3f 4f       	sbci	r19, 0xFF	; 255
    1a1a:	02 c0       	rjmp	.+4      	; 0x1a20 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb4>
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
  }
    1a20:	c9 01       	movw	r24, r18
    1a22:	26 96       	adiw	r28, 0x06	; 6
    1a24:	0f b6       	in	r0, 0x3f	; 63
    1a26:	f8 94       	cli
    1a28:	de bf       	out	0x3e, r29	; 62
    1a2a:	0f be       	out	0x3f, r0	; 63
    1a2c:	cd bf       	out	0x3d, r28	; 61
    1a2e:	cf 91       	pop	r28
    1a30:	df 91       	pop	r29
    1a32:	1f 91       	pop	r17
    1a34:	0f 91       	pop	r16
    1a36:	ff 90       	pop	r15
    1a38:	ef 90       	pop	r14
    1a3a:	df 90       	pop	r13
    1a3c:	08 95       	ret

00001a3e <FHT8VCallForHeatPoll()>:
// If used instead of an interrupt then should probably called at least about once every 100ms.
// Returns true if any useful activity/progress was detected by this call (not necessarily a full valid call-for-heat).
// Upon receipt of a valid call-for-heat this comes out of eavesdropping mode to save energy.
// If a problem is encountered this restarts the eavesdropping process.
// Does not block nor take significant time.
bool FHT8VCallForHeatPoll()
    1a3e:	ef 92       	push	r14
    1a40:	ff 92       	push	r15
    1a42:	0f 93       	push	r16
    1a44:	1f 93       	push	r17
    1a46:	df 93       	push	r29
    1a48:	cf 93       	push	r28
    1a4a:	cd b7       	in	r28, 0x3d	; 61
    1a4c:	de b7       	in	r29, 0x3e	; 62
    1a4e:	2b 97       	sbiw	r28, 0x0b	; 11
    1a50:	0f b6       	in	r0, 0x3f	; 63
    1a52:	f8 94       	cli
    1a54:	de bf       	out	0x3e, r29	; 62
    1a56:	0f be       	out	0x3f, r0	; 63
    1a58:	cd bf       	out	0x3d, r28	; 61
  {
  // Do nothing unless already in eavesdropping mode.
  if(!eavesdropping) { return(false); }
    1a5a:	80 91 5e 02 	lds	r24, 0x025E
    1a5e:	88 23       	and	r24, r24
    1a60:	09 f4       	brne	.+2      	; 0x1a64 <FHT8VCallForHeatPoll()+0x26>
    1a62:	d7 c0       	rjmp	.+430    	; 0x1c12 <FHT8VCallForHeatPoll()+0x1d4>
//  if(FHT8VCallForHeatHeard()) { return(false); }
//#endif

#if defined(PIN_RFM_NIRQ)
  // If nIRQ line is available then abort if it is not active (and thus spare the SPI bus).
  if(fastDigitalRead(PIN_RFM_NIRQ) != LOW) { return(false); }
    1a64:	19 99       	sbic	0x03, 1	; 3
    1a66:	d5 c0       	rjmp	.+426    	; 0x1c12 <FHT8VCallForHeatPoll()+0x1d4>
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("RX IRQ");
#endif
#endif

  const uint16_t status = RFM22ReadStatusBoth(); // reg1:reg2, on V0.08 PICAXE tempB2:SPI_DATAB.
    1a68:	0e 94 29 1b 	call	0x3652	; 0x3652 <RFM22ReadStatusBoth()>
    1a6c:	8c 01       	movw	r16, r24

  if(status & 0x1000) // Received frame.
    1a6e:	94 ff       	sbrs	r25, 4
    1a70:	ba c0       	rjmp	.+372    	; 0x1be6 <FHT8VCallForHeatPoll()+0x1a8>
    {
// Ensure that data from a previous frame is not trivially re-read by clearing the buffer explicitly.
//    for(uint8_t *p = FHT8VRXHubArea + FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE; --p >= FHT8VRXHubArea; )
//      { *p = 0; }
    memset(FHT8VRXHubArea, 0xff, sizeof(FHT8VRXHubArea));
    1a72:	8f e5       	ldi	r24, 0x5F	; 95
    1a74:	92 e0       	ldi	r25, 0x02	; 2
    1a76:	6f ef       	ldi	r22, 0xFF	; 255
    1a78:	70 e0       	ldi	r23, 0x00	; 0
    1a7a:	4e e3       	ldi	r20, 0x3E	; 62
    1a7c:	50 e0       	ldi	r21, 0x00	; 0
    1a7e:	0e 94 40 04 	call	0x880	; 0x880 <memset>
    // Attempt to read the entire frame.
    RFM22RXFIFO(FHT8VRXHubArea, sizeof(FHT8VRXHubArea));
    1a82:	8f e5       	ldi	r24, 0x5F	; 95
    1a84:	92 e0       	ldi	r25, 0x02	; 2
    1a86:	6e e3       	ldi	r22, 0x3E	; 62
    1a88:	0e 94 c4 19 	call	0x3388	; 0x3388 <RFM22RXFIFO(unsigned char*, unsigned char)>
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	82 2f       	mov	r24, r18
    uint8_t pos; // Current byte position in RX buffer...
    // Validate FHT8V premable (zeros encoded as up to 6x 0xcc bytes), else abort/restart.
    // Insist on at least a couple of bytes of valid preamble being present.
    for(pos = 0; pos < 6; ++pos)
      {
      const uint8_t b = FHT8VRXHubArea[pos];
    1a92:	f9 01       	movw	r30, r18
    1a94:	e1 5a       	subi	r30, 0xA1	; 161
    1a96:	fd 4f       	sbci	r31, 0xFD	; 253
    1a98:	e0 81       	ld	r30, Z
      if(0xcc != b)
    1a9a:	ec 3c       	cpi	r30, 0xCC	; 204
    1a9c:	09 f4       	brne	.+2      	; 0x1aa0 <FHT8VCallForHeatPoll()+0x62>
    1a9e:	44 c0       	rjmp	.+136    	; 0x1b28 <FHT8VCallForHeatPoll()+0xea>
        {
        if(MSG_JSON_LEADING_CHAR == b)
    1aa0:	eb 37       	cpi	r30, 0x7B	; 123
    1aa2:	a1 f4       	brne	.+40     	; 0x1acc <FHT8VCallForHeatPoll()+0x8e>
          {
          if(adjustJSONMsgForRXAndCheckCRC((char *)(FHT8VRXHubArea + pos), sizeof(FHT8VRXHubArea)-pos) > 0)
    1aa4:	02 2f       	mov	r16, r18
    1aa6:	10 e0       	ldi	r17, 0x00	; 0
    1aa8:	01 5a       	subi	r16, 0xA1	; 161
    1aaa:	1d 4f       	sbci	r17, 0xFD	; 253
    1aac:	6e e3       	ldi	r22, 0x3E	; 62
    1aae:	62 1b       	sub	r22, r18
    1ab0:	c8 01       	movw	r24, r16
    1ab2:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)>
    1ab6:	18 16       	cp	r1, r24
    1ab8:	2c f4       	brge	.+10     	; 0x1ac4 <FHT8VCallForHeatPoll()+0x86>
            {
            recordJSONStats(false, (const char *)(FHT8VRXHubArea + pos));
    1aba:	80 e0       	ldi	r24, 0x00	; 0
    1abc:	b8 01       	movw	r22, r16
    1abe:	0e 94 e7 14 	call	0x29ce	; 0x29ce <recordJSONStats(bool, char const*)>
    1ac2:	8a c0       	rjmp	.+276    	; 0x1bd8 <FHT8VCallForHeatPoll()+0x19a>
// Useful to assess the noise enviromentment.
static volatile uint8_t lastRXerrno;

// Atomically returns and clears last (FHT8V) RX error code, or 0 if none.
// Set with such codes as FHT8VRXErr_GENERIC; never set to zero.
static void setLastRXErr(const uint8_t err) { ATOMIC_BLOCK (ATOMIC_RESTORESTATE) { lastRXerrno = err; } }
    1ac4:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1ac6:	f8 94       	cli
    1ac8:	85 e0       	ldi	r24, 0x05	; 5
    1aca:	9e c0       	rjmp	.+316    	; 0x1c08 <FHT8VCallForHeatPoll()+0x1ca>
#endif
          setLastRXErr(FHT8VRXErr_BAD_RX_STATSFRAME);
          _SetupRFM22ToEavesdropOnFHT8V(); // Reset/restart RX.
          return(false); // Didn't look like valid JSON.
          }
        else if(MESSAGING_FULL_STATS_FLAGS_HEADER_MSBS == (b & MESSAGING_FULL_STATS_FLAGS_HEADER_MASK))
    1acc:	e0 7e       	andi	r30, 0xE0	; 224
    1ace:	e0 36       	cpi	r30, 0x60	; 96
    1ad0:	d1 f4       	brne	.+52     	; 0x1b06 <FHT8VCallForHeatPoll()+0xc8>
          {
          // May be binary stats frame, so attempt to decode...
          FullStatsMessageCore_t content;
          // (TODO: should reject non-secure messages when expecting secure ones...)
          const uint8_t *msg = decodeFullStatsMessageCore(FHT8VRXHubArea, sizeof(FHT8VRXHubArea)-pos, stTXalwaysAll, false, &content);
    1ad2:	6e e3       	ldi	r22, 0x3E	; 62
    1ad4:	62 1b       	sub	r22, r18
    1ad6:	75 e0       	ldi	r23, 0x05	; 5
    1ad8:	e7 2e       	mov	r14, r23
    1ada:	f1 2c       	mov	r15, r1
    1adc:	ec 0e       	add	r14, r28
    1ade:	fd 1e       	adc	r15, r29
    1ae0:	8f e5       	ldi	r24, 0x5F	; 95
    1ae2:	92 e0       	ldi	r25, 0x02	; 2
    1ae4:	40 e0       	ldi	r20, 0x00	; 0
    1ae6:	50 e0       	ldi	r21, 0x00	; 0
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	87 01       	movw	r16, r14
    1aec:	0e 94 46 13 	call	0x268c	; 0x268c <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)>
          if(NULL != msg)
    1af0:	89 2b       	or	r24, r25
    1af2:	09 f4       	brne	.+2      	; 0x1af6 <FHT8VCallForHeatPoll()+0xb8>
    1af4:	8c c0       	rjmp	.+280    	; 0x1c0e <FHT8VCallForHeatPoll()+0x1d0>
             {
             if(content.containsID)
    1af6:	8d 81       	ldd	r24, Y+5	; 0x05
    1af8:	80 ff       	sbrs	r24, 0
    1afa:	6e c0       	rjmp	.+220    	; 0x1bd8 <FHT8VCallForHeatPoll()+0x19a>
               DEBUG_SERIAL_PRINTFMT(content.id0, HEX);
               DEBUG_SERIAL_PRINT(' ');
               DEBUG_SERIAL_PRINTFMT(content.id1, HEX);
               DEBUG_SERIAL_PRINTLN();
#endif
               recordCoreStats(false, &content);
    1afc:	80 e0       	ldi	r24, 0x00	; 0
    1afe:	b7 01       	movw	r22, r14
    1b00:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <recordCoreStats(bool, FullStatsMessageCore const*)>
    1b04:	69 c0       	rjmp	.+210    	; 0x1bd8 <FHT8VCallForHeatPoll()+0x19a>

          _SetupRFM22ToEavesdropOnFHT8V(); // Reset/restart RX.
          return(false); // Nothing valid received.
          }

        if(pos < 2)
    1b06:	22 30       	cpi	r18, 0x02	; 2
    1b08:	b0 f4       	brcc	.+44     	; 0x1b36 <FHT8VCallForHeatPoll()+0xf8>
// Useful to assess the noise enviromentment.
static volatile uint8_t lastRXerrno;

// Atomically returns and clears last (FHT8V) RX error code, or 0 if none.
// Set with such codes as FHT8VRXErr_GENERIC; never set to zero.
static void setLastRXErr(const uint8_t err) { ATOMIC_BLOCK (ATOMIC_RESTORESTATE) { lastRXerrno = err; } }
    1b0a:	9f b7       	in	r25, 0x3f	; 63
    1b0c:	f8 94       	cli
    1b0e:	82 e0       	ldi	r24, 0x02	; 2
    1b10:	80 93 5d 02 	sts	0x025D, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1b14:	9f bf       	out	0x3f, r25	; 63
            DEBUG_SERIAL_PRINT_FLASHSTRING(" 0x");
            DEBUG_SERIAL_PRINTFMT(FHT8VRXHubArea[p], HEX);
            }
          DEBUG_SERIAL_PRINTLN();
#endif
          seedRNG8(FHT8VRXHubArea[pos], FHT8VRXHubArea[pos+2], FHT8VRXHubArea[pos+5]); // Attempt to gather some entropy from RX noise. (TODO-302).
    1b16:	f9 01       	movw	r30, r18
    1b18:	e1 5a       	subi	r30, 0xA1	; 161
    1b1a:	fd 4f       	sbci	r31, 0xFD	; 253
    1b1c:	80 81       	ld	r24, Z
    1b1e:	62 81       	ldd	r22, Z+2	; 0x02
    1b20:	45 81       	ldd	r20, Z+5	; 0x05
    1b22:	0e 94 83 19 	call	0x3306	; 0x3306 <seedRNG8(unsigned char, unsigned char, unsigned char)>
    1b26:	73 c0       	rjmp	.+230    	; 0x1c0e <FHT8VCallForHeatPoll()+0x1d0>
          _SetupRFM22ToEavesdropOnFHT8V(); // Reset/restart RX.
          return(false);
    1b28:	8f 5f       	subi	r24, 0xFF	; 255
    1b2a:	2f 5f       	subi	r18, 0xFF	; 255
    1b2c:	3f 4f       	sbci	r19, 0xFF	; 255
    // Attempt to read the entire frame.
    RFM22RXFIFO(FHT8VRXHubArea, sizeof(FHT8VRXHubArea));
    uint8_t pos; // Current byte position in RX buffer...
    // Validate FHT8V premable (zeros encoded as up to 6x 0xcc bytes), else abort/restart.
    // Insist on at least a couple of bytes of valid preamble being present.
    for(pos = 0; pos < 6; ++pos)
    1b2e:	26 30       	cpi	r18, 0x06	; 6
    1b30:	31 05       	cpc	r19, r1
    1b32:	09 f0       	breq	.+2      	; 0x1b36 <FHT8VCallForHeatPoll()+0xf8>
    1b34:	ad cf       	rjmp	.-166    	; 0x1a90 <FHT8VCallForHeatPoll()+0x52>
        break; // If enough preamble has been seen, move on to the body.
        }
      }
    fht8v_msg_t command;
    uint8_t const *lastByte = FHT8VRXHubArea + FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE - 1;
    uint8_t const *trailer = FHT8VDecodeBitStream(FHT8VRXHubArea + pos, lastByte, &command);
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	0a e9       	ldi	r16, 0x9A	; 154
    1b3a:	12 e0       	ldi	r17, 0x02	; 2
    1b3c:	81 5a       	subi	r24, 0xA1	; 161
    1b3e:	9d 4f       	sbci	r25, 0xFD	; 253
    1b40:	b8 01       	movw	r22, r16
    1b42:	ae 01       	movw	r20, r28
    1b44:	4f 5f       	subi	r20, 0xFF	; 255
    1b46:	5f 4f       	sbci	r21, 0xFF	; 255
    1b48:	0e 94 b6 0c 	call	0x196c	; 0x196c <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)>
    1b4c:	fc 01       	movw	r30, r24
    if(NULL != trailer)
    1b4e:	00 97       	sbiw	r24, 0x00	; 0
    1b50:	09 f4       	brne	.+2      	; 0x1b54 <FHT8VCallForHeatPoll()+0x116>
    1b52:	45 c0       	rjmp	.+138    	; 0x1bde <FHT8VCallForHeatPoll()+0x1a0>

#if defined(SUPPORT_TEMP_TX) // Only look for the trailer if supported.
      // If whole FHT8V frame was OK then check if there is a valid stats trailer.

      // Check for 'core' stats trailer.
      if((trailer + FullStatsMessageCore_MAX_BYTES_ON_WIRE <= lastByte) && // Enough space for minimum-stats trailer.
    1b54:	08 96       	adiw	r24, 0x08	; 8
    1b56:	08 17       	cp	r16, r24
    1b58:	19 07       	cpc	r17, r25
    1b5a:	48 f1       	brcs	.+82     	; 0x1bae <FHT8VCallForHeatPoll()+0x170>
    1b5c:	80 81       	ld	r24, Z
    1b5e:	80 7e       	andi	r24, 0xE0	; 224
    1b60:	80 36       	cpi	r24, 0x60	; 96
    1b62:	29 f5       	brne	.+74     	; 0x1bae <FHT8VCallForHeatPoll()+0x170>
         (MESSAGING_FULL_STATS_FLAGS_HEADER_MSBS == (trailer[0] & MESSAGING_FULL_STATS_FLAGS_HEADER_MASK)))
        {
        FullStatsMessageCore_t content;
        const uint8_t *tail = decodeFullStatsMessageCore(trailer, lastByte - trailer, stTXalwaysAll, false, &content);
    1b64:	60 2f       	mov	r22, r16
    1b66:	6e 1b       	sub	r22, r30
    1b68:	cf 01       	movw	r24, r30
    1b6a:	40 e0       	ldi	r20, 0x00	; 0
    1b6c:	50 e0       	ldi	r21, 0x00	; 0
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	8e 01       	movw	r16, r28
    1b72:	0b 5f       	subi	r16, 0xFB	; 251
    1b74:	1f 4f       	sbci	r17, 0xFF	; 255
    1b76:	0e 94 46 13 	call	0x268c	; 0x268c <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)>
        if(NULL != tail)
    1b7a:	89 2b       	or	r24, r25
    1b7c:	c1 f0       	breq	.+48     	; 0x1bae <FHT8VCallForHeatPoll()+0x170>
          // Received trailing stats frame!
 
          // If ID is present then make sure it matches that implied by the FHT8V frame (else reject this trailer)
          // else file it in from the FHT8C frame.
          bool allGood = true;
          if(content.containsID)
    1b7e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b80:	29 81       	ldd	r18, Y+1	; 0x01
    1b82:	90 ff       	sbrs	r25, 0
    1b84:	08 c0       	rjmp	.+16     	; 0x1b96 <FHT8VCallForHeatPoll()+0x158>
            {
            if((content.id0 != command.hc1) || (content.id1 != command.hc2))
    1b86:	8e 81       	ldd	r24, Y+6	; 0x06
    1b88:	82 17       	cp	r24, r18
    1b8a:	59 f4       	brne	.+22     	; 0x1ba2 <FHT8VCallForHeatPoll()+0x164>
    1b8c:	9f 81       	ldd	r25, Y+7	; 0x07
    1b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b90:	98 17       	cp	r25, r24
    1b92:	39 f4       	brne	.+14     	; 0x1ba2 <FHT8VCallForHeatPoll()+0x164>
    1b94:	4c c0       	rjmp	.+152    	; 0x1c2e <FHT8VCallForHeatPoll()+0x1f0>
              { allGood = false; }
            }
          else
            {
            content.id0 = command.hc1;
    1b96:	2e 83       	std	Y+6, r18	; 0x06
            content.id1 = command.hc2;
    1b98:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9a:	8f 83       	std	Y+7, r24	; 0x07
            content.containsID = true;
    1b9c:	91 60       	ori	r25, 0x01	; 1
    1b9e:	9d 83       	std	Y+5, r25	; 0x05
    1ba0:	46 c0       	rjmp	.+140    	; 0x1c2e <FHT8VCallForHeatPoll()+0x1f0>
// Useful to assess the noise enviromentment.
static volatile uint8_t lastRXerrno;

// Atomically returns and clears last (FHT8V) RX error code, or 0 if none.
// Set with such codes as FHT8VRXErr_GENERIC; never set to zero.
static void setLastRXErr(const uint8_t err) { ATOMIC_BLOCK (ATOMIC_RESTORESTATE) { lastRXerrno = err; } }
    1ba2:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1ba4:	f8 94       	cli
    1ba6:	84 e0       	ldi	r24, 0x04	; 4
    1ba8:	80 93 5d 02 	sts	0x025D, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1bac:	9f bf       	out	0x3f, r25	; 63
        }
#endif
#endif

      // Potentially accept as call for heat only if command is 0x26 (38) and value open enough as used by OpenTRV to TX.
      if((0x26 == command.command) && (command.extension >= NominalRadValve.getMinValvePcReallyOpen()))
    1bae:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb0:	86 32       	cpi	r24, 0x26	; 38
    1bb2:	91 f4       	brne	.+36     	; 0x1bd8 <FHT8VCallForHeatPoll()+0x19a>
    1bb4:	1c 81       	ldd	r17, Y+4	; 0x04
    1bb6:	0e 94 28 05 	call	0xa50	; 0xa50 <ModelledRadValve::getMinValvePcReallyOpen()>
    1bba:	18 17       	cp	r17, r24
    1bbc:	68 f0       	brcs	.+26     	; 0x1bd8 <FHT8VCallForHeatPoll()+0x19a>
        {
        if(FHT8VHubAcceptedHouseCode(command.hc1, command.hc2))
          {
          // Accept if house code not filtered out.
          const uint16_t compoundHC = (command.hc1 << 8) | command.hc2;
    1bbe:	99 81       	ldd	r25, Y+1	; 0x01
    1bc0:	80 e0       	ldi	r24, 0x00	; 0
    1bc2:	2a 81       	ldd	r18, Y+2	; 0x02
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	82 2b       	or	r24, r18
    1bc8:	93 2b       	or	r25, r19
          ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    1bca:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1bcc:	f8 94       	cli
            { lastCallForHeatHC = compoundHC; } // Update atomically.
    1bce:	90 93 48 01 	sts	0x0148, r25
    1bd2:	80 93 47 01 	sts	0x0147, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1bd6:	2f bf       	out	0x3f, r18	; 63
//#if defined(SAVE_RX_ENERGY)
//          StopEavesdropOnFHT8V(); // Need not eavesdrop for a while.
//#endif
          }
        }
      _SetupRFM22ToEavesdropOnFHT8V(); // Reset/restart RX.
    1bd8:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <_SetupRFM22ToEavesdropOnFHT8V()>
    1bdc:	0e c0       	rjmp	.+28     	; 0x1bfa <FHT8VCallForHeatPoll()+0x1bc>
// Useful to assess the noise enviromentment.
static volatile uint8_t lastRXerrno;

// Atomically returns and clears last (FHT8V) RX error code, or 0 if none.
// Set with such codes as FHT8VRXErr_GENERIC; never set to zero.
static void setLastRXErr(const uint8_t err) { ATOMIC_BLOCK (ATOMIC_RESTORESTATE) { lastRXerrno = err; } }
    1bde:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1be0:	f8 94       	cli
    1be2:	83 e0       	ldi	r24, 0x03	; 3
    1be4:	11 c0       	rjmp	.+34     	; 0x1c08 <FHT8VCallForHeatPoll()+0x1ca>

    // Ensure that RX is re-enabled to avoid missing anything.
    _SetupRFM22ToEavesdropOnFHT8V(); // Reset/restart RX.
    return(false); // Nothing valid received.
    }
  else if(status & 0x80) // Got sync from incoming FHT8V message.
    1be6:	87 ff       	sbrs	r24, 7
    1be8:	0a c0       	rjmp	.+20     	; 0x1bfe <FHT8VCallForHeatPoll()+0x1c0>
    {
    // Capture some entropy from RSSI and timing...
    const uint8_t rssi = RFM22RSSI();
    1bea:	0e 94 11 1b 	call	0x3622	; 0x3622 <RFM22RSSI()>
    // TODO adjust output power down a little if RX very loud.
    addEntropyToPool(rssi ^ (uint8_t)(status ^ (status >> 8)), 1); // Maybe ~1 real bit of entropy.
    1bee:	91 2f       	mov	r25, r17
    1bf0:	90 27       	eor	r25, r16
    1bf2:	89 27       	eor	r24, r25
    1bf4:	61 e0       	ldi	r22, 0x01	; 1
    1bf6:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <addEntropyToPool(unsigned char, unsigned char)>
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	0b c0       	rjmp	.+22     	; 0x1c14 <FHT8VCallForHeatPoll()+0x1d6>
      }
#endif 
//    syncSeen = true;
    return(true);
    }
  else if(status & 0x8000) // RX FIFO overflow/underflow: give up and restart...
    1bfe:	97 ff       	sbrs	r25, 7
    1c00:	08 c0       	rjmp	.+16     	; 0x1c12 <FHT8VCallForHeatPoll()+0x1d4>
// Useful to assess the noise enviromentment.
static volatile uint8_t lastRXerrno;

// Atomically returns and clears last (FHT8V) RX error code, or 0 if none.
// Set with such codes as FHT8VRXErr_GENERIC; never set to zero.
static void setLastRXErr(const uint8_t err) { ATOMIC_BLOCK (ATOMIC_RESTORESTATE) { lastRXerrno = err; } }
    1c02:	9f b7       	in	r25, 0x3f	; 63
    1c04:	f8 94       	cli
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	80 93 5d 02 	sts	0x025D, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1c0c:	9f bf       	out	0x3f, r25	; 63
    {
    setLastRXErr(FHT8VRXErr_GENERIC);
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("RX FIFO problem");
#endif
    _SetupRFM22ToEavesdropOnFHT8V(); // Reset/restart RX.
    1c0e:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <_SetupRFM22ToEavesdropOnFHT8V()>
    return(false);
    1c12:	80 e0       	ldi	r24, 0x00	; 0
    }

  return(false);
  }
    1c14:	2b 96       	adiw	r28, 0x0b	; 11
    1c16:	0f b6       	in	r0, 0x3f	; 63
    1c18:	f8 94       	cli
    1c1a:	de bf       	out	0x3e, r29	; 62
    1c1c:	0f be       	out	0x3f, r0	; 63
    1c1e:	cd bf       	out	0x3d, r28	; 61
    1c20:	cf 91       	pop	r28
    1c22:	df 91       	pop	r29
    1c24:	1f 91       	pop	r17
    1c26:	0f 91       	pop	r16
    1c28:	ff 90       	pop	r15
    1c2a:	ef 90       	pop	r14
    1c2c:	08 95       	ret
            content.id1 = command.hc2;
            content.containsID = true;
            }
 
          // If frame looks good then capture it.
          if(allGood) { recordCoreStats(false, &content); }
    1c2e:	80 e0       	ldi	r24, 0x00	; 0
    1c30:	be 01       	movw	r22, r28
    1c32:	6b 5f       	subi	r22, 0xFB	; 251
    1c34:	7f 4f       	sbci	r23, 0xFF	; 255
    1c36:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <recordCoreStats(bool, FullStatsMessageCore const*)>
    1c3a:	b9 cf       	rjmp	.-142    	; 0x1bae <FHT8VCallForHeatPoll()+0x170>

00001c3c <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)>:
//   * trailer  if not null then a stats trailer is appended, built from that info plus a CRC
//   * command  on entry hc1, hc2 (and addresss if used) must be set correctly, this sets the command and extension; never NULL
// The generated command frame can be resent indefinitely.
// The output buffer used must be (at least) FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE bytes.
// Returns pointer to the terminating 0xff on exit.
uint8_t *FHT8VCreateValveSetCmdFrameHT_r(uint8_t *const bptrInitial, const bool doHeader, fht8v_msg_t *const command, const uint8_t TRVPercentOpen, const FullStatsMessageCore_t *trailer)
    1c3c:	cf 92       	push	r12
    1c3e:	df 92       	push	r13
    1c40:	ef 92       	push	r14
    1c42:	ff 92       	push	r15
    1c44:	0f 93       	push	r16
    1c46:	1f 93       	push	r17
    1c48:	cf 93       	push	r28
    1c4a:	df 93       	push	r29
    1c4c:	7c 01       	movw	r14, r24
    1c4e:	36 2f       	mov	r19, r22
    1c50:	ea 01       	movw	r28, r20
  {
  uint8_t *bptr = bptrInitial;

  command->command = 0x26;
    1c52:	86 e2       	ldi	r24, 0x26	; 38
    1c54:	8a 83       	std	Y+2, r24	; 0x02
  command->extension = (TRVPercentOpen * 255) / 100;
    1c56:	8f ef       	ldi	r24, 0xFF	; 255
    1c58:	28 9f       	mul	r18, r24
    1c5a:	c0 01       	movw	r24, r0
    1c5c:	11 24       	eor	r1, r1
    1c5e:	64 e6       	ldi	r22, 0x64	; 100
    1c60:	70 e0       	ldi	r23, 0x00	; 0
    1c62:	0e 94 27 3e 	call	0x7c4e	; 0x7c4e <__divmodhi4>
    1c66:	6b 83       	std	Y+3, r22	; 0x03

  // Add RFM22/32-friendly pre-preamble if requested, eg when calling for heat from the boiler (TRV actually open).
  // NOTE: this requires more buffer space.
  if(doHeader)
    1c68:	33 23       	and	r19, r19
    1c6a:	11 f4       	brne	.+4      	; 0x1c70 <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)+0x34>
    1c6c:	c7 01       	movw	r24, r14
    1c6e:	09 c0       	rjmp	.+18     	; 0x1c82 <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)+0x46>
    {
    memset(bptr, RFM22_PREAMBLE_BYTE, RFM22_PREAMBLE_BYTES);
    1c70:	c7 01       	movw	r24, r14
    1c72:	6a ea       	ldi	r22, 0xAA	; 170
    1c74:	70 e0       	ldi	r23, 0x00	; 0
    1c76:	45 e0       	ldi	r20, 0x05	; 5
    1c78:	50 e0       	ldi	r21, 0x00	; 0
    1c7a:	0e 94 40 04 	call	0x880	; 0x880 <memset>
    bptr += RFM22_PREAMBLE_BYTES;
    1c7e:	c7 01       	movw	r24, r14
    1c80:	05 96       	adiw	r24, 0x05	; 5
    }

  bptr = FHT8VCreate200usBitStreamBptr(bptr, command);
    1c82:	be 01       	movw	r22, r28
    1c84:	0e 94 48 0b 	call	0x1690	; 0x1690 <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>
    1c88:	d8 2e       	mov	r13, r24
    1c8a:	c9 2e       	mov	r12, r25

  if(NULL != trailer)
    1c8c:	01 15       	cp	r16, r1
    1c8e:	11 05       	cpc	r17, r1
    1c90:	79 f0       	breq	.+30     	; 0x1cb0 <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)+0x74>
      }
    else
#endif
      {
      // Assume enough space in buffer for largest possible stats message.
      uint8_t * const tail = encodeFullStatsMessageCore(bptr, FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE - (bptr - bptrInitial), getStatsTXLevel(), false, trailer);
    1c92:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <getStatsTXLevel()>
    1c96:	ac 01       	movw	r20, r24
    1c98:	6e 2d       	mov	r22, r14
    1c9a:	64 5c       	subi	r22, 0xC4	; 196
    1c9c:	6d 19       	sub	r22, r13
    1c9e:	8d 2d       	mov	r24, r13
    1ca0:	9c 2d       	mov	r25, r12
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	0e 94 21 14 	call	0x2842	; 0x2842 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)>
      if(NULL != tail) { bptr = tail; } // Encoding should not actually fail, but this copes gracefully if so!
    1ca8:	00 97       	sbiw	r24, 0x00	; 0
    1caa:	11 f0       	breq	.+4      	; 0x1cb0 <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)+0x74>
    1cac:	d8 2e       	mov	r13, r24
    1cae:	c9 2e       	mov	r12, r25
  // Check that the buffer end was not overrun.
  if(bptr - bptrInitial >= FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE) { panic(F("TX gen too large")); }
#endif

  return(bptr);
  }
    1cb0:	8d 2d       	mov	r24, r13
    1cb2:	9c 2d       	mov	r25, r12
    1cb4:	df 91       	pop	r29
    1cb6:	cf 91       	pop	r28
    1cb8:	1f 91       	pop	r17
    1cba:	0f 91       	pop	r16
    1cbc:	ff 90       	pop	r15
    1cbe:	ef 90       	pop	r14
    1cc0:	df 90       	pop	r13
    1cc2:	cf 90       	pop	r12
    1cc4:	08 95       	ret

00001cc6 <FHT8VCreateValveSetCmdFrame_r(unsigned char*, fht8v_msg_t*, unsigned char)>:
//
// Implicitly decides whether to add optional header and trailer components.
//
// NOTE: with SUPPORT_TEMP_TX defined will also insert trailing stats payload where appropriate.
// Also reports local stats as if remote.
uint8_t *FHT8VCreateValveSetCmdFrame_r(uint8_t *const bptr, fht8v_msg_t *command, const uint8_t TRVPercentOpen)
    1cc6:	bf 92       	push	r11
    1cc8:	cf 92       	push	r12
    1cca:	df 92       	push	r13
    1ccc:	ef 92       	push	r14
    1cce:	ff 92       	push	r15
    1cd0:	0f 93       	push	r16
    1cd2:	1f 93       	push	r17
    1cd4:	df 93       	push	r29
    1cd6:	cf 93       	push	r28
    1cd8:	cd b7       	in	r28, 0x3d	; 61
    1cda:	de b7       	in	r29, 0x3e	; 62
    1cdc:	27 97       	sbiw	r28, 0x07	; 7
    1cde:	0f b6       	in	r0, 0x3f	; 63
    1ce0:	f8 94       	cli
    1ce2:	de bf       	out	0x3e, r29	; 62
    1ce4:	0f be       	out	0x3f, r0	; 63
    1ce6:	cd bf       	out	0x3d, r28	; 61
    1ce8:	7c 01       	movw	r14, r24
    1cea:	6b 01       	movw	r12, r22
    1cec:	b4 2e       	mov	r11, r20
  {
  const bool etmsp = enableTrailingMinimalStatsPayload();
    1cee:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <enableTrailingMinimalStatsPayload()>
  // OR if adding a trailer that the hub should see.
  // NOTE: this requires more buffer space.
  const bool doHeader = etmsp
#if defined(RFM22_SYNC_BCFH)
  // NOTE: the percentage-open threshold to call for heat from the boiler is set to allow the valve to open significantly, etc.
      || (TRVPercentOpen >= NominalRadValve.getMinValvePcReallyOpen())
    1cf2:	88 23       	and	r24, r24
    1cf4:	49 f4       	brne	.+18     	; 0x1d08 <FHT8VCreateValveSetCmdFrame_r(unsigned char*, fht8v_msg_t*, unsigned char)+0x42>
    1cf6:	0e 94 28 05 	call	0xa50	; 0xa50 <ModelledRadValve::getMinValvePcReallyOpen()>
    1cfa:	60 e0       	ldi	r22, 0x00	; 0
    1cfc:	b8 16       	cp	r11, r24
    1cfe:	08 f0       	brcs	.+2      	; 0x1d02 <FHT8VCreateValveSetCmdFrame_r(unsigned char*, fht8v_msg_t*, unsigned char)+0x3c>
    1d00:	61 e0       	ldi	r22, 0x01	; 1
    1d02:	00 e0       	ldi	r16, 0x00	; 0
    1d04:	10 e0       	ldi	r17, 0x00	; 0
    1d06:	0e c0       	rjmp	.+28     	; 0x1d24 <FHT8VCreateValveSetCmdFrame_r(unsigned char*, fht8v_msg_t*, unsigned char)+0x5e>
//    trailer.tempC16 = getTemperatureC16(); // Use last value read.
//    }
  FullStatsMessageCore_t trailer;
  if(doTrailer)
    {
    populateCoreStats(&trailer);
    1d08:	8e 01       	movw	r16, r28
    1d0a:	0f 5f       	subi	r16, 0xFF	; 255
    1d0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d0e:	c8 01       	movw	r24, r16
    1d10:	0e 94 8a 07 	call	0xf14	; 0xf14 <populateCoreStats(FullStatsMessageCore*)>
    // Record stats as if remote, but secure, and with ID.
    recordCoreStats(true, &trailer);
    1d14:	81 e0       	ldi	r24, 0x01	; 1
    1d16:	b8 01       	movw	r22, r16
    1d18:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <recordCoreStats(bool, FullStatsMessageCore const*)>
    // Ensure that no ID is encoded in the message sent on the air since it would be a repeat from the FHT8V frame.
    trailer.containsID = false;
    1d1c:	89 81       	ldd	r24, Y+1	; 0x01
    1d1e:	8e 7f       	andi	r24, 0xFE	; 254
    1d20:	89 83       	std	Y+1, r24	; 0x01
    1d22:	61 e0       	ldi	r22, 0x01	; 1
    }

  return(FHT8VCreateValveSetCmdFrameHT_r(bptr, doHeader, command, TRVPercentOpen, (doTrailer ? &trailer : NULL)));
    1d24:	c7 01       	movw	r24, r14
    1d26:	a6 01       	movw	r20, r12
    1d28:	2b 2d       	mov	r18, r11
    1d2a:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)>
  }
    1d2e:	27 96       	adiw	r28, 0x07	; 7
    1d30:	0f b6       	in	r0, 0x3f	; 63
    1d32:	f8 94       	cli
    1d34:	de bf       	out	0x3e, r29	; 62
    1d36:	0f be       	out	0x3f, r0	; 63
    1d38:	cd bf       	out	0x3d, r28	; 61
    1d3a:	cf 91       	pop	r28
    1d3c:	df 91       	pop	r29
    1d3e:	1f 91       	pop	r17
    1d40:	0f 91       	pop	r16
    1d42:	ff 90       	pop	r15
    1d44:	ef 90       	pop	r14
    1d46:	df 90       	pop	r13
    1d48:	cf 90       	pop	r12
    1d4a:	bf 90       	pop	r11
    1d4c:	08 95       	ret

00001d4e <FHT8VCreateValveSetCmdFrame()>:
// Create FHT8V TRV outgoing valve-setting command frame (terminated with 0xff) in the shared TX buffer.
// The getTRVPercentOpen() result is used to generate the frame.
// HC1 and HC2 are fetched with the FHT8VGetHC1() and FHT8VGetHC2() calls, and address is always 0.
// The generated command frame can be resent indefinitely.
// If no valve is set up then this may simply terminate an empty buffer with 0xff.
void FHT8VCreateValveSetCmdFrame()
    1d4e:	df 93       	push	r29
    1d50:	cf 93       	push	r28
    1d52:	00 d0       	rcall	.+0      	; 0x1d54 <FHT8VCreateValveSetCmdFrame()+0x6>
    1d54:	00 d0       	rcall	.+0      	; 0x1d56 <FHT8VCreateValveSetCmdFrame()+0x8>
    1d56:	cd b7       	in	r28, 0x3d	; 61
    1d58:	de b7       	in	r29, 0x3e	; 62
  {
  if(!localFHT8VTRVEnabled())
    1d5a:	0e 94 a7 0b 	call	0x174e	; 0x174e <localFHT8VTRVEnabled()>
    1d5e:	88 23       	and	r24, r24
    1d60:	21 f4       	brne	.+8      	; 0x1d6a <FHT8VCreateValveSetCmdFrame()+0x1c>
    {
    // Ensure that buffer is terminated, though empty.
    FHT8VTXCommandArea[0] = 0xff;
    1d62:	8f ef       	ldi	r24, 0xFF	; 255
    1d64:	80 93 a0 02 	sts	0x02A0, r24
    1d68:	1b c0       	rjmp	.+54     	; 0x1da0 <FHT8VCreateValveSetCmdFrame()+0x52>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1d6a:	f9 99       	sbic	0x1f, 1	; 31
    1d6c:	fe cf       	rjmp	.-4      	; 0x1d6a <FHT8VCreateValveSetCmdFrame()+0x1c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1d6e:	80 e1       	ldi	r24, 0x10	; 16
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	92 bd       	out	0x22, r25	; 34
    1d74:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1d76:	f8 9a       	sbi	0x1f, 0	; 31
    1d78:	20 b5       	in	r18, 0x20	; 32
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1d7a:	f9 99       	sbic	0x1f, 1	; 31
    1d7c:	fe cf       	rjmp	.-4      	; 0x1d7a <FHT8VCreateValveSetCmdFrame()+0x2c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1d7e:	81 e1       	ldi	r24, 0x11	; 17
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	92 bd       	out	0x22, r25	; 34
    1d84:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1d86:	f8 9a       	sbi	0x1f, 0	; 31
    1d88:	80 b5       	in	r24, 0x20	; 32
    return;
    }

  fht8v_msg_t command;
  command.hc1 = FHT8VGetHC1();
  command.hc2 = FHT8VGetHC2();
    1d8a:	8a 83       	std	Y+2, r24	; 0x02
  public:
    // Return last value fetched by read(); undefined before first read().
    // Usually fast.
    // Often likely to be thread-safe or usable within ISRs (Interrupt Service Routines),
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual uint8_t get() const { return(value); }
    1d8c:	40 91 1c 02 	lds	r20, 0x021C
    FHT8VTXCommandArea[0] = 0xff;
    return;
    }

  fht8v_msg_t command;
  command.hc1 = FHT8VGetHC1();
    1d90:	29 83       	std	Y+1, r18	; 0x01
  command.hc2 = FHT8VGetHC2();
#ifdef FHT8V_ADR_USED
  command.address = 0;
#endif

  FHT8VCreateValveSetCmdFrame_r(FHT8VTXCommandArea, &command, NominalRadValve.get());
    1d92:	80 ea       	ldi	r24, 0xA0	; 160
    1d94:	92 e0       	ldi	r25, 0x02	; 2
    1d96:	be 01       	movw	r22, r28
    1d98:	6f 5f       	subi	r22, 0xFF	; 255
    1d9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d9c:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <FHT8VCreateValveSetCmdFrame_r(unsigned char*, fht8v_msg_t*, unsigned char)>
  }
    1da0:	0f 90       	pop	r0
    1da2:	0f 90       	pop	r0
    1da4:	0f 90       	pop	r0
    1da6:	0f 90       	pop	r0
    1da8:	cf 91       	pop	r28
    1daa:	df 91       	pop	r29
    1dac:	08 95       	ret

00001dae <crc7_5B_update(unsigned char, unsigned char)>:
 * For 2 or 3 byte payloads this should have a Hamming distance of 4 and be within a factor of 2 of optimal error detection.
 * <p>
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    1dae:	38 2f       	mov	r19, r24
    1db0:	70 e8       	ldi	r23, 0x80	; 128
    1db2:	40 e0       	ldi	r20, 0x00	; 0
    1db4:	50 e0       	ldi	r21, 0x00	; 0
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    1db6:	e6 2f       	mov	r30, r22
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	a1 e0       	ldi	r26, 0x01	; 1
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
    1dbc:	67 e3       	ldi	r22, 0x37	; 55
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
    1dbe:	83 2f       	mov	r24, r19
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	26 e0       	ldi	r18, 0x06	; 6
    1dc4:	96 95       	lsr	r25
    1dc6:	87 95       	ror	r24
    1dc8:	2a 95       	dec	r18
    1dca:	e1 f7       	brne	.-8      	; 0x1dc4 <crc7_5B_update(unsigned char, unsigned char)+0x16>
    1dcc:	28 2f       	mov	r18, r24
    1dce:	21 70       	andi	r18, 0x01	; 1
        if(0 != (datum & i)) { bit = !bit; }
    1dd0:	87 2f       	mov	r24, r23
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	8e 23       	and	r24, r30
    1dd6:	9f 23       	and	r25, r31
    1dd8:	89 2b       	or	r24, r25
    1dda:	09 f0       	breq	.+2      	; 0x1dde <crc7_5B_update(unsigned char, unsigned char)+0x30>
    1ddc:	2a 27       	eor	r18, r26
        crc <<= 1;
    1dde:	33 0f       	add	r19, r19
        if(bit) { crc ^= 0x37; }
    1de0:	21 11       	cpse	r18, r1
    1de2:	36 27       	eor	r19, r22
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
    1de4:	76 95       	lsr	r23
    1de6:	4f 5f       	subi	r20, 0xFF	; 255
    1de8:	5f 4f       	sbci	r21, 0xFF	; 255
    1dea:	48 30       	cpi	r20, 0x08	; 8
    1dec:	51 05       	cpc	r21, r1
    1dee:	39 f7       	brne	.-50     	; 0x1dbe <crc7_5B_update(unsigned char, unsigned char)+0x10>
        if(0 != (datum & i)) { bit = !bit; }
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
        }
    return(crc & 0x7f);
    }
    1df0:	83 2f       	mov	r24, r19
    1df2:	8f 77       	andi	r24, 0x7F	; 127
    1df4:	08 95       	ret

00001df6 <verifyHeaderAndCRCForTrailingMinimalStatsPayload(unsigned char const*)>:




// Return true if header/structure and CRC looks valid for (3-byte) buffered stats payload.
bool verifyHeaderAndCRCForTrailingMinimalStatsPayload(uint8_t const *const buf)
    1df6:	fc 01       	movw	r30, r24
  {
  return((MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MSBS == ((buf[0]) & MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MASK)) && // Plausible header.
         (0 == (buf[1] & 0x80)) && // Top bit is clear on this byte also.
         (buf[2] == crc7_5B_update(buf[0], buf[1]))); // CRC validates, top bit implicitly zero.
    1df8:	30 81       	ld	r19, Z
    1dfa:	83 2f       	mov	r24, r19
    1dfc:	80 7e       	andi	r24, 0xE0	; 224
    1dfe:	80 34       	cpi	r24, 0x40	; 64
    1e00:	51 f5       	brne	.+84     	; 0x1e56 <verifyHeaderAndCRCForTrailingMinimalStatsPayload(unsigned char const*)+0x60>
    1e02:	81 81       	ldd	r24, Z+1	; 0x01
    1e04:	87 fd       	sbrc	r24, 7
    1e06:	27 c0       	rjmp	.+78     	; 0x1e56 <verifyHeaderAndCRCForTrailingMinimalStatsPayload(unsigned char const*)+0x60>
    1e08:	72 81       	ldd	r23, Z+2	; 0x02
    1e0a:	60 e8       	ldi	r22, 0x80	; 128
    1e0c:	40 e0       	ldi	r20, 0x00	; 0
    1e0e:	50 e0       	ldi	r21, 0x00	; 0
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    1e10:	e8 2f       	mov	r30, r24
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	b1 e0       	ldi	r27, 0x01	; 1
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
    1e16:	a7 e3       	ldi	r26, 0x37	; 55
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
    1e18:	83 2f       	mov	r24, r19
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	26 e0       	ldi	r18, 0x06	; 6
    1e1e:	96 95       	lsr	r25
    1e20:	87 95       	ror	r24
    1e22:	2a 95       	dec	r18
    1e24:	e1 f7       	brne	.-8      	; 0x1e1e <verifyHeaderAndCRCForTrailingMinimalStatsPayload(unsigned char const*)+0x28>
    1e26:	28 2f       	mov	r18, r24
    1e28:	21 70       	andi	r18, 0x01	; 1
        if(0 != (datum & i)) { bit = !bit; }
    1e2a:	86 2f       	mov	r24, r22
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	8e 23       	and	r24, r30
    1e30:	9f 23       	and	r25, r31
    1e32:	89 2b       	or	r24, r25
    1e34:	09 f0       	breq	.+2      	; 0x1e38 <verifyHeaderAndCRCForTrailingMinimalStatsPayload(unsigned char const*)+0x42>
    1e36:	2b 27       	eor	r18, r27
        crc <<= 1;
    1e38:	33 0f       	add	r19, r19
        if(bit) { crc ^= 0x37; }
    1e3a:	21 11       	cpse	r18, r1
    1e3c:	3a 27       	eor	r19, r26
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
    1e3e:	66 95       	lsr	r22
    1e40:	4f 5f       	subi	r20, 0xFF	; 255
    1e42:	5f 4f       	sbci	r21, 0xFF	; 255
    1e44:	48 30       	cpi	r20, 0x08	; 8
    1e46:	51 05       	cpc	r21, r1
    1e48:	39 f7       	brne	.-50     	; 0x1e18 <verifyHeaderAndCRCForTrailingMinimalStatsPayload(unsigned char const*)+0x22>
    1e4a:	80 e0       	ldi	r24, 0x00	; 0
    1e4c:	3f 77       	andi	r19, 0x7F	; 127
    1e4e:	73 17       	cp	r23, r19
    1e50:	19 f4       	brne	.+6      	; 0x1e58 <verifyHeaderAndCRCForTrailingMinimalStatsPayload(unsigned char const*)+0x62>
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	08 95       	ret
// Return true if header/structure and CRC looks valid for (3-byte) buffered stats payload.
bool verifyHeaderAndCRCForTrailingMinimalStatsPayload(uint8_t const *const buf)
  {
  return((MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MSBS == ((buf[0]) & MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MASK)) && // Plausible header.
         (0 == (buf[1] & 0x80)) && // Top bit is clear on this byte also.
         (buf[2] == crc7_5B_update(buf[0], buf[1]))); // CRC validates, top bit implicitly zero.
    1e56:	80 e0       	ldi	r24, 0x00	; 0
  }
    1e58:	08 95       	ret

00001e5a <enableTrailingMinimalStatsPayload()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1e5a:	f9 99       	sbic	0x1f, 1	; 31
    1e5c:	fe cf       	rjmp	.-4      	; 0x1e5a <enableTrailingMinimalStatsPayload()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1e5e:	8c e1       	ldi	r24, 0x1C	; 28
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	92 bd       	out	0x22, r25	; 34
    1e64:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1e66:	f8 9a       	sbi	0x1f, 0	; 31
    1e68:	80 b5       	in	r24, 0x20	; 32
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	82 30       	cpi	r24, 0x02	; 2
    1e6e:	08 f4       	brcc	.+2      	; 0x1e72 <enableTrailingMinimalStatsPayload()+0x18>
    1e70:	91 e0       	ldi	r25, 0x01	; 1
#if !defined(enableTrailingMinimalStatsPayload)
// Returns true if an unencrypted minimal trailing static payload and similar (eg bare stats transmission) is permitted.
// True if the TX_ENABLE value is no higher than stTXmostUnsec.
// Some filtering may be required even if this is true.
// TODO: allow cacheing in RAM for speed.
bool enableTrailingMinimalStatsPayload() { return(eeprom_read_byte((uint8_t *)EE_START_STATS_TX_ENABLE) <= stTXmostUnsec); }
    1e72:	89 2f       	mov	r24, r25
    1e74:	08 95       	ret

00001e76 <quickValidateRawSimpleJSONMessage(char const*)>:
// Returns true unless the buffer clearly does not contain a possible valid raw JSON message.
// This message is expected to be one object wrapped in '{' and '}'
// and containing only ASCII printable/non-control characters in the range [32,126].
// The message must be no longer than MSG_JSON_MAX_LENGTH excluding trailing null.
// This only does a quick validation for egregious errors.
bool quickValidateRawSimpleJSONMessage(const char * const buf)
    1e76:	fc 01       	movw	r30, r24
  {
  if('{' != buf[0]) { return(false); }
    1e78:	80 81       	ld	r24, Z
    1e7a:	8b 37       	cpi	r24, 0x7B	; 123
    1e7c:	a9 f4       	brne	.+42     	; 0x1ea8 <quickValidateRawSimpleJSONMessage(char const*)+0x32>
  // Scan up to maximum length for terminating '}'.
  const char *p = buf + 1;
  for(int i = 1; i < MSG_JSON_MAX_LENGTH; ++i)
    1e7e:	9f 01       	movw	r18, r30
    1e80:	2a 5c       	subi	r18, 0xCA	; 202
    1e82:	3f 4f       	sbci	r19, 0xFF	; 255
    {
    const char c = *p++;
    1e84:	91 81       	ldd	r25, Z+1	; 0x01
    // With a terminating '}' (followed by '\0') the message is superficially valid.
    if(('}' == c) && ('\0' == *p)) { return(true); }
    1e86:	9d 37       	cpi	r25, 0x7D	; 125
    1e88:	29 f4       	brne	.+10     	; 0x1e94 <quickValidateRawSimpleJSONMessage(char const*)+0x1e>
    1e8a:	82 81       	ldd	r24, Z+2	; 0x02
    1e8c:	88 23       	and	r24, r24
    1e8e:	11 f4       	brne	.+4      	; 0x1e94 <quickValidateRawSimpleJSONMessage(char const*)+0x1e>
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	08 95       	ret
    // Non-printable/control character makes the message invalid.
    if((c < 32) || (c > 126)) { return(false); }
    1e94:	89 2f       	mov	r24, r25
    1e96:	80 52       	subi	r24, 0x20	; 32
    1e98:	8f 35       	cpi	r24, 0x5F	; 95
    1e9a:	30 f4       	brcc	.+12     	; 0x1ea8 <quickValidateRawSimpleJSONMessage(char const*)+0x32>
    // Premature end of message renders it invalid.
    if('\0' == c) { return(false); }
    1e9c:	99 23       	and	r25, r25
    1e9e:	21 f0       	breq	.+8      	; 0x1ea8 <quickValidateRawSimpleJSONMessage(char const*)+0x32>
    1ea0:	31 96       	adiw	r30, 0x01	; 1
bool quickValidateRawSimpleJSONMessage(const char * const buf)
  {
  if('{' != buf[0]) { return(false); }
  // Scan up to maximum length for terminating '}'.
  const char *p = buf + 1;
  for(int i = 1; i < MSG_JSON_MAX_LENGTH; ++i)
    1ea2:	e2 17       	cp	r30, r18
    1ea4:	f3 07       	cpc	r31, r19
    1ea6:	71 f7       	brne	.-36     	; 0x1e84 <quickValidateRawSimpleJSONMessage(char const*)+0xe>
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    if((c < 32) || (c > 126)) { return(false); }
    // Premature end of message renders it invalid.
    if('\0' == c) { return(false); }
    }
  return(false); // Bad (unterminated) message.
  }
    1eaa:	08 95       	ret

00001eac <adjustJSONMsgForTXAndComputeCRC(char*)>:
// Computes and returns 0x5B 7-bit CRC in range [0,127]
// or 0xff if the JSON message obviously invalid and should not be TXed.
// The CRC is initialised with the initial '{' character.
// NOTE: adjusts content in place.
#define adjustJSONMsgForTXAndComputeCRC_ERR 0xff // Error return value.
uint8_t adjustJSONMsgForTXAndComputeCRC(char * const bptr)
    1eac:	0f 93       	push	r16
    1eae:	1f 93       	push	r17
    1eb0:	18 2f       	mov	r17, r24
    1eb2:	09 2f       	mov	r16, r25
  {
  // Do initial quick validation before computing CRC, etc,
  if(!quickValidateRawSimpleJSONMessage(bptr)) { return(adjustJSONMsgForTXAndComputeCRC_ERR); }
    1eb4:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <quickValidateRawSimpleJSONMessage(char const*)>
    1eb8:	88 23       	and	r24, r24
    1eba:	09 f4       	brne	.+2      	; 0x1ebe <adjustJSONMsgForTXAndComputeCRC(char*)+0x12>
    1ebc:	51 c0       	rjmp	.+162    	; 0x1f60 <adjustJSONMsgForTXAndComputeCRC(char*)+0xb4>
    1ebe:	81 2f       	mov	r24, r17
    1ec0:	90 2f       	mov	r25, r16
    1ec2:	9c 01       	movw	r18, r24
    1ec4:	f9 01       	movw	r30, r18
    1ec6:	6b e7       	ldi	r22, 0x7B	; 123
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    1ec8:	11 e0       	ldi	r17, 0x01	; 1
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
    1eca:	77 e3       	ldi	r23, 0x37	; 55
    1ecc:	44 c0       	rjmp	.+136    	; 0x1f56 <adjustJSONMsgForTXAndComputeCRC(char*)+0xaa>
  uint8_t crc = '{';
  for(char *p = bptr; *++p; ) // Skip first char ('{'); loop until '\0'.
    {
    const char c = *p;
//    if(c & 0x80) { return(adjustJSONMsgForTXAndComputeCRC_ERR); } // No high-bits should be set!
    if(('}' == c) && ('\0' == *(p+1)))
    1ece:	9d 37       	cpi	r25, 0x7D	; 125
    1ed0:	19 f5       	brne	.+70     	; 0x1f18 <adjustJSONMsgForTXAndComputeCRC(char*)+0x6c>
    1ed2:	81 81       	ldd	r24, Z+1	; 0x01
    1ed4:	88 23       	and	r24, r24
    1ed6:	01 f5       	brne	.+64     	; 0x1f18 <adjustJSONMsgForTXAndComputeCRC(char*)+0x6c>
      {
      seenTrailingClosingBrace = true;
      const char newC = c | 0x80;
      *p = newC; // Set high bit.
    1ed8:	8d ef       	ldi	r24, 0xFD	; 253
    1eda:	80 83       	st	Z, r24
    1edc:	40 e8       	ldi	r20, 0x80	; 128
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    1ee2:	71 e0       	ldi	r23, 0x01	; 1
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
    1ee4:	57 e3       	ldi	r21, 0x37	; 55
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
    1ee6:	86 2f       	mov	r24, r22
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	e6 e0       	ldi	r30, 0x06	; 6
    1eec:	96 95       	lsr	r25
    1eee:	87 95       	ror	r24
    1ef0:	ea 95       	dec	r30
    1ef2:	e1 f7       	brne	.-8      	; 0x1eec <adjustJSONMsgForTXAndComputeCRC(char*)+0x40>
    1ef4:	98 2f       	mov	r25, r24
    1ef6:	91 70       	andi	r25, 0x01	; 1
        if(0 != (datum & i)) { bit = !bit; }
    1ef8:	84 2f       	mov	r24, r20
    1efa:	8d 7f       	andi	r24, 0xFD	; 253
    1efc:	09 f0       	breq	.+2      	; 0x1f00 <adjustJSONMsgForTXAndComputeCRC(char*)+0x54>
    1efe:	97 27       	eor	r25, r23
        crc <<= 1;
    1f00:	66 0f       	add	r22, r22
        if(bit) { crc ^= 0x37; }
    1f02:	91 11       	cpse	r25, r1
    1f04:	65 27       	eor	r22, r21
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
    1f06:	46 95       	lsr	r20
    1f08:	2f 5f       	subi	r18, 0xFF	; 255
    1f0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f0c:	28 30       	cpi	r18, 0x08	; 8
    1f0e:	31 05       	cpc	r19, r1
    1f10:	51 f7       	brne	.-44     	; 0x1ee6 <adjustJSONMsgForTXAndComputeCRC(char*)+0x3a>
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
        }
    return(crc & 0x7f);
    1f12:	86 2f       	mov	r24, r22
    1f14:	8f 77       	andi	r24, 0x7F	; 127
    1f16:	25 c0       	rjmp	.+74     	; 0x1f62 <adjustJSONMsgForTXAndComputeCRC(char*)+0xb6>
      const char newC = c | 0x80;
      *p = newC; // Set high bit.
      crc = crc7_5B_update(crc, (uint8_t)newC); // Update CRC.
      return(crc);
      }
    crc = crc7_5B_update(crc, (uint8_t)c); // Update CRC.
    1f18:	30 e8       	ldi	r19, 0x80	; 128
    1f1a:	40 e0       	ldi	r20, 0x00	; 0
    1f1c:	50 e0       	ldi	r21, 0x00	; 0
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    1f1e:	a9 2f       	mov	r26, r25
    1f20:	b0 e0       	ldi	r27, 0x00	; 0
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
    1f22:	86 2f       	mov	r24, r22
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	06 e0       	ldi	r16, 0x06	; 6
    1f28:	96 95       	lsr	r25
    1f2a:	87 95       	ror	r24
    1f2c:	0a 95       	dec	r16
    1f2e:	e1 f7       	brne	.-8      	; 0x1f28 <adjustJSONMsgForTXAndComputeCRC(char*)+0x7c>
    1f30:	28 2f       	mov	r18, r24
    1f32:	21 70       	andi	r18, 0x01	; 1
        if(0 != (datum & i)) { bit = !bit; }
    1f34:	83 2f       	mov	r24, r19
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	8a 23       	and	r24, r26
    1f3a:	9b 23       	and	r25, r27
    1f3c:	89 2b       	or	r24, r25
    1f3e:	09 f0       	breq	.+2      	; 0x1f42 <adjustJSONMsgForTXAndComputeCRC(char*)+0x96>
    1f40:	21 27       	eor	r18, r17
        crc <<= 1;
    1f42:	66 0f       	add	r22, r22
        if(bit) { crc ^= 0x37; }
    1f44:	21 11       	cpse	r18, r1
    1f46:	67 27       	eor	r22, r23
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
    1f48:	36 95       	lsr	r19
    1f4a:	4f 5f       	subi	r20, 0xFF	; 255
    1f4c:	5f 4f       	sbci	r21, 0xFF	; 255
    1f4e:	48 30       	cpi	r20, 0x08	; 8
    1f50:	51 05       	cpc	r21, r1
    1f52:	39 f7       	brne	.-50     	; 0x1f22 <adjustJSONMsgForTXAndComputeCRC(char*)+0x76>
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
        }
    return(crc & 0x7f);
    1f54:	6f 77       	andi	r22, 0x7F	; 127
  // Do initial quick validation before computing CRC, etc,
  if(!quickValidateRawSimpleJSONMessage(bptr)) { return(adjustJSONMsgForTXAndComputeCRC_ERR); }
//  if('{' != *bptr) { return(adjustJSONMsgForTXAndComputeCRC_ERR); }
  bool seenTrailingClosingBrace = false;
  uint8_t crc = '{';
  for(char *p = bptr; *++p; ) // Skip first char ('{'); loop until '\0'.
    1f56:	31 96       	adiw	r30, 0x01	; 1
    1f58:	90 81       	ld	r25, Z
    1f5a:	99 23       	and	r25, r25
    1f5c:	09 f0       	breq	.+2      	; 0x1f60 <adjustJSONMsgForTXAndComputeCRC(char*)+0xb4>
    1f5e:	b7 cf       	rjmp	.-146    	; 0x1ece <adjustJSONMsgForTXAndComputeCRC(char*)+0x22>
    1f60:	8f ef       	ldi	r24, 0xFF	; 255
      }
    crc = crc7_5B_update(crc, (uint8_t)c); // Update CRC.
    }
  if(!seenTrailingClosingBrace) { return(adjustJSONMsgForTXAndComputeCRC_ERR); } // Missing ending '}'.
  return(crc);
  }
    1f62:	1f 91       	pop	r17
    1f64:	0f 91       	pop	r16
    1f66:	08 95       	ret

00001f68 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)>:
// to allow easy handling with string functions.
//  * bptr  pointer to first byte/char (which must be '{')
//  * bufLen  remaining bytes in buffer starting at bptr
// NOTE: adjusts content in place iff the message appears to be valid JSON.
#define adjustJSONMsgForRXAndCheckCRC_ERR -1
int8_t adjustJSONMsgForRXAndCheckCRC(char * const bptr, const uint8_t bufLen)
    1f68:	cf 92       	push	r12
    1f6a:	df 92       	push	r13
    1f6c:	ef 92       	push	r14
    1f6e:	ff 92       	push	r15
    1f70:	0f 93       	push	r16
    1f72:	1f 93       	push	r17
    1f74:	cf 93       	push	r28
    1f76:	df 93       	push	r29
    1f78:	fc 01       	movw	r30, r24
  {
  if('{' != *bptr) { return(adjustJSONMsgForRXAndCheckCRC_ERR); }
    1f7a:	80 81       	ld	r24, Z
    1f7c:	8b 37       	cpi	r24, 0x7B	; 123
    1f7e:	09 f0       	breq	.+2      	; 0x1f82 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x1a>
    1f80:	43 c0       	rjmp	.+134    	; 0x2008 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0xa0>
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("adjustJSONMsgForRXAndCheckCRC()... {");
#endif
  uint8_t crc = '{';
  // Scan up to maximum length for terminating '}'-with-high-bit.
  const uint8_t ml = min(MSG_JSON_MAX_LENGTH, bufLen);
    1f82:	68 33       	cpi	r22, 0x38	; 56
    1f84:	08 f0       	brcs	.+2      	; 0x1f88 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x20>
    1f86:	67 e3       	ldi	r22, 0x37	; 55
  char *p = bptr + 1;
    1f88:	ef 01       	movw	r28, r30
    1f8a:	21 96       	adiw	r28, 0x01	; 1
    1f8c:	3b e7       	ldi	r19, 0x7B	; 123
    1f8e:	a1 e0       	ldi	r26, 0x01	; 1
    1f90:	b0 e0       	ldi	r27, 0x00	; 0
  for(int i = 1; i < ml; ++i)
    1f92:	e6 2e       	mov	r14, r22
    1f94:	ff 24       	eor	r15, r15
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    1f96:	cc 24       	eor	r12, r12
    1f98:	c3 94       	inc	r12
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
    1f9a:	47 e3       	ldi	r20, 0x37	; 55
    1f9c:	d4 2e       	mov	r13, r20
    1f9e:	31 c0       	rjmp	.+98     	; 0x2002 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x9a>
  // Scan up to maximum length for terminating '}'-with-high-bit.
  const uint8_t ml = min(MSG_JSON_MAX_LENGTH, bufLen);
  char *p = bptr + 1;
  for(int i = 1; i < ml; ++i)
    {
    const char c = *p++;
    1fa0:	fe 01       	movw	r30, r28
    1fa2:	71 91       	ld	r23, Z+
    crc = crc7_5B_update(crc, (uint8_t)c); // Update CRC.
    1fa4:	60 e8       	ldi	r22, 0x80	; 128
    1fa6:	40 e0       	ldi	r20, 0x00	; 0
    1fa8:	50 e0       	ldi	r21, 0x00	; 0
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    1faa:	07 2f       	mov	r16, r23
    1fac:	10 e0       	ldi	r17, 0x00	; 0
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
    1fae:	83 2f       	mov	r24, r19
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	26 e0       	ldi	r18, 0x06	; 6
    1fb4:	96 95       	lsr	r25
    1fb6:	87 95       	ror	r24
    1fb8:	2a 95       	dec	r18
    1fba:	e1 f7       	brne	.-8      	; 0x1fb4 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x4c>
    1fbc:	28 2f       	mov	r18, r24
    1fbe:	21 70       	andi	r18, 0x01	; 1
        if(0 != (datum & i)) { bit = !bit; }
    1fc0:	86 2f       	mov	r24, r22
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	80 23       	and	r24, r16
    1fc6:	91 23       	and	r25, r17
    1fc8:	89 2b       	or	r24, r25
    1fca:	09 f0       	breq	.+2      	; 0x1fce <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x66>
    1fcc:	2c 25       	eor	r18, r12
        crc <<= 1;
    1fce:	33 0f       	add	r19, r19
        if(bit) { crc ^= 0x37; }
    1fd0:	21 11       	cpse	r18, r1
    1fd2:	3d 25       	eor	r19, r13
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
    1fd4:	66 95       	lsr	r22
    1fd6:	4f 5f       	subi	r20, 0xFF	; 255
    1fd8:	5f 4f       	sbci	r21, 0xFF	; 255
    1fda:	48 30       	cpi	r20, 0x08	; 8
    1fdc:	51 05       	cpc	r21, r1
    1fde:	39 f7       	brne	.-50     	; 0x1fae <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x46>
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
        }
    return(crc & 0x7f);
    1fe0:	3f 77       	andi	r19, 0x7F	; 127
#endif
      return(i+1);
      }
#endif
    // With a terminating '}' (followed by '\0') the message is superficially valid.
    if((((char)('}' | 0x80)) == c) && (crc == (uint8_t)*p))
    1fe2:	7d 3f       	cpi	r23, 0xFD	; 253
    1fe4:	49 f4       	brne	.+18     	; 0x1ff8 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x90>
    1fe6:	80 81       	ld	r24, Z
    1fe8:	38 17       	cp	r19, r24
    1fea:	31 f4       	brne	.+12     	; 0x1ff8 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x90>
      {
      *(p - 1) = '}';
    1fec:	8d e7       	ldi	r24, 0x7D	; 125
    1fee:	88 83       	st	Y, r24
      *p = '\0'; // Null terminate for use as a text string.
    1ff0:	10 82       	st	Z, r1
#if 0 && defined(DEBUG)
      DEBUG_SERIAL_PRINTLN_FLASHSTRING("} OK with CRC");
#endif
      return(i+1);
    1ff2:	8a 2f       	mov	r24, r26
    1ff4:	8f 5f       	subi	r24, 0xFF	; 255
    1ff6:	09 c0       	rjmp	.+18     	; 0x200a <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0xa2>
      }
    // Non-printable/control character makes the message invalid.
    if((c < 32) || (c > 126))
    1ff8:	70 52       	subi	r23, 0x20	; 32
    1ffa:	7f 35       	cpi	r23, 0x5F	; 95
    1ffc:	28 f4       	brcc	.+10     	; 0x2008 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0xa0>
#endif
  uint8_t crc = '{';
  // Scan up to maximum length for terminating '}'-with-high-bit.
  const uint8_t ml = min(MSG_JSON_MAX_LENGTH, bufLen);
  char *p = bptr + 1;
  for(int i = 1; i < ml; ++i)
    1ffe:	11 96       	adiw	r26, 0x01	; 1
    2000:	ef 01       	movw	r28, r30
    2002:	ae 15       	cp	r26, r14
    2004:	bf 05       	cpc	r27, r15
    2006:	64 f2       	brlt	.-104    	; 0x1fa0 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)+0x38>
    2008:	8f ef       	ldi	r24, 0xFF	; 255
    }
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING(" bad: unterminated");
#endif
  return(adjustJSONMsgForRXAndCheckCRC_ERR); // Bad (unterminated) message.
  }
    200a:	df 91       	pop	r29
    200c:	cf 91       	pop	r28
    200e:	1f 91       	pop	r17
    2010:	0f 91       	pop	r16
    2012:	ff 90       	pop	r15
    2014:	ef 90       	pop	r14
    2016:	df 90       	pop	r13
    2018:	cf 90       	pop	r12
    201a:	08 95       	ret

0000201c <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)>:
    //       potentially at the cost of signficant CPU time
    //   * suppressClearChanged  if true then 'changed' flag for included fields is not cleared by this
    //       allowing them to continue to be treated as higher priority
uint8_t SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase &job,
                                            uint8_t *const buf, const uint8_t bufSize, const uint8_t sensitivity,
                                            const bool maximise, const bool suppressClearChanged)
    201c:	6f 92       	push	r6
    201e:	7f 92       	push	r7
    2020:	8f 92       	push	r8
    2022:	9f 92       	push	r9
    2024:	af 92       	push	r10
    2026:	bf 92       	push	r11
    2028:	cf 92       	push	r12
    202a:	df 92       	push	r13
    202c:	ef 92       	push	r14
    202e:	ff 92       	push	r15
    2030:	0f 93       	push	r16
    2032:	1f 93       	push	r17
    2034:	cf 93       	push	r28
    2036:	df 93       	push	r29
    2038:	7c 01       	movw	r14, r24
    203a:	5b 01       	movw	r10, r22
    203c:	4a 01       	movw	r8, r20
    203e:	72 2e       	mov	r7, r18
    2040:	6c 2c       	mov	r6, r12
  {
#ifdef DEBUG
  if(NULL == buf) { panic(0); } // Should never happen.
    2042:	41 15       	cp	r20, r1
    2044:	51 05       	cpc	r21, r1
    2046:	21 f4       	brne	.+8      	; 0x2050 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x34>
    2048:	80 e0       	ldi	r24, 0x00	; 0
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	0e 94 d9 2e 	call	0x5db2	; 0x5db2 <panic(__FlashStringHelper const*)>
#endif
  // Minimum size is for {"@":""} plus null plus extra padding char/byte to check for overrun.
  if(bufSize < 10) { return(0); } // Failed.
    2050:	89 e0       	ldi	r24, 0x09	; 9
    2052:	87 15       	cp	r24, r7
    2054:	08 f0       	brcs	.+2      	; 0x2058 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x3c>
    2056:	40 c1       	rjmp	.+640    	; 0x22d8 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x2bc>
#else

  // Write ID first.
  // If an explicit ID is supplied then use it
  // else compute it taking the housecode by preference if it is set.
  if(NULL != id) { job["@"] = id; }
    2058:	d7 01       	movw	r26, r14
    205a:	16 96       	adiw	r26, 0x06	; 6
    205c:	8d 91       	ld	r24, X+
    205e:	9c 91       	ld	r25, X
    2060:	17 97       	sbiw	r26, 0x07	; 7
    2062:	89 2b       	or	r24, r25
    2064:	91 f0       	breq	.+36     	; 0x208a <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x6e>
    2066:	c5 01       	movw	r24, r10
    2068:	64 e0       	ldi	r22, 0x04	; 4
    206a:	71 e0       	ldi	r23, 0x01	; 1
    206c:	0e 94 80 38 	call	0x7100	; 0x7100 <ArduinoJson::Generator::JsonObjectBase::operator[](char const*)>
    2070:	fc 01       	movw	r30, r24
    2072:	d7 01       	movw	r26, r14
    2074:	16 96       	adiw	r26, 0x06	; 6
    2076:	2d 91       	ld	r18, X+
    2078:	3c 91       	ld	r19, X
    207a:	17 97       	sbiw	r26, 0x07	; 7
                _content.asPrintable = &value;
            }

            void operator=(const char* value)
            {
                _printToImpl = &printStringTo;
    207c:	86 ed       	ldi	r24, 0xD6	; 214
    207e:	97 e3       	ldi	r25, 0x37	; 55
    2080:	95 83       	std	Z+5, r25	; 0x05
    2082:	84 83       	std	Z+4, r24	; 0x04
                _content.asString = value;
    2084:	31 83       	std	Z+1, r19	; 0x01
    2086:	20 83       	st	Z, r18
    2088:	74 c0       	rjmp	.+232    	; 0x2172 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x156>
    {
    // Maintain a static buffer to avoid lifetime issues.
    // Could create a Printable to do this instead.
    static char bufID[5];
#ifdef USE_MODULE_FHT8VSIMPLE
    const uint8_t hc1 = FHT8VGetHC1();
    208a:	0e 94 95 0b 	call	0x172a	; 0x172a <FHT8VGetHC1()>
    if(localFHT8VTRVEnabled())
    208e:	0e 94 a7 0b 	call	0x174e	; 0x174e <localFHT8VTRVEnabled()>
    2092:	88 23       	and	r24, r24
    2094:	f1 f0       	breq	.+60     	; 0x20d2 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0xb6>
      {
      hexDigits(FHT8VGetHC1(), bufID+0);
    2096:	0e 94 95 0b 	call	0x172a	; 0x172a <FHT8VGetHC1()>
    209a:	28 2f       	mov	r18, r24


// Extract ASCII hex digit in range [0-9][a-f] (ie lowercase) from bottom 4 bits of argument.
// Eg, passing in 0xa (10) returns 'a'.
// The top 4 bits are ignored.
static inline char hexDigit(const uint8_t value) { const uint8_t v = 0xf&value; if(v<10) { return('0'+v); } return('a'+(v-10)); }
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	f4 e0       	ldi	r31, 0x04	; 4
    20a0:	95 95       	asr	r25
    20a2:	87 95       	ror	r24
    20a4:	fa 95       	dec	r31
    20a6:	e1 f7       	brne	.-8      	; 0x20a0 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x84>
    20a8:	8f 70       	andi	r24, 0x0F	; 15
    20aa:	8a 30       	cpi	r24, 0x0A	; 10
    20ac:	10 f4       	brcc	.+4      	; 0x20b2 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x96>
    20ae:	80 5d       	subi	r24, 0xD0	; 208
    20b0:	01 c0       	rjmp	.+2      	; 0x20b4 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x98>
    20b2:	89 5a       	subi	r24, 0xA9	; 169
//static inline char hexDigit(const uint8_t value) { const uint8_t v = *("0123456789abcdef" + (0xf&value)); }
// Fill in the first two bytes of buf with the ASCII hex digits of the value passed.
// Eg, passing in a value 0x4e sets buf[0] to '4' and buf[1] to 'e'.
static inline void hexDigits(const uint8_t value, char * const buf) { buf[0] = hexDigit(value>>4); buf[1] = hexDigit(value); }
    20b4:	80 93 dd 02 	sts	0x02DD, r24


// Extract ASCII hex digit in range [0-9][a-f] (ie lowercase) from bottom 4 bits of argument.
// Eg, passing in 0xa (10) returns 'a'.
// The top 4 bits are ignored.
static inline char hexDigit(const uint8_t value) { const uint8_t v = 0xf&value; if(v<10) { return('0'+v); } return('a'+(v-10)); }
    20b8:	82 2f       	mov	r24, r18
    20ba:	8f 70       	andi	r24, 0x0F	; 15
    20bc:	8a 30       	cpi	r24, 0x0A	; 10
    20be:	10 f4       	brcc	.+4      	; 0x20c4 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0xa8>
    20c0:	80 5d       	subi	r24, 0xD0	; 208
    20c2:	01 c0       	rjmp	.+2      	; 0x20c6 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0xaa>
    20c4:	89 5a       	subi	r24, 0xA9	; 169
//static inline char hexDigit(const uint8_t value) { const uint8_t v = *("0123456789abcdef" + (0xf&value)); }
// Fill in the first two bytes of buf with the ASCII hex digits of the value passed.
// Eg, passing in a value 0x4e sets buf[0] to '4' and buf[1] to 'e'.
static inline void hexDigits(const uint8_t value, char * const buf) { buf[0] = hexDigit(value>>4); buf[1] = hexDigit(value); }
    20c6:	80 93 de 02 	sts	0x02DE, r24
      hexDigits(FHT8VGetHC2(), bufID+2);
    20ca:	0e 94 9e 0b 	call	0x173c	; 0x173c <FHT8VGetHC2()>
    20ce:	28 2f       	mov	r18, r24
    20d0:	28 c0       	rjmp	.+80     	; 0x2122 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x106>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    20d2:	f9 99       	sbic	0x1f, 1	; 31
    20d4:	fe cf       	rjmp	.-4      	; 0x20d2 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0xb6>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    20d6:	84 e1       	ldi	r24, 0x14	; 20
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	92 bd       	out	0x22, r25	; 34
    20dc:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    20de:	f8 9a       	sbi	0x1f, 0	; 31
    20e0:	20 b5       	in	r18, 0x20	; 32


// Extract ASCII hex digit in range [0-9][a-f] (ie lowercase) from bottom 4 bits of argument.
// Eg, passing in 0xa (10) returns 'a'.
// The top 4 bits are ignored.
static inline char hexDigit(const uint8_t value) { const uint8_t v = 0xf&value; if(v<10) { return('0'+v); } return('a'+(v-10)); }
    20e2:	82 2f       	mov	r24, r18
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	e4 e0       	ldi	r30, 0x04	; 4
    20e8:	95 95       	asr	r25
    20ea:	87 95       	ror	r24
    20ec:	ea 95       	dec	r30
    20ee:	e1 f7       	brne	.-8      	; 0x20e8 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0xcc>
    20f0:	8f 70       	andi	r24, 0x0F	; 15
    20f2:	8a 30       	cpi	r24, 0x0A	; 10
    20f4:	10 f4       	brcc	.+4      	; 0x20fa <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0xde>
    20f6:	80 5d       	subi	r24, 0xD0	; 208
    20f8:	01 c0       	rjmp	.+2      	; 0x20fc <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0xe0>
    20fa:	89 5a       	subi	r24, 0xA9	; 169
//static inline char hexDigit(const uint8_t value) { const uint8_t v = *("0123456789abcdef" + (0xf&value)); }
// Fill in the first two bytes of buf with the ASCII hex digits of the value passed.
// Eg, passing in a value 0x4e sets buf[0] to '4' and buf[1] to 'e'.
static inline void hexDigits(const uint8_t value, char * const buf) { buf[0] = hexDigit(value>>4); buf[1] = hexDigit(value); }
    20fc:	80 93 dd 02 	sts	0x02DD, r24


// Extract ASCII hex digit in range [0-9][a-f] (ie lowercase) from bottom 4 bits of argument.
// Eg, passing in 0xa (10) returns 'a'.
// The top 4 bits are ignored.
static inline char hexDigit(const uint8_t value) { const uint8_t v = 0xf&value; if(v<10) { return('0'+v); } return('a'+(v-10)); }
    2100:	82 2f       	mov	r24, r18
    2102:	8f 70       	andi	r24, 0x0F	; 15
    2104:	8a 30       	cpi	r24, 0x0A	; 10
    2106:	10 f4       	brcc	.+4      	; 0x210c <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0xf0>
    2108:	80 5d       	subi	r24, 0xD0	; 208
    210a:	01 c0       	rjmp	.+2      	; 0x210e <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0xf2>
    210c:	89 5a       	subi	r24, 0xA9	; 169
//static inline char hexDigit(const uint8_t value) { const uint8_t v = *("0123456789abcdef" + (0xf&value)); }
// Fill in the first two bytes of buf with the ASCII hex digits of the value passed.
// Eg, passing in a value 0x4e sets buf[0] to '4' and buf[1] to 'e'.
static inline void hexDigits(const uint8_t value, char * const buf) { buf[0] = hexDigit(value>>4); buf[1] = hexDigit(value); }
    210e:	80 93 de 02 	sts	0x02DE, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2112:	f9 99       	sbic	0x1f, 1	; 31
    2114:	fe cf       	rjmp	.-4      	; 0x2112 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0xf6>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2116:	85 e1       	ldi	r24, 0x15	; 21
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	92 bd       	out	0x22, r25	; 34
    211c:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    211e:	f8 9a       	sbi	0x1f, 0	; 31
    2120:	20 b5       	in	r18, 0x20	; 32


// Extract ASCII hex digit in range [0-9][a-f] (ie lowercase) from bottom 4 bits of argument.
// Eg, passing in 0xa (10) returns 'a'.
// The top 4 bits are ignored.
static inline char hexDigit(const uint8_t value) { const uint8_t v = 0xf&value; if(v<10) { return('0'+v); } return('a'+(v-10)); }
    2122:	82 2f       	mov	r24, r18
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	74 e0       	ldi	r23, 0x04	; 4
    2128:	95 95       	asr	r25
    212a:	87 95       	ror	r24
    212c:	7a 95       	dec	r23
    212e:	e1 f7       	brne	.-8      	; 0x2128 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x10c>
    2130:	8f 70       	andi	r24, 0x0F	; 15
    2132:	8a 30       	cpi	r24, 0x0A	; 10
    2134:	10 f4       	brcc	.+4      	; 0x213a <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x11e>
    2136:	80 5d       	subi	r24, 0xD0	; 208
    2138:	01 c0       	rjmp	.+2      	; 0x213c <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x120>
    213a:	89 5a       	subi	r24, 0xA9	; 169
//static inline char hexDigit(const uint8_t value) { const uint8_t v = *("0123456789abcdef" + (0xf&value)); }
// Fill in the first two bytes of buf with the ASCII hex digits of the value passed.
// Eg, passing in a value 0x4e sets buf[0] to '4' and buf[1] to 'e'.
static inline void hexDigits(const uint8_t value, char * const buf) { buf[0] = hexDigit(value>>4); buf[1] = hexDigit(value); }
    213c:	80 93 df 02 	sts	0x02DF, r24


// Extract ASCII hex digit in range [0-9][a-f] (ie lowercase) from bottom 4 bits of argument.
// Eg, passing in 0xa (10) returns 'a'.
// The top 4 bits are ignored.
static inline char hexDigit(const uint8_t value) { const uint8_t v = 0xf&value; if(v<10) { return('0'+v); } return('a'+(v-10)); }
    2140:	82 2f       	mov	r24, r18
    2142:	8f 70       	andi	r24, 0x0F	; 15
    2144:	8a 30       	cpi	r24, 0x0A	; 10
    2146:	10 f4       	brcc	.+4      	; 0x214c <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x130>
    2148:	80 5d       	subi	r24, 0xD0	; 208
    214a:	01 c0       	rjmp	.+2      	; 0x214e <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x132>
    214c:	89 5a       	subi	r24, 0xA9	; 169
//static inline char hexDigit(const uint8_t value) { const uint8_t v = *("0123456789abcdef" + (0xf&value)); }
// Fill in the first two bytes of buf with the ASCII hex digits of the value passed.
// Eg, passing in a value 0x4e sets buf[0] to '4' and buf[1] to 'e'.
static inline void hexDigits(const uint8_t value, char * const buf) { buf[0] = hexDigit(value>>4); buf[1] = hexDigit(value); }
    214e:	80 93 e0 02 	sts	0x02E0, r24
#endif
      {
      hexDigits(eeprom_read_byte(0 + (uint8_t *)EE_START_ID), bufID+0);
      hexDigits(eeprom_read_byte(1 + (uint8_t *)EE_START_ID), bufID+2);
      }
    bufID[4] = '\0';
    2152:	10 92 e1 02 	sts	0x02E1, r1
    job["@"] = bufID;
    2156:	c5 01       	movw	r24, r10
    2158:	64 e0       	ldi	r22, 0x04	; 4
    215a:	71 e0       	ldi	r23, 0x01	; 1
    215c:	0e 94 80 38 	call	0x7100	; 0x7100 <ArduinoJson::Generator::JsonObjectBase::operator[](char const*)>
    2160:	fc 01       	movw	r30, r24
                _content.asPrintable = &value;
            }

            void operator=(const char* value)
            {
                _printToImpl = &printStringTo;
    2162:	86 ed       	ldi	r24, 0xD6	; 214
    2164:	97 e3       	ldi	r25, 0x37	; 55
    2166:	95 83       	std	Z+5, r25	; 0x05
    2168:	84 83       	std	Z+4, r24	; 0x04
                _content.asString = value;
    216a:	8d ed       	ldi	r24, 0xDD	; 221
    216c:	92 e0       	ldi	r25, 0x02	; 2
    216e:	91 83       	std	Z+1, r25	; 0x01
    2170:	80 83       	st	Z, r24
#endif

  // Write count next iff enabled.
#if defined(RAW_JSON) // Without ArduinoJSON underneath...
#else
  if(c.enabled) { job["+"] = c.count; }
    2172:	f7 01       	movw	r30, r14
    2174:	80 85       	ldd	r24, Z+8	; 0x08
    2176:	80 ff       	sbrs	r24, 0
    2178:	18 c0       	rjmp	.+48     	; 0x21aa <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x18e>
    217a:	c5 01       	movw	r24, r10
    217c:	66 e0       	ldi	r22, 0x06	; 6
    217e:	71 e0       	ldi	r23, 0x01	; 1
    2180:	0e 94 80 38 	call	0x7100	; 0x7100 <ArduinoJson::Generator::JsonObjectBase::operator[](char const*)>
    2184:	fc 01       	movw	r30, r24
    2186:	d7 01       	movw	r26, r14
    2188:	18 96       	adiw	r26, 0x08	; 8
    218a:	8c 91       	ld	r24, X
    218c:	86 95       	lsr	r24
    218e:	8f 73       	andi	r24, 0x3F	; 63
    2190:	90 e0       	ldi	r25, 0x00	; 0
                _content.asLong = value;
            }

            void operator=(int value)
            {
                _printToImpl = &printLongTo;
    2192:	21 e5       	ldi	r18, 0x51	; 81
    2194:	38 e3       	ldi	r19, 0x38	; 56
    2196:	35 83       	std	Z+5, r19	; 0x05
    2198:	24 83       	std	Z+4, r18	; 0x04
                _content.asLong = value;
    219a:	aa 27       	eor	r26, r26
    219c:	97 fd       	sbrc	r25, 7
    219e:	a0 95       	com	r26
    21a0:	ba 2f       	mov	r27, r26
    21a2:	80 83       	st	Z, r24
    21a4:	91 83       	std	Z+1, r25	; 0x01
    21a6:	a2 83       	std	Z+2, r26	; 0x02
    21a8:	b3 83       	std	Z+3, r27	; 0x03

  bool gotHiPri = false;
  uint8_t hiPriIndex = 0;
  bool gotLoPri = false;
  uint8_t loPriIndex = 0;
  if(nStats != 0)
    21aa:	f7 01       	movw	r30, r14
    21ac:	63 81       	ldd	r22, Z+3	; 0x03
    21ae:	66 23       	and	r22, r22
    21b0:	09 f4       	brne	.+2      	; 0x21b4 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x198>
    21b2:	7f c0       	rjmp	.+254    	; 0x22b2 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x296>
//    for(int i = nStats; --i >= 0; ) { stats[i].flags.thisRun = false; }

    // High-pri/changed stats.
    // Only do this on a portion of runs to let 'normal' stats get a look-in.
    // This happens on even-numbered runs (eg including the first, typically).
    if(0 == (c.count & 1))
    21b4:	80 85       	ldd	r24, Z+8	; 0x08
    21b6:	86 95       	lsr	r24
    21b8:	8f 73       	andi	r24, 0x3F	; 63
    21ba:	80 fd       	sbrc	r24, 0
    21bc:	3e c0       	rjmp	.+124    	; 0x223a <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x21e>
      {
      uint8_t next = lastTXedHiPri;
    21be:	15 81       	ldd	r17, Z+5	; 0x05
    21c0:	40 e0       	ldi	r20, 0x00	; 0
    21c2:	50 e0       	ldi	r21, 0x00	; 0
      for(int i = nStats; --i >= 0; )
    21c4:	26 2f       	mov	r18, r22
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	21 50       	subi	r18, 0x01	; 1
    21ca:	30 40       	sbci	r19, 0x00	; 0
        {
        // Wrap around the end of the stats.
        if(++next >= nStats) { next = 0; }
        // Skip stat if too sensitive to include in this output.
        DescValueTuple &s = stats[next];
    21cc:	77 e0       	ldi	r23, 0x07	; 7
    21ce:	2f c0       	rjmp	.+94     	; 0x222e <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x212>
      {
      uint8_t next = lastTXedHiPri;
      for(int i = nStats; --i >= 0; )
        {
        // Wrap around the end of the stats.
        if(++next >= nStats) { next = 0; }
    21d0:	1f 5f       	subi	r17, 0xFF	; 255
    21d2:	16 17       	cp	r17, r22
    21d4:	08 f0       	brcs	.+2      	; 0x21d8 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x1bc>
    21d6:	10 e0       	ldi	r17, 0x00	; 0
        // Skip stat if too sensitive to include in this output.
        DescValueTuple &s = stats[next];
    21d8:	17 9f       	mul	r17, r23
    21da:	c0 01       	movw	r24, r0
    21dc:	11 24       	eor	r1, r1
    21de:	d7 01       	movw	r26, r14
    21e0:	11 96       	adiw	r26, 0x01	; 1
    21e2:	cd 91       	ld	r28, X+
    21e4:	dc 91       	ld	r29, X
    21e6:	12 97       	sbiw	r26, 0x02	; 2
    21e8:	c8 0f       	add	r28, r24
    21ea:	d9 1f       	adc	r29, r25
        if(sensitivity > s.descriptor.sensitivity) { continue; }
    21ec:	8a 81       	ldd	r24, Y+2	; 0x02
    21ee:	80 17       	cp	r24, r16
    21f0:	e0 f0       	brcs	.+56     	; 0x222a <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x20e>
        // Skip stat if not changed or high-priority.
        if(!s.descriptor.highPriority && !s.flags.changed) { continue; }
    21f2:	8b 81       	ldd	r24, Y+3	; 0x03
    21f4:	88 23       	and	r24, r24
    21f6:	19 f4       	brne	.+6      	; 0x21fe <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x1e2>
    21f8:	8e 81       	ldd	r24, Y+6	; 0x06
    21fa:	80 ff       	sbrs	r24, 0
    21fc:	16 c0       	rjmp	.+44     	; 0x222a <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x20e>
        hiPriIndex = next;
        gotHiPri = true;
        // Add to JSON output.
#if defined(RAW_JSON) // Without ArduinoJSON underneath...
#else
        job[s.descriptor.key] = s.value;
    21fe:	68 81       	ld	r22, Y
    2200:	79 81       	ldd	r23, Y+1	; 0x01
    2202:	c5 01       	movw	r24, r10
    2204:	0e 94 80 38 	call	0x7100	; 0x7100 <ArduinoJson::Generator::JsonObjectBase::operator[](char const*)>
    2208:	fc 01       	movw	r30, r24
    220a:	8c 81       	ldd	r24, Y+4	; 0x04
    220c:	9d 81       	ldd	r25, Y+5	; 0x05
                _content.asLong = value;
            }

            void operator=(int value)
            {
                _printToImpl = &printLongTo;
    220e:	21 e5       	ldi	r18, 0x51	; 81
    2210:	38 e3       	ldi	r19, 0x38	; 56
    2212:	35 83       	std	Z+5, r19	; 0x05
    2214:	24 83       	std	Z+4, r18	; 0x04
                _content.asLong = value;
    2216:	aa 27       	eor	r26, r26
    2218:	97 fd       	sbrc	r25, 7
    221a:	a0 95       	com	r26
    221c:	ba 2f       	mov	r27, r26
    221e:	80 83       	st	Z, r24
    2220:	91 83       	std	Z+1, r25	; 0x01
    2222:	a2 83       	std	Z+2, r26	; 0x02
    2224:	b3 83       	std	Z+3, r27	; 0x03
    2226:	01 e0       	ldi	r16, 0x01	; 1
    2228:	46 c0       	rjmp	.+140    	; 0x22b6 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x29a>
    222a:	4f 5f       	subi	r20, 0xFF	; 255
    222c:	5f 4f       	sbci	r21, 0xFF	; 255
    // Only do this on a portion of runs to let 'normal' stats get a look-in.
    // This happens on even-numbered runs (eg including the first, typically).
    if(0 == (c.count & 1))
      {
      uint8_t next = lastTXedHiPri;
      for(int i = nStats; --i >= 0; )
    222e:	c9 01       	movw	r24, r18
    2230:	84 1b       	sub	r24, r20
    2232:	95 0b       	sbc	r25, r21
    2234:	8f 5f       	subi	r24, 0xFF	; 255
    2236:	9f 4f       	sbci	r25, 0xFF	; 255
    2238:	59 f6       	brne	.-106    	; 0x21d0 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x1b4>
    // Rotate through all eligible stats round-robin,
    // adding one to the end of the current message if possible,
    // checking first the item indexed after the previous one sent.
    if(!gotHiPri)
      {
      uint8_t next = lastTXed;
    223a:	f7 01       	movw	r30, r14
    223c:	14 81       	ldd	r17, Z+4	; 0x04
    223e:	40 e0       	ldi	r20, 0x00	; 0
    2240:	50 e0       	ldi	r21, 0x00	; 0
      for(int i = nStats; --i >= 0; )
    2242:	26 2f       	mov	r18, r22
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	21 50       	subi	r18, 0x01	; 1
    2248:	30 40       	sbci	r19, 0x00	; 0
        {
        // Wrap around the end of the stats.
        if(++next >= nStats) { next = 0; }
        // Skip stat if too sensitive to include in this output.
        DescValueTuple &s = stats[next];
    224a:	77 e0       	ldi	r23, 0x07	; 7
    224c:	2d c0       	rjmp	.+90     	; 0x22a8 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x28c>
      {
      uint8_t next = lastTXed;
      for(int i = nStats; --i >= 0; )
        {
        // Wrap around the end of the stats.
        if(++next >= nStats) { next = 0; }
    224e:	1f 5f       	subi	r17, 0xFF	; 255
    2250:	16 17       	cp	r17, r22
    2252:	08 f0       	brcs	.+2      	; 0x2256 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x23a>
    2254:	10 e0       	ldi	r17, 0x00	; 0
        // Skip stat if too sensitive to include in this output.
        DescValueTuple &s = stats[next];
    2256:	17 9f       	mul	r17, r23
    2258:	c0 01       	movw	r24, r0
    225a:	11 24       	eor	r1, r1
    225c:	d7 01       	movw	r26, r14
    225e:	11 96       	adiw	r26, 0x01	; 1
    2260:	cd 91       	ld	r28, X+
    2262:	dc 91       	ld	r29, X
    2264:	12 97       	sbiw	r26, 0x02	; 2
    2266:	c8 0f       	add	r28, r24
    2268:	d9 1f       	adc	r29, r25
    226a:	4f 5f       	subi	r20, 0xFF	; 255
    226c:	5f 4f       	sbci	r21, 0xFF	; 255
        if(sensitivity > s.descriptor.sensitivity) { continue; }
    226e:	8a 81       	ldd	r24, Y+2	; 0x02
    2270:	80 17       	cp	r24, r16
    2272:	d0 f0       	brcs	.+52     	; 0x22a8 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x28c>
        loPriIndex = next;
        gotLoPri = true;
        // Add to JSON output.
#if defined(RAW_JSON) // Without ArduinoJSON underneath...
#else
        job[s.descriptor.key] = s.value;
    2274:	68 81       	ld	r22, Y
    2276:	79 81       	ldd	r23, Y+1	; 0x01
    2278:	c5 01       	movw	r24, r10
    227a:	0e 94 80 38 	call	0x7100	; 0x7100 <ArduinoJson::Generator::JsonObjectBase::operator[](char const*)>
    227e:	fc 01       	movw	r30, r24
    2280:	8c 81       	ldd	r24, Y+4	; 0x04
    2282:	9d 81       	ldd	r25, Y+5	; 0x05
                _content.asLong = value;
            }

            void operator=(int value)
            {
                _printToImpl = &printLongTo;
    2284:	21 e5       	ldi	r18, 0x51	; 81
    2286:	38 e3       	ldi	r19, 0x38	; 56
    2288:	35 83       	std	Z+5, r19	; 0x05
    228a:	24 83       	std	Z+4, r18	; 0x04
                _content.asLong = value;
    228c:	aa 27       	eor	r26, r26
    228e:	97 fd       	sbrc	r25, 7
    2290:	a0 95       	com	r26
    2292:	ba 2f       	mov	r27, r26
    2294:	80 83       	st	Z, r24
    2296:	91 83       	std	Z+1, r25	; 0x01
    2298:	a2 83       	std	Z+2, r26	; 0x02
    229a:	b3 83       	std	Z+3, r27	; 0x03
    229c:	d1 2e       	mov	r13, r17
    229e:	00 e0       	ldi	r16, 0x00	; 0
    22a0:	10 e0       	ldi	r17, 0x00	; 0
    22a2:	cc 24       	eor	r12, r12
    22a4:	c3 94       	inc	r12
    22a6:	09 c0       	rjmp	.+18     	; 0x22ba <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x29e>
    // adding one to the end of the current message if possible,
    // checking first the item indexed after the previous one sent.
    if(!gotHiPri)
      {
      uint8_t next = lastTXed;
      for(int i = nStats; --i >= 0; )
    22a8:	c9 01       	movw	r24, r18
    22aa:	84 1b       	sub	r24, r20
    22ac:	95 0b       	sbc	r25, r21
    22ae:	97 ff       	sbrs	r25, 7
    22b0:	ce cf       	rjmp	.-100    	; 0x224e <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x232>
    22b2:	00 e0       	ldi	r16, 0x00	; 0
    22b4:	10 e0       	ldi	r17, 0x00	; 0
    22b6:	cc 24       	eor	r12, r12
    22b8:	dd 24       	eor	r13, r13
  // Write to output buffer, checking for overrun.
#if defined(RAW_JSON) // Without ArduinoJSON underneath...
  // Terminate object.
  w += bp.print('{');
#else
  const size_t w = job.printTo((char *)buf, bufSize);
    22ba:	c5 01       	movw	r24, r10
    22bc:	b4 01       	movw	r22, r8
    22be:	47 2d       	mov	r20, r7
    22c0:	50 e0       	ldi	r21, 0x00	; 0
    22c2:	0e 94 1e 37 	call	0x6e3c	; 0x6e3c <ArduinoJson::Generator::JsonPrintable::printTo(char*, unsigned int) const>
    22c6:	ac 01       	movw	r20, r24
#endif
  if(w >= bufSize-1)
    22c8:	87 2d       	mov	r24, r7
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	01 97       	sbiw	r24, 0x01	; 1
    22ce:	48 17       	cp	r20, r24
    22d0:	59 07       	cpc	r21, r25
    22d2:	20 f0       	brcs	.+8      	; 0x22dc <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x2c0>
    {
    // Overrun, so failed/aborted.
    *buf = '\0';
    22d4:	f4 01       	movw	r30, r8
    22d6:	10 82       	st	Z, r1
    22d8:	80 e0       	ldi	r24, 0x00	; 0
    22da:	41 c0       	rjmp	.+130    	; 0x235e <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x342>
    return(0);
    }
 
  // On successfully creating output, update some internal state including success count.
  ++c.count;
    22dc:	d7 01       	movw	r26, r14
    22de:	18 96       	adiw	r26, 0x08	; 8
    22e0:	9c 91       	ld	r25, X
    22e2:	18 97       	sbiw	r26, 0x08	; 8
    22e4:	89 2f       	mov	r24, r25
    22e6:	86 95       	lsr	r24
    22e8:	8f 5f       	subi	r24, 0xFF	; 255
    22ea:	8f 73       	andi	r24, 0x3F	; 63
    22ec:	88 0f       	add	r24, r24
    22ee:	91 78       	andi	r25, 0x81	; 129
    22f0:	98 2b       	or	r25, r24
    22f2:	18 96       	adiw	r26, 0x08	; 8
    22f4:	9c 93       	st	X, r25
    22f6:	18 97       	sbiw	r26, 0x08	; 8
  // Remember which hi-pri/changed stat (if any) was just included in the output
  // and note it as no longer changed since last sent.
  if(gotHiPri)
    22f8:	00 23       	and	r16, r16
    22fa:	c1 f0       	breq	.+48     	; 0x232c <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x310>
    {
    lastTXedHiPri = hiPriIndex;
    22fc:	15 96       	adiw	r26, 0x05	; 5
    22fe:	1c 93       	st	X, r17
    2300:	15 97       	sbiw	r26, 0x05	; 5
    if(!suppressClearChanged) { stats[hiPriIndex].flags.changed = false; }
    2302:	66 20       	and	r6, r6
    2304:	99 f4       	brne	.+38     	; 0x232c <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x310>
    2306:	21 2f       	mov	r18, r17
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	c9 01       	movw	r24, r18
    230c:	63 e0       	ldi	r22, 0x03	; 3
    230e:	88 0f       	add	r24, r24
    2310:	99 1f       	adc	r25, r25
    2312:	6a 95       	dec	r22
    2314:	e1 f7       	brne	.-8      	; 0x230e <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x2f2>
    2316:	82 1b       	sub	r24, r18
    2318:	93 0b       	sbc	r25, r19
    231a:	11 96       	adiw	r26, 0x01	; 1
    231c:	ed 91       	ld	r30, X+
    231e:	fc 91       	ld	r31, X
    2320:	12 97       	sbiw	r26, 0x02	; 2
    2322:	e8 0f       	add	r30, r24
    2324:	f9 1f       	adc	r31, r25
    2326:	86 81       	ldd	r24, Z+6	; 0x06
    2328:	8e 7f       	andi	r24, 0xFE	; 254
    232a:	86 83       	std	Z+6, r24	; 0x06
    }
  // Remember which normal stat (if any) was just included in the output
  // and note it as no longer changed since last sent.
  if(gotLoPri)
    232c:	cc 20       	and	r12, r12
    232e:	b1 f0       	breq	.+44     	; 0x235c <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x340>
    {
    lastTXed = loPriIndex;
    2330:	f7 01       	movw	r30, r14
    2332:	d4 82       	std	Z+4, r13	; 0x04
    if(!suppressClearChanged) { stats[loPriIndex].flags.changed = false; }
    2334:	66 20       	and	r6, r6
    2336:	91 f4       	brne	.+36     	; 0x235c <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x340>
    2338:	2d 2d       	mov	r18, r13
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	c9 01       	movw	r24, r18
    233e:	53 e0       	ldi	r21, 0x03	; 3
    2340:	88 0f       	add	r24, r24
    2342:	99 1f       	adc	r25, r25
    2344:	5a 95       	dec	r21
    2346:	e1 f7       	brne	.-8      	; 0x2340 <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)+0x324>
    2348:	82 1b       	sub	r24, r18
    234a:	93 0b       	sbc	r25, r19
    234c:	01 80       	ldd	r0, Z+1	; 0x01
    234e:	f2 81       	ldd	r31, Z+2	; 0x02
    2350:	e0 2d       	mov	r30, r0
    2352:	e8 0f       	add	r30, r24
    2354:	f9 1f       	adc	r31, r25
    2356:	86 81       	ldd	r24, Z+6	; 0x06
    2358:	8e 7f       	andi	r24, 0xFE	; 254
    235a:	86 83       	std	Z+6, r24	; 0x06
    }

  return(w); // Success!
    235c:	84 2f       	mov	r24, r20
  }
    235e:	df 91       	pop	r29
    2360:	cf 91       	pop	r28
    2362:	1f 91       	pop	r17
    2364:	0f 91       	pop	r16
    2366:	ff 90       	pop	r15
    2368:	ef 90       	pop	r14
    236a:	df 90       	pop	r13
    236c:	cf 90       	pop	r12
    236e:	bf 90       	pop	r11
    2370:	af 90       	pop	r10
    2372:	9f 90       	pop	r9
    2374:	8f 90       	pop	r8
    2376:	7f 90       	pop	r7
    2378:	6f 90       	pop	r6
    237a:	08 95       	ret

0000237c <SimpleStatsRotationBase::findByKey(char const*) const>:
  return(true);
  }

// Returns pointer to stats tuple with given (non-NULL) key if present, else NULL.
// Does a simple linear search.
SimpleStatsRotationBase::DescValueTuple * SimpleStatsRotationBase::findByKey(const SimpleStatsKey key) const
    237c:	8f 92       	push	r8
    237e:	9f 92       	push	r9
    2380:	af 92       	push	r10
    2382:	bf 92       	push	r11
    2384:	cf 92       	push	r12
    2386:	df 92       	push	r13
    2388:	ef 92       	push	r14
    238a:	ff 92       	push	r15
    238c:	0f 93       	push	r16
    238e:	1f 93       	push	r17
    2390:	cf 93       	push	r28
    2392:	df 93       	push	r29
    2394:	6c 01       	movw	r12, r24
    2396:	4b 01       	movw	r8, r22
  {
  for(int i = 0; i < nStats; ++i)
    2398:	fc 01       	movw	r30, r24
    239a:	83 81       	ldd	r24, Z+3	; 0x03
    239c:	a8 2e       	mov	r10, r24
    239e:	bb 24       	eor	r11, r11
    23a0:	ee 24       	eor	r14, r14
    23a2:	ff 24       	eor	r15, r15
    23a4:	00 e0       	ldi	r16, 0x00	; 0
    23a6:	10 e0       	ldi	r17, 0x00	; 0
    23a8:	11 c0       	rjmp	.+34     	; 0x23cc <SimpleStatsRotationBase::findByKey(char const*) const+0x50>
    {
    DescValueTuple * const p = stats + i;
    23aa:	f6 01       	movw	r30, r12
    23ac:	c1 81       	ldd	r28, Z+1	; 0x01
    23ae:	d2 81       	ldd	r29, Z+2	; 0x02
    23b0:	c0 0f       	add	r28, r16
    23b2:	d1 1f       	adc	r29, r17
    if(0 == strcmp(p->descriptor.key, key)) { return(p); }
    23b4:	88 81       	ld	r24, Y
    23b6:	99 81       	ldd	r25, Y+1	; 0x01
    23b8:	b4 01       	movw	r22, r8
    23ba:	0e 94 47 04 	call	0x88e	; 0x88e <strcmp>
    23be:	09 5f       	subi	r16, 0xF9	; 249
    23c0:	1f 4f       	sbci	r17, 0xFF	; 255
    23c2:	00 97       	sbiw	r24, 0x00	; 0
    23c4:	41 f0       	breq	.+16     	; 0x23d6 <SimpleStatsRotationBase::findByKey(char const*) const+0x5a>

// Returns pointer to stats tuple with given (non-NULL) key if present, else NULL.
// Does a simple linear search.
SimpleStatsRotationBase::DescValueTuple * SimpleStatsRotationBase::findByKey(const SimpleStatsKey key) const
  {
  for(int i = 0; i < nStats; ++i)
    23c6:	08 94       	sec
    23c8:	e1 1c       	adc	r14, r1
    23ca:	f1 1c       	adc	r15, r1
    23cc:	ea 14       	cp	r14, r10
    23ce:	fb 04       	cpc	r15, r11
    23d0:	64 f3       	brlt	.-40     	; 0x23aa <SimpleStatsRotationBase::findByKey(char const*) const+0x2e>
    23d2:	c0 e0       	ldi	r28, 0x00	; 0
    23d4:	d0 e0       	ldi	r29, 0x00	; 0
    {
    DescValueTuple * const p = stats + i;
    if(0 == strcmp(p->descriptor.key, key)) { return(p); }
    }
  return(NULL); // Not found.
  }
    23d6:	ce 01       	movw	r24, r28
    23d8:	df 91       	pop	r29
    23da:	cf 91       	pop	r28
    23dc:	1f 91       	pop	r17
    23de:	0f 91       	pop	r16
    23e0:	ff 90       	pop	r15
    23e2:	ef 90       	pop	r14
    23e4:	df 90       	pop	r13
    23e6:	cf 90       	pop	r12
    23e8:	bf 90       	pop	r11
    23ea:	af 90       	pop	r10
    23ec:	9f 90       	pop	r9
    23ee:	8f 90       	pop	r8
    23f0:	08 95       	ret

000023f2 <SimpleStatsRotationBase::put(char const*, int)>:
    
// Create/update value for given stat/key.
// If properties not already set and not supplied then stat will get defaults.
// If descriptor is supplied then its key must match (and the descriptor will be copied).
// True if successful, false otherwise (eg capacity already reached).
bool SimpleStatsRotationBase::put(const SimpleStatsKey key, const int newValue)
    23f2:	ef 92       	push	r14
    23f4:	ff 92       	push	r15
    23f6:	0f 93       	push	r16
    23f8:	1f 93       	push	r17
    23fa:	cf 93       	push	r28
    23fc:	df 93       	push	r29
    23fe:	ec 01       	movw	r28, r24
    2400:	8b 01       	movw	r16, r22
    2402:	7a 01       	movw	r14, r20
// Returns true iff if a valid key for our subset of JSON.
// Rejects keys containing " or \ or any chars outside the range [32,126]
// to avoid having to escape anything.
bool isValidKey(const SimpleStatsKey key)
  {
  if(NULL == key) { return(false); } 
    2404:	61 15       	cp	r22, r1
    2406:	71 05       	cpc	r23, r1
    2408:	a1 f1       	breq	.+104    	; 0x2472 <SimpleStatsRotationBase::put(char const*, int)+0x80>
    240a:	fb 01       	movw	r30, r22
    240c:	09 c0       	rjmp	.+18     	; 0x2420 <SimpleStatsRotationBase::put(char const*, int)+0x2e>
  for(const char *s = key; '\0' != *s; ++s)
    {
    const char c = *s;
    if((c < 32) || (c > 126) || ('"' == c) || ('\\' == c)) { return(false); }
    240e:	89 2f       	mov	r24, r25
    2410:	80 52       	subi	r24, 0x20	; 32
    2412:	8f 35       	cpi	r24, 0x5F	; 95
    2414:	70 f5       	brcc	.+92     	; 0x2472 <SimpleStatsRotationBase::put(char const*, int)+0x80>
    2416:	92 32       	cpi	r25, 0x22	; 34
    2418:	61 f1       	breq	.+88     	; 0x2472 <SimpleStatsRotationBase::put(char const*, int)+0x80>
    241a:	9c 35       	cpi	r25, 0x5C	; 92
    241c:	51 f1       	breq	.+84     	; 0x2472 <SimpleStatsRotationBase::put(char const*, int)+0x80>
// Rejects keys containing " or \ or any chars outside the range [32,126]
// to avoid having to escape anything.
bool isValidKey(const SimpleStatsKey key)
  {
  if(NULL == key) { return(false); } 
  for(const char *s = key; '\0' != *s; ++s)
    241e:	31 96       	adiw	r30, 0x01	; 1
    2420:	90 81       	ld	r25, Z
    2422:	99 23       	and	r25, r25
    2424:	a1 f7       	brne	.-24     	; 0x240e <SimpleStatsRotationBase::put(char const*, int)+0x1c>
    2426:	2d c0       	rjmp	.+90     	; 0x2482 <SimpleStatsRotationBase::put(char const*, int)+0x90>
  DescValueTuple *p = findByKey(key);
  // If item already exists, update it.
  if(NULL != p)
    {
    // Update the value and mark as changed if changed.
    if(p->value != newValue)
    2428:	84 81       	ldd	r24, Z+4	; 0x04
    242a:	95 81       	ldd	r25, Z+5	; 0x05
    242c:	8e 15       	cp	r24, r14
    242e:	9f 05       	cpc	r25, r15
    2430:	29 f0       	breq	.+10     	; 0x243c <SimpleStatsRotationBase::put(char const*, int)+0x4a>
      {
      p->value = newValue;
    2432:	f5 82       	std	Z+5, r15	; 0x05
    2434:	e4 82       	std	Z+4, r14	; 0x04
      p->flags.changed = true;
    2436:	86 81       	ldd	r24, Z+6	; 0x06
    2438:	81 60       	ori	r24, 0x01	; 1
    243a:	86 83       	std	Z+6, r24	; 0x06
    243c:	81 e0       	ldi	r24, 0x01	; 1
    243e:	1a c0       	rjmp	.+52     	; 0x2474 <SimpleStatsRotationBase::put(char const*, int)+0x82>
    return(true);
    }

  // If not yet at capacity then add this new item at the end.
  // Mark it as changed to prioritise seeing it in the JSON output.
  if(nStats < capacity)
    2440:	2b 81       	ldd	r18, Y+3	; 0x03
    2442:	88 81       	ld	r24, Y
    2444:	28 17       	cp	r18, r24
    2446:	a8 f4       	brcc	.+42     	; 0x2472 <SimpleStatsRotationBase::put(char const*, int)+0x80>
    {
    p = stats + (nStats++);
    2448:	87 e0       	ldi	r24, 0x07	; 7
    244a:	28 9f       	mul	r18, r24
    244c:	c0 01       	movw	r24, r0
    244e:	11 24       	eor	r1, r1
    2450:	e9 81       	ldd	r30, Y+1	; 0x01
    2452:	fa 81       	ldd	r31, Y+2	; 0x02
    2454:	e8 0f       	add	r30, r24
    2456:	f9 1f       	adc	r31, r25
    2458:	2f 5f       	subi	r18, 0xFF	; 255
    245a:	2b 83       	std	Y+3, r18	; 0x03
    *p = DescValueTuple();
    p->value = newValue;
    245c:	f5 82       	std	Z+5, r15	; 0x05
    245e:	e4 82       	std	Z+4, r14	; 0x04
    p->flags.changed = true;
    2460:	86 81       	ldd	r24, Z+6	; 0x06
    2462:	81 60       	ori	r24, 0x01	; 1
    2464:	86 83       	std	Z+6, r24	; 0x06
    // Copy descriptor .
    p->descriptor = GenericStatsDescriptor(key);
    2466:	13 82       	std	Z+3, r1	; 0x03
    2468:	8e ef       	ldi	r24, 0xFE	; 254
    246a:	82 83       	std	Z+2, r24	; 0x02
    246c:	11 83       	std	Z+1, r17	; 0x01
    246e:	00 83       	st	Z, r16
    2470:	e5 cf       	rjmp	.-54     	; 0x243c <SimpleStatsRotationBase::put(char const*, int)+0x4a>
    // Addition of new field done!
    return(true);
    2472:	80 e0       	ldi	r24, 0x00	; 0
    }

  return(false); // FAILED: full.
  }
    2474:	df 91       	pop	r29
    2476:	cf 91       	pop	r28
    2478:	1f 91       	pop	r17
    247a:	0f 91       	pop	r16
    247c:	ff 90       	pop	r15
    247e:	ef 90       	pop	r14
    2480:	08 95       	ret
// True if successful, false otherwise (eg capacity already reached).
bool SimpleStatsRotationBase::put(const SimpleStatsKey key, const int newValue)
  {
  if(!isValidKey(key)) { return(false); }

  DescValueTuple *p = findByKey(key);
    2482:	ce 01       	movw	r24, r28
    2484:	b8 01       	movw	r22, r16
    2486:	0e 94 be 11 	call	0x237c	; 0x237c <SimpleStatsRotationBase::findByKey(char const*) const>
    248a:	fc 01       	movw	r30, r24
  // If item already exists, update it.
  if(NULL != p)
    248c:	00 97       	sbiw	r24, 0x00	; 0
    248e:	61 f6       	brne	.-104    	; 0x2428 <SimpleStatsRotationBase::put(char const*, int)+0x36>
    2490:	d7 cf       	rjmp	.-82     	; 0x2440 <SimpleStatsRotationBase::put(char const*, int)+0x4e>

00002492 <SimpleStatsRotationBase::remove(char const*)>:
  return(NULL); // Not found.
  }

// Remove given stat and properties.
// True iff the item existed and was removed.
bool SimpleStatsRotationBase::remove(const SimpleStatsKey key)
    2492:	cf 93       	push	r28
    2494:	df 93       	push	r29
    2496:	ec 01       	movw	r28, r24
  {
  DescValueTuple *p = findByKey(key);
    2498:	0e 94 be 11 	call	0x237c	; 0x237c <SimpleStatsRotationBase::findByKey(char const*) const>
    249c:	bc 01       	movw	r22, r24
  if(NULL == p) { return(false); }
    249e:	00 97       	sbiw	r24, 0x00	; 0
    24a0:	11 f4       	brne	.+4      	; 0x24a6 <SimpleStatsRotationBase::remove(char const*)+0x14>
    24a2:	80 e0       	ldi	r24, 0x00	; 0
    24a4:	2b c0       	rjmp	.+86     	; 0x24fc <SimpleStatsRotationBase::remove(char const*)+0x6a>
  // If it needs to be removed and is not the last item
  // then move the last item down into its slot.
  const bool lastItem = ((p - stats) == (nStats - 1));
    24a6:	a9 81       	ldd	r26, Y+1	; 0x01
    24a8:	ba 81       	ldd	r27, Y+2	; 0x02
    24aa:	4b 81       	ldd	r20, Y+3	; 0x03
  if(!lastItem) { *p = stats[nStats-1]; }
    24ac:	9c 01       	movw	r18, r24
    24ae:	2a 1b       	sub	r18, r26
    24b0:	3b 0b       	sbc	r19, r27
    24b2:	87 eb       	ldi	r24, 0xB7	; 183
    24b4:	9d e6       	ldi	r25, 0x6D	; 109
    24b6:	f9 01       	movw	r30, r18
    24b8:	e8 9f       	mul	r30, r24
    24ba:	90 01       	movw	r18, r0
    24bc:	e9 9f       	mul	r30, r25
    24be:	30 0d       	add	r19, r0
    24c0:	f8 9f       	mul	r31, r24
    24c2:	30 0d       	add	r19, r0
    24c4:	11 24       	eor	r1, r1
    24c6:	50 e0       	ldi	r21, 0x00	; 0
    24c8:	ca 01       	movw	r24, r20
    24ca:	01 97       	sbiw	r24, 0x01	; 1
    24cc:	28 17       	cp	r18, r24
    24ce:	39 07       	cpc	r19, r25
    24d0:	89 f0       	breq	.+34     	; 0x24f4 <SimpleStatsRotationBase::remove(char const*)+0x62>
    24d2:	fa 01       	movw	r30, r20
    24d4:	83 e0       	ldi	r24, 0x03	; 3
    24d6:	ee 0f       	add	r30, r30
    24d8:	ff 1f       	adc	r31, r31
    24da:	8a 95       	dec	r24
    24dc:	e1 f7       	brne	.-8      	; 0x24d6 <SimpleStatsRotationBase::remove(char const*)+0x44>
    24de:	e4 1b       	sub	r30, r20
    24e0:	f5 0b       	sbc	r31, r21
    24e2:	ea 0f       	add	r30, r26
    24e4:	fb 1f       	adc	r31, r27
    24e6:	db 01       	movw	r26, r22
    24e8:	37 97       	sbiw	r30, 0x07	; 7
    24ea:	87 e0       	ldi	r24, 0x07	; 7
    24ec:	01 90       	ld	r0, Z+
    24ee:	0d 92       	st	X+, r0
    24f0:	81 50       	subi	r24, 0x01	; 1
    24f2:	e1 f7       	brne	.-8      	; 0x24ec <SimpleStatsRotationBase::remove(char const*)+0x5a>
  // We got rid of one!
  // TODO: possibly explicitly destroy/overwrite the removed one at the end.
  --nStats;
    24f4:	8b 81       	ldd	r24, Y+3	; 0x03
    24f6:	81 50       	subi	r24, 0x01	; 1
    24f8:	8b 83       	std	Y+3, r24	; 0x03
    24fa:	81 e0       	ldi	r24, 0x01	; 1
  return(true);
  }
    24fc:	df 91       	pop	r29
    24fe:	cf 91       	pop	r28
    2500:	08 95       	ret

00002502 <ensureIDCreated(bool)>:
// Coerce any ID bytes to valid values if unset (0xff) or if forced,
// by filling with valid values (0x80--0xfe) from decent entropy gathered on the fly.
// Will moan about invalid values and return false but not attempt to reset,
// eg in case underlying EEPROM cell is worn/failing.
// Returns true iff all values good.
bool ensureIDCreated(const bool force)
    2502:	af 92       	push	r10
    2504:	bf 92       	push	r11
    2506:	cf 92       	push	r12
    2508:	df 92       	push	r13
    250a:	ef 92       	push	r14
    250c:	ff 92       	push	r15
    250e:	0f 93       	push	r16
    2510:	1f 93       	push	r17
    2512:	cf 93       	push	r28
    2514:	df 93       	push	r29
    2516:	a8 2e       	mov	r10, r24
    2518:	bb 24       	eor	r11, r11
    251a:	b3 94       	inc	r11
    251c:	ee 24       	eor	r14, r14
    251e:	ff 24       	eor	r15, r15
    2520:	c4 e1       	ldi	r28, 0x14	; 20
    2522:	d0 e0       	ldi	r29, 0x00	; 0
    2524:	dc 2e       	mov	r13, r28
    2526:	cd 2e       	mov	r12, r29
  {
  bool allGood = true;
  for(uint8_t i = 0; i < EE_LEN_ID; ++i)
    {
    uint8_t * const loc = i + (uint8_t *)EE_START_ID;
    if(force || (0xff == eeprom_read_byte(loc))) // Byte is unset or change is being forced.
    2528:	aa 20       	and	r10, r10
    252a:	41 f4       	brne	.+16     	; 0x253c <ensureIDCreated(bool)+0x3a>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    252c:	f9 99       	sbic	0x1f, 1	; 31
    252e:	fe cf       	rjmp	.-4      	; 0x252c <ensureIDCreated(bool)+0x2a>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2530:	d2 bd       	out	0x22, r29	; 34
    2532:	c1 bd       	out	0x21, r28	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2534:	f8 9a       	sbi	0x1f, 0	; 31
    2536:	80 b5       	in	r24, 0x20	; 32
    2538:	8f 3f       	cpi	r24, 0xFF	; 255
    253a:	41 f5       	brne	.+80     	; 0x258c <ensureIDCreated(bool)+0x8a>
        {
        serialPrintAndFlush(F("Setting ID byte "));
    253c:	87 e1       	ldi	r24, 0x17	; 23
    253e:	91 e0       	ldi	r25, 0x01	; 1
    2540:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush(i);
    2544:	c7 01       	movw	r24, r14
    2546:	6a e0       	ldi	r22, 0x0A	; 10
    2548:	70 e0       	ldi	r23, 0x00	; 0
    254a:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <serialPrintAndFlush(int, int)>
        serialPrintAndFlush(F(" ... "));
    254e:	81 e1       	ldi	r24, 0x11	; 17
    2550:	91 e0       	ldi	r25, 0x01	; 1
    2552:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <serialPrintAndFlush(__FlashStringHelper const*)>
        const uint8_t envNoise = ((i & 1) ? TemperatureC16.get() : AmbLight.get());
    2556:	e0 fe       	sbrs	r14, 0
    2558:	03 c0       	rjmp	.+6      	; 0x2560 <ensureIDCreated(bool)+0x5e>
    255a:	00 91 7a 03 	lds	r16, 0x037A
    255e:	02 c0       	rjmp	.+4      	; 0x2564 <ensureIDCreated(bool)+0x62>
    2560:	00 91 71 03 	lds	r16, 0x0371
        for( ; ; )
          {
          // Try to make decently-randomised 'unique-ish' ID with mixture of sources.
          // Is not confidential, and will be transmitted in the clear.
          // System will typically not have been running long when this is invoked.
          const uint8_t newValue = 0x80 | (getSecureRandomByte() ^ envNoise);
    2564:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <getSecureRandomByte()>
    2568:	18 2f       	mov	r17, r24
    256a:	10 27       	eor	r17, r16
    256c:	10 68       	ori	r17, 0x80	; 128
          if(0xff == newValue) { continue; } // Reject unusable value.
    256e:	1f 3f       	cpi	r17, 0xFF	; 255
    2570:	c9 f3       	breq	.-14     	; 0x2564 <ensureIDCreated(bool)+0x62>
          eeprom_smart_update_byte(loc, newValue);
    2572:	8d 2d       	mov	r24, r13
    2574:	9c 2d       	mov	r25, r12
    2576:	61 2f       	mov	r22, r17
    2578:	0e 94 ab 0a 	call	0x1556	; 0x1556 <eeprom_smart_update_byte(unsigned char*, unsigned char)>
          serialPrintAndFlush(newValue, HEX);
    257c:	81 2f       	mov	r24, r17
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	60 e1       	ldi	r22, 0x10	; 16
    2582:	70 e0       	ldi	r23, 0x00	; 0
    2584:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <serialPrintAndFlush(int, int)>
          break;
          }
        serialPrintlnAndFlush();
    2588:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <serialPrintlnAndFlush()>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    258c:	f9 99       	sbic	0x1f, 1	; 31
    258e:	fe cf       	rjmp	.-4      	; 0x258c <ensureIDCreated(bool)+0x8a>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    2590:	d2 bd       	out	0x22, r29	; 34
    2592:	c1 bd       	out	0x21, r28	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    2594:	f8 9a       	sbi	0x1f, 0	; 31
    2596:	10 b5       	in	r17, 0x20	; 32
        }
    // Validate.
    const uint8_t v2 = eeprom_read_byte(loc);
    if(!validIDByte(v2))
    2598:	81 2f       	mov	r24, r17
    259a:	80 58       	subi	r24, 0x80	; 128
    259c:	8f 37       	cpi	r24, 0x7F	; 127
    259e:	b0 f0       	brcs	.+44     	; 0x25cc <ensureIDCreated(bool)+0xca>
        {
        allGood = false;
        serialPrintAndFlush(F("Invalid ID byte "));
    25a0:	80 e0       	ldi	r24, 0x00	; 0
    25a2:	91 e0       	ldi	r25, 0x01	; 1
    25a4:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush(i);
    25a8:	c7 01       	movw	r24, r14
    25aa:	6a e0       	ldi	r22, 0x0A	; 10
    25ac:	70 e0       	ldi	r23, 0x00	; 0
    25ae:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <serialPrintAndFlush(int, int)>
        serialPrintAndFlush(F(" ... "));
    25b2:	8a ef       	ldi	r24, 0xFA	; 250
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush(v2, HEX);
    25ba:	81 2f       	mov	r24, r17
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	60 e1       	ldi	r22, 0x10	; 16
    25c0:	70 e0       	ldi	r23, 0x00	; 0
    25c2:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <serialPrintAndFlush(int, int)>
        serialPrintlnAndFlush();
    25c6:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <serialPrintlnAndFlush()>
    25ca:	bb 24       	eor	r11, r11
    25cc:	08 94       	sec
    25ce:	e1 1c       	adc	r14, r1
    25d0:	f1 1c       	adc	r15, r1
    25d2:	21 96       	adiw	r28, 0x01	; 1
// eg in case underlying EEPROM cell is worn/failing.
// Returns true iff all values good.
bool ensureIDCreated(const bool force)
  {
  bool allGood = true;
  for(uint8_t i = 0; i < EE_LEN_ID; ++i)
    25d4:	88 e0       	ldi	r24, 0x08	; 8
    25d6:	e8 16       	cp	r14, r24
    25d8:	f1 04       	cpc	r15, r1
    25da:	09 f0       	breq	.+2      	; 0x25de <ensureIDCreated(bool)+0xdc>
    25dc:	a3 cf       	rjmp	.-186    	; 0x2524 <ensureIDCreated(bool)+0x22>
        serialPrintAndFlush(v2, HEX);
        serialPrintlnAndFlush();
        }
     }
  return(allGood);
  }
    25de:	8b 2d       	mov	r24, r11
    25e0:	df 91       	pop	r29
    25e2:	cf 91       	pop	r28
    25e4:	1f 91       	pop	r17
    25e6:	0f 91       	pop	r16
    25e8:	ff 90       	pop	r15
    25ea:	ef 90       	pop	r14
    25ec:	df 90       	pop	r13
    25ee:	cf 90       	pop	r12
    25f0:	bf 90       	pop	r11
    25f2:	af 90       	pop	r10
    25f4:	08 95       	ret

000025f6 <recordCoreStats(bool, FullStatsMessageCore const*)>:
#endif

// Record core incoming stats; ID must be set as a minimum.
// Is thread/ISR-safe and fast.
// May be backed by a finite-depth queue, even zero-length (ie discarding); usually holds just one item.
void recordCoreStats(const bool secure, const FullStatsMessageCore_t * const stats)
    25f6:	fb 01       	movw	r30, r22
  {
#if 0 && defined(DEBUG)
  if(NULL == payload) { panic(); }
#endif  // TODO
   if(!stats->containsID) { return; } // Ignore if no ID.
    25f8:	80 81       	ld	r24, Z
    25fa:	80 ff       	sbrs	r24, 0
    25fc:	17 c0       	rjmp	.+46     	; 0x262c <recordCoreStats(bool, FullStatsMessageCore const*)+0x36>
   ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    25fe:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2600:	f8 94       	cli
    {
    if(coreStats.containsID) { ++inboundStatsQueueOverrun; } // Dropped a frame.
    2602:	80 91 e2 02 	lds	r24, 0x02E2
    2606:	80 ff       	sbrs	r24, 0
    2608:	09 c0       	rjmp	.+18     	; 0x261c <recordCoreStats(bool, FullStatsMessageCore const*)+0x26>
    260a:	80 91 e9 02 	lds	r24, 0x02E9
    260e:	90 91 ea 02 	lds	r25, 0x02EA
    2612:	01 96       	adiw	r24, 0x01	; 1
    2614:	90 93 ea 02 	sts	0x02EA, r25
    2618:	80 93 e9 02 	sts	0x02E9, r24
    memcpy((void *)&coreStats, stats, sizeof(coreStats));
    261c:	a2 ee       	ldi	r26, 0xE2	; 226
    261e:	b2 e0       	ldi	r27, 0x02	; 2
    2620:	87 e0       	ldi	r24, 0x07	; 7
    2622:	01 90       	ld	r0, Z+
    2624:	0d 92       	st	X+, r0
    2626:	81 50       	subi	r24, 0x01	; 1
    2628:	e1 f7       	brne	.-8      	; 0x2622 <recordCoreStats(bool, FullStatsMessageCore const*)+0x2c>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    262a:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    262c:	08 95       	ret

0000262e <extractTrailingMinimalStatsPayload(unsigned char const*, trailingMinimalStatsPayload*)>:
#endif
  }

// Extract payload from valid (3-byte) header+payload+CRC into payload struct; only 2 bytes are actually read.
// Input bytes (eg header and check value) must already have been validated.
void extractTrailingMinimalStatsPayload(const uint8_t *const buf, trailingMinimalStatsPayload_t *const payload)
    262e:	0f 93       	push	r16
    2630:	1f 93       	push	r17
    2632:	cf 93       	push	r28
    2634:	df 93       	push	r29
    2636:	ec 01       	movw	r28, r24
    2638:	8b 01       	movw	r16, r22
  {
#ifdef DEBUG
  if(NULL == payload) { panic(); }
    263a:	61 15       	cp	r22, r1
    263c:	71 05       	cpc	r23, r1
    263e:	11 f4       	brne	.+4      	; 0x2644 <extractTrailingMinimalStatsPayload(unsigned char const*, trailingMinimalStatsPayload*)+0x16>
    2640:	0e 94 c8 2e 	call	0x5d90	; 0x5d90 <panic()>
#endif
  payload->powerLow = (0 != (buf[0] & 0x10));
    2644:	88 81       	ld	r24, Y
    2646:	88 0f       	add	r24, r24
    2648:	88 0f       	add	r24, r24
    264a:	88 0f       	add	r24, r24
    264c:	80 78       	andi	r24, 0x80	; 128
    264e:	f8 01       	movw	r30, r16
    2650:	41 81       	ldd	r20, Z+1	; 0x01
    2652:	4f 77       	andi	r20, 0x7F	; 127
    2654:	48 2b       	or	r20, r24
    2656:	41 83       	std	Z+1, r20	; 0x01
  payload->tempC16 = ((((int16_t) buf[1]) << 4) | (buf[0] & 0xf)) + MESSAGING_TRAILING_MINIMAL_STATS_TEMP_BIAS;
    2658:	29 81       	ldd	r18, Y+1	; 0x01
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	94 e0       	ldi	r25, 0x04	; 4
    265e:	22 0f       	add	r18, r18
    2660:	33 1f       	adc	r19, r19
    2662:	9a 95       	dec	r25
    2664:	e1 f7       	brne	.-8      	; 0x265e <extractTrailingMinimalStatsPayload(unsigned char const*, trailingMinimalStatsPayload*)+0x30>
    2666:	88 81       	ld	r24, Y
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	8f 70       	andi	r24, 0x0F	; 15
    266c:	90 70       	andi	r25, 0x00	; 0
    266e:	28 2b       	or	r18, r24
    2670:	39 2b       	or	r19, r25
    2672:	20 54       	subi	r18, 0x40	; 64
    2674:	31 40       	sbci	r19, 0x01	; 1
    2676:	20 83       	st	Z, r18
    2678:	83 2f       	mov	r24, r19
    267a:	8f 77       	andi	r24, 0x7F	; 127
    267c:	40 78       	andi	r20, 0x80	; 128
    267e:	48 2b       	or	r20, r24
    2680:	41 83       	std	Z+1, r20	; 0x01
  }
    2682:	df 91       	pop	r29
    2684:	cf 91       	pop	r28
    2686:	1f 91       	pop	r17
    2688:	0f 91       	pop	r16
    268a:	08 95       	ret

0000268c <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)>:
// If successful returns pointer to next byte of message, ie just after full stats message decoded.
// Returns null if failed (eg because of corrupt message data) and state of 'content' result is undefined.
// This will avoid copying into the result data (possibly tainted) that has arrived at an inappropriate security level.
//   * content will contain data decoded from the message; must be non-null
const uint8_t *decodeFullStatsMessageCore(const uint8_t * const buf, const uint8_t buflen, const stats_TX_level secLevel, const bool secureChannel,
    FullStatsMessageCore_t * const content)
    268c:	ef 92       	push	r14
    268e:	ff 92       	push	r15
    2690:	0f 93       	push	r16
    2692:	1f 93       	push	r17
    2694:	cf 93       	push	r28
    2696:	df 93       	push	r29
    2698:	7c 01       	movw	r14, r24
  {
  if(NULL == buf) { return(NULL); } // Could be an assert/panic instead at a pinch.
    269a:	00 97       	sbiw	r24, 0x00	; 0
    269c:	09 f4       	brne	.+2      	; 0x26a0 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x14>
    269e:	8f c0       	rjmp	.+286    	; 0x27be <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  if(NULL == content) { return(NULL); } // Could be an assert/panic instead at a pinch.
    26a0:	01 15       	cp	r16, r1
    26a2:	11 05       	cpc	r17, r1
    26a4:	09 f4       	brne	.+2      	; 0x26a8 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x1c>
    26a6:	8b c0       	rjmp	.+278    	; 0x27be <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  if(buflen < FullStatsMessageCore_MIN_BYTES_ON_WIRE)
    26a8:	63 30       	cpi	r22, 0x03	; 3
    26aa:	08 f4       	brcc	.+2      	; 0x26ae <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x22>
    26ac:	88 c0       	rjmp	.+272    	; 0x27be <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
#define FullStatsMessageCore_MAX_BYTES_ON_WIRE 8
// Minimum size on wire including trailing CRC of core of FullStatsMessage.  TX message buffer should be one larger for trailing 0xff.
#define FullStatsMessageCore_MIN_BYTES_ON_WIRE 3

// Clear a FullStatsMessageCore_t, also indicating no optional fields present.
static inline void clearFullStatsMessageCore(FullStatsMessageCore_t *const p) { memset(p, 0, sizeof(FullStatsMessageCore_t)); }
    26ae:	87 e0       	ldi	r24, 0x07	; 7
    26b0:	f8 01       	movw	r30, r16
    26b2:	11 92       	st	Z+, r1
    26b4:	8a 95       	dec	r24
    26b6:	e9 f7       	brne	.-6      	; 0x26b2 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x26>
//#define MESSAGING_FULL_STATS_HEADER_MSBS 0x70
//#define MESSAGING_FULL_STATS_HEADER_MASK 0xf0
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_PRESENT 4
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_HIGH 2
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_SECURE 1
  if(MESSAGING_FULL_STATS_HEADER_MSBS != (header & MESSAGING_FULL_STATS_HEADER_MASK)) { return(NULL); } // Bad header.
    26b8:	f7 01       	movw	r30, r14
    26ba:	80 81       	ld	r24, Z
    26bc:	28 2f       	mov	r18, r24
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	c9 01       	movw	r24, r18
    26c2:	80 7f       	andi	r24, 0xF0	; 240
    26c4:	90 70       	andi	r25, 0x00	; 0
    26c6:	80 37       	cpi	r24, 0x70	; 112
    26c8:	91 05       	cpc	r25, r1
    26ca:	09 f0       	breq	.+2      	; 0x26ce <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x42>
    26cc:	78 c0       	rjmp	.+240    	; 0x27be <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  if(0 != (header & MESSAGING_FULL_STATS_HEADER_BITS_ID_SECURE)) { return(NULL); } // TODO: cannot do secure messages yet.
    26ce:	20 fd       	sbrc	r18, 0
    26d0:	76 c0       	rjmp	.+236    	; 0x27be <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  // READ THE MESSAGE!
  // Pointer to next byte to read in message.
  register const uint8_t *b = buf;

  // Validate the message header and start to fill in structure.
  const uint8_t header = *b++;
    26d2:	e7 01       	movw	r28, r14
    26d4:	21 96       	adiw	r28, 0x01	; 1
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_SECURE 1
  if(MESSAGING_FULL_STATS_HEADER_MSBS != (header & MESSAGING_FULL_STATS_HEADER_MASK)) { return(NULL); } // Bad header.
  if(0 != (header & MESSAGING_FULL_STATS_HEADER_BITS_ID_SECURE)) { return(NULL); } // TODO: cannot do secure messages yet.
  // Extract ID if present.
  const bool containsID = (0 != (header & MESSAGING_FULL_STATS_HEADER_BITS_ID_PRESENT));
  if(containsID)
    26d6:	22 ff       	sbrs	r18, 2
    26d8:	12 c0       	rjmp	.+36     	; 0x26fe <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x72>
    {
    content->containsID = true;
    26da:	f8 01       	movw	r30, r16
    26dc:	80 81       	ld	r24, Z
    26de:	81 60       	ori	r24, 0x01	; 1
    26e0:	80 83       	st	Z, r24
    const uint8_t idHigh = ((0 != (header & MESSAGING_FULL_STATS_HEADER_BITS_ID_HIGH)) ? 0x80 : 0);
    26e2:	21 fd       	sbrc	r18, 1
    26e4:	02 c0       	rjmp	.+4      	; 0x26ea <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x5e>
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	01 c0       	rjmp	.+2      	; 0x26ec <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x60>
    26ea:	90 e8       	ldi	r25, 0x80	; 128
    content->id0 = *b++ | idHigh;
    26ec:	f7 01       	movw	r30, r14
    26ee:	81 81       	ldd	r24, Z+1	; 0x01
    26f0:	89 2b       	or	r24, r25
    26f2:	f8 01       	movw	r30, r16
    26f4:	81 83       	std	Z+1, r24	; 0x01
    content->id1 = *b++ | idHigh;
    26f6:	89 81       	ldd	r24, Y+1	; 0x01
    26f8:	98 2b       	or	r25, r24
    26fa:	92 83       	std	Z+2, r25	; 0x02
    26fc:	22 96       	adiw	r28, 0x02	; 2
    }

  // If next header is temp/power then extract it, else must be the flags header.
  if(MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MSBS == (*b & MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MASK))
    26fe:	88 81       	ld	r24, Y
    2700:	80 7e       	andi	r24, 0xE0	; 224
    2702:	80 34       	cpi	r24, 0x40	; 64
    2704:	71 f4       	brne	.+28     	; 0x2722 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x96>
    {
    if(0 != (0x80 & b[1])) { return(NULL); } // Following byte does not have msb correctly cleared.
    2706:	89 81       	ldd	r24, Y+1	; 0x01
    2708:	87 fd       	sbrc	r24, 7
    270a:	59 c0       	rjmp	.+178    	; 0x27be <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
    extractTrailingMinimalStatsPayload(b, &(content->tempAndPower));
    270c:	b8 01       	movw	r22, r16
    270e:	6d 5f       	subi	r22, 0xFD	; 253
    2710:	7f 4f       	sbci	r23, 0xFF	; 255
    2712:	ce 01       	movw	r24, r28
    2714:	0e 94 17 13 	call	0x262e	; 0x262e <extractTrailingMinimalStatsPayload(unsigned char const*, trailingMinimalStatsPayload*)>
    b += 2;
    2718:	22 96       	adiw	r28, 0x02	; 2
    content->containsTempAndPower = true;
    271a:	f8 01       	movw	r30, r16
    271c:	80 81       	ld	r24, Z
    271e:	82 60       	ori	r24, 0x02	; 2
    2720:	80 83       	st	Z, r24
    }

  // If next header is flags then extract it.
  // FIXME: risk of misinterpretting CRC.
  if(MESSAGING_FULL_STATS_FLAGS_HEADER_MSBS != (*b & MESSAGING_FULL_STATS_FLAGS_HEADER_MASK)) { return(NULL); } // Corrupt message.
    2722:	28 81       	ld	r18, Y
    2724:	42 2f       	mov	r20, r18
    2726:	50 e0       	ldi	r21, 0x00	; 0
    2728:	ca 01       	movw	r24, r20
    272a:	80 7e       	andi	r24, 0xE0	; 224
    272c:	90 70       	andi	r25, 0x00	; 0
    272e:	80 36       	cpi	r24, 0x60	; 96
    2730:	91 05       	cpc	r25, r1
    2732:	09 f0       	breq	.+2      	; 0x2736 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0xaa>
    2734:	44 c0       	rjmp	.+136    	; 0x27be <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  const uint8_t flagsHeader = *b++;
    2736:	de 01       	movw	r26, r28
    2738:	11 96       	adiw	r26, 0x01	; 1
  content->occ = flagsHeader & 3;
    273a:	23 70       	andi	r18, 0x03	; 3
    273c:	f8 01       	movw	r30, r16
    273e:	86 81       	ldd	r24, Z+6	; 0x06
    2740:	8c 7f       	andi	r24, 0xFC	; 252
    2742:	82 2b       	or	r24, r18
    2744:	86 83       	std	Z+6, r24	; 0x06
  const bool containsAmbL = (0 != (flagsHeader & MESSAGING_FULL_STATS_FLAGS_HEADER_AMBL));
  if(containsAmbL)
    2746:	43 ff       	sbrs	r20, 3
    2748:	0a c0       	rjmp	.+20     	; 0x275e <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0xd2>
    {
    const uint8_t ambL = *b++;
    274a:	99 81       	ldd	r25, Y+1	; 0x01
    if((0 == ambL) || (ambL == (uint8_t)0xff)) { return(NULL); } // Illegal value.
    274c:	89 2f       	mov	r24, r25
    274e:	81 50       	subi	r24, 0x01	; 1
    2750:	8e 3f       	cpi	r24, 0xFE	; 254
    2752:	a8 f5       	brcc	.+106    	; 0x27be <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  const uint8_t flagsHeader = *b++;
  content->occ = flagsHeader & 3;
  const bool containsAmbL = (0 != (flagsHeader & MESSAGING_FULL_STATS_FLAGS_HEADER_AMBL));
  if(containsAmbL)
    {
    const uint8_t ambL = *b++;
    2754:	11 96       	adiw	r26, 0x01	; 1
    if((0 == ambL) || (ambL == (uint8_t)0xff)) { return(NULL); } // Illegal value.
    content->ambL = ambL;
    2756:	95 83       	std	Z+5, r25	; 0x05
    content->containsAmbL = true;
    2758:	80 81       	ld	r24, Z
    275a:	84 60       	ori	r24, 0x04	; 4
    275c:	80 83       	st	Z, r24
    275e:	f7 01       	movw	r30, r14
    2760:	3f e7       	ldi	r19, 0x7F	; 127
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    2762:	11 e0       	ldi	r17, 0x01	; 1
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
    2764:	77 e3       	ldi	r23, 0x37	; 55
    2766:	21 c0       	rjmp	.+66     	; 0x27aa <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x11e>
    }

  // Finish off by computing and checking the CRC (and return pointer to just after CRC).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    2768:	80 81       	ld	r24, Z
    276a:	60 e8       	ldi	r22, 0x80	; 128
    276c:	40 e0       	ldi	r20, 0x00	; 0
    276e:	50 e0       	ldi	r21, 0x00	; 0
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    2770:	c8 2f       	mov	r28, r24
    2772:	d0 e0       	ldi	r29, 0x00	; 0
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
    2774:	83 2f       	mov	r24, r19
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	26 e0       	ldi	r18, 0x06	; 6
    277a:	96 95       	lsr	r25
    277c:	87 95       	ror	r24
    277e:	2a 95       	dec	r18
    2780:	e1 f7       	brne	.-8      	; 0x277a <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0xee>
    2782:	28 2f       	mov	r18, r24
    2784:	21 70       	andi	r18, 0x01	; 1
        if(0 != (datum & i)) { bit = !bit; }
    2786:	86 2f       	mov	r24, r22
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	8c 23       	and	r24, r28
    278c:	9d 23       	and	r25, r29
    278e:	89 2b       	or	r24, r25
    2790:	09 f0       	breq	.+2      	; 0x2794 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x108>
    2792:	21 27       	eor	r18, r17
        crc <<= 1;
    2794:	33 0f       	add	r19, r19
        if(bit) { crc ^= 0x37; }
    2796:	21 11       	cpse	r18, r1
    2798:	37 27       	eor	r19, r23
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
    279a:	66 95       	lsr	r22
    279c:	4f 5f       	subi	r20, 0xFF	; 255
    279e:	5f 4f       	sbci	r21, 0xFF	; 255
    27a0:	48 30       	cpi	r20, 0x08	; 8
    27a2:	51 05       	cpc	r21, r1
    27a4:	39 f7       	brne	.-50     	; 0x2774 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0xe8>
    }

  // Finish off by computing and checking the CRC (and return pointer to just after CRC).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    27a6:	31 96       	adiw	r30, 0x01	; 1
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
        }
    return(crc & 0x7f);
    27a8:	3f 77       	andi	r19, 0x7F	; 127
    }

  // Finish off by computing and checking the CRC (and return pointer to just after CRC).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    27aa:	ea 17       	cp	r30, r26
    27ac:	fb 07       	cpc	r31, r27
    27ae:	e0 f2       	brcs	.-72     	; 0x2768 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0xdc>
  if(crc != *b++) { return(NULL); } // Bad CRC.
    27b0:	8c 91       	ld	r24, X
    27b2:	38 17       	cp	r19, r24
    27b4:	21 f4       	brne	.+8      	; 0x27be <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
    27b6:	9d 01       	movw	r18, r26
    27b8:	2f 5f       	subi	r18, 0xFF	; 255
    27ba:	3f 4f       	sbci	r19, 0xFF	; 255
    27bc:	02 c0       	rjmp	.+4      	; 0x27c2 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x136>

  return(b); // Point to just after CRC.
    27be:	20 e0       	ldi	r18, 0x00	; 0
    27c0:	30 e0       	ldi	r19, 0x00	; 0
  }
    27c2:	c9 01       	movw	r24, r18
    27c4:	df 91       	pop	r29
    27c6:	cf 91       	pop	r28
    27c8:	1f 91       	pop	r17
    27ca:	0f 91       	pop	r16
    27cc:	ff 90       	pop	r15
    27ce:	ef 90       	pop	r14
    27d0:	08 95       	ret

000027d2 <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)>:
  }

// Store minimal stats payload into (2-byte) buffer from payload struct (without CRC); values are coerced to fit as necessary..
//   * payload  must be non-null
// Used for minimal and full packet forms,
void writeTrailingMinimalStatsPayloadBody(uint8_t *buf, const trailingMinimalStatsPayload_t *payload)
    27d2:	0f 93       	push	r16
    27d4:	1f 93       	push	r17
    27d6:	cf 93       	push	r28
    27d8:	df 93       	push	r29
    27da:	8c 01       	movw	r16, r24
    27dc:	eb 01       	movw	r28, r22
  {
#ifdef DEBUG
  if(NULL == payload) { panic(); }
    27de:	61 15       	cp	r22, r1
    27e0:	71 05       	cpc	r23, r1
    27e2:	11 f4       	brne	.+4      	; 0x27e8 <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x16>
    27e4:	0e 94 c8 2e 	call	0x5d90	; 0x5d90 <panic()>
  DEBUG_SERIAL_PRINTFMT(minTempRepresentable, DEC);
  DEBUG_SERIAL_PRINT_FLASHSTRING(" max=");
  DEBUG_SERIAL_PRINTFMT(maxTempRepresentable, DEC);
  DEBUG_SERIAL_PRINTLN();
#endif
  int16_t temp16Cbiased = payload->tempC16;
    27e8:	88 81       	ld	r24, Y
    27ea:	29 81       	ldd	r18, Y+1	; 0x01
    27ec:	92 2f       	mov	r25, r18
    27ee:	9f 77       	andi	r25, 0x7F	; 127
    27f0:	88 0f       	add	r24, r24
    27f2:	99 1f       	adc	r25, r25
    27f4:	95 95       	asr	r25
    27f6:	87 95       	ror	r24
    27f8:	26 e0       	ldi	r18, 0x06	; 6
    27fa:	80 3c       	cpi	r24, 0xC0	; 192
    27fc:	92 07       	cpc	r25, r18
    27fe:	14 f0       	brlt	.+4      	; 0x2804 <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x32>
    2800:	8f eb       	ldi	r24, 0xBF	; 191
    2802:	96 e0       	ldi	r25, 0x06	; 6
    2804:	ee ef       	ldi	r30, 0xFE	; 254
    2806:	80 3c       	cpi	r24, 0xC0	; 192
    2808:	9e 07       	cpc	r25, r30
    280a:	14 f4       	brge	.+4      	; 0x2810 <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x3e>
    280c:	80 ec       	ldi	r24, 0xC0	; 192
    280e:	9e ef       	ldi	r25, 0xFE	; 254
  if(temp16Cbiased < minTempRepresentable) { temp16Cbiased = minTempRepresentable; }
  else if(temp16Cbiased > maxTempRepresentable) { temp16Cbiased = maxTempRepresentable; }
  temp16Cbiased -= MESSAGING_TRAILING_MINIMAL_STATS_TEMP_BIAS; // Should now be strictly positive.
    2810:	9c 01       	movw	r18, r24
    2812:	20 5c       	subi	r18, 0xC0	; 192
    2814:	3e 4f       	sbci	r19, 0xFE	; 254
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("temp16Cbiased: ");
  DEBUG_SERIAL_PRINTFMT(temp16Cbiased, DEC);
  DEBUG_SERIAL_PRINTLN();
#endif
  const uint8_t byte0 = MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MSBS | (payload->powerLow ? 0x10 : 0) | (temp16Cbiased & 0xf);
    2816:	89 81       	ldd	r24, Y+1	; 0x01
    2818:	87 fd       	sbrc	r24, 7
    281a:	02 c0       	rjmp	.+4      	; 0x2820 <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x4e>
    281c:	90 e4       	ldi	r25, 0x40	; 64
    281e:	01 c0       	rjmp	.+2      	; 0x2822 <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x50>
    2820:	90 e5       	ldi	r25, 0x50	; 80
  const uint8_t byte1 = (uint8_t) (temp16Cbiased >> 4);
  buf[0] = byte0;
    2822:	82 2f       	mov	r24, r18
    2824:	8f 70       	andi	r24, 0x0F	; 15
    2826:	98 2b       	or	r25, r24
    2828:	f8 01       	movw	r30, r16
    282a:	90 83       	st	Z, r25
  buf[1] = byte1;
    282c:	44 e0       	ldi	r20, 0x04	; 4
    282e:	35 95       	asr	r19
    2830:	27 95       	ror	r18
    2832:	4a 95       	dec	r20
    2834:	e1 f7       	brne	.-8      	; 0x282e <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x5c>
    2836:	21 83       	std	Z+1, r18	; 0x01
#if 0 && defined(DEBUG)
  for(uint8_t i = 0; i < 2; ++i) { if(0 != (buf[i] & 0x80)) { panic(); } } // MSBits should be clear.
#endif
  }
    2838:	df 91       	pop	r29
    283a:	cf 91       	pop	r28
    283c:	1f 91       	pop	r17
    283e:	0f 91       	pop	r16
    2840:	08 95       	ret

00002842 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)>:
// Note that up to 7 bytes of payload is optimal for the CRC used.
// If successful, returns pointer to terminating 0xff at end of message.
// Returns null if failed (eg because of bad inputs or insufficient buffer space);
// part of the message may have have been written in this case and in particular the previous terminating 0xff may have been overwritten.
uint8_t *encodeFullStatsMessageCore(uint8_t * const buf, const uint8_t buflen, const stats_TX_level secLevel, const bool secureChannel,
    const FullStatsMessageCore_t * const content)
    2842:	cf 92       	push	r12
    2844:	df 92       	push	r13
    2846:	ef 92       	push	r14
    2848:	ff 92       	push	r15
    284a:	0f 93       	push	r16
    284c:	1f 93       	push	r17
    284e:	cf 93       	push	r28
    2850:	df 93       	push	r29
    2852:	7c 01       	movw	r14, r24
    2854:	6a 01       	movw	r12, r20
  {
  if(NULL == buf) { return(NULL); } // Could be an assert/panic instead at a pinch.
    2856:	00 97       	sbiw	r24, 0x00	; 0
    2858:	09 f4       	brne	.+2      	; 0x285c <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x1a>
    285a:	ad c0       	rjmp	.+346    	; 0x29b6 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x174>
  if(NULL == content) { return(NULL); } // Could be an assert/panic instead at a pinch.
    285c:	01 15       	cp	r16, r1
    285e:	11 05       	cpc	r17, r1
    2860:	09 f4       	brne	.+2      	; 0x2864 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x22>
    2862:	a9 c0       	rjmp	.+338    	; 0x29b6 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x174>
  if(secureChannel) { return(NULL); } // TODO: cannot create secure message yet.
    2864:	22 23       	and	r18, r18
    2866:	09 f0       	breq	.+2      	; 0x286a <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x28>
    2868:	a6 c0       	rjmp	.+332    	; 0x29b6 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x174>
  const uint8_t payloadLength =
      1 + // Initial header.
      (content->containsID ? 2 : 0) +
      (content->containsTempAndPower ? 2 : 0) +
      1 + // Flags header.
      (content->containsAmbL ? 1 : 0);
    286a:	f8 01       	movw	r30, r16
    286c:	80 81       	ld	r24, Z
    286e:	58 2f       	mov	r21, r24
    2870:	51 70       	andi	r21, 0x01	; 1
    2872:	80 fd       	sbrc	r24, 0
    2874:	02 c0       	rjmp	.+4      	; 0x287a <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x38>
    2876:	21 e0       	ldi	r18, 0x01	; 1
    2878:	01 c0       	rjmp	.+2      	; 0x287c <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x3a>
    287a:	23 e0       	ldi	r18, 0x03	; 3
    287c:	f8 01       	movw	r30, r16
    287e:	80 81       	ld	r24, Z
    2880:	81 fd       	sbrc	r24, 1
    2882:	02 c0       	rjmp	.+4      	; 0x2888 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x46>
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	01 c0       	rjmp	.+2      	; 0x288a <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x48>
    2888:	92 e0       	ldi	r25, 0x02	; 2
    288a:	f8 01       	movw	r30, r16
    288c:	40 81       	ld	r20, Z
    288e:	46 95       	lsr	r20
    2890:	46 95       	lsr	r20
    2892:	41 70       	andi	r20, 0x01	; 1
  if(buflen < payloadLength + 2)  { return(NULL); }
    2894:	84 2f       	mov	r24, r20
    2896:	8f 5f       	subi	r24, 0xFF	; 255
    2898:	82 0f       	add	r24, r18
    289a:	89 0f       	add	r24, r25
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	01 96       	adiw	r24, 0x01	; 1
    28a0:	26 2f       	mov	r18, r22
    28a2:	30 e0       	ldi	r19, 0x00	; 0
    28a4:	82 17       	cp	r24, r18
    28a6:	93 07       	cpc	r25, r19
    28a8:	0c f0       	brlt	.+2      	; 0x28ac <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x6a>
    28aa:	85 c0       	rjmp	.+266    	; 0x29b6 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x174>

  // Validate some more detail.
  // ID
  if(content->containsID)
    28ac:	55 23       	and	r21, r21
    28ae:	59 f0       	breq	.+22     	; 0x28c6 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x84>
    {
    if((content->id0 == (uint8_t)0xff) || (content->id1 == (uint8_t)0xff)) { return(NULL); } // ID bytes cannot be 0xff.
    28b0:	91 81       	ldd	r25, Z+1	; 0x01
    28b2:	9f 3f       	cpi	r25, 0xFF	; 255
    28b4:	09 f4       	brne	.+2      	; 0x28b8 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x76>
    28b6:	7f c0       	rjmp	.+254    	; 0x29b6 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x174>
    28b8:	82 81       	ldd	r24, Z+2	; 0x02
    28ba:	8f 3f       	cpi	r24, 0xFF	; 255
    28bc:	09 f4       	brne	.+2      	; 0x28c0 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x7e>
    28be:	7b c0       	rjmp	.+246    	; 0x29b6 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x174>
    if((content->id0 & 0x80) != (content->id1 & 0x80)) { return(NULL); } // ID top bits don't match.
    28c0:	89 27       	eor	r24, r25
    28c2:	87 fd       	sbrc	r24, 7
    28c4:	78 c0       	rjmp	.+240    	; 0x29b6 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x174>
    }
  // Ambient light.
  if(content->containsAmbL)
    28c6:	44 23       	and	r20, r20
    28c8:	31 f0       	breq	.+12     	; 0x28d6 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x94>
    {
    if((content->ambL == 0) || (content->ambL == (uint8_t)0xff)) { return(NULL); } // Forbidden values.
    28ca:	f8 01       	movw	r30, r16
    28cc:	85 81       	ldd	r24, Z+5	; 0x05
    28ce:	81 50       	subi	r24, 0x01	; 1
    28d0:	8e 3f       	cpi	r24, 0xFE	; 254
    28d2:	08 f0       	brcs	.+2      	; 0x28d6 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x94>
    28d4:	70 c0       	rjmp	.+224    	; 0x29b6 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x174>
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_HIGH 2
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_SECURE 1
  const uint8_t header = MESSAGING_FULL_STATS_HEADER_MSBS |
      (content->containsID ? MESSAGING_FULL_STATS_HEADER_BITS_ID_PRESENT : 0) |
      ((content->containsID && (0 != (content->id0 & 0x80))) ? MESSAGING_FULL_STATS_HEADER_BITS_ID_HIGH : 0) |
      0; // TODO: cannot do secure messages yet.
    28d6:	55 23       	and	r21, r21
    28d8:	11 f4       	brne	.+4      	; 0x28de <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x9c>
    28da:	80 e7       	ldi	r24, 0x70	; 112
    28dc:	08 c0       	rjmp	.+16     	; 0x28ee <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xac>
    28de:	f8 01       	movw	r30, r16
    28e0:	81 81       	ldd	r24, Z+1	; 0x01
    28e2:	87 ff       	sbrs	r24, 7
    28e4:	03 c0       	rjmp	.+6      	; 0x28ec <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xaa>
    28e6:	92 e0       	ldi	r25, 0x02	; 2
    28e8:	84 e7       	ldi	r24, 0x74	; 116
    28ea:	02 c0       	rjmp	.+4      	; 0x28f0 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xae>
    28ec:	84 e7       	ldi	r24, 0x74	; 116
    28ee:	90 e0       	ldi	r25, 0x00	; 0
  *b++ = header;
    28f0:	89 2b       	or	r24, r25
    28f2:	e7 01       	movw	r28, r14
    28f4:	89 93       	st	Y+, r24
 
  // Insert ID if requested.
  if(content->containsID)
    28f6:	f8 01       	movw	r30, r16
    28f8:	80 81       	ld	r24, Z
    28fa:	80 ff       	sbrs	r24, 0
    28fc:	09 c0       	rjmp	.+18     	; 0x2910 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xce>
    {
    *b++ = content->id0 & 0x7f;
    28fe:	81 81       	ldd	r24, Z+1	; 0x01
    2900:	8f 77       	andi	r24, 0x7F	; 127
    2902:	f7 01       	movw	r30, r14
    2904:	81 83       	std	Z+1, r24	; 0x01
    *b++ = content->id1 & 0x7f;
    2906:	f8 01       	movw	r30, r16
    2908:	82 81       	ldd	r24, Z+2	; 0x02
    290a:	8f 77       	andi	r24, 0x7F	; 127
    290c:	89 83       	std	Y+1, r24	; 0x01
    290e:	22 96       	adiw	r28, 0x02	; 2
    }

  // Insert basic temperature and power status if requested.
  if(content->containsTempAndPower)
    2910:	f8 01       	movw	r30, r16
    2912:	80 81       	ld	r24, Z
    2914:	81 ff       	sbrs	r24, 1
    2916:	07 c0       	rjmp	.+14     	; 0x2926 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xe4>
    {
    writeTrailingMinimalStatsPayloadBody(b, &(content->tempAndPower));
    2918:	b8 01       	movw	r22, r16
    291a:	6d 5f       	subi	r22, 0xFD	; 253
    291c:	7f 4f       	sbci	r23, 0xFF	; 255
    291e:	ce 01       	movw	r24, r28
    2920:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)>
    b += 2;
    2924:	22 96       	adiw	r28, 0x02	; 2
//#define MESSAGING_FULL_STATS_FLAGS_HEADER_AMBL 8
//#define MESSAGING_FULL_STATS_FLAGS_HEADER_RHP 4
  // Omit occupancy data unless encoding for a secure channel or at a very permissive stats TX security level.
  const uint8_t flagsHeader = MESSAGING_FULL_STATS_FLAGS_HEADER_MSBS |
    (content->containsAmbL ? MESSAGING_FULL_STATS_FLAGS_HEADER_AMBL : 0) |
    ((secureChannel || (secLevel <= stTXalwaysAll)) ? (content->occ & 3) : 0);
    2926:	f8 01       	movw	r30, r16
    2928:	80 81       	ld	r24, Z
    292a:	82 fd       	sbrc	r24, 2
    292c:	02 c0       	rjmp	.+4      	; 0x2932 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xf0>
    292e:	90 e6       	ldi	r25, 0x60	; 96
    2930:	01 c0       	rjmp	.+2      	; 0x2934 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xf2>
    2932:	98 e6       	ldi	r25, 0x68	; 104
    2934:	1c 14       	cp	r1, r12
    2936:	1d 04       	cpc	r1, r13
    2938:	14 f4       	brge	.+4      	; 0x293e <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xfc>
    293a:	80 e0       	ldi	r24, 0x00	; 0
    293c:	03 c0       	rjmp	.+6      	; 0x2944 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x102>
    293e:	f8 01       	movw	r30, r16
    2940:	86 81       	ldd	r24, Z+6	; 0x06
    2942:	83 70       	andi	r24, 0x03	; 3
  *b++ = flagsHeader;
    2944:	89 2b       	or	r24, r25
    2946:	de 01       	movw	r26, r28
    2948:	8d 93       	st	X+, r24
  // Now insert extra fields as flagged.
  if(content->containsAmbL)
    294a:	f8 01       	movw	r30, r16
    294c:	80 81       	ld	r24, Z
    294e:	82 ff       	sbrs	r24, 2
    2950:	03 c0       	rjmp	.+6      	; 0x2958 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x116>
    { *b++ = content->ambL; }
    2952:	85 81       	ldd	r24, Z+5	; 0x05
    2954:	89 83       	std	Y+1, r24	; 0x01
    2956:	11 96       	adiw	r26, 0x01	; 1
    2958:	f7 01       	movw	r30, r14
    295a:	3f e7       	ldi	r19, 0x7F	; 127
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    295c:	11 e0       	ldi	r17, 0x01	; 1
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
    295e:	77 e3       	ldi	r23, 0x37	; 55
    2960:	21 c0       	rjmp	.+66     	; 0x29a4 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x162>
  // TODO: RH% etc

  // Finish off message by computing and appending the CRC and then terminating 0xff (and return pointer to 0xff).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    2962:	80 81       	ld	r24, Z
    2964:	60 e8       	ldi	r22, 0x80	; 128
    2966:	40 e0       	ldi	r20, 0x00	; 0
    2968:	50 e0       	ldi	r21, 0x00	; 0
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    296a:	c8 2f       	mov	r28, r24
    296c:	d0 e0       	ldi	r29, 0x00	; 0
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
    296e:	83 2f       	mov	r24, r19
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	06 e0       	ldi	r16, 0x06	; 6
    2974:	96 95       	lsr	r25
    2976:	87 95       	ror	r24
    2978:	0a 95       	dec	r16
    297a:	e1 f7       	brne	.-8      	; 0x2974 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x132>
    297c:	28 2f       	mov	r18, r24
    297e:	21 70       	andi	r18, 0x01	; 1
        if(0 != (datum & i)) { bit = !bit; }
    2980:	86 2f       	mov	r24, r22
    2982:	90 e0       	ldi	r25, 0x00	; 0
    2984:	8c 23       	and	r24, r28
    2986:	9d 23       	and	r25, r29
    2988:	89 2b       	or	r24, r25
    298a:	09 f0       	breq	.+2      	; 0x298e <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x14c>
    298c:	21 27       	eor	r18, r17
        crc <<= 1;
    298e:	33 0f       	add	r19, r19
        if(bit) { crc ^= 0x37; }
    2990:	21 11       	cpse	r18, r1
    2992:	37 27       	eor	r19, r23
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
    2994:	66 95       	lsr	r22
    2996:	4f 5f       	subi	r20, 0xFF	; 255
    2998:	5f 4f       	sbci	r21, 0xFF	; 255
    299a:	48 30       	cpi	r20, 0x08	; 8
    299c:	51 05       	cpc	r21, r1
    299e:	39 f7       	brne	.-50     	; 0x296e <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x12c>
  // TODO: RH% etc

  // Finish off message by computing and appending the CRC and then terminating 0xff (and return pointer to 0xff).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    29a0:	31 96       	adiw	r30, 0x01	; 1
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
        }
    return(crc & 0x7f);
    29a2:	3f 77       	andi	r19, 0x7F	; 127
  // TODO: RH% etc

  // Finish off message by computing and appending the CRC and then terminating 0xff (and return pointer to 0xff).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    29a4:	ea 17       	cp	r30, r26
    29a6:	fb 07       	cpc	r31, r27
    29a8:	e0 f2       	brcs	.-72     	; 0x2962 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x120>
  *b++ = crc;
    29aa:	fd 01       	movw	r30, r26
    29ac:	31 93       	st	Z+, r19
  *b = 0xff;
    29ae:	8f ef       	ldi	r24, 0xFF	; 255
    29b0:	11 96       	adiw	r26, 0x01	; 1
    29b2:	8c 93       	st	X, r24
    29b4:	02 c0       	rjmp	.+4      	; 0x29ba <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x178>
#if 0 && defined(DEBUG)
  if(b - buf != payloadLength + 1) { panic(F("msg gen err")); }
#endif
  return(b);
    29b6:	e0 e0       	ldi	r30, 0x00	; 0
    29b8:	f0 e0       	ldi	r31, 0x00	; 0
  }
    29ba:	cf 01       	movw	r24, r30
    29bc:	df 91       	pop	r29
    29be:	cf 91       	pop	r28
    29c0:	1f 91       	pop	r17
    29c2:	0f 91       	pop	r16
    29c4:	ff 90       	pop	r15
    29c6:	ef 90       	pop	r14
    29c8:	df 90       	pop	r13
    29ca:	cf 90       	pop	r12
    29cc:	08 95       	ret

000029ce <recordJSONStats(bool, char const*)>:
// If secure is true then this message arrived over a secure channel.
// The supplied buffer's content is not altered.
// The supplied JSON should already have been somewhat validated.
// Is thread/ISR-safe and moderately fast (though will require a data copy).
// May be backed by a finite-depth queue, even zero-length (ie discarding); usually holds just one item.
void recordJSONStats(bool secure, const char *json)
    29ce:	1f 93       	push	r17
    29d0:	cf 93       	push	r28
    29d2:	df 93       	push	r29
    29d4:	eb 01       	movw	r28, r22
  {
#if 1 && defined(DEBUG)
  if(NULL == json) { panic(); }
    29d6:	61 15       	cp	r22, r1
    29d8:	71 05       	cpc	r23, r1
    29da:	11 f4       	brne	.+4      	; 0x29e0 <recordJSONStats(bool, char const*)+0x12>
    29dc:	0e 94 c8 2e 	call	0x5d90	; 0x5d90 <panic()>
  if('\0' == *json) { panic(); }
    29e0:	88 81       	ld	r24, Y
    29e2:	88 23       	and	r24, r24
    29e4:	11 f4       	brne	.+4      	; 0x29ea <recordJSONStats(bool, char const*)+0x1c>
    29e6:	0e 94 c8 2e 	call	0x5d90	; 0x5d90 <panic()>
#endif
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    29ea:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    29ec:	f8 94       	cli
    {
    if('\0' != *jsonStats) { ++inboundStatsQueueOverrun; } // Dropped a frame.
    29ee:	80 91 eb 02 	lds	r24, 0x02EB
    29f2:	88 23       	and	r24, r24
    29f4:	49 f0       	breq	.+18     	; 0x2a08 <recordJSONStats(bool, char const*)+0x3a>
    29f6:	80 91 e9 02 	lds	r24, 0x02E9
    29fa:	90 91 ea 02 	lds	r25, 0x02EA
    29fe:	01 96       	adiw	r24, 0x01	; 1
    2a00:	90 93 ea 02 	sts	0x02EA, r25
    2a04:	80 93 e9 02 	sts	0x02E9, r24
    // Atomically overwrite existing buffer with new non-empty stats message.
    strncpy(jsonStats, json, MSG_JSON_MAX_LENGTH+1);
    2a08:	8b ee       	ldi	r24, 0xEB	; 235
    2a0a:	92 e0       	ldi	r25, 0x02	; 2
    2a0c:	be 01       	movw	r22, r28
    2a0e:	48 e3       	ldi	r20, 0x38	; 56
    2a10:	50 e0       	ldi	r21, 0x00	; 0
    2a12:	0e 94 50 04 	call	0x8a0	; 0x8a0 <strncpy>
    // Drop over-length message,
    if('\0' != jsonStats[sizeof(jsonStats) - 1]) { *jsonStats = '\0'; }
    2a16:	80 91 22 03 	lds	r24, 0x0322
    2a1a:	88 23       	and	r24, r24
    2a1c:	11 f0       	breq	.+4      	; 0x2a22 <recordJSONStats(bool, char const*)+0x54>
    2a1e:	10 92 eb 02 	sts	0x02EB, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2a22:	1f bf       	out	0x3f, r17	; 63
    }
  }
    2a24:	df 91       	pop	r29
    2a26:	cf 91       	pop	r28
    2a28:	1f 91       	pop	r17
    2a2a:	08 95       	ret

00002a2c <SupplyVoltageMilliVolts::get() const>:
    virtual uint16_t read();

    // Return last value fetched by read(); undefined before first read()).
    // Fast.
    // NOT thread-safe nor usable within ISRs (Interrupt Service Routines).
    virtual uint16_t get() const { return(mV); }
    2a2c:	fc 01       	movw	r30, r24
    2a2e:	84 81       	ldd	r24, Z+4	; 0x04
    2a30:	95 81       	ldd	r25, Z+5	; 0x05
    2a32:	08 95       	ret

00002a34 <SupplyVoltageMilliVolts::tag() const>:

    // Returns a suggested (JSON) tag/field/key name including units of get(); NULL means no recommended tag.
    // The lifetime of the pointed-to text must be at least that of the Sensor instance.
    virtual const char *tag() const { return("B|mV"); }
    2a34:	88 e0       	ldi	r24, 0x08	; 8
    2a36:	91 e0       	ldi	r25, 0x01	; 1
    2a38:	08 95       	ret

00002a3a <__vector_9>:
  timer2XtalIntSetup();
#endif
  }

#ifdef WAKEUP_32768HZ_XTAL
ISR(TIMER2_OVF_vect)
    2a3a:	1f 92       	push	r1
    2a3c:	0f 92       	push	r0
    2a3e:	0f b6       	in	r0, 0x3f	; 63
    2a40:	0f 92       	push	r0
    2a42:	11 24       	eor	r1, r1
    2a44:	2f 93       	push	r18
    2a46:	8f 93       	push	r24
    2a48:	9f 93       	push	r25
// must not enable interrupts, and must leave interrupt state as was on entry.
// If not being called from an ISR then locking round this call that works with the getXXX() functions should be considered.
static inline void tickSecondISR()
#endif
  {
  register uint_fast8_t sTemp = _secondsLT; // Avoid some redundant memory accesses.
    2a4a:	80 91 31 03 	lds	r24, 0x0331
  sTemp += MAIN_TICK_S;
    2a4e:	8e 5f       	subi	r24, 0xFE	; 254
  if(sTemp > 59)
    2a50:	8c 33       	cpi	r24, 0x3C	; 60
    2a52:	c8 f0       	brcs	.+50     	; 0x2a86 <__vector_9+0x4c>
    {
    sTemp = 0; // Seconds roll.
    register uint_least16_t mTemp = _minutesSinceMidnightLT + 1; // Avoid some redundant memory accesses.
    2a54:	80 91 32 03 	lds	r24, 0x0332
    2a58:	90 91 33 03 	lds	r25, 0x0333
    2a5c:	01 96       	adiw	r24, 0x01	; 1
    if(mTemp > 1439)
    2a5e:	25 e0       	ldi	r18, 0x05	; 5
    2a60:	80 3a       	cpi	r24, 0xA0	; 160
    2a62:	92 07       	cpc	r25, r18
    2a64:	58 f0       	brcs	.+22     	; 0x2a7c <__vector_9+0x42>
      {
      mTemp = 0; // Minutes/hours roll.
      // Increment the day.
      ++_daysSince1999LT; // Don't currently prevent roll.
    2a66:	80 91 34 03 	lds	r24, 0x0334
    2a6a:	90 91 35 03 	lds	r25, 0x0335
    2a6e:	01 96       	adiw	r24, 0x01	; 1
    2a70:	90 93 35 03 	sts	0x0335, r25
    2a74:	80 93 34 03 	sts	0x0334, r24
    2a78:	80 e0       	ldi	r24, 0x00	; 0
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
      }
    _minutesSinceMidnightLT = mTemp;
    2a7c:	90 93 33 03 	sts	0x0333, r25
    2a80:	80 93 32 03 	sts	0x0332, r24
    2a84:	80 e0       	ldi	r24, 0x00	; 0
    }
  _secondsLT = sTemp;
    2a86:	80 93 31 03 	sts	0x0331, r24
#if defined(TWO_S_TICK_RTC_SUPPORT)
  tickDoubleSecondISR();
#else
  tickSecondISR();
#endif
  }
    2a8a:	9f 91       	pop	r25
    2a8c:	8f 91       	pop	r24
    2a8e:	2f 91       	pop	r18
    2a90:	0f 90       	pop	r0
    2a92:	0f be       	out	0x3f, r0	; 63
    2a94:	0f 90       	pop	r0
    2a96:	1f 90       	pop	r1
    2a98:	18 95       	reti

00002a9a <__vector_6>:
// May contain a little entropy concentrated in the least-significant bits, in part from WDT-vs-CPU-clock jitter, especially if not sleeping.
static volatile uint8_t _watchdogFired;

// Catch watchdog timer interrupt to automatically clear WDIE and WDIF.
// This allows use of watchdog for low-power timed sleep.
ISR(WDT_vect)
    2a9a:	1f 92       	push	r1
    2a9c:	0f 92       	push	r0
    2a9e:	0f b6       	in	r0, 0x3f	; 63
    2aa0:	0f 92       	push	r0
    2aa2:	11 24       	eor	r1, r1
    2aa4:	8f 93       	push	r24
    2aa6:	9f 93       	push	r25
    2aa8:	df 93       	push	r29
    2aaa:	cf 93       	push	r28
    2aac:	0f 92       	push	r0
    2aae:	cd b7       	in	r28, 0x3d	; 61
    2ab0:	de b7       	in	r29, 0x3e	; 62
  {
  // WDIE and WDIF are cleared in hardware upon entering this ISR.
  wdt_disable();
    2ab2:	88 e1       	ldi	r24, 0x18	; 24
    2ab4:	0f b6       	in	r0, 0x3f	; 63
    2ab6:	f8 94       	cli
    2ab8:	80 93 60 00 	sts	0x0060, r24
    2abc:	10 92 60 00 	sts	0x0060, r1
    2ac0:	0f be       	out	0x3f, r0	; 63
  // Note: be careful of what is accessed from this ISR.
  // Capture some marginal entropy from the stack position.
  // 
  uint8_t x;
  _watchdogFired = ((uint8_t) 0x80) | ((uint8_t) (int) &x); // Ensure non-zero, retaining any entropy in ls bits.
    2ac2:	ce 01       	movw	r24, r28
    2ac4:	01 96       	adiw	r24, 0x01	; 1
    2ac6:	80 68       	ori	r24, 0x80	; 128
    2ac8:	80 93 2a 03 	sts	0x032A, r24
  }
    2acc:	0f 90       	pop	r0
    2ace:	cf 91       	pop	r28
    2ad0:	df 91       	pop	r29
    2ad2:	9f 91       	pop	r25
    2ad4:	8f 91       	pop	r24
    2ad6:	0f 90       	pop	r0
    2ad8:	0f be       	out	0x3f, r0	; 63
    2ada:	0f 90       	pop	r0
    2adc:	1f 90       	pop	r1
    2ade:	18 95       	reti

00002ae0 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>:
// Note: inlining is prevented so as to avoid migrating anything into the section where the CPU is running slowly.
//
// Note: may be dubious to run CPU clock less than 4x 32768Hz crystal speed,
// eg at 31250Hz for 8MHz RC clock and max prescale.
// Don't access timer 2 regs at low CPU speed, eg in ISRs.
__attribute__ ((noinline)) void sleepLowPowerLoopsMinCPUSpeed(uint16_t loops)
    2ae0:	fc 01       	movw	r30, r24
  {
  const clock_div_t prescale = clock_prescale_get(); // Capture current prescale value.
    2ae2:	80 91 61 00 	lds	r24, 0x0061
  clock_prescale_set(MAX_CPU_PRESCALE); // Reduce clock speed (increase prescale) as far as possible.
    2ae6:	28 e0       	ldi	r18, 0x08	; 8
    2ae8:	30 e0       	ldi	r19, 0x00	; 0
    2aea:	40 e8       	ldi	r20, 0x80	; 128
    2aec:	0f b6       	in	r0, 0x3f	; 63
    2aee:	f8 94       	cli
    2af0:	40 93 61 00 	sts	0x0061, r20
    2af4:	20 93 61 00 	sts	0x0061, r18
    2af8:	0f be       	out	0x3f, r0	; 63
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    2afa:	31 97       	sbiw	r30, 0x01	; 1
    2afc:	f1 f7       	brne	.-4      	; 0x2afa <sleepLowPowerLoopsMinCPUSpeed(unsigned int)+0x1a>
  _delay_loop_2(loops); // Burn cycles...
  clock_prescale_set(prescale); // Restore clock prescale.
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	8f 70       	andi	r24, 0x0F	; 15
    2b02:	90 70       	andi	r25, 0x00	; 0
    2b04:	20 e8       	ldi	r18, 0x80	; 128
    2b06:	0f b6       	in	r0, 0x3f	; 63
    2b08:	f8 94       	cli
    2b0a:	20 93 61 00 	sts	0x0061, r18
    2b0e:	80 93 61 00 	sts	0x0061, r24
    2b12:	0f be       	out	0x3f, r0	; 63
  }
    2b14:	08 95       	ret

00002b16 <nap(signed char)>:
//   * watchdogSleep is one of the WDTO_XX values from <avr/wdt.h>
// May be useful to call minimsePowerWithoutSleep() first, when not needing any modules left on.
void nap(int_fast8_t watchdogSleep)
  {
  // Watchdog should (already) be disabled on entry.
  _watchdogFired = 0;
    2b16:	10 92 2a 03 	sts	0x032A, r1

  wdt_enable(watchdogSleep);
    2b1a:	83 fd       	sbrc	r24, 3
    2b1c:	02 c0       	rjmp	.+4      	; 0x2b22 <nap(signed char)+0xc>
    2b1e:	28 e0       	ldi	r18, 0x08	; 8
    2b20:	01 c0       	rjmp	.+2      	; 0x2b24 <nap(signed char)+0xe>
    2b22:	28 e2       	ldi	r18, 0x28	; 40
    2b24:	87 70       	andi	r24, 0x07	; 7
    2b26:	28 2b       	or	r18, r24
    2b28:	88 e1       	ldi	r24, 0x18	; 24
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	0f b6       	in	r0, 0x3f	; 63
    2b2e:	f8 94       	cli
    2b30:	a8 95       	wdr
    2b32:	80 93 60 00 	sts	0x0060, r24
    2b36:	0f be       	out	0x3f, r0	; 63
    2b38:	20 93 60 00 	sts	0x0060, r18
  WDTCSR |= (1 << WDIE);
    2b3c:	80 91 60 00 	lds	r24, 0x0060
    2b40:	80 64       	ori	r24, 0x40	; 64
    2b42:	80 93 60 00 	sts	0x0060, r24
#endif

// Sleep with BOD disabled in power-save mode; will wake on any interrupt.
void sleepPwrSaveWithBODDisabled()
  {
  set_sleep_mode(SLEEP_MODE_PWR_SAVE); // Stop all but timer 2 and watchdog when sleeping.
    2b46:	83 b7       	in	r24, 0x33	; 51
    2b48:	81 7f       	andi	r24, 0xF1	; 241
    2b4a:	86 60       	ori	r24, 0x06	; 6
    2b4c:	83 bf       	out	0x33, r24	; 51
  cli();
    2b4e:	f8 94       	cli
  sleep_enable();
    2b50:	83 b7       	in	r24, 0x33	; 51
    2b52:	81 60       	ori	r24, 0x01	; 1
    2b54:	83 bf       	out	0x33, r24	; 51
  sleep_bod_disable();
    2b56:	85 b7       	in	r24, 0x35	; 53
    2b58:	80 66       	ori	r24, 0x60	; 96
    2b5a:	85 bf       	out	0x35, r24	; 53
    2b5c:	8f 7d       	andi	r24, 0xDF	; 223
    2b5e:	85 bf       	out	0x35, r24	; 53
  sei();
    2b60:	78 94       	sei
  sleep_cpu();
    2b62:	88 95       	sleep
  sleep_disable();
    2b64:	83 b7       	in	r24, 0x33	; 51
    2b66:	8e 7f       	andi	r24, 0xFE	; 254
    2b68:	83 bf       	out	0x33, r24	; 51
  sei();
    2b6a:	78 94       	sei

  // Keep sleeping until watchdog actually fires.
  for( ; ; )
    {
    sleepPwrSaveWithBODDisabled();
    if(0 != _watchdogFired)
    2b6c:	80 91 2a 03 	lds	r24, 0x032A
    2b70:	88 23       	and	r24, r24
    2b72:	49 f3       	breq	.-46     	; 0x2b46 <nap(signed char)+0x30>
      {
      wdt_disable(); // Avoid spurious wakeup later.
    2b74:	88 e1       	ldi	r24, 0x18	; 24
    2b76:	0f b6       	in	r0, 0x3f	; 63
    2b78:	f8 94       	cli
    2b7a:	80 93 60 00 	sts	0x0060, r24
    2b7e:	10 92 60 00 	sts	0x0060, r1
    2b82:	0f be       	out	0x3f, r0	; 63
      return; // All done!
      }
    }
 }
    2b84:	08 95       	ret

00002b86 <idleCPU(signed char)>:
// Should reduce power consumption vs spinning the CPU >> 3x, though not nearly as much as nap().
// True iff watchdog timer expired; false if something else woke the CPU.
bool idleCPU(const int_fast8_t watchdogSleep)
  {
  // Watchdog should (already) be disabled on entry.
  _watchdogFired = 0;
    2b86:	10 92 2a 03 	sts	0x032A, r1
  wdt_enable(watchdogSleep);
    2b8a:	83 fd       	sbrc	r24, 3
    2b8c:	02 c0       	rjmp	.+4      	; 0x2b92 <idleCPU(signed char)+0xc>
    2b8e:	28 e0       	ldi	r18, 0x08	; 8
    2b90:	01 c0       	rjmp	.+2      	; 0x2b94 <idleCPU(signed char)+0xe>
    2b92:	28 e2       	ldi	r18, 0x28	; 40
    2b94:	87 70       	andi	r24, 0x07	; 7
    2b96:	28 2b       	or	r18, r24
    2b98:	88 e1       	ldi	r24, 0x18	; 24
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	0f b6       	in	r0, 0x3f	; 63
    2b9e:	f8 94       	cli
    2ba0:	a8 95       	wdr
    2ba2:	80 93 60 00 	sts	0x0060, r24
    2ba6:	0f be       	out	0x3f, r0	; 63
    2ba8:	20 93 60 00 	sts	0x0060, r18
  WDTCSR |= (1 << WDIE);
    2bac:	80 91 60 00 	lds	r24, 0x0060
    2bb0:	80 64       	ori	r24, 0x40	; 64
    2bb2:	80 93 60 00 	sts	0x0060, r24
  set_sleep_mode(SLEEP_MODE_IDLE); // Leave everything running but the CPU...
    2bb6:	83 b7       	in	r24, 0x33	; 51
    2bb8:	81 7f       	andi	r24, 0xF1	; 241
    2bba:	83 bf       	out	0x33, r24	; 51
  sleep_mode();
    2bbc:	83 b7       	in	r24, 0x33	; 51
    2bbe:	81 60       	ori	r24, 0x01	; 1
    2bc0:	83 bf       	out	0x33, r24	; 51
    2bc2:	88 95       	sleep
    2bc4:	83 b7       	in	r24, 0x33	; 51
    2bc6:	8e 7f       	andi	r24, 0xFE	; 254
    2bc8:	83 bf       	out	0x33, r24	; 51
  //sleep_disable();
  wdt_disable();
    2bca:	88 e1       	ldi	r24, 0x18	; 24
    2bcc:	0f b6       	in	r0, 0x3f	; 63
    2bce:	f8 94       	cli
    2bd0:	80 93 60 00 	sts	0x0060, r24
    2bd4:	10 92 60 00 	sts	0x0060, r1
    2bd8:	0f be       	out	0x3f, r0	; 63
  return(0 != _watchdogFired);
    2bda:	80 91 2a 03 	lds	r24, 0x032A
    2bde:	81 11       	cpse	r24, r1
    2be0:	81 e0       	ldi	r24, 0x01	; 1
  }
    2be2:	08 95       	ret

00002be4 <__vector_21>:
  }


// Allow wake from (lower-power) sleep while ADC is running.
static volatile bool ADC_complete;
ISR(ADC_vect) { ADC_complete = true; }
    2be4:	1f 92       	push	r1
    2be6:	0f 92       	push	r0
    2be8:	0f b6       	in	r0, 0x3f	; 63
    2bea:	0f 92       	push	r0
    2bec:	11 24       	eor	r1, r1
    2bee:	8f 93       	push	r24
    2bf0:	81 e0       	ldi	r24, 0x01	; 1
    2bf2:	80 93 2c 03 	sts	0x032C, r24
    2bf6:	8f 91       	pop	r24
    2bf8:	0f 90       	pop	r0
    2bfa:	0f be       	out	0x3f, r0	; 63
    2bfc:	0f 90       	pop	r0
    2bfe:	1f 90       	pop	r1
    2c00:	18 95       	reti

00002c02 <_analogueNoiseReducedReadM(unsigned char, signed char)>:

// Read ADC/analogue input with reduced noise if possible, in range [0,1023].
//   * admux  is the value to set ADMUX to
//   * samples  maximum number of samples to take (if one, nap() before); strictly positive
// Sets sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
static uint16_t _analogueNoiseReducedReadM(uint8_t admux, int8_t samples = 3)
    2c02:	0f 93       	push	r16
    2c04:	1f 93       	push	r17
    2c06:	98 2f       	mov	r25, r24
    2c08:	16 2f       	mov	r17, r22
// If ADC was disabled, power it up, do Serial.begin(), and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownSerial() may be advisable.
bool powerUpADCIfDisabled()
  {
  if(!(PRR & _BV(PRADC))) { return(false); }
    2c0a:	80 91 64 00 	lds	r24, 0x0064
    2c0e:	80 fd       	sbrc	r24, 0
    2c10:	02 c0       	rjmp	.+4      	; 0x2c16 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x14>
    2c12:	00 e0       	ldi	r16, 0x00	; 0
    2c14:	0b c0       	rjmp	.+22     	; 0x2c2c <_analogueNoiseReducedReadM(unsigned char, signed char)+0x2a>
  PRR &= ~_BV(PRADC); // Enable the ADC.
    2c16:	80 91 64 00 	lds	r24, 0x0064
    2c1a:	8e 7f       	andi	r24, 0xFE	; 254
    2c1c:	80 93 64 00 	sts	0x0064, r24
  ADCSRA |= _BV(ADEN);
    2c20:	80 91 7a 00 	lds	r24, 0x007A
    2c24:	80 68       	ori	r24, 0x80	; 128
    2c26:	80 93 7a 00 	sts	0x007A, r24
    2c2a:	01 e0       	ldi	r16, 0x01	; 1
//   * samples  maximum number of samples to take (if one, nap() before); strictly positive
// Sets sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
static uint16_t _analogueNoiseReducedReadM(uint8_t admux, int8_t samples = 3)
  {
  const bool neededEnable = powerUpADCIfDisabled();
  ADMUX = admux;
    2c2c:	90 93 7c 00 	sts	0x007C, r25
  if(samples < 2) { nap(WDTO_15MS); } // Allow plenty of time for things to settle if not taking multiple samples.
    2c30:	12 30       	cpi	r17, 0x02	; 2
    2c32:	1c f4       	brge	.+6      	; 0x2c3a <_analogueNoiseReducedReadM(unsigned char, signed char)+0x38>
    2c34:	80 e0       	ldi	r24, 0x00	; 0
    2c36:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <nap(signed char)>
  set_sleep_mode(SLEEP_MODE_ADC);
    2c3a:	83 b7       	in	r24, 0x33	; 51
    2c3c:	81 7f       	andi	r24, 0xF1	; 241
    2c3e:	82 60       	ori	r24, 0x02	; 2
    2c40:	83 bf       	out	0x33, r24	; 51
  ADCSRB = 0; // Enable free-running mode.
    2c42:	10 92 7b 00 	sts	0x007B, r1
  bitWrite(ADCSRA, ADATE, (samples>1)); // Enable ADC auto-trigger iff wanting multiple samples.
    2c46:	12 30       	cpi	r17, 0x02	; 2
    2c48:	24 f0       	brlt	.+8      	; 0x2c52 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x50>
    2c4a:	80 91 7a 00 	lds	r24, 0x007A
    2c4e:	80 62       	ori	r24, 0x20	; 32
    2c50:	03 c0       	rjmp	.+6      	; 0x2c58 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x56>
    2c52:	80 91 7a 00 	lds	r24, 0x007A
    2c56:	8f 7d       	andi	r24, 0xDF	; 223
    2c58:	80 93 7a 00 	sts	0x007A, r24
  bitSet(ADCSRA, ADIE); // Turn on ADC interrupt.
    2c5c:	80 91 7a 00 	lds	r24, 0x007A
    2c60:	88 60       	ori	r24, 0x08	; 8
    2c62:	80 93 7a 00 	sts	0x007A, r24
  bitSet(ADCSRA, ADSC); // Start conversion(s).
    2c66:	80 91 7a 00 	lds	r24, 0x007A
    2c6a:	80 64       	ori	r24, 0x40	; 64
    2c6c:	80 93 7a 00 	sts	0x007A, r24
    2c70:	4f ef       	ldi	r20, 0xFF	; 255
    2c72:	9f ef       	ldi	r25, 0xFF	; 255
    2c74:	21 c0       	rjmp	.+66     	; 0x2cb8 <_analogueNoiseReducedReadM(unsigned char, signed char)+0xb6>
  uint8_t oldADCL = 0xff;
  uint8_t oldADCH = 0xff; // Ensure that a second sample will get taken if multiple samples have been requested.
  // Usually take several readings to improve accuracy.  Discard all but the last...
  while(--samples >= 0)
      {
      ADC_complete = false;
    2c76:	10 92 2c 03 	sts	0x032C, r1
    2c7a:	07 c0       	rjmp	.+14     	; 0x2c8a <_analogueNoiseReducedReadM(unsigned char, signed char)+0x88>
      while(!ADC_complete) { sleep_mode(); }
    2c7c:	83 b7       	in	r24, 0x33	; 51
    2c7e:	81 60       	ori	r24, 0x01	; 1
    2c80:	83 bf       	out	0x33, r24	; 51
    2c82:	88 95       	sleep
    2c84:	83 b7       	in	r24, 0x33	; 51
    2c86:	8e 7f       	andi	r24, 0xFE	; 254
    2c88:	83 bf       	out	0x33, r24	; 51
    2c8a:	80 91 2c 03 	lds	r24, 0x032C
    2c8e:	88 23       	and	r24, r24
    2c90:	a9 f3       	breq	.-22     	; 0x2c7c <_analogueNoiseReducedReadM(unsigned char, signed char)+0x7a>
      const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
    2c92:	30 91 78 00 	lds	r19, 0x0078
      const uint8_t h = ADCH; // Capture the high byte.
    2c96:	20 91 79 00 	lds	r18, 0x0079
      if((h == oldADCH) && (l == oldADCL)) { break; } // Stop now if result seems to have settled.
    2c9a:	29 17       	cp	r18, r25
    2c9c:	11 f4       	brne	.+4      	; 0x2ca2 <_analogueNoiseReducedReadM(unsigned char, signed char)+0xa0>
    2c9e:	34 17       	cp	r19, r20
    2ca0:	71 f0       	breq	.+28     	; 0x2cbe <_analogueNoiseReducedReadM(unsigned char, signed char)+0xbc>
      oldADCL = l;
      oldADCH = h;
      _adcNoise = (_adcNoise >> 1) + (l ^ h) + (__TIME__[7] & 0xf); // Capture a little entropy.
    2ca2:	90 91 2b 03 	lds	r25, 0x032B
    2ca6:	82 2f       	mov	r24, r18
    2ca8:	83 27       	eor	r24, r19
    2caa:	8d 5f       	subi	r24, 0xFD	; 253
    2cac:	96 95       	lsr	r25
    2cae:	98 0f       	add	r25, r24
    2cb0:	90 93 2b 03 	sts	0x032B, r25
    2cb4:	92 2f       	mov	r25, r18
    2cb6:	43 2f       	mov	r20, r19
  bitSet(ADCSRA, ADIE); // Turn on ADC interrupt.
  bitSet(ADCSRA, ADSC); // Start conversion(s).
  uint8_t oldADCL = 0xff;
  uint8_t oldADCH = 0xff; // Ensure that a second sample will get taken if multiple samples have been requested.
  // Usually take several readings to improve accuracy.  Discard all but the last...
  while(--samples >= 0)
    2cb8:	11 50       	subi	r17, 0x01	; 1
    2cba:	17 ff       	sbrs	r17, 7
    2cbc:	dc cf       	rjmp	.-72     	; 0x2c76 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x74>
      if((h == oldADCH) && (l == oldADCL)) { break; } // Stop now if result seems to have settled.
      oldADCL = l;
      oldADCH = h;
      _adcNoise = (_adcNoise >> 1) + (l ^ h) + (__TIME__[7] & 0xf); // Capture a little entropy.
      }
  bitClear(ADCSRA, ADIE); // Turn off ADC interrupt.
    2cbe:	80 91 7a 00 	lds	r24, 0x007A
    2cc2:	87 7f       	andi	r24, 0xF7	; 247
    2cc4:	80 93 7a 00 	sts	0x007A, r24
  bitClear(ADCSRA, ADATE); // Turn off ADC auto-trigger.
    2cc8:	80 91 7a 00 	lds	r24, 0x007A
    2ccc:	8f 7d       	andi	r24, 0xDF	; 223
    2cce:	80 93 7a 00 	sts	0x007A, r24
  //sleep_disable();
  const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
    2cd2:	20 91 78 00 	lds	r18, 0x0078
  const uint8_t h = ADCH; // Capture the high byte.
    2cd6:	40 91 79 00 	lds	r20, 0x0079
  if(neededEnable) { powerDownADC(); }
    2cda:	00 23       	and	r16, r16
    2cdc:	51 f0       	breq	.+20     	; 0x2cf2 <_analogueNoiseReducedReadM(unsigned char, signed char)+0xf0>
  }
    
// Power ADC down.
void powerDownADC()
  {
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
    2cde:	80 91 7a 00 	lds	r24, 0x007A
    2ce2:	8f 77       	andi	r24, 0x7F	; 127
    2ce4:	80 93 7a 00 	sts	0x007A, r24
  PRR |= _BV(PRADC); // Disable the ADC.
    2ce8:	80 91 64 00 	lds	r24, 0x0064
    2cec:	81 60       	ori	r24, 0x01	; 1
    2cee:	80 93 64 00 	sts	0x0064, r24
    2cf2:	94 2f       	mov	r25, r20
    2cf4:	80 e0       	ldi	r24, 0x00	; 0
    2cf6:	30 e0       	ldi	r19, 0x00	; 0
    2cf8:	28 2b       	or	r18, r24
    2cfa:	39 2b       	or	r19, r25
  //sleep_disable();
  const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
  const uint8_t h = ADCH; // Capture the high byte.
  if(neededEnable) { powerDownADC(); }
  return((h << 8) | l);
  }
    2cfc:	c9 01       	movw	r24, r18
    2cfe:	1f 91       	pop	r17
    2d00:	0f 91       	pop	r16
    2d02:	08 95       	ret

00002d04 <analogueNoiseReducedRead(int, unsigned char)>:
// Read ADC/analogue input with reduced noise if possible, in range [0,1023].
//   * mode  is the analogue reference, eg DEFAULT (Vcc).
// May set sleep mode to SLEEP_MODE_ADC, and disable sleep on exit.
// Nominally equivalent to analogReference(mode); return(analogRead(pinNumber));
uint16_t analogueNoiseReducedRead(int pinNumber, uint8_t mode)
  { return(_analogueNoiseReducedReadM((mode << 6) | (pinNumber & 7))); }
    2d04:	62 95       	swap	r22
    2d06:	66 0f       	add	r22, r22
    2d08:	66 0f       	add	r22, r22
    2d0a:	60 7c       	andi	r22, 0xC0	; 192
    2d0c:	87 70       	andi	r24, 0x07	; 7
    2d0e:	86 2b       	or	r24, r22
    2d10:	63 e0       	ldi	r22, 0x03	; 3
    2d12:	0e 94 01 16 	call	0x2c02	; 0x2c02 <_analogueNoiseReducedReadM(unsigned char, signed char)>
    2d16:	08 95       	ret

00002d18 <SupplyVoltageMilliVolts::read()>:


// Force a read/poll of the supply voltage and return the value sensed.
// Expensive/slow.
// NOT thread-safe nor usable within ISRs (Interrupt Service Routines).
uint16_t SupplyVoltageMilliVolts::read()
    2d18:	cf 93       	push	r28
    2d1a:	df 93       	push	r29
    2d1c:	ec 01       	movw	r28, r24




// Measure internal bandgap (1.1V nominal, 1.0--1.2V) as fraction of Vcc [0,1023].
static uint16_t read1V1wrtBattery() { return(_analogueNoiseReducedReadM(_BV(REFS0) | 14)); }
    2d1e:	8e e4       	ldi	r24, 0x4E	; 78
    2d20:	63 e0       	ldi	r22, 0x03	; 3
    2d22:	0e 94 01 16 	call	0x2c02	; 0x2c02 <_analogueNoiseReducedReadM(unsigned char, signed char)>
    2d26:	9c 01       	movw	r18, r24
  {
  // Measure internal bandgap (1.1V nominal, 1.0--1.2V) as fraction of Vcc.
  const uint16_t raw = read1V1wrtBattery();
  // If Vcc was 1.1V ADC would give 1023.
  // If Vcc was 2.2V ADC would give 511.
  const uint16_t result = ((1023U<<6) / raw) * (1100U>>6);
    2d28:	80 ec       	ldi	r24, 0xC0	; 192
    2d2a:	9f ef       	ldi	r25, 0xFF	; 255
    2d2c:	b9 01       	movw	r22, r18
    2d2e:	0e 94 13 3e 	call	0x7c26	; 0x7c26 <__udivmodhi4>
    2d32:	ab 01       	movw	r20, r22
    2d34:	84 e0       	ldi	r24, 0x04	; 4
    2d36:	44 0f       	add	r20, r20
    2d38:	55 1f       	adc	r21, r21
    2d3a:	8a 95       	dec	r24
    2d3c:	e1 f7       	brne	.-8      	; 0x2d36 <SupplyVoltageMilliVolts::read()+0x1e>
    2d3e:	46 0f       	add	r20, r22
    2d40:	57 1f       	adc	r21, r23
  rawInv = raw;
    2d42:	3b 83       	std	Y+3, r19	; 0x03
    2d44:	2a 83       	std	Y+2, r18	; 0x02
  mV = result;
    2d46:	5d 83       	std	Y+5, r21	; 0x05
    2d48:	4c 83       	std	Y+4, r20	; 0x04
  isLow = (result < BATTERY_LOW_MV);
    2d4a:	1e 82       	std	Y+6, r1	; 0x06
    2d4c:	88 e0       	ldi	r24, 0x08	; 8
    2d4e:	47 39       	cpi	r20, 0x97	; 151
    2d50:	58 07       	cpc	r21, r24
    2d52:	10 f4       	brcc	.+4      	; 0x2d58 <SupplyVoltageMilliVolts::read()+0x40>
    2d54:	81 e0       	ldi	r24, 0x01	; 1
    2d56:	8e 83       	std	Y+6, r24	; 0x06
  DEBUG_SERIAL_PRINT(raw);
  if(batteryLow) { DEBUG_SERIAL_PRINT_FLASHSTRING(" LOW"); }
  DEBUG_SERIAL_PRINTLN();
#endif
  return(result);
  }
    2d58:	ca 01       	movw	r24, r20
    2d5a:	df 91       	pop	r29
    2d5c:	cf 91       	pop	r28
    2d5e:	08 95       	ret

00002d60 <noisyADCRead()>:
// If ADC was disabled, power it up, do Serial.begin(), and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownSerial() may be advisable.
bool powerUpADCIfDisabled()
  {
  if(!(PRR & _BV(PRADC))) { return(false); }
    2d60:	80 91 64 00 	lds	r24, 0x0064
    2d64:	80 fd       	sbrc	r24, 0
    2d66:	02 c0       	rjmp	.+4      	; 0x2d6c <noisyADCRead()+0xc>
    2d68:	40 e0       	ldi	r20, 0x00	; 0
    2d6a:	0b c0       	rjmp	.+22     	; 0x2d82 <noisyADCRead()+0x22>
  PRR &= ~_BV(PRADC); // Enable the ADC.
    2d6c:	80 91 64 00 	lds	r24, 0x0064
    2d70:	8e 7f       	andi	r24, 0xFE	; 254
    2d72:	80 93 64 00 	sts	0x0064, r24
  ADCSRA |= _BV(ADEN);
    2d76:	80 91 7a 00 	lds	r24, 0x007A
    2d7a:	80 68       	ori	r24, 0x80	; 128
    2d7c:	80 93 7a 00 	sts	0x007A, r24
    2d80:	41 e0       	ldi	r20, 0x01	; 1
// If defined, update _adcNoise value to make noisyADCRead() output at least a poor PRNG if called in a loop, though might disguise underlying problems.
//#define CATCH_OTHER_NOISE_DURING_NAR // May hide underlying weakness if defined.
uint8_t noisyADCRead()
  {
  const bool neededEnable = powerUpADCIfDisabled();
  ADMUX = _BV(REFS0) | 14; // Bandgap vs Vcc.
    2d82:	8e e4       	ldi	r24, 0x4E	; 78
    2d84:	80 93 7c 00 	sts	0x007C, r24
  ADCSRB = 0; // Enable free-running mode.
    2d88:	10 92 7b 00 	sts	0x007B, r1
  bitWrite(ADCSRA, ADATE, 1); // Multiple samples required.
    2d8c:	80 91 7a 00 	lds	r24, 0x007A
    2d90:	80 62       	ori	r24, 0x20	; 32
    2d92:	80 93 7a 00 	sts	0x007A, r24
  ADC_complete = false;
    2d96:	10 92 2c 03 	sts	0x032C, r1
  bitSet(ADCSRA, ADIE); // Turn on ADC interrupt.
    2d9a:	80 91 7a 00 	lds	r24, 0x007A
    2d9e:	88 60       	ori	r24, 0x08	; 8
    2da0:	80 93 7a 00 	sts	0x007A, r24
  bitSet(ADCSRA, ADSC); // Start conversion.
    2da4:	80 91 7a 00 	lds	r24, 0x007A
    2da8:	80 64       	ori	r24, 0x40	; 64
    2daa:	80 93 7a 00 	sts	0x007A, r24
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	01 c0       	rjmp	.+2      	; 0x2db4 <noisyADCRead()+0x54>
  uint8_t count = 0;
  while(!ADC_complete) { ++count; } // Busy wait while 'timing' the ADC conversion.
    2db2:	9f 5f       	subi	r25, 0xFF	; 255
    2db4:	80 91 2c 03 	lds	r24, 0x032C
    2db8:	88 23       	and	r24, r24
    2dba:	d9 f3       	breq	.-10     	; 0x2db2 <noisyADCRead()+0x52>
  const uint8_t l1 = ADCL; // Capture the low byte and latch the high byte.
    2dbc:	50 91 78 00 	lds	r21, 0x0078
  const uint8_t h1 = ADCH; // Capture the high byte.
    2dc0:	20 91 79 00 	lds	r18, 0x0079
#if defined(CATCH_OTHER_NOISE_DURING_NAR)
  uint8_t result = _crc_ibutton_update(_adcNoise++, h1 ^ count);
#else
  uint8_t result = (h1 << 5) + count;
    2dc4:	22 95       	swap	r18
    2dc6:	22 0f       	add	r18, r18
    2dc8:	20 7e       	andi	r18, 0xE0	; 224
    2dca:	29 0f       	add	r18, r25
#endif
  set_sleep_mode(SLEEP_MODE_ADC); // Take further samples in more energy-efficient mode.
    2dcc:	83 b7       	in	r24, 0x33	; 51
    2dce:	81 7f       	andi	r24, 0xF1	; 241
    2dd0:	82 60       	ori	r24, 0x02	; 2
    2dd2:	83 bf       	out	0x33, r24	; 51
    2dd4:	30 e0       	ldi	r19, 0x00	; 0
  // Sample all possible ADC inputs relative to Vcc, whatever the inputs may be connected to.
  // Assumed never to do any harm, eg physical damage or to disturb I/O setup.
  for(uint8_t i = 0; i < 8; ++i)
    {
    ADMUX = (i & 7) | (DEFAULT << 6); // Switching MUX after sample has started, which may add further noise.
    2dd6:	83 2f       	mov	r24, r19
    2dd8:	87 70       	andi	r24, 0x07	; 7
    2dda:	80 64       	ori	r24, 0x40	; 64
    2ddc:	80 93 7c 00 	sts	0x007C, r24
    ADC_complete = false;
    2de0:	10 92 2c 03 	sts	0x032C, r1
    2de4:	07 c0       	rjmp	.+14     	; 0x2df4 <noisyADCRead()+0x94>
    while(!ADC_complete)
      {
#if defined(CATCH_OTHER_NOISE_DURING_NAR)       
      result -= 37; /* prime; may capture unrelated interrupt wakeups... */
#endif
      sleep_mode();
    2de6:	83 b7       	in	r24, 0x33	; 51
    2de8:	81 60       	ori	r24, 0x01	; 1
    2dea:	83 bf       	out	0x33, r24	; 51
    2dec:	88 95       	sleep
    2dee:	83 b7       	in	r24, 0x33	; 51
    2df0:	8e 7f       	andi	r24, 0xFE	; 254
    2df2:	83 bf       	out	0x33, r24	; 51
  // Assumed never to do any harm, eg physical damage or to disturb I/O setup.
  for(uint8_t i = 0; i < 8; ++i)
    {
    ADMUX = (i & 7) | (DEFAULT << 6); // Switching MUX after sample has started, which may add further noise.
    ADC_complete = false;
    while(!ADC_complete)
    2df4:	80 91 2c 03 	lds	r24, 0x032C
    2df8:	88 23       	and	r24, r24
    2dfa:	a9 f3       	breq	.-22     	; 0x2de6 <noisyADCRead()+0x86>
#if defined(CATCH_OTHER_NOISE_DURING_NAR)       
      result -= 37; /* prime; may capture unrelated interrupt wakeups... */
#endif
      sleep_mode();
      }
    const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
    2dfc:	90 91 78 00 	lds	r25, 0x0078
    const uint8_t h = ADCH; // Capture the high byte.
    2e00:	80 91 79 00 	lds	r24, 0x0079
		"	brtc	2f" "\n\t"
		"	eor	%0, %2" "\n\t"
		"2:	dec	%1" "\n\t"
		"	brne	1b" "\n\t"
		: "=r" (__crc), "=d" (__i), "=d" (__pattern)
		: "0" (__crc), "r" (__data));
    2e04:	89 27       	eor	r24, r25
    2e06:	28 27       	eor	r18, r24
    2e08:	88 e0       	ldi	r24, 0x08	; 8
    2e0a:	9c e8       	ldi	r25, 0x8C	; 140
    2e0c:	20 fb       	bst	r18, 0
    2e0e:	26 95       	lsr	r18
    2e10:	0e f4       	brtc	.+2      	; 0x2e14 <noisyADCRead()+0xb4>
    2e12:	29 27       	eor	r18, r25
    2e14:	8a 95       	dec	r24
    2e16:	d1 f7       	brne	.-12     	; 0x2e0c <noisyADCRead()+0xac>
  uint8_t result = (h1 << 5) + count;
#endif
  set_sleep_mode(SLEEP_MODE_ADC); // Take further samples in more energy-efficient mode.
  // Sample all possible ADC inputs relative to Vcc, whatever the inputs may be connected to.
  // Assumed never to do any harm, eg physical damage or to disturb I/O setup.
  for(uint8_t i = 0; i < 8; ++i)
    2e18:	3f 5f       	subi	r19, 0xFF	; 255
    2e1a:	38 30       	cpi	r19, 0x08	; 8
    2e1c:	e1 f6       	brne	.-72     	; 0x2dd6 <noisyADCRead()+0x76>
      }
    const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
    const uint8_t h = ADCH; // Capture the high byte.
    result = _crc_ibutton_update(result, l ^ h); // A thorough hash.
    }
  bitClear(ADCSRA, ADIE); // Turn off ADC interrupt.
    2e1e:	80 91 7a 00 	lds	r24, 0x007A
    2e22:	87 7f       	andi	r24, 0xF7	; 247
    2e24:	80 93 7a 00 	sts	0x007A, r24
  bitClear(ADCSRA, ADATE); // Turn off ADC auto-trigger.
    2e28:	80 91 7a 00 	lds	r24, 0x007A
    2e2c:	8f 7d       	andi	r24, 0xDF	; 223
    2e2e:	80 93 7a 00 	sts	0x007A, r24
  if(neededEnable) { powerDownADC(); }
    2e32:	44 23       	and	r20, r20
    2e34:	51 f0       	breq	.+20     	; 0x2e4a <noisyADCRead()+0xea>
  }
    
// Power ADC down.
void powerDownADC()
  {
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
    2e36:	80 91 7a 00 	lds	r24, 0x007A
    2e3a:	8f 77       	andi	r24, 0x7F	; 127
    2e3c:	80 93 7a 00 	sts	0x007A, r24
  PRR |= _BV(PRADC); // Disable the ADC.
    2e40:	80 91 64 00 	lds	r24, 0x0064
    2e44:	81 60       	ori	r24, 0x01	; 1
    2e46:	80 93 64 00 	sts	0x0064, r24
  bitClear(ADCSRA, ADIE); // Turn off ADC interrupt.
  bitClear(ADCSRA, ADATE); // Turn off ADC auto-trigger.
  if(neededEnable) { powerDownADC(); }
  result ^= l1; // Ensure that the actual Vcc raw lsbs do get folded in to the final result.
  return(result); // Use all the bits collected.
  }
    2e4a:	82 2f       	mov	r24, r18
    2e4c:	85 27       	eor	r24, r21
    2e4e:	08 95       	ret

00002e50 <readInternalTemperatureC16()>:
// May set sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
int readInternalTemperatureC16()
  {
  // Measure internal temperature sensor against internal voltage source.
  // Response is ~1mv/C with 0C at ~289mV according to the data sheet.
  const uint16_t raw = _analogueNoiseReducedReadM(_BV(REFS1) | _BV(REFS0) | _BV(MUX3), 1);
    2e50:	88 ec       	ldi	r24, 0xC8	; 200
    2e52:	61 e0       	ldi	r22, 0x01	; 1
    2e54:	0e 94 01 16 	call	0x2c02	; 0x2c02 <_analogueNoiseReducedReadM(unsigned char, signed char)>
    2e58:	84 54       	subi	r24, 0x44	; 68
    2e5a:	91 40       	sbci	r25, 0x01	; 1
    2e5c:	22 ed       	ldi	r18, 0xD2	; 210
    2e5e:	30 e0       	ldi	r19, 0x00	; 0
    2e60:	a9 01       	movw	r20, r18
    2e62:	84 9f       	mul	r24, r20
    2e64:	90 01       	movw	r18, r0
    2e66:	85 9f       	mul	r24, r21
    2e68:	30 0d       	add	r19, r0
    2e6a:	94 9f       	mul	r25, r20
    2e6c:	30 0d       	add	r19, r0
    2e6e:	11 24       	eor	r1, r1
    2e70:	94 e0       	ldi	r25, 0x04	; 4
    2e72:	35 95       	asr	r19
    2e74:	27 95       	ror	r18
    2e76:	9a 95       	dec	r25
    2e78:	e1 f7       	brne	.-8      	; 0x2e72 <readInternalTemperatureC16()+0x22>
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("");
#endif
  //const int degC = (raw - 328) ; // Crude fast adjustment for one sensor at ~20C (DHD20130429).
  const int degC = ((((int)raw) - 324) * 210) >> 4; // Slightly less crude adjustment, see http://playground.arduino.cc//Main/InternalTemperatureSensor
  return(degC);
  }
    2e7a:	c9 01       	movw	r24, r18
    2e7c:	08 95       	ret

00002e7e <powerDownTWI()>:
  }

// Power down TWI (I2C).
void powerDownTWI()
  {
  TWCR &= ~_BV(TWEN); // Disable TWI.
    2e7e:	ec eb       	ldi	r30, 0xBC	; 188
    2e80:	f0 e0       	ldi	r31, 0x00	; 0
    2e82:	80 81       	ld	r24, Z
    2e84:	8b 7f       	andi	r24, 0xFB	; 251
    2e86:	80 83       	st	Z, r24
  PRR |= _BV(PRTWI); // Disable TWI power.
    2e88:	e4 e6       	ldi	r30, 0x64	; 100
    2e8a:	f0 e0       	ldi	r31, 0x00	; 0
    2e8c:	80 81       	ld	r24, Z
    2e8e:	80 68       	ori	r24, 0x80	; 128
    2e90:	80 83       	st	Z, r24
  //digitalWrite(SCL, 0);

  // Convert to hi-Z inputs.
  //pinMode(SDA, INPUT);
  //pinMode(SCL, INPUT);
  }
    2e92:	08 95       	ret

00002e94 <clockJitterWDT()>:
// Expensive in terms of CPU time and thus energy.
// TODO: may be able to reduce clock speed to lower energy cost while still detecting useful jitter.
uint_fast8_t clockJitterWDT()
  {
  // Watchdog should be (already) be disabled on entry.
  _watchdogFired = false;
    2e94:	10 92 2a 03 	sts	0x032A, r1
  wdt_enable(WDTO_15MS); // Set watchdog for minimum time.
    2e98:	88 e0       	ldi	r24, 0x08	; 8
    2e9a:	28 e1       	ldi	r18, 0x18	; 24
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	0f b6       	in	r0, 0x3f	; 63
    2ea0:	f8 94       	cli
    2ea2:	a8 95       	wdr
    2ea4:	20 93 60 00 	sts	0x0060, r18
    2ea8:	0f be       	out	0x3f, r0	; 63
    2eaa:	80 93 60 00 	sts	0x0060, r24
  WDTCSR |= (1 << WDIE);
    2eae:	80 91 60 00 	lds	r24, 0x0060
    2eb2:	80 64       	ori	r24, 0x40	; 64
    2eb4:	80 93 60 00 	sts	0x0060, r24
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	01 c0       	rjmp	.+2      	; 0x2ebe <clockJitterWDT()+0x2a>
  uint_fast8_t count = 0;
  while(!_watchdogFired) { ++count; } // Effectively count CPU cycles until WDT fires.
    2ebc:	9f 5f       	subi	r25, 0xFF	; 255
    2ebe:	80 91 2a 03 	lds	r24, 0x032A
    2ec2:	88 23       	and	r24, r24
    2ec4:	d9 f3       	breq	.-10     	; 0x2ebc <clockJitterWDT()+0x28>
  return(count);
  }
    2ec6:	89 2f       	mov	r24, r25
    2ec8:	08 95       	ret

00002eca <clockJitterRTC()>:
// Expensive in terms of CPU time and thus energy.
// TODO: may be able to reduce clock speed at little to lower energy cost while still detecting useful jitter
//   (but not below 131072kHz since CPU clock must be >= 4x RTC clock to stay on data-sheet and access TCNT2).
uint_fast8_t clockJitterRTC()
  {
  const uint8_t t0 = TCNT2;
    2eca:	90 91 b2 00 	lds	r25, 0x00B2
  while(t0 == TCNT2) { }
    2ece:	80 91 b2 00 	lds	r24, 0x00B2
    2ed2:	98 17       	cp	r25, r24
    2ed4:	e1 f3       	breq	.-8      	; 0x2ece <clockJitterRTC()+0x4>
  uint_fast8_t count = 0;
  const uint8_t t1 = TCNT2;
    2ed6:	20 91 b2 00 	lds	r18, 0x00B2
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	01 c0       	rjmp	.+2      	; 0x2ee0 <clockJitterRTC()+0x16>
  while(t1 == TCNT2) { ++count; } // Effectively count CPU cycles in one RTC sub-cycle tick.
    2ede:	9f 5f       	subi	r25, 0xFF	; 255
    2ee0:	80 91 b2 00 	lds	r24, 0x00B2
    2ee4:	28 17       	cp	r18, r24
    2ee6:	d9 f3       	breq	.-10     	; 0x2ede <clockJitterRTC()+0x14>
  return(count);
  }
    2ee8:	89 2f       	mov	r24, r25
    2eea:	08 95       	ret

00002eec <clockJitterEntropyByte()>:
// Expensive in terms of CPU time and thus energy, though possibly more efficient than basic clockJitterXXX() routines.
// Internally this uses a CRC as a relatively fast and hopefully effective hash over intermediate values.
// Note the that rejection of repeat values will be less effective with two interleaved gathering mechanisms
// as the interaction while not necessarily adding genuine entropy, will make counts differ between runs.
// DHD20130519: measured as taking ~63ms to run, ie ~8ms per bit gathered.
uint_fast8_t clockJitterEntropyByte()
    2eec:	1f 93       	push	r17

  uint_fast8_t result = 0;
  uint_fast8_t countR = 0, lastCountR = 0;
  uint_fast8_t countW = 0, lastCountW = 0;

  const uint8_t t0 = TCNT2; // Wait for sub-cycle timer to roll.
    2eee:	90 91 b2 00 	lds	r25, 0x00B2
    2ef2:	40 e0       	ldi	r20, 0x00	; 0
    2ef4:	50 e0       	ldi	r21, 0x00	; 0
    2ef6:	02 c0       	rjmp	.+4      	; 0x2efc <clockJitterEntropyByte()+0x10>
  while(t0 == TCNT2) { ++hash; } // Possibly capture some entropy from recent program activity/timing.
    2ef8:	4f 5f       	subi	r20, 0xFF	; 255
    2efa:	5f 4f       	sbci	r21, 0xFF	; 255
    2efc:	80 91 b2 00 	lds	r24, 0x00B2
    2f00:	98 17       	cp	r25, r24
    2f02:	d1 f3       	breq	.-12     	; 0x2ef8 <clockJitterEntropyByte()+0xc>
  uint8_t t1 = TCNT2;
    2f04:	f0 91 b2 00 	lds	r31, 0x00B2

  _watchdogFired = 0;
    2f08:	10 92 2a 03 	sts	0x032A, r1
  wdt_enable(WDTO_15MS); // Start watchdog, with minimum timeout.
    2f0c:	88 e0       	ldi	r24, 0x08	; 8
    2f0e:	28 e1       	ldi	r18, 0x18	; 24
    2f10:	30 e0       	ldi	r19, 0x00	; 0
    2f12:	0f b6       	in	r0, 0x3f	; 63
    2f14:	f8 94       	cli
    2f16:	a8 95       	wdr
    2f18:	20 93 60 00 	sts	0x0060, r18
    2f1c:	0f be       	out	0x3f, r0	; 63
    2f1e:	80 93 60 00 	sts	0x0060, r24
  WDTCSR |= (1 << WDIE);
    2f22:	80 91 60 00 	lds	r24, 0x0060
    2f26:	80 64       	ori	r24, 0x40	; 64
    2f28:	80 93 60 00 	sts	0x0060, r24
    2f2c:	90 e0       	ldi	r25, 0x00	; 0
    2f2e:	60 e0       	ldi	r22, 0x00	; 0
    2f30:	e0 e0       	ldi	r30, 0x00	; 0
    2f32:	20 e0       	ldi	r18, 0x00	; 0
    2f34:	70 e0       	ldi	r23, 0x00	; 0
    2f36:	38 e0       	ldi	r19, 0x08	; 8
        if(--bitsLeft <= 0) { break; } // Got enough bits; stop now.
        lastCountW = countW;
        }
      countW = 0;
      _watchdogFired = 0;
      wdt_enable(WDTO_15MS); // Restart watchdog, with minimum timeout.
    2f38:	a8 e1       	ldi	r26, 0x18	; 24
    2f3a:	b0 e0       	ldi	r27, 0x00	; 0
    2f3c:	18 e0       	ldi	r17, 0x08	; 8
  WDTCSR |= (1 << WDIE);
  int_fast8_t bitsLeft = 8; // Decrement when a bit is harvested...
  for( ; ; )
    {
    // Extract watchdog jitter vs CPU.
    if(!_watchdogFired) { ++countW; }
    2f3e:	80 91 2a 03 	lds	r24, 0x032A
    2f42:	88 23       	and	r24, r24
    2f44:	11 f4       	brne	.+4      	; 0x2f4a <clockJitterEntropyByte()+0x5e>
    2f46:	2f 5f       	subi	r18, 0xFF	; 255
    2f48:	2a c0       	rjmp	.+84     	; 0x2f9e <clockJitterEntropyByte()+0xb2>
    else // Watchdog fired.
      {
      if(countW != lastCountW) // Got a different value from last; assume one bit of entropy.
    2f4a:	27 17       	cp	r18, r23
    2f4c:	c1 f0       	breq	.+48     	; 0x2f7e <clockJitterEntropyByte()+0x92>
        "eor    %A0,__tmp_reg__"

        : "=d" (__ret)
        : "r" (__data), "0" (__crc)
        : "r0"
    );
    2f4e:	42 27       	eor	r20, r18
    2f50:	04 2e       	mov	r0, r20
    2f52:	42 95       	swap	r20
    2f54:	40 7f       	andi	r20, 0xF0	; 240
    2f56:	40 25       	eor	r20, r0
    2f58:	05 2e       	mov	r0, r21
    2f5a:	54 2f       	mov	r21, r20
    2f5c:	42 95       	swap	r20
    2f5e:	4f 70       	andi	r20, 0x0F	; 15
    2f60:	04 26       	eor	r0, r20
    2f62:	46 95       	lsr	r20
    2f64:	54 27       	eor	r21, r20
    2f66:	45 27       	eor	r20, r21
    2f68:	44 0f       	add	r20, r20
    2f6a:	44 0f       	add	r20, r20
    2f6c:	44 0f       	add	r20, r20
    2f6e:	40 25       	eor	r20, r0
        {
        hash = _crc_ccitt_update(hash, countW);
        result = (result << 1) ^ ((uint_fast8_t)hash); // Nominally capturing (at least) lsb of hash.
    2f70:	99 0f       	add	r25, r25
    2f72:	94 27       	eor	r25, r20
        if(--bitsLeft <= 0) { break; } // Got enough bits; stop now.
    2f74:	31 50       	subi	r19, 0x01	; 1
    2f76:	13 16       	cp	r1, r19
    2f78:	0c f0       	brlt	.+2      	; 0x2f7c <clockJitterEntropyByte()+0x90>
    2f7a:	34 c0       	rjmp	.+104    	; 0x2fe4 <clockJitterEntropyByte()+0xf8>
    2f7c:	72 2f       	mov	r23, r18
        lastCountW = countW;
        }
      countW = 0;
      _watchdogFired = 0;
    2f7e:	10 92 2a 03 	sts	0x032A, r1
      wdt_enable(WDTO_15MS); // Restart watchdog, with minimum timeout.
    2f82:	0f b6       	in	r0, 0x3f	; 63
    2f84:	f8 94       	cli
    2f86:	a8 95       	wdr
    2f88:	a0 93 60 00 	sts	0x0060, r26
    2f8c:	0f be       	out	0x3f, r0	; 63
    2f8e:	10 93 60 00 	sts	0x0060, r17
      WDTCSR |= (1 << WDIE);
    2f92:	80 91 60 00 	lds	r24, 0x0060
    2f96:	80 64       	ori	r24, 0x40	; 64
    2f98:	80 93 60 00 	sts	0x0060, r24
    2f9c:	20 e0       	ldi	r18, 0x00	; 0
      }

    // Extract RTC jitter vs CPU.
    if(t1 == TCNT2) { --countR; }
    2f9e:	80 91 b2 00 	lds	r24, 0x00B2
    2fa2:	f8 17       	cp	r31, r24
    2fa4:	11 f4       	brne	.+4      	; 0x2faa <clockJitterEntropyByte()+0xbe>
    2fa6:	61 50       	subi	r22, 0x01	; 1
    2fa8:	ca cf       	rjmp	.-108    	; 0x2f3e <clockJitterEntropyByte()+0x52>
    else // Sub-cycle timer rolled.
      {
      if(countR != lastCountR) // Got a different value from last; assume one bit of entropy.
    2faa:	6e 17       	cp	r22, r30
    2fac:	b9 f0       	breq	.+46     	; 0x2fdc <clockJitterEntropyByte()+0xf0>
    2fae:	46 27       	eor	r20, r22
    2fb0:	04 2e       	mov	r0, r20
    2fb2:	42 95       	swap	r20
    2fb4:	40 7f       	andi	r20, 0xF0	; 240
    2fb6:	40 25       	eor	r20, r0
    2fb8:	05 2e       	mov	r0, r21
    2fba:	54 2f       	mov	r21, r20
    2fbc:	42 95       	swap	r20
    2fbe:	4f 70       	andi	r20, 0x0F	; 15
    2fc0:	04 26       	eor	r0, r20
    2fc2:	46 95       	lsr	r20
    2fc4:	54 27       	eor	r21, r20
    2fc6:	45 27       	eor	r20, r21
    2fc8:	44 0f       	add	r20, r20
    2fca:	44 0f       	add	r20, r20
    2fcc:	44 0f       	add	r20, r20
    2fce:	40 25       	eor	r20, r0
        {
        hash = _crc_ccitt_update(hash, countR);
        result = (result << 1) ^ ((uint_fast8_t)hash); // Nominally capturing (at least) lsb of hash.
    2fd0:	99 0f       	add	r25, r25
    2fd2:	94 27       	eor	r25, r20
        if(--bitsLeft <= 0) { break; } // Got enough bits; stop now.
    2fd4:	31 50       	subi	r19, 0x01	; 1
    2fd6:	13 16       	cp	r1, r19
    2fd8:	2c f4       	brge	.+10     	; 0x2fe4 <clockJitterEntropyByte()+0xf8>
    2fda:	e6 2f       	mov	r30, r22
        lastCountR = countR;
        }
      countR = 0;
      t1 = TCNT2; // Set to look for next roll.
    2fdc:	f0 91 b2 00 	lds	r31, 0x00B2
    2fe0:	60 e0       	ldi	r22, 0x00	; 0
    2fe2:	ad cf       	rjmp	.-166    	; 0x2f3e <clockJitterEntropyByte()+0x52>
      }
    }

  wdt_disable(); // Ensure no spurious WDT wakeup pending.
    2fe4:	88 e1       	ldi	r24, 0x18	; 24
    2fe6:	0f b6       	in	r0, 0x3f	; 63
    2fe8:	f8 94       	cli
    2fea:	80 93 60 00 	sts	0x0060, r24
    2fee:	10 92 60 00 	sts	0x0060, r1
    2ff2:	0f be       	out	0x3f, r0	; 63
  return(result);
  }
    2ff4:	89 2f       	mov	r24, r25
    2ff6:	1f 91       	pop	r17
    2ff8:	08 95       	ret

00002ffa <Sensor<unsigned int>::isValid(unsigned int) const>:
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual T get() const = 0;

    // Returns true if this sensor reading value passed is potentially valid, eg in-range.
    // Default is to always return true, ie all values potentially valid.
    virtual bool isValid(T value) const { return(true); }
    2ffa:	81 e0       	ldi	r24, 0x01	; 1
    2ffc:	08 95       	ret

00002ffe <Sensor<unsigned int>::preferredPollInterval_s() const>:
 
    // Returns non-zero if this implementation requires a regular call to read() to operate correctly.
    // Preferred poll interval (in seconds) or 0 if no regular poll() call required.
    // Default returns 0 indicating regular call to read() not required,
    // only as required to fetch new values from the underlying sensor.
    virtual uint8_t preferredPollInterval_s() const { return(0); }
    2ffe:	80 e0       	ldi	r24, 0x00	; 0
    3000:	08 95       	ret

00003002 <Sensor<unsigned int>::handleInterruptSimple()>:
    // Must be fast and ISR (Interrupt Service Routine) safe.
    // Returns true if interrupt was successfully handled and cleared
    // else another interrupt handler in the chain may be called
    // to attempt to clear the interrupt.
    // By default does nothing (and returns false).
    virtual bool handleInterruptSimple() { return(false); }
    3002:	80 e0       	ldi	r24, 0x00	; 0
    3004:	08 95       	ret

00003006 <Sensor<unsigned int>::begin()>:

    // Begin access to this sensor if applicable and not already begun.
    // Returns true if it needed to be begun.
    // Allows logic to end() if required at the end of a block, etc.
    // Defaults to do nothing (and return false).
    virtual bool begin() { return(false); }
    3006:	80 e0       	ldi	r24, 0x00	; 0
    3008:	08 95       	ret

0000300a <Sensor<unsigned int>::isAvailable() const>:

    // Returns true if this sensor is currently available.
    // True by default unless implementation overrides.
    // For those sensors that need starting this will be false before begin().
    virtual bool isAvailable() const { return(true); }
    300a:	81 e0       	ldi	r24, 0x01	; 1
    300c:	08 95       	ret

0000300e <Sensor<unsigned int>::end()>:

    // End access to this sensor if applicable and not already ended.
    // Returns true if it needed to be ended.
    // Defaults to do nothing (and return false).
    virtual bool end() { return(false); }
    300e:	80 e0       	ldi	r24, 0x00	; 0
    3010:	08 95       	ret

00003012 <global constructors keyed to _Z25minimisePowerWithoutSleepv>:
    // True if last-measured voltage was low.
    bool isLow;
 
  public:
    // Initialise to cautious values.
    SupplyVoltageMilliVolts() : mV(0), isLow(true) { }
    3012:	82 e8       	ldi	r24, 0x82	; 130
    3014:	91 e0       	ldi	r25, 0x01	; 1
    3016:	90 93 24 03 	sts	0x0324, r25
    301a:	80 93 23 03 	sts	0x0323, r24
    301e:	10 92 28 03 	sts	0x0328, r1
    3022:	10 92 27 03 	sts	0x0327, r1
    3026:	81 e0       	ldi	r24, 0x01	; 1
    3028:	80 93 29 03 	sts	0x0329, r24
    302c:	08 95       	ret

0000302e <captureEntropy1()>:
// Capture a little system entropy.
// This call should typically take << 1ms at 1MHz CPU.
// Does not change CPU clock speeds, mess with interrupts (other than possible brief blocking), or do I/O, or sleep.
// Should inject some noise into secure (TBD) and non-secure (RNG8) PRNGs.
void captureEntropy1()
  { seedRNG8(getSubCycleTime() ^ _adcNoise, cycleCountCPU() ^ Supply_mV.get(), _watchdogFired); }
    302e:	20 91 b2 00 	lds	r18, 0x00B2
    3032:	80 91 2b 03 	lds	r24, 0x032B
    3036:	66 b5       	in	r22, 0x26	; 38
    3038:	40 91 2a 03 	lds	r20, 0x032A
    303c:	90 91 27 03 	lds	r25, 0x0327
    3040:	69 27       	eor	r22, r25
    3042:	82 27       	eor	r24, r18
    3044:	0e 94 83 19 	call	0x3306	; 0x3306 <seedRNG8(unsigned char, unsigned char, unsigned char)>
    3048:	08 95       	ret

0000304a <powerDownSPI()>:
  }

// Power down SPI.
void powerDownSPI()
  {
  SPCR &= ~_BV(SPE); // Disable SPI.
    304a:	8c b5       	in	r24, 0x2c	; 44
    304c:	8f 7b       	andi	r24, 0xBF	; 191
    304e:	8c bd       	out	0x2c, r24	; 44
  PRR |= _BV(PRSPI); // Power down...
    3050:	e4 e6       	ldi	r30, 0x64	; 100
    3052:	f0 e0       	ldi	r31, 0x00	; 0
    3054:	80 81       	ld	r24, Z
    3056:	84 60       	ori	r24, 0x04	; 4
    3058:	80 83       	st	Z, r24

  pinMode(PIN_SPI_nSS, OUTPUT); // Ensure that nSS is an output to avoid forcing SPI to slave mode by accident.
    305a:	8a e0       	ldi	r24, 0x0A	; 10
    305c:	61 e0       	ldi	r22, 0x01	; 1
    305e:	0e 94 b9 38 	call	0x7172	; 0x7172 <pinMode>
  fastDigitalWrite(PIN_SPI_nSS, HIGH); // Ensure that nSS is HIGH and thus any slave deselected when powering up SPI.
    3062:	2a 9a       	sbi	0x05, 2	; 5

  // Avoid pins from floating when SPI is disabled.
  // Try to preserve general I/O direction and restore previous output values for outputs.
  pinMode(PIN_SPI_SCK, OUTPUT);
    3064:	8d e0       	ldi	r24, 0x0D	; 13
    3066:	61 e0       	ldi	r22, 0x01	; 1
    3068:	0e 94 b9 38 	call	0x7172	; 0x7172 <pinMode>
  pinMode(PIN_SPI_MOSI, OUTPUT);
    306c:	8b e0       	ldi	r24, 0x0B	; 11
    306e:	61 e0       	ldi	r22, 0x01	; 1
    3070:	0e 94 b9 38 	call	0x7172	; 0x7172 <pinMode>
  pinMode(PIN_SPI_MISO, INPUT_PULLUP);
    3074:	8c e0       	ldi	r24, 0x0C	; 12
    3076:	62 e0       	ldi	r22, 0x02	; 2
    3078:	0e 94 b9 38 	call	0x7172	; 0x7172 <pinMode>

  // If sharing SPI SCK with LED indicator then return this pin to being an output (retaining previous value).
  //if(LED_HEATCALL == PIN_SPI_SCK) { pinMode(LED_HEATCALL, OUTPUT); }
  }
    307c:	08 95       	ret

0000307e <powerUpSPIIfDisabled()>:
// If SPI was disabled, power it up, enable it as master and with a sensible clock speed, etc, and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownSPI() may be advisable.
bool powerUpSPIIfDisabled()
  {
  if(!(PRR & _BV(PRSPI))) { return(false); }
    307e:	80 91 64 00 	lds	r24, 0x0064
    3082:	82 fd       	sbrc	r24, 2
    3084:	02 c0       	rjmp	.+4      	; 0x308a <powerUpSPIIfDisabled()+0xc>
    3086:	80 e0       	ldi	r24, 0x00	; 0
    3088:	08 95       	ret

  pinMode(PIN_SPI_nSS, OUTPUT); // Ensure that nSS is an output to avoid forcing SPI to slave mode by accident.
    308a:	8a e0       	ldi	r24, 0x0A	; 10
    308c:	61 e0       	ldi	r22, 0x01	; 1
    308e:	0e 94 b9 38 	call	0x7172	; 0x7172 <pinMode>
  fastDigitalWrite(PIN_SPI_nSS, HIGH); // Ensure that nSS is HIGH and thus any slave deselected when powering up SPI.
    3092:	2a 9a       	sbi	0x05, 2	; 5

  PRR &= ~_BV(PRSPI); // Enable SPI power.
    3094:	80 91 64 00 	lds	r24, 0x0064
    3098:	8b 7f       	andi	r24, 0xFB	; 251
    309a:	80 93 64 00 	sts	0x0064, r24
  // Configure raw SPI to match better how it was used in PICAXE V0.09 code.
  // CPOL = 0, CPHA = 0
  // Enable SPI, set master mode, set speed.
  const uint8_t ENABLE_MASTER =  _BV(SPE) | _BV(MSTR);
#if F_CPU <= 2000000 // Needs minimum prescale (x2) with slow (<=2MHz) CPU clock.
  SPCR = ENABLE_MASTER; // 2x clock prescale for <=1MHz SPI clock from <=2MHz CPU clock (500kHz SPI @ 1MHz CPU).
    309e:	80 e5       	ldi	r24, 0x50	; 80
    30a0:	8c bd       	out	0x2c, r24	; 44
  SPSR = _BV(SPI2X);
    30a2:	81 e0       	ldi	r24, 0x01	; 1
    30a4:	8d bd       	out	0x2d, r24	; 45
#else // Needs setting for fast (~16MHz) CPU clock.
  SPCR = _BV(SPR0) | ENABLE_MASTER; // 8x clock prescale for ~2MHz SPI clock from nominal ~16MHz CPU clock.
  SPSR = _BV(SPI2X);
#endif
  return(true);
  }
    30a6:	08 95       	ret

000030a8 <power_intermittent_peripherals_disable()>:
// Disable/remove power to intermittent peripherals.
// Switches the digital line to input with no pull-up (ie high-Z).
// There should be some sort of load to stop this floating.
void power_intermittent_peripherals_disable()
  {
  pinMode(IO_POWER_UP, INPUT);
    30a8:	87 e0       	ldi	r24, 0x07	; 7
    30aa:	60 e0       	ldi	r22, 0x00	; 0
    30ac:	0e 94 b9 38 	call	0x7172	; 0x7172 <pinMode>
  }
    30b0:	08 95       	ret

000030b2 <minimisePowerWithoutSleep()>:
// to ensure that nothing power-hungry is accidentally left on.
// Any module that may need to run all the time should not be turned off here.
// May be called from panic(), so do not be too clever.
// Does NOT attempt to power down the radio, eg in case that needs to be left in RX mode.
// Does NOT attempt to power down the UART/serial.
void minimisePowerWithoutSleep()
    30b2:	0f 93       	push	r16
    30b4:	1f 93       	push	r17
  {
  // Disable the watchdog timer.
  wdt_disable();
    30b6:	88 e1       	ldi	r24, 0x18	; 24
    30b8:	0f b6       	in	r0, 0x3f	; 63
    30ba:	f8 94       	cli
    30bc:	80 93 60 00 	sts	0x0060, r24
    30c0:	10 92 60 00 	sts	0x0060, r1
    30c4:	0f be       	out	0x3f, r0	; 63
  
  // Ensure that external peripherals are powered down.
  power_intermittent_peripherals_disable();
    30c6:	0e 94 54 18 	call	0x30a8	; 0x30a8 <power_intermittent_peripherals_disable()>

  // Turn off analogue stuff that eats power.
  ADCSRA = 0; // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
    30ca:	10 92 7a 00 	sts	0x007A, r1
  ACSR = (1<<ACD); // Disable the analog comparator.
    30ce:	80 e8       	ldi	r24, 0x80	; 128
    30d0:	80 bf       	out	0x30, r24	; 48
  DIDR0 = 0x3F; // Disable digital input buffers on all ADC0-ADC5 pins.
    30d2:	8f e3       	ldi	r24, 0x3F	; 63
    30d4:	80 93 7e 00 	sts	0x007E, r24
  DIDR1 = (1<<AIN1D)|(1<<AIN0D); // Disable digital input buffer on AIN1/0.
    30d8:	83 e0       	ldi	r24, 0x03	; 3
    30da:	80 93 7f 00 	sts	0x007F, r24
  power_adc_disable();
    30de:	04 e6       	ldi	r16, 0x64	; 100
    30e0:	10 e0       	ldi	r17, 0x00	; 0
    30e2:	f8 01       	movw	r30, r16
    30e4:	80 81       	ld	r24, Z
    30e6:	81 60       	ori	r24, 0x01	; 1
    30e8:	80 83       	st	Z, r24

  // Ensure that SPI is powered down.
  powerDownSPI();
    30ea:	0e 94 25 18 	call	0x304a	; 0x304a <powerDownSPI()>
  }

// Power down TWI (I2C).
void powerDownTWI()
  {
  TWCR &= ~_BV(TWEN); // Disable TWI.
    30ee:	ec eb       	ldi	r30, 0xBC	; 188
    30f0:	f0 e0       	ldi	r31, 0x00	; 0
    30f2:	80 81       	ld	r24, Z
    30f4:	8b 7f       	andi	r24, 0xFB	; 251
    30f6:	80 83       	st	Z, r24
  PRR |= _BV(PRTWI); // Disable TWI power.
    30f8:	f8 01       	movw	r30, r16
    30fa:	80 81       	ld	r24, Z
    30fc:	80 68       	ori	r24, 0x80	; 128
    30fe:	80 83       	st	Z, r24

#if defined(DONT_USE_TIMER0)
  power_timer0_disable();
#endif

  power_timer1_disable();
    3100:	80 81       	ld	r24, Z
    3102:	88 60       	ori	r24, 0x08	; 8
    3104:	80 83       	st	Z, r24

#ifndef WAKEUP_32768HZ_XTAL
  power_timer2_disable();
#endif
  }
    3106:	1f 91       	pop	r17
    3108:	0f 91       	pop	r16
    310a:	08 95       	ret

0000310c <power_intermittent_peripherals_enable(bool)>:
// items powered direct from IO_POWER_UP may need no such wait.
//
// Switches the digital line to high then output (to avoid ever *discharging* the output cap).
// Note that with 100nF cap, and 330R (or lower) resistor from the output pin,
// then 1ms delay should be plenty for the voltage on the cap to settle.
void power_intermittent_peripherals_enable(bool waitUntilStable)
    310c:	1f 93       	push	r17
    310e:	18 2f       	mov	r17, r24
  {
  fastDigitalWrite(IO_POWER_UP, HIGH);
    3110:	5f 9a       	sbi	0x0b, 7	; 11
  pinMode(IO_POWER_UP, OUTPUT);
    3112:	87 e0       	ldi	r24, 0x07	; 7
    3114:	61 e0       	ldi	r22, 0x01	; 1
    3116:	0e 94 b9 38 	call	0x7172	; 0x7172 <pinMode>
  // If requested, wait long enough that I/O peripheral power should be stable.
  // Wait in a relatively low-power way...
  if(waitUntilStable) { sleepLowPowerMs(1); }
    311a:	11 23       	and	r17, r17
    311c:	21 f0       	breq	.+8      	; 0x3126 <power_intermittent_peripherals_enable(bool)+0x1a>
// This may be achieved in part by dynamically slowing the CPU clock if possible.
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed((((MIN_CPU_HZ * (ms)) + 2000) / 4000) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    311e:	86 e0       	ldi	r24, 0x06	; 6
    3120:	90 e0       	ldi	r25, 0x00	; 0
    3122:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
  }
    3126:	1f 91       	pop	r17
    3128:	08 95       	ret

0000312a <powerUpTWIIfDisabled()>:
// If TWI (I2C) was disabled, power it up, do Wire.begin(), and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownRWI() may be advisable.
bool powerUpTWIIfDisabled()
  {
  if(!(PRR & _BV(PRTWI))) { return(false); }
    312a:	80 91 64 00 	lds	r24, 0x0064
    312e:	87 fd       	sbrc	r24, 7
    3130:	02 c0       	rjmp	.+4      	; 0x3136 <powerUpTWIIfDisabled()+0xc>
    3132:	80 e0       	ldi	r24, 0x00	; 0
    3134:	08 95       	ret

  PRR &= ~_BV(PRTWI); // Enable TWI power.
    3136:	80 91 64 00 	lds	r24, 0x0064
    313a:	8f 77       	andi	r24, 0x7F	; 127
    313c:	80 93 64 00 	sts	0x0064, r24
  TWCR |= _BV(TWEN); // Enable TWI.
    3140:	80 91 bc 00 	lds	r24, 0x00BC
    3144:	84 60       	ori	r24, 0x04	; 4
    3146:	80 93 bc 00 	sts	0x00BC, r24
  Wire.begin(); // Set it going.
    314a:	89 ec       	ldi	r24, 0xC9	; 201
    314c:	93 e0       	ldi	r25, 0x03	; 3
    314e:	0e 94 ab 34 	call	0x6956	; 0x6956 <TwoWire::begin()>
  // TODO: reset TWBR and prescaler for our low CPU frequency     (TWBR = ((F_CPU / TWI_FREQ) - 16) / 2 gives -3!)
#if F_CPU <= 1000000
  TWBR = 0; // Implies SCL freq of F_CPU / (16 + 2 * TBWR * PRESC) = 62.5kHz @ F_CPU==1MHz and PRESC==1 (from Wire/TWI code).
    3152:	10 92 b8 00 	sts	0x00B8, r1
    3156:	81 e0       	ldi	r24, 0x01	; 1
#endif
  return(true);
  }
    3158:	08 95       	ret

0000315a <powerDownSerial()>:
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
  PRR |= _BV(PRADC); // Disable the ADC.
  }

// Check if serial is (already) powered up.
static bool _serialIsPoweredUp() { return(!(PRR & _BV(PRUSART0))); }
    315a:	80 91 64 00 	lds	r24, 0x0064


// Flush any pending serial output and power it down if up.
void powerDownSerial()
  {
  if(_serialIsPoweredUp())
    315e:	81 fd       	sbrc	r24, 1
    3160:	08 c0       	rjmp	.+16     	; 0x3172 <powerDownSerial()+0x18>
    {
    // Flush serial output and shut down if apparently active.
    Serial.flush();
    3162:	81 ed       	ldi	r24, 0xD1	; 209
    3164:	94 e0       	ldi	r25, 0x04	; 4
    3166:	0e 94 14 3b 	call	0x7628	; 0x7628 <HardwareSerial::flush()>
    //flushSerialHW();
    Serial.end();
    316a:	81 ed       	ldi	r24, 0xD1	; 209
    316c:	94 e0       	ldi	r25, 0x04	; 4
    316e:	0e 94 54 3a 	call	0x74a8	; 0x74a8 <HardwareSerial::end()>
    }
  pinMode(PIN_SERIAL_RX, INPUT_PULLUP);
    3172:	80 e0       	ldi	r24, 0x00	; 0
    3174:	62 e0       	ldi	r22, 0x02	; 2
    3176:	0e 94 b9 38 	call	0x7172	; 0x7172 <pinMode>
  pinMode(PIN_SERIAL_TX, INPUT_PULLUP);
    317a:	81 e0       	ldi	r24, 0x01	; 1
    317c:	62 e0       	ldi	r22, 0x02	; 2
    317e:	0e 94 b9 38 	call	0x7172	; 0x7172 <pinMode>
  PRR |= _BV(PRUSART0); // Disable the UART module.
    3182:	80 91 64 00 	lds	r24, 0x0064
    3186:	82 60       	ori	r24, 0x02	; 2
    3188:	80 93 64 00 	sts	0x0064, r24
  }
    318c:	08 95       	ret

0000318e <burnHundredsOfCyclesProductivelyAndPoll()>:
// This call should typically take << 1ms at 1MHz CPU.
// Does not change CPU clock speeds, mess with interrupts (other than possible brief blocking), or sleep.
// May capture some entropy in secure and non-secure PRNGs.
void burnHundredsOfCyclesProductivelyAndPoll()
  {
  if(pollIO()) { seedRNG8(cycleCountCPU(), _watchdogFired, getSubCycleTime()); }
    318e:	80 e0       	ldi	r24, 0x00	; 0
    3190:	0e 94 a3 06 	call	0xd46	; 0xd46 <pollIO(bool)>
    3194:	88 23       	and	r24, r24
    3196:	41 f0       	breq	.+16     	; 0x31a8 <burnHundredsOfCyclesProductivelyAndPoll()+0x1a>
    3198:	86 b5       	in	r24, 0x26	; 38
    319a:	60 91 2a 03 	lds	r22, 0x032A
    319e:	40 91 b2 00 	lds	r20, 0x00B2
    31a2:	0e 94 83 19 	call	0x3306	; 0x3306 <seedRNG8(unsigned char, unsigned char, unsigned char)>
    31a6:	08 95       	ret
  else { captureEntropy1(); }
    31a8:	0e 94 17 18 	call	0x302e	; 0x302e <captureEntropy1()>
    31ac:	08 95       	ret

000031ae <flushSerialProductive()>:
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
  PRR |= _BV(PRADC); // Disable the ADC.
  }

// Check if serial is (already) powered up.
static bool _serialIsPoweredUp() { return(!(PRR & _BV(PRUSART0))); }
    31ae:	80 91 64 00 	lds	r24, 0x0064
// Assumes hundreds of CPU cycles available for each character queued for TX.
// Does not change CPU clock speed or disable or mess with USART0, though may poll it.
void flushSerialProductive()
  {
#if 1 && defined(DEBUG)
  if(!_serialIsPoweredUp()) { panic(); } // Trying to operate serial without it powered up.
    31b2:	81 ff       	sbrs	r24, 1
    31b4:	05 c0       	rjmp	.+10     	; 0x31c0 <flushSerialProductive()+0x12>
    31b6:	0e 94 c8 2e 	call	0x5d90	; 0x5d90 <panic()>
    31ba:	02 c0       	rjmp	.+4      	; 0x31c0 <flushSerialProductive()+0x12>
#endif
  // Can productively spin here churning PRNGs or the like before the flush(), checking for the UART TX buffer to empty...
  // An occasional premature exit to flush() due to Serial interrupt handler interaction is benign, and indeed more grist to the mill.
  while(serialTXInProgress()) { burnHundredsOfCyclesProductivelyAndPoll(); }
    31bc:	0e 94 c7 18 	call	0x318e	; 0x318e <burnHundredsOfCyclesProductivelyAndPoll()>
    31c0:	80 91 c0 00 	lds	r24, 0x00C0
    31c4:	85 ff       	sbrs	r24, 5
    31c6:	fa cf       	rjmp	.-12     	; 0x31bc <flushSerialProductive()+0xe>
  Serial.flush(); // Wait for all output to have been sent.
    31c8:	81 ed       	ldi	r24, 0xD1	; 209
    31ca:	94 e0       	ldi	r25, 0x04	; 4
    31cc:	0e 94 14 3b 	call	0x7628	; 0x7628 <HardwareSerial::flush()>
  }
    31d0:	08 95       	ret

000031d2 <flushSerialSCTSensitive()>:
// Does not change CPU clock speed or disable or mess with USART0, though may poll it.
// Sleeps in IDLE mode for ~15ms at a time (backtopped by watchdog) waking on any interrupt
// so that the caller must be sure RX overrun (etc) will not be an issue.
// Switches to flushSerialProductive() behaviour
// if in danger of overrunning a minor cycle while idling.
void flushSerialSCTSensitive()
    31d2:	1f 93       	push	r17
#ifdef ENABLE_AVR_IDLE_MODE
// Idle productively polling I/O, etc, across the system while spending time in low-power mode if possible.
// Typically sleeps for nominally up to 30ms; tries to allow ealier wakeup if interrupt is received, etc.
// (Will often be prematurely woken by timer0 with ~16ms interval.)
// True iff watchdog timer expired; false if something else woke the CPU.
static bool inline idle15AndPoll() { const bool wd = idleCPU(WDTO_15MS); pollIO(!wd); return(wd); }
    31d4:	11 e0       	ldi	r17, 0x01	; 1
  {
#if 0 && defined(DEBUG)
  if(!_serialIsPoweredUp()) { panic(); } // Trying to operate serial without it powered up.
#endif
#ifdef ENABLE_AVR_IDLE_MODE
  while(serialTXInProgress() && (getSubCycleTime() < GSCT_MAX - 2 - (20/SUBCYCLE_TICK_MS_RD)))
    31d6:	80 91 c0 00 	lds	r24, 0x00C0
    31da:	85 fd       	sbrc	r24, 5
    31dc:	0b c0       	rjmp	.+22     	; 0x31f4 <flushSerialSCTSensitive()+0x22>
    31de:	80 91 b2 00 	lds	r24, 0x00B2
    31e2:	8b 3f       	cpi	r24, 0xFB	; 251
    31e4:	38 f4       	brcc	.+14     	; 0x31f4 <flushSerialSCTSensitive()+0x22>
    31e6:	80 e0       	ldi	r24, 0x00	; 0
    31e8:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <idleCPU(signed char)>
    31ec:	81 27       	eor	r24, r17
    31ee:	0e 94 a3 06 	call	0xd46	; 0xd46 <pollIO(bool)>
    31f2:	f1 cf       	rjmp	.-30     	; 0x31d6 <flushSerialSCTSensitive()+0x4>
    { idle15AndPoll(); } // Save much power by idling CPU, though everything else runs.
#endif
  flushSerialProductive();
    31f4:	0e 94 d7 18 	call	0x31ae	; 0x31ae <flushSerialProductive()>
  }
    31f8:	1f 91       	pop	r17
    31fa:	08 95       	ret

000031fc <sleepUntilSubCycleTime(unsigned char)>:
// May use a combination of techniques to hit the required time.
// Requesting a sleep until at or near the end of the cycle risks overrun and may be unwise.
// Using this to sleep less then 2 ticks may prove unreliable as the RTC rolls on underneath...
// This is NOT intended to be used to sleep over the end of a minor cycle.
// May poll I/O.
bool sleepUntilSubCycleTime(const uint8_t sleepUntil)
    31fc:	0f 93       	push	r16
    31fe:	1f 93       	push	r17
    3200:	cf 93       	push	r28
    3202:	df 93       	push	r29
    3204:	18 2f       	mov	r17, r24
      sleepLowPowerLessThanMs(max(SUBCYCLE_TICK_MS_RD / 2, 1)); // Assumed to be a constant expression.
      continue;
      }

    // Compute remaining time in milliseconds, rounded down...
    const uint16_t msLeft = ((uint16_t)SUBCYCLE_TICK_MS_RD) * ticksLeft;
    3206:	07 e0       	ldi	r16, 0x07	; 7
// May poll I/O.
bool sleepUntilSubCycleTime(const uint8_t sleepUntil)
  {
  for( ; ; )
    {
    const uint8_t now = getSubCycleTime();
    3208:	80 91 b2 00 	lds	r24, 0x00B2
    if(now == sleepUntil) { return(true); } // Done it!
    320c:	81 17       	cp	r24, r17
    320e:	e1 f1       	breq	.+120    	; 0x3288 <sleepUntilSubCycleTime(unsigned char)+0x8c>
    if(now > sleepUntil) { return(false); } // Too late...
    3210:	18 17       	cp	r17, r24
    3212:	10 f4       	brcc	.+4      	; 0x3218 <sleepUntilSubCycleTime(unsigned char)+0x1c>
    3214:	80 e0       	ldi	r24, 0x00	; 0
    3216:	39 c0       	rjmp	.+114    	; 0x328a <sleepUntilSubCycleTime(unsigned char)+0x8e>

    // Compute time left to sleep.
    // It is easy to sleep a bit more later if necessary, but oversleeping is bad.
    const uint8_t ticksLeft = sleepUntil - now;
    3218:	21 2f       	mov	r18, r17
    321a:	28 1b       	sub	r18, r24
    // Deal with shortest sleep specially to avoid missing target from overheads...
    if(1 == ticksLeft)
    321c:	21 30       	cpi	r18, 0x01	; 1
    321e:	19 f4       	brne	.+6      	; 0x3226 <sleepUntilSubCycleTime(unsigned char)+0x2a>
// Should be good for values up to at least 1000, ie 1 second.
// Uses formulation likely to be quicker than sleepLowPowerMs() for non-constant argument values,
// and that results in a somewhat shorter sleep than sleepLowPowerMs(ms).
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerLessThanMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed(((MIN_CPU_HZ/4000) * (ms)) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    3220:	83 e1       	ldi	r24, 0x13	; 19
    3222:	90 e0       	ldi	r25, 0x00	; 0
    3224:	2e c0       	rjmp	.+92     	; 0x3282 <sleepUntilSubCycleTime(unsigned char)+0x86>
      sleepLowPowerLessThanMs(max(SUBCYCLE_TICK_MS_RD / 2, 1)); // Assumed to be a constant expression.
      continue;
      }

    // Compute remaining time in milliseconds, rounded down...
    const uint16_t msLeft = ((uint16_t)SUBCYCLE_TICK_MS_RD) * ticksLeft;
    3226:	20 9f       	mul	r18, r16
    3228:	e0 01       	movw	r28, r0
    322a:	11 24       	eor	r1, r1

    // If comfortably in the area of nap()s then use one of them for improved energy savings.
    // Allow for nap() to overrun a little as its timing can vary with temperature and supply voltage,
    // and the bulk of energy savings should still be available without pushing the timing to the wire.
    // Note that during nap() timer0 should be stopped and thus not cause premature wakeup (from overflow interrupt).
    if(msLeft >= 20)
    322c:	c4 31       	cpi	r28, 0x14	; 20
    322e:	d1 05       	cpc	r29, r1
    3230:	70 f0       	brcs	.+28     	; 0x324e <sleepUntilSubCycleTime(unsigned char)+0x52>
      {
      if(msLeft >= 80)
    3232:	c0 35       	cpi	r28, 0x50	; 80
    3234:	d1 05       	cpc	r29, r1
    3236:	38 f0       	brcs	.+14     	; 0x3246 <sleepUntilSubCycleTime(unsigned char)+0x4a>
        {
        if(msLeft >= 333)
    3238:	cd 54       	subi	r28, 0x4D	; 77
    323a:	d1 40       	sbci	r29, 0x01	; 1
    323c:	10 f0       	brcs	.+4      	; 0x3242 <sleepUntilSubCycleTime(unsigned char)+0x46>
          {
          nap(WDTO_250MS); // Nominal 250ms sleep.
    323e:	84 e0       	ldi	r24, 0x04	; 4
    3240:	03 c0       	rjmp	.+6      	; 0x3248 <sleepUntilSubCycleTime(unsigned char)+0x4c>
          continue;
          }
        nap(WDTO_60MS); // Nominal 60ms sleep.
    3242:	82 e0       	ldi	r24, 0x02	; 2
    3244:	01 c0       	rjmp	.+2      	; 0x3248 <sleepUntilSubCycleTime(unsigned char)+0x4c>
        continue;
        }
      nap(WDTO_15MS); // Nominal 15ms sleep.
    3246:	80 e0       	ldi	r24, 0x00	; 0
    3248:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <nap(signed char)>
    324c:	dd cf       	rjmp	.-70     	; 0x3208 <sleepUntilSubCycleTime(unsigned char)+0xc>
    // Use low-power CPU sleep for residual time, but being very careful not to oversleep.
    // Aim to sleep somewhat under residual time, eg to allow for overheads, interrupts, and other slippages.
    // Assumed to be > 1 else would have been special-cased above.
    // Assumed to be << 1s else a nap() would have been used above.
#ifdef DEBUG
    if((msLeft < 2) || (msLeft > 1000)) { panic(); }
    324e:	ce 01       	movw	r24, r28
    3250:	02 97       	sbiw	r24, 0x02	; 2
    3252:	87 5e       	subi	r24, 0xE7	; 231
    3254:	93 40       	sbci	r25, 0x03	; 3
    3256:	10 f0       	brcs	.+4      	; 0x325c <sleepUntilSubCycleTime(unsigned char)+0x60>
    3258:	0e 94 c8 2e 	call	0x5d90	; 0x5d90 <panic()>
    325c:	9e 01       	movw	r18, r28
    325e:	21 50       	subi	r18, 0x01	; 1
    3260:	30 40       	sbci	r19, 0x00	; 0
    3262:	40 e0       	ldi	r20, 0x00	; 0
    3264:	50 e0       	ldi	r21, 0x00	; 0
    3266:	da 01       	movw	r26, r20
    3268:	c9 01       	movw	r24, r18
    326a:	63 e0       	ldi	r22, 0x03	; 3
    326c:	88 0f       	add	r24, r24
    326e:	99 1f       	adc	r25, r25
    3270:	aa 1f       	adc	r26, r26
    3272:	bb 1f       	adc	r27, r27
    3274:	6a 95       	dec	r22
    3276:	d1 f7       	brne	.-12     	; 0x326c <sleepUntilSubCycleTime(unsigned char)+0x70>
    3278:	82 1b       	sub	r24, r18
    327a:	93 0b       	sbc	r25, r19
    327c:	a4 0b       	sbc	r26, r20
    327e:	b5 0b       	sbc	r27, r21
    3280:	02 97       	sbiw	r24, 0x02	; 2
    3282:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
    3286:	c0 cf       	rjmp	.-128    	; 0x3208 <sleepUntilSubCycleTime(unsigned char)+0xc>
    3288:	81 e0       	ldi	r24, 0x01	; 1
#endif
    sleepLowPowerLessThanMs(msLeft - 1);
    }
  }
    328a:	df 91       	pop	r29
    328c:	cf 91       	pop	r28
    328e:	1f 91       	pop	r17
    3290:	0f 91       	pop	r16
    3292:	08 95       	ret

00003294 <powerUpSerialIfDisabled()>:
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
  PRR |= _BV(PRADC); // Disable the ADC.
  }

// Check if serial is (already) powered up.
static bool _serialIsPoweredUp() { return(!(PRR & _BV(PRUSART0))); }
    3294:	80 91 64 00 	lds	r24, 0x0064
// If serial was disabled, power it up, do Serial.begin(), and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownSerial() may be advisable.
bool powerUpSerialIfDisabled()
  {
  if(_serialIsPoweredUp()) { return(false); }
    3298:	81 fd       	sbrc	r24, 1
    329a:	02 c0       	rjmp	.+4      	; 0x32a0 <powerUpSerialIfDisabled()+0xc>
    329c:	80 e0       	ldi	r24, 0x00	; 0
    329e:	08 95       	ret
  PRR &= ~_BV(PRUSART0); // Enable the UART.
    32a0:	80 91 64 00 	lds	r24, 0x0064
    32a4:	8d 7f       	andi	r24, 0xFD	; 253
    32a6:	80 93 64 00 	sts	0x0064, r24
  Serial.begin(BAUD); // Set it going.
    32aa:	81 ed       	ldi	r24, 0xD1	; 209
    32ac:	94 e0       	ldi	r25, 0x04	; 4
    32ae:	40 ec       	ldi	r20, 0xC0	; 192
    32b0:	52 e1       	ldi	r21, 0x12	; 18
    32b2:	60 e0       	ldi	r22, 0x00	; 0
    32b4:	70 e0       	ldi	r23, 0x00	; 0
    32b6:	0e 94 d6 39 	call	0x73ac	; 0x73ac <HardwareSerial::begin(unsigned long)>
    32ba:	81 e0       	ldi	r24, 0x01	; 1
  return(true);
  }
    32bc:	08 95       	ret

000032be <powerSetup()>:
// Call from setup() to turn off unused modules, set up timers and interrupts, etc.
// I/O pin setting is not done here.
void powerSetup()
  {
#ifdef DEBUG
  assert(DEFAULT_CPU_PRESCALE == clock_prescale_get()); // Verify that CPU prescaling is as expected.
    32be:	80 91 61 00 	lds	r24, 0x0061
    32c2:	8f 70       	andi	r24, 0x0F	; 15
    32c4:	83 30       	cpi	r24, 0x03	; 3
    32c6:	11 f0       	breq	.+4      	; 0x32cc <powerSetup()+0xe>
    32c8:	0e 94 2b 04 	call	0x856	; 0x856 <abort>
#endif

  // Do normal gentle switch off, including analogue module/control in correct order.
  minimisePowerWithoutSleep();
    32cc:	0e 94 59 18 	call	0x30b2	; 0x30b2 <minimisePowerWithoutSleep()>

  // Brutally force off all modules, then re-enable explicitly below any still needed.
  power_all_disable(); 
    32d0:	80 91 64 00 	lds	r24, 0x0064
    32d4:	8f 6e       	ori	r24, 0xEF	; 239
    32d6:	80 93 64 00 	sts	0x0064, r24

#if !defined(DONT_USE_TIMER0)
  power_timer0_enable(); // Turning timer 0 off messes up some standard Arduino support such as delay() and millis().
    32da:	80 91 64 00 	lds	r24, 0x0064
    32de:	8f 7d       	andi	r24, 0xDF	; 223
    32e0:	80 93 64 00 	sts	0x0064, r24
#endif
  
#if defined(WAKEUP_32768HZ_XTAL)
  power_timer2_enable();
    32e4:	80 91 64 00 	lds	r24, 0x0064
    32e8:	8f 7b       	andi	r24, 0xBF	; 191
    32ea:	80 93 64 00 	sts	0x0064, r24
#ifdef WAKEUP_32768HZ_XTAL
static void timer2XtalIntSetup()
 {
  // Set up TIMER2 to wake CPU out of sleep regularly using external 32768Hz crystal.
  // See http://www.atmel.com/Images/doc2505.pdf
  TCCR2A = 0x00;
    32ee:	10 92 b0 00 	sts	0x00B0, r1

#if defined(HALF_SECOND_RTC_SUPPORT)
  TCCR2B = (1<<CS22); // Set CLK/64 for overflow interrupt every 0.5s.
#elif defined(TWO_S_TICK_RTC_SUPPORT)
  TCCR2B = (1<<CS22)|(1<<CS21); // Set CLK/128 for overflow interrupt every 2s.
    32f2:	86 e0       	ldi	r24, 0x06	; 6
    32f4:	80 93 b1 00 	sts	0x00B1, r24
#else
  TCCR2B = (1<<CS22)|(1<<CS20); // Set CLK/128 for overflow interrupt every 1s.
#endif
  //TCCR2B = (1<<CS22)|(1<<CS21)|(1<<CS20); // Set CLK/1024 for overflow interrupt every 8s (slowest possible).

  ASSR = (1<<AS2); // Enable asynchronous operation.
    32f8:	80 e2       	ldi	r24, 0x20	; 32
    32fa:	80 93 b6 00 	sts	0x00B6, r24
  TIMSK2 = (1<<TOIE2); // Enable the timer 2 interrupt.
    32fe:	81 e0       	ldi	r24, 0x01	; 1
    3300:	80 93 70 00 	sts	0x0070, r24
  
#if defined(WAKEUP_32768HZ_XTAL)
  power_timer2_enable();
  timer2XtalIntSetup();
#endif
  }
    3304:	08 95       	ret

00003306 <seedRNG8(unsigned char, unsigned char, unsigned char)>:
//2 ADDs, one bit shift right , and one increment. Difficult or slow operations like multiply, etc 
//were avoided for maximum speed on ultra low power devices.
void seedRNG8(uint8_t s1, uint8_t s2, uint8_t s3) // Originally init_rng(s1,s2,s3) //Can also be used to seed the rng with more entropy during use.
  {
  //XOR new entropy into key state
  a ^=s1;
    3306:	20 91 2f 03 	lds	r18, 0x032F
  b ^=s2;
    330a:	90 91 30 03 	lds	r25, 0x0330
    330e:	69 27       	eor	r22, r25
  c ^=s3;
    3310:	90 91 2d 03 	lds	r25, 0x032D
    3314:	49 27       	eor	r20, r25
  x++;
    3316:	90 91 2e 03 	lds	r25, 0x032E
    331a:	9f 5f       	subi	r25, 0xFF	; 255
    331c:	90 93 2e 03 	sts	0x032E, r25
  a = (a^c^x);
    3320:	28 27       	eor	r18, r24
    3322:	24 27       	eor	r18, r20
    3324:	29 27       	eor	r18, r25
    3326:	20 93 2f 03 	sts	0x032F, r18
  b = (b+a);
    332a:	62 0f       	add	r22, r18
    332c:	60 93 30 03 	sts	0x0330, r22
  c = ((c+(b>>1))^a);
    3330:	66 95       	lsr	r22
    3332:	64 0f       	add	r22, r20
    3334:	62 27       	eor	r22, r18
    3336:	60 93 2d 03 	sts	0x032D, r22
  }
    333a:	08 95       	ret

0000333c <randRNG8()>:
//
uint8_t randRNG8() // Originally unsigned char randomize().
  {
  x++;               //x is incremented every round and is not affected by any other variable
    333c:	80 91 2e 03 	lds	r24, 0x032E
    3340:	8f 5f       	subi	r24, 0xFF	; 255
    3342:	80 93 2e 03 	sts	0x032E, r24
  a = (a^c^x);       //note the mix of addition and XOR
    3346:	20 91 2d 03 	lds	r18, 0x032D
    334a:	90 91 2f 03 	lds	r25, 0x032F
    334e:	92 27       	eor	r25, r18
    3350:	98 27       	eor	r25, r24
    3352:	90 93 2f 03 	sts	0x032F, r25
  b = (b+a);         //And the use of very few instructions
    3356:	80 91 30 03 	lds	r24, 0x0330
    335a:	89 0f       	add	r24, r25
    335c:	80 93 30 03 	sts	0x0330, r24
  c = ((c+(b>>1))^a);  //the right shift is to ensure that high-order bits from b can affect  
    3360:	86 95       	lsr	r24
    3362:	82 0f       	add	r24, r18
    3364:	89 27       	eor	r24, r25
    3366:	80 93 2d 03 	sts	0x032D, r24
  return(c);         //low order bits of other variables
  }
    336a:	08 95       	ret

0000336c <resetRNG8()>:
//
#ifdef UNIT_TESTS
// Reset to known state; only allow in unit testing as this destroys any residual entropy.
void resetRNG8()
  {
  x = 0;
    336c:	10 92 2e 03 	sts	0x032E, r1
  a = 0;
    3370:	10 92 2f 03 	sts	0x032F, r1
  b = 0;
    3374:	10 92 30 03 	sts	0x0330, r1
  c = 0;
    3378:	10 92 2d 03 	sts	0x032D, r1
  };
    337c:	08 95       	ret

0000337e <global constructors keyed to _Z8seedRNG8hhh>:
uint8_t randRNG8(); // Originally called 'randomize()'.
// RNG8 working state.
static uint8_t a, b, c;
// DHD20130603: avoid the hidden counter always starting at zero c/o some per-build state.
// Derived from linker-driven pointer base plus hash of compilation timestamp, with little run-time cost.
static uint8_t x = (uint8_t)(intptr_t) ((&c) + (uint8_t)((__TIME__[7] * 17) ^ (__TIME__[6]) ^ (__TIME__[4] << 11)));
    337e:	8e e7       	ldi	r24, 0x7E	; 126
    3380:	93 e0       	ldi	r25, 0x03	; 3
    3382:	80 93 2e 03 	sts	0x032E, r24
  {
  x = 0;
  a = 0;
  b = 0;
  c = 0;
  };
    3386:	08 95       	ret

00003388 <RFM22RXFIFO(unsigned char*, unsigned char)>:


// Put RFM22 into standby, attempt to read specified number of bytes from FIFO to buffer.
// Leaves RFM22 in low-power standby mode.
// Trailing bytes (more than were actually sent) undefined.
void RFM22RXFIFO(uint8_t *buf, const uint8_t bufSize)
    3388:	ff 92       	push	r15
    338a:	0f 93       	push	r16
    338c:	1f 93       	push	r17
    338e:	18 2f       	mov	r17, r24
    3390:	09 2f       	mov	r16, r25
    3392:	f6 2e       	mov	r15, r22
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    3394:	0e 94 3f 18 	call	0x307e	; 0x307e <powerUpSPIIfDisabled()>
    3398:	48 2f       	mov	r20, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    339a:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    339c:	87 e8       	ldi	r24, 0x87	; 135
    339e:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    33a0:	0d b4       	in	r0, 0x2d	; 45
    33a2:	07 fe       	sbrs	r0, 7
    33a4:	fd cf       	rjmp	.-6      	; 0x33a0 <RFM22RXFIFO(unsigned char*, unsigned char)+0x18>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    33a6:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    33a8:	0d b4       	in	r0, 0x2d	; 45
    33aa:	07 fe       	sbrs	r0, 7
    33ac:	fd cf       	rjmp	.-6      	; 0x33a8 <RFM22RXFIFO(unsigned char*, unsigned char)+0x20>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    33ae:	2a 9a       	sbi	0x05, 2	; 5
  {
  const bool neededEnable = powerUpSPIIfDisabled();

  _RFM22ModeStandby();

  _RFM22_SELECT();
    33b0:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    33b2:	8f e7       	ldi	r24, 0x7F	; 127
    33b4:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    33b6:	0d b4       	in	r0, 0x2d	; 45
    33b8:	07 fe       	sbrs	r0, 7
    33ba:	fd cf       	rjmp	.-6      	; 0x33b6 <RFM22RXFIFO(unsigned char*, unsigned char)+0x2e>
  return(SPDR);
    33bc:	8e b5       	in	r24, 0x2e	; 46
    33be:	81 2f       	mov	r24, r17
    33c0:	90 2f       	mov	r25, r16
    33c2:	9c 01       	movw	r18, r24
    33c4:	f9 01       	movw	r30, r18
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	07 c0       	rjmp	.+14     	; 0x33d8 <RFM22RXFIFO(unsigned char*, unsigned char)+0x50>

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    33ca:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    33cc:	0d b4       	in	r0, 0x2d	; 45
    33ce:	07 fe       	sbrs	r0, 7
    33d0:	fd cf       	rjmp	.-6      	; 0x33cc <RFM22RXFIFO(unsigned char*, unsigned char)+0x44>
  return(SPDR);
    33d2:	8e b5       	in	r24, 0x2e	; 46

  _RFM22_SELECT();
  _RFM22_io(RFM22REG_FIFO & 0x7F); // Start burst read from RX FIFO.
//  uint8_t val;
  for(uint8_t i = 0; i < bufSize; ++i)
    { buf[i] = _RFM22_io(0);  }
    33d4:	81 93       	st	Z+, r24
  _RFM22ModeStandby();

  _RFM22_SELECT();
  _RFM22_io(RFM22REG_FIFO & 0x7F); // Start burst read from RX FIFO.
//  uint8_t val;
  for(uint8_t i = 0; i < bufSize; ++i)
    33d6:	9f 5f       	subi	r25, 0xFF	; 255
    33d8:	9f 15       	cp	r25, r15
    33da:	b8 f3       	brcs	.-18     	; 0x33ca <RFM22RXFIFO(unsigned char*, unsigned char)+0x42>
    { buf[i] = _RFM22_io(0);  }
  _RFM22_DESELECT();
    33dc:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    33de:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    33e0:	88 e8       	ldi	r24, 0x88	; 136
    33e2:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    33e4:	0d b4       	in	r0, 0x2d	; 45
    33e6:	07 fe       	sbrs	r0, 7
    33e8:	fd cf       	rjmp	.-6      	; 0x33e4 <RFM22RXFIFO(unsigned char*, unsigned char)+0x5c>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    33ea:	83 e0       	ldi	r24, 0x03	; 3
    33ec:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    33ee:	0d b4       	in	r0, 0x2d	; 45
    33f0:	07 fe       	sbrs	r0, 7
    33f2:	fd cf       	rjmp	.-6      	; 0x33ee <RFM22RXFIFO(unsigned char*, unsigned char)+0x66>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    33f4:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    33f6:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    33f8:	88 e8       	ldi	r24, 0x88	; 136
    33fa:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    33fc:	0d b4       	in	r0, 0x2d	; 45
    33fe:	07 fe       	sbrs	r0, 7
    3400:	fd cf       	rjmp	.-6      	; 0x33fc <RFM22RXFIFO(unsigned char*, unsigned char)+0x74>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3402:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3404:	0d b4       	in	r0, 0x2d	; 45
    3406:	07 fe       	sbrs	r0, 7
    3408:	fd cf       	rjmp	.-6      	; 0x3404 <RFM22RXFIFO(unsigned char*, unsigned char)+0x7c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    340a:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    340c:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    340e:	85 e8       	ldi	r24, 0x85	; 133
    3410:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3412:	0d b4       	in	r0, 0x2d	; 45
    3414:	07 fe       	sbrs	r0, 7
    3416:	fd cf       	rjmp	.-6      	; 0x3412 <RFM22RXFIFO(unsigned char*, unsigned char)+0x8a>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3418:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    341a:	0d b4       	in	r0, 0x2d	; 45
    341c:	07 fe       	sbrs	r0, 7
    341e:	fd cf       	rjmp	.-6      	; 0x341a <RFM22RXFIFO(unsigned char*, unsigned char)+0x92>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3420:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3422:	0d b4       	in	r0, 0x2d	; 45
    3424:	07 fe       	sbrs	r0, 7
    3426:	fd cf       	rjmp	.-6      	; 0x3422 <RFM22RXFIFO(unsigned char*, unsigned char)+0x9a>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    3428:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    342a:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    342c:	83 e8       	ldi	r24, 0x83	; 131
    342e:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3430:	0d b4       	in	r0, 0x2d	; 45
    3432:	07 fe       	sbrs	r0, 7
    3434:	fd cf       	rjmp	.-6      	; 0x3430 <RFM22RXFIFO(unsigned char*, unsigned char)+0xa8>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3436:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3438:	0d b4       	in	r0, 0x2d	; 45
    343a:	07 fe       	sbrs	r0, 7
    343c:	fd cf       	rjmp	.-6      	; 0x3438 <RFM22RXFIFO(unsigned char*, unsigned char)+0xb0>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    343e:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3440:	0d b4       	in	r0, 0x2d	; 45
    3442:	07 fe       	sbrs	r0, 7
    3444:	fd cf       	rjmp	.-6      	; 0x3440 <RFM22RXFIFO(unsigned char*, unsigned char)+0xb8>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    3446:	2a 9a       	sbi	0x05, 2	; 5
  _RFM22WriteReg16Bit0(RFM22REG_INT_ENABLE1);
  // Clear any interrupts already/still pending...
  _RFM22ClearInterrupts();  
  //_RFM22WriteReg8Bit(0xd, 0x1f); // Drive GPIO2 to ground as output... (Move to general register settings.)

  if(neededEnable) { powerDownSPI(); }
    3448:	44 23       	and	r20, r20
    344a:	11 f0       	breq	.+4      	; 0x3450 <RFM22RXFIFO(unsigned char*, unsigned char)+0xc8>
    344c:	0e 94 25 18 	call	0x304a	; 0x304a <powerDownSPI()>
  }
    3450:	1f 91       	pop	r17
    3452:	0f 91       	pop	r16
    3454:	ff 90       	pop	r15
    3456:	08 95       	ret

00003458 <RFM22SetUpRX(unsigned char, bool, bool)>:
  _RFM22_DESELECT();
  if(neededEnable) { powerDownSPI(); }
  }

// Put RFM22 into RX mode with given RX FIFO 'nearly-full' threshold and optional interrupts enabled.
void RFM22SetUpRX(const uint8_t nearlyFullThreshold, const bool syncInt, const bool dataInt)
    3458:	ff 92       	push	r15
    345a:	0f 93       	push	r16
    345c:	1f 93       	push	r17
    345e:	18 2f       	mov	r17, r24
    3460:	f6 2e       	mov	r15, r22
    3462:	04 2f       	mov	r16, r20
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    3464:	0e 94 3f 18 	call	0x307e	; 0x307e <powerUpSPIIfDisabled()>
    3468:	28 2f       	mov	r18, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    346a:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    346c:	88 e8       	ldi	r24, 0x88	; 136
    346e:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3470:	0d b4       	in	r0, 0x2d	; 45
    3472:	07 fe       	sbrs	r0, 7
    3474:	fd cf       	rjmp	.-6      	; 0x3470 <RFM22SetUpRX(unsigned char, bool, bool)+0x18>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3476:	83 e0       	ldi	r24, 0x03	; 3
    3478:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    347a:	0d b4       	in	r0, 0x2d	; 45
    347c:	07 fe       	sbrs	r0, 7
    347e:	fd cf       	rjmp	.-6      	; 0x347a <RFM22SetUpRX(unsigned char, bool, bool)+0x22>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    3480:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    3482:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3484:	88 e8       	ldi	r24, 0x88	; 136
    3486:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3488:	0d b4       	in	r0, 0x2d	; 45
    348a:	07 fe       	sbrs	r0, 7
    348c:	fd cf       	rjmp	.-6      	; 0x3488 <RFM22SetUpRX(unsigned char, bool, bool)+0x30>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    348e:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3490:	0d b4       	in	r0, 0x2d	; 45
    3492:	07 fe       	sbrs	r0, 7
    3494:	fd cf       	rjmp	.-6      	; 0x3490 <RFM22SetUpRX(unsigned char, bool, bool)+0x38>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    3496:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    3498:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    349a:	8e ef       	ldi	r24, 0xFE	; 254
    349c:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    349e:	0d b4       	in	r0, 0x2d	; 45
    34a0:	07 fe       	sbrs	r0, 7
    34a2:	fd cf       	rjmp	.-6      	; 0x349e <RFM22SetUpRX(unsigned char, bool, bool)+0x46>
  // Clear RX and TX FIFOs.
  _RFM22WriteReg8Bit(RFM22REG_OP_CTRL2, 3); // FFCLRTX | FFCLRTX
  _RFM22WriteReg8Bit(RFM22REG_OP_CTRL2, 0);

  // Set FIFO RX almost-full threshold as specified.
  _RFM22WriteReg8Bit(RFM22REG_RX_FIFO_CTRL, min(nearlyFullThreshold, 63));
    34a4:	81 2f       	mov	r24, r17
    34a6:	10 34       	cpi	r17, 0x40	; 64
    34a8:	08 f0       	brcs	.+2      	; 0x34ac <RFM22SetUpRX(unsigned char, bool, bool)+0x54>
    34aa:	8f e3       	ldi	r24, 0x3F	; 63

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    34ac:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    34ae:	0d b4       	in	r0, 0x2d	; 45
    34b0:	07 fe       	sbrs	r0, 7
    34b2:	fd cf       	rjmp	.-6      	; 0x34ae <RFM22SetUpRX(unsigned char, bool, bool)+0x56>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    34b4:	2a 9a       	sbi	0x05, 2	; 5

  // Set FIFO RX almost-full threshold as specified.
  _RFM22WriteReg8Bit(RFM22REG_RX_FIFO_CTRL, min(nearlyFullThreshold, 63));

  // Enable requested RX-related interrupts.
  _RFM22WriteReg8Bit(RFM22REG_INT_ENABLE1, (dataInt?0x10:0)); // enrxffafull: Enable RX FIFO Almost Full.
    34b6:	00 23       	and	r16, r16
    34b8:	11 f4       	brne	.+4      	; 0x34be <RFM22SetUpRX(unsigned char, bool, bool)+0x66>
    34ba:	90 e0       	ldi	r25, 0x00	; 0
    34bc:	01 c0       	rjmp	.+2      	; 0x34c0 <RFM22SetUpRX(unsigned char, bool, bool)+0x68>
    34be:	90 e1       	ldi	r25, 0x10	; 16

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    34c0:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    34c2:	85 e8       	ldi	r24, 0x85	; 133
    34c4:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    34c6:	0d b4       	in	r0, 0x2d	; 45
    34c8:	07 fe       	sbrs	r0, 7
    34ca:	fd cf       	rjmp	.-6      	; 0x34c6 <RFM22SetUpRX(unsigned char, bool, bool)+0x6e>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    34cc:	9e bd       	out	0x2e, r25	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    34ce:	0d b4       	in	r0, 0x2d	; 45
    34d0:	07 fe       	sbrs	r0, 7
    34d2:	fd cf       	rjmp	.-6      	; 0x34ce <RFM22SetUpRX(unsigned char, bool, bool)+0x76>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    34d4:	2a 9a       	sbi	0x05, 2	; 5
  // Set FIFO RX almost-full threshold as specified.
  _RFM22WriteReg8Bit(RFM22REG_RX_FIFO_CTRL, min(nearlyFullThreshold, 63));

  // Enable requested RX-related interrupts.
  _RFM22WriteReg8Bit(RFM22REG_INT_ENABLE1, (dataInt?0x10:0)); // enrxffafull: Enable RX FIFO Almost Full.
  _RFM22WriteReg8Bit(RFM22REG_INT_ENABLE2, (syncInt?0x80:0)); // enswdet: Enable Sync Word Detected.
    34d6:	ff 20       	and	r15, r15
    34d8:	11 f4       	brne	.+4      	; 0x34de <RFM22SetUpRX(unsigned char, bool, bool)+0x86>
    34da:	90 e0       	ldi	r25, 0x00	; 0
    34dc:	01 c0       	rjmp	.+2      	; 0x34e0 <RFM22SetUpRX(unsigned char, bool, bool)+0x88>
    34de:	90 e8       	ldi	r25, 0x80	; 128

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    34e0:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    34e2:	86 e8       	ldi	r24, 0x86	; 134
    34e4:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    34e6:	0d b4       	in	r0, 0x2d	; 45
    34e8:	07 fe       	sbrs	r0, 7
    34ea:	fd cf       	rjmp	.-6      	; 0x34e6 <RFM22SetUpRX(unsigned char, bool, bool)+0x8e>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    34ec:	9e bd       	out	0x2e, r25	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    34ee:	0d b4       	in	r0, 0x2d	; 45
    34f0:	07 fe       	sbrs	r0, 7
    34f2:	fd cf       	rjmp	.-6      	; 0x34ee <RFM22SetUpRX(unsigned char, bool, bool)+0x96>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    34f4:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    34f6:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    34f8:	83 e8       	ldi	r24, 0x83	; 131
    34fa:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    34fc:	0d b4       	in	r0, 0x2d	; 45
    34fe:	07 fe       	sbrs	r0, 7
    3500:	fd cf       	rjmp	.-6      	; 0x34fc <RFM22SetUpRX(unsigned char, bool, bool)+0xa4>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3502:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3504:	0d b4       	in	r0, 0x2d	; 45
    3506:	07 fe       	sbrs	r0, 7
    3508:	fd cf       	rjmp	.-6      	; 0x3504 <RFM22SetUpRX(unsigned char, bool, bool)+0xac>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    350a:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    350c:	0d b4       	in	r0, 0x2d	; 45
    350e:	07 fe       	sbrs	r0, 7
    3510:	fd cf       	rjmp	.-6      	; 0x350c <RFM22SetUpRX(unsigned char, bool, bool)+0xb4>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    3512:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    3514:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3516:	87 e8       	ldi	r24, 0x87	; 135
    3518:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    351a:	0d b4       	in	r0, 0x2d	; 45
    351c:	07 fe       	sbrs	r0, 7
    351e:	fd cf       	rjmp	.-6      	; 0x351a <RFM22SetUpRX(unsigned char, bool, bool)+0xc2>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3520:	85 e0       	ldi	r24, 0x05	; 5
    3522:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3524:	0d b4       	in	r0, 0x2d	; 45
    3526:	07 fe       	sbrs	r0, 7
    3528:	fd cf       	rjmp	.-6      	; 0x3524 <RFM22SetUpRX(unsigned char, bool, bool)+0xcc>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    352a:	2a 9a       	sbi	0x05, 2	; 5
  _RFM22ClearInterrupts();

  // Start listening.
  _RFM22ModeRX();
  
  if(neededEnable) { powerDownSPI(); }
    352c:	22 23       	and	r18, r18
    352e:	11 f0       	breq	.+4      	; 0x3534 <RFM22SetUpRX(unsigned char, bool, bool)+0xdc>
    3530:	0e 94 25 18 	call	0x304a	; 0x304a <powerDownSPI()>
  }
    3534:	1f 91       	pop	r17
    3536:	0f 91       	pop	r16
    3538:	ff 90       	pop	r15
    353a:	08 95       	ret

0000353c <RFM22QueueCmdToFF(unsigned char*)>:

// Clears the RFM22 TX FIFO and queues up ready to send via the TXFIFO the 0xff-terminated bytes starting at bptr.
// This routine does not change the command area.
// This uses an efficient burst write.
// For DEBUG can abort after (over-)filling the 64-byte FIFO at no extra cost with a check before spinning waiting for SPI byte to be sent.
void RFM22QueueCmdToFF(uint8_t *bptr)
    353c:	cf 93       	push	r28
    353e:	df 93       	push	r29
    3540:	ec 01       	movw	r28, r24
  {
#if 0 && defined(DEBUG)
  if(0 == *bptr) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22QueueCmdToFF: buffer uninitialised"); panic(); } 
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
    3542:	0e 94 3f 18 	call	0x307e	; 0x307e <powerUpSPIIfDisabled()>
    3546:	98 2f       	mov	r25, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    3548:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    354a:	88 e8       	ldi	r24, 0x88	; 136
    354c:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    354e:	0d b4       	in	r0, 0x2d	; 45
    3550:	07 fe       	sbrs	r0, 7
    3552:	fd cf       	rjmp	.-6      	; 0x354e <RFM22QueueCmdToFF(unsigned char*)+0x12>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3554:	81 e0       	ldi	r24, 0x01	; 1
    3556:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3558:	0d b4       	in	r0, 0x2d	; 45
    355a:	07 fe       	sbrs	r0, 7
    355c:	fd cf       	rjmp	.-6      	; 0x3558 <RFM22QueueCmdToFF(unsigned char*)+0x1c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    355e:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    3560:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3562:	88 e8       	ldi	r24, 0x88	; 136
    3564:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3566:	0d b4       	in	r0, 0x2d	; 45
    3568:	07 fe       	sbrs	r0, 7
    356a:	fd cf       	rjmp	.-6      	; 0x3566 <RFM22QueueCmdToFF(unsigned char*)+0x2a>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    356c:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    356e:	0d b4       	in	r0, 0x2d	; 45
    3570:	07 fe       	sbrs	r0, 7
    3572:	fd cf       	rjmp	.-6      	; 0x356e <RFM22QueueCmdToFF(unsigned char*)+0x32>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    3574:	2a 9a       	sbi	0x05, 2	; 5
  if(0 == *bptr) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22QueueCmdToFF: buffer uninitialised"); panic(); } 
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
  // Clear the TX FIFO.
  _RFM22ClearTXFIFO();
  _RFM22_SELECT();
    3576:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3578:	8f ef       	ldi	r24, 0xFF	; 255
    357a:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    357c:	0d b4       	in	r0, 0x2d	; 45
    357e:	07 fe       	sbrs	r0, 7
    3580:	fd cf       	rjmp	.-6      	; 0x357c <RFM22QueueCmdToFF(unsigned char*)+0x40>
    3582:	04 c0       	rjmp	.+8      	; 0x358c <RFM22QueueCmdToFF(unsigned char*)+0x50>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3584:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3586:	0d b4       	in	r0, 0x2d	; 45
    3588:	07 fe       	sbrs	r0, 7
    358a:	fd cf       	rjmp	.-6      	; 0x3586 <RFM22QueueCmdToFF(unsigned char*)+0x4a>
    SPDR = val;
    if(--i < 0) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22QueueCmdToFF: buffer unterminated"); panic(); }
    while (!(SPSR & _BV(SPIF))) { }
    }
#else
  while((uint8_t)0xff != (val = *bptr++)) { _RFM22_wr(val); }
    358c:	89 91       	ld	r24, Y+
    358e:	8f 3f       	cpi	r24, 0xFF	; 255
    3590:	c9 f7       	brne	.-14     	; 0x3584 <RFM22QueueCmdToFF(unsigned char*)+0x48>
#endif
  _RFM22_DESELECT();
    3592:	2a 9a       	sbi	0x05, 2	; 5
  if(neededEnable) { powerDownSPI(); }
    3594:	99 23       	and	r25, r25
    3596:	11 f0       	breq	.+4      	; 0x359c <RFM22QueueCmdToFF(unsigned char*)+0x60>
    3598:	0e 94 25 18 	call	0x304a	; 0x304a <powerDownSPI()>
  }
    359c:	df 91       	pop	r29
    359e:	cf 91       	pop	r28
    35a0:	08 95       	ret

000035a2 <RFM22RegisterBlockSetup(unsigned char const (*) [2])>:


// Configure the radio from a list of register/value pairs in readonly PROGMEM/Flash, terminating with an 0xff register value.
// NOTE: argument is not a pointer into SRAM, it is into PROGMEM!
// Could optimise case where multiple values are for successive RFM22 registers by using burst write.
void RFM22RegisterBlockSetup(const uint8_t registerValues[][2])
    35a2:	cf 93       	push	r28
    35a4:	df 93       	push	r29
    35a6:	ec 01       	movw	r28, r24
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    35a8:	0e 94 3f 18 	call	0x307e	; 0x307e <powerUpSPIIfDisabled()>
  for( ; ; )
    {
    const uint8_t reg = pgm_read_byte(&(registerValues[0][0]));
    35ac:	fe 01       	movw	r30, r28
    35ae:	94 91       	lpm	r25, Z+
    const uint8_t val = pgm_read_byte(&(registerValues[0][1]));
    35b0:	21 96       	adiw	r28, 0x01	; 1
    35b2:	fe 01       	movw	r30, r28
    35b4:	24 91       	lpm	r18, Z+
    35b6:	21 97       	sbiw	r28, 0x01	; 1
    if(0xff == reg) { break; }
    35b8:	9f 3f       	cpi	r25, 0xFF	; 255
    35ba:	69 f0       	breq	.+26     	; 0x35d6 <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x34>

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    35bc:	2a 98       	cbi	0x05, 2	; 5
  _RFM22_wr(addr | 0x80); // Force to write.
    35be:	90 68       	ori	r25, 0x80	; 128

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    35c0:	9e bd       	out	0x2e, r25	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    35c2:	0d b4       	in	r0, 0x2d	; 45
    35c4:	07 fe       	sbrs	r0, 7
    35c6:	fd cf       	rjmp	.-6      	; 0x35c2 <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x20>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    35c8:	2e bd       	out	0x2e, r18	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    35ca:	0d b4       	in	r0, 0x2d	; 45
    35cc:	07 fe       	sbrs	r0, 7
    35ce:	fd cf       	rjmp	.-6      	; 0x35ca <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x28>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    35d0:	2a 9a       	sbi	0x05, 2	; 5
    DEBUG_SERIAL_PRINT_FLASHSTRING(" = 0x");
    DEBUG_SERIAL_PRINTFMT(val, HEX);
    DEBUG_SERIAL_PRINTLN();
#endif
    _RFM22WriteReg8Bit(reg, val);
    ++registerValues;
    35d2:	22 96       	adiw	r28, 0x02	; 2
    35d4:	eb cf       	rjmp	.-42     	; 0x35ac <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0xa>
    }
  if(neededEnable) { powerDownSPI(); }
    35d6:	88 23       	and	r24, r24
    35d8:	11 f0       	breq	.+4      	; 0x35de <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x3c>
    35da:	0e 94 25 18 	call	0x304a	; 0x304a <powerDownSPI()>
  }
    35de:	df 91       	pop	r29
    35e0:	cf 91       	pop	r28
    35e2:	08 95       	ret

000035e4 <RFM22PowerOnInit()>:
void RFM22PowerOnInit()
  {
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22 reset...");
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
    35e4:	0e 94 3f 18 	call	0x307e	; 0x307e <powerUpSPIIfDisabled()>
    35e8:	98 2f       	mov	r25, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    35ea:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    35ec:	87 e8       	ldi	r24, 0x87	; 135
    35ee:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    35f0:	0d b4       	in	r0, 0x2d	; 45
    35f2:	07 fe       	sbrs	r0, 7
    35f4:	fd cf       	rjmp	.-6      	; 0x35f0 <RFM22PowerOnInit()+0xc>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    35f6:	80 e8       	ldi	r24, 0x80	; 128
    35f8:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    35fa:	0d b4       	in	r0, 0x2d	; 45
    35fc:	07 fe       	sbrs	r0, 7
    35fe:	fd cf       	rjmp	.-6      	; 0x35fa <RFM22PowerOnInit()+0x16>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    3600:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    3602:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3604:	87 e8       	ldi	r24, 0x87	; 135
    3606:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3608:	0d b4       	in	r0, 0x2d	; 45
    360a:	07 fe       	sbrs	r0, 7
    360c:	fd cf       	rjmp	.-6      	; 0x3608 <RFM22PowerOnInit()+0x24>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    360e:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3610:	0d b4       	in	r0, 0x2d	; 45
    3612:	07 fe       	sbrs	r0, 7
    3614:	fd cf       	rjmp	.-6      	; 0x3610 <RFM22PowerOnInit()+0x2c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    3616:	2a 9a       	sbi	0x05, 2	; 5
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22 reset...");
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
  _RFM22WriteReg8Bit(RFM22REG_OP_CTRL1, RFM22REG_OP_CTRL1_SWRES);
  _RFM22ModeStandby();
  if(neededEnable) { powerDownSPI(); }
    3618:	99 23       	and	r25, r25
    361a:	11 f0       	breq	.+4      	; 0x3620 <RFM22PowerOnInit()+0x3c>
    361c:	0e 94 25 18 	call	0x304a	; 0x304a <powerDownSPI()>
    3620:	08 95       	ret

00003622 <RFM22RSSI()>:
  return(result);
  }

// Get current RSSI.
// Only valid when in RX mode.
uint8_t RFM22RSSI() 
    3622:	1f 93       	push	r17
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    3624:	0e 94 3f 18 	call	0x307e	; 0x307e <powerUpSPIIfDisabled()>
    3628:	98 2f       	mov	r25, r24

// Read from 8-bit register on RFM22.
// SPI must already be configured and running.
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
    362a:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    362c:	86 e2       	ldi	r24, 0x26	; 38
    362e:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3630:	0d b4       	in	r0, 0x2d	; 45
    3632:	07 fe       	sbrs	r0, 7
    3634:	fd cf       	rjmp	.-6      	; 0x3630 <RFM22RSSI()+0xe>
  return(SPDR);
    3636:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    3638:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    363a:	0d b4       	in	r0, 0x2d	; 45
    363c:	07 fe       	sbrs	r0, 7
    363e:	fd cf       	rjmp	.-6      	; 0x363a <RFM22RSSI()+0x18>
  return(SPDR);
    3640:	1e b5       	in	r17, 0x2e	; 46
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  const uint8_t result = _RFM22_io(0); // Dummy value...
  _RFM22_DESELECT();
    3642:	2a 9a       	sbi	0x05, 2	; 5
// Only valid when in RX mode.
uint8_t RFM22RSSI() 
  {
  const bool neededEnable = powerUpSPIIfDisabled();
  const uint8_t rssi = _RFM22ReadReg8Bit(RFM22REG_RSSI);
  if(neededEnable) { powerDownSPI(); }
    3644:	99 23       	and	r25, r25
    3646:	11 f0       	breq	.+4      	; 0x364c <RFM22RSSI()+0x2a>
    3648:	0e 94 25 18 	call	0x304a	; 0x304a <powerDownSPI()>
  return(rssi);
  }
    364c:	81 2f       	mov	r24, r17
    364e:	1f 91       	pop	r17
    3650:	08 95       	ret

00003652 <RFM22ReadStatusBoth()>:
  }

// Read status (both registers) and clear interrupts.
// Status register 1 is returned in the top 8 bits, register 2 in the bottom 8 bits.
// Zero indicates no pending interrupts or other status flags set.
uint16_t RFM22ReadStatusBoth()
    3652:	0f 93       	push	r16
    3654:	1f 93       	push	r17
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    3656:	0e 94 3f 18 	call	0x307e	; 0x307e <powerUpSPIIfDisabled()>
    365a:	98 2f       	mov	r25, r24

// Read from 16-bit big-endian register pair.
// The result has the first (lower-numbered) register in the most significant byte.
static uint16_t _RFM22ReadReg16Bit(const uint8_t addr)
{
  _RFM22_SELECT();
    365c:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    365e:	83 e0       	ldi	r24, 0x03	; 3
    3660:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3662:	0d b4       	in	r0, 0x2d	; 45
    3664:	07 fe       	sbrs	r0, 7
    3666:	fd cf       	rjmp	.-6      	; 0x3662 <RFM22ReadStatusBoth()+0x10>
  return(SPDR);
    3668:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    366a:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    366c:	0d b4       	in	r0, 0x2d	; 45
    366e:	07 fe       	sbrs	r0, 7
    3670:	fd cf       	rjmp	.-6      	; 0x366c <RFM22ReadStatusBoth()+0x1a>
  return(SPDR);
    3672:	0e b5       	in	r16, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    3674:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3676:	0d b4       	in	r0, 0x2d	; 45
    3678:	07 fe       	sbrs	r0, 7
    367a:	fd cf       	rjmp	.-6      	; 0x3676 <RFM22ReadStatusBoth()+0x24>
  return(SPDR);
    367c:	1e b5       	in	r17, 0x2e	; 46
{
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  uint16_t result = ((uint16_t)_RFM22_io(0)) << 8;
  result |= ((uint16_t)_RFM22_io(0));
  _RFM22_DESELECT();
    367e:	2a 9a       	sbi	0x05, 2	; 5
// Zero indicates no pending interrupts or other status flags set.
uint16_t RFM22ReadStatusBoth()
  {
  const bool neededEnable = powerUpSPIIfDisabled();
  const uint16_t result = _RFM22ReadReg16Bit(RFM22REG_INT_STATUS1);
  if(neededEnable) { powerDownSPI(); }
    3680:	99 23       	and	r25, r25
    3682:	11 f0       	breq	.+4      	; 0x3688 <RFM22ReadStatusBoth()+0x36>
    3684:	0e 94 25 18 	call	0x304a	; 0x304a <powerDownSPI()>
    3688:	90 2f       	mov	r25, r16
    368a:	80 e0       	ldi	r24, 0x00	; 0
    368c:	21 2f       	mov	r18, r17
    368e:	30 e0       	ldi	r19, 0x00	; 0
    3690:	28 2b       	or	r18, r24
    3692:	39 2b       	or	r19, r25
  return(result);
  }
    3694:	c9 01       	movw	r24, r18
    3696:	1f 91       	pop	r17
    3698:	0f 91       	pop	r16
    369a:	08 95       	ret

0000369c <RFM22ModeStandbyAndClearState()>:
// Enter standby mode (consume least possible power but retain register contents).
// FIFO state and pending interrupts are cleared.
// Typical consumption in standby 450nA (cf 15nA when shut down, 8.5mA TUNE, 18--80mA RX/TX).
void RFM22ModeStandbyAndClearState()
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    369c:	0e 94 3f 18 	call	0x307e	; 0x307e <powerUpSPIIfDisabled()>
    36a0:	98 2f       	mov	r25, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    36a2:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    36a4:	87 e8       	ldi	r24, 0x87	; 135
    36a6:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    36a8:	0d b4       	in	r0, 0x2d	; 45
    36aa:	07 fe       	sbrs	r0, 7
    36ac:	fd cf       	rjmp	.-6      	; 0x36a8 <RFM22ModeStandbyAndClearState()+0xc>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    36ae:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    36b0:	0d b4       	in	r0, 0x2d	; 45
    36b2:	07 fe       	sbrs	r0, 7
    36b4:	fd cf       	rjmp	.-6      	; 0x36b0 <RFM22ModeStandbyAndClearState()+0x14>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    36b6:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    36b8:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    36ba:	88 e8       	ldi	r24, 0x88	; 136
    36bc:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    36be:	0d b4       	in	r0, 0x2d	; 45
    36c0:	07 fe       	sbrs	r0, 7
    36c2:	fd cf       	rjmp	.-6      	; 0x36be <RFM22ModeStandbyAndClearState()+0x22>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    36c4:	83 e0       	ldi	r24, 0x03	; 3
    36c6:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    36c8:	0d b4       	in	r0, 0x2d	; 45
    36ca:	07 fe       	sbrs	r0, 7
    36cc:	fd cf       	rjmp	.-6      	; 0x36c8 <RFM22ModeStandbyAndClearState()+0x2c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    36ce:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    36d0:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    36d2:	88 e8       	ldi	r24, 0x88	; 136
    36d4:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    36d6:	0d b4       	in	r0, 0x2d	; 45
    36d8:	07 fe       	sbrs	r0, 7
    36da:	fd cf       	rjmp	.-6      	; 0x36d6 <RFM22ModeStandbyAndClearState()+0x3a>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    36dc:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    36de:	0d b4       	in	r0, 0x2d	; 45
    36e0:	07 fe       	sbrs	r0, 7
    36e2:	fd cf       	rjmp	.-6      	; 0x36de <RFM22ModeStandbyAndClearState()+0x42>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    36e4:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    36e6:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    36e8:	85 e8       	ldi	r24, 0x85	; 133
    36ea:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    36ec:	0d b4       	in	r0, 0x2d	; 45
    36ee:	07 fe       	sbrs	r0, 7
    36f0:	fd cf       	rjmp	.-6      	; 0x36ec <RFM22ModeStandbyAndClearState()+0x50>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    36f2:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    36f4:	0d b4       	in	r0, 0x2d	; 45
    36f6:	07 fe       	sbrs	r0, 7
    36f8:	fd cf       	rjmp	.-6      	; 0x36f4 <RFM22ModeStandbyAndClearState()+0x58>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    36fa:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    36fc:	0d b4       	in	r0, 0x2d	; 45
    36fe:	07 fe       	sbrs	r0, 7
    3700:	fd cf       	rjmp	.-6      	; 0x36fc <RFM22ModeStandbyAndClearState()+0x60>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    3702:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    3704:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3706:	83 e8       	ldi	r24, 0x83	; 131
    3708:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    370a:	0d b4       	in	r0, 0x2d	; 45
    370c:	07 fe       	sbrs	r0, 7
    370e:	fd cf       	rjmp	.-6      	; 0x370a <RFM22ModeStandbyAndClearState()+0x6e>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3710:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3712:	0d b4       	in	r0, 0x2d	; 45
    3714:	07 fe       	sbrs	r0, 7
    3716:	fd cf       	rjmp	.-6      	; 0x3712 <RFM22ModeStandbyAndClearState()+0x76>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3718:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    371a:	0d b4       	in	r0, 0x2d	; 45
    371c:	07 fe       	sbrs	r0, 7
    371e:	fd cf       	rjmp	.-6      	; 0x371a <RFM22ModeStandbyAndClearState()+0x7e>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    3720:	2a 9a       	sbi	0x05, 2	; 5
//  _RFM22WriteReg8Bit(RFM22REG_INT_ENABLE2, 0); // TODO: combine in burst write with previous...
  _RFM22WriteReg16Bit0(RFM22REG_INT_ENABLE1);
  // Clear any interrupts already/still pending...
  _RFM22ClearInterrupts();  
  //_RFM22WriteReg8Bit(0xd, 0x1f); // Drive GPIO2 to ground as output... (Move to general register settings.)
  if(neededEnable) { powerDownSPI(); }
    3722:	99 23       	and	r25, r25
    3724:	11 f0       	breq	.+4      	; 0x372a <RFM22ModeStandbyAndClearState()+0x8e>
    3726:	0e 94 25 18 	call	0x304a	; 0x304a <powerDownSPI()>
    372a:	08 95       	ret

0000372c <RFM22TXFIFO()>:

// Transmit contents of on-chip TX FIFO: caller should revert to low-power standby mode (etc) if required.
// Returns true if packet apparently sent correctly/fully.
// Does not clear TX FIFO (so possible to re-send immediately).
// Note: Reliability possibly helped by early move to 'tune' mode to work other than with default (4MHz) lowish PICAXE clock speeds.
bool RFM22TXFIFO()
    372c:	ff 92       	push	r15
    372e:	0f 93       	push	r16
    3730:	1f 93       	push	r17
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    3732:	0e 94 3f 18 	call	0x307e	; 0x307e <powerUpSPIIfDisabled()>
    3736:	f8 2e       	mov	r15, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    3738:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    373a:	85 e8       	ldi	r24, 0x85	; 133
    373c:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    373e:	0d b4       	in	r0, 0x2d	; 45
    3740:	07 fe       	sbrs	r0, 7
    3742:	fd cf       	rjmp	.-6      	; 0x373e <RFM22TXFIFO()+0x12>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3744:	84 e0       	ldi	r24, 0x04	; 4
    3746:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3748:	0d b4       	in	r0, 0x2d	; 45
    374a:	07 fe       	sbrs	r0, 7
    374c:	fd cf       	rjmp	.-6      	; 0x3748 <RFM22TXFIFO()+0x1c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    374e:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    3750:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3752:	86 e8       	ldi	r24, 0x86	; 134
    3754:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3756:	0d b4       	in	r0, 0x2d	; 45
    3758:	07 fe       	sbrs	r0, 7
    375a:	fd cf       	rjmp	.-6      	; 0x3756 <RFM22TXFIFO()+0x2a>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    375c:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    375e:	0d b4       	in	r0, 0x2d	; 45
    3760:	07 fe       	sbrs	r0, 7
    3762:	fd cf       	rjmp	.-6      	; 0x375e <RFM22TXFIFO()+0x32>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    3764:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    3766:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3768:	83 e8       	ldi	r24, 0x83	; 131
    376a:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    376c:	0d b4       	in	r0, 0x2d	; 45
    376e:	07 fe       	sbrs	r0, 7
    3770:	fd cf       	rjmp	.-6      	; 0x376c <RFM22TXFIFO()+0x40>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3772:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3774:	0d b4       	in	r0, 0x2d	; 45
    3776:	07 fe       	sbrs	r0, 7
    3778:	fd cf       	rjmp	.-6      	; 0x3774 <RFM22TXFIFO()+0x48>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    377a:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    377c:	0d b4       	in	r0, 0x2d	; 45
    377e:	07 fe       	sbrs	r0, 7
    3780:	fd cf       	rjmp	.-6      	; 0x377c <RFM22TXFIFO()+0x50>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    3782:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    3784:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3786:	87 e8       	ldi	r24, 0x87	; 135
    3788:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    378a:	0d b4       	in	r0, 0x2d	; 45
    378c:	07 fe       	sbrs	r0, 7
    378e:	fd cf       	rjmp	.-6      	; 0x378a <RFM22TXFIFO()+0x5e>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    3790:	89 e0       	ldi	r24, 0x09	; 9
    3792:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3794:	0d b4       	in	r0, 0x2d	; 45
    3796:	07 fe       	sbrs	r0, 7
    3798:	fd cf       	rjmp	.-6      	; 0x3794 <RFM22TXFIFO()+0x68>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    379a:	2a 9a       	sbi	0x05, 2	; 5
    379c:	18 e0       	ldi	r17, 0x08	; 8

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    379e:	03 e0       	ldi	r16, 0x03	; 3
    37a0:	13 c0       	rjmp	.+38     	; 0x37c8 <RFM22TXFIFO()+0x9c>
  // Repeately nap until packet sent, with upper bound of ~120ms on TX time in case there is a problem.
  // TX time is ~1.6ms per byte at 5000bps.
  bool result = false; // Usual case is success.
  for(int8_t i = 8; --i >= 0; )
    {
    nap(WDTO_15MS); // Sleep in low power mode for a short time waiting for bits to be sent...
    37a2:	80 e0       	ldi	r24, 0x00	; 0
    37a4:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <nap(signed char)>

// Read from 8-bit register on RFM22.
// SPI must already be configured and running.
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
    37a8:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    37aa:	0e bd       	out	0x2e, r16	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    37ac:	0d b4       	in	r0, 0x2d	; 45
    37ae:	07 fe       	sbrs	r0, 7
    37b0:	fd cf       	rjmp	.-6      	; 0x37ac <RFM22TXFIFO()+0x80>
  return(SPDR);
    37b2:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    37b4:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    37b6:	0d b4       	in	r0, 0x2d	; 45
    37b8:	07 fe       	sbrs	r0, 7
    37ba:	fd cf       	rjmp	.-6      	; 0x37b6 <RFM22TXFIFO()+0x8a>
  return(SPDR);
    37bc:	8e b5       	in	r24, 0x2e	; 46
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  const uint8_t result = _RFM22_io(0); // Dummy value...
  _RFM22_DESELECT();
    37be:	2a 9a       	sbi	0x05, 2	; 5
  bool result = false; // Usual case is success.
  for(int8_t i = 8; --i >= 0; )
    {
    nap(WDTO_15MS); // Sleep in low power mode for a short time waiting for bits to be sent...
    const uint8_t status = _RFM22ReadReg8Bit(RFM22REG_INT_STATUS1); // TODO: could use nIRQ instead if available.
    if(status & 4) { result = true; break; } // Packet sent!
    37c0:	82 ff       	sbrs	r24, 2
    37c2:	02 c0       	rjmp	.+4      	; 0x37c8 <RFM22TXFIFO()+0x9c>
    37c4:	11 e0       	ldi	r17, 0x01	; 1
    37c6:	03 c0       	rjmp	.+6      	; 0x37ce <RFM22TXFIFO()+0xa2>
  _RFM22ModeTX(); // Enable TX mode and transmit TX FIFO contents.

  // Repeately nap until packet sent, with upper bound of ~120ms on TX time in case there is a problem.
  // TX time is ~1.6ms per byte at 5000bps.
  bool result = false; // Usual case is success.
  for(int8_t i = 8; --i >= 0; )
    37c8:	11 50       	subi	r17, 0x01	; 1
    37ca:	58 f7       	brcc	.-42     	; 0x37a2 <RFM22TXFIFO()+0x76>
    37cc:	10 e0       	ldi	r17, 0x00	; 0
    nap(WDTO_15MS); // Sleep in low power mode for a short time waiting for bits to be sent...
    const uint8_t status = _RFM22ReadReg8Bit(RFM22REG_INT_STATUS1); // TODO: could use nIRQ instead if available.
    if(status & 4) { result = true; break; } // Packet sent!
    }

  if(neededEnable) { powerDownSPI(); }
    37ce:	ff 20       	and	r15, r15
    37d0:	11 f0       	breq	.+4      	; 0x37d6 <RFM22TXFIFO()+0xaa>
    37d2:	0e 94 25 18 	call	0x304a	; 0x304a <powerDownSPI()>
  return(result);
  }
    37d6:	81 2f       	mov	r24, r17
    37d8:	1f 91       	pop	r17
    37da:	0f 91       	pop	r16
    37dc:	ff 90       	pop	r15
    37de:	08 95       	ret

000037e0 <RFM22CheckConnected()>:
  _RFM22ModeStandby();
  if(neededEnable) { powerDownSPI(); }
  }

// Returns true iff RFM22 (or RFM23) appears to be correctly connected.
bool RFM22CheckConnected()
    37e0:	0f 93       	push	r16
    37e2:	1f 93       	push	r17
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    37e4:	0e 94 3f 18 	call	0x307e	; 0x307e <powerUpSPIIfDisabled()>
    37e8:	08 2f       	mov	r16, r24

// Read from 8-bit register on RFM22.
// SPI must already be configured and running.
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
    37ea:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    37ec:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    37ee:	0d b4       	in	r0, 0x2d	; 45
    37f0:	07 fe       	sbrs	r0, 7
    37f2:	fd cf       	rjmp	.-6      	; 0x37ee <RFM22CheckConnected()+0xe>
  return(SPDR);
    37f4:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    37f6:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    37f8:	0d b4       	in	r0, 0x2d	; 45
    37fa:	07 fe       	sbrs	r0, 7
    37fc:	fd cf       	rjmp	.-6      	; 0x37f8 <RFM22CheckConnected()+0x18>
  return(SPDR);
    37fe:	1e b5       	in	r17, 0x2e	; 46
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  const uint8_t result = _RFM22_io(0); // Dummy value...
  _RFM22_DESELECT();
    3800:	2a 9a       	sbi	0x05, 2	; 5
bool RFM22CheckConnected()
  {
  const bool neededEnable = powerUpSPIIfDisabled();
  bool isOK = false;
  const uint8_t rType = _RFM22ReadReg8Bit(0); // May read as 0 if not connected at all.
  if(RFM22_SUPPORTED_DEVICE_TYPE == rType)
    3802:	18 30       	cpi	r17, 0x08	; 8
    3804:	a1 f4       	brne	.+40     	; 0x382e <RFM22CheckConnected()+0x4e>

// Read from 8-bit register on RFM22.
// SPI must already be configured and running.
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
    3806:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    3808:	81 e0       	ldi	r24, 0x01	; 1
    380a:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    380c:	0d b4       	in	r0, 0x2d	; 45
    380e:	07 fe       	sbrs	r0, 7
    3810:	fd cf       	rjmp	.-6      	; 0x380c <RFM22CheckConnected()+0x2c>
  return(SPDR);
    3812:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    3814:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3816:	0d b4       	in	r0, 0x2d	; 45
    3818:	07 fe       	sbrs	r0, 7
    381a:	fd cf       	rjmp	.-6      	; 0x3816 <RFM22CheckConnected()+0x36>
  return(SPDR);
    381c:	1e b5       	in	r17, 0x2e	; 46
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  const uint8_t result = _RFM22_io(0); // Dummy value...
  _RFM22_DESELECT();
    381e:	2a 9a       	sbi	0x05, 2	; 5
  bool isOK = false;
  const uint8_t rType = _RFM22ReadReg8Bit(0); // May read as 0 if not connected at all.
  if(RFM22_SUPPORTED_DEVICE_TYPE == rType)
    {
    const uint8_t rVersion = _RFM22ReadReg8Bit(1);
    if(RFM22_SUPPORTED_DEVICE_VERSION == rVersion)
    3820:	16 30       	cpi	r17, 0x06	; 6
    3822:	11 f4       	brne	.+4      	; 0x3828 <RFM22CheckConnected()+0x48>
    3824:	11 e0       	ldi	r17, 0x01	; 1
    3826:	10 c0       	rjmp	.+32     	; 0x3848 <RFM22CheckConnected()+0x68>
      { isOK = true; }
#if 1 && defined(DEBUG)
    else
      {
      DEBUG_SERIAL_PRINT_FLASHSTRING("RFM22 bad version: ");
    3828:	89 e3       	ldi	r24, 0x39	; 57
    382a:	91 e0       	ldi	r25, 0x01	; 1
    382c:	02 c0       	rjmp	.+4      	; 0x3832 <RFM22CheckConnected()+0x52>
#endif
    }
#if 1 && defined(DEBUG)
  else
    {
    DEBUG_SERIAL_PRINT_FLASHSTRING("RFM22 bad type: ");
    382e:	88 e2       	ldi	r24, 0x28	; 40
    3830:	91 e0       	ldi	r25, 0x01	; 1
    3832:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <serialPrintAndFlush(__FlashStringHelper const*)>
    DEBUG_SERIAL_PRINTFMT(rType, HEX);
    3836:	81 2f       	mov	r24, r17
    3838:	90 e0       	ldi	r25, 0x00	; 0
    383a:	60 e1       	ldi	r22, 0x10	; 16
    383c:	70 e0       	ldi	r23, 0x00	; 0
    383e:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <serialPrintAndFlush(int, int)>
    DEBUG_SERIAL_PRINTLN();
    3842:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <serialPrintlnAndFlush()>
    3846:	10 e0       	ldi	r17, 0x00	; 0
    }
#endif
  if(neededEnable) { powerDownSPI(); }
    3848:	00 23       	and	r16, r16
    384a:	11 f0       	breq	.+4      	; 0x3850 <RFM22CheckConnected()+0x70>
    384c:	0e 94 25 18 	call	0x304a	; 0x304a <powerDownSPI()>
  return(isOK);
  }
    3850:	81 2f       	mov	r24, r17
    3852:	1f 91       	pop	r17
    3854:	0f 91       	pop	r16
    3856:	08 95       	ret

00003858 <eeprom_read_byte>:


/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
    3858:	9c 01       	movw	r18, r24
{
    do {} while (!eeprom_is_ready ());
    385a:	f9 99       	sbic	0x1f, 1	; 31
    385c:	fe cf       	rjmp	.-4      	; 0x385a <eeprom_read_byte+0x2>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    385e:	32 bd       	out	0x22, r19	; 34
    3860:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    3862:	f8 9a       	sbi	0x1f, 0	; 31
    3864:	80 b5       	in	r24, 0x20	; 32
    return __result;
}
    3866:	08 95       	ret

00003868 <eeprom_write_byte>:
}

/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
    3868:	9c 01       	movw	r18, r24
{
    do {} while (!eeprom_is_ready ());
    386a:	f9 99       	sbic	0x1f, 1	; 31
    386c:	fe cf       	rjmp	.-4      	; 0x386a <eeprom_write_byte+0x2>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    386e:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    3870:	32 bd       	out	0x22, r19	; 34
    3872:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
    3874:	60 bd       	out	0x20, r22	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    3876:	0f b6       	in	r0, 0x3f	; 63
    3878:	f8 94       	cli
    387a:	fa 9a       	sbi	0x1f, 2	; 31
    387c:	f9 9a       	sbi	0x1f, 1	; 31
    387e:	0f be       	out	0x3f, r0	; 63
}
    3880:	08 95       	ret

00003882 <getMinutesSinceMidnightLT()>:
// Thread-safe and ISR-safe.
#ifndef getMinutesSinceMidnightLT
uint_least16_t getMinutesSinceMidnightLT()
  {
  uint_least16_t result;
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    3882:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3884:	f8 94       	cli
    { result = _minutesSinceMidnightLT; }
    3886:	20 91 32 03 	lds	r18, 0x0332
    388a:	30 91 33 03 	lds	r19, 0x0333
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    388e:	8f bf       	out	0x3f, r24	; 63
  return(result);
  }
    3890:	c9 01       	movw	r24, r18
    3892:	08 95       	ret

00003894 <getMinutesLT()>:
// Thread-safe and ISR-safe.
#ifndef getMinutesSinceMidnightLT
uint_least16_t getMinutesSinceMidnightLT()
  {
  uint_least16_t result;
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    3894:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3896:	f8 94       	cli
    { result = _minutesSinceMidnightLT; }
    3898:	80 91 32 03 	lds	r24, 0x0332
    389c:	90 91 33 03 	lds	r25, 0x0333
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    38a0:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    38a2:	6c e3       	ldi	r22, 0x3C	; 60
    38a4:	70 e0       	ldi	r23, 0x00	; 0
    38a6:	0e 94 13 3e 	call	0x7c26	; 0x7c26 <__udivmodhi4>
  }
#endif

// Get local time minutes from RTC [0,59].
// Thread-safe and ISR-safe.
uint_least8_t getMinutesLT() { return(getMinutesSinceMidnightLT() % 60); }
    38aa:	08 95       	ret

000038ac <getHoursLT()>:
// Thread-safe and ISR-safe.
#ifndef getMinutesSinceMidnightLT
uint_least16_t getMinutesSinceMidnightLT()
  {
  uint_least16_t result;
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    38ac:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    38ae:	f8 94       	cli
    { result = _minutesSinceMidnightLT; }
    38b0:	80 91 32 03 	lds	r24, 0x0332
    38b4:	90 91 33 03 	lds	r25, 0x0333
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    38b8:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    38ba:	6c e3       	ldi	r22, 0x3C	; 60
    38bc:	70 e0       	ldi	r23, 0x00	; 0
    38be:	0e 94 13 3e 	call	0x7c26	; 0x7c26 <__udivmodhi4>
    38c2:	86 2f       	mov	r24, r22
// Thread-safe and ISR-safe.
uint_least8_t getMinutesLT() { return(getMinutesSinceMidnightLT() % 60); }

// Get local time hours from RTC [0,23].
// Thread-safe and ISR-safe.
uint_least8_t getHoursLT() { return(getMinutesSinceMidnightLT() / 60); }
    38c4:	08 95       	ret

000038c6 <restoreRTC()>:

// Restore software RTC information from non-volatile (EEPROM) store, if possible.
// Returns true if the persisted data seemed valid and was restored, in full or part.
// To void on average using 15/2 minutes at each reset/restart,
// this starts the internal time a little over half way into the restored 15-minute slot.
bool restoreRTC()
    38c6:	1f 93       	push	r17
  {
  uint8_t persistedValue;
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    38c8:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    38ca:	f8 94       	cli
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    38cc:	88 e0       	ldi	r24, 0x08	; 8
    38ce:	90 e0       	ldi	r25, 0x00	; 0
    38d0:	6c e2       	ldi	r22, 0x2C	; 44
    38d2:	7c e1       	ldi	r23, 0x1C	; 28
    38d4:	0e 94 5f 04 	call	0x8be	; 0x8be <__eerd_word>
    {
    // Restore the persisted days, though ignore if apparently unset (all 1s).
    const uint16_t days = eeprom_read_word((uint16_t*)EE_START_RTC_DAY_PERSIST);
    if(days != (uint16_t)~0U) { _daysSince1999LT = days; }
    38d8:	2f ef       	ldi	r18, 0xFF	; 255
    38da:	8f 3f       	cpi	r24, 0xFF	; 255
    38dc:	92 07       	cpc	r25, r18
    38de:	21 f0       	breq	.+8      	; 0x38e8 <restoreRTC()+0x22>
    38e0:	90 93 35 03 	sts	0x0335, r25
    38e4:	80 93 34 03 	sts	0x0334, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    38e8:	f9 99       	sbic	0x1f, 1	; 31
    38ea:	fe cf       	rjmp	.-4      	; 0x38e8 <restoreRTC()+0x22>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    38ec:	8a e0       	ldi	r24, 0x0A	; 10
    38ee:	90 e0       	ldi	r25, 0x00	; 0
    38f0:	92 bd       	out	0x22, r25	; 34
    38f2:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    38f4:	f8 9a       	sbi	0x1f, 0	; 31
    38f6:	60 b5       	in	r22, 0x20	; 32
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    38f8:	1f bf       	out	0x3f, r17	; 63
    // Now recover persisted HH:MM value.
    persistedValue = eeprom_read_byte((uint8_t*)EE_START_RTC_HHMM_PERSIST);
    }

  // Abort if value clearly invalid, eg likely an unprogrammed (0xff) byte.
  if(persistedValue >= (24 << 3)) { return(false); }
    38fa:	60 3c       	cpi	r22, 0xC0	; 192
    38fc:	90 f5       	brcc	.+100    	; 0x3962 <restoreRTC()+0x9c>

  uint_least16_t minutesSinceMidnight = (persistedValue >> 3) * 60;
    38fe:	86 2f       	mov	r24, r22
    3900:	90 e0       	ldi	r25, 0x00	; 0
    3902:	23 e0       	ldi	r18, 0x03	; 3
    3904:	95 95       	asr	r25
    3906:	87 95       	ror	r24
    3908:	2a 95       	dec	r18
    390a:	e1 f7       	brne	.-8      	; 0x3904 <restoreRTC()+0x3e>
    390c:	2c e3       	ldi	r18, 0x3C	; 60
    390e:	30 e0       	ldi	r19, 0x00	; 0
    3910:	82 9f       	mul	r24, r18
    3912:	a0 01       	movw	r20, r0
    3914:	83 9f       	mul	r24, r19
    3916:	50 0d       	add	r21, r0
    3918:	92 9f       	mul	r25, r18
    391a:	50 0d       	add	r21, r0
    391c:	11 24       	eor	r1, r1
  minutesSinceMidnight += 8; // Start just over half-way into one quantum to minimise average time lost on restart.
    391e:	9a 01       	movw	r18, r20
    3920:	28 5f       	subi	r18, 0xF8	; 248
    3922:	3f 4f       	sbci	r19, 0xFF	; 255
  const uint8_t lowBits = persistedValue & 7; // Extract quarter-hour bits.
  switch(lowBits)
    3924:	86 2f       	mov	r24, r22
    3926:	87 70       	andi	r24, 0x07	; 7
    3928:	81 30       	cpi	r24, 0x01	; 1
    392a:	59 f0       	breq	.+22     	; 0x3942 <restoreRTC()+0x7c>
    392c:	81 30       	cpi	r24, 0x01	; 1
    392e:	28 f0       	brcs	.+10     	; 0x393a <restoreRTC()+0x74>
    3930:	83 30       	cpi	r24, 0x03	; 3
    3932:	59 f0       	breq	.+22     	; 0x394a <restoreRTC()+0x84>
    3934:	87 30       	cpi	r24, 0x07	; 7
    3936:	a9 f4       	brne	.+42     	; 0x3962 <restoreRTC()+0x9c>
    3938:	0b c0       	rjmp	.+22     	; 0x3950 <restoreRTC()+0x8a>
    {
    case 0: minutesSinceMidnight += 45; break;
    393a:	9a 01       	movw	r18, r20
    393c:	2b 5c       	subi	r18, 0xCB	; 203
    393e:	3f 4f       	sbci	r19, 0xFF	; 255
    3940:	07 c0       	rjmp	.+14     	; 0x3950 <restoreRTC()+0x8a>
    case 1: minutesSinceMidnight += 30; break;
    3942:	9a 01       	movw	r18, r20
    3944:	2a 5d       	subi	r18, 0xDA	; 218
    3946:	3f 4f       	sbci	r19, 0xFF	; 255
    3948:	03 c0       	rjmp	.+6      	; 0x3950 <restoreRTC()+0x8a>
    case 3: minutesSinceMidnight += 15; break;
    394a:	9a 01       	movw	r18, r20
    394c:	29 5e       	subi	r18, 0xE9	; 233
    394e:	3f 4f       	sbci	r19, 0xFF	; 255
    default: return(false); // Invalid bit pattern: abort.
    }

  // Set the hours and minutes (atomically).
  // Deliberately leave the seconds unset to avoid units becoming too synchronised with one another, increasing TX collisions, etc.
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    3950:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3952:	f8 94       	cli
    { _minutesSinceMidnightLT = minutesSinceMidnight; }
    3954:	30 93 33 03 	sts	0x0333, r19
    3958:	20 93 32 03 	sts	0x0332, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    395c:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
    395e:	81 e0       	ldi	r24, 0x01	; 1
    3960:	01 c0       	rjmp	.+2      	; 0x3964 <restoreRTC()+0x9e>

  return(true);
    3962:	80 e0       	ldi	r24, 0x00	; 0
  }
    3964:	1f 91       	pop	r17
    3966:	08 95       	ret

00003968 <persistRTC()>:
// but enough to help avoid the clock slipping too much during (say) a battery change.
// There is no point calling this more than (say) once per minute,
// though it will simply return relatively quickly from redundant calls.
// The RTC data is stored so as not to wear out AVR EEPROM for at least several years.
// IMPLEMENTATION OF THIS AND THE eeprom_smart_xxx_byte() ROUTINES IS CRITICAL TO PERFORMANCE AND LONGEVITY.
void persistRTC()
    3968:	1f 93       	push	r17
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    396a:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    396c:	f8 94       	cli
    {
    uint8_t quarterHours = (_minutesSinceMidnightLT / 15);
    396e:	80 91 32 03 	lds	r24, 0x0332
    3972:	90 91 33 03 	lds	r25, 0x0333
    3976:	6f e0       	ldi	r22, 0x0F	; 15
    3978:	70 e0       	ldi	r23, 0x00	; 0
    397a:	0e 94 13 3e 	call	0x7c26	; 0x7c26 <__udivmodhi4>
    uint8_t targetByte = (quarterHours << 1) & ~7U; // Bit pattern now hhhhh000 where hhhhh is whole hours [0,23].
    397e:	46 2f       	mov	r20, r22
    3980:	44 0f       	add	r20, r20
    3982:	48 7f       	andi	r20, 0xF8	; 248
    switch(quarterHours & 3)
    3984:	70 e0       	ldi	r23, 0x00	; 0
    3986:	63 70       	andi	r22, 0x03	; 3
    3988:	70 70       	andi	r23, 0x00	; 0
    398a:	61 30       	cpi	r22, 0x01	; 1
    398c:	71 05       	cpc	r23, r1
    398e:	39 f0       	breq	.+14     	; 0x399e <persistRTC()+0x36>
    3990:	62 30       	cpi	r22, 0x02	; 2
    3992:	71 05       	cpc	r23, r1
    3994:	31 f0       	breq	.+12     	; 0x39a2 <persistRTC()+0x3a>
    3996:	67 2b       	or	r22, r23
    3998:	29 f4       	brne	.+10     	; 0x39a4 <persistRTC()+0x3c>
      {
      case 0: targetByte |= 7; break;
    399a:	47 60       	ori	r20, 0x07	; 7
    399c:	03 c0       	rjmp	.+6      	; 0x39a4 <persistRTC()+0x3c>
      case 1: targetByte |= 3; break;
    399e:	43 60       	ori	r20, 0x03	; 3
    39a0:	01 c0       	rjmp	.+2      	; 0x39a4 <persistRTC()+0x3c>
      case 2: targetByte |= 1; break;
    39a2:	41 60       	ori	r20, 0x01	; 1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    39a4:	f9 99       	sbic	0x1f, 1	; 31
    39a6:	fe cf       	rjmp	.-4      	; 0x39a4 <persistRTC()+0x3c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    39a8:	8a e0       	ldi	r24, 0x0A	; 10
    39aa:	90 e0       	ldi	r25, 0x00	; 0
    39ac:	92 bd       	out	0x22, r25	; 34
    39ae:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    39b0:	f8 9a       	sbi	0x1f, 0	; 31
    39b2:	80 b5       	in	r24, 0x20	; 32
      }

    // Update if target HH:MM not already correct.
    const uint8_t persistedValue = eeprom_read_byte((uint8_t*)EE_START_RTC_HHMM_PERSIST);
    if(persistedValue != targetByte)
    39b4:	84 17       	cp	r24, r20
    39b6:	91 f1       	breq	.+100    	; 0x3a1c <persistRTC()+0xb4>
      {
      // Where it is not possible to get the target value just by setting bits to 0,
      // eg for a new hour (ie completely different hour to that in EEPROM and on roll to new hour),
      // then do a full erase/write...
      //if((0 == quarterHours) || ((persistedValue & 0xf8) != (targetByte & 0xf8)))
      if(targetByte != (persistedValue & targetByte))
    39b8:	24 2f       	mov	r18, r20
    39ba:	30 e0       	ldi	r19, 0x00	; 0
    39bc:	90 e0       	ldi	r25, 0x00	; 0
    39be:	82 23       	and	r24, r18
    39c0:	93 23       	and	r25, r19
    39c2:	28 17       	cp	r18, r24
    39c4:	39 07       	cpc	r19, r25
    39c6:	71 f0       	breq	.+28     	; 0x39e4 <persistRTC()+0x7c>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    39c8:	f9 99       	sbic	0x1f, 1	; 31
    39ca:	fe cf       	rjmp	.-4      	; 0x39c8 <persistRTC()+0x60>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    39cc:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    39ce:	8a e0       	ldi	r24, 0x0A	; 10
    39d0:	90 e0       	ldi	r25, 0x00	; 0
    39d2:	92 bd       	out	0x22, r25	; 34
    39d4:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    39d6:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    39d8:	0f b6       	in	r0, 0x3f	; 63
    39da:	f8 94       	cli
    39dc:	fa 9a       	sbi	0x1f, 2	; 31
    39de:	f9 9a       	sbi	0x1f, 1	; 31
    39e0:	0f be       	out	0x3f, r0	; 63
    39e2:	05 c0       	rjmp	.+10     	; 0x39ee <persistRTC()+0x86>
        { eeprom_write_byte((uint8_t*)EE_START_RTC_HHMM_PERSIST, targetByte); }
      // Else do a write without erase, typically clearing the quarter bits one at a time...
      else
        { eeprom_smart_clear_bits((uint8_t*)EE_START_RTC_HHMM_PERSIST, targetByte); }
    39e4:	8a e0       	ldi	r24, 0x0A	; 10
    39e6:	90 e0       	ldi	r25, 0x00	; 0
    39e8:	64 2f       	mov	r22, r20
    39ea:	0e 94 95 0a 	call	0x152a	; 0x152a <eeprom_smart_clear_bits(unsigned char*, unsigned char)>
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    39ee:	88 e0       	ldi	r24, 0x08	; 8
    39f0:	90 e0       	ldi	r25, 0x00	; 0
    39f2:	6c e2       	ldi	r22, 0x2C	; 44
    39f4:	7c e1       	ldi	r23, 0x1C	; 28
    39f6:	0e 94 5f 04 	call	0x8be	; 0x8be <__eerd_word>

      // Also persist the current days if not up to date.
      const uint16_t days = eeprom_read_word((uint16_t*)EE_START_RTC_DAY_PERSIST);
      if(days != _daysSince1999LT) { eeprom_write_word((uint16_t*)EE_START_RTC_DAY_PERSIST, _daysSince1999LT); }
    39fa:	20 91 34 03 	lds	r18, 0x0334
    39fe:	30 91 35 03 	lds	r19, 0x0335
    3a02:	82 17       	cp	r24, r18
    3a04:	93 07       	cpc	r25, r19
    3a06:	51 f0       	breq	.+20     	; 0x3a1c <persistRTC()+0xb4>
    3a08:	60 91 34 03 	lds	r22, 0x0334
    3a0c:	70 91 35 03 	lds	r23, 0x0335
    Write a word \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_word (uint16_t *__p, uint16_t __value)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    __eewr_word (__p, __value, eeprom_write_byte);
    3a10:	88 e0       	ldi	r24, 0x08	; 8
    3a12:	90 e0       	ldi	r25, 0x00	; 0
    3a14:	44 e3       	ldi	r20, 0x34	; 52
    3a16:	5c e1       	ldi	r21, 0x1C	; 28
    3a18:	0e 94 75 04 	call	0x8ea	; 0x8ea <__eewr_word>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3a1c:	1f bf       	out	0x3f, r17	; 63
      }
    }
  }
    3a1e:	1f 91       	pop	r17
    3a20:	08 95       	ret

00003a22 <getSimpleScheduleOn(unsigned char)>:
// Will usually include a pre-warm time before the actual time set.
// Note that unprogrammed EEPROM value will result in invalid time, ie schedule not set.
//   * which  schedule number, counting from 0
uint_least16_t getSimpleScheduleOn(const uint8_t which)
  {
  if(which >= MAX_SIMPLE_SCHEDULES) { return(~0); } // Invalid schedule number.
    3a22:	82 30       	cpi	r24, 0x02	; 2
    3a24:	d0 f4       	brcc	.+52     	; 0x3a5a <getSimpleScheduleOn(unsigned char)+0x38>
  uint8_t startMM;
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    3a26:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3a28:	f8 94       	cli
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    3a2a:	f9 99       	sbic	0x1f, 1	; 31
    3a2c:	fe cf       	rjmp	.-4      	; 0x3a2a <getSimpleScheduleOn(unsigned char)+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    3a2e:	90 e0       	ldi	r25, 0x00	; 0
    3a30:	0c 96       	adiw	r24, 0x0c	; 12
    3a32:	92 bd       	out	0x22, r25	; 34
    3a34:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    3a36:	f8 9a       	sbi	0x1f, 0	; 31
    3a38:	90 b5       	in	r25, 0x20	; 32
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3a3a:	2f bf       	out	0x3f, r18	; 63
    { startMM = eeprom_read_byte((uint8_t*)(EE_START_SIMPLE_SCHEDULE0_ON + which)); }
  if(startMM > MAX_COMPRESSED_MINS_AFTER_MIDNIGHT) { return(~0); } // No schedule set.
    3a3c:	90 3f       	cpi	r25, 0xF0	; 240
    3a3e:	68 f4       	brcc	.+26     	; 0x3a5a <getSimpleScheduleOn(unsigned char)+0x38>
  // Compute start time from stored shedule value.
  uint_least16_t startTime = SIMPLE_SCHEDULE_GRANULARITY_MINS * startMM;
    3a40:	86 e0       	ldi	r24, 0x06	; 6
    3a42:	98 9f       	mul	r25, r24
    3a44:	c0 01       	movw	r24, r0
    3a46:	11 24       	eor	r1, r1
  const uint8_t windBackM = PREWARM_MINS; // Wind back start time by about 25% of full interval.
  if(windBackM > startTime) { startTime += MINS_PER_DAY; } // Allow for wrap-around at midnight.
    3a48:	8f 30       	cpi	r24, 0x0F	; 15
    3a4a:	91 05       	cpc	r25, r1
    3a4c:	10 f4       	brcc	.+4      	; 0x3a52 <getSimpleScheduleOn(unsigned char)+0x30>
    3a4e:	80 56       	subi	r24, 0x60	; 96
    3a50:	9a 4f       	sbci	r25, 0xFA	; 250
  startTime -= windBackM;
    3a52:	9c 01       	movw	r18, r24
    3a54:	2f 50       	subi	r18, 0x0F	; 15
    3a56:	30 40       	sbci	r19, 0x00	; 0
    3a58:	02 c0       	rjmp	.+4      	; 0x3a5e <getSimpleScheduleOn(unsigned char)+0x3c>
  return(startTime);
    3a5a:	2f ef       	ldi	r18, 0xFF	; 255
    3a5c:	3f ef       	ldi	r19, 0xFF	; 255
  }
    3a5e:	c9 01       	movw	r24, r18
    3a60:	08 95       	ret

00003a62 <getSimpleScheduleOff(unsigned char)>:

// Get the simple/primary schedule off time, as minutes after midnight [0,1439]; invalid (eg ~0) if none set.
// This is based on specifed start time and some element of the current eco/comfort bias.
//   * which  schedule number, counting from 0
uint_least16_t getSimpleScheduleOff(const uint8_t which)
    3a62:	cf 93       	push	r28
    3a64:	df 93       	push	r29
  {
  const uint_least16_t startMins = getSimpleScheduleOn(which);
    3a66:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <getSimpleScheduleOn(unsigned char)>
    3a6a:	ec 01       	movw	r28, r24
  if(startMins == (uint_least16_t)~0) { return(~0); }
    3a6c:	8f ef       	ldi	r24, 0xFF	; 255
    3a6e:	cf 3f       	cpi	r28, 0xFF	; 255
    3a70:	d8 07       	cpc	r29, r24
    3a72:	19 f4       	brne	.+6      	; 0x3a7a <getSimpleScheduleOff(unsigned char)+0x18>
    3a74:	2f ef       	ldi	r18, 0xFF	; 255
    3a76:	3f ef       	ldi	r19, 0xFF	; 255
    3a78:	16 c0       	rjmp	.+44     	; 0x3aa6 <getSimpleScheduleOff(unsigned char)+0x44>
  {
//  // Simple and fast binary choice.
//  return(hasEcoBias() ? LEARNED_ON_PERIOD_M : LEARNED_ON_PERIOD_COMFORT_M);

  // Three-way split based on current WARM target temperature.
  const uint8_t wt = getWARMTargetC();
    3a7a:	0e 94 e7 04 	call	0x9ce	; 0x9ce <getWARMTargetC()>
  if(isEcoTemperature(wt)) { return(LEARNED_ON_PERIOD_M); }
    3a7e:	82 31       	cpi	r24, 0x12	; 18
    3a80:	10 f4       	brcc	.+4      	; 0x3a86 <getSimpleScheduleOff(unsigned char)+0x24>
    3a82:	8c e3       	ldi	r24, 0x3C	; 60
    3a84:	05 c0       	rjmp	.+10     	; 0x3a90 <getSimpleScheduleOff(unsigned char)+0x2e>
  else if(isComfortTemperature(wt)) { return(LEARNED_ON_PERIOD_COMFORT_M); }
    3a86:	87 31       	cpi	r24, 0x17	; 23
    3a88:	10 f4       	brcc	.+4      	; 0x3a8e <getSimpleScheduleOff(unsigned char)+0x2c>
    3a8a:	8a e5       	ldi	r24, 0x5A	; 90
    3a8c:	01 c0       	rjmp	.+2      	; 0x3a90 <getSimpleScheduleOff(unsigned char)+0x2e>
    3a8e:	88 e7       	ldi	r24, 0x78	; 120
uint_least16_t getSimpleScheduleOff(const uint8_t which)
  {
  const uint_least16_t startMins = getSimpleScheduleOn(which);
  if(startMins == (uint_least16_t)~0) { return(~0); }
  // Compute end from start, allowing for wrap-around at midnight.
  uint_least16_t endTime = startMins + PREWARM_MINS + onTime();
    3a90:	9e 01       	movw	r18, r28
    3a92:	21 5f       	subi	r18, 0xF1	; 241
    3a94:	3f 4f       	sbci	r19, 0xFF	; 255
    3a96:	28 0f       	add	r18, r24
    3a98:	31 1d       	adc	r19, r1
  if(endTime >= MINS_PER_DAY) { endTime -= MINS_PER_DAY; } // Allow for wrap-around at midnight.
    3a9a:	85 e0       	ldi	r24, 0x05	; 5
    3a9c:	20 3a       	cpi	r18, 0xA0	; 160
    3a9e:	38 07       	cpc	r19, r24
    3aa0:	10 f0       	brcs	.+4      	; 0x3aa6 <getSimpleScheduleOff(unsigned char)+0x44>
    3aa2:	20 5a       	subi	r18, 0xA0	; 160
    3aa4:	35 40       	sbci	r19, 0x05	; 5
  return(endTime);
  }
    3aa6:	c9 01       	movw	r24, r18
    3aa8:	df 91       	pop	r29
    3aaa:	cf 91       	pop	r28
    3aac:	08 95       	ret

00003aae <isAnyScheduleOnWARMSoon()>:

// True iff any schedule is due 'on'/'WARM' soon even when schedules overlap.
// May be relatively slow/expensive.
// Can be used to allow room to be brought up to at least a set-back temperature
// if very cold when a WARM period is due soon (to help ensure that WARM target is met on time).
bool isAnyScheduleOnWARMSoon()
    3aae:	0f 93       	push	r16
    3ab0:	1f 93       	push	r17
    3ab2:	cf 93       	push	r28
    3ab4:	df 93       	push	r29
  {
  const uint_least16_t mm0 = getMinutesSinceMidnightLT() + PREPREWARM_MINS; // Look forward...
    3ab6:	0e 94 41 1c 	call	0x3882	; 0x3882 <getMinutesSinceMidnightLT()>
    3aba:	9c 01       	movw	r18, r24
    3abc:	23 5d       	subi	r18, 0xD3	; 211
    3abe:	3f 4f       	sbci	r19, 0xFF	; 255
  const uint_least16_t mm = (mm0 >= MINS_PER_DAY) ? (mm0 - MINS_PER_DAY) : mm0;
    3ac0:	45 e0       	ldi	r20, 0x05	; 5
    3ac2:	20 3a       	cpi	r18, 0xA0	; 160
    3ac4:	34 07       	cpc	r19, r20
    3ac6:	10 f4       	brcc	.+4      	; 0x3acc <isAnyScheduleOnWARMSoon()+0x1e>
    3ac8:	89 01       	movw	r16, r18
    3aca:	03 c0       	rjmp	.+6      	; 0x3ad2 <isAnyScheduleOnWARMSoon()+0x24>
    3acc:	8c 01       	movw	r16, r24
    3ace:	03 57       	subi	r16, 0x73	; 115
    3ad0:	15 40       	sbci	r17, 0x05	; 5

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    3ad2:	80 e0       	ldi	r24, 0x00	; 0
    3ad4:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <getSimpleScheduleOn(unsigned char)>
    3ad8:	ec 01       	movw	r28, r24
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    3ada:	08 17       	cp	r16, r24
    3adc:	19 07       	cpc	r17, r25
    3ade:	68 f0       	brcs	.+26     	; 0x3afa <isAnyScheduleOnWARMSoon()+0x4c>
    uint_least16_t e = getSimpleScheduleOff(which);
    3ae0:	80 e0       	ldi	r24, 0x00	; 0
    3ae2:	0e 94 31 1d 	call	0x3a62	; 0x3a62 <getSimpleScheduleOff(unsigned char)>
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    3ae6:	8c 17       	cp	r24, r28
    3ae8:	9d 07       	cpc	r25, r29
    3aea:	20 f0       	brcs	.+8      	; 0x3af4 <isAnyScheduleOnWARMSoon()+0x46>
    if(mm < e) { return(true); }
    3aec:	08 17       	cp	r16, r24
    3aee:	19 07       	cpc	r17, r25
    3af0:	20 f4       	brcc	.+8      	; 0x3afa <isAnyScheduleOnWARMSoon()+0x4c>
    3af2:	17 c0       	rjmp	.+46     	; 0x3b22 <isAnyScheduleOnWARMSoon()+0x74>
  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    uint_least16_t e = getSimpleScheduleOff(which);
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    3af4:	80 56       	subi	r24, 0x60	; 96
    3af6:	9a 4f       	sbci	r25, 0xFA	; 250
    3af8:	f9 cf       	rjmp	.-14     	; 0x3aec <isAnyScheduleOnWARMSoon()+0x3e>
  const uint_least16_t mm0 = getMinutesSinceMidnightLT() + PREPREWARM_MINS; // Look forward...
  const uint_least16_t mm = (mm0 >= MINS_PER_DAY) ? (mm0 - MINS_PER_DAY) : mm0;

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    3afa:	81 e0       	ldi	r24, 0x01	; 1
    3afc:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <getSimpleScheduleOn(unsigned char)>
    3b00:	ec 01       	movw	r28, r24
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    3b02:	08 17       	cp	r16, r24
    3b04:	19 07       	cpc	r17, r25
    3b06:	58 f0       	brcs	.+22     	; 0x3b1e <isAnyScheduleOnWARMSoon()+0x70>
    uint_least16_t e = getSimpleScheduleOff(which);
    3b08:	81 e0       	ldi	r24, 0x01	; 1
    3b0a:	0e 94 31 1d 	call	0x3a62	; 0x3a62 <getSimpleScheduleOff(unsigned char)>
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    3b0e:	8c 17       	cp	r24, r28
    3b10:	9d 07       	cpc	r25, r29
    3b12:	10 f4       	brcc	.+4      	; 0x3b18 <isAnyScheduleOnWARMSoon()+0x6a>
    3b14:	80 56       	subi	r24, 0x60	; 96
    3b16:	9a 4f       	sbci	r25, 0xFA	; 250
    if(mm < e) { return(true); }
    3b18:	08 17       	cp	r16, r24
    3b1a:	19 07       	cpc	r17, r25
    3b1c:	10 f0       	brcs	.+4      	; 0x3b22 <isAnyScheduleOnWARMSoon()+0x74>
    3b1e:	80 e0       	ldi	r24, 0x00	; 0
    3b20:	01 c0       	rjmp	.+2      	; 0x3b24 <isAnyScheduleOnWARMSoon()+0x76>
bool isAnyScheduleOnWARMSoon()
  {
  const uint_least16_t mm0 = getMinutesSinceMidnightLT() + PREPREWARM_MINS; // Look forward...
  const uint_least16_t mm = (mm0 >= MINS_PER_DAY) ? (mm0 - MINS_PER_DAY) : mm0;

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    3b22:	81 e0       	ldi	r24, 0x01	; 1
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    if(mm < e) { return(true); }
    }

  return(false);
  }
    3b24:	df 91       	pop	r29
    3b26:	cf 91       	pop	r28
    3b28:	1f 91       	pop	r17
    3b2a:	0f 91       	pop	r16
    3b2c:	08 95       	ret

00003b2e <isAnyScheduleOnWARMNow()>:

// True iff any schedule is currently 'on'/'WARM' even when schedules overlap.
// May be relatively slow/expensive.
// Can be used to suppress all 'off' activity except for the final one.
// Can be used to suppress set-backs during on times.
bool isAnyScheduleOnWARMNow()
    3b2e:	0f 93       	push	r16
    3b30:	1f 93       	push	r17
    3b32:	cf 93       	push	r28
    3b34:	df 93       	push	r29
  {
  const uint_least16_t mm = getMinutesSinceMidnightLT();
    3b36:	0e 94 41 1c 	call	0x3882	; 0x3882 <getMinutesSinceMidnightLT()>
    3b3a:	8c 01       	movw	r16, r24

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    3b3c:	80 e0       	ldi	r24, 0x00	; 0
    3b3e:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <getSimpleScheduleOn(unsigned char)>
    3b42:	ec 01       	movw	r28, r24
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    3b44:	08 17       	cp	r16, r24
    3b46:	19 07       	cpc	r17, r25
    3b48:	68 f0       	brcs	.+26     	; 0x3b64 <isAnyScheduleOnWARMNow()+0x36>
    uint_least16_t e = getSimpleScheduleOff(which);
    3b4a:	80 e0       	ldi	r24, 0x00	; 0
    3b4c:	0e 94 31 1d 	call	0x3a62	; 0x3a62 <getSimpleScheduleOff(unsigned char)>
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    3b50:	8c 17       	cp	r24, r28
    3b52:	9d 07       	cpc	r25, r29
    3b54:	20 f0       	brcs	.+8      	; 0x3b5e <isAnyScheduleOnWARMNow()+0x30>
    if(mm < e) { return(true); }
    3b56:	08 17       	cp	r16, r24
    3b58:	19 07       	cpc	r17, r25
    3b5a:	20 f4       	brcc	.+8      	; 0x3b64 <isAnyScheduleOnWARMNow()+0x36>
    3b5c:	17 c0       	rjmp	.+46     	; 0x3b8c <isAnyScheduleOnWARMNow()+0x5e>
  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    uint_least16_t e = getSimpleScheduleOff(which);
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    3b5e:	80 56       	subi	r24, 0x60	; 96
    3b60:	9a 4f       	sbci	r25, 0xFA	; 250
    3b62:	f9 cf       	rjmp	.-14     	; 0x3b56 <isAnyScheduleOnWARMNow()+0x28>
  {
  const uint_least16_t mm = getMinutesSinceMidnightLT();

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    3b64:	81 e0       	ldi	r24, 0x01	; 1
    3b66:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <getSimpleScheduleOn(unsigned char)>
    3b6a:	ec 01       	movw	r28, r24
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    3b6c:	08 17       	cp	r16, r24
    3b6e:	19 07       	cpc	r17, r25
    3b70:	58 f0       	brcs	.+22     	; 0x3b88 <isAnyScheduleOnWARMNow()+0x5a>
    uint_least16_t e = getSimpleScheduleOff(which);
    3b72:	81 e0       	ldi	r24, 0x01	; 1
    3b74:	0e 94 31 1d 	call	0x3a62	; 0x3a62 <getSimpleScheduleOff(unsigned char)>
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    3b78:	8c 17       	cp	r24, r28
    3b7a:	9d 07       	cpc	r25, r29
    3b7c:	10 f4       	brcc	.+4      	; 0x3b82 <isAnyScheduleOnWARMNow()+0x54>
    3b7e:	80 56       	subi	r24, 0x60	; 96
    3b80:	9a 4f       	sbci	r25, 0xFA	; 250
    if(mm < e) { return(true); }
    3b82:	08 17       	cp	r16, r24
    3b84:	19 07       	cpc	r17, r25
    3b86:	10 f0       	brcs	.+4      	; 0x3b8c <isAnyScheduleOnWARMNow()+0x5e>
    3b88:	80 e0       	ldi	r24, 0x00	; 0
    3b8a:	01 c0       	rjmp	.+2      	; 0x3b8e <isAnyScheduleOnWARMNow()+0x60>
// Can be used to suppress set-backs during on times.
bool isAnyScheduleOnWARMNow()
  {
  const uint_least16_t mm = getMinutesSinceMidnightLT();

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    3b8c:	81 e0       	ldi	r24, 0x01	; 1
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    if(mm < e) { return(true); }
    }

  return(false);
  }
    3b8e:	df 91       	pop	r29
    3b90:	cf 91       	pop	r28
    3b92:	1f 91       	pop	r17
    3b94:	0f 91       	pop	r16
    3b96:	08 95       	ret

00003b98 <getStatsTXLevel()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    3b98:	f9 99       	sbic	0x1f, 1	; 31
    3b9a:	fe cf       	rjmp	.-4      	; 0x3b98 <getStatsTXLevel()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    3b9c:	8c e1       	ldi	r24, 0x1C	; 28
    3b9e:	90 e0       	ldi	r25, 0x00	; 0
    3ba0:	92 bd       	out	0x22, r25	; 34
    3ba2:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    3ba4:	f8 9a       	sbi	0x1f, 0	; 31
    3ba6:	80 b5       	in	r24, 0x20	; 32


// Get the current stats transmission level (for data outbound from this node).
// May not exactly match enumerated levels; use inequalities.
// Not thread-/ISR- safe.
stats_TX_level getStatsTXLevel() { return((stats_TX_level)eeprom_read_byte((uint8_t *)EE_START_STATS_TX_ENABLE)); }
    3ba8:	90 e0       	ldi	r25, 0x00	; 0
    3baa:	08 95       	ret

00003bac <addEntropyToPool(unsigned char, unsigned char)>:
//   * estBits estimated number of truely securely random bits in range [0,8].
// Not thread-/ISR- safe.
void addEntropyToPool(uint8_t data, uint8_t estBits)
  {
  // TODO: no real entropy pool yet.
  seedRNG8(data, cycleCountCPU(), getSubCycleTime());
    3bac:	66 b5       	in	r22, 0x26	; 38
    3bae:	40 91 b2 00 	lds	r20, 0x00B2
    3bb2:	0e 94 83 19 	call	0x3306	; 0x3306 <seedRNG8(unsigned char, unsigned char, unsigned char)>
  }
    3bb6:	08 95       	ret

00003bb8 <getSecureRandomByte()>:
// Generate 'secure' new random byte.
// This should be essentially all entropy and unguessable.
// Likely to be slow and may force some peripheral I/O.
// Runtime details are likely to be intimately dependent on hardware implementation.
// Not thread-/ISR- safe.
uint8_t getSecureRandomByte()
    3bb8:	0f 93       	push	r16
    3bba:	1f 93       	push	r17
    3bbc:	df 93       	push	r29
    3bbe:	cf 93       	push	r28
    3bc0:	0f 92       	push	r0
    3bc2:	cd b7       	in	r28, 0x3d	; 61
    3bc4:	de b7       	in	r29, 0x3e	; 62
  {
  // Use various real noise sources and whiten with PRNG and other counters.
  // Mix the bits also to help ensure good distribution.
  uint8_t w1 = clockJitterEntropyByte(); // Real noise.
    3bc6:	0e 94 76 17 	call	0x2eec	; 0x2eec <clockJitterEntropyByte()>
  w1 ^= (w1 << 4); // Mix.
    3bca:	08 2f       	mov	r16, r24
    3bcc:	02 95       	swap	r16
    3bce:	00 7f       	andi	r16, 0xF0	; 240
    3bd0:	08 27       	eor	r16, r24
  w1 ^= noisyADCRead(); // Real noise.
    3bd2:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <noisyADCRead()>
    3bd6:	08 27       	eor	r16, r24
  w1 ^= (w1 >> 4); // Mix.
    3bd8:	10 2f       	mov	r17, r16
    3bda:	12 95       	swap	r17
    3bdc:	1f 70       	andi	r17, 0x0F	; 15
    3bde:	10 27       	eor	r17, r16
  const uint8_t v = w1;
    3be0:	19 83       	std	Y+1, r17	; 0x01
  w1 ^= randRNG8(); // Whiten.
    3be2:	0e 94 9e 19 	call	0x333c	; 0x333c <randRNG8()>
    3be6:	18 27       	eor	r17, r24
  w1 ^= (w1 << 3); // Mix.
    3be8:	81 2f       	mov	r24, r17
    3bea:	88 0f       	add	r24, r24
    3bec:	88 0f       	add	r24, r24
    3bee:	88 0f       	add	r24, r24
    3bf0:	81 27       	eor	r24, r17
  w1 ^=  _crc_ibutton_update(cycleCountCPU() ^ (uint8_t)(intptr_t)&v, ++count8 - v); // Whiten.
    3bf2:	96 b5       	in	r25, 0x26	; 38
    3bf4:	40 91 36 03 	lds	r20, 0x0336
    3bf8:	4f 5f       	subi	r20, 0xFF	; 255
    3bfa:	40 93 36 03 	sts	0x0336, r20
		"	brtc	2f" "\n\t"
		"	eor	%0, %2" "\n\t"
		"2:	dec	%1" "\n\t"
		"	brne	1b" "\n\t"
		: "=r" (__crc), "=d" (__i), "=d" (__pattern)
		: "0" (__crc), "r" (__data));
    3bfe:	9e 01       	movw	r18, r28
    3c00:	2f 5f       	subi	r18, 0xFF	; 255
    3c02:	3f 4f       	sbci	r19, 0xFF	; 255
    3c04:	92 27       	eor	r25, r18
    3c06:	29 81       	ldd	r18, Y+1	; 0x01
    3c08:	42 1b       	sub	r20, r18
    3c0a:	94 27       	eor	r25, r20
    3c0c:	28 e0       	ldi	r18, 0x08	; 8
    3c0e:	3c e8       	ldi	r19, 0x8C	; 140
    3c10:	90 fb       	bst	r25, 0
    3c12:	96 95       	lsr	r25
    3c14:	0e f4       	brtc	.+2      	; 0x3c18 <getSecureRandomByte()+0x60>
    3c16:	93 27       	eor	r25, r19
    3c18:	2a 95       	dec	r18
    3c1a:	d1 f7       	brne	.-12     	; 0x3c10 <getSecureRandomByte()+0x58>
  return(w1);
  }
    3c1c:	89 27       	eor	r24, r25
    3c1e:	0f 90       	pop	r0
    3c20:	cf 91       	pop	r28
    3c22:	df 91       	pop	r29
    3c24:	1f 91       	pop	r17
    3c26:	0f 91       	pop	r16
    3c28:	08 95       	ret

00003c2a <serialPrintAndFlush(unsigned int, int)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) number to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(const unsigned u, const int fmt)
    3c2a:	df 92       	push	r13
    3c2c:	ef 92       	push	r14
    3c2e:	ff 92       	push	r15
    3c30:	0f 93       	push	r16
    3c32:	1f 93       	push	r17
    3c34:	8c 01       	movw	r16, r24
    3c36:	7b 01       	movw	r14, r22
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    3c38:	0e 94 4a 19 	call	0x3294	; 0x3294 <powerUpSerialIfDisabled()>
    3c3c:	d8 2e       	mov	r13, r24
  // Send the character.
  Serial.print(u, fmt);
    3c3e:	81 ed       	ldi	r24, 0xD1	; 209
    3c40:	94 e0       	ldi	r25, 0x04	; 4
    3c42:	b8 01       	movw	r22, r16
    3c44:	a7 01       	movw	r20, r14
    3c46:	0e 94 ef 3c 	call	0x79de	; 0x79de <Print::print(unsigned int, int)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    3c4a:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    3c4e:	dd 20       	and	r13, r13
    3c50:	11 f0       	breq	.+4      	; 0x3c56 <serialPrintAndFlush(unsigned int, int)+0x2c>
    3c52:	0e 94 ad 18 	call	0x315a	; 0x315a <powerDownSerial()>
  }
    3c56:	1f 91       	pop	r17
    3c58:	0f 91       	pop	r16
    3c5a:	ff 90       	pop	r15
    3c5c:	ef 90       	pop	r14
    3c5e:	df 90       	pop	r13
    3c60:	08 95       	ret

00003c62 <serialPrintlnAndFlush()>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write line-end to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintlnAndFlush()
    3c62:	1f 93       	push	r17
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    3c64:	0e 94 4a 19 	call	0x3294	; 0x3294 <powerUpSerialIfDisabled()>
    3c68:	18 2f       	mov	r17, r24
  // Send the text.
  Serial.println();
    3c6a:	81 ed       	ldi	r24, 0xD1	; 209
    3c6c:	94 e0       	ldi	r25, 0x04	; 4
    3c6e:	0e 94 2c 3c 	call	0x7858	; 0x7858 <Print::println()>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    3c72:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    3c76:	11 23       	and	r17, r17
    3c78:	11 f0       	breq	.+4      	; 0x3c7e <serialPrintlnAndFlush()+0x1c>
    3c7a:	0e 94 ad 18 	call	0x315a	; 0x315a <powerDownSerial()>
  }
    3c7e:	1f 91       	pop	r17
    3c80:	08 95       	ret

00003c82 <serialPrintAndFlush(int, int)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) number to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(const int i, const int fmt)
    3c82:	df 92       	push	r13
    3c84:	ef 92       	push	r14
    3c86:	ff 92       	push	r15
    3c88:	0f 93       	push	r16
    3c8a:	1f 93       	push	r17
    3c8c:	8c 01       	movw	r16, r24
    3c8e:	7b 01       	movw	r14, r22
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    3c90:	0e 94 4a 19 	call	0x3294	; 0x3294 <powerUpSerialIfDisabled()>
    3c94:	d8 2e       	mov	r13, r24
  // Send the character.
  Serial.print(i, fmt);
    3c96:	81 ed       	ldi	r24, 0xD1	; 209
    3c98:	94 e0       	ldi	r25, 0x04	; 4
    3c9a:	b8 01       	movw	r22, r16
    3c9c:	a7 01       	movw	r20, r14
    3c9e:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <Print::print(int, int)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    3ca2:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    3ca6:	dd 20       	and	r13, r13
    3ca8:	11 f0       	breq	.+4      	; 0x3cae <serialPrintAndFlush(int, int)+0x2c>
    3caa:	0e 94 ad 18 	call	0x315a	; 0x315a <powerDownSerial()>
  }
    3cae:	1f 91       	pop	r17
    3cb0:	0f 91       	pop	r16
    3cb2:	ff 90       	pop	r15
    3cb4:	ef 90       	pop	r14
    3cb6:	df 90       	pop	r13
    3cb8:	08 95       	ret

00003cba <serialPrintAndFlush(char const*)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (read-only) string to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(const char * const text)
    3cba:	ff 92       	push	r15
    3cbc:	0f 93       	push	r16
    3cbe:	1f 93       	push	r17
    3cc0:	8c 01       	movw	r16, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    3cc2:	0e 94 4a 19 	call	0x3294	; 0x3294 <powerUpSerialIfDisabled()>
    3cc6:	f8 2e       	mov	r15, r24
  // Send the text.
  Serial.print(text);
    3cc8:	81 ed       	ldi	r24, 0xD1	; 209
    3cca:	94 e0       	ldi	r25, 0x04	; 4
    3ccc:	b8 01       	movw	r22, r16
    3cce:	0e 94 65 3d 	call	0x7aca	; 0x7aca <Print::print(char const*)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    3cd2:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    3cd6:	ff 20       	and	r15, r15
    3cd8:	11 f0       	breq	.+4      	; 0x3cde <serialPrintAndFlush(char const*)+0x24>
    3cda:	0e 94 ad 18 	call	0x315a	; 0x315a <powerDownSerial()>
  }
    3cde:	1f 91       	pop	r17
    3ce0:	0f 91       	pop	r16
    3ce2:	ff 90       	pop	r15
    3ce4:	08 95       	ret

00003ce6 <serialPrintAndFlush(__FlashStringHelper const*)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) string to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(__FlashStringHelper const * const text)
    3ce6:	ff 92       	push	r15
    3ce8:	0f 93       	push	r16
    3cea:	1f 93       	push	r17
    3cec:	8c 01       	movw	r16, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    3cee:	0e 94 4a 19 	call	0x3294	; 0x3294 <powerUpSerialIfDisabled()>
    3cf2:	f8 2e       	mov	r15, r24
  // Send the text.
  Serial.print(text);
    3cf4:	81 ed       	ldi	r24, 0xD1	; 209
    3cf6:	94 e0       	ldi	r25, 0x04	; 4
    3cf8:	b8 01       	movw	r22, r16
    3cfa:	0e 94 01 3c 	call	0x7802	; 0x7802 <Print::print(__FlashStringHelper const*)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    3cfe:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    3d02:	ff 20       	and	r15, r15
    3d04:	11 f0       	breq	.+4      	; 0x3d0a <serialPrintAndFlush(__FlashStringHelper const*)+0x24>
    3d06:	0e 94 ad 18 	call	0x315a	; 0x315a <powerDownSerial()>
  }
    3d0a:	1f 91       	pop	r17
    3d0c:	0f 91       	pop	r16
    3d0e:	ff 90       	pop	r15
    3d10:	08 95       	ret

00003d12 <serialPrintlnAndFlush(__FlashStringHelper const*)>:
// Flush to use for all serialPrintXXX() and DEBUG_PRINTXXX routines.
#define _flush() flushSerialSCTSensitive()

// Write a single (Flash-resident) string to serial followed by line-end and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintlnAndFlush(__FlashStringHelper const * const line)
    3d12:	ff 92       	push	r15
    3d14:	0f 93       	push	r16
    3d16:	1f 93       	push	r17
    3d18:	8c 01       	movw	r16, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    3d1a:	0e 94 4a 19 	call	0x3294	; 0x3294 <powerUpSerialIfDisabled()>
    3d1e:	f8 2e       	mov	r15, r24
  // Send the line of text followed by line end.
  Serial.println(line);
    3d20:	81 ed       	ldi	r24, 0xD1	; 209
    3d22:	94 e0       	ldi	r25, 0x04	; 4
    3d24:	b8 01       	movw	r22, r16
    3d26:	0e 94 4c 3c 	call	0x7898	; 0x7898 <Print::println(__FlashStringHelper const*)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    3d2a:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    3d2e:	ff 20       	and	r15, r15
    3d30:	11 f0       	breq	.+4      	; 0x3d36 <serialPrintlnAndFlush(__FlashStringHelper const*)+0x24>
    3d32:	0e 94 ad 18 	call	0x315a	; 0x315a <powerDownSerial()>
  }
    3d36:	1f 91       	pop	r17
    3d38:	0f 91       	pop	r16
    3d3a:	ff 90       	pop	r15
    3d3c:	08 95       	ret

00003d3e <resetCLIActiveTimer()>:
#define CLI_DEFAULT_TIMEOUT_M 2
static volatile uint8_t CLITimeoutM = CLI_DEFAULT_TIMEOUT_M;

// Reset CLI active timer to the full whack before it goes inactive again (ie makes CLI active for a while).
// Thread-safe.
void resetCLIActiveTimer() { CLITimeoutM = CLI_DEFAULT_TIMEOUT_M; }
    3d3e:	82 e0       	ldi	r24, 0x02	; 2
    3d40:	80 93 49 01 	sts	0x0149, r24
    3d44:	08 95       	ret

00003d46 <Serial_print_space()>:
    }
  }


// Prints a single space to Serial (which must be up and running).
static void Serial_print_space() { Serial.print(' '); }
    3d46:	81 ed       	ldi	r24, 0xD1	; 209
    3d48:	94 e0       	ldi	r25, 0x04	; 4
    3d4a:	60 e2       	ldi	r22, 0x20	; 32
    3d4c:	0e 94 24 3c 	call	0x7848	; 0x7848 <Print::print(char)>
    3d50:	08 95       	ret

00003d52 <serialStatusReport()>:

'HC' introduces the optional FHT8V house codes section, if supported and codes are set.
eg 'HC99 99'
HChc1 hc2 are the house codes 1 and 2 for an FHT8V valve.
*/
void serialStatusReport()
    3d52:	af 92       	push	r10
    3d54:	bf 92       	push	r11
    3d56:	cf 92       	push	r12
    3d58:	df 92       	push	r13
    3d5a:	ef 92       	push	r14
    3d5c:	ff 92       	push	r15
    3d5e:	0f 93       	push	r16
    3d60:	1f 93       	push	r17
    3d62:	df 93       	push	r29
    3d64:	cf 93       	push	r28
    3d66:	cd b7       	in	r28, 0x3d	; 61
    3d68:	de b7       	in	r29, 0x3e	; 62
    3d6a:	c0 59       	subi	r28, 0x90	; 144
    3d6c:	d0 40       	sbci	r29, 0x00	; 0
    3d6e:	0f b6       	in	r0, 0x3f	; 63
    3d70:	f8 94       	cli
    3d72:	de bf       	out	0x3e, r29	; 62
    3d74:	0f be       	out	0x3f, r0	; 63
    3d76:	cd bf       	out	0x3d, r28	; 61
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    3d78:	0e 94 4a 19 	call	0x3294	; 0x3294 <powerUpSerialIfDisabled()>
    3d7c:	d8 2e       	mov	r13, r24

  // Aim to overlap CPU usage with characters being TXed for throughput determined primarily by output size and baud.

  // Stats line starts with distingushed marker character.
  // Initial '=' section with common essentials.
  Serial.print(LINE_START_CHAR_STATS);
    3d7e:	81 ed       	ldi	r24, 0xD1	; 209
    3d80:	94 e0       	ldi	r25, 0x04	; 4
    3d82:	6d e3       	ldi	r22, 0x3D	; 61
    3d84:	0e 94 24 3c 	call	0x7848	; 0x7848 <Print::print(char)>
#ifdef SUPPORT_BAKE
  Serial.print(inWarmMode() ? (inBakeMode() ? 'B' : 'W') : 'F');
    3d88:	0e 94 af 04 	call	0x95e	; 0x95e <inWarmMode()>
    3d8c:	88 23       	and	r24, r24
    3d8e:	11 f4       	brne	.+4      	; 0x3d94 <serialStatusReport()+0x42>
    3d90:	66 e4       	ldi	r22, 0x46	; 70
    3d92:	07 c0       	rjmp	.+14     	; 0x3da2 <serialStatusReport()+0x50>
    3d94:	0e 94 b9 04 	call	0x972	; 0x972 <inBakeMode()>
    3d98:	88 23       	and	r24, r24
    3d9a:	11 f4       	brne	.+4      	; 0x3da0 <serialStatusReport()+0x4e>
    3d9c:	67 e5       	ldi	r22, 0x57	; 87
    3d9e:	01 c0       	rjmp	.+2      	; 0x3da2 <serialStatusReport()+0x50>
    3da0:	62 e4       	ldi	r22, 0x42	; 66
    3da2:	81 ed       	ldi	r24, 0xD1	; 209
    3da4:	94 e0       	ldi	r25, 0x04	; 4
    3da6:	0e 94 24 3c 	call	0x7848	; 0x7848 <Print::print(char)>
    3daa:	60 91 1c 02 	lds	r22, 0x021C
#else
  Serial.print(inWarmMode() ? 'W' : 'F');
#endif
  Serial.print(NominalRadValve.get()); Serial.print('%'); // Target valve position.
    3dae:	81 ed       	ldi	r24, 0xD1	; 209
    3db0:	94 e0       	ldi	r25, 0x04	; 4
    3db2:	4a e0       	ldi	r20, 0x0A	; 10
    3db4:	50 e0       	ldi	r21, 0x00	; 0
    3db6:	0e 94 00 3d 	call	0x7a00	; 0x7a00 <Print::print(unsigned char, int)>
    3dba:	81 ed       	ldi	r24, 0xD1	; 209
    3dbc:	94 e0       	ldi	r25, 0x04	; 4
    3dbe:	65 e2       	ldi	r22, 0x25	; 37
    3dc0:	0e 94 24 3c 	call	0x7848	; 0x7848 <Print::print(char)>
    virtual int read();

    // Return last value fetched by read(); undefined before first read().
    // Fast.
    // Not thread-safe nor usable within ISRs (Interrupt Service Routines).
    virtual int get() const { return(value); }
    3dc4:	00 91 7a 03 	lds	r16, 0x037A
    3dc8:	10 91 7b 03 	lds	r17, 0x037B
  const int temp = TemperatureC16.get();
  Serial.print('@'); Serial.print(temp >> 4); Serial.print('C'); // Unrounded whole degrees C.
    3dcc:	81 ed       	ldi	r24, 0xD1	; 209
    3dce:	94 e0       	ldi	r25, 0x04	; 4
    3dd0:	60 e4       	ldi	r22, 0x40	; 64
    3dd2:	0e 94 24 3c 	call	0x7848	; 0x7848 <Print::print(char)>
    3dd6:	b8 01       	movw	r22, r16
    3dd8:	34 e0       	ldi	r19, 0x04	; 4
    3dda:	75 95       	asr	r23
    3ddc:	67 95       	ror	r22
    3dde:	3a 95       	dec	r19
    3de0:	e1 f7       	brne	.-8      	; 0x3dda <serialStatusReport()+0x88>
    3de2:	81 ed       	ldi	r24, 0xD1	; 209
    3de4:	94 e0       	ldi	r25, 0x04	; 4
    3de6:	4a e0       	ldi	r20, 0x0A	; 10
    3de8:	50 e0       	ldi	r21, 0x00	; 0
    3dea:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <Print::print(int, int)>
    3dee:	81 ed       	ldi	r24, 0xD1	; 209
    3df0:	94 e0       	ldi	r25, 0x04	; 4
    3df2:	63 e4       	ldi	r22, 0x43	; 67
    3df4:	0e 94 24 3c 	call	0x7848	; 0x7848 <Print::print(char)>
      Serial.print(temp & 0xf, HEX); // Show 16ths in hex.
    3df8:	0f 70       	andi	r16, 0x0F	; 15
    3dfa:	10 70       	andi	r17, 0x00	; 0
    3dfc:	81 ed       	ldi	r24, 0xD1	; 209
    3dfe:	94 e0       	ldi	r25, 0x04	; 4
    3e00:	b8 01       	movw	r22, r16
    3e02:	40 e1       	ldi	r20, 0x10	; 16
    3e04:	50 e0       	ldi	r21, 0x00	; 0
    3e06:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <Print::print(int, int)>
    Serial.print(rh);
    }
#endif

  // *T* section: time and schedules.
  const uint_least8_t hh = getHoursLT();
    3e0a:	0e 94 56 1c 	call	0x38ac	; 0x38ac <getHoursLT()>
    3e0e:	18 2f       	mov	r17, r24
  const uint_least8_t mm = getMinutesLT();
    3e10:	0e 94 4a 1c 	call	0x3894	; 0x3894 <getMinutesLT()>
    3e14:	08 2f       	mov	r16, r24
  Serial.print(';'); // End previous section.
    3e16:	81 ed       	ldi	r24, 0xD1	; 209
    3e18:	94 e0       	ldi	r25, 0x04	; 4
    3e1a:	6b e3       	ldi	r22, 0x3B	; 59
    3e1c:	0e 94 24 3c 	call	0x7848	; 0x7848 <Print::print(char)>
  Serial.print('T'); Serial.print(hh); Serial_print_space(); Serial.print(mm);
    3e20:	81 ed       	ldi	r24, 0xD1	; 209
    3e22:	94 e0       	ldi	r25, 0x04	; 4
    3e24:	64 e5       	ldi	r22, 0x54	; 84
    3e26:	0e 94 24 3c 	call	0x7848	; 0x7848 <Print::print(char)>
    3e2a:	81 ed       	ldi	r24, 0xD1	; 209
    3e2c:	94 e0       	ldi	r25, 0x04	; 4
    3e2e:	61 2f       	mov	r22, r17
    3e30:	4a e0       	ldi	r20, 0x0A	; 10
    3e32:	50 e0       	ldi	r21, 0x00	; 0
    3e34:	0e 94 00 3d 	call	0x7a00	; 0x7a00 <Print::print(unsigned char, int)>
    3e38:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <Serial_print_space()>
    3e3c:	81 ed       	ldi	r24, 0xD1	; 209
    3e3e:	94 e0       	ldi	r25, 0x04	; 4
    3e40:	60 2f       	mov	r22, r16
    3e42:	4a e0       	ldi	r20, 0x0A	; 10
    3e44:	50 e0       	ldi	r21, 0x00	; 0
    3e46:	0e 94 00 3d 	call	0x7a00	; 0x7a00 <Print::print(unsigned char, int)>
    3e4a:	cc 24       	eor	r12, r12
  // Show all schedules set.
  for(uint8_t scheduleNumber = 0; scheduleNumber < MAX_SIMPLE_SCHEDULES; ++scheduleNumber)
    {
    Serial_print_space();
    3e4c:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <Serial_print_space()>
    uint_least16_t startMinutesSinceMidnightLT = getSimpleScheduleOn(scheduleNumber);
    3e50:	8c 2d       	mov	r24, r12
    3e52:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <getSimpleScheduleOn(unsigned char)>
    3e56:	fc 01       	movw	r30, r24
    const bool invalidStartTime = startMinutesSinceMidnightLT >= MINS_PER_DAY;
    const int startH = invalidStartTime ? 255 : (startMinutesSinceMidnightLT / 60);
    3e58:	85 e0       	ldi	r24, 0x05	; 5
    3e5a:	e0 3a       	cpi	r30, 0xA0	; 160
    3e5c:	f8 07       	cpc	r31, r24
    3e5e:	30 f0       	brcs	.+12     	; 0x3e6c <serialStatusReport()+0x11a>
    3e60:	00 e0       	ldi	r16, 0x00	; 0
    3e62:	10 e0       	ldi	r17, 0x00	; 0
    3e64:	2f ef       	ldi	r18, 0xFF	; 255
    3e66:	e2 2e       	mov	r14, r18
    3e68:	f1 2c       	mov	r15, r1
    3e6a:	0c c0       	rjmp	.+24     	; 0x3e84 <serialStatusReport()+0x132>
    3e6c:	cf 01       	movw	r24, r30
    3e6e:	6c e3       	ldi	r22, 0x3C	; 60
    3e70:	70 e0       	ldi	r23, 0x00	; 0
    3e72:	0e 94 13 3e 	call	0x7c26	; 0x7c26 <__udivmodhi4>
    3e76:	7b 01       	movw	r14, r22
    const int startM = invalidStartTime ? 0 : (startMinutesSinceMidnightLT % 60);
    3e78:	cf 01       	movw	r24, r30
    3e7a:	6c e3       	ldi	r22, 0x3C	; 60
    3e7c:	70 e0       	ldi	r23, 0x00	; 0
    3e7e:	0e 94 13 3e 	call	0x7c26	; 0x7c26 <__udivmodhi4>
    3e82:	8c 01       	movw	r16, r24
    Serial.print('W'); Serial.print(startH); Serial_print_space(); Serial.print(startM);
    3e84:	81 ed       	ldi	r24, 0xD1	; 209
    3e86:	94 e0       	ldi	r25, 0x04	; 4
    3e88:	67 e5       	ldi	r22, 0x57	; 87
    3e8a:	0e 94 24 3c 	call	0x7848	; 0x7848 <Print::print(char)>
    3e8e:	81 ed       	ldi	r24, 0xD1	; 209
    3e90:	94 e0       	ldi	r25, 0x04	; 4
    3e92:	b7 01       	movw	r22, r14
    3e94:	4a e0       	ldi	r20, 0x0A	; 10
    3e96:	50 e0       	ldi	r21, 0x00	; 0
    3e98:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <Print::print(int, int)>
    3e9c:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <Serial_print_space()>
    3ea0:	81 ed       	ldi	r24, 0xD1	; 209
    3ea2:	94 e0       	ldi	r25, 0x04	; 4
    3ea4:	b8 01       	movw	r22, r16
    3ea6:	4a e0       	ldi	r20, 0x0A	; 10
    3ea8:	50 e0       	ldi	r21, 0x00	; 0
    3eaa:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <Print::print(int, int)>
    Serial_print_space();
    3eae:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <Serial_print_space()>
    uint_least16_t endMinutesSinceMidnightLT = getSimpleScheduleOff(scheduleNumber);
    3eb2:	8c 2d       	mov	r24, r12
    3eb4:	0e 94 31 1d 	call	0x3a62	; 0x3a62 <getSimpleScheduleOff(unsigned char)>
    3eb8:	fc 01       	movw	r30, r24
    const bool invalidEndTime = endMinutesSinceMidnightLT >= MINS_PER_DAY;
    const int endH = invalidEndTime ? 255 : (endMinutesSinceMidnightLT / 60);
    3eba:	85 e0       	ldi	r24, 0x05	; 5
    3ebc:	e0 3a       	cpi	r30, 0xA0	; 160
    3ebe:	f8 07       	cpc	r31, r24
    3ec0:	30 f0       	brcs	.+12     	; 0x3ece <serialStatusReport()+0x17c>
    3ec2:	00 e0       	ldi	r16, 0x00	; 0
    3ec4:	10 e0       	ldi	r17, 0x00	; 0
    3ec6:	9f ef       	ldi	r25, 0xFF	; 255
    3ec8:	e9 2e       	mov	r14, r25
    3eca:	f1 2c       	mov	r15, r1
    3ecc:	0c c0       	rjmp	.+24     	; 0x3ee6 <serialStatusReport()+0x194>
    3ece:	cf 01       	movw	r24, r30
    3ed0:	6c e3       	ldi	r22, 0x3C	; 60
    3ed2:	70 e0       	ldi	r23, 0x00	; 0
    3ed4:	0e 94 13 3e 	call	0x7c26	; 0x7c26 <__udivmodhi4>
    3ed8:	7b 01       	movw	r14, r22
    const int endM = invalidEndTime ? 0 : (endMinutesSinceMidnightLT % 60);
    3eda:	cf 01       	movw	r24, r30
    3edc:	6c e3       	ldi	r22, 0x3C	; 60
    3ede:	70 e0       	ldi	r23, 0x00	; 0
    3ee0:	0e 94 13 3e 	call	0x7c26	; 0x7c26 <__udivmodhi4>
    3ee4:	8c 01       	movw	r16, r24
    Serial.print('F'); Serial.print(endH); Serial_print_space(); Serial.print(endM);
    3ee6:	81 ed       	ldi	r24, 0xD1	; 209
    3ee8:	94 e0       	ldi	r25, 0x04	; 4
    3eea:	66 e4       	ldi	r22, 0x46	; 70
    3eec:	0e 94 24 3c 	call	0x7848	; 0x7848 <Print::print(char)>
    3ef0:	81 ed       	ldi	r24, 0xD1	; 209
    3ef2:	94 e0       	ldi	r25, 0x04	; 4
    3ef4:	b7 01       	movw	r22, r14
    3ef6:	4a e0       	ldi	r20, 0x0A	; 10
    3ef8:	50 e0       	ldi	r21, 0x00	; 0
    3efa:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <Print::print(int, int)>
    3efe:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <Serial_print_space()>
    3f02:	81 ed       	ldi	r24, 0xD1	; 209
    3f04:	94 e0       	ldi	r25, 0x04	; 4
    3f06:	b8 01       	movw	r22, r16
    3f08:	4a e0       	ldi	r20, 0x0A	; 10
    3f0a:	50 e0       	ldi	r21, 0x00	; 0
    3f0c:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <Print::print(int, int)>
  const uint_least8_t hh = getHoursLT();
  const uint_least8_t mm = getMinutesLT();
  Serial.print(';'); // End previous section.
  Serial.print('T'); Serial.print(hh); Serial_print_space(); Serial.print(mm);
  // Show all schedules set.
  for(uint8_t scheduleNumber = 0; scheduleNumber < MAX_SIMPLE_SCHEDULES; ++scheduleNumber)
    3f10:	c3 94       	inc	r12
    3f12:	82 e0       	ldi	r24, 0x02	; 2
    3f14:	c8 16       	cp	r12, r24
    3f16:	09 f0       	breq	.+2      	; 0x3f1a <serialStatusReport()+0x1c8>
    3f18:	99 cf       	rjmp	.-206    	; 0x3e4c <serialStatusReport()+0xfa>
    const bool invalidEndTime = endMinutesSinceMidnightLT >= MINS_PER_DAY;
    const int endH = invalidEndTime ? 255 : (endMinutesSinceMidnightLT / 60);
    const int endM = invalidEndTime ? 0 : (endMinutesSinceMidnightLT % 60);
    Serial.print('F'); Serial.print(endH); Serial_print_space(); Serial.print(endM);
    }
  if(isAnyScheduleOnWARMNow()) { Serial.print('*'); } // Indicate that at least one schedule is active now.
    3f1a:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <isAnyScheduleOnWARMNow()>
    3f1e:	88 23       	and	r24, r24
    3f20:	29 f0       	breq	.+10     	; 0x3f2c <serialStatusReport()+0x1da>
    3f22:	81 ed       	ldi	r24, 0xD1	; 209
    3f24:	94 e0       	ldi	r25, 0x04	; 4
    3f26:	6a e2       	ldi	r22, 0x2A	; 42
    3f28:	0e 94 24 3c 	call	0x7848	; 0x7848 <Print::print(char)>

  // *S* section: settable target/threshold temperatures, current target, and eco/smart/occupied flags.
#ifdef SETTABLE_TARGET_TEMPERATURES // Show thresholds and current target since no longer so easily deduced.
  Serial.print(';'); // Terminate previous section.
    3f2c:	81 ed       	ldi	r24, 0xD1	; 209
    3f2e:	94 e0       	ldi	r25, 0x04	; 4
    3f30:	6b e3       	ldi	r22, 0x3B	; 59
    3f32:	0e 94 24 3c 	call	0x7848	; 0x7848 <Print::print(char)>
  Serial.print('S'); // Current settable temperature target, and FROST and WARM settings.
    3f36:	81 ed       	ldi	r24, 0xD1	; 209
    3f38:	94 e0       	ldi	r25, 0x04	; 4
    3f3a:	63 e5       	ldi	r22, 0x53	; 83
    3f3c:	0e 94 24 3c 	call	0x7848	; 0x7848 <Print::print(char)>
  Serial.print(NominalRadValve.getTargetTempC());
    3f40:	81 ed       	ldi	r24, 0xD1	; 209
    3f42:	94 e0       	ldi	r25, 0x04	; 4
    3f44:	60 91 1d 02 	lds	r22, 0x021D
    3f48:	4a e0       	ldi	r20, 0x0A	; 10
    3f4a:	50 e0       	ldi	r21, 0x00	; 0
    3f4c:	0e 94 00 3d 	call	0x7a00	; 0x7a00 <Print::print(unsigned char, int)>
  Serial_print_space();
    3f50:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <Serial_print_space()>
  Serial.print(getFROSTTargetC());
    3f54:	0e 94 c9 04 	call	0x992	; 0x992 <getFROSTTargetC()>
    3f58:	68 2f       	mov	r22, r24
    3f5a:	81 ed       	ldi	r24, 0xD1	; 209
    3f5c:	94 e0       	ldi	r25, 0x04	; 4
    3f5e:	4a e0       	ldi	r20, 0x0A	; 10
    3f60:	50 e0       	ldi	r21, 0x00	; 0
    3f62:	0e 94 00 3d 	call	0x7a00	; 0x7a00 <Print::print(unsigned char, int)>
  Serial_print_space();
    3f66:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <Serial_print_space()>
  Serial.print(getWARMTargetC());
    3f6a:	0e 94 e7 04 	call	0x9ce	; 0x9ce <getWARMTargetC()>
    3f6e:	68 2f       	mov	r22, r24
    3f70:	81 ed       	ldi	r24, 0xD1	; 209
    3f72:	94 e0       	ldi	r25, 0x04	; 4
    3f74:	4a e0       	ldi	r20, 0x0A	; 10
    3f76:	50 e0       	ldi	r21, 0x00	; 0
    3f78:	0e 94 00 3d 	call	0x7a00	; 0x7a00 <Print::print(unsigned char, int)>
#endif

  // *C* section: central hub values.
#if defined(ENABLE_BOILER_HUB)
  // Print optional hub boiler-on-time section if apparently set (non-zero) and thus in hub mode.
  const uint8_t boilerOnMinutes = getMinBoilerOnMinutes();
    3f7c:	0e 94 01 05 	call	0xa02	; 0xa02 <getMinBoilerOnMinutes()>
    3f80:	18 2f       	mov	r17, r24
  if(boilerOnMinutes != 0)
    3f82:	88 23       	and	r24, r24
    3f84:	89 f0       	breq	.+34     	; 0x3fa8 <serialStatusReport()+0x256>
    {
    Serial.print(';'); // Terminate previous section.
    3f86:	81 ed       	ldi	r24, 0xD1	; 209
    3f88:	94 e0       	ldi	r25, 0x04	; 4
    3f8a:	6b e3       	ldi	r22, 0x3B	; 59
    3f8c:	0e 94 24 3c 	call	0x7848	; 0x7848 <Print::print(char)>
    Serial.print('C'); // Indicate central hub mode available.
    3f90:	81 ed       	ldi	r24, 0xD1	; 209
    3f92:	94 e0       	ldi	r25, 0x04	; 4
    3f94:	63 e4       	ldi	r22, 0x43	; 67
    3f96:	0e 94 24 3c 	call	0x7848	; 0x7848 <Print::print(char)>
    Serial.print(boilerOnMinutes); // Show min 'on' time, or zero if disabled.
    3f9a:	81 ed       	ldi	r24, 0xD1	; 209
    3f9c:	94 e0       	ldi	r25, 0x04	; 4
    3f9e:	61 2f       	mov	r22, r17
    3fa0:	4a e0       	ldi	r20, 0x0A	; 10
    3fa2:	50 e0       	ldi	r21, 0x00	; 0
    3fa4:	0e 94 00 3d 	call	0x7a00	; 0x7a00 <Print::print(unsigned char, int)>
#endif

  // *H* section: house codes for local FHT8V valve and if syncing, iff set.
#if defined(USE_MODULE_FHT8VSIMPLE)
  // Print optional house code section if codes set.
  const uint8_t hc1 = FHT8VGetHC1();
    3fa8:	0e 94 95 0b 	call	0x172a	; 0x172a <FHT8VGetHC1()>
    3fac:	18 2f       	mov	r17, r24
  if(hc1 != 255)
    3fae:	8f 3f       	cpi	r24, 0xFF	; 255
    3fb0:	19 f1       	breq	.+70     	; 0x3ff8 <serialStatusReport()+0x2a6>
    {
    Serial.print(F(";HC"));
    3fb2:	81 ed       	ldi	r24, 0xD1	; 209
    3fb4:	94 e0       	ldi	r25, 0x04	; 4
    3fb6:	63 e6       	ldi	r22, 0x63	; 99
    3fb8:	73 e0       	ldi	r23, 0x03	; 3
    3fba:	0e 94 01 3c 	call	0x7802	; 0x7802 <Print::print(__FlashStringHelper const*)>
    Serial.print(hc1);
    3fbe:	81 ed       	ldi	r24, 0xD1	; 209
    3fc0:	94 e0       	ldi	r25, 0x04	; 4
    3fc2:	61 2f       	mov	r22, r17
    3fc4:	4a e0       	ldi	r20, 0x0A	; 10
    3fc6:	50 e0       	ldi	r21, 0x00	; 0
    3fc8:	0e 94 00 3d 	call	0x7a00	; 0x7a00 <Print::print(unsigned char, int)>
    Serial_print_space();
    3fcc:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <Serial_print_space()>
    Serial.print(FHT8VGetHC2());
    3fd0:	0e 94 9e 0b 	call	0x173c	; 0x173c <FHT8VGetHC2()>
    3fd4:	68 2f       	mov	r22, r24
    3fd6:	81 ed       	ldi	r24, 0xD1	; 209
    3fd8:	94 e0       	ldi	r25, 0x04	; 4
    3fda:	4a e0       	ldi	r20, 0x0A	; 10
    3fdc:	50 e0       	ldi	r21, 0x00	; 0
    3fde:	0e 94 00 3d 	call	0x7a00	; 0x7a00 <Print::print(unsigned char, int)>
    if(!isSyncedWithFHT8V())
    3fe2:	0e 94 c1 0b 	call	0x1782	; 0x1782 <isSyncedWithFHT8V()>
    3fe6:	88 23       	and	r24, r24
    3fe8:	39 f4       	brne	.+14     	; 0x3ff8 <serialStatusReport()+0x2a6>
      {
      Serial_print_space();
    3fea:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <Serial_print_space()>
      Serial.print('s'); // Indicate syncing with trailing lower-case 's' in field...
    3fee:	81 ed       	ldi	r24, 0xD1	; 209
    3ff0:	94 e0       	ldi	r25, 0x04	; 4
    3ff2:	63 e7       	ldi	r22, 0x73	; 115
    3ff4:	0e 94 24 3c 	call	0x7848	; 0x7848 <Print::print(char)>
  const uint8_t minValvePcOpen = NominalRadValve.getMinValvePcReallyOpen();
  if(DEFAULT_MIN_VALVE_PC_REALLY_OPEN != minValvePcOpen) { Serial.print(F(";M")); Serial.print(minValvePcOpen); }
#endif

#if 1 && defined(ALLOW_JSON_OUTPUT)
  Serial.print(';'); // Terminate previous section.
    3ff8:	81 ed       	ldi	r24, 0xD1	; 209
    3ffa:	94 e0       	ldi	r25, 0x04	; 4
    3ffc:	6b e3       	ldi	r22, 0x3B	; 59
    3ffe:	0e 94 24 3c 	call	0x7848	; 0x7848 <Print::print(char)>
  char buf[80];
  static SimpleStatsRotation<5> ss1; // Configured for maximum different stats.
    4002:	80 91 37 03 	lds	r24, 0x0337
    4006:	88 23       	and	r24, r24
    4008:	99 f5       	brne	.+102    	; 0x4070 <serialStatusReport()+0x31e>
    400a:	87 e3       	ldi	r24, 0x37	; 55
    400c:	93 e0       	ldi	r25, 0x03	; 3
    400e:	0e 94 c9 3b 	call	0x7792	; 0x7792 <__cxa_guard_acquire>
    4012:	89 2b       	or	r24, r25
    4014:	69 f1       	breq	.+90     	; 0x4070 <serialStatusReport()+0x31e>

    // Initialise base with appropriate storage (non-null) and capacity knowledge.
    SimpleStatsRotationBase(DescValueTuple *_stats, const uint8_t _capacity)
      : capacity(_capacity), stats(_stats), nStats(0),
        lastTXed(~0), lastTXedHiPri(~0), // Show the first item on the first pass...
        id(NULL)
    4016:	85 e0       	ldi	r24, 0x05	; 5
    4018:	80 93 3f 03 	sts	0x033F, r24
    401c:	28 e4       	ldi	r18, 0x48	; 72
    401e:	33 e0       	ldi	r19, 0x03	; 3
    4020:	30 93 41 03 	sts	0x0341, r19
    4024:	20 93 40 03 	sts	0x0340, r18
    4028:	10 92 42 03 	sts	0x0342, r1
    402c:	8f ef       	ldi	r24, 0xFF	; 255
    402e:	80 93 43 03 	sts	0x0343, r24
    4032:	80 93 44 03 	sts	0x0344, r24
    4036:	10 92 46 03 	sts	0x0346, r1
    403a:	10 92 45 03 	sts	0x0345, r1
    // is displayed immediately after the @/ID field when enabled,
    // and missing count values suggest a lost transmission somewhere.
    // Takes minimal space (1 byte).
    struct WriteCount
      {
      WriteCount() : enabled(0), count(0) { }
    403e:	80 91 47 03 	lds	r24, 0x0347
    4042:	80 78       	andi	r24, 0x80	; 128
    4044:	80 93 47 03 	sts	0x0347, r24
    4048:	f9 01       	movw	r30, r18
    // The default sensitivity is set to just forbid transmission at default (255) leaf settings.
    // Byt default the stat is normal priority.
    GenericStatsDescriptor(const char * const statKey,
                           const uint8_t statSensitivity = stTXsecOnly,
                           const bool statHighPriority = false)
      : key(statKey), sensitivity(statSensitivity), highPriority(statHighPriority)
    404a:	9e ef       	ldi	r25, 0xFE	; 254
    404c:	11 82       	std	Z+1, r1	; 0x01
    404e:	10 82       	st	Z, r1
    4050:	92 83       	std	Z+2, r25	; 0x02
    4052:	13 82       	std	Z+3, r1	; 0x03
    void enableCount(bool enable) { c.enabled = enable; }

  protected:
    struct DescValueTuple
      {
      DescValueTuple() : descriptor(NULL), value(0) { }
    4054:	15 82       	std	Z+5, r1	; 0x05
    4056:	14 82       	std	Z+4, r1	; 0x04
      int value;

      // Various run-time flags.
      struct Flags
        {
        Flags() : changed(false) { }
    4058:	86 81       	ldd	r24, Z+6	; 0x06
    405a:	8e 7f       	andi	r24, 0xFE	; 254
    405c:	86 83       	std	Z+6, r24	; 0x06
    405e:	37 96       	adiw	r30, 0x07	; 7
    // Stats to be tracked and sent; mandatory/priority items must be first.
    // A copy is taken of the user-supplied set of descriptions, preserving order.
    DescValueTuple stats[MaxStats];

  public:
    SimpleStatsRotation() : SimpleStatsRotationBase(stats, MaxStats) { }
    4060:	83 e0       	ldi	r24, 0x03	; 3
    4062:	eb 36       	cpi	r30, 0x6B	; 107
    4064:	f8 07       	cpc	r31, r24
    4066:	91 f7       	brne	.-28     	; 0x404c <serialStatusReport()+0x2fa>
    4068:	87 e3       	ldi	r24, 0x37	; 55
    406a:	93 e0       	ldi	r25, 0x03	; 3
    406c:	0e 94 d3 3b 	call	0x77a6	; 0x77a6 <__cxa_guard_release>
    // True if successful, false otherwise (eg capacity already reached).
    bool put(SimpleStatsKey key, int newValue);

    // Create/update value for the given sensor.
    // True if successful, false otherwise (eg capacity already reached).
    template <class T> bool put(const Sensor<T> &s) { put(s.tag(), s.get()); }
    4070:	e0 91 23 03 	lds	r30, 0x0323
    4074:	f0 91 24 03 	lds	r31, 0x0324
    4078:	00 84       	ldd	r0, Z+8	; 0x08
    407a:	f1 85       	ldd	r31, Z+9	; 0x09
    407c:	e0 2d       	mov	r30, r0
    407e:	83 e2       	ldi	r24, 0x23	; 35
    4080:	93 e0       	ldi	r25, 0x03	; 3
    4082:	09 95       	icall
    4084:	8c 01       	movw	r16, r24
    4086:	e0 91 23 03 	lds	r30, 0x0323
    408a:	f0 91 24 03 	lds	r31, 0x0324
    408e:	02 80       	ldd	r0, Z+2	; 0x02
    4090:	f3 81       	ldd	r31, Z+3	; 0x03
    4092:	e0 2d       	mov	r30, r0
    4094:	83 e2       	ldi	r24, 0x23	; 35
    4096:	93 e0       	ldi	r25, 0x03	; 3
    4098:	09 95       	icall
    409a:	ac 01       	movw	r20, r24
    409c:	8f e3       	ldi	r24, 0x3F	; 63
    409e:	93 e0       	ldi	r25, 0x03	; 3
    40a0:	b8 01       	movw	r22, r16
    40a2:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <SimpleStatsRotationBase::put(char const*, int)>
    40a6:	ce 01       	movw	r24, r28
    40a8:	09 96       	adiw	r24, 0x09	; 9
    40aa:	9c 83       	std	Y+4, r25	; 0x04
    40ac:	8b 83       	std	Y+3, r24	; 0x03
    40ae:	87 e0       	ldi	r24, 0x07	; 7
    40b0:	90 e0       	ldi	r25, 0x00	; 0
    40b2:	9e 83       	std	Y+6, r25	; 0x06
    40b4:	8d 83       	std	Y+5, r24	; 0x05
    40b6:	18 86       	std	Y+8, r1	; 0x08
    40b8:	1f 82       	std	Y+7, r1	; 0x07
    40ba:	8c e7       	ldi	r24, 0x7C	; 124
    40bc:	91 e0       	ldi	r25, 0x01	; 1
    40be:	9a 83       	std	Y+2, r25	; 0x02
    40c0:	89 83       	std	Y+1, r24	; 0x01
    uint8_t writeJSON(uint8_t * const buf, const uint8_t bufSize, const uint8_t sensitivity,
                      const bool maximise = false, const bool suppressClearChanged = true)
      {
      // Create temporary instance for @/ID plus optional count plus remaining stats...
      ArduinoJson::Generator::JsonObject<MaxStats+2> jo;
      return(_writeJSON(jo, buf, bufSize, sensitivity, maximise, suppressClearChanged));
    40c2:	81 e4       	ldi	r24, 0x41	; 65
    40c4:	a8 2e       	mov	r10, r24
    40c6:	b1 2c       	mov	r11, r1
    40c8:	ac 0e       	add	r10, r28
    40ca:	bd 1e       	adc	r11, r29
    40cc:	8f e3       	ldi	r24, 0x3F	; 63
    40ce:	93 e0       	ldi	r25, 0x03	; 3
    40d0:	be 01       	movw	r22, r28
    40d2:	6f 5f       	subi	r22, 0xFF	; 255
    40d4:	7f 4f       	sbci	r23, 0xFF	; 255
    40d6:	a5 01       	movw	r20, r10
    40d8:	20 e5       	ldi	r18, 0x50	; 80
    40da:	00 e0       	ldi	r16, 0x00	; 0
    40dc:	ee 24       	eor	r14, r14
    40de:	e3 94       	inc	r14
    40e0:	cc 24       	eor	r12, r12
    40e2:	c3 94       	inc	r12
    40e4:	0e 94 0e 10 	call	0x201c	; 0x201c <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)>
//#endif
//  ss1.put("L", AmbLight.get()/4);
  ss1.put(Supply_mV);
  // If not doing a doubleTX then suppress the change-flag clearing for this send.
  const uint8_t wrote = ss1.writeJSON((uint8_t *)buf, sizeof(buf), 0, true);
  if(0 != wrote) { Serial.print(buf); }
    40e8:	88 23       	and	r24, r24
    40ea:	29 f0       	breq	.+10     	; 0x40f6 <serialStatusReport()+0x3a4>
    40ec:	81 ed       	ldi	r24, 0xD1	; 209
    40ee:	94 e0       	ldi	r25, 0x04	; 4
    40f0:	b5 01       	movw	r22, r10
    40f2:	0e 94 65 3d 	call	0x7aca	; 0x7aca <Print::print(char const*)>
#endif

  // Terminate line.
  Serial.println();
    40f6:	81 ed       	ldi	r24, 0xD1	; 209
    40f8:	94 e0       	ldi	r25, 0x04	; 4
    40fa:	0e 94 2c 3c 	call	0x7858	; 0x7858 <Print::println()>

  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  flushSerialSCTSensitive();
    40fe:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <flushSerialSCTSensitive()>

  if(neededWaking) { powerDownSerial(); }
    4102:	dd 20       	and	r13, r13
    4104:	11 f0       	breq	.+4      	; 0x410a <serialStatusReport()+0x3b8>
    4106:	0e 94 ad 18 	call	0x315a	; 0x315a <powerDownSerial()>
  }
    410a:	c0 57       	subi	r28, 0x70	; 112
    410c:	df 4f       	sbci	r29, 0xFF	; 255
    410e:	0f b6       	in	r0, 0x3f	; 63
    4110:	f8 94       	cli
    4112:	de bf       	out	0x3e, r29	; 62
    4114:	0f be       	out	0x3f, r0	; 63
    4116:	cd bf       	out	0x3d, r28	; 61
    4118:	cf 91       	pop	r28
    411a:	df 91       	pop	r29
    411c:	1f 91       	pop	r17
    411e:	0f 91       	pop	r16
    4120:	ff 90       	pop	r15
    4122:	ef 90       	pop	r14
    4124:	df 90       	pop	r13
    4126:	cf 90       	pop	r12
    4128:	bf 90       	pop	r11
    412a:	af 90       	pop	r10
    412c:	08 95       	ret

0000412e <markUIControlUsed()>:
// Record local manual operation of a local physical UI control, eg not remote or via CLI.
// To be thread-safe, everything that this touches or calls must be.
// Thread-safe.
void markUIControlUsed()
  {
  statusChange = true; // Note user interaction with the system.
    412e:	81 e0       	ldi	r24, 0x01	; 1
    4130:	80 93 6c 03 	sts	0x036C, r24
  uiTimeoutM = UI_DEFAULT_TIMEOUT_M; // Ensure that UI controls are kept 'warm' for a little while.
    4134:	82 e0       	ldi	r24, 0x02	; 2
    4136:	80 93 6b 03 	sts	0x036B, r24
#define CLI_DEFAULT_TIMEOUT_M 2
static volatile uint8_t CLITimeoutM = CLI_DEFAULT_TIMEOUT_M;

// Reset CLI active timer to the full whack before it goes inactive again (ie makes CLI active for a while).
// Thread-safe.
void resetCLIActiveTimer() { CLITimeoutM = CLI_DEFAULT_TIMEOUT_M; }
    413a:	80 93 49 01 	sts	0x0149, r24
  statusChange = true; // Note user interaction with the system.
  uiTimeoutM = UI_DEFAULT_TIMEOUT_M; // Ensure that UI controls are kept 'warm' for a little while.
  // Make CLI active for a while (at some slight possibly-significant energy cost).
  resetCLIActiveTimer(); // Thread-safe.
  // User operation of controls locally is strong indication of presence.
  markAsOccupied(); // Thread-safe.
    413e:	0e 94 0b 05 	call	0xa16	; 0xa16 <markAsOccupied()>
  }
    4142:	08 95       	ret

00004144 <randRNG8NextBoolean()>:
    4144:	0e 94 9e 19 	call	0x333c	; 0x333c <randRNG8()>
    4148:	90 e0       	ldi	r25, 0x00	; 0
    414a:	23 e0       	ldi	r18, 0x03	; 3
    414c:	96 95       	lsr	r25
    414e:	87 95       	ror	r24
    4150:	2a 95       	dec	r18
    4152:	e1 f7       	brne	.-8      	; 0x414c <randRNG8NextBoolean()+0x8>
    4154:	81 70       	andi	r24, 0x01	; 1
    4156:	08 95       	ret

00004158 <SimpleStatsRotation<(unsigned char)4>::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)>:
    //   * maximise  if true attempt to maximise the number of stats squeezed into each frame,
    //       potentially at the cost of signficant CPU time
    //   * suppressClearChanged  if true then 'changed' flag for included fields is not cleared by this
    //       allowing them to continue to be treated as higher priority
    uint8_t writeJSON(uint8_t * const buf, const uint8_t bufSize, const uint8_t sensitivity,
                      const bool maximise = false, const bool suppressClearChanged = true)
    4158:	cf 92       	push	r12
    415a:	ef 92       	push	r14
    415c:	0f 93       	push	r16
    415e:	1f 93       	push	r17
    4160:	df 93       	push	r29
    4162:	cf 93       	push	r28
    4164:	cd b7       	in	r28, 0x3d	; 61
    4166:	de b7       	in	r29, 0x3e	; 62
    4168:	e8 97       	sbiw	r28, 0x38	; 56
    416a:	0f b6       	in	r0, 0x3f	; 63
    416c:	f8 94       	cli
    416e:	de bf       	out	0x3e, r29	; 62
    4170:	0f be       	out	0x3f, r0	; 63
    4172:	cd bf       	out	0x3d, r28	; 61
    4174:	fb 01       	movw	r30, r22
    4176:	a4 2f       	mov	r26, r20
    4178:	b2 2f       	mov	r27, r18
    417a:	10 2f       	mov	r17, r16
    417c:	ce 2c       	mov	r12, r14
    417e:	9e 01       	movw	r18, r28
    4180:	27 5f       	subi	r18, 0xF7	; 247
    4182:	3f 4f       	sbci	r19, 0xFF	; 255
    4184:	3c 83       	std	Y+4, r19	; 0x04
    4186:	2b 83       	std	Y+3, r18	; 0x03
    4188:	26 e0       	ldi	r18, 0x06	; 6
    418a:	30 e0       	ldi	r19, 0x00	; 0
    418c:	3e 83       	std	Y+6, r19	; 0x06
    418e:	2d 83       	std	Y+5, r18	; 0x05
    4190:	18 86       	std	Y+8, r1	; 0x08
    4192:	1f 82       	std	Y+7, r1	; 0x07
    4194:	28 e9       	ldi	r18, 0x98	; 152
    4196:	31 e0       	ldi	r19, 0x01	; 1
    4198:	3a 83       	std	Y+2, r19	; 0x02
    419a:	29 83       	std	Y+1, r18	; 0x01
      {
      // Create temporary instance for @/ID plus optional count plus remaining stats...
      ArduinoJson::Generator::JsonObject<MaxStats+2> jo;
      return(_writeJSON(jo, buf, bufSize, sensitivity, maximise, suppressClearChanged));
    419c:	be 01       	movw	r22, r28
    419e:	6f 5f       	subi	r22, 0xFF	; 255
    41a0:	7f 4f       	sbci	r23, 0xFF	; 255
    41a2:	af 01       	movw	r20, r30
    41a4:	2a 2f       	mov	r18, r26
    41a6:	0b 2f       	mov	r16, r27
    41a8:	e1 2e       	mov	r14, r17
    41aa:	0e 94 0e 10 	call	0x201c	; 0x201c <SimpleStatsRotationBase::_writeJSON(ArduinoJson::Generator::JsonObjectBase&, unsigned char*, unsigned char, unsigned char, bool, bool)>
      }
    41ae:	e8 96       	adiw	r28, 0x38	; 56
    41b0:	0f b6       	in	r0, 0x3f	; 63
    41b2:	f8 94       	cli
    41b4:	de bf       	out	0x3e, r29	; 62
    41b6:	0f be       	out	0x3f, r0	; 63
    41b8:	cd bf       	out	0x3d, r28	; 61
    41ba:	cf 91       	pop	r28
    41bc:	df 91       	pop	r29
    41be:	1f 91       	pop	r17
    41c0:	0f 91       	pop	r16
    41c2:	ef 90       	pop	r14
    41c4:	cf 90       	pop	r12
    41c6:	08 95       	ret

000041c8 <testEEPROM()>:
// Self-test of EEPROM functioning (and smart/split erase/write).
// Will not usually perform any wear-inducing activity (is idempotent).
// Aborts with panic() upon failure.
static void testEEPROM()
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testEEPROM");
    41c8:	81 ed       	ldi	r24, 0xD1	; 209
    41ca:	94 e0       	ldi	r25, 0x04	; 4
    41cc:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <serialPrintlnAndFlush(__FlashStringHelper const*)>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    41d0:	f9 99       	sbic	0x1f, 1	; 31
    41d2:	fe cf       	rjmp	.-4      	; 0x41d0 <testEEPROM()+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    41d4:	12 bc       	out	0x22, r1	; 34
    41d6:	11 bc       	out	0x21, r1	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    41d8:	f8 9a       	sbi	0x1f, 0	; 31
    41da:	80 b5       	in	r24, 0x20	; 32

  if((uint8_t) 0xff != eeprom_read_byte((uint8_t*)EE_START_TEST_LOC))
    41dc:	8f 3f       	cpi	r24, 0xFF	; 255
    41de:	91 f0       	breq	.+36     	; 0x4204 <testEEPROM()+0x3c>
    {
    if(!eeprom_smart_erase_byte((uint8_t*)EE_START_TEST_LOC)) { panic(); } // Should have attempted erase.
    41e0:	80 e0       	ldi	r24, 0x00	; 0
    41e2:	90 e0       	ldi	r25, 0x00	; 0
    41e4:	0e 94 81 0a 	call	0x1502	; 0x1502 <eeprom_smart_erase_byte(unsigned char*)>
    41e8:	88 23       	and	r24, r24
    41ea:	11 f4       	brne	.+4      	; 0x41f0 <testEEPROM()+0x28>
    41ec:	0e 94 c8 2e 	call	0x5d90	; 0x5d90 <panic()>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    41f0:	f9 99       	sbic	0x1f, 1	; 31
    41f2:	fe cf       	rjmp	.-4      	; 0x41f0 <testEEPROM()+0x28>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    41f4:	12 bc       	out	0x22, r1	; 34
    41f6:	11 bc       	out	0x21, r1	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    41f8:	f8 9a       	sbi	0x1f, 0	; 31
    41fa:	80 b5       	in	r24, 0x20	; 32
    if((uint8_t) 0xff != eeprom_read_byte((uint8_t*)EE_START_TEST_LOC)) { panic(); } // Should have erased.
    41fc:	8f 3f       	cpi	r24, 0xFF	; 255
    41fe:	11 f0       	breq	.+4      	; 0x4204 <testEEPROM()+0x3c>
    4200:	0e 94 c8 2e 	call	0x5d90	; 0x5d90 <panic()>
    }
  if(eeprom_smart_erase_byte((uint8_t*)EE_START_TEST_LOC)) { panic(); } // Should not need erase nor attempt one.
    4204:	80 e0       	ldi	r24, 0x00	; 0
    4206:	90 e0       	ldi	r25, 0x00	; 0
    4208:	0e 94 81 0a 	call	0x1502	; 0x1502 <eeprom_smart_erase_byte(unsigned char*)>
    420c:	88 23       	and	r24, r24
    420e:	11 f0       	breq	.+4      	; 0x4214 <testEEPROM()+0x4c>
    4210:	0e 94 c8 2e 	call	0x5d90	; 0x5d90 <panic()>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    4214:	f9 99       	sbic	0x1f, 1	; 31
    4216:	fe cf       	rjmp	.-4      	; 0x4214 <testEEPROM()+0x4c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    4218:	81 e0       	ldi	r24, 0x01	; 1
    421a:	90 e0       	ldi	r25, 0x00	; 0
    421c:	92 bd       	out	0x22, r25	; 34
    421e:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    4220:	f8 9a       	sbi	0x1f, 0	; 31
    4222:	80 b5       	in	r24, 0x20	; 32

  const uint8_t eaTestPattern = 0xa5; // Test pattern for masking (selective bit clearing).
  if(0 != ((~eaTestPattern) & eeprom_read_byte((uint8_t*)EE_START_TEST_LOC2))) // Will need to clear some bits.
    4224:	8a 75       	andi	r24, 0x5A	; 90
    4226:	a9 f0       	breq	.+42     	; 0x4252 <testEEPROM()+0x8a>
    {
      if(!eeprom_smart_clear_bits((uint8_t*)EE_START_TEST_LOC2, eaTestPattern)) { panic(); } // Should have attempted write.
    4228:	81 e0       	ldi	r24, 0x01	; 1
    422a:	90 e0       	ldi	r25, 0x00	; 0
    422c:	65 ea       	ldi	r22, 0xA5	; 165
    422e:	0e 94 95 0a 	call	0x152a	; 0x152a <eeprom_smart_clear_bits(unsigned char*, unsigned char)>
    4232:	88 23       	and	r24, r24
    4234:	11 f4       	brne	.+4      	; 0x423a <testEEPROM()+0x72>
    4236:	0e 94 c8 2e 	call	0x5d90	; 0x5d90 <panic()>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    423a:	f9 99       	sbic	0x1f, 1	; 31
    423c:	fe cf       	rjmp	.-4      	; 0x423a <testEEPROM()+0x72>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    423e:	81 e0       	ldi	r24, 0x01	; 1
    4240:	90 e0       	ldi	r25, 0x00	; 0
    4242:	92 bd       	out	0x22, r25	; 34
    4244:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    4246:	f8 9a       	sbi	0x1f, 0	; 31
    4248:	80 b5       	in	r24, 0x20	; 32
      if(0 != ((~eaTestPattern) & eeprom_read_byte((uint8_t*)EE_START_TEST_LOC2))) { panic(); } // Should have written.
    424a:	8a 75       	andi	r24, 0x5A	; 90
    424c:	11 f0       	breq	.+4      	; 0x4252 <testEEPROM()+0x8a>
    424e:	0e 94 c8 2e 	call	0x5d90	; 0x5d90 <panic()>
    }
  if(eeprom_smart_clear_bits((uint8_t*)EE_START_TEST_LOC2, eaTestPattern)) { panic(); } // Should not need write nor attempt one.
    4252:	81 e0       	ldi	r24, 0x01	; 1
    4254:	90 e0       	ldi	r25, 0x00	; 0
    4256:	65 ea       	ldi	r22, 0xA5	; 165
    4258:	0e 94 95 0a 	call	0x152a	; 0x152a <eeprom_smart_clear_bits(unsigned char*, unsigned char)>
    425c:	88 23       	and	r24, r24
    425e:	11 f0       	breq	.+4      	; 0x4264 <testEEPROM()+0x9c>
    4260:	0e 94 c8 2e 	call	0x5d90	; 0x5d90 <panic()>
    4264:	08 95       	ret

00004266 <sleepLowPowerMs(unsigned int)>:
// This may be achieved in part by dynamically slowing the CPU clock if possible.
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed((((MIN_CPU_HZ * (ms)) + 2000) / 4000) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    4266:	a0 e0       	ldi	r26, 0x00	; 0
    4268:	b0 e0       	ldi	r27, 0x00	; 0
    426a:	bc 01       	movw	r22, r24
    426c:	cd 01       	movw	r24, r26
    426e:	22 e1       	ldi	r18, 0x12	; 18
    4270:	3a e7       	ldi	r19, 0x7A	; 122
    4272:	40 e0       	ldi	r20, 0x00	; 0
    4274:	50 e0       	ldi	r21, 0x00	; 0
    4276:	0e 94 f4 3d 	call	0x7be8	; 0x7be8 <__mulsi3>
    427a:	60 53       	subi	r22, 0x30	; 48
    427c:	78 4f       	sbci	r23, 0xF8	; 248
    427e:	8f 4f       	sbci	r24, 0xFF	; 255
    4280:	9f 4f       	sbci	r25, 0xFF	; 255
    4282:	20 ea       	ldi	r18, 0xA0	; 160
    4284:	3f e0       	ldi	r19, 0x0F	; 15
    4286:	40 e0       	ldi	r20, 0x00	; 0
    4288:	50 e0       	ldi	r21, 0x00	; 0
    428a:	0e 94 5c 3e 	call	0x7cb8	; 0x7cb8 <__divmodsi4>
    428e:	da 01       	movw	r26, r20
    4290:	c9 01       	movw	r24, r18
    4292:	02 97       	sbiw	r24, 0x02	; 2
    4294:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
    4298:	08 95       	ret

0000429a <error(int, int)>:
#include "Serial_IO.h"


// Error exit from failed unit test, one int parameter and the failing line number to print...
// Expects to terminate like panic() with flashing light can be detected by eye or in hardware if required.
static void error(int err, int line)
    429a:	0f 93       	push	r16
    429c:	1f 93       	push	r17
    429e:	cf 93       	push	r28
    42a0:	df 93       	push	r29
    42a2:	8c 01       	movw	r16, r24
    42a4:	eb 01       	movw	r28, r22
  {
  for( ; ; )
    {
    serialPrintAndFlush(F("***Test FAILED*** val="));
    42a6:	83 e2       	ldi	r24, 0x23	; 35
    42a8:	94 e0       	ldi	r25, 0x04	; 4
    42aa:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <serialPrintAndFlush(__FlashStringHelper const*)>
    serialPrintAndFlush(err, DEC);
    42ae:	c8 01       	movw	r24, r16
    42b0:	6a e0       	ldi	r22, 0x0A	; 10
    42b2:	70 e0       	ldi	r23, 0x00	; 0
    42b4:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <serialPrintAndFlush(int, int)>
    serialPrintAndFlush(F(" =0x"));
    42b8:	8e e1       	ldi	r24, 0x1E	; 30
    42ba:	94 e0       	ldi	r25, 0x04	; 4
    42bc:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <serialPrintAndFlush(__FlashStringHelper const*)>
    serialPrintAndFlush(err, HEX);
    42c0:	c8 01       	movw	r24, r16
    42c2:	60 e1       	ldi	r22, 0x10	; 16
    42c4:	70 e0       	ldi	r23, 0x00	; 0
    42c6:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <serialPrintAndFlush(int, int)>
    if(0 != line)
    42ca:	20 97       	sbiw	r28, 0x00	; 0
    42cc:	49 f0       	breq	.+18     	; 0x42e0 <error(int, int)+0x46>
      {
      serialPrintAndFlush(F(" at line "));
    42ce:	84 e1       	ldi	r24, 0x14	; 20
    42d0:	94 e0       	ldi	r25, 0x04	; 4
    42d2:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <serialPrintAndFlush(__FlashStringHelper const*)>
      serialPrintAndFlush(line);
    42d6:	ce 01       	movw	r24, r28
    42d8:	6a e0       	ldi	r22, 0x0A	; 10
    42da:	70 e0       	ldi	r23, 0x00	; 0
    42dc:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <serialPrintAndFlush(int, int)>
      }
    serialPrintlnAndFlush();
    42e0:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <serialPrintlnAndFlush()>
    LED_HEATCALL_ON();
    42e4:	5c 98       	cbi	0x0b, 4	; 11
// Very tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define VERYTINY_PAUSE_MS 5
static void inline veryTinyPause() { sleepLowPowerMs(VERYTINY_PAUSE_MS); }
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define TINY_PAUSE_MS 15
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    42e6:	80 e0       	ldi	r24, 0x00	; 0
    42e8:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <nap(signed char)>
    tinyPause();
    LED_HEATCALL_OFF();
    42ec:	5c 9a       	sbi	0x0b, 4	; 11
    sleepLowPowerMs(1000);
    42ee:	88 ee       	ldi	r24, 0xE8	; 232
    42f0:	93 e0       	ldi	r25, 0x03	; 3
    42f2:	0e 94 33 21 	call	0x4266	; 0x4266 <sleepLowPowerMs(unsigned int)>
    42f6:	d7 cf       	rjmp	.-82     	; 0x42a6 <error(int, int)+0xc>

000042f8 <testJSONStatsHandling()>:
#define AssertIsEqual(expected, x) { errorIfNotEqual((expected), (x), __LINE__); }



// Test handling of JSON stats.
static void testJSONStatsHandling()
    42f8:	cf 92       	push	r12
    42fa:	df 92       	push	r13
    42fc:	ef 92       	push	r14
    42fe:	ff 92       	push	r15
    4300:	0f 93       	push	r16
    4302:	1f 93       	push	r17
    4304:	df 93       	push	r29
    4306:	cf 93       	push	r28
    4308:	cd b7       	in	r28, 0x3d	; 61
    430a:	de b7       	in	r29, 0x3e	; 62
    430c:	ce 55       	subi	r28, 0x5E	; 94
    430e:	d0 40       	sbci	r29, 0x00	; 0
    4310:	0f b6       	in	r0, 0x3f	; 63
    4312:	f8 94       	cli
    4314:	de bf       	out	0x3e, r29	; 62
    4316:	0f be       	out	0x3f, r0	; 63
    4318:	cd bf       	out	0x3d, r28	; 61
  {
#if defined(ALLOW_JSON_OUTPUT)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testJSONStatsHandling");
    431a:	8e ef       	ldi	r24, 0xFE	; 254
    431c:	93 e0       	ldi	r25, 0x03	; 3
    431e:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <serialPrintlnAndFlush(__FlashStringHelper const*)>

    // Initialise base with appropriate storage (non-null) and capacity knowledge.
    SimpleStatsRotationBase(DescValueTuple *_stats, const uint8_t _capacity)
      : capacity(_capacity), stats(_stats), nStats(0),
        lastTXed(~0), lastTXedHiPri(~0), // Show the first item on the first pass...
        id(NULL)
    4322:	84 e0       	ldi	r24, 0x04	; 4
    4324:	89 83       	std	Y+1, r24	; 0x01
    4326:	3a e0       	ldi	r19, 0x0A	; 10
    4328:	c3 2e       	mov	r12, r19
    432a:	d1 2c       	mov	r13, r1
    432c:	cc 0e       	add	r12, r28
    432e:	dd 1e       	adc	r13, r29
    // The default sensitivity is set to just forbid transmission at default (255) leaf settings.
    // Byt default the stat is normal priority.
    GenericStatsDescriptor(const char * const statKey,
                           const uint8_t statSensitivity = stTXsecOnly,
                           const bool statHighPriority = false)
      : key(statKey), sensitivity(statSensitivity), highPriority(statHighPriority)
    4330:	9e ef       	ldi	r25, 0xFE	; 254
    // Stats to be tracked and sent; mandatory/priority items must be first.
    // A copy is taken of the user-supplied set of descriptions, preserving order.
    DescValueTuple stats[MaxStats];

  public:
    SimpleStatsRotation() : SimpleStatsRotationBase(stats, MaxStats) { }
    4332:	9e 01       	movw	r18, r28
    4334:	2a 5d       	subi	r18, 0xDA	; 218
    4336:	3f 4f       	sbci	r19, 0xFF	; 255
    // The default sensitivity is set to just forbid transmission at default (255) leaf settings.
    // Byt default the stat is normal priority.
    GenericStatsDescriptor(const char * const statKey,
                           const uint8_t statSensitivity = stTXsecOnly,
                           const bool statHighPriority = false)
      : key(statKey), sensitivity(statSensitivity), highPriority(statHighPriority)
    4338:	f6 01       	movw	r30, r12
    433a:	11 82       	std	Z+1, r1	; 0x01
    433c:	10 82       	st	Z, r1
    433e:	92 83       	std	Z+2, r25	; 0x02
    4340:	13 82       	std	Z+3, r1	; 0x03
    void enableCount(bool enable) { c.enabled = enable; }

  protected:
    struct DescValueTuple
      {
      DescValueTuple() : descriptor(NULL), value(0) { }
    4342:	15 82       	std	Z+5, r1	; 0x05
    4344:	14 82       	std	Z+4, r1	; 0x04
      int value;

      // Various run-time flags.
      struct Flags
        {
        Flags() : changed(false) { }
    4346:	86 81       	ldd	r24, Z+6	; 0x06
    4348:	8e 7f       	andi	r24, 0xFE	; 254
    434a:	86 83       	std	Z+6, r24	; 0x06
    434c:	47 e0       	ldi	r20, 0x07	; 7
    434e:	50 e0       	ldi	r21, 0x00	; 0
    4350:	c4 0e       	add	r12, r20
    4352:	d5 1e       	adc	r13, r21
    // Stats to be tracked and sent; mandatory/priority items must be first.
    // A copy is taken of the user-supplied set of descriptions, preserving order.
    DescValueTuple stats[MaxStats];

  public:
    SimpleStatsRotation() : SimpleStatsRotationBase(stats, MaxStats) { }
    4354:	c2 16       	cp	r12, r18
    4356:	d3 06       	cpc	r13, r19
    4358:	79 f7       	brne	.-34     	; 0x4338 <testJSONStatsHandling()+0x40>

    // Set ID to given value, or null to track system ID.
    // If null (the default) then dynamically generate the system ID,
    // eg house code as two bytes of hex if set, else first two bytes of binary ID as hex.
    // The lifetime of the pointed to string must exceed that of this instance.
    void setID(const char * const _id) { id = _id; }
    435a:	8d e0       	ldi	r24, 0x0D	; 13
    435c:	91 e0       	ldi	r25, 0x01	; 1
    435e:	98 87       	std	Y+8, r25	; 0x08
    4360:	8f 83       	std	Y+7, r24	; 0x07
    // is displayed immediately after the @/ID field when enabled,
    // and missing count values suggest a lost transmission somewhere.
    // Takes minimal space (1 byte).
    struct WriteCount
      {
      WriteCount() : enabled(0), count(0) { }
    4362:	89 85       	ldd	r24, Y+9	; 0x09
    4364:	80 78       	andi	r24, 0x80	; 128
    4366:	89 87       	std	Y+9, r24	; 0x09

    // Initialise base with appropriate storage (non-null) and capacity knowledge.
    SimpleStatsRotationBase(DescValueTuple *_stats, const uint8_t _capacity)
      : capacity(_capacity), stats(_stats), nStats(0),
        lastTXed(~0), lastTXedHiPri(~0), // Show the first item on the first pass...
        id(NULL)
    4368:	8f ef       	ldi	r24, 0xFF	; 255
    436a:	8e 83       	std	Y+6, r24	; 0x06
    436c:	8d 83       	std	Y+5, r24	; 0x05
    436e:	1c 82       	std	Y+4, r1	; 0x04
    4370:	ce 01       	movw	r24, r28
    4372:	0a 96       	adiw	r24, 0x0a	; 10
    4374:	9b 83       	std	Y+3, r25	; 0x03
    4376:	8a 83       	std	Y+2, r24	; 0x02
  SimpleStatsRotation<4> ss1;
  ss1.setID("1234");
  //AssertIsTrue(0 == ss1.writeJSON(NULL, randRNG8(), randRNG8(), randRNG8NextBoolean()));
  char buf[MSG_JSON_MAX_LENGTH + 2]; // Allow for trailing '\0' and spare byte.
  // Create minimal JSON message with no data content. just the (supplied) ID.
  const uint8_t l1 = ss1.writeJSON((uint8_t*)buf, sizeof(buf), randRNG8(), randRNG8NextBoolean());
    4378:	0e 94 9e 19 	call	0x333c	; 0x333c <randRNG8()>
    437c:	18 2f       	mov	r17, r24
    437e:	0e 94 a2 20 	call	0x4144	; 0x4144 <randRNG8NextBoolean()>
    4382:	08 2f       	mov	r16, r24
    4384:	ce 01       	movw	r24, r28
    4386:	01 96       	adiw	r24, 0x01	; 1
    4388:	b6 01       	movw	r22, r12
    438a:	49 e3       	ldi	r20, 0x39	; 57
    438c:	21 2f       	mov	r18, r17
    438e:	ee 24       	eor	r14, r14
    4390:	e3 94       	inc	r14
    4392:	0e 94 ac 20 	call	0x4158	; 0x4158 <SimpleStatsRotation<(unsigned char)4>::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)>
//serialPrintAndFlush(buf); serialPrintlnAndFlush();
  AssertIsEqual(12, l1);
    4396:	90 e0       	ldi	r25, 0x00	; 0
    sleepLowPowerMs(1000);
    }
  }

// Deal with common equality test.
static inline void errorIfNotEqual(int expected, int actual, int line) { if(expected != actual) { error(actual, line); } }
    4398:	8c 30       	cpi	r24, 0x0C	; 12
    439a:	91 05       	cpc	r25, r1
    439c:	21 f0       	breq	.+8      	; 0x43a6 <testJSONStatsHandling()+0xae>
    439e:	64 e6       	ldi	r22, 0x64	; 100
    43a0:	70 e0       	ldi	r23, 0x00	; 0
    43a2:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  char buf[MSG_JSON_MAX_LENGTH + 2]; // Allow for trailing '\0' and spare byte.
  // Create minimal JSON message with no data content. just the (supplied) ID.
  const uint8_t l1 = ss1.writeJSON((uint8_t*)buf, sizeof(buf), randRNG8(), randRNG8NextBoolean());
//serialPrintAndFlush(buf); serialPrintlnAndFlush();
  AssertIsEqual(12, l1);
  AssertIsTrue(0 == strcmp_P(buf, (const char PROGMEM *)F("{\"@\":\"1234\"}")));
    43a6:	ce 01       	movw	r24, r28
    43a8:	86 96       	adiw	r24, 0x26	; 38
    43aa:	61 ef       	ldi	r22, 0xF1	; 241
    43ac:	73 e0       	ldi	r23, 0x03	; 3
    43ae:	0e 94 30 04 	call	0x860	; 0x860 <strcmp_P>
    43b2:	89 2b       	or	r24, r25
    43b4:	31 f0       	breq	.+12     	; 0x43c2 <testJSONStatsHandling()+0xca>
    43b6:	80 e0       	ldi	r24, 0x00	; 0
    43b8:	90 e0       	ldi	r25, 0x00	; 0
    43ba:	65 e6       	ldi	r22, 0x65	; 101
    43bc:	70 e0       	ldi	r23, 0x00	; 0
    43be:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
    bool isEmpty() { return(0 == nStats); }

    // Iff true enable the count ("+") field and display immediately after the "@"/ID field.
    // The unsigned count increments as a successful write() operation completes,
    // and wraps after 63 (to limit space), potentially allowing easy detection of lost stats/transmissions.
    void enableCount(bool enable) { c.enabled = enable; }
    43c2:	89 85       	ldd	r24, Y+9	; 0x09
    43c4:	8e 7f       	andi	r24, 0xFE	; 254
    43c6:	89 87       	std	Y+9, r24	; 0x09
  ss1.enableCount(false);
  AssertIsEqual(12, ss1.writeJSON((uint8_t*)buf, sizeof(buf), randRNG8(), randRNG8NextBoolean()));
    43c8:	0e 94 9e 19 	call	0x333c	; 0x333c <randRNG8()>
    43cc:	18 2f       	mov	r17, r24
    43ce:	0e 94 a2 20 	call	0x4144	; 0x4144 <randRNG8NextBoolean()>
    43d2:	08 2f       	mov	r16, r24
    43d4:	ce 01       	movw	r24, r28
    43d6:	01 96       	adiw	r24, 0x01	; 1
    43d8:	b6 01       	movw	r22, r12
    43da:	49 e3       	ldi	r20, 0x39	; 57
    43dc:	21 2f       	mov	r18, r17
    43de:	ee 24       	eor	r14, r14
    43e0:	e3 94       	inc	r14
    43e2:	0e 94 ac 20 	call	0x4158	; 0x4158 <SimpleStatsRotation<(unsigned char)4>::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)>
    43e6:	90 e0       	ldi	r25, 0x00	; 0
    sleepLowPowerMs(1000);
    }
  }

// Deal with common equality test.
static inline void errorIfNotEqual(int expected, int actual, int line) { if(expected != actual) { error(actual, line); } }
    43e8:	8c 30       	cpi	r24, 0x0C	; 12
    43ea:	91 05       	cpc	r25, r1
    43ec:	21 f0       	breq	.+8      	; 0x43f6 <testJSONStatsHandling()+0xfe>
    43ee:	67 e6       	ldi	r22, 0x67	; 103
    43f0:	70 e0       	ldi	r23, 0x00	; 0
    43f2:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
//serialPrintAndFlush(buf); serialPrintlnAndFlush();
  AssertIsEqual(12, l1);
  AssertIsTrue(0 == strcmp_P(buf, (const char PROGMEM *)F("{\"@\":\"1234\"}")));
  ss1.enableCount(false);
  AssertIsEqual(12, ss1.writeJSON((uint8_t*)buf, sizeof(buf), randRNG8(), randRNG8NextBoolean()));
  AssertIsTrue(0 == strcmp_P(buf, (const char PROGMEM *)F("{\"@\":\"1234\"}")));
    43f6:	ce 01       	movw	r24, r28
    43f8:	86 96       	adiw	r24, 0x26	; 38
    43fa:	64 ee       	ldi	r22, 0xE4	; 228
    43fc:	73 e0       	ldi	r23, 0x03	; 3
    43fe:	0e 94 30 04 	call	0x860	; 0x860 <strcmp_P>
    4402:	89 2b       	or	r24, r25
    4404:	31 f0       	breq	.+12     	; 0x4412 <testJSONStatsHandling()+0x11a>
    4406:	80 e0       	ldi	r24, 0x00	; 0
    4408:	90 e0       	ldi	r25, 0x00	; 0
    440a:	68 e6       	ldi	r22, 0x68	; 104
    440c:	70 e0       	ldi	r23, 0x00	; 0
    440e:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
    4412:	89 85       	ldd	r24, Y+9	; 0x09
    4414:	81 60       	ori	r24, 0x01	; 1
    4416:	89 87       	std	Y+9, r24	; 0x09
  // Check that count works.
  ss1.enableCount(true);
  AssertIsEqual(18, ss1.writeJSON((uint8_t*)buf, sizeof(buf), randRNG8(), randRNG8NextBoolean()));
    4418:	0e 94 9e 19 	call	0x333c	; 0x333c <randRNG8()>
    441c:	18 2f       	mov	r17, r24
    441e:	0e 94 a2 20 	call	0x4144	; 0x4144 <randRNG8NextBoolean()>
    4422:	08 2f       	mov	r16, r24
    4424:	ce 01       	movw	r24, r28
    4426:	01 96       	adiw	r24, 0x01	; 1
    4428:	b6 01       	movw	r22, r12
    442a:	49 e3       	ldi	r20, 0x39	; 57
    442c:	21 2f       	mov	r18, r17
    442e:	ee 24       	eor	r14, r14
    4430:	e3 94       	inc	r14
    4432:	0e 94 ac 20 	call	0x4158	; 0x4158 <SimpleStatsRotation<(unsigned char)4>::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)>
    4436:	90 e0       	ldi	r25, 0x00	; 0
    sleepLowPowerMs(1000);
    }
  }

// Deal with common equality test.
static inline void errorIfNotEqual(int expected, int actual, int line) { if(expected != actual) { error(actual, line); } }
    4438:	82 31       	cpi	r24, 0x12	; 18
    443a:	91 05       	cpc	r25, r1
    443c:	21 f0       	breq	.+8      	; 0x4446 <testJSONStatsHandling()+0x14e>
    443e:	6b e6       	ldi	r22, 0x6B	; 107
    4440:	70 e0       	ldi	r23, 0x00	; 0
    4442:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrue(0 == strcmp_P(buf, (const char PROGMEM *)F("{\"@\":\"1234\"}")));
  // Check that count works.
  ss1.enableCount(true);
  AssertIsEqual(18, ss1.writeJSON((uint8_t*)buf, sizeof(buf), randRNG8(), randRNG8NextBoolean()));
//serialPrintAndFlush(buf); serialPrintlnAndFlush();
  AssertIsTrue(0 == strcmp_P(buf, (const char PROGMEM *)F("{\"@\":\"1234\",\"+\":2}")));
    4446:	ce 01       	movw	r24, r28
    4448:	86 96       	adiw	r24, 0x26	; 38
    444a:	61 ed       	ldi	r22, 0xD1	; 209
    444c:	73 e0       	ldi	r23, 0x03	; 3
    444e:	0e 94 30 04 	call	0x860	; 0x860 <strcmp_P>
    4452:	89 2b       	or	r24, r25
    4454:	31 f0       	breq	.+12     	; 0x4462 <testJSONStatsHandling()+0x16a>
    4456:	80 e0       	ldi	r24, 0x00	; 0
    4458:	90 e0       	ldi	r25, 0x00	; 0
    445a:	6d e6       	ldi	r22, 0x6D	; 109
    445c:	70 e0       	ldi	r23, 0x00	; 0
    445e:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
    4462:	89 85       	ldd	r24, Y+9	; 0x09
    4464:	8e 7f       	andi	r24, 0xFE	; 254
    4466:	89 87       	std	Y+9, r24	; 0x09
  // Turn count off for rest of tests.
  ss1.enableCount(false);
  AssertIsEqual(12, ss1.writeJSON((uint8_t*)buf, sizeof(buf), randRNG8(), randRNG8NextBoolean()));
    4468:	0e 94 9e 19 	call	0x333c	; 0x333c <randRNG8()>
    446c:	18 2f       	mov	r17, r24
    446e:	0e 94 a2 20 	call	0x4144	; 0x4144 <randRNG8NextBoolean()>
    4472:	08 2f       	mov	r16, r24
    4474:	ce 01       	movw	r24, r28
    4476:	01 96       	adiw	r24, 0x01	; 1
    4478:	b6 01       	movw	r22, r12
    447a:	49 e3       	ldi	r20, 0x39	; 57
    447c:	21 2f       	mov	r18, r17
    447e:	ee 24       	eor	r14, r14
    4480:	e3 94       	inc	r14
    4482:	0e 94 ac 20 	call	0x4158	; 0x4158 <SimpleStatsRotation<(unsigned char)4>::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)>
    4486:	90 e0       	ldi	r25, 0x00	; 0
    sleepLowPowerMs(1000);
    }
  }

// Deal with common equality test.
static inline void errorIfNotEqual(int expected, int actual, int line) { if(expected != actual) { error(actual, line); } }
    4488:	8c 30       	cpi	r24, 0x0C	; 12
    448a:	91 05       	cpc	r25, r1
    448c:	21 f0       	breq	.+8      	; 0x4496 <testJSONStatsHandling()+0x19e>
    448e:	60 e7       	ldi	r22, 0x70	; 112
    4490:	70 e0       	ldi	r23, 0x00	; 0
    4492:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrue(0 == strcmp_P(buf, (const char PROGMEM *)F("{\"@\":\"1234\",\"+\":2}")));
  // Turn count off for rest of tests.
  ss1.enableCount(false);
  AssertIsEqual(12, ss1.writeJSON((uint8_t*)buf, sizeof(buf), randRNG8(), randRNG8NextBoolean()));
  // Check that removal of absent entry does nothing.
  AssertIsTrue(!ss1.remove("bogus"));
    4496:	ce 01       	movw	r24, r28
    4498:	01 96       	adiw	r24, 0x01	; 1
    449a:	62 e1       	ldi	r22, 0x12	; 18
    449c:	71 e0       	ldi	r23, 0x01	; 1
    449e:	0e 94 49 12 	call	0x2492	; 0x2492 <SimpleStatsRotationBase::remove(char const*)>
    44a2:	88 23       	and	r24, r24
    44a4:	31 f0       	breq	.+12     	; 0x44b2 <testJSONStatsHandling()+0x1ba>
    44a6:	80 e0       	ldi	r24, 0x00	; 0
    44a8:	90 e0       	ldi	r25, 0x00	; 0
    44aa:	62 e7       	ldi	r22, 0x72	; 114
    44ac:	70 e0       	ldi	r23, 0x00	; 0
    44ae:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  // Check that new item can be added/put (with no/default properties).
  ss1.put("f1", 42);
    44b2:	7e 01       	movw	r14, r28
    44b4:	08 94       	sec
    44b6:	e1 1c       	adc	r14, r1
    44b8:	f1 1c       	adc	r15, r1
    44ba:	c7 01       	movw	r24, r14
    44bc:	68 e1       	ldi	r22, 0x18	; 24
    44be:	71 e0       	ldi	r23, 0x01	; 1
    44c0:	4a e2       	ldi	r20, 0x2A	; 42
    44c2:	50 e0       	ldi	r21, 0x00	; 0
    44c4:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <SimpleStatsRotationBase::put(char const*, int)>
  AssertIsEqual(20, ss1.writeJSON((uint8_t*)buf, sizeof(buf), 0, randRNG8NextBoolean()));
    44c8:	0e 94 a2 20 	call	0x4144	; 0x4144 <randRNG8NextBoolean()>
    44cc:	08 2f       	mov	r16, r24
    44ce:	c7 01       	movw	r24, r14
    44d0:	b6 01       	movw	r22, r12
    44d2:	49 e3       	ldi	r20, 0x39	; 57
    44d4:	20 e0       	ldi	r18, 0x00	; 0
    44d6:	ee 24       	eor	r14, r14
    44d8:	e3 94       	inc	r14
    44da:	0e 94 ac 20 	call	0x4158	; 0x4158 <SimpleStatsRotation<(unsigned char)4>::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)>
    44de:	90 e0       	ldi	r25, 0x00	; 0
    sleepLowPowerMs(1000);
    }
  }

// Deal with common equality test.
static inline void errorIfNotEqual(int expected, int actual, int line) { if(expected != actual) { error(actual, line); } }
    44e0:	84 31       	cpi	r24, 0x14	; 20
    44e2:	91 05       	cpc	r25, r1
    44e4:	21 f0       	breq	.+8      	; 0x44ee <testJSONStatsHandling()+0x1f6>
    44e6:	65 e7       	ldi	r22, 0x75	; 117
    44e8:	70 e0       	ldi	r23, 0x00	; 0
    44ea:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  // Check that removal of absent entry does nothing.
  AssertIsTrue(!ss1.remove("bogus"));
  // Check that new item can be added/put (with no/default properties).
  ss1.put("f1", 42);
  AssertIsEqual(20, ss1.writeJSON((uint8_t*)buf, sizeof(buf), 0, randRNG8NextBoolean()));
  AssertIsTrue(0 == strcmp_P(buf, (const char PROGMEM *)F("{\"@\":\"1234\",\"f1\":42}")));
    44ee:	ce 01       	movw	r24, r28
    44f0:	86 96       	adiw	r24, 0x26	; 38
    44f2:	6c eb       	ldi	r22, 0xBC	; 188
    44f4:	73 e0       	ldi	r23, 0x03	; 3
    44f6:	0e 94 30 04 	call	0x860	; 0x860 <strcmp_P>
    44fa:	89 2b       	or	r24, r25
    44fc:	31 f0       	breq	.+12     	; 0x450a <testJSONStatsHandling()+0x212>
    44fe:	80 e0       	ldi	r24, 0x00	; 0
    4500:	90 e0       	ldi	r25, 0x00	; 0
    4502:	66 e7       	ldi	r22, 0x76	; 118
    4504:	70 e0       	ldi	r23, 0x00	; 0
    4506:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  ss1.put("f1", -111);
    450a:	7e 01       	movw	r14, r28
    450c:	08 94       	sec
    450e:	e1 1c       	adc	r14, r1
    4510:	f1 1c       	adc	r15, r1
    4512:	c7 01       	movw	r24, r14
    4514:	68 e1       	ldi	r22, 0x18	; 24
    4516:	71 e0       	ldi	r23, 0x01	; 1
    4518:	41 e9       	ldi	r20, 0x91	; 145
    451a:	5f ef       	ldi	r21, 0xFF	; 255
    451c:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <SimpleStatsRotationBase::put(char const*, int)>
  AssertIsEqual(22, ss1.writeJSON((uint8_t*)buf, sizeof(buf), 0, randRNG8NextBoolean()));
    4520:	0e 94 a2 20 	call	0x4144	; 0x4144 <randRNG8NextBoolean()>
    4524:	08 2f       	mov	r16, r24
    4526:	c7 01       	movw	r24, r14
    4528:	b6 01       	movw	r22, r12
    452a:	49 e3       	ldi	r20, 0x39	; 57
    452c:	20 e0       	ldi	r18, 0x00	; 0
    452e:	ee 24       	eor	r14, r14
    4530:	e3 94       	inc	r14
    4532:	0e 94 ac 20 	call	0x4158	; 0x4158 <SimpleStatsRotation<(unsigned char)4>::writeJSON(unsigned char*, unsigned char, unsigned char, bool, bool)>
    4536:	90 e0       	ldi	r25, 0x00	; 0
    sleepLowPowerMs(1000);
    }
  }

// Deal with common equality test.
static inline void errorIfNotEqual(int expected, int actual, int line) { if(expected != actual) { error(actual, line); } }
    4538:	86 31       	cpi	r24, 0x16	; 22
    453a:	91 05       	cpc	r25, r1
    453c:	21 f0       	breq	.+8      	; 0x4546 <testJSONStatsHandling()+0x24e>
    453e:	68 e7       	ldi	r22, 0x78	; 120
    4540:	70 e0       	ldi	r23, 0x00	; 0
    4542:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  ss1.put("f1", 42);
  AssertIsEqual(20, ss1.writeJSON((uint8_t*)buf, sizeof(buf), 0, randRNG8NextBoolean()));
  AssertIsTrue(0 == strcmp_P(buf, (const char PROGMEM *)F("{\"@\":\"1234\",\"f1\":42}")));
  ss1.put("f1", -111);
  AssertIsEqual(22, ss1.writeJSON((uint8_t*)buf, sizeof(buf), 0, randRNG8NextBoolean()));
  AssertIsTrue(0 == strcmp_P(buf, (const char PROGMEM *)F("{\"@\":\"1234\",\"f1\":-111}")));
    4546:	ce 01       	movw	r24, r28
    4548:	86 96       	adiw	r24, 0x26	; 38
    454a:	65 ea       	ldi	r22, 0xA5	; 165
    454c:	73 e0       	ldi	r23, 0x03	; 3
    454e:	0e 94 30 04 	call	0x860	; 0x860 <strcmp_P>
    4552:	89 2b       	or	r24, r25
    4554:	31 f0       	breq	.+12     	; 0x4562 <testJSONStatsHandling()+0x26a>
    4556:	80 e0       	ldi	r24, 0x00	; 0
    4558:	90 e0       	ldi	r25, 0x00	; 0
    455a:	69 e7       	ldi	r22, 0x79	; 121
    455c:	70 e0       	ldi	r23, 0x00	; 0
    455e:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
#endif
  }
    4562:	c2 5a       	subi	r28, 0xA2	; 162
    4564:	df 4f       	sbci	r29, 0xFF	; 255
    4566:	0f b6       	in	r0, 0x3f	; 63
    4568:	f8 94       	cli
    456a:	de bf       	out	0x3e, r29	; 62
    456c:	0f be       	out	0x3f, r0	; 63
    456e:	cd bf       	out	0x3d, r28	; 61
    4570:	cf 91       	pop	r28
    4572:	df 91       	pop	r29
    4574:	1f 91       	pop	r17
    4576:	0f 91       	pop	r16
    4578:	ff 90       	pop	r15
    457a:	ef 90       	pop	r14
    457c:	df 90       	pop	r13
    457e:	cf 90       	pop	r12
    4580:	08 95       	ret

00004582 <testJSONForTX()>:

// Test handling of JSON messages for transmission and reception.
// Includes bit-twiddling, CRC computation, and other error checking.
static void testJSONForTX()
    4582:	ff 92       	push	r15
    4584:	0f 93       	push	r16
    4586:	1f 93       	push	r17
    4588:	df 93       	push	r29
    458a:	cf 93       	push	r28
    458c:	cd b7       	in	r28, 0x3d	; 61
    458e:	de b7       	in	r29, 0x3e	; 62
    4590:	e9 97       	sbiw	r28, 0x39	; 57
    4592:	0f b6       	in	r0, 0x3f	; 63
    4594:	f8 94       	cli
    4596:	de bf       	out	0x3e, r29	; 62
    4598:	0f be       	out	0x3f, r0	; 63
    459a:	cd bf       	out	0x3d, r28	; 61
  {
#if defined(ALLOW_JSON_OUTPUT)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testJSONForTX");
    459c:	84 e7       	ldi	r24, 0x74	; 116
    459e:	94 e0       	ldi	r25, 0x04	; 4
    45a0:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <serialPrintlnAndFlush(__FlashStringHelper const*)>
  char buf[MSG_JSON_MAX_LENGTH + 2]; // Allow for trailing '\0' or CRC + 0xff terminator.
  // Clear the buffer.
  memset(buf, 0, sizeof(buf));
    45a4:	fe 01       	movw	r30, r28
    45a6:	31 96       	adiw	r30, 0x01	; 1
    45a8:	89 e3       	ldi	r24, 0x39	; 57
    45aa:	df 01       	movw	r26, r30
    45ac:	1d 92       	st	X+, r1
    45ae:	8a 95       	dec	r24
    45b0:	e9 f7       	brne	.-6      	; 0x45ac <testJSONForTX()+0x2a>
  // Fail sanity check on a completely empty buffer (zero-length string).
  AssertIsTrue(!quickValidateRawSimpleJSONMessage(buf));
    45b2:	cf 01       	movw	r24, r30
    45b4:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <quickValidateRawSimpleJSONMessage(char const*)>
    45b8:	88 23       	and	r24, r24
    45ba:	31 f0       	breq	.+12     	; 0x45c8 <testJSONForTX()+0x46>
    45bc:	80 e0       	ldi	r24, 0x00	; 0
    45be:	90 e0       	ldi	r25, 0x00	; 0
    45c0:	67 e8       	ldi	r22, 0x87	; 135
    45c2:	70 e0       	ldi	r23, 0x00	; 0
    45c4:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  // Fail sanity check on a few initially-plausible length-1 values.
  buf[0] = '{';
    45c8:	8b e7       	ldi	r24, 0x7B	; 123
    45ca:	89 83       	std	Y+1, r24	; 0x01
  AssertIsTrue(!quickValidateRawSimpleJSONMessage(buf));
    45cc:	ce 01       	movw	r24, r28
    45ce:	01 96       	adiw	r24, 0x01	; 1
    45d0:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <quickValidateRawSimpleJSONMessage(char const*)>
    45d4:	88 23       	and	r24, r24
    45d6:	31 f0       	breq	.+12     	; 0x45e4 <testJSONForTX()+0x62>
    45d8:	80 e0       	ldi	r24, 0x00	; 0
    45da:	90 e0       	ldi	r25, 0x00	; 0
    45dc:	6a e8       	ldi	r22, 0x8A	; 138
    45de:	70 e0       	ldi	r23, 0x00	; 0
    45e0:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  buf[0] = '}';
    45e4:	8d e7       	ldi	r24, 0x7D	; 125
    45e6:	89 83       	std	Y+1, r24	; 0x01
  AssertIsTrue(!quickValidateRawSimpleJSONMessage(buf));
    45e8:	ce 01       	movw	r24, r28
    45ea:	01 96       	adiw	r24, 0x01	; 1
    45ec:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <quickValidateRawSimpleJSONMessage(char const*)>
    45f0:	88 23       	and	r24, r24
    45f2:	31 f0       	breq	.+12     	; 0x4600 <testJSONForTX()+0x7e>
    45f4:	80 e0       	ldi	r24, 0x00	; 0
    45f6:	90 e0       	ldi	r25, 0x00	; 0
    45f8:	6c e8       	ldi	r22, 0x8C	; 140
    45fa:	70 e0       	ldi	r23, 0x00	; 0
    45fc:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  buf[0] = '[';
    4600:	8b e5       	ldi	r24, 0x5B	; 91
    4602:	89 83       	std	Y+1, r24	; 0x01
  AssertIsTrue(!quickValidateRawSimpleJSONMessage(buf));
    4604:	ce 01       	movw	r24, r28
    4606:	01 96       	adiw	r24, 0x01	; 1
    4608:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <quickValidateRawSimpleJSONMessage(char const*)>
    460c:	88 23       	and	r24, r24
    460e:	31 f0       	breq	.+12     	; 0x461c <testJSONForTX()+0x9a>
    4610:	80 e0       	ldi	r24, 0x00	; 0
    4612:	90 e0       	ldi	r25, 0x00	; 0
    4614:	6e e8       	ldi	r22, 0x8E	; 142
    4616:	70 e0       	ldi	r23, 0x00	; 0
    4618:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  buf[0] = ']';
    461c:	8d e5       	ldi	r24, 0x5D	; 93
    461e:	89 83       	std	Y+1, r24	; 0x01
  AssertIsTrue(!quickValidateRawSimpleJSONMessage(buf));
    4620:	ce 01       	movw	r24, r28
    4622:	01 96       	adiw	r24, 0x01	; 1
    4624:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <quickValidateRawSimpleJSONMessage(char const*)>
    4628:	88 23       	and	r24, r24
    462a:	31 f0       	breq	.+12     	; 0x4638 <testJSONForTX()+0xb6>
    462c:	80 e0       	ldi	r24, 0x00	; 0
    462e:	90 e0       	ldi	r25, 0x00	; 0
    4630:	60 e9       	ldi	r22, 0x90	; 144
    4632:	70 e0       	ldi	r23, 0x00	; 0
    4634:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  buf[0] = ' ';
    4638:	80 e2       	ldi	r24, 0x20	; 32
    463a:	89 83       	std	Y+1, r24	; 0x01
  AssertIsTrue(!quickValidateRawSimpleJSONMessage(buf));
    463c:	ce 01       	movw	r24, r28
    463e:	01 96       	adiw	r24, 0x01	; 1
    4640:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <quickValidateRawSimpleJSONMessage(char const*)>
    4644:	88 23       	and	r24, r24
    4646:	31 f0       	breq	.+12     	; 0x4654 <testJSONForTX()+0xd2>
    4648:	80 e0       	ldi	r24, 0x00	; 0
    464a:	90 e0       	ldi	r25, 0x00	; 0
    464c:	62 e9       	ldi	r22, 0x92	; 146
    464e:	70 e0       	ldi	r23, 0x00	; 0
    4650:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  // Fail sanity check with already-adjusted (minimal) nessage.
  buf[0] = '{';
    4654:	8b e7       	ldi	r24, 0x7B	; 123
    4656:	89 83       	std	Y+1, r24	; 0x01
  buf[1] = ('}' | 0x80);
    4658:	8d ef       	ldi	r24, 0xFD	; 253
    465a:	8a 83       	std	Y+2, r24	; 0x02
  AssertIsTrue(!quickValidateRawSimpleJSONMessage(buf));
    465c:	ce 01       	movw	r24, r28
    465e:	01 96       	adiw	r24, 0x01	; 1
    4660:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <quickValidateRawSimpleJSONMessage(char const*)>
    4664:	88 23       	and	r24, r24
    4666:	31 f0       	breq	.+12     	; 0x4674 <testJSONForTX()+0xf2>
    4668:	80 e0       	ldi	r24, 0x00	; 0
    466a:	90 e0       	ldi	r25, 0x00	; 0
    466c:	66 e9       	ldi	r22, 0x96	; 150
    466e:	70 e0       	ldi	r23, 0x00	; 0
    4670:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  // Minimal correct messaage should pass.
  buf[0] = '{';
    4674:	8b e7       	ldi	r24, 0x7B	; 123
    4676:	89 83       	std	Y+1, r24	; 0x01
  buf[1] = '}';
    4678:	8d e7       	ldi	r24, 0x7D	; 125
    467a:	8a 83       	std	Y+2, r24	; 0x02
  AssertIsTrue(quickValidateRawSimpleJSONMessage(buf));
    467c:	ce 01       	movw	r24, r28
    467e:	01 96       	adiw	r24, 0x01	; 1
    4680:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <quickValidateRawSimpleJSONMessage(char const*)>
    4684:	88 23       	and	r24, r24
    4686:	31 f4       	brne	.+12     	; 0x4694 <testJSONForTX()+0x112>
    4688:	80 e0       	ldi	r24, 0x00	; 0
    468a:	90 e0       	ldi	r25, 0x00	; 0
    468c:	6a e9       	ldi	r22, 0x9A	; 154
    468e:	70 e0       	ldi	r23, 0x00	; 0
    4690:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  // Try a longer valid trivial message.
  strcpy_P(buf, (const char PROGMEM *)F("{  }"));
    4694:	8e 01       	movw	r16, r28
    4696:	0f 5f       	subi	r16, 0xFF	; 255
    4698:	1f 4f       	sbci	r17, 0xFF	; 255
    469a:	c8 01       	movw	r24, r16
    469c:	6f e6       	ldi	r22, 0x6F	; 111
    469e:	74 e0       	ldi	r23, 0x04	; 4
    46a0:	0e 94 39 04 	call	0x872	; 0x872 <strcpy_P>
  AssertIsTrue(quickValidateRawSimpleJSONMessage(buf));
    46a4:	c8 01       	movw	r24, r16
    46a6:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <quickValidateRawSimpleJSONMessage(char const*)>
    46aa:	88 23       	and	r24, r24
    46ac:	31 f4       	brne	.+12     	; 0x46ba <testJSONForTX()+0x138>
    46ae:	80 e0       	ldi	r24, 0x00	; 0
    46b0:	90 e0       	ldi	r25, 0x00	; 0
    46b2:	6d e9       	ldi	r22, 0x9D	; 157
    46b4:	70 e0       	ldi	r23, 0x00	; 0
    46b6:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  // Invalidate it with a non-printable char and check that it is rejected.
  buf[2] = '\1';
    46ba:	81 e0       	ldi	r24, 0x01	; 1
    46bc:	8b 83       	std	Y+3, r24	; 0x03
  AssertIsTrue(!quickValidateRawSimpleJSONMessage(buf));
    46be:	ce 01       	movw	r24, r28
    46c0:	01 96       	adiw	r24, 0x01	; 1
    46c2:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <quickValidateRawSimpleJSONMessage(char const*)>
    46c6:	88 23       	and	r24, r24
    46c8:	31 f0       	breq	.+12     	; 0x46d6 <testJSONForTX()+0x154>
    46ca:	80 e0       	ldi	r24, 0x00	; 0
    46cc:	90 e0       	ldi	r25, 0x00	; 0
    46ce:	60 ea       	ldi	r22, 0xA0	; 160
    46d0:	70 e0       	ldi	r23, 0x00	; 0
    46d2:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  // Try a longer valid non-trivial message.
  __FlashStringHelper const* longJSONMsg1 = F("{\"@\":\"cdfb\",\"T|C16\":299,\"H|%\":83,\"L\":255,\"B|cV\":256}");
  memset(buf, 0, sizeof(buf));
    46d6:	8e 01       	movw	r16, r28
    46d8:	0f 5f       	subi	r16, 0xFF	; 255
    46da:	1f 4f       	sbci	r17, 0xFF	; 255
    46dc:	89 e3       	ldi	r24, 0x39	; 57
    46de:	f8 01       	movw	r30, r16
    46e0:	11 92       	st	Z+, r1
    46e2:	8a 95       	dec	r24
    46e4:	e9 f7       	brne	.-6      	; 0x46e0 <testJSONForTX()+0x15e>
  AssertIsTrue(quickValidateRawSimpleJSONMessage(buf));
  // Invalidate it with a non-printable char and check that it is rejected.
  buf[2] = '\1';
  AssertIsTrue(!quickValidateRawSimpleJSONMessage(buf));
  // Try a longer valid non-trivial message.
  __FlashStringHelper const* longJSONMsg1 = F("{\"@\":\"cdfb\",\"T|C16\":299,\"H|%\":83,\"L\":255,\"B|cV\":256}");
    46e6:	c8 01       	movw	r24, r16
    46e8:	6a e3       	ldi	r22, 0x3A	; 58
    46ea:	74 e0       	ldi	r23, 0x04	; 4
    46ec:	0e 94 39 04 	call	0x872	; 0x872 <strcpy_P>
  memset(buf, 0, sizeof(buf));
  strcpy_P(buf, (const char PROGMEM *)longJSONMsg1);
  AssertIsTrue(quickValidateRawSimpleJSONMessage(buf));
    46f0:	c8 01       	movw	r24, r16
    46f2:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <quickValidateRawSimpleJSONMessage(char const*)>
    46f6:	88 23       	and	r24, r24
    46f8:	31 f4       	brne	.+12     	; 0x4706 <testJSONForTX()+0x184>
    46fa:	80 e0       	ldi	r24, 0x00	; 0
    46fc:	90 e0       	ldi	r25, 0x00	; 0
    46fe:	65 ea       	ldi	r22, 0xA5	; 165
    4700:	70 e0       	ldi	r23, 0x00	; 0
    4702:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  // Invalidate it with a high-bit set and check that it is rejected.
  buf[5] |= 0x80;
    4706:	8e 81       	ldd	r24, Y+6	; 0x06
    4708:	80 68       	ori	r24, 0x80	; 128
    470a:	8e 83       	std	Y+6, r24	; 0x06
  AssertIsTrue(!quickValidateRawSimpleJSONMessage(buf));
    470c:	ce 01       	movw	r24, r28
    470e:	01 96       	adiw	r24, 0x01	; 1
    4710:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <quickValidateRawSimpleJSONMessage(char const*)>
    4714:	88 23       	and	r24, r24
    4716:	31 f0       	breq	.+12     	; 0x4724 <testJSONForTX()+0x1a2>
    4718:	80 e0       	ldi	r24, 0x00	; 0
    471a:	90 e0       	ldi	r25, 0x00	; 0
    471c:	68 ea       	ldi	r22, 0xA8	; 168
    471e:	70 e0       	ldi	r23, 0x00	; 0
    4720:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  // CRC fun!  
  memset(buf, 0, sizeof(buf));
    4724:	fe 01       	movw	r30, r28
    4726:	31 96       	adiw	r30, 0x01	; 1
    4728:	89 e3       	ldi	r24, 0x39	; 57
    472a:	df 01       	movw	r26, r30
    472c:	1d 92       	st	X+, r1
    472e:	8a 95       	dec	r24
    4730:	e9 f7       	brne	.-6      	; 0x472c <testJSONForTX()+0x1aa>
  buf[0] = '{';
    4732:	8b e7       	ldi	r24, 0x7B	; 123
    4734:	89 83       	std	Y+1, r24	; 0x01
  buf[1] = '}';
    4736:	8d e7       	ldi	r24, 0x7D	; 125
    4738:	8a 83       	std	Y+2, r24	; 0x02
  const uint8_t crc1 = adjustJSONMsgForTXAndComputeCRC(buf);
    473a:	cf 01       	movw	r24, r30
    473c:	0e 94 56 0f 	call	0x1eac	; 0x1eac <adjustJSONMsgForTXAndComputeCRC(char*)>
    4740:	08 2f       	mov	r16, r24
  // Check that top bit is not set (ie CRC was computed OK).
  AssertIsTrueWithErr(!(crc1 & 0x80), crc1);
    4742:	87 ff       	sbrs	r24, 7
    4744:	05 c0       	rjmp	.+10     	; 0x4750 <testJSONForTX()+0x1ce>
    4746:	90 e0       	ldi	r25, 0x00	; 0
    4748:	6f ea       	ldi	r22, 0xAF	; 175
    474a:	70 e0       	ldi	r23, 0x00	; 0
    474c:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  // Check for expected CRC value.
  AssertIsTrueWithErr((0x38 == crc1), crc1);
    4750:	08 33       	cpi	r16, 0x38	; 56
    4752:	31 f0       	breq	.+12     	; 0x4760 <testJSONForTX()+0x1de>
    4754:	80 2f       	mov	r24, r16
    4756:	90 e0       	ldi	r25, 0x00	; 0
    4758:	61 eb       	ldi	r22, 0xB1	; 177
    475a:	70 e0       	ldi	r23, 0x00	; 0
    475c:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  // Check that initial part unaltered.
  AssertIsTrueWithErr(('{' == buf[0]), buf[0]);
    4760:	89 81       	ldd	r24, Y+1	; 0x01
    4762:	8b 37       	cpi	r24, 0x7B	; 123
    4764:	39 f0       	breq	.+14     	; 0x4774 <testJSONForTX()+0x1f2>
    4766:	99 27       	eor	r25, r25
    4768:	87 fd       	sbrc	r24, 7
    476a:	90 95       	com	r25
    476c:	63 eb       	ldi	r22, 0xB3	; 179
    476e:	70 e0       	ldi	r23, 0x00	; 0
    4770:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  // Check that top bit has been set in trailing brace.
  AssertIsTrueWithErr(((char)('}' | 0x80) == buf[1]), buf[1]);
    4774:	8a 81       	ldd	r24, Y+2	; 0x02
    4776:	8d 3f       	cpi	r24, 0xFD	; 253
    4778:	39 f0       	breq	.+14     	; 0x4788 <testJSONForTX()+0x206>
    477a:	99 27       	eor	r25, r25
    477c:	87 fd       	sbrc	r24, 7
    477e:	90 95       	com	r25
    4780:	65 eb       	ldi	r22, 0xB5	; 181
    4782:	70 e0       	ldi	r23, 0x00	; 0
    4784:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  // Check that trailing '\0' still present.
  AssertIsTrueWithErr((0 == buf[2]), buf[2]);
    4788:	8b 81       	ldd	r24, Y+3	; 0x03
    478a:	88 23       	and	r24, r24
    478c:	39 f0       	breq	.+14     	; 0x479c <testJSONForTX()+0x21a>
    478e:	99 27       	eor	r25, r25
    4790:	87 fd       	sbrc	r24, 7
    4792:	90 95       	com	r25
    4794:	67 eb       	ldi	r22, 0xB7	; 183
    4796:	70 e0       	ldi	r23, 0x00	; 0
    4798:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  // Check that TX-format can be converted for RX.
  buf[2] = crc1;
    479c:	0b 83       	std	Y+3, r16	; 0x03
  buf[3] = 0xff; // As for normal TX...
    479e:	8f ef       	ldi	r24, 0xFF	; 255
    47a0:	8c 83       	std	Y+4, r24	; 0x04
  const int8_t l1 = adjustJSONMsgForRXAndCheckCRC(buf, sizeof(buf));
    47a2:	ce 01       	movw	r24, r28
    47a4:	01 96       	adiw	r24, 0x01	; 1
    47a6:	69 e3       	ldi	r22, 0x39	; 57
    47a8:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)>
  AssertIsTrueWithErr(2 == l1, l1);
    47ac:	82 30       	cpi	r24, 0x02	; 2
    47ae:	39 f0       	breq	.+14     	; 0x47be <testJSONForTX()+0x23c>
    47b0:	99 27       	eor	r25, r25
    47b2:	87 fd       	sbrc	r24, 7
    47b4:	90 95       	com	r25
    47b6:	6c eb       	ldi	r22, 0xBC	; 188
    47b8:	70 e0       	ldi	r23, 0x00	; 0
    47ba:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(2 == strlen(buf), strlen(buf));
    47be:	fe 01       	movw	r30, r28
    47c0:	31 96       	adiw	r30, 0x01	; 1
    47c2:	df 01       	movw	r26, r30
    47c4:	0d 90       	ld	r0, X+
    47c6:	00 20       	and	r0, r0
    47c8:	e9 f7       	brne	.-6      	; 0x47c4 <testJSONForTX()+0x242>
    47ca:	11 97       	sbiw	r26, 0x01	; 1
    47cc:	ae 1b       	sub	r26, r30
    47ce:	bf 0b       	sbc	r27, r31
    47d0:	a2 30       	cpi	r26, 0x02	; 2
    47d2:	b1 05       	cpc	r27, r1
    47d4:	29 f0       	breq	.+10     	; 0x47e0 <testJSONForTX()+0x25e>
    47d6:	cd 01       	movw	r24, r26
    47d8:	6d eb       	ldi	r22, 0xBD	; 189
    47da:	70 e0       	ldi	r23, 0x00	; 0
    47dc:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrue(quickValidateRawSimpleJSONMessage(buf));
    47e0:	ce 01       	movw	r24, r28
    47e2:	01 96       	adiw	r24, 0x01	; 1
    47e4:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <quickValidateRawSimpleJSONMessage(char const*)>
    47e8:	88 23       	and	r24, r24
    47ea:	31 f4       	brne	.+12     	; 0x47f8 <testJSONForTX()+0x276>
    47ec:	80 e0       	ldi	r24, 0x00	; 0
    47ee:	90 e0       	ldi	r25, 0x00	; 0
    47f0:	6e eb       	ldi	r22, 0xBE	; 190
    47f2:	70 e0       	ldi	r23, 0x00	; 0
    47f4:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  // Now a longer message...
  memset(buf, 0, sizeof(buf));
    47f8:	8e 01       	movw	r16, r28
    47fa:	0f 5f       	subi	r16, 0xFF	; 255
    47fc:	1f 4f       	sbci	r17, 0xFF	; 255
    47fe:	89 e3       	ldi	r24, 0x39	; 57
    4800:	f8 01       	movw	r30, r16
    4802:	11 92       	st	Z+, r1
    4804:	8a 95       	dec	r24
    4806:	e9 f7       	brne	.-6      	; 0x4802 <testJSONForTX()+0x280>
  AssertIsTrue(quickValidateRawSimpleJSONMessage(buf));
  // Invalidate it with a non-printable char and check that it is rejected.
  buf[2] = '\1';
  AssertIsTrue(!quickValidateRawSimpleJSONMessage(buf));
  // Try a longer valid non-trivial message.
  __FlashStringHelper const* longJSONMsg1 = F("{\"@\":\"cdfb\",\"T|C16\":299,\"H|%\":83,\"L\":255,\"B|cV\":256}");
    4808:	c8 01       	movw	r24, r16
    480a:	6a e3       	ldi	r22, 0x3A	; 58
    480c:	74 e0       	ldi	r23, 0x04	; 4
    480e:	0e 94 39 04 	call	0x872	; 0x872 <strcpy_P>
  AssertIsTrueWithErr(2 == strlen(buf), strlen(buf));
  AssertIsTrue(quickValidateRawSimpleJSONMessage(buf));
  // Now a longer message...
  memset(buf, 0, sizeof(buf));
  strcpy_P(buf, (const char PROGMEM *)longJSONMsg1);
  const int8_t l2o = strlen(buf);
    4812:	f8 01       	movw	r30, r16
    4814:	01 90       	ld	r0, Z+
    4816:	00 20       	and	r0, r0
    4818:	e9 f7       	brne	.-6      	; 0x4814 <testJSONForTX()+0x292>
    481a:	31 97       	sbiw	r30, 0x01	; 1
    481c:	fe 2e       	mov	r15, r30
    481e:	f0 1a       	sub	r15, r16
  const uint8_t crc2 = adjustJSONMsgForTXAndComputeCRC(buf);
    4820:	c8 01       	movw	r24, r16
    4822:	0e 94 56 0f 	call	0x1eac	; 0x1eac <adjustJSONMsgForTXAndComputeCRC(char*)>
    4826:	08 2f       	mov	r16, r24
  // Check that top bit is not set (ie CRC was computed OK).
  AssertIsTrueWithErr(!(crc2 & 0x80), crc2);
    4828:	87 ff       	sbrs	r24, 7
    482a:	05 c0       	rjmp	.+10     	; 0x4836 <testJSONForTX()+0x2b4>
    482c:	90 e0       	ldi	r25, 0x00	; 0
    482e:	65 ec       	ldi	r22, 0xC5	; 197
    4830:	70 e0       	ldi	r23, 0x00	; 0
    4832:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  // Check for expected CRC value.
  AssertIsTrueWithErr((0x77 == crc2), crc2);
    4836:	07 37       	cpi	r16, 0x77	; 119
    4838:	31 f0       	breq	.+12     	; 0x4846 <testJSONForTX()+0x2c4>
    483a:	80 2f       	mov	r24, r16
    483c:	90 e0       	ldi	r25, 0x00	; 0
    483e:	67 ec       	ldi	r22, 0xC7	; 199
    4840:	70 e0       	ldi	r23, 0x00	; 0
    4842:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  // Check that TX-format can be converted for RX.
  buf[l2o] = crc2;
    4846:	af 2d       	mov	r26, r15
    4848:	bb 27       	eor	r27, r27
    484a:	a7 fd       	sbrc	r26, 7
    484c:	b0 95       	com	r27
    484e:	ce 01       	movw	r24, r28
    4850:	01 96       	adiw	r24, 0x01	; 1
    4852:	fc 01       	movw	r30, r24
    4854:	ea 0f       	add	r30, r26
    4856:	fb 1f       	adc	r31, r27
    4858:	00 83       	st	Z, r16
  buf[l2o+1] = 0xff;
    485a:	ac 0f       	add	r26, r28
    485c:	bd 1f       	adc	r27, r29
    485e:	2f ef       	ldi	r18, 0xFF	; 255
    4860:	12 96       	adiw	r26, 0x02	; 2
    4862:	2c 93       	st	X, r18
  const int8_t l2 = adjustJSONMsgForRXAndCheckCRC(buf, sizeof(buf));
    4864:	69 e3       	ldi	r22, 0x39	; 57
    4866:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <adjustJSONMsgForRXAndCheckCRC(char*, unsigned char)>
  AssertIsTrueWithErr(l2o == l2, l2);
    486a:	f8 16       	cp	r15, r24
    486c:	39 f0       	breq	.+14     	; 0x487c <testJSONForTX()+0x2fa>
    486e:	99 27       	eor	r25, r25
    4870:	87 fd       	sbrc	r24, 7
    4872:	90 95       	com	r25
    4874:	6c ec       	ldi	r22, 0xCC	; 204
    4876:	70 e0       	ldi	r23, 0x00	; 0
    4878:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrue(quickValidateRawSimpleJSONMessage(buf));
    487c:	ce 01       	movw	r24, r28
    487e:	01 96       	adiw	r24, 0x01	; 1
    4880:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <quickValidateRawSimpleJSONMessage(char const*)>
    4884:	88 23       	and	r24, r24
    4886:	31 f4       	brne	.+12     	; 0x4894 <testJSONForTX()+0x312>
    4888:	80 e0       	ldi	r24, 0x00	; 0
    488a:	90 e0       	ldi	r25, 0x00	; 0
    488c:	6d ec       	ldi	r22, 0xCD	; 205
    488e:	70 e0       	ldi	r23, 0x00	; 0
    4890:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
#endif
  }
    4894:	e9 96       	adiw	r28, 0x39	; 57
    4896:	0f b6       	in	r0, 0x3f	; 63
    4898:	f8 94       	cli
    489a:	de bf       	out	0x3e, r29	; 62
    489c:	0f be       	out	0x3f, r0	; 63
    489e:	cd bf       	out	0x3d, r28	; 61
    48a0:	cf 91       	pop	r28
    48a2:	df 91       	pop	r29
    48a4:	1f 91       	pop	r17
    48a6:	0f 91       	pop	r16
    48a8:	ff 90       	pop	r15
    48aa:	08 95       	ret

000048ac <testFullStatsMessageCoreEncDec()>:

// Test elements of encoding and decoding FullStatsMessageCore_t.
// These are the routines primarily under test:
//     uint8_t *encodeFullStatsMessageCore(uint8_t *buf, uint8_t buflen, stats_TX_level secLevel, bool secureChannel, const FullStatsMessageCore_t *content)
//     const uint8_t *decodeFullStatsMessageCore(const uint8_t *buf, uint8_t buflen, stats_TX_level secLevel, bool secureChannel, FullStatsMessageCore_t *content)
static void testFullStatsMessageCoreEncDec()
    48ac:	bf 92       	push	r11
    48ae:	cf 92       	push	r12
    48b0:	df 92       	push	r13
    48b2:	ef 92       	push	r14
    48b4:	ff 92       	push	r15
    48b6:	0f 93       	push	r16
    48b8:	1f 93       	push	r17
    48ba:	df 93       	push	r29
    48bc:	cf 93       	push	r28
    48be:	cd b7       	in	r28, 0x3d	; 61
    48c0:	de b7       	in	r29, 0x3e	; 62
    48c2:	60 97       	sbiw	r28, 0x10	; 16
    48c4:	0f b6       	in	r0, 0x3f	; 63
    48c6:	f8 94       	cli
    48c8:	de bf       	out	0x3e, r29	; 62
    48ca:	0f be       	out	0x3f, r0	; 63
    48cc:	cd bf       	out	0x3d, r28	; 61
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testFullStatsMessageCoreEncDec");
    48ce:	82 e8       	ldi	r24, 0x82	; 130
    48d0:	94 e0       	ldi	r25, 0x04	; 4
    48d2:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <serialPrintlnAndFlush(__FlashStringHelper const*)>

  // Ensure that with null buffer/content encode and decode fail regardless of other arguments.
  uint8_t buf[FullStatsMessageCore_MAX_BYTES_ON_WIRE + 1];
  FullStatsMessageCore_t content;
  AssertIsTrue(NULL == encodeFullStatsMessageCore(NULL, randRNG8(), stTXalwaysAll, randRNG8NextBoolean(), NULL));
    48d6:	0e 94 9e 19 	call	0x333c	; 0x333c <randRNG8()>
    48da:	18 2f       	mov	r17, r24
    48dc:	0e 94 a2 20 	call	0x4144	; 0x4144 <randRNG8NextBoolean()>
    48e0:	28 2f       	mov	r18, r24
    48e2:	80 e0       	ldi	r24, 0x00	; 0
    48e4:	90 e0       	ldi	r25, 0x00	; 0
    48e6:	61 2f       	mov	r22, r17
    48e8:	40 e0       	ldi	r20, 0x00	; 0
    48ea:	50 e0       	ldi	r21, 0x00	; 0
    48ec:	00 e0       	ldi	r16, 0x00	; 0
    48ee:	10 e0       	ldi	r17, 0x00	; 0
    48f0:	0e 94 21 14 	call	0x2842	; 0x2842 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)>
    48f4:	89 2b       	or	r24, r25
    48f6:	31 f0       	breq	.+12     	; 0x4904 <testFullStatsMessageCoreEncDec()+0x58>
    48f8:	80 e0       	ldi	r24, 0x00	; 0
    48fa:	90 e0       	ldi	r25, 0x00	; 0
    48fc:	65 e0       	ldi	r22, 0x05	; 5
    48fe:	72 e0       	ldi	r23, 0x02	; 2
    4900:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrue(NULL == decodeFullStatsMessageCore(NULL, randRNG8(), stTXalwaysAll, randRNG8NextBoolean(), NULL));
    4904:	0e 94 9e 19 	call	0x333c	; 0x333c <randRNG8()>
    4908:	18 2f       	mov	r17, r24
    490a:	0e 94 a2 20 	call	0x4144	; 0x4144 <randRNG8NextBoolean()>
    490e:	28 2f       	mov	r18, r24
    4910:	80 e0       	ldi	r24, 0x00	; 0
    4912:	90 e0       	ldi	r25, 0x00	; 0
    4914:	61 2f       	mov	r22, r17
    4916:	40 e0       	ldi	r20, 0x00	; 0
    4918:	50 e0       	ldi	r21, 0x00	; 0
    491a:	00 e0       	ldi	r16, 0x00	; 0
    491c:	10 e0       	ldi	r17, 0x00	; 0
    491e:	0e 94 46 13 	call	0x268c	; 0x268c <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)>
    4922:	89 2b       	or	r24, r25
    4924:	31 f0       	breq	.+12     	; 0x4932 <testFullStatsMessageCoreEncDec()+0x86>
    4926:	80 e0       	ldi	r24, 0x00	; 0
    4928:	90 e0       	ldi	r25, 0x00	; 0
    492a:	66 e0       	ldi	r22, 0x06	; 6
    492c:	72 e0       	ldi	r23, 0x02	; 2
    492e:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrue(NULL == encodeFullStatsMessageCore(NULL, FullStatsMessageCore_MAX_BYTES_ON_WIRE+1, stTXalwaysAll, randRNG8NextBoolean(), &content));
    4932:	0e 94 a2 20 	call	0x4144	; 0x4144 <randRNG8NextBoolean()>
    4936:	28 2f       	mov	r18, r24
    4938:	80 e0       	ldi	r24, 0x00	; 0
    493a:	90 e0       	ldi	r25, 0x00	; 0
    493c:	69 e0       	ldi	r22, 0x09	; 9
    493e:	40 e0       	ldi	r20, 0x00	; 0
    4940:	50 e0       	ldi	r21, 0x00	; 0
    4942:	8e 01       	movw	r16, r28
    4944:	0f 5f       	subi	r16, 0xFF	; 255
    4946:	1f 4f       	sbci	r17, 0xFF	; 255
    4948:	0e 94 21 14 	call	0x2842	; 0x2842 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)>
    494c:	89 2b       	or	r24, r25
    494e:	31 f0       	breq	.+12     	; 0x495c <testFullStatsMessageCoreEncDec()+0xb0>
    4950:	80 e0       	ldi	r24, 0x00	; 0
    4952:	90 e0       	ldi	r25, 0x00	; 0
    4954:	67 e0       	ldi	r22, 0x07	; 7
    4956:	72 e0       	ldi	r23, 0x02	; 2
    4958:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrue(NULL == encodeFullStatsMessageCore(buf, FullStatsMessageCore_MAX_BYTES_ON_WIRE+1, stTXalwaysAll, randRNG8NextBoolean(), NULL));
    495c:	0e 94 a2 20 	call	0x4144	; 0x4144 <randRNG8NextBoolean()>
    4960:	28 2f       	mov	r18, r24
    4962:	ce 01       	movw	r24, r28
    4964:	08 96       	adiw	r24, 0x08	; 8
    4966:	69 e0       	ldi	r22, 0x09	; 9
    4968:	40 e0       	ldi	r20, 0x00	; 0
    496a:	50 e0       	ldi	r21, 0x00	; 0
    496c:	00 e0       	ldi	r16, 0x00	; 0
    496e:	10 e0       	ldi	r17, 0x00	; 0
    4970:	0e 94 21 14 	call	0x2842	; 0x2842 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)>
    4974:	89 2b       	or	r24, r25
    4976:	31 f0       	breq	.+12     	; 0x4984 <testFullStatsMessageCoreEncDec()+0xd8>
    4978:	80 e0       	ldi	r24, 0x00	; 0
    497a:	90 e0       	ldi	r25, 0x00	; 0
    497c:	68 e0       	ldi	r22, 0x08	; 8
    497e:	72 e0       	ldi	r23, 0x02	; 2
    4980:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrue(NULL == decodeFullStatsMessageCore(NULL, FullStatsMessageCore_MIN_BYTES_ON_WIRE+1, stTXalwaysAll, randRNG8NextBoolean(), &content));
    4984:	0e 94 a2 20 	call	0x4144	; 0x4144 <randRNG8NextBoolean()>
    4988:	28 2f       	mov	r18, r24
    498a:	80 e0       	ldi	r24, 0x00	; 0
    498c:	90 e0       	ldi	r25, 0x00	; 0
    498e:	64 e0       	ldi	r22, 0x04	; 4
    4990:	40 e0       	ldi	r20, 0x00	; 0
    4992:	50 e0       	ldi	r21, 0x00	; 0
    4994:	8e 01       	movw	r16, r28
    4996:	0f 5f       	subi	r16, 0xFF	; 255
    4998:	1f 4f       	sbci	r17, 0xFF	; 255
    499a:	0e 94 46 13 	call	0x268c	; 0x268c <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)>
    499e:	89 2b       	or	r24, r25
    49a0:	31 f0       	breq	.+12     	; 0x49ae <testFullStatsMessageCoreEncDec()+0x102>
    49a2:	80 e0       	ldi	r24, 0x00	; 0
    49a4:	90 e0       	ldi	r25, 0x00	; 0
    49a6:	69 e0       	ldi	r22, 0x09	; 9
    49a8:	72 e0       	ldi	r23, 0x02	; 2
    49aa:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrue(NULL == decodeFullStatsMessageCore(buf, FullStatsMessageCore_MIN_BYTES_ON_WIRE+1, stTXalwaysAll, randRNG8NextBoolean(), NULL));
    49ae:	0e 94 a2 20 	call	0x4144	; 0x4144 <randRNG8NextBoolean()>
    49b2:	28 2f       	mov	r18, r24
    49b4:	ce 01       	movw	r24, r28
    49b6:	08 96       	adiw	r24, 0x08	; 8
    49b8:	64 e0       	ldi	r22, 0x04	; 4
    49ba:	40 e0       	ldi	r20, 0x00	; 0
    49bc:	50 e0       	ldi	r21, 0x00	; 0
    49be:	00 e0       	ldi	r16, 0x00	; 0
    49c0:	10 e0       	ldi	r17, 0x00	; 0
    49c2:	0e 94 46 13 	call	0x268c	; 0x268c <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)>
    49c6:	89 2b       	or	r24, r25
    49c8:	31 f0       	breq	.+12     	; 0x49d6 <testFullStatsMessageCoreEncDec()+0x12a>
    49ca:	80 e0       	ldi	r24, 0x00	; 0
    49cc:	90 e0       	ldi	r25, 0x00	; 0
    49ce:	6a e0       	ldi	r22, 0x0A	; 10
    49d0:	72 e0       	ldi	r23, 0x02	; 2
    49d2:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>

  // Prepare a minimal (empty) non-secure message.
  memset(buf, 0, sizeof(buf));
    49d6:	fe 01       	movw	r30, r28
    49d8:	38 96       	adiw	r30, 0x08	; 8
    49da:	89 e0       	ldi	r24, 0x09	; 9
    49dc:	df 01       	movw	r26, r30
    49de:	1d 92       	st	X+, r1
    49e0:	8a 95       	dec	r24
    49e2:	e9 f7       	brne	.-6      	; 0x49de <testFullStatsMessageCoreEncDec()+0x132>
#define FullStatsMessageCore_MAX_BYTES_ON_WIRE 8
// Minimum size on wire including trailing CRC of core of FullStatsMessage.  TX message buffer should be one larger for trailing 0xff.
#define FullStatsMessageCore_MIN_BYTES_ON_WIRE 3

// Clear a FullStatsMessageCore_t, also indicating no optional fields present.
static inline void clearFullStatsMessageCore(FullStatsMessageCore_t *const p) { memset(p, 0, sizeof(FullStatsMessageCore_t)); }
    49e4:	8e 01       	movw	r16, r28
    49e6:	0f 5f       	subi	r16, 0xFF	; 255
    49e8:	1f 4f       	sbci	r17, 0xFF	; 255
    49ea:	87 e0       	ldi	r24, 0x07	; 7
    49ec:	d8 01       	movw	r26, r16
    49ee:	1d 92       	st	X+, r1
    49f0:	8a 95       	dec	r24
    49f2:	e9 f7       	brne	.-6      	; 0x49ee <testFullStatsMessageCoreEncDec()+0x142>
  clearFullStatsMessageCore(&content);
  const uint8_t *emptyMsg = encodeFullStatsMessageCore(buf, sizeof(buf), stTXalwaysAll, false, &content);
    49f4:	cf 01       	movw	r24, r30
    49f6:	69 e0       	ldi	r22, 0x09	; 9
    49f8:	40 e0       	ldi	r20, 0x00	; 0
    49fa:	50 e0       	ldi	r21, 0x00	; 0
    49fc:	20 e0       	ldi	r18, 0x00	; 0
    49fe:	0e 94 21 14 	call	0x2842	; 0x2842 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)>
    4a02:	7c 01       	movw	r14, r24
  AssertIsTrue(NULL != emptyMsg); // Must succeed.
    4a04:	00 97       	sbiw	r24, 0x00	; 0
    4a06:	31 f4       	brne	.+12     	; 0x4a14 <testFullStatsMessageCoreEncDec()+0x168>
    4a08:	80 e0       	ldi	r24, 0x00	; 0
    4a0a:	90 e0       	ldi	r25, 0x00	; 0
    4a0c:	60 e1       	ldi	r22, 0x10	; 16
    4a0e:	72 e0       	ldi	r23, 0x02	; 2
    4a10:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(emptyMsg - buf == FullStatsMessageCore_MIN_BYTES_ON_WIRE, emptyMsg - buf); // Must correspond to minimum size.
    4a14:	58 e0       	ldi	r21, 0x08	; 8
    4a16:	c5 2e       	mov	r12, r21
    4a18:	d1 2c       	mov	r13, r1
    4a1a:	cc 0e       	add	r12, r28
    4a1c:	dd 1e       	adc	r13, r29
    4a1e:	c7 01       	movw	r24, r14
    4a20:	8c 19       	sub	r24, r12
    4a22:	9d 09       	sbc	r25, r13
    4a24:	83 30       	cpi	r24, 0x03	; 3
    4a26:	91 05       	cpc	r25, r1
    4a28:	21 f0       	breq	.+8      	; 0x4a32 <testFullStatsMessageCoreEncDec()+0x186>
    4a2a:	61 e1       	ldi	r22, 0x11	; 17
    4a2c:	72 e0       	ldi	r23, 0x02	; 2
    4a2e:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(MESSAGING_FULL_STATS_HEADER_MSBS == buf[0], buf[0]); // Header byte.
    4a32:	88 85       	ldd	r24, Y+8	; 0x08
    4a34:	80 37       	cpi	r24, 0x70	; 112
    4a36:	29 f0       	breq	.+10     	; 0x4a42 <testFullStatsMessageCoreEncDec()+0x196>
    4a38:	90 e0       	ldi	r25, 0x00	; 0
    4a3a:	62 e1       	ldi	r22, 0x12	; 18
    4a3c:	72 e0       	ldi	r23, 0x02	; 2
    4a3e:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(MESSAGING_FULL_STATS_FLAGS_HEADER_MSBS == buf[1], buf[1]); // Flags header byte.
    4a42:	89 85       	ldd	r24, Y+9	; 0x09
    4a44:	80 36       	cpi	r24, 0x60	; 96
    4a46:	29 f0       	breq	.+10     	; 0x4a52 <testFullStatsMessageCoreEncDec()+0x1a6>
    4a48:	90 e0       	ldi	r25, 0x00	; 0
    4a4a:	63 e1       	ldi	r22, 0x13	; 19
    4a4c:	72 e0       	ldi	r23, 0x02	; 2
    4a4e:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(0x65 == buf[2], buf[2]); // CRC.
    4a52:	8a 85       	ldd	r24, Y+10	; 0x0a
    4a54:	85 36       	cpi	r24, 0x65	; 101
    4a56:	29 f0       	breq	.+10     	; 0x4a62 <testFullStatsMessageCoreEncDec()+0x1b6>
    4a58:	90 e0       	ldi	r25, 0x00	; 0
    4a5a:	64 e1       	ldi	r22, 0x14	; 20
    4a5c:	72 e0       	ldi	r23, 0x02	; 2
    4a5e:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrue(((uint8_t)0xff) == *emptyMsg); // Must be correctly terminated.
    4a62:	f7 01       	movw	r30, r14
    4a64:	80 81       	ld	r24, Z
    4a66:	8f 3f       	cpi	r24, 0xFF	; 255
    4a68:	31 f0       	breq	.+12     	; 0x4a76 <testFullStatsMessageCoreEncDec()+0x1ca>
    4a6a:	80 e0       	ldi	r24, 0x00	; 0
    4a6c:	90 e0       	ldi	r25, 0x00	; 0
    4a6e:	65 e1       	ldi	r22, 0x15	; 21
    4a70:	72 e0       	ldi	r23, 0x02	; 2
    4a72:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
    4a76:	fe 01       	movw	r30, r28
    4a78:	31 96       	adiw	r30, 0x01	; 1
    4a7a:	87 e0       	ldi	r24, 0x07	; 7
    4a7c:	df 01       	movw	r26, r30
    4a7e:	1d 92       	st	X+, r1
    4a80:	8a 95       	dec	r24
    4a82:	e9 f7       	brne	.-6      	; 0x4a7e <testFullStatsMessageCoreEncDec()+0x1d2>
  // Decode the message just generated into a freshly-scrubbed content structure.
  clearFullStatsMessageCore(&content);
  const uint8_t *emptyMsgDE = decodeFullStatsMessageCore(buf, emptyMsg-buf, stTXalwaysAll, false, &content);
    4a84:	bc 2c       	mov	r11, r12
    4a86:	6e 2d       	mov	r22, r14
    4a88:	6c 19       	sub	r22, r12
    4a8a:	ce 01       	movw	r24, r28
    4a8c:	08 96       	adiw	r24, 0x08	; 8
    4a8e:	40 e0       	ldi	r20, 0x00	; 0
    4a90:	50 e0       	ldi	r21, 0x00	; 0
    4a92:	20 e0       	ldi	r18, 0x00	; 0
    4a94:	8f 01       	movw	r16, r30
    4a96:	0e 94 46 13 	call	0x268c	; 0x268c <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)>
    4a9a:	8c 01       	movw	r16, r24
  AssertIsTrue(NULL != emptyMsgDE); // Must succeed.
    4a9c:	00 97       	sbiw	r24, 0x00	; 0
    4a9e:	31 f4       	brne	.+12     	; 0x4aac <testFullStatsMessageCoreEncDec()+0x200>
    4aa0:	80 e0       	ldi	r24, 0x00	; 0
    4aa2:	90 e0       	ldi	r25, 0x00	; 0
    4aa4:	69 e1       	ldi	r22, 0x19	; 25
    4aa6:	72 e0       	ldi	r23, 0x02	; 2
    4aa8:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrue(emptyMsg == emptyMsgDE); // Must return correct end of message.
    4aac:	e0 16       	cp	r14, r16
    4aae:	f1 06       	cpc	r15, r17
    4ab0:	31 f0       	breq	.+12     	; 0x4abe <testFullStatsMessageCoreEncDec()+0x212>
    4ab2:	80 e0       	ldi	r24, 0x00	; 0
    4ab4:	90 e0       	ldi	r25, 0x00	; 0
    4ab6:	6a e1       	ldi	r22, 0x1A	; 26
    4ab8:	72 e0       	ldi	r23, 0x02	; 2
    4aba:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  // Verify that there is no content.
  AssertIsTrue(!content.containsID);
    4abe:	89 81       	ldd	r24, Y+1	; 0x01
    4ac0:	80 ff       	sbrs	r24, 0
    4ac2:	06 c0       	rjmp	.+12     	; 0x4ad0 <testFullStatsMessageCoreEncDec()+0x224>
    4ac4:	80 e0       	ldi	r24, 0x00	; 0
    4ac6:	90 e0       	ldi	r25, 0x00	; 0
    4ac8:	6c e1       	ldi	r22, 0x1C	; 28
    4aca:	72 e0       	ldi	r23, 0x02	; 2
    4acc:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrue(!content.containsTempAndPower);
    4ad0:	89 81       	ldd	r24, Y+1	; 0x01
    4ad2:	81 ff       	sbrs	r24, 1
    4ad4:	06 c0       	rjmp	.+12     	; 0x4ae2 <testFullStatsMessageCoreEncDec()+0x236>
    4ad6:	80 e0       	ldi	r24, 0x00	; 0
    4ad8:	90 e0       	ldi	r25, 0x00	; 0
    4ada:	6d e1       	ldi	r22, 0x1D	; 29
    4adc:	72 e0       	ldi	r23, 0x02	; 2
    4ade:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrue(!content.containsAmbL);
    4ae2:	89 81       	ldd	r24, Y+1	; 0x01
    4ae4:	82 ff       	sbrs	r24, 2
    4ae6:	06 c0       	rjmp	.+12     	; 0x4af4 <testFullStatsMessageCoreEncDec()+0x248>
    4ae8:	80 e0       	ldi	r24, 0x00	; 0
    4aea:	90 e0       	ldi	r25, 0x00	; 0
    4aec:	6e e1       	ldi	r22, 0x1E	; 30
    4aee:	72 e0       	ldi	r23, 0x02	; 2
    4af0:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>

  // Prepare a non-secure message with ID.
  memset(buf, 0, sizeof(buf));
    4af4:	fe 01       	movw	r30, r28
    4af6:	38 96       	adiw	r30, 0x08	; 8
    4af8:	89 e0       	ldi	r24, 0x09	; 9
    4afa:	df 01       	movw	r26, r30
    4afc:	1d 92       	st	X+, r1
    4afe:	8a 95       	dec	r24
    4b00:	e9 f7       	brne	.-6      	; 0x4afc <testFullStatsMessageCoreEncDec()+0x250>
    4b02:	8e 01       	movw	r16, r28
    4b04:	0f 5f       	subi	r16, 0xFF	; 255
    4b06:	1f 4f       	sbci	r17, 0xFF	; 255
    4b08:	87 e0       	ldi	r24, 0x07	; 7
    4b0a:	d8 01       	movw	r26, r16
    4b0c:	1d 92       	st	X+, r1
    4b0e:	8a 95       	dec	r24
    4b10:	e9 f7       	brne	.-6      	; 0x4b0c <testFullStatsMessageCoreEncDec()+0x260>
  clearFullStatsMessageCore(&content);
  content.id0 = 0x80;
    4b12:	80 e8       	ldi	r24, 0x80	; 128
    4b14:	8a 83       	std	Y+2, r24	; 0x02
  content.id1 = 0x00;
    4b16:	1b 82       	std	Y+3, r1	; 0x03
  content.containsID = true;
    4b18:	89 81       	ldd	r24, Y+1	; 0x01
    4b1a:	81 60       	ori	r24, 0x01	; 1
    4b1c:	89 83       	std	Y+1, r24	; 0x01
  AssertIsTrue(NULL == encodeFullStatsMessageCore(buf, sizeof(buf), stTXalwaysAll, false, &content)); // Should reject ID bytes with differring msbits.
    4b1e:	cf 01       	movw	r24, r30
    4b20:	69 e0       	ldi	r22, 0x09	; 9
    4b22:	40 e0       	ldi	r20, 0x00	; 0
    4b24:	50 e0       	ldi	r21, 0x00	; 0
    4b26:	20 e0       	ldi	r18, 0x00	; 0
    4b28:	0e 94 21 14 	call	0x2842	; 0x2842 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)>
    4b2c:	89 2b       	or	r24, r25
    4b2e:	31 f0       	breq	.+12     	; 0x4b3c <testFullStatsMessageCoreEncDec()+0x290>
    4b30:	80 e0       	ldi	r24, 0x00	; 0
    4b32:	90 e0       	ldi	r25, 0x00	; 0
    4b34:	66 e2       	ldi	r22, 0x26	; 38
    4b36:	72 e0       	ldi	r23, 0x02	; 2
    4b38:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  content.id1 = 0x81;
    4b3c:	81 e8       	ldi	r24, 0x81	; 129
    4b3e:	8b 83       	std	Y+3, r24	; 0x03
  const uint8_t *onlyIDMsg = encodeFullStatsMessageCore(buf, sizeof(buf), stTXalwaysAll, false, &content);
    4b40:	ce 01       	movw	r24, r28
    4b42:	08 96       	adiw	r24, 0x08	; 8
    4b44:	69 e0       	ldi	r22, 0x09	; 9
    4b46:	40 e0       	ldi	r20, 0x00	; 0
    4b48:	50 e0       	ldi	r21, 0x00	; 0
    4b4a:	20 e0       	ldi	r18, 0x00	; 0
    4b4c:	8e 01       	movw	r16, r28
    4b4e:	0f 5f       	subi	r16, 0xFF	; 255
    4b50:	1f 4f       	sbci	r17, 0xFF	; 255
    4b52:	0e 94 21 14 	call	0x2842	; 0x2842 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)>
    4b56:	7c 01       	movw	r14, r24
  AssertIsTrue(NULL != onlyIDMsg); // Must succeed.
    4b58:	00 97       	sbiw	r24, 0x00	; 0
    4b5a:	31 f4       	brne	.+12     	; 0x4b68 <testFullStatsMessageCoreEncDec()+0x2bc>
    4b5c:	80 e0       	ldi	r24, 0x00	; 0
    4b5e:	90 e0       	ldi	r25, 0x00	; 0
    4b60:	69 e2       	ldi	r22, 0x29	; 41
    4b62:	72 e0       	ldi	r23, 0x02	; 2
    4b64:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(onlyIDMsg - buf == FullStatsMessageCore_MIN_BYTES_ON_WIRE + 2, onlyIDMsg - buf); // Must correspond to minimum size + 2 ID bytes.
    4b68:	c7 01       	movw	r24, r14
    4b6a:	8c 19       	sub	r24, r12
    4b6c:	9d 09       	sbc	r25, r13
    4b6e:	85 30       	cpi	r24, 0x05	; 5
    4b70:	91 05       	cpc	r25, r1
    4b72:	21 f0       	breq	.+8      	; 0x4b7c <testFullStatsMessageCoreEncDec()+0x2d0>
    4b74:	6a e2       	ldi	r22, 0x2A	; 42
    4b76:	72 e0       	ldi	r23, 0x02	; 2
    4b78:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr((MESSAGING_FULL_STATS_HEADER_MSBS | MESSAGING_FULL_STATS_HEADER_BITS_ID_PRESENT | MESSAGING_FULL_STATS_HEADER_BITS_ID_HIGH) == buf[0], buf[0]); // Header byte.
    4b7c:	88 85       	ldd	r24, Y+8	; 0x08
    4b7e:	86 37       	cpi	r24, 0x76	; 118
    4b80:	29 f0       	breq	.+10     	; 0x4b8c <testFullStatsMessageCoreEncDec()+0x2e0>
    4b82:	90 e0       	ldi	r25, 0x00	; 0
    4b84:	6b e2       	ldi	r22, 0x2B	; 43
    4b86:	72 e0       	ldi	r23, 0x02	; 2
    4b88:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(0x00 == buf[1], buf[1]); // ID0 without msbit.
    4b8c:	89 85       	ldd	r24, Y+9	; 0x09
    4b8e:	88 23       	and	r24, r24
    4b90:	29 f0       	breq	.+10     	; 0x4b9c <testFullStatsMessageCoreEncDec()+0x2f0>
    4b92:	90 e0       	ldi	r25, 0x00	; 0
    4b94:	6c e2       	ldi	r22, 0x2C	; 44
    4b96:	72 e0       	ldi	r23, 0x02	; 2
    4b98:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(0x01 == buf[2], buf[2]); // ID1 without msbit.
    4b9c:	8a 85       	ldd	r24, Y+10	; 0x0a
    4b9e:	81 30       	cpi	r24, 0x01	; 1
    4ba0:	29 f0       	breq	.+10     	; 0x4bac <testFullStatsMessageCoreEncDec()+0x300>
    4ba2:	90 e0       	ldi	r25, 0x00	; 0
    4ba4:	6d e2       	ldi	r22, 0x2D	; 45
    4ba6:	72 e0       	ldi	r23, 0x02	; 2
    4ba8:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(MESSAGING_FULL_STATS_FLAGS_HEADER_MSBS == buf[3], buf[3]); // Flags header byte.
    4bac:	8b 85       	ldd	r24, Y+11	; 0x0b
    4bae:	80 36       	cpi	r24, 0x60	; 96
    4bb0:	29 f0       	breq	.+10     	; 0x4bbc <testFullStatsMessageCoreEncDec()+0x310>
    4bb2:	90 e0       	ldi	r25, 0x00	; 0
    4bb4:	6e e2       	ldi	r22, 0x2E	; 46
    4bb6:	72 e0       	ldi	r23, 0x02	; 2
    4bb8:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(0x01 == buf[4], buf[4]); // CRC.
    4bbc:	8c 85       	ldd	r24, Y+12	; 0x0c
    4bbe:	81 30       	cpi	r24, 0x01	; 1
    4bc0:	29 f0       	breq	.+10     	; 0x4bcc <testFullStatsMessageCoreEncDec()+0x320>
    4bc2:	90 e0       	ldi	r25, 0x00	; 0
    4bc4:	6f e2       	ldi	r22, 0x2F	; 47
    4bc6:	72 e0       	ldi	r23, 0x02	; 2
    4bc8:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrue(((uint8_t)0xff) == *onlyIDMsg); // Must be correctly terminated.
    4bcc:	f7 01       	movw	r30, r14
    4bce:	80 81       	ld	r24, Z
    4bd0:	8f 3f       	cpi	r24, 0xFF	; 255
    4bd2:	31 f0       	breq	.+12     	; 0x4be0 <testFullStatsMessageCoreEncDec()+0x334>
    4bd4:	80 e0       	ldi	r24, 0x00	; 0
    4bd6:	90 e0       	ldi	r25, 0x00	; 0
    4bd8:	60 e3       	ldi	r22, 0x30	; 48
    4bda:	72 e0       	ldi	r23, 0x02	; 2
    4bdc:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
    4be0:	fe 01       	movw	r30, r28
    4be2:	31 96       	adiw	r30, 0x01	; 1
    4be4:	87 e0       	ldi	r24, 0x07	; 7
    4be6:	df 01       	movw	r26, r30
    4be8:	1d 92       	st	X+, r1
    4bea:	8a 95       	dec	r24
    4bec:	e9 f7       	brne	.-6      	; 0x4be8 <testFullStatsMessageCoreEncDec()+0x33c>
  // Decode the message just generated into a freshly-scrubbed content structure.
  clearFullStatsMessageCore(&content);
  const uint8_t *onlyIDMsgDE = decodeFullStatsMessageCore(buf, onlyIDMsg-buf, stTXalwaysAll, false, &content);
    4bee:	6e 2d       	mov	r22, r14
    4bf0:	6b 19       	sub	r22, r11
    4bf2:	ce 01       	movw	r24, r28
    4bf4:	08 96       	adiw	r24, 0x08	; 8
    4bf6:	40 e0       	ldi	r20, 0x00	; 0
    4bf8:	50 e0       	ldi	r21, 0x00	; 0
    4bfa:	20 e0       	ldi	r18, 0x00	; 0
    4bfc:	8f 01       	movw	r16, r30
    4bfe:	0e 94 46 13 	call	0x268c	; 0x268c <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)>
    4c02:	8c 01       	movw	r16, r24
  AssertIsTrue(NULL != onlyIDMsgDE); // Must succeed.
    4c04:	00 97       	sbiw	r24, 0x00	; 0
    4c06:	31 f4       	brne	.+12     	; 0x4c14 <testFullStatsMessageCoreEncDec()+0x368>
    4c08:	80 e0       	ldi	r24, 0x00	; 0
    4c0a:	90 e0       	ldi	r25, 0x00	; 0
    4c0c:	64 e3       	ldi	r22, 0x34	; 52
    4c0e:	72 e0       	ldi	r23, 0x02	; 2
    4c10:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrue(onlyIDMsg == onlyIDMsgDE); // Must return correct end of message.
    4c14:	e0 16       	cp	r14, r16
    4c16:	f1 06       	cpc	r15, r17
    4c18:	31 f0       	breq	.+12     	; 0x4c26 <testFullStatsMessageCoreEncDec()+0x37a>
    4c1a:	80 e0       	ldi	r24, 0x00	; 0
    4c1c:	90 e0       	ldi	r25, 0x00	; 0
    4c1e:	65 e3       	ldi	r22, 0x35	; 53
    4c20:	72 e0       	ldi	r23, 0x02	; 2
    4c22:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  // Verify that there is only ID.
  AssertIsTrue(content.containsID);
    4c26:	89 81       	ldd	r24, Y+1	; 0x01
    4c28:	80 fd       	sbrc	r24, 0
    4c2a:	06 c0       	rjmp	.+12     	; 0x4c38 <testFullStatsMessageCoreEncDec()+0x38c>
    4c2c:	80 e0       	ldi	r24, 0x00	; 0
    4c2e:	90 e0       	ldi	r25, 0x00	; 0
    4c30:	67 e3       	ldi	r22, 0x37	; 55
    4c32:	72 e0       	ldi	r23, 0x02	; 2
    4c34:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(content.id0 == (uint8_t)0x80, content.id0);
    4c38:	8a 81       	ldd	r24, Y+2	; 0x02
    4c3a:	80 38       	cpi	r24, 0x80	; 128
    4c3c:	29 f0       	breq	.+10     	; 0x4c48 <testFullStatsMessageCoreEncDec()+0x39c>
    4c3e:	90 e0       	ldi	r25, 0x00	; 0
    4c40:	68 e3       	ldi	r22, 0x38	; 56
    4c42:	72 e0       	ldi	r23, 0x02	; 2
    4c44:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(content.id1 == (uint8_t)0x81, content.id1);
    4c48:	8b 81       	ldd	r24, Y+3	; 0x03
    4c4a:	81 38       	cpi	r24, 0x81	; 129
    4c4c:	29 f0       	breq	.+10     	; 0x4c58 <testFullStatsMessageCoreEncDec()+0x3ac>
    4c4e:	90 e0       	ldi	r25, 0x00	; 0
    4c50:	69 e3       	ldi	r22, 0x39	; 57
    4c52:	72 e0       	ldi	r23, 0x02	; 2
    4c54:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrue(!content.containsTempAndPower);
    4c58:	89 81       	ldd	r24, Y+1	; 0x01
    4c5a:	81 ff       	sbrs	r24, 1
    4c5c:	06 c0       	rjmp	.+12     	; 0x4c6a <testFullStatsMessageCoreEncDec()+0x3be>
    4c5e:	80 e0       	ldi	r24, 0x00	; 0
    4c60:	90 e0       	ldi	r25, 0x00	; 0
    4c62:	6a e3       	ldi	r22, 0x3A	; 58
    4c64:	72 e0       	ldi	r23, 0x02	; 2
    4c66:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrue(!content.containsAmbL);
    4c6a:	89 81       	ldd	r24, Y+1	; 0x01
    4c6c:	82 ff       	sbrs	r24, 2
    4c6e:	06 c0       	rjmp	.+12     	; 0x4c7c <testFullStatsMessageCoreEncDec()+0x3d0>
    4c70:	80 e0       	ldi	r24, 0x00	; 0
    4c72:	90 e0       	ldi	r25, 0x00	; 0
    4c74:	6b e3       	ldi	r22, 0x3B	; 59
    4c76:	72 e0       	ldi	r23, 0x02	; 2
    4c78:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>

  // Prepare a non-secure message with ID, temp/power, ambient light level and occupancy.
  memset(buf, 0, sizeof(buf));
    4c7c:	fe 01       	movw	r30, r28
    4c7e:	38 96       	adiw	r30, 0x08	; 8
    4c80:	89 e0       	ldi	r24, 0x09	; 9
    4c82:	df 01       	movw	r26, r30
    4c84:	1d 92       	st	X+, r1
    4c86:	8a 95       	dec	r24
    4c88:	e9 f7       	brne	.-6      	; 0x4c84 <testFullStatsMessageCoreEncDec()+0x3d8>
    4c8a:	8e 01       	movw	r16, r28
    4c8c:	0f 5f       	subi	r16, 0xFF	; 255
    4c8e:	1f 4f       	sbci	r17, 0xFF	; 255
    4c90:	87 e0       	ldi	r24, 0x07	; 7
    4c92:	d8 01       	movw	r26, r16
    4c94:	1d 92       	st	X+, r1
    4c96:	8a 95       	dec	r24
    4c98:	e9 f7       	brne	.-6      	; 0x4c94 <testFullStatsMessageCoreEncDec()+0x3e8>
  clearFullStatsMessageCore(&content);
  content.id0 = 0x83;
    4c9a:	83 e8       	ldi	r24, 0x83	; 131
    4c9c:	8a 83       	std	Y+2, r24	; 0x02
  content.id1 = 0x98;
    4c9e:	88 e9       	ldi	r24, 0x98	; 152
    4ca0:	8b 83       	std	Y+3, r24	; 0x03
  content.containsID = true;
    4ca2:	99 81       	ldd	r25, Y+1	; 0x01
  content.tempAndPower.tempC16 = (19 << 4) + 1; // (19 + 1/16)C.
    4ca4:	81 e3       	ldi	r24, 0x31	; 49
    4ca6:	8c 83       	std	Y+4, r24	; 0x04
  content.tempAndPower.powerLow = false; // Normal power.
    4ca8:	81 e0       	ldi	r24, 0x01	; 1
    4caa:	8d 83       	std	Y+5, r24	; 0x05
  content.containsTempAndPower = true;
  content.ambL = 42; // Allowed value in range [1,254].
    4cac:	8a e2       	ldi	r24, 0x2A	; 42
    4cae:	8e 83       	std	Y+6, r24	; 0x06
  content.containsAmbL = true;
    4cb0:	97 60       	ori	r25, 0x07	; 7
    4cb2:	99 83       	std	Y+1, r25	; 0x01
  content.occ = 3; // Not occupied recently.
    4cb4:	8f 81       	ldd	r24, Y+7	; 0x07
    4cb6:	83 60       	ori	r24, 0x03	; 3
    4cb8:	8f 83       	std	Y+7, r24	; 0x07
  const uint8_t *msg1 = encodeFullStatsMessageCore(buf, sizeof(buf), stTXalwaysAll, false, &content);
    4cba:	cf 01       	movw	r24, r30
    4cbc:	69 e0       	ldi	r22, 0x09	; 9
    4cbe:	40 e0       	ldi	r20, 0x00	; 0
    4cc0:	50 e0       	ldi	r21, 0x00	; 0
    4cc2:	20 e0       	ldi	r18, 0x00	; 0
    4cc4:	0e 94 21 14 	call	0x2842	; 0x2842 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)>
    4cc8:	7c 01       	movw	r14, r24
  AssertIsTrue(NULL != msg1); // Must succeed.
    4cca:	00 97       	sbiw	r24, 0x00	; 0
    4ccc:	31 f4       	brne	.+12     	; 0x4cda <testFullStatsMessageCoreEncDec()+0x42e>
    4cce:	80 e0       	ldi	r24, 0x00	; 0
    4cd0:	90 e0       	ldi	r25, 0x00	; 0
    4cd2:	6a e4       	ldi	r22, 0x4A	; 74
    4cd4:	72 e0       	ldi	r23, 0x02	; 2
    4cd6:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(msg1 - buf == FullStatsMessageCore_MAX_BYTES_ON_WIRE, msg1 - buf); // Must correspond to minimum size + 2 ID bytes.
    4cda:	c7 01       	movw	r24, r14
    4cdc:	8c 19       	sub	r24, r12
    4cde:	9d 09       	sbc	r25, r13
    4ce0:	88 30       	cpi	r24, 0x08	; 8
    4ce2:	91 05       	cpc	r25, r1
    4ce4:	21 f0       	breq	.+8      	; 0x4cee <testFullStatsMessageCoreEncDec()+0x442>
    4ce6:	6b e4       	ldi	r22, 0x4B	; 75
    4ce8:	72 e0       	ldi	r23, 0x02	; 2
    4cea:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr((MESSAGING_FULL_STATS_HEADER_MSBS | MESSAGING_FULL_STATS_HEADER_BITS_ID_PRESENT | MESSAGING_FULL_STATS_HEADER_BITS_ID_HIGH) == buf[0], buf[0]); // Header byte.
    4cee:	88 85       	ldd	r24, Y+8	; 0x08
    4cf0:	86 37       	cpi	r24, 0x76	; 118
    4cf2:	29 f0       	breq	.+10     	; 0x4cfe <testFullStatsMessageCoreEncDec()+0x452>
    4cf4:	90 e0       	ldi	r25, 0x00	; 0
    4cf6:	6c e4       	ldi	r22, 0x4C	; 76
    4cf8:	72 e0       	ldi	r23, 0x02	; 2
    4cfa:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(0x03 == buf[1], buf[1]); // ID0 without msbit.
    4cfe:	89 85       	ldd	r24, Y+9	; 0x09
    4d00:	83 30       	cpi	r24, 0x03	; 3
    4d02:	29 f0       	breq	.+10     	; 0x4d0e <testFullStatsMessageCoreEncDec()+0x462>
    4d04:	90 e0       	ldi	r25, 0x00	; 0
    4d06:	6d e4       	ldi	r22, 0x4D	; 77
    4d08:	72 e0       	ldi	r23, 0x02	; 2
    4d0a:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(0x18 == buf[2], buf[2]); // ID1 without msbit.
    4d0e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d10:	88 31       	cpi	r24, 0x18	; 24
    4d12:	29 f0       	breq	.+10     	; 0x4d1e <testFullStatsMessageCoreEncDec()+0x472>
    4d14:	90 e0       	ldi	r25, 0x00	; 0
    4d16:	6e e4       	ldi	r22, 0x4E	; 78
    4d18:	72 e0       	ldi	r23, 0x02	; 2
    4d1a:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr((MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MSBS + 1) == buf[3], buf[3]); // Temp/power first byte.
    4d1e:	8b 85       	ldd	r24, Y+11	; 0x0b
    4d20:	81 34       	cpi	r24, 0x41	; 65
    4d22:	29 f0       	breq	.+10     	; 0x4d2e <testFullStatsMessageCoreEncDec()+0x482>
    4d24:	90 e0       	ldi	r25, 0x00	; 0
    4d26:	6f e4       	ldi	r22, 0x4F	; 79
    4d28:	72 e0       	ldi	r23, 0x02	; 2
    4d2a:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr((19 + 20) == buf[4], buf[4]); // Temp second byte.
    4d2e:	8c 85       	ldd	r24, Y+12	; 0x0c
    4d30:	87 32       	cpi	r24, 0x27	; 39
    4d32:	29 f0       	breq	.+10     	; 0x4d3e <testFullStatsMessageCoreEncDec()+0x492>
    4d34:	90 e0       	ldi	r25, 0x00	; 0
    4d36:	60 e5       	ldi	r22, 0x50	; 80
    4d38:	72 e0       	ldi	r23, 0x02	; 2
    4d3a:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr((MESSAGING_FULL_STATS_FLAGS_HEADER_MSBS | MESSAGING_FULL_STATS_FLAGS_HEADER_AMBL | 3) == buf[5], buf[5]); // Flags header (no extension byte follows).
    4d3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d40:	8b 36       	cpi	r24, 0x6B	; 107
    4d42:	29 f0       	breq	.+10     	; 0x4d4e <testFullStatsMessageCoreEncDec()+0x4a2>
    4d44:	90 e0       	ldi	r25, 0x00	; 0
    4d46:	61 e5       	ldi	r22, 0x51	; 81
    4d48:	72 e0       	ldi	r23, 0x02	; 2
    4d4a:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(42 == buf[6], buf[6]); // Ambient light.
    4d4e:	8e 85       	ldd	r24, Y+14	; 0x0e
    4d50:	8a 32       	cpi	r24, 0x2A	; 42
    4d52:	29 f0       	breq	.+10     	; 0x4d5e <testFullStatsMessageCoreEncDec()+0x4b2>
    4d54:	90 e0       	ldi	r25, 0x00	; 0
    4d56:	62 e5       	ldi	r22, 0x52	; 82
    4d58:	72 e0       	ldi	r23, 0x02	; 2
    4d5a:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(0x44 == buf[7], buf[7]); // CRC.
    4d5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4d60:	84 34       	cpi	r24, 0x44	; 68
    4d62:	29 f0       	breq	.+10     	; 0x4d6e <testFullStatsMessageCoreEncDec()+0x4c2>
    4d64:	90 e0       	ldi	r25, 0x00	; 0
    4d66:	63 e5       	ldi	r22, 0x53	; 83
    4d68:	72 e0       	ldi	r23, 0x02	; 2
    4d6a:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrue(((uint8_t)0xff) == *msg1); // Must be correctly terminated.
    4d6e:	f7 01       	movw	r30, r14
    4d70:	80 81       	ld	r24, Z
    4d72:	8f 3f       	cpi	r24, 0xFF	; 255
    4d74:	31 f0       	breq	.+12     	; 0x4d82 <testFullStatsMessageCoreEncDec()+0x4d6>
    4d76:	80 e0       	ldi	r24, 0x00	; 0
    4d78:	90 e0       	ldi	r25, 0x00	; 0
    4d7a:	64 e5       	ldi	r22, 0x54	; 84
    4d7c:	72 e0       	ldi	r23, 0x02	; 2
    4d7e:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
    4d82:	fe 01       	movw	r30, r28
    4d84:	31 96       	adiw	r30, 0x01	; 1
    4d86:	87 e0       	ldi	r24, 0x07	; 7
    4d88:	df 01       	movw	r26, r30
    4d8a:	1d 92       	st	X+, r1
    4d8c:	8a 95       	dec	r24
    4d8e:	e9 f7       	brne	.-6      	; 0x4d8a <testFullStatsMessageCoreEncDec()+0x4de>
  // Decode the message just generated into a freshly-scrubbed content structure.
  clearFullStatsMessageCore(&content);
  const uint8_t *msg1DE = decodeFullStatsMessageCore(buf, msg1-buf, stTXalwaysAll, false, &content);
    4d90:	6e 2d       	mov	r22, r14
    4d92:	6b 19       	sub	r22, r11
    4d94:	ce 01       	movw	r24, r28
    4d96:	08 96       	adiw	r24, 0x08	; 8
    4d98:	40 e0       	ldi	r20, 0x00	; 0
    4d9a:	50 e0       	ldi	r21, 0x00	; 0
    4d9c:	20 e0       	ldi	r18, 0x00	; 0
    4d9e:	8f 01       	movw	r16, r30
    4da0:	0e 94 46 13 	call	0x268c	; 0x268c <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)>
    4da4:	8c 01       	movw	r16, r24
  AssertIsTrue(NULL != msg1DE); // Must succeed.
    4da6:	00 97       	sbiw	r24, 0x00	; 0
    4da8:	31 f4       	brne	.+12     	; 0x4db6 <testFullStatsMessageCoreEncDec()+0x50a>
    4daa:	80 e0       	ldi	r24, 0x00	; 0
    4dac:	90 e0       	ldi	r25, 0x00	; 0
    4dae:	68 e5       	ldi	r22, 0x58	; 88
    4db0:	72 e0       	ldi	r23, 0x02	; 2
    4db2:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrue(msg1 == msg1DE); // Must return correct end of message.
    4db6:	e0 16       	cp	r14, r16
    4db8:	f1 06       	cpc	r15, r17
    4dba:	31 f0       	breq	.+12     	; 0x4dc8 <testFullStatsMessageCoreEncDec()+0x51c>
    4dbc:	80 e0       	ldi	r24, 0x00	; 0
    4dbe:	90 e0       	ldi	r25, 0x00	; 0
    4dc0:	69 e5       	ldi	r22, 0x59	; 89
    4dc2:	72 e0       	ldi	r23, 0x02	; 2
    4dc4:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrue(content.containsID);
    4dc8:	89 81       	ldd	r24, Y+1	; 0x01
    4dca:	80 fd       	sbrc	r24, 0
    4dcc:	06 c0       	rjmp	.+12     	; 0x4dda <testFullStatsMessageCoreEncDec()+0x52e>
    4dce:	80 e0       	ldi	r24, 0x00	; 0
    4dd0:	90 e0       	ldi	r25, 0x00	; 0
    4dd2:	6a e5       	ldi	r22, 0x5A	; 90
    4dd4:	72 e0       	ldi	r23, 0x02	; 2
    4dd6:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(content.id0 == (uint8_t)0x83, content.id0);
    4dda:	8a 81       	ldd	r24, Y+2	; 0x02
    4ddc:	83 38       	cpi	r24, 0x83	; 131
    4dde:	29 f0       	breq	.+10     	; 0x4dea <testFullStatsMessageCoreEncDec()+0x53e>
    4de0:	90 e0       	ldi	r25, 0x00	; 0
    4de2:	6b e5       	ldi	r22, 0x5B	; 91
    4de4:	72 e0       	ldi	r23, 0x02	; 2
    4de6:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(content.id1 == (uint8_t)0x98, content.id1);
    4dea:	8b 81       	ldd	r24, Y+3	; 0x03
    4dec:	88 39       	cpi	r24, 0x98	; 152
    4dee:	29 f0       	breq	.+10     	; 0x4dfa <testFullStatsMessageCoreEncDec()+0x54e>
    4df0:	90 e0       	ldi	r25, 0x00	; 0
    4df2:	6c e5       	ldi	r22, 0x5C	; 92
    4df4:	72 e0       	ldi	r23, 0x02	; 2
    4df6:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrue(content.containsTempAndPower);
    4dfa:	89 81       	ldd	r24, Y+1	; 0x01
    4dfc:	81 fd       	sbrc	r24, 1
    4dfe:	06 c0       	rjmp	.+12     	; 0x4e0c <testFullStatsMessageCoreEncDec()+0x560>
    4e00:	80 e0       	ldi	r24, 0x00	; 0
    4e02:	90 e0       	ldi	r25, 0x00	; 0
    4e04:	6d e5       	ldi	r22, 0x5D	; 93
    4e06:	72 e0       	ldi	r23, 0x02	; 2
    4e08:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrue(!content.tempAndPower.powerLow);
    4e0c:	8d 81       	ldd	r24, Y+5	; 0x05
    4e0e:	87 ff       	sbrs	r24, 7
    4e10:	06 c0       	rjmp	.+12     	; 0x4e1e <testFullStatsMessageCoreEncDec()+0x572>
    4e12:	80 e0       	ldi	r24, 0x00	; 0
    4e14:	90 e0       	ldi	r25, 0x00	; 0
    4e16:	6e e5       	ldi	r22, 0x5E	; 94
    4e18:	72 e0       	ldi	r23, 0x02	; 2
    4e1a:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrue((19 << 4) + 1 == content.tempAndPower.tempC16);
    4e1e:	8c 81       	ldd	r24, Y+4	; 0x04
    4e20:	2d 81       	ldd	r18, Y+5	; 0x05
    4e22:	92 2f       	mov	r25, r18
    4e24:	9f 77       	andi	r25, 0x7F	; 127
    4e26:	88 0f       	add	r24, r24
    4e28:	99 1f       	adc	r25, r25
    4e2a:	82 56       	subi	r24, 0x62	; 98
    4e2c:	92 40       	sbci	r25, 0x02	; 2
    4e2e:	31 f0       	breq	.+12     	; 0x4e3c <testFullStatsMessageCoreEncDec()+0x590>
    4e30:	80 e0       	ldi	r24, 0x00	; 0
    4e32:	90 e0       	ldi	r25, 0x00	; 0
    4e34:	6f e5       	ldi	r22, 0x5F	; 95
    4e36:	72 e0       	ldi	r23, 0x02	; 2
    4e38:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrue(content.containsAmbL);
    4e3c:	89 81       	ldd	r24, Y+1	; 0x01
    4e3e:	82 fd       	sbrc	r24, 2
    4e40:	06 c0       	rjmp	.+12     	; 0x4e4e <testFullStatsMessageCoreEncDec()+0x5a2>
    4e42:	80 e0       	ldi	r24, 0x00	; 0
    4e44:	90 e0       	ldi	r25, 0x00	; 0
    4e46:	60 e6       	ldi	r22, 0x60	; 96
    4e48:	72 e0       	ldi	r23, 0x02	; 2
    4e4a:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrue(42 == content.ambL);
    4e4e:	8e 81       	ldd	r24, Y+6	; 0x06
    4e50:	8a 32       	cpi	r24, 0x2A	; 42
    4e52:	31 f0       	breq	.+12     	; 0x4e60 <testFullStatsMessageCoreEncDec()+0x5b4>
    4e54:	80 e0       	ldi	r24, 0x00	; 0
    4e56:	90 e0       	ldi	r25, 0x00	; 0
    4e58:	61 e6       	ldi	r22, 0x61	; 97
    4e5a:	72 e0       	ldi	r23, 0x02	; 2
    4e5c:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  }
    4e60:	60 96       	adiw	r28, 0x10	; 16
    4e62:	0f b6       	in	r0, 0x3f	; 63
    4e64:	f8 94       	cli
    4e66:	de bf       	out	0x3e, r29	; 62
    4e68:	0f be       	out	0x3f, r0	; 63
    4e6a:	cd bf       	out	0x3d, r28	; 61
    4e6c:	cf 91       	pop	r28
    4e6e:	df 91       	pop	r29
    4e70:	1f 91       	pop	r17
    4e72:	0f 91       	pop	r16
    4e74:	ff 90       	pop	r15
    4e76:	ef 90       	pop	r14
    4e78:	df 90       	pop	r13
    4e7a:	cf 90       	pop	r12
    4e7c:	bf 90       	pop	r11
    4e7e:	08 95       	ret

00004e80 <testCRC()>:
  }

// Do some basic testing of CRC routines.
static void testCRC()
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testCRC");
    4e80:	81 ea       	ldi	r24, 0xA1	; 161
    4e82:	94 e0       	ldi	r25, 0x04	; 4
    4e84:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <serialPrintlnAndFlush(__FlashStringHelper const*)>
  // Test the 7-bit CRC (0x5b) routine at a few points.
  const uint8_t crc0 = crc7_5B_update(0, 0); // Minimal stats payload with normal power and minimum temperature.
    4e88:	80 e0       	ldi	r24, 0x00	; 0
    4e8a:	60 e0       	ldi	r22, 0x00	; 0
    4e8c:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <crc7_5B_update(unsigned char, unsigned char)>
  AssertIsTrueWithErr((0 == crc0), crc0); 
    4e90:	88 23       	and	r24, r24
    4e92:	29 f0       	breq	.+10     	; 0x4e9e <testCRC()+0x1e>
    4e94:	90 e0       	ldi	r25, 0x00	; 0
    4e96:	6f ee       	ldi	r22, 0xEF	; 239
    4e98:	70 e0       	ldi	r23, 0x00	; 0
    4e9a:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  const uint8_t crc1 = crc7_5B_update(0x40, 0); // Minimal stats payload with normal power and minimum temperature.
    4e9e:	80 e4       	ldi	r24, 0x40	; 64
    4ea0:	60 e0       	ldi	r22, 0x00	; 0
    4ea2:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <crc7_5B_update(unsigned char, unsigned char)>
  AssertIsTrueWithErr((0x1a == crc1), crc1); 
    4ea6:	8a 31       	cpi	r24, 0x1A	; 26
    4ea8:	29 f0       	breq	.+10     	; 0x4eb4 <testCRC()+0x34>
    4eaa:	90 e0       	ldi	r25, 0x00	; 0
    4eac:	61 ef       	ldi	r22, 0xF1	; 241
    4eae:	70 e0       	ldi	r23, 0x00	; 0
    4eb0:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  const uint8_t crc2 = crc7_5B_update(0x50, 40); // Minimal stats payload with low power and 20C temperature.
    4eb4:	80 e5       	ldi	r24, 0x50	; 80
    4eb6:	68 e2       	ldi	r22, 0x28	; 40
    4eb8:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <crc7_5B_update(unsigned char, unsigned char)>
  AssertIsTrueWithErr((0x7b == crc2), crc2); 
    4ebc:	8b 37       	cpi	r24, 0x7B	; 123
    4ebe:	29 f0       	breq	.+10     	; 0x4eca <testCRC()+0x4a>
    4ec0:	90 e0       	ldi	r25, 0x00	; 0
    4ec2:	63 ef       	ldi	r22, 0xF3	; 243
    4ec4:	70 e0       	ldi	r23, 0x00	; 0
    4ec6:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
    4eca:	08 95       	ret

00004ecc <testTempCompand()>:
  AssertIsTrue(14 == v4);
  }


// Test temperature companding.
static void testTempCompand()
    4ecc:	0f 93       	push	r16
    4ece:	1f 93       	push	r17
    4ed0:	cf 93       	push	r28
    4ed2:	df 93       	push	r29
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testTempCompand");
    4ed4:	89 ea       	ldi	r24, 0xA9	; 169
    4ed6:	94 e0       	ldi	r25, 0x04	; 4
    4ed8:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <serialPrintlnAndFlush(__FlashStringHelper const*)>
    4edc:	c0 e0       	ldi	r28, 0x00	; 0
    4ede:	d0 e0       	ldi	r29, 0x00	; 0
  // Ensure that all (whole) temperatures from 0C to 100C are correctly compressed and expanded.
  for(int i = 0; i <= 100; ++i)
    {
    //DEBUG_SERIAL_PRINT(i<<4); DEBUG_SERIAL_PRINT(" => "); DEBUG_SERIAL_PRINT(compressTempC16(i<<4)); DEBUG_SERIAL_PRINT(" => "); DEBUG_SERIAL_PRINT(expandTempC16(compressTempC16(i<<4))); DEBUG_SERIAL_PRINTLN();
    AssertIsTrueWithErr(i<<4 == expandTempC16(compressTempC16(i<<4)), i);
    4ee0:	8e 01       	movw	r16, r28
    4ee2:	64 e0       	ldi	r22, 0x04	; 4
    4ee4:	00 0f       	add	r16, r16
    4ee6:	11 1f       	adc	r17, r17
    4ee8:	6a 95       	dec	r22
    4eea:	e1 f7       	brne	.-8      	; 0x4ee4 <testTempCompand()+0x18>
    4eec:	c8 01       	movw	r24, r16
    4eee:	0e 94 40 06 	call	0xc80	; 0xc80 <compressTempC16(int)>
    4ef2:	0e 94 68 06 	call	0xcd0	; 0xcd0 <expandTempC16(unsigned char)>
    4ef6:	08 17       	cp	r16, r24
    4ef8:	19 07       	cpc	r17, r25
    4efa:	29 f0       	breq	.+10     	; 0x4f06 <testTempCompand()+0x3a>
    4efc:	ce 01       	movw	r24, r28
    4efe:	6e e1       	ldi	r22, 0x1E	; 30
    4f00:	73 e0       	ldi	r23, 0x03	; 3
    4f02:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
// Test temperature companding.
static void testTempCompand()
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testTempCompand");
  // Ensure that all (whole) temperatures from 0C to 100C are correctly compressed and expanded.
  for(int i = 0; i <= 100; ++i)
    4f06:	21 96       	adiw	r28, 0x01	; 1
    4f08:	c5 36       	cpi	r28, 0x65	; 101
    4f0a:	d1 05       	cpc	r29, r1
    4f0c:	49 f7       	brne	.-46     	; 0x4ee0 <testTempCompand()+0x14>
    {
    //DEBUG_SERIAL_PRINT(i<<4); DEBUG_SERIAL_PRINT(" => "); DEBUG_SERIAL_PRINT(compressTempC16(i<<4)); DEBUG_SERIAL_PRINT(" => "); DEBUG_SERIAL_PRINT(expandTempC16(compressTempC16(i<<4))); DEBUG_SERIAL_PRINTLN();
    AssertIsTrueWithErr(i<<4 == expandTempC16(compressTempC16(i<<4)), i);
    }
  // Ensure that out-of-range inputs are coerced to the limits.
  AssertIsTrueWithErr(0 == expandTempC16(compressTempC16(-1)), -1);
    4f0e:	8f ef       	ldi	r24, 0xFF	; 255
    4f10:	9f ef       	ldi	r25, 0xFF	; 255
    4f12:	0e 94 40 06 	call	0xc80	; 0xc80 <compressTempC16(int)>
    4f16:	0e 94 68 06 	call	0xcd0	; 0xcd0 <expandTempC16(unsigned char)>
    4f1a:	89 2b       	or	r24, r25
    4f1c:	31 f0       	breq	.+12     	; 0x4f2a <testTempCompand()+0x5e>
    4f1e:	8f ef       	ldi	r24, 0xFF	; 255
    4f20:	9f ef       	ldi	r25, 0xFF	; 255
    4f22:	61 e2       	ldi	r22, 0x21	; 33
    4f24:	73 e0       	ldi	r23, 0x03	; 3
    4f26:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr((100<<4) == expandTempC16(compressTempC16(101<<4)), 101);
    4f2a:	80 e5       	ldi	r24, 0x50	; 80
    4f2c:	96 e0       	ldi	r25, 0x06	; 6
    4f2e:	0e 94 40 06 	call	0xc80	; 0xc80 <compressTempC16(int)>
    4f32:	0e 94 68 06 	call	0xcd0	; 0xcd0 <expandTempC16(unsigned char)>
    4f36:	80 54       	subi	r24, 0x40	; 64
    4f38:	96 40       	sbci	r25, 0x06	; 6
    4f3a:	31 f0       	breq	.+12     	; 0x4f48 <testTempCompand()+0x7c>
    4f3c:	85 e6       	ldi	r24, 0x65	; 101
    4f3e:	90 e0       	ldi	r25, 0x00	; 0
    4f40:	62 e2       	ldi	r22, 0x22	; 34
    4f42:	73 e0       	ldi	r23, 0x03	; 3
    4f44:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(COMPRESSION_C16_CEIL_VAL_AFTER == compressTempC16(102<<4), COMPRESSION_C16_CEIL_VAL_AFTER); // Verify ceiling.
    4f48:	80 e6       	ldi	r24, 0x60	; 96
    4f4a:	96 e0       	ldi	r25, 0x06	; 6
    4f4c:	0e 94 40 06 	call	0xc80	; 0xc80 <compressTempC16(int)>
    4f50:	88 3f       	cpi	r24, 0xF8	; 248
    4f52:	31 f0       	breq	.+12     	; 0x4f60 <testTempCompand()+0x94>
    4f54:	88 ef       	ldi	r24, 0xF8	; 248
    4f56:	90 e0       	ldi	r25, 0x00	; 0
    4f58:	63 e2       	ldi	r22, 0x23	; 35
    4f5a:	73 e0       	ldi	r23, 0x03	; 3
    4f5c:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrue(COMPRESSION_C16_CEIL_VAL_AFTER < 0xff);
  // Ensure that 'unset' compressed value expands to 'unset' uncompressed value.
  AssertIsTrue(STATS_UNSET_INT == expandTempC16(STATS_UNSET_BYTE));
    4f60:	8f ef       	ldi	r24, 0xFF	; 255
    4f62:	0e 94 68 06 	call	0xcd0	; 0xcd0 <expandTempC16(unsigned char)>
    4f66:	8f 5f       	subi	r24, 0xFF	; 255
    4f68:	9f 47       	sbci	r25, 0x7F	; 127
    4f6a:	31 f0       	breq	.+12     	; 0x4f78 <testTempCompand()+0xac>
    4f6c:	80 e0       	ldi	r24, 0x00	; 0
    4f6e:	90 e0       	ldi	r25, 0x00	; 0
    4f70:	66 e2       	ldi	r22, 0x26	; 38
    4f72:	73 e0       	ldi	r23, 0x03	; 3
    4f74:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  }
    4f78:	df 91       	pop	r29
    4f7a:	cf 91       	pop	r28
    4f7c:	1f 91       	pop	r17
    4f7e:	0f 91       	pop	r16
    4f80:	08 95       	ret

00004f82 <testRNG8()>:
  // Covers the key cases 0 and 254 in particular.
  for(int i = 256; --i >= 0; ) { AssertIsTrue((uint8_t)i == smoothStatsValue((uint8_t)i, (uint8_t)i)); }
  }

// Test for expected behaviour of RNG8 PRNG starting from a known state.
static void testRNG8()
    4f82:	ef 92       	push	r14
    4f84:	ff 92       	push	r15
    4f86:	0f 93       	push	r16
    4f88:	1f 93       	push	r17
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testRNG8");
    4f8a:	89 eb       	ldi	r24, 0xB9	; 185
    4f8c:	94 e0       	ldi	r25, 0x04	; 4
    4f8e:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <serialPrintlnAndFlush(__FlashStringHelper const*)>
  // Reset to known state; API not normally exposed and only exists for unit tests.
  resetRNG8();
    4f92:	0e 94 b6 19 	call	0x336c	; 0x336c <resetRNG8()>
  // Extract and check a few initial values.
  const uint8_t v1 = randRNG8();
    4f96:	0e 94 9e 19 	call	0x333c	; 0x333c <randRNG8()>
    4f9a:	18 2f       	mov	r17, r24
  const uint8_t v2 = randRNG8();
    4f9c:	0e 94 9e 19 	call	0x333c	; 0x333c <randRNG8()>
    4fa0:	08 2f       	mov	r16, r24
  const uint8_t v3 = randRNG8();
    4fa2:	0e 94 9e 19 	call	0x333c	; 0x333c <randRNG8()>
    4fa6:	f8 2e       	mov	r15, r24
  const uint8_t v4 = randRNG8();
    4fa8:	0e 94 9e 19 	call	0x333c	; 0x333c <randRNG8()>
    4fac:	e8 2e       	mov	r14, r24
  //DEBUG_SERIAL_PRINT(v1); DEBUG_SERIAL_PRINTLN();
  //DEBUG_SERIAL_PRINT(v2); DEBUG_SERIAL_PRINTLN();
  //DEBUG_SERIAL_PRINT(v3); DEBUG_SERIAL_PRINTLN();
  //DEBUG_SERIAL_PRINT(v4); DEBUG_SERIAL_PRINTLN();
  AssertIsTrue(1 == v1);
    4fae:	11 30       	cpi	r17, 0x01	; 1
    4fb0:	31 f0       	breq	.+12     	; 0x4fbe <testRNG8()+0x3c>
    4fb2:	80 e0       	ldi	r24, 0x00	; 0
    4fb4:	90 e0       	ldi	r25, 0x00	; 0
    4fb6:	6f e0       	ldi	r22, 0x0F	; 15
    4fb8:	73 e0       	ldi	r23, 0x03	; 3
    4fba:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrue(0 == v2);
    4fbe:	00 23       	and	r16, r16
    4fc0:	31 f0       	breq	.+12     	; 0x4fce <testRNG8()+0x4c>
    4fc2:	80 e0       	ldi	r24, 0x00	; 0
    4fc4:	90 e0       	ldi	r25, 0x00	; 0
    4fc6:	60 e1       	ldi	r22, 0x10	; 16
    4fc8:	73 e0       	ldi	r23, 0x03	; 3
    4fca:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrue(3 == v3);
    4fce:	83 e0       	ldi	r24, 0x03	; 3
    4fd0:	f8 16       	cp	r15, r24
    4fd2:	31 f0       	breq	.+12     	; 0x4fe0 <testRNG8()+0x5e>
    4fd4:	80 e0       	ldi	r24, 0x00	; 0
    4fd6:	90 e0       	ldi	r25, 0x00	; 0
    4fd8:	61 e1       	ldi	r22, 0x11	; 17
    4fda:	73 e0       	ldi	r23, 0x03	; 3
    4fdc:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrue(14 == v4);
    4fe0:	8e e0       	ldi	r24, 0x0E	; 14
    4fe2:	e8 16       	cp	r14, r24
    4fe4:	31 f0       	breq	.+12     	; 0x4ff2 <testRNG8()+0x70>
    4fe6:	80 e0       	ldi	r24, 0x00	; 0
    4fe8:	90 e0       	ldi	r25, 0x00	; 0
    4fea:	62 e1       	ldi	r22, 0x12	; 18
    4fec:	73 e0       	ldi	r23, 0x03	; 3
    4fee:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  }
    4ff2:	1f 91       	pop	r17
    4ff4:	0f 91       	pop	r16
    4ff6:	ff 90       	pop	r15
    4ff8:	ef 90       	pop	r14
    4ffa:	08 95       	ret

00004ffc <testRTCPersist()>:




// Test elements of RTC time persist/restore (without causing more EEPROM wear, if working correctly).
static void testRTCPersist()
    4ffc:	ff 92       	push	r15
    4ffe:	0f 93       	push	r16
    5000:	1f 93       	push	r17
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testRTCPersist");
    5002:	82 ec       	ldi	r24, 0xC2	; 194
    5004:	94 e0       	ldi	r25, 0x04	; 4
    5006:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <serialPrintlnAndFlush(__FlashStringHelper const*)>
  // Perform with interrupts shut out to avoid RTC ISR interferring.
  // This will effectively stall the RTC.
  bool minutesPersistOK;
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    500a:	ff b6       	in	r15, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    500c:	f8 94       	cli
    {
    const uint_least16_t mb = getMinutesSinceMidnightLT();
    500e:	0e 94 41 1c 	call	0x3882	; 0x3882 <getMinutesSinceMidnightLT()>
    5012:	8c 01       	movw	r16, r24
    persistRTC();
    5014:	0e 94 b4 1c 	call	0x3968	; 0x3968 <persistRTC()>
    restoreRTC();
    5018:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <restoreRTC()>
    const uint_least16_t ma = getMinutesSinceMidnightLT();
    501c:	0e 94 41 1c 	call	0x3882	; 0x3882 <getMinutesSinceMidnightLT()>
    5020:	fc 01       	movw	r30, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5022:	ff be       	out	0x3f, r15	; 63
    // Check that persist/restore did not change live minutes value at least, within the 15-minute quantum used.
    minutesPersistOK = (mb/15 == ma/15);
    }
    AssertIsTrue(minutesPersistOK);
    5024:	c8 01       	movw	r24, r16
    5026:	6f e0       	ldi	r22, 0x0F	; 15
    5028:	70 e0       	ldi	r23, 0x00	; 0
    502a:	0e 94 13 3e 	call	0x7c26	; 0x7c26 <__udivmodhi4>
    502e:	9b 01       	movw	r18, r22
    5030:	cf 01       	movw	r24, r30
    5032:	6f e0       	ldi	r22, 0x0F	; 15
    5034:	70 e0       	ldi	r23, 0x00	; 0
    5036:	0e 94 13 3e 	call	0x7c26	; 0x7c26 <__udivmodhi4>
    503a:	26 17       	cp	r18, r22
    503c:	37 07       	cpc	r19, r23
    503e:	31 f0       	breq	.+12     	; 0x504c <testRTCPersist()+0x50>
    5040:	80 e0       	ldi	r24, 0x00	; 0
    5042:	90 e0       	ldi	r25, 0x00	; 0
    5044:	69 e7       	ldi	r22, 0x79	; 121
    5046:	72 e0       	ldi	r23, 0x02	; 2
    5048:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  }
    504c:	1f 91       	pop	r17
    504e:	0f 91       	pop	r16
    5050:	ff 90       	pop	r15
    5052:	08 95       	ret

00005054 <testSmoothStatsValue()>:

// Test that the simple smoothing function never generates an out of range value.
// In particular, with a legitimate value range of [0,254]
// smoothStatsValue() must never generate 255 (0xff) which looks like an uninitialised EEPROM value,
// nor wrap around in either direction.
static void testSmoothStatsValue()
    5054:	1f 93       	push	r17
    5056:	cf 93       	push	r28
    5058:	df 93       	push	r29
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testSmoothStatsValue");
    505a:	8c ed       	ldi	r24, 0xDC	; 220
    505c:	94 e0       	ldi	r25, 0x04	; 4
    505e:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <serialPrintlnAndFlush(__FlashStringHelper const*)>
    5062:	c0 e0       	ldi	r28, 0x00	; 0
    5064:	d1 e0       	ldi	r29, 0x01	; 1
    5066:	0c c0       	rjmp	.+24     	; 0x5080 <testSmoothStatsValue()+0x2c>
  // Covers the key cases 0 and 254 in particular.
  for(int i = 256; --i >= 0; ) { AssertIsTrue((uint8_t)i == smoothStatsValue((uint8_t)i, (uint8_t)i)); }
    5068:	8c 2f       	mov	r24, r28
    506a:	6c 2f       	mov	r22, r28
    506c:	0e 94 c3 06 	call	0xd86	; 0xd86 <smoothStatsValue(unsigned char, unsigned char)>
    5070:	c8 17       	cp	r28, r24
    5072:	31 f0       	breq	.+12     	; 0x5080 <testSmoothStatsValue()+0x2c>
    5074:	80 e0       	ldi	r24, 0x00	; 0
    5076:	90 e0       	ldi	r25, 0x00	; 0
    5078:	6d ef       	ldi	r22, 0xFD	; 253
    507a:	72 e0       	ldi	r23, 0x02	; 2
    507c:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
    5080:	21 97       	sbiw	r28, 0x01	; 1
    5082:	8f ef       	ldi	r24, 0xFF	; 255
    5084:	cf 3f       	cpi	r28, 0xFF	; 255
    5086:	d8 07       	cpc	r29, r24
    5088:	79 f7       	brne	.-34     	; 0x5068 <testSmoothStatsValue()+0x14>
  }
    508a:	df 91       	pop	r29
    508c:	cf 91       	pop	r28
    508e:	1f 91       	pop	r17
    5090:	08 95       	ret

00005092 <testFHTEncoding()>:
  const uint8_t crc2 = crc7_5B_update(0x50, 40); // Minimal stats payload with low power and 20C temperature.
  AssertIsTrueWithErr((0x7b == crc2), crc2); 
  }

// Test of FHT8V bitstream encoding and decoding.
static void testFHTEncoding()
    5092:	ef 92       	push	r14
    5094:	ff 92       	push	r15
    5096:	0f 93       	push	r16
    5098:	1f 93       	push	r17
    509a:	df 93       	push	r29
    509c:	cf 93       	push	r28
    509e:	cd b7       	in	r28, 0x3d	; 61
    50a0:	de b7       	in	r29, 0x3e	; 62
    50a2:	c4 54       	subi	r28, 0x44	; 68
    50a4:	d0 40       	sbci	r29, 0x00	; 0
    50a6:	0f b6       	in	r0, 0x3f	; 63
    50a8:	f8 94       	cli
    50aa:	de bf       	out	0x3e, r29	; 62
    50ac:	0f be       	out	0x3f, r0	; 63
    50ae:	cd bf       	out	0x3d, r28	; 61
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testFHTEncoding");
    50b0:	81 ef       	ldi	r24, 0xF1	; 241
    50b2:	94 e0       	ldi	r25, 0x04	; 4
    50b4:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <serialPrintlnAndFlush(__FlashStringHelper const*)>
  uint8_t buf[FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE];
  fht8v_msg_t command; // For encoding.
  fht8v_msg_t commandDecoded; // For decoding.

  // Encode an example message for a real house code and command (close valve).
  command.hc1 = 13;
    50b8:	8d e0       	ldi	r24, 0x0D	; 13
    50ba:	89 83       	std	Y+1, r24	; 0x01
  command.hc2 = 73;
    50bc:	89 e4       	ldi	r24, 0x49	; 73
    50be:	8a 83       	std	Y+2, r24	; 0x02
#ifdef FHT8V_ADR_USED
  address = 0;
#endif
  command.command = 0x26;
    50c0:	86 e2       	ldi	r24, 0x26	; 38
    50c2:	8b 83       	std	Y+3, r24	; 0x03
  command.extension = 0;
    50c4:	1c 82       	std	Y+4, r1	; 0x04
  memset(buf, 0xff, sizeof(buf));
    50c6:	8e 01       	movw	r16, r28
    50c8:	07 5f       	subi	r16, 0xF7	; 247
    50ca:	1f 4f       	sbci	r17, 0xFF	; 255
    50cc:	c8 01       	movw	r24, r16
    50ce:	6f ef       	ldi	r22, 0xFF	; 255
    50d0:	70 e0       	ldi	r23, 0x00	; 0
    50d2:	4c e3       	ldi	r20, 0x3C	; 60
    50d4:	50 e0       	ldi	r21, 0x00	; 0
    50d6:	0e 94 40 04 	call	0x880	; 0x880 <memset>
  uint8_t *result1 = FHT8VCreate200usBitStreamBptr(buf, &command);
    50da:	c8 01       	movw	r24, r16
    50dc:	be 01       	movw	r22, r28
    50de:	6f 5f       	subi	r22, 0xFF	; 255
    50e0:	7f 4f       	sbci	r23, 0xFF	; 255
    50e2:	0e 94 48 0b 	call	0x1690	; 0x1690 <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>
    50e6:	8c 01       	movw	r16, r24
  AssertIsTrueWithErr(((uint8_t)~0U) == *result1, *result1); // Check that result points at terminator value 0xff/~0.
    50e8:	fc 01       	movw	r30, r24
    50ea:	80 81       	ld	r24, Z
    50ec:	8f 3f       	cpi	r24, 0xFF	; 255
    50ee:	29 f0       	breq	.+10     	; 0x50fa <testFHTEncoding()+0x68>
    50f0:	90 e0       	ldi	r25, 0x00	; 0
    50f2:	69 e0       	ldi	r22, 0x09	; 9
    50f4:	71 e0       	ldi	r23, 0x01	; 1
    50f6:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  //AssertIsTrue((result1 - buf < MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE), result1-buf); // Check not overflowing the buffer.
  AssertIsTrueWithErr((result1 - buf == 38), result1-buf); // Check correct length.
    50fa:	79 e0       	ldi	r23, 0x09	; 9
    50fc:	e7 2e       	mov	r14, r23
    50fe:	f1 2c       	mov	r15, r1
    5100:	ec 0e       	add	r14, r28
    5102:	fd 1e       	adc	r15, r29
    5104:	c8 01       	movw	r24, r16
    5106:	8e 19       	sub	r24, r14
    5108:	9f 09       	sbc	r25, r15
    510a:	86 32       	cpi	r24, 0x26	; 38
    510c:	91 05       	cpc	r25, r1
    510e:	21 f0       	breq	.+8      	; 0x5118 <testFHTEncoding()+0x86>
    5110:	6b e0       	ldi	r22, 0x0B	; 11
    5112:	71 e0       	ldi	r23, 0x01	; 1
    5114:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(((uint8_t)0xcc) == buf[0], buf[0]); // Check that result starts with FHT8V 0xcc preamble.
    5118:	89 85       	ldd	r24, Y+9	; 0x09
    511a:	8c 3c       	cpi	r24, 0xCC	; 204
    511c:	29 f0       	breq	.+10     	; 0x5128 <testFHTEncoding()+0x96>
    511e:	90 e0       	ldi	r25, 0x00	; 0
    5120:	6c e0       	ldi	r22, 0x0C	; 12
    5122:	71 e0       	ldi	r23, 0x01	; 1
    5124:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(((uint8_t)0xe3) == buf[6], buf[6]); // Check end of preamble.
    5128:	8f 85       	ldd	r24, Y+15	; 0x0f
    512a:	83 3e       	cpi	r24, 0xE3	; 227
    512c:	29 f0       	breq	.+10     	; 0x5138 <testFHTEncoding()+0xa6>
    512e:	90 e0       	ldi	r25, 0x00	; 0
    5130:	6d e0       	ldi	r22, 0x0D	; 13
    5132:	71 e0       	ldi	r23, 0x01	; 1
    5134:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(((uint8_t)0xce) == buf[34], buf[34]); // Check part of checksum.
    5138:	8b a5       	ldd	r24, Y+43	; 0x2b
    513a:	8e 3c       	cpi	r24, 0xCE	; 206
    513c:	29 f0       	breq	.+10     	; 0x5148 <testFHTEncoding()+0xb6>
    513e:	90 e0       	ldi	r25, 0x00	; 0
    5140:	6e e0       	ldi	r22, 0x0E	; 14
    5142:	71 e0       	ldi	r23, 0x01	; 1
    5144:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  // Attempt to decode.
  AssertIsTrue(FHT8VDecodeBitStream(buf, buf + MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE - 1, &commandDecoded));
    5148:	ce 01       	movw	r24, r28
    514a:	09 96       	adiw	r24, 0x09	; 9
    514c:	be 01       	movw	r22, r28
    514e:	6a 5c       	subi	r22, 0xCA	; 202
    5150:	7f 4f       	sbci	r23, 0xFF	; 255
    5152:	ae 01       	movw	r20, r28
    5154:	4b 5f       	subi	r20, 0xFB	; 251
    5156:	5f 4f       	sbci	r21, 0xFF	; 255
    5158:	0e 94 b6 0c 	call	0x196c	; 0x196c <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)>
    515c:	89 2b       	or	r24, r25
    515e:	31 f4       	brne	.+12     	; 0x516c <testFHTEncoding()+0xda>
    5160:	80 e0       	ldi	r24, 0x00	; 0
    5162:	90 e0       	ldi	r25, 0x00	; 0
    5164:	60 e1       	ldi	r22, 0x10	; 16
    5166:	71 e0       	ldi	r23, 0x01	; 1
    5168:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(13 == commandDecoded.hc1, commandDecoded.hc1);
    516c:	8d 81       	ldd	r24, Y+5	; 0x05
    516e:	8d 30       	cpi	r24, 0x0D	; 13
    5170:	29 f0       	breq	.+10     	; 0x517c <testFHTEncoding()+0xea>
    5172:	90 e0       	ldi	r25, 0x00	; 0
    5174:	61 e1       	ldi	r22, 0x11	; 17
    5176:	71 e0       	ldi	r23, 0x01	; 1
    5178:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(73 == commandDecoded.hc2, commandDecoded.hc2);
    517c:	8e 81       	ldd	r24, Y+6	; 0x06
    517e:	89 34       	cpi	r24, 0x49	; 73
    5180:	29 f0       	breq	.+10     	; 0x518c <testFHTEncoding()+0xfa>
    5182:	90 e0       	ldi	r25, 0x00	; 0
    5184:	62 e1       	ldi	r22, 0x12	; 18
    5186:	71 e0       	ldi	r23, 0x01	; 1
    5188:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(0x26 == commandDecoded.command, commandDecoded.command);
    518c:	8f 81       	ldd	r24, Y+7	; 0x07
    518e:	86 32       	cpi	r24, 0x26	; 38
    5190:	29 f0       	breq	.+10     	; 0x519c <testFHTEncoding()+0x10a>
    5192:	90 e0       	ldi	r25, 0x00	; 0
    5194:	63 e1       	ldi	r22, 0x13	; 19
    5196:	71 e0       	ldi	r23, 0x01	; 1
    5198:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(0 == commandDecoded.extension, commandDecoded.extension);
    519c:	88 85       	ldd	r24, Y+8	; 0x08
    519e:	88 23       	and	r24, r24
    51a0:	29 f0       	breq	.+10     	; 0x51ac <testFHTEncoding()+0x11a>
    51a2:	90 e0       	ldi	r25, 0x00	; 0
    51a4:	64 e1       	ldi	r22, 0x14	; 20
    51a6:	71 e0       	ldi	r23, 0x01	; 1
    51a8:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>

  // Encode shortest-possible (all-zero-bits) FHT8V command as 200us-bit-stream...
  command.hc1 = 0;
    51ac:	19 82       	std	Y+1, r1	; 0x01
  command.hc2 = 0;
    51ae:	1a 82       	std	Y+2, r1	; 0x02
#ifdef FHT8V_ADR_USED
  address = 0;
#endif
  command.command = 0;
    51b0:	1b 82       	std	Y+3, r1	; 0x03
  command.extension = 0;
    51b2:	1c 82       	std	Y+4, r1	; 0x04
  memset(buf, 0xff, sizeof(buf));
    51b4:	8e 01       	movw	r16, r28
    51b6:	07 5f       	subi	r16, 0xF7	; 247
    51b8:	1f 4f       	sbci	r17, 0xFF	; 255
    51ba:	c8 01       	movw	r24, r16
    51bc:	6f ef       	ldi	r22, 0xFF	; 255
    51be:	70 e0       	ldi	r23, 0x00	; 0
    51c0:	4c e3       	ldi	r20, 0x3C	; 60
    51c2:	50 e0       	ldi	r21, 0x00	; 0
    51c4:	0e 94 40 04 	call	0x880	; 0x880 <memset>
  result1 = FHT8VCreate200usBitStreamBptr(buf, &command);
    51c8:	c8 01       	movw	r24, r16
    51ca:	be 01       	movw	r22, r28
    51cc:	6f 5f       	subi	r22, 0xFF	; 255
    51ce:	7f 4f       	sbci	r23, 0xFF	; 255
    51d0:	0e 94 48 0b 	call	0x1690	; 0x1690 <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>
    51d4:	8c 01       	movw	r16, r24
  AssertIsTrueWithErr(((uint8_t)~0U) == *result1, *result1); // Check that result points at terminator value 0xff/~0.
    51d6:	fc 01       	movw	r30, r24
    51d8:	80 81       	ld	r24, Z
    51da:	8f 3f       	cpi	r24, 0xFF	; 255
    51dc:	29 f0       	breq	.+10     	; 0x51e8 <testFHTEncoding()+0x156>
    51de:	90 e0       	ldi	r25, 0x00	; 0
    51e0:	60 e2       	ldi	r22, 0x20	; 32
    51e2:	71 e0       	ldi	r23, 0x01	; 1
    51e4:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  //AssertIsTrue((result1 - buf < MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE), result1-buf); // Check not overflowing the buffer.
  AssertIsTrueWithErr((result1 - buf == 35), result1-buf); // Check correct length.
    51e8:	c8 01       	movw	r24, r16
    51ea:	8e 19       	sub	r24, r14
    51ec:	9f 09       	sbc	r25, r15
    51ee:	83 32       	cpi	r24, 0x23	; 35
    51f0:	91 05       	cpc	r25, r1
    51f2:	21 f0       	breq	.+8      	; 0x51fc <testFHTEncoding()+0x16a>
    51f4:	62 e2       	ldi	r22, 0x22	; 34
    51f6:	71 e0       	ldi	r23, 0x01	; 1
    51f8:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(((uint8_t)0xcc) == buf[0], buf[0]); // Check that result starts with FHT8V 0xcc preamble.
    51fc:	89 85       	ldd	r24, Y+9	; 0x09
    51fe:	8c 3c       	cpi	r24, 0xCC	; 204
    5200:	29 f0       	breq	.+10     	; 0x520c <testFHTEncoding()+0x17a>
    5202:	90 e0       	ldi	r25, 0x00	; 0
    5204:	63 e2       	ldi	r22, 0x23	; 35
    5206:	71 e0       	ldi	r23, 0x01	; 1
    5208:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  // Attempt to decode.
  AssertIsTrue(FHT8VDecodeBitStream(buf, buf + MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE - 1, &commandDecoded));
    520c:	ce 01       	movw	r24, r28
    520e:	09 96       	adiw	r24, 0x09	; 9
    5210:	be 01       	movw	r22, r28
    5212:	6a 5c       	subi	r22, 0xCA	; 202
    5214:	7f 4f       	sbci	r23, 0xFF	; 255
    5216:	ae 01       	movw	r20, r28
    5218:	4b 5f       	subi	r20, 0xFB	; 251
    521a:	5f 4f       	sbci	r21, 0xFF	; 255
    521c:	0e 94 b6 0c 	call	0x196c	; 0x196c <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)>
    5220:	89 2b       	or	r24, r25
    5222:	31 f4       	brne	.+12     	; 0x5230 <testFHTEncoding()+0x19e>
    5224:	80 e0       	ldi	r24, 0x00	; 0
    5226:	90 e0       	ldi	r25, 0x00	; 0
    5228:	65 e2       	ldi	r22, 0x25	; 37
    522a:	71 e0       	ldi	r23, 0x01	; 1
    522c:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(0 == commandDecoded.hc1, commandDecoded.hc1);
    5230:	8d 81       	ldd	r24, Y+5	; 0x05
    5232:	88 23       	and	r24, r24
    5234:	29 f0       	breq	.+10     	; 0x5240 <testFHTEncoding()+0x1ae>
    5236:	90 e0       	ldi	r25, 0x00	; 0
    5238:	66 e2       	ldi	r22, 0x26	; 38
    523a:	71 e0       	ldi	r23, 0x01	; 1
    523c:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(0 == commandDecoded.hc2, commandDecoded.hc2);
    5240:	8e 81       	ldd	r24, Y+6	; 0x06
    5242:	88 23       	and	r24, r24
    5244:	29 f0       	breq	.+10     	; 0x5250 <testFHTEncoding()+0x1be>
    5246:	90 e0       	ldi	r25, 0x00	; 0
    5248:	67 e2       	ldi	r22, 0x27	; 39
    524a:	71 e0       	ldi	r23, 0x01	; 1
    524c:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(0 == commandDecoded.command, commandDecoded.command);
    5250:	8f 81       	ldd	r24, Y+7	; 0x07
    5252:	88 23       	and	r24, r24
    5254:	29 f0       	breq	.+10     	; 0x5260 <testFHTEncoding()+0x1ce>
    5256:	90 e0       	ldi	r25, 0x00	; 0
    5258:	68 e2       	ldi	r22, 0x28	; 40
    525a:	71 e0       	ldi	r23, 0x01	; 1
    525c:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(0 == commandDecoded.extension, commandDecoded.extension);
    5260:	88 85       	ldd	r24, Y+8	; 0x08
    5262:	88 23       	and	r24, r24
    5264:	29 f0       	breq	.+10     	; 0x5270 <testFHTEncoding()+0x1de>
    5266:	90 e0       	ldi	r25, 0x00	; 0
    5268:	69 e2       	ldi	r22, 0x29	; 41
    526a:	71 e0       	ldi	r23, 0x01	; 1
    526c:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>

  // Encode longest-possible (as many 1-bits as possible) FHT8V command as 200us-bit-stream...
  command.hc1 = 0xff;
    5270:	8f ef       	ldi	r24, 0xFF	; 255
    5272:	89 83       	std	Y+1, r24	; 0x01
  command.hc2 = 0xff;
    5274:	8a 83       	std	Y+2, r24	; 0x02
#ifdef FHT8V_ADR_USED
  address = 0xff;
#endif
  command.command = 0xff;
    5276:	8b 83       	std	Y+3, r24	; 0x03
  command.extension = 0xff;
    5278:	8c 83       	std	Y+4, r24	; 0x04
  memset(buf, 0xff, sizeof(buf));
    527a:	8e 01       	movw	r16, r28
    527c:	07 5f       	subi	r16, 0xF7	; 247
    527e:	1f 4f       	sbci	r17, 0xFF	; 255
    5280:	c8 01       	movw	r24, r16
    5282:	6f ef       	ldi	r22, 0xFF	; 255
    5284:	70 e0       	ldi	r23, 0x00	; 0
    5286:	4c e3       	ldi	r20, 0x3C	; 60
    5288:	50 e0       	ldi	r21, 0x00	; 0
    528a:	0e 94 40 04 	call	0x880	; 0x880 <memset>
  result1 = FHT8VCreate200usBitStreamBptr(buf, &command);
    528e:	c8 01       	movw	r24, r16
    5290:	be 01       	movw	r22, r28
    5292:	6f 5f       	subi	r22, 0xFF	; 255
    5294:	7f 4f       	sbci	r23, 0xFF	; 255
    5296:	0e 94 48 0b 	call	0x1690	; 0x1690 <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>
    529a:	8c 01       	movw	r16, r24
  AssertIsTrueWithErr(((uint8_t)~0U) == *result1, *result1); // Check that result points at terminator value 0xff/~0.
    529c:	fc 01       	movw	r30, r24
    529e:	80 81       	ld	r24, Z
    52a0:	8f 3f       	cpi	r24, 0xFF	; 255
    52a2:	29 f0       	breq	.+10     	; 0x52ae <testFHTEncoding()+0x21c>
    52a4:	90 e0       	ldi	r25, 0x00	; 0
    52a6:	65 e3       	ldi	r22, 0x35	; 53
    52a8:	71 e0       	ldi	r23, 0x01	; 1
    52aa:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr((result1 - buf < MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE), result1-buf); // Check not overflowing the buffer.
    52ae:	c8 01       	movw	r24, r16
    52b0:	8e 19       	sub	r24, r14
    52b2:	9f 09       	sbc	r25, r15
    52b4:	8e 32       	cpi	r24, 0x2E	; 46
    52b6:	91 05       	cpc	r25, r1
    52b8:	24 f0       	brlt	.+8      	; 0x52c2 <testFHTEncoding()+0x230>
    52ba:	66 e3       	ldi	r22, 0x36	; 54
    52bc:	71 e0       	ldi	r23, 0x01	; 1
    52be:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(((uint8_t)0xcc) == buf[0], buf[0]); // Check that result starts with FHT8V 0xcc preamble.
    52c2:	89 85       	ldd	r24, Y+9	; 0x09
    52c4:	8c 3c       	cpi	r24, 0xCC	; 204
    52c6:	29 f0       	breq	.+10     	; 0x52d2 <testFHTEncoding()+0x240>
    52c8:	90 e0       	ldi	r25, 0x00	; 0
    52ca:	67 e3       	ldi	r22, 0x37	; 55
    52cc:	71 e0       	ldi	r23, 0x01	; 1
    52ce:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  // Attempt to decode.
  AssertIsTrue(FHT8VDecodeBitStream(buf, buf + MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE - 1, &commandDecoded));
    52d2:	ce 01       	movw	r24, r28
    52d4:	09 96       	adiw	r24, 0x09	; 9
    52d6:	be 01       	movw	r22, r28
    52d8:	6a 5c       	subi	r22, 0xCA	; 202
    52da:	7f 4f       	sbci	r23, 0xFF	; 255
    52dc:	ae 01       	movw	r20, r28
    52de:	4b 5f       	subi	r20, 0xFB	; 251
    52e0:	5f 4f       	sbci	r21, 0xFF	; 255
    52e2:	0e 94 b6 0c 	call	0x196c	; 0x196c <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)>
    52e6:	89 2b       	or	r24, r25
    52e8:	31 f4       	brne	.+12     	; 0x52f6 <testFHTEncoding()+0x264>
    52ea:	80 e0       	ldi	r24, 0x00	; 0
    52ec:	90 e0       	ldi	r25, 0x00	; 0
    52ee:	69 e3       	ldi	r22, 0x39	; 57
    52f0:	71 e0       	ldi	r23, 0x01	; 1
    52f2:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(0xff == commandDecoded.hc1, commandDecoded.hc1);
    52f6:	8d 81       	ldd	r24, Y+5	; 0x05
    52f8:	8f 3f       	cpi	r24, 0xFF	; 255
    52fa:	29 f0       	breq	.+10     	; 0x5306 <testFHTEncoding()+0x274>
    52fc:	90 e0       	ldi	r25, 0x00	; 0
    52fe:	6a e3       	ldi	r22, 0x3A	; 58
    5300:	71 e0       	ldi	r23, 0x01	; 1
    5302:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(0xff == commandDecoded.hc2, commandDecoded.hc2);
    5306:	8e 81       	ldd	r24, Y+6	; 0x06
    5308:	8f 3f       	cpi	r24, 0xFF	; 255
    530a:	29 f0       	breq	.+10     	; 0x5316 <testFHTEncoding()+0x284>
    530c:	90 e0       	ldi	r25, 0x00	; 0
    530e:	6b e3       	ldi	r22, 0x3B	; 59
    5310:	71 e0       	ldi	r23, 0x01	; 1
    5312:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
#ifdef FHT8V_ADR_USED
  AssertIsTrueWithErr(0xff == commandDecoded.address, commandDecoded.address);
#endif
  AssertIsTrueWithErr(0xff == commandDecoded.command, commandDecoded.command);
    5316:	8f 81       	ldd	r24, Y+7	; 0x07
    5318:	8f 3f       	cpi	r24, 0xFF	; 255
    531a:	29 f0       	breq	.+10     	; 0x5326 <testFHTEncoding()+0x294>
    531c:	90 e0       	ldi	r25, 0x00	; 0
    531e:	6f e3       	ldi	r22, 0x3F	; 63
    5320:	71 e0       	ldi	r23, 0x01	; 1
    5322:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(0xff == commandDecoded.extension, commandDecoded.extension);
    5326:	88 85       	ldd	r24, Y+8	; 0x08
    5328:	8f 3f       	cpi	r24, 0xFF	; 255
    532a:	29 f0       	breq	.+10     	; 0x5336 <testFHTEncoding()+0x2a4>
    532c:	90 e0       	ldi	r25, 0x00	; 0
    532e:	60 e4       	ldi	r22, 0x40	; 64
    5330:	71 e0       	ldi	r23, 0x01	; 1
    5332:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  }
    5336:	cc 5b       	subi	r28, 0xBC	; 188
    5338:	df 4f       	sbci	r29, 0xFF	; 255
    533a:	0f b6       	in	r0, 0x3f	; 63
    533c:	f8 94       	cli
    533e:	de bf       	out	0x3e, r29	; 62
    5340:	0f be       	out	0x3f, r0	; 63
    5342:	cd bf       	out	0x3d, r28	; 61
    5344:	cf 91       	pop	r28
    5346:	df 91       	pop	r29
    5348:	1f 91       	pop	r17
    534a:	0f 91       	pop	r16
    534c:	ff 90       	pop	r15
    534e:	ef 90       	pop	r14
    5350:	08 95       	ret

00005352 <testFHTEncodingHeadAndTail()>:

// Test of heat and tail of FHT8V bitstream encoding and decoding.
static void testFHTEncodingHeadAndTail()
    5352:	4f 92       	push	r4
    5354:	5f 92       	push	r5
    5356:	6f 92       	push	r6
    5358:	7f 92       	push	r7
    535a:	8f 92       	push	r8
    535c:	9f 92       	push	r9
    535e:	af 92       	push	r10
    5360:	bf 92       	push	r11
    5362:	cf 92       	push	r12
    5364:	df 92       	push	r13
    5366:	ef 92       	push	r14
    5368:	ff 92       	push	r15
    536a:	0f 93       	push	r16
    536c:	1f 93       	push	r17
    536e:	df 93       	push	r29
    5370:	cf 93       	push	r28
    5372:	cd b7       	in	r28, 0x3d	; 61
    5374:	de b7       	in	r29, 0x3e	; 62
    5376:	c2 55       	subi	r28, 0x52	; 82
    5378:	d0 40       	sbci	r29, 0x00	; 0
    537a:	0f b6       	in	r0, 0x3f	; 63
    537c:	f8 94       	cli
    537e:	de bf       	out	0x3e, r29	; 62
    5380:	0f be       	out	0x3f, r0	; 63
    5382:	cd bf       	out	0x3d, r28	; 61
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testFHTEncodingHeadAndTail");
    5384:	81 e0       	ldi	r24, 0x01	; 1
    5386:	95 e0       	ldi	r25, 0x05	; 5
    5388:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <serialPrintlnAndFlush(__FlashStringHelper const*)>
  uint8_t buf[FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE];
  fht8v_msg_t command; // For encoding.
  fht8v_msg_t commandDecoded; // For decoding.

  // Encode a basic message to set a valve to 0%, without headers or trailers.
  command.hc1 = 13;
    538c:	8d e0       	ldi	r24, 0x0D	; 13
    538e:	89 83       	std	Y+1, r24	; 0x01
  command.hc2 = 73;
    5390:	89 e4       	ldi	r24, 0x49	; 73
    5392:	8a 83       	std	Y+2, r24	; 0x02
#ifdef FHT8V_ADR_USED
  address = 0;
#endif
  memset(buf, 0xff, sizeof(buf));
    5394:	8e 01       	movw	r16, r28
    5396:	09 5e       	subi	r16, 0xE9	; 233
    5398:	1f 4f       	sbci	r17, 0xFF	; 255
    539a:	c8 01       	movw	r24, r16
    539c:	6f ef       	ldi	r22, 0xFF	; 255
    539e:	70 e0       	ldi	r23, 0x00	; 0
    53a0:	4c e3       	ldi	r20, 0x3C	; 60
    53a2:	50 e0       	ldi	r21, 0x00	; 0
    53a4:	0e 94 40 04 	call	0x880	; 0x880 <memset>
  uint8_t *result1 = FHT8VCreateValveSetCmdFrameHT_r(buf, false, &command, 0, NULL);
    53a8:	c8 01       	movw	r24, r16
    53aa:	60 e0       	ldi	r22, 0x00	; 0
    53ac:	ae 01       	movw	r20, r28
    53ae:	4f 5f       	subi	r20, 0xFF	; 255
    53b0:	5f 4f       	sbci	r21, 0xFF	; 255
    53b2:	20 e0       	ldi	r18, 0x00	; 0
    53b4:	00 e0       	ldi	r16, 0x00	; 0
    53b6:	10 e0       	ldi	r17, 0x00	; 0
    53b8:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)>
    53bc:	8c 01       	movw	r16, r24
  AssertIsTrueWithErr(((uint8_t)~0U) == *result1, *result1); // Check that result points at terminator value 0xff/~0.
    53be:	fc 01       	movw	r30, r24
    53c0:	80 81       	ld	r24, Z
    53c2:	8f 3f       	cpi	r24, 0xFF	; 255
    53c4:	29 f0       	breq	.+10     	; 0x53d0 <testFHTEncodingHeadAndTail()+0x7e>
    53c6:	90 e0       	ldi	r25, 0x00	; 0
    53c8:	6e e5       	ldi	r22, 0x5E	; 94
    53ca:	71 e0       	ldi	r23, 0x01	; 1
    53cc:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  //AssertIsTrue((result1 - buf < MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE), result1-buf); // Check not overflowing the buffer.
  AssertIsTrueWithErr((result1 - buf == 38), result1-buf); // Check correct length: 38-byte body.
    53d0:	97 e1       	ldi	r25, 0x17	; 23
    53d2:	49 2e       	mov	r4, r25
    53d4:	51 2c       	mov	r5, r1
    53d6:	4c 0e       	add	r4, r28
    53d8:	5d 1e       	adc	r5, r29
    53da:	c8 01       	movw	r24, r16
    53dc:	84 19       	sub	r24, r4
    53de:	95 09       	sbc	r25, r5
    53e0:	86 32       	cpi	r24, 0x26	; 38
    53e2:	91 05       	cpc	r25, r1
    53e4:	21 f0       	breq	.+8      	; 0x53ee <testFHTEncodingHeadAndTail()+0x9c>
    53e6:	60 e6       	ldi	r22, 0x60	; 96
    53e8:	71 e0       	ldi	r23, 0x01	; 1
    53ea:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(((uint8_t)0xcc) == buf[0], buf[0]); // Check that result starts with FHT8V 0xcc preamble.
    53ee:	8f 89       	ldd	r24, Y+23	; 0x17
    53f0:	8c 3c       	cpi	r24, 0xCC	; 204
    53f2:	29 f0       	breq	.+10     	; 0x53fe <testFHTEncodingHeadAndTail()+0xac>
    53f4:	90 e0       	ldi	r25, 0x00	; 0
    53f6:	61 e6       	ldi	r22, 0x61	; 97
    53f8:	71 e0       	ldi	r23, 0x01	; 1
    53fa:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(((uint8_t)0xe3) == buf[6], buf[6]); // Check end of preamble.
    53fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5400:	83 3e       	cpi	r24, 0xE3	; 227
    5402:	29 f0       	breq	.+10     	; 0x540e <testFHTEncodingHeadAndTail()+0xbc>
    5404:	90 e0       	ldi	r25, 0x00	; 0
    5406:	62 e6       	ldi	r22, 0x62	; 98
    5408:	71 e0       	ldi	r23, 0x01	; 1
    540a:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(((uint8_t)0xce) == buf[34], buf[34]); // Check part of checksum.
    540e:	89 ad       	ldd	r24, Y+57	; 0x39
    5410:	8e 3c       	cpi	r24, 0xCE	; 206
    5412:	29 f0       	breq	.+10     	; 0x541e <testFHTEncodingHeadAndTail()+0xcc>
    5414:	90 e0       	ldi	r25, 0x00	; 0
    5416:	63 e6       	ldi	r22, 0x63	; 99
    5418:	71 e0       	ldi	r23, 0x01	; 1
    541a:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  // Attempt to decode.
  AssertIsTrue(FHT8VDecodeBitStream(buf, buf + MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE - 1, &commandDecoded));
    541e:	be 01       	movw	r22, r28
    5420:	69 5e       	subi	r22, 0xE9	; 233
    5422:	7f 4f       	sbci	r23, 0xFF	; 255
    5424:	cb 01       	movw	r24, r22
    5426:	63 5d       	subi	r22, 0xD3	; 211
    5428:	7f 4f       	sbci	r23, 0xFF	; 255
    542a:	ae 01       	movw	r20, r28
    542c:	4b 5f       	subi	r20, 0xFB	; 251
    542e:	5f 4f       	sbci	r21, 0xFF	; 255
    5430:	0e 94 b6 0c 	call	0x196c	; 0x196c <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)>
    5434:	89 2b       	or	r24, r25
    5436:	31 f4       	brne	.+12     	; 0x5444 <testFHTEncodingHeadAndTail()+0xf2>
    5438:	80 e0       	ldi	r24, 0x00	; 0
    543a:	90 e0       	ldi	r25, 0x00	; 0
    543c:	65 e6       	ldi	r22, 0x65	; 101
    543e:	71 e0       	ldi	r23, 0x01	; 1
    5440:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(13 == commandDecoded.hc1, commandDecoded.hc1);
    5444:	8d 81       	ldd	r24, Y+5	; 0x05
    5446:	8d 30       	cpi	r24, 0x0D	; 13
    5448:	29 f0       	breq	.+10     	; 0x5454 <testFHTEncodingHeadAndTail()+0x102>
    544a:	90 e0       	ldi	r25, 0x00	; 0
    544c:	66 e6       	ldi	r22, 0x66	; 102
    544e:	71 e0       	ldi	r23, 0x01	; 1
    5450:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(73 == commandDecoded.hc2, commandDecoded.hc2);
    5454:	8e 81       	ldd	r24, Y+6	; 0x06
    5456:	89 34       	cpi	r24, 0x49	; 73
    5458:	29 f0       	breq	.+10     	; 0x5464 <testFHTEncodingHeadAndTail()+0x112>
    545a:	90 e0       	ldi	r25, 0x00	; 0
    545c:	67 e6       	ldi	r22, 0x67	; 103
    545e:	71 e0       	ldi	r23, 0x01	; 1
    5460:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(0x26 == commandDecoded.command, commandDecoded.command);
    5464:	8f 81       	ldd	r24, Y+7	; 0x07
    5466:	86 32       	cpi	r24, 0x26	; 38
    5468:	29 f0       	breq	.+10     	; 0x5474 <testFHTEncodingHeadAndTail()+0x122>
    546a:	90 e0       	ldi	r25, 0x00	; 0
    546c:	68 e6       	ldi	r22, 0x68	; 104
    546e:	71 e0       	ldi	r23, 0x01	; 1
    5470:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(0 == commandDecoded.extension, commandDecoded.extension);
    5474:	88 85       	ldd	r24, Y+8	; 0x08
    5476:	88 23       	and	r24, r24
    5478:	29 f0       	breq	.+10     	; 0x5484 <testFHTEncodingHeadAndTail()+0x132>
    547a:	90 e0       	ldi	r25, 0x00	; 0
    547c:	69 e6       	ldi	r22, 0x69	; 105
    547e:	71 e0       	ldi	r23, 0x01	; 1
    5480:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  // Verify that trailer NOT present.
  AssertIsTrue(!verifyHeaderAndCRCForTrailingMinimalStatsPayload(result1));
    5484:	c8 01       	movw	r24, r16
    5486:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <verifyHeaderAndCRCForTrailingMinimalStatsPayload(unsigned char const*)>
    548a:	88 23       	and	r24, r24
    548c:	31 f0       	breq	.+12     	; 0x549a <testFHTEncodingHeadAndTail()+0x148>
    548e:	80 e0       	ldi	r24, 0x00	; 0
    5490:	90 e0       	ldi	r25, 0x00	; 0
    5492:	6b e6       	ldi	r22, 0x6B	; 107
    5494:	71 e0       	ldi	r23, 0x01	; 1
    5496:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>

 // Encode a basic message to set a valve to 0%, with header but without trailer.
  command.hc1 = 13;
    549a:	8d e0       	ldi	r24, 0x0D	; 13
    549c:	89 83       	std	Y+1, r24	; 0x01
  command.hc2 = 73;
    549e:	89 e4       	ldi	r24, 0x49	; 73
    54a0:	8a 83       	std	Y+2, r24	; 0x02
#ifdef FHT8V_ADR_USED
  address = 0;
#endif
  memset(buf, 0xff, sizeof(buf));
    54a2:	8e 01       	movw	r16, r28
    54a4:	09 5e       	subi	r16, 0xE9	; 233
    54a6:	1f 4f       	sbci	r17, 0xFF	; 255
    54a8:	c8 01       	movw	r24, r16
    54aa:	6f ef       	ldi	r22, 0xFF	; 255
    54ac:	70 e0       	ldi	r23, 0x00	; 0
    54ae:	4c e3       	ldi	r20, 0x3C	; 60
    54b0:	50 e0       	ldi	r21, 0x00	; 0
    54b2:	0e 94 40 04 	call	0x880	; 0x880 <memset>
  result1 = FHT8VCreateValveSetCmdFrameHT_r(buf, true, &command, 0, NULL);
    54b6:	c8 01       	movw	r24, r16
    54b8:	61 e0       	ldi	r22, 0x01	; 1
    54ba:	ae 01       	movw	r20, r28
    54bc:	4f 5f       	subi	r20, 0xFF	; 255
    54be:	5f 4f       	sbci	r21, 0xFF	; 255
    54c0:	20 e0       	ldi	r18, 0x00	; 0
    54c2:	00 e0       	ldi	r16, 0x00	; 0
    54c4:	10 e0       	ldi	r17, 0x00	; 0
    54c6:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)>
    54ca:	8c 01       	movw	r16, r24
  AssertIsTrueWithErr(((uint8_t)~0U) == *result1, *result1); // Check that result points at terminator value 0xff/~0.
    54cc:	fc 01       	movw	r30, r24
    54ce:	80 81       	ld	r24, Z
    54d0:	8f 3f       	cpi	r24, 0xFF	; 255
    54d2:	29 f0       	breq	.+10     	; 0x54de <testFHTEncodingHeadAndTail()+0x18c>
    54d4:	90 e0       	ldi	r25, 0x00	; 0
    54d6:	65 e7       	ldi	r22, 0x75	; 117
    54d8:	71 e0       	ldi	r23, 0x01	; 1
    54da:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  //AssertIsTrue((result1 - buf < MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE), result1-buf); // Check not overflowing the buffer.
  AssertIsTrueWithErr((result1 - buf == RFM22_PREAMBLE_BYTES + 38), result1-buf); // Check correct length: preamble + 38-byte body.
    54de:	c8 01       	movw	r24, r16
    54e0:	84 19       	sub	r24, r4
    54e2:	95 09       	sbc	r25, r5
    54e4:	8b 32       	cpi	r24, 0x2B	; 43
    54e6:	91 05       	cpc	r25, r1
    54e8:	21 f0       	breq	.+8      	; 0x54f2 <testFHTEncodingHeadAndTail()+0x1a0>
    54ea:	67 e7       	ldi	r22, 0x77	; 119
    54ec:	71 e0       	ldi	r23, 0x01	; 1
    54ee:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(((uint8_t)0xaa) == buf[0], buf[0]); // Check that result starts with FHT8V 0xcc preamble.
    54f2:	8f 89       	ldd	r24, Y+23	; 0x17
    54f4:	8a 3a       	cpi	r24, 0xAA	; 170
    54f6:	29 f0       	breq	.+10     	; 0x5502 <testFHTEncodingHeadAndTail()+0x1b0>
    54f8:	90 e0       	ldi	r25, 0x00	; 0
    54fa:	68 e7       	ldi	r22, 0x78	; 120
    54fc:	71 e0       	ldi	r23, 0x01	; 1
    54fe:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(((uint8_t)0xcc) == buf[RFM22_PREAMBLE_BYTES], buf[RFM22_PREAMBLE_BYTES]); // Check that result starts with FHT8V 0xcc preamble.
    5502:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5504:	8c 3c       	cpi	r24, 0xCC	; 204
    5506:	29 f0       	breq	.+10     	; 0x5512 <testFHTEncodingHeadAndTail()+0x1c0>
    5508:	90 e0       	ldi	r25, 0x00	; 0
    550a:	69 e7       	ldi	r22, 0x79	; 121
    550c:	71 e0       	ldi	r23, 0x01	; 1
    550e:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(((uint8_t)0xe3) == buf[6+RFM22_PREAMBLE_BYTES], buf[6+RFM22_PREAMBLE_BYTES]); // Check end of preamble.
    5512:	8a a1       	ldd	r24, Y+34	; 0x22
    5514:	83 3e       	cpi	r24, 0xE3	; 227
    5516:	29 f0       	breq	.+10     	; 0x5522 <testFHTEncodingHeadAndTail()+0x1d0>
    5518:	90 e0       	ldi	r25, 0x00	; 0
    551a:	6a e7       	ldi	r22, 0x7A	; 122
    551c:	71 e0       	ldi	r23, 0x01	; 1
    551e:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(((uint8_t)0xce) == buf[34+RFM22_PREAMBLE_BYTES], buf[34+RFM22_PREAMBLE_BYTES]); // Check part of checksum.
    5522:	8e ad       	ldd	r24, Y+62	; 0x3e
    5524:	8e 3c       	cpi	r24, 0xCE	; 206
    5526:	29 f0       	breq	.+10     	; 0x5532 <testFHTEncodingHeadAndTail()+0x1e0>
    5528:	90 e0       	ldi	r25, 0x00	; 0
    552a:	6b e7       	ldi	r22, 0x7B	; 123
    552c:	71 e0       	ldi	r23, 0x01	; 1
    552e:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  // Attempt to decode.
  AssertIsTrue(FHT8VDecodeBitStream(buf + RFM22_PREAMBLE_BYTES, buf + MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE - 1, &commandDecoded));
    5532:	ce 01       	movw	r24, r28
    5534:	4c 96       	adiw	r24, 0x1c	; 28
    5536:	be 01       	movw	r22, r28
    5538:	6c 5b       	subi	r22, 0xBC	; 188
    553a:	7f 4f       	sbci	r23, 0xFF	; 255
    553c:	ae 01       	movw	r20, r28
    553e:	4b 5f       	subi	r20, 0xFB	; 251
    5540:	5f 4f       	sbci	r21, 0xFF	; 255
    5542:	0e 94 b6 0c 	call	0x196c	; 0x196c <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)>
    5546:	89 2b       	or	r24, r25
    5548:	31 f4       	brne	.+12     	; 0x5556 <testFHTEncodingHeadAndTail()+0x204>
    554a:	80 e0       	ldi	r24, 0x00	; 0
    554c:	90 e0       	ldi	r25, 0x00	; 0
    554e:	6d e7       	ldi	r22, 0x7D	; 125
    5550:	71 e0       	ldi	r23, 0x01	; 1
    5552:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(13 == commandDecoded.hc1, commandDecoded.hc1);
    5556:	8d 81       	ldd	r24, Y+5	; 0x05
    5558:	8d 30       	cpi	r24, 0x0D	; 13
    555a:	29 f0       	breq	.+10     	; 0x5566 <testFHTEncodingHeadAndTail()+0x214>
    555c:	90 e0       	ldi	r25, 0x00	; 0
    555e:	6e e7       	ldi	r22, 0x7E	; 126
    5560:	71 e0       	ldi	r23, 0x01	; 1
    5562:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(73 == commandDecoded.hc2, commandDecoded.hc2);
    5566:	8e 81       	ldd	r24, Y+6	; 0x06
    5568:	89 34       	cpi	r24, 0x49	; 73
    556a:	29 f0       	breq	.+10     	; 0x5576 <testFHTEncodingHeadAndTail()+0x224>
    556c:	90 e0       	ldi	r25, 0x00	; 0
    556e:	6f e7       	ldi	r22, 0x7F	; 127
    5570:	71 e0       	ldi	r23, 0x01	; 1
    5572:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(0x26 == commandDecoded.command, commandDecoded.command);
    5576:	8f 81       	ldd	r24, Y+7	; 0x07
    5578:	86 32       	cpi	r24, 0x26	; 38
    557a:	29 f0       	breq	.+10     	; 0x5586 <testFHTEncodingHeadAndTail()+0x234>
    557c:	90 e0       	ldi	r25, 0x00	; 0
    557e:	60 e8       	ldi	r22, 0x80	; 128
    5580:	71 e0       	ldi	r23, 0x01	; 1
    5582:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(0 == commandDecoded.extension, commandDecoded.extension);
    5586:	88 85       	ldd	r24, Y+8	; 0x08
    5588:	88 23       	and	r24, r24
    558a:	29 f0       	breq	.+10     	; 0x5596 <testFHTEncodingHeadAndTail()+0x244>
    558c:	90 e0       	ldi	r25, 0x00	; 0
    558e:	61 e8       	ldi	r22, 0x81	; 129
    5590:	71 e0       	ldi	r23, 0x01	; 1
    5592:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  // Verify that trailer NOT present.
  AssertIsTrue(!verifyHeaderAndCRCForTrailingMinimalStatsPayload(result1));
    5596:	c8 01       	movw	r24, r16
    5598:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <verifyHeaderAndCRCForTrailingMinimalStatsPayload(unsigned char const*)>
    559c:	88 23       	and	r24, r24
    559e:	31 f0       	breq	.+12     	; 0x55ac <testFHTEncodingHeadAndTail()+0x25a>
    55a0:	80 e0       	ldi	r24, 0x00	; 0
    55a2:	90 e0       	ldi	r25, 0x00	; 0
    55a4:	63 e8       	ldi	r22, 0x83	; 131
    55a6:	71 e0       	ldi	r23, 0x01	; 1
    55a8:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>

  // Encode a basic message to set a valve to 0%, with header and trailer.
  command.hc1 = 13;
    55ac:	8d e0       	ldi	r24, 0x0D	; 13
    55ae:	89 83       	std	Y+1, r24	; 0x01
  command.hc2 = 73;
    55b0:	89 e4       	ldi	r24, 0x49	; 73
    55b2:	8a 83       	std	Y+2, r24	; 0x02
    55b4:	89 e0       	ldi	r24, 0x09	; 9
    55b6:	e8 2e       	mov	r14, r24
    55b8:	f1 2c       	mov	r15, r1
    55ba:	ec 0e       	add	r14, r28
    55bc:	fd 1e       	adc	r15, r29
    55be:	87 e0       	ldi	r24, 0x07	; 7
    55c0:	f7 01       	movw	r30, r14
    55c2:	11 92       	st	Z+, r1
    55c4:	8a 95       	dec	r24
    55c6:	e9 f7       	brne	.-6      	; 0x55c2 <testFHTEncodingHeadAndTail()+0x270>
#ifdef FHT8V_ADR_USED
  address = 0;
#endif
  FullStatsMessageCore_t fullStats;
  clearFullStatsMessageCore(&fullStats);
  captureEntropy1(); // Try stir a little noise into the PRNG before using it.
    55c8:	0e 94 17 18 	call	0x302e	; 0x302e <captureEntropy1()>
  const bool powerLow = !(randRNG8() & 0x40); // Random value.
    55cc:	0e 94 9e 19 	call	0x333c	; 0x333c <randRNG8()>
    55d0:	b8 2e       	mov	r11, r24
    55d2:	b2 94       	swap	r11
    55d4:	b6 94       	lsr	r11
    55d6:	b6 94       	lsr	r11
    55d8:	03 e0       	ldi	r16, 0x03	; 3
    55da:	b0 22       	and	r11, r16
    55dc:	b0 94       	com	r11
    55de:	f1 e0       	ldi	r31, 0x01	; 1
    55e0:	bf 22       	and	r11, r31
  fullStats.containsTempAndPower = true;
    55e2:	89 85       	ldd	r24, Y+9	; 0x09
    55e4:	82 60       	ori	r24, 0x02	; 2
    55e6:	89 87       	std	Y+9, r24	; 0x09
  fullStats.tempAndPower.powerLow = powerLow;
    55e8:	9b 2d       	mov	r25, r11
    55ea:	97 95       	ror	r25
    55ec:	99 27       	eor	r25, r25
    55ee:	97 95       	ror	r25
    55f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    55f2:	8f 77       	andi	r24, 0x7F	; 127
    55f4:	89 2b       	or	r24, r25
    55f6:	8d 87       	std	Y+13, r24	; 0x0d
  const int tempC16 = (randRNG8()&0xff) + (10 << 16); // Random value in range [10C, 25C[.
    55f8:	0e 94 9e 19 	call	0x333c	; 0x333c <randRNG8()>
    55fc:	88 2e       	mov	r8, r24
    55fe:	99 24       	eor	r9, r9
  fullStats.tempAndPower.tempC16 = tempC16;
    5600:	8c 87       	std	Y+12, r24	; 0x0c
    5602:	8d 85       	ldd	r24, Y+13	; 0x0d
    5604:	80 78       	andi	r24, 0x80	; 128
    5606:	8d 87       	std	Y+13, r24	; 0x0d
  memset(buf, 0xff, sizeof(buf));
    5608:	8e 01       	movw	r16, r28
    560a:	09 5e       	subi	r16, 0xE9	; 233
    560c:	1f 4f       	sbci	r17, 0xFF	; 255
    560e:	c8 01       	movw	r24, r16
    5610:	6f ef       	ldi	r22, 0xFF	; 255
    5612:	70 e0       	ldi	r23, 0x00	; 0
    5614:	4c e3       	ldi	r20, 0x3C	; 60
    5616:	50 e0       	ldi	r21, 0x00	; 0
    5618:	0e 94 40 04 	call	0x880	; 0x880 <memset>
  result1 = FHT8VCreateValveSetCmdFrameHT_r(buf, true, &command, 0, &fullStats);
    561c:	c8 01       	movw	r24, r16
    561e:	61 e0       	ldi	r22, 0x01	; 1
    5620:	ae 01       	movw	r20, r28
    5622:	4f 5f       	subi	r20, 0xFF	; 255
    5624:	5f 4f       	sbci	r21, 0xFF	; 255
    5626:	20 e0       	ldi	r18, 0x00	; 0
    5628:	87 01       	movw	r16, r14
    562a:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)>
    562e:	8c 01       	movw	r16, r24
  AssertIsTrueWithErr(((uint8_t)~0U) == *result1, *result1); // Check that result points at terminator value 0xff/~0.
    5630:	fc 01       	movw	r30, r24
    5632:	80 81       	ld	r24, Z
    5634:	8f 3f       	cpi	r24, 0xFF	; 255
    5636:	29 f0       	breq	.+10     	; 0x5642 <testFHTEncodingHeadAndTail()+0x2f0>
    5638:	90 e0       	ldi	r25, 0x00	; 0
    563a:	65 e9       	ldi	r22, 0x95	; 149
    563c:	71 e0       	ldi	r23, 0x01	; 1
    563e:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  //AssertIsTrue((result1 - buf < MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE), result1-buf); // Check not overflowing the buffer.
#if defined(ALLOW_MINIMAL_STATS_TXRX)
  AssertIsTrueWithErr((result1 - buf == 41 + RFM22_PREAMBLE_BYTES), result1-buf); // Check correct length:prepamble + 38-byte body + 3 byte trailer.
#else // Expect longer encoding in this case...
  AssertIsTrueWithErr((result1 - buf == 43 + RFM22_PREAMBLE_BYTES), result1-buf); // Check correct length:prepamble + 38-byte body + 5ww33 byte trailer.
    5642:	c8 01       	movw	r24, r16
    5644:	84 19       	sub	r24, r4
    5646:	95 09       	sbc	r25, r5
    5648:	80 33       	cpi	r24, 0x30	; 48
    564a:	91 05       	cpc	r25, r1
    564c:	21 f0       	breq	.+8      	; 0x5656 <testFHTEncodingHeadAndTail()+0x304>
    564e:	6a e9       	ldi	r22, 0x9A	; 154
    5650:	71 e0       	ldi	r23, 0x01	; 1
    5652:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
#endif
  AssertIsTrueWithErr(((uint8_t)0xaa) == buf[0], buf[0]); // Check that result starts with FHT8V 0xcc preamble.
    5656:	8f 89       	ldd	r24, Y+23	; 0x17
    5658:	8a 3a       	cpi	r24, 0xAA	; 170
    565a:	29 f0       	breq	.+10     	; 0x5666 <testFHTEncodingHeadAndTail()+0x314>
    565c:	90 e0       	ldi	r25, 0x00	; 0
    565e:	6c e9       	ldi	r22, 0x9C	; 156
    5660:	71 e0       	ldi	r23, 0x01	; 1
    5662:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(((uint8_t)0xcc) == buf[RFM22_PREAMBLE_BYTES], buf[RFM22_PREAMBLE_BYTES]); // Check that result starts with FHT8V 0xcc preamble.
    5666:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5668:	8c 3c       	cpi	r24, 0xCC	; 204
    566a:	29 f0       	breq	.+10     	; 0x5676 <testFHTEncodingHeadAndTail()+0x324>
    566c:	90 e0       	ldi	r25, 0x00	; 0
    566e:	6d e9       	ldi	r22, 0x9D	; 157
    5670:	71 e0       	ldi	r23, 0x01	; 1
    5672:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(((uint8_t)0xe3) == buf[6+RFM22_PREAMBLE_BYTES], buf[6+RFM22_PREAMBLE_BYTES]); // Check end of preamble.
    5676:	8a a1       	ldd	r24, Y+34	; 0x22
    5678:	83 3e       	cpi	r24, 0xE3	; 227
    567a:	29 f0       	breq	.+10     	; 0x5686 <testFHTEncodingHeadAndTail()+0x334>
    567c:	90 e0       	ldi	r25, 0x00	; 0
    567e:	6e e9       	ldi	r22, 0x9E	; 158
    5680:	71 e0       	ldi	r23, 0x01	; 1
    5682:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(((uint8_t)0xce) == buf[34+RFM22_PREAMBLE_BYTES], buf[34+RFM22_PREAMBLE_BYTES]); // Check part of checksum.
    5686:	8e ad       	ldd	r24, Y+62	; 0x3e
    5688:	8e 3c       	cpi	r24, 0xCE	; 206
    568a:	29 f0       	breq	.+10     	; 0x5696 <testFHTEncodingHeadAndTail()+0x344>
    568c:	90 e0       	ldi	r25, 0x00	; 0
    568e:	6f e9       	ldi	r22, 0x9F	; 159
    5690:	71 e0       	ldi	r23, 0x01	; 1
    5692:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  // Attempt to decode.
  const uint8_t *afterBody = FHT8VDecodeBitStream(buf + RFM22_PREAMBLE_BYTES, buf + MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE - 1, &commandDecoded);
    5696:	ce 01       	movw	r24, r28
    5698:	4c 96       	adiw	r24, 0x1c	; 28
    569a:	be 01       	movw	r22, r28
    569c:	6c 5b       	subi	r22, 0xBC	; 188
    569e:	7f 4f       	sbci	r23, 0xFF	; 255
    56a0:	ae 01       	movw	r20, r28
    56a2:	4b 5f       	subi	r20, 0xFB	; 251
    56a4:	5f 4f       	sbci	r21, 0xFF	; 255
    56a6:	0e 94 b6 0c 	call	0x196c	; 0x196c <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)>
    56aa:	6c 01       	movw	r12, r24
  AssertIsTrue(afterBody);
    56ac:	00 97       	sbiw	r24, 0x00	; 0
    56ae:	31 f4       	brne	.+12     	; 0x56bc <testFHTEncodingHeadAndTail()+0x36a>
    56b0:	80 e0       	ldi	r24, 0x00	; 0
    56b2:	90 e0       	ldi	r25, 0x00	; 0
    56b4:	62 ea       	ldi	r22, 0xA2	; 162
    56b6:	71 e0       	ldi	r23, 0x01	; 1
    56b8:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(13 == commandDecoded.hc1, commandDecoded.hc1);
    56bc:	8d 81       	ldd	r24, Y+5	; 0x05
    56be:	8d 30       	cpi	r24, 0x0D	; 13
    56c0:	29 f0       	breq	.+10     	; 0x56cc <testFHTEncodingHeadAndTail()+0x37a>
    56c2:	90 e0       	ldi	r25, 0x00	; 0
    56c4:	63 ea       	ldi	r22, 0xA3	; 163
    56c6:	71 e0       	ldi	r23, 0x01	; 1
    56c8:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(73 == commandDecoded.hc2, commandDecoded.hc2);
    56cc:	8e 81       	ldd	r24, Y+6	; 0x06
    56ce:	89 34       	cpi	r24, 0x49	; 73
    56d0:	29 f0       	breq	.+10     	; 0x56dc <testFHTEncodingHeadAndTail()+0x38a>
    56d2:	90 e0       	ldi	r25, 0x00	; 0
    56d4:	64 ea       	ldi	r22, 0xA4	; 164
    56d6:	71 e0       	ldi	r23, 0x01	; 1
    56d8:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(0x26 == commandDecoded.command, commandDecoded.command);
    56dc:	8f 81       	ldd	r24, Y+7	; 0x07
    56de:	86 32       	cpi	r24, 0x26	; 38
    56e0:	29 f0       	breq	.+10     	; 0x56ec <testFHTEncodingHeadAndTail()+0x39a>
    56e2:	90 e0       	ldi	r25, 0x00	; 0
    56e4:	65 ea       	ldi	r22, 0xA5	; 165
    56e6:	71 e0       	ldi	r23, 0x01	; 1
    56e8:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(0 == commandDecoded.extension, commandDecoded.extension);
    56ec:	88 85       	ldd	r24, Y+8	; 0x08
    56ee:	88 23       	and	r24, r24
    56f0:	29 f0       	breq	.+10     	; 0x56fc <testFHTEncodingHeadAndTail()+0x3aa>
    56f2:	90 e0       	ldi	r25, 0x00	; 0
    56f4:	66 ea       	ldi	r22, 0xA6	; 166
    56f6:	71 e0       	ldi	r23, 0x01	; 1
    56f8:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
    56fc:	76 01       	movw	r14, r12
    56fe:	00 e0       	ldi	r16, 0x00	; 0
    5700:	10 e0       	ldi	r17, 0x00	; 0
  serialPrintlnAndFlush();
#endif
  // Verify (start of) trailer is OK.
  for(uint8_t i = 0; i < 3; ++i)
    {
    AssertIsTrueWithErr(0xff != afterBody[i], i); // No trailer byte should be 0xff (so 0xff can be terminator).
    5702:	f7 01       	movw	r30, r14
    5704:	80 81       	ld	r24, Z
    5706:	8f 3f       	cpi	r24, 0xFF	; 255
    5708:	29 f4       	brne	.+10     	; 0x5714 <testFHTEncodingHeadAndTail()+0x3c2>
    570a:	c8 01       	movw	r24, r16
    570c:	63 eb       	ldi	r22, 0xB3	; 179
    570e:	71 e0       	ldi	r23, 0x01	; 1
    5710:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
    AssertIsTrueWithErr(0 == (0x80 & afterBody[i]), i); // No trailer byte should have its high bit set.
    5714:	f7 01       	movw	r30, r14
    5716:	80 81       	ld	r24, Z
    5718:	87 ff       	sbrs	r24, 7
    571a:	05 c0       	rjmp	.+10     	; 0x5726 <testFHTEncodingHeadAndTail()+0x3d4>
    571c:	c8 01       	movw	r24, r16
    571e:	64 eb       	ldi	r22, 0xB4	; 180
    5720:	71 e0       	ldi	r23, 0x01	; 1
    5722:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
    5726:	0f 5f       	subi	r16, 0xFF	; 255
    5728:	1f 4f       	sbci	r17, 0xFF	; 255
    572a:	08 94       	sec
    572c:	e1 1c       	adc	r14, r1
    572e:	f1 1c       	adc	r15, r1
  serialPrintAndFlush(' ');
  serialPrintAndFlush(afterBody[2], HEX);
  serialPrintlnAndFlush();
#endif
  // Verify (start of) trailer is OK.
  for(uint8_t i = 0; i < 3; ++i)
    5730:	03 30       	cpi	r16, 0x03	; 3
    5732:	11 05       	cpc	r17, r1
    5734:	31 f7       	brne	.-52     	; 0x5702 <testFHTEncodingHeadAndTail()+0x3b0>
  extractTrailingMinimalStatsPayload(afterBody, &statsDecoded);
  AssertIsEqual(powerLow, statsDecoded.powerLow);
  AssertIsEqual(tempC16, statsDecoded.tempC16);
#else
  FullStatsMessageCore_t statsDecoded;
  AssertIsTrue(NULL != decodeFullStatsMessageCore(afterBody, sizeof(buf) - (afterBody - buf), (stats_TX_level)randRNG8(), randRNG8NextBoolean(), &statsDecoded));
    5736:	1c e3       	ldi	r17, 0x3C	; 60
    5738:	a1 2e       	mov	r10, r17
    573a:	a4 0c       	add	r10, r4
    573c:	0e 94 9e 19 	call	0x333c	; 0x333c <randRNG8()>
    5740:	18 2f       	mov	r17, r24
    5742:	0e 94 a2 20 	call	0x4144	; 0x4144 <randRNG8NextBoolean()>
    5746:	28 2f       	mov	r18, r24
    5748:	6a 2d       	mov	r22, r10
    574a:	6c 19       	sub	r22, r12
    574c:	c6 01       	movw	r24, r12
    574e:	41 2f       	mov	r20, r17
    5750:	50 e0       	ldi	r21, 0x00	; 0
    5752:	8e 01       	movw	r16, r28
    5754:	00 5f       	subi	r16, 0xF0	; 240
    5756:	1f 4f       	sbci	r17, 0xFF	; 255
    5758:	0e 94 46 13 	call	0x268c	; 0x268c <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)>
    575c:	89 2b       	or	r24, r25
    575e:	31 f4       	brne	.+12     	; 0x576c <testFHTEncodingHeadAndTail()+0x41a>
    5760:	80 e0       	ldi	r24, 0x00	; 0
    5762:	90 e0       	ldi	r25, 0x00	; 0
    5764:	61 ec       	ldi	r22, 0xC1	; 193
    5766:	71 e0       	ldi	r23, 0x01	; 1
    5768:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsEqual(powerLow, statsDecoded.tempAndPower.powerLow);
    576c:	6b 2c       	mov	r6, r11
    576e:	77 24       	eor	r7, r7
    5770:	8c 89       	ldd	r24, Y+20	; 0x14
    5772:	88 1f       	adc	r24, r24
    5774:	88 27       	eor	r24, r24
    5776:	88 1f       	adc	r24, r24
    5778:	90 e0       	ldi	r25, 0x00	; 0
    sleepLowPowerMs(1000);
    }
  }

// Deal with common equality test.
static inline void errorIfNotEqual(int expected, int actual, int line) { if(expected != actual) { error(actual, line); } }
    577a:	68 16       	cp	r6, r24
    577c:	79 06       	cpc	r7, r25
    577e:	21 f0       	breq	.+8      	; 0x5788 <testFHTEncodingHeadAndTail()+0x436>
    5780:	62 ec       	ldi	r22, 0xC2	; 194
    5782:	71 e0       	ldi	r23, 0x01	; 1
    5784:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsEqual(tempC16, statsDecoded.tempC16);
#else
  FullStatsMessageCore_t statsDecoded;
  AssertIsTrue(NULL != decodeFullStatsMessageCore(afterBody, sizeof(buf) - (afterBody - buf), (stats_TX_level)randRNG8(), randRNG8NextBoolean(), &statsDecoded));
  AssertIsEqual(powerLow, statsDecoded.tempAndPower.powerLow);
  AssertIsEqual(tempC16, statsDecoded.tempAndPower.tempC16);
    5788:	8b 89       	ldd	r24, Y+19	; 0x13
    578a:	2c 89       	ldd	r18, Y+20	; 0x14
    578c:	92 2f       	mov	r25, r18
    578e:	9f 77       	andi	r25, 0x7F	; 127
    5790:	88 0f       	add	r24, r24
    5792:	99 1f       	adc	r25, r25
    5794:	95 95       	asr	r25
    5796:	87 95       	ror	r24
    sleepLowPowerMs(1000);
    }
  }

// Deal with common equality test.
static inline void errorIfNotEqual(int expected, int actual, int line) { if(expected != actual) { error(actual, line); } }
    5798:	88 16       	cp	r8, r24
    579a:	99 06       	cpc	r9, r25
    579c:	21 f0       	breq	.+8      	; 0x57a6 <testFHTEncodingHeadAndTail()+0x454>
    579e:	63 ec       	ldi	r22, 0xC3	; 195
    57a0:	71 e0       	ldi	r23, 0x01	; 1
    57a2:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsEqual(tempC16, statsDecoded.tempAndPower.tempC16);
#endif

  // Encode a basic message to set a different valve to 0%, with header and trailer.
  // This one was apparently impossible to TX or RX...
  command.hc1 = 65;
    57a6:	81 e4       	ldi	r24, 0x41	; 65
    57a8:	89 83       	std	Y+1, r24	; 0x01
  command.hc2 = 74;
    57aa:	8a e4       	ldi	r24, 0x4A	; 74
    57ac:	8a 83       	std	Y+2, r24	; 0x02
#ifdef FHT8V_ADR_USED
  address = 0;
#endif
  memset(buf, 0xff, sizeof(buf));
    57ae:	8e 01       	movw	r16, r28
    57b0:	09 5e       	subi	r16, 0xE9	; 233
    57b2:	1f 4f       	sbci	r17, 0xFF	; 255
    57b4:	c8 01       	movw	r24, r16
    57b6:	6f ef       	ldi	r22, 0xFF	; 255
    57b8:	70 e0       	ldi	r23, 0x00	; 0
    57ba:	4c e3       	ldi	r20, 0x3C	; 60
    57bc:	50 e0       	ldi	r21, 0x00	; 0
    57be:	0e 94 40 04 	call	0x880	; 0x880 <memset>
  result1 = FHT8VCreateValveSetCmdFrameHT_r(buf, true, &command, 0, &fullStats);
    57c2:	c8 01       	movw	r24, r16
    57c4:	61 e0       	ldi	r22, 0x01	; 1
    57c6:	ae 01       	movw	r20, r28
    57c8:	4f 5f       	subi	r20, 0xFF	; 255
    57ca:	5f 4f       	sbci	r21, 0xFF	; 255
    57cc:	20 e0       	ldi	r18, 0x00	; 0
    57ce:	8e 01       	movw	r16, r28
    57d0:	07 5f       	subi	r16, 0xF7	; 247
    57d2:	1f 4f       	sbci	r17, 0xFF	; 255
    57d4:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, FullStatsMessageCore const*)>
    57d8:	8c 01       	movw	r16, r24
//serialPrintAndFlush(result1 - buf); serialPrintlnAndFlush();
  AssertIsTrueWithErr((result1 - buf) < sizeof(buf), (result1 - buf) - sizeof(buf)); // result1 points to the terminating 0xff, not just after it.
    57da:	7c 01       	movw	r14, r24
    57dc:	e4 18       	sub	r14, r4
    57de:	f5 08       	sbc	r15, r5
    57e0:	fc e3       	ldi	r31, 0x3C	; 60
    57e2:	ef 16       	cp	r14, r31
    57e4:	f1 04       	cpc	r15, r1
    57e6:	30 f0       	brcs	.+12     	; 0x57f4 <testFHTEncodingHeadAndTail()+0x4a2>
    57e8:	c7 01       	movw	r24, r14
    57ea:	cc 97       	sbiw	r24, 0x3c	; 60
    57ec:	60 ed       	ldi	r22, 0xD0	; 208
    57ee:	71 e0       	ldi	r23, 0x01	; 1
    57f0:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(((uint8_t)~0U) == *result1, *result1); // Check that result points at terminator value 0xff/~0.
    57f4:	f8 01       	movw	r30, r16
    57f6:	80 81       	ld	r24, Z
    57f8:	8f 3f       	cpi	r24, 0xFF	; 255
    57fa:	29 f0       	breq	.+10     	; 0x5806 <testFHTEncodingHeadAndTail()+0x4b4>
    57fc:	90 e0       	ldi	r25, 0x00	; 0
    57fe:	61 ed       	ldi	r22, 0xD1	; 209
    5800:	71 e0       	ldi	r23, 0x01	; 1
    5802:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  //AssertIsTrue((result1 - buf < MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE), result1-buf); // Check not overflowing the buffer.
#if defined(ALLOW_MINIMAL_STATS_TXRX)
  AssertIsTrueWithErr((result1 - buf == 42 + RFM22_PREAMBLE_BYTES), result1-buf); // Check correct length.
#else
  AssertIsTrueWithErr((result1 - buf == 44 + RFM22_PREAMBLE_BYTES), result1-buf); // Check correct length.
    5806:	f1 e3       	ldi	r31, 0x31	; 49
    5808:	ef 16       	cp	r14, r31
    580a:	f1 04       	cpc	r15, r1
    580c:	29 f0       	breq	.+10     	; 0x5818 <testFHTEncodingHeadAndTail()+0x4c6>
    580e:	c7 01       	movw	r24, r14
    5810:	66 ed       	ldi	r22, 0xD6	; 214
    5812:	71 e0       	ldi	r23, 0x01	; 1
    5814:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
#endif
  AssertIsTrueWithErr(((uint8_t)0xaa) == buf[0], buf[0]); // Check that result starts with FHT8V 0xcc preamble.
    5818:	8f 89       	ldd	r24, Y+23	; 0x17
    581a:	8a 3a       	cpi	r24, 0xAA	; 170
    581c:	29 f0       	breq	.+10     	; 0x5828 <testFHTEncodingHeadAndTail()+0x4d6>
    581e:	90 e0       	ldi	r25, 0x00	; 0
    5820:	68 ed       	ldi	r22, 0xD8	; 216
    5822:	71 e0       	ldi	r23, 0x01	; 1
    5824:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(((uint8_t)0xcc) == buf[RFM22_PREAMBLE_BYTES], buf[RFM22_PREAMBLE_BYTES]); // Check that result starts with FHT8V 0xcc preamble.
    5828:	8c 8d       	ldd	r24, Y+28	; 0x1c
    582a:	8c 3c       	cpi	r24, 0xCC	; 204
    582c:	29 f0       	breq	.+10     	; 0x5838 <testFHTEncodingHeadAndTail()+0x4e6>
    582e:	90 e0       	ldi	r25, 0x00	; 0
    5830:	69 ed       	ldi	r22, 0xD9	; 217
    5832:	71 e0       	ldi	r23, 0x01	; 1
    5834:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  // Attempt to decode.
  afterBody = FHT8VDecodeBitStream(buf + RFM22_PREAMBLE_BYTES, buf + MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE - 1, &commandDecoded);
    5838:	ce 01       	movw	r24, r28
    583a:	4c 96       	adiw	r24, 0x1c	; 28
    583c:	be 01       	movw	r22, r28
    583e:	6c 5b       	subi	r22, 0xBC	; 188
    5840:	7f 4f       	sbci	r23, 0xFF	; 255
    5842:	ae 01       	movw	r20, r28
    5844:	4b 5f       	subi	r20, 0xFB	; 251
    5846:	5f 4f       	sbci	r21, 0xFF	; 255
    5848:	0e 94 b6 0c 	call	0x196c	; 0x196c <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)>
    584c:	6c 01       	movw	r12, r24
  AssertIsTrue(0 != afterBody);
    584e:	00 97       	sbiw	r24, 0x00	; 0
    5850:	31 f4       	brne	.+12     	; 0x585e <testFHTEncodingHeadAndTail()+0x50c>
    5852:	80 e0       	ldi	r24, 0x00	; 0
    5854:	90 e0       	ldi	r25, 0x00	; 0
    5856:	6c ed       	ldi	r22, 0xDC	; 220
    5858:	71 e0       	ldi	r23, 0x01	; 1
    585a:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
//serialPrintAndFlush(afterBody - buf); serialPrintlnAndFlush();
  AssertIsEqual(5, (result1 - buf) - (afterBody - buf));
    585e:	c7 01       	movw	r24, r14
    5860:	84 0d       	add	r24, r4
    5862:	95 1d       	adc	r25, r5
    5864:	8c 19       	sub	r24, r12
    5866:	9d 09       	sbc	r25, r13
    sleepLowPowerMs(1000);
    }
  }

// Deal with common equality test.
static inline void errorIfNotEqual(int expected, int actual, int line) { if(expected != actual) { error(actual, line); } }
    5868:	85 30       	cpi	r24, 0x05	; 5
    586a:	91 05       	cpc	r25, r1
    586c:	21 f0       	breq	.+8      	; 0x5876 <testFHTEncodingHeadAndTail()+0x524>
    586e:	6e ed       	ldi	r22, 0xDE	; 222
    5870:	71 e0       	ldi	r23, 0x01	; 1
    5872:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  // Attempt to decode.
  afterBody = FHT8VDecodeBitStream(buf + RFM22_PREAMBLE_BYTES, buf + MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE - 1, &commandDecoded);
  AssertIsTrue(0 != afterBody);
//serialPrintAndFlush(afterBody - buf); serialPrintlnAndFlush();
  AssertIsEqual(5, (result1 - buf) - (afterBody - buf));
  AssertIsTrueWithErr(65 == commandDecoded.hc1, commandDecoded.hc1);
    5876:	8d 81       	ldd	r24, Y+5	; 0x05
    5878:	81 34       	cpi	r24, 0x41	; 65
    587a:	29 f0       	breq	.+10     	; 0x5886 <testFHTEncodingHeadAndTail()+0x534>
    587c:	90 e0       	ldi	r25, 0x00	; 0
    587e:	6f ed       	ldi	r22, 0xDF	; 223
    5880:	71 e0       	ldi	r23, 0x01	; 1
    5882:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(74 == commandDecoded.hc2, commandDecoded.hc2);
    5886:	8e 81       	ldd	r24, Y+6	; 0x06
    5888:	8a 34       	cpi	r24, 0x4A	; 74
    588a:	29 f0       	breq	.+10     	; 0x5896 <testFHTEncodingHeadAndTail()+0x544>
    588c:	90 e0       	ldi	r25, 0x00	; 0
    588e:	60 ee       	ldi	r22, 0xE0	; 224
    5890:	71 e0       	ldi	r23, 0x01	; 1
    5892:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(0x26 == commandDecoded.command, commandDecoded.command);
    5896:	8f 81       	ldd	r24, Y+7	; 0x07
    5898:	86 32       	cpi	r24, 0x26	; 38
    589a:	29 f0       	breq	.+10     	; 0x58a6 <testFHTEncodingHeadAndTail()+0x554>
    589c:	90 e0       	ldi	r25, 0x00	; 0
    589e:	61 ee       	ldi	r22, 0xE1	; 225
    58a0:	71 e0       	ldi	r23, 0x01	; 1
    58a2:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrueWithErr(0 == commandDecoded.extension, commandDecoded.extension);
    58a6:	88 85       	ldd	r24, Y+8	; 0x08
    58a8:	88 23       	and	r24, r24
    58aa:	29 f0       	breq	.+10     	; 0x58b6 <testFHTEncodingHeadAndTail()+0x564>
    58ac:	90 e0       	ldi	r25, 0x00	; 0
    58ae:	62 ee       	ldi	r22, 0xE2	; 226
    58b0:	71 e0       	ldi	r23, 0x01	; 1
    58b2:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
    58b6:	76 01       	movw	r14, r12
    58b8:	00 e0       	ldi	r16, 0x00	; 0
    58ba:	10 e0       	ldi	r17, 0x00	; 0
  // Verify trailer start is OK.
  for(uint8_t i = 0; i < 3; ++i)
    {
    AssertIsTrueWithErr(0xff != afterBody[i], i); // No trailer byte should be 0xff (so 0xff can be terminator).
    58bc:	f7 01       	movw	r30, r14
    58be:	80 81       	ld	r24, Z
    58c0:	8f 3f       	cpi	r24, 0xFF	; 255
    58c2:	29 f4       	brne	.+10     	; 0x58ce <testFHTEncodingHeadAndTail()+0x57c>
    58c4:	c8 01       	movw	r24, r16
    58c6:	66 ee       	ldi	r22, 0xE6	; 230
    58c8:	71 e0       	ldi	r23, 0x01	; 1
    58ca:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
    AssertIsTrueWithErr(0 == (0x80 & afterBody[i]), i); // No trailer byte should have its high bit set.
    58ce:	f7 01       	movw	r30, r14
    58d0:	80 81       	ld	r24, Z
    58d2:	87 ff       	sbrs	r24, 7
    58d4:	05 c0       	rjmp	.+10     	; 0x58e0 <testFHTEncodingHeadAndTail()+0x58e>
    58d6:	c8 01       	movw	r24, r16
    58d8:	67 ee       	ldi	r22, 0xE7	; 231
    58da:	71 e0       	ldi	r23, 0x01	; 1
    58dc:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
    58e0:	0f 5f       	subi	r16, 0xFF	; 255
    58e2:	1f 4f       	sbci	r17, 0xFF	; 255
    58e4:	08 94       	sec
    58e6:	e1 1c       	adc	r14, r1
    58e8:	f1 1c       	adc	r15, r1
  AssertIsTrueWithErr(65 == commandDecoded.hc1, commandDecoded.hc1);
  AssertIsTrueWithErr(74 == commandDecoded.hc2, commandDecoded.hc2);
  AssertIsTrueWithErr(0x26 == commandDecoded.command, commandDecoded.command);
  AssertIsTrueWithErr(0 == commandDecoded.extension, commandDecoded.extension);
  // Verify trailer start is OK.
  for(uint8_t i = 0; i < 3; ++i)
    58ea:	03 30       	cpi	r16, 0x03	; 3
    58ec:	11 05       	cpc	r17, r1
    58ee:	31 f7       	brne	.-52     	; 0x58bc <testFHTEncodingHeadAndTail()+0x56a>
    }
#if defined(ALLOW_MINIMAL_STATS_TXRX)
  AssertIsTrueWithErr(verifyHeaderAndCRCForTrailingMinimalStatsPayload(afterBody), *afterBody);
#endif
  // Decode values...
  memset(&statsDecoded, 0xff, sizeof(statsDecoded)); // Clear structure...
    58f0:	8e 01       	movw	r16, r28
    58f2:	00 5f       	subi	r16, 0xF0	; 240
    58f4:	1f 4f       	sbci	r17, 0xFF	; 255
    58f6:	c8 01       	movw	r24, r16
    58f8:	6f ef       	ldi	r22, 0xFF	; 255
    58fa:	70 e0       	ldi	r23, 0x00	; 0
    58fc:	47 e0       	ldi	r20, 0x07	; 7
    58fe:	50 e0       	ldi	r21, 0x00	; 0
    5900:	0e 94 40 04 	call	0x880	; 0x880 <memset>
#if defined(ALLOW_MINIMAL_STATS_TXRX)
  extractTrailingMinimalStatsPayload(afterBody, &statsDecoded);
  AssertIsEqual(powerLow, statsDecoded.powerLow);
  AssertIsEqual(tempC16, statsDecoded.tempC16);
#else
  AssertIsTrue(NULL != decodeFullStatsMessageCore(afterBody, sizeof(buf) - (afterBody - buf), (stats_TX_level)randRNG8(), randRNG8NextBoolean(), &statsDecoded));
    5904:	0e 94 9e 19 	call	0x333c	; 0x333c <randRNG8()>
    5908:	f8 2e       	mov	r15, r24
    590a:	0e 94 a2 20 	call	0x4144	; 0x4144 <randRNG8NextBoolean()>
    590e:	28 2f       	mov	r18, r24
    5910:	ac 18       	sub	r10, r12
    5912:	c6 01       	movw	r24, r12
    5914:	6a 2d       	mov	r22, r10
    5916:	4f 2d       	mov	r20, r15
    5918:	50 e0       	ldi	r21, 0x00	; 0
    591a:	0e 94 46 13 	call	0x268c	; 0x268c <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)>
    591e:	89 2b       	or	r24, r25
    5920:	31 f4       	brne	.+12     	; 0x592e <testFHTEncodingHeadAndTail()+0x5dc>
    5922:	80 e0       	ldi	r24, 0x00	; 0
    5924:	90 e0       	ldi	r25, 0x00	; 0
    5926:	63 ef       	ldi	r22, 0xF3	; 243
    5928:	71 e0       	ldi	r23, 0x01	; 1
    592a:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsEqual(powerLow, statsDecoded.tempAndPower.powerLow);
    592e:	8c 89       	ldd	r24, Y+20	; 0x14
    5930:	88 1f       	adc	r24, r24
    5932:	88 27       	eor	r24, r24
    5934:	88 1f       	adc	r24, r24
    5936:	90 e0       	ldi	r25, 0x00	; 0
    sleepLowPowerMs(1000);
    }
  }

// Deal with common equality test.
static inline void errorIfNotEqual(int expected, int actual, int line) { if(expected != actual) { error(actual, line); } }
    5938:	68 16       	cp	r6, r24
    593a:	79 06       	cpc	r7, r25
    593c:	21 f0       	breq	.+8      	; 0x5946 <testFHTEncodingHeadAndTail()+0x5f4>
    593e:	64 ef       	ldi	r22, 0xF4	; 244
    5940:	71 e0       	ldi	r23, 0x01	; 1
    5942:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsEqual(powerLow, statsDecoded.powerLow);
  AssertIsEqual(tempC16, statsDecoded.tempC16);
#else
  AssertIsTrue(NULL != decodeFullStatsMessageCore(afterBody, sizeof(buf) - (afterBody - buf), (stats_TX_level)randRNG8(), randRNG8NextBoolean(), &statsDecoded));
  AssertIsEqual(powerLow, statsDecoded.tempAndPower.powerLow);
  AssertIsEqual(tempC16, statsDecoded.tempAndPower.tempC16);
    5946:	8b 89       	ldd	r24, Y+19	; 0x13
    5948:	2c 89       	ldd	r18, Y+20	; 0x14
    594a:	92 2f       	mov	r25, r18
    594c:	9f 77       	andi	r25, 0x7F	; 127
    594e:	88 0f       	add	r24, r24
    5950:	99 1f       	adc	r25, r25
    5952:	95 95       	asr	r25
    5954:	87 95       	ror	r24
    sleepLowPowerMs(1000);
    }
  }

// Deal with common equality test.
static inline void errorIfNotEqual(int expected, int actual, int line) { if(expected != actual) { error(actual, line); } }
    5956:	88 16       	cp	r8, r24
    5958:	99 06       	cpc	r9, r25
    595a:	21 f0       	breq	.+8      	; 0x5964 <testFHTEncodingHeadAndTail()+0x612>
    595c:	65 ef       	ldi	r22, 0xF5	; 245
    595e:	71 e0       	ldi	r23, 0x01	; 1
    5960:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
#else
  AssertIsTrue(NULL != decodeFullStatsMessageCore(afterBody, sizeof(buf) - (afterBody - buf), (stats_TX_level)randRNG8(), randRNG8NextBoolean(), &statsDecoded));
  AssertIsEqual(powerLow, statsDecoded.tempAndPower.powerLow);
  AssertIsEqual(tempC16, statsDecoded.tempAndPower.tempC16);
#endif
  }
    5964:	ce 5a       	subi	r28, 0xAE	; 174
    5966:	df 4f       	sbci	r29, 0xFF	; 255
    5968:	0f b6       	in	r0, 0x3f	; 63
    596a:	f8 94       	cli
    596c:	de bf       	out	0x3e, r29	; 62
    596e:	0f be       	out	0x3f, r0	; 63
    5970:	cd bf       	out	0x3d, r28	; 61
    5972:	cf 91       	pop	r28
    5974:	df 91       	pop	r29
    5976:	1f 91       	pop	r17
    5978:	0f 91       	pop	r16
    597a:	ff 90       	pop	r15
    597c:	ef 90       	pop	r14
    597e:	df 90       	pop	r13
    5980:	cf 90       	pop	r12
    5982:	bf 90       	pop	r11
    5984:	af 90       	pop	r10
    5986:	9f 90       	pop	r9
    5988:	8f 90       	pop	r8
    598a:	7f 90       	pop	r7
    598c:	6f 90       	pop	r6
    598e:	5f 90       	pop	r5
    5990:	4f 90       	pop	r4
    5992:	08 95       	ret

00005994 <testTempSensor()>:
#if !defined(DISABLE_SENSOR_UNIT_TESTS)
// Test temperature sensor returns value in reasonable bounds for a test environment.
// Attempts to test that the sensor is actually present.
static void testTempSensor()
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testTempSensor");
    5994:	8c e1       	ldi	r24, 0x1C	; 28
    5996:	95 e0       	ldi	r25, 0x05	; 5
    5998:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <serialPrintlnAndFlush(__FlashStringHelper const*)>
  const int temp = TemperatureC16.read();
    599c:	88 e7       	ldi	r24, 0x78	; 120
    599e:	93 e0       	ldi	r25, 0x03	; 3
    59a0:	0e 94 6a 32 	call	0x64d4	; 0x64d4 <RoomTemperatureC16::read()>
    59a4:	9c 01       	movw	r18, r24
  serialPrintAndFlush('C');
  serialPrintAndFlush(temp & 0xf, HEX);
  serialPrintlnAndFlush();
#endif
  // During testing temp should be above 0C (0C might indicate a missing/broken sensor) and below 50C.
  AssertIsTrueWithErr((temp > 0) && (temp < (50 << 4)), temp);
    59a6:	01 97       	sbiw	r24, 0x01	; 1
    59a8:	8f 51       	subi	r24, 0x1F	; 31
    59aa:	93 40       	sbci	r25, 0x03	; 3
    59ac:	28 f0       	brcs	.+10     	; 0x59b8 <testTempSensor()+0x24>
    59ae:	c9 01       	movw	r24, r18
    59b0:	6f e3       	ldi	r22, 0x3F	; 63
    59b2:	73 e0       	ldi	r23, 0x03	; 3
    59b4:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
    59b8:	08 95       	ret

000059ba <testInternalTempSensor()>:
#if !defined(DISABLE_SENSOR_UNIT_TESTS)
// Test that on-chip temperature sensor returns value in half-reasonable bounds for a test environment.
// Internal sensor may be +/- 10C out.
static void testInternalTempSensor()
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testInternalTempSensor");
    59ba:	8b e2       	ldi	r24, 0x2B	; 43
    59bc:	95 e0       	ldi	r25, 0x05	; 5
    59be:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <serialPrintlnAndFlush(__FlashStringHelper const*)>
  const int temp = readInternalTemperatureC16();
    59c2:	0e 94 28 17 	call	0x2e50	; 0x2e50 <readInternalTemperatureC16()>
    59c6:	9c 01       	movw	r18, r24
  serialPrintAndFlush(temp & 0xf, HEX);
  serialPrintlnAndFlush();
#endif
  // During testing temp should be above 0C (0C might indicate a missing/broken sensor) and below 50C.
  // Internal sensor may be +/- 10C out.
  AssertIsTrueWithErr((temp > -10) && (temp < (60 << 4)), temp);
    59c8:	09 96       	adiw	r24, 0x09	; 9
    59ca:	89 5c       	subi	r24, 0xC9	; 201
    59cc:	93 40       	sbci	r25, 0x03	; 3
    59ce:	28 f0       	brcs	.+10     	; 0x59da <testInternalTempSensor()+0x20>
    59d0:	c9 01       	movw	r24, r18
    59d2:	63 e5       	ldi	r22, 0x53	; 83
    59d4:	73 e0       	ldi	r23, 0x03	; 3
    59d6:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
    59da:	08 95       	ret

000059dc <testSupplyVoltageMonitor()>:
#endif

#if !defined(DISABLE_SENSOR_UNIT_TESTS)
static void testSupplyVoltageMonitor()
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testSupplyVoltageMonitor");
    59dc:	82 e4       	ldi	r24, 0x42	; 66
    59de:	95 e0       	ldi	r25, 0x05	; 5
    59e0:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <serialPrintlnAndFlush(__FlashStringHelper const*)>
  const int mv = Supply_mV.read();
    59e4:	83 e2       	ldi	r24, 0x23	; 35
    59e6:	93 e0       	ldi	r25, 0x03	; 3
    59e8:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <SupplyVoltageMilliVolts::read()>
    59ec:	9c 01       	movw	r18, r24
  serialPrintAndFlush(mv, DEC);
  serialPrintlnAndFlush();
#endif
  // During testing power supply voltage should be above ~1.7V BOD limit,
  // and below 3.6V for V0p2 boards which is RFM22 Vss limit.
  AssertIsTrueWithErr((mv >= 1700) && (mv <= 3600), mv);
    59ee:	84 5a       	subi	r24, 0xA4	; 164
    59f0:	96 40       	sbci	r25, 0x06	; 6
    59f2:	8d 56       	subi	r24, 0x6D	; 109
    59f4:	97 40       	sbci	r25, 0x07	; 7
    59f6:	28 f0       	brcs	.+10     	; 0x5a02 <testSupplyVoltageMonitor()+0x26>
    59f8:	c9 01       	movw	r24, r18
    59fa:	63 e6       	ldi	r22, 0x63	; 99
    59fc:	73 e0       	ldi	r23, 0x03	; 3
    59fe:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
    5a02:	08 95       	ret

00005a04 <testSleepUntilSubCycleTime()>:
    AssertIsTrue(0 != i); // Generated too many identical values in a row. 
    }
  }

// Test sleepUntilSubCycleTime() routine.
void testSleepUntilSubCycleTime()
    5a04:	0f 93       	push	r16
    5a06:	1f 93       	push	r17
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testSleepUntilSubCycleTime");
    5a08:	8b e5       	ldi	r24, 0x5B	; 91
    5a0a:	95 e0       	ldi	r25, 0x05	; 5
    5a0c:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <serialPrintlnAndFlush(__FlashStringHelper const*)>

  const uint8_t start = getSubCycleTime();
    5a10:	10 91 b2 00 	lds	r17, 0x00B2

  // Check that this correctly notices/vetoes attempt to sleep until time already past.
  if(start > 0) { AssertIsTrue(!sleepUntilSubCycleTime(start-1)); }
    5a14:	11 23       	and	r17, r17
    5a16:	61 f0       	breq	.+24     	; 0x5a30 <testSleepUntilSubCycleTime()+0x2c>
    5a18:	81 2f       	mov	r24, r17
    5a1a:	81 50       	subi	r24, 0x01	; 1
    5a1c:	0e 94 fe 18 	call	0x31fc	; 0x31fc <sleepUntilSubCycleTime(unsigned char)>
    5a20:	88 23       	and	r24, r24
    5a22:	31 f0       	breq	.+12     	; 0x5a30 <testSleepUntilSubCycleTime()+0x2c>
    5a24:	80 e0       	ldi	r24, 0x00	; 0
    5a26:	90 e0       	ldi	r25, 0x00	; 0
    5a28:	69 ed       	ldi	r22, 0xD9	; 217
    5a2a:	72 e0       	ldi	r23, 0x02	; 2
    5a2c:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>

  // Don't attempt rest of test if near the end of the current minor cycle...
  if(start > (GSCT_MAX/2)) { return; }
    5a30:	17 fd       	sbrc	r17, 7
    5a32:	2b c0       	rjmp	.+86     	; 0x5a8a <testSleepUntilSubCycleTime()+0x86>

  // Set a random target significantly before the end of the current minor cycle.
#if 0x3f > GSCT_MAX/4
#error
#endif
  const uint8_t sleepTicks = 2 + (randRNG8() & 0x3f);
    5a34:	0e 94 9e 19 	call	0x333c	; 0x333c <randRNG8()>
  const uint8_t target = start + sleepTicks;
    5a38:	1e 5f       	subi	r17, 0xFE	; 254
    5a3a:	08 2f       	mov	r16, r24
    5a3c:	0f 73       	andi	r16, 0x3F	; 63
    5a3e:	01 0f       	add	r16, r17
    5a40:	12 50       	subi	r17, 0x02	; 2
  AssertIsTrue(target > start);
    5a42:	10 17       	cp	r17, r16
    5a44:	30 f0       	brcs	.+12     	; 0x5a52 <testSleepUntilSubCycleTime()+0x4e>
    5a46:	80 e0       	ldi	r24, 0x00	; 0
    5a48:	90 e0       	ldi	r25, 0x00	; 0
    5a4a:	64 ee       	ldi	r22, 0xE4	; 228
    5a4c:	72 e0       	ldi	r23, 0x02	; 2
    5a4e:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  AssertIsTrue(target < GSCT_MAX);
    5a52:	0f 3f       	cpi	r16, 0xFF	; 255
    5a54:	31 f4       	brne	.+12     	; 0x5a62 <testSleepUntilSubCycleTime()+0x5e>
    5a56:	80 e0       	ldi	r24, 0x00	; 0
    5a58:	90 e0       	ldi	r25, 0x00	; 0
    5a5a:	65 ee       	ldi	r22, 0xE5	; 229
    5a5c:	72 e0       	ldi	r23, 0x02	; 2
    5a5e:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>

  // Call should succeed.
  AssertIsTrue(sleepUntilSubCycleTime(target));
    5a62:	80 2f       	mov	r24, r16
    5a64:	0e 94 fe 18 	call	0x31fc	; 0x31fc <sleepUntilSubCycleTime(unsigned char)>
    5a68:	88 23       	and	r24, r24
    5a6a:	31 f4       	brne	.+12     	; 0x5a78 <testSleepUntilSubCycleTime()+0x74>
    5a6c:	80 e0       	ldi	r24, 0x00	; 0
    5a6e:	90 e0       	ldi	r25, 0x00	; 0
    5a70:	68 ee       	ldi	r22, 0xE8	; 232
    5a72:	72 e0       	ldi	r23, 0x02	; 2
    5a74:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>

  // Call should return with some of specified target tick still to run...
  const uint8_t end = getSubCycleTime();
    5a78:	80 91 b2 00 	lds	r24, 0x00B2
  AssertIsTrueWithErr(target == end, end); // FIXME: DHD2014020: getting occasional failures.
    5a7c:	08 17       	cp	r16, r24
    5a7e:	29 f0       	breq	.+10     	; 0x5a8a <testSleepUntilSubCycleTime()+0x86>
    5a80:	90 e0       	ldi	r25, 0x00	; 0
    5a82:	6c ee       	ldi	r22, 0xEC	; 236
    5a84:	72 e0       	ldi	r23, 0x02	; 2
    5a86:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
#if 0
  DEBUG_SERIAL_PRINT_FLASHSTRING("Sleep ticks: ");
  DEBUG_SERIAL_PRINT(sleepTicks);
  DEBUG_SERIAL_PRINTLN();
#endif
  }
    5a8a:	1f 91       	pop	r17
    5a8c:	0f 91       	pop	r16
    5a8e:	08 95       	ret

00005a90 <testEntropyGathering()>:
// Tests of entropy gathering routines.
//
// Maximum number of identical nominally random bits (or values with approx one bit of entropy) in a row tolerated.
// Set large enough that even soak testing for many hours should not trigger a failure if behaviour is plausibly correct.
#define MAX_IDENTICAL_BITS_SEQUENTIALLY 32
void testEntropyGathering()
    5a90:	1f 93       	push	r17
    5a92:	cf 93       	push	r28
    5a94:	df 93       	push	r29
  {
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testEntropyGathering");
    5a96:	82 e8       	ldi	r24, 0x82	; 130
    5a98:	95 e0       	ldi	r25, 0x05	; 5
    5a9a:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <serialPrintlnAndFlush(__FlashStringHelper const*)>

  // Test WDT jitter: assumed about 1 bit of entropy per call/result.
  //DEBUG_SERIAL_PRINT_FLASHSTRING("jWDT... ");
  const uint8_t jWDT = clockJitterWDT();
    5a9e:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <clockJitterWDT()>
    5aa2:	18 2f       	mov	r17, r24
    5aa4:	c0 e2       	ldi	r28, 0x20	; 32
    5aa6:	d0 e0       	ldi	r29, 0x00	; 0
    5aa8:	0c c0       	rjmp	.+24     	; 0x5ac2 <testEntropyGathering()+0x32>
  for(int i = MAX_IDENTICAL_BITS_SEQUENTIALLY; --i >= 0; )
    {
    if(jWDT != clockJitterWDT()) { break; } // Stop as soon as a different value is obtained.
    5aaa:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <clockJitterWDT()>
    5aae:	18 17       	cp	r17, r24
    5ab0:	59 f4       	brne	.+22     	; 0x5ac8 <testEntropyGathering()+0x38>
    AssertIsTrueWithErr(0 != i, i); // Generated too many identical values in a row. 
    5ab2:	20 97       	sbiw	r28, 0x00	; 0
    5ab4:	31 f4       	brne	.+12     	; 0x5ac2 <testEntropyGathering()+0x32>
    5ab6:	80 e0       	ldi	r24, 0x00	; 0
    5ab8:	90 e0       	ldi	r25, 0x00	; 0
    5aba:	6c e8       	ldi	r22, 0x8C	; 140
    5abc:	72 e0       	ldi	r23, 0x02	; 2
    5abe:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("testEntropyGathering");

  // Test WDT jitter: assumed about 1 bit of entropy per call/result.
  //DEBUG_SERIAL_PRINT_FLASHSTRING("jWDT... ");
  const uint8_t jWDT = clockJitterWDT();
  for(int i = MAX_IDENTICAL_BITS_SEQUENTIALLY; --i >= 0; )
    5ac2:	21 97       	sbiw	r28, 0x01	; 1
    5ac4:	d7 ff       	sbrs	r29, 7
    5ac6:	f1 cf       	rjmp	.-30     	; 0x5aaa <testEntropyGathering()+0x1a>
  //DEBUG_SERIAL_PRINTFMT(jWDT, BIN);
  //DEBUG_SERIAL_PRINTLN();

  // Test RTC jitter: assumed about 1 bit of entropy per call/result.
  //DEBUG_SERIAL_PRINT_FLASHSTRING("jRTC... ");
  for(const uint8_t t0 = getSubCycleTime(); t0 == getSubCycleTime(); ) { } // Wait for sub-cycle time to roll to toughen test.
    5ac8:	90 91 b2 00 	lds	r25, 0x00B2
    5acc:	80 91 b2 00 	lds	r24, 0x00B2
    5ad0:	98 17       	cp	r25, r24
    5ad2:	e1 f3       	breq	.-8      	; 0x5acc <testEntropyGathering()+0x3c>
  const uint8_t jRTC = clockJitterRTC();
    5ad4:	0e 94 65 17 	call	0x2eca	; 0x2eca <clockJitterRTC()>
    5ad8:	18 2f       	mov	r17, r24
    5ada:	c0 e2       	ldi	r28, 0x20	; 32
    5adc:	d0 e0       	ldi	r29, 0x00	; 0
    5ade:	0c c0       	rjmp	.+24     	; 0x5af8 <testEntropyGathering()+0x68>
  for(int i = MAX_IDENTICAL_BITS_SEQUENTIALLY; --i >= 0; )
    {
    if(jRTC != clockJitterRTC()) { break; } // Stop as soon as a different value is obtained.
    5ae0:	0e 94 65 17 	call	0x2eca	; 0x2eca <clockJitterRTC()>
    5ae4:	18 17       	cp	r17, r24
    5ae6:	59 f4       	brne	.+22     	; 0x5afe <testEntropyGathering()+0x6e>
    AssertIsTrue(0 != i); // Generated too many identical values in a row. 
    5ae8:	20 97       	sbiw	r28, 0x00	; 0
    5aea:	31 f4       	brne	.+12     	; 0x5af8 <testEntropyGathering()+0x68>
    5aec:	80 e0       	ldi	r24, 0x00	; 0
    5aee:	90 e0       	ldi	r25, 0x00	; 0
    5af0:	69 e9       	ldi	r22, 0x99	; 153
    5af2:	72 e0       	ldi	r23, 0x02	; 2
    5af4:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>

  // Test RTC jitter: assumed about 1 bit of entropy per call/result.
  //DEBUG_SERIAL_PRINT_FLASHSTRING("jRTC... ");
  for(const uint8_t t0 = getSubCycleTime(); t0 == getSubCycleTime(); ) { } // Wait for sub-cycle time to roll to toughen test.
  const uint8_t jRTC = clockJitterRTC();
  for(int i = MAX_IDENTICAL_BITS_SEQUENTIALLY; --i >= 0; )
    5af8:	21 97       	sbiw	r28, 0x01	; 1
    5afa:	d7 ff       	sbrs	r29, 7
    5afc:	f1 cf       	rjmp	.-30     	; 0x5ae0 <testEntropyGathering()+0x50>
  //DEBUG_SERIAL_PRINTFMT(jRTC, BIN);
  //DEBUG_SERIAL_PRINTLN();

  // Test full-byte jitter: assumed about 8 bits of entropy per call/result.
  //DEBUG_SERIAL_PRINT_FLASHSTRING("jByte... ");
  const uint8_t t0j = getSubCycleTime();
    5afe:	90 91 b2 00 	lds	r25, 0x00B2
  while(t0j == getSubCycleTime()) { } // Wait for sub-cycle time to roll to toughen test.
    5b02:	80 91 b2 00 	lds	r24, 0x00B2
    5b06:	98 17       	cp	r25, r24
    5b08:	e1 f3       	breq	.-8      	; 0x5b02 <testEntropyGathering()+0x72>
  const uint8_t jByte = clockJitterEntropyByte();
    5b0a:	0e 94 76 17 	call	0x2eec	; 0x2eec <clockJitterEntropyByte()>
    5b0e:	18 2f       	mov	r17, r24
    5b10:	c4 e0       	ldi	r28, 0x04	; 4
    5b12:	d0 e0       	ldi	r29, 0x00	; 0
    5b14:	0c c0       	rjmp	.+24     	; 0x5b2e <testEntropyGathering()+0x9e>

  for(int i = MAX_IDENTICAL_BITS_SEQUENTIALLY/8; --i >= 0; )
    {
    if(jByte != clockJitterEntropyByte()) { break; } // Stop as soon as a different value is obtained.
    5b16:	0e 94 76 17 	call	0x2eec	; 0x2eec <clockJitterEntropyByte()>
    5b1a:	18 17       	cp	r17, r24
    5b1c:	59 f4       	brne	.+22     	; 0x5b34 <testEntropyGathering()+0xa4>
    AssertIsTrue(0 != i); // Generated too many identical values in a row. 
    5b1e:	20 97       	sbiw	r28, 0x00	; 0
    5b20:	31 f4       	brne	.+12     	; 0x5b2e <testEntropyGathering()+0x9e>
    5b22:	80 e0       	ldi	r24, 0x00	; 0
    5b24:	90 e0       	ldi	r25, 0x00	; 0
    5b26:	68 ea       	ldi	r22, 0xA8	; 168
    5b28:	72 e0       	ldi	r23, 0x02	; 2
    5b2a:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
  //DEBUG_SERIAL_PRINT_FLASHSTRING("jByte... ");
  const uint8_t t0j = getSubCycleTime();
  while(t0j == getSubCycleTime()) { } // Wait for sub-cycle time to roll to toughen test.
  const uint8_t jByte = clockJitterEntropyByte();

  for(int i = MAX_IDENTICAL_BITS_SEQUENTIALLY/8; --i >= 0; )
    5b2e:	21 97       	sbiw	r28, 0x01	; 1
    5b30:	d7 ff       	sbrs	r29, 7
    5b32:	f1 cf       	rjmp	.-30     	; 0x5b16 <testEntropyGathering()+0x86>
  //DEBUG_SERIAL_PRINT_FLASHSTRING(", ticks=");
  //DEBUG_SERIAL_PRINT((uint8_t)(t1j - t0j - 1));
  //DEBUG_SERIAL_PRINTLN();
  
  // Test noisy ADC read: assumed at least one bit of noise per call/result.
  const uint8_t nar1 = noisyADCRead();
    5b34:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <noisyADCRead()>
    5b38:	18 2f       	mov	r17, r24
    5b3a:	c0 e2       	ldi	r28, 0x20	; 32
    5b3c:	d0 e0       	ldi	r29, 0x00	; 0
    5b3e:	18 c0       	rjmp	.+48     	; 0x5b70 <testEntropyGathering()+0xe0>
  DEBUG_SERIAL_PRINTFMT(nar1, BIN);
  DEBUG_SERIAL_PRINTLN();
#endif
  for(int i = MAX_IDENTICAL_BITS_SEQUENTIALLY; --i >= 0; )
    {
    const uint8_t nar = noisyADCRead();
    5b40:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <noisyADCRead()>
    if(nar1 != nar) { break; } // Stop as soon as a different value is obtained.
    5b44:	18 17       	cp	r17, r24
    5b46:	b9 f4       	brne	.+46     	; 0x5b76 <testEntropyGathering()+0xe6>
#if 1
    DEBUG_SERIAL_PRINT_FLASHSTRING("repeat nar ");
    5b48:	86 e7       	ldi	r24, 0x76	; 118
    5b4a:	95 e0       	ldi	r25, 0x05	; 5
    5b4c:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <serialPrintAndFlush(__FlashStringHelper const*)>
    DEBUG_SERIAL_PRINTFMT(nar, BIN);
    5b50:	81 2f       	mov	r24, r17
    5b52:	90 e0       	ldi	r25, 0x00	; 0
    5b54:	62 e0       	ldi	r22, 0x02	; 2
    5b56:	70 e0       	ldi	r23, 0x00	; 0
    5b58:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <serialPrintAndFlush(int, int)>
    DEBUG_SERIAL_PRINTLN();
    5b5c:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <serialPrintlnAndFlush()>
#endif
    AssertIsTrue(0 != i); // Generated too many identical values in a row. 
    5b60:	20 97       	sbiw	r28, 0x00	; 0
    5b62:	31 f4       	brne	.+12     	; 0x5b70 <testEntropyGathering()+0xe0>
    5b64:	80 e0       	ldi	r24, 0x00	; 0
    5b66:	90 e0       	ldi	r25, 0x00	; 0
    5b68:	60 ec       	ldi	r22, 0xC0	; 192
    5b6a:	72 e0       	ldi	r23, 0x02	; 2
    5b6c:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
#if 0
  DEBUG_SERIAL_PRINT_FLASHSTRING("nar1 ");
  DEBUG_SERIAL_PRINTFMT(nar1, BIN);
  DEBUG_SERIAL_PRINTLN();
#endif
  for(int i = MAX_IDENTICAL_BITS_SEQUENTIALLY; --i >= 0; )
    5b70:	21 97       	sbiw	r28, 0x01	; 1
    5b72:	d7 ff       	sbrs	r29, 7
    5b74:	e5 cf       	rjmp	.-54     	; 0x5b40 <testEntropyGathering()+0xb0>
#endif
    AssertIsTrue(0 != i); // Generated too many identical values in a row. 
    }

  // Test secure random byte generation.
  const uint8_t srb1 = getSecureRandomByte();
    5b76:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <getSecureRandomByte()>
    5b7a:	18 2f       	mov	r17, r24
    5b7c:	c4 e0       	ldi	r28, 0x04	; 4
    5b7e:	d0 e0       	ldi	r29, 0x00	; 0
    5b80:	0c c0       	rjmp	.+24     	; 0x5b9a <testEntropyGathering()+0x10a>
  DEBUG_SERIAL_PRINTFMT(srb1, BIN);
  DEBUG_SERIAL_PRINTLN();
#endif
  for(int i = MAX_IDENTICAL_BITS_SEQUENTIALLY/8; --i >= 0; )
    {
    if(srb1 != getSecureRandomByte()) { break; } // Stop as soon as a different value is obtained.
    5b82:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <getSecureRandomByte()>
    5b86:	18 17       	cp	r17, r24
    5b88:	59 f4       	brne	.+22     	; 0x5ba0 <testEntropyGathering()+0x110>
    AssertIsTrue(0 != i); // Generated too many identical values in a row. 
    5b8a:	20 97       	sbiw	r28, 0x00	; 0
    5b8c:	31 f4       	brne	.+12     	; 0x5b9a <testEntropyGathering()+0x10a>
    5b8e:	80 e0       	ldi	r24, 0x00	; 0
    5b90:	90 e0       	ldi	r25, 0x00	; 0
    5b92:	6d ec       	ldi	r22, 0xCD	; 205
    5b94:	72 e0       	ldi	r23, 0x02	; 2
    5b96:	0e 94 4d 21 	call	0x429a	; 0x429a <error(int, int)>
#if 0
  DEBUG_SERIAL_PRINT_FLASHSTRING("srb1 ");
  DEBUG_SERIAL_PRINTFMT(srb1, BIN);
  DEBUG_SERIAL_PRINTLN();
#endif
  for(int i = MAX_IDENTICAL_BITS_SEQUENTIALLY/8; --i >= 0; )
    5b9a:	21 97       	sbiw	r28, 0x01	; 1
    5b9c:	d7 ff       	sbrs	r29, 7
    5b9e:	f1 cf       	rjmp	.-30     	; 0x5b82 <testEntropyGathering()+0xf2>
    {
    if(srb1 != getSecureRandomByte()) { break; } // Stop as soon as a different value is obtained.
    AssertIsTrue(0 != i); // Generated too many identical values in a row. 
    }
  }
    5ba0:	df 91       	pop	r29
    5ba2:	cf 91       	pop	r28
    5ba4:	1f 91       	pop	r17
    5ba6:	08 95       	ret

00005ba8 <loopUnitTest()>:



// To be called from loop() instead of main code when running unit tests.
// Tests generally flag an error and stop the test cycle with a call to panic() or error().
void loopUnitTest()
    5ba8:	cf 93       	push	r28
    5baa:	df 93       	push	r29
    5bac:	c3 e0       	ldi	r28, 0x03	; 3
    5bae:	d0 e0       	ldi	r29, 0x00	; 0
  static int loopCount = 0;

  // Allow the terminal console to be brought up.
  for(int i = 3; i > 0; --i)
    {
    serialPrintAndFlush(F("Tests starting shortly... "));
    5bb0:	8a e8       	ldi	r24, 0x8A	; 138
    5bb2:	93 e0       	ldi	r25, 0x03	; 3
    5bb4:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <serialPrintAndFlush(__FlashStringHelper const*)>
    serialPrintAndFlush(i);
    5bb8:	ce 01       	movw	r24, r28
    5bba:	6a e0       	ldi	r22, 0x0A	; 10
    5bbc:	70 e0       	ldi	r23, 0x00	; 0
    5bbe:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <serialPrintAndFlush(int, int)>
    serialPrintlnAndFlush();
    5bc2:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <serialPrintlnAndFlush()>
    sleepLowPowerMs(1000);
    5bc6:	88 ee       	ldi	r24, 0xE8	; 232
    5bc8:	93 e0       	ldi	r25, 0x03	; 3
    5bca:	0e 94 33 21 	call	0x4266	; 0x4266 <sleepLowPowerMs(unsigned int)>
void loopUnitTest()
  {
  static int loopCount = 0;

  // Allow the terminal console to be brought up.
  for(int i = 3; i > 0; --i)
    5bce:	21 97       	sbiw	r28, 0x01	; 1
    5bd0:	79 f7       	brne	.-34     	; 0x5bb0 <loopUnitTest()+0x8>
    serialPrintAndFlush(F("Tests starting shortly... "));
    serialPrintAndFlush(i);
    serialPrintlnAndFlush();
    sleepLowPowerMs(1000);
    }
  serialPrintlnAndFlush();
    5bd2:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <serialPrintlnAndFlush()>


  // Run the tests, fastest / newest / most-fragile / most-interesting first...
  testJSONStatsHandling();
    5bd6:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <testJSONStatsHandling()>
  testJSONForTX();
    5bda:	0e 94 c1 22 	call	0x4582	; 0x4582 <testJSONForTX()>
  testFullStatsMessageCoreEncDec();
    5bde:	0e 94 56 24 	call	0x48ac	; 0x48ac <testFullStatsMessageCoreEncDec()>
  testCRC();
    5be2:	0e 94 40 27 	call	0x4e80	; 0x4e80 <testCRC()>
  testTempCompand();
    5be6:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <testTempCompand()>
  testRNG8();
    5bea:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <testRNG8()>
  testEntropyGathering();
    5bee:	0e 94 48 2d 	call	0x5a90	; 0x5a90 <testEntropyGathering()>
  testRTCPersist();
    5bf2:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <testRTCPersist()>
  testEEPROM();
    5bf6:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <testEEPROM()>
  testSmoothStatsValue();
    5bfa:	0e 94 2a 28 	call	0x5054	; 0x5054 <testSmoothStatsValue()>
  testSleepUntilSubCycleTime();
    5bfe:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <testSleepUntilSubCycleTime()>
  testFHTEncoding();
    5c02:	0e 94 49 28 	call	0x5092	; 0x5092 <testFHTEncoding()>
  testFHTEncodingHeadAndTail();
    5c06:	0e 94 a9 29 	call	0x5352	; 0x5352 <testFHTEncodingHeadAndTail()>

  // Sensor tests.
  // May need to be disabled if, for example, running in a simulator or on a partial board.
  // Should not involve anything too complex from the normal run-time, such as interrupts.
#if !defined(DISABLE_SENSOR_UNIT_TESTS)
  testTempSensor();
    5c0a:	0e 94 ca 2c 	call	0x5994	; 0x5994 <testTempSensor()>
  testInternalTempSensor();
    5c0e:	0e 94 dd 2c 	call	0x59ba	; 0x59ba <testInternalTempSensor()>
  testSupplyVoltageMonitor();
    5c12:	0e 94 ee 2c 	call	0x59dc	; 0x59dc <testSupplyVoltageMonitor()>
#endif


  // Announce successful loop completion and count.
  ++loopCount;
    5c16:	80 91 6d 03 	lds	r24, 0x036D
    5c1a:	90 91 6e 03 	lds	r25, 0x036E
    5c1e:	01 96       	adiw	r24, 0x01	; 1
    5c20:	90 93 6e 03 	sts	0x036E, r25
    5c24:	80 93 6d 03 	sts	0x036D, r24
  serialPrintlnAndFlush();
    5c28:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <serialPrintlnAndFlush()>
  serialPrintAndFlush(F("%%% All tests completed OK, round "));
    5c2c:	87 e6       	ldi	r24, 0x67	; 103
    5c2e:	93 e0       	ldi	r25, 0x03	; 3
    5c30:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <serialPrintAndFlush(__FlashStringHelper const*)>
  serialPrintAndFlush(loopCount);
    5c34:	80 91 6d 03 	lds	r24, 0x036D
    5c38:	90 91 6e 03 	lds	r25, 0x036E
    5c3c:	6a e0       	ldi	r22, 0x0A	; 10
    5c3e:	70 e0       	ldi	r23, 0x00	; 0
    5c40:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <serialPrintAndFlush(int, int)>
  serialPrintlnAndFlush();
    5c44:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <serialPrintlnAndFlush()>
  serialPrintlnAndFlush();
    5c48:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <serialPrintlnAndFlush()>
  serialPrintlnAndFlush();
    5c4c:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <serialPrintlnAndFlush()>
  // Briefly flash the LED once to indicate successful completion of the tests.
  // (Panic/failure causes repeated rapid flash by contrast, and a hang may result in no flashes.)
  LED_HEATCALL_ON();
    5c50:	5c 98       	cbi	0x0b, 4	; 11
    5c52:	80 e0       	ldi	r24, 0x00	; 0
    5c54:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <nap(signed char)>
  tinyPause();
  LED_HEATCALL_OFF();
    5c58:	5c 9a       	sbi	0x0b, 4	; 11
  // Help avoid tests spinning too fast even to see!
  // Also make panic() state flash clearly different to (faster than) this loop success/repeat.
  sleepLowPowerMs(2000);
    5c5a:	80 ed       	ldi	r24, 0xD0	; 208
    5c5c:	97 e0       	ldi	r25, 0x07	; 7
    5c5e:	0e 94 33 21 	call	0x4266	; 0x4266 <sleepLowPowerMs(unsigned int)>
  }
    5c62:	df 91       	pop	r29
    5c64:	cf 91       	pop	r28
    5c66:	08 95       	ret

00005c68 <global constructors keyed to _Z5panicv>:
  '/',
  __DATE__[0], __DATE__[1], __DATE__[2],
  '/',
  __DATE__[4], __DATE__[5],
  '\0'
  };
    5c68:	82 e3       	ldi	r24, 0x32	; 50
    5c6a:	80 93 4a 01 	sts	0x014A, r24
    5c6e:	80 e3       	ldi	r24, 0x30	; 48
    5c70:	80 93 4b 01 	sts	0x014B, r24
    5c74:	81 e3       	ldi	r24, 0x31	; 49
    5c76:	80 93 4c 01 	sts	0x014C, r24
    5c7a:	84 e3       	ldi	r24, 0x34	; 52
    5c7c:	80 93 4d 01 	sts	0x014D, r24
    5c80:	84 e4       	ldi	r24, 0x44	; 68
    5c82:	80 93 4f 01 	sts	0x014F, r24
    5c86:	85 e6       	ldi	r24, 0x65	; 101
    5c88:	80 93 50 01 	sts	0x0150, r24
    5c8c:	83 e6       	ldi	r24, 0x63	; 99
    5c8e:	80 93 51 01 	sts	0x0151, r24
    5c92:	80 e2       	ldi	r24, 0x20	; 32
    5c94:	80 93 53 01 	sts	0x0153, r24
    5c98:	86 e3       	ldi	r24, 0x36	; 54
    5c9a:	80 93 54 01 	sts	0x0154, r24
//us apparent: 1408
//us apparent: 3776
//us apparent: 2816
#endif
#endif
  }
    5c9e:	08 95       	ret

00005ca0 <loop>:
#endif

#if defined(ALT_MAIN_LOOP) // Run alternative main loop.
  loopAlt();
#elif defined(UNIT_TESTS) // Run unit tests *instead* of normal loop() code. 
  loopUnitTest();
    5ca0:	0e 94 d4 2d 	call	0x5ba8	; 0x5ba8 <loopUnitTest()>
//us apparent: 1408
//us apparent: 3776
//us apparent: 2816
#endif
#endif
  }
    5ca4:	08 95       	ret

00005ca6 <sleepLowPowerMs(unsigned int)>:
// This may be achieved in part by dynamically slowing the CPU clock if possible.
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed((((MIN_CPU_HZ * (ms)) + 2000) / 4000) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    5ca6:	a0 e0       	ldi	r26, 0x00	; 0
    5ca8:	b0 e0       	ldi	r27, 0x00	; 0
    5caa:	bc 01       	movw	r22, r24
    5cac:	cd 01       	movw	r24, r26
    5cae:	22 e1       	ldi	r18, 0x12	; 18
    5cb0:	3a e7       	ldi	r19, 0x7A	; 122
    5cb2:	40 e0       	ldi	r20, 0x00	; 0
    5cb4:	50 e0       	ldi	r21, 0x00	; 0
    5cb6:	0e 94 f4 3d 	call	0x7be8	; 0x7be8 <__mulsi3>
    5cba:	60 53       	subi	r22, 0x30	; 48
    5cbc:	78 4f       	sbci	r23, 0xF8	; 248
    5cbe:	8f 4f       	sbci	r24, 0xFF	; 255
    5cc0:	9f 4f       	sbci	r25, 0xFF	; 255
    5cc2:	20 ea       	ldi	r18, 0xA0	; 160
    5cc4:	3f e0       	ldi	r19, 0x0F	; 15
    5cc6:	40 e0       	ldi	r20, 0x00	; 0
    5cc8:	50 e0       	ldi	r21, 0x00	; 0
    5cca:	0e 94 5c 3e 	call	0x7cb8	; 0x7cb8 <__divmodsi4>
    5cce:	da 01       	movw	r26, r20
    5cd0:	c9 01       	movw	r24, r18
    5cd2:	02 97       	sbiw	r24, 0x02	; 2
    5cd4:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
    5cd8:	08 95       	ret

00005cda <posPOST(unsigned char, __FlashStringHelper const*)>:
//   * Two quick flashes from the Arduino bootloader then the LED comes on.
//   * Each of the 5 main sections of Power On Self Test is 1 second LED on, 0.5 second off, n short flashes separated by 0.25s off, then 0.5s off, then 1s on.
//     The value of n is 1, 2, 3, 4, 5.
//   * The LED should then go off except for optional faint flickers as the radio is being driven if set up to do so.
#define PP_OFF_MS 250
static void posPOST(const uint8_t position, const __FlashStringHelper *s)
    5cda:	ff 92       	push	r15
    5cdc:	0f 93       	push	r16
    5cde:	1f 93       	push	r17
    5ce0:	cf 93       	push	r28
    5ce2:	df 93       	push	r29
    5ce4:	f8 2e       	mov	r15, r24
    5ce6:	8b 01       	movw	r16, r22
  {
  sleepLowPowerMs(1000);
    5ce8:	88 ee       	ldi	r24, 0xE8	; 232
    5cea:	93 e0       	ldi	r25, 0x03	; 3
    5cec:	0e 94 53 2e 	call	0x5ca6	; 0x5ca6 <sleepLowPowerMs(unsigned int)>
#ifdef DEBUG
  DEBUG_SERIAL_PRINT_FLASHSTRING("posPOST: "); // Can only be used once serial is set up.
    5cf0:	87 e3       	ldi	r24, 0x37	; 55
    5cf2:	97 e0       	ldi	r25, 0x07	; 7
    5cf4:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(position);
    5cf8:	cf 2d       	mov	r28, r15
    5cfa:	d0 e0       	ldi	r29, 0x00	; 0
    5cfc:	ce 01       	movw	r24, r28
    5cfe:	6a e0       	ldi	r22, 0x0A	; 10
    5d00:	70 e0       	ldi	r23, 0x00	; 0
    5d02:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINT_FLASHSTRING(": ");
    5d06:	84 e3       	ldi	r24, 0x34	; 52
    5d08:	97 e0       	ldi	r25, 0x07	; 7
    5d0a:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(s);
    5d0e:	c8 01       	movw	r24, r16
    5d10:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINTLN();
    5d14:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <serialPrintlnAndFlush()>
#else
  serialPrintlnAndFlush(s);
#endif
//  pinMode(LED_HEATCALL, OUTPUT);
  LED_HEATCALL_OFF();
    5d18:	5c 9a       	sbi	0x0b, 4	; 11

  // Skip much of lightshow if '0'/end/none position.
  if(position > 0)
    5d1a:	ff 20       	and	r15, r15
    5d1c:	89 f0       	breq	.+34     	; 0x5d40 <posPOST(unsigned char, __FlashStringHelper const*)+0x66>
    {
    sleepLowPowerMs(2*PP_OFF_MS); // TODO: use this time to gather entropy.
    5d1e:	84 ef       	ldi	r24, 0xF4	; 244
    5d20:	91 e0       	ldi	r25, 0x01	; 1
    5d22:	07 c0       	rjmp	.+14     	; 0x5d32 <posPOST(unsigned char, __FlashStringHelper const*)+0x58>
    for(int i = position; --i >= 0; )
      {
      LED_HEATCALL_ON();
    5d24:	5c 98       	cbi	0x0b, 4	; 11
// Very tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define VERYTINY_PAUSE_MS 5
static void inline veryTinyPause() { sleepLowPowerMs(VERYTINY_PAUSE_MS); }
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define TINY_PAUSE_MS 15
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    5d26:	80 e0       	ldi	r24, 0x00	; 0
    5d28:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <nap(signed char)>
      tinyPause();
      LED_HEATCALL_OFF();
    5d2c:	5c 9a       	sbi	0x0b, 4	; 11
      sleepLowPowerMs(PP_OFF_MS); // TODO: use this time to gather entropy.
    5d2e:	8a ef       	ldi	r24, 0xFA	; 250
    5d30:	90 e0       	ldi	r25, 0x00	; 0
    5d32:	0e 94 53 2e 	call	0x5ca6	; 0x5ca6 <sleepLowPowerMs(unsigned int)>

  // Skip much of lightshow if '0'/end/none position.
  if(position > 0)
    {
    sleepLowPowerMs(2*PP_OFF_MS); // TODO: use this time to gather entropy.
    for(int i = position; --i >= 0; )
    5d36:	21 97       	sbiw	r28, 0x01	; 1
    5d38:	8f ef       	ldi	r24, 0xFF	; 255
    5d3a:	cf 3f       	cpi	r28, 0xFF	; 255
    5d3c:	d8 07       	cpc	r29, r24
    5d3e:	91 f7       	brne	.-28     	; 0x5d24 <posPOST(unsigned char, __FlashStringHelper const*)+0x4a>
      LED_HEATCALL_OFF();
      sleepLowPowerMs(PP_OFF_MS); // TODO: use this time to gather entropy.
      }
    }

  sleepLowPowerMs(PP_OFF_MS); // TODO: use this time to gather entropy.
    5d40:	8a ef       	ldi	r24, 0xFA	; 250
    5d42:	90 e0       	ldi	r25, 0x00	; 0
    5d44:	0e 94 53 2e 	call	0x5ca6	; 0x5ca6 <sleepLowPowerMs(unsigned int)>
  LED_HEATCALL_ON();
    5d48:	5c 98       	cbi	0x0b, 4	; 11
  sleepLowPowerMs(1000); // TODO: use this time to gather entropy.
    5d4a:	88 ee       	ldi	r24, 0xE8	; 232
    5d4c:	93 e0       	ldi	r25, 0x03	; 3
    5d4e:	0e 94 53 2e 	call	0x5ca6	; 0x5ca6 <sleepLowPowerMs(unsigned int)>
  }
    5d52:	df 91       	pop	r29
    5d54:	cf 91       	pop	r28
    5d56:	1f 91       	pop	r17
    5d58:	0f 91       	pop	r16
    5d5a:	ff 90       	pop	r15
    5d5c:	08 95       	ret

00005d5e <serialPrintlnBuildVersion()>:
  };
// Version (code/board) information printed as one line to serial (with line-end, and flushed); machine- and human- parseable.
// Format: "board VXXXX REVY; code YYYY/Mmm/DD HH:MM:SS".
void serialPrintlnBuildVersion()
  {
  serialPrintAndFlush(F("board V0.2 REV"));
    5d5e:	8a e8       	ldi	r24, 0x8A	; 138
    5d60:	97 e0       	ldi	r25, 0x07	; 7
    5d62:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <serialPrintAndFlush(__FlashStringHelper const*)>
  serialPrintAndFlush(V0p2_REV);
    5d66:	84 e0       	ldi	r24, 0x04	; 4
    5d68:	90 e0       	ldi	r25, 0x00	; 0
    5d6a:	6a e0       	ldi	r22, 0x0A	; 10
    5d6c:	70 e0       	ldi	r23, 0x00	; 0
    5d6e:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <serialPrintAndFlush(int, int)>
  serialPrintAndFlush(F("; code $Id: V0p2_Main.ino 3659 2014-11-22 17:23:13Z damonhd $ ")); // Expect SVN to substitute the Id keyword here with svn:keywords property set.
    5d72:	8b e4       	ldi	r24, 0x4B	; 75
    5d74:	97 e0       	ldi	r25, 0x07	; 7
    5d76:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <serialPrintAndFlush(__FlashStringHelper const*)>
  serialPrintAndFlush(_YYYYMmmDD);
    5d7a:	8a e4       	ldi	r24, 0x4A	; 74
    5d7c:	91 e0       	ldi	r25, 0x01	; 1
    5d7e:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <serialPrintAndFlush(char const*)>
  serialPrintAndFlush(F(" " __TIME__));
    5d82:	81 e4       	ldi	r24, 0x41	; 65
    5d84:	97 e0       	ldi	r25, 0x07	; 7
    5d86:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <serialPrintAndFlush(__FlashStringHelper const*)>
  serialPrintlnAndFlush();
    5d8a:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <serialPrintlnAndFlush()>
  }
    5d8e:	08 95       	ret

00005d90 <panic()>:
// Tries not to use lots of energy so as to keep distress beacon running for a while.
void panic()
  {
#ifdef USE_MODULE_RFM22RADIOSIMPLE
  // Reset radio and go into low-power mode.
  RFM22PowerOnInit();
    5d90:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <RFM22PowerOnInit()>
#endif
  // Power down almost everything else...
  minimisePowerWithoutSleep();
    5d94:	0e 94 59 18 	call	0x30b2	; 0x30b2 <minimisePowerWithoutSleep()>
#ifdef LED_HEATCALL
  pinMode(LED_HEATCALL, OUTPUT);
#else
  pinMode(LED_HEATCALL_L, OUTPUT);
    5d98:	84 e0       	ldi	r24, 0x04	; 4
    5d9a:	61 e0       	ldi	r22, 0x01	; 1
    5d9c:	0e 94 b9 38 	call	0x7172	; 0x7172 <pinMode>
#endif
  for( ; ; )
    {
    LED_HEATCALL_ON();
    5da0:	5c 98       	cbi	0x0b, 4	; 11
    5da2:	80 e0       	ldi	r24, 0x00	; 0
    5da4:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <nap(signed char)>
    tinyPause();
    LED_HEATCALL_OFF();
    5da8:	5c 9a       	sbi	0x0b, 4	; 11
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define MEDIUM_PAUSE_MS 60
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
// Big low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define BIG_PAUSE_MS 120
static void inline bigPause() { nap(WDTO_120MS); } // 120ms vs 288ms nominal for PICAXE V0.09 impl.
    5daa:	83 e0       	ldi	r24, 0x03	; 3
    5dac:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <nap(signed char)>
    5db0:	f7 cf       	rjmp	.-18     	; 0x5da0 <panic()+0x10>

00005db2 <panic(__FlashStringHelper const*)>:
  }

// Panic with fixed message.
void panic(const __FlashStringHelper *s)
  {
  serialPrintlnAndFlush(s); // May fail.
    5db2:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <serialPrintlnAndFlush(__FlashStringHelper const*)>
  panic();  
    5db6:	0e 94 c8 2e 	call	0x5d90	; 0x5d90 <panic()>
  }
    5dba:	08 95       	ret

00005dbc <optionalPOST()>:
  serialPrintlnAndFlush();
  }

// Optional Power-On Self Test routines.
// Aborts with a call to panic() if a test fails.
void optionalPOST()
    5dbc:	0f 93       	push	r16
    5dbe:	1f 93       	push	r17
    5dc0:	cf 93       	push	r28
    5dc2:	df 93       	push	r29
  {
  // Capture early sub-cycle time to help ensure that the 32768Hz async clock is actually running.
  const uint8_t earlySCT = getSubCycleTime();
    5dc4:	00 91 b2 00 	lds	r16, 0x00B2
#ifdef USE_MODULE_RFM22RADIOSIMPLE
#if !defined(RFM22_IS_ACTUALLY_RFM23) && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("(Using RFM22.)");
#endif
  // Initialise the radio, if configured, ASAP because it can suck a lot of power until properly initialised.
  RFM22PowerOnInit();
    5dc8:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <RFM22PowerOnInit()>
  // Check that the radio is correctly connected; panic if not...
  if(!RFM22CheckConnected()) { panic(); }
    5dcc:	0e 94 f0 1b 	call	0x37e0	; 0x37e0 <RFM22CheckConnected()>
    5dd0:	88 23       	and	r24, r24
    5dd2:	11 f4       	brne	.+4      	; 0x5dd8 <optionalPOST()+0x1c>
    5dd4:	0e 94 c8 2e 	call	0x5d90	; 0x5d90 <panic()>
  // Configure the radio.
  RFM22RegisterBlockSetup(FHT8V_RFM22_Reg_Values);
    5dd8:	88 e6       	ldi	r24, 0x68	; 104
    5dda:	90 e0       	ldi	r25, 0x00	; 0
    5ddc:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <RFM22RegisterBlockSetup(unsigned char const (*) [2])>
  // Put the radio in low-power standby mode.
  RFM22ModeStandbyAndClearState();
    5de0:	0e 94 4e 1b 	call	0x369c	; 0x369c <RFM22ModeStandbyAndClearState()>
#endif

//  posPOST(1, F("Radio OK, checking buttons/sensors and xtal"));

  // Check buttons not stuck enabled.
  if(fastDigitalRead(BUTTON_MODE_L) == LOW) { panic(F("M stuck")); }
    5de4:	4d 99       	sbic	0x09, 5	; 9
    5de6:	04 c0       	rjmp	.+8      	; 0x5df0 <optionalPOST()+0x34>
    5de8:	8c e2       	ldi	r24, 0x2C	; 44
    5dea:	97 e0       	ldi	r25, 0x07	; 7
    5dec:	0e 94 d9 2e 	call	0x5db2	; 0x5db2 <panic(__FlashStringHelper const*)>
#if defined(BUTTON_LEARN_L)
  if(fastDigitalRead(BUTTON_LEARN_L) == LOW) { panic(F("L stuck")); }
    5df0:	18 99       	sbic	0x03, 0	; 3
    5df2:	04 c0       	rjmp	.+8      	; 0x5dfc <optionalPOST()+0x40>
    5df4:	84 e2       	ldi	r24, 0x24	; 36
    5df6:	97 e0       	ldi	r25, 0x07	; 7
    5df8:	0e 94 d9 2e 	call	0x5db2	; 0x5db2 <panic(__FlashStringHelper const*)>
#endif
#if defined(BUTTON_LEARN2_L)
  if(fastDigitalRead(BUTTON_LEARN2_L) == LOW) { panic(F("L2 stuck")); }
    5dfc:	4b 99       	sbic	0x09, 3	; 9
    5dfe:	04 c0       	rjmp	.+8      	; 0x5e08 <optionalPOST()+0x4c>
    5e00:	8b e1       	ldi	r24, 0x1B	; 27
    5e02:	97 e0       	ldi	r25, 0x07	; 7
    5e04:	0e 94 d9 2e 	call	0x5db2	; 0x5db2 <panic(__FlashStringHelper const*)>
#endif

  // Check that the 32768Hz async clock is actually running having done significant CPU-intensive work.
  const uint8_t laterSCT = getSubCycleTime();
    5e08:	10 91 b2 00 	lds	r17, 0x00B2
  if(laterSCT == earlySCT)
    5e0c:	10 17       	cp	r17, r16
    5e0e:	f1 f4       	brne	.+60     	; 0x5e4c <optionalPOST()+0x90>
    {
#if defined(WAKEUP_32768HZ_XTAL)
    // Allow (an extra) 1s+ for 32768Hz crystal to start reliably, see: http://www.atmel.com/Images/doc1259.pdf
#if 1 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("Sleeping to let async 32768Hz clock start...");
    5e10:	8e ee       	ldi	r24, 0xEE	; 238
    5e12:	96 e0       	ldi	r25, 0x06	; 6
    5e14:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <serialPrintlnAndFlush(__FlashStringHelper const*)>
    5e18:	c4 e1       	ldi	r28, 0x14	; 20
    5e1a:	d0 e0       	ldi	r29, 0x00	; 0
#endif
    // Time spent here should not be a whole multiple of basic cycle time to avoid spuriously stationary async clock reading!
    for(int i = 20; (--i >= 0) && (earlySCT == getSubCycleTime()); )
    5e1c:	21 97       	sbiw	r28, 0x01	; 1
    5e1e:	8f ef       	ldi	r24, 0xFF	; 255
    5e20:	cf 3f       	cpi	r28, 0xFF	; 255
    5e22:	d8 07       	cpc	r29, r24
    5e24:	e9 f0       	breq	.+58     	; 0x5e60 <optionalPOST()+0xa4>
    5e26:	80 91 b2 00 	lds	r24, 0x00B2
    5e2a:	18 17       	cp	r17, r24
    5e2c:	c9 f4       	brne	.+50     	; 0x5e60 <optionalPOST()+0xa4>
      {
      sleepLowPowerMs(691);
    5e2e:	83 eb       	ldi	r24, 0xB3	; 179
    5e30:	92 e0       	ldi	r25, 0x02	; 2
    5e32:	0e 94 53 2e 	call	0x5ca6	; 0x5ca6 <sleepLowPowerMs(unsigned int)>
      captureEntropy1();
    5e36:	0e 94 17 18 	call	0x302e	; 0x302e <captureEntropy1()>
    5e3a:	f0 cf       	rjmp	.-32     	; 0x5e1c <optionalPOST()+0x60>
#endif
    const uint8_t latestSCT = getSubCycleTime();
    if(latestSCT == earlySCT)
      {
#if 1 && defined(DEBUG)
      DEBUG_SERIAL_PRINTLN_FLASHSTRING("Async 32768Hz clock may not be running!");
    5e3c:	86 ec       	ldi	r24, 0xC6	; 198
    5e3e:	96 e0       	ldi	r25, 0x06	; 6
    5e40:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif
      panic(F("Xtal dead")); // Async clock not running.
    5e44:	8c eb       	ldi	r24, 0xBC	; 188
    5e46:	96 e0       	ldi	r25, 0x06	; 6
    5e48:	0e 94 d9 2e 	call	0x5db2	; 0x5db2 <panic(__FlashStringHelper const*)>
      }
    }
//  posPOST(2, F("slow RTC clock OK"));

  // Single POST checkpoint for speed.
  posPOST(0, F("Radio, xtal, buttons/sensors OK"));
    5e4c:	80 e0       	ldi	r24, 0x00	; 0
    5e4e:	6c e9       	ldi	r22, 0x9C	; 156
    5e50:	76 e0       	ldi	r23, 0x06	; 6
    5e52:	0e 94 6d 2e 	call	0x5cda	; 0x5cda <posPOST(unsigned char, __FlashStringHelper const*)>
  }
    5e56:	df 91       	pop	r29
    5e58:	cf 91       	pop	r28
    5e5a:	1f 91       	pop	r17
    5e5c:	0f 91       	pop	r16
    5e5e:	08 95       	ret
      {
      sleepLowPowerMs(691);
      captureEntropy1();
      }
#endif
    const uint8_t latestSCT = getSubCycleTime();
    5e60:	80 91 b2 00 	lds	r24, 0x00B2
    if(latestSCT == earlySCT)
    5e64:	81 17       	cp	r24, r17
    5e66:	91 f7       	brne	.-28     	; 0x5e4c <optionalPOST()+0x90>
    5e68:	e9 cf       	rjmp	.-46     	; 0x5e3c <optionalPOST()+0x80>

00005e6a <setup>:
  }


// Setup routine: runs once after reset.
// Does some limited board self-test and will panic() if anything is obviously broken.
void setup()
    5e6a:	2f 92       	push	r2
    5e6c:	3f 92       	push	r3
    5e6e:	4f 92       	push	r4
    5e70:	5f 92       	push	r5
    5e72:	6f 92       	push	r6
    5e74:	7f 92       	push	r7
    5e76:	8f 92       	push	r8
    5e78:	9f 92       	push	r9
    5e7a:	af 92       	push	r10
    5e7c:	bf 92       	push	r11
    5e7e:	cf 92       	push	r12
    5e80:	df 92       	push	r13
    5e82:	ef 92       	push	r14
    5e84:	ff 92       	push	r15
    5e86:	0f 93       	push	r16
    5e88:	1f 93       	push	r17
    5e8a:	df 93       	push	r29
    5e8c:	cf 93       	push	r28
    5e8e:	00 d0       	rcall	.+0      	; 0x5e90 <setup+0x26>
    5e90:	00 d0       	rcall	.+0      	; 0x5e92 <setup+0x28>
    5e92:	0f 92       	push	r0
    5e94:	cd b7       	in	r28, 0x3d	; 61
    5e96:	de b7       	in	r29, 0x3e	; 62
  {
  // Set appropriate low-power states, interrupts, etc, ASAP.
  powerSetup();
    5e98:	0e 94 5f 19 	call	0x32be	; 0x32be <powerSetup()>
    5e9c:	0e e0       	ldi	r16, 0x0E	; 14
    5e9e:	10 e0       	ldi	r17, 0x00	; 0
    5ea0:	33 c0       	rjmp	.+102    	; 0x5f08 <setup+0x9e>
  {
  // Initialise all digital I/O to safe state ASAP and avoid floating lines where possible.
  // In absence of a specific alternative, drive low as an output to minimise consumption (eg from floating input).
  for(int i = 14; --i >= 0; ) // For all digital pins from 0 to 13 inclusive...
    {
    switch(i)
    5ea2:	05 30       	cpi	r16, 0x05	; 5
    5ea4:	11 05       	cpc	r17, r1
    5ea6:	61 f1       	breq	.+88     	; 0x5f00 <setup+0x96>
    5ea8:	06 30       	cpi	r16, 0x06	; 6
    5eaa:	11 05       	cpc	r17, r1
    5eac:	34 f4       	brge	.+12     	; 0x5eba <setup+0x50>
    5eae:	17 fd       	sbrc	r17, 7
    5eb0:	14 c0       	rjmp	.+40     	; 0x5eda <setup+0x70>
    5eb2:	04 30       	cpi	r16, 0x04	; 4
    5eb4:	11 05       	cpc	r17, r1
    5eb6:	24 f1       	brlt	.+72     	; 0x5f00 <setup+0x96>
    5eb8:	17 c0       	rjmp	.+46     	; 0x5ee8 <setup+0x7e>
    5eba:	09 30       	cpi	r16, 0x09	; 9
    5ebc:	11 05       	cpc	r17, r1
    5ebe:	e9 f0       	breq	.+58     	; 0x5efa <setup+0x90>
    5ec0:	0a 30       	cpi	r16, 0x0A	; 10
    5ec2:	11 05       	cpc	r17, r1
    5ec4:	24 f4       	brge	.+8      	; 0x5ece <setup+0x64>
    5ec6:	08 30       	cpi	r16, 0x08	; 8
    5ec8:	11 05       	cpc	r17, r1
    5eca:	39 f4       	brne	.+14     	; 0x5eda <setup+0x70>
    5ecc:	19 c0       	rjmp	.+50     	; 0x5f00 <setup+0x96>
    5ece:	0a 30       	cpi	r16, 0x0A	; 10
    5ed0:	11 05       	cpc	r17, r1
    5ed2:	b1 f0       	breq	.+44     	; 0x5f00 <setup+0x96>
    5ed4:	0c 30       	cpi	r16, 0x0C	; 12
    5ed6:	11 05       	cpc	r17, r1
    5ed8:	99 f0       	breq	.+38     	; 0x5f00 <setup+0x96>
      {
      // Low output is good safe low-power default.
      default: { digitalWrite(i, LOW); pinMode(i, OUTPUT); break; }
    5eda:	80 2f       	mov	r24, r16
    5edc:	60 e0       	ldi	r22, 0x00	; 0
    5ede:	0e 94 f8 38 	call	0x71f0	; 0x71f0 <digitalWrite>
    5ee2:	80 2f       	mov	r24, r16
    5ee4:	61 e0       	ldi	r22, 0x01	; 1
    5ee6:	0e c0       	rjmp	.+28     	; 0x5f04 <setup+0x9a>
      // Switch main UI LED on for the rest of initialisation...
#ifdef LED_HEATCALL
      case LED_HEATCALL: { pinMode(LED_HEATCALL, OUTPUT); digitalWrite(LED_HEATCALL, HIGH); break; }
#endif
#ifdef LED_HEATCALL_L
      case LED_HEATCALL_L: { pinMode(LED_HEATCALL_L, OUTPUT); digitalWrite(LED_HEATCALL_L, LOW); break; }
    5ee8:	84 e0       	ldi	r24, 0x04	; 4
    5eea:	61 e0       	ldi	r22, 0x01	; 1
    5eec:	0e 94 b9 38 	call	0x7172	; 0x7172 <pinMode>
    5ef0:	84 e0       	ldi	r24, 0x04	; 4
    5ef2:	60 e0       	ldi	r22, 0x00	; 0
    5ef4:	0e 94 f8 38 	call	0x71f0	; 0x71f0 <digitalWrite>
    5ef8:	07 c0       	rjmp	.+14     	; 0x5f08 <setup+0x9e>
#endif

#ifdef PIN_RFM_NIRQ 
      // Set as input to avoid contention current.
      case PIN_RFM_NIRQ: { pinMode(PIN_RFM_NIRQ, INPUT); break; }
    5efa:	89 e0       	ldi	r24, 0x09	; 9
    5efc:	60 e0       	ldi	r22, 0x00	; 0
    5efe:	02 c0       	rjmp	.+4      	; 0x5f04 <setup+0x9a>
#ifdef PIN_SERIAL_RX
      // Weak TX and RX pull-up empirically found to produce lowest leakage current
      // when 2xAA NiMH battery powered and connected to TTL-232R-3V3 USB lead.
      case PIN_SERIAL_RX: case PIN_SERIAL_TX:
#endif
        { pinMode(i, INPUT_PULLUP); break; }
    5f00:	80 2f       	mov	r24, r16
    5f02:	62 e0       	ldi	r22, 0x02	; 2
    5f04:	0e 94 b9 38 	call	0x7172	; 0x7172 <pinMode>
// Call this ASAP in setup() to configure I/O safely for the board, avoid pins floating, etc.
static inline void IOSetup()
  {
  // Initialise all digital I/O to safe state ASAP and avoid floating lines where possible.
  // In absence of a specific alternative, drive low as an output to minimise consumption (eg from floating input).
  for(int i = 14; --i >= 0; ) // For all digital pins from 0 to 13 inclusive...
    5f08:	01 50       	subi	r16, 0x01	; 1
    5f0a:	10 40       	sbci	r17, 0x00	; 0
    5f0c:	17 ff       	sbrs	r17, 7
    5f0e:	c9 cf       	rjmp	.-110    	; 0x5ea2 <setup+0x38>

  // IO setup for safety, eg to avoid pins floating.
  IOSetup();

  // Restore previous RTC state if available.
  restoreRTC();
    5f10:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <restoreRTC()>
  // TODO: consider code to calibrate the internal RC oscillator against the xtal, eg to keep serial comms happy, eg http://www.avrfreaks.net/index.php?name=PNphpBB2&file=printview&t=36237&start=0

  serialPrintAndFlush(F("\r\nOpenTRV booting: ")); // Leading CRLF to clear leading junk, eg from bootloader.
    5f14:	88 e8       	ldi	r24, 0x88	; 136
    5f16:	96 e0       	ldi	r25, 0x06	; 6
    5f18:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <serialPrintAndFlush(__FlashStringHelper const*)>
    serialPrintlnBuildVersion();
    5f1c:	0e 94 af 2e 	call	0x5d5e	; 0x5d5e <serialPrintlnBuildVersion()>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    5f20:	f9 99       	sbic	0x1f, 1	; 31
    5f22:	fe cf       	rjmp	.-4      	; 0x5f20 <setup+0xb6>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    5f24:	86 e0       	ldi	r24, 0x06	; 6
    5f26:	90 e0       	ldi	r25, 0x00	; 0
    5f28:	92 bd       	out	0x22, r25	; 34
    5f2a:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    5f2c:	f8 9a       	sbi	0x1f, 0	; 31
    5f2e:	20 b5       	in	r18, 0x20	; 32
    5f30:	2d 83       	std	Y+5, r18	; 0x05
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    5f32:	f9 99       	sbic	0x1f, 1	; 31
    5f34:	fe cf       	rjmp	.-4      	; 0x5f32 <setup+0xc8>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    5f36:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    5f38:	86 e0       	ldi	r24, 0x06	; 6
    5f3a:	90 e0       	ldi	r25, 0x00	; 0
    5f3c:	92 bd       	out	0x22, r25	; 34
    5f3e:	81 bd       	out	0x21, r24	; 33

  // Count resets to detect unexpected crashes/restarts.
  const uint8_t oldResetCount = eeprom_read_byte((uint8_t *)EE_START_RESET_COUNT);
  eeprom_write_byte((uint8_t *)EE_START_RESET_COUNT, 1 + oldResetCount);
    5f40:	3d 81       	ldd	r19, Y+5	; 0x05
    5f42:	3f 5f       	subi	r19, 0xFF	; 255
#endif
    EEDR = __value;
    5f44:	30 bd       	out	0x20, r19	; 32
    5f46:	31 50       	subi	r19, 0x01	; 1
    5f48:	3d 83       	std	Y+5, r19	; 0x05
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    5f4a:	0f b6       	in	r0, 0x3f	; 63
    5f4c:	f8 94       	cli
    5f4e:	fa 9a       	sbi	0x1f, 2	; 31
    5f50:	f9 9a       	sbi	0x1f, 1	; 31
    5f52:	0f be       	out	0x3f, r0	; 63

#ifdef DEBUG
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("DEBUG mode with serial logging");
    5f54:	89 e6       	ldi	r24, 0x69	; 105
    5f56:	96 e0       	ldi	r25, 0x06	; 6
    5f58:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif
#ifdef DEBUG
  DEBUG_SERIAL_PRINT_FLASHSTRING("Resets: ");
    5f5c:	80 e6       	ldi	r24, 0x60	; 96
    5f5e:	96 e0       	ldi	r25, 0x06	; 6
    5f60:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(oldResetCount);
    5f64:	8d 81       	ldd	r24, Y+5	; 0x05
    5f66:	90 e0       	ldi	r25, 0x00	; 0
    5f68:	6a e0       	ldi	r22, 0x0A	; 10
    5f6a:	70 e0       	ldi	r23, 0x00	; 0
    5f6c:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    5f70:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <serialPrintlnAndFlush()>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    5f74:	f9 99       	sbic	0x1f, 1	; 31
    5f76:	fe cf       	rjmp	.-4      	; 0x5f74 <setup+0x10a>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    5f78:	8d e1       	ldi	r24, 0x1D	; 29
    5f7a:	90 e0       	ldi	r25, 0x00	; 0
    5f7c:	92 bd       	out	0x22, r25	; 34
    5f7e:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    5f80:	f8 9a       	sbi	0x1f, 0	; 31
    5f82:	10 b5       	in	r17, 0x20	; 32
  const uint8_t overruns = (~eeprom_read_byte((uint8_t *)EE_START_OVERRUN_COUNTER)) & 0xff;
    5f84:	10 95       	com	r17
  if(0 != overruns)
    5f86:	61 f0       	breq	.+24     	; 0x5fa0 <setup+0x136>
    {
    DEBUG_SERIAL_PRINT_FLASHSTRING("Overruns: ");
    5f88:	85 e5       	ldi	r24, 0x55	; 85
    5f8a:	96 e0       	ldi	r25, 0x06	; 6
    5f8c:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <serialPrintAndFlush(__FlashStringHelper const*)>
    DEBUG_SERIAL_PRINT(overruns);
    5f90:	81 2f       	mov	r24, r17
    5f92:	90 e0       	ldi	r25, 0x00	; 0
    5f94:	6a e0       	ldi	r22, 0x0A	; 10
    5f96:	70 e0       	ldi	r23, 0x00	; 0
    5f98:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <serialPrintAndFlush(int, int)>
    DEBUG_SERIAL_PRINTLN();
    5f9c:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <serialPrintlnAndFlush()>
    }
  // Compute approx free RAM: see http://jeelabs.org/2011/05/22/atmega-memory-use/
  DEBUG_SERIAL_PRINT_FLASHSTRING("Free RAM: ");
    5fa0:	8a e4       	ldi	r24, 0x4A	; 74
    5fa2:	96 e0       	ldi	r25, 0x06	; 6
    5fa4:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <serialPrintAndFlush(__FlashStringHelper const*)>
  extern int __heap_start, *__brkval;
  int x;
  DEBUG_SERIAL_PRINT((int) &x - (__brkval == 0 ? (int) &__heap_start : (int) __brkval));
    5fa8:	80 91 fc 04 	lds	r24, 0x04FC
    5fac:	90 91 fd 04 	lds	r25, 0x04FD
    5fb0:	00 97       	sbiw	r24, 0x00	; 0
    5fb2:	11 f0       	breq	.+4      	; 0x5fb8 <setup+0x14e>
    5fb4:	9c 01       	movw	r18, r24
    5fb6:	02 c0       	rjmp	.+4      	; 0x5fbc <setup+0x152>
    5fb8:	20 e0       	ldi	r18, 0x00	; 0
    5fba:	35 e0       	ldi	r19, 0x05	; 5
    5fbc:	ce 01       	movw	r24, r28
    5fbe:	01 96       	adiw	r24, 0x01	; 1
    5fc0:	82 1b       	sub	r24, r18
    5fc2:	93 0b       	sbc	r25, r19
    5fc4:	6a e0       	ldi	r22, 0x0A	; 10
    5fc6:	70 e0       	ldi	r23, 0x00	; 0
    5fc8:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    5fcc:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <serialPrintlnAndFlush()>
#if defined(ALT_MAIN_LOOP)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("ALTERNATE MAIN LOOP WILL BE RUN...");
#elif defined(UNIT_TESTS)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("UNIT TESTS WILL BE RUN...");
    5fd0:	80 e3       	ldi	r24, 0x30	; 48
    5fd2:	96 e0       	ldi	r25, 0x06	; 6
    5fd4:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <serialPrintlnAndFlush(__FlashStringHelper const*)>
// POST may take too long and do unwanted things,
// especially for non-standard hardware setup.
#if defined(ALT_MAIN_LOOP)
  POSTalt(); // Do alternate POST and setup if required.
#else
  optionalPOST();
    5fd8:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <optionalPOST()>

  // No external sensors are *assumed* present if running alt main loop.
  // This may mean that the alt loop/POST will have to initialise them explicitly,
  // and the initial seed entropy may be marginally reduced also.
#if !defined(ALT_MAIN_LOOP)
  const int light = AmbLight.read();
    5fdc:	8f e6       	ldi	r24, 0x6F	; 111
    5fde:	93 e0       	ldi	r25, 0x03	; 3
    5fe0:	0e 94 46 33 	call	0x668c	; 0x668c <AmbientLight::read()>
    5fe4:	5c 01       	movw	r10, r24
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("light: ");
    5fe6:	88 e2       	ldi	r24, 0x28	; 40
    5fe8:	96 e0       	ldi	r25, 0x06	; 6
    5fea:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(light);
    5fee:	c5 01       	movw	r24, r10
    5ff0:	6a e0       	ldi	r22, 0x0A	; 10
    5ff2:	70 e0       	ldi	r23, 0x00	; 0
    5ff4:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    5ff8:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <serialPrintlnAndFlush()>
#endif
//  // Assume 0 or full-scale values unlikely.
//  if((0 == light) || (light >= 1023)) { panic(F("LDR fault")); }
  const int heat = TemperatureC16.read();
    5ffc:	88 e7       	ldi	r24, 0x78	; 120
    5ffe:	93 e0       	ldi	r25, 0x03	; 3
    6000:	0e 94 6a 32 	call	0x64d4	; 0x64d4 <RoomTemperatureC16::read()>
    6004:	1c 01       	movw	r2, r24
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("temp: ");
    6006:	81 e2       	ldi	r24, 0x21	; 33
    6008:	96 e0       	ldi	r25, 0x06	; 6
    600a:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(heat);
    600e:	c1 01       	movw	r24, r2
    6010:	6a e0       	ldi	r22, 0x0A	; 10
    6012:	70 e0       	ldi	r23, 0x00	; 0
    6014:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    6018:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <serialPrintlnAndFlush()>
#endif
#ifdef HUMIDITY_SENSOR_SUPPORT
  const uint8_t rh = RelHumidity.read();
    601c:	84 e7       	ldi	r24, 0x74	; 116
    601e:	93 e0       	ldi	r25, 0x03	; 3
    6020:	0e 94 d2 32 	call	0x65a4	; 0x65a4 <HumiditySensorSHT21::read()>
    6024:	e8 2e       	mov	r14, r24
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("RH%: ");
    6026:	8b e1       	ldi	r24, 0x1B	; 27
    6028:	96 e0       	ldi	r25, 0x06	; 6
    602a:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(rh);
    602e:	8e 2d       	mov	r24, r14
    6030:	90 e0       	ldi	r25, 0x00	; 0
    6032:	6a e0       	ldi	r22, 0x0A	; 10
    6034:	70 e0       	ldi	r23, 0x00	; 0
    6036:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    603a:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <serialPrintlnAndFlush()>
#endif
#endif
#if defined(TEMP_POT_AVAILABLE)
  const int tempPot = TempPot.read();
    603e:	8c e7       	ldi	r24, 0x7C	; 124
    6040:	93 e0       	ldi	r25, 0x03	; 3
    6042:	0e 94 d6 31 	call	0x63ac	; 0x63ac <TemperaturePot::read()>
    6046:	d8 2e       	mov	r13, r24
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("temp pot: ");
    6048:	80 e1       	ldi	r24, 0x10	; 16
    604a:	96 e0       	ldi	r25, 0x06	; 6
    604c:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(tempPot);
    6050:	8d 2d       	mov	r24, r13
    6052:	90 e0       	ldi	r25, 0x00	; 0
    6054:	6a e0       	ldi	r22, 0x0A	; 10
    6056:	70 e0       	ldi	r23, 0x00	; 0
    6058:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    605c:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <serialPrintlnAndFlush()>
#endif
#endif
#endif

  // Get current power supply voltage (internal sensor).
  const uint16_t Vcc = Supply_mV.read();
    6060:	83 e2       	ldi	r24, 0x23	; 35
    6062:	93 e0       	ldi	r25, 0x03	; 3
    6064:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <SupplyVoltageMilliVolts::read()>
    6068:	9c 83       	std	Y+4, r25	; 0x04
    606a:	8b 83       	std	Y+3, r24	; 0x03
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("Vcc: ");
    606c:	8a e0       	ldi	r24, 0x0A	; 10
    606e:	96 e0       	ldi	r25, 0x06	; 6
    6070:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(Vcc);
    6074:	8b 81       	ldd	r24, Y+3	; 0x03
    6076:	9c 81       	ldd	r25, Y+4	; 0x04
    6078:	6a e0       	ldi	r22, 0x0A	; 10
    607a:	70 e0       	ldi	r23, 0x00	; 0
    607c:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <serialPrintAndFlush(unsigned int, int)>
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("mV");
    6080:	87 e0       	ldi	r24, 0x07	; 7
    6082:	96 e0       	ldi	r25, 0x06	; 6
    6084:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif
  // Get internal temperature measurement (internal sensor).
  const int intTempC16 = readInternalTemperatureC16();
    6088:	0e 94 28 17 	call	0x2e50	; 0x2e50 <readInternalTemperatureC16()>
    608c:	4c 01       	movw	r8, r24
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("Int temp: ");
    608e:	8c ef       	ldi	r24, 0xFC	; 252
    6090:	95 e0       	ldi	r25, 0x05	; 5
    6092:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT((intTempC16 + 8) >> 4);
    6096:	c4 01       	movw	r24, r8
    6098:	08 96       	adiw	r24, 0x08	; 8
    609a:	a4 e0       	ldi	r26, 0x04	; 4
    609c:	95 95       	asr	r25
    609e:	87 95       	ror	r24
    60a0:	aa 95       	dec	r26
    60a2:	e1 f7       	brne	.-8      	; 0x609c <setup+0x232>
    60a4:	6a e0       	ldi	r22, 0x0A	; 10
    60a6:	70 e0       	ldi	r23, 0x00	; 0
    60a8:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINT_FLASHSTRING("C / ");
    60ac:	87 ef       	ldi	r24, 0xF7	; 247
    60ae:	95 e0       	ldi	r25, 0x05	; 5
    60b0:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(intTempC16);
    60b4:	c4 01       	movw	r24, r8
    60b6:	6a e0       	ldi	r22, 0x0A	; 10
    60b8:	70 e0       	ldi	r23, 0x00	; 0
    60ba:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    60be:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <serialPrintlnAndFlush()>
    60c2:	e0 e0       	ldi	r30, 0x00	; 0
    60c4:	f1 e0       	ldi	r31, 0x01	; 1
    60c6:	44 24       	eor	r4, r4
    60c8:	4a 94       	dec	r4
    60ca:	54 2c       	mov	r5, r4
        "eor    %A0,__tmp_reg__"

        : "=d" (__ret)
        : "r" (__data), "0" (__crc)
        : "r0"
    );
    60cc:	81 91       	ld	r24, Z+
    60ce:	a2 01       	movw	r20, r4
    60d0:	48 27       	eor	r20, r24
    60d2:	04 2e       	mov	r0, r20
    60d4:	42 95       	swap	r20
    60d6:	40 7f       	andi	r20, 0xF0	; 240
    60d8:	40 25       	eor	r20, r0
    60da:	05 2e       	mov	r0, r21
    60dc:	54 2f       	mov	r21, r20
    60de:	42 95       	swap	r20
    60e0:	4f 70       	andi	r20, 0x0F	; 15
    60e2:	04 26       	eor	r0, r20
    60e4:	46 95       	lsr	r20
    60e6:	54 27       	eor	r21, r20
    60e8:	45 27       	eor	r20, r21
    60ea:	44 0f       	add	r20, r20
    60ec:	44 0f       	add	r20, r20
    60ee:	44 0f       	add	r20, r20
    60f0:	40 25       	eor	r20, r0
    60f2:	2a 01       	movw	r4, r20
#define RAMSTART (0x100)
#endif
static uint16_t sramCRC()
  {
  uint16_t result = ~0U;
  for(uint8_t *p = (uint8_t *)RAMSTART; p <= (uint8_t *)RAMEND; ++p)
    60f4:	59 e0       	ldi	r21, 0x09	; 9
    60f6:	e0 30       	cpi	r30, 0x00	; 0
    60f8:	f5 07       	cpc	r31, r21
    60fa:	41 f7       	brne	.-48     	; 0x60cc <setup+0x262>
    60fc:	20 e0       	ldi	r18, 0x00	; 0
    60fe:	30 e0       	ldi	r19, 0x00	; 0
    6100:	66 24       	eor	r6, r6
    6102:	6a 94       	dec	r6
    6104:	76 2c       	mov	r7, r6
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    6106:	f9 99       	sbic	0x1f, 1	; 31
    6108:	fe cf       	rjmp	.-4      	; 0x6106 <setup+0x29c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    610a:	32 bd       	out	0x22, r19	; 34
    610c:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    610e:	f8 9a       	sbi	0x1f, 0	; 31
    6110:	80 b5       	in	r24, 0x20	; 32
    6112:	a3 01       	movw	r20, r6
    6114:	48 27       	eor	r20, r24
    6116:	04 2e       	mov	r0, r20
    6118:	42 95       	swap	r20
    611a:	40 7f       	andi	r20, 0xF0	; 240
    611c:	40 25       	eor	r20, r0
    611e:	05 2e       	mov	r0, r21
    6120:	54 2f       	mov	r21, r20
    6122:	42 95       	swap	r20
    6124:	4f 70       	andi	r20, 0x0F	; 15
    6126:	04 26       	eor	r0, r20
    6128:	46 95       	lsr	r20
    612a:	54 27       	eor	r21, r20
    612c:	45 27       	eor	r20, r21
    612e:	44 0f       	add	r20, r20
    6130:	44 0f       	add	r20, r20
    6132:	44 0f       	add	r20, r20
    6134:	40 25       	eor	r20, r0
    6136:	3a 01       	movw	r6, r20
  }
// Compute a CRC of all of EEPROM as a hash that may contain some entropy, particularly across restarts.
static uint16_t eeCRC()
  {
  uint16_t result = ~0U;
  for(uint8_t *p = (uint8_t *)0; p <= (uint8_t *)E2END; ++p)
    6138:	2f 5f       	subi	r18, 0xFF	; 255
    613a:	3f 4f       	sbci	r19, 0xFF	; 255
    613c:	54 e0       	ldi	r21, 0x04	; 4
    613e:	20 30       	cpi	r18, 0x00	; 0
    6140:	35 07       	cpc	r19, r21
    6142:	09 f7       	brne	.-62     	; 0x6106 <setup+0x29c>
#if defined(HUMIDITY_SENSOR_SUPPORT)
                       ((((uint16_t)rh) << 8) - rh) ^
#endif
#endif
                       (getMinutesSinceMidnightLT() << 5) ^
                       (((uint16_t)getSubCycleTime()) << 6);
    6144:	0d 2d       	mov	r16, r13
    6146:	10 e0       	ldi	r17, 0x00	; 0
    6148:	ff 24       	eor	r15, r15
    614a:	0e 94 41 1c 	call	0x3882	; 0x3882 <getMinutesSinceMidnightLT()>
    614e:	20 91 b2 00 	lds	r18, 0x00B2
    6152:	c2 2e       	mov	r12, r18
    6154:	dd 24       	eor	r13, r13
    6156:	f6 e0       	ldi	r31, 0x06	; 6
    6158:	cc 0c       	add	r12, r12
    615a:	dd 1c       	adc	r13, r13
    615c:	fa 95       	dec	r31
    615e:	e1 f7       	brne	.-8      	; 0x6158 <setup+0x2ee>
    6160:	26 e3       	ldi	r18, 0x36	; 54
    6162:	30 e0       	ldi	r19, 0x00	; 0
    6164:	c2 2a       	or	r12, r18
    6166:	d3 2a       	or	r13, r19
    6168:	4b 81       	ldd	r20, Y+3	; 0x03
    616a:	5c 81       	ldd	r21, Y+4	; 0x04
    616c:	c4 26       	eor	r12, r20
    616e:	d5 26       	eor	r13, r21
    6170:	88 0c       	add	r8, r8
    6172:	99 1c       	adc	r9, r9
    6174:	c8 24       	eor	r12, r8
    6176:	d9 24       	eor	r13, r9
    6178:	22 0c       	add	r2, r2
    617a:	33 1c       	adc	r3, r3
    617c:	22 0c       	add	r2, r2
    617e:	33 1c       	adc	r3, r3
    6180:	c2 24       	eor	r12, r2
    6182:	d3 24       	eor	r13, r3
    6184:	64 e0       	ldi	r22, 0x04	; 4
    6186:	aa 0c       	add	r10, r10
    6188:	bb 1c       	adc	r11, r11
    618a:	6a 95       	dec	r22
    618c:	e1 f7       	brne	.-8      	; 0x6186 <setup+0x31c>
    618e:	ca 24       	eor	r12, r10
    6190:	db 24       	eor	r13, r11
    6192:	3e 2d       	mov	r19, r14
    6194:	22 27       	eor	r18, r18
    6196:	2e 19       	sub	r18, r14
    6198:	3f 09       	sbc	r19, r15
    619a:	c2 26       	eor	r12, r18
    619c:	d3 26       	eor	r13, r19
    619e:	98 01       	movw	r18, r16
    61a0:	43 e0       	ldi	r20, 0x03	; 3
    61a2:	22 0f       	add	r18, r18
    61a4:	33 1f       	adc	r19, r19
    61a6:	4a 95       	dec	r20
    61a8:	e1 f7       	brne	.-8      	; 0x61a2 <setup+0x338>
    61aa:	20 0f       	add	r18, r16
    61ac:	31 1f       	adc	r19, r17
    61ae:	c2 26       	eor	r12, r18
    61b0:	d3 26       	eor	r13, r19
    61b2:	25 e0       	ldi	r18, 0x05	; 5
    61b4:	88 0f       	add	r24, r24
    61b6:	99 1f       	adc	r25, r25
    61b8:	2a 95       	dec	r18
    61ba:	e1 f7       	brne	.-8      	; 0x61b4 <setup+0x34a>
    61bc:	c8 26       	eor	r12, r24
    61be:	d9 26       	eor	r13, r25

  //const long seed1 = ((((long) clockJitterRTC()) << 13) ^ (((long)clockJitterWDT()) << 21) ^ (((long)(srseed^eeseed)) << 16)) + s16;
  // Seed simple/fast/small built-in PRNG.  (Smaller and faster than srandom()/random().)
  const uint8_t nar1 = noisyADCRead();
    61c0:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <noisyADCRead()>
    61c4:	18 2f       	mov	r17, r24
  seedRNG8(nar1 ^ (uint8_t) s16, oldResetCount - (uint8_t)((s16+eeseed) >> 8), clockJitterWDT() ^ (uint8_t)srseed);
    61c6:	3c 2c       	mov	r3, r12
    61c8:	38 26       	eor	r3, r24
    61ca:	c6 01       	movw	r24, r12
    61cc:	86 0d       	add	r24, r6
    61ce:	97 1d       	adc	r25, r7
    61d0:	8d 80       	ldd	r8, Y+5	; 0x05
    61d2:	89 1a       	sub	r8, r25
    61d4:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <clockJitterWDT()>
    61d8:	e4 2c       	mov	r14, r4
    61da:	48 2f       	mov	r20, r24
    61dc:	44 25       	eor	r20, r4
    61de:	83 2d       	mov	r24, r3
    61e0:	68 2d       	mov	r22, r8
    61e2:	0e 94 83 19 	call	0x3306	; 0x3306 <seedRNG8(unsigned char, unsigned char, unsigned char)>
  DEBUG_SERIAL_PRINTFMT(nar1, BIN);
  DEBUG_SERIAL_PRINTLN();
#endif
  // TODO: seed other/better PRNGs.
  // Feed in mainly persistent/nonvolatile state explicitly. 
  addEntropyToPool(oldResetCount ^ eeseed, 0);
    61e6:	96 2c       	mov	r9, r6
    61e8:	8d 81       	ldd	r24, Y+5	; 0x05
    61ea:	86 25       	eor	r24, r6
    61ec:	60 e0       	ldi	r22, 0x00	; 0
    61ee:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <addEntropyToPool(unsigned char, unsigned char)>
  addEntropyToPool((uint8_t)(eeseed >> 8) + nar1, 0);
    61f2:	a7 2c       	mov	r10, r7
    61f4:	bb 24       	eor	r11, r11
    61f6:	81 2f       	mov	r24, r17
    61f8:	8a 0d       	add	r24, r10
    61fa:	60 e0       	ldi	r22, 0x00	; 0
    61fc:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <addEntropyToPool(unsigned char, unsigned char)>
  addEntropyToPool((uint8_t)s16 ^ (uint8_t)(s16 >> 8) , 0);
    6200:	8c 2d       	mov	r24, r12
    6202:	8d 25       	eor	r24, r13
    6204:	60 e0       	ldi	r22, 0x00	; 0
    6206:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <addEntropyToPool(unsigned char, unsigned char)>
    620a:	02 e0       	ldi	r16, 0x02	; 2
    620c:	10 e0       	ldi	r17, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    620e:	f9 99       	sbic	0x1f, 1	; 31
    6210:	fe cf       	rjmp	.-4      	; 0x620e <setup+0x3a4>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    6212:	12 bd       	out	0x22, r17	; 34
    6214:	01 bd       	out	0x21, r16	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    6216:	f8 9a       	sbi	0x1f, 0	; 31
    6218:	80 b5       	in	r24, 0x20	; 32
  for(uint8_t i = 0; i < EE_LEN_SEED; ++i)
    { addEntropyToPool(eeprom_read_byte((uint8_t *)(EE_START_SEED + i)), 0); }
    621a:	60 e0       	ldi	r22, 0x00	; 0
    621c:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <addEntropyToPool(unsigned char, unsigned char)>
    6220:	0f 5f       	subi	r16, 0xFF	; 255
    6222:	1f 4f       	sbci	r17, 0xFF	; 255
  // TODO: seed other/better PRNGs.
  // Feed in mainly persistent/nonvolatile state explicitly. 
  addEntropyToPool(oldResetCount ^ eeseed, 0);
  addEntropyToPool((uint8_t)(eeseed >> 8) + nar1, 0);
  addEntropyToPool((uint8_t)s16 ^ (uint8_t)(s16 >> 8) , 0);
  for(uint8_t i = 0; i < EE_LEN_SEED; ++i)
    6224:	06 30       	cpi	r16, 0x06	; 6
    6226:	11 05       	cpc	r17, r1
    6228:	91 f7       	brne	.-28     	; 0x620e <setup+0x3a4>
    { addEntropyToPool(eeprom_read_byte((uint8_t *)(EE_START_SEED + i)), 0); }
  addEntropyToPool(noisyADCRead(), 4); // Conservative first push of noise into pool.
    622a:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <noisyADCRead()>
    622e:	64 e0       	ldi	r22, 0x04	; 4
    6230:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <addEntropyToPool(unsigned char, unsigned char)>
  // Carry a few bits of entropy over a reset by picking one of the four designated EEPROM bytes at random;
  // if zero, erase to 0xff, else AND in part of the seed including some of the previous EEPROM hash (and write).
  // This amounts to about a quarter of an erase/write cycle per reset/restart per byte, or 400k restarts endurance!
  // These 4 bytes should be picked up as part of the hash/CRC of EEPROM above, next time,
  // essentially forming a longish-cycle (poor) PRNG even with little new real entropy each time.
  seedRNG8(nar1 ^ (uint8_t) s16, oldResetCount - (uint8_t)((s16+eeseed) >> 8), clockJitterWDT() ^ (uint8_t)srseed);
    6234:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <clockJitterWDT()>
    6238:	e8 26       	eor	r14, r24
    623a:	83 2d       	mov	r24, r3
    623c:	68 2d       	mov	r22, r8
    623e:	4e 2d       	mov	r20, r14
    6240:	0e 94 83 19 	call	0x3306	; 0x3306 <seedRNG8(unsigned char, unsigned char, unsigned char)>
  uint8_t *const erp = (uint8_t *)(EE_START_SEED + (3&((s16)^((eeseed>>8)+(__TIME__[7]))))); // Use some new and some eeseed bits to choose which byte to updated.
    6244:	85 01       	movw	r16, r10
    6246:	0c 25       	eor	r16, r12
    6248:	1d 25       	eor	r17, r13
    624a:	03 70       	andi	r16, 0x03	; 3
    624c:	10 70       	andi	r17, 0x00	; 0
    624e:	0e 5f       	subi	r16, 0xFE	; 254
    6250:	1f 4f       	sbci	r17, 0xFF	; 255
    6252:	e0 2e       	mov	r14, r16
    6254:	d1 2e       	mov	r13, r17
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    6256:	f9 99       	sbic	0x1f, 1	; 31
    6258:	fe cf       	rjmp	.-4      	; 0x6256 <setup+0x3ec>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    625a:	12 bd       	out	0x22, r17	; 34
    625c:	01 bd       	out	0x21, r16	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    625e:	f8 9a       	sbi	0x1f, 0	; 31
    6260:	80 b5       	in	r24, 0x20	; 32
  const uint8_t erv = eeprom_read_byte(erp);
  if(0 == erv) { eeprom_smart_erase_byte(erp); }
    6262:	88 23       	and	r24, r24
    6264:	29 f4       	brne	.+10     	; 0x6270 <setup+0x406>
    6266:	8e 2d       	mov	r24, r14
    6268:	9d 2d       	mov	r25, r13
    626a:	0e 94 81 0a 	call	0x1502	; 0x1502 <eeprom_smart_erase_byte(unsigned char*)>
    626e:	08 c0       	rjmp	.+16     	; 0x6280 <setup+0x416>
  else { eeprom_smart_clear_bits(erp, clockJitterEntropyByte() + ((uint8_t)eeseed)); } // Nominally include disjoint set of eeseed bits in choice of which to clear.
    6270:	0e 94 76 17 	call	0x2eec	; 0x2eec <clockJitterEntropyByte()>
    6274:	98 0e       	add	r9, r24
    6276:	8e 2d       	mov	r24, r14
    6278:	9d 2d       	mov	r25, r13
    627a:	69 2d       	mov	r22, r9
    627c:	0e 94 95 0a 	call	0x152a	; 0x152a <eeprom_smart_clear_bits(unsigned char*, unsigned char)>
#endif


#if !defined(ALT_MAIN_LOOP)
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("Computing initial target/demand...");
    6280:	84 ed       	ldi	r24, 0xD4	; 212
    6282:	95 e0       	ldi	r25, 0x05	; 5
    6284:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <serialPrintlnAndFlush(__FlashStringHelper const*)>
    6288:	8a e1       	ldi	r24, 0x1A	; 26
    628a:	92 e0       	ldi	r25, 0x02	; 2
    628c:	0e 94 2c 0a 	call	0x1458	; 0x1458 <ModelledRadValve::computeCallForHeat()>
    6290:	80 93 1f 02 	sts	0x021F, r24
    6294:	80 91 1c 02 	lds	r24, 0x021C
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("Creating initial FHT8V frame...");
#endif
  // Unconditionally ensure that a valid FHT8V TRV command frame has been computed and stored
  // in case this unit is actually controlling a local valve.
  FHT8VCreateValveSetCmdFrame();
    6298:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <FHT8VCreateValveSetCmdFrame()>


  // Ensure unique node ID set up (mainly on first use).
  // Have one attempt (don't want to bang already failign EEPROM) to force-reset if not good, then panic.
  // Needs to have had entropy gathered, etc.
  if(!ensureIDCreated())
    629c:	80 e0       	ldi	r24, 0x00	; 0
    629e:	0e 94 81 12 	call	0x2502	; 0x2502 <ensureIDCreated(bool)>
    62a2:	88 23       	and	r24, r24
    62a4:	49 f4       	brne	.+18     	; 0x62b8 <setup+0x44e>
    {
    if(!ensureIDCreated(true)) // Force reset.
    62a6:	81 e0       	ldi	r24, 0x01	; 1
    62a8:	0e 94 81 12 	call	0x2502	; 0x2502 <ensureIDCreated(bool)>
    62ac:	88 23       	and	r24, r24
    62ae:	21 f4       	brne	.+8      	; 0x62b8 <setup+0x44e>
      { panic(F("Invalid ID and cannot reset, sorry.")); }
    62b0:	80 eb       	ldi	r24, 0xB0	; 176
    62b2:	95 e0       	ldi	r25, 0x05	; 5
    62b4:	0e 94 d9 2e 	call	0x5db2	; 0x5db2 <panic(__FlashStringHelper const*)>
    }


  // Initialised: turn heatcall UI LED off.
//  pinMode(LED_HEATCALL, OUTPUT);
  LED_HEATCALL_OFF();
    62b8:	5c 9a       	sbi	0x0b, 4	; 11
  
#if defined(SUPPORT_CLI) && !defined(ALT_MAIN_LOOP)
  // Help user get to CLI.
  serialPrintlnAndFlush(F("? at CLI prompt for help"));
    62ba:	87 e9       	ldi	r24, 0x97	; 151
    62bc:	95 e0       	ldi	r25, 0x05	; 5
    62be:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif

#if !defined(ALT_MAIN_LOOP)
  // Report initial status.
  serialStatusReport();
    62c2:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <serialStatusReport()>
  // Do OpenTRV-specific (late) setup.
  setupOpenTRV();
    62c6:	0e 94 06 09 	call	0x120c	; 0x120c <setupOpenTRV()>
#endif
  }
    62ca:	0f 90       	pop	r0
    62cc:	0f 90       	pop	r0
    62ce:	0f 90       	pop	r0
    62d0:	0f 90       	pop	r0
    62d2:	0f 90       	pop	r0
    62d4:	cf 91       	pop	r28
    62d6:	df 91       	pop	r29
    62d8:	1f 91       	pop	r17
    62da:	0f 91       	pop	r16
    62dc:	ff 90       	pop	r15
    62de:	ef 90       	pop	r14
    62e0:	df 90       	pop	r13
    62e2:	cf 90       	pop	r12
    62e4:	bf 90       	pop	r11
    62e6:	af 90       	pop	r10
    62e8:	9f 90       	pop	r9
    62ea:	8f 90       	pop	r8
    62ec:	7f 90       	pop	r7
    62ee:	6f 90       	pop	r6
    62f0:	5f 90       	pop	r5
    62f2:	4f 90       	pop	r4
    62f4:	3f 90       	pop	r3
    62f6:	2f 90       	pop	r2
    62f8:	08 95       	ret

000062fa <SimpleTSUint8Sensor::get() const>:
  public:
    // Return last value fetched by read(); undefined before first read().
    // Usually fast.
    // Often likely to be thread-safe or usable within ISRs (Interrupt Service Routines),
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual uint8_t get() const { return(value); }
    62fa:	fc 01       	movw	r30, r24
    62fc:	82 81       	ldd	r24, Z+2	; 0x02
    62fe:	08 95       	ret

00006300 <AmbientLight::preferredPollInterval_s() const>:
    // Potentially expensive/slow.
    // Not thread-safe nor usable within ISRs (Interrupt Service Routines).
    virtual uint16_t read();

    // Preferred poll interval (in seconds); should bve called at constant rate, usually 1/60s.
    virtual uint8_t preferredPollInterval_s() const { return(60); }
    6300:	8c e3       	ldi	r24, 0x3C	; 60
    6302:	08 95       	ret

00006304 <AmbientLight::get() const>:

    // Return last value fetched by read(); undefined before first read().
    // Fast.
    // Thread-safe and usable within ISRs (Interrupt Service Routines).
    virtual uint16_t get() const { return(value); }
    6304:	fc 01       	movw	r30, r24
    6306:	82 81       	ldd	r24, Z+2	; 0x02
    6308:	93 81       	ldd	r25, Z+3	; 0x03
    630a:	08 95       	ret

0000630c <AmbientLight::isValid(unsigned int) const>:

    // Returns true if the sensor reading value passed is potentially valid, eg in-range.
    virtual bool isValid(const uint16_t value) const { return(value < 1024); }
    630c:	80 e0       	ldi	r24, 0x00	; 0
    630e:	60 50       	subi	r22, 0x00	; 0
    6310:	74 40       	sbci	r23, 0x04	; 4
    6312:	08 f4       	brcc	.+2      	; 0x6316 <AmbientLight::isValid(unsigned int) const+0xa>
    6314:	81 e0       	ldi	r24, 0x01	; 1
    6316:	08 95       	ret

00006318 <AmbientLight::tag() const>:

    // Returns a suggested (JSON) tag/field/key name including units of get(); NULL means no recommended tag.
    // The lifetime of the pointed-to text must be at least that of the Sensor instance.
    virtual const char *tag() const { return("l"); }
    6318:	8b e1       	ldi	r24, 0x1B	; 27
    631a:	91 e0       	ldi	r25, 0x01	; 1
    631c:	08 95       	ret

0000631e <RoomTemperatureC16::get() const>:
    virtual int read();

    // Return last value fetched by read(); undefined before first read().
    // Fast.
    // Not thread-safe nor usable within ISRs (Interrupt Service Routines).
    virtual int get() const { return(value); }
    631e:	fc 01       	movw	r30, r24
    6320:	82 81       	ldd	r24, Z+2	; 0x02
    6322:	93 81       	ldd	r25, Z+3	; 0x03
    6324:	08 95       	ret

00006326 <RoomTemperatureC16::tag() const>:

    // Returns a suggested (JSON) tag/field/key name including units of get(); NULL means no recommended tag.
    // The lifetime of the pointed-to text must be at least that of the Sensor instance.
    virtual const char *tag() const { return("T|C16"); }
    6326:	8d e1       	ldi	r24, 0x1D	; 29
    6328:	91 e0       	ldi	r25, 0x01	; 1
    632a:	08 95       	ret

0000632c <HumiditySensorSHT21::isValid(unsigned char) const>:
    // Potentially expensive/slow.
    // Not thread-safe nor usable within ISRs (Interrupt Service Routines).
    virtual uint8_t read();

    // Returns true if the sensor reading value passed is potentially valid, ie in range [0,100].
    virtual bool isValid(const uint8_t value) const { return(value <= 100); }
    632c:	80 e0       	ldi	r24, 0x00	; 0
    632e:	65 36       	cpi	r22, 0x65	; 101
    6330:	08 f4       	brcc	.+2      	; 0x6334 <HumiditySensorSHT21::isValid(unsigned char) const+0x8>
    6332:	81 e0       	ldi	r24, 0x01	; 1
    6334:	08 95       	ret

00006336 <HumiditySensorSHT21::tag() const>:

    // Returns a suggested (JSON) tag/field/key name including units of get(); NULL means no recommended tag.
    // The lifetime of the pointed-to text must be at least that of the Sensor instance.
    virtual const char *tag() const { return("H|%"); }
    6336:	83 e2       	ldi	r24, 0x23	; 35
    6338:	91 e0       	ldi	r25, 0x01	; 1
    633a:	08 95       	ret

0000633c <Sensor<int>::isValid(int) const>:
    // BUT READ IMPLEMENTATION DOCUMENTATION BEFORE TREATING AS thread/ISR-safe.
    virtual T get() const = 0;

    // Returns true if this sensor reading value passed is potentially valid, eg in-range.
    // Default is to always return true, ie all values potentially valid.
    virtual bool isValid(T value) const { return(true); }
    633c:	81 e0       	ldi	r24, 0x01	; 1
    633e:	08 95       	ret

00006340 <Sensor<int>::preferredPollInterval_s() const>:
 
    // Returns non-zero if this implementation requires a regular call to read() to operate correctly.
    // Preferred poll interval (in seconds) or 0 if no regular poll() call required.
    // Default returns 0 indicating regular call to read() not required,
    // only as required to fetch new values from the underlying sensor.
    virtual uint8_t preferredPollInterval_s() const { return(0); }
    6340:	80 e0       	ldi	r24, 0x00	; 0
    6342:	08 95       	ret

00006344 <Sensor<int>::handleInterruptSimple()>:
    // Must be fast and ISR (Interrupt Service Routine) safe.
    // Returns true if interrupt was successfully handled and cleared
    // else another interrupt handler in the chain may be called
    // to attempt to clear the interrupt.
    // By default does nothing (and returns false).
    virtual bool handleInterruptSimple() { return(false); }
    6344:	80 e0       	ldi	r24, 0x00	; 0
    6346:	08 95       	ret

00006348 <Sensor<int>::begin()>:

    // Begin access to this sensor if applicable and not already begun.
    // Returns true if it needed to be begun.
    // Allows logic to end() if required at the end of a block, etc.
    // Defaults to do nothing (and return false).
    virtual bool begin() { return(false); }
    6348:	80 e0       	ldi	r24, 0x00	; 0
    634a:	08 95       	ret

0000634c <Sensor<int>::isAvailable() const>:

    // Returns true if this sensor is currently available.
    // True by default unless implementation overrides.
    // For those sensors that need starting this will be false before begin().
    virtual bool isAvailable() const { return(true); }
    634c:	81 e0       	ldi	r24, 0x01	; 1
    634e:	08 95       	ret

00006350 <Sensor<int>::end()>:

    // End access to this sensor if applicable and not already ended.
    // Returns true if it needed to be ended.
    // Defaults to do nothing (and return false).
    virtual bool end() { return(false); }
    6350:	80 e0       	ldi	r24, 0x00	; 0
    6352:	08 95       	ret

00006354 <global constructors keyed to _ZN12AmbientLight4readEv>:
    // Marked volatile for thread-safe (simple) lock-free access.
    volatile bool isRoomLitFlag;
 
  public:
    // Initialise to cautious values.
    AmbientLight() : value(0) { }
    6354:	80 ee       	ldi	r24, 0xE0	; 224
    6356:	91 e0       	ldi	r25, 0x01	; 1
    6358:	90 93 70 03 	sts	0x0370, r25
    635c:	80 93 6f 03 	sts	0x036F, r24
    6360:	10 92 72 03 	sts	0x0372, r1
    6364:	10 92 71 03 	sts	0x0371, r1
      volatile uint8_t value;

      // By default initialise the value to zero.
      SimpleTSUint8Sensor() : value(0) { }
      // Can initialise to a chosen value.
      SimpleTSUint8Sensor(const uint8_t v) : value(v) { }
    6368:	8f ef       	ldi	r24, 0xFF	; 255
    636a:	80 93 76 03 	sts	0x0376, r24
    // True if RH% is high, with hysteresis.
    // Marked volatile for thread-safe lock-free access.
    volatile bool highWithHyst;

  public:
    HumiditySensorSHT21() : SimpleTSUint8Sensor(255), highWithHyst(false) { }
    636e:	8a ec       	ldi	r24, 0xCA	; 202
    6370:	91 e0       	ldi	r25, 0x01	; 1
    6372:	90 93 75 03 	sts	0x0375, r25
    6376:	80 93 74 03 	sts	0x0374, r24
    637a:	10 92 77 03 	sts	0x0377, r1
    // Room temperature in 16*C, eg 1 is 1/16 C, 32 is 2C, -64 is -4C.
    int value;

  public:
    // Initialise to cautious values.
    RoomTemperatureC16() : value(0) { }
    637e:	84 eb       	ldi	r24, 0xB4	; 180
    6380:	91 e0       	ldi	r25, 0x01	; 1
    6382:	90 93 79 03 	sts	0x0379, r25
    6386:	80 93 78 03 	sts	0x0378, r24
    638a:	10 92 7b 03 	sts	0x037B, r1
    638e:	10 92 7a 03 	sts	0x037A, r1
  {
  protected:
      volatile uint8_t value;

      // By default initialise the value to zero.
      SimpleTSUint8Sensor() : value(0) { }
    6392:	10 92 7e 03 	sts	0x037E, r1
    // Raw pot value [0,1023] if extra precision is required.
    uint16_t raw;

  public:
    // Initialise to cautious values.
    TemperaturePot() : raw(0) { }
    6396:	8e e9       	ldi	r24, 0x9E	; 158
    6398:	91 e0       	ldi	r25, 0x01	; 1
    639a:	90 93 7d 03 	sts	0x037D, r25
    639e:	80 93 7c 03 	sts	0x037C, r24
    63a2:	10 92 80 03 	sts	0x0380, r1
    63a6:	10 92 7f 03 	sts	0x037F, r1

  return(tp);
  }

// Singleton implementation/instance.
TemperaturePot TempPot;
    63aa:	08 95       	ret

000063ac <TemperaturePot::read()>:

// Force a read/poll of the temperature pot and return the value sensed [0,255] (cold to hot).
// Potentially expensive/slow.
// This value has some hysteresis applied to reduce noise.
// Not thread-safe nor usable within ISRs (Interrupt Service Routines).
uint8_t TemperaturePot::read()
    63ac:	ef 92       	push	r14
    63ae:	ff 92       	push	r15
    63b0:	0f 93       	push	r16
    63b2:	1f 93       	push	r17
    63b4:	cf 93       	push	r28
    63b6:	df 93       	push	r29
    63b8:	ec 01       	movw	r28, r24
  {
  power_intermittent_peripherals_enable(false); // No need to wait for anything to stablise as direct of IO_POWER_UP.
    63ba:	80 e0       	ldi	r24, 0x00	; 0
    63bc:	0e 94 86 18 	call	0x310c	; 0x310c <power_intermittent_peripherals_enable(bool)>
  const uint16_t tpRaw = analogueNoiseReducedRead(TEMP_POT_AIN, DEFAULT); // Vcc reference.
    63c0:	81 e0       	ldi	r24, 0x01	; 1
    63c2:	90 e0       	ldi	r25, 0x00	; 0
    63c4:	61 e0       	ldi	r22, 0x01	; 1
    63c6:	0e 94 82 16 	call	0x2d04	; 0x2d04 <analogueNoiseReducedRead(int, unsigned char)>
    63ca:	8c 01       	movw	r16, r24
  power_intermittent_peripherals_disable();
    63cc:	0e 94 54 18 	call	0x30a8	; 0x30a8 <power_intermittent_peripherals_disable()>

#if defined(TEMP_POT_REVERSE)
  const uint16_t tp = TEMP_POT_RAW_MAX - tpRaw; // Travel is in opposite direction to natural!
    63d0:	3f ef       	ldi	r19, 0xFF	; 255
    63d2:	e3 2e       	mov	r14, r19
    63d4:	33 e0       	ldi	r19, 0x03	; 3
    63d6:	f3 2e       	mov	r15, r19
    63d8:	e0 1a       	sub	r14, r16
    63da:	f1 0a       	sbc	r15, r17
#endif

  // TODO: capture entropy from changed LS bits esp if reduced-noise version doesn't change.

  // Store new raw value.
  raw = tp;
    63dc:	fc 82       	std	Y+4, r15	; 0x04
    63de:	eb 82       	std	Y+3, r14	; 0x03

  // Capture reduced-noise value with a little hysteresis.
  const uint8_t oldValue = value;
    63e0:	3a 81       	ldd	r19, Y+2	; 0x02
  const uint8_t shifted = tp >> 2; // Keep signed to avoid wrap-round confusion.
    63e2:	c7 01       	movw	r24, r14
    63e4:	96 95       	lsr	r25
    63e6:	87 95       	ror	r24
    63e8:	96 95       	lsr	r25
    63ea:	87 95       	ror	r24
    63ec:	28 2f       	mov	r18, r24
  if(((shifted > oldValue) && (shifted - oldValue >= RN_HYST)) ||
    63ee:	38 17       	cp	r19, r24
    63f0:	20 f4       	brcc	.+8      	; 0x63fa <TemperaturePot::read()+0x4e>
    63f2:	90 e0       	ldi	r25, 0x00	; 0
    63f4:	83 1b       	sub	r24, r19
    63f6:	91 09       	sbc	r25, r1
    63f8:	06 c0       	rjmp	.+12     	; 0x6406 <TemperaturePot::read()+0x5a>
    63fa:	83 17       	cp	r24, r19
    63fc:	f8 f4       	brcc	.+62     	; 0x643c <TemperaturePot::read()+0x90>
    63fe:	83 2f       	mov	r24, r19
    6400:	90 e0       	ldi	r25, 0x00	; 0
    6402:	82 1b       	sub	r24, r18
    6404:	91 09       	sbc	r25, r1
    6406:	04 97       	sbiw	r24, 0x04	; 4
    6408:	cc f0       	brlt	.+50     	; 0x643c <TemperaturePot::read()+0x90>
     ((shifted < oldValue) && (oldValue - shifted >= RN_HYST)))
    {
    const uint8_t rn = (uint8_t) shifted;
    // Atomically store reduced-noise normalised value.
    value = rn;
    640a:	2a 83       	std	Y+2, r18	; 0x02
    // Possible to get reasonable functionality without using MODE button.
    //
    // NOTE: without ignoredFirst this will also respond to the initial position of the pot
    //   as the first reading is taken, ie may force to WARM or BAKE.
    static bool ignoredFirst;
    if(!ignoredFirst) { ignoredFirst = true; }
    640c:	80 91 81 03 	lds	r24, 0x0381
    6410:	88 23       	and	r24, r24
    6412:	21 f4       	brne	.+8      	; 0x641c <TemperaturePot::read()+0x70>
    6414:	81 e0       	ldi	r24, 0x01	; 1
    6416:	80 93 81 03 	sts	0x0381, r24
    641a:	0e c0       	rjmp	.+28     	; 0x6438 <TemperaturePot::read()+0x8c>
    // Force FROST mode when right at bottom of dial.
    else if(rn < RN_FRBO) { setWarmModeDebounced(false); }
    641c:	28 30       	cpi	r18, 0x08	; 8
    641e:	10 f4       	brcc	.+4      	; 0x6424 <TemperaturePot::read()+0x78>
    6420:	80 e0       	ldi	r24, 0x00	; 0
    6422:	08 c0       	rjmp	.+16     	; 0x6434 <TemperaturePot::read()+0x88>
#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
    // Start BAKE mode when dial turned up to top.
    else if(rn > (255-RN_FRBO)) { startBakeDebounced(); }
    6424:	28 3f       	cpi	r18, 0xF8	; 248
    6426:	18 f0       	brcs	.+6      	; 0x642e <TemperaturePot::read()+0x82>
    6428:	0e 94 c2 04 	call	0x984	; 0x984 <startBakeDebounced()>
    642c:	05 c0       	rjmp	.+10     	; 0x6438 <TemperaturePot::read()+0x8c>
#endif
    // Force WARM mode if pot/temperature turned up.
    else if(rn > oldValue) { setWarmModeDebounced(true); }
    642e:	32 17       	cp	r19, r18
    6430:	18 f4       	brcc	.+6      	; 0x6438 <TemperaturePot::read()+0x8c>
    6432:	81 e0       	ldi	r24, 0x01	; 1
    6434:	0e 94 b2 04 	call	0x964	; 0x964 <setWarmModeDebounced(bool)>

    markUIControlUsed(); // Note user operation of pot.
    6438:	0e 94 97 20 	call	0x412e	; 0x412e <markUIControlUsed()>
  DEBUG_SERIAL_PRINT(tempPotReducedNoise);
  DEBUG_SERIAL_PRINTLN();
#endif

  return(tp);
  }
    643c:	8e 2d       	mov	r24, r14
    643e:	df 91       	pop	r29
    6440:	cf 91       	pop	r28
    6442:	1f 91       	pop	r17
    6444:	0f 91       	pop	r16
    6446:	ff 90       	pop	r15
    6448:	ef 90       	pop	r14
    644a:	08 95       	ret

0000644c <SHT21_init()>:
// Set true once SHT21 has been initialised.
static volatile bool SHT21_initialised;

// Initialise/configure SHT21, once only generally.
// TWI must already be powered up.
static void SHT21_init()
    644c:	1f 93       	push	r17
  {
#if defined(SHT21_USE_REDUCED_PRECISION)
  // Soft reset in order to sample at reduced precision.
  Wire.beginTransmission(SHT21_I2C_ADDR);
    644e:	89 ec       	ldi	r24, 0xC9	; 201
    6450:	93 e0       	ldi	r25, 0x03	; 3
    6452:	60 e4       	ldi	r22, 0x40	; 64
    6454:	70 e0       	ldi	r23, 0x00	; 0
    6456:	0e 94 d1 33 	call	0x67a2	; 0x67a2 <TwoWire::beginTransmission(int)>
  Wire.write((byte) SHT21_I2C_CMD_USERREG); // Select control register.
    645a:	89 ec       	ldi	r24, 0xC9	; 201
    645c:	93 e0       	ldi	r25, 0x03	; 3
    645e:	67 ee       	ldi	r22, 0xE7	; 231
    6460:	0e 94 53 34 	call	0x68a6	; 0x68a6 <TwoWire::write(unsigned char)>
  Wire.endTransmission();
    6464:	89 ec       	ldi	r24, 0xC9	; 201
    6466:	93 e0       	ldi	r25, 0x03	; 3
    6468:	0e 94 96 34 	call	0x692c	; 0x692c <TwoWire::endTransmission()>
  Wire.requestFrom(SHT21_I2C_ADDR, 1);
    646c:	89 ec       	ldi	r24, 0xC9	; 201
    646e:	93 e0       	ldi	r25, 0x03	; 3
    6470:	60 e4       	ldi	r22, 0x40	; 64
    6472:	70 e0       	ldi	r23, 0x00	; 0
    6474:	41 e0       	ldi	r20, 0x01	; 1
    6476:	50 e0       	ldi	r21, 0x00	; 0
    6478:	0e 94 a7 34 	call	0x694e	; 0x694e <TwoWire::requestFrom(int, int)>
    647c:	04 c0       	rjmp	.+8      	; 0x6486 <SHT21_init()+0x3a>
  while(Wire.available() < 1)
    {
    // Wait for data, but avoid rolling over the end of a minor cycle...
    if(getSubCycleTime() >= GSCT_MAX-2)
    647e:	80 91 b2 00 	lds	r24, 0x00B2
    6482:	8d 3f       	cpi	r24, 0xFD	; 253
    6484:	28 f5       	brcc	.+74     	; 0x64d0 <SHT21_init()+0x84>
  // Soft reset in order to sample at reduced precision.
  Wire.beginTransmission(SHT21_I2C_ADDR);
  Wire.write((byte) SHT21_I2C_CMD_USERREG); // Select control register.
  Wire.endTransmission();
  Wire.requestFrom(SHT21_I2C_ADDR, 1);
  while(Wire.available() < 1)
    6486:	89 ec       	ldi	r24, 0xC9	; 201
    6488:	93 e0       	ldi	r25, 0x03	; 3
    648a:	0e 94 db 33 	call	0x67b6	; 0x67b6 <TwoWire::available()>
    648e:	18 16       	cp	r1, r24
    6490:	19 06       	cpc	r1, r25
    6492:	ac f7       	brge	.-22     	; 0x647e <SHT21_init()+0x32>
    if(getSubCycleTime() >= GSCT_MAX-2)
      {
      return; // Failed, and not initialised.
      }
    }
  const uint8_t curUR = Wire.read();
    6494:	89 ec       	ldi	r24, 0xC9	; 201
    6496:	93 e0       	ldi	r25, 0x03	; 3
    6498:	0e 94 e4 33 	call	0x67c8	; 0x67c8 <TwoWire::read()>
    649c:	18 2f       	mov	r17, r24
//  DEBUG_SERIAL_PRINTFMT(curUR, HEX);
//  DEBUG_SERIAL_PRINTLN();

  // Preserve reserved bits (3, 4, 5) and sample 8-bit RH (for for 1%) and 12-bit temp (for 1/16C).
  const uint8_t newUR = (curUR & 0x38) | 3;
  Wire.beginTransmission(SHT21_I2C_ADDR);
    649e:	89 ec       	ldi	r24, 0xC9	; 201
    64a0:	93 e0       	ldi	r25, 0x03	; 3
    64a2:	60 e4       	ldi	r22, 0x40	; 64
    64a4:	70 e0       	ldi	r23, 0x00	; 0
    64a6:	0e 94 d1 33 	call	0x67a2	; 0x67a2 <TwoWire::beginTransmission(int)>
  Wire.write((byte) SHT21_I2C_CMD_USERREG); // Select control register.
    64aa:	89 ec       	ldi	r24, 0xC9	; 201
    64ac:	93 e0       	ldi	r25, 0x03	; 3
    64ae:	67 ee       	ldi	r22, 0xE7	; 231
    64b0:	0e 94 53 34 	call	0x68a6	; 0x68a6 <TwoWire::write(unsigned char)>
  Wire.write((byte) newUR);
    64b4:	18 73       	andi	r17, 0x38	; 56
    64b6:	13 60       	ori	r17, 0x03	; 3
    64b8:	89 ec       	ldi	r24, 0xC9	; 201
    64ba:	93 e0       	ldi	r25, 0x03	; 3
    64bc:	61 2f       	mov	r22, r17
    64be:	0e 94 53 34 	call	0x68a6	; 0x68a6 <TwoWire::write(unsigned char)>
  Wire.endTransmission();
    64c2:	89 ec       	ldi	r24, 0xC9	; 201
    64c4:	93 e0       	ldi	r25, 0x03	; 3
    64c6:	0e 94 96 34 	call	0x692c	; 0x692c <TwoWire::endTransmission()>

#endif
  SHT21_initialised = true;
    64ca:	81 e0       	ldi	r24, 0x01	; 1
    64cc:	80 93 82 03 	sts	0x0382, r24
  }
    64d0:	1f 91       	pop	r17
    64d2:	08 95       	ret

000064d4 <RoomTemperatureC16::read()>:
#endif



// Temperature read uses/selects one of the implementations/sensors.
int RoomTemperatureC16::read()
    64d4:	ef 92       	push	r14
    64d6:	ff 92       	push	r15
    64d8:	0f 93       	push	r16
    64da:	1f 93       	push	r17
    64dc:	cf 93       	push	r28
    64de:	df 93       	push	r29
    64e0:	7c 01       	movw	r14, r24
// This may consume significant power and time.
// Probably no need to do this more than (say) once per minute.
// The first read will initialise the device as necessary and leave it in a low-power mode afterwards.
static int Sensor_SHT21_readTemperatureC16()
  {
  const bool neededPowerUp = powerUpTWIIfDisabled();
    64e2:	0e 94 95 18 	call	0x312a	; 0x312a <powerUpTWIIfDisabled()>
    64e6:	08 2f       	mov	r16, r24

  // Initialise/config if necessary.
  if(!SHT21_initialised) { SHT21_init(); }
    64e8:	80 91 82 03 	lds	r24, 0x0382
    64ec:	88 23       	and	r24, r24
    64ee:	11 f4       	brne	.+4      	; 0x64f4 <RoomTemperatureC16::read()+0x20>
    64f0:	0e 94 26 32 	call	0x644c	; 0x644c <SHT21_init()>
  // Max RH measurement time:
  //   * 14-bit: 85ms
  //   * 12-bit: 22ms
  //   * 11-bit: 11ms
  // Use blocking data fetch for now.
  Wire.beginTransmission(SHT21_I2C_ADDR);
    64f4:	89 ec       	ldi	r24, 0xC9	; 201
    64f6:	93 e0       	ldi	r25, 0x03	; 3
    64f8:	60 e4       	ldi	r22, 0x40	; 64
    64fa:	70 e0       	ldi	r23, 0x00	; 0
    64fc:	0e 94 d1 33 	call	0x67a2	; 0x67a2 <TwoWire::beginTransmission(int)>
  Wire.write((byte) SHT21_I2C_CMD_TEMP_HOLD); // Select control register.
    6500:	89 ec       	ldi	r24, 0xC9	; 201
    6502:	93 e0       	ldi	r25, 0x03	; 3
    6504:	63 ee       	ldi	r22, 0xE3	; 227
    6506:	0e 94 53 34 	call	0x68a6	; 0x68a6 <TwoWire::write(unsigned char)>
#if defined(SHT21_USE_REDUCED_PRECISION)
  nap(WDTO_30MS); // Should cover 12-bit conversion (22ms).
    650a:	81 e0       	ldi	r24, 0x01	; 1
    650c:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <nap(signed char)>
#else
  sleepLowPowerMs(90); // Should be plenty for slowest (14-bit) conversion (85ms).
#endif
  //delay(100);
  Wire.endTransmission();
    6510:	89 ec       	ldi	r24, 0xC9	; 201
    6512:	93 e0       	ldi	r25, 0x03	; 3
    6514:	0e 94 96 34 	call	0x692c	; 0x692c <TwoWire::endTransmission()>
  Wire.requestFrom(SHT21_I2C_ADDR, 3);
    6518:	89 ec       	ldi	r24, 0xC9	; 201
    651a:	93 e0       	ldi	r25, 0x03	; 3
    651c:	60 e4       	ldi	r22, 0x40	; 64
    651e:	70 e0       	ldi	r23, 0x00	; 0
    6520:	43 e0       	ldi	r20, 0x03	; 3
    6522:	50 e0       	ldi	r21, 0x00	; 0
    6524:	0e 94 a7 34 	call	0x694e	; 0x694e <TwoWire::requestFrom(int, int)>
    6528:	07 c0       	rjmp	.+14     	; 0x6538 <RoomTemperatureC16::read()+0x64>
  while(Wire.available() < 3)
    {
    // Wait for data, but avoid rolling over the end of a minor cycle...
    if(getSubCycleTime() >= GSCT_MAX-2)
    652a:	80 91 b2 00 	lds	r24, 0x00B2
    652e:	8d 3f       	cpi	r24, 0xFD	; 253
    6530:	18 f0       	brcs	.+6      	; 0x6538 <RoomTemperatureC16::read()+0x64>
    6532:	60 e0       	ldi	r22, 0x00	; 0
    6534:	70 e0       	ldi	r23, 0x00	; 0
    6536:	2b c0       	rjmp	.+86     	; 0x658e <RoomTemperatureC16::read()+0xba>
  sleepLowPowerMs(90); // Should be plenty for slowest (14-bit) conversion (85ms).
#endif
  //delay(100);
  Wire.endTransmission();
  Wire.requestFrom(SHT21_I2C_ADDR, 3);
  while(Wire.available() < 3)
    6538:	89 ec       	ldi	r24, 0xC9	; 201
    653a:	93 e0       	ldi	r25, 0x03	; 3
    653c:	0e 94 db 33 	call	0x67b6	; 0x67b6 <TwoWire::available()>
    6540:	03 97       	sbiw	r24, 0x03	; 3
    6542:	9c f3       	brlt	.-26     	; 0x652a <RoomTemperatureC16::read()+0x56>
    if(getSubCycleTime() >= GSCT_MAX-2)
      {
      return(0); // Failure value: may be able to to better.
      }
    }
  uint16_t rawTemp = (Wire.read() << 8);
    6544:	89 ec       	ldi	r24, 0xC9	; 201
    6546:	93 e0       	ldi	r25, 0x03	; 3
    6548:	0e 94 e4 33 	call	0x67c8	; 0x67c8 <TwoWire::read()>
    654c:	18 2f       	mov	r17, r24
  rawTemp |= (Wire.read() & 0xfc); // Clear status ls bits.
    654e:	89 ec       	ldi	r24, 0xC9	; 201
    6550:	93 e0       	ldi	r25, 0x03	; 3
    6552:	0e 94 e4 33 	call	0x67c8	; 0x67c8 <TwoWire::read()>
    6556:	ec 01       	movw	r28, r24

  // Power down TWI ASAP.
  if(neededPowerUp) { powerDownTWI(); }
    6558:	00 23       	and	r16, r16
    655a:	11 f0       	breq	.+4      	; 0x6560 <RoomTemperatureC16::read()+0x8c>
    655c:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <powerDownTWI()>
    if(getSubCycleTime() >= GSCT_MAX-2)
      {
      return(0); // Failure value: may be able to to better.
      }
    }
  uint16_t rawTemp = (Wire.read() << 8);
    6560:	71 2f       	mov	r23, r17
    6562:	60 e0       	ldi	r22, 0x00	; 0
  if(neededPowerUp) { powerDownTWI(); }

  // TODO: capture entropy if (transformed) value has changed.

  // Nominal formula: C = -46.85 + ((175.72*raw) / (1L << 16));
  const int c16 = -750 + ((5623L * rawTemp) >> 17); // FIXME: find a faster approximation...
    6564:	cc 7f       	andi	r28, 0xFC	; 252
    6566:	d0 70       	andi	r29, 0x00	; 0
    6568:	6c 2b       	or	r22, r28
    656a:	7d 2b       	or	r23, r29
    656c:	80 e0       	ldi	r24, 0x00	; 0
    656e:	90 e0       	ldi	r25, 0x00	; 0
    6570:	27 ef       	ldi	r18, 0xF7	; 247
    6572:	35 e1       	ldi	r19, 0x15	; 21
    6574:	40 e0       	ldi	r20, 0x00	; 0
    6576:	50 e0       	ldi	r21, 0x00	; 0
    6578:	0e 94 f4 3d 	call	0x7be8	; 0x7be8 <__mulsi3>
    657c:	41 e1       	ldi	r20, 0x11	; 17
    657e:	95 95       	asr	r25
    6580:	87 95       	ror	r24
    6582:	77 95       	ror	r23
    6584:	67 95       	ror	r22
    6586:	4a 95       	dec	r20
    6588:	d1 f7       	brne	.-12     	; 0x657e <RoomTemperatureC16::read()+0xaa>
    658a:	6e 5e       	subi	r22, 0xEE	; 238
    658c:	72 40       	sbci	r23, 0x02	; 2
#ifdef SENSOR_SHT21_ENABLE
  const int result = Sensor_SHT21_readTemperatureC16();
#else
  const int result = TMP112_readTemperatureC16();
#endif
  value = result;
    658e:	f7 01       	movw	r30, r14
    6590:	73 83       	std	Z+3, r23	; 0x03
    6592:	62 83       	std	Z+2, r22	; 0x02
  return(result);
  }
    6594:	cb 01       	movw	r24, r22
    6596:	df 91       	pop	r29
    6598:	cf 91       	pop	r28
    659a:	1f 91       	pop	r17
    659c:	0f 91       	pop	r16
    659e:	ff 90       	pop	r15
    65a0:	ef 90       	pop	r14
    65a2:	08 95       	ret

000065a4 <HumiditySensorSHT21::read()>:
// Measure and return the current relative humidity in %; range [0,100] and 255 for error.
// This may consume significant power and time.
// Probably no need to do this more than (say) once per minute.
// The first read will initialise the device as necessary and leave it in a low-power mode afterwards.
// Returns 255 (~0) in case of error.
uint8_t HumiditySensorSHT21::read()
    65a4:	ff 92       	push	r15
    65a6:	0f 93       	push	r16
    65a8:	1f 93       	push	r17
    65aa:	cf 93       	push	r28
    65ac:	df 93       	push	r29
    65ae:	ec 01       	movw	r28, r24
  {
  const bool neededPowerUp = powerUpTWIIfDisabled();
    65b0:	0e 94 95 18 	call	0x312a	; 0x312a <powerUpTWIIfDisabled()>
    65b4:	18 2f       	mov	r17, r24

  // Initialise/config if necessary.
  if(!SHT21_initialised) { SHT21_init(); }
    65b6:	80 91 82 03 	lds	r24, 0x0382
    65ba:	88 23       	and	r24, r24
    65bc:	11 f4       	brne	.+4      	; 0x65c2 <HumiditySensorSHT21::read()+0x1e>
    65be:	0e 94 26 32 	call	0x644c	; 0x644c <SHT21_init()>
  // Get RH%...
  // Max RH measurement time:
  //   * 12-bit: 29ms
  //   *  8-bit:  4ms
  // Use blocking data fetch for now.
  Wire.beginTransmission(SHT21_I2C_ADDR);
    65c2:	89 ec       	ldi	r24, 0xC9	; 201
    65c4:	93 e0       	ldi	r25, 0x03	; 3
    65c6:	60 e4       	ldi	r22, 0x40	; 64
    65c8:	70 e0       	ldi	r23, 0x00	; 0
    65ca:	0e 94 d1 33 	call	0x67a2	; 0x67a2 <TwoWire::beginTransmission(int)>
  Wire.write((byte) SHT21_I2C_CMD_RH_HOLD); // Select control register.
    65ce:	89 ec       	ldi	r24, 0xC9	; 201
    65d0:	93 e0       	ldi	r25, 0x03	; 3
    65d2:	65 ee       	ldi	r22, 0xE5	; 229
    65d4:	0e 94 53 34 	call	0x68a6	; 0x68a6 <TwoWire::write(unsigned char)>
// This may be achieved in part by dynamically slowing the CPU clock if possible.
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Assumes MIN_CPU_HZ >> 4000.
// TODO: break out to non-inlined routine where arg is not constant (__builtin_constant_p).
static void inline sleepLowPowerMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed((((MIN_CPU_HZ * (ms)) + 2000) / 4000) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    65d8:	85 e2       	ldi	r24, 0x25	; 37
    65da:	90 e0       	ldi	r25, 0x00	; 0
    65dc:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
#if defined(SHT21_USE_REDUCED_PRECISION)
  sleepLowPowerMs(5); // Should cover 8-bit conversion (4ms).
#else
  nap(WDTO_30MS); // Should cover even 12-bit conversion (29ms).
#endif
  Wire.endTransmission();
    65e0:	89 ec       	ldi	r24, 0xC9	; 201
    65e2:	93 e0       	ldi	r25, 0x03	; 3
    65e4:	0e 94 96 34 	call	0x692c	; 0x692c <TwoWire::endTransmission()>
  Wire.requestFrom(SHT21_I2C_ADDR, 3);
    65e8:	89 ec       	ldi	r24, 0xC9	; 201
    65ea:	93 e0       	ldi	r25, 0x03	; 3
    65ec:	60 e4       	ldi	r22, 0x40	; 64
    65ee:	70 e0       	ldi	r23, 0x00	; 0
    65f0:	43 e0       	ldi	r20, 0x03	; 3
    65f2:	50 e0       	ldi	r21, 0x00	; 0
    65f4:	0e 94 a7 34 	call	0x694e	; 0x694e <TwoWire::requestFrom(int, int)>
    65f8:	06 c0       	rjmp	.+12     	; 0x6606 <HumiditySensorSHT21::read()+0x62>
  while(Wire.available() < 3)
    {
    // Wait for data, but avoid rolling over the end of a minor cycle...
    if(getSubCycleTime() >= GSCT_MAX)
    65fa:	80 91 b2 00 	lds	r24, 0x00B2
    65fe:	8f 3f       	cpi	r24, 0xFF	; 255
    6600:	11 f4       	brne	.+4      	; 0x6606 <HumiditySensorSHT21::read()+0x62>
    6602:	1f ef       	ldi	r17, 0xFF	; 255
    6604:	3c c0       	rjmp	.+120    	; 0x667e <HumiditySensorSHT21::read()+0xda>
#else
  nap(WDTO_30MS); // Should cover even 12-bit conversion (29ms).
#endif
  Wire.endTransmission();
  Wire.requestFrom(SHT21_I2C_ADDR, 3);
  while(Wire.available() < 3)
    6606:	89 ec       	ldi	r24, 0xC9	; 201
    6608:	93 e0       	ldi	r25, 0x03	; 3
    660a:	0e 94 db 33 	call	0x67b6	; 0x67b6 <TwoWire::available()>
    660e:	03 97       	sbiw	r24, 0x03	; 3
    6610:	a4 f3       	brlt	.-24     	; 0x65fa <HumiditySensorSHT21::read()+0x56>
      {
//      DEBUG_SERIAL_PRINTLN_FLASHSTRING("giving up");
      return(~0);
      }
    }
  const uint8_t rawRH = Wire.read();
    6612:	89 ec       	ldi	r24, 0xC9	; 201
    6614:	93 e0       	ldi	r25, 0x03	; 3
    6616:	0e 94 e4 33 	call	0x67c8	; 0x67c8 <TwoWire::read()>
    661a:	f8 2e       	mov	r15, r24
  const uint8_t rawRL = Wire.read();
    661c:	89 ec       	ldi	r24, 0xC9	; 201
    661e:	93 e0       	ldi	r25, 0x03	; 3
    6620:	0e 94 e4 33 	call	0x67c8	; 0x67c8 <TwoWire::read()>
    6624:	08 2f       	mov	r16, r24

  // Power down TWI ASAP.
  if(neededPowerUp) { powerDownTWI(); }
    6626:	11 23       	and	r17, r17
    6628:	11 f0       	breq	.+4      	; 0x662e <HumiditySensorSHT21::read()+0x8a>
    662a:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <powerDownTWI()>

  const uint16_t raw = (((uint16_t)rawRH) << 8) | (rawRL & 0xfc); // Clear status ls bits.
  const uint8_t result = -6 + ((125L * raw) >> 16);
    662e:	60 2f       	mov	r22, r16
    6630:	70 e0       	ldi	r23, 0x00	; 0
    6632:	6c 7f       	andi	r22, 0xFC	; 252
    6634:	70 70       	andi	r23, 0x00	; 0
    6636:	3f 2d       	mov	r19, r15
    6638:	20 e0       	ldi	r18, 0x00	; 0
    663a:	62 2b       	or	r22, r18
    663c:	73 2b       	or	r23, r19
    663e:	80 e0       	ldi	r24, 0x00	; 0
    6640:	90 e0       	ldi	r25, 0x00	; 0
    6642:	2d e7       	ldi	r18, 0x7D	; 125
    6644:	30 e0       	ldi	r19, 0x00	; 0
    6646:	40 e0       	ldi	r20, 0x00	; 0
    6648:	50 e0       	ldi	r21, 0x00	; 0
    664a:	0e 94 f4 3d 	call	0x7be8	; 0x7be8 <__mulsi3>
    664e:	bc 01       	movw	r22, r24
    6650:	99 27       	eor	r25, r25
    6652:	77 fd       	sbrc	r23, 7
    6654:	90 95       	com	r25
    6656:	89 2f       	mov	r24, r25
    6658:	16 2f       	mov	r17, r22
    665a:	16 50       	subi	r17, 0x06	; 6

  // Capture entropy from raw status bits
  // iff (transformed) reading has changed.
  if(value != result) { addEntropyToPool(rawRL ^ rawRH, 1); }
    665c:	8a 81       	ldd	r24, Y+2	; 0x02
    665e:	81 17       	cp	r24, r17
    6660:	29 f0       	breq	.+10     	; 0x666c <HumiditySensorSHT21::read()+0xc8>
    6662:	80 2f       	mov	r24, r16
    6664:	8f 25       	eor	r24, r15
    6666:	61 e0       	ldi	r22, 0x01	; 1
    6668:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <addEntropyToPool(unsigned char, unsigned char)>

  value = result;
    666c:	1a 83       	std	Y+2, r17	; 0x02
  if(result > (HUMIDTY_HIGH_RHPC+HUMIDITY_EPSILON_RHPC)) { highWithHyst = true; }
    666e:	1c 34       	cpi	r17, 0x4C	; 76
    6670:	18 f0       	brcs	.+6      	; 0x6678 <HumiditySensorSHT21::read()+0xd4>
    6672:	81 e0       	ldi	r24, 0x01	; 1
    6674:	8b 83       	std	Y+3, r24	; 0x03
    6676:	03 c0       	rjmp	.+6      	; 0x667e <HumiditySensorSHT21::read()+0xda>
  else if(result < (HUMIDTY_HIGH_RHPC-HUMIDITY_EPSILON_RHPC)) { highWithHyst = false; }
    6678:	11 34       	cpi	r17, 0x41	; 65
    667a:	08 f4       	brcc	.+2      	; 0x667e <HumiditySensorSHT21::read()+0xda>
    667c:	1b 82       	std	Y+3, r1	; 0x03
  return(result);
  }
    667e:	81 2f       	mov	r24, r17
    6680:	df 91       	pop	r29
    6682:	cf 91       	pop	r28
    6684:	1f 91       	pop	r17
    6686:	0f 91       	pop	r16
    6688:	ff 90       	pop	r15
    668a:	08 95       	ret

0000668c <AmbientLight::read()>:
// Measure/store/return the current room ambient light levels in range [0,1023].
// This may consume significant power and time.
// Probably no need to do this more than (say) once per minute.
// This implementation expects LDR (1M dark resistance) from IO_POWER_UP to LDR_SENSOR_AIN and 100k to ground.
// (Not intended to be called from ISR.)
uint16_t AmbientLight::read()
    668c:	ef 92       	push	r14
    668e:	ff 92       	push	r15
    6690:	0f 93       	push	r16
    6692:	1f 93       	push	r17
    6694:	df 93       	push	r29
    6696:	cf 93       	push	r28
    6698:	cd b7       	in	r28, 0x3d	; 61
    669a:	de b7       	in	r29, 0x3e	; 62
    669c:	28 97       	sbiw	r28, 0x08	; 8
    669e:	0f b6       	in	r0, 0x3f	; 63
    66a0:	f8 94       	cli
    66a2:	de bf       	out	0x3e, r29	; 62
    66a4:	0f be       	out	0x3f, r0	; 63
    66a6:	cd bf       	out	0x3d, r28	; 61
    66a8:	7c 01       	movw	r14, r24
  {
  power_intermittent_peripherals_enable(false); // No need to wait for anything to stablise as direct of IO_POWER_UP.
    66aa:	80 e0       	ldi	r24, 0x00	; 0
    66ac:	0e 94 86 18 	call	0x310c	; 0x310c <power_intermittent_peripherals_enable(bool)>
  const uint16_t al0 = analogueNoiseReducedRead(LDR_SENSOR_AIN, ALREFERENCE);
    66b0:	80 e0       	ldi	r24, 0x00	; 0
    66b2:	90 e0       	ldi	r25, 0x00	; 0
    66b4:	63 e0       	ldi	r22, 0x03	; 3
    66b6:	0e 94 82 16 	call	0x2d04	; 0x2d04 <analogueNoiseReducedRead(int, unsigned char)>
#if defined(ADAPTIVE_THRESHOLD)
  int al;
  if(al0 >= ADAPTIVE_THRESHOLD)
    66ba:	23 e0       	ldi	r18, 0x03	; 3
    66bc:	80 38       	cpi	r24, 0x80	; 128
    66be:	92 07       	cpc	r25, r18
    66c0:	e0 f1       	brcs	.+120    	; 0x673a <AmbientLight::read()+0xae>
    {
    const uint16_t al1 = analogueNoiseReducedRead(LDR_SENSOR_AIN, DEFAULT); // Vsupply reference.
    66c2:	80 e0       	ldi	r24, 0x00	; 0
    66c4:	90 e0       	ldi	r25, 0x00	; 0
    66c6:	61 e0       	ldi	r22, 0x01	; 1
    66c8:	0e 94 82 16 	call	0x2d04	; 0x2d04 <analogueNoiseReducedRead(int, unsigned char)>
    66cc:	8c 01       	movw	r16, r24
    Supply_mV.read();
    66ce:	83 e2       	ldi	r24, 0x23	; 35
    66d0:	93 e0       	ldi	r25, 0x03	; 3
    66d2:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <SupplyVoltageMilliVolts::read()>
    // Ensure that scale stays monotonic in face of calculation lumpiness, etc...
    // Scale all remaining space above threshold to new top value into remaining space.
    // TODO: ensure scaleFactor a power of two for speed.
    const uint16_t scaleFactor = (2048 - ADAPTIVE_THRESHOLD) / (1024 - ADAPTIVE_THRESHOLD);
    al = fnmin(1023U,
        ADAPTIVE_THRESHOLD + fnmax(0U, ((ale - ADAPTIVE_THRESHOLD) / scaleFactor)));
    66d6:	60 91 25 03 	lds	r22, 0x0325
    66da:	70 91 26 03 	lds	r23, 0x0326
    66de:	60 5f       	subi	r22, 0xF0	; 240
    66e0:	7f 4f       	sbci	r23, 0xFF	; 255
    66e2:	f5 e0       	ldi	r31, 0x05	; 5
    66e4:	76 95       	lsr	r23
    66e6:	67 95       	ror	r22
    66e8:	fa 95       	dec	r31
    66ea:	e1 f7       	brne	.-8      	; 0x66e4 <AmbientLight::read()+0x58>
    66ec:	c8 01       	movw	r24, r16
    66ee:	e5 e0       	ldi	r30, 0x05	; 5
    66f0:	88 0f       	add	r24, r24
    66f2:	99 1f       	adc	r25, r25
    66f4:	ea 95       	dec	r30
    66f6:	e1 f7       	brne	.-8      	; 0x66f0 <AmbientLight::read()+0x64>
    66f8:	0e 94 13 3e 	call	0x7c26	; 0x7c26 <__udivmodhi4>
    66fc:	cb 01       	movw	r24, r22
    66fe:	80 58       	subi	r24, 0x80	; 128
    6700:	93 40       	sbci	r25, 0x03	; 3
    6702:	69 e0       	ldi	r22, 0x09	; 9
    6704:	70 e0       	ldi	r23, 0x00	; 0
    6706:	0e 94 13 3e 	call	0x7c26	; 0x7c26 <__udivmodhi4>
    670a:	9b 01       	movw	r18, r22
    670c:	ab 01       	movw	r20, r22
    670e:	40 58       	subi	r20, 0x80	; 128
    6710:	5c 4f       	sbci	r21, 0xFC	; 252




// Templated function versions of min/max that do not evaluate the arguments twice.
template <class T> const T& fnmin(const T& a, const T& b) { return((a>b)?b:a); }
    6712:	83 e0       	ldi	r24, 0x03	; 3
    6714:	4f 3f       	cpi	r20, 0xFF	; 255
    6716:	58 07       	cpc	r21, r24
    6718:	10 f4       	brcc	.+4      	; 0x671e <AmbientLight::read()+0x92>
    671a:	ba 01       	movw	r22, r20
    671c:	02 c0       	rjmp	.+4      	; 0x6722 <AmbientLight::read()+0x96>
    671e:	6f ef       	ldi	r22, 0xFF	; 255
    6720:	73 e0       	ldi	r23, 0x03	; 3
    6722:	8f ef       	ldi	r24, 0xFF	; 255
    6724:	93 e0       	ldi	r25, 0x03	; 3
    6726:	9e 83       	std	Y+6, r25	; 0x06
    6728:	8d 83       	std	Y+5, r24	; 0x05
    672a:	1a 82       	std	Y+2, r1	; 0x02
    672c:	19 82       	std	Y+1, r1	; 0x01
    672e:	3c 83       	std	Y+4, r19	; 0x04
    6730:	2b 83       	std	Y+3, r18	; 0x03
    6732:	58 87       	std	Y+8, r21	; 0x08
    6734:	4f 83       	std	Y+7, r20	; 0x07
    6736:	8b 01       	movw	r16, r22
    6738:	01 c0       	rjmp	.+2      	; 0x673c <AmbientLight::read()+0xb0>
    DEBUG_SERIAL_PRINT_FLASHSTRING(", compressed value: ");
    DEBUG_SERIAL_PRINT(al);
    DEBUG_SERIAL_PRINTLN();
#endif
    }
  else { al = al0; }
    673a:	8c 01       	movw	r16, r24
#else
  const uint16_t al = al0;
#endif
  power_intermittent_peripherals_disable();
    673c:	0e 94 54 18 	call	0x30a8	; 0x30a8 <power_intermittent_peripherals_disable()>

  // Capture entropy from changed LS bits.
  if((uint8_t)al != (uint8_t)value) { addEntropyToPool((uint8_t)al ^ (uint8_t)value, 0); } // Claim zero entropy as may be forced by Eve.
    6740:	80 2f       	mov	r24, r16
    6742:	f7 01       	movw	r30, r14
    6744:	92 81       	ldd	r25, Z+2	; 0x02
    6746:	09 17       	cp	r16, r25
    6748:	21 f0       	breq	.+8      	; 0x6752 <AmbientLight::read()+0xc6>
    674a:	89 27       	eor	r24, r25
    674c:	60 e0       	ldi	r22, 0x00	; 0
    674e:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <addEntropyToPool(unsigned char, unsigned char)>

  // Adjust room-lit flag, with hysteresis.
  if(al <= LDR_THR_LOW)
    6752:	01 3a       	cpi	r16, 0xA1	; 161
    6754:	11 05       	cpc	r17, r1
    6756:	1c f4       	brge	.+6      	; 0x675e <AmbientLight::read()+0xd2>
    { isRoomLitFlag = false; }
    6758:	f7 01       	movw	r30, r14
    675a:	14 82       	std	Z+4, r1	; 0x04
    675c:	11 c0       	rjmp	.+34     	; 0x6780 <AmbientLight::read()+0xf4>
  else if(al > LDR_THR_HIGH)
    675e:	09 3c       	cpi	r16, 0xC9	; 201
    6760:	11 05       	cpc	r17, r1
    6762:	74 f0       	brlt	.+28     	; 0x6780 <AmbientLight::read()+0xf4>
    {
    // Treat a sharp transition from dark to light as a possible/weak indication of occupancy, eg light flicked on.
    // TODO: consider refusal to trigger from zero to avoid power-up in light conditions causing transition. 
    if((!isRoomLitFlag) && (value < LDR_THR_LOW)) { markAsPossiblyOccupied(); }
    6764:	f7 01       	movw	r30, r14
    6766:	84 81       	ldd	r24, Z+4	; 0x04
    6768:	88 23       	and	r24, r24
    676a:	39 f4       	brne	.+14     	; 0x677a <AmbientLight::read()+0xee>
    676c:	82 81       	ldd	r24, Z+2	; 0x02
    676e:	93 81       	ldd	r25, Z+3	; 0x03
    6770:	80 3a       	cpi	r24, 0xA0	; 160
    6772:	91 05       	cpc	r25, r1
    6774:	10 f4       	brcc	.+4      	; 0x677a <AmbientLight::read()+0xee>
    6776:	0e 94 0f 05 	call	0xa1e	; 0xa1e <markAsPossiblyOccupied()>

    isRoomLitFlag = true;
    677a:	81 e0       	ldi	r24, 0x01	; 1
    677c:	f7 01       	movw	r30, r14
    677e:	84 83       	std	Z+4, r24	; 0x04
    }

  // Store new value.
  value = al;
    6780:	f7 01       	movw	r30, r14
    6782:	02 83       	std	Z+2, r16	; 0x02
    6784:	13 83       	std	Z+3, r17	; 0x03
  DEBUG_SERIAL_PRINT(isRoomLitFlag);
  DEBUG_SERIAL_PRINTLN();
#endif

  return(al);
  }
    6786:	c8 01       	movw	r24, r16
    6788:	28 96       	adiw	r28, 0x08	; 8
    678a:	0f b6       	in	r0, 0x3f	; 63
    678c:	f8 94       	cli
    678e:	de bf       	out	0x3e, r29	; 62
    6790:	0f be       	out	0x3f, r0	; 63
    6792:	cd bf       	out	0x3d, r28	; 61
    6794:	cf 91       	pop	r28
    6796:	df 91       	pop	r29
    6798:	1f 91       	pop	r17
    679a:	0f 91       	pop	r16
    679c:	ff 90       	pop	r15
    679e:	ef 90       	pop	r14
    67a0:	08 95       	ret

000067a2 <TwoWire::beginTransmission(int)>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    67a2:	81 e0       	ldi	r24, 0x01	; 1
    67a4:	80 93 c8 03 	sts	0x03C8, r24
  // set address of targeted slave
  txAddress = address;
    67a8:	60 93 a5 03 	sts	0x03A5, r22
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    67ac:	10 92 c6 03 	sts	0x03C6, r1
  txBufferLength = 0;
    67b0:	10 92 c7 03 	sts	0x03C7, r1
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
}
    67b4:	08 95       	ret

000067b6 <TwoWire::available()>:
}

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
    67b6:	20 91 a4 03 	lds	r18, 0x03A4
    67ba:	30 e0       	ldi	r19, 0x00	; 0
    67bc:	80 91 a3 03 	lds	r24, 0x03A3
    67c0:	28 1b       	sub	r18, r24
    67c2:	31 09       	sbc	r19, r1
{
  return rxBufferLength - rxBufferIndex;
}
    67c4:	c9 01       	movw	r24, r18
    67c6:	08 95       	ret

000067c8 <TwoWire::read()>:
int TwoWire::read(void)
{
  int value = -1;
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    67c8:	40 91 a3 03 	lds	r20, 0x03A3
    67cc:	80 91 a4 03 	lds	r24, 0x03A4
    67d0:	48 17       	cp	r20, r24
    67d2:	18 f0       	brcs	.+6      	; 0x67da <TwoWire::read()+0x12>
    67d4:	2f ef       	ldi	r18, 0xFF	; 255
    67d6:	3f ef       	ldi	r19, 0xFF	; 255
    67d8:	0a c0       	rjmp	.+20     	; 0x67ee <TwoWire::read()+0x26>
    value = rxBuffer[rxBufferIndex];
    67da:	e4 2f       	mov	r30, r20
    67dc:	f0 e0       	ldi	r31, 0x00	; 0
    67de:	ed 57       	subi	r30, 0x7D	; 125
    67e0:	fc 4f       	sbci	r31, 0xFC	; 252
    67e2:	80 81       	ld	r24, Z
    67e4:	28 2f       	mov	r18, r24
    67e6:	30 e0       	ldi	r19, 0x00	; 0
    ++rxBufferIndex;
    67e8:	4f 5f       	subi	r20, 0xFF	; 255
    67ea:	40 93 a3 03 	sts	0x03A3, r20
  }

  return value;
}
    67ee:	c9 01       	movw	r24, r18
    67f0:	08 95       	ret

000067f2 <TwoWire::peek()>:
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
  
  if(rxBufferIndex < rxBufferLength){
    67f2:	e0 91 a3 03 	lds	r30, 0x03A3
    67f6:	80 91 a4 03 	lds	r24, 0x03A4
    67fa:	e8 17       	cp	r30, r24
    67fc:	18 f0       	brcs	.+6      	; 0x6804 <TwoWire::peek()+0x12>
    67fe:	ef ef       	ldi	r30, 0xFF	; 255
    6800:	ff ef       	ldi	r31, 0xFF	; 255
    6802:	06 c0       	rjmp	.+12     	; 0x6810 <TwoWire::peek()+0x1e>
    value = rxBuffer[rxBufferIndex];
    6804:	f0 e0       	ldi	r31, 0x00	; 0
    6806:	ed 57       	subi	r30, 0x7D	; 125
    6808:	fc 4f       	sbci	r31, 0xFC	; 252
    680a:	80 81       	ld	r24, Z
    680c:	e8 2f       	mov	r30, r24
    680e:	f0 e0       	ldi	r31, 0x00	; 0
  }

  return value;
}
    6810:	cf 01       	movw	r24, r30
    6812:	08 95       	ret

00006814 <TwoWire::flush()>:

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
    6814:	08 95       	ret

00006816 <global constructors keyed to _ZN7TwoWire8rxBufferE>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    6816:	10 92 cc 03 	sts	0x03CC, r1
    681a:	10 92 cb 03 	sts	0x03CB, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    681e:	88 ee       	ldi	r24, 0xE8	; 232
    6820:	93 e0       	ldi	r25, 0x03	; 3
    6822:	a0 e0       	ldi	r26, 0x00	; 0
    6824:	b0 e0       	ldi	r27, 0x00	; 0
    6826:	80 93 cd 03 	sts	0x03CD, r24
    682a:	90 93 ce 03 	sts	0x03CE, r25
    682e:	a0 93 cf 03 	sts	0x03CF, r26
    6832:	b0 93 d0 03 	sts	0x03D0, r27
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    6836:	86 ef       	ldi	r24, 0xF6	; 246
    6838:	91 e0       	ldi	r25, 0x01	; 1
    683a:	90 93 ca 03 	sts	0x03CA, r25
    683e:	80 93 c9 03 	sts	0x03C9, r24
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    6842:	08 95       	ret

00006844 <TwoWire::write(unsigned char const*, unsigned int)>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
    6844:	cf 92       	push	r12
    6846:	df 92       	push	r13
    6848:	ef 92       	push	r14
    684a:	ff 92       	push	r15
    684c:	0f 93       	push	r16
    684e:	1f 93       	push	r17
    6850:	cf 93       	push	r28
    6852:	df 93       	push	r29
    6854:	7c 01       	movw	r14, r24
    6856:	6b 01       	movw	r12, r22
    6858:	8a 01       	movw	r16, r20
{
  if(transmitting){
    685a:	80 91 c8 03 	lds	r24, 0x03C8
    685e:	88 23       	and	r24, r24
    6860:	a1 f0       	breq	.+40     	; 0x688a <TwoWire::write(unsigned char const*, unsigned int)+0x46>
    6862:	c0 e0       	ldi	r28, 0x00	; 0
    6864:	d0 e0       	ldi	r29, 0x00	; 0
    6866:	0d c0       	rjmp	.+26     	; 0x6882 <TwoWire::write(unsigned char const*, unsigned int)+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
      write(data[i]);
    6868:	d7 01       	movw	r26, r14
    686a:	ed 91       	ld	r30, X+
    686c:	fc 91       	ld	r31, X
    686e:	d6 01       	movw	r26, r12
    6870:	ac 0f       	add	r26, r28
    6872:	bd 1f       	adc	r27, r29
    6874:	01 90       	ld	r0, Z+
    6876:	f0 81       	ld	r31, Z
    6878:	e0 2d       	mov	r30, r0
    687a:	c7 01       	movw	r24, r14
    687c:	6c 91       	ld	r22, X
    687e:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    6880:	21 96       	adiw	r28, 0x01	; 1
    6882:	c0 17       	cp	r28, r16
    6884:	d1 07       	cpc	r29, r17
    6886:	80 f3       	brcs	.-32     	; 0x6868 <TwoWire::write(unsigned char const*, unsigned int)+0x24>
    6888:	04 c0       	rjmp	.+8      	; 0x6892 <TwoWire::write(unsigned char const*, unsigned int)+0x4e>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    688a:	cb 01       	movw	r24, r22
    688c:	64 2f       	mov	r22, r20
    688e:	0e 94 54 35 	call	0x6aa8	; 0x6aa8 <twi_transmit>
  }
  return quantity;
}
    6892:	c8 01       	movw	r24, r16
    6894:	df 91       	pop	r29
    6896:	cf 91       	pop	r28
    6898:	1f 91       	pop	r17
    689a:	0f 91       	pop	r16
    689c:	ff 90       	pop	r15
    689e:	ef 90       	pop	r14
    68a0:	df 90       	pop	r13
    68a2:	cf 90       	pop	r12
    68a4:	08 95       	ret

000068a6 <TwoWire::write(unsigned char)>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
    68a6:	df 93       	push	r29
    68a8:	cf 93       	push	r28
    68aa:	0f 92       	push	r0
    68ac:	cd b7       	in	r28, 0x3d	; 61
    68ae:	de b7       	in	r29, 0x3e	; 62
    68b0:	fc 01       	movw	r30, r24
    68b2:	69 83       	std	Y+1, r22	; 0x01
{
  if(transmitting){
    68b4:	80 91 c8 03 	lds	r24, 0x03C8
    68b8:	88 23       	and	r24, r24
    68ba:	c9 f0       	breq	.+50     	; 0x68ee <TwoWire::write(unsigned char)+0x48>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    68bc:	80 91 c7 03 	lds	r24, 0x03C7
    68c0:	80 32       	cpi	r24, 0x20	; 32
    68c2:	38 f0       	brcs	.+14     	; 0x68d2 <TwoWire::write(unsigned char)+0x2c>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    68c4:	81 e0       	ldi	r24, 0x01	; 1
    68c6:	90 e0       	ldi	r25, 0x00	; 0
    68c8:	93 83       	std	Z+3, r25	; 0x03
    68ca:	82 83       	std	Z+2, r24	; 0x02
    68cc:	20 e0       	ldi	r18, 0x00	; 0
    68ce:	30 e0       	ldi	r19, 0x00	; 0
    68d0:	15 c0       	rjmp	.+42     	; 0x68fc <TwoWire::write(unsigned char)+0x56>
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    68d2:	80 91 c6 03 	lds	r24, 0x03C6
    68d6:	e8 2f       	mov	r30, r24
    68d8:	f0 e0       	ldi	r31, 0x00	; 0
    68da:	ea 55       	subi	r30, 0x5A	; 90
    68dc:	fc 4f       	sbci	r31, 0xFC	; 252
    68de:	99 81       	ldd	r25, Y+1	; 0x01
    68e0:	90 83       	st	Z, r25
    ++txBufferIndex;
    68e2:	8f 5f       	subi	r24, 0xFF	; 255
    68e4:	80 93 c6 03 	sts	0x03C6, r24
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    68e8:	80 93 c7 03 	sts	0x03C7, r24
    68ec:	05 c0       	rjmp	.+10     	; 0x68f8 <TwoWire::write(unsigned char)+0x52>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    68ee:	ce 01       	movw	r24, r28
    68f0:	01 96       	adiw	r24, 0x01	; 1
    68f2:	61 e0       	ldi	r22, 0x01	; 1
    68f4:	0e 94 54 35 	call	0x6aa8	; 0x6aa8 <twi_transmit>
    68f8:	21 e0       	ldi	r18, 0x01	; 1
    68fa:	30 e0       	ldi	r19, 0x00	; 0
  }
  return 1;
}
    68fc:	c9 01       	movw	r24, r18
    68fe:	0f 90       	pop	r0
    6900:	cf 91       	pop	r28
    6902:	df 91       	pop	r29
    6904:	08 95       	ret

00006906 <TwoWire::endTransmission(unsigned char)>:
//	the bus tenure has been properly ended with a STOP. It
//	is very possible to leave the bus in a hung state if
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
    6906:	0f 93       	push	r16
    6908:	06 2f       	mov	r16, r22
{
  // transmit buffer (blocking)
  int8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    690a:	80 91 a5 03 	lds	r24, 0x03A5
    690e:	66 ea       	ldi	r22, 0xA6	; 166
    6910:	73 e0       	ldi	r23, 0x03	; 3
    6912:	40 91 c7 03 	lds	r20, 0x03C7
    6916:	21 e0       	ldi	r18, 0x01	; 1
    6918:	0e 94 ff 34 	call	0x69fe	; 0x69fe <twi_writeTo>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    691c:	10 92 c6 03 	sts	0x03C6, r1
  txBufferLength = 0;
    6920:	10 92 c7 03 	sts	0x03C7, r1
  // indicate that we are done transmitting
  transmitting = 0;
    6924:	10 92 c8 03 	sts	0x03C8, r1
  return ret;
}
    6928:	0f 91       	pop	r16
    692a:	08 95       	ret

0000692c <TwoWire::endTransmission()>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
    692c:	61 e0       	ldi	r22, 0x01	; 1
    692e:	0e 94 83 34 	call	0x6906	; 0x6906 <TwoWire::endTransmission(unsigned char)>
}
    6932:	08 95       	ret

00006934 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    quantity = BUFFER_LENGTH;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
    6934:	41 32       	cpi	r20, 0x21	; 33
    6936:	08 f0       	brcs	.+2      	; 0x693a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x6>
    6938:	40 e2       	ldi	r20, 0x20	; 32
    693a:	86 2f       	mov	r24, r22
    693c:	63 e8       	ldi	r22, 0x83	; 131
    693e:	73 e0       	ldi	r23, 0x03	; 3
    6940:	0e 94 b6 34 	call	0x696c	; 0x696c <twi_readFrom>
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    6944:	10 92 a3 03 	sts	0x03A3, r1
  rxBufferLength = read;
    6948:	80 93 a4 03 	sts	0x03A4, r24

  return read;
}
    694c:	08 95       	ret

0000694e <TwoWire::requestFrom(int, int)>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    694e:	21 e0       	ldi	r18, 0x01	; 1
    6950:	0e 94 9a 34 	call	0x6934	; 0x6934 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
}
    6954:	08 95       	ret

00006956 <TwoWire::begin()>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    6956:	10 92 a3 03 	sts	0x03A3, r1
  rxBufferLength = 0;
    695a:	10 92 a4 03 	sts	0x03A4, r1

  txBufferIndex = 0;
    695e:	10 92 c6 03 	sts	0x03C6, r1
  txBufferLength = 0;
    6962:	10 92 c7 03 	sts	0x03C7, r1

  twi_init();
    6966:	0e 94 00 37 	call	0x6e00	; 0x6e00 <twi_init>
}
    696a:	08 95       	ret

0000696c <twi_readFrom>:
 *          length: number of bytes to read into array
 *          sendStop: Boolean indicating whether to send a stop at the end
 * Output   number of bytes read
 */
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
    696c:	38 2f       	mov	r19, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    696e:	41 32       	cpi	r20, 0x21	; 33
    6970:	10 f0       	brcs	.+4      	; 0x6976 <twi_readFrom+0xa>
    6972:	40 e0       	ldi	r20, 0x00	; 0
    6974:	42 c0       	rjmp	.+132    	; 0x69fa <twi_readFrom+0x8e>
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    6976:	80 91 d5 03 	lds	r24, 0x03D5
    697a:	88 23       	and	r24, r24
    697c:	e1 f7       	brne	.-8      	; 0x6976 <twi_readFrom+0xa>
    continue;
  }
  twi_state = TWI_MRX;
    697e:	91 e0       	ldi	r25, 0x01	; 1
    6980:	90 93 d5 03 	sts	0x03D5, r25
  twi_sendStop = sendStop;
    6984:	20 93 d7 03 	sts	0x03D7, r18
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    6988:	8f ef       	ldi	r24, 0xFF	; 255
    698a:	80 93 42 04 	sts	0x0442, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    698e:	10 92 fd 03 	sts	0x03FD, r1
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    6992:	41 50       	subi	r20, 0x01	; 1
    6994:	40 93 fe 03 	sts	0x03FE, r20
    6998:	4f 5f       	subi	r20, 0xFF	; 255
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    699a:	90 93 d6 03 	sts	0x03D6, r25
  twi_slarw |= address << 1;
    699e:	80 91 d6 03 	lds	r24, 0x03D6
    69a2:	33 0f       	add	r19, r19
    69a4:	83 2b       	or	r24, r19
    69a6:	80 93 d6 03 	sts	0x03D6, r24

  if (true == twi_inRepStart) {
    69aa:	80 91 d8 03 	lds	r24, 0x03D8
    69ae:	81 30       	cpi	r24, 0x01	; 1
    69b0:	41 f4       	brne	.+16     	; 0x69c2 <twi_readFrom+0x56>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    69b2:	10 92 d8 03 	sts	0x03D8, r1
    TWDR = twi_slarw;
    69b6:	80 91 d6 03 	lds	r24, 0x03D6
    69ba:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    69be:	85 ec       	ldi	r24, 0xC5	; 197
    69c0:	01 c0       	rjmp	.+2      	; 0x69c4 <twi_readFrom+0x58>
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    69c2:	85 ee       	ldi	r24, 0xE5	; 229
    69c4:	80 93 bc 00 	sts	0x00BC, r24

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    69c8:	80 91 d5 03 	lds	r24, 0x03D5
    69cc:	81 30       	cpi	r24, 0x01	; 1
    69ce:	e1 f3       	breq	.-8      	; 0x69c8 <twi_readFrom+0x5c>
    continue;
  }

  if (twi_masterBufferIndex < length)
    69d0:	80 91 fd 03 	lds	r24, 0x03FD
    69d4:	84 17       	cp	r24, r20
    69d6:	10 f4       	brcc	.+4      	; 0x69dc <twi_readFrom+0x70>
    length = twi_masterBufferIndex;
    69d8:	40 91 fd 03 	lds	r20, 0x03FD
    69dc:	20 e0       	ldi	r18, 0x00	; 0
    69de:	30 e0       	ldi	r19, 0x00	; 0
    69e0:	0a c0       	rjmp	.+20     	; 0x69f6 <twi_readFrom+0x8a>

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
    69e2:	fb 01       	movw	r30, r22
    69e4:	e2 0f       	add	r30, r18
    69e6:	f3 1f       	adc	r31, r19
    69e8:	d9 01       	movw	r26, r18
    69ea:	a3 52       	subi	r26, 0x23	; 35
    69ec:	bc 4f       	sbci	r27, 0xFC	; 252
    69ee:	8c 91       	ld	r24, X
    69f0:	80 83       	st	Z, r24
    69f2:	2f 5f       	subi	r18, 0xFF	; 255
    69f4:	3f 4f       	sbci	r19, 0xFF	; 255

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    69f6:	24 17       	cp	r18, r20
    69f8:	a0 f3       	brcs	.-24     	; 0x69e2 <twi_readFrom+0x76>
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
}
    69fa:	84 2f       	mov	r24, r20
    69fc:	08 95       	ret

000069fe <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
    69fe:	0f 93       	push	r16
    6a00:	1f 93       	push	r17
    6a02:	58 2f       	mov	r21, r24
    6a04:	12 2f       	mov	r17, r18
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    6a06:	41 32       	cpi	r20, 0x21	; 33
    6a08:	10 f0       	brcs	.+4      	; 0x6a0e <twi_writeTo+0x10>
    6a0a:	81 e0       	ldi	r24, 0x01	; 1
    6a0c:	4a c0       	rjmp	.+148    	; 0x6aa2 <twi_writeTo+0xa4>
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    6a0e:	80 91 d5 03 	lds	r24, 0x03D5
    6a12:	88 23       	and	r24, r24
    6a14:	e1 f7       	brne	.-8      	; 0x6a0e <twi_writeTo+0x10>
    continue;
  }
  twi_state = TWI_MTX;
    6a16:	82 e0       	ldi	r24, 0x02	; 2
    6a18:	80 93 d5 03 	sts	0x03D5, r24
  twi_sendStop = sendStop;
    6a1c:	00 93 d7 03 	sts	0x03D7, r16
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    6a20:	8f ef       	ldi	r24, 0xFF	; 255
    6a22:	80 93 42 04 	sts	0x0442, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    6a26:	10 92 fd 03 	sts	0x03FD, r1
  twi_masterBufferLength = length;
    6a2a:	40 93 fe 03 	sts	0x03FE, r20
    6a2e:	ad ed       	ldi	r26, 0xDD	; 221
    6a30:	b3 e0       	ldi	r27, 0x03	; 3
    6a32:	fb 01       	movw	r30, r22
    6a34:	02 c0       	rjmp	.+4      	; 0x6a3a <twi_writeTo+0x3c>
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
    6a36:	81 91       	ld	r24, Z+
    6a38:	8d 93       	st	X+, r24
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    6a3a:	8e 2f       	mov	r24, r30
    6a3c:	86 1b       	sub	r24, r22
    6a3e:	84 17       	cp	r24, r20
    6a40:	d0 f3       	brcs	.-12     	; 0x6a36 <twi_writeTo+0x38>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    6a42:	10 92 d6 03 	sts	0x03D6, r1
  twi_slarw |= address << 1;
    6a46:	80 91 d6 03 	lds	r24, 0x03D6
    6a4a:	55 0f       	add	r21, r21
    6a4c:	85 2b       	or	r24, r21
    6a4e:	80 93 d6 03 	sts	0x03D6, r24
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    6a52:	80 91 d8 03 	lds	r24, 0x03D8
    6a56:	81 30       	cpi	r24, 0x01	; 1
    6a58:	41 f4       	brne	.+16     	; 0x6a6a <twi_writeTo+0x6c>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    6a5a:	10 92 d8 03 	sts	0x03D8, r1
    TWDR = twi_slarw;				
    6a5e:	80 91 d6 03 	lds	r24, 0x03D6
    6a62:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    6a66:	85 ec       	ldi	r24, 0xC5	; 197
    6a68:	01 c0       	rjmp	.+2      	; 0x6a6c <twi_writeTo+0x6e>
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
    6a6a:	85 ee       	ldi	r24, 0xE5	; 229
    6a6c:	80 93 bc 00 	sts	0x00BC, r24

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    6a70:	11 23       	and	r17, r17
    6a72:	21 f0       	breq	.+8      	; 0x6a7c <twi_writeTo+0x7e>
    6a74:	80 91 d5 03 	lds	r24, 0x03D5
    6a78:	82 30       	cpi	r24, 0x02	; 2
    6a7a:	e1 f3       	breq	.-8      	; 0x6a74 <twi_writeTo+0x76>
    continue;
  }
  
  if (twi_error == 0xFF)
    6a7c:	80 91 42 04 	lds	r24, 0x0442
    6a80:	8f 3f       	cpi	r24, 0xFF	; 255
    6a82:	11 f4       	brne	.+4      	; 0x6a88 <twi_writeTo+0x8a>
    6a84:	80 e0       	ldi	r24, 0x00	; 0
    6a86:	0d c0       	rjmp	.+26     	; 0x6aa2 <twi_writeTo+0xa4>
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    6a88:	80 91 42 04 	lds	r24, 0x0442
    6a8c:	80 32       	cpi	r24, 0x20	; 32
    6a8e:	11 f4       	brne	.+4      	; 0x6a94 <twi_writeTo+0x96>
    6a90:	82 e0       	ldi	r24, 0x02	; 2
    6a92:	07 c0       	rjmp	.+14     	; 0x6aa2 <twi_writeTo+0xa4>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    6a94:	80 91 42 04 	lds	r24, 0x0442
    6a98:	80 33       	cpi	r24, 0x30	; 48
    6a9a:	11 f0       	breq	.+4      	; 0x6aa0 <twi_writeTo+0xa2>
    6a9c:	84 e0       	ldi	r24, 0x04	; 4
    6a9e:	01 c0       	rjmp	.+2      	; 0x6aa2 <twi_writeTo+0xa4>
    6aa0:	83 e0       	ldi	r24, 0x03	; 3
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
}
    6aa2:	1f 91       	pop	r17
    6aa4:	0f 91       	pop	r16
    6aa6:	08 95       	ret

00006aa8 <twi_transmit>:
 * Output   1 length too long for buffer
 *          2 not slave transmitter
 *          0 ok
 */
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
    6aa8:	48 2f       	mov	r20, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    6aaa:	61 32       	cpi	r22, 0x21	; 33
    6aac:	10 f0       	brcs	.+4      	; 0x6ab2 <twi_transmit+0xa>
    6aae:	81 e0       	ldi	r24, 0x01	; 1
    6ab0:	08 95       	ret
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    6ab2:	80 91 d5 03 	lds	r24, 0x03D5
    6ab6:	84 30       	cpi	r24, 0x04	; 4
    6ab8:	11 f0       	breq	.+4      	; 0x6abe <twi_transmit+0x16>
    6aba:	82 e0       	ldi	r24, 0x02	; 2
    6abc:	08 95       	ret
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
    6abe:	60 93 20 04 	sts	0x0420, r22
    6ac2:	af ef       	ldi	r26, 0xFF	; 255
    6ac4:	b3 e0       	ldi	r27, 0x03	; 3
    6ac6:	84 2f       	mov	r24, r20
    6ac8:	9c 01       	movw	r18, r24
    6aca:	f9 01       	movw	r30, r18
    6acc:	02 c0       	rjmp	.+4      	; 0x6ad2 <twi_transmit+0x2a>
  for(i = 0; i < length; ++i){
    twi_txBuffer[i] = data[i];
    6ace:	81 91       	ld	r24, Z+
    6ad0:	8d 93       	st	X+, r24
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
    6ad2:	8e 2f       	mov	r24, r30
    6ad4:	84 1b       	sub	r24, r20
    6ad6:	86 17       	cp	r24, r22
    6ad8:	d0 f3       	brcs	.-12     	; 0x6ace <twi_transmit+0x26>
    6ada:	80 e0       	ldi	r24, 0x00	; 0
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
}
    6adc:	08 95       	ret

00006ade <__vector_24>:
  // update twi state
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
    6ade:	1f 92       	push	r1
    6ae0:	0f 92       	push	r0
    6ae2:	0f b6       	in	r0, 0x3f	; 63
    6ae4:	0f 92       	push	r0
    6ae6:	11 24       	eor	r1, r1
    6ae8:	2f 93       	push	r18
    6aea:	3f 93       	push	r19
    6aec:	4f 93       	push	r20
    6aee:	5f 93       	push	r21
    6af0:	6f 93       	push	r22
    6af2:	7f 93       	push	r23
    6af4:	8f 93       	push	r24
    6af6:	9f 93       	push	r25
    6af8:	af 93       	push	r26
    6afa:	bf 93       	push	r27
    6afc:	ef 93       	push	r30
    6afe:	ff 93       	push	r31
  switch(TW_STATUS){
    6b00:	80 91 b9 00 	lds	r24, 0x00B9
    6b04:	90 e0       	ldi	r25, 0x00	; 0
    6b06:	88 7f       	andi	r24, 0xF8	; 248
    6b08:	90 70       	andi	r25, 0x00	; 0
    6b0a:	80 36       	cpi	r24, 0x60	; 96
    6b0c:	91 05       	cpc	r25, r1
    6b0e:	09 f4       	brne	.+2      	; 0x6b12 <__vector_24+0x34>
    6b10:	f2 c0       	rjmp	.+484    	; 0x6cf6 <__vector_24+0x218>
    6b12:	81 36       	cpi	r24, 0x61	; 97
    6b14:	91 05       	cpc	r25, r1
    6b16:	cc f5       	brge	.+114    	; 0x6b8a <__vector_24+0xac>
    6b18:	88 32       	cpi	r24, 0x28	; 40
    6b1a:	91 05       	cpc	r25, r1
    6b1c:	09 f4       	brne	.+2      	; 0x6b20 <__vector_24+0x42>
    6b1e:	7b c0       	rjmp	.+246    	; 0x6c16 <__vector_24+0x138>
    6b20:	89 32       	cpi	r24, 0x29	; 41
    6b22:	91 05       	cpc	r25, r1
    6b24:	b4 f4       	brge	.+44     	; 0x6b52 <__vector_24+0x74>
    6b26:	80 31       	cpi	r24, 0x10	; 16
    6b28:	91 05       	cpc	r25, r1
    6b2a:	09 f4       	brne	.+2      	; 0x6b2e <__vector_24+0x50>
    6b2c:	6f c0       	rjmp	.+222    	; 0x6c0c <__vector_24+0x12e>
    6b2e:	81 31       	cpi	r24, 0x11	; 17
    6b30:	91 05       	cpc	r25, r1
    6b32:	3c f4       	brge	.+14     	; 0x6b42 <__vector_24+0x64>
    6b34:	00 97       	sbiw	r24, 0x00	; 0
    6b36:	09 f4       	brne	.+2      	; 0x6b3a <__vector_24+0x5c>
    6b38:	47 c1       	rjmp	.+654    	; 0x6dc8 <__vector_24+0x2ea>
    6b3a:	08 97       	sbiw	r24, 0x08	; 8
    6b3c:	09 f0       	breq	.+2      	; 0x6b40 <__vector_24+0x62>
    6b3e:	4f c1       	rjmp	.+670    	; 0x6dde <__vector_24+0x300>
    6b40:	65 c0       	rjmp	.+202    	; 0x6c0c <__vector_24+0x12e>
    6b42:	88 31       	cpi	r24, 0x18	; 24
    6b44:	91 05       	cpc	r25, r1
    6b46:	09 f4       	brne	.+2      	; 0x6b4a <__vector_24+0x6c>
    6b48:	66 c0       	rjmp	.+204    	; 0x6c16 <__vector_24+0x138>
    6b4a:	80 97       	sbiw	r24, 0x20	; 32
    6b4c:	09 f0       	breq	.+2      	; 0x6b50 <__vector_24+0x72>
    6b4e:	47 c1       	rjmp	.+654    	; 0x6dde <__vector_24+0x300>
    6b50:	82 c0       	rjmp	.+260    	; 0x6c56 <__vector_24+0x178>
    6b52:	80 34       	cpi	r24, 0x40	; 64
    6b54:	91 05       	cpc	r25, r1
    6b56:	09 f4       	brne	.+2      	; 0x6b5a <__vector_24+0x7c>
    6b58:	a4 c0       	rjmp	.+328    	; 0x6ca2 <__vector_24+0x1c4>
    6b5a:	81 34       	cpi	r24, 0x41	; 65
    6b5c:	91 05       	cpc	r25, r1
    6b5e:	44 f4       	brge	.+16     	; 0x6b70 <__vector_24+0x92>
    6b60:	80 33       	cpi	r24, 0x30	; 48
    6b62:	91 05       	cpc	r25, r1
    6b64:	09 f4       	brne	.+2      	; 0x6b68 <__vector_24+0x8a>
    6b66:	82 c0       	rjmp	.+260    	; 0x6c6c <__vector_24+0x18e>
    6b68:	c8 97       	sbiw	r24, 0x38	; 56
    6b6a:	09 f0       	breq	.+2      	; 0x6b6e <__vector_24+0x90>
    6b6c:	38 c1       	rjmp	.+624    	; 0x6dde <__vector_24+0x300>
    6b6e:	89 c0       	rjmp	.+274    	; 0x6c82 <__vector_24+0x1a4>
    6b70:	80 35       	cpi	r24, 0x50	; 80
    6b72:	91 05       	cpc	r25, r1
    6b74:	09 f4       	brne	.+2      	; 0x6b78 <__vector_24+0x9a>
    6b76:	89 c0       	rjmp	.+274    	; 0x6c8a <__vector_24+0x1ac>
    6b78:	88 35       	cpi	r24, 0x58	; 88
    6b7a:	91 05       	cpc	r25, r1
    6b7c:	09 f4       	brne	.+2      	; 0x6b80 <__vector_24+0xa2>
    6b7e:	96 c0       	rjmp	.+300    	; 0x6cac <__vector_24+0x1ce>
    6b80:	88 34       	cpi	r24, 0x48	; 72
    6b82:	91 05       	cpc	r25, r1
    6b84:	09 f0       	breq	.+2      	; 0x6b88 <__vector_24+0xaa>
    6b86:	2b c1       	rjmp	.+598    	; 0x6dde <__vector_24+0x300>
    6b88:	ae c0       	rjmp	.+348    	; 0x6ce6 <__vector_24+0x208>
    6b8a:	88 39       	cpi	r24, 0x98	; 152
    6b8c:	91 05       	cpc	r25, r1
    6b8e:	09 f4       	brne	.+2      	; 0x6b92 <__vector_24+0xb4>
    6b90:	13 c1       	rjmp	.+550    	; 0x6db8 <__vector_24+0x2da>
    6b92:	89 39       	cpi	r24, 0x99	; 153
    6b94:	91 05       	cpc	r25, r1
    6b96:	ec f4       	brge	.+58     	; 0x6bd2 <__vector_24+0xf4>
    6b98:	88 37       	cpi	r24, 0x78	; 120
    6b9a:	91 05       	cpc	r25, r1
    6b9c:	09 f4       	brne	.+2      	; 0x6ba0 <__vector_24+0xc2>
    6b9e:	ab c0       	rjmp	.+342    	; 0x6cf6 <__vector_24+0x218>
    6ba0:	89 37       	cpi	r24, 0x79	; 121
    6ba2:	91 05       	cpc	r25, r1
    6ba4:	4c f4       	brge	.+18     	; 0x6bb8 <__vector_24+0xda>
    6ba6:	88 36       	cpi	r24, 0x68	; 104
    6ba8:	91 05       	cpc	r25, r1
    6baa:	09 f4       	brne	.+2      	; 0x6bae <__vector_24+0xd0>
    6bac:	a4 c0       	rjmp	.+328    	; 0x6cf6 <__vector_24+0x218>
    6bae:	80 37       	cpi	r24, 0x70	; 112
    6bb0:	91 05       	cpc	r25, r1
    6bb2:	09 f0       	breq	.+2      	; 0x6bb6 <__vector_24+0xd8>
    6bb4:	14 c1       	rjmp	.+552    	; 0x6dde <__vector_24+0x300>
    6bb6:	9f c0       	rjmp	.+318    	; 0x6cf6 <__vector_24+0x218>
    6bb8:	88 38       	cpi	r24, 0x88	; 136
    6bba:	91 05       	cpc	r25, r1
    6bbc:	09 f4       	brne	.+2      	; 0x6bc0 <__vector_24+0xe2>
    6bbe:	fc c0       	rjmp	.+504    	; 0x6db8 <__vector_24+0x2da>
    6bc0:	80 39       	cpi	r24, 0x90	; 144
    6bc2:	91 05       	cpc	r25, r1
    6bc4:	09 f4       	brne	.+2      	; 0x6bc8 <__vector_24+0xea>
    6bc6:	9d c0       	rjmp	.+314    	; 0x6d02 <__vector_24+0x224>
    6bc8:	80 38       	cpi	r24, 0x80	; 128
    6bca:	91 05       	cpc	r25, r1
    6bcc:	09 f0       	breq	.+2      	; 0x6bd0 <__vector_24+0xf2>
    6bce:	07 c1       	rjmp	.+526    	; 0x6dde <__vector_24+0x300>
    6bd0:	98 c0       	rjmp	.+304    	; 0x6d02 <__vector_24+0x224>
    6bd2:	80 3b       	cpi	r24, 0xB0	; 176
    6bd4:	91 05       	cpc	r25, r1
    6bd6:	09 f4       	brne	.+2      	; 0x6bda <__vector_24+0xfc>
    6bd8:	c6 c0       	rjmp	.+396    	; 0x6d66 <__vector_24+0x288>
    6bda:	81 3b       	cpi	r24, 0xB1	; 177
    6bdc:	91 05       	cpc	r25, r1
    6bde:	4c f4       	brge	.+18     	; 0x6bf2 <__vector_24+0x114>
    6be0:	80 3a       	cpi	r24, 0xA0	; 160
    6be2:	91 05       	cpc	r25, r1
    6be4:	09 f4       	brne	.+2      	; 0x6be8 <__vector_24+0x10a>
    6be6:	9f c0       	rjmp	.+318    	; 0x6d26 <__vector_24+0x248>
    6be8:	88 3a       	cpi	r24, 0xA8	; 168
    6bea:	91 05       	cpc	r25, r1
    6bec:	09 f0       	breq	.+2      	; 0x6bf0 <__vector_24+0x112>
    6bee:	f7 c0       	rjmp	.+494    	; 0x6dde <__vector_24+0x300>
    6bf0:	ba c0       	rjmp	.+372    	; 0x6d66 <__vector_24+0x288>
    6bf2:	80 3c       	cpi	r24, 0xC0	; 192
    6bf4:	91 05       	cpc	r25, r1
    6bf6:	09 f4       	brne	.+2      	; 0x6bfa <__vector_24+0x11c>
    6bf8:	e3 c0       	rjmp	.+454    	; 0x6dc0 <__vector_24+0x2e2>
    6bfa:	88 3c       	cpi	r24, 0xC8	; 200
    6bfc:	91 05       	cpc	r25, r1
    6bfe:	09 f4       	brne	.+2      	; 0x6c02 <__vector_24+0x124>
    6c00:	df c0       	rjmp	.+446    	; 0x6dc0 <__vector_24+0x2e2>
    6c02:	88 3b       	cpi	r24, 0xB8	; 184
    6c04:	91 05       	cpc	r25, r1
    6c06:	09 f0       	breq	.+2      	; 0x6c0a <__vector_24+0x12c>
    6c08:	ea c0       	rjmp	.+468    	; 0x6dde <__vector_24+0x300>
    6c0a:	c2 c0       	rjmp	.+388    	; 0x6d90 <__vector_24+0x2b2>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    6c0c:	80 91 d6 03 	lds	r24, 0x03D6
    6c10:	80 93 bb 00 	sts	0x00BB, r24
    6c14:	cf c0       	rjmp	.+414    	; 0x6db4 <__vector_24+0x2d6>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    6c16:	90 91 fd 03 	lds	r25, 0x03FD
    6c1a:	80 91 fe 03 	lds	r24, 0x03FE
    6c1e:	98 17       	cp	r25, r24
    6c20:	68 f4       	brcc	.+26     	; 0x6c3c <__vector_24+0x15e>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    6c22:	90 91 fd 03 	lds	r25, 0x03FD
    6c26:	e9 2f       	mov	r30, r25
    6c28:	f0 e0       	ldi	r31, 0x00	; 0
    6c2a:	e3 52       	subi	r30, 0x23	; 35
    6c2c:	fc 4f       	sbci	r31, 0xFC	; 252
    6c2e:	80 81       	ld	r24, Z
    6c30:	80 93 bb 00 	sts	0x00BB, r24
    6c34:	9f 5f       	subi	r25, 0xFF	; 255
    6c36:	90 93 fd 03 	sts	0x03FD, r25
    6c3a:	bc c0       	rjmp	.+376    	; 0x6db4 <__vector_24+0x2d6>
        twi_reply(1);
      }else{
	if (twi_sendStop)
    6c3c:	80 91 d7 03 	lds	r24, 0x03D7
    6c40:	88 23       	and	r24, r24
    6c42:	09 f4       	brne	.+2      	; 0x6c46 <__vector_24+0x168>
    6c44:	4b c0       	rjmp	.+150    	; 0x6cdc <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    6c46:	85 ed       	ldi	r24, 0xD5	; 213
    6c48:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    6c4c:	80 91 bc 00 	lds	r24, 0x00BC
    6c50:	84 fd       	sbrc	r24, 4
    6c52:	fc cf       	rjmp	.-8      	; 0x6c4c <__vector_24+0x16e>
    6c54:	c2 c0       	rjmp	.+388    	; 0x6dda <__vector_24+0x2fc>
	  twi_state = TWI_READY;
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    6c56:	80 e2       	ldi	r24, 0x20	; 32
    6c58:	80 93 42 04 	sts	0x0442, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    6c5c:	85 ed       	ldi	r24, 0xD5	; 213
    6c5e:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    6c62:	80 91 bc 00 	lds	r24, 0x00BC
    6c66:	84 fd       	sbrc	r24, 4
    6c68:	fc cf       	rjmp	.-8      	; 0x6c62 <__vector_24+0x184>
    6c6a:	b7 c0       	rjmp	.+366    	; 0x6dda <__vector_24+0x2fc>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    6c6c:	80 e3       	ldi	r24, 0x30	; 48
    6c6e:	80 93 42 04 	sts	0x0442, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    6c72:	85 ed       	ldi	r24, 0xD5	; 213
    6c74:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    6c78:	80 91 bc 00 	lds	r24, 0x00BC
    6c7c:	84 fd       	sbrc	r24, 4
    6c7e:	fc cf       	rjmp	.-8      	; 0x6c78 <__vector_24+0x19a>
    6c80:	ac c0       	rjmp	.+344    	; 0x6dda <__vector_24+0x2fc>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    6c82:	88 e3       	ldi	r24, 0x38	; 56
    6c84:	80 93 42 04 	sts	0x0442, r24
    6c88:	9b c0       	rjmp	.+310    	; 0x6dc0 <__vector_24+0x2e2>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    6c8a:	80 91 fd 03 	lds	r24, 0x03FD
    6c8e:	90 91 bb 00 	lds	r25, 0x00BB
    6c92:	e8 2f       	mov	r30, r24
    6c94:	f0 e0       	ldi	r31, 0x00	; 0
    6c96:	e3 52       	subi	r30, 0x23	; 35
    6c98:	fc 4f       	sbci	r31, 0xFC	; 252
    6c9a:	90 83       	st	Z, r25
    6c9c:	8f 5f       	subi	r24, 0xFF	; 255
    6c9e:	80 93 fd 03 	sts	0x03FD, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    6ca2:	90 91 fd 03 	lds	r25, 0x03FD
    6ca6:	80 91 fe 03 	lds	r24, 0x03FE
    6caa:	82 c0       	rjmp	.+260    	; 0x6db0 <__vector_24+0x2d2>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    6cac:	80 91 fd 03 	lds	r24, 0x03FD
    6cb0:	90 91 bb 00 	lds	r25, 0x00BB
    6cb4:	e8 2f       	mov	r30, r24
    6cb6:	f0 e0       	ldi	r31, 0x00	; 0
    6cb8:	e3 52       	subi	r30, 0x23	; 35
    6cba:	fc 4f       	sbci	r31, 0xFC	; 252
    6cbc:	90 83       	st	Z, r25
    6cbe:	8f 5f       	subi	r24, 0xFF	; 255
    6cc0:	80 93 fd 03 	sts	0x03FD, r24
	if (twi_sendStop)
    6cc4:	80 91 d7 03 	lds	r24, 0x03D7
    6cc8:	88 23       	and	r24, r24
    6cca:	41 f0       	breq	.+16     	; 0x6cdc <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    6ccc:	85 ed       	ldi	r24, 0xD5	; 213
    6cce:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    6cd2:	80 91 bc 00 	lds	r24, 0x00BC
    6cd6:	84 fd       	sbrc	r24, 4
    6cd8:	fc cf       	rjmp	.-8      	; 0x6cd2 <__vector_24+0x1f4>
    6cda:	7f c0       	rjmp	.+254    	; 0x6dda <__vector_24+0x2fc>
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    6cdc:	81 e0       	ldi	r24, 0x01	; 1
    6cde:	80 93 d8 03 	sts	0x03D8, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    6ce2:	84 ea       	ldi	r24, 0xA4	; 164
    6ce4:	6e c0       	rjmp	.+220    	; 0x6dc2 <__vector_24+0x2e4>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    6ce6:	85 ed       	ldi	r24, 0xD5	; 213
    6ce8:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    6cec:	80 91 bc 00 	lds	r24, 0x00BC
    6cf0:	84 fd       	sbrc	r24, 4
    6cf2:	fc cf       	rjmp	.-8      	; 0x6cec <__vector_24+0x20e>
    6cf4:	72 c0       	rjmp	.+228    	; 0x6dda <__vector_24+0x2fc>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    6cf6:	83 e0       	ldi	r24, 0x03	; 3
    6cf8:	80 93 d5 03 	sts	0x03D5, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    6cfc:	10 92 41 04 	sts	0x0441, r1
    6d00:	59 c0       	rjmp	.+178    	; 0x6db4 <__vector_24+0x2d6>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    6d02:	80 91 41 04 	lds	r24, 0x0441
    6d06:	80 32       	cpi	r24, 0x20	; 32
    6d08:	08 f0       	brcs	.+2      	; 0x6d0c <__vector_24+0x22e>
    6d0a:	56 c0       	rjmp	.+172    	; 0x6db8 <__vector_24+0x2da>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    6d0c:	80 91 41 04 	lds	r24, 0x0441
    6d10:	90 91 bb 00 	lds	r25, 0x00BB
    6d14:	e8 2f       	mov	r30, r24
    6d16:	f0 e0       	ldi	r31, 0x00	; 0
    6d18:	ef 5d       	subi	r30, 0xDF	; 223
    6d1a:	fb 4f       	sbci	r31, 0xFB	; 251
    6d1c:	90 83       	st	Z, r25
    6d1e:	8f 5f       	subi	r24, 0xFF	; 255
    6d20:	80 93 41 04 	sts	0x0441, r24
    6d24:	47 c0       	rjmp	.+142    	; 0x6db4 <__vector_24+0x2d6>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    6d26:	80 91 41 04 	lds	r24, 0x0441
    6d2a:	80 32       	cpi	r24, 0x20	; 32
    6d2c:	30 f4       	brcc	.+12     	; 0x6d3a <__vector_24+0x25c>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    6d2e:	e0 91 41 04 	lds	r30, 0x0441
    6d32:	f0 e0       	ldi	r31, 0x00	; 0
    6d34:	ef 5d       	subi	r30, 0xDF	; 223
    6d36:	fb 4f       	sbci	r31, 0xFB	; 251
    6d38:	10 82       	st	Z, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    6d3a:	85 ed       	ldi	r24, 0xD5	; 213
    6d3c:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    6d40:	80 91 bc 00 	lds	r24, 0x00BC
    6d44:	84 fd       	sbrc	r24, 4
    6d46:	fc cf       	rjmp	.-8      	; 0x6d40 <__vector_24+0x262>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    6d48:	10 92 d5 03 	sts	0x03D5, r1
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    6d4c:	60 91 41 04 	lds	r22, 0x0441
    6d50:	e0 91 db 03 	lds	r30, 0x03DB
    6d54:	f0 91 dc 03 	lds	r31, 0x03DC
    6d58:	81 e2       	ldi	r24, 0x21	; 33
    6d5a:	94 e0       	ldi	r25, 0x04	; 4
    6d5c:	70 e0       	ldi	r23, 0x00	; 0
    6d5e:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    6d60:	10 92 41 04 	sts	0x0441, r1
    6d64:	2d c0       	rjmp	.+90     	; 0x6dc0 <__vector_24+0x2e2>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    6d66:	84 e0       	ldi	r24, 0x04	; 4
    6d68:	80 93 d5 03 	sts	0x03D5, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    6d6c:	10 92 1f 04 	sts	0x041F, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    6d70:	10 92 20 04 	sts	0x0420, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    6d74:	e0 91 d9 03 	lds	r30, 0x03D9
    6d78:	f0 91 da 03 	lds	r31, 0x03DA
    6d7c:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    6d7e:	80 91 20 04 	lds	r24, 0x0420
    6d82:	88 23       	and	r24, r24
    6d84:	29 f4       	brne	.+10     	; 0x6d90 <__vector_24+0x2b2>
        twi_txBufferLength = 1;
    6d86:	81 e0       	ldi	r24, 0x01	; 1
    6d88:	80 93 20 04 	sts	0x0420, r24
        twi_txBuffer[0] = 0x00;
    6d8c:	10 92 ff 03 	sts	0x03FF, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    6d90:	90 91 1f 04 	lds	r25, 0x041F
    6d94:	e9 2f       	mov	r30, r25
    6d96:	f0 e0       	ldi	r31, 0x00	; 0
    6d98:	e1 50       	subi	r30, 0x01	; 1
    6d9a:	fc 4f       	sbci	r31, 0xFC	; 252
    6d9c:	80 81       	ld	r24, Z
    6d9e:	80 93 bb 00 	sts	0x00BB, r24
    6da2:	9f 5f       	subi	r25, 0xFF	; 255
    6da4:	90 93 1f 04 	sts	0x041F, r25
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    6da8:	90 91 1f 04 	lds	r25, 0x041F
    6dac:	80 91 20 04 	lds	r24, 0x0420
    6db0:	98 17       	cp	r25, r24
    6db2:	10 f4       	brcc	.+4      	; 0x6db8 <__vector_24+0x2da>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    6db4:	85 ec       	ldi	r24, 0xC5	; 197
    6db6:	01 c0       	rjmp	.+2      	; 0x6dba <__vector_24+0x2dc>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    6db8:	85 e8       	ldi	r24, 0x85	; 133
    6dba:	80 93 bc 00 	sts	0x00BC, r24
    6dbe:	0f c0       	rjmp	.+30     	; 0x6dde <__vector_24+0x300>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    6dc0:	85 ec       	ldi	r24, 0xC5	; 197
    6dc2:	80 93 bc 00 	sts	0x00BC, r24
    6dc6:	09 c0       	rjmp	.+18     	; 0x6dda <__vector_24+0x2fc>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    6dc8:	10 92 42 04 	sts	0x0442, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    6dcc:	85 ed       	ldi	r24, 0xD5	; 213
    6dce:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    6dd2:	80 91 bc 00 	lds	r24, 0x00BC
    6dd6:	84 fd       	sbrc	r24, 4
    6dd8:	fc cf       	rjmp	.-8      	; 0x6dd2 <__vector_24+0x2f4>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    6dda:	10 92 d5 03 	sts	0x03D5, r1
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    6dde:	ff 91       	pop	r31
    6de0:	ef 91       	pop	r30
    6de2:	bf 91       	pop	r27
    6de4:	af 91       	pop	r26
    6de6:	9f 91       	pop	r25
    6de8:	8f 91       	pop	r24
    6dea:	7f 91       	pop	r23
    6dec:	6f 91       	pop	r22
    6dee:	5f 91       	pop	r21
    6df0:	4f 91       	pop	r20
    6df2:	3f 91       	pop	r19
    6df4:	2f 91       	pop	r18
    6df6:	0f 90       	pop	r0
    6df8:	0f be       	out	0x3f, r0	; 63
    6dfa:	0f 90       	pop	r0
    6dfc:	1f 90       	pop	r1
    6dfe:	18 95       	reti

00006e00 <twi_init>:
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
    6e00:	10 92 d5 03 	sts	0x03D5, r1
  twi_sendStop = true;		// default value
    6e04:	81 e0       	ldi	r24, 0x01	; 1
    6e06:	80 93 d7 03 	sts	0x03D7, r24
  twi_inRepStart = false;
    6e0a:	10 92 d8 03 	sts	0x03D8, r1
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
    6e0e:	82 e1       	ldi	r24, 0x12	; 18
    6e10:	61 e0       	ldi	r22, 0x01	; 1
    6e12:	0e 94 f8 38 	call	0x71f0	; 0x71f0 <digitalWrite>
  digitalWrite(SCL, 1);
    6e16:	83 e1       	ldi	r24, 0x13	; 19
    6e18:	61 e0       	ldi	r22, 0x01	; 1
    6e1a:	0e 94 f8 38 	call	0x71f0	; 0x71f0 <digitalWrite>

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    6e1e:	e9 eb       	ldi	r30, 0xB9	; 185
    6e20:	f0 e0       	ldi	r31, 0x00	; 0
    6e22:	80 81       	ld	r24, Z
    6e24:	8e 7f       	andi	r24, 0xFE	; 254
    6e26:	80 83       	st	Z, r24
  cbi(TWSR, TWPS1);
    6e28:	80 81       	ld	r24, Z
    6e2a:	8d 7f       	andi	r24, 0xFD	; 253
    6e2c:	80 83       	st	Z, r24
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
    6e2e:	8d ef       	ldi	r24, 0xFD	; 253
    6e30:	80 93 b8 00 	sts	0x00B8, r24
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    6e34:	85 e4       	ldi	r24, 0x45	; 69
    6e36:	80 93 bc 00 	sts	0x00BC, r24
}
    6e3a:	08 95       	ret

00006e3c <ArduinoJson::Generator::JsonPrintable::printTo(char*, unsigned int) const>:
#include "StringBuilder.h"

using namespace ArduinoJson::Generator;
using namespace ArduinoJson::Internals;

size_t JsonPrintable::printTo(char* buffer, size_t bufferSize) const
    6e3c:	df 93       	push	r29
    6e3e:	cf 93       	push	r28
    6e40:	cd b7       	in	r28, 0x3d	; 61
    6e42:	de b7       	in	r29, 0x3e	; 62
    6e44:	2a 97       	sbiw	r28, 0x0a	; 10
    6e46:	0f b6       	in	r0, 0x3f	; 63
    6e48:	f8 94       	cli
    6e4a:	de bf       	out	0x3e, r29	; 62
    6e4c:	0f be       	out	0x3f, r0	; 63
    6e4e:	cd bf       	out	0x3d, r28	; 61
    6e50:	dc 01       	movw	r26, r24
    6e52:	fb 01       	movw	r30, r22
  public:
    Print() : write_error(0) {}
    6e54:	1c 82       	std	Y+4, r1	; 0x04
    6e56:	1b 82       	std	Y+3, r1	; 0x03
    {
        class StringBuilder : public Print
        {
        public:
            StringBuilder(char* buf, int size)
                : _buffer(buf), _capacity(size - 1), _length(0)
    6e58:	86 e0       	ldi	r24, 0x06	; 6
    6e5a:	92 e0       	ldi	r25, 0x02	; 2
    6e5c:	9a 83       	std	Y+2, r25	; 0x02
    6e5e:	89 83       	std	Y+1, r24	; 0x01
    6e60:	7e 83       	std	Y+6, r23	; 0x06
    6e62:	6d 83       	std	Y+5, r22	; 0x05
    6e64:	41 50       	subi	r20, 0x01	; 1
    6e66:	50 40       	sbci	r21, 0x00	; 0
    6e68:	58 87       	std	Y+8, r21	; 0x08
    6e6a:	4f 83       	std	Y+7, r20	; 0x07
    6e6c:	1a 86       	std	Y+10, r1	; 0x0a
    6e6e:	19 86       	std	Y+9, r1	; 0x09
            {
                _buffer[0] = 0;
    6e70:	10 82       	st	Z, r1
{
    StringBuilder sb(buffer, bufferSize);
    return printTo(sb);
    6e72:	ed 91       	ld	r30, X+
    6e74:	fc 91       	ld	r31, X
    6e76:	11 97       	sbiw	r26, 0x01	; 1
    6e78:	01 90       	ld	r0, Z+
    6e7a:	f0 81       	ld	r31, Z
    6e7c:	e0 2d       	mov	r30, r0
    6e7e:	cd 01       	movw	r24, r26
    6e80:	be 01       	movw	r22, r28
    6e82:	6f 5f       	subi	r22, 0xFF	; 255
    6e84:	7f 4f       	sbci	r23, 0xFF	; 255
    6e86:	09 95       	icall
}
    6e88:	2a 96       	adiw	r28, 0x0a	; 10
    6e8a:	0f b6       	in	r0, 0x3f	; 63
    6e8c:	f8 94       	cli
    6e8e:	de bf       	out	0x3e, r29	; 62
    6e90:	0f be       	out	0x3f, r0	; 63
    6e92:	cd bf       	out	0x3d, r28	; 61
    6e94:	cf 91       	pop	r28
    6e96:	df 91       	pop	r29
    6e98:	08 95       	ret

00006e9a <ArduinoJson::Internals::StringBuilder::write(unsigned char)>:

#include "StringBuilder.h"

using namespace ArduinoJson::Internals;

size_t StringBuilder::write(uint8_t c)
    6e9a:	dc 01       	movw	r26, r24
{
    if (_length >= _capacity) return 0;
    6e9c:	18 96       	adiw	r26, 0x08	; 8
    6e9e:	2d 91       	ld	r18, X+
    6ea0:	3c 91       	ld	r19, X
    6ea2:	19 97       	sbiw	r26, 0x09	; 9
    6ea4:	16 96       	adiw	r26, 0x06	; 6
    6ea6:	8d 91       	ld	r24, X+
    6ea8:	9c 91       	ld	r25, X
    6eaa:	17 97       	sbiw	r26, 0x07	; 7
    6eac:	28 17       	cp	r18, r24
    6eae:	39 07       	cpc	r19, r25
    6eb0:	1c f0       	brlt	.+6      	; 0x6eb8 <ArduinoJson::Internals::StringBuilder::write(unsigned char)+0x1e>
    6eb2:	20 e0       	ldi	r18, 0x00	; 0
    6eb4:	30 e0       	ldi	r19, 0x00	; 0
    6eb6:	16 c0       	rjmp	.+44     	; 0x6ee4 <ArduinoJson::Internals::StringBuilder::write(unsigned char)+0x4a>

    _buffer[_length++] = c;
    6eb8:	14 96       	adiw	r26, 0x04	; 4
    6eba:	ed 91       	ld	r30, X+
    6ebc:	fc 91       	ld	r31, X
    6ebe:	15 97       	sbiw	r26, 0x05	; 5
    6ec0:	e2 0f       	add	r30, r18
    6ec2:	f3 1f       	adc	r31, r19
    6ec4:	60 83       	st	Z, r22
    6ec6:	c9 01       	movw	r24, r18
    6ec8:	01 96       	adiw	r24, 0x01	; 1
    6eca:	19 96       	adiw	r26, 0x09	; 9
    6ecc:	9c 93       	st	X, r25
    6ece:	8e 93       	st	-X, r24
    6ed0:	18 97       	sbiw	r26, 0x08	; 8
    _buffer[_length] = 0;
    6ed2:	14 96       	adiw	r26, 0x04	; 4
    6ed4:	ed 91       	ld	r30, X+
    6ed6:	fc 91       	ld	r31, X
    6ed8:	15 97       	sbiw	r26, 0x05	; 5
    6eda:	e8 0f       	add	r30, r24
    6edc:	f9 1f       	adc	r31, r25
    6ede:	10 82       	st	Z, r1
    6ee0:	21 e0       	ldi	r18, 0x01	; 1
    6ee2:	30 e0       	ldi	r19, 0x00	; 0
    return 1;
}
    6ee4:	c9 01       	movw	r24, r18
    6ee6:	08 95       	ret

00006ee8 <ArduinoJson::Internals::EscapedString::printTo(char const*, Print&)>:
    return specialChar != 0
        ? p.write('\\') + p.write(specialChar)
        : p.write(c);
}

size_t EscapedString::printTo(const char* s, Print& p)
    6ee8:	bf 92       	push	r11
    6eea:	cf 92       	push	r12
    6eec:	df 92       	push	r13
    6eee:	ef 92       	push	r14
    6ef0:	ff 92       	push	r15
    6ef2:	0f 93       	push	r16
    6ef4:	1f 93       	push	r17
    6ef6:	cf 93       	push	r28
    6ef8:	df 93       	push	r29
    6efa:	7c 01       	movw	r14, r24
    6efc:	eb 01       	movw	r28, r22
{
    if (!s) return p.print("null");
    6efe:	00 97       	sbiw	r24, 0x00	; 0
    6f00:	39 f4       	brne	.+14     	; 0x6f10 <ArduinoJson::Internals::EscapedString::printTo(char const*, Print&)+0x28>
    6f02:	cb 01       	movw	r24, r22
    6f04:	67 e2       	ldi	r22, 0x27	; 39
    6f06:	71 e0       	ldi	r23, 0x01	; 1
    6f08:	0e 94 65 3d 	call	0x7aca	; 0x7aca <Print::print(char const*)>
    6f0c:	9c 01       	movw	r18, r24
    6f0e:	43 c0       	rjmp	.+134    	; 0x6f96 <ArduinoJson::Internals::EscapedString::printTo(char const*, Print&)+0xae>
    
    size_t n = p.write('\"');
    6f10:	e8 81       	ld	r30, Y
    6f12:	f9 81       	ldd	r31, Y+1	; 0x01
    6f14:	01 90       	ld	r0, Z+
    6f16:	f0 81       	ld	r31, Z
    6f18:	e0 2d       	mov	r30, r0
    6f1a:	cb 01       	movw	r24, r22
    6f1c:	62 e2       	ldi	r22, 0x22	; 34
    6f1e:	09 95       	icall
    6f20:	6c 01       	movw	r12, r24
    6f22:	27 c0       	rjmp	.+78     	; 0x6f72 <ArduinoJson::Internals::EscapedString::printTo(char const*, Print&)+0x8a>

    const char* p = "\"\"\\\\\bb\ff\nn\rr\tt\0";

    while (p[0] && p[0] != c)
    {
        p += 2;
    6f24:	32 96       	adiw	r30, 0x02	; 2
{
    // Optimized for code size on a 8-bit AVR

    const char* p = "\"\"\\\\\bb\ff\nn\rr\tt\0";

    while (p[0] && p[0] != c)
    6f26:	80 81       	ld	r24, Z
    6f28:	88 23       	and	r24, r24
    6f2a:	11 f0       	breq	.+4      	; 0x6f30 <ArduinoJson::Internals::EscapedString::printTo(char const*, Print&)+0x48>
    6f2c:	86 17       	cp	r24, r22
    6f2e:	d1 f7       	brne	.-12     	; 0x6f24 <ArduinoJson::Internals::EscapedString::printTo(char const*, Print&)+0x3c>
    {
        p += 2;
    }

    return p[1];
    6f30:	b1 80       	ldd	r11, Z+1	; 0x01
    6f32:	e8 81       	ld	r30, Y
    6f34:	f9 81       	ldd	r31, Y+1	; 0x01
{
    char specialChar = getSpecialChar(c);

    return specialChar != 0
        ? p.write('\\') + p.write(specialChar)
        : p.write(c);
    6f36:	bb 20       	and	r11, r11
    6f38:	91 f0       	breq	.+36     	; 0x6f5e <ArduinoJson::Internals::EscapedString::printTo(char const*, Print&)+0x76>
    6f3a:	01 90       	ld	r0, Z+
    6f3c:	f0 81       	ld	r31, Z
    6f3e:	e0 2d       	mov	r30, r0
    6f40:	ce 01       	movw	r24, r28
    6f42:	6c e5       	ldi	r22, 0x5C	; 92
    6f44:	09 95       	icall
    6f46:	8c 01       	movw	r16, r24
    6f48:	e8 81       	ld	r30, Y
    6f4a:	f9 81       	ldd	r31, Y+1	; 0x01
    6f4c:	01 90       	ld	r0, Z+
    6f4e:	f0 81       	ld	r31, Z
    6f50:	e0 2d       	mov	r30, r0
    6f52:	ce 01       	movw	r24, r28
    6f54:	6b 2d       	mov	r22, r11
    6f56:	09 95       	icall
    6f58:	80 0f       	add	r24, r16
    6f5a:	91 1f       	adc	r25, r17
    6f5c:	05 c0       	rjmp	.+10     	; 0x6f68 <ArduinoJson::Internals::EscapedString::printTo(char const*, Print&)+0x80>
    6f5e:	01 90       	ld	r0, Z+
    6f60:	f0 81       	ld	r31, Z
    6f62:	e0 2d       	mov	r30, r0
    6f64:	ce 01       	movw	r24, r28
    6f66:	09 95       	icall
    
    size_t n = p.write('\"');

    while (*s)
    {
        n += printCharTo(*s++, p);
    6f68:	08 94       	sec
    6f6a:	e1 1c       	adc	r14, r1
    6f6c:	f1 1c       	adc	r15, r1
    6f6e:	c8 0e       	add	r12, r24
    6f70:	d9 1e       	adc	r13, r25
{
    if (!s) return p.print("null");
    
    size_t n = p.write('\"');

    while (*s)
    6f72:	f7 01       	movw	r30, r14
    6f74:	60 81       	ld	r22, Z
    6f76:	66 23       	and	r22, r22
    6f78:	19 f0       	breq	.+6      	; 0x6f80 <ArduinoJson::Internals::EscapedString::printTo(char const*, Print&)+0x98>
    6f7a:	e7 e3       	ldi	r30, 0x37	; 55
    6f7c:	f1 e0       	ldi	r31, 0x01	; 1
    6f7e:	d3 cf       	rjmp	.-90     	; 0x6f26 <ArduinoJson::Internals::EscapedString::printTo(char const*, Print&)+0x3e>
    {
        n += printCharTo(*s++, p);
    }

    return n + p.write('\"');
    6f80:	e8 81       	ld	r30, Y
    6f82:	f9 81       	ldd	r31, Y+1	; 0x01
    6f84:	01 90       	ld	r0, Z+
    6f86:	f0 81       	ld	r31, Z
    6f88:	e0 2d       	mov	r30, r0
    6f8a:	ce 01       	movw	r24, r28
    6f8c:	62 e2       	ldi	r22, 0x22	; 34
    6f8e:	09 95       	icall
    6f90:	96 01       	movw	r18, r12
    6f92:	28 0f       	add	r18, r24
    6f94:	39 1f       	adc	r19, r25
}
    6f96:	c9 01       	movw	r24, r18
    6f98:	df 91       	pop	r29
    6f9a:	cf 91       	pop	r28
    6f9c:	1f 91       	pop	r17
    6f9e:	0f 91       	pop	r16
    6fa0:	ff 90       	pop	r15
    6fa2:	ef 90       	pop	r14
    6fa4:	df 90       	pop	r13
    6fa6:	cf 90       	pop	r12
    6fa8:	bf 90       	pop	r11
    6faa:	08 95       	ret

00006fac <ArduinoJson::Generator::JsonValue::printStringTo(ArduinoJson::Generator::JsonValue::Content const&, Print&)>:
        return c.asPrintable->printTo(p);
    else
        return p.print("null");
}

size_t JsonValue::printStringTo(const Content& c, Print& p)
    6fac:	fc 01       	movw	r30, r24
{
    return EscapedString::printTo(c.asString, p);
    6fae:	80 81       	ld	r24, Z
    6fb0:	91 81       	ldd	r25, Z+1	; 0x01
    6fb2:	0e 94 74 37 	call	0x6ee8	; 0x6ee8 <ArduinoJson::Internals::EscapedString::printTo(char const*, Print&)>
}
    6fb6:	08 95       	ret

00006fb8 <ArduinoJson::Generator::JsonObjectBase::printTo(Print&) const>:
using namespace ArduinoJson::Generator;
using namespace ArduinoJson::Internals;

JsonValue JsonObjectBase::_nullValue;

size_t JsonObjectBase::printTo(Print& p) const
    6fb8:	6f 92       	push	r6
    6fba:	7f 92       	push	r7
    6fbc:	8f 92       	push	r8
    6fbe:	9f 92       	push	r9
    6fc0:	af 92       	push	r10
    6fc2:	bf 92       	push	r11
    6fc4:	cf 92       	push	r12
    6fc6:	df 92       	push	r13
    6fc8:	ef 92       	push	r14
    6fca:	ff 92       	push	r15
    6fcc:	0f 93       	push	r16
    6fce:	1f 93       	push	r17
    6fd0:	cf 93       	push	r28
    6fd2:	df 93       	push	r29
    6fd4:	8c 01       	movw	r16, r24
    6fd6:	eb 01       	movw	r28, r22
{
    size_t n = 0;

    n += p.write('{');
    6fd8:	e8 81       	ld	r30, Y
    6fda:	f9 81       	ldd	r31, Y+1	; 0x01
    6fdc:	01 90       	ld	r0, Z+
    6fde:	f0 81       	ld	r31, Z
    6fe0:	e0 2d       	mov	r30, r0
    6fe2:	cb 01       	movw	r24, r22
    6fe4:	6b e7       	ldi	r22, 0x7B	; 123
    6fe6:	09 95       	icall
    6fe8:	5c 01       	movw	r10, r24

    // NB: the code has been optimized for a small size on a 8-bit AVR

    const KeyValuePair* current = _items;
    6fea:	d8 01       	movw	r26, r16
    6fec:	12 96       	adiw	r26, 0x02	; 2
    6fee:	6d 90       	ld	r6, X+
    6ff0:	7c 90       	ld	r7, X
    6ff2:	13 97       	sbiw	r26, 0x03	; 3
    for (int i = _count; i > 0; i--)
    6ff4:	16 96       	adiw	r26, 0x06	; 6
    6ff6:	8d 90       	ld	r8, X+
    6ff8:	9c 90       	ld	r9, X
    6ffa:	17 97       	sbiw	r26, 0x07	; 7
    6ffc:	34 c0       	rjmp	.+104    	; 0x7066 <ArduinoJson::Generator::JsonObjectBase::printTo(Print&) const+0xae>
    {       
        n += EscapedString::printTo(current->key, p);
    6ffe:	f3 01       	movw	r30, r6
    7000:	81 91       	ld	r24, Z+
    7002:	91 91       	ld	r25, Z+
    7004:	8f 01       	movw	r16, r30
    7006:	be 01       	movw	r22, r28
    7008:	0e 94 74 37 	call	0x6ee8	; 0x6ee8 <ArduinoJson::Internals::EscapedString::printTo(char const*, Print&)>
    700c:	7c 01       	movw	r14, r24
        n += p.write(':');
    700e:	e8 81       	ld	r30, Y
    7010:	f9 81       	ldd	r31, Y+1	; 0x01
    7012:	01 90       	ld	r0, Z+
    7014:	f0 81       	ld	r31, Z
    7016:	e0 2d       	mov	r30, r0
    7018:	ce 01       	movw	r24, r28
    701a:	6a e3       	ldi	r22, 0x3A	; 58
    701c:	09 95       	icall
    701e:	6c 01       	movw	r12, r24
            }

            size_t printTo(Print& p) const
            {
                // handmade polymorphism
                return _printToImpl(_content, p);
    7020:	d3 01       	movw	r26, r6
    7022:	16 96       	adiw	r26, 0x06	; 6
    7024:	ed 91       	ld	r30, X+
    7026:	fc 91       	ld	r31, X
    7028:	17 97       	sbiw	r26, 0x07	; 7
    702a:	c8 01       	movw	r24, r16
    702c:	be 01       	movw	r22, r28
    702e:	09 95       	icall
    // NB: the code has been optimized for a small size on a 8-bit AVR

    const KeyValuePair* current = _items;
    for (int i = _count; i > 0; i--)
    {       
        n += EscapedString::printTo(current->key, p);
    7030:	ec 0c       	add	r14, r12
    7032:	fd 1c       	adc	r15, r13
        n += p.write(':');
    7034:	ae 0c       	add	r10, r14
    7036:	bf 1c       	adc	r11, r15
        n += current->value.printTo(p);
    7038:	a8 0e       	add	r10, r24
    703a:	b9 1e       	adc	r11, r25

        current++;

        if (i > 1)
    703c:	b1 e0       	ldi	r27, 0x01	; 1
    703e:	8b 16       	cp	r8, r27
    7040:	91 04       	cpc	r9, r1
    7042:	51 f0       	breq	.+20     	; 0x7058 <ArduinoJson::Generator::JsonObjectBase::printTo(Print&) const+0xa0>
        {
            n += p.write(',');
    7044:	e8 81       	ld	r30, Y
    7046:	f9 81       	ldd	r31, Y+1	; 0x01
    7048:	01 90       	ld	r0, Z+
    704a:	f0 81       	ld	r31, Z
    704c:	e0 2d       	mov	r30, r0
    704e:	ce 01       	movw	r24, r28
    7050:	6c e2       	ldi	r22, 0x2C	; 44
    7052:	09 95       	icall
    7054:	a8 0e       	add	r10, r24
    7056:	b9 1e       	adc	r11, r25
    {       
        n += EscapedString::printTo(current->key, p);
        n += p.write(':');
        n += current->value.printTo(p);

        current++;
    7058:	e8 e0       	ldi	r30, 0x08	; 8
    705a:	f0 e0       	ldi	r31, 0x00	; 0
    705c:	6e 0e       	add	r6, r30
    705e:	7f 1e       	adc	r7, r31
    n += p.write('{');

    // NB: the code has been optimized for a small size on a 8-bit AVR

    const KeyValuePair* current = _items;
    for (int i = _count; i > 0; i--)
    7060:	08 94       	sec
    7062:	81 08       	sbc	r8, r1
    7064:	91 08       	sbc	r9, r1
    7066:	18 14       	cp	r1, r8
    7068:	19 04       	cpc	r1, r9
    706a:	4c f2       	brlt	.-110    	; 0x6ffe <ArduinoJson::Generator::JsonObjectBase::printTo(Print&) const+0x46>
        {
            n += p.write(',');
        }
    }

    n += p.write('}');
    706c:	e8 81       	ld	r30, Y
    706e:	f9 81       	ldd	r31, Y+1	; 0x01
    7070:	01 90       	ld	r0, Z+
    7072:	f0 81       	ld	r31, Z
    7074:	e0 2d       	mov	r30, r0
    7076:	ce 01       	movw	r24, r28
    7078:	6d e7       	ldi	r22, 0x7D	; 125
    707a:	09 95       	icall
    707c:	95 01       	movw	r18, r10
    707e:	28 0f       	add	r18, r24
    7080:	39 1f       	adc	r19, r25

    return n;
}
    7082:	c9 01       	movw	r24, r18
    7084:	df 91       	pop	r29
    7086:	cf 91       	pop	r28
    7088:	1f 91       	pop	r17
    708a:	0f 91       	pop	r16
    708c:	ff 90       	pop	r15
    708e:	ef 90       	pop	r14
    7090:	df 90       	pop	r13
    7092:	cf 90       	pop	r12
    7094:	bf 90       	pop	r11
    7096:	af 90       	pop	r10
    7098:	9f 90       	pop	r9
    709a:	8f 90       	pop	r8
    709c:	7f 90       	pop	r7
    709e:	6f 90       	pop	r6
    70a0:	08 95       	ret

000070a2 <ArduinoJson::Generator::JsonValue::printLongTo(ArduinoJson::Generator::JsonValue::Content const&, Print&)>:
size_t JsonValue::printBoolTo(const Content& c, Print& p)
{
    return p.print(c.asBool ? "true" : "false");
}

size_t JsonValue::printLongTo(const Content& c, Print& p)
    70a2:	fc 01       	movw	r30, r24
    70a4:	cb 01       	movw	r24, r22
{
    return p.print(c.asLong);
    70a6:	40 81       	ld	r20, Z
    70a8:	51 81       	ldd	r21, Z+1	; 0x01
    70aa:	62 81       	ldd	r22, Z+2	; 0x02
    70ac:	73 81       	ldd	r23, Z+3	; 0x03
    70ae:	2a e0       	ldi	r18, 0x0A	; 10
    70b0:	30 e0       	ldi	r19, 0x00	; 0
    70b2:	0e 94 12 3d 	call	0x7a24	; 0x7a24 <Print::print(long, int)>
}
    70b6:	08 95       	ret

000070b8 <ArduinoJson::Generator::JsonObjectBase::getMatchingPair(char const*) const>:

JsonObjectBase::KeyValuePair* JsonObjectBase::getMatchingPair(JsonKey key) const
    70b8:	ef 92       	push	r14
    70ba:	ff 92       	push	r15
    70bc:	0f 93       	push	r16
    70be:	1f 93       	push	r17
    70c0:	cf 93       	push	r28
    70c2:	df 93       	push	r29
    70c4:	fc 01       	movw	r30, r24
    70c6:	7b 01       	movw	r14, r22
{
    KeyValuePair* p = _items;
    70c8:	c2 81       	ldd	r28, Z+2	; 0x02
    70ca:	d3 81       	ldd	r29, Z+3	; 0x03

    for (int i = _count; i > 0; --i)
    70cc:	06 81       	ldd	r16, Z+6	; 0x06
    70ce:	17 81       	ldd	r17, Z+7	; 0x07
    70d0:	0a c0       	rjmp	.+20     	; 0x70e6 <ArduinoJson::Generator::JsonObjectBase::getMatchingPair(char const*) const+0x2e>
    {
        if (!strcmp(p->key, key))
    70d2:	88 81       	ld	r24, Y
    70d4:	99 81       	ldd	r25, Y+1	; 0x01
    70d6:	b7 01       	movw	r22, r14
    70d8:	0e 94 47 04 	call	0x88e	; 0x88e <strcmp>
    70dc:	00 97       	sbiw	r24, 0x00	; 0
    70de:	41 f0       	breq	.+16     	; 0x70f0 <ArduinoJson::Generator::JsonObjectBase::getMatchingPair(char const*) const+0x38>
            return p;

        p++;
    70e0:	28 96       	adiw	r28, 0x08	; 8

JsonObjectBase::KeyValuePair* JsonObjectBase::getMatchingPair(JsonKey key) const
{
    KeyValuePair* p = _items;

    for (int i = _count; i > 0; --i)
    70e2:	01 50       	subi	r16, 0x01	; 1
    70e4:	10 40       	sbci	r17, 0x00	; 0
    70e6:	10 16       	cp	r1, r16
    70e8:	11 06       	cpc	r1, r17
    70ea:	9c f3       	brlt	.-26     	; 0x70d2 <ArduinoJson::Generator::JsonObjectBase::getMatchingPair(char const*) const+0x1a>
    70ec:	c0 e0       	ldi	r28, 0x00	; 0
    70ee:	d0 e0       	ldi	r29, 0x00	; 0

        p++;
    }

    return 0;
}
    70f0:	ce 01       	movw	r24, r28
    70f2:	df 91       	pop	r29
    70f4:	cf 91       	pop	r28
    70f6:	1f 91       	pop	r17
    70f8:	0f 91       	pop	r16
    70fa:	ff 90       	pop	r15
    70fc:	ef 90       	pop	r14
    70fe:	08 95       	ret

00007100 <ArduinoJson::Generator::JsonObjectBase::operator[](char const*)>:

JsonValue& JsonObjectBase::operator[](JsonKey key)
    7100:	0f 93       	push	r16
    7102:	1f 93       	push	r17
    7104:	cf 93       	push	r28
    7106:	df 93       	push	r29
    7108:	ec 01       	movw	r28, r24
    710a:	8b 01       	movw	r16, r22
{
    KeyValuePair* match = getMatchingPair(key);
    710c:	0e 94 5c 38 	call	0x70b8	; 0x70b8 <ArduinoJson::Generator::JsonObjectBase::getMatchingPair(char const*) const>

    if (match)
    7110:	00 97       	sbiw	r24, 0x00	; 0
    7112:	19 f0       	breq	.+6      	; 0x711a <ArduinoJson::Generator::JsonObjectBase::operator[](char const*)+0x1a>
        return match->value;
    7114:	fc 01       	movw	r30, r24
    7116:	32 96       	adiw	r30, 0x02	; 2
    7118:	26 c0       	rjmp	.+76     	; 0x7166 <ArduinoJson::Generator::JsonObjectBase::operator[](char const*)+0x66>

    JsonValue* value;

    if (_count < _capacity)
    711a:	2e 81       	ldd	r18, Y+6	; 0x06
    711c:	3f 81       	ldd	r19, Y+7	; 0x07
    711e:	8c 81       	ldd	r24, Y+4	; 0x04
    7120:	9d 81       	ldd	r25, Y+5	; 0x05
    7122:	28 17       	cp	r18, r24
    7124:	39 07       	cpc	r19, r25
    7126:	1c f0       	brlt	.+6      	; 0x712e <ArduinoJson::Generator::JsonObjectBase::operator[](char const*)+0x2e>
    7128:	e3 e4       	ldi	r30, 0x43	; 67
    712a:	f4 e0       	ldi	r31, 0x04	; 4
    712c:	10 c0       	rjmp	.+32     	; 0x714e <ArduinoJson::Generator::JsonObjectBase::operator[](char const*)+0x4e>
    {
        _items[_count].key = key;
    712e:	c9 01       	movw	r24, r18
    7130:	53 e0       	ldi	r21, 0x03	; 3
    7132:	88 0f       	add	r24, r24
    7134:	99 1f       	adc	r25, r25
    7136:	5a 95       	dec	r21
    7138:	e1 f7       	brne	.-8      	; 0x7132 <ArduinoJson::Generator::JsonObjectBase::operator[](char const*)+0x32>
    713a:	ea 81       	ldd	r30, Y+2	; 0x02
    713c:	fb 81       	ldd	r31, Y+3	; 0x03
    713e:	e8 0f       	add	r30, r24
    7140:	f9 1f       	adc	r31, r25
    7142:	01 93       	st	Z+, r16
    7144:	11 93       	st	Z+, r17
        value = &_items[_count].value;
        _count++;
    7146:	2f 5f       	subi	r18, 0xFF	; 255
    7148:	3f 4f       	sbci	r19, 0xFF	; 255
    714a:	3f 83       	std	Y+7, r19	; 0x07
    714c:	2e 83       	std	Y+6, r18	; 0x06
            }

            void reset()
            {
                _content.asDouble = 0;
    714e:	80 e0       	ldi	r24, 0x00	; 0
    7150:	90 e0       	ldi	r25, 0x00	; 0
    7152:	a0 e0       	ldi	r26, 0x00	; 0
    7154:	b0 e0       	ldi	r27, 0x00	; 0
    7156:	80 83       	st	Z, r24
    7158:	91 83       	std	Z+1, r25	; 0x01
    715a:	a2 83       	std	Z+2, r26	; 0x02
    715c:	b3 83       	std	Z+3, r27	; 0x03
                _printToImpl = printStringTo;
    715e:	86 ed       	ldi	r24, 0xD6	; 214
    7160:	97 e3       	ldi	r25, 0x37	; 55
    7162:	95 83       	std	Z+5, r25	; 0x05
    7164:	84 83       	std	Z+4, r24	; 0x04
        value = &_nullValue;
    }

    value->reset();
    return *value;
}
    7166:	cf 01       	movw	r24, r30
    7168:	df 91       	pop	r29
    716a:	cf 91       	pop	r28
    716c:	1f 91       	pop	r17
    716e:	0f 91       	pop	r16
    7170:	08 95       	ret

00007172 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    7172:	cf 93       	push	r28
    7174:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    7176:	48 2f       	mov	r20, r24
    7178:	50 e0       	ldi	r21, 0x00	; 0
    717a:	ca 01       	movw	r24, r20
    717c:	85 53       	subi	r24, 0x35	; 53
    717e:	98 4f       	sbci	r25, 0xF8	; 248
    7180:	fc 01       	movw	r30, r24
    7182:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
    7184:	49 54       	subi	r20, 0x49	; 73
    7186:	58 4f       	sbci	r21, 0xF8	; 248
    7188:	fa 01       	movw	r30, r20
    718a:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    718c:	88 23       	and	r24, r24
    718e:	69 f1       	breq	.+90     	; 0x71ea <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    7190:	90 e0       	ldi	r25, 0x00	; 0
    7192:	88 0f       	add	r24, r24
    7194:	99 1f       	adc	r25, r25
    7196:	fc 01       	movw	r30, r24
    7198:	e7 56       	subi	r30, 0x67	; 103
    719a:	f8 4f       	sbci	r31, 0xF8	; 248
    719c:	a5 91       	lpm	r26, Z+
    719e:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
    71a0:	fc 01       	movw	r30, r24
    71a2:	ed 55       	subi	r30, 0x5D	; 93
    71a4:	f8 4f       	sbci	r31, 0xF8	; 248
    71a6:	c5 91       	lpm	r28, Z+
    71a8:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
    71aa:	66 23       	and	r22, r22
    71ac:	51 f4       	brne	.+20     	; 0x71c2 <pinMode+0x50>
		uint8_t oldSREG = SREG;
    71ae:	2f b7       	in	r18, 0x3f	; 63
                cli();
    71b0:	f8 94       	cli
		*reg &= ~bit;
    71b2:	8c 91       	ld	r24, X
    71b4:	93 2f       	mov	r25, r19
    71b6:	90 95       	com	r25
    71b8:	89 23       	and	r24, r25
    71ba:	8c 93       	st	X, r24
		*out &= ~bit;
    71bc:	88 81       	ld	r24, Y
    71be:	89 23       	and	r24, r25
    71c0:	0b c0       	rjmp	.+22     	; 0x71d8 <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    71c2:	62 30       	cpi	r22, 0x02	; 2
    71c4:	61 f4       	brne	.+24     	; 0x71de <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    71c6:	2f b7       	in	r18, 0x3f	; 63
                cli();
    71c8:	f8 94       	cli
		*reg &= ~bit;
    71ca:	8c 91       	ld	r24, X
    71cc:	93 2f       	mov	r25, r19
    71ce:	90 95       	com	r25
    71d0:	89 23       	and	r24, r25
    71d2:	8c 93       	st	X, r24
		*out |= bit;
    71d4:	88 81       	ld	r24, Y
    71d6:	83 2b       	or	r24, r19
    71d8:	88 83       	st	Y, r24
		SREG = oldSREG;
    71da:	2f bf       	out	0x3f, r18	; 63
    71dc:	06 c0       	rjmp	.+12     	; 0x71ea <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    71de:	9f b7       	in	r25, 0x3f	; 63
                cli();
    71e0:	f8 94       	cli
		*reg |= bit;
    71e2:	8c 91       	ld	r24, X
    71e4:	83 2b       	or	r24, r19
    71e6:	8c 93       	st	X, r24
		SREG = oldSREG;
    71e8:	9f bf       	out	0x3f, r25	; 63
	}
}
    71ea:	df 91       	pop	r29
    71ec:	cf 91       	pop	r28
    71ee:	08 95       	ret

000071f0 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    71f0:	48 2f       	mov	r20, r24
    71f2:	50 e0       	ldi	r21, 0x00	; 0
    71f4:	ca 01       	movw	r24, r20
    71f6:	81 52       	subi	r24, 0x21	; 33
    71f8:	98 4f       	sbci	r25, 0xF8	; 248
    71fa:	fc 01       	movw	r30, r24
    71fc:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    71fe:	ca 01       	movw	r24, r20
    7200:	85 53       	subi	r24, 0x35	; 53
    7202:	98 4f       	sbci	r25, 0xF8	; 248
    7204:	fc 01       	movw	r30, r24
    7206:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    7208:	49 54       	subi	r20, 0x49	; 73
    720a:	58 4f       	sbci	r21, 0xF8	; 248
    720c:	fa 01       	movw	r30, r20
    720e:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    7210:	33 23       	and	r19, r19
    7212:	09 f4       	brne	.+2      	; 0x7216 <digitalWrite+0x26>
    7214:	40 c0       	rjmp	.+128    	; 0x7296 <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    7216:	22 23       	and	r18, r18
    7218:	51 f1       	breq	.+84     	; 0x726e <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    721a:	23 30       	cpi	r18, 0x03	; 3
    721c:	71 f0       	breq	.+28     	; 0x723a <digitalWrite+0x4a>
    721e:	24 30       	cpi	r18, 0x04	; 4
    7220:	28 f4       	brcc	.+10     	; 0x722c <digitalWrite+0x3c>
    7222:	21 30       	cpi	r18, 0x01	; 1
    7224:	a1 f0       	breq	.+40     	; 0x724e <digitalWrite+0x5e>
    7226:	22 30       	cpi	r18, 0x02	; 2
    7228:	11 f5       	brne	.+68     	; 0x726e <digitalWrite+0x7e>
    722a:	14 c0       	rjmp	.+40     	; 0x7254 <digitalWrite+0x64>
    722c:	26 30       	cpi	r18, 0x06	; 6
    722e:	b1 f0       	breq	.+44     	; 0x725c <digitalWrite+0x6c>
    7230:	27 30       	cpi	r18, 0x07	; 7
    7232:	c1 f0       	breq	.+48     	; 0x7264 <digitalWrite+0x74>
    7234:	24 30       	cpi	r18, 0x04	; 4
    7236:	d9 f4       	brne	.+54     	; 0x726e <digitalWrite+0x7e>
    7238:	04 c0       	rjmp	.+8      	; 0x7242 <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    723a:	80 91 80 00 	lds	r24, 0x0080
    723e:	8f 77       	andi	r24, 0x7F	; 127
    7240:	03 c0       	rjmp	.+6      	; 0x7248 <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    7242:	80 91 80 00 	lds	r24, 0x0080
    7246:	8f 7d       	andi	r24, 0xDF	; 223
    7248:	80 93 80 00 	sts	0x0080, r24
    724c:	10 c0       	rjmp	.+32     	; 0x726e <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    724e:	84 b5       	in	r24, 0x24	; 36
    7250:	8f 77       	andi	r24, 0x7F	; 127
    7252:	02 c0       	rjmp	.+4      	; 0x7258 <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    7254:	84 b5       	in	r24, 0x24	; 36
    7256:	8f 7d       	andi	r24, 0xDF	; 223
    7258:	84 bd       	out	0x24, r24	; 36
    725a:	09 c0       	rjmp	.+18     	; 0x726e <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    725c:	80 91 b0 00 	lds	r24, 0x00B0
    7260:	8f 77       	andi	r24, 0x7F	; 127
    7262:	03 c0       	rjmp	.+6      	; 0x726a <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    7264:	80 91 b0 00 	lds	r24, 0x00B0
    7268:	8f 7d       	andi	r24, 0xDF	; 223
    726a:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    726e:	e3 2f       	mov	r30, r19
    7270:	f0 e0       	ldi	r31, 0x00	; 0
    7272:	ee 0f       	add	r30, r30
    7274:	ff 1f       	adc	r31, r31
    7276:	ed 55       	subi	r30, 0x5D	; 93
    7278:	f8 4f       	sbci	r31, 0xF8	; 248
    727a:	a5 91       	lpm	r26, Z+
    727c:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    727e:	2f b7       	in	r18, 0x3f	; 63
	cli();
    7280:	f8 94       	cli

	if (val == LOW) {
    7282:	66 23       	and	r22, r22
    7284:	21 f4       	brne	.+8      	; 0x728e <digitalWrite+0x9e>
		*out &= ~bit;
    7286:	8c 91       	ld	r24, X
    7288:	90 95       	com	r25
    728a:	89 23       	and	r24, r25
    728c:	02 c0       	rjmp	.+4      	; 0x7292 <digitalWrite+0xa2>
	} else {
		*out |= bit;
    728e:	8c 91       	ld	r24, X
    7290:	89 2b       	or	r24, r25
    7292:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    7294:	2f bf       	out	0x3f, r18	; 63
    7296:	08 95       	ret

00007298 <serialEvent()>:
#if !defined(USART_RX_vect) && !defined(USART0_RX_vect) && \
    !defined(USART_RXC_vect)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    7298:	08 95       	ret

0000729a <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  ISR(USART_RX_vect)
    729a:	1f 92       	push	r1
    729c:	0f 92       	push	r0
    729e:	0f b6       	in	r0, 0x3f	; 63
    72a0:	0f 92       	push	r0
    72a2:	11 24       	eor	r1, r1
    72a4:	2f 93       	push	r18
    72a6:	3f 93       	push	r19
    72a8:	4f 93       	push	r20
    72aa:	8f 93       	push	r24
    72ac:	9f 93       	push	r25
    72ae:	ef 93       	push	r30
    72b0:	ff 93       	push	r31
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#endif
  {
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
    72b2:	80 91 c0 00 	lds	r24, 0x00C0
    72b6:	82 fd       	sbrc	r24, 2
    72b8:	1d c0       	rjmp	.+58     	; 0x72f4 <__vector_18+0x5a>
      unsigned char c = UDR0;
    72ba:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    72be:	20 91 89 04 	lds	r18, 0x0489
    72c2:	30 91 8a 04 	lds	r19, 0x048A

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    72c6:	2f 5f       	subi	r18, 0xFF	; 255
    72c8:	3f 4f       	sbci	r19, 0xFF	; 255
    72ca:	2f 73       	andi	r18, 0x3F	; 63
    72cc:	30 70       	andi	r19, 0x00	; 0
    72ce:	80 91 8b 04 	lds	r24, 0x048B
    72d2:	90 91 8c 04 	lds	r25, 0x048C
    72d6:	28 17       	cp	r18, r24
    72d8:	39 07       	cpc	r19, r25
    72da:	71 f0       	breq	.+28     	; 0x72f8 <__vector_18+0x5e>
    buffer->buffer[buffer->head] = c;
    72dc:	e0 91 89 04 	lds	r30, 0x0489
    72e0:	f0 91 8a 04 	lds	r31, 0x048A
    72e4:	e7 5b       	subi	r30, 0xB7	; 183
    72e6:	fb 4f       	sbci	r31, 0xFB	; 251
    72e8:	40 83       	st	Z, r20
    buffer->head = i;
    72ea:	30 93 8a 04 	sts	0x048A, r19
    72ee:	20 93 89 04 	sts	0x0489, r18
    72f2:	02 c0       	rjmp	.+4      	; 0x72f8 <__vector_18+0x5e>
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
      unsigned char c = UDR0;
      store_char(c, &rx_buffer);
    } else {
      unsigned char c = UDR0;
    72f4:	80 91 c6 00 	lds	r24, 0x00C6
      unsigned char c = UDR;
    };
  #else
    #error UDR not defined
  #endif
  }
    72f8:	ff 91       	pop	r31
    72fa:	ef 91       	pop	r30
    72fc:	9f 91       	pop	r25
    72fe:	8f 91       	pop	r24
    7300:	4f 91       	pop	r20
    7302:	3f 91       	pop	r19
    7304:	2f 91       	pop	r18
    7306:	0f 90       	pop	r0
    7308:	0f be       	out	0x3f, r0	; 63
    730a:	0f 90       	pop	r0
    730c:	1f 90       	pop	r1
    730e:	18 95       	reti

00007310 <serialEventRun()>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    7310:	e0 91 dd 04 	lds	r30, 0x04DD
    7314:	f0 91 de 04 	lds	r31, 0x04DE
    7318:	e0 5c       	subi	r30, 0xC0	; 192
    731a:	ff 4f       	sbci	r31, 0xFF	; 255
    731c:	81 91       	ld	r24, Z+
    731e:	91 91       	ld	r25, Z+
    7320:	20 81       	ld	r18, Z
    7322:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    7324:	82 1b       	sub	r24, r18
    7326:	93 0b       	sbc	r25, r19
    7328:	8f 73       	andi	r24, 0x3F	; 63
    732a:	90 70       	andi	r25, 0x00	; 0
    732c:	89 2b       	or	r24, r25
    732e:	11 f0       	breq	.+4      	; 0x7334 <serialEventRun()+0x24>
    7330:	0e 94 4c 39 	call	0x7298	; 0x7298 <serialEvent()>
    7334:	08 95       	ret

00007336 <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
    7336:	1f 92       	push	r1
    7338:	0f 92       	push	r0
    733a:	0f b6       	in	r0, 0x3f	; 63
    733c:	0f 92       	push	r0
    733e:	11 24       	eor	r1, r1
    7340:	2f 93       	push	r18
    7342:	3f 93       	push	r19
    7344:	8f 93       	push	r24
    7346:	9f 93       	push	r25
    7348:	ef 93       	push	r30
    734a:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    734c:	20 91 cd 04 	lds	r18, 0x04CD
    7350:	30 91 ce 04 	lds	r19, 0x04CE
    7354:	80 91 cf 04 	lds	r24, 0x04CF
    7358:	90 91 d0 04 	lds	r25, 0x04D0
    735c:	28 17       	cp	r18, r24
    735e:	39 07       	cpc	r19, r25
    7360:	31 f4       	brne	.+12     	; 0x736e <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    7362:	80 91 c1 00 	lds	r24, 0x00C1
    7366:	8f 7d       	andi	r24, 0xDF	; 223
    7368:	80 93 c1 00 	sts	0x00C1, r24
    736c:	14 c0       	rjmp	.+40     	; 0x7396 <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    736e:	e0 91 cf 04 	lds	r30, 0x04CF
    7372:	f0 91 d0 04 	lds	r31, 0x04D0
    7376:	e3 57       	subi	r30, 0x73	; 115
    7378:	fb 4f       	sbci	r31, 0xFB	; 251
    737a:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    737c:	80 91 cf 04 	lds	r24, 0x04CF
    7380:	90 91 d0 04 	lds	r25, 0x04D0
    7384:	01 96       	adiw	r24, 0x01	; 1
    7386:	8f 73       	andi	r24, 0x3F	; 63
    7388:	90 70       	andi	r25, 0x00	; 0
    738a:	90 93 d0 04 	sts	0x04D0, r25
    738e:	80 93 cf 04 	sts	0x04CF, r24
	
  #if defined(UDR0)
    UDR0 = c;
    7392:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    7396:	ff 91       	pop	r31
    7398:	ef 91       	pop	r30
    739a:	9f 91       	pop	r25
    739c:	8f 91       	pop	r24
    739e:	3f 91       	pop	r19
    73a0:	2f 91       	pop	r18
    73a2:	0f 90       	pop	r0
    73a4:	0f be       	out	0x3f, r0	; 63
    73a6:	0f 90       	pop	r0
    73a8:	1f 90       	pop	r1
    73aa:	18 95       	reti

000073ac <HardwareSerial::begin(unsigned long)>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    73ac:	af 92       	push	r10
    73ae:	bf 92       	push	r11
    73b0:	df 92       	push	r13
    73b2:	ef 92       	push	r14
    73b4:	ff 92       	push	r15
    73b6:	0f 93       	push	r16
    73b8:	1f 93       	push	r17
    73ba:	cf 93       	push	r28
    73bc:	df 93       	push	r29
    73be:	ec 01       	movw	r28, r24
    73c0:	7a 01       	movw	r14, r20
    73c2:	8b 01       	movw	r16, r22
    73c4:	dd 24       	eor	r13, r13
    73c6:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    73c8:	91 e0       	ldi	r25, 0x01	; 1
    73ca:	a9 2e       	mov	r10, r25
    73cc:	b1 2c       	mov	r11, r1
    73ce:	ec 89       	ldd	r30, Y+20	; 0x14
    73d0:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
    73d2:	dd 20       	and	r13, r13
    73d4:	69 f0       	breq	.+26     	; 0x73f0 <HardwareSerial::begin(unsigned long)+0x44>
    *_ucsra = 1 << _u2x;
    73d6:	c5 01       	movw	r24, r10
    73d8:	08 a0       	ldd	r0, Y+32	; 0x20
    73da:	02 c0       	rjmp	.+4      	; 0x73e0 <HardwareSerial::begin(unsigned long)+0x34>
    73dc:	88 0f       	add	r24, r24
    73de:	99 1f       	adc	r25, r25
    73e0:	0a 94       	dec	r0
    73e2:	e2 f7       	brpl	.-8      	; 0x73dc <HardwareSerial::begin(unsigned long)+0x30>
    73e4:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    73e6:	60 e9       	ldi	r22, 0x90	; 144
    73e8:	70 ed       	ldi	r23, 0xD0	; 208
    73ea:	83 e0       	ldi	r24, 0x03	; 3
    73ec:	90 e0       	ldi	r25, 0x00	; 0
    73ee:	05 c0       	rjmp	.+10     	; 0x73fa <HardwareSerial::begin(unsigned long)+0x4e>
  } else {
    *_ucsra = 0;
    73f0:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    73f2:	68 e4       	ldi	r22, 0x48	; 72
    73f4:	78 ee       	ldi	r23, 0xE8	; 232
    73f6:	81 e0       	ldi	r24, 0x01	; 1
    73f8:	90 e0       	ldi	r25, 0x00	; 0
    73fa:	a8 01       	movw	r20, r16
    73fc:	97 01       	movw	r18, r14
    73fe:	0e 94 3a 3e 	call	0x7c74	; 0x7c74 <__udivmodsi4>
    7402:	21 50       	subi	r18, 0x01	; 1
    7404:	30 40       	sbci	r19, 0x00	; 0
    7406:	40 40       	sbci	r20, 0x00	; 0
    7408:	50 40       	sbci	r21, 0x00	; 0
    740a:	56 95       	lsr	r21
    740c:	47 95       	ror	r20
    740e:	37 95       	ror	r19
    7410:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    7412:	80 e1       	ldi	r24, 0x10	; 16
    7414:	20 30       	cpi	r18, 0x00	; 0
    7416:	38 07       	cpc	r19, r24
    7418:	20 f0       	brcs	.+8      	; 0x7422 <HardwareSerial::begin(unsigned long)+0x76>
    741a:	dd 20       	and	r13, r13
    741c:	11 f0       	breq	.+4      	; 0x7422 <HardwareSerial::begin(unsigned long)+0x76>
    741e:	dd 24       	eor	r13, r13
    7420:	d6 cf       	rjmp	.-84     	; 0x73ce <HardwareSerial::begin(unsigned long)+0x22>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    7422:	e8 89       	ldd	r30, Y+16	; 0x10
    7424:	f9 89       	ldd	r31, Y+17	; 0x11
    7426:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    7428:	ea 89       	ldd	r30, Y+18	; 0x12
    742a:	fb 89       	ldd	r31, Y+19	; 0x13
    742c:	20 83       	st	Z, r18

  transmitting = false;
    742e:	19 a2       	std	Y+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
    7430:	ee 89       	ldd	r30, Y+22	; 0x16
    7432:	ff 89       	ldd	r31, Y+23	; 0x17
    7434:	40 81       	ld	r20, Z
    7436:	21 e0       	ldi	r18, 0x01	; 1
    7438:	30 e0       	ldi	r19, 0x00	; 0
    743a:	c9 01       	movw	r24, r18
    743c:	0c 8c       	ldd	r0, Y+28	; 0x1c
    743e:	02 c0       	rjmp	.+4      	; 0x7444 <HardwareSerial::begin(unsigned long)+0x98>
    7440:	88 0f       	add	r24, r24
    7442:	99 1f       	adc	r25, r25
    7444:	0a 94       	dec	r0
    7446:	e2 f7       	brpl	.-8      	; 0x7440 <HardwareSerial::begin(unsigned long)+0x94>
    7448:	48 2b       	or	r20, r24
    744a:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    744c:	ee 89       	ldd	r30, Y+22	; 0x16
    744e:	ff 89       	ldd	r31, Y+23	; 0x17
    7450:	40 81       	ld	r20, Z
    7452:	c9 01       	movw	r24, r18
    7454:	0d 8c       	ldd	r0, Y+29	; 0x1d
    7456:	02 c0       	rjmp	.+4      	; 0x745c <HardwareSerial::begin(unsigned long)+0xb0>
    7458:	88 0f       	add	r24, r24
    745a:	99 1f       	adc	r25, r25
    745c:	0a 94       	dec	r0
    745e:	e2 f7       	brpl	.-8      	; 0x7458 <HardwareSerial::begin(unsigned long)+0xac>
    7460:	48 2b       	or	r20, r24
    7462:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    7464:	ee 89       	ldd	r30, Y+22	; 0x16
    7466:	ff 89       	ldd	r31, Y+23	; 0x17
    7468:	40 81       	ld	r20, Z
    746a:	c9 01       	movw	r24, r18
    746c:	0e 8c       	ldd	r0, Y+30	; 0x1e
    746e:	02 c0       	rjmp	.+4      	; 0x7474 <HardwareSerial::begin(unsigned long)+0xc8>
    7470:	88 0f       	add	r24, r24
    7472:	99 1f       	adc	r25, r25
    7474:	0a 94       	dec	r0
    7476:	e2 f7       	brpl	.-8      	; 0x7470 <HardwareSerial::begin(unsigned long)+0xc4>
    7478:	48 2b       	or	r20, r24
    747a:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    747c:	ee 89       	ldd	r30, Y+22	; 0x16
    747e:	ff 89       	ldd	r31, Y+23	; 0x17
    7480:	80 81       	ld	r24, Z
    7482:	0f 8c       	ldd	r0, Y+31	; 0x1f
    7484:	02 c0       	rjmp	.+4      	; 0x748a <HardwareSerial::begin(unsigned long)+0xde>
    7486:	22 0f       	add	r18, r18
    7488:	33 1f       	adc	r19, r19
    748a:	0a 94       	dec	r0
    748c:	e2 f7       	brpl	.-8      	; 0x7486 <HardwareSerial::begin(unsigned long)+0xda>
    748e:	20 95       	com	r18
    7490:	28 23       	and	r18, r24
    7492:	20 83       	st	Z, r18
}
    7494:	df 91       	pop	r29
    7496:	cf 91       	pop	r28
    7498:	1f 91       	pop	r17
    749a:	0f 91       	pop	r16
    749c:	ff 90       	pop	r15
    749e:	ef 90       	pop	r14
    74a0:	df 90       	pop	r13
    74a2:	bf 90       	pop	r11
    74a4:	af 90       	pop	r10
    74a6:	08 95       	ret

000074a8 <HardwareSerial::end()>:
  sbi(*_ucsrb, _txen);
  sbi(*_ucsrb, _rxcie);
  cbi(*_ucsrb, _udrie);
}

void HardwareSerial::end()
    74a8:	cf 93       	push	r28
    74aa:	df 93       	push	r29
    74ac:	dc 01       	movw	r26, r24
{
  // wait for transmission of outgoing data
  while (_tx_buffer->head != _tx_buffer->tail)
    74ae:	1e 96       	adiw	r26, 0x0e	; 14
    74b0:	8d 91       	ld	r24, X+
    74b2:	9c 91       	ld	r25, X
    74b4:	1f 97       	sbiw	r26, 0x0f	; 15
    74b6:	ec 01       	movw	r28, r24
    74b8:	c0 5c       	subi	r28, 0xC0	; 192
    74ba:	df 4f       	sbci	r29, 0xFF	; 255
    74bc:	fc 01       	movw	r30, r24
    74be:	ee 5b       	subi	r30, 0xBE	; 190
    74c0:	ff 4f       	sbci	r31, 0xFF	; 255
    74c2:	28 81       	ld	r18, Y
    74c4:	39 81       	ldd	r19, Y+1	; 0x01
    74c6:	80 81       	ld	r24, Z
    74c8:	91 81       	ldd	r25, Z+1	; 0x01
    74ca:	28 17       	cp	r18, r24
    74cc:	39 07       	cpc	r19, r25
    74ce:	c9 f7       	brne	.-14     	; 0x74c2 <HardwareSerial::end()+0x1a>
    ;

  cbi(*_ucsrb, _rxen);
    74d0:	56 96       	adiw	r26, 0x16	; 22
    74d2:	ed 91       	ld	r30, X+
    74d4:	fc 91       	ld	r31, X
    74d6:	57 97       	sbiw	r26, 0x17	; 23
    74d8:	40 81       	ld	r20, Z
    74da:	21 e0       	ldi	r18, 0x01	; 1
    74dc:	30 e0       	ldi	r19, 0x00	; 0
    74de:	c9 01       	movw	r24, r18
    74e0:	5c 96       	adiw	r26, 0x1c	; 28
    74e2:	0c 90       	ld	r0, X
    74e4:	5c 97       	sbiw	r26, 0x1c	; 28
    74e6:	02 c0       	rjmp	.+4      	; 0x74ec <HardwareSerial::end()+0x44>
    74e8:	88 0f       	add	r24, r24
    74ea:	99 1f       	adc	r25, r25
    74ec:	0a 94       	dec	r0
    74ee:	e2 f7       	brpl	.-8      	; 0x74e8 <HardwareSerial::end()+0x40>
    74f0:	80 95       	com	r24
    74f2:	84 23       	and	r24, r20
    74f4:	80 83       	st	Z, r24
  cbi(*_ucsrb, _txen);
    74f6:	56 96       	adiw	r26, 0x16	; 22
    74f8:	ed 91       	ld	r30, X+
    74fa:	fc 91       	ld	r31, X
    74fc:	57 97       	sbiw	r26, 0x17	; 23
    74fe:	40 81       	ld	r20, Z
    7500:	c9 01       	movw	r24, r18
    7502:	5d 96       	adiw	r26, 0x1d	; 29
    7504:	0c 90       	ld	r0, X
    7506:	5d 97       	sbiw	r26, 0x1d	; 29
    7508:	02 c0       	rjmp	.+4      	; 0x750e <HardwareSerial::end()+0x66>
    750a:	88 0f       	add	r24, r24
    750c:	99 1f       	adc	r25, r25
    750e:	0a 94       	dec	r0
    7510:	e2 f7       	brpl	.-8      	; 0x750a <HardwareSerial::end()+0x62>
    7512:	80 95       	com	r24
    7514:	84 23       	and	r24, r20
    7516:	80 83       	st	Z, r24
  cbi(*_ucsrb, _rxcie);  
    7518:	56 96       	adiw	r26, 0x16	; 22
    751a:	ed 91       	ld	r30, X+
    751c:	fc 91       	ld	r31, X
    751e:	57 97       	sbiw	r26, 0x17	; 23
    7520:	40 81       	ld	r20, Z
    7522:	c9 01       	movw	r24, r18
    7524:	5e 96       	adiw	r26, 0x1e	; 30
    7526:	0c 90       	ld	r0, X
    7528:	5e 97       	sbiw	r26, 0x1e	; 30
    752a:	02 c0       	rjmp	.+4      	; 0x7530 <HardwareSerial::end()+0x88>
    752c:	88 0f       	add	r24, r24
    752e:	99 1f       	adc	r25, r25
    7530:	0a 94       	dec	r0
    7532:	e2 f7       	brpl	.-8      	; 0x752c <HardwareSerial::end()+0x84>
    7534:	80 95       	com	r24
    7536:	84 23       	and	r24, r20
    7538:	80 83       	st	Z, r24
  cbi(*_ucsrb, _udrie);
    753a:	56 96       	adiw	r26, 0x16	; 22
    753c:	ed 91       	ld	r30, X+
    753e:	fc 91       	ld	r31, X
    7540:	57 97       	sbiw	r26, 0x17	; 23
    7542:	80 81       	ld	r24, Z
    7544:	5f 96       	adiw	r26, 0x1f	; 31
    7546:	0c 90       	ld	r0, X
    7548:	5f 97       	sbiw	r26, 0x1f	; 31
    754a:	02 c0       	rjmp	.+4      	; 0x7550 <HardwareSerial::end()+0xa8>
    754c:	22 0f       	add	r18, r18
    754e:	33 1f       	adc	r19, r19
    7550:	0a 94       	dec	r0
    7552:	e2 f7       	brpl	.-8      	; 0x754c <HardwareSerial::end()+0xa4>
    7554:	20 95       	com	r18
    7556:	28 23       	and	r18, r24
    7558:	20 83       	st	Z, r18
  
  // clear any received data
  _rx_buffer->head = _rx_buffer->tail;
    755a:	1c 96       	adiw	r26, 0x0c	; 12
    755c:	ed 91       	ld	r30, X+
    755e:	fc 91       	ld	r31, X
    7560:	1d 97       	sbiw	r26, 0x0d	; 13
    7562:	ee 5b       	subi	r30, 0xBE	; 190
    7564:	ff 4f       	sbci	r31, 0xFF	; 255
    7566:	80 81       	ld	r24, Z
    7568:	91 81       	ldd	r25, Z+1	; 0x01
    756a:	92 93       	st	-Z, r25
    756c:	82 93       	st	-Z, r24
}
    756e:	df 91       	pop	r29
    7570:	cf 91       	pop	r28
    7572:	08 95       	ret

00007574 <HardwareSerial::available()>:

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    7574:	dc 01       	movw	r26, r24
    7576:	1c 96       	adiw	r26, 0x0c	; 12
    7578:	ed 91       	ld	r30, X+
    757a:	fc 91       	ld	r31, X
    757c:	1d 97       	sbiw	r26, 0x0d	; 13
    757e:	e0 5c       	subi	r30, 0xC0	; 192
    7580:	ff 4f       	sbci	r31, 0xFF	; 255
    7582:	21 91       	ld	r18, Z+
    7584:	31 91       	ld	r19, Z+
    7586:	80 81       	ld	r24, Z
    7588:	91 81       	ldd	r25, Z+1	; 0x01
    758a:	28 1b       	sub	r18, r24
    758c:	39 0b       	sbc	r19, r25
    758e:	2f 73       	andi	r18, 0x3F	; 63
    7590:	30 70       	andi	r19, 0x00	; 0
}
    7592:	c9 01       	movw	r24, r18
    7594:	08 95       	ret

00007596 <HardwareSerial::peek()>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    7596:	dc 01       	movw	r26, r24
    7598:	1c 96       	adiw	r26, 0x0c	; 12
    759a:	ed 91       	ld	r30, X+
    759c:	fc 91       	ld	r31, X
    759e:	1d 97       	sbiw	r26, 0x0d	; 13
    75a0:	e0 5c       	subi	r30, 0xC0	; 192
    75a2:	ff 4f       	sbci	r31, 0xFF	; 255
    75a4:	20 81       	ld	r18, Z
    75a6:	31 81       	ldd	r19, Z+1	; 0x01
    75a8:	e0 54       	subi	r30, 0x40	; 64
    75aa:	f0 40       	sbci	r31, 0x00	; 0
    75ac:	df 01       	movw	r26, r30
    75ae:	ae 5b       	subi	r26, 0xBE	; 190
    75b0:	bf 4f       	sbci	r27, 0xFF	; 255
    75b2:	8d 91       	ld	r24, X+
    75b4:	9c 91       	ld	r25, X
    75b6:	11 97       	sbiw	r26, 0x01	; 1
    75b8:	28 17       	cp	r18, r24
    75ba:	39 07       	cpc	r19, r25
    75bc:	19 f4       	brne	.+6      	; 0x75c4 <HardwareSerial::peek()+0x2e>
    75be:	2f ef       	ldi	r18, 0xFF	; 255
    75c0:	3f ef       	ldi	r19, 0xFF	; 255
    75c2:	07 c0       	rjmp	.+14     	; 0x75d2 <HardwareSerial::peek()+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    75c4:	8d 91       	ld	r24, X+
    75c6:	9c 91       	ld	r25, X
    75c8:	e8 0f       	add	r30, r24
    75ca:	f9 1f       	adc	r31, r25
    75cc:	80 81       	ld	r24, Z
    75ce:	28 2f       	mov	r18, r24
    75d0:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    75d2:	c9 01       	movw	r24, r18
    75d4:	08 95       	ret

000075d6 <HardwareSerial::read()>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    75d6:	dc 01       	movw	r26, r24
    75d8:	1c 96       	adiw	r26, 0x0c	; 12
    75da:	ed 91       	ld	r30, X+
    75dc:	fc 91       	ld	r31, X
    75de:	1d 97       	sbiw	r26, 0x0d	; 13
    75e0:	e0 5c       	subi	r30, 0xC0	; 192
    75e2:	ff 4f       	sbci	r31, 0xFF	; 255
    75e4:	20 81       	ld	r18, Z
    75e6:	31 81       	ldd	r19, Z+1	; 0x01
    75e8:	e0 54       	subi	r30, 0x40	; 64
    75ea:	f0 40       	sbci	r31, 0x00	; 0
    75ec:	df 01       	movw	r26, r30
    75ee:	ae 5b       	subi	r26, 0xBE	; 190
    75f0:	bf 4f       	sbci	r27, 0xFF	; 255
    75f2:	8d 91       	ld	r24, X+
    75f4:	9c 91       	ld	r25, X
    75f6:	11 97       	sbiw	r26, 0x01	; 1
    75f8:	28 17       	cp	r18, r24
    75fa:	39 07       	cpc	r19, r25
    75fc:	19 f4       	brne	.+6      	; 0x7604 <HardwareSerial::read()+0x2e>
    75fe:	2f ef       	ldi	r18, 0xFF	; 255
    7600:	3f ef       	ldi	r19, 0xFF	; 255
    7602:	10 c0       	rjmp	.+32     	; 0x7624 <HardwareSerial::read()+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    7604:	8d 91       	ld	r24, X+
    7606:	9c 91       	ld	r25, X
    7608:	11 97       	sbiw	r26, 0x01	; 1
    760a:	e8 0f       	add	r30, r24
    760c:	f9 1f       	adc	r31, r25
    760e:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    7610:	8d 91       	ld	r24, X+
    7612:	9c 91       	ld	r25, X
    7614:	11 97       	sbiw	r26, 0x01	; 1
    7616:	01 96       	adiw	r24, 0x01	; 1
    7618:	8f 73       	andi	r24, 0x3F	; 63
    761a:	90 70       	andi	r25, 0x00	; 0
    761c:	11 96       	adiw	r26, 0x01	; 1
    761e:	9c 93       	st	X, r25
    7620:	8e 93       	st	-X, r24
    return c;
    7622:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    7624:	c9 01       	movw	r24, r18
    7626:	08 95       	ret

00007628 <HardwareSerial::flush()>:

void HardwareSerial::flush()
    7628:	dc 01       	movw	r26, r24
{
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
    762a:	91 96       	adiw	r26, 0x21	; 33
    762c:	8c 91       	ld	r24, X
    762e:	91 97       	sbiw	r26, 0x21	; 33
    7630:	88 23       	and	r24, r24
    7632:	39 f0       	breq	.+14     	; 0x7642 <HardwareSerial::flush()+0x1a>
    7634:	54 96       	adiw	r26, 0x14	; 20
    7636:	ed 91       	ld	r30, X+
    7638:	fc 91       	ld	r31, X
    763a:	55 97       	sbiw	r26, 0x15	; 21
    763c:	80 81       	ld	r24, Z
    763e:	86 ff       	sbrs	r24, 6
    7640:	f9 cf       	rjmp	.-14     	; 0x7634 <HardwareSerial::flush()+0xc>
  transmitting = false;
    7642:	91 96       	adiw	r26, 0x21	; 33
    7644:	1c 92       	st	X, r1
}
    7646:	08 95       	ret

00007648 <HardwareSerial::write(unsigned char)>:

size_t HardwareSerial::write(uint8_t c)
    7648:	cf 93       	push	r28
    764a:	df 93       	push	r29
    764c:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    764e:	ee 85       	ldd	r30, Y+14	; 0x0e
    7650:	ff 85       	ldd	r31, Y+15	; 0x0f
    7652:	e0 5c       	subi	r30, 0xC0	; 192
    7654:	ff 4f       	sbci	r31, 0xFF	; 255
    7656:	20 81       	ld	r18, Z
    7658:	31 81       	ldd	r19, Z+1	; 0x01
    765a:	e0 54       	subi	r30, 0x40	; 64
    765c:	f0 40       	sbci	r31, 0x00	; 0
    765e:	2f 5f       	subi	r18, 0xFF	; 255
    7660:	3f 4f       	sbci	r19, 0xFF	; 255
    7662:	2f 73       	andi	r18, 0x3F	; 63
    7664:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    7666:	df 01       	movw	r26, r30
    7668:	ae 5b       	subi	r26, 0xBE	; 190
    766a:	bf 4f       	sbci	r27, 0xFF	; 255
    766c:	8d 91       	ld	r24, X+
    766e:	9c 91       	ld	r25, X
    7670:	11 97       	sbiw	r26, 0x01	; 1
    7672:	28 17       	cp	r18, r24
    7674:	39 07       	cpc	r19, r25
    7676:	d1 f3       	breq	.-12     	; 0x766c <HardwareSerial::write(unsigned char)+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    7678:	e0 5c       	subi	r30, 0xC0	; 192
    767a:	ff 4f       	sbci	r31, 0xFF	; 255
    767c:	80 81       	ld	r24, Z
    767e:	91 81       	ldd	r25, Z+1	; 0x01
    7680:	e0 54       	subi	r30, 0x40	; 64
    7682:	f0 40       	sbci	r31, 0x00	; 0
    7684:	e8 0f       	add	r30, r24
    7686:	f9 1f       	adc	r31, r25
    7688:	60 83       	st	Z, r22
  _tx_buffer->head = i;
    768a:	ee 85       	ldd	r30, Y+14	; 0x0e
    768c:	ff 85       	ldd	r31, Y+15	; 0x0f
    768e:	e0 5c       	subi	r30, 0xC0	; 192
    7690:	ff 4f       	sbci	r31, 0xFF	; 255
    7692:	31 83       	std	Z+1, r19	; 0x01
    7694:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    7696:	ee 89       	ldd	r30, Y+22	; 0x16
    7698:	ff 89       	ldd	r31, Y+23	; 0x17
    769a:	20 81       	ld	r18, Z
    769c:	81 e0       	ldi	r24, 0x01	; 1
    769e:	90 e0       	ldi	r25, 0x00	; 0
    76a0:	0f 8c       	ldd	r0, Y+31	; 0x1f
    76a2:	02 c0       	rjmp	.+4      	; 0x76a8 <HardwareSerial::write(unsigned char)+0x60>
    76a4:	88 0f       	add	r24, r24
    76a6:	99 1f       	adc	r25, r25
    76a8:	0a 94       	dec	r0
    76aa:	e2 f7       	brpl	.-8      	; 0x76a4 <HardwareSerial::write(unsigned char)+0x5c>
    76ac:	28 2b       	or	r18, r24
    76ae:	20 83       	st	Z, r18
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
    76b0:	81 e0       	ldi	r24, 0x01	; 1
    76b2:	89 a3       	std	Y+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
    76b4:	ec 89       	ldd	r30, Y+20	; 0x14
    76b6:	fd 89       	ldd	r31, Y+21	; 0x15
    76b8:	80 81       	ld	r24, Z
    76ba:	80 64       	ori	r24, 0x40	; 64
    76bc:	80 83       	st	Z, r24
  
  return 1;
}
    76be:	81 e0       	ldi	r24, 0x01	; 1
    76c0:	90 e0       	ldi	r25, 0x00	; 0
    76c2:	df 91       	pop	r29
    76c4:	cf 91       	pop	r28
    76c6:	08 95       	ret

000076c8 <global constructors keyed to rx_buffer>:
    76c8:	10 92 d4 04 	sts	0x04D4, r1
    76cc:	10 92 d3 04 	sts	0x04D3, r1
    76d0:	88 ee       	ldi	r24, 0xE8	; 232
    76d2:	93 e0       	ldi	r25, 0x03	; 3
    76d4:	a0 e0       	ldi	r26, 0x00	; 0
    76d6:	b0 e0       	ldi	r27, 0x00	; 0
    76d8:	80 93 d5 04 	sts	0x04D5, r24
    76dc:	90 93 d6 04 	sts	0x04D6, r25
    76e0:	a0 93 d7 04 	sts	0x04D7, r26
    76e4:	b0 93 d8 04 	sts	0x04D8, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    76e8:	8e e0       	ldi	r24, 0x0E	; 14
    76ea:	92 e0       	ldi	r25, 0x02	; 2
    76ec:	90 93 d2 04 	sts	0x04D2, r25
    76f0:	80 93 d1 04 	sts	0x04D1, r24
{
  _rx_buffer = rx_buffer;
    76f4:	89 e4       	ldi	r24, 0x49	; 73
    76f6:	94 e0       	ldi	r25, 0x04	; 4
    76f8:	90 93 de 04 	sts	0x04DE, r25
    76fc:	80 93 dd 04 	sts	0x04DD, r24
  _tx_buffer = tx_buffer;
    7700:	8d e8       	ldi	r24, 0x8D	; 141
    7702:	94 e0       	ldi	r25, 0x04	; 4
    7704:	90 93 e0 04 	sts	0x04E0, r25
    7708:	80 93 df 04 	sts	0x04DF, r24
  _ubrrh = ubrrh;
    770c:	85 ec       	ldi	r24, 0xC5	; 197
    770e:	90 e0       	ldi	r25, 0x00	; 0
    7710:	90 93 e2 04 	sts	0x04E2, r25
    7714:	80 93 e1 04 	sts	0x04E1, r24
  _ubrrl = ubrrl;
    7718:	84 ec       	ldi	r24, 0xC4	; 196
    771a:	90 e0       	ldi	r25, 0x00	; 0
    771c:	90 93 e4 04 	sts	0x04E4, r25
    7720:	80 93 e3 04 	sts	0x04E3, r24
  _ucsra = ucsra;
    7724:	80 ec       	ldi	r24, 0xC0	; 192
    7726:	90 e0       	ldi	r25, 0x00	; 0
    7728:	90 93 e6 04 	sts	0x04E6, r25
    772c:	80 93 e5 04 	sts	0x04E5, r24
  _ucsrb = ucsrb;
    7730:	81 ec       	ldi	r24, 0xC1	; 193
    7732:	90 e0       	ldi	r25, 0x00	; 0
    7734:	90 93 e8 04 	sts	0x04E8, r25
    7738:	80 93 e7 04 	sts	0x04E7, r24
  _ucsrc = ucsrc;
    773c:	82 ec       	ldi	r24, 0xC2	; 194
    773e:	90 e0       	ldi	r25, 0x00	; 0
    7740:	90 93 ea 04 	sts	0x04EA, r25
    7744:	80 93 e9 04 	sts	0x04E9, r24
  _udr = udr;
    7748:	86 ec       	ldi	r24, 0xC6	; 198
    774a:	90 e0       	ldi	r25, 0x00	; 0
    774c:	90 93 ec 04 	sts	0x04EC, r25
    7750:	80 93 eb 04 	sts	0x04EB, r24
  _rxen = rxen;
    7754:	84 e0       	ldi	r24, 0x04	; 4
    7756:	80 93 ed 04 	sts	0x04ED, r24
  _txen = txen;
    775a:	83 e0       	ldi	r24, 0x03	; 3
    775c:	80 93 ee 04 	sts	0x04EE, r24
  _rxcie = rxcie;
    7760:	87 e0       	ldi	r24, 0x07	; 7
    7762:	80 93 ef 04 	sts	0x04EF, r24
  _udrie = udrie;
    7766:	85 e0       	ldi	r24, 0x05	; 5
    7768:	80 93 f0 04 	sts	0x04F0, r24
  _u2x = u2x;
    776c:	81 e0       	ldi	r24, 0x01	; 1
    776e:	80 93 f1 04 	sts	0x04F1, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    7772:	08 95       	ret

00007774 <main>:
#include <Arduino.h>

int main(void)
    7774:	cf 93       	push	r28
    7776:	df 93       	push	r29
{
	init();
    7778:	0e 94 bc 3d 	call	0x7b78	; 0x7b78 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    777c:	0e 94 35 2f 	call	0x5e6a	; 0x5e6a <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    7780:	c8 e8       	ldi	r28, 0x88	; 136
    7782:	d9 e3       	ldi	r29, 0x39	; 57
#endif
	
	setup();
    
	for (;;) {
		loop();
    7784:	0e 94 50 2e 	call	0x5ca0	; 0x5ca0 <loop>
		if (serialEventRun) serialEventRun();
    7788:	20 97       	sbiw	r28, 0x00	; 0
    778a:	e1 f3       	breq	.-8      	; 0x7784 <main+0x10>
    778c:	0e 94 88 39 	call	0x7310	; 0x7310 <serialEventRun()>
    7790:	f9 cf       	rjmp	.-14     	; 0x7784 <main+0x10>

00007792 <__cxa_guard_acquire>:
void operator delete[](void * ptr)
{
  free(ptr);
}

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
    7792:	fc 01       	movw	r30, r24
    7794:	20 e0       	ldi	r18, 0x00	; 0
    7796:	30 e0       	ldi	r19, 0x00	; 0
    7798:	80 81       	ld	r24, Z
    779a:	88 23       	and	r24, r24
    779c:	11 f4       	brne	.+4      	; 0x77a2 <__cxa_guard_acquire+0x10>
    779e:	21 e0       	ldi	r18, 0x01	; 1
    77a0:	30 e0       	ldi	r19, 0x00	; 0
    77a2:	c9 01       	movw	r24, r18
    77a4:	08 95       	ret

000077a6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
    77a6:	fc 01       	movw	r30, r24
    77a8:	81 e0       	ldi	r24, 0x01	; 1
    77aa:	80 83       	st	Z, r24
    77ac:	08 95       	ret

000077ae <Print::write(unsigned char const*, unsigned int)>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    77ae:	cf 92       	push	r12
    77b0:	df 92       	push	r13
    77b2:	ef 92       	push	r14
    77b4:	ff 92       	push	r15
    77b6:	0f 93       	push	r16
    77b8:	1f 93       	push	r17
    77ba:	cf 93       	push	r28
    77bc:	df 93       	push	r29
    77be:	7c 01       	movw	r14, r24
    77c0:	6b 01       	movw	r12, r22
    77c2:	8a 01       	movw	r16, r20
    77c4:	c0 e0       	ldi	r28, 0x00	; 0
    77c6:	d0 e0       	ldi	r29, 0x00	; 0
    77c8:	0f c0       	rjmp	.+30     	; 0x77e8 <Print::write(unsigned char const*, unsigned int)+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    77ca:	d6 01       	movw	r26, r12
    77cc:	6d 91       	ld	r22, X+
    77ce:	6d 01       	movw	r12, r26
    77d0:	d7 01       	movw	r26, r14
    77d2:	ed 91       	ld	r30, X+
    77d4:	fc 91       	ld	r31, X
    77d6:	01 90       	ld	r0, Z+
    77d8:	f0 81       	ld	r31, Z
    77da:	e0 2d       	mov	r30, r0
    77dc:	c7 01       	movw	r24, r14
    77de:	09 95       	icall
    77e0:	c8 0f       	add	r28, r24
    77e2:	d9 1f       	adc	r29, r25
    77e4:	01 50       	subi	r16, 0x01	; 1
    77e6:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    77e8:	01 15       	cp	r16, r1
    77ea:	11 05       	cpc	r17, r1
    77ec:	71 f7       	brne	.-36     	; 0x77ca <Print::write(unsigned char const*, unsigned int)+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    77ee:	ce 01       	movw	r24, r28
    77f0:	df 91       	pop	r29
    77f2:	cf 91       	pop	r28
    77f4:	1f 91       	pop	r17
    77f6:	0f 91       	pop	r16
    77f8:	ff 90       	pop	r15
    77fa:	ef 90       	pop	r14
    77fc:	df 90       	pop	r13
    77fe:	cf 90       	pop	r12
    7800:	08 95       	ret

00007802 <Print::print(__FlashStringHelper const*)>:

size_t Print::print(const __FlashStringHelper *ifsh)
    7802:	ef 92       	push	r14
    7804:	ff 92       	push	r15
    7806:	0f 93       	push	r16
    7808:	1f 93       	push	r17
    780a:	cf 93       	push	r28
    780c:	df 93       	push	r29
    780e:	7c 01       	movw	r14, r24
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
    7810:	8b 01       	movw	r16, r22
    7812:	c0 e0       	ldi	r28, 0x00	; 0
    7814:	d0 e0       	ldi	r29, 0x00	; 0
    7816:	f8 01       	movw	r30, r16
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    7818:	0f 5f       	subi	r16, 0xFF	; 255
    781a:	1f 4f       	sbci	r17, 0xFF	; 255
    781c:	64 91       	lpm	r22, Z+
    if (c == 0) break;
    781e:	66 23       	and	r22, r22
    7820:	59 f0       	breq	.+22     	; 0x7838 <Print::print(__FlashStringHelper const*)+0x36>
    n += write(c);
    7822:	d7 01       	movw	r26, r14
    7824:	ed 91       	ld	r30, X+
    7826:	fc 91       	ld	r31, X
    7828:	01 90       	ld	r0, Z+
    782a:	f0 81       	ld	r31, Z
    782c:	e0 2d       	mov	r30, r0
    782e:	c7 01       	movw	r24, r14
    7830:	09 95       	icall
    7832:	c8 0f       	add	r28, r24
    7834:	d9 1f       	adc	r29, r25
    7836:	ef cf       	rjmp	.-34     	; 0x7816 <Print::print(__FlashStringHelper const*)+0x14>
  }
  return n;
}
    7838:	ce 01       	movw	r24, r28
    783a:	df 91       	pop	r29
    783c:	cf 91       	pop	r28
    783e:	1f 91       	pop	r17
    7840:	0f 91       	pop	r16
    7842:	ff 90       	pop	r15
    7844:	ef 90       	pop	r14
    7846:	08 95       	ret

00007848 <Print::print(char)>:
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
    7848:	dc 01       	movw	r26, r24
{
  return write(c);
    784a:	ed 91       	ld	r30, X+
    784c:	fc 91       	ld	r31, X
    784e:	01 90       	ld	r0, Z+
    7850:	f0 81       	ld	r31, Z
    7852:	e0 2d       	mov	r30, r0
    7854:	09 95       	icall
}
    7856:	08 95       	ret

00007858 <Print::println()>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
    7858:	ef 92       	push	r14
    785a:	ff 92       	push	r15
    785c:	0f 93       	push	r16
    785e:	1f 93       	push	r17
    7860:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    7862:	dc 01       	movw	r26, r24
    7864:	ed 91       	ld	r30, X+
    7866:	fc 91       	ld	r31, X
    7868:	01 90       	ld	r0, Z+
    786a:	f0 81       	ld	r31, Z
    786c:	e0 2d       	mov	r30, r0
    786e:	6d e0       	ldi	r22, 0x0D	; 13
    7870:	09 95       	icall
    7872:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    7874:	d8 01       	movw	r26, r16
    7876:	ed 91       	ld	r30, X+
    7878:	fc 91       	ld	r31, X
    787a:	01 90       	ld	r0, Z+
    787c:	f0 81       	ld	r31, Z
    787e:	e0 2d       	mov	r30, r0
    7880:	c8 01       	movw	r24, r16
    7882:	6a e0       	ldi	r22, 0x0A	; 10
    7884:	09 95       	icall
    7886:	9c 01       	movw	r18, r24
    7888:	2e 0d       	add	r18, r14
    788a:	3f 1d       	adc	r19, r15
    788c:	c9 01       	movw	r24, r18
    788e:	1f 91       	pop	r17
    7890:	0f 91       	pop	r16
    7892:	ff 90       	pop	r15
    7894:	ef 90       	pop	r14
    7896:	08 95       	ret

00007898 <Print::println(__FlashStringHelper const*)>:
size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
    7898:	ef 92       	push	r14
    789a:	ff 92       	push	r15
    789c:	0f 93       	push	r16
    789e:	1f 93       	push	r17
    78a0:	7c 01       	movw	r14, r24
{
  size_t n = print(ifsh);
    78a2:	0e 94 01 3c 	call	0x7802	; 0x7802 <Print::print(__FlashStringHelper const*)>
    78a6:	8c 01       	movw	r16, r24
  n += println();
    78a8:	c7 01       	movw	r24, r14
    78aa:	0e 94 2c 3c 	call	0x7858	; 0x7858 <Print::println()>
    78ae:	9c 01       	movw	r18, r24
    78b0:	20 0f       	add	r18, r16
    78b2:	31 1f       	adc	r19, r17
  return n;
}
    78b4:	c9 01       	movw	r24, r18
    78b6:	1f 91       	pop	r17
    78b8:	0f 91       	pop	r16
    78ba:	ff 90       	pop	r15
    78bc:	ef 90       	pop	r14
    78be:	08 95       	ret

000078c0 <Print::write(char const*)>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    78c0:	cf 93       	push	r28
    78c2:	df 93       	push	r29
    78c4:	ec 01       	movw	r28, r24
      if (str == NULL) return 0;
    78c6:	61 15       	cp	r22, r1
    78c8:	71 05       	cpc	r23, r1
    78ca:	19 f4       	brne	.+6      	; 0x78d2 <Print::write(char const*)+0x12>
    78cc:	20 e0       	ldi	r18, 0x00	; 0
    78ce:	30 e0       	ldi	r19, 0x00	; 0
    78d0:	0f c0       	rjmp	.+30     	; 0x78f0 <Print::write(char const*)+0x30>
      return write((const uint8_t *)str, strlen(str));
    78d2:	db 01       	movw	r26, r22
    78d4:	0d 90       	ld	r0, X+
    78d6:	00 20       	and	r0, r0
    78d8:	e9 f7       	brne	.-6      	; 0x78d4 <Print::write(char const*)+0x14>
    78da:	11 97       	sbiw	r26, 0x01	; 1
    78dc:	a6 1b       	sub	r26, r22
    78de:	b7 0b       	sbc	r27, r23
    78e0:	e8 81       	ld	r30, Y
    78e2:	f9 81       	ldd	r31, Y+1	; 0x01
    78e4:	02 80       	ldd	r0, Z+2	; 0x02
    78e6:	f3 81       	ldd	r31, Z+3	; 0x03
    78e8:	e0 2d       	mov	r30, r0
    78ea:	ad 01       	movw	r20, r26
    78ec:	09 95       	icall
    78ee:	9c 01       	movw	r18, r24
    }
    78f0:	c9 01       	movw	r24, r18
    78f2:	df 91       	pop	r29
    78f4:	cf 91       	pop	r28
    78f6:	08 95       	ret

000078f8 <Print::printNumber(unsigned long, unsigned char)>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    78f8:	4f 92       	push	r4
    78fa:	5f 92       	push	r5
    78fc:	7f 92       	push	r7
    78fe:	8f 92       	push	r8
    7900:	9f 92       	push	r9
    7902:	af 92       	push	r10
    7904:	bf 92       	push	r11
    7906:	cf 92       	push	r12
    7908:	df 92       	push	r13
    790a:	ef 92       	push	r14
    790c:	ff 92       	push	r15
    790e:	0f 93       	push	r16
    7910:	1f 93       	push	r17
    7912:	df 93       	push	r29
    7914:	cf 93       	push	r28
    7916:	cd b7       	in	r28, 0x3d	; 61
    7918:	de b7       	in	r29, 0x3e	; 62
    791a:	a1 97       	sbiw	r28, 0x21	; 33
    791c:	0f b6       	in	r0, 0x3f	; 63
    791e:	f8 94       	cli
    7920:	de bf       	out	0x3e, r29	; 62
    7922:	0f be       	out	0x3f, r0	; 63
    7924:	cd bf       	out	0x3d, r28	; 61
    7926:	2c 01       	movw	r4, r24
    7928:	74 2e       	mov	r7, r20
    792a:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    792c:	22 30       	cpi	r18, 0x02	; 2
    792e:	08 f4       	brcc	.+2      	; 0x7932 <Print::printNumber(unsigned long, unsigned char)+0x3a>
    7930:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    7932:	19 a2       	std	Y+33, r1	; 0x21
    7934:	31 e2       	ldi	r19, 0x21	; 33
    7936:	c3 2e       	mov	r12, r19
    7938:	d1 2c       	mov	r13, r1
    793a:	cc 0e       	add	r12, r28
    793c:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    793e:	82 2e       	mov	r8, r18
    7940:	99 24       	eor	r9, r9
    7942:	aa 24       	eor	r10, r10
    7944:	bb 24       	eor	r11, r11
    7946:	67 2d       	mov	r22, r7
    7948:	75 2f       	mov	r23, r21
    794a:	a5 01       	movw	r20, r10
    794c:	94 01       	movw	r18, r8
    794e:	0e 94 3a 3e 	call	0x7c74	; 0x7c74 <__udivmodsi4>
    7952:	79 01       	movw	r14, r18
    7954:	8a 01       	movw	r16, r20
    char c = m - base * n;
    7956:	c8 01       	movw	r24, r16
    7958:	b7 01       	movw	r22, r14
    795a:	a5 01       	movw	r20, r10
    795c:	94 01       	movw	r18, r8
    795e:	0e 94 f4 3d 	call	0x7be8	; 0x7be8 <__mulsi3>
    7962:	47 2d       	mov	r20, r7
    7964:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    7966:	08 94       	sec
    7968:	c1 08       	sbc	r12, r1
    796a:	d1 08       	sbc	r13, r1
    796c:	4a 30       	cpi	r20, 0x0A	; 10
    796e:	14 f4       	brge	.+4      	; 0x7974 <Print::printNumber(unsigned long, unsigned char)+0x7c>
    7970:	40 5d       	subi	r20, 0xD0	; 208
    7972:	01 c0       	rjmp	.+2      	; 0x7976 <Print::printNumber(unsigned long, unsigned char)+0x7e>
    7974:	49 5c       	subi	r20, 0xC9	; 201
    7976:	f6 01       	movw	r30, r12
    7978:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    797a:	e1 14       	cp	r14, r1
    797c:	f1 04       	cpc	r15, r1
    797e:	01 05       	cpc	r16, r1
    7980:	11 05       	cpc	r17, r1
    7982:	21 f0       	breq	.+8      	; 0x798c <Print::printNumber(unsigned long, unsigned char)+0x94>
    7984:	7e 2c       	mov	r7, r14
    7986:	5f 2d       	mov	r21, r15
    7988:	c8 01       	movw	r24, r16
    798a:	dd cf       	rjmp	.-70     	; 0x7946 <Print::printNumber(unsigned long, unsigned char)+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    798c:	c2 01       	movw	r24, r4
    798e:	b6 01       	movw	r22, r12
    7990:	0e 94 60 3c 	call	0x78c0	; 0x78c0 <Print::write(char const*)>
}
    7994:	a1 96       	adiw	r28, 0x21	; 33
    7996:	0f b6       	in	r0, 0x3f	; 63
    7998:	f8 94       	cli
    799a:	de bf       	out	0x3e, r29	; 62
    799c:	0f be       	out	0x3f, r0	; 63
    799e:	cd bf       	out	0x3d, r28	; 61
    79a0:	cf 91       	pop	r28
    79a2:	df 91       	pop	r29
    79a4:	1f 91       	pop	r17
    79a6:	0f 91       	pop	r16
    79a8:	ff 90       	pop	r15
    79aa:	ef 90       	pop	r14
    79ac:	df 90       	pop	r13
    79ae:	cf 90       	pop	r12
    79b0:	bf 90       	pop	r11
    79b2:	af 90       	pop	r10
    79b4:	9f 90       	pop	r9
    79b6:	8f 90       	pop	r8
    79b8:	7f 90       	pop	r7
    79ba:	5f 90       	pop	r5
    79bc:	4f 90       	pop	r4
    79be:	08 95       	ret

000079c0 <Print::print(unsigned long, int)>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
    79c0:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
    79c2:	21 15       	cp	r18, r1
    79c4:	31 05       	cpc	r19, r1
    79c6:	41 f4       	brne	.+16     	; 0x79d8 <Print::print(unsigned long, int)+0x18>
    79c8:	ed 91       	ld	r30, X+
    79ca:	fc 91       	ld	r31, X
    79cc:	01 90       	ld	r0, Z+
    79ce:	f0 81       	ld	r31, Z
    79d0:	e0 2d       	mov	r30, r0
    79d2:	64 2f       	mov	r22, r20
    79d4:	09 95       	icall
    79d6:	08 95       	ret
  else return printNumber(n, base);
    79d8:	0e 94 7c 3c 	call	0x78f8	; 0x78f8 <Print::printNumber(unsigned long, unsigned char)>
}
    79dc:	08 95       	ret

000079de <Print::print(unsigned int, int)>:
size_t Print::print(int n, int base)
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
    79de:	ef 92       	push	r14
    79e0:	ff 92       	push	r15
    79e2:	0f 93       	push	r16
    79e4:	1f 93       	push	r17
    79e6:	9a 01       	movw	r18, r20
{
  return print((unsigned long) n, base);
    79e8:	7b 01       	movw	r14, r22
    79ea:	00 e0       	ldi	r16, 0x00	; 0
    79ec:	10 e0       	ldi	r17, 0x00	; 0
    79ee:	b8 01       	movw	r22, r16
    79f0:	a7 01       	movw	r20, r14
    79f2:	0e 94 e0 3c 	call	0x79c0	; 0x79c0 <Print::print(unsigned long, int)>
}
    79f6:	1f 91       	pop	r17
    79f8:	0f 91       	pop	r16
    79fa:	ff 90       	pop	r15
    79fc:	ef 90       	pop	r14
    79fe:	08 95       	ret

00007a00 <Print::print(unsigned char, int)>:
size_t Print::print(char c)
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
    7a00:	ef 92       	push	r14
    7a02:	ff 92       	push	r15
    7a04:	0f 93       	push	r16
    7a06:	1f 93       	push	r17
    7a08:	9a 01       	movw	r18, r20
{
  return print((unsigned long) b, base);
    7a0a:	e6 2e       	mov	r14, r22
    7a0c:	ff 24       	eor	r15, r15
    7a0e:	00 e0       	ldi	r16, 0x00	; 0
    7a10:	10 e0       	ldi	r17, 0x00	; 0
    7a12:	b8 01       	movw	r22, r16
    7a14:	a7 01       	movw	r20, r14
    7a16:	0e 94 e0 3c 	call	0x79c0	; 0x79c0 <Print::print(unsigned long, int)>
}
    7a1a:	1f 91       	pop	r17
    7a1c:	0f 91       	pop	r16
    7a1e:	ff 90       	pop	r15
    7a20:	ef 90       	pop	r14
    7a22:	08 95       	ret

00007a24 <Print::print(long, int)>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
    7a24:	cf 92       	push	r12
    7a26:	df 92       	push	r13
    7a28:	ef 92       	push	r14
    7a2a:	ff 92       	push	r15
    7a2c:	0f 93       	push	r16
    7a2e:	1f 93       	push	r17
    7a30:	cf 93       	push	r28
    7a32:	df 93       	push	r29
    7a34:	ec 01       	movw	r28, r24
    7a36:	6a 01       	movw	r12, r20
    7a38:	7b 01       	movw	r14, r22
{
  if (base == 0) {
    7a3a:	21 15       	cp	r18, r1
    7a3c:	31 05       	cpc	r19, r1
    7a3e:	41 f4       	brne	.+16     	; 0x7a50 <Print::print(long, int)+0x2c>
    return write(n);
    7a40:	e8 81       	ld	r30, Y
    7a42:	f9 81       	ldd	r31, Y+1	; 0x01
    7a44:	01 90       	ld	r0, Z+
    7a46:	f0 81       	ld	r31, Z
    7a48:	e0 2d       	mov	r30, r0
    7a4a:	64 2f       	mov	r22, r20
    7a4c:	09 95       	icall
    7a4e:	1f c0       	rjmp	.+62     	; 0x7a8e <Print::print(long, int)+0x6a>
  } else if (base == 10) {
    7a50:	2a 30       	cpi	r18, 0x0A	; 10
    7a52:	31 05       	cpc	r19, r1
    7a54:	d1 f4       	brne	.+52     	; 0x7a8a <Print::print(long, int)+0x66>
    if (n < 0) {
    7a56:	77 ff       	sbrs	r23, 7
    7a58:	17 c0       	rjmp	.+46     	; 0x7a88 <Print::print(long, int)+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    7a5a:	e8 81       	ld	r30, Y
    7a5c:	f9 81       	ldd	r31, Y+1	; 0x01
    7a5e:	01 90       	ld	r0, Z+
    7a60:	f0 81       	ld	r31, Z
    7a62:	e0 2d       	mov	r30, r0
    7a64:	6d e2       	ldi	r22, 0x2D	; 45
    7a66:	09 95       	icall
    7a68:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    7a6a:	44 27       	eor	r20, r20
    7a6c:	55 27       	eor	r21, r21
    7a6e:	ba 01       	movw	r22, r20
    7a70:	4c 19       	sub	r20, r12
    7a72:	5d 09       	sbc	r21, r13
    7a74:	6e 09       	sbc	r22, r14
    7a76:	7f 09       	sbc	r23, r15
    7a78:	ce 01       	movw	r24, r28
    7a7a:	2a e0       	ldi	r18, 0x0A	; 10
    7a7c:	0e 94 7c 3c 	call	0x78f8	; 0x78f8 <Print::printNumber(unsigned long, unsigned char)>
    7a80:	98 01       	movw	r18, r16
    7a82:	28 0f       	add	r18, r24
    7a84:	39 1f       	adc	r19, r25
    7a86:	04 c0       	rjmp	.+8      	; 0x7a90 <Print::print(long, int)+0x6c>
    }
    return printNumber(n, 10);
    7a88:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    7a8a:	0e 94 7c 3c 	call	0x78f8	; 0x78f8 <Print::printNumber(unsigned long, unsigned char)>
    7a8e:	9c 01       	movw	r18, r24
  }
}
    7a90:	c9 01       	movw	r24, r18
    7a92:	df 91       	pop	r29
    7a94:	cf 91       	pop	r28
    7a96:	1f 91       	pop	r17
    7a98:	0f 91       	pop	r16
    7a9a:	ff 90       	pop	r15
    7a9c:	ef 90       	pop	r14
    7a9e:	df 90       	pop	r13
    7aa0:	cf 90       	pop	r12
    7aa2:	08 95       	ret

00007aa4 <Print::print(int, int)>:
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
    7aa4:	ef 92       	push	r14
    7aa6:	ff 92       	push	r15
    7aa8:	0f 93       	push	r16
    7aaa:	1f 93       	push	r17
    7aac:	7b 01       	movw	r14, r22
    7aae:	9a 01       	movw	r18, r20
{
  return print((long) n, base);
    7ab0:	00 27       	eor	r16, r16
    7ab2:	f7 fc       	sbrc	r15, 7
    7ab4:	00 95       	com	r16
    7ab6:	10 2f       	mov	r17, r16
    7ab8:	b8 01       	movw	r22, r16
    7aba:	a7 01       	movw	r20, r14
    7abc:	0e 94 12 3d 	call	0x7a24	; 0x7a24 <Print::print(long, int)>
}
    7ac0:	1f 91       	pop	r17
    7ac2:	0f 91       	pop	r16
    7ac4:	ff 90       	pop	r15
    7ac6:	ef 90       	pop	r14
    7ac8:	08 95       	ret

00007aca <Print::print(char const*)>:
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    7aca:	0e 94 60 3c 	call	0x78c0	; 0x78c0 <Print::write(char const*)>
}
    7ace:	08 95       	ret

00007ad0 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    7ad0:	1f 92       	push	r1
    7ad2:	0f 92       	push	r0
    7ad4:	0f b6       	in	r0, 0x3f	; 63
    7ad6:	0f 92       	push	r0
    7ad8:	11 24       	eor	r1, r1
    7ada:	2f 93       	push	r18
    7adc:	3f 93       	push	r19
    7ade:	4f 93       	push	r20
    7ae0:	5f 93       	push	r21
    7ae2:	6f 93       	push	r22
    7ae4:	7f 93       	push	r23
    7ae6:	8f 93       	push	r24
    7ae8:	9f 93       	push	r25
    7aea:	af 93       	push	r26
    7aec:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    7aee:	20 91 f7 04 	lds	r18, 0x04F7
    7af2:	30 91 f8 04 	lds	r19, 0x04F8
    7af6:	40 91 f9 04 	lds	r20, 0x04F9
    7afa:	50 91 fa 04 	lds	r21, 0x04FA
	unsigned char f = timer0_fract;
    7afe:	70 91 fb 04 	lds	r23, 0x04FB

	m += MILLIS_INC;
    7b02:	da 01       	movw	r26, r20
    7b04:	c9 01       	movw	r24, r18
    7b06:	40 96       	adiw	r24, 0x10	; 16
    7b08:	a1 1d       	adc	r26, r1
    7b0a:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    7b0c:	67 2f       	mov	r22, r23
    7b0e:	60 5d       	subi	r22, 0xD0	; 208
	if (f >= FRACT_MAX) {
    7b10:	6d 37       	cpi	r22, 0x7D	; 125
    7b12:	30 f0       	brcs	.+12     	; 0x7b20 <__vector_16+0x50>
		f -= FRACT_MAX;
    7b14:	6d 57       	subi	r22, 0x7D	; 125
		m += 1;
    7b16:	da 01       	movw	r26, r20
    7b18:	c9 01       	movw	r24, r18
    7b1a:	41 96       	adiw	r24, 0x11	; 17
    7b1c:	a1 1d       	adc	r26, r1
    7b1e:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    7b20:	60 93 fb 04 	sts	0x04FB, r22
	timer0_millis = m;
    7b24:	80 93 f7 04 	sts	0x04F7, r24
    7b28:	90 93 f8 04 	sts	0x04F8, r25
    7b2c:	a0 93 f9 04 	sts	0x04F9, r26
    7b30:	b0 93 fa 04 	sts	0x04FA, r27
	timer0_overflow_count++;
    7b34:	80 91 f3 04 	lds	r24, 0x04F3
    7b38:	90 91 f4 04 	lds	r25, 0x04F4
    7b3c:	a0 91 f5 04 	lds	r26, 0x04F5
    7b40:	b0 91 f6 04 	lds	r27, 0x04F6
    7b44:	01 96       	adiw	r24, 0x01	; 1
    7b46:	a1 1d       	adc	r26, r1
    7b48:	b1 1d       	adc	r27, r1
    7b4a:	80 93 f3 04 	sts	0x04F3, r24
    7b4e:	90 93 f4 04 	sts	0x04F4, r25
    7b52:	a0 93 f5 04 	sts	0x04F5, r26
    7b56:	b0 93 f6 04 	sts	0x04F6, r27
}
    7b5a:	bf 91       	pop	r27
    7b5c:	af 91       	pop	r26
    7b5e:	9f 91       	pop	r25
    7b60:	8f 91       	pop	r24
    7b62:	7f 91       	pop	r23
    7b64:	6f 91       	pop	r22
    7b66:	5f 91       	pop	r21
    7b68:	4f 91       	pop	r20
    7b6a:	3f 91       	pop	r19
    7b6c:	2f 91       	pop	r18
    7b6e:	0f 90       	pop	r0
    7b70:	0f be       	out	0x3f, r0	; 63
    7b72:	0f 90       	pop	r0
    7b74:	1f 90       	pop	r1
    7b76:	18 95       	reti

00007b78 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    7b78:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    7b7a:	84 b5       	in	r24, 0x24	; 36
    7b7c:	82 60       	ori	r24, 0x02	; 2
    7b7e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    7b80:	84 b5       	in	r24, 0x24	; 36
    7b82:	81 60       	ori	r24, 0x01	; 1
    7b84:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    7b86:	85 b5       	in	r24, 0x25	; 37
    7b88:	82 60       	ori	r24, 0x02	; 2
    7b8a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    7b8c:	85 b5       	in	r24, 0x25	; 37
    7b8e:	81 60       	ori	r24, 0x01	; 1
    7b90:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    7b92:	ee e6       	ldi	r30, 0x6E	; 110
    7b94:	f0 e0       	ldi	r31, 0x00	; 0
    7b96:	80 81       	ld	r24, Z
    7b98:	81 60       	ori	r24, 0x01	; 1
    7b9a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    7b9c:	e1 e8       	ldi	r30, 0x81	; 129
    7b9e:	f0 e0       	ldi	r31, 0x00	; 0
    7ba0:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    7ba2:	80 81       	ld	r24, Z
    7ba4:	82 60       	ori	r24, 0x02	; 2
    7ba6:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    7ba8:	e0 e8       	ldi	r30, 0x80	; 128
    7baa:	f0 e0       	ldi	r31, 0x00	; 0
    7bac:	80 81       	ld	r24, Z
    7bae:	81 60       	ori	r24, 0x01	; 1
    7bb0:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    7bb2:	e1 eb       	ldi	r30, 0xB1	; 177
    7bb4:	f0 e0       	ldi	r31, 0x00	; 0
    7bb6:	80 81       	ld	r24, Z
    7bb8:	84 60       	ori	r24, 0x04	; 4
    7bba:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    7bbc:	e0 eb       	ldi	r30, 0xB0	; 176
    7bbe:	f0 e0       	ldi	r31, 0x00	; 0
    7bc0:	80 81       	ld	r24, Z
    7bc2:	81 60       	ori	r24, 0x01	; 1
    7bc4:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    7bc6:	ea e7       	ldi	r30, 0x7A	; 122
    7bc8:	f0 e0       	ldi	r31, 0x00	; 0
    7bca:	80 81       	ld	r24, Z
    7bcc:	84 60       	ori	r24, 0x04	; 4
    7bce:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    7bd0:	80 81       	ld	r24, Z
    7bd2:	82 60       	ori	r24, 0x02	; 2
    7bd4:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    7bd6:	80 81       	ld	r24, Z
    7bd8:	81 60       	ori	r24, 0x01	; 1
    7bda:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    7bdc:	80 81       	ld	r24, Z
    7bde:	80 68       	ori	r24, 0x80	; 128
    7be0:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    7be2:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    7be6:	08 95       	ret

00007be8 <__mulsi3>:
    7be8:	62 9f       	mul	r22, r18
    7bea:	d0 01       	movw	r26, r0
    7bec:	73 9f       	mul	r23, r19
    7bee:	f0 01       	movw	r30, r0
    7bf0:	82 9f       	mul	r24, r18
    7bf2:	e0 0d       	add	r30, r0
    7bf4:	f1 1d       	adc	r31, r1
    7bf6:	64 9f       	mul	r22, r20
    7bf8:	e0 0d       	add	r30, r0
    7bfa:	f1 1d       	adc	r31, r1
    7bfc:	92 9f       	mul	r25, r18
    7bfe:	f0 0d       	add	r31, r0
    7c00:	83 9f       	mul	r24, r19
    7c02:	f0 0d       	add	r31, r0
    7c04:	74 9f       	mul	r23, r20
    7c06:	f0 0d       	add	r31, r0
    7c08:	65 9f       	mul	r22, r21
    7c0a:	f0 0d       	add	r31, r0
    7c0c:	99 27       	eor	r25, r25
    7c0e:	72 9f       	mul	r23, r18
    7c10:	b0 0d       	add	r27, r0
    7c12:	e1 1d       	adc	r30, r1
    7c14:	f9 1f       	adc	r31, r25
    7c16:	63 9f       	mul	r22, r19
    7c18:	b0 0d       	add	r27, r0
    7c1a:	e1 1d       	adc	r30, r1
    7c1c:	f9 1f       	adc	r31, r25
    7c1e:	bd 01       	movw	r22, r26
    7c20:	cf 01       	movw	r24, r30
    7c22:	11 24       	eor	r1, r1
    7c24:	08 95       	ret

00007c26 <__udivmodhi4>:
    7c26:	aa 1b       	sub	r26, r26
    7c28:	bb 1b       	sub	r27, r27
    7c2a:	51 e1       	ldi	r21, 0x11	; 17
    7c2c:	07 c0       	rjmp	.+14     	; 0x7c3c <__udivmodhi4_ep>

00007c2e <__udivmodhi4_loop>:
    7c2e:	aa 1f       	adc	r26, r26
    7c30:	bb 1f       	adc	r27, r27
    7c32:	a6 17       	cp	r26, r22
    7c34:	b7 07       	cpc	r27, r23
    7c36:	10 f0       	brcs	.+4      	; 0x7c3c <__udivmodhi4_ep>
    7c38:	a6 1b       	sub	r26, r22
    7c3a:	b7 0b       	sbc	r27, r23

00007c3c <__udivmodhi4_ep>:
    7c3c:	88 1f       	adc	r24, r24
    7c3e:	99 1f       	adc	r25, r25
    7c40:	5a 95       	dec	r21
    7c42:	a9 f7       	brne	.-22     	; 0x7c2e <__udivmodhi4_loop>
    7c44:	80 95       	com	r24
    7c46:	90 95       	com	r25
    7c48:	bc 01       	movw	r22, r24
    7c4a:	cd 01       	movw	r24, r26
    7c4c:	08 95       	ret

00007c4e <__divmodhi4>:
    7c4e:	97 fb       	bst	r25, 7
    7c50:	09 2e       	mov	r0, r25
    7c52:	07 26       	eor	r0, r23
    7c54:	0a d0       	rcall	.+20     	; 0x7c6a <__divmodhi4_neg1>
    7c56:	77 fd       	sbrc	r23, 7
    7c58:	04 d0       	rcall	.+8      	; 0x7c62 <__divmodhi4_neg2>
    7c5a:	e5 df       	rcall	.-54     	; 0x7c26 <__udivmodhi4>
    7c5c:	06 d0       	rcall	.+12     	; 0x7c6a <__divmodhi4_neg1>
    7c5e:	00 20       	and	r0, r0
    7c60:	1a f4       	brpl	.+6      	; 0x7c68 <__divmodhi4_exit>

00007c62 <__divmodhi4_neg2>:
    7c62:	70 95       	com	r23
    7c64:	61 95       	neg	r22
    7c66:	7f 4f       	sbci	r23, 0xFF	; 255

00007c68 <__divmodhi4_exit>:
    7c68:	08 95       	ret

00007c6a <__divmodhi4_neg1>:
    7c6a:	f6 f7       	brtc	.-4      	; 0x7c68 <__divmodhi4_exit>
    7c6c:	90 95       	com	r25
    7c6e:	81 95       	neg	r24
    7c70:	9f 4f       	sbci	r25, 0xFF	; 255
    7c72:	08 95       	ret

00007c74 <__udivmodsi4>:
    7c74:	a1 e2       	ldi	r26, 0x21	; 33
    7c76:	1a 2e       	mov	r1, r26
    7c78:	aa 1b       	sub	r26, r26
    7c7a:	bb 1b       	sub	r27, r27
    7c7c:	fd 01       	movw	r30, r26
    7c7e:	0d c0       	rjmp	.+26     	; 0x7c9a <__udivmodsi4_ep>

00007c80 <__udivmodsi4_loop>:
    7c80:	aa 1f       	adc	r26, r26
    7c82:	bb 1f       	adc	r27, r27
    7c84:	ee 1f       	adc	r30, r30
    7c86:	ff 1f       	adc	r31, r31
    7c88:	a2 17       	cp	r26, r18
    7c8a:	b3 07       	cpc	r27, r19
    7c8c:	e4 07       	cpc	r30, r20
    7c8e:	f5 07       	cpc	r31, r21
    7c90:	20 f0       	brcs	.+8      	; 0x7c9a <__udivmodsi4_ep>
    7c92:	a2 1b       	sub	r26, r18
    7c94:	b3 0b       	sbc	r27, r19
    7c96:	e4 0b       	sbc	r30, r20
    7c98:	f5 0b       	sbc	r31, r21

00007c9a <__udivmodsi4_ep>:
    7c9a:	66 1f       	adc	r22, r22
    7c9c:	77 1f       	adc	r23, r23
    7c9e:	88 1f       	adc	r24, r24
    7ca0:	99 1f       	adc	r25, r25
    7ca2:	1a 94       	dec	r1
    7ca4:	69 f7       	brne	.-38     	; 0x7c80 <__udivmodsi4_loop>
    7ca6:	60 95       	com	r22
    7ca8:	70 95       	com	r23
    7caa:	80 95       	com	r24
    7cac:	90 95       	com	r25
    7cae:	9b 01       	movw	r18, r22
    7cb0:	ac 01       	movw	r20, r24
    7cb2:	bd 01       	movw	r22, r26
    7cb4:	cf 01       	movw	r24, r30
    7cb6:	08 95       	ret

00007cb8 <__divmodsi4>:
    7cb8:	97 fb       	bst	r25, 7
    7cba:	09 2e       	mov	r0, r25
    7cbc:	05 26       	eor	r0, r21
    7cbe:	0e d0       	rcall	.+28     	; 0x7cdc <__divmodsi4_neg1>
    7cc0:	57 fd       	sbrc	r21, 7
    7cc2:	04 d0       	rcall	.+8      	; 0x7ccc <__divmodsi4_neg2>
    7cc4:	d7 df       	rcall	.-82     	; 0x7c74 <__udivmodsi4>
    7cc6:	0a d0       	rcall	.+20     	; 0x7cdc <__divmodsi4_neg1>
    7cc8:	00 1c       	adc	r0, r0
    7cca:	38 f4       	brcc	.+14     	; 0x7cda <__divmodsi4_exit>

00007ccc <__divmodsi4_neg2>:
    7ccc:	50 95       	com	r21
    7cce:	40 95       	com	r20
    7cd0:	30 95       	com	r19
    7cd2:	21 95       	neg	r18
    7cd4:	3f 4f       	sbci	r19, 0xFF	; 255
    7cd6:	4f 4f       	sbci	r20, 0xFF	; 255
    7cd8:	5f 4f       	sbci	r21, 0xFF	; 255

00007cda <__divmodsi4_exit>:
    7cda:	08 95       	ret

00007cdc <__divmodsi4_neg1>:
    7cdc:	f6 f7       	brtc	.-4      	; 0x7cda <__divmodsi4_exit>
    7cde:	90 95       	com	r25
    7ce0:	80 95       	com	r24
    7ce2:	70 95       	com	r23
    7ce4:	61 95       	neg	r22
    7ce6:	7f 4f       	sbci	r23, 0xFF	; 255
    7ce8:	8f 4f       	sbci	r24, 0xFF	; 255
    7cea:	9f 4f       	sbci	r25, 0xFF	; 255
    7cec:	08 95       	ret

00007cee <__tablejump2__>:
    7cee:	ee 0f       	add	r30, r30
    7cf0:	ff 1f       	adc	r31, r31

00007cf2 <__tablejump__>:
    7cf2:	05 90       	lpm	r0, Z+
    7cf4:	f4 91       	lpm	r31, Z+
    7cf6:	e0 2d       	mov	r30, r0
    7cf8:	09 94       	ijmp

00007cfa <_exit>:
    7cfa:	f8 94       	cli

00007cfc <__stop_program>:
    7cfc:	ff cf       	rjmp	.-2      	; 0x7cfc <__stop_program>
