
/var/folders/km/s_tzntf16nzg5bdh5n6g6lz40000gn/T/build2152571509482056700.tmp/V0p2_Main.cpp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  000068ae  00006942  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000068ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022e  00800132  00800132  00006974  2**0
                  ALLOC
  3 .debug_aranges 00000e28  00000000  00000000  00006974  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000214f  00000000  00000000  0000779c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00011b07  00000000  00000000  000098eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003c50  00000000  00000000  0001b3f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000fa49  00000000  00000000  0001f042  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001890  00000000  00000000  0002ea8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000052be  00000000  00000000  0003031c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000084e7  00000000  00000000  000355da  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 000ae526  00000000  00000000  0003dac1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000f90  00000000  00000000  000ebfe7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
// Get 'WARM' target in C; no lower than getFROSTTargetC() returns, strictly positive, in range [MIN_TARGET_C,MAX_TARGET_C].
#if defined(TEMP_POT_AVAILABLE)
// Derived from temperature pot position, 0 for coldest (most eco), 255 for hotest (comfort).
// Temp ranges from eco-1C to comfort+1C levels across full (reduced jitter) [0,255] pot range.
// Should be fastest computing values at extreme ends of range.
uint8_t computeWARMTargetC(const uint8_t pot)
       0:	0c 94 76 03 	jmp	0x6ec	; 0x6ec <__ctors_end>
#endif


// True if FHT8V valve is believed to be open under instruction from this system; false if not in sync.
static bool FHT8V_isValveOpen;
bool getFHT8V_isValveOpen() { return(syncedWithFHT8V && FHT8V_isValveOpen); }
       4:	0c 94 9e 03 	jmp	0x73c	; 0x73c <__bad_interrupt>
        if(0 != (datum & i)) { bit = !bit; }
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
        }
    return(crc & 0x7f);
    }
       8:	0c 94 9e 03 	jmp	0x73c	; 0x73c <__bad_interrupt>


// If ADC was disabled, power it up, do Serial.begin(), and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownSerial() may be advisable.
bool powerUpADCIfDisabled()
       c:	0c 94 9e 03 	jmp	0x73c	; 0x73c <__bad_interrupt>
// Get local time hours from RTC [0,23].
uint_least8_t getHoursLT() { return(getMinutesSinceMidnightLT() / 60); }

// Get whole days since the start of 2000/01/01 (ie the midnight between 1999 and 2000), local time.
// This will roll in about 2179, by which time I will not care.
uint_least16_t getDaysSince1999LT()
      10:	0c 94 9e 03 	jmp	0x73c	; 0x73c <__bad_interrupt>
    { eeprom_smart_erase_byte((uint8_t*)(EE_START_SIMPLE_SCHEDULE0_ON + which)); }
  }

// Returns true if any simple schedule is set, false otherwise.
// This implementation just checks for any valid schedule 'on' time.
bool isAnySimpleScheduleSet()
      14:	0c 94 9e 03 	jmp	0x73c	; 0x73c <__bad_interrupt>

// Reduced-noise temp pot value in range [0,255].
static uint8_t tempPotReducedNoise;

// Return previously-read (with readTempPot()) temperature pot user control level in range [0,1023]; very fast.
int getTempPot() { return(tempPot); }
      18:	0c 94 8c 11 	jmp	0x2318	; 0x2318 <__vector_6>
// TODO: this is not fully 'debounced', ie could flip between WARM/BAKE with button held down.
bool inBakeModeDebounced() { return(isWarmModeDebounced && (0 != bakeCountdownM)); }
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
// Start/restart 'bake' mode and timeout.
void startBake() { isWarmMode = true; bakeCountdownM = BAKE_MAX_M; }
      1c:	0c 94 9e 03 	jmp	0x73c	; 0x73c <__bad_interrupt>
  // set address of targeted slave
  txAddress = address;
  // reset tx buffer iterator vars
  txBufferIndex = 0;
  txBufferLength = 0;
}
      20:	0c 94 9e 03 	jmp	0x73c	; 0x73c <__bad_interrupt>
 */
void twi_setAddress(uint8_t address)
{
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
}
      24:	0c 94 5c 11 	jmp	0x22b8	; 0x22b8 <__vector_9>

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
      28:	0c 94 9e 03 	jmp	0x73c	; 0x73c <__bad_interrupt>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
      2c:	0c 94 9e 03 	jmp	0x73c	; 0x73c <__bad_interrupt>
  size_t n = print(ifsh);
  n += println();
  return n;
}

size_t Print::print(const Printable& x)
      30:	0c 94 9e 03 	jmp	0x73c	; 0x73c <__bad_interrupt>
	timer0_millis = m;
	timer0_overflow_count++;
}

unsigned long millis()
{
      34:	0c 94 9e 03 	jmp	0x73c	; 0x73c <__bad_interrupt>
      38:	0c 94 9e 03 	jmp	0x73c	; 0x73c <__bad_interrupt>
      3c:	0c 94 9e 03 	jmp	0x73c	; 0x73c <__bad_interrupt>
      40:	0c 94 5f 32 	jmp	0x64be	; 0x64be <__vector_16>
      44:	0c 94 9e 03 	jmp	0x73c	; 0x73c <__bad_interrupt>
      48:	0c 94 52 2e 	jmp	0x5ca4	; 0x5ca4 <__vector_18>
      4c:	0c 94 a0 2e 	jmp	0x5d40	; 0x5d40 <__vector_19>
      50:	0c 94 9e 03 	jmp	0x73c	; 0x73c <__bad_interrupt>
      54:	0c 94 45 12 	jmp	0x248a	; 0x248a <__vector_21>
      58:	0c 94 9e 03 	jmp	0x73c	; 0x73c <__bad_interrupt>
      5c:	0c 94 9e 03 	jmp	0x73c	; 0x73c <__bad_interrupt>
      60:	0c 94 0f 2c 	jmp	0x581e	; 0x581e <__vector_24>
      64:	0c 94 9e 03 	jmp	0x73c	; 0x73c <__bad_interrupt>

00000068 <FHT8V_RFM22_Reg_Values>:
      68:	06 00 08 00 30 00 33 06 34 08 35 10 36 aa 37 cc     ....0.3.4.5.6.7.
      78:	38 cc 39 cc 6d 0b 6e 28 6f f5 70 20 71 21 72 20     8.9.m.n(o.p q!r 
      88:	73 00 74 00 75 73 76 64 77 00 79 23 7a 01 1c c1     s.t.usvdw.y#z...
      98:	1d 40 1e 0a 1f 03 20 96 21 00 22 da 23 74 24 00     .@.... .!.".#t$.
      a8:	25 dc 2a 24 2c 28 2d fa 2e 29 69 60 ff ff           %.*$,(-..)i`..

000000b6 <FHT8VPollSyncAndTX_Next(bool)::__c>:
      b6:	46 48 54 38 56 20 54 58 00                          FHT8V TX.

000000bf <FHT8VPollSyncAndTX_Next(bool)::__c>:
      bf:	46 48 54 38 56 50 6f 6c 6c 53 79 6e 63 41 6e 64     FHT8VPollSyncAnd
      cf:	54 58 5f 4e 65 78 74 28 29 20 63 61 6c 6c 65 64     TX_Next() called
      df:	20 74 6f 6f 20 6f 66 74 65 6e 00                     too often.

000000ea <doSync(bool)::__c>:
      ea:	46 48 54 38 56 20 53 59 4e 43 20 46 49 4e 41 4c     FHT8V SYNC FINAL
	...

000000fb <doSync(bool)::__c>:
      fb:	46 48 54 38 56 20 53 59 4e 43 2e 2e 2e 00           FHT8V SYNC....

00000109 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)::__c>:
     109:	46 48 54 38 56 20 66 72 61 6d 65 20 6e 6f 74 20     FHT8V frame not 
     119:	69 6e 69 74 69 61 6c 69 73 65 64 00                 initialised.

00000125 <FHT8VPollSyncAndTX_First(bool)::__c>:
     125:	46 48 54 38 56 20 54 58 00                          FHT8V TX.

0000012e <FHT8VPollSyncAndTX_First(bool)::__c>:
     12e:	46 48 54 38 56 20 68 73 20 63 6f 75 6e 74 20 30     FHT8V hs count 0
     13e:	20 74 6f 6f 20 73 6f 6f 6e 00                        too soon.

00000148 <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, trailingMinimalStatsPayload const*)::__c>:
     148:	54 58 20 67 65 6e 20 74 6f 6f 20 6c 61 72 67 65     TX gen too large
	...

00000159 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)::__c>:
     159:	6d 73 67 20 67 65 6e 20 65 72 72 00                 msg gen err.

00000165 <ensureIDCreated(bool)::__c>:
     165:	20 2e 2e 2e 20 00                                    ... .

0000016b <ensureIDCreated(bool)::__c>:
     16b:	49 6e 76 61 6c 69 64 20 49 44 20 62 79 74 65 20     Invalid ID byte 
	...

0000017c <ensureIDCreated(bool)::__c>:
     17c:	20 2e 2e 2e 20 00                                    ... .

00000182 <ensureIDCreated(bool)::__c>:
     182:	53 65 74 74 69 6e 67 20 49 44 20 62 79 74 65 20     Setting ID byte 
	...

00000193 <RFM22CheckConnected()::__c>:
     193:	52 46 4d 32 32 20 62 61 64 20 74 79 70 65 3a 20     RFM22 bad type: 
	...

000001a4 <RFM22CheckConnected()::__c>:
     1a4:	52 46 4d 32 32 20 62 61 64 20 76 65 72 73 69 6f     RFM22 bad versio
     1b4:	6e 3a 20 00                                         n: .

000001b8 <pollCLI(unsigned char)::__c>:
     1b8:	4f 4b 00                                            OK.

000001bb <pollCLI(unsigned char)::__c>:
     1bb:	4e 6f 74 20 66 69 6e 69 73 68 65 64 2e 00           Not finished..

000001c9 <pollCLI(unsigned char)::__c>:
     1c9:	5a 61 70 70 65 64 2e 00                             Zapped..

000001d1 <pollCLI(unsigned char)::__c>:
     1d1:	53 6d 61 72 74 20 77 61 72 6d 69 6e 67 3a 20 00     Smart warming: .

000001e1 <pollCLI(unsigned char)::__c>:
     1e1:	4f 76 65 72 72 75 6e 73 3a 20 00                    Overruns: .

000001ec <pollCLI(unsigned char)::__c>:
     1ec:	52 65 73 65 74 73 3a 20 00                          Resets: .

000001f5 <pollCLI(unsigned char)::__c>:
     1f5:	3f 20 66 6f 72 20 43 4c 49 20 68 65 6c 70 00        ? for CLI help.

00000204 <dumpCLIUsage(unsigned char)::__c>:
     204:	5a 61 70 20 73 74 61 74 73 00                       Zap stats.

0000020e <dumpCLIUsage(unsigned char)::__c>:
     20e:	58 6d 69 74 20 73 65 63 75 72 69 74 79 20 6c 65     Xmit security le
     21e:	76 65 6c 3b 20 30 20 61 6c 77 61 79 73 2c 20 32     vel; 0 always, 2
     22e:	35 35 20 6e 65 76 65 72 00                          55 never.

00000237 <dumpCLIUsage(unsigned char)::__c>:
     237:	63 6f 64 65 2f 62 6f 61 72 64 20 56 65 72 73 69     code/board Versi
     247:	6f 6e 00                                            on.

0000024a <dumpCLIUsage(unsigned char)::__c>:
     24a:	57 61 72 6d 00                                      Warm.

0000024f <dumpCLIUsage(unsigned char)::__c>:
     24f:	73 65 74 20 32 34 68 20 54 69 6d 65 00              set 24h Time.

0000025c <dumpCLIUsage(unsigned char)::__c>:
     25c:	54 20 48 48 20 4d 4d 00                             T HH MM.

00000264 <dumpCLIUsage(unsigned char)::__c>:
     264:	73 68 6f 77 20 53 74 61 74 75 73 20 61 6e 64 20     show Status and 
     274:	73 6d 61 72 74 20 77 61 72 6d 69 6e 67 20 66 6f     smart warming fo
     284:	72 20 6e 65 78 74 20 32 34 68 00                    r next 24h.

0000028f <dumpCLIUsage(unsigned char)::__c>:
     28f:	64 75 6d 70 20 52 61 77 20 73 74 61 74 73 20 73     dump Raw stats s
     29f:	65 74 20 4e 00                                      et N.

000002a4 <dumpCLIUsage(unsigned char)::__c>:
     2a4:	52 20 4e 00                                         R N.

000002a8 <dumpCLIUsage(unsigned char)::__c>:
     2a8:	51 75 69 63 6b 20 48 65 61 74 00                    Quick Heat.

000002b3 <dumpCLIUsage(unsigned char)::__c>:
     2b3:	72 65 73 65 74 20 4f 70 65 6e 20 25 00              reset Open %.

000002c0 <dumpCLIUsage(unsigned char)::__c>:
     2c0:	6d 69 6e 20 25 20 66 6f 72 20 76 61 6c 76 65 20     min % for valve 
     2d0:	74 6f 20 62 65 20 4f 70 65 6e 00                    to be Open.

000002db <dumpCLIUsage(unsigned char)::__c>:
     2db:	4f 20 50 50 00                                      O PP.

000002e0 <dumpCLIUsage(unsigned char)::__c>:
     2e0:	50 72 6f 67 72 61 6d 3a 20 77 61 72 6d 20 64 61     Program: warm da
     2f0:	69 6c 79 20 73 74 61 72 74 69 6e 67 20 61 74 20     ily starting at 
     300:	48 48 20 4d 4d 20 73 63 68 65 64 75 6c 65 20 53     HH MM schedule S
	...

00000311 <dumpCLIUsage(unsigned char)::__c>:
     311:	50 20 48 48 20 4d 4d 20 53 00                       P HH MM S.

0000031b <dumpCLIUsage(unsigned char)::__c>:
     31b:	4c 65 61 72 6e 20 64 61 69 6c 79 20 77 61 72 6d     Learn daily warm
     32b:	20 6e 6f 77 2c 20 63 6c 65 61 72 20 69 66 20 69      now, clear if i
     33b:	6e 20 66 72 6f 73 74 20 6d 6f 64 65 2c 20 73 63     n frost mode, sc
     34b:	68 65 64 75 6c 65 20 53 00                          hedule S.

00000354 <dumpCLIUsage(unsigned char)::__c>:
     354:	4c 20 53 00                                         L S.

00000358 <dumpCLIUsage(unsigned char)::__c>:
     358:	63 6c 65 61 72 20 48 6f 75 73 65 20 63 6f 64 65     clear House code
     368:	73 00                                               s.

0000036a <dumpCLIUsage(unsigned char)::__c>:
     36a:	73 65 74 20 46 48 54 38 56 20 48 6f 75 73 65 20     set FHT8V House 
     37a:	63 6f 64 65 73 20 31 26 32 00                       codes 1&2.

00000384 <dumpCLIUsage(unsigned char)::__c>:
     384:	48 20 48 31 20 48 32 00                             H H1 H2.

0000038c <dumpCLIUsage(unsigned char)::__c>:
     38c:	46 72 6f 73 74 00                                   Frost.

00000392 <dumpCLIUsage(unsigned char)::__c>:
     392:	45 78 69 74 20 43 4c 49 00                          Exit CLI.

0000039b <dumpCLIUsage(unsigned char)::__c>:
     39b:	44 75 6d 70 20 73 74 61 74 73 20 73 65 74 20 4e     Dump stats set N
	...

000003ac <dumpCLIUsage(unsigned char)::__c>:
     3ac:	44 20 4e 00                                         D N.

000003b0 <dumpCLIUsage(unsigned char)::__c>:
     3b0:	43 65 6e 74 72 61 6c 20 68 75 62 20 3e 3d 4d 20     Central hub >=M 
     3c0:	6d 69 6e 73 20 6f 6e 2c 20 30 20 6f 66 66 00        mins on, 0 off.

000003cf <dumpCLIUsage(unsigned char)::__c>:
     3cf:	43 20 4d 00                                         C M.

000003d3 <dumpCLIUsage(unsigned char)::__c>:
     3d3:	74 68 69 73 20 68 65 6c 70 00                       this help.

000003dd <InvalidIgnored()::__c>:
     3dd:	49 6e 76 61 6c 69 64 2c 20 69 67 6e 6f 72 65 64     Invalid, ignored
     3ed:	2e 00                                               ..

000003ef <serialStatusReport()::__c>:
     3ef:	3b 4d 00                                            ;M.

000003f2 <serialStatusReport()::__c>:
     3f2:	3b 48 43 00                                         ;HC.

000003f6 <serialStatusReport()::__c>:
     3f6:	3b 4f 00                                            ;O.

000003f9 <serialStatusReport()::__c>:
     3f9:	3b 4c 00                                            ;L.

000003fc <serialStatusReport()::__c>:
     3fc:	3b 58 00                                            ;X.

000003ff <serialStatusReport()::__c>:
     3ff:	3b 50 6c 6f 77 00                                   ;Plow.

00000405 <serialStatusReport()::__c>:
     405:	3b 49 00                                            ;I.

00000408 <loop::__c>:
     408:	21 45 52 52 4f 52 3a 20 6c 6f 6f 70 20 6f 76 65     !ERROR: loop ove
     418:	72 72 75 6e 20 00                                   rrun .

0000041e <loop::__c>:
     41e:	42 6f 69 6c 65 72 20 6f 6e 2c 20 73 20 6c 65 66     Boiler on, s lef
     42e:	74 3a 20 00                                         t: .

00000432 <loop::__c>:
     432:	42 61 72 65 20 73 74 61 74 73 20 54 58 00           Bare stats TX.

00000440 <loop::__c>:
     440:	4d 73 67 20 67 65 6e 20 65 72 72 21 00              Msg gen err!.

0000044d <loop::__c>:
     44d:	3f 6e 65 61 72 20 6f 76 65 72 72 75 6e 00           ?near overrun.

0000045b <loop::__c>:
     45b:	52 43 66 48 30 00                                   RCfH0.

00000461 <loop::__c>:
     461:	52 43 66 48 31 00                                   RCfH1.

00000467 <loop::__c>:
     467:	21 52 58 65 72 72 20 46 00                          !RXerr F.

00000470 <loop::__c>:
     470:	43 66 48 20 00                                      CfH .

00000475 <loop::__c>:
     475:	3b 4f 00                                            ;O.

00000478 <loop::__c>:
     478:	3b 4c 00                                            ;L.

0000047b <loop::__c>:
     47b:	3b 50 00                                            ;P.

0000047e <loop::__c>:
     47e:	3b 54 00                                            ;T.

00000481 <setup::__c>:
     481:	49 6e 76 61 6c 69 64 20 49 44 20 61 6e 64 20 63     Invalid ID and c
     491:	61 6e 6e 6f 74 20 72 65 73 65 74 2c 20 73 6f 72     annot reset, sor
     4a1:	72 79 2e 00                                         ry..

000004a5 <setup::__c>:
     4a5:	3f 20 61 74 20 43 4c 49 20 70 72 6f 6d 70 74 20     ? at CLI prompt 
     4b5:	66 6f 72 20 68 65 6c 70 00                          for help.

000004be <setup::__c>:
     4be:	73 6c 6f 77 20 52 54 43 20 63 6c 6f 63 6b 20 4f     slow RTC clock O
     4ce:	4b 00                                               K.

000004d0 <setup::__c>:
     4d0:	58 54 41 4c 20 64 65 61 64 00                       XTAL dead.

000004da <setup::__c>:
     4da:	41 73 79 6e 63 20 33 32 37 36 38 48 7a 20 63 6c     Async 32768Hz cl
     4ea:	6f 63 6b 20 6d 61 79 20 6e 6f 74 20 62 65 20 72     ock may not be r
     4fa:	75 6e 6e 69 6e 67 21 00                             unning!.

00000502 <setup::__c>:
     502:	53 6c 65 65 70 69 6e 67 20 74 6f 20 6c 65 74 20     Sleeping to let 
     512:	61 73 79 6e 63 20 33 32 37 36 38 48 7a 20 63 6c     async 32768Hz cl
     522:	6f 63 6b 20 73 74 61 72 74 2e 2e 2e 00              ock start....

0000052f <setup::__c>:
     52f:	6c 69 67 68 74 2f 74 65 6d 70 20 4f 4b 00           light/temp OK.

0000053d <setup::__c>:
     53d:	4c 32 20 73 74 75 63 6b 00                          L2 stuck.

00000546 <setup::__c>:
     546:	4c 20 73 74 75 63 6b 00                             L stuck.

0000054e <setup::__c>:
     54e:	4d 20 73 74 75 63 6b 00                             M stuck.

00000556 <setup::__c>:
     556:	74 65 6d 70 20 70 6f 74 3a 20 00                    temp pot: .

00000561 <setup::__c>:
     561:	74 65 6d 70 3a 20 00                                temp: .

00000568 <setup::__c>:
     568:	6c 69 67 68 74 3a 20 00                             light: .

00000570 <setup::__c>:
     570:	47 61 74 68 65 72 69 6e 67 20 69 6e 69 74 69 61     Gathering initia
     580:	6c 20 69 6e 70 75 74 73 20 61 6e 64 20 63 6f 6d     l inputs and com
     590:	70 75 74 69 6e 67 20 74 61 72 67 65 74 2f 64 65     puting target/de
     5a0:	6d 61 6e 64 2e 2e 2e 00                             mand....

000005a8 <setup::__c>:
     5a8:	69 6e 74 65 72 6e 61 6c 20 73 65 6e 73 6f 72 73     internal sensors
     5b8:	20 4f 4b 2c 20 6e 65 78 74 20 6c 69 67 68 74 2f      OK, next light/
     5c8:	74 65 6d 70 2f 6f 74 68 65 72 00                    temp/other.

000005d3 <setup::__c>:
     5d3:	43 20 2f 20 00                                      C / .

000005d8 <setup::__c>:
     5d8:	49 6e 74 20 74 65 6d 70 3a 20 00                    Int temp: .

000005e3 <setup::__c>:
     5e3:	6d 56 00                                            mV.

000005e6 <setup::__c>:
     5e6:	56 63 63 3a 20 00                                   Vcc: .

000005ec <setup::__c>:
     5ec:	52 46 4d 32 33 20 4f 4b 00                          RFM23 OK.

000005f5 <setup::__c>:
     5f5:	61 62 6f 75 74 20 74 6f 20 74 65 73 74 20 52 46     about to test RF
     605:	4d 32 33 00                                         M23.

00000609 <setup::__c>:
     609:	46 72 65 65 20 52 41 4d 3a 20 00                    Free RAM: .

00000614 <setup::__c>:
     614:	4f 76 65 72 72 75 6e 73 3a 20 00                    Overruns: .

0000061f <setup::__c>:
     61f:	52 65 73 65 74 73 3a 20 00                          Resets: .

00000628 <setup::__c>:
     628:	44 45 42 55 47 20 6d 6f 64 65 20 77 69 74 68 20     DEBUG mode with 
     638:	73 65 72 69 61 6c 20 6c 6f 67 67 69 6e 67 00        serial logging.

00000647 <setup::__c>:
     647:	0d 0a 4f 70 65 6e 54 52 56 20 62 6f 6f 74 69 6e     ..OpenTRV bootin
     657:	67 3a 20 00                                         g: .

0000065b <posPOST(unsigned char, __FlashStringHelper const*)::__c>:
     65b:	3a 20 00                                            : .

0000065e <posPOST(unsigned char, __FlashStringHelper const*)::__c>:
     65e:	70 6f 73 50 4f 53 54 3a 20 00                       posPOST: .

00000668 <serialPrintlnBuildVersion()::__c>:
     668:	20 31 36 3a 34 30 3a 31 34 00                        16:40:14.

00000672 <serialPrintlnBuildVersion()::__c>:
     672:	3b 20 63 6f 64 65 20 00                             ; code .

0000067a <serialPrintlnBuildVersion()::__c>:
     67a:	62 6f 61 72 64 20 56 30 2e 32 20 52 45 56 00        board V0.2 REV.

00000689 <port_to_mode_PGM>:
     689:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000693 <port_to_output_PGM>:
     693:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000069d <port_to_input_PGM>:
     69d:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000006a7 <digital_pin_to_port_PGM>:
     6a7:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     6b7:	03 03 03 03                                         ....

000006bb <digital_pin_to_bit_mask_PGM>:
     6bb:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     6cb:	04 08 10 20                                         ... 

000006cf <digital_pin_to_timer_PGM>:
     6cf:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     6df:	00 00 00 00 00                                      .....

000006e4 <__ctors_start>:
     6e4:	dd 15       	cp	r29, r13
     6e6:	ad 23       	and	r26, r29
     6e8:	ab 2a       	or	r10, r27
     6ea:	69 30       	cpi	r22, 0x09	; 9

000006ec <__ctors_end>:
     6ec:	11 24       	eor	r1, r1
     6ee:	1f be       	out	0x3f, r1	; 63
     6f0:	cf ef       	ldi	r28, 0xFF	; 255
     6f2:	d8 e0       	ldi	r29, 0x08	; 8
     6f4:	de bf       	out	0x3e, r29	; 62
     6f6:	cd bf       	out	0x3d, r28	; 61

000006f8 <__do_copy_data>:
     6f8:	11 e0       	ldi	r17, 0x01	; 1
     6fa:	a0 e0       	ldi	r26, 0x00	; 0
     6fc:	b1 e0       	ldi	r27, 0x01	; 1
     6fe:	ee ea       	ldi	r30, 0xAE	; 174
     700:	f8 e6       	ldi	r31, 0x68	; 104
     702:	02 c0       	rjmp	.+4      	; 0x708 <.do_copy_data_start>

00000704 <.do_copy_data_loop>:
     704:	05 90       	lpm	r0, Z+
     706:	0d 92       	st	X+, r0

00000708 <.do_copy_data_start>:
     708:	a2 33       	cpi	r26, 0x32	; 50
     70a:	b1 07       	cpc	r27, r17
     70c:	d9 f7       	brne	.-10     	; 0x704 <.do_copy_data_loop>

0000070e <__do_clear_bss>:
     70e:	13 e0       	ldi	r17, 0x03	; 3
     710:	a2 e3       	ldi	r26, 0x32	; 50
     712:	b1 e0       	ldi	r27, 0x01	; 1
     714:	01 c0       	rjmp	.+2      	; 0x718 <.do_clear_bss_start>

00000716 <.do_clear_bss_loop>:
     716:	1d 92       	st	X+, r1

00000718 <.do_clear_bss_start>:
     718:	a0 36       	cpi	r26, 0x60	; 96
     71a:	b1 07       	cpc	r27, r17
     71c:	e1 f7       	brne	.-8      	; 0x716 <.do_clear_bss_loop>

0000071e <__do_global_ctors>:
     71e:	16 e0       	ldi	r17, 0x06	; 6
     720:	cc ee       	ldi	r28, 0xEC	; 236
     722:	d6 e0       	ldi	r29, 0x06	; 6
     724:	04 c0       	rjmp	.+8      	; 0x72e <.do_global_ctors_start>

00000726 <.do_global_ctors_loop>:
     726:	22 97       	sbiw	r28, 0x02	; 2
     728:	fe 01       	movw	r30, r28
     72a:	0e 94 49 34 	call	0x6892	; 0x6892 <__tablejump__>

0000072e <.do_global_ctors_start>:
     72e:	c4 3e       	cpi	r28, 0xE4	; 228
     730:	d1 07       	cpc	r29, r17
     732:	c9 f7       	brne	.-14     	; 0x726 <.do_global_ctors_loop>
     734:	0e 94 bf 30 	call	0x617e	; 0x617e <main>
     738:	0c 94 55 34 	jmp	0x68aa	; 0x68aa <_exit>

0000073c <__bad_interrupt>:
     73c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000740 <abort>:
     740:	81 e0       	ldi	r24, 0x01	; 1
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	f8 94       	cli
     746:	0c 94 55 34 	jmp	0x68aa	; 0x68aa <_exit>

0000074a <atoi>:
     74a:	fc 01       	movw	r30, r24
     74c:	88 27       	eor	r24, r24
     74e:	99 27       	eor	r25, r25
     750:	e8 94       	clt
     752:	21 91       	ld	r18, Z+
     754:	20 32       	cpi	r18, 0x20	; 32
     756:	e9 f3       	breq	.-6      	; 0x752 <atoi+0x8>
     758:	29 30       	cpi	r18, 0x09	; 9
     75a:	10 f0       	brcs	.+4      	; 0x760 <atoi+0x16>
     75c:	2e 30       	cpi	r18, 0x0E	; 14
     75e:	c8 f3       	brcs	.-14     	; 0x752 <atoi+0x8>
     760:	2b 32       	cpi	r18, 0x2B	; 43
     762:	41 f0       	breq	.+16     	; 0x774 <atoi+0x2a>
     764:	2d 32       	cpi	r18, 0x2D	; 45
     766:	39 f4       	brne	.+14     	; 0x776 <atoi+0x2c>
     768:	68 94       	set
     76a:	04 c0       	rjmp	.+8      	; 0x774 <atoi+0x2a>
     76c:	0e 94 30 04 	call	0x860	; 0x860 <__mulhi_const_10>
     770:	82 0f       	add	r24, r18
     772:	91 1d       	adc	r25, r1
     774:	21 91       	ld	r18, Z+
     776:	20 53       	subi	r18, 0x30	; 48
     778:	2a 30       	cpi	r18, 0x0A	; 10
     77a:	c0 f3       	brcs	.-16     	; 0x76c <atoi+0x22>
     77c:	1e f4       	brtc	.+6      	; 0x784 <atoi+0x3a>
     77e:	90 95       	com	r25
     780:	81 95       	neg	r24
     782:	9f 4f       	sbci	r25, 0xFF	; 255
     784:	08 95       	ret

00000786 <strlen_P>:
     786:	fc 01       	movw	r30, r24
     788:	05 90       	lpm	r0, Z+
     78a:	00 20       	and	r0, r0
     78c:	e9 f7       	brne	.-6      	; 0x788 <strlen_P+0x2>
     78e:	80 95       	com	r24
     790:	90 95       	com	r25
     792:	8e 0f       	add	r24, r30
     794:	9f 1f       	adc	r25, r31
     796:	08 95       	ret

00000798 <memset>:
     798:	dc 01       	movw	r26, r24
     79a:	01 c0       	rjmp	.+2      	; 0x79e <memset+0x6>
     79c:	6d 93       	st	X+, r22
     79e:	41 50       	subi	r20, 0x01	; 1
     7a0:	50 40       	sbci	r21, 0x00	; 0
     7a2:	e0 f7       	brcc	.-8      	; 0x79c <memset+0x4>
     7a4:	08 95       	ret

000007a6 <strtok_r>:
     7a6:	00 97       	sbiw	r24, 0x00	; 0
     7a8:	31 f4       	brne	.+12     	; 0x7b6 <strtok_r+0x10>
     7aa:	da 01       	movw	r26, r20
     7ac:	8d 91       	ld	r24, X+
     7ae:	9c 91       	ld	r25, X
     7b0:	00 97       	sbiw	r24, 0x00	; 0
     7b2:	09 f4       	brne	.+2      	; 0x7b6 <strtok_r+0x10>
     7b4:	0e c0       	rjmp	.+28     	; 0x7d2 <strtok_r+0x2c>
     7b6:	dc 01       	movw	r26, r24
     7b8:	fb 01       	movw	r30, r22
     7ba:	3d 91       	ld	r19, X+
     7bc:	21 91       	ld	r18, Z+
     7be:	22 23       	and	r18, r18
     7c0:	19 f0       	breq	.+6      	; 0x7c8 <strtok_r+0x22>
     7c2:	32 17       	cp	r19, r18
     7c4:	c9 f3       	breq	.-14     	; 0x7b8 <strtok_r+0x12>
     7c6:	fa cf       	rjmp	.-12     	; 0x7bc <strtok_r+0x16>
     7c8:	33 23       	and	r19, r19
     7ca:	31 f4       	brne	.+12     	; 0x7d8 <strtok_r+0x32>
     7cc:	da 01       	movw	r26, r20
     7ce:	1d 92       	st	X+, r1
     7d0:	1c 92       	st	X, r1
     7d2:	88 27       	eor	r24, r24
     7d4:	99 27       	eor	r25, r25
     7d6:	08 95       	ret
     7d8:	11 97       	sbiw	r26, 0x01	; 1
     7da:	af 93       	push	r26
     7dc:	bf 93       	push	r27
     7de:	fb 01       	movw	r30, r22
     7e0:	3d 91       	ld	r19, X+
     7e2:	21 91       	ld	r18, Z+
     7e4:	32 17       	cp	r19, r18
     7e6:	71 f4       	brne	.+28     	; 0x804 <strtok_r+0x5e>
     7e8:	33 23       	and	r19, r19
     7ea:	21 f4       	brne	.+8      	; 0x7f4 <strtok_r+0x4e>
     7ec:	88 27       	eor	r24, r24
     7ee:	99 27       	eor	r25, r25
     7f0:	11 97       	sbiw	r26, 0x01	; 1
     7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <strtok_r+0x52>
     7f4:	1e 92       	st	-X, r1
     7f6:	11 96       	adiw	r26, 0x01	; 1
     7f8:	fa 01       	movw	r30, r20
     7fa:	a1 93       	st	Z+, r26
     7fc:	b0 83       	st	Z, r27
     7fe:	9f 91       	pop	r25
     800:	8f 91       	pop	r24
     802:	08 95       	ret
     804:	22 23       	and	r18, r18
     806:	69 f7       	brne	.-38     	; 0x7e2 <strtok_r+0x3c>
     808:	ea cf       	rjmp	.-44     	; 0x7de <strtok_r+0x38>

0000080a <__eerd_word>:
     80a:	df 92       	push	r13
     80c:	ef 92       	push	r14
     80e:	ff 92       	push	r15
     810:	0f 93       	push	r16
     812:	1f 93       	push	r17
     814:	7b 01       	movw	r14, r22
     816:	8c 01       	movw	r16, r24
     818:	fb 01       	movw	r30, r22
     81a:	09 95       	icall
     81c:	d8 2e       	mov	r13, r24
     81e:	c8 01       	movw	r24, r16
     820:	01 96       	adiw	r24, 0x01	; 1
     822:	f7 01       	movw	r30, r14
     824:	09 95       	icall
     826:	98 2f       	mov	r25, r24
     828:	8d 2d       	mov	r24, r13
     82a:	1f 91       	pop	r17
     82c:	0f 91       	pop	r16
     82e:	ff 90       	pop	r15
     830:	ef 90       	pop	r14
     832:	df 90       	pop	r13
     834:	08 95       	ret

00000836 <__eewr_word>:
     836:	df 92       	push	r13
     838:	ef 92       	push	r14
     83a:	ff 92       	push	r15
     83c:	0f 93       	push	r16
     83e:	1f 93       	push	r17
     840:	d7 2e       	mov	r13, r23
     842:	7a 01       	movw	r14, r20
     844:	8c 01       	movw	r16, r24
     846:	fa 01       	movw	r30, r20
     848:	09 95       	icall
     84a:	c8 01       	movw	r24, r16
     84c:	01 96       	adiw	r24, 0x01	; 1
     84e:	6d 2d       	mov	r22, r13
     850:	f7 01       	movw	r30, r14
     852:	09 95       	icall
     854:	1f 91       	pop	r17
     856:	0f 91       	pop	r16
     858:	ff 90       	pop	r15
     85a:	ef 90       	pop	r14
     85c:	df 90       	pop	r13
     85e:	08 95       	ret

00000860 <__mulhi_const_10>:
     860:	7a e0       	ldi	r23, 0x0A	; 10
     862:	97 9f       	mul	r25, r23
     864:	90 2d       	mov	r25, r0
     866:	87 9f       	mul	r24, r23
     868:	80 2d       	mov	r24, r0
     86a:	91 0d       	add	r25, r1
     86c:	11 24       	eor	r1, r1
     86e:	08 95       	ret

00000870 <isRoomLit()>:

static bool isRoomLitFlag;

// Returns true if room/environs well enough lit for normal activity.
// Based on results of last call to readAmbientLight().
bool isRoomLit() { return(isRoomLitFlag); }
     870:	80 91 34 01 	lds	r24, 0x0134
     874:	08 95       	ret

00000876 <getAmbientLight()>:

// Ambient light levels in range [0,1023].
static int ambientLightLevel;

// Return previously-read (with readAmbientLight()) ambient light level in range [0,1023]; very fast.
int getAmbientLight() { return(ambientLightLevel); }
     876:	80 91 32 01 	lds	r24, 0x0132
     87a:	90 91 33 01 	lds	r25, 0x0133
     87e:	08 95       	ret

00000880 <readAmbientLight()>:
// Measure/store/return the current room ambient light levels in range [0,1023].
// This may consume significant power and time.
// Probably no need to do this more than (say) once per minute.
// This implementation expects LDR (1M dark resistance) from IO_POWER_UP to LDR_SENSOR_AIN and 100k to ground.
// (Not intended to be called from ISR.)
int readAmbientLight()
     880:	cf 93       	push	r28
     882:	df 93       	push	r29
  {
  power_intermittent_peripherals_enable(false); // No need to wait for anything to stablise as direct of IO_POWER_UP.
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	0e 94 ad 14 	call	0x295a	; 0x295a <power_intermittent_peripherals_enable(bool)>
  const int al0 = analogueNoiseReducedRead(LDR_SENSOR_AIN, reference);
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	61 e0       	ldi	r22, 0x01	; 1
     890:	0e 94 d5 12 	call	0x25aa	; 0x25aa <analogueNoiseReducedRead(int, unsigned char)>
     894:	ec 01       	movw	r28, r24
    }
  else { al = al0; }
#else
  const int al = al0;
#endif
  power_intermittent_peripherals_disable();
     896:	0e 94 83 14 	call	0x2906	; 0x2906 <power_intermittent_peripherals_disable()>

  // Capture entropy from changed LS bits.
  if((uint8_t)al != (uint8_t)ambientLightLevel) { addEntropyToPool((uint8_t)al ^ (uint8_t)ambientLightLevel, 0); } // Claim zero entropy as may be forced by Eve.
     89a:	8c 2f       	mov	r24, r28
     89c:	90 91 32 01 	lds	r25, 0x0132
     8a0:	c9 17       	cp	r28, r25
     8a2:	21 f0       	breq	.+8      	; 0x8ac <readAmbientLight()+0x2c>
     8a4:	89 27       	eor	r24, r25
     8a6:	60 e0       	ldi	r22, 0x00	; 0
     8a8:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <addEntropyToPool(unsigned char, unsigned char)>

  // Adjust room-lit flag, with hysteresis.
  if(al <= LDR_THR_LOW)
     8ac:	c3 33       	cpi	r28, 0x33	; 51
     8ae:	d1 05       	cpc	r29, r1
     8b0:	1c f4       	brge	.+6      	; 0x8b8 <readAmbientLight()+0x38>
    { isRoomLitFlag = false; }
     8b2:	10 92 34 01 	sts	0x0134, r1
     8b6:	12 c0       	rjmp	.+36     	; 0x8dc <readAmbientLight()+0x5c>
  else if(al > LDR_THR_HIGH)
     8b8:	c7 34       	cpi	r28, 0x47	; 71
     8ba:	d1 05       	cpc	r29, r1
     8bc:	7c f0       	brlt	.+30     	; 0x8dc <readAmbientLight()+0x5c>
    {
    // Treat a sharp transition from dark to light as a possible/weak indication of occupancy, eg light flicked on.
    // TODO: consider refusal to trigger from zero to avoid power-up in light conditions causing transition. 
    if((!isRoomLitFlag) && (ambientLightLevel < LDR_THR_LOW)) { markAsPossiblyOccupied(); }
     8be:	80 91 34 01 	lds	r24, 0x0134
     8c2:	88 23       	and	r24, r24
     8c4:	41 f4       	brne	.+16     	; 0x8d6 <readAmbientLight()+0x56>
     8c6:	80 91 32 01 	lds	r24, 0x0132
     8ca:	90 91 33 01 	lds	r25, 0x0133
     8ce:	c2 97       	sbiw	r24, 0x32	; 50
     8d0:	14 f4       	brge	.+4      	; 0x8d6 <readAmbientLight()+0x56>
     8d2:	0e 94 c8 06 	call	0xd90	; 0xd90 <markAsPossiblyOccupied()>

    isRoomLitFlag = true;
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	80 93 34 01 	sts	0x0134, r24
    }

  // Store new value.
  ambientLightLevel = al;
     8dc:	d0 93 33 01 	sts	0x0133, r29
     8e0:	c0 93 32 01 	sts	0x0132, r28
  DEBUG_SERIAL_PRINT(isRoomLitFlag);
  DEBUG_SERIAL_PRINTLN();
#endif

  return(al);
  }
     8e4:	ce 01       	movw	r24, r28
     8e6:	df 91       	pop	r29
     8e8:	cf 91       	pop	r28
     8ea:	08 95       	ret

000008ec <getTRVPercentOpen()>:
#include "Temp_Pot.h"
#include "UI_Minimal.h"

// Percentage open for local TRV being controlled in range [0,100]; 0 is closed/off and is also the initial state.
static uint8_t TRVPercentOpen;
uint8_t getTRVPercentOpen() { return(TRVPercentOpen); }
     8ec:	80 91 3d 01 	lds	r24, 0x013D
     8f0:	08 95       	ret

000008f2 <getTargetTempC()>:

// Target temperature in Centigrade.
static uint8_t targetTempC;
uint8_t getTargetTempC() { return(targetTempC); }
     8f2:	80 91 3c 01 	lds	r24, 0x013C
     8f6:	08 95       	ret

000008f8 <getMinBoilerOnMinutes()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     8f8:	f9 99       	sbic	0x1f, 1	; 31
     8fa:	fe cf       	rjmp	.-4      	; 0x8f8 <getMinBoilerOnMinutes()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     8fc:	82 e1       	ldi	r24, 0x12	; 18
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	92 bd       	out	0x22, r25	; 34
     902:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     904:	f8 9a       	sbi	0x1f, 0	; 31
     906:	80 b5       	in	r24, 0x20	; 32
#endif


#ifndef getMinBoilerOnMinutes
// Get minimum on (and off) time for pointer (minutes); zero if not in hub mode.
uint8_t getMinBoilerOnMinutes() { return(~eeprom_read_byte((uint8_t *)EE_START_MIN_BOILER_ON_MINS_INV)); }
     908:	80 95       	com	r24
     90a:	08 95       	ret

0000090c <twoBitOccupancyValue()>:
// Returns true if the room appears to be likely occupied (with active users) recently.
// This uses the same timer as isOccupied() (restarted by markAsOccupied())
// but returns to false somewhat sooner for example to allow ramping up more costly occupancy detection methods
// and to allow some simple graduated occupancy responses.
// Do not call from an ISR.
bool isLikelyRecentlyOccupied() { return(occupationCountdownM > OCCUPATION_TIMEOUT_M/2); }
     90c:	80 91 3b 01 	lds	r24, 0x013B

// Two-bit occupancy: (00 not disclosed,) 1 not occupied, 2 possibly occupied, 3 probably occupied.
// 0 is not returned by this implementation.
uint8_t twoBitOccupancyValue() { return(isLikelyRecentlyOccupied() ? 3 : (isLikelyOccupied() ? 2 : 1)); }
     910:	87 31       	cpi	r24, 0x17	; 23
     912:	10 f0       	brcs	.+4      	; 0x918 <twoBitOccupancyValue()+0xc>
     914:	83 e0       	ldi	r24, 0x03	; 3
     916:	08 95       	ret
     918:	88 23       	and	r24, r24
     91a:	11 f4       	brne	.+4      	; 0x920 <twoBitOccupancyValue()+0x14>
     91c:	81 e0       	ldi	r24, 0x01	; 1
     91e:	08 95       	ret
     920:	82 e0       	ldi	r24, 0x02	; 2
     922:	08 95       	ret

00000924 <markAsOccupied()>:

// Call when some strong evidence of room occupation has occurred.
// Such evidence may include operation of buttons (etc) on the unit or PIR.
// Do not call from (for example) 'on' schedule change.
// Do not call from an ISR.
void markAsOccupied() { occupationCountdownM = OCCUPATION_TIMEOUT_M; }
     924:	8d e2       	ldi	r24, 0x2D	; 45
     926:	80 93 3b 01 	sts	0x013B, r24
     92a:	08 95       	ret

0000092c <getByHourStat(unsigned char, unsigned char)>:
// Get raw stats value for hour HH [0,23] from stats set N from non-volatile (EEPROM) store.
// A value of 0xff (255) means unset (or out of range); other values depend on which stats set is being used.
// The stats set is determined by the order in memory.
uint8_t getByHourStat(uint8_t hh, uint8_t statsSet)
  {
  if(statsSet > (EE_END_STATS - EE_START_STATS) / EE_STATS_SET_SIZE) { return((uint8_t) 0xff); } // Invalid set.
     92c:	65 30       	cpi	r22, 0x05	; 5
     92e:	98 f4       	brcc	.+38     	; 0x956 <getByHourStat(unsigned char, unsigned char)+0x2a>
  if(hh > 23) { return((uint8_t) 0xff); } // Invalid hour.
     930:	88 31       	cpi	r24, 0x18	; 24
     932:	88 f4       	brcc	.+34     	; 0x956 <getByHourStat(unsigned char, unsigned char)+0x2a>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     934:	f9 99       	sbic	0x1f, 1	; 31
     936:	fe cf       	rjmp	.-4      	; 0x934 <getByHourStat(unsigned char, unsigned char)+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     938:	28 2f       	mov	r18, r24
     93a:	30 e0       	ldi	r19, 0x00	; 0
     93c:	20 50       	subi	r18, 0x00	; 0
     93e:	3f 4f       	sbci	r19, 0xFF	; 255
     940:	88 e1       	ldi	r24, 0x18	; 24
     942:	68 9f       	mul	r22, r24
     944:	c0 01       	movw	r24, r0
     946:	11 24       	eor	r1, r1
     948:	28 0f       	add	r18, r24
     94a:	39 1f       	adc	r19, r25
     94c:	32 bd       	out	0x22, r19	; 34
     94e:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     950:	f8 9a       	sbi	0x1f, 0	; 31
     952:	80 b5       	in	r24, 0x20	; 32
     954:	08 95       	ret
  return(eeprom_read_byte((uint8_t *)(EE_START_STATS + (statsSet * (int)EE_STATS_SET_SIZE) + (int)hh)));
     956:	8f ef       	ldi	r24, 0xFF	; 255
  }
     958:	08 95       	ret

0000095a <compressTempC16(int)>:
#define COMPRESSION_C16_HIGH_THR_AFTER (COMPRESSION_C16_LOW_THR_AFTER + ((COMPRESSION_C16_HIGH_THRESHOLD-COMPRESSION_C16_LOW_THRESHOLD)>>1)) // High threshold after compression.
#define COMPRESSION_C16_CEIL_VAL (100<<4) // Ceiling input value to compression.
#define COMPRESSION_C16_CEIL_VAL_AFTER (COMPRESSION_C16_HIGH_THR_AFTER + ((COMPRESSION_C16_CEIL_VAL-COMPRESSION_C16_HIGH_THRESHOLD) >> 3)) // Ceiling input value after compression.
uint8_t compressTempC16(int tempC16)
  {
  if(tempC16 <= 0) { return(0); } // Clamp negative values to zero.
     95a:	18 16       	cp	r1, r24
     95c:	19 06       	cpc	r1, r25
     95e:	14 f0       	brlt	.+4      	; 0x964 <compressTempC16(int)+0xa>
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	08 95       	ret
  if(tempC16 < COMPRESSION_C16_LOW_THRESHOLD) { return(tempC16 >> 3); } // Preserve 1 bit after the binary point (0.5C precision).
     964:	8f 3f       	cpi	r24, 0xFF	; 255
     966:	91 05       	cpc	r25, r1
     968:	09 f0       	breq	.+2      	; 0x96c <compressTempC16(int)+0x12>
     96a:	34 f4       	brge	.+12     	; 0x978 <compressTempC16(int)+0x1e>
     96c:	43 e0       	ldi	r20, 0x03	; 3
     96e:	95 95       	asr	r25
     970:	87 95       	ror	r24
     972:	4a 95       	dec	r20
     974:	e1 f7       	brne	.-8      	; 0x96e <compressTempC16(int)+0x14>
     976:	08 95       	ret
  if(tempC16 < COMPRESSION_C16_HIGH_THRESHOLD)
     978:	21 e0       	ldi	r18, 0x01	; 1
     97a:	80 38       	cpi	r24, 0x80	; 128
     97c:	92 07       	cpc	r25, r18
     97e:	34 f4       	brge	.+12     	; 0x98c <compressTempC16(int)+0x32>
    { return(((tempC16 - COMPRESSION_C16_LOW_THRESHOLD) >> 1) + COMPRESSION_C16_LOW_THR_AFTER); }
     980:	80 50       	subi	r24, 0x00	; 0
     982:	91 40       	sbci	r25, 0x01	; 1
     984:	95 95       	asr	r25
     986:	87 95       	ror	r24
     988:	80 5e       	subi	r24, 0xE0	; 224
     98a:	08 95       	ret
  if(tempC16 < COMPRESSION_C16_CEIL_VAL)
     98c:	26 e0       	ldi	r18, 0x06	; 6
     98e:	80 34       	cpi	r24, 0x40	; 64
     990:	92 07       	cpc	r25, r18
     992:	14 f0       	brlt	.+4      	; 0x998 <compressTempC16(int)+0x3e>
     994:	88 ef       	ldi	r24, 0xF8	; 248
     996:	08 95       	ret
    { return(((tempC16 - COMPRESSION_C16_HIGH_THRESHOLD) >> 3) + COMPRESSION_C16_HIGH_THR_AFTER); }
     998:	80 58       	subi	r24, 0x80	; 128
     99a:	91 40       	sbci	r25, 0x01	; 1
     99c:	23 e0       	ldi	r18, 0x03	; 3
     99e:	95 95       	asr	r25
     9a0:	87 95       	ror	r24
     9a2:	2a 95       	dec	r18
     9a4:	e1 f7       	brne	.-8      	; 0x99e <compressTempC16(int)+0x44>
     9a6:	80 5a       	subi	r24, 0xA0	; 160
  return(COMPRESSION_C16_CEIL_VAL_AFTER);
  }
     9a8:	08 95       	ret

000009aa <expandTempC16(unsigned char)>:

// Reverses range compression done by compressTempC16(); results in range [0,100], with varying precision based on original value.
// 0xff (or other invalid) input results in STATS_UNSET_INT. 
int expandTempC16(uint8_t cTemp)
  {
  if(cTemp < COMPRESSION_C16_LOW_THR_AFTER) { return(cTemp << 3); }
     9aa:	80 32       	cpi	r24, 0x20	; 32
     9ac:	40 f4       	brcc	.+16     	; 0x9be <expandTempC16(unsigned char)+0x14>
     9ae:	28 2f       	mov	r18, r24
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	73 e0       	ldi	r23, 0x03	; 3
     9b4:	22 0f       	add	r18, r18
     9b6:	33 1f       	adc	r19, r19
     9b8:	7a 95       	dec	r23
     9ba:	e1 f7       	brne	.-8      	; 0x9b4 <expandTempC16(unsigned char)+0xa>
     9bc:	17 c0       	rjmp	.+46     	; 0x9ec <expandTempC16(unsigned char)+0x42>
  if(cTemp < COMPRESSION_C16_HIGH_THR_AFTER)
     9be:	80 36       	cpi	r24, 0x60	; 96
     9c0:	38 f4       	brcc	.+14     	; 0x9d0 <expandTempC16(unsigned char)+0x26>
    { return(((cTemp - COMPRESSION_C16_LOW_THR_AFTER) << 1) + COMPRESSION_C16_LOW_THRESHOLD); }
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	22 0f       	add	r18, r18
     9c8:	33 1f       	adc	r19, r19
     9ca:	20 54       	subi	r18, 0x40	; 64
     9cc:	3f 4f       	sbci	r19, 0xFF	; 255
     9ce:	0e c0       	rjmp	.+28     	; 0x9ec <expandTempC16(unsigned char)+0x42>
  if(cTemp <= COMPRESSION_C16_CEIL_VAL_AFTER)
     9d0:	89 3f       	cpi	r24, 0xF9	; 249
     9d2:	18 f0       	brcs	.+6      	; 0x9da <expandTempC16(unsigned char)+0x30>
     9d4:	2f ef       	ldi	r18, 0xFF	; 255
     9d6:	3f e7       	ldi	r19, 0x7F	; 127
     9d8:	09 c0       	rjmp	.+18     	; 0x9ec <expandTempC16(unsigned char)+0x42>
    { return(((cTemp - COMPRESSION_C16_HIGH_THR_AFTER) << 3) + COMPRESSION_C16_HIGH_THRESHOLD); }
     9da:	28 2f       	mov	r18, r24
     9dc:	30 e0       	ldi	r19, 0x00	; 0
     9de:	53 e0       	ldi	r21, 0x03	; 3
     9e0:	22 0f       	add	r18, r18
     9e2:	33 1f       	adc	r19, r19
     9e4:	5a 95       	dec	r21
     9e6:	e1 f7       	brne	.-8      	; 0x9e0 <expandTempC16(unsigned char)+0x36>
     9e8:	20 58       	subi	r18, 0x80	; 128
     9ea:	31 40       	sbci	r19, 0x01	; 1
  return(STATS_UNSET_INT); // Invalid/unset input.
  }
     9ec:	c9 01       	movw	r24, r18
     9ee:	08 95       	ret

000009f0 <getMinValvePcReallyOpen()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     9f0:	f9 99       	sbic	0x1f, 1	; 31
     9f2:	fe cf       	rjmp	.-4      	; 0x9f0 <getMinValvePcReallyOpen()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     9f4:	83 e1       	ldi	r24, 0x13	; 19
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	92 bd       	out	0x22, r25	; 34
     9fa:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     9fc:	f8 9a       	sbi	0x1f, 0	; 31
     9fe:	90 b5       	in	r25, 0x20	; 32
// If no override is set then DEFAULT_MIN_VALVE_PC_REALLY_OPEN is used.
// NOTE: raising this value temporarily (and shutting down the boiler immediate if possible) is one way to implement dynamic demand.
uint8_t getMinValvePcReallyOpen()
  {
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_MIN_VALVE_PC_REALLY_OPEN);
  if((stored > 0) && (stored <= 100)) { return(stored); }
     a00:	89 2f       	mov	r24, r25
     a02:	81 50       	subi	r24, 0x01	; 1
     a04:	84 36       	cpi	r24, 0x64	; 100
     a06:	08 f0       	brcs	.+2      	; 0xa0a <getMinValvePcReallyOpen()+0x1a>
     a08:	9a e0       	ldi	r25, 0x0A	; 10
  return(DEFAULT_MIN_VALVE_PC_REALLY_OPEN);
  }
     a0a:	89 2f       	mov	r24, r25
     a0c:	08 95       	ret

00000a0e <zapStats(unsigned int)>:

// Clear all collected statistics, eg when moving device to a new room or at a major time change.
// Requires 1.8ms per byte for each byte that actually needs erasing.
//   * maxBytesToErase limit the number of bytes erased to this; strictly positive, else 0 to allow 65536
// Returns true if finished with all bytes erased.
bool zapStats(uint16_t maxBytesToErase)
     a0e:	0f 93       	push	r16
     a10:	1f 93       	push	r17
     a12:	cf 93       	push	r28
     a14:	df 93       	push	r29
     a16:	8c 01       	movw	r16, r24
     a18:	c0 e0       	ldi	r28, 0x00	; 0
     a1a:	d1 e0       	ldi	r29, 0x01	; 1
  {
  for(uint8_t *p = (uint8_t *)EE_START_STATS; p <= (uint8_t *)EE_END_STATS; ++p)
    { if(eeprom_smart_erase_byte(p)) { if(--maxBytesToErase == 0) { return(false); } } } // Stop if out of time...
     a1c:	ce 01       	movw	r24, r28
     a1e:	0e 94 db 07 	call	0xfb6	; 0xfb6 <eeprom_smart_erase_byte(unsigned char*)>
     a22:	88 23       	and	r24, r24
     a24:	29 f0       	breq	.+10     	; 0xa30 <zapStats(unsigned int)+0x22>
     a26:	01 50       	subi	r16, 0x01	; 1
     a28:	10 40       	sbci	r17, 0x00	; 0
     a2a:	11 f4       	brne	.+4      	; 0xa30 <zapStats(unsigned int)+0x22>
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	06 c0       	rjmp	.+12     	; 0xa3c <zapStats(unsigned int)+0x2e>
// Requires 1.8ms per byte for each byte that actually needs erasing.
//   * maxBytesToErase limit the number of bytes erased to this; strictly positive, else 0 to allow 65536
// Returns true if finished with all bytes erased.
bool zapStats(uint16_t maxBytesToErase)
  {
  for(uint8_t *p = (uint8_t *)EE_START_STATS; p <= (uint8_t *)EE_END_STATS; ++p)
     a30:	21 96       	adiw	r28, 0x01	; 1
     a32:	81 e0       	ldi	r24, 0x01	; 1
     a34:	c8 37       	cpi	r28, 0x78	; 120
     a36:	d8 07       	cpc	r29, r24
     a38:	89 f7       	brne	.-30     	; 0xa1c <zapStats(unsigned int)+0xe>
     a3a:	81 e0       	ldi	r24, 0x01	; 1
    { if(eeprom_smart_erase_byte(p)) { if(--maxBytesToErase == 0) { return(false); } } } // Stop if out of time...
  return(true); // All done.
  }
     a3c:	df 91       	pop	r29
     a3e:	cf 91       	pop	r28
     a40:	1f 91       	pop	r17
     a42:	0f 91       	pop	r16
     a44:	08 95       	ret

00000a46 <setMinValvePcReallyOpen(unsigned char)>:
  }

// Set percent open to be considered really open.
// Applies to local valve and, at hub, to calls for remote calls for heat.
// Any out-of-range value (eg >100) clears the override and DEFAULT_MIN_VALVE_PC_REALLY_OPEN will be used.
void setMinValvePcReallyOpen(uint8_t percent)
     a46:	68 2f       	mov	r22, r24
  {
  if((percent > 100) || (percent == 0) || (percent == DEFAULT_MIN_VALVE_PC_REALLY_OPEN))
     a48:	81 50       	subi	r24, 0x01	; 1
     a4a:	84 36       	cpi	r24, 0x64	; 100
     a4c:	10 f4       	brcc	.+4      	; 0xa52 <setMinValvePcReallyOpen(unsigned char)+0xc>
     a4e:	6a 30       	cpi	r22, 0x0A	; 10
     a50:	29 f4       	brne	.+10     	; 0xa5c <setMinValvePcReallyOpen(unsigned char)+0x16>
    {
    // Bad / out-of-range / default value so erase stored value if not already so.
    eeprom_smart_erase_byte((uint8_t *)EE_START_MIN_VALVE_PC_REALLY_OPEN);
     a52:	83 e1       	ldi	r24, 0x13	; 19
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	0e 94 db 07 	call	0xfb6	; 0xfb6 <eeprom_smart_erase_byte(unsigned char*)>
     a5a:	08 95       	ret
    return;
    }
  // Store specified value with as low wear as possible.
  eeprom_smart_update_byte((uint8_t *)EE_START_MIN_VALVE_PC_REALLY_OPEN, percent);
     a5c:	83 e1       	ldi	r24, 0x13	; 19
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	0e 94 05 08 	call	0x100a	; 0x100a <eeprom_smart_update_byte(unsigned char*, unsigned char)>
     a64:	08 95       	ret

00000a66 <setMinBoilerOnMinutes(unsigned char)>:
#endif

#ifndef setMinBoilerOnMinutes
// Set minimum on (and off) time for pointer (minutes); zero to disable hub mode.
// Suggested minimum of 4 minutes for gas combi; much longer for heat pumps for example.
void setMinBoilerOnMinutes(uint8_t mins) { eeprom_smart_update_byte((uint8_t *)EE_START_MIN_BOILER_ON_MINS_INV, ~(mins)); }
     a66:	68 2f       	mov	r22, r24
     a68:	60 95       	com	r22
     a6a:	82 e1       	ldi	r24, 0x12	; 18
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	0e 94 05 08 	call	0x100a	; 0x100a <eeprom_smart_update_byte(unsigned char*, unsigned char)>
     a72:	08 95       	ret

00000a74 <hasEcoBias()>:
// Several system parameters are adjusted depending on the bias,
// with 'eco' slanted toward saving energy, eg with lower target temperatures and shorter on-times.
#ifndef hasEcoBias // If not a macro...
#if defined(TEMP_POT_AVAILABLE)
// Optimisiation/simplication: true if temp pot less than half way.
bool hasEcoBias() { return(getTempPotReducedNoise() < 128); }
     a74:	0e 94 03 1b 	call	0x3606	; 0x3606 <getTempPotReducedNoise()>
     a78:	80 95       	com	r24
     a7a:	88 1f       	adc	r24, r24
     a7c:	88 27       	eor	r24, r24
     a7e:	88 1f       	adc	r24, r24
     a80:	08 95       	ret

00000a82 <getFROSTTargetC()>:
// Derived from temperature pot position.
uint8_t getFROSTTargetC()
  {
  // Crudely select between eco/comfort FROST levels at the half-way mark.
  // Should not be critical enough to worry over.
  if(!hasEcoBias()) { return(BIASCOM_FROST); }
     a82:	0e 94 3a 05 	call	0xa74	; 0xa74 <hasEcoBias()>
     a86:	88 23       	and	r24, r24
     a88:	11 f0       	breq	.+4      	; 0xa8e <getFROSTTargetC()+0xc>
     a8a:	85 e0       	ldi	r24, 0x05	; 5
     a8c:	08 95       	ret
     a8e:	8a e0       	ldi	r24, 0x0A	; 10
  return(BIASECO_FROST); // Default is 'eco' notion of frost protection.
  }
     a90:	08 95       	ret

00000a92 <getWARMTargetC()>:
// Exposed implementation.
// Uses cache to avoid expensive recomputation.
// NOT safe in face of interrupts.
uint8_t getWARMTargetC()
  {
  const uint8_t pot = getTempPotReducedNoise();
     a92:	0e 94 03 1b 	call	0x3606	; 0x3606 <getTempPotReducedNoise()>
     a96:	28 2f       	mov	r18, r24
  // Cached input and result values; initially zero.
  static uint8_t potLast;
  static uint8_t resultLast;
  // Force recompuation if pot value changed
  // or apparently no calc done yet (unlikely/impossible zero cached result).
  if((potLast != pot) || (0 == resultLast))
     a98:	80 91 3f 01 	lds	r24, 0x013F
     a9c:	82 17       	cp	r24, r18
     a9e:	21 f4       	brne	.+8      	; 0xaa8 <getWARMTargetC()+0x16>
     aa0:	80 91 3e 01 	lds	r24, 0x013E
     aa4:	88 23       	and	r24, r24
     aa6:	79 f4       	brne	.+30     	; 0xac6 <getWARMTargetC()+0x34>
  const uint8_t high = (BIASCOM_WARM+1);
  const uint8_t range = high - low + 1;
  const uint8_t band = 256 / range; // Width of band for each degree C...

  // If relatively small number of distinct temperature values...
  if(pot >= 256 - band) { return(high); } // At top... (optimisation / robustness)
     aa8:	26 3d       	cpi	r18, 0xD6	; 214
     aaa:	10 f0       	brcs	.+4      	; 0xab0 <getWARMTargetC()+0x1e>
     aac:	85 e1       	ldi	r24, 0x15	; 21
     aae:	07 c0       	rjmp	.+14     	; 0xabe <getWARMTargetC()+0x2c>
     ab0:	9a e2       	ldi	r25, 0x2A	; 42
     ab2:	80 e1       	ldi	r24, 0x10	; 16
     ab4:	02 c0       	rjmp	.+4      	; 0xaba <getWARMTargetC()+0x28>
  if(range < 10)
    {
    uint8_t result = low;
    for(uint8_t ppot = band; ppot < pot; ++result) { ppot += band; }
     ab6:	96 5d       	subi	r25, 0xD6	; 214
     ab8:	8f 5f       	subi	r24, 0xFF	; 255
     aba:	92 17       	cp	r25, r18
     abc:	e0 f3       	brcs	.-8      	; 0xab6 <getWARMTargetC()+0x24>
  // or apparently no calc done yet (unlikely/impossible zero cached result).
  if((potLast != pot) || (0 == resultLast))
    {
    const uint8_t result = computeWARMTargetC(pot);
    // Cache input/result.
    resultLast = result;
     abe:	80 93 3e 01 	sts	0x013E, r24
    potLast = pot;
     ac2:	20 93 3f 01 	sts	0x013F, r18
    return(result);
    }

  // Return cached result.
  return(resultLast);
  }
     ac6:	08 95       	ret

00000ac8 <shouldBeWarmedAtHour(unsigned char)>:

// Returns true iff room likely to be occupied and need warming at the specified hour's sample point based on collected stats.
// Used for predictively warming a room in smart mode and for choosing setback depths.
// Returns false if no good evidence to warm the room at the given time based on past history over about one week.
//   * hh hour to check for predictive warming [0,23]
bool shouldBeWarmedAtHour(const uint_least8_t hh)
     ac8:	cf 93       	push	r28
     aca:	df 93       	push	r29
  {
#ifndef OMIT_MODULE_LDROCCUPANCYDETECTION
  // Return false if the sample hour's historic ambient light level falls in the bottom quartile.
  // Thus avoid any 'smart' warming for at least 25% of the daily cycle.
  const uint8_t smoothedAmbLight = eeprom_read_byte((uint8_t *)(EE_START_LAST_AMBLIGHT_BY_HOUR_SMOOTHED + hh));
     acc:	48 2f       	mov	r20, r24
     ace:	50 e0       	ldi	r21, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     ad0:	f9 99       	sbic	0x1f, 1	; 31
     ad2:	fe cf       	rjmp	.-4      	; 0xad0 <shouldBeWarmedAtHour(unsigned char)+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     ad4:	48 5b       	subi	r20, 0xB8	; 184
     ad6:	5e 4f       	sbci	r21, 0xFE	; 254
     ad8:	52 bd       	out	0x22, r21	; 34
     ada:	41 bd       	out	0x21, r20	; 33
     adc:	48 54       	subi	r20, 0x48	; 72
     ade:	51 40       	sbci	r21, 0x01	; 1
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     ae0:	f8 9a       	sbi	0x1f, 0	; 31
     ae2:	60 b5       	in	r22, 0x20	; 32
     ae4:	28 e4       	ldi	r18, 0x48	; 72
     ae6:	31 e0       	ldi	r19, 0x01	; 1
     ae8:	90 e0       	ldi	r25, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     aea:	f9 99       	sbic	0x1f, 1	; 31
     aec:	fe cf       	rjmp	.-4      	; 0xaea <shouldBeWarmedAtHour(unsigned char)+0x22>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     aee:	32 bd       	out	0x22, r19	; 34
     af0:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     af2:	f8 9a       	sbi	0x1f, 0	; 31
     af4:	80 b5       	in	r24, 0x20	; 32
  uint8_t valuesHigher = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
    {
    const uint8_t v = eeprom_read_byte(sE); 
    if(STATS_UNSET_INT == v) { return(false); } // Abort if not a full set of stats (eg at least one full days' worth). 
    if(v > sample) { if(++valuesHigher >= 18) { return(true); } } // Stop as soon as known to be in lower quartile.
     af6:	68 17       	cp	r22, r24
     af8:	20 f4       	brcc	.+8      	; 0xb02 <shouldBeWarmedAtHour(unsigned char)+0x3a>
     afa:	9f 5f       	subi	r25, 0xFF	; 255
     afc:	92 31       	cpi	r25, 0x12	; 18
     afe:	08 f0       	brcs	.+2      	; 0xb02 <shouldBeWarmedAtHour(unsigned char)+0x3a>
     b00:	55 c0       	rjmp	.+170    	; 0xbac <shouldBeWarmedAtHour(unsigned char)+0xe4>
//   * s is start of (24) sample set in EEPROM
//   * sample to be tested for being in lower quartile
static bool inBottomQuartile(uint8_t *sE, const uint8_t sample)
  {
  uint8_t valuesHigher = 0;
  for(int8_t hh = 24; --hh >= 0; ++sE)
     b02:	2f 5f       	subi	r18, 0xFF	; 255
     b04:	3f 4f       	sbci	r19, 0xFF	; 255
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	20 36       	cpi	r18, 0x60	; 96
     b0a:	38 07       	cpc	r19, r24
     b0c:	71 f7       	brne	.-36     	; 0xaea <shouldBeWarmedAtHour(unsigned char)+0x22>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     b0e:	f9 99       	sbic	0x1f, 1	; 31
     b10:	fe cf       	rjmp	.-4      	; 0xb0e <shouldBeWarmedAtHour(unsigned char)+0x46>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     b12:	40 5a       	subi	r20, 0xA0	; 160
     b14:	5e 4f       	sbci	r21, 0xFE	; 254
     b16:	52 bd       	out	0x22, r21	; 34
     b18:	41 bd       	out	0x21, r20	; 33
     b1a:	40 56       	subi	r20, 0x60	; 96
     b1c:	51 40       	sbci	r21, 0x01	; 1
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     b1e:	f8 9a       	sbi	0x1f, 0	; 31
     b20:	80 b5       	in	r24, 0x20	; 32
#endif

  // Return false if no WARM mode this hour for the last week (ie the unit needs reminding at least once per week).
  // Return true if this hour was in WARM mode yesterday or a week ago, and at least one other day.
  const uint8_t warmHistory = eeprom_read_byte((uint8_t *)(EE_START_LAST_WARMMODE_BY_HOUR + hh));
  if(0 == (0x80 & warmHistory)) // This hour has a history.
     b22:	87 fd       	sbrc	r24, 7
     b24:	0e c0       	rjmp	.+28     	; 0xb42 <shouldBeWarmedAtHour(unsigned char)+0x7a>
    {
    if(0 == warmHistory) // No explicit WARM for a week at this hour, so prevent 'smart' warming.
     b26:	88 23       	and	r24, r24
     b28:	09 f4       	brne	.+2      	; 0xb2c <shouldBeWarmedAtHour(unsigned char)+0x64>
     b2a:	40 c0       	rjmp	.+128    	; 0xbac <shouldBeWarmedAtHour(unsigned char)+0xe4>
      { return(false); }
    if((0 != (0x41 & warmHistory)) && (0 != (0x3e & warmHistory)))
     b2c:	28 2f       	mov	r18, r24
     b2e:	30 e0       	ldi	r19, 0x00	; 0
     b30:	c9 01       	movw	r24, r18
     b32:	81 74       	andi	r24, 0x41	; 65
     b34:	90 70       	andi	r25, 0x00	; 0
     b36:	89 2b       	or	r24, r25
     b38:	21 f0       	breq	.+8      	; 0xb42 <shouldBeWarmedAtHour(unsigned char)+0x7a>
     b3a:	2e 73       	andi	r18, 0x3E	; 62
     b3c:	30 70       	andi	r19, 0x00	; 0
     b3e:	23 2b       	or	r18, r19
     b40:	99 f5       	brne	.+102    	; 0xba8 <shouldBeWarmedAtHour(unsigned char)+0xe0>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     b42:	f9 99       	sbic	0x1f, 1	; 31
     b44:	fe cf       	rjmp	.-4      	; 0xb42 <shouldBeWarmedAtHour(unsigned char)+0x7a>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     b46:	48 5e       	subi	r20, 0xE8	; 232
     b48:	5e 4f       	sbci	r21, 0xFE	; 254
     b4a:	52 bd       	out	0x22, r21	; 34
     b4c:	41 bd       	out	0x21, r20	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     b4e:	f8 9a       	sbi	0x1f, 0	; 31
     b50:	80 b5       	in	r24, 0x20	; 32

// Reverses range compression done by compressTempC16(); results in range [0,100], with varying precision based on original value.
// 0xff (or other invalid) input results in STATS_UNSET_INT. 
int expandTempC16(uint8_t cTemp)
  {
  if(cTemp < COMPRESSION_C16_LOW_THR_AFTER) { return(cTemp << 3); }
     b52:	80 32       	cpi	r24, 0x20	; 32
     b54:	40 f4       	brcc	.+16     	; 0xb66 <shouldBeWarmedAtHour(unsigned char)+0x9e>
     b56:	c8 2f       	mov	r28, r24
     b58:	d0 e0       	ldi	r29, 0x00	; 0
     b5a:	b3 e0       	ldi	r27, 0x03	; 3
     b5c:	cc 0f       	add	r28, r28
     b5e:	dd 1f       	adc	r29, r29
     b60:	ba 95       	dec	r27
     b62:	e1 f7       	brne	.-8      	; 0xb5c <shouldBeWarmedAtHour(unsigned char)+0x94>
     b64:	14 c0       	rjmp	.+40     	; 0xb8e <shouldBeWarmedAtHour(unsigned char)+0xc6>
  if(cTemp < COMPRESSION_C16_HIGH_THR_AFTER)
     b66:	80 36       	cpi	r24, 0x60	; 96
     b68:	38 f4       	brcc	.+14     	; 0xb78 <shouldBeWarmedAtHour(unsigned char)+0xb0>
    { return(((cTemp - COMPRESSION_C16_LOW_THR_AFTER) << 1) + COMPRESSION_C16_LOW_THRESHOLD); }
     b6a:	c8 2f       	mov	r28, r24
     b6c:	d0 e0       	ldi	r29, 0x00	; 0
     b6e:	cc 0f       	add	r28, r28
     b70:	dd 1f       	adc	r29, r29
     b72:	c0 54       	subi	r28, 0x40	; 64
     b74:	df 4f       	sbci	r29, 0xFF	; 255
     b76:	0b c0       	rjmp	.+22     	; 0xb8e <shouldBeWarmedAtHour(unsigned char)+0xc6>
  if(cTemp <= COMPRESSION_C16_CEIL_VAL_AFTER)
     b78:	89 3f       	cpi	r24, 0xF9	; 249
     b7a:	c0 f4       	brcc	.+48     	; 0xbac <shouldBeWarmedAtHour(unsigned char)+0xe4>
    { return(((cTemp - COMPRESSION_C16_HIGH_THR_AFTER) << 3) + COMPRESSION_C16_HIGH_THRESHOLD); }
     b7c:	c8 2f       	mov	r28, r24
     b7e:	d0 e0       	ldi	r29, 0x00	; 0
     b80:	f3 e0       	ldi	r31, 0x03	; 3
     b82:	cc 0f       	add	r28, r28
     b84:	dd 1f       	adc	r29, r29
     b86:	fa 95       	dec	r31
     b88:	e1 f7       	brne	.-8      	; 0xb82 <shouldBeWarmedAtHour(unsigned char)+0xba>
     b8a:	c0 58       	subi	r28, 0x80	; 128
     b8c:	d1 40       	sbci	r29, 0x01	; 1
  DEBUG_SERIAL_PRINT(hh);
  DEBUG_SERIAL_PRINT_FLASHSTRING("h is ");
  DEBUG_SERIAL_PRINT(smoothedTempHHNext >> 4);
  DEBUG_SERIAL_PRINTLN();
#endif
  if((STATS_UNSET_INT != smoothedTempHHNext) && (((smoothedTempHHNext+8)>>4) >= getWARMTargetC()))
     b8e:	0e 94 49 05 	call	0xa92	; 0xa92 <getWARMTargetC()>
     b92:	20 e0       	ldi	r18, 0x00	; 0
     b94:	28 96       	adiw	r28, 0x08	; 8
     b96:	e4 e0       	ldi	r30, 0x04	; 4
     b98:	d5 95       	asr	r29
     b9a:	c7 95       	ror	r28
     b9c:	ea 95       	dec	r30
     b9e:	e1 f7       	brne	.-8      	; 0xb98 <shouldBeWarmedAtHour(unsigned char)+0xd0>
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	c8 17       	cp	r28, r24
     ba4:	d9 07       	cpc	r29, r25
     ba6:	1c f0       	brlt	.+6      	; 0xbae <shouldBeWarmedAtHour(unsigned char)+0xe6>
     ba8:	21 e0       	ldi	r18, 0x01	; 1
     baa:	01 c0       	rjmp	.+2      	; 0xbae <shouldBeWarmedAtHour(unsigned char)+0xe6>
     bac:	20 e0       	ldi	r18, 0x00	; 0
    { return(true); }

  // No good evidence for room to be warmed for specified hour.
  return(false);
  }
     bae:	82 2f       	mov	r24, r18
     bb0:	df 91       	pop	r29
     bb2:	cf 91       	pop	r28
     bb4:	08 95       	ret

00000bb6 <smoothStatsValue(unsigned char, unsigned char)>:

// Compute new linearly-smoothed value given old smoothed value and new value.
// Guaranteed not to produce a value higher than the max of the old smoothed value and the new value.
// Uses stochastic rounding to nearest to allow nominally sub-lsb values to have an effect over time.
// Usually only made public for unit testing.
uint8_t smoothStatsValue(const uint8_t oldSmoothed, const uint8_t newValue)
     bb6:	0f 93       	push	r16
     bb8:	1f 93       	push	r17
     bba:	18 2f       	mov	r17, r24
     bbc:	06 2f       	mov	r16, r22
  {
  if(oldSmoothed == newValue) { return(oldSmoothed); } // Optimisation: smoothed value is unchanged if new value is the same as extant.
     bbe:	86 17       	cp	r24, r22
     bc0:	b9 f0       	breq	.+46     	; 0xbf0 <smoothStatsValue(unsigned char, unsigned char)+0x3a>
  // Compute and update with new stochastically-rounded exponentially-smoothed ("Brown's simple exponential smoothing") value.
  // Stochastic rounding allows sub-lsb values to have an effect over time.
  const uint8_t stocAdd = randRNG8() & ((1 << STATS_SMOOTH_SHIFT) - 1); // Allows sub-lsb values to have an effect over time.
     bc2:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <randRNG8()>
  DEBUG_SERIAL_PRINT_FLASHSTRING("stocAdd=");
  DEBUG_SERIAL_PRINT(stocAdd);
  DEBUG_SERIAL_PRINTLN();
#endif
  // Do arithmetic in 16 bits to avoid over-/under- flows.
  return((uint8_t) (((((uint16_t) oldSmoothed) << STATS_SMOOTH_SHIFT) - ((uint16_t)oldSmoothed) + ((uint16_t)newValue) + stocAdd) >> STATS_SMOOTH_SHIFT));
     bc6:	21 2f       	mov	r18, r17
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	a9 01       	movw	r20, r18
     bcc:	93 e0       	ldi	r25, 0x03	; 3
     bce:	44 0f       	add	r20, r20
     bd0:	55 1f       	adc	r21, r21
     bd2:	9a 95       	dec	r25
     bd4:	e1 f7       	brne	.-8      	; 0xbce <smoothStatsValue(unsigned char, unsigned char)+0x18>
     bd6:	42 1b       	sub	r20, r18
     bd8:	53 0b       	sbc	r21, r19
     bda:	87 70       	andi	r24, 0x07	; 7
     bdc:	48 0f       	add	r20, r24
     bde:	51 1d       	adc	r21, r1
     be0:	40 0f       	add	r20, r16
     be2:	51 1d       	adc	r21, r1
     be4:	13 e0       	ldi	r17, 0x03	; 3
     be6:	56 95       	lsr	r21
     be8:	47 95       	ror	r20
     bea:	1a 95       	dec	r17
     bec:	e1 f7       	brne	.-8      	; 0xbe6 <smoothStatsValue(unsigned char, unsigned char)+0x30>
     bee:	14 2f       	mov	r17, r20
  }
     bf0:	81 2f       	mov	r24, r17
     bf2:	1f 91       	pop	r17
     bf4:	0f 91       	pop	r16
     bf6:	08 95       	ret

00000bf8 <sampleStats(bool)>:
// Call this once per hour with fullSample==true, as near the end of the hour as possible;
// this will update the non-volatile stats record for the current hour.
// Optionally call this at a small (2--10) even number of evenly-spaced number of other times thoughout the hour
// with fullSample=false to sub-sample (and these may receive lower weighting or be ignored).
// (EEPROM wear should not be an issue at this update rate in normal use.)
void sampleStats(const bool fullSample)
     bf8:	ef 92       	push	r14
     bfa:	ff 92       	push	r15
     bfc:	0f 93       	push	r16
     bfe:	1f 93       	push	r17
     c00:	cf 93       	push	r28
     c02:	df 93       	push	r29
     c04:	08 2f       	mov	r16, r24
  {
  // (Sub-)sample processing.
  static uint8_t sampleCount; // General sub-sample count; initially zero, and zeroed after each full sample.
  const bool firstSample = (0 == sampleCount++);
     c06:	80 91 3a 01 	lds	r24, 0x013A
     c0a:	10 e0       	ldi	r17, 0x00	; 0
     c0c:	88 23       	and	r24, r24
     c0e:	09 f4       	brne	.+2      	; 0xc12 <sampleStats(bool)+0x1a>
     c10:	11 e0       	ldi	r17, 0x01	; 1
     c12:	8f 5f       	subi	r24, 0xFF	; 255
     c14:	80 93 3a 01 	sts	0x013A, r24
  // WARM mode count.
  static int8_t warmCount; // Sub-sample WARM count; initially zero, and zeroed after each full sample.
  if(inWarmModeDebounced()) { ++warmCount; } else { --warmCount; }
     c18:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <inWarmModeDebounced()>
     c1c:	90 91 39 01 	lds	r25, 0x0139
     c20:	88 23       	and	r24, r24
     c22:	11 f0       	breq	.+4      	; 0xc28 <sampleStats(bool)+0x30>
     c24:	9f 5f       	subi	r25, 0xFF	; 255
     c26:	01 c0       	rjmp	.+2      	; 0xc2a <sampleStats(bool)+0x32>
     c28:	91 50       	subi	r25, 0x01	; 1
     c2a:	90 93 39 01 	sts	0x0139, r25
  // Ambient light.
  const int ambLight = getAmbientLight();
     c2e:	0e 94 3b 04 	call	0x876	; 0x876 <getAmbientLight()>
     c32:	9c 01       	movw	r18, r24
  static int ambLightTotal;
  ambLightTotal = firstSample ? ambLight : (ambLightTotal + ambLight);
     c34:	11 23       	and	r17, r17
     c36:	31 f4       	brne	.+12     	; 0xc44 <sampleStats(bool)+0x4c>
     c38:	80 91 37 01 	lds	r24, 0x0137
     c3c:	90 91 38 01 	lds	r25, 0x0138
     c40:	28 0f       	add	r18, r24
     c42:	39 1f       	adc	r19, r25
     c44:	30 93 38 01 	sts	0x0138, r19
     c48:	20 93 37 01 	sts	0x0137, r18
  const int tempC16 = getTemperatureC16();
     c4c:	0e 94 3e 1b 	call	0x367c	; 0x367c <getTemperatureC16()>
     c50:	9c 01       	movw	r18, r24
  static int tempC16Total;
  tempC16Total = firstSample ? tempC16 : (tempC16Total + tempC16);
     c52:	11 23       	and	r17, r17
     c54:	31 f4       	brne	.+12     	; 0xc62 <sampleStats(bool)+0x6a>
     c56:	80 91 35 01 	lds	r24, 0x0135
     c5a:	90 91 36 01 	lds	r25, 0x0136
     c5e:	28 0f       	add	r18, r24
     c60:	39 1f       	adc	r19, r25
     c62:	30 93 36 01 	sts	0x0136, r19
     c66:	20 93 35 01 	sts	0x0135, r18
  if(!fullSample) { return; } // Only accumulate values cached until a full sample.
     c6a:	00 23       	and	r16, r16
     c6c:	09 f4       	brne	.+2      	; 0xc70 <sampleStats(bool)+0x78>
     c6e:	89 c0       	rjmp	.+274    	; 0xd82 <sampleStats(bool)+0x18a>

  const uint_least8_t hh = getHoursLT(); // Get the current local-time hour...
     c70:	0e 94 74 18 	call	0x30e8	; 0x30e8 <getHoursLT()>
     c74:	18 2f       	mov	r17, r24

  // Scale and constrain last-read temperature to valid range for stats.
  const uint8_t temp = compressTempC16((tempC16Total + (sampleCount/2)) / sampleCount);
     c76:	60 91 3a 01 	lds	r22, 0x013A
     c7a:	26 2f       	mov	r18, r22
     c7c:	26 95       	lsr	r18
     c7e:	80 91 35 01 	lds	r24, 0x0135
     c82:	90 91 36 01 	lds	r25, 0x0136
     c86:	82 0f       	add	r24, r18
     c88:	91 1d       	adc	r25, r1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	0e 94 f7 33 	call	0x67ee	; 0x67ee <__divmodhi4>
     c90:	cb 01       	movw	r24, r22
     c92:	0e 94 ad 04 	call	0x95a	; 0x95a <compressTempC16(int)>
     c96:	08 2f       	mov	r16, r24
  // Update the last-sample slot using the mean samples value.
  eeprom_smart_update_byte((uint8_t *)(EE_START_LAST_TEMP_BY_HOUR + hh), temp);
     c98:	e1 2e       	mov	r14, r17
     c9a:	ff 24       	eor	r15, r15
     c9c:	c7 01       	movw	r24, r14
     c9e:	80 50       	subi	r24, 0x00	; 0
     ca0:	9f 4f       	sbci	r25, 0xFF	; 255
     ca2:	60 2f       	mov	r22, r16
     ca4:	0e 94 05 08 	call	0x100a	; 0x100a <eeprom_smart_update_byte(unsigned char*, unsigned char)>
  // If existing smoothed value unset or invalid, use new one as is, else fold in.
  uint8_t *const phT = (uint8_t *)(EE_START_LAST_TEMP_BY_HOUR_SMOOTHED + hh);
     ca8:	e7 01       	movw	r28, r14
     caa:	c8 5e       	subi	r28, 0xE8	; 232
     cac:	de 4f       	sbci	r29, 0xFE	; 254
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     cae:	f9 99       	sbic	0x1f, 1	; 31
     cb0:	fe cf       	rjmp	.-4      	; 0xcae <sampleStats(bool)+0xb6>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     cb2:	d2 bd       	out	0x22, r29	; 34
     cb4:	c1 bd       	out	0x21, r28	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     cb6:	f8 9a       	sbi	0x1f, 0	; 31
     cb8:	80 b5       	in	r24, 0x20	; 32
  const uint8_t tempSmoothed = eeprom_read_byte(phT);
  if(tempSmoothed > MAX_STATS_TEMP) { eeprom_smart_update_byte(phT, temp); }
     cba:	89 3f       	cpi	r24, 0xF9	; 249
     cbc:	18 f0       	brcs	.+6      	; 0xcc4 <sampleStats(bool)+0xcc>
     cbe:	ce 01       	movw	r24, r28
     cc0:	60 2f       	mov	r22, r16
     cc2:	05 c0       	rjmp	.+10     	; 0xcce <sampleStats(bool)+0xd6>
  else { eeprom_smart_update_byte(phT, smoothStatsValue(tempSmoothed, temp)); }
     cc4:	60 2f       	mov	r22, r16
     cc6:	0e 94 db 05 	call	0xbb6	; 0xbb6 <smoothStatsValue(unsigned char, unsigned char)>
     cca:	68 2f       	mov	r22, r24
     ccc:	ce 01       	movw	r24, r28
     cce:	0e 94 05 08 	call	0x100a	; 0x100a <eeprom_smart_update_byte(unsigned char*, unsigned char)>

  // Scale and constrain mean ambient-light value to valid range for stats; very top of range is compressed to retain maximum gamut.
  const uint8_t ambLShifted = (uint8_t) ((ambLightTotal + (sampleCount<<1)) / (sampleCount<<2));
     cd2:	80 91 3a 01 	lds	r24, 0x013A
     cd6:	90 e0       	ldi	r25, 0x00	; 0
  const uint8_t ambL = min(ambLShifted, MAX_STATS_AMBLIGHT);
     cd8:	20 91 37 01 	lds	r18, 0x0137
     cdc:	30 91 38 01 	lds	r19, 0x0138
     ce0:	bc 01       	movw	r22, r24
     ce2:	66 0f       	add	r22, r22
     ce4:	77 1f       	adc	r23, r23
     ce6:	66 0f       	add	r22, r22
     ce8:	77 1f       	adc	r23, r23
     cea:	88 0f       	add	r24, r24
     cec:	99 1f       	adc	r25, r25
     cee:	82 0f       	add	r24, r18
     cf0:	93 1f       	adc	r25, r19
     cf2:	0e 94 f7 33 	call	0x67ee	; 0x67ee <__divmodhi4>
     cf6:	16 2f       	mov	r17, r22
     cf8:	6f 3f       	cpi	r22, 0xFF	; 255
     cfa:	08 f0       	brcs	.+2      	; 0xcfe <sampleStats(bool)+0x106>
     cfc:	1e ef       	ldi	r17, 0xFE	; 254
  // Update the last-sample slot using the mean samples value.
  eeprom_smart_update_byte((uint8_t *)(EE_START_LAST_AMBLIGHT_BY_HOUR + hh), ambL);
     cfe:	c7 01       	movw	r24, r14
     d00:	80 5d       	subi	r24, 0xD0	; 208
     d02:	9e 4f       	sbci	r25, 0xFE	; 254
     d04:	61 2f       	mov	r22, r17
     d06:	0e 94 05 08 	call	0x100a	; 0x100a <eeprom_smart_update_byte(unsigned char*, unsigned char)>
  // If existing smoothed value unset or invalid, use new one as is, else fold in.
  uint8_t *const phA = (uint8_t *)(EE_START_LAST_AMBLIGHT_BY_HOUR_SMOOTHED + hh);
     d0a:	e7 01       	movw	r28, r14
     d0c:	c8 5b       	subi	r28, 0xB8	; 184
     d0e:	de 4f       	sbci	r29, 0xFE	; 254
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     d10:	f9 99       	sbic	0x1f, 1	; 31
     d12:	fe cf       	rjmp	.-4      	; 0xd10 <sampleStats(bool)+0x118>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     d14:	d2 bd       	out	0x22, r29	; 34
     d16:	c1 bd       	out	0x21, r28	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     d18:	f8 9a       	sbi	0x1f, 0	; 31
     d1a:	80 b5       	in	r24, 0x20	; 32
  const uint8_t ambLSmoothed = eeprom_read_byte(phA);
  if(ambLSmoothed > MAX_STATS_AMBLIGHT) { eeprom_smart_update_byte(phA, ambL); }
     d1c:	8f 3f       	cpi	r24, 0xFF	; 255
     d1e:	19 f4       	brne	.+6      	; 0xd26 <sampleStats(bool)+0x12e>
     d20:	ce 01       	movw	r24, r28
     d22:	61 2f       	mov	r22, r17
     d24:	05 c0       	rjmp	.+10     	; 0xd30 <sampleStats(bool)+0x138>
  else { eeprom_smart_update_byte(phA, smoothStatsValue(ambLSmoothed, ambL)); }
     d26:	61 2f       	mov	r22, r17
     d28:	0e 94 db 05 	call	0xbb6	; 0xbb6 <smoothStatsValue(unsigned char, unsigned char)>
     d2c:	68 2f       	mov	r22, r24
     d2e:	ce 01       	movw	r24, r28
     d30:	0e 94 05 08 	call	0x100a	; 0x100a <eeprom_smart_update_byte(unsigned char*, unsigned char)>
  // Bit 6 is 1 if most recent day's sample was in WARM (or BAKE) mode, 0 if in FROST mode.
  // At each new sampling, bits 6--1 are shifted down and the new bit 6 set as above.
  // Designed to enable low-wear no-write or selective erase/write use much of the time;
  // periods which are always the same mode will achieve a steady-state value (eliminating most EEPROM wear)
  // while even some of the rest (while switching over from all-WARM to all-FROST) will only need pure writes (no erase).
  uint8_t *const phW = (uint8_t *)(EE_START_LAST_WARMMODE_BY_HOUR + hh);
     d34:	e7 01       	movw	r28, r14
     d36:	c0 5a       	subi	r28, 0xA0	; 160
     d38:	de 4f       	sbci	r29, 0xFE	; 254
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     d3a:	f9 99       	sbic	0x1f, 1	; 31
     d3c:	fe cf       	rjmp	.-4      	; 0xd3a <sampleStats(bool)+0x142>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     d3e:	d2 bd       	out	0x22, r29	; 34
     d40:	c1 bd       	out	0x21, r28	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     d42:	f8 9a       	sbi	0x1f, 0	; 31
     d44:	80 b5       	in	r24, 0x20	; 32
  const uint8_t warmHistory = eeprom_read_byte(phW);
  if(warmHistory & 0x80) { eeprom_smart_clear_bits(phW, inWarmModeDebounced() ? 0x7f : 0); } // First use sets all history bits to current sample value.
     d46:	87 ff       	sbrs	r24, 7
     d48:	0b c0       	rjmp	.+22     	; 0xd60 <sampleStats(bool)+0x168>
     d4a:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <inWarmModeDebounced()>
     d4e:	88 23       	and	r24, r24
     d50:	11 f4       	brne	.+4      	; 0xd56 <sampleStats(bool)+0x15e>
     d52:	60 e0       	ldi	r22, 0x00	; 0
     d54:	01 c0       	rjmp	.+2      	; 0xd58 <sampleStats(bool)+0x160>
     d56:	6f e7       	ldi	r22, 0x7F	; 127
     d58:	ce 01       	movw	r24, r28
     d5a:	0e 94 ef 07 	call	0xfde	; 0xfde <eeprom_smart_clear_bits(unsigned char*, unsigned char)>
     d5e:	0d c0       	rjmp	.+26     	; 0xd7a <sampleStats(bool)+0x182>
  else // Shift in today's sample bit value for this hour at bit 6...
    {
    uint8_t newWarmHistory = (warmHistory >> 1) & 0x3f;
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	95 95       	asr	r25
     d64:	87 95       	ror	r24
     d66:	68 2f       	mov	r22, r24
     d68:	6f 73       	andi	r22, 0x3F	; 63
    if(warmCount > 0) { newWarmHistory |= 0x40; } // Treat as warm iff more WARM than FROST (sub-)samples.
     d6a:	80 91 39 01 	lds	r24, 0x0139
     d6e:	18 16       	cp	r1, r24
     d70:	0c f4       	brge	.+2      	; 0xd74 <sampleStats(bool)+0x17c>
     d72:	60 64       	ori	r22, 0x40	; 64
    eeprom_smart_update_byte(phW, newWarmHistory);
     d74:	ce 01       	movw	r24, r28
     d76:	0e 94 05 08 	call	0x100a	; 0x100a <eeprom_smart_update_byte(unsigned char*, unsigned char)>
    }
  // Reset WARM sub-sample count after full sample.
  warmCount = 0;
     d7a:	10 92 39 01 	sts	0x0139, r1

  // TODO: other stats measures...


  // Reset generical sub-sample count to initial state after fill sample.
  sampleCount = 0;
     d7e:	10 92 3a 01 	sts	0x013A, r1
  }
     d82:	df 91       	pop	r29
     d84:	cf 91       	pop	r28
     d86:	1f 91       	pop	r17
     d88:	0f 91       	pop	r16
     d8a:	ff 90       	pop	r15
     d8c:	ef 90       	pop	r14
     d8e:	08 95       	ret

00000d90 <markAsPossiblyOccupied()>:
// Also use to simulate demand on behalf of user, eg for some part of schedule.
// In this implementation sets the timeout to half the usual time (unless already higher),
// which shouldn't force the room to appear recently occupied.
// Do not call from an ISR.
void markAsPossiblyOccupied()
  { occupationCountdownM = fmax(occupationCountdownM, OCCUPATION_TIMEOUT_M/2); }
     d90:	60 91 3b 01 	lds	r22, 0x013B
     d94:	70 e0       	ldi	r23, 0x00	; 0
     d96:	80 e0       	ldi	r24, 0x00	; 0
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	0e 94 17 33 	call	0x662e	; 0x662e <__floatunsisf>
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	40 eb       	ldi	r20, 0xB0	; 176
     da4:	51 e4       	ldi	r21, 0x41	; 65
     da6:	0e 94 54 33 	call	0x66a8	; 0x66a8 <fmax>
     daa:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <__fixunssfsi>
     dae:	60 93 3b 01 	sts	0x013B, r22
     db2:	08 95       	ret

00000db4 <computeTargetTemperature()>:


// Compute target temperature.
// Can be called as often as require though may be slow/expensive.
// Will be called by computeCallForHeat().
void computeTargetTemperature()
     db4:	1f 93       	push	r17
  {
#if defined(TEMP_POT_AVAILABLE)
  // Force up-to-date reading of temperature pot.
  readTempPot();
     db6:	0e 94 06 1b 	call	0x360c	; 0x360c <readTempPot()>
#endif

  if(!inWarmModeDebounced()) // In FROST mode.
     dba:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <inWarmModeDebounced()>
     dbe:	88 23       	and	r24, r24
     dc0:	19 f4       	brne	.+6      	; 0xdc8 <computeTargetTemperature()+0x14>
    {
    const uint8_t frostC = getFROSTTargetC();
     dc2:	0e 94 41 05 	call	0xa82	; 0xa82 <getFROSTTargetC()>
     dc6:	2e c0       	rjmp	.+92     	; 0xe24 <computeTargetTemperature()+0x70>
      }
#endif
    }

#ifdef SUPPORT_BAKE
  else if(inBakeModeDebounced()) // If in BAKE mode then use elevated target.
     dc8:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <inBakeModeDebounced()>
     dcc:	88 23       	and	r24, r24
     dce:	39 f0       	breq	.+14     	; 0xdde <computeTargetTemperature()+0x2a>
    {
    // dec bakeCountdownM // Moved management of counter to UI code.
    targetTempC = fnmin((uint8_t)(getWARMTargetC() + BAKE_UPLIFT), (uint8_t)MAX_TARGET_C); // No setbacks apply in BAKE mode.
     dd0:	0e 94 49 05 	call	0xa92	; 0xa92 <getWARMTargetC()>
     dd4:	8b 5f       	subi	r24, 0xFB	; 251
     dd6:	80 36       	cpi	r24, 0x60	; 96
     dd8:	28 f1       	brcs	.+74     	; 0xe24 <computeTargetTemperature()+0x70>
     dda:	8f e5       	ldi	r24, 0x5F	; 95
     ddc:	23 c0       	rjmp	.+70     	; 0xe24 <computeTargetTemperature()+0x70>
    // TODO: If no schedule set and no occupancy detected for over 1 day, then invoke full setback assuming people are away, eg on holiday.

    // Set back target temperature a little if room is too dark for activity AND room seems unoccupied
    // AND the unit has an eco bias or no schedule is on WARM at the moment (TODO-111).
    // TODO: with full occupancy support then allow setback simply based on lack of occupancy.
    const bool scheduledOn = isAnyScheduleOnWARMNow();
     dde:	0e 94 c4 19 	call	0x3388	; 0x3388 <isAnyScheduleOnWARMNow()>
     de2:	18 2f       	mov	r17, r24
    if(((!scheduledOn) || hasEcoBias()) && // TODO-111: suppress set-back from lack of occupancy in scheduled on-time in comfort mode.
     de4:	88 23       	and	r24, r24
     de6:	21 f0       	breq	.+8      	; 0xdf0 <computeTargetTemperature()+0x3c>
     de8:	0e 94 3a 05 	call	0xa74	; 0xa74 <hasEcoBias()>
     dec:	88 23       	and	r24, r24
     dee:	c1 f0       	breq	.+48     	; 0xe20 <computeTargetTemperature()+0x6c>
     df0:	0e 94 38 04 	call	0x870	; 0x870 <isRoomLit()>
     df4:	88 23       	and	r24, r24
     df6:	a1 f4       	brne	.+40     	; 0xe20 <computeTargetTemperature()+0x6c>
     df8:	80 91 3b 01 	lds	r24, 0x013B
     dfc:	88 23       	and	r24, r24
     dfe:	81 f4       	brne	.+32     	; 0xe20 <computeTargetTemperature()+0x6c>
       isRoomDark() && isLikelyUnoccupied()) // Only setback if apparently unoccupied.  
      {
      const uint8_t wt = getWARMTargetC();
     e00:	0e 94 49 05 	call	0xa92	; 0xa92 <getWARMTargetC()>
     e04:	98 2f       	mov	r25, r24
      // Use a bigger setback if extreme eco bias, unless in scheduled on-time.
      const uint8_t setback = ((!scheduledOn) && isEcoTemperature(wt)) ? SETBACK_ECO : SETBACK_DEFAULT;
     e06:	11 23       	and	r17, r17
     e08:	21 f4       	brne	.+8      	; 0xe12 <computeTargetTemperature()+0x5e>
     e0a:	82 31       	cpi	r24, 0x12	; 18
     e0c:	10 f4       	brcc	.+4      	; 0xe12 <computeTargetTemperature()+0x5e>
     e0e:	82 e0       	ldi	r24, 0x02	; 2
     e10:	01 c0       	rjmp	.+2      	; 0xe14 <computeTargetTemperature()+0x60>
     e12:	81 e0       	ldi	r24, 0x01	; 1
      // Set a 'smarter' setback target temperature based on predicted occupancy, etc, even if not explicitly in 'smart' mode.
      const uint_least8_t hh = getHoursLT();
      const uint8_t sba = shouldBeWarmedAtHour(hh) ? setback : SETBACK_FULL; 
      targetTempC = fnmax((uint8_t)(wt - sba), getFROSTTargetC());
#else // Lighter-weight code, eg for PICAXE.
      targetTempC = fnmax((uint8_t)(wt - setback), (uint8_t)MIN_TARGET_C); // Target must never be set low enough to create a frost/freeze hazard.
     e14:	98 1b       	sub	r25, r24
     e16:	89 2f       	mov	r24, r25



// Templated function versions of min/max that do not evaluate the arguments twice.
template <class T> const T& fnmin(const T& a, const T& b) { return((a>b)?b:a); }
template <class T> const T& fnmax(const T& a, const T& b) { return((a<b)?b:a); }
     e18:	95 30       	cpi	r25, 0x05	; 5
     e1a:	20 f4       	brcc	.+8      	; 0xe24 <computeTargetTemperature()+0x70>
     e1c:	85 e0       	ldi	r24, 0x05	; 5
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <computeTargetTemperature()+0x70>
#endif
      }
    else
      { targetTempC = getWARMTargetC(); } // Room not known to be too dark for normal activity so use WARM target directly.
     e20:	0e 94 49 05 	call	0xa92	; 0xa92 <getWARMTargetC()>
     e24:	80 93 3c 01 	sts	0x013C, r24
    }
  }
     e28:	1f 91       	pop	r17
     e2a:	08 95       	ret

00000e2c <computeCallForHeat()>:
// The inputs must be valid (and recent).
// Values set are targetTempC, TRVPercentOpen.
// This may also prepare data such as TX command sequences for the TRV, boiler, etc.
// This routine may take significant CPU time; no I/O is done, only internal state is updated.
// Returns true if valve target changed and thus messages may need to be recomputed/sent/etc.
bool computeCallForHeat()
     e2c:	ef 92       	push	r14
     e2e:	0f 93       	push	r16
     e30:	df 93       	push	r29
     e32:	cf 93       	push	r28
     e34:	00 d0       	rcall	.+0      	; 0xe36 <computeCallForHeat()+0xa>
     e36:	00 d0       	rcall	.+0      	; 0xe38 <computeCallForHeat()+0xc>
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
  {
  // Run down occupation timer if need be.
  if(occupationCountdownM > 0) { --occupationCountdownM; }
     e3c:	80 91 3b 01 	lds	r24, 0x013B
     e40:	88 23       	and	r24, r24
     e42:	19 f0       	breq	.+6      	; 0xe4a <computeCallForHeat()+0x1e>
     e44:	81 50       	subi	r24, 0x01	; 1
     e46:	80 93 3b 01 	sts	0x013B, r24

  computeTargetTemperature();
     e4a:	0e 94 da 06 	call	0xdb4	; 0xdb4 <computeTargetTemperature()>
// and try to eliminate unnecessary 'hunting' which makes noise and uses actuator energy.
static bool computeRequiredTRVPercentOpen()
  {
  bool changed = false;

  const int currentTempC16 = getTemperatureC16();
     e4e:	0e 94 3e 1b 	call	0x367c	; 0x367c <getTemperatureC16()>
     e52:	ac 01       	movw	r20, r24
  const uint8_t currentTempC = (uint8_t)(currentTempC16 >> 4);
     e54:	64 e0       	ldi	r22, 0x04	; 4
     e56:	95 95       	asr	r25
     e58:	87 95       	ror	r24
     e5a:	6a 95       	dec	r22
     e5c:	e1 f7       	brne	.-8      	; 0xe56 <computeCallForHeat()+0x2a>

  if(currentTempC < targetTempC) // (Well) under temp target: open valve.
     e5e:	30 91 3c 01 	lds	r19, 0x013C
     e62:	83 17       	cp	r24, r19
     e64:	e0 f4       	brcc	.+56     	; 0xe9e <computeCallForHeat()+0x72>
    {
    // Limit valve open slew to help minimise overshoot and actuator noise.
    // This should also reduce nugatory setting changes when occupancy (etc) is fluctuating.
    // Thus it may take several minutes to turn the radiator fully on,
    // though probably opening the first 30% will allow near-maximum heat output in practice.
    if(TRVPercentOpen != 100)
     e66:	80 91 3d 01 	lds	r24, 0x013D
     e6a:	84 36       	cpi	r24, 0x64	; 100
     e6c:	09 f4       	brne	.+2      	; 0xe70 <computeCallForHeat()+0x44>
     e6e:	95 c0       	rjmp	.+298    	; 0xf9a <computeCallForHeat()+0x16e>
      {
#if defined(SUPPORT_BAKE) && !defined(TRV_SLEW_GLACIAL)
      // If room is well below target then in BAKE mode immediately open to 100%, unless always glacial.
      // FIXME: use debounced bake mode value to avoid spurious slamming open of the valve if user cycles through modes.
      if(inBakeModeDebounced()) { TRVPercentOpen = 100; }
     e70:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <inBakeModeDebounced()>
     e74:	88 23       	and	r24, r24
     e76:	61 f4       	brne	.+24     	; 0xe90 <computeCallForHeat()+0x64>
      else
#endif
        {
#if !defined(TRV_SLEW_GLACIAL) // Unless glacial, open faster than usual even with eco bias, and even faster with comfort.
        const uint8_t tmp = TRVPercentOpen + ((!hasEcoBias()) ? TRV_SLEW_PC_PER_MIN_VFAST : TRV_SLEW_PC_PER_MIN_FAST);
     e78:	00 91 3d 01 	lds	r16, 0x013D
     e7c:	0e 94 3a 05 	call	0xa74	; 0xa74 <hasEcoBias()>
     e80:	88 23       	and	r24, r24
     e82:	11 f0       	breq	.+4      	; 0xe88 <computeCallForHeat()+0x5c>
     e84:	8a e0       	ldi	r24, 0x0A	; 10
     e86:	01 c0       	rjmp	.+2      	; 0xe8a <computeCallForHeat()+0x5e>
     e88:	84 e1       	ldi	r24, 0x14	; 20
     e8a:	80 0f       	add	r24, r16
#else
        const uint8_t tmp = TRVPercentOpen + TRV_MAX_SLEW_PC_PER_MIN;
#endif
        if(tmp > 100) { TRVPercentOpen = 100; } // Capped at 100%.
     e8c:	85 36       	cpi	r24, 0x65	; 101
     e8e:	10 f0       	brcs	.+4      	; 0xe94 <computeCallForHeat()+0x68>
     e90:	84 e6       	ldi	r24, 0x64	; 100
     e92:	8e c0       	rjmp	.+284    	; 0xfb0 <computeCallForHeat()+0x184>
        else
          {
#if defined(VALVE_TURN_OFF_LINGER) && (DEFAULT_MIN_VALVE_PC_REALLY_OPEN > TRV_MAX_SLEW_PC_PER_MIN)
          // Ensure valve will be immediately significantly opened (and that linger can work properly).
          if(tmp < DEFAULT_MIN_VALVE_PC_REALLY_OPEN) { TRVPercentOpen = DEFAULT_MIN_VALVE_PC_REALLY_OPEN; }
     e94:	8a 30       	cpi	r24, 0x0A	; 10
     e96:	08 f0       	brcs	.+2      	; 0xe9a <computeCallForHeat()+0x6e>
     e98:	8b c0       	rjmp	.+278    	; 0xfb0 <computeCallForHeat()+0x184>
     e9a:	8a e0       	ldi	r24, 0x0A	; 10
     e9c:	89 c0       	rjmp	.+274    	; 0xfb0 <computeCallForHeat()+0x184>
          }
        }      
      changed = true; // TRV setting has been changed.
      }
    }
  else if(currentTempC > targetTempC) // (Well) over temp target: close valve if not yet closed.
     e9e:	38 17       	cp	r19, r24
     ea0:	30 f5       	brcc	.+76     	; 0xeee <computeCallForHeat()+0xc2>
    {
    cancelBake(); // Ensure BAKE mode cancelled immediately if over target (eg when target is BAKE).
     ea2:	0e 94 05 1c 	call	0x380a	; 0x380a <cancelBake()>
    if(TRVPercentOpen != 0)
     ea6:	80 91 3d 01 	lds	r24, 0x013D
     eaa:	88 23       	and	r24, r24
     eac:	09 f4       	brne	.+2      	; 0xeb0 <computeCallForHeat()+0x84>
     eae:	75 c0       	rjmp	.+234    	; 0xf9a <computeCallForHeat()+0x16e>
      // Continue shutting valve as not yet closed.
#if defined(VALVE_TURN_OFF_LINGER) && (DEFAULT_MIN_VALVE_PC_REALLY_OPEN > 0)
      // TODO-117: allow very slow final turn off to help systems with poor bypass, ~1% per minute.
      // Special slow-turn-off rules for final part of travel at/below DEFAULT_MIN_VALVE_PC_REALLY_OPEN floor.
      const uint8_t lingerThreshold = DEFAULT_MIN_VALVE_PC_REALLY_OPEN - 1; // Should be below 'call for heat' threshold.
      if(TRVPercentOpen <= lingerThreshold)
     eb0:	8a 30       	cpi	r24, 0x0A	; 10
     eb2:	38 f4       	brcc	.+14     	; 0xec2 <computeCallForHeat()+0x96>
        {
        // If lingered long enough then do final chunk in one burst to help avoid valve hiss and temperature overshoot.
        if((DEFAULT_MAX_RUN_ON_TIME_M < DEFAULT_MIN_VALVE_PC_REALLY_OPEN) && (TRVPercentOpen < DEFAULT_MIN_VALVE_PC_REALLY_OPEN - DEFAULT_MAX_RUN_ON_TIME_M))
     eb4:	85 30       	cpi	r24, 0x05	; 5
     eb6:	18 f4       	brcc	.+6      	; 0xebe <computeCallForHeat()+0x92>
          { TRVPercentOpen = 0; } // Shut right off.
     eb8:	10 92 3d 01 	sts	0x013D, r1
     ebc:	52 c0       	rjmp	.+164    	; 0xf62 <computeCallForHeat()+0x136>
        else
          { --TRVPercentOpen; } // Turn down as slowly as reasonably possible to help boiler cool.
     ebe:	81 50       	subi	r24, 0x01	; 1
     ec0:	77 c0       	rjmp	.+238    	; 0xfb0 <computeCallForHeat()+0x184>
#else
      // No special linger threshold.
      const uint8_t lingerThreshold = 0; // Fully off.
#endif    
      // TODO-109: with comfort bias (or at hub because of self-heating temp errors) slew to off relatively slowly.
      if(((!hasEcoBias()) || inHubMode()) && (TRVPercentOpen > lingerThreshold + TRV_SLEW_PC_PER_MIN_VFAST)) { TRVPercentOpen -= TRV_SLEW_PC_PER_MIN_VFAST; }
     ec2:	0e 94 3a 05 	call	0xa74	; 0xa74 <hasEcoBias()>
     ec6:	88 23       	and	r24, r24
     ec8:	59 f0       	breq	.+22     	; 0xee0 <computeCallForHeat()+0xb4>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     eca:	f9 99       	sbic	0x1f, 1	; 31
     ecc:	fe cf       	rjmp	.-4      	; 0xeca <computeCallForHeat()+0x9e>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     ece:	82 e1       	ldi	r24, 0x12	; 18
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	92 bd       	out	0x22, r25	; 34
     ed4:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     ed6:	f8 9a       	sbi	0x1f, 0	; 31
     ed8:	80 b5       	in	r24, 0x20	; 32
     eda:	8f 3f       	cpi	r24, 0xFF	; 255
     edc:	09 f4       	brne	.+2      	; 0xee0 <computeCallForHeat()+0xb4>
     ede:	67 c0       	rjmp	.+206    	; 0xfae <computeCallForHeat()+0x182>
     ee0:	80 91 3d 01 	lds	r24, 0x013D
     ee4:	8e 31       	cpi	r24, 0x1E	; 30
     ee6:	08 f4       	brcc	.+2      	; 0xeea <computeCallForHeat()+0xbe>
     ee8:	62 c0       	rjmp	.+196    	; 0xfae <computeCallForHeat()+0x182>
     eea:	84 51       	subi	r24, 0x14	; 20
     eec:	61 c0       	rjmp	.+194    	; 0xfb0 <computeCallForHeat()+0x184>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     eee:	f9 99       	sbic	0x1f, 1	; 31
     ef0:	fe cf       	rjmp	.-4      	; 0xeee <computeCallForHeat()+0xc2>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     ef2:	83 e1       	ldi	r24, 0x13	; 19
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	92 bd       	out	0x22, r25	; 34
     ef8:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     efa:	f8 9a       	sbi	0x1f, 0	; 31
     efc:	00 b5       	in	r16, 0x20	; 32
// If no override is set then DEFAULT_MIN_VALVE_PC_REALLY_OPEN is used.
// NOTE: raising this value temporarily (and shutting down the boiler immediate if possible) is one way to implement dynamic demand.
uint8_t getMinValvePcReallyOpen()
  {
  const uint8_t stored = eeprom_read_byte((uint8_t *)EE_START_MIN_VALVE_PC_REALLY_OPEN);
  if((stored > 0) && (stored <= 100)) { return(stored); }
     efe:	80 2f       	mov	r24, r16
     f00:	81 50       	subi	r24, 0x01	; 1
     f02:	84 36       	cpi	r24, 0x64	; 100
     f04:	08 f0       	brcs	.+2      	; 0xf08 <computeCallForHeat()+0xdc>
     f06:	0a e0       	ldi	r16, 0x0A	; 10
    }
  else // Close to temp target: set valve partly open to try to tightly regulate.
    {
    // Use currentTempC16 lsbits to set valve percentage for proportional feedback
    // to provide more efficient and quieter TRV drive and probably more stable room temperature.
    uint8_t tmp = (uint8_t) (currentTempC16 & 0xf); // Only interested in lsbits.
     f08:	24 2f       	mov	r18, r20
     f0a:	2f 70       	andi	r18, 0x0F	; 15
    const uint8_t ulpStep = 6;
    // Get to nominal range 6 to 96, eg valve nearly shut just below top of 'correct' temperature window.
    const uint8_t targetPORaw = tmp * ulpStep;
#if defined(VALVE_TURN_OFF_LINGER)
    // Constrain from below to likely minimum-open value, in part to deal with TODO-117 'linger open' in lieu of boiler bypass.
    const uint8_t targetPO = fmax(targetPORaw, getMinValvePcReallyOpen());
     f0c:	60 e1       	ldi	r22, 0x10	; 16
     f0e:	62 1b       	sub	r22, r18
     f10:	26 e0       	ldi	r18, 0x06	; 6
     f12:	62 9f       	mul	r22, r18
     f14:	60 2d       	mov	r22, r0
     f16:	11 24       	eor	r1, r1
     f18:	70 e0       	ldi	r23, 0x00	; 0
     f1a:	80 e0       	ldi	r24, 0x00	; 0
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	0e 94 17 33 	call	0x662e	; 0x662e <__floatunsisf>
     f22:	69 83       	std	Y+1, r22	; 0x01
     f24:	7a 83       	std	Y+2, r23	; 0x02
     f26:	8b 83       	std	Y+3, r24	; 0x03
     f28:	9c 83       	std	Y+4, r25	; 0x04
     f2a:	60 2f       	mov	r22, r16
     f2c:	70 e0       	ldi	r23, 0x00	; 0
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	0e 94 17 33 	call	0x662e	; 0x662e <__floatunsisf>
     f36:	9b 01       	movw	r18, r22
     f38:	ac 01       	movw	r20, r24
     f3a:	69 81       	ldd	r22, Y+1	; 0x01
     f3c:	7a 81       	ldd	r23, Y+2	; 0x02
     f3e:	8b 81       	ldd	r24, Y+3	; 0x03
     f40:	9c 81       	ldd	r25, Y+4	; 0x04
     f42:	0e 94 54 33 	call	0x66a8	; 0x66a8 <fmax>
     f46:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <__fixunssfsi>
     f4a:	e6 2e       	mov	r14, r22
#else
    // Use as-is.
    const uint8_t targetPO = targetPORaw;
#endif
    // Reduce spurious valve/boiler adjustment by avoiding movement at all unless current error is significant.
    if(targetPO < TRVPercentOpen) // Currently open more than required.
     f4c:	20 91 3d 01 	lds	r18, 0x013D
     f50:	62 17       	cp	r22, r18
     f52:	48 f4       	brcc	.+18     	; 0xf66 <computeCallForHeat()+0x13a>
      {
      const uint8_t slew = TRVPercentOpen - targetPO;
      if(slew >= max((1+ulpStep), TRV_MIN_SLEW_PC)) // Ensure no hunting for 1ulp temperature wobble.
     f54:	82 2f       	mov	r24, r18
     f56:	8e 19       	sub	r24, r14
     f58:	87 30       	cpi	r24, 0x07	; 7
     f5a:	f8 f0       	brcs	.+62     	; 0xf9a <computeCallForHeat()+0x16e>
        {
        if(slew > TRV_MAX_SLEW_PC_PER_MIN)
            { TRVPercentOpen -= TRV_MAX_SLEW_PC_PER_MIN; } // Cap slew rate.
     f5c:	25 50       	subi	r18, 0x05	; 5
     f5e:	20 93 3d 01 	sts	0x013D, r18
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	1b c0       	rjmp	.+54     	; 0xf9c <computeCallForHeat()+0x170>
        else
            { TRVPercentOpen = targetPO; } // Adjust directly to target.
        changed = true; // TRV setting has been changed.
        }
      }
    else if(targetPO > TRVPercentOpen) // Currently open less than required.
     f66:	26 17       	cp	r18, r22
     f68:	c0 f4       	brcc	.+48     	; 0xf9a <computeCallForHeat()+0x16e>
      {
      const uint8_t slew = targetPO - TRVPercentOpen;
     f6a:	06 2f       	mov	r16, r22
     f6c:	02 1b       	sub	r16, r18
      if(slew >= max((1+ulpStep), TRV_MIN_SLEW_PC)) // Ensure no hunting for 1ulp temperature wobble.
     f6e:	07 30       	cpi	r16, 0x07	; 7
     f70:	a0 f0       	brcs	.+40     	; 0xf9a <computeCallForHeat()+0x16e>
        {
        // Slew open faster in BAKE mode or with comfort bias (unless always glacial).
#if !defined(TRV_SLEW_GLACIAL)
        const uint8_t maxSlew = (inBakeModeDebounced() || !hasEcoBias()) ? TRV_SLEW_PC_PER_MIN_FAST : TRV_MAX_SLEW_PC_PER_MIN;
     f72:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <inBakeModeDebounced()>
     f76:	88 23       	and	r24, r24
     f78:	31 f4       	brne	.+12     	; 0xf86 <computeCallForHeat()+0x15a>
     f7a:	0e 94 3a 05 	call	0xa74	; 0xa74 <hasEcoBias()>
     f7e:	88 23       	and	r24, r24
     f80:	11 f0       	breq	.+4      	; 0xf86 <computeCallForHeat()+0x15a>
     f82:	95 e0       	ldi	r25, 0x05	; 5
     f84:	03 c0       	rjmp	.+6      	; 0xf8c <computeCallForHeat()+0x160>
#else
        const uint8_t maxSlew = TRV_MAX_SLEW_PC_PER_MIN;
#endif
        if(slew > maxSlew)
     f86:	0b 30       	cpi	r16, 0x0B	; 11
     f88:	28 f0       	brcs	.+10     	; 0xf94 <computeCallForHeat()+0x168>
     f8a:	9a e0       	ldi	r25, 0x0A	; 10
            { TRVPercentOpen += maxSlew; } // Cap slew rate.
     f8c:	80 91 3d 01 	lds	r24, 0x013D
     f90:	89 0f       	add	r24, r25
     f92:	0e c0       	rjmp	.+28     	; 0xfb0 <computeCallForHeat()+0x184>
        else
            { TRVPercentOpen = targetPO; } // Adjust directly to target.
     f94:	e0 92 3d 01 	sts	0x013D, r14
     f98:	e4 cf       	rjmp	.-56     	; 0xf62 <computeCallForHeat()+0x136>
     f9a:	80 e0       	ldi	r24, 0x00	; 0
  // Run down occupation timer if need be.
  if(occupationCountdownM > 0) { --occupationCountdownM; }

  computeTargetTemperature();
  return(computeRequiredTRVPercentOpen());
  }
     f9c:	0f 90       	pop	r0
     f9e:	0f 90       	pop	r0
     fa0:	0f 90       	pop	r0
     fa2:	0f 90       	pop	r0
     fa4:	cf 91       	pop	r28
     fa6:	df 91       	pop	r29
     fa8:	0f 91       	pop	r16
     faa:	ef 90       	pop	r14
     fac:	08 95       	ret
#endif    
      // TODO-109: with comfort bias (or at hub because of self-heating temp errors) slew to off relatively slowly.
      if(((!hasEcoBias()) || inHubMode()) && (TRVPercentOpen > lingerThreshold + TRV_SLEW_PC_PER_MIN_VFAST)) { TRVPercentOpen -= TRV_SLEW_PC_PER_MIN_VFAST; }
      // Else (by default) force to (nearly) off immediately when requested, ie eagerly stop heating to conserve energy.
      // In any case percentage open should now be low enough to stop calling for heat immediately.
      else { TRVPercentOpen = lingerThreshold; }
     fae:	89 e0       	ldi	r24, 0x09	; 9
     fb0:	80 93 3d 01 	sts	0x013D, r24
     fb4:	d6 cf       	rjmp	.-84     	; 0xf62 <computeCallForHeat()+0x136>

00000fb6 <eeprom_smart_erase_byte(unsigned char*)>:
// If the target byte is already 0xff then this does nothing at all beyond an initial read.
// This saves a bit of time and power and possibly a little EEPROM cell wear also.
// Without split erase/write this degenerates to a specialised eeprom_update_byte().
// As with the AVR eeprom_XXX_byte() macros, not safe to use outside and within ISRs as-is.
// Returns true iff an erase was performed.
bool eeprom_smart_erase_byte(uint8_t *p)
     fb6:	9c 01       	movw	r18, r24
  eeprom_write_byte(p, 0xff); // Set to 0xff.
  return(true); // Performed an erase (and probably a write, too).
#else

  // Wait until EEPROM is idle/ready.
  eeprom_busy_wait();
     fb8:	f9 99       	sbic	0x1f, 1	; 31
     fba:	fe cf       	rjmp	.-4      	; 0xfb8 <eeprom_smart_erase_byte(unsigned char*)+0x2>
  //     if((uint8_t) 0xff == eeprom_read_byte(p)) { return; }
  // but leaves EEAR[L] set up appropriately for any erase or write.
#if E2END <= 0xFF
  EEARL = (uint8_t)p;
#else
  EEAR = (uint16_t)p;
     fbc:	32 bd       	out	0x22, r19	; 34
     fbe:	21 bd       	out	0x21, r18	; 33
#endif
  // Ignore problems that some AVRs have with EECR and STS instructions (ATmega64 errata).
  EECR = _BV(EERE); // Start EEPROM read operation.
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	8f bb       	out	0x1f, r24	; 31
  const uint8_t oldValue = EEDR; // Get old EEPROM value.
     fc4:	80 b5       	in	r24, 0x20	; 32
  if((uint8_t) 0xff != oldValue) // Needs erase...
     fc6:	8f 3f       	cpi	r24, 0xFF	; 255
     fc8:	11 f4       	brne	.+4      	; 0xfce <eeprom_smart_erase_byte(unsigned char*)+0x18>
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	08 95       	ret
    {
    ATOMIC_BLOCK (ATOMIC_RESTORESTATE) // Avoid timing problems from interrupts.
     fce:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     fd0:	f8 94       	cli
      {
      // Erase to 0xff; no write needed.
      EECR = _BV(EEMPE) | _BV(EEPM0); // Set master write-enable bit and erase-only mode.
     fd2:	84 e1       	ldi	r24, 0x14	; 20
     fd4:	8f bb       	out	0x1f, r24	; 31
      EECR |= _BV(EEPE);  // Start erase-only operation.
     fd6:	f9 9a       	sbi	0x1f, 1	; 31
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     fd8:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     fda:	81 e0       	ldi	r24, 0x01	; 1
      }
    return(true); // Performed the erase.
    }
  return(false);
#endif
  }
     fdc:	08 95       	ret

00000fde <eeprom_smart_clear_bits(unsigned char*, unsigned char)>:
// If ANDing in the mask has no effect then this does nothing at all beyond an initial read.
// This saves a bit of time and power and possibly a little EEPROM cell wear also.
// Without split erase/write this degenerates to a specialised eeprom_smart_update_byte().
// As with the AVR eeprom_XXX_byte() macros, not safe to use outside and within ISRs as-is.
// Returns true iff a write was performed.
bool eeprom_smart_clear_bits(uint8_t *p, uint8_t mask)
     fde:	9c 01       	movw	r18, r24
  eeprom_write_byte(p, newValue); // Set to masked value.
  return(true); // Performed a write (and probably an erase, too).
#else

  // Wait until EEPROM is idle/ready.
  eeprom_busy_wait();
     fe0:	f9 99       	sbic	0x1f, 1	; 31
     fe2:	fe cf       	rjmp	.-4      	; 0xfe0 <eeprom_smart_clear_bits(unsigned char*, unsigned char)+0x2>
  //     oldValue = eeprom_read_byte(p);
  // and leaves EEAR[L] set up appropriately for any erase or write.
#if E2END <= 0xFF
  EEARL = (uint8_t)p;
#else
  EEAR = (uint16_t)p;
     fe4:	32 bd       	out	0x22, r19	; 34
     fe6:	21 bd       	out	0x21, r18	; 33
#endif
  // Ignore problems that some AVRs have with EECR and STS instructions (ATmega64 errata).
  EECR = _BV(EERE); // Start EEPROM read operation.
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	8f bb       	out	0x1f, r24	; 31
  const uint8_t oldValue = EEDR; // Get old EEPROM value.
     fec:	80 b5       	in	r24, 0x20	; 32
  const uint8_t newValue = oldValue & mask;
     fee:	68 23       	and	r22, r24
  if(oldValue != newValue) // Write is needed...
     ff0:	86 17       	cp	r24, r22
     ff2:	11 f4       	brne	.+4      	; 0xff8 <eeprom_smart_clear_bits(unsigned char*, unsigned char)+0x1a>
     ff4:	80 e0       	ldi	r24, 0x00	; 0
     ff6:	08 95       	ret
    {
    // Do the write: no erase is needed.
    EEDR = newValue; // Set EEPROM data register to required new value.
     ff8:	60 bd       	out	0x20, r22	; 32
    ATOMIC_BLOCK (ATOMIC_RESTORESTATE) // Avoid timing problems from interrupts.
     ffa:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     ffc:	f8 94       	cli
      {
      EECR = _BV(EEMPE) | _BV(EEPM1); // Set master write-enable bit and write-only mode.
     ffe:	84 e2       	ldi	r24, 0x24	; 36
    1000:	8f bb       	out	0x1f, r24	; 31
      EECR |= _BV(EEPE);  // Start write-only operation.
    1002:	f9 9a       	sbi	0x1f, 1	; 31
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1004:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    1006:	81 e0       	ldi	r24, 0x01	; 1
      }
    return(true); // Performed the write.
    }
  return(false);
#endif
  }
    1008:	08 95       	ret

0000100a <eeprom_smart_update_byte(unsigned char*, unsigned char)>:
// Updates an EEEPROM byte iff not currently at the specified target value.
// May be able to selectively erase or write (ie reduce wear) to reach the desired value.
// As with the AVR eeprom_XXX_byte() macros, not safe to use outside and within ISRs as-is.
// Returns true iff an erase and/or write was performed.
// TODO: make smarter, eg don't wait/read twice...
bool eeprom_smart_update_byte(uint8_t *p, uint8_t value)
    100a:	78 2f       	mov	r23, r24
    100c:	e9 2f       	mov	r30, r25
  {
  // If target byte is 0xff then attempt smart erase rather than more generic write or erase+write.
  if((uint8_t) 0xff == value) { return(eeprom_smart_erase_byte(p)); }
    100e:	6f 3f       	cpi	r22, 0xFF	; 255
    1010:	19 f4       	brne	.+6      	; 0x1018 <eeprom_smart_update_byte(unsigned char*, unsigned char)+0xe>
    1012:	0e 94 db 07 	call	0xfb6	; 0xfb6 <eeprom_smart_erase_byte(unsigned char*)>
    1016:	08 95       	ret
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1018:	f9 99       	sbic	0x1f, 1	; 31
    101a:	fe cf       	rjmp	.-4      	; 0x1018 <eeprom_smart_update_byte(unsigned char*, unsigned char)+0xe>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    101c:	47 2f       	mov	r20, r23
    101e:	5e 2f       	mov	r21, r30
    1020:	52 bd       	out	0x22, r21	; 34
    1022:	41 bd       	out	0x21, r20	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1024:	f8 9a       	sbi	0x1f, 0	; 31
    1026:	80 b5       	in	r24, 0x20	; 32
  // More than an erase might be required...
  const uint8_t oldValue = eeprom_read_byte(p);
  if(value == oldValue) { return(false); } // No change needed.
    1028:	68 17       	cp	r22, r24
    102a:	11 f4       	brne	.+4      	; 0x1030 <eeprom_smart_update_byte(unsigned char*, unsigned char)+0x26>
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	08 95       	ret
#ifdef EEPROM_SPLIT_ERASE_WRITE // Can do selective write.
  if(value == (value & oldValue)) { return(eeprom_smart_clear_bits(p, value)); } // Can use pure write to clear bits to zero.
    1030:	26 2f       	mov	r18, r22
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	82 23       	and	r24, r18
    1038:	93 23       	and	r25, r19
    103a:	28 17       	cp	r18, r24
    103c:	39 07       	cpc	r19, r25
    103e:	29 f4       	brne	.+10     	; 0x104a <eeprom_smart_update_byte(unsigned char*, unsigned char)+0x40>
    1040:	87 2f       	mov	r24, r23
    1042:	9e 2f       	mov	r25, r30
    1044:	0e 94 ef 07 	call	0xfde	; 0xfde <eeprom_smart_clear_bits(unsigned char*, unsigned char)>
    1048:	08 95       	ret
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    104a:	f9 99       	sbic	0x1f, 1	; 31
    104c:	fe cf       	rjmp	.-4      	; 0x104a <eeprom_smart_update_byte(unsigned char*, unsigned char)+0x40>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    104e:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1050:	52 bd       	out	0x22, r21	; 34
    1052:	41 bd       	out	0x21, r20	; 33
#endif
    EEDR = __value;
    1054:	60 bd       	out	0x20, r22	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    1056:	0f b6       	in	r0, 0x3f	; 63
    1058:	f8 94       	cli
    105a:	fa 9a       	sbi	0x1f, 2	; 31
    105c:	f9 9a       	sbi	0x1f, 1	; 31
    105e:	0f be       	out	0x3f, r0	; 63
    1060:	81 e0       	ldi	r24, 0x01	; 1
#endif
  eeprom_write_byte(p, value); // Needs to set some (but not all) bits to 1, so needs erase and write.
  return(true); // Performed an update.
  }
    1062:	08 95       	ret

00001064 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>:
// bptr must be pointing at the current byte to update on entry which must start off as 0xff;
// this will write the byte and increment bptr (and write 0xff to the new location) if one is filled up.
// Partial byte can only have even number of bits present, ie be in one of 4 states.
// Two least significant bits used to indicate how many bit pairs are still to be filled,
// so initial 0xff value (which is never a valid complete filled byte) indicates 'empty'.
static uint8_t *_FHT8VCreate200usAppendEncBit(uint8_t *bptr, const bool is1)
    1064:	fc 01       	movw	r30, r24
  {
  const uint8_t bitPairsLeft = (*bptr) & 3; // Find out how many bit pairs are left to fill in the current byte.
    1066:	80 81       	ld	r24, Z
    1068:	98 2f       	mov	r25, r24
    106a:	93 70       	andi	r25, 0x03	; 3
  if(!is1) // Appending 1100.
    106c:	66 23       	and	r22, r22
    106e:	b1 f4       	brne	.+44     	; 0x109c <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x38>
    {
    switch(bitPairsLeft)
    1070:	92 30       	cpi	r25, 0x02	; 2
    1072:	51 f0       	breq	.+20     	; 0x1088 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x24>
    1074:	93 30       	cpi	r25, 0x03	; 3
    1076:	31 f0       	breq	.+12     	; 0x1084 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x20>
    1078:	9f 01       	movw	r18, r30
    107a:	2f 5f       	subi	r18, 0xFF	; 255
    107c:	3f 4f       	sbci	r19, 0xFF	; 255
    107e:	91 30       	cpi	r25, 0x01	; 1
    1080:	59 f4       	brne	.+22     	; 0x1098 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x34>
    1082:	05 c0       	rjmp	.+10     	; 0x108e <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x2a>
      {
      case 3: // Empty target byte (should be 0xff currently).
        *bptr = 0xcd; // %11001101 Write back partial byte (msbits now 1100 and two bit pairs remain free).
    1084:	8d ec       	ldi	r24, 0xCD	; 205
    1086:	25 c0       	rjmp	.+74     	; 0x10d2 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      case 2: // Top bit pair already filled.
        *bptr = (*bptr & 0xc0) | 0x30; // Preserve existing ms bit-pair, set middle four bits 1100, one bit pair remains free.
    1088:	80 7c       	andi	r24, 0xC0	; 192
    108a:	80 63       	ori	r24, 0x30	; 48
    108c:	22 c0       	rjmp	.+68     	; 0x10d2 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      case 1: // Top two bit pairs already filled.
        *bptr = (*bptr & 0xf0) | 0xc; // Preserve existing ms (2) bit-pairs, set bottom four bits 1100, write back full byte.
    108e:	80 7f       	andi	r24, 0xF0	; 240
    1090:	8c 60       	ori	r24, 0x0C	; 12
    1092:	80 83       	st	Z, r24
        *++bptr = (uint8_t) ~0U; // Initialise next byte for next incremental update.
    1094:	f9 01       	movw	r30, r18
    1096:	11 c0       	rjmp	.+34     	; 0x10ba <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x56>
        break;
      default: // Top three bit pairs already filled.
        *bptr |= 3; // Preserve existing ms (3) bit-pairs, OR in leading 11 bits, write back full byte.
    1098:	83 60       	ori	r24, 0x03	; 3
    109a:	13 c0       	rjmp	.+38     	; 0x10c2 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x5e>
        break;
      }
    }
  else // Appending 111000.
    {
    switch(bitPairsLeft)
    109c:	92 30       	cpi	r25, 0x02	; 2
    109e:	51 f0       	breq	.+20     	; 0x10b4 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x50>
    10a0:	93 30       	cpi	r25, 0x03	; 3
    10a2:	31 f0       	breq	.+12     	; 0x10b0 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x4c>
    10a4:	9f 01       	movw	r18, r30
    10a6:	2f 5f       	subi	r18, 0xFF	; 255
    10a8:	3f 4f       	sbci	r19, 0xFF	; 255
    10aa:	91 30       	cpi	r25, 0x01	; 1
    10ac:	71 f4       	brne	.+28     	; 0x10ca <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x66>
    10ae:	07 c0       	rjmp	.+14     	; 0x10be <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x5a>
      {
      case 3: // Empty target byte (should be 0xff currently).
        *bptr = 0xe0; // %11100000 Write back partial byte (msbits now 111000 and one bit pair remains free).
    10b0:	80 ee       	ldi	r24, 0xE0	; 224
    10b2:	0f c0       	rjmp	.+30     	; 0x10d2 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      case 2: // Top bit pair already filled.
        *bptr = (*bptr & 0xc0) | 0x38; // Preserve existing ms bit-pair, set lsbits to 111000, write back full byte.
    10b4:	80 7c       	andi	r24, 0xC0	; 192
    10b6:	88 63       	ori	r24, 0x38	; 56
    10b8:	81 93       	st	Z+, r24
        *++bptr = (uint8_t) ~0U; // Initialise next byte for next incremental update.
    10ba:	8f ef       	ldi	r24, 0xFF	; 255
    10bc:	0a c0       	rjmp	.+20     	; 0x10d2 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      case 1: // Top two bit pairs already filled.
        *bptr = (*bptr & 0xf0) | 0xe; // Preserve existing (2) ms bit-pairs, set bottom four bits to 1110, write back full byte.
    10be:	80 7f       	andi	r24, 0xF0	; 240
    10c0:	8e 60       	ori	r24, 0x0E	; 14
    10c2:	80 83       	st	Z, r24
        *++bptr = 0x3e; // %00111110 Write trailing 00 bits to next byte and indicate 3 bit-pairs free for next incremental update.
    10c4:	f9 01       	movw	r30, r18
    10c6:	8e e3       	ldi	r24, 0x3E	; 62
    10c8:	04 c0       	rjmp	.+8      	; 0x10d2 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)+0x6e>
        break;
      default: // Top three bit pairs already filled.
        *bptr |= 3; // Preserve existing ms (3) bit-pairs, OR in leading 11 bits, write back full byte.
    10ca:	83 60       	ori	r24, 0x03	; 3
    10cc:	80 83       	st	Z, r24
        *++bptr = 0x8d; // Write trailing 1000 bits to next byte and indicate 2 bit-pairs free for next incremental update.
    10ce:	f9 01       	movw	r30, r18
    10d0:	8d e8       	ldi	r24, 0x8D	; 141
    10d2:	80 83       	st	Z, r24
        break;
      }
    }
  return(bptr);
  }
    10d4:	cf 01       	movw	r24, r30
    10d6:	08 95       	ret

000010d8 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>:

// Appends encoded byte in b msbit first plus trailing even parity bit (9 bits total)
// to the byte stream being created by FHT8VCreate200usBitStreamBptr.
static uint8_t *_FHT8VCreate200usAppendByteEP(uint8_t *bptr, const uint8_t b)
    10d8:	ef 92       	push	r14
    10da:	ff 92       	push	r15
    10dc:	0f 93       	push	r16
    10de:	1f 93       	push	r17
    10e0:	cf 93       	push	r28
    10e2:	df 93       	push	r29
    10e4:	9c 01       	movw	r18, r24
    10e6:	16 2f       	mov	r17, r22
    10e8:	00 e8       	ldi	r16, 0x80	; 128
    10ea:	c0 e0       	ldi	r28, 0x00	; 0
    10ec:	d0 e0       	ldi	r29, 0x00	; 0
  {
  for(uint8_t mask = 0x80; mask != 0; mask >>= 1)
    { bptr = _FHT8VCreate200usAppendEncBit(bptr, 0 != (b & mask)); }
    10ee:	e6 2e       	mov	r14, r22
    10f0:	ff 24       	eor	r15, r15
    10f2:	60 e0       	ldi	r22, 0x00	; 0
    10f4:	80 2f       	mov	r24, r16
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	8e 21       	and	r24, r14
    10fa:	9f 21       	and	r25, r15
    10fc:	89 2b       	or	r24, r25
    10fe:	09 f0       	breq	.+2      	; 0x1102 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)+0x2a>
    1100:	61 e0       	ldi	r22, 0x01	; 1
    1102:	c9 01       	movw	r24, r18
    1104:	0e 94 32 08 	call	0x1064	; 0x1064 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
    1108:	9c 01       	movw	r18, r24

// Appends encoded byte in b msbit first plus trailing even parity bit (9 bits total)
// to the byte stream being created by FHT8VCreate200usBitStreamBptr.
static uint8_t *_FHT8VCreate200usAppendByteEP(uint8_t *bptr, const uint8_t b)
  {
  for(uint8_t mask = 0x80; mask != 0; mask >>= 1)
    110a:	06 95       	lsr	r16
    110c:	21 96       	adiw	r28, 0x01	; 1
    110e:	c8 30       	cpi	r28, 0x08	; 8
    1110:	d1 05       	cpc	r29, r1
    1112:	79 f7       	brne	.-34     	; 0x10f2 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)+0x1a>
    { bptr = _FHT8VCreate200usAppendEncBit(bptr, 0 != (b & mask)); }
  return(_FHT8VCreate200usAppendEncBit(bptr, (bool) parity_even_bit(b))); // Append even parity bit.
    1114:	01 2e       	mov	r0, r17
    1116:	12 95       	swap	r17
    1118:	10 25       	eor	r17, r0
    111a:	01 2e       	mov	r0, r17
    111c:	16 95       	lsr	r17
    111e:	16 95       	lsr	r17
    1120:	10 25       	eor	r17, r0
    1122:	61 2f       	mov	r22, r17
    1124:	70 e0       	ldi	r23, 0x00	; 0
    1126:	6f 5f       	subi	r22, 0xFF	; 255
    1128:	7f 4f       	sbci	r23, 0xFF	; 255
    112a:	76 95       	lsr	r23
    112c:	67 95       	ror	r22
    112e:	61 70       	andi	r22, 0x01	; 1
    1130:	c9 01       	movw	r24, r18
    1132:	0e 94 32 08 	call	0x1064	; 0x1064 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
  }
    1136:	df 91       	pop	r29
    1138:	cf 91       	pop	r28
    113a:	1f 91       	pop	r17
    113c:	0f 91       	pop	r16
    113e:	ff 90       	pop	r15
    1140:	ef 90       	pop	r14
    1142:	08 95       	ret

00001144 <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>:
// On entry the populated FHT8V command struct is passed by pointer.
// On exit, the memory block starting at buffer contains the low-byte, msbit-first bit, 0xff-terminated TX sequence.
// The maximum and minimum possible encoded message sizes are 35 (all zero bytes) and 45 (all 0xff bytes) bytes long.
// Note that a buffer space of at least 46 bytes is needed to accommodate the longest-possible encoded message and terminator.
// Returns pointer to the terminating 0xff on exit.
uint8_t *FHT8VCreate200usBitStreamBptr(uint8_t *bptr, const fht8v_msg_t *command)
    1144:	ff 92       	push	r15
    1146:	0f 93       	push	r16
    1148:	1f 93       	push	r17
    114a:	dc 01       	movw	r26, r24
    114c:	8b 01       	movw	r16, r22
  {
  // Generate FHT8V preamble.
  // First 12 x 0 bits of preamble, pre-encoded as 6 x 0xcc bytes.
  *bptr++ = 0xcc;
    114e:	8c ec       	ldi	r24, 0xCC	; 204
    1150:	fd 01       	movw	r30, r26
    1152:	81 93       	st	Z+, r24
  *bptr++ = 0xcc;
    1154:	11 96       	adiw	r26, 0x01	; 1
    1156:	8c 93       	st	X, r24
    1158:	df 01       	movw	r26, r30
    115a:	11 96       	adiw	r26, 0x01	; 1
  *bptr++ = 0xcc;
    115c:	81 83       	std	Z+1, r24	; 0x01
    115e:	fd 01       	movw	r30, r26
    1160:	31 96       	adiw	r30, 0x01	; 1
  *bptr++ = 0xcc;
    1162:	11 96       	adiw	r26, 0x01	; 1
    1164:	8c 93       	st	X, r24
    1166:	df 01       	movw	r26, r30
    1168:	11 96       	adiw	r26, 0x01	; 1
  *bptr++ = 0xcc;
    116a:	81 83       	std	Z+1, r24	; 0x01
    116c:	fd 01       	movw	r30, r26
    116e:	31 96       	adiw	r30, 0x01	; 1
  *bptr++ = 0xcc;
    1170:	11 96       	adiw	r26, 0x01	; 1
    1172:	8c 93       	st	X, r24
  *bptr = (uint8_t) ~0U; // Initialise for _FHT8VCreate200usAppendEncBit routine.
    1174:	ff 24       	eor	r15, r15
    1176:	fa 94       	dec	r15
    1178:	f1 82       	std	Z+1, r15	; 0x01
  // Push remaining 1 of preamble.
  bptr = _FHT8VCreate200usAppendEncBit(bptr, true); // Encode 1.
    117a:	cf 01       	movw	r24, r30
    117c:	01 96       	adiw	r24, 0x01	; 1
    117e:	61 e0       	ldi	r22, 0x01	; 1
    1180:	0e 94 32 08 	call	0x1064	; 0x1064 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>

  // Generate body.
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->hc1);
    1184:	f8 01       	movw	r30, r16
    1186:	60 81       	ld	r22, Z
    1188:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->hc2);
    118c:	f8 01       	movw	r30, r16
    118e:	61 81       	ldd	r22, Z+1	; 0x01
    1190:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
#ifdef FHT8V_ADR_USED
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->address);
#else
  bptr = _FHT8VCreate200usAppendByteEP(bptr, 0); // Default/broadcast.  TODO: could possibly be further optimised to send 0 value more efficiently.
    1194:	60 e0       	ldi	r22, 0x00	; 0
    1196:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
#endif
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->command);
    119a:	f8 01       	movw	r30, r16
    119c:	62 81       	ldd	r22, Z+2	; 0x02
    119e:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
  bptr = _FHT8VCreate200usAppendByteEP(bptr, command->extension);
    11a2:	f8 01       	movw	r30, r16
    11a4:	63 81       	ldd	r22, Z+3	; 0x03
    11a6:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>
#ifdef FHT8V_ADR_USED
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + command->address + command->command + command->extension;
#else
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + command->command + command->extension;
#endif
  bptr = _FHT8VCreate200usAppendByteEP(bptr, checksum);
    11aa:	f8 01       	movw	r30, r16
    11ac:	60 81       	ld	r22, Z
    11ae:	21 81       	ldd	r18, Z+1	; 0x01
    11b0:	62 0f       	add	r22, r18
    11b2:	64 5f       	subi	r22, 0xF4	; 244
    11b4:	22 81       	ldd	r18, Z+2	; 0x02
    11b6:	62 0f       	add	r22, r18
    11b8:	23 81       	ldd	r18, Z+3	; 0x03
    11ba:	62 0f       	add	r22, r18
    11bc:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <_FHT8VCreate200usAppendByteEP(unsigned char*, unsigned char)>

  // Generate trailer.
  // Append 0 bit for trailer.
  bptr = _FHT8VCreate200usAppendEncBit(bptr, false);
    11c0:	60 e0       	ldi	r22, 0x00	; 0
    11c2:	0e 94 32 08 	call	0x1064	; 0x1064 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
  // Append extra 0 bits to ensure that final required bits are flushed out.
  bptr = _FHT8VCreate200usAppendEncBit(bptr, false);
    11c6:	60 e0       	ldi	r22, 0x00	; 0
    11c8:	0e 94 32 08 	call	0x1064	; 0x1064 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
  bptr = _FHT8VCreate200usAppendEncBit(bptr, false);
    11cc:	60 e0       	ldi	r22, 0x00	; 0
    11ce:	0e 94 32 08 	call	0x1064	; 0x1064 <_FHT8VCreate200usAppendEncBit(unsigned char*, bool)>
    11d2:	fc 01       	movw	r30, r24
  *bptr = (uint8_t)0xff; // Terminate TX bytes.
    11d4:	f0 82       	st	Z, r15
  return(bptr);
  }
    11d6:	1f 91       	pop	r17
    11d8:	0f 91       	pop	r16
    11da:	ff 90       	pop	r15
    11dc:	08 95       	ret

000011de <FHT8VGetHC1()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    11de:	f9 99       	sbic	0x1f, 1	; 31
    11e0:	fe cf       	rjmp	.-4      	; 0x11de <FHT8VGetHC1()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    11e2:	80 e1       	ldi	r24, 0x10	; 16
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	92 bd       	out	0x22, r25	; 34
    11e8:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    11ea:	f8 9a       	sbi	0x1f, 0	; 31
    11ec:	80 b5       	in	r24, 0x20	; 32
// Set (non-volatile) HC1 and HC2 for single/primary FHT8V wireless valve under control.
void FHT8VSetHC1(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC1, hc); }
void FHT8VSetHC2(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC2, hc); }

// Get (non-volatile) HC1 and HC2 for single/primary FHT8V wireless valve under control (will be 0xff until set).
uint8_t FHT8VGetHC1() { return(eeprom_read_byte((uint8_t*)EE_START_FHT8V_HC1)); }
    11ee:	08 95       	ret

000011f0 <FHT8VGetHC2()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    11f0:	f9 99       	sbic	0x1f, 1	; 31
    11f2:	fe cf       	rjmp	.-4      	; 0x11f0 <FHT8VGetHC2()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    11f4:	81 e1       	ldi	r24, 0x11	; 17
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	92 bd       	out	0x22, r25	; 34
    11fa:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    11fc:	f8 9a       	sbi	0x1f, 0	; 31
    11fe:	80 b5       	in	r24, 0x20	; 32
uint8_t FHT8VGetHC2() { return(eeprom_read_byte((uint8_t*)EE_START_FHT8V_HC2)); }
    1200:	08 95       	ret

00001202 <isSyncedWithFHT8V()>:
  }

// True once/while this node is synced with and controlling the target FHT8V valve; initially false.
static bool syncedWithFHT8V;
#ifndef IGNORE_FHT_SYNC
bool isSyncedWithFHT8V() { return(syncedWithFHT8V); }
    1202:	80 91 7a 01 	lds	r24, 0x017A
    1206:	08 95       	ret

00001208 <isControlledValveOpen()>:
#endif


// True if FHT8V valve is believed to be open under instruction from this system; false if not in sync.
static bool FHT8V_isValveOpen;
bool getFHT8V_isValveOpen() { return(syncedWithFHT8V && FHT8V_isValveOpen); }
    1208:	80 91 7a 01 	lds	r24, 0x017A
    120c:	88 23       	and	r24, r24
    120e:	21 f0       	breq	.+8      	; 0x1218 <isControlledValveOpen()+0x10>
    1210:	80 91 b4 01 	lds	r24, 0x01B4
    1214:	81 11       	cpse	r24, r1
    1216:	81 e0       	ldi	r24, 0x01	; 1
// GLOBAL NOTION OF CONTROLLED VALVE STATE PROVIDED HERE
// True iff the valve(s) (if any) controlled by this unit are really open.
// This waits until, for example, an ACK where appropriate, or at least the command has been sent.
// This also implies open to DEFAULT_MIN_VALVE_PC_REALLY_OPEN or equivalent.
// Must be exectly one definition supplied at link time.
bool isControlledValveOpen() { return(getFHT8V_isValveOpen()); }
    1218:	08 95       	ret

0000121a <FHT8VSyncAndTXReset()>:
//   FHT8V_isValveOpen (bit, true if this node has last sent command to open valve)
//   syncStateFHT8V (byte, internal)
//   halfSecondsToNextFHT8VTX (byte).
void FHT8VSyncAndTXReset()
  {
  syncedWithFHT8V = false;
    121a:	10 92 7a 01 	sts	0x017A, r1
  syncStateFHT8V = 0;
    121e:	10 92 7c 01 	sts	0x017C, r1
  halfSecondsToNextFHT8VTX = 0;
    1222:	10 92 7b 01 	sts	0x017B, r1
  FHT8V_isValveOpen = false;
    1226:	10 92 b4 01 	sts	0x01B4, r1
  }
    122a:	08 95       	ret

0000122c <FHT8VCallForHeatHeardGetAndClear()>:
  }

// Atomically returns and clears one housecode calling for heat heard since last call, or ~0 if none.
uint16_t FHT8VCallForHeatHeardGetAndClear()
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    122c:	4f b7       	in	r20, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    122e:	f8 94       	cli
    {
    const uint16_t result = lastCallForHeatHC;
    1230:	20 91 02 01 	lds	r18, 0x0102
    1234:	30 91 03 01 	lds	r19, 0x0103
    lastCallForHeatHC = ~0;
    1238:	8f ef       	ldi	r24, 0xFF	; 255
    123a:	9f ef       	ldi	r25, 0xFF	; 255
    123c:	90 93 03 01 	sts	0x0103, r25
    1240:	80 93 02 01 	sts	0x0102, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1244:	4f bf       	out	0x3f, r20	; 63
    return(result);
    }
  }
    1246:	c9 01       	movw	r24, r18
    1248:	08 95       	ret

0000124a <FHT8VLastRXErrGetAndClear()>:

// Atomically returns and clears last (FHT8V) RX error code, or 0 if none.
uint8_t FHT8VLastRXErrGetAndClear()
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    124a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    124c:	f8 94       	cli
    {
    const uint8_t result = lastRXerrno;
    124e:	80 91 40 01 	lds	r24, 0x0140
    lastRXerrno = 0;
    1252:	10 92 40 01 	sts	0x0140, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1256:	9f bf       	out	0x3f, r25	; 63
    return(result);
    }
  }
    1258:	08 95       	ret

0000125a <StopEavesdropOnFHT8V(bool)>:
// Stop listening out for remote TRVs calling for heat iff currently eavesdropping, else does nothing.
// Puts radio in standby mode.
// DOES NOT clear flags which indicate that a call for heat has been heard.
void StopEavesdropOnFHT8V(bool force)
  {
  if(!force && !eavesdropping) { return; }
    125a:	88 23       	and	r24, r24
    125c:	21 f4       	brne	.+8      	; 0x1266 <StopEavesdropOnFHT8V(bool)+0xc>
    125e:	80 91 41 01 	lds	r24, 0x0141
    1262:	88 23       	and	r24, r24
    1264:	21 f0       	breq	.+8      	; 0x126e <StopEavesdropOnFHT8V(bool)+0x14>
  eavesdropping = false;
    1266:	10 92 41 01 	sts	0x0141, r1
  RFM22ModeStandbyAndClearState();
    126a:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <RFM22ModeStandbyAndClearState()>
    126e:	08 95       	ret

00001270 <_SetupRFM22ToEavesdropOnFHT8V()>:
static void setLastRXErr(const uint8_t err) { ATOMIC_BLOCK (ATOMIC_RESTORESTATE) { lastRXerrno = err; } }


static void _SetupRFM22ToEavesdropOnFHT8V()
  {
  RFM22ModeStandbyAndClearState();
    1270:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <RFM22ModeStandbyAndClearState()>
  RFM22SetUpRX(MIN_FHT8V_200US_BIT_STREAM_BUF_SIZE, true, true); // Set to RX longest-possible valid FS20 encoded frame.
    1274:	8e e2       	ldi	r24, 0x2E	; 46
    1276:	61 e0       	ldi	r22, 0x01	; 1
    1278:	41 e0       	ldi	r20, 0x01	; 1
    127a:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <RFM22SetUpRX(unsigned char, bool, bool)>
#error Board revision not defined.
#endif
#if V0p2_REV > 0
// TODO: hook into interrupts?
#endif
  }
    127e:	08 95       	ret

00001280 <SetupToEavesdropOnFHT8V(bool)>:
// Only done if in central hub mode.
// May set up interrupts/handlers.
// Does NOT clear flags indicating receipt of call for heat for example.
void SetupToEavesdropOnFHT8V(bool force)
  {
  if(!force && eavesdropping) { return; } // Already eavesdropping.
    1280:	88 23       	and	r24, r24
    1282:	21 f4       	brne	.+8      	; 0x128c <SetupToEavesdropOnFHT8V(bool)+0xc>
    1284:	80 91 41 01 	lds	r24, 0x0141
    1288:	88 23       	and	r24, r24
    128a:	29 f4       	brne	.+10     	; 0x1296 <SetupToEavesdropOnFHT8V(bool)+0x16>
  eavesdropping = true;
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	80 93 41 01 	sts	0x0141, r24
  _SetupRFM22ToEavesdropOnFHT8V();
    1292:	0e 94 38 09 	call	0x1270	; 0x1270 <_SetupRFM22ToEavesdropOnFHT8V()>
    1296:	08 95       	ret

00001298 <readOneBit(decode_state_t*)>:
  } decode_state_t;

// Decode bit pattern 1100 as 0, 111000 as 1.
// Returns 1 or 0 for the bit decoded, else marks the state as failed.
// Reads two bits at a time, MSB to LSB, advancing the byte pointer if necessary.
static uint8_t readOneBit(decode_state_t *const state)
    1298:	cf 93       	push	r28
    129a:	df 93       	push	r29
    129c:	ec 01       	movw	r28, r24
  {
  if(state->bitStream > state->lastByte) { state->failed = true; } // Stop if off the buffer end.
    129e:	28 81       	ld	r18, Y
    12a0:	39 81       	ldd	r19, Y+1	; 0x01
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	9b 81       	ldd	r25, Y+3	; 0x03
    12a6:	82 17       	cp	r24, r18
    12a8:	93 07       	cpc	r25, r19
    12aa:	10 f4       	brcc	.+4      	; 0x12b0 <readOneBit(decode_state_t*)+0x18>
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	8d 83       	std	Y+5, r24	; 0x05
  if(state->failed) { return(0); } // Refuse to do anything further once decoding has failed.
    12b0:	8d 81       	ldd	r24, Y+5	; 0x05
    12b2:	88 23       	and	r24, r24
    12b4:	09 f0       	breq	.+2      	; 0x12b8 <readOneBit(decode_state_t*)+0x20>
    12b6:	7e c0       	rjmp	.+252    	; 0x13b4 <readOneBit(decode_state_t*)+0x11c>

  if(0 == state->mask) { state->mask = 0xc0; } // Special treatment of 0 as equivalent to 0xc0 on entry.
    12b8:	8c 81       	ldd	r24, Y+4	; 0x04
    12ba:	88 23       	and	r24, r24
    12bc:	11 f4       	brne	.+4      	; 0x12c2 <readOneBit(decode_state_t*)+0x2a>
    12be:	80 ec       	ldi	r24, 0xC0	; 192
    12c0:	8c 83       	std	Y+4, r24	; 0x04
#if defined(DEBUG)
  if((state->mask != 0xc0) && (state->mask != 0x30) && (state->mask != 0xc) && (state->mask != 3)) { panic(); }
    12c2:	8c 81       	ldd	r24, Y+4	; 0x04
    12c4:	80 3c       	cpi	r24, 0xC0	; 192
    12c6:	41 f0       	breq	.+16     	; 0x12d8 <readOneBit(decode_state_t*)+0x40>
    12c8:	80 33       	cpi	r24, 0x30	; 48
    12ca:	31 f0       	breq	.+12     	; 0x12d8 <readOneBit(decode_state_t*)+0x40>
    12cc:	8c 30       	cpi	r24, 0x0C	; 12
    12ce:	21 f0       	breq	.+8      	; 0x12d8 <readOneBit(decode_state_t*)+0x40>
    12d0:	83 30       	cpi	r24, 0x03	; 3
    12d2:	11 f0       	breq	.+4      	; 0x12d8 <readOneBit(decode_state_t*)+0x40>
    12d4:	0e 94 06 28 	call	0x500c	; 0x500c <panic()>
#endif

  // First two bits read must be 11.
  if(state->mask != (state->mask & *(state->bitStream)))
    12d8:	8c 81       	ldd	r24, Y+4	; 0x04
    12da:	28 2f       	mov	r18, r24
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	e8 81       	ld	r30, Y
    12e0:	f9 81       	ldd	r31, Y+1	; 0x01
    12e2:	80 81       	ld	r24, Z
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	82 23       	and	r24, r18
    12e8:	93 23       	and	r25, r19
    12ea:	28 17       	cp	r18, r24
    12ec:	39 07       	cpc	r19, r25
    12ee:	09 f0       	breq	.+2      	; 0x12f2 <readOneBit(decode_state_t*)+0x5a>
    12f0:	51 c0       	rjmp	.+162    	; 0x1394 <readOneBit(decode_state_t*)+0xfc>
#endif
    state->failed = true; return(0);
    }

  // Advance the mask; if the mask becomes 0 (then 0xc0 again) then advance the byte pointer.
  if(0 == ((state->mask) >>= 2))
    12f2:	c9 01       	movw	r24, r18
    12f4:	95 95       	asr	r25
    12f6:	87 95       	ror	r24
    12f8:	95 95       	asr	r25
    12fa:	87 95       	ror	r24
    12fc:	8c 83       	std	Y+4, r24	; 0x04
    12fe:	88 23       	and	r24, r24
    1300:	61 f4       	brne	.+24     	; 0x131a <readOneBit(decode_state_t*)+0x82>
    {
    state->mask = 0xc0;
    1302:	80 ec       	ldi	r24, 0xC0	; 192
    1304:	8c 83       	std	Y+4, r24	; 0x04
    // If end of stream is encountered this is an error since more bits need to be read.
    if(++(state->bitStream) > state->lastByte) { state->failed = true; return(0); }
    1306:	9f 01       	movw	r18, r30
    1308:	2f 5f       	subi	r18, 0xFF	; 255
    130a:	3f 4f       	sbci	r19, 0xFF	; 255
    130c:	39 83       	std	Y+1, r19	; 0x01
    130e:	28 83       	st	Y, r18
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	9b 81       	ldd	r25, Y+3	; 0x03
    1314:	82 17       	cp	r24, r18
    1316:	93 07       	cpc	r25, r19
    1318:	e8 f1       	brcs	.+122    	; 0x1394 <readOneBit(decode_state_t*)+0xfc>
    }

  // Next two bits can be 00 to decode a zero,
  // or 10 (followed by 00) to decode a one.
  const uint8_t secondPair = (state->mask & *(state->bitStream));
    131a:	8c 81       	ldd	r24, Y+4	; 0x04
  switch(secondPair)
    131c:	e8 81       	ld	r30, Y
    131e:	f9 81       	ldd	r31, Y+1	; 0x01
    1320:	20 81       	ld	r18, Z
    1322:	28 23       	and	r18, r24
    1324:	28 30       	cpi	r18, 0x08	; 8
    1326:	c1 f0       	breq	.+48     	; 0x1358 <readOneBit(decode_state_t*)+0xc0>
    1328:	29 30       	cpi	r18, 0x09	; 9
    132a:	28 f4       	brcc	.+10     	; 0x1336 <readOneBit(decode_state_t*)+0x9e>
    132c:	22 23       	and	r18, r18
    132e:	41 f0       	breq	.+16     	; 0x1340 <readOneBit(decode_state_t*)+0xa8>
    1330:	22 30       	cpi	r18, 0x02	; 2
    1332:	81 f5       	brne	.+96     	; 0x1394 <readOneBit(decode_state_t*)+0xfc>
    1334:	11 c0       	rjmp	.+34     	; 0x1358 <readOneBit(decode_state_t*)+0xc0>
    1336:	20 32       	cpi	r18, 0x20	; 32
    1338:	79 f0       	breq	.+30     	; 0x1358 <readOneBit(decode_state_t*)+0xc0>
    133a:	20 38       	cpi	r18, 0x80	; 128
    133c:	59 f5       	brne	.+86     	; 0x1394 <readOneBit(decode_state_t*)+0xfc>
    133e:	0c c0       	rjmp	.+24     	; 0x1358 <readOneBit(decode_state_t*)+0xc0>
      {
#if 0 && defined(DEBUG)
      DEBUG_SERIAL_PRINTLN_FLASHSTRING("decoded 0");
#endif
      // Advance the mask; if the mask becomes 0 then advance the byte pointer.
      if(0 == ((state->mask) >>= 2)) { ++(state->bitStream); }
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	95 95       	asr	r25
    1344:	87 95       	ror	r24
    1346:	95 95       	asr	r25
    1348:	87 95       	ror	r24
    134a:	8c 83       	std	Y+4, r24	; 0x04
    134c:	88 23       	and	r24, r24
    134e:	91 f5       	brne	.+100    	; 0x13b4 <readOneBit(decode_state_t*)+0x11c>
    1350:	31 96       	adiw	r30, 0x01	; 1
    1352:	f9 83       	std	Y+1, r31	; 0x01
    1354:	e8 83       	st	Y, r30
    1356:	2f c0       	rjmp	.+94     	; 0x13b6 <readOneBit(decode_state_t*)+0x11e>
      state->failed = true; return(0);
      }
    }

  // Advance the mask; if the mask becomes 0 (then 0xc0 again) then advance the byte pointer.
  if(0 == ((state->mask) >>= 2))
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	95 95       	asr	r25
    135c:	87 95       	ror	r24
    135e:	95 95       	asr	r25
    1360:	87 95       	ror	r24
    1362:	8c 83       	std	Y+4, r24	; 0x04
    1364:	88 23       	and	r24, r24
    1366:	61 f4       	brne	.+24     	; 0x1380 <readOneBit(decode_state_t*)+0xe8>
    {
    state->mask = 0xc0;
    1368:	80 ec       	ldi	r24, 0xC0	; 192
    136a:	8c 83       	std	Y+4, r24	; 0x04
    // If end of stream is encountered this is an error since more bits need to be read.
    if(++(state->bitStream) > state->lastByte) { state->failed = true; return(0); }
    136c:	88 81       	ld	r24, Y
    136e:	99 81       	ldd	r25, Y+1	; 0x01
    1370:	01 96       	adiw	r24, 0x01	; 1
    1372:	99 83       	std	Y+1, r25	; 0x01
    1374:	88 83       	st	Y, r24
    1376:	2a 81       	ldd	r18, Y+2	; 0x02
    1378:	3b 81       	ldd	r19, Y+3	; 0x03
    137a:	28 17       	cp	r18, r24
    137c:	39 07       	cpc	r19, r25
    137e:	50 f0       	brcs	.+20     	; 0x1394 <readOneBit(decode_state_t*)+0xfc>
    }

  // Third pair of bits must be 00.
  if(0 != (state->mask & *(state->bitStream)))
    1380:	2c 81       	ldd	r18, Y+4	; 0x04
    1382:	e8 81       	ld	r30, Y
    1384:	f9 81       	ldd	r31, Y+1	; 0x01
    1386:	80 81       	ld	r24, Z
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	82 23       	and	r24, r18
    138e:	93 23       	and	r25, r19
    1390:	89 2b       	or	r24, r25
    1392:	19 f0       	breq	.+6      	; 0x139a <readOneBit(decode_state_t*)+0x102>
     {
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("trailing 00 corrupt");
#endif
    state->failed = true; return(0);
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	8d 83       	std	Y+5, r24	; 0x05
    1398:	0d c0       	rjmp	.+26     	; 0x13b4 <readOneBit(decode_state_t*)+0x11c>
    }    

  // Advance the mask; if the mask becomes 0 then advance the byte pointer.
  if(0 == ((state->mask) >>= 2)) { ++(state->bitStream); }
    139a:	c9 01       	movw	r24, r18
    139c:	95 95       	asr	r25
    139e:	87 95       	ror	r24
    13a0:	95 95       	asr	r25
    13a2:	87 95       	ror	r24
    13a4:	8c 83       	std	Y+4, r24	; 0x04
    13a6:	88 23       	and	r24, r24
    13a8:	19 f4       	brne	.+6      	; 0x13b0 <readOneBit(decode_state_t*)+0x118>
    13aa:	31 96       	adiw	r30, 0x01	; 1
    13ac:	f9 83       	std	Y+1, r31	; 0x01
    13ae:	e8 83       	st	Y, r30
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	01 c0       	rjmp	.+2      	; 0x13b6 <readOneBit(decode_state_t*)+0x11e>
    13b4:	80 e0       	ldi	r24, 0x00	; 0
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("decoded 1");
#endif
  return(1); // Decoded a 1.
  }
    13b6:	df 91       	pop	r29
    13b8:	cf 91       	pop	r28
    13ba:	08 95       	ret

000013bc <readOneByteWithParity(decode_state_t*)>:

// Decodes a series of encoded bits plus parity (and checks the parity, failing if wrong).
// Returns the byte decoded, else marks the state as failed.
static uint8_t readOneByteWithParity(decode_state_t *const state)
    13bc:	ef 92       	push	r14
    13be:	ff 92       	push	r15
    13c0:	0f 93       	push	r16
    13c2:	1f 93       	push	r17
    13c4:	cf 93       	push	r28
    13c6:	df 93       	push	r29
    13c8:	7c 01       	movw	r14, r24
  {
  if(state->failed) { return(0); } // Refuse to do anything further once decoding has failed.
    13ca:	fc 01       	movw	r30, r24
    13cc:	85 81       	ldd	r24, Z+5	; 0x05
    13ce:	88 23       	and	r24, r24
    13d0:	11 f0       	breq	.+4      	; 0x13d6 <readOneByteWithParity(decode_state_t*)+0x1a>
    13d2:	10 e0       	ldi	r17, 0x00	; 0
    13d4:	1b c0       	rjmp	.+54     	; 0x140c <readOneByteWithParity(decode_state_t*)+0x50>

  // Read first bit specially...
  const uint8_t b7 = readOneBit(state); 
    13d6:	c7 01       	movw	r24, r14
    13d8:	0e 94 4c 09 	call	0x1298	; 0x1298 <readOneBit(decode_state_t*)>
    13dc:	18 2f       	mov	r17, r24
    13de:	08 2f       	mov	r16, r24
    13e0:	c7 e0       	ldi	r28, 0x07	; 7
    13e2:	d0 e0       	ldi	r29, 0x00	; 0
    13e4:	06 c0       	rjmp	.+12     	; 0x13f2 <readOneByteWithParity(decode_state_t*)+0x36>
  uint8_t result = b7;
  uint8_t parity = b7;
  // Then remaining 7 bits...
  for(int i = 7; --i >= 0; )
    {
    const uint8_t bit = readOneBit(state);
    13e6:	c7 01       	movw	r24, r14
    13e8:	0e 94 4c 09 	call	0x1298	; 0x1298 <readOneBit(decode_state_t*)>
    parity ^= bit;
    13ec:	08 27       	eor	r16, r24
    result = (result << 1) | bit;
    13ee:	11 0f       	add	r17, r17
    13f0:	18 2b       	or	r17, r24
  // Read first bit specially...
  const uint8_t b7 = readOneBit(state); 
  uint8_t result = b7;
  uint8_t parity = b7;
  // Then remaining 7 bits...
  for(int i = 7; --i >= 0; )
    13f2:	21 97       	sbiw	r28, 0x01	; 1
    13f4:	ff ef       	ldi	r31, 0xFF	; 255
    13f6:	cf 3f       	cpi	r28, 0xFF	; 255
    13f8:	df 07       	cpc	r29, r31
    13fa:	a9 f7       	brne	.-22     	; 0x13e6 <readOneByteWithParity(decode_state_t*)+0x2a>
    const uint8_t bit = readOneBit(state);
    parity ^= bit;
    result = (result << 1) | bit;
    }
  // Then get parity bit and check.
  if(parity != readOneBit(state))
    13fc:	c7 01       	movw	r24, r14
    13fe:	0e 94 4c 09 	call	0x1298	; 0x1298 <readOneBit(decode_state_t*)>
    1402:	08 17       	cp	r16, r24
    1404:	19 f0       	breq	.+6      	; 0x140c <readOneByteWithParity(decode_state_t*)+0x50>
    {
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("bad parity");
#endif
    state->failed = true;
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	f7 01       	movw	r30, r14
    140a:	85 83       	std	Z+5, r24	; 0x05
    }
  return(result);
  }
    140c:	81 2f       	mov	r24, r17
    140e:	df 91       	pop	r29
    1410:	cf 91       	pop	r28
    1412:	1f 91       	pop	r17
    1414:	0f 91       	pop	r16
    1416:	ff 90       	pop	r15
    1418:	ef 90       	pop	r14
    141a:	08 95       	ret

0000141c <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)>:

// Decode raw bitstream into non-null command structure passed in; returns true if successful.
// Will return true if OK, else false if anything obviously invalid is detected such as failing parity or checksum.
// Finds and discards leading encoded 1 and trailing 0.
// Returns NULL on failure, else pointer to next full byte after last decoded.
uint8_t const *FHT8VDecodeBitStream(uint8_t const *bitStream, uint8_t const *lastByte, fht8v_msg_t *command)
    141c:	df 92       	push	r13
    141e:	ef 92       	push	r14
    1420:	ff 92       	push	r15
    1422:	0f 93       	push	r16
    1424:	1f 93       	push	r17
    1426:	df 93       	push	r29
    1428:	cf 93       	push	r28
    142a:	00 d0       	rcall	.+0      	; 0x142c <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x10>
    142c:	00 d0       	rcall	.+0      	; 0x142e <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x12>
    142e:	00 d0       	rcall	.+0      	; 0x1430 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x14>
    1430:	cd b7       	in	r28, 0x3d	; 61
    1432:	de b7       	in	r29, 0x3e	; 62
    1434:	8a 01       	movw	r16, r20
  {
  decode_state_t state;
  state.bitStream = bitStream;
    1436:	9a 83       	std	Y+2, r25	; 0x02
    1438:	89 83       	std	Y+1, r24	; 0x01
  state.lastByte = lastByte;
    143a:	7c 83       	std	Y+4, r23	; 0x04
    143c:	6b 83       	std	Y+3, r22	; 0x03
  state.mask = 0;
    143e:	1d 82       	std	Y+5, r1	; 0x05
  state.failed = false;
    1440:	1e 82       	std	Y+6, r1	; 0x06
      }
  DEBUG_SERIAL_PRINTLN();
#endif

  // Find and absorb the leading encoded '1', else quit if not found by end of stream.
  while(0 == readOneBit(&state)) { if(state.failed) { return(NULL); } }
    1442:	7e 01       	movw	r14, r28
    1444:	08 94       	sec
    1446:	e1 1c       	adc	r14, r1
    1448:	f1 1c       	adc	r15, r1
    144a:	03 c0       	rjmp	.+6      	; 0x1452 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x36>
    144c:	8e 81       	ldd	r24, Y+6	; 0x06
    144e:	88 23       	and	r24, r24
    1450:	e9 f5       	brne	.+122    	; 0x14cc <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb0>
    1452:	c7 01       	movw	r24, r14
    1454:	0e 94 4c 09 	call	0x1298	; 0x1298 <readOneBit(decode_state_t*)>
    1458:	88 23       	and	r24, r24
    145a:	c1 f3       	breq	.-16     	; 0x144c <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0x30>
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("Read leading 1");
#endif

  command->hc1 = readOneByteWithParity(&state);
    145c:	c7 01       	movw	r24, r14
    145e:	0e 94 de 09 	call	0x13bc	; 0x13bc <readOneByteWithParity(decode_state_t*)>
    1462:	f8 01       	movw	r30, r16
    1464:	80 83       	st	Z, r24
  command->hc2 = readOneByteWithParity(&state);
    1466:	c7 01       	movw	r24, r14
    1468:	0e 94 de 09 	call	0x13bc	; 0x13bc <readOneByteWithParity(decode_state_t*)>
    146c:	f8 01       	movw	r30, r16
    146e:	81 83       	std	Z+1, r24	; 0x01
#ifdef FHT8V_ADR_USED
  command->address = readOneByteWithParity(&state);
#else
  const uint8_t address = readOneByteWithParity(&state);
    1470:	c7 01       	movw	r24, r14
    1472:	0e 94 de 09 	call	0x13bc	; 0x13bc <readOneByteWithParity(decode_state_t*)>
    1476:	d8 2e       	mov	r13, r24
#endif
  command->command = readOneByteWithParity(&state);
    1478:	c7 01       	movw	r24, r14
    147a:	0e 94 de 09 	call	0x13bc	; 0x13bc <readOneByteWithParity(decode_state_t*)>
    147e:	f8 01       	movw	r30, r16
    1480:	82 83       	std	Z+2, r24	; 0x02
  command->extension = readOneByteWithParity(&state);
    1482:	c7 01       	movw	r24, r14
    1484:	0e 94 de 09 	call	0x13bc	; 0x13bc <readOneByteWithParity(decode_state_t*)>
    1488:	f8 01       	movw	r30, r16
    148a:	83 83       	std	Z+3, r24	; 0x03
  const uint8_t checksumRead = readOneByteWithParity(&state);
    148c:	c7 01       	movw	r24, r14
    148e:	0e 94 de 09 	call	0x13bc	; 0x13bc <readOneByteWithParity(decode_state_t*)>
    1492:	28 2f       	mov	r18, r24
  if(state.failed)
    1494:	8e 81       	ldd	r24, Y+6	; 0x06
    1496:	88 23       	and	r24, r24
    1498:	c9 f4       	brne	.+50     	; 0x14cc <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb0>
#ifdef FHT8V_ADR_USED
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + command->address + command->command + command->extension;
#else
  const uint8_t checksum = 0xc + command->hc1 + command->hc2 + address + command->command + command->extension;
#endif
  if(checksum != checksumRead)
    149a:	f8 01       	movw	r30, r16
    149c:	80 81       	ld	r24, Z
    149e:	91 81       	ldd	r25, Z+1	; 0x01
    14a0:	89 0f       	add	r24, r25
    14a2:	84 5f       	subi	r24, 0xF4	; 244
    14a4:	92 81       	ldd	r25, Z+2	; 0x02
    14a6:	89 0f       	add	r24, r25
    14a8:	93 81       	ldd	r25, Z+3	; 0x03
    14aa:	89 0f       	add	r24, r25
    14ac:	8d 0d       	add	r24, r13
    14ae:	82 17       	cp	r24, r18
    14b0:	69 f4       	brne	.+26     	; 0x14cc <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb0>
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("Checksum OK");
    }
#endif

  // Check the trailing encoded '0'.
  if(0 != readOneBit(&state))
    14b2:	c7 01       	movw	r24, r14
    14b4:	0e 94 4c 09 	call	0x1298	; 0x1298 <readOneBit(decode_state_t*)>
    14b8:	88 23       	and	r24, r24
    14ba:	41 f4       	brne	.+16     	; 0x14cc <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb0>
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("Read of trailing 0 failed");
#endif
    state.failed = true; return(NULL);
    }
  if(state.failed) { return(NULL); }
    14bc:	8e 81       	ldd	r24, Y+6	; 0x06
    14be:	88 23       	and	r24, r24
    14c0:	29 f4       	brne	.+10     	; 0x14cc <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb0>
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("Read entire message");
#endif
  // Return pointer to where any trailing data may be
  // in next byte beyond end of FHT8V frame.
  return(state.bitStream + 1);
    14c2:	29 81       	ldd	r18, Y+1	; 0x01
    14c4:	3a 81       	ldd	r19, Y+2	; 0x02
    14c6:	2f 5f       	subi	r18, 0xFF	; 255
    14c8:	3f 4f       	sbci	r19, 0xFF	; 255
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)+0xb4>
    14cc:	20 e0       	ldi	r18, 0x00	; 0
    14ce:	30 e0       	ldi	r19, 0x00	; 0
  }
    14d0:	c9 01       	movw	r24, r18
    14d2:	26 96       	adiw	r28, 0x06	; 6
    14d4:	0f b6       	in	r0, 0x3f	; 63
    14d6:	f8 94       	cli
    14d8:	de bf       	out	0x3e, r29	; 62
    14da:	0f be       	out	0x3f, r0	; 63
    14dc:	cd bf       	out	0x3d, r28	; 61
    14de:	cf 91       	pop	r28
    14e0:	df 91       	pop	r29
    14e2:	1f 91       	pop	r17
    14e4:	0f 91       	pop	r16
    14e6:	ff 90       	pop	r15
    14e8:	ef 90       	pop	r14
    14ea:	df 90       	pop	r13
    14ec:	08 95       	ret

000014ee <FHT8VCallForHeatPoll()>:
// If used instead of an interrupt then should probably called at least about once every 100ms.
// Returns true if any useful activity/progress was detected by this call (not necessarily a full valid call-for-heat).
// Upon receipt of a valid call-for-heat this comes out of eavesdropping mode to save energy.
// If a problem is encountered this restarts the eavesdropping process.
// Does not block nor take significant time.
bool FHT8VCallForHeatPoll()
    14ee:	af 92       	push	r10
    14f0:	bf 92       	push	r11
    14f2:	cf 92       	push	r12
    14f4:	df 92       	push	r13
    14f6:	ef 92       	push	r14
    14f8:	ff 92       	push	r15
    14fa:	0f 93       	push	r16
    14fc:	1f 93       	push	r17
    14fe:	df 93       	push	r29
    1500:	cf 93       	push	r28
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62
    1506:	2d 97       	sbiw	r28, 0x0d	; 13
    1508:	0f b6       	in	r0, 0x3f	; 63
    150a:	f8 94       	cli
    150c:	de bf       	out	0x3e, r29	; 62
    150e:	0f be       	out	0x3f, r0	; 63
    1510:	cd bf       	out	0x3d, r28	; 61
  {
  // Do nothing unless already in eavesdropping mode.
  if(!eavesdropping) { return(false); }
    1512:	80 91 41 01 	lds	r24, 0x0141
    1516:	88 23       	and	r24, r24
    1518:	09 f4       	brne	.+2      	; 0x151c <FHT8VCallForHeatPoll()+0x2e>
    151a:	be c0       	rjmp	.+380    	; 0x1698 <FHT8VCallForHeatPoll()+0x1aa>
  if(FHT8VCallForHeatHeard()) { return(false); }
#endif

#if defined(PIN_RFM_NIRQ)
  // If nIRQ line is available then abort if it is not active (and thus spare the SPI bus).
  if(fastDigitalRead(PIN_RFM_NIRQ) != LOW) { return(false); }
    151c:	19 99       	sbic	0x03, 1	; 3
    151e:	bc c0       	rjmp	.+376    	; 0x1698 <FHT8VCallForHeatPoll()+0x1aa>
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("RX IRQ");
#endif
#endif

  const uint16_t status = RFM22ReadStatusBoth(); // reg1:reg2, on V0.08 PICAXE tempB2:SPI_DATAB.
    1520:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <RFM22ReadStatusBoth()>
    1524:	8c 01       	movw	r16, r24

  if(status & 0x1000) // Received frame.
    1526:	94 ff       	sbrs	r25, 4
    1528:	a2 c0       	rjmp	.+324    	; 0x166e <FHT8VCallForHeatPoll()+0x180>
    {
// Ensure that data from a previous frame is not trivially re-read by clearing the buffer explicitly.
//    for(uint8_t *p = FHT8VRXHubArea + FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE; --p >= FHT8VRXHubArea; )
//      { *p = 0; }
    memset(FHT8VRXHubArea, 0xff, sizeof(FHT8VRXHubArea));
    152a:	82 e4       	ldi	r24, 0x42	; 66
    152c:	91 e0       	ldi	r25, 0x01	; 1
    152e:	6f ef       	ldi	r22, 0xFF	; 255
    1530:	70 e0       	ldi	r23, 0x00	; 0
    1532:	47 e3       	ldi	r20, 0x37	; 55
    1534:	50 e0       	ldi	r21, 0x00	; 0
    1536:	0e 94 cc 03 	call	0x798	; 0x798 <memset>
    // Attempt to read the entire frame.
    RFM22RXFIFO(FHT8VRXHubArea, sizeof(FHT8VRXHubArea));
    153a:	82 e4       	ldi	r24, 0x42	; 66
    153c:	91 e0       	ldi	r25, 0x01	; 1
    153e:	67 e3       	ldi	r22, 0x37	; 55
    1540:	0e 94 e2 15 	call	0x2bc4	; 0x2bc4 <RFM22RXFIFO(unsigned char*, unsigned char)>
    1544:	ee 24       	eor	r14, r14
    1546:	ff 24       	eor	r15, r15
    1548:	de 2c       	mov	r13, r14
    uint8_t pos; // Current byte position in RX buffer...
    // Validate FHT8V premable (zeros encoded as up to 6x 0xcc bytes), else abort/restart.
    // Insist on at least a couple of bytes of valid premable being present.
    for(pos = 0; pos < 6; ++pos)
      {
      const uint8_t b = FHT8VRXHubArea[pos];
    154a:	f7 01       	movw	r30, r14
    154c:	ee 5b       	subi	r30, 0xBE	; 190
    154e:	fe 4f       	sbci	r31, 0xFE	; 254
    1550:	e0 81       	ld	r30, Z
      if(0xcc != b)
    1552:	ec 3c       	cpi	r30, 0xCC	; 204
    1554:	89 f1       	breq	.+98     	; 0x15b8 <FHT8VCallForHeatPoll()+0xca>
    1556:	ce 2c       	mov	r12, r14
        {
        if(MESSAGING_FULL_STATS_FLAGS_HEADER_MSBS == (b & MESSAGING_FULL_STATS_FLAGS_HEADER_MASK))
    1558:	e0 7e       	andi	r30, 0xE0	; 224
    155a:	e0 36       	cpi	r30, 0x60	; 96
    155c:	d9 f4       	brne	.+54     	; 0x1594 <FHT8VCallForHeatPoll()+0xa6>
          {
          // May be stats frame, so attempt to decode...
          FullStatsMessageCore_t content;
          // (TODO: should reject non-secure messages when expecting secure ones...)
          const uint8_t *msg = decodeFullStatsMessageCore(FHT8VRXHubArea, sizeof(FHT8VRXHubArea)-pos, stTXalwaysAll, false, &content);
    155e:	67 e3       	ldi	r22, 0x37	; 55
    1560:	6e 19       	sub	r22, r14
    1562:	77 e0       	ldi	r23, 0x07	; 7
    1564:	a7 2e       	mov	r10, r23
    1566:	b1 2c       	mov	r11, r1
    1568:	ac 0e       	add	r10, r28
    156a:	bd 1e       	adc	r11, r29
    156c:	82 e4       	ldi	r24, 0x42	; 66
    156e:	91 e0       	ldi	r25, 0x01	; 1
    1570:	40 e0       	ldi	r20, 0x00	; 0
    1572:	50 e0       	ldi	r21, 0x00	; 0
    1574:	20 e0       	ldi	r18, 0x00	; 0
    1576:	85 01       	movw	r16, r10
    1578:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)>
          if(NULL != msg)
    157c:	89 2b       	or	r24, r25
    157e:	51 f0       	breq	.+20     	; 0x1594 <FHT8VCallForHeatPoll()+0xa6>
             {
             if(content.containsID)
    1580:	8f 81       	ldd	r24, Y+7	; 0x07
    1582:	80 ff       	sbrs	r24, 0
    1584:	04 c0       	rjmp	.+8      	; 0x158e <FHT8VCallForHeatPoll()+0xa0>
               DEBUG_SERIAL_PRINTFMT(content.id0, HEX);
               DEBUG_SERIAL_PRINT(' ');
               DEBUG_SERIAL_PRINTFMT(content.id1, HEX);
               DEBUG_SERIAL_PRINTLN();
#endif
               recordCoreStats(false, &content);
    1586:	80 e0       	ldi	r24, 0x00	; 0
    1588:	b5 01       	movw	r22, r10
    158a:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <recordCoreStats(bool, FullStatsMessageCore const*)>
               }
             _SetupRFM22ToEavesdropOnFHT8V(); // Reset/restart RX.
    158e:	0e 94 38 09 	call	0x1270	; 0x1270 <_SetupRFM22ToEavesdropOnFHT8V()>
    1592:	84 c0       	rjmp	.+264    	; 0x169c <FHT8VCallForHeatPoll()+0x1ae>
            seedRNG8(FHT8VRXHubArea[pos+1], FHT8VRXHubArea[pos+2], FHT8VRXHubArea[pos+3]); // Attempt to gather some entropy from RX noise. (TODO-302).
            }
#endif
          }

        if(pos < 2)
    1594:	21 e0       	ldi	r18, 0x01	; 1
    1596:	2c 15       	cp	r18, r12
    1598:	c0 f0       	brcs	.+48     	; 0x15ca <FHT8VCallForHeatPoll()+0xdc>
// Useful to assess the noise enviromentment.
static volatile uint8_t lastRXerrno;

// Atomically returns and clears last (FHT8V) RX error code, or 0 if none.
// Set with such codes as FHT8VRXErr_GENERIC; never set to zero.
static void setLastRXErr(const uint8_t err) { ATOMIC_BLOCK (ATOMIC_RESTORESTATE) { lastRXerrno = err; } }
    159a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    159c:	f8 94       	cli
    159e:	82 e0       	ldi	r24, 0x02	; 2
    15a0:	80 93 40 01 	sts	0x0140, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    15a4:	9f bf       	out	0x3f, r25	; 63
            DEBUG_SERIAL_PRINT_FLASHSTRING(" 0x");
            DEBUG_SERIAL_PRINTFMT(FHT8VRXHubArea[p], HEX);
            }
          DEBUG_SERIAL_PRINTLN();
#endif
          seedRNG8(FHT8VRXHubArea[pos], FHT8VRXHubArea[pos+2], FHT8VRXHubArea[pos+5]); // Attempt to gather some entropy from RX noise. (TODO-302).
    15a6:	f7 01       	movw	r30, r14
    15a8:	ee 5b       	subi	r30, 0xBE	; 190
    15aa:	fe 4f       	sbci	r31, 0xFE	; 254
    15ac:	80 81       	ld	r24, Z
    15ae:	62 81       	ldd	r22, Z+2	; 0x02
    15b0:	45 81       	ldd	r20, Z+5	; 0x05
    15b2:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <seedRNG8(unsigned char, unsigned char, unsigned char)>
    15b6:	6e c0       	rjmp	.+220    	; 0x1694 <FHT8VCallForHeatPoll()+0x1a6>
          _SetupRFM22ToEavesdropOnFHT8V(); // Reset/restart RX.
          return(false);
    15b8:	d3 94       	inc	r13
    15ba:	08 94       	sec
    15bc:	e1 1c       	adc	r14, r1
    15be:	f1 1c       	adc	r15, r1
    // Attempt to read the entire frame.
    RFM22RXFIFO(FHT8VRXHubArea, sizeof(FHT8VRXHubArea));
    uint8_t pos; // Current byte position in RX buffer...
    // Validate FHT8V premable (zeros encoded as up to 6x 0xcc bytes), else abort/restart.
    // Insist on at least a couple of bytes of valid premable being present.
    for(pos = 0; pos < 6; ++pos)
    15c0:	86 e0       	ldi	r24, 0x06	; 6
    15c2:	e8 16       	cp	r14, r24
    15c4:	f1 04       	cpc	r15, r1
    15c6:	09 f0       	breq	.+2      	; 0x15ca <FHT8VCallForHeatPoll()+0xdc>
    15c8:	bf cf       	rjmp	.-130    	; 0x1548 <FHT8VCallForHeatPoll()+0x5a>
        break; // If enough preamble has been seen, move on to the body.
        }
      }
    fht8v_msg_t command;
    uint8_t const *lastByte = FHT8VRXHubArea + FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE - 1;
    uint8_t const *trailer = FHT8VDecodeBitStream(FHT8VRXHubArea + pos, lastByte, &command);
    15ca:	8d 2d       	mov	r24, r13
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	8e 5b       	subi	r24, 0xBE	; 190
    15d0:	9e 4f       	sbci	r25, 0xFE	; 254
    15d2:	68 e7       	ldi	r22, 0x78	; 120
    15d4:	71 e0       	ldi	r23, 0x01	; 1
    15d6:	ae 01       	movw	r20, r28
    15d8:	4d 5f       	subi	r20, 0xFD	; 253
    15da:	5f 4f       	sbci	r21, 0xFF	; 255
    15dc:	0e 94 0e 0a 	call	0x141c	; 0x141c <FHT8VDecodeBitStream(unsigned char const*, unsigned char const*, fht8v_msg_t*)>
    15e0:	8c 01       	movw	r16, r24
    if(NULL != trailer)
    15e2:	00 97       	sbiw	r24, 0x00	; 0
    15e4:	09 f4       	brne	.+2      	; 0x15e8 <FHT8VCallForHeatPoll()+0xfa>
    15e6:	3f c0       	rjmp	.+126    	; 0x1666 <FHT8VCallForHeatPoll()+0x178>
      DEBUG_SERIAL_PRINTLN();
#endif

#if defined(SUPPORT_TEMP_TX) // Only look for the trailer if supported.
      // If whole FHT8V frame was OK then check if there is a valid stats trailer.  
      if(trailer + MESSAGING_TRAILING_MINIMAL_STATS_PAYLOAD_BYTES <= lastByte) // Enough space for trailer.
    15e8:	03 96       	adiw	r24, 0x03	; 3
    15ea:	88 57       	subi	r24, 0x78	; 120
    15ec:	91 40       	sbci	r25, 0x01	; 1
    15ee:	09 f0       	breq	.+2      	; 0x15f2 <FHT8VCallForHeatPoll()+0x104>
    15f0:	20 f5       	brcc	.+72     	; 0x163a <FHT8VCallForHeatPoll()+0x14c>
        {
        if(verifyHeaderAndCRCForTrailingMinimalStatsPayload(trailer)) // Valid header and CRC.
    15f2:	c8 01       	movw	r24, r16
    15f4:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <verifyHeaderAndCRCForTrailingMinimalStatsPayload(unsigned char const*)>
    15f8:	88 23       	and	r24, r24
    15fa:	71 f0       	breq	.+28     	; 0x1618 <FHT8VCallForHeatPoll()+0x12a>
          {
          trailingMinimalStatsPayload_t payload;
          extractTrailingMinimalStatsPayload(trailer, &payload);
    15fc:	c8 01       	movw	r24, r16
    15fe:	8e 01       	movw	r16, r28
    1600:	0f 5f       	subi	r16, 0xFF	; 255
    1602:	1f 4f       	sbci	r17, 0xFF	; 255
    1604:	b8 01       	movw	r22, r16
    1606:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <extractTrailingMinimalStatsPayload(unsigned char const*, trailingMinimalStatsPayload*)>
          recordMinimalStats(false, command.hc1, command.hc2, &payload);
    160a:	80 e0       	ldi	r24, 0x00	; 0
    160c:	6b 81       	ldd	r22, Y+3	; 0x03
    160e:	4c 81       	ldd	r20, Y+4	; 0x04
    1610:	98 01       	movw	r18, r16
    1612:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <recordMinimalStats(bool, unsigned char, unsigned char, trailingMinimalStatsPayload const*)>
    1616:	11 c0       	rjmp	.+34     	; 0x163a <FHT8VCallForHeatPoll()+0x14c>
#endif
          }
#if 1 // Optional extra tracking of error rate/type/location.
        else // Failed to verify; deduce bad frame if header looks OK.
          {
          if(MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MSBS == (trailer[0] & MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MASK))
    1618:	f8 01       	movw	r30, r16
    161a:	80 81       	ld	r24, Z
    161c:	80 7e       	andi	r24, 0xE0	; 224
    161e:	80 34       	cpi	r24, 0x40	; 64
    1620:	61 f4       	brne	.+24     	; 0x163a <FHT8VCallForHeatPoll()+0x14c>
// Useful to assess the noise enviromentment.
static volatile uint8_t lastRXerrno;

// Atomically returns and clears last (FHT8V) RX error code, or 0 if none.
// Set with such codes as FHT8VRXErr_GENERIC; never set to zero.
static void setLastRXErr(const uint8_t err) { ATOMIC_BLOCK (ATOMIC_RESTORESTATE) { lastRXerrno = err; } }
    1622:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1624:	f8 94       	cli
    1626:	84 e0       	ldi	r24, 0x04	; 4
    1628:	80 93 40 01 	sts	0x0140, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    162c:	9f bf       	out	0x3f, r25	; 63
        else // Failed to verify; deduce bad frame if header looks OK.
          {
          if(MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MSBS == (trailer[0] & MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MASK))
            {
            setLastRXErr(FHT8VRXErr_BAD_RX_SUBFRAME);
            seedRNG8(trailer[0], trailer[1], trailer[2]); // Attempt to gather some entropy from the RX noise. (TODO-302).
    162e:	f8 01       	movw	r30, r16
    1630:	80 81       	ld	r24, Z
    1632:	61 81       	ldd	r22, Z+1	; 0x01
    1634:	42 81       	ldd	r20, Z+2	; 0x02
    1636:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <seedRNG8(unsigned char, unsigned char, unsigned char)>
#endif
        }
#endif

      // Potentially accept as call for heat only if command is 0x26 (38) and value open enough as used by OpenTRV to TX.
      if((0x26 == command.command) && (command.extension >= getMinValvePcReallyOpen()))
    163a:	8d 81       	ldd	r24, Y+5	; 0x05
    163c:	86 32       	cpi	r24, 0x26	; 38
    163e:	71 f5       	brne	.+92     	; 0x169c <FHT8VCallForHeatPoll()+0x1ae>
    1640:	1e 81       	ldd	r17, Y+6	; 0x06
    1642:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <getMinValvePcReallyOpen()>
    1646:	18 17       	cp	r17, r24
    1648:	48 f1       	brcs	.+82     	; 0x169c <FHT8VCallForHeatPoll()+0x1ae>
        {
        if(FHT8VHubAcceptedHouseCode(command.hc1, command.hc2))
          {
          // Accept if house code not filtered out.
          const uint16_t compoundHC = (command.hc1 << 8) | command.hc2;
    164a:	9b 81       	ldd	r25, Y+3	; 0x03
    164c:	80 e0       	ldi	r24, 0x00	; 0
    164e:	2c 81       	ldd	r18, Y+4	; 0x04
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	82 2b       	or	r24, r18
    1654:	93 2b       	or	r25, r19
          ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    1656:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1658:	f8 94       	cli
            { lastCallForHeatHC = compoundHC; } // Update atomically.
    165a:	90 93 03 01 	sts	0x0103, r25
    165e:	80 93 02 01 	sts	0x0102, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1662:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    1664:	1b c0       	rjmp	.+54     	; 0x169c <FHT8VCallForHeatPoll()+0x1ae>
// Useful to assess the noise enviromentment.
static volatile uint8_t lastRXerrno;

// Atomically returns and clears last (FHT8V) RX error code, or 0 if none.
// Set with such codes as FHT8VRXErr_GENERIC; never set to zero.
static void setLastRXErr(const uint8_t err) { ATOMIC_BLOCK (ATOMIC_RESTORESTATE) { lastRXerrno = err; } }
    1666:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1668:	f8 94       	cli
    166a:	83 e0       	ldi	r24, 0x03	; 3
    166c:	10 c0       	rjmp	.+32     	; 0x168e <FHT8VCallForHeatPoll()+0x1a0>
#endif
      _SetupRFM22ToEavesdropOnFHT8V(); // Reset/restart RX.
      return(false);
      }
    }
  else if(status & 0x80) // Got sync from incoming FHT8V message.
    166e:	87 ff       	sbrs	r24, 7
    1670:	09 c0       	rjmp	.+18     	; 0x1684 <FHT8VCallForHeatPoll()+0x196>
    {
    // Capture some entropy from RSSI and timing...
    const uint8_t rssi = RFM22RSSI();
    1672:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <RFM22RSSI()>
    // TODO adjust output power down a little if RX very loud.
    addEntropyToPool(rssi ^ (uint8_t)(status ^ (status >> 8)), 1); // Maybe ~1 real bit of entropy.
    1676:	91 2f       	mov	r25, r17
    1678:	90 27       	eor	r25, r16
    167a:	89 27       	eor	r24, r25
    167c:	61 e0       	ldi	r22, 0x01	; 1
    167e:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <addEntropyToPool(unsigned char, unsigned char)>
    1682:	0c c0       	rjmp	.+24     	; 0x169c <FHT8VCallForHeatPoll()+0x1ae>
      }
#endif 
//    syncSeen = true;
    return(true);
    }
  else if(status & 0x8000) // RX FIFO overflow/underflow: give up and restart...
    1684:	97 ff       	sbrs	r25, 7
    1686:	08 c0       	rjmp	.+16     	; 0x1698 <FHT8VCallForHeatPoll()+0x1aa>
// Useful to assess the noise enviromentment.
static volatile uint8_t lastRXerrno;

// Atomically returns and clears last (FHT8V) RX error code, or 0 if none.
// Set with such codes as FHT8VRXErr_GENERIC; never set to zero.
static void setLastRXErr(const uint8_t err) { ATOMIC_BLOCK (ATOMIC_RESTORESTATE) { lastRXerrno = err; } }
    1688:	9f b7       	in	r25, 0x3f	; 63
    168a:	f8 94       	cli
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	80 93 40 01 	sts	0x0140, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1692:	9f bf       	out	0x3f, r25	; 63
    {
    setLastRXErr(FHT8VRXErr_GENERIC);
#if 0 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("RX FIFO problem");
#endif
    _SetupRFM22ToEavesdropOnFHT8V(); // Reset/restart RX.
    1694:	0e 94 38 09 	call	0x1270	; 0x1270 <_SetupRFM22ToEavesdropOnFHT8V()>
    return(false);
    1698:	80 e0       	ldi	r24, 0x00	; 0
    169a:	01 c0       	rjmp	.+2      	; 0x169e <FHT8VCallForHeatPoll()+0x1b0>
    169c:	81 e0       	ldi	r24, 0x01	; 1
    }

  return(false);
  }
    169e:	2d 96       	adiw	r28, 0x0d	; 13
    16a0:	0f b6       	in	r0, 0x3f	; 63
    16a2:	f8 94       	cli
    16a4:	de bf       	out	0x3e, r29	; 62
    16a6:	0f be       	out	0x3f, r0	; 63
    16a8:	cd bf       	out	0x3d, r28	; 61
    16aa:	cf 91       	pop	r28
    16ac:	df 91       	pop	r29
    16ae:	1f 91       	pop	r17
    16b0:	0f 91       	pop	r16
    16b2:	ff 90       	pop	r15
    16b4:	ef 90       	pop	r14
    16b6:	df 90       	pop	r13
    16b8:	cf 90       	pop	r12
    16ba:	bf 90       	pop	r11
    16bc:	af 90       	pop	r10
    16be:	08 95       	ret

000016c0 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)>:
// The trailing 0xff is not sent.
// Returns immediately without transmitting if the command buffer starts with 0xff (ie is empty).
// (If doubleTX is true, sends the bitstream twice, with a short (~8ms) pause between transmissions, to help ensure reliable delivery.)
//
// Note: single transmission time is up to about 80ms, double up to about 170ms.
static void FHT8VTXFHTQueueAndSendCmd(uint8_t *bptr, const bool doubleTX)
    16c0:	0f 93       	push	r16
    16c2:	1f 93       	push	r17
    16c4:	cf 93       	push	r28
    16c6:	df 93       	push	r29
    16c8:	ec 01       	movw	r28, r24
    16ca:	06 2f       	mov	r16, r22
  {
  if(((uint8_t)0xff) == *bptr) { return; }
    16cc:	88 81       	ld	r24, Y
    16ce:	8f 3f       	cpi	r24, 0xFF	; 255
    16d0:	41 f1       	breq	.+80     	; 0x1722 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x62>
#ifdef DEBUG
  if(0 == *bptr) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("FHT8V frame not initialised"); panic(); }
    16d2:	88 23       	and	r24, r24
    16d4:	31 f4       	brne	.+12     	; 0x16e2 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x22>
    16d6:	89 e0       	ldi	r24, 0x09	; 9
    16d8:	91 e0       	ldi	r25, 0x01	; 1
    16da:	0e 94 ed 1a 	call	0x35da	; 0x35da <serialPrintlnAndFlush(__FlashStringHelper const*)>
    16de:	0e 94 06 28 	call	0x500c	; 0x500c <panic()>
#endif

#if defined(ENABLE_BOILER_HUB)
  const bool hubMode = inHubMode();
    16e2:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <getMinBoilerOnMinutes()>
    16e6:	18 2f       	mov	r17, r24
    16e8:	88 23       	and	r24, r24
    16ea:	19 f0       	breq	.+6      	; 0x16f2 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x32>
    16ec:	11 e0       	ldi	r17, 0x01	; 1
  // Do a final poll for any call for heat that just arrived before doing TX.
  if(hubMode) { FHT8VCallForHeatPoll(); }
    16ee:	0e 94 77 0a 	call	0x14ee	; 0x14ee <FHT8VCallForHeatPoll()>
  StopEavesdropOnFHT8V(); // Unconditional cleardown of eavesdrop.
    16f2:	80 e0       	ldi	r24, 0x00	; 0
    16f4:	0e 94 2d 09 	call	0x125a	; 0x125a <StopEavesdropOnFHT8V(bool)>
#endif

  RFM22QueueCmdToFF(bptr);
    16f8:	ce 01       	movw	r24, r28
    16fa:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <RFM22QueueCmdToFF(unsigned char*)>
  RFM22TXFIFO(); // Send it!  Approx 1.6ms/byte and < 80ms max.
    16fe:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <RFM22TXFIFO()>

  if(doubleTX)
    1702:	00 23       	and	r16, r16
    1704:	31 f0       	breq	.+12     	; 0x1712 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x52>
// Sleep/spin for approx specified strictly-positive number of milliseconds, in as low-power mode as possible.
// This may be achieved in part by dynamically slowing the CPU clock if possible.
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Assumes MIN_CPU_HZ >> 4000.
static void inline sleepLowPowerMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed((((MIN_CPU_HZ * (ms)) + 2000) / 4000) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    1706:	8d e3       	ldi	r24, 0x3D	; 61
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	0e 94 af 11 	call	0x235e	; 0x235e <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
    {
    // Should nominally pause about 8--9ms or similar before retransmission...
    sleepLowPowerMs(8);
    RFM22TXFIFO(); // Re-send it!
    170e:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <RFM22TXFIFO()>
    }

#if defined(ENABLE_BOILER_HUB)
  if(hubMode)
    1712:	11 23       	and	r17, r17
    1714:	21 f0       	breq	.+8      	; 0x171e <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x5e>
    { SetupToEavesdropOnFHT8V(); } // Revert to hub listening...
    1716:	80 e0       	ldi	r24, 0x00	; 0
    1718:	0e 94 40 09 	call	0x1280	; 0x1280 <SetupToEavesdropOnFHT8V(bool)>
    171c:	02 c0       	rjmp	.+4      	; 0x1722 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)+0x62>
  else
#endif
    { RFM22ModeStandbyAndClearState(); } // Go to standby to conserve energy.
    171e:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <RFM22ModeStandbyAndClearState()>
  }
    1722:	df 91       	pop	r29
    1724:	cf 91       	pop	r28
    1726:	1f 91       	pop	r17
    1728:	0f 91       	pop	r16
    172a:	08 95       	ret

0000172c <sleepUntilSubCycleTimeOptionalRX(unsigned char)>:
// Returns true if OK, false if specified time already passed or significantly missed (eg by more than one tick).
// May use a combination of techniques to hit the required time.
// Requesting a sleep until at or near the end of the cycle risks overrun and may be unwise.
// Using this to sleep less then 2 ticks may prove unreliable as the RTC rolls on underneath...
// This is NOT intended to be used to sleep over the end of a minor cycle. 
static void sleepUntilSubCycleTimeOptionalRX(const uint8_t sleepUntil)
    172c:	8f 92       	push	r8
    172e:	9f 92       	push	r9
    1730:	af 92       	push	r10
    1732:	bf 92       	push	r11
    1734:	cf 92       	push	r12
    1736:	df 92       	push	r13
    1738:	ef 92       	push	r14
    173a:	ff 92       	push	r15
    173c:	0f 93       	push	r16
    173e:	1f 93       	push	r17
    1740:	98 2e       	mov	r9, r24
    {
#if defined(ENABLE_BOILER_HUB)
    const bool hubMode = inHubMode();
    1742:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <getMinBoilerOnMinutes()>
    1746:	88 2e       	mov	r8, r24
    1748:	88 23       	and	r24, r24
    174a:	a9 f1       	breq	.+106    	; 0x17b6 <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x8a>
    174c:	88 24       	eor	r8, r8
    174e:	83 94       	inc	r8
      {
#if 0 && defined(DEBUG)
      DEBUG_SERIAL_PRINT_FLASHSTRING("TXwait");
#endif
      // Only do nap+poll if lots of time left.
      while(sleepUntil > fmax(getSubCycleTime() + (50/SUBCYCLE_TICK_MS_RD), GSCT_MAX))
    1750:	89 2d       	mov	r24, r9
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	5c 01       	movw	r10, r24
    1756:	cc 24       	eor	r12, r12
    1758:	b7 fc       	sbrc	r11, 7
    175a:	c0 94       	com	r12
    175c:	dc 2c       	mov	r13, r12
    175e:	06 c0       	rjmp	.+12     	; 0x176c <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x40>
//   * force if true then force full poll on every call (ie do not internally rate-limit)
// NOTE: implementation may not be in power-management module.
bool pollIO(bool force = false);
// Nap productively polling I/O, etc, across the system while spending time in low-power mode if possible.
// Typically sleeps for about 30ms; tries to allow ealier wakeup if interrupt is received, etc.
static void inline nap30AndPoll() { nap(WDTO_30MS); pollIO(true); }
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	0e 94 de 11 	call	0x23bc	; 0x23bc <nap(signed char)>
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	0e 94 c7 23 	call	0x478e	; 0x478e <pollIO(bool)>
    176c:	60 91 b2 00 	lds	r22, 0x00B2
    1770:	70 e0       	ldi	r23, 0x00	; 0
    1772:	69 5f       	subi	r22, 0xF9	; 249
    1774:	7f 4f       	sbci	r23, 0xFF	; 255
    1776:	88 27       	eor	r24, r24
    1778:	77 fd       	sbrc	r23, 7
    177a:	80 95       	com	r24
    177c:	98 2f       	mov	r25, r24
    177e:	0e 94 19 33 	call	0x6632	; 0x6632 <__floatsisf>
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	4f e7       	ldi	r20, 0x7F	; 127
    1788:	53 e4       	ldi	r21, 0x43	; 67
    178a:	0e 94 54 33 	call	0x66a8	; 0x66a8 <fmax>
    178e:	7b 01       	movw	r14, r22
    1790:	8c 01       	movw	r16, r24
    1792:	c6 01       	movw	r24, r12
    1794:	b5 01       	movw	r22, r10
    1796:	0e 94 19 33 	call	0x6632	; 0x6632 <__floatsisf>
    179a:	a8 01       	movw	r20, r16
    179c:	97 01       	movw	r18, r14
    179e:	0e 94 c0 33 	call	0x6780	; 0x6780 <__gesf2>
    17a2:	18 16       	cp	r1, r24
    17a4:	ec f2       	brlt	.-70     	; 0x1760 <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x34>
    17a6:	03 c0       	rjmp	.+6      	; 0x17ae <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x82>
        { nap30AndPoll(); } // Assumed ~30ms sleep max.
      // Poll in remaining time without nap.
      while(sleepUntil > getSubCycleTime())
        { pollIO(); }
    17a8:	80 e0       	ldi	r24, 0x00	; 0
    17aa:	0e 94 c7 23 	call	0x478e	; 0x478e <pollIO(bool)>
#endif
      // Only do nap+poll if lots of time left.
      while(sleepUntil > fmax(getSubCycleTime() + (50/SUBCYCLE_TICK_MS_RD), GSCT_MAX))
        { nap30AndPoll(); } // Assumed ~30ms sleep max.
      // Poll in remaining time without nap.
      while(sleepUntil > getSubCycleTime())
    17ae:	80 91 b2 00 	lds	r24, 0x00B2
    17b2:	89 15       	cp	r24, r9
    17b4:	c8 f3       	brcs	.-14     	; 0x17a8 <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x7c>
#endif
      }
#endif

    // Sleep until exactly the right time.
    sleepUntilSubCycleTime(sleepUntil);
    17b6:	89 2d       	mov	r24, r9
    17b8:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <sleepUntilSubCycleTime(unsigned char)>

#if defined(ENABLE_BOILER_HUB)
    // Final quick poll for RX activity.
    if(hubMode) { FHT8VCallForHeatPoll(); }
    17bc:	88 20       	and	r8, r8
    17be:	11 f0       	breq	.+4      	; 0x17c4 <sleepUntilSubCycleTimeOptionalRX(unsigned char)+0x98>
    17c0:	0e 94 77 0a 	call	0x14ee	; 0x14ee <FHT8VCallForHeatPoll()>
#endif
    }
    17c4:	1f 91       	pop	r17
    17c6:	0f 91       	pop	r16
    17c8:	ff 90       	pop	r15
    17ca:	ef 90       	pop	r14
    17cc:	df 90       	pop	r13
    17ce:	cf 90       	pop	r12
    17d0:	bf 90       	pop	r11
    17d2:	af 90       	pop	r10
    17d4:	9f 90       	pop	r9
    17d6:	8f 90       	pop	r8
    17d8:	08 95       	ret

000017da <valveSettingTX(bool)>:
    { RFM22ModeStandbyAndClearState(); } // Go to standby to conserve energy.
  }

// Send current (assumed valve-setting) command and adjust FHT8V_isValveOpen as appropriate.
// Only appropriate when the command is going to be heard by the FHT8V valve itself, not just the hub.
static void valveSettingTX(const bool allowDoubleTX)
    17da:	1f 93       	push	r17
    17dc:	68 2f       	mov	r22, r24
  {
  // Transmit correct valve-setting command that should already be in the buffer...
  FHT8VTXFHTQueueAndSendCmd(FHT8VTXCommandArea, allowDoubleTX);
    17de:	8d e7       	ldi	r24, 0x7D	; 125
    17e0:	91 e0       	ldi	r25, 0x01	; 1
    17e2:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)>

// Call just after TX of valve-setting command which is assumed to reflect current TRVPercentOpen state.
// This helps avoiding calling for heat from a central boiler until the valve is really open,
// eg to avoid excess load on (or power wasting in) the circulation pump.
static void setFHT8V_isValveOpen()
  { FHT8V_isValveOpen = (getTRVPercentOpen() >= getMinValvePcReallyOpen()); }
    17e6:	0e 94 76 04 	call	0x8ec	; 0x8ec <getTRVPercentOpen()>
    17ea:	18 2f       	mov	r17, r24
    17ec:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <getMinValvePcReallyOpen()>
    17f0:	10 92 b4 01 	sts	0x01B4, r1
    17f4:	18 17       	cp	r17, r24
    17f6:	18 f0       	brcs	.+6      	; 0x17fe <valveSettingTX(bool)+0x24>
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	80 93 b4 01 	sts	0x01B4, r24
  {
  // Transmit correct valve-setting command that should already be in the buffer...
  FHT8VTXFHTQueueAndSendCmd(FHT8VTXCommandArea, allowDoubleTX);
  // Indicate state that valve should now actually be in (or physically moving to)...
  setFHT8V_isValveOpen();
  }
    17fe:	1f 91       	pop	r17
    1800:	08 95       	ret

00001802 <FHT8VSetHC2(unsigned char)>:
    eeprom_smart_erase_byte((uint8_t*)EE_START_FHT8V_HC2);
  }

// Set (non-volatile) HC1 and HC2 for single/primary FHT8V wireless valve under control.
void FHT8VSetHC1(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC1, hc); }
void FHT8VSetHC2(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC2, hc); }
    1802:	68 2f       	mov	r22, r24
    1804:	81 e1       	ldi	r24, 0x11	; 17
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	0e 94 05 08 	call	0x100a	; 0x100a <eeprom_smart_update_byte(unsigned char*, unsigned char)>
    180c:	08 95       	ret

0000180e <FHT8VSetHC1(unsigned char)>:
    eeprom_smart_erase_byte((uint8_t*)EE_START_FHT8V_HC1);
    eeprom_smart_erase_byte((uint8_t*)EE_START_FHT8V_HC2);
  }

// Set (non-volatile) HC1 and HC2 for single/primary FHT8V wireless valve under control.
void FHT8VSetHC1(uint8_t hc) { eeprom_smart_update_byte((uint8_t*)EE_START_FHT8V_HC1, hc); }
    180e:	68 2f       	mov	r22, r24
    1810:	80 e1       	ldi	r24, 0x10	; 16
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	0e 94 05 08 	call	0x100a	; 0x100a <eeprom_smart_update_byte(unsigned char*, unsigned char)>
    1818:	08 95       	ret

0000181a <FHT8VClearHC()>:
  }

// Clear both housecode parts (and thus disable local valve).
void FHT8VClearHC()
  {
    eeprom_smart_erase_byte((uint8_t*)EE_START_FHT8V_HC1);
    181a:	80 e1       	ldi	r24, 0x10	; 16
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	0e 94 db 07 	call	0xfb6	; 0xfb6 <eeprom_smart_erase_byte(unsigned char*)>
    eeprom_smart_erase_byte((uint8_t*)EE_START_FHT8V_HC2);
    1822:	81 e1       	ldi	r24, 0x11	; 17
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	0e 94 db 07 	call	0xfb6	; 0xfb6 <eeprom_smart_erase_byte(unsigned char*)>
  }
    182a:	08 95       	ret

0000182c <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, trailingMinimalStatsPayload const*)>:
//   * trailer  if not null then a (3-byte) trailer is appented, build from that info plus a CRC
//   * command  on entry hc1, hc2 (and addresss if used) must be set correctly, this sets the command and extension; never NULL
// The generated command frame can be resent indefinitely.
// The output buffer used must be (at least) FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE bytes.
// Returns pointer to the terminating 0xff on exit.
uint8_t *FHT8VCreateValveSetCmdFrameHT_r(uint8_t *const bptrInitial, const bool doHeader, fht8v_msg_t *const command, const uint8_t TRVPercentOpen, const trailingMinimalStatsPayload_t *trailer)
    182c:	ef 92       	push	r14
    182e:	ff 92       	push	r15
    1830:	0f 93       	push	r16
    1832:	1f 93       	push	r17
    1834:	cf 93       	push	r28
    1836:	df 93       	push	r29
    1838:	7c 01       	movw	r14, r24
    183a:	36 2f       	mov	r19, r22
    183c:	ea 01       	movw	r28, r20
  {
  uint8_t *bptr = bptrInitial;

  command->command = 0x26;
    183e:	86 e2       	ldi	r24, 0x26	; 38
    1840:	8a 83       	std	Y+2, r24	; 0x02
  command->extension = (TRVPercentOpen * 255) / 100;
    1842:	8f ef       	ldi	r24, 0xFF	; 255
    1844:	28 9f       	mul	r18, r24
    1846:	c0 01       	movw	r24, r0
    1848:	11 24       	eor	r1, r1
    184a:	64 e6       	ldi	r22, 0x64	; 100
    184c:	70 e0       	ldi	r23, 0x00	; 0
    184e:	0e 94 f7 33 	call	0x67ee	; 0x67ee <__divmodhi4>
    1852:	6b 83       	std	Y+3, r22	; 0x03

  // Add RFM22/32-friendly pre-preamble if requested, eg when calling for heat from the boiler (TRV actually open).
  // NOTE: this requires more buffer space.
  if(doHeader)
    1854:	33 23       	and	r19, r19
    1856:	11 f4       	brne	.+4      	; 0x185c <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, trailingMinimalStatsPayload const*)+0x30>
    1858:	c7 01       	movw	r24, r14
    185a:	09 c0       	rjmp	.+18     	; 0x186e <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, trailingMinimalStatsPayload const*)+0x42>
    {
    memset(bptr, RFM22_PREAMBLE_BYTE, RFM22_PREAMBLE_BYTES);
    185c:	c7 01       	movw	r24, r14
    185e:	6a ea       	ldi	r22, 0xAA	; 170
    1860:	70 e0       	ldi	r23, 0x00	; 0
    1862:	45 e0       	ldi	r20, 0x05	; 5
    1864:	50 e0       	ldi	r21, 0x00	; 0
    1866:	0e 94 cc 03 	call	0x798	; 0x798 <memset>
    bptr += RFM22_PREAMBLE_BYTES;
    186a:	c7 01       	movw	r24, r14
    186c:	05 96       	adiw	r24, 0x05	; 5
    }

  bptr = FHT8VCreate200usBitStreamBptr(bptr, command);
    186e:	be 01       	movw	r22, r28
    1870:	0e 94 a2 08 	call	0x1144	; 0x1144 <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>
    1874:	ec 01       	movw	r28, r24

  if(NULL != trailer)
    1876:	01 15       	cp	r16, r1
    1878:	11 05       	cpc	r17, r1
    187a:	31 f0       	breq	.+12     	; 0x1888 <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, trailingMinimalStatsPayload const*)+0x5c>
    {
    // Write out encoded, wrapped/checked payload.
    writeTrailingMinimalStatsPayload(bptr, trailer);
    187c:	b8 01       	movw	r22, r16
    187e:	0e 94 30 11 	call	0x2260	; 0x2260 <writeTrailingMinimalStatsPayload(unsigned char*, trailingMinimalStatsPayload const*)>
    bptr += 3;
    1882:	23 96       	adiw	r28, 0x03	; 3
    *bptr = (uint8_t)0xff; // Terminate TX bytes.
    1884:	8f ef       	ldi	r24, 0xFF	; 255
    1886:	88 83       	st	Y, r24
    }

#if 1 && defined(DEBUG)
  // Check that the buffer end was not overrun.
  if(bptr - bptrInitial >= FHT8V_200US_BIT_STREAM_FRAME_BUF_SIZE) { panic(F("TX gen too large")); }
    1888:	ce 01       	movw	r24, r28
    188a:	8e 19       	sub	r24, r14
    188c:	9f 09       	sbc	r25, r15
    188e:	c7 97       	sbiw	r24, 0x37	; 55
    1890:	24 f0       	brlt	.+8      	; 0x189a <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, trailingMinimalStatsPayload const*)+0x6e>
    1892:	88 e4       	ldi	r24, 0x48	; 72
    1894:	91 e0       	ldi	r25, 0x01	; 1
    1896:	0e 94 17 28 	call	0x502e	; 0x502e <panic(__FlashStringHelper const*)>
#endif

  return(bptr);
  }
    189a:	ce 01       	movw	r24, r28
    189c:	df 91       	pop	r29
    189e:	cf 91       	pop	r28
    18a0:	1f 91       	pop	r17
    18a2:	0f 91       	pop	r16
    18a4:	ff 90       	pop	r15
    18a6:	ef 90       	pop	r14
    18a8:	08 95       	ret

000018aa <FHT8VCreateValveSetCmdFrame_r(unsigned char*, fht8v_msg_t*, unsigned char)>:
//
// Implicitly decides whether to add optional header and trailer components.
//
// NOTE: with SUPPORT_TEMP_TX defined will also insert trailing stats payload where appropriate.
// Also reports local stats as if remote.
uint8_t *FHT8VCreateValveSetCmdFrame_r(uint8_t *const bptr, fht8v_msg_t *command, const uint8_t TRVPercentOpen)
    18aa:	9f 92       	push	r9
    18ac:	af 92       	push	r10
    18ae:	bf 92       	push	r11
    18b0:	cf 92       	push	r12
    18b2:	df 92       	push	r13
    18b4:	ef 92       	push	r14
    18b6:	ff 92       	push	r15
    18b8:	0f 93       	push	r16
    18ba:	1f 93       	push	r17
    18bc:	df 93       	push	r29
    18be:	cf 93       	push	r28
    18c0:	00 d0       	rcall	.+0      	; 0x18c2 <FHT8VCreateValveSetCmdFrame_r(unsigned char*, fht8v_msg_t*, unsigned char)+0x18>
    18c2:	cd b7       	in	r28, 0x3d	; 61
    18c4:	de b7       	in	r29, 0x3e	; 62
    18c6:	5c 01       	movw	r10, r24
    18c8:	6b 01       	movw	r12, r22
    18ca:	94 2e       	mov	r9, r20
  {
  const bool etmsp = enableTrailingMinimalStatsPayload();
    18cc:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <enableTrailingMinimalStatsPayload()>
    18d0:	e8 2e       	mov	r14, r24
  // OR if adding a trailer that the hub should see.
  // NOTE: this requires more buffer space.
  const bool doHeader = etmsp
#if defined(RFM22_SYNC_BCFH)
  // NOTE: the percentage-open threshold to call for heat from the boiler is set to allow the valve to open significantly, etc.
      || (TRVPercentOpen >= getMinValvePcReallyOpen())
    18d2:	88 23       	and	r24, r24
    18d4:	31 f4       	brne	.+12     	; 0x18e2 <FHT8VCreateValveSetCmdFrame_r(unsigned char*, fht8v_msg_t*, unsigned char)+0x38>
    18d6:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <getMinValvePcReallyOpen()>
    18da:	98 16       	cp	r9, r24
    18dc:	98 f4       	brcc	.+38     	; 0x1904 <FHT8VCreateValveSetCmdFrame_r(unsigned char*, fht8v_msg_t*, unsigned char)+0x5a>
    18de:	ff 24       	eor	r15, r15
    18e0:	13 c0       	rjmp	.+38     	; 0x1908 <FHT8VCreateValveSetCmdFrame_r(unsigned char*, fht8v_msg_t*, unsigned char)+0x5e>

  const bool doTrailer = etmsp;
  trailingMinimalStatsPayload_t trailer;
  if(doTrailer)
    {
    trailer.powerLow = isBatteryLow();
    18e2:	0e 94 df 12 	call	0x25be	; 0x25be <isBatteryLow()>
    18e6:	87 95       	ror	r24
    18e8:	88 27       	eor	r24, r24
    18ea:	87 95       	ror	r24
    18ec:	9a 81       	ldd	r25, Y+2	; 0x02
    18ee:	9f 77       	andi	r25, 0x7F	; 127
    18f0:	98 2b       	or	r25, r24
    18f2:	9a 83       	std	Y+2, r25	; 0x02
    trailer.tempC16 = getTemperatureC16(); // Use last value read.
    18f4:	0e 94 3e 1b 	call	0x367c	; 0x367c <getTemperatureC16()>
    18f8:	89 83       	std	Y+1, r24	; 0x01
    18fa:	9f 77       	andi	r25, 0x7F	; 127
    18fc:	8a 81       	ldd	r24, Y+2	; 0x02
    18fe:	80 78       	andi	r24, 0x80	; 128
    1900:	89 2b       	or	r24, r25
    1902:	8a 83       	std	Y+2, r24	; 0x02
    1904:	ff 24       	eor	r15, r15
    1906:	f3 94       	inc	r15
    }
 
  // Record stats as if remote, but secure.
  recordMinimalStats(true, command->hc1, command->hc2, &trailer);
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	f6 01       	movw	r30, r12
    190c:	60 81       	ld	r22, Z
    190e:	41 81       	ldd	r20, Z+1	; 0x01
    1910:	8e 01       	movw	r16, r28
    1912:	0f 5f       	subi	r16, 0xFF	; 255
    1914:	1f 4f       	sbci	r17, 0xFF	; 255
    1916:	98 01       	movw	r18, r16
    1918:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <recordMinimalStats(bool, unsigned char, unsigned char, trailingMinimalStatsPayload const*)>

  return(FHT8VCreateValveSetCmdFrameHT_r(bptr, doHeader, command, TRVPercentOpen, (doTrailer ? &trailer : NULL)));
    191c:	ee 20       	and	r14, r14
    191e:	11 f4       	brne	.+4      	; 0x1924 <FHT8VCreateValveSetCmdFrame_r(unsigned char*, fht8v_msg_t*, unsigned char)+0x7a>
    1920:	00 e0       	ldi	r16, 0x00	; 0
    1922:	10 e0       	ldi	r17, 0x00	; 0
    1924:	c5 01       	movw	r24, r10
    1926:	6f 2d       	mov	r22, r15
    1928:	a6 01       	movw	r20, r12
    192a:	29 2d       	mov	r18, r9
    192c:	0e 94 16 0c 	call	0x182c	; 0x182c <FHT8VCreateValveSetCmdFrameHT_r(unsigned char*, bool, fht8v_msg_t*, unsigned char, trailingMinimalStatsPayload const*)>
  }
    1930:	0f 90       	pop	r0
    1932:	0f 90       	pop	r0
    1934:	cf 91       	pop	r28
    1936:	df 91       	pop	r29
    1938:	1f 91       	pop	r17
    193a:	0f 91       	pop	r16
    193c:	ff 90       	pop	r15
    193e:	ef 90       	pop	r14
    1940:	df 90       	pop	r13
    1942:	cf 90       	pop	r12
    1944:	bf 90       	pop	r11
    1946:	af 90       	pop	r10
    1948:	9f 90       	pop	r9
    194a:	08 95       	ret

0000194c <FHT8VCreateValveSetCmdFrame()>:
// Create FHT8V TRV outgoing valve-setting command frame (terminated with 0xff) in the shared TX buffer.
// The getTRVPercentOpen() result is used to generate the frame.
// HC1 and HC2 are fetched with the FHT8VGetHC1() and FHT8VGetHC2() calls, and address is always 0.
// The generated command frame can be resent indefinitely.
// If no valve is set up then this may simply terminate an empty buffer with 0xff.
void FHT8VCreateValveSetCmdFrame()
    194c:	df 93       	push	r29
    194e:	cf 93       	push	r28
    1950:	00 d0       	rcall	.+0      	; 0x1952 <FHT8VCreateValveSetCmdFrame()+0x6>
    1952:	00 d0       	rcall	.+0      	; 0x1954 <FHT8VCreateValveSetCmdFrame()+0x8>
    1954:	cd b7       	in	r28, 0x3d	; 61
    1956:	de b7       	in	r29, 0x3e	; 62
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1958:	f9 99       	sbic	0x1f, 1	; 31
    195a:	fe cf       	rjmp	.-4      	; 0x1958 <FHT8VCreateValveSetCmdFrame()+0xc>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    195c:	80 e1       	ldi	r24, 0x10	; 16
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	92 bd       	out	0x22, r25	; 34
    1962:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1964:	f8 9a       	sbi	0x1f, 0	; 31
    1966:	80 b5       	in	r24, 0x20	; 32
  {
  if(!localFHT8VTRVEnabled())
    1968:	84 36       	cpi	r24, 0x64	; 100
    196a:	50 f4       	brcc	.+20     	; 0x1980 <FHT8VCreateValveSetCmdFrame()+0x34>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    196c:	f9 99       	sbic	0x1f, 1	; 31
    196e:	fe cf       	rjmp	.-4      	; 0x196c <FHT8VCreateValveSetCmdFrame()+0x20>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1970:	81 e1       	ldi	r24, 0x11	; 17
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	92 bd       	out	0x22, r25	; 34
    1976:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1978:	f8 9a       	sbi	0x1f, 0	; 31
    197a:	80 b5       	in	r24, 0x20	; 32
    197c:	84 36       	cpi	r24, 0x64	; 100
    197e:	20 f0       	brcs	.+8      	; 0x1988 <FHT8VCreateValveSetCmdFrame()+0x3c>
    {
    // Ensure that buffer is terminated, though empty.
    FHT8VTXCommandArea[0] = 0xff;
    1980:	8f ef       	ldi	r24, 0xFF	; 255
    1982:	80 93 7d 01 	sts	0x017D, r24
    1986:	1c c0       	rjmp	.+56     	; 0x19c0 <FHT8VCreateValveSetCmdFrame()+0x74>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1988:	f9 99       	sbic	0x1f, 1	; 31
    198a:	fe cf       	rjmp	.-4      	; 0x1988 <FHT8VCreateValveSetCmdFrame()+0x3c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    198c:	80 e1       	ldi	r24, 0x10	; 16
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	92 bd       	out	0x22, r25	; 34
    1992:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1994:	f8 9a       	sbi	0x1f, 0	; 31
    1996:	20 b5       	in	r18, 0x20	; 32
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1998:	f9 99       	sbic	0x1f, 1	; 31
    199a:	fe cf       	rjmp	.-4      	; 0x1998 <FHT8VCreateValveSetCmdFrame()+0x4c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    199c:	81 e1       	ldi	r24, 0x11	; 17
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	92 bd       	out	0x22, r25	; 34
    19a2:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    19a4:	f8 9a       	sbi	0x1f, 0	; 31
    19a6:	80 b5       	in	r24, 0x20	; 32
    return;
    }

  fht8v_msg_t command;
  command.hc1 = FHT8VGetHC1();
  command.hc2 = FHT8VGetHC2();
    19a8:	8a 83       	std	Y+2, r24	; 0x02
    FHT8VTXCommandArea[0] = 0xff;
    return;
    }

  fht8v_msg_t command;
  command.hc1 = FHT8VGetHC1();
    19aa:	29 83       	std	Y+1, r18	; 0x01
  command.hc2 = FHT8VGetHC2();
#ifdef FHT8V_ADR_USED
  command.address = 0;
#endif

  FHT8VCreateValveSetCmdFrame_r(FHT8VTXCommandArea, &command, getTRVPercentOpen());
    19ac:	0e 94 76 04 	call	0x8ec	; 0x8ec <getTRVPercentOpen()>
    19b0:	48 2f       	mov	r20, r24
    19b2:	8d e7       	ldi	r24, 0x7D	; 125
    19b4:	91 e0       	ldi	r25, 0x01	; 1
    19b6:	be 01       	movw	r22, r28
    19b8:	6f 5f       	subi	r22, 0xFF	; 255
    19ba:	7f 4f       	sbci	r23, 0xFF	; 255
    19bc:	0e 94 55 0c 	call	0x18aa	; 0x18aa <FHT8VCreateValveSetCmdFrame_r(unsigned char*, fht8v_msg_t*, unsigned char)>
  }
    19c0:	0f 90       	pop	r0
    19c2:	0f 90       	pop	r0
    19c4:	0f 90       	pop	r0
    19c6:	0f 90       	pop	r0
    19c8:	cf 91       	pop	r28
    19ca:	df 91       	pop	r29
    19cc:	08 95       	ret

000019ce <doSync(bool)>:
    }

// Run the algorithm to get in sync with the receiver.
// Uses halfSecondCount.
// Iff this returns true then a(nother) call FHT8VPollSyncAndTX_Next() at or before each 0.5s from the cycle start should be made.
static bool doSync(const bool allowDoubleTX)
    19ce:	1f 93       	push	r17
    19d0:	df 93       	push	r29
    19d2:	cf 93       	push	r28
    19d4:	00 d0       	rcall	.+0      	; 0x19d6 <doSync(bool)+0x8>
    19d6:	00 d0       	rcall	.+0      	; 0x19d8 <doSync(bool)+0xa>
    19d8:	cd b7       	in	r28, 0x3d	; 61
    19da:	de b7       	in	r29, 0x3e	; 62
    19dc:	18 2f       	mov	r17, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    19de:	f9 99       	sbic	0x1f, 1	; 31
    19e0:	fe cf       	rjmp	.-4      	; 0x19de <doSync(bool)+0x10>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    19e2:	80 e1       	ldi	r24, 0x10	; 16
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	92 bd       	out	0x22, r25	; 34
    19e8:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    19ea:	f8 9a       	sbi	0x1f, 0	; 31
    19ec:	80 b5       	in	r24, 0x20	; 32
  {
  // Do not attempt sync at all (and thus do not attempt any other TX) if local FHT8V valve disabled.
  if(!localFHT8VTRVEnabled())
    19ee:	84 36       	cpi	r24, 0x64	; 100
    19f0:	58 f4       	brcc	.+22     	; 0x1a08 <doSync(bool)+0x3a>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    19f2:	f9 99       	sbic	0x1f, 1	; 31
    19f4:	fe cf       	rjmp	.-4      	; 0x19f2 <doSync(bool)+0x24>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    19f6:	81 e1       	ldi	r24, 0x11	; 17
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	92 bd       	out	0x22, r25	; 34
    19fc:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    19fe:	f8 9a       	sbi	0x1f, 0	; 31
    1a00:	80 b5       	in	r24, 0x20	; 32
    1a02:	84 36       	cpi	r24, 0x64	; 100
    1a04:	08 f4       	brcc	.+2      	; 0x1a08 <doSync(bool)+0x3a>
    1a06:	af c0       	rjmp	.+350    	; 0x1b66 <doSync(bool)+0x198>
    { syncedWithFHT8V = false; return(false); }
    1a08:	10 92 7a 01 	sts	0x017A, r1
    1a0c:	a1 c0       	rjmp	.+322    	; 0x1b50 <doSync(bool)+0x182>

  if(0 == syncStateFHT8V)
    {
    // Starting sync process.
    syncStateFHT8V = 241;
    1a0e:	81 ef       	ldi	r24, 0xF1	; 241
    1a10:	80 93 7c 01 	sts	0x017C, r24
#if 1 && defined(DEBUG)
    DEBUG_SERIAL_TIMESTAMP();
    1a14:	0e 94 30 1a 	call	0x3460	; 0x3460 <_debug_serial_timestamp()>
    DEBUG_SERIAL_PRINT(' ');
    1a18:	80 e2       	ldi	r24, 0x20	; 32
    1a1a:	0e 94 81 1a 	call	0x3502	; 0x3502 <serialPrintAndFlush(char)>
    //DEBUG_SERIAL_PRINTLN_FLASHSTRING("FHT8V syncing...");
#endif
    serialPrintlnAndFlush(F("FHT8V SYNC..."));
    1a1e:	8b ef       	ldi	r24, 0xFB	; 251
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	0e 94 ed 1a 	call	0x35da	; 0x35da <serialPrintlnAndFlush(__FlashStringHelper const*)>
    }

  if(syncStateFHT8V >= 2)
    1a26:	20 91 7c 01 	lds	r18, 0x017C
    1a2a:	22 30       	cpi	r18, 0x02	; 2
    1a2c:	08 f4       	brcc	.+2      	; 0x1a30 <doSync(bool)+0x62>
    1a2e:	45 c0       	rjmp	.+138    	; 0x1aba <doSync(bool)+0xec>
    {
    // Generate and send sync (command 12) message immediately for odd-numbered ticks, ie once per second.
    if(syncStateFHT8V & 1)
    1a30:	20 ff       	sbrs	r18, 0
    1a32:	2b c0       	rjmp	.+86     	; 0x1a8a <doSync(bool)+0xbc>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1a34:	f9 99       	sbic	0x1f, 1	; 31
    1a36:	fe cf       	rjmp	.-4      	; 0x1a34 <doSync(bool)+0x66>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1a38:	80 e1       	ldi	r24, 0x10	; 16
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	92 bd       	out	0x22, r25	; 34
    1a3e:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1a40:	f8 9a       	sbi	0x1f, 0	; 31
    1a42:	30 b5       	in	r19, 0x20	; 32
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1a44:	f9 99       	sbic	0x1f, 1	; 31
    1a46:	fe cf       	rjmp	.-4      	; 0x1a44 <doSync(bool)+0x76>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1a48:	81 e1       	ldi	r24, 0x11	; 17
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	92 bd       	out	0x22, r25	; 34
    1a4e:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1a50:	f8 9a       	sbi	0x1f, 0	; 31
    1a52:	80 b5       	in	r24, 0x20	; 32
      {
      fht8v_msg_t command;
      command.hc1 = FHT8VGetHC1();
      command.hc2 = FHT8VGetHC2();
    1a54:	8a 83       	std	Y+2, r24	; 0x02
      command.command = 0x2c; // Command 12, extension byte present.
    1a56:	8c e2       	ldi	r24, 0x2C	; 44
    1a58:	8b 83       	std	Y+3, r24	; 0x03
      command.extension = syncStateFHT8V;
    1a5a:	2c 83       	std	Y+4, r18	; 0x04
    {
    // Generate and send sync (command 12) message immediately for odd-numbered ticks, ie once per second.
    if(syncStateFHT8V & 1)
      {
      fht8v_msg_t command;
      command.hc1 = FHT8VGetHC1();
    1a5c:	39 83       	std	Y+1, r19	; 0x01
      command.hc2 = FHT8VGetHC2();
      command.command = 0x2c; // Command 12, extension byte present.
      command.extension = syncStateFHT8V;
      FHT8VCreate200usBitStreamBptr(FHT8VTXCommandArea, &command);
    1a5e:	8d e7       	ldi	r24, 0x7D	; 125
    1a60:	91 e0       	ldi	r25, 0x01	; 1
    1a62:	be 01       	movw	r22, r28
    1a64:	6f 5f       	subi	r22, 0xFF	; 255
    1a66:	7f 4f       	sbci	r23, 0xFF	; 255
    1a68:	0e 94 a2 08 	call	0x1144	; 0x1144 <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>
      if(halfSecondCount > 0)
    1a6c:	80 91 79 01 	lds	r24, 0x0179
    1a70:	88 23       	and	r24, r24
    1a72:	31 f0       	breq	.+12     	; 0x1a80 <doSync(bool)+0xb2>
        { sleepUntilSubCycleTimeOptionalRX((SUB_CYCLE_TICKS_PER_S/2) * halfSecondCount); }
    1a74:	82 95       	swap	r24
    1a76:	88 0f       	add	r24, r24
    1a78:	88 0f       	add	r24, r24
    1a7a:	80 7c       	andi	r24, 0xC0	; 192
    1a7c:	0e 94 96 0b 	call	0x172c	; 0x172c <sleepUntilSubCycleTimeOptionalRX(unsigned char)>
      FHT8VTXFHTQueueAndSendCmd(FHT8VTXCommandArea, allowDoubleTX); // SEND SYNC
    1a80:	8d e7       	ldi	r24, 0x7D	; 125
    1a82:	91 e0       	ldi	r25, 0x01	; 1
    1a84:	61 2f       	mov	r22, r17
    1a86:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)>
      DEBUG_SERIAL_PRINTLN();
#endif
      }

    // After penultimate sync TX set up time to sending of final sync command.
    if(1 == --syncStateFHT8V)
    1a8a:	80 91 7c 01 	lds	r24, 0x017C
    1a8e:	81 50       	subi	r24, 0x01	; 1
    1a90:	80 93 7c 01 	sts	0x017C, r24
    1a94:	81 30       	cpi	r24, 0x01	; 1
    1a96:	09 f0       	breq	.+2      	; 0x1a9a <doSync(bool)+0xcc>
    1a98:	5d c0       	rjmp	.+186    	; 0x1b54 <doSync(bool)+0x186>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1a9a:	f9 99       	sbic	0x1f, 1	; 31
    1a9c:	fe cf       	rjmp	.-4      	; 0x1a9a <doSync(bool)+0xcc>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1a9e:	81 e1       	ldi	r24, 0x11	; 17
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	92 bd       	out	0x22, r25	; 34
    1aa4:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1aa6:	f8 9a       	sbi	0x1f, 0	; 31
    1aa8:	90 b5       	in	r25, 0x20	; 32
      {
      // Set up timer to sent sync final (0) command
      // with formula: t = 0.5 * (HC2 & 7) + 4 seconds.
      halfSecondsToNextFHT8VTX = (FHT8VGetHC2() & 7) + 8; // Note units of half-seconds for this counter.
      halfSecondsToNextFHT8VTX -= (MAX_HSC - halfSecondCount);
    1aaa:	80 91 79 01 	lds	r24, 0x0179
    1aae:	8b 5f       	subi	r24, 0xFB	; 251
    1ab0:	97 70       	andi	r25, 0x07	; 7
    1ab2:	89 0f       	add	r24, r25
    1ab4:	80 93 7b 01 	sts	0x017B, r24
    1ab8:	4b c0       	rjmp	.+150    	; 0x1b50 <doSync(bool)+0x182>
      }
    }

  else // syncStateFHT8V == 1 so waiting to send sync final (0) command...
    {
    if(--halfSecondsToNextFHT8VTX == 0)
    1aba:	80 91 7b 01 	lds	r24, 0x017B
    1abe:	81 50       	subi	r24, 0x01	; 1
    1ac0:	80 93 7b 01 	sts	0x017B, r24
    1ac4:	88 23       	and	r24, r24
    1ac6:	09 f0       	breq	.+2      	; 0x1aca <doSync(bool)+0xfc>
    1ac8:	45 c0       	rjmp	.+138    	; 0x1b54 <doSync(bool)+0x186>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1aca:	f9 99       	sbic	0x1f, 1	; 31
    1acc:	fe cf       	rjmp	.-4      	; 0x1aca <doSync(bool)+0xfc>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1ace:	80 e1       	ldi	r24, 0x10	; 16
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	92 bd       	out	0x22, r25	; 34
    1ad4:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1ad6:	f8 9a       	sbi	0x1f, 0	; 31
    1ad8:	20 b5       	in	r18, 0x20	; 32
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1ada:	f9 99       	sbic	0x1f, 1	; 31
    1adc:	fe cf       	rjmp	.-4      	; 0x1ada <doSync(bool)+0x10c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1ade:	81 e1       	ldi	r24, 0x11	; 17
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	92 bd       	out	0x22, r25	; 34
    1ae4:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1ae6:	f8 9a       	sbi	0x1f, 0	; 31
    1ae8:	80 b5       	in	r24, 0x20	; 32
      {
      // Send sync final command.
      fht8v_msg_t command;
      command.hc1 = FHT8VGetHC1();
      command.hc2 = FHT8VGetHC2();
    1aea:	8a 83       	std	Y+2, r24	; 0x02
      command.command = 0x20; // Command 0, extension byte present.
    1aec:	80 e2       	ldi	r24, 0x20	; 32
    1aee:	8b 83       	std	Y+3, r24	; 0x03
      command.extension = 0; // DHD20130324: could set to TRVPercentOpen, but anything other than zero seems to lock up FHT8V-3 units.
    1af0:	1c 82       	std	Y+4, r1	; 0x04
      FHT8V_isValveOpen = false; // Note that valve will be closed (0%) upon receipt.
    1af2:	10 92 b4 01 	sts	0x01B4, r1
    {
    if(--halfSecondsToNextFHT8VTX == 0)
      {
      // Send sync final command.
      fht8v_msg_t command;
      command.hc1 = FHT8VGetHC1();
    1af6:	29 83       	std	Y+1, r18	; 0x01
      command.hc2 = FHT8VGetHC2();
      command.command = 0x20; // Command 0, extension byte present.
      command.extension = 0; // DHD20130324: could set to TRVPercentOpen, but anything other than zero seems to lock up FHT8V-3 units.
      FHT8V_isValveOpen = false; // Note that valve will be closed (0%) upon receipt.
      FHT8VCreate200usBitStreamBptr(FHT8VTXCommandArea, &command);      
    1af8:	8d e7       	ldi	r24, 0x7D	; 125
    1afa:	91 e0       	ldi	r25, 0x01	; 1
    1afc:	be 01       	movw	r22, r28
    1afe:	6f 5f       	subi	r22, 0xFF	; 255
    1b00:	7f 4f       	sbci	r23, 0xFF	; 255
    1b02:	0e 94 a2 08 	call	0x1144	; 0x1144 <FHT8VCreate200usBitStreamBptr(unsigned char*, fht8v_msg_t const*)>
      if(halfSecondCount > 0) { sleepUntilSubCycleTimeOptionalRX((SUB_CYCLE_TICKS_PER_S/2) * halfSecondCount); }
    1b06:	80 91 79 01 	lds	r24, 0x0179
    1b0a:	88 23       	and	r24, r24
    1b0c:	31 f0       	breq	.+12     	; 0x1b1a <doSync(bool)+0x14c>
    1b0e:	82 95       	swap	r24
    1b10:	88 0f       	add	r24, r24
    1b12:	88 0f       	add	r24, r24
    1b14:	80 7c       	andi	r24, 0xC0	; 192
    1b16:	0e 94 96 0b 	call	0x172c	; 0x172c <sleepUntilSubCycleTimeOptionalRX(unsigned char)>
      FHT8VTXFHTQueueAndSendCmd(FHT8VTXCommandArea, allowDoubleTX); // SEND SYNC FINAL
    1b1a:	8d e7       	ldi	r24, 0x7D	; 125
    1b1c:	91 e0       	ldi	r25, 0x01	; 1
    1b1e:	61 2f       	mov	r22, r17
    1b20:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <FHT8VTXFHTQueueAndSendCmd(unsigned char*, bool)>
    // Note that FHT8VTXCommandArea now does not contain a valid valve-setting command...
#if 1 && defined(DEBUG)
      DEBUG_SERIAL_TIMESTAMP();
    1b24:	0e 94 30 1a 	call	0x3460	; 0x3460 <_debug_serial_timestamp()>
      DEBUG_SERIAL_PRINT(' ');
    1b28:	80 e2       	ldi	r24, 0x20	; 32
    1b2a:	0e 94 81 1a 	call	0x3502	; 0x3502 <serialPrintAndFlush(char)>
      //DEBUG_SERIAL_PRINTLN_FLASHSTRING(" FHT8V SYNC FINAL");
#endif
      serialPrintlnAndFlush(F("FHT8V SYNC FINAL"));
    1b2e:	8a ee       	ldi	r24, 0xEA	; 234
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	0e 94 ed 1a 	call	0x35da	; 0x35da <serialPrintlnAndFlush(__FlashStringHelper const*)>

      // Assume now in sync...
      syncedWithFHT8V = true;
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	80 93 7a 01 	sts	0x017A, r24
      // On PICAXE there was no time to recompute valve-setting command immediately after SYNC FINAL SEND...
      // Mark buffer as empty to get it filled with the real TRV valve-setting command ASAP.
      //*FHT8VTXCommandArea = 0xff;

      // On ATmega there is plenty of CPU heft to fill command buffer immediately with valve-setting command.
      FHT8VCreateValveSetCmdFrame();
    1b3c:	0e 94 a6 0c 	call	0x194c	; 0x194c <FHT8VCreateValveSetCmdFrame()>

      // Set up correct delay to next TX; no more this minor cycle...
      halfSecondsToNextFHT8VTX = FHT8VTXGapHalfSeconds(command.hc2, halfSecondCount);
    1b40:	90 91 79 01 	lds	r25, 0x0179
    1b44:	9d 51       	subi	r25, 0x1D	; 29
    1b46:	8a 81       	ldd	r24, Y+2	; 0x02
    1b48:	87 70       	andi	r24, 0x07	; 7
    1b4a:	98 0f       	add	r25, r24
    1b4c:	90 93 7b 01 	sts	0x017B, r25
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	01 c0       	rjmp	.+2      	; 0x1b56 <doSync(bool)+0x188>
      return(false);
    1b54:	81 e0       	ldi	r24, 0x01	; 1
    }

  // For simplicity, insist on being called every half-second during sync.
  // TODO: avoid forcing most of these calls to save some CPU/energy and improve responsiveness.
  return(true);
  }
    1b56:	0f 90       	pop	r0
    1b58:	0f 90       	pop	r0
    1b5a:	0f 90       	pop	r0
    1b5c:	0f 90       	pop	r0
    1b5e:	cf 91       	pop	r28
    1b60:	df 91       	pop	r29
    1b62:	1f 91       	pop	r17
    1b64:	08 95       	ret
  {
  // Do not attempt sync at all (and thus do not attempt any other TX) if local FHT8V valve disabled.
  if(!localFHT8VTRVEnabled())
    { syncedWithFHT8V = false; return(false); }

  if(0 == syncStateFHT8V)
    1b66:	80 91 7c 01 	lds	r24, 0x017C
    1b6a:	88 23       	and	r24, r24
    1b6c:	09 f0       	breq	.+2      	; 0x1b70 <doSync(bool)+0x1a2>
    1b6e:	5b cf       	rjmp	.-330    	; 0x1a26 <doSync(bool)+0x58>
    1b70:	4e cf       	rjmp	.-356    	; 0x1a0e <doSync(bool)+0x40>

00001b72 <FHT8VPollSyncAndTX_Next(bool)>:
//
// ALSO MANAGES RX FROM OTHER NODES WHEN ENABLED IN HUB MODE.
//
// Iff this returns false then no further TX slots will be needed
// (and thus this routine need not be called again) on this minor cycle
bool FHT8VPollSyncAndTX_Next(const bool allowDoubleTX)
    1b72:	1f 93       	push	r17
    1b74:	18 2f       	mov	r17, r24
  {
  ++halfSecondCount; // Reflects count of calls since _First(), ie how many 
    1b76:	80 91 79 01 	lds	r24, 0x0179
    1b7a:	8f 5f       	subi	r24, 0xFF	; 255
    1b7c:	80 93 79 01 	sts	0x0179, r24
#ifdef DEBUG
    if(halfSecondCount > MAX_HSC) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("FHT8VPollSyncAndTX_Next() called too often"); panic(); }
    1b80:	84 30       	cpi	r24, 0x04	; 4
    1b82:	30 f0       	brcs	.+12     	; 0x1b90 <FHT8VPollSyncAndTX_Next(bool)+0x1e>
    1b84:	8f eb       	ldi	r24, 0xBF	; 191
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	0e 94 ed 1a 	call	0x35da	; 0x35da <serialPrintlnAndFlush(__FlashStringHelper const*)>
    1b8c:	0e 94 06 28 	call	0x500c	; 0x500c <panic()>
  return(true); // Need to do further TXes this minor cycle.
#else

  // Give priority to getting in sync over all other tasks, though pass control to them afterwards...
  // NOTE: startup state, or state to force resync is: syncedWithFHT8V = 0 AND syncStateFHT8V = 0
  if(!syncedWithFHT8V) { return(doSync(allowDoubleTX)); }
    1b90:	80 91 7a 01 	lds	r24, 0x017A
    1b94:	88 23       	and	r24, r24
    1b96:	21 f4       	brne	.+8      	; 0x1ba0 <FHT8VPollSyncAndTX_Next(bool)+0x2e>
    1b98:	81 2f       	mov	r24, r17
    1b9a:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <doSync(bool)>
    1b9e:	2d c0       	rjmp	.+90     	; 0x1bfa <FHT8VPollSyncAndTX_Next(bool)+0x88>

  // TX is due this slot so do it (and no more will be needed this minor cycle).
  if(0 == --halfSecondsToNextFHT8VTX)
    1ba0:	80 91 7b 01 	lds	r24, 0x017B
    1ba4:	81 50       	subi	r24, 0x01	; 1
    1ba6:	80 93 7b 01 	sts	0x017B, r24
    1baa:	88 23       	and	r24, r24
    1bac:	11 f0       	breq	.+4      	; 0x1bb2 <FHT8VPollSyncAndTX_Next(bool)+0x40>
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	24 c0       	rjmp	.+72     	; 0x1bfa <FHT8VPollSyncAndTX_Next(bool)+0x88>
    {
    sleepUntilSubCycleTimeOptionalRX((SUB_CYCLE_TICKS_PER_S/2) * halfSecondCount); // Sleep.
    1bb2:	80 91 79 01 	lds	r24, 0x0179
    1bb6:	82 95       	swap	r24
    1bb8:	88 0f       	add	r24, r24
    1bba:	88 0f       	add	r24, r24
    1bbc:	80 7c       	andi	r24, 0xC0	; 192
    1bbe:	0e 94 96 0b 	call	0x172c	; 0x172c <sleepUntilSubCycleTimeOptionalRX(unsigned char)>
    valveSettingTX(allowDoubleTX); // Should be heard by valve.
    1bc2:	81 2f       	mov	r24, r17
    1bc4:	0e 94 ed 0b 	call	0x17da	; 0x17da <valveSettingTX(bool)>
#if 1 && defined(DEBUG)
    DEBUG_SERIAL_TIMESTAMP();
    1bc8:	0e 94 30 1a 	call	0x3460	; 0x3460 <_debug_serial_timestamp()>
    DEBUG_SERIAL_PRINT(' ');
    1bcc:	80 e2       	ldi	r24, 0x20	; 32
    1bce:	0e 94 81 1a 	call	0x3502	; 0x3502 <serialPrintAndFlush(char)>
    // DEBUG_SERIAL_PRINTLN_FLASHSTRING(" FHT8V TX");
#endif
    serialPrintlnAndFlush(F("FHT8V TX"));
    1bd2:	86 eb       	ldi	r24, 0xB6	; 182
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	0e 94 ed 1a 	call	0x35da	; 0x35da <serialPrintlnAndFlush(__FlashStringHelper const*)>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1bda:	f9 99       	sbic	0x1f, 1	; 31
    1bdc:	fe cf       	rjmp	.-4      	; 0x1bda <FHT8VPollSyncAndTX_Next(bool)+0x68>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1bde:	81 e1       	ldi	r24, 0x11	; 17
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	92 bd       	out	0x22, r25	; 34
    1be4:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1be6:	f8 9a       	sbi	0x1f, 0	; 31
    1be8:	90 b5       	in	r25, 0x20	; 32

    // Set up correct delay to next TX.
    halfSecondsToNextFHT8VTX = FHT8VTXGapHalfSeconds(FHT8VGetHC2(), halfSecondCount);
    1bea:	80 91 79 01 	lds	r24, 0x0179
    1bee:	8d 51       	subi	r24, 0x1D	; 29
    1bf0:	97 70       	andi	r25, 0x07	; 7
    1bf2:	89 0f       	add	r24, r25
    1bf4:	80 93 7b 01 	sts	0x017B, r24
    1bf8:	80 e0       	ldi	r24, 0x00	; 0
    }

  // Will need to TX in a following slot in this minor cycle...
  return(true);
#endif
  }
    1bfa:	1f 91       	pop	r17
    1bfc:	08 95       	ret

00001bfe <FHT8VPollSyncAndTX_First(bool)>:
//
// Iff this returns true then call FHT8VPollSyncAndTX_Next() at or before each 0.5s from the cycle start
// to allow for possible transmissions.
//
// See https://sourceforge.net/p/opentrv/wiki/FHT%20Protocol/ for the underlying protocol.
bool FHT8VPollSyncAndTX_First(const bool allowDoubleTX)
    1bfe:	1f 93       	push	r17
    1c00:	18 2f       	mov	r17, r24
  {
  halfSecondCount = 0;
    1c02:	10 92 79 01 	sts	0x0179, r1
  return(true); // Will need anther TX in slot 2.
#else

  // Give priority to getting in sync over all other tasks, though pass control to them afterwards...
  // NOTE: startup state, or state to force resync is: syncedWithFHT8V = 0 AND syncStateFHT8V = 0
  if(!syncedWithFHT8V) { return(doSync(allowDoubleTX)); }
    1c06:	80 91 7a 01 	lds	r24, 0x017A
    1c0a:	88 23       	and	r24, r24
    1c0c:	21 f4       	brne	.+8      	; 0x1c16 <FHT8VPollSyncAndTX_First(bool)+0x18>
    1c0e:	81 2f       	mov	r24, r17
    1c10:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <doSync(bool)>
    1c14:	30 c0       	rjmp	.+96     	; 0x1c76 <FHT8VPollSyncAndTX_First(bool)+0x78>

#ifdef DEBUG
   if(0 == halfSecondsToNextFHT8VTX) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("FHT8V hs count 0 too soon"); panic(); }
    1c16:	80 91 7b 01 	lds	r24, 0x017B
    1c1a:	88 23       	and	r24, r24
    1c1c:	31 f4       	brne	.+12     	; 0x1c2a <FHT8VPollSyncAndTX_First(bool)+0x2c>
    1c1e:	8e e2       	ldi	r24, 0x2E	; 46
    1c20:	91 e0       	ldi	r25, 0x01	; 1
    1c22:	0e 94 ed 1a 	call	0x35da	; 0x35da <serialPrintlnAndFlush(__FlashStringHelper const*)>
    1c26:	0e 94 06 28 	call	0x500c	; 0x500c <panic()>
#endif

  // If no TX required in this minor cycle then can return false quickly (having decremented ticks-to-next-TX value suitably).
  if(halfSecondsToNextFHT8VTX > MAX_HSC+1)
    1c2a:	80 91 7b 01 	lds	r24, 0x017B
    1c2e:	85 30       	cpi	r24, 0x05	; 5
    1c30:	10 f0       	brcs	.+4      	; 0x1c36 <FHT8VPollSyncAndTX_First(bool)+0x38>
    {
    halfSecondsToNextFHT8VTX -= (MAX_HSC+1);
    1c32:	84 50       	subi	r24, 0x04	; 4
    1c34:	1d c0       	rjmp	.+58     	; 0x1c70 <FHT8VPollSyncAndTX_First(bool)+0x72>
    return(false); // No TX this minor cycle.
    }

  // TX is due this (first) slot so do it (and no more will be needed this minor cycle).
  if(0 == --halfSecondsToNextFHT8VTX)
    1c36:	81 50       	subi	r24, 0x01	; 1
    1c38:	80 93 7b 01 	sts	0x017B, r24
    1c3c:	88 23       	and	r24, r24
    1c3e:	11 f0       	breq	.+4      	; 0x1c44 <FHT8VPollSyncAndTX_First(bool)+0x46>
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	19 c0       	rjmp	.+50     	; 0x1c76 <FHT8VPollSyncAndTX_First(bool)+0x78>
    {
    valveSettingTX(allowDoubleTX); // Should be heard by valve.
    1c44:	81 2f       	mov	r24, r17
    1c46:	0e 94 ed 0b 	call	0x17da	; 0x17da <valveSettingTX(bool)>
#if 1 && defined(DEBUG)
    DEBUG_SERIAL_TIMESTAMP();
    1c4a:	0e 94 30 1a 	call	0x3460	; 0x3460 <_debug_serial_timestamp()>
    DEBUG_SERIAL_PRINT(' ');
    1c4e:	80 e2       	ldi	r24, 0x20	; 32
    1c50:	0e 94 81 1a 	call	0x3502	; 0x3502 <serialPrintAndFlush(char)>
    // DEBUG_SERIAL_PRINTLN_FLASHSTRING(" FHT8V TX");
#endif
    serialPrintlnAndFlush(F("FHT8V TX"));
    1c54:	85 e2       	ldi	r24, 0x25	; 37
    1c56:	91 e0       	ldi	r25, 0x01	; 1
    1c58:	0e 94 ed 1a 	call	0x35da	; 0x35da <serialPrintlnAndFlush(__FlashStringHelper const*)>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1c5c:	f9 99       	sbic	0x1f, 1	; 31
    1c5e:	fe cf       	rjmp	.-4      	; 0x1c5c <FHT8VPollSyncAndTX_First(bool)+0x5e>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1c60:	81 e1       	ldi	r24, 0x11	; 17
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	92 bd       	out	0x22, r25	; 34
    1c66:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1c68:	f8 9a       	sbi	0x1f, 0	; 31
    1c6a:	80 b5       	in	r24, 0x20	; 32
    // Set up correct delay to next TX.
    halfSecondsToNextFHT8VTX = FHT8VTXGapHalfSeconds(FHT8VGetHC2(), 0);
    1c6c:	87 70       	andi	r24, 0x07	; 7
    1c6e:	8d 51       	subi	r24, 0x1D	; 29
    1c70:	80 93 7b 01 	sts	0x017B, r24
    1c74:	80 e0       	ldi	r24, 0x00	; 0
    }

  // Will need to TX in a following slot in this minor cycle...
  return(true);
#endif
  }
    1c76:	1f 91       	pop	r17
    1c78:	08 95       	ret

00001c7a <verifyHeaderAndCRCForTrailingMinimalStatsPayload(unsigned char const*)>:




// Return true if header/structure and CRC looks valid for (3-byte) buffered stats payload.
bool verifyHeaderAndCRCForTrailingMinimalStatsPayload(uint8_t const *const buf)
    1c7a:	fc 01       	movw	r30, r24
  {
  return((MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MSBS == ((buf[0]) & MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MASK)) && // Plausible header.
         (0 == (buf[1] & 0x80)) && // Top bit is clear on this byte also.
         (buf[2] == crc7_5B_update(buf[0], buf[1]))); // CRC validates, top bit implicitly zero.
    1c7c:	30 81       	ld	r19, Z
    1c7e:	83 2f       	mov	r24, r19
    1c80:	80 7e       	andi	r24, 0xE0	; 224
    1c82:	80 34       	cpi	r24, 0x40	; 64
    1c84:	51 f5       	brne	.+84     	; 0x1cda <verifyHeaderAndCRCForTrailingMinimalStatsPayload(unsigned char const*)+0x60>
    1c86:	81 81       	ldd	r24, Z+1	; 0x01
    1c88:	87 fd       	sbrc	r24, 7
    1c8a:	27 c0       	rjmp	.+78     	; 0x1cda <verifyHeaderAndCRCForTrailingMinimalStatsPayload(unsigned char const*)+0x60>
    1c8c:	72 81       	ldd	r23, Z+2	; 0x02
    1c8e:	60 e8       	ldi	r22, 0x80	; 128
    1c90:	40 e0       	ldi	r20, 0x00	; 0
    1c92:	50 e0       	ldi	r21, 0x00	; 0
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    1c94:	e8 2f       	mov	r30, r24
    1c96:	f0 e0       	ldi	r31, 0x00	; 0
    1c98:	b1 e0       	ldi	r27, 0x01	; 1
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
    1c9a:	a7 e3       	ldi	r26, 0x37	; 55
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
    1c9c:	83 2f       	mov	r24, r19
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	26 e0       	ldi	r18, 0x06	; 6
    1ca2:	96 95       	lsr	r25
    1ca4:	87 95       	ror	r24
    1ca6:	2a 95       	dec	r18
    1ca8:	e1 f7       	brne	.-8      	; 0x1ca2 <verifyHeaderAndCRCForTrailingMinimalStatsPayload(unsigned char const*)+0x28>
    1caa:	28 2f       	mov	r18, r24
    1cac:	21 70       	andi	r18, 0x01	; 1
        if(0 != (datum & i)) { bit = !bit; }
    1cae:	86 2f       	mov	r24, r22
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	8e 23       	and	r24, r30
    1cb4:	9f 23       	and	r25, r31
    1cb6:	89 2b       	or	r24, r25
    1cb8:	09 f0       	breq	.+2      	; 0x1cbc <verifyHeaderAndCRCForTrailingMinimalStatsPayload(unsigned char const*)+0x42>
    1cba:	2b 27       	eor	r18, r27
        crc <<= 1;
    1cbc:	33 0f       	add	r19, r19
        if(bit) { crc ^= 0x37; }
    1cbe:	21 11       	cpse	r18, r1
    1cc0:	3a 27       	eor	r19, r26
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
    1cc2:	66 95       	lsr	r22
    1cc4:	4f 5f       	subi	r20, 0xFF	; 255
    1cc6:	5f 4f       	sbci	r21, 0xFF	; 255
    1cc8:	48 30       	cpi	r20, 0x08	; 8
    1cca:	51 05       	cpc	r21, r1
    1ccc:	39 f7       	brne	.-50     	; 0x1c9c <verifyHeaderAndCRCForTrailingMinimalStatsPayload(unsigned char const*)+0x22>
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	3f 77       	andi	r19, 0x7F	; 127
    1cd2:	73 17       	cp	r23, r19
    1cd4:	19 f4       	brne	.+6      	; 0x1cdc <verifyHeaderAndCRCForTrailingMinimalStatsPayload(unsigned char const*)+0x62>
    1cd6:	81 e0       	ldi	r24, 0x01	; 1
    1cd8:	08 95       	ret
// Return true if header/structure and CRC looks valid for (3-byte) buffered stats payload.
bool verifyHeaderAndCRCForTrailingMinimalStatsPayload(uint8_t const *const buf)
  {
  return((MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MSBS == ((buf[0]) & MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MASK)) && // Plausible header.
         (0 == (buf[1] & 0x80)) && // Top bit is clear on this byte also.
         (buf[2] == crc7_5B_update(buf[0], buf[1]))); // CRC validates, top bit implicitly zero.
    1cda:	80 e0       	ldi	r24, 0x00	; 0
  }
    1cdc:	08 95       	ret

00001cde <enableTrailingMinimalStatsPayload()>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1cde:	f9 99       	sbic	0x1f, 1	; 31
    1ce0:	fe cf       	rjmp	.-4      	; 0x1cde <enableTrailingMinimalStatsPayload()>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1ce2:	88 e1       	ldi	r24, 0x18	; 24
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	92 bd       	out	0x22, r25	; 34
    1ce8:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1cea:	f8 9a       	sbi	0x1f, 0	; 31
    1cec:	80 b5       	in	r24, 0x20	; 32
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	82 30       	cpi	r24, 0x02	; 2
    1cf2:	08 f4       	brcc	.+2      	; 0x1cf6 <enableTrailingMinimalStatsPayload()+0x18>
    1cf4:	91 e0       	ldi	r25, 0x01	; 1
#if !defined(enableTrailingMinimalStatsPayload)
// Returns true if an unencrypted minimal trailing static payload and similar (eg bare stats transmission) is permitted.
// True if the TX_ENABLE value is no higher than stTXmostUnsec.
// Some filtering may be required even if this is true.
// TODO: allow cacheing in RAM for speed.
bool enableTrailingMinimalStatsPayload() { return(eeprom_read_byte((uint8_t *)EE_START_STATS_TX_ENABLE) <= stTXmostUnsec); }
    1cf6:	89 2f       	mov	r24, r25
    1cf8:	08 95       	ret

00001cfa <ensureIDCreated(bool)>:
// Coerce any ID bytes to valid values if unset (0xff) or if forced,
// by filling with valid values (0x80--0xfe) from decent entropy gathered on the fly.
// Will moan about invalid values and return false but not attempt to reset,
// eg in case underlying EEPROM cell is worn/failing.
// Returns true iff all values good.
bool ensureIDCreated(const bool force)
    1cfa:	9f 92       	push	r9
    1cfc:	af 92       	push	r10
    1cfe:	bf 92       	push	r11
    1d00:	cf 92       	push	r12
    1d02:	df 92       	push	r13
    1d04:	ef 92       	push	r14
    1d06:	ff 92       	push	r15
    1d08:	0f 93       	push	r16
    1d0a:	1f 93       	push	r17
    1d0c:	cf 93       	push	r28
    1d0e:	df 93       	push	r29
    1d10:	98 2e       	mov	r9, r24
    1d12:	aa 24       	eor	r10, r10
    1d14:	a3 94       	inc	r10
    1d16:	ee 24       	eor	r14, r14
    1d18:	ff 24       	eor	r15, r15
    1d1a:	c4 e1       	ldi	r28, 0x14	; 20
    1d1c:	d0 e0       	ldi	r29, 0x00	; 0
    1d1e:	0c 2f       	mov	r16, r28
    1d20:	bd 2e       	mov	r11, r29
  {
  bool allGood = true;
  for(uint8_t i = 0; i < EE_LEN_ID; ++i)
    {
    uint8_t * const loc = i + (uint8_t *)EE_START_ID;
    if(force || (0xff == eeprom_read_byte(loc))) // Byte is unset or forcing change.
    1d22:	99 20       	and	r9, r9
    1d24:	41 f4       	brne	.+16     	; 0x1d36 <ensureIDCreated(bool)+0x3c>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1d26:	f9 99       	sbic	0x1f, 1	; 31
    1d28:	fe cf       	rjmp	.-4      	; 0x1d26 <ensureIDCreated(bool)+0x2c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1d2a:	d2 bd       	out	0x22, r29	; 34
    1d2c:	c1 bd       	out	0x21, r28	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1d2e:	f8 9a       	sbi	0x1f, 0	; 31
    1d30:	80 b5       	in	r24, 0x20	; 32
    1d32:	8f 3f       	cpi	r24, 0xFF	; 255
    1d34:	71 f5       	brne	.+92     	; 0x1d92 <ensureIDCreated(bool)+0x98>
        {
        serialPrintAndFlush(F("Setting ID byte "));
    1d36:	82 e8       	ldi	r24, 0x82	; 130
    1d38:	91 e0       	ldi	r25, 0x01	; 1
    1d3a:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush(i);
    1d3e:	c7 01       	movw	r24, r14
    1d40:	6a e0       	ldi	r22, 0x0A	; 10
    1d42:	70 e0       	ldi	r23, 0x00	; 0
    1d44:	0e 94 a5 1a 	call	0x354a	; 0x354a <serialPrintAndFlush(int, int)>
        serialPrintAndFlush(F(" ... "));
    1d48:	8c e7       	ldi	r24, 0x7C	; 124
    1d4a:	91 e0       	ldi	r25, 0x01	; 1
    1d4c:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <serialPrintAndFlush(__FlashStringHelper const*)>
        for( ; ; )
          {
          // Try to make decently-randomised 'unique-ish' ID with mixture of sources.
          // Is not confidential, and will be transmitted in the clear.
          // System will typically not have been running long when this is invoked.
          const uint8_t envNoise = ((i & 1) ? readTemperatureC16() : readAmbientLight());
    1d50:	31 e0       	ldi	r19, 0x01	; 1
    1d52:	c3 2e       	mov	r12, r19
    1d54:	d1 2c       	mov	r13, r1
    1d56:	ce 20       	and	r12, r14
    1d58:	df 20       	and	r13, r15
    1d5a:	c1 14       	cp	r12, r1
    1d5c:	d1 04       	cpc	r13, r1
    1d5e:	19 f0       	breq	.+6      	; 0x1d66 <ensureIDCreated(bool)+0x6c>
    1d60:	0e 94 43 1b 	call	0x3686	; 0x3686 <readTemperatureC16()>
    1d64:	02 c0       	rjmp	.+4      	; 0x1d6a <ensureIDCreated(bool)+0x70>
    1d66:	0e 94 40 04 	call	0x880	; 0x880 <readAmbientLight()>
    1d6a:	18 2f       	mov	r17, r24
          const uint8_t newValue = 0x80 | (getSecureRandomByte() ^ envNoise);
    1d6c:	0e 94 ff 19 	call	0x33fe	; 0x33fe <getSecureRandomByte()>
    1d70:	18 27       	eor	r17, r24
    1d72:	10 68       	ori	r17, 0x80	; 128
          if(0xff == newValue) { continue; } // Reject unusable value.
    1d74:	1f 3f       	cpi	r17, 0xFF	; 255
    1d76:	89 f3       	breq	.-30     	; 0x1d5a <ensureIDCreated(bool)+0x60>
          eeprom_smart_update_byte(loc, newValue);
    1d78:	80 2f       	mov	r24, r16
    1d7a:	9b 2d       	mov	r25, r11
    1d7c:	61 2f       	mov	r22, r17
    1d7e:	0e 94 05 08 	call	0x100a	; 0x100a <eeprom_smart_update_byte(unsigned char*, unsigned char)>
          serialPrintAndFlush(newValue, HEX);
    1d82:	81 2f       	mov	r24, r17
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	60 e1       	ldi	r22, 0x10	; 16
    1d88:	70 e0       	ldi	r23, 0x00	; 0
    1d8a:	0e 94 a5 1a 	call	0x354a	; 0x354a <serialPrintAndFlush(int, int)>
          break;
          }
        serialPrintlnAndFlush();
    1d8e:	0e 94 95 1a 	call	0x352a	; 0x352a <serialPrintlnAndFlush()>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1d92:	f9 99       	sbic	0x1f, 1	; 31
    1d94:	fe cf       	rjmp	.-4      	; 0x1d92 <ensureIDCreated(bool)+0x98>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    1d96:	d2 bd       	out	0x22, r29	; 34
    1d98:	c1 bd       	out	0x21, r28	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    1d9a:	f8 9a       	sbi	0x1f, 0	; 31
    1d9c:	10 b5       	in	r17, 0x20	; 32
        }
    // Validate.
    const uint8_t v2 = eeprom_read_byte(loc);
    if(!validIDByte(v2))
    1d9e:	81 2f       	mov	r24, r17
    1da0:	80 58       	subi	r24, 0x80	; 128
    1da2:	8f 37       	cpi	r24, 0x7F	; 127
    1da4:	b0 f0       	brcs	.+44     	; 0x1dd2 <ensureIDCreated(bool)+0xd8>
        {
        allGood = false;
        serialPrintAndFlush(F("Invalid ID byte "));
    1da6:	8b e6       	ldi	r24, 0x6B	; 107
    1da8:	91 e0       	ldi	r25, 0x01	; 1
    1daa:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush(i);
    1dae:	c7 01       	movw	r24, r14
    1db0:	6a e0       	ldi	r22, 0x0A	; 10
    1db2:	70 e0       	ldi	r23, 0x00	; 0
    1db4:	0e 94 a5 1a 	call	0x354a	; 0x354a <serialPrintAndFlush(int, int)>
        serialPrintAndFlush(F(" ... "));
    1db8:	85 e6       	ldi	r24, 0x65	; 101
    1dba:	91 e0       	ldi	r25, 0x01	; 1
    1dbc:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush(v2, HEX);
    1dc0:	81 2f       	mov	r24, r17
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	60 e1       	ldi	r22, 0x10	; 16
    1dc6:	70 e0       	ldi	r23, 0x00	; 0
    1dc8:	0e 94 a5 1a 	call	0x354a	; 0x354a <serialPrintAndFlush(int, int)>
        serialPrintlnAndFlush();
    1dcc:	0e 94 95 1a 	call	0x352a	; 0x352a <serialPrintlnAndFlush()>
    1dd0:	aa 24       	eor	r10, r10
    1dd2:	08 94       	sec
    1dd4:	e1 1c       	adc	r14, r1
    1dd6:	f1 1c       	adc	r15, r1
    1dd8:	21 96       	adiw	r28, 0x01	; 1
// eg in case underlying EEPROM cell is worn/failing.
// Returns true iff all values good.
bool ensureIDCreated(const bool force)
  {
  bool allGood = true;
  for(uint8_t i = 0; i < EE_LEN_ID; ++i)
    1dda:	84 e0       	ldi	r24, 0x04	; 4
    1ddc:	e8 16       	cp	r14, r24
    1dde:	f1 04       	cpc	r15, r1
    1de0:	09 f0       	breq	.+2      	; 0x1de4 <ensureIDCreated(bool)+0xea>
    1de2:	9d cf       	rjmp	.-198    	; 0x1d1e <ensureIDCreated(bool)+0x24>
        serialPrintAndFlush(v2, HEX);
        serialPrintlnAndFlush();
        }
     }
  return(allGood);
  }
    1de4:	8a 2d       	mov	r24, r10
    1de6:	df 91       	pop	r29
    1de8:	cf 91       	pop	r28
    1dea:	1f 91       	pop	r17
    1dec:	0f 91       	pop	r16
    1dee:	ff 90       	pop	r15
    1df0:	ef 90       	pop	r14
    1df2:	df 90       	pop	r13
    1df4:	cf 90       	pop	r12
    1df6:	bf 90       	pop	r11
    1df8:	af 90       	pop	r10
    1dfa:	9f 90       	pop	r9
    1dfc:	08 95       	ret

00001dfe <getLastCoreStats(FullStatsMessageCore*)>:
    }
  }

// Gets (and clears) the last core stats record received, if any, returning true and filling in the stats struct.
// If no minimal stats record has been received since the last call then the ID will be absent and the rest undefined.
void getLastCoreStats(FullStatsMessageCore_t *stats)
    1dfe:	fc 01       	movw	r30, r24
  {
#if 0 && defined(DEBUG)
  if(NULL == stats) { panic(); }
#endif
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    1e00:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1e02:	f8 94       	cli
    {
    if(!coreStats.containsID)
    1e04:	80 91 b5 01 	lds	r24, 0x01B5
    1e08:	80 fd       	sbrc	r24, 0
    1e0a:	04 c0       	rjmp	.+8      	; 0x1e14 <getLastCoreStats(FullStatsMessageCore*)+0x16>
      { stats->containsID = false; } // Nothing there; just clear containsID field in response for speed.
    1e0c:	80 81       	ld	r24, Z
    1e0e:	8e 7f       	andi	r24, 0xFE	; 254
    1e10:	80 83       	st	Z, r24
    1e12:	0d c0       	rjmp	.+26     	; 0x1e2e <getLastCoreStats(FullStatsMessageCore*)+0x30>
    else
      {
      // Copy everything.
      memcpy(stats, (void *)&coreStats, sizeof(*stats));
    1e14:	df 01       	movw	r26, r30
    1e16:	e5 eb       	ldi	r30, 0xB5	; 181
    1e18:	f1 e0       	ldi	r31, 0x01	; 1
    1e1a:	87 e0       	ldi	r24, 0x07	; 7
    1e1c:	01 90       	ld	r0, Z+
    1e1e:	0d 92       	st	X+, r0
    1e20:	81 50       	subi	r24, 0x01	; 1
    1e22:	e1 f7       	brne	.-8      	; 0x1e1c <getLastCoreStats(FullStatsMessageCore*)+0x1e>
      coreStats.containsID = false; // Mark stats as read.
    1e24:	80 91 b5 01 	lds	r24, 0x01B5
    1e28:	8e 7f       	andi	r24, 0xFE	; 254
    1e2a:	80 93 b5 01 	sts	0x01B5, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1e2e:	9f bf       	out	0x3f, r25	; 63
      }
    }
  }
    1e30:	08 95       	ret

00001e32 <recordCoreStats(bool, FullStatsMessageCore const*)>:
  }

// Record core incoming stats; ID must be set as a minimum.
// Is thread/ISR-safe and fast.
// May be backed by a finite-depth queue, even zero-length (ie discarding); usually holds just one item.
void recordCoreStats(const bool secure, const FullStatsMessageCore_t * const stats)
    1e32:	fb 01       	movw	r30, r22
  {
#if 0 && defined(DEBUG)
  if(NULL == payload) { panic(); }
#endif  // TODO
   if(!stats->containsID) { return; } // Ignore if no ID.
    1e34:	80 81       	ld	r24, Z
    1e36:	80 ff       	sbrs	r24, 0
    1e38:	0a c0       	rjmp	.+20     	; 0x1e4e <recordCoreStats(bool, FullStatsMessageCore const*)+0x1c>
   ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    1e3a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1e3c:	f8 94       	cli
    {
    memcpy((void *)&coreStats, stats, sizeof(coreStats));
    1e3e:	a5 eb       	ldi	r26, 0xB5	; 181
    1e40:	b1 e0       	ldi	r27, 0x01	; 1
    1e42:	87 e0       	ldi	r24, 0x07	; 7
    1e44:	01 90       	ld	r0, Z+
    1e46:	0d 92       	st	X+, r0
    1e48:	81 50       	subi	r24, 0x01	; 1
    1e4a:	e1 f7       	brne	.-8      	; 0x1e44 <recordCoreStats(bool, FullStatsMessageCore const*)+0x12>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1e4c:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    1e4e:	08 95       	ret

00001e50 <recordMinimalStats(bool, unsigned char, unsigned char, trailingMinimalStatsPayload const*)>:
static /* volatile */ FullStatsMessageCore_t coreStats; // Start up showing no record set.

// Record minimal incoming stats from given ID (if each byte < 100, then may be FHT8V-compatible house code).
// Is thread/ISR-safe and fast.
// May be backed by a finite-depth queue, even zero-length (ie discarding); usually holds just one item.
void recordMinimalStats(const bool secure, const uint8_t id0, const uint8_t id1, const trailingMinimalStatsPayload_t * const payload)
    1e50:	cf 93       	push	r28
    1e52:	df 93       	push	r29
    1e54:	d9 01       	movw	r26, r18
  {
#if 0 && defined(DEBUG)
  if(NULL == payload) { panic(); }
#endif  // TODO
   ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    1e56:	3f b7       	in	r19, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1e58:	f8 94       	cli
#define FullStatsMessageCore_MAX_BYTES_ON_WIRE 8
// Minimum size on wire including trailing CRC of core of FullStatsMessage.  TX message buffer should be one larger for trailing 0xff.
#define FullStatsMessageCore_MIN_BYTES_ON_WIRE 3

// Clear a FullStatsMessageCore_t, also indicating no optional fields present.
static inline void clearFullStatsMessageCore(FullStatsMessageCore_t *const p) { memset(p, 0, sizeof(FullStatsMessageCore_t)); }
    1e5a:	87 e0       	ldi	r24, 0x07	; 7
    1e5c:	e5 eb       	ldi	r30, 0xB5	; 181
    1e5e:	f1 e0       	ldi	r31, 0x01	; 1
    1e60:	ef 01       	movw	r28, r30
    1e62:	19 92       	st	Y+, r1
    1e64:	8a 95       	dec	r24
    1e66:	e9 f7       	brne	.-6      	; 0x1e62 <recordMinimalStats(bool, unsigned char, unsigned char, trailingMinimalStatsPayload const*)+0x12>
    {
    clearFullStatsMessageCore(&coreStats);
    coreStats.id0 = id0;
    1e68:	60 93 b6 01 	sts	0x01B6, r22
    coreStats.id1 = id1;
    1e6c:	40 93 b7 01 	sts	0x01B7, r20
    coreStats.containsID = true;
    1e70:	20 91 b5 01 	lds	r18, 0x01B5
    1e74:	82 2f       	mov	r24, r18
    1e76:	81 60       	ori	r24, 0x01	; 1
    1e78:	80 93 b5 01 	sts	0x01B5, r24
    memcpy((void *)&coreStats.tempAndPower, payload, sizeof(coreStats.tempAndPower));
    1e7c:	8d 91       	ld	r24, X+
    1e7e:	9c 91       	ld	r25, X
    1e80:	90 93 b9 01 	sts	0x01B9, r25
    1e84:	80 93 b8 01 	sts	0x01B8, r24
    coreStats.containsTempAndPower = true;
    1e88:	23 60       	ori	r18, 0x03	; 3
    1e8a:	20 93 b5 01 	sts	0x01B5, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1e8e:	3f bf       	out	0x3f, r19	; 63
    }
  }
    1e90:	df 91       	pop	r29
    1e92:	cf 91       	pop	r28
    1e94:	08 95       	ret

00001e96 <extractTrailingMinimalStatsPayload(unsigned char const*, trailingMinimalStatsPayload*)>:
#endif
  }

// Extract payload from valid (3-byte) header+payload+CRC into payload struct; only 2 bytes are actually read.
// Input bytes (eg header and check value) must already have been validated.
void extractTrailingMinimalStatsPayload(const uint8_t *const buf, trailingMinimalStatsPayload_t *const payload)
    1e96:	0f 93       	push	r16
    1e98:	1f 93       	push	r17
    1e9a:	cf 93       	push	r28
    1e9c:	df 93       	push	r29
    1e9e:	ec 01       	movw	r28, r24
    1ea0:	8b 01       	movw	r16, r22
  {
#ifdef DEBUG
  if(NULL == payload) { panic(); }
    1ea2:	61 15       	cp	r22, r1
    1ea4:	71 05       	cpc	r23, r1
    1ea6:	11 f4       	brne	.+4      	; 0x1eac <extractTrailingMinimalStatsPayload(unsigned char const*, trailingMinimalStatsPayload*)+0x16>
    1ea8:	0e 94 06 28 	call	0x500c	; 0x500c <panic()>
#endif
  payload->powerLow = (0 != (buf[0] & 0x10));
    1eac:	88 81       	ld	r24, Y
    1eae:	88 0f       	add	r24, r24
    1eb0:	88 0f       	add	r24, r24
    1eb2:	88 0f       	add	r24, r24
    1eb4:	80 78       	andi	r24, 0x80	; 128
    1eb6:	f8 01       	movw	r30, r16
    1eb8:	41 81       	ldd	r20, Z+1	; 0x01
    1eba:	4f 77       	andi	r20, 0x7F	; 127
    1ebc:	48 2b       	or	r20, r24
    1ebe:	41 83       	std	Z+1, r20	; 0x01
  payload->tempC16 = ((((int16_t) buf[1]) << 4) | (buf[0] & 0xf)) + MESSAGING_TRAILING_MINIMAL_STATS_TEMP_BIAS;
    1ec0:	29 81       	ldd	r18, Y+1	; 0x01
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	54 e0       	ldi	r21, 0x04	; 4
    1ec6:	22 0f       	add	r18, r18
    1ec8:	33 1f       	adc	r19, r19
    1eca:	5a 95       	dec	r21
    1ecc:	e1 f7       	brne	.-8      	; 0x1ec6 <extractTrailingMinimalStatsPayload(unsigned char const*, trailingMinimalStatsPayload*)+0x30>
    1ece:	88 81       	ld	r24, Y
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	8f 70       	andi	r24, 0x0F	; 15
    1ed4:	90 70       	andi	r25, 0x00	; 0
    1ed6:	28 2b       	or	r18, r24
    1ed8:	39 2b       	or	r19, r25
    1eda:	20 54       	subi	r18, 0x40	; 64
    1edc:	31 40       	sbci	r19, 0x01	; 1
    1ede:	20 83       	st	Z, r18
    1ee0:	83 2f       	mov	r24, r19
    1ee2:	8f 77       	andi	r24, 0x7F	; 127
    1ee4:	40 78       	andi	r20, 0x80	; 128
    1ee6:	48 2b       	or	r20, r24
    1ee8:	41 83       	std	Z+1, r20	; 0x01
  }
    1eea:	df 91       	pop	r29
    1eec:	cf 91       	pop	r28
    1eee:	1f 91       	pop	r17
    1ef0:	0f 91       	pop	r16
    1ef2:	08 95       	ret

00001ef4 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)>:
// Decode core/common 'full' stats message.
//   * content will contains data decoded from the message; must be non-null
// If successful returns pointer to nexte byte of message, ie just after full stats message decoded.
// Returns null if failed (eg because of corrupt message data) and state of 'content' result is undefined.
const uint8_t *decodeFullStatsMessageCore(const uint8_t * const buf, const uint8_t buflen, const stats_TX_level secLevel, const bool secureChannel,
    FullStatsMessageCore_t * const content)
    1ef4:	ef 92       	push	r14
    1ef6:	ff 92       	push	r15
    1ef8:	0f 93       	push	r16
    1efa:	1f 93       	push	r17
    1efc:	cf 93       	push	r28
    1efe:	df 93       	push	r29
    1f00:	7c 01       	movw	r14, r24
  {
  if(NULL == buf) { return(NULL); } // Could be an assert/panic instead at a pinch.
    1f02:	00 97       	sbiw	r24, 0x00	; 0
    1f04:	09 f4       	brne	.+2      	; 0x1f08 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x14>
    1f06:	8f c0       	rjmp	.+286    	; 0x2026 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  if(NULL == content) { return(NULL); } // Could be an assert/panic instead at a pinch.
    1f08:	01 15       	cp	r16, r1
    1f0a:	11 05       	cpc	r17, r1
    1f0c:	09 f4       	brne	.+2      	; 0x1f10 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x1c>
    1f0e:	8b c0       	rjmp	.+278    	; 0x2026 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  if(buflen < FullStatsMessageCore_MIN_BYTES_ON_WIRE) { return(NULL); } // Must be at least minimal message.
    1f10:	63 30       	cpi	r22, 0x03	; 3
    1f12:	08 f4       	brcc	.+2      	; 0x1f16 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x22>
    1f14:	88 c0       	rjmp	.+272    	; 0x2026 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
    1f16:	87 e0       	ldi	r24, 0x07	; 7
    1f18:	f8 01       	movw	r30, r16
    1f1a:	11 92       	st	Z+, r1
    1f1c:	8a 95       	dec	r24
    1f1e:	e9 f7       	brne	.-6      	; 0x1f1a <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x26>
//#define MESSAGING_FULL_STATS_HEADER_MSBS 0x70
//#define MESSAGING_FULL_STATS_HEADER_MASK 0xf0
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_PRESENT 4
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_HIGH 2
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_SECURE 1
  if(MESSAGING_FULL_STATS_HEADER_MSBS != (header & MESSAGING_FULL_STATS_HEADER_MASK)) { return(NULL); } // Bad header.
    1f20:	f7 01       	movw	r30, r14
    1f22:	80 81       	ld	r24, Z
    1f24:	28 2f       	mov	r18, r24
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	c9 01       	movw	r24, r18
    1f2a:	80 7f       	andi	r24, 0xF0	; 240
    1f2c:	90 70       	andi	r25, 0x00	; 0
    1f2e:	80 37       	cpi	r24, 0x70	; 112
    1f30:	91 05       	cpc	r25, r1
    1f32:	09 f0       	breq	.+2      	; 0x1f36 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x42>
    1f34:	78 c0       	rjmp	.+240    	; 0x2026 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  if(0 != (header & MESSAGING_FULL_STATS_HEADER_BITS_ID_SECURE)) { return(NULL); } // TODO: cannot do secure messages yet.
    1f36:	20 fd       	sbrc	r18, 0
    1f38:	76 c0       	rjmp	.+236    	; 0x2026 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  // READ THE MESSAGE!
  // Pointer to next byte to read in message.
  register const uint8_t *b = buf;

  // Validate the message header and start to fill in structure.
  const uint8_t header = *b++;
    1f3a:	e7 01       	movw	r28, r14
    1f3c:	21 96       	adiw	r28, 0x01	; 1
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_SECURE 1
  if(MESSAGING_FULL_STATS_HEADER_MSBS != (header & MESSAGING_FULL_STATS_HEADER_MASK)) { return(NULL); } // Bad header.
  if(0 != (header & MESSAGING_FULL_STATS_HEADER_BITS_ID_SECURE)) { return(NULL); } // TODO: cannot do secure messages yet.
  // Extract ID if present.
  const bool containsID = (0 != (header & MESSAGING_FULL_STATS_HEADER_BITS_ID_PRESENT));
  if(containsID)
    1f3e:	22 ff       	sbrs	r18, 2
    1f40:	12 c0       	rjmp	.+36     	; 0x1f66 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x72>
    {
    content->containsID = true;
    1f42:	f8 01       	movw	r30, r16
    1f44:	80 81       	ld	r24, Z
    1f46:	81 60       	ori	r24, 0x01	; 1
    1f48:	80 83       	st	Z, r24
    const uint8_t idHigh = ((0 != (header & MESSAGING_FULL_STATS_HEADER_BITS_ID_HIGH)) ? 0x80 : 0);
    1f4a:	21 fd       	sbrc	r18, 1
    1f4c:	02 c0       	rjmp	.+4      	; 0x1f52 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x5e>
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	01 c0       	rjmp	.+2      	; 0x1f54 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x60>
    1f52:	90 e8       	ldi	r25, 0x80	; 128
    content->id0 = *b++ | idHigh;
    1f54:	f7 01       	movw	r30, r14
    1f56:	81 81       	ldd	r24, Z+1	; 0x01
    1f58:	89 2b       	or	r24, r25
    1f5a:	f8 01       	movw	r30, r16
    1f5c:	81 83       	std	Z+1, r24	; 0x01
    content->id1 = *b++ | idHigh;
    1f5e:	89 81       	ldd	r24, Y+1	; 0x01
    1f60:	98 2b       	or	r25, r24
    1f62:	92 83       	std	Z+2, r25	; 0x02
    1f64:	22 96       	adiw	r28, 0x02	; 2
    }

  // If next header is temp/power then extract it, else must be the flags header.
  if(MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MSBS == (*b & MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MASK))
    1f66:	88 81       	ld	r24, Y
    1f68:	80 7e       	andi	r24, 0xE0	; 224
    1f6a:	80 34       	cpi	r24, 0x40	; 64
    1f6c:	71 f4       	brne	.+28     	; 0x1f8a <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x96>
    {
    if(0 != (0x80 & b[1])) { return(NULL); } // Following byte does not have msb correctly cleared.
    1f6e:	89 81       	ldd	r24, Y+1	; 0x01
    1f70:	87 fd       	sbrc	r24, 7
    1f72:	59 c0       	rjmp	.+178    	; 0x2026 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
    extractTrailingMinimalStatsPayload(b, &(content->tempAndPower));
    1f74:	b8 01       	movw	r22, r16
    1f76:	6d 5f       	subi	r22, 0xFD	; 253
    1f78:	7f 4f       	sbci	r23, 0xFF	; 255
    1f7a:	ce 01       	movw	r24, r28
    1f7c:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <extractTrailingMinimalStatsPayload(unsigned char const*, trailingMinimalStatsPayload*)>
    b += 2;
    1f80:	22 96       	adiw	r28, 0x02	; 2
    content->containsTempAndPower = true;
    1f82:	f8 01       	movw	r30, r16
    1f84:	80 81       	ld	r24, Z
    1f86:	82 60       	ori	r24, 0x02	; 2
    1f88:	80 83       	st	Z, r24
    }

  // If next header is flags then extract it.
  // FIXME: risk of misinterpretting CRC.
  if(MESSAGING_FULL_STATS_FLAGS_HEADER_MSBS != (*b & MESSAGING_FULL_STATS_FLAGS_HEADER_MASK)) { return(NULL); } // Corrupt message.
    1f8a:	28 81       	ld	r18, Y
    1f8c:	42 2f       	mov	r20, r18
    1f8e:	50 e0       	ldi	r21, 0x00	; 0
    1f90:	ca 01       	movw	r24, r20
    1f92:	80 7e       	andi	r24, 0xE0	; 224
    1f94:	90 70       	andi	r25, 0x00	; 0
    1f96:	80 36       	cpi	r24, 0x60	; 96
    1f98:	91 05       	cpc	r25, r1
    1f9a:	09 f0       	breq	.+2      	; 0x1f9e <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0xaa>
    1f9c:	44 c0       	rjmp	.+136    	; 0x2026 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  const uint8_t flagsHeader = *b++;
    1f9e:	de 01       	movw	r26, r28
    1fa0:	11 96       	adiw	r26, 0x01	; 1
  content->occ = flagsHeader & 3;
    1fa2:	23 70       	andi	r18, 0x03	; 3
    1fa4:	f8 01       	movw	r30, r16
    1fa6:	86 81       	ldd	r24, Z+6	; 0x06
    1fa8:	8c 7f       	andi	r24, 0xFC	; 252
    1faa:	82 2b       	or	r24, r18
    1fac:	86 83       	std	Z+6, r24	; 0x06
  const bool containsAmbL = (0 != (flagsHeader & MESSAGING_FULL_STATS_FLAGS_HEADER_AMBL));
  if(containsAmbL)
    1fae:	43 ff       	sbrs	r20, 3
    1fb0:	0a c0       	rjmp	.+20     	; 0x1fc6 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0xd2>
    {
    const uint8_t ambL = *b++;
    1fb2:	99 81       	ldd	r25, Y+1	; 0x01
    if((0 == ambL) || (ambL == (uint8_t)0xff)) { return(NULL); } // Illegal value.
    1fb4:	89 2f       	mov	r24, r25
    1fb6:	81 50       	subi	r24, 0x01	; 1
    1fb8:	8e 3f       	cpi	r24, 0xFE	; 254
    1fba:	a8 f5       	brcc	.+106    	; 0x2026 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
  const uint8_t flagsHeader = *b++;
  content->occ = flagsHeader & 3;
  const bool containsAmbL = (0 != (flagsHeader & MESSAGING_FULL_STATS_FLAGS_HEADER_AMBL));
  if(containsAmbL)
    {
    const uint8_t ambL = *b++;
    1fbc:	11 96       	adiw	r26, 0x01	; 1
    if((0 == ambL) || (ambL == (uint8_t)0xff)) { return(NULL); } // Illegal value.
    content->ambL = ambL;
    1fbe:	95 83       	std	Z+5, r25	; 0x05
    content->containsAmbL = true;
    1fc0:	80 81       	ld	r24, Z
    1fc2:	84 60       	ori	r24, 0x04	; 4
    1fc4:	80 83       	st	Z, r24
    1fc6:	f7 01       	movw	r30, r14
    1fc8:	3f e7       	ldi	r19, 0x7F	; 127
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    1fca:	11 e0       	ldi	r17, 0x01	; 1
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
    1fcc:	77 e3       	ldi	r23, 0x37	; 55
    1fce:	21 c0       	rjmp	.+66     	; 0x2012 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x11e>
    }

  // Finish off by computing and checking the CRC (and return pointer to just after CRC).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    1fd0:	80 81       	ld	r24, Z
    1fd2:	60 e8       	ldi	r22, 0x80	; 128
    1fd4:	40 e0       	ldi	r20, 0x00	; 0
    1fd6:	50 e0       	ldi	r21, 0x00	; 0
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    1fd8:	c8 2f       	mov	r28, r24
    1fda:	d0 e0       	ldi	r29, 0x00	; 0
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
    1fdc:	83 2f       	mov	r24, r19
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	06 e0       	ldi	r16, 0x06	; 6
    1fe2:	96 95       	lsr	r25
    1fe4:	87 95       	ror	r24
    1fe6:	0a 95       	dec	r16
    1fe8:	e1 f7       	brne	.-8      	; 0x1fe2 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0xee>
    1fea:	28 2f       	mov	r18, r24
    1fec:	21 70       	andi	r18, 0x01	; 1
        if(0 != (datum & i)) { bit = !bit; }
    1fee:	86 2f       	mov	r24, r22
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	8c 23       	and	r24, r28
    1ff4:	9d 23       	and	r25, r29
    1ff6:	89 2b       	or	r24, r25
    1ff8:	09 f0       	breq	.+2      	; 0x1ffc <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x108>
    1ffa:	21 27       	eor	r18, r17
        crc <<= 1;
    1ffc:	33 0f       	add	r19, r19
        if(bit) { crc ^= 0x37; }
    1ffe:	21 11       	cpse	r18, r1
    2000:	37 27       	eor	r19, r23
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
    2002:	66 95       	lsr	r22
    2004:	4f 5f       	subi	r20, 0xFF	; 255
    2006:	5f 4f       	sbci	r21, 0xFF	; 255
    2008:	48 30       	cpi	r20, 0x08	; 8
    200a:	51 05       	cpc	r21, r1
    200c:	39 f7       	brne	.-50     	; 0x1fdc <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0xe8>
    }

  // Finish off by computing and checking the CRC (and return pointer to just after CRC).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    200e:	31 96       	adiw	r30, 0x01	; 1
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
        }
    return(crc & 0x7f);
    2010:	3f 77       	andi	r19, 0x7F	; 127
    }

  // Finish off by computing and checking the CRC (and return pointer to just after CRC).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    2012:	ea 17       	cp	r30, r26
    2014:	fb 07       	cpc	r31, r27
    2016:	e0 f2       	brcs	.-72     	; 0x1fd0 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0xdc>
  if(crc != *b++) { return(NULL); } // Bad CRC.
    2018:	8c 91       	ld	r24, X
    201a:	38 17       	cp	r19, r24
    201c:	21 f4       	brne	.+8      	; 0x2026 <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x132>
    201e:	9d 01       	movw	r18, r26
    2020:	2f 5f       	subi	r18, 0xFF	; 255
    2022:	3f 4f       	sbci	r19, 0xFF	; 255
    2024:	02 c0       	rjmp	.+4      	; 0x202a <decodeFullStatsMessageCore(unsigned char const*, unsigned char, stats_TX_level, bool, FullStatsMessageCore*)+0x136>

  return(b); // Point to just after CRC.
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	30 e0       	ldi	r19, 0x00	; 0
  }
    202a:	c9 01       	movw	r24, r18
    202c:	df 91       	pop	r29
    202e:	cf 91       	pop	r28
    2030:	1f 91       	pop	r17
    2032:	0f 91       	pop	r16
    2034:	ff 90       	pop	r15
    2036:	ef 90       	pop	r14
    2038:	08 95       	ret

0000203a <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)>:
  }

// Store minimal stats payload into (2-byte) buffer from payload struct (without CRC); values are coerced to fit as necessary..
//   * payload  must be non-null
// Used for minimal and full packet forms,
void writeTrailingMinimalStatsPayloadBody(uint8_t *buf, const trailingMinimalStatsPayload_t *payload)
    203a:	0f 93       	push	r16
    203c:	1f 93       	push	r17
    203e:	cf 93       	push	r28
    2040:	df 93       	push	r29
    2042:	8c 01       	movw	r16, r24
    2044:	eb 01       	movw	r28, r22
  {
#ifdef DEBUG
  if(NULL == payload) { panic(); }
    2046:	61 15       	cp	r22, r1
    2048:	71 05       	cpc	r23, r1
    204a:	11 f4       	brne	.+4      	; 0x2050 <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x16>
    204c:	0e 94 06 28 	call	0x500c	; 0x500c <panic()>
  DEBUG_SERIAL_PRINTFMT(minTempRepresentable, DEC);
  DEBUG_SERIAL_PRINT_FLASHSTRING(" max=");
  DEBUG_SERIAL_PRINTFMT(maxTempRepresentable, DEC);
  DEBUG_SERIAL_PRINTLN();
#endif
  int16_t temp16Cbiased = payload->tempC16;
    2050:	88 81       	ld	r24, Y
    2052:	29 81       	ldd	r18, Y+1	; 0x01
    2054:	92 2f       	mov	r25, r18
    2056:	9f 77       	andi	r25, 0x7F	; 127
    2058:	88 0f       	add	r24, r24
    205a:	99 1f       	adc	r25, r25
    205c:	95 95       	asr	r25
    205e:	87 95       	ror	r24
    2060:	26 e0       	ldi	r18, 0x06	; 6
    2062:	80 3c       	cpi	r24, 0xC0	; 192
    2064:	92 07       	cpc	r25, r18
    2066:	14 f0       	brlt	.+4      	; 0x206c <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x32>
    2068:	8f eb       	ldi	r24, 0xBF	; 191
    206a:	96 e0       	ldi	r25, 0x06	; 6
    206c:	ee ef       	ldi	r30, 0xFE	; 254
    206e:	80 3c       	cpi	r24, 0xC0	; 192
    2070:	9e 07       	cpc	r25, r30
    2072:	14 f4       	brge	.+4      	; 0x2078 <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x3e>
    2074:	80 ec       	ldi	r24, 0xC0	; 192
    2076:	9e ef       	ldi	r25, 0xFE	; 254
  if(temp16Cbiased < minTempRepresentable) { temp16Cbiased = minTempRepresentable; }
  else if(temp16Cbiased > maxTempRepresentable) { temp16Cbiased = maxTempRepresentable; }
  temp16Cbiased -= MESSAGING_TRAILING_MINIMAL_STATS_TEMP_BIAS; // Should now be strictly positive.
    2078:	9c 01       	movw	r18, r24
    207a:	20 5c       	subi	r18, 0xC0	; 192
    207c:	3e 4f       	sbci	r19, 0xFE	; 254
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("temp16Cbiased: ");
  DEBUG_SERIAL_PRINTFMT(temp16Cbiased, DEC);
  DEBUG_SERIAL_PRINTLN();
#endif
  const uint8_t byte0 = MESSAGING_TRAILING_MINIMAL_STATS_HEADER_MSBS | (payload->powerLow ? 0x10 : 0) | (temp16Cbiased & 0xf);
    207e:	89 81       	ldd	r24, Y+1	; 0x01
    2080:	87 fd       	sbrc	r24, 7
    2082:	02 c0       	rjmp	.+4      	; 0x2088 <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x4e>
    2084:	90 e4       	ldi	r25, 0x40	; 64
    2086:	01 c0       	rjmp	.+2      	; 0x208a <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x50>
    2088:	90 e5       	ldi	r25, 0x50	; 80
  const uint8_t byte1 = (uint8_t) (temp16Cbiased >> 4);
  buf[0] = byte0;
    208a:	82 2f       	mov	r24, r18
    208c:	8f 70       	andi	r24, 0x0F	; 15
    208e:	98 2b       	or	r25, r24
    2090:	f8 01       	movw	r30, r16
    2092:	90 83       	st	Z, r25
  buf[1] = byte1;
    2094:	84 e0       	ldi	r24, 0x04	; 4
    2096:	35 95       	asr	r19
    2098:	27 95       	ror	r18
    209a:	8a 95       	dec	r24
    209c:	e1 f7       	brne	.-8      	; 0x2096 <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)+0x5c>
    209e:	21 83       	std	Z+1, r18	; 0x01
#if 0 && defined(DEBUG)
  for(uint8_t i = 0; i < 2; ++i) { if(0 != (buf[i] & 0x80)) { panic(); } } // MSBits should be clear.
#endif
  }
    20a0:	df 91       	pop	r29
    20a2:	cf 91       	pop	r28
    20a4:	1f 91       	pop	r17
    20a6:	0f 91       	pop	r16
    20a8:	08 95       	ret

000020aa <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)>:
// Note that up to 7 bytes of payload is optimal for the CRC used.
// If successful, returns pointer to terminating 0xff at end of message.
// Returns null if failed (eg because of bad inputs or insufficient buffer space);
// part of the message may have have been written in this case and in particular the previous terminating 0xff may have been overwritten.
uint8_t *encodeFullStatsMessageCore(uint8_t * const buf, const uint8_t buflen, const stats_TX_level secLevel, const bool secureChannel,
    const FullStatsMessageCore_t * const content)
    20aa:	af 92       	push	r10
    20ac:	bf 92       	push	r11
    20ae:	cf 92       	push	r12
    20b0:	df 92       	push	r13
    20b2:	ef 92       	push	r14
    20b4:	ff 92       	push	r15
    20b6:	0f 93       	push	r16
    20b8:	1f 93       	push	r17
    20ba:	cf 93       	push	r28
    20bc:	df 93       	push	r29
    20be:	6c 01       	movw	r12, r24
    20c0:	5a 01       	movw	r10, r20
  {
  if(NULL == buf) { return(NULL); } // Could be an assert/panic instead at a pinch.
    20c2:	00 97       	sbiw	r24, 0x00	; 0
    20c4:	09 f4       	brne	.+2      	; 0x20c8 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x1e>
    20c6:	be c0       	rjmp	.+380    	; 0x2244 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x19a>
  if(NULL == content) { return(NULL); } // Could be an assert/panic instead at a pinch.
    20c8:	01 15       	cp	r16, r1
    20ca:	11 05       	cpc	r17, r1
    20cc:	09 f4       	brne	.+2      	; 0x20d0 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x26>
    20ce:	ba c0       	rjmp	.+372    	; 0x2244 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x19a>
  if(secureChannel) { return(NULL); } // TODO: cannot create secure message yet.
    20d0:	22 23       	and	r18, r18
    20d2:	09 f0       	breq	.+2      	; 0x20d6 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x2c>
    20d4:	b7 c0       	rjmp	.+366    	; 0x2244 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x19a>
  const uint8_t payloadLength =
      1 + // Initial header.
      (content->containsID ? 2 : 0) +
      (content->containsTempAndPower ? 2 : 0) +
      1 + // Flags header.
      (content->containsAmbL ? 1 : 0);
    20d6:	d8 01       	movw	r26, r16
    20d8:	8c 91       	ld	r24, X
    20da:	58 2f       	mov	r21, r24
    20dc:	51 70       	andi	r21, 0x01	; 1
    20de:	80 fd       	sbrc	r24, 0
    20e0:	02 c0       	rjmp	.+4      	; 0x20e6 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x3c>
    20e2:	41 e0       	ldi	r20, 0x01	; 1
    20e4:	01 c0       	rjmp	.+2      	; 0x20e8 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x3e>
    20e6:	43 e0       	ldi	r20, 0x03	; 3
    20e8:	f8 01       	movw	r30, r16
    20ea:	80 81       	ld	r24, Z
    20ec:	81 fd       	sbrc	r24, 1
    20ee:	02 c0       	rjmp	.+4      	; 0x20f4 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x4a>
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	01 c0       	rjmp	.+2      	; 0x20f6 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x4c>
    20f4:	32 e0       	ldi	r19, 0x02	; 2
    20f6:	d8 01       	movw	r26, r16
    20f8:	2c 91       	ld	r18, X
    20fa:	26 95       	lsr	r18
    20fc:	26 95       	lsr	r18
    20fe:	21 70       	andi	r18, 0x01	; 1
  if(buflen < payloadLength + 2)  { return(NULL); }
    2100:	82 2f       	mov	r24, r18
    2102:	8f 5f       	subi	r24, 0xFF	; 255
    2104:	84 0f       	add	r24, r20
    2106:	83 0f       	add	r24, r19
    2108:	e8 2e       	mov	r14, r24
    210a:	ff 24       	eor	r15, r15
    210c:	08 94       	sec
    210e:	e1 1c       	adc	r14, r1
    2110:	f1 1c       	adc	r15, r1
    2112:	86 2f       	mov	r24, r22
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	e8 16       	cp	r14, r24
    2118:	f9 06       	cpc	r15, r25
    211a:	0c f0       	brlt	.+2      	; 0x211e <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x74>
    211c:	93 c0       	rjmp	.+294    	; 0x2244 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x19a>

  // Validate some more detail.
  // ID
  if(content->containsID)
    211e:	55 23       	and	r21, r21
    2120:	71 f0       	breq	.+28     	; 0x213e <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x94>
    {
    if((content->id0 == (uint8_t)0xff) || (content->id1 == (uint8_t)0xff)) { return(NULL); } // ID bytes cannot be 0xff.
    2122:	11 96       	adiw	r26, 0x01	; 1
    2124:	9c 91       	ld	r25, X
    2126:	11 97       	sbiw	r26, 0x01	; 1
    2128:	9f 3f       	cpi	r25, 0xFF	; 255
    212a:	09 f4       	brne	.+2      	; 0x212e <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x84>
    212c:	8b c0       	rjmp	.+278    	; 0x2244 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x19a>
    212e:	12 96       	adiw	r26, 0x02	; 2
    2130:	8c 91       	ld	r24, X
    2132:	8f 3f       	cpi	r24, 0xFF	; 255
    2134:	09 f4       	brne	.+2      	; 0x2138 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x8e>
    2136:	86 c0       	rjmp	.+268    	; 0x2244 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x19a>
    if((content->id0 & 0x80) != (content->id1 & 0x80)) { return(NULL); } // ID top bits don't match.
    2138:	89 27       	eor	r24, r25
    213a:	87 fd       	sbrc	r24, 7
    213c:	83 c0       	rjmp	.+262    	; 0x2244 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x19a>
    }
  // Ambient light.
  if(content->containsAmbL)
    213e:	22 23       	and	r18, r18
    2140:	31 f0       	breq	.+12     	; 0x214e <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xa4>
    {
    if((content->ambL == 0) || (content->ambL == (uint8_t)0xff)) { return(NULL); } // Forbidden values.
    2142:	f8 01       	movw	r30, r16
    2144:	85 81       	ldd	r24, Z+5	; 0x05
    2146:	81 50       	subi	r24, 0x01	; 1
    2148:	8e 3f       	cpi	r24, 0xFE	; 254
    214a:	08 f0       	brcs	.+2      	; 0x214e <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xa4>
    214c:	7b c0       	rjmp	.+246    	; 0x2244 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x19a>
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_HIGH 2
//#define MESSAGING_FULL_STATS_HEADER_BITS_ID_SECURE 1
  const uint8_t header = MESSAGING_FULL_STATS_HEADER_MSBS |
      (content->containsID ? MESSAGING_FULL_STATS_HEADER_BITS_ID_PRESENT : 0) |
      ((content->containsID && (0 != (content->id0 & 0x80))) ? MESSAGING_FULL_STATS_HEADER_BITS_ID_HIGH : 0) |
      0; // TODO: cannot do secure messages yet.
    214e:	55 23       	and	r21, r21
    2150:	11 f4       	brne	.+4      	; 0x2156 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xac>
    2152:	80 e7       	ldi	r24, 0x70	; 112
    2154:	09 c0       	rjmp	.+18     	; 0x2168 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xbe>
    2156:	d8 01       	movw	r26, r16
    2158:	11 96       	adiw	r26, 0x01	; 1
    215a:	8c 91       	ld	r24, X
    215c:	87 ff       	sbrs	r24, 7
    215e:	03 c0       	rjmp	.+6      	; 0x2166 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xbc>
    2160:	92 e0       	ldi	r25, 0x02	; 2
    2162:	84 e7       	ldi	r24, 0x74	; 116
    2164:	02 c0       	rjmp	.+4      	; 0x216a <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xc0>
    2166:	84 e7       	ldi	r24, 0x74	; 116
    2168:	90 e0       	ldi	r25, 0x00	; 0
  *b++ = header;
    216a:	89 2b       	or	r24, r25
    216c:	e6 01       	movw	r28, r12
    216e:	89 93       	st	Y+, r24
 
  // Insert ID if requested.
  if(content->containsID)
    2170:	f8 01       	movw	r30, r16
    2172:	80 81       	ld	r24, Z
    2174:	80 ff       	sbrs	r24, 0
    2176:	09 c0       	rjmp	.+18     	; 0x218a <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xe0>
    {
    *b++ = content->id0 & 0x7f;
    2178:	81 81       	ldd	r24, Z+1	; 0x01
    217a:	8f 77       	andi	r24, 0x7F	; 127
    217c:	d6 01       	movw	r26, r12
    217e:	11 96       	adiw	r26, 0x01	; 1
    2180:	8c 93       	st	X, r24
    *b++ = content->id1 & 0x7f;
    2182:	82 81       	ldd	r24, Z+2	; 0x02
    2184:	8f 77       	andi	r24, 0x7F	; 127
    2186:	89 83       	std	Y+1, r24	; 0x01
    2188:	22 96       	adiw	r28, 0x02	; 2
    }

  // Insert basic temperature and power status if requested.
  if(content->containsTempAndPower)
    218a:	f8 01       	movw	r30, r16
    218c:	80 81       	ld	r24, Z
    218e:	81 ff       	sbrs	r24, 1
    2190:	07 c0       	rjmp	.+14     	; 0x21a0 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0xf6>
    {
    writeTrailingMinimalStatsPayloadBody(b, &(content->tempAndPower));
    2192:	b8 01       	movw	r22, r16
    2194:	6d 5f       	subi	r22, 0xFD	; 253
    2196:	7f 4f       	sbci	r23, 0xFF	; 255
    2198:	ce 01       	movw	r24, r28
    219a:	0e 94 1d 10 	call	0x203a	; 0x203a <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)>
    b += 2;
    219e:	22 96       	adiw	r28, 0x02	; 2
//#define MESSAGING_FULL_STATS_FLAGS_HEADER_AMBL 8
//#define MESSAGING_FULL_STATS_FLAGS_HEADER_RHP 4
  // Omit occupancy data unless encoding for a secure channel or at a very permissive stats TX security level.
  const uint8_t flagsHeader = MESSAGING_FULL_STATS_FLAGS_HEADER_MSBS |
    (content->containsAmbL ? MESSAGING_FULL_STATS_FLAGS_HEADER_AMBL : 0) |
    ((secureChannel || (secLevel <= stTXalwaysAll)) ? (content->occ & 3) : 0);
    21a0:	d8 01       	movw	r26, r16
    21a2:	8c 91       	ld	r24, X
    21a4:	82 fd       	sbrc	r24, 2
    21a6:	02 c0       	rjmp	.+4      	; 0x21ac <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x102>
    21a8:	90 e6       	ldi	r25, 0x60	; 96
    21aa:	01 c0       	rjmp	.+2      	; 0x21ae <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x104>
    21ac:	98 e6       	ldi	r25, 0x68	; 104
    21ae:	1a 14       	cp	r1, r10
    21b0:	1b 04       	cpc	r1, r11
    21b2:	14 f4       	brge	.+4      	; 0x21b8 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x10e>
    21b4:	80 e0       	ldi	r24, 0x00	; 0
    21b6:	03 c0       	rjmp	.+6      	; 0x21be <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x114>
    21b8:	f8 01       	movw	r30, r16
    21ba:	86 81       	ldd	r24, Z+6	; 0x06
    21bc:	83 70       	andi	r24, 0x03	; 3
  *b++ = flagsHeader;
    21be:	89 2b       	or	r24, r25
    21c0:	fe 01       	movw	r30, r28
    21c2:	81 93       	st	Z+, r24
  // Now insert extra fields as flagged.
  if(content->containsAmbL)
    21c4:	d8 01       	movw	r26, r16
    21c6:	8c 91       	ld	r24, X
    21c8:	82 ff       	sbrs	r24, 2
    21ca:	04 c0       	rjmp	.+8      	; 0x21d4 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x12a>
    { *b++ = content->ambL; }
    21cc:	15 96       	adiw	r26, 0x05	; 5
    21ce:	8c 91       	ld	r24, X
    21d0:	89 83       	std	Y+1, r24	; 0x01
    21d2:	31 96       	adiw	r30, 0x01	; 1
    21d4:	d6 01       	movw	r26, r12
    21d6:	3f e7       	ldi	r19, 0x7F	; 127
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    21d8:	11 e0       	ldi	r17, 0x01	; 1
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
    21da:	77 e3       	ldi	r23, 0x37	; 55
    21dc:	21 c0       	rjmp	.+66     	; 0x2220 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x176>
  // TODO: RH% etc

  // Finish off message by computing and appending the CRC and then terminating 0xff (and return pointer to 0xff).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    21de:	8c 91       	ld	r24, X
    21e0:	60 e8       	ldi	r22, 0x80	; 128
    21e2:	40 e0       	ldi	r20, 0x00	; 0
    21e4:	50 e0       	ldi	r21, 0x00	; 0
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    21e6:	c8 2f       	mov	r28, r24
    21e8:	d0 e0       	ldi	r29, 0x00	; 0
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
    21ea:	83 2f       	mov	r24, r19
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	06 e0       	ldi	r16, 0x06	; 6
    21f0:	96 95       	lsr	r25
    21f2:	87 95       	ror	r24
    21f4:	0a 95       	dec	r16
    21f6:	e1 f7       	brne	.-8      	; 0x21f0 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x146>
    21f8:	28 2f       	mov	r18, r24
    21fa:	21 70       	andi	r18, 0x01	; 1
        if(0 != (datum & i)) { bit = !bit; }
    21fc:	86 2f       	mov	r24, r22
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	8c 23       	and	r24, r28
    2202:	9d 23       	and	r25, r29
    2204:	89 2b       	or	r24, r25
    2206:	09 f0       	breq	.+2      	; 0x220a <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x160>
    2208:	21 27       	eor	r18, r17
        crc <<= 1;
    220a:	33 0f       	add	r19, r19
        if(bit) { crc ^= 0x37; }
    220c:	21 11       	cpse	r18, r1
    220e:	37 27       	eor	r19, r23
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
    2210:	66 95       	lsr	r22
    2212:	4f 5f       	subi	r20, 0xFF	; 255
    2214:	5f 4f       	sbci	r21, 0xFF	; 255
    2216:	48 30       	cpi	r20, 0x08	; 8
    2218:	51 05       	cpc	r21, r1
    221a:	39 f7       	brne	.-50     	; 0x21ea <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x140>
  // TODO: RH% etc

  // Finish off message by computing and appending the CRC and then terminating 0xff (and return pointer to 0xff).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    221c:	11 96       	adiw	r26, 0x01	; 1
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
        }
    return(crc & 0x7f);
    221e:	3f 77       	andi	r19, 0x7F	; 127
  // TODO: RH% etc

  // Finish off message by computing and appending the CRC and then terminating 0xff (and return pointer to 0xff).
  // Assumes that b now points just beyond the end of the payload.
  uint8_t crc = MESSAGING_FULL_STATS_CRC_INIT; // Initialisation.
  for(const uint8_t *p = buf; p < b; ) { crc = crc7_5B_update(crc, *p++); }
    2220:	ae 17       	cp	r26, r30
    2222:	bf 07       	cpc	r27, r31
    2224:	e0 f2       	brcs	.-72     	; 0x21de <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x134>
  *b++ = crc;
    2226:	ef 01       	movw	r28, r30
    2228:	39 93       	st	Y+, r19
  *b = 0xff;
    222a:	8f ef       	ldi	r24, 0xFF	; 255
    222c:	81 83       	std	Z+1, r24	; 0x01
#if 1 && defined(DEBUG)
  if(b - buf != payloadLength + 1) { panic(F("msg gen err")); }
    222e:	ce 01       	movw	r24, r28
    2230:	8c 19       	sub	r24, r12
    2232:	9d 09       	sbc	r25, r13
    2234:	8e 15       	cp	r24, r14
    2236:	9f 05       	cpc	r25, r15
    2238:	39 f0       	breq	.+14     	; 0x2248 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x19e>
    223a:	89 e5       	ldi	r24, 0x59	; 89
    223c:	91 e0       	ldi	r25, 0x01	; 1
    223e:	0e 94 17 28 	call	0x502e	; 0x502e <panic(__FlashStringHelper const*)>
    2242:	02 c0       	rjmp	.+4      	; 0x2248 <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)+0x19e>
    2244:	c0 e0       	ldi	r28, 0x00	; 0
    2246:	d0 e0       	ldi	r29, 0x00	; 0
#endif
  return(b);
  }
    2248:	ce 01       	movw	r24, r28
    224a:	df 91       	pop	r29
    224c:	cf 91       	pop	r28
    224e:	1f 91       	pop	r17
    2250:	0f 91       	pop	r16
    2252:	ff 90       	pop	r15
    2254:	ef 90       	pop	r14
    2256:	df 90       	pop	r13
    2258:	cf 90       	pop	r12
    225a:	bf 90       	pop	r11
    225c:	af 90       	pop	r10
    225e:	08 95       	ret

00002260 <writeTrailingMinimalStatsPayload(unsigned char*, trailingMinimalStatsPayload const*)>:
#endif
  }

// Store minimal stats payload into (3-byte) buffer from payload struct and append CRC; values are coerced to fit as necessary..
//   * payload  must be non-null
void writeTrailingMinimalStatsPayload(uint8_t *buf, const trailingMinimalStatsPayload_t *payload)
    2260:	cf 93       	push	r28
    2262:	df 93       	push	r29
    2264:	ec 01       	movw	r28, r24
  {
  writeTrailingMinimalStatsPayloadBody(buf, payload);
    2266:	0e 94 1d 10 	call	0x203a	; 0x203a <writeTrailingMinimalStatsPayloadBody(unsigned char*, trailingMinimalStatsPayload const*)>
  buf[2] = crc7_5B_update(buf[0], buf[1]);
    226a:	28 81       	ld	r18, Y
    226c:	89 81       	ldd	r24, Y+1	; 0x01
    226e:	60 e8       	ldi	r22, 0x80	; 128
    2270:	40 e0       	ldi	r20, 0x00	; 0
    2272:	50 e0       	ldi	r21, 0x00	; 0
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
        if(0 != (datum & i)) { bit = !bit; }
    2274:	e8 2f       	mov	r30, r24
    2276:	f0 e0       	ldi	r31, 0x00	; 0
    2278:	a1 e0       	ldi	r26, 0x01	; 1
        crc <<= 1;
        if(bit) { crc ^= 0x37; }
    227a:	77 e3       	ldi	r23, 0x37	; 55
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
        {
        bool bit = (0 != (crc & 0x40));
    227c:	82 2f       	mov	r24, r18
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	36 e0       	ldi	r19, 0x06	; 6
    2282:	96 95       	lsr	r25
    2284:	87 95       	ror	r24
    2286:	3a 95       	dec	r19
    2288:	e1 f7       	brne	.-8      	; 0x2282 <writeTrailingMinimalStatsPayload(unsigned char*, trailingMinimalStatsPayload const*)+0x22>
    228a:	38 2f       	mov	r19, r24
    228c:	31 70       	andi	r19, 0x01	; 1
        if(0 != (datum & i)) { bit = !bit; }
    228e:	86 2f       	mov	r24, r22
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	8e 23       	and	r24, r30
    2294:	9f 23       	and	r25, r31
    2296:	89 2b       	or	r24, r25
    2298:	09 f0       	breq	.+2      	; 0x229c <writeTrailingMinimalStatsPayload(unsigned char*, trailingMinimalStatsPayload const*)+0x3c>
    229a:	3a 27       	eor	r19, r26
        crc <<= 1;
    229c:	22 0f       	add	r18, r18
        if(bit) { crc ^= 0x37; }
    229e:	31 11       	cpse	r19, r1
    22a0:	27 27       	eor	r18, r23
 * TODO: provide table-driven optimised alternative,
 *     eg see http://www.tty1.net/pycrc/index_en.html
 */
uint8_t crc7_5B_update(uint8_t crc, const uint8_t datum)
    {
    for(uint8_t i = 0x80; i != 0; i >>= 1)
    22a2:	66 95       	lsr	r22
    22a4:	4f 5f       	subi	r20, 0xFF	; 255
    22a6:	5f 4f       	sbci	r21, 0xFF	; 255
    22a8:	48 30       	cpi	r20, 0x08	; 8
    22aa:	51 05       	cpc	r21, r1
    22ac:	39 f7       	brne	.-50     	; 0x227c <writeTrailingMinimalStatsPayload(unsigned char*, trailingMinimalStatsPayload const*)+0x1c>
// Store minimal stats payload into (3-byte) buffer from payload struct and append CRC; values are coerced to fit as necessary..
//   * payload  must be non-null
void writeTrailingMinimalStatsPayload(uint8_t *buf, const trailingMinimalStatsPayload_t *payload)
  {
  writeTrailingMinimalStatsPayloadBody(buf, payload);
  buf[2] = crc7_5B_update(buf[0], buf[1]);
    22ae:	2f 77       	andi	r18, 0x7F	; 127
    22b0:	2a 83       	std	Y+2, r18	; 0x02
#if 0 && defined(DEBUG)
  for(uint8_t i = 0; i < 3; ++i) { if(0 != (buf[i] & 0x80)) { panic(); } } // MSBits should be clear.
#endif
  }
    22b2:	df 91       	pop	r29
    22b4:	cf 91       	pop	r28
    22b6:	08 95       	ret

000022b8 <__vector_9>:
  timer2XtalIntSetup();
#endif
  }

#ifdef WAKEUP_32768HZ_XTAL
ISR(TIMER2_OVF_vect)
    22b8:	1f 92       	push	r1
    22ba:	0f 92       	push	r0
    22bc:	0f b6       	in	r0, 0x3f	; 63
    22be:	0f 92       	push	r0
    22c0:	11 24       	eor	r1, r1
    22c2:	2f 93       	push	r18
    22c4:	8f 93       	push	r24
    22c6:	9f 93       	push	r25
// must not enable interrupts, and must leave interrupt state as was on entry.
// If not being called from an ISR then locking round this call that works with the getXXX() functions should be considered.
static inline void tickSecondISR()
#endif
  {
  register uint_fast8_t sTemp = _secondsLT; // Avoid some redundant memory accesses.
    22c8:	80 91 c6 01 	lds	r24, 0x01C6
  sTemp += MAIN_TICK_S;
    22cc:	8e 5f       	subi	r24, 0xFE	; 254
  if(sTemp > 59)
    22ce:	8c 33       	cpi	r24, 0x3C	; 60
    22d0:	c8 f0       	brcs	.+50     	; 0x2304 <__vector_9+0x4c>
    {
    sTemp = 0; // Seconds roll.
    register uint_least16_t mTemp = _minutesSinceMidnightLT + 1; // Avoid some redundant memory accesses.
    22d2:	80 91 c7 01 	lds	r24, 0x01C7
    22d6:	90 91 c8 01 	lds	r25, 0x01C8
    22da:	01 96       	adiw	r24, 0x01	; 1
    if(mTemp > 1439)
    22dc:	25 e0       	ldi	r18, 0x05	; 5
    22de:	80 3a       	cpi	r24, 0xA0	; 160
    22e0:	92 07       	cpc	r25, r18
    22e2:	58 f0       	brcs	.+22     	; 0x22fa <__vector_9+0x42>
      {
      mTemp = 0; // Minutes/hours roll.
      // Increment the day.
      ++_daysSince1999LT; // Don't currently prevent roll.
    22e4:	80 91 c9 01 	lds	r24, 0x01C9
    22e8:	90 91 ca 01 	lds	r25, 0x01CA
    22ec:	01 96       	adiw	r24, 0x01	; 1
    22ee:	90 93 ca 01 	sts	0x01CA, r25
    22f2:	80 93 c9 01 	sts	0x01C9, r24
    22f6:	80 e0       	ldi	r24, 0x00	; 0
    22f8:	90 e0       	ldi	r25, 0x00	; 0
      }
    _minutesSinceMidnightLT = mTemp;
    22fa:	90 93 c8 01 	sts	0x01C8, r25
    22fe:	80 93 c7 01 	sts	0x01C7, r24
    2302:	80 e0       	ldi	r24, 0x00	; 0
    }
  _secondsLT = sTemp;
    2304:	80 93 c6 01 	sts	0x01C6, r24
#if defined(TWO_S_TICK_RTC_SUPPORT)
  tickDoubleSecondISR();
#else
  tickSecondISR();
#endif
  }
    2308:	9f 91       	pop	r25
    230a:	8f 91       	pop	r24
    230c:	2f 91       	pop	r18
    230e:	0f 90       	pop	r0
    2310:	0f be       	out	0x3f, r0	; 63
    2312:	0f 90       	pop	r0
    2314:	1f 90       	pop	r1
    2316:	18 95       	reti

00002318 <__vector_6>:
// May contain a little entropy concentrated in the least-significant bits, in part from WDT-vs-CPU-clock jitter, especially if not sleeping.
static volatile uint8_t _watchdogFired;

// Catch watchdog timer interrupt to automatically clear WDIE and WDIF.
// This allows use of watchdog for low-power timed sleep.
ISR(WDT_vect)
    2318:	1f 92       	push	r1
    231a:	0f 92       	push	r0
    231c:	0f b6       	in	r0, 0x3f	; 63
    231e:	0f 92       	push	r0
    2320:	11 24       	eor	r1, r1
    2322:	8f 93       	push	r24
    2324:	9f 93       	push	r25
    2326:	df 93       	push	r29
    2328:	cf 93       	push	r28
    232a:	0f 92       	push	r0
    232c:	cd b7       	in	r28, 0x3d	; 61
    232e:	de b7       	in	r29, 0x3e	; 62
  {
  // WDIE and WDIF are cleared in hardware upon entering this ISR.
  wdt_disable();
    2330:	88 e1       	ldi	r24, 0x18	; 24
    2332:	0f b6       	in	r0, 0x3f	; 63
    2334:	f8 94       	cli
    2336:	80 93 60 00 	sts	0x0060, r24
    233a:	10 92 60 00 	sts	0x0060, r1
    233e:	0f be       	out	0x3f, r0	; 63
  // Note: be careful of what is accessed from this ISR.
  // Capture some marginal entropy from the stack position.
  // 
  uint8_t x;
  _watchdogFired = ((uint8_t) 0x80) | ((uint8_t) (int) &x); // Ensure non-zero, retaining any entropy in ls bits.
    2340:	ce 01       	movw	r24, r28
    2342:	01 96       	adiw	r24, 0x01	; 1
    2344:	80 68       	ori	r24, 0x80	; 128
    2346:	80 93 bc 01 	sts	0x01BC, r24
  }
    234a:	0f 90       	pop	r0
    234c:	cf 91       	pop	r28
    234e:	df 91       	pop	r29
    2350:	9f 91       	pop	r25
    2352:	8f 91       	pop	r24
    2354:	0f 90       	pop	r0
    2356:	0f be       	out	0x3f, r0	; 63
    2358:	0f 90       	pop	r0
    235a:	1f 90       	pop	r1
    235c:	18 95       	reti

0000235e <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>:
// Note: inlining is prevented so as to avoid migrating anything into the section where the CPU is running slowly.
//
// Note: may be dubious to run CPU clock less than 4x 32768Hz crystal speed,
// eg at 31250Hz for 8MHz RC clock and max prescale.
// Don't access timer 2 regs at low CPU speed, eg in ISRs.
__attribute__ ((noinline)) void sleepLowPowerLoopsMinCPUSpeed(uint16_t loops)
    235e:	fc 01       	movw	r30, r24
  {
  const clock_div_t prescale = clock_prescale_get(); // Capture current prescale value.
    2360:	80 91 61 00 	lds	r24, 0x0061
  clock_prescale_set(MAX_CPU_PRESCALE); // Reduce clock speed (increase prescale) as far as possible.
    2364:	28 e0       	ldi	r18, 0x08	; 8
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	40 e8       	ldi	r20, 0x80	; 128
    236a:	0f b6       	in	r0, 0x3f	; 63
    236c:	f8 94       	cli
    236e:	40 93 61 00 	sts	0x0061, r20
    2372:	20 93 61 00 	sts	0x0061, r18
    2376:	0f be       	out	0x3f, r0	; 63
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    2378:	31 97       	sbiw	r30, 0x01	; 1
    237a:	f1 f7       	brne	.-4      	; 0x2378 <sleepLowPowerLoopsMinCPUSpeed(unsigned int)+0x1a>
  _delay_loop_2(loops); // Burn cycles...
  clock_prescale_set(prescale); // Restore clock prescale.
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	8f 70       	andi	r24, 0x0F	; 15
    2380:	90 70       	andi	r25, 0x00	; 0
    2382:	20 e8       	ldi	r18, 0x80	; 128
    2384:	0f b6       	in	r0, 0x3f	; 63
    2386:	f8 94       	cli
    2388:	20 93 61 00 	sts	0x0061, r18
    238c:	80 93 61 00 	sts	0x0061, r24
    2390:	0f be       	out	0x3f, r0	; 63
  }
    2392:	08 95       	ret

00002394 <sleepPwrSaveWithBODDisabled()>:
#endif

// Sleep with BOD disabled in power-save mode; will wake on any interrupt.
void sleepPwrSaveWithBODDisabled()
  {
  set_sleep_mode(SLEEP_MODE_PWR_SAVE); // Stop all but timer 2 and watchdog when sleeping.
    2394:	83 b7       	in	r24, 0x33	; 51
    2396:	81 7f       	andi	r24, 0xF1	; 241
    2398:	86 60       	ori	r24, 0x06	; 6
    239a:	83 bf       	out	0x33, r24	; 51
  cli();
    239c:	f8 94       	cli
  sleep_enable();
    239e:	83 b7       	in	r24, 0x33	; 51
    23a0:	81 60       	ori	r24, 0x01	; 1
    23a2:	83 bf       	out	0x33, r24	; 51
  sleep_bod_disable();
    23a4:	85 b7       	in	r24, 0x35	; 53
    23a6:	80 66       	ori	r24, 0x60	; 96
    23a8:	85 bf       	out	0x35, r24	; 53
    23aa:	8f 7d       	andi	r24, 0xDF	; 223
    23ac:	85 bf       	out	0x35, r24	; 53
  sei();
    23ae:	78 94       	sei
  sleep_cpu();
    23b0:	88 95       	sleep
  sleep_disable();
    23b2:	83 b7       	in	r24, 0x33	; 51
    23b4:	8e 7f       	andi	r24, 0xFE	; 254
    23b6:	83 bf       	out	0x33, r24	; 51
  sei();
    23b8:	78 94       	sei
  }
    23ba:	08 95       	ret

000023bc <nap(signed char)>:
//   * watchdogSleep is one of the WDTO_XX values from <avr/wdt.h>
// May be useful to call minimsePowerWithoutSleep() first, when not needing any modules left on.
void nap(int_fast8_t watchdogSleep)
  {
  // Watchdog should (already) be disabled on entry.
  _watchdogFired = 0;
    23bc:	10 92 bc 01 	sts	0x01BC, r1

  wdt_enable(watchdogSleep);
    23c0:	83 fd       	sbrc	r24, 3
    23c2:	02 c0       	rjmp	.+4      	; 0x23c8 <nap(signed char)+0xc>
    23c4:	28 e0       	ldi	r18, 0x08	; 8
    23c6:	01 c0       	rjmp	.+2      	; 0x23ca <nap(signed char)+0xe>
    23c8:	28 e2       	ldi	r18, 0x28	; 40
    23ca:	87 70       	andi	r24, 0x07	; 7
    23cc:	28 2b       	or	r18, r24
    23ce:	88 e1       	ldi	r24, 0x18	; 24
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	0f b6       	in	r0, 0x3f	; 63
    23d4:	f8 94       	cli
    23d6:	a8 95       	wdr
    23d8:	80 93 60 00 	sts	0x0060, r24
    23dc:	0f be       	out	0x3f, r0	; 63
    23de:	20 93 60 00 	sts	0x0060, r18
  WDTCSR |= (1 << WDIE);
    23e2:	80 91 60 00 	lds	r24, 0x0060
    23e6:	80 64       	ori	r24, 0x40	; 64
    23e8:	80 93 60 00 	sts	0x0060, r24
#endif

// Sleep with BOD disabled in power-save mode; will wake on any interrupt.
void sleepPwrSaveWithBODDisabled()
  {
  set_sleep_mode(SLEEP_MODE_PWR_SAVE); // Stop all but timer 2 and watchdog when sleeping.
    23ec:	83 b7       	in	r24, 0x33	; 51
    23ee:	81 7f       	andi	r24, 0xF1	; 241
    23f0:	86 60       	ori	r24, 0x06	; 6
    23f2:	83 bf       	out	0x33, r24	; 51
  cli();
    23f4:	f8 94       	cli
  sleep_enable();
    23f6:	83 b7       	in	r24, 0x33	; 51
    23f8:	81 60       	ori	r24, 0x01	; 1
    23fa:	83 bf       	out	0x33, r24	; 51
  sleep_bod_disable();
    23fc:	85 b7       	in	r24, 0x35	; 53
    23fe:	80 66       	ori	r24, 0x60	; 96
    2400:	85 bf       	out	0x35, r24	; 53
    2402:	8f 7d       	andi	r24, 0xDF	; 223
    2404:	85 bf       	out	0x35, r24	; 53
  sei();
    2406:	78 94       	sei
  sleep_cpu();
    2408:	88 95       	sleep
  sleep_disable();
    240a:	83 b7       	in	r24, 0x33	; 51
    240c:	8e 7f       	andi	r24, 0xFE	; 254
    240e:	83 bf       	out	0x33, r24	; 51
  sei();
    2410:	78 94       	sei

  // Keep sleeping until watchdog actually fires.
  for( ; ; )
    {
    sleepPwrSaveWithBODDisabled();
    if(0 != _watchdogFired)
    2412:	80 91 bc 01 	lds	r24, 0x01BC
    2416:	88 23       	and	r24, r24
    2418:	49 f3       	breq	.-46     	; 0x23ec <nap(signed char)+0x30>
      {
      wdt_disable(); // Avoid spurious wakeup later.
    241a:	88 e1       	ldi	r24, 0x18	; 24
    241c:	0f b6       	in	r0, 0x3f	; 63
    241e:	f8 94       	cli
    2420:	80 93 60 00 	sts	0x0060, r24
    2424:	10 92 60 00 	sts	0x0060, r1
    2428:	0f be       	out	0x3f, r0	; 63
      return; // All done!
      }
    }
 }
    242a:	08 95       	ret

0000242c <idleCPU(signed char)>:
// Should reduce power consumption vs spinning the CPU >> 3x, though not nearly as much as nap().
// True iff watchdog timer expired; false if something else woke the CPU.
bool idleCPU(const int_fast8_t watchdogSleep)
  {
  // Watchdog should (already) be disabled on entry.
  _watchdogFired = 0;
    242c:	10 92 bc 01 	sts	0x01BC, r1
  wdt_enable(watchdogSleep);
    2430:	83 fd       	sbrc	r24, 3
    2432:	02 c0       	rjmp	.+4      	; 0x2438 <idleCPU(signed char)+0xc>
    2434:	28 e0       	ldi	r18, 0x08	; 8
    2436:	01 c0       	rjmp	.+2      	; 0x243a <idleCPU(signed char)+0xe>
    2438:	28 e2       	ldi	r18, 0x28	; 40
    243a:	87 70       	andi	r24, 0x07	; 7
    243c:	28 2b       	or	r18, r24
    243e:	88 e1       	ldi	r24, 0x18	; 24
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	0f b6       	in	r0, 0x3f	; 63
    2444:	f8 94       	cli
    2446:	a8 95       	wdr
    2448:	80 93 60 00 	sts	0x0060, r24
    244c:	0f be       	out	0x3f, r0	; 63
    244e:	20 93 60 00 	sts	0x0060, r18
  WDTCSR |= (1 << WDIE);
    2452:	80 91 60 00 	lds	r24, 0x0060
    2456:	80 64       	ori	r24, 0x40	; 64
    2458:	80 93 60 00 	sts	0x0060, r24
  set_sleep_mode(SLEEP_MODE_IDLE); // Leave everything running but the CPU...
    245c:	83 b7       	in	r24, 0x33	; 51
    245e:	81 7f       	andi	r24, 0xF1	; 241
    2460:	83 bf       	out	0x33, r24	; 51
  sleep_mode();
    2462:	83 b7       	in	r24, 0x33	; 51
    2464:	81 60       	ori	r24, 0x01	; 1
    2466:	83 bf       	out	0x33, r24	; 51
    2468:	88 95       	sleep
    246a:	83 b7       	in	r24, 0x33	; 51
    246c:	8e 7f       	andi	r24, 0xFE	; 254
    246e:	83 bf       	out	0x33, r24	; 51
  //sleep_disable();
  wdt_disable();
    2470:	88 e1       	ldi	r24, 0x18	; 24
    2472:	0f b6       	in	r0, 0x3f	; 63
    2474:	f8 94       	cli
    2476:	80 93 60 00 	sts	0x0060, r24
    247a:	10 92 60 00 	sts	0x0060, r1
    247e:	0f be       	out	0x3f, r0	; 63
  return(0 != _watchdogFired);
    2480:	80 91 bc 01 	lds	r24, 0x01BC
    2484:	81 11       	cpse	r24, r1
    2486:	81 e0       	ldi	r24, 0x01	; 1
  }
    2488:	08 95       	ret

0000248a <__vector_21>:
  }


// Allow wake from (lower-power) sleep while ADC is running.
static volatile bool ADC_complete;
ISR(ADC_vect) { ADC_complete = true; }
    248a:	1f 92       	push	r1
    248c:	0f 92       	push	r0
    248e:	0f b6       	in	r0, 0x3f	; 63
    2490:	0f 92       	push	r0
    2492:	11 24       	eor	r1, r1
    2494:	8f 93       	push	r24
    2496:	81 e0       	ldi	r24, 0x01	; 1
    2498:	80 93 c0 01 	sts	0x01C0, r24
    249c:	8f 91       	pop	r24
    249e:	0f 90       	pop	r0
    24a0:	0f be       	out	0x3f, r0	; 63
    24a2:	0f 90       	pop	r0
    24a4:	1f 90       	pop	r1
    24a6:	18 95       	reti

000024a8 <_analogueNoiseReducedReadM(unsigned char, signed char)>:

// Read ADC/analogue input with reduced noise if possible, in range [0,1023].
//   * admux  is the value to set ADMUX to
//   * samples  maximum number of samples to take (if one, nap() before); strictly positive
// Sets sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
static uint16_t _analogueNoiseReducedReadM(uint8_t admux, int8_t samples = 3)
    24a8:	0f 93       	push	r16
    24aa:	1f 93       	push	r17
    24ac:	98 2f       	mov	r25, r24
    24ae:	16 2f       	mov	r17, r22
// If ADC was disabled, power it up, do Serial.begin(), and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownSerial() may be advisable.
bool powerUpADCIfDisabled()
  {
  if(!(PRR & _BV(PRADC))) { return(false); }
    24b0:	80 91 64 00 	lds	r24, 0x0064
    24b4:	80 fd       	sbrc	r24, 0
    24b6:	02 c0       	rjmp	.+4      	; 0x24bc <_analogueNoiseReducedReadM(unsigned char, signed char)+0x14>
    24b8:	00 e0       	ldi	r16, 0x00	; 0
    24ba:	0b c0       	rjmp	.+22     	; 0x24d2 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x2a>
  PRR &= ~_BV(PRADC); // Enable the ADC.
    24bc:	80 91 64 00 	lds	r24, 0x0064
    24c0:	8e 7f       	andi	r24, 0xFE	; 254
    24c2:	80 93 64 00 	sts	0x0064, r24
  ADCSRA |= _BV(ADEN);
    24c6:	80 91 7a 00 	lds	r24, 0x007A
    24ca:	80 68       	ori	r24, 0x80	; 128
    24cc:	80 93 7a 00 	sts	0x007A, r24
    24d0:	01 e0       	ldi	r16, 0x01	; 1
//   * samples  maximum number of samples to take (if one, nap() before); strictly positive
// Sets sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
static uint16_t _analogueNoiseReducedReadM(uint8_t admux, int8_t samples = 3)
  {
  const bool neededEnable = powerUpADCIfDisabled();
  ADMUX = admux;
    24d2:	90 93 7c 00 	sts	0x007C, r25
  if(samples < 2) { nap(WDTO_15MS); } // Allow plenty of time for things to settle if not taking multiple samples.
    24d6:	12 30       	cpi	r17, 0x02	; 2
    24d8:	1c f4       	brge	.+6      	; 0x24e0 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x38>
    24da:	80 e0       	ldi	r24, 0x00	; 0
    24dc:	0e 94 de 11 	call	0x23bc	; 0x23bc <nap(signed char)>
  set_sleep_mode(SLEEP_MODE_ADC);
    24e0:	83 b7       	in	r24, 0x33	; 51
    24e2:	81 7f       	andi	r24, 0xF1	; 241
    24e4:	82 60       	ori	r24, 0x02	; 2
    24e6:	83 bf       	out	0x33, r24	; 51
  ADCSRB = 0; // Enable free-running mode.
    24e8:	10 92 7b 00 	sts	0x007B, r1
  bitWrite(ADCSRA, ADATE, (samples>1)); // Enable ADC auto-trigger iff wanting multiple samples.
    24ec:	12 30       	cpi	r17, 0x02	; 2
    24ee:	24 f0       	brlt	.+8      	; 0x24f8 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x50>
    24f0:	80 91 7a 00 	lds	r24, 0x007A
    24f4:	80 62       	ori	r24, 0x20	; 32
    24f6:	03 c0       	rjmp	.+6      	; 0x24fe <_analogueNoiseReducedReadM(unsigned char, signed char)+0x56>
    24f8:	80 91 7a 00 	lds	r24, 0x007A
    24fc:	8f 7d       	andi	r24, 0xDF	; 223
    24fe:	80 93 7a 00 	sts	0x007A, r24
  bitSet(ADCSRA, ADIE); // Turn on ADC interrupt.
    2502:	80 91 7a 00 	lds	r24, 0x007A
    2506:	88 60       	ori	r24, 0x08	; 8
    2508:	80 93 7a 00 	sts	0x007A, r24
  bitSet(ADCSRA, ADSC); // Start conversion(s).
    250c:	80 91 7a 00 	lds	r24, 0x007A
    2510:	80 64       	ori	r24, 0x40	; 64
    2512:	80 93 7a 00 	sts	0x007A, r24
    2516:	4f ef       	ldi	r20, 0xFF	; 255
    2518:	9f ef       	ldi	r25, 0xFF	; 255
    251a:	21 c0       	rjmp	.+66     	; 0x255e <_analogueNoiseReducedReadM(unsigned char, signed char)+0xb6>
  uint8_t oldADCL = 0xff;
  uint8_t oldADCH = 0xff; // Ensure that a second sample will get taken if multiple samples have been requested.
  // Usually take several readings to improve accuracy.  Discard all but the last...
  while(--samples >= 0)
      {
      ADC_complete = false;
    251c:	10 92 c0 01 	sts	0x01C0, r1
    2520:	07 c0       	rjmp	.+14     	; 0x2530 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x88>
      while(!ADC_complete) { sleep_mode(); }
    2522:	83 b7       	in	r24, 0x33	; 51
    2524:	81 60       	ori	r24, 0x01	; 1
    2526:	83 bf       	out	0x33, r24	; 51
    2528:	88 95       	sleep
    252a:	83 b7       	in	r24, 0x33	; 51
    252c:	8e 7f       	andi	r24, 0xFE	; 254
    252e:	83 bf       	out	0x33, r24	; 51
    2530:	80 91 c0 01 	lds	r24, 0x01C0
    2534:	88 23       	and	r24, r24
    2536:	a9 f3       	breq	.-22     	; 0x2522 <_analogueNoiseReducedReadM(unsigned char, signed char)+0x7a>
      const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
    2538:	30 91 78 00 	lds	r19, 0x0078
      const uint8_t h = ADCH; // Capture the high byte.
    253c:	20 91 79 00 	lds	r18, 0x0079
      if((h == oldADCH) && (l == oldADCL)) { break; } // Stop now if result seems to have settled.
    2540:	29 17       	cp	r18, r25
    2542:	11 f4       	brne	.+4      	; 0x2548 <_analogueNoiseReducedReadM(unsigned char, signed char)+0xa0>
    2544:	34 17       	cp	r19, r20
    2546:	71 f0       	breq	.+28     	; 0x2564 <_analogueNoiseReducedReadM(unsigned char, signed char)+0xbc>
      oldADCL = l;
      oldADCH = h;
      _adcNoise = (_adcNoise >> 1) + (l ^ h) + (__TIME__[7] & 0xf); // Capture a little entropy.
    2548:	90 91 bd 01 	lds	r25, 0x01BD
    254c:	82 2f       	mov	r24, r18
    254e:	83 27       	eor	r24, r19
    2550:	8d 5f       	subi	r24, 0xFD	; 253
    2552:	96 95       	lsr	r25
    2554:	98 0f       	add	r25, r24
    2556:	90 93 bd 01 	sts	0x01BD, r25
    255a:	92 2f       	mov	r25, r18
    255c:	43 2f       	mov	r20, r19
  bitSet(ADCSRA, ADIE); // Turn on ADC interrupt.
  bitSet(ADCSRA, ADSC); // Start conversion(s).
  uint8_t oldADCL = 0xff;
  uint8_t oldADCH = 0xff; // Ensure that a second sample will get taken if multiple samples have been requested.
  // Usually take several readings to improve accuracy.  Discard all but the last...
  while(--samples >= 0)
    255e:	11 50       	subi	r17, 0x01	; 1
    2560:	17 ff       	sbrs	r17, 7
    2562:	dc cf       	rjmp	.-72     	; 0x251c <_analogueNoiseReducedReadM(unsigned char, signed char)+0x74>
      if((h == oldADCH) && (l == oldADCL)) { break; } // Stop now if result seems to have settled.
      oldADCL = l;
      oldADCH = h;
      _adcNoise = (_adcNoise >> 1) + (l ^ h) + (__TIME__[7] & 0xf); // Capture a little entropy.
      }
  bitClear(ADCSRA, ADIE); // Turn off ADC interrupt.
    2564:	80 91 7a 00 	lds	r24, 0x007A
    2568:	87 7f       	andi	r24, 0xF7	; 247
    256a:	80 93 7a 00 	sts	0x007A, r24
  bitClear(ADCSRA, ADATE); // Turn off ADC auto-trigger.
    256e:	80 91 7a 00 	lds	r24, 0x007A
    2572:	8f 7d       	andi	r24, 0xDF	; 223
    2574:	80 93 7a 00 	sts	0x007A, r24
  //sleep_disable();
  const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
    2578:	20 91 78 00 	lds	r18, 0x0078
  const uint8_t h = ADCH; // Capture the high byte.
    257c:	40 91 79 00 	lds	r20, 0x0079
  if(neededEnable) { powerDownADC(); }
    2580:	00 23       	and	r16, r16
    2582:	51 f0       	breq	.+20     	; 0x2598 <_analogueNoiseReducedReadM(unsigned char, signed char)+0xf0>
  }
    
// Power ADC down.
void powerDownADC()
  {
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
    2584:	80 91 7a 00 	lds	r24, 0x007A
    2588:	8f 77       	andi	r24, 0x7F	; 127
    258a:	80 93 7a 00 	sts	0x007A, r24
  PRR |= _BV(PRADC); // Disable the ADC.
    258e:	80 91 64 00 	lds	r24, 0x0064
    2592:	81 60       	ori	r24, 0x01	; 1
    2594:	80 93 64 00 	sts	0x0064, r24
    2598:	94 2f       	mov	r25, r20
    259a:	80 e0       	ldi	r24, 0x00	; 0
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	28 2b       	or	r18, r24
    25a0:	39 2b       	or	r19, r25
  //sleep_disable();
  const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
  const uint8_t h = ADCH; // Capture the high byte.
  if(neededEnable) { powerDownADC(); }
  return((h << 8) | l);
  }
    25a2:	c9 01       	movw	r24, r18
    25a4:	1f 91       	pop	r17
    25a6:	0f 91       	pop	r16
    25a8:	08 95       	ret

000025aa <analogueNoiseReducedRead(int, unsigned char)>:
// Read ADC/analogue input with reduced noise if possible, in range [0,1023].
//   * mode  is the analogue reference, eg DEFAULT (Vcc).
// May set sleep mode to SLEEP_MODE_ADC, and disable sleep on exit.
// Nominally equivalent to analogReference(mode); return(analogRead(pinNumber));
uint16_t analogueNoiseReducedRead(int pinNumber, uint8_t mode)
  { return(_analogueNoiseReducedReadM((mode << 6) | (pinNumber & 7))); }
    25aa:	62 95       	swap	r22
    25ac:	66 0f       	add	r22, r22
    25ae:	66 0f       	add	r22, r22
    25b0:	60 7c       	andi	r22, 0xC0	; 192
    25b2:	87 70       	andi	r24, 0x07	; 7
    25b4:	86 2b       	or	r24, r22
    25b6:	63 e0       	ldi	r22, 0x03	; 3
    25b8:	0e 94 54 12 	call	0x24a8	; 0x24a8 <_analogueNoiseReducedReadM(unsigned char, signed char)>
    25bc:	08 95       	ret

000025be <isBatteryLow()>:

// True if battery voltage was low when last read.
// For a 2xAA NiMH configuration this is ~2.0V, where the BOD may force a reset at 1.8V.
static bool batteryLow; // Initially false.
bool isBatteryLow() { return(batteryLow); }
    25be:	80 91 c1 01 	lds	r24, 0x01C1
    25c2:	08 95       	ret

000025c4 <getBatterymV()>:
// Last-read battery voltage.
static uint16_t batterymV;

// Get power supply voltage in mV as last read by readBatterymV(); non-negative, intially zero until first readBatterymV().
uint16_t getBatterymV() { return(batterymV); }
    25c4:	80 91 be 01 	lds	r24, 0x01BE
    25c8:	90 91 bf 01 	lds	r25, 0x01BF
    25cc:	08 95       	ret

000025ce <read1V1wrtBattery()>:

// Measure internal bandgap (1.1V nominal, 1.0--1.2V) as fraction of Vcc [0,1023].
uint16_t read1V1wrtBattery() { return(_analogueNoiseReducedReadM(_BV(REFS0) | 14)); }
    25ce:	8e e4       	ldi	r24, 0x4E	; 78
    25d0:	63 e0       	ldi	r22, 0x03	; 3
    25d2:	0e 94 54 12 	call	0x24a8	; 0x24a8 <_analogueNoiseReducedReadM(unsigned char, signed char)>
    25d6:	08 95       	ret

000025d8 <readBatterymV()>:
// Only accurate to +/- 10%.
// May set sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
uint16_t readBatterymV()
  {
  // Measure internal bandgap (1.1V nominal, 1.0--1.2V) as fraction of Vcc.
  const uint16_t raw = read1V1wrtBattery();
    25d8:	0e 94 e7 12 	call	0x25ce	; 0x25ce <read1V1wrtBattery()>
    25dc:	bc 01       	movw	r22, r24
  // If Vcc was 1.1V ADC would give 1023.
  // If Vcc was 2.2V ADC would give 511.
  const uint16_t result = ((1023U<<6) / raw) * (1100U>>6);
    25de:	80 ec       	ldi	r24, 0xC0	; 192
    25e0:	9f ef       	ldi	r25, 0xFF	; 255
    25e2:	0e 94 e3 33 	call	0x67c6	; 0x67c6 <__udivmodhi4>
    25e6:	9b 01       	movw	r18, r22
    25e8:	84 e0       	ldi	r24, 0x04	; 4
    25ea:	22 0f       	add	r18, r18
    25ec:	33 1f       	adc	r19, r19
    25ee:	8a 95       	dec	r24
    25f0:	e1 f7       	brne	.-8      	; 0x25ea <readBatterymV()+0x12>
    25f2:	26 0f       	add	r18, r22
    25f4:	37 1f       	adc	r19, r23
  batterymV = result;
    25f6:	30 93 bf 01 	sts	0x01BF, r19
    25fa:	20 93 be 01 	sts	0x01BE, r18
  batteryLow = (result < 2000); // Suitable for 2xAA NiMH, with BOD at 1.8V.
    25fe:	10 92 c1 01 	sts	0x01C1, r1
    2602:	87 e0       	ldi	r24, 0x07	; 7
    2604:	20 3d       	cpi	r18, 0xD0	; 208
    2606:	38 07       	cpc	r19, r24
    2608:	18 f4       	brcc	.+6      	; 0x2610 <readBatterymV()+0x38>
    260a:	81 e0       	ldi	r24, 0x01	; 1
    260c:	80 93 c1 01 	sts	0x01C1, r24
  DEBUG_SERIAL_PRINT(raw);
  if(batteryLow) { DEBUG_SERIAL_PRINT_FLASHSTRING(" LOW"); }
  DEBUG_SERIAL_PRINTLN();
#endif
  return(result);
  }
    2610:	c9 01       	movw	r24, r18
    2612:	08 95       	ret

00002614 <noisyADCRead()>:
// If ADC was disabled, power it up, do Serial.begin(), and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownSerial() may be advisable.
bool powerUpADCIfDisabled()
  {
  if(!(PRR & _BV(PRADC))) { return(false); }
    2614:	80 91 64 00 	lds	r24, 0x0064
    2618:	80 fd       	sbrc	r24, 0
    261a:	02 c0       	rjmp	.+4      	; 0x2620 <noisyADCRead()+0xc>
    261c:	40 e0       	ldi	r20, 0x00	; 0
    261e:	0b c0       	rjmp	.+22     	; 0x2636 <noisyADCRead()+0x22>
  PRR &= ~_BV(PRADC); // Enable the ADC.
    2620:	80 91 64 00 	lds	r24, 0x0064
    2624:	8e 7f       	andi	r24, 0xFE	; 254
    2626:	80 93 64 00 	sts	0x0064, r24
  ADCSRA |= _BV(ADEN);
    262a:	80 91 7a 00 	lds	r24, 0x007A
    262e:	80 68       	ori	r24, 0x80	; 128
    2630:	80 93 7a 00 	sts	0x007A, r24
    2634:	41 e0       	ldi	r20, 0x01	; 1
// If defined, update _adcNoise value to make noisyADCRead() output at least a poor PRNG if called in a loop, though might disguise underlying problems.
//#define CATCH_OTHER_NOISE_DURING_NAR // May hide underlying weakness if defined.
uint8_t noisyADCRead()
  {
  const bool neededEnable = powerUpADCIfDisabled();
  ADMUX = _BV(REFS0) | 14; // Bandgap vs Vcc.
    2636:	8e e4       	ldi	r24, 0x4E	; 78
    2638:	80 93 7c 00 	sts	0x007C, r24
  ADCSRB = 0; // Enable free-running mode.
    263c:	10 92 7b 00 	sts	0x007B, r1
  bitWrite(ADCSRA, ADATE, 1); // Multiple samples required.
    2640:	80 91 7a 00 	lds	r24, 0x007A
    2644:	80 62       	ori	r24, 0x20	; 32
    2646:	80 93 7a 00 	sts	0x007A, r24
  ADC_complete = false;
    264a:	10 92 c0 01 	sts	0x01C0, r1
  bitSet(ADCSRA, ADIE); // Turn on ADC interrupt.
    264e:	80 91 7a 00 	lds	r24, 0x007A
    2652:	88 60       	ori	r24, 0x08	; 8
    2654:	80 93 7a 00 	sts	0x007A, r24
  bitSet(ADCSRA, ADSC); // Start conversion.
    2658:	80 91 7a 00 	lds	r24, 0x007A
    265c:	80 64       	ori	r24, 0x40	; 64
    265e:	80 93 7a 00 	sts	0x007A, r24
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	01 c0       	rjmp	.+2      	; 0x2668 <noisyADCRead()+0x54>
  uint8_t count = 0;
  while(!ADC_complete) { ++count; } // Busy wait while 'timing' the ADC conversion.
    2666:	9f 5f       	subi	r25, 0xFF	; 255
    2668:	80 91 c0 01 	lds	r24, 0x01C0
    266c:	88 23       	and	r24, r24
    266e:	d9 f3       	breq	.-10     	; 0x2666 <noisyADCRead()+0x52>
  const uint8_t l1 = ADCL; // Capture the low byte and latch the high byte.
    2670:	50 91 78 00 	lds	r21, 0x0078
  const uint8_t h1 = ADCH; // Capture the high byte.
    2674:	20 91 79 00 	lds	r18, 0x0079
#if defined(CATCH_OTHER_NOISE_DURING_NAR)
  uint8_t result = _crc_ibutton_update(_adcNoise++, h1 ^ count);
#else
  uint8_t result = (h1 << 5) + count;
    2678:	22 95       	swap	r18
    267a:	22 0f       	add	r18, r18
    267c:	20 7e       	andi	r18, 0xE0	; 224
    267e:	29 0f       	add	r18, r25
#endif
  set_sleep_mode(SLEEP_MODE_ADC); // Take further samples in more energy-efficient mode.
    2680:	83 b7       	in	r24, 0x33	; 51
    2682:	81 7f       	andi	r24, 0xF1	; 241
    2684:	82 60       	ori	r24, 0x02	; 2
    2686:	83 bf       	out	0x33, r24	; 51
    2688:	30 e0       	ldi	r19, 0x00	; 0
  // Sample all possible ADC inputs relative to Vcc, whatever the inputs may be connected to.
  // Assumed never to do any harm, eg physical damage or to disturb I/O setup.
  for(uint8_t i = 0; i < 8; ++i)
    {
    ADMUX = (i & 7) | (DEFAULT << 6); // Switching MUX after sample has started, which may add further noise.
    268a:	83 2f       	mov	r24, r19
    268c:	87 70       	andi	r24, 0x07	; 7
    268e:	80 64       	ori	r24, 0x40	; 64
    2690:	80 93 7c 00 	sts	0x007C, r24
    ADC_complete = false;
    2694:	10 92 c0 01 	sts	0x01C0, r1
    2698:	07 c0       	rjmp	.+14     	; 0x26a8 <noisyADCRead()+0x94>
    while(!ADC_complete)
      {
#if defined(CATCH_OTHER_NOISE_DURING_NAR)       
      result -= 37; /* prime; may capture unrelated interrupt wakeups... */
#endif
      sleep_mode();
    269a:	83 b7       	in	r24, 0x33	; 51
    269c:	81 60       	ori	r24, 0x01	; 1
    269e:	83 bf       	out	0x33, r24	; 51
    26a0:	88 95       	sleep
    26a2:	83 b7       	in	r24, 0x33	; 51
    26a4:	8e 7f       	andi	r24, 0xFE	; 254
    26a6:	83 bf       	out	0x33, r24	; 51
  // Assumed never to do any harm, eg physical damage or to disturb I/O setup.
  for(uint8_t i = 0; i < 8; ++i)
    {
    ADMUX = (i & 7) | (DEFAULT << 6); // Switching MUX after sample has started, which may add further noise.
    ADC_complete = false;
    while(!ADC_complete)
    26a8:	80 91 c0 01 	lds	r24, 0x01C0
    26ac:	88 23       	and	r24, r24
    26ae:	a9 f3       	breq	.-22     	; 0x269a <noisyADCRead()+0x86>
#if defined(CATCH_OTHER_NOISE_DURING_NAR)       
      result -= 37; /* prime; may capture unrelated interrupt wakeups... */
#endif
      sleep_mode();
      }
    const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
    26b0:	90 91 78 00 	lds	r25, 0x0078
    const uint8_t h = ADCH; // Capture the high byte.
    26b4:	80 91 79 00 	lds	r24, 0x0079
		"	brtc	2f" "\n\t"
		"	eor	%0, %2" "\n\t"
		"2:	dec	%1" "\n\t"
		"	brne	1b" "\n\t"
		: "=r" (__crc), "=d" (__i), "=d" (__pattern)
		: "0" (__crc), "r" (__data));
    26b8:	89 27       	eor	r24, r25
    26ba:	28 27       	eor	r18, r24
    26bc:	88 e0       	ldi	r24, 0x08	; 8
    26be:	9c e8       	ldi	r25, 0x8C	; 140
    26c0:	20 fb       	bst	r18, 0
    26c2:	26 95       	lsr	r18
    26c4:	0e f4       	brtc	.+2      	; 0x26c8 <noisyADCRead()+0xb4>
    26c6:	29 27       	eor	r18, r25
    26c8:	8a 95       	dec	r24
    26ca:	d1 f7       	brne	.-12     	; 0x26c0 <noisyADCRead()+0xac>
  uint8_t result = (h1 << 5) + count;
#endif
  set_sleep_mode(SLEEP_MODE_ADC); // Take further samples in more energy-efficient mode.
  // Sample all possible ADC inputs relative to Vcc, whatever the inputs may be connected to.
  // Assumed never to do any harm, eg physical damage or to disturb I/O setup.
  for(uint8_t i = 0; i < 8; ++i)
    26cc:	3f 5f       	subi	r19, 0xFF	; 255
    26ce:	38 30       	cpi	r19, 0x08	; 8
    26d0:	e1 f6       	brne	.-72     	; 0x268a <noisyADCRead()+0x76>
      }
    const uint8_t l = ADCL; // Capture the low byte and latch the high byte.
    const uint8_t h = ADCH; // Capture the high byte.
    result = _crc_ibutton_update(result, l ^ h); // A thorough hash.
    }
  bitClear(ADCSRA, ADIE); // Turn off ADC interrupt.
    26d2:	80 91 7a 00 	lds	r24, 0x007A
    26d6:	87 7f       	andi	r24, 0xF7	; 247
    26d8:	80 93 7a 00 	sts	0x007A, r24
  bitClear(ADCSRA, ADATE); // Turn off ADC auto-trigger.
    26dc:	80 91 7a 00 	lds	r24, 0x007A
    26e0:	8f 7d       	andi	r24, 0xDF	; 223
    26e2:	80 93 7a 00 	sts	0x007A, r24
  if(neededEnable) { powerDownADC(); }
    26e6:	44 23       	and	r20, r20
    26e8:	51 f0       	breq	.+20     	; 0x26fe <noisyADCRead()+0xea>
  }
    
// Power ADC down.
void powerDownADC()
  {
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
    26ea:	80 91 7a 00 	lds	r24, 0x007A
    26ee:	8f 77       	andi	r24, 0x7F	; 127
    26f0:	80 93 7a 00 	sts	0x007A, r24
  PRR |= _BV(PRADC); // Disable the ADC.
    26f4:	80 91 64 00 	lds	r24, 0x0064
    26f8:	81 60       	ori	r24, 0x01	; 1
    26fa:	80 93 64 00 	sts	0x0064, r24
  bitClear(ADCSRA, ADIE); // Turn off ADC interrupt.
  bitClear(ADCSRA, ADATE); // Turn off ADC auto-trigger.
  if(neededEnable) { powerDownADC(); }
  result ^= l1; // Ensure that the actual Vcc raw lsbs do get folded in to the final result.
  return(result); // Use all the bits collected.
  }
    26fe:	82 2f       	mov	r24, r18
    2700:	85 27       	eor	r24, r21
    2702:	08 95       	ret

00002704 <readInternalTemperatureC16()>:
// May set sleep mode to SLEEP_MODE_ADC, and disables sleep on exit.
int readInternalTemperatureC16()
  {
  // Measure internal temperature sensor against internal voltage source.
  // Response is ~1mv/C with 0C at ~289mV according to the data sheet.
  const uint16_t raw = _analogueNoiseReducedReadM(_BV(REFS1) | _BV(REFS0) | _BV(MUX3), 1);
    2704:	88 ec       	ldi	r24, 0xC8	; 200
    2706:	61 e0       	ldi	r22, 0x01	; 1
    2708:	0e 94 54 12 	call	0x24a8	; 0x24a8 <_analogueNoiseReducedReadM(unsigned char, signed char)>
    270c:	84 54       	subi	r24, 0x44	; 68
    270e:	91 40       	sbci	r25, 0x01	; 1
    2710:	22 ed       	ldi	r18, 0xD2	; 210
    2712:	30 e0       	ldi	r19, 0x00	; 0
    2714:	a9 01       	movw	r20, r18
    2716:	84 9f       	mul	r24, r20
    2718:	90 01       	movw	r18, r0
    271a:	85 9f       	mul	r24, r21
    271c:	30 0d       	add	r19, r0
    271e:	94 9f       	mul	r25, r20
    2720:	30 0d       	add	r19, r0
    2722:	11 24       	eor	r1, r1
    2724:	94 e0       	ldi	r25, 0x04	; 4
    2726:	35 95       	asr	r19
    2728:	27 95       	ror	r18
    272a:	9a 95       	dec	r25
    272c:	e1 f7       	brne	.-8      	; 0x2726 <readInternalTemperatureC16()+0x22>
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("");
#endif
  //const int degC = (raw - 328) ; // Crude fast adjustment for one sensor at ~20C (DHD20130429).
  const int degC = ((((int)raw) - 324) * 210) >> 4; // Slightly less crude adjustment, see http://playground.arduino.cc//Main/InternalTemperatureSensor
  return(degC);
  }
    272e:	c9 01       	movw	r24, r18
    2730:	08 95       	ret

00002732 <powerDownTWI()>:
  }

// Power down TWI (I2C).
void powerDownTWI()
  {
  TWCR &= ~_BV(TWEN); // Disable TWI.
    2732:	ec eb       	ldi	r30, 0xBC	; 188
    2734:	f0 e0       	ldi	r31, 0x00	; 0
    2736:	80 81       	ld	r24, Z
    2738:	8b 7f       	andi	r24, 0xFB	; 251
    273a:	80 83       	st	Z, r24
  PRR |= _BV(PRTWI); // Disable TWI power.
    273c:	e4 e6       	ldi	r30, 0x64	; 100
    273e:	f0 e0       	ldi	r31, 0x00	; 0
    2740:	80 81       	ld	r24, Z
    2742:	80 68       	ori	r24, 0x80	; 128
    2744:	80 83       	st	Z, r24
  //digitalWrite(SCL, 0);

  // Convert to hi-Z inputs.
  //pinMode(SDA, INPUT);
  //pinMode(SCL, INPUT);
  }
    2746:	08 95       	ret

00002748 <clockJitterWDT()>:
// Expensive in terms of CPU time and thus energy.
// TODO: may be able to reduce clock speed to lower energy cost while still detecting useful jitter.
uint_fast8_t clockJitterWDT()
  {
  // Watchdog should be (already) be disabled on entry.
  _watchdogFired = false;
    2748:	10 92 bc 01 	sts	0x01BC, r1
  wdt_enable(WDTO_15MS); // Set watchdog for minimum time.
    274c:	88 e0       	ldi	r24, 0x08	; 8
    274e:	28 e1       	ldi	r18, 0x18	; 24
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	0f b6       	in	r0, 0x3f	; 63
    2754:	f8 94       	cli
    2756:	a8 95       	wdr
    2758:	20 93 60 00 	sts	0x0060, r18
    275c:	0f be       	out	0x3f, r0	; 63
    275e:	80 93 60 00 	sts	0x0060, r24
  WDTCSR |= (1 << WDIE);
    2762:	80 91 60 00 	lds	r24, 0x0060
    2766:	80 64       	ori	r24, 0x40	; 64
    2768:	80 93 60 00 	sts	0x0060, r24
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	01 c0       	rjmp	.+2      	; 0x2772 <clockJitterWDT()+0x2a>
  uint_fast8_t count = 0;
  while(!_watchdogFired) { ++count; } // Effectively count CPU cycles until WDT fires.
    2770:	9f 5f       	subi	r25, 0xFF	; 255
    2772:	80 91 bc 01 	lds	r24, 0x01BC
    2776:	88 23       	and	r24, r24
    2778:	d9 f3       	breq	.-10     	; 0x2770 <clockJitterWDT()+0x28>
  return(count);
  }
    277a:	89 2f       	mov	r24, r25
    277c:	08 95       	ret

0000277e <clockJitterEntropyByte()>:
// Expensive in terms of CPU time and thus energy, though possibly more efficient than basic clockJitterXXX() routines.
// Internally this uses a CRC as a relatively fast and hopefully effective hash over intermediate values.
// Note the that rejection of repeat values will be less effective with two interleaved gathering mechanisms
// as the interaction while not necessarily adding genuine entropy, will make counts differ between runs.
// DHD20130519: measured as taking ~63ms to run, ie ~8ms per bit gathered.
uint_fast8_t clockJitterEntropyByte()
    277e:	1f 93       	push	r17

  uint_fast8_t result = 0;
  uint_fast8_t countR = 0, lastCountR = 0;
  uint_fast8_t countW = 0, lastCountW = 0;

  const uint8_t t0 = TCNT2; // Wait for sub-cycle timer to roll.
    2780:	90 91 b2 00 	lds	r25, 0x00B2
    2784:	40 e0       	ldi	r20, 0x00	; 0
    2786:	50 e0       	ldi	r21, 0x00	; 0
    2788:	02 c0       	rjmp	.+4      	; 0x278e <clockJitterEntropyByte()+0x10>
  while(t0 == TCNT2) { ++hash; } // Possibly capture some entropy from recent program activity/timing.
    278a:	4f 5f       	subi	r20, 0xFF	; 255
    278c:	5f 4f       	sbci	r21, 0xFF	; 255
    278e:	80 91 b2 00 	lds	r24, 0x00B2
    2792:	98 17       	cp	r25, r24
    2794:	d1 f3       	breq	.-12     	; 0x278a <clockJitterEntropyByte()+0xc>
  uint8_t t1 = TCNT2;
    2796:	f0 91 b2 00 	lds	r31, 0x00B2

  _watchdogFired = 0;
    279a:	10 92 bc 01 	sts	0x01BC, r1
  wdt_enable(WDTO_15MS); // Start watchdog, with minimum timeout.
    279e:	88 e0       	ldi	r24, 0x08	; 8
    27a0:	28 e1       	ldi	r18, 0x18	; 24
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	0f b6       	in	r0, 0x3f	; 63
    27a6:	f8 94       	cli
    27a8:	a8 95       	wdr
    27aa:	20 93 60 00 	sts	0x0060, r18
    27ae:	0f be       	out	0x3f, r0	; 63
    27b0:	80 93 60 00 	sts	0x0060, r24
  WDTCSR |= (1 << WDIE);
    27b4:	80 91 60 00 	lds	r24, 0x0060
    27b8:	80 64       	ori	r24, 0x40	; 64
    27ba:	80 93 60 00 	sts	0x0060, r24
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	60 e0       	ldi	r22, 0x00	; 0
    27c2:	e0 e0       	ldi	r30, 0x00	; 0
    27c4:	20 e0       	ldi	r18, 0x00	; 0
    27c6:	38 e0       	ldi	r19, 0x08	; 8
    27c8:	70 e0       	ldi	r23, 0x00	; 0
        if(--bitsLeft <= 0) { break; } // Got enough bits; stop now.
        lastCountW = countW;
        }
      countW = 0;
      _watchdogFired = 0;
      wdt_enable(WDTO_15MS); // Restart watchdog, with minimum timeout.
    27ca:	a8 e1       	ldi	r26, 0x18	; 24
    27cc:	b0 e0       	ldi	r27, 0x00	; 0
    27ce:	18 e0       	ldi	r17, 0x08	; 8
  WDTCSR |= (1 << WDIE);
  int_fast8_t bitsLeft = 8; // Decrement when a bit is harvested...
  for( ; ; )
    {
    // Extract watchdog jitter vs CPU.
    if(!_watchdogFired) { ++countW; }
    27d0:	80 91 bc 01 	lds	r24, 0x01BC
    27d4:	88 23       	and	r24, r24
    27d6:	11 f4       	brne	.+4      	; 0x27dc <clockJitterEntropyByte()+0x5e>
    27d8:	2f 5f       	subi	r18, 0xFF	; 255
    27da:	2a c0       	rjmp	.+84     	; 0x2830 <clockJitterEntropyByte()+0xb2>
    else // Watchdog fired.
      {
      if(countW != lastCountW) // Got a different value from last; assume one bit of entropy.
    27dc:	27 17       	cp	r18, r23
    27de:	c1 f0       	breq	.+48     	; 0x2810 <clockJitterEntropyByte()+0x92>
        "eor    %A0,__tmp_reg__"

        : "=d" (__ret)
        : "r" (__data), "0" (__crc)
        : "r0"
    );
    27e0:	42 27       	eor	r20, r18
    27e2:	04 2e       	mov	r0, r20
    27e4:	42 95       	swap	r20
    27e6:	40 7f       	andi	r20, 0xF0	; 240
    27e8:	40 25       	eor	r20, r0
    27ea:	05 2e       	mov	r0, r21
    27ec:	54 2f       	mov	r21, r20
    27ee:	42 95       	swap	r20
    27f0:	4f 70       	andi	r20, 0x0F	; 15
    27f2:	04 26       	eor	r0, r20
    27f4:	46 95       	lsr	r20
    27f6:	54 27       	eor	r21, r20
    27f8:	45 27       	eor	r20, r21
    27fa:	44 0f       	add	r20, r20
    27fc:	44 0f       	add	r20, r20
    27fe:	44 0f       	add	r20, r20
    2800:	40 25       	eor	r20, r0
        {
        hash = _crc_ccitt_update(hash, countW);
        result = (result << 1) ^ ((uint_fast8_t)hash); // Nominally capturing (at least) lsb of hash.
    2802:	99 0f       	add	r25, r25
    2804:	94 27       	eor	r25, r20
        if(--bitsLeft <= 0) { break; } // Got enough bits; stop now.
    2806:	31 50       	subi	r19, 0x01	; 1
    2808:	13 16       	cp	r1, r19
    280a:	0c f0       	brlt	.+2      	; 0x280e <clockJitterEntropyByte()+0x90>
    280c:	34 c0       	rjmp	.+104    	; 0x2876 <clockJitterEntropyByte()+0xf8>
    280e:	72 2f       	mov	r23, r18
        lastCountW = countW;
        }
      countW = 0;
      _watchdogFired = 0;
    2810:	10 92 bc 01 	sts	0x01BC, r1
      wdt_enable(WDTO_15MS); // Restart watchdog, with minimum timeout.
    2814:	0f b6       	in	r0, 0x3f	; 63
    2816:	f8 94       	cli
    2818:	a8 95       	wdr
    281a:	a0 93 60 00 	sts	0x0060, r26
    281e:	0f be       	out	0x3f, r0	; 63
    2820:	10 93 60 00 	sts	0x0060, r17
      WDTCSR |= (1 << WDIE);
    2824:	80 91 60 00 	lds	r24, 0x0060
    2828:	80 64       	ori	r24, 0x40	; 64
    282a:	80 93 60 00 	sts	0x0060, r24
    282e:	20 e0       	ldi	r18, 0x00	; 0
      }

    // Extract RTC jitter vs CPU.
    if(t1 == TCNT2) { --countR; }
    2830:	80 91 b2 00 	lds	r24, 0x00B2
    2834:	f8 17       	cp	r31, r24
    2836:	11 f4       	brne	.+4      	; 0x283c <clockJitterEntropyByte()+0xbe>
    2838:	61 50       	subi	r22, 0x01	; 1
    283a:	ca cf       	rjmp	.-108    	; 0x27d0 <clockJitterEntropyByte()+0x52>
    else // Sub-cycle timer rolled.
      {
      if(countR != lastCountR) // Got a different value from last; assume one bit of entropy.
    283c:	6e 17       	cp	r22, r30
    283e:	b9 f0       	breq	.+46     	; 0x286e <clockJitterEntropyByte()+0xf0>
    2840:	46 27       	eor	r20, r22
    2842:	04 2e       	mov	r0, r20
    2844:	42 95       	swap	r20
    2846:	40 7f       	andi	r20, 0xF0	; 240
    2848:	40 25       	eor	r20, r0
    284a:	05 2e       	mov	r0, r21
    284c:	54 2f       	mov	r21, r20
    284e:	42 95       	swap	r20
    2850:	4f 70       	andi	r20, 0x0F	; 15
    2852:	04 26       	eor	r0, r20
    2854:	46 95       	lsr	r20
    2856:	54 27       	eor	r21, r20
    2858:	45 27       	eor	r20, r21
    285a:	44 0f       	add	r20, r20
    285c:	44 0f       	add	r20, r20
    285e:	44 0f       	add	r20, r20
    2860:	40 25       	eor	r20, r0
        {
        hash = _crc_ccitt_update(hash, countR);
        result = (result << 1) ^ ((uint_fast8_t)hash); // Nominally capturing (at least) lsb of hash.
    2862:	99 0f       	add	r25, r25
    2864:	94 27       	eor	r25, r20
        if(--bitsLeft <= 0) { break; } // Got enough bits; stop now.
    2866:	31 50       	subi	r19, 0x01	; 1
    2868:	13 16       	cp	r1, r19
    286a:	2c f4       	brge	.+10     	; 0x2876 <clockJitterEntropyByte()+0xf8>
    286c:	e6 2f       	mov	r30, r22
        lastCountR = countR;
        }
      countR = 0;
      t1 = TCNT2; // Set to look for next roll.
    286e:	f0 91 b2 00 	lds	r31, 0x00B2
    2872:	60 e0       	ldi	r22, 0x00	; 0
    2874:	ad cf       	rjmp	.-166    	; 0x27d0 <clockJitterEntropyByte()+0x52>
      }
    }

  wdt_disable(); // Ensure no spurious WDT wakeup pending.
    2876:	88 e1       	ldi	r24, 0x18	; 24
    2878:	0f b6       	in	r0, 0x3f	; 63
    287a:	f8 94       	cli
    287c:	80 93 60 00 	sts	0x0060, r24
    2880:	10 92 60 00 	sts	0x0060, r1
    2884:	0f be       	out	0x3f, r0	; 63
  return(result);
  }
    2886:	89 2f       	mov	r24, r25
    2888:	1f 91       	pop	r17
    288a:	08 95       	ret

0000288c <captureEntropy1()>:
// Capture a little system entropy.
// This call should typically take << 1ms at 1MHz CPU.
// Does not change CPU clock speeds, mess with interrupts (other than possible brief blocking), or do I/O, or sleep.
// Should inject some noise into secure (TBD) and non-secure (RNG8) PRNGs.
void captureEntropy1()
  { seedRNG8(getSubCycleTime() ^ _adcNoise, cycleCountCPU() ^ batterymV, _watchdogFired); }
    288c:	20 91 b2 00 	lds	r18, 0x00B2
    2890:	80 91 bd 01 	lds	r24, 0x01BD
    2894:	66 b5       	in	r22, 0x26	; 38
    2896:	40 91 bc 01 	lds	r20, 0x01BC
    289a:	90 91 be 01 	lds	r25, 0x01BE
    289e:	69 27       	eor	r22, r25
    28a0:	82 27       	eor	r24, r18
    28a2:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <seedRNG8(unsigned char, unsigned char, unsigned char)>
    28a6:	08 95       	ret

000028a8 <powerDownSPI()>:
  }

// Power down SPI.
void powerDownSPI()
  {
  SPCR &= ~_BV(SPE); // Disable SPI.
    28a8:	8c b5       	in	r24, 0x2c	; 44
    28aa:	8f 7b       	andi	r24, 0xBF	; 191
    28ac:	8c bd       	out	0x2c, r24	; 44
  PRR |= _BV(PRSPI); // Power down...
    28ae:	e4 e6       	ldi	r30, 0x64	; 100
    28b0:	f0 e0       	ldi	r31, 0x00	; 0
    28b2:	80 81       	ld	r24, Z
    28b4:	84 60       	ori	r24, 0x04	; 4
    28b6:	80 83       	st	Z, r24

  pinMode(PIN_SPI_nSS, OUTPUT); // Ensure that nSS is an output to avoid forcing SPI to slave mode by accident.
    28b8:	8a e0       	ldi	r24, 0x0A	; 10
    28ba:	61 e0       	ldi	r22, 0x01	; 1
    28bc:	0e 94 be 2d 	call	0x5b7c	; 0x5b7c <pinMode>
  fastDigitalWrite(PIN_SPI_nSS, HIGH); // Ensure that nSS is HIGH and thus any slave deselected when powering up SPI.
    28c0:	2a 9a       	sbi	0x05, 2	; 5

  // Avoid pins from floating when SPI is disabled.
  // Try to preserve general I/O direction and restore previous output values for outputs.
  pinMode(PIN_SPI_SCK, OUTPUT);
    28c2:	8d e0       	ldi	r24, 0x0D	; 13
    28c4:	61 e0       	ldi	r22, 0x01	; 1
    28c6:	0e 94 be 2d 	call	0x5b7c	; 0x5b7c <pinMode>
  pinMode(PIN_SPI_MOSI, OUTPUT);
    28ca:	8b e0       	ldi	r24, 0x0B	; 11
    28cc:	61 e0       	ldi	r22, 0x01	; 1
    28ce:	0e 94 be 2d 	call	0x5b7c	; 0x5b7c <pinMode>
  pinMode(PIN_SPI_MISO, INPUT_PULLUP);
    28d2:	8c e0       	ldi	r24, 0x0C	; 12
    28d4:	62 e0       	ldi	r22, 0x02	; 2
    28d6:	0e 94 be 2d 	call	0x5b7c	; 0x5b7c <pinMode>

  // If sharing SPI SCK with LED indicator then return this pin to being an output (retaining previous value).
  //if(LED_HEATCALL == PIN_SPI_SCK) { pinMode(LED_HEATCALL, OUTPUT); }
  }
    28da:	08 95       	ret

000028dc <powerUpSPIIfDisabled()>:
// If SPI was disabled, power it up, enable it as master and with a sensible clock speed, etc, and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownSPI() may be advisable.
bool powerUpSPIIfDisabled()
  {
  if(!(PRR & _BV(PRSPI))) { return(false); }
    28dc:	80 91 64 00 	lds	r24, 0x0064
    28e0:	82 fd       	sbrc	r24, 2
    28e2:	02 c0       	rjmp	.+4      	; 0x28e8 <powerUpSPIIfDisabled()+0xc>
    28e4:	80 e0       	ldi	r24, 0x00	; 0
    28e6:	08 95       	ret

  pinMode(PIN_SPI_nSS, OUTPUT); // Ensure that nSS is an output to avoid forcing SPI to slave mode by accident.
    28e8:	8a e0       	ldi	r24, 0x0A	; 10
    28ea:	61 e0       	ldi	r22, 0x01	; 1
    28ec:	0e 94 be 2d 	call	0x5b7c	; 0x5b7c <pinMode>
  fastDigitalWrite(PIN_SPI_nSS, HIGH); // Ensure that nSS is HIGH and thus any slave deselected when powering up SPI.
    28f0:	2a 9a       	sbi	0x05, 2	; 5

  PRR &= ~_BV(PRSPI); // Enable SPI power.
    28f2:	80 91 64 00 	lds	r24, 0x0064
    28f6:	8b 7f       	andi	r24, 0xFB	; 251
    28f8:	80 93 64 00 	sts	0x0064, r24
  // Configure raw SPI to match better how it was used in PICAXE V0.09 code.
  // CPOL = 0, CPHA = 0
  // Enable SPI, set master mode, set speed.
  const uint8_t ENABLE_MASTER =  _BV(SPE) | _BV(MSTR);
#if F_CPU <= 2000000 // Needs minimum prescale (x2) with slow (<=2MHz) CPU clock.
  SPCR = ENABLE_MASTER; // 2x clock prescale for <=1MHz SPI clock from <=2MHz CPU clock (500kHz SPI @ 1MHz CPU).
    28fc:	80 e5       	ldi	r24, 0x50	; 80
    28fe:	8c bd       	out	0x2c, r24	; 44
  SPSR = _BV(SPI2X);
    2900:	81 e0       	ldi	r24, 0x01	; 1
    2902:	8d bd       	out	0x2d, r24	; 45
#else // Needs setting for fast (~16MHz) CPU clock.
  SPCR = _BV(SPR0) | ENABLE_MASTER; // 8x clock prescale for ~2MHz SPI clock from nominal ~16MHz CPU clock.
  SPSR = _BV(SPI2X);
#endif
  return(true);
  }
    2904:	08 95       	ret

00002906 <power_intermittent_peripherals_disable()>:
// Disable/remove power to intermittent peripherals.
// Switches the digital line to input with no pull-up (ie high-Z).
// There should be some sort of load to stop this floating.
void power_intermittent_peripherals_disable()
  {
  pinMode(IO_POWER_UP, INPUT);
    2906:	87 e0       	ldi	r24, 0x07	; 7
    2908:	60 e0       	ldi	r22, 0x00	; 0
    290a:	0e 94 be 2d 	call	0x5b7c	; 0x5b7c <pinMode>
  }
    290e:	08 95       	ret

00002910 <minimisePowerWithoutSleep()>:
// to ensure that nothing power-hungry is accidentally left on.
// Any module that may need to run all the time should not be turned off here.
// May be called from panic(), so do not be too clever.
// Does NOT attempt to power down the radio, eg in case that needs to be left in RX mode.
// Does NOT attempt to adjust serial power state.
void minimisePowerWithoutSleep()
    2910:	0f 93       	push	r16
    2912:	1f 93       	push	r17
  {
  // Disable the watchdog timer.
  wdt_disable();
    2914:	88 e1       	ldi	r24, 0x18	; 24
    2916:	0f b6       	in	r0, 0x3f	; 63
    2918:	f8 94       	cli
    291a:	80 93 60 00 	sts	0x0060, r24
    291e:	10 92 60 00 	sts	0x0060, r1
    2922:	0f be       	out	0x3f, r0	; 63
  
  // Ensure that external peripherals are powered down.
  power_intermittent_peripherals_disable();
    2924:	0e 94 83 14 	call	0x2906	; 0x2906 <power_intermittent_peripherals_disable()>

  // Turn off analogue stuff that eats power.
  ADCSRA = 0; // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
    2928:	10 92 7a 00 	sts	0x007A, r1
  ACSR = (1<<ACD); // Disable the analog comparator.
    292c:	80 e8       	ldi	r24, 0x80	; 128
    292e:	80 bf       	out	0x30, r24	; 48
  DIDR0 = 0x3F; // Disable digital input buffers on all ADC0-ADC5 pins.
    2930:	8f e3       	ldi	r24, 0x3F	; 63
    2932:	80 93 7e 00 	sts	0x007E, r24
  DIDR1 = (1<<AIN1D)|(1<<AIN0D); // Disable digital input buffer on AIN1/0.
    2936:	83 e0       	ldi	r24, 0x03	; 3
    2938:	80 93 7f 00 	sts	0x007F, r24
  power_adc_disable();
    293c:	04 e6       	ldi	r16, 0x64	; 100
    293e:	10 e0       	ldi	r17, 0x00	; 0
    2940:	f8 01       	movw	r30, r16
    2942:	80 81       	ld	r24, Z
    2944:	81 60       	ori	r24, 0x01	; 1
    2946:	80 83       	st	Z, r24

  // Ensure that SPI is powered down.
  powerDownSPI();
    2948:	0e 94 54 14 	call	0x28a8	; 0x28a8 <powerDownSPI()>

#if defined(DONT_USE_TIMER0)
  power_timer0_disable();
#endif

  power_timer1_disable();
    294c:	f8 01       	movw	r30, r16
    294e:	80 81       	ld	r24, Z
    2950:	88 60       	ori	r24, 0x08	; 8
    2952:	80 83       	st	Z, r24

#ifndef WAKEUP_32768HZ_XTAL
  power_timer2_disable();
#endif
  }
    2954:	1f 91       	pop	r17
    2956:	0f 91       	pop	r16
    2958:	08 95       	ret

0000295a <power_intermittent_peripherals_enable(bool)>:
// items powered direct from IO_POWER_UP may need no such wait.
//
// Switches the digital line to high then output (to avoid ever *discharging* the output cap).
// Note that with 100nF cap, and 330R (or lower) resistor from the output pin,
// then 1ms delay should be plenty for the voltage on the cap to settle.
void power_intermittent_peripherals_enable(bool waitUntilStable)
    295a:	1f 93       	push	r17
    295c:	18 2f       	mov	r17, r24
  {
  fastDigitalWrite(IO_POWER_UP, HIGH);
    295e:	5f 9a       	sbi	0x0b, 7	; 11
  pinMode(IO_POWER_UP, OUTPUT);
    2960:	87 e0       	ldi	r24, 0x07	; 7
    2962:	61 e0       	ldi	r22, 0x01	; 1
    2964:	0e 94 be 2d 	call	0x5b7c	; 0x5b7c <pinMode>
  // If requested, wait long enough that I/O peripheral power should be stable.
  // Wait in a relatively low-power way...
  if(waitUntilStable) { sleepLowPowerMs(1); }
    2968:	11 23       	and	r17, r17
    296a:	21 f0       	breq	.+8      	; 0x2974 <power_intermittent_peripherals_enable(bool)+0x1a>
// Sleep/spin for approx specified strictly-positive number of milliseconds, in as low-power mode as possible.
// This may be achieved in part by dynamically slowing the CPU clock if possible.
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Assumes MIN_CPU_HZ >> 4000.
static void inline sleepLowPowerMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed((((MIN_CPU_HZ * (ms)) + 2000) / 4000) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    296c:	86 e0       	ldi	r24, 0x06	; 6
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	0e 94 af 11 	call	0x235e	; 0x235e <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
  }
    2974:	1f 91       	pop	r17
    2976:	08 95       	ret

00002978 <powerUpTWIIfDisabled()>:
// If TWI (I2C) was disabled, power it up, do Wire.begin(), and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownRWI() may be advisable.
bool powerUpTWIIfDisabled()
  {
  if(!(PRR & _BV(PRTWI))) { return(false); }
    2978:	80 91 64 00 	lds	r24, 0x0064
    297c:	87 fd       	sbrc	r24, 7
    297e:	02 c0       	rjmp	.+4      	; 0x2984 <powerUpTWIIfDisabled()+0xc>
    2980:	80 e0       	ldi	r24, 0x00	; 0
    2982:	08 95       	ret

  PRR &= ~_BV(PRTWI); // Enable TWI power.
    2984:	80 91 64 00 	lds	r24, 0x0064
    2988:	8f 77       	andi	r24, 0x7F	; 127
    298a:	80 93 64 00 	sts	0x0064, r24
  TWCR |= _BV(TWEN); // Enable TWI.
    298e:	80 91 bc 00 	lds	r24, 0x00BC
    2992:	84 60       	ori	r24, 0x04	; 4
    2994:	80 93 bc 00 	sts	0x00BC, r24
  Wire.begin(); // Set it going.
    2998:	8f e2       	ldi	r24, 0x2F	; 47
    299a:	92 e0       	ldi	r25, 0x02	; 2
    299c:	0e 94 4b 2b 	call	0x5696	; 0x5696 <TwoWire::begin()>
  // TODO: reset TWBR and prescaler for our low CPU frequency     (TWBR = ((F_CPU / TWI_FREQ) - 16) / 2 gives -3!)
#if F_CPU <= 1000000
  TWBR = 0; // Implies SCL freq of F_CPU / (16 + 2 * TBWR * PRESC) = 62.5kHz @ F_CPU==1MHz and PRESC==1 (from Wire/TWI code).
    29a0:	10 92 b8 00 	sts	0x00B8, r1
    29a4:	81 e0       	ldi	r24, 0x01	; 1
#endif
  return(true);
  }
    29a6:	08 95       	ret

000029a8 <powerDownSerial()>:
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
  PRR |= _BV(PRADC); // Disable the ADC.
  }

// Check if serial is (already) powered up.
static bool _serialIsPoweredUp() { return(!(PRR & _BV(PRUSART0))); }
    29a8:	80 91 64 00 	lds	r24, 0x0064


// Flush any pending serial output and power it down if up.
void powerDownSerial()
  {
  if(_serialIsPoweredUp())
    29ac:	81 fd       	sbrc	r24, 1
    29ae:	08 c0       	rjmp	.+16     	; 0x29c0 <powerDownSerial()+0x18>
    {
    // Flush serial output and shut down if apparently active.
    Serial.flush();
    29b0:	81 e3       	ldi	r24, 0x31	; 49
    29b2:	93 e0       	ldi	r25, 0x03	; 3
    29b4:	0e 94 19 30 	call	0x6032	; 0x6032 <HardwareSerial::flush()>
    //flushSerialHW();
    Serial.end();
    29b8:	81 e3       	ldi	r24, 0x31	; 49
    29ba:	93 e0       	ldi	r25, 0x03	; 3
    29bc:	0e 94 59 2f 	call	0x5eb2	; 0x5eb2 <HardwareSerial::end()>
    }
  pinMode(PIN_SERIAL_RX, INPUT_PULLUP);
    29c0:	80 e0       	ldi	r24, 0x00	; 0
    29c2:	62 e0       	ldi	r22, 0x02	; 2
    29c4:	0e 94 be 2d 	call	0x5b7c	; 0x5b7c <pinMode>
  pinMode(PIN_SERIAL_TX, INPUT_PULLUP);
    29c8:	81 e0       	ldi	r24, 0x01	; 1
    29ca:	62 e0       	ldi	r22, 0x02	; 2
    29cc:	0e 94 be 2d 	call	0x5b7c	; 0x5b7c <pinMode>
  PRR |= _BV(PRUSART0); // Disable the UART module.
    29d0:	80 91 64 00 	lds	r24, 0x0064
    29d4:	82 60       	ori	r24, 0x02	; 2
    29d6:	80 93 64 00 	sts	0x0064, r24
  }
    29da:	08 95       	ret

000029dc <burnHundredsOfCyclesProductivelyAndPoll()>:
// This call should typically take << 1ms at 1MHz CPU.
// Does not change CPU clock speeds, mess with interrupts (other than possible brief blocking), or sleep.
// May capture some entropy in secure and non-secure PRNGs.
void burnHundredsOfCyclesProductivelyAndPoll()
  {
  if(pollIO()) { seedRNG8(cycleCountCPU(), _watchdogFired, getSubCycleTime()); }
    29dc:	80 e0       	ldi	r24, 0x00	; 0
    29de:	0e 94 c7 23 	call	0x478e	; 0x478e <pollIO(bool)>
    29e2:	88 23       	and	r24, r24
    29e4:	41 f0       	breq	.+16     	; 0x29f6 <burnHundredsOfCyclesProductivelyAndPoll()+0x1a>
    29e6:	86 b5       	in	r24, 0x26	; 38
    29e8:	60 91 bc 01 	lds	r22, 0x01BC
    29ec:	40 91 b2 00 	lds	r20, 0x00B2
    29f0:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <seedRNG8(unsigned char, unsigned char, unsigned char)>
    29f4:	08 95       	ret
  else { captureEntropy1(); }
    29f6:	0e 94 46 14 	call	0x288c	; 0x288c <captureEntropy1()>
    29fa:	08 95       	ret

000029fc <flushSerialProductive()>:
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
  PRR |= _BV(PRADC); // Disable the ADC.
  }

// Check if serial is (already) powered up.
static bool _serialIsPoweredUp() { return(!(PRR & _BV(PRUSART0))); }
    29fc:	80 91 64 00 	lds	r24, 0x0064
// Assumes hundreds of CPU cycles available for each character queued for TX.
// Does not change CPU clock speed or disable or mess with USART0, though may poll it.
void flushSerialProductive()
  {
#if 1 && defined(DEBUG)
  if(!_serialIsPoweredUp()) { panic(); } // Trying to operate serial without it powered up.
    2a00:	81 ff       	sbrs	r24, 1
    2a02:	05 c0       	rjmp	.+10     	; 0x2a0e <flushSerialProductive()+0x12>
    2a04:	0e 94 06 28 	call	0x500c	; 0x500c <panic()>
    2a08:	02 c0       	rjmp	.+4      	; 0x2a0e <flushSerialProductive()+0x12>
#endif
  // Can productively spin here churning PRNGs or the like before the flush(), checking for the UART TX buffer to empty...
  // An occasional premature exit to flush() due to Serial interrupt handler interaction is benign, and indeed more grist to the mill.
  while(serialTXInProgress()) { burnHundredsOfCyclesProductivelyAndPoll(); }
    2a0a:	0e 94 ee 14 	call	0x29dc	; 0x29dc <burnHundredsOfCyclesProductivelyAndPoll()>
    2a0e:	80 91 c0 00 	lds	r24, 0x00C0
    2a12:	85 ff       	sbrs	r24, 5
    2a14:	fa cf       	rjmp	.-12     	; 0x2a0a <flushSerialProductive()+0xe>
  Serial.flush(); // Wait for all output to have been sent.
    2a16:	81 e3       	ldi	r24, 0x31	; 49
    2a18:	93 e0       	ldi	r25, 0x03	; 3
    2a1a:	0e 94 19 30 	call	0x6032	; 0x6032 <HardwareSerial::flush()>
  }
    2a1e:	08 95       	ret

00002a20 <flushSerialSCTSensitive()>:
// Does not change CPU clock speed or disable or mess with USART0, though may poll it.
// Sleeps in IDLE mode for ~15ms at a time (backtopped by watchdog) waking on any interrupt
// so that the caller must be sure RX overrun (etc) will not be an issue.
// Switches to flushSerialProductive() behaviour
// if in danger of overrunning a minor cycle while idling.
void flushSerialSCTSensitive()
    2a20:	1f 93       	push	r17
#ifdef ENABLE_AVR_IDLE_MODE
// Idle productively polling I/O, etc, across the system while spending time in low-power mode if possible.
// Typically sleeps for nominally up to 30ms; tries to allow ealier wakeup if interrupt is received, etc.
// (Will often be prematurely woken by timer0 with ~16ms interval.)
// True iff watchdog timer expired; false if something else woke the CPU.
static bool inline idle15AndPoll() { const bool wd = idleCPU(WDTO_15MS); pollIO(!wd); return(wd); }
    2a22:	11 e0       	ldi	r17, 0x01	; 1
  {
#if 0 && defined(DEBUG)
  if(!_serialIsPoweredUp()) { panic(); } // Trying to operate serial without it powered up.
#endif
#ifdef ENABLE_AVR_IDLE_MODE
  while(serialTXInProgress() && (getSubCycleTime() < GSCT_MAX - 2 - (20/SUBCYCLE_TICK_MS_RD)))
    2a24:	80 91 c0 00 	lds	r24, 0x00C0
    2a28:	85 fd       	sbrc	r24, 5
    2a2a:	0b c0       	rjmp	.+22     	; 0x2a42 <flushSerialSCTSensitive()+0x22>
    2a2c:	80 91 b2 00 	lds	r24, 0x00B2
    2a30:	8b 3f       	cpi	r24, 0xFB	; 251
    2a32:	38 f4       	brcc	.+14     	; 0x2a42 <flushSerialSCTSensitive()+0x22>
    2a34:	80 e0       	ldi	r24, 0x00	; 0
    2a36:	0e 94 16 12 	call	0x242c	; 0x242c <idleCPU(signed char)>
    2a3a:	81 27       	eor	r24, r17
    2a3c:	0e 94 c7 23 	call	0x478e	; 0x478e <pollIO(bool)>
    2a40:	f1 cf       	rjmp	.-30     	; 0x2a24 <flushSerialSCTSensitive()+0x4>
    { idle15AndPoll(); } // Save much power by idling CPU, though everything else runs.
#endif
  flushSerialProductive();
    2a42:	0e 94 fe 14 	call	0x29fc	; 0x29fc <flushSerialProductive()>
  }
    2a46:	1f 91       	pop	r17
    2a48:	08 95       	ret

00002a4a <sleepUntilSubCycleTime(unsigned char)>:
// May use a combination of techniques to hit the required time.
// Requesting a sleep until at or near the end of the cycle risks overrun and may be unwise.
// Using this to sleep less then 2 ticks may prove unreliable as the RTC rolls on underneath...
// This is NOT intended to be used to sleep over the end of a minor cycle.
// May poll I/O.
bool sleepUntilSubCycleTime(const uint8_t sleepUntil)
    2a4a:	0f 93       	push	r16
    2a4c:	1f 93       	push	r17
    2a4e:	cf 93       	push	r28
    2a50:	df 93       	push	r29
    2a52:	18 2f       	mov	r17, r24
      sleepLowPowerLessThanMs(max(SUBCYCLE_TICK_MS_RD / 2, 1)); // Assumed to be a constant expression.
      continue;
      }

    // Compute remaining time in milliseconds, rounded down...
    const uint16_t msLeft = ((uint16_t)SUBCYCLE_TICK_MS_RD) * ticksLeft;
    2a54:	07 e0       	ldi	r16, 0x07	; 7
// May poll I/O.
bool sleepUntilSubCycleTime(const uint8_t sleepUntil)
  {
  for( ; ; )
    {
    const uint8_t now = getSubCycleTime();
    2a56:	80 91 b2 00 	lds	r24, 0x00B2
    if(now == sleepUntil) { return(true); } // Done it!
    2a5a:	81 17       	cp	r24, r17
    2a5c:	e1 f1       	breq	.+120    	; 0x2ad6 <sleepUntilSubCycleTime(unsigned char)+0x8c>
    if(now > sleepUntil) { return(false); } // Too late...
    2a5e:	18 17       	cp	r17, r24
    2a60:	10 f4       	brcc	.+4      	; 0x2a66 <sleepUntilSubCycleTime(unsigned char)+0x1c>
    2a62:	80 e0       	ldi	r24, 0x00	; 0
    2a64:	39 c0       	rjmp	.+114    	; 0x2ad8 <sleepUntilSubCycleTime(unsigned char)+0x8e>

    // Compute time left to sleep.
    // It is easy to sleep a bit more later if necessary, but oversleeping is bad.
    const uint8_t ticksLeft = sleepUntil - now;
    2a66:	21 2f       	mov	r18, r17
    2a68:	28 1b       	sub	r18, r24
    // Deal with shortest sleep specially to avoid missing target from overheads...
    if(1 == ticksLeft)
    2a6a:	21 30       	cpi	r18, 0x01	; 1
    2a6c:	19 f4       	brne	.+6      	; 0x2a74 <sleepUntilSubCycleTime(unsigned char)+0x2a>
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Uses formulation likely to be quicker than sleepLowPowerMs() for non-constant argument values,
// and that results in a somewhat shorter sleep than sleepLowPowerMs(ms).
// Assumes MIN_CPU_HZ >> 4000.
static void inline sleepLowPowerLessThanMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed(((MIN_CPU_HZ/4000) * (ms)) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    2a6e:	83 e1       	ldi	r24, 0x13	; 19
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	2e c0       	rjmp	.+92     	; 0x2ad0 <sleepUntilSubCycleTime(unsigned char)+0x86>
      sleepLowPowerLessThanMs(max(SUBCYCLE_TICK_MS_RD / 2, 1)); // Assumed to be a constant expression.
      continue;
      }

    // Compute remaining time in milliseconds, rounded down...
    const uint16_t msLeft = ((uint16_t)SUBCYCLE_TICK_MS_RD) * ticksLeft;
    2a74:	20 9f       	mul	r18, r16
    2a76:	e0 01       	movw	r28, r0
    2a78:	11 24       	eor	r1, r1

    // If comfortably in the area of nap()s then use one of them for improved energy savings.
    // Allow for nap() to overrun a little as its timing can vary with temperature and supply voltage,
    // and the bulk of energy savings should still be available without pushing the timing to the wire.
    // Note that during nap() timer0 should be stopped and thus not cause premature wakeup (from overflow interrupt).
    if(msLeft >= 20)
    2a7a:	c4 31       	cpi	r28, 0x14	; 20
    2a7c:	d1 05       	cpc	r29, r1
    2a7e:	70 f0       	brcs	.+28     	; 0x2a9c <sleepUntilSubCycleTime(unsigned char)+0x52>
      {
      if(msLeft >= 80)
    2a80:	c0 35       	cpi	r28, 0x50	; 80
    2a82:	d1 05       	cpc	r29, r1
    2a84:	38 f0       	brcs	.+14     	; 0x2a94 <sleepUntilSubCycleTime(unsigned char)+0x4a>
        {
        if(msLeft >= 333)
    2a86:	cd 54       	subi	r28, 0x4D	; 77
    2a88:	d1 40       	sbci	r29, 0x01	; 1
    2a8a:	10 f0       	brcs	.+4      	; 0x2a90 <sleepUntilSubCycleTime(unsigned char)+0x46>
          {
          nap(WDTO_250MS); // Nominal 250ms sleep.
    2a8c:	84 e0       	ldi	r24, 0x04	; 4
    2a8e:	03 c0       	rjmp	.+6      	; 0x2a96 <sleepUntilSubCycleTime(unsigned char)+0x4c>
          continue;
          }
        nap(WDTO_60MS); // Nominal 60ms sleep.
    2a90:	82 e0       	ldi	r24, 0x02	; 2
    2a92:	01 c0       	rjmp	.+2      	; 0x2a96 <sleepUntilSubCycleTime(unsigned char)+0x4c>
        continue;
        }
      nap(WDTO_15MS); // Nominal 15ms sleep.
    2a94:	80 e0       	ldi	r24, 0x00	; 0
    2a96:	0e 94 de 11 	call	0x23bc	; 0x23bc <nap(signed char)>
    2a9a:	dd cf       	rjmp	.-70     	; 0x2a56 <sleepUntilSubCycleTime(unsigned char)+0xc>
    // Use low-power CPU sleep for residual time, but being very careful not to oversleep.
    // Aim to sleep somewhat under residual time, eg to allow for overheads, interrupts, and other slippages.
    // Assumed to be > 1 else would have been special-cased above.
    // Assumed to be << 1s else a nap() would have been used above.
#ifdef DEBUG
    if((msLeft < 2) || (msLeft > 1000)) { panic(); }
    2a9c:	ce 01       	movw	r24, r28
    2a9e:	02 97       	sbiw	r24, 0x02	; 2
    2aa0:	87 5e       	subi	r24, 0xE7	; 231
    2aa2:	93 40       	sbci	r25, 0x03	; 3
    2aa4:	10 f0       	brcs	.+4      	; 0x2aaa <sleepUntilSubCycleTime(unsigned char)+0x60>
    2aa6:	0e 94 06 28 	call	0x500c	; 0x500c <panic()>
    2aaa:	9e 01       	movw	r18, r28
    2aac:	21 50       	subi	r18, 0x01	; 1
    2aae:	30 40       	sbci	r19, 0x00	; 0
    2ab0:	40 e0       	ldi	r20, 0x00	; 0
    2ab2:	50 e0       	ldi	r21, 0x00	; 0
    2ab4:	da 01       	movw	r26, r20
    2ab6:	c9 01       	movw	r24, r18
    2ab8:	63 e0       	ldi	r22, 0x03	; 3
    2aba:	88 0f       	add	r24, r24
    2abc:	99 1f       	adc	r25, r25
    2abe:	aa 1f       	adc	r26, r26
    2ac0:	bb 1f       	adc	r27, r27
    2ac2:	6a 95       	dec	r22
    2ac4:	d1 f7       	brne	.-12     	; 0x2aba <sleepUntilSubCycleTime(unsigned char)+0x70>
    2ac6:	82 1b       	sub	r24, r18
    2ac8:	93 0b       	sbc	r25, r19
    2aca:	a4 0b       	sbc	r26, r20
    2acc:	b5 0b       	sbc	r27, r21
    2ace:	02 97       	sbiw	r24, 0x02	; 2
    2ad0:	0e 94 af 11 	call	0x235e	; 0x235e <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
    2ad4:	c0 cf       	rjmp	.-128    	; 0x2a56 <sleepUntilSubCycleTime(unsigned char)+0xc>
    2ad6:	81 e0       	ldi	r24, 0x01	; 1
#endif
    sleepLowPowerLessThanMs(msLeft - 1);
    }
  }
    2ad8:	df 91       	pop	r29
    2ada:	cf 91       	pop	r28
    2adc:	1f 91       	pop	r17
    2ade:	0f 91       	pop	r16
    2ae0:	08 95       	ret

00002ae2 <powerUpSerialIfDisabled()>:
  ADCSRA &= ~_BV(ADEN); // Do before power_[adc|all]_disable() to avoid freezing the ADC in an active state!
  PRR |= _BV(PRADC); // Disable the ADC.
  }

// Check if serial is (already) powered up.
static bool _serialIsPoweredUp() { return(!(PRR & _BV(PRUSART0))); }
    2ae2:	80 91 64 00 	lds	r24, 0x0064
// If serial was disabled, power it up, do Serial.begin(), and return true.
// If already powered up then do nothing other than return false.
// If this returns true then a matching powerDownSerial() may be advisable.
bool powerUpSerialIfDisabled()
  {
  if(_serialIsPoweredUp()) { return(false); }
    2ae6:	81 fd       	sbrc	r24, 1
    2ae8:	02 c0       	rjmp	.+4      	; 0x2aee <powerUpSerialIfDisabled()+0xc>
    2aea:	80 e0       	ldi	r24, 0x00	; 0
    2aec:	08 95       	ret
  PRR &= ~_BV(PRUSART0); // Enable the UART.
    2aee:	80 91 64 00 	lds	r24, 0x0064
    2af2:	8d 7f       	andi	r24, 0xFD	; 253
    2af4:	80 93 64 00 	sts	0x0064, r24
  Serial.begin(BAUD); // Set it going.
    2af8:	81 e3       	ldi	r24, 0x31	; 49
    2afa:	93 e0       	ldi	r25, 0x03	; 3
    2afc:	40 ec       	ldi	r20, 0xC0	; 192
    2afe:	52 e1       	ldi	r21, 0x12	; 18
    2b00:	60 e0       	ldi	r22, 0x00	; 0
    2b02:	70 e0       	ldi	r23, 0x00	; 0
    2b04:	0e 94 db 2e 	call	0x5db6	; 0x5db6 <HardwareSerial::begin(unsigned long)>
    2b08:	81 e0       	ldi	r24, 0x01	; 1
  return(true);
  }
    2b0a:	08 95       	ret

00002b0c <powerSetup()>:
// Call from setup() to turn off unused modules, set up timers and interrupts, etc.
// I/O pin setting is not done here.
void powerSetup()
  {
#ifdef DEBUG
  assert(DEFAULT_CPU_PRESCALE == clock_prescale_get()); // Verify that CPU prescaling is as expected.
    2b0c:	80 91 61 00 	lds	r24, 0x0061
    2b10:	8f 70       	andi	r24, 0x0F	; 15
    2b12:	83 30       	cpi	r24, 0x03	; 3
    2b14:	11 f0       	breq	.+4      	; 0x2b1a <powerSetup()+0xe>
    2b16:	0e 94 a0 03 	call	0x740	; 0x740 <abort>
#endif

  // Do normal gentle switch off, including analogue module/control in correct order.
  minimisePowerWithoutSleep();
    2b1a:	0e 94 88 14 	call	0x2910	; 0x2910 <minimisePowerWithoutSleep()>

  // Brutally force off all modules, then re-enable explicitly below any still needed.
  power_all_disable(); 
    2b1e:	80 91 64 00 	lds	r24, 0x0064
    2b22:	8f 6e       	ori	r24, 0xEF	; 239
    2b24:	80 93 64 00 	sts	0x0064, r24

#if !defined(DONT_USE_TIMER0)
  power_timer0_enable(); // Turning timer 0 off messes up some standard Arduino support such as delay() and millis().
    2b28:	80 91 64 00 	lds	r24, 0x0064
    2b2c:	8f 7d       	andi	r24, 0xDF	; 223
    2b2e:	80 93 64 00 	sts	0x0064, r24
#endif
  
#if defined(WAKEUP_32768HZ_XTAL)
  power_timer2_enable();
    2b32:	80 91 64 00 	lds	r24, 0x0064
    2b36:	8f 7b       	andi	r24, 0xBF	; 191
    2b38:	80 93 64 00 	sts	0x0064, r24
#ifdef WAKEUP_32768HZ_XTAL
static void timer2XtalIntSetup()
 {
  // Set up TIMER2 to wake CPU out of sleep regularly using external 32768Hz crystal.
  // See http://www.atmel.com/Images/doc2505.pdf
  TCCR2A = 0x00;
    2b3c:	10 92 b0 00 	sts	0x00B0, r1

#if defined(HALF_SECOND_RTC_SUPPORT)
  TCCR2B = (1<<CS22); // Set CLK/64 for overflow interrupt every 0.5s.
#elif defined(TWO_S_TICK_RTC_SUPPORT)
  TCCR2B = (1<<CS22)|(1<<CS21); // Set CLK/128 for overflow interrupt every 2s.
    2b40:	86 e0       	ldi	r24, 0x06	; 6
    2b42:	80 93 b1 00 	sts	0x00B1, r24
#else
  TCCR2B = (1<<CS22)|(1<<CS20); // Set CLK/128 for overflow interrupt every 1s.
#endif
  //TCCR2B = (1<<CS22)|(1<<CS21)|(1<<CS20); // Set CLK/1024 for overflow interrupt every 8s (slowest possible).

  ASSR = (1<<AS2); // Enable asynchronous operation.
    2b46:	80 e2       	ldi	r24, 0x20	; 32
    2b48:	80 93 b6 00 	sts	0x00B6, r24
  TIMSK2 = (1<<TOIE2); // Enable the timer 2 interrupt.
    2b4c:	81 e0       	ldi	r24, 0x01	; 1
    2b4e:	80 93 70 00 	sts	0x0070, r24
  
#if defined(WAKEUP_32768HZ_XTAL)
  power_timer2_enable();
  timer2XtalIntSetup();
#endif
  }
    2b52:	08 95       	ret

00002b54 <seedRNG8(unsigned char, unsigned char, unsigned char)>:
//2 ADDs, one bit shift right , and one increment. Difficult or slow operations like multiply, etc 
//were avoided for maximum speed on ultra low power devices.
void seedRNG8(uint8_t s1, uint8_t s2, uint8_t s3) // Originally init_rng(s1,s2,s3) //Can also be used to seed the rng with more entropy during use.
  {
  //XOR new entropy into key state
  a ^=s1;
    2b54:	20 91 c4 01 	lds	r18, 0x01C4
  b ^=s2;
    2b58:	90 91 c5 01 	lds	r25, 0x01C5
    2b5c:	69 27       	eor	r22, r25
  c ^=s3;
    2b5e:	90 91 c2 01 	lds	r25, 0x01C2
    2b62:	49 27       	eor	r20, r25
  x++;
    2b64:	90 91 c3 01 	lds	r25, 0x01C3
    2b68:	9f 5f       	subi	r25, 0xFF	; 255
    2b6a:	90 93 c3 01 	sts	0x01C3, r25
  a = (a^c^x);
    2b6e:	28 27       	eor	r18, r24
    2b70:	24 27       	eor	r18, r20
    2b72:	29 27       	eor	r18, r25
    2b74:	20 93 c4 01 	sts	0x01C4, r18
  b = (b+a);
    2b78:	62 0f       	add	r22, r18
    2b7a:	60 93 c5 01 	sts	0x01C5, r22
  c = ((c+(b>>1))^a);
    2b7e:	66 95       	lsr	r22
    2b80:	64 0f       	add	r22, r20
    2b82:	62 27       	eor	r22, r18
    2b84:	60 93 c2 01 	sts	0x01C2, r22
  }
    2b88:	08 95       	ret

00002b8a <randRNG8()>:
//
uint8_t randRNG8() // Originally unsigned char randomize().
  {
  x++;               //x is incremented every round and is not affected by any other variable
    2b8a:	80 91 c3 01 	lds	r24, 0x01C3
    2b8e:	8f 5f       	subi	r24, 0xFF	; 255
    2b90:	80 93 c3 01 	sts	0x01C3, r24
  a = (a^c^x);       //note the mix of addition and XOR
    2b94:	20 91 c2 01 	lds	r18, 0x01C2
    2b98:	90 91 c4 01 	lds	r25, 0x01C4
    2b9c:	92 27       	eor	r25, r18
    2b9e:	98 27       	eor	r25, r24
    2ba0:	90 93 c4 01 	sts	0x01C4, r25
  b = (b+a);         //And the use of very few instructions
    2ba4:	80 91 c5 01 	lds	r24, 0x01C5
    2ba8:	89 0f       	add	r24, r25
    2baa:	80 93 c5 01 	sts	0x01C5, r24
  c = ((c+(b>>1))^a);  //the right shift is to ensure that high-order bits from b can affect  
    2bae:	86 95       	lsr	r24
    2bb0:	82 0f       	add	r24, r18
    2bb2:	89 27       	eor	r24, r25
    2bb4:	80 93 c2 01 	sts	0x01C2, r24
  return(c);         //low order bits of other variables
  }
    2bb8:	08 95       	ret

00002bba <global constructors keyed to _Z8seedRNG8hhh>:
uint8_t randRNG8(); // Originally called 'randomize()'.
// RNG8 working state.
static uint8_t a, b, c;
// DHD20130603: avoid the hidden counter always starting at zero c/o some per-build state.
// Derived from linker-driven pointer base plus hash of compilation timestamp, with little run-time cost.
static uint8_t x = (uint8_t)(intptr_t) ((&c) + (uint8_t)((__TIME__[7] * 17) ^ (__TIME__[6]) ^ (__TIME__[4] << 11)));
    2bba:	84 e1       	ldi	r24, 0x14	; 20
    2bbc:	92 e0       	ldi	r25, 0x02	; 2
    2bbe:	80 93 c3 01 	sts	0x01C3, r24
  x++;               //x is incremented every round and is not affected by any other variable
  a = (a^c^x);       //note the mix of addition and XOR
  b = (b+a);         //And the use of very few instructions
  c = ((c+(b>>1))^a);  //the right shift is to ensure that high-order bits from b can affect  
  return(c);         //low order bits of other variables
  }
    2bc2:	08 95       	ret

00002bc4 <RFM22RXFIFO(unsigned char*, unsigned char)>:


// Put RFM22 into standby, attempt to read specified number of bytes from FIFO to buffer.
// Leaves RFM22 in low-power standby mode.
// Trailing bytes (more than were actually sent) undefined.
void RFM22RXFIFO(uint8_t *buf, const uint8_t bufSize)
    2bc4:	ff 92       	push	r15
    2bc6:	0f 93       	push	r16
    2bc8:	1f 93       	push	r17
    2bca:	18 2f       	mov	r17, r24
    2bcc:	09 2f       	mov	r16, r25
    2bce:	f6 2e       	mov	r15, r22
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    2bd0:	0e 94 6e 14 	call	0x28dc	; 0x28dc <powerUpSPIIfDisabled()>
    2bd4:	48 2f       	mov	r20, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2bd6:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2bd8:	87 e8       	ldi	r24, 0x87	; 135
    2bda:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2bdc:	0d b4       	in	r0, 0x2d	; 45
    2bde:	07 fe       	sbrs	r0, 7
    2be0:	fd cf       	rjmp	.-6      	; 0x2bdc <RFM22RXFIFO(unsigned char*, unsigned char)+0x18>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2be2:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2be4:	0d b4       	in	r0, 0x2d	; 45
    2be6:	07 fe       	sbrs	r0, 7
    2be8:	fd cf       	rjmp	.-6      	; 0x2be4 <RFM22RXFIFO(unsigned char*, unsigned char)+0x20>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2bea:	2a 9a       	sbi	0x05, 2	; 5
  {
  const bool neededEnable = powerUpSPIIfDisabled();

  _RFM22ModeStandby();

  _RFM22_SELECT();
    2bec:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    2bee:	8f e7       	ldi	r24, 0x7F	; 127
    2bf0:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2bf2:	0d b4       	in	r0, 0x2d	; 45
    2bf4:	07 fe       	sbrs	r0, 7
    2bf6:	fd cf       	rjmp	.-6      	; 0x2bf2 <RFM22RXFIFO(unsigned char*, unsigned char)+0x2e>
  return(SPDR);
    2bf8:	8e b5       	in	r24, 0x2e	; 46
    2bfa:	81 2f       	mov	r24, r17
    2bfc:	90 2f       	mov	r25, r16
    2bfe:	9c 01       	movw	r18, r24
    2c00:	f9 01       	movw	r30, r18
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	07 c0       	rjmp	.+14     	; 0x2c14 <RFM22RXFIFO(unsigned char*, unsigned char)+0x50>

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    2c06:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2c08:	0d b4       	in	r0, 0x2d	; 45
    2c0a:	07 fe       	sbrs	r0, 7
    2c0c:	fd cf       	rjmp	.-6      	; 0x2c08 <RFM22RXFIFO(unsigned char*, unsigned char)+0x44>
  return(SPDR);
    2c0e:	8e b5       	in	r24, 0x2e	; 46

  _RFM22_SELECT();
  _RFM22_io(RFM22REG_FIFO & 0x7F); // Start burst read from RX FIFO.
//  uint8_t val;
  for(uint8_t i = 0; i < bufSize; ++i)
    { buf[i] = _RFM22_io(0);  }
    2c10:	81 93       	st	Z+, r24
  _RFM22ModeStandby();

  _RFM22_SELECT();
  _RFM22_io(RFM22REG_FIFO & 0x7F); // Start burst read from RX FIFO.
//  uint8_t val;
  for(uint8_t i = 0; i < bufSize; ++i)
    2c12:	9f 5f       	subi	r25, 0xFF	; 255
    2c14:	9f 15       	cp	r25, r15
    2c16:	b8 f3       	brcs	.-18     	; 0x2c06 <RFM22RXFIFO(unsigned char*, unsigned char)+0x42>
    { buf[i] = _RFM22_io(0);  }
  _RFM22_DESELECT();
    2c18:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2c1a:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2c1c:	88 e8       	ldi	r24, 0x88	; 136
    2c1e:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2c20:	0d b4       	in	r0, 0x2d	; 45
    2c22:	07 fe       	sbrs	r0, 7
    2c24:	fd cf       	rjmp	.-6      	; 0x2c20 <RFM22RXFIFO(unsigned char*, unsigned char)+0x5c>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2c26:	83 e0       	ldi	r24, 0x03	; 3
    2c28:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2c2a:	0d b4       	in	r0, 0x2d	; 45
    2c2c:	07 fe       	sbrs	r0, 7
    2c2e:	fd cf       	rjmp	.-6      	; 0x2c2a <RFM22RXFIFO(unsigned char*, unsigned char)+0x66>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2c30:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2c32:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2c34:	88 e8       	ldi	r24, 0x88	; 136
    2c36:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2c38:	0d b4       	in	r0, 0x2d	; 45
    2c3a:	07 fe       	sbrs	r0, 7
    2c3c:	fd cf       	rjmp	.-6      	; 0x2c38 <RFM22RXFIFO(unsigned char*, unsigned char)+0x74>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2c3e:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2c40:	0d b4       	in	r0, 0x2d	; 45
    2c42:	07 fe       	sbrs	r0, 7
    2c44:	fd cf       	rjmp	.-6      	; 0x2c40 <RFM22RXFIFO(unsigned char*, unsigned char)+0x7c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2c46:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    2c48:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2c4a:	85 e8       	ldi	r24, 0x85	; 133
    2c4c:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2c4e:	0d b4       	in	r0, 0x2d	; 45
    2c50:	07 fe       	sbrs	r0, 7
    2c52:	fd cf       	rjmp	.-6      	; 0x2c4e <RFM22RXFIFO(unsigned char*, unsigned char)+0x8a>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2c54:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2c56:	0d b4       	in	r0, 0x2d	; 45
    2c58:	07 fe       	sbrs	r0, 7
    2c5a:	fd cf       	rjmp	.-6      	; 0x2c56 <RFM22RXFIFO(unsigned char*, unsigned char)+0x92>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2c5c:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2c5e:	0d b4       	in	r0, 0x2d	; 45
    2c60:	07 fe       	sbrs	r0, 7
    2c62:	fd cf       	rjmp	.-6      	; 0x2c5e <RFM22RXFIFO(unsigned char*, unsigned char)+0x9a>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    2c64:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    2c66:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2c68:	83 e8       	ldi	r24, 0x83	; 131
    2c6a:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2c6c:	0d b4       	in	r0, 0x2d	; 45
    2c6e:	07 fe       	sbrs	r0, 7
    2c70:	fd cf       	rjmp	.-6      	; 0x2c6c <RFM22RXFIFO(unsigned char*, unsigned char)+0xa8>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2c72:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2c74:	0d b4       	in	r0, 0x2d	; 45
    2c76:	07 fe       	sbrs	r0, 7
    2c78:	fd cf       	rjmp	.-6      	; 0x2c74 <RFM22RXFIFO(unsigned char*, unsigned char)+0xb0>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2c7a:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2c7c:	0d b4       	in	r0, 0x2d	; 45
    2c7e:	07 fe       	sbrs	r0, 7
    2c80:	fd cf       	rjmp	.-6      	; 0x2c7c <RFM22RXFIFO(unsigned char*, unsigned char)+0xb8>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    2c82:	2a 9a       	sbi	0x05, 2	; 5
  _RFM22WriteReg16Bit0(RFM22REG_INT_ENABLE1);
  // Clear any interrupts already/still pending...
  _RFM22ClearInterrupts();  
  //_RFM22WriteReg8Bit(0xd, 0x1f); // Drive GPIO2 to ground as output... (Move to general register settings.)

  if(neededEnable) { powerDownSPI(); }
    2c84:	44 23       	and	r20, r20
    2c86:	11 f0       	breq	.+4      	; 0x2c8c <RFM22RXFIFO(unsigned char*, unsigned char)+0xc8>
    2c88:	0e 94 54 14 	call	0x28a8	; 0x28a8 <powerDownSPI()>
  }
    2c8c:	1f 91       	pop	r17
    2c8e:	0f 91       	pop	r16
    2c90:	ff 90       	pop	r15
    2c92:	08 95       	ret

00002c94 <RFM22SetUpRX(unsigned char, bool, bool)>:
  _RFM22_DESELECT();
  if(neededEnable) { powerDownSPI(); }
  }

// Put RFM22 into RX mode with given RX FIFO 'nearly-full' threshold and optional interrupts enabled.
void RFM22SetUpRX(const uint8_t nearlyFullThreshold, const bool syncInt, const bool dataInt)
    2c94:	ff 92       	push	r15
    2c96:	0f 93       	push	r16
    2c98:	1f 93       	push	r17
    2c9a:	18 2f       	mov	r17, r24
    2c9c:	f6 2e       	mov	r15, r22
    2c9e:	04 2f       	mov	r16, r20
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    2ca0:	0e 94 6e 14 	call	0x28dc	; 0x28dc <powerUpSPIIfDisabled()>
    2ca4:	28 2f       	mov	r18, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2ca6:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2ca8:	88 e8       	ldi	r24, 0x88	; 136
    2caa:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2cac:	0d b4       	in	r0, 0x2d	; 45
    2cae:	07 fe       	sbrs	r0, 7
    2cb0:	fd cf       	rjmp	.-6      	; 0x2cac <RFM22SetUpRX(unsigned char, bool, bool)+0x18>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2cb2:	83 e0       	ldi	r24, 0x03	; 3
    2cb4:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2cb6:	0d b4       	in	r0, 0x2d	; 45
    2cb8:	07 fe       	sbrs	r0, 7
    2cba:	fd cf       	rjmp	.-6      	; 0x2cb6 <RFM22SetUpRX(unsigned char, bool, bool)+0x22>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2cbc:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2cbe:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2cc0:	88 e8       	ldi	r24, 0x88	; 136
    2cc2:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2cc4:	0d b4       	in	r0, 0x2d	; 45
    2cc6:	07 fe       	sbrs	r0, 7
    2cc8:	fd cf       	rjmp	.-6      	; 0x2cc4 <RFM22SetUpRX(unsigned char, bool, bool)+0x30>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2cca:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2ccc:	0d b4       	in	r0, 0x2d	; 45
    2cce:	07 fe       	sbrs	r0, 7
    2cd0:	fd cf       	rjmp	.-6      	; 0x2ccc <RFM22SetUpRX(unsigned char, bool, bool)+0x38>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2cd2:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2cd4:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2cd6:	8e ef       	ldi	r24, 0xFE	; 254
    2cd8:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2cda:	0d b4       	in	r0, 0x2d	; 45
    2cdc:	07 fe       	sbrs	r0, 7
    2cde:	fd cf       	rjmp	.-6      	; 0x2cda <RFM22SetUpRX(unsigned char, bool, bool)+0x46>
  // Clear RX and TX FIFOs.
  _RFM22WriteReg8Bit(RFM22REG_OP_CTRL2, 3); // FFCLRTX | FFCLRTX
  _RFM22WriteReg8Bit(RFM22REG_OP_CTRL2, 0);

  // Set FIFO RX almost-full threshold as specified.
  _RFM22WriteReg8Bit(RFM22REG_RX_FIFO_CTRL, min(nearlyFullThreshold, 63));
    2ce0:	81 2f       	mov	r24, r17
    2ce2:	10 34       	cpi	r17, 0x40	; 64
    2ce4:	08 f0       	brcs	.+2      	; 0x2ce8 <RFM22SetUpRX(unsigned char, bool, bool)+0x54>
    2ce6:	8f e3       	ldi	r24, 0x3F	; 63

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2ce8:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2cea:	0d b4       	in	r0, 0x2d	; 45
    2cec:	07 fe       	sbrs	r0, 7
    2cee:	fd cf       	rjmp	.-6      	; 0x2cea <RFM22SetUpRX(unsigned char, bool, bool)+0x56>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2cf0:	2a 9a       	sbi	0x05, 2	; 5

  // Set FIFO RX almost-full threshold as specified.
  _RFM22WriteReg8Bit(RFM22REG_RX_FIFO_CTRL, min(nearlyFullThreshold, 63));

  // Enable requested RX-related interrupts.
  _RFM22WriteReg8Bit(RFM22REG_INT_ENABLE1, (dataInt?0x10:0)); // enrxffafull: Enable RX FIFO Almost Full.
    2cf2:	00 23       	and	r16, r16
    2cf4:	11 f4       	brne	.+4      	; 0x2cfa <RFM22SetUpRX(unsigned char, bool, bool)+0x66>
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	01 c0       	rjmp	.+2      	; 0x2cfc <RFM22SetUpRX(unsigned char, bool, bool)+0x68>
    2cfa:	90 e1       	ldi	r25, 0x10	; 16

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2cfc:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2cfe:	85 e8       	ldi	r24, 0x85	; 133
    2d00:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2d02:	0d b4       	in	r0, 0x2d	; 45
    2d04:	07 fe       	sbrs	r0, 7
    2d06:	fd cf       	rjmp	.-6      	; 0x2d02 <RFM22SetUpRX(unsigned char, bool, bool)+0x6e>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2d08:	9e bd       	out	0x2e, r25	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2d0a:	0d b4       	in	r0, 0x2d	; 45
    2d0c:	07 fe       	sbrs	r0, 7
    2d0e:	fd cf       	rjmp	.-6      	; 0x2d0a <RFM22SetUpRX(unsigned char, bool, bool)+0x76>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2d10:	2a 9a       	sbi	0x05, 2	; 5
  // Set FIFO RX almost-full threshold as specified.
  _RFM22WriteReg8Bit(RFM22REG_RX_FIFO_CTRL, min(nearlyFullThreshold, 63));

  // Enable requested RX-related interrupts.
  _RFM22WriteReg8Bit(RFM22REG_INT_ENABLE1, (dataInt?0x10:0)); // enrxffafull: Enable RX FIFO Almost Full.
  _RFM22WriteReg8Bit(RFM22REG_INT_ENABLE2, (syncInt?0x80:0)); // enswdet: Enable Sync Word Detected.
    2d12:	ff 20       	and	r15, r15
    2d14:	11 f4       	brne	.+4      	; 0x2d1a <RFM22SetUpRX(unsigned char, bool, bool)+0x86>
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	01 c0       	rjmp	.+2      	; 0x2d1c <RFM22SetUpRX(unsigned char, bool, bool)+0x88>
    2d1a:	90 e8       	ldi	r25, 0x80	; 128

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2d1c:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2d1e:	86 e8       	ldi	r24, 0x86	; 134
    2d20:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2d22:	0d b4       	in	r0, 0x2d	; 45
    2d24:	07 fe       	sbrs	r0, 7
    2d26:	fd cf       	rjmp	.-6      	; 0x2d22 <RFM22SetUpRX(unsigned char, bool, bool)+0x8e>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2d28:	9e bd       	out	0x2e, r25	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2d2a:	0d b4       	in	r0, 0x2d	; 45
    2d2c:	07 fe       	sbrs	r0, 7
    2d2e:	fd cf       	rjmp	.-6      	; 0x2d2a <RFM22SetUpRX(unsigned char, bool, bool)+0x96>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2d30:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    2d32:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2d34:	83 e8       	ldi	r24, 0x83	; 131
    2d36:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2d38:	0d b4       	in	r0, 0x2d	; 45
    2d3a:	07 fe       	sbrs	r0, 7
    2d3c:	fd cf       	rjmp	.-6      	; 0x2d38 <RFM22SetUpRX(unsigned char, bool, bool)+0xa4>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2d3e:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2d40:	0d b4       	in	r0, 0x2d	; 45
    2d42:	07 fe       	sbrs	r0, 7
    2d44:	fd cf       	rjmp	.-6      	; 0x2d40 <RFM22SetUpRX(unsigned char, bool, bool)+0xac>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2d46:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2d48:	0d b4       	in	r0, 0x2d	; 45
    2d4a:	07 fe       	sbrs	r0, 7
    2d4c:	fd cf       	rjmp	.-6      	; 0x2d48 <RFM22SetUpRX(unsigned char, bool, bool)+0xb4>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    2d4e:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2d50:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2d52:	87 e8       	ldi	r24, 0x87	; 135
    2d54:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2d56:	0d b4       	in	r0, 0x2d	; 45
    2d58:	07 fe       	sbrs	r0, 7
    2d5a:	fd cf       	rjmp	.-6      	; 0x2d56 <RFM22SetUpRX(unsigned char, bool, bool)+0xc2>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2d5c:	85 e0       	ldi	r24, 0x05	; 5
    2d5e:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2d60:	0d b4       	in	r0, 0x2d	; 45
    2d62:	07 fe       	sbrs	r0, 7
    2d64:	fd cf       	rjmp	.-6      	; 0x2d60 <RFM22SetUpRX(unsigned char, bool, bool)+0xcc>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2d66:	2a 9a       	sbi	0x05, 2	; 5
  _RFM22ClearInterrupts();

  // Start listening.
  _RFM22ModeRX();
  
  if(neededEnable) { powerDownSPI(); }
    2d68:	22 23       	and	r18, r18
    2d6a:	11 f0       	breq	.+4      	; 0x2d70 <RFM22SetUpRX(unsigned char, bool, bool)+0xdc>
    2d6c:	0e 94 54 14 	call	0x28a8	; 0x28a8 <powerDownSPI()>
  }
    2d70:	1f 91       	pop	r17
    2d72:	0f 91       	pop	r16
    2d74:	ff 90       	pop	r15
    2d76:	08 95       	ret

00002d78 <RFM22QueueCmdToFF(unsigned char*)>:

// Clears the RFM22 TX FIFO and queues up ready to send via the TXFIFO the 0xff-terminated bytes starting at bptr.
// This routine does not change the command area.
// This uses an efficient burst write.
// For DEBUG can abort after (over-)filling the 64-byte FIFO at no extra cost with a check before spinning waiting for SPI byte to be sent.
void RFM22QueueCmdToFF(uint8_t *bptr)
    2d78:	cf 93       	push	r28
    2d7a:	df 93       	push	r29
    2d7c:	ec 01       	movw	r28, r24
  {
#if 0 && defined(DEBUG)
  if(0 == *bptr) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22QueueCmdToFF: buffer uninitialised"); panic(); } 
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
    2d7e:	0e 94 6e 14 	call	0x28dc	; 0x28dc <powerUpSPIIfDisabled()>
    2d82:	98 2f       	mov	r25, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2d84:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2d86:	88 e8       	ldi	r24, 0x88	; 136
    2d88:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2d8a:	0d b4       	in	r0, 0x2d	; 45
    2d8c:	07 fe       	sbrs	r0, 7
    2d8e:	fd cf       	rjmp	.-6      	; 0x2d8a <RFM22QueueCmdToFF(unsigned char*)+0x12>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2d90:	81 e0       	ldi	r24, 0x01	; 1
    2d92:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2d94:	0d b4       	in	r0, 0x2d	; 45
    2d96:	07 fe       	sbrs	r0, 7
    2d98:	fd cf       	rjmp	.-6      	; 0x2d94 <RFM22QueueCmdToFF(unsigned char*)+0x1c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2d9a:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2d9c:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2d9e:	88 e8       	ldi	r24, 0x88	; 136
    2da0:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2da2:	0d b4       	in	r0, 0x2d	; 45
    2da4:	07 fe       	sbrs	r0, 7
    2da6:	fd cf       	rjmp	.-6      	; 0x2da2 <RFM22QueueCmdToFF(unsigned char*)+0x2a>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2da8:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2daa:	0d b4       	in	r0, 0x2d	; 45
    2dac:	07 fe       	sbrs	r0, 7
    2dae:	fd cf       	rjmp	.-6      	; 0x2daa <RFM22QueueCmdToFF(unsigned char*)+0x32>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2db0:	2a 9a       	sbi	0x05, 2	; 5
  if(0 == *bptr) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22QueueCmdToFF: buffer uninitialised"); panic(); } 
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
  // Clear the TX FIFO.
  _RFM22ClearTXFIFO();
  _RFM22_SELECT();
    2db2:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2db4:	8f ef       	ldi	r24, 0xFF	; 255
    2db6:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2db8:	0d b4       	in	r0, 0x2d	; 45
    2dba:	07 fe       	sbrs	r0, 7
    2dbc:	fd cf       	rjmp	.-6      	; 0x2db8 <RFM22QueueCmdToFF(unsigned char*)+0x40>
    2dbe:	04 c0       	rjmp	.+8      	; 0x2dc8 <RFM22QueueCmdToFF(unsigned char*)+0x50>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2dc0:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2dc2:	0d b4       	in	r0, 0x2d	; 45
    2dc4:	07 fe       	sbrs	r0, 7
    2dc6:	fd cf       	rjmp	.-6      	; 0x2dc2 <RFM22QueueCmdToFF(unsigned char*)+0x4a>
    SPDR = val;
    if(--i < 0) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22QueueCmdToFF: buffer unterminated"); panic(); }
    while (!(SPSR & _BV(SPIF))) { }
    }
#else
  while((uint8_t)0xff != (val = *bptr++)) { _RFM22_wr(val); }
    2dc8:	89 91       	ld	r24, Y+
    2dca:	8f 3f       	cpi	r24, 0xFF	; 255
    2dcc:	c9 f7       	brne	.-14     	; 0x2dc0 <RFM22QueueCmdToFF(unsigned char*)+0x48>
#endif
  _RFM22_DESELECT();
    2dce:	2a 9a       	sbi	0x05, 2	; 5
  if(neededEnable) { powerDownSPI(); }
    2dd0:	99 23       	and	r25, r25
    2dd2:	11 f0       	breq	.+4      	; 0x2dd8 <RFM22QueueCmdToFF(unsigned char*)+0x60>
    2dd4:	0e 94 54 14 	call	0x28a8	; 0x28a8 <powerDownSPI()>
  }
    2dd8:	df 91       	pop	r29
    2dda:	cf 91       	pop	r28
    2ddc:	08 95       	ret

00002dde <RFM22RegisterBlockSetup(unsigned char const (*) [2])>:


// Configure the radio from a list of register/value pairs in readonly PROGMEM/Flash, terminating with an 0xff register value.
// NOTE: argument is not a pointer into SRAM, it is into PROGMEM!
// Could optimise case where multiple values are for successive RFM22 registers by using burst write.
void RFM22RegisterBlockSetup(const uint8_t registerValues[][2])
    2dde:	cf 93       	push	r28
    2de0:	df 93       	push	r29
    2de2:	ec 01       	movw	r28, r24
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    2de4:	0e 94 6e 14 	call	0x28dc	; 0x28dc <powerUpSPIIfDisabled()>
  for( ; ; )
    {
    const uint8_t reg = pgm_read_byte(&(registerValues[0][0]));
    2de8:	fe 01       	movw	r30, r28
    2dea:	94 91       	lpm	r25, Z+
    const uint8_t val = pgm_read_byte(&(registerValues[0][1]));
    2dec:	21 96       	adiw	r28, 0x01	; 1
    2dee:	fe 01       	movw	r30, r28
    2df0:	24 91       	lpm	r18, Z+
    2df2:	21 97       	sbiw	r28, 0x01	; 1
    if(0xff == reg) { break; }
    2df4:	9f 3f       	cpi	r25, 0xFF	; 255
    2df6:	69 f0       	breq	.+26     	; 0x2e12 <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x34>

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2df8:	2a 98       	cbi	0x05, 2	; 5
  _RFM22_wr(addr | 0x80); // Force to write.
    2dfa:	90 68       	ori	r25, 0x80	; 128

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2dfc:	9e bd       	out	0x2e, r25	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2dfe:	0d b4       	in	r0, 0x2d	; 45
    2e00:	07 fe       	sbrs	r0, 7
    2e02:	fd cf       	rjmp	.-6      	; 0x2dfe <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x20>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2e04:	2e bd       	out	0x2e, r18	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2e06:	0d b4       	in	r0, 0x2d	; 45
    2e08:	07 fe       	sbrs	r0, 7
    2e0a:	fd cf       	rjmp	.-6      	; 0x2e06 <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x28>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2e0c:	2a 9a       	sbi	0x05, 2	; 5
    DEBUG_SERIAL_PRINT_FLASHSTRING(" = 0x");
    DEBUG_SERIAL_PRINTFMT(val, HEX);
    DEBUG_SERIAL_PRINTLN();
#endif
    _RFM22WriteReg8Bit(reg, val);
    ++registerValues;
    2e0e:	22 96       	adiw	r28, 0x02	; 2
    2e10:	eb cf       	rjmp	.-42     	; 0x2de8 <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0xa>
    }
  if(neededEnable) { powerDownSPI(); }
    2e12:	88 23       	and	r24, r24
    2e14:	11 f0       	breq	.+4      	; 0x2e1a <RFM22RegisterBlockSetup(unsigned char const (*) [2])+0x3c>
    2e16:	0e 94 54 14 	call	0x28a8	; 0x28a8 <powerDownSPI()>
  }
    2e1a:	df 91       	pop	r29
    2e1c:	cf 91       	pop	r28
    2e1e:	08 95       	ret

00002e20 <RFM22PowerOnInit()>:
void RFM22PowerOnInit()
  {
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22 reset...");
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
    2e20:	0e 94 6e 14 	call	0x28dc	; 0x28dc <powerUpSPIIfDisabled()>
    2e24:	98 2f       	mov	r25, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2e26:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2e28:	87 e8       	ldi	r24, 0x87	; 135
    2e2a:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2e2c:	0d b4       	in	r0, 0x2d	; 45
    2e2e:	07 fe       	sbrs	r0, 7
    2e30:	fd cf       	rjmp	.-6      	; 0x2e2c <RFM22PowerOnInit()+0xc>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2e32:	80 e8       	ldi	r24, 0x80	; 128
    2e34:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2e36:	0d b4       	in	r0, 0x2d	; 45
    2e38:	07 fe       	sbrs	r0, 7
    2e3a:	fd cf       	rjmp	.-6      	; 0x2e36 <RFM22PowerOnInit()+0x16>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2e3c:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2e3e:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2e40:	87 e8       	ldi	r24, 0x87	; 135
    2e42:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2e44:	0d b4       	in	r0, 0x2d	; 45
    2e46:	07 fe       	sbrs	r0, 7
    2e48:	fd cf       	rjmp	.-6      	; 0x2e44 <RFM22PowerOnInit()+0x24>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2e4a:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2e4c:	0d b4       	in	r0, 0x2d	; 45
    2e4e:	07 fe       	sbrs	r0, 7
    2e50:	fd cf       	rjmp	.-6      	; 0x2e4c <RFM22PowerOnInit()+0x2c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2e52:	2a 9a       	sbi	0x05, 2	; 5
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("RFM22 reset...");
#endif
  const bool neededEnable = powerUpSPIIfDisabled();
  _RFM22WriteReg8Bit(RFM22REG_OP_CTRL1, RFM22REG_OP_CTRL1_SWRES);
  _RFM22ModeStandby();
  if(neededEnable) { powerDownSPI(); }
    2e54:	99 23       	and	r25, r25
    2e56:	11 f0       	breq	.+4      	; 0x2e5c <RFM22PowerOnInit()+0x3c>
    2e58:	0e 94 54 14 	call	0x28a8	; 0x28a8 <powerDownSPI()>
    2e5c:	08 95       	ret

00002e5e <RFM22RSSI()>:
  return(result);
  }

// Get current RSSI.
// Only valid when in RX mode.
uint8_t RFM22RSSI() 
    2e5e:	1f 93       	push	r17
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    2e60:	0e 94 6e 14 	call	0x28dc	; 0x28dc <powerUpSPIIfDisabled()>
    2e64:	98 2f       	mov	r25, r24

// Read from 8-bit register on RFM22.
// SPI must already be configured and running.
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
    2e66:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    2e68:	86 e2       	ldi	r24, 0x26	; 38
    2e6a:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2e6c:	0d b4       	in	r0, 0x2d	; 45
    2e6e:	07 fe       	sbrs	r0, 7
    2e70:	fd cf       	rjmp	.-6      	; 0x2e6c <RFM22RSSI()+0xe>
  return(SPDR);
    2e72:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    2e74:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2e76:	0d b4       	in	r0, 0x2d	; 45
    2e78:	07 fe       	sbrs	r0, 7
    2e7a:	fd cf       	rjmp	.-6      	; 0x2e76 <RFM22RSSI()+0x18>
  return(SPDR);
    2e7c:	1e b5       	in	r17, 0x2e	; 46
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  const uint8_t result = _RFM22_io(0); // Dummy value...
  _RFM22_DESELECT();
    2e7e:	2a 9a       	sbi	0x05, 2	; 5
// Only valid when in RX mode.
uint8_t RFM22RSSI() 
  {
  const bool neededEnable = powerUpSPIIfDisabled();
  const uint8_t rssi = _RFM22ReadReg8Bit(RFM22REG_RSSI);
  if(neededEnable) { powerDownSPI(); }
    2e80:	99 23       	and	r25, r25
    2e82:	11 f0       	breq	.+4      	; 0x2e88 <RFM22RSSI()+0x2a>
    2e84:	0e 94 54 14 	call	0x28a8	; 0x28a8 <powerDownSPI()>
  return(rssi);
  }
    2e88:	81 2f       	mov	r24, r17
    2e8a:	1f 91       	pop	r17
    2e8c:	08 95       	ret

00002e8e <RFM22ReadStatusBoth()>:
  }

// Read status (both registers) and clear interrupts.
// Status register 1 is returned in the top 8 bits, register 2 in the bottom 8 bits.
// Zero indicates no pending interrupts or other status flags set.
uint16_t RFM22ReadStatusBoth()
    2e8e:	0f 93       	push	r16
    2e90:	1f 93       	push	r17
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    2e92:	0e 94 6e 14 	call	0x28dc	; 0x28dc <powerUpSPIIfDisabled()>
    2e96:	98 2f       	mov	r25, r24

// Read from 16-bit big-endian register pair.
// The result has the first (lower-numbered) register in the most significant byte.
static uint16_t _RFM22ReadReg16Bit(const uint8_t addr)
{
  _RFM22_SELECT();
    2e98:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    2e9a:	83 e0       	ldi	r24, 0x03	; 3
    2e9c:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2e9e:	0d b4       	in	r0, 0x2d	; 45
    2ea0:	07 fe       	sbrs	r0, 7
    2ea2:	fd cf       	rjmp	.-6      	; 0x2e9e <RFM22ReadStatusBoth()+0x10>
  return(SPDR);
    2ea4:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    2ea6:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2ea8:	0d b4       	in	r0, 0x2d	; 45
    2eaa:	07 fe       	sbrs	r0, 7
    2eac:	fd cf       	rjmp	.-6      	; 0x2ea8 <RFM22ReadStatusBoth()+0x1a>
  return(SPDR);
    2eae:	0e b5       	in	r16, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    2eb0:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2eb2:	0d b4       	in	r0, 0x2d	; 45
    2eb4:	07 fe       	sbrs	r0, 7
    2eb6:	fd cf       	rjmp	.-6      	; 0x2eb2 <RFM22ReadStatusBoth()+0x24>
  return(SPDR);
    2eb8:	1e b5       	in	r17, 0x2e	; 46
{
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  uint16_t result = ((uint16_t)_RFM22_io(0)) << 8;
  result |= ((uint16_t)_RFM22_io(0));
  _RFM22_DESELECT();
    2eba:	2a 9a       	sbi	0x05, 2	; 5
// Zero indicates no pending interrupts or other status flags set.
uint16_t RFM22ReadStatusBoth()
  {
  const bool neededEnable = powerUpSPIIfDisabled();
  const uint16_t result = _RFM22ReadReg16Bit(RFM22REG_INT_STATUS1);
  if(neededEnable) { powerDownSPI(); }
    2ebc:	99 23       	and	r25, r25
    2ebe:	11 f0       	breq	.+4      	; 0x2ec4 <RFM22ReadStatusBoth()+0x36>
    2ec0:	0e 94 54 14 	call	0x28a8	; 0x28a8 <powerDownSPI()>
    2ec4:	90 2f       	mov	r25, r16
    2ec6:	80 e0       	ldi	r24, 0x00	; 0
    2ec8:	21 2f       	mov	r18, r17
    2eca:	30 e0       	ldi	r19, 0x00	; 0
    2ecc:	28 2b       	or	r18, r24
    2ece:	39 2b       	or	r19, r25
  return(result);
  }
    2ed0:	c9 01       	movw	r24, r18
    2ed2:	1f 91       	pop	r17
    2ed4:	0f 91       	pop	r16
    2ed6:	08 95       	ret

00002ed8 <RFM22ModeStandbyAndClearState()>:
// Enter standby mode (consume least possible power but retain register contents).
// FIFO state and pending interrupts are cleared.
// Typical consumption in standby 450nA (cf 15nA when shut down, 8.5mA TUNE, 18--80mA RX/TX).
void RFM22ModeStandbyAndClearState()
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    2ed8:	0e 94 6e 14 	call	0x28dc	; 0x28dc <powerUpSPIIfDisabled()>
    2edc:	98 2f       	mov	r25, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2ede:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2ee0:	87 e8       	ldi	r24, 0x87	; 135
    2ee2:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2ee4:	0d b4       	in	r0, 0x2d	; 45
    2ee6:	07 fe       	sbrs	r0, 7
    2ee8:	fd cf       	rjmp	.-6      	; 0x2ee4 <RFM22ModeStandbyAndClearState()+0xc>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2eea:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2eec:	0d b4       	in	r0, 0x2d	; 45
    2eee:	07 fe       	sbrs	r0, 7
    2ef0:	fd cf       	rjmp	.-6      	; 0x2eec <RFM22ModeStandbyAndClearState()+0x14>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2ef2:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2ef4:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2ef6:	88 e8       	ldi	r24, 0x88	; 136
    2ef8:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2efa:	0d b4       	in	r0, 0x2d	; 45
    2efc:	07 fe       	sbrs	r0, 7
    2efe:	fd cf       	rjmp	.-6      	; 0x2efa <RFM22ModeStandbyAndClearState()+0x22>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2f00:	83 e0       	ldi	r24, 0x03	; 3
    2f02:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2f04:	0d b4       	in	r0, 0x2d	; 45
    2f06:	07 fe       	sbrs	r0, 7
    2f08:	fd cf       	rjmp	.-6      	; 0x2f04 <RFM22ModeStandbyAndClearState()+0x2c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2f0a:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2f0c:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2f0e:	88 e8       	ldi	r24, 0x88	; 136
    2f10:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2f12:	0d b4       	in	r0, 0x2d	; 45
    2f14:	07 fe       	sbrs	r0, 7
    2f16:	fd cf       	rjmp	.-6      	; 0x2f12 <RFM22ModeStandbyAndClearState()+0x3a>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2f18:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2f1a:	0d b4       	in	r0, 0x2d	; 45
    2f1c:	07 fe       	sbrs	r0, 7
    2f1e:	fd cf       	rjmp	.-6      	; 0x2f1a <RFM22ModeStandbyAndClearState()+0x42>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2f20:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    2f22:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2f24:	85 e8       	ldi	r24, 0x85	; 133
    2f26:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2f28:	0d b4       	in	r0, 0x2d	; 45
    2f2a:	07 fe       	sbrs	r0, 7
    2f2c:	fd cf       	rjmp	.-6      	; 0x2f28 <RFM22ModeStandbyAndClearState()+0x50>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2f2e:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2f30:	0d b4       	in	r0, 0x2d	; 45
    2f32:	07 fe       	sbrs	r0, 7
    2f34:	fd cf       	rjmp	.-6      	; 0x2f30 <RFM22ModeStandbyAndClearState()+0x58>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2f36:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2f38:	0d b4       	in	r0, 0x2d	; 45
    2f3a:	07 fe       	sbrs	r0, 7
    2f3c:	fd cf       	rjmp	.-6      	; 0x2f38 <RFM22ModeStandbyAndClearState()+0x60>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    2f3e:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    2f40:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2f42:	83 e8       	ldi	r24, 0x83	; 131
    2f44:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2f46:	0d b4       	in	r0, 0x2d	; 45
    2f48:	07 fe       	sbrs	r0, 7
    2f4a:	fd cf       	rjmp	.-6      	; 0x2f46 <RFM22ModeStandbyAndClearState()+0x6e>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2f4c:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2f4e:	0d b4       	in	r0, 0x2d	; 45
    2f50:	07 fe       	sbrs	r0, 7
    2f52:	fd cf       	rjmp	.-6      	; 0x2f4e <RFM22ModeStandbyAndClearState()+0x76>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2f54:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2f56:	0d b4       	in	r0, 0x2d	; 45
    2f58:	07 fe       	sbrs	r0, 7
    2f5a:	fd cf       	rjmp	.-6      	; 0x2f56 <RFM22ModeStandbyAndClearState()+0x7e>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    2f5c:	2a 9a       	sbi	0x05, 2	; 5
//  _RFM22WriteReg8Bit(RFM22REG_INT_ENABLE2, 0); // TODO: combine in burst write with previous...
  _RFM22WriteReg16Bit0(RFM22REG_INT_ENABLE1);
  // Clear any interrupts already/still pending...
  _RFM22ClearInterrupts();  
  //_RFM22WriteReg8Bit(0xd, 0x1f); // Drive GPIO2 to ground as output... (Move to general register settings.)
  if(neededEnable) { powerDownSPI(); }
    2f5e:	99 23       	and	r25, r25
    2f60:	11 f0       	breq	.+4      	; 0x2f66 <RFM22ModeStandbyAndClearState()+0x8e>
    2f62:	0e 94 54 14 	call	0x28a8	; 0x28a8 <powerDownSPI()>
    2f66:	08 95       	ret

00002f68 <RFM22TXFIFO()>:

// Transmit contents of on-chip TX FIFO: caller should revert to low-power standby mode (etc) if required.
// Returns true if packet apparently sent correctly/fully.
// Does not clear TX FIFO (so possible to re-send immediately).
// Note: Reliability possibly helped by early move to 'tune' mode to work other than with default (4MHz) lowish PICAXE clock speeds.
bool RFM22TXFIFO()
    2f68:	ff 92       	push	r15
    2f6a:	0f 93       	push	r16
    2f6c:	1f 93       	push	r17
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    2f6e:	0e 94 6e 14 	call	0x28dc	; 0x28dc <powerUpSPIIfDisabled()>
    2f72:	f8 2e       	mov	r15, r24

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2f74:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2f76:	85 e8       	ldi	r24, 0x85	; 133
    2f78:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2f7a:	0d b4       	in	r0, 0x2d	; 45
    2f7c:	07 fe       	sbrs	r0, 7
    2f7e:	fd cf       	rjmp	.-6      	; 0x2f7a <RFM22TXFIFO()+0x12>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2f80:	84 e0       	ldi	r24, 0x04	; 4
    2f82:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2f84:	0d b4       	in	r0, 0x2d	; 45
    2f86:	07 fe       	sbrs	r0, 7
    2f88:	fd cf       	rjmp	.-6      	; 0x2f84 <RFM22TXFIFO()+0x1c>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2f8a:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2f8c:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2f8e:	86 e8       	ldi	r24, 0x86	; 134
    2f90:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2f92:	0d b4       	in	r0, 0x2d	; 45
    2f94:	07 fe       	sbrs	r0, 7
    2f96:	fd cf       	rjmp	.-6      	; 0x2f92 <RFM22TXFIFO()+0x2a>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2f98:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2f9a:	0d b4       	in	r0, 0x2d	; 45
    2f9c:	07 fe       	sbrs	r0, 7
    2f9e:	fd cf       	rjmp	.-6      	; 0x2f9a <RFM22TXFIFO()+0x32>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2fa0:	2a 9a       	sbi	0x05, 2	; 5

// Write 0 to 16-bit register on RFM22 as burst.
// SPI must already be configured and running.
static void _RFM22WriteReg16Bit0(const uint8_t addr)
  {
  _RFM22_SELECT();
    2fa2:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2fa4:	83 e8       	ldi	r24, 0x83	; 131
    2fa6:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2fa8:	0d b4       	in	r0, 0x2d	; 45
    2faa:	07 fe       	sbrs	r0, 7
    2fac:	fd cf       	rjmp	.-6      	; 0x2fa8 <RFM22TXFIFO()+0x40>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2fae:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2fb0:	0d b4       	in	r0, 0x2d	; 45
    2fb2:	07 fe       	sbrs	r0, 7
    2fb4:	fd cf       	rjmp	.-6      	; 0x2fb0 <RFM22TXFIFO()+0x48>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2fb6:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2fb8:	0d b4       	in	r0, 0x2d	; 45
    2fba:	07 fe       	sbrs	r0, 7
    2fbc:	fd cf       	rjmp	.-6      	; 0x2fb8 <RFM22TXFIFO()+0x50>
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(0);
  _RFM22_wr(0);
  _RFM22_DESELECT();
    2fbe:	2a 9a       	sbi	0x05, 2	; 5

// Write to 8-bit register on RFM22.
// SPI must already be configured and running.
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
    2fc0:	2a 98       	cbi	0x05, 2	; 5

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2fc2:	87 e8       	ldi	r24, 0x87	; 135
    2fc4:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2fc6:	0d b4       	in	r0, 0x2d	; 45
    2fc8:	07 fe       	sbrs	r0, 7
    2fca:	fd cf       	rjmp	.-6      	; 0x2fc6 <RFM22TXFIFO()+0x5e>

// Write one byte over SPI (ignoring the value read back).
// SPI must already be configured and running.
static void _RFM22_wr(const uint8_t data)
  {
  SPDR = data;
    2fcc:	89 e0       	ldi	r24, 0x09	; 9
    2fce:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2fd0:	0d b4       	in	r0, 0x2d	; 45
    2fd2:	07 fe       	sbrs	r0, 7
    2fd4:	fd cf       	rjmp	.-6      	; 0x2fd0 <RFM22TXFIFO()+0x68>
static void _RFM22WriteReg8Bit(const uint8_t addr, const uint8_t val)
  {
  _RFM22_SELECT();
  _RFM22_wr(addr | 0x80); // Force to write.
  _RFM22_wr(val);
  _RFM22_DESELECT();
    2fd6:	2a 9a       	sbi	0x05, 2	; 5
    2fd8:	18 e0       	ldi	r17, 0x08	; 8

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    2fda:	03 e0       	ldi	r16, 0x03	; 3
    2fdc:	13 c0       	rjmp	.+38     	; 0x3004 <RFM22TXFIFO()+0x9c>
  // Repeately nap until packet sent, with upper bound of ~120ms on TX time in case there is a problem.
  // TX time is ~1.6ms per byte at 5000bps.
  bool result = false; // Usual case is success.
  for(int8_t i = 8; --i >= 0; )
    {
    nap(WDTO_15MS); // Sleep in low power mode for a short time waiting for bits to be sent...
    2fde:	80 e0       	ldi	r24, 0x00	; 0
    2fe0:	0e 94 de 11 	call	0x23bc	; 0x23bc <nap(signed char)>

// Read from 8-bit register on RFM22.
// SPI must already be configured and running.
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
    2fe4:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    2fe6:	0e bd       	out	0x2e, r16	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2fe8:	0d b4       	in	r0, 0x2d	; 45
    2fea:	07 fe       	sbrs	r0, 7
    2fec:	fd cf       	rjmp	.-6      	; 0x2fe8 <RFM22TXFIFO()+0x80>
  return(SPDR);
    2fee:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    2ff0:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    2ff2:	0d b4       	in	r0, 0x2d	; 45
    2ff4:	07 fe       	sbrs	r0, 7
    2ff6:	fd cf       	rjmp	.-6      	; 0x2ff2 <RFM22TXFIFO()+0x8a>
  return(SPDR);
    2ff8:	8e b5       	in	r24, 0x2e	; 46
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  const uint8_t result = _RFM22_io(0); // Dummy value...
  _RFM22_DESELECT();
    2ffa:	2a 9a       	sbi	0x05, 2	; 5
  bool result = false; // Usual case is success.
  for(int8_t i = 8; --i >= 0; )
    {
    nap(WDTO_15MS); // Sleep in low power mode for a short time waiting for bits to be sent...
    const uint8_t status = _RFM22ReadReg8Bit(RFM22REG_INT_STATUS1); // TODO: could use nIRQ instead if available.
    if(status & 4) { result = true; break; } // Packet sent!
    2ffc:	82 ff       	sbrs	r24, 2
    2ffe:	02 c0       	rjmp	.+4      	; 0x3004 <RFM22TXFIFO()+0x9c>
    3000:	11 e0       	ldi	r17, 0x01	; 1
    3002:	03 c0       	rjmp	.+6      	; 0x300a <RFM22TXFIFO()+0xa2>
  _RFM22ModeTX(); // Enable TX mode and transmit TX FIFO contents.

  // Repeately nap until packet sent, with upper bound of ~120ms on TX time in case there is a problem.
  // TX time is ~1.6ms per byte at 5000bps.
  bool result = false; // Usual case is success.
  for(int8_t i = 8; --i >= 0; )
    3004:	11 50       	subi	r17, 0x01	; 1
    3006:	58 f7       	brcc	.-42     	; 0x2fde <RFM22TXFIFO()+0x76>
    3008:	10 e0       	ldi	r17, 0x00	; 0
    nap(WDTO_15MS); // Sleep in low power mode for a short time waiting for bits to be sent...
    const uint8_t status = _RFM22ReadReg8Bit(RFM22REG_INT_STATUS1); // TODO: could use nIRQ instead if available.
    if(status & 4) { result = true; break; } // Packet sent!
    }

  if(neededEnable) { powerDownSPI(); }
    300a:	ff 20       	and	r15, r15
    300c:	11 f0       	breq	.+4      	; 0x3012 <RFM22TXFIFO()+0xaa>
    300e:	0e 94 54 14 	call	0x28a8	; 0x28a8 <powerDownSPI()>
  return(result);
  }
    3012:	81 2f       	mov	r24, r17
    3014:	1f 91       	pop	r17
    3016:	0f 91       	pop	r16
    3018:	ff 90       	pop	r15
    301a:	08 95       	ret

0000301c <RFM22CheckConnected()>:
  _RFM22ModeStandby();
  if(neededEnable) { powerDownSPI(); }
  }

// Returns true iff RFM22 (or RFM23) appears to be correctly connected.
bool RFM22CheckConnected()
    301c:	0f 93       	push	r16
    301e:	1f 93       	push	r17
  {
  const bool neededEnable = powerUpSPIIfDisabled();
    3020:	0e 94 6e 14 	call	0x28dc	; 0x28dc <powerUpSPIIfDisabled()>
    3024:	08 2f       	mov	r16, r24

// Read from 8-bit register on RFM22.
// SPI must already be configured and running.
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
    3026:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    3028:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    302a:	0d b4       	in	r0, 0x2d	; 45
    302c:	07 fe       	sbrs	r0, 7
    302e:	fd cf       	rjmp	.-6      	; 0x302a <RFM22CheckConnected()+0xe>
  return(SPDR);
    3030:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    3032:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3034:	0d b4       	in	r0, 0x2d	; 45
    3036:	07 fe       	sbrs	r0, 7
    3038:	fd cf       	rjmp	.-6      	; 0x3034 <RFM22CheckConnected()+0x18>
  return(SPDR);
    303a:	1e b5       	in	r17, 0x2e	; 46
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  const uint8_t result = _RFM22_io(0); // Dummy value...
  _RFM22_DESELECT();
    303c:	2a 9a       	sbi	0x05, 2	; 5
bool RFM22CheckConnected()
  {
  const bool neededEnable = powerUpSPIIfDisabled();
  bool isOK = false;
  const uint8_t rType = _RFM22ReadReg8Bit(0); // May read as 0 if not connected at all.
  if(RFM22_SUPPORTED_DEVICE_TYPE == rType)
    303e:	18 30       	cpi	r17, 0x08	; 8
    3040:	a1 f4       	brne	.+40     	; 0x306a <RFM22CheckConnected()+0x4e>

// Read from 8-bit register on RFM22.
// SPI must already be configured and running.
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
    3042:	2a 98       	cbi	0x05, 2	; 5

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    3044:	81 e0       	ldi	r24, 0x01	; 1
    3046:	8e bd       	out	0x2e, r24	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3048:	0d b4       	in	r0, 0x2d	; 45
    304a:	07 fe       	sbrs	r0, 7
    304c:	fd cf       	rjmp	.-6      	; 0x3048 <RFM22CheckConnected()+0x2c>
  return(SPDR);
    304e:	8e b5       	in	r24, 0x2e	; 46

// Write/read one byte over SPI...
// SPI must already be configured and running.
static uint8_t _RFM22_io(const uint8_t data)
  {
  SPDR = data;
    3050:	1e bc       	out	0x2e, r1	; 46
  // TODO: convert from busy-wait to sleep, at least in a standby mode, if likely longer than 10s of uS.
  // At lowest SPI clock prescale (x2) this is likely to spin for ~16 CPU cycles (8 bits each taking 2 cycles).
  while (!(SPSR & _BV(SPIF))) { }
    3052:	0d b4       	in	r0, 0x2d	; 45
    3054:	07 fe       	sbrs	r0, 7
    3056:	fd cf       	rjmp	.-6      	; 0x3052 <RFM22CheckConnected()+0x36>
  return(SPDR);
    3058:	1e b5       	in	r17, 0x2e	; 46
static uint8_t _RFM22ReadReg8Bit(const uint8_t addr)
  {
  _RFM22_SELECT();
  _RFM22_io(addr & 0x7f); // Force to read.
  const uint8_t result = _RFM22_io(0); // Dummy value...
  _RFM22_DESELECT();
    305a:	2a 9a       	sbi	0x05, 2	; 5
  bool isOK = false;
  const uint8_t rType = _RFM22ReadReg8Bit(0); // May read as 0 if not connected at all.
  if(RFM22_SUPPORTED_DEVICE_TYPE == rType)
    {
    const uint8_t rVersion = _RFM22ReadReg8Bit(1);
    if(RFM22_SUPPORTED_DEVICE_VERSION == rVersion)
    305c:	16 30       	cpi	r17, 0x06	; 6
    305e:	11 f4       	brne	.+4      	; 0x3064 <RFM22CheckConnected()+0x48>
    3060:	11 e0       	ldi	r17, 0x01	; 1
    3062:	10 c0       	rjmp	.+32     	; 0x3084 <RFM22CheckConnected()+0x68>
      { isOK = true; }
#if 1 && defined(DEBUG)
    else
      {
      DEBUG_SERIAL_PRINT_FLASHSTRING("RFM22 bad version: ");
    3064:	84 ea       	ldi	r24, 0xA4	; 164
    3066:	91 e0       	ldi	r25, 0x01	; 1
    3068:	02 c0       	rjmp	.+4      	; 0x306e <RFM22CheckConnected()+0x52>
#endif
    }
#if 1 && defined(DEBUG)
  else
    {
    DEBUG_SERIAL_PRINT_FLASHSTRING("RFM22 bad type: ");
    306a:	83 e9       	ldi	r24, 0x93	; 147
    306c:	91 e0       	ldi	r25, 0x01	; 1
    306e:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <serialPrintAndFlush(__FlashStringHelper const*)>
    DEBUG_SERIAL_PRINTFMT(rType, HEX);
    3072:	81 2f       	mov	r24, r17
    3074:	90 e0       	ldi	r25, 0x00	; 0
    3076:	60 e1       	ldi	r22, 0x10	; 16
    3078:	70 e0       	ldi	r23, 0x00	; 0
    307a:	0e 94 a5 1a 	call	0x354a	; 0x354a <serialPrintAndFlush(int, int)>
    DEBUG_SERIAL_PRINTLN();
    307e:	0e 94 95 1a 	call	0x352a	; 0x352a <serialPrintlnAndFlush()>
    3082:	10 e0       	ldi	r17, 0x00	; 0
    }
#endif
  if(neededEnable) { powerDownSPI(); }
    3084:	00 23       	and	r16, r16
    3086:	11 f0       	breq	.+4      	; 0x308c <RFM22CheckConnected()+0x70>
    3088:	0e 94 54 14 	call	0x28a8	; 0x28a8 <powerDownSPI()>
  return(isOK);
  }
    308c:	81 2f       	mov	r24, r17
    308e:	1f 91       	pop	r17
    3090:	0f 91       	pop	r16
    3092:	08 95       	ret

00003094 <eeprom_read_byte>:


/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
    3094:	9c 01       	movw	r18, r24
{
    do {} while (!eeprom_is_ready ());
    3096:	f9 99       	sbic	0x1f, 1	; 31
    3098:	fe cf       	rjmp	.-4      	; 0x3096 <eeprom_read_byte+0x2>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    309a:	32 bd       	out	0x22, r19	; 34
    309c:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    309e:	f8 9a       	sbi	0x1f, 0	; 31
    30a0:	80 b5       	in	r24, 0x20	; 32
    return __result;
}
    30a2:	08 95       	ret

000030a4 <eeprom_write_byte>:
}

/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
    30a4:	9c 01       	movw	r18, r24
{
    do {} while (!eeprom_is_ready ());
    30a6:	f9 99       	sbic	0x1f, 1	; 31
    30a8:	fe cf       	rjmp	.-4      	; 0x30a6 <eeprom_write_byte+0x2>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    30aa:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    30ac:	32 bd       	out	0x22, r19	; 34
    30ae:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
    30b0:	60 bd       	out	0x20, r22	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    30b2:	0f b6       	in	r0, 0x3f	; 63
    30b4:	f8 94       	cli
    30b6:	fa 9a       	sbi	0x1f, 2	; 31
    30b8:	f9 9a       	sbi	0x1f, 1	; 31
    30ba:	0f be       	out	0x3f, r0	; 63
}
    30bc:	08 95       	ret

000030be <getMinutesSinceMidnightLT()>:
// Preserves interrupt state.
#ifndef getMinutesSinceMidnightLT
uint_least16_t getMinutesSinceMidnightLT()
  {
  uint_least16_t result;
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    30be:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    30c0:	f8 94       	cli
    { result = _minutesSinceMidnightLT; }
    30c2:	20 91 c7 01 	lds	r18, 0x01C7
    30c6:	30 91 c8 01 	lds	r19, 0x01C8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    30ca:	8f bf       	out	0x3f, r24	; 63
  return(result);
  }
    30cc:	c9 01       	movw	r24, r18
    30ce:	08 95       	ret

000030d0 <getMinutesLT()>:
// Preserves interrupt state.
#ifndef getMinutesSinceMidnightLT
uint_least16_t getMinutesSinceMidnightLT()
  {
  uint_least16_t result;
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    30d0:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    30d2:	f8 94       	cli
    { result = _minutesSinceMidnightLT; }
    30d4:	80 91 c7 01 	lds	r24, 0x01C7
    30d8:	90 91 c8 01 	lds	r25, 0x01C8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    30dc:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    30de:	6c e3       	ldi	r22, 0x3C	; 60
    30e0:	70 e0       	ldi	r23, 0x00	; 0
    30e2:	0e 94 e3 33 	call	0x67c6	; 0x67c6 <__udivmodhi4>
  return(result);
  }
#endif

// Get local time minutes from RTC [0,59].
uint_least8_t getMinutesLT() { return(getMinutesSinceMidnightLT() % 60); }
    30e6:	08 95       	ret

000030e8 <getHoursLT()>:
// Preserves interrupt state.
#ifndef getMinutesSinceMidnightLT
uint_least16_t getMinutesSinceMidnightLT()
  {
  uint_least16_t result;
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    30e8:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    30ea:	f8 94       	cli
    { result = _minutesSinceMidnightLT; }
    30ec:	80 91 c7 01 	lds	r24, 0x01C7
    30f0:	90 91 c8 01 	lds	r25, 0x01C8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    30f4:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    30f6:	6c e3       	ldi	r22, 0x3C	; 60
    30f8:	70 e0       	ldi	r23, 0x00	; 0
    30fa:	0e 94 e3 33 	call	0x67c6	; 0x67c6 <__udivmodhi4>
    30fe:	86 2f       	mov	r24, r22

// Get local time minutes from RTC [0,59].
uint_least8_t getMinutesLT() { return(getMinutesSinceMidnightLT() % 60); }

// Get local time hours from RTC [0,23].
uint_least8_t getHoursLT() { return(getMinutesSinceMidnightLT() / 60); }
    3100:	08 95       	ret

00003102 <restoreRTC()>:

// Restore software RTC information from non-volatile (EEPROM) store, if possible.
// Returns true if the persisted data seemed valid and was restored, in full or part.
// To void on average using 15/2 minutes at each reset/restart,
// this starts the internal time a little over half way into the restored 15-minute slot.
bool restoreRTC()
    3102:	1f 93       	push	r17
  {
  uint8_t persistedValue;
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    3104:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3106:	f8 94       	cli
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    3108:	88 e0       	ldi	r24, 0x08	; 8
    310a:	90 e0       	ldi	r25, 0x00	; 0
    310c:	6a e4       	ldi	r22, 0x4A	; 74
    310e:	78 e1       	ldi	r23, 0x18	; 24
    3110:	0e 94 05 04 	call	0x80a	; 0x80a <__eerd_word>
    {
    // Restore the persisted days, though ignore if apparently unset (all 1s).
    const uint16_t days = eeprom_read_word((uint16_t*)EE_START_RTC_DAY_PERSIST);
    if(days != (uint16_t)~0U) { _daysSince1999LT = days; }
    3114:	2f ef       	ldi	r18, 0xFF	; 255
    3116:	8f 3f       	cpi	r24, 0xFF	; 255
    3118:	92 07       	cpc	r25, r18
    311a:	21 f0       	breq	.+8      	; 0x3124 <restoreRTC()+0x22>
    311c:	90 93 ca 01 	sts	0x01CA, r25
    3120:	80 93 c9 01 	sts	0x01C9, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    3124:	f9 99       	sbic	0x1f, 1	; 31
    3126:	fe cf       	rjmp	.-4      	; 0x3124 <restoreRTC()+0x22>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    3128:	8a e0       	ldi	r24, 0x0A	; 10
    312a:	90 e0       	ldi	r25, 0x00	; 0
    312c:	92 bd       	out	0x22, r25	; 34
    312e:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    3130:	f8 9a       	sbi	0x1f, 0	; 31
    3132:	60 b5       	in	r22, 0x20	; 32
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3134:	1f bf       	out	0x3f, r17	; 63
    // Now recover persisted HH:MM value.
    persistedValue = eeprom_read_byte((uint8_t*)EE_START_RTC_HHMM_PERSIST);
    }

  // Abort if value clearly invalid, eg likely an unprogrammed (0xff) byte.
  if(persistedValue >= (24 << 3)) { return(false); }
    3136:	60 3c       	cpi	r22, 0xC0	; 192
    3138:	90 f5       	brcc	.+100    	; 0x319e <restoreRTC()+0x9c>

  uint_least16_t minutesSinceMidnight = (persistedValue >> 3) * 60;
    313a:	86 2f       	mov	r24, r22
    313c:	90 e0       	ldi	r25, 0x00	; 0
    313e:	23 e0       	ldi	r18, 0x03	; 3
    3140:	95 95       	asr	r25
    3142:	87 95       	ror	r24
    3144:	2a 95       	dec	r18
    3146:	e1 f7       	brne	.-8      	; 0x3140 <restoreRTC()+0x3e>
    3148:	2c e3       	ldi	r18, 0x3C	; 60
    314a:	30 e0       	ldi	r19, 0x00	; 0
    314c:	82 9f       	mul	r24, r18
    314e:	a0 01       	movw	r20, r0
    3150:	83 9f       	mul	r24, r19
    3152:	50 0d       	add	r21, r0
    3154:	92 9f       	mul	r25, r18
    3156:	50 0d       	add	r21, r0
    3158:	11 24       	eor	r1, r1
  minutesSinceMidnight += 8; // Start just over half-way into one quantum to minimise average time lost on restart.
    315a:	9a 01       	movw	r18, r20
    315c:	28 5f       	subi	r18, 0xF8	; 248
    315e:	3f 4f       	sbci	r19, 0xFF	; 255
  const uint8_t lowBits = persistedValue & 7; // Extract quarter-hour bits.
  switch(lowBits)
    3160:	86 2f       	mov	r24, r22
    3162:	87 70       	andi	r24, 0x07	; 7
    3164:	81 30       	cpi	r24, 0x01	; 1
    3166:	59 f0       	breq	.+22     	; 0x317e <restoreRTC()+0x7c>
    3168:	81 30       	cpi	r24, 0x01	; 1
    316a:	28 f0       	brcs	.+10     	; 0x3176 <restoreRTC()+0x74>
    316c:	83 30       	cpi	r24, 0x03	; 3
    316e:	59 f0       	breq	.+22     	; 0x3186 <restoreRTC()+0x84>
    3170:	87 30       	cpi	r24, 0x07	; 7
    3172:	a9 f4       	brne	.+42     	; 0x319e <restoreRTC()+0x9c>
    3174:	0b c0       	rjmp	.+22     	; 0x318c <restoreRTC()+0x8a>
    {
    case 0: minutesSinceMidnight += 45; break;
    3176:	9a 01       	movw	r18, r20
    3178:	2b 5c       	subi	r18, 0xCB	; 203
    317a:	3f 4f       	sbci	r19, 0xFF	; 255
    317c:	07 c0       	rjmp	.+14     	; 0x318c <restoreRTC()+0x8a>
    case 1: minutesSinceMidnight += 30; break;
    317e:	9a 01       	movw	r18, r20
    3180:	2a 5d       	subi	r18, 0xDA	; 218
    3182:	3f 4f       	sbci	r19, 0xFF	; 255
    3184:	03 c0       	rjmp	.+6      	; 0x318c <restoreRTC()+0x8a>
    case 3: minutesSinceMidnight += 15; break;
    3186:	9a 01       	movw	r18, r20
    3188:	29 5e       	subi	r18, 0xE9	; 233
    318a:	3f 4f       	sbci	r19, 0xFF	; 255
    default: return(false); // Invalid bit pattern: abort.
    }

  // Set the hours and minutes (atomically).
  // Deliberately leave the seconds unset to avoid units becoming too synchronised with one another, increasing TX collisions, etc.
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    318c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    318e:	f8 94       	cli
    { _minutesSinceMidnightLT = minutesSinceMidnight; }
    3190:	30 93 c8 01 	sts	0x01C8, r19
    3194:	20 93 c7 01 	sts	0x01C7, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3198:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
    319a:	81 e0       	ldi	r24, 0x01	; 1
    319c:	01 c0       	rjmp	.+2      	; 0x31a0 <restoreRTC()+0x9e>

  return(true);
    319e:	80 e0       	ldi	r24, 0x00	; 0
  }
    31a0:	1f 91       	pop	r17
    31a2:	08 95       	ret

000031a4 <persistRTC()>:
// but enough to help avoid the clock slipping too much during (say) a battery change.
// There is no point calling this more than (say) once per minute,
// though it will simply return relatively quickly from redundant calls.
// The RTC data is stored so as not to wear out AVR EEPROM for at least several years.
// IMPLEMENTATION OF THIS AND THE eeprom_smart_xxx_byte() ROUTINES IS CRITICAL TO PERFORMANCE AND LONGEVITY.
void persistRTC()
    31a4:	1f 93       	push	r17
  {
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    31a6:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    31a8:	f8 94       	cli
    {
    uint8_t quarterHours = (_minutesSinceMidnightLT / 15);
    31aa:	80 91 c7 01 	lds	r24, 0x01C7
    31ae:	90 91 c8 01 	lds	r25, 0x01C8
    31b2:	6f e0       	ldi	r22, 0x0F	; 15
    31b4:	70 e0       	ldi	r23, 0x00	; 0
    31b6:	0e 94 e3 33 	call	0x67c6	; 0x67c6 <__udivmodhi4>
    uint8_t targetByte = (quarterHours << 1) & ~7U; // Bit pattern now hhhhh000 where hhhhh is whole hours [0,23].
    31ba:	46 2f       	mov	r20, r22
    31bc:	44 0f       	add	r20, r20
    31be:	48 7f       	andi	r20, 0xF8	; 248
    switch(quarterHours & 3)
    31c0:	70 e0       	ldi	r23, 0x00	; 0
    31c2:	63 70       	andi	r22, 0x03	; 3
    31c4:	70 70       	andi	r23, 0x00	; 0
    31c6:	61 30       	cpi	r22, 0x01	; 1
    31c8:	71 05       	cpc	r23, r1
    31ca:	39 f0       	breq	.+14     	; 0x31da <persistRTC()+0x36>
    31cc:	62 30       	cpi	r22, 0x02	; 2
    31ce:	71 05       	cpc	r23, r1
    31d0:	31 f0       	breq	.+12     	; 0x31de <persistRTC()+0x3a>
    31d2:	67 2b       	or	r22, r23
    31d4:	29 f4       	brne	.+10     	; 0x31e0 <persistRTC()+0x3c>
      {
      case 0: targetByte |= 7; break;
    31d6:	47 60       	ori	r20, 0x07	; 7
    31d8:	03 c0       	rjmp	.+6      	; 0x31e0 <persistRTC()+0x3c>
      case 1: targetByte |= 3; break;
    31da:	43 60       	ori	r20, 0x03	; 3
    31dc:	01 c0       	rjmp	.+2      	; 0x31e0 <persistRTC()+0x3c>
      case 2: targetByte |= 1; break;
    31de:	41 60       	ori	r20, 0x01	; 1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    31e0:	f9 99       	sbic	0x1f, 1	; 31
    31e2:	fe cf       	rjmp	.-4      	; 0x31e0 <persistRTC()+0x3c>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    31e4:	8a e0       	ldi	r24, 0x0A	; 10
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	92 bd       	out	0x22, r25	; 34
    31ea:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    31ec:	f8 9a       	sbi	0x1f, 0	; 31
    31ee:	80 b5       	in	r24, 0x20	; 32
      }

    // Update if target HH:MM not already correct.
    const uint8_t persistedValue = eeprom_read_byte((uint8_t*)EE_START_RTC_HHMM_PERSIST);
    if(persistedValue != targetByte)
    31f0:	84 17       	cp	r24, r20
    31f2:	91 f1       	breq	.+100    	; 0x3258 <persistRTC()+0xb4>
      {
      // Where it is not possible to get the target value just by setting bits to 0,
      // eg for a new hour (ie completely different hour to that in EEPROM and on roll to new hour),
      // then do a full erase/write...
      //if((0 == quarterHours) || ((persistedValue & 0xf8) != (targetByte & 0xf8)))
      if(targetByte != (persistedValue & targetByte))
    31f4:	24 2f       	mov	r18, r20
    31f6:	30 e0       	ldi	r19, 0x00	; 0
    31f8:	90 e0       	ldi	r25, 0x00	; 0
    31fa:	82 23       	and	r24, r18
    31fc:	93 23       	and	r25, r19
    31fe:	28 17       	cp	r18, r24
    3200:	39 07       	cpc	r19, r25
    3202:	71 f0       	breq	.+28     	; 0x3220 <persistRTC()+0x7c>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    3204:	f9 99       	sbic	0x1f, 1	; 31
    3206:	fe cf       	rjmp	.-4      	; 0x3204 <persistRTC()+0x60>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    3208:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    320a:	8a e0       	ldi	r24, 0x0A	; 10
    320c:	90 e0       	ldi	r25, 0x00	; 0
    320e:	92 bd       	out	0x22, r25	; 34
    3210:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    3212:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    3214:	0f b6       	in	r0, 0x3f	; 63
    3216:	f8 94       	cli
    3218:	fa 9a       	sbi	0x1f, 2	; 31
    321a:	f9 9a       	sbi	0x1f, 1	; 31
    321c:	0f be       	out	0x3f, r0	; 63
    321e:	05 c0       	rjmp	.+10     	; 0x322a <persistRTC()+0x86>
        { eeprom_write_byte((uint8_t*)EE_START_RTC_HHMM_PERSIST, targetByte); }
      // Else do a write without erase, typically clearing the quarter bits one at a time...
      else
        { eeprom_smart_clear_bits((uint8_t*)EE_START_RTC_HHMM_PERSIST, targetByte); }
    3220:	8a e0       	ldi	r24, 0x0A	; 10
    3222:	90 e0       	ldi	r25, 0x00	; 0
    3224:	64 2f       	mov	r22, r20
    3226:	0e 94 ef 07 	call	0xfde	; 0xfde <eeprom_smart_clear_bits(unsigned char*, unsigned char)>
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    322a:	88 e0       	ldi	r24, 0x08	; 8
    322c:	90 e0       	ldi	r25, 0x00	; 0
    322e:	6a e4       	ldi	r22, 0x4A	; 74
    3230:	78 e1       	ldi	r23, 0x18	; 24
    3232:	0e 94 05 04 	call	0x80a	; 0x80a <__eerd_word>

      // Also persist the current days if not up to date.
      const uint16_t days = eeprom_read_word((uint16_t*)EE_START_RTC_DAY_PERSIST);
      if(days != _daysSince1999LT) { eeprom_write_word((uint16_t*)EE_START_RTC_DAY_PERSIST, _daysSince1999LT); }
    3236:	20 91 c9 01 	lds	r18, 0x01C9
    323a:	30 91 ca 01 	lds	r19, 0x01CA
    323e:	82 17       	cp	r24, r18
    3240:	93 07       	cpc	r25, r19
    3242:	51 f0       	breq	.+20     	; 0x3258 <persistRTC()+0xb4>
    3244:	60 91 c9 01 	lds	r22, 0x01C9
    3248:	70 91 ca 01 	lds	r23, 0x01CA
    Write a word \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_word (uint16_t *__p, uint16_t __value)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    __eewr_word (__p, __value, eeprom_write_byte);
    324c:	88 e0       	ldi	r24, 0x08	; 8
    324e:	90 e0       	ldi	r25, 0x00	; 0
    3250:	42 e5       	ldi	r20, 0x52	; 82
    3252:	58 e1       	ldi	r21, 0x18	; 24
    3254:	0e 94 1b 04 	call	0x836	; 0x836 <__eewr_word>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3258:	1f bf       	out	0x3f, r17	; 63
      }
    }
  }
    325a:	1f 91       	pop	r17
    325c:	08 95       	ret

0000325e <setHoursMinutesLT(int, int)>:
// Will ignore attempts to set bad values and return false in that case.
// Returns true if all OK and the time has been set.
// Does not attempt to set seconds.
// Thread/interrupt safe, but do not call this from an ISR.
// Will persist time to survive reset as neceessary.
bool setHoursMinutesLT(int hours, int minutes)
    325e:	1f 93       	push	r17
    3260:	ac 01       	movw	r20, r24
  {
  if((hours < 0) || (hours > 23) || (minutes < 0) || (minutes > 59)) { return(false); } // Invalid time.
    3262:	88 31       	cpi	r24, 0x18	; 24
    3264:	91 05       	cpc	r25, r1
    3266:	10 f5       	brcc	.+68     	; 0x32ac <setHoursMinutesLT(int, int)+0x4e>
    3268:	77 fd       	sbrc	r23, 7
    326a:	20 c0       	rjmp	.+64     	; 0x32ac <setHoursMinutesLT(int, int)+0x4e>
    326c:	6c 33       	cpi	r22, 0x3C	; 60
    326e:	71 05       	cpc	r23, r1
    3270:	ec f4       	brge	.+58     	; 0x32ac <setHoursMinutesLT(int, int)+0x4e>
  const uint_least16_t computedMinutesSinceMidnightLT = (uint_least16_t) ((60 * hours) + minutes);
    3272:	8c e3       	ldi	r24, 0x3C	; 60
    3274:	90 e0       	ldi	r25, 0x00	; 0
    3276:	48 9f       	mul	r20, r24
    3278:	90 01       	movw	r18, r0
    327a:	49 9f       	mul	r20, r25
    327c:	30 0d       	add	r19, r0
    327e:	58 9f       	mul	r21, r24
    3280:	30 0d       	add	r19, r0
    3282:	11 24       	eor	r1, r1
    3284:	26 0f       	add	r18, r22
    3286:	37 1f       	adc	r19, r23
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    3288:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    328a:	f8 94       	cli
    {
    if(computedMinutesSinceMidnightLT != _minutesSinceMidnightLT)
    328c:	80 91 c7 01 	lds	r24, 0x01C7
    3290:	90 91 c8 01 	lds	r25, 0x01C8
    3294:	28 17       	cp	r18, r24
    3296:	39 07       	cpc	r19, r25
    3298:	31 f0       	breq	.+12     	; 0x32a6 <setHoursMinutesLT(int, int)+0x48>
      {
      // If time has changed then store it locally and persist it if need be.
      _minutesSinceMidnightLT = computedMinutesSinceMidnightLT;
    329a:	30 93 c8 01 	sts	0x01C8, r19
    329e:	20 93 c7 01 	sts	0x01C7, r18
      persistRTC();
    32a2:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <persistRTC()>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    32a6:	1f bf       	out	0x3f, r17	; 63
    __asm__ volatile ("" ::: "memory");
    32a8:	81 e0       	ldi	r24, 0x01	; 1
    32aa:	01 c0       	rjmp	.+2      	; 0x32ae <setHoursMinutesLT(int, int)+0x50>
      }
    }
  return(true); // Assume set and persisted OK.
    32ac:	80 e0       	ldi	r24, 0x00	; 0
  }
    32ae:	1f 91       	pop	r17
    32b0:	08 95       	ret

000032b2 <getSimpleScheduleOn(unsigned char)>:
// Will usually include a pre-warm time before the actual time set.
// Note that unprogrammed EEPROM value will result in invalid time, ie schedule not set.
//   * which  schedule number, counting from 0
uint_least16_t getSimpleScheduleOn(const uint8_t which)
  {
  if(which >= MAX_SIMPLE_SCHEDULES) { return(~0); } // Invalid schedule number.
    32b2:	82 30       	cpi	r24, 0x02	; 2
    32b4:	d0 f4       	brcc	.+52     	; 0x32ea <getSimpleScheduleOn(unsigned char)+0x38>
  uint8_t startMM;
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    32b6:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    32b8:	f8 94       	cli
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    32ba:	f9 99       	sbic	0x1f, 1	; 31
    32bc:	fe cf       	rjmp	.-4      	; 0x32ba <getSimpleScheduleOn(unsigned char)+0x8>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    32be:	90 e0       	ldi	r25, 0x00	; 0
    32c0:	0c 96       	adiw	r24, 0x0c	; 12
    32c2:	92 bd       	out	0x22, r25	; 34
    32c4:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    32c6:	f8 9a       	sbi	0x1f, 0	; 31
    32c8:	90 b5       	in	r25, 0x20	; 32
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    32ca:	2f bf       	out	0x3f, r18	; 63
    { startMM = eeprom_read_byte((uint8_t*)(EE_START_SIMPLE_SCHEDULE0_ON + which)); }
  if(startMM > MAX_COMPRESSED_MINS_AFTER_MIDNIGHT) { return(~0); } // No schedule set.
    32cc:	90 3f       	cpi	r25, 0xF0	; 240
    32ce:	68 f4       	brcc	.+26     	; 0x32ea <getSimpleScheduleOn(unsigned char)+0x38>
  // Compute start time from stored shedule value.
  uint_least16_t startTime = SIMPLE_SCHEDULE_GRANULARITY_MINS * startMM;
    32d0:	86 e0       	ldi	r24, 0x06	; 6
    32d2:	98 9f       	mul	r25, r24
    32d4:	c0 01       	movw	r24, r0
    32d6:	11 24       	eor	r1, r1
  const uint8_t windBackM = PREWARM_MINS; // Wind back start time by about 25% of full interval.
  if(windBackM > startTime) { startTime += MINS_PER_DAY; } // Allow for wrap-around at midnight.
    32d8:	8f 30       	cpi	r24, 0x0F	; 15
    32da:	91 05       	cpc	r25, r1
    32dc:	10 f4       	brcc	.+4      	; 0x32e2 <getSimpleScheduleOn(unsigned char)+0x30>
    32de:	80 56       	subi	r24, 0x60	; 96
    32e0:	9a 4f       	sbci	r25, 0xFA	; 250
  startTime -= windBackM;
    32e2:	9c 01       	movw	r18, r24
    32e4:	2f 50       	subi	r18, 0x0F	; 15
    32e6:	30 40       	sbci	r19, 0x00	; 0
    32e8:	02 c0       	rjmp	.+4      	; 0x32ee <getSimpleScheduleOn(unsigned char)+0x3c>
  return(startTime);
    32ea:	2f ef       	ldi	r18, 0xFF	; 255
    32ec:	3f ef       	ldi	r19, 0xFF	; 255
  }
    32ee:	c9 01       	movw	r24, r18
    32f0:	08 95       	ret

000032f2 <clearSimpleSchedule(unsigned char)>:
  }

// Clear a simple schedule.
// There will be neither on nor off events from the selected simple schedule once this is called.
//   * which  schedule number, counting from 0
void clearSimpleSchedule(const uint8_t which)
    32f2:	1f 93       	push	r17
  {
  if(which >= MAX_SIMPLE_SCHEDULES) { return; } // Invalid schedule number.
    32f4:	82 30       	cpi	r24, 0x02	; 2
    32f6:	38 f4       	brcc	.+14     	; 0x3306 <clearSimpleSchedule(unsigned char)+0x14>
  // Clear the schedule back to 'unprogrammed' values, minimising wear.
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    32f8:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    32fa:	f8 94       	cli
    { eeprom_smart_erase_byte((uint8_t*)(EE_START_SIMPLE_SCHEDULE0_ON + which)); }
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	0c 96       	adiw	r24, 0x0c	; 12
    3300:	0e 94 db 07 	call	0xfb6	; 0xfb6 <eeprom_smart_erase_byte(unsigned char*)>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3304:	1f bf       	out	0x3f, r17	; 63
  }
    3306:	1f 91       	pop	r17
    3308:	08 95       	ret

0000330a <setSimpleSchedule(unsigned int, unsigned char)>:
//   * startMinutesSinceMidnightLT  is start/on time in minutes after midnight [0,1439]
//   * which  schedule number, counting from 0
// Invalid parameters will be ignored and false returned,
// else this will return true and isSimpleScheduleSet() will return true after this.
// NOTE: over-use of this routine can prematurely wear out the EEPROM.
bool setSimpleSchedule(const uint_least16_t startMinutesSinceMidnightLT, const uint8_t which)
    330a:	1f 93       	push	r17
  {
  if(which >= MAX_SIMPLE_SCHEDULES) { return(false); } // Invalid schedule number.
    330c:	62 30       	cpi	r22, 0x02	; 2
    330e:	98 f4       	brcc	.+38     	; 0x3336 <setSimpleSchedule(unsigned int, unsigned char)+0x2c>
  if(startMinutesSinceMidnightLT >= MINS_PER_DAY) { return(false); } // Invalid time.
    3310:	25 e0       	ldi	r18, 0x05	; 5
    3312:	80 3a       	cpi	r24, 0xA0	; 160
    3314:	92 07       	cpc	r25, r18
    3316:	78 f4       	brcc	.+30     	; 0x3336 <setSimpleSchedule(unsigned int, unsigned char)+0x2c>

  // Set the schedule, minimising wear.
  const uint8_t startMM = startMinutesSinceMidnightLT / SIMPLE_SCHEDULE_GRANULARITY_MINS; // Round down...
  ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    3318:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    331a:	f8 94       	cli
    { eeprom_smart_update_byte((uint8_t*)(EE_START_SIMPLE_SCHEDULE0_ON + which), startMM); }
    331c:	26 2f       	mov	r18, r22
    331e:	30 e0       	ldi	r19, 0x00	; 0
    3320:	66 e0       	ldi	r22, 0x06	; 6
    3322:	70 e0       	ldi	r23, 0x00	; 0
    3324:	0e 94 e3 33 	call	0x67c6	; 0x67c6 <__udivmodhi4>
    3328:	c9 01       	movw	r24, r18
    332a:	0c 96       	adiw	r24, 0x0c	; 12
    332c:	0e 94 05 08 	call	0x100a	; 0x100a <eeprom_smart_update_byte(unsigned char*, unsigned char)>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3330:	1f bf       	out	0x3f, r17	; 63
    __asm__ volatile ("" ::: "memory");
    3332:	81 e0       	ldi	r24, 0x01	; 1
    3334:	01 c0       	rjmp	.+2      	; 0x3338 <setSimpleSchedule(unsigned int, unsigned char)+0x2e>
  return(true); // Assume EEPROM programmed OK...
    3336:	80 e0       	ldi	r24, 0x00	; 0
  }
    3338:	1f 91       	pop	r17
    333a:	08 95       	ret

0000333c <getSimpleScheduleOff(unsigned char)>:
  }

// Get the simple/primary schedule off time, as minutes after midnight [0,1439]; invalid (eg ~0) if none set.
// This is based on specifed start time and some element of the current eco/comfort bias.
//   * which  schedule number, counting from 0
uint_least16_t getSimpleScheduleOff(const uint8_t which)
    333c:	cf 93       	push	r28
    333e:	df 93       	push	r29
  {
  const uint_least16_t startMins = getSimpleScheduleOn(which);
    3340:	0e 94 59 19 	call	0x32b2	; 0x32b2 <getSimpleScheduleOn(unsigned char)>
    3344:	ec 01       	movw	r28, r24
  if(startMins == (uint_least16_t)~0) { return(~0); }
    3346:	8f ef       	ldi	r24, 0xFF	; 255
    3348:	cf 3f       	cpi	r28, 0xFF	; 255
    334a:	d8 07       	cpc	r29, r24
    334c:	19 f4       	brne	.+6      	; 0x3354 <getSimpleScheduleOff(unsigned char)+0x18>
    334e:	2f ef       	ldi	r18, 0xFF	; 255
    3350:	3f ef       	ldi	r19, 0xFF	; 255
    3352:	16 c0       	rjmp	.+44     	; 0x3380 <getSimpleScheduleOff(unsigned char)+0x44>
  {
//  // Simple and fast binary choice.
//  return(hasEcoBias() ? LEARNED_ON_PERIOD_M : LEARNED_ON_PERIOD_COMFORT_M);

  // Three-way split based on current WARM target temperature.
  const uint8_t wt = getWARMTargetC();
    3354:	0e 94 49 05 	call	0xa92	; 0xa92 <getWARMTargetC()>
  if(isEcoTemperature(wt)) { return(LEARNED_ON_PERIOD_M); }
    3358:	82 31       	cpi	r24, 0x12	; 18
    335a:	10 f4       	brcc	.+4      	; 0x3360 <getSimpleScheduleOff(unsigned char)+0x24>
    335c:	8c e3       	ldi	r24, 0x3C	; 60
    335e:	05 c0       	rjmp	.+10     	; 0x336a <getSimpleScheduleOff(unsigned char)+0x2e>
  else if(isComfortTemperature(wt)) { return(LEARNED_ON_PERIOD_COMFORT_M); }
    3360:	84 31       	cpi	r24, 0x14	; 20
    3362:	10 f4       	brcc	.+4      	; 0x3368 <getSimpleScheduleOff(unsigned char)+0x2c>
    3364:	8a e5       	ldi	r24, 0x5A	; 90
    3366:	01 c0       	rjmp	.+2      	; 0x336a <getSimpleScheduleOff(unsigned char)+0x2e>
    3368:	88 e7       	ldi	r24, 0x78	; 120
uint_least16_t getSimpleScheduleOff(const uint8_t which)
  {
  const uint_least16_t startMins = getSimpleScheduleOn(which);
  if(startMins == (uint_least16_t)~0) { return(~0); }
  // Compute end from start, allowing for wrap-around at midnight.
  uint_least16_t endTime = startMins + PREWARM_MINS + onTime();
    336a:	9e 01       	movw	r18, r28
    336c:	21 5f       	subi	r18, 0xF1	; 241
    336e:	3f 4f       	sbci	r19, 0xFF	; 255
    3370:	28 0f       	add	r18, r24
    3372:	31 1d       	adc	r19, r1
  if(endTime >= MINS_PER_DAY) { endTime -= MINS_PER_DAY; } // Allow for wrap-around at midnight.
    3374:	85 e0       	ldi	r24, 0x05	; 5
    3376:	20 3a       	cpi	r18, 0xA0	; 160
    3378:	38 07       	cpc	r19, r24
    337a:	10 f0       	brcs	.+4      	; 0x3380 <getSimpleScheduleOff(unsigned char)+0x44>
    337c:	20 5a       	subi	r18, 0xA0	; 160
    337e:	35 40       	sbci	r19, 0x05	; 5
  return(endTime);
  }
    3380:	c9 01       	movw	r24, r18
    3382:	df 91       	pop	r29
    3384:	cf 91       	pop	r28
    3386:	08 95       	ret

00003388 <isAnyScheduleOnWARMNow()>:

// True iff any schedule is currently 'on'/'WARM' even when schedules overlap.
// May be relatively slow/expensive.
// Can be used to suppress all 'off' activity except for the final one.
// Can be used to suppress set-backs during on times.
bool isAnyScheduleOnWARMNow()
    3388:	0f 93       	push	r16
    338a:	1f 93       	push	r17
    338c:	cf 93       	push	r28
    338e:	df 93       	push	r29
  {
  const uint_least16_t mm = getMinutesSinceMidnightLT();
    3390:	0e 94 5f 18 	call	0x30be	; 0x30be <getMinutesSinceMidnightLT()>
    3394:	8c 01       	movw	r16, r24

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    3396:	80 e0       	ldi	r24, 0x00	; 0
    3398:	0e 94 59 19 	call	0x32b2	; 0x32b2 <getSimpleScheduleOn(unsigned char)>
    339c:	ec 01       	movw	r28, r24
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    339e:	08 17       	cp	r16, r24
    33a0:	19 07       	cpc	r17, r25
    33a2:	68 f0       	brcs	.+26     	; 0x33be <isAnyScheduleOnWARMNow()+0x36>
    uint_least16_t e = getSimpleScheduleOff(which);
    33a4:	80 e0       	ldi	r24, 0x00	; 0
    33a6:	0e 94 9e 19 	call	0x333c	; 0x333c <getSimpleScheduleOff(unsigned char)>
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    33aa:	8c 17       	cp	r24, r28
    33ac:	9d 07       	cpc	r25, r29
    33ae:	20 f0       	brcs	.+8      	; 0x33b8 <isAnyScheduleOnWARMNow()+0x30>
    if(mm < e) { return(true); }
    33b0:	08 17       	cp	r16, r24
    33b2:	19 07       	cpc	r17, r25
    33b4:	20 f4       	brcc	.+8      	; 0x33be <isAnyScheduleOnWARMNow()+0x36>
    33b6:	17 c0       	rjmp	.+46     	; 0x33e6 <isAnyScheduleOnWARMNow()+0x5e>
  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    uint_least16_t e = getSimpleScheduleOff(which);
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    33b8:	80 56       	subi	r24, 0x60	; 96
    33ba:	9a 4f       	sbci	r25, 0xFA	; 250
    33bc:	f9 cf       	rjmp	.-14     	; 0x33b0 <isAnyScheduleOnWARMNow()+0x28>
  {
  const uint_least16_t mm = getMinutesSinceMidnightLT();

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    const uint_least16_t s = getSimpleScheduleOn(which);
    33be:	81 e0       	ldi	r24, 0x01	; 1
    33c0:	0e 94 59 19 	call	0x32b2	; 0x32b2 <getSimpleScheduleOn(unsigned char)>
    33c4:	ec 01       	movw	r28, r24
    if(mm < s) { continue; } // Also deals with case where this schedule is not set at all (s == ~0);
    33c6:	08 17       	cp	r16, r24
    33c8:	19 07       	cpc	r17, r25
    33ca:	58 f0       	brcs	.+22     	; 0x33e2 <isAnyScheduleOnWARMNow()+0x5a>
    uint_least16_t e = getSimpleScheduleOff(which);
    33cc:	81 e0       	ldi	r24, 0x01	; 1
    33ce:	0e 94 9e 19 	call	0x333c	; 0x333c <getSimpleScheduleOff(unsigned char)>
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    33d2:	8c 17       	cp	r24, r28
    33d4:	9d 07       	cpc	r25, r29
    33d6:	10 f4       	brcc	.+4      	; 0x33dc <isAnyScheduleOnWARMNow()+0x54>
    33d8:	80 56       	subi	r24, 0x60	; 96
    33da:	9a 4f       	sbci	r25, 0xFA	; 250
    if(mm < e) { return(true); }
    33dc:	08 17       	cp	r16, r24
    33de:	19 07       	cpc	r17, r25
    33e0:	10 f0       	brcs	.+4      	; 0x33e6 <isAnyScheduleOnWARMNow()+0x5e>
    33e2:	80 e0       	ldi	r24, 0x00	; 0
    33e4:	01 c0       	rjmp	.+2      	; 0x33e8 <isAnyScheduleOnWARMNow()+0x60>
// Can be used to suppress set-backs during on times.
bool isAnyScheduleOnWARMNow()
  {
  const uint_least16_t mm = getMinutesSinceMidnightLT();

  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    33e6:	81 e0       	ldi	r24, 0x01	; 1
    if(e < s) { e += MINS_PER_DAY; } // Cope with schedule wrap around midnight.
    if(mm < e) { return(true); }
    }

  return(false);
  }
    33e8:	df 91       	pop	r29
    33ea:	cf 91       	pop	r28
    33ec:	1f 91       	pop	r17
    33ee:	0f 91       	pop	r16
    33f0:	08 95       	ret

000033f2 <addEntropyToPool(unsigned char, unsigned char)>:
//   * estBits estimated number of truely securely random bits in range [0,8].
// Not to be called from ISRs.
void addEntropyToPool(uint8_t data, uint8_t estBits)
  {
  // TODO: no real entropy pool yet.
  seedRNG8(data, cycleCountCPU(), getSubCycleTime());
    33f2:	66 b5       	in	r22, 0x26	; 38
    33f4:	40 91 b2 00 	lds	r20, 0x00B2
    33f8:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <seedRNG8(unsigned char, unsigned char, unsigned char)>
  }
    33fc:	08 95       	ret

000033fe <getSecureRandomByte()>:

// Generate 'secure' new random byte.
// This should be essentially all entropy and unguessable.
// Likely to be slow and may force some peripheral I/O.
// Runtime details are likely to be intimately dependent on hardware implementation.
uint8_t getSecureRandomByte()
    33fe:	1f 93       	push	r17
    3400:	df 93       	push	r29
    3402:	cf 93       	push	r28
    3404:	0f 92       	push	r0
    3406:	cd b7       	in	r28, 0x3d	; 61
    3408:	de b7       	in	r29, 0x3e	; 62
  {
  // Use various real noise sources and whiten with PRNG and other counters.
  // Mix the bits also to help ensure good distribution.
  uint8_t w1 = clockJitterEntropyByte() ^ noisyADCRead();
    340a:	0e 94 bf 13 	call	0x277e	; 0x277e <clockJitterEntropyByte()>
    340e:	18 2f       	mov	r17, r24
    3410:	0e 94 0a 13 	call	0x2614	; 0x2614 <noisyADCRead()>
    3414:	81 27       	eor	r24, r17
  w1 ^= (w1 << 4); // Mix.
    3416:	18 2f       	mov	r17, r24
    3418:	12 95       	swap	r17
    341a:	10 7f       	andi	r17, 0xF0	; 240
    341c:	18 27       	eor	r17, r24
  w1 ^= randRNG8(); // Whiten.
    341e:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <randRNG8()>
    3422:	18 27       	eor	r17, r24
  w1 ^= (w1 >> 4); // Mix.
    3424:	81 2f       	mov	r24, r17
    3426:	82 95       	swap	r24
    3428:	8f 70       	andi	r24, 0x0F	; 15
    342a:	81 27       	eor	r24, r17
  uint8_t v;
  w1 ^=  _crc_ibutton_update(cycleCountCPU() ^ (uint8_t)(intptr_t)&v, ++count8 ^ w1); // Whiten.
    342c:	96 b5       	in	r25, 0x26	; 38
    342e:	40 91 cb 01 	lds	r20, 0x01CB
    3432:	4f 5f       	subi	r20, 0xFF	; 255
    3434:	40 93 cb 01 	sts	0x01CB, r20
		"	brtc	2f" "\n\t"
		"	eor	%0, %2" "\n\t"
		"2:	dec	%1" "\n\t"
		"	brne	1b" "\n\t"
		: "=r" (__crc), "=d" (__i), "=d" (__pattern)
		: "0" (__crc), "r" (__data));
    3438:	9e 01       	movw	r18, r28
    343a:	2f 5f       	subi	r18, 0xFF	; 255
    343c:	3f 4f       	sbci	r19, 0xFF	; 255
    343e:	92 27       	eor	r25, r18
    3440:	48 27       	eor	r20, r24
    3442:	94 27       	eor	r25, r20
    3444:	28 e0       	ldi	r18, 0x08	; 8
    3446:	3c e8       	ldi	r19, 0x8C	; 140
    3448:	90 fb       	bst	r25, 0
    344a:	96 95       	lsr	r25
    344c:	0e f4       	brtc	.+2      	; 0x3450 <getSecureRandomByte()+0x52>
    344e:	93 27       	eor	r25, r19
    3450:	2a 95       	dec	r18
    3452:	d1 f7       	brne	.-12     	; 0x3448 <getSecureRandomByte()+0x4a>
  return(w1);
  }
    3454:	89 27       	eor	r24, r25
    3456:	0f 90       	pop	r0
    3458:	cf 91       	pop	r28
    345a:	df 91       	pop	r29
    345c:	1f 91       	pop	r17
    345e:	08 95       	ret

00003460 <_debug_serial_timestamp()>:


#ifdef DEBUG // Don't emit debug-support code unless in DEBUG.

// Print timestamp with no newline in format: MinutesSinceMidnight:Seconds:SubCycleTime
void _debug_serial_timestamp()
    3460:	ff 92       	push	r15
    3462:	0f 93       	push	r16
    3464:	1f 93       	push	r17
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    3466:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <powerUpSerialIfDisabled()>
    346a:	f8 2e       	mov	r15, r24
  // Grab time values ASAP, fastest-incrementing first.
  // TODO: could lock out interrupts to capture atomically.
  const uint8_t ss = getSubCycleTime();
    346c:	00 91 b2 00 	lds	r16, 0x00B2
  const uint8_t s = getSecondsLT();
    3470:	10 91 c6 01 	lds	r17, 0x01C6
  const uint16_t m = getMinutesSinceMidnightLT();
    3474:	0e 94 5f 18 	call	0x30be	; 0x30be <getMinutesSinceMidnightLT()>
    3478:	bc 01       	movw	r22, r24
  Serial.print(m);
    347a:	81 e3       	ldi	r24, 0x31	; 49
    347c:	93 e0       	ldi	r25, 0x03	; 3
    347e:	4a e0       	ldi	r20, 0x0A	; 10
    3480:	50 e0       	ldi	r21, 0x00	; 0
    3482:	0e 94 e6 31 	call	0x63cc	; 0x63cc <Print::print(unsigned int, int)>
  Serial.print(':'); Serial.print(s);
    3486:	81 e3       	ldi	r24, 0x31	; 49
    3488:	93 e0       	ldi	r25, 0x03	; 3
    348a:	6a e3       	ldi	r22, 0x3A	; 58
    348c:	0e 94 1b 31 	call	0x6236	; 0x6236 <Print::print(char)>
    3490:	81 e3       	ldi	r24, 0x31	; 49
    3492:	93 e0       	ldi	r25, 0x03	; 3
    3494:	61 2f       	mov	r22, r17
    3496:	4a e0       	ldi	r20, 0x0A	; 10
    3498:	50 e0       	ldi	r21, 0x00	; 0
    349a:	0e 94 f7 31 	call	0x63ee	; 0x63ee <Print::print(unsigned char, int)>
  Serial.print(':'); Serial.print(ss);
    349e:	81 e3       	ldi	r24, 0x31	; 49
    34a0:	93 e0       	ldi	r25, 0x03	; 3
    34a2:	6a e3       	ldi	r22, 0x3A	; 58
    34a4:	0e 94 1b 31 	call	0x6236	; 0x6236 <Print::print(char)>
    34a8:	81 e3       	ldi	r24, 0x31	; 49
    34aa:	93 e0       	ldi	r25, 0x03	; 3
    34ac:	60 2f       	mov	r22, r16
    34ae:	4a e0       	ldi	r20, 0x0A	; 10
    34b0:	50 e0       	ldi	r21, 0x00	; 0
    34b2:	0e 94 f7 31 	call	0x63ee	; 0x63ee <Print::print(unsigned char, int)>
  _flush();
    34b6:	0e 94 10 15 	call	0x2a20	; 0x2a20 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    34ba:	ff 20       	and	r15, r15
    34bc:	11 f0       	breq	.+4      	; 0x34c2 <_debug_serial_timestamp()+0x62>
    34be:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <powerDownSerial()>
  }
    34c2:	1f 91       	pop	r17
    34c4:	0f 91       	pop	r16
    34c6:	ff 90       	pop	r15
    34c8:	08 95       	ret

000034ca <serialPrintAndFlush(unsigned int, int)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) number to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(const unsigned u, const int fmt)
    34ca:	df 92       	push	r13
    34cc:	ef 92       	push	r14
    34ce:	ff 92       	push	r15
    34d0:	0f 93       	push	r16
    34d2:	1f 93       	push	r17
    34d4:	8c 01       	movw	r16, r24
    34d6:	7b 01       	movw	r14, r22
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    34d8:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <powerUpSerialIfDisabled()>
    34dc:	d8 2e       	mov	r13, r24
  // Send the character.
  Serial.print(u, fmt);
    34de:	81 e3       	ldi	r24, 0x31	; 49
    34e0:	93 e0       	ldi	r25, 0x03	; 3
    34e2:	b8 01       	movw	r22, r16
    34e4:	a7 01       	movw	r20, r14
    34e6:	0e 94 e6 31 	call	0x63cc	; 0x63cc <Print::print(unsigned int, int)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    34ea:	0e 94 10 15 	call	0x2a20	; 0x2a20 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    34ee:	dd 20       	and	r13, r13
    34f0:	11 f0       	breq	.+4      	; 0x34f6 <serialPrintAndFlush(unsigned int, int)+0x2c>
    34f2:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <powerDownSerial()>
  }
    34f6:	1f 91       	pop	r17
    34f8:	0f 91       	pop	r16
    34fa:	ff 90       	pop	r15
    34fc:	ef 90       	pop	r14
    34fe:	df 90       	pop	r13
    3500:	08 95       	ret

00003502 <serialPrintAndFlush(char)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) character to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(const char c)
    3502:	0f 93       	push	r16
    3504:	1f 93       	push	r17
    3506:	18 2f       	mov	r17, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    3508:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <powerUpSerialIfDisabled()>
    350c:	08 2f       	mov	r16, r24
  // Send the character.
  Serial.print(c);
    350e:	81 e3       	ldi	r24, 0x31	; 49
    3510:	93 e0       	ldi	r25, 0x03	; 3
    3512:	61 2f       	mov	r22, r17
    3514:	0e 94 1b 31 	call	0x6236	; 0x6236 <Print::print(char)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    3518:	0e 94 10 15 	call	0x2a20	; 0x2a20 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    351c:	00 23       	and	r16, r16
    351e:	11 f0       	breq	.+4      	; 0x3524 <serialPrintAndFlush(char)+0x22>
    3520:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <powerDownSerial()>
  }
    3524:	1f 91       	pop	r17
    3526:	0f 91       	pop	r16
    3528:	08 95       	ret

0000352a <serialPrintlnAndFlush()>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write line-end to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintlnAndFlush()
    352a:	1f 93       	push	r17
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    352c:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <powerUpSerialIfDisabled()>
    3530:	18 2f       	mov	r17, r24
  // Send the text.
  Serial.println();
    3532:	81 e3       	ldi	r24, 0x31	; 49
    3534:	93 e0       	ldi	r25, 0x03	; 3
    3536:	0e 94 23 31 	call	0x6246	; 0x6246 <Print::println()>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    353a:	0e 94 10 15 	call	0x2a20	; 0x2a20 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    353e:	11 23       	and	r17, r17
    3540:	11 f0       	breq	.+4      	; 0x3546 <serialPrintlnAndFlush()+0x1c>
    3542:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <powerDownSerial()>
  }
    3546:	1f 91       	pop	r17
    3548:	08 95       	ret

0000354a <serialPrintAndFlush(int, int)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) number to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(const int i, const int fmt)
    354a:	df 92       	push	r13
    354c:	ef 92       	push	r14
    354e:	ff 92       	push	r15
    3550:	0f 93       	push	r16
    3552:	1f 93       	push	r17
    3554:	8c 01       	movw	r16, r24
    3556:	7b 01       	movw	r14, r22
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    3558:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <powerUpSerialIfDisabled()>
    355c:	d8 2e       	mov	r13, r24
  // Send the character.
  Serial.print(i, fmt);
    355e:	81 e3       	ldi	r24, 0x31	; 49
    3560:	93 e0       	ldi	r25, 0x03	; 3
    3562:	b8 01       	movw	r22, r16
    3564:	a7 01       	movw	r20, r14
    3566:	0e 94 49 32 	call	0x6492	; 0x6492 <Print::print(int, int)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    356a:	0e 94 10 15 	call	0x2a20	; 0x2a20 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    356e:	dd 20       	and	r13, r13
    3570:	11 f0       	breq	.+4      	; 0x3576 <serialPrintAndFlush(int, int)+0x2c>
    3572:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <powerDownSerial()>
  }
    3576:	1f 91       	pop	r17
    3578:	0f 91       	pop	r16
    357a:	ff 90       	pop	r15
    357c:	ef 90       	pop	r14
    357e:	df 90       	pop	r13
    3580:	08 95       	ret

00003582 <serialPrintAndFlush(char const*)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (read-only) string to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(const char * const text)
    3582:	ff 92       	push	r15
    3584:	0f 93       	push	r16
    3586:	1f 93       	push	r17
    3588:	8c 01       	movw	r16, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    358a:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <powerUpSerialIfDisabled()>
    358e:	f8 2e       	mov	r15, r24
  // Send the text.
  Serial.print(text);
    3590:	81 e3       	ldi	r24, 0x31	; 49
    3592:	93 e0       	ldi	r25, 0x03	; 3
    3594:	b8 01       	movw	r22, r16
    3596:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <Print::print(char const*)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    359a:	0e 94 10 15 	call	0x2a20	; 0x2a20 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    359e:	ff 20       	and	r15, r15
    35a0:	11 f0       	breq	.+4      	; 0x35a6 <serialPrintAndFlush(char const*)+0x24>
    35a2:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <powerDownSerial()>
  }
    35a6:	1f 91       	pop	r17
    35a8:	0f 91       	pop	r16
    35aa:	ff 90       	pop	r15
    35ac:	08 95       	ret

000035ae <serialPrintAndFlush(__FlashStringHelper const*)>:
  if(neededWaking) { powerDownSerial(); }
  }

// Write a single (Flash-resident) string to serial and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintAndFlush(__FlashStringHelper const * const text)
    35ae:	ff 92       	push	r15
    35b0:	0f 93       	push	r16
    35b2:	1f 93       	push	r17
    35b4:	8c 01       	movw	r16, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    35b6:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <powerUpSerialIfDisabled()>
    35ba:	f8 2e       	mov	r15, r24
  // Send the text.
  Serial.print(text);
    35bc:	81 e3       	ldi	r24, 0x31	; 49
    35be:	93 e0       	ldi	r25, 0x03	; 3
    35c0:	b8 01       	movw	r22, r16
    35c2:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <Print::print(__FlashStringHelper const*)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    35c6:	0e 94 10 15 	call	0x2a20	; 0x2a20 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    35ca:	ff 20       	and	r15, r15
    35cc:	11 f0       	breq	.+4      	; 0x35d2 <serialPrintAndFlush(__FlashStringHelper const*)+0x24>
    35ce:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <powerDownSerial()>
  }
    35d2:	1f 91       	pop	r17
    35d4:	0f 91       	pop	r16
    35d6:	ff 90       	pop	r15
    35d8:	08 95       	ret

000035da <serialPrintlnAndFlush(__FlashStringHelper const*)>:
// Flush to use for all serialPrintXXX() and DEBUG_PRINTXXX routines.
#define _flush() flushSerialSCTSensitive()

// Write a single (Flash-resident) string to serial followed by line-end and wait for transmission to complete.
// This enables the serial if required and shuts it down afterwards if it wasn't enabled.
void serialPrintlnAndFlush(__FlashStringHelper const * const line)
    35da:	ff 92       	push	r15
    35dc:	0f 93       	push	r16
    35de:	1f 93       	push	r17
    35e0:	8c 01       	movw	r16, r24
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    35e2:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <powerUpSerialIfDisabled()>
    35e6:	f8 2e       	mov	r15, r24
  // Send the line of text followed by line end.
  Serial.println(line);
    35e8:	81 e3       	ldi	r24, 0x31	; 49
    35ea:	93 e0       	ldi	r25, 0x03	; 3
    35ec:	b8 01       	movw	r22, r16
    35ee:	0e 94 43 31 	call	0x6286	; 0x6286 <Print::println(__FlashStringHelper const*)>
  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  _flush();
    35f2:	0e 94 10 15 	call	0x2a20	; 0x2a20 <flushSerialSCTSensitive()>
  if(neededWaking) { powerDownSerial(); }
    35f6:	ff 20       	and	r15, r15
    35f8:	11 f0       	breq	.+4      	; 0x35fe <serialPrintlnAndFlush(__FlashStringHelper const*)+0x24>
    35fa:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <powerDownSerial()>
  }
    35fe:	1f 91       	pop	r17
    3600:	0f 91       	pop	r16
    3602:	ff 90       	pop	r15
    3604:	08 95       	ret

00003606 <getTempPotReducedNoise()>:

// Get reduced-noise temperature pot user control value (previously read with readTempPot()) in range [0,255]; very fast.
// In particular this value should not jitter between readings even if the pot is sitting at an ADC boundary level.
uint8_t getTempPotReducedNoise() { return(tempPotReducedNoise); }
    3606:	80 91 ce 01 	lds	r24, 0x01CE
    360a:	08 95       	ret

0000360c <readTempPot()>:

// Read the user 'temperature pot' setting in range [0,1023]; higher value implies higher target temperature.
// This may consume significant power and time.
int readTempPot()
    360c:	0f 93       	push	r16
    360e:	1f 93       	push	r17
    3610:	cf 93       	push	r28
    3612:	df 93       	push	r29
  {
  power_intermittent_peripherals_enable(false); // No need to wait for anything to stablise as direct of IO_POWER_UP.
    3614:	80 e0       	ldi	r24, 0x00	; 0
    3616:	0e 94 ad 14 	call	0x295a	; 0x295a <power_intermittent_peripherals_enable(bool)>
  const int tpRaw = analogueNoiseReducedRead(TEMP_POT_AIN, DEFAULT); // Vcc reference.
    361a:	81 e0       	ldi	r24, 0x01	; 1
    361c:	90 e0       	ldi	r25, 0x00	; 0
    361e:	61 e0       	ldi	r22, 0x01	; 1
    3620:	0e 94 d5 12 	call	0x25aa	; 0x25aa <analogueNoiseReducedRead(int, unsigned char)>
    3624:	8c 01       	movw	r16, r24
  power_intermittent_peripherals_disable();
    3626:	0e 94 83 14 	call	0x2906	; 0x2906 <power_intermittent_peripherals_disable()>

#if defined(TEMP_POT_REVERSE)
  const int tp = TEMP_POT_RAW_MAX - tpRaw; // Travel is in opposite direction to natural!
    362a:	cf ef       	ldi	r28, 0xFF	; 255
    362c:	d3 e0       	ldi	r29, 0x03	; 3
    362e:	c0 1b       	sub	r28, r16
    3630:	d1 0b       	sbc	r29, r17


  // TODO: capture entropy from changed LS bits esp if reduced-noise version doesn't change.

  // Store new value.
  tempPot = tp;
    3632:	d0 93 cd 01 	sts	0x01CD, r29
    3636:	c0 93 cc 01 	sts	0x01CC, r28

  // Capture reduced-noise value with a little hysteresis.
  const int shifted = tp >> 2; // Keep signed to avoid wrap-round confusion.
    363a:	9e 01       	movw	r18, r28
    363c:	35 95       	asr	r19
    363e:	27 95       	ror	r18
    3640:	35 95       	asr	r19
    3642:	27 95       	ror	r18
  if(((shifted > tempPotReducedNoise) && (shifted - tempPotReducedNoise >= RN_HYST)) ||
    3644:	80 91 ce 01 	lds	r24, 0x01CE
    3648:	90 e0       	ldi	r25, 0x00	; 0
    364a:	82 17       	cp	r24, r18
    364c:	93 07       	cpc	r25, r19
    364e:	2c f4       	brge	.+10     	; 0x365a <readTempPot()+0x4e>
    3650:	a9 01       	movw	r20, r18
    3652:	48 1b       	sub	r20, r24
    3654:	59 0b       	sbc	r21, r25
    3656:	ca 01       	movw	r24, r20
    3658:	05 c0       	rjmp	.+10     	; 0x3664 <readTempPot()+0x58>
    365a:	28 17       	cp	r18, r24
    365c:	39 07       	cpc	r19, r25
    365e:	44 f4       	brge	.+16     	; 0x3670 <readTempPot()+0x64>
    3660:	82 1b       	sub	r24, r18
    3662:	93 0b       	sbc	r25, r19
    3664:	04 97       	sbiw	r24, 0x04	; 4
    3666:	24 f0       	brlt	.+8      	; 0x3670 <readTempPot()+0x64>
     ((shifted < tempPotReducedNoise) && (tempPotReducedNoise - shifted >= RN_HYST)))
    {
    tempPotReducedNoise = (uint8_t) shifted;
    3668:	20 93 ce 01 	sts	0x01CE, r18
    markUIControlUsed(); // Note user operation of pot.
    366c:	0e 94 96 22 	call	0x452c	; 0x452c <markUIControlUsed()>
  DEBUG_SERIAL_PRINT(tempPotReducedNoise);
  DEBUG_SERIAL_PRINTLN();
#endif

  return(tp);
  }
    3670:	ce 01       	movw	r24, r28
    3672:	df 91       	pop	r29
    3674:	cf 91       	pop	r28
    3676:	1f 91       	pop	r17
    3678:	0f 91       	pop	r16
    367a:	08 95       	ret

0000367c <getTemperatureC16()>:

  return(t16);
  }

// Return previously-read (with readTemperatureC16()) temperature; very fast.
int getTemperatureC16() { return(temp16); }
    367c:	80 91 cf 01 	lds	r24, 0x01CF
    3680:	90 91 d0 01 	lds	r25, 0x01D0
    3684:	08 95       	ret

00003686 <readTemperatureC16()>:
// This may consume significant power and time.
// Probably no need to do this more than (say) once per minute.
// The first read will initialise the device as necessary and leave it in a low-power mode afterwards.
// This will simulate a zero temperature in case of detected error talking to the sensor as fail-safe for this use.
// Check for errors at certain critical places, not everywhere.
int readTemperatureC16()
    3686:	0f 93       	push	r16
    3688:	1f 93       	push	r17
    368a:	cf 93       	push	r28
    368c:	df 93       	push	r29
#ifdef FAKE_TMP102
  temp16 = 17 * 16;
  return(temp16); // FAKE IT!
#endif

  const bool neededPowerUp = powerUpTWIIfDisabled();
    368e:	0e 94 bc 14 	call	0x2978	; 0x2978 <powerUpTWIIfDisabled()>
    3692:	08 2f       	mov	r16, r24
  DEBUG_SERIAL_PRINT(neededPowerUp);
  DEBUG_SERIAL_PRINTLN();
#endif

  // Force start of new one-shot temperature measurement/conversion to complete.
  Wire.beginTransmission(TMP102_I2C_ADDR);
    3694:	8f e2       	ldi	r24, 0x2F	; 47
    3696:	92 e0       	ldi	r25, 0x02	; 2
    3698:	68 e4       	ldi	r22, 0x48	; 72
    369a:	70 e0       	ldi	r23, 0x00	; 0
    369c:	0e 94 71 2a 	call	0x54e2	; 0x54e2 <TwoWire::beginTransmission(int)>
  Wire.write((byte) TMP102_REG_CTRL); // Select control register.
    36a0:	8f e2       	ldi	r24, 0x2F	; 47
    36a2:	92 e0       	ldi	r25, 0x02	; 2
    36a4:	61 e0       	ldi	r22, 0x01	; 1
    36a6:	0e 94 f3 2a 	call	0x55e6	; 0x55e6 <TwoWire::write(unsigned char)>
  Wire.write((byte) TMP102_CTRL_B1); // Clear OS bit.
    36aa:	8f e2       	ldi	r24, 0x2F	; 47
    36ac:	92 e0       	ldi	r25, 0x02	; 2
    36ae:	61 e3       	ldi	r22, 0x31	; 49
    36b0:	0e 94 f3 2a 	call	0x55e6	; 0x55e6 <TwoWire::write(unsigned char)>
  //Wire.write((byte) TMP102_CTRL_B2);
  Wire.endTransmission();
    36b4:	8f e2       	ldi	r24, 0x2F	; 47
    36b6:	92 e0       	ldi	r25, 0x02	; 2
    36b8:	0e 94 36 2b 	call	0x566c	; 0x566c <TwoWire::endTransmission()>
  Wire.beginTransmission(TMP102_I2C_ADDR);
    36bc:	8f e2       	ldi	r24, 0x2F	; 47
    36be:	92 e0       	ldi	r25, 0x02	; 2
    36c0:	68 e4       	ldi	r22, 0x48	; 72
    36c2:	70 e0       	ldi	r23, 0x00	; 0
    36c4:	0e 94 71 2a 	call	0x54e2	; 0x54e2 <TwoWire::beginTransmission(int)>
  Wire.write((byte) TMP102_REG_CTRL); // Select control register.
    36c8:	8f e2       	ldi	r24, 0x2F	; 47
    36ca:	92 e0       	ldi	r25, 0x02	; 2
    36cc:	61 e0       	ldi	r22, 0x01	; 1
    36ce:	0e 94 f3 2a 	call	0x55e6	; 0x55e6 <TwoWire::write(unsigned char)>
    void onRequest( void (*)(void) );
  
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    36d2:	8f e2       	ldi	r24, 0x2F	; 47
    36d4:	92 e0       	ldi	r25, 0x02	; 2
    36d6:	61 eb       	ldi	r22, 0xB1	; 177
    36d8:	0e 94 f3 2a 	call	0x55e6	; 0x55e6 <TwoWire::write(unsigned char)>
  Wire.write((byte) TMP102_CTRL_B1 | TMP102_CTRL_B1_OS); // Start one-shot conversion.
  //Wire.write((byte) TMP102_CTRL_B2);
  if(Wire.endTransmission()) { temp16 = 0; return(0); } // Exit if error.
    36dc:	8f e2       	ldi	r24, 0x2F	; 47
    36de:	92 e0       	ldi	r25, 0x02	; 2
    36e0:	0e 94 36 2b 	call	0x566c	; 0x566c <TwoWire::endTransmission()>
    36e4:	88 23       	and	r24, r24
    36e6:	09 f0       	breq	.+2      	; 0x36ea <readTemperatureC16()+0x64>
    36e8:	4d c0       	rjmp	.+154    	; 0x3784 <readTemperatureC16()+0xfe>

  // Wait for temperature measurement/conversion to complete, in low-power sleep mode for the bulk of the time.
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("TMP102 waiting for conversion...");
#endif
  Wire.beginTransmission(TMP102_I2C_ADDR);
    36ea:	8f e2       	ldi	r24, 0x2F	; 47
    36ec:	92 e0       	ldi	r25, 0x02	; 2
    36ee:	68 e4       	ldi	r22, 0x48	; 72
    36f0:	70 e0       	ldi	r23, 0x00	; 0
    36f2:	0e 94 71 2a 	call	0x54e2	; 0x54e2 <TwoWire::beginTransmission(int)>
  Wire.write((byte) TMP102_REG_CTRL); // Select control register.
    36f6:	8f e2       	ldi	r24, 0x2F	; 47
    36f8:	92 e0       	ldi	r25, 0x02	; 2
    36fa:	61 e0       	ldi	r22, 0x01	; 1
    36fc:	0e 94 f3 2a 	call	0x55e6	; 0x55e6 <TwoWire::write(unsigned char)>
  if(Wire.endTransmission()) { temp16 = 0; return(0); } // Exit if error.
    3700:	8f e2       	ldi	r24, 0x2F	; 47
    3702:	92 e0       	ldi	r25, 0x02	; 2
    3704:	0e 94 36 2b 	call	0x566c	; 0x566c <TwoWire::endTransmission()>
    3708:	88 23       	and	r24, r24
    370a:	e1 f5       	brne	.+120    	; 0x3784 <readTemperatureC16()+0xfe>
    370c:	c8 e0       	ldi	r28, 0x08	; 8
    370e:	d0 e0       	ldi	r29, 0x00	; 0
    3710:	16 c0       	rjmp	.+44     	; 0x373e <readTemperatureC16()+0xb8>
  for(int i = 8; --i; ) // 2 orbits should generally be plenty.
    {
    if(i <= 0) { temp16 = 0; return(0); } // Exit if error.
    3712:	1c 16       	cp	r1, r28
    3714:	1d 06       	cpc	r1, r29
    3716:	b4 f5       	brge	.+108    	; 0x3784 <readTemperatureC16()+0xfe>
    if(Wire.requestFrom(TMP102_I2C_ADDR, 1) != 1) { temp16 = 0; return(0); } // Exit if error.
    3718:	8f e2       	ldi	r24, 0x2F	; 47
    371a:	92 e0       	ldi	r25, 0x02	; 2
    371c:	68 e4       	ldi	r22, 0x48	; 72
    371e:	70 e0       	ldi	r23, 0x00	; 0
    3720:	41 e0       	ldi	r20, 0x01	; 1
    3722:	50 e0       	ldi	r21, 0x00	; 0
    3724:	0e 94 47 2b 	call	0x568e	; 0x568e <TwoWire::requestFrom(int, int)>
    3728:	81 30       	cpi	r24, 0x01	; 1
    372a:	61 f5       	brne	.+88     	; 0x3784 <readTemperatureC16()+0xfe>
    const byte b1 = Wire.read();
    372c:	8f e2       	ldi	r24, 0x2F	; 47
    372e:	92 e0       	ldi	r25, 0x02	; 2
    3730:	0e 94 84 2a 	call	0x5508	; 0x5508 <TwoWire::read()>
    if(b1 & TMP102_CTRL_B1_OS) { break; } // Conversion completed.
    3734:	87 fd       	sbrc	r24, 7
    3736:	05 c0       	rjmp	.+10     	; 0x3742 <readTemperatureC16()+0xbc>
    nap(WDTO_15MS); // One or two of these naps should allow typical ~26ms conversion to complete...
    3738:	80 e0       	ldi	r24, 0x00	; 0
    373a:	0e 94 de 11 	call	0x23bc	; 0x23bc <nap(signed char)>
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("TMP102 waiting for conversion...");
#endif
  Wire.beginTransmission(TMP102_I2C_ADDR);
  Wire.write((byte) TMP102_REG_CTRL); // Select control register.
  if(Wire.endTransmission()) { temp16 = 0; return(0); } // Exit if error.
  for(int i = 8; --i; ) // 2 orbits should generally be plenty.
    373e:	21 97       	sbiw	r28, 0x01	; 1
    3740:	41 f7       	brne	.-48     	; 0x3712 <readTemperatureC16()+0x8c>

  // Fetch temperature.
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("TMP102 fetching temperature...");
#endif
  Wire.beginTransmission(TMP102_I2C_ADDR);
    3742:	8f e2       	ldi	r24, 0x2F	; 47
    3744:	92 e0       	ldi	r25, 0x02	; 2
    3746:	68 e4       	ldi	r22, 0x48	; 72
    3748:	70 e0       	ldi	r23, 0x00	; 0
    374a:	0e 94 71 2a 	call	0x54e2	; 0x54e2 <TwoWire::beginTransmission(int)>
  Wire.write((byte) TMP102_REG_TEMP); // Select temperature register (set ptr to 0).
    374e:	8f e2       	ldi	r24, 0x2F	; 47
    3750:	92 e0       	ldi	r25, 0x02	; 2
    3752:	60 e0       	ldi	r22, 0x00	; 0
    3754:	0e 94 f3 2a 	call	0x55e6	; 0x55e6 <TwoWire::write(unsigned char)>
  if(Wire.endTransmission()) { temp16 = 0; return(0); } // Exit if error.
    3758:	8f e2       	ldi	r24, 0x2F	; 47
    375a:	92 e0       	ldi	r25, 0x02	; 2
    375c:	0e 94 36 2b 	call	0x566c	; 0x566c <TwoWire::endTransmission()>
    3760:	88 23       	and	r24, r24
    3762:	81 f4       	brne	.+32     	; 0x3784 <readTemperatureC16()+0xfe>
  if(Wire.requestFrom(TMP102_I2C_ADDR, 2) != 2)  { temp16 = 0; return(0); }
    3764:	8f e2       	ldi	r24, 0x2F	; 47
    3766:	92 e0       	ldi	r25, 0x02	; 2
    3768:	68 e4       	ldi	r22, 0x48	; 72
    376a:	70 e0       	ldi	r23, 0x00	; 0
    376c:	42 e0       	ldi	r20, 0x02	; 2
    376e:	50 e0       	ldi	r21, 0x00	; 0
    3770:	0e 94 47 2b 	call	0x568e	; 0x568e <TwoWire::requestFrom(int, int)>
    3774:	82 30       	cpi	r24, 0x02	; 2
    3776:	31 f4       	brne	.+12     	; 0x3784 <readTemperatureC16()+0xfe>
  if(Wire.endTransmission()) { temp16 = 0; return(0); } // Exit if error.
    3778:	8f e2       	ldi	r24, 0x2F	; 47
    377a:	92 e0       	ldi	r25, 0x02	; 2
    377c:	0e 94 36 2b 	call	0x566c	; 0x566c <TwoWire::endTransmission()>
    3780:	88 23       	and	r24, r24
    3782:	39 f0       	breq	.+14     	; 0x3792 <readTemperatureC16()+0x10c>
    3784:	10 92 d0 01 	sts	0x01D0, r1
    3788:	10 92 cf 01 	sts	0x01CF, r1
    378c:	c0 e0       	ldi	r28, 0x00	; 0
    378e:	d0 e0       	ldi	r29, 0x00	; 0
    3790:	2a c0       	rjmp	.+84     	; 0x37e6 <readTemperatureC16()+0x160>

  const byte b1 = Wire.read(); // MSByte, should be signed whole degrees C.
    3792:	8f e2       	ldi	r24, 0x2F	; 47
    3794:	92 e0       	ldi	r25, 0x02	; 2
    3796:	0e 94 84 2a 	call	0x5508	; 0x5508 <TwoWire::read()>
    379a:	18 2f       	mov	r17, r24
  const uint8_t b2 = Wire.read(); // Avoid sign extension...
    379c:	8f e2       	ldi	r24, 0x2F	; 47
    379e:	92 e0       	ldi	r25, 0x02	; 2
    37a0:	0e 94 84 2a 	call	0x5508	; 0x5508 <TwoWire::read()>

  // Builds 12-bit value (assumes not in extended mode) and sign-extends if necessary for sub-zero temps.
  const int t16 = (b1 << 4) | (b2 >> 4) | ((b1 & 0x80) ? 0xf000 : 0);
    37a4:	17 fd       	sbrc	r17, 7
    37a6:	03 c0       	rjmp	.+6      	; 0x37ae <readTemperatureC16()+0x128>
    37a8:	20 e0       	ldi	r18, 0x00	; 0
    37aa:	30 e0       	ldi	r19, 0x00	; 0
    37ac:	02 c0       	rjmp	.+4      	; 0x37b2 <readTemperatureC16()+0x12c>
    37ae:	20 e0       	ldi	r18, 0x00	; 0
    37b0:	30 ef       	ldi	r19, 0xF0	; 240
    37b2:	c8 2f       	mov	r28, r24
    37b4:	d0 e0       	ldi	r29, 0x00	; 0
    37b6:	54 e0       	ldi	r21, 0x04	; 4
    37b8:	d5 95       	asr	r29
    37ba:	c7 95       	ror	r28
    37bc:	5a 95       	dec	r21
    37be:	e1 f7       	brne	.-8      	; 0x37b8 <readTemperatureC16()+0x132>
    37c0:	81 2f       	mov	r24, r17
    37c2:	90 e0       	ldi	r25, 0x00	; 0
    37c4:	44 e0       	ldi	r20, 0x04	; 4
    37c6:	88 0f       	add	r24, r24
    37c8:	99 1f       	adc	r25, r25
    37ca:	4a 95       	dec	r20
    37cc:	e1 f7       	brne	.-8      	; 0x37c6 <readTemperatureC16()+0x140>
    37ce:	c8 2b       	or	r28, r24
    37d0:	d9 2b       	or	r29, r25
    37d2:	c2 2b       	or	r28, r18
    37d4:	d3 2b       	or	r29, r19

  // Store the result for access at any time.
  temp16 = t16;
    37d6:	d0 93 d0 01 	sts	0x01D0, r29
    37da:	c0 93 cf 01 	sts	0x01CF, r28
  DEBUG_SERIAL_PRINT_FLASHSTRING("C / ");
  DEBUG_SERIAL_PRINT(temp16);
  DEBUG_SERIAL_PRINTLN();
#endif

  if(neededPowerUp) { powerDownTWI(); }
    37de:	00 23       	and	r16, r16
    37e0:	11 f0       	breq	.+4      	; 0x37e6 <readTemperatureC16()+0x160>
    37e2:	0e 94 99 13 	call	0x2732	; 0x2732 <powerDownTWI()>

  return(t16);
  }
    37e6:	ce 01       	movw	r24, r28
    37e8:	df 91       	pop	r29
    37ea:	cf 91       	pop	r28
    37ec:	1f 91       	pop	r17
    37ee:	0f 91       	pop	r16
    37f0:	08 95       	ret

000037f2 <inWarmModeDebounced()>:
// If true then is in WARM (or BAKE) mode; defaults to (starts as) false/FROST.
static bool isWarmMode;
// If true then is in WARM (or BAKE) mode, but 'debounced' to avoid accidental operation.
static bool isWarmModeDebounced;
// If true then the unit is in 'warm' (heating) mode, else 'frost' protection mode.
bool inWarmModeDebounced() { return(isWarmModeDebounced); }
    37f2:	80 91 db 01 	lds	r24, 0x01DB
    37f6:	08 95       	ret

000037f8 <inBakeModeDebounced()>:
static uint_least8_t bakeCountdownM;
// If true then the unit is in raw 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
static bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
// TODO: this is not fully 'debounced', ie could flip between WARM/BAKE with button held down.
bool inBakeModeDebounced() { return(isWarmModeDebounced && (0 != bakeCountdownM)); }
    37f8:	80 91 db 01 	lds	r24, 0x01DB
    37fc:	88 23       	and	r24, r24
    37fe:	21 f0       	breq	.+8      	; 0x3808 <inBakeModeDebounced()+0x10>
    3800:	80 91 dd 01 	lds	r24, 0x01DD
    3804:	81 11       	cpse	r24, r1
    3806:	81 e0       	ldi	r24, 0x01	; 1
    3808:	08 95       	ret

0000380a <cancelBake()>:
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
    380a:	10 92 dd 01 	sts	0x01DD, r1
    380e:	08 95       	ret

00003810 <isCLIActive()>:

// Reset CLI active timer to the full whack before it goes inactive again (ie makes CLI active for a while).
static void resetCLIActiveTimer() { CLITimeoutM = CLI_DEFAULT_TIMEOUT_M; }

// Returns true if the CLI is active, at least intermittently.
bool isCLIActive() { return(0 != CLITimeoutM); }
    3810:	80 91 04 01 	lds	r24, 0x0104
    3814:	81 11       	cpse	r24, r1
    3816:	81 e0       	ldi	r24, 0x01	; 1
    3818:	08 95       	ret

0000381a <recentUIControlUse()>:
  // User operation of controls locally is strong indication of presence.
  markAsOccupied();
  }

// True if a manual UI control has been recently (seconds to minutes ago) operated.
bool recentUIControlUse()
    381a:	80 91 de 01 	lds	r24, 0x01DE
    381e:	81 11       	cpse	r24, r1
    3820:	81 e0       	ldi	r24, 0x01	; 1
  {
  return(0 != uiTimeoutM);
  }
    3822:	08 95       	ret

00003824 <Serial_print_space()>:
    }
  }


// Prints a single space to Serial (which must be up and running).
static void Serial_print_space() { Serial.print(' '); }
    3824:	81 e3       	ldi	r24, 0x31	; 49
    3826:	93 e0       	ldi	r25, 0x03	; 3
    3828:	60 e2       	ldi	r22, 0x20	; 32
    382a:	0e 94 1b 31 	call	0x6236	; 0x6236 <Print::print(char)>
    382e:	08 95       	ret

00003830 <InvalidIgnored()>:
  Serial.println();
  }

// Prints warning to serial (that must be up and running) that invalid (CLI) input has been ignored.
// Probably should not be inlined, to avoid creating duplicate strings in Flash.
static void InvalidIgnored() { Serial.println(F("Invalid, ignored.")); }
    3830:	81 e3       	ldi	r24, 0x31	; 49
    3832:	93 e0       	ldi	r25, 0x03	; 3
    3834:	6d ed       	ldi	r22, 0xDD	; 221
    3836:	73 e0       	ldi	r23, 0x03	; 3
    3838:	0e 94 43 31 	call	0x6286	; 0x6286 <Print::println(__FlashStringHelper const*)>
    383c:	08 95       	ret

0000383e <printCLILine(unsigned char, char, __FlashStringHelper const*)>:
  for(int8_t padding = SYNTAX_COL_WIDTH - strlen_P((const char *)syntax); --padding >= 0; ) { Serial_print_space(); }
  Serial.println(description);
  }
// Efficiently print a single line given a single-char syntax element and the description, both non-null.
// NOTE: will skip the description if getting close to the end of the time deadline to avoid overrun.
static void printCLILine(const uint8_t deadline, const char syntax, __FlashStringHelper const *description)
    383e:	1f 93       	push	r17
    3840:	cf 93       	push	r28
    3842:	df 93       	push	r29
    3844:	18 2f       	mov	r17, r24
    3846:	ea 01       	movw	r28, r20
  {
  Serial.print(syntax);
    3848:	81 e3       	ldi	r24, 0x31	; 49
    384a:	93 e0       	ldi	r25, 0x03	; 3
    384c:	0e 94 1b 31 	call	0x6236	; 0x6236 <Print::print(char)>
  flushSerialProductive(); // Ensure all pending output is flushed before sampling current position in minor cycle.
    3850:	0e 94 fe 14 	call	0x29fc	; 0x29fc <flushSerialProductive()>
  if(getSubCycleTime() >= deadline) { Serial.println(); return; }
    3854:	80 91 b2 00 	lds	r24, 0x00B2
    3858:	81 17       	cp	r24, r17
    385a:	10 f4       	brcc	.+4      	; 0x3860 <printCLILine(unsigned char, char, __FlashStringHelper const*)+0x22>
    385c:	19 e0       	ldi	r17, 0x09	; 9
    385e:	07 c0       	rjmp	.+14     	; 0x386e <printCLILine(unsigned char, char, __FlashStringHelper const*)+0x30>
    3860:	81 e3       	ldi	r24, 0x31	; 49
    3862:	93 e0       	ldi	r25, 0x03	; 3
    3864:	0e 94 23 31 	call	0x6246	; 0x6246 <Print::println()>
    3868:	09 c0       	rjmp	.+18     	; 0x387c <printCLILine(unsigned char, char, __FlashStringHelper const*)+0x3e>
  for(int8_t padding = SYNTAX_COL_WIDTH - 1; --padding >= 0; ) { Serial_print_space(); }
    386a:	0e 94 12 1c 	call	0x3824	; 0x3824 <Serial_print_space()>
    386e:	11 50       	subi	r17, 0x01	; 1
    3870:	e0 f7       	brcc	.-8      	; 0x386a <printCLILine(unsigned char, char, __FlashStringHelper const*)+0x2c>
  Serial.println(description);
    3872:	81 e3       	ldi	r24, 0x31	; 49
    3874:	93 e0       	ldi	r25, 0x03	; 3
    3876:	be 01       	movw	r22, r28
    3878:	0e 94 43 31 	call	0x6286	; 0x6286 <Print::println(__FlashStringHelper const*)>
  }
    387c:	df 91       	pop	r29
    387e:	cf 91       	pop	r28
    3880:	1f 91       	pop	r17
    3882:	08 95       	ret

00003884 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)>:
#define CLI_PRINT_OH_SCT ((uint8_t)(GSCT_MAX/4))
// Deadline in minor cycle by which to stop printing description.
#define STOP_PRINTING_DESCRIPTION_AT ((uint8_t)(GSCT_MAX-CLI_PRINT_OH_SCT))
// Efficiently print a single line given the syntax element and the description, both non-null.
// NOTE: will skip the description if getting close to the end of the time deadline to avoid overrun.
static void printCLILine(const uint8_t deadline, __FlashStringHelper const *syntax, __FlashStringHelper const *description)
    3884:	ef 92       	push	r14
    3886:	ff 92       	push	r15
    3888:	1f 93       	push	r17
    388a:	cf 93       	push	r28
    388c:	df 93       	push	r29
    388e:	18 2f       	mov	r17, r24
    3890:	eb 01       	movw	r28, r22
    3892:	7a 01       	movw	r14, r20
  {
  Serial.print(syntax);
    3894:	81 e3       	ldi	r24, 0x31	; 49
    3896:	93 e0       	ldi	r25, 0x03	; 3
    3898:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <Print::print(__FlashStringHelper const*)>
  flushSerialProductive(); // Ensure all pending output is flushed before sampling current position in minor cycle.
    389c:	0e 94 fe 14 	call	0x29fc	; 0x29fc <flushSerialProductive()>
  if(getSubCycleTime() >= deadline) { Serial.println(); return; }
    38a0:	80 91 b2 00 	lds	r24, 0x00B2
    38a4:	81 17       	cp	r24, r17
    38a6:	28 f0       	brcs	.+10     	; 0x38b2 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)+0x2e>
    38a8:	81 e3       	ldi	r24, 0x31	; 49
    38aa:	93 e0       	ldi	r25, 0x03	; 3
    38ac:	0e 94 23 31 	call	0x6246	; 0x6246 <Print::println()>
    38b0:	10 c0       	rjmp	.+32     	; 0x38d2 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)+0x4e>
  for(int8_t padding = SYNTAX_COL_WIDTH - strlen_P((const char *)syntax); --padding >= 0; ) { Serial_print_space(); }
    38b2:	ce 01       	movw	r24, r28
    38b4:	0e 94 c3 03 	call	0x786	; 0x786 <strlen_P>
    38b8:	1a e0       	ldi	r17, 0x0A	; 10
    38ba:	18 1b       	sub	r17, r24
    38bc:	02 c0       	rjmp	.+4      	; 0x38c2 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)+0x3e>
    38be:	0e 94 12 1c 	call	0x3824	; 0x3824 <Serial_print_space()>
    38c2:	11 50       	subi	r17, 0x01	; 1
    38c4:	17 ff       	sbrs	r17, 7
    38c6:	fb cf       	rjmp	.-10     	; 0x38be <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)+0x3a>
  Serial.println(description);
    38c8:	81 e3       	ldi	r24, 0x31	; 49
    38ca:	93 e0       	ldi	r25, 0x03	; 3
    38cc:	b7 01       	movw	r22, r14
    38ce:	0e 94 43 31 	call	0x6286	; 0x6286 <Print::println(__FlashStringHelper const*)>
  }
    38d2:	df 91       	pop	r29
    38d4:	cf 91       	pop	r28
    38d6:	1f 91       	pop	r17
    38d8:	ff 90       	pop	r15
    38da:	ef 90       	pop	r14
    38dc:	08 95       	ret

000038de <dumpCLIUsage(unsigned char)>:
  Serial.println(description);
  }

// Dump some brief CLI usage instructions to serial TX, which must be up and running.
// If this gets too big there is a risk of overrunning and missing the next tick...
static void dumpCLIUsage(const uint8_t stopBy)
    38de:	1f 93       	push	r17
    38e0:	df 93       	push	r29
    38e2:	cf 93       	push	r28
    38e4:	00 d0       	rcall	.+0      	; 0x38e6 <dumpCLIUsage(unsigned char)+0x8>
    38e6:	00 d0       	rcall	.+0      	; 0x38e8 <dumpCLIUsage(unsigned char)+0xa>
    38e8:	cd b7       	in	r28, 0x3d	; 61
    38ea:	de b7       	in	r29, 0x3e	; 62
    38ec:	8c 83       	std	Y+4, r24	; 0x04
  {
  const uint8_t deadline = fnmin((uint8_t)(stopBy - fnmin(stopBy,CLI_PRINT_OH_SCT)), STOP_PRINTING_DESCRIPTION_AT);
    38ee:	98 2f       	mov	r25, r24
    38f0:	8f e3       	ldi	r24, 0x3F	; 63
    38f2:	89 83       	std	Y+1, r24	; 0x01
    38f4:	89 2f       	mov	r24, r25
    38f6:	90 34       	cpi	r25, 0x40	; 64
    38f8:	08 f0       	brcs	.+2      	; 0x38fc <dumpCLIUsage(unsigned char)+0x1e>
    38fa:	8f e3       	ldi	r24, 0x3F	; 63
    38fc:	98 1b       	sub	r25, r24
    38fe:	9a 83       	std	Y+2, r25	; 0x02
    3900:	80 ec       	ldi	r24, 0xC0	; 192
    3902:	8b 83       	std	Y+3, r24	; 0x03
    3904:	19 2f       	mov	r17, r25
    3906:	91 3c       	cpi	r25, 0xC1	; 193
    3908:	08 f0       	brcs	.+2      	; 0x390c <dumpCLIUsage(unsigned char)+0x2e>
    390a:	10 ec       	ldi	r17, 0xC0	; 192
  Serial.println();
    390c:	81 e3       	ldi	r24, 0x31	; 49
    390e:	93 e0       	ldi	r25, 0x03	; 3
    3910:	0e 94 23 31 	call	0x6246	; 0x6246 <Print::println()>
  //Serial.println(F("CLI usage:"));
  printCLILine(deadline, '?', F("this help"));
    3914:	81 2f       	mov	r24, r17
    3916:	6f e3       	ldi	r22, 0x3F	; 63
    3918:	43 ed       	ldi	r20, 0xD3	; 211
    391a:	53 e0       	ldi	r21, 0x03	; 3
    391c:	0e 94 1f 1c 	call	0x383e	; 0x383e <printCLILine(unsigned char, char, __FlashStringHelper const*)>
#ifdef ENABLE_BOILER_HUB
  printCLILine(deadline, F("C M"), F("Central hub >=M mins on, 0 off"));
    3920:	81 2f       	mov	r24, r17
    3922:	6f ec       	ldi	r22, 0xCF	; 207
    3924:	73 e0       	ldi	r23, 0x03	; 3
    3926:	40 eb       	ldi	r20, 0xB0	; 176
    3928:	53 e0       	ldi	r21, 0x03	; 3
    392a:	0e 94 42 1c 	call	0x3884	; 0x3884 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)>
#endif
  printCLILine(deadline, F("D N"), F("Dump stats set N"));
    392e:	81 2f       	mov	r24, r17
    3930:	6c ea       	ldi	r22, 0xAC	; 172
    3932:	73 e0       	ldi	r23, 0x03	; 3
    3934:	4b e9       	ldi	r20, 0x9B	; 155
    3936:	53 e0       	ldi	r21, 0x03	; 3
    3938:	0e 94 42 1c 	call	0x3884	; 0x3884 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine(deadline, 'E', F("Exit CLI"));
    393c:	81 2f       	mov	r24, r17
    393e:	65 e4       	ldi	r22, 0x45	; 69
    3940:	42 e9       	ldi	r20, 0x92	; 146
    3942:	53 e0       	ldi	r21, 0x03	; 3
    3944:	0e 94 1f 1c 	call	0x383e	; 0x383e <printCLILine(unsigned char, char, __FlashStringHelper const*)>
  printCLILine(deadline, 'F', F("Frost"));
    3948:	81 2f       	mov	r24, r17
    394a:	66 e4       	ldi	r22, 0x46	; 70
    394c:	4c e8       	ldi	r20, 0x8C	; 140
    394e:	53 e0       	ldi	r21, 0x03	; 3
    3950:	0e 94 1f 1c 	call	0x383e	; 0x383e <printCLILine(unsigned char, char, __FlashStringHelper const*)>
#if defined(SETTABLE_TARGET_TEMPERATURES) && !defined(TEMP_POT_AVAILABLE)
  printCLILine(deadline, F("F CC"), F("set Frost temp CC"));
#endif
#if defined(USE_MODULE_FHT8VSIMPLE) && defined(LOCAL_TRV)
  printCLILine(deadline, F("H H1 H2"), F("set FHT8V House codes 1&2"));
    3954:	81 2f       	mov	r24, r17
    3956:	64 e8       	ldi	r22, 0x84	; 132
    3958:	73 e0       	ldi	r23, 0x03	; 3
    395a:	4a e6       	ldi	r20, 0x6A	; 106
    395c:	53 e0       	ldi	r21, 0x03	; 3
    395e:	0e 94 42 1c 	call	0x3884	; 0x3884 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine(deadline, 'H', F("clear House codes"));
    3962:	81 2f       	mov	r24, r17
    3964:	68 e4       	ldi	r22, 0x48	; 72
    3966:	48 e5       	ldi	r20, 0x58	; 88
    3968:	53 e0       	ldi	r21, 0x03	; 3
    396a:	0e 94 1f 1c 	call	0x383e	; 0x383e <printCLILine(unsigned char, char, __FlashStringHelper const*)>
#endif
  //printCLILine(deadline, 'L', F("Learn to warm every 24h from now, clear if in frost mode, schedule 0"));
  printCLILine(deadline, F("L S"), F("Learn daily warm now, clear if in frost mode, schedule S"));
    396e:	81 2f       	mov	r24, r17
    3970:	64 e5       	ldi	r22, 0x54	; 84
    3972:	73 e0       	ldi	r23, 0x03	; 3
    3974:	4b e1       	ldi	r20, 0x1B	; 27
    3976:	53 e0       	ldi	r21, 0x03	; 3
    3978:	0e 94 42 1c 	call	0x3884	; 0x3884 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)>
  //printCLILine(deadline, F("P HH MM"), F("Program: warm daily starting at HH MM schedule 0"));
  printCLILine(deadline, F("P HH MM S"), F("Program: warm daily starting at HH MM schedule S"));
    397c:	81 2f       	mov	r24, r17
    397e:	61 e1       	ldi	r22, 0x11	; 17
    3980:	73 e0       	ldi	r23, 0x03	; 3
    3982:	40 ee       	ldi	r20, 0xE0	; 224
    3984:	52 e0       	ldi	r21, 0x02	; 2
    3986:	0e 94 42 1c 	call	0x3884	; 0x3884 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine(deadline, F("O PP"), F("min % for valve to be Open"));
    398a:	81 2f       	mov	r24, r17
    398c:	6b ed       	ldi	r22, 0xDB	; 219
    398e:	72 e0       	ldi	r23, 0x02	; 2
    3990:	40 ec       	ldi	r20, 0xC0	; 192
    3992:	52 e0       	ldi	r21, 0x02	; 2
    3994:	0e 94 42 1c 	call	0x3884	; 0x3884 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine(deadline, 'O', F("reset Open %"));
    3998:	81 2f       	mov	r24, r17
    399a:	6f e4       	ldi	r22, 0x4F	; 79
    399c:	43 eb       	ldi	r20, 0xB3	; 179
    399e:	52 e0       	ldi	r21, 0x02	; 2
    39a0:	0e 94 1f 1c 	call	0x383e	; 0x383e <printCLILine(unsigned char, char, __FlashStringHelper const*)>
#ifdef SUPPORT_BAKE
  printCLILine(deadline, 'Q', F("Quick Heat"));
    39a4:	81 2f       	mov	r24, r17
    39a6:	61 e5       	ldi	r22, 0x51	; 81
    39a8:	48 ea       	ldi	r20, 0xA8	; 168
    39aa:	52 e0       	ldi	r21, 0x02	; 2
    39ac:	0e 94 1f 1c 	call	0x383e	; 0x383e <printCLILine(unsigned char, char, __FlashStringHelper const*)>
#endif
  printCLILine(deadline, F("R N"), F("dump Raw stats set N"));
    39b0:	81 2f       	mov	r24, r17
    39b2:	64 ea       	ldi	r22, 0xA4	; 164
    39b4:	72 e0       	ldi	r23, 0x02	; 2
    39b6:	4f e8       	ldi	r20, 0x8F	; 143
    39b8:	52 e0       	ldi	r21, 0x02	; 2
    39ba:	0e 94 42 1c 	call	0x3884	; 0x3884 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine(deadline, 'S', F("show Status and smart warming for next 24h"));
    39be:	81 2f       	mov	r24, r17
    39c0:	63 e5       	ldi	r22, 0x53	; 83
    39c2:	44 e6       	ldi	r20, 0x64	; 100
    39c4:	52 e0       	ldi	r21, 0x02	; 2
    39c6:	0e 94 1f 1c 	call	0x383e	; 0x383e <printCLILine(unsigned char, char, __FlashStringHelper const*)>
  printCLILine(deadline, F("T HH MM"), F("set 24h Time"));
    39ca:	81 2f       	mov	r24, r17
    39cc:	6c e5       	ldi	r22, 0x5C	; 92
    39ce:	72 e0       	ldi	r23, 0x02	; 2
    39d0:	4f e4       	ldi	r20, 0x4F	; 79
    39d2:	52 e0       	ldi	r21, 0x02	; 2
    39d4:	0e 94 42 1c 	call	0x3884	; 0x3884 <printCLILine(unsigned char, __FlashStringHelper const*, __FlashStringHelper const*)>
  printCLILine(deadline, 'W', F("Warm"));
    39d8:	81 2f       	mov	r24, r17
    39da:	67 e5       	ldi	r22, 0x57	; 87
    39dc:	4a e4       	ldi	r20, 0x4A	; 74
    39de:	52 e0       	ldi	r21, 0x02	; 2
    39e0:	0e 94 1f 1c 	call	0x383e	; 0x383e <printCLILine(unsigned char, char, __FlashStringHelper const*)>
  printCLILine(deadline, 'V', F("code/board Version"));
    39e4:	81 2f       	mov	r24, r17
    39e6:	66 e5       	ldi	r22, 0x56	; 86
    39e8:	47 e3       	ldi	r20, 0x37	; 55
    39ea:	52 e0       	ldi	r21, 0x02	; 2
    39ec:	0e 94 1f 1c 	call	0x383e	; 0x383e <printCLILine(unsigned char, char, __FlashStringHelper const*)>
#if defined(SETTABLE_TARGET_TEMPERATURES) && !defined(TEMP_POT_AVAILABLE)
  printCLILine(deadline, F("W CC"), F("set Warm temp CC"));
#endif
  printCLILine(deadline, 'X', F("Xmit security level; 0 always, 255 never"));
    39f0:	81 2f       	mov	r24, r17
    39f2:	68 e5       	ldi	r22, 0x58	; 88
    39f4:	4e e0       	ldi	r20, 0x0E	; 14
    39f6:	52 e0       	ldi	r21, 0x02	; 2
    39f8:	0e 94 1f 1c 	call	0x383e	; 0x383e <printCLILine(unsigned char, char, __FlashStringHelper const*)>
  printCLILine(deadline, 'Z', F("Zap stats"));
    39fc:	81 2f       	mov	r24, r17
    39fe:	6a e5       	ldi	r22, 0x5A	; 90
    3a00:	44 e0       	ldi	r20, 0x04	; 4
    3a02:	52 e0       	ldi	r21, 0x02	; 2
    3a04:	0e 94 1f 1c 	call	0x383e	; 0x383e <printCLILine(unsigned char, char, __FlashStringHelper const*)>
  Serial.println();
    3a08:	81 e3       	ldi	r24, 0x31	; 49
    3a0a:	93 e0       	ldi	r25, 0x03	; 3
    3a0c:	0e 94 23 31 	call	0x6246	; 0x6246 <Print::println()>
  }
    3a10:	0f 90       	pop	r0
    3a12:	0f 90       	pop	r0
    3a14:	0f 90       	pop	r0
    3a16:	0f 90       	pop	r0
    3a18:	cf 91       	pop	r28
    3a1a:	df 91       	pop	r29
    3a1c:	1f 91       	pop	r17
    3a1e:	08 95       	ret

00003a20 <handleLEARN(unsigned char)>:
#ifdef LEARN_BUTTON_AVAILABLE
// Handle learn button(s).
// First/primary button is 0, second is 1, etc.
// In simple mode: if in frost mode clear simple schedule else set repeat for every 24h from now.
// May be called from pushbutton or CLI UI components.
static void handleLEARN(const uint8_t which)
    3a20:	1f 93       	push	r17
    3a22:	18 2f       	mov	r17, r24
  {
  // Set simple schedule starting every 24h from a little before now and running for an hour or so.  
  if(isWarmModeDebounced) { setSimpleSchedule(getMinutesSinceMidnightLT(), which); }
    3a24:	80 91 db 01 	lds	r24, 0x01DB
    3a28:	88 23       	and	r24, r24
    3a2a:	31 f0       	breq	.+12     	; 0x3a38 <handleLEARN(unsigned char)+0x18>
    3a2c:	0e 94 5f 18 	call	0x30be	; 0x30be <getMinutesSinceMidnightLT()>
    3a30:	61 2f       	mov	r22, r17
    3a32:	0e 94 85 19 	call	0x330a	; 0x330a <setSimpleSchedule(unsigned int, unsigned char)>
    3a36:	03 c0       	rjmp	.+6      	; 0x3a3e <handleLEARN(unsigned char)+0x1e>
  // Clear simple schedule.
  else { clearSimpleSchedule(which); }
    3a38:	81 2f       	mov	r24, r17
    3a3a:	0e 94 79 19 	call	0x32f2	; 0x32f2 <clearSimpleSchedule(unsigned char)>
  }
    3a3e:	1f 91       	pop	r17
    3a40:	08 95       	ret

00003a42 <serialStatusReport()>:

'HC' introduces the optional FHT8V house codes section, if supported and codes are set.
eg 'HC99 99'
HChc1 hc2 are the house codes 1 and 2 for an FHT8V valve.
*/
void serialStatusReport()
    3a42:	df 92       	push	r13
    3a44:	ef 92       	push	r14
    3a46:	ff 92       	push	r15
    3a48:	0f 93       	push	r16
    3a4a:	1f 93       	push	r17
    3a4c:	cf 93       	push	r28
    3a4e:	df 93       	push	r29
  {
  const bool neededWaking = powerUpSerialIfDisabled();
    3a50:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <powerUpSerialIfDisabled()>
    3a54:	d8 2e       	mov	r13, r24

  // Aim to overlap CPU usage with characters being TXed for throughput determined primarily by output size and baud.

  // Stats line starts with distingushed marker character.
  // Initial '=' section with common essentials.
  Serial.print(LINE_START_CHAR_STATS);
    3a56:	81 e3       	ldi	r24, 0x31	; 49
    3a58:	93 e0       	ldi	r25, 0x03	; 3
    3a5a:	6d e3       	ldi	r22, 0x3D	; 61
    3a5c:	0e 94 1b 31 	call	0x6236	; 0x6236 <Print::print(char)>
#ifdef SUPPORT_BAKE
  Serial.print(inWarmModeDebounced() ? (inBakeModeDebounced() ? 'B' : 'W') : 'F');
    3a60:	80 91 db 01 	lds	r24, 0x01DB
    3a64:	88 23       	and	r24, r24
    3a66:	11 f4       	brne	.+4      	; 0x3a6c <serialStatusReport()+0x2a>
    3a68:	66 e4       	ldi	r22, 0x46	; 70
    3a6a:	07 c0       	rjmp	.+14     	; 0x3a7a <serialStatusReport()+0x38>
static uint_least8_t bakeCountdownM;
// If true then the unit is in raw 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
static bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
// TODO: this is not fully 'debounced', ie could flip between WARM/BAKE with button held down.
bool inBakeModeDebounced() { return(isWarmModeDebounced && (0 != bakeCountdownM)); }
    3a6c:	80 91 dd 01 	lds	r24, 0x01DD
    3a70:	88 23       	and	r24, r24
    3a72:	11 f4       	brne	.+4      	; 0x3a78 <serialStatusReport()+0x36>
    3a74:	67 e5       	ldi	r22, 0x57	; 87
    3a76:	01 c0       	rjmp	.+2      	; 0x3a7a <serialStatusReport()+0x38>
    3a78:	62 e4       	ldi	r22, 0x42	; 66

  // Stats line starts with distingushed marker character.
  // Initial '=' section with common essentials.
  Serial.print(LINE_START_CHAR_STATS);
#ifdef SUPPORT_BAKE
  Serial.print(inWarmModeDebounced() ? (inBakeModeDebounced() ? 'B' : 'W') : 'F');
    3a7a:	81 e3       	ldi	r24, 0x31	; 49
    3a7c:	93 e0       	ldi	r25, 0x03	; 3
    3a7e:	0e 94 1b 31 	call	0x6236	; 0x6236 <Print::print(char)>
#else
  Serial.print(inWarmModeDebounced() ? 'W' : 'F');
#endif
  Serial.print(getTRVPercentOpen()); Serial.print('%'); // Target valve position.
    3a82:	0e 94 76 04 	call	0x8ec	; 0x8ec <getTRVPercentOpen()>
    3a86:	68 2f       	mov	r22, r24
    3a88:	81 e3       	ldi	r24, 0x31	; 49
    3a8a:	93 e0       	ldi	r25, 0x03	; 3
    3a8c:	4a e0       	ldi	r20, 0x0A	; 10
    3a8e:	50 e0       	ldi	r21, 0x00	; 0
    3a90:	0e 94 f7 31 	call	0x63ee	; 0x63ee <Print::print(unsigned char, int)>
    3a94:	81 e3       	ldi	r24, 0x31	; 49
    3a96:	93 e0       	ldi	r25, 0x03	; 3
    3a98:	65 e2       	ldi	r22, 0x25	; 37
    3a9a:	0e 94 1b 31 	call	0x6236	; 0x6236 <Print::print(char)>
  const int temp = getTemperatureC16();
    3a9e:	0e 94 3e 1b 	call	0x367c	; 0x367c <getTemperatureC16()>
    3aa2:	8c 01       	movw	r16, r24
  Serial.print('@'); Serial.print(temp >> 4); Serial.print('C'); // Unrounded whole degrees C.
    3aa4:	81 e3       	ldi	r24, 0x31	; 49
    3aa6:	93 e0       	ldi	r25, 0x03	; 3
    3aa8:	60 e4       	ldi	r22, 0x40	; 64
    3aaa:	0e 94 1b 31 	call	0x6236	; 0x6236 <Print::print(char)>
    3aae:	b8 01       	movw	r22, r16
    3ab0:	84 e0       	ldi	r24, 0x04	; 4
    3ab2:	75 95       	asr	r23
    3ab4:	67 95       	ror	r22
    3ab6:	8a 95       	dec	r24
    3ab8:	e1 f7       	brne	.-8      	; 0x3ab2 <serialStatusReport()+0x70>
    3aba:	81 e3       	ldi	r24, 0x31	; 49
    3abc:	93 e0       	ldi	r25, 0x03	; 3
    3abe:	4a e0       	ldi	r20, 0x0A	; 10
    3ac0:	50 e0       	ldi	r21, 0x00	; 0
    3ac2:	0e 94 49 32 	call	0x6492	; 0x6492 <Print::print(int, int)>
    3ac6:	81 e3       	ldi	r24, 0x31	; 49
    3ac8:	93 e0       	ldi	r25, 0x03	; 3
    3aca:	63 e4       	ldi	r22, 0x43	; 67
    3acc:	0e 94 1b 31 	call	0x6236	; 0x6236 <Print::print(char)>
      Serial.print(temp & 0xf, HEX); // Show 16ths in hex.
    3ad0:	0f 70       	andi	r16, 0x0F	; 15
    3ad2:	10 70       	andi	r17, 0x00	; 0
    3ad4:	81 e3       	ldi	r24, 0x31	; 49
    3ad6:	93 e0       	ldi	r25, 0x03	; 3
    3ad8:	b8 01       	movw	r22, r16
    3ada:	40 e1       	ldi	r20, 0x10	; 16
    3adc:	50 e0       	ldi	r21, 0x00	; 0
    3ade:	0e 94 49 32 	call	0x6492	; 0x6492 <Print::print(int, int)>

  // *I* ID section: show first two hex node ID bytes each in the range 80--FE.
  Serial.print(F(";I"));
    3ae2:	81 e3       	ldi	r24, 0x31	; 49
    3ae4:	93 e0       	ldi	r25, 0x03	; 3
    3ae6:	65 e0       	ldi	r22, 0x05	; 5
    3ae8:	74 e0       	ldi	r23, 0x04	; 4
    3aea:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <Print::print(__FlashStringHelper const*)>
    3aee:	04 e1       	ldi	r16, 0x14	; 20
    3af0:	10 e0       	ldi	r17, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    3af2:	f9 99       	sbic	0x1f, 1	; 31
    3af4:	fe cf       	rjmp	.-4      	; 0x3af2 <serialStatusReport()+0xb0>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    3af6:	12 bd       	out	0x22, r17	; 34
    3af8:	01 bd       	out	0x21, r16	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    3afa:	f8 9a       	sbi	0x1f, 0	; 31
    3afc:	60 b5       	in	r22, 0x20	; 32
  for(uint8_t i = 0; i < min(2, EE_LEN_ID); ++i)
    { Serial.print(eeprom_read_byte(i + (uint8_t *)EE_START_ID), HEX); }
    3afe:	81 e3       	ldi	r24, 0x31	; 49
    3b00:	93 e0       	ldi	r25, 0x03	; 3
    3b02:	40 e1       	ldi	r20, 0x10	; 16
    3b04:	50 e0       	ldi	r21, 0x00	; 0
    3b06:	0e 94 f7 31 	call	0x63ee	; 0x63ee <Print::print(unsigned char, int)>
    3b0a:	0f 5f       	subi	r16, 0xFF	; 255
    3b0c:	1f 4f       	sbci	r17, 0xFF	; 255
  Serial.print('@'); Serial.print(temp >> 4); Serial.print('C'); // Unrounded whole degrees C.
      Serial.print(temp & 0xf, HEX); // Show 16ths in hex.

  // *I* ID section: show first two hex node ID bytes each in the range 80--FE.
  Serial.print(F(";I"));
  for(uint8_t i = 0; i < min(2, EE_LEN_ID); ++i)
    3b0e:	06 31       	cpi	r16, 0x16	; 22
    3b10:	11 05       	cpc	r17, r1
    3b12:	79 f7       	brne	.-34     	; 0x3af2 <serialStatusReport()+0xb0>
    { Serial.print(eeprom_read_byte(i + (uint8_t *)EE_START_ID), HEX); }

  // *P* section: low power flag only shown iff (battery) low.
  if(isBatteryLow()) { Serial.print(F(";Plow")); }
    3b14:	0e 94 df 12 	call	0x25be	; 0x25be <isBatteryLow()>
    3b18:	88 23       	and	r24, r24
    3b1a:	31 f0       	breq	.+12     	; 0x3b28 <serialStatusReport()+0xe6>
    3b1c:	81 e3       	ldi	r24, 0x31	; 49
    3b1e:	93 e0       	ldi	r25, 0x03	; 3
    3b20:	6f ef       	ldi	r22, 0xFF	; 255
    3b22:	73 e0       	ldi	r23, 0x03	; 3
    3b24:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <Print::print(__FlashStringHelper const*)>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    3b28:	f9 99       	sbic	0x1f, 1	; 31
    3b2a:	fe cf       	rjmp	.-4      	; 0x3b28 <serialStatusReport()+0xe6>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    3b2c:	88 e1       	ldi	r24, 0x18	; 24
    3b2e:	90 e0       	ldi	r25, 0x00	; 0
    3b30:	92 bd       	out	0x22, r25	; 34
    3b32:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    3b34:	f8 9a       	sbi	0x1f, 0	; 31
    3b36:	10 b5       	in	r17, 0x20	; 32

  // *X* section: Xmit security level shown only if some non-essential TX potentially allowed.
  const uint8_t xmitLevel = eeprom_read_byte((uint8_t *)EE_START_STATS_TX_ENABLE);
  if(0xff != xmitLevel) { Serial.print(F(";X")); Serial.print(xmitLevel); }
    3b38:	1f 3f       	cpi	r17, 0xFF	; 255
    3b3a:	69 f0       	breq	.+26     	; 0x3b56 <serialStatusReport()+0x114>
    3b3c:	81 e3       	ldi	r24, 0x31	; 49
    3b3e:	93 e0       	ldi	r25, 0x03	; 3
    3b40:	6c ef       	ldi	r22, 0xFC	; 252
    3b42:	73 e0       	ldi	r23, 0x03	; 3
    3b44:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <Print::print(__FlashStringHelper const*)>
    3b48:	81 e3       	ldi	r24, 0x31	; 49
    3b4a:	93 e0       	ldi	r25, 0x03	; 3
    3b4c:	61 2f       	mov	r22, r17
    3b4e:	4a e0       	ldi	r20, 0x0A	; 10
    3b50:	50 e0       	ldi	r21, 0x00	; 0
    3b52:	0e 94 f7 31 	call	0x63ee	; 0x63ee <Print::print(unsigned char, int)>

#ifdef AMBIENT_LIGHT_SENSOR_H
  // *L* ambient light section.
  Serial.print(F(";L"));
    3b56:	81 e3       	ldi	r24, 0x31	; 49
    3b58:	93 e0       	ldi	r25, 0x03	; 3
    3b5a:	69 ef       	ldi	r22, 0xF9	; 249
    3b5c:	73 e0       	ldi	r23, 0x03	; 3
    3b5e:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <Print::print(__FlashStringHelper const*)>
  Serial.print(getAmbientLight());
    3b62:	0e 94 3b 04 	call	0x876	; 0x876 <getAmbientLight()>
    3b66:	bc 01       	movw	r22, r24
    3b68:	81 e3       	ldi	r24, 0x31	; 49
    3b6a:	93 e0       	ldi	r25, 0x03	; 3
    3b6c:	4a e0       	ldi	r20, 0x0A	; 10
    3b6e:	50 e0       	ldi	r21, 0x00	; 0
    3b70:	0e 94 49 32 	call	0x6492	; 0x6492 <Print::print(int, int)>
#endif

  // *T* section: time and schedules.
  const uint_least8_t hh = getHoursLT();
    3b74:	0e 94 74 18 	call	0x30e8	; 0x30e8 <getHoursLT()>
    3b78:	e8 2e       	mov	r14, r24
  const uint_least8_t mm = getMinutesLT();
    3b7a:	0e 94 68 18 	call	0x30d0	; 0x30d0 <getMinutesLT()>
    3b7e:	18 2f       	mov	r17, r24
  Serial.print(';'); // End previous section.
    3b80:	81 e3       	ldi	r24, 0x31	; 49
    3b82:	93 e0       	ldi	r25, 0x03	; 3
    3b84:	6b e3       	ldi	r22, 0x3B	; 59
    3b86:	0e 94 1b 31 	call	0x6236	; 0x6236 <Print::print(char)>
  Serial.print('T'); Serial.print(hh); Serial_print_space(); Serial.print(mm);
    3b8a:	81 e3       	ldi	r24, 0x31	; 49
    3b8c:	93 e0       	ldi	r25, 0x03	; 3
    3b8e:	64 e5       	ldi	r22, 0x54	; 84
    3b90:	0e 94 1b 31 	call	0x6236	; 0x6236 <Print::print(char)>
    3b94:	81 e3       	ldi	r24, 0x31	; 49
    3b96:	93 e0       	ldi	r25, 0x03	; 3
    3b98:	6e 2d       	mov	r22, r14
    3b9a:	4a e0       	ldi	r20, 0x0A	; 10
    3b9c:	50 e0       	ldi	r21, 0x00	; 0
    3b9e:	0e 94 f7 31 	call	0x63ee	; 0x63ee <Print::print(unsigned char, int)>
    3ba2:	0e 94 12 1c 	call	0x3824	; 0x3824 <Serial_print_space()>
    3ba6:	81 e3       	ldi	r24, 0x31	; 49
    3ba8:	93 e0       	ldi	r25, 0x03	; 3
    3baa:	61 2f       	mov	r22, r17
    3bac:	4a e0       	ldi	r20, 0x0A	; 10
    3bae:	50 e0       	ldi	r21, 0x00	; 0
    3bb0:	0e 94 f7 31 	call	0x63ee	; 0x63ee <Print::print(unsigned char, int)>
    3bb4:	ff 24       	eor	r15, r15
  // Show all schedules set.
  for(uint8_t scheduleNumber = 0; scheduleNumber < MAX_SIMPLE_SCHEDULES; ++scheduleNumber)
    {
    Serial_print_space();
    3bb6:	0e 94 12 1c 	call	0x3824	; 0x3824 <Serial_print_space()>
    uint_least16_t startMinutesSinceMidnightLT = getSimpleScheduleOn(scheduleNumber);
    3bba:	8f 2d       	mov	r24, r15
    3bbc:	0e 94 59 19 	call	0x32b2	; 0x32b2 <getSimpleScheduleOn(unsigned char)>
    3bc0:	fc 01       	movw	r30, r24
    const bool invalidStartTime = startMinutesSinceMidnightLT >= MINS_PER_DAY;
    const int startH = invalidStartTime ? 255 : (startMinutesSinceMidnightLT / 60);
    3bc2:	85 e0       	ldi	r24, 0x05	; 5
    3bc4:	e0 3a       	cpi	r30, 0xA0	; 160
    3bc6:	f8 07       	cpc	r31, r24
    3bc8:	28 f0       	brcs	.+10     	; 0x3bd4 <serialStatusReport()+0x192>
    3bca:	00 e0       	ldi	r16, 0x00	; 0
    3bcc:	10 e0       	ldi	r17, 0x00	; 0
    3bce:	cf ef       	ldi	r28, 0xFF	; 255
    3bd0:	d0 e0       	ldi	r29, 0x00	; 0
    3bd2:	0c c0       	rjmp	.+24     	; 0x3bec <serialStatusReport()+0x1aa>
    3bd4:	cf 01       	movw	r24, r30
    3bd6:	6c e3       	ldi	r22, 0x3C	; 60
    3bd8:	70 e0       	ldi	r23, 0x00	; 0
    3bda:	0e 94 e3 33 	call	0x67c6	; 0x67c6 <__udivmodhi4>
    3bde:	eb 01       	movw	r28, r22
    const int startM = invalidStartTime ? 0 : (startMinutesSinceMidnightLT % 60);
    3be0:	cf 01       	movw	r24, r30
    3be2:	6c e3       	ldi	r22, 0x3C	; 60
    3be4:	70 e0       	ldi	r23, 0x00	; 0
    3be6:	0e 94 e3 33 	call	0x67c6	; 0x67c6 <__udivmodhi4>
    3bea:	8c 01       	movw	r16, r24
    Serial.print('W'); Serial.print(startH); Serial_print_space(); Serial.print(startM);
    3bec:	81 e3       	ldi	r24, 0x31	; 49
    3bee:	93 e0       	ldi	r25, 0x03	; 3
    3bf0:	67 e5       	ldi	r22, 0x57	; 87
    3bf2:	0e 94 1b 31 	call	0x6236	; 0x6236 <Print::print(char)>
    3bf6:	81 e3       	ldi	r24, 0x31	; 49
    3bf8:	93 e0       	ldi	r25, 0x03	; 3
    3bfa:	be 01       	movw	r22, r28
    3bfc:	4a e0       	ldi	r20, 0x0A	; 10
    3bfe:	50 e0       	ldi	r21, 0x00	; 0
    3c00:	0e 94 49 32 	call	0x6492	; 0x6492 <Print::print(int, int)>
    3c04:	0e 94 12 1c 	call	0x3824	; 0x3824 <Serial_print_space()>
    3c08:	81 e3       	ldi	r24, 0x31	; 49
    3c0a:	93 e0       	ldi	r25, 0x03	; 3
    3c0c:	b8 01       	movw	r22, r16
    3c0e:	4a e0       	ldi	r20, 0x0A	; 10
    3c10:	50 e0       	ldi	r21, 0x00	; 0
    3c12:	0e 94 49 32 	call	0x6492	; 0x6492 <Print::print(int, int)>
    Serial_print_space();
    3c16:	0e 94 12 1c 	call	0x3824	; 0x3824 <Serial_print_space()>
    uint_least16_t endMinutesSinceMidnightLT = getSimpleScheduleOff(scheduleNumber);
    3c1a:	8f 2d       	mov	r24, r15
    3c1c:	0e 94 9e 19 	call	0x333c	; 0x333c <getSimpleScheduleOff(unsigned char)>
    3c20:	fc 01       	movw	r30, r24
    const bool invalidEndTime = endMinutesSinceMidnightLT >= MINS_PER_DAY;
    const int endH = invalidEndTime ? 255 : (endMinutesSinceMidnightLT / 60);
    3c22:	85 e0       	ldi	r24, 0x05	; 5
    3c24:	e0 3a       	cpi	r30, 0xA0	; 160
    3c26:	f8 07       	cpc	r31, r24
    3c28:	28 f0       	brcs	.+10     	; 0x3c34 <serialStatusReport()+0x1f2>
    3c2a:	00 e0       	ldi	r16, 0x00	; 0
    3c2c:	10 e0       	ldi	r17, 0x00	; 0
    3c2e:	cf ef       	ldi	r28, 0xFF	; 255
    3c30:	d0 e0       	ldi	r29, 0x00	; 0
    3c32:	0c c0       	rjmp	.+24     	; 0x3c4c <serialStatusReport()+0x20a>
    3c34:	cf 01       	movw	r24, r30
    3c36:	6c e3       	ldi	r22, 0x3C	; 60
    3c38:	70 e0       	ldi	r23, 0x00	; 0
    3c3a:	0e 94 e3 33 	call	0x67c6	; 0x67c6 <__udivmodhi4>
    3c3e:	eb 01       	movw	r28, r22
    const int endM = invalidEndTime ? 0 : (endMinutesSinceMidnightLT % 60);
    3c40:	cf 01       	movw	r24, r30
    3c42:	6c e3       	ldi	r22, 0x3C	; 60
    3c44:	70 e0       	ldi	r23, 0x00	; 0
    3c46:	0e 94 e3 33 	call	0x67c6	; 0x67c6 <__udivmodhi4>
    3c4a:	8c 01       	movw	r16, r24
    Serial.print('F'); Serial.print(endH); Serial_print_space(); Serial.print(endM);
    3c4c:	81 e3       	ldi	r24, 0x31	; 49
    3c4e:	93 e0       	ldi	r25, 0x03	; 3
    3c50:	66 e4       	ldi	r22, 0x46	; 70
    3c52:	0e 94 1b 31 	call	0x6236	; 0x6236 <Print::print(char)>
    3c56:	81 e3       	ldi	r24, 0x31	; 49
    3c58:	93 e0       	ldi	r25, 0x03	; 3
    3c5a:	be 01       	movw	r22, r28
    3c5c:	4a e0       	ldi	r20, 0x0A	; 10
    3c5e:	50 e0       	ldi	r21, 0x00	; 0
    3c60:	0e 94 49 32 	call	0x6492	; 0x6492 <Print::print(int, int)>
    3c64:	0e 94 12 1c 	call	0x3824	; 0x3824 <Serial_print_space()>
    3c68:	81 e3       	ldi	r24, 0x31	; 49
    3c6a:	93 e0       	ldi	r25, 0x03	; 3
    3c6c:	b8 01       	movw	r22, r16
    3c6e:	4a e0       	ldi	r20, 0x0A	; 10
    3c70:	50 e0       	ldi	r21, 0x00	; 0
    3c72:	0e 94 49 32 	call	0x6492	; 0x6492 <Print::print(int, int)>
  const uint_least8_t hh = getHoursLT();
  const uint_least8_t mm = getMinutesLT();
  Serial.print(';'); // End previous section.
  Serial.print('T'); Serial.print(hh); Serial_print_space(); Serial.print(mm);
  // Show all schedules set.
  for(uint8_t scheduleNumber = 0; scheduleNumber < MAX_SIMPLE_SCHEDULES; ++scheduleNumber)
    3c76:	f3 94       	inc	r15
    3c78:	82 e0       	ldi	r24, 0x02	; 2
    3c7a:	f8 16       	cp	r15, r24
    3c7c:	09 f0       	breq	.+2      	; 0x3c80 <serialStatusReport()+0x23e>
    3c7e:	9b cf       	rjmp	.-202    	; 0x3bb6 <serialStatusReport()+0x174>
    const bool invalidEndTime = endMinutesSinceMidnightLT >= MINS_PER_DAY;
    const int endH = invalidEndTime ? 255 : (endMinutesSinceMidnightLT / 60);
    const int endM = invalidEndTime ? 0 : (endMinutesSinceMidnightLT % 60);
    Serial.print('F'); Serial.print(endH); Serial_print_space(); Serial.print(endM);
    }
  if(isAnyScheduleOnWARMNow()) { Serial.print('*'); } // Indicate that at least one schedule is active now.
    3c80:	0e 94 c4 19 	call	0x3388	; 0x3388 <isAnyScheduleOnWARMNow()>
    3c84:	88 23       	and	r24, r24
    3c86:	29 f0       	breq	.+10     	; 0x3c92 <serialStatusReport()+0x250>
    3c88:	81 e3       	ldi	r24, 0x31	; 49
    3c8a:	93 e0       	ldi	r25, 0x03	; 3
    3c8c:	6a e2       	ldi	r22, 0x2A	; 42
    3c8e:	0e 94 1b 31 	call	0x6236	; 0x6236 <Print::print(char)>

  // *S* section: settable target/threshold temperatures, current target, and eco/smart/occupied flags.
#ifdef SETTABLE_TARGET_TEMPERATURES // Show thresholds and current target since no longer so easily deduced.
  Serial.print(';'); // Terminate previous section.
    3c92:	81 e3       	ldi	r24, 0x31	; 49
    3c94:	93 e0       	ldi	r25, 0x03	; 3
    3c96:	6b e3       	ldi	r22, 0x3B	; 59
    3c98:	0e 94 1b 31 	call	0x6236	; 0x6236 <Print::print(char)>
  Serial.print('S'); // Current settable temperature target, and FROST and WARM settings.
    3c9c:	81 e3       	ldi	r24, 0x31	; 49
    3c9e:	93 e0       	ldi	r25, 0x03	; 3
    3ca0:	63 e5       	ldi	r22, 0x53	; 83
    3ca2:	0e 94 1b 31 	call	0x6236	; 0x6236 <Print::print(char)>
  Serial.print(getTargetTempC());
    3ca6:	0e 94 79 04 	call	0x8f2	; 0x8f2 <getTargetTempC()>
    3caa:	68 2f       	mov	r22, r24
    3cac:	81 e3       	ldi	r24, 0x31	; 49
    3cae:	93 e0       	ldi	r25, 0x03	; 3
    3cb0:	4a e0       	ldi	r20, 0x0A	; 10
    3cb2:	50 e0       	ldi	r21, 0x00	; 0
    3cb4:	0e 94 f7 31 	call	0x63ee	; 0x63ee <Print::print(unsigned char, int)>
  Serial_print_space();
    3cb8:	0e 94 12 1c 	call	0x3824	; 0x3824 <Serial_print_space()>
  Serial.print(getFROSTTargetC());
    3cbc:	0e 94 41 05 	call	0xa82	; 0xa82 <getFROSTTargetC()>
    3cc0:	68 2f       	mov	r22, r24
    3cc2:	81 e3       	ldi	r24, 0x31	; 49
    3cc4:	93 e0       	ldi	r25, 0x03	; 3
    3cc6:	4a e0       	ldi	r20, 0x0A	; 10
    3cc8:	50 e0       	ldi	r21, 0x00	; 0
    3cca:	0e 94 f7 31 	call	0x63ee	; 0x63ee <Print::print(unsigned char, int)>
  Serial_print_space();
    3cce:	0e 94 12 1c 	call	0x3824	; 0x3824 <Serial_print_space()>
  Serial.print(getWARMTargetC());
    3cd2:	0e 94 49 05 	call	0xa92	; 0xa92 <getWARMTargetC()>
    3cd6:	68 2f       	mov	r22, r24
    3cd8:	81 e3       	ldi	r24, 0x31	; 49
    3cda:	93 e0       	ldi	r25, 0x03	; 3
    3cdc:	4a e0       	ldi	r20, 0x0A	; 10
    3cde:	50 e0       	ldi	r21, 0x00	; 0
    3ce0:	0e 94 f7 31 	call	0x63ee	; 0x63ee <Print::print(unsigned char, int)>
  Serial_print_space();
    3ce4:	0e 94 12 1c 	call	0x3824	; 0x3824 <Serial_print_space()>
  // Show bias.
  Serial.print(hasEcoBias() ? 'e' : 'c'); // Show eco/comfort bias.
    3ce8:	0e 94 3a 05 	call	0xa74	; 0xa74 <hasEcoBias()>
    3cec:	88 23       	and	r24, r24
    3cee:	11 f4       	brne	.+4      	; 0x3cf4 <serialStatusReport()+0x2b2>
    3cf0:	63 e6       	ldi	r22, 0x63	; 99
    3cf2:	01 c0       	rjmp	.+2      	; 0x3cf6 <serialStatusReport()+0x2b4>
    3cf4:	65 e6       	ldi	r22, 0x65	; 101
    3cf6:	81 e3       	ldi	r24, 0x31	; 49
    3cf8:	93 e0       	ldi	r25, 0x03	; 3
    3cfa:	0e 94 1b 31 	call	0x6236	; 0x6236 <Print::print(char)>
  // Show warming predictions.
  Serial.print(shouldBeWarmedAtHour(hh) ? 'w' : 'f');
    3cfe:	8e 2d       	mov	r24, r14
    3d00:	0e 94 64 05 	call	0xac8	; 0xac8 <shouldBeWarmedAtHour(unsigned char)>
    3d04:	88 23       	and	r24, r24
    3d06:	11 f4       	brne	.+4      	; 0x3d0c <serialStatusReport()+0x2ca>
    3d08:	66 e6       	ldi	r22, 0x66	; 102
    3d0a:	01 c0       	rjmp	.+2      	; 0x3d0e <serialStatusReport()+0x2cc>
    3d0c:	67 e7       	ldi	r22, 0x77	; 119
    3d0e:	81 e3       	ldi	r24, 0x31	; 49
    3d10:	93 e0       	ldi	r25, 0x03	; 3
    3d12:	0e 94 1b 31 	call	0x6236	; 0x6236 <Print::print(char)>
  Serial.print(shouldBeWarmedAtHour(hh < 23 ? (hh+1) : 0) ? 'w' : 'f');
    3d16:	86 e1       	ldi	r24, 0x16	; 22
    3d18:	8e 15       	cp	r24, r14
    3d1a:	10 f4       	brcc	.+4      	; 0x3d20 <serialStatusReport()+0x2de>
    3d1c:	80 e0       	ldi	r24, 0x00	; 0
    3d1e:	02 c0       	rjmp	.+4      	; 0x3d24 <serialStatusReport()+0x2e2>
    3d20:	8e 2d       	mov	r24, r14
    3d22:	8f 5f       	subi	r24, 0xFF	; 255
    3d24:	0e 94 64 05 	call	0xac8	; 0xac8 <shouldBeWarmedAtHour(unsigned char)>
    3d28:	88 23       	and	r24, r24
    3d2a:	11 f4       	brne	.+4      	; 0x3d30 <serialStatusReport()+0x2ee>
    3d2c:	66 e6       	ldi	r22, 0x66	; 102
    3d2e:	01 c0       	rjmp	.+2      	; 0x3d32 <serialStatusReport()+0x2f0>
    3d30:	67 e7       	ldi	r22, 0x77	; 119
    3d32:	81 e3       	ldi	r24, 0x31	; 49
    3d34:	93 e0       	ldi	r25, 0x03	; 3
    3d36:	0e 94 1b 31 	call	0x6236	; 0x6236 <Print::print(char)>
//  // Show occupancy if known.
//  if(isLikelyOccupied()) { Serial.print(isLikelyRecentlyOccupied() ? 'O' : 'o'); } // Show room occupied and how recently.
#endif

  // *O* section: occopancy level if known; only show if some occupancy detected.
  const uint8_t occupancy = twoBitOccupancyValue();
    3d3a:	0e 94 86 04 	call	0x90c	; 0x90c <twoBitOccupancyValue()>
    3d3e:	18 2f       	mov	r17, r24
  if(occupancy > 1) { Serial.print(F(";O")); Serial.print(occupancy); }
    3d40:	82 30       	cpi	r24, 0x02	; 2
    3d42:	68 f0       	brcs	.+26     	; 0x3d5e <serialStatusReport()+0x31c>
    3d44:	81 e3       	ldi	r24, 0x31	; 49
    3d46:	93 e0       	ldi	r25, 0x03	; 3
    3d48:	66 ef       	ldi	r22, 0xF6	; 246
    3d4a:	73 e0       	ldi	r23, 0x03	; 3
    3d4c:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <Print::print(__FlashStringHelper const*)>
    3d50:	81 e3       	ldi	r24, 0x31	; 49
    3d52:	93 e0       	ldi	r25, 0x03	; 3
    3d54:	61 2f       	mov	r22, r17
    3d56:	4a e0       	ldi	r20, 0x0A	; 10
    3d58:	50 e0       	ldi	r21, 0x00	; 0
    3d5a:	0e 94 f7 31 	call	0x63ee	; 0x63ee <Print::print(unsigned char, int)>

  // *C* section: central hub values.
#if defined(ENABLE_BOILER_HUB)
  // Print optional hub boiler-on-time section if apparently set (non-zero) and thus in hub mode.
  const uint8_t boilerOnMinutes = getMinBoilerOnMinutes();
    3d5e:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <getMinBoilerOnMinutes()>
    3d62:	18 2f       	mov	r17, r24
  if(boilerOnMinutes != 0)
    3d64:	88 23       	and	r24, r24
    3d66:	89 f0       	breq	.+34     	; 0x3d8a <serialStatusReport()+0x348>
    {
    Serial.print(';'); // Terminate previous section.
    3d68:	81 e3       	ldi	r24, 0x31	; 49
    3d6a:	93 e0       	ldi	r25, 0x03	; 3
    3d6c:	6b e3       	ldi	r22, 0x3B	; 59
    3d6e:	0e 94 1b 31 	call	0x6236	; 0x6236 <Print::print(char)>
    Serial.print('C'); // Indicate central hub mode available.
    3d72:	81 e3       	ldi	r24, 0x31	; 49
    3d74:	93 e0       	ldi	r25, 0x03	; 3
    3d76:	63 e4       	ldi	r22, 0x43	; 67
    3d78:	0e 94 1b 31 	call	0x6236	; 0x6236 <Print::print(char)>
    Serial.print(boilerOnMinutes); // Show min 'on' time, or zero if disabled.
    3d7c:	81 e3       	ldi	r24, 0x31	; 49
    3d7e:	93 e0       	ldi	r25, 0x03	; 3
    3d80:	61 2f       	mov	r22, r17
    3d82:	4a e0       	ldi	r20, 0x0A	; 10
    3d84:	50 e0       	ldi	r21, 0x00	; 0
    3d86:	0e 94 f7 31 	call	0x63ee	; 0x63ee <Print::print(unsigned char, int)>
#endif

  // *H* section: house codes for local FHT8V valve and if syncing, iff set.
#if defined(USE_MODULE_FHT8VSIMPLE)
  // Print optional house code section if codes set.
  const uint8_t hc1 = FHT8VGetHC1();
    3d8a:	0e 94 ef 08 	call	0x11de	; 0x11de <FHT8VGetHC1()>
    3d8e:	18 2f       	mov	r17, r24
  if(hc1 != 255)
    3d90:	8f 3f       	cpi	r24, 0xFF	; 255
    3d92:	19 f1       	breq	.+70     	; 0x3dda <serialStatusReport()+0x398>
    {
    Serial.print(F(";HC"));
    3d94:	81 e3       	ldi	r24, 0x31	; 49
    3d96:	93 e0       	ldi	r25, 0x03	; 3
    3d98:	62 ef       	ldi	r22, 0xF2	; 242
    3d9a:	73 e0       	ldi	r23, 0x03	; 3
    3d9c:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <Print::print(__FlashStringHelper const*)>
    Serial.print(hc1);
    3da0:	81 e3       	ldi	r24, 0x31	; 49
    3da2:	93 e0       	ldi	r25, 0x03	; 3
    3da4:	61 2f       	mov	r22, r17
    3da6:	4a e0       	ldi	r20, 0x0A	; 10
    3da8:	50 e0       	ldi	r21, 0x00	; 0
    3daa:	0e 94 f7 31 	call	0x63ee	; 0x63ee <Print::print(unsigned char, int)>
    Serial_print_space();
    3dae:	0e 94 12 1c 	call	0x3824	; 0x3824 <Serial_print_space()>
    Serial.print(FHT8VGetHC2());
    3db2:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <FHT8VGetHC2()>
    3db6:	68 2f       	mov	r22, r24
    3db8:	81 e3       	ldi	r24, 0x31	; 49
    3dba:	93 e0       	ldi	r25, 0x03	; 3
    3dbc:	4a e0       	ldi	r20, 0x0A	; 10
    3dbe:	50 e0       	ldi	r21, 0x00	; 0
    3dc0:	0e 94 f7 31 	call	0x63ee	; 0x63ee <Print::print(unsigned char, int)>
    if(!isSyncedWithFHT8V())
    3dc4:	0e 94 01 09 	call	0x1202	; 0x1202 <isSyncedWithFHT8V()>
    3dc8:	88 23       	and	r24, r24
    3dca:	39 f4       	brne	.+14     	; 0x3dda <serialStatusReport()+0x398>
      {
      Serial_print_space();
    3dcc:	0e 94 12 1c 	call	0x3824	; 0x3824 <Serial_print_space()>
      Serial.print('s'); // Indicate syncing with trailing lower-case 's' in field...
    3dd0:	81 e3       	ldi	r24, 0x31	; 49
    3dd2:	93 e0       	ldi	r25, 0x03	; 3
    3dd4:	63 e7       	ldi	r22, 0x73	; 115
    3dd6:	0e 94 1b 31 	call	0x6236	; 0x6236 <Print::print(char)>
      }
    }
#endif

  // *M* section: min-valve-percentage open section, iff not at default value.
  const uint8_t minValvePcOpen = getMinValvePcReallyOpen();
    3dda:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <getMinValvePcReallyOpen()>
    3dde:	18 2f       	mov	r17, r24
  if(DEFAULT_MIN_VALVE_PC_REALLY_OPEN != minValvePcOpen) { Serial.print(F(";M")); Serial.print(minValvePcOpen); }
    3de0:	8a 30       	cpi	r24, 0x0A	; 10
    3de2:	69 f0       	breq	.+26     	; 0x3dfe <serialStatusReport()+0x3bc>
    3de4:	81 e3       	ldi	r24, 0x31	; 49
    3de6:	93 e0       	ldi	r25, 0x03	; 3
    3de8:	6f ee       	ldi	r22, 0xEF	; 239
    3dea:	73 e0       	ldi	r23, 0x03	; 3
    3dec:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <Print::print(__FlashStringHelper const*)>
    3df0:	81 e3       	ldi	r24, 0x31	; 49
    3df2:	93 e0       	ldi	r25, 0x03	; 3
    3df4:	61 2f       	mov	r22, r17
    3df6:	4a e0       	ldi	r20, 0x0A	; 10
    3df8:	50 e0       	ldi	r21, 0x00	; 0
    3dfa:	0e 94 f7 31 	call	0x63ee	; 0x63ee <Print::print(unsigned char, int)>

  // Terminate line.
  Serial.println();
    3dfe:	81 e3       	ldi	r24, 0x31	; 49
    3e00:	93 e0       	ldi	r25, 0x03	; 3
    3e02:	0e 94 23 31 	call	0x6246	; 0x6246 <Print::println()>

  // Ensure that all text is sent before this routine returns, in case any sleep/powerdown follows that kills the UART.
  flushSerialSCTSensitive();
    3e06:	0e 94 10 15 	call	0x2a20	; 0x2a20 <flushSerialSCTSensitive()>

  if(neededWaking) { powerDownSerial(); }
    3e0a:	dd 20       	and	r13, r13
    3e0c:	11 f0       	breq	.+4      	; 0x3e12 <serialStatusReport()+0x3d0>
    3e0e:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <powerDownSerial()>
  }
    3e12:	df 91       	pop	r29
    3e14:	cf 91       	pop	r28
    3e16:	1f 91       	pop	r17
    3e18:	0f 91       	pop	r16
    3e1a:	ff 90       	pop	r15
    3e1c:	ef 90       	pop	r14
    3e1e:	df 90       	pop	r13
    3e20:	08 95       	ret

00003e22 <pollCLI(unsigned char)>:
#endif
// Used to poll user side for CLI input until specified sub-cycle time.
// A period of less than (say) 500ms will be difficult for direct human response on a raw terminal.
// A period of less than (say) 100ms is not recommended to avoid possibility of overrun on long interactions.
// NOT RENTRANT (eg uses static state for speed and code space).
void pollCLI(const uint8_t maxSCT)
    3e22:	bf 92       	push	r11
    3e24:	cf 92       	push	r12
    3e26:	df 92       	push	r13
    3e28:	ef 92       	push	r14
    3e2a:	ff 92       	push	r15
    3e2c:	0f 93       	push	r16
    3e2e:	1f 93       	push	r17
    3e30:	df 93       	push	r29
    3e32:	cf 93       	push	r28
    3e34:	00 d0       	rcall	.+0      	; 0x3e36 <pollCLI(unsigned char)+0x14>
    3e36:	00 d0       	rcall	.+0      	; 0x3e38 <pollCLI(unsigned char)+0x16>
    3e38:	00 d0       	rcall	.+0      	; 0x3e3a <pollCLI(unsigned char)+0x18>
    3e3a:	cd b7       	in	r28, 0x3d	; 61
    3e3c:	de b7       	in	r29, 0x3e	; 62
    3e3e:	d8 2e       	mov	r13, r24
  {
  // Compute safe limit time given granularity of sleep and buffer fill.
  const uint8_t targetMaxSCT = (maxSCT <= MIN_POLL_SCT) ? ((uint8_t) 0) : ((uint8_t) (maxSCT - 1 - MIN_POLL_SCT));
    3e40:	22 e0       	ldi	r18, 0x02	; 2
    3e42:	28 17       	cp	r18, r24
    3e44:	10 f0       	brcs	.+4      	; 0x3e4a <pollCLI(unsigned char)+0x28>
    3e46:	00 e0       	ldi	r16, 0x00	; 0
    3e48:	02 c0       	rjmp	.+4      	; 0x3e4e <pollCLI(unsigned char)+0x2c>
    3e4a:	08 2f       	mov	r16, r24
    3e4c:	03 50       	subi	r16, 0x03	; 3
  if(getSubCycleTime() >= targetMaxSCT) { return; } // Too short to try.
    3e4e:	80 91 b2 00 	lds	r24, 0x00B2
    3e52:	80 17       	cp	r24, r16
    3e54:	08 f0       	brcs	.+2      	; 0x3e58 <pollCLI(unsigned char)+0x36>
    3e56:	21 c3       	rjmp	.+1602   	; 0x449a <pollCLI(unsigned char)+0x678>

  const bool neededWaking = powerUpSerialIfDisabled();
    3e58:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <powerUpSerialIfDisabled()>
    3e5c:	b8 2e       	mov	r11, r24
    3e5e:	04 c0       	rjmp	.+8      	; 0x3e68 <pollCLI(unsigned char)+0x46>

  // Purge any stray pending input, such as a trailing LF from previous input.
  while(Serial.available() > 0) { Serial.read(); }
    3e60:	81 e3       	ldi	r24, 0x31	; 49
    3e62:	93 e0       	ldi	r25, 0x03	; 3
    3e64:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <HardwareSerial::read()>
    3e68:	81 e3       	ldi	r24, 0x31	; 49
    3e6a:	93 e0       	ldi	r25, 0x03	; 3
    3e6c:	0e 94 bf 2f 	call	0x5f7e	; 0x5f7e <HardwareSerial::available()>
    3e70:	18 16       	cp	r1, r24
    3e72:	19 06       	cpc	r1, r25
    3e74:	ac f3       	brlt	.-22     	; 0x3e60 <pollCLI(unsigned char)+0x3e>

  // Generate and flush prompt character to the user, after a CRLF to reduce ambiguity.
  // Do this AFTER flushing the input so that sending command immediately after prompt should work.
  Serial.println();
    3e76:	81 e3       	ldi	r24, 0x31	; 49
    3e78:	93 e0       	ldi	r25, 0x03	; 3
    3e7a:	0e 94 23 31 	call	0x6246	; 0x6246 <Print::println()>
  Serial.print(CLIPromptChar);
    3e7e:	81 e3       	ldi	r24, 0x31	; 49
    3e80:	93 e0       	ldi	r25, 0x03	; 3
    3e82:	6e e3       	ldi	r22, 0x3E	; 62
    3e84:	0e 94 1b 31 	call	0x6236	; 0x6236 <Print::print(char)>
  // Idle a short while to try to save energy, waiting for serial TX end and possible RX response start.
  flushSerialSCTSensitive();
    3e88:	0e 94 10 15 	call	0x2a20	; 0x2a20 <flushSerialSCTSensitive()>
    3e8c:	10 e0       	ldi	r17, 0x00	; 0
    // Idle waiting for input, to save power, then/else do something useful with some CPU cycles...
#if CAN_IDLE_30MS
    // Minimise power consumption leaving CPU/UART clock running, if no danger of RX overrun.
    // Don't do this too close to end of target end time to avoid missing it.
    // Note: may get woken on timer0 interrupts as well as RX and watchdog.
    if(sct < targetMaxSCT-2) { idle15AndPoll(); continue; }
    3e8e:	e0 2e       	mov	r14, r16
    3e90:	ff 24       	eor	r15, r15
    3e92:	8e ef       	ldi	r24, 0xFE	; 254
    3e94:	9f ef       	ldi	r25, 0xFF	; 255
    3e96:	e8 0e       	add	r14, r24
    3e98:	f9 1e       	adc	r15, r25
#ifdef ENABLE_AVR_IDLE_MODE
// Idle productively polling I/O, etc, across the system while spending time in low-power mode if possible.
// Typically sleeps for nominally up to 30ms; tries to allow ealier wakeup if interrupt is received, etc.
// (Will often be prematurely woken by timer0 with ~16ms interval.)
// True iff watchdog timer expired; false if something else woke the CPU.
static bool inline idle15AndPoll() { const bool wd = idleCPU(WDTO_15MS); pollIO(!wd); return(wd); }
    3e9a:	cc 24       	eor	r12, r12
    3e9c:	c3 94       	inc	r12
  //Serial.setTimeout(timeoutms); const int n = Serial.readBytesUntil('\r', buf, MAXIMUM_CLI_RESPONSE_CHARS);
  uint8_t n = 0;
  while(n < MAXIMUM_CLI_RESPONSE_CHARS)
    {
    // Read next character if immediately available.
    if(Serial.available() > 0)
    3e9e:	81 e3       	ldi	r24, 0x31	; 49
    3ea0:	93 e0       	ldi	r25, 0x03	; 3
    3ea2:	0e 94 bf 2f 	call	0x5f7e	; 0x5f7e <HardwareSerial::available()>
    3ea6:	18 16       	cp	r1, r24
    3ea8:	19 06       	cpc	r1, r25
    3eaa:	0c f0       	brlt	.+2      	; 0x3eae <pollCLI(unsigned char)+0x8c>
    3eac:	43 c0       	rjmp	.+134    	; 0x3f34 <pollCLI(unsigned char)+0x112>
      {
      int ic = Serial.read();
    3eae:	81 e3       	ldi	r24, 0x31	; 49
    3eb0:	93 e0       	ldi	r25, 0x03	; 3
    3eb2:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <HardwareSerial::read()>
    3eb6:	bc 01       	movw	r22, r24
      if(('\r' == ic) || ('\n' == ic)) { break; } // Stop at CR, eg from CRLF, or LF.
    3eb8:	8d 30       	cpi	r24, 0x0D	; 13
    3eba:	91 05       	cpc	r25, r1
    3ebc:	09 f4       	brne	.+2      	; 0x3ec0 <pollCLI(unsigned char)+0x9e>
    3ebe:	50 c0       	rjmp	.+160    	; 0x3f60 <pollCLI(unsigned char)+0x13e>
    3ec0:	8a 30       	cpi	r24, 0x0A	; 10
    3ec2:	91 05       	cpc	r25, r1
    3ec4:	09 f4       	brne	.+2      	; 0x3ec8 <pollCLI(unsigned char)+0xa6>
    3ec6:	4c c0       	rjmp	.+152    	; 0x3f60 <pollCLI(unsigned char)+0x13e>
#ifdef CLI_INTERACTIVE_ECHO
      if(('\b' == ic) || (127 == ic))
    3ec8:	88 30       	cpi	r24, 0x08	; 8
    3eca:	91 05       	cpc	r25, r1
    3ecc:	19 f0       	breq	.+6      	; 0x3ed4 <pollCLI(unsigned char)+0xb2>
    3ece:	8f 37       	cpi	r24, 0x7F	; 127
    3ed0:	91 05       	cpc	r25, r1
    3ed2:	99 f4       	brne	.+38     	; 0x3efa <pollCLI(unsigned char)+0xd8>
        {
        // Handle backspace or delete as delete...
        if(n > 0) // Ignore unless something to delete...
    3ed4:	11 23       	and	r17, r17
    3ed6:	19 f3       	breq	.-58     	; 0x3e9e <pollCLI(unsigned char)+0x7c>
          {
          Serial.print('\b');
    3ed8:	81 e3       	ldi	r24, 0x31	; 49
    3eda:	93 e0       	ldi	r25, 0x03	; 3
    3edc:	68 e0       	ldi	r22, 0x08	; 8
    3ede:	0e 94 1b 31 	call	0x6236	; 0x6236 <Print::print(char)>
          Serial.print(' ');
    3ee2:	81 e3       	ldi	r24, 0x31	; 49
    3ee4:	93 e0       	ldi	r25, 0x03	; 3
    3ee6:	60 e2       	ldi	r22, 0x20	; 32
    3ee8:	0e 94 1b 31 	call	0x6236	; 0x6236 <Print::print(char)>
          Serial.print('\b');
    3eec:	81 e3       	ldi	r24, 0x31	; 49
    3eee:	93 e0       	ldi	r25, 0x03	; 3
    3ef0:	68 e0       	ldi	r22, 0x08	; 8
    3ef2:	0e 94 1b 31 	call	0x6236	; 0x6236 <Print::print(char)>
          --n;
    3ef6:	11 50       	subi	r17, 0x01	; 1
    3ef8:	2f c0       	rjmp	.+94     	; 0x3f58 <pollCLI(unsigned char)+0x136>
          }
        continue;
        }
#endif
      if((ic < 32) || (ic > 126)) { continue; } // Drop bogus characters.
    3efa:	80 97       	sbiw	r24, 0x20	; 32
    3efc:	8f 35       	cpi	r24, 0x5F	; 95
    3efe:	91 05       	cpc	r25, r1
    3f00:	58 f5       	brcc	.+86     	; 0x3f58 <pollCLI(unsigned char)+0x136>
      // Ignore any leading char that is not a letter (or '?'),
      // and force leading (command) char to upper case.
      if(0 == n)
    3f02:	11 23       	and	r17, r17
    3f04:	61 f4       	brne	.+24     	; 0x3f1e <pollCLI(unsigned char)+0xfc>
        {
        ic = toupper(ic);
    3f06:	cb 01       	movw	r24, r22
    3f08:	0e 94 4d 34 	call	0x689a	; 0x689a <toupper>
    3f0c:	bc 01       	movw	r22, r24
        if(('?' != ic) && ((ic < 'A') || (ic > 'Z'))) { continue; }
    3f0e:	8f 33       	cpi	r24, 0x3F	; 63
    3f10:	91 05       	cpc	r25, r1
    3f12:	29 f0       	breq	.+10     	; 0x3f1e <pollCLI(unsigned char)+0xfc>
    3f14:	81 54       	subi	r24, 0x41	; 65
    3f16:	90 40       	sbci	r25, 0x00	; 0
    3f18:	4a 97       	sbiw	r24, 0x1a	; 26
    3f1a:	08 f0       	brcs	.+2      	; 0x3f1e <pollCLI(unsigned char)+0xfc>
    3f1c:	c0 cf       	rjmp	.-128    	; 0x3e9e <pollCLI(unsigned char)+0x7c>
        }
      // Store the incoming char.
      buf[n++] = (char) ic;
    3f1e:	e1 2f       	mov	r30, r17
    3f20:	f0 e0       	ldi	r31, 0x00	; 0
    3f22:	ef 52       	subi	r30, 0x2F	; 47
    3f24:	fe 4f       	sbci	r31, 0xFE	; 254
    3f26:	60 83       	st	Z, r22
    3f28:	1f 5f       	subi	r17, 0xFF	; 255
#ifdef CLI_INTERACTIVE_ECHO
      Serial.print((char) ic); // Echo immediately.
    3f2a:	81 e3       	ldi	r24, 0x31	; 49
    3f2c:	93 e0       	ldi	r25, 0x03	; 3
    3f2e:	0e 94 1b 31 	call	0x6236	; 0x6236 <Print::print(char)>
    3f32:	12 c0       	rjmp	.+36     	; 0x3f58 <pollCLI(unsigned char)+0x136>
#endif
      continue;
      }
    // Quit WITHOUT PROCESSING THE POSSIBLY-INCOMPLETE INPUT if time limit is hit (or very close).
    const uint8_t sct = getSubCycleTime();
    3f34:	80 91 b2 00 	lds	r24, 0x00B2
    if(sct >= targetMaxSCT)
    3f38:	80 17       	cp	r24, r16
    3f3a:	08 f0       	brcs	.+2      	; 0x3f3e <pollCLI(unsigned char)+0x11c>
    3f3c:	98 c2       	rjmp	.+1328   	; 0x446e <pollCLI(unsigned char)+0x64c>
    // Idle waiting for input, to save power, then/else do something useful with some CPU cycles...
#if CAN_IDLE_30MS
    // Minimise power consumption leaving CPU/UART clock running, if no danger of RX overrun.
    // Don't do this too close to end of target end time to avoid missing it.
    // Note: may get woken on timer0 interrupts as well as RX and watchdog.
    if(sct < targetMaxSCT-2) { idle15AndPoll(); continue; }
    3f3e:	90 e0       	ldi	r25, 0x00	; 0
    3f40:	8e 15       	cp	r24, r14
    3f42:	9f 05       	cpc	r25, r15
    3f44:	3c f4       	brge	.+14     	; 0x3f54 <pollCLI(unsigned char)+0x132>
    3f46:	80 e0       	ldi	r24, 0x00	; 0
    3f48:	0e 94 16 12 	call	0x242c	; 0x242c <idleCPU(signed char)>
    3f4c:	8c 25       	eor	r24, r12
    3f4e:	0e 94 c7 23 	call	0x478e	; 0x478e <pollIO(bool)>
    3f52:	02 c0       	rjmp	.+4      	; 0x3f58 <pollCLI(unsigned char)+0x136>
#endif
    burnHundredsOfCyclesProductivelyAndPoll(); // Use time time to poll for I/O, etc.
    3f54:	0e 94 ee 14 	call	0x29dc	; 0x29dc <burnHundredsOfCyclesProductivelyAndPoll()>
  // Read a line up to a terminating CR, either on its own or as part of CRLF.
  // (Note that command content and timing may be useful to fold into PRNG entropy pool.)
  static char buf[MAXIMUM_CLI_RESPONSE_CHARS+1]; // Note: static state, efficient for small command lines.  Space for terminating '\0'.
  //Serial.setTimeout(timeoutms); const int n = Serial.readBytesUntil('\r', buf, MAXIMUM_CLI_RESPONSE_CHARS);
  uint8_t n = 0;
  while(n < MAXIMUM_CLI_RESPONSE_CHARS)
    3f58:	19 30       	cpi	r17, 0x09	; 9
    3f5a:	08 f4       	brcc	.+2      	; 0x3f5e <pollCLI(unsigned char)+0x13c>
    3f5c:	a0 cf       	rjmp	.-192    	; 0x3e9e <pollCLI(unsigned char)+0x7c>
    3f5e:	03 c0       	rjmp	.+6      	; 0x3f66 <pollCLI(unsigned char)+0x144>
    if(sct < targetMaxSCT-2) { idle15AndPoll(); continue; }
#endif
    burnHundredsOfCyclesProductivelyAndPoll(); // Use time time to poll for I/O, etc.
    }

  if(n > 0)
    3f60:	11 23       	and	r17, r17
    3f62:	09 f4       	brne	.+2      	; 0x3f66 <pollCLI(unsigned char)+0x144>
    3f64:	84 c2       	rjmp	.+1288   	; 0x446e <pollCLI(unsigned char)+0x64c>
    {
    // Restart the CLI timer on receipt of plausible (ASCII) input (cf noise from UART floating or starting up),
    // Else print a very brief low-CPU-cost help message and give up as efficiently and safely and quickly as possible.
    const char firstChar = buf[0];
    const bool plausibleCommand = ((firstChar >= '?') && (firstChar <= 'z'));
    if(plausibleCommand) { resetCLIActiveTimer(); }
    3f66:	80 91 d1 01 	lds	r24, 0x01D1
    3f6a:	8f 53       	subi	r24, 0x3F	; 63
    3f6c:	8c 33       	cpi	r24, 0x3C	; 60
    3f6e:	08 f0       	brcs	.+2      	; 0x3f72 <pollCLI(unsigned char)+0x150>
    3f70:	43 c0       	rjmp	.+134    	; 0x3ff8 <pollCLI(unsigned char)+0x1d6>
// Starts up with full value to allow easy set of time, etc, without specially activating CLI.
#define CLI_DEFAULT_TIMEOUT_M 2
static uint8_t CLITimeoutM = CLI_DEFAULT_TIMEOUT_M;

// Reset CLI active timer to the full whack before it goes inactive again (ie makes CLI active for a while).
static void resetCLIActiveTimer() { CLITimeoutM = CLI_DEFAULT_TIMEOUT_M; }
    3f72:	82 e0       	ldi	r24, 0x02	; 2
    3f74:	80 93 04 01 	sts	0x0104, r24
      if(neededWaking) { powerDownSerial(); }
      return;
      }

    // Null-terminate the received command line.
    buf[n] = '\0';
    3f78:	e1 2f       	mov	r30, r17
    3f7a:	f0 e0       	ldi	r31, 0x00	; 0
    3f7c:	ef 52       	subi	r30, 0x2F	; 47
    3f7e:	fe 4f       	sbci	r31, 0xFE	; 254
    3f80:	10 82       	st	Z, r1

    // strupr(buf); // Force to upper-case
#ifdef CLI_INTERACTIVE_ECHO
    Serial.println(); // ACK user's end-of-line.
    3f82:	81 e3       	ldi	r24, 0x31	; 49
    3f84:	93 e0       	ldi	r25, 0x03	; 3
    3f86:	0e 94 23 31 	call	0x6246	; 0x6246 <Print::println()>
    Serial.println(buf); // Echo the line received (asynchronously).
#endif

    // Process the input received, with action based on the first char...
    bool showStatus = true; // Default to showing status.
    switch(buf[0])
    3f8a:	80 91 d1 01 	lds	r24, 0x01D1
    3f8e:	80 35       	cpi	r24, 0x50	; 80
    3f90:	09 f4       	brne	.+2      	; 0x3f94 <pollCLI(unsigned char)+0x172>
    3f92:	48 c1       	rjmp	.+656    	; 0x4224 <pollCLI(unsigned char)+0x402>
    3f94:	81 35       	cpi	r24, 0x51	; 81
    3f96:	bc f4       	brge	.+46     	; 0x3fc6 <pollCLI(unsigned char)+0x1a4>
    3f98:	86 34       	cpi	r24, 0x46	; 70
    3f9a:	09 f4       	brne	.+2      	; 0x3f9e <pollCLI(unsigned char)+0x17c>
    3f9c:	da c0       	rjmp	.+436    	; 0x4152 <pollCLI(unsigned char)+0x330>
    3f9e:	87 34       	cpi	r24, 0x47	; 71
    3fa0:	4c f4       	brge	.+18     	; 0x3fb4 <pollCLI(unsigned char)+0x192>
    3fa2:	84 34       	cpi	r24, 0x44	; 68
    3fa4:	09 f4       	brne	.+2      	; 0x3fa8 <pollCLI(unsigned char)+0x186>
    3fa6:	6c c0       	rjmp	.+216    	; 0x4080 <pollCLI(unsigned char)+0x25e>
    3fa8:	85 34       	cpi	r24, 0x45	; 69
    3faa:	0c f0       	brlt	.+2      	; 0x3fae <pollCLI(unsigned char)+0x18c>
    3fac:	42 c0       	rjmp	.+132    	; 0x4032 <pollCLI(unsigned char)+0x210>
    3fae:	83 34       	cpi	r24, 0x43	; 67
    3fb0:	41 f5       	brne	.+80     	; 0x4002 <pollCLI(unsigned char)+0x1e0>
    3fb2:	2b c0       	rjmp	.+86     	; 0x400a <pollCLI(unsigned char)+0x1e8>
    3fb4:	8c 34       	cpi	r24, 0x4C	; 76
    3fb6:	09 f4       	brne	.+2      	; 0x3fba <pollCLI(unsigned char)+0x198>
    3fb8:	0d c1       	rjmp	.+538    	; 0x41d4 <pollCLI(unsigned char)+0x3b2>
    3fba:	8f 34       	cpi	r24, 0x4F	; 79
    3fbc:	09 f4       	brne	.+2      	; 0x3fc0 <pollCLI(unsigned char)+0x19e>
    3fbe:	1e c1       	rjmp	.+572    	; 0x41fc <pollCLI(unsigned char)+0x3da>
    3fc0:	88 34       	cpi	r24, 0x48	; 72
    3fc2:	f9 f4       	brne	.+62     	; 0x4002 <pollCLI(unsigned char)+0x1e0>
    3fc4:	cb c0       	rjmp	.+406    	; 0x415c <pollCLI(unsigned char)+0x33a>
    3fc6:	84 35       	cpi	r24, 0x54	; 84
    3fc8:	09 f4       	brne	.+2      	; 0x3fcc <pollCLI(unsigned char)+0x1aa>
    3fca:	cf c1       	rjmp	.+926    	; 0x436a <pollCLI(unsigned char)+0x548>
    3fcc:	85 35       	cpi	r24, 0x55	; 85
    3fce:	34 f4       	brge	.+12     	; 0x3fdc <pollCLI(unsigned char)+0x1ba>
    3fd0:	82 35       	cpi	r24, 0x52	; 82
    3fd2:	91 f1       	breq	.+100    	; 0x4038 <pollCLI(unsigned char)+0x216>
    3fd4:	83 35       	cpi	r24, 0x53	; 83
    3fd6:	0c f0       	brlt	.+2      	; 0x3fda <pollCLI(unsigned char)+0x1b8>
    3fd8:	6f c1       	rjmp	.+734    	; 0x42b8 <pollCLI(unsigned char)+0x496>
    3fda:	67 c1       	rjmp	.+718    	; 0x42aa <pollCLI(unsigned char)+0x488>
    3fdc:	87 35       	cpi	r24, 0x57	; 87
    3fde:	09 f4       	brne	.+2      	; 0x3fe2 <pollCLI(unsigned char)+0x1c0>
    3fe0:	f5 c1       	rjmp	.+1002   	; 0x43cc <pollCLI(unsigned char)+0x5aa>
    3fe2:	88 35       	cpi	r24, 0x58	; 88
    3fe4:	1c f4       	brge	.+6      	; 0x3fec <pollCLI(unsigned char)+0x1ca>
    3fe6:	86 35       	cpi	r24, 0x56	; 86
    3fe8:	61 f4       	brne	.+24     	; 0x4002 <pollCLI(unsigned char)+0x1e0>
    3fea:	ed c1       	rjmp	.+986    	; 0x43c6 <pollCLI(unsigned char)+0x5a4>
    3fec:	88 35       	cpi	r24, 0x58	; 88
    3fee:	09 f4       	brne	.+2      	; 0x3ff2 <pollCLI(unsigned char)+0x1d0>
    3ff0:	f5 c1       	rjmp	.+1002   	; 0x43dc <pollCLI(unsigned char)+0x5ba>
    3ff2:	8a 35       	cpi	r24, 0x5A	; 90
    3ff4:	31 f4       	brne	.+12     	; 0x4002 <pollCLI(unsigned char)+0x1e0>
    3ff6:	09 c2       	rjmp	.+1042   	; 0x440a <pollCLI(unsigned char)+0x5e8>
    const char firstChar = buf[0];
    const bool plausibleCommand = ((firstChar >= '?') && (firstChar <= 'z'));
    if(plausibleCommand) { resetCLIActiveTimer(); }
    else
      {
      Serial.println(F("? for CLI help"));
    3ff8:	81 e3       	ldi	r24, 0x31	; 49
    3ffa:	93 e0       	ldi	r25, 0x03	; 3
    3ffc:	65 ef       	ldi	r22, 0xF5	; 245
    3ffe:	71 e0       	ldi	r23, 0x01	; 1
    4000:	33 c2       	rjmp	.+1126   	; 0x4468 <pollCLI(unsigned char)+0x646>
    bool showStatus = true; // Default to showing status.
    switch(buf[0])
      {
      // Explicit request for help, or unrecognised first character.
      // Avoid showing status as may already be rather a lot of output.
      default: case '?': { dumpCLIUsage(maxSCT); showStatus = false; break; }
    4002:	8d 2d       	mov	r24, r13
    4004:	0e 94 6f 1c 	call	0x38de	; 0x38de <dumpCLIUsage(unsigned char)>
    4008:	2b c2       	rjmp	.+1110   	; 0x4460 <pollCLI(unsigned char)+0x63e>
      case 'C':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 3 character sequence makes sense and is safe to tokenise, eg "C 0".
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    400a:	13 30       	cpi	r17, 0x03	; 3
    400c:	08 f4       	brcc	.+2      	; 0x4010 <pollCLI(unsigned char)+0x1ee>
    400e:	42 c2       	rjmp	.+1156   	; 0x4494 <pollCLI(unsigned char)+0x672>
    4010:	83 ed       	ldi	r24, 0xD3	; 211
    4012:	91 e0       	ldi	r25, 0x01	; 1
    4014:	60 e0       	ldi	r22, 0x00	; 0
    4016:	71 e0       	ldi	r23, 0x01	; 1
    4018:	ae 01       	movw	r20, r28
    401a:	4f 5f       	subi	r20, 0xFF	; 255
    401c:	5f 4f       	sbci	r21, 0xFF	; 255
    401e:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <strtok_r>
    4022:	00 97       	sbiw	r24, 0x00	; 0
    4024:	09 f4       	brne	.+2      	; 0x4028 <pollCLI(unsigned char)+0x206>
    4026:	36 c2       	rjmp	.+1132   	; 0x4494 <pollCLI(unsigned char)+0x672>
          {
          const uint8_t m = (uint8_t) atoi(tok1);
    4028:	0e 94 a5 03 	call	0x74a	; 0x74a <atoi>
          setMinBoilerOnMinutes(m);
    402c:	0e 94 33 05 	call	0xa66	; 0xa66 <setMinBoilerOnMinutes(unsigned char)>
    4030:	31 c2       	rjmp	.+1122   	; 0x4494 <pollCLI(unsigned char)+0x672>
        break;
        }
#endif

      // Exit/deactivate CLI immediately.
      case 'E': { CLITimeoutM = 0; break; }
    4032:	10 92 04 01 	sts	0x0104, r1
    4036:	2e c2       	rjmp	.+1116   	; 0x4494 <pollCLI(unsigned char)+0x672>
      case 'R':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 3 character sequence makes sense and is safe to tokenise, eg "R 0".
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    4038:	13 30       	cpi	r17, 0x03	; 3
    403a:	08 f4       	brcc	.+2      	; 0x403e <pollCLI(unsigned char)+0x21c>
    403c:	2b c2       	rjmp	.+1110   	; 0x4494 <pollCLI(unsigned char)+0x672>
    403e:	83 ed       	ldi	r24, 0xD3	; 211
    4040:	91 e0       	ldi	r25, 0x01	; 1
    4042:	60 e0       	ldi	r22, 0x00	; 0
    4044:	71 e0       	ldi	r23, 0x01	; 1
    4046:	ae 01       	movw	r20, r28
    4048:	4f 5f       	subi	r20, 0xFF	; 255
    404a:	5f 4f       	sbci	r21, 0xFF	; 255
    404c:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <strtok_r>
    4050:	00 97       	sbiw	r24, 0x00	; 0
    4052:	09 f4       	brne	.+2      	; 0x4056 <pollCLI(unsigned char)+0x234>
    4054:	1f c2       	rjmp	.+1086   	; 0x4494 <pollCLI(unsigned char)+0x672>
          {
          const uint8_t setN = (uint8_t) atoi(tok1);
    4056:	0e 94 a5 03 	call	0x74a	; 0x74a <atoi>
    405a:	08 2f       	mov	r16, r24
    405c:	10 e0       	ldi	r17, 0x00	; 0
          for(uint8_t hh = 0; hh < 24; ++hh)
            { Serial.print(getByHourStat(hh, setN)); Serial_print_space(); }
    405e:	81 2f       	mov	r24, r17
    4060:	60 2f       	mov	r22, r16
    4062:	0e 94 96 04 	call	0x92c	; 0x92c <getByHourStat(unsigned char, unsigned char)>
    4066:	68 2f       	mov	r22, r24
    4068:	81 e3       	ldi	r24, 0x31	; 49
    406a:	93 e0       	ldi	r25, 0x03	; 3
    406c:	4a e0       	ldi	r20, 0x0A	; 10
    406e:	50 e0       	ldi	r21, 0x00	; 0
    4070:	0e 94 f7 31 	call	0x63ee	; 0x63ee <Print::print(unsigned char, int)>
    4074:	0e 94 12 1c 	call	0x3824	; 0x3824 <Serial_print_space()>
        char *tok1;
        // Minimum 3 character sequence makes sense and is safe to tokenise, eg "R 0".
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
          {
          const uint8_t setN = (uint8_t) atoi(tok1);
          for(uint8_t hh = 0; hh < 24; ++hh)
    4078:	1f 5f       	subi	r17, 0xFF	; 255
    407a:	18 31       	cpi	r17, 0x18	; 24
    407c:	81 f7       	brne	.-32     	; 0x405e <pollCLI(unsigned char)+0x23c>
    407e:	70 c1       	rjmp	.+736    	; 0x4360 <pollCLI(unsigned char)+0x53e>
      case 'D':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 3 character sequence makes sense and is safe to tokenise, eg "D 0".
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    4080:	13 30       	cpi	r17, 0x03	; 3
    4082:	08 f4       	brcc	.+2      	; 0x4086 <pollCLI(unsigned char)+0x264>
    4084:	ed c1       	rjmp	.+986    	; 0x4460 <pollCLI(unsigned char)+0x63e>
    4086:	83 ed       	ldi	r24, 0xD3	; 211
    4088:	91 e0       	ldi	r25, 0x01	; 1
    408a:	60 e0       	ldi	r22, 0x00	; 0
    408c:	71 e0       	ldi	r23, 0x01	; 1
    408e:	ae 01       	movw	r20, r28
    4090:	4f 5f       	subi	r20, 0xFF	; 255
    4092:	5f 4f       	sbci	r21, 0xFF	; 255
    4094:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <strtok_r>
    4098:	00 97       	sbiw	r24, 0x00	; 0
    409a:	09 f4       	brne	.+2      	; 0x409e <pollCLI(unsigned char)+0x27c>
    409c:	e1 c1       	rjmp	.+962    	; 0x4460 <pollCLI(unsigned char)+0x63e>
          {
          const uint8_t setN = (uint8_t) atoi(tok1);
    409e:	0e 94 a5 03 	call	0x74a	; 0x74a <atoi>
    40a2:	08 2f       	mov	r16, r24
          const uint8_t thisHH = getHoursLT();
    40a4:	0e 94 74 18 	call	0x30e8	; 0x30e8 <getHoursLT()>
          const uint8_t lastHH = (thisHH > 0) ? (thisHH-1) : 23;
    40a8:	88 23       	and	r24, r24
    40aa:	19 f4       	brne	.+6      	; 0x40b2 <pollCLI(unsigned char)+0x290>
    40ac:	f7 e1       	ldi	r31, 0x17	; 23
    40ae:	ff 2e       	mov	r15, r31
    40b0:	02 c0       	rjmp	.+4      	; 0x40b6 <pollCLI(unsigned char)+0x294>
    40b2:	f8 2e       	mov	r15, r24
    40b4:	fa 94       	dec	r15
    40b6:	10 e0       	ldi	r17, 0x00	; 0
          for(uint8_t hh = 0; hh < 24; ++hh)
            {
            const uint8_t statRaw = getByHourStat(hh, setN);
    40b8:	81 2f       	mov	r24, r17
    40ba:	60 2f       	mov	r22, r16
    40bc:	0e 94 96 04 	call	0x92c	; 0x92c <getByHourStat(unsigned char, unsigned char)>
    40c0:	68 2f       	mov	r22, r24
            // For unset stat show '-'...
            if(STATS_UNSET_BYTE == statRaw) { Serial.print('-'); }
    40c2:	8f 3f       	cpi	r24, 0xFF	; 255
    40c4:	21 f4       	brne	.+8      	; 0x40ce <pollCLI(unsigned char)+0x2ac>
    40c6:	81 e3       	ldi	r24, 0x31	; 49
    40c8:	93 e0       	ldi	r25, 0x03	; 3
    40ca:	6d e2       	ldi	r22, 0x2D	; 45
    40cc:	1b c0       	rjmp	.+54     	; 0x4104 <pollCLI(unsigned char)+0x2e2>
            // ...else print more human-friendly version of stat.
            else switch(setN) // Relationship between stats set and type should probably be centralised to avoid getting out of sync with usage.
    40ce:	04 30       	cpi	r16, 0x04	; 4
    40d0:	18 f4       	brcc	.+6      	; 0x40d8 <pollCLI(unsigned char)+0x2b6>
    40d2:	02 30       	cpi	r16, 0x02	; 2
    40d4:	d0 f4       	brcc	.+52     	; 0x410a <pollCLI(unsigned char)+0x2e8>
    40d6:	03 c0       	rjmp	.+6      	; 0x40de <pollCLI(unsigned char)+0x2bc>
    40d8:	04 30       	cpi	r16, 0x04	; 4
    40da:	49 f5       	brne	.+82     	; 0x412e <pollCLI(unsigned char)+0x30c>
    40dc:	22 c0       	rjmp	.+68     	; 0x4122 <pollCLI(unsigned char)+0x300>
              {
              case 0: case 1: { Serial.print((expandTempC16(statRaw)+8) >> 4); Serial.print('C'); break; } // Uncompanded temperature, rounded.
    40de:	0e 94 d5 04 	call	0x9aa	; 0x9aa <expandTempC16(unsigned char)>
    40e2:	bc 01       	movw	r22, r24
    40e4:	68 5f       	subi	r22, 0xF8	; 248
    40e6:	7f 4f       	sbci	r23, 0xFF	; 255
    40e8:	e4 e0       	ldi	r30, 0x04	; 4
    40ea:	75 95       	asr	r23
    40ec:	67 95       	ror	r22
    40ee:	ea 95       	dec	r30
    40f0:	e1 f7       	brne	.-8      	; 0x40ea <pollCLI(unsigned char)+0x2c8>
    40f2:	81 e3       	ldi	r24, 0x31	; 49
    40f4:	93 e0       	ldi	r25, 0x03	; 3
    40f6:	4a e0       	ldi	r20, 0x0A	; 10
    40f8:	50 e0       	ldi	r21, 0x00	; 0
    40fa:	0e 94 49 32 	call	0x6492	; 0x6492 <Print::print(int, int)>
    40fe:	81 e3       	ldi	r24, 0x31	; 49
    4100:	93 e0       	ldi	r25, 0x03	; 3
    4102:	63 e4       	ldi	r22, 0x43	; 67
    4104:	0e 94 1b 31 	call	0x6236	; 0x6236 <Print::print(char)>
    4108:	12 c0       	rjmp	.+36     	; 0x412e <pollCLI(unsigned char)+0x30c>
              case 2: case 3: { Serial.print(((int)statRaw) << 2); break; } // Uncompressed ambient light level.
    410a:	70 e0       	ldi	r23, 0x00	; 0
    410c:	66 0f       	add	r22, r22
    410e:	77 1f       	adc	r23, r23
    4110:	66 0f       	add	r22, r22
    4112:	77 1f       	adc	r23, r23
    4114:	81 e3       	ldi	r24, 0x31	; 49
    4116:	93 e0       	ldi	r25, 0x03	; 3
    4118:	4a e0       	ldi	r20, 0x0A	; 10
    411a:	50 e0       	ldi	r21, 0x00	; 0
    411c:	0e 94 49 32 	call	0x6492	; 0x6492 <Print::print(int, int)>
    4120:	06 c0       	rjmp	.+12     	; 0x412e <pollCLI(unsigned char)+0x30c>
              case 4: { Serial.print(statRaw, HEX); break; } // Warm mode usage over week.
    4122:	81 e3       	ldi	r24, 0x31	; 49
    4124:	93 e0       	ldi	r25, 0x03	; 3
    4126:	40 e1       	ldi	r20, 0x10	; 16
    4128:	50 e0       	ldi	r21, 0x00	; 0
    412a:	0e 94 f7 31 	call	0x63ee	; 0x63ee <Print::print(unsigned char, int)>
              }
            if(hh == lastHH) { Serial.print('<'); } // Highlight most recent stat in this set.
    412e:	1f 15       	cp	r17, r15
    4130:	29 f4       	brne	.+10     	; 0x413c <pollCLI(unsigned char)+0x31a>
    4132:	81 e3       	ldi	r24, 0x31	; 49
    4134:	93 e0       	ldi	r25, 0x03	; 3
    4136:	6c e3       	ldi	r22, 0x3C	; 60
    4138:	0e 94 1b 31 	call	0x6236	; 0x6236 <Print::print(char)>
            Serial_print_space();
    413c:	0e 94 12 1c 	call	0x3824	; 0x3824 <Serial_print_space()>
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
          {
          const uint8_t setN = (uint8_t) atoi(tok1);
          const uint8_t thisHH = getHoursLT();
          const uint8_t lastHH = (thisHH > 0) ? (thisHH-1) : 23;
          for(uint8_t hh = 0; hh < 24; ++hh)
    4140:	1f 5f       	subi	r17, 0xFF	; 255
    4142:	18 31       	cpi	r17, 0x18	; 24
    4144:	09 f0       	breq	.+2      	; 0x4148 <pollCLI(unsigned char)+0x326>
    4146:	b8 cf       	rjmp	.-144    	; 0x40b8 <pollCLI(unsigned char)+0x296>
              case 4: { Serial.print(statRaw, HEX); break; } // Warm mode usage over week.
              }
            if(hh == lastHH) { Serial.print('<'); } // Highlight most recent stat in this set.
            Serial_print_space();
            }
          Serial.println();
    4148:	81 e3       	ldi	r24, 0x31	; 49
    414a:	93 e0       	ldi	r25, 0x03	; 3
    414c:	0e 94 23 31 	call	0x6246	; 0x6246 <Print::println()>
    4150:	87 c1       	rjmp	.+782    	; 0x4460 <pollCLI(unsigned char)+0x63e>

// Has the effect of forcing the warm mode to the specified state immediately.
// If forcing to FROST mode then any pending BAKE time is cancelled.
static void setWarmMode(const bool warm)
  {
  isWarmMode = warm;
    4152:	10 92 dc 01 	sts	0x01DC, r1
  isWarmModeDebounced = warm;
    4156:	10 92 db 01 	sts	0x01DB, r1
    415a:	3d c1       	rjmp	.+634    	; 0x43d6 <pollCLI(unsigned char)+0x5b4>
      case 'H':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 5 character sequence makes sense and is safe to tokenise, eg "H 1 2".
        if((n >= 5) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    415c:	15 30       	cpi	r17, 0x05	; 5
    415e:	08 f4       	brcc	.+2      	; 0x4162 <pollCLI(unsigned char)+0x340>
    4160:	91 c1       	rjmp	.+802    	; 0x4484 <pollCLI(unsigned char)+0x662>
    4162:	83 ed       	ldi	r24, 0xD3	; 211
    4164:	91 e0       	ldi	r25, 0x01	; 1
    4166:	60 e0       	ldi	r22, 0x00	; 0
    4168:	71 e0       	ldi	r23, 0x01	; 1
    416a:	ae 01       	movw	r20, r28
    416c:	4f 5f       	subi	r20, 0xFF	; 255
    416e:	5f 4f       	sbci	r21, 0xFF	; 255
    4170:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <strtok_r>
    4174:	7c 01       	movw	r14, r24
    4176:	00 97       	sbiw	r24, 0x00	; 0
    4178:	09 f4       	brne	.+2      	; 0x417c <pollCLI(unsigned char)+0x35a>
    417a:	84 c1       	rjmp	.+776    	; 0x4484 <pollCLI(unsigned char)+0x662>
          {
          char *tok2 = strtok_r(NULL, " ", &last);
    417c:	80 e0       	ldi	r24, 0x00	; 0
    417e:	90 e0       	ldi	r25, 0x00	; 0
    4180:	60 e0       	ldi	r22, 0x00	; 0
    4182:	71 e0       	ldi	r23, 0x01	; 1
    4184:	ae 01       	movw	r20, r28
    4186:	4f 5f       	subi	r20, 0xFF	; 255
    4188:	5f 4f       	sbci	r21, 0xFF	; 255
    418a:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <strtok_r>
    418e:	8c 01       	movw	r16, r24
          if(NULL != tok2)
    4190:	00 97       	sbiw	r24, 0x00	; 0
    4192:	09 f4       	brne	.+2      	; 0x4196 <pollCLI(unsigned char)+0x374>
    4194:	7f c1       	rjmp	.+766    	; 0x4494 <pollCLI(unsigned char)+0x672>
            {
            const int hc1 = atoi(tok1);
    4196:	c7 01       	movw	r24, r14
    4198:	0e 94 a5 03 	call	0x74a	; 0x74a <atoi>
    419c:	7c 01       	movw	r14, r24
            const int hc2 = atoi(tok2);
    419e:	c8 01       	movw	r24, r16
    41a0:	0e 94 a5 03 	call	0x74a	; 0x74a <atoi>
    41a4:	8c 01       	movw	r16, r24
            if((hc1 < 0) || (hc1 > 99) || (hc2 < 0) || (hc2 > 99)) { InvalidIgnored(); }
    41a6:	94 e6       	ldi	r25, 0x64	; 100
    41a8:	e9 16       	cp	r14, r25
    41aa:	f1 04       	cpc	r15, r1
    41ac:	08 f0       	brcs	.+2      	; 0x41b0 <pollCLI(unsigned char)+0x38e>
    41ae:	08 c1       	rjmp	.+528    	; 0x43c0 <pollCLI(unsigned char)+0x59e>
    41b0:	17 fd       	sbrc	r17, 7
    41b2:	06 c1       	rjmp	.+524    	; 0x43c0 <pollCLI(unsigned char)+0x59e>
    41b4:	04 36       	cpi	r16, 0x64	; 100
    41b6:	11 05       	cpc	r17, r1
    41b8:	0c f0       	brlt	.+2      	; 0x41bc <pollCLI(unsigned char)+0x39a>
    41ba:	02 c1       	rjmp	.+516    	; 0x43c0 <pollCLI(unsigned char)+0x59e>
            else
              {
              FHT8VSetHC1(hc1);
    41bc:	8e 2d       	mov	r24, r14
    41be:	0e 94 07 0c 	call	0x180e	; 0x180e <FHT8VSetHC1(unsigned char)>
              FHT8VSetHC2(hc2);
    41c2:	80 2f       	mov	r24, r16
    41c4:	0e 94 01 0c 	call	0x1802	; 0x1802 <FHT8VSetHC2(unsigned char)>
    41c8:	02 c0       	rjmp	.+4      	; 0x41ce <pollCLI(unsigned char)+0x3ac>
              }
            }
          }
        else if(n < 2) // Just 'H', possibly with trailing whitespace.
          {
          FHT8VClearHC();
    41ca:	0e 94 0d 0c 	call	0x181a	; 0x181a <FHT8VClearHC()>
          FHT8VSyncAndTXReset(); // Force into unsynchronized state.
    41ce:	0e 94 0d 09 	call	0x121a	; 0x121a <FHT8VSyncAndTXReset()>
    41d2:	60 c1       	rjmp	.+704    	; 0x4494 <pollCLI(unsigned char)+0x672>
        int s = 0;
//#if MAX_SIMPLE_SCHEDULES > 1
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 3 character sequence makes sense and is safe to tokenise, eg "L 0".
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    41d4:	13 30       	cpi	r17, 0x03	; 3
    41d6:	08 f4       	brcc	.+2      	; 0x41da <pollCLI(unsigned char)+0x3b8>
    41d8:	58 c1       	rjmp	.+688    	; 0x448a <pollCLI(unsigned char)+0x668>
    41da:	83 ed       	ldi	r24, 0xD3	; 211
    41dc:	91 e0       	ldi	r25, 0x01	; 1
    41de:	60 e0       	ldi	r22, 0x00	; 0
    41e0:	71 e0       	ldi	r23, 0x01	; 1
    41e2:	ae 01       	movw	r20, r28
    41e4:	4f 5f       	subi	r20, 0xFF	; 255
    41e6:	5f 4f       	sbci	r21, 0xFF	; 255
    41e8:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <strtok_r>
    41ec:	00 97       	sbiw	r24, 0x00	; 0
    41ee:	09 f4       	brne	.+2      	; 0x41f2 <pollCLI(unsigned char)+0x3d0>
    41f0:	4c c1       	rjmp	.+664    	; 0x448a <pollCLI(unsigned char)+0x668>
          {
          s = atoi(tok1);
    41f2:	0e 94 a5 03 	call	0x74a	; 0x74a <atoi>
          }
//#endif
        handleLEARN((uint8_t) s); break;
    41f6:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <handleLEARN(unsigned char)>
    41fa:	4c c1       	rjmp	.+664    	; 0x4494 <pollCLI(unsigned char)+0x672>
      case 'O':
        {
        uint8_t minPcOpen = 0; // Will clear override and use default threshold.
        char *last; // Used by strtok_r().
        char *tok1;
        if((n > 1) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    41fc:	12 30       	cpi	r17, 0x02	; 2
    41fe:	08 f4       	brcc	.+2      	; 0x4202 <pollCLI(unsigned char)+0x3e0>
    4200:	47 c1       	rjmp	.+654    	; 0x4490 <pollCLI(unsigned char)+0x66e>
    4202:	83 ed       	ldi	r24, 0xD3	; 211
    4204:	91 e0       	ldi	r25, 0x01	; 1
    4206:	60 e0       	ldi	r22, 0x00	; 0
    4208:	71 e0       	ldi	r23, 0x01	; 1
    420a:	ae 01       	movw	r20, r28
    420c:	4f 5f       	subi	r20, 0xFF	; 255
    420e:	5f 4f       	sbci	r21, 0xFF	; 255
    4210:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <strtok_r>
    4214:	00 97       	sbiw	r24, 0x00	; 0
    4216:	09 f4       	brne	.+2      	; 0x421a <pollCLI(unsigned char)+0x3f8>
    4218:	3b c1       	rjmp	.+630    	; 0x4490 <pollCLI(unsigned char)+0x66e>
          { minPcOpen = (uint8_t) atoi(tok1); }
    421a:	0e 94 a5 03 	call	0x74a	; 0x74a <atoi>
        setMinValvePcReallyOpen(minPcOpen);
    421e:	0e 94 23 05 	call	0xa46	; 0xa46 <setMinValvePcReallyOpen(unsigned char)>
    4222:	38 c1       	rjmp	.+624    	; 0x4494 <pollCLI(unsigned char)+0x672>
      case 'P':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 5 character sequence makes sense and is safe to tokenise, eg "P 1 2".
        if((n >= 5) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    4224:	15 30       	cpi	r17, 0x05	; 5
    4226:	08 f4       	brcc	.+2      	; 0x422a <pollCLI(unsigned char)+0x408>
    4228:	35 c1       	rjmp	.+618    	; 0x4494 <pollCLI(unsigned char)+0x672>
    422a:	83 ed       	ldi	r24, 0xD3	; 211
    422c:	91 e0       	ldi	r25, 0x01	; 1
    422e:	60 e0       	ldi	r22, 0x00	; 0
    4230:	71 e0       	ldi	r23, 0x01	; 1
    4232:	6e 01       	movw	r12, r28
    4234:	08 94       	sec
    4236:	c1 1c       	adc	r12, r1
    4238:	d1 1c       	adc	r13, r1
    423a:	a6 01       	movw	r20, r12
    423c:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <strtok_r>
    4240:	7c 01       	movw	r14, r24
    4242:	00 97       	sbiw	r24, 0x00	; 0
    4244:	09 f4       	brne	.+2      	; 0x4248 <pollCLI(unsigned char)+0x426>
    4246:	26 c1       	rjmp	.+588    	; 0x4494 <pollCLI(unsigned char)+0x672>
          {
          char *tok2 = strtok_r(NULL, " ", &last);
    4248:	80 e0       	ldi	r24, 0x00	; 0
    424a:	90 e0       	ldi	r25, 0x00	; 0
    424c:	60 e0       	ldi	r22, 0x00	; 0
    424e:	71 e0       	ldi	r23, 0x01	; 1
    4250:	a6 01       	movw	r20, r12
    4252:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <strtok_r>
    4256:	8c 01       	movw	r16, r24
          if(NULL != tok2)
    4258:	00 97       	sbiw	r24, 0x00	; 0
    425a:	09 f4       	brne	.+2      	; 0x425e <pollCLI(unsigned char)+0x43c>
    425c:	1b c1       	rjmp	.+566    	; 0x4494 <pollCLI(unsigned char)+0x672>
            {
            const int hh = atoi(tok1);
    425e:	c7 01       	movw	r24, r14
    4260:	0e 94 a5 03 	call	0x74a	; 0x74a <atoi>
    4264:	7c 01       	movw	r14, r24
            const int mm = atoi(tok2);
    4266:	c8 01       	movw	r24, r16
    4268:	0e 94 a5 03 	call	0x74a	; 0x74a <atoi>
    426c:	8c 01       	movw	r16, r24
            int s = 0;
//#if MAX_SIMPLE_SCHEDULES > 1         
            char *tok3 = strtok_r(NULL, " ", &last);
    426e:	80 e0       	ldi	r24, 0x00	; 0
    4270:	90 e0       	ldi	r25, 0x00	; 0
    4272:	60 e0       	ldi	r22, 0x00	; 0
    4274:	71 e0       	ldi	r23, 0x01	; 1
    4276:	a6 01       	movw	r20, r12
    4278:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <strtok_r>
            if(NULL != tok3)
    427c:	00 97       	sbiw	r24, 0x00	; 0
    427e:	19 f4       	brne	.+6      	; 0x4286 <pollCLI(unsigned char)+0x464>
    4280:	60 e0       	ldi	r22, 0x00	; 0
    4282:	70 e0       	ldi	r23, 0x00	; 0
    4284:	03 c0       	rjmp	.+6      	; 0x428c <pollCLI(unsigned char)+0x46a>
              {
              s = atoi(tok3);
    4286:	0e 94 a5 03 	call	0x74a	; 0x74a <atoi>
    428a:	bc 01       	movw	r22, r24
              }
//#endif
            // Does not fully validate user inputs (eg for -ve values), but cannot set impossible values.
            if(!setSimpleSchedule((uint_least16_t) ((60 * hh) + mm), (uint8_t)s)) { InvalidIgnored(); }
    428c:	8c e3       	ldi	r24, 0x3C	; 60
    428e:	90 e0       	ldi	r25, 0x00	; 0
    4290:	9c 01       	movw	r18, r24
    4292:	e2 9e       	mul	r14, r18
    4294:	c0 01       	movw	r24, r0
    4296:	e3 9e       	mul	r14, r19
    4298:	90 0d       	add	r25, r0
    429a:	f2 9e       	mul	r15, r18
    429c:	90 0d       	add	r25, r0
    429e:	11 24       	eor	r1, r1
    42a0:	80 0f       	add	r24, r16
    42a2:	91 1f       	adc	r25, r17
    42a4:	0e 94 85 19 	call	0x330a	; 0x330a <setSimpleSchedule(unsigned int, unsigned char)>
    42a8:	88 c0       	rjmp	.+272    	; 0x43ba <pollCLI(unsigned char)+0x598>
// TODO: this is not fully 'debounced', ie could flip between WARM/BAKE with button held down.
bool inBakeModeDebounced() { return(isWarmModeDebounced && (0 != bakeCountdownM)); }
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
// Start/restart 'bake' mode and timeout.
void startBake() { isWarmMode = true; bakeCountdownM = BAKE_MAX_M; }
    42aa:	81 e0       	ldi	r24, 0x01	; 1
    42ac:	80 93 dc 01 	sts	0x01DC, r24
    42b0:	8e e1       	ldi	r24, 0x1E	; 30
    42b2:	80 93 dd 01 	sts	0x01DD, r24
    42b6:	ee c0       	rjmp	.+476    	; 0x4494 <pollCLI(unsigned char)+0x672>
#endif

      // Status line and smart/scheduled warming prediction request.
      case 'S':
        {
        Serial.print(F("Resets: "));
    42b8:	81 e3       	ldi	r24, 0x31	; 49
    42ba:	93 e0       	ldi	r25, 0x03	; 3
    42bc:	6c ee       	ldi	r22, 0xEC	; 236
    42be:	71 e0       	ldi	r23, 0x01	; 1
    42c0:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <Print::print(__FlashStringHelper const*)>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    42c4:	f9 99       	sbic	0x1f, 1	; 31
    42c6:	fe cf       	rjmp	.-4      	; 0x42c4 <pollCLI(unsigned char)+0x4a2>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    42c8:	86 e0       	ldi	r24, 0x06	; 6
    42ca:	90 e0       	ldi	r25, 0x00	; 0
    42cc:	92 bd       	out	0x22, r25	; 34
    42ce:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    42d0:	f8 9a       	sbi	0x1f, 0	; 31
    42d2:	60 b5       	in	r22, 0x20	; 32
        const uint8_t resetCount = eeprom_read_byte((uint8_t *)EE_START_RESET_COUNT);
        Serial.print(resetCount);
    42d4:	81 e3       	ldi	r24, 0x31	; 49
    42d6:	93 e0       	ldi	r25, 0x03	; 3
    42d8:	4a e0       	ldi	r20, 0x0A	; 10
    42da:	50 e0       	ldi	r21, 0x00	; 0
    42dc:	0e 94 f7 31 	call	0x63ee	; 0x63ee <Print::print(unsigned char, int)>
        Serial.println();
    42e0:	81 e3       	ldi	r24, 0x31	; 49
    42e2:	93 e0       	ldi	r25, 0x03	; 3
    42e4:	0e 94 23 31 	call	0x6246	; 0x6246 <Print::println()>
        Serial.print(F("Overruns: "));
    42e8:	81 e3       	ldi	r24, 0x31	; 49
    42ea:	93 e0       	ldi	r25, 0x03	; 3
    42ec:	61 ee       	ldi	r22, 0xE1	; 225
    42ee:	71 e0       	ldi	r23, 0x01	; 1
    42f0:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <Print::print(__FlashStringHelper const*)>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    42f4:	f9 99       	sbic	0x1f, 1	; 31
    42f6:	fe cf       	rjmp	.-4      	; 0x42f4 <pollCLI(unsigned char)+0x4d2>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    42f8:	89 e1       	ldi	r24, 0x19	; 25
    42fa:	90 e0       	ldi	r25, 0x00	; 0
    42fc:	92 bd       	out	0x22, r25	; 34
    42fe:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    4300:	f8 9a       	sbi	0x1f, 0	; 31
    4302:	60 b5       	in	r22, 0x20	; 32
        const uint8_t overrunCount = (~eeprom_read_byte((uint8_t *)EE_START_OVERRUN_COUNTER)) & 0xff;
        Serial.print(overrunCount);
    4304:	60 95       	com	r22
    4306:	81 e3       	ldi	r24, 0x31	; 49
    4308:	93 e0       	ldi	r25, 0x03	; 3
    430a:	4a e0       	ldi	r20, 0x0A	; 10
    430c:	50 e0       	ldi	r21, 0x00	; 0
    430e:	0e 94 f7 31 	call	0x63ee	; 0x63ee <Print::print(unsigned char, int)>
        Serial.println();
    4312:	81 e3       	ldi	r24, 0x31	; 49
    4314:	93 e0       	ldi	r25, 0x03	; 3
    4316:	0e 94 23 31 	call	0x6246	; 0x6246 <Print::println()>
        uint_least8_t hh = getHoursLT();
    431a:	0e 94 74 18 	call	0x30e8	; 0x30e8 <getHoursLT()>
    431e:	f8 2e       	mov	r15, r24
        Serial.print(F("Smart warming: "));
    4320:	81 e3       	ldi	r24, 0x31	; 49
    4322:	93 e0       	ldi	r25, 0x03	; 3
    4324:	61 ed       	ldi	r22, 0xD1	; 209
    4326:	71 e0       	ldi	r23, 0x01	; 1
    4328:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <Print::print(__FlashStringHelper const*)>
    432c:	08 e1       	ldi	r16, 0x18	; 24
    432e:	10 e0       	ldi	r17, 0x00	; 0
    4330:	11 c0       	rjmp	.+34     	; 0x4354 <pollCLI(unsigned char)+0x532>
        for(int i = 24; --i >= 0; )
          {
          Serial.print(shouldBeWarmedAtHour(hh) ? 'w' : 'f'); // TODO: show 'W' for scheduled WARM mode.
    4332:	8f 2d       	mov	r24, r15
    4334:	0e 94 64 05 	call	0xac8	; 0xac8 <shouldBeWarmedAtHour(unsigned char)>
    4338:	88 23       	and	r24, r24
    433a:	11 f4       	brne	.+4      	; 0x4340 <pollCLI(unsigned char)+0x51e>
    433c:	66 e6       	ldi	r22, 0x66	; 102
    433e:	01 c0       	rjmp	.+2      	; 0x4342 <pollCLI(unsigned char)+0x520>
    4340:	67 e7       	ldi	r22, 0x77	; 119
    4342:	81 e3       	ldi	r24, 0x31	; 49
    4344:	93 e0       	ldi	r25, 0x03	; 3
    4346:	0e 94 1b 31 	call	0x6236	; 0x6236 <Print::print(char)>
          if(++hh > 23) { hh = 0; }
    434a:	f3 94       	inc	r15
    434c:	37 e1       	ldi	r19, 0x17	; 23
    434e:	3f 15       	cp	r19, r15
    4350:	08 f4       	brcc	.+2      	; 0x4354 <pollCLI(unsigned char)+0x532>
    4352:	ff 24       	eor	r15, r15
        const uint8_t overrunCount = (~eeprom_read_byte((uint8_t *)EE_START_OVERRUN_COUNTER)) & 0xff;
        Serial.print(overrunCount);
        Serial.println();
        uint_least8_t hh = getHoursLT();
        Serial.print(F("Smart warming: "));
        for(int i = 24; --i >= 0; )
    4354:	01 50       	subi	r16, 0x01	; 1
    4356:	10 40       	sbci	r17, 0x00	; 0
    4358:	8f ef       	ldi	r24, 0xFF	; 255
    435a:	0f 3f       	cpi	r16, 0xFF	; 255
    435c:	18 07       	cpc	r17, r24
    435e:	49 f7       	brne	.-46     	; 0x4332 <pollCLI(unsigned char)+0x510>
          {
          Serial.print(shouldBeWarmedAtHour(hh) ? 'w' : 'f'); // TODO: show 'W' for scheduled WARM mode.
          if(++hh > 23) { hh = 0; }
          }
        Serial.println();
    4360:	81 e3       	ldi	r24, 0x31	; 49
    4362:	93 e0       	ldi	r25, 0x03	; 3
    4364:	0e 94 23 31 	call	0x6246	; 0x6246 <Print::println()>
    4368:	95 c0       	rjmp	.+298    	; 0x4494 <pollCLI(unsigned char)+0x672>
      case 'T':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 5 character sequence makes sense and is safe to tokenise, eg "T 1 2".
        if((n >= 5) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    436a:	15 30       	cpi	r17, 0x05	; 5
    436c:	08 f4       	brcc	.+2      	; 0x4370 <pollCLI(unsigned char)+0x54e>
    436e:	92 c0       	rjmp	.+292    	; 0x4494 <pollCLI(unsigned char)+0x672>
    4370:	83 ed       	ldi	r24, 0xD3	; 211
    4372:	91 e0       	ldi	r25, 0x01	; 1
    4374:	60 e0       	ldi	r22, 0x00	; 0
    4376:	71 e0       	ldi	r23, 0x01	; 1
    4378:	7e 01       	movw	r14, r28
    437a:	08 94       	sec
    437c:	e1 1c       	adc	r14, r1
    437e:	f1 1c       	adc	r15, r1
    4380:	a7 01       	movw	r20, r14
    4382:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <strtok_r>
    4386:	8c 01       	movw	r16, r24
    4388:	00 97       	sbiw	r24, 0x00	; 0
    438a:	09 f4       	brne	.+2      	; 0x438e <pollCLI(unsigned char)+0x56c>
    438c:	83 c0       	rjmp	.+262    	; 0x4494 <pollCLI(unsigned char)+0x672>
          {
          char *tok2 = strtok_r(NULL, " ", &last);
    438e:	80 e0       	ldi	r24, 0x00	; 0
    4390:	90 e0       	ldi	r25, 0x00	; 0
    4392:	60 e0       	ldi	r22, 0x00	; 0
    4394:	71 e0       	ldi	r23, 0x01	; 1
    4396:	a7 01       	movw	r20, r14
    4398:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <strtok_r>
    439c:	7c 01       	movw	r14, r24
          if(NULL != tok2)
    439e:	00 97       	sbiw	r24, 0x00	; 0
    43a0:	09 f4       	brne	.+2      	; 0x43a4 <pollCLI(unsigned char)+0x582>
    43a2:	78 c0       	rjmp	.+240    	; 0x4494 <pollCLI(unsigned char)+0x672>
            {
            const int hh = atoi(tok1);
    43a4:	c8 01       	movw	r24, r16
    43a6:	0e 94 a5 03 	call	0x74a	; 0x74a <atoi>
    43aa:	8c 01       	movw	r16, r24
            const int mm = atoi(tok2);
    43ac:	c7 01       	movw	r24, r14
    43ae:	0e 94 a5 03 	call	0x74a	; 0x74a <atoi>
    43b2:	bc 01       	movw	r22, r24
            // TODO: zap collected stats if time change too large (eg >> 1h).
            if(!setHoursMinutesLT(hh, mm)) { InvalidIgnored(); }
    43b4:	c8 01       	movw	r24, r16
    43b6:	0e 94 2f 19 	call	0x325e	; 0x325e <setHoursMinutesLT(int, int)>
    43ba:	88 23       	and	r24, r24
    43bc:	09 f0       	breq	.+2      	; 0x43c0 <pollCLI(unsigned char)+0x59e>
    43be:	6a c0       	rjmp	.+212    	; 0x4494 <pollCLI(unsigned char)+0x672>
    43c0:	0e 94 18 1c 	call	0x3830	; 0x3830 <InvalidIgnored()>
    43c4:	67 c0       	rjmp	.+206    	; 0x4494 <pollCLI(unsigned char)+0x672>
        }

      // Version information printed as one line to serial, machine- and human- parseable.
      case 'V':
        {
        serialPrintlnBuildVersion();
    43c6:	0e 94 1c 28 	call	0x5038	; 0x5038 <serialPrintlnBuildVersion()>
    43ca:	64 c0       	rjmp	.+200    	; 0x4494 <pollCLI(unsigned char)+0x672>

// Has the effect of forcing the warm mode to the specified state immediately.
// If forcing to FROST mode then any pending BAKE time is cancelled.
static void setWarmMode(const bool warm)
  {
  isWarmMode = warm;
    43cc:	81 e0       	ldi	r24, 0x01	; 1
    43ce:	80 93 dc 01 	sts	0x01DC, r24
  isWarmModeDebounced = warm;
    43d2:	80 93 db 01 	sts	0x01DB, r24
static bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
// TODO: this is not fully 'debounced', ie could flip between WARM/BAKE with button held down.
bool inBakeModeDebounced() { return(isWarmModeDebounced && (0 != bakeCountdownM)); }
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
    43d6:	10 92 dd 01 	sts	0x01DD, r1
    43da:	5c c0       	rjmp	.+184    	; 0x4494 <pollCLI(unsigned char)+0x672>
      case 'X':
        {
        char *last; // Used by strtok_r().
        char *tok1;
        // Minimum 3 character sequence makes sense and is safe to tokenise, eg "X 0".
        if((n >= 3) && (NULL != (tok1 = strtok_r(buf+2, " ", &last))))
    43dc:	13 30       	cpi	r17, 0x03	; 3
    43de:	08 f4       	brcc	.+2      	; 0x43e2 <pollCLI(unsigned char)+0x5c0>
    43e0:	59 c0       	rjmp	.+178    	; 0x4494 <pollCLI(unsigned char)+0x672>
    43e2:	83 ed       	ldi	r24, 0xD3	; 211
    43e4:	91 e0       	ldi	r25, 0x01	; 1
    43e6:	60 e0       	ldi	r22, 0x00	; 0
    43e8:	71 e0       	ldi	r23, 0x01	; 1
    43ea:	ae 01       	movw	r20, r28
    43ec:	4f 5f       	subi	r20, 0xFF	; 255
    43ee:	5f 4f       	sbci	r21, 0xFF	; 255
    43f0:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <strtok_r>
    43f4:	00 97       	sbiw	r24, 0x00	; 0
    43f6:	09 f4       	brne	.+2      	; 0x43fa <pollCLI(unsigned char)+0x5d8>
    43f8:	4d c0       	rjmp	.+154    	; 0x4494 <pollCLI(unsigned char)+0x672>
          {
          const uint8_t nn = (uint8_t) atoi(tok1);
    43fa:	0e 94 a5 03 	call	0x74a	; 0x74a <atoi>
    43fe:	68 2f       	mov	r22, r24
          eeprom_smart_update_byte((uint8_t *)EE_START_STATS_TX_ENABLE, nn);
    4400:	88 e1       	ldi	r24, 0x18	; 24
    4402:	90 e0       	ldi	r25, 0x00	; 0
    4404:	0e 94 05 08 	call	0x100a	; 0x100a <eeprom_smart_update_byte(unsigned char*, unsigned char)>
    4408:	45 c0       	rjmp	.+138    	; 0x4494 <pollCLI(unsigned char)+0x672>

      // Zap/erase learned statistics.
      case 'Z':
        {
        // Try to avoid causing an overrun if near the end of the minor cycle (even allowing for the warning message if unfinished!).
        if(zapStats((uint16_t) fnmax(1, ((int)msRemainingThisBasicCycle()/2) - 20)))
    440a:	81 e0       	ldi	r24, 0x01	; 1
    440c:	90 e0       	ldi	r25, 0x00	; 0
    440e:	9c 83       	std	Y+4, r25	; 0x04
    4410:	8b 83       	std	Y+3, r24	; 0x03
    4412:	80 91 b2 00 	lds	r24, 0x00B2
    4416:	2f ef       	ldi	r18, 0xFF	; 255
    4418:	30 e0       	ldi	r19, 0x00	; 0
    441a:	28 1b       	sub	r18, r24
    441c:	31 09       	sbc	r19, r1
    441e:	c9 01       	movw	r24, r18
    4420:	43 e0       	ldi	r20, 0x03	; 3
    4422:	88 0f       	add	r24, r24
    4424:	99 1f       	adc	r25, r25
    4426:	4a 95       	dec	r20
    4428:	e1 f7       	brne	.-8      	; 0x4422 <pollCLI(unsigned char)+0x600>
    442a:	82 1b       	sub	r24, r18
    442c:	93 0b       	sbc	r25, r19
    442e:	95 95       	asr	r25
    4430:	87 95       	ror	r24
    4432:	44 97       	sbiw	r24, 0x14	; 20
    4434:	9e 83       	std	Y+6, r25	; 0x06
    4436:	8d 83       	std	Y+5, r24	; 0x05
    4438:	81 30       	cpi	r24, 0x01	; 1
    443a:	91 05       	cpc	r25, r1
    443c:	14 f4       	brge	.+4      	; 0x4442 <pollCLI(unsigned char)+0x620>
    443e:	81 e0       	ldi	r24, 0x01	; 1
    4440:	90 e0       	ldi	r25, 0x00	; 0
    4442:	0e 94 07 05 	call	0xa0e	; 0xa0e <zapStats(unsigned int)>
    4446:	88 23       	and	r24, r24
    4448:	29 f0       	breq	.+10     	; 0x4454 <pollCLI(unsigned char)+0x632>
          { Serial.println(F("Zapped.")); }
    444a:	81 e3       	ldi	r24, 0x31	; 49
    444c:	93 e0       	ldi	r25, 0x03	; 3
    444e:	69 ec       	ldi	r22, 0xC9	; 201
    4450:	71 e0       	ldi	r23, 0x01	; 1
    4452:	04 c0       	rjmp	.+8      	; 0x445c <pollCLI(unsigned char)+0x63a>
        else
          { Serial.println(F("Not finished.")); }
    4454:	81 e3       	ldi	r24, 0x31	; 49
    4456:	93 e0       	ldi	r25, 0x03	; 3
    4458:	6b eb       	ldi	r22, 0xBB	; 187
    445a:	71 e0       	ldi	r23, 0x01	; 1
    445c:	0e 94 43 31 	call	0x6286	; 0x6286 <Print::println(__FlashStringHelper const*)>
      }

    // Almost always show status line afterwards as feedback of command received and new state.
    if(showStatus) { serialStatusReport(); }
    // Else show ack of command received.
    else { Serial.println(F("OK")); }
    4460:	81 e3       	ldi	r24, 0x31	; 49
    4462:	93 e0       	ldi	r25, 0x03	; 3
    4464:	68 eb       	ldi	r22, 0xB8	; 184
    4466:	71 e0       	ldi	r23, 0x01	; 1
    4468:	0e 94 43 31 	call	0x6286	; 0x6286 <Print::println(__FlashStringHelper const*)>
    446c:	04 c0       	rjmp	.+8      	; 0x4476 <pollCLI(unsigned char)+0x654>
    }
  else { Serial.println(); } // Terminate empty/partial CLI input line after timeout.
    446e:	81 e3       	ldi	r24, 0x31	; 49
    4470:	93 e0       	ldi	r25, 0x03	; 3
    4472:	0e 94 23 31 	call	0x6246	; 0x6246 <Print::println()>

  // Force any pending output before return / possible UART power-down.
  flushSerialSCTSensitive();
    4476:	0e 94 10 15 	call	0x2a20	; 0x2a20 <flushSerialSCTSensitive()>

  if(neededWaking) { powerDownSerial(); }
    447a:	bb 20       	and	r11, r11
    447c:	71 f0       	breq	.+28     	; 0x449a <pollCLI(unsigned char)+0x678>
    447e:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <powerDownSerial()>
    4482:	0b c0       	rjmp	.+22     	; 0x449a <pollCLI(unsigned char)+0x678>
              FHT8VSetHC2(hc2);
              FHT8VSyncAndTXReset(); // Force re-sync with FHT8V valve.
              }
            }
          }
        else if(n < 2) // Just 'H', possibly with trailing whitespace.
    4484:	12 30       	cpi	r17, 0x02	; 2
    4486:	30 f4       	brcc	.+12     	; 0x4494 <pollCLI(unsigned char)+0x672>
    4488:	a0 ce       	rjmp	.-704    	; 0x41ca <pollCLI(unsigned char)+0x3a8>
    448a:	80 e0       	ldi	r24, 0x00	; 0
    448c:	90 e0       	ldi	r25, 0x00	; 0
    448e:	b3 ce       	rjmp	.-666    	; 0x41f6 <pollCLI(unsigned char)+0x3d4>
    4490:	80 e0       	ldi	r24, 0x00	; 0
    4492:	c5 ce       	rjmp	.-630    	; 0x421e <pollCLI(unsigned char)+0x3fc>
        break;
        }
      }

    // Almost always show status line afterwards as feedback of command received and new state.
    if(showStatus) { serialStatusReport(); }
    4494:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <serialStatusReport()>
    4498:	ee cf       	rjmp	.-36     	; 0x4476 <pollCLI(unsigned char)+0x654>

  // Force any pending output before return / possible UART power-down.
  flushSerialSCTSensitive();

  if(neededWaking) { powerDownSerial(); }
  }
    449a:	26 96       	adiw	r28, 0x06	; 6
    449c:	0f b6       	in	r0, 0x3f	; 63
    449e:	f8 94       	cli
    44a0:	de bf       	out	0x3e, r29	; 62
    44a2:	0f be       	out	0x3f, r0	; 63
    44a4:	cd bf       	out	0x3d, r28	; 61
    44a6:	cf 91       	pop	r28
    44a8:	df 91       	pop	r29
    44aa:	1f 91       	pop	r17
    44ac:	0f 91       	pop	r16
    44ae:	ff 90       	pop	r15
    44b0:	ef 90       	pop	r14
    44b2:	df 90       	pop	r13
    44b4:	cf 90       	pop	r12
    44b6:	bf 90       	pop	r11
    44b8:	08 95       	ret

000044ba <checkUserSchedule()>:
  return(statusChanged);
  }


// Check/apply the user's schedule, at least once each minute, and act on any timed events.
void checkUserSchedule()
    44ba:	0f 93       	push	r16
    44bc:	1f 93       	push	r17
    44be:	cf 93       	push	r28
    44c0:	df 93       	push	r29
  {
  // Get minutes since midnight local time [0,1439].
  const uint_least16_t msm = getMinutesSinceMidnightLT();
    44c2:	0e 94 5f 18 	call	0x30be	; 0x30be <getMinutesSinceMidnightLT()>
    44c6:	ec 01       	movw	r28, r24
    44c8:	10 e0       	ldi	r17, 0x00	; 0

// Has the effect of forcing the warm mode to the specified state immediately.
// If forcing to FROST mode then any pending BAKE time is cancelled.
static void setWarmMode(const bool warm)
  {
  isWarmMode = warm;
    44ca:	01 e0       	ldi	r16, 0x01	; 1
  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    {
    // Check if now is the simple scheduled off time, as minutes after midnight [0,1439]; invalid (eg ~0) if none set.
    // Programmed off/frost takes priority over on/warm if same to bias towards energy-saving.
    // Note that in the presence of multiple overlapping schedules only the last 'off' applies however.
    if(((MAX_SIMPLE_SCHEDULES < 1) || !isAnyScheduleOnWARMNow()) &&
    44cc:	0e 94 c4 19 	call	0x3388	; 0x3388 <isAnyScheduleOnWARMNow()>
    44d0:	88 23       	and	r24, r24
    44d2:	c9 f4       	brne	.+50     	; 0x4506 <checkUserSchedule()+0x4c>
    44d4:	81 2f       	mov	r24, r17
    44d6:	0e 94 9e 19 	call	0x333c	; 0x333c <getSimpleScheduleOff(unsigned char)>
    44da:	c8 17       	cp	r28, r24
    44dc:	d9 07       	cpc	r29, r25
    44de:	99 f4       	brne	.+38     	; 0x4506 <checkUserSchedule()+0x4c>

// Has the effect of forcing the warm mode to the specified state immediately.
// If forcing to FROST mode then any pending BAKE time is cancelled.
static void setWarmMode(const bool warm)
  {
  isWarmMode = warm;
    44e0:	10 92 dc 01 	sts	0x01DC, r1
  isWarmModeDebounced = warm;
    44e4:	10 92 db 01 	sts	0x01DB, r1
static bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
// TODO: this is not fully 'debounced', ie could flip between WARM/BAKE with button held down.
bool inBakeModeDebounced() { return(isWarmModeDebounced && (0 != bakeCountdownM)); }
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
    44e8:	10 92 dd 01 	sts	0x01DD, r1
    44ec:	08 c0       	rjmp	.+16     	; 0x44fe <checkUserSchedule()+0x44>

// Has the effect of forcing the warm mode to the specified state immediately.
// If forcing to FROST mode then any pending BAKE time is cancelled.
static void setWarmMode(const bool warm)
  {
  isWarmMode = warm;
    44ee:	00 93 dc 01 	sts	0x01DC, r16
  isWarmModeDebounced = warm;
    44f2:	00 93 db 01 	sts	0x01DB, r16
static bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
// TODO: this is not fully 'debounced', ie could flip between WARM/BAKE with button held down.
bool inBakeModeDebounced() { return(isWarmModeDebounced && (0 != bakeCountdownM)); }
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
    44f6:	10 92 dd 01 	sts	0x01DD, r1
    // Check if now is the simple scheduled on time.
    else if(msm == getSimpleScheduleOn(which))
      {
      setWarmMode(true);
      // In addition to forcing WARM mode, weakly inhibit any setbacks, etc, for a while.
      markAsPossiblyOccupied();
    44fa:	0e 94 c8 06 	call	0xd90	; 0xd90 <markAsPossiblyOccupied()>
  // Get minutes since midnight local time [0,1439].
  const uint_least16_t msm = getMinutesSinceMidnightLT();

  // Check all available schedules.
  // FIXME: probably will NOT work as expected for overlapping schedules (ie will got to FROST at end of first one).
  for(uint8_t which = 0; which < MAX_SIMPLE_SCHEDULES; ++which)
    44fe:	1f 5f       	subi	r17, 0xFF	; 255
    4500:	12 30       	cpi	r17, 0x02	; 2
    4502:	21 f7       	brne	.-56     	; 0x44cc <checkUserSchedule()+0x12>
    4504:	07 c0       	rjmp	.+14     	; 0x4514 <checkUserSchedule()+0x5a>
    // Note that in the presence of multiple overlapping schedules only the last 'off' applies however.
    if(((MAX_SIMPLE_SCHEDULES < 1) || !isAnyScheduleOnWARMNow()) &&
       (msm == getSimpleScheduleOff(which)))
      { setWarmMode(false); }
    // Check if now is the simple scheduled on time.
    else if(msm == getSimpleScheduleOn(which))
    4506:	81 2f       	mov	r24, r17
    4508:	0e 94 59 19 	call	0x32b2	; 0x32b2 <getSimpleScheduleOn(unsigned char)>
    450c:	c8 17       	cp	r28, r24
    450e:	d9 07       	cpc	r29, r25
    4510:	b1 f7       	brne	.-20     	; 0x44fe <checkUserSchedule()+0x44>
    4512:	ed cf       	rjmp	.-38     	; 0x44ee <checkUserSchedule()+0x34>
      setWarmMode(true);
      // In addition to forcing WARM mode, weakly inhibit any setbacks, etc, for a while.
      markAsPossiblyOccupied();
      }
    }
  }
    4514:	df 91       	pop	r29
    4516:	cf 91       	pop	r28
    4518:	1f 91       	pop	r17
    451a:	0f 91       	pop	r16
    451c:	08 95       	ret

0000451e <offPause()>:
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define MEDIUM_PAUSE_MS 60
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
// Big low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define BIG_PAUSE_MS 120
static void inline bigPause() { nap(WDTO_120MS); } // 120ms vs 288ms nominal for PICAXE V0.09 impl.
    451e:	83 e0       	ldi	r24, 0x03	; 3
    4520:	0e 94 de 11 	call	0x23bc	; 0x23bc <nap(signed char)>

// Pause between flashes to allow them to be distinguished (>100ms); was mediumPause() for PICAXE V0.09 impl.
static void inline offPause()
  {
  bigPause(); // 120ms, was V0.09 144ms mediumPause() for PICAXE V0.09 impl.
  pollIO(); // Slip in an I/O poll.
    4524:	80 e0       	ldi	r24, 0x00	; 0
    4526:	0e 94 c7 23 	call	0x478e	; 0x478e <pollIO(bool)>
  }
    452a:	08 95       	ret

0000452c <markUIControlUsed()>:
bool isCLIActive() { return(0 != CLITimeoutM); }

// Record local manual operation of a local physical UI control, eg not remote or via CLI.
void markUIControlUsed()
  {
  statusChange = true; // Note user interaction with the system.
    452c:	81 e0       	ldi	r24, 0x01	; 1
    452e:	80 93 e0 01 	sts	0x01E0, r24
  uiTimeoutM = 2; // Ensure that UI controls are kept 'warm' for a little while.
    4532:	82 e0       	ldi	r24, 0x02	; 2
    4534:	80 93 de 01 	sts	0x01DE, r24
// Starts up with full value to allow easy set of time, etc, without specially activating CLI.
#define CLI_DEFAULT_TIMEOUT_M 2
static uint8_t CLITimeoutM = CLI_DEFAULT_TIMEOUT_M;

// Reset CLI active timer to the full whack before it goes inactive again (ie makes CLI active for a while).
static void resetCLIActiveTimer() { CLITimeoutM = CLI_DEFAULT_TIMEOUT_M; }
    4538:	80 93 04 01 	sts	0x0104, r24
  statusChange = true; // Note user interaction with the system.
  uiTimeoutM = 2; // Ensure that UI controls are kept 'warm' for a little while.
  // Make CLI active for a while (at some slight possibly-significant energy cost).
  resetCLIActiveTimer();
  // User operation of controls locally is strong indication of presence.
  markAsOccupied();
    453c:	0e 94 92 04 	call	0x924	; 0x924 <markAsOccupied()>
  }
    4540:	08 95       	ret

00004542 <tickUI(unsigned char)>:
// Should never be skipped, so as to allow the UI to remain responsive.
// Runs in 350ms or less; usually takes only a few milliseconds or microseconds.
// Returns true iff the user interacted with the system, and maybe caused a status change.
// NOTE: since this is on the minimum idle-loop code path, minimise CPU cycles, esp in frost mode.
// Also re-activates CLI on main button push.
bool tickUI(const uint_fast8_t sec)
    4542:	0f 93       	push	r16
    4544:	1f 93       	push	r17
  {
  // Perform any once-per-minute operations.
  const bool sec0 = (0 == sec);
  if(sec0)
    4546:	88 23       	and	r24, r24
    4548:	a9 f4       	brne	.+42     	; 0x4574 <tickUI(unsigned char)+0x32>
    {
#ifdef SUPPORT_BAKE
    // Run down BAKE mode timer if need be, one tick per minute.
    if(bakeCountdownM > 0) { --bakeCountdownM; }
    454a:	80 91 dd 01 	lds	r24, 0x01DD
    454e:	88 23       	and	r24, r24
    4550:	19 f0       	breq	.+6      	; 0x4558 <tickUI(unsigned char)+0x16>
    4552:	81 50       	subi	r24, 0x01	; 1
    4554:	80 93 dd 01 	sts	0x01DD, r24
#endif

    // Run down UI iteraction timer if need be, one tick per minute.
    if(uiTimeoutM > 0) { --uiTimeoutM; }
    4558:	80 91 de 01 	lds	r24, 0x01DE
    455c:	88 23       	and	r24, r24
    455e:	19 f0       	breq	.+6      	; 0x4566 <tickUI(unsigned char)+0x24>
    4560:	81 50       	subi	r24, 0x01	; 1
    4562:	80 93 de 01 	sts	0x01DE, r24

    // Run down CLI timer if need be.
    if(CLITimeoutM > 0) { --CLITimeoutM; }
    4566:	80 91 04 01 	lds	r24, 0x0104
    456a:	88 23       	and	r24, r24
    456c:	19 f0       	breq	.+6      	; 0x4574 <tickUI(unsigned char)+0x32>
    456e:	81 50       	subi	r24, 0x01	; 1
    4570:	80 93 04 01 	sts	0x0104, r24
    }

  // True on every 4th tick/call, ie about once every 8 seconds.
  const bool forthTick = !((++tickCount) & 3); // True on every 4th tick.
    4574:	10 91 df 01 	lds	r17, 0x01DF
    4578:	1f 5f       	subi	r17, 0xFF	; 255
    457a:	10 93 df 01 	sts	0x01DF, r17
#ifdef TEMP_POT_AVAILABLE
//  const bool rUIcu = recentUIControlUse();
  //if(rUIcu || forthTick) // If recent UI activity, and periodically
    {
    // Force re-read of temp pot UI device.
    readTempPot();
    457e:	0e 94 06 1b 	call	0x360c	; 0x360c <readTempPot()>
    }
#endif

  if(fastDigitalRead(BUTTON_MODE_L) == LOW)
    4582:	4d 99       	sbic	0x09, 5	; 9
    4584:	21 c0       	rjmp	.+66     	; 0x45c8 <tickUI(unsigned char)+0x86>
    {
    // User is pressing the mode button: cycle through FROST | WARM [ | BAKE ].
    // Mark controls used and room as currently occupied given button press.
    markUIControlUsed();
    4586:	0e 94 96 22 	call	0x452c	; 0x452c <markUIControlUsed()>
    // LED on...
    LED_HEATCALL_ON();
    458a:	5c 98       	cbi	0x0b, 4	; 11
// Very tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define VERYTINY_PAUSE_MS 5
static void inline veryTinyPause() { sleepLowPowerMs(VERYTINY_PAUSE_MS); }
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define TINY_PAUSE_MS 15
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    458c:	80 e0       	ldi	r24, 0x00	; 0
    458e:	0e 94 de 11 	call	0x23bc	; 0x23bc <nap(signed char)>
    tinyPause(); // Leading tiny pause...
    if(!isWarmMode) // Was in frost mode; moving to warm mode.
    4592:	80 91 dc 01 	lds	r24, 0x01DC
    4596:	88 23       	and	r24, r24
    4598:	69 f4       	brne	.+26     	; 0x45b4 <tickUI(unsigned char)+0x72>

// Has the effect of forcing the warm mode to the specified state immediately.
// If forcing to FROST mode then any pending BAKE time is cancelled.
static void setWarmMode(const bool warm)
  {
  isWarmMode = warm;
    459a:	81 e0       	ldi	r24, 0x01	; 1
    459c:	80 93 dc 01 	sts	0x01DC, r24
  isWarmModeDebounced = warm;
    45a0:	80 93 db 01 	sts	0x01DB, r24
static bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
// TODO: this is not fully 'debounced', ie could flip between WARM/BAKE with button held down.
bool inBakeModeDebounced() { return(isWarmModeDebounced && (0 != bakeCountdownM)); }
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
    45a4:	10 92 dd 01 	sts	0x01DD, r1
      setWarmMode(true);
#ifdef SUPPORT_BAKE
      cancelBake(); // Ensure no bake mode running.
#endif
      // 2 x flash 'heat call' to indicate now in WARM mode.
      LED_HEATCALL_OFF();
    45a8:	5c 9a       	sbi	0x0b, 4	; 11
      offPause();
    45aa:	0e 94 8f 22 	call	0x451e	; 0x451e <offPause()>
      LED_HEATCALL_ON();
    45ae:	5c 98       	cbi	0x0b, 4	; 11
    45b0:	80 e0       	ldi	r24, 0x00	; 0
    45b2:	d0 c0       	rjmp	.+416    	; 0x4754 <tickUI(unsigned char)+0x212>

#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in raw 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
static bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
    45b4:	80 91 dd 01 	lds	r24, 0x01DD
    45b8:	88 23       	and	r24, r24
    45ba:	09 f4       	brne	.+2      	; 0x45be <tickUI(unsigned char)+0x7c>
    45bc:	b8 c0       	rjmp	.+368    	; 0x472e <tickUI(unsigned char)+0x1ec>

// Has the effect of forcing the warm mode to the specified state immediately.
// If forcing to FROST mode then any pending BAKE time is cancelled.
static void setWarmMode(const bool warm)
  {
  isWarmMode = warm;
    45be:	10 92 dc 01 	sts	0x01DC, r1
  isWarmModeDebounced = warm;
    45c2:	10 92 db 01 	sts	0x01DB, r1
    45c6:	9d c0       	rjmp	.+314    	; 0x4702 <tickUI(unsigned char)+0x1c0>
    // Run down CLI timer if need be.
    if(CLITimeoutM > 0) { --CLITimeoutM; }
    }

  // True on every 4th tick/call, ie about once every 8 seconds.
  const bool forthTick = !((++tickCount) & 3); // True on every 4th tick.
    45c8:	00 e0       	ldi	r16, 0x00	; 0
    45ca:	81 2f       	mov	r24, r17
    45cc:	90 e0       	ldi	r25, 0x00	; 0
    45ce:	83 70       	andi	r24, 0x03	; 3
    45d0:	90 70       	andi	r25, 0x00	; 0
    45d2:	89 2b       	or	r24, r25
    45d4:	09 f4       	brne	.+2      	; 0x45d8 <tickUI(unsigned char)+0x96>
    45d6:	01 e0       	ldi	r16, 0x01	; 1
    }
  else
    {
    // Don't update the debounced WARM mode while button held down.
    // Will also capture programmatic changes to isWarmMode, eg from schedules.
    isWarmModeDebounced = isWarmMode;
    45d8:	80 91 dc 01 	lds	r24, 0x01DC
    45dc:	80 93 db 01 	sts	0x01DB, r24

    // Mode button not pressed: indicate current mode with flash(es); more flashes if actually calling for heat.
    // Force display while UI controls are being used, eg to indicate temp pot position.
    if(isWarmModeDebounced || statusChange) // Generate flash(es) if in WARM mode or fiddling with UI other than Mode button.
    45e0:	88 23       	and	r24, r24
    45e2:	29 f4       	brne	.+10     	; 0x45ee <tickUI(unsigned char)+0xac>
    45e4:	80 91 e0 01 	lds	r24, 0x01E0
    45e8:	88 23       	and	r24, r24
    45ea:	09 f4       	brne	.+2      	; 0x45ee <tickUI(unsigned char)+0xac>
    45ec:	5b c0       	rjmp	.+182    	; 0x46a4 <tickUI(unsigned char)+0x162>
      {
      // DHD20131223: do not flash if the room is dark so as to save energy and avoid disturbing sleep, etc.
      // In this case force resample of light level frequently in case user turns light on eg to operate unit.
      // Do show LED flash if user has recently operated controls (other than mode button) manually.
      if(!isRoomDark() || statusChange || (forthTick && (0 != readAmbientLight()) && !isRoomDark()))
    45ee:	0e 94 38 04 	call	0x870	; 0x870 <isRoomLit()>
    45f2:	88 23       	and	r24, r24
    45f4:	89 f4       	brne	.+34     	; 0x4618 <tickUI(unsigned char)+0xd6>
    45f6:	80 91 e0 01 	lds	r24, 0x01E0
    45fa:	88 23       	and	r24, r24
    45fc:	69 f4       	brne	.+26     	; 0x4618 <tickUI(unsigned char)+0xd6>
    45fe:	00 23       	and	r16, r16
    4600:	09 f4       	brne	.+2      	; 0x4604 <tickUI(unsigned char)+0xc2>
    4602:	6e c0       	rjmp	.+220    	; 0x46e0 <tickUI(unsigned char)+0x19e>
    4604:	0e 94 40 04 	call	0x880	; 0x880 <readAmbientLight()>
    4608:	89 2b       	or	r24, r25
    460a:	09 f4       	brne	.+2      	; 0x460e <tickUI(unsigned char)+0xcc>
    460c:	69 c0       	rjmp	.+210    	; 0x46e0 <tickUI(unsigned char)+0x19e>
    460e:	0e 94 38 04 	call	0x870	; 0x870 <isRoomLit()>
    4612:	88 23       	and	r24, r24
    4614:	09 f4       	brne	.+2      	; 0x4618 <tickUI(unsigned char)+0xd6>
    4616:	64 c0       	rjmp	.+200    	; 0x46e0 <tickUI(unsigned char)+0x19e>
//#ifdef LEARN_BUTTON_AVAILABLE
//        if((!forthTick) || isSimpleScheduleSet()) // Omit every 4th set of flashes unless a schedule is set.
//#endif
          {
          // First flash to indicate WARM mode (or pot being twiddled).
          LED_HEATCALL_ON();
    4618:	5c 98       	cbi	0x0b, 4	; 11
          // LED on stepwise proportional to temp pot setting.
          // Small number of steps (3) should help make positioning more obvious.
          const uint8_t wt = getWARMTargetC();
    461a:	0e 94 49 05 	call	0xa92	; 0xa92 <getWARMTargetC()>
    461e:	08 2f       	mov	r16, r24
          // Makes vtiny|tiny|medium flash for cool|OK|warm temperature target.
          if(isEcoTemperature(wt)) { veryTinyPause(); }
    4620:	82 31       	cpi	r24, 0x12	; 18
    4622:	28 f4       	brcc	.+10     	; 0x462e <tickUI(unsigned char)+0xec>
// Sleep/spin for approx specified strictly-positive number of milliseconds, in as low-power mode as possible.
// This may be achieved in part by dynamically slowing the CPU clock if possible.
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Assumes MIN_CPU_HZ >> 4000.
static void inline sleepLowPowerMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed((((MIN_CPU_HZ * (ms)) + 2000) / 4000) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    4624:	85 e2       	ldi	r24, 0x25	; 37
    4626:	90 e0       	ldi	r25, 0x00	; 0
    4628:	0e 94 af 11 	call	0x235e	; 0x235e <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
    462c:	07 c0       	rjmp	.+14     	; 0x463c <tickUI(unsigned char)+0xfa>
          else if(!isComfortTemperature(wt)) { tinyPause(); }
    462e:	84 31       	cpi	r24, 0x14	; 20
    4630:	10 f4       	brcc	.+4      	; 0x4636 <tickUI(unsigned char)+0xf4>
// Very tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define VERYTINY_PAUSE_MS 5
static void inline veryTinyPause() { sleepLowPowerMs(VERYTINY_PAUSE_MS); }
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define TINY_PAUSE_MS 15
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    4632:	80 e0       	ldi	r24, 0x00	; 0
    4634:	01 c0       	rjmp	.+2      	; 0x4638 <tickUI(unsigned char)+0xf6>
// Small low-power sleep.
#define SMALL_PAUSE_MS 30
static void inline smallPause() { nap(WDTO_30MS); }
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define MEDIUM_PAUSE_MS 60
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
    4636:	82 e0       	ldi	r24, 0x02	; 2
    4638:	0e 94 de 11 	call	0x23bc	; 0x23bc <nap(signed char)>
          else { mediumPause(); }
  
          // Second flash to indicate nominally calling for heat.
          // TODO: could consider using isControlledValveOpen() instead.
          if(getTRVPercentOpen() >= getMinValvePcReallyOpen())
    463c:	0e 94 76 04 	call	0x8ec	; 0x8ec <getTRVPercentOpen()>
    4640:	18 2f       	mov	r17, r24
    4642:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <getMinValvePcReallyOpen()>
    4646:	18 17       	cp	r17, r24
    4648:	08 f4       	brcc	.+2      	; 0x464c <tickUI(unsigned char)+0x10a>
    464a:	4a c0       	rjmp	.+148    	; 0x46e0 <tickUI(unsigned char)+0x19e>
            {
            LED_HEATCALL_OFF();
    464c:	5c 9a       	sbi	0x0b, 4	; 11
            offPause(); // V0.09 was mediumPause().
    464e:	0e 94 8f 22 	call	0x451e	; 0x451e <offPause()>
            LED_HEATCALL_ON(); // flash
    4652:	5c 98       	cbi	0x0b, 4	; 11
            if(isEcoTemperature(wt)) { veryTinyPause(); }
    4654:	02 31       	cpi	r16, 0x12	; 18
    4656:	18 f4       	brcc	.+6      	; 0x465e <tickUI(unsigned char)+0x11c>
// Sleep/spin for approx specified strictly-positive number of milliseconds, in as low-power mode as possible.
// This may be achieved in part by dynamically slowing the CPU clock if possible.
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Assumes MIN_CPU_HZ >> 4000.
static void inline sleepLowPowerMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed((((MIN_CPU_HZ * (ms)) + 2000) / 4000) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    4658:	85 e2       	ldi	r24, 0x25	; 37
    465a:	90 e0       	ldi	r25, 0x00	; 0
    465c:	04 c0       	rjmp	.+8      	; 0x4666 <tickUI(unsigned char)+0x124>
            else if(!isComfortTemperature(wt)) { sleepLowPowerMs((VERYTINY_PAUSE_MS + TINY_PAUSE_MS) / 2); }
    465e:	04 31       	cpi	r16, 0x14	; 20
    4660:	28 f4       	brcc	.+10     	; 0x466c <tickUI(unsigned char)+0x12a>
    4662:	8c e4       	ldi	r24, 0x4C	; 76
    4664:	90 e0       	ldi	r25, 0x00	; 0
    4666:	0e 94 af 11 	call	0x235e	; 0x235e <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
    466a:	03 c0       	rjmp	.+6      	; 0x4672 <tickUI(unsigned char)+0x130>
// Very tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define VERYTINY_PAUSE_MS 5
static void inline veryTinyPause() { sleepLowPowerMs(VERYTINY_PAUSE_MS); }
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define TINY_PAUSE_MS 15
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    466c:	80 e0       	ldi	r24, 0x00	; 0
    466e:	0e 94 de 11 	call	0x23bc	; 0x23bc <nap(signed char)>

#ifdef SUPPORT_BAKE // IF DEFINED: this unit supports BAKE mode.
// Only relevant if isWarmMode is true,
static uint_least8_t bakeCountdownM;
// If true then the unit is in raw 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
static bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
    4672:	80 91 dc 01 	lds	r24, 0x01DC
    4676:	88 23       	and	r24, r24
    4678:	99 f1       	breq	.+102    	; 0x46e0 <tickUI(unsigned char)+0x19e>
    467a:	80 91 dd 01 	lds	r24, 0x01DD
    467e:	88 23       	and	r24, r24
    4680:	79 f1       	breq	.+94     	; 0x46e0 <tickUI(unsigned char)+0x19e>

#ifdef SUPPORT_BAKE
            if(inBakeMode())
              {
              // Third (lengthened) flash to indicate BAKE mode.
              LED_HEATCALL_OFF();
    4682:	5c 9a       	sbi	0x0b, 4	; 11
// Small low-power sleep.
#define SMALL_PAUSE_MS 30
static void inline smallPause() { nap(WDTO_30MS); }
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define MEDIUM_PAUSE_MS 60
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
    4684:	82 e0       	ldi	r24, 0x02	; 2
    4686:	0e 94 de 11 	call	0x23bc	; 0x23bc <nap(signed char)>
              mediumPause(); // Note different flash off time to try to distinguish this last flash.
              LED_HEATCALL_ON();
    468a:	5c 98       	cbi	0x0b, 4	; 11
              // Makes tiny|small|medium flash for eco|OK|comfort temperature target.
              if(isEcoTemperature(wt)) { tinyPause(); }
    468c:	02 31       	cpi	r16, 0x12	; 18
    468e:	10 f4       	brcc	.+4      	; 0x4694 <tickUI(unsigned char)+0x152>
// Very tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define VERYTINY_PAUSE_MS 5
static void inline veryTinyPause() { sleepLowPowerMs(VERYTINY_PAUSE_MS); }
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define TINY_PAUSE_MS 15
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    4690:	80 e0       	ldi	r24, 0x00	; 0
    4692:	05 c0       	rjmp	.+10     	; 0x469e <tickUI(unsigned char)+0x15c>
              else if(!isComfortTemperature(wt)) { smallPause(); }
    4694:	04 31       	cpi	r16, 0x14	; 20
    4696:	10 f4       	brcc	.+4      	; 0x469c <tickUI(unsigned char)+0x15a>
// Small low-power sleep.
#define SMALL_PAUSE_MS 30
static void inline smallPause() { nap(WDTO_30MS); }
    4698:	81 e0       	ldi	r24, 0x01	; 1
    469a:	01 c0       	rjmp	.+2      	; 0x469e <tickUI(unsigned char)+0x15c>
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define MEDIUM_PAUSE_MS 60
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
    469c:	82 e0       	ldi	r24, 0x02	; 2
    469e:	0e 94 de 11 	call	0x23bc	; 0x23bc <nap(signed char)>
    46a2:	1e c0       	rjmp	.+60     	; 0x46e0 <tickUI(unsigned char)+0x19e>
    // Even in FROST mode, and if actually calling for heat (eg opening the rad valve significantly, etc)
    // then emit a tiny double flash on every 4th tick.
    // This call for heat may be frost protection or pre-warming / anticipating demand.
    // DHD20130528: new 4th-tick flash in FROST mode...
    // DHD20131223: do not flash if the room is dark so as to save energy and avoid disturbing sleep, etc.
    else if(forthTick && !isRoomDark() && isControlledValveOpen() && (getTRVPercentOpen() >= getMinValvePcReallyOpen()))
    46a4:	00 23       	and	r16, r16
    46a6:	e1 f0       	breq	.+56     	; 0x46e0 <tickUI(unsigned char)+0x19e>
    46a8:	0e 94 38 04 	call	0x870	; 0x870 <isRoomLit()>
    46ac:	88 23       	and	r24, r24
    46ae:	c1 f0       	breq	.+48     	; 0x46e0 <tickUI(unsigned char)+0x19e>
    46b0:	0e 94 04 09 	call	0x1208	; 0x1208 <isControlledValveOpen()>
    46b4:	88 23       	and	r24, r24
    46b6:	a1 f0       	breq	.+40     	; 0x46e0 <tickUI(unsigned char)+0x19e>
    46b8:	0e 94 76 04 	call	0x8ec	; 0x8ec <getTRVPercentOpen()>
    46bc:	18 2f       	mov	r17, r24
    46be:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <getMinValvePcReallyOpen()>
    46c2:	18 17       	cp	r17, r24
    46c4:	68 f0       	brcs	.+26     	; 0x46e0 <tickUI(unsigned char)+0x19e>
      {
      // Double flash every 4th tick indicates call for heat while in FROST MODE (matches call for heat in WARM mode).
      LED_HEATCALL_ON(); // flash
    46c6:	5c 98       	cbi	0x0b, 4	; 11
// Sleep/spin for approx specified strictly-positive number of milliseconds, in as low-power mode as possible.
// This may be achieved in part by dynamically slowing the CPU clock if possible.
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Assumes MIN_CPU_HZ >> 4000.
static void inline sleepLowPowerMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed((((MIN_CPU_HZ * (ms)) + 2000) / 4000) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    46c8:	85 e2       	ldi	r24, 0x25	; 37
    46ca:	90 e0       	ldi	r25, 0x00	; 0
    46cc:	0e 94 af 11 	call	0x235e	; 0x235e <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
      veryTinyPause();
      LED_HEATCALL_OFF();
    46d0:	5c 9a       	sbi	0x0b, 4	; 11
      offPause();
    46d2:	0e 94 8f 22 	call	0x451e	; 0x451e <offPause()>
      LED_HEATCALL_ON(); // flash
    46d6:	5c 98       	cbi	0x0b, 4	; 11
    46d8:	85 e2       	ldi	r24, 0x25	; 37
    46da:	90 e0       	ldi	r25, 0x00	; 0
    46dc:	0e 94 af 11 	call	0x235e	; 0x235e <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
      veryTinyPause();
      }

    // Enforce any changes that may have been driven by other UI components (ie other than MODE button).
    // Eg adjustment of temp pot / eco bias changing scheduled state.
    if(statusChange)
    46e0:	80 91 e0 01 	lds	r24, 0x01E0
    46e4:	88 23       	and	r24, r24
    46e6:	79 f0       	breq	.+30     	; 0x4706 <tickUI(unsigned char)+0x1c4>
      {
      static bool prevScheduleStatus;
      const bool currentScheduleStatus = isAnyScheduleOnWARMNow();
    46e8:	0e 94 c4 19 	call	0x3388	; 0x3388 <isAnyScheduleOnWARMNow()>
    46ec:	98 2f       	mov	r25, r24
      if(currentScheduleStatus != prevScheduleStatus)
    46ee:	80 91 e1 01 	lds	r24, 0x01E1
    46f2:	98 17       	cp	r25, r24
    46f4:	41 f0       	breq	.+16     	; 0x4706 <tickUI(unsigned char)+0x1c4>
        {
        prevScheduleStatus = currentScheduleStatus;
    46f6:	90 93 e1 01 	sts	0x01E1, r25

// Has the effect of forcing the warm mode to the specified state immediately.
// If forcing to FROST mode then any pending BAKE time is cancelled.
static void setWarmMode(const bool warm)
  {
  isWarmMode = warm;
    46fa:	90 93 dc 01 	sts	0x01DC, r25
  isWarmModeDebounced = warm;
    46fe:	90 93 db 01 	sts	0x01DB, r25
static bool inBakeMode() { return(isWarmMode && (0 != bakeCountdownM)); }
// If true then the unit is in 'BAKE' mode, a subset of 'WARM' mode which boosts the temperature target temporarily.
// TODO: this is not fully 'debounced', ie could flip between WARM/BAKE with button held down.
bool inBakeModeDebounced() { return(isWarmModeDebounced && (0 != bakeCountdownM)); }
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
    4702:	10 92 dd 01 	sts	0x01DD, r1
        }
      }
    }

  // Ensure LED forced off unconditionally at least once each cycle.
  LED_HEATCALL_OFF();
    4706:	5c 9a       	sbi	0x0b, 4	; 11

#ifdef LEARN_BUTTON_AVAILABLE
  // Handle learn button if supported and if is currently pressed.
  if(fastDigitalRead(BUTTON_LEARN_L) == LOW)
    4708:	18 99       	sbic	0x03, 0	; 3
    470a:	02 c0       	rjmp	.+4      	; 0x4710 <tickUI(unsigned char)+0x1ce>
    {
    handleLEARN(0);
    470c:	80 e0       	ldi	r24, 0x00	; 0
    470e:	03 c0       	rjmp	.+6      	; 0x4716 <tickUI(unsigned char)+0x1d4>
    LED_HEATCALL_ON(); // Leave heatcall LED on while learn button held down.
    }

#if defined(BUTTON_LEARN2_L)
  // Handle second learn button if supported and currently pressed and primary learn button not pressed.
  else if(fastDigitalRead(BUTTON_LEARN2_L) == LOW)
    4710:	4b 99       	sbic	0x09, 3	; 9
    4712:	06 c0       	rjmp	.+12     	; 0x4720 <tickUI(unsigned char)+0x1de>
    {
    handleLEARN(1);
    4714:	81 e0       	ldi	r24, 0x01	; 1
    4716:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <handleLEARN(unsigned char)>
    markUIControlUsed(); // Mark controls used and room as currently occupied given button press.
    471a:	0e 94 96 22 	call	0x452c	; 0x452c <markUIControlUsed()>
    LED_HEATCALL_ON(); // Leave heatcall LED on while learn button held down.
    471e:	5c 98       	cbi	0x0b, 4	; 11
    }
#endif
#endif

  const bool statusChanged = statusChange;
    4720:	80 91 e0 01 	lds	r24, 0x01E0
  statusChange = false; // Potential race.
    4724:	10 92 e0 01 	sts	0x01E0, r1
  return(statusChanged);
  }
    4728:	1f 91       	pop	r17
    472a:	0f 91       	pop	r16
    472c:	08 95       	ret
// TODO: this is not fully 'debounced', ie could flip between WARM/BAKE with button held down.
bool inBakeModeDebounced() { return(isWarmModeDebounced && (0 != bakeCountdownM)); }
// Cancel 'bake' mode if active; does not force to FROST mode.
void cancelBake() { bakeCountdownM = 0; }
// Start/restart 'bake' mode and timeout.
void startBake() { isWarmMode = true; bakeCountdownM = BAKE_MAX_M; }
    472e:	81 e0       	ldi	r24, 0x01	; 1
    4730:	80 93 dc 01 	sts	0x01DC, r24
    4734:	8e e1       	ldi	r24, 0x1E	; 30
    4736:	80 93 dd 01 	sts	0x01DD, r24
#ifdef SUPPORT_BAKE
    else if(!inBakeMode()) // Was in WARM mode, move to BAKE (with full timeout to run).
      {
      startBake();
      // 2 x flash + one longer flash 'heat call' to indicate now in BAKE mode.
      LED_HEATCALL_OFF();
    473a:	5c 9a       	sbi	0x0b, 4	; 11
      offPause();
    473c:	0e 94 8f 22 	call	0x451e	; 0x451e <offPause()>
      LED_HEATCALL_ON();
    4740:	5c 98       	cbi	0x0b, 4	; 11
// Very tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define VERYTINY_PAUSE_MS 5
static void inline veryTinyPause() { sleepLowPowerMs(VERYTINY_PAUSE_MS); }
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define TINY_PAUSE_MS 15
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    4742:	80 e0       	ldi	r24, 0x00	; 0
    4744:	0e 94 de 11 	call	0x23bc	; 0x23bc <nap(signed char)>
      tinyPause();
      LED_HEATCALL_OFF();
    4748:	5c 9a       	sbi	0x0b, 4	; 11
// Small low-power sleep.
#define SMALL_PAUSE_MS 30
static void inline smallPause() { nap(WDTO_30MS); }
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define MEDIUM_PAUSE_MS 60
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
    474a:	82 e0       	ldi	r24, 0x02	; 2
    474c:	0e 94 de 11 	call	0x23bc	; 0x23bc <nap(signed char)>
      mediumPause(); // Note different flash on/off duty cycle to try to distinguish this last flash.
      LED_HEATCALL_ON();
    4750:	5c 98       	cbi	0x0b, 4	; 11
    4752:	82 e0       	ldi	r24, 0x02	; 2
    4754:	0e 94 de 11 	call	0x23bc	; 0x23bc <nap(signed char)>
    4758:	d6 cf       	rjmp	.-84     	; 0x4706 <tickUI(unsigned char)+0x1c4>

0000475a <global constructors keyed to _Z5panicv>:
  '/',
  __DATE__[0], __DATE__[1], __DATE__[2],
  '/',
  __DATE__[4], __DATE__[5],
  '\0'
  };
    475a:	82 e3       	ldi	r24, 0x32	; 50
    475c:	80 93 05 01 	sts	0x0105, r24
    4760:	80 e3       	ldi	r24, 0x30	; 48
    4762:	80 93 06 01 	sts	0x0106, r24
    4766:	91 e3       	ldi	r25, 0x31	; 49
    4768:	90 93 07 01 	sts	0x0107, r25
    476c:	84 e3       	ldi	r24, 0x34	; 52
    476e:	80 93 08 01 	sts	0x0108, r24
    4772:	8d e4       	ldi	r24, 0x4D	; 77
    4774:	80 93 0a 01 	sts	0x010A, r24
    4778:	81 e6       	ldi	r24, 0x61	; 97
    477a:	80 93 0b 01 	sts	0x010B, r24
    477e:	89 e7       	ldi	r24, 0x79	; 121
    4780:	80 93 0c 01 	sts	0x010C, r24
    4784:	90 93 0e 01 	sts	0x010E, r25
    4788:	90 93 0f 01 	sts	0x010F, r25
  else if(getSubCycleTime() >= nearOverrunThreshold)
    {
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("?O"); // Near overrun.  Note 2ms/char to send...
    }
#endif
  }
    478c:	08 95       	ret

0000478e <pollIO(bool)>:
// Call this to do an I/O poll if needed; returns true if something useful happened.
// This call should typically take << 1ms at 1MHz CPU.
// Does not change CPU clock speeds, mess with interrupts (other than possible brief blocking), or sleep.
// Limits actual poll rate to something like once every 32ms, unless force is true.
//   * force if true then force full poll on every call (ie do not internally rate-limit)
bool pollIO(const bool force)
    478e:	1f 93       	push	r17
    4790:	18 2f       	mov	r17, r24
  {
#if defined(ENABLE_BOILER_HUB) && defined(USE_MODULE_FHT8VSIMPLE)
  if(inHubMode())
    4792:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <getMinBoilerOnMinutes()>
    4796:	88 23       	and	r24, r24
    4798:	99 f0       	breq	.+38     	; 0x47c0 <pollIO(bool)+0x32>
    {
    static volatile uint8_t _pO_lastPoll;

    // Poll RX at most about every ~32ms to help approx match spil rate when called in loop with 30ms nap.
    const uint8_t sct = getSubCycleTime();
    479a:	20 91 b2 00 	lds	r18, 0x00B2
    if(force || ((0 == (sct & 3)) && (sct != _pO_lastPoll)))
    479e:	11 23       	and	r17, r17
    47a0:	51 f4       	brne	.+20     	; 0x47b6 <pollIO(bool)+0x28>
    47a2:	82 2f       	mov	r24, r18
    47a4:	90 e0       	ldi	r25, 0x00	; 0
    47a6:	83 70       	andi	r24, 0x03	; 3
    47a8:	90 70       	andi	r25, 0x00	; 0
    47aa:	89 2b       	or	r24, r25
    47ac:	49 f4       	brne	.+18     	; 0x47c0 <pollIO(bool)+0x32>
    47ae:	80 91 e8 01 	lds	r24, 0x01E8
    47b2:	28 17       	cp	r18, r24
    47b4:	29 f0       	breq	.+10     	; 0x47c0 <pollIO(bool)+0x32>
      {
      _pO_lastPoll = sct;
    47b6:	20 93 e8 01 	sts	0x01E8, r18
      if(FHT8VCallForHeatPoll()) // Check if call-for-heat has been overheard.
    47ba:	0e 94 77 0a 	call	0x14ee	; 0x14ee <FHT8VCallForHeatPoll()>
    47be:	01 c0       	rjmp	.+2      	; 0x47c2 <pollIO(bool)+0x34>
    47c0:	80 e0       	ldi	r24, 0x00	; 0
        { return(true); }
      }
    }
#endif
  return(false);
  }
    47c2:	1f 91       	pop	r17
    47c4:	08 95       	ret

000047c6 <loop>:
static uint8_t boilerNoCallM;
#endif

// The main control loop routine runs forever.
// Note: exiting loop() and re-entering can take a little while, handling Arduino background tasks such as serial.
void loop()
    47c6:	6f 92       	push	r6
    47c8:	7f 92       	push	r7
    47ca:	8f 92       	push	r8
    47cc:	9f 92       	push	r9
    47ce:	af 92       	push	r10
    47d0:	bf 92       	push	r11
    47d2:	cf 92       	push	r12
    47d4:	df 92       	push	r13
    47d6:	ef 92       	push	r14
    47d8:	ff 92       	push	r15
    47da:	0f 93       	push	r16
    47dc:	1f 93       	push	r17
    47de:	df 93       	push	r29
    47e0:	cf 93       	push	r28
    47e2:	cd b7       	in	r28, 0x3d	; 61
    47e4:	de b7       	in	r29, 0x3e	; 62
    47e6:	6e 97       	sbiw	r28, 0x1e	; 30
    47e8:	0f b6       	in	r0, 0x3f	; 63
    47ea:	f8 94       	cli
    47ec:	de bf       	out	0x3e, r29	; 62
    47ee:	0f be       	out	0x3f, r0	; 63
    47f0:	cd bf       	out	0x3d, r28	; 61

  // Set up some variables before sleeping to minimise delay/jitter after the RTC tick.
  bool showStatus = false; // Show status at end of loop?

  // Use the zeroth second in each minute to force extra deep device sleeps/resets, etc.
  const bool second0 = (0 == TIME_LSD);
    47f2:	cc 24       	eor	r12, r12
    47f4:	80 91 e2 01 	lds	r24, 0x01E2
    47f8:	88 23       	and	r24, r24
    47fa:	11 f4       	brne	.+4      	; 0x4800 <loop+0x3a>
    47fc:	cc 24       	eor	r12, r12
    47fe:	c3 94       	inc	r12
  // Sensor readings are taken late in each minute (where they are taken)
  // and if possible noise and heat and light should be minimised in this part of each minute to improve readings.
//  const bool sensorReading30s = (TIME_LSD >= 30);
  // Sensor readings and (stats transmissions) are nominally on a 4-minute cycle.
  const uint8_t minuteFrom4 = (minuteCount & 3);
    4800:	80 91 e3 01 	lds	r24, 0x01E3
    4804:	83 70       	andi	r24, 0x03	; 3
  // The 0th minute in each group of four is always used for measuring where possible (possibly amongst others)
  // and where possible locally-generated noise and heat and light should be minimised in this minute to give the best possible readings.
  // This is the first (0th) minute in each group of four.
  const bool minute0From4ForSensors = (0 == minuteFrom4);
    4806:	99 24       	eor	r9, r9
    4808:	88 23       	and	r24, r24
    480a:	11 f4       	brne	.+4      	; 0x4810 <loop+0x4a>
    480c:	99 24       	eor	r9, r9
    480e:	93 94       	inc	r9
  // True the minute after all sensors should have been sampled.
  const bool minute1From4AfterSensors = (1 == minuteFrom4);
    4810:	66 24       	eor	r6, r6
    4812:	81 30       	cpi	r24, 0x01	; 1
    4814:	11 f4       	brne	.+4      	; 0x481a <loop+0x54>
    4816:	66 24       	eor	r6, r6
    4818:	63 94       	inc	r6

  // Note last-measured battery status.
  const bool batteryLow = isBatteryLow();
    481a:	0e 94 df 12 	call	0x25be	; 0x25be <isBatteryLow()>
    481e:	d8 2e       	mov	r13, r24
    (batteryLow || !inWarmModeDebounced()) && // Don't spare the batteries unless low, or in FROST mode (which should be most of the time).
#if defined(ENABLE_BOILER_HUB)
    (0 == boilerCountdownTicks) && // Unless the boiler is off, stay responsive.
#endif
    (!isControlledValveOpen()) &&  // Run at full speed until the FHT8V valve should actually have shut and the boiler gone off.
    (0 == getTRVPercentOpen()); // Run at full speed until not nominally demanding heat, eg even during FROST mode or pre-heating.
    4820:	88 23       	and	r24, r24
    4822:	21 f4       	brne	.+8      	; 0x482c <loop+0x66>
    4824:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <inWarmModeDebounced()>
    4828:	88 23       	and	r24, r24
    482a:	89 f4       	brne	.+34     	; 0x484e <loop+0x88>
    482c:	80 91 e4 01 	lds	r24, 0x01E4
    4830:	90 91 e5 01 	lds	r25, 0x01E5
    4834:	89 2b       	or	r24, r25
    4836:	59 f4       	brne	.+22     	; 0x484e <loop+0x88>
    4838:	0e 94 04 09 	call	0x1208	; 0x1208 <isControlledValveOpen()>
    483c:	88 23       	and	r24, r24
    483e:	39 f4       	brne	.+14     	; 0x484e <loop+0x88>
    4840:	0e 94 76 04 	call	0x8ec	; 0x8ec <getTRVPercentOpen()>
    4844:	88 23       	and	r24, r24
    4846:	19 f4       	brne	.+6      	; 0x484e <loop+0x88>
    4848:	77 24       	eor	r7, r7
    484a:	73 94       	inc	r7
    484c:	01 c0       	rjmp	.+2      	; 0x4850 <loop+0x8a>
    484e:	77 24       	eor	r7, r7
  // Conversely, if not true, should have time to savely log outputs, etc.
  const uint8_t nearOverrunThreshold = GSCT_MAX - 8; // ~64ms/~32 serial TX chars of grace time...
  bool tooNearOverrun = false; // Set flag that can be checked later.

  // Is this unit currently in central hub listener mode?
  const bool hubMode = inHubMode();
    4850:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <getMinBoilerOnMinutes()>
    4854:	b8 2e       	mov	r11, r24
    4856:	88 23       	and	r24, r24
    4858:	11 f0       	breq	.+4      	; 0x485e <loop+0x98>
    485a:	bb 24       	eor	r11, r11
    485c:	b3 94       	inc	r11
  // Check (early) for any remote stats arriving to dump.
  // This is designed to be easy to pick up by reading the serial output.
  // The output is terse to avoid taking too long and possibly delaying other stuff too far.
  // Avoid doing this at all if too near the end of the cycle and risking overrun,
  // leaving any message queued, hoping it does not get overwritten.
  if(getSubCycleTime() >= nearOverrunThreshold) { tooNearOverrun = true; }
    485e:	80 91 b2 00 	lds	r24, 0x00B2
    4862:	87 3f       	cpi	r24, 0xF7	; 247
    4864:	18 f0       	brcs	.+6      	; 0x486c <loop+0xa6>
    4866:	ee 24       	eor	r14, r14
    4868:	e3 94       	inc	r14
    486a:	60 c0       	rjmp	.+192    	; 0x492c <loop+0x166>
  else
    {
    FullStatsMessageCore_t stats;
    getLastCoreStats(&stats);
    486c:	ce 01       	movw	r24, r28
    486e:	07 96       	adiw	r24, 0x07	; 7
    4870:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <getLastCoreStats(FullStatsMessageCore*)>
    if(stats.containsID)
    4874:	8f 81       	ldd	r24, Y+7	; 0x07
    4876:	80 ff       	sbrs	r24, 0
    4878:	58 c0       	rjmp	.+176    	; 0x492a <loop+0x164>
      {
      // Dump (remote) stats field '@<hexnodeID>;TnnCh[P;]'
      // where the T field shows temperature in C with a hex digit after the binary point indicated by C
      // and the optional P field indicates low power.
      serialPrintAndFlush(LINE_START_CHAR_RSTATS);
    487a:	80 e4       	ldi	r24, 0x40	; 64
    487c:	0e 94 81 1a 	call	0x3502	; 0x3502 <serialPrintAndFlush(char)>
      serialPrintAndFlush((((uint16_t)stats.id0) << 8) | stats.id1, HEX);
    4880:	98 85       	ldd	r25, Y+8	; 0x08
    4882:	80 e0       	ldi	r24, 0x00	; 0
    4884:	29 85       	ldd	r18, Y+9	; 0x09
    4886:	30 e0       	ldi	r19, 0x00	; 0
    4888:	82 2b       	or	r24, r18
    488a:	93 2b       	or	r25, r19
    488c:	60 e1       	ldi	r22, 0x10	; 16
    488e:	70 e0       	ldi	r23, 0x00	; 0
    4890:	0e 94 65 1a 	call	0x34ca	; 0x34ca <serialPrintAndFlush(unsigned int, int)>
      if(stats.containsTempAndPower)
    4894:	8f 81       	ldd	r24, Y+7	; 0x07
    4896:	81 ff       	sbrs	r24, 1
    4898:	2b c0       	rjmp	.+86     	; 0x48f0 <loop+0x12a>
        {
        serialPrintAndFlush(F(";T"));
    489a:	8e e7       	ldi	r24, 0x7E	; 126
    489c:	94 e0       	ldi	r25, 0x04	; 4
    489e:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush(stats.tempAndPower.tempC16 >> 4, DEC);
    48a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    48a4:	2b 85       	ldd	r18, Y+11	; 0x0b
    48a6:	92 2f       	mov	r25, r18
    48a8:	9f 77       	andi	r25, 0x7F	; 127
    48aa:	88 0f       	add	r24, r24
    48ac:	99 1f       	adc	r25, r25
    48ae:	b5 e0       	ldi	r27, 0x05	; 5
    48b0:	95 95       	asr	r25
    48b2:	87 95       	ror	r24
    48b4:	ba 95       	dec	r27
    48b6:	e1 f7       	brne	.-8      	; 0x48b0 <loop+0xea>
    48b8:	6a e0       	ldi	r22, 0x0A	; 10
    48ba:	70 e0       	ldi	r23, 0x00	; 0
    48bc:	0e 94 a5 1a 	call	0x354a	; 0x354a <serialPrintAndFlush(int, int)>
        serialPrintAndFlush('C');
    48c0:	83 e4       	ldi	r24, 0x43	; 67
    48c2:	0e 94 81 1a 	call	0x3502	; 0x3502 <serialPrintAndFlush(char)>
        serialPrintAndFlush(stats.tempAndPower.tempC16 & 0xf, HEX);
    48c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    48c8:	2b 85       	ldd	r18, Y+11	; 0x0b
    48ca:	92 2f       	mov	r25, r18
    48cc:	9f 77       	andi	r25, 0x7F	; 127
    48ce:	88 0f       	add	r24, r24
    48d0:	99 1f       	adc	r25, r25
    48d2:	95 95       	asr	r25
    48d4:	87 95       	ror	r24
    48d6:	8f 70       	andi	r24, 0x0F	; 15
    48d8:	90 70       	andi	r25, 0x00	; 0
    48da:	60 e1       	ldi	r22, 0x10	; 16
    48dc:	70 e0       	ldi	r23, 0x00	; 0
    48de:	0e 94 a5 1a 	call	0x354a	; 0x354a <serialPrintAndFlush(int, int)>
        if(stats.tempAndPower.powerLow) { serialPrintAndFlush(F(";P")); } // Insert power-low field if needed.
    48e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    48e4:	87 ff       	sbrs	r24, 7
    48e6:	04 c0       	rjmp	.+8      	; 0x48f0 <loop+0x12a>
    48e8:	8b e7       	ldi	r24, 0x7B	; 123
    48ea:	94 e0       	ldi	r25, 0x04	; 4
    48ec:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <serialPrintAndFlush(__FlashStringHelper const*)>
        }
      if(stats.containsAmbL)
    48f0:	8f 81       	ldd	r24, Y+7	; 0x07
    48f2:	82 ff       	sbrs	r24, 2
    48f4:	0a c0       	rjmp	.+20     	; 0x490a <loop+0x144>
        {
        serialPrintAndFlush(F(";L"));
    48f6:	88 e7       	ldi	r24, 0x78	; 120
    48f8:	94 e0       	ldi	r25, 0x04	; 4
    48fa:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush(stats.ambL);
    48fe:	8c 85       	ldd	r24, Y+12	; 0x0c
    4900:	90 e0       	ldi	r25, 0x00	; 0
    4902:	6a e0       	ldi	r22, 0x0A	; 10
    4904:	70 e0       	ldi	r23, 0x00	; 0
    4906:	0e 94 a5 1a 	call	0x354a	; 0x354a <serialPrintAndFlush(int, int)>
        }
      if(0 != stats.occ)
    490a:	8d 85       	ldd	r24, Y+13	; 0x0d
    490c:	83 70       	andi	r24, 0x03	; 3
    490e:	59 f0       	breq	.+22     	; 0x4926 <loop+0x160>
        {
        serialPrintAndFlush(F(";O"));
    4910:	85 e7       	ldi	r24, 0x75	; 117
    4912:	94 e0       	ldi	r25, 0x04	; 4
    4914:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush(stats.occ);
    4918:	8d 85       	ldd	r24, Y+13	; 0x0d
    491a:	83 70       	andi	r24, 0x03	; 3
    491c:	90 e0       	ldi	r25, 0x00	; 0
    491e:	6a e0       	ldi	r22, 0x0A	; 10
    4920:	70 e0       	ldi	r23, 0x00	; 0
    4922:	0e 94 a5 1a 	call	0x354a	; 0x354a <serialPrintAndFlush(int, int)>
        }
      serialPrintlnAndFlush();
    4926:	0e 94 95 1a 	call	0x352a	; 0x352a <serialPrintlnAndFlush()>
    492a:	ee 24       	eor	r14, r14
  // and could be disabled if no local valve is being run to provide better response to remote nodes.
  bool hubModeBoilerOn = false; // If true then remote call for heat is in progress.
#if defined(USE_MODULE_FHT8VSIMPLE)
  bool needsToEavesdrop = false; // By default assume no need to eavesdrop.
#endif
  if(hubMode)
    492c:	bb 20       	and	r11, r11
    492e:	11 f4       	brne	.+4      	; 0x4934 <loop+0x16e>
    4930:	10 e0       	ldi	r17, 0x00	; 0
    4932:	a0 c0       	rjmp	.+320    	; 0x4a74 <loop+0x2ae>
    {
#if defined(USE_MODULE_FHT8VSIMPLE)
    // Final poll to to cover up to end of previous minor loop.
    // Keep time from here to following SetupToEavesdropOnFHT8V() as short as possible to avoid missing remote calls.
    FHT8VCallForHeatPoll();
    4934:	0e 94 77 0a 	call	0x14ee	; 0x14ee <FHT8VCallForHeatPoll()>

    // Fetch and clear current pending sample house code calling for heat.
    const uint16_t hcRequest = FHT8VCallForHeatHeardGetAndClear();
    4938:	0e 94 16 09 	call	0x122c	; 0x122c <FHT8VCallForHeatHeardGetAndClear()>
    493c:	8c 01       	movw	r16, r24
    const bool heardIt = (hcRequest != ((uint16_t)~0));
    493e:	ff 24       	eor	r15, r15
    4940:	8f ef       	ldi	r24, 0xFF	; 255
    4942:	0f 3f       	cpi	r16, 0xFF	; 255
    4944:	18 07       	cpc	r17, r24
    4946:	11 f0       	breq	.+4      	; 0x494c <loop+0x186>
    4948:	ff 24       	eor	r15, r15
    494a:	f3 94       	inc	r15
    // Don't log call for hear if near overrun,
    // and leave any error queued for next time.
    if(getSubCycleTime() >= nearOverrunThreshold) { tooNearOverrun = true; }
    494c:	80 91 b2 00 	lds	r24, 0x00B2
    4950:	87 3f       	cpi	r24, 0xF7	; 247
    4952:	78 f5       	brcc	.+94     	; 0x49b2 <loop+0x1ec>
    else
      {
      if(heardIt)
    4954:	ff 20       	and	r15, r15
    4956:	d9 f0       	breq	.+54     	; 0x498e <loop+0x1c8>
        {
        DEBUG_SERIAL_TIMESTAMP();
    4958:	0e 94 30 1a 	call	0x3460	; 0x3460 <_debug_serial_timestamp()>
        DEBUG_SERIAL_PRINT(' ');
    495c:	80 e2       	ldi	r24, 0x20	; 32
    495e:	0e 94 81 1a 	call	0x3502	; 0x3502 <serialPrintAndFlush(char)>
        serialPrintAndFlush(F("CfH ")); // Call for heat from 
    4962:	80 e7       	ldi	r24, 0x70	; 112
    4964:	94 e0       	ldi	r25, 0x04	; 4
    4966:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <serialPrintAndFlush(__FlashStringHelper const*)>
        serialPrintAndFlush((hcRequest >> 8) & 0xff);
    496a:	81 2f       	mov	r24, r17
    496c:	90 e0       	ldi	r25, 0x00	; 0
    496e:	6a e0       	ldi	r22, 0x0A	; 10
    4970:	70 e0       	ldi	r23, 0x00	; 0
    4972:	0e 94 65 1a 	call	0x34ca	; 0x34ca <serialPrintAndFlush(unsigned int, int)>
        serialPrintAndFlush(' ');
    4976:	80 e2       	ldi	r24, 0x20	; 32
    4978:	0e 94 81 1a 	call	0x3502	; 0x3502 <serialPrintAndFlush(char)>
        serialPrintAndFlush(hcRequest & 0xff);
    497c:	c8 01       	movw	r24, r16
    497e:	90 70       	andi	r25, 0x00	; 0
    4980:	6a e0       	ldi	r22, 0x0A	; 10
    4982:	70 e0       	ldi	r23, 0x00	; 0
    4984:	0e 94 65 1a 	call	0x34ca	; 0x34ca <serialPrintAndFlush(unsigned int, int)>
        serialPrintlnAndFlush();
    4988:	0e 94 95 1a 	call	0x352a	; 0x352a <serialPrintlnAndFlush()>
    498c:	16 c0       	rjmp	.+44     	; 0x49ba <loop+0x1f4>
        }
      else
        {
        // Check for error if nothing received.
        const uint8_t err = FHT8VLastRXErrGetAndClear();
    498e:	0e 94 25 09 	call	0x124a	; 0x124a <FHT8VLastRXErrGetAndClear()>
    4992:	18 2f       	mov	r17, r24
        if(0 != err)
    4994:	88 23       	and	r24, r24
    4996:	79 f1       	breq	.+94     	; 0x49f6 <loop+0x230>
          {
          serialPrintAndFlush(F("!RXerr F"));
    4998:	87 e6       	ldi	r24, 0x67	; 103
    499a:	94 e0       	ldi	r25, 0x04	; 4
    499c:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <serialPrintAndFlush(__FlashStringHelper const*)>
          serialPrintAndFlush(err);
    49a0:	81 2f       	mov	r24, r17
    49a2:	90 e0       	ldi	r25, 0x00	; 0
    49a4:	6a e0       	ldi	r22, 0x0A	; 10
    49a6:	70 e0       	ldi	r23, 0x00	; 0
    49a8:	0e 94 a5 1a 	call	0x354a	; 0x354a <serialPrintAndFlush(int, int)>
          serialPrintlnAndFlush();
    49ac:	0e 94 95 1a 	call	0x352a	; 0x352a <serialPrintlnAndFlush()>
    49b0:	22 c0       	rjmp	.+68     	; 0x49f6 <loop+0x230>
    49b2:	ee 24       	eor	r14, r14
    49b4:	e3 94       	inc	r14
        }
      }

    // Record call for heat, both to start boiler-on cycle and to defer need to listen again. 
    // Optimisation: may be able to stop RX if boiler is on for local demand (can measure local temp better: less self-heating).
    if(heardIt)
    49b6:	ff 20       	and	r15, r15
    49b8:	f1 f0       	breq	.+60     	; 0x49f6 <loop+0x230>
      {
      if(0 == boilerCountdownTicks)
    49ba:	80 91 e4 01 	lds	r24, 0x01E4
    49be:	90 91 e5 01 	lds	r25, 0x01E5
    49c2:	89 2b       	or	r24, r25
    49c4:	59 f4       	brne	.+22     	; 0x49dc <loop+0x216>
        {
        if(getSubCycleTime() >= nearOverrunThreshold) { tooNearOverrun = true; }
    49c6:	80 91 b2 00 	lds	r24, 0x00B2
    49ca:	87 3f       	cpi	r24, 0xF7	; 247
    49cc:	18 f0       	brcs	.+6      	; 0x49d4 <loop+0x20e>
    49ce:	ee 24       	eor	r14, r14
    49d0:	e3 94       	inc	r14
    49d2:	04 c0       	rjmp	.+8      	; 0x49dc <loop+0x216>
        else { serialPrintlnAndFlush(F("RCfH1")); } // Remote call for heat on.
    49d4:	81 e6       	ldi	r24, 0x61	; 97
    49d6:	94 e0       	ldi	r25, 0x04	; 4
    49d8:	0e 94 ed 1a 	call	0x35da	; 0x35da <serialPrintlnAndFlush(__FlashStringHelper const*)>
        }
      boilerCountdownTicks = getMinBoilerOnMinutes() * (60/MAIN_TICK_S);
    49dc:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <getMinBoilerOnMinutes()>
    49e0:	9e e1       	ldi	r25, 0x1E	; 30
    49e2:	89 9f       	mul	r24, r25
    49e4:	c0 01       	movw	r24, r0
    49e6:	11 24       	eor	r1, r1
    49e8:	90 93 e5 01 	sts	0x01E5, r25
    49ec:	80 93 e4 01 	sts	0x01E4, r24
      boilerNoCallM = 0; // No time has passed since the last call.
    49f0:	10 92 e6 01 	sts	0x01E6, r1
    49f4:	22 c0       	rjmp	.+68     	; 0x4a3a <loop+0x274>
      }
    // Else count down towards boiler off.
    else if(boilerCountdownTicks > 0)
    49f6:	80 91 e4 01 	lds	r24, 0x01E4
    49fa:	90 91 e5 01 	lds	r25, 0x01E5
    49fe:	00 97       	sbiw	r24, 0x00	; 0
    4a00:	99 f0       	breq	.+38     	; 0x4a28 <loop+0x262>
      {
      if(0 == --boilerCountdownTicks)
    4a02:	01 97       	sbiw	r24, 0x01	; 1
    4a04:	90 93 e5 01 	sts	0x01E5, r25
    4a08:	80 93 e4 01 	sts	0x01E4, r24
    4a0c:	89 2b       	or	r24, r25
    4a0e:	a9 f4       	brne	.+42     	; 0x4a3a <loop+0x274>
        {
        if(getSubCycleTime() >= nearOverrunThreshold) { tooNearOverrun = true; }
    4a10:	80 91 b2 00 	lds	r24, 0x00B2
    4a14:	87 3f       	cpi	r24, 0xF7	; 247
    4a16:	18 f0       	brcs	.+6      	; 0x4a1e <loop+0x258>
    4a18:	ee 24       	eor	r14, r14
    4a1a:	e3 94       	inc	r14
    4a1c:	0e c0       	rjmp	.+28     	; 0x4a3a <loop+0x274>
        else { serialPrintlnAndFlush(F("RCfH0")); } // Remote call for heat off
    4a1e:	8b e5       	ldi	r24, 0x5B	; 91
    4a20:	94 e0       	ldi	r25, 0x04	; 4
    4a22:	0e 94 ed 1a 	call	0x35da	; 0x35da <serialPrintlnAndFlush(__FlashStringHelper const*)>
    4a26:	09 c0       	rjmp	.+18     	; 0x4a3a <loop+0x274>
        }
      }
    // Else already off so count up quiet minutes...
    else if(second0 && (boilerNoCallM < (uint8_t)~0)) { ++boilerNoCallM; }         
    4a28:	cc 20       	and	r12, r12
    4a2a:	39 f0       	breq	.+14     	; 0x4a3a <loop+0x274>
    4a2c:	80 91 e6 01 	lds	r24, 0x01E6
    4a30:	8f 3f       	cpi	r24, 0xFF	; 255
    4a32:	19 f0       	breq	.+6      	; 0x4a3a <loop+0x274>
    4a34:	8f 5f       	subi	r24, 0xFF	; 255
    4a36:	80 93 e6 01 	sts	0x01E6, r24

    // Turn boiler output on or off in response to calls for heat.
    hubModeBoilerOn = (boilerCountdownTicks > 0);
    4a3a:	10 e0       	ldi	r17, 0x00	; 0
    4a3c:	80 91 e4 01 	lds	r24, 0x01E4
    4a40:	90 91 e5 01 	lds	r25, 0x01E5
    4a44:	89 2b       	or	r24, r25
    4a46:	09 f0       	breq	.+2      	; 0x4a4a <loop+0x284>
    4a48:	11 e0       	ldi	r17, 0x01	; 1

    // If not running a local TRV, and this without local temperature measurement problems from self-heating,
    // then just listen all the time for maximum simplicity and responsiveness at some cost in extra power consumption.
    // (At least as long as power is not running low for some reasons.)
    if(!localFHT8VTRVEnabled() && !batteryLow)
    4a4a:	0e 94 ef 08 	call	0x11de	; 0x11de <FHT8VGetHC1()>
    4a4e:	84 36       	cpi	r24, 0x64	; 100
    4a50:	28 f4       	brcc	.+10     	; 0x4a5c <loop+0x296>
    4a52:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <FHT8VGetHC2()>
    4a56:	84 36       	cpi	r24, 0x64	; 100
    4a58:	08 f4       	brcc	.+2      	; 0x4a5c <loop+0x296>
    4a5a:	57 c2       	rjmp	.+1198   	; 0x4f0a <loop+0x744>
    4a5c:	dd 20       	and	r13, r13
    4a5e:	09 f0       	breq	.+2      	; 0x4a62 <loop+0x29c>
    4a60:	54 c2       	rjmp	.+1192   	; 0x4f0a <loop+0x744>
    4a62:	5c c2       	rjmp	.+1208   	; 0x4f1c <loop+0x756>
    // Aim to listen in one stretch for greater than full FHT8V TX cycle of ~2m to avoid missing a call for heat.
    // MUST listen for all of final 2 mins of boiler-on to avoid missing TX (without forcing boiler over-run).
    else if((boilerCountdownTicks <= ((MAX_FHT8V_TX_CYCLE_HS+1)/(2*MAIN_TICK_S))) && // Don't miss a final TX that would keep the boiler on...
       (boilerCountdownTicks != 0)) // But don't force unit to listen/RX all the time if no recent call for heat.
      { needsToEavesdrop = true; }
    else if((!heardIt) &&
    4a64:	ff 20       	and	r15, r15
    4a66:	31 f4       	brne	.+12     	; 0x4a74 <loop+0x2ae>
    4a68:	99 20       	and	r9, r9
    4a6a:	21 f4       	brne	.+8      	; 0x4a74 <loop+0x2ae>
    4a6c:	29 55       	subi	r18, 0x59	; 89
    4a6e:	32 40       	sbci	r19, 0x02	; 2
    4a70:	08 f4       	brcc	.+2      	; 0x4a74 <loop+0x2ae>
    4a72:	54 c2       	rjmp	.+1192   	; 0x4f1c <loop+0x756>
#endif
    }
  else
    {
    // Power down and clear radio state (if currently eavesdropping).
    StopEavesdropOnFHT8V(second0);
    4a74:	8c 2d       	mov	r24, r12
    4a76:	0e 94 2d 09 	call	0x125a	; 0x125a <StopEavesdropOnFHT8V(bool)>
    // Clear any RX state so that nothing stale is carried forward.
    FHT8VCallForHeatHeardGetAndClear();
    4a7a:	0e 94 16 09 	call	0x122c	; 0x122c <FHT8VCallForHeatHeardGetAndClear()>
    4a7e:	00 e0       	ldi	r16, 0x00	; 0
#endif


  // Set BOILER_OUT as appropriate for local and/or remote calls for heat.
  // FIXME: local valve-driven boiler on does not obey normal on/off run-time rules.
  fastDigitalWrite(OUT_HEATCALL, ((hubModeBoilerOn || isControlledValveOpen()) ? HIGH : LOW));
    4a80:	11 23       	and	r17, r17
    4a82:	31 f4       	brne	.+12     	; 0x4a90 <loop+0x2ca>
    4a84:	0e 94 04 09 	call	0x1208	; 0x1208 <isControlledValveOpen()>
    4a88:	88 23       	and	r24, r24
    4a8a:	11 f4       	brne	.+4      	; 0x4a90 <loop+0x2ca>
    4a8c:	60 e0       	ldi	r22, 0x00	; 0
    4a8e:	01 c0       	rjmp	.+2      	; 0x4a92 <loop+0x2cc>
    4a90:	61 e0       	ldi	r22, 0x01	; 1
    4a92:	86 e0       	ldi	r24, 0x06	; 6
    4a94:	0e 94 fd 2d 	call	0x5bfa	; 0x5bfa <digitalWrite>
  // NOTE: sleep at the top of the loop to minimise timing jitter/delay from Arduino background activity after loop() returns.
  // DHD20130425: waking up from sleep and getting to start processing below this block may take >10ms.
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("*E"); // End-of-cycle sleep.
#endif
  powerDownSerial(); // Ensure that serial I/O is off.
    4a98:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <powerDownSerial()>
  // Power down most stuff (except radio for hub RX).
  minimisePowerWithoutSleep();
    4a9c:	0e 94 88 14 	call	0x2910	; 0x2910 <minimisePowerWithoutSleep()>
    4aa0:	11 c0       	rjmp	.+34     	; 0x4ac4 <loop+0x2fe>
  uint_fast8_t newTLSD;
  while(TIME_LSD == (newTLSD = getSecondsLT()))
    {
#if defined(ENABLE_BOILER_HUB) && defined(USE_MODULE_FHT8VSIMPLE) // Deal with FHT8V eavesdropping if needed.
    // Poll for RX of remote calls-for-heat if needed.
    if(needsToEavesdrop) { nap30AndPoll(); continue; }
    4aa2:	00 23       	and	r16, r16
    4aa4:	39 f0       	breq	.+14     	; 0x4ab4 <loop+0x2ee>
//   * force if true then force full poll on every call (ie do not internally rate-limit)
// NOTE: implementation may not be in power-management module.
bool pollIO(bool force = false);
// Nap productively polling I/O, etc, across the system while spending time in low-power mode if possible.
// Typically sleeps for about 30ms; tries to allow ealier wakeup if interrupt is received, etc.
static void inline nap30AndPoll() { nap(WDTO_30MS); pollIO(true); }
    4aa6:	81 e0       	ldi	r24, 0x01	; 1
    4aa8:	0e 94 de 11 	call	0x23bc	; 0x23bc <nap(signed char)>
    4aac:	81 e0       	ldi	r24, 0x01	; 1
    4aae:	0e 94 c7 23 	call	0x478e	; 0x478e <pollIO(bool)>
    4ab2:	08 c0       	rjmp	.+16     	; 0x4ac4 <loop+0x2fe>
#endif
#if defined(USE_MODULE_RFM22RADIOSIMPLE) // Force radio to power-saving standby state if appropriate.
    // Force radio to known-low-power state from time to time (not every time to avoid unnecessary SPI work, LED flicker, etc.)
    if(batteryLow || second0) { RFM22ModeStandbyAndClearState(); }
    4ab4:	dd 20       	and	r13, r13
    4ab6:	11 f4       	brne	.+4      	; 0x4abc <loop+0x2f6>
    4ab8:	cc 20       	and	r12, r12
    4aba:	11 f0       	breq	.+4      	; 0x4ac0 <loop+0x2fa>
    4abc:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <RFM22ModeStandbyAndClearState()>
#endif
    sleepUntilInt(); // Normal long minimal-power sleep until wake-up interrupt.
    4ac0:	0e 94 ca 11 	call	0x2394	; 0x2394 <sleepPwrSaveWithBODDisabled()>
#endif
  powerDownSerial(); // Ensure that serial I/O is off.
  // Power down most stuff (except radio for hub RX).
  minimisePowerWithoutSleep();
  uint_fast8_t newTLSD;
  while(TIME_LSD == (newTLSD = getSecondsLT()))
    4ac4:	90 91 c6 01 	lds	r25, 0x01C6
    4ac8:	80 91 e2 01 	lds	r24, 0x01E2
    4acc:	89 17       	cp	r24, r25
    4ace:	49 f3       	breq	.-46     	; 0x4aa2 <loop+0x2dc>
    // Force radio to known-low-power state from time to time (not every time to avoid unnecessary SPI work, LED flicker, etc.)
    if(batteryLow || second0) { RFM22ModeStandbyAndClearState(); }
#endif
    sleepUntilInt(); // Normal long minimal-power sleep until wake-up interrupt.
    }
  TIME_LSD = newTLSD;
    4ad0:	90 93 e2 01 	sts	0x01E2, r25
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("*S"); // Start-of-cycle wake.
#endif

#if defined(ENABLE_BOILER_HUB) && defined(USE_MODULE_FHT8VSIMPLE) // Deal with FHT8V eavesdropping if needed.
  // Check RSSI...
  if(needsToEavesdrop)
    4ad4:	00 23       	and	r16, r16
    4ad6:	79 f0       	breq	.+30     	; 0x4af6 <loop+0x330>
    {
    const uint8_t rssi = RFM22RSSI();
    4ad8:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <RFM22RSSI()>
    4adc:	98 2f       	mov	r25, r24
    static uint8_t lastRSSI;
    if((rssi > 0) && (lastRSSI != rssi))
    4ade:	88 23       	and	r24, r24
    4ae0:	51 f0       	breq	.+20     	; 0x4af6 <loop+0x330>
    4ae2:	80 91 e7 01 	lds	r24, 0x01E7
    4ae6:	89 17       	cp	r24, r25
    4ae8:	31 f0       	breq	.+12     	; 0x4af6 <loop+0x330>
      {
      lastRSSI = rssi;
    4aea:	90 93 e7 01 	sts	0x01E7, r25
      addEntropyToPool(rssi, 0); // Probably some real entropy but don't assume it.
    4aee:	89 2f       	mov	r24, r25
    4af0:	60 e0       	ldi	r22, 0x00	; 0
    4af2:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <addEntropyToPool(unsigned char, unsigned char)>
  // START LOOP BODY
  // ===============


  // Warn if too near overrun before.
  if(tooNearOverrun) { serialPrintlnAndFlush(F("?near overrun")); }
    4af6:	ee 20       	and	r14, r14
    4af8:	21 f0       	breq	.+8      	; 0x4b02 <loop+0x33c>
    4afa:	8d e4       	ldi	r24, 0x4D	; 77
    4afc:	94 e0       	ldi	r25, 0x04	; 4
    4afe:	0e 94 ed 1a 	call	0x35da	; 0x35da <serialPrintlnAndFlush(__FlashStringHelper const*)>


#if defined(USE_MODULE_FHT8VSIMPLE)
  // FHT8V is highest priority and runs first.
  // ---------- HALF SECOND #0 -----------
  bool useExtraFHT8VTXSlots = localFHT8VTRVEnabled() && FHT8VPollSyncAndTX_First(!conserveBattery); // Time for extra TX before UI.
    4b02:	0e 94 ef 08 	call	0x11de	; 0x11de <FHT8VGetHC1()>
    4b06:	84 36       	cpi	r24, 0x64	; 100
    4b08:	68 f4       	brcc	.+26     	; 0x4b24 <loop+0x35e>
    4b0a:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <FHT8VGetHC2()>
    4b0e:	84 36       	cpi	r24, 0x64	; 100
    4b10:	48 f4       	brcc	.+18     	; 0x4b24 <loop+0x35e>
    4b12:	81 e0       	ldi	r24, 0x01	; 1
    4b14:	87 25       	eor	r24, r7
    4b16:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <FHT8VPollSyncAndTX_First(bool)>
    4b1a:	88 23       	and	r24, r24
    4b1c:	19 f0       	breq	.+6      	; 0x4b24 <loop+0x35e>
    4b1e:	cc 24       	eor	r12, r12
    4b20:	c3 94       	inc	r12
    4b22:	01 c0       	rjmp	.+2      	; 0x4b26 <loop+0x360>
    4b24:	cc 24       	eor	r12, r12
  bool recompute = false; // Set true an extra recompute of target temperature should be done.
#if !defined(TWO_S_TICK_RTC_SUPPORT)
  if(0 == (TIME_LSD & 1))
#endif
    {
    if(tickUI(TIME_LSD))
    4b26:	80 91 e2 01 	lds	r24, 0x01E2
    4b2a:	0e 94 a1 22 	call	0x4542	; 0x4542 <tickUI(unsigned char)>
    4b2e:	88 23       	and	r24, r24
    4b30:	19 f0       	breq	.+6      	; 0x4b38 <loop+0x372>
    4b32:	88 24       	eor	r8, r8
    4b34:	83 94       	inc	r8
    4b36:	07 c0       	rjmp	.+14     	; 0x4b46 <loop+0x380>
      recompute = true;
      }
    }
 
  
  if(recompute || recentUIControlUse())
    4b38:	0e 94 0d 1c 	call	0x381a	; 0x381a <recentUIControlUse()>
    4b3c:	88 23       	and	r24, r24
    4b3e:	11 f4       	brne	.+4      	; 0x4b44 <loop+0x37e>
    4b40:	88 24       	eor	r8, r8
    4b42:	03 c0       	rjmp	.+6      	; 0x4b4a <loop+0x384>
    4b44:	88 24       	eor	r8, r8
    {
    computeTargetTemperature(); // Force recompute of temperature for (UI) responsiveness.
    4b46:	0e 94 da 06 	call	0xdb4	; 0xdb4 <computeTargetTemperature()>
    }


#if defined(USE_MODULE_FHT8VSIMPLE)
  if(useExtraFHT8VTXSlots)
    4b4a:	cc 20       	and	r12, r12
    4b4c:	79 f0       	breq	.+30     	; 0x4b6c <loop+0x3a6>
    {
    // Time for extra TX before other actions, but don't bother if minimising power in frost mode.
    // ---------- HALF SECOND #1 -----------
    useExtraFHT8VTXSlots = localFHT8VTRVEnabled() && FHT8VPollSyncAndTX_Next(!conserveBattery); 
    4b4e:	0e 94 ef 08 	call	0x11de	; 0x11de <FHT8VGetHC1()>
    4b52:	84 36       	cpi	r24, 0x64	; 100
    4b54:	50 f4       	brcc	.+20     	; 0x4b6a <loop+0x3a4>
    4b56:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <FHT8VGetHC2()>
    4b5a:	84 36       	cpi	r24, 0x64	; 100
    4b5c:	30 f4       	brcc	.+12     	; 0x4b6a <loop+0x3a4>
    4b5e:	81 e0       	ldi	r24, 0x01	; 1
    4b60:	87 25       	eor	r24, r7
    4b62:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <FHT8VPollSyncAndTX_Next(bool)>
    4b66:	88 23       	and	r24, r24
    4b68:	09 f4       	brne	.+2      	; 0x4b6c <loop+0x3a6>
    4b6a:	cc 24       	eor	r12, r12
  // Once-per-minute tasks: all must take << 0.3s.
  // Run tasks spread throughout the minute to be as kind to batteries (etc) as possible.
  // Only when runAll is true run less-critical tasks that be skipped sometimes when particularly conserving energy.
  // TODO: coordinate temperature reading with time when radio and other heat-generating items are off for more accurate readings.
  // TODO: ensure only take ambient light reading at times when all LEDs are off.
  const bool runAll = (!conserveBattery) || minute0From4ForSensors;
    4b6c:	aa 24       	eor	r10, r10
    4b6e:	a3 94       	inc	r10
    4b70:	a7 24       	eor	r10, r7
    4b72:	11 f0       	breq	.+4      	; 0x4b78 <loop+0x3b2>
    4b74:	11 e0       	ldi	r17, 0x01	; 1
    4b76:	01 c0       	rjmp	.+2      	; 0x4b7a <loop+0x3b4>
    4b78:	19 2d       	mov	r17, r9

  switch(TIME_LSD) // With TWO_S_TICK_RTC_SUPPORT only even seconds are available.
    4b7a:	80 91 e2 01 	lds	r24, 0x01E2
    4b7e:	82 33       	cpi	r24, 0x32	; 50
    4b80:	09 f4       	brne	.+2      	; 0x4b84 <loop+0x3be>
    4b82:	0d c1       	rjmp	.+538    	; 0x4d9e <loop+0x5d8>
    4b84:	83 33       	cpi	r24, 0x33	; 51
    4b86:	68 f4       	brcc	.+26     	; 0x4ba2 <loop+0x3dc>
    4b88:	82 30       	cpi	r24, 0x02	; 2
    4b8a:	29 f1       	breq	.+74     	; 0x4bd6 <loop+0x410>
    4b8c:	83 30       	cpi	r24, 0x03	; 3
    4b8e:	18 f4       	brcc	.+6      	; 0x4b96 <loop+0x3d0>
    4b90:	88 23       	and	r24, r24
    4b92:	b9 f0       	breq	.+46     	; 0x4bc2 <loop+0x3fc>
    4b94:	61 c1       	rjmp	.+706    	; 0x4e58 <loop+0x692>
    4b96:	84 30       	cpi	r24, 0x04	; 4
    4b98:	b9 f1       	breq	.+110    	; 0x4c08 <loop+0x442>
    4b9a:	8a 30       	cpi	r24, 0x0A	; 10
    4b9c:	09 f0       	breq	.+2      	; 0x4ba0 <loop+0x3da>
    4b9e:	5c c1       	rjmp	.+696    	; 0x4e58 <loop+0x692>
    4ba0:	39 c0       	rjmp	.+114    	; 0x4c14 <loop+0x44e>
    4ba2:	86 33       	cpi	r24, 0x36	; 54
    4ba4:	09 f4       	brne	.+2      	; 0x4ba8 <loop+0x3e2>
    4ba6:	07 c1       	rjmp	.+526    	; 0x4db6 <loop+0x5f0>
    4ba8:	87 33       	cpi	r24, 0x37	; 55
    4baa:	20 f4       	brcc	.+8      	; 0x4bb4 <loop+0x3ee>
    4bac:	84 33       	cpi	r24, 0x34	; 52
    4bae:	09 f0       	breq	.+2      	; 0x4bb2 <loop+0x3ec>
    4bb0:	53 c1       	rjmp	.+678    	; 0x4e58 <loop+0x692>
    4bb2:	fb c0       	rjmp	.+502    	; 0x4daa <loop+0x5e4>
    4bb4:	88 33       	cpi	r24, 0x38	; 56
    4bb6:	09 f4       	brne	.+2      	; 0x4bba <loop+0x3f4>
    4bb8:	07 c1       	rjmp	.+526    	; 0x4dc8 <loop+0x602>
    4bba:	8a 33       	cpi	r24, 0x3A	; 58
    4bbc:	09 f0       	breq	.+2      	; 0x4bc0 <loop+0x3fa>
    4bbe:	4c c1       	rjmp	.+664    	; 0x4e58 <loop+0x692>
    4bc0:	34 c1       	rjmp	.+616    	; 0x4e2a <loop+0x664>
    {
    case 0:
      {
      // Tasks that must be run every minute.
      ++minuteCount;
    4bc2:	80 91 e3 01 	lds	r24, 0x01E3
    4bc6:	8f 5f       	subi	r24, 0xFF	; 255
    4bc8:	80 93 e3 01 	sts	0x01E3, r24
      checkUserSchedule(); // Force to user's programmed settings, if any, at the correct time.
    4bcc:	0e 94 5d 22 	call	0x44ba	; 0x44ba <checkUserSchedule()>
      // Ensure that the RTC has been persisted promptly when necessary.
      persistRTC();
    4bd0:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <persistRTC()>
    4bd4:	41 c1       	rjmp	.+642    	; 0x4e58 <loop+0x692>
      break;
      }

    // Churn/reseed PRNG(s) a little to improve unpredictability in use: should be lightweight.
    case 2: { if(runAll) { seedRNG8(minuteCount ^ cycleCountCPU() ^ (uint8_t)getBatterymV(), getSubCycleTime() ^ (uint8_t)getAmbientLight(), (uint8_t)getTemperatureC16()); } break; }
    4bd6:	11 23       	and	r17, r17
    4bd8:	09 f4       	brne	.+2      	; 0x4bdc <loop+0x416>
    4bda:	3e c1       	rjmp	.+636    	; 0x4e58 <loop+0x692>
    4bdc:	06 b5       	in	r16, 0x26	; 38
    4bde:	80 91 e3 01 	lds	r24, 0x01E3
    4be2:	08 27       	eor	r16, r24
    4be4:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <getBatterymV()>
    4be8:	e8 2e       	mov	r14, r24
    4bea:	10 91 b2 00 	lds	r17, 0x00B2
    4bee:	0e 94 3b 04 	call	0x876	; 0x876 <getAmbientLight()>
    4bf2:	f8 2e       	mov	r15, r24
    4bf4:	0e 94 3e 1b 	call	0x367c	; 0x367c <getTemperatureC16()>
    4bf8:	48 2f       	mov	r20, r24
    4bfa:	1f 25       	eor	r17, r15
    4bfc:	80 2f       	mov	r24, r16
    4bfe:	8e 25       	eor	r24, r14
    4c00:	61 2f       	mov	r22, r17
    4c02:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <seedRNG8(unsigned char, unsigned char, unsigned char)>
    4c06:	28 c1       	rjmp	.+592    	; 0x4e58 <loop+0x692>
    // Force read of battery voltage; measure and recompute status less often when already thought to be low, eg when conserving.
    case 4: { if(runAll) { readBatterymV(); } break; }
    4c08:	11 23       	and	r17, r17
    4c0a:	09 f4       	brne	.+2      	; 0x4c0e <loop+0x448>
    4c0c:	25 c1       	rjmp	.+586    	; 0x4e58 <loop+0x692>
    4c0e:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <readBatterymV()>
    4c12:	22 c1       	rjmp	.+580    	; 0x4e58 <loop+0x692>
#endif

    // Regular transmission of stats if NOT driving a local valve and not a hub, ie needing to stay in RX mode.
    case 10:
      {
      if(hubMode) { break; } // Hub can't allow random switch to TX mode.
    4c14:	bb 20       	and	r11, r11
    4c16:	09 f0       	breq	.+2      	; 0x4c1a <loop+0x454>
    4c18:	1f c1       	rjmp	.+574    	; 0x4e58 <loop+0x692>
      if(!enableTrailingMinimalStatsPayload()) { break; } // Not allowed to send stuff like this.
    4c1a:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <enableTrailingMinimalStatsPayload()>
    4c1e:	88 23       	and	r24, r24
    4c20:	09 f4       	brne	.+2      	; 0x4c24 <loop+0x45e>
    4c22:	1a c1       	rjmp	.+564    	; 0x4e58 <loop+0x692>
      
#if defined(USE_MODULE_FHT8VSIMPLE)
      if(localFHT8VTRVEnabled()) { break; } // Do only piggy-back stats TXes if driving an FHT8V to save bandwidth/conflicts.
    4c24:	0e 94 ef 08 	call	0x11de	; 0x11de <FHT8VGetHC1()>
    4c28:	84 36       	cpi	r24, 0x64	; 100
    4c2a:	08 f0       	brcs	.+2      	; 0x4c2e <loop+0x468>
    4c2c:	7c c1       	rjmp	.+760    	; 0x4f26 <loop+0x760>
    4c2e:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <FHT8VGetHC2()>
    4c32:	84 36       	cpi	r24, 0x64	; 100
    4c34:	08 f0       	brcs	.+2      	; 0x4c38 <loop+0x472>
    4c36:	77 c1       	rjmp	.+750    	; 0x4f26 <loop+0x760>
    4c38:	0f c1       	rjmp	.+542    	; 0x4e58 <loop+0x692>
#endif
      // Generally only attempt stats TX in the minute after all sensors should have been polled (so that readings are fresh).
      if(minute1From4AfterSensors ||
    4c3a:	dd 20       	and	r13, r13
    4c3c:	09 f0       	breq	.+2      	; 0x4c40 <loop+0x47a>
    4c3e:	0c c1       	rjmp	.+536    	; 0x4e58 <loop+0x692>
    4c40:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <randRNG8()>
    4c44:	84 72       	andi	r24, 0x24	; 36
    4c46:	09 f0       	breq	.+2      	; 0x4c4a <loop+0x484>
    4c48:	07 c1       	rjmp	.+526    	; 0x4e58 <loop+0x692>
    4c4a:	87 e0       	ldi	r24, 0x07	; 7
    4c4c:	fe 01       	movw	r30, r28
    4c4e:	37 96       	adiw	r30, 0x07	; 7
    4c50:	df 01       	movw	r26, r30
    4c52:	1d 92       	st	X+, r1
    4c54:	8a 95       	dec	r24
    4c56:	e9 f7       	brne	.-6      	; 0x4c52 <loop+0x48c>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    4c58:	f9 99       	sbic	0x1f, 1	; 31
    4c5a:	fe cf       	rjmp	.-4      	; 0x4c58 <loop+0x492>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    4c5c:	84 e1       	ldi	r24, 0x14	; 20
    4c5e:	90 e0       	ldi	r25, 0x00	; 0
    4c60:	92 bd       	out	0x22, r25	; 34
    4c62:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    4c64:	f8 9a       	sbi	0x1f, 0	; 31
    4c66:	80 b5       	in	r24, 0x20	; 32
        (!batteryLow && (0 == (0x24 & randRNG8())))) // Occasional additional TX when not conserving power.
        {
        FullStatsMessageCore_t content;
        clearFullStatsMessageCore(&content); // Defensive programming: all fields should be set explicitly below.
        content.id0 = eeprom_read_byte(0 + (uint8_t *)EE_START_ID);
    4c68:	88 87       	std	Y+8, r24	; 0x08
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    4c6a:	f9 99       	sbic	0x1f, 1	; 31
    4c6c:	fe cf       	rjmp	.-4      	; 0x4c6a <loop+0x4a4>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    4c6e:	85 e1       	ldi	r24, 0x15	; 21
    4c70:	90 e0       	ldi	r25, 0x00	; 0
    4c72:	92 bd       	out	0x22, r25	; 34
    4c74:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    4c76:	f8 9a       	sbi	0x1f, 0	; 31
    4c78:	80 b5       	in	r24, 0x20	; 32
        content.id1 = eeprom_read_byte(1 + (uint8_t *)EE_START_ID);
    4c7a:	89 87       	std	Y+9, r24	; 0x09
        content.containsID = true;
    4c7c:	8f 81       	ldd	r24, Y+7	; 0x07
    4c7e:	81 60       	ori	r24, 0x01	; 1
    4c80:	8f 83       	std	Y+7, r24	; 0x07
        content.tempAndPower.tempC16 = getTemperatureC16();
    4c82:	0e 94 3e 1b 	call	0x367c	; 0x367c <getTemperatureC16()>
    4c86:	8a 87       	std	Y+10, r24	; 0x0a
        content.tempAndPower.powerLow = batteryLow;
    4c88:	d7 94       	ror	r13
    4c8a:	dd 24       	eor	r13, r13
    4c8c:	d7 94       	ror	r13
    4c8e:	9f 77       	andi	r25, 0x7F	; 127
    4c90:	9d 29       	or	r25, r13
    4c92:	9b 87       	std	Y+11, r25	; 0x0b
        content.containsTempAndPower = true;
    4c94:	8f 81       	ldd	r24, Y+7	; 0x07
    4c96:	82 60       	ori	r24, 0x02	; 2
    4c98:	8f 83       	std	Y+7, r24	; 0x07
        content.ambL = fnmax(1, fnmin(254, getAmbientLight() >> 4)); // Coerce to allowed value in range [1,254].
    4c9a:	81 e0       	ldi	r24, 0x01	; 1
    4c9c:	90 e0       	ldi	r25, 0x00	; 0
    4c9e:	9e 83       	std	Y+6, r25	; 0x06
    4ca0:	8d 83       	std	Y+5, r24	; 0x05
    4ca2:	8e ef       	ldi	r24, 0xFE	; 254
    4ca4:	90 e0       	ldi	r25, 0x00	; 0
    4ca6:	9a 83       	std	Y+2, r25	; 0x02
    4ca8:	89 83       	std	Y+1, r24	; 0x01
    4caa:	0e 94 3b 04 	call	0x876	; 0x876 <getAmbientLight()>
    4cae:	e4 e0       	ldi	r30, 0x04	; 4
    4cb0:	95 95       	asr	r25
    4cb2:	87 95       	ror	r24
    4cb4:	ea 95       	dec	r30
    4cb6:	e1 f7       	brne	.-8      	; 0x4cb0 <loop+0x4ea>
    4cb8:	9c 83       	std	Y+4, r25	; 0x04
    4cba:	8b 83       	std	Y+3, r24	; 0x03
    4cbc:	29 81       	ldd	r18, Y+1	; 0x01
    4cbe:	3a 81       	ldd	r19, Y+2	; 0x02
    4cc0:	28 17       	cp	r18, r24
    4cc2:	39 07       	cpc	r19, r25
    4cc4:	0c f4       	brge	.+2      	; 0x4cc8 <loop+0x502>
    4cc6:	c9 01       	movw	r24, r18
    4cc8:	2d 81       	ldd	r18, Y+5	; 0x05
    4cca:	3e 81       	ldd	r19, Y+6	; 0x06
    4ccc:	82 17       	cp	r24, r18
    4cce:	93 07       	cpc	r25, r19
    4cd0:	0c f4       	brge	.+2      	; 0x4cd4 <loop+0x50e>
    4cd2:	c9 01       	movw	r24, r18
    4cd4:	8c 87       	std	Y+12, r24	; 0x0c
        content.containsAmbL = true;
    4cd6:	8f 81       	ldd	r24, Y+7	; 0x07
    4cd8:	84 60       	ori	r24, 0x04	; 4
    4cda:	8f 83       	std	Y+7, r24	; 0x07
        // OC1/OC2 = Occupancy: 00 not disclosed, 01 not occupied, 10 possibly occupied, 11 probably occupied.
        // The encodeFullStatsMessageCore() route should omit data not appopriate for security reasons.
        content.occ = twoBitOccupancyValue();
    4cdc:	0e 94 86 04 	call	0x90c	; 0x90c <twoBitOccupancyValue()>
    4ce0:	83 70       	andi	r24, 0x03	; 3
    4ce2:	9d 85       	ldd	r25, Y+13	; 0x0d
    4ce4:	9c 7f       	andi	r25, 0xFC	; 252
    4ce6:	98 2b       	or	r25, r24
    4ce8:	9d 87       	std	Y+13, r25	; 0x0d

        // Create (insecure) message.
        uint8_t buf[RFM22_PREAMBLE_BYTES + RFM22_SYNC_MIN_BYTES + FullStatsMessageCore_MAX_BYTES_ON_WIRE + 1];
        uint8_t *bptr = buf;
        // Start with RFM23-friendly preamble which ends with with the aacccccc sync word.
        memset(bptr, RFM22_PREAMBLE_BYTE, RFM22_PREAMBLE_BYTES);
    4cea:	ce 01       	movw	r24, r28
    4cec:	0e 96       	adiw	r24, 0x0e	; 14
    4cee:	6a ea       	ldi	r22, 0xAA	; 170
    4cf0:	70 e0       	ldi	r23, 0x00	; 0
    4cf2:	45 e0       	ldi	r20, 0x05	; 5
    4cf4:	50 e0       	ldi	r21, 0x00	; 0
    4cf6:	0e 94 cc 03 	call	0x798	; 0x798 <memset>
        bptr += RFM22_PREAMBLE_BYTES;
        memset(bptr, RFM22_SYNC_BYTE, RFM22_SYNC_MIN_BYTES);
    4cfa:	ce 01       	movw	r24, r28
    4cfc:	43 96       	adiw	r24, 0x13	; 19
    4cfe:	6c ec       	ldi	r22, 0xCC	; 204
    4d00:	70 e0       	ldi	r23, 0x00	; 0
    4d02:	43 e0       	ldi	r20, 0x03	; 3
    4d04:	50 e0       	ldi	r21, 0x00	; 0
    4d06:	0e 94 cc 03 	call	0x798	; 0x798 <memset>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    4d0a:	f9 99       	sbic	0x1f, 1	; 31
    4d0c:	fe cf       	rjmp	.-4      	; 0x4d0a <loop+0x544>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    4d0e:	88 e1       	ldi	r24, 0x18	; 24
    4d10:	90 e0       	ldi	r25, 0x00	; 0
    4d12:	92 bd       	out	0x22, r25	; 34
    4d14:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    4d16:	f8 9a       	sbi	0x1f, 0	; 31
    4d18:	40 b5       	in	r20, 0x20	; 32
        bptr += RFM22_SYNC_MIN_BYTES;
        const uint8_t xmitLevel = eeprom_read_byte((uint8_t *)EE_START_STATS_TX_ENABLE);
        const uint8_t *msg1 = encodeFullStatsMessageCore(bptr, sizeof(buf) - (bptr-buf), (stats_TX_level)xmitLevel, false, &content);
    4d1a:	7e e0       	ldi	r23, 0x0E	; 14
    4d1c:	e7 2e       	mov	r14, r23
    4d1e:	f1 2c       	mov	r15, r1
    4d20:	ec 0e       	add	r14, r28
    4d22:	fd 1e       	adc	r15, r29
    4d24:	ce 01       	movw	r24, r28
    4d26:	46 96       	adiw	r24, 0x16	; 22
    4d28:	6e 2d       	mov	r22, r14
    4d2a:	6f 5e       	subi	r22, 0xEF	; 239
    4d2c:	68 1b       	sub	r22, r24
    4d2e:	50 e0       	ldi	r21, 0x00	; 0
    4d30:	20 e0       	ldi	r18, 0x00	; 0
    4d32:	8e 01       	movw	r16, r28
    4d34:	09 5f       	subi	r16, 0xF9	; 249
    4d36:	1f 4f       	sbci	r17, 0xFF	; 255
    4d38:	0e 94 55 10 	call	0x20aa	; 0x20aa <encodeFullStatsMessageCore(unsigned char*, unsigned char, stats_TX_level, bool, FullStatsMessageCore const*)>
        if(NULL == msg1)
    4d3c:	89 2b       	or	r24, r25
    4d3e:	19 f4       	brne	.+6      	; 0x4d46 <loop+0x580>
          {
DEBUG_SERIAL_PRINTLN_FLASHSTRING("Msg gen err!");
    4d40:	80 e4       	ldi	r24, 0x40	; 64
    4d42:	94 e0       	ldi	r25, 0x04	; 4
    4d44:	29 c0       	rjmp	.+82     	; 0x4d98 <loop+0x5d2>
          break;
          }

        pollIO(); // Deal with any pending I/O.
    4d46:	80 e0       	ldi	r24, 0x00	; 0
    4d48:	0e 94 c7 23 	call	0x478e	; 0x478e <pollIO(bool)>
        sleepLowPowerLessThanMs(1 | (randRNG8() & 0x7f)); // Sleep randomly up to 127ms to spread transmissions and help avoid collisions.
    4d4c:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <randRNG8()>
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Uses formulation likely to be quicker than sleepLowPowerMs() for non-constant argument values,
// and that results in a somewhat shorter sleep than sleepLowPowerMs(ms).
// Assumes MIN_CPU_HZ >> 4000.
static void inline sleepLowPowerLessThanMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed(((MIN_CPU_HZ/4000) * (ms)) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    4d50:	90 e0       	ldi	r25, 0x00	; 0
    4d52:	8e 77       	andi	r24, 0x7E	; 126
    4d54:	90 70       	andi	r25, 0x00	; 0
    4d56:	81 60       	ori	r24, 0x01	; 1
    4d58:	a0 e0       	ldi	r26, 0x00	; 0
    4d5a:	b0 e0       	ldi	r27, 0x00	; 0
    4d5c:	9c 01       	movw	r18, r24
    4d5e:	ad 01       	movw	r20, r26
    4d60:	63 e0       	ldi	r22, 0x03	; 3
    4d62:	22 0f       	add	r18, r18
    4d64:	33 1f       	adc	r19, r19
    4d66:	44 1f       	adc	r20, r20
    4d68:	55 1f       	adc	r21, r21
    4d6a:	6a 95       	dec	r22
    4d6c:	d1 f7       	brne	.-12     	; 0x4d62 <loop+0x59c>
    4d6e:	28 1b       	sub	r18, r24
    4d70:	39 0b       	sbc	r19, r25
    4d72:	4a 0b       	sbc	r20, r26
    4d74:	5b 0b       	sbc	r21, r27
    4d76:	22 50       	subi	r18, 0x02	; 2
    4d78:	30 40       	sbci	r19, 0x00	; 0
    4d7a:	c9 01       	movw	r24, r18
    4d7c:	0e 94 af 11 	call	0x235e	; 0x235e <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
        pollIO(); // Deal with any pending I/O.
    4d80:	80 e0       	ldi	r24, 0x00	; 0
    4d82:	0e 94 c7 23 	call	0x478e	; 0x478e <pollIO(bool)>

        // TODO: put in listen before TX to reduce collisions (CSMA)
        // Send message!
        // Assume RFM22/23 support for now.
        RFM22QueueCmdToFF(buf);
    4d86:	c7 01       	movw	r24, r14
    4d88:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <RFM22QueueCmdToFF(unsigned char*)>
        RFM22TXFIFO(); // Send it!  Approx 1.6ms/byte.     
    4d8c:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <RFM22TXFIFO()>
        RFM22ModeStandbyAndClearState(); // Go to standby to conserve energy.
    4d90:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <RFM22ModeStandbyAndClearState()>
DEBUG_SERIAL_PRINTLN_FLASHSTRING("Bare stats TX");
    4d94:	82 e3       	ldi	r24, 0x32	; 50
    4d96:	94 e0       	ldi	r25, 0x04	; 4
    4d98:	0e 94 ed 1a 	call	0x35da	; 0x35da <serialPrintlnAndFlush(__FlashStringHelper const*)>
    4d9c:	5d c0       	rjmp	.+186    	; 0x4e58 <loop+0x692>
      }

    // Read all environmental inputs, late in the cycle.
#ifdef TEMP_POT_AVAILABLE
    // Sample the user-selected WARM temperature target.
    case 50: { if(runAll) { readTempPot(); } break; }
    4d9e:	11 23       	and	r17, r17
    4da0:	09 f4       	brne	.+2      	; 0x4da4 <loop+0x5de>
    4da2:	5a c0       	rjmp	.+180    	; 0x4e58 <loop+0x692>
    4da4:	0e 94 06 1b 	call	0x360c	; 0x360c <readTempPot()>
    4da8:	57 c0       	rjmp	.+174    	; 0x4e58 <loop+0x692>
#endif
    // Sample ambient light levels.
    case 52: { if(runAll) { readAmbientLight(); } break; }
    4daa:	11 23       	and	r17, r17
    4dac:	09 f4       	brne	.+2      	; 0x4db0 <loop+0x5ea>
    4dae:	54 c0       	rjmp	.+168    	; 0x4e58 <loop+0x692>
    4db0:	0e 94 40 04 	call	0x880	; 0x880 <readAmbientLight()>
    4db4:	51 c0       	rjmp	.+162    	; 0x4e58 <loop+0x692>
    // At a hub, sample temperature as late as possible in (and only in the 'quiet') minute, to reduce valve hunting from self-heating.
    case 54: { if(hubMode ? minute0From4ForSensors : runAll) { readTemperatureC16(); } break; }
    4db6:	bb 20       	and	r11, r11
    4db8:	09 f4       	brne	.+2      	; 0x4dbc <loop+0x5f6>
    4dba:	91 2e       	mov	r9, r17
    4dbc:	99 20       	and	r9, r9
    4dbe:	09 f4       	brne	.+2      	; 0x4dc2 <loop+0x5fc>
    4dc0:	4b c0       	rjmp	.+150    	; 0x4e58 <loop+0x692>
    4dc2:	0e 94 43 1b 	call	0x3686	; 0x3686 <readTemperatureC16()>
    4dc6:	48 c0       	rjmp	.+144    	; 0x4e58 <loop+0x692>
      {
      static bool boilerOn; // Internal record of current boiler-out state.

      // Recompute target, valve position and call for heat, etc.
      // Should be called once per minute to work correctly.
      if(computeCallForHeat() ||
    4dc8:	0e 94 16 07 	call	0xe2c	; 0xe2c <computeCallForHeat()>
    4dcc:	88 23       	and	r24, r24
    4dce:	31 f4       	brne	.+12     	; 0x4ddc <loop+0x616>
    4dd0:	66 20       	and	r6, r6
    4dd2:	71 f0       	breq	.+28     	; 0x4df0 <loop+0x62a>
    4dd4:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <enableTrailingMinimalStatsPayload()>
    4dd8:	88 23       	and	r24, r24
    4dda:	51 f0       	breq	.+20     	; 0x4df0 <loop+0x62a>
        // If there was a change in target valve position,
        // or periodically in a minute after all sensors should have been read,
        // precompute some or all of any outgoing frames/stats/etc ready for transmission.
#if defined(USE_MODULE_FHT8VSIMPLE)
        // Recompute FHT8V command to send if target valve setting has changed...
        if(localFHT8VTRVEnabled()) { FHT8VCreateValveSetCmdFrame(); }
    4ddc:	0e 94 ef 08 	call	0x11de	; 0x11de <FHT8VGetHC1()>
    4de0:	84 36       	cpi	r24, 0x64	; 100
    4de2:	30 f4       	brcc	.+12     	; 0x4df0 <loop+0x62a>
    4de4:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <FHT8VGetHC2()>
    4de8:	84 36       	cpi	r24, 0x64	; 100
    4dea:	10 f4       	brcc	.+4      	; 0x4df0 <loop+0x62a>
    4dec:	0e 94 a6 0c 	call	0x194c	; 0x194c <FHT8VCreateValveSetCmdFrame()>
#endif
        }

#if defined(ENABLE_BOILER_HUB)
      // Track how long since remote call for heat last heard.
      if(hubMode)
    4df0:	bb 20       	and	r11, r11
    4df2:	b1 f0       	breq	.+44     	; 0x4e20 <loop+0x65a>
        {
        if(boilerCountdownTicks != 0)
    4df4:	80 91 e4 01 	lds	r24, 0x01E4
    4df8:	90 91 e5 01 	lds	r25, 0x01E5
    4dfc:	89 2b       	or	r24, r25
    4dfe:	81 f0       	breq	.+32     	; 0x4e20 <loop+0x65a>
          {
#if 1 && defined(DEBUG)
          DEBUG_SERIAL_PRINT_FLASHSTRING("Boiler on, s left: ");
    4e00:	8e e1       	ldi	r24, 0x1E	; 30
    4e02:	94 e0       	ldi	r25, 0x04	; 4
    4e04:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <serialPrintAndFlush(__FlashStringHelper const*)>
          DEBUG_SERIAL_PRINT(boilerCountdownTicks * MAIN_TICK_S);
    4e08:	80 91 e4 01 	lds	r24, 0x01E4
    4e0c:	90 91 e5 01 	lds	r25, 0x01E5
    4e10:	88 0f       	add	r24, r24
    4e12:	99 1f       	adc	r25, r25
    4e14:	6a e0       	ldi	r22, 0x0A	; 10
    4e16:	70 e0       	ldi	r23, 0x00	; 0
    4e18:	0e 94 65 1a 	call	0x34ca	; 0x34ca <serialPrintAndFlush(unsigned int, int)>
          DEBUG_SERIAL_PRINTLN();
    4e1c:	0e 94 95 1a 	call	0x352a	; 0x352a <serialPrintlnAndFlush()>
          }
        }
#endif

      // Show current status if appropriate.
      if(runAll) { showStatus = true; }
    4e20:	11 23       	and	r17, r17
    4e22:	d1 f0       	breq	.+52     	; 0x4e58 <loop+0x692>
    4e24:	88 24       	eor	r8, r8
    4e26:	83 94       	inc	r8
    4e28:	17 c0       	rjmp	.+46     	; 0x4e58 <loop+0x692>
    // Stats samples; should never be missed.
    case 58:
      {
      // Take full stats sample as near the end of the hour as reasonably possible (without danger of overrun),
      // and with other optional non-full samples evenly spaced throughout the hour (if not low on battery).
      if(minute0From4ForSensors) // Hope to take lowest-noise samples on the special minute out of each 4.
    4e2a:	99 20       	and	r9, r9
    4e2c:	a9 f0       	breq	.+42     	; 0x4e58 <loop+0x692>
        {
        const uint_least8_t mm = getMinutesLT();
    4e2e:	0e 94 68 18 	call	0x30d0	; 0x30d0 <getMinutesLT()>
        switch(mm)
    4e32:	88 32       	cpi	r24, 0x28	; 40
    4e34:	30 f4       	brcc	.+12     	; 0x4e42 <loop+0x67c>
    4e36:	84 32       	cpi	r24, 0x24	; 36
    4e38:	40 f4       	brcc	.+16     	; 0x4e4a <loop+0x684>
    4e3a:	80 51       	subi	r24, 0x10	; 16
    4e3c:	84 30       	cpi	r24, 0x04	; 4
    4e3e:	60 f4       	brcc	.+24     	; 0x4e58 <loop+0x692>
    4e40:	04 c0       	rjmp	.+8      	; 0x4e4a <loop+0x684>
    4e42:	88 53       	subi	r24, 0x38	; 56
    4e44:	84 30       	cpi	r24, 0x04	; 4
    4e46:	40 f4       	brcc	.+16     	; 0x4e58 <loop+0x692>
    4e48:	04 c0       	rjmp	.+8      	; 0x4e52 <loop+0x68c>
          {
          case 16: case 17: case 18: case 19:
          case 36: case 37: case 38: case 39:
            { if(!batteryLow) { sampleStats(false); } break; } // Skip sub-samples if short of juice.
    4e4a:	dd 20       	and	r13, r13
    4e4c:	29 f4       	brne	.+10     	; 0x4e58 <loop+0x692>
    4e4e:	80 e0       	ldi	r24, 0x00	; 0
    4e50:	01 c0       	rjmp	.+2      	; 0x4e54 <loop+0x68e>
          case 56: case 57: case 58: case 59:
            { sampleStats(true); break; } // Always take the full sample at end of hour.
    4e52:	81 e0       	ldi	r24, 0x01	; 1
    4e54:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <sampleStats(bool)>
      break;
      }
    }

#if defined(USE_MODULE_FHT8VSIMPLE) && defined(TWO_S_TICK_RTC_SUPPORT)
  if(useExtraFHT8VTXSlots)
    4e58:	cc 20       	and	r12, r12
    4e5a:	71 f0       	breq	.+28     	; 0x4e78 <loop+0x6b2>
    {
    // Time for extra TX before other actions, but don't bother if minimising power in frost mode.
    // ---------- HALF SECOND #2 -----------
    useExtraFHT8VTXSlots = localFHT8VTRVEnabled() && FHT8VPollSyncAndTX_Next(!conserveBattery); 
    4e5c:	0e 94 ef 08 	call	0x11de	; 0x11de <FHT8VGetHC1()>
    4e60:	84 36       	cpi	r24, 0x64	; 100
    4e62:	48 f4       	brcc	.+18     	; 0x4e76 <loop+0x6b0>
    4e64:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <FHT8VGetHC2()>
    4e68:	84 36       	cpi	r24, 0x64	; 100
    4e6a:	28 f4       	brcc	.+10     	; 0x4e76 <loop+0x6b0>
    4e6c:	8a 2d       	mov	r24, r10
    4e6e:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <FHT8VPollSyncAndTX_Next(bool)>
    4e72:	88 23       	and	r24, r24
    4e74:	09 f4       	brne	.+2      	; 0x4e78 <loop+0x6b2>
    4e76:	cc 24       	eor	r12, r12
//    if(useExtraFHT8VTXSlots) { DEBUG_SERIAL_PRINTLN_FLASHSTRING("ES@2"); }
    }
#endif

  // Generate periodic status reports.
  if(showStatus) { serialStatusReport(); }
    4e78:	88 20       	and	r8, r8
    4e7a:	11 f0       	breq	.+4      	; 0x4e80 <loop+0x6ba>
    4e7c:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <serialStatusReport()>

#if defined(USE_MODULE_FHT8VSIMPLE) && defined(TWO_S_TICK_RTC_SUPPORT)
  if(useExtraFHT8VTXSlots)
    4e80:	cc 20       	and	r12, r12
    4e82:	59 f0       	breq	.+22     	; 0x4e9a <loop+0x6d4>
    {
    // ---------- HALF SECOND #3 -----------
    useExtraFHT8VTXSlots = localFHT8VTRVEnabled() && FHT8VPollSyncAndTX_Next(!conserveBattery); 
    4e84:	0e 94 ef 08 	call	0x11de	; 0x11de <FHT8VGetHC1()>
    4e88:	84 36       	cpi	r24, 0x64	; 100
    4e8a:	38 f4       	brcc	.+14     	; 0x4e9a <loop+0x6d4>
    4e8c:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <FHT8VGetHC2()>
    4e90:	84 36       	cpi	r24, 0x64	; 100
    4e92:	18 f4       	brcc	.+6      	; 0x4e9a <loop+0x6d4>
    4e94:	8a 2d       	mov	r24, r10
    4e96:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <FHT8VPollSyncAndTX_Next(bool)>
  // AND the CLI is / should be active OR a status line has just been output
  // then poll/prompt the user for input
  // using a timeout which should safely avoid missing the next basic tick
  // and which should also allow some energy-saving sleep.
#if 1 && defined(SUPPORT_CLI)
  const bool humanCLIUse = isCLIActive(); // Keeping CLI active for human interaction rather than for automated interaction.
    4e9a:	0e 94 08 1c 	call	0x3810	; 0x3810 <isCLIActive()>
    4e9e:	98 2f       	mov	r25, r24
  if(showStatus || humanCLIUse)
    4ea0:	88 20       	and	r8, r8
    4ea2:	11 f4       	brne	.+4      	; 0x4ea8 <loop+0x6e2>
    4ea4:	88 23       	and	r24, r24
    4ea6:	59 f0       	breq	.+22     	; 0x4ebe <loop+0x6f8>
    {
    const uint8_t sct = getSubCycleTime();
    4ea8:	80 91 b2 00 	lds	r24, 0x00B2
    const uint8_t listenTime = max(GSCT_MAX/16, CLI_POLL_MIN_SCT);
    if(sct < (GSCT_MAX - 2*listenTime))
    4eac:	8d 3c       	cpi	r24, 0xCD	; 205
    4eae:	38 f4       	brcc	.+14     	; 0x4ebe <loop+0x6f8>
      // Don't listen beyond the last 16th of the cycle,
      // or a minimal time if only prodding for interaction with automated front-end,
      // as listening for UART RX uses lots of power.
      { pollCLI(humanCLIUse ? (GSCT_MAX-listenTime) : (sct+CLI_POLL_MIN_SCT)); }
    4eb0:	99 23       	and	r25, r25
    4eb2:	11 f0       	breq	.+4      	; 0x4eb8 <loop+0x6f2>
    4eb4:	86 ee       	ldi	r24, 0xE6	; 230
    4eb6:	01 c0       	rjmp	.+2      	; 0x4eba <loop+0x6f4>
    4eb8:	87 5e       	subi	r24, 0xE7	; 231
    4eba:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <pollCLI(unsigned char)>
    DEBUG_SERIAL_PRINTLN();
    }
#endif

  // Detect and handle (actual or near) overrun, if it happens, though it should not.
  if(TIME_LSD != getSecondsLT())
    4ebe:	90 91 c6 01 	lds	r25, 0x01C6
    4ec2:	80 91 e2 01 	lds	r24, 0x01E2
    4ec6:	89 17       	cp	r24, r25
    4ec8:	91 f1       	breq	.+100    	; 0x4f2e <loop+0x768>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    4eca:	f9 99       	sbic	0x1f, 1	; 31
    4ecc:	fe cf       	rjmp	.-4      	; 0x4eca <loop+0x704>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    4ece:	89 e1       	ldi	r24, 0x19	; 25
    4ed0:	90 e0       	ldi	r25, 0x00	; 0
    4ed2:	92 bd       	out	0x22, r25	; 34
    4ed4:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    4ed6:	f8 9a       	sbi	0x1f, 0	; 31
    4ed8:	10 b5       	in	r17, 0x20	; 32
    {
    // Increment the overrun counter (stored inverted, so 0xff initialised => 0 overruns).
    const uint8_t orc = 1 + ~eeprom_read_byte((uint8_t *)EE_START_OVERRUN_COUNTER);
    4eda:	11 95       	neg	r17
    eeprom_smart_update_byte((uint8_t *)EE_START_OVERRUN_COUNTER, ~orc);
    4edc:	61 2f       	mov	r22, r17
    4ede:	60 95       	com	r22
    4ee0:	0e 94 05 08 	call	0x100a	; 0x100a <eeprom_smart_update_byte(unsigned char*, unsigned char)>
#if 1 && defined(DEBUG)
    DEBUG_SERIAL_PRINT_FLASHSTRING("!ERROR: loop overrun ");
    4ee4:	88 e0       	ldi	r24, 0x08	; 8
    4ee6:	94 e0       	ldi	r25, 0x04	; 4
    4ee8:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <serialPrintAndFlush(__FlashStringHelper const*)>
    DEBUG_SERIAL_PRINT(orc);
    4eec:	81 2f       	mov	r24, r17
    4eee:	90 e0       	ldi	r25, 0x00	; 0
    4ef0:	6a e0       	ldi	r22, 0x0A	; 10
    4ef2:	70 e0       	ldi	r23, 0x00	; 0
    4ef4:	0e 94 a5 1a 	call	0x354a	; 0x354a <serialPrintAndFlush(int, int)>
    DEBUG_SERIAL_PRINTLN();
    4ef8:	0e 94 95 1a 	call	0x352a	; 0x352a <serialPrintlnAndFlush()>
#endif
#if defined(USE_MODULE_FHT8VSIMPLE)
    FHT8VSyncAndTXReset(); // Assume that sync with valve may have been lost, so re-sync.
    4efc:	0e 94 0d 09 	call	0x121a	; 0x121a <FHT8VSyncAndTXReset()>
#endif
    TIME_LSD = getSecondsLT(); // Prepare to sleep until start of next full minor cycle.
    4f00:	80 91 c6 01 	lds	r24, 0x01C6
    4f04:	80 93 e2 01 	sts	0x01E2, r24
    4f08:	12 c0       	rjmp	.+36     	; 0x4f2e <loop+0x768>
    // Optimisation: if just heard a call need not listen on this next cycle.
    // Optimisation: if boiler timeout is a long time away (>> one FHT8V TX cycle, ~2 minutes excl quiet minute), then can avoid listening for now.
    //    Longish period without any RX listening may allow hub unit to cool and get better sample of local temperature if marginal.
    // Aim to listen in one stretch for greater than full FHT8V TX cycle of ~2m to avoid missing a call for heat.
    // MUST listen for all of final 2 mins of boiler-on to avoid missing TX (without forcing boiler over-run).
    else if((boilerCountdownTicks <= ((MAX_FHT8V_TX_CYCLE_HS+1)/(2*MAIN_TICK_S))) && // Don't miss a final TX that would keep the boiler on...
    4f0a:	20 91 e4 01 	lds	r18, 0x01E4
    4f0e:	30 91 e5 01 	lds	r19, 0x01E5
    4f12:	c9 01       	movw	r24, r18
    4f14:	01 97       	sbiw	r24, 0x01	; 1
    4f16:	cb 97       	sbiw	r24, 0x3b	; 59
    4f18:	08 f0       	brcs	.+2      	; 0x4f1c <loop+0x756>
    4f1a:	a4 cd       	rjmp	.-1208   	; 0x4a64 <loop+0x29e>
#if defined(USE_MODULE_FHT8VSIMPLE)
  // Act on eavesdropping need, setting up or clearing down hooks as required.
  if(needsToEavesdrop)
    {
    // Ensure radio is in RX mode rather than standby, and possibly hook up interrupts if available (REV1 board).
    SetupToEavesdropOnFHT8V(second0); // Start listening (if not already so).
    4f1c:	8c 2d       	mov	r24, r12
    4f1e:	0e 94 40 09 	call	0x1280	; 0x1280 <SetupToEavesdropOnFHT8V(bool)>
    4f22:	01 e0       	ldi	r16, 0x01	; 1
    4f24:	ad cd       	rjmp	.-1190   	; 0x4a80 <loop+0x2ba>
      
#if defined(USE_MODULE_FHT8VSIMPLE)
      if(localFHT8VTRVEnabled()) { break; } // Do only piggy-back stats TXes if driving an FHT8V to save bandwidth/conflicts.
#endif
      // Generally only attempt stats TX in the minute after all sensors should have been polled (so that readings are fresh).
      if(minute1From4AfterSensors ||
    4f26:	66 20       	and	r6, r6
    4f28:	09 f0       	breq	.+2      	; 0x4f2c <loop+0x766>
    4f2a:	8f ce       	rjmp	.-738    	; 0x4c4a <loop+0x484>
    4f2c:	86 ce       	rjmp	.-756    	; 0x4c3a <loop+0x474>
  else if(getSubCycleTime() >= nearOverrunThreshold)
    {
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("?O"); // Near overrun.  Note 2ms/char to send...
    }
#endif
  }
    4f2e:	6e 96       	adiw	r28, 0x1e	; 30
    4f30:	0f b6       	in	r0, 0x3f	; 63
    4f32:	f8 94       	cli
    4f34:	de bf       	out	0x3e, r29	; 62
    4f36:	0f be       	out	0x3f, r0	; 63
    4f38:	cd bf       	out	0x3d, r28	; 61
    4f3a:	cf 91       	pop	r28
    4f3c:	df 91       	pop	r29
    4f3e:	1f 91       	pop	r17
    4f40:	0f 91       	pop	r16
    4f42:	ff 90       	pop	r15
    4f44:	ef 90       	pop	r14
    4f46:	df 90       	pop	r13
    4f48:	cf 90       	pop	r12
    4f4a:	bf 90       	pop	r11
    4f4c:	af 90       	pop	r10
    4f4e:	9f 90       	pop	r9
    4f50:	8f 90       	pop	r8
    4f52:	7f 90       	pop	r7
    4f54:	6f 90       	pop	r6
    4f56:	08 95       	ret

00004f58 <sleepLowPowerMs(unsigned int)>:
// Sleep/spin for approx specified strictly-positive number of milliseconds, in as low-power mode as possible.
// This may be achieved in part by dynamically slowing the CPU clock if possible.
// Macro to allow some constant folding at compile time where the sleep-time argument is constant.
// Should be good for values up to at least 1000, ie 1 second.
// Assumes MIN_CPU_HZ >> 4000.
static void inline sleepLowPowerMs(const uint16_t ms) { sleepLowPowerLoopsMinCPUSpeed((((MIN_CPU_HZ * (ms)) + 2000) / 4000) - ((MIN_CPU_HZ>=12000)?2:((MIN_CPU_HZ>=8000)?1:0))); }
    4f58:	a0 e0       	ldi	r26, 0x00	; 0
    4f5a:	b0 e0       	ldi	r27, 0x00	; 0
    4f5c:	bc 01       	movw	r22, r24
    4f5e:	cd 01       	movw	r24, r26
    4f60:	22 e1       	ldi	r18, 0x12	; 18
    4f62:	3a e7       	ldi	r19, 0x7A	; 122
    4f64:	40 e0       	ldi	r20, 0x00	; 0
    4f66:	50 e0       	ldi	r21, 0x00	; 0
    4f68:	0e 94 c4 33 	call	0x6788	; 0x6788 <__mulsi3>
    4f6c:	60 53       	subi	r22, 0x30	; 48
    4f6e:	78 4f       	sbci	r23, 0xF8	; 248
    4f70:	8f 4f       	sbci	r24, 0xFF	; 255
    4f72:	9f 4f       	sbci	r25, 0xFF	; 255
    4f74:	20 ea       	ldi	r18, 0xA0	; 160
    4f76:	3f e0       	ldi	r19, 0x0F	; 15
    4f78:	40 e0       	ldi	r20, 0x00	; 0
    4f7a:	50 e0       	ldi	r21, 0x00	; 0
    4f7c:	0e 94 2c 34 	call	0x6858	; 0x6858 <__divmodsi4>
    4f80:	da 01       	movw	r26, r20
    4f82:	c9 01       	movw	r24, r18
    4f84:	02 97       	sbiw	r24, 0x02	; 2
    4f86:	0e 94 af 11 	call	0x235e	; 0x235e <sleepLowPowerLoopsMinCPUSpeed(unsigned int)>
    4f8a:	08 95       	ret

00004f8c <posPOST(unsigned char, __FlashStringHelper const*)>:
//   * Two quick flashes from the Arduino bootloader then the LED comes on.
//   * Each of the 5 main sections of Power On Self Test is 1 second LED on, 0.5 second off, n short flashes separated by 0.25s off, then 0.5s off, then 1s on.
//     The value of n is 1, 2, 3, 4, 5.
//   * The LED should then go off except for optional faint flickers as the radio is being driven if set up to do so.
#define PP_OFF_MS 250
static void posPOST(const uint8_t position, const __FlashStringHelper *s)
    4f8c:	ff 92       	push	r15
    4f8e:	0f 93       	push	r16
    4f90:	1f 93       	push	r17
    4f92:	cf 93       	push	r28
    4f94:	df 93       	push	r29
    4f96:	f8 2e       	mov	r15, r24
    4f98:	8b 01       	movw	r16, r22
  {
  sleepLowPowerMs(1000);
    4f9a:	88 ee       	ldi	r24, 0xE8	; 232
    4f9c:	93 e0       	ldi	r25, 0x03	; 3
    4f9e:	0e 94 ac 27 	call	0x4f58	; 0x4f58 <sleepLowPowerMs(unsigned int)>
#ifdef DEBUG
  DEBUG_SERIAL_PRINT_FLASHSTRING("posPOST: "); // Can only be used once serial is set up.
    4fa2:	8e e5       	ldi	r24, 0x5E	; 94
    4fa4:	96 e0       	ldi	r25, 0x06	; 6
    4fa6:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(position);
    4faa:	cf 2d       	mov	r28, r15
    4fac:	d0 e0       	ldi	r29, 0x00	; 0
    4fae:	ce 01       	movw	r24, r28
    4fb0:	6a e0       	ldi	r22, 0x0A	; 10
    4fb2:	70 e0       	ldi	r23, 0x00	; 0
    4fb4:	0e 94 a5 1a 	call	0x354a	; 0x354a <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINT_FLASHSTRING(": ");
    4fb8:	8b e5       	ldi	r24, 0x5B	; 91
    4fba:	96 e0       	ldi	r25, 0x06	; 6
    4fbc:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(s);
    4fc0:	c8 01       	movw	r24, r16
    4fc2:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINTLN();
    4fc6:	0e 94 95 1a 	call	0x352a	; 0x352a <serialPrintlnAndFlush()>
#else
  serialPrintlnAndFlush(s);
#endif
//  pinMode(LED_HEATCALL, OUTPUT);
  LED_HEATCALL_OFF();
    4fca:	5c 9a       	sbi	0x0b, 4	; 11
  sleepLowPowerMs(2*PP_OFF_MS); // TODO: use this time to gather entropy.
    4fcc:	84 ef       	ldi	r24, 0xF4	; 244
    4fce:	91 e0       	ldi	r25, 0x01	; 1
    4fd0:	07 c0       	rjmp	.+14     	; 0x4fe0 <posPOST(unsigned char, __FlashStringHelper const*)+0x54>
  
  int i = position;
  while(--i >= 0)
    {
    LED_HEATCALL_ON();
    4fd2:	5c 98       	cbi	0x0b, 4	; 11
// Very tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define VERYTINY_PAUSE_MS 5
static void inline veryTinyPause() { sleepLowPowerMs(VERYTINY_PAUSE_MS); }
// Tiny low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define TINY_PAUSE_MS 15
static void inline tinyPause() { nap(WDTO_15MS); } // 15ms vs 18ms nominal for PICAXE V0.09 impl.
    4fd4:	80 e0       	ldi	r24, 0x00	; 0
    4fd6:	0e 94 de 11 	call	0x23bc	; 0x23bc <nap(signed char)>
    tinyPause();
    LED_HEATCALL_OFF();
    4fda:	5c 9a       	sbi	0x0b, 4	; 11
    sleepLowPowerMs(PP_OFF_MS); // TODO: use this time to gather entropy.
    4fdc:	8a ef       	ldi	r24, 0xFA	; 250
    4fde:	90 e0       	ldi	r25, 0x00	; 0
    4fe0:	0e 94 ac 27 	call	0x4f58	; 0x4f58 <sleepLowPowerMs(unsigned int)>
//  pinMode(LED_HEATCALL, OUTPUT);
  LED_HEATCALL_OFF();
  sleepLowPowerMs(2*PP_OFF_MS); // TODO: use this time to gather entropy.
  
  int i = position;
  while(--i >= 0)
    4fe4:	21 97       	sbiw	r28, 0x01	; 1
    4fe6:	8f ef       	ldi	r24, 0xFF	; 255
    4fe8:	cf 3f       	cpi	r28, 0xFF	; 255
    4fea:	d8 07       	cpc	r29, r24
    4fec:	91 f7       	brne	.-28     	; 0x4fd2 <posPOST(unsigned char, __FlashStringHelper const*)+0x46>
    tinyPause();
    LED_HEATCALL_OFF();
    sleepLowPowerMs(PP_OFF_MS); // TODO: use this time to gather entropy.
    }

  sleepLowPowerMs(PP_OFF_MS); // TODO: use this time to gather entropy.
    4fee:	8a ef       	ldi	r24, 0xFA	; 250
    4ff0:	90 e0       	ldi	r25, 0x00	; 0
    4ff2:	0e 94 ac 27 	call	0x4f58	; 0x4f58 <sleepLowPowerMs(unsigned int)>
  LED_HEATCALL_ON();
    4ff6:	5c 98       	cbi	0x0b, 4	; 11
  sleepLowPowerMs(1000); // TODO: use this time to gather entropy.
    4ff8:	88 ee       	ldi	r24, 0xE8	; 232
    4ffa:	93 e0       	ldi	r25, 0x03	; 3
    4ffc:	0e 94 ac 27 	call	0x4f58	; 0x4f58 <sleepLowPowerMs(unsigned int)>
  }
    5000:	df 91       	pop	r29
    5002:	cf 91       	pop	r28
    5004:	1f 91       	pop	r17
    5006:	0f 91       	pop	r16
    5008:	ff 90       	pop	r15
    500a:	08 95       	ret

0000500c <panic()>:
// Tries not to use lots of energy so as to keep distress beacon running for a while.
void panic()
  {
#ifdef USE_MODULE_RFM22RADIOSIMPLE
  // Reset radio and go into low-power mode.
  RFM22PowerOnInit();
    500c:	0e 94 10 17 	call	0x2e20	; 0x2e20 <RFM22PowerOnInit()>
#endif
  // Power down almost everything else...
  minimisePowerWithoutSleep();
    5010:	0e 94 88 14 	call	0x2910	; 0x2910 <minimisePowerWithoutSleep()>
#ifdef LED_HEATCALL
  pinMode(LED_HEATCALL, OUTPUT);
#else
  pinMode(LED_HEATCALL_L, OUTPUT);
    5014:	84 e0       	ldi	r24, 0x04	; 4
    5016:	61 e0       	ldi	r22, 0x01	; 1
    5018:	0e 94 be 2d 	call	0x5b7c	; 0x5b7c <pinMode>
#endif
  for( ; ; )
    {
    LED_HEATCALL_ON();
    501c:	5c 98       	cbi	0x0b, 4	; 11
    501e:	80 e0       	ldi	r24, 0x00	; 0
    5020:	0e 94 de 11 	call	0x23bc	; 0x23bc <nap(signed char)>
    tinyPause();
    LED_HEATCALL_OFF();
    5024:	5c 9a       	sbi	0x0b, 4	; 11
// Medium low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define MEDIUM_PAUSE_MS 60
static void inline mediumPause() { nap(WDTO_60MS); } // 60ms vs 144ms nominal for PICAXE V0.09 impl.
// Big low-power sleep to approximately match the PICAXE V0.09 routine of the same name.
#define BIG_PAUSE_MS 120
static void inline bigPause() { nap(WDTO_120MS); } // 120ms vs 288ms nominal for PICAXE V0.09 impl.
    5026:	83 e0       	ldi	r24, 0x03	; 3
    5028:	0e 94 de 11 	call	0x23bc	; 0x23bc <nap(signed char)>
    502c:	f7 cf       	rjmp	.-18     	; 0x501c <panic()+0x10>

0000502e <panic(__FlashStringHelper const*)>:
  }

// Panic with fixed message.
void panic(const __FlashStringHelper *s)
  {
  serialPrintlnAndFlush(s); // May fail.
    502e:	0e 94 ed 1a 	call	0x35da	; 0x35da <serialPrintlnAndFlush(__FlashStringHelper const*)>
  panic();  
    5032:	0e 94 06 28 	call	0x500c	; 0x500c <panic()>
  }
    5036:	08 95       	ret

00005038 <serialPrintlnBuildVersion()>:
  };
// Version (code/board) information printed as one line to serial (with line-end, and flushed); machine- and human- parseable.
// Format: "board VXXXX REVY; code YYYY/Mmm/DD HH:MM:SS".
void serialPrintlnBuildVersion()
  {
  serialPrintAndFlush(F("board V0.2 REV"));
    5038:	8a e7       	ldi	r24, 0x7A	; 122
    503a:	96 e0       	ldi	r25, 0x06	; 6
    503c:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <serialPrintAndFlush(__FlashStringHelper const*)>
  serialPrintAndFlush(V0p2_REV);
    5040:	82 e0       	ldi	r24, 0x02	; 2
    5042:	90 e0       	ldi	r25, 0x00	; 0
    5044:	6a e0       	ldi	r22, 0x0A	; 10
    5046:	70 e0       	ldi	r23, 0x00	; 0
    5048:	0e 94 a5 1a 	call	0x354a	; 0x354a <serialPrintAndFlush(int, int)>
  serialPrintAndFlush(F("; code "));
    504c:	82 e7       	ldi	r24, 0x72	; 114
    504e:	96 e0       	ldi	r25, 0x06	; 6
    5050:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <serialPrintAndFlush(__FlashStringHelper const*)>
  serialPrintAndFlush(_YYYYMmmDD);
    5054:	85 e0       	ldi	r24, 0x05	; 5
    5056:	91 e0       	ldi	r25, 0x01	; 1
    5058:	0e 94 c1 1a 	call	0x3582	; 0x3582 <serialPrintAndFlush(char const*)>
  serialPrintAndFlush(F(" " __TIME__));
    505c:	88 e6       	ldi	r24, 0x68	; 104
    505e:	96 e0       	ldi	r25, 0x06	; 6
    5060:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <serialPrintAndFlush(__FlashStringHelper const*)>
  serialPrintlnAndFlush();
    5064:	0e 94 95 1a 	call	0x352a	; 0x352a <serialPrintlnAndFlush()>
  }
    5068:	08 95       	ret

0000506a <setup>:


// Setup routine: runs once after reset.
// Does some limited board self-test and will panic() if anything is obviously broken.
void setup()
    506a:	2f 92       	push	r2
    506c:	3f 92       	push	r3
    506e:	4f 92       	push	r4
    5070:	5f 92       	push	r5
    5072:	6f 92       	push	r6
    5074:	7f 92       	push	r7
    5076:	8f 92       	push	r8
    5078:	9f 92       	push	r9
    507a:	af 92       	push	r10
    507c:	bf 92       	push	r11
    507e:	cf 92       	push	r12
    5080:	df 92       	push	r13
    5082:	ef 92       	push	r14
    5084:	ff 92       	push	r15
    5086:	0f 93       	push	r16
    5088:	1f 93       	push	r17
    508a:	df 93       	push	r29
    508c:	cf 93       	push	r28
    508e:	00 d0       	rcall	.+0      	; 0x5090 <setup+0x26>
    5090:	cd b7       	in	r28, 0x3d	; 61
    5092:	de b7       	in	r29, 0x3e	; 62
  {
  // Set appropriate low-power states, interrupts, etc, ASAP.
  powerSetup();
    5094:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <powerSetup()>

  // Capture early sub-cycle time to help ensure that the 32768Hz async clock is actually running.
  const uint8_t earlySCT = getSubCycleTime();
    5098:	e0 90 b2 00 	lds	r14, 0x00B2
    509c:	0e e0       	ldi	r16, 0x0E	; 14
    509e:	10 e0       	ldi	r17, 0x00	; 0
    50a0:	3f c0       	rjmp	.+126    	; 0x5120 <setup+0xb6>
  {
  // Initialise all digital I/O to safe state ASAP and avoid floating lines where possible.
  // In absence of a specific alternative, drive low as an output to minimise consumption (eg from floating input).
  for(int i = 14; --i >= 0; ) // For all digital pins from 0 to 13 inclusive...
    {
    switch(i)
    50a2:	04 30       	cpi	r16, 0x04	; 4
    50a4:	11 05       	cpc	r17, r1
    50a6:	31 f1       	breq	.+76     	; 0x50f4 <setup+0x8a>
    50a8:	05 30       	cpi	r16, 0x05	; 5
    50aa:	11 05       	cpc	r17, r1
    50ac:	4c f4       	brge	.+18     	; 0x50c0 <setup+0x56>
    50ae:	02 30       	cpi	r16, 0x02	; 2
    50b0:	11 05       	cpc	r17, r1
    50b2:	79 f1       	breq	.+94     	; 0x5112 <setup+0xa8>
    50b4:	03 30       	cpi	r16, 0x03	; 3
    50b6:	11 05       	cpc	r17, r1
    50b8:	34 f5       	brge	.+76     	; 0x5106 <setup+0x9c>
    50ba:	17 ff       	sbrs	r17, 7
    50bc:	24 c0       	rjmp	.+72     	; 0x5106 <setup+0x9c>
    50be:	13 c0       	rjmp	.+38     	; 0x50e6 <setup+0x7c>
    50c0:	09 30       	cpi	r16, 0x09	; 9
    50c2:	11 05       	cpc	r17, r1
    50c4:	49 f1       	breq	.+82     	; 0x5118 <setup+0xae>
    50c6:	0a 30       	cpi	r16, 0x0A	; 10
    50c8:	11 05       	cpc	r17, r1
    50ca:	3c f4       	brge	.+14     	; 0x50da <setup+0x70>
    50cc:	05 30       	cpi	r16, 0x05	; 5
    50ce:	11 05       	cpc	r17, r1
    50d0:	d1 f0       	breq	.+52     	; 0x5106 <setup+0x9c>
    50d2:	08 30       	cpi	r16, 0x08	; 8
    50d4:	11 05       	cpc	r17, r1
    50d6:	39 f4       	brne	.+14     	; 0x50e6 <setup+0x7c>
    50d8:	16 c0       	rjmp	.+44     	; 0x5106 <setup+0x9c>
    50da:	0a 30       	cpi	r16, 0x0A	; 10
    50dc:	11 05       	cpc	r17, r1
    50de:	a9 f0       	breq	.+42     	; 0x510a <setup+0xa0>
    50e0:	0c 30       	cpi	r16, 0x0C	; 12
    50e2:	11 05       	cpc	r17, r1
    50e4:	a1 f0       	breq	.+40     	; 0x510e <setup+0xa4>
      {
      // Low output is good low-power default.
      default: { digitalWrite(i, LOW); pinMode(i, OUTPUT); break; }
    50e6:	80 2f       	mov	r24, r16
    50e8:	60 e0       	ldi	r22, 0x00	; 0
    50ea:	0e 94 fd 2d 	call	0x5bfa	; 0x5bfa <digitalWrite>
    50ee:	80 2f       	mov	r24, r16
    50f0:	61 e0       	ldi	r22, 0x01	; 1
    50f2:	14 c0       	rjmp	.+40     	; 0x511c <setup+0xb2>
      // Switch main UI LED on for the rest of initialisation...
#ifdef LED_HEATCALL
      case LED_HEATCALL: { pinMode(LED_HEATCALL, OUTPUT); digitalWrite(LED_HEATCALL, HIGH); break; }
#endif
#ifdef LED_HEATCALL_L
      case LED_HEATCALL_L: { pinMode(LED_HEATCALL_L, OUTPUT); digitalWrite(LED_HEATCALL_L, LOW); break; }
    50f4:	84 e0       	ldi	r24, 0x04	; 4
    50f6:	61 e0       	ldi	r22, 0x01	; 1
    50f8:	0e 94 be 2d 	call	0x5b7c	; 0x5b7c <pinMode>
    50fc:	84 e0       	ldi	r24, 0x04	; 4
    50fe:	60 e0       	ldi	r22, 0x00	; 0
    5100:	0e 94 fd 2d 	call	0x5bfa	; 0x5bfa <digitalWrite>
    5104:	0d c0       	rjmp	.+26     	; 0x5120 <setup+0xb6>
      case BUTTON_LEARN_L: // Learn button is optional.
#endif
#ifdef BUTTON_LEARN2_L
      case BUTTON_LEARN2_L: // Learn button 2 is optional.
#endif
      case BUTTON_MODE_L: { pinMode(i, INPUT_PULLUP); break; }
    5106:	80 2f       	mov	r24, r16
    5108:	05 c0       	rjmp	.+10     	; 0x5114 <setup+0xaa>

#ifdef PIN_SPI_nSS
      // Do not leave/set SPI nSS as low output (or floating) to avoid waking up SPI slave(s).
      case PIN_SPI_nSS: { pinMode(PIN_SPI_nSS, INPUT_PULLUP); break; }
    510a:	8a e0       	ldi	r24, 0x0A	; 10
    510c:	03 c0       	rjmp	.+6      	; 0x5114 <setup+0xaa>
#endif
#ifdef PIN_SPI_MISO
      // Do not leave/set SPI MISO as (low) output (or floating).
      case PIN_SPI_MISO: { pinMode(PIN_SPI_MISO, INPUT_PULLUP); break; }
    510e:	8c e0       	ldi	r24, 0x0C	; 12
    5110:	01 c0       	rjmp	.+2      	; 0x5114 <setup+0xaa>
#endif

#ifdef PIN_OW_DQ_DATA
      // Weak pull-up to avoid leakage current.
      case PIN_OW_DQ_DATA: { pinMode(PIN_OW_DQ_DATA, INPUT_PULLUP); break; }
    5112:	82 e0       	ldi	r24, 0x02	; 2
    5114:	62 e0       	ldi	r22, 0x02	; 2
    5116:	02 c0       	rjmp	.+4      	; 0x511c <setup+0xb2>
#endif

#ifdef PIN_RFM_NIRQ 
      // Set as input to avoid contention current.
      case PIN_RFM_NIRQ: { pinMode(PIN_RFM_NIRQ, INPUT); break; }
    5118:	89 e0       	ldi	r24, 0x09	; 9
    511a:	60 e0       	ldi	r22, 0x00	; 0
    511c:	0e 94 be 2d 	call	0x5b7c	; 0x5b7c <pinMode>
// Call this ASAP in setup() to configure I/O safely for the board, avoid pins floating, etc.
static inline void IOSetup()
  {
  // Initialise all digital I/O to safe state ASAP and avoid floating lines where possible.
  // In absence of a specific alternative, drive low as an output to minimise consumption (eg from floating input).
  for(int i = 14; --i >= 0; ) // For all digital pins from 0 to 13 inclusive...
    5120:	01 50       	subi	r16, 0x01	; 1
    5122:	10 40       	sbci	r17, 0x00	; 0
    5124:	17 ff       	sbrs	r17, 7
    5126:	bd cf       	rjmp	.-134    	; 0x50a2 <setup+0x38>

  IOSetup();

  // Restore previous RTC state if available.
  restoreRTC();
    5128:	0e 94 81 18 	call	0x3102	; 0x3102 <restoreRTC()>
  // TODO: consider code to calibrate the internal RC oscillator against the xtal, eg to keep serial comms happy, eg http://www.avrfreaks.net/index.php?name=PNphpBB2&file=printview&t=36237&start=0

  serialPrintAndFlush(F("\r\nOpenTRV booting: ")); // Leading CRLF to clear leading junk, eg from bootloader.
    512c:	87 e4       	ldi	r24, 0x47	; 71
    512e:	96 e0       	ldi	r25, 0x06	; 6
    5130:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <serialPrintAndFlush(__FlashStringHelper const*)>
    serialPrintlnBuildVersion();
    5134:	0e 94 1c 28 	call	0x5038	; 0x5038 <serialPrintlnBuildVersion()>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    5138:	f9 99       	sbic	0x1f, 1	; 31
    513a:	fe cf       	rjmp	.-4      	; 0x5138 <setup+0xce>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    513c:	86 e0       	ldi	r24, 0x06	; 6
    513e:	90 e0       	ldi	r25, 0x00	; 0
    5140:	92 bd       	out	0x22, r25	; 34
    5142:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    5144:	f8 9a       	sbi	0x1f, 0	; 31
    5146:	10 b5       	in	r17, 0x20	; 32
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    5148:	f9 99       	sbic	0x1f, 1	; 31
    514a:	fe cf       	rjmp	.-4      	; 0x5148 <setup+0xde>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    514c:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    514e:	86 e0       	ldi	r24, 0x06	; 6
    5150:	90 e0       	ldi	r25, 0x00	; 0
    5152:	92 bd       	out	0x22, r25	; 34
    5154:	81 bd       	out	0x21, r24	; 33

  // Count resets to detect unexpected crashes/restarts.
  const uint8_t oldResetCount = eeprom_read_byte((uint8_t *)EE_START_RESET_COUNT);
  eeprom_write_byte((uint8_t *)EE_START_RESET_COUNT, 1 + oldResetCount);
    5156:	1f 5f       	subi	r17, 0xFF	; 255
#endif
    EEDR = __value;
    5158:	10 bd       	out	0x20, r17	; 32
    515a:	11 50       	subi	r17, 0x01	; 1
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    515c:	0f b6       	in	r0, 0x3f	; 63
    515e:	f8 94       	cli
    5160:	fa 9a       	sbi	0x1f, 2	; 31
    5162:	f9 9a       	sbi	0x1f, 1	; 31
    5164:	0f be       	out	0x3f, r0	; 63

#ifdef DEBUG
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("DEBUG mode with serial logging");
    5166:	88 e2       	ldi	r24, 0x28	; 40
    5168:	96 e0       	ldi	r25, 0x06	; 6
    516a:	0e 94 ed 1a 	call	0x35da	; 0x35da <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif
#ifdef DEBUG
  DEBUG_SERIAL_PRINT_FLASHSTRING("Resets: ");
    516e:	8f e1       	ldi	r24, 0x1F	; 31
    5170:	96 e0       	ldi	r25, 0x06	; 6
    5172:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(oldResetCount);
    5176:	81 2f       	mov	r24, r17
    5178:	90 e0       	ldi	r25, 0x00	; 0
    517a:	6a e0       	ldi	r22, 0x0A	; 10
    517c:	70 e0       	ldi	r23, 0x00	; 0
    517e:	0e 94 a5 1a 	call	0x354a	; 0x354a <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    5182:	0e 94 95 1a 	call	0x352a	; 0x352a <serialPrintlnAndFlush()>
  DEBUG_SERIAL_PRINT_FLASHSTRING("Overruns: ");
    5186:	84 e1       	ldi	r24, 0x14	; 20
    5188:	96 e0       	ldi	r25, 0x06	; 6
    518a:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <serialPrintAndFlush(__FlashStringHelper const*)>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    518e:	f9 99       	sbic	0x1f, 1	; 31
    5190:	fe cf       	rjmp	.-4      	; 0x518e <setup+0x124>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    5192:	89 e1       	ldi	r24, 0x19	; 25
    5194:	90 e0       	ldi	r25, 0x00	; 0
    5196:	92 bd       	out	0x22, r25	; 34
    5198:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    519a:	f8 9a       	sbi	0x1f, 0	; 31
    519c:	80 b5       	in	r24, 0x20	; 32
  DEBUG_SERIAL_PRINT((~eeprom_read_byte((uint8_t *)EE_START_OVERRUN_COUNTER)) & 0xff);
    519e:	80 95       	com	r24
    51a0:	90 e0       	ldi	r25, 0x00	; 0
    51a2:	6a e0       	ldi	r22, 0x0A	; 10
    51a4:	70 e0       	ldi	r23, 0x00	; 0
    51a6:	0e 94 a5 1a 	call	0x354a	; 0x354a <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();//  DEBUG_SERIAL_PRINT_FLASHSTRING("MCUSR: "); // bits: 3 WDRF, 2 BORF, 1 EXTRF, 0 PORF.
    51aa:	0e 94 95 1a 	call	0x352a	; 0x352a <serialPrintlnAndFlush()>
//  DEBUG_SERIAL_PRINTFMT(mcusr, HEX);
//  DEBUG_SERIAL_PRINTLN();
  // Compute approx free RAM: see http://jeelabs.org/2011/05/22/atmega-memory-use/
  DEBUG_SERIAL_PRINT_FLASHSTRING("Free RAM: ");
    51ae:	89 e0       	ldi	r24, 0x09	; 9
    51b0:	96 e0       	ldi	r25, 0x06	; 6
    51b2:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <serialPrintAndFlush(__FlashStringHelper const*)>
  extern int __heap_start, *__brkval;
  int x;
  DEBUG_SERIAL_PRINT((int) &x - (__brkval == 0 ? (int) &__heap_start : (int) __brkval));
    51b6:	80 91 5c 03 	lds	r24, 0x035C
    51ba:	90 91 5d 03 	lds	r25, 0x035D
    51be:	00 97       	sbiw	r24, 0x00	; 0
    51c0:	11 f0       	breq	.+4      	; 0x51c6 <setup+0x15c>
    51c2:	9c 01       	movw	r18, r24
    51c4:	02 c0       	rjmp	.+4      	; 0x51ca <setup+0x160>
    51c6:	20 e6       	ldi	r18, 0x60	; 96
    51c8:	33 e0       	ldi	r19, 0x03	; 3
    51ca:	ce 01       	movw	r24, r28
    51cc:	01 96       	adiw	r24, 0x01	; 1
    51ce:	82 1b       	sub	r24, r18
    51d0:	93 0b       	sbc	r25, r19
    51d2:	6a e0       	ldi	r22, 0x0A	; 10
    51d4:	70 e0       	ldi	r23, 0x00	; 0
    51d6:	0e 94 a5 1a 	call	0x354a	; 0x354a <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    51da:	0e 94 95 1a 	call	0x352a	; 0x352a <serialPrintlnAndFlush()>
#ifdef UNIT_TESTS
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("UNIT TESTS WILL BE RUN...");
#endif
#endif

  posPOST(1, F("about to test RFM23"));
    51de:	81 e0       	ldi	r24, 0x01	; 1
    51e0:	65 ef       	ldi	r22, 0xF5	; 245
    51e2:	75 e0       	ldi	r23, 0x05	; 5
    51e4:	0e 94 c6 27 	call	0x4f8c	; 0x4f8c <posPOST(unsigned char, __FlashStringHelper const*)>
#ifdef USE_MODULE_RFM22RADIOSIMPLE
#if !defined(RFM22_IS_ACTUALLY_RFM23) && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("(Using RFM22.)");
#endif
  // Initialise the radio, if configured, ASAP because it can suck a lot of power until properly initialised.
  RFM22PowerOnInit();
    51e8:	0e 94 10 17 	call	0x2e20	; 0x2e20 <RFM22PowerOnInit()>
  // Check that the radio is correctly connected; panic if not...
  if(!RFM22CheckConnected()) { panic(); }
    51ec:	0e 94 0e 18 	call	0x301c	; 0x301c <RFM22CheckConnected()>
    51f0:	88 23       	and	r24, r24
    51f2:	11 f4       	brne	.+4      	; 0x51f8 <setup+0x18e>
    51f4:	0e 94 06 28 	call	0x500c	; 0x500c <panic()>
  // Configure the radio.
  RFM22RegisterBlockSetup(FHT8V_RFM22_Reg_Values);
    51f8:	88 e6       	ldi	r24, 0x68	; 104
    51fa:	90 e0       	ldi	r25, 0x00	; 0
    51fc:	0e 94 ef 16 	call	0x2dde	; 0x2dde <RFM22RegisterBlockSetup(unsigned char const (*) [2])>
  // Put the radio in low-power standby mode.
  RFM22ModeStandbyAndClearState();
    5200:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <RFM22ModeStandbyAndClearState()>
#endif

  posPOST(2, F("RFM23 OK"));
    5204:	82 e0       	ldi	r24, 0x02	; 2
    5206:	6c ee       	ldi	r22, 0xEC	; 236
    5208:	75 e0       	ldi	r23, 0x05	; 5
    520a:	0e 94 c6 27 	call	0x4f8c	; 0x4f8c <posPOST(unsigned char, __FlashStringHelper const*)>
  // Do additional POST.
  optionalPOST();
#endif

  // Get current power supply voltage.
  const uint16_t Vcc = readBatterymV();
    520e:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <readBatterymV()>
    5212:	1c 01       	movw	r2, r24
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("Vcc: ");
    5214:	86 ee       	ldi	r24, 0xE6	; 230
    5216:	95 e0       	ldi	r25, 0x05	; 5
    5218:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(Vcc);
    521c:	c1 01       	movw	r24, r2
    521e:	6a e0       	ldi	r22, 0x0A	; 10
    5220:	70 e0       	ldi	r23, 0x00	; 0
    5222:	0e 94 65 1a 	call	0x34ca	; 0x34ca <serialPrintAndFlush(unsigned int, int)>
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("mV");
    5226:	83 ee       	ldi	r24, 0xE3	; 227
    5228:	95 e0       	ldi	r25, 0x05	; 5
    522a:	0e 94 ed 1a 	call	0x35da	; 0x35da <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif
  // Get internal temperature measurement.
  const int intTempC16 = readInternalTemperatureC16();
    522e:	0e 94 82 13 	call	0x2704	; 0x2704 <readInternalTemperatureC16()>
    5232:	2c 01       	movw	r4, r24
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("Int temp: ");
    5234:	88 ed       	ldi	r24, 0xD8	; 216
    5236:	95 e0       	ldi	r25, 0x05	; 5
    5238:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT((intTempC16 + 8) >> 4);
    523c:	c2 01       	movw	r24, r4
    523e:	08 96       	adiw	r24, 0x08	; 8
    5240:	64 e0       	ldi	r22, 0x04	; 4
    5242:	95 95       	asr	r25
    5244:	87 95       	ror	r24
    5246:	6a 95       	dec	r22
    5248:	e1 f7       	brne	.-8      	; 0x5242 <setup+0x1d8>
    524a:	6a e0       	ldi	r22, 0x0A	; 10
    524c:	70 e0       	ldi	r23, 0x00	; 0
    524e:	0e 94 a5 1a 	call	0x354a	; 0x354a <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINT_FLASHSTRING("C / ");
    5252:	83 ed       	ldi	r24, 0xD3	; 211
    5254:	95 e0       	ldi	r25, 0x05	; 5
    5256:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(intTempC16);
    525a:	c2 01       	movw	r24, r4
    525c:	6a e0       	ldi	r22, 0x0A	; 10
    525e:	70 e0       	ldi	r23, 0x00	; 0
    5260:	0e 94 a5 1a 	call	0x354a	; 0x354a <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    5264:	0e 94 95 1a 	call	0x352a	; 0x352a <serialPrintlnAndFlush()>
#endif

  posPOST(3, F("internal sensors OK, next light/temp/other"));
    5268:	83 e0       	ldi	r24, 0x03	; 3
    526a:	68 ea       	ldi	r22, 0xA8	; 168
    526c:	75 e0       	ldi	r23, 0x05	; 5
    526e:	0e 94 c6 27 	call	0x4f8c	; 0x4f8c <posPOST(unsigned char, __FlashStringHelper const*)>

#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("Gathering initial inputs and computing target/demand...");
    5272:	80 e7       	ldi	r24, 0x70	; 112
    5274:	95 e0       	ldi	r25, 0x05	; 5
    5276:	0e 94 ed 1a 	call	0x35da	; 0x35da <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif
  // Collect full set of environmental values before entering loop().
  // This should also help ensure that sensors are properly initialised.
  const int light = readAmbientLight();
    527a:	0e 94 40 04 	call	0x880	; 0x880 <readAmbientLight()>
    527e:	3c 01       	movw	r6, r24
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("light: ");
    5280:	88 e6       	ldi	r24, 0x68	; 104
    5282:	95 e0       	ldi	r25, 0x05	; 5
    5284:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(light);
    5288:	c3 01       	movw	r24, r6
    528a:	6a e0       	ldi	r22, 0x0A	; 10
    528c:	70 e0       	ldi	r23, 0x00	; 0
    528e:	0e 94 a5 1a 	call	0x354a	; 0x354a <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    5292:	0e 94 95 1a 	call	0x352a	; 0x352a <serialPrintlnAndFlush()>
#endif
//  // Assume 0 or full-scale values unlikely.
//  if((0 == light) || (light >= 1023)) { panic(F("LDR fault")); }

  const int heat = readTemperatureC16();
    5296:	0e 94 43 1b 	call	0x3686	; 0x3686 <readTemperatureC16()>
    529a:	4c 01       	movw	r8, r24
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("temp: ");
    529c:	81 e6       	ldi	r24, 0x61	; 97
    529e:	95 e0       	ldi	r25, 0x05	; 5
    52a0:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(heat);
    52a4:	c4 01       	movw	r24, r8
    52a6:	6a e0       	ldi	r22, 0x0A	; 10
    52a8:	70 e0       	ldi	r23, 0x00	; 0
    52aa:	0e 94 a5 1a 	call	0x354a	; 0x354a <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    52ae:	0e 94 95 1a 	call	0x352a	; 0x352a <serialPrintlnAndFlush()>
#endif

#if defined(TEMP_POT_AVAILABLE)
  const int tempPot = readTempPot();
    52b2:	0e 94 06 1b 	call	0x360c	; 0x360c <readTempPot()>
    52b6:	8c 01       	movw	r16, r24
#if 1 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("temp pot: ");
    52b8:	86 e5       	ldi	r24, 0x56	; 86
    52ba:	95 e0       	ldi	r25, 0x05	; 5
    52bc:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <serialPrintAndFlush(__FlashStringHelper const*)>
  DEBUG_SERIAL_PRINT(tempPot);
    52c0:	c8 01       	movw	r24, r16
    52c2:	6a e0       	ldi	r22, 0x0A	; 10
    52c4:	70 e0       	ldi	r23, 0x00	; 0
    52c6:	0e 94 a5 1a 	call	0x354a	; 0x354a <serialPrintAndFlush(int, int)>
  DEBUG_SERIAL_PRINTLN();
    52ca:	0e 94 95 1a 	call	0x352a	; 0x352a <serialPrintlnAndFlush()>
#endif
#endif

  // Check buttons not stuck enabled.
  if(fastDigitalRead(BUTTON_MODE_L) == LOW) { panic(F("M stuck")); }
    52ce:	4d 99       	sbic	0x09, 5	; 9
    52d0:	04 c0       	rjmp	.+8      	; 0x52da <setup+0x270>
    52d2:	8e e4       	ldi	r24, 0x4E	; 78
    52d4:	95 e0       	ldi	r25, 0x05	; 5
    52d6:	0e 94 17 28 	call	0x502e	; 0x502e <panic(__FlashStringHelper const*)>
#if defined(BUTTON_LEARN_L)
  if(fastDigitalRead(BUTTON_LEARN_L) == LOW) { panic(F("L stuck")); }
    52da:	18 99       	sbic	0x03, 0	; 3
    52dc:	04 c0       	rjmp	.+8      	; 0x52e6 <setup+0x27c>
    52de:	86 e4       	ldi	r24, 0x46	; 70
    52e0:	95 e0       	ldi	r25, 0x05	; 5
    52e2:	0e 94 17 28 	call	0x502e	; 0x502e <panic(__FlashStringHelper const*)>
#endif
#if defined(BUTTON_LEARN2_L)
  if(fastDigitalRead(BUTTON_LEARN2_L) == LOW) { panic(F("L2 stuck")); }
    52e6:	4b 99       	sbic	0x09, 3	; 9
    52e8:	04 c0       	rjmp	.+8      	; 0x52f2 <setup+0x288>
    52ea:	8d e3       	ldi	r24, 0x3D	; 61
    52ec:	95 e0       	ldi	r25, 0x05	; 5
    52ee:	0e 94 17 28 	call	0x502e	; 0x502e <panic(__FlashStringHelper const*)>
#endif


  posPOST(4, F("light/temp OK"));
    52f2:	84 e0       	ldi	r24, 0x04	; 4
    52f4:	6f e2       	ldi	r22, 0x2F	; 47
    52f6:	75 e0       	ldi	r23, 0x05	; 5
    52f8:	0e 94 c6 27 	call	0x4f8c	; 0x4f8c <posPOST(unsigned char, __FlashStringHelper const*)>

#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("Gathering initial inputs and computing target/demand...");
#endif
  // Update targets, output to TRV and boiler, etc, to be sensible before main loop starts.
  computeCallForHeat();
    52fc:	0e 94 16 07 	call	0xe2c	; 0xe2c <computeCallForHeat()>
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("Creating initial FHT8V frame...");
#endif
  // Unconditionally ensure that a valid FHT8V TRV command frame has been computed and stored
  // in case this unit is actually controlling a local valve.
  FHT8VCreateValveSetCmdFrame();
    5300:	0e 94 a6 0c 	call	0x194c	; 0x194c <FHT8VCreateValveSetCmdFrame()>
    5304:	e0 e0       	ldi	r30, 0x00	; 0
    5306:	f1 e0       	ldi	r31, 0x01	; 1
    5308:	aa 24       	eor	r10, r10
    530a:	aa 94       	dec	r10
    530c:	ba 2c       	mov	r11, r10
        "eor    %A0,__tmp_reg__"

        : "=d" (__ret)
        : "r" (__data), "0" (__crc)
        : "r0"
    );
    530e:	81 91       	ld	r24, Z+
    5310:	95 01       	movw	r18, r10
    5312:	28 27       	eor	r18, r24
    5314:	02 2e       	mov	r0, r18
    5316:	22 95       	swap	r18
    5318:	20 7f       	andi	r18, 0xF0	; 240
    531a:	20 25       	eor	r18, r0
    531c:	03 2e       	mov	r0, r19
    531e:	32 2f       	mov	r19, r18
    5320:	22 95       	swap	r18
    5322:	2f 70       	andi	r18, 0x0F	; 15
    5324:	02 26       	eor	r0, r18
    5326:	26 95       	lsr	r18
    5328:	32 27       	eor	r19, r18
    532a:	23 27       	eor	r18, r19
    532c:	22 0f       	add	r18, r18
    532e:	22 0f       	add	r18, r18
    5330:	22 0f       	add	r18, r18
    5332:	20 25       	eor	r18, r0
    5334:	59 01       	movw	r10, r18
#define RAMSTART (0x100)
#endif
static uint16_t sramCRC()
  {
  uint16_t result = ~0U;
  for(uint8_t *p = (uint8_t *)RAMSTART; p <= (uint8_t *)RAMEND; ++p)
    5336:	39 e0       	ldi	r19, 0x09	; 9
    5338:	e0 30       	cpi	r30, 0x00	; 0
    533a:	f3 07       	cpc	r31, r19
    533c:	41 f7       	brne	.-48     	; 0x530e <setup+0x2a4>
    533e:	20 e0       	ldi	r18, 0x00	; 0
    5340:	30 e0       	ldi	r19, 0x00	; 0
    5342:	cc 24       	eor	r12, r12
    5344:	ca 94       	dec	r12
    5346:	dc 2c       	mov	r13, r12
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    5348:	f9 99       	sbic	0x1f, 1	; 31
    534a:	fe cf       	rjmp	.-4      	; 0x5348 <setup+0x2de>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    534c:	32 bd       	out	0x22, r19	; 34
    534e:	21 bd       	out	0x21, r18	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    5350:	f8 9a       	sbi	0x1f, 0	; 31
    5352:	80 b5       	in	r24, 0x20	; 32
    5354:	a6 01       	movw	r20, r12
    5356:	48 27       	eor	r20, r24
    5358:	04 2e       	mov	r0, r20
    535a:	42 95       	swap	r20
    535c:	40 7f       	andi	r20, 0xF0	; 240
    535e:	40 25       	eor	r20, r0
    5360:	05 2e       	mov	r0, r21
    5362:	54 2f       	mov	r21, r20
    5364:	42 95       	swap	r20
    5366:	4f 70       	andi	r20, 0x0F	; 15
    5368:	04 26       	eor	r0, r20
    536a:	46 95       	lsr	r20
    536c:	54 27       	eor	r21, r20
    536e:	45 27       	eor	r20, r21
    5370:	44 0f       	add	r20, r20
    5372:	44 0f       	add	r20, r20
    5374:	44 0f       	add	r20, r20
    5376:	40 25       	eor	r20, r0
    5378:	6a 01       	movw	r12, r20
  }
// Compute a CRC of all of EEPROM as a hash that may contain some entropy, particularly across restarts.
static uint16_t eeCRC()
  {
  uint16_t result = ~0U;
  for(uint8_t *p = (uint8_t *)0; p <= (uint8_t *)E2END; ++p)
    537a:	2f 5f       	subi	r18, 0xFF	; 255
    537c:	3f 4f       	sbci	r19, 0xFF	; 255
    537e:	54 e0       	ldi	r21, 0x04	; 4
    5380:	20 30       	cpi	r18, 0x00	; 0
    5382:	35 07       	cpc	r19, r21
    5384:	09 f7       	brne	.-62     	; 0x5348 <setup+0x2de>
  DEBUG_SERIAL_PRINTLN_FLASHSTRING("Starting seed computation...");
#endif
  const uint16_t srseed = sramCRC();
  const uint16_t eeseed = eeCRC();
  // Check that the 32768Hz async clock is actually running having done significant CPU-intensive work.
  const uint8_t laterSCT = getSubCycleTime();
    5386:	f0 90 b2 00 	lds	r15, 0x00B2
  if(laterSCT == earlySCT)
    538a:	fe 14       	cp	r15, r14
    538c:	09 f5       	brne	.+66     	; 0x53d0 <setup+0x366>
    {
#if defined(WAKEUP_32768HZ_XTAL)
    // Allow (an extra) 1s+ for 32768Hz crystal to start reliably, see: http://www.atmel.com/Images/doc1259.pdf
#if 1 && defined(DEBUG)
    DEBUG_SERIAL_PRINTLN_FLASHSTRING("Sleeping to let async 32768Hz clock start...");
    538e:	82 e0       	ldi	r24, 0x02	; 2
    5390:	95 e0       	ldi	r25, 0x05	; 5
    5392:	0e 94 ed 1a 	call	0x35da	; 0x35da <serialPrintlnAndFlush(__FlashStringHelper const*)>
    5396:	04 e1       	ldi	r16, 0x14	; 20
    5398:	10 e0       	ldi	r17, 0x00	; 0
#endif
    // Time spent here should not be a whole multiple of basic cycle time to avoid spuriously stationary async clock reading!
    for(int i = 20; (--i >= 0) && (earlySCT == getSubCycleTime()); )
    539a:	01 50       	subi	r16, 0x01	; 1
    539c:	10 40       	sbci	r17, 0x00	; 0
    539e:	8f ef       	ldi	r24, 0xFF	; 255
    53a0:	0f 3f       	cpi	r16, 0xFF	; 255
    53a2:	18 07       	cpc	r17, r24
    53a4:	09 f4       	brne	.+2      	; 0x53a8 <setup+0x33e>
    53a6:	97 c0       	rjmp	.+302    	; 0x54d6 <setup+0x46c>
    53a8:	80 91 b2 00 	lds	r24, 0x00B2
    53ac:	f8 16       	cp	r15, r24
    53ae:	09 f0       	breq	.+2      	; 0x53b2 <setup+0x348>
    53b0:	92 c0       	rjmp	.+292    	; 0x54d6 <setup+0x46c>
      {
      sleepLowPowerMs(691);
    53b2:	83 eb       	ldi	r24, 0xB3	; 179
    53b4:	92 e0       	ldi	r25, 0x02	; 2
    53b6:	0e 94 ac 27 	call	0x4f58	; 0x4f58 <sleepLowPowerMs(unsigned int)>
      captureEntropy1();
    53ba:	0e 94 46 14 	call	0x288c	; 0x288c <captureEntropy1()>
    53be:	ed cf       	rjmp	.-38     	; 0x539a <setup+0x330>
#endif
    const uint8_t latestSCT = getSubCycleTime();
    if(latestSCT == earlySCT)
      {
#if 1 && defined(DEBUG)
      DEBUG_SERIAL_PRINTLN_FLASHSTRING("Async 32768Hz clock may not be running!");
    53c0:	8a ed       	ldi	r24, 0xDA	; 218
    53c2:	94 e0       	ldi	r25, 0x04	; 4
    53c4:	0e 94 ed 1a 	call	0x35da	; 0x35da <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif
      panic(F("XTAL dead")); // Async clock not running.
    53c8:	80 ed       	ldi	r24, 0xD0	; 208
    53ca:	94 e0       	ldi	r25, 0x04	; 4
    53cc:	0e 94 17 28 	call	0x502e	; 0x502e <panic(__FlashStringHelper const*)>
      }
    }
  posPOST(5, F("slow RTC clock OK"));
    53d0:	85 e0       	ldi	r24, 0x05	; 5
    53d2:	6e eb       	ldi	r22, 0xBE	; 190
    53d4:	74 e0       	ldi	r23, 0x04	; 4
    53d6:	0e 94 c6 27 	call	0x4f8c	; 0x4f8c <posPOST(unsigned char, __FlashStringHelper const*)>
  // DHD20130430: maybe as much as 16 bits of entropy on each reset in seed1, concentrated in the least-significant bits.
  const uint16_t s16 = (__DATE__[5]) ^ ((getMinutesSinceMidnightLT() << 5) ^ (((int)getSubCycleTime()) << 7) ^ (heat << 2) ^ (light << 6) ^ Vcc ^ intTempC16); /* This fits in an int (16 bits). */
    53da:	0e 94 5f 18 	call	0x30be	; 0x30be <getMinutesSinceMidnightLT()>
    53de:	00 91 b2 00 	lds	r16, 0x00B2
    53e2:	10 e0       	ldi	r17, 0x00	; 0
    53e4:	16 95       	lsr	r17
    53e6:	10 2f       	mov	r17, r16
    53e8:	00 27       	eor	r16, r16
    53ea:	17 95       	ror	r17
    53ec:	07 95       	ror	r16
    53ee:	01 63       	ori	r16, 0x31	; 49
    53f0:	02 25       	eor	r16, r2
    53f2:	13 25       	eor	r17, r3
    53f4:	04 25       	eor	r16, r4
    53f6:	15 25       	eor	r17, r5
    53f8:	88 0c       	add	r8, r8
    53fa:	99 1c       	adc	r9, r9
    53fc:	88 0c       	add	r8, r8
    53fe:	99 1c       	adc	r9, r9
    5400:	08 25       	eor	r16, r8
    5402:	19 25       	eor	r17, r9
    5404:	36 e0       	ldi	r19, 0x06	; 6
    5406:	66 0c       	add	r6, r6
    5408:	77 1c       	adc	r7, r7
    540a:	3a 95       	dec	r19
    540c:	e1 f7       	brne	.-8      	; 0x5406 <setup+0x39c>
    540e:	06 25       	eor	r16, r6
    5410:	17 25       	eor	r17, r7
    5412:	25 e0       	ldi	r18, 0x05	; 5
    5414:	88 0f       	add	r24, r24
    5416:	99 1f       	adc	r25, r25
    5418:	2a 95       	dec	r18
    541a:	e1 f7       	brne	.-8      	; 0x5414 <setup+0x3aa>
    541c:	08 27       	eor	r16, r24
    541e:	19 27       	eor	r17, r25
  //const long seed1 = ((((long) clockJitterRTC()) << 13) ^ (((long)clockJitterWDT()) << 21) ^ (((long)(srseed^eeseed)) << 16)) + s16;
  // Seed simple/fast/small built-in PRNG.  (Smaller and faster than srandom()/random().)
  const uint8_t nar1 = noisyADCRead();
    5420:	0e 94 0a 13 	call	0x2614	; 0x2614 <noisyADCRead()>
    5424:	f8 2e       	mov	r15, r24
#if 0 && defined(DEBUG)
  DEBUG_SERIAL_PRINT_FLASHSTRING("nar ");
  DEBUG_SERIAL_PRINTFMT(nar1, BIN);
  DEBUG_SERIAL_PRINTLN();
#endif
  seedRNG8(nar1 ^ (uint8_t) s16, (uint8_t)((s16+eeseed) >> 8), clockJitterWDT() ^ (uint8_t)srseed);
    5426:	0e 94 a4 13 	call	0x2748	; 0x2748 <clockJitterWDT()>
    542a:	98 01       	movw	r18, r16
    542c:	2c 0d       	add	r18, r12
    542e:	3d 1d       	adc	r19, r13
    5430:	48 2f       	mov	r20, r24
    5432:	4a 25       	eor	r20, r10
    5434:	8f 2d       	mov	r24, r15
    5436:	80 27       	eor	r24, r16
    5438:	63 2f       	mov	r22, r19
    543a:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <seedRNG8(unsigned char, unsigned char, unsigned char)>
  // Carry a few bits of entropy over a reset by picking one of the four designated EEPROM bytes at random;
  // if zero, erase to 0xff, else AND in part of the seed including some of the previous EEPROM hash (and write).
  // This amounts to about a quarter of an erase/write cycle per reset/restart per byte, or 400k restarts endurance!
  // These 4 bytes should be picked up as part of the hash/CRC of EEPROM above, next time,
  // essentially forming a longish-cycle (poor) PRNG even with little new real entropy each time.
  uint8_t *const erp = (uint8_t *)(EE_START_SEED + (3&((s16)^((eeseed>>8)+(__TIME__[7]))))); // Use some new and some eeseed bits to choose which byte to updated.
    543e:	8d 2d       	mov	r24, r13
    5440:	99 27       	eor	r25, r25
    5442:	80 27       	eor	r24, r16
    5444:	91 27       	eor	r25, r17
    5446:	83 70       	andi	r24, 0x03	; 3
    5448:	90 70       	andi	r25, 0x00	; 0
    544a:	02 96       	adiw	r24, 0x02	; 2
    544c:	18 2f       	mov	r17, r24
    544e:	09 2f       	mov	r16, r25
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    5450:	f9 99       	sbic	0x1f, 1	; 31
    5452:	fe cf       	rjmp	.-4      	; 0x5450 <setup+0x3e6>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    5454:	92 bd       	out	0x22, r25	; 34
    5456:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    5458:	f8 9a       	sbi	0x1f, 0	; 31
    545a:	80 b5       	in	r24, 0x20	; 32
  const uint8_t erv = eeprom_read_byte(erp);
  if(0 == erv) { eeprom_smart_erase_byte(erp); }
    545c:	88 23       	and	r24, r24
    545e:	29 f4       	brne	.+10     	; 0x546a <setup+0x400>
    5460:	81 2f       	mov	r24, r17
    5462:	90 2f       	mov	r25, r16
    5464:	0e 94 db 07 	call	0xfb6	; 0xfb6 <eeprom_smart_erase_byte(unsigned char*)>
    5468:	08 c0       	rjmp	.+16     	; 0x547a <setup+0x410>
  else { eeprom_smart_clear_bits(erp, clockJitterEntropyByte() + ((uint8_t)eeseed)); } // Nominally include disjoint set of eeseed bits in choice of which to clear.
    546a:	0e 94 bf 13 	call	0x277e	; 0x277e <clockJitterEntropyByte()>
    546e:	68 2f       	mov	r22, r24
    5470:	6c 0d       	add	r22, r12
    5472:	81 2f       	mov	r24, r17
    5474:	90 2f       	mov	r25, r16
    5476:	0e 94 ef 07 	call	0xfde	; 0xfde <eeprom_smart_clear_bits(unsigned char*, unsigned char)>
  DEBUG_SERIAL_PRINTLN();
#endif

  // Initialised: turn heatcall UI LED off.
//  pinMode(LED_HEATCALL, OUTPUT);
  LED_HEATCALL_OFF();
    547a:	5c 9a       	sbi	0x0b, 4	; 11
  
#if defined(SUPPORT_CLI)
  // Help user get to CLI.
  serialPrintlnAndFlush(F("? at CLI prompt for help"));
    547c:	85 ea       	ldi	r24, 0xA5	; 165
    547e:	94 e0       	ldi	r25, 0x04	; 4
    5480:	0e 94 ed 1a 	call	0x35da	; 0x35da <serialPrintlnAndFlush(__FlashStringHelper const*)>
#endif

  // Ensure ID set up (mainly on first use).
  // Have one attempt (don't want to bang already failign EEPROM) to force-reset if not good, then panic.
  if(!ensureIDCreated())
    5484:	80 e0       	ldi	r24, 0x00	; 0
    5486:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <ensureIDCreated(bool)>
    548a:	88 23       	and	r24, r24
    548c:	49 f4       	brne	.+18     	; 0x54a0 <setup+0x436>
    {
    if(!ensureIDCreated(true)) // Force reset.
    548e:	81 e0       	ldi	r24, 0x01	; 1
    5490:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <ensureIDCreated(bool)>
    5494:	88 23       	and	r24, r24
    5496:	21 f4       	brne	.+8      	; 0x54a0 <setup+0x436>
      { panic(F("Invalid ID and cannot reset, sorry.")); }
    5498:	81 e8       	ldi	r24, 0x81	; 129
    549a:	94 e0       	ldi	r25, 0x04	; 4
    549c:	0e 94 17 28 	call	0x502e	; 0x502e <panic(__FlashStringHelper const*)>
    }

  // Report initial status.
  serialStatusReport();
    54a0:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <serialStatusReport()>

  // Set appropriate loop() values just before entering it.
  TIME_LSD = getSecondsLT();
    54a4:	80 91 c6 01 	lds	r24, 0x01C6
    54a8:	80 93 e2 01 	sts	0x01E2, r24
  }
    54ac:	0f 90       	pop	r0
    54ae:	0f 90       	pop	r0
    54b0:	cf 91       	pop	r28
    54b2:	df 91       	pop	r29
    54b4:	1f 91       	pop	r17
    54b6:	0f 91       	pop	r16
    54b8:	ff 90       	pop	r15
    54ba:	ef 90       	pop	r14
    54bc:	df 90       	pop	r13
    54be:	cf 90       	pop	r12
    54c0:	bf 90       	pop	r11
    54c2:	af 90       	pop	r10
    54c4:	9f 90       	pop	r9
    54c6:	8f 90       	pop	r8
    54c8:	7f 90       	pop	r7
    54ca:	6f 90       	pop	r6
    54cc:	5f 90       	pop	r5
    54ce:	4f 90       	pop	r4
    54d0:	3f 90       	pop	r3
    54d2:	2f 90       	pop	r2
    54d4:	08 95       	ret
      {
      sleepLowPowerMs(691);
      captureEntropy1();
      }
#endif
    const uint8_t latestSCT = getSubCycleTime();
    54d6:	80 91 b2 00 	lds	r24, 0x00B2
    if(latestSCT == earlySCT)
    54da:	8f 15       	cp	r24, r15
    54dc:	09 f0       	breq	.+2      	; 0x54e0 <setup+0x476>
    54de:	78 cf       	rjmp	.-272    	; 0x53d0 <setup+0x366>
    54e0:	6f cf       	rjmp	.-290    	; 0x53c0 <setup+0x356>

000054e2 <TwoWire::beginTransmission(int)>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    54e2:	81 e0       	ldi	r24, 0x01	; 1
    54e4:	80 93 2e 02 	sts	0x022E, r24
  // set address of targeted slave
  txAddress = address;
    54e8:	60 93 0b 02 	sts	0x020B, r22
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    54ec:	10 92 2c 02 	sts	0x022C, r1
  txBufferLength = 0;
    54f0:	10 92 2d 02 	sts	0x022D, r1
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
}
    54f4:	08 95       	ret

000054f6 <TwoWire::available()>:
}

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
    54f6:	20 91 0a 02 	lds	r18, 0x020A
    54fa:	30 e0       	ldi	r19, 0x00	; 0
    54fc:	80 91 09 02 	lds	r24, 0x0209
    5500:	28 1b       	sub	r18, r24
    5502:	31 09       	sbc	r19, r1
{
  return rxBufferLength - rxBufferIndex;
}
    5504:	c9 01       	movw	r24, r18
    5506:	08 95       	ret

00005508 <TwoWire::read()>:
int TwoWire::read(void)
{
  int value = -1;
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    5508:	40 91 09 02 	lds	r20, 0x0209
    550c:	80 91 0a 02 	lds	r24, 0x020A
    5510:	48 17       	cp	r20, r24
    5512:	18 f0       	brcs	.+6      	; 0x551a <TwoWire::read()+0x12>
    5514:	2f ef       	ldi	r18, 0xFF	; 255
    5516:	3f ef       	ldi	r19, 0xFF	; 255
    5518:	0a c0       	rjmp	.+20     	; 0x552e <TwoWire::read()+0x26>
    value = rxBuffer[rxBufferIndex];
    551a:	e4 2f       	mov	r30, r20
    551c:	f0 e0       	ldi	r31, 0x00	; 0
    551e:	e7 51       	subi	r30, 0x17	; 23
    5520:	fe 4f       	sbci	r31, 0xFE	; 254
    5522:	80 81       	ld	r24, Z
    5524:	28 2f       	mov	r18, r24
    5526:	30 e0       	ldi	r19, 0x00	; 0
    ++rxBufferIndex;
    5528:	4f 5f       	subi	r20, 0xFF	; 255
    552a:	40 93 09 02 	sts	0x0209, r20
  }

  return value;
}
    552e:	c9 01       	movw	r24, r18
    5530:	08 95       	ret

00005532 <TwoWire::peek()>:
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
  
  if(rxBufferIndex < rxBufferLength){
    5532:	e0 91 09 02 	lds	r30, 0x0209
    5536:	80 91 0a 02 	lds	r24, 0x020A
    553a:	e8 17       	cp	r30, r24
    553c:	18 f0       	brcs	.+6      	; 0x5544 <TwoWire::peek()+0x12>
    553e:	ef ef       	ldi	r30, 0xFF	; 255
    5540:	ff ef       	ldi	r31, 0xFF	; 255
    5542:	06 c0       	rjmp	.+12     	; 0x5550 <TwoWire::peek()+0x1e>
    value = rxBuffer[rxBufferIndex];
    5544:	f0 e0       	ldi	r31, 0x00	; 0
    5546:	e7 51       	subi	r30, 0x17	; 23
    5548:	fe 4f       	sbci	r31, 0xFE	; 254
    554a:	80 81       	ld	r24, Z
    554c:	e8 2f       	mov	r30, r24
    554e:	f0 e0       	ldi	r31, 0x00	; 0
  }

  return value;
}
    5550:	cf 01       	movw	r24, r30
    5552:	08 95       	ret

00005554 <TwoWire::flush()>:

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
    5554:	08 95       	ret

00005556 <global constructors keyed to _ZN7TwoWire8rxBufferE>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    5556:	10 92 32 02 	sts	0x0232, r1
    555a:	10 92 31 02 	sts	0x0231, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    555e:	88 ee       	ldi	r24, 0xE8	; 232
    5560:	93 e0       	ldi	r25, 0x03	; 3
    5562:	a0 e0       	ldi	r26, 0x00	; 0
    5564:	b0 e0       	ldi	r27, 0x00	; 0
    5566:	80 93 33 02 	sts	0x0233, r24
    556a:	90 93 34 02 	sts	0x0234, r25
    556e:	a0 93 35 02 	sts	0x0235, r26
    5572:	b0 93 36 02 	sts	0x0236, r27
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    5576:	85 e1       	ldi	r24, 0x15	; 21
    5578:	91 e0       	ldi	r25, 0x01	; 1
    557a:	90 93 30 02 	sts	0x0230, r25
    557e:	80 93 2f 02 	sts	0x022F, r24
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    5582:	08 95       	ret

00005584 <TwoWire::write(unsigned char const*, unsigned int)>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
    5584:	cf 92       	push	r12
    5586:	df 92       	push	r13
    5588:	ef 92       	push	r14
    558a:	ff 92       	push	r15
    558c:	0f 93       	push	r16
    558e:	1f 93       	push	r17
    5590:	cf 93       	push	r28
    5592:	df 93       	push	r29
    5594:	7c 01       	movw	r14, r24
    5596:	6b 01       	movw	r12, r22
    5598:	8a 01       	movw	r16, r20
{
  if(transmitting){
    559a:	80 91 2e 02 	lds	r24, 0x022E
    559e:	88 23       	and	r24, r24
    55a0:	a1 f0       	breq	.+40     	; 0x55ca <TwoWire::write(unsigned char const*, unsigned int)+0x46>
    55a2:	c0 e0       	ldi	r28, 0x00	; 0
    55a4:	d0 e0       	ldi	r29, 0x00	; 0
    55a6:	0d c0       	rjmp	.+26     	; 0x55c2 <TwoWire::write(unsigned char const*, unsigned int)+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
      write(data[i]);
    55a8:	d7 01       	movw	r26, r14
    55aa:	ed 91       	ld	r30, X+
    55ac:	fc 91       	ld	r31, X
    55ae:	d6 01       	movw	r26, r12
    55b0:	ac 0f       	add	r26, r28
    55b2:	bd 1f       	adc	r27, r29
    55b4:	01 90       	ld	r0, Z+
    55b6:	f0 81       	ld	r31, Z
    55b8:	e0 2d       	mov	r30, r0
    55ba:	c7 01       	movw	r24, r14
    55bc:	6c 91       	ld	r22, X
    55be:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    55c0:	21 96       	adiw	r28, 0x01	; 1
    55c2:	c0 17       	cp	r28, r16
    55c4:	d1 07       	cpc	r29, r17
    55c6:	80 f3       	brcs	.-32     	; 0x55a8 <TwoWire::write(unsigned char const*, unsigned int)+0x24>
    55c8:	04 c0       	rjmp	.+8      	; 0x55d2 <TwoWire::write(unsigned char const*, unsigned int)+0x4e>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    55ca:	cb 01       	movw	r24, r22
    55cc:	64 2f       	mov	r22, r20
    55ce:	0e 94 f4 2b 	call	0x57e8	; 0x57e8 <twi_transmit>
  }
  return quantity;
}
    55d2:	c8 01       	movw	r24, r16
    55d4:	df 91       	pop	r29
    55d6:	cf 91       	pop	r28
    55d8:	1f 91       	pop	r17
    55da:	0f 91       	pop	r16
    55dc:	ff 90       	pop	r15
    55de:	ef 90       	pop	r14
    55e0:	df 90       	pop	r13
    55e2:	cf 90       	pop	r12
    55e4:	08 95       	ret

000055e6 <TwoWire::write(unsigned char)>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
    55e6:	df 93       	push	r29
    55e8:	cf 93       	push	r28
    55ea:	0f 92       	push	r0
    55ec:	cd b7       	in	r28, 0x3d	; 61
    55ee:	de b7       	in	r29, 0x3e	; 62
    55f0:	fc 01       	movw	r30, r24
    55f2:	69 83       	std	Y+1, r22	; 0x01
{
  if(transmitting){
    55f4:	80 91 2e 02 	lds	r24, 0x022E
    55f8:	88 23       	and	r24, r24
    55fa:	c9 f0       	breq	.+50     	; 0x562e <TwoWire::write(unsigned char)+0x48>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    55fc:	80 91 2d 02 	lds	r24, 0x022D
    5600:	80 32       	cpi	r24, 0x20	; 32
    5602:	38 f0       	brcs	.+14     	; 0x5612 <TwoWire::write(unsigned char)+0x2c>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    5604:	81 e0       	ldi	r24, 0x01	; 1
    5606:	90 e0       	ldi	r25, 0x00	; 0
    5608:	93 83       	std	Z+3, r25	; 0x03
    560a:	82 83       	std	Z+2, r24	; 0x02
    560c:	20 e0       	ldi	r18, 0x00	; 0
    560e:	30 e0       	ldi	r19, 0x00	; 0
    5610:	15 c0       	rjmp	.+42     	; 0x563c <TwoWire::write(unsigned char)+0x56>
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    5612:	80 91 2c 02 	lds	r24, 0x022C
    5616:	e8 2f       	mov	r30, r24
    5618:	f0 e0       	ldi	r31, 0x00	; 0
    561a:	e4 5f       	subi	r30, 0xF4	; 244
    561c:	fd 4f       	sbci	r31, 0xFD	; 253
    561e:	99 81       	ldd	r25, Y+1	; 0x01
    5620:	90 83       	st	Z, r25
    ++txBufferIndex;
    5622:	8f 5f       	subi	r24, 0xFF	; 255
    5624:	80 93 2c 02 	sts	0x022C, r24
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    5628:	80 93 2d 02 	sts	0x022D, r24
    562c:	05 c0       	rjmp	.+10     	; 0x5638 <TwoWire::write(unsigned char)+0x52>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    562e:	ce 01       	movw	r24, r28
    5630:	01 96       	adiw	r24, 0x01	; 1
    5632:	61 e0       	ldi	r22, 0x01	; 1
    5634:	0e 94 f4 2b 	call	0x57e8	; 0x57e8 <twi_transmit>
    5638:	21 e0       	ldi	r18, 0x01	; 1
    563a:	30 e0       	ldi	r19, 0x00	; 0
  }
  return 1;
}
    563c:	c9 01       	movw	r24, r18
    563e:	0f 90       	pop	r0
    5640:	cf 91       	pop	r28
    5642:	df 91       	pop	r29
    5644:	08 95       	ret

00005646 <TwoWire::endTransmission(unsigned char)>:
//	the bus tenure has been properly ended with a STOP. It
//	is very possible to leave the bus in a hung state if
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
    5646:	0f 93       	push	r16
    5648:	06 2f       	mov	r16, r22
{
  // transmit buffer (blocking)
  int8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    564a:	80 91 0b 02 	lds	r24, 0x020B
    564e:	6c e0       	ldi	r22, 0x0C	; 12
    5650:	72 e0       	ldi	r23, 0x02	; 2
    5652:	40 91 2d 02 	lds	r20, 0x022D
    5656:	21 e0       	ldi	r18, 0x01	; 1
    5658:	0e 94 9f 2b 	call	0x573e	; 0x573e <twi_writeTo>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    565c:	10 92 2c 02 	sts	0x022C, r1
  txBufferLength = 0;
    5660:	10 92 2d 02 	sts	0x022D, r1
  // indicate that we are done transmitting
  transmitting = 0;
    5664:	10 92 2e 02 	sts	0x022E, r1
  return ret;
}
    5668:	0f 91       	pop	r16
    566a:	08 95       	ret

0000566c <TwoWire::endTransmission()>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
    566c:	61 e0       	ldi	r22, 0x01	; 1
    566e:	0e 94 23 2b 	call	0x5646	; 0x5646 <TwoWire::endTransmission(unsigned char)>
}
    5672:	08 95       	ret

00005674 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    quantity = BUFFER_LENGTH;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
    5674:	41 32       	cpi	r20, 0x21	; 33
    5676:	08 f0       	brcs	.+2      	; 0x567a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x6>
    5678:	40 e2       	ldi	r20, 0x20	; 32
    567a:	86 2f       	mov	r24, r22
    567c:	69 ee       	ldi	r22, 0xE9	; 233
    567e:	71 e0       	ldi	r23, 0x01	; 1
    5680:	0e 94 56 2b 	call	0x56ac	; 0x56ac <twi_readFrom>
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    5684:	10 92 09 02 	sts	0x0209, r1
  rxBufferLength = read;
    5688:	80 93 0a 02 	sts	0x020A, r24

  return read;
}
    568c:	08 95       	ret

0000568e <TwoWire::requestFrom(int, int)>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    568e:	21 e0       	ldi	r18, 0x01	; 1
    5690:	0e 94 3a 2b 	call	0x5674	; 0x5674 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
}
    5694:	08 95       	ret

00005696 <TwoWire::begin()>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    5696:	10 92 09 02 	sts	0x0209, r1
  rxBufferLength = 0;
    569a:	10 92 0a 02 	sts	0x020A, r1

  txBufferIndex = 0;
    569e:	10 92 2c 02 	sts	0x022C, r1
  txBufferLength = 0;
    56a2:	10 92 2d 02 	sts	0x022D, r1

  twi_init();
    56a6:	0e 94 a0 2d 	call	0x5b40	; 0x5b40 <twi_init>
}
    56aa:	08 95       	ret

000056ac <twi_readFrom>:
 *          length: number of bytes to read into array
 *          sendStop: Boolean indicating whether to send a stop at the end
 * Output   number of bytes read
 */
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
    56ac:	38 2f       	mov	r19, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    56ae:	41 32       	cpi	r20, 0x21	; 33
    56b0:	10 f0       	brcs	.+4      	; 0x56b6 <twi_readFrom+0xa>
    56b2:	40 e0       	ldi	r20, 0x00	; 0
    56b4:	42 c0       	rjmp	.+132    	; 0x573a <twi_readFrom+0x8e>
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    56b6:	80 91 3b 02 	lds	r24, 0x023B
    56ba:	88 23       	and	r24, r24
    56bc:	e1 f7       	brne	.-8      	; 0x56b6 <twi_readFrom+0xa>
    continue;
  }
  twi_state = TWI_MRX;
    56be:	91 e0       	ldi	r25, 0x01	; 1
    56c0:	90 93 3b 02 	sts	0x023B, r25
  twi_sendStop = sendStop;
    56c4:	20 93 3d 02 	sts	0x023D, r18
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    56c8:	8f ef       	ldi	r24, 0xFF	; 255
    56ca:	80 93 a8 02 	sts	0x02A8, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    56ce:	10 92 63 02 	sts	0x0263, r1
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    56d2:	41 50       	subi	r20, 0x01	; 1
    56d4:	40 93 64 02 	sts	0x0264, r20
    56d8:	4f 5f       	subi	r20, 0xFF	; 255
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    56da:	90 93 3c 02 	sts	0x023C, r25
  twi_slarw |= address << 1;
    56de:	80 91 3c 02 	lds	r24, 0x023C
    56e2:	33 0f       	add	r19, r19
    56e4:	83 2b       	or	r24, r19
    56e6:	80 93 3c 02 	sts	0x023C, r24

  if (true == twi_inRepStart) {
    56ea:	80 91 3e 02 	lds	r24, 0x023E
    56ee:	81 30       	cpi	r24, 0x01	; 1
    56f0:	41 f4       	brne	.+16     	; 0x5702 <twi_readFrom+0x56>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    56f2:	10 92 3e 02 	sts	0x023E, r1
    TWDR = twi_slarw;
    56f6:	80 91 3c 02 	lds	r24, 0x023C
    56fa:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    56fe:	85 ec       	ldi	r24, 0xC5	; 197
    5700:	01 c0       	rjmp	.+2      	; 0x5704 <twi_readFrom+0x58>
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    5702:	85 ee       	ldi	r24, 0xE5	; 229
    5704:	80 93 bc 00 	sts	0x00BC, r24

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    5708:	80 91 3b 02 	lds	r24, 0x023B
    570c:	81 30       	cpi	r24, 0x01	; 1
    570e:	e1 f3       	breq	.-8      	; 0x5708 <twi_readFrom+0x5c>
    continue;
  }

  if (twi_masterBufferIndex < length)
    5710:	80 91 63 02 	lds	r24, 0x0263
    5714:	84 17       	cp	r24, r20
    5716:	10 f4       	brcc	.+4      	; 0x571c <twi_readFrom+0x70>
    length = twi_masterBufferIndex;
    5718:	40 91 63 02 	lds	r20, 0x0263
    571c:	20 e0       	ldi	r18, 0x00	; 0
    571e:	30 e0       	ldi	r19, 0x00	; 0
    5720:	0a c0       	rjmp	.+20     	; 0x5736 <twi_readFrom+0x8a>

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
    5722:	fb 01       	movw	r30, r22
    5724:	e2 0f       	add	r30, r18
    5726:	f3 1f       	adc	r31, r19
    5728:	d9 01       	movw	r26, r18
    572a:	ad 5b       	subi	r26, 0xBD	; 189
    572c:	bd 4f       	sbci	r27, 0xFD	; 253
    572e:	8c 91       	ld	r24, X
    5730:	80 83       	st	Z, r24
    5732:	2f 5f       	subi	r18, 0xFF	; 255
    5734:	3f 4f       	sbci	r19, 0xFF	; 255

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    5736:	24 17       	cp	r18, r20
    5738:	a0 f3       	brcs	.-24     	; 0x5722 <twi_readFrom+0x76>
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
}
    573a:	84 2f       	mov	r24, r20
    573c:	08 95       	ret

0000573e <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
    573e:	0f 93       	push	r16
    5740:	1f 93       	push	r17
    5742:	58 2f       	mov	r21, r24
    5744:	12 2f       	mov	r17, r18
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    5746:	41 32       	cpi	r20, 0x21	; 33
    5748:	10 f0       	brcs	.+4      	; 0x574e <twi_writeTo+0x10>
    574a:	81 e0       	ldi	r24, 0x01	; 1
    574c:	4a c0       	rjmp	.+148    	; 0x57e2 <twi_writeTo+0xa4>
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    574e:	80 91 3b 02 	lds	r24, 0x023B
    5752:	88 23       	and	r24, r24
    5754:	e1 f7       	brne	.-8      	; 0x574e <twi_writeTo+0x10>
    continue;
  }
  twi_state = TWI_MTX;
    5756:	82 e0       	ldi	r24, 0x02	; 2
    5758:	80 93 3b 02 	sts	0x023B, r24
  twi_sendStop = sendStop;
    575c:	00 93 3d 02 	sts	0x023D, r16
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    5760:	8f ef       	ldi	r24, 0xFF	; 255
    5762:	80 93 a8 02 	sts	0x02A8, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    5766:	10 92 63 02 	sts	0x0263, r1
  twi_masterBufferLength = length;
    576a:	40 93 64 02 	sts	0x0264, r20
    576e:	a3 e4       	ldi	r26, 0x43	; 67
    5770:	b2 e0       	ldi	r27, 0x02	; 2
    5772:	fb 01       	movw	r30, r22
    5774:	02 c0       	rjmp	.+4      	; 0x577a <twi_writeTo+0x3c>
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
    5776:	81 91       	ld	r24, Z+
    5778:	8d 93       	st	X+, r24
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    577a:	8e 2f       	mov	r24, r30
    577c:	86 1b       	sub	r24, r22
    577e:	84 17       	cp	r24, r20
    5780:	d0 f3       	brcs	.-12     	; 0x5776 <twi_writeTo+0x38>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    5782:	10 92 3c 02 	sts	0x023C, r1
  twi_slarw |= address << 1;
    5786:	80 91 3c 02 	lds	r24, 0x023C
    578a:	55 0f       	add	r21, r21
    578c:	85 2b       	or	r24, r21
    578e:	80 93 3c 02 	sts	0x023C, r24
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    5792:	80 91 3e 02 	lds	r24, 0x023E
    5796:	81 30       	cpi	r24, 0x01	; 1
    5798:	41 f4       	brne	.+16     	; 0x57aa <twi_writeTo+0x6c>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    579a:	10 92 3e 02 	sts	0x023E, r1
    TWDR = twi_slarw;				
    579e:	80 91 3c 02 	lds	r24, 0x023C
    57a2:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    57a6:	85 ec       	ldi	r24, 0xC5	; 197
    57a8:	01 c0       	rjmp	.+2      	; 0x57ac <twi_writeTo+0x6e>
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
    57aa:	85 ee       	ldi	r24, 0xE5	; 229
    57ac:	80 93 bc 00 	sts	0x00BC, r24

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    57b0:	11 23       	and	r17, r17
    57b2:	21 f0       	breq	.+8      	; 0x57bc <twi_writeTo+0x7e>
    57b4:	80 91 3b 02 	lds	r24, 0x023B
    57b8:	82 30       	cpi	r24, 0x02	; 2
    57ba:	e1 f3       	breq	.-8      	; 0x57b4 <twi_writeTo+0x76>
    continue;
  }
  
  if (twi_error == 0xFF)
    57bc:	80 91 a8 02 	lds	r24, 0x02A8
    57c0:	8f 3f       	cpi	r24, 0xFF	; 255
    57c2:	11 f4       	brne	.+4      	; 0x57c8 <twi_writeTo+0x8a>
    57c4:	80 e0       	ldi	r24, 0x00	; 0
    57c6:	0d c0       	rjmp	.+26     	; 0x57e2 <twi_writeTo+0xa4>
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    57c8:	80 91 a8 02 	lds	r24, 0x02A8
    57cc:	80 32       	cpi	r24, 0x20	; 32
    57ce:	11 f4       	brne	.+4      	; 0x57d4 <twi_writeTo+0x96>
    57d0:	82 e0       	ldi	r24, 0x02	; 2
    57d2:	07 c0       	rjmp	.+14     	; 0x57e2 <twi_writeTo+0xa4>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    57d4:	80 91 a8 02 	lds	r24, 0x02A8
    57d8:	80 33       	cpi	r24, 0x30	; 48
    57da:	11 f0       	breq	.+4      	; 0x57e0 <twi_writeTo+0xa2>
    57dc:	84 e0       	ldi	r24, 0x04	; 4
    57de:	01 c0       	rjmp	.+2      	; 0x57e2 <twi_writeTo+0xa4>
    57e0:	83 e0       	ldi	r24, 0x03	; 3
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
}
    57e2:	1f 91       	pop	r17
    57e4:	0f 91       	pop	r16
    57e6:	08 95       	ret

000057e8 <twi_transmit>:
 * Output   1 length too long for buffer
 *          2 not slave transmitter
 *          0 ok
 */
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
    57e8:	48 2f       	mov	r20, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    57ea:	61 32       	cpi	r22, 0x21	; 33
    57ec:	10 f0       	brcs	.+4      	; 0x57f2 <twi_transmit+0xa>
    57ee:	81 e0       	ldi	r24, 0x01	; 1
    57f0:	08 95       	ret
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    57f2:	80 91 3b 02 	lds	r24, 0x023B
    57f6:	84 30       	cpi	r24, 0x04	; 4
    57f8:	11 f0       	breq	.+4      	; 0x57fe <twi_transmit+0x16>
    57fa:	82 e0       	ldi	r24, 0x02	; 2
    57fc:	08 95       	ret
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
    57fe:	60 93 86 02 	sts	0x0286, r22
    5802:	a5 e6       	ldi	r26, 0x65	; 101
    5804:	b2 e0       	ldi	r27, 0x02	; 2
    5806:	84 2f       	mov	r24, r20
    5808:	9c 01       	movw	r18, r24
    580a:	f9 01       	movw	r30, r18
    580c:	02 c0       	rjmp	.+4      	; 0x5812 <twi_transmit+0x2a>
  for(i = 0; i < length; ++i){
    twi_txBuffer[i] = data[i];
    580e:	81 91       	ld	r24, Z+
    5810:	8d 93       	st	X+, r24
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
    5812:	8e 2f       	mov	r24, r30
    5814:	84 1b       	sub	r24, r20
    5816:	86 17       	cp	r24, r22
    5818:	d0 f3       	brcs	.-12     	; 0x580e <twi_transmit+0x26>
    581a:	80 e0       	ldi	r24, 0x00	; 0
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
}
    581c:	08 95       	ret

0000581e <__vector_24>:
  // update twi state
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
    581e:	1f 92       	push	r1
    5820:	0f 92       	push	r0
    5822:	0f b6       	in	r0, 0x3f	; 63
    5824:	0f 92       	push	r0
    5826:	11 24       	eor	r1, r1
    5828:	2f 93       	push	r18
    582a:	3f 93       	push	r19
    582c:	4f 93       	push	r20
    582e:	5f 93       	push	r21
    5830:	6f 93       	push	r22
    5832:	7f 93       	push	r23
    5834:	8f 93       	push	r24
    5836:	9f 93       	push	r25
    5838:	af 93       	push	r26
    583a:	bf 93       	push	r27
    583c:	ef 93       	push	r30
    583e:	ff 93       	push	r31
  switch(TW_STATUS){
    5840:	80 91 b9 00 	lds	r24, 0x00B9
    5844:	90 e0       	ldi	r25, 0x00	; 0
    5846:	88 7f       	andi	r24, 0xF8	; 248
    5848:	90 70       	andi	r25, 0x00	; 0
    584a:	80 36       	cpi	r24, 0x60	; 96
    584c:	91 05       	cpc	r25, r1
    584e:	09 f4       	brne	.+2      	; 0x5852 <__vector_24+0x34>
    5850:	f2 c0       	rjmp	.+484    	; 0x5a36 <__vector_24+0x218>
    5852:	81 36       	cpi	r24, 0x61	; 97
    5854:	91 05       	cpc	r25, r1
    5856:	cc f5       	brge	.+114    	; 0x58ca <__vector_24+0xac>
    5858:	88 32       	cpi	r24, 0x28	; 40
    585a:	91 05       	cpc	r25, r1
    585c:	09 f4       	brne	.+2      	; 0x5860 <__vector_24+0x42>
    585e:	7b c0       	rjmp	.+246    	; 0x5956 <__vector_24+0x138>
    5860:	89 32       	cpi	r24, 0x29	; 41
    5862:	91 05       	cpc	r25, r1
    5864:	b4 f4       	brge	.+44     	; 0x5892 <__vector_24+0x74>
    5866:	80 31       	cpi	r24, 0x10	; 16
    5868:	91 05       	cpc	r25, r1
    586a:	09 f4       	brne	.+2      	; 0x586e <__vector_24+0x50>
    586c:	6f c0       	rjmp	.+222    	; 0x594c <__vector_24+0x12e>
    586e:	81 31       	cpi	r24, 0x11	; 17
    5870:	91 05       	cpc	r25, r1
    5872:	3c f4       	brge	.+14     	; 0x5882 <__vector_24+0x64>
    5874:	00 97       	sbiw	r24, 0x00	; 0
    5876:	09 f4       	brne	.+2      	; 0x587a <__vector_24+0x5c>
    5878:	47 c1       	rjmp	.+654    	; 0x5b08 <__vector_24+0x2ea>
    587a:	08 97       	sbiw	r24, 0x08	; 8
    587c:	09 f0       	breq	.+2      	; 0x5880 <__vector_24+0x62>
    587e:	4f c1       	rjmp	.+670    	; 0x5b1e <__vector_24+0x300>
    5880:	65 c0       	rjmp	.+202    	; 0x594c <__vector_24+0x12e>
    5882:	88 31       	cpi	r24, 0x18	; 24
    5884:	91 05       	cpc	r25, r1
    5886:	09 f4       	brne	.+2      	; 0x588a <__vector_24+0x6c>
    5888:	66 c0       	rjmp	.+204    	; 0x5956 <__vector_24+0x138>
    588a:	80 97       	sbiw	r24, 0x20	; 32
    588c:	09 f0       	breq	.+2      	; 0x5890 <__vector_24+0x72>
    588e:	47 c1       	rjmp	.+654    	; 0x5b1e <__vector_24+0x300>
    5890:	82 c0       	rjmp	.+260    	; 0x5996 <__vector_24+0x178>
    5892:	80 34       	cpi	r24, 0x40	; 64
    5894:	91 05       	cpc	r25, r1
    5896:	09 f4       	brne	.+2      	; 0x589a <__vector_24+0x7c>
    5898:	a4 c0       	rjmp	.+328    	; 0x59e2 <__vector_24+0x1c4>
    589a:	81 34       	cpi	r24, 0x41	; 65
    589c:	91 05       	cpc	r25, r1
    589e:	44 f4       	brge	.+16     	; 0x58b0 <__vector_24+0x92>
    58a0:	80 33       	cpi	r24, 0x30	; 48
    58a2:	91 05       	cpc	r25, r1
    58a4:	09 f4       	brne	.+2      	; 0x58a8 <__vector_24+0x8a>
    58a6:	82 c0       	rjmp	.+260    	; 0x59ac <__vector_24+0x18e>
    58a8:	c8 97       	sbiw	r24, 0x38	; 56
    58aa:	09 f0       	breq	.+2      	; 0x58ae <__vector_24+0x90>
    58ac:	38 c1       	rjmp	.+624    	; 0x5b1e <__vector_24+0x300>
    58ae:	89 c0       	rjmp	.+274    	; 0x59c2 <__vector_24+0x1a4>
    58b0:	80 35       	cpi	r24, 0x50	; 80
    58b2:	91 05       	cpc	r25, r1
    58b4:	09 f4       	brne	.+2      	; 0x58b8 <__vector_24+0x9a>
    58b6:	89 c0       	rjmp	.+274    	; 0x59ca <__vector_24+0x1ac>
    58b8:	88 35       	cpi	r24, 0x58	; 88
    58ba:	91 05       	cpc	r25, r1
    58bc:	09 f4       	brne	.+2      	; 0x58c0 <__vector_24+0xa2>
    58be:	96 c0       	rjmp	.+300    	; 0x59ec <__vector_24+0x1ce>
    58c0:	88 34       	cpi	r24, 0x48	; 72
    58c2:	91 05       	cpc	r25, r1
    58c4:	09 f0       	breq	.+2      	; 0x58c8 <__vector_24+0xaa>
    58c6:	2b c1       	rjmp	.+598    	; 0x5b1e <__vector_24+0x300>
    58c8:	ae c0       	rjmp	.+348    	; 0x5a26 <__vector_24+0x208>
    58ca:	88 39       	cpi	r24, 0x98	; 152
    58cc:	91 05       	cpc	r25, r1
    58ce:	09 f4       	brne	.+2      	; 0x58d2 <__vector_24+0xb4>
    58d0:	13 c1       	rjmp	.+550    	; 0x5af8 <__vector_24+0x2da>
    58d2:	89 39       	cpi	r24, 0x99	; 153
    58d4:	91 05       	cpc	r25, r1
    58d6:	ec f4       	brge	.+58     	; 0x5912 <__vector_24+0xf4>
    58d8:	88 37       	cpi	r24, 0x78	; 120
    58da:	91 05       	cpc	r25, r1
    58dc:	09 f4       	brne	.+2      	; 0x58e0 <__vector_24+0xc2>
    58de:	ab c0       	rjmp	.+342    	; 0x5a36 <__vector_24+0x218>
    58e0:	89 37       	cpi	r24, 0x79	; 121
    58e2:	91 05       	cpc	r25, r1
    58e4:	4c f4       	brge	.+18     	; 0x58f8 <__vector_24+0xda>
    58e6:	88 36       	cpi	r24, 0x68	; 104
    58e8:	91 05       	cpc	r25, r1
    58ea:	09 f4       	brne	.+2      	; 0x58ee <__vector_24+0xd0>
    58ec:	a4 c0       	rjmp	.+328    	; 0x5a36 <__vector_24+0x218>
    58ee:	80 37       	cpi	r24, 0x70	; 112
    58f0:	91 05       	cpc	r25, r1
    58f2:	09 f0       	breq	.+2      	; 0x58f6 <__vector_24+0xd8>
    58f4:	14 c1       	rjmp	.+552    	; 0x5b1e <__vector_24+0x300>
    58f6:	9f c0       	rjmp	.+318    	; 0x5a36 <__vector_24+0x218>
    58f8:	88 38       	cpi	r24, 0x88	; 136
    58fa:	91 05       	cpc	r25, r1
    58fc:	09 f4       	brne	.+2      	; 0x5900 <__vector_24+0xe2>
    58fe:	fc c0       	rjmp	.+504    	; 0x5af8 <__vector_24+0x2da>
    5900:	80 39       	cpi	r24, 0x90	; 144
    5902:	91 05       	cpc	r25, r1
    5904:	09 f4       	brne	.+2      	; 0x5908 <__vector_24+0xea>
    5906:	9d c0       	rjmp	.+314    	; 0x5a42 <__vector_24+0x224>
    5908:	80 38       	cpi	r24, 0x80	; 128
    590a:	91 05       	cpc	r25, r1
    590c:	09 f0       	breq	.+2      	; 0x5910 <__vector_24+0xf2>
    590e:	07 c1       	rjmp	.+526    	; 0x5b1e <__vector_24+0x300>
    5910:	98 c0       	rjmp	.+304    	; 0x5a42 <__vector_24+0x224>
    5912:	80 3b       	cpi	r24, 0xB0	; 176
    5914:	91 05       	cpc	r25, r1
    5916:	09 f4       	brne	.+2      	; 0x591a <__vector_24+0xfc>
    5918:	c6 c0       	rjmp	.+396    	; 0x5aa6 <__vector_24+0x288>
    591a:	81 3b       	cpi	r24, 0xB1	; 177
    591c:	91 05       	cpc	r25, r1
    591e:	4c f4       	brge	.+18     	; 0x5932 <__vector_24+0x114>
    5920:	80 3a       	cpi	r24, 0xA0	; 160
    5922:	91 05       	cpc	r25, r1
    5924:	09 f4       	brne	.+2      	; 0x5928 <__vector_24+0x10a>
    5926:	9f c0       	rjmp	.+318    	; 0x5a66 <__vector_24+0x248>
    5928:	88 3a       	cpi	r24, 0xA8	; 168
    592a:	91 05       	cpc	r25, r1
    592c:	09 f0       	breq	.+2      	; 0x5930 <__vector_24+0x112>
    592e:	f7 c0       	rjmp	.+494    	; 0x5b1e <__vector_24+0x300>
    5930:	ba c0       	rjmp	.+372    	; 0x5aa6 <__vector_24+0x288>
    5932:	80 3c       	cpi	r24, 0xC0	; 192
    5934:	91 05       	cpc	r25, r1
    5936:	09 f4       	brne	.+2      	; 0x593a <__vector_24+0x11c>
    5938:	e3 c0       	rjmp	.+454    	; 0x5b00 <__vector_24+0x2e2>
    593a:	88 3c       	cpi	r24, 0xC8	; 200
    593c:	91 05       	cpc	r25, r1
    593e:	09 f4       	brne	.+2      	; 0x5942 <__vector_24+0x124>
    5940:	df c0       	rjmp	.+446    	; 0x5b00 <__vector_24+0x2e2>
    5942:	88 3b       	cpi	r24, 0xB8	; 184
    5944:	91 05       	cpc	r25, r1
    5946:	09 f0       	breq	.+2      	; 0x594a <__vector_24+0x12c>
    5948:	ea c0       	rjmp	.+468    	; 0x5b1e <__vector_24+0x300>
    594a:	c2 c0       	rjmp	.+388    	; 0x5ad0 <__vector_24+0x2b2>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    594c:	80 91 3c 02 	lds	r24, 0x023C
    5950:	80 93 bb 00 	sts	0x00BB, r24
    5954:	cf c0       	rjmp	.+414    	; 0x5af4 <__vector_24+0x2d6>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    5956:	90 91 63 02 	lds	r25, 0x0263
    595a:	80 91 64 02 	lds	r24, 0x0264
    595e:	98 17       	cp	r25, r24
    5960:	68 f4       	brcc	.+26     	; 0x597c <__vector_24+0x15e>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    5962:	90 91 63 02 	lds	r25, 0x0263
    5966:	e9 2f       	mov	r30, r25
    5968:	f0 e0       	ldi	r31, 0x00	; 0
    596a:	ed 5b       	subi	r30, 0xBD	; 189
    596c:	fd 4f       	sbci	r31, 0xFD	; 253
    596e:	80 81       	ld	r24, Z
    5970:	80 93 bb 00 	sts	0x00BB, r24
    5974:	9f 5f       	subi	r25, 0xFF	; 255
    5976:	90 93 63 02 	sts	0x0263, r25
    597a:	bc c0       	rjmp	.+376    	; 0x5af4 <__vector_24+0x2d6>
        twi_reply(1);
      }else{
	if (twi_sendStop)
    597c:	80 91 3d 02 	lds	r24, 0x023D
    5980:	88 23       	and	r24, r24
    5982:	09 f4       	brne	.+2      	; 0x5986 <__vector_24+0x168>
    5984:	4b c0       	rjmp	.+150    	; 0x5a1c <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    5986:	85 ed       	ldi	r24, 0xD5	; 213
    5988:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    598c:	80 91 bc 00 	lds	r24, 0x00BC
    5990:	84 fd       	sbrc	r24, 4
    5992:	fc cf       	rjmp	.-8      	; 0x598c <__vector_24+0x16e>
    5994:	c2 c0       	rjmp	.+388    	; 0x5b1a <__vector_24+0x2fc>
	  twi_state = TWI_READY;
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    5996:	80 e2       	ldi	r24, 0x20	; 32
    5998:	80 93 a8 02 	sts	0x02A8, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    599c:	85 ed       	ldi	r24, 0xD5	; 213
    599e:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    59a2:	80 91 bc 00 	lds	r24, 0x00BC
    59a6:	84 fd       	sbrc	r24, 4
    59a8:	fc cf       	rjmp	.-8      	; 0x59a2 <__vector_24+0x184>
    59aa:	b7 c0       	rjmp	.+366    	; 0x5b1a <__vector_24+0x2fc>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    59ac:	80 e3       	ldi	r24, 0x30	; 48
    59ae:	80 93 a8 02 	sts	0x02A8, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    59b2:	85 ed       	ldi	r24, 0xD5	; 213
    59b4:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    59b8:	80 91 bc 00 	lds	r24, 0x00BC
    59bc:	84 fd       	sbrc	r24, 4
    59be:	fc cf       	rjmp	.-8      	; 0x59b8 <__vector_24+0x19a>
    59c0:	ac c0       	rjmp	.+344    	; 0x5b1a <__vector_24+0x2fc>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    59c2:	88 e3       	ldi	r24, 0x38	; 56
    59c4:	80 93 a8 02 	sts	0x02A8, r24
    59c8:	9b c0       	rjmp	.+310    	; 0x5b00 <__vector_24+0x2e2>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    59ca:	80 91 63 02 	lds	r24, 0x0263
    59ce:	90 91 bb 00 	lds	r25, 0x00BB
    59d2:	e8 2f       	mov	r30, r24
    59d4:	f0 e0       	ldi	r31, 0x00	; 0
    59d6:	ed 5b       	subi	r30, 0xBD	; 189
    59d8:	fd 4f       	sbci	r31, 0xFD	; 253
    59da:	90 83       	st	Z, r25
    59dc:	8f 5f       	subi	r24, 0xFF	; 255
    59de:	80 93 63 02 	sts	0x0263, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    59e2:	90 91 63 02 	lds	r25, 0x0263
    59e6:	80 91 64 02 	lds	r24, 0x0264
    59ea:	82 c0       	rjmp	.+260    	; 0x5af0 <__vector_24+0x2d2>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    59ec:	80 91 63 02 	lds	r24, 0x0263
    59f0:	90 91 bb 00 	lds	r25, 0x00BB
    59f4:	e8 2f       	mov	r30, r24
    59f6:	f0 e0       	ldi	r31, 0x00	; 0
    59f8:	ed 5b       	subi	r30, 0xBD	; 189
    59fa:	fd 4f       	sbci	r31, 0xFD	; 253
    59fc:	90 83       	st	Z, r25
    59fe:	8f 5f       	subi	r24, 0xFF	; 255
    5a00:	80 93 63 02 	sts	0x0263, r24
	if (twi_sendStop)
    5a04:	80 91 3d 02 	lds	r24, 0x023D
    5a08:	88 23       	and	r24, r24
    5a0a:	41 f0       	breq	.+16     	; 0x5a1c <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    5a0c:	85 ed       	ldi	r24, 0xD5	; 213
    5a0e:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    5a12:	80 91 bc 00 	lds	r24, 0x00BC
    5a16:	84 fd       	sbrc	r24, 4
    5a18:	fc cf       	rjmp	.-8      	; 0x5a12 <__vector_24+0x1f4>
    5a1a:	7f c0       	rjmp	.+254    	; 0x5b1a <__vector_24+0x2fc>
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    5a1c:	81 e0       	ldi	r24, 0x01	; 1
    5a1e:	80 93 3e 02 	sts	0x023E, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    5a22:	84 ea       	ldi	r24, 0xA4	; 164
    5a24:	6e c0       	rjmp	.+220    	; 0x5b02 <__vector_24+0x2e4>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    5a26:	85 ed       	ldi	r24, 0xD5	; 213
    5a28:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    5a2c:	80 91 bc 00 	lds	r24, 0x00BC
    5a30:	84 fd       	sbrc	r24, 4
    5a32:	fc cf       	rjmp	.-8      	; 0x5a2c <__vector_24+0x20e>
    5a34:	72 c0       	rjmp	.+228    	; 0x5b1a <__vector_24+0x2fc>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    5a36:	83 e0       	ldi	r24, 0x03	; 3
    5a38:	80 93 3b 02 	sts	0x023B, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    5a3c:	10 92 a7 02 	sts	0x02A7, r1
    5a40:	59 c0       	rjmp	.+178    	; 0x5af4 <__vector_24+0x2d6>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    5a42:	80 91 a7 02 	lds	r24, 0x02A7
    5a46:	80 32       	cpi	r24, 0x20	; 32
    5a48:	08 f0       	brcs	.+2      	; 0x5a4c <__vector_24+0x22e>
    5a4a:	56 c0       	rjmp	.+172    	; 0x5af8 <__vector_24+0x2da>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    5a4c:	80 91 a7 02 	lds	r24, 0x02A7
    5a50:	90 91 bb 00 	lds	r25, 0x00BB
    5a54:	e8 2f       	mov	r30, r24
    5a56:	f0 e0       	ldi	r31, 0x00	; 0
    5a58:	e9 57       	subi	r30, 0x79	; 121
    5a5a:	fd 4f       	sbci	r31, 0xFD	; 253
    5a5c:	90 83       	st	Z, r25
    5a5e:	8f 5f       	subi	r24, 0xFF	; 255
    5a60:	80 93 a7 02 	sts	0x02A7, r24
    5a64:	47 c0       	rjmp	.+142    	; 0x5af4 <__vector_24+0x2d6>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    5a66:	80 91 a7 02 	lds	r24, 0x02A7
    5a6a:	80 32       	cpi	r24, 0x20	; 32
    5a6c:	30 f4       	brcc	.+12     	; 0x5a7a <__vector_24+0x25c>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    5a6e:	e0 91 a7 02 	lds	r30, 0x02A7
    5a72:	f0 e0       	ldi	r31, 0x00	; 0
    5a74:	e9 57       	subi	r30, 0x79	; 121
    5a76:	fd 4f       	sbci	r31, 0xFD	; 253
    5a78:	10 82       	st	Z, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    5a7a:	85 ed       	ldi	r24, 0xD5	; 213
    5a7c:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    5a80:	80 91 bc 00 	lds	r24, 0x00BC
    5a84:	84 fd       	sbrc	r24, 4
    5a86:	fc cf       	rjmp	.-8      	; 0x5a80 <__vector_24+0x262>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    5a88:	10 92 3b 02 	sts	0x023B, r1
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    5a8c:	60 91 a7 02 	lds	r22, 0x02A7
    5a90:	e0 91 41 02 	lds	r30, 0x0241
    5a94:	f0 91 42 02 	lds	r31, 0x0242
    5a98:	87 e8       	ldi	r24, 0x87	; 135
    5a9a:	92 e0       	ldi	r25, 0x02	; 2
    5a9c:	70 e0       	ldi	r23, 0x00	; 0
    5a9e:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    5aa0:	10 92 a7 02 	sts	0x02A7, r1
    5aa4:	2d c0       	rjmp	.+90     	; 0x5b00 <__vector_24+0x2e2>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    5aa6:	84 e0       	ldi	r24, 0x04	; 4
    5aa8:	80 93 3b 02 	sts	0x023B, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    5aac:	10 92 85 02 	sts	0x0285, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    5ab0:	10 92 86 02 	sts	0x0286, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    5ab4:	e0 91 3f 02 	lds	r30, 0x023F
    5ab8:	f0 91 40 02 	lds	r31, 0x0240
    5abc:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    5abe:	80 91 86 02 	lds	r24, 0x0286
    5ac2:	88 23       	and	r24, r24
    5ac4:	29 f4       	brne	.+10     	; 0x5ad0 <__vector_24+0x2b2>
        twi_txBufferLength = 1;
    5ac6:	81 e0       	ldi	r24, 0x01	; 1
    5ac8:	80 93 86 02 	sts	0x0286, r24
        twi_txBuffer[0] = 0x00;
    5acc:	10 92 65 02 	sts	0x0265, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    5ad0:	90 91 85 02 	lds	r25, 0x0285
    5ad4:	e9 2f       	mov	r30, r25
    5ad6:	f0 e0       	ldi	r31, 0x00	; 0
    5ad8:	eb 59       	subi	r30, 0x9B	; 155
    5ada:	fd 4f       	sbci	r31, 0xFD	; 253
    5adc:	80 81       	ld	r24, Z
    5ade:	80 93 bb 00 	sts	0x00BB, r24
    5ae2:	9f 5f       	subi	r25, 0xFF	; 255
    5ae4:	90 93 85 02 	sts	0x0285, r25
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    5ae8:	90 91 85 02 	lds	r25, 0x0285
    5aec:	80 91 86 02 	lds	r24, 0x0286
    5af0:	98 17       	cp	r25, r24
    5af2:	10 f4       	brcc	.+4      	; 0x5af8 <__vector_24+0x2da>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5af4:	85 ec       	ldi	r24, 0xC5	; 197
    5af6:	01 c0       	rjmp	.+2      	; 0x5afa <__vector_24+0x2dc>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    5af8:	85 e8       	ldi	r24, 0x85	; 133
    5afa:	80 93 bc 00 	sts	0x00BC, r24
    5afe:	0f c0       	rjmp	.+30     	; 0x5b1e <__vector_24+0x300>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5b00:	85 ec       	ldi	r24, 0xC5	; 197
    5b02:	80 93 bc 00 	sts	0x00BC, r24
    5b06:	09 c0       	rjmp	.+18     	; 0x5b1a <__vector_24+0x2fc>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    5b08:	10 92 a8 02 	sts	0x02A8, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    5b0c:	85 ed       	ldi	r24, 0xD5	; 213
    5b0e:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    5b12:	80 91 bc 00 	lds	r24, 0x00BC
    5b16:	84 fd       	sbrc	r24, 4
    5b18:	fc cf       	rjmp	.-8      	; 0x5b12 <__vector_24+0x2f4>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    5b1a:	10 92 3b 02 	sts	0x023B, r1
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    5b1e:	ff 91       	pop	r31
    5b20:	ef 91       	pop	r30
    5b22:	bf 91       	pop	r27
    5b24:	af 91       	pop	r26
    5b26:	9f 91       	pop	r25
    5b28:	8f 91       	pop	r24
    5b2a:	7f 91       	pop	r23
    5b2c:	6f 91       	pop	r22
    5b2e:	5f 91       	pop	r21
    5b30:	4f 91       	pop	r20
    5b32:	3f 91       	pop	r19
    5b34:	2f 91       	pop	r18
    5b36:	0f 90       	pop	r0
    5b38:	0f be       	out	0x3f, r0	; 63
    5b3a:	0f 90       	pop	r0
    5b3c:	1f 90       	pop	r1
    5b3e:	18 95       	reti

00005b40 <twi_init>:
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
    5b40:	10 92 3b 02 	sts	0x023B, r1
  twi_sendStop = true;		// default value
    5b44:	81 e0       	ldi	r24, 0x01	; 1
    5b46:	80 93 3d 02 	sts	0x023D, r24
  twi_inRepStart = false;
    5b4a:	10 92 3e 02 	sts	0x023E, r1
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
    5b4e:	82 e1       	ldi	r24, 0x12	; 18
    5b50:	61 e0       	ldi	r22, 0x01	; 1
    5b52:	0e 94 fd 2d 	call	0x5bfa	; 0x5bfa <digitalWrite>
  digitalWrite(SCL, 1);
    5b56:	83 e1       	ldi	r24, 0x13	; 19
    5b58:	61 e0       	ldi	r22, 0x01	; 1
    5b5a:	0e 94 fd 2d 	call	0x5bfa	; 0x5bfa <digitalWrite>

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    5b5e:	e9 eb       	ldi	r30, 0xB9	; 185
    5b60:	f0 e0       	ldi	r31, 0x00	; 0
    5b62:	80 81       	ld	r24, Z
    5b64:	8e 7f       	andi	r24, 0xFE	; 254
    5b66:	80 83       	st	Z, r24
  cbi(TWSR, TWPS1);
    5b68:	80 81       	ld	r24, Z
    5b6a:	8d 7f       	andi	r24, 0xFD	; 253
    5b6c:	80 83       	st	Z, r24
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
    5b6e:	8d ef       	ldi	r24, 0xFD	; 253
    5b70:	80 93 b8 00 	sts	0x00B8, r24
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    5b74:	85 e4       	ldi	r24, 0x45	; 69
    5b76:	80 93 bc 00 	sts	0x00BC, r24
}
    5b7a:	08 95       	ret

00005b7c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    5b7c:	cf 93       	push	r28
    5b7e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    5b80:	48 2f       	mov	r20, r24
    5b82:	50 e0       	ldi	r21, 0x00	; 0
    5b84:	ca 01       	movw	r24, r20
    5b86:	85 54       	subi	r24, 0x45	; 69
    5b88:	99 4f       	sbci	r25, 0xF9	; 249
    5b8a:	fc 01       	movw	r30, r24
    5b8c:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
    5b8e:	49 55       	subi	r20, 0x59	; 89
    5b90:	59 4f       	sbci	r21, 0xF9	; 249
    5b92:	fa 01       	movw	r30, r20
    5b94:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    5b96:	88 23       	and	r24, r24
    5b98:	69 f1       	breq	.+90     	; 0x5bf4 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    5b9a:	90 e0       	ldi	r25, 0x00	; 0
    5b9c:	88 0f       	add	r24, r24
    5b9e:	99 1f       	adc	r25, r25
    5ba0:	fc 01       	movw	r30, r24
    5ba2:	e7 57       	subi	r30, 0x77	; 119
    5ba4:	f9 4f       	sbci	r31, 0xF9	; 249
    5ba6:	a5 91       	lpm	r26, Z+
    5ba8:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
    5baa:	fc 01       	movw	r30, r24
    5bac:	ed 56       	subi	r30, 0x6D	; 109
    5bae:	f9 4f       	sbci	r31, 0xF9	; 249
    5bb0:	c5 91       	lpm	r28, Z+
    5bb2:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
    5bb4:	66 23       	and	r22, r22
    5bb6:	51 f4       	brne	.+20     	; 0x5bcc <pinMode+0x50>
		uint8_t oldSREG = SREG;
    5bb8:	2f b7       	in	r18, 0x3f	; 63
                cli();
    5bba:	f8 94       	cli
		*reg &= ~bit;
    5bbc:	8c 91       	ld	r24, X
    5bbe:	93 2f       	mov	r25, r19
    5bc0:	90 95       	com	r25
    5bc2:	89 23       	and	r24, r25
    5bc4:	8c 93       	st	X, r24
		*out &= ~bit;
    5bc6:	88 81       	ld	r24, Y
    5bc8:	89 23       	and	r24, r25
    5bca:	0b c0       	rjmp	.+22     	; 0x5be2 <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    5bcc:	62 30       	cpi	r22, 0x02	; 2
    5bce:	61 f4       	brne	.+24     	; 0x5be8 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    5bd0:	2f b7       	in	r18, 0x3f	; 63
                cli();
    5bd2:	f8 94       	cli
		*reg &= ~bit;
    5bd4:	8c 91       	ld	r24, X
    5bd6:	93 2f       	mov	r25, r19
    5bd8:	90 95       	com	r25
    5bda:	89 23       	and	r24, r25
    5bdc:	8c 93       	st	X, r24
		*out |= bit;
    5bde:	88 81       	ld	r24, Y
    5be0:	83 2b       	or	r24, r19
    5be2:	88 83       	st	Y, r24
		SREG = oldSREG;
    5be4:	2f bf       	out	0x3f, r18	; 63
    5be6:	06 c0       	rjmp	.+12     	; 0x5bf4 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    5be8:	9f b7       	in	r25, 0x3f	; 63
                cli();
    5bea:	f8 94       	cli
		*reg |= bit;
    5bec:	8c 91       	ld	r24, X
    5bee:	83 2b       	or	r24, r19
    5bf0:	8c 93       	st	X, r24
		SREG = oldSREG;
    5bf2:	9f bf       	out	0x3f, r25	; 63
	}
}
    5bf4:	df 91       	pop	r29
    5bf6:	cf 91       	pop	r28
    5bf8:	08 95       	ret

00005bfa <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    5bfa:	48 2f       	mov	r20, r24
    5bfc:	50 e0       	ldi	r21, 0x00	; 0
    5bfe:	ca 01       	movw	r24, r20
    5c00:	81 53       	subi	r24, 0x31	; 49
    5c02:	99 4f       	sbci	r25, 0xF9	; 249
    5c04:	fc 01       	movw	r30, r24
    5c06:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    5c08:	ca 01       	movw	r24, r20
    5c0a:	85 54       	subi	r24, 0x45	; 69
    5c0c:	99 4f       	sbci	r25, 0xF9	; 249
    5c0e:	fc 01       	movw	r30, r24
    5c10:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    5c12:	49 55       	subi	r20, 0x59	; 89
    5c14:	59 4f       	sbci	r21, 0xF9	; 249
    5c16:	fa 01       	movw	r30, r20
    5c18:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    5c1a:	33 23       	and	r19, r19
    5c1c:	09 f4       	brne	.+2      	; 0x5c20 <digitalWrite+0x26>
    5c1e:	40 c0       	rjmp	.+128    	; 0x5ca0 <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    5c20:	22 23       	and	r18, r18
    5c22:	51 f1       	breq	.+84     	; 0x5c78 <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    5c24:	23 30       	cpi	r18, 0x03	; 3
    5c26:	71 f0       	breq	.+28     	; 0x5c44 <digitalWrite+0x4a>
    5c28:	24 30       	cpi	r18, 0x04	; 4
    5c2a:	28 f4       	brcc	.+10     	; 0x5c36 <digitalWrite+0x3c>
    5c2c:	21 30       	cpi	r18, 0x01	; 1
    5c2e:	a1 f0       	breq	.+40     	; 0x5c58 <digitalWrite+0x5e>
    5c30:	22 30       	cpi	r18, 0x02	; 2
    5c32:	11 f5       	brne	.+68     	; 0x5c78 <digitalWrite+0x7e>
    5c34:	14 c0       	rjmp	.+40     	; 0x5c5e <digitalWrite+0x64>
    5c36:	26 30       	cpi	r18, 0x06	; 6
    5c38:	b1 f0       	breq	.+44     	; 0x5c66 <digitalWrite+0x6c>
    5c3a:	27 30       	cpi	r18, 0x07	; 7
    5c3c:	c1 f0       	breq	.+48     	; 0x5c6e <digitalWrite+0x74>
    5c3e:	24 30       	cpi	r18, 0x04	; 4
    5c40:	d9 f4       	brne	.+54     	; 0x5c78 <digitalWrite+0x7e>
    5c42:	04 c0       	rjmp	.+8      	; 0x5c4c <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    5c44:	80 91 80 00 	lds	r24, 0x0080
    5c48:	8f 77       	andi	r24, 0x7F	; 127
    5c4a:	03 c0       	rjmp	.+6      	; 0x5c52 <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    5c4c:	80 91 80 00 	lds	r24, 0x0080
    5c50:	8f 7d       	andi	r24, 0xDF	; 223
    5c52:	80 93 80 00 	sts	0x0080, r24
    5c56:	10 c0       	rjmp	.+32     	; 0x5c78 <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    5c58:	84 b5       	in	r24, 0x24	; 36
    5c5a:	8f 77       	andi	r24, 0x7F	; 127
    5c5c:	02 c0       	rjmp	.+4      	; 0x5c62 <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    5c5e:	84 b5       	in	r24, 0x24	; 36
    5c60:	8f 7d       	andi	r24, 0xDF	; 223
    5c62:	84 bd       	out	0x24, r24	; 36
    5c64:	09 c0       	rjmp	.+18     	; 0x5c78 <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    5c66:	80 91 b0 00 	lds	r24, 0x00B0
    5c6a:	8f 77       	andi	r24, 0x7F	; 127
    5c6c:	03 c0       	rjmp	.+6      	; 0x5c74 <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    5c6e:	80 91 b0 00 	lds	r24, 0x00B0
    5c72:	8f 7d       	andi	r24, 0xDF	; 223
    5c74:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    5c78:	e3 2f       	mov	r30, r19
    5c7a:	f0 e0       	ldi	r31, 0x00	; 0
    5c7c:	ee 0f       	add	r30, r30
    5c7e:	ff 1f       	adc	r31, r31
    5c80:	ed 56       	subi	r30, 0x6D	; 109
    5c82:	f9 4f       	sbci	r31, 0xF9	; 249
    5c84:	a5 91       	lpm	r26, Z+
    5c86:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    5c88:	2f b7       	in	r18, 0x3f	; 63
	cli();
    5c8a:	f8 94       	cli

	if (val == LOW) {
    5c8c:	66 23       	and	r22, r22
    5c8e:	21 f4       	brne	.+8      	; 0x5c98 <digitalWrite+0x9e>
		*out &= ~bit;
    5c90:	8c 91       	ld	r24, X
    5c92:	90 95       	com	r25
    5c94:	89 23       	and	r24, r25
    5c96:	02 c0       	rjmp	.+4      	; 0x5c9c <digitalWrite+0xa2>
	} else {
		*out |= bit;
    5c98:	8c 91       	ld	r24, X
    5c9a:	89 2b       	or	r24, r25
    5c9c:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    5c9e:	2f bf       	out	0x3f, r18	; 63
    5ca0:	08 95       	ret

00005ca2 <serialEvent()>:
#if !defined(USART_RX_vect) && !defined(USART0_RX_vect) && \
    !defined(USART_RXC_vect)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    5ca2:	08 95       	ret

00005ca4 <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  ISR(USART_RX_vect)
    5ca4:	1f 92       	push	r1
    5ca6:	0f 92       	push	r0
    5ca8:	0f b6       	in	r0, 0x3f	; 63
    5caa:	0f 92       	push	r0
    5cac:	11 24       	eor	r1, r1
    5cae:	2f 93       	push	r18
    5cb0:	3f 93       	push	r19
    5cb2:	4f 93       	push	r20
    5cb4:	8f 93       	push	r24
    5cb6:	9f 93       	push	r25
    5cb8:	ef 93       	push	r30
    5cba:	ff 93       	push	r31
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#endif
  {
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
    5cbc:	80 91 c0 00 	lds	r24, 0x00C0
    5cc0:	82 fd       	sbrc	r24, 2
    5cc2:	1d c0       	rjmp	.+58     	; 0x5cfe <__vector_18+0x5a>
      unsigned char c = UDR0;
    5cc4:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    5cc8:	20 91 e9 02 	lds	r18, 0x02E9
    5ccc:	30 91 ea 02 	lds	r19, 0x02EA

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    5cd0:	2f 5f       	subi	r18, 0xFF	; 255
    5cd2:	3f 4f       	sbci	r19, 0xFF	; 255
    5cd4:	2f 73       	andi	r18, 0x3F	; 63
    5cd6:	30 70       	andi	r19, 0x00	; 0
    5cd8:	80 91 eb 02 	lds	r24, 0x02EB
    5cdc:	90 91 ec 02 	lds	r25, 0x02EC
    5ce0:	28 17       	cp	r18, r24
    5ce2:	39 07       	cpc	r19, r25
    5ce4:	71 f0       	breq	.+28     	; 0x5d02 <__vector_18+0x5e>
    buffer->buffer[buffer->head] = c;
    5ce6:	e0 91 e9 02 	lds	r30, 0x02E9
    5cea:	f0 91 ea 02 	lds	r31, 0x02EA
    5cee:	e7 55       	subi	r30, 0x57	; 87
    5cf0:	fd 4f       	sbci	r31, 0xFD	; 253
    5cf2:	40 83       	st	Z, r20
    buffer->head = i;
    5cf4:	30 93 ea 02 	sts	0x02EA, r19
    5cf8:	20 93 e9 02 	sts	0x02E9, r18
    5cfc:	02 c0       	rjmp	.+4      	; 0x5d02 <__vector_18+0x5e>
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
      unsigned char c = UDR0;
      store_char(c, &rx_buffer);
    } else {
      unsigned char c = UDR0;
    5cfe:	80 91 c6 00 	lds	r24, 0x00C6
      unsigned char c = UDR;
    };
  #else
    #error UDR not defined
  #endif
  }
    5d02:	ff 91       	pop	r31
    5d04:	ef 91       	pop	r30
    5d06:	9f 91       	pop	r25
    5d08:	8f 91       	pop	r24
    5d0a:	4f 91       	pop	r20
    5d0c:	3f 91       	pop	r19
    5d0e:	2f 91       	pop	r18
    5d10:	0f 90       	pop	r0
    5d12:	0f be       	out	0x3f, r0	; 63
    5d14:	0f 90       	pop	r0
    5d16:	1f 90       	pop	r1
    5d18:	18 95       	reti

00005d1a <serialEventRun()>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    5d1a:	e0 91 3d 03 	lds	r30, 0x033D
    5d1e:	f0 91 3e 03 	lds	r31, 0x033E
    5d22:	e0 5c       	subi	r30, 0xC0	; 192
    5d24:	ff 4f       	sbci	r31, 0xFF	; 255
    5d26:	81 91       	ld	r24, Z+
    5d28:	91 91       	ld	r25, Z+
    5d2a:	20 81       	ld	r18, Z
    5d2c:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    5d2e:	82 1b       	sub	r24, r18
    5d30:	93 0b       	sbc	r25, r19
    5d32:	8f 73       	andi	r24, 0x3F	; 63
    5d34:	90 70       	andi	r25, 0x00	; 0
    5d36:	89 2b       	or	r24, r25
    5d38:	11 f0       	breq	.+4      	; 0x5d3e <serialEventRun()+0x24>
    5d3a:	0e 94 51 2e 	call	0x5ca2	; 0x5ca2 <serialEvent()>
    5d3e:	08 95       	ret

00005d40 <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
    5d40:	1f 92       	push	r1
    5d42:	0f 92       	push	r0
    5d44:	0f b6       	in	r0, 0x3f	; 63
    5d46:	0f 92       	push	r0
    5d48:	11 24       	eor	r1, r1
    5d4a:	2f 93       	push	r18
    5d4c:	3f 93       	push	r19
    5d4e:	8f 93       	push	r24
    5d50:	9f 93       	push	r25
    5d52:	ef 93       	push	r30
    5d54:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    5d56:	20 91 2d 03 	lds	r18, 0x032D
    5d5a:	30 91 2e 03 	lds	r19, 0x032E
    5d5e:	80 91 2f 03 	lds	r24, 0x032F
    5d62:	90 91 30 03 	lds	r25, 0x0330
    5d66:	28 17       	cp	r18, r24
    5d68:	39 07       	cpc	r19, r25
    5d6a:	31 f4       	brne	.+12     	; 0x5d78 <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    5d6c:	80 91 c1 00 	lds	r24, 0x00C1
    5d70:	8f 7d       	andi	r24, 0xDF	; 223
    5d72:	80 93 c1 00 	sts	0x00C1, r24
    5d76:	14 c0       	rjmp	.+40     	; 0x5da0 <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    5d78:	e0 91 2f 03 	lds	r30, 0x032F
    5d7c:	f0 91 30 03 	lds	r31, 0x0330
    5d80:	e3 51       	subi	r30, 0x13	; 19
    5d82:	fd 4f       	sbci	r31, 0xFD	; 253
    5d84:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    5d86:	80 91 2f 03 	lds	r24, 0x032F
    5d8a:	90 91 30 03 	lds	r25, 0x0330
    5d8e:	01 96       	adiw	r24, 0x01	; 1
    5d90:	8f 73       	andi	r24, 0x3F	; 63
    5d92:	90 70       	andi	r25, 0x00	; 0
    5d94:	90 93 30 03 	sts	0x0330, r25
    5d98:	80 93 2f 03 	sts	0x032F, r24
	
  #if defined(UDR0)
    UDR0 = c;
    5d9c:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    5da0:	ff 91       	pop	r31
    5da2:	ef 91       	pop	r30
    5da4:	9f 91       	pop	r25
    5da6:	8f 91       	pop	r24
    5da8:	3f 91       	pop	r19
    5daa:	2f 91       	pop	r18
    5dac:	0f 90       	pop	r0
    5dae:	0f be       	out	0x3f, r0	; 63
    5db0:	0f 90       	pop	r0
    5db2:	1f 90       	pop	r1
    5db4:	18 95       	reti

00005db6 <HardwareSerial::begin(unsigned long)>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    5db6:	af 92       	push	r10
    5db8:	bf 92       	push	r11
    5dba:	df 92       	push	r13
    5dbc:	ef 92       	push	r14
    5dbe:	ff 92       	push	r15
    5dc0:	0f 93       	push	r16
    5dc2:	1f 93       	push	r17
    5dc4:	cf 93       	push	r28
    5dc6:	df 93       	push	r29
    5dc8:	ec 01       	movw	r28, r24
    5dca:	7a 01       	movw	r14, r20
    5dcc:	8b 01       	movw	r16, r22
    5dce:	dd 24       	eor	r13, r13
    5dd0:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    5dd2:	91 e0       	ldi	r25, 0x01	; 1
    5dd4:	a9 2e       	mov	r10, r25
    5dd6:	b1 2c       	mov	r11, r1
    5dd8:	ec 89       	ldd	r30, Y+20	; 0x14
    5dda:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
    5ddc:	dd 20       	and	r13, r13
    5dde:	69 f0       	breq	.+26     	; 0x5dfa <HardwareSerial::begin(unsigned long)+0x44>
    *_ucsra = 1 << _u2x;
    5de0:	c5 01       	movw	r24, r10
    5de2:	08 a0       	ldd	r0, Y+32	; 0x20
    5de4:	02 c0       	rjmp	.+4      	; 0x5dea <HardwareSerial::begin(unsigned long)+0x34>
    5de6:	88 0f       	add	r24, r24
    5de8:	99 1f       	adc	r25, r25
    5dea:	0a 94       	dec	r0
    5dec:	e2 f7       	brpl	.-8      	; 0x5de6 <HardwareSerial::begin(unsigned long)+0x30>
    5dee:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    5df0:	60 e9       	ldi	r22, 0x90	; 144
    5df2:	70 ed       	ldi	r23, 0xD0	; 208
    5df4:	83 e0       	ldi	r24, 0x03	; 3
    5df6:	90 e0       	ldi	r25, 0x00	; 0
    5df8:	05 c0       	rjmp	.+10     	; 0x5e04 <HardwareSerial::begin(unsigned long)+0x4e>
  } else {
    *_ucsra = 0;
    5dfa:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    5dfc:	68 e4       	ldi	r22, 0x48	; 72
    5dfe:	78 ee       	ldi	r23, 0xE8	; 232
    5e00:	81 e0       	ldi	r24, 0x01	; 1
    5e02:	90 e0       	ldi	r25, 0x00	; 0
    5e04:	a8 01       	movw	r20, r16
    5e06:	97 01       	movw	r18, r14
    5e08:	0e 94 0a 34 	call	0x6814	; 0x6814 <__udivmodsi4>
    5e0c:	21 50       	subi	r18, 0x01	; 1
    5e0e:	30 40       	sbci	r19, 0x00	; 0
    5e10:	40 40       	sbci	r20, 0x00	; 0
    5e12:	50 40       	sbci	r21, 0x00	; 0
    5e14:	56 95       	lsr	r21
    5e16:	47 95       	ror	r20
    5e18:	37 95       	ror	r19
    5e1a:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    5e1c:	80 e1       	ldi	r24, 0x10	; 16
    5e1e:	20 30       	cpi	r18, 0x00	; 0
    5e20:	38 07       	cpc	r19, r24
    5e22:	20 f0       	brcs	.+8      	; 0x5e2c <HardwareSerial::begin(unsigned long)+0x76>
    5e24:	dd 20       	and	r13, r13
    5e26:	11 f0       	breq	.+4      	; 0x5e2c <HardwareSerial::begin(unsigned long)+0x76>
    5e28:	dd 24       	eor	r13, r13
    5e2a:	d6 cf       	rjmp	.-84     	; 0x5dd8 <HardwareSerial::begin(unsigned long)+0x22>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    5e2c:	e8 89       	ldd	r30, Y+16	; 0x10
    5e2e:	f9 89       	ldd	r31, Y+17	; 0x11
    5e30:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    5e32:	ea 89       	ldd	r30, Y+18	; 0x12
    5e34:	fb 89       	ldd	r31, Y+19	; 0x13
    5e36:	20 83       	st	Z, r18

  transmitting = false;
    5e38:	19 a2       	std	Y+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
    5e3a:	ee 89       	ldd	r30, Y+22	; 0x16
    5e3c:	ff 89       	ldd	r31, Y+23	; 0x17
    5e3e:	40 81       	ld	r20, Z
    5e40:	21 e0       	ldi	r18, 0x01	; 1
    5e42:	30 e0       	ldi	r19, 0x00	; 0
    5e44:	c9 01       	movw	r24, r18
    5e46:	0c 8c       	ldd	r0, Y+28	; 0x1c
    5e48:	02 c0       	rjmp	.+4      	; 0x5e4e <HardwareSerial::begin(unsigned long)+0x98>
    5e4a:	88 0f       	add	r24, r24
    5e4c:	99 1f       	adc	r25, r25
    5e4e:	0a 94       	dec	r0
    5e50:	e2 f7       	brpl	.-8      	; 0x5e4a <HardwareSerial::begin(unsigned long)+0x94>
    5e52:	48 2b       	or	r20, r24
    5e54:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    5e56:	ee 89       	ldd	r30, Y+22	; 0x16
    5e58:	ff 89       	ldd	r31, Y+23	; 0x17
    5e5a:	40 81       	ld	r20, Z
    5e5c:	c9 01       	movw	r24, r18
    5e5e:	0d 8c       	ldd	r0, Y+29	; 0x1d
    5e60:	02 c0       	rjmp	.+4      	; 0x5e66 <HardwareSerial::begin(unsigned long)+0xb0>
    5e62:	88 0f       	add	r24, r24
    5e64:	99 1f       	adc	r25, r25
    5e66:	0a 94       	dec	r0
    5e68:	e2 f7       	brpl	.-8      	; 0x5e62 <HardwareSerial::begin(unsigned long)+0xac>
    5e6a:	48 2b       	or	r20, r24
    5e6c:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    5e6e:	ee 89       	ldd	r30, Y+22	; 0x16
    5e70:	ff 89       	ldd	r31, Y+23	; 0x17
    5e72:	40 81       	ld	r20, Z
    5e74:	c9 01       	movw	r24, r18
    5e76:	0e 8c       	ldd	r0, Y+30	; 0x1e
    5e78:	02 c0       	rjmp	.+4      	; 0x5e7e <HardwareSerial::begin(unsigned long)+0xc8>
    5e7a:	88 0f       	add	r24, r24
    5e7c:	99 1f       	adc	r25, r25
    5e7e:	0a 94       	dec	r0
    5e80:	e2 f7       	brpl	.-8      	; 0x5e7a <HardwareSerial::begin(unsigned long)+0xc4>
    5e82:	48 2b       	or	r20, r24
    5e84:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    5e86:	ee 89       	ldd	r30, Y+22	; 0x16
    5e88:	ff 89       	ldd	r31, Y+23	; 0x17
    5e8a:	80 81       	ld	r24, Z
    5e8c:	0f 8c       	ldd	r0, Y+31	; 0x1f
    5e8e:	02 c0       	rjmp	.+4      	; 0x5e94 <HardwareSerial::begin(unsigned long)+0xde>
    5e90:	22 0f       	add	r18, r18
    5e92:	33 1f       	adc	r19, r19
    5e94:	0a 94       	dec	r0
    5e96:	e2 f7       	brpl	.-8      	; 0x5e90 <HardwareSerial::begin(unsigned long)+0xda>
    5e98:	20 95       	com	r18
    5e9a:	28 23       	and	r18, r24
    5e9c:	20 83       	st	Z, r18
}
    5e9e:	df 91       	pop	r29
    5ea0:	cf 91       	pop	r28
    5ea2:	1f 91       	pop	r17
    5ea4:	0f 91       	pop	r16
    5ea6:	ff 90       	pop	r15
    5ea8:	ef 90       	pop	r14
    5eaa:	df 90       	pop	r13
    5eac:	bf 90       	pop	r11
    5eae:	af 90       	pop	r10
    5eb0:	08 95       	ret

00005eb2 <HardwareSerial::end()>:
  sbi(*_ucsrb, _txen);
  sbi(*_ucsrb, _rxcie);
  cbi(*_ucsrb, _udrie);
}

void HardwareSerial::end()
    5eb2:	cf 93       	push	r28
    5eb4:	df 93       	push	r29
    5eb6:	dc 01       	movw	r26, r24
{
  // wait for transmission of outgoing data
  while (_tx_buffer->head != _tx_buffer->tail)
    5eb8:	1e 96       	adiw	r26, 0x0e	; 14
    5eba:	8d 91       	ld	r24, X+
    5ebc:	9c 91       	ld	r25, X
    5ebe:	1f 97       	sbiw	r26, 0x0f	; 15
    5ec0:	ec 01       	movw	r28, r24
    5ec2:	c0 5c       	subi	r28, 0xC0	; 192
    5ec4:	df 4f       	sbci	r29, 0xFF	; 255
    5ec6:	fc 01       	movw	r30, r24
    5ec8:	ee 5b       	subi	r30, 0xBE	; 190
    5eca:	ff 4f       	sbci	r31, 0xFF	; 255
    5ecc:	28 81       	ld	r18, Y
    5ece:	39 81       	ldd	r19, Y+1	; 0x01
    5ed0:	80 81       	ld	r24, Z
    5ed2:	91 81       	ldd	r25, Z+1	; 0x01
    5ed4:	28 17       	cp	r18, r24
    5ed6:	39 07       	cpc	r19, r25
    5ed8:	c9 f7       	brne	.-14     	; 0x5ecc <HardwareSerial::end()+0x1a>
    ;

  cbi(*_ucsrb, _rxen);
    5eda:	56 96       	adiw	r26, 0x16	; 22
    5edc:	ed 91       	ld	r30, X+
    5ede:	fc 91       	ld	r31, X
    5ee0:	57 97       	sbiw	r26, 0x17	; 23
    5ee2:	40 81       	ld	r20, Z
    5ee4:	21 e0       	ldi	r18, 0x01	; 1
    5ee6:	30 e0       	ldi	r19, 0x00	; 0
    5ee8:	c9 01       	movw	r24, r18
    5eea:	5c 96       	adiw	r26, 0x1c	; 28
    5eec:	0c 90       	ld	r0, X
    5eee:	5c 97       	sbiw	r26, 0x1c	; 28
    5ef0:	02 c0       	rjmp	.+4      	; 0x5ef6 <HardwareSerial::end()+0x44>
    5ef2:	88 0f       	add	r24, r24
    5ef4:	99 1f       	adc	r25, r25
    5ef6:	0a 94       	dec	r0
    5ef8:	e2 f7       	brpl	.-8      	; 0x5ef2 <HardwareSerial::end()+0x40>
    5efa:	80 95       	com	r24
    5efc:	84 23       	and	r24, r20
    5efe:	80 83       	st	Z, r24
  cbi(*_ucsrb, _txen);
    5f00:	56 96       	adiw	r26, 0x16	; 22
    5f02:	ed 91       	ld	r30, X+
    5f04:	fc 91       	ld	r31, X
    5f06:	57 97       	sbiw	r26, 0x17	; 23
    5f08:	40 81       	ld	r20, Z
    5f0a:	c9 01       	movw	r24, r18
    5f0c:	5d 96       	adiw	r26, 0x1d	; 29
    5f0e:	0c 90       	ld	r0, X
    5f10:	5d 97       	sbiw	r26, 0x1d	; 29
    5f12:	02 c0       	rjmp	.+4      	; 0x5f18 <HardwareSerial::end()+0x66>
    5f14:	88 0f       	add	r24, r24
    5f16:	99 1f       	adc	r25, r25
    5f18:	0a 94       	dec	r0
    5f1a:	e2 f7       	brpl	.-8      	; 0x5f14 <HardwareSerial::end()+0x62>
    5f1c:	80 95       	com	r24
    5f1e:	84 23       	and	r24, r20
    5f20:	80 83       	st	Z, r24
  cbi(*_ucsrb, _rxcie);  
    5f22:	56 96       	adiw	r26, 0x16	; 22
    5f24:	ed 91       	ld	r30, X+
    5f26:	fc 91       	ld	r31, X
    5f28:	57 97       	sbiw	r26, 0x17	; 23
    5f2a:	40 81       	ld	r20, Z
    5f2c:	c9 01       	movw	r24, r18
    5f2e:	5e 96       	adiw	r26, 0x1e	; 30
    5f30:	0c 90       	ld	r0, X
    5f32:	5e 97       	sbiw	r26, 0x1e	; 30
    5f34:	02 c0       	rjmp	.+4      	; 0x5f3a <HardwareSerial::end()+0x88>
    5f36:	88 0f       	add	r24, r24
    5f38:	99 1f       	adc	r25, r25
    5f3a:	0a 94       	dec	r0
    5f3c:	e2 f7       	brpl	.-8      	; 0x5f36 <HardwareSerial::end()+0x84>
    5f3e:	80 95       	com	r24
    5f40:	84 23       	and	r24, r20
    5f42:	80 83       	st	Z, r24
  cbi(*_ucsrb, _udrie);
    5f44:	56 96       	adiw	r26, 0x16	; 22
    5f46:	ed 91       	ld	r30, X+
    5f48:	fc 91       	ld	r31, X
    5f4a:	57 97       	sbiw	r26, 0x17	; 23
    5f4c:	80 81       	ld	r24, Z
    5f4e:	5f 96       	adiw	r26, 0x1f	; 31
    5f50:	0c 90       	ld	r0, X
    5f52:	5f 97       	sbiw	r26, 0x1f	; 31
    5f54:	02 c0       	rjmp	.+4      	; 0x5f5a <HardwareSerial::end()+0xa8>
    5f56:	22 0f       	add	r18, r18
    5f58:	33 1f       	adc	r19, r19
    5f5a:	0a 94       	dec	r0
    5f5c:	e2 f7       	brpl	.-8      	; 0x5f56 <HardwareSerial::end()+0xa4>
    5f5e:	20 95       	com	r18
    5f60:	28 23       	and	r18, r24
    5f62:	20 83       	st	Z, r18
  
  // clear any received data
  _rx_buffer->head = _rx_buffer->tail;
    5f64:	1c 96       	adiw	r26, 0x0c	; 12
    5f66:	ed 91       	ld	r30, X+
    5f68:	fc 91       	ld	r31, X
    5f6a:	1d 97       	sbiw	r26, 0x0d	; 13
    5f6c:	ee 5b       	subi	r30, 0xBE	; 190
    5f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    5f70:	80 81       	ld	r24, Z
    5f72:	91 81       	ldd	r25, Z+1	; 0x01
    5f74:	92 93       	st	-Z, r25
    5f76:	82 93       	st	-Z, r24
}
    5f78:	df 91       	pop	r29
    5f7a:	cf 91       	pop	r28
    5f7c:	08 95       	ret

00005f7e <HardwareSerial::available()>:

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    5f7e:	dc 01       	movw	r26, r24
    5f80:	1c 96       	adiw	r26, 0x0c	; 12
    5f82:	ed 91       	ld	r30, X+
    5f84:	fc 91       	ld	r31, X
    5f86:	1d 97       	sbiw	r26, 0x0d	; 13
    5f88:	e0 5c       	subi	r30, 0xC0	; 192
    5f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    5f8c:	21 91       	ld	r18, Z+
    5f8e:	31 91       	ld	r19, Z+
    5f90:	80 81       	ld	r24, Z
    5f92:	91 81       	ldd	r25, Z+1	; 0x01
    5f94:	28 1b       	sub	r18, r24
    5f96:	39 0b       	sbc	r19, r25
    5f98:	2f 73       	andi	r18, 0x3F	; 63
    5f9a:	30 70       	andi	r19, 0x00	; 0
}
    5f9c:	c9 01       	movw	r24, r18
    5f9e:	08 95       	ret

00005fa0 <HardwareSerial::peek()>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    5fa0:	dc 01       	movw	r26, r24
    5fa2:	1c 96       	adiw	r26, 0x0c	; 12
    5fa4:	ed 91       	ld	r30, X+
    5fa6:	fc 91       	ld	r31, X
    5fa8:	1d 97       	sbiw	r26, 0x0d	; 13
    5faa:	e0 5c       	subi	r30, 0xC0	; 192
    5fac:	ff 4f       	sbci	r31, 0xFF	; 255
    5fae:	20 81       	ld	r18, Z
    5fb0:	31 81       	ldd	r19, Z+1	; 0x01
    5fb2:	e0 54       	subi	r30, 0x40	; 64
    5fb4:	f0 40       	sbci	r31, 0x00	; 0
    5fb6:	df 01       	movw	r26, r30
    5fb8:	ae 5b       	subi	r26, 0xBE	; 190
    5fba:	bf 4f       	sbci	r27, 0xFF	; 255
    5fbc:	8d 91       	ld	r24, X+
    5fbe:	9c 91       	ld	r25, X
    5fc0:	11 97       	sbiw	r26, 0x01	; 1
    5fc2:	28 17       	cp	r18, r24
    5fc4:	39 07       	cpc	r19, r25
    5fc6:	19 f4       	brne	.+6      	; 0x5fce <HardwareSerial::peek()+0x2e>
    5fc8:	2f ef       	ldi	r18, 0xFF	; 255
    5fca:	3f ef       	ldi	r19, 0xFF	; 255
    5fcc:	07 c0       	rjmp	.+14     	; 0x5fdc <HardwareSerial::peek()+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    5fce:	8d 91       	ld	r24, X+
    5fd0:	9c 91       	ld	r25, X
    5fd2:	e8 0f       	add	r30, r24
    5fd4:	f9 1f       	adc	r31, r25
    5fd6:	80 81       	ld	r24, Z
    5fd8:	28 2f       	mov	r18, r24
    5fda:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    5fdc:	c9 01       	movw	r24, r18
    5fde:	08 95       	ret

00005fe0 <HardwareSerial::read()>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    5fe0:	dc 01       	movw	r26, r24
    5fe2:	1c 96       	adiw	r26, 0x0c	; 12
    5fe4:	ed 91       	ld	r30, X+
    5fe6:	fc 91       	ld	r31, X
    5fe8:	1d 97       	sbiw	r26, 0x0d	; 13
    5fea:	e0 5c       	subi	r30, 0xC0	; 192
    5fec:	ff 4f       	sbci	r31, 0xFF	; 255
    5fee:	20 81       	ld	r18, Z
    5ff0:	31 81       	ldd	r19, Z+1	; 0x01
    5ff2:	e0 54       	subi	r30, 0x40	; 64
    5ff4:	f0 40       	sbci	r31, 0x00	; 0
    5ff6:	df 01       	movw	r26, r30
    5ff8:	ae 5b       	subi	r26, 0xBE	; 190
    5ffa:	bf 4f       	sbci	r27, 0xFF	; 255
    5ffc:	8d 91       	ld	r24, X+
    5ffe:	9c 91       	ld	r25, X
    6000:	11 97       	sbiw	r26, 0x01	; 1
    6002:	28 17       	cp	r18, r24
    6004:	39 07       	cpc	r19, r25
    6006:	19 f4       	brne	.+6      	; 0x600e <HardwareSerial::read()+0x2e>
    6008:	2f ef       	ldi	r18, 0xFF	; 255
    600a:	3f ef       	ldi	r19, 0xFF	; 255
    600c:	10 c0       	rjmp	.+32     	; 0x602e <HardwareSerial::read()+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    600e:	8d 91       	ld	r24, X+
    6010:	9c 91       	ld	r25, X
    6012:	11 97       	sbiw	r26, 0x01	; 1
    6014:	e8 0f       	add	r30, r24
    6016:	f9 1f       	adc	r31, r25
    6018:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    601a:	8d 91       	ld	r24, X+
    601c:	9c 91       	ld	r25, X
    601e:	11 97       	sbiw	r26, 0x01	; 1
    6020:	01 96       	adiw	r24, 0x01	; 1
    6022:	8f 73       	andi	r24, 0x3F	; 63
    6024:	90 70       	andi	r25, 0x00	; 0
    6026:	11 96       	adiw	r26, 0x01	; 1
    6028:	9c 93       	st	X, r25
    602a:	8e 93       	st	-X, r24
    return c;
    602c:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    602e:	c9 01       	movw	r24, r18
    6030:	08 95       	ret

00006032 <HardwareSerial::flush()>:

void HardwareSerial::flush()
    6032:	dc 01       	movw	r26, r24
{
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
    6034:	91 96       	adiw	r26, 0x21	; 33
    6036:	8c 91       	ld	r24, X
    6038:	91 97       	sbiw	r26, 0x21	; 33
    603a:	88 23       	and	r24, r24
    603c:	39 f0       	breq	.+14     	; 0x604c <HardwareSerial::flush()+0x1a>
    603e:	54 96       	adiw	r26, 0x14	; 20
    6040:	ed 91       	ld	r30, X+
    6042:	fc 91       	ld	r31, X
    6044:	55 97       	sbiw	r26, 0x15	; 21
    6046:	80 81       	ld	r24, Z
    6048:	86 ff       	sbrs	r24, 6
    604a:	f9 cf       	rjmp	.-14     	; 0x603e <HardwareSerial::flush()+0xc>
  transmitting = false;
    604c:	91 96       	adiw	r26, 0x21	; 33
    604e:	1c 92       	st	X, r1
}
    6050:	08 95       	ret

00006052 <HardwareSerial::write(unsigned char)>:

size_t HardwareSerial::write(uint8_t c)
    6052:	cf 93       	push	r28
    6054:	df 93       	push	r29
    6056:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    6058:	ee 85       	ldd	r30, Y+14	; 0x0e
    605a:	ff 85       	ldd	r31, Y+15	; 0x0f
    605c:	e0 5c       	subi	r30, 0xC0	; 192
    605e:	ff 4f       	sbci	r31, 0xFF	; 255
    6060:	20 81       	ld	r18, Z
    6062:	31 81       	ldd	r19, Z+1	; 0x01
    6064:	e0 54       	subi	r30, 0x40	; 64
    6066:	f0 40       	sbci	r31, 0x00	; 0
    6068:	2f 5f       	subi	r18, 0xFF	; 255
    606a:	3f 4f       	sbci	r19, 0xFF	; 255
    606c:	2f 73       	andi	r18, 0x3F	; 63
    606e:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    6070:	df 01       	movw	r26, r30
    6072:	ae 5b       	subi	r26, 0xBE	; 190
    6074:	bf 4f       	sbci	r27, 0xFF	; 255
    6076:	8d 91       	ld	r24, X+
    6078:	9c 91       	ld	r25, X
    607a:	11 97       	sbiw	r26, 0x01	; 1
    607c:	28 17       	cp	r18, r24
    607e:	39 07       	cpc	r19, r25
    6080:	d1 f3       	breq	.-12     	; 0x6076 <HardwareSerial::write(unsigned char)+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    6082:	e0 5c       	subi	r30, 0xC0	; 192
    6084:	ff 4f       	sbci	r31, 0xFF	; 255
    6086:	80 81       	ld	r24, Z
    6088:	91 81       	ldd	r25, Z+1	; 0x01
    608a:	e0 54       	subi	r30, 0x40	; 64
    608c:	f0 40       	sbci	r31, 0x00	; 0
    608e:	e8 0f       	add	r30, r24
    6090:	f9 1f       	adc	r31, r25
    6092:	60 83       	st	Z, r22
  _tx_buffer->head = i;
    6094:	ee 85       	ldd	r30, Y+14	; 0x0e
    6096:	ff 85       	ldd	r31, Y+15	; 0x0f
    6098:	e0 5c       	subi	r30, 0xC0	; 192
    609a:	ff 4f       	sbci	r31, 0xFF	; 255
    609c:	31 83       	std	Z+1, r19	; 0x01
    609e:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    60a0:	ee 89       	ldd	r30, Y+22	; 0x16
    60a2:	ff 89       	ldd	r31, Y+23	; 0x17
    60a4:	20 81       	ld	r18, Z
    60a6:	81 e0       	ldi	r24, 0x01	; 1
    60a8:	90 e0       	ldi	r25, 0x00	; 0
    60aa:	0f 8c       	ldd	r0, Y+31	; 0x1f
    60ac:	02 c0       	rjmp	.+4      	; 0x60b2 <HardwareSerial::write(unsigned char)+0x60>
    60ae:	88 0f       	add	r24, r24
    60b0:	99 1f       	adc	r25, r25
    60b2:	0a 94       	dec	r0
    60b4:	e2 f7       	brpl	.-8      	; 0x60ae <HardwareSerial::write(unsigned char)+0x5c>
    60b6:	28 2b       	or	r18, r24
    60b8:	20 83       	st	Z, r18
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
    60ba:	81 e0       	ldi	r24, 0x01	; 1
    60bc:	89 a3       	std	Y+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
    60be:	ec 89       	ldd	r30, Y+20	; 0x14
    60c0:	fd 89       	ldd	r31, Y+21	; 0x15
    60c2:	80 81       	ld	r24, Z
    60c4:	80 64       	ori	r24, 0x40	; 64
    60c6:	80 83       	st	Z, r24
  
  return 1;
}
    60c8:	81 e0       	ldi	r24, 0x01	; 1
    60ca:	90 e0       	ldi	r25, 0x00	; 0
    60cc:	df 91       	pop	r29
    60ce:	cf 91       	pop	r28
    60d0:	08 95       	ret

000060d2 <global constructors keyed to rx_buffer>:
  public:
    Print() : write_error(0) {}
    60d2:	10 92 34 03 	sts	0x0334, r1
    60d6:	10 92 33 03 	sts	0x0333, r1
    60da:	88 ee       	ldi	r24, 0xE8	; 232
    60dc:	93 e0       	ldi	r25, 0x03	; 3
    60de:	a0 e0       	ldi	r26, 0x00	; 0
    60e0:	b0 e0       	ldi	r27, 0x00	; 0
    60e2:	80 93 35 03 	sts	0x0335, r24
    60e6:	90 93 36 03 	sts	0x0336, r25
    60ea:	a0 93 37 03 	sts	0x0337, r26
    60ee:	b0 93 38 03 	sts	0x0338, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    60f2:	85 e2       	ldi	r24, 0x25	; 37
    60f4:	91 e0       	ldi	r25, 0x01	; 1
    60f6:	90 93 32 03 	sts	0x0332, r25
    60fa:	80 93 31 03 	sts	0x0331, r24
{
  _rx_buffer = rx_buffer;
    60fe:	89 ea       	ldi	r24, 0xA9	; 169
    6100:	92 e0       	ldi	r25, 0x02	; 2
    6102:	90 93 3e 03 	sts	0x033E, r25
    6106:	80 93 3d 03 	sts	0x033D, r24
  _tx_buffer = tx_buffer;
    610a:	8d ee       	ldi	r24, 0xED	; 237
    610c:	92 e0       	ldi	r25, 0x02	; 2
    610e:	90 93 40 03 	sts	0x0340, r25
    6112:	80 93 3f 03 	sts	0x033F, r24
  _ubrrh = ubrrh;
    6116:	85 ec       	ldi	r24, 0xC5	; 197
    6118:	90 e0       	ldi	r25, 0x00	; 0
    611a:	90 93 42 03 	sts	0x0342, r25
    611e:	80 93 41 03 	sts	0x0341, r24
  _ubrrl = ubrrl;
    6122:	84 ec       	ldi	r24, 0xC4	; 196
    6124:	90 e0       	ldi	r25, 0x00	; 0
    6126:	90 93 44 03 	sts	0x0344, r25
    612a:	80 93 43 03 	sts	0x0343, r24
  _ucsra = ucsra;
    612e:	80 ec       	ldi	r24, 0xC0	; 192
    6130:	90 e0       	ldi	r25, 0x00	; 0
    6132:	90 93 46 03 	sts	0x0346, r25
    6136:	80 93 45 03 	sts	0x0345, r24
  _ucsrb = ucsrb;
    613a:	81 ec       	ldi	r24, 0xC1	; 193
    613c:	90 e0       	ldi	r25, 0x00	; 0
    613e:	90 93 48 03 	sts	0x0348, r25
    6142:	80 93 47 03 	sts	0x0347, r24
  _ucsrc = ucsrc;
    6146:	82 ec       	ldi	r24, 0xC2	; 194
    6148:	90 e0       	ldi	r25, 0x00	; 0
    614a:	90 93 4a 03 	sts	0x034A, r25
    614e:	80 93 49 03 	sts	0x0349, r24
  _udr = udr;
    6152:	86 ec       	ldi	r24, 0xC6	; 198
    6154:	90 e0       	ldi	r25, 0x00	; 0
    6156:	90 93 4c 03 	sts	0x034C, r25
    615a:	80 93 4b 03 	sts	0x034B, r24
  _rxen = rxen;
    615e:	84 e0       	ldi	r24, 0x04	; 4
    6160:	80 93 4d 03 	sts	0x034D, r24
  _txen = txen;
    6164:	83 e0       	ldi	r24, 0x03	; 3
    6166:	80 93 4e 03 	sts	0x034E, r24
  _rxcie = rxcie;
    616a:	87 e0       	ldi	r24, 0x07	; 7
    616c:	80 93 4f 03 	sts	0x034F, r24
  _udrie = udrie;
    6170:	85 e0       	ldi	r24, 0x05	; 5
    6172:	80 93 50 03 	sts	0x0350, r24
  _u2x = u2x;
    6176:	81 e0       	ldi	r24, 0x01	; 1
    6178:	80 93 51 03 	sts	0x0351, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    617c:	08 95       	ret

0000617e <main>:
#include <Arduino.h>

int main(void)
    617e:	cf 93       	push	r28
    6180:	df 93       	push	r29
{
	init();
    6182:	0e 94 b3 32 	call	0x6566	; 0x6566 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    6186:	0e 94 35 28 	call	0x506a	; 0x506a <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    618a:	cd e8       	ldi	r28, 0x8D	; 141
    618c:	de e2       	ldi	r29, 0x2E	; 46
#endif
	
	setup();
    
	for (;;) {
		loop();
    618e:	0e 94 e3 23 	call	0x47c6	; 0x47c6 <loop>
		if (serialEventRun) serialEventRun();
    6192:	20 97       	sbiw	r28, 0x00	; 0
    6194:	e1 f3       	breq	.-8      	; 0x618e <main+0x10>
    6196:	0e 94 8d 2e 	call	0x5d1a	; 0x5d1a <serialEventRun()>
    619a:	f9 cf       	rjmp	.-14     	; 0x618e <main+0x10>

0000619c <Print::write(unsigned char const*, unsigned int)>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    619c:	cf 92       	push	r12
    619e:	df 92       	push	r13
    61a0:	ef 92       	push	r14
    61a2:	ff 92       	push	r15
    61a4:	0f 93       	push	r16
    61a6:	1f 93       	push	r17
    61a8:	cf 93       	push	r28
    61aa:	df 93       	push	r29
    61ac:	7c 01       	movw	r14, r24
    61ae:	6b 01       	movw	r12, r22
    61b0:	8a 01       	movw	r16, r20
    61b2:	c0 e0       	ldi	r28, 0x00	; 0
    61b4:	d0 e0       	ldi	r29, 0x00	; 0
    61b6:	0f c0       	rjmp	.+30     	; 0x61d6 <Print::write(unsigned char const*, unsigned int)+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    61b8:	d6 01       	movw	r26, r12
    61ba:	6d 91       	ld	r22, X+
    61bc:	6d 01       	movw	r12, r26
    61be:	d7 01       	movw	r26, r14
    61c0:	ed 91       	ld	r30, X+
    61c2:	fc 91       	ld	r31, X
    61c4:	01 90       	ld	r0, Z+
    61c6:	f0 81       	ld	r31, Z
    61c8:	e0 2d       	mov	r30, r0
    61ca:	c7 01       	movw	r24, r14
    61cc:	09 95       	icall
    61ce:	c8 0f       	add	r28, r24
    61d0:	d9 1f       	adc	r29, r25
    61d2:	01 50       	subi	r16, 0x01	; 1
    61d4:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    61d6:	01 15       	cp	r16, r1
    61d8:	11 05       	cpc	r17, r1
    61da:	71 f7       	brne	.-36     	; 0x61b8 <Print::write(unsigned char const*, unsigned int)+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    61dc:	ce 01       	movw	r24, r28
    61de:	df 91       	pop	r29
    61e0:	cf 91       	pop	r28
    61e2:	1f 91       	pop	r17
    61e4:	0f 91       	pop	r16
    61e6:	ff 90       	pop	r15
    61e8:	ef 90       	pop	r14
    61ea:	df 90       	pop	r13
    61ec:	cf 90       	pop	r12
    61ee:	08 95       	ret

000061f0 <Print::print(__FlashStringHelper const*)>:

size_t Print::print(const __FlashStringHelper *ifsh)
    61f0:	ef 92       	push	r14
    61f2:	ff 92       	push	r15
    61f4:	0f 93       	push	r16
    61f6:	1f 93       	push	r17
    61f8:	cf 93       	push	r28
    61fa:	df 93       	push	r29
    61fc:	7c 01       	movw	r14, r24
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
    61fe:	8b 01       	movw	r16, r22
    6200:	c0 e0       	ldi	r28, 0x00	; 0
    6202:	d0 e0       	ldi	r29, 0x00	; 0
    6204:	f8 01       	movw	r30, r16
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    6206:	0f 5f       	subi	r16, 0xFF	; 255
    6208:	1f 4f       	sbci	r17, 0xFF	; 255
    620a:	64 91       	lpm	r22, Z+
    if (c == 0) break;
    620c:	66 23       	and	r22, r22
    620e:	59 f0       	breq	.+22     	; 0x6226 <Print::print(__FlashStringHelper const*)+0x36>
    n += write(c);
    6210:	d7 01       	movw	r26, r14
    6212:	ed 91       	ld	r30, X+
    6214:	fc 91       	ld	r31, X
    6216:	01 90       	ld	r0, Z+
    6218:	f0 81       	ld	r31, Z
    621a:	e0 2d       	mov	r30, r0
    621c:	c7 01       	movw	r24, r14
    621e:	09 95       	icall
    6220:	c8 0f       	add	r28, r24
    6222:	d9 1f       	adc	r29, r25
    6224:	ef cf       	rjmp	.-34     	; 0x6204 <Print::print(__FlashStringHelper const*)+0x14>
  }
  return n;
}
    6226:	ce 01       	movw	r24, r28
    6228:	df 91       	pop	r29
    622a:	cf 91       	pop	r28
    622c:	1f 91       	pop	r17
    622e:	0f 91       	pop	r16
    6230:	ff 90       	pop	r15
    6232:	ef 90       	pop	r14
    6234:	08 95       	ret

00006236 <Print::print(char)>:
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
    6236:	dc 01       	movw	r26, r24
{
  return write(c);
    6238:	ed 91       	ld	r30, X+
    623a:	fc 91       	ld	r31, X
    623c:	01 90       	ld	r0, Z+
    623e:	f0 81       	ld	r31, Z
    6240:	e0 2d       	mov	r30, r0
    6242:	09 95       	icall
}
    6244:	08 95       	ret

00006246 <Print::println()>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
    6246:	ef 92       	push	r14
    6248:	ff 92       	push	r15
    624a:	0f 93       	push	r16
    624c:	1f 93       	push	r17
    624e:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    6250:	dc 01       	movw	r26, r24
    6252:	ed 91       	ld	r30, X+
    6254:	fc 91       	ld	r31, X
    6256:	01 90       	ld	r0, Z+
    6258:	f0 81       	ld	r31, Z
    625a:	e0 2d       	mov	r30, r0
    625c:	6d e0       	ldi	r22, 0x0D	; 13
    625e:	09 95       	icall
    6260:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    6262:	d8 01       	movw	r26, r16
    6264:	ed 91       	ld	r30, X+
    6266:	fc 91       	ld	r31, X
    6268:	01 90       	ld	r0, Z+
    626a:	f0 81       	ld	r31, Z
    626c:	e0 2d       	mov	r30, r0
    626e:	c8 01       	movw	r24, r16
    6270:	6a e0       	ldi	r22, 0x0A	; 10
    6272:	09 95       	icall
    6274:	9c 01       	movw	r18, r24
    6276:	2e 0d       	add	r18, r14
    6278:	3f 1d       	adc	r19, r15
    627a:	c9 01       	movw	r24, r18
    627c:	1f 91       	pop	r17
    627e:	0f 91       	pop	r16
    6280:	ff 90       	pop	r15
    6282:	ef 90       	pop	r14
    6284:	08 95       	ret

00006286 <Print::println(__FlashStringHelper const*)>:
size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
    6286:	ef 92       	push	r14
    6288:	ff 92       	push	r15
    628a:	0f 93       	push	r16
    628c:	1f 93       	push	r17
    628e:	7c 01       	movw	r14, r24
{
  size_t n = print(ifsh);
    6290:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <Print::print(__FlashStringHelper const*)>
    6294:	8c 01       	movw	r16, r24
  n += println();
    6296:	c7 01       	movw	r24, r14
    6298:	0e 94 23 31 	call	0x6246	; 0x6246 <Print::println()>
    629c:	9c 01       	movw	r18, r24
    629e:	20 0f       	add	r18, r16
    62a0:	31 1f       	adc	r19, r17
  return n;
}
    62a2:	c9 01       	movw	r24, r18
    62a4:	1f 91       	pop	r17
    62a6:	0f 91       	pop	r16
    62a8:	ff 90       	pop	r15
    62aa:	ef 90       	pop	r14
    62ac:	08 95       	ret

000062ae <Print::write(char const*)>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    62ae:	cf 93       	push	r28
    62b0:	df 93       	push	r29
    62b2:	ec 01       	movw	r28, r24
      if (str == NULL) return 0;
    62b4:	61 15       	cp	r22, r1
    62b6:	71 05       	cpc	r23, r1
    62b8:	19 f4       	brne	.+6      	; 0x62c0 <Print::write(char const*)+0x12>
    62ba:	20 e0       	ldi	r18, 0x00	; 0
    62bc:	30 e0       	ldi	r19, 0x00	; 0
    62be:	0f c0       	rjmp	.+30     	; 0x62de <Print::write(char const*)+0x30>
      return write((const uint8_t *)str, strlen(str));
    62c0:	db 01       	movw	r26, r22
    62c2:	0d 90       	ld	r0, X+
    62c4:	00 20       	and	r0, r0
    62c6:	e9 f7       	brne	.-6      	; 0x62c2 <Print::write(char const*)+0x14>
    62c8:	11 97       	sbiw	r26, 0x01	; 1
    62ca:	a6 1b       	sub	r26, r22
    62cc:	b7 0b       	sbc	r27, r23
    62ce:	e8 81       	ld	r30, Y
    62d0:	f9 81       	ldd	r31, Y+1	; 0x01
    62d2:	02 80       	ldd	r0, Z+2	; 0x02
    62d4:	f3 81       	ldd	r31, Z+3	; 0x03
    62d6:	e0 2d       	mov	r30, r0
    62d8:	ad 01       	movw	r20, r26
    62da:	09 95       	icall
    62dc:	9c 01       	movw	r18, r24
    }
    62de:	c9 01       	movw	r24, r18
    62e0:	df 91       	pop	r29
    62e2:	cf 91       	pop	r28
    62e4:	08 95       	ret

000062e6 <Print::printNumber(unsigned long, unsigned char)>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    62e6:	4f 92       	push	r4
    62e8:	5f 92       	push	r5
    62ea:	7f 92       	push	r7
    62ec:	8f 92       	push	r8
    62ee:	9f 92       	push	r9
    62f0:	af 92       	push	r10
    62f2:	bf 92       	push	r11
    62f4:	cf 92       	push	r12
    62f6:	df 92       	push	r13
    62f8:	ef 92       	push	r14
    62fa:	ff 92       	push	r15
    62fc:	0f 93       	push	r16
    62fe:	1f 93       	push	r17
    6300:	df 93       	push	r29
    6302:	cf 93       	push	r28
    6304:	cd b7       	in	r28, 0x3d	; 61
    6306:	de b7       	in	r29, 0x3e	; 62
    6308:	a1 97       	sbiw	r28, 0x21	; 33
    630a:	0f b6       	in	r0, 0x3f	; 63
    630c:	f8 94       	cli
    630e:	de bf       	out	0x3e, r29	; 62
    6310:	0f be       	out	0x3f, r0	; 63
    6312:	cd bf       	out	0x3d, r28	; 61
    6314:	2c 01       	movw	r4, r24
    6316:	74 2e       	mov	r7, r20
    6318:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    631a:	22 30       	cpi	r18, 0x02	; 2
    631c:	08 f4       	brcc	.+2      	; 0x6320 <Print::printNumber(unsigned long, unsigned char)+0x3a>
    631e:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    6320:	19 a2       	std	Y+33, r1	; 0x21
    6322:	31 e2       	ldi	r19, 0x21	; 33
    6324:	c3 2e       	mov	r12, r19
    6326:	d1 2c       	mov	r13, r1
    6328:	cc 0e       	add	r12, r28
    632a:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    632c:	82 2e       	mov	r8, r18
    632e:	99 24       	eor	r9, r9
    6330:	aa 24       	eor	r10, r10
    6332:	bb 24       	eor	r11, r11
    6334:	67 2d       	mov	r22, r7
    6336:	75 2f       	mov	r23, r21
    6338:	a5 01       	movw	r20, r10
    633a:	94 01       	movw	r18, r8
    633c:	0e 94 0a 34 	call	0x6814	; 0x6814 <__udivmodsi4>
    6340:	79 01       	movw	r14, r18
    6342:	8a 01       	movw	r16, r20
    char c = m - base * n;
    6344:	c8 01       	movw	r24, r16
    6346:	b7 01       	movw	r22, r14
    6348:	a5 01       	movw	r20, r10
    634a:	94 01       	movw	r18, r8
    634c:	0e 94 c4 33 	call	0x6788	; 0x6788 <__mulsi3>
    6350:	47 2d       	mov	r20, r7
    6352:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    6354:	08 94       	sec
    6356:	c1 08       	sbc	r12, r1
    6358:	d1 08       	sbc	r13, r1
    635a:	4a 30       	cpi	r20, 0x0A	; 10
    635c:	14 f4       	brge	.+4      	; 0x6362 <Print::printNumber(unsigned long, unsigned char)+0x7c>
    635e:	40 5d       	subi	r20, 0xD0	; 208
    6360:	01 c0       	rjmp	.+2      	; 0x6364 <Print::printNumber(unsigned long, unsigned char)+0x7e>
    6362:	49 5c       	subi	r20, 0xC9	; 201
    6364:	f6 01       	movw	r30, r12
    6366:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    6368:	e1 14       	cp	r14, r1
    636a:	f1 04       	cpc	r15, r1
    636c:	01 05       	cpc	r16, r1
    636e:	11 05       	cpc	r17, r1
    6370:	21 f0       	breq	.+8      	; 0x637a <Print::printNumber(unsigned long, unsigned char)+0x94>
    6372:	7e 2c       	mov	r7, r14
    6374:	5f 2d       	mov	r21, r15
    6376:	c8 01       	movw	r24, r16
    6378:	dd cf       	rjmp	.-70     	; 0x6334 <Print::printNumber(unsigned long, unsigned char)+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    637a:	c2 01       	movw	r24, r4
    637c:	b6 01       	movw	r22, r12
    637e:	0e 94 57 31 	call	0x62ae	; 0x62ae <Print::write(char const*)>
}
    6382:	a1 96       	adiw	r28, 0x21	; 33
    6384:	0f b6       	in	r0, 0x3f	; 63
    6386:	f8 94       	cli
    6388:	de bf       	out	0x3e, r29	; 62
    638a:	0f be       	out	0x3f, r0	; 63
    638c:	cd bf       	out	0x3d, r28	; 61
    638e:	cf 91       	pop	r28
    6390:	df 91       	pop	r29
    6392:	1f 91       	pop	r17
    6394:	0f 91       	pop	r16
    6396:	ff 90       	pop	r15
    6398:	ef 90       	pop	r14
    639a:	df 90       	pop	r13
    639c:	cf 90       	pop	r12
    639e:	bf 90       	pop	r11
    63a0:	af 90       	pop	r10
    63a2:	9f 90       	pop	r9
    63a4:	8f 90       	pop	r8
    63a6:	7f 90       	pop	r7
    63a8:	5f 90       	pop	r5
    63aa:	4f 90       	pop	r4
    63ac:	08 95       	ret

000063ae <Print::print(unsigned long, int)>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
    63ae:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
    63b0:	21 15       	cp	r18, r1
    63b2:	31 05       	cpc	r19, r1
    63b4:	41 f4       	brne	.+16     	; 0x63c6 <Print::print(unsigned long, int)+0x18>
    63b6:	ed 91       	ld	r30, X+
    63b8:	fc 91       	ld	r31, X
    63ba:	01 90       	ld	r0, Z+
    63bc:	f0 81       	ld	r31, Z
    63be:	e0 2d       	mov	r30, r0
    63c0:	64 2f       	mov	r22, r20
    63c2:	09 95       	icall
    63c4:	08 95       	ret
  else return printNumber(n, base);
    63c6:	0e 94 73 31 	call	0x62e6	; 0x62e6 <Print::printNumber(unsigned long, unsigned char)>
}
    63ca:	08 95       	ret

000063cc <Print::print(unsigned int, int)>:
size_t Print::print(int n, int base)
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
    63cc:	ef 92       	push	r14
    63ce:	ff 92       	push	r15
    63d0:	0f 93       	push	r16
    63d2:	1f 93       	push	r17
    63d4:	9a 01       	movw	r18, r20
{
  return print((unsigned long) n, base);
    63d6:	7b 01       	movw	r14, r22
    63d8:	00 e0       	ldi	r16, 0x00	; 0
    63da:	10 e0       	ldi	r17, 0x00	; 0
    63dc:	b8 01       	movw	r22, r16
    63de:	a7 01       	movw	r20, r14
    63e0:	0e 94 d7 31 	call	0x63ae	; 0x63ae <Print::print(unsigned long, int)>
}
    63e4:	1f 91       	pop	r17
    63e6:	0f 91       	pop	r16
    63e8:	ff 90       	pop	r15
    63ea:	ef 90       	pop	r14
    63ec:	08 95       	ret

000063ee <Print::print(unsigned char, int)>:
size_t Print::print(char c)
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
    63ee:	ef 92       	push	r14
    63f0:	ff 92       	push	r15
    63f2:	0f 93       	push	r16
    63f4:	1f 93       	push	r17
    63f6:	9a 01       	movw	r18, r20
{
  return print((unsigned long) b, base);
    63f8:	e6 2e       	mov	r14, r22
    63fa:	ff 24       	eor	r15, r15
    63fc:	00 e0       	ldi	r16, 0x00	; 0
    63fe:	10 e0       	ldi	r17, 0x00	; 0
    6400:	b8 01       	movw	r22, r16
    6402:	a7 01       	movw	r20, r14
    6404:	0e 94 d7 31 	call	0x63ae	; 0x63ae <Print::print(unsigned long, int)>
}
    6408:	1f 91       	pop	r17
    640a:	0f 91       	pop	r16
    640c:	ff 90       	pop	r15
    640e:	ef 90       	pop	r14
    6410:	08 95       	ret

00006412 <Print::print(long, int)>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
    6412:	cf 92       	push	r12
    6414:	df 92       	push	r13
    6416:	ef 92       	push	r14
    6418:	ff 92       	push	r15
    641a:	0f 93       	push	r16
    641c:	1f 93       	push	r17
    641e:	cf 93       	push	r28
    6420:	df 93       	push	r29
    6422:	ec 01       	movw	r28, r24
    6424:	6a 01       	movw	r12, r20
    6426:	7b 01       	movw	r14, r22
{
  if (base == 0) {
    6428:	21 15       	cp	r18, r1
    642a:	31 05       	cpc	r19, r1
    642c:	41 f4       	brne	.+16     	; 0x643e <Print::print(long, int)+0x2c>
    return write(n);
    642e:	e8 81       	ld	r30, Y
    6430:	f9 81       	ldd	r31, Y+1	; 0x01
    6432:	01 90       	ld	r0, Z+
    6434:	f0 81       	ld	r31, Z
    6436:	e0 2d       	mov	r30, r0
    6438:	64 2f       	mov	r22, r20
    643a:	09 95       	icall
    643c:	1f c0       	rjmp	.+62     	; 0x647c <Print::print(long, int)+0x6a>
  } else if (base == 10) {
    643e:	2a 30       	cpi	r18, 0x0A	; 10
    6440:	31 05       	cpc	r19, r1
    6442:	d1 f4       	brne	.+52     	; 0x6478 <Print::print(long, int)+0x66>
    if (n < 0) {
    6444:	77 ff       	sbrs	r23, 7
    6446:	17 c0       	rjmp	.+46     	; 0x6476 <Print::print(long, int)+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    6448:	e8 81       	ld	r30, Y
    644a:	f9 81       	ldd	r31, Y+1	; 0x01
    644c:	01 90       	ld	r0, Z+
    644e:	f0 81       	ld	r31, Z
    6450:	e0 2d       	mov	r30, r0
    6452:	6d e2       	ldi	r22, 0x2D	; 45
    6454:	09 95       	icall
    6456:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    6458:	44 27       	eor	r20, r20
    645a:	55 27       	eor	r21, r21
    645c:	ba 01       	movw	r22, r20
    645e:	4c 19       	sub	r20, r12
    6460:	5d 09       	sbc	r21, r13
    6462:	6e 09       	sbc	r22, r14
    6464:	7f 09       	sbc	r23, r15
    6466:	ce 01       	movw	r24, r28
    6468:	2a e0       	ldi	r18, 0x0A	; 10
    646a:	0e 94 73 31 	call	0x62e6	; 0x62e6 <Print::printNumber(unsigned long, unsigned char)>
    646e:	98 01       	movw	r18, r16
    6470:	28 0f       	add	r18, r24
    6472:	39 1f       	adc	r19, r25
    6474:	04 c0       	rjmp	.+8      	; 0x647e <Print::print(long, int)+0x6c>
    }
    return printNumber(n, 10);
    6476:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    6478:	0e 94 73 31 	call	0x62e6	; 0x62e6 <Print::printNumber(unsigned long, unsigned char)>
    647c:	9c 01       	movw	r18, r24
  }
}
    647e:	c9 01       	movw	r24, r18
    6480:	df 91       	pop	r29
    6482:	cf 91       	pop	r28
    6484:	1f 91       	pop	r17
    6486:	0f 91       	pop	r16
    6488:	ff 90       	pop	r15
    648a:	ef 90       	pop	r14
    648c:	df 90       	pop	r13
    648e:	cf 90       	pop	r12
    6490:	08 95       	ret

00006492 <Print::print(int, int)>:
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
    6492:	ef 92       	push	r14
    6494:	ff 92       	push	r15
    6496:	0f 93       	push	r16
    6498:	1f 93       	push	r17
    649a:	7b 01       	movw	r14, r22
    649c:	9a 01       	movw	r18, r20
{
  return print((long) n, base);
    649e:	00 27       	eor	r16, r16
    64a0:	f7 fc       	sbrc	r15, 7
    64a2:	00 95       	com	r16
    64a4:	10 2f       	mov	r17, r16
    64a6:	b8 01       	movw	r22, r16
    64a8:	a7 01       	movw	r20, r14
    64aa:	0e 94 09 32 	call	0x6412	; 0x6412 <Print::print(long, int)>
}
    64ae:	1f 91       	pop	r17
    64b0:	0f 91       	pop	r16
    64b2:	ff 90       	pop	r15
    64b4:	ef 90       	pop	r14
    64b6:	08 95       	ret

000064b8 <Print::print(char const*)>:
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    64b8:	0e 94 57 31 	call	0x62ae	; 0x62ae <Print::write(char const*)>
}
    64bc:	08 95       	ret

000064be <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    64be:	1f 92       	push	r1
    64c0:	0f 92       	push	r0
    64c2:	0f b6       	in	r0, 0x3f	; 63
    64c4:	0f 92       	push	r0
    64c6:	11 24       	eor	r1, r1
    64c8:	2f 93       	push	r18
    64ca:	3f 93       	push	r19
    64cc:	4f 93       	push	r20
    64ce:	5f 93       	push	r21
    64d0:	6f 93       	push	r22
    64d2:	7f 93       	push	r23
    64d4:	8f 93       	push	r24
    64d6:	9f 93       	push	r25
    64d8:	af 93       	push	r26
    64da:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    64dc:	20 91 57 03 	lds	r18, 0x0357
    64e0:	30 91 58 03 	lds	r19, 0x0358
    64e4:	40 91 59 03 	lds	r20, 0x0359
    64e8:	50 91 5a 03 	lds	r21, 0x035A
	unsigned char f = timer0_fract;
    64ec:	70 91 5b 03 	lds	r23, 0x035B

	m += MILLIS_INC;
    64f0:	da 01       	movw	r26, r20
    64f2:	c9 01       	movw	r24, r18
    64f4:	40 96       	adiw	r24, 0x10	; 16
    64f6:	a1 1d       	adc	r26, r1
    64f8:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    64fa:	67 2f       	mov	r22, r23
    64fc:	60 5d       	subi	r22, 0xD0	; 208
	if (f >= FRACT_MAX) {
    64fe:	6d 37       	cpi	r22, 0x7D	; 125
    6500:	30 f0       	brcs	.+12     	; 0x650e <__vector_16+0x50>
		f -= FRACT_MAX;
    6502:	6d 57       	subi	r22, 0x7D	; 125
		m += 1;
    6504:	da 01       	movw	r26, r20
    6506:	c9 01       	movw	r24, r18
    6508:	41 96       	adiw	r24, 0x11	; 17
    650a:	a1 1d       	adc	r26, r1
    650c:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    650e:	60 93 5b 03 	sts	0x035B, r22
	timer0_millis = m;
    6512:	80 93 57 03 	sts	0x0357, r24
    6516:	90 93 58 03 	sts	0x0358, r25
    651a:	a0 93 59 03 	sts	0x0359, r26
    651e:	b0 93 5a 03 	sts	0x035A, r27
	timer0_overflow_count++;
    6522:	80 91 53 03 	lds	r24, 0x0353
    6526:	90 91 54 03 	lds	r25, 0x0354
    652a:	a0 91 55 03 	lds	r26, 0x0355
    652e:	b0 91 56 03 	lds	r27, 0x0356
    6532:	01 96       	adiw	r24, 0x01	; 1
    6534:	a1 1d       	adc	r26, r1
    6536:	b1 1d       	adc	r27, r1
    6538:	80 93 53 03 	sts	0x0353, r24
    653c:	90 93 54 03 	sts	0x0354, r25
    6540:	a0 93 55 03 	sts	0x0355, r26
    6544:	b0 93 56 03 	sts	0x0356, r27
}
    6548:	bf 91       	pop	r27
    654a:	af 91       	pop	r26
    654c:	9f 91       	pop	r25
    654e:	8f 91       	pop	r24
    6550:	7f 91       	pop	r23
    6552:	6f 91       	pop	r22
    6554:	5f 91       	pop	r21
    6556:	4f 91       	pop	r20
    6558:	3f 91       	pop	r19
    655a:	2f 91       	pop	r18
    655c:	0f 90       	pop	r0
    655e:	0f be       	out	0x3f, r0	; 63
    6560:	0f 90       	pop	r0
    6562:	1f 90       	pop	r1
    6564:	18 95       	reti

00006566 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    6566:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    6568:	84 b5       	in	r24, 0x24	; 36
    656a:	82 60       	ori	r24, 0x02	; 2
    656c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    656e:	84 b5       	in	r24, 0x24	; 36
    6570:	81 60       	ori	r24, 0x01	; 1
    6572:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    6574:	85 b5       	in	r24, 0x25	; 37
    6576:	82 60       	ori	r24, 0x02	; 2
    6578:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    657a:	85 b5       	in	r24, 0x25	; 37
    657c:	81 60       	ori	r24, 0x01	; 1
    657e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    6580:	ee e6       	ldi	r30, 0x6E	; 110
    6582:	f0 e0       	ldi	r31, 0x00	; 0
    6584:	80 81       	ld	r24, Z
    6586:	81 60       	ori	r24, 0x01	; 1
    6588:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    658a:	e1 e8       	ldi	r30, 0x81	; 129
    658c:	f0 e0       	ldi	r31, 0x00	; 0
    658e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    6590:	80 81       	ld	r24, Z
    6592:	82 60       	ori	r24, 0x02	; 2
    6594:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    6596:	e0 e8       	ldi	r30, 0x80	; 128
    6598:	f0 e0       	ldi	r31, 0x00	; 0
    659a:	80 81       	ld	r24, Z
    659c:	81 60       	ori	r24, 0x01	; 1
    659e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    65a0:	e1 eb       	ldi	r30, 0xB1	; 177
    65a2:	f0 e0       	ldi	r31, 0x00	; 0
    65a4:	80 81       	ld	r24, Z
    65a6:	84 60       	ori	r24, 0x04	; 4
    65a8:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    65aa:	e0 eb       	ldi	r30, 0xB0	; 176
    65ac:	f0 e0       	ldi	r31, 0x00	; 0
    65ae:	80 81       	ld	r24, Z
    65b0:	81 60       	ori	r24, 0x01	; 1
    65b2:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    65b4:	ea e7       	ldi	r30, 0x7A	; 122
    65b6:	f0 e0       	ldi	r31, 0x00	; 0
    65b8:	80 81       	ld	r24, Z
    65ba:	84 60       	ori	r24, 0x04	; 4
    65bc:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    65be:	80 81       	ld	r24, Z
    65c0:	82 60       	ori	r24, 0x02	; 2
    65c2:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    65c4:	80 81       	ld	r24, Z
    65c6:	81 60       	ori	r24, 0x01	; 1
    65c8:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    65ca:	80 81       	ld	r24, Z
    65cc:	80 68       	ori	r24, 0x80	; 128
    65ce:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    65d0:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    65d4:	08 95       	ret

000065d6 <__fixunssfsi>:
    65d6:	b3 d0       	rcall	.+358    	; 0x673e <__fp_splitA>
    65d8:	88 f0       	brcs	.+34     	; 0x65fc <__fixunssfsi+0x26>
    65da:	9f 57       	subi	r25, 0x7F	; 127
    65dc:	90 f0       	brcs	.+36     	; 0x6602 <__fixunssfsi+0x2c>
    65de:	b9 2f       	mov	r27, r25
    65e0:	99 27       	eor	r25, r25
    65e2:	b7 51       	subi	r27, 0x17	; 23
    65e4:	a0 f0       	brcs	.+40     	; 0x660e <__fixunssfsi+0x38>
    65e6:	d1 f0       	breq	.+52     	; 0x661c <__fixunssfsi+0x46>
    65e8:	66 0f       	add	r22, r22
    65ea:	77 1f       	adc	r23, r23
    65ec:	88 1f       	adc	r24, r24
    65ee:	99 1f       	adc	r25, r25
    65f0:	1a f0       	brmi	.+6      	; 0x65f8 <__fixunssfsi+0x22>
    65f2:	ba 95       	dec	r27
    65f4:	c9 f7       	brne	.-14     	; 0x65e8 <__fixunssfsi+0x12>
    65f6:	12 c0       	rjmp	.+36     	; 0x661c <__fixunssfsi+0x46>
    65f8:	b1 30       	cpi	r27, 0x01	; 1
    65fa:	81 f0       	breq	.+32     	; 0x661c <__fixunssfsi+0x46>
    65fc:	ba d0       	rcall	.+372    	; 0x6772 <__fp_zero>
    65fe:	b1 e0       	ldi	r27, 0x01	; 1
    6600:	08 95       	ret
    6602:	b7 c0       	rjmp	.+366    	; 0x6772 <__fp_zero>
    6604:	67 2f       	mov	r22, r23
    6606:	78 2f       	mov	r23, r24
    6608:	88 27       	eor	r24, r24
    660a:	b8 5f       	subi	r27, 0xF8	; 248
    660c:	39 f0       	breq	.+14     	; 0x661c <__fixunssfsi+0x46>
    660e:	b9 3f       	cpi	r27, 0xF9	; 249
    6610:	cc f3       	brlt	.-14     	; 0x6604 <__fixunssfsi+0x2e>
    6612:	86 95       	lsr	r24
    6614:	77 95       	ror	r23
    6616:	67 95       	ror	r22
    6618:	b3 95       	inc	r27
    661a:	d9 f7       	brne	.-10     	; 0x6612 <__fixunssfsi+0x3c>
    661c:	3e f4       	brtc	.+14     	; 0x662c <__fixunssfsi+0x56>
    661e:	90 95       	com	r25
    6620:	80 95       	com	r24
    6622:	70 95       	com	r23
    6624:	61 95       	neg	r22
    6626:	7f 4f       	sbci	r23, 0xFF	; 255
    6628:	8f 4f       	sbci	r24, 0xFF	; 255
    662a:	9f 4f       	sbci	r25, 0xFF	; 255
    662c:	08 95       	ret

0000662e <__floatunsisf>:
    662e:	e8 94       	clt
    6630:	09 c0       	rjmp	.+18     	; 0x6644 <__floatsisf+0x12>

00006632 <__floatsisf>:
    6632:	97 fb       	bst	r25, 7
    6634:	3e f4       	brtc	.+14     	; 0x6644 <__floatsisf+0x12>
    6636:	90 95       	com	r25
    6638:	80 95       	com	r24
    663a:	70 95       	com	r23
    663c:	61 95       	neg	r22
    663e:	7f 4f       	sbci	r23, 0xFF	; 255
    6640:	8f 4f       	sbci	r24, 0xFF	; 255
    6642:	9f 4f       	sbci	r25, 0xFF	; 255
    6644:	99 23       	and	r25, r25
    6646:	a9 f0       	breq	.+42     	; 0x6672 <__floatsisf+0x40>
    6648:	f9 2f       	mov	r31, r25
    664a:	96 e9       	ldi	r25, 0x96	; 150
    664c:	bb 27       	eor	r27, r27
    664e:	93 95       	inc	r25
    6650:	f6 95       	lsr	r31
    6652:	87 95       	ror	r24
    6654:	77 95       	ror	r23
    6656:	67 95       	ror	r22
    6658:	b7 95       	ror	r27
    665a:	f1 11       	cpse	r31, r1
    665c:	f8 cf       	rjmp	.-16     	; 0x664e <__floatsisf+0x1c>
    665e:	fa f4       	brpl	.+62     	; 0x669e <__floatsisf+0x6c>
    6660:	bb 0f       	add	r27, r27
    6662:	11 f4       	brne	.+4      	; 0x6668 <__floatsisf+0x36>
    6664:	60 ff       	sbrs	r22, 0
    6666:	1b c0       	rjmp	.+54     	; 0x669e <__floatsisf+0x6c>
    6668:	6f 5f       	subi	r22, 0xFF	; 255
    666a:	7f 4f       	sbci	r23, 0xFF	; 255
    666c:	8f 4f       	sbci	r24, 0xFF	; 255
    666e:	9f 4f       	sbci	r25, 0xFF	; 255
    6670:	16 c0       	rjmp	.+44     	; 0x669e <__floatsisf+0x6c>
    6672:	88 23       	and	r24, r24
    6674:	11 f0       	breq	.+4      	; 0x667a <__floatsisf+0x48>
    6676:	96 e9       	ldi	r25, 0x96	; 150
    6678:	11 c0       	rjmp	.+34     	; 0x669c <__floatsisf+0x6a>
    667a:	77 23       	and	r23, r23
    667c:	21 f0       	breq	.+8      	; 0x6686 <__floatsisf+0x54>
    667e:	9e e8       	ldi	r25, 0x8E	; 142
    6680:	87 2f       	mov	r24, r23
    6682:	76 2f       	mov	r23, r22
    6684:	05 c0       	rjmp	.+10     	; 0x6690 <__floatsisf+0x5e>
    6686:	66 23       	and	r22, r22
    6688:	71 f0       	breq	.+28     	; 0x66a6 <__floatsisf+0x74>
    668a:	96 e8       	ldi	r25, 0x86	; 134
    668c:	86 2f       	mov	r24, r22
    668e:	70 e0       	ldi	r23, 0x00	; 0
    6690:	60 e0       	ldi	r22, 0x00	; 0
    6692:	2a f0       	brmi	.+10     	; 0x669e <__floatsisf+0x6c>
    6694:	9a 95       	dec	r25
    6696:	66 0f       	add	r22, r22
    6698:	77 1f       	adc	r23, r23
    669a:	88 1f       	adc	r24, r24
    669c:	da f7       	brpl	.-10     	; 0x6694 <__floatsisf+0x62>
    669e:	88 0f       	add	r24, r24
    66a0:	96 95       	lsr	r25
    66a2:	87 95       	ror	r24
    66a4:	97 f9       	bld	r25, 7
    66a6:	08 95       	ret

000066a8 <fmax>:
    66a8:	99 0f       	add	r25, r25
    66aa:	bb 0b       	sbc	r27, r27
    66ac:	55 0f       	add	r21, r21
    66ae:	aa 0b       	sbc	r26, r26
    66b0:	e0 e8       	ldi	r30, 0x80	; 128
    66b2:	fe ef       	ldi	r31, 0xFE	; 254
    66b4:	16 16       	cp	r1, r22
    66b6:	17 06       	cpc	r1, r23
    66b8:	e8 07       	cpc	r30, r24
    66ba:	f9 07       	cpc	r31, r25
    66bc:	70 f0       	brcs	.+28     	; 0x66da <fmax+0x32>
    66be:	12 16       	cp	r1, r18
    66c0:	13 06       	cpc	r1, r19
    66c2:	e4 07       	cpc	r30, r20
    66c4:	f5 07       	cpc	r31, r21
    66c6:	60 f0       	brcs	.+24     	; 0x66e0 <fmax+0x38>
    66c8:	ba 17       	cp	r27, r26
    66ca:	3c f0       	brlt	.+14     	; 0x66da <fmax+0x32>
    66cc:	49 f4       	brne	.+18     	; 0x66e0 <fmax+0x38>
    66ce:	62 17       	cp	r22, r18
    66d0:	73 07       	cpc	r23, r19
    66d2:	84 07       	cpc	r24, r20
    66d4:	95 07       	cpc	r25, r21
    66d6:	a7 95       	ror	r26
    66d8:	1b f4       	brvc	.+6      	; 0x66e0 <fmax+0x38>
    66da:	b9 01       	movw	r22, r18
    66dc:	ca 01       	movw	r24, r20
    66de:	ba 2f       	mov	r27, r26
    66e0:	b6 95       	lsr	r27
    66e2:	97 95       	ror	r25
    66e4:	08 95       	ret

000066e6 <__fp_cmp>:
    66e6:	99 0f       	add	r25, r25
    66e8:	00 08       	sbc	r0, r0
    66ea:	55 0f       	add	r21, r21
    66ec:	aa 0b       	sbc	r26, r26
    66ee:	e0 e8       	ldi	r30, 0x80	; 128
    66f0:	fe ef       	ldi	r31, 0xFE	; 254
    66f2:	16 16       	cp	r1, r22
    66f4:	17 06       	cpc	r1, r23
    66f6:	e8 07       	cpc	r30, r24
    66f8:	f9 07       	cpc	r31, r25
    66fa:	c0 f0       	brcs	.+48     	; 0x672c <__fp_cmp+0x46>
    66fc:	12 16       	cp	r1, r18
    66fe:	13 06       	cpc	r1, r19
    6700:	e4 07       	cpc	r30, r20
    6702:	f5 07       	cpc	r31, r21
    6704:	98 f0       	brcs	.+38     	; 0x672c <__fp_cmp+0x46>
    6706:	62 1b       	sub	r22, r18
    6708:	73 0b       	sbc	r23, r19
    670a:	84 0b       	sbc	r24, r20
    670c:	95 0b       	sbc	r25, r21
    670e:	39 f4       	brne	.+14     	; 0x671e <__fp_cmp+0x38>
    6710:	0a 26       	eor	r0, r26
    6712:	61 f0       	breq	.+24     	; 0x672c <__fp_cmp+0x46>
    6714:	23 2b       	or	r18, r19
    6716:	24 2b       	or	r18, r20
    6718:	25 2b       	or	r18, r21
    671a:	21 f4       	brne	.+8      	; 0x6724 <__fp_cmp+0x3e>
    671c:	08 95       	ret
    671e:	0a 26       	eor	r0, r26
    6720:	09 f4       	brne	.+2      	; 0x6724 <__fp_cmp+0x3e>
    6722:	a1 40       	sbci	r26, 0x01	; 1
    6724:	a6 95       	lsr	r26
    6726:	8f ef       	ldi	r24, 0xFF	; 255
    6728:	81 1d       	adc	r24, r1
    672a:	81 1d       	adc	r24, r1
    672c:	08 95       	ret

0000672e <__fp_split3>:
    672e:	57 fd       	sbrc	r21, 7
    6730:	90 58       	subi	r25, 0x80	; 128
    6732:	44 0f       	add	r20, r20
    6734:	55 1f       	adc	r21, r21
    6736:	59 f0       	breq	.+22     	; 0x674e <__fp_splitA+0x10>
    6738:	5f 3f       	cpi	r21, 0xFF	; 255
    673a:	71 f0       	breq	.+28     	; 0x6758 <__fp_splitA+0x1a>
    673c:	47 95       	ror	r20

0000673e <__fp_splitA>:
    673e:	88 0f       	add	r24, r24
    6740:	97 fb       	bst	r25, 7
    6742:	99 1f       	adc	r25, r25
    6744:	61 f0       	breq	.+24     	; 0x675e <__fp_splitA+0x20>
    6746:	9f 3f       	cpi	r25, 0xFF	; 255
    6748:	79 f0       	breq	.+30     	; 0x6768 <__fp_splitA+0x2a>
    674a:	87 95       	ror	r24
    674c:	08 95       	ret
    674e:	12 16       	cp	r1, r18
    6750:	13 06       	cpc	r1, r19
    6752:	14 06       	cpc	r1, r20
    6754:	55 1f       	adc	r21, r21
    6756:	f2 cf       	rjmp	.-28     	; 0x673c <__fp_split3+0xe>
    6758:	46 95       	lsr	r20
    675a:	f1 df       	rcall	.-30     	; 0x673e <__fp_splitA>
    675c:	08 c0       	rjmp	.+16     	; 0x676e <__fp_splitA+0x30>
    675e:	16 16       	cp	r1, r22
    6760:	17 06       	cpc	r1, r23
    6762:	18 06       	cpc	r1, r24
    6764:	99 1f       	adc	r25, r25
    6766:	f1 cf       	rjmp	.-30     	; 0x674a <__fp_splitA+0xc>
    6768:	86 95       	lsr	r24
    676a:	71 05       	cpc	r23, r1
    676c:	61 05       	cpc	r22, r1
    676e:	08 94       	sec
    6770:	08 95       	ret

00006772 <__fp_zero>:
    6772:	e8 94       	clt

00006774 <__fp_szero>:
    6774:	bb 27       	eor	r27, r27
    6776:	66 27       	eor	r22, r22
    6778:	77 27       	eor	r23, r23
    677a:	cb 01       	movw	r24, r22
    677c:	97 f9       	bld	r25, 7
    677e:	08 95       	ret

00006780 <__gesf2>:
    6780:	b2 df       	rcall	.-156    	; 0x66e6 <__fp_cmp>
    6782:	08 f4       	brcc	.+2      	; 0x6786 <__gesf2+0x6>
    6784:	8f ef       	ldi	r24, 0xFF	; 255
    6786:	08 95       	ret

00006788 <__mulsi3>:
    6788:	62 9f       	mul	r22, r18
    678a:	d0 01       	movw	r26, r0
    678c:	73 9f       	mul	r23, r19
    678e:	f0 01       	movw	r30, r0
    6790:	82 9f       	mul	r24, r18
    6792:	e0 0d       	add	r30, r0
    6794:	f1 1d       	adc	r31, r1
    6796:	64 9f       	mul	r22, r20
    6798:	e0 0d       	add	r30, r0
    679a:	f1 1d       	adc	r31, r1
    679c:	92 9f       	mul	r25, r18
    679e:	f0 0d       	add	r31, r0
    67a0:	83 9f       	mul	r24, r19
    67a2:	f0 0d       	add	r31, r0
    67a4:	74 9f       	mul	r23, r20
    67a6:	f0 0d       	add	r31, r0
    67a8:	65 9f       	mul	r22, r21
    67aa:	f0 0d       	add	r31, r0
    67ac:	99 27       	eor	r25, r25
    67ae:	72 9f       	mul	r23, r18
    67b0:	b0 0d       	add	r27, r0
    67b2:	e1 1d       	adc	r30, r1
    67b4:	f9 1f       	adc	r31, r25
    67b6:	63 9f       	mul	r22, r19
    67b8:	b0 0d       	add	r27, r0
    67ba:	e1 1d       	adc	r30, r1
    67bc:	f9 1f       	adc	r31, r25
    67be:	bd 01       	movw	r22, r26
    67c0:	cf 01       	movw	r24, r30
    67c2:	11 24       	eor	r1, r1
    67c4:	08 95       	ret

000067c6 <__udivmodhi4>:
    67c6:	aa 1b       	sub	r26, r26
    67c8:	bb 1b       	sub	r27, r27
    67ca:	51 e1       	ldi	r21, 0x11	; 17
    67cc:	07 c0       	rjmp	.+14     	; 0x67dc <__udivmodhi4_ep>

000067ce <__udivmodhi4_loop>:
    67ce:	aa 1f       	adc	r26, r26
    67d0:	bb 1f       	adc	r27, r27
    67d2:	a6 17       	cp	r26, r22
    67d4:	b7 07       	cpc	r27, r23
    67d6:	10 f0       	brcs	.+4      	; 0x67dc <__udivmodhi4_ep>
    67d8:	a6 1b       	sub	r26, r22
    67da:	b7 0b       	sbc	r27, r23

000067dc <__udivmodhi4_ep>:
    67dc:	88 1f       	adc	r24, r24
    67de:	99 1f       	adc	r25, r25
    67e0:	5a 95       	dec	r21
    67e2:	a9 f7       	brne	.-22     	; 0x67ce <__udivmodhi4_loop>
    67e4:	80 95       	com	r24
    67e6:	90 95       	com	r25
    67e8:	bc 01       	movw	r22, r24
    67ea:	cd 01       	movw	r24, r26
    67ec:	08 95       	ret

000067ee <__divmodhi4>:
    67ee:	97 fb       	bst	r25, 7
    67f0:	09 2e       	mov	r0, r25
    67f2:	07 26       	eor	r0, r23
    67f4:	0a d0       	rcall	.+20     	; 0x680a <__divmodhi4_neg1>
    67f6:	77 fd       	sbrc	r23, 7
    67f8:	04 d0       	rcall	.+8      	; 0x6802 <__divmodhi4_neg2>
    67fa:	e5 df       	rcall	.-54     	; 0x67c6 <__udivmodhi4>
    67fc:	06 d0       	rcall	.+12     	; 0x680a <__divmodhi4_neg1>
    67fe:	00 20       	and	r0, r0
    6800:	1a f4       	brpl	.+6      	; 0x6808 <__divmodhi4_exit>

00006802 <__divmodhi4_neg2>:
    6802:	70 95       	com	r23
    6804:	61 95       	neg	r22
    6806:	7f 4f       	sbci	r23, 0xFF	; 255

00006808 <__divmodhi4_exit>:
    6808:	08 95       	ret

0000680a <__divmodhi4_neg1>:
    680a:	f6 f7       	brtc	.-4      	; 0x6808 <__divmodhi4_exit>
    680c:	90 95       	com	r25
    680e:	81 95       	neg	r24
    6810:	9f 4f       	sbci	r25, 0xFF	; 255
    6812:	08 95       	ret

00006814 <__udivmodsi4>:
    6814:	a1 e2       	ldi	r26, 0x21	; 33
    6816:	1a 2e       	mov	r1, r26
    6818:	aa 1b       	sub	r26, r26
    681a:	bb 1b       	sub	r27, r27
    681c:	fd 01       	movw	r30, r26
    681e:	0d c0       	rjmp	.+26     	; 0x683a <__udivmodsi4_ep>

00006820 <__udivmodsi4_loop>:
    6820:	aa 1f       	adc	r26, r26
    6822:	bb 1f       	adc	r27, r27
    6824:	ee 1f       	adc	r30, r30
    6826:	ff 1f       	adc	r31, r31
    6828:	a2 17       	cp	r26, r18
    682a:	b3 07       	cpc	r27, r19
    682c:	e4 07       	cpc	r30, r20
    682e:	f5 07       	cpc	r31, r21
    6830:	20 f0       	brcs	.+8      	; 0x683a <__udivmodsi4_ep>
    6832:	a2 1b       	sub	r26, r18
    6834:	b3 0b       	sbc	r27, r19
    6836:	e4 0b       	sbc	r30, r20
    6838:	f5 0b       	sbc	r31, r21

0000683a <__udivmodsi4_ep>:
    683a:	66 1f       	adc	r22, r22
    683c:	77 1f       	adc	r23, r23
    683e:	88 1f       	adc	r24, r24
    6840:	99 1f       	adc	r25, r25
    6842:	1a 94       	dec	r1
    6844:	69 f7       	brne	.-38     	; 0x6820 <__udivmodsi4_loop>
    6846:	60 95       	com	r22
    6848:	70 95       	com	r23
    684a:	80 95       	com	r24
    684c:	90 95       	com	r25
    684e:	9b 01       	movw	r18, r22
    6850:	ac 01       	movw	r20, r24
    6852:	bd 01       	movw	r22, r26
    6854:	cf 01       	movw	r24, r30
    6856:	08 95       	ret

00006858 <__divmodsi4>:
    6858:	97 fb       	bst	r25, 7
    685a:	09 2e       	mov	r0, r25
    685c:	05 26       	eor	r0, r21
    685e:	0e d0       	rcall	.+28     	; 0x687c <__divmodsi4_neg1>
    6860:	57 fd       	sbrc	r21, 7
    6862:	04 d0       	rcall	.+8      	; 0x686c <__divmodsi4_neg2>
    6864:	d7 df       	rcall	.-82     	; 0x6814 <__udivmodsi4>
    6866:	0a d0       	rcall	.+20     	; 0x687c <__divmodsi4_neg1>
    6868:	00 1c       	adc	r0, r0
    686a:	38 f4       	brcc	.+14     	; 0x687a <__divmodsi4_exit>

0000686c <__divmodsi4_neg2>:
    686c:	50 95       	com	r21
    686e:	40 95       	com	r20
    6870:	30 95       	com	r19
    6872:	21 95       	neg	r18
    6874:	3f 4f       	sbci	r19, 0xFF	; 255
    6876:	4f 4f       	sbci	r20, 0xFF	; 255
    6878:	5f 4f       	sbci	r21, 0xFF	; 255

0000687a <__divmodsi4_exit>:
    687a:	08 95       	ret

0000687c <__divmodsi4_neg1>:
    687c:	f6 f7       	brtc	.-4      	; 0x687a <__divmodsi4_exit>
    687e:	90 95       	com	r25
    6880:	80 95       	com	r24
    6882:	70 95       	com	r23
    6884:	61 95       	neg	r22
    6886:	7f 4f       	sbci	r23, 0xFF	; 255
    6888:	8f 4f       	sbci	r24, 0xFF	; 255
    688a:	9f 4f       	sbci	r25, 0xFF	; 255
    688c:	08 95       	ret

0000688e <__tablejump2__>:
    688e:	ee 0f       	add	r30, r30
    6890:	ff 1f       	adc	r31, r31

00006892 <__tablejump__>:
    6892:	05 90       	lpm	r0, Z+
    6894:	f4 91       	lpm	r31, Z+
    6896:	e0 2d       	mov	r30, r0
    6898:	09 94       	ijmp

0000689a <toupper>:
    689a:	91 11       	cpse	r25, r1
    689c:	08 95       	ret
    689e:	81 56       	subi	r24, 0x61	; 97
    68a0:	8a 51       	subi	r24, 0x1A	; 26
    68a2:	08 f4       	brcc	.+2      	; 0x68a6 <toupper+0xc>
    68a4:	80 52       	subi	r24, 0x20	; 32
    68a6:	85 58       	subi	r24, 0x85	; 133
    68a8:	08 95       	ret

000068aa <_exit>:
    68aa:	f8 94       	cli

000068ac <__stop_program>:
    68ac:	ff cf       	rjmp	.-2      	; 0x68ac <__stop_program>
